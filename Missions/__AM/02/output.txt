// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix , debug ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 77 0 0
// if debug then
  19: LD_EXP 34
  23: IFFALSE 40
// begin Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// end ; PrepareDifficulty ;
  40: CALL 10281 0 0
// PrepareRussianCommander ;
  44: CALL 11746 0 0
// PrepareSouthBase ;
  48: CALL 11842 0 0
// PrepareNorthBase ;
  52: CALL 12180 0 0
// PrepareOtherRussians ;
  56: CALL 12575 0 0
// PrepareHeroes ;
  60: CALL 10602 0 0
// PrepareLisSquad ;
  64: CALL 10972 0 0
// PrepareOtherAmericans ;
  68: CALL 11285 0 0
// Action ;
  72: CALL 329 0 0
// end ;
  76: END
// function Init ; begin
  77: LD_INT 0
  79: PPUSH
// debug := false ;
  80: LD_ADDR_EXP 34
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// mission_prefix := 02_ ;
  88: LD_ADDR_EXP 33
  92: PUSH
  93: LD_STRING 02_
  95: ST_TO_ADDR
// RuSoldMinLevel := 0 ;
  96: LD_ADDR_EXP 13
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// RuSoldMaxLevel := 0 ;
 104: LD_ADDR_EXP 14
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// hpJMM := 0 ;
 112: LD_ADDR_EXP 10
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// hpBobby := 0 ;
 120: LD_ADDR_EXP 11
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// hpCyrus := 0 ;
 128: LD_ADDR_EXP 12
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// cargoEscape := 0 ;
 136: LD_ADDR_EXP 20
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// mikhailStatus := 0 ;
 144: LD_ADDR_EXP 21
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// mikhailInBase := 0 ;
 152: LD_ADDR_EXP 22
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// mikhailDepot := 0 ;
 160: LD_ADDR_EXP 23
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// tigersRespawn := 0 ;
 168: LD_ADDR_EXP 30
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// cargoRespawn := 0 ;
 176: LD_ADDR_EXP 28
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cargoSee := 0 ;
 184: LD_ADDR_EXP 29
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// lastBattle := 0 ;
 192: LD_ADDR_EXP 27
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// deadsCounter := 0 ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// spotCorpses := 0 ;
 208: LD_ADDR_EXP 32
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// southBaseDefenders := [ ] ;
 216: LD_ADDR_EXP 25
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// northBaseDefenders := [ ] ;
 223: LD_ADDR_EXP 24
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// attackGroup := [ ] ;
 230: LD_ADDR_EXP 26
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// end ;
 237: LD_VAR 0 1
 241: RET
// every 0 0$1 trigger debug do var i ;
 242: LD_EXP 34
 246: IFFALSE 326
 248: GO 250
 250: DISABLE
 251: LD_INT 0
 253: PPUSH
// begin enable ;
 254: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
 255: LD_ADDR_VAR 0 1
 259: PUSH
 260: LD_INT 22
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 21
 272: PUSH
 273: LD_INT 1
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: LD_INT 3
 282: PUSH
 283: LD_INT 24
 285: PUSH
 286: LD_INT 1000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: PUSH
 307: FOR_IN
 308: IFFALSE 324
// SetLives ( i , 1000 ) ;
 310: LD_VAR 0 1
 314: PPUSH
 315: LD_INT 1000
 317: PPUSH
 318: CALL_OW 234
 322: GO 307
 324: POP
 325: POP
// end ; end_of_file
 326: PPOPN 1
 328: END
// export function Action ; var tmp ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// InGameOn ;
 333: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
 337: LD_EXP 1
 341: PPUSH
 342: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 346: LD_ADDR_VAR 0 2
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 4
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: LD_EXP 4
 384: PUSH
 385: EMPTY
 386: LIST
 387: DIFF
 388: ST_TO_ADDR
// if Cyrus and Bobby then
 389: LD_EXP 3
 393: PUSH
 394: LD_EXP 2
 398: AND
 399: IFFALSE 729
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 401: LD_EXP 3
 405: PPUSH
 406: LD_INT 43
 408: PPUSH
 409: LD_INT 72
 411: PPUSH
 412: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 416: LD_EXP 2
 420: PPUSH
 421: LD_INT 44
 423: PPUSH
 424: LD_INT 70
 426: PPUSH
 427: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 431: LD_EXP 1
 435: PPUSH
 436: LD_INT 46
 438: PPUSH
 439: LD_INT 73
 441: PPUSH
 442: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 446: LD_EXP 3
 450: PPUSH
 451: LD_STRING D1a-Cyrus-1
 453: PPUSH
 454: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 458: LD_EXP 1
 462: PPUSH
 463: LD_STRING D1a-JMM-1
 465: PPUSH
 466: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 470: LD_EXP 3
 474: PPUSH
 475: LD_INT 37
 477: PPUSH
 478: LD_INT 66
 480: PPUSH
 481: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 485: LD_EXP 2
 489: PPUSH
 490: LD_INT 41
 492: PPUSH
 493: LD_INT 67
 495: PPUSH
 496: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 500: LD_EXP 1
 504: PPUSH
 505: LD_INT 38
 507: PPUSH
 508: LD_INT 64
 510: PPUSH
 511: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 515: LD_EXP 2
 519: PPUSH
 520: LD_STRING D1a-Bobby-2
 522: PPUSH
 523: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 527: LD_EXP 3
 531: PPUSH
 532: LD_INT 35
 534: PPUSH
 535: LD_INT 62
 537: PPUSH
 538: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 542: LD_EXP 2
 546: PPUSH
 547: LD_INT 32
 549: PPUSH
 550: LD_INT 60
 552: PPUSH
 553: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_INT 35
 564: PPUSH
 565: LD_INT 60
 567: PPUSH
 568: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 572: LD_EXP 1
 576: PPUSH
 577: LD_STRING D1a-JMM-2
 579: PPUSH
 580: CALL_OW 88
// ComWalk ( Lisa ) ;
 584: LD_EXP 4
 588: PPUSH
 589: CALL_OW 138
// wait ( 0 0$1 ) ;
 593: LD_INT 35
 595: PPUSH
 596: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 600: LD_EXP 4
 604: PPUSH
 605: LD_EXP 1
 609: PPUSH
 610: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 614: LD_EXP 1
 618: PUSH
 619: LD_EXP 3
 623: PUSH
 624: LD_EXP 2
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: LIST
 633: PPUSH
 634: LD_EXP 4
 638: PPUSH
 639: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 643: LD_VAR 0 2
 647: PUSH
 648: LD_INT 1
 650: ARRAY
 651: PPUSH
 652: LD_INT 33
 654: PPUSH
 655: LD_INT 55
 657: PPUSH
 658: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 2
 669: ARRAY
 670: PPUSH
 671: LD_INT 30
 673: PPUSH
 674: LD_INT 54
 676: PPUSH
 677: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 1
 688: ARRAY
 689: PPUSH
 690: LD_EXP 1
 694: PPUSH
 695: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 699: LD_VAR 0 2
 703: PUSH
 704: LD_INT 2
 706: ARRAY
 707: PPUSH
 708: LD_EXP 1
 712: PPUSH
 713: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 717: LD_EXP 4
 721: PPUSH
 722: LD_STRING D1a-Lisa-2
 724: PPUSH
 725: CALL_OW 88
// end ; if Cyrus and not Bobby then
 729: LD_EXP 3
 733: PUSH
 734: LD_EXP 2
 738: NOT
 739: AND
 740: IFFALSE 945
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 742: LD_EXP 3
 746: PPUSH
 747: LD_INT 43
 749: PPUSH
 750: LD_INT 72
 752: PPUSH
 753: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 757: LD_EXP 1
 761: PPUSH
 762: LD_INT 46
 764: PPUSH
 765: LD_INT 73
 767: PPUSH
 768: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 772: LD_EXP 3
 776: PPUSH
 777: LD_STRING D1a-Cyrus-1
 779: PPUSH
 780: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 784: LD_EXP 1
 788: PPUSH
 789: LD_STRING D1a-JMM-1
 791: PPUSH
 792: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 796: LD_EXP 3
 800: PPUSH
 801: LD_INT 37
 803: PPUSH
 804: LD_INT 66
 806: PPUSH
 807: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 811: LD_EXP 1
 815: PPUSH
 816: LD_INT 38
 818: PPUSH
 819: LD_INT 64
 821: PPUSH
 822: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 826: LD_EXP 3
 830: PPUSH
 831: LD_STRING D1a-Cyrus-2
 833: PPUSH
 834: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 838: LD_EXP 3
 842: PPUSH
 843: LD_INT 35
 845: PPUSH
 846: LD_INT 62
 848: PPUSH
 849: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 853: LD_EXP 1
 857: PPUSH
 858: LD_INT 35
 860: PPUSH
 861: LD_INT 60
 863: PPUSH
 864: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 868: LD_EXP 1
 872: PPUSH
 873: LD_STRING D1a-JMM-2
 875: PPUSH
 876: CALL_OW 88
// ComWalk ( Lisa ) ;
 880: LD_EXP 4
 884: PPUSH
 885: CALL_OW 138
// wait ( 0 0$1 ) ;
 889: LD_INT 35
 891: PPUSH
 892: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 896: LD_EXP 4
 900: PPUSH
 901: LD_EXP 1
 905: PPUSH
 906: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 910: LD_EXP 4
 914: PPUSH
 915: LD_STRING D1a-Lisa-2
 917: PPUSH
 918: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 922: LD_EXP 1
 926: PUSH
 927: LD_EXP 3
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PPUSH
 936: LD_EXP 4
 940: PPUSH
 941: CALL_OW 119
// end ; if not Cyrus and Bobby then
 945: LD_EXP 3
 949: NOT
 950: PUSH
 951: LD_EXP 2
 955: AND
 956: IFFALSE 1235
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 958: LD_EXP 2
 962: PPUSH
 963: LD_INT 44
 965: PPUSH
 966: LD_INT 70
 968: PPUSH
 969: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 973: LD_EXP 1
 977: PPUSH
 978: LD_INT 46
 980: PPUSH
 981: LD_INT 73
 983: PPUSH
 984: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 988: LD_EXP 2
 992: PPUSH
 993: LD_STRING D1a-Bobby-1
 995: PPUSH
 996: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
1000: LD_EXP 1
1004: PPUSH
1005: LD_STRING D1a-JMM-1
1007: PPUSH
1008: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
1012: LD_EXP 2
1016: PPUSH
1017: LD_INT 37
1019: PPUSH
1020: LD_INT 66
1022: PPUSH
1023: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
1027: LD_EXP 1
1031: PPUSH
1032: LD_INT 38
1034: PPUSH
1035: LD_INT 64
1037: PPUSH
1038: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
1042: LD_EXP 2
1046: PPUSH
1047: LD_STRING D1a-Bobby-2
1049: PPUSH
1050: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
1054: LD_EXP 2
1058: PPUSH
1059: LD_INT 35
1061: PPUSH
1062: LD_INT 62
1064: PPUSH
1065: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
1069: LD_EXP 1
1073: PPUSH
1074: LD_INT 35
1076: PPUSH
1077: LD_INT 60
1079: PPUSH
1080: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
1084: LD_EXP 1
1088: PPUSH
1089: LD_STRING D1a-JMM-2
1091: PPUSH
1092: CALL_OW 88
// ComWalk ( Lisa ) ;
1096: LD_EXP 4
1100: PPUSH
1101: CALL_OW 138
// wait ( 0 0$1 ) ;
1105: LD_INT 35
1107: PPUSH
1108: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1112: LD_EXP 4
1116: PPUSH
1117: LD_EXP 1
1121: PPUSH
1122: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
1126: LD_EXP 1
1130: PUSH
1131: LD_EXP 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PPUSH
1140: LD_EXP 4
1144: PPUSH
1145: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1149: LD_VAR 0 2
1153: PUSH
1154: LD_INT 1
1156: ARRAY
1157: PPUSH
1158: LD_INT 33
1160: PPUSH
1161: LD_INT 55
1163: PPUSH
1164: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 2
1175: ARRAY
1176: PPUSH
1177: LD_INT 30
1179: PPUSH
1180: LD_INT 54
1182: PPUSH
1183: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PPUSH
1196: LD_EXP 1
1200: PPUSH
1201: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1205: LD_VAR 0 2
1209: PUSH
1210: LD_INT 2
1212: ARRAY
1213: PPUSH
1214: LD_EXP 1
1218: PPUSH
1219: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1223: LD_EXP 4
1227: PPUSH
1228: LD_STRING D1a-Lisa-2
1230: PPUSH
1231: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1235: LD_EXP 3
1239: NOT
1240: PUSH
1241: LD_EXP 2
1245: NOT
1246: AND
1247: IFFALSE 1461
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1249: LD_EXP 1
1253: PPUSH
1254: LD_INT 37
1256: PPUSH
1257: LD_INT 66
1259: PPUSH
1260: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1264: LD_EXP 1
1268: PPUSH
1269: LD_STRING D1b-JMM-1
1271: PPUSH
1272: CALL_OW 88
// ComCrawl ( JMM ) ;
1276: LD_EXP 1
1280: PPUSH
1281: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1285: LD_EXP 1
1289: PPUSH
1290: LD_INT 35
1292: PPUSH
1293: LD_INT 60
1295: PPUSH
1296: CALL_OW 171
// wait ( 0 0$8 ) ;
1300: LD_INT 280
1302: PPUSH
1303: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1307: LD_EXP 1
1311: PPUSH
1312: LD_STRING D1b-JMM-1a
1314: PPUSH
1315: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1319: LD_EXP 1
1323: PUSH
1324: LD_EXP 4
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: PPUSH
1333: CALL_OW 138
// wait ( 0 0$1 ) ;
1337: LD_INT 35
1339: PPUSH
1340: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1344: LD_EXP 4
1348: PPUSH
1349: LD_EXP 1
1353: PPUSH
1354: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1358: LD_EXP 1
1362: PUSH
1363: EMPTY
1364: LIST
1365: PPUSH
1366: LD_EXP 4
1370: PPUSH
1371: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1375: LD_VAR 0 2
1379: PUSH
1380: LD_INT 1
1382: ARRAY
1383: PPUSH
1384: LD_INT 33
1386: PPUSH
1387: LD_INT 55
1389: PPUSH
1390: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1394: LD_VAR 0 2
1398: PUSH
1399: LD_INT 2
1401: ARRAY
1402: PPUSH
1403: LD_INT 30
1405: PPUSH
1406: LD_INT 54
1408: PPUSH
1409: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1413: LD_VAR 0 2
1417: PUSH
1418: LD_INT 1
1420: ARRAY
1421: PPUSH
1422: LD_EXP 1
1426: PPUSH
1427: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1431: LD_VAR 0 2
1435: PUSH
1436: LD_INT 2
1438: ARRAY
1439: PPUSH
1440: LD_EXP 1
1444: PPUSH
1445: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1449: LD_EXP 4
1453: PPUSH
1454: LD_STRING D1b-Lisa-1
1456: PPUSH
1457: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1461: LD_EXP 1
1465: PPUSH
1466: LD_STRING D1-JMM-1
1468: PPUSH
1469: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1473: LD_EXP 4
1477: PPUSH
1478: LD_STRING D1-Lisa-1
1480: PPUSH
1481: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1485: LD_EXP 1
1489: PPUSH
1490: LD_STRING D1-JMM-2
1492: PPUSH
1493: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1497: LD_EXP 9
1501: PPUSH
1502: LD_STRING D1-Pow-2
1504: PPUSH
1505: CALL_OW 94
// if Cyrus then
1509: LD_EXP 3
1513: IFFALSE 1539
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1515: LD_EXP 3
1519: PPUSH
1520: LD_STRING D1-Cyrus-2
1522: PPUSH
1523: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1527: LD_EXP 1
1531: PPUSH
1532: LD_STRING D1-JMM-3
1534: PPUSH
1535: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1539: LD_EXP 9
1543: PPUSH
1544: LD_STRING D1-Pow-3
1546: PPUSH
1547: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1551: LD_EXP 1
1555: PPUSH
1556: LD_STRING D1-JMM-4
1558: PPUSH
1559: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1563: LD_EXP 9
1567: PPUSH
1568: LD_STRING D1-Pow-4
1570: PPUSH
1571: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1575: LD_EXP 9
1579: PPUSH
1580: LD_STRING D1-Pow-4a
1582: PPUSH
1583: CALL_OW 94
// if Cyrus then
1587: LD_EXP 3
1591: IFFALSE 1605
// Say ( Cyrus , D1-Cyrus-4 ) ;
1593: LD_EXP 3
1597: PPUSH
1598: LD_STRING D1-Cyrus-4
1600: PPUSH
1601: CALL_OW 88
// if Bobby then
1605: LD_EXP 2
1609: IFFALSE 1647
// begin Say ( Bobby , D1-Bobby-4 ) ;
1611: LD_EXP 2
1615: PPUSH
1616: LD_STRING D1-Bobby-4
1618: PPUSH
1619: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1623: LD_EXP 4
1627: PPUSH
1628: LD_STRING D1-Lisa-4
1630: PPUSH
1631: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1635: LD_EXP 1
1639: PPUSH
1640: LD_STRING D1-JMM-5
1642: PPUSH
1643: CALL_OW 88
// end ; InGameOff ;
1647: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1651: LD_INT 22
1653: PUSH
1654: LD_INT 4
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PPUSH
1661: CALL_OW 69
1665: PUSH
1666: LD_EXP 6
1670: PUSH
1671: LD_EXP 7
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: DIFF
1680: PPUSH
1681: LD_INT 1
1683: PPUSH
1684: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1688: LD_STRING M1
1690: PPUSH
1691: CALL_OW 337
// SaveForQuickRestart ;
1695: CALL_OW 22
// end ;
1699: LD_VAR 0 1
1703: RET
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1704: LD_INT 7
1706: PPUSH
1707: LD_INT 22
1709: PUSH
1710: LD_INT 1
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PPUSH
1717: CALL_OW 70
1721: PUSH
1722: LD_INT 0
1724: GREATER
1725: IFFALSE 2138
1727: GO 1729
1729: DISABLE
// begin InGameOn ;
1730: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1734: LD_INT 22
1736: PUSH
1737: LD_INT 1
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 21
1746: PUSH
1747: LD_INT 1
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PPUSH
1758: CALL_OW 69
1762: PPUSH
1763: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1767: LD_INT 24
1769: PPUSH
1770: LD_INT 32
1772: PPUSH
1773: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1777: LD_EXP 5
1781: PPUSH
1782: LD_INT 4
1784: PPUSH
1785: LD_INT 1
1787: PPUSH
1788: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1792: LD_EXP 5
1796: PPUSH
1797: LD_INT 4
1799: PPUSH
1800: CALL_OW 336
// wait ( 0 0$1 ) ;
1804: LD_INT 35
1806: PPUSH
1807: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1811: LD_EXP 5
1815: PPUSH
1816: LD_INT 27
1818: PPUSH
1819: LD_INT 38
1821: PPUSH
1822: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1826: LD_EXP 5
1830: PPUSH
1831: LD_EXP 1
1835: PPUSH
1836: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1840: LD_INT 22
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: LD_INT 21
1852: PUSH
1853: LD_INT 1
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PPUSH
1864: CALL_OW 69
1868: PUSH
1869: LD_EXP 5
1873: PUSH
1874: EMPTY
1875: LIST
1876: DIFF
1877: PPUSH
1878: LD_EXP 5
1882: PPUSH
1883: CALL_OW 119
// wait ( 0 0$1 ) ;
1887: LD_INT 35
1889: PPUSH
1890: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1894: LD_EXP 5
1898: PPUSH
1899: LD_STRING D2a-Khat-1
1901: PPUSH
1902: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1906: LD_EXP 1
1910: PPUSH
1911: LD_STRING D2a-JMM-1
1913: PPUSH
1914: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1918: LD_EXP 5
1922: PPUSH
1923: LD_STRING D2a-Khat-2
1925: PPUSH
1926: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1930: LD_EXP 1
1934: PPUSH
1935: LD_STRING D2a-JMM-2
1937: PPUSH
1938: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1942: LD_EXP 5
1946: PPUSH
1947: LD_STRING D2a-Khat-3
1949: PPUSH
1950: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1954: LD_EXP 1
1958: PPUSH
1959: LD_STRING D2a-JMM-3
1961: PPUSH
1962: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1966: LD_EXP 5
1970: PPUSH
1971: LD_STRING D2a-Khat-4
1973: PPUSH
1974: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1978: LD_EXP 1
1982: PPUSH
1983: LD_STRING D2a-JMM-4
1985: PPUSH
1986: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1990: LD_EXP 5
1994: PPUSH
1995: LD_STRING D2a-Khat-5
1997: PPUSH
1998: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
2002: LD_EXP 1
2006: PPUSH
2007: LD_STRING D2a-JMM-5
2009: PPUSH
2010: CALL_OW 88
// InGameOff ;
2014: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) then
2018: LD_INT 22
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PUSH
2028: LD_INT 21
2030: PUSH
2031: LD_INT 1
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PUSH
2038: LD_INT 3
2040: PUSH
2041: LD_INT 24
2043: PUSH
2044: LD_INT 800
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PPUSH
2060: CALL_OW 69
2064: IFFALSE 2138
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
2066: LD_EXP 5
2070: PPUSH
2071: LD_INT 22
2073: PUSH
2074: LD_INT 1
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PUSH
2081: LD_INT 21
2083: PUSH
2084: LD_INT 1
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 3
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 1000
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: PPUSH
2113: CALL_OW 69
2117: PUSH
2118: LD_INT 1
2120: ARRAY
2121: PPUSH
2122: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
2126: LD_EXP 5
2130: PPUSH
2131: LD_STRING D2b-Khat-1
2133: PPUSH
2134: CALL_OW 88
// end ; end ;
2138: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) do var i , distanceTab , min , tmp , p ;
2139: LD_INT 15
2141: PPUSH
2142: LD_INT 22
2144: PUSH
2145: LD_INT 1
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PPUSH
2152: CALL_OW 70
2156: IFFALSE 3353
2158: GO 2160
2160: DISABLE
2161: LD_INT 0
2163: PPUSH
2164: PPUSH
2165: PPUSH
2166: PPUSH
2167: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2168: LD_ADDR_VAR 0 2
2172: PUSH
2173: LD_INT 999
2175: PUSH
2176: LD_INT 999
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2186: LD_ADDR_VAR 0 4
2190: PUSH
2191: LD_INT 22
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 21
2203: PUSH
2204: LD_INT 1
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PPUSH
2215: CALL_OW 69
2219: PUSH
2220: LD_EXP 1
2224: PUSH
2225: LD_EXP 2
2229: PUSH
2230: LD_EXP 3
2234: PUSH
2235: LD_EXP 4
2239: PUSH
2240: LD_EXP 5
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: DIFF
2252: ST_TO_ADDR
// PrepareDeadSoldiers ;
2253: CALL 11427 0 0
// spotCorpses = 1 ;
2257: LD_ADDR_EXP 32
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2265: LD_INT 70
2267: PPUSH
2268: CALL_OW 67
// InGameOn ;
2272: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2276: LD_INT 23
2278: PPUSH
2279: LD_INT 12
2281: PPUSH
2282: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: LD_VAR 0 2
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: PUSH
2300: LD_INT 2
2302: ARRAY
2303: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2304: LD_ADDR_VAR 0 1
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 1
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 21
2321: PUSH
2322: LD_INT 1
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PPUSH
2333: CALL_OW 69
2337: PUSH
2338: LD_EXP 1
2342: PUSH
2343: LD_EXP 5
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: DIFF
2352: PUSH
2353: FOR_IN
2354: IFFALSE 2405
// if IsOK ( i ) then
2356: LD_VAR 0 1
2360: PPUSH
2361: CALL_OW 302
2365: IFFALSE 2403
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2367: LD_ADDR_VAR 0 2
2371: PUSH
2372: LD_VAR 0 2
2376: PUSH
2377: LD_VAR 0 1
2381: PUSH
2382: LD_VAR 0 1
2386: PPUSH
2387: LD_INT 16
2389: PPUSH
2390: CALL_OW 299
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PUSH
2399: EMPTY
2400: LIST
2401: ADD
2402: ST_TO_ADDR
2403: GO 2353
2405: POP
2406: POP
// for i = 2 to distanceTab do
2407: LD_ADDR_VAR 0 1
2411: PUSH
2412: DOUBLE
2413: LD_INT 2
2415: DEC
2416: ST_TO_ADDR
2417: LD_VAR 0 2
2421: PUSH
2422: FOR_TO
2423: IFFALSE 2469
// if distanceTab [ i ] [ 2 ] < min then
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PUSH
2436: LD_INT 2
2438: ARRAY
2439: PUSH
2440: LD_VAR 0 3
2444: LESS
2445: IFFALSE 2467
// min = distanceTab [ i ] [ 2 ] ;
2447: LD_ADDR_VAR 0 3
2451: PUSH
2452: LD_VAR 0 2
2456: PUSH
2457: LD_VAR 0 1
2461: ARRAY
2462: PUSH
2463: LD_INT 2
2465: ARRAY
2466: ST_TO_ADDR
2467: GO 2422
2469: POP
2470: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2471: LD_ADDR_VAR 0 1
2475: PUSH
2476: LD_INT 22
2478: PUSH
2479: LD_INT 1
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: LD_INT 21
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: PPUSH
2500: CALL_OW 69
2504: PUSH
2505: LD_EXP 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: DIFF
2513: PUSH
2514: FOR_IN
2515: IFFALSE 2585
// begin ComMoveToArea ( i , DeadCutscene ) ;
2517: LD_VAR 0 1
2521: PPUSH
2522: LD_INT 28
2524: PPUSH
2525: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2529: LD_EXP 1
2533: PPUSH
2534: LD_INT 30
2536: PPUSH
2537: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2541: LD_VAR 0 1
2545: PPUSH
2546: LD_INT 23
2548: PPUSH
2549: LD_INT 11
2551: PPUSH
2552: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2556: LD_EXP 1
2560: PPUSH
2561: LD_INT 23
2563: PPUSH
2564: LD_INT 11
2566: PPUSH
2567: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2571: LD_EXP 35
2575: PPUSH
2576: LD_INT 250
2578: PPUSH
2579: CALL_OW 234
// end ;
2583: GO 2514
2585: POP
2586: POP
// for i = 2 to distanceTab do
2587: LD_ADDR_VAR 0 1
2591: PUSH
2592: DOUBLE
2593: LD_INT 2
2595: DEC
2596: ST_TO_ADDR
2597: LD_VAR 0 2
2601: PUSH
2602: FOR_TO
2603: IFFALSE 2989
// begin if distanceTab [ i ] [ 2 ] = min then
2605: LD_VAR 0 2
2609: PUSH
2610: LD_VAR 0 1
2614: ARRAY
2615: PUSH
2616: LD_INT 2
2618: ARRAY
2619: PUSH
2620: LD_VAR 0 3
2624: EQUAL
2625: IFFALSE 2987
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2627: LD_VAR 0 2
2631: PUSH
2632: LD_VAR 0 1
2636: ARRAY
2637: PUSH
2638: LD_INT 1
2640: ARRAY
2641: PUSH
2642: LD_EXP 2
2646: EQUAL
2647: IFFALSE 2661
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2649: LD_EXP 2
2653: PPUSH
2654: LD_STRING DCorpses-Bobby-1
2656: PPUSH
2657: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2661: LD_VAR 0 2
2665: PUSH
2666: LD_VAR 0 1
2670: ARRAY
2671: PUSH
2672: LD_INT 1
2674: ARRAY
2675: PUSH
2676: LD_EXP 3
2680: EQUAL
2681: IFFALSE 2695
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2683: LD_EXP 3
2687: PPUSH
2688: LD_STRING DCorpses-Cyrus-1
2690: PPUSH
2691: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2695: LD_VAR 0 2
2699: PUSH
2700: LD_VAR 0 1
2704: ARRAY
2705: PUSH
2706: LD_INT 1
2708: ARRAY
2709: PUSH
2710: LD_EXP 4
2714: EQUAL
2715: IFFALSE 2729
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2717: LD_EXP 4
2721: PPUSH
2722: LD_STRING DCorpses-Lisa-1
2724: PPUSH
2725: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2729: LD_VAR 0 2
2733: PUSH
2734: LD_VAR 0 1
2738: ARRAY
2739: PUSH
2740: LD_INT 1
2742: ARRAY
2743: PUSH
2744: LD_VAR 0 4
2748: PUSH
2749: LD_INT 1
2751: ARRAY
2752: EQUAL
2753: PUSH
2754: LD_VAR 0 4
2758: PUSH
2759: LD_INT 1
2761: ARRAY
2762: PPUSH
2763: CALL_OW 258
2767: PUSH
2768: LD_INT 1
2770: EQUAL
2771: AND
2772: IFFALSE 2790
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2774: LD_VAR 0 4
2778: PUSH
2779: LD_INT 1
2781: ARRAY
2782: PPUSH
2783: LD_STRING DCorpses-Sol1-1
2785: PPUSH
2786: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2790: LD_VAR 0 2
2794: PUSH
2795: LD_VAR 0 1
2799: ARRAY
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PUSH
2805: LD_VAR 0 4
2809: PUSH
2810: LD_INT 1
2812: ARRAY
2813: EQUAL
2814: PUSH
2815: LD_VAR 0 4
2819: PUSH
2820: LD_INT 1
2822: ARRAY
2823: PPUSH
2824: CALL_OW 258
2828: PUSH
2829: LD_INT 2
2831: EQUAL
2832: AND
2833: IFFALSE 2851
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2835: LD_VAR 0 4
2839: PUSH
2840: LD_INT 1
2842: ARRAY
2843: PPUSH
2844: LD_STRING DCorpses-FSol1-1
2846: PPUSH
2847: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2851: LD_VAR 0 2
2855: PUSH
2856: LD_VAR 0 1
2860: ARRAY
2861: PUSH
2862: LD_INT 1
2864: ARRAY
2865: PUSH
2866: LD_VAR 0 4
2870: PUSH
2871: LD_INT 2
2873: ARRAY
2874: EQUAL
2875: PUSH
2876: LD_VAR 0 4
2880: PUSH
2881: LD_INT 2
2883: ARRAY
2884: PPUSH
2885: CALL_OW 258
2889: PUSH
2890: LD_INT 1
2892: EQUAL
2893: AND
2894: IFFALSE 2912
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2896: LD_VAR 0 4
2900: PUSH
2901: LD_INT 2
2903: ARRAY
2904: PPUSH
2905: LD_STRING DCorpses-Sol1-1
2907: PPUSH
2908: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2912: LD_VAR 0 2
2916: PUSH
2917: LD_VAR 0 1
2921: ARRAY
2922: PUSH
2923: LD_INT 1
2925: ARRAY
2926: PUSH
2927: LD_VAR 0 4
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: EQUAL
2936: PUSH
2937: LD_VAR 0 4
2941: PUSH
2942: LD_INT 2
2944: ARRAY
2945: PPUSH
2946: CALL_OW 258
2950: PUSH
2951: LD_INT 2
2953: EQUAL
2954: AND
2955: IFFALSE 2973
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2957: LD_VAR 0 4
2961: PUSH
2962: LD_INT 2
2964: ARRAY
2965: PPUSH
2966: LD_STRING DCorpses-FSol1-1
2968: PPUSH
2969: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2973: LD_EXP 35
2977: PPUSH
2978: LD_INT 150
2980: PPUSH
2981: CALL_OW 234
// break ;
2985: GO 2989
// end ; end ;
2987: GO 2602
2989: POP
2990: POP
// p := 0 ;
2991: LD_ADDR_VAR 0 5
2995: PUSH
2996: LD_INT 0
2998: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2999: LD_INT 35
3001: PPUSH
3002: CALL_OW 67
// p := p + 1 ;
3006: LD_ADDR_VAR 0 5
3010: PUSH
3011: LD_VAR 0 5
3015: PUSH
3016: LD_INT 1
3018: PLUS
3019: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
3020: LD_ADDR_VAR 0 1
3024: PUSH
3025: LD_INT 22
3027: PUSH
3028: LD_INT 1
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 21
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 69
3053: PUSH
3054: LD_EXP 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: DIFF
3062: PUSH
3063: FOR_IN
3064: IFFALSE 3134
// begin ComMoveToArea ( i , DeadCutscene ) ;
3066: LD_VAR 0 1
3070: PPUSH
3071: LD_INT 28
3073: PPUSH
3074: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
3078: LD_EXP 1
3082: PPUSH
3083: LD_INT 30
3085: PPUSH
3086: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_INT 23
3097: PPUSH
3098: LD_INT 11
3100: PPUSH
3101: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
3105: LD_EXP 1
3109: PPUSH
3110: LD_INT 23
3112: PPUSH
3113: LD_INT 11
3115: PPUSH
3116: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
3120: LD_EXP 35
3124: PPUSH
3125: LD_INT 250
3127: PPUSH
3128: CALL_OW 234
// end ;
3132: GO 3063
3134: POP
3135: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3136: LD_EXP 1
3140: PPUSH
3141: LD_INT 30
3143: PPUSH
3144: CALL_OW 308
3148: PUSH
3149: LD_VAR 0 5
3153: PUSH
3154: LD_INT 16
3156: GREATEREQUAL
3157: OR
3158: IFFALSE 2999
// wait ( 0 0$1 ) ;
3160: LD_INT 35
3162: PPUSH
3163: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING DCorpses-JMM-1
3174: PPUSH
3175: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3179: LD_EXP 35
3183: PPUSH
3184: LD_INT 100
3186: PPUSH
3187: CALL_OW 234
// if IsOK ( Khatam ) then
3191: LD_EXP 5
3195: PPUSH
3196: CALL_OW 302
3200: IFFALSE 3337
// begin repeat wait ( 0 0$1 ) ;
3202: LD_INT 35
3204: PPUSH
3205: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3209: LD_EXP 5
3213: PPUSH
3214: LD_EXP 35
3218: PPUSH
3219: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3223: LD_EXP 5
3227: PPUSH
3228: LD_EXP 35
3232: PPUSH
3233: CALL_OW 296
3237: PUSH
3238: LD_INT 2
3240: LESS
3241: IFFALSE 3202
// spotCorpses = 0 ;
3243: LD_ADDR_EXP 32
3247: PUSH
3248: LD_INT 0
3250: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3251: LD_EXP 35
3255: PPUSH
3256: LD_INT 10
3258: PPUSH
3259: CALL_OW 234
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// KillUnit ( DyingSold ) ;
3270: LD_EXP 35
3274: PPUSH
3275: CALL_OW 66
// wait ( 0 0$1 ) ;
3279: LD_INT 35
3281: PPUSH
3282: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3286: LD_EXP 1
3290: PUSH
3291: LD_EXP 5
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PPUSH
3300: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3304: LD_EXP 5
3308: PPUSH
3309: LD_EXP 1
3313: PPUSH
3314: CALL_OW 119
// wait ( 0 0$1 ) ;
3318: LD_INT 35
3320: PPUSH
3321: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3325: LD_EXP 5
3329: PPUSH
3330: LD_STRING DCorpses-Khat-1
3332: PPUSH
3333: CALL_OW 88
// end ; InGameOff ;
3337: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3341: LD_EXP 1
3345: PPUSH
3346: LD_STRING DCorpses-JMM-2
3348: PPUSH
3349: CALL_OW 88
// end ;
3353: PPOPN 5
3355: END
// every 0 0$1 trigger spotCorpses = 1 do
3356: LD_EXP 32
3360: PUSH
3361: LD_INT 1
3363: EQUAL
3364: IFFALSE 3382
3366: GO 3368
3368: DISABLE
// begin enable ;
3369: ENABLE
// SetLives ( DyingSold , 10 ) ;
3370: LD_EXP 35
3374: PPUSH
3375: LD_INT 10
3377: PPUSH
3378: CALL_OW 234
// end ;
3382: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3383: LD_INT 8
3385: PPUSH
3386: LD_INT 22
3388: PUSH
3389: LD_INT 1
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: PPUSH
3396: CALL_OW 70
3400: PUSH
3401: LD_INT 22
3403: PUSH
3404: LD_INT 1
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: PPUSH
3411: CALL_OW 69
3415: PPUSH
3416: LD_EXP 7
3420: PPUSH
3421: CALL_OW 74
3425: PPUSH
3426: LD_EXP 7
3430: PPUSH
3431: CALL_OW 296
3435: PUSH
3436: LD_INT 13
3438: LESS
3439: OR
3440: IFFALSE 3621
3442: GO 3444
3444: DISABLE
3445: LD_INT 0
3447: PPUSH
// begin InGameOn ;
3448: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3452: LD_EXP 7
3456: PPUSH
3457: LD_INT 250
3459: PPUSH
3460: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 , 700 ] [ Difficulty ] ) ;
3464: LD_EXP 6
3468: PPUSH
3469: LD_INT 1000
3471: PUSH
3472: LD_INT 800
3474: PUSH
3475: LD_INT 750
3477: PUSH
3478: LD_INT 700
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: PUSH
3487: LD_OWVAR 67
3491: ARRAY
3492: PPUSH
3493: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3497: LD_INT 3
3499: PPUSH
3500: LD_INT 4
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3513: LD_EXP 6
3517: PUSH
3518: LD_EXP 7
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PPUSH
3527: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) union FilterAllUnits ( [ f_side , 4 ] ) do
3531: LD_ADDR_VAR 0 1
3535: PUSH
3536: LD_INT 9
3538: PPUSH
3539: LD_INT 22
3541: PUSH
3542: LD_INT 3
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PPUSH
3549: CALL_OW 70
3553: PUSH
3554: LD_INT 22
3556: PUSH
3557: LD_INT 4
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PPUSH
3564: CALL_OW 69
3568: UNION
3569: PUSH
3570: FOR_IN
3571: IFFALSE 3584
// ComFree ( i ) ;
3573: LD_VAR 0 1
3577: PPUSH
3578: CALL_OW 139
3582: GO 3570
3584: POP
3585: POP
// wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// InGameOff ;
3593: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3597: LD_EXP 6
3601: PPUSH
3602: LD_STRING DF-Sol1-1
3604: PPUSH
3605: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3609: LD_EXP 1
3613: PPUSH
3614: LD_STRING DF-JMM-1
3616: PPUSH
3617: CALL_OW 88
// end ;
3621: PPOPN 1
3623: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3624: LD_INT 19
3626: PPUSH
3627: LD_INT 22
3629: PUSH
3630: LD_INT 3
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 70
3641: PUSH
3642: LD_INT 0
3644: EQUAL
3645: IFFALSE 3754
3647: GO 3649
3649: DISABLE
// begin if not IsDead ( Brian ) then
3650: LD_EXP 6
3654: PPUSH
3655: CALL_OW 301
3659: NOT
3660: IFFALSE 3674
// SetSide ( Brian , 1 ) ;
3662: LD_EXP 6
3666: PPUSH
3667: LD_INT 1
3669: PPUSH
3670: CALL_OW 235
// if not IsDead ( Jerry ) then
3674: LD_EXP 7
3678: PPUSH
3679: CALL_OW 301
3683: NOT
3684: IFFALSE 3698
// SetSide ( Jerry , 1 ) ;
3686: LD_EXP 7
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3698: LD_INT 22
3700: PUSH
3701: LD_INT 1
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PUSH
3708: LD_INT 25
3710: PUSH
3711: LD_INT 4
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PPUSH
3722: CALL_OW 69
3726: IFFALSE 3742
// Say ( JMM , DFa-JMM-1 ) else
3728: LD_EXP 1
3732: PPUSH
3733: LD_STRING DFa-JMM-1
3735: PPUSH
3736: CALL_OW 88
3740: GO 3754
// Say ( JMM , DFa-JMM-1a ) ;
3742: LD_EXP 1
3746: PPUSH
3747: LD_STRING DFa-JMM-1a
3749: PPUSH
3750: CALL_OW 88
// end ;
3754: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3755: LD_INT 19
3757: PPUSH
3758: LD_INT 22
3760: PUSH
3761: LD_INT 3
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PPUSH
3768: CALL_OW 70
3772: PUSH
3773: LD_INT 0
3775: EQUAL
3776: PUSH
3777: LD_EXP 6
3781: PPUSH
3782: CALL_OW 302
3786: NOT
3787: AND
3788: IFFALSE 3874
3790: GO 3792
3792: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3793: LD_INT 35
3795: PPUSH
3796: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3800: LD_EXP 6
3804: PPUSH
3805: CALL_OW 256
3809: PUSH
3810: LD_INT 250
3812: GREATER
3813: IFFALSE 3793
// Say ( Brian , DFb-Sol1-1 ) ;
3815: LD_EXP 6
3819: PPUSH
3820: LD_STRING DFb-Sol1-1
3822: PPUSH
3823: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3827: LD_EXP 6
3831: PPUSH
3832: LD_INT 78
3834: PPUSH
3835: LD_INT 74
3837: PPUSH
3838: CALL_OW 111
// if IsDead ( Jerry ) then
3842: LD_EXP 7
3846: PPUSH
3847: CALL_OW 301
3851: IFFALSE 3867
// Say ( Brian , DFb-Sol1-1a ) else
3853: LD_EXP 6
3857: PPUSH
3858: LD_STRING DFb-Sol1-1a
3860: PPUSH
3861: CALL_OW 88
3865: GO 3874
// SetAchievement ( ACH_JERRY ) ;
3867: LD_STRING ACH_JERRY
3869: PPUSH
3870: CALL_OW 543
// end ;
3874: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3875: LD_INT 22
3877: PUSH
3878: LD_INT 1
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PUSH
3885: LD_INT 21
3887: PUSH
3888: LD_INT 2
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PPUSH
3899: CALL_OW 69
3903: PUSH
3904: LD_INT 0
3906: EQUAL
3907: IFFALSE 3999
3909: GO 3911
3911: DISABLE
3912: LD_INT 0
3914: PPUSH
// begin enable ;
3915: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3916: LD_ADDR_VAR 0 1
3920: PUSH
3921: LD_INT 22
3923: PUSH
3924: LD_INT 3
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 21
3933: PUSH
3934: LD_INT 3
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: LD_INT 30
3943: PUSH
3944: LD_INT 31
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: PPUSH
3956: CALL_OW 69
3960: PUSH
3961: FOR_IN
3962: IFFALSE 3997
// begin if See ( 1 , i ) then
3964: LD_INT 1
3966: PPUSH
3967: LD_VAR 0 1
3971: PPUSH
3972: CALL_OW 292
3976: IFFALSE 3995
// begin disable ;
3978: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3979: LD_EXP 1
3983: PPUSH
3984: LD_STRING DX1-JMM-1
3986: PPUSH
3987: CALL_OW 88
// exit ;
3991: POP
3992: POP
3993: GO 3999
// end ; end ;
3995: GO 3961
3997: POP
3998: POP
// end ;
3999: PPOPN 1
4001: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 11
4007: PPUSH
4008: CALL_OW 294
4012: IFFALSE 4275
4014: GO 4016
4016: DISABLE
4017: LD_INT 0
4019: PPUSH
4020: PPUSH
4021: PPUSH
// begin DialogueOn ;
4022: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
4026: LD_INT 11
4028: PPUSH
4029: LD_INT 22
4031: PUSH
4032: LD_INT 3
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PUSH
4039: LD_INT 21
4041: PUSH
4042: LD_INT 1
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PPUSH
4053: CALL_OW 70
4057: PUSH
4058: LD_INT 1
4060: ARRAY
4061: PPUSH
4062: LD_STRING DX3-Rus1-1
4064: PPUSH
4065: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
4069: LD_EXP 1
4073: PPUSH
4074: LD_STRING DX3-JMM-1
4076: PPUSH
4077: CALL_OW 88
// DialogueOff ;
4081: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
4085: LD_ADDR_VAR 0 1
4089: PUSH
4090: LD_INT 11
4092: PPUSH
4093: LD_INT 22
4095: PUSH
4096: LD_INT 3
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: LD_INT 25
4105: PUSH
4106: LD_INT 1
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PPUSH
4117: CALL_OW 70
4121: PUSH
4122: FOR_IN
4123: IFFALSE 4143
// southBaseDefenders = southBaseDefenders ^ i ;
4125: LD_ADDR_EXP 25
4129: PUSH
4130: LD_EXP 25
4134: PUSH
4135: LD_VAR 0 1
4139: ADD
4140: ST_TO_ADDR
4141: GO 4122
4143: POP
4144: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 , 0 0$2 ] [ Difficulty ] ) ;
4145: LD_INT 175
4147: PUSH
4148: LD_INT 140
4150: PUSH
4151: LD_INT 105
4153: PUSH
4154: LD_INT 70
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_OWVAR 67
4167: ARRAY
4168: PPUSH
4169: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4173: LD_ADDR_VAR 0 3
4177: PUSH
4178: LD_INT 22
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 21
4190: PUSH
4191: LD_INT 1
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 25
4200: PUSH
4201: LD_INT 3
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: LIST
4212: PPUSH
4213: CALL_OW 69
4217: ST_TO_ADDR
// if not mech then
4218: LD_VAR 0 3
4222: NOT
4223: IFFALSE 4227
// exit ;
4225: GO 4275
// ComExitBuilding ( mech ) ;
4227: LD_VAR 0 3
4231: PPUSH
4232: CALL_OW 122
// wait ( 0 0$1 ) ;
4236: LD_INT 35
4238: PPUSH
4239: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4243: LD_VAR 0 3
4247: PUSH
4248: LD_INT 1
4250: ARRAY
4251: PPUSH
4252: LD_INT 5
4254: PPUSH
4255: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4259: LD_VAR 0 3
4263: PUSH
4264: LD_INT 2
4266: ARRAY
4267: PPUSH
4268: LD_INT 4
4270: PPUSH
4271: CALL_OW 180
// end ;
4275: PPOPN 3
4277: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4278: LD_INT 1
4280: PPUSH
4281: LD_INT 5
4283: PPUSH
4284: CALL_OW 292
4288: PUSH
4289: LD_INT 1
4291: PPUSH
4292: LD_INT 4
4294: PPUSH
4295: CALL_OW 292
4299: OR
4300: IFFALSE 4384
4302: GO 4304
4304: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4305: LD_INT 5
4307: PUSH
4308: LD_INT 4
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PPUSH
4315: CALL_OW 85
// if IsOK ( Bobby ) then
4319: LD_EXP 2
4323: PPUSH
4324: CALL_OW 302
4328: IFFALSE 4364
// begin DialogueOn ;
4330: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4334: LD_EXP 2
4338: PPUSH
4339: LD_STRING DX2-Bobby-1
4341: PPUSH
4342: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4346: LD_EXP 1
4350: PPUSH
4351: LD_STRING DX2-JMM-1a
4353: PPUSH
4354: CALL_OW 88
// DialogueOff ;
4358: CALL_OW 7
// end else
4362: GO 4384
// begin DialogueOn ;
4364: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4368: LD_EXP 1
4372: PPUSH
4373: LD_STRING DX2-JMM-1
4375: PPUSH
4376: CALL_OW 88
// DialogueOff ;
4380: CALL_OW 7
// end ; end ;
4384: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4385: LD_INT 22
4387: PUSH
4388: LD_INT 1
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PUSH
4395: LD_INT 23
4397: PUSH
4398: LD_INT 3
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PUSH
4405: LD_INT 21
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 34
4417: PUSH
4418: LD_INT 42
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: IFFALSE 4856
4437: GO 4439
4439: DISABLE
4440: LD_INT 0
4442: PPUSH
4443: PPUSH
4444: PPUSH
4445: PPUSH
4446: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4447: LD_ADDR_VAR 0 1
4451: PUSH
4452: LD_INT 22
4454: PUSH
4455: LD_INT 1
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PUSH
4462: LD_INT 23
4464: PUSH
4465: LD_INT 3
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 2
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 34
4484: PUSH
4485: LD_INT 42
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: PPUSH
4498: CALL_OW 69
4502: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4503: LD_ADDR_VAR 0 3
4507: PUSH
4508: LD_INT 22
4510: PUSH
4511: LD_INT 1
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: LD_INT 21
4520: PUSH
4521: LD_INT 1
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: LD_INT 26
4530: PUSH
4531: LD_INT 1
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: PPUSH
4543: CALL_OW 69
4547: PUSH
4548: LD_EXP 1
4552: PUSH
4553: LD_EXP 3
4557: PUSH
4558: LD_EXP 2
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: LIST
4567: DIFF
4568: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4569: LD_ADDR_VAR 0 4
4573: PUSH
4574: LD_INT 22
4576: PUSH
4577: LD_INT 1
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 21
4586: PUSH
4587: LD_INT 1
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 26
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 69
4613: PUSH
4614: LD_EXP 4
4618: PUSH
4619: EMPTY
4620: LIST
4621: DIFF
4622: ST_TO_ADDR
// if not tmp then
4623: LD_VAR 0 1
4627: NOT
4628: IFFALSE 4632
// exit ;
4630: GO 4856
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4632: LD_ADDR_VAR 0 2
4636: PUSH
4637: LD_VAR 0 1
4641: PUSH
4642: LD_INT 1
4644: ARRAY
4645: PPUSH
4646: CALL_OW 311
4650: ST_TO_ADDR
// if not speaker then
4651: LD_VAR 0 2
4655: NOT
4656: IFFALSE 4660
// exit ;
4658: GO 4856
// DialogueOn ;
4660: CALL_OW 6
// if speaker = JMM then
4664: LD_VAR 0 2
4668: PUSH
4669: LD_EXP 1
4673: EQUAL
4674: IFFALSE 4708
// begin if Lisa then
4676: LD_EXP 4
4680: IFFALSE 4694
// Say ( Lisa , DX2b-Lisa-1 ) ;
4682: LD_EXP 4
4686: PPUSH
4687: LD_STRING DX2b-Lisa-1
4689: PPUSH
4690: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4694: LD_EXP 1
4698: PPUSH
4699: LD_STRING DX2b-JMM-1
4701: PPUSH
4702: CALL_OW 88
// end else
4706: GO 4852
// begin Say ( JMM , DX2a-JMM-1 ) ;
4708: LD_EXP 1
4712: PPUSH
4713: LD_STRING DX2a-JMM-1
4715: PPUSH
4716: CALL_OW 88
// if speaker = Bobby then
4720: LD_VAR 0 2
4724: PUSH
4725: LD_EXP 2
4729: EQUAL
4730: IFFALSE 4744
// Say ( Bobby , DX2a-Bobby-1 ) ;
4732: LD_EXP 2
4736: PPUSH
4737: LD_STRING DX2a-Bobby-1
4739: PPUSH
4740: CALL_OW 88
// if speaker = Cyrus then
4744: LD_VAR 0 2
4748: PUSH
4749: LD_EXP 3
4753: EQUAL
4754: IFFALSE 4768
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4756: LD_EXP 3
4760: PPUSH
4761: LD_STRING DX2a-Cyrus-1
4763: PPUSH
4764: CALL_OW 88
// if speaker = Lisa then
4768: LD_VAR 0 2
4772: PUSH
4773: LD_EXP 4
4777: EQUAL
4778: IFFALSE 4792
// Say ( Lisa , DX2a-Lisa-1 ) ;
4780: LD_EXP 4
4784: PPUSH
4785: LD_STRING DX2a-Lisa-1
4787: PPUSH
4788: CALL_OW 88
// if speaker in temp1 then
4792: LD_VAR 0 2
4796: PUSH
4797: LD_VAR 0 3
4801: IN
4802: IFFALSE 4816
// Say ( speaker , DX2a-Sol1-1 ) ;
4804: LD_VAR 0 2
4808: PPUSH
4809: LD_STRING DX2a-Sol1-1
4811: PPUSH
4812: CALL_OW 88
// if speaker in temp2 then
4816: LD_VAR 0 2
4820: PUSH
4821: LD_VAR 0 4
4825: IN
4826: IFFALSE 4840
// Say ( speaker , DX2a-FSol1-1 ) ;
4828: LD_VAR 0 2
4832: PPUSH
4833: LD_STRING DX2a-FSol1-1
4835: PPUSH
4836: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4840: LD_EXP 1
4844: PPUSH
4845: LD_STRING DX2a-JMM-2
4847: PPUSH
4848: CALL_OW 88
// end ; DialogueOff ;
4852: CALL_OW 7
// end ;
4856: PPOPN 5
4858: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4859: LD_INT 1
4861: PPUSH
4862: CALL_OW 255
4866: PUSH
4867: LD_INT 1
4869: EQUAL
4870: PUSH
4871: LD_INT 10
4873: PPUSH
4874: CALL_OW 255
4878: PUSH
4879: LD_INT 1
4881: EQUAL
4882: OR
4883: IFFALSE 4943
4885: GO 4887
4887: DISABLE
// begin DialogueOn ;
4888: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4892: LD_EXP 1
4896: PPUSH
4897: LD_STRING D3-JMM-1
4899: PPUSH
4900: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4904: LD_EXP 9
4908: PPUSH
4909: LD_STRING D3-Pow-1
4911: PPUSH
4912: CALL_OW 94
// if IsOK ( Cyrus ) then
4916: LD_EXP 3
4920: PPUSH
4921: CALL_OW 302
4925: IFFALSE 4939
// Say ( Cyrus , D3-Cyrus-1 ) ;
4927: LD_EXP 3
4931: PPUSH
4932: LD_STRING D3-Cyrus-1
4934: PPUSH
4935: CALL_OW 88
// DialogueOff ;
4939: CALL_OW 7
// end ;
4943: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , tmp , i ;
4944: LD_INT 1
4946: PPUSH
4947: CALL_OW 255
4951: PUSH
4952: LD_INT 1
4954: EQUAL
4955: PUSH
4956: LD_INT 10
4958: PPUSH
4959: CALL_OW 255
4963: PUSH
4964: LD_INT 1
4966: EQUAL
4967: AND
4968: IFFALSE 6358
4970: GO 4972
4972: DISABLE
4973: LD_INT 0
4975: PPUSH
4976: PPUSH
4977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4978: LD_ADDR_VAR 0 2
4982: PUSH
4983: LD_INT 22
4985: PUSH
4986: LD_INT 3
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 21
4995: PUSH
4996: LD_INT 1
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PPUSH
5007: CALL_OW 69
5011: ST_TO_ADDR
// if tmp then
5012: LD_VAR 0 2
5016: IFFALSE 5077
// begin for i in tmp do
5018: LD_ADDR_VAR 0 3
5022: PUSH
5023: LD_VAR 0 2
5027: PUSH
5028: FOR_IN
5029: IFFALSE 5075
// begin if IsInUnit ( i ) then
5031: LD_VAR 0 3
5035: PPUSH
5036: CALL_OW 310
5040: IFFALSE 5051
// ComExitBuilding ( i ) ;
5042: LD_VAR 0 3
5046: PPUSH
5047: CALL_OW 122
// wait ( 0 0$1 ) ;
5051: LD_INT 35
5053: PPUSH
5054: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
5058: LD_VAR 0 3
5062: PPUSH
5063: LD_INT 54
5065: PPUSH
5066: LD_INT 17
5068: PPUSH
5069: CALL_OW 174
// end ;
5073: GO 5028
5075: POP
5076: POP
// end ; wait ( 0 0$03 ) ;
5077: LD_INT 105
5079: PPUSH
5080: CALL_OW 67
// DialogueOn ;
5084: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5088: LD_EXP 1
5092: PPUSH
5093: LD_STRING D3a-JMM-1
5095: PPUSH
5096: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5100: LD_EXP 9
5104: PPUSH
5105: LD_STRING D3a-Pow-1
5107: PPUSH
5108: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5112: LD_EXP 1
5116: PPUSH
5117: LD_STRING D3a-JMM-2
5119: PPUSH
5120: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5124: LD_EXP 9
5128: PPUSH
5129: LD_STRING D3a-Pow-2
5131: PPUSH
5132: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5136: LD_EXP 1
5140: PPUSH
5141: LD_STRING D3a-JMM-3
5143: PPUSH
5144: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5148: LD_EXP 9
5152: PPUSH
5153: LD_STRING D3a-Pow-3
5155: PPUSH
5156: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5160: LD_EXP 1
5164: PPUSH
5165: LD_STRING D3a-JMM-4
5167: PPUSH
5168: CALL_OW 88
// DialogueOff ;
5172: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5176: LD_STRING M2
5178: PPUSH
5179: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5183: LD_EXP 1
5187: PPUSH
5188: LD_STRING D3b-JMM-1
5190: PPUSH
5191: CALL_OW 88
// Hint ( Depot2 ) ;
5195: LD_STRING Depot2
5197: PPUSH
5198: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5202: LD_INT 35
5204: PPUSH
5205: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5209: LD_INT 22
5211: PPUSH
5212: LD_INT 22
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 25
5224: PUSH
5225: LD_INT 2
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PPUSH
5236: CALL_OW 70
5240: PUSH
5241: LD_INT 22
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 21
5253: PUSH
5254: LD_INT 1
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL_OW 69
5269: NOT
5270: AND
5271: IFFALSE 5202
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5273: LD_ADDR_VAR 0 1
5277: PUSH
5278: LD_INT 22
5280: PUSH
5281: LD_INT 1
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: LD_INT 23
5290: PUSH
5291: LD_INT 1
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PUSH
5298: LD_INT 25
5300: PUSH
5301: LD_INT 2
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: PUSH
5308: LD_INT 50
5310: PUSH
5311: EMPTY
5312: LIST
5313: PUSH
5314: LD_INT 56
5316: PUSH
5317: EMPTY
5318: LIST
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: PPUSH
5327: CALL_OW 69
5331: PUSH
5332: LD_EXP 1
5336: PUSH
5337: LD_EXP 5
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: DIFF
5346: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5347: LD_INT 35
5349: PPUSH
5350: CALL_OW 67
// until temp > 0 ;
5354: LD_VAR 0 1
5358: PUSH
5359: LD_INT 0
5361: GREATER
5362: IFFALSE 5273
// wait ( 0 0$5 ) ;
5364: LD_INT 175
5366: PPUSH
5367: CALL_OW 67
// PrepareRussianHeroes ;
5371: CALL 11584 0 0
// InGameOn ;
5375: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5379: LD_EXP 8
5383: PPUSH
5384: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5388: LD_EXP 1
5392: PUSH
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PPUSH
5406: LD_EXP 8
5410: PPUSH
5411: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5415: LD_EXP 8
5419: PPUSH
5420: LD_VAR 0 1
5424: PUSH
5425: LD_INT 1
5427: ARRAY
5428: PPUSH
5429: CALL_OW 119
// wait ( 0 0$02 ) ;
5433: LD_INT 70
5435: PPUSH
5436: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5440: LD_EXP 8
5444: PPUSH
5445: LD_STRING D4-Mikh-1
5447: PPUSH
5448: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5452: LD_VAR 0 1
5456: PUSH
5457: LD_INT 1
5459: ARRAY
5460: PPUSH
5461: CALL_OW 258
5465: PUSH
5466: LD_INT 1
5468: EQUAL
5469: IFFALSE 5487
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5471: LD_VAR 0 1
5475: PUSH
5476: LD_INT 1
5478: ARRAY
5479: PPUSH
5480: LD_STRING D4-Sol1-1
5482: PPUSH
5483: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5487: LD_VAR 0 1
5491: PUSH
5492: LD_INT 1
5494: ARRAY
5495: PPUSH
5496: CALL_OW 258
5500: PUSH
5501: LD_INT 2
5503: EQUAL
5504: IFFALSE 5522
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5506: LD_VAR 0 1
5510: PUSH
5511: LD_INT 1
5513: ARRAY
5514: PPUSH
5515: LD_STRING D4-FSol1-1
5517: PPUSH
5518: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5522: LD_EXP 8
5526: PPUSH
5527: LD_STRING D4-Mikh-2
5529: PPUSH
5530: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5534: LD_VAR 0 1
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PPUSH
5543: CALL_OW 258
5547: PUSH
5548: LD_INT 1
5550: EQUAL
5551: IFFALSE 5569
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5553: LD_VAR 0 1
5557: PUSH
5558: LD_INT 1
5560: ARRAY
5561: PPUSH
5562: LD_STRING D4-Sol1-2
5564: PPUSH
5565: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5569: LD_VAR 0 1
5573: PUSH
5574: LD_INT 1
5576: ARRAY
5577: PPUSH
5578: CALL_OW 258
5582: PUSH
5583: LD_INT 2
5585: EQUAL
5586: IFFALSE 5604
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5588: LD_VAR 0 1
5592: PUSH
5593: LD_INT 1
5595: ARRAY
5596: PPUSH
5597: LD_STRING D4-FSol1-2
5599: PPUSH
5600: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5604: LD_EXP 8
5608: PPUSH
5609: LD_STRING D4-Mikh-3
5611: PPUSH
5612: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5616: LD_VAR 0 1
5620: PUSH
5621: LD_INT 1
5623: ARRAY
5624: PPUSH
5625: CALL_OW 258
5629: PUSH
5630: LD_INT 1
5632: EQUAL
5633: IFFALSE 5651
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5635: LD_VAR 0 1
5639: PUSH
5640: LD_INT 1
5642: ARRAY
5643: PPUSH
5644: LD_STRING D4-Sol1-3
5646: PPUSH
5647: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5651: LD_VAR 0 1
5655: PUSH
5656: LD_INT 1
5658: ARRAY
5659: PPUSH
5660: CALL_OW 258
5664: PUSH
5665: LD_INT 2
5667: EQUAL
5668: IFFALSE 5686
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5670: LD_VAR 0 1
5674: PUSH
5675: LD_INT 1
5677: ARRAY
5678: PPUSH
5679: LD_STRING D4-FSol1-3
5681: PPUSH
5682: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5686: LD_EXP 8
5690: PPUSH
5691: LD_STRING D4-Mikh-4
5693: PPUSH
5694: CALL_OW 88
// case Query ( Qs1 ) of 1 :
5698: LD_STRING Qs1
5700: PPUSH
5701: CALL_OW 97
5705: PUSH
5706: LD_INT 1
5708: DOUBLE
5709: EQUAL
5710: IFTRUE 5714
5712: GO 5749
5714: POP
// begin InGameOff ;
5715: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5719: LD_INT 1
5721: PPUSH
5722: LD_INT 6
5724: PPUSH
5725: LD_INT 2
5727: PPUSH
5728: LD_INT 1
5730: PPUSH
5731: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5735: LD_EXP 8
5739: PPUSH
5740: LD_INT 17
5742: PPUSH
5743: CALL_OW 113
// end ; 2 :
5747: GO 6342
5749: LD_INT 2
5751: DOUBLE
5752: EQUAL
5753: IFTRUE 5757
5755: GO 6307
5757: POP
// begin repeat wait ( 0 0$1 ) ;
5758: LD_INT 35
5760: PPUSH
5761: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5765: LD_VAR 0 1
5769: PUSH
5770: LD_INT 1
5772: ARRAY
5773: PPUSH
5774: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5778: LD_VAR 0 1
5782: PUSH
5783: LD_INT 1
5785: ARRAY
5786: PPUSH
5787: LD_EXP 1
5791: PPUSH
5792: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5796: LD_EXP 8
5800: PPUSH
5801: LD_EXP 1
5805: PPUSH
5806: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5810: LD_EXP 1
5814: PPUSH
5815: LD_EXP 8
5819: PPUSH
5820: CALL_OW 296
5824: PUSH
5825: LD_INT 5
5827: LESS
5828: IFFALSE 5758
// ComTurnUnit ( Mikhail , JMM ) ;
5830: LD_EXP 8
5834: PPUSH
5835: LD_EXP 1
5839: PPUSH
5840: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5844: LD_EXP 1
5848: PPUSH
5849: LD_STRING D4b-JMM-1
5851: PPUSH
5852: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5856: LD_EXP 8
5860: PPUSH
5861: LD_STRING D4b-Mikh-1
5863: PPUSH
5864: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5868: LD_EXP 1
5872: PPUSH
5873: LD_STRING D4b-JMM-2
5875: PPUSH
5876: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5880: LD_EXP 8
5884: PPUSH
5885: LD_STRING D4b-Mikh-2
5887: PPUSH
5888: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5892: LD_EXP 1
5896: PPUSH
5897: LD_STRING D4b-JMM-3
5899: PPUSH
5900: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5904: LD_EXP 8
5908: PPUSH
5909: LD_STRING D4b-Mikh-3
5911: PPUSH
5912: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5916: LD_EXP 1
5920: PPUSH
5921: LD_STRING D4b-JMM-4
5923: PPUSH
5924: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5928: LD_EXP 8
5932: PPUSH
5933: LD_STRING D4b-Mikh-4
5935: PPUSH
5936: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5940: LD_EXP 1
5944: PPUSH
5945: LD_STRING D4b-JMM-5
5947: PPUSH
5948: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5952: LD_EXP 8
5956: PPUSH
5957: LD_STRING D4b-Mikh-5
5959: PPUSH
5960: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5964: LD_EXP 1
5968: PPUSH
5969: LD_STRING D4b-JMM-6
5971: PPUSH
5972: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5976: LD_EXP 8
5980: PPUSH
5981: LD_STRING D4b-Mikh-6
5983: PPUSH
5984: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5988: LD_EXP 1
5992: PPUSH
5993: LD_STRING D4b-JMM-7
5995: PPUSH
5996: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
6000: LD_EXP 8
6004: PPUSH
6005: LD_STRING D4b-Mikh-7
6007: PPUSH
6008: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6012: LD_VAR 0 1
6016: PUSH
6017: LD_INT 1
6019: ARRAY
6020: PPUSH
6021: CALL_OW 258
6025: PUSH
6026: LD_INT 1
6028: EQUAL
6029: IFFALSE 6047
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6031: LD_VAR 0 1
6035: PUSH
6036: LD_INT 1
6038: ARRAY
6039: PPUSH
6040: LD_STRING D4b-Sol1-7
6042: PPUSH
6043: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6047: LD_VAR 0 1
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PPUSH
6056: CALL_OW 258
6060: PUSH
6061: LD_INT 2
6063: EQUAL
6064: IFFALSE 6082
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6066: LD_VAR 0 1
6070: PUSH
6071: LD_INT 1
6073: ARRAY
6074: PPUSH
6075: LD_STRING D4b-FSol1-7
6077: PPUSH
6078: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6082: LD_EXP 1
6086: PPUSH
6087: LD_STRING D4b-JMM-8
6089: PPUSH
6090: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6094: LD_VAR 0 1
6098: PUSH
6099: LD_INT 1
6101: ARRAY
6102: PPUSH
6103: CALL_OW 258
6107: PUSH
6108: LD_INT 1
6110: EQUAL
6111: IFFALSE 6129
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6113: LD_VAR 0 1
6117: PUSH
6118: LD_INT 1
6120: ARRAY
6121: PPUSH
6122: LD_STRING D4b-Sol1-8
6124: PPUSH
6125: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6129: LD_VAR 0 1
6133: PUSH
6134: LD_INT 1
6136: ARRAY
6137: PPUSH
6138: CALL_OW 258
6142: PUSH
6143: LD_INT 2
6145: EQUAL
6146: IFFALSE 6164
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6148: LD_VAR 0 1
6152: PUSH
6153: LD_INT 1
6155: ARRAY
6156: PPUSH
6157: LD_STRING D4b-FSol1-8
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6164: LD_EXP 1
6168: PPUSH
6169: LD_STRING D4b-JMM-9
6171: PPUSH
6172: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6176: LD_EXP 8
6180: PPUSH
6181: LD_INT 1
6183: PPUSH
6184: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6188: LD_ADDR_VAR 0 3
6192: PUSH
6193: LD_INT 22
6195: PUSH
6196: LD_INT 1
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: PUSH
6203: EMPTY
6204: LIST
6205: PPUSH
6206: CALL_OW 69
6210: PUSH
6211: FOR_IN
6212: IFFALSE 6225
// ComFree ( i ) ;
6214: LD_VAR 0 3
6218: PPUSH
6219: CALL_OW 139
6223: GO 6211
6225: POP
6226: POP
// repeat wait ( 0 0$1 ) ;
6227: LD_INT 35
6229: PPUSH
6230: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6234: LD_EXP 8
6238: PPUSH
6239: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6243: LD_EXP 8
6247: PUSH
6248: LD_VAR 0 1
6252: PUSH
6253: LD_INT 1
6255: ARRAY
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PPUSH
6261: LD_INT 1
6263: PPUSH
6264: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6268: LD_EXP 8
6272: PPUSH
6273: CALL_OW 310
6277: IFFALSE 6227
// mikhailDepot = IsInUnit ( Mikhail ) ;
6279: LD_ADDR_EXP 23
6283: PUSH
6284: LD_EXP 8
6288: PPUSH
6289: CALL_OW 310
6293: ST_TO_ADDR
// InGameOff ;
6294: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6298: LD_STRING M3
6300: PPUSH
6301: CALL_OW 337
// end ; 3 :
6305: GO 6342
6307: LD_INT 3
6309: DOUBLE
6310: EQUAL
6311: IFTRUE 6315
6313: GO 6341
6315: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6316: LD_EXP 8
6320: PPUSH
6321: LD_INT 17
6323: PPUSH
6324: CALL_OW 113
// wait ( 0 0$3 ) ;
6328: LD_INT 105
6330: PPUSH
6331: CALL_OW 67
// InGameOff ;
6335: CALL_OW 9
// end ; end ;
6339: GO 6342
6341: POP
// PrepareTigers ;
6342: CALL 14881 0 0
// RussianTrap ;
6346: CALL 9980 0 0
// tigersRespawn = 1 ;
6350: LD_ADDR_EXP 30
6354: PUSH
6355: LD_INT 1
6357: ST_TO_ADDR
// end ;
6358: PPOPN 3
6360: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6361: LD_INT 1
6363: PPUSH
6364: CALL_OW 255
6368: PUSH
6369: LD_INT 1
6371: EQUAL
6372: PUSH
6373: LD_INT 10
6375: PPUSH
6376: CALL_OW 255
6380: PUSH
6381: LD_INT 1
6383: EQUAL
6384: AND
6385: PUSH
6386: LD_INT 1
6388: PPUSH
6389: CALL_OW 274
6393: PPUSH
6394: LD_INT 1
6396: PPUSH
6397: CALL_OW 275
6401: PUSH
6402: LD_INT 100
6404: GREATEREQUAL
6405: AND
6406: IFFALSE 6555
6408: GO 6410
6410: DISABLE
6411: LD_INT 0
6413: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6414: LD_INT 2100
6416: PPUSH
6417: LD_INT 4200
6419: PPUSH
6420: CALL_OW 12
6424: PUSH
6425: LD_INT 1050
6427: PLUS
6428: PPUSH
6429: CALL_OW 67
// PrepareCargoBays ;
6433: CALL 12767 0 0
// cargoRespawn = 1 ;
6437: LD_ADDR_EXP 28
6441: PUSH
6442: LD_INT 1
6444: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6445: LD_ADDR_VAR 0 1
6449: PUSH
6450: LD_EXP 15
6454: PUSH
6455: LD_EXP 16
6459: PUSH
6460: LD_EXP 17
6464: PUSH
6465: LD_EXP 18
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6476: LD_VAR 0 1
6480: PPUSH
6481: LD_INT 17
6483: PPUSH
6484: LD_INT 10
6486: PPUSH
6487: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6491: LD_VAR 0 1
6495: PPUSH
6496: LD_INT 36
6498: PPUSH
6499: LD_INT 13
6501: PPUSH
6502: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6506: LD_VAR 0 1
6510: PPUSH
6511: LD_INT 40
6513: PPUSH
6514: LD_INT 20
6516: PPUSH
6517: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6521: LD_VAR 0 1
6525: PPUSH
6526: LD_INT 53
6528: PPUSH
6529: LD_INT 16
6531: PPUSH
6532: CALL_OW 171
// wait ( 0 0$5 ) ;
6536: LD_INT 175
6538: PPUSH
6539: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6543: LD_EXP 17
6547: PPUSH
6548: LD_STRING D5-Rus2-1
6550: PPUSH
6551: CALL_OW 88
// end ;
6555: PPOPN 1
6557: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6558: LD_EXP 28
6562: PUSH
6563: LD_INT 1
6565: EQUAL
6566: IFFALSE 6721
6568: GO 6570
6570: DISABLE
6571: LD_INT 0
6573: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6574: LD_ADDR_VAR 0 1
6578: PUSH
6579: LD_INT 22
6581: PUSH
6582: LD_INT 3
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 21
6591: PUSH
6592: LD_INT 2
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 34
6601: PUSH
6602: LD_INT 51
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: PPUSH
6614: CALL_OW 69
6618: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6619: LD_INT 105
6621: PPUSH
6622: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6626: LD_VAR 0 1
6630: PPUSH
6631: LD_INT 3
6633: PUSH
6634: LD_INT 60
6636: PUSH
6637: EMPTY
6638: LIST
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PPUSH
6644: CALL_OW 72
6648: PUSH
6649: LD_VAR 0 1
6653: PPUSH
6654: LD_INT 3
6656: PUSH
6657: LD_INT 24
6659: PUSH
6660: LD_INT 980
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PPUSH
6671: CALL_OW 72
6675: OR
6676: IFFALSE 6619
// ComMoveXY ( cargos , 7 , 9 ) ;
6678: LD_VAR 0 1
6682: PPUSH
6683: LD_INT 7
6685: PPUSH
6686: LD_INT 9
6688: PPUSH
6689: CALL_OW 111
// cargoSee = 1 ;
6693: LD_ADDR_EXP 29
6697: PUSH
6698: LD_INT 1
6700: ST_TO_ADDR
// cargoEscape = 1 ;
6701: LD_ADDR_EXP 20
6705: PUSH
6706: LD_INT 1
6708: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6709: LD_EXP 17
6713: PPUSH
6714: LD_STRING D5-Rus2-1a
6716: PPUSH
6717: CALL_OW 88
// end ;
6721: PPOPN 1
6723: END
// every 0 0$1 trigger cargoEscape do
6724: LD_EXP 20
6728: IFFALSE 6875
6730: GO 6732
6732: DISABLE
// begin enable ;
6733: ENABLE
// ComMoveToArea ( [ cargo1 , cargo2 ] , RussianAttack ) ;
6734: LD_EXP 15
6738: PUSH
6739: LD_EXP 16
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: PPUSH
6748: LD_INT 13
6750: PPUSH
6751: CALL_OW 113
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6755: LD_EXP 15
6759: PPUSH
6760: LD_INT 13
6762: PPUSH
6763: CALL_OW 308
6767: PUSH
6768: LD_EXP 17
6772: PPUSH
6773: LD_INT 13
6775: PPUSH
6776: CALL_OW 308
6780: OR
6781: IFFALSE 6815
// begin RemoveUnit ( cargo1 ) ;
6783: LD_EXP 15
6787: PPUSH
6788: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6792: LD_EXP 17
6796: PPUSH
6797: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6801: LD_ADDR_EXP 20
6805: PUSH
6806: LD_EXP 20
6810: PUSH
6811: LD_INT 1
6813: PLUS
6814: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6815: LD_EXP 16
6819: PPUSH
6820: LD_INT 13
6822: PPUSH
6823: CALL_OW 308
6827: PUSH
6828: LD_EXP 18
6832: PPUSH
6833: LD_INT 13
6835: PPUSH
6836: CALL_OW 308
6840: OR
6841: IFFALSE 6875
// begin RemoveUnit ( cargo2 ) ;
6843: LD_EXP 16
6847: PPUSH
6848: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6852: LD_EXP 18
6856: PPUSH
6857: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6861: LD_ADDR_EXP 20
6865: PUSH
6866: LD_EXP 20
6870: PUSH
6871: LD_INT 1
6873: PLUS
6874: ST_TO_ADDR
// end ; end ;
6875: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
6876: LD_EXP 20
6880: PUSH
6881: LD_INT 1
6883: GREATER
6884: IFFALSE 7133
6886: GO 6888
6888: DISABLE
6889: LD_INT 0
6891: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
6892: LD_INT 4
6894: PPUSH
6895: LD_INT 1
6897: PPUSH
6898: LD_INT 1
6900: PPUSH
6901: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6905: LD_INT 31
6907: PPUSH
6908: LD_INT 1
6910: PPUSH
6911: LD_INT 1
6913: PPUSH
6914: CALL_OW 324
// Hint ( Bunker ) ;
6918: LD_STRING Bunker
6920: PPUSH
6921: CALL_OW 339
// if IsOK ( Jerry ) then
6925: LD_EXP 7
6929: PPUSH
6930: CALL_OW 302
6934: IFFALSE 6950
// Say ( Jerry , D5a-Sol1-1 ) else
6936: LD_EXP 7
6940: PPUSH
6941: LD_STRING D5a-Sol1-1
6943: PPUSH
6944: CALL_OW 88
6948: GO 7036
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
6950: LD_ADDR_VAR 0 1
6954: PUSH
6955: LD_INT 22
6957: PUSH
6958: LD_INT 1
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: LD_INT 26
6967: PUSH
6968: LD_INT 1
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PPUSH
6979: CALL_OW 69
6983: PUSH
6984: LD_EXP 1
6988: PUSH
6989: LD_EXP 2
6993: PUSH
6994: LD_EXP 3
6998: PUSH
6999: LD_EXP 5
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: DIFF
7010: ST_TO_ADDR
// if not speaker then
7011: LD_VAR 0 1
7015: NOT
7016: IFFALSE 7020
// exit ;
7018: GO 7133
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7020: LD_VAR 0 1
7024: PUSH
7025: LD_INT 1
7027: ARRAY
7028: PPUSH
7029: LD_STRING D5a-Sol1-1
7031: PPUSH
7032: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7036: LD_EXP 1
7040: PPUSH
7041: LD_STRING D5a-JMM-1
7043: PPUSH
7044: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
7048: LD_INT 22
7050: PPUSH
7051: LD_INT 22
7053: PUSH
7054: LD_INT 1
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 25
7063: PUSH
7064: LD_INT 2
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PPUSH
7075: CALL_OW 70
7079: IFFALSE 7133
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
7081: LD_INT 22
7083: PPUSH
7084: LD_INT 22
7086: PUSH
7087: LD_INT 1
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: PUSH
7094: LD_INT 25
7096: PUSH
7097: LD_INT 2
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: PPUSH
7108: CALL_OW 70
7112: PUSH
7113: LD_INT 1
7115: ARRAY
7116: PPUSH
7117: LD_INT 31
7119: PPUSH
7120: LD_INT 44
7122: PPUSH
7123: LD_INT 13
7125: PPUSH
7126: LD_INT 1
7128: PPUSH
7129: CALL_OW 145
// end ;
7133: PPOPN 1
7135: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7136: LD_INT 1
7138: PPUSH
7139: CALL_OW 255
7143: PUSH
7144: LD_INT 3
7146: EQUAL
7147: PUSH
7148: LD_INT 1
7150: PPUSH
7151: CALL_OW 256
7155: PUSH
7156: LD_INT 1000
7158: LESS
7159: AND
7160: PUSH
7161: LD_INT 10
7163: PPUSH
7164: CALL_OW 255
7168: PUSH
7169: LD_INT 3
7171: EQUAL
7172: PUSH
7173: LD_INT 10
7175: PPUSH
7176: CALL_OW 256
7180: PUSH
7181: LD_INT 1000
7183: LESS
7184: AND
7185: OR
7186: IFFALSE 7203
7188: GO 7190
7190: DISABLE
// Say ( JMM , D8-JMM-1 ) ;
7191: LD_EXP 1
7195: PPUSH
7196: LD_STRING D8-JMM-1
7198: PPUSH
7199: CALL_OW 88
7203: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7204: LD_EXP 8
7208: PPUSH
7209: CALL_OW 310
7213: PUSH
7214: LD_INT 1
7216: EQUAL
7217: PUSH
7218: LD_EXP 22
7222: PUSH
7223: LD_INT 3
7225: EQUAL
7226: NOT
7227: AND
7228: IFFALSE 7250
7230: GO 7232
7232: DISABLE
// begin enable ;
7233: ENABLE
// mikhailInBase = 1 ;
7234: LD_ADDR_EXP 22
7238: PUSH
7239: LD_INT 1
7241: ST_TO_ADDR
// mikhailStatus = 1 ;
7242: LD_ADDR_EXP 21
7246: PUSH
7247: LD_INT 1
7249: ST_TO_ADDR
// end ;
7250: END
// export function AskMikhail ; begin
7251: LD_INT 0
7253: PPUSH
// case Query ( QMikh2 ) of 1 :
7254: LD_STRING QMikh2
7256: PPUSH
7257: CALL_OW 97
7261: PUSH
7262: LD_INT 1
7264: DOUBLE
7265: EQUAL
7266: IFTRUE 7270
7268: GO 7337
7270: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7271: LD_INT 1
7273: PPUSH
7274: LD_INT 6
7276: PPUSH
7277: LD_INT 2
7279: PPUSH
7280: LD_INT 1
7282: PPUSH
7283: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7287: LD_EXP 8
7291: PPUSH
7292: LD_INT 6
7294: PPUSH
7295: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7299: LD_EXP 8
7303: PPUSH
7304: CALL_OW 122
// wait ( 0 0$1 ) ;
7308: LD_INT 35
7310: PPUSH
7311: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7315: LD_EXP 8
7319: PPUSH
7320: LD_INT 17
7322: PPUSH
7323: CALL_OW 113
// mikhailInbase = 0 ;
7327: LD_ADDR_EXP 22
7331: PUSH
7332: LD_INT 0
7334: ST_TO_ADDR
// end ; 2 :
7335: GO 7578
7337: LD_INT 2
7339: DOUBLE
7340: EQUAL
7341: IFTRUE 7345
7343: GO 7518
7345: POP
// begin mikhailInBase = 2 ;
7346: LD_ADDR_EXP 22
7350: PUSH
7351: LD_INT 2
7353: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7354: LD_EXP 8
7358: PPUSH
7359: LD_INT 6
7361: PPUSH
7362: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7366: LD_EXP 8
7370: PPUSH
7371: CALL_OW 122
// wait ( 0 0$1 ) ;
7375: LD_INT 35
7377: PPUSH
7378: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7382: LD_EXP 8
7386: PPUSH
7387: LD_EXP 8
7391: PPUSH
7392: CALL_OW 250
7396: PUSH
7397: LD_INT 2
7399: PLUS
7400: PPUSH
7401: LD_EXP 8
7405: PPUSH
7406: CALL_OW 251
7410: PUSH
7411: LD_INT 2
7413: PLUS
7414: PPUSH
7415: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7419: LD_EXP 8
7423: PPUSH
7424: LD_EXP 8
7428: PPUSH
7429: CALL_OW 250
7433: PUSH
7434: LD_INT 1
7436: PLUS
7437: PPUSH
7438: LD_EXP 8
7442: PPUSH
7443: CALL_OW 251
7447: PUSH
7448: LD_INT 2
7450: PLUS
7451: PPUSH
7452: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7456: LD_EXP 8
7460: PPUSH
7461: LD_EXP 8
7465: PPUSH
7466: CALL_OW 250
7470: PUSH
7471: LD_INT 2
7473: PLUS
7474: PPUSH
7475: LD_EXP 8
7479: PPUSH
7480: CALL_OW 251
7484: PPUSH
7485: CALL_OW 171
// wait ( 0 0$5 ) ;
7489: LD_INT 175
7491: PPUSH
7492: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7496: LD_EXP 8
7500: PPUSH
7501: LD_INT 25
7503: PPUSH
7504: CALL_OW 113
// mikhailInBase = 4 ;
7508: LD_ADDR_EXP 22
7512: PUSH
7513: LD_INT 4
7515: ST_TO_ADDR
// end ; 3 :
7516: GO 7578
7518: LD_INT 3
7520: DOUBLE
7521: EQUAL
7522: IFTRUE 7526
7524: GO 7577
7526: POP
// begin SetSide ( Mikhail , 6 ) ;
7527: LD_EXP 8
7531: PPUSH
7532: LD_INT 6
7534: PPUSH
7535: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7539: LD_EXP 8
7543: PPUSH
7544: CALL_OW 122
// wait ( 0 0$1 ) ;
7548: LD_INT 35
7550: PPUSH
7551: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7555: LD_EXP 8
7559: PPUSH
7560: LD_INT 17
7562: PPUSH
7563: CALL_OW 113
// mikhailInbase = 3 ;
7567: LD_ADDR_EXP 22
7571: PUSH
7572: LD_INT 3
7574: ST_TO_ADDR
// end ; end ;
7575: GO 7578
7577: POP
// end ;
7578: LD_VAR 0 1
7582: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7583: LD_EXP 8
7587: PPUSH
7588: LD_INT 25
7590: PPUSH
7591: CALL_OW 308
7595: PUSH
7596: LD_EXP 22
7600: PUSH
7601: LD_INT 4
7603: EQUAL
7604: AND
7605: IFFALSE 7709
7607: GO 7609
7609: DISABLE
// begin enable ;
7610: ENABLE
// mikhailInBase = 1 ;
7611: LD_ADDR_EXP 22
7615: PUSH
7616: LD_INT 1
7618: ST_TO_ADDR
// InGameOn ;
7619: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7623: LD_INT 1
7625: PPUSH
7626: LD_INT 6
7628: PPUSH
7629: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7633: LD_INT 35
7635: PPUSH
7636: CALL_OW 67
// if Carry ( Mikhail ) then
7640: LD_EXP 8
7644: PPUSH
7645: CALL_OW 281
7649: IFFALSE 7660
// ComUnload ( Mikhail ) ;
7651: LD_EXP 8
7655: PPUSH
7656: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7660: LD_EXP 8
7664: PPUSH
7665: LD_INT 1
7667: PPUSH
7668: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7672: LD_EXP 8
7676: PPUSH
7677: CALL_OW 310
7681: IFFALSE 7633
// SetSide ( dep1 , 1 ) ;
7683: LD_INT 1
7685: PPUSH
7686: LD_INT 1
7688: PPUSH
7689: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7693: LD_EXP 8
7697: PPUSH
7698: LD_INT 1
7700: PPUSH
7701: CALL_OW 235
// InGameOff ;
7705: CALL_OW 9
// end ;
7709: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7710: LD_EXP 8
7714: PPUSH
7715: CALL_OW 310
7719: PUSH
7720: LD_EXP 22
7724: PUSH
7725: LD_INT 3
7727: EQUAL
7728: NOT
7729: AND
7730: IFFALSE 7865
7732: GO 7734
7734: DISABLE
// begin enable ;
7735: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7736: LD_INT 22
7738: PUSH
7739: LD_INT 1
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: PUSH
7746: LD_INT 21
7748: PUSH
7749: LD_INT 1
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: PUSH
7756: LD_INT 91
7758: PUSH
7759: LD_EXP 8
7763: PPUSH
7764: CALL_OW 310
7768: PUSH
7769: LD_INT 10
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: LIST
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: LIST
7781: PPUSH
7782: CALL_OW 69
7786: PUSH
7787: LD_INT 1
7789: EQUAL
7790: IFFALSE 7865
// begin mikhailStatus = 4 ;
7792: LD_ADDR_EXP 21
7796: PUSH
7797: LD_INT 4
7799: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
7800: LD_INT 1
7802: PPUSH
7803: LD_INT 6
7805: PPUSH
7806: LD_INT 2
7808: PPUSH
7809: LD_INT 1
7811: PPUSH
7812: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7816: LD_EXP 8
7820: PPUSH
7821: LD_INT 6
7823: PPUSH
7824: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7828: LD_EXP 8
7832: PPUSH
7833: CALL_OW 122
// wait ( 0 0$1 ) ;
7837: LD_INT 35
7839: PPUSH
7840: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7844: LD_EXP 8
7848: PPUSH
7849: LD_INT 17
7851: PPUSH
7852: CALL_OW 113
// mikhailStatus = 3 ;
7856: LD_ADDR_EXP 21
7860: PUSH
7861: LD_INT 3
7863: ST_TO_ADDR
// disable ;
7864: DISABLE
// end ; end ;
7865: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7866: LD_EXP 1
7870: PPUSH
7871: LD_EXP 23
7875: PPUSH
7876: CALL_OW 296
7880: PUSH
7881: LD_INT 5
7883: LESS
7884: PUSH
7885: LD_EXP 21
7889: PUSH
7890: LD_INT 3
7892: EQUAL
7893: AND
7894: PUSH
7895: LD_EXP 22
7899: PUSH
7900: LD_INT 3
7902: EQUAL
7903: NOT
7904: AND
7905: IFFALSE 8136
7907: GO 7909
7909: DISABLE
7910: LD_INT 0
7912: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
7913: LD_ADDR_VAR 0 1
7917: PUSH
7918: LD_INT 22
7920: PUSH
7921: LD_INT 1
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 21
7930: PUSH
7931: LD_INT 1
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: LD_INT 26
7940: PUSH
7941: LD_INT 1
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: LIST
7952: PPUSH
7953: CALL_OW 69
7957: PUSH
7958: LD_EXP 1
7962: PUSH
7963: LD_EXP 5
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: DIFF
7972: ST_TO_ADDR
// if not tmp then
7973: LD_VAR 0 1
7977: NOT
7978: IFFALSE 7982
// exit ;
7980: GO 8136
// DialogueOn ;
7982: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7986: LD_EXP 1
7990: PPUSH
7991: LD_STRING D7-JMM-1
7993: PPUSH
7994: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7998: LD_VAR 0 1
8002: PUSH
8003: LD_INT 1
8005: ARRAY
8006: PPUSH
8007: LD_STRING D7-Sol1-1
8009: PPUSH
8010: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8014: LD_EXP 1
8018: PPUSH
8019: LD_STRING D7-JMM-2
8021: PPUSH
8022: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8026: LD_VAR 0 1
8030: PUSH
8031: LD_INT 1
8033: ARRAY
8034: PPUSH
8035: LD_STRING D7-Sol1-2
8037: PPUSH
8038: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8042: LD_EXP 1
8046: PPUSH
8047: LD_STRING D7-JMM-3
8049: PPUSH
8050: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8054: LD_VAR 0 1
8058: PUSH
8059: LD_INT 1
8061: ARRAY
8062: PPUSH
8063: LD_STRING D7-Sol1-3
8065: PPUSH
8066: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8070: LD_EXP 3
8074: PPUSH
8075: CALL_OW 302
8079: PUSH
8080: LD_EXP 4
8084: PPUSH
8085: CALL_OW 302
8089: AND
8090: IFFALSE 8132
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8092: LD_EXP 3
8096: PPUSH
8097: LD_STRING D7-Cyrus-3
8099: PPUSH
8100: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8104: LD_VAR 0 1
8108: PUSH
8109: LD_INT 1
8111: ARRAY
8112: PPUSH
8113: LD_STRING D7-Sol1-4
8115: PPUSH
8116: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8120: LD_EXP 4
8124: PPUSH
8125: LD_STRING D7-Lisa-4
8127: PPUSH
8128: CALL_OW 88
// end ; DialogueOff ;
8132: CALL_OW 7
// end ;
8136: PPOPN 1
8138: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8139: LD_EXP 8
8143: PPUSH
8144: CALL_OW 303
8148: PUSH
8149: LD_EXP 21
8153: PUSH
8154: LD_INT 3
8156: EQUAL
8157: AND
8158: IFFALSE 8172
8160: GO 8162
8162: DISABLE
// begin enable ;
8163: ENABLE
// mikhailStatus = 2 ;
8164: LD_ADDR_EXP 21
8168: PUSH
8169: LD_INT 2
8171: ST_TO_ADDR
// end ;
8172: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8173: LD_EXP 8
8177: PPUSH
8178: LD_INT 17
8180: PPUSH
8181: CALL_OW 308
8185: PUSH
8186: LD_EXP 8
8190: PPUSH
8191: CALL_OW 255
8195: PUSH
8196: LD_INT 6
8198: EQUAL
8199: AND
8200: IFFALSE 8233
8202: GO 8204
8204: DISABLE
// begin if not mikhailInBase = 3 then
8205: LD_EXP 22
8209: PUSH
8210: LD_INT 3
8212: EQUAL
8213: NOT
8214: IFFALSE 8224
// mikhailStatus = 3 ;
8216: LD_ADDR_EXP 21
8220: PUSH
8221: LD_INT 3
8223: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8224: LD_EXP 8
8228: PPUSH
8229: CALL_OW 64
// end ;
8233: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8234: LD_EXP 21
8238: PUSH
8239: LD_INT 3
8241: EQUAL
8242: PUSH
8243: LD_EXP 8
8247: PPUSH
8248: CALL_OW 255
8252: PUSH
8253: LD_INT 6
8255: EQUAL
8256: AND
8257: IFFALSE 8423
8259: GO 8261
8261: DISABLE
8262: LD_INT 0
8264: PPUSH
8265: PPUSH
// begin enable ;
8266: ENABLE
// if IsOk ( Mikhail ) then
8267: LD_EXP 8
8271: PPUSH
8272: CALL_OW 302
8276: IFFALSE 8423
// begin attacker := Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8278: LD_ADDR_VAR 0 2
8282: PUSH
8283: LD_EXP 8
8287: PPUSH
8288: LD_INT 22
8290: PUSH
8291: LD_INT 1
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PUSH
8298: LD_INT 21
8300: PUSH
8301: LD_INT 1
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: PPUSH
8312: CALL_OW 69
8316: PPUSH
8317: CALL 10172 0 2
8321: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8322: LD_VAR 0 2
8326: PPUSH
8327: LD_EXP 8
8331: PPUSH
8332: CALL_OW 296
8336: PUSH
8337: LD_INT 8
8339: LESS
8340: IFFALSE 8423
// begin if GetSex ( attacker ) = sex_male then
8342: LD_VAR 0 2
8346: PPUSH
8347: CALL_OW 258
8351: PUSH
8352: LD_INT 1
8354: EQUAL
8355: IFFALSE 8391
// begin disable ;
8357: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8358: LD_VAR 0 2
8362: PPUSH
8363: LD_STRING D7a-Sol1-1
8365: PPUSH
8366: CALL_OW 88
// wait ( 0 0$2 ) ;
8370: LD_INT 70
8372: PPUSH
8373: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8377: LD_VAR 0 2
8381: PPUSH
8382: LD_STRING D7a-Sol1-1a
8384: PPUSH
8385: CALL_OW 88
// end else
8389: GO 8423
// begin disable ;
8391: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8392: LD_VAR 0 2
8396: PPUSH
8397: LD_STRING D7a-FSol1-1
8399: PPUSH
8400: CALL_OW 88
// wait ( 0 0$2 ) ;
8404: LD_INT 70
8406: PPUSH
8407: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8411: LD_VAR 0 2
8415: PPUSH
8416: LD_STRING D7a-FSol1-1a
8418: PPUSH
8419: CALL_OW 88
// end ; end ; end ; end ;
8423: PPOPN 2
8425: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8426: LD_EXP 27
8430: PUSH
8431: LD_INT 1
8433: EQUAL
8434: PUSH
8435: LD_INT 22
8437: PPUSH
8438: LD_INT 22
8440: PUSH
8441: LD_INT 3
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PUSH
8448: LD_INT 21
8450: PUSH
8451: LD_INT 1
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: PPUSH
8462: CALL_OW 70
8466: PUSH
8467: LD_INT 2
8469: GREATER
8470: AND
8471: PUSH
8472: LD_INT 22
8474: PPUSH
8475: LD_INT 22
8477: PUSH
8478: LD_INT 1
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: PUSH
8485: LD_INT 2
8487: PUSH
8488: LD_INT 21
8490: PUSH
8491: LD_INT 1
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: PUSH
8498: LD_INT 59
8500: PUSH
8501: EMPTY
8502: LIST
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: LIST
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: PPUSH
8513: CALL_OW 70
8517: PUSH
8518: LD_INT 0
8520: EQUAL
8521: AND
8522: IFFALSE 8537
8524: GO 8526
8526: DISABLE
// SetSide ( dep1 , 3 ) ;
8527: LD_INT 1
8529: PPUSH
8530: LD_INT 3
8532: PPUSH
8533: CALL_OW 235
8537: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8538: LD_EXP 30
8542: PUSH
8543: LD_INT 1
8545: EQUAL
8546: PUSH
8547: LD_INT 22
8549: PUSH
8550: LD_INT 0
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PUSH
8557: LD_INT 25
8559: PUSH
8560: LD_INT 14
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PPUSH
8571: CALL_OW 69
8575: PUSH
8576: LD_INT 0
8578: EQUAL
8579: AND
8580: IFFALSE 8681
8582: GO 8584
8584: DISABLE
8585: LD_INT 0
8587: PPUSH
8588: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8589: LD_ADDR_VAR 0 2
8593: PUSH
8594: LD_INT 22
8596: PUSH
8597: LD_INT 1
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: PUSH
8604: LD_INT 21
8606: PUSH
8607: LD_INT 1
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: PUSH
8614: LD_INT 23
8616: PUSH
8617: LD_INT 1
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: LIST
8628: PPUSH
8629: CALL_OW 69
8633: ST_TO_ADDR
// for i in tmp do
8634: LD_ADDR_VAR 0 1
8638: PUSH
8639: LD_VAR 0 2
8643: PUSH
8644: FOR_IN
8645: IFFALSE 8672
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8647: LD_VAR 0 1
8651: PPUSH
8652: LD_INT 1
8654: PPUSH
8655: LD_INT 4
8657: PPUSH
8658: CALL_OW 12
8662: PPUSH
8663: LD_INT 300
8665: PPUSH
8666: CALL_OW 492
8670: GO 8644
8672: POP
8673: POP
// SetAchievement ( ACH_TIGER ) ;
8674: LD_STRING ACH_TIGER
8676: PPUSH
8677: CALL_OW 543
// end ;
8681: PPOPN 2
8683: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
8684: LD_INT 22
8686: PUSH
8687: LD_INT 1
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: PUSH
8694: LD_INT 34
8696: PUSH
8697: LD_INT 51
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PPUSH
8708: CALL_OW 69
8712: PUSH
8713: LD_INT 2
8715: GREATEREQUAL
8716: IFFALSE 8728
8718: GO 8720
8720: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
8721: LD_STRING ACH_CARGO
8723: PPUSH
8724: CALL_OW 543
8728: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , un ; begin
8729: LD_INT 0
8731: PPUSH
8732: PPUSH
8733: PPUSH
// for i = 1 to count do
8734: LD_ADDR_VAR 0 8
8738: PUSH
8739: DOUBLE
8740: LD_INT 1
8742: DEC
8743: ST_TO_ADDR
8744: LD_VAR 0 6
8748: PUSH
8749: FOR_TO
8750: IFFALSE 8831
// begin uc_side = side ;
8752: LD_ADDR_OWVAR 20
8756: PUSH
8757: LD_VAR 0 1
8761: ST_TO_ADDR
// uc_nation = nation ;
8762: LD_ADDR_OWVAR 21
8766: PUSH
8767: LD_VAR 0 2
8771: ST_TO_ADDR
// hc_gallery =  ;
8772: LD_ADDR_OWVAR 33
8776: PUSH
8777: LD_STRING 
8779: ST_TO_ADDR
// hc_name =  ;
8780: LD_ADDR_OWVAR 26
8784: PUSH
8785: LD_STRING 
8787: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8788: LD_INT 0
8790: PPUSH
8791: LD_VAR 0 5
8795: PPUSH
8796: LD_VAR 0 4
8800: PPUSH
8801: CALL_OW 380
// un = CreateHuman ;
8805: LD_ADDR_VAR 0 9
8809: PUSH
8810: CALL_OW 44
8814: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8815: LD_VAR 0 9
8819: PPUSH
8820: LD_VAR 0 3
8824: PPUSH
8825: CALL_OW 52
// end ;
8829: GO 8749
8831: POP
8832: POP
// end ;
8833: LD_VAR 0 7
8837: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8838: LD_INT 0
8840: PPUSH
8841: PPUSH
8842: PPUSH
// uc_side := GetSide ( b ) ;
8843: LD_ADDR_OWVAR 20
8847: PUSH
8848: LD_VAR 0 2
8852: PPUSH
8853: CALL_OW 255
8857: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8858: LD_ADDR_OWVAR 21
8862: PUSH
8863: LD_VAR 0 2
8867: PPUSH
8868: CALL_OW 248
8872: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8873: LD_INT 0
8875: PPUSH
8876: LD_INT 1
8878: PPUSH
8879: LD_VAR 0 1
8883: PPUSH
8884: CALL_OW 380
// un = CreateHuman ;
8888: LD_ADDR_VAR 0 4
8892: PUSH
8893: CALL_OW 44
8897: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8898: LD_ADDR_VAR 0 5
8902: PUSH
8903: LD_VAR 0 2
8907: PPUSH
8908: CALL_OW 254
8912: PUSH
8913: LD_INT 3
8915: MINUS
8916: ST_TO_ADDR
// if dir < 0 then
8917: LD_VAR 0 5
8921: PUSH
8922: LD_INT 0
8924: LESS
8925: IFFALSE 8941
// dir := 6 + dir ;
8927: LD_ADDR_VAR 0 5
8931: PUSH
8932: LD_INT 6
8934: PUSH
8935: LD_VAR 0 5
8939: PLUS
8940: ST_TO_ADDR
// SetDir ( un , dir ) ;
8941: LD_VAR 0 4
8945: PPUSH
8946: LD_VAR 0 5
8950: PPUSH
8951: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8955: LD_VAR 0 4
8959: PPUSH
8960: LD_VAR 0 2
8964: PPUSH
8965: CALL_OW 52
// end ;
8969: LD_VAR 0 3
8973: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkList ; begin
8974: LD_INT 0
8976: PPUSH
8977: PPUSH
8978: PPUSH
8979: PPUSH
// engineerOkList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8980: LD_ADDR_VAR 0 7
8984: PUSH
8985: LD_INT 22
8987: PUSH
8988: LD_VAR 0 1
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: PUSH
8997: LD_INT 25
8999: PUSH
9000: LD_INT 2
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: PUSH
9007: LD_INT 24
9009: PUSH
9010: LD_INT 1000
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: LIST
9021: PPUSH
9022: CALL_OW 69
9026: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9027: LD_ADDR_VAR 0 5
9031: PUSH
9032: LD_VAR 0 3
9036: PPUSH
9037: LD_INT 22
9039: PUSH
9040: LD_VAR 0 1
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 21
9051: PUSH
9052: LD_INT 3
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: LD_INT 3
9061: PUSH
9062: LD_INT 24
9064: PUSH
9065: LD_INT 1000
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: PUSH
9072: EMPTY
9073: LIST
9074: LIST
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: LIST
9080: PUSH
9081: EMPTY
9082: LIST
9083: PPUSH
9084: CALL_OW 70
9088: ST_TO_ADDR
// if not buildingsList and not engineerOkList then
9089: LD_VAR 0 5
9093: NOT
9094: PUSH
9095: LD_VAR 0 7
9099: NOT
9100: AND
9101: IFFALSE 9105
// exit ;
9103: GO 9301
// if not buildingsList and UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) and IsOk ( building ) then
9105: LD_VAR 0 5
9109: NOT
9110: PUSH
9111: LD_VAR 0 7
9115: PPUSH
9116: LD_INT 3
9118: PUSH
9119: LD_INT 54
9121: PUSH
9122: EMPTY
9123: LIST
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: PPUSH
9129: CALL_OW 72
9133: AND
9134: PUSH
9135: LD_VAR 0 2
9139: PPUSH
9140: CALL_OW 302
9144: AND
9145: IFFALSE 9179
// ComEnterUnit ( UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) , building ) ;
9147: LD_VAR 0 7
9151: PPUSH
9152: LD_INT 3
9154: PUSH
9155: LD_INT 54
9157: PUSH
9158: EMPTY
9159: LIST
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PPUSH
9165: CALL_OW 72
9169: PPUSH
9170: LD_VAR 0 2
9174: PPUSH
9175: CALL_OW 120
// if buildingsList then
9179: LD_VAR 0 5
9183: IFFALSE 9301
// begin for i in engineerOkList do
9185: LD_ADDR_VAR 0 6
9189: PUSH
9190: LD_VAR 0 7
9194: PUSH
9195: FOR_IN
9196: IFFALSE 9299
// if IsInUnit ( i ) then
9198: LD_VAR 0 6
9202: PPUSH
9203: CALL_OW 310
9207: IFFALSE 9220
// ComExitBuilding ( i ) else
9209: LD_VAR 0 6
9213: PPUSH
9214: CALL_OW 122
9218: GO 9297
// if GetLives ( i ) > 650 then
9220: LD_VAR 0 6
9224: PPUSH
9225: CALL_OW 256
9229: PUSH
9230: LD_INT 650
9232: GREATER
9233: IFFALSE 9261
// ComRepairBuilding ( i , NearestUnitToUnit ( buildingsList , i ) ) else
9235: LD_VAR 0 6
9239: PPUSH
9240: LD_VAR 0 5
9244: PPUSH
9245: LD_VAR 0 6
9249: PPUSH
9250: CALL_OW 74
9254: PPUSH
9255: CALL_OW 130
9259: GO 9297
// if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9261: LD_VAR 0 6
9265: PPUSH
9266: LD_INT 56
9268: PPUSH
9269: LD_INT 10
9271: PPUSH
9272: CALL_OW 297
9276: PUSH
9277: LD_INT 8
9279: GREATER
9280: IFFALSE 9297
// ComMoveXY ( i , 56 , 10 ) ;
9282: LD_VAR 0 6
9286: PPUSH
9287: LD_INT 56
9289: PPUSH
9290: LD_INT 10
9292: PPUSH
9293: CALL_OW 111
9297: GO 9195
9299: POP
9300: POP
// end ; end ;
9301: LD_VAR 0 4
9305: RET
// export function HealUnitInBase ( side , healArea , baseArea , building ) ; var sciList , i , damageUnits ; begin
9306: LD_INT 0
9308: PPUSH
9309: PPUSH
9310: PPUSH
9311: PPUSH
// sciList := FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9312: LD_ADDR_VAR 0 6
9316: PUSH
9317: LD_INT 22
9319: PUSH
9320: LD_VAR 0 1
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PUSH
9329: LD_INT 25
9331: PUSH
9332: LD_INT 4
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PUSH
9339: LD_INT 24
9341: PUSH
9342: LD_INT 250
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: LIST
9353: PPUSH
9354: CALL_OW 69
9358: ST_TO_ADDR
// damageUnits := FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9359: LD_ADDR_VAR 0 8
9363: PUSH
9364: LD_VAR 0 3
9368: PPUSH
9369: LD_INT 22
9371: PUSH
9372: LD_VAR 0 1
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PUSH
9381: LD_INT 21
9383: PUSH
9384: LD_INT 1
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: PUSH
9391: LD_INT 3
9393: PUSH
9394: LD_INT 24
9396: PUSH
9397: LD_INT 650
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: LIST
9412: PPUSH
9413: CALL_OW 70
9417: ST_TO_ADDR
// if not damageUnits and not sciList then
9418: LD_VAR 0 8
9422: NOT
9423: PUSH
9424: LD_VAR 0 6
9428: NOT
9429: AND
9430: IFFALSE 9434
// exit ;
9432: GO 9573
// if damageUnits then
9434: LD_VAR 0 8
9438: IFFALSE 9517
// begin for i in sciList do
9440: LD_ADDR_VAR 0 7
9444: PUSH
9445: LD_VAR 0 6
9449: PUSH
9450: FOR_IN
9451: IFFALSE 9513
// if IsInUnit ( i ) then
9453: LD_VAR 0 7
9457: PPUSH
9458: CALL_OW 310
9462: IFFALSE 9475
// ComExitBuilding ( i ) else
9464: LD_VAR 0 7
9468: PPUSH
9469: CALL_OW 122
9473: GO 9511
// if not HasTask ( i ) then
9475: LD_VAR 0 7
9479: PPUSH
9480: CALL_OW 314
9484: NOT
9485: IFFALSE 9511
// ComHeal ( i , NearestUnitToUnit ( damageUnits , i ) ) ;
9487: LD_VAR 0 7
9491: PPUSH
9492: LD_VAR 0 8
9496: PPUSH
9497: LD_VAR 0 7
9501: PPUSH
9502: CALL_OW 74
9506: PPUSH
9507: CALL_OW 128
9511: GO 9450
9513: POP
9514: POP
// end else
9515: GO 9573
// if UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) then
9517: LD_VAR 0 6
9521: PPUSH
9522: LD_INT 3
9524: PUSH
9525: LD_INT 54
9527: PUSH
9528: EMPTY
9529: LIST
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PPUSH
9535: CALL_OW 72
9539: IFFALSE 9573
// ComEnterUnit ( UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) , building ) ;
9541: LD_VAR 0 6
9545: PPUSH
9546: LD_INT 3
9548: PUSH
9549: LD_INT 54
9551: PUSH
9552: EMPTY
9553: LIST
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PPUSH
9559: CALL_OW 72
9563: PPUSH
9564: LD_VAR 0 4
9568: PPUSH
9569: CALL_OW 120
// end ;
9573: LD_VAR 0 5
9577: RET
// export function DefendBases ( area , enemySide , defendersList , building ) ; var i , enemy , nearestUnit ; begin
9578: LD_INT 0
9580: PPUSH
9581: PPUSH
9582: PPUSH
9583: PPUSH
// if not defendersList then
9584: LD_VAR 0 3
9588: NOT
9589: IFFALSE 9593
// exit ;
9591: GO 9975
// enemy := FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9593: LD_ADDR_VAR 0 7
9597: PUSH
9598: LD_VAR 0 1
9602: PPUSH
9603: LD_INT 22
9605: PUSH
9606: LD_VAR 0 2
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: PUSH
9615: LD_INT 2
9617: PUSH
9618: LD_INT 21
9620: PUSH
9621: LD_INT 2
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: PUSH
9628: LD_INT 21
9630: PUSH
9631: LD_INT 1
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: LIST
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PPUSH
9647: CALL_OW 70
9651: ST_TO_ADDR
// if enemy then
9652: LD_VAR 0 7
9656: IFFALSE 9877
// begin for i in defendersList do
9658: LD_ADDR_VAR 0 6
9662: PUSH
9663: LD_VAR 0 3
9667: PUSH
9668: FOR_IN
9669: IFFALSE 9873
// begin if IsInUnit ( i ) and GetLives ( i ) > 500 then
9671: LD_VAR 0 6
9675: PPUSH
9676: CALL_OW 310
9680: PUSH
9681: LD_VAR 0 6
9685: PPUSH
9686: CALL_OW 256
9690: PUSH
9691: LD_INT 500
9693: GREATER
9694: AND
9695: IFFALSE 9708
// ComExitBuilding ( i ) else
9697: LD_VAR 0 6
9701: PPUSH
9702: CALL_OW 122
9706: GO 9871
// if GetLives ( i ) > 650 then
9708: LD_VAR 0 6
9712: PPUSH
9713: CALL_OW 256
9717: PUSH
9718: LD_INT 650
9720: GREATER
9721: IFFALSE 9774
// begin nearestUnit := NearestUnitToUnit ( enemy , i ) ;
9723: LD_ADDR_VAR 0 8
9727: PUSH
9728: LD_VAR 0 7
9732: PPUSH
9733: LD_VAR 0 6
9737: PPUSH
9738: CALL_OW 74
9742: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearestUnit ) , GetY ( nearestUnit ) ) ;
9743: LD_VAR 0 6
9747: PPUSH
9748: LD_VAR 0 8
9752: PPUSH
9753: CALL_OW 250
9757: PPUSH
9758: LD_VAR 0 8
9762: PPUSH
9763: CALL_OW 251
9767: PPUSH
9768: CALL_OW 114
// end else
9772: GO 9871
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
9774: LD_INT 22
9776: PUSH
9777: LD_INT 3
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PUSH
9784: LD_INT 25
9786: PUSH
9787: LD_INT 4
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: PPUSH
9798: CALL_OW 69
9802: IFFALSE 9842
// begin if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9804: LD_VAR 0 6
9808: PPUSH
9809: LD_INT 56
9811: PPUSH
9812: LD_INT 10
9814: PPUSH
9815: CALL_OW 297
9819: PUSH
9820: LD_INT 8
9822: GREATER
9823: IFFALSE 9840
// ComMoveXY ( i , 56 , 10 ) ;
9825: LD_VAR 0 6
9829: PPUSH
9830: LD_INT 56
9832: PPUSH
9833: LD_INT 10
9835: PPUSH
9836: CALL_OW 111
// end else
9840: GO 9871
// if GetLives ( i ) <= 500 then
9842: LD_VAR 0 6
9846: PPUSH
9847: CALL_OW 256
9851: PUSH
9852: LD_INT 500
9854: LESSEQUAL
9855: IFFALSE 9871
// ComEnterUnit ( i , building ) ;
9857: LD_VAR 0 6
9861: PPUSH
9862: LD_VAR 0 4
9866: PPUSH
9867: CALL_OW 120
// end ;
9871: GO 9668
9873: POP
9874: POP
// end else
9875: GO 9975
// if UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) then
9877: LD_VAR 0 3
9881: PPUSH
9882: LD_INT 56
9884: PUSH
9885: EMPTY
9886: LIST
9887: PUSH
9888: LD_INT 3
9890: PUSH
9891: LD_INT 60
9893: PUSH
9894: EMPTY
9895: LIST
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: PUSH
9901: LD_INT 24
9903: PUSH
9904: LD_INT 1000
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: LIST
9915: PPUSH
9916: CALL_OW 72
9920: IFFALSE 9975
// ComEnterUnit ( UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) , building ) ;
9922: LD_VAR 0 3
9926: PPUSH
9927: LD_INT 56
9929: PUSH
9930: EMPTY
9931: LIST
9932: PUSH
9933: LD_INT 3
9935: PUSH
9936: LD_INT 60
9938: PUSH
9939: EMPTY
9940: LIST
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: PUSH
9946: LD_INT 24
9948: PUSH
9949: LD_INT 1000
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: LIST
9960: PPUSH
9961: CALL_OW 72
9965: PPUSH
9966: LD_VAR 0 4
9970: PPUSH
9971: CALL_OW 120
// end ;
9975: LD_VAR 0 5
9979: RET
// export function RussianTrap ; var i ; begin
9980: LD_INT 0
9982: PPUSH
9983: PPUSH
// if GetSide ( Brian ) = 4 then
9984: LD_EXP 6
9988: PPUSH
9989: CALL_OW 255
9993: PUSH
9994: LD_INT 4
9996: EQUAL
9997: IFFALSE 10020
// SetLives ( [ Brian , Jerry ] , 0 ) ;
9999: LD_EXP 6
10003: PUSH
10004: LD_EXP 7
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PPUSH
10013: LD_INT 0
10015: PPUSH
10016: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10020: LD_ADDR_VAR 0 2
10024: PUSH
10025: LD_INT 22
10027: PUSH
10028: LD_INT 3
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PUSH
10035: LD_INT 21
10037: PUSH
10038: LD_INT 1
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PPUSH
10049: CALL_OW 69
10053: PUSH
10054: FOR_IN
10055: IFFALSE 10165
// begin ComExitBuilding ( i ) ;
10057: LD_VAR 0 2
10061: PPUSH
10062: CALL_OW 122
// wait ( 0 0$1 ) ;
10066: LD_INT 35
10068: PPUSH
10069: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10073: LD_VAR 0 2
10077: PPUSH
10078: LD_INT 120
10080: PPUSH
10081: LD_INT 56
10083: PPUSH
10084: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10088: LD_VAR 0 2
10092: PPUSH
10093: LD_INT 111
10095: PPUSH
10096: LD_INT 37
10098: PPUSH
10099: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10103: LD_INT 33
10105: PPUSH
10106: CALL_OW 255
10110: PUSH
10111: LD_INT 3
10113: EQUAL
10114: PUSH
10115: LD_INT 33
10117: PPUSH
10118: CALL_OW 302
10122: AND
10123: IFFALSE 10139
// AddComEnterUnit ( i , arm2 ) else
10125: LD_VAR 0 2
10129: PPUSH
10130: LD_INT 33
10132: PPUSH
10133: CALL_OW 180
10137: GO 10163
// begin AddComCrawl ( i ) ;
10139: LD_VAR 0 2
10143: PPUSH
10144: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10148: LD_VAR 0 2
10152: PPUSH
10153: LD_INT 109
10155: PPUSH
10156: LD_INT 30
10158: PPUSH
10159: CALL_OW 174
// end ; end ;
10163: GO 10054
10165: POP
10166: POP
// end ;
10167: LD_VAR 0 1
10171: RET
// export function Nearest ( un , units ) ; var nearestDist , nearestUn , sold , dist ; begin
10172: LD_INT 0
10174: PPUSH
10175: PPUSH
10176: PPUSH
10177: PPUSH
10178: PPUSH
// nearestDist := 1000 ;
10179: LD_ADDR_VAR 0 4
10183: PUSH
10184: LD_INT 1000
10186: ST_TO_ADDR
// nearestUn := un ;
10187: LD_ADDR_VAR 0 5
10191: PUSH
10192: LD_VAR 0 1
10196: ST_TO_ADDR
// for sold in units do
10197: LD_ADDR_VAR 0 6
10201: PUSH
10202: LD_VAR 0 2
10206: PUSH
10207: FOR_IN
10208: IFFALSE 10264
// begin dist := GetDistUnits ( un , sold ) ;
10210: LD_ADDR_VAR 0 7
10214: PUSH
10215: LD_VAR 0 1
10219: PPUSH
10220: LD_VAR 0 6
10224: PPUSH
10225: CALL_OW 296
10229: ST_TO_ADDR
// if dist < nearestDist then
10230: LD_VAR 0 7
10234: PUSH
10235: LD_VAR 0 4
10239: LESS
10240: IFFALSE 10262
// begin nearestUn := sold ;
10242: LD_ADDR_VAR 0 5
10246: PUSH
10247: LD_VAR 0 6
10251: ST_TO_ADDR
// nearestDist := dist ;
10252: LD_ADDR_VAR 0 4
10256: PUSH
10257: LD_VAR 0 7
10261: ST_TO_ADDR
// end ; end ;
10262: GO 10207
10264: POP
10265: POP
// result := NearestUn ;
10266: LD_ADDR_VAR 0 3
10270: PUSH
10271: LD_VAR 0 5
10275: ST_TO_ADDR
// end ;
10276: LD_VAR 0 3
10280: RET
// export function PrepareDifficulty ; begin
10281: LD_INT 0
10283: PPUSH
// if Difficulty = 1 then
10284: LD_OWVAR 67
10288: PUSH
10289: LD_INT 1
10291: EQUAL
10292: IFFALSE 10355
// begin RemoveUnit ( brw2 ) ;
10294: LD_INT 9
10296: PPUSH
10297: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10301: LD_INT 30
10303: PPUSH
10304: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10308: LD_INT 52
10310: PPUSH
10311: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10315: LD_INT 63
10317: PPUSH
10318: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10322: LD_INT 5
10324: PUSH
10325: LD_INT 4
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PPUSH
10332: LD_INT 60
10334: PPUSH
10335: CALL_OW 240
// RuSoldMinLevel = 0 ;
10339: LD_ADDR_EXP 13
10343: PUSH
10344: LD_INT 0
10346: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10347: LD_ADDR_EXP 14
10351: PUSH
10352: LD_INT 1
10354: ST_TO_ADDR
// end ; if Difficulty = 2 then
10355: LD_OWVAR 67
10359: PUSH
10360: LD_INT 2
10362: EQUAL
10363: IFFALSE 10405
// begin RemoveUnit ( brw4 ) ;
10365: LD_INT 52
10367: PPUSH
10368: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10372: LD_INT 5
10374: PUSH
10375: LD_INT 4
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PPUSH
10382: LD_INT 50
10384: PPUSH
10385: CALL_OW 240
// RuSoldMinLevel = 1 ;
10389: LD_ADDR_EXP 13
10393: PUSH
10394: LD_INT 1
10396: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10397: LD_ADDR_EXP 14
10401: PUSH
10402: LD_INT 2
10404: ST_TO_ADDR
// end ; if Difficulty >= 3 then
10405: LD_OWVAR 67
10409: PUSH
10410: LD_INT 3
10412: GREATEREQUAL
10413: IFFALSE 10448
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10415: LD_INT 5
10417: PUSH
10418: LD_INT 4
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PPUSH
10425: LD_INT 40
10427: PPUSH
10428: CALL_OW 240
// RuSoldMinLevel = 2 ;
10432: LD_ADDR_EXP 13
10436: PUSH
10437: LD_INT 2
10439: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10440: LD_ADDR_EXP 14
10444: PUSH
10445: LD_INT 3
10447: ST_TO_ADDR
// end ; end ;
10448: LD_VAR 0 1
10452: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10453: LD_INT 0
10455: PPUSH
10456: PPUSH
10457: PPUSH
// if not vehicles then
10458: LD_VAR 0 1
10462: NOT
10463: IFFALSE 10467
// exit ;
10465: GO 10597
// tmp := [ ] ;
10467: LD_ADDR_VAR 0 5
10471: PUSH
10472: EMPTY
10473: ST_TO_ADDR
// for i in vehicles do
10474: LD_ADDR_VAR 0 4
10478: PUSH
10479: LD_VAR 0 1
10483: PUSH
10484: FOR_IN
10485: IFFALSE 10581
// tmp := Replace ( tmp , tmp + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10487: LD_ADDR_VAR 0 5
10491: PUSH
10492: LD_VAR 0 5
10496: PPUSH
10497: LD_VAR 0 5
10501: PUSH
10502: LD_INT 1
10504: PLUS
10505: PPUSH
10506: LD_VAR 0 4
10510: PPUSH
10511: CALL_OW 265
10515: PUSH
10516: LD_VAR 0 4
10520: PPUSH
10521: CALL_OW 262
10525: PUSH
10526: LD_VAR 0 4
10530: PPUSH
10531: CALL_OW 263
10535: PUSH
10536: LD_VAR 0 4
10540: PPUSH
10541: CALL_OW 264
10545: PUSH
10546: LD_VAR 0 4
10550: PPUSH
10551: CALL_OW 261
10555: PUSH
10556: LD_VAR 0 4
10560: PPUSH
10561: CALL_OW 256
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: PPUSH
10574: CALL_OW 1
10578: ST_TO_ADDR
10579: GO 10484
10581: POP
10582: POP
// SaveVariable ( tmp , ident ) ;
10583: LD_VAR 0 5
10587: PPUSH
10588: LD_VAR 0 2
10592: PPUSH
10593: CALL_OW 39
// end ; end_of_file
10597: LD_VAR 0 3
10601: RET
// export function PrepareHeroes ; var plive , prefix ; begin
10602: LD_INT 0
10604: PPUSH
10605: PPUSH
10606: PPUSH
// prefix := 01_ ;
10607: LD_ADDR_VAR 0 3
10611: PUSH
10612: LD_STRING 01_
10614: ST_TO_ADDR
// uc_side := 1 ;
10615: LD_ADDR_OWVAR 20
10619: PUSH
10620: LD_INT 1
10622: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debug ) , prefix ) ;
10623: LD_ADDR_EXP 1
10627: PUSH
10628: LD_STRING JMM
10630: PPUSH
10631: LD_EXP 34
10635: NOT
10636: PPUSH
10637: LD_VAR 0 3
10641: PPUSH
10642: CALL 34223 0 3
10646: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10647: LD_ADDR_VAR 0 2
10651: PUSH
10652: LD_STRING 01_JMMLifePoints_1
10654: PPUSH
10655: LD_INT 1000
10657: PPUSH
10658: CALL_OW 30
10662: ST_TO_ADDR
// if plive < 250 then
10663: LD_VAR 0 2
10667: PUSH
10668: LD_INT 250
10670: LESS
10671: IFFALSE 10681
// plive := 300 ;
10673: LD_ADDR_VAR 0 2
10677: PUSH
10678: LD_INT 300
10680: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10681: LD_EXP 1
10685: PPUSH
10686: LD_VAR 0 2
10690: PPUSH
10691: CALL_OW 234
// Powell := NewCharacter ( Powell ) ;
10695: LD_ADDR_EXP 9
10699: PUSH
10700: LD_STRING Powell
10702: PPUSH
10703: CALL_OW 25
10707: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , prefix ) ;
10708: LD_ADDR_EXP 2
10712: PUSH
10713: LD_STRING Bobby
10715: PPUSH
10716: LD_EXP 34
10720: NOT
10721: PPUSH
10722: LD_VAR 0 3
10726: PPUSH
10727: CALL 34223 0 3
10731: ST_TO_ADDR
// if Bobby then
10732: LD_EXP 2
10736: IFFALSE 10786
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10738: LD_ADDR_VAR 0 2
10742: PUSH
10743: LD_STRING 01_BobbyLifePoints_1
10745: PPUSH
10746: LD_INT 1000
10748: PPUSH
10749: CALL_OW 30
10753: ST_TO_ADDR
// if plive < 250 then
10754: LD_VAR 0 2
10758: PUSH
10759: LD_INT 250
10761: LESS
10762: IFFALSE 10772
// plive := 300 ;
10764: LD_ADDR_VAR 0 2
10768: PUSH
10769: LD_INT 300
10771: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
10772: LD_EXP 2
10776: PPUSH
10777: LD_VAR 0 2
10781: PPUSH
10782: CALL_OW 234
// end ; Cyrus := PrepareUnit ( Cyrus , ( not debug ) , prefix ) ;
10786: LD_ADDR_EXP 3
10790: PUSH
10791: LD_STRING Cyrus
10793: PPUSH
10794: LD_EXP 34
10798: NOT
10799: PPUSH
10800: LD_VAR 0 3
10804: PPUSH
10805: CALL 34223 0 3
10809: ST_TO_ADDR
// if Cyrus then
10810: LD_EXP 3
10814: IFFALSE 10864
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
10816: LD_ADDR_VAR 0 2
10820: PUSH
10821: LD_STRING 01_CyrusLifePoints_1
10823: PPUSH
10824: LD_INT 1000
10826: PPUSH
10827: CALL_OW 30
10831: ST_TO_ADDR
// if plive < 250 then
10832: LD_VAR 0 2
10836: PUSH
10837: LD_INT 250
10839: LESS
10840: IFFALSE 10850
// plive := 300 ;
10842: LD_ADDR_VAR 0 2
10846: PUSH
10847: LD_INT 300
10849: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
10850: LD_EXP 3
10854: PPUSH
10855: LD_VAR 0 2
10859: PPUSH
10860: CALL_OW 234
// end ; Khatam := NewCharacter ( Khatam ) ;
10864: LD_ADDR_EXP 5
10868: PUSH
10869: LD_STRING Khatam
10871: PPUSH
10872: CALL_OW 25
10876: ST_TO_ADDR
// uc_side := 4 ;
10877: LD_ADDR_OWVAR 20
10881: PUSH
10882: LD_INT 4
10884: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10885: LD_ADDR_EXP 4
10889: PUSH
10890: LD_STRING Lisa
10892: PPUSH
10893: CALL_OW 25
10897: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10898: LD_EXP 1
10902: PPUSH
10903: LD_INT 3
10905: PPUSH
10906: LD_INT 0
10908: PPUSH
10909: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10913: LD_EXP 2
10917: PPUSH
10918: LD_INT 3
10920: PPUSH
10921: LD_INT 0
10923: PPUSH
10924: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10928: LD_EXP 3
10932: PPUSH
10933: LD_INT 3
10935: PPUSH
10936: LD_INT 0
10938: PPUSH
10939: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10943: LD_EXP 4
10947: PPUSH
10948: LD_INT 5
10950: PPUSH
10951: LD_INT 0
10953: PPUSH
10954: CALL_OW 49
// ComCrawl ( Lisa ) ;
10958: LD_EXP 4
10962: PPUSH
10963: CALL_OW 137
// end ;
10967: LD_VAR 0 1
10971: RET
// export function PrepareLisSquad ; var i , un ; begin
10972: LD_INT 0
10974: PPUSH
10975: PPUSH
10976: PPUSH
// uc_side := 4 ;
10977: LD_ADDR_OWVAR 20
10981: PUSH
10982: LD_INT 4
10984: ST_TO_ADDR
// uc_nation := 1 ;
10985: LD_ADDR_OWVAR 21
10989: PUSH
10990: LD_INT 1
10992: ST_TO_ADDR
// hc_class := 2 ;
10993: LD_ADDR_OWVAR 28
10997: PUSH
10998: LD_INT 2
11000: ST_TO_ADDR
// hc_sex := sex_male ;
11001: LD_ADDR_OWVAR 27
11005: PUSH
11006: LD_INT 1
11008: ST_TO_ADDR
// hc_gallery :=  ;
11009: LD_ADDR_OWVAR 33
11013: PUSH
11014: LD_STRING 
11016: ST_TO_ADDR
// hc_name :=  ;
11017: LD_ADDR_OWVAR 26
11021: PUSH
11022: LD_STRING 
11024: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11025: LD_ADDR_OWVAR 30
11029: PUSH
11030: LD_INT 0
11032: PUSH
11033: LD_INT 1
11035: PUSH
11036: LD_INT 0
11038: PUSH
11039: LD_INT 0
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11048: LD_ADDR_OWVAR 31
11052: PUSH
11053: LD_INT 1
11055: PUSH
11056: LD_INT 2
11058: PUSH
11059: LD_INT 0
11061: PUSH
11062: LD_INT 0
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: ST_TO_ADDR
// un := CreateHuman ;
11071: LD_ADDR_VAR 0 3
11075: PUSH
11076: CALL_OW 44
11080: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11081: LD_VAR 0 3
11085: PPUSH
11086: LD_INT 6
11088: PPUSH
11089: LD_INT 0
11091: PPUSH
11092: CALL_OW 49
// hc_sex := sex_female ;
11096: LD_ADDR_OWVAR 27
11100: PUSH
11101: LD_INT 2
11103: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11104: LD_ADDR_OWVAR 30
11108: PUSH
11109: LD_INT 0
11111: PUSH
11112: LD_INT 0
11114: PUSH
11115: LD_INT 0
11117: PUSH
11118: LD_INT 1
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11127: LD_ADDR_OWVAR 31
11131: PUSH
11132: LD_INT 0
11134: PUSH
11135: LD_INT 1
11137: PUSH
11138: LD_INT 0
11140: PUSH
11141: LD_INT 1
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: ST_TO_ADDR
// un := CreateHuman ;
11150: LD_ADDR_VAR 0 3
11154: PUSH
11155: CALL_OW 44
11159: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11160: LD_VAR 0 3
11164: PPUSH
11165: LD_INT 6
11167: PPUSH
11168: LD_INT 0
11170: PPUSH
11171: CALL_OW 49
// if not Bobby and not Cyrus then
11175: LD_EXP 2
11179: NOT
11180: PUSH
11181: LD_EXP 3
11185: NOT
11186: AND
11187: IFFALSE 11276
// begin hc_class := 1 ;
11189: LD_ADDR_OWVAR 28
11193: PUSH
11194: LD_INT 1
11196: ST_TO_ADDR
// hc_sex := sex_male ;
11197: LD_ADDR_OWVAR 27
11201: PUSH
11202: LD_INT 1
11204: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11205: LD_ADDR_OWVAR 30
11209: PUSH
11210: LD_INT 2
11212: PUSH
11213: LD_INT 3
11215: PUSH
11216: LD_INT 1
11218: PUSH
11219: LD_INT 0
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11228: LD_ADDR_OWVAR 31
11232: PUSH
11233: LD_INT 2
11235: PUSH
11236: LD_INT 3
11238: PUSH
11239: LD_INT 1
11241: PUSH
11242: LD_INT 0
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: ST_TO_ADDR
// un := CreateHuman ;
11251: LD_ADDR_VAR 0 3
11255: PUSH
11256: CALL_OW 44
11260: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11261: LD_VAR 0 3
11265: PPUSH
11266: LD_INT 31
11268: PPUSH
11269: LD_INT 0
11271: PPUSH
11272: CALL_OW 49
// end ; InitHc ;
11276: CALL_OW 19
// end ;
11280: LD_VAR 0 1
11284: RET
// export function PrepareOtherAmericans ; begin
11285: LD_INT 0
11287: PPUSH
// uc_side := 4 ;
11288: LD_ADDR_OWVAR 20
11292: PUSH
11293: LD_INT 4
11295: ST_TO_ADDR
// uc_nation := 1 ;
11296: LD_ADDR_OWVAR 21
11300: PUSH
11301: LD_INT 1
11303: ST_TO_ADDR
// hc_gallery :=  ;
11304: LD_ADDR_OWVAR 33
11308: PUSH
11309: LD_STRING 
11311: ST_TO_ADDR
// hc_name := Tom Garvin ;
11312: LD_ADDR_OWVAR 26
11316: PUSH
11317: LD_STRING Tom Garvin
11319: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 2 ) ;
11320: LD_INT 1
11322: PPUSH
11323: LD_INT 1
11325: PPUSH
11326: LD_INT 2
11328: PPUSH
11329: CALL_OW 380
// Brian := CreateHuman ;
11333: LD_ADDR_EXP 6
11337: PUSH
11338: CALL_OW 44
11342: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11343: LD_EXP 6
11347: PPUSH
11348: LD_INT 10
11350: PPUSH
11351: LD_INT 0
11353: PPUSH
11354: CALL_OW 49
// hc_name := Jerry White ;
11358: LD_ADDR_OWVAR 26
11362: PUSH
11363: LD_STRING Jerry White
11365: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , 2 ) ;
11366: LD_INT 1
11368: PPUSH
11369: LD_INT 3
11371: PPUSH
11372: LD_INT 2
11374: PPUSH
11375: CALL_OW 380
// Jerry := CreateHuman ;
11379: LD_ADDR_EXP 7
11383: PUSH
11384: CALL_OW 44
11388: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11389: LD_EXP 7
11393: PPUSH
11394: LD_INT 10
11396: PPUSH
11397: LD_INT 0
11399: PPUSH
11400: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11404: LD_EXP 6
11408: PUSH
11409: LD_EXP 7
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: PPUSH
11418: CALL_OW 140
// end ;
11422: LD_VAR 0 1
11426: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11427: LD_INT 0
11429: PPUSH
11430: PPUSH
11431: PPUSH
// for i = 1 to 6 do
11432: LD_ADDR_VAR 0 2
11436: PUSH
11437: DOUBLE
11438: LD_INT 1
11440: DEC
11441: ST_TO_ADDR
11442: LD_INT 6
11444: PUSH
11445: FOR_TO
11446: IFFALSE 11540
// begin uc_side := 4 ;
11448: LD_ADDR_OWVAR 20
11452: PUSH
11453: LD_INT 4
11455: ST_TO_ADDR
// uc_nation := 1 ;
11456: LD_ADDR_OWVAR 21
11460: PUSH
11461: LD_INT 1
11463: ST_TO_ADDR
// hc_gallery :=  ;
11464: LD_ADDR_OWVAR 33
11468: PUSH
11469: LD_STRING 
11471: ST_TO_ADDR
// hc_name :=  ;
11472: LD_ADDR_OWVAR 26
11476: PUSH
11477: LD_STRING 
11479: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11480: LD_INT 0
11482: PPUSH
11483: LD_INT 1
11485: PPUSH
11486: LD_INT 4
11488: PPUSH
11489: CALL_OW 12
11493: PPUSH
11494: LD_INT 1
11496: PPUSH
11497: CALL_OW 380
// un := CreateHuman ;
11501: LD_ADDR_VAR 0 3
11505: PUSH
11506: CALL_OW 44
11510: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11511: LD_VAR 0 3
11515: PPUSH
11516: LD_INT 16
11518: PPUSH
11519: LD_INT 0
11521: PPUSH
11522: CALL_OW 49
// SetLives ( un , 1 ) ;
11526: LD_VAR 0 3
11530: PPUSH
11531: LD_INT 1
11533: PPUSH
11534: CALL_OW 234
// end ;
11538: GO 11445
11540: POP
11541: POP
// DyingSold := CreateHuman ;
11542: LD_ADDR_EXP 35
11546: PUSH
11547: CALL_OW 44
11551: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11552: LD_EXP 35
11556: PPUSH
11557: LD_INT 16
11559: PPUSH
11560: LD_INT 0
11562: PPUSH
11563: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11567: LD_EXP 35
11571: PPUSH
11572: LD_INT 250
11574: PPUSH
11575: CALL_OW 234
// end ; end_of_file
11579: LD_VAR 0 1
11583: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11584: LD_INT 0
11586: PPUSH
11587: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11588: LD_ADDR_VAR 0 2
11592: PUSH
11593: LD_INT 22
11595: PUSH
11596: LD_INT 1
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PUSH
11603: LD_INT 23
11605: PUSH
11606: LD_INT 1
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PUSH
11613: LD_INT 25
11615: PUSH
11616: LD_INT 2
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: PUSH
11623: LD_INT 50
11625: PUSH
11626: EMPTY
11627: LIST
11628: PUSH
11629: LD_INT 56
11631: PUSH
11632: EMPTY
11633: LIST
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: PPUSH
11642: CALL_OW 69
11646: PUSH
11647: LD_EXP 1
11651: PUSH
11652: EMPTY
11653: LIST
11654: DIFF
11655: ST_TO_ADDR
// if not tmp then
11656: LD_VAR 0 2
11660: NOT
11661: IFFALSE 11665
// exit ;
11663: GO 11741
// uc_side = 6 ;
11665: LD_ADDR_OWVAR 20
11669: PUSH
11670: LD_INT 6
11672: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11673: LD_ADDR_EXP 8
11677: PUSH
11678: LD_STRING Mikhail
11680: PPUSH
11681: CALL_OW 25
11685: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11686: LD_EXP 8
11690: PPUSH
11691: LD_INT 3
11693: PPUSH
11694: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
11698: LD_EXP 8
11702: PPUSH
11703: LD_VAR 0 2
11707: PUSH
11708: LD_INT 1
11710: ARRAY
11711: PPUSH
11712: CALL_OW 250
11716: PPUSH
11717: LD_VAR 0 2
11721: PUSH
11722: LD_INT 1
11724: ARRAY
11725: PPUSH
11726: CALL_OW 251
11730: PPUSH
11731: LD_INT 5
11733: PPUSH
11734: LD_INT 1
11736: PPUSH
11737: CALL_OW 50
// end ;
11741: LD_VAR 0 1
11745: RET
// export function PrepareRussianCommander ; begin
11746: LD_INT 0
11748: PPUSH
// uc_side = 3 ;
11749: LD_ADDR_OWVAR 20
11753: PUSH
11754: LD_INT 3
11756: ST_TO_ADDR
// uc_nation = 3 ;
11757: LD_ADDR_OWVAR 21
11761: PUSH
11762: LD_INT 3
11764: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11765: LD_ADDR_EXP 19
11769: PUSH
11770: LD_STRING Natasza
11772: PPUSH
11773: CALL_OW 25
11777: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11778: LD_EXP 19
11782: PPUSH
11783: LD_INT 24
11785: PPUSH
11786: LD_INT 0
11788: PPUSH
11789: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11793: LD_EXP 19
11797: PPUSH
11798: LD_INT 56
11800: PPUSH
11801: LD_INT 16
11803: PPUSH
11804: CALL_OW 118
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , Natasza ) ;
11808: LD_ADDR_EXP 24
11812: PUSH
11813: LD_EXP 24
11817: PPUSH
11818: LD_EXP 24
11822: PUSH
11823: LD_INT 1
11825: PLUS
11826: PPUSH
11827: LD_EXP 19
11831: PPUSH
11832: CALL_OW 1
11836: ST_TO_ADDR
// end ;
11837: LD_VAR 0 1
11841: RET
// export function PrepareSouthBase ; var i , un ; begin
11842: LD_INT 0
11844: PPUSH
11845: PPUSH
11846: PPUSH
// for i = 1 to 2 do
11847: LD_ADDR_VAR 0 2
11851: PUSH
11852: DOUBLE
11853: LD_INT 1
11855: DEC
11856: ST_TO_ADDR
11857: LD_INT 2
11859: PUSH
11860: FOR_TO
11861: IFFALSE 11970
// begin uc_side = 3 ;
11863: LD_ADDR_OWVAR 20
11867: PUSH
11868: LD_INT 3
11870: ST_TO_ADDR
// uc_nation = 3 ;
11871: LD_ADDR_OWVAR 21
11875: PUSH
11876: LD_INT 3
11878: ST_TO_ADDR
// hc_gallery =  ;
11879: LD_ADDR_OWVAR 33
11883: PUSH
11884: LD_STRING 
11886: ST_TO_ADDR
// hc_name =  ;
11887: LD_ADDR_OWVAR 26
11891: PUSH
11892: LD_STRING 
11894: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11895: LD_INT 1
11897: PPUSH
11898: LD_INT 1
11900: PPUSH
11901: LD_EXP 13
11905: PPUSH
11906: LD_EXP 14
11910: PPUSH
11911: CALL_OW 12
11915: PPUSH
11916: CALL_OW 380
// hc_importance = 0 ;
11920: LD_ADDR_OWVAR 32
11924: PUSH
11925: LD_INT 0
11927: ST_TO_ADDR
// un = CreateHuman ;
11928: LD_ADDR_VAR 0 3
11932: PUSH
11933: CALL_OW 44
11937: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11938: LD_VAR 0 3
11942: PPUSH
11943: LD_INT 11
11945: PPUSH
11946: LD_INT 0
11948: PPUSH
11949: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
11953: LD_VAR 0 3
11957: PPUSH
11958: LD_INT 111
11960: PPUSH
11961: LD_INT 38
11963: PPUSH
11964: CALL_OW 118
// end ;
11968: GO 11860
11970: POP
11971: POP
// for i = 1 to 2 do
11972: LD_ADDR_VAR 0 2
11976: PUSH
11977: DOUBLE
11978: LD_INT 1
11980: DEC
11981: ST_TO_ADDR
11982: LD_INT 2
11984: PUSH
11985: FOR_TO
11986: IFFALSE 12069
// begin uc_side = 3 ;
11988: LD_ADDR_OWVAR 20
11992: PUSH
11993: LD_INT 3
11995: ST_TO_ADDR
// uc_nation = 3 ;
11996: LD_ADDR_OWVAR 21
12000: PUSH
12001: LD_INT 3
12003: ST_TO_ADDR
// hc_gallery =  ;
12004: LD_ADDR_OWVAR 33
12008: PUSH
12009: LD_STRING 
12011: ST_TO_ADDR
// hc_name =  ;
12012: LD_ADDR_OWVAR 26
12016: PUSH
12017: LD_STRING 
12019: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12020: LD_INT 0
12022: PPUSH
12023: LD_INT 3
12025: PPUSH
12026: LD_EXP 13
12030: PPUSH
12031: LD_EXP 14
12035: PPUSH
12036: CALL_OW 12
12040: PPUSH
12041: CALL_OW 380
// un = CreateHuman ;
12045: LD_ADDR_VAR 0 3
12049: PUSH
12050: CALL_OW 44
12054: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12055: LD_VAR 0 3
12059: PPUSH
12060: LD_INT 10
12062: PPUSH
12063: CALL_OW 52
// end ;
12067: GO 11985
12069: POP
12070: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12071: LD_INT 3
12073: PPUSH
12074: LD_INT 3
12076: PPUSH
12077: LD_INT 33
12079: PPUSH
12080: LD_EXP 13
12084: PPUSH
12085: LD_EXP 14
12089: PPUSH
12090: CALL_OW 12
12094: PPUSH
12095: LD_INT 1
12097: PPUSH
12098: LD_INT 1
12100: PUSH
12101: LD_INT 2
12103: PUSH
12104: LD_INT 2
12106: PUSH
12107: LD_INT 3
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: PUSH
12116: LD_OWVAR 67
12120: ARRAY
12121: PPUSH
12122: CALL 8729 0 6
// for i in UnitsInside ( arm2 ) do
12126: LD_ADDR_VAR 0 2
12130: PUSH
12131: LD_INT 33
12133: PPUSH
12134: CALL_OW 313
12138: PUSH
12139: FOR_IN
12140: IFFALSE 12173
// southBaseDefenders = Replace ( southBaseDefenders , southBaseDefenders + 1 , i ) ;
12142: LD_ADDR_EXP 25
12146: PUSH
12147: LD_EXP 25
12151: PPUSH
12152: LD_EXP 25
12156: PUSH
12157: LD_INT 1
12159: PLUS
12160: PPUSH
12161: LD_VAR 0 2
12165: PPUSH
12166: CALL_OW 1
12170: ST_TO_ADDR
12171: GO 12139
12173: POP
12174: POP
// end ;
12175: LD_VAR 0 1
12179: RET
// export function PrepareNorthBase ; var i , un ; begin
12180: LD_INT 0
12182: PPUSH
12183: PPUSH
12184: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) , 4 ] [ Difficulty ] do
12185: LD_ADDR_VAR 0 2
12189: PUSH
12190: DOUBLE
12191: LD_INT 1
12193: DEC
12194: ST_TO_ADDR
12195: LD_INT 1
12197: PPUSH
12198: LD_INT 2
12200: PPUSH
12201: CALL_OW 12
12205: PUSH
12206: LD_INT 2
12208: PPUSH
12209: LD_INT 3
12211: PPUSH
12212: CALL_OW 12
12216: PUSH
12217: LD_INT 3
12219: PPUSH
12220: LD_INT 4
12222: PPUSH
12223: CALL_OW 12
12227: PUSH
12228: LD_INT 4
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: PUSH
12237: LD_OWVAR 67
12241: ARRAY
12242: PUSH
12243: FOR_TO
12244: IFFALSE 12330
// begin uc_side = 3 ;
12246: LD_ADDR_OWVAR 20
12250: PUSH
12251: LD_INT 3
12253: ST_TO_ADDR
// uc_nation = 3 ;
12254: LD_ADDR_OWVAR 21
12258: PUSH
12259: LD_INT 3
12261: ST_TO_ADDR
// hc_gallery =  ;
12262: LD_ADDR_OWVAR 33
12266: PUSH
12267: LD_STRING 
12269: ST_TO_ADDR
// hc_name =  ;
12270: LD_ADDR_OWVAR 26
12274: PUSH
12275: LD_STRING 
12277: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12278: LD_INT 0
12280: PPUSH
12281: LD_INT 1
12283: PPUSH
12284: LD_EXP 13
12288: PPUSH
12289: LD_EXP 14
12293: PPUSH
12294: CALL_OW 12
12298: PPUSH
12299: CALL_OW 380
// un = CreateHuman ;
12303: LD_ADDR_VAR 0 3
12307: PUSH
12308: CALL_OW 44
12312: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12313: LD_VAR 0 3
12317: PPUSH
12318: LD_INT 14
12320: PPUSH
12321: LD_INT 0
12323: PPUSH
12324: CALL_OW 49
// end ;
12328: GO 12243
12330: POP
12331: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) , 4 ] [ Difficulty ] ) ;
12332: LD_INT 3
12334: PPUSH
12335: LD_INT 3
12337: PPUSH
12338: LD_INT 2
12340: PPUSH
12341: LD_EXP 13
12345: PPUSH
12346: LD_EXP 14
12350: PPUSH
12351: CALL_OW 12
12355: PPUSH
12356: LD_INT 1
12358: PPUSH
12359: LD_INT 1
12361: PPUSH
12362: LD_INT 2
12364: PPUSH
12365: CALL_OW 12
12369: PUSH
12370: LD_INT 1
12372: PPUSH
12373: LD_INT 3
12375: PPUSH
12376: CALL_OW 12
12380: PUSH
12381: LD_INT 1
12383: PPUSH
12384: LD_INT 3
12386: PPUSH
12387: CALL_OW 12
12391: PUSH
12392: LD_INT 4
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: PUSH
12401: LD_OWVAR 67
12405: ARRAY
12406: PPUSH
12407: CALL 8729 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 , 2 ] [ Difficulty ] ) ;
12411: LD_INT 3
12413: PPUSH
12414: LD_INT 3
12416: PPUSH
12417: LD_INT 23
12419: PPUSH
12420: LD_EXP 13
12424: PPUSH
12425: LD_EXP 14
12429: PPUSH
12430: CALL_OW 12
12434: PPUSH
12435: LD_INT 4
12437: PPUSH
12438: LD_INT 0
12440: PUSH
12441: LD_INT 1
12443: PUSH
12444: LD_INT 2
12446: PUSH
12447: LD_INT 2
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: PUSH
12456: LD_OWVAR 67
12460: ARRAY
12461: PPUSH
12462: CALL 8729 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12466: LD_INT 3
12468: PPUSH
12469: LD_INT 3
12471: PPUSH
12472: LD_INT 1
12474: PPUSH
12475: LD_EXP 13
12479: PPUSH
12480: LD_EXP 14
12484: PPUSH
12485: CALL_OW 12
12489: PPUSH
12490: LD_INT 2
12492: PPUSH
12493: LD_INT 1
12495: PUSH
12496: LD_INT 2
12498: PUSH
12499: LD_INT 2
12501: PUSH
12502: LD_INT 3
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: PUSH
12511: LD_OWVAR 67
12515: ARRAY
12516: PPUSH
12517: CALL 8729 0 6
// for i in UnitsInside ( arm1 ) do
12521: LD_ADDR_VAR 0 2
12525: PUSH
12526: LD_INT 2
12528: PPUSH
12529: CALL_OW 313
12533: PUSH
12534: FOR_IN
12535: IFFALSE 12568
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , i ) ;
12537: LD_ADDR_EXP 24
12541: PUSH
12542: LD_EXP 24
12546: PPUSH
12547: LD_EXP 24
12551: PUSH
12552: LD_INT 1
12554: PLUS
12555: PPUSH
12556: LD_VAR 0 2
12560: PPUSH
12561: CALL_OW 1
12565: ST_TO_ADDR
12566: GO 12534
12568: POP
12569: POP
// end ;
12570: LD_VAR 0 1
12574: RET
// export function PrepareOtherRussians ; var i , un ; begin
12575: LD_INT 0
12577: PPUSH
12578: PPUSH
12579: PPUSH
// for i = 1 to 2 do
12580: LD_ADDR_VAR 0 2
12584: PUSH
12585: DOUBLE
12586: LD_INT 1
12588: DEC
12589: ST_TO_ADDR
12590: LD_INT 2
12592: PUSH
12593: FOR_TO
12594: IFFALSE 12695
// begin uc_side = 3 ;
12596: LD_ADDR_OWVAR 20
12600: PUSH
12601: LD_INT 3
12603: ST_TO_ADDR
// uc_nation = 3 ;
12604: LD_ADDR_OWVAR 21
12608: PUSH
12609: LD_INT 3
12611: ST_TO_ADDR
// hc_gallery =  ;
12612: LD_ADDR_OWVAR 33
12616: PUSH
12617: LD_STRING 
12619: ST_TO_ADDR
// hc_name =  ;
12620: LD_ADDR_OWVAR 26
12624: PUSH
12625: LD_STRING 
12627: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12628: LD_INT 0
12630: PPUSH
12631: LD_INT 1
12633: PPUSH
12634: LD_EXP 13
12638: PPUSH
12639: LD_EXP 14
12643: PPUSH
12644: CALL_OW 12
12648: PPUSH
12649: CALL_OW 380
// un = CreateHuman ;
12653: LD_ADDR_VAR 0 3
12657: PUSH
12658: CALL_OW 44
12662: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12663: LD_VAR 0 3
12667: PPUSH
12668: LD_INT 9
12670: PPUSH
12671: LD_INT 0
12673: PPUSH
12674: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12678: LD_VAR 0 3
12682: PPUSH
12683: LD_INT 80
12685: PPUSH
12686: LD_INT 73
12688: PPUSH
12689: CALL_OW 118
// end ;
12693: GO 12593
12695: POP
12696: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12697: LD_ADDR_VAR 0 2
12701: PUSH
12702: LD_INT 22
12704: PUSH
12705: LD_INT 3
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: PUSH
12712: LD_INT 30
12714: PUSH
12715: LD_INT 31
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PPUSH
12726: CALL_OW 69
12730: PUSH
12731: FOR_IN
12732: IFFALSE 12760
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12734: LD_EXP 13
12738: PPUSH
12739: LD_EXP 14
12743: PPUSH
12744: CALL_OW 12
12748: PPUSH
12749: LD_VAR 0 2
12753: PPUSH
12754: CALL 8838 0 2
12758: GO 12731
12760: POP
12761: POP
// end ;
12762: LD_VAR 0 1
12766: RET
// export function PrepareCargoBays ; begin
12767: LD_INT 0
12769: PPUSH
// uc_side = 3 ;
12770: LD_ADDR_OWVAR 20
12774: PUSH
12775: LD_INT 3
12777: ST_TO_ADDR
// uc_nation = 3 ;
12778: LD_ADDR_OWVAR 21
12782: PUSH
12783: LD_INT 3
12785: ST_TO_ADDR
// vc_engine = 1 ;
12786: LD_ADDR_OWVAR 39
12790: PUSH
12791: LD_INT 1
12793: ST_TO_ADDR
// vc_control = 1 ;
12794: LD_ADDR_OWVAR 38
12798: PUSH
12799: LD_INT 1
12801: ST_TO_ADDR
// vc_weapon = 51 ;
12802: LD_ADDR_OWVAR 40
12806: PUSH
12807: LD_INT 51
12809: ST_TO_ADDR
// vc_chassis = 22 ;
12810: LD_ADDR_OWVAR 37
12814: PUSH
12815: LD_INT 22
12817: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12818: LD_ADDR_EXP 15
12822: PUSH
12823: CALL_OW 45
12827: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12828: LD_ADDR_EXP 16
12832: PUSH
12833: CALL_OW 45
12837: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12838: LD_EXP 15
12842: PPUSH
12843: LD_INT 13
12845: PPUSH
12846: LD_INT 0
12848: PPUSH
12849: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12853: LD_EXP 16
12857: PPUSH
12858: LD_INT 13
12860: PPUSH
12861: LD_INT 0
12863: PPUSH
12864: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
12868: LD_EXP 15
12872: PPUSH
12873: LD_INT 2
12875: PPUSH
12876: LD_INT 70
12878: PUSH
12879: LD_INT 50
12881: PUSH
12882: LD_INT 30
12884: PUSH
12885: LD_INT 20
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: PUSH
12894: LD_OWVAR 67
12898: ARRAY
12899: PPUSH
12900: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
12904: LD_EXP 16
12908: PPUSH
12909: LD_INT 2
12911: PPUSH
12912: LD_INT 70
12914: PUSH
12915: LD_INT 50
12917: PUSH
12918: LD_INT 30
12920: PUSH
12921: LD_INT 20
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: PUSH
12930: LD_OWVAR 67
12934: ARRAY
12935: PPUSH
12936: CALL_OW 291
// hc_gallery =  ;
12940: LD_ADDR_OWVAR 33
12944: PUSH
12945: LD_STRING 
12947: ST_TO_ADDR
// hc_name =  ;
12948: LD_ADDR_OWVAR 26
12952: PUSH
12953: LD_STRING 
12955: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12956: LD_INT 1
12958: PPUSH
12959: LD_INT 3
12961: PPUSH
12962: LD_INT 1
12964: PPUSH
12965: LD_INT 2
12967: PPUSH
12968: CALL_OW 12
12972: PPUSH
12973: CALL_OW 380
// driver1 = CreateHuman ;
12977: LD_ADDR_EXP 17
12981: PUSH
12982: CALL_OW 44
12986: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
12987: LD_EXP 17
12991: PPUSH
12992: LD_EXP 15
12996: PPUSH
12997: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13001: LD_ADDR_OWVAR 26
13005: PUSH
13006: LD_STRING Nikolai Andreyev
13008: ST_TO_ADDR
// driver2 = CreateHuman ;
13009: LD_ADDR_EXP 18
13013: PUSH
13014: CALL_OW 44
13018: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13019: LD_EXP 18
13023: PPUSH
13024: LD_EXP 16
13028: PPUSH
13029: CALL_OW 52
// end ;
13033: LD_VAR 0 1
13037: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , mech ; begin
13038: LD_INT 0
13040: PPUSH
13041: PPUSH
13042: PPUSH
13043: PPUSH
13044: PPUSH
13045: PPUSH
// uc_side = 3 ;
13046: LD_ADDR_OWVAR 20
13050: PUSH
13051: LD_INT 3
13053: ST_TO_ADDR
// uc_nation = 3 ;
13054: LD_ADDR_OWVAR 21
13058: PUSH
13059: LD_INT 3
13061: ST_TO_ADDR
// for i := 1 to count do
13062: LD_ADDR_VAR 0 4
13066: PUSH
13067: DOUBLE
13068: LD_INT 1
13070: DEC
13071: ST_TO_ADDR
13072: LD_VAR 0 1
13076: PUSH
13077: FOR_TO
13078: IFFALSE 13340
// begin vc_engine = 1 ;
13080: LD_ADDR_OWVAR 39
13084: PUSH
13085: LD_INT 1
13087: ST_TO_ADDR
// vc_control = 1 ;
13088: LD_ADDR_OWVAR 38
13092: PUSH
13093: LD_INT 1
13095: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
13096: LD_ADDR_OWVAR 40
13100: PUSH
13101: LD_INT 42
13103: ST_TO_ADDR
// if Difficulty = 3 then
13104: LD_OWVAR 67
13108: PUSH
13109: LD_INT 3
13111: EQUAL
13112: IFFALSE 13141
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13114: LD_ADDR_OWVAR 40
13118: PUSH
13119: LD_INT 42
13121: PUSH
13122: LD_INT 43
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: PUSH
13129: LD_INT 1
13131: PPUSH
13132: LD_INT 2
13134: PPUSH
13135: CALL_OW 12
13139: ARRAY
13140: ST_TO_ADDR
// if Difficulty = 4 then
13141: LD_OWVAR 67
13145: PUSH
13146: LD_INT 4
13148: EQUAL
13149: IFFALSE 13186
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 4 ) ] ;
13151: LD_ADDR_OWVAR 40
13155: PUSH
13156: LD_INT 42
13158: PUSH
13159: LD_INT 43
13161: PUSH
13162: LD_INT 43
13164: PUSH
13165: LD_INT 44
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: PUSH
13174: LD_INT 1
13176: PPUSH
13177: LD_INT 4
13179: PPUSH
13180: CALL_OW 12
13184: ARRAY
13185: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
13186: LD_ADDR_OWVAR 37
13190: PUSH
13191: LD_INT 21
13193: PUSH
13194: LD_INT 22
13196: PUSH
13197: LD_INT 22
13199: PUSH
13200: LD_INT 22
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: PUSH
13209: LD_OWVAR 67
13213: ARRAY
13214: ST_TO_ADDR
// veh = CreateVehicle ;
13215: LD_ADDR_VAR 0 5
13219: PUSH
13220: CALL_OW 45
13224: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13225: LD_VAR 0 5
13229: PPUSH
13230: LD_VAR 0 2
13234: PPUSH
13235: LD_INT 0
13237: PPUSH
13238: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13242: LD_ADDR_EXP 26
13246: PUSH
13247: LD_EXP 26
13251: PUSH
13252: LD_VAR 0 5
13256: ADD
13257: ST_TO_ADDR
// hc_gallery =  ;
13258: LD_ADDR_OWVAR 33
13262: PUSH
13263: LD_STRING 
13265: ST_TO_ADDR
// hc_name =  ;
13266: LD_ADDR_OWVAR 26
13270: PUSH
13271: LD_STRING 
13273: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13274: LD_INT 0
13276: PPUSH
13277: LD_INT 3
13279: PPUSH
13280: LD_EXP 13
13284: PPUSH
13285: LD_EXP 14
13289: PPUSH
13290: CALL_OW 12
13294: PPUSH
13295: CALL_OW 380
// un = CreateHuman ;
13299: LD_ADDR_VAR 0 6
13303: PUSH
13304: CALL_OW 44
13308: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13309: LD_VAR 0 6
13313: PPUSH
13314: LD_VAR 0 5
13318: PPUSH
13319: CALL_OW 52
// ComMoveXY ( un , 14 , 9 ) ;
13323: LD_VAR 0 6
13327: PPUSH
13328: LD_INT 14
13330: PPUSH
13331: LD_INT 9
13333: PPUSH
13334: CALL_OW 111
// end ;
13338: GO 13077
13340: POP
13341: POP
// wait ( 0 0$1 ) ;
13342: LD_INT 35
13344: PPUSH
13345: CALL_OW 67
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13349: LD_INT 0
13351: PPUSH
13352: LD_INT 2
13354: PPUSH
13355: LD_EXP 13
13359: PPUSH
13360: LD_EXP 14
13364: PPUSH
13365: CALL_OW 12
13369: PPUSH
13370: CALL_OW 380
// un = CreateHuman ;
13374: LD_ADDR_VAR 0 6
13378: PUSH
13379: CALL_OW 44
13383: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13384: LD_ADDR_VAR 0 4
13388: PUSH
13389: DOUBLE
13390: LD_INT 1
13392: DEC
13393: ST_TO_ADDR
13394: LD_VAR 0 1
13398: PUSH
13399: LD_INT 2
13401: PUSH
13402: LD_INT 2
13404: MUL
13405: PLUS
13406: PUSH
13407: FOR_TO
13408: IFFALSE 13500
// begin hc_gallery =  ;
13410: LD_ADDR_OWVAR 33
13414: PUSH
13415: LD_STRING 
13417: ST_TO_ADDR
// hc_name =  ;
13418: LD_ADDR_OWVAR 26
13422: PUSH
13423: LD_STRING 
13425: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13426: LD_INT 1
13428: PPUSH
13429: LD_INT 1
13431: PPUSH
13432: LD_EXP 13
13436: PPUSH
13437: LD_EXP 14
13441: PPUSH
13442: CALL_OW 12
13446: PPUSH
13447: CALL_OW 380
// un = CreateHuman ;
13451: LD_ADDR_VAR 0 6
13455: PUSH
13456: CALL_OW 44
13460: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 13 , 4 , false ) ;
13461: LD_VAR 0 6
13465: PPUSH
13466: LD_INT 9
13468: PPUSH
13469: LD_INT 13
13471: PPUSH
13472: LD_INT 4
13474: PPUSH
13475: LD_INT 0
13477: PPUSH
13478: CALL_OW 50
// attackGroup = attackGroup ^ un ;
13482: LD_ADDR_EXP 26
13486: PUSH
13487: LD_EXP 26
13491: PUSH
13492: LD_VAR 0 6
13496: ADD
13497: ST_TO_ADDR
// end ;
13498: GO 13407
13500: POP
13501: POP
// tmp := FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13502: LD_ADDR_VAR 0 7
13506: PUSH
13507: LD_INT 26
13509: PPUSH
13510: LD_INT 22
13512: PUSH
13513: LD_INT 3
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 21
13522: PUSH
13523: LD_INT 1
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: LD_INT 26
13532: PUSH
13533: LD_INT 1
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: LIST
13544: PPUSH
13545: CALL_OW 70
13549: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13550: LD_VAR 0 7
13554: PUSH
13555: LD_INT 1
13557: ARRAY
13558: PPUSH
13559: LD_STRING D9-Rus3-1
13561: PPUSH
13562: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13566: LD_VAR 0 7
13570: PUSH
13571: LD_INT 2
13573: ARRAY
13574: PPUSH
13575: LD_STRING D9-Russ-1
13577: PPUSH
13578: CALL_OW 88
// ComAgressiveMove ( attackGroup , 31 , 13 ) ;
13582: LD_EXP 26
13586: PPUSH
13587: LD_INT 31
13589: PPUSH
13590: LD_INT 13
13592: PPUSH
13593: CALL_OW 114
// wait ( 0 0$3 ) ;
13597: LD_INT 105
13599: PPUSH
13600: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13604: LD_INT 35
13606: PPUSH
13607: CALL_OW 67
// for i in attackGroup do
13611: LD_ADDR_VAR 0 4
13615: PUSH
13616: LD_EXP 26
13620: PUSH
13621: FOR_IN
13622: IFFALSE 13989
// begin if IsDead ( i ) then
13624: LD_VAR 0 4
13628: PPUSH
13629: CALL_OW 301
13633: IFFALSE 13653
// begin attackGroup := attackGroup diff i ;
13635: LD_ADDR_EXP 26
13639: PUSH
13640: LD_EXP 26
13644: PUSH
13645: LD_VAR 0 4
13649: DIFF
13650: ST_TO_ADDR
// continue ;
13651: GO 13621
// end ; if not HasTask ( i ) and not GetTag ( i ) then
13653: LD_VAR 0 4
13657: PPUSH
13658: CALL_OW 314
13662: NOT
13663: PUSH
13664: LD_VAR 0 4
13668: PPUSH
13669: CALL_OW 110
13673: NOT
13674: AND
13675: IFFALSE 13711
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
13677: LD_VAR 0 4
13681: PPUSH
13682: LD_INT 22
13684: PUSH
13685: LD_INT 1
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: PPUSH
13692: CALL_OW 69
13696: PPUSH
13697: LD_VAR 0 4
13701: PPUSH
13702: CALL_OW 74
13706: PPUSH
13707: CALL_OW 115
// if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
13711: LD_VAR 0 4
13715: PPUSH
13716: CALL_OW 110
13720: NOT
13721: PUSH
13722: LD_VAR 0 4
13726: PPUSH
13727: CALL_OW 256
13731: PUSH
13732: LD_INT 650
13734: LESS
13735: AND
13736: PUSH
13737: LD_VAR 0 4
13741: PPUSH
13742: CALL_OW 247
13746: PUSH
13747: LD_INT 2
13749: EQUAL
13750: AND
13751: IFFALSE 13780
// begin SetTag ( i , 1 ) ;
13753: LD_VAR 0 4
13757: PPUSH
13758: LD_INT 1
13760: PPUSH
13761: CALL_OW 109
// ComMoveXY ( i , 20 , 8 ) ;
13765: LD_VAR 0 4
13769: PPUSH
13770: LD_INT 20
13772: PPUSH
13773: LD_INT 8
13775: PPUSH
13776: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 20 , 8 ) < 6 then
13780: LD_VAR 0 4
13784: PPUSH
13785: CALL_OW 110
13789: PUSH
13790: LD_INT 1
13792: EQUAL
13793: PUSH
13794: LD_VAR 0 4
13798: PPUSH
13799: LD_INT 20
13801: PPUSH
13802: LD_INT 8
13804: PPUSH
13805: CALL_OW 297
13809: PUSH
13810: LD_INT 6
13812: LESS
13813: AND
13814: IFFALSE 13828
// SetTag ( i , 2 ) ;
13816: LD_VAR 0 4
13820: PPUSH
13821: LD_INT 2
13823: PPUSH
13824: CALL_OW 109
// if GetTag ( i ) = 2 then
13828: LD_VAR 0 4
13832: PPUSH
13833: CALL_OW 110
13837: PUSH
13838: LD_INT 2
13840: EQUAL
13841: IFFALSE 13949
// begin if GetLives ( i ) = 1000 then
13843: LD_VAR 0 4
13847: PPUSH
13848: CALL_OW 256
13852: PUSH
13853: LD_INT 1000
13855: EQUAL
13856: IFFALSE 13872
// SetTag ( i , 3 ) else
13858: LD_VAR 0 4
13862: PPUSH
13863: LD_INT 3
13865: PPUSH
13866: CALL_OW 109
13870: GO 13949
// if IsDrivenBy ( i ) then
13872: LD_VAR 0 4
13876: PPUSH
13877: CALL_OW 311
13881: IFFALSE 13949
// begin mech := IsDrivenBy ( i ) ;
13883: LD_ADDR_VAR 0 8
13887: PUSH
13888: LD_VAR 0 4
13892: PPUSH
13893: CALL_OW 311
13897: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
13898: LD_INT 1
13900: PPUSH
13901: LD_VAR 0 8
13905: PPUSH
13906: CALL_OW 292
13910: NOT
13911: PUSH
13912: LD_VAR 0 8
13916: PPUSH
13917: CALL_OW 256
13921: PUSH
13922: LD_INT 1000
13924: LESS
13925: AND
13926: IFFALSE 13940
// SetLives ( mech , 1000 ) ;
13928: LD_VAR 0 8
13932: PPUSH
13933: LD_INT 1000
13935: PPUSH
13936: CALL_OW 234
// ComRepairVehicleAndReturn ( mech ) ;
13940: LD_VAR 0 8
13944: PPUSH
13945: CALL 72652 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
13949: LD_VAR 0 4
13953: PPUSH
13954: CALL_OW 110
13958: PUSH
13959: LD_INT 3
13961: EQUAL
13962: PUSH
13963: LD_VAR 0 4
13967: PPUSH
13968: CALL_OW 311
13972: AND
13973: IFFALSE 13987
// SetTag ( i , 0 ) ;
13975: LD_VAR 0 4
13979: PPUSH
13980: LD_INT 0
13982: PPUSH
13983: CALL_OW 109
// end ;
13987: GO 13621
13989: POP
13990: POP
// until not attackGroup ;
13991: LD_EXP 26
13995: NOT
13996: IFFALSE 13604
// end ;
13998: LD_VAR 0 3
14002: RET
// every 0 0$1 trigger UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do var i ;
14003: LD_EXP 26
14007: PPUSH
14008: LD_INT 21
14010: PUSH
14011: LD_INT 2
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: PPUSH
14018: CALL_OW 72
14022: IFFALSE 14090
14024: GO 14026
14026: DISABLE
14027: LD_INT 0
14029: PPUSH
// begin enable ;
14030: ENABLE
// for i in UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do
14031: LD_ADDR_VAR 0 1
14035: PUSH
14036: LD_EXP 26
14040: PPUSH
14041: LD_INT 21
14043: PUSH
14044: LD_INT 2
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: PPUSH
14051: CALL_OW 72
14055: PUSH
14056: FOR_IN
14057: IFFALSE 14088
// if GetFuel ( i ) < 3 then
14059: LD_VAR 0 1
14063: PPUSH
14064: CALL_OW 261
14068: PUSH
14069: LD_INT 3
14071: LESS
14072: IFFALSE 14086
// SetFuel ( i , 3 ) ;
14074: LD_VAR 0 1
14078: PPUSH
14079: LD_INT 3
14081: PPUSH
14082: CALL_OW 240
14086: GO 14056
14088: POP
14089: POP
// end ; end_of_file
14090: PPOPN 1
14092: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do
14093: LD_INT 22
14095: PUSH
14096: LD_INT 3
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: LD_INT 25
14105: PUSH
14106: LD_INT 2
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PPUSH
14117: CALL_OW 69
14121: IFFALSE 14140
14123: GO 14125
14125: DISABLE
// begin enable ;
14126: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
14127: LD_INT 3
14129: PPUSH
14130: LD_INT 1
14132: PPUSH
14133: LD_INT 22
14135: PPUSH
14136: CALL 8974 0 3
// end ;
14140: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
14141: LD_INT 22
14143: PUSH
14144: LD_INT 3
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PUSH
14151: LD_INT 25
14153: PUSH
14154: LD_INT 4
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: PPUSH
14165: CALL_OW 69
14169: IFFALSE 14191
14171: GO 14173
14173: DISABLE
// begin enable ;
14174: ENABLE
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
14175: LD_INT 3
14177: PPUSH
14178: LD_INT 20
14180: PPUSH
14181: LD_INT 22
14183: PPUSH
14184: LD_INT 23
14186: PPUSH
14187: CALL 9306 0 4
// end ;
14191: END
// every 0 0$1 trigger northBaseDefenders do
14192: LD_EXP 24
14196: IFFALSE 14220
14198: GO 14200
14200: DISABLE
// begin enable ;
14201: ENABLE
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
14202: LD_INT 22
14204: PPUSH
14205: LD_INT 1
14207: PPUSH
14208: LD_EXP 24
14212: PPUSH
14213: LD_INT 2
14215: PPUSH
14216: CALL 9578 0 4
// end ;
14220: END
// every 0 0$1 trigger southBaseDefenders do
14221: LD_EXP 25
14225: IFFALSE 14249
14227: GO 14229
14229: DISABLE
// begin enable ;
14230: ENABLE
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
14231: LD_INT 23
14233: PPUSH
14234: LD_INT 1
14236: PPUSH
14237: LD_EXP 25
14241: PPUSH
14242: LD_INT 33
14244: PPUSH
14245: CALL 9578 0 4
// end ; end_of_file
14249: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
14250: LD_VAR 0 1
14254: PUSH
14255: LD_EXP 1
14259: EQUAL
14260: IFFALSE 14269
// YouLost ( JMM ) ;
14262: LD_STRING JMM
14264: PPUSH
14265: CALL_OW 104
// if GetBType ( unit ) = b_depot then
14269: LD_VAR 0 1
14273: PPUSH
14274: CALL_OW 266
14278: PUSH
14279: LD_INT 0
14281: EQUAL
14282: IFFALSE 14291
// YouLost ( DepotDestroyed ) ;
14284: LD_STRING DepotDestroyed
14286: PPUSH
14287: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14291: LD_VAR 0 1
14295: PPUSH
14296: CALL_OW 255
14300: PUSH
14301: LD_INT 1
14303: EQUAL
14304: PUSH
14305: LD_VAR 0 1
14309: PPUSH
14310: CALL_OW 247
14314: PUSH
14315: LD_INT 1
14317: EQUAL
14318: AND
14319: IFFALSE 14335
// deadsCounter = deadsCounter + 1 ;
14321: LD_ADDR_EXP 31
14325: PUSH
14326: LD_EXP 31
14330: PUSH
14331: LD_INT 1
14333: PLUS
14334: ST_TO_ADDR
// end ;
14335: PPOPN 1
14337: END
// on Command ( cmd ) do var i , j , tmp ;
14338: LD_INT 0
14340: PPUSH
14341: PPUSH
14342: PPUSH
// begin SOS_Command ( cmd ) ;
14343: LD_VAR 0 1
14347: PPUSH
14348: CALL 30324 0 1
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
14352: LD_ADDR_VAR 0 2
14356: PUSH
14357: LD_INT 22
14359: PUSH
14360: LD_INT 1
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PUSH
14367: LD_INT 21
14369: PUSH
14370: LD_INT 2
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: PPUSH
14381: CALL_OW 69
14385: PUSH
14386: FOR_IN
14387: IFFALSE 14508
// begin if GetTaskList ( i ) then
14389: LD_VAR 0 2
14393: PPUSH
14394: CALL_OW 437
14398: IFFALSE 14506
// begin for j = 1 to GetTaskList ( i ) do
14400: LD_ADDR_VAR 0 3
14404: PUSH
14405: DOUBLE
14406: LD_INT 1
14408: DEC
14409: ST_TO_ADDR
14410: LD_VAR 0 2
14414: PPUSH
14415: CALL_OW 437
14419: PUSH
14420: FOR_TO
14421: IFFALSE 14504
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14423: LD_ADDR_VAR 0 4
14427: PUSH
14428: LD_VAR 0 2
14432: PPUSH
14433: CALL_OW 437
14437: PUSH
14438: LD_VAR 0 3
14442: ARRAY
14443: PUSH
14444: LD_INT 4
14446: ARRAY
14447: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14448: LD_VAR 0 4
14452: PPUSH
14453: CALL_OW 255
14457: PUSH
14458: LD_INT 3
14460: EQUAL
14461: PUSH
14462: LD_VAR 0 4
14466: PPUSH
14467: CALL_OW 247
14471: PUSH
14472: LD_INT 2
14474: EQUAL
14475: AND
14476: PUSH
14477: LD_VAR 0 4
14481: PPUSH
14482: CALL_OW 264
14486: PUSH
14487: LD_INT 51
14489: EQUAL
14490: AND
14491: IFFALSE 14502
// ComStop ( i ) ;
14493: LD_VAR 0 2
14497: PPUSH
14498: CALL_OW 141
// end ;
14502: GO 14420
14504: POP
14505: POP
// end ; end ;
14506: GO 14386
14508: POP
14509: POP
// end ;
14510: PPOPN 4
14512: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14513: LD_VAR 0 2
14517: PUSH
14518: LD_EXP 8
14522: EQUAL
14523: PUSH
14524: LD_EXP 21
14528: PUSH
14529: LD_INT 4
14531: NONEQUAL
14532: AND
14533: IFFALSE 14685
// begin if IsOk ( Mikhail ) then
14535: LD_EXP 8
14539: PPUSH
14540: CALL_OW 302
14544: IFFALSE 14552
// AskMikhail else
14546: CALL 7251 0 0
14550: GO 14685
// if IsOk ( llab1 ) then
14552: LD_INT 23
14554: PPUSH
14555: CALL_OW 302
14559: IFFALSE 14648
// begin InGameOn ;
14561: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14565: LD_EXP 8
14569: PPUSH
14570: LD_INT 6
14572: PPUSH
14573: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
14577: LD_INT 23
14579: PPUSH
14580: LD_INT 6
14582: PPUSH
14583: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
14587: LD_EXP 8
14591: PPUSH
14592: LD_INT 23
14594: PPUSH
14595: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14599: LD_INT 35
14601: PPUSH
14602: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
14606: LD_EXP 8
14610: PPUSH
14611: CALL_OW 310
14615: PUSH
14616: LD_INT 23
14618: EQUAL
14619: PUSH
14620: LD_EXP 8
14624: PPUSH
14625: CALL_OW 301
14629: OR
14630: IFFALSE 14599
// SetSide ( llab1 , 1 ) ;
14632: LD_INT 23
14634: PPUSH
14635: LD_INT 1
14637: PPUSH
14638: CALL_OW 235
// InGameOff ;
14642: CALL_OW 9
// end else
14646: GO 14685
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
14648: LD_INT 3
14650: PPUSH
14651: LD_INT 6
14653: PPUSH
14654: LD_INT 2
14656: PPUSH
14657: LD_INT 1
14659: PPUSH
14660: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
14664: LD_EXP 8
14668: PPUSH
14669: LD_INT 6
14671: PPUSH
14672: CALL_OW 235
// ComHold ( Mikhail ) ;
14676: LD_EXP 8
14680: PPUSH
14681: CALL_OW 140
// end ; end ; end ;
14685: PPOPN 2
14687: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
14688: LD_EXP 8
14692: PPUSH
14693: CALL_OW 257
14697: PUSH
14698: LD_INT 3
14700: NONEQUAL
14701: IFFALSE 14719
14703: GO 14705
14705: DISABLE
// begin enable ;
14706: ENABLE
// SetClass ( Mikhail , 3 ) ;
14707: LD_EXP 8
14711: PPUSH
14712: LD_INT 3
14714: PPUSH
14715: CALL_OW 336
// end ; end_of_file
14719: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
14720: LD_INT 22
14722: PUSH
14723: LD_INT 1
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: PUSH
14730: LD_INT 21
14732: PUSH
14733: LD_INT 1
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: PUSH
14740: LD_INT 25
14742: PUSH
14743: LD_INT 2
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: LIST
14754: PPUSH
14755: CALL_OW 69
14759: PUSH
14760: LD_INT 0
14762: EQUAL
14763: PUSH
14764: LD_INT 22
14766: PUSH
14767: LD_INT 4
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: LD_INT 21
14776: PUSH
14777: LD_INT 1
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PUSH
14784: LD_INT 25
14786: PUSH
14787: LD_INT 2
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: LIST
14798: PPUSH
14799: CALL_OW 69
14803: PUSH
14804: LD_INT 0
14806: EQUAL
14807: AND
14808: PUSH
14809: LD_INT 1
14811: PPUSH
14812: CALL_OW 255
14816: PUSH
14817: LD_INT 3
14819: EQUAL
14820: AND
14821: PUSH
14822: LD_INT 10
14824: PPUSH
14825: CALL_OW 255
14829: PUSH
14830: LD_INT 3
14832: EQUAL
14833: AND
14834: IFFALSE 14846
14836: GO 14838
14838: DISABLE
// YouLost ( Engineer ) ;
14839: LD_STRING Engineer
14841: PPUSH
14842: CALL_OW 104
14846: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14847: LD_INT 1
14849: PPUSH
14850: CALL_OW 255
14854: PUSH
14855: LD_INT 3
14857: EQUAL
14858: PUSH
14859: LD_EXP 27
14863: PUSH
14864: LD_INT 1
14866: EQUAL
14867: AND
14868: IFFALSE 14880
14870: GO 14872
14872: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14873: LD_STRING DepotCaptured
14875: PPUSH
14876: CALL_OW 104
14880: END
// export function PrepareTigers ; var i , un ; begin
14881: LD_INT 0
14883: PPUSH
14884: PPUSH
14885: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
14886: LD_ADDR_VAR 0 2
14890: PUSH
14891: DOUBLE
14892: LD_INT 1
14894: DEC
14895: ST_TO_ADDR
14896: LD_INT 2
14898: PUSH
14899: LD_INT 3
14901: PUSH
14902: LD_INT 4
14904: PUSH
14905: LD_INT 5
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: PUSH
14914: LD_OWVAR 67
14918: ARRAY
14919: PUSH
14920: FOR_TO
14921: IFFALSE 15036
// begin uc_side := 0 ;
14923: LD_ADDR_OWVAR 20
14927: PUSH
14928: LD_INT 0
14930: ST_TO_ADDR
// uc_nation := nation_nature ;
14931: LD_ADDR_OWVAR 21
14935: PUSH
14936: LD_INT 0
14938: ST_TO_ADDR
// hc_sex := sex_male ;
14939: LD_ADDR_OWVAR 27
14943: PUSH
14944: LD_INT 1
14946: ST_TO_ADDR
// hc_class := class_tiger ;
14947: LD_ADDR_OWVAR 28
14951: PUSH
14952: LD_INT 14
14954: ST_TO_ADDR
// hc_skills := [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14955: LD_ADDR_OWVAR 31
14959: PUSH
14960: LD_EXP 14
14964: PUSH
14965: LD_INT 0
14967: PUSH
14968: LD_INT 0
14970: PUSH
14971: LD_INT 0
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: ST_TO_ADDR
// hc_agressivity := [ 30 , 40 , 45 , 50 ] [ Difficulty ] ;
14980: LD_ADDR_OWVAR 35
14984: PUSH
14985: LD_INT 30
14987: PUSH
14988: LD_INT 40
14990: PUSH
14991: LD_INT 45
14993: PUSH
14994: LD_INT 50
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: PUSH
15003: LD_OWVAR 67
15007: ARRAY
15008: ST_TO_ADDR
// un = CreateHuman ;
15009: LD_ADDR_VAR 0 3
15013: PUSH
15014: CALL_OW 44
15018: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15019: LD_VAR 0 3
15023: PPUSH
15024: LD_INT 27
15026: PPUSH
15027: LD_INT 0
15029: PPUSH
15030: CALL_OW 49
// end ;
15034: GO 14920
15036: POP
15037: POP
// end ; end_of_file
15038: LD_VAR 0 1
15042: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
15043: LD_INT 1
15045: PPUSH
15046: CALL_OW 255
15050: PUSH
15051: LD_INT 1
15053: EQUAL
15054: PUSH
15055: LD_INT 10
15057: PPUSH
15058: CALL_OW 255
15062: PUSH
15063: LD_INT 1
15065: EQUAL
15066: AND
15067: PUSH
15068: LD_EXP 20
15072: PUSH
15073: LD_INT 1
15075: EQUAL
15076: AND
15077: PUSH
15078: LD_INT 22
15080: PUSH
15081: LD_INT 3
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: PUSH
15088: LD_INT 21
15090: PUSH
15091: LD_INT 2
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: PUSH
15098: LD_INT 34
15100: PUSH
15101: LD_INT 51
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: PUSH
15108: LD_INT 3
15110: PUSH
15111: LD_INT 58
15113: PUSH
15114: EMPTY
15115: LIST
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: PPUSH
15127: CALL_OW 69
15131: PUSH
15132: LD_INT 0
15134: EQUAL
15135: AND
15136: IFFALSE 15231
15138: GO 15140
15140: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ) ;
15141: LD_INT 9450
15143: PUSH
15144: LD_INT 8400
15146: PUSH
15147: LD_INT 6300
15149: PUSH
15150: LD_INT 6300
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: PUSH
15159: LD_OWVAR 67
15163: ARRAY
15164: PPUSH
15165: CALL_OW 67
// if cargoEscape = 1 then
15169: LD_EXP 20
15173: PUSH
15174: LD_INT 1
15176: EQUAL
15177: IFFALSE 15231
// begin SayRadio ( Powell , D6-Pow-1 ) ;
15179: LD_EXP 9
15183: PPUSH
15184: LD_STRING D6-Pow-1
15186: PPUSH
15187: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
15191: LD_EXP 1
15195: PPUSH
15196: LD_STRING D6-JMM-1
15198: PPUSH
15199: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
15203: LD_EXP 9
15207: PPUSH
15208: LD_STRING D6-Pow-2
15210: PPUSH
15211: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
15215: LD_EXP 1
15219: PPUSH
15220: LD_STRING D6-JMM-2
15222: PPUSH
15223: CALL_OW 88
// FinishMission ;
15227: CALL 15447 0 0
// end ; end ;
15231: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
15232: LD_INT 1
15234: PPUSH
15235: CALL_OW 255
15239: PUSH
15240: LD_INT 1
15242: EQUAL
15243: PUSH
15244: LD_INT 10
15246: PPUSH
15247: CALL_OW 255
15251: PUSH
15252: LD_INT 1
15254: EQUAL
15255: AND
15256: PUSH
15257: LD_EXP 20
15261: PUSH
15262: LD_INT 1
15264: GREATER
15265: AND
15266: IFFALSE 15341
15268: GO 15270
15270: DISABLE
15271: LD_INT 0
15273: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
15274: LD_INT 11550
15276: PUSH
15277: LD_INT 10500
15279: PUSH
15280: LD_INT 9450
15282: PUSH
15283: LD_INT 8400
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: PUSH
15292: LD_OWVAR 67
15296: ARRAY
15297: PPUSH
15298: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 , 4 ] [ Difficulty ] , RussianAttack ) ;
15302: LD_INT 1
15304: PUSH
15305: LD_INT 2
15307: PUSH
15308: LD_INT 3
15310: PUSH
15311: LD_INT 4
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: PUSH
15320: LD_OWVAR 67
15324: ARRAY
15325: PPUSH
15326: LD_INT 13
15328: PPUSH
15329: CALL 13038 0 2
// lastBattle = 1 ;
15333: LD_ADDR_EXP 27
15337: PUSH
15338: LD_INT 1
15340: ST_TO_ADDR
// end ;
15341: PPOPN 1
15343: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
15344: LD_EXP 27
15348: PUSH
15349: LD_INT 1
15351: EQUAL
15352: PUSH
15353: LD_INT 26
15355: PPUSH
15356: LD_INT 22
15358: PUSH
15359: LD_INT 3
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PUSH
15366: LD_INT 21
15368: PUSH
15369: LD_INT 1
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PPUSH
15380: CALL_OW 70
15384: PUSH
15385: LD_INT 0
15387: EQUAL
15388: AND
15389: IFFALSE 15446
15391: GO 15393
15393: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
15394: LD_EXP 9
15398: PPUSH
15399: LD_STRING D6-Pow-1
15401: PPUSH
15402: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
15406: LD_EXP 1
15410: PPUSH
15411: LD_STRING D6-JMM-1
15413: PPUSH
15414: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
15418: LD_EXP 9
15422: PPUSH
15423: LD_STRING D6-Pow-2
15425: PPUSH
15426: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
15430: LD_EXP 1
15434: PPUSH
15435: LD_STRING D6-JMM-2
15437: PPUSH
15438: CALL_OW 88
// FinishMission ;
15442: CALL 15447 0 0
// end ;
15446: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
15447: LD_INT 0
15449: PPUSH
15450: PPUSH
15451: PPUSH
15452: PPUSH
15453: PPUSH
// if tick <= 18 18$00 then
15454: LD_OWVAR 1
15458: PUSH
15459: LD_INT 37800
15461: LESSEQUAL
15462: IFFALSE 15471
// SetAchievement ( ACH_ASPEED_2 ) ;
15464: LD_STRING ACH_ASPEED_2
15466: PPUSH
15467: CALL_OW 543
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15471: LD_ADDR_VAR 0 2
15475: PUSH
15476: LD_INT 22
15478: PUSH
15479: LD_INT 1
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: PUSH
15486: LD_INT 21
15488: PUSH
15489: LD_INT 2
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: LD_INT 24
15498: PUSH
15499: LD_INT 251
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: LIST
15510: PPUSH
15511: CALL_OW 69
15515: ST_TO_ADDR
// if tmp then
15516: LD_VAR 0 2
15520: IFFALSE 15534
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15522: LD_VAR 0 2
15526: PPUSH
15527: LD_STRING 02_tanks_1
15529: PPUSH
15530: CALL 10453 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
15534: LD_EXP 21
15538: PUSH
15539: LD_INT 1
15541: EQUAL
15542: PUSH
15543: LD_EXP 8
15547: PPUSH
15548: CALL_OW 300
15552: AND
15553: IFFALSE 15567
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15555: LD_EXP 21
15559: PPUSH
15560: LD_STRING 02_mikhailStatus_1
15562: PPUSH
15563: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15567: LD_INT 1
15569: PPUSH
15570: CALL_OW 274
15574: PPUSH
15575: LD_INT 1
15577: PPUSH
15578: CALL_OW 275
15582: PPUSH
15583: LD_STRING 02_resources_4
15585: PPUSH
15586: CALL_OW 39
// m1 := false ;
15590: LD_ADDR_VAR 0 3
15594: PUSH
15595: LD_INT 0
15597: ST_TO_ADDR
// m2 := false ;
15598: LD_ADDR_VAR 0 4
15602: PUSH
15603: LD_INT 0
15605: ST_TO_ADDR
// m3 := false ;
15606: LD_ADDR_VAR 0 5
15610: PUSH
15611: LD_INT 0
15613: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15614: LD_INT 1
15616: PPUSH
15617: CALL_OW 274
15621: PPUSH
15622: LD_INT 1
15624: PPUSH
15625: CALL_OW 275
15629: PUSH
15630: LD_INT 200
15632: GREATEREQUAL
15633: IFFALSE 15655
// begin AddMedal ( Cans , 1 ) ;
15635: LD_STRING Cans
15637: PPUSH
15638: LD_INT 1
15640: PPUSH
15641: CALL_OW 101
// m1 := true ;
15645: LD_ADDR_VAR 0 3
15649: PUSH
15650: LD_INT 1
15652: ST_TO_ADDR
// end else
15653: GO 15666
// begin AddMedal ( Cans , - 1 ) ;
15655: LD_STRING Cans
15657: PPUSH
15658: LD_INT 1
15660: NEG
15661: PPUSH
15662: CALL_OW 101
// end ; if deadsCounter < 2 then
15666: LD_EXP 31
15670: PUSH
15671: LD_INT 2
15673: LESS
15674: IFFALSE 15696
// begin AddMedal ( Deaths , 1 ) ;
15676: LD_STRING Deaths
15678: PPUSH
15679: LD_INT 1
15681: PPUSH
15682: CALL_OW 101
// m2 := true ;
15686: LD_ADDR_VAR 0 4
15690: PUSH
15691: LD_INT 1
15693: ST_TO_ADDR
// end else
15694: GO 15707
// begin AddMedal ( Deaths , - 1 ) ;
15696: LD_STRING Deaths
15698: PPUSH
15699: LD_INT 1
15701: NEG
15702: PPUSH
15703: CALL_OW 101
// end ; if mikhailStatus = 0 then
15707: LD_EXP 21
15711: PUSH
15712: LD_INT 0
15714: EQUAL
15715: IFFALSE 15728
// AddMedal ( Prisoner , - 1 ) ;
15717: LD_STRING Prisoner
15719: PPUSH
15720: LD_INT 1
15722: NEG
15723: PPUSH
15724: CALL_OW 101
// if mikhailStatus = 1 then
15728: LD_EXP 21
15732: PUSH
15733: LD_INT 1
15735: EQUAL
15736: IFFALSE 15756
// begin AddMedal ( Prisoner , 1 ) ;
15738: LD_STRING Prisoner
15740: PPUSH
15741: LD_INT 1
15743: PPUSH
15744: CALL_OW 101
// m3 := true ;
15748: LD_ADDR_VAR 0 5
15752: PUSH
15753: LD_INT 1
15755: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
15756: LD_EXP 21
15760: PUSH
15761: LD_INT 2
15763: EQUAL
15764: IFFALSE 15784
// begin AddMedal ( Prisoner , 2 ) ;
15766: LD_STRING Prisoner
15768: PPUSH
15769: LD_INT 2
15771: PPUSH
15772: CALL_OW 101
// m3 := true ;
15776: LD_ADDR_VAR 0 5
15780: PUSH
15781: LD_INT 1
15783: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
15784: LD_EXP 21
15788: PUSH
15789: LD_INT 3
15791: EQUAL
15792: IFFALSE 15805
// AddMedal ( Prisoner , - 2 ) ;
15794: LD_STRING Prisoner
15796: PPUSH
15797: LD_INT 2
15799: NEG
15800: PPUSH
15801: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
15805: LD_OWVAR 67
15809: PUSH
15810: LD_INT 3
15812: GREATEREQUAL
15813: PUSH
15814: LD_VAR 0 3
15818: AND
15819: PUSH
15820: LD_VAR 0 4
15824: AND
15825: PUSH
15826: LD_VAR 0 5
15830: AND
15831: IFFALSE 15843
// SetAchievementEX ( ACH_AMER , 2 ) ;
15833: LD_STRING ACH_AMER
15835: PPUSH
15836: LD_INT 2
15838: PPUSH
15839: CALL_OW 564
// GiveMedals ( MAIN ) ;
15843: LD_STRING MAIN
15845: PPUSH
15846: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
15850: LD_INT 22
15852: PUSH
15853: LD_INT 1
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: LD_INT 23
15862: PUSH
15863: LD_INT 1
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PUSH
15870: LD_INT 21
15872: PUSH
15873: LD_INT 1
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: LIST
15884: PPUSH
15885: CALL_OW 69
15889: PPUSH
15890: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15894: LD_EXP 1
15898: PPUSH
15899: LD_EXP 33
15903: PUSH
15904: LD_STRING JMM
15906: STR
15907: PPUSH
15908: CALL_OW 38
// if IsOK ( Bobby ) then
15912: LD_EXP 2
15916: PPUSH
15917: CALL_OW 302
15921: IFFALSE 15941
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15923: LD_EXP 2
15927: PPUSH
15928: LD_EXP 33
15932: PUSH
15933: LD_STRING Bobby
15935: STR
15936: PPUSH
15937: CALL_OW 38
// if IsOK ( Cyrus ) then
15941: LD_EXP 3
15945: PPUSH
15946: CALL_OW 302
15950: IFFALSE 15970
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15952: LD_EXP 3
15956: PPUSH
15957: LD_EXP 33
15961: PUSH
15962: LD_STRING Cyrus
15964: STR
15965: PPUSH
15966: CALL_OW 38
// if IsOK ( Lisa ) then
15970: LD_EXP 4
15974: PPUSH
15975: CALL_OW 302
15979: IFFALSE 15999
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15981: LD_EXP 4
15985: PPUSH
15986: LD_EXP 33
15990: PUSH
15991: LD_STRING Lisa
15993: STR
15994: PPUSH
15995: CALL_OW 38
// if IsOK ( Khatam ) then
15999: LD_EXP 5
16003: PPUSH
16004: CALL_OW 302
16008: IFFALSE 16028
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
16010: LD_EXP 5
16014: PPUSH
16015: LD_EXP 33
16019: PUSH
16020: LD_STRING Khatam
16022: STR
16023: PPUSH
16024: CALL_OW 38
// if IsOK ( Brian ) then
16028: LD_EXP 6
16032: PPUSH
16033: CALL_OW 302
16037: IFFALSE 16057
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
16039: LD_EXP 6
16043: PPUSH
16044: LD_EXP 33
16048: PUSH
16049: LD_STRING Brian
16051: STR
16052: PPUSH
16053: CALL_OW 38
// if IsOk ( Jerry ) then
16057: LD_EXP 7
16061: PPUSH
16062: CALL_OW 302
16066: IFFALSE 16086
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
16068: LD_EXP 7
16072: PPUSH
16073: LD_EXP 33
16077: PUSH
16078: LD_STRING Jerry
16080: STR
16081: PPUSH
16082: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
16086: LD_EXP 21
16090: PUSH
16091: LD_INT 1
16093: EQUAL
16094: PUSH
16095: LD_EXP 8
16099: PPUSH
16100: CALL_OW 255
16104: PUSH
16105: LD_INT 1
16107: EQUAL
16108: AND
16109: PUSH
16110: LD_EXP 8
16114: PPUSH
16115: CALL_OW 302
16119: AND
16120: IFFALSE 16140
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
16122: LD_EXP 8
16126: PPUSH
16127: LD_EXP 33
16131: PUSH
16132: LD_STRING Mikhail
16134: STR
16135: PPUSH
16136: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
16140: LD_INT 50
16142: PUSH
16143: EMPTY
16144: LIST
16145: PUSH
16146: LD_INT 22
16148: PUSH
16149: LD_INT 1
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 21
16158: PUSH
16159: LD_INT 1
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: LIST
16170: PPUSH
16171: CALL_OW 69
16175: PUSH
16176: LD_EXP 1
16180: PUSH
16181: LD_EXP 2
16185: PUSH
16186: LD_EXP 3
16190: PUSH
16191: LD_EXP 4
16195: PUSH
16196: LD_EXP 5
16200: PUSH
16201: LD_EXP 6
16205: PUSH
16206: LD_EXP 7
16210: PUSH
16211: LD_EXP 8
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: DIFF
16226: PPUSH
16227: LD_STRING 02_other_survivors
16229: PPUSH
16230: CALL_OW 38
// YouWin ;
16234: CALL_OW 103
// end ; end_of_file
16238: LD_VAR 0 1
16242: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
16243: LD_INT 0
16245: PPUSH
// ar_miner := 81 ;
16246: LD_ADDR_EXP 43
16250: PUSH
16251: LD_INT 81
16253: ST_TO_ADDR
// ar_crane := 88 ;
16254: LD_ADDR_EXP 42
16258: PUSH
16259: LD_INT 88
16261: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
16262: LD_ADDR_EXP 37
16266: PUSH
16267: LD_INT 89
16269: ST_TO_ADDR
// us_hack := 99 ;
16270: LD_ADDR_EXP 38
16274: PUSH
16275: LD_INT 99
16277: ST_TO_ADDR
// us_artillery := 97 ;
16278: LD_ADDR_EXP 39
16282: PUSH
16283: LD_INT 97
16285: ST_TO_ADDR
// ar_bio_bomb := 91 ;
16286: LD_ADDR_EXP 40
16290: PUSH
16291: LD_INT 91
16293: ST_TO_ADDR
// ar_mortar := 92 ;
16294: LD_ADDR_EXP 41
16298: PUSH
16299: LD_INT 92
16301: ST_TO_ADDR
// ru_radar := 98 ;
16302: LD_ADDR_EXP 36
16306: PUSH
16307: LD_INT 98
16309: ST_TO_ADDR
// tech_Artillery := 80 ;
16310: LD_ADDR_EXP 44
16314: PUSH
16315: LD_INT 80
16317: ST_TO_ADDR
// tech_RadMat := 81 ;
16318: LD_ADDR_EXP 45
16322: PUSH
16323: LD_INT 81
16325: ST_TO_ADDR
// tech_BasicTools := 82 ;
16326: LD_ADDR_EXP 46
16330: PUSH
16331: LD_INT 82
16333: ST_TO_ADDR
// tech_Cargo := 83 ;
16334: LD_ADDR_EXP 47
16338: PUSH
16339: LD_INT 83
16341: ST_TO_ADDR
// tech_Track := 84 ;
16342: LD_ADDR_EXP 48
16346: PUSH
16347: LD_INT 84
16349: ST_TO_ADDR
// tech_Crane := 85 ;
16350: LD_ADDR_EXP 49
16354: PUSH
16355: LD_INT 85
16357: ST_TO_ADDR
// tech_Bulldozer := 86 ;
16358: LD_ADDR_EXP 50
16362: PUSH
16363: LD_INT 86
16365: ST_TO_ADDR
// tech_Hovercraft := 87 ;
16366: LD_ADDR_EXP 51
16370: PUSH
16371: LD_INT 87
16373: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
16374: LD_ADDR_EXP 52
16378: PUSH
16379: LD_INT 88
16381: ST_TO_ADDR
// class_mastodont := 31 ;
16382: LD_ADDR_EXP 53
16386: PUSH
16387: LD_INT 31
16389: ST_TO_ADDR
// class_horse := 21 ;
16390: LD_ADDR_EXP 54
16394: PUSH
16395: LD_INT 21
16397: ST_TO_ADDR
// end ;
16398: LD_VAR 0 1
16402: RET
// every 1 do
16403: GO 16405
16405: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
16406: CALL 16243 0 0
16410: END
// every 0 0$1 do
16411: GO 16413
16413: DISABLE
// begin enable ;
16414: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
16415: LD_STRING updateTimer(
16417: PUSH
16418: LD_OWVAR 1
16422: STR
16423: PUSH
16424: LD_STRING );
16426: STR
16427: PPUSH
16428: CALL_OW 559
// end ;
16432: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16433: LD_INT 0
16435: PPUSH
// if p2 = 100 then
16436: LD_VAR 0 2
16440: PUSH
16441: LD_INT 100
16443: EQUAL
16444: IFFALSE 17447
// begin if not StreamModeActive then
16446: LD_EXP 55
16450: NOT
16451: IFFALSE 16461
// StreamModeActive := true ;
16453: LD_ADDR_EXP 55
16457: PUSH
16458: LD_INT 1
16460: ST_TO_ADDR
// if p3 = 0 then
16461: LD_VAR 0 3
16465: PUSH
16466: LD_INT 0
16468: EQUAL
16469: IFFALSE 16475
// InitStreamMode ;
16471: CALL 17607 0 0
// if p3 = 1 then
16475: LD_VAR 0 3
16479: PUSH
16480: LD_INT 1
16482: EQUAL
16483: IFFALSE 16493
// sRocket := true ;
16485: LD_ADDR_EXP 60
16489: PUSH
16490: LD_INT 1
16492: ST_TO_ADDR
// if p3 = 2 then
16493: LD_VAR 0 3
16497: PUSH
16498: LD_INT 2
16500: EQUAL
16501: IFFALSE 16511
// sSpeed := true ;
16503: LD_ADDR_EXP 59
16507: PUSH
16508: LD_INT 1
16510: ST_TO_ADDR
// if p3 = 3 then
16511: LD_VAR 0 3
16515: PUSH
16516: LD_INT 3
16518: EQUAL
16519: IFFALSE 16529
// sEngine := true ;
16521: LD_ADDR_EXP 61
16525: PUSH
16526: LD_INT 1
16528: ST_TO_ADDR
// if p3 = 4 then
16529: LD_VAR 0 3
16533: PUSH
16534: LD_INT 4
16536: EQUAL
16537: IFFALSE 16547
// sSpec := true ;
16539: LD_ADDR_EXP 58
16543: PUSH
16544: LD_INT 1
16546: ST_TO_ADDR
// if p3 = 5 then
16547: LD_VAR 0 3
16551: PUSH
16552: LD_INT 5
16554: EQUAL
16555: IFFALSE 16565
// sLevel := true ;
16557: LD_ADDR_EXP 62
16561: PUSH
16562: LD_INT 1
16564: ST_TO_ADDR
// if p3 = 6 then
16565: LD_VAR 0 3
16569: PUSH
16570: LD_INT 6
16572: EQUAL
16573: IFFALSE 16583
// sArmoury := true ;
16575: LD_ADDR_EXP 63
16579: PUSH
16580: LD_INT 1
16582: ST_TO_ADDR
// if p3 = 7 then
16583: LD_VAR 0 3
16587: PUSH
16588: LD_INT 7
16590: EQUAL
16591: IFFALSE 16601
// sRadar := true ;
16593: LD_ADDR_EXP 64
16597: PUSH
16598: LD_INT 1
16600: ST_TO_ADDR
// if p3 = 8 then
16601: LD_VAR 0 3
16605: PUSH
16606: LD_INT 8
16608: EQUAL
16609: IFFALSE 16619
// sBunker := true ;
16611: LD_ADDR_EXP 65
16615: PUSH
16616: LD_INT 1
16618: ST_TO_ADDR
// if p3 = 9 then
16619: LD_VAR 0 3
16623: PUSH
16624: LD_INT 9
16626: EQUAL
16627: IFFALSE 16637
// sHack := true ;
16629: LD_ADDR_EXP 66
16633: PUSH
16634: LD_INT 1
16636: ST_TO_ADDR
// if p3 = 10 then
16637: LD_VAR 0 3
16641: PUSH
16642: LD_INT 10
16644: EQUAL
16645: IFFALSE 16655
// sFire := true ;
16647: LD_ADDR_EXP 67
16651: PUSH
16652: LD_INT 1
16654: ST_TO_ADDR
// if p3 = 11 then
16655: LD_VAR 0 3
16659: PUSH
16660: LD_INT 11
16662: EQUAL
16663: IFFALSE 16673
// sRefresh := true ;
16665: LD_ADDR_EXP 68
16669: PUSH
16670: LD_INT 1
16672: ST_TO_ADDR
// if p3 = 12 then
16673: LD_VAR 0 3
16677: PUSH
16678: LD_INT 12
16680: EQUAL
16681: IFFALSE 16691
// sExp := true ;
16683: LD_ADDR_EXP 69
16687: PUSH
16688: LD_INT 1
16690: ST_TO_ADDR
// if p3 = 13 then
16691: LD_VAR 0 3
16695: PUSH
16696: LD_INT 13
16698: EQUAL
16699: IFFALSE 16709
// sDepot := true ;
16701: LD_ADDR_EXP 70
16705: PUSH
16706: LD_INT 1
16708: ST_TO_ADDR
// if p3 = 14 then
16709: LD_VAR 0 3
16713: PUSH
16714: LD_INT 14
16716: EQUAL
16717: IFFALSE 16727
// sFlag := true ;
16719: LD_ADDR_EXP 71
16723: PUSH
16724: LD_INT 1
16726: ST_TO_ADDR
// if p3 = 15 then
16727: LD_VAR 0 3
16731: PUSH
16732: LD_INT 15
16734: EQUAL
16735: IFFALSE 16745
// sKamikadze := true ;
16737: LD_ADDR_EXP 79
16741: PUSH
16742: LD_INT 1
16744: ST_TO_ADDR
// if p3 = 16 then
16745: LD_VAR 0 3
16749: PUSH
16750: LD_INT 16
16752: EQUAL
16753: IFFALSE 16763
// sTroll := true ;
16755: LD_ADDR_EXP 80
16759: PUSH
16760: LD_INT 1
16762: ST_TO_ADDR
// if p3 = 17 then
16763: LD_VAR 0 3
16767: PUSH
16768: LD_INT 17
16770: EQUAL
16771: IFFALSE 16781
// sSlow := true ;
16773: LD_ADDR_EXP 81
16777: PUSH
16778: LD_INT 1
16780: ST_TO_ADDR
// if p3 = 18 then
16781: LD_VAR 0 3
16785: PUSH
16786: LD_INT 18
16788: EQUAL
16789: IFFALSE 16799
// sLack := true ;
16791: LD_ADDR_EXP 82
16795: PUSH
16796: LD_INT 1
16798: ST_TO_ADDR
// if p3 = 19 then
16799: LD_VAR 0 3
16803: PUSH
16804: LD_INT 19
16806: EQUAL
16807: IFFALSE 16817
// sTank := true ;
16809: LD_ADDR_EXP 84
16813: PUSH
16814: LD_INT 1
16816: ST_TO_ADDR
// if p3 = 20 then
16817: LD_VAR 0 3
16821: PUSH
16822: LD_INT 20
16824: EQUAL
16825: IFFALSE 16835
// sRemote := true ;
16827: LD_ADDR_EXP 85
16831: PUSH
16832: LD_INT 1
16834: ST_TO_ADDR
// if p3 = 21 then
16835: LD_VAR 0 3
16839: PUSH
16840: LD_INT 21
16842: EQUAL
16843: IFFALSE 16853
// sPowell := true ;
16845: LD_ADDR_EXP 86
16849: PUSH
16850: LD_INT 1
16852: ST_TO_ADDR
// if p3 = 22 then
16853: LD_VAR 0 3
16857: PUSH
16858: LD_INT 22
16860: EQUAL
16861: IFFALSE 16871
// sTeleport := true ;
16863: LD_ADDR_EXP 89
16867: PUSH
16868: LD_INT 1
16870: ST_TO_ADDR
// if p3 = 23 then
16871: LD_VAR 0 3
16875: PUSH
16876: LD_INT 23
16878: EQUAL
16879: IFFALSE 16889
// sOilTower := true ;
16881: LD_ADDR_EXP 91
16885: PUSH
16886: LD_INT 1
16888: ST_TO_ADDR
// if p3 = 24 then
16889: LD_VAR 0 3
16893: PUSH
16894: LD_INT 24
16896: EQUAL
16897: IFFALSE 16907
// sShovel := true ;
16899: LD_ADDR_EXP 92
16903: PUSH
16904: LD_INT 1
16906: ST_TO_ADDR
// if p3 = 25 then
16907: LD_VAR 0 3
16911: PUSH
16912: LD_INT 25
16914: EQUAL
16915: IFFALSE 16925
// sSheik := true ;
16917: LD_ADDR_EXP 93
16921: PUSH
16922: LD_INT 1
16924: ST_TO_ADDR
// if p3 = 26 then
16925: LD_VAR 0 3
16929: PUSH
16930: LD_INT 26
16932: EQUAL
16933: IFFALSE 16943
// sEarthquake := true ;
16935: LD_ADDR_EXP 95
16939: PUSH
16940: LD_INT 1
16942: ST_TO_ADDR
// if p3 = 27 then
16943: LD_VAR 0 3
16947: PUSH
16948: LD_INT 27
16950: EQUAL
16951: IFFALSE 16961
// sAI := true ;
16953: LD_ADDR_EXP 96
16957: PUSH
16958: LD_INT 1
16960: ST_TO_ADDR
// if p3 = 28 then
16961: LD_VAR 0 3
16965: PUSH
16966: LD_INT 28
16968: EQUAL
16969: IFFALSE 16979
// sCargo := true ;
16971: LD_ADDR_EXP 99
16975: PUSH
16976: LD_INT 1
16978: ST_TO_ADDR
// if p3 = 29 then
16979: LD_VAR 0 3
16983: PUSH
16984: LD_INT 29
16986: EQUAL
16987: IFFALSE 16997
// sDLaser := true ;
16989: LD_ADDR_EXP 100
16993: PUSH
16994: LD_INT 1
16996: ST_TO_ADDR
// if p3 = 30 then
16997: LD_VAR 0 3
17001: PUSH
17002: LD_INT 30
17004: EQUAL
17005: IFFALSE 17015
// sExchange := true ;
17007: LD_ADDR_EXP 101
17011: PUSH
17012: LD_INT 1
17014: ST_TO_ADDR
// if p3 = 31 then
17015: LD_VAR 0 3
17019: PUSH
17020: LD_INT 31
17022: EQUAL
17023: IFFALSE 17033
// sFac := true ;
17025: LD_ADDR_EXP 102
17029: PUSH
17030: LD_INT 1
17032: ST_TO_ADDR
// if p3 = 32 then
17033: LD_VAR 0 3
17037: PUSH
17038: LD_INT 32
17040: EQUAL
17041: IFFALSE 17051
// sPower := true ;
17043: LD_ADDR_EXP 103
17047: PUSH
17048: LD_INT 1
17050: ST_TO_ADDR
// if p3 = 33 then
17051: LD_VAR 0 3
17055: PUSH
17056: LD_INT 33
17058: EQUAL
17059: IFFALSE 17069
// sRandom := true ;
17061: LD_ADDR_EXP 104
17065: PUSH
17066: LD_INT 1
17068: ST_TO_ADDR
// if p3 = 34 then
17069: LD_VAR 0 3
17073: PUSH
17074: LD_INT 34
17076: EQUAL
17077: IFFALSE 17087
// sShield := true ;
17079: LD_ADDR_EXP 105
17083: PUSH
17084: LD_INT 1
17086: ST_TO_ADDR
// if p3 = 35 then
17087: LD_VAR 0 3
17091: PUSH
17092: LD_INT 35
17094: EQUAL
17095: IFFALSE 17105
// sTime := true ;
17097: LD_ADDR_EXP 106
17101: PUSH
17102: LD_INT 1
17104: ST_TO_ADDR
// if p3 = 36 then
17105: LD_VAR 0 3
17109: PUSH
17110: LD_INT 36
17112: EQUAL
17113: IFFALSE 17123
// sTools := true ;
17115: LD_ADDR_EXP 107
17119: PUSH
17120: LD_INT 1
17122: ST_TO_ADDR
// if p3 = 101 then
17123: LD_VAR 0 3
17127: PUSH
17128: LD_INT 101
17130: EQUAL
17131: IFFALSE 17141
// sSold := true ;
17133: LD_ADDR_EXP 72
17137: PUSH
17138: LD_INT 1
17140: ST_TO_ADDR
// if p3 = 102 then
17141: LD_VAR 0 3
17145: PUSH
17146: LD_INT 102
17148: EQUAL
17149: IFFALSE 17159
// sDiff := true ;
17151: LD_ADDR_EXP 73
17155: PUSH
17156: LD_INT 1
17158: ST_TO_ADDR
// if p3 = 103 then
17159: LD_VAR 0 3
17163: PUSH
17164: LD_INT 103
17166: EQUAL
17167: IFFALSE 17177
// sFog := true ;
17169: LD_ADDR_EXP 76
17173: PUSH
17174: LD_INT 1
17176: ST_TO_ADDR
// if p3 = 104 then
17177: LD_VAR 0 3
17181: PUSH
17182: LD_INT 104
17184: EQUAL
17185: IFFALSE 17195
// sReset := true ;
17187: LD_ADDR_EXP 77
17191: PUSH
17192: LD_INT 1
17194: ST_TO_ADDR
// if p3 = 105 then
17195: LD_VAR 0 3
17199: PUSH
17200: LD_INT 105
17202: EQUAL
17203: IFFALSE 17213
// sSun := true ;
17205: LD_ADDR_EXP 78
17209: PUSH
17210: LD_INT 1
17212: ST_TO_ADDR
// if p3 = 106 then
17213: LD_VAR 0 3
17217: PUSH
17218: LD_INT 106
17220: EQUAL
17221: IFFALSE 17231
// sTiger := true ;
17223: LD_ADDR_EXP 74
17227: PUSH
17228: LD_INT 1
17230: ST_TO_ADDR
// if p3 = 107 then
17231: LD_VAR 0 3
17235: PUSH
17236: LD_INT 107
17238: EQUAL
17239: IFFALSE 17249
// sBomb := true ;
17241: LD_ADDR_EXP 75
17245: PUSH
17246: LD_INT 1
17248: ST_TO_ADDR
// if p3 = 108 then
17249: LD_VAR 0 3
17253: PUSH
17254: LD_INT 108
17256: EQUAL
17257: IFFALSE 17267
// sWound := true ;
17259: LD_ADDR_EXP 83
17263: PUSH
17264: LD_INT 1
17266: ST_TO_ADDR
// if p3 = 109 then
17267: LD_VAR 0 3
17271: PUSH
17272: LD_INT 109
17274: EQUAL
17275: IFFALSE 17285
// sBetray := true ;
17277: LD_ADDR_EXP 87
17281: PUSH
17282: LD_INT 1
17284: ST_TO_ADDR
// if p3 = 110 then
17285: LD_VAR 0 3
17289: PUSH
17290: LD_INT 110
17292: EQUAL
17293: IFFALSE 17303
// sContamin := true ;
17295: LD_ADDR_EXP 88
17299: PUSH
17300: LD_INT 1
17302: ST_TO_ADDR
// if p3 = 111 then
17303: LD_VAR 0 3
17307: PUSH
17308: LD_INT 111
17310: EQUAL
17311: IFFALSE 17321
// sOil := true ;
17313: LD_ADDR_EXP 90
17317: PUSH
17318: LD_INT 1
17320: ST_TO_ADDR
// if p3 = 112 then
17321: LD_VAR 0 3
17325: PUSH
17326: LD_INT 112
17328: EQUAL
17329: IFFALSE 17339
// sStu := true ;
17331: LD_ADDR_EXP 94
17335: PUSH
17336: LD_INT 1
17338: ST_TO_ADDR
// if p3 = 113 then
17339: LD_VAR 0 3
17343: PUSH
17344: LD_INT 113
17346: EQUAL
17347: IFFALSE 17357
// sBazooka := true ;
17349: LD_ADDR_EXP 97
17353: PUSH
17354: LD_INT 1
17356: ST_TO_ADDR
// if p3 = 114 then
17357: LD_VAR 0 3
17361: PUSH
17362: LD_INT 114
17364: EQUAL
17365: IFFALSE 17375
// sMortar := true ;
17367: LD_ADDR_EXP 98
17371: PUSH
17372: LD_INT 1
17374: ST_TO_ADDR
// if p3 = 115 then
17375: LD_VAR 0 3
17379: PUSH
17380: LD_INT 115
17382: EQUAL
17383: IFFALSE 17393
// sRanger := true ;
17385: LD_ADDR_EXP 108
17389: PUSH
17390: LD_INT 1
17392: ST_TO_ADDR
// if p3 = 116 then
17393: LD_VAR 0 3
17397: PUSH
17398: LD_INT 116
17400: EQUAL
17401: IFFALSE 17411
// sComputer := true ;
17403: LD_ADDR_EXP 109
17407: PUSH
17408: LD_INT 1
17410: ST_TO_ADDR
// if p3 = 117 then
17411: LD_VAR 0 3
17415: PUSH
17416: LD_INT 117
17418: EQUAL
17419: IFFALSE 17429
// s30 := true ;
17421: LD_ADDR_EXP 110
17425: PUSH
17426: LD_INT 1
17428: ST_TO_ADDR
// if p3 = 118 then
17429: LD_VAR 0 3
17433: PUSH
17434: LD_INT 118
17436: EQUAL
17437: IFFALSE 17447
// s60 := true ;
17439: LD_ADDR_EXP 111
17443: PUSH
17444: LD_INT 1
17446: ST_TO_ADDR
// end ; if p2 = 101 then
17447: LD_VAR 0 2
17451: PUSH
17452: LD_INT 101
17454: EQUAL
17455: IFFALSE 17583
// begin case p3 of 1 :
17457: LD_VAR 0 3
17461: PUSH
17462: LD_INT 1
17464: DOUBLE
17465: EQUAL
17466: IFTRUE 17470
17468: GO 17477
17470: POP
// hHackUnlimitedResources ; 2 :
17471: CALL 29179 0 0
17475: GO 17583
17477: LD_INT 2
17479: DOUBLE
17480: EQUAL
17481: IFTRUE 17485
17483: GO 17492
17485: POP
// hHackSetLevel10 ; 3 :
17486: CALL 29312 0 0
17490: GO 17583
17492: LD_INT 3
17494: DOUBLE
17495: EQUAL
17496: IFTRUE 17500
17498: GO 17507
17500: POP
// hHackSetLevel10YourUnits ; 4 :
17501: CALL 29397 0 0
17505: GO 17583
17507: LD_INT 4
17509: DOUBLE
17510: EQUAL
17511: IFTRUE 17515
17513: GO 17522
17515: POP
// hHackInvincible ; 5 :
17516: CALL 29845 0 0
17520: GO 17583
17522: LD_INT 5
17524: DOUBLE
17525: EQUAL
17526: IFTRUE 17530
17528: GO 17537
17530: POP
// hHackInvisible ; 6 :
17531: CALL 29956 0 0
17535: GO 17583
17537: LD_INT 6
17539: DOUBLE
17540: EQUAL
17541: IFTRUE 17545
17543: GO 17552
17545: POP
// hHackChangeYourSide ; 7 :
17546: CALL 30013 0 0
17550: GO 17583
17552: LD_INT 7
17554: DOUBLE
17555: EQUAL
17556: IFTRUE 17560
17558: GO 17567
17560: POP
// hHackChangeUnitSide ; 8 :
17561: CALL 30055 0 0
17565: GO 17583
17567: LD_INT 8
17569: DOUBLE
17570: EQUAL
17571: IFTRUE 17575
17573: GO 17582
17575: POP
// hHackFog ; end ;
17576: CALL 30156 0 0
17580: GO 17583
17582: POP
// end ; end ;
17583: LD_VAR 0 7
17587: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
17588: GO 17590
17590: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
17591: LD_STRING initStreamRollete();
17593: PPUSH
17594: CALL_OW 559
// InitStreamMode ;
17598: CALL 17607 0 0
// DefineStreamItems ( ) ;
17602: CALL 18071 0 0
// end ;
17606: END
// function InitStreamMode ; begin
17607: LD_INT 0
17609: PPUSH
// streamModeActive := false ;
17610: LD_ADDR_EXP 55
17614: PUSH
17615: LD_INT 0
17617: ST_TO_ADDR
// normalCounter := 36 ;
17618: LD_ADDR_EXP 56
17622: PUSH
17623: LD_INT 36
17625: ST_TO_ADDR
// hardcoreCounter := 16 ;
17626: LD_ADDR_EXP 57
17630: PUSH
17631: LD_INT 16
17633: ST_TO_ADDR
// sRocket := false ;
17634: LD_ADDR_EXP 60
17638: PUSH
17639: LD_INT 0
17641: ST_TO_ADDR
// sSpeed := false ;
17642: LD_ADDR_EXP 59
17646: PUSH
17647: LD_INT 0
17649: ST_TO_ADDR
// sEngine := false ;
17650: LD_ADDR_EXP 61
17654: PUSH
17655: LD_INT 0
17657: ST_TO_ADDR
// sSpec := false ;
17658: LD_ADDR_EXP 58
17662: PUSH
17663: LD_INT 0
17665: ST_TO_ADDR
// sLevel := false ;
17666: LD_ADDR_EXP 62
17670: PUSH
17671: LD_INT 0
17673: ST_TO_ADDR
// sArmoury := false ;
17674: LD_ADDR_EXP 63
17678: PUSH
17679: LD_INT 0
17681: ST_TO_ADDR
// sRadar := false ;
17682: LD_ADDR_EXP 64
17686: PUSH
17687: LD_INT 0
17689: ST_TO_ADDR
// sBunker := false ;
17690: LD_ADDR_EXP 65
17694: PUSH
17695: LD_INT 0
17697: ST_TO_ADDR
// sHack := false ;
17698: LD_ADDR_EXP 66
17702: PUSH
17703: LD_INT 0
17705: ST_TO_ADDR
// sFire := false ;
17706: LD_ADDR_EXP 67
17710: PUSH
17711: LD_INT 0
17713: ST_TO_ADDR
// sRefresh := false ;
17714: LD_ADDR_EXP 68
17718: PUSH
17719: LD_INT 0
17721: ST_TO_ADDR
// sExp := false ;
17722: LD_ADDR_EXP 69
17726: PUSH
17727: LD_INT 0
17729: ST_TO_ADDR
// sDepot := false ;
17730: LD_ADDR_EXP 70
17734: PUSH
17735: LD_INT 0
17737: ST_TO_ADDR
// sFlag := false ;
17738: LD_ADDR_EXP 71
17742: PUSH
17743: LD_INT 0
17745: ST_TO_ADDR
// sKamikadze := false ;
17746: LD_ADDR_EXP 79
17750: PUSH
17751: LD_INT 0
17753: ST_TO_ADDR
// sTroll := false ;
17754: LD_ADDR_EXP 80
17758: PUSH
17759: LD_INT 0
17761: ST_TO_ADDR
// sSlow := false ;
17762: LD_ADDR_EXP 81
17766: PUSH
17767: LD_INT 0
17769: ST_TO_ADDR
// sLack := false ;
17770: LD_ADDR_EXP 82
17774: PUSH
17775: LD_INT 0
17777: ST_TO_ADDR
// sTank := false ;
17778: LD_ADDR_EXP 84
17782: PUSH
17783: LD_INT 0
17785: ST_TO_ADDR
// sRemote := false ;
17786: LD_ADDR_EXP 85
17790: PUSH
17791: LD_INT 0
17793: ST_TO_ADDR
// sPowell := false ;
17794: LD_ADDR_EXP 86
17798: PUSH
17799: LD_INT 0
17801: ST_TO_ADDR
// sTeleport := false ;
17802: LD_ADDR_EXP 89
17806: PUSH
17807: LD_INT 0
17809: ST_TO_ADDR
// sOilTower := false ;
17810: LD_ADDR_EXP 91
17814: PUSH
17815: LD_INT 0
17817: ST_TO_ADDR
// sShovel := false ;
17818: LD_ADDR_EXP 92
17822: PUSH
17823: LD_INT 0
17825: ST_TO_ADDR
// sSheik := false ;
17826: LD_ADDR_EXP 93
17830: PUSH
17831: LD_INT 0
17833: ST_TO_ADDR
// sEarthquake := false ;
17834: LD_ADDR_EXP 95
17838: PUSH
17839: LD_INT 0
17841: ST_TO_ADDR
// sAI := false ;
17842: LD_ADDR_EXP 96
17846: PUSH
17847: LD_INT 0
17849: ST_TO_ADDR
// sCargo := false ;
17850: LD_ADDR_EXP 99
17854: PUSH
17855: LD_INT 0
17857: ST_TO_ADDR
// sDLaser := false ;
17858: LD_ADDR_EXP 100
17862: PUSH
17863: LD_INT 0
17865: ST_TO_ADDR
// sExchange := false ;
17866: LD_ADDR_EXP 101
17870: PUSH
17871: LD_INT 0
17873: ST_TO_ADDR
// sFac := false ;
17874: LD_ADDR_EXP 102
17878: PUSH
17879: LD_INT 0
17881: ST_TO_ADDR
// sPower := false ;
17882: LD_ADDR_EXP 103
17886: PUSH
17887: LD_INT 0
17889: ST_TO_ADDR
// sRandom := false ;
17890: LD_ADDR_EXP 104
17894: PUSH
17895: LD_INT 0
17897: ST_TO_ADDR
// sShield := false ;
17898: LD_ADDR_EXP 105
17902: PUSH
17903: LD_INT 0
17905: ST_TO_ADDR
// sTime := false ;
17906: LD_ADDR_EXP 106
17910: PUSH
17911: LD_INT 0
17913: ST_TO_ADDR
// sTools := false ;
17914: LD_ADDR_EXP 107
17918: PUSH
17919: LD_INT 0
17921: ST_TO_ADDR
// sSold := false ;
17922: LD_ADDR_EXP 72
17926: PUSH
17927: LD_INT 0
17929: ST_TO_ADDR
// sDiff := false ;
17930: LD_ADDR_EXP 73
17934: PUSH
17935: LD_INT 0
17937: ST_TO_ADDR
// sFog := false ;
17938: LD_ADDR_EXP 76
17942: PUSH
17943: LD_INT 0
17945: ST_TO_ADDR
// sReset := false ;
17946: LD_ADDR_EXP 77
17950: PUSH
17951: LD_INT 0
17953: ST_TO_ADDR
// sSun := false ;
17954: LD_ADDR_EXP 78
17958: PUSH
17959: LD_INT 0
17961: ST_TO_ADDR
// sTiger := false ;
17962: LD_ADDR_EXP 74
17966: PUSH
17967: LD_INT 0
17969: ST_TO_ADDR
// sBomb := false ;
17970: LD_ADDR_EXP 75
17974: PUSH
17975: LD_INT 0
17977: ST_TO_ADDR
// sWound := false ;
17978: LD_ADDR_EXP 83
17982: PUSH
17983: LD_INT 0
17985: ST_TO_ADDR
// sBetray := false ;
17986: LD_ADDR_EXP 87
17990: PUSH
17991: LD_INT 0
17993: ST_TO_ADDR
// sContamin := false ;
17994: LD_ADDR_EXP 88
17998: PUSH
17999: LD_INT 0
18001: ST_TO_ADDR
// sOil := false ;
18002: LD_ADDR_EXP 90
18006: PUSH
18007: LD_INT 0
18009: ST_TO_ADDR
// sStu := false ;
18010: LD_ADDR_EXP 94
18014: PUSH
18015: LD_INT 0
18017: ST_TO_ADDR
// sBazooka := false ;
18018: LD_ADDR_EXP 97
18022: PUSH
18023: LD_INT 0
18025: ST_TO_ADDR
// sMortar := false ;
18026: LD_ADDR_EXP 98
18030: PUSH
18031: LD_INT 0
18033: ST_TO_ADDR
// sRanger := false ;
18034: LD_ADDR_EXP 108
18038: PUSH
18039: LD_INT 0
18041: ST_TO_ADDR
// sComputer := false ;
18042: LD_ADDR_EXP 109
18046: PUSH
18047: LD_INT 0
18049: ST_TO_ADDR
// s30 := false ;
18050: LD_ADDR_EXP 110
18054: PUSH
18055: LD_INT 0
18057: ST_TO_ADDR
// s60 := false ;
18058: LD_ADDR_EXP 111
18062: PUSH
18063: LD_INT 0
18065: ST_TO_ADDR
// end ;
18066: LD_VAR 0 1
18070: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
18071: LD_INT 0
18073: PPUSH
18074: PPUSH
18075: PPUSH
18076: PPUSH
18077: PPUSH
// result := [ ] ;
18078: LD_ADDR_VAR 0 1
18082: PUSH
18083: EMPTY
18084: ST_TO_ADDR
// if campaign_id = 1 then
18085: LD_OWVAR 69
18089: PUSH
18090: LD_INT 1
18092: EQUAL
18093: IFFALSE 21259
// begin case mission_number of 1 :
18095: LD_OWVAR 70
18099: PUSH
18100: LD_INT 1
18102: DOUBLE
18103: EQUAL
18104: IFTRUE 18108
18106: GO 18184
18108: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18109: LD_ADDR_VAR 0 1
18113: PUSH
18114: LD_INT 2
18116: PUSH
18117: LD_INT 4
18119: PUSH
18120: LD_INT 11
18122: PUSH
18123: LD_INT 12
18125: PUSH
18126: LD_INT 15
18128: PUSH
18129: LD_INT 16
18131: PUSH
18132: LD_INT 22
18134: PUSH
18135: LD_INT 23
18137: PUSH
18138: LD_INT 26
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 101
18154: PUSH
18155: LD_INT 102
18157: PUSH
18158: LD_INT 106
18160: PUSH
18161: LD_INT 116
18163: PUSH
18164: LD_INT 117
18166: PUSH
18167: LD_INT 118
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: ST_TO_ADDR
18182: GO 21257
18184: LD_INT 2
18186: DOUBLE
18187: EQUAL
18188: IFTRUE 18192
18190: GO 18276
18192: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18193: LD_ADDR_VAR 0 1
18197: PUSH
18198: LD_INT 2
18200: PUSH
18201: LD_INT 4
18203: PUSH
18204: LD_INT 11
18206: PUSH
18207: LD_INT 12
18209: PUSH
18210: LD_INT 15
18212: PUSH
18213: LD_INT 16
18215: PUSH
18216: LD_INT 22
18218: PUSH
18219: LD_INT 23
18221: PUSH
18222: LD_INT 26
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 101
18238: PUSH
18239: LD_INT 102
18241: PUSH
18242: LD_INT 105
18244: PUSH
18245: LD_INT 106
18247: PUSH
18248: LD_INT 108
18250: PUSH
18251: LD_INT 116
18253: PUSH
18254: LD_INT 117
18256: PUSH
18257: LD_INT 118
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: ST_TO_ADDR
18274: GO 21257
18276: LD_INT 3
18278: DOUBLE
18279: EQUAL
18280: IFTRUE 18284
18282: GO 18372
18284: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
18285: LD_ADDR_VAR 0 1
18289: PUSH
18290: LD_INT 2
18292: PUSH
18293: LD_INT 4
18295: PUSH
18296: LD_INT 5
18298: PUSH
18299: LD_INT 11
18301: PUSH
18302: LD_INT 12
18304: PUSH
18305: LD_INT 15
18307: PUSH
18308: LD_INT 16
18310: PUSH
18311: LD_INT 22
18313: PUSH
18314: LD_INT 26
18316: PUSH
18317: LD_INT 36
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 101
18334: PUSH
18335: LD_INT 102
18337: PUSH
18338: LD_INT 105
18340: PUSH
18341: LD_INT 106
18343: PUSH
18344: LD_INT 108
18346: PUSH
18347: LD_INT 116
18349: PUSH
18350: LD_INT 117
18352: PUSH
18353: LD_INT 118
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: ST_TO_ADDR
18370: GO 21257
18372: LD_INT 4
18374: DOUBLE
18375: EQUAL
18376: IFTRUE 18380
18378: GO 18476
18380: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
18381: LD_ADDR_VAR 0 1
18385: PUSH
18386: LD_INT 2
18388: PUSH
18389: LD_INT 4
18391: PUSH
18392: LD_INT 5
18394: PUSH
18395: LD_INT 8
18397: PUSH
18398: LD_INT 11
18400: PUSH
18401: LD_INT 12
18403: PUSH
18404: LD_INT 15
18406: PUSH
18407: LD_INT 16
18409: PUSH
18410: LD_INT 22
18412: PUSH
18413: LD_INT 23
18415: PUSH
18416: LD_INT 26
18418: PUSH
18419: LD_INT 36
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: PUSH
18436: LD_INT 101
18438: PUSH
18439: LD_INT 102
18441: PUSH
18442: LD_INT 105
18444: PUSH
18445: LD_INT 106
18447: PUSH
18448: LD_INT 108
18450: PUSH
18451: LD_INT 116
18453: PUSH
18454: LD_INT 117
18456: PUSH
18457: LD_INT 118
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: ST_TO_ADDR
18474: GO 21257
18476: LD_INT 5
18478: DOUBLE
18479: EQUAL
18480: IFTRUE 18484
18482: GO 18596
18484: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
18485: LD_ADDR_VAR 0 1
18489: PUSH
18490: LD_INT 2
18492: PUSH
18493: LD_INT 4
18495: PUSH
18496: LD_INT 5
18498: PUSH
18499: LD_INT 6
18501: PUSH
18502: LD_INT 8
18504: PUSH
18505: LD_INT 11
18507: PUSH
18508: LD_INT 12
18510: PUSH
18511: LD_INT 15
18513: PUSH
18514: LD_INT 16
18516: PUSH
18517: LD_INT 22
18519: PUSH
18520: LD_INT 23
18522: PUSH
18523: LD_INT 25
18525: PUSH
18526: LD_INT 26
18528: PUSH
18529: LD_INT 36
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 101
18550: PUSH
18551: LD_INT 102
18553: PUSH
18554: LD_INT 105
18556: PUSH
18557: LD_INT 106
18559: PUSH
18560: LD_INT 108
18562: PUSH
18563: LD_INT 109
18565: PUSH
18566: LD_INT 112
18568: PUSH
18569: LD_INT 116
18571: PUSH
18572: LD_INT 117
18574: PUSH
18575: LD_INT 118
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: ST_TO_ADDR
18594: GO 21257
18596: LD_INT 6
18598: DOUBLE
18599: EQUAL
18600: IFTRUE 18604
18602: GO 18736
18604: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
18605: LD_ADDR_VAR 0 1
18609: PUSH
18610: LD_INT 2
18612: PUSH
18613: LD_INT 4
18615: PUSH
18616: LD_INT 5
18618: PUSH
18619: LD_INT 6
18621: PUSH
18622: LD_INT 8
18624: PUSH
18625: LD_INT 11
18627: PUSH
18628: LD_INT 12
18630: PUSH
18631: LD_INT 15
18633: PUSH
18634: LD_INT 16
18636: PUSH
18637: LD_INT 20
18639: PUSH
18640: LD_INT 21
18642: PUSH
18643: LD_INT 22
18645: PUSH
18646: LD_INT 23
18648: PUSH
18649: LD_INT 25
18651: PUSH
18652: LD_INT 26
18654: PUSH
18655: LD_INT 30
18657: PUSH
18658: LD_INT 31
18660: PUSH
18661: LD_INT 32
18663: PUSH
18664: LD_INT 36
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 101
18690: PUSH
18691: LD_INT 102
18693: PUSH
18694: LD_INT 105
18696: PUSH
18697: LD_INT 106
18699: PUSH
18700: LD_INT 108
18702: PUSH
18703: LD_INT 109
18705: PUSH
18706: LD_INT 112
18708: PUSH
18709: LD_INT 116
18711: PUSH
18712: LD_INT 117
18714: PUSH
18715: LD_INT 118
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: ST_TO_ADDR
18734: GO 21257
18736: LD_INT 7
18738: DOUBLE
18739: EQUAL
18740: IFTRUE 18744
18742: GO 18856
18744: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
18745: LD_ADDR_VAR 0 1
18749: PUSH
18750: LD_INT 2
18752: PUSH
18753: LD_INT 4
18755: PUSH
18756: LD_INT 5
18758: PUSH
18759: LD_INT 7
18761: PUSH
18762: LD_INT 11
18764: PUSH
18765: LD_INT 12
18767: PUSH
18768: LD_INT 15
18770: PUSH
18771: LD_INT 16
18773: PUSH
18774: LD_INT 20
18776: PUSH
18777: LD_INT 21
18779: PUSH
18780: LD_INT 22
18782: PUSH
18783: LD_INT 23
18785: PUSH
18786: LD_INT 25
18788: PUSH
18789: LD_INT 26
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 101
18810: PUSH
18811: LD_INT 102
18813: PUSH
18814: LD_INT 103
18816: PUSH
18817: LD_INT 105
18819: PUSH
18820: LD_INT 106
18822: PUSH
18823: LD_INT 108
18825: PUSH
18826: LD_INT 112
18828: PUSH
18829: LD_INT 116
18831: PUSH
18832: LD_INT 117
18834: PUSH
18835: LD_INT 118
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: ST_TO_ADDR
18854: GO 21257
18856: LD_INT 8
18858: DOUBLE
18859: EQUAL
18860: IFTRUE 18864
18862: GO 19004
18864: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
18865: LD_ADDR_VAR 0 1
18869: PUSH
18870: LD_INT 2
18872: PUSH
18873: LD_INT 4
18875: PUSH
18876: LD_INT 5
18878: PUSH
18879: LD_INT 6
18881: PUSH
18882: LD_INT 7
18884: PUSH
18885: LD_INT 8
18887: PUSH
18888: LD_INT 11
18890: PUSH
18891: LD_INT 12
18893: PUSH
18894: LD_INT 15
18896: PUSH
18897: LD_INT 16
18899: PUSH
18900: LD_INT 20
18902: PUSH
18903: LD_INT 21
18905: PUSH
18906: LD_INT 22
18908: PUSH
18909: LD_INT 23
18911: PUSH
18912: LD_INT 25
18914: PUSH
18915: LD_INT 26
18917: PUSH
18918: LD_INT 30
18920: PUSH
18921: LD_INT 31
18923: PUSH
18924: LD_INT 32
18926: PUSH
18927: LD_INT 36
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: PUSH
18952: LD_INT 101
18954: PUSH
18955: LD_INT 102
18957: PUSH
18958: LD_INT 103
18960: PUSH
18961: LD_INT 105
18963: PUSH
18964: LD_INT 106
18966: PUSH
18967: LD_INT 108
18969: PUSH
18970: LD_INT 109
18972: PUSH
18973: LD_INT 112
18975: PUSH
18976: LD_INT 116
18978: PUSH
18979: LD_INT 117
18981: PUSH
18982: LD_INT 118
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: ST_TO_ADDR
19002: GO 21257
19004: LD_INT 9
19006: DOUBLE
19007: EQUAL
19008: IFTRUE 19012
19010: GO 19160
19012: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
19013: LD_ADDR_VAR 0 1
19017: PUSH
19018: LD_INT 2
19020: PUSH
19021: LD_INT 4
19023: PUSH
19024: LD_INT 5
19026: PUSH
19027: LD_INT 6
19029: PUSH
19030: LD_INT 7
19032: PUSH
19033: LD_INT 8
19035: PUSH
19036: LD_INT 11
19038: PUSH
19039: LD_INT 12
19041: PUSH
19042: LD_INT 15
19044: PUSH
19045: LD_INT 16
19047: PUSH
19048: LD_INT 20
19050: PUSH
19051: LD_INT 21
19053: PUSH
19054: LD_INT 22
19056: PUSH
19057: LD_INT 23
19059: PUSH
19060: LD_INT 25
19062: PUSH
19063: LD_INT 26
19065: PUSH
19066: LD_INT 28
19068: PUSH
19069: LD_INT 30
19071: PUSH
19072: LD_INT 31
19074: PUSH
19075: LD_INT 32
19077: PUSH
19078: LD_INT 36
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: PUSH
19104: LD_INT 101
19106: PUSH
19107: LD_INT 102
19109: PUSH
19110: LD_INT 103
19112: PUSH
19113: LD_INT 105
19115: PUSH
19116: LD_INT 106
19118: PUSH
19119: LD_INT 108
19121: PUSH
19122: LD_INT 109
19124: PUSH
19125: LD_INT 112
19127: PUSH
19128: LD_INT 114
19130: PUSH
19131: LD_INT 116
19133: PUSH
19134: LD_INT 117
19136: PUSH
19137: LD_INT 118
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: ST_TO_ADDR
19158: GO 21257
19160: LD_INT 10
19162: DOUBLE
19163: EQUAL
19164: IFTRUE 19168
19166: GO 19364
19168: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
19169: LD_ADDR_VAR 0 1
19173: PUSH
19174: LD_INT 2
19176: PUSH
19177: LD_INT 4
19179: PUSH
19180: LD_INT 5
19182: PUSH
19183: LD_INT 6
19185: PUSH
19186: LD_INT 7
19188: PUSH
19189: LD_INT 8
19191: PUSH
19192: LD_INT 9
19194: PUSH
19195: LD_INT 10
19197: PUSH
19198: LD_INT 11
19200: PUSH
19201: LD_INT 12
19203: PUSH
19204: LD_INT 13
19206: PUSH
19207: LD_INT 14
19209: PUSH
19210: LD_INT 15
19212: PUSH
19213: LD_INT 16
19215: PUSH
19216: LD_INT 17
19218: PUSH
19219: LD_INT 18
19221: PUSH
19222: LD_INT 19
19224: PUSH
19225: LD_INT 20
19227: PUSH
19228: LD_INT 21
19230: PUSH
19231: LD_INT 22
19233: PUSH
19234: LD_INT 23
19236: PUSH
19237: LD_INT 24
19239: PUSH
19240: LD_INT 25
19242: PUSH
19243: LD_INT 26
19245: PUSH
19246: LD_INT 28
19248: PUSH
19249: LD_INT 30
19251: PUSH
19252: LD_INT 31
19254: PUSH
19255: LD_INT 32
19257: PUSH
19258: LD_INT 36
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: PUSH
19292: LD_INT 101
19294: PUSH
19295: LD_INT 102
19297: PUSH
19298: LD_INT 103
19300: PUSH
19301: LD_INT 104
19303: PUSH
19304: LD_INT 105
19306: PUSH
19307: LD_INT 106
19309: PUSH
19310: LD_INT 107
19312: PUSH
19313: LD_INT 108
19315: PUSH
19316: LD_INT 109
19318: PUSH
19319: LD_INT 110
19321: PUSH
19322: LD_INT 111
19324: PUSH
19325: LD_INT 112
19327: PUSH
19328: LD_INT 114
19330: PUSH
19331: LD_INT 116
19333: PUSH
19334: LD_INT 117
19336: PUSH
19337: LD_INT 118
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: ST_TO_ADDR
19362: GO 21257
19364: LD_INT 11
19366: DOUBLE
19367: EQUAL
19368: IFTRUE 19372
19370: GO 19576
19372: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
19373: LD_ADDR_VAR 0 1
19377: PUSH
19378: LD_INT 2
19380: PUSH
19381: LD_INT 3
19383: PUSH
19384: LD_INT 4
19386: PUSH
19387: LD_INT 5
19389: PUSH
19390: LD_INT 6
19392: PUSH
19393: LD_INT 7
19395: PUSH
19396: LD_INT 8
19398: PUSH
19399: LD_INT 9
19401: PUSH
19402: LD_INT 10
19404: PUSH
19405: LD_INT 11
19407: PUSH
19408: LD_INT 12
19410: PUSH
19411: LD_INT 13
19413: PUSH
19414: LD_INT 14
19416: PUSH
19417: LD_INT 15
19419: PUSH
19420: LD_INT 16
19422: PUSH
19423: LD_INT 17
19425: PUSH
19426: LD_INT 18
19428: PUSH
19429: LD_INT 19
19431: PUSH
19432: LD_INT 20
19434: PUSH
19435: LD_INT 21
19437: PUSH
19438: LD_INT 22
19440: PUSH
19441: LD_INT 23
19443: PUSH
19444: LD_INT 24
19446: PUSH
19447: LD_INT 25
19449: PUSH
19450: LD_INT 26
19452: PUSH
19453: LD_INT 28
19455: PUSH
19456: LD_INT 30
19458: PUSH
19459: LD_INT 31
19461: PUSH
19462: LD_INT 32
19464: PUSH
19465: LD_INT 34
19467: PUSH
19468: LD_INT 36
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: PUSH
19504: LD_INT 101
19506: PUSH
19507: LD_INT 102
19509: PUSH
19510: LD_INT 103
19512: PUSH
19513: LD_INT 104
19515: PUSH
19516: LD_INT 105
19518: PUSH
19519: LD_INT 106
19521: PUSH
19522: LD_INT 107
19524: PUSH
19525: LD_INT 108
19527: PUSH
19528: LD_INT 109
19530: PUSH
19531: LD_INT 110
19533: PUSH
19534: LD_INT 111
19536: PUSH
19537: LD_INT 112
19539: PUSH
19540: LD_INT 114
19542: PUSH
19543: LD_INT 116
19545: PUSH
19546: LD_INT 117
19548: PUSH
19549: LD_INT 118
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: ST_TO_ADDR
19574: GO 21257
19576: LD_INT 12
19578: DOUBLE
19579: EQUAL
19580: IFTRUE 19584
19582: GO 19804
19584: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
19585: LD_ADDR_VAR 0 1
19589: PUSH
19590: LD_INT 1
19592: PUSH
19593: LD_INT 2
19595: PUSH
19596: LD_INT 3
19598: PUSH
19599: LD_INT 4
19601: PUSH
19602: LD_INT 5
19604: PUSH
19605: LD_INT 6
19607: PUSH
19608: LD_INT 7
19610: PUSH
19611: LD_INT 8
19613: PUSH
19614: LD_INT 9
19616: PUSH
19617: LD_INT 10
19619: PUSH
19620: LD_INT 11
19622: PUSH
19623: LD_INT 12
19625: PUSH
19626: LD_INT 13
19628: PUSH
19629: LD_INT 14
19631: PUSH
19632: LD_INT 15
19634: PUSH
19635: LD_INT 16
19637: PUSH
19638: LD_INT 17
19640: PUSH
19641: LD_INT 18
19643: PUSH
19644: LD_INT 19
19646: PUSH
19647: LD_INT 20
19649: PUSH
19650: LD_INT 21
19652: PUSH
19653: LD_INT 22
19655: PUSH
19656: LD_INT 23
19658: PUSH
19659: LD_INT 24
19661: PUSH
19662: LD_INT 25
19664: PUSH
19665: LD_INT 26
19667: PUSH
19668: LD_INT 27
19670: PUSH
19671: LD_INT 28
19673: PUSH
19674: LD_INT 30
19676: PUSH
19677: LD_INT 31
19679: PUSH
19680: LD_INT 32
19682: PUSH
19683: LD_INT 33
19685: PUSH
19686: LD_INT 34
19688: PUSH
19689: LD_INT 36
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: PUSH
19728: LD_INT 101
19730: PUSH
19731: LD_INT 102
19733: PUSH
19734: LD_INT 103
19736: PUSH
19737: LD_INT 104
19739: PUSH
19740: LD_INT 105
19742: PUSH
19743: LD_INT 106
19745: PUSH
19746: LD_INT 107
19748: PUSH
19749: LD_INT 108
19751: PUSH
19752: LD_INT 109
19754: PUSH
19755: LD_INT 110
19757: PUSH
19758: LD_INT 111
19760: PUSH
19761: LD_INT 112
19763: PUSH
19764: LD_INT 113
19766: PUSH
19767: LD_INT 114
19769: PUSH
19770: LD_INT 116
19772: PUSH
19773: LD_INT 117
19775: PUSH
19776: LD_INT 118
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: ST_TO_ADDR
19802: GO 21257
19804: LD_INT 13
19806: DOUBLE
19807: EQUAL
19808: IFTRUE 19812
19810: GO 20020
19812: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
19813: LD_ADDR_VAR 0 1
19817: PUSH
19818: LD_INT 1
19820: PUSH
19821: LD_INT 2
19823: PUSH
19824: LD_INT 3
19826: PUSH
19827: LD_INT 4
19829: PUSH
19830: LD_INT 5
19832: PUSH
19833: LD_INT 8
19835: PUSH
19836: LD_INT 9
19838: PUSH
19839: LD_INT 10
19841: PUSH
19842: LD_INT 11
19844: PUSH
19845: LD_INT 12
19847: PUSH
19848: LD_INT 14
19850: PUSH
19851: LD_INT 15
19853: PUSH
19854: LD_INT 16
19856: PUSH
19857: LD_INT 17
19859: PUSH
19860: LD_INT 18
19862: PUSH
19863: LD_INT 19
19865: PUSH
19866: LD_INT 20
19868: PUSH
19869: LD_INT 21
19871: PUSH
19872: LD_INT 22
19874: PUSH
19875: LD_INT 23
19877: PUSH
19878: LD_INT 24
19880: PUSH
19881: LD_INT 25
19883: PUSH
19884: LD_INT 26
19886: PUSH
19887: LD_INT 27
19889: PUSH
19890: LD_INT 28
19892: PUSH
19893: LD_INT 30
19895: PUSH
19896: LD_INT 31
19898: PUSH
19899: LD_INT 32
19901: PUSH
19902: LD_INT 33
19904: PUSH
19905: LD_INT 34
19907: PUSH
19908: LD_INT 36
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 101
19946: PUSH
19947: LD_INT 102
19949: PUSH
19950: LD_INT 103
19952: PUSH
19953: LD_INT 104
19955: PUSH
19956: LD_INT 105
19958: PUSH
19959: LD_INT 106
19961: PUSH
19962: LD_INT 107
19964: PUSH
19965: LD_INT 108
19967: PUSH
19968: LD_INT 109
19970: PUSH
19971: LD_INT 110
19973: PUSH
19974: LD_INT 111
19976: PUSH
19977: LD_INT 112
19979: PUSH
19980: LD_INT 113
19982: PUSH
19983: LD_INT 114
19985: PUSH
19986: LD_INT 116
19988: PUSH
19989: LD_INT 117
19991: PUSH
19992: LD_INT 118
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: ST_TO_ADDR
20018: GO 21257
20020: LD_INT 14
20022: DOUBLE
20023: EQUAL
20024: IFTRUE 20028
20026: GO 20252
20028: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20029: LD_ADDR_VAR 0 1
20033: PUSH
20034: LD_INT 1
20036: PUSH
20037: LD_INT 2
20039: PUSH
20040: LD_INT 3
20042: PUSH
20043: LD_INT 4
20045: PUSH
20046: LD_INT 5
20048: PUSH
20049: LD_INT 6
20051: PUSH
20052: LD_INT 7
20054: PUSH
20055: LD_INT 8
20057: PUSH
20058: LD_INT 9
20060: PUSH
20061: LD_INT 10
20063: PUSH
20064: LD_INT 11
20066: PUSH
20067: LD_INT 12
20069: PUSH
20070: LD_INT 13
20072: PUSH
20073: LD_INT 14
20075: PUSH
20076: LD_INT 15
20078: PUSH
20079: LD_INT 16
20081: PUSH
20082: LD_INT 17
20084: PUSH
20085: LD_INT 18
20087: PUSH
20088: LD_INT 19
20090: PUSH
20091: LD_INT 20
20093: PUSH
20094: LD_INT 21
20096: PUSH
20097: LD_INT 22
20099: PUSH
20100: LD_INT 23
20102: PUSH
20103: LD_INT 24
20105: PUSH
20106: LD_INT 25
20108: PUSH
20109: LD_INT 26
20111: PUSH
20112: LD_INT 27
20114: PUSH
20115: LD_INT 28
20117: PUSH
20118: LD_INT 29
20120: PUSH
20121: LD_INT 30
20123: PUSH
20124: LD_INT 31
20126: PUSH
20127: LD_INT 32
20129: PUSH
20130: LD_INT 33
20132: PUSH
20133: LD_INT 34
20135: PUSH
20136: LD_INT 36
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: PUSH
20176: LD_INT 101
20178: PUSH
20179: LD_INT 102
20181: PUSH
20182: LD_INT 103
20184: PUSH
20185: LD_INT 104
20187: PUSH
20188: LD_INT 105
20190: PUSH
20191: LD_INT 106
20193: PUSH
20194: LD_INT 107
20196: PUSH
20197: LD_INT 108
20199: PUSH
20200: LD_INT 109
20202: PUSH
20203: LD_INT 110
20205: PUSH
20206: LD_INT 111
20208: PUSH
20209: LD_INT 112
20211: PUSH
20212: LD_INT 113
20214: PUSH
20215: LD_INT 114
20217: PUSH
20218: LD_INT 116
20220: PUSH
20221: LD_INT 117
20223: PUSH
20224: LD_INT 118
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: ST_TO_ADDR
20250: GO 21257
20252: LD_INT 15
20254: DOUBLE
20255: EQUAL
20256: IFTRUE 20260
20258: GO 20484
20260: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
20261: LD_ADDR_VAR 0 1
20265: PUSH
20266: LD_INT 1
20268: PUSH
20269: LD_INT 2
20271: PUSH
20272: LD_INT 3
20274: PUSH
20275: LD_INT 4
20277: PUSH
20278: LD_INT 5
20280: PUSH
20281: LD_INT 6
20283: PUSH
20284: LD_INT 7
20286: PUSH
20287: LD_INT 8
20289: PUSH
20290: LD_INT 9
20292: PUSH
20293: LD_INT 10
20295: PUSH
20296: LD_INT 11
20298: PUSH
20299: LD_INT 12
20301: PUSH
20302: LD_INT 13
20304: PUSH
20305: LD_INT 14
20307: PUSH
20308: LD_INT 15
20310: PUSH
20311: LD_INT 16
20313: PUSH
20314: LD_INT 17
20316: PUSH
20317: LD_INT 18
20319: PUSH
20320: LD_INT 19
20322: PUSH
20323: LD_INT 20
20325: PUSH
20326: LD_INT 21
20328: PUSH
20329: LD_INT 22
20331: PUSH
20332: LD_INT 23
20334: PUSH
20335: LD_INT 24
20337: PUSH
20338: LD_INT 25
20340: PUSH
20341: LD_INT 26
20343: PUSH
20344: LD_INT 27
20346: PUSH
20347: LD_INT 28
20349: PUSH
20350: LD_INT 29
20352: PUSH
20353: LD_INT 30
20355: PUSH
20356: LD_INT 31
20358: PUSH
20359: LD_INT 32
20361: PUSH
20362: LD_INT 33
20364: PUSH
20365: LD_INT 34
20367: PUSH
20368: LD_INT 36
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 101
20410: PUSH
20411: LD_INT 102
20413: PUSH
20414: LD_INT 103
20416: PUSH
20417: LD_INT 104
20419: PUSH
20420: LD_INT 105
20422: PUSH
20423: LD_INT 106
20425: PUSH
20426: LD_INT 107
20428: PUSH
20429: LD_INT 108
20431: PUSH
20432: LD_INT 109
20434: PUSH
20435: LD_INT 110
20437: PUSH
20438: LD_INT 111
20440: PUSH
20441: LD_INT 112
20443: PUSH
20444: LD_INT 113
20446: PUSH
20447: LD_INT 114
20449: PUSH
20450: LD_INT 116
20452: PUSH
20453: LD_INT 117
20455: PUSH
20456: LD_INT 118
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: ST_TO_ADDR
20482: GO 21257
20484: LD_INT 16
20486: DOUBLE
20487: EQUAL
20488: IFTRUE 20492
20490: GO 20628
20492: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
20493: LD_ADDR_VAR 0 1
20497: PUSH
20498: LD_INT 2
20500: PUSH
20501: LD_INT 4
20503: PUSH
20504: LD_INT 5
20506: PUSH
20507: LD_INT 7
20509: PUSH
20510: LD_INT 11
20512: PUSH
20513: LD_INT 12
20515: PUSH
20516: LD_INT 15
20518: PUSH
20519: LD_INT 16
20521: PUSH
20522: LD_INT 20
20524: PUSH
20525: LD_INT 21
20527: PUSH
20528: LD_INT 22
20530: PUSH
20531: LD_INT 23
20533: PUSH
20534: LD_INT 25
20536: PUSH
20537: LD_INT 26
20539: PUSH
20540: LD_INT 30
20542: PUSH
20543: LD_INT 31
20545: PUSH
20546: LD_INT 32
20548: PUSH
20549: LD_INT 33
20551: PUSH
20552: LD_INT 34
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 101
20578: PUSH
20579: LD_INT 102
20581: PUSH
20582: LD_INT 103
20584: PUSH
20585: LD_INT 106
20587: PUSH
20588: LD_INT 108
20590: PUSH
20591: LD_INT 112
20593: PUSH
20594: LD_INT 113
20596: PUSH
20597: LD_INT 114
20599: PUSH
20600: LD_INT 116
20602: PUSH
20603: LD_INT 117
20605: PUSH
20606: LD_INT 118
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: ST_TO_ADDR
20626: GO 21257
20628: LD_INT 17
20630: DOUBLE
20631: EQUAL
20632: IFTRUE 20636
20634: GO 20860
20636: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
20637: LD_ADDR_VAR 0 1
20641: PUSH
20642: LD_INT 1
20644: PUSH
20645: LD_INT 2
20647: PUSH
20648: LD_INT 3
20650: PUSH
20651: LD_INT 4
20653: PUSH
20654: LD_INT 5
20656: PUSH
20657: LD_INT 6
20659: PUSH
20660: LD_INT 7
20662: PUSH
20663: LD_INT 8
20665: PUSH
20666: LD_INT 9
20668: PUSH
20669: LD_INT 10
20671: PUSH
20672: LD_INT 11
20674: PUSH
20675: LD_INT 12
20677: PUSH
20678: LD_INT 13
20680: PUSH
20681: LD_INT 14
20683: PUSH
20684: LD_INT 15
20686: PUSH
20687: LD_INT 16
20689: PUSH
20690: LD_INT 17
20692: PUSH
20693: LD_INT 18
20695: PUSH
20696: LD_INT 19
20698: PUSH
20699: LD_INT 20
20701: PUSH
20702: LD_INT 21
20704: PUSH
20705: LD_INT 22
20707: PUSH
20708: LD_INT 23
20710: PUSH
20711: LD_INT 24
20713: PUSH
20714: LD_INT 25
20716: PUSH
20717: LD_INT 26
20719: PUSH
20720: LD_INT 27
20722: PUSH
20723: LD_INT 28
20725: PUSH
20726: LD_INT 29
20728: PUSH
20729: LD_INT 30
20731: PUSH
20732: LD_INT 31
20734: PUSH
20735: LD_INT 32
20737: PUSH
20738: LD_INT 33
20740: PUSH
20741: LD_INT 34
20743: PUSH
20744: LD_INT 36
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: PUSH
20784: LD_INT 101
20786: PUSH
20787: LD_INT 102
20789: PUSH
20790: LD_INT 103
20792: PUSH
20793: LD_INT 104
20795: PUSH
20796: LD_INT 105
20798: PUSH
20799: LD_INT 106
20801: PUSH
20802: LD_INT 107
20804: PUSH
20805: LD_INT 108
20807: PUSH
20808: LD_INT 109
20810: PUSH
20811: LD_INT 110
20813: PUSH
20814: LD_INT 111
20816: PUSH
20817: LD_INT 112
20819: PUSH
20820: LD_INT 113
20822: PUSH
20823: LD_INT 114
20825: PUSH
20826: LD_INT 116
20828: PUSH
20829: LD_INT 117
20831: PUSH
20832: LD_INT 118
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: ST_TO_ADDR
20858: GO 21257
20860: LD_INT 18
20862: DOUBLE
20863: EQUAL
20864: IFTRUE 20868
20866: GO 21016
20868: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
20869: LD_ADDR_VAR 0 1
20873: PUSH
20874: LD_INT 2
20876: PUSH
20877: LD_INT 4
20879: PUSH
20880: LD_INT 5
20882: PUSH
20883: LD_INT 7
20885: PUSH
20886: LD_INT 11
20888: PUSH
20889: LD_INT 12
20891: PUSH
20892: LD_INT 15
20894: PUSH
20895: LD_INT 16
20897: PUSH
20898: LD_INT 20
20900: PUSH
20901: LD_INT 21
20903: PUSH
20904: LD_INT 22
20906: PUSH
20907: LD_INT 23
20909: PUSH
20910: LD_INT 25
20912: PUSH
20913: LD_INT 26
20915: PUSH
20916: LD_INT 30
20918: PUSH
20919: LD_INT 31
20921: PUSH
20922: LD_INT 32
20924: PUSH
20925: LD_INT 33
20927: PUSH
20928: LD_INT 34
20930: PUSH
20931: LD_INT 35
20933: PUSH
20934: LD_INT 36
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 101
20962: PUSH
20963: LD_INT 102
20965: PUSH
20966: LD_INT 103
20968: PUSH
20969: LD_INT 106
20971: PUSH
20972: LD_INT 108
20974: PUSH
20975: LD_INT 112
20977: PUSH
20978: LD_INT 113
20980: PUSH
20981: LD_INT 114
20983: PUSH
20984: LD_INT 115
20986: PUSH
20987: LD_INT 116
20989: PUSH
20990: LD_INT 117
20992: PUSH
20993: LD_INT 118
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: ST_TO_ADDR
21014: GO 21257
21016: LD_INT 19
21018: DOUBLE
21019: EQUAL
21020: IFTRUE 21024
21022: GO 21256
21024: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21025: LD_ADDR_VAR 0 1
21029: PUSH
21030: LD_INT 1
21032: PUSH
21033: LD_INT 2
21035: PUSH
21036: LD_INT 3
21038: PUSH
21039: LD_INT 4
21041: PUSH
21042: LD_INT 5
21044: PUSH
21045: LD_INT 6
21047: PUSH
21048: LD_INT 7
21050: PUSH
21051: LD_INT 8
21053: PUSH
21054: LD_INT 9
21056: PUSH
21057: LD_INT 10
21059: PUSH
21060: LD_INT 11
21062: PUSH
21063: LD_INT 12
21065: PUSH
21066: LD_INT 13
21068: PUSH
21069: LD_INT 14
21071: PUSH
21072: LD_INT 15
21074: PUSH
21075: LD_INT 16
21077: PUSH
21078: LD_INT 17
21080: PUSH
21081: LD_INT 18
21083: PUSH
21084: LD_INT 19
21086: PUSH
21087: LD_INT 20
21089: PUSH
21090: LD_INT 21
21092: PUSH
21093: LD_INT 22
21095: PUSH
21096: LD_INT 23
21098: PUSH
21099: LD_INT 24
21101: PUSH
21102: LD_INT 25
21104: PUSH
21105: LD_INT 26
21107: PUSH
21108: LD_INT 27
21110: PUSH
21111: LD_INT 28
21113: PUSH
21114: LD_INT 29
21116: PUSH
21117: LD_INT 30
21119: PUSH
21120: LD_INT 31
21122: PUSH
21123: LD_INT 32
21125: PUSH
21126: LD_INT 33
21128: PUSH
21129: LD_INT 34
21131: PUSH
21132: LD_INT 35
21134: PUSH
21135: LD_INT 36
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: PUSH
21176: LD_INT 101
21178: PUSH
21179: LD_INT 102
21181: PUSH
21182: LD_INT 103
21184: PUSH
21185: LD_INT 104
21187: PUSH
21188: LD_INT 105
21190: PUSH
21191: LD_INT 106
21193: PUSH
21194: LD_INT 107
21196: PUSH
21197: LD_INT 108
21199: PUSH
21200: LD_INT 109
21202: PUSH
21203: LD_INT 110
21205: PUSH
21206: LD_INT 111
21208: PUSH
21209: LD_INT 112
21211: PUSH
21212: LD_INT 113
21214: PUSH
21215: LD_INT 114
21217: PUSH
21218: LD_INT 115
21220: PUSH
21221: LD_INT 116
21223: PUSH
21224: LD_INT 117
21226: PUSH
21227: LD_INT 118
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: ST_TO_ADDR
21254: GO 21257
21256: POP
// end else
21257: GO 21488
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
21259: LD_ADDR_VAR 0 1
21263: PUSH
21264: LD_INT 1
21266: PUSH
21267: LD_INT 2
21269: PUSH
21270: LD_INT 3
21272: PUSH
21273: LD_INT 4
21275: PUSH
21276: LD_INT 5
21278: PUSH
21279: LD_INT 6
21281: PUSH
21282: LD_INT 7
21284: PUSH
21285: LD_INT 8
21287: PUSH
21288: LD_INT 9
21290: PUSH
21291: LD_INT 10
21293: PUSH
21294: LD_INT 11
21296: PUSH
21297: LD_INT 12
21299: PUSH
21300: LD_INT 13
21302: PUSH
21303: LD_INT 14
21305: PUSH
21306: LD_INT 15
21308: PUSH
21309: LD_INT 16
21311: PUSH
21312: LD_INT 17
21314: PUSH
21315: LD_INT 18
21317: PUSH
21318: LD_INT 19
21320: PUSH
21321: LD_INT 20
21323: PUSH
21324: LD_INT 21
21326: PUSH
21327: LD_INT 22
21329: PUSH
21330: LD_INT 23
21332: PUSH
21333: LD_INT 24
21335: PUSH
21336: LD_INT 25
21338: PUSH
21339: LD_INT 26
21341: PUSH
21342: LD_INT 27
21344: PUSH
21345: LD_INT 28
21347: PUSH
21348: LD_INT 29
21350: PUSH
21351: LD_INT 30
21353: PUSH
21354: LD_INT 31
21356: PUSH
21357: LD_INT 32
21359: PUSH
21360: LD_INT 33
21362: PUSH
21363: LD_INT 34
21365: PUSH
21366: LD_INT 35
21368: PUSH
21369: LD_INT 36
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: PUSH
21410: LD_INT 101
21412: PUSH
21413: LD_INT 102
21415: PUSH
21416: LD_INT 103
21418: PUSH
21419: LD_INT 104
21421: PUSH
21422: LD_INT 105
21424: PUSH
21425: LD_INT 106
21427: PUSH
21428: LD_INT 107
21430: PUSH
21431: LD_INT 108
21433: PUSH
21434: LD_INT 109
21436: PUSH
21437: LD_INT 110
21439: PUSH
21440: LD_INT 111
21442: PUSH
21443: LD_INT 112
21445: PUSH
21446: LD_INT 113
21448: PUSH
21449: LD_INT 114
21451: PUSH
21452: LD_INT 115
21454: PUSH
21455: LD_INT 116
21457: PUSH
21458: LD_INT 117
21460: PUSH
21461: LD_INT 118
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: ST_TO_ADDR
// if result then
21488: LD_VAR 0 1
21492: IFFALSE 21781
// begin normal :=  ;
21494: LD_ADDR_VAR 0 3
21498: PUSH
21499: LD_STRING 
21501: ST_TO_ADDR
// hardcore :=  ;
21502: LD_ADDR_VAR 0 4
21506: PUSH
21507: LD_STRING 
21509: ST_TO_ADDR
// for i = 1 to normalCounter do
21510: LD_ADDR_VAR 0 5
21514: PUSH
21515: DOUBLE
21516: LD_INT 1
21518: DEC
21519: ST_TO_ADDR
21520: LD_EXP 56
21524: PUSH
21525: FOR_TO
21526: IFFALSE 21627
// begin tmp := 0 ;
21528: LD_ADDR_VAR 0 2
21532: PUSH
21533: LD_STRING 0
21535: ST_TO_ADDR
// if result [ 1 ] then
21536: LD_VAR 0 1
21540: PUSH
21541: LD_INT 1
21543: ARRAY
21544: IFFALSE 21609
// if result [ 1 ] [ 1 ] = i then
21546: LD_VAR 0 1
21550: PUSH
21551: LD_INT 1
21553: ARRAY
21554: PUSH
21555: LD_INT 1
21557: ARRAY
21558: PUSH
21559: LD_VAR 0 5
21563: EQUAL
21564: IFFALSE 21609
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21566: LD_ADDR_VAR 0 1
21570: PUSH
21571: LD_VAR 0 1
21575: PPUSH
21576: LD_INT 1
21578: PPUSH
21579: LD_VAR 0 1
21583: PUSH
21584: LD_INT 1
21586: ARRAY
21587: PPUSH
21588: LD_INT 1
21590: PPUSH
21591: CALL_OW 3
21595: PPUSH
21596: CALL_OW 1
21600: ST_TO_ADDR
// tmp := 1 ;
21601: LD_ADDR_VAR 0 2
21605: PUSH
21606: LD_STRING 1
21608: ST_TO_ADDR
// end ; normal := normal & tmp ;
21609: LD_ADDR_VAR 0 3
21613: PUSH
21614: LD_VAR 0 3
21618: PUSH
21619: LD_VAR 0 2
21623: STR
21624: ST_TO_ADDR
// end ;
21625: GO 21525
21627: POP
21628: POP
// for i = 1 to hardcoreCounter do
21629: LD_ADDR_VAR 0 5
21633: PUSH
21634: DOUBLE
21635: LD_INT 1
21637: DEC
21638: ST_TO_ADDR
21639: LD_EXP 57
21643: PUSH
21644: FOR_TO
21645: IFFALSE 21750
// begin tmp := 0 ;
21647: LD_ADDR_VAR 0 2
21651: PUSH
21652: LD_STRING 0
21654: ST_TO_ADDR
// if result [ 2 ] then
21655: LD_VAR 0 1
21659: PUSH
21660: LD_INT 2
21662: ARRAY
21663: IFFALSE 21732
// if result [ 2 ] [ 1 ] = 100 + i then
21665: LD_VAR 0 1
21669: PUSH
21670: LD_INT 2
21672: ARRAY
21673: PUSH
21674: LD_INT 1
21676: ARRAY
21677: PUSH
21678: LD_INT 100
21680: PUSH
21681: LD_VAR 0 5
21685: PLUS
21686: EQUAL
21687: IFFALSE 21732
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21689: LD_ADDR_VAR 0 1
21693: PUSH
21694: LD_VAR 0 1
21698: PPUSH
21699: LD_INT 2
21701: PPUSH
21702: LD_VAR 0 1
21706: PUSH
21707: LD_INT 2
21709: ARRAY
21710: PPUSH
21711: LD_INT 1
21713: PPUSH
21714: CALL_OW 3
21718: PPUSH
21719: CALL_OW 1
21723: ST_TO_ADDR
// tmp := 1 ;
21724: LD_ADDR_VAR 0 2
21728: PUSH
21729: LD_STRING 1
21731: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21732: LD_ADDR_VAR 0 4
21736: PUSH
21737: LD_VAR 0 4
21741: PUSH
21742: LD_VAR 0 2
21746: STR
21747: ST_TO_ADDR
// end ;
21748: GO 21644
21750: POP
21751: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
21752: LD_STRING getStreamItemsFromMission("
21754: PUSH
21755: LD_VAR 0 3
21759: STR
21760: PUSH
21761: LD_STRING ","
21763: STR
21764: PUSH
21765: LD_VAR 0 4
21769: STR
21770: PUSH
21771: LD_STRING ")
21773: STR
21774: PPUSH
21775: CALL_OW 559
// end else
21779: GO 21788
// ToLua ( getStreamItemsFromMission("","") ) ;
21781: LD_STRING getStreamItemsFromMission("","")
21783: PPUSH
21784: CALL_OW 559
// end ;
21788: LD_VAR 0 1
21792: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21793: LD_EXP 55
21797: PUSH
21798: LD_EXP 60
21802: AND
21803: IFFALSE 21927
21805: GO 21807
21807: DISABLE
21808: LD_INT 0
21810: PPUSH
21811: PPUSH
// begin enable ;
21812: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21813: LD_ADDR_VAR 0 2
21817: PUSH
21818: LD_INT 22
21820: PUSH
21821: LD_OWVAR 2
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 2
21832: PUSH
21833: LD_INT 34
21835: PUSH
21836: LD_INT 7
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PUSH
21843: LD_INT 34
21845: PUSH
21846: LD_INT 45
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PUSH
21853: LD_INT 34
21855: PUSH
21856: LD_INT 28
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: PUSH
21863: LD_INT 34
21865: PUSH
21866: LD_INT 47
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PPUSH
21884: CALL_OW 69
21888: ST_TO_ADDR
// if not tmp then
21889: LD_VAR 0 2
21893: NOT
21894: IFFALSE 21898
// exit ;
21896: GO 21927
// for i in tmp do
21898: LD_ADDR_VAR 0 1
21902: PUSH
21903: LD_VAR 0 2
21907: PUSH
21908: FOR_IN
21909: IFFALSE 21925
// begin SetLives ( i , 0 ) ;
21911: LD_VAR 0 1
21915: PPUSH
21916: LD_INT 0
21918: PPUSH
21919: CALL_OW 234
// end ;
21923: GO 21908
21925: POP
21926: POP
// end ;
21927: PPOPN 2
21929: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21930: LD_EXP 55
21934: PUSH
21935: LD_EXP 61
21939: AND
21940: IFFALSE 22024
21942: GO 21944
21944: DISABLE
21945: LD_INT 0
21947: PPUSH
21948: PPUSH
// begin enable ;
21949: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21950: LD_ADDR_VAR 0 2
21954: PUSH
21955: LD_INT 22
21957: PUSH
21958: LD_OWVAR 2
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 32
21969: PUSH
21970: LD_INT 3
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PPUSH
21981: CALL_OW 69
21985: ST_TO_ADDR
// if not tmp then
21986: LD_VAR 0 2
21990: NOT
21991: IFFALSE 21995
// exit ;
21993: GO 22024
// for i in tmp do
21995: LD_ADDR_VAR 0 1
21999: PUSH
22000: LD_VAR 0 2
22004: PUSH
22005: FOR_IN
22006: IFFALSE 22022
// begin SetLives ( i , 0 ) ;
22008: LD_VAR 0 1
22012: PPUSH
22013: LD_INT 0
22015: PPUSH
22016: CALL_OW 234
// end ;
22020: GO 22005
22022: POP
22023: POP
// end ;
22024: PPOPN 2
22026: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22027: LD_EXP 55
22031: PUSH
22032: LD_EXP 58
22036: AND
22037: IFFALSE 22130
22039: GO 22041
22041: DISABLE
22042: LD_INT 0
22044: PPUSH
// begin enable ;
22045: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22046: LD_ADDR_VAR 0 1
22050: PUSH
22051: LD_INT 22
22053: PUSH
22054: LD_OWVAR 2
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 2
22065: PUSH
22066: LD_INT 25
22068: PUSH
22069: LD_INT 5
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 25
22078: PUSH
22079: LD_INT 9
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 25
22088: PUSH
22089: LD_INT 8
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PPUSH
22106: CALL_OW 69
22110: PUSH
22111: FOR_IN
22112: IFFALSE 22128
// begin SetClass ( i , 1 ) ;
22114: LD_VAR 0 1
22118: PPUSH
22119: LD_INT 1
22121: PPUSH
22122: CALL_OW 336
// end ;
22126: GO 22111
22128: POP
22129: POP
// end ;
22130: PPOPN 1
22132: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22133: LD_EXP 55
22137: PUSH
22138: LD_EXP 59
22142: AND
22143: PUSH
22144: LD_OWVAR 65
22148: PUSH
22149: LD_INT 7
22151: LESS
22152: AND
22153: IFFALSE 22167
22155: GO 22157
22157: DISABLE
// begin enable ;
22158: ENABLE
// game_speed := 7 ;
22159: LD_ADDR_OWVAR 65
22163: PUSH
22164: LD_INT 7
22166: ST_TO_ADDR
// end ;
22167: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22168: LD_EXP 55
22172: PUSH
22173: LD_EXP 62
22177: AND
22178: IFFALSE 22380
22180: GO 22182
22182: DISABLE
22183: LD_INT 0
22185: PPUSH
22186: PPUSH
22187: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22188: LD_ADDR_VAR 0 3
22192: PUSH
22193: LD_INT 81
22195: PUSH
22196: LD_OWVAR 2
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 21
22207: PUSH
22208: LD_INT 1
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: PPUSH
22219: CALL_OW 69
22223: ST_TO_ADDR
// if not tmp then
22224: LD_VAR 0 3
22228: NOT
22229: IFFALSE 22233
// exit ;
22231: GO 22380
// if tmp > 5 then
22233: LD_VAR 0 3
22237: PUSH
22238: LD_INT 5
22240: GREATER
22241: IFFALSE 22253
// k := 5 else
22243: LD_ADDR_VAR 0 2
22247: PUSH
22248: LD_INT 5
22250: ST_TO_ADDR
22251: GO 22263
// k := tmp ;
22253: LD_ADDR_VAR 0 2
22257: PUSH
22258: LD_VAR 0 3
22262: ST_TO_ADDR
// for i := 1 to k do
22263: LD_ADDR_VAR 0 1
22267: PUSH
22268: DOUBLE
22269: LD_INT 1
22271: DEC
22272: ST_TO_ADDR
22273: LD_VAR 0 2
22277: PUSH
22278: FOR_TO
22279: IFFALSE 22378
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22281: LD_VAR 0 3
22285: PUSH
22286: LD_VAR 0 1
22290: ARRAY
22291: PPUSH
22292: LD_VAR 0 1
22296: PUSH
22297: LD_INT 4
22299: MOD
22300: PUSH
22301: LD_INT 1
22303: PLUS
22304: PPUSH
22305: CALL_OW 259
22309: PUSH
22310: LD_INT 10
22312: LESS
22313: IFFALSE 22376
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22315: LD_VAR 0 3
22319: PUSH
22320: LD_VAR 0 1
22324: ARRAY
22325: PPUSH
22326: LD_VAR 0 1
22330: PUSH
22331: LD_INT 4
22333: MOD
22334: PUSH
22335: LD_INT 1
22337: PLUS
22338: PPUSH
22339: LD_VAR 0 3
22343: PUSH
22344: LD_VAR 0 1
22348: ARRAY
22349: PPUSH
22350: LD_VAR 0 1
22354: PUSH
22355: LD_INT 4
22357: MOD
22358: PUSH
22359: LD_INT 1
22361: PLUS
22362: PPUSH
22363: CALL_OW 259
22367: PUSH
22368: LD_INT 1
22370: PLUS
22371: PPUSH
22372: CALL_OW 237
22376: GO 22278
22378: POP
22379: POP
// end ;
22380: PPOPN 3
22382: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22383: LD_EXP 55
22387: PUSH
22388: LD_EXP 63
22392: AND
22393: IFFALSE 22413
22395: GO 22397
22397: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22398: LD_INT 4
22400: PPUSH
22401: LD_OWVAR 2
22405: PPUSH
22406: LD_INT 0
22408: PPUSH
22409: CALL_OW 324
22413: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22414: LD_EXP 55
22418: PUSH
22419: LD_EXP 92
22423: AND
22424: IFFALSE 22444
22426: GO 22428
22428: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22429: LD_INT 19
22431: PPUSH
22432: LD_OWVAR 2
22436: PPUSH
22437: LD_INT 0
22439: PPUSH
22440: CALL_OW 324
22444: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22445: LD_EXP 55
22449: PUSH
22450: LD_EXP 64
22454: AND
22455: IFFALSE 22557
22457: GO 22459
22459: DISABLE
22460: LD_INT 0
22462: PPUSH
22463: PPUSH
// begin enable ;
22464: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22465: LD_ADDR_VAR 0 2
22469: PUSH
22470: LD_INT 22
22472: PUSH
22473: LD_OWVAR 2
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PUSH
22482: LD_INT 2
22484: PUSH
22485: LD_INT 34
22487: PUSH
22488: LD_INT 11
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: LD_INT 34
22497: PUSH
22498: LD_INT 30
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: LIST
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PPUSH
22514: CALL_OW 69
22518: ST_TO_ADDR
// if not tmp then
22519: LD_VAR 0 2
22523: NOT
22524: IFFALSE 22528
// exit ;
22526: GO 22557
// for i in tmp do
22528: LD_ADDR_VAR 0 1
22532: PUSH
22533: LD_VAR 0 2
22537: PUSH
22538: FOR_IN
22539: IFFALSE 22555
// begin SetLives ( i , 0 ) ;
22541: LD_VAR 0 1
22545: PPUSH
22546: LD_INT 0
22548: PPUSH
22549: CALL_OW 234
// end ;
22553: GO 22538
22555: POP
22556: POP
// end ;
22557: PPOPN 2
22559: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22560: LD_EXP 55
22564: PUSH
22565: LD_EXP 65
22569: AND
22570: IFFALSE 22590
22572: GO 22574
22574: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22575: LD_INT 32
22577: PPUSH
22578: LD_OWVAR 2
22582: PPUSH
22583: LD_INT 0
22585: PPUSH
22586: CALL_OW 324
22590: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22591: LD_EXP 55
22595: PUSH
22596: LD_EXP 66
22600: AND
22601: IFFALSE 22782
22603: GO 22605
22605: DISABLE
22606: LD_INT 0
22608: PPUSH
22609: PPUSH
22610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22611: LD_ADDR_VAR 0 2
22615: PUSH
22616: LD_INT 22
22618: PUSH
22619: LD_OWVAR 2
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: PUSH
22628: LD_INT 33
22630: PUSH
22631: LD_INT 3
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PPUSH
22642: CALL_OW 69
22646: ST_TO_ADDR
// if not tmp then
22647: LD_VAR 0 2
22651: NOT
22652: IFFALSE 22656
// exit ;
22654: GO 22782
// side := 0 ;
22656: LD_ADDR_VAR 0 3
22660: PUSH
22661: LD_INT 0
22663: ST_TO_ADDR
// for i := 1 to 8 do
22664: LD_ADDR_VAR 0 1
22668: PUSH
22669: DOUBLE
22670: LD_INT 1
22672: DEC
22673: ST_TO_ADDR
22674: LD_INT 8
22676: PUSH
22677: FOR_TO
22678: IFFALSE 22726
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22680: LD_OWVAR 2
22684: PUSH
22685: LD_VAR 0 1
22689: NONEQUAL
22690: PUSH
22691: LD_OWVAR 2
22695: PPUSH
22696: LD_VAR 0 1
22700: PPUSH
22701: CALL_OW 81
22705: PUSH
22706: LD_INT 2
22708: EQUAL
22709: AND
22710: IFFALSE 22724
// begin side := i ;
22712: LD_ADDR_VAR 0 3
22716: PUSH
22717: LD_VAR 0 1
22721: ST_TO_ADDR
// break ;
22722: GO 22726
// end ;
22724: GO 22677
22726: POP
22727: POP
// if not side then
22728: LD_VAR 0 3
22732: NOT
22733: IFFALSE 22737
// exit ;
22735: GO 22782
// for i := 1 to tmp do
22737: LD_ADDR_VAR 0 1
22741: PUSH
22742: DOUBLE
22743: LD_INT 1
22745: DEC
22746: ST_TO_ADDR
22747: LD_VAR 0 2
22751: PUSH
22752: FOR_TO
22753: IFFALSE 22780
// if Prob ( 60 ) then
22755: LD_INT 60
22757: PPUSH
22758: CALL_OW 13
22762: IFFALSE 22778
// SetSide ( i , side ) ;
22764: LD_VAR 0 1
22768: PPUSH
22769: LD_VAR 0 3
22773: PPUSH
22774: CALL_OW 235
22778: GO 22752
22780: POP
22781: POP
// end ;
22782: PPOPN 3
22784: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22785: LD_EXP 55
22789: PUSH
22790: LD_EXP 68
22794: AND
22795: IFFALSE 22914
22797: GO 22799
22799: DISABLE
22800: LD_INT 0
22802: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22803: LD_ADDR_VAR 0 1
22807: PUSH
22808: LD_INT 22
22810: PUSH
22811: LD_OWVAR 2
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 21
22822: PUSH
22823: LD_INT 1
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 3
22832: PUSH
22833: LD_INT 23
22835: PUSH
22836: LD_INT 0
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: LIST
22851: PPUSH
22852: CALL_OW 69
22856: PUSH
22857: FOR_IN
22858: IFFALSE 22912
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22860: LD_VAR 0 1
22864: PPUSH
22865: CALL_OW 257
22869: PUSH
22870: LD_INT 1
22872: PUSH
22873: LD_INT 2
22875: PUSH
22876: LD_INT 3
22878: PUSH
22879: LD_INT 4
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: IN
22888: IFFALSE 22910
// SetClass ( un , rand ( 1 , 4 ) ) ;
22890: LD_VAR 0 1
22894: PPUSH
22895: LD_INT 1
22897: PPUSH
22898: LD_INT 4
22900: PPUSH
22901: CALL_OW 12
22905: PPUSH
22906: CALL_OW 336
22910: GO 22857
22912: POP
22913: POP
// end ;
22914: PPOPN 1
22916: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22917: LD_EXP 55
22921: PUSH
22922: LD_EXP 67
22926: AND
22927: IFFALSE 23006
22929: GO 22931
22931: DISABLE
22932: LD_INT 0
22934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22935: LD_ADDR_VAR 0 1
22939: PUSH
22940: LD_INT 22
22942: PUSH
22943: LD_OWVAR 2
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: LD_INT 21
22954: PUSH
22955: LD_INT 3
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: PPUSH
22966: CALL_OW 69
22970: ST_TO_ADDR
// if not tmp then
22971: LD_VAR 0 1
22975: NOT
22976: IFFALSE 22980
// exit ;
22978: GO 23006
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22980: LD_VAR 0 1
22984: PUSH
22985: LD_INT 1
22987: PPUSH
22988: LD_VAR 0 1
22992: PPUSH
22993: CALL_OW 12
22997: ARRAY
22998: PPUSH
22999: LD_INT 100
23001: PPUSH
23002: CALL_OW 234
// end ;
23006: PPOPN 1
23008: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23009: LD_EXP 55
23013: PUSH
23014: LD_EXP 69
23018: AND
23019: IFFALSE 23117
23021: GO 23023
23023: DISABLE
23024: LD_INT 0
23026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23027: LD_ADDR_VAR 0 1
23031: PUSH
23032: LD_INT 22
23034: PUSH
23035: LD_OWVAR 2
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 21
23046: PUSH
23047: LD_INT 1
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PPUSH
23058: CALL_OW 69
23062: ST_TO_ADDR
// if not tmp then
23063: LD_VAR 0 1
23067: NOT
23068: IFFALSE 23072
// exit ;
23070: GO 23117
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23072: LD_VAR 0 1
23076: PUSH
23077: LD_INT 1
23079: PPUSH
23080: LD_VAR 0 1
23084: PPUSH
23085: CALL_OW 12
23089: ARRAY
23090: PPUSH
23091: LD_INT 1
23093: PPUSH
23094: LD_INT 4
23096: PPUSH
23097: CALL_OW 12
23101: PPUSH
23102: LD_INT 3000
23104: PPUSH
23105: LD_INT 9000
23107: PPUSH
23108: CALL_OW 12
23112: PPUSH
23113: CALL_OW 492
// end ;
23117: PPOPN 1
23119: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23120: LD_EXP 55
23124: PUSH
23125: LD_EXP 70
23129: AND
23130: IFFALSE 23150
23132: GO 23134
23134: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23135: LD_INT 1
23137: PPUSH
23138: LD_OWVAR 2
23142: PPUSH
23143: LD_INT 0
23145: PPUSH
23146: CALL_OW 324
23150: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23151: LD_EXP 55
23155: PUSH
23156: LD_EXP 71
23160: AND
23161: IFFALSE 23244
23163: GO 23165
23165: DISABLE
23166: LD_INT 0
23168: PPUSH
23169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23170: LD_ADDR_VAR 0 2
23174: PUSH
23175: LD_INT 22
23177: PUSH
23178: LD_OWVAR 2
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: LD_INT 21
23189: PUSH
23190: LD_INT 3
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PPUSH
23201: CALL_OW 69
23205: ST_TO_ADDR
// if not tmp then
23206: LD_VAR 0 2
23210: NOT
23211: IFFALSE 23215
// exit ;
23213: GO 23244
// for i in tmp do
23215: LD_ADDR_VAR 0 1
23219: PUSH
23220: LD_VAR 0 2
23224: PUSH
23225: FOR_IN
23226: IFFALSE 23242
// SetBLevel ( i , 10 ) ;
23228: LD_VAR 0 1
23232: PPUSH
23233: LD_INT 10
23235: PPUSH
23236: CALL_OW 241
23240: GO 23225
23242: POP
23243: POP
// end ;
23244: PPOPN 2
23246: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23247: LD_EXP 55
23251: PUSH
23252: LD_EXP 72
23256: AND
23257: IFFALSE 23368
23259: GO 23261
23261: DISABLE
23262: LD_INT 0
23264: PPUSH
23265: PPUSH
23266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23267: LD_ADDR_VAR 0 3
23271: PUSH
23272: LD_INT 22
23274: PUSH
23275: LD_OWVAR 2
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 25
23286: PUSH
23287: LD_INT 1
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PPUSH
23298: CALL_OW 69
23302: ST_TO_ADDR
// if not tmp then
23303: LD_VAR 0 3
23307: NOT
23308: IFFALSE 23312
// exit ;
23310: GO 23368
// un := tmp [ rand ( 1 , tmp ) ] ;
23312: LD_ADDR_VAR 0 2
23316: PUSH
23317: LD_VAR 0 3
23321: PUSH
23322: LD_INT 1
23324: PPUSH
23325: LD_VAR 0 3
23329: PPUSH
23330: CALL_OW 12
23334: ARRAY
23335: ST_TO_ADDR
// if Crawls ( un ) then
23336: LD_VAR 0 2
23340: PPUSH
23341: CALL_OW 318
23345: IFFALSE 23356
// ComWalk ( un ) ;
23347: LD_VAR 0 2
23351: PPUSH
23352: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23356: LD_VAR 0 2
23360: PPUSH
23361: LD_INT 5
23363: PPUSH
23364: CALL_OW 336
// end ;
23368: PPOPN 3
23370: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
23371: LD_EXP 55
23375: PUSH
23376: LD_EXP 73
23380: AND
23381: PUSH
23382: LD_OWVAR 67
23386: PUSH
23387: LD_INT 4
23389: LESS
23390: AND
23391: IFFALSE 23410
23393: GO 23395
23395: DISABLE
// begin Difficulty := Difficulty + 1 ;
23396: LD_ADDR_OWVAR 67
23400: PUSH
23401: LD_OWVAR 67
23405: PUSH
23406: LD_INT 1
23408: PLUS
23409: ST_TO_ADDR
// end ;
23410: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23411: LD_EXP 55
23415: PUSH
23416: LD_EXP 74
23420: AND
23421: IFFALSE 23524
23423: GO 23425
23425: DISABLE
23426: LD_INT 0
23428: PPUSH
// begin for i := 1 to 5 do
23429: LD_ADDR_VAR 0 1
23433: PUSH
23434: DOUBLE
23435: LD_INT 1
23437: DEC
23438: ST_TO_ADDR
23439: LD_INT 5
23441: PUSH
23442: FOR_TO
23443: IFFALSE 23522
// begin uc_nation := nation_nature ;
23445: LD_ADDR_OWVAR 21
23449: PUSH
23450: LD_INT 0
23452: ST_TO_ADDR
// uc_side := 0 ;
23453: LD_ADDR_OWVAR 20
23457: PUSH
23458: LD_INT 0
23460: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23461: LD_ADDR_OWVAR 29
23465: PUSH
23466: LD_INT 12
23468: PUSH
23469: LD_INT 12
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: ST_TO_ADDR
// hc_agressivity := 20 ;
23476: LD_ADDR_OWVAR 35
23480: PUSH
23481: LD_INT 20
23483: ST_TO_ADDR
// hc_class := class_tiger ;
23484: LD_ADDR_OWVAR 28
23488: PUSH
23489: LD_INT 14
23491: ST_TO_ADDR
// hc_gallery :=  ;
23492: LD_ADDR_OWVAR 33
23496: PUSH
23497: LD_STRING 
23499: ST_TO_ADDR
// hc_name :=  ;
23500: LD_ADDR_OWVAR 26
23504: PUSH
23505: LD_STRING 
23507: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23508: CALL_OW 44
23512: PPUSH
23513: LD_INT 0
23515: PPUSH
23516: CALL_OW 51
// end ;
23520: GO 23442
23522: POP
23523: POP
// end ;
23524: PPOPN 1
23526: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23527: LD_EXP 55
23531: PUSH
23532: LD_EXP 75
23536: AND
23537: IFFALSE 23546
23539: GO 23541
23541: DISABLE
// StreamSibBomb ;
23542: CALL 23547 0 0
23546: END
// export function StreamSibBomb ; var i , x , y ; begin
23547: LD_INT 0
23549: PPUSH
23550: PPUSH
23551: PPUSH
23552: PPUSH
// result := false ;
23553: LD_ADDR_VAR 0 1
23557: PUSH
23558: LD_INT 0
23560: ST_TO_ADDR
// for i := 1 to 16 do
23561: LD_ADDR_VAR 0 2
23565: PUSH
23566: DOUBLE
23567: LD_INT 1
23569: DEC
23570: ST_TO_ADDR
23571: LD_INT 16
23573: PUSH
23574: FOR_TO
23575: IFFALSE 23774
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23577: LD_ADDR_VAR 0 3
23581: PUSH
23582: LD_INT 10
23584: PUSH
23585: LD_INT 20
23587: PUSH
23588: LD_INT 30
23590: PUSH
23591: LD_INT 40
23593: PUSH
23594: LD_INT 50
23596: PUSH
23597: LD_INT 60
23599: PUSH
23600: LD_INT 70
23602: PUSH
23603: LD_INT 80
23605: PUSH
23606: LD_INT 90
23608: PUSH
23609: LD_INT 100
23611: PUSH
23612: LD_INT 110
23614: PUSH
23615: LD_INT 120
23617: PUSH
23618: LD_INT 130
23620: PUSH
23621: LD_INT 140
23623: PUSH
23624: LD_INT 150
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: PUSH
23644: LD_INT 1
23646: PPUSH
23647: LD_INT 15
23649: PPUSH
23650: CALL_OW 12
23654: ARRAY
23655: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23656: LD_ADDR_VAR 0 4
23660: PUSH
23661: LD_INT 10
23663: PUSH
23664: LD_INT 20
23666: PUSH
23667: LD_INT 30
23669: PUSH
23670: LD_INT 40
23672: PUSH
23673: LD_INT 50
23675: PUSH
23676: LD_INT 60
23678: PUSH
23679: LD_INT 70
23681: PUSH
23682: LD_INT 80
23684: PUSH
23685: LD_INT 90
23687: PUSH
23688: LD_INT 100
23690: PUSH
23691: LD_INT 110
23693: PUSH
23694: LD_INT 120
23696: PUSH
23697: LD_INT 130
23699: PUSH
23700: LD_INT 140
23702: PUSH
23703: LD_INT 150
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: PUSH
23723: LD_INT 1
23725: PPUSH
23726: LD_INT 15
23728: PPUSH
23729: CALL_OW 12
23733: ARRAY
23734: ST_TO_ADDR
// if ValidHex ( x , y ) then
23735: LD_VAR 0 3
23739: PPUSH
23740: LD_VAR 0 4
23744: PPUSH
23745: CALL_OW 488
23749: IFFALSE 23772
// begin result := [ x , y ] ;
23751: LD_ADDR_VAR 0 1
23755: PUSH
23756: LD_VAR 0 3
23760: PUSH
23761: LD_VAR 0 4
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: ST_TO_ADDR
// break ;
23770: GO 23774
// end ; end ;
23772: GO 23574
23774: POP
23775: POP
// if result then
23776: LD_VAR 0 1
23780: IFFALSE 23840
// begin ToLua ( playSibBomb() ) ;
23782: LD_STRING playSibBomb()
23784: PPUSH
23785: CALL_OW 559
// wait ( 0 0$14 ) ;
23789: LD_INT 490
23791: PPUSH
23792: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23796: LD_VAR 0 1
23800: PUSH
23801: LD_INT 1
23803: ARRAY
23804: PPUSH
23805: LD_VAR 0 1
23809: PUSH
23810: LD_INT 2
23812: ARRAY
23813: PPUSH
23814: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23818: LD_VAR 0 1
23822: PUSH
23823: LD_INT 1
23825: ARRAY
23826: PPUSH
23827: LD_VAR 0 1
23831: PUSH
23832: LD_INT 2
23834: ARRAY
23835: PPUSH
23836: CALL_OW 429
// end ; end ;
23840: LD_VAR 0 1
23844: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23845: LD_EXP 55
23849: PUSH
23850: LD_EXP 77
23854: AND
23855: IFFALSE 23867
23857: GO 23859
23859: DISABLE
// YouLost (  ) ;
23860: LD_STRING 
23862: PPUSH
23863: CALL_OW 104
23867: END
// every 0 0$1 trigger StreamModeActive and sFog do
23868: LD_EXP 55
23872: PUSH
23873: LD_EXP 76
23877: AND
23878: IFFALSE 23892
23880: GO 23882
23882: DISABLE
// FogOff ( your_side ) ;
23883: LD_OWVAR 2
23887: PPUSH
23888: CALL_OW 344
23892: END
// every 0 0$1 trigger StreamModeActive and sSun do
23893: LD_EXP 55
23897: PUSH
23898: LD_EXP 78
23902: AND
23903: IFFALSE 23931
23905: GO 23907
23907: DISABLE
// begin solar_recharge_percent := 0 ;
23908: LD_ADDR_OWVAR 79
23912: PUSH
23913: LD_INT 0
23915: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23916: LD_INT 10500
23918: PPUSH
23919: CALL_OW 67
// solar_recharge_percent := 100 ;
23923: LD_ADDR_OWVAR 79
23927: PUSH
23928: LD_INT 100
23930: ST_TO_ADDR
// end ;
23931: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23932: LD_EXP 55
23936: PUSH
23937: LD_EXP 79
23941: AND
23942: IFFALSE 24181
23944: GO 23946
23946: DISABLE
23947: LD_INT 0
23949: PPUSH
23950: PPUSH
23951: PPUSH
// begin tmp := [ ] ;
23952: LD_ADDR_VAR 0 3
23956: PUSH
23957: EMPTY
23958: ST_TO_ADDR
// for i := 1 to 6 do
23959: LD_ADDR_VAR 0 1
23963: PUSH
23964: DOUBLE
23965: LD_INT 1
23967: DEC
23968: ST_TO_ADDR
23969: LD_INT 6
23971: PUSH
23972: FOR_TO
23973: IFFALSE 24078
// begin uc_nation := nation_nature ;
23975: LD_ADDR_OWVAR 21
23979: PUSH
23980: LD_INT 0
23982: ST_TO_ADDR
// uc_side := 0 ;
23983: LD_ADDR_OWVAR 20
23987: PUSH
23988: LD_INT 0
23990: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23991: LD_ADDR_OWVAR 29
23995: PUSH
23996: LD_INT 12
23998: PUSH
23999: LD_INT 12
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: ST_TO_ADDR
// hc_agressivity := 20 ;
24006: LD_ADDR_OWVAR 35
24010: PUSH
24011: LD_INT 20
24013: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24014: LD_ADDR_OWVAR 28
24018: PUSH
24019: LD_INT 17
24021: ST_TO_ADDR
// hc_gallery :=  ;
24022: LD_ADDR_OWVAR 33
24026: PUSH
24027: LD_STRING 
24029: ST_TO_ADDR
// hc_name :=  ;
24030: LD_ADDR_OWVAR 26
24034: PUSH
24035: LD_STRING 
24037: ST_TO_ADDR
// un := CreateHuman ;
24038: LD_ADDR_VAR 0 2
24042: PUSH
24043: CALL_OW 44
24047: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24048: LD_VAR 0 2
24052: PPUSH
24053: LD_INT 1
24055: PPUSH
24056: CALL_OW 51
// tmp := tmp ^ un ;
24060: LD_ADDR_VAR 0 3
24064: PUSH
24065: LD_VAR 0 3
24069: PUSH
24070: LD_VAR 0 2
24074: ADD
24075: ST_TO_ADDR
// end ;
24076: GO 23972
24078: POP
24079: POP
// repeat wait ( 0 0$1 ) ;
24080: LD_INT 35
24082: PPUSH
24083: CALL_OW 67
// for un in tmp do
24087: LD_ADDR_VAR 0 2
24091: PUSH
24092: LD_VAR 0 3
24096: PUSH
24097: FOR_IN
24098: IFFALSE 24172
// begin if IsDead ( un ) then
24100: LD_VAR 0 2
24104: PPUSH
24105: CALL_OW 301
24109: IFFALSE 24129
// begin tmp := tmp diff un ;
24111: LD_ADDR_VAR 0 3
24115: PUSH
24116: LD_VAR 0 3
24120: PUSH
24121: LD_VAR 0 2
24125: DIFF
24126: ST_TO_ADDR
// continue ;
24127: GO 24097
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24129: LD_VAR 0 2
24133: PPUSH
24134: LD_INT 3
24136: PUSH
24137: LD_INT 22
24139: PUSH
24140: LD_INT 0
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PPUSH
24151: CALL_OW 69
24155: PPUSH
24156: LD_VAR 0 2
24160: PPUSH
24161: CALL_OW 74
24165: PPUSH
24166: CALL_OW 115
// end ;
24170: GO 24097
24172: POP
24173: POP
// until not tmp ;
24174: LD_VAR 0 3
24178: NOT
24179: IFFALSE 24080
// end ;
24181: PPOPN 3
24183: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24184: LD_EXP 55
24188: PUSH
24189: LD_EXP 80
24193: AND
24194: IFFALSE 24248
24196: GO 24198
24198: DISABLE
// begin ToLua ( displayTroll(); ) ;
24199: LD_STRING displayTroll();
24201: PPUSH
24202: CALL_OW 559
// wait ( 3 3$00 ) ;
24206: LD_INT 6300
24208: PPUSH
24209: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24213: LD_STRING hideTroll();
24215: PPUSH
24216: CALL_OW 559
// wait ( 1 1$00 ) ;
24220: LD_INT 2100
24222: PPUSH
24223: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24227: LD_STRING displayTroll();
24229: PPUSH
24230: CALL_OW 559
// wait ( 1 1$00 ) ;
24234: LD_INT 2100
24236: PPUSH
24237: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24241: LD_STRING hideTroll();
24243: PPUSH
24244: CALL_OW 559
// end ;
24248: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24249: LD_EXP 55
24253: PUSH
24254: LD_EXP 81
24258: AND
24259: IFFALSE 24322
24261: GO 24263
24263: DISABLE
24264: LD_INT 0
24266: PPUSH
// begin p := 0 ;
24267: LD_ADDR_VAR 0 1
24271: PUSH
24272: LD_INT 0
24274: ST_TO_ADDR
// repeat game_speed := 1 ;
24275: LD_ADDR_OWVAR 65
24279: PUSH
24280: LD_INT 1
24282: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24283: LD_INT 35
24285: PPUSH
24286: CALL_OW 67
// p := p + 1 ;
24290: LD_ADDR_VAR 0 1
24294: PUSH
24295: LD_VAR 0 1
24299: PUSH
24300: LD_INT 1
24302: PLUS
24303: ST_TO_ADDR
// until p >= 60 ;
24304: LD_VAR 0 1
24308: PUSH
24309: LD_INT 60
24311: GREATEREQUAL
24312: IFFALSE 24275
// game_speed := 4 ;
24314: LD_ADDR_OWVAR 65
24318: PUSH
24319: LD_INT 4
24321: ST_TO_ADDR
// end ;
24322: PPOPN 1
24324: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24325: LD_EXP 55
24329: PUSH
24330: LD_EXP 82
24334: AND
24335: IFFALSE 24481
24337: GO 24339
24339: DISABLE
24340: LD_INT 0
24342: PPUSH
24343: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24344: LD_ADDR_VAR 0 1
24348: PUSH
24349: LD_INT 22
24351: PUSH
24352: LD_OWVAR 2
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 2
24363: PUSH
24364: LD_INT 30
24366: PUSH
24367: LD_INT 0
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 30
24376: PUSH
24377: LD_INT 1
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: LIST
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PPUSH
24393: CALL_OW 69
24397: ST_TO_ADDR
// if not depot then
24398: LD_VAR 0 1
24402: NOT
24403: IFFALSE 24407
// exit ;
24405: GO 24481
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24407: LD_ADDR_VAR 0 2
24411: PUSH
24412: LD_VAR 0 1
24416: PUSH
24417: LD_INT 1
24419: PPUSH
24420: LD_VAR 0 1
24424: PPUSH
24425: CALL_OW 12
24429: ARRAY
24430: PPUSH
24431: CALL_OW 274
24435: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24436: LD_VAR 0 2
24440: PPUSH
24441: LD_INT 1
24443: PPUSH
24444: LD_INT 0
24446: PPUSH
24447: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24451: LD_VAR 0 2
24455: PPUSH
24456: LD_INT 2
24458: PPUSH
24459: LD_INT 0
24461: PPUSH
24462: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24466: LD_VAR 0 2
24470: PPUSH
24471: LD_INT 3
24473: PPUSH
24474: LD_INT 0
24476: PPUSH
24477: CALL_OW 277
// end ;
24481: PPOPN 2
24483: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24484: LD_EXP 55
24488: PUSH
24489: LD_EXP 83
24493: AND
24494: IFFALSE 24591
24496: GO 24498
24498: DISABLE
24499: LD_INT 0
24501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24502: LD_ADDR_VAR 0 1
24506: PUSH
24507: LD_INT 22
24509: PUSH
24510: LD_OWVAR 2
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 21
24521: PUSH
24522: LD_INT 1
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 3
24531: PUSH
24532: LD_INT 23
24534: PUSH
24535: LD_INT 0
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: LIST
24550: PPUSH
24551: CALL_OW 69
24555: ST_TO_ADDR
// if not tmp then
24556: LD_VAR 0 1
24560: NOT
24561: IFFALSE 24565
// exit ;
24563: GO 24591
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24565: LD_VAR 0 1
24569: PUSH
24570: LD_INT 1
24572: PPUSH
24573: LD_VAR 0 1
24577: PPUSH
24578: CALL_OW 12
24582: ARRAY
24583: PPUSH
24584: LD_INT 200
24586: PPUSH
24587: CALL_OW 234
// end ;
24591: PPOPN 1
24593: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24594: LD_EXP 55
24598: PUSH
24599: LD_EXP 84
24603: AND
24604: IFFALSE 24683
24606: GO 24608
24608: DISABLE
24609: LD_INT 0
24611: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24612: LD_ADDR_VAR 0 1
24616: PUSH
24617: LD_INT 22
24619: PUSH
24620: LD_OWVAR 2
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: LD_INT 21
24631: PUSH
24632: LD_INT 2
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PPUSH
24643: CALL_OW 69
24647: ST_TO_ADDR
// if not tmp then
24648: LD_VAR 0 1
24652: NOT
24653: IFFALSE 24657
// exit ;
24655: GO 24683
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24657: LD_VAR 0 1
24661: PUSH
24662: LD_INT 1
24664: PPUSH
24665: LD_VAR 0 1
24669: PPUSH
24670: CALL_OW 12
24674: ARRAY
24675: PPUSH
24676: LD_INT 60
24678: PPUSH
24679: CALL_OW 234
// end ;
24683: PPOPN 1
24685: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24686: LD_EXP 55
24690: PUSH
24691: LD_EXP 85
24695: AND
24696: IFFALSE 24795
24698: GO 24700
24700: DISABLE
24701: LD_INT 0
24703: PPUSH
24704: PPUSH
// begin enable ;
24705: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24706: LD_ADDR_VAR 0 1
24710: PUSH
24711: LD_INT 22
24713: PUSH
24714: LD_OWVAR 2
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: LD_INT 61
24725: PUSH
24726: EMPTY
24727: LIST
24728: PUSH
24729: LD_INT 33
24731: PUSH
24732: LD_INT 2
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: LIST
24743: PPUSH
24744: CALL_OW 69
24748: ST_TO_ADDR
// if not tmp then
24749: LD_VAR 0 1
24753: NOT
24754: IFFALSE 24758
// exit ;
24756: GO 24795
// for i in tmp do
24758: LD_ADDR_VAR 0 2
24762: PUSH
24763: LD_VAR 0 1
24767: PUSH
24768: FOR_IN
24769: IFFALSE 24793
// if IsControledBy ( i ) then
24771: LD_VAR 0 2
24775: PPUSH
24776: CALL_OW 312
24780: IFFALSE 24791
// ComUnlink ( i ) ;
24782: LD_VAR 0 2
24786: PPUSH
24787: CALL_OW 136
24791: GO 24768
24793: POP
24794: POP
// end ;
24795: PPOPN 2
24797: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24798: LD_EXP 55
24802: PUSH
24803: LD_EXP 86
24807: AND
24808: IFFALSE 24948
24810: GO 24812
24812: DISABLE
24813: LD_INT 0
24815: PPUSH
24816: PPUSH
// begin ToLua ( displayPowell(); ) ;
24817: LD_STRING displayPowell();
24819: PPUSH
24820: CALL_OW 559
// uc_side := 0 ;
24824: LD_ADDR_OWVAR 20
24828: PUSH
24829: LD_INT 0
24831: ST_TO_ADDR
// uc_nation := 2 ;
24832: LD_ADDR_OWVAR 21
24836: PUSH
24837: LD_INT 2
24839: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24840: LD_ADDR_OWVAR 37
24844: PUSH
24845: LD_INT 14
24847: ST_TO_ADDR
// vc_engine := engine_siberite ;
24848: LD_ADDR_OWVAR 39
24852: PUSH
24853: LD_INT 3
24855: ST_TO_ADDR
// vc_control := control_apeman ;
24856: LD_ADDR_OWVAR 38
24860: PUSH
24861: LD_INT 5
24863: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24864: LD_ADDR_OWVAR 40
24868: PUSH
24869: LD_INT 29
24871: ST_TO_ADDR
// un := CreateVehicle ;
24872: LD_ADDR_VAR 0 2
24876: PUSH
24877: CALL_OW 45
24881: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24882: LD_VAR 0 2
24886: PPUSH
24887: LD_INT 1
24889: PPUSH
24890: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24894: LD_INT 35
24896: PPUSH
24897: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24901: LD_VAR 0 2
24905: PPUSH
24906: LD_INT 22
24908: PUSH
24909: LD_OWVAR 2
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PPUSH
24918: CALL_OW 69
24922: PPUSH
24923: LD_VAR 0 2
24927: PPUSH
24928: CALL_OW 74
24932: PPUSH
24933: CALL_OW 115
// until IsDead ( un ) ;
24937: LD_VAR 0 2
24941: PPUSH
24942: CALL_OW 301
24946: IFFALSE 24894
// end ;
24948: PPOPN 2
24950: END
// every 0 0$1 trigger StreamModeActive and sStu do
24951: LD_EXP 55
24955: PUSH
24956: LD_EXP 94
24960: AND
24961: IFFALSE 24977
24963: GO 24965
24965: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24966: LD_STRING displayStucuk();
24968: PPUSH
24969: CALL_OW 559
// ResetFog ;
24973: CALL_OW 335
// end ;
24977: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24978: LD_EXP 55
24982: PUSH
24983: LD_EXP 87
24987: AND
24988: IFFALSE 25129
24990: GO 24992
24992: DISABLE
24993: LD_INT 0
24995: PPUSH
24996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24997: LD_ADDR_VAR 0 2
25001: PUSH
25002: LD_INT 22
25004: PUSH
25005: LD_OWVAR 2
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 21
25016: PUSH
25017: LD_INT 1
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PPUSH
25028: CALL_OW 69
25032: ST_TO_ADDR
// if not tmp then
25033: LD_VAR 0 2
25037: NOT
25038: IFFALSE 25042
// exit ;
25040: GO 25129
// un := tmp [ rand ( 1 , tmp ) ] ;
25042: LD_ADDR_VAR 0 1
25046: PUSH
25047: LD_VAR 0 2
25051: PUSH
25052: LD_INT 1
25054: PPUSH
25055: LD_VAR 0 2
25059: PPUSH
25060: CALL_OW 12
25064: ARRAY
25065: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25066: LD_VAR 0 1
25070: PPUSH
25071: LD_INT 0
25073: PPUSH
25074: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25078: LD_VAR 0 1
25082: PPUSH
25083: LD_OWVAR 3
25087: PUSH
25088: LD_VAR 0 1
25092: DIFF
25093: PPUSH
25094: LD_VAR 0 1
25098: PPUSH
25099: CALL_OW 74
25103: PPUSH
25104: CALL_OW 115
// wait ( 0 0$20 ) ;
25108: LD_INT 700
25110: PPUSH
25111: CALL_OW 67
// SetSide ( un , your_side ) ;
25115: LD_VAR 0 1
25119: PPUSH
25120: LD_OWVAR 2
25124: PPUSH
25125: CALL_OW 235
// end ;
25129: PPOPN 2
25131: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25132: LD_EXP 55
25136: PUSH
25137: LD_EXP 88
25141: AND
25142: IFFALSE 25248
25144: GO 25146
25146: DISABLE
25147: LD_INT 0
25149: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25150: LD_ADDR_VAR 0 1
25154: PUSH
25155: LD_INT 22
25157: PUSH
25158: LD_OWVAR 2
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 2
25169: PUSH
25170: LD_INT 30
25172: PUSH
25173: LD_INT 0
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 30
25182: PUSH
25183: LD_INT 1
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: LIST
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PPUSH
25199: CALL_OW 69
25203: ST_TO_ADDR
// if not depot then
25204: LD_VAR 0 1
25208: NOT
25209: IFFALSE 25213
// exit ;
25211: GO 25248
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25213: LD_VAR 0 1
25217: PUSH
25218: LD_INT 1
25220: ARRAY
25221: PPUSH
25222: CALL_OW 250
25226: PPUSH
25227: LD_VAR 0 1
25231: PUSH
25232: LD_INT 1
25234: ARRAY
25235: PPUSH
25236: CALL_OW 251
25240: PPUSH
25241: LD_INT 70
25243: PPUSH
25244: CALL_OW 495
// end ;
25248: PPOPN 1
25250: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25251: LD_EXP 55
25255: PUSH
25256: LD_EXP 89
25260: AND
25261: IFFALSE 25472
25263: GO 25265
25265: DISABLE
25266: LD_INT 0
25268: PPUSH
25269: PPUSH
25270: PPUSH
25271: PPUSH
25272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25273: LD_ADDR_VAR 0 5
25277: PUSH
25278: LD_INT 22
25280: PUSH
25281: LD_OWVAR 2
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 21
25292: PUSH
25293: LD_INT 1
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PPUSH
25304: CALL_OW 69
25308: ST_TO_ADDR
// if not tmp then
25309: LD_VAR 0 5
25313: NOT
25314: IFFALSE 25318
// exit ;
25316: GO 25472
// for i in tmp do
25318: LD_ADDR_VAR 0 1
25322: PUSH
25323: LD_VAR 0 5
25327: PUSH
25328: FOR_IN
25329: IFFALSE 25470
// begin d := rand ( 0 , 5 ) ;
25331: LD_ADDR_VAR 0 4
25335: PUSH
25336: LD_INT 0
25338: PPUSH
25339: LD_INT 5
25341: PPUSH
25342: CALL_OW 12
25346: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25347: LD_ADDR_VAR 0 2
25351: PUSH
25352: LD_VAR 0 1
25356: PPUSH
25357: CALL_OW 250
25361: PPUSH
25362: LD_VAR 0 4
25366: PPUSH
25367: LD_INT 3
25369: PPUSH
25370: LD_INT 12
25372: PPUSH
25373: CALL_OW 12
25377: PPUSH
25378: CALL_OW 272
25382: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25383: LD_ADDR_VAR 0 3
25387: PUSH
25388: LD_VAR 0 1
25392: PPUSH
25393: CALL_OW 251
25397: PPUSH
25398: LD_VAR 0 4
25402: PPUSH
25403: LD_INT 3
25405: PPUSH
25406: LD_INT 12
25408: PPUSH
25409: CALL_OW 12
25413: PPUSH
25414: CALL_OW 273
25418: ST_TO_ADDR
// if ValidHex ( x , y ) then
25419: LD_VAR 0 2
25423: PPUSH
25424: LD_VAR 0 3
25428: PPUSH
25429: CALL_OW 488
25433: IFFALSE 25468
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25435: LD_VAR 0 1
25439: PPUSH
25440: LD_VAR 0 2
25444: PPUSH
25445: LD_VAR 0 3
25449: PPUSH
25450: LD_INT 3
25452: PPUSH
25453: LD_INT 6
25455: PPUSH
25456: CALL_OW 12
25460: PPUSH
25461: LD_INT 1
25463: PPUSH
25464: CALL_OW 483
// end ;
25468: GO 25328
25470: POP
25471: POP
// end ;
25472: PPOPN 5
25474: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25475: LD_EXP 55
25479: PUSH
25480: LD_EXP 90
25484: AND
25485: IFFALSE 25579
25487: GO 25489
25489: DISABLE
25490: LD_INT 0
25492: PPUSH
25493: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25494: LD_ADDR_VAR 0 2
25498: PUSH
25499: LD_INT 22
25501: PUSH
25502: LD_OWVAR 2
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 32
25513: PUSH
25514: LD_INT 1
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 21
25523: PUSH
25524: LD_INT 2
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: LIST
25535: PPUSH
25536: CALL_OW 69
25540: ST_TO_ADDR
// if not tmp then
25541: LD_VAR 0 2
25545: NOT
25546: IFFALSE 25550
// exit ;
25548: GO 25579
// for i in tmp do
25550: LD_ADDR_VAR 0 1
25554: PUSH
25555: LD_VAR 0 2
25559: PUSH
25560: FOR_IN
25561: IFFALSE 25577
// SetFuel ( i , 0 ) ;
25563: LD_VAR 0 1
25567: PPUSH
25568: LD_INT 0
25570: PPUSH
25571: CALL_OW 240
25575: GO 25560
25577: POP
25578: POP
// end ;
25579: PPOPN 2
25581: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25582: LD_EXP 55
25586: PUSH
25587: LD_EXP 91
25591: AND
25592: IFFALSE 25658
25594: GO 25596
25596: DISABLE
25597: LD_INT 0
25599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25600: LD_ADDR_VAR 0 1
25604: PUSH
25605: LD_INT 22
25607: PUSH
25608: LD_OWVAR 2
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 30
25619: PUSH
25620: LD_INT 29
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PPUSH
25631: CALL_OW 69
25635: ST_TO_ADDR
// if not tmp then
25636: LD_VAR 0 1
25640: NOT
25641: IFFALSE 25645
// exit ;
25643: GO 25658
// DestroyUnit ( tmp [ 1 ] ) ;
25645: LD_VAR 0 1
25649: PUSH
25650: LD_INT 1
25652: ARRAY
25653: PPUSH
25654: CALL_OW 65
// end ;
25658: PPOPN 1
25660: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25661: LD_EXP 55
25665: PUSH
25666: LD_EXP 93
25670: AND
25671: IFFALSE 25800
25673: GO 25675
25675: DISABLE
25676: LD_INT 0
25678: PPUSH
// begin uc_side := 0 ;
25679: LD_ADDR_OWVAR 20
25683: PUSH
25684: LD_INT 0
25686: ST_TO_ADDR
// uc_nation := nation_arabian ;
25687: LD_ADDR_OWVAR 21
25691: PUSH
25692: LD_INT 2
25694: ST_TO_ADDR
// hc_gallery :=  ;
25695: LD_ADDR_OWVAR 33
25699: PUSH
25700: LD_STRING 
25702: ST_TO_ADDR
// hc_name :=  ;
25703: LD_ADDR_OWVAR 26
25707: PUSH
25708: LD_STRING 
25710: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25711: LD_INT 1
25713: PPUSH
25714: LD_INT 11
25716: PPUSH
25717: LD_INT 10
25719: PPUSH
25720: CALL_OW 380
// un := CreateHuman ;
25724: LD_ADDR_VAR 0 1
25728: PUSH
25729: CALL_OW 44
25733: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25734: LD_VAR 0 1
25738: PPUSH
25739: LD_INT 1
25741: PPUSH
25742: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25746: LD_INT 35
25748: PPUSH
25749: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25753: LD_VAR 0 1
25757: PPUSH
25758: LD_INT 22
25760: PUSH
25761: LD_OWVAR 2
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PPUSH
25770: CALL_OW 69
25774: PPUSH
25775: LD_VAR 0 1
25779: PPUSH
25780: CALL_OW 74
25784: PPUSH
25785: CALL_OW 115
// until IsDead ( un ) ;
25789: LD_VAR 0 1
25793: PPUSH
25794: CALL_OW 301
25798: IFFALSE 25746
// end ;
25800: PPOPN 1
25802: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25803: LD_EXP 55
25807: PUSH
25808: LD_EXP 95
25812: AND
25813: IFFALSE 25825
25815: GO 25817
25817: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25818: LD_STRING earthquake(getX(game), 0, 32)
25820: PPUSH
25821: CALL_OW 559
25825: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25826: LD_EXP 55
25830: PUSH
25831: LD_EXP 96
25835: AND
25836: IFFALSE 25927
25838: GO 25840
25840: DISABLE
25841: LD_INT 0
25843: PPUSH
// begin enable ;
25844: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25845: LD_ADDR_VAR 0 1
25849: PUSH
25850: LD_INT 22
25852: PUSH
25853: LD_OWVAR 2
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 21
25864: PUSH
25865: LD_INT 2
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 33
25874: PUSH
25875: LD_INT 3
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: LIST
25886: PPUSH
25887: CALL_OW 69
25891: ST_TO_ADDR
// if not tmp then
25892: LD_VAR 0 1
25896: NOT
25897: IFFALSE 25901
// exit ;
25899: GO 25927
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25901: LD_VAR 0 1
25905: PUSH
25906: LD_INT 1
25908: PPUSH
25909: LD_VAR 0 1
25913: PPUSH
25914: CALL_OW 12
25918: ARRAY
25919: PPUSH
25920: LD_INT 1
25922: PPUSH
25923: CALL_OW 234
// end ;
25927: PPOPN 1
25929: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25930: LD_EXP 55
25934: PUSH
25935: LD_EXP 97
25939: AND
25940: IFFALSE 26081
25942: GO 25944
25944: DISABLE
25945: LD_INT 0
25947: PPUSH
25948: PPUSH
25949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25950: LD_ADDR_VAR 0 3
25954: PUSH
25955: LD_INT 22
25957: PUSH
25958: LD_OWVAR 2
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: LD_INT 25
25969: PUSH
25970: LD_INT 1
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PPUSH
25981: CALL_OW 69
25985: ST_TO_ADDR
// if not tmp then
25986: LD_VAR 0 3
25990: NOT
25991: IFFALSE 25995
// exit ;
25993: GO 26081
// un := tmp [ rand ( 1 , tmp ) ] ;
25995: LD_ADDR_VAR 0 2
25999: PUSH
26000: LD_VAR 0 3
26004: PUSH
26005: LD_INT 1
26007: PPUSH
26008: LD_VAR 0 3
26012: PPUSH
26013: CALL_OW 12
26017: ARRAY
26018: ST_TO_ADDR
// if Crawls ( un ) then
26019: LD_VAR 0 2
26023: PPUSH
26024: CALL_OW 318
26028: IFFALSE 26039
// ComWalk ( un ) ;
26030: LD_VAR 0 2
26034: PPUSH
26035: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26039: LD_VAR 0 2
26043: PPUSH
26044: LD_INT 9
26046: PPUSH
26047: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26051: LD_INT 28
26053: PPUSH
26054: LD_OWVAR 2
26058: PPUSH
26059: LD_INT 2
26061: PPUSH
26062: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26066: LD_INT 29
26068: PPUSH
26069: LD_OWVAR 2
26073: PPUSH
26074: LD_INT 2
26076: PPUSH
26077: CALL_OW 322
// end ;
26081: PPOPN 3
26083: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26084: LD_EXP 55
26088: PUSH
26089: LD_EXP 98
26093: AND
26094: IFFALSE 26205
26096: GO 26098
26098: DISABLE
26099: LD_INT 0
26101: PPUSH
26102: PPUSH
26103: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26104: LD_ADDR_VAR 0 3
26108: PUSH
26109: LD_INT 22
26111: PUSH
26112: LD_OWVAR 2
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 25
26123: PUSH
26124: LD_INT 1
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PPUSH
26135: CALL_OW 69
26139: ST_TO_ADDR
// if not tmp then
26140: LD_VAR 0 3
26144: NOT
26145: IFFALSE 26149
// exit ;
26147: GO 26205
// un := tmp [ rand ( 1 , tmp ) ] ;
26149: LD_ADDR_VAR 0 2
26153: PUSH
26154: LD_VAR 0 3
26158: PUSH
26159: LD_INT 1
26161: PPUSH
26162: LD_VAR 0 3
26166: PPUSH
26167: CALL_OW 12
26171: ARRAY
26172: ST_TO_ADDR
// if Crawls ( un ) then
26173: LD_VAR 0 2
26177: PPUSH
26178: CALL_OW 318
26182: IFFALSE 26193
// ComWalk ( un ) ;
26184: LD_VAR 0 2
26188: PPUSH
26189: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26193: LD_VAR 0 2
26197: PPUSH
26198: LD_INT 8
26200: PPUSH
26201: CALL_OW 336
// end ;
26205: PPOPN 3
26207: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26208: LD_EXP 55
26212: PUSH
26213: LD_EXP 99
26217: AND
26218: IFFALSE 26362
26220: GO 26222
26222: DISABLE
26223: LD_INT 0
26225: PPUSH
26226: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26227: LD_ADDR_VAR 0 2
26231: PUSH
26232: LD_INT 22
26234: PUSH
26235: LD_OWVAR 2
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 21
26246: PUSH
26247: LD_INT 2
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: LD_INT 2
26256: PUSH
26257: LD_INT 34
26259: PUSH
26260: LD_INT 12
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 34
26269: PUSH
26270: LD_INT 51
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 34
26279: PUSH
26280: LD_INT 32
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: LIST
26297: PPUSH
26298: CALL_OW 69
26302: ST_TO_ADDR
// if not tmp then
26303: LD_VAR 0 2
26307: NOT
26308: IFFALSE 26312
// exit ;
26310: GO 26362
// for i in tmp do
26312: LD_ADDR_VAR 0 1
26316: PUSH
26317: LD_VAR 0 2
26321: PUSH
26322: FOR_IN
26323: IFFALSE 26360
// if GetCargo ( i , mat_artifact ) = 0 then
26325: LD_VAR 0 1
26329: PPUSH
26330: LD_INT 4
26332: PPUSH
26333: CALL_OW 289
26337: PUSH
26338: LD_INT 0
26340: EQUAL
26341: IFFALSE 26358
// SetCargo ( i , mat_siberit , 100 ) ;
26343: LD_VAR 0 1
26347: PPUSH
26348: LD_INT 3
26350: PPUSH
26351: LD_INT 100
26353: PPUSH
26354: CALL_OW 290
26358: GO 26322
26360: POP
26361: POP
// end ;
26362: PPOPN 2
26364: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26365: LD_EXP 55
26369: PUSH
26370: LD_EXP 100
26374: AND
26375: IFFALSE 26558
26377: GO 26379
26379: DISABLE
26380: LD_INT 0
26382: PPUSH
26383: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26384: LD_ADDR_VAR 0 2
26388: PUSH
26389: LD_INT 22
26391: PUSH
26392: LD_OWVAR 2
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PPUSH
26401: CALL_OW 69
26405: ST_TO_ADDR
// if not tmp then
26406: LD_VAR 0 2
26410: NOT
26411: IFFALSE 26415
// exit ;
26413: GO 26558
// for i := 1 to 2 do
26415: LD_ADDR_VAR 0 1
26419: PUSH
26420: DOUBLE
26421: LD_INT 1
26423: DEC
26424: ST_TO_ADDR
26425: LD_INT 2
26427: PUSH
26428: FOR_TO
26429: IFFALSE 26556
// begin uc_side := your_side ;
26431: LD_ADDR_OWVAR 20
26435: PUSH
26436: LD_OWVAR 2
26440: ST_TO_ADDR
// uc_nation := nation_american ;
26441: LD_ADDR_OWVAR 21
26445: PUSH
26446: LD_INT 1
26448: ST_TO_ADDR
// vc_chassis := us_morphling ;
26449: LD_ADDR_OWVAR 37
26453: PUSH
26454: LD_INT 5
26456: ST_TO_ADDR
// vc_engine := engine_siberite ;
26457: LD_ADDR_OWVAR 39
26461: PUSH
26462: LD_INT 3
26464: ST_TO_ADDR
// vc_control := control_computer ;
26465: LD_ADDR_OWVAR 38
26469: PUSH
26470: LD_INT 3
26472: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26473: LD_ADDR_OWVAR 40
26477: PUSH
26478: LD_INT 10
26480: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26481: LD_VAR 0 2
26485: PUSH
26486: LD_INT 1
26488: ARRAY
26489: PPUSH
26490: CALL_OW 310
26494: NOT
26495: IFFALSE 26542
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26497: CALL_OW 45
26501: PPUSH
26502: LD_VAR 0 2
26506: PUSH
26507: LD_INT 1
26509: ARRAY
26510: PPUSH
26511: CALL_OW 250
26515: PPUSH
26516: LD_VAR 0 2
26520: PUSH
26521: LD_INT 1
26523: ARRAY
26524: PPUSH
26525: CALL_OW 251
26529: PPUSH
26530: LD_INT 12
26532: PPUSH
26533: LD_INT 1
26535: PPUSH
26536: CALL_OW 50
26540: GO 26554
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26542: CALL_OW 45
26546: PPUSH
26547: LD_INT 1
26549: PPUSH
26550: CALL_OW 51
// end ;
26554: GO 26428
26556: POP
26557: POP
// end ;
26558: PPOPN 2
26560: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26561: LD_EXP 55
26565: PUSH
26566: LD_EXP 101
26570: AND
26571: IFFALSE 26793
26573: GO 26575
26575: DISABLE
26576: LD_INT 0
26578: PPUSH
26579: PPUSH
26580: PPUSH
26581: PPUSH
26582: PPUSH
26583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26584: LD_ADDR_VAR 0 6
26588: PUSH
26589: LD_INT 22
26591: PUSH
26592: LD_OWVAR 2
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 21
26603: PUSH
26604: LD_INT 1
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 3
26613: PUSH
26614: LD_INT 23
26616: PUSH
26617: LD_INT 0
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: LIST
26632: PPUSH
26633: CALL_OW 69
26637: ST_TO_ADDR
// if not tmp then
26638: LD_VAR 0 6
26642: NOT
26643: IFFALSE 26647
// exit ;
26645: GO 26793
// s1 := rand ( 1 , 4 ) ;
26647: LD_ADDR_VAR 0 2
26651: PUSH
26652: LD_INT 1
26654: PPUSH
26655: LD_INT 4
26657: PPUSH
26658: CALL_OW 12
26662: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26663: LD_ADDR_VAR 0 4
26667: PUSH
26668: LD_VAR 0 6
26672: PUSH
26673: LD_INT 1
26675: ARRAY
26676: PPUSH
26677: LD_VAR 0 2
26681: PPUSH
26682: CALL_OW 259
26686: ST_TO_ADDR
// if s1 = 1 then
26687: LD_VAR 0 2
26691: PUSH
26692: LD_INT 1
26694: EQUAL
26695: IFFALSE 26715
// s2 := rand ( 2 , 4 ) else
26697: LD_ADDR_VAR 0 3
26701: PUSH
26702: LD_INT 2
26704: PPUSH
26705: LD_INT 4
26707: PPUSH
26708: CALL_OW 12
26712: ST_TO_ADDR
26713: GO 26723
// s2 := 1 ;
26715: LD_ADDR_VAR 0 3
26719: PUSH
26720: LD_INT 1
26722: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26723: LD_ADDR_VAR 0 5
26727: PUSH
26728: LD_VAR 0 6
26732: PUSH
26733: LD_INT 1
26735: ARRAY
26736: PPUSH
26737: LD_VAR 0 3
26741: PPUSH
26742: CALL_OW 259
26746: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26747: LD_VAR 0 6
26751: PUSH
26752: LD_INT 1
26754: ARRAY
26755: PPUSH
26756: LD_VAR 0 2
26760: PPUSH
26761: LD_VAR 0 5
26765: PPUSH
26766: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26770: LD_VAR 0 6
26774: PUSH
26775: LD_INT 1
26777: ARRAY
26778: PPUSH
26779: LD_VAR 0 3
26783: PPUSH
26784: LD_VAR 0 4
26788: PPUSH
26789: CALL_OW 237
// end ;
26793: PPOPN 6
26795: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26796: LD_EXP 55
26800: PUSH
26801: LD_EXP 102
26805: AND
26806: IFFALSE 26885
26808: GO 26810
26810: DISABLE
26811: LD_INT 0
26813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26814: LD_ADDR_VAR 0 1
26818: PUSH
26819: LD_INT 22
26821: PUSH
26822: LD_OWVAR 2
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 30
26833: PUSH
26834: LD_INT 3
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PPUSH
26845: CALL_OW 69
26849: ST_TO_ADDR
// if not tmp then
26850: LD_VAR 0 1
26854: NOT
26855: IFFALSE 26859
// exit ;
26857: GO 26885
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26859: LD_VAR 0 1
26863: PUSH
26864: LD_INT 1
26866: PPUSH
26867: LD_VAR 0 1
26871: PPUSH
26872: CALL_OW 12
26876: ARRAY
26877: PPUSH
26878: LD_INT 1
26880: PPUSH
26881: CALL_OW 234
// end ;
26885: PPOPN 1
26887: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26888: LD_EXP 55
26892: PUSH
26893: LD_EXP 103
26897: AND
26898: IFFALSE 27010
26900: GO 26902
26902: DISABLE
26903: LD_INT 0
26905: PPUSH
26906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26907: LD_ADDR_VAR 0 2
26911: PUSH
26912: LD_INT 22
26914: PUSH
26915: LD_OWVAR 2
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: LD_INT 2
26926: PUSH
26927: LD_INT 30
26929: PUSH
26930: LD_INT 27
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 30
26939: PUSH
26940: LD_INT 26
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 30
26949: PUSH
26950: LD_INT 28
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PPUSH
26967: CALL_OW 69
26971: ST_TO_ADDR
// if not tmp then
26972: LD_VAR 0 2
26976: NOT
26977: IFFALSE 26981
// exit ;
26979: GO 27010
// for i in tmp do
26981: LD_ADDR_VAR 0 1
26985: PUSH
26986: LD_VAR 0 2
26990: PUSH
26991: FOR_IN
26992: IFFALSE 27008
// SetLives ( i , 1 ) ;
26994: LD_VAR 0 1
26998: PPUSH
26999: LD_INT 1
27001: PPUSH
27002: CALL_OW 234
27006: GO 26991
27008: POP
27009: POP
// end ;
27010: PPOPN 2
27012: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27013: LD_EXP 55
27017: PUSH
27018: LD_EXP 104
27022: AND
27023: IFFALSE 27310
27025: GO 27027
27027: DISABLE
27028: LD_INT 0
27030: PPUSH
27031: PPUSH
27032: PPUSH
// begin i := rand ( 1 , 7 ) ;
27033: LD_ADDR_VAR 0 1
27037: PUSH
27038: LD_INT 1
27040: PPUSH
27041: LD_INT 7
27043: PPUSH
27044: CALL_OW 12
27048: ST_TO_ADDR
// case i of 1 :
27049: LD_VAR 0 1
27053: PUSH
27054: LD_INT 1
27056: DOUBLE
27057: EQUAL
27058: IFTRUE 27062
27060: GO 27072
27062: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27063: LD_STRING earthquake(getX(game), 0, 32)
27065: PPUSH
27066: CALL_OW 559
27070: GO 27310
27072: LD_INT 2
27074: DOUBLE
27075: EQUAL
27076: IFTRUE 27080
27078: GO 27094
27080: POP
// begin ToLua ( displayStucuk(); ) ;
27081: LD_STRING displayStucuk();
27083: PPUSH
27084: CALL_OW 559
// ResetFog ;
27088: CALL_OW 335
// end ; 3 :
27092: GO 27310
27094: LD_INT 3
27096: DOUBLE
27097: EQUAL
27098: IFTRUE 27102
27100: GO 27206
27102: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27103: LD_ADDR_VAR 0 2
27107: PUSH
27108: LD_INT 22
27110: PUSH
27111: LD_OWVAR 2
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 25
27122: PUSH
27123: LD_INT 1
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PPUSH
27134: CALL_OW 69
27138: ST_TO_ADDR
// if not tmp then
27139: LD_VAR 0 2
27143: NOT
27144: IFFALSE 27148
// exit ;
27146: GO 27310
// un := tmp [ rand ( 1 , tmp ) ] ;
27148: LD_ADDR_VAR 0 3
27152: PUSH
27153: LD_VAR 0 2
27157: PUSH
27158: LD_INT 1
27160: PPUSH
27161: LD_VAR 0 2
27165: PPUSH
27166: CALL_OW 12
27170: ARRAY
27171: ST_TO_ADDR
// if Crawls ( un ) then
27172: LD_VAR 0 3
27176: PPUSH
27177: CALL_OW 318
27181: IFFALSE 27192
// ComWalk ( un ) ;
27183: LD_VAR 0 3
27187: PPUSH
27188: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27192: LD_VAR 0 3
27196: PPUSH
27197: LD_INT 8
27199: PPUSH
27200: CALL_OW 336
// end ; 4 :
27204: GO 27310
27206: LD_INT 4
27208: DOUBLE
27209: EQUAL
27210: IFTRUE 27214
27212: GO 27288
27214: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27215: LD_ADDR_VAR 0 2
27219: PUSH
27220: LD_INT 22
27222: PUSH
27223: LD_OWVAR 2
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 30
27234: PUSH
27235: LD_INT 29
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PPUSH
27246: CALL_OW 69
27250: ST_TO_ADDR
// if not tmp then
27251: LD_VAR 0 2
27255: NOT
27256: IFFALSE 27260
// exit ;
27258: GO 27310
// CenterNowOnUnits ( tmp [ 1 ] ) ;
27260: LD_VAR 0 2
27264: PUSH
27265: LD_INT 1
27267: ARRAY
27268: PPUSH
27269: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
27273: LD_VAR 0 2
27277: PUSH
27278: LD_INT 1
27280: ARRAY
27281: PPUSH
27282: CALL_OW 65
// end ; 5 .. 7 :
27286: GO 27310
27288: LD_INT 5
27290: DOUBLE
27291: GREATEREQUAL
27292: IFFALSE 27300
27294: LD_INT 7
27296: DOUBLE
27297: LESSEQUAL
27298: IFTRUE 27302
27300: GO 27309
27302: POP
// StreamSibBomb ; end ;
27303: CALL 23547 0 0
27307: GO 27310
27309: POP
// end ;
27310: PPOPN 3
27312: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27313: LD_EXP 55
27317: PUSH
27318: LD_EXP 105
27322: AND
27323: IFFALSE 27479
27325: GO 27327
27327: DISABLE
27328: LD_INT 0
27330: PPUSH
27331: PPUSH
27332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27333: LD_ADDR_VAR 0 2
27337: PUSH
27338: LD_INT 81
27340: PUSH
27341: LD_OWVAR 2
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 2
27352: PUSH
27353: LD_INT 21
27355: PUSH
27356: LD_INT 1
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 21
27365: PUSH
27366: LD_INT 2
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: LIST
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PPUSH
27382: CALL_OW 69
27386: ST_TO_ADDR
// if not tmp then
27387: LD_VAR 0 2
27391: NOT
27392: IFFALSE 27396
// exit ;
27394: GO 27479
// p := 0 ;
27396: LD_ADDR_VAR 0 3
27400: PUSH
27401: LD_INT 0
27403: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27404: LD_INT 35
27406: PPUSH
27407: CALL_OW 67
// p := p + 1 ;
27411: LD_ADDR_VAR 0 3
27415: PUSH
27416: LD_VAR 0 3
27420: PUSH
27421: LD_INT 1
27423: PLUS
27424: ST_TO_ADDR
// for i in tmp do
27425: LD_ADDR_VAR 0 1
27429: PUSH
27430: LD_VAR 0 2
27434: PUSH
27435: FOR_IN
27436: IFFALSE 27467
// if GetLives ( i ) < 1000 then
27438: LD_VAR 0 1
27442: PPUSH
27443: CALL_OW 256
27447: PUSH
27448: LD_INT 1000
27450: LESS
27451: IFFALSE 27465
// SetLives ( i , 1000 ) ;
27453: LD_VAR 0 1
27457: PPUSH
27458: LD_INT 1000
27460: PPUSH
27461: CALL_OW 234
27465: GO 27435
27467: POP
27468: POP
// until p > 20 ;
27469: LD_VAR 0 3
27473: PUSH
27474: LD_INT 20
27476: GREATER
27477: IFFALSE 27404
// end ;
27479: PPOPN 3
27481: END
// every 0 0$1 trigger StreamModeActive and sTime do
27482: LD_EXP 55
27486: PUSH
27487: LD_EXP 106
27491: AND
27492: IFFALSE 27527
27494: GO 27496
27496: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27497: LD_INT 28
27499: PPUSH
27500: LD_OWVAR 2
27504: PPUSH
27505: LD_INT 2
27507: PPUSH
27508: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27512: LD_INT 30
27514: PPUSH
27515: LD_OWVAR 2
27519: PPUSH
27520: LD_INT 2
27522: PPUSH
27523: CALL_OW 322
// end ;
27527: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27528: LD_EXP 55
27532: PUSH
27533: LD_EXP 107
27537: AND
27538: IFFALSE 27659
27540: GO 27542
27542: DISABLE
27543: LD_INT 0
27545: PPUSH
27546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27547: LD_ADDR_VAR 0 2
27551: PUSH
27552: LD_INT 22
27554: PUSH
27555: LD_OWVAR 2
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 21
27566: PUSH
27567: LD_INT 1
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 3
27576: PUSH
27577: LD_INT 23
27579: PUSH
27580: LD_INT 0
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: LIST
27595: PPUSH
27596: CALL_OW 69
27600: ST_TO_ADDR
// if not tmp then
27601: LD_VAR 0 2
27605: NOT
27606: IFFALSE 27610
// exit ;
27608: GO 27659
// for i in tmp do
27610: LD_ADDR_VAR 0 1
27614: PUSH
27615: LD_VAR 0 2
27619: PUSH
27620: FOR_IN
27621: IFFALSE 27657
// begin if Crawls ( i ) then
27623: LD_VAR 0 1
27627: PPUSH
27628: CALL_OW 318
27632: IFFALSE 27643
// ComWalk ( i ) ;
27634: LD_VAR 0 1
27638: PPUSH
27639: CALL_OW 138
// SetClass ( i , 2 ) ;
27643: LD_VAR 0 1
27647: PPUSH
27648: LD_INT 2
27650: PPUSH
27651: CALL_OW 336
// end ;
27655: GO 27620
27657: POP
27658: POP
// end ;
27659: PPOPN 2
27661: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27662: LD_EXP 55
27666: PUSH
27667: LD_EXP 108
27671: AND
27672: IFFALSE 27960
27674: GO 27676
27676: DISABLE
27677: LD_INT 0
27679: PPUSH
27680: PPUSH
27681: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27682: LD_OWVAR 2
27686: PPUSH
27687: LD_INT 9
27689: PPUSH
27690: LD_INT 1
27692: PPUSH
27693: LD_INT 1
27695: PPUSH
27696: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27700: LD_INT 9
27702: PPUSH
27703: LD_OWVAR 2
27707: PPUSH
27708: CALL_OW 343
// uc_side := 9 ;
27712: LD_ADDR_OWVAR 20
27716: PUSH
27717: LD_INT 9
27719: ST_TO_ADDR
// uc_nation := 2 ;
27720: LD_ADDR_OWVAR 21
27724: PUSH
27725: LD_INT 2
27727: ST_TO_ADDR
// hc_name := Dark Warrior ;
27728: LD_ADDR_OWVAR 26
27732: PUSH
27733: LD_STRING Dark Warrior
27735: ST_TO_ADDR
// hc_gallery :=  ;
27736: LD_ADDR_OWVAR 33
27740: PUSH
27741: LD_STRING 
27743: ST_TO_ADDR
// hc_noskilllimit := true ;
27744: LD_ADDR_OWVAR 76
27748: PUSH
27749: LD_INT 1
27751: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27752: LD_ADDR_OWVAR 31
27756: PUSH
27757: LD_INT 30
27759: PUSH
27760: LD_INT 30
27762: PUSH
27763: LD_INT 30
27765: PUSH
27766: LD_INT 30
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: ST_TO_ADDR
// un := CreateHuman ;
27775: LD_ADDR_VAR 0 3
27779: PUSH
27780: CALL_OW 44
27784: ST_TO_ADDR
// hc_noskilllimit := false ;
27785: LD_ADDR_OWVAR 76
27789: PUSH
27790: LD_INT 0
27792: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27793: LD_VAR 0 3
27797: PPUSH
27798: LD_INT 1
27800: PPUSH
27801: CALL_OW 51
// ToLua ( playRanger() ) ;
27805: LD_STRING playRanger()
27807: PPUSH
27808: CALL_OW 559
// p := 0 ;
27812: LD_ADDR_VAR 0 2
27816: PUSH
27817: LD_INT 0
27819: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27820: LD_INT 35
27822: PPUSH
27823: CALL_OW 67
// p := p + 1 ;
27827: LD_ADDR_VAR 0 2
27831: PUSH
27832: LD_VAR 0 2
27836: PUSH
27837: LD_INT 1
27839: PLUS
27840: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27841: LD_VAR 0 3
27845: PPUSH
27846: CALL_OW 256
27850: PUSH
27851: LD_INT 1000
27853: LESS
27854: IFFALSE 27868
// SetLives ( un , 1000 ) ;
27856: LD_VAR 0 3
27860: PPUSH
27861: LD_INT 1000
27863: PPUSH
27864: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27868: LD_VAR 0 3
27872: PPUSH
27873: LD_INT 81
27875: PUSH
27876: LD_OWVAR 2
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 91
27887: PUSH
27888: LD_VAR 0 3
27892: PUSH
27893: LD_INT 30
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: LIST
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PPUSH
27905: CALL_OW 69
27909: PPUSH
27910: LD_VAR 0 3
27914: PPUSH
27915: CALL_OW 74
27919: PPUSH
27920: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27924: LD_VAR 0 2
27928: PUSH
27929: LD_INT 80
27931: GREATER
27932: PUSH
27933: LD_VAR 0 3
27937: PPUSH
27938: CALL_OW 301
27942: OR
27943: IFFALSE 27820
// if un then
27945: LD_VAR 0 3
27949: IFFALSE 27960
// RemoveUnit ( un ) ;
27951: LD_VAR 0 3
27955: PPUSH
27956: CALL_OW 64
// end ;
27960: PPOPN 3
27962: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27963: LD_EXP 109
27967: IFFALSE 28083
27969: GO 27971
27971: DISABLE
27972: LD_INT 0
27974: PPUSH
27975: PPUSH
27976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27977: LD_ADDR_VAR 0 2
27981: PUSH
27982: LD_INT 81
27984: PUSH
27985: LD_OWVAR 2
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: LD_INT 21
27996: PUSH
27997: LD_INT 1
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PPUSH
28008: CALL_OW 69
28012: ST_TO_ADDR
// ToLua ( playComputer() ) ;
28013: LD_STRING playComputer()
28015: PPUSH
28016: CALL_OW 559
// if not tmp then
28020: LD_VAR 0 2
28024: NOT
28025: IFFALSE 28029
// exit ;
28027: GO 28083
// for i in tmp do
28029: LD_ADDR_VAR 0 1
28033: PUSH
28034: LD_VAR 0 2
28038: PUSH
28039: FOR_IN
28040: IFFALSE 28081
// for j := 1 to 4 do
28042: LD_ADDR_VAR 0 3
28046: PUSH
28047: DOUBLE
28048: LD_INT 1
28050: DEC
28051: ST_TO_ADDR
28052: LD_INT 4
28054: PUSH
28055: FOR_TO
28056: IFFALSE 28077
// SetSkill ( i , j , 10 ) ;
28058: LD_VAR 0 1
28062: PPUSH
28063: LD_VAR 0 3
28067: PPUSH
28068: LD_INT 10
28070: PPUSH
28071: CALL_OW 237
28075: GO 28055
28077: POP
28078: POP
28079: GO 28039
28081: POP
28082: POP
// end ;
28083: PPOPN 3
28085: END
// every 0 0$1 trigger s30 do var i , tmp ;
28086: LD_EXP 110
28090: IFFALSE 28159
28092: GO 28094
28094: DISABLE
28095: LD_INT 0
28097: PPUSH
28098: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28099: LD_ADDR_VAR 0 2
28103: PUSH
28104: LD_INT 22
28106: PUSH
28107: LD_OWVAR 2
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PPUSH
28116: CALL_OW 69
28120: ST_TO_ADDR
// if not tmp then
28121: LD_VAR 0 2
28125: NOT
28126: IFFALSE 28130
// exit ;
28128: GO 28159
// for i in tmp do
28130: LD_ADDR_VAR 0 1
28134: PUSH
28135: LD_VAR 0 2
28139: PUSH
28140: FOR_IN
28141: IFFALSE 28157
// SetLives ( i , 300 ) ;
28143: LD_VAR 0 1
28147: PPUSH
28148: LD_INT 300
28150: PPUSH
28151: CALL_OW 234
28155: GO 28140
28157: POP
28158: POP
// end ;
28159: PPOPN 2
28161: END
// every 0 0$1 trigger s60 do var i , tmp ;
28162: LD_EXP 111
28166: IFFALSE 28235
28168: GO 28170
28170: DISABLE
28171: LD_INT 0
28173: PPUSH
28174: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28175: LD_ADDR_VAR 0 2
28179: PUSH
28180: LD_INT 22
28182: PUSH
28183: LD_OWVAR 2
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PPUSH
28192: CALL_OW 69
28196: ST_TO_ADDR
// if not tmp then
28197: LD_VAR 0 2
28201: NOT
28202: IFFALSE 28206
// exit ;
28204: GO 28235
// for i in tmp do
28206: LD_ADDR_VAR 0 1
28210: PUSH
28211: LD_VAR 0 2
28215: PUSH
28216: FOR_IN
28217: IFFALSE 28233
// SetLives ( i , 600 ) ;
28219: LD_VAR 0 1
28223: PPUSH
28224: LD_INT 600
28226: PPUSH
28227: CALL_OW 234
28231: GO 28216
28233: POP
28234: POP
// end ;
28235: PPOPN 2
28237: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28238: LD_INT 0
28240: PPUSH
// case cmd of 301 :
28241: LD_VAR 0 1
28245: PUSH
28246: LD_INT 301
28248: DOUBLE
28249: EQUAL
28250: IFTRUE 28254
28252: GO 28286
28254: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28255: LD_VAR 0 6
28259: PPUSH
28260: LD_VAR 0 7
28264: PPUSH
28265: LD_VAR 0 8
28269: PPUSH
28270: LD_VAR 0 4
28274: PPUSH
28275: LD_VAR 0 5
28279: PPUSH
28280: CALL 29487 0 5
28284: GO 28407
28286: LD_INT 302
28288: DOUBLE
28289: EQUAL
28290: IFTRUE 28294
28292: GO 28331
28294: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28295: LD_VAR 0 6
28299: PPUSH
28300: LD_VAR 0 7
28304: PPUSH
28305: LD_VAR 0 8
28309: PPUSH
28310: LD_VAR 0 9
28314: PPUSH
28315: LD_VAR 0 4
28319: PPUSH
28320: LD_VAR 0 5
28324: PPUSH
28325: CALL 29578 0 6
28329: GO 28407
28331: LD_INT 303
28333: DOUBLE
28334: EQUAL
28335: IFTRUE 28339
28337: GO 28376
28339: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28340: LD_VAR 0 6
28344: PPUSH
28345: LD_VAR 0 7
28349: PPUSH
28350: LD_VAR 0 8
28354: PPUSH
28355: LD_VAR 0 9
28359: PPUSH
28360: LD_VAR 0 4
28364: PPUSH
28365: LD_VAR 0 5
28369: PPUSH
28370: CALL 28412 0 6
28374: GO 28407
28376: LD_INT 304
28378: DOUBLE
28379: EQUAL
28380: IFTRUE 28384
28382: GO 28406
28384: POP
// hHackTeleport ( unit , x , y ) ; end ;
28385: LD_VAR 0 2
28389: PPUSH
28390: LD_VAR 0 4
28394: PPUSH
28395: LD_VAR 0 5
28399: PPUSH
28400: CALL 30171 0 3
28404: GO 28407
28406: POP
// end ;
28407: LD_VAR 0 12
28411: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28412: LD_INT 0
28414: PPUSH
28415: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28416: LD_VAR 0 1
28420: PUSH
28421: LD_INT 1
28423: LESS
28424: PUSH
28425: LD_VAR 0 1
28429: PUSH
28430: LD_INT 3
28432: GREATER
28433: OR
28434: PUSH
28435: LD_VAR 0 5
28439: PPUSH
28440: LD_VAR 0 6
28444: PPUSH
28445: CALL_OW 428
28449: OR
28450: IFFALSE 28454
// exit ;
28452: GO 29174
// uc_side := your_side ;
28454: LD_ADDR_OWVAR 20
28458: PUSH
28459: LD_OWVAR 2
28463: ST_TO_ADDR
// uc_nation := nation ;
28464: LD_ADDR_OWVAR 21
28468: PUSH
28469: LD_VAR 0 1
28473: ST_TO_ADDR
// bc_level = 1 ;
28474: LD_ADDR_OWVAR 43
28478: PUSH
28479: LD_INT 1
28481: ST_TO_ADDR
// case btype of 1 :
28482: LD_VAR 0 2
28486: PUSH
28487: LD_INT 1
28489: DOUBLE
28490: EQUAL
28491: IFTRUE 28495
28493: GO 28506
28495: POP
// bc_type := b_depot ; 2 :
28496: LD_ADDR_OWVAR 42
28500: PUSH
28501: LD_INT 0
28503: ST_TO_ADDR
28504: GO 29118
28506: LD_INT 2
28508: DOUBLE
28509: EQUAL
28510: IFTRUE 28514
28512: GO 28525
28514: POP
// bc_type := b_warehouse ; 3 :
28515: LD_ADDR_OWVAR 42
28519: PUSH
28520: LD_INT 1
28522: ST_TO_ADDR
28523: GO 29118
28525: LD_INT 3
28527: DOUBLE
28528: EQUAL
28529: IFTRUE 28533
28531: GO 28544
28533: POP
// bc_type := b_lab ; 4 .. 9 :
28534: LD_ADDR_OWVAR 42
28538: PUSH
28539: LD_INT 6
28541: ST_TO_ADDR
28542: GO 29118
28544: LD_INT 4
28546: DOUBLE
28547: GREATEREQUAL
28548: IFFALSE 28556
28550: LD_INT 9
28552: DOUBLE
28553: LESSEQUAL
28554: IFTRUE 28558
28556: GO 28610
28558: POP
// begin bc_type := b_lab_half ;
28559: LD_ADDR_OWVAR 42
28563: PUSH
28564: LD_INT 7
28566: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28567: LD_ADDR_OWVAR 44
28571: PUSH
28572: LD_INT 10
28574: PUSH
28575: LD_INT 11
28577: PUSH
28578: LD_INT 12
28580: PUSH
28581: LD_INT 15
28583: PUSH
28584: LD_INT 14
28586: PUSH
28587: LD_INT 13
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: PUSH
28598: LD_VAR 0 2
28602: PUSH
28603: LD_INT 3
28605: MINUS
28606: ARRAY
28607: ST_TO_ADDR
// end ; 10 .. 13 :
28608: GO 29118
28610: LD_INT 10
28612: DOUBLE
28613: GREATEREQUAL
28614: IFFALSE 28622
28616: LD_INT 13
28618: DOUBLE
28619: LESSEQUAL
28620: IFTRUE 28624
28622: GO 28701
28624: POP
// begin bc_type := b_lab_full ;
28625: LD_ADDR_OWVAR 42
28629: PUSH
28630: LD_INT 8
28632: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28633: LD_ADDR_OWVAR 44
28637: PUSH
28638: LD_INT 10
28640: PUSH
28641: LD_INT 12
28643: PUSH
28644: LD_INT 14
28646: PUSH
28647: LD_INT 13
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: PUSH
28656: LD_VAR 0 2
28660: PUSH
28661: LD_INT 9
28663: MINUS
28664: ARRAY
28665: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28666: LD_ADDR_OWVAR 45
28670: PUSH
28671: LD_INT 11
28673: PUSH
28674: LD_INT 15
28676: PUSH
28677: LD_INT 12
28679: PUSH
28680: LD_INT 15
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: PUSH
28689: LD_VAR 0 2
28693: PUSH
28694: LD_INT 9
28696: MINUS
28697: ARRAY
28698: ST_TO_ADDR
// end ; 14 :
28699: GO 29118
28701: LD_INT 14
28703: DOUBLE
28704: EQUAL
28705: IFTRUE 28709
28707: GO 28720
28709: POP
// bc_type := b_workshop ; 15 :
28710: LD_ADDR_OWVAR 42
28714: PUSH
28715: LD_INT 2
28717: ST_TO_ADDR
28718: GO 29118
28720: LD_INT 15
28722: DOUBLE
28723: EQUAL
28724: IFTRUE 28728
28726: GO 28739
28728: POP
// bc_type := b_factory ; 16 :
28729: LD_ADDR_OWVAR 42
28733: PUSH
28734: LD_INT 3
28736: ST_TO_ADDR
28737: GO 29118
28739: LD_INT 16
28741: DOUBLE
28742: EQUAL
28743: IFTRUE 28747
28745: GO 28758
28747: POP
// bc_type := b_ext_gun ; 17 :
28748: LD_ADDR_OWVAR 42
28752: PUSH
28753: LD_INT 17
28755: ST_TO_ADDR
28756: GO 29118
28758: LD_INT 17
28760: DOUBLE
28761: EQUAL
28762: IFTRUE 28766
28764: GO 28794
28766: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28767: LD_ADDR_OWVAR 42
28771: PUSH
28772: LD_INT 19
28774: PUSH
28775: LD_INT 23
28777: PUSH
28778: LD_INT 19
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: LIST
28785: PUSH
28786: LD_VAR 0 1
28790: ARRAY
28791: ST_TO_ADDR
28792: GO 29118
28794: LD_INT 18
28796: DOUBLE
28797: EQUAL
28798: IFTRUE 28802
28800: GO 28813
28802: POP
// bc_type := b_ext_radar ; 19 :
28803: LD_ADDR_OWVAR 42
28807: PUSH
28808: LD_INT 20
28810: ST_TO_ADDR
28811: GO 29118
28813: LD_INT 19
28815: DOUBLE
28816: EQUAL
28817: IFTRUE 28821
28819: GO 28832
28821: POP
// bc_type := b_ext_radio ; 20 :
28822: LD_ADDR_OWVAR 42
28826: PUSH
28827: LD_INT 22
28829: ST_TO_ADDR
28830: GO 29118
28832: LD_INT 20
28834: DOUBLE
28835: EQUAL
28836: IFTRUE 28840
28838: GO 28851
28840: POP
// bc_type := b_ext_siberium ; 21 :
28841: LD_ADDR_OWVAR 42
28845: PUSH
28846: LD_INT 21
28848: ST_TO_ADDR
28849: GO 29118
28851: LD_INT 21
28853: DOUBLE
28854: EQUAL
28855: IFTRUE 28859
28857: GO 28870
28859: POP
// bc_type := b_ext_computer ; 22 :
28860: LD_ADDR_OWVAR 42
28864: PUSH
28865: LD_INT 24
28867: ST_TO_ADDR
28868: GO 29118
28870: LD_INT 22
28872: DOUBLE
28873: EQUAL
28874: IFTRUE 28878
28876: GO 28889
28878: POP
// bc_type := b_ext_track ; 23 :
28879: LD_ADDR_OWVAR 42
28883: PUSH
28884: LD_INT 16
28886: ST_TO_ADDR
28887: GO 29118
28889: LD_INT 23
28891: DOUBLE
28892: EQUAL
28893: IFTRUE 28897
28895: GO 28908
28897: POP
// bc_type := b_ext_laser ; 24 :
28898: LD_ADDR_OWVAR 42
28902: PUSH
28903: LD_INT 25
28905: ST_TO_ADDR
28906: GO 29118
28908: LD_INT 24
28910: DOUBLE
28911: EQUAL
28912: IFTRUE 28916
28914: GO 28927
28916: POP
// bc_type := b_control_tower ; 25 :
28917: LD_ADDR_OWVAR 42
28921: PUSH
28922: LD_INT 36
28924: ST_TO_ADDR
28925: GO 29118
28927: LD_INT 25
28929: DOUBLE
28930: EQUAL
28931: IFTRUE 28935
28933: GO 28946
28935: POP
// bc_type := b_breastwork ; 26 :
28936: LD_ADDR_OWVAR 42
28940: PUSH
28941: LD_INT 31
28943: ST_TO_ADDR
28944: GO 29118
28946: LD_INT 26
28948: DOUBLE
28949: EQUAL
28950: IFTRUE 28954
28952: GO 28965
28954: POP
// bc_type := b_bunker ; 27 :
28955: LD_ADDR_OWVAR 42
28959: PUSH
28960: LD_INT 32
28962: ST_TO_ADDR
28963: GO 29118
28965: LD_INT 27
28967: DOUBLE
28968: EQUAL
28969: IFTRUE 28973
28971: GO 28984
28973: POP
// bc_type := b_turret ; 28 :
28974: LD_ADDR_OWVAR 42
28978: PUSH
28979: LD_INT 33
28981: ST_TO_ADDR
28982: GO 29118
28984: LD_INT 28
28986: DOUBLE
28987: EQUAL
28988: IFTRUE 28992
28990: GO 29003
28992: POP
// bc_type := b_armoury ; 29 :
28993: LD_ADDR_OWVAR 42
28997: PUSH
28998: LD_INT 4
29000: ST_TO_ADDR
29001: GO 29118
29003: LD_INT 29
29005: DOUBLE
29006: EQUAL
29007: IFTRUE 29011
29009: GO 29022
29011: POP
// bc_type := b_barracks ; 30 :
29012: LD_ADDR_OWVAR 42
29016: PUSH
29017: LD_INT 5
29019: ST_TO_ADDR
29020: GO 29118
29022: LD_INT 30
29024: DOUBLE
29025: EQUAL
29026: IFTRUE 29030
29028: GO 29041
29030: POP
// bc_type := b_solar_power ; 31 :
29031: LD_ADDR_OWVAR 42
29035: PUSH
29036: LD_INT 27
29038: ST_TO_ADDR
29039: GO 29118
29041: LD_INT 31
29043: DOUBLE
29044: EQUAL
29045: IFTRUE 29049
29047: GO 29060
29049: POP
// bc_type := b_oil_power ; 32 :
29050: LD_ADDR_OWVAR 42
29054: PUSH
29055: LD_INT 26
29057: ST_TO_ADDR
29058: GO 29118
29060: LD_INT 32
29062: DOUBLE
29063: EQUAL
29064: IFTRUE 29068
29066: GO 29079
29068: POP
// bc_type := b_siberite_power ; 33 :
29069: LD_ADDR_OWVAR 42
29073: PUSH
29074: LD_INT 28
29076: ST_TO_ADDR
29077: GO 29118
29079: LD_INT 33
29081: DOUBLE
29082: EQUAL
29083: IFTRUE 29087
29085: GO 29098
29087: POP
// bc_type := b_oil_mine ; 34 :
29088: LD_ADDR_OWVAR 42
29092: PUSH
29093: LD_INT 29
29095: ST_TO_ADDR
29096: GO 29118
29098: LD_INT 34
29100: DOUBLE
29101: EQUAL
29102: IFTRUE 29106
29104: GO 29117
29106: POP
// bc_type := b_siberite_mine ; end ;
29107: LD_ADDR_OWVAR 42
29111: PUSH
29112: LD_INT 30
29114: ST_TO_ADDR
29115: GO 29118
29117: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29118: LD_ADDR_VAR 0 8
29122: PUSH
29123: LD_VAR 0 5
29127: PPUSH
29128: LD_VAR 0 6
29132: PPUSH
29133: LD_VAR 0 3
29137: PPUSH
29138: CALL_OW 47
29142: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29143: LD_OWVAR 42
29147: PUSH
29148: LD_INT 32
29150: PUSH
29151: LD_INT 33
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: IN
29158: IFFALSE 29174
// PlaceWeaponTurret ( b , weapon ) ;
29160: LD_VAR 0 8
29164: PPUSH
29165: LD_VAR 0 4
29169: PPUSH
29170: CALL_OW 431
// end ;
29174: LD_VAR 0 7
29178: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29179: LD_INT 0
29181: PPUSH
29182: PPUSH
29183: PPUSH
29184: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29185: LD_ADDR_VAR 0 4
29189: PUSH
29190: LD_INT 22
29192: PUSH
29193: LD_OWVAR 2
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 2
29204: PUSH
29205: LD_INT 30
29207: PUSH
29208: LD_INT 0
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 30
29217: PUSH
29218: LD_INT 1
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: LIST
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PPUSH
29234: CALL_OW 69
29238: ST_TO_ADDR
// if not tmp then
29239: LD_VAR 0 4
29243: NOT
29244: IFFALSE 29248
// exit ;
29246: GO 29307
// for i in tmp do
29248: LD_ADDR_VAR 0 2
29252: PUSH
29253: LD_VAR 0 4
29257: PUSH
29258: FOR_IN
29259: IFFALSE 29305
// for j = 1 to 3 do
29261: LD_ADDR_VAR 0 3
29265: PUSH
29266: DOUBLE
29267: LD_INT 1
29269: DEC
29270: ST_TO_ADDR
29271: LD_INT 3
29273: PUSH
29274: FOR_TO
29275: IFFALSE 29301
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29277: LD_VAR 0 2
29281: PPUSH
29282: CALL_OW 274
29286: PPUSH
29287: LD_VAR 0 3
29291: PPUSH
29292: LD_INT 99999
29294: PPUSH
29295: CALL_OW 277
29299: GO 29274
29301: POP
29302: POP
29303: GO 29258
29305: POP
29306: POP
// end ;
29307: LD_VAR 0 1
29311: RET
// export function hHackSetLevel10 ; var i , j ; begin
29312: LD_INT 0
29314: PPUSH
29315: PPUSH
29316: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29317: LD_ADDR_VAR 0 2
29321: PUSH
29322: LD_INT 21
29324: PUSH
29325: LD_INT 1
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PPUSH
29332: CALL_OW 69
29336: PUSH
29337: FOR_IN
29338: IFFALSE 29390
// if IsSelected ( i ) then
29340: LD_VAR 0 2
29344: PPUSH
29345: CALL_OW 306
29349: IFFALSE 29388
// begin for j := 1 to 4 do
29351: LD_ADDR_VAR 0 3
29355: PUSH
29356: DOUBLE
29357: LD_INT 1
29359: DEC
29360: ST_TO_ADDR
29361: LD_INT 4
29363: PUSH
29364: FOR_TO
29365: IFFALSE 29386
// SetSkill ( i , j , 10 ) ;
29367: LD_VAR 0 2
29371: PPUSH
29372: LD_VAR 0 3
29376: PPUSH
29377: LD_INT 10
29379: PPUSH
29380: CALL_OW 237
29384: GO 29364
29386: POP
29387: POP
// end ;
29388: GO 29337
29390: POP
29391: POP
// end ;
29392: LD_VAR 0 1
29396: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29397: LD_INT 0
29399: PPUSH
29400: PPUSH
29401: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29402: LD_ADDR_VAR 0 2
29406: PUSH
29407: LD_INT 22
29409: PUSH
29410: LD_OWVAR 2
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 21
29421: PUSH
29422: LD_INT 1
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PPUSH
29433: CALL_OW 69
29437: PUSH
29438: FOR_IN
29439: IFFALSE 29480
// begin for j := 1 to 4 do
29441: LD_ADDR_VAR 0 3
29445: PUSH
29446: DOUBLE
29447: LD_INT 1
29449: DEC
29450: ST_TO_ADDR
29451: LD_INT 4
29453: PUSH
29454: FOR_TO
29455: IFFALSE 29476
// SetSkill ( i , j , 10 ) ;
29457: LD_VAR 0 2
29461: PPUSH
29462: LD_VAR 0 3
29466: PPUSH
29467: LD_INT 10
29469: PPUSH
29470: CALL_OW 237
29474: GO 29454
29476: POP
29477: POP
// end ;
29478: GO 29438
29480: POP
29481: POP
// end ;
29482: LD_VAR 0 1
29486: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29487: LD_INT 0
29489: PPUSH
// uc_side := your_side ;
29490: LD_ADDR_OWVAR 20
29494: PUSH
29495: LD_OWVAR 2
29499: ST_TO_ADDR
// uc_nation := nation ;
29500: LD_ADDR_OWVAR 21
29504: PUSH
29505: LD_VAR 0 1
29509: ST_TO_ADDR
// InitHc ;
29510: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29514: LD_INT 0
29516: PPUSH
29517: LD_VAR 0 2
29521: PPUSH
29522: LD_VAR 0 3
29526: PPUSH
29527: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29531: LD_VAR 0 4
29535: PPUSH
29536: LD_VAR 0 5
29540: PPUSH
29541: CALL_OW 428
29545: PUSH
29546: LD_INT 0
29548: EQUAL
29549: IFFALSE 29573
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29551: CALL_OW 44
29555: PPUSH
29556: LD_VAR 0 4
29560: PPUSH
29561: LD_VAR 0 5
29565: PPUSH
29566: LD_INT 1
29568: PPUSH
29569: CALL_OW 48
// end ;
29573: LD_VAR 0 6
29577: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29578: LD_INT 0
29580: PPUSH
29581: PPUSH
// uc_side := your_side ;
29582: LD_ADDR_OWVAR 20
29586: PUSH
29587: LD_OWVAR 2
29591: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29592: LD_VAR 0 1
29596: PUSH
29597: LD_INT 1
29599: PUSH
29600: LD_INT 2
29602: PUSH
29603: LD_INT 3
29605: PUSH
29606: LD_INT 4
29608: PUSH
29609: LD_INT 5
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: IN
29619: IFFALSE 29631
// uc_nation := nation_american else
29621: LD_ADDR_OWVAR 21
29625: PUSH
29626: LD_INT 1
29628: ST_TO_ADDR
29629: GO 29674
// if chassis in [ 11 , 12 , 13 , 14 ] then
29631: LD_VAR 0 1
29635: PUSH
29636: LD_INT 11
29638: PUSH
29639: LD_INT 12
29641: PUSH
29642: LD_INT 13
29644: PUSH
29645: LD_INT 14
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: IN
29654: IFFALSE 29666
// uc_nation := nation_arabian else
29656: LD_ADDR_OWVAR 21
29660: PUSH
29661: LD_INT 2
29663: ST_TO_ADDR
29664: GO 29674
// uc_nation := nation_russian ;
29666: LD_ADDR_OWVAR 21
29670: PUSH
29671: LD_INT 3
29673: ST_TO_ADDR
// vc_chassis := chassis ;
29674: LD_ADDR_OWVAR 37
29678: PUSH
29679: LD_VAR 0 1
29683: ST_TO_ADDR
// vc_engine := engine ;
29684: LD_ADDR_OWVAR 39
29688: PUSH
29689: LD_VAR 0 2
29693: ST_TO_ADDR
// vc_control := control ;
29694: LD_ADDR_OWVAR 38
29698: PUSH
29699: LD_VAR 0 3
29703: ST_TO_ADDR
// vc_weapon := weapon ;
29704: LD_ADDR_OWVAR 40
29708: PUSH
29709: LD_VAR 0 4
29713: ST_TO_ADDR
// un := CreateVehicle ;
29714: LD_ADDR_VAR 0 8
29718: PUSH
29719: CALL_OW 45
29723: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29724: LD_VAR 0 8
29728: PPUSH
29729: LD_INT 0
29731: PPUSH
29732: LD_INT 5
29734: PPUSH
29735: CALL_OW 12
29739: PPUSH
29740: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29744: LD_VAR 0 8
29748: PPUSH
29749: LD_VAR 0 5
29753: PPUSH
29754: LD_VAR 0 6
29758: PPUSH
29759: LD_INT 1
29761: PPUSH
29762: CALL_OW 48
// end ;
29766: LD_VAR 0 7
29770: RET
// export hInvincible ; every 1 do
29771: GO 29773
29773: DISABLE
// hInvincible := [ ] ;
29774: LD_ADDR_EXP 112
29778: PUSH
29779: EMPTY
29780: ST_TO_ADDR
29781: END
// every 10 do var i ;
29782: GO 29784
29784: DISABLE
29785: LD_INT 0
29787: PPUSH
// begin enable ;
29788: ENABLE
// if not hInvincible then
29789: LD_EXP 112
29793: NOT
29794: IFFALSE 29798
// exit ;
29796: GO 29842
// for i in hInvincible do
29798: LD_ADDR_VAR 0 1
29802: PUSH
29803: LD_EXP 112
29807: PUSH
29808: FOR_IN
29809: IFFALSE 29840
// if GetLives ( i ) < 1000 then
29811: LD_VAR 0 1
29815: PPUSH
29816: CALL_OW 256
29820: PUSH
29821: LD_INT 1000
29823: LESS
29824: IFFALSE 29838
// SetLives ( i , 1000 ) ;
29826: LD_VAR 0 1
29830: PPUSH
29831: LD_INT 1000
29833: PPUSH
29834: CALL_OW 234
29838: GO 29808
29840: POP
29841: POP
// end ;
29842: PPOPN 1
29844: END
// export function hHackInvincible ; var i ; begin
29845: LD_INT 0
29847: PPUSH
29848: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29849: LD_ADDR_VAR 0 2
29853: PUSH
29854: LD_INT 2
29856: PUSH
29857: LD_INT 21
29859: PUSH
29860: LD_INT 1
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 21
29869: PUSH
29870: LD_INT 2
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: LIST
29881: PPUSH
29882: CALL_OW 69
29886: PUSH
29887: FOR_IN
29888: IFFALSE 29949
// if IsSelected ( i ) then
29890: LD_VAR 0 2
29894: PPUSH
29895: CALL_OW 306
29899: IFFALSE 29947
// begin if i in hInvincible then
29901: LD_VAR 0 2
29905: PUSH
29906: LD_EXP 112
29910: IN
29911: IFFALSE 29931
// hInvincible := hInvincible diff i else
29913: LD_ADDR_EXP 112
29917: PUSH
29918: LD_EXP 112
29922: PUSH
29923: LD_VAR 0 2
29927: DIFF
29928: ST_TO_ADDR
29929: GO 29947
// hInvincible := hInvincible union i ;
29931: LD_ADDR_EXP 112
29935: PUSH
29936: LD_EXP 112
29940: PUSH
29941: LD_VAR 0 2
29945: UNION
29946: ST_TO_ADDR
// end ;
29947: GO 29887
29949: POP
29950: POP
// end ;
29951: LD_VAR 0 1
29955: RET
// export function hHackInvisible ; var i , j ; begin
29956: LD_INT 0
29958: PPUSH
29959: PPUSH
29960: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29961: LD_ADDR_VAR 0 2
29965: PUSH
29966: LD_INT 21
29968: PUSH
29969: LD_INT 1
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PPUSH
29976: CALL_OW 69
29980: PUSH
29981: FOR_IN
29982: IFFALSE 30006
// if IsSelected ( i ) then
29984: LD_VAR 0 2
29988: PPUSH
29989: CALL_OW 306
29993: IFFALSE 30004
// ComForceInvisible ( i ) ;
29995: LD_VAR 0 2
29999: PPUSH
30000: CALL_OW 496
30004: GO 29981
30006: POP
30007: POP
// end ;
30008: LD_VAR 0 1
30012: RET
// export function hHackChangeYourSide ; begin
30013: LD_INT 0
30015: PPUSH
// if your_side = 8 then
30016: LD_OWVAR 2
30020: PUSH
30021: LD_INT 8
30023: EQUAL
30024: IFFALSE 30036
// your_side := 0 else
30026: LD_ADDR_OWVAR 2
30030: PUSH
30031: LD_INT 0
30033: ST_TO_ADDR
30034: GO 30050
// your_side := your_side + 1 ;
30036: LD_ADDR_OWVAR 2
30040: PUSH
30041: LD_OWVAR 2
30045: PUSH
30046: LD_INT 1
30048: PLUS
30049: ST_TO_ADDR
// end ;
30050: LD_VAR 0 1
30054: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30055: LD_INT 0
30057: PPUSH
30058: PPUSH
30059: PPUSH
// for i in all_units do
30060: LD_ADDR_VAR 0 2
30064: PUSH
30065: LD_OWVAR 3
30069: PUSH
30070: FOR_IN
30071: IFFALSE 30149
// if IsSelected ( i ) then
30073: LD_VAR 0 2
30077: PPUSH
30078: CALL_OW 306
30082: IFFALSE 30147
// begin j := GetSide ( i ) ;
30084: LD_ADDR_VAR 0 3
30088: PUSH
30089: LD_VAR 0 2
30093: PPUSH
30094: CALL_OW 255
30098: ST_TO_ADDR
// if j = 8 then
30099: LD_VAR 0 3
30103: PUSH
30104: LD_INT 8
30106: EQUAL
30107: IFFALSE 30119
// j := 0 else
30109: LD_ADDR_VAR 0 3
30113: PUSH
30114: LD_INT 0
30116: ST_TO_ADDR
30117: GO 30133
// j := j + 1 ;
30119: LD_ADDR_VAR 0 3
30123: PUSH
30124: LD_VAR 0 3
30128: PUSH
30129: LD_INT 1
30131: PLUS
30132: ST_TO_ADDR
// SetSide ( i , j ) ;
30133: LD_VAR 0 2
30137: PPUSH
30138: LD_VAR 0 3
30142: PPUSH
30143: CALL_OW 235
// end ;
30147: GO 30070
30149: POP
30150: POP
// end ;
30151: LD_VAR 0 1
30155: RET
// export function hHackFog ; begin
30156: LD_INT 0
30158: PPUSH
// FogOff ( true ) ;
30159: LD_INT 1
30161: PPUSH
30162: CALL_OW 344
// end ;
30166: LD_VAR 0 1
30170: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30171: LD_INT 0
30173: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30174: LD_VAR 0 1
30178: PPUSH
30179: LD_VAR 0 2
30183: PPUSH
30184: LD_VAR 0 3
30188: PPUSH
30189: LD_INT 1
30191: PPUSH
30192: LD_INT 1
30194: PPUSH
30195: CALL_OW 483
// CenterOnXY ( x , y ) ;
30199: LD_VAR 0 2
30203: PPUSH
30204: LD_VAR 0 3
30208: PPUSH
30209: CALL_OW 84
// end ; end_of_file
30213: LD_VAR 0 4
30217: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
30218: LD_INT 0
30220: PPUSH
30221: PPUSH
30222: PPUSH
30223: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
30224: LD_VAR 0 1
30228: PPUSH
30229: CALL_OW 264
30233: PUSH
30234: LD_EXP 40
30238: EQUAL
30239: IFFALSE 30311
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
30241: LD_INT 68
30243: PPUSH
30244: LD_VAR 0 1
30248: PPUSH
30249: CALL_OW 255
30253: PPUSH
30254: CALL_OW 321
30258: PUSH
30259: LD_INT 2
30261: EQUAL
30262: IFFALSE 30274
// eff := 70 else
30264: LD_ADDR_VAR 0 4
30268: PUSH
30269: LD_INT 70
30271: ST_TO_ADDR
30272: GO 30282
// eff := 30 ;
30274: LD_ADDR_VAR 0 4
30278: PUSH
30279: LD_INT 30
30281: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
30282: LD_VAR 0 1
30286: PPUSH
30287: CALL_OW 250
30291: PPUSH
30292: LD_VAR 0 1
30296: PPUSH
30297: CALL_OW 251
30301: PPUSH
30302: LD_VAR 0 4
30306: PPUSH
30307: CALL_OW 495
// end ; end ;
30311: LD_VAR 0 2
30315: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
30316: LD_INT 0
30318: PPUSH
// end ;
30319: LD_VAR 0 4
30323: RET
// export function SOS_Command ( cmd ) ; begin
30324: LD_INT 0
30326: PPUSH
// end ;
30327: LD_VAR 0 2
30331: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
30332: LD_INT 0
30334: PPUSH
// end ;
30335: LD_VAR 0 6
30339: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
30340: LD_INT 0
30342: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
30343: LD_VAR 0 1
30347: PUSH
30348: LD_INT 250
30350: EQUAL
30351: PUSH
30352: LD_VAR 0 2
30356: PPUSH
30357: CALL_OW 264
30361: PUSH
30362: LD_EXP 43
30366: EQUAL
30367: AND
30368: IFFALSE 30389
// MinerPlaceMine ( unit , x , y ) ;
30370: LD_VAR 0 2
30374: PPUSH
30375: LD_VAR 0 4
30379: PPUSH
30380: LD_VAR 0 5
30384: PPUSH
30385: CALL 32738 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
30389: LD_VAR 0 1
30393: PUSH
30394: LD_INT 251
30396: EQUAL
30397: PUSH
30398: LD_VAR 0 2
30402: PPUSH
30403: CALL_OW 264
30407: PUSH
30408: LD_EXP 43
30412: EQUAL
30413: AND
30414: IFFALSE 30435
// MinerDetonateMine ( unit , x , y ) ;
30416: LD_VAR 0 2
30420: PPUSH
30421: LD_VAR 0 4
30425: PPUSH
30426: LD_VAR 0 5
30430: PPUSH
30431: CALL 33015 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
30435: LD_VAR 0 1
30439: PUSH
30440: LD_INT 252
30442: EQUAL
30443: PUSH
30444: LD_VAR 0 2
30448: PPUSH
30449: CALL_OW 264
30453: PUSH
30454: LD_EXP 43
30458: EQUAL
30459: AND
30460: IFFALSE 30481
// MinerCreateMinefield ( unit , x , y ) ;
30462: LD_VAR 0 2
30466: PPUSH
30467: LD_VAR 0 4
30471: PPUSH
30472: LD_VAR 0 5
30476: PPUSH
30477: CALL 33432 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
30481: LD_VAR 0 1
30485: PUSH
30486: LD_INT 253
30488: EQUAL
30489: PUSH
30490: LD_VAR 0 2
30494: PPUSH
30495: CALL_OW 257
30499: PUSH
30500: LD_INT 5
30502: EQUAL
30503: AND
30504: IFFALSE 30525
// ComBinocular ( unit , x , y ) ;
30506: LD_VAR 0 2
30510: PPUSH
30511: LD_VAR 0 4
30515: PPUSH
30516: LD_VAR 0 5
30520: PPUSH
30521: CALL 33803 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
30525: LD_VAR 0 1
30529: PUSH
30530: LD_INT 254
30532: EQUAL
30533: PUSH
30534: LD_VAR 0 2
30538: PPUSH
30539: CALL_OW 264
30543: PUSH
30544: LD_EXP 38
30548: EQUAL
30549: AND
30550: PUSH
30551: LD_VAR 0 3
30555: PPUSH
30556: CALL_OW 263
30560: PUSH
30561: LD_INT 3
30563: EQUAL
30564: AND
30565: IFFALSE 30581
// HackDestroyVehicle ( unit , selectedUnit ) ;
30567: LD_VAR 0 2
30571: PPUSH
30572: LD_VAR 0 3
30576: PPUSH
30577: CALL 32098 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
30581: LD_VAR 0 1
30585: PUSH
30586: LD_INT 255
30588: EQUAL
30589: PUSH
30590: LD_VAR 0 2
30594: PPUSH
30595: CALL_OW 264
30599: PUSH
30600: LD_INT 14
30602: PUSH
30603: LD_INT 53
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: IN
30610: AND
30611: PUSH
30612: LD_VAR 0 4
30616: PPUSH
30617: LD_VAR 0 5
30621: PPUSH
30622: CALL_OW 488
30626: AND
30627: IFFALSE 30651
// CutTreeXYR ( unit , x , y , 12 ) ;
30629: LD_VAR 0 2
30633: PPUSH
30634: LD_VAR 0 4
30638: PPUSH
30639: LD_VAR 0 5
30643: PPUSH
30644: LD_INT 12
30646: PPUSH
30647: CALL 30664 0 4
// end ;
30651: LD_VAR 0 6
30655: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
30656: LD_INT 0
30658: PPUSH
// end ;
30659: LD_VAR 0 4
30663: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
30664: LD_INT 0
30666: PPUSH
30667: PPUSH
30668: PPUSH
30669: PPUSH
30670: PPUSH
30671: PPUSH
30672: PPUSH
30673: PPUSH
30674: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
30675: LD_VAR 0 1
30679: NOT
30680: PUSH
30681: LD_VAR 0 2
30685: PPUSH
30686: LD_VAR 0 3
30690: PPUSH
30691: CALL_OW 488
30695: NOT
30696: OR
30697: PUSH
30698: LD_VAR 0 4
30702: NOT
30703: OR
30704: IFFALSE 30708
// exit ;
30706: GO 31048
// list := [ ] ;
30708: LD_ADDR_VAR 0 13
30712: PUSH
30713: EMPTY
30714: ST_TO_ADDR
// if x - r < 0 then
30715: LD_VAR 0 2
30719: PUSH
30720: LD_VAR 0 4
30724: MINUS
30725: PUSH
30726: LD_INT 0
30728: LESS
30729: IFFALSE 30741
// min_x := 0 else
30731: LD_ADDR_VAR 0 7
30735: PUSH
30736: LD_INT 0
30738: ST_TO_ADDR
30739: GO 30757
// min_x := x - r ;
30741: LD_ADDR_VAR 0 7
30745: PUSH
30746: LD_VAR 0 2
30750: PUSH
30751: LD_VAR 0 4
30755: MINUS
30756: ST_TO_ADDR
// if y - r < 0 then
30757: LD_VAR 0 3
30761: PUSH
30762: LD_VAR 0 4
30766: MINUS
30767: PUSH
30768: LD_INT 0
30770: LESS
30771: IFFALSE 30783
// min_y := 0 else
30773: LD_ADDR_VAR 0 8
30777: PUSH
30778: LD_INT 0
30780: ST_TO_ADDR
30781: GO 30799
// min_y := y - r ;
30783: LD_ADDR_VAR 0 8
30787: PUSH
30788: LD_VAR 0 3
30792: PUSH
30793: LD_VAR 0 4
30797: MINUS
30798: ST_TO_ADDR
// max_x := x + r ;
30799: LD_ADDR_VAR 0 9
30803: PUSH
30804: LD_VAR 0 2
30808: PUSH
30809: LD_VAR 0 4
30813: PLUS
30814: ST_TO_ADDR
// max_y := y + r ;
30815: LD_ADDR_VAR 0 10
30819: PUSH
30820: LD_VAR 0 3
30824: PUSH
30825: LD_VAR 0 4
30829: PLUS
30830: ST_TO_ADDR
// for _x = min_x to max_x do
30831: LD_ADDR_VAR 0 11
30835: PUSH
30836: DOUBLE
30837: LD_VAR 0 7
30841: DEC
30842: ST_TO_ADDR
30843: LD_VAR 0 9
30847: PUSH
30848: FOR_TO
30849: IFFALSE 30966
// for _y = min_y to max_y do
30851: LD_ADDR_VAR 0 12
30855: PUSH
30856: DOUBLE
30857: LD_VAR 0 8
30861: DEC
30862: ST_TO_ADDR
30863: LD_VAR 0 10
30867: PUSH
30868: FOR_TO
30869: IFFALSE 30962
// begin if not ValidHex ( _x , _y ) then
30871: LD_VAR 0 11
30875: PPUSH
30876: LD_VAR 0 12
30880: PPUSH
30881: CALL_OW 488
30885: NOT
30886: IFFALSE 30890
// continue ;
30888: GO 30868
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
30890: LD_VAR 0 11
30894: PPUSH
30895: LD_VAR 0 12
30899: PPUSH
30900: CALL_OW 351
30904: PUSH
30905: LD_VAR 0 11
30909: PPUSH
30910: LD_VAR 0 12
30914: PPUSH
30915: CALL_OW 554
30919: AND
30920: IFFALSE 30960
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
30922: LD_ADDR_VAR 0 13
30926: PUSH
30927: LD_VAR 0 13
30931: PPUSH
30932: LD_VAR 0 13
30936: PUSH
30937: LD_INT 1
30939: PLUS
30940: PPUSH
30941: LD_VAR 0 11
30945: PUSH
30946: LD_VAR 0 12
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PPUSH
30955: CALL_OW 2
30959: ST_TO_ADDR
// end ;
30960: GO 30868
30962: POP
30963: POP
30964: GO 30848
30966: POP
30967: POP
// if not list then
30968: LD_VAR 0 13
30972: NOT
30973: IFFALSE 30977
// exit ;
30975: GO 31048
// for i in list do
30977: LD_ADDR_VAR 0 6
30981: PUSH
30982: LD_VAR 0 13
30986: PUSH
30987: FOR_IN
30988: IFFALSE 31046
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
30990: LD_VAR 0 1
30994: PPUSH
30995: LD_STRING M
30997: PUSH
30998: LD_VAR 0 6
31002: PUSH
31003: LD_INT 1
31005: ARRAY
31006: PUSH
31007: LD_VAR 0 6
31011: PUSH
31012: LD_INT 2
31014: ARRAY
31015: PUSH
31016: LD_INT 0
31018: PUSH
31019: LD_INT 0
31021: PUSH
31022: LD_INT 0
31024: PUSH
31025: LD_INT 0
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: PUSH
31037: EMPTY
31038: LIST
31039: PPUSH
31040: CALL_OW 447
31044: GO 30987
31046: POP
31047: POP
// end ;
31048: LD_VAR 0 5
31052: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
31053: LD_EXP 115
31057: NOT
31058: IFFALSE 31108
31060: GO 31062
31062: DISABLE
// begin initHack := true ;
31063: LD_ADDR_EXP 115
31067: PUSH
31068: LD_INT 1
31070: ST_TO_ADDR
// hackTanks := [ ] ;
31071: LD_ADDR_EXP 116
31075: PUSH
31076: EMPTY
31077: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
31078: LD_ADDR_EXP 117
31082: PUSH
31083: EMPTY
31084: ST_TO_ADDR
// hackLimit := 3 ;
31085: LD_ADDR_EXP 118
31089: PUSH
31090: LD_INT 3
31092: ST_TO_ADDR
// hackDist := 12 ;
31093: LD_ADDR_EXP 119
31097: PUSH
31098: LD_INT 12
31100: ST_TO_ADDR
// hackCounter := [ ] ;
31101: LD_ADDR_EXP 120
31105: PUSH
31106: EMPTY
31107: ST_TO_ADDR
// end ;
31108: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
31109: LD_EXP 115
31113: PUSH
31114: LD_INT 34
31116: PUSH
31117: LD_EXP 38
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PPUSH
31126: CALL_OW 69
31130: AND
31131: IFFALSE 31386
31133: GO 31135
31135: DISABLE
31136: LD_INT 0
31138: PPUSH
31139: PPUSH
// begin enable ;
31140: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
31141: LD_ADDR_VAR 0 1
31145: PUSH
31146: LD_INT 34
31148: PUSH
31149: LD_EXP 38
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PPUSH
31158: CALL_OW 69
31162: PUSH
31163: FOR_IN
31164: IFFALSE 31384
// begin if not i in hackTanks then
31166: LD_VAR 0 1
31170: PUSH
31171: LD_EXP 116
31175: IN
31176: NOT
31177: IFFALSE 31260
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
31179: LD_ADDR_EXP 116
31183: PUSH
31184: LD_EXP 116
31188: PPUSH
31189: LD_EXP 116
31193: PUSH
31194: LD_INT 1
31196: PLUS
31197: PPUSH
31198: LD_VAR 0 1
31202: PPUSH
31203: CALL_OW 1
31207: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
31208: LD_ADDR_EXP 117
31212: PUSH
31213: LD_EXP 117
31217: PPUSH
31218: LD_EXP 117
31222: PUSH
31223: LD_INT 1
31225: PLUS
31226: PPUSH
31227: EMPTY
31228: PPUSH
31229: CALL_OW 1
31233: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
31234: LD_ADDR_EXP 120
31238: PUSH
31239: LD_EXP 120
31243: PPUSH
31244: LD_EXP 120
31248: PUSH
31249: LD_INT 1
31251: PLUS
31252: PPUSH
31253: EMPTY
31254: PPUSH
31255: CALL_OW 1
31259: ST_TO_ADDR
// end ; if not IsOk ( i ) then
31260: LD_VAR 0 1
31264: PPUSH
31265: CALL_OW 302
31269: NOT
31270: IFFALSE 31283
// begin HackUnlinkAll ( i ) ;
31272: LD_VAR 0 1
31276: PPUSH
31277: CALL 31389 0 1
// continue ;
31281: GO 31163
// end ; HackCheckCapturedStatus ( i ) ;
31283: LD_VAR 0 1
31287: PPUSH
31288: CALL 31832 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
31292: LD_ADDR_VAR 0 2
31296: PUSH
31297: LD_INT 81
31299: PUSH
31300: LD_VAR 0 1
31304: PPUSH
31305: CALL_OW 255
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 33
31316: PUSH
31317: LD_INT 3
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 91
31326: PUSH
31327: LD_VAR 0 1
31331: PUSH
31332: LD_EXP 119
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 50
31344: PUSH
31345: EMPTY
31346: LIST
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: PPUSH
31354: CALL_OW 69
31358: ST_TO_ADDR
// if not tmp then
31359: LD_VAR 0 2
31363: NOT
31364: IFFALSE 31368
// continue ;
31366: GO 31163
// HackLink ( i , tmp ) ;
31368: LD_VAR 0 1
31372: PPUSH
31373: LD_VAR 0 2
31377: PPUSH
31378: CALL 31525 0 2
// end ;
31382: GO 31163
31384: POP
31385: POP
// end ;
31386: PPOPN 2
31388: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
31389: LD_INT 0
31391: PPUSH
31392: PPUSH
31393: PPUSH
// if not hack in hackTanks then
31394: LD_VAR 0 1
31398: PUSH
31399: LD_EXP 116
31403: IN
31404: NOT
31405: IFFALSE 31409
// exit ;
31407: GO 31520
// index := GetElementIndex ( hackTanks , hack ) ;
31409: LD_ADDR_VAR 0 4
31413: PUSH
31414: LD_EXP 116
31418: PPUSH
31419: LD_VAR 0 1
31423: PPUSH
31424: CALL 38994 0 2
31428: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
31429: LD_EXP 117
31433: PUSH
31434: LD_VAR 0 4
31438: ARRAY
31439: IFFALSE 31520
// begin for i in hackTanksCaptured [ index ] do
31441: LD_ADDR_VAR 0 3
31445: PUSH
31446: LD_EXP 117
31450: PUSH
31451: LD_VAR 0 4
31455: ARRAY
31456: PUSH
31457: FOR_IN
31458: IFFALSE 31484
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
31460: LD_VAR 0 3
31464: PUSH
31465: LD_INT 1
31467: ARRAY
31468: PPUSH
31469: LD_VAR 0 3
31473: PUSH
31474: LD_INT 2
31476: ARRAY
31477: PPUSH
31478: CALL_OW 235
31482: GO 31457
31484: POP
31485: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
31486: LD_ADDR_EXP 117
31490: PUSH
31491: LD_EXP 117
31495: PPUSH
31496: LD_VAR 0 4
31500: PPUSH
31501: EMPTY
31502: PPUSH
31503: CALL_OW 1
31507: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
31508: LD_VAR 0 1
31512: PPUSH
31513: LD_INT 0
31515: PPUSH
31516: CALL_OW 505
// end ; end ;
31520: LD_VAR 0 2
31524: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
31525: LD_INT 0
31527: PPUSH
31528: PPUSH
31529: PPUSH
// if not hack in hackTanks or not vehicles then
31530: LD_VAR 0 1
31534: PUSH
31535: LD_EXP 116
31539: IN
31540: NOT
31541: PUSH
31542: LD_VAR 0 2
31546: NOT
31547: OR
31548: IFFALSE 31552
// exit ;
31550: GO 31827
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
31552: LD_ADDR_VAR 0 2
31556: PUSH
31557: LD_VAR 0 1
31561: PPUSH
31562: LD_VAR 0 2
31566: PPUSH
31567: LD_INT 1
31569: PPUSH
31570: LD_INT 1
31572: PPUSH
31573: CALL 39644 0 4
31577: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
31578: LD_ADDR_VAR 0 5
31582: PUSH
31583: LD_EXP 116
31587: PPUSH
31588: LD_VAR 0 1
31592: PPUSH
31593: CALL 38994 0 2
31597: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
31598: LD_EXP 117
31602: PUSH
31603: LD_VAR 0 5
31607: ARRAY
31608: PUSH
31609: LD_EXP 118
31613: LESS
31614: IFFALSE 31803
// begin for i := 1 to vehicles do
31616: LD_ADDR_VAR 0 4
31620: PUSH
31621: DOUBLE
31622: LD_INT 1
31624: DEC
31625: ST_TO_ADDR
31626: LD_VAR 0 2
31630: PUSH
31631: FOR_TO
31632: IFFALSE 31801
// begin if hackTanksCaptured [ index ] = hackLimit then
31634: LD_EXP 117
31638: PUSH
31639: LD_VAR 0 5
31643: ARRAY
31644: PUSH
31645: LD_EXP 118
31649: EQUAL
31650: IFFALSE 31654
// break ;
31652: GO 31801
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
31654: LD_ADDR_EXP 120
31658: PUSH
31659: LD_EXP 120
31663: PPUSH
31664: LD_VAR 0 5
31668: PPUSH
31669: LD_EXP 120
31673: PUSH
31674: LD_VAR 0 5
31678: ARRAY
31679: PUSH
31680: LD_INT 1
31682: PLUS
31683: PPUSH
31684: CALL_OW 1
31688: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
31689: LD_ADDR_EXP 117
31693: PUSH
31694: LD_EXP 117
31698: PPUSH
31699: LD_VAR 0 5
31703: PUSH
31704: LD_EXP 117
31708: PUSH
31709: LD_VAR 0 5
31713: ARRAY
31714: PUSH
31715: LD_INT 1
31717: PLUS
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PPUSH
31723: LD_VAR 0 2
31727: PUSH
31728: LD_VAR 0 4
31732: ARRAY
31733: PUSH
31734: LD_VAR 0 2
31738: PUSH
31739: LD_VAR 0 4
31743: ARRAY
31744: PPUSH
31745: CALL_OW 255
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PPUSH
31754: CALL 39209 0 3
31758: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
31759: LD_VAR 0 2
31763: PUSH
31764: LD_VAR 0 4
31768: ARRAY
31769: PPUSH
31770: LD_VAR 0 1
31774: PPUSH
31775: CALL_OW 255
31779: PPUSH
31780: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
31784: LD_VAR 0 2
31788: PUSH
31789: LD_VAR 0 4
31793: ARRAY
31794: PPUSH
31795: CALL_OW 141
// end ;
31799: GO 31631
31801: POP
31802: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31803: LD_VAR 0 1
31807: PPUSH
31808: LD_EXP 117
31812: PUSH
31813: LD_VAR 0 5
31817: ARRAY
31818: PUSH
31819: LD_INT 0
31821: PLUS
31822: PPUSH
31823: CALL_OW 505
// end ;
31827: LD_VAR 0 3
31831: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
31832: LD_INT 0
31834: PPUSH
31835: PPUSH
31836: PPUSH
31837: PPUSH
// if not hack in hackTanks then
31838: LD_VAR 0 1
31842: PUSH
31843: LD_EXP 116
31847: IN
31848: NOT
31849: IFFALSE 31853
// exit ;
31851: GO 32093
// index := GetElementIndex ( hackTanks , hack ) ;
31853: LD_ADDR_VAR 0 4
31857: PUSH
31858: LD_EXP 116
31862: PPUSH
31863: LD_VAR 0 1
31867: PPUSH
31868: CALL 38994 0 2
31872: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
31873: LD_ADDR_VAR 0 3
31877: PUSH
31878: DOUBLE
31879: LD_EXP 117
31883: PUSH
31884: LD_VAR 0 4
31888: ARRAY
31889: INC
31890: ST_TO_ADDR
31891: LD_INT 1
31893: PUSH
31894: FOR_DOWNTO
31895: IFFALSE 32067
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
31897: LD_ADDR_VAR 0 5
31901: PUSH
31902: LD_EXP 117
31906: PUSH
31907: LD_VAR 0 4
31911: ARRAY
31912: PUSH
31913: LD_VAR 0 3
31917: ARRAY
31918: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
31919: LD_VAR 0 5
31923: PUSH
31924: LD_INT 1
31926: ARRAY
31927: PPUSH
31928: CALL_OW 302
31932: NOT
31933: PUSH
31934: LD_VAR 0 5
31938: PUSH
31939: LD_INT 1
31941: ARRAY
31942: PPUSH
31943: CALL_OW 255
31947: PUSH
31948: LD_VAR 0 1
31952: PPUSH
31953: CALL_OW 255
31957: NONEQUAL
31958: OR
31959: IFFALSE 32065
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
31961: LD_VAR 0 5
31965: PUSH
31966: LD_INT 1
31968: ARRAY
31969: PPUSH
31970: CALL_OW 305
31974: PUSH
31975: LD_VAR 0 5
31979: PUSH
31980: LD_INT 1
31982: ARRAY
31983: PPUSH
31984: CALL_OW 255
31988: PUSH
31989: LD_VAR 0 1
31993: PPUSH
31994: CALL_OW 255
31998: EQUAL
31999: AND
32000: IFFALSE 32024
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
32002: LD_VAR 0 5
32006: PUSH
32007: LD_INT 1
32009: ARRAY
32010: PPUSH
32011: LD_VAR 0 5
32015: PUSH
32016: LD_INT 2
32018: ARRAY
32019: PPUSH
32020: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
32024: LD_ADDR_EXP 117
32028: PUSH
32029: LD_EXP 117
32033: PPUSH
32034: LD_VAR 0 4
32038: PPUSH
32039: LD_EXP 117
32043: PUSH
32044: LD_VAR 0 4
32048: ARRAY
32049: PPUSH
32050: LD_VAR 0 3
32054: PPUSH
32055: CALL_OW 3
32059: PPUSH
32060: CALL_OW 1
32064: ST_TO_ADDR
// end ; end ;
32065: GO 31894
32067: POP
32068: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32069: LD_VAR 0 1
32073: PPUSH
32074: LD_EXP 117
32078: PUSH
32079: LD_VAR 0 4
32083: ARRAY
32084: PUSH
32085: LD_INT 0
32087: PLUS
32088: PPUSH
32089: CALL_OW 505
// end ;
32093: LD_VAR 0 2
32097: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
32098: LD_INT 0
32100: PPUSH
32101: PPUSH
32102: PPUSH
32103: PPUSH
// if not hack in hackTanks then
32104: LD_VAR 0 1
32108: PUSH
32109: LD_EXP 116
32113: IN
32114: NOT
32115: IFFALSE 32119
// exit ;
32117: GO 32204
// index := GetElementIndex ( hackTanks , hack ) ;
32119: LD_ADDR_VAR 0 5
32123: PUSH
32124: LD_EXP 116
32128: PPUSH
32129: LD_VAR 0 1
32133: PPUSH
32134: CALL 38994 0 2
32138: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
32139: LD_ADDR_VAR 0 4
32143: PUSH
32144: DOUBLE
32145: LD_INT 1
32147: DEC
32148: ST_TO_ADDR
32149: LD_EXP 117
32153: PUSH
32154: LD_VAR 0 5
32158: ARRAY
32159: PUSH
32160: FOR_TO
32161: IFFALSE 32202
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
32163: LD_EXP 117
32167: PUSH
32168: LD_VAR 0 5
32172: ARRAY
32173: PUSH
32174: LD_VAR 0 4
32178: ARRAY
32179: PUSH
32180: LD_INT 1
32182: ARRAY
32183: PUSH
32184: LD_VAR 0 2
32188: EQUAL
32189: IFFALSE 32200
// KillUnit ( vehicle ) ;
32191: LD_VAR 0 2
32195: PPUSH
32196: CALL_OW 66
32200: GO 32160
32202: POP
32203: POP
// end ;
32204: LD_VAR 0 3
32208: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
32209: LD_EXP 121
32213: NOT
32214: IFFALSE 32249
32216: GO 32218
32218: DISABLE
// begin initMiner := true ;
32219: LD_ADDR_EXP 121
32223: PUSH
32224: LD_INT 1
32226: ST_TO_ADDR
// minersList := [ ] ;
32227: LD_ADDR_EXP 122
32231: PUSH
32232: EMPTY
32233: ST_TO_ADDR
// minerMinesList := [ ] ;
32234: LD_ADDR_EXP 123
32238: PUSH
32239: EMPTY
32240: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
32241: LD_ADDR_EXP 124
32245: PUSH
32246: LD_INT 5
32248: ST_TO_ADDR
// end ;
32249: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
32250: LD_EXP 121
32254: PUSH
32255: LD_INT 34
32257: PUSH
32258: LD_EXP 43
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PPUSH
32267: CALL_OW 69
32271: AND
32272: IFFALSE 32735
32274: GO 32276
32276: DISABLE
32277: LD_INT 0
32279: PPUSH
32280: PPUSH
32281: PPUSH
32282: PPUSH
// begin enable ;
32283: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
32284: LD_ADDR_VAR 0 1
32288: PUSH
32289: LD_INT 34
32291: PUSH
32292: LD_EXP 43
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PPUSH
32301: CALL_OW 69
32305: PUSH
32306: FOR_IN
32307: IFFALSE 32379
// begin if not i in minersList then
32309: LD_VAR 0 1
32313: PUSH
32314: LD_EXP 122
32318: IN
32319: NOT
32320: IFFALSE 32377
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
32322: LD_ADDR_EXP 122
32326: PUSH
32327: LD_EXP 122
32331: PPUSH
32332: LD_EXP 122
32336: PUSH
32337: LD_INT 1
32339: PLUS
32340: PPUSH
32341: LD_VAR 0 1
32345: PPUSH
32346: CALL_OW 1
32350: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
32351: LD_ADDR_EXP 123
32355: PUSH
32356: LD_EXP 123
32360: PPUSH
32361: LD_EXP 123
32365: PUSH
32366: LD_INT 1
32368: PLUS
32369: PPUSH
32370: EMPTY
32371: PPUSH
32372: CALL_OW 1
32376: ST_TO_ADDR
// end end ;
32377: GO 32306
32379: POP
32380: POP
// for i := minerMinesList downto 1 do
32381: LD_ADDR_VAR 0 1
32385: PUSH
32386: DOUBLE
32387: LD_EXP 123
32391: INC
32392: ST_TO_ADDR
32393: LD_INT 1
32395: PUSH
32396: FOR_DOWNTO
32397: IFFALSE 32733
// begin if IsLive ( minersList [ i ] ) then
32399: LD_EXP 122
32403: PUSH
32404: LD_VAR 0 1
32408: ARRAY
32409: PPUSH
32410: CALL_OW 300
32414: IFFALSE 32442
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
32416: LD_EXP 122
32420: PUSH
32421: LD_VAR 0 1
32425: ARRAY
32426: PPUSH
32427: LD_EXP 123
32431: PUSH
32432: LD_VAR 0 1
32436: ARRAY
32437: PPUSH
32438: CALL_OW 505
// if not minerMinesList [ i ] then
32442: LD_EXP 123
32446: PUSH
32447: LD_VAR 0 1
32451: ARRAY
32452: NOT
32453: IFFALSE 32457
// continue ;
32455: GO 32396
// for j := minerMinesList [ i ] downto 1 do
32457: LD_ADDR_VAR 0 2
32461: PUSH
32462: DOUBLE
32463: LD_EXP 123
32467: PUSH
32468: LD_VAR 0 1
32472: ARRAY
32473: INC
32474: ST_TO_ADDR
32475: LD_INT 1
32477: PUSH
32478: FOR_DOWNTO
32479: IFFALSE 32729
// begin side := GetSide ( minersList [ i ] ) ;
32481: LD_ADDR_VAR 0 3
32485: PUSH
32486: LD_EXP 122
32490: PUSH
32491: LD_VAR 0 1
32495: ARRAY
32496: PPUSH
32497: CALL_OW 255
32501: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
32502: LD_ADDR_VAR 0 4
32506: PUSH
32507: LD_EXP 123
32511: PUSH
32512: LD_VAR 0 1
32516: ARRAY
32517: PUSH
32518: LD_VAR 0 2
32522: ARRAY
32523: PUSH
32524: LD_INT 1
32526: ARRAY
32527: PPUSH
32528: LD_EXP 123
32532: PUSH
32533: LD_VAR 0 1
32537: ARRAY
32538: PUSH
32539: LD_VAR 0 2
32543: ARRAY
32544: PUSH
32545: LD_INT 2
32547: ARRAY
32548: PPUSH
32549: CALL_OW 428
32553: ST_TO_ADDR
// if not tmp then
32554: LD_VAR 0 4
32558: NOT
32559: IFFALSE 32563
// continue ;
32561: GO 32478
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
32563: LD_VAR 0 4
32567: PUSH
32568: LD_INT 81
32570: PUSH
32571: LD_VAR 0 3
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PPUSH
32580: CALL_OW 69
32584: IN
32585: PUSH
32586: LD_EXP 123
32590: PUSH
32591: LD_VAR 0 1
32595: ARRAY
32596: PUSH
32597: LD_VAR 0 2
32601: ARRAY
32602: PUSH
32603: LD_INT 1
32605: ARRAY
32606: PPUSH
32607: LD_EXP 123
32611: PUSH
32612: LD_VAR 0 1
32616: ARRAY
32617: PUSH
32618: LD_VAR 0 2
32622: ARRAY
32623: PUSH
32624: LD_INT 2
32626: ARRAY
32627: PPUSH
32628: CALL_OW 458
32632: AND
32633: IFFALSE 32727
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
32635: LD_EXP 123
32639: PUSH
32640: LD_VAR 0 1
32644: ARRAY
32645: PUSH
32646: LD_VAR 0 2
32650: ARRAY
32651: PUSH
32652: LD_INT 1
32654: ARRAY
32655: PPUSH
32656: LD_EXP 123
32660: PUSH
32661: LD_VAR 0 1
32665: ARRAY
32666: PUSH
32667: LD_VAR 0 2
32671: ARRAY
32672: PUSH
32673: LD_INT 2
32675: ARRAY
32676: PPUSH
32677: LD_VAR 0 3
32681: PPUSH
32682: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
32686: LD_ADDR_EXP 123
32690: PUSH
32691: LD_EXP 123
32695: PPUSH
32696: LD_VAR 0 1
32700: PPUSH
32701: LD_EXP 123
32705: PUSH
32706: LD_VAR 0 1
32710: ARRAY
32711: PPUSH
32712: LD_VAR 0 2
32716: PPUSH
32717: CALL_OW 3
32721: PPUSH
32722: CALL_OW 1
32726: ST_TO_ADDR
// end ; end ;
32727: GO 32478
32729: POP
32730: POP
// end ;
32731: GO 32396
32733: POP
32734: POP
// end ;
32735: PPOPN 4
32737: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
32738: LD_INT 0
32740: PPUSH
32741: PPUSH
// result := false ;
32742: LD_ADDR_VAR 0 4
32746: PUSH
32747: LD_INT 0
32749: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
32750: LD_VAR 0 1
32754: PPUSH
32755: CALL_OW 264
32759: PUSH
32760: LD_EXP 43
32764: EQUAL
32765: NOT
32766: IFFALSE 32770
// exit ;
32768: GO 33010
// index := GetElementIndex ( minersList , unit ) ;
32770: LD_ADDR_VAR 0 5
32774: PUSH
32775: LD_EXP 122
32779: PPUSH
32780: LD_VAR 0 1
32784: PPUSH
32785: CALL 38994 0 2
32789: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
32790: LD_EXP 123
32794: PUSH
32795: LD_VAR 0 5
32799: ARRAY
32800: PUSH
32801: LD_EXP 124
32805: GREATEREQUAL
32806: IFFALSE 32810
// exit ;
32808: GO 33010
// ComMoveXY ( unit , x , y ) ;
32810: LD_VAR 0 1
32814: PPUSH
32815: LD_VAR 0 2
32819: PPUSH
32820: LD_VAR 0 3
32824: PPUSH
32825: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32829: LD_INT 35
32831: PPUSH
32832: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
32836: LD_VAR 0 1
32840: PPUSH
32841: LD_VAR 0 2
32845: PPUSH
32846: LD_VAR 0 3
32850: PPUSH
32851: CALL 69766 0 3
32855: NOT
32856: PUSH
32857: LD_VAR 0 1
32861: PPUSH
32862: CALL_OW 314
32866: AND
32867: IFFALSE 32871
// exit ;
32869: GO 33010
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
32871: LD_VAR 0 2
32875: PPUSH
32876: LD_VAR 0 3
32880: PPUSH
32881: CALL_OW 428
32885: PUSH
32886: LD_VAR 0 1
32890: EQUAL
32891: PUSH
32892: LD_VAR 0 1
32896: PPUSH
32897: CALL_OW 314
32901: NOT
32902: AND
32903: IFFALSE 32829
// PlaySoundXY ( x , y , PlantMine ) ;
32905: LD_VAR 0 2
32909: PPUSH
32910: LD_VAR 0 3
32914: PPUSH
32915: LD_STRING PlantMine
32917: PPUSH
32918: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
32922: LD_VAR 0 2
32926: PPUSH
32927: LD_VAR 0 3
32931: PPUSH
32932: LD_VAR 0 1
32936: PPUSH
32937: CALL_OW 255
32941: PPUSH
32942: LD_INT 0
32944: PPUSH
32945: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
32949: LD_ADDR_EXP 123
32953: PUSH
32954: LD_EXP 123
32958: PPUSH
32959: LD_VAR 0 5
32963: PUSH
32964: LD_EXP 123
32968: PUSH
32969: LD_VAR 0 5
32973: ARRAY
32974: PUSH
32975: LD_INT 1
32977: PLUS
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PPUSH
32983: LD_VAR 0 2
32987: PUSH
32988: LD_VAR 0 3
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PPUSH
32997: CALL 39209 0 3
33001: ST_TO_ADDR
// result := true ;
33002: LD_ADDR_VAR 0 4
33006: PUSH
33007: LD_INT 1
33009: ST_TO_ADDR
// end ;
33010: LD_VAR 0 4
33014: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
33015: LD_INT 0
33017: PPUSH
33018: PPUSH
33019: PPUSH
// if not unit in minersList then
33020: LD_VAR 0 1
33024: PUSH
33025: LD_EXP 122
33029: IN
33030: NOT
33031: IFFALSE 33035
// exit ;
33033: GO 33427
// index := GetElementIndex ( minersList , unit ) ;
33035: LD_ADDR_VAR 0 6
33039: PUSH
33040: LD_EXP 122
33044: PPUSH
33045: LD_VAR 0 1
33049: PPUSH
33050: CALL 38994 0 2
33054: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
33055: LD_ADDR_VAR 0 5
33059: PUSH
33060: DOUBLE
33061: LD_EXP 123
33065: PUSH
33066: LD_VAR 0 6
33070: ARRAY
33071: INC
33072: ST_TO_ADDR
33073: LD_INT 1
33075: PUSH
33076: FOR_DOWNTO
33077: IFFALSE 33238
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
33079: LD_EXP 123
33083: PUSH
33084: LD_VAR 0 6
33088: ARRAY
33089: PUSH
33090: LD_VAR 0 5
33094: ARRAY
33095: PUSH
33096: LD_INT 1
33098: ARRAY
33099: PUSH
33100: LD_VAR 0 2
33104: EQUAL
33105: PUSH
33106: LD_EXP 123
33110: PUSH
33111: LD_VAR 0 6
33115: ARRAY
33116: PUSH
33117: LD_VAR 0 5
33121: ARRAY
33122: PUSH
33123: LD_INT 2
33125: ARRAY
33126: PUSH
33127: LD_VAR 0 3
33131: EQUAL
33132: AND
33133: IFFALSE 33236
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33135: LD_EXP 123
33139: PUSH
33140: LD_VAR 0 6
33144: ARRAY
33145: PUSH
33146: LD_VAR 0 5
33150: ARRAY
33151: PUSH
33152: LD_INT 1
33154: ARRAY
33155: PPUSH
33156: LD_EXP 123
33160: PUSH
33161: LD_VAR 0 6
33165: ARRAY
33166: PUSH
33167: LD_VAR 0 5
33171: ARRAY
33172: PUSH
33173: LD_INT 2
33175: ARRAY
33176: PPUSH
33177: LD_VAR 0 1
33181: PPUSH
33182: CALL_OW 255
33186: PPUSH
33187: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33191: LD_ADDR_EXP 123
33195: PUSH
33196: LD_EXP 123
33200: PPUSH
33201: LD_VAR 0 6
33205: PPUSH
33206: LD_EXP 123
33210: PUSH
33211: LD_VAR 0 6
33215: ARRAY
33216: PPUSH
33217: LD_VAR 0 5
33221: PPUSH
33222: CALL_OW 3
33226: PPUSH
33227: CALL_OW 1
33231: ST_TO_ADDR
// exit ;
33232: POP
33233: POP
33234: GO 33427
// end ; end ;
33236: GO 33076
33238: POP
33239: POP
// for i := minerMinesList [ index ] downto 1 do
33240: LD_ADDR_VAR 0 5
33244: PUSH
33245: DOUBLE
33246: LD_EXP 123
33250: PUSH
33251: LD_VAR 0 6
33255: ARRAY
33256: INC
33257: ST_TO_ADDR
33258: LD_INT 1
33260: PUSH
33261: FOR_DOWNTO
33262: IFFALSE 33425
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
33264: LD_EXP 123
33268: PUSH
33269: LD_VAR 0 6
33273: ARRAY
33274: PUSH
33275: LD_VAR 0 5
33279: ARRAY
33280: PUSH
33281: LD_INT 1
33283: ARRAY
33284: PPUSH
33285: LD_EXP 123
33289: PUSH
33290: LD_VAR 0 6
33294: ARRAY
33295: PUSH
33296: LD_VAR 0 5
33300: ARRAY
33301: PUSH
33302: LD_INT 2
33304: ARRAY
33305: PPUSH
33306: LD_VAR 0 2
33310: PPUSH
33311: LD_VAR 0 3
33315: PPUSH
33316: CALL_OW 298
33320: PUSH
33321: LD_INT 6
33323: LESS
33324: IFFALSE 33423
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33326: LD_EXP 123
33330: PUSH
33331: LD_VAR 0 6
33335: ARRAY
33336: PUSH
33337: LD_VAR 0 5
33341: ARRAY
33342: PUSH
33343: LD_INT 1
33345: ARRAY
33346: PPUSH
33347: LD_EXP 123
33351: PUSH
33352: LD_VAR 0 6
33356: ARRAY
33357: PUSH
33358: LD_VAR 0 5
33362: ARRAY
33363: PUSH
33364: LD_INT 2
33366: ARRAY
33367: PPUSH
33368: LD_VAR 0 1
33372: PPUSH
33373: CALL_OW 255
33377: PPUSH
33378: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33382: LD_ADDR_EXP 123
33386: PUSH
33387: LD_EXP 123
33391: PPUSH
33392: LD_VAR 0 6
33396: PPUSH
33397: LD_EXP 123
33401: PUSH
33402: LD_VAR 0 6
33406: ARRAY
33407: PPUSH
33408: LD_VAR 0 5
33412: PPUSH
33413: CALL_OW 3
33417: PPUSH
33418: CALL_OW 1
33422: ST_TO_ADDR
// end ; end ;
33423: GO 33261
33425: POP
33426: POP
// end ;
33427: LD_VAR 0 4
33431: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
33432: LD_INT 0
33434: PPUSH
33435: PPUSH
33436: PPUSH
33437: PPUSH
33438: PPUSH
33439: PPUSH
33440: PPUSH
33441: PPUSH
33442: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
33443: LD_VAR 0 1
33447: PPUSH
33448: CALL_OW 264
33452: PUSH
33453: LD_EXP 43
33457: EQUAL
33458: NOT
33459: PUSH
33460: LD_VAR 0 1
33464: PUSH
33465: LD_EXP 122
33469: IN
33470: NOT
33471: OR
33472: IFFALSE 33476
// exit ;
33474: GO 33798
// index := GetElementIndex ( minersList , unit ) ;
33476: LD_ADDR_VAR 0 6
33480: PUSH
33481: LD_EXP 122
33485: PPUSH
33486: LD_VAR 0 1
33490: PPUSH
33491: CALL 38994 0 2
33495: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
33496: LD_ADDR_VAR 0 8
33500: PUSH
33501: LD_EXP 124
33505: PUSH
33506: LD_EXP 123
33510: PUSH
33511: LD_VAR 0 6
33515: ARRAY
33516: MINUS
33517: ST_TO_ADDR
// if not minesFreeAmount then
33518: LD_VAR 0 8
33522: NOT
33523: IFFALSE 33527
// exit ;
33525: GO 33798
// tmp := [ ] ;
33527: LD_ADDR_VAR 0 7
33531: PUSH
33532: EMPTY
33533: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
33534: LD_ADDR_VAR 0 5
33538: PUSH
33539: DOUBLE
33540: LD_INT 1
33542: DEC
33543: ST_TO_ADDR
33544: LD_VAR 0 8
33548: PUSH
33549: FOR_TO
33550: IFFALSE 33745
// begin _d := rand ( 0 , 5 ) ;
33552: LD_ADDR_VAR 0 11
33556: PUSH
33557: LD_INT 0
33559: PPUSH
33560: LD_INT 5
33562: PPUSH
33563: CALL_OW 12
33567: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
33568: LD_ADDR_VAR 0 12
33572: PUSH
33573: LD_INT 2
33575: PPUSH
33576: LD_INT 6
33578: PPUSH
33579: CALL_OW 12
33583: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
33584: LD_ADDR_VAR 0 9
33588: PUSH
33589: LD_VAR 0 2
33593: PPUSH
33594: LD_VAR 0 11
33598: PPUSH
33599: LD_VAR 0 12
33603: PPUSH
33604: CALL_OW 272
33608: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
33609: LD_ADDR_VAR 0 10
33613: PUSH
33614: LD_VAR 0 3
33618: PPUSH
33619: LD_VAR 0 11
33623: PPUSH
33624: LD_VAR 0 12
33628: PPUSH
33629: CALL_OW 273
33633: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
33634: LD_VAR 0 9
33638: PPUSH
33639: LD_VAR 0 10
33643: PPUSH
33644: CALL_OW 488
33648: PUSH
33649: LD_VAR 0 9
33653: PUSH
33654: LD_VAR 0 10
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_VAR 0 7
33667: IN
33668: NOT
33669: AND
33670: PUSH
33671: LD_VAR 0 9
33675: PPUSH
33676: LD_VAR 0 10
33680: PPUSH
33681: CALL_OW 458
33685: NOT
33686: AND
33687: IFFALSE 33729
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
33689: LD_ADDR_VAR 0 7
33693: PUSH
33694: LD_VAR 0 7
33698: PPUSH
33699: LD_VAR 0 7
33703: PUSH
33704: LD_INT 1
33706: PLUS
33707: PPUSH
33708: LD_VAR 0 9
33712: PUSH
33713: LD_VAR 0 10
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PPUSH
33722: CALL_OW 1
33726: ST_TO_ADDR
33727: GO 33743
// i := i - 1 ;
33729: LD_ADDR_VAR 0 5
33733: PUSH
33734: LD_VAR 0 5
33738: PUSH
33739: LD_INT 1
33741: MINUS
33742: ST_TO_ADDR
// end ;
33743: GO 33549
33745: POP
33746: POP
// for i in tmp do
33747: LD_ADDR_VAR 0 5
33751: PUSH
33752: LD_VAR 0 7
33756: PUSH
33757: FOR_IN
33758: IFFALSE 33796
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
33760: LD_VAR 0 1
33764: PPUSH
33765: LD_VAR 0 5
33769: PUSH
33770: LD_INT 1
33772: ARRAY
33773: PPUSH
33774: LD_VAR 0 5
33778: PUSH
33779: LD_INT 2
33781: ARRAY
33782: PPUSH
33783: CALL 32738 0 3
33787: NOT
33788: IFFALSE 33794
// exit ;
33790: POP
33791: POP
33792: GO 33798
33794: GO 33757
33796: POP
33797: POP
// end ;
33798: LD_VAR 0 4
33802: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
33803: LD_INT 0
33805: PPUSH
33806: PPUSH
33807: PPUSH
33808: PPUSH
33809: PPUSH
33810: PPUSH
33811: PPUSH
// if not GetClass ( unit ) = class_sniper then
33812: LD_VAR 0 1
33816: PPUSH
33817: CALL_OW 257
33821: PUSH
33822: LD_INT 5
33824: EQUAL
33825: NOT
33826: IFFALSE 33830
// exit ;
33828: GO 34218
// dist := 8 ;
33830: LD_ADDR_VAR 0 5
33834: PUSH
33835: LD_INT 8
33837: ST_TO_ADDR
// viewRange := 12 ;
33838: LD_ADDR_VAR 0 7
33842: PUSH
33843: LD_INT 12
33845: ST_TO_ADDR
// side := GetSide ( unit ) ;
33846: LD_ADDR_VAR 0 6
33850: PUSH
33851: LD_VAR 0 1
33855: PPUSH
33856: CALL_OW 255
33860: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
33861: LD_INT 61
33863: PPUSH
33864: LD_VAR 0 6
33868: PPUSH
33869: CALL_OW 321
33873: PUSH
33874: LD_INT 2
33876: EQUAL
33877: IFFALSE 33887
// viewRange := 16 ;
33879: LD_ADDR_VAR 0 7
33883: PUSH
33884: LD_INT 16
33886: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
33887: LD_VAR 0 1
33891: PPUSH
33892: LD_VAR 0 2
33896: PPUSH
33897: LD_VAR 0 3
33901: PPUSH
33902: CALL_OW 297
33906: PUSH
33907: LD_VAR 0 5
33911: GREATER
33912: IFFALSE 33991
// begin ComMoveXY ( unit , x , y ) ;
33914: LD_VAR 0 1
33918: PPUSH
33919: LD_VAR 0 2
33923: PPUSH
33924: LD_VAR 0 3
33928: PPUSH
33929: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33933: LD_INT 35
33935: PPUSH
33936: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
33940: LD_VAR 0 1
33944: PPUSH
33945: LD_VAR 0 2
33949: PPUSH
33950: LD_VAR 0 3
33954: PPUSH
33955: CALL 69766 0 3
33959: NOT
33960: IFFALSE 33964
// exit ;
33962: GO 34218
// until GetDistUnitXY ( unit , x , y ) < dist ;
33964: LD_VAR 0 1
33968: PPUSH
33969: LD_VAR 0 2
33973: PPUSH
33974: LD_VAR 0 3
33978: PPUSH
33979: CALL_OW 297
33983: PUSH
33984: LD_VAR 0 5
33988: LESS
33989: IFFALSE 33933
// end ; ComTurnXY ( unit , x , y ) ;
33991: LD_VAR 0 1
33995: PPUSH
33996: LD_VAR 0 2
34000: PPUSH
34001: LD_VAR 0 3
34005: PPUSH
34006: CALL_OW 118
// wait ( 5 ) ;
34010: LD_INT 5
34012: PPUSH
34013: CALL_OW 67
// _d := GetDir ( unit ) ;
34017: LD_ADDR_VAR 0 10
34021: PUSH
34022: LD_VAR 0 1
34026: PPUSH
34027: CALL_OW 254
34031: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
34032: LD_ADDR_VAR 0 8
34036: PUSH
34037: LD_VAR 0 1
34041: PPUSH
34042: CALL_OW 250
34046: PPUSH
34047: LD_VAR 0 10
34051: PPUSH
34052: LD_VAR 0 5
34056: PPUSH
34057: CALL_OW 272
34061: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
34062: LD_ADDR_VAR 0 9
34066: PUSH
34067: LD_VAR 0 1
34071: PPUSH
34072: CALL_OW 251
34076: PPUSH
34077: LD_VAR 0 10
34081: PPUSH
34082: LD_VAR 0 5
34086: PPUSH
34087: CALL_OW 273
34091: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34092: LD_VAR 0 8
34096: PPUSH
34097: LD_VAR 0 9
34101: PPUSH
34102: CALL_OW 488
34106: NOT
34107: IFFALSE 34111
// exit ;
34109: GO 34218
// ComAnimCustom ( unit , 1 ) ;
34111: LD_VAR 0 1
34115: PPUSH
34116: LD_INT 1
34118: PPUSH
34119: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
34123: LD_VAR 0 8
34127: PPUSH
34128: LD_VAR 0 9
34132: PPUSH
34133: LD_VAR 0 6
34137: PPUSH
34138: LD_VAR 0 7
34142: PPUSH
34143: CALL_OW 330
// repeat wait ( 1 ) ;
34147: LD_INT 1
34149: PPUSH
34150: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
34154: LD_VAR 0 1
34158: PPUSH
34159: CALL_OW 316
34163: PUSH
34164: LD_VAR 0 1
34168: PPUSH
34169: CALL_OW 314
34173: OR
34174: PUSH
34175: LD_VAR 0 1
34179: PPUSH
34180: CALL_OW 302
34184: NOT
34185: OR
34186: PUSH
34187: LD_VAR 0 1
34191: PPUSH
34192: CALL_OW 301
34196: OR
34197: IFFALSE 34147
// RemoveSeeing ( _x , _y , side ) ;
34199: LD_VAR 0 8
34203: PPUSH
34204: LD_VAR 0 9
34208: PPUSH
34209: LD_VAR 0 6
34213: PPUSH
34214: CALL_OW 331
// end ; end_of_file
34218: LD_VAR 0 4
34222: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
34223: LD_INT 0
34225: PPUSH
34226: PPUSH
// if exist_mode then
34227: LD_VAR 0 2
34231: IFFALSE 34256
// unit := CreateCharacter ( prefix & ident ) else
34233: LD_ADDR_VAR 0 5
34237: PUSH
34238: LD_VAR 0 3
34242: PUSH
34243: LD_VAR 0 1
34247: STR
34248: PPUSH
34249: CALL_OW 34
34253: ST_TO_ADDR
34254: GO 34271
// unit := NewCharacter ( ident ) ;
34256: LD_ADDR_VAR 0 5
34260: PUSH
34261: LD_VAR 0 1
34265: PPUSH
34266: CALL_OW 25
34270: ST_TO_ADDR
// result := unit ;
34271: LD_ADDR_VAR 0 4
34275: PUSH
34276: LD_VAR 0 5
34280: ST_TO_ADDR
// end ;
34281: LD_VAR 0 4
34285: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
34286: LD_INT 0
34288: PPUSH
34289: PPUSH
// if not side or not nation then
34290: LD_VAR 0 1
34294: NOT
34295: PUSH
34296: LD_VAR 0 2
34300: NOT
34301: OR
34302: IFFALSE 34306
// exit ;
34304: GO 35074
// case nation of nation_american :
34306: LD_VAR 0 2
34310: PUSH
34311: LD_INT 1
34313: DOUBLE
34314: EQUAL
34315: IFTRUE 34319
34317: GO 34533
34319: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
34320: LD_ADDR_VAR 0 4
34324: PUSH
34325: LD_INT 35
34327: PUSH
34328: LD_INT 45
34330: PUSH
34331: LD_INT 46
34333: PUSH
34334: LD_INT 47
34336: PUSH
34337: LD_INT 82
34339: PUSH
34340: LD_INT 83
34342: PUSH
34343: LD_INT 84
34345: PUSH
34346: LD_INT 85
34348: PUSH
34349: LD_INT 86
34351: PUSH
34352: LD_INT 1
34354: PUSH
34355: LD_INT 2
34357: PUSH
34358: LD_INT 6
34360: PUSH
34361: LD_INT 15
34363: PUSH
34364: LD_INT 16
34366: PUSH
34367: LD_INT 7
34369: PUSH
34370: LD_INT 12
34372: PUSH
34373: LD_INT 13
34375: PUSH
34376: LD_INT 10
34378: PUSH
34379: LD_INT 14
34381: PUSH
34382: LD_INT 20
34384: PUSH
34385: LD_INT 21
34387: PUSH
34388: LD_INT 22
34390: PUSH
34391: LD_INT 25
34393: PUSH
34394: LD_INT 32
34396: PUSH
34397: LD_INT 27
34399: PUSH
34400: LD_INT 36
34402: PUSH
34403: LD_INT 69
34405: PUSH
34406: LD_INT 39
34408: PUSH
34409: LD_INT 34
34411: PUSH
34412: LD_INT 40
34414: PUSH
34415: LD_INT 48
34417: PUSH
34418: LD_INT 49
34420: PUSH
34421: LD_INT 50
34423: PUSH
34424: LD_INT 51
34426: PUSH
34427: LD_INT 52
34429: PUSH
34430: LD_INT 53
34432: PUSH
34433: LD_INT 54
34435: PUSH
34436: LD_INT 55
34438: PUSH
34439: LD_INT 56
34441: PUSH
34442: LD_INT 57
34444: PUSH
34445: LD_INT 58
34447: PUSH
34448: LD_INT 59
34450: PUSH
34451: LD_INT 60
34453: PUSH
34454: LD_INT 61
34456: PUSH
34457: LD_INT 62
34459: PUSH
34460: LD_INT 80
34462: PUSH
34463: LD_INT 82
34465: PUSH
34466: LD_INT 83
34468: PUSH
34469: LD_INT 84
34471: PUSH
34472: LD_INT 85
34474: PUSH
34475: LD_INT 86
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: ST_TO_ADDR
34531: GO 34998
34533: LD_INT 2
34535: DOUBLE
34536: EQUAL
34537: IFTRUE 34541
34539: GO 34767
34541: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
34542: LD_ADDR_VAR 0 4
34546: PUSH
34547: LD_INT 35
34549: PUSH
34550: LD_INT 45
34552: PUSH
34553: LD_INT 46
34555: PUSH
34556: LD_INT 47
34558: PUSH
34559: LD_INT 82
34561: PUSH
34562: LD_INT 83
34564: PUSH
34565: LD_INT 84
34567: PUSH
34568: LD_INT 85
34570: PUSH
34571: LD_INT 87
34573: PUSH
34574: LD_INT 70
34576: PUSH
34577: LD_INT 1
34579: PUSH
34580: LD_INT 11
34582: PUSH
34583: LD_INT 3
34585: PUSH
34586: LD_INT 4
34588: PUSH
34589: LD_INT 5
34591: PUSH
34592: LD_INT 6
34594: PUSH
34595: LD_INT 15
34597: PUSH
34598: LD_INT 18
34600: PUSH
34601: LD_INT 7
34603: PUSH
34604: LD_INT 17
34606: PUSH
34607: LD_INT 8
34609: PUSH
34610: LD_INT 20
34612: PUSH
34613: LD_INT 21
34615: PUSH
34616: LD_INT 22
34618: PUSH
34619: LD_INT 72
34621: PUSH
34622: LD_INT 26
34624: PUSH
34625: LD_INT 69
34627: PUSH
34628: LD_INT 39
34630: PUSH
34631: LD_INT 40
34633: PUSH
34634: LD_INT 41
34636: PUSH
34637: LD_INT 42
34639: PUSH
34640: LD_INT 43
34642: PUSH
34643: LD_INT 48
34645: PUSH
34646: LD_INT 49
34648: PUSH
34649: LD_INT 50
34651: PUSH
34652: LD_INT 51
34654: PUSH
34655: LD_INT 52
34657: PUSH
34658: LD_INT 53
34660: PUSH
34661: LD_INT 54
34663: PUSH
34664: LD_INT 55
34666: PUSH
34667: LD_INT 56
34669: PUSH
34670: LD_INT 60
34672: PUSH
34673: LD_INT 61
34675: PUSH
34676: LD_INT 62
34678: PUSH
34679: LD_INT 66
34681: PUSH
34682: LD_INT 67
34684: PUSH
34685: LD_INT 68
34687: PUSH
34688: LD_INT 81
34690: PUSH
34691: LD_INT 82
34693: PUSH
34694: LD_INT 83
34696: PUSH
34697: LD_INT 84
34699: PUSH
34700: LD_INT 85
34702: PUSH
34703: LD_INT 87
34705: PUSH
34706: LD_INT 88
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: ST_TO_ADDR
34765: GO 34998
34767: LD_INT 3
34769: DOUBLE
34770: EQUAL
34771: IFTRUE 34775
34773: GO 34997
34775: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
34776: LD_ADDR_VAR 0 4
34780: PUSH
34781: LD_INT 46
34783: PUSH
34784: LD_INT 47
34786: PUSH
34787: LD_INT 1
34789: PUSH
34790: LD_INT 2
34792: PUSH
34793: LD_INT 82
34795: PUSH
34796: LD_INT 83
34798: PUSH
34799: LD_INT 84
34801: PUSH
34802: LD_INT 85
34804: PUSH
34805: LD_INT 86
34807: PUSH
34808: LD_INT 11
34810: PUSH
34811: LD_INT 9
34813: PUSH
34814: LD_INT 20
34816: PUSH
34817: LD_INT 19
34819: PUSH
34820: LD_INT 21
34822: PUSH
34823: LD_INT 24
34825: PUSH
34826: LD_INT 22
34828: PUSH
34829: LD_INT 25
34831: PUSH
34832: LD_INT 28
34834: PUSH
34835: LD_INT 29
34837: PUSH
34838: LD_INT 30
34840: PUSH
34841: LD_INT 31
34843: PUSH
34844: LD_INT 37
34846: PUSH
34847: LD_INT 38
34849: PUSH
34850: LD_INT 32
34852: PUSH
34853: LD_INT 27
34855: PUSH
34856: LD_INT 33
34858: PUSH
34859: LD_INT 69
34861: PUSH
34862: LD_INT 39
34864: PUSH
34865: LD_INT 34
34867: PUSH
34868: LD_INT 40
34870: PUSH
34871: LD_INT 71
34873: PUSH
34874: LD_INT 23
34876: PUSH
34877: LD_INT 44
34879: PUSH
34880: LD_INT 48
34882: PUSH
34883: LD_INT 49
34885: PUSH
34886: LD_INT 50
34888: PUSH
34889: LD_INT 51
34891: PUSH
34892: LD_INT 52
34894: PUSH
34895: LD_INT 53
34897: PUSH
34898: LD_INT 54
34900: PUSH
34901: LD_INT 55
34903: PUSH
34904: LD_INT 56
34906: PUSH
34907: LD_INT 57
34909: PUSH
34910: LD_INT 58
34912: PUSH
34913: LD_INT 59
34915: PUSH
34916: LD_INT 63
34918: PUSH
34919: LD_INT 64
34921: PUSH
34922: LD_INT 65
34924: PUSH
34925: LD_INT 82
34927: PUSH
34928: LD_INT 83
34930: PUSH
34931: LD_INT 84
34933: PUSH
34934: LD_INT 85
34936: PUSH
34937: LD_INT 86
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: ST_TO_ADDR
34995: GO 34998
34997: POP
// if state > - 1 and state < 3 then
34998: LD_VAR 0 3
35002: PUSH
35003: LD_INT 1
35005: NEG
35006: GREATER
35007: PUSH
35008: LD_VAR 0 3
35012: PUSH
35013: LD_INT 3
35015: LESS
35016: AND
35017: IFFALSE 35074
// for i in result do
35019: LD_ADDR_VAR 0 5
35023: PUSH
35024: LD_VAR 0 4
35028: PUSH
35029: FOR_IN
35030: IFFALSE 35072
// if GetTech ( i , side ) <> state then
35032: LD_VAR 0 5
35036: PPUSH
35037: LD_VAR 0 1
35041: PPUSH
35042: CALL_OW 321
35046: PUSH
35047: LD_VAR 0 3
35051: NONEQUAL
35052: IFFALSE 35070
// result := result diff i ;
35054: LD_ADDR_VAR 0 4
35058: PUSH
35059: LD_VAR 0 4
35063: PUSH
35064: LD_VAR 0 5
35068: DIFF
35069: ST_TO_ADDR
35070: GO 35029
35072: POP
35073: POP
// end ;
35074: LD_VAR 0 4
35078: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35079: LD_INT 0
35081: PPUSH
35082: PPUSH
35083: PPUSH
// result := true ;
35084: LD_ADDR_VAR 0 3
35088: PUSH
35089: LD_INT 1
35091: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35092: LD_ADDR_VAR 0 5
35096: PUSH
35097: LD_VAR 0 2
35101: PPUSH
35102: CALL_OW 480
35106: ST_TO_ADDR
// if not tmp then
35107: LD_VAR 0 5
35111: NOT
35112: IFFALSE 35116
// exit ;
35114: GO 35165
// for i in tmp do
35116: LD_ADDR_VAR 0 4
35120: PUSH
35121: LD_VAR 0 5
35125: PUSH
35126: FOR_IN
35127: IFFALSE 35163
// if GetTech ( i , side ) <> state_researched then
35129: LD_VAR 0 4
35133: PPUSH
35134: LD_VAR 0 1
35138: PPUSH
35139: CALL_OW 321
35143: PUSH
35144: LD_INT 2
35146: NONEQUAL
35147: IFFALSE 35161
// begin result := false ;
35149: LD_ADDR_VAR 0 3
35153: PUSH
35154: LD_INT 0
35156: ST_TO_ADDR
// exit ;
35157: POP
35158: POP
35159: GO 35165
// end ;
35161: GO 35126
35163: POP
35164: POP
// end ;
35165: LD_VAR 0 3
35169: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
35170: LD_INT 0
35172: PPUSH
35173: PPUSH
35174: PPUSH
35175: PPUSH
35176: PPUSH
35177: PPUSH
35178: PPUSH
35179: PPUSH
35180: PPUSH
35181: PPUSH
35182: PPUSH
35183: PPUSH
35184: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
35185: LD_VAR 0 1
35189: NOT
35190: PUSH
35191: LD_VAR 0 1
35195: PPUSH
35196: CALL_OW 257
35200: PUSH
35201: LD_INT 9
35203: NONEQUAL
35204: OR
35205: IFFALSE 35209
// exit ;
35207: GO 35782
// side := GetSide ( unit ) ;
35209: LD_ADDR_VAR 0 9
35213: PUSH
35214: LD_VAR 0 1
35218: PPUSH
35219: CALL_OW 255
35223: ST_TO_ADDR
// tech_space := tech_spacanom ;
35224: LD_ADDR_VAR 0 12
35228: PUSH
35229: LD_INT 29
35231: ST_TO_ADDR
// tech_time := tech_taurad ;
35232: LD_ADDR_VAR 0 13
35236: PUSH
35237: LD_INT 28
35239: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
35240: LD_ADDR_VAR 0 11
35244: PUSH
35245: LD_VAR 0 1
35249: PPUSH
35250: CALL_OW 310
35254: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
35255: LD_VAR 0 11
35259: PPUSH
35260: CALL_OW 247
35264: PUSH
35265: LD_INT 2
35267: EQUAL
35268: IFFALSE 35272
// exit ;
35270: GO 35782
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35272: LD_ADDR_VAR 0 8
35276: PUSH
35277: LD_INT 81
35279: PUSH
35280: LD_VAR 0 9
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 3
35291: PUSH
35292: LD_INT 21
35294: PUSH
35295: LD_INT 3
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PPUSH
35310: CALL_OW 69
35314: ST_TO_ADDR
// if not tmp then
35315: LD_VAR 0 8
35319: NOT
35320: IFFALSE 35324
// exit ;
35322: GO 35782
// if in_unit then
35324: LD_VAR 0 11
35328: IFFALSE 35352
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35330: LD_ADDR_VAR 0 10
35334: PUSH
35335: LD_VAR 0 8
35339: PPUSH
35340: LD_VAR 0 11
35344: PPUSH
35345: CALL_OW 74
35349: ST_TO_ADDR
35350: GO 35372
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35352: LD_ADDR_VAR 0 10
35356: PUSH
35357: LD_VAR 0 8
35361: PPUSH
35362: LD_VAR 0 1
35366: PPUSH
35367: CALL_OW 74
35371: ST_TO_ADDR
// if not enemy then
35372: LD_VAR 0 10
35376: NOT
35377: IFFALSE 35381
// exit ;
35379: GO 35782
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35381: LD_VAR 0 11
35385: PUSH
35386: LD_VAR 0 11
35390: PPUSH
35391: LD_VAR 0 10
35395: PPUSH
35396: CALL_OW 296
35400: PUSH
35401: LD_INT 13
35403: GREATER
35404: AND
35405: PUSH
35406: LD_VAR 0 1
35410: PPUSH
35411: LD_VAR 0 10
35415: PPUSH
35416: CALL_OW 296
35420: PUSH
35421: LD_INT 12
35423: GREATER
35424: OR
35425: IFFALSE 35429
// exit ;
35427: GO 35782
// missile := [ 1 ] ;
35429: LD_ADDR_VAR 0 14
35433: PUSH
35434: LD_INT 1
35436: PUSH
35437: EMPTY
35438: LIST
35439: ST_TO_ADDR
// if Researched ( side , tech_space ) then
35440: LD_VAR 0 9
35444: PPUSH
35445: LD_VAR 0 12
35449: PPUSH
35450: CALL_OW 325
35454: IFFALSE 35483
// missile := Insert ( missile , missile + 1 , 2 ) ;
35456: LD_ADDR_VAR 0 14
35460: PUSH
35461: LD_VAR 0 14
35465: PPUSH
35466: LD_VAR 0 14
35470: PUSH
35471: LD_INT 1
35473: PLUS
35474: PPUSH
35475: LD_INT 2
35477: PPUSH
35478: CALL_OW 2
35482: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
35483: LD_VAR 0 9
35487: PPUSH
35488: LD_VAR 0 13
35492: PPUSH
35493: CALL_OW 325
35497: PUSH
35498: LD_VAR 0 10
35502: PPUSH
35503: CALL_OW 255
35507: PPUSH
35508: LD_VAR 0 13
35512: PPUSH
35513: CALL_OW 325
35517: NOT
35518: AND
35519: IFFALSE 35548
// missile := Insert ( missile , missile + 1 , 3 ) ;
35521: LD_ADDR_VAR 0 14
35525: PUSH
35526: LD_VAR 0 14
35530: PPUSH
35531: LD_VAR 0 14
35535: PUSH
35536: LD_INT 1
35538: PLUS
35539: PPUSH
35540: LD_INT 3
35542: PPUSH
35543: CALL_OW 2
35547: ST_TO_ADDR
// if missile < 2 then
35548: LD_VAR 0 14
35552: PUSH
35553: LD_INT 2
35555: LESS
35556: IFFALSE 35560
// exit ;
35558: GO 35782
// x := GetX ( enemy ) ;
35560: LD_ADDR_VAR 0 4
35564: PUSH
35565: LD_VAR 0 10
35569: PPUSH
35570: CALL_OW 250
35574: ST_TO_ADDR
// y := GetY ( enemy ) ;
35575: LD_ADDR_VAR 0 5
35579: PUSH
35580: LD_VAR 0 10
35584: PPUSH
35585: CALL_OW 251
35589: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35590: LD_ADDR_VAR 0 6
35594: PUSH
35595: LD_VAR 0 4
35599: PUSH
35600: LD_INT 1
35602: NEG
35603: PPUSH
35604: LD_INT 1
35606: PPUSH
35607: CALL_OW 12
35611: PLUS
35612: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35613: LD_ADDR_VAR 0 7
35617: PUSH
35618: LD_VAR 0 5
35622: PUSH
35623: LD_INT 1
35625: NEG
35626: PPUSH
35627: LD_INT 1
35629: PPUSH
35630: CALL_OW 12
35634: PLUS
35635: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35636: LD_VAR 0 6
35640: PPUSH
35641: LD_VAR 0 7
35645: PPUSH
35646: CALL_OW 488
35650: NOT
35651: IFFALSE 35673
// begin _x := x ;
35653: LD_ADDR_VAR 0 6
35657: PUSH
35658: LD_VAR 0 4
35662: ST_TO_ADDR
// _y := y ;
35663: LD_ADDR_VAR 0 7
35667: PUSH
35668: LD_VAR 0 5
35672: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35673: LD_ADDR_VAR 0 3
35677: PUSH
35678: LD_INT 1
35680: PPUSH
35681: LD_VAR 0 14
35685: PPUSH
35686: CALL_OW 12
35690: ST_TO_ADDR
// case i of 1 :
35691: LD_VAR 0 3
35695: PUSH
35696: LD_INT 1
35698: DOUBLE
35699: EQUAL
35700: IFTRUE 35704
35702: GO 35721
35704: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35705: LD_VAR 0 1
35709: PPUSH
35710: LD_VAR 0 10
35714: PPUSH
35715: CALL_OW 115
35719: GO 35782
35721: LD_INT 2
35723: DOUBLE
35724: EQUAL
35725: IFTRUE 35729
35727: GO 35751
35729: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35730: LD_VAR 0 1
35734: PPUSH
35735: LD_VAR 0 6
35739: PPUSH
35740: LD_VAR 0 7
35744: PPUSH
35745: CALL_OW 153
35749: GO 35782
35751: LD_INT 3
35753: DOUBLE
35754: EQUAL
35755: IFTRUE 35759
35757: GO 35781
35759: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35760: LD_VAR 0 1
35764: PPUSH
35765: LD_VAR 0 6
35769: PPUSH
35770: LD_VAR 0 7
35774: PPUSH
35775: CALL_OW 154
35779: GO 35782
35781: POP
// end ;
35782: LD_VAR 0 2
35786: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35787: LD_INT 0
35789: PPUSH
35790: PPUSH
35791: PPUSH
35792: PPUSH
35793: PPUSH
35794: PPUSH
// if not unit or not building then
35795: LD_VAR 0 1
35799: NOT
35800: PUSH
35801: LD_VAR 0 2
35805: NOT
35806: OR
35807: IFFALSE 35811
// exit ;
35809: GO 35969
// x := GetX ( building ) ;
35811: LD_ADDR_VAR 0 5
35815: PUSH
35816: LD_VAR 0 2
35820: PPUSH
35821: CALL_OW 250
35825: ST_TO_ADDR
// y := GetY ( building ) ;
35826: LD_ADDR_VAR 0 6
35830: PUSH
35831: LD_VAR 0 2
35835: PPUSH
35836: CALL_OW 251
35840: ST_TO_ADDR
// for i = 0 to 5 do
35841: LD_ADDR_VAR 0 4
35845: PUSH
35846: DOUBLE
35847: LD_INT 0
35849: DEC
35850: ST_TO_ADDR
35851: LD_INT 5
35853: PUSH
35854: FOR_TO
35855: IFFALSE 35967
// begin _x := ShiftX ( x , i , 3 ) ;
35857: LD_ADDR_VAR 0 7
35861: PUSH
35862: LD_VAR 0 5
35866: PPUSH
35867: LD_VAR 0 4
35871: PPUSH
35872: LD_INT 3
35874: PPUSH
35875: CALL_OW 272
35879: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35880: LD_ADDR_VAR 0 8
35884: PUSH
35885: LD_VAR 0 6
35889: PPUSH
35890: LD_VAR 0 4
35894: PPUSH
35895: LD_INT 3
35897: PPUSH
35898: CALL_OW 273
35902: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35903: LD_VAR 0 7
35907: PPUSH
35908: LD_VAR 0 8
35912: PPUSH
35913: CALL_OW 488
35917: NOT
35918: IFFALSE 35922
// continue ;
35920: GO 35854
// if HexInfo ( _x , _y ) = 0 then
35922: LD_VAR 0 7
35926: PPUSH
35927: LD_VAR 0 8
35931: PPUSH
35932: CALL_OW 428
35936: PUSH
35937: LD_INT 0
35939: EQUAL
35940: IFFALSE 35965
// begin ComMoveXY ( unit , _x , _y ) ;
35942: LD_VAR 0 1
35946: PPUSH
35947: LD_VAR 0 7
35951: PPUSH
35952: LD_VAR 0 8
35956: PPUSH
35957: CALL_OW 111
// exit ;
35961: POP
35962: POP
35963: GO 35969
// end ; end ;
35965: GO 35854
35967: POP
35968: POP
// end ;
35969: LD_VAR 0 3
35973: RET
// export function ScanBase ( side , base_area ) ; begin
35974: LD_INT 0
35976: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35977: LD_ADDR_VAR 0 3
35981: PUSH
35982: LD_VAR 0 2
35986: PPUSH
35987: LD_INT 81
35989: PUSH
35990: LD_VAR 0 1
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PPUSH
35999: CALL_OW 70
36003: ST_TO_ADDR
// end ;
36004: LD_VAR 0 3
36008: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
36009: LD_INT 0
36011: PPUSH
36012: PPUSH
36013: PPUSH
36014: PPUSH
// result := false ;
36015: LD_ADDR_VAR 0 2
36019: PUSH
36020: LD_INT 0
36022: ST_TO_ADDR
// side := GetSide ( unit ) ;
36023: LD_ADDR_VAR 0 3
36027: PUSH
36028: LD_VAR 0 1
36032: PPUSH
36033: CALL_OW 255
36037: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36038: LD_ADDR_VAR 0 4
36042: PUSH
36043: LD_VAR 0 1
36047: PPUSH
36048: CALL_OW 248
36052: ST_TO_ADDR
// case nat of 1 :
36053: LD_VAR 0 4
36057: PUSH
36058: LD_INT 1
36060: DOUBLE
36061: EQUAL
36062: IFTRUE 36066
36064: GO 36077
36066: POP
// tech := tech_lassight ; 2 :
36067: LD_ADDR_VAR 0 5
36071: PUSH
36072: LD_INT 12
36074: ST_TO_ADDR
36075: GO 36116
36077: LD_INT 2
36079: DOUBLE
36080: EQUAL
36081: IFTRUE 36085
36083: GO 36096
36085: POP
// tech := tech_mortar ; 3 :
36086: LD_ADDR_VAR 0 5
36090: PUSH
36091: LD_INT 41
36093: ST_TO_ADDR
36094: GO 36116
36096: LD_INT 3
36098: DOUBLE
36099: EQUAL
36100: IFTRUE 36104
36102: GO 36115
36104: POP
// tech := tech_bazooka ; end ;
36105: LD_ADDR_VAR 0 5
36109: PUSH
36110: LD_INT 44
36112: ST_TO_ADDR
36113: GO 36116
36115: POP
// if Researched ( side , tech ) then
36116: LD_VAR 0 3
36120: PPUSH
36121: LD_VAR 0 5
36125: PPUSH
36126: CALL_OW 325
36130: IFFALSE 36157
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
36132: LD_ADDR_VAR 0 2
36136: PUSH
36137: LD_INT 5
36139: PUSH
36140: LD_INT 8
36142: PUSH
36143: LD_INT 9
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: LIST
36150: PUSH
36151: LD_VAR 0 4
36155: ARRAY
36156: ST_TO_ADDR
// end ;
36157: LD_VAR 0 2
36161: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
36162: LD_INT 0
36164: PPUSH
36165: PPUSH
36166: PPUSH
// if not mines then
36167: LD_VAR 0 2
36171: NOT
36172: IFFALSE 36176
// exit ;
36174: GO 36320
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36176: LD_ADDR_VAR 0 5
36180: PUSH
36181: LD_INT 81
36183: PUSH
36184: LD_VAR 0 1
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 3
36195: PUSH
36196: LD_INT 21
36198: PUSH
36199: LD_INT 3
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PPUSH
36214: CALL_OW 69
36218: ST_TO_ADDR
// for i in mines do
36219: LD_ADDR_VAR 0 4
36223: PUSH
36224: LD_VAR 0 2
36228: PUSH
36229: FOR_IN
36230: IFFALSE 36318
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
36232: LD_VAR 0 4
36236: PUSH
36237: LD_INT 1
36239: ARRAY
36240: PPUSH
36241: LD_VAR 0 4
36245: PUSH
36246: LD_INT 2
36248: ARRAY
36249: PPUSH
36250: CALL_OW 458
36254: NOT
36255: IFFALSE 36259
// continue ;
36257: GO 36229
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
36259: LD_VAR 0 4
36263: PUSH
36264: LD_INT 1
36266: ARRAY
36267: PPUSH
36268: LD_VAR 0 4
36272: PUSH
36273: LD_INT 2
36275: ARRAY
36276: PPUSH
36277: CALL_OW 428
36281: PUSH
36282: LD_VAR 0 5
36286: IN
36287: IFFALSE 36316
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
36289: LD_VAR 0 4
36293: PUSH
36294: LD_INT 1
36296: ARRAY
36297: PPUSH
36298: LD_VAR 0 4
36302: PUSH
36303: LD_INT 2
36305: ARRAY
36306: PPUSH
36307: LD_VAR 0 1
36311: PPUSH
36312: CALL_OW 456
// end ;
36316: GO 36229
36318: POP
36319: POP
// end ;
36320: LD_VAR 0 3
36324: RET
// export function Count ( array ) ; var i ; begin
36325: LD_INT 0
36327: PPUSH
36328: PPUSH
// result := 0 ;
36329: LD_ADDR_VAR 0 2
36333: PUSH
36334: LD_INT 0
36336: ST_TO_ADDR
// for i in array do
36337: LD_ADDR_VAR 0 3
36341: PUSH
36342: LD_VAR 0 1
36346: PUSH
36347: FOR_IN
36348: IFFALSE 36372
// if i then
36350: LD_VAR 0 3
36354: IFFALSE 36370
// result := result + 1 ;
36356: LD_ADDR_VAR 0 2
36360: PUSH
36361: LD_VAR 0 2
36365: PUSH
36366: LD_INT 1
36368: PLUS
36369: ST_TO_ADDR
36370: GO 36347
36372: POP
36373: POP
// end ;
36374: LD_VAR 0 2
36378: RET
// export function IsEmpty ( building ) ; begin
36379: LD_INT 0
36381: PPUSH
// if not building then
36382: LD_VAR 0 1
36386: NOT
36387: IFFALSE 36391
// exit ;
36389: GO 36434
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
36391: LD_ADDR_VAR 0 2
36395: PUSH
36396: LD_VAR 0 1
36400: PUSH
36401: LD_INT 22
36403: PUSH
36404: LD_VAR 0 1
36408: PPUSH
36409: CALL_OW 255
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 58
36420: PUSH
36421: EMPTY
36422: LIST
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PPUSH
36428: CALL_OW 69
36432: IN
36433: ST_TO_ADDR
// end ;
36434: LD_VAR 0 2
36438: RET
// export function IsNotFull ( building ) ; begin
36439: LD_INT 0
36441: PPUSH
// if not building then
36442: LD_VAR 0 1
36446: NOT
36447: IFFALSE 36451
// exit ;
36449: GO 36470
// result := UnitsInside ( building ) < 6 ;
36451: LD_ADDR_VAR 0 2
36455: PUSH
36456: LD_VAR 0 1
36460: PPUSH
36461: CALL_OW 313
36465: PUSH
36466: LD_INT 6
36468: LESS
36469: ST_TO_ADDR
// end ;
36470: LD_VAR 0 2
36474: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
36475: LD_INT 0
36477: PPUSH
36478: PPUSH
36479: PPUSH
36480: PPUSH
// tmp := [ ] ;
36481: LD_ADDR_VAR 0 3
36485: PUSH
36486: EMPTY
36487: ST_TO_ADDR
// list := [ ] ;
36488: LD_ADDR_VAR 0 5
36492: PUSH
36493: EMPTY
36494: ST_TO_ADDR
// for i = 16 to 25 do
36495: LD_ADDR_VAR 0 4
36499: PUSH
36500: DOUBLE
36501: LD_INT 16
36503: DEC
36504: ST_TO_ADDR
36505: LD_INT 25
36507: PUSH
36508: FOR_TO
36509: IFFALSE 36582
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
36511: LD_ADDR_VAR 0 3
36515: PUSH
36516: LD_VAR 0 3
36520: PUSH
36521: LD_INT 22
36523: PUSH
36524: LD_VAR 0 1
36528: PPUSH
36529: CALL_OW 255
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 91
36540: PUSH
36541: LD_VAR 0 1
36545: PUSH
36546: LD_INT 6
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 30
36556: PUSH
36557: LD_VAR 0 4
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: LIST
36570: PUSH
36571: EMPTY
36572: LIST
36573: PPUSH
36574: CALL_OW 69
36578: ADD
36579: ST_TO_ADDR
36580: GO 36508
36582: POP
36583: POP
// for i = 1 to tmp do
36584: LD_ADDR_VAR 0 4
36588: PUSH
36589: DOUBLE
36590: LD_INT 1
36592: DEC
36593: ST_TO_ADDR
36594: LD_VAR 0 3
36598: PUSH
36599: FOR_TO
36600: IFFALSE 36688
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36602: LD_ADDR_VAR 0 5
36606: PUSH
36607: LD_VAR 0 5
36611: PUSH
36612: LD_VAR 0 3
36616: PUSH
36617: LD_VAR 0 4
36621: ARRAY
36622: PPUSH
36623: CALL_OW 266
36627: PUSH
36628: LD_VAR 0 3
36632: PUSH
36633: LD_VAR 0 4
36637: ARRAY
36638: PPUSH
36639: CALL_OW 250
36643: PUSH
36644: LD_VAR 0 3
36648: PUSH
36649: LD_VAR 0 4
36653: ARRAY
36654: PPUSH
36655: CALL_OW 251
36659: PUSH
36660: LD_VAR 0 3
36664: PUSH
36665: LD_VAR 0 4
36669: ARRAY
36670: PPUSH
36671: CALL_OW 254
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: PUSH
36682: EMPTY
36683: LIST
36684: ADD
36685: ST_TO_ADDR
36686: GO 36599
36688: POP
36689: POP
// result := list ;
36690: LD_ADDR_VAR 0 2
36694: PUSH
36695: LD_VAR 0 5
36699: ST_TO_ADDR
// end ;
36700: LD_VAR 0 2
36704: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36705: LD_INT 0
36707: PPUSH
36708: PPUSH
36709: PPUSH
36710: PPUSH
36711: PPUSH
36712: PPUSH
36713: PPUSH
// if not factory then
36714: LD_VAR 0 1
36718: NOT
36719: IFFALSE 36723
// exit ;
36721: GO 37316
// if control = control_apeman then
36723: LD_VAR 0 4
36727: PUSH
36728: LD_INT 5
36730: EQUAL
36731: IFFALSE 36840
// begin tmp := UnitsInside ( factory ) ;
36733: LD_ADDR_VAR 0 8
36737: PUSH
36738: LD_VAR 0 1
36742: PPUSH
36743: CALL_OW 313
36747: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36748: LD_VAR 0 8
36752: PPUSH
36753: LD_INT 25
36755: PUSH
36756: LD_INT 12
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PPUSH
36763: CALL_OW 72
36767: NOT
36768: IFFALSE 36778
// control := control_manual ;
36770: LD_ADDR_VAR 0 4
36774: PUSH
36775: LD_INT 1
36777: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36778: LD_ADDR_VAR 0 8
36782: PUSH
36783: LD_VAR 0 1
36787: PPUSH
36788: CALL 36475 0 1
36792: ST_TO_ADDR
// if tmp then
36793: LD_VAR 0 8
36797: IFFALSE 36840
// begin for i in tmp do
36799: LD_ADDR_VAR 0 7
36803: PUSH
36804: LD_VAR 0 8
36808: PUSH
36809: FOR_IN
36810: IFFALSE 36838
// if i [ 1 ] = b_ext_radio then
36812: LD_VAR 0 7
36816: PUSH
36817: LD_INT 1
36819: ARRAY
36820: PUSH
36821: LD_INT 22
36823: EQUAL
36824: IFFALSE 36836
// begin control := control_remote ;
36826: LD_ADDR_VAR 0 4
36830: PUSH
36831: LD_INT 2
36833: ST_TO_ADDR
// break ;
36834: GO 36838
// end ;
36836: GO 36809
36838: POP
36839: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36840: LD_VAR 0 1
36844: PPUSH
36845: LD_VAR 0 2
36849: PPUSH
36850: LD_VAR 0 3
36854: PPUSH
36855: LD_VAR 0 4
36859: PPUSH
36860: LD_VAR 0 5
36864: PPUSH
36865: CALL_OW 448
36869: IFFALSE 36904
// begin result := [ chassis , engine , control , weapon ] ;
36871: LD_ADDR_VAR 0 6
36875: PUSH
36876: LD_VAR 0 2
36880: PUSH
36881: LD_VAR 0 3
36885: PUSH
36886: LD_VAR 0 4
36890: PUSH
36891: LD_VAR 0 5
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: ST_TO_ADDR
// exit ;
36902: GO 37316
// end ; _chassis := AvailableChassisList ( factory ) ;
36904: LD_ADDR_VAR 0 9
36908: PUSH
36909: LD_VAR 0 1
36913: PPUSH
36914: CALL_OW 475
36918: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36919: LD_ADDR_VAR 0 11
36923: PUSH
36924: LD_VAR 0 1
36928: PPUSH
36929: CALL_OW 476
36933: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36934: LD_ADDR_VAR 0 12
36938: PUSH
36939: LD_VAR 0 1
36943: PPUSH
36944: CALL_OW 477
36948: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36949: LD_ADDR_VAR 0 10
36953: PUSH
36954: LD_VAR 0 1
36958: PPUSH
36959: CALL_OW 478
36963: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36964: LD_VAR 0 9
36968: NOT
36969: PUSH
36970: LD_VAR 0 11
36974: NOT
36975: OR
36976: PUSH
36977: LD_VAR 0 12
36981: NOT
36982: OR
36983: PUSH
36984: LD_VAR 0 10
36988: NOT
36989: OR
36990: IFFALSE 37025
// begin result := [ chassis , engine , control , weapon ] ;
36992: LD_ADDR_VAR 0 6
36996: PUSH
36997: LD_VAR 0 2
37001: PUSH
37002: LD_VAR 0 3
37006: PUSH
37007: LD_VAR 0 4
37011: PUSH
37012: LD_VAR 0 5
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: ST_TO_ADDR
// exit ;
37023: GO 37316
// end ; if not chassis in _chassis then
37025: LD_VAR 0 2
37029: PUSH
37030: LD_VAR 0 9
37034: IN
37035: NOT
37036: IFFALSE 37062
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
37038: LD_ADDR_VAR 0 2
37042: PUSH
37043: LD_VAR 0 9
37047: PUSH
37048: LD_INT 1
37050: PPUSH
37051: LD_VAR 0 9
37055: PPUSH
37056: CALL_OW 12
37060: ARRAY
37061: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
37062: LD_VAR 0 2
37066: PPUSH
37067: LD_VAR 0 3
37071: PPUSH
37072: CALL 37321 0 2
37076: NOT
37077: IFFALSE 37136
// repeat engine := _engine [ 1 ] ;
37079: LD_ADDR_VAR 0 3
37083: PUSH
37084: LD_VAR 0 11
37088: PUSH
37089: LD_INT 1
37091: ARRAY
37092: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
37093: LD_ADDR_VAR 0 11
37097: PUSH
37098: LD_VAR 0 11
37102: PPUSH
37103: LD_INT 1
37105: PPUSH
37106: CALL_OW 3
37110: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37111: LD_VAR 0 2
37115: PPUSH
37116: LD_VAR 0 3
37120: PPUSH
37121: CALL 37321 0 2
37125: PUSH
37126: LD_VAR 0 11
37130: PUSH
37131: EMPTY
37132: EQUAL
37133: OR
37134: IFFALSE 37079
// if not control in _control then
37136: LD_VAR 0 4
37140: PUSH
37141: LD_VAR 0 12
37145: IN
37146: NOT
37147: IFFALSE 37173
// control := _control [ rand ( 1 , _control ) ] ;
37149: LD_ADDR_VAR 0 4
37153: PUSH
37154: LD_VAR 0 12
37158: PUSH
37159: LD_INT 1
37161: PPUSH
37162: LD_VAR 0 12
37166: PPUSH
37167: CALL_OW 12
37171: ARRAY
37172: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
37173: LD_VAR 0 2
37177: PPUSH
37178: LD_VAR 0 5
37182: PPUSH
37183: CALL 37541 0 2
37187: NOT
37188: IFFALSE 37247
// repeat weapon := _weapon [ 1 ] ;
37190: LD_ADDR_VAR 0 5
37194: PUSH
37195: LD_VAR 0 10
37199: PUSH
37200: LD_INT 1
37202: ARRAY
37203: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
37204: LD_ADDR_VAR 0 10
37208: PUSH
37209: LD_VAR 0 10
37213: PPUSH
37214: LD_INT 1
37216: PPUSH
37217: CALL_OW 3
37221: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
37222: LD_VAR 0 2
37226: PPUSH
37227: LD_VAR 0 5
37231: PPUSH
37232: CALL 37541 0 2
37236: PUSH
37237: LD_VAR 0 10
37241: PUSH
37242: EMPTY
37243: EQUAL
37244: OR
37245: IFFALSE 37190
// result := [ ] ;
37247: LD_ADDR_VAR 0 6
37251: PUSH
37252: EMPTY
37253: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37254: LD_VAR 0 1
37258: PPUSH
37259: LD_VAR 0 2
37263: PPUSH
37264: LD_VAR 0 3
37268: PPUSH
37269: LD_VAR 0 4
37273: PPUSH
37274: LD_VAR 0 5
37278: PPUSH
37279: CALL_OW 448
37283: IFFALSE 37316
// result := [ chassis , engine , control , weapon ] ;
37285: LD_ADDR_VAR 0 6
37289: PUSH
37290: LD_VAR 0 2
37294: PUSH
37295: LD_VAR 0 3
37299: PUSH
37300: LD_VAR 0 4
37304: PUSH
37305: LD_VAR 0 5
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: ST_TO_ADDR
// end ;
37316: LD_VAR 0 6
37320: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
37321: LD_INT 0
37323: PPUSH
// if not chassis or not engine then
37324: LD_VAR 0 1
37328: NOT
37329: PUSH
37330: LD_VAR 0 2
37334: NOT
37335: OR
37336: IFFALSE 37340
// exit ;
37338: GO 37536
// case engine of engine_solar :
37340: LD_VAR 0 2
37344: PUSH
37345: LD_INT 2
37347: DOUBLE
37348: EQUAL
37349: IFTRUE 37353
37351: GO 37391
37353: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
37354: LD_ADDR_VAR 0 3
37358: PUSH
37359: LD_INT 11
37361: PUSH
37362: LD_INT 12
37364: PUSH
37365: LD_INT 13
37367: PUSH
37368: LD_INT 14
37370: PUSH
37371: LD_INT 1
37373: PUSH
37374: LD_INT 2
37376: PUSH
37377: LD_INT 3
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: ST_TO_ADDR
37389: GO 37520
37391: LD_INT 1
37393: DOUBLE
37394: EQUAL
37395: IFTRUE 37399
37397: GO 37461
37399: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
37400: LD_ADDR_VAR 0 3
37404: PUSH
37405: LD_INT 11
37407: PUSH
37408: LD_INT 12
37410: PUSH
37411: LD_INT 13
37413: PUSH
37414: LD_INT 14
37416: PUSH
37417: LD_INT 1
37419: PUSH
37420: LD_INT 2
37422: PUSH
37423: LD_INT 3
37425: PUSH
37426: LD_INT 4
37428: PUSH
37429: LD_INT 5
37431: PUSH
37432: LD_INT 21
37434: PUSH
37435: LD_INT 23
37437: PUSH
37438: LD_INT 22
37440: PUSH
37441: LD_INT 24
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: ST_TO_ADDR
37459: GO 37520
37461: LD_INT 3
37463: DOUBLE
37464: EQUAL
37465: IFTRUE 37469
37467: GO 37519
37469: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37470: LD_ADDR_VAR 0 3
37474: PUSH
37475: LD_INT 13
37477: PUSH
37478: LD_INT 14
37480: PUSH
37481: LD_INT 2
37483: PUSH
37484: LD_INT 3
37486: PUSH
37487: LD_INT 4
37489: PUSH
37490: LD_INT 5
37492: PUSH
37493: LD_INT 21
37495: PUSH
37496: LD_INT 22
37498: PUSH
37499: LD_INT 23
37501: PUSH
37502: LD_INT 24
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: ST_TO_ADDR
37517: GO 37520
37519: POP
// result := ( chassis in result ) ;
37520: LD_ADDR_VAR 0 3
37524: PUSH
37525: LD_VAR 0 1
37529: PUSH
37530: LD_VAR 0 3
37534: IN
37535: ST_TO_ADDR
// end ;
37536: LD_VAR 0 3
37540: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
37541: LD_INT 0
37543: PPUSH
// if not chassis or not weapon then
37544: LD_VAR 0 1
37548: NOT
37549: PUSH
37550: LD_VAR 0 2
37554: NOT
37555: OR
37556: IFFALSE 37560
// exit ;
37558: GO 38622
// case weapon of us_machine_gun :
37560: LD_VAR 0 2
37564: PUSH
37565: LD_INT 2
37567: DOUBLE
37568: EQUAL
37569: IFTRUE 37573
37571: GO 37603
37573: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37574: LD_ADDR_VAR 0 3
37578: PUSH
37579: LD_INT 1
37581: PUSH
37582: LD_INT 2
37584: PUSH
37585: LD_INT 3
37587: PUSH
37588: LD_INT 4
37590: PUSH
37591: LD_INT 5
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: ST_TO_ADDR
37601: GO 38606
37603: LD_INT 3
37605: DOUBLE
37606: EQUAL
37607: IFTRUE 37611
37609: GO 37641
37611: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37612: LD_ADDR_VAR 0 3
37616: PUSH
37617: LD_INT 1
37619: PUSH
37620: LD_INT 2
37622: PUSH
37623: LD_INT 3
37625: PUSH
37626: LD_INT 4
37628: PUSH
37629: LD_INT 5
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: ST_TO_ADDR
37639: GO 38606
37641: LD_INT 11
37643: DOUBLE
37644: EQUAL
37645: IFTRUE 37649
37647: GO 37679
37649: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37650: LD_ADDR_VAR 0 3
37654: PUSH
37655: LD_INT 1
37657: PUSH
37658: LD_INT 2
37660: PUSH
37661: LD_INT 3
37663: PUSH
37664: LD_INT 4
37666: PUSH
37667: LD_INT 5
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: ST_TO_ADDR
37677: GO 38606
37679: LD_INT 4
37681: DOUBLE
37682: EQUAL
37683: IFTRUE 37687
37685: GO 37713
37687: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37688: LD_ADDR_VAR 0 3
37692: PUSH
37693: LD_INT 2
37695: PUSH
37696: LD_INT 3
37698: PUSH
37699: LD_INT 4
37701: PUSH
37702: LD_INT 5
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: ST_TO_ADDR
37711: GO 38606
37713: LD_INT 5
37715: DOUBLE
37716: EQUAL
37717: IFTRUE 37721
37719: GO 37747
37721: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37722: LD_ADDR_VAR 0 3
37726: PUSH
37727: LD_INT 2
37729: PUSH
37730: LD_INT 3
37732: PUSH
37733: LD_INT 4
37735: PUSH
37736: LD_INT 5
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: ST_TO_ADDR
37745: GO 38606
37747: LD_INT 9
37749: DOUBLE
37750: EQUAL
37751: IFTRUE 37755
37753: GO 37781
37755: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37756: LD_ADDR_VAR 0 3
37760: PUSH
37761: LD_INT 2
37763: PUSH
37764: LD_INT 3
37766: PUSH
37767: LD_INT 4
37769: PUSH
37770: LD_INT 5
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: ST_TO_ADDR
37779: GO 38606
37781: LD_INT 7
37783: DOUBLE
37784: EQUAL
37785: IFTRUE 37789
37787: GO 37815
37789: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37790: LD_ADDR_VAR 0 3
37794: PUSH
37795: LD_INT 2
37797: PUSH
37798: LD_INT 3
37800: PUSH
37801: LD_INT 4
37803: PUSH
37804: LD_INT 5
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: ST_TO_ADDR
37813: GO 38606
37815: LD_INT 12
37817: DOUBLE
37818: EQUAL
37819: IFTRUE 37823
37821: GO 37849
37823: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37824: LD_ADDR_VAR 0 3
37828: PUSH
37829: LD_INT 2
37831: PUSH
37832: LD_INT 3
37834: PUSH
37835: LD_INT 4
37837: PUSH
37838: LD_INT 5
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: ST_TO_ADDR
37847: GO 38606
37849: LD_INT 13
37851: DOUBLE
37852: EQUAL
37853: IFTRUE 37857
37855: GO 37883
37857: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37858: LD_ADDR_VAR 0 3
37862: PUSH
37863: LD_INT 2
37865: PUSH
37866: LD_INT 3
37868: PUSH
37869: LD_INT 4
37871: PUSH
37872: LD_INT 5
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: ST_TO_ADDR
37881: GO 38606
37883: LD_INT 14
37885: DOUBLE
37886: EQUAL
37887: IFTRUE 37891
37889: GO 37909
37891: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37892: LD_ADDR_VAR 0 3
37896: PUSH
37897: LD_INT 4
37899: PUSH
37900: LD_INT 5
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: ST_TO_ADDR
37907: GO 38606
37909: LD_INT 6
37911: DOUBLE
37912: EQUAL
37913: IFTRUE 37917
37915: GO 37935
37917: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37918: LD_ADDR_VAR 0 3
37922: PUSH
37923: LD_INT 4
37925: PUSH
37926: LD_INT 5
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: ST_TO_ADDR
37933: GO 38606
37935: LD_INT 10
37937: DOUBLE
37938: EQUAL
37939: IFTRUE 37943
37941: GO 37961
37943: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37944: LD_ADDR_VAR 0 3
37948: PUSH
37949: LD_INT 4
37951: PUSH
37952: LD_INT 5
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: ST_TO_ADDR
37959: GO 38606
37961: LD_INT 22
37963: DOUBLE
37964: EQUAL
37965: IFTRUE 37969
37967: GO 37995
37969: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37970: LD_ADDR_VAR 0 3
37974: PUSH
37975: LD_INT 11
37977: PUSH
37978: LD_INT 12
37980: PUSH
37981: LD_INT 13
37983: PUSH
37984: LD_INT 14
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: ST_TO_ADDR
37993: GO 38606
37995: LD_INT 23
37997: DOUBLE
37998: EQUAL
37999: IFTRUE 38003
38001: GO 38029
38003: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
38004: LD_ADDR_VAR 0 3
38008: PUSH
38009: LD_INT 11
38011: PUSH
38012: LD_INT 12
38014: PUSH
38015: LD_INT 13
38017: PUSH
38018: LD_INT 14
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: ST_TO_ADDR
38027: GO 38606
38029: LD_INT 24
38031: DOUBLE
38032: EQUAL
38033: IFTRUE 38037
38035: GO 38063
38037: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
38038: LD_ADDR_VAR 0 3
38042: PUSH
38043: LD_INT 11
38045: PUSH
38046: LD_INT 12
38048: PUSH
38049: LD_INT 13
38051: PUSH
38052: LD_INT 14
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: ST_TO_ADDR
38061: GO 38606
38063: LD_INT 30
38065: DOUBLE
38066: EQUAL
38067: IFTRUE 38071
38069: GO 38097
38071: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
38072: LD_ADDR_VAR 0 3
38076: PUSH
38077: LD_INT 11
38079: PUSH
38080: LD_INT 12
38082: PUSH
38083: LD_INT 13
38085: PUSH
38086: LD_INT 14
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: ST_TO_ADDR
38095: GO 38606
38097: LD_INT 25
38099: DOUBLE
38100: EQUAL
38101: IFTRUE 38105
38103: GO 38123
38105: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38106: LD_ADDR_VAR 0 3
38110: PUSH
38111: LD_INT 13
38113: PUSH
38114: LD_INT 14
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: ST_TO_ADDR
38121: GO 38606
38123: LD_INT 27
38125: DOUBLE
38126: EQUAL
38127: IFTRUE 38131
38129: GO 38149
38131: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
38132: LD_ADDR_VAR 0 3
38136: PUSH
38137: LD_INT 13
38139: PUSH
38140: LD_INT 14
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: ST_TO_ADDR
38147: GO 38606
38149: LD_EXP 41
38153: DOUBLE
38154: EQUAL
38155: IFTRUE 38159
38157: GO 38185
38159: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
38160: LD_ADDR_VAR 0 3
38164: PUSH
38165: LD_INT 11
38167: PUSH
38168: LD_INT 12
38170: PUSH
38171: LD_INT 13
38173: PUSH
38174: LD_INT 14
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: ST_TO_ADDR
38183: GO 38606
38185: LD_INT 28
38187: DOUBLE
38188: EQUAL
38189: IFTRUE 38193
38191: GO 38211
38193: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
38194: LD_ADDR_VAR 0 3
38198: PUSH
38199: LD_INT 13
38201: PUSH
38202: LD_INT 14
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: ST_TO_ADDR
38209: GO 38606
38211: LD_INT 29
38213: DOUBLE
38214: EQUAL
38215: IFTRUE 38219
38217: GO 38237
38219: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
38220: LD_ADDR_VAR 0 3
38224: PUSH
38225: LD_INT 13
38227: PUSH
38228: LD_INT 14
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: ST_TO_ADDR
38235: GO 38606
38237: LD_INT 31
38239: DOUBLE
38240: EQUAL
38241: IFTRUE 38245
38243: GO 38263
38245: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
38246: LD_ADDR_VAR 0 3
38250: PUSH
38251: LD_INT 13
38253: PUSH
38254: LD_INT 14
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: ST_TO_ADDR
38261: GO 38606
38263: LD_INT 26
38265: DOUBLE
38266: EQUAL
38267: IFTRUE 38271
38269: GO 38289
38271: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
38272: LD_ADDR_VAR 0 3
38276: PUSH
38277: LD_INT 13
38279: PUSH
38280: LD_INT 14
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: ST_TO_ADDR
38287: GO 38606
38289: LD_INT 42
38291: DOUBLE
38292: EQUAL
38293: IFTRUE 38297
38295: GO 38323
38297: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
38298: LD_ADDR_VAR 0 3
38302: PUSH
38303: LD_INT 21
38305: PUSH
38306: LD_INT 22
38308: PUSH
38309: LD_INT 23
38311: PUSH
38312: LD_INT 24
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: ST_TO_ADDR
38321: GO 38606
38323: LD_INT 43
38325: DOUBLE
38326: EQUAL
38327: IFTRUE 38331
38329: GO 38357
38331: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
38332: LD_ADDR_VAR 0 3
38336: PUSH
38337: LD_INT 21
38339: PUSH
38340: LD_INT 22
38342: PUSH
38343: LD_INT 23
38345: PUSH
38346: LD_INT 24
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: ST_TO_ADDR
38355: GO 38606
38357: LD_INT 44
38359: DOUBLE
38360: EQUAL
38361: IFTRUE 38365
38363: GO 38391
38365: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
38366: LD_ADDR_VAR 0 3
38370: PUSH
38371: LD_INT 21
38373: PUSH
38374: LD_INT 22
38376: PUSH
38377: LD_INT 23
38379: PUSH
38380: LD_INT 24
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: ST_TO_ADDR
38389: GO 38606
38391: LD_INT 45
38393: DOUBLE
38394: EQUAL
38395: IFTRUE 38399
38397: GO 38425
38399: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
38400: LD_ADDR_VAR 0 3
38404: PUSH
38405: LD_INT 21
38407: PUSH
38408: LD_INT 22
38410: PUSH
38411: LD_INT 23
38413: PUSH
38414: LD_INT 24
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: ST_TO_ADDR
38423: GO 38606
38425: LD_INT 49
38427: DOUBLE
38428: EQUAL
38429: IFTRUE 38433
38431: GO 38459
38433: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
38434: LD_ADDR_VAR 0 3
38438: PUSH
38439: LD_INT 21
38441: PUSH
38442: LD_INT 22
38444: PUSH
38445: LD_INT 23
38447: PUSH
38448: LD_INT 24
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: ST_TO_ADDR
38457: GO 38606
38459: LD_INT 51
38461: DOUBLE
38462: EQUAL
38463: IFTRUE 38467
38465: GO 38493
38467: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
38468: LD_ADDR_VAR 0 3
38472: PUSH
38473: LD_INT 21
38475: PUSH
38476: LD_INT 22
38478: PUSH
38479: LD_INT 23
38481: PUSH
38482: LD_INT 24
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: ST_TO_ADDR
38491: GO 38606
38493: LD_INT 52
38495: DOUBLE
38496: EQUAL
38497: IFTRUE 38501
38499: GO 38527
38501: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
38502: LD_ADDR_VAR 0 3
38506: PUSH
38507: LD_INT 21
38509: PUSH
38510: LD_INT 22
38512: PUSH
38513: LD_INT 23
38515: PUSH
38516: LD_INT 24
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: ST_TO_ADDR
38525: GO 38606
38527: LD_INT 53
38529: DOUBLE
38530: EQUAL
38531: IFTRUE 38535
38533: GO 38553
38535: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
38536: LD_ADDR_VAR 0 3
38540: PUSH
38541: LD_INT 23
38543: PUSH
38544: LD_INT 24
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: ST_TO_ADDR
38551: GO 38606
38553: LD_INT 46
38555: DOUBLE
38556: EQUAL
38557: IFTRUE 38561
38559: GO 38579
38561: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
38562: LD_ADDR_VAR 0 3
38566: PUSH
38567: LD_INT 23
38569: PUSH
38570: LD_INT 24
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: ST_TO_ADDR
38577: GO 38606
38579: LD_INT 47
38581: DOUBLE
38582: EQUAL
38583: IFTRUE 38587
38585: GO 38605
38587: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38588: LD_ADDR_VAR 0 3
38592: PUSH
38593: LD_INT 23
38595: PUSH
38596: LD_INT 24
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: ST_TO_ADDR
38603: GO 38606
38605: POP
// result := ( chassis in result ) ;
38606: LD_ADDR_VAR 0 3
38610: PUSH
38611: LD_VAR 0 1
38615: PUSH
38616: LD_VAR 0 3
38620: IN
38621: ST_TO_ADDR
// end ;
38622: LD_VAR 0 3
38626: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38627: LD_INT 0
38629: PPUSH
38630: PPUSH
38631: PPUSH
38632: PPUSH
38633: PPUSH
38634: PPUSH
38635: PPUSH
// result := array ;
38636: LD_ADDR_VAR 0 5
38640: PUSH
38641: LD_VAR 0 1
38645: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38646: LD_VAR 0 1
38650: NOT
38651: PUSH
38652: LD_VAR 0 2
38656: NOT
38657: OR
38658: PUSH
38659: LD_VAR 0 3
38663: NOT
38664: OR
38665: PUSH
38666: LD_VAR 0 2
38670: PUSH
38671: LD_VAR 0 1
38675: GREATER
38676: OR
38677: PUSH
38678: LD_VAR 0 3
38682: PUSH
38683: LD_VAR 0 1
38687: GREATER
38688: OR
38689: IFFALSE 38693
// exit ;
38691: GO 38989
// if direction then
38693: LD_VAR 0 4
38697: IFFALSE 38761
// begin d := 1 ;
38699: LD_ADDR_VAR 0 9
38703: PUSH
38704: LD_INT 1
38706: ST_TO_ADDR
// if i_from > i_to then
38707: LD_VAR 0 2
38711: PUSH
38712: LD_VAR 0 3
38716: GREATER
38717: IFFALSE 38743
// length := ( array - i_from ) + i_to else
38719: LD_ADDR_VAR 0 11
38723: PUSH
38724: LD_VAR 0 1
38728: PUSH
38729: LD_VAR 0 2
38733: MINUS
38734: PUSH
38735: LD_VAR 0 3
38739: PLUS
38740: ST_TO_ADDR
38741: GO 38759
// length := i_to - i_from ;
38743: LD_ADDR_VAR 0 11
38747: PUSH
38748: LD_VAR 0 3
38752: PUSH
38753: LD_VAR 0 2
38757: MINUS
38758: ST_TO_ADDR
// end else
38759: GO 38822
// begin d := - 1 ;
38761: LD_ADDR_VAR 0 9
38765: PUSH
38766: LD_INT 1
38768: NEG
38769: ST_TO_ADDR
// if i_from > i_to then
38770: LD_VAR 0 2
38774: PUSH
38775: LD_VAR 0 3
38779: GREATER
38780: IFFALSE 38800
// length := i_from - i_to else
38782: LD_ADDR_VAR 0 11
38786: PUSH
38787: LD_VAR 0 2
38791: PUSH
38792: LD_VAR 0 3
38796: MINUS
38797: ST_TO_ADDR
38798: GO 38822
// length := ( array - i_to ) + i_from ;
38800: LD_ADDR_VAR 0 11
38804: PUSH
38805: LD_VAR 0 1
38809: PUSH
38810: LD_VAR 0 3
38814: MINUS
38815: PUSH
38816: LD_VAR 0 2
38820: PLUS
38821: ST_TO_ADDR
// end ; if not length then
38822: LD_VAR 0 11
38826: NOT
38827: IFFALSE 38831
// exit ;
38829: GO 38989
// tmp := array ;
38831: LD_ADDR_VAR 0 10
38835: PUSH
38836: LD_VAR 0 1
38840: ST_TO_ADDR
// for i = 1 to length do
38841: LD_ADDR_VAR 0 6
38845: PUSH
38846: DOUBLE
38847: LD_INT 1
38849: DEC
38850: ST_TO_ADDR
38851: LD_VAR 0 11
38855: PUSH
38856: FOR_TO
38857: IFFALSE 38977
// begin for j = 1 to array do
38859: LD_ADDR_VAR 0 7
38863: PUSH
38864: DOUBLE
38865: LD_INT 1
38867: DEC
38868: ST_TO_ADDR
38869: LD_VAR 0 1
38873: PUSH
38874: FOR_TO
38875: IFFALSE 38963
// begin k := j + d ;
38877: LD_ADDR_VAR 0 8
38881: PUSH
38882: LD_VAR 0 7
38886: PUSH
38887: LD_VAR 0 9
38891: PLUS
38892: ST_TO_ADDR
// if k > array then
38893: LD_VAR 0 8
38897: PUSH
38898: LD_VAR 0 1
38902: GREATER
38903: IFFALSE 38913
// k := 1 ;
38905: LD_ADDR_VAR 0 8
38909: PUSH
38910: LD_INT 1
38912: ST_TO_ADDR
// if not k then
38913: LD_VAR 0 8
38917: NOT
38918: IFFALSE 38930
// k := array ;
38920: LD_ADDR_VAR 0 8
38924: PUSH
38925: LD_VAR 0 1
38929: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38930: LD_ADDR_VAR 0 10
38934: PUSH
38935: LD_VAR 0 10
38939: PPUSH
38940: LD_VAR 0 8
38944: PPUSH
38945: LD_VAR 0 1
38949: PUSH
38950: LD_VAR 0 7
38954: ARRAY
38955: PPUSH
38956: CALL_OW 1
38960: ST_TO_ADDR
// end ;
38961: GO 38874
38963: POP
38964: POP
// array := tmp ;
38965: LD_ADDR_VAR 0 1
38969: PUSH
38970: LD_VAR 0 10
38974: ST_TO_ADDR
// end ;
38975: GO 38856
38977: POP
38978: POP
// result := array ;
38979: LD_ADDR_VAR 0 5
38983: PUSH
38984: LD_VAR 0 1
38988: ST_TO_ADDR
// end ;
38989: LD_VAR 0 5
38993: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38994: LD_INT 0
38996: PPUSH
38997: PPUSH
// result := 0 ;
38998: LD_ADDR_VAR 0 3
39002: PUSH
39003: LD_INT 0
39005: ST_TO_ADDR
// if not array or not value in array then
39006: LD_VAR 0 1
39010: NOT
39011: PUSH
39012: LD_VAR 0 2
39016: PUSH
39017: LD_VAR 0 1
39021: IN
39022: NOT
39023: OR
39024: IFFALSE 39028
// exit ;
39026: GO 39082
// for i = 1 to array do
39028: LD_ADDR_VAR 0 4
39032: PUSH
39033: DOUBLE
39034: LD_INT 1
39036: DEC
39037: ST_TO_ADDR
39038: LD_VAR 0 1
39042: PUSH
39043: FOR_TO
39044: IFFALSE 39080
// if value = array [ i ] then
39046: LD_VAR 0 2
39050: PUSH
39051: LD_VAR 0 1
39055: PUSH
39056: LD_VAR 0 4
39060: ARRAY
39061: EQUAL
39062: IFFALSE 39078
// begin result := i ;
39064: LD_ADDR_VAR 0 3
39068: PUSH
39069: LD_VAR 0 4
39073: ST_TO_ADDR
// exit ;
39074: POP
39075: POP
39076: GO 39082
// end ;
39078: GO 39043
39080: POP
39081: POP
// end ;
39082: LD_VAR 0 3
39086: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
39087: LD_INT 0
39089: PPUSH
// vc_chassis := chassis ;
39090: LD_ADDR_OWVAR 37
39094: PUSH
39095: LD_VAR 0 1
39099: ST_TO_ADDR
// vc_engine := engine ;
39100: LD_ADDR_OWVAR 39
39104: PUSH
39105: LD_VAR 0 2
39109: ST_TO_ADDR
// vc_control := control ;
39110: LD_ADDR_OWVAR 38
39114: PUSH
39115: LD_VAR 0 3
39119: ST_TO_ADDR
// vc_weapon := weapon ;
39120: LD_ADDR_OWVAR 40
39124: PUSH
39125: LD_VAR 0 4
39129: ST_TO_ADDR
// vc_fuel_battery := fuel ;
39130: LD_ADDR_OWVAR 41
39134: PUSH
39135: LD_VAR 0 5
39139: ST_TO_ADDR
// end ;
39140: LD_VAR 0 6
39144: RET
// export function WantPlant ( unit ) ; var task ; begin
39145: LD_INT 0
39147: PPUSH
39148: PPUSH
// result := false ;
39149: LD_ADDR_VAR 0 2
39153: PUSH
39154: LD_INT 0
39156: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
39157: LD_ADDR_VAR 0 3
39161: PUSH
39162: LD_VAR 0 1
39166: PPUSH
39167: CALL_OW 437
39171: ST_TO_ADDR
// if task then
39172: LD_VAR 0 3
39176: IFFALSE 39204
// if task [ 1 ] [ 1 ] = p then
39178: LD_VAR 0 3
39182: PUSH
39183: LD_INT 1
39185: ARRAY
39186: PUSH
39187: LD_INT 1
39189: ARRAY
39190: PUSH
39191: LD_STRING p
39193: EQUAL
39194: IFFALSE 39204
// result := true ;
39196: LD_ADDR_VAR 0 2
39200: PUSH
39201: LD_INT 1
39203: ST_TO_ADDR
// end ;
39204: LD_VAR 0 2
39208: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
39209: LD_INT 0
39211: PPUSH
39212: PPUSH
39213: PPUSH
39214: PPUSH
// if pos < 1 then
39215: LD_VAR 0 2
39219: PUSH
39220: LD_INT 1
39222: LESS
39223: IFFALSE 39227
// exit ;
39225: GO 39530
// if pos = 1 then
39227: LD_VAR 0 2
39231: PUSH
39232: LD_INT 1
39234: EQUAL
39235: IFFALSE 39268
// result := Replace ( arr , pos [ 1 ] , value ) else
39237: LD_ADDR_VAR 0 4
39241: PUSH
39242: LD_VAR 0 1
39246: PPUSH
39247: LD_VAR 0 2
39251: PUSH
39252: LD_INT 1
39254: ARRAY
39255: PPUSH
39256: LD_VAR 0 3
39260: PPUSH
39261: CALL_OW 1
39265: ST_TO_ADDR
39266: GO 39530
// begin tmp := arr ;
39268: LD_ADDR_VAR 0 6
39272: PUSH
39273: LD_VAR 0 1
39277: ST_TO_ADDR
// s_arr := [ tmp ] ;
39278: LD_ADDR_VAR 0 7
39282: PUSH
39283: LD_VAR 0 6
39287: PUSH
39288: EMPTY
39289: LIST
39290: ST_TO_ADDR
// for i = 1 to pos - 1 do
39291: LD_ADDR_VAR 0 5
39295: PUSH
39296: DOUBLE
39297: LD_INT 1
39299: DEC
39300: ST_TO_ADDR
39301: LD_VAR 0 2
39305: PUSH
39306: LD_INT 1
39308: MINUS
39309: PUSH
39310: FOR_TO
39311: IFFALSE 39356
// begin tmp := tmp [ pos [ i ] ] ;
39313: LD_ADDR_VAR 0 6
39317: PUSH
39318: LD_VAR 0 6
39322: PUSH
39323: LD_VAR 0 2
39327: PUSH
39328: LD_VAR 0 5
39332: ARRAY
39333: ARRAY
39334: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
39335: LD_ADDR_VAR 0 7
39339: PUSH
39340: LD_VAR 0 7
39344: PUSH
39345: LD_VAR 0 6
39349: PUSH
39350: EMPTY
39351: LIST
39352: ADD
39353: ST_TO_ADDR
// end ;
39354: GO 39310
39356: POP
39357: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
39358: LD_ADDR_VAR 0 6
39362: PUSH
39363: LD_VAR 0 6
39367: PPUSH
39368: LD_VAR 0 2
39372: PUSH
39373: LD_VAR 0 2
39377: ARRAY
39378: PPUSH
39379: LD_VAR 0 3
39383: PPUSH
39384: CALL_OW 1
39388: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
39389: LD_ADDR_VAR 0 7
39393: PUSH
39394: LD_VAR 0 7
39398: PPUSH
39399: LD_VAR 0 7
39403: PPUSH
39404: LD_VAR 0 6
39408: PPUSH
39409: CALL_OW 1
39413: ST_TO_ADDR
// for i = s_arr downto 2 do
39414: LD_ADDR_VAR 0 5
39418: PUSH
39419: DOUBLE
39420: LD_VAR 0 7
39424: INC
39425: ST_TO_ADDR
39426: LD_INT 2
39428: PUSH
39429: FOR_DOWNTO
39430: IFFALSE 39514
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
39432: LD_ADDR_VAR 0 6
39436: PUSH
39437: LD_VAR 0 7
39441: PUSH
39442: LD_VAR 0 5
39446: PUSH
39447: LD_INT 1
39449: MINUS
39450: ARRAY
39451: PPUSH
39452: LD_VAR 0 2
39456: PUSH
39457: LD_VAR 0 5
39461: PUSH
39462: LD_INT 1
39464: MINUS
39465: ARRAY
39466: PPUSH
39467: LD_VAR 0 7
39471: PUSH
39472: LD_VAR 0 5
39476: ARRAY
39477: PPUSH
39478: CALL_OW 1
39482: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
39483: LD_ADDR_VAR 0 7
39487: PUSH
39488: LD_VAR 0 7
39492: PPUSH
39493: LD_VAR 0 5
39497: PUSH
39498: LD_INT 1
39500: MINUS
39501: PPUSH
39502: LD_VAR 0 6
39506: PPUSH
39507: CALL_OW 1
39511: ST_TO_ADDR
// end ;
39512: GO 39429
39514: POP
39515: POP
// result := s_arr [ 1 ] ;
39516: LD_ADDR_VAR 0 4
39520: PUSH
39521: LD_VAR 0 7
39525: PUSH
39526: LD_INT 1
39528: ARRAY
39529: ST_TO_ADDR
// end ; end ;
39530: LD_VAR 0 4
39534: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
39535: LD_INT 0
39537: PPUSH
39538: PPUSH
// if not list then
39539: LD_VAR 0 1
39543: NOT
39544: IFFALSE 39548
// exit ;
39546: GO 39639
// i := list [ pos1 ] ;
39548: LD_ADDR_VAR 0 5
39552: PUSH
39553: LD_VAR 0 1
39557: PUSH
39558: LD_VAR 0 2
39562: ARRAY
39563: ST_TO_ADDR
// if not i then
39564: LD_VAR 0 5
39568: NOT
39569: IFFALSE 39573
// exit ;
39571: GO 39639
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39573: LD_ADDR_VAR 0 1
39577: PUSH
39578: LD_VAR 0 1
39582: PPUSH
39583: LD_VAR 0 2
39587: PPUSH
39588: LD_VAR 0 1
39592: PUSH
39593: LD_VAR 0 3
39597: ARRAY
39598: PPUSH
39599: CALL_OW 1
39603: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39604: LD_ADDR_VAR 0 1
39608: PUSH
39609: LD_VAR 0 1
39613: PPUSH
39614: LD_VAR 0 3
39618: PPUSH
39619: LD_VAR 0 5
39623: PPUSH
39624: CALL_OW 1
39628: ST_TO_ADDR
// result := list ;
39629: LD_ADDR_VAR 0 4
39633: PUSH
39634: LD_VAR 0 1
39638: ST_TO_ADDR
// end ;
39639: LD_VAR 0 4
39643: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39644: LD_INT 0
39646: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39647: LD_ADDR_VAR 0 5
39651: PUSH
39652: LD_VAR 0 1
39656: PPUSH
39657: CALL_OW 250
39661: PPUSH
39662: LD_VAR 0 1
39666: PPUSH
39667: CALL_OW 251
39671: PPUSH
39672: LD_VAR 0 2
39676: PPUSH
39677: LD_VAR 0 3
39681: PPUSH
39682: LD_VAR 0 4
39686: PPUSH
39687: CALL 39697 0 5
39691: ST_TO_ADDR
// end ;
39692: LD_VAR 0 5
39696: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39697: LD_INT 0
39699: PPUSH
39700: PPUSH
39701: PPUSH
39702: PPUSH
// if not list then
39703: LD_VAR 0 3
39707: NOT
39708: IFFALSE 39712
// exit ;
39710: GO 40100
// result := [ ] ;
39712: LD_ADDR_VAR 0 6
39716: PUSH
39717: EMPTY
39718: ST_TO_ADDR
// for i in list do
39719: LD_ADDR_VAR 0 7
39723: PUSH
39724: LD_VAR 0 3
39728: PUSH
39729: FOR_IN
39730: IFFALSE 39932
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39732: LD_ADDR_VAR 0 9
39736: PUSH
39737: LD_VAR 0 7
39741: PPUSH
39742: LD_VAR 0 1
39746: PPUSH
39747: LD_VAR 0 2
39751: PPUSH
39752: CALL_OW 297
39756: ST_TO_ADDR
// if not result then
39757: LD_VAR 0 6
39761: NOT
39762: IFFALSE 39788
// result := [ [ i , tmp ] ] else
39764: LD_ADDR_VAR 0 6
39768: PUSH
39769: LD_VAR 0 7
39773: PUSH
39774: LD_VAR 0 9
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: EMPTY
39784: LIST
39785: ST_TO_ADDR
39786: GO 39930
// begin if result [ result ] [ 2 ] < tmp then
39788: LD_VAR 0 6
39792: PUSH
39793: LD_VAR 0 6
39797: ARRAY
39798: PUSH
39799: LD_INT 2
39801: ARRAY
39802: PUSH
39803: LD_VAR 0 9
39807: LESS
39808: IFFALSE 39850
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39810: LD_ADDR_VAR 0 6
39814: PUSH
39815: LD_VAR 0 6
39819: PPUSH
39820: LD_VAR 0 6
39824: PUSH
39825: LD_INT 1
39827: PLUS
39828: PPUSH
39829: LD_VAR 0 7
39833: PUSH
39834: LD_VAR 0 9
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PPUSH
39843: CALL_OW 2
39847: ST_TO_ADDR
39848: GO 39930
// for j = 1 to result do
39850: LD_ADDR_VAR 0 8
39854: PUSH
39855: DOUBLE
39856: LD_INT 1
39858: DEC
39859: ST_TO_ADDR
39860: LD_VAR 0 6
39864: PUSH
39865: FOR_TO
39866: IFFALSE 39928
// begin if tmp < result [ j ] [ 2 ] then
39868: LD_VAR 0 9
39872: PUSH
39873: LD_VAR 0 6
39877: PUSH
39878: LD_VAR 0 8
39882: ARRAY
39883: PUSH
39884: LD_INT 2
39886: ARRAY
39887: LESS
39888: IFFALSE 39926
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39890: LD_ADDR_VAR 0 6
39894: PUSH
39895: LD_VAR 0 6
39899: PPUSH
39900: LD_VAR 0 8
39904: PPUSH
39905: LD_VAR 0 7
39909: PUSH
39910: LD_VAR 0 9
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PPUSH
39919: CALL_OW 2
39923: ST_TO_ADDR
// break ;
39924: GO 39928
// end ; end ;
39926: GO 39865
39928: POP
39929: POP
// end ; end ;
39930: GO 39729
39932: POP
39933: POP
// if result and not asc then
39934: LD_VAR 0 6
39938: PUSH
39939: LD_VAR 0 4
39943: NOT
39944: AND
39945: IFFALSE 40020
// begin tmp := result ;
39947: LD_ADDR_VAR 0 9
39951: PUSH
39952: LD_VAR 0 6
39956: ST_TO_ADDR
// for i = tmp downto 1 do
39957: LD_ADDR_VAR 0 7
39961: PUSH
39962: DOUBLE
39963: LD_VAR 0 9
39967: INC
39968: ST_TO_ADDR
39969: LD_INT 1
39971: PUSH
39972: FOR_DOWNTO
39973: IFFALSE 40018
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39975: LD_ADDR_VAR 0 6
39979: PUSH
39980: LD_VAR 0 6
39984: PPUSH
39985: LD_VAR 0 9
39989: PUSH
39990: LD_VAR 0 7
39994: MINUS
39995: PUSH
39996: LD_INT 1
39998: PLUS
39999: PPUSH
40000: LD_VAR 0 9
40004: PUSH
40005: LD_VAR 0 7
40009: ARRAY
40010: PPUSH
40011: CALL_OW 1
40015: ST_TO_ADDR
40016: GO 39972
40018: POP
40019: POP
// end ; tmp := [ ] ;
40020: LD_ADDR_VAR 0 9
40024: PUSH
40025: EMPTY
40026: ST_TO_ADDR
// if mode then
40027: LD_VAR 0 5
40031: IFFALSE 40100
// begin for i = 1 to result do
40033: LD_ADDR_VAR 0 7
40037: PUSH
40038: DOUBLE
40039: LD_INT 1
40041: DEC
40042: ST_TO_ADDR
40043: LD_VAR 0 6
40047: PUSH
40048: FOR_TO
40049: IFFALSE 40088
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
40051: LD_ADDR_VAR 0 9
40055: PUSH
40056: LD_VAR 0 9
40060: PPUSH
40061: LD_VAR 0 7
40065: PPUSH
40066: LD_VAR 0 6
40070: PUSH
40071: LD_VAR 0 7
40075: ARRAY
40076: PUSH
40077: LD_INT 1
40079: ARRAY
40080: PPUSH
40081: CALL_OW 1
40085: ST_TO_ADDR
40086: GO 40048
40088: POP
40089: POP
// result := tmp ;
40090: LD_ADDR_VAR 0 6
40094: PUSH
40095: LD_VAR 0 9
40099: ST_TO_ADDR
// end ; end ;
40100: LD_VAR 0 6
40104: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40105: LD_INT 0
40107: PPUSH
40108: PPUSH
40109: PPUSH
40110: PPUSH
40111: PPUSH
40112: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40113: LD_ADDR_VAR 0 5
40117: PUSH
40118: LD_INT 0
40120: PUSH
40121: LD_INT 0
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: EMPTY
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: ST_TO_ADDR
// if not x or not y then
40135: LD_VAR 0 2
40139: NOT
40140: PUSH
40141: LD_VAR 0 3
40145: NOT
40146: OR
40147: IFFALSE 40151
// exit ;
40149: GO 41803
// if not range then
40151: LD_VAR 0 4
40155: NOT
40156: IFFALSE 40166
// range := 10 ;
40158: LD_ADDR_VAR 0 4
40162: PUSH
40163: LD_INT 10
40165: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40166: LD_ADDR_VAR 0 8
40170: PUSH
40171: LD_INT 81
40173: PUSH
40174: LD_VAR 0 1
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 92
40185: PUSH
40186: LD_VAR 0 2
40190: PUSH
40191: LD_VAR 0 3
40195: PUSH
40196: LD_VAR 0 4
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 3
40209: PUSH
40210: LD_INT 21
40212: PUSH
40213: LD_INT 3
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: LIST
40228: PPUSH
40229: CALL_OW 69
40233: ST_TO_ADDR
// if not tmp then
40234: LD_VAR 0 8
40238: NOT
40239: IFFALSE 40243
// exit ;
40241: GO 41803
// for i in tmp do
40243: LD_ADDR_VAR 0 6
40247: PUSH
40248: LD_VAR 0 8
40252: PUSH
40253: FOR_IN
40254: IFFALSE 41778
// begin points := [ 0 , 0 , 0 ] ;
40256: LD_ADDR_VAR 0 9
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: LD_INT 0
40266: PUSH
40267: LD_INT 0
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: LIST
40274: ST_TO_ADDR
// bpoints := 1 ;
40275: LD_ADDR_VAR 0 10
40279: PUSH
40280: LD_INT 1
40282: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40283: LD_VAR 0 6
40287: PPUSH
40288: CALL_OW 247
40292: PUSH
40293: LD_INT 1
40295: DOUBLE
40296: EQUAL
40297: IFTRUE 40301
40299: GO 40879
40301: POP
// begin if GetClass ( i ) = 1 then
40302: LD_VAR 0 6
40306: PPUSH
40307: CALL_OW 257
40311: PUSH
40312: LD_INT 1
40314: EQUAL
40315: IFFALSE 40336
// points := [ 10 , 5 , 3 ] ;
40317: LD_ADDR_VAR 0 9
40321: PUSH
40322: LD_INT 10
40324: PUSH
40325: LD_INT 5
40327: PUSH
40328: LD_INT 3
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: LIST
40335: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40336: LD_VAR 0 6
40340: PPUSH
40341: CALL_OW 257
40345: PUSH
40346: LD_INT 2
40348: PUSH
40349: LD_INT 3
40351: PUSH
40352: LD_INT 4
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: LIST
40359: IN
40360: IFFALSE 40381
// points := [ 3 , 2 , 1 ] ;
40362: LD_ADDR_VAR 0 9
40366: PUSH
40367: LD_INT 3
40369: PUSH
40370: LD_INT 2
40372: PUSH
40373: LD_INT 1
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: LIST
40380: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40381: LD_VAR 0 6
40385: PPUSH
40386: CALL_OW 257
40390: PUSH
40391: LD_INT 5
40393: EQUAL
40394: IFFALSE 40415
// points := [ 130 , 5 , 2 ] ;
40396: LD_ADDR_VAR 0 9
40400: PUSH
40401: LD_INT 130
40403: PUSH
40404: LD_INT 5
40406: PUSH
40407: LD_INT 2
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: LIST
40414: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40415: LD_VAR 0 6
40419: PPUSH
40420: CALL_OW 257
40424: PUSH
40425: LD_INT 8
40427: EQUAL
40428: IFFALSE 40449
// points := [ 35 , 35 , 30 ] ;
40430: LD_ADDR_VAR 0 9
40434: PUSH
40435: LD_INT 35
40437: PUSH
40438: LD_INT 35
40440: PUSH
40441: LD_INT 30
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: LIST
40448: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40449: LD_VAR 0 6
40453: PPUSH
40454: CALL_OW 257
40458: PUSH
40459: LD_INT 9
40461: EQUAL
40462: IFFALSE 40483
// points := [ 20 , 55 , 40 ] ;
40464: LD_ADDR_VAR 0 9
40468: PUSH
40469: LD_INT 20
40471: PUSH
40472: LD_INT 55
40474: PUSH
40475: LD_INT 40
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: LIST
40482: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40483: LD_VAR 0 6
40487: PPUSH
40488: CALL_OW 257
40492: PUSH
40493: LD_INT 12
40495: PUSH
40496: LD_INT 16
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: IN
40503: IFFALSE 40524
// points := [ 5 , 3 , 2 ] ;
40505: LD_ADDR_VAR 0 9
40509: PUSH
40510: LD_INT 5
40512: PUSH
40513: LD_INT 3
40515: PUSH
40516: LD_INT 2
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: LIST
40523: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40524: LD_VAR 0 6
40528: PPUSH
40529: CALL_OW 257
40533: PUSH
40534: LD_INT 17
40536: EQUAL
40537: IFFALSE 40558
// points := [ 100 , 50 , 75 ] ;
40539: LD_ADDR_VAR 0 9
40543: PUSH
40544: LD_INT 100
40546: PUSH
40547: LD_INT 50
40549: PUSH
40550: LD_INT 75
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: LIST
40557: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40558: LD_VAR 0 6
40562: PPUSH
40563: CALL_OW 257
40567: PUSH
40568: LD_INT 15
40570: EQUAL
40571: IFFALSE 40592
// points := [ 10 , 5 , 3 ] ;
40573: LD_ADDR_VAR 0 9
40577: PUSH
40578: LD_INT 10
40580: PUSH
40581: LD_INT 5
40583: PUSH
40584: LD_INT 3
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: LIST
40591: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40592: LD_VAR 0 6
40596: PPUSH
40597: CALL_OW 257
40601: PUSH
40602: LD_INT 14
40604: EQUAL
40605: IFFALSE 40626
// points := [ 10 , 0 , 0 ] ;
40607: LD_ADDR_VAR 0 9
40611: PUSH
40612: LD_INT 10
40614: PUSH
40615: LD_INT 0
40617: PUSH
40618: LD_INT 0
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: LIST
40625: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40626: LD_VAR 0 6
40630: PPUSH
40631: CALL_OW 257
40635: PUSH
40636: LD_INT 11
40638: EQUAL
40639: IFFALSE 40660
// points := [ 30 , 10 , 5 ] ;
40641: LD_ADDR_VAR 0 9
40645: PUSH
40646: LD_INT 30
40648: PUSH
40649: LD_INT 10
40651: PUSH
40652: LD_INT 5
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: LIST
40659: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40660: LD_VAR 0 1
40664: PPUSH
40665: LD_INT 5
40667: PPUSH
40668: CALL_OW 321
40672: PUSH
40673: LD_INT 2
40675: EQUAL
40676: IFFALSE 40693
// bpoints := bpoints * 1.8 ;
40678: LD_ADDR_VAR 0 10
40682: PUSH
40683: LD_VAR 0 10
40687: PUSH
40688: LD_REAL  1.80000000000000E+0000
40691: MUL
40692: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40693: LD_VAR 0 6
40697: PPUSH
40698: CALL_OW 257
40702: PUSH
40703: LD_INT 1
40705: PUSH
40706: LD_INT 2
40708: PUSH
40709: LD_INT 3
40711: PUSH
40712: LD_INT 4
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: IN
40721: PUSH
40722: LD_VAR 0 1
40726: PPUSH
40727: LD_INT 51
40729: PPUSH
40730: CALL_OW 321
40734: PUSH
40735: LD_INT 2
40737: EQUAL
40738: AND
40739: IFFALSE 40756
// bpoints := bpoints * 1.2 ;
40741: LD_ADDR_VAR 0 10
40745: PUSH
40746: LD_VAR 0 10
40750: PUSH
40751: LD_REAL  1.20000000000000E+0000
40754: MUL
40755: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40756: LD_VAR 0 6
40760: PPUSH
40761: CALL_OW 257
40765: PUSH
40766: LD_INT 5
40768: PUSH
40769: LD_INT 7
40771: PUSH
40772: LD_INT 9
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: LIST
40779: IN
40780: PUSH
40781: LD_VAR 0 1
40785: PPUSH
40786: LD_INT 52
40788: PPUSH
40789: CALL_OW 321
40793: PUSH
40794: LD_INT 2
40796: EQUAL
40797: AND
40798: IFFALSE 40815
// bpoints := bpoints * 1.5 ;
40800: LD_ADDR_VAR 0 10
40804: PUSH
40805: LD_VAR 0 10
40809: PUSH
40810: LD_REAL  1.50000000000000E+0000
40813: MUL
40814: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40815: LD_VAR 0 1
40819: PPUSH
40820: LD_INT 66
40822: PPUSH
40823: CALL_OW 321
40827: PUSH
40828: LD_INT 2
40830: EQUAL
40831: IFFALSE 40848
// bpoints := bpoints * 1.1 ;
40833: LD_ADDR_VAR 0 10
40837: PUSH
40838: LD_VAR 0 10
40842: PUSH
40843: LD_REAL  1.10000000000000E+0000
40846: MUL
40847: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40848: LD_ADDR_VAR 0 10
40852: PUSH
40853: LD_VAR 0 10
40857: PUSH
40858: LD_VAR 0 6
40862: PPUSH
40863: LD_INT 1
40865: PPUSH
40866: CALL_OW 259
40870: PUSH
40871: LD_REAL  1.15000000000000E+0000
40874: MUL
40875: MUL
40876: ST_TO_ADDR
// end ; unit_vehicle :
40877: GO 41707
40879: LD_INT 2
40881: DOUBLE
40882: EQUAL
40883: IFTRUE 40887
40885: GO 41695
40887: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40888: LD_VAR 0 6
40892: PPUSH
40893: CALL_OW 264
40897: PUSH
40898: LD_INT 2
40900: PUSH
40901: LD_INT 42
40903: PUSH
40904: LD_INT 24
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: LIST
40911: IN
40912: IFFALSE 40933
// points := [ 25 , 5 , 3 ] ;
40914: LD_ADDR_VAR 0 9
40918: PUSH
40919: LD_INT 25
40921: PUSH
40922: LD_INT 5
40924: PUSH
40925: LD_INT 3
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: LIST
40932: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40933: LD_VAR 0 6
40937: PPUSH
40938: CALL_OW 264
40942: PUSH
40943: LD_INT 4
40945: PUSH
40946: LD_INT 43
40948: PUSH
40949: LD_INT 25
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: LIST
40956: IN
40957: IFFALSE 40978
// points := [ 40 , 15 , 5 ] ;
40959: LD_ADDR_VAR 0 9
40963: PUSH
40964: LD_INT 40
40966: PUSH
40967: LD_INT 15
40969: PUSH
40970: LD_INT 5
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: LIST
40977: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40978: LD_VAR 0 6
40982: PPUSH
40983: CALL_OW 264
40987: PUSH
40988: LD_INT 3
40990: PUSH
40991: LD_INT 23
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: IN
40998: IFFALSE 41019
// points := [ 7 , 25 , 8 ] ;
41000: LD_ADDR_VAR 0 9
41004: PUSH
41005: LD_INT 7
41007: PUSH
41008: LD_INT 25
41010: PUSH
41011: LD_INT 8
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: LIST
41018: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
41019: LD_VAR 0 6
41023: PPUSH
41024: CALL_OW 264
41028: PUSH
41029: LD_INT 5
41031: PUSH
41032: LD_INT 27
41034: PUSH
41035: LD_INT 44
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: LIST
41042: IN
41043: IFFALSE 41064
// points := [ 14 , 50 , 16 ] ;
41045: LD_ADDR_VAR 0 9
41049: PUSH
41050: LD_INT 14
41052: PUSH
41053: LD_INT 50
41055: PUSH
41056: LD_INT 16
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: LIST
41063: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
41064: LD_VAR 0 6
41068: PPUSH
41069: CALL_OW 264
41073: PUSH
41074: LD_INT 6
41076: PUSH
41077: LD_INT 46
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: IN
41084: IFFALSE 41105
// points := [ 32 , 120 , 70 ] ;
41086: LD_ADDR_VAR 0 9
41090: PUSH
41091: LD_INT 32
41093: PUSH
41094: LD_INT 120
41096: PUSH
41097: LD_INT 70
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: LIST
41104: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41105: LD_VAR 0 6
41109: PPUSH
41110: CALL_OW 264
41114: PUSH
41115: LD_INT 7
41117: PUSH
41118: LD_INT 28
41120: PUSH
41121: LD_INT 45
41123: PUSH
41124: LD_EXP 41
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: IN
41135: IFFALSE 41156
// points := [ 35 , 20 , 45 ] ;
41137: LD_ADDR_VAR 0 9
41141: PUSH
41142: LD_INT 35
41144: PUSH
41145: LD_INT 20
41147: PUSH
41148: LD_INT 45
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: LIST
41155: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41156: LD_VAR 0 6
41160: PPUSH
41161: CALL_OW 264
41165: PUSH
41166: LD_INT 47
41168: PUSH
41169: EMPTY
41170: LIST
41171: IN
41172: IFFALSE 41193
// points := [ 67 , 45 , 75 ] ;
41174: LD_ADDR_VAR 0 9
41178: PUSH
41179: LD_INT 67
41181: PUSH
41182: LD_INT 45
41184: PUSH
41185: LD_INT 75
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: LIST
41192: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41193: LD_VAR 0 6
41197: PPUSH
41198: CALL_OW 264
41202: PUSH
41203: LD_INT 26
41205: PUSH
41206: EMPTY
41207: LIST
41208: IN
41209: IFFALSE 41230
// points := [ 120 , 30 , 80 ] ;
41211: LD_ADDR_VAR 0 9
41215: PUSH
41216: LD_INT 120
41218: PUSH
41219: LD_INT 30
41221: PUSH
41222: LD_INT 80
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: LIST
41229: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41230: LD_VAR 0 6
41234: PPUSH
41235: CALL_OW 264
41239: PUSH
41240: LD_INT 22
41242: PUSH
41243: EMPTY
41244: LIST
41245: IN
41246: IFFALSE 41267
// points := [ 40 , 1 , 1 ] ;
41248: LD_ADDR_VAR 0 9
41252: PUSH
41253: LD_INT 40
41255: PUSH
41256: LD_INT 1
41258: PUSH
41259: LD_INT 1
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: LIST
41266: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41267: LD_VAR 0 6
41271: PPUSH
41272: CALL_OW 264
41276: PUSH
41277: LD_INT 29
41279: PUSH
41280: EMPTY
41281: LIST
41282: IN
41283: IFFALSE 41304
// points := [ 70 , 200 , 400 ] ;
41285: LD_ADDR_VAR 0 9
41289: PUSH
41290: LD_INT 70
41292: PUSH
41293: LD_INT 200
41295: PUSH
41296: LD_INT 400
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: LIST
41303: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41304: LD_VAR 0 6
41308: PPUSH
41309: CALL_OW 264
41313: PUSH
41314: LD_INT 14
41316: PUSH
41317: LD_INT 53
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: IN
41324: IFFALSE 41345
// points := [ 40 , 10 , 20 ] ;
41326: LD_ADDR_VAR 0 9
41330: PUSH
41331: LD_INT 40
41333: PUSH
41334: LD_INT 10
41336: PUSH
41337: LD_INT 20
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: LIST
41344: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41345: LD_VAR 0 6
41349: PPUSH
41350: CALL_OW 264
41354: PUSH
41355: LD_INT 9
41357: PUSH
41358: EMPTY
41359: LIST
41360: IN
41361: IFFALSE 41382
// points := [ 5 , 70 , 20 ] ;
41363: LD_ADDR_VAR 0 9
41367: PUSH
41368: LD_INT 5
41370: PUSH
41371: LD_INT 70
41373: PUSH
41374: LD_INT 20
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: LIST
41381: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41382: LD_VAR 0 6
41386: PPUSH
41387: CALL_OW 264
41391: PUSH
41392: LD_INT 10
41394: PUSH
41395: EMPTY
41396: LIST
41397: IN
41398: IFFALSE 41419
// points := [ 35 , 110 , 70 ] ;
41400: LD_ADDR_VAR 0 9
41404: PUSH
41405: LD_INT 35
41407: PUSH
41408: LD_INT 110
41410: PUSH
41411: LD_INT 70
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: LIST
41418: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41419: LD_VAR 0 6
41423: PPUSH
41424: CALL_OW 265
41428: PUSH
41429: LD_INT 25
41431: EQUAL
41432: IFFALSE 41453
// points := [ 80 , 65 , 100 ] ;
41434: LD_ADDR_VAR 0 9
41438: PUSH
41439: LD_INT 80
41441: PUSH
41442: LD_INT 65
41444: PUSH
41445: LD_INT 100
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: LIST
41452: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41453: LD_VAR 0 6
41457: PPUSH
41458: CALL_OW 263
41462: PUSH
41463: LD_INT 1
41465: EQUAL
41466: IFFALSE 41501
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41468: LD_ADDR_VAR 0 10
41472: PUSH
41473: LD_VAR 0 10
41477: PUSH
41478: LD_VAR 0 6
41482: PPUSH
41483: CALL_OW 311
41487: PPUSH
41488: LD_INT 3
41490: PPUSH
41491: CALL_OW 259
41495: PUSH
41496: LD_INT 4
41498: MUL
41499: MUL
41500: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41501: LD_VAR 0 6
41505: PPUSH
41506: CALL_OW 263
41510: PUSH
41511: LD_INT 2
41513: EQUAL
41514: IFFALSE 41565
// begin j := IsControledBy ( i ) ;
41516: LD_ADDR_VAR 0 7
41520: PUSH
41521: LD_VAR 0 6
41525: PPUSH
41526: CALL_OW 312
41530: ST_TO_ADDR
// if j then
41531: LD_VAR 0 7
41535: IFFALSE 41565
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41537: LD_ADDR_VAR 0 10
41541: PUSH
41542: LD_VAR 0 10
41546: PUSH
41547: LD_VAR 0 7
41551: PPUSH
41552: LD_INT 3
41554: PPUSH
41555: CALL_OW 259
41559: PUSH
41560: LD_INT 3
41562: MUL
41563: MUL
41564: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41565: LD_VAR 0 6
41569: PPUSH
41570: CALL_OW 264
41574: PUSH
41575: LD_INT 5
41577: PUSH
41578: LD_INT 6
41580: PUSH
41581: LD_INT 46
41583: PUSH
41584: LD_INT 44
41586: PUSH
41587: LD_INT 47
41589: PUSH
41590: LD_INT 45
41592: PUSH
41593: LD_INT 28
41595: PUSH
41596: LD_INT 7
41598: PUSH
41599: LD_INT 27
41601: PUSH
41602: LD_INT 29
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: IN
41617: PUSH
41618: LD_VAR 0 1
41622: PPUSH
41623: LD_INT 52
41625: PPUSH
41626: CALL_OW 321
41630: PUSH
41631: LD_INT 2
41633: EQUAL
41634: AND
41635: IFFALSE 41652
// bpoints := bpoints * 1.2 ;
41637: LD_ADDR_VAR 0 10
41641: PUSH
41642: LD_VAR 0 10
41646: PUSH
41647: LD_REAL  1.20000000000000E+0000
41650: MUL
41651: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41652: LD_VAR 0 6
41656: PPUSH
41657: CALL_OW 264
41661: PUSH
41662: LD_INT 6
41664: PUSH
41665: LD_INT 46
41667: PUSH
41668: LD_INT 47
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: LIST
41675: IN
41676: IFFALSE 41693
// bpoints := bpoints * 1.2 ;
41678: LD_ADDR_VAR 0 10
41682: PUSH
41683: LD_VAR 0 10
41687: PUSH
41688: LD_REAL  1.20000000000000E+0000
41691: MUL
41692: ST_TO_ADDR
// end ; unit_building :
41693: GO 41707
41695: LD_INT 3
41697: DOUBLE
41698: EQUAL
41699: IFTRUE 41703
41701: GO 41706
41703: POP
// ; end ;
41704: GO 41707
41706: POP
// for j = 1 to 3 do
41707: LD_ADDR_VAR 0 7
41711: PUSH
41712: DOUBLE
41713: LD_INT 1
41715: DEC
41716: ST_TO_ADDR
41717: LD_INT 3
41719: PUSH
41720: FOR_TO
41721: IFFALSE 41774
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41723: LD_ADDR_VAR 0 5
41727: PUSH
41728: LD_VAR 0 5
41732: PPUSH
41733: LD_VAR 0 7
41737: PPUSH
41738: LD_VAR 0 5
41742: PUSH
41743: LD_VAR 0 7
41747: ARRAY
41748: PUSH
41749: LD_VAR 0 9
41753: PUSH
41754: LD_VAR 0 7
41758: ARRAY
41759: PUSH
41760: LD_VAR 0 10
41764: MUL
41765: PLUS
41766: PPUSH
41767: CALL_OW 1
41771: ST_TO_ADDR
41772: GO 41720
41774: POP
41775: POP
// end ;
41776: GO 40253
41778: POP
41779: POP
// result := Replace ( result , 4 , tmp ) ;
41780: LD_ADDR_VAR 0 5
41784: PUSH
41785: LD_VAR 0 5
41789: PPUSH
41790: LD_INT 4
41792: PPUSH
41793: LD_VAR 0 8
41797: PPUSH
41798: CALL_OW 1
41802: ST_TO_ADDR
// end ;
41803: LD_VAR 0 5
41807: RET
// export function DangerAtRange ( unit , range ) ; begin
41808: LD_INT 0
41810: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41811: LD_ADDR_VAR 0 3
41815: PUSH
41816: LD_VAR 0 1
41820: PPUSH
41821: CALL_OW 255
41825: PPUSH
41826: LD_VAR 0 1
41830: PPUSH
41831: CALL_OW 250
41835: PPUSH
41836: LD_VAR 0 1
41840: PPUSH
41841: CALL_OW 251
41845: PPUSH
41846: LD_VAR 0 2
41850: PPUSH
41851: CALL 40105 0 4
41855: ST_TO_ADDR
// end ;
41856: LD_VAR 0 3
41860: RET
// export function DangerInArea ( side , area ) ; begin
41861: LD_INT 0
41863: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41864: LD_ADDR_VAR 0 3
41868: PUSH
41869: LD_VAR 0 2
41873: PPUSH
41874: LD_INT 81
41876: PUSH
41877: LD_VAR 0 1
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PPUSH
41886: CALL_OW 70
41890: ST_TO_ADDR
// end ;
41891: LD_VAR 0 3
41895: RET
// export function IsExtension ( b ) ; begin
41896: LD_INT 0
41898: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41899: LD_ADDR_VAR 0 2
41903: PUSH
41904: LD_VAR 0 1
41908: PUSH
41909: LD_INT 23
41911: PUSH
41912: LD_INT 20
41914: PUSH
41915: LD_INT 22
41917: PUSH
41918: LD_INT 17
41920: PUSH
41921: LD_INT 24
41923: PUSH
41924: LD_INT 21
41926: PUSH
41927: LD_INT 19
41929: PUSH
41930: LD_INT 16
41932: PUSH
41933: LD_INT 25
41935: PUSH
41936: LD_INT 18
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: IN
41951: ST_TO_ADDR
// end ;
41952: LD_VAR 0 2
41956: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41957: LD_INT 0
41959: PPUSH
41960: PPUSH
41961: PPUSH
// result := [ ] ;
41962: LD_ADDR_VAR 0 4
41966: PUSH
41967: EMPTY
41968: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41969: LD_ADDR_VAR 0 5
41973: PUSH
41974: LD_VAR 0 2
41978: PPUSH
41979: LD_INT 21
41981: PUSH
41982: LD_INT 3
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PPUSH
41989: CALL_OW 70
41993: ST_TO_ADDR
// if not tmp then
41994: LD_VAR 0 5
41998: NOT
41999: IFFALSE 42003
// exit ;
42001: GO 42067
// if checkLink then
42003: LD_VAR 0 3
42007: IFFALSE 42057
// begin for i in tmp do
42009: LD_ADDR_VAR 0 6
42013: PUSH
42014: LD_VAR 0 5
42018: PUSH
42019: FOR_IN
42020: IFFALSE 42055
// if GetBase ( i ) <> base then
42022: LD_VAR 0 6
42026: PPUSH
42027: CALL_OW 274
42031: PUSH
42032: LD_VAR 0 1
42036: NONEQUAL
42037: IFFALSE 42053
// ComLinkToBase ( base , i ) ;
42039: LD_VAR 0 1
42043: PPUSH
42044: LD_VAR 0 6
42048: PPUSH
42049: CALL_OW 169
42053: GO 42019
42055: POP
42056: POP
// end ; result := tmp ;
42057: LD_ADDR_VAR 0 4
42061: PUSH
42062: LD_VAR 0 5
42066: ST_TO_ADDR
// end ;
42067: LD_VAR 0 4
42071: RET
// export function ComComplete ( units , b ) ; var i ; begin
42072: LD_INT 0
42074: PPUSH
42075: PPUSH
// if not units then
42076: LD_VAR 0 1
42080: NOT
42081: IFFALSE 42085
// exit ;
42083: GO 42175
// for i in units do
42085: LD_ADDR_VAR 0 4
42089: PUSH
42090: LD_VAR 0 1
42094: PUSH
42095: FOR_IN
42096: IFFALSE 42173
// if BuildingStatus ( b ) = bs_build then
42098: LD_VAR 0 2
42102: PPUSH
42103: CALL_OW 461
42107: PUSH
42108: LD_INT 1
42110: EQUAL
42111: IFFALSE 42171
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42113: LD_VAR 0 4
42117: PPUSH
42118: LD_STRING h
42120: PUSH
42121: LD_VAR 0 2
42125: PPUSH
42126: CALL_OW 250
42130: PUSH
42131: LD_VAR 0 2
42135: PPUSH
42136: CALL_OW 251
42140: PUSH
42141: LD_VAR 0 2
42145: PUSH
42146: LD_INT 0
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: LD_INT 0
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: PUSH
42164: EMPTY
42165: LIST
42166: PPUSH
42167: CALL_OW 446
42171: GO 42095
42173: POP
42174: POP
// end ;
42175: LD_VAR 0 3
42179: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42180: LD_INT 0
42182: PPUSH
42183: PPUSH
42184: PPUSH
42185: PPUSH
42186: PPUSH
42187: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
42188: LD_VAR 0 1
42192: NOT
42193: PUSH
42194: LD_VAR 0 1
42198: PPUSH
42199: CALL_OW 263
42203: PUSH
42204: LD_INT 2
42206: NONEQUAL
42207: OR
42208: IFFALSE 42212
// exit ;
42210: GO 42528
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42212: LD_ADDR_VAR 0 6
42216: PUSH
42217: LD_INT 22
42219: PUSH
42220: LD_VAR 0 1
42224: PPUSH
42225: CALL_OW 255
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 2
42236: PUSH
42237: LD_INT 30
42239: PUSH
42240: LD_INT 36
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 34
42249: PUSH
42250: LD_INT 31
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: LIST
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PPUSH
42266: CALL_OW 69
42270: ST_TO_ADDR
// if not tmp then
42271: LD_VAR 0 6
42275: NOT
42276: IFFALSE 42280
// exit ;
42278: GO 42528
// result := [ ] ;
42280: LD_ADDR_VAR 0 2
42284: PUSH
42285: EMPTY
42286: ST_TO_ADDR
// for i in tmp do
42287: LD_ADDR_VAR 0 3
42291: PUSH
42292: LD_VAR 0 6
42296: PUSH
42297: FOR_IN
42298: IFFALSE 42369
// begin t := UnitsInside ( i ) ;
42300: LD_ADDR_VAR 0 4
42304: PUSH
42305: LD_VAR 0 3
42309: PPUSH
42310: CALL_OW 313
42314: ST_TO_ADDR
// if t then
42315: LD_VAR 0 4
42319: IFFALSE 42367
// for j in t do
42321: LD_ADDR_VAR 0 7
42325: PUSH
42326: LD_VAR 0 4
42330: PUSH
42331: FOR_IN
42332: IFFALSE 42365
// result := Replace ( result , result + 1 , j ) ;
42334: LD_ADDR_VAR 0 2
42338: PUSH
42339: LD_VAR 0 2
42343: PPUSH
42344: LD_VAR 0 2
42348: PUSH
42349: LD_INT 1
42351: PLUS
42352: PPUSH
42353: LD_VAR 0 7
42357: PPUSH
42358: CALL_OW 1
42362: ST_TO_ADDR
42363: GO 42331
42365: POP
42366: POP
// end ;
42367: GO 42297
42369: POP
42370: POP
// if not result then
42371: LD_VAR 0 2
42375: NOT
42376: IFFALSE 42380
// exit ;
42378: GO 42528
// mech := result [ 1 ] ;
42380: LD_ADDR_VAR 0 5
42384: PUSH
42385: LD_VAR 0 2
42389: PUSH
42390: LD_INT 1
42392: ARRAY
42393: ST_TO_ADDR
// if result > 1 then
42394: LD_VAR 0 2
42398: PUSH
42399: LD_INT 1
42401: GREATER
42402: IFFALSE 42514
// begin for i = 2 to result do
42404: LD_ADDR_VAR 0 3
42408: PUSH
42409: DOUBLE
42410: LD_INT 2
42412: DEC
42413: ST_TO_ADDR
42414: LD_VAR 0 2
42418: PUSH
42419: FOR_TO
42420: IFFALSE 42512
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42422: LD_ADDR_VAR 0 4
42426: PUSH
42427: LD_VAR 0 2
42431: PUSH
42432: LD_VAR 0 3
42436: ARRAY
42437: PPUSH
42438: LD_INT 3
42440: PPUSH
42441: CALL_OW 259
42445: PUSH
42446: LD_VAR 0 2
42450: PUSH
42451: LD_VAR 0 3
42455: ARRAY
42456: PPUSH
42457: CALL_OW 432
42461: MINUS
42462: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42463: LD_VAR 0 4
42467: PUSH
42468: LD_VAR 0 5
42472: PPUSH
42473: LD_INT 3
42475: PPUSH
42476: CALL_OW 259
42480: PUSH
42481: LD_VAR 0 5
42485: PPUSH
42486: CALL_OW 432
42490: MINUS
42491: GREATEREQUAL
42492: IFFALSE 42510
// mech := result [ i ] ;
42494: LD_ADDR_VAR 0 5
42498: PUSH
42499: LD_VAR 0 2
42503: PUSH
42504: LD_VAR 0 3
42508: ARRAY
42509: ST_TO_ADDR
// end ;
42510: GO 42419
42512: POP
42513: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42514: LD_VAR 0 1
42518: PPUSH
42519: LD_VAR 0 5
42523: PPUSH
42524: CALL_OW 135
// end ;
42528: LD_VAR 0 2
42532: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42533: LD_INT 0
42535: PPUSH
42536: PPUSH
42537: PPUSH
42538: PPUSH
42539: PPUSH
42540: PPUSH
42541: PPUSH
42542: PPUSH
42543: PPUSH
42544: PPUSH
42545: PPUSH
42546: PPUSH
42547: PPUSH
// result := [ ] ;
42548: LD_ADDR_VAR 0 7
42552: PUSH
42553: EMPTY
42554: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42555: LD_VAR 0 1
42559: PPUSH
42560: CALL_OW 266
42564: PUSH
42565: LD_INT 0
42567: PUSH
42568: LD_INT 1
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: IN
42575: NOT
42576: IFFALSE 42580
// exit ;
42578: GO 44214
// if name then
42580: LD_VAR 0 3
42584: IFFALSE 42600
// SetBName ( base_dep , name ) ;
42586: LD_VAR 0 1
42590: PPUSH
42591: LD_VAR 0 3
42595: PPUSH
42596: CALL_OW 500
// base := GetBase ( base_dep ) ;
42600: LD_ADDR_VAR 0 15
42604: PUSH
42605: LD_VAR 0 1
42609: PPUSH
42610: CALL_OW 274
42614: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42615: LD_ADDR_VAR 0 16
42619: PUSH
42620: LD_VAR 0 1
42624: PPUSH
42625: CALL_OW 255
42629: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42630: LD_ADDR_VAR 0 17
42634: PUSH
42635: LD_VAR 0 1
42639: PPUSH
42640: CALL_OW 248
42644: ST_TO_ADDR
// if sources then
42645: LD_VAR 0 5
42649: IFFALSE 42696
// for i = 1 to 3 do
42651: LD_ADDR_VAR 0 8
42655: PUSH
42656: DOUBLE
42657: LD_INT 1
42659: DEC
42660: ST_TO_ADDR
42661: LD_INT 3
42663: PUSH
42664: FOR_TO
42665: IFFALSE 42694
// AddResourceType ( base , i , sources [ i ] ) ;
42667: LD_VAR 0 15
42671: PPUSH
42672: LD_VAR 0 8
42676: PPUSH
42677: LD_VAR 0 5
42681: PUSH
42682: LD_VAR 0 8
42686: ARRAY
42687: PPUSH
42688: CALL_OW 276
42692: GO 42664
42694: POP
42695: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42696: LD_ADDR_VAR 0 18
42700: PUSH
42701: LD_VAR 0 15
42705: PPUSH
42706: LD_VAR 0 2
42710: PPUSH
42711: LD_INT 1
42713: PPUSH
42714: CALL 41957 0 3
42718: ST_TO_ADDR
// InitHc ;
42719: CALL_OW 19
// InitUc ;
42723: CALL_OW 18
// uc_side := side ;
42727: LD_ADDR_OWVAR 20
42731: PUSH
42732: LD_VAR 0 16
42736: ST_TO_ADDR
// uc_nation := nation ;
42737: LD_ADDR_OWVAR 21
42741: PUSH
42742: LD_VAR 0 17
42746: ST_TO_ADDR
// if buildings then
42747: LD_VAR 0 18
42751: IFFALSE 44073
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42753: LD_ADDR_VAR 0 19
42757: PUSH
42758: LD_VAR 0 18
42762: PPUSH
42763: LD_INT 2
42765: PUSH
42766: LD_INT 30
42768: PUSH
42769: LD_INT 29
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 30
42778: PUSH
42779: LD_INT 30
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: LIST
42790: PPUSH
42791: CALL_OW 72
42795: ST_TO_ADDR
// if tmp then
42796: LD_VAR 0 19
42800: IFFALSE 42848
// for i in tmp do
42802: LD_ADDR_VAR 0 8
42806: PUSH
42807: LD_VAR 0 19
42811: PUSH
42812: FOR_IN
42813: IFFALSE 42846
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42815: LD_VAR 0 8
42819: PPUSH
42820: CALL_OW 250
42824: PPUSH
42825: LD_VAR 0 8
42829: PPUSH
42830: CALL_OW 251
42834: PPUSH
42835: LD_VAR 0 16
42839: PPUSH
42840: CALL_OW 441
42844: GO 42812
42846: POP
42847: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42848: LD_VAR 0 18
42852: PPUSH
42853: LD_INT 2
42855: PUSH
42856: LD_INT 30
42858: PUSH
42859: LD_INT 32
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 30
42868: PUSH
42869: LD_INT 33
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: LIST
42880: PPUSH
42881: CALL_OW 72
42885: IFFALSE 42973
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42887: LD_ADDR_VAR 0 8
42891: PUSH
42892: LD_VAR 0 18
42896: PPUSH
42897: LD_INT 2
42899: PUSH
42900: LD_INT 30
42902: PUSH
42903: LD_INT 32
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 30
42912: PUSH
42913: LD_INT 33
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: LIST
42924: PPUSH
42925: CALL_OW 72
42929: PUSH
42930: FOR_IN
42931: IFFALSE 42971
// begin if not GetBWeapon ( i ) then
42933: LD_VAR 0 8
42937: PPUSH
42938: CALL_OW 269
42942: NOT
42943: IFFALSE 42969
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42945: LD_VAR 0 8
42949: PPUSH
42950: LD_VAR 0 8
42954: PPUSH
42955: LD_VAR 0 2
42959: PPUSH
42960: CALL 44219 0 2
42964: PPUSH
42965: CALL_OW 431
// end ;
42969: GO 42930
42971: POP
42972: POP
// end ; for i = 1 to personel do
42973: LD_ADDR_VAR 0 8
42977: PUSH
42978: DOUBLE
42979: LD_INT 1
42981: DEC
42982: ST_TO_ADDR
42983: LD_VAR 0 6
42987: PUSH
42988: FOR_TO
42989: IFFALSE 44053
// begin if i > 4 then
42991: LD_VAR 0 8
42995: PUSH
42996: LD_INT 4
42998: GREATER
42999: IFFALSE 43003
// break ;
43001: GO 44053
// case i of 1 :
43003: LD_VAR 0 8
43007: PUSH
43008: LD_INT 1
43010: DOUBLE
43011: EQUAL
43012: IFTRUE 43016
43014: GO 43096
43016: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
43017: LD_ADDR_VAR 0 12
43021: PUSH
43022: LD_VAR 0 18
43026: PPUSH
43027: LD_INT 22
43029: PUSH
43030: LD_VAR 0 16
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 58
43041: PUSH
43042: EMPTY
43043: LIST
43044: PUSH
43045: LD_INT 2
43047: PUSH
43048: LD_INT 30
43050: PUSH
43051: LD_INT 32
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 30
43060: PUSH
43061: LD_INT 4
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 30
43070: PUSH
43071: LD_INT 5
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: LIST
43088: PPUSH
43089: CALL_OW 72
43093: ST_TO_ADDR
43094: GO 43318
43096: LD_INT 2
43098: DOUBLE
43099: EQUAL
43100: IFTRUE 43104
43102: GO 43166
43104: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43105: LD_ADDR_VAR 0 12
43109: PUSH
43110: LD_VAR 0 18
43114: PPUSH
43115: LD_INT 22
43117: PUSH
43118: LD_VAR 0 16
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 2
43129: PUSH
43130: LD_INT 30
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 30
43142: PUSH
43143: LD_INT 1
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: LIST
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PPUSH
43159: CALL_OW 72
43163: ST_TO_ADDR
43164: GO 43318
43166: LD_INT 3
43168: DOUBLE
43169: EQUAL
43170: IFTRUE 43174
43172: GO 43236
43174: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43175: LD_ADDR_VAR 0 12
43179: PUSH
43180: LD_VAR 0 18
43184: PPUSH
43185: LD_INT 22
43187: PUSH
43188: LD_VAR 0 16
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 2
43199: PUSH
43200: LD_INT 30
43202: PUSH
43203: LD_INT 2
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 30
43212: PUSH
43213: LD_INT 3
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: LIST
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PPUSH
43229: CALL_OW 72
43233: ST_TO_ADDR
43234: GO 43318
43236: LD_INT 4
43238: DOUBLE
43239: EQUAL
43240: IFTRUE 43244
43242: GO 43317
43244: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43245: LD_ADDR_VAR 0 12
43249: PUSH
43250: LD_VAR 0 18
43254: PPUSH
43255: LD_INT 22
43257: PUSH
43258: LD_VAR 0 16
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 2
43269: PUSH
43270: LD_INT 30
43272: PUSH
43273: LD_INT 6
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 30
43282: PUSH
43283: LD_INT 7
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 30
43292: PUSH
43293: LD_INT 8
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PPUSH
43310: CALL_OW 72
43314: ST_TO_ADDR
43315: GO 43318
43317: POP
// if i = 1 then
43318: LD_VAR 0 8
43322: PUSH
43323: LD_INT 1
43325: EQUAL
43326: IFFALSE 43437
// begin tmp := [ ] ;
43328: LD_ADDR_VAR 0 19
43332: PUSH
43333: EMPTY
43334: ST_TO_ADDR
// for j in f do
43335: LD_ADDR_VAR 0 9
43339: PUSH
43340: LD_VAR 0 12
43344: PUSH
43345: FOR_IN
43346: IFFALSE 43419
// if GetBType ( j ) = b_bunker then
43348: LD_VAR 0 9
43352: PPUSH
43353: CALL_OW 266
43357: PUSH
43358: LD_INT 32
43360: EQUAL
43361: IFFALSE 43388
// tmp := Insert ( tmp , 1 , j ) else
43363: LD_ADDR_VAR 0 19
43367: PUSH
43368: LD_VAR 0 19
43372: PPUSH
43373: LD_INT 1
43375: PPUSH
43376: LD_VAR 0 9
43380: PPUSH
43381: CALL_OW 2
43385: ST_TO_ADDR
43386: GO 43417
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43388: LD_ADDR_VAR 0 19
43392: PUSH
43393: LD_VAR 0 19
43397: PPUSH
43398: LD_VAR 0 19
43402: PUSH
43403: LD_INT 1
43405: PLUS
43406: PPUSH
43407: LD_VAR 0 9
43411: PPUSH
43412: CALL_OW 2
43416: ST_TO_ADDR
43417: GO 43345
43419: POP
43420: POP
// if tmp then
43421: LD_VAR 0 19
43425: IFFALSE 43437
// f := tmp ;
43427: LD_ADDR_VAR 0 12
43431: PUSH
43432: LD_VAR 0 19
43436: ST_TO_ADDR
// end ; x := personel [ i ] ;
43437: LD_ADDR_VAR 0 13
43441: PUSH
43442: LD_VAR 0 6
43446: PUSH
43447: LD_VAR 0 8
43451: ARRAY
43452: ST_TO_ADDR
// if x = - 1 then
43453: LD_VAR 0 13
43457: PUSH
43458: LD_INT 1
43460: NEG
43461: EQUAL
43462: IFFALSE 43671
// begin for j in f do
43464: LD_ADDR_VAR 0 9
43468: PUSH
43469: LD_VAR 0 12
43473: PUSH
43474: FOR_IN
43475: IFFALSE 43667
// repeat InitHc ;
43477: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43481: LD_VAR 0 9
43485: PPUSH
43486: CALL_OW 266
43490: PUSH
43491: LD_INT 5
43493: EQUAL
43494: IFFALSE 43564
// begin if UnitsInside ( j ) < 3 then
43496: LD_VAR 0 9
43500: PPUSH
43501: CALL_OW 313
43505: PUSH
43506: LD_INT 3
43508: LESS
43509: IFFALSE 43545
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43511: LD_INT 0
43513: PPUSH
43514: LD_INT 5
43516: PUSH
43517: LD_INT 8
43519: PUSH
43520: LD_INT 9
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: LIST
43527: PUSH
43528: LD_VAR 0 17
43532: ARRAY
43533: PPUSH
43534: LD_VAR 0 4
43538: PPUSH
43539: CALL_OW 380
43543: GO 43562
// PrepareHuman ( false , i , skill ) ;
43545: LD_INT 0
43547: PPUSH
43548: LD_VAR 0 8
43552: PPUSH
43553: LD_VAR 0 4
43557: PPUSH
43558: CALL_OW 380
// end else
43562: GO 43581
// PrepareHuman ( false , i , skill ) ;
43564: LD_INT 0
43566: PPUSH
43567: LD_VAR 0 8
43571: PPUSH
43572: LD_VAR 0 4
43576: PPUSH
43577: CALL_OW 380
// un := CreateHuman ;
43581: LD_ADDR_VAR 0 14
43585: PUSH
43586: CALL_OW 44
43590: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43591: LD_ADDR_VAR 0 7
43595: PUSH
43596: LD_VAR 0 7
43600: PPUSH
43601: LD_INT 1
43603: PPUSH
43604: LD_VAR 0 14
43608: PPUSH
43609: CALL_OW 2
43613: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43614: LD_VAR 0 14
43618: PPUSH
43619: LD_VAR 0 9
43623: PPUSH
43624: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43628: LD_VAR 0 9
43632: PPUSH
43633: CALL_OW 313
43637: PUSH
43638: LD_INT 6
43640: EQUAL
43641: PUSH
43642: LD_VAR 0 9
43646: PPUSH
43647: CALL_OW 266
43651: PUSH
43652: LD_INT 32
43654: PUSH
43655: LD_INT 31
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: IN
43662: OR
43663: IFFALSE 43477
43665: GO 43474
43667: POP
43668: POP
// end else
43669: GO 44051
// for j = 1 to x do
43671: LD_ADDR_VAR 0 9
43675: PUSH
43676: DOUBLE
43677: LD_INT 1
43679: DEC
43680: ST_TO_ADDR
43681: LD_VAR 0 13
43685: PUSH
43686: FOR_TO
43687: IFFALSE 44049
// begin InitHc ;
43689: CALL_OW 19
// if not f then
43693: LD_VAR 0 12
43697: NOT
43698: IFFALSE 43787
// begin PrepareHuman ( false , i , skill ) ;
43700: LD_INT 0
43702: PPUSH
43703: LD_VAR 0 8
43707: PPUSH
43708: LD_VAR 0 4
43712: PPUSH
43713: CALL_OW 380
// un := CreateHuman ;
43717: LD_ADDR_VAR 0 14
43721: PUSH
43722: CALL_OW 44
43726: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43727: LD_ADDR_VAR 0 7
43731: PUSH
43732: LD_VAR 0 7
43736: PPUSH
43737: LD_INT 1
43739: PPUSH
43740: LD_VAR 0 14
43744: PPUSH
43745: CALL_OW 2
43749: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43750: LD_VAR 0 14
43754: PPUSH
43755: LD_VAR 0 1
43759: PPUSH
43760: CALL_OW 250
43764: PPUSH
43765: LD_VAR 0 1
43769: PPUSH
43770: CALL_OW 251
43774: PPUSH
43775: LD_INT 10
43777: PPUSH
43778: LD_INT 0
43780: PPUSH
43781: CALL_OW 50
// continue ;
43785: GO 43686
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43787: LD_VAR 0 12
43791: PUSH
43792: LD_INT 1
43794: ARRAY
43795: PPUSH
43796: CALL_OW 313
43800: PUSH
43801: LD_VAR 0 12
43805: PUSH
43806: LD_INT 1
43808: ARRAY
43809: PPUSH
43810: CALL_OW 266
43814: PUSH
43815: LD_INT 32
43817: PUSH
43818: LD_INT 31
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: IN
43825: AND
43826: PUSH
43827: LD_VAR 0 12
43831: PUSH
43832: LD_INT 1
43834: ARRAY
43835: PPUSH
43836: CALL_OW 313
43840: PUSH
43841: LD_INT 6
43843: EQUAL
43844: OR
43845: IFFALSE 43865
// f := Delete ( f , 1 ) ;
43847: LD_ADDR_VAR 0 12
43851: PUSH
43852: LD_VAR 0 12
43856: PPUSH
43857: LD_INT 1
43859: PPUSH
43860: CALL_OW 3
43864: ST_TO_ADDR
// if not f then
43865: LD_VAR 0 12
43869: NOT
43870: IFFALSE 43888
// begin x := x + 2 ;
43872: LD_ADDR_VAR 0 13
43876: PUSH
43877: LD_VAR 0 13
43881: PUSH
43882: LD_INT 2
43884: PLUS
43885: ST_TO_ADDR
// continue ;
43886: GO 43686
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43888: LD_VAR 0 12
43892: PUSH
43893: LD_INT 1
43895: ARRAY
43896: PPUSH
43897: CALL_OW 266
43901: PUSH
43902: LD_INT 5
43904: EQUAL
43905: IFFALSE 43979
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43907: LD_VAR 0 12
43911: PUSH
43912: LD_INT 1
43914: ARRAY
43915: PPUSH
43916: CALL_OW 313
43920: PUSH
43921: LD_INT 3
43923: LESS
43924: IFFALSE 43960
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43926: LD_INT 0
43928: PPUSH
43929: LD_INT 5
43931: PUSH
43932: LD_INT 8
43934: PUSH
43935: LD_INT 9
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: LIST
43942: PUSH
43943: LD_VAR 0 17
43947: ARRAY
43948: PPUSH
43949: LD_VAR 0 4
43953: PPUSH
43954: CALL_OW 380
43958: GO 43977
// PrepareHuman ( false , i , skill ) ;
43960: LD_INT 0
43962: PPUSH
43963: LD_VAR 0 8
43967: PPUSH
43968: LD_VAR 0 4
43972: PPUSH
43973: CALL_OW 380
// end else
43977: GO 43996
// PrepareHuman ( false , i , skill ) ;
43979: LD_INT 0
43981: PPUSH
43982: LD_VAR 0 8
43986: PPUSH
43987: LD_VAR 0 4
43991: PPUSH
43992: CALL_OW 380
// un := CreateHuman ;
43996: LD_ADDR_VAR 0 14
44000: PUSH
44001: CALL_OW 44
44005: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44006: LD_ADDR_VAR 0 7
44010: PUSH
44011: LD_VAR 0 7
44015: PPUSH
44016: LD_INT 1
44018: PPUSH
44019: LD_VAR 0 14
44023: PPUSH
44024: CALL_OW 2
44028: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
44029: LD_VAR 0 14
44033: PPUSH
44034: LD_VAR 0 12
44038: PUSH
44039: LD_INT 1
44041: ARRAY
44042: PPUSH
44043: CALL_OW 52
// end ;
44047: GO 43686
44049: POP
44050: POP
// end ;
44051: GO 42988
44053: POP
44054: POP
// result := result ^ buildings ;
44055: LD_ADDR_VAR 0 7
44059: PUSH
44060: LD_VAR 0 7
44064: PUSH
44065: LD_VAR 0 18
44069: ADD
44070: ST_TO_ADDR
// end else
44071: GO 44214
// begin for i = 1 to personel do
44073: LD_ADDR_VAR 0 8
44077: PUSH
44078: DOUBLE
44079: LD_INT 1
44081: DEC
44082: ST_TO_ADDR
44083: LD_VAR 0 6
44087: PUSH
44088: FOR_TO
44089: IFFALSE 44212
// begin if i > 4 then
44091: LD_VAR 0 8
44095: PUSH
44096: LD_INT 4
44098: GREATER
44099: IFFALSE 44103
// break ;
44101: GO 44212
// x := personel [ i ] ;
44103: LD_ADDR_VAR 0 13
44107: PUSH
44108: LD_VAR 0 6
44112: PUSH
44113: LD_VAR 0 8
44117: ARRAY
44118: ST_TO_ADDR
// if x = - 1 then
44119: LD_VAR 0 13
44123: PUSH
44124: LD_INT 1
44126: NEG
44127: EQUAL
44128: IFFALSE 44132
// continue ;
44130: GO 44088
// PrepareHuman ( false , i , skill ) ;
44132: LD_INT 0
44134: PPUSH
44135: LD_VAR 0 8
44139: PPUSH
44140: LD_VAR 0 4
44144: PPUSH
44145: CALL_OW 380
// un := CreateHuman ;
44149: LD_ADDR_VAR 0 14
44153: PUSH
44154: CALL_OW 44
44158: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44159: LD_VAR 0 14
44163: PPUSH
44164: LD_VAR 0 1
44168: PPUSH
44169: CALL_OW 250
44173: PPUSH
44174: LD_VAR 0 1
44178: PPUSH
44179: CALL_OW 251
44183: PPUSH
44184: LD_INT 10
44186: PPUSH
44187: LD_INT 0
44189: PPUSH
44190: CALL_OW 50
// result := result ^ un ;
44194: LD_ADDR_VAR 0 7
44198: PUSH
44199: LD_VAR 0 7
44203: PUSH
44204: LD_VAR 0 14
44208: ADD
44209: ST_TO_ADDR
// end ;
44210: GO 44088
44212: POP
44213: POP
// end ; end ;
44214: LD_VAR 0 7
44218: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44219: LD_INT 0
44221: PPUSH
44222: PPUSH
44223: PPUSH
44224: PPUSH
44225: PPUSH
44226: PPUSH
44227: PPUSH
44228: PPUSH
44229: PPUSH
44230: PPUSH
44231: PPUSH
44232: PPUSH
44233: PPUSH
44234: PPUSH
44235: PPUSH
44236: PPUSH
// result := false ;
44237: LD_ADDR_VAR 0 3
44241: PUSH
44242: LD_INT 0
44244: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44245: LD_VAR 0 1
44249: NOT
44250: PUSH
44251: LD_VAR 0 1
44255: PPUSH
44256: CALL_OW 266
44260: PUSH
44261: LD_INT 32
44263: PUSH
44264: LD_INT 33
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: IN
44271: NOT
44272: OR
44273: IFFALSE 44277
// exit ;
44275: GO 45386
// nat := GetNation ( tower ) ;
44277: LD_ADDR_VAR 0 12
44281: PUSH
44282: LD_VAR 0 1
44286: PPUSH
44287: CALL_OW 248
44291: ST_TO_ADDR
// side := GetSide ( tower ) ;
44292: LD_ADDR_VAR 0 16
44296: PUSH
44297: LD_VAR 0 1
44301: PPUSH
44302: CALL_OW 255
44306: ST_TO_ADDR
// x := GetX ( tower ) ;
44307: LD_ADDR_VAR 0 10
44311: PUSH
44312: LD_VAR 0 1
44316: PPUSH
44317: CALL_OW 250
44321: ST_TO_ADDR
// y := GetY ( tower ) ;
44322: LD_ADDR_VAR 0 11
44326: PUSH
44327: LD_VAR 0 1
44331: PPUSH
44332: CALL_OW 251
44336: ST_TO_ADDR
// if not x or not y then
44337: LD_VAR 0 10
44341: NOT
44342: PUSH
44343: LD_VAR 0 11
44347: NOT
44348: OR
44349: IFFALSE 44353
// exit ;
44351: GO 45386
// weapon := 0 ;
44353: LD_ADDR_VAR 0 18
44357: PUSH
44358: LD_INT 0
44360: ST_TO_ADDR
// fac_list := [ ] ;
44361: LD_ADDR_VAR 0 17
44365: PUSH
44366: EMPTY
44367: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44368: LD_ADDR_VAR 0 6
44372: PUSH
44373: LD_VAR 0 1
44377: PPUSH
44378: CALL_OW 274
44382: PPUSH
44383: LD_VAR 0 2
44387: PPUSH
44388: LD_INT 0
44390: PPUSH
44391: CALL 41957 0 3
44395: PPUSH
44396: LD_INT 30
44398: PUSH
44399: LD_INT 3
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PPUSH
44406: CALL_OW 72
44410: ST_TO_ADDR
// if not factories then
44411: LD_VAR 0 6
44415: NOT
44416: IFFALSE 44420
// exit ;
44418: GO 45386
// for i in factories do
44420: LD_ADDR_VAR 0 8
44424: PUSH
44425: LD_VAR 0 6
44429: PUSH
44430: FOR_IN
44431: IFFALSE 44456
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44433: LD_ADDR_VAR 0 17
44437: PUSH
44438: LD_VAR 0 17
44442: PUSH
44443: LD_VAR 0 8
44447: PPUSH
44448: CALL_OW 478
44452: UNION
44453: ST_TO_ADDR
44454: GO 44430
44456: POP
44457: POP
// if not fac_list then
44458: LD_VAR 0 17
44462: NOT
44463: IFFALSE 44467
// exit ;
44465: GO 45386
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44467: LD_ADDR_VAR 0 5
44471: PUSH
44472: LD_INT 4
44474: PUSH
44475: LD_INT 5
44477: PUSH
44478: LD_INT 9
44480: PUSH
44481: LD_INT 10
44483: PUSH
44484: LD_INT 6
44486: PUSH
44487: LD_INT 7
44489: PUSH
44490: LD_INT 11
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 27
44504: PUSH
44505: LD_INT 28
44507: PUSH
44508: LD_INT 26
44510: PUSH
44511: LD_INT 30
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 43
44522: PUSH
44523: LD_INT 44
44525: PUSH
44526: LD_INT 46
44528: PUSH
44529: LD_INT 45
44531: PUSH
44532: LD_INT 47
44534: PUSH
44535: LD_INT 49
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: LIST
44550: PUSH
44551: LD_VAR 0 12
44555: ARRAY
44556: ST_TO_ADDR
// list := list isect fac_list ;
44557: LD_ADDR_VAR 0 5
44561: PUSH
44562: LD_VAR 0 5
44566: PUSH
44567: LD_VAR 0 17
44571: ISECT
44572: ST_TO_ADDR
// if not list then
44573: LD_VAR 0 5
44577: NOT
44578: IFFALSE 44582
// exit ;
44580: GO 45386
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44582: LD_VAR 0 12
44586: PUSH
44587: LD_INT 3
44589: EQUAL
44590: PUSH
44591: LD_INT 49
44593: PUSH
44594: LD_VAR 0 5
44598: IN
44599: AND
44600: PUSH
44601: LD_INT 31
44603: PPUSH
44604: LD_VAR 0 16
44608: PPUSH
44609: CALL_OW 321
44613: PUSH
44614: LD_INT 2
44616: EQUAL
44617: AND
44618: IFFALSE 44678
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44620: LD_INT 22
44622: PUSH
44623: LD_VAR 0 16
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 35
44634: PUSH
44635: LD_INT 49
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 91
44644: PUSH
44645: LD_VAR 0 1
44649: PUSH
44650: LD_INT 10
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: LIST
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: LIST
44662: PPUSH
44663: CALL_OW 69
44667: NOT
44668: IFFALSE 44678
// weapon := ru_time_lapser ;
44670: LD_ADDR_VAR 0 18
44674: PUSH
44675: LD_INT 49
44677: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44678: LD_VAR 0 12
44682: PUSH
44683: LD_INT 1
44685: PUSH
44686: LD_INT 2
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: IN
44693: PUSH
44694: LD_INT 11
44696: PUSH
44697: LD_VAR 0 5
44701: IN
44702: PUSH
44703: LD_INT 30
44705: PUSH
44706: LD_VAR 0 5
44710: IN
44711: OR
44712: AND
44713: PUSH
44714: LD_INT 6
44716: PPUSH
44717: LD_VAR 0 16
44721: PPUSH
44722: CALL_OW 321
44726: PUSH
44727: LD_INT 2
44729: EQUAL
44730: AND
44731: IFFALSE 44896
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44733: LD_INT 22
44735: PUSH
44736: LD_VAR 0 16
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 2
44747: PUSH
44748: LD_INT 35
44750: PUSH
44751: LD_INT 11
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 35
44760: PUSH
44761: LD_INT 30
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 91
44775: PUSH
44776: LD_VAR 0 1
44780: PUSH
44781: LD_INT 18
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: LIST
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: LIST
44793: PPUSH
44794: CALL_OW 69
44798: NOT
44799: PUSH
44800: LD_INT 22
44802: PUSH
44803: LD_VAR 0 16
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 2
44814: PUSH
44815: LD_INT 30
44817: PUSH
44818: LD_INT 32
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 30
44827: PUSH
44828: LD_INT 33
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 91
44842: PUSH
44843: LD_VAR 0 1
44847: PUSH
44848: LD_INT 12
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: LIST
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: LIST
44860: PUSH
44861: EMPTY
44862: LIST
44863: PPUSH
44864: CALL_OW 69
44868: PUSH
44869: LD_INT 2
44871: GREATER
44872: AND
44873: IFFALSE 44896
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44875: LD_ADDR_VAR 0 18
44879: PUSH
44880: LD_INT 11
44882: PUSH
44883: LD_INT 30
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_VAR 0 12
44894: ARRAY
44895: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44896: LD_VAR 0 18
44900: NOT
44901: PUSH
44902: LD_INT 40
44904: PPUSH
44905: LD_VAR 0 16
44909: PPUSH
44910: CALL_OW 321
44914: PUSH
44915: LD_INT 2
44917: EQUAL
44918: AND
44919: PUSH
44920: LD_INT 7
44922: PUSH
44923: LD_VAR 0 5
44927: IN
44928: PUSH
44929: LD_INT 28
44931: PUSH
44932: LD_VAR 0 5
44936: IN
44937: OR
44938: PUSH
44939: LD_INT 45
44941: PUSH
44942: LD_VAR 0 5
44946: IN
44947: OR
44948: AND
44949: IFFALSE 45203
// begin hex := GetHexInfo ( x , y ) ;
44951: LD_ADDR_VAR 0 4
44955: PUSH
44956: LD_VAR 0 10
44960: PPUSH
44961: LD_VAR 0 11
44965: PPUSH
44966: CALL_OW 546
44970: ST_TO_ADDR
// if hex [ 1 ] then
44971: LD_VAR 0 4
44975: PUSH
44976: LD_INT 1
44978: ARRAY
44979: IFFALSE 44983
// exit ;
44981: GO 45386
// height := hex [ 2 ] ;
44983: LD_ADDR_VAR 0 15
44987: PUSH
44988: LD_VAR 0 4
44992: PUSH
44993: LD_INT 2
44995: ARRAY
44996: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44997: LD_ADDR_VAR 0 14
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: LD_INT 2
45007: PUSH
45008: LD_INT 3
45010: PUSH
45011: LD_INT 5
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: ST_TO_ADDR
// for i in tmp do
45020: LD_ADDR_VAR 0 8
45024: PUSH
45025: LD_VAR 0 14
45029: PUSH
45030: FOR_IN
45031: IFFALSE 45201
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
45033: LD_ADDR_VAR 0 9
45037: PUSH
45038: LD_VAR 0 10
45042: PPUSH
45043: LD_VAR 0 8
45047: PPUSH
45048: LD_INT 5
45050: PPUSH
45051: CALL_OW 272
45055: PUSH
45056: LD_VAR 0 11
45060: PPUSH
45061: LD_VAR 0 8
45065: PPUSH
45066: LD_INT 5
45068: PPUSH
45069: CALL_OW 273
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45078: LD_VAR 0 9
45082: PUSH
45083: LD_INT 1
45085: ARRAY
45086: PPUSH
45087: LD_VAR 0 9
45091: PUSH
45092: LD_INT 2
45094: ARRAY
45095: PPUSH
45096: CALL_OW 488
45100: IFFALSE 45199
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45102: LD_ADDR_VAR 0 4
45106: PUSH
45107: LD_VAR 0 9
45111: PUSH
45112: LD_INT 1
45114: ARRAY
45115: PPUSH
45116: LD_VAR 0 9
45120: PUSH
45121: LD_INT 2
45123: ARRAY
45124: PPUSH
45125: CALL_OW 546
45129: ST_TO_ADDR
// if hex [ 1 ] then
45130: LD_VAR 0 4
45134: PUSH
45135: LD_INT 1
45137: ARRAY
45138: IFFALSE 45142
// continue ;
45140: GO 45030
// h := hex [ 2 ] ;
45142: LD_ADDR_VAR 0 13
45146: PUSH
45147: LD_VAR 0 4
45151: PUSH
45152: LD_INT 2
45154: ARRAY
45155: ST_TO_ADDR
// if h + 7 < height then
45156: LD_VAR 0 13
45160: PUSH
45161: LD_INT 7
45163: PLUS
45164: PUSH
45165: LD_VAR 0 15
45169: LESS
45170: IFFALSE 45199
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45172: LD_ADDR_VAR 0 18
45176: PUSH
45177: LD_INT 7
45179: PUSH
45180: LD_INT 28
45182: PUSH
45183: LD_INT 45
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: LIST
45190: PUSH
45191: LD_VAR 0 12
45195: ARRAY
45196: ST_TO_ADDR
// break ;
45197: GO 45201
// end ; end ; end ;
45199: GO 45030
45201: POP
45202: POP
// end ; if not weapon then
45203: LD_VAR 0 18
45207: NOT
45208: IFFALSE 45268
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45210: LD_ADDR_VAR 0 5
45214: PUSH
45215: LD_VAR 0 5
45219: PUSH
45220: LD_INT 11
45222: PUSH
45223: LD_INT 30
45225: PUSH
45226: LD_INT 49
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: LIST
45233: DIFF
45234: ST_TO_ADDR
// if not list then
45235: LD_VAR 0 5
45239: NOT
45240: IFFALSE 45244
// exit ;
45242: GO 45386
// weapon := list [ rand ( 1 , list ) ] ;
45244: LD_ADDR_VAR 0 18
45248: PUSH
45249: LD_VAR 0 5
45253: PUSH
45254: LD_INT 1
45256: PPUSH
45257: LD_VAR 0 5
45261: PPUSH
45262: CALL_OW 12
45266: ARRAY
45267: ST_TO_ADDR
// end ; if weapon then
45268: LD_VAR 0 18
45272: IFFALSE 45386
// begin tmp := CostOfWeapon ( weapon ) ;
45274: LD_ADDR_VAR 0 14
45278: PUSH
45279: LD_VAR 0 18
45283: PPUSH
45284: CALL_OW 451
45288: ST_TO_ADDR
// j := GetBase ( tower ) ;
45289: LD_ADDR_VAR 0 9
45293: PUSH
45294: LD_VAR 0 1
45298: PPUSH
45299: CALL_OW 274
45303: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45304: LD_VAR 0 9
45308: PPUSH
45309: LD_INT 1
45311: PPUSH
45312: CALL_OW 275
45316: PUSH
45317: LD_VAR 0 14
45321: PUSH
45322: LD_INT 1
45324: ARRAY
45325: GREATEREQUAL
45326: PUSH
45327: LD_VAR 0 9
45331: PPUSH
45332: LD_INT 2
45334: PPUSH
45335: CALL_OW 275
45339: PUSH
45340: LD_VAR 0 14
45344: PUSH
45345: LD_INT 2
45347: ARRAY
45348: GREATEREQUAL
45349: AND
45350: PUSH
45351: LD_VAR 0 9
45355: PPUSH
45356: LD_INT 3
45358: PPUSH
45359: CALL_OW 275
45363: PUSH
45364: LD_VAR 0 14
45368: PUSH
45369: LD_INT 3
45371: ARRAY
45372: GREATEREQUAL
45373: AND
45374: IFFALSE 45386
// result := weapon ;
45376: LD_ADDR_VAR 0 3
45380: PUSH
45381: LD_VAR 0 18
45385: ST_TO_ADDR
// end ; end ;
45386: LD_VAR 0 3
45390: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45391: LD_INT 0
45393: PPUSH
45394: PPUSH
// result := true ;
45395: LD_ADDR_VAR 0 3
45399: PUSH
45400: LD_INT 1
45402: ST_TO_ADDR
// if array1 = array2 then
45403: LD_VAR 0 1
45407: PUSH
45408: LD_VAR 0 2
45412: EQUAL
45413: IFFALSE 45473
// begin for i = 1 to array1 do
45415: LD_ADDR_VAR 0 4
45419: PUSH
45420: DOUBLE
45421: LD_INT 1
45423: DEC
45424: ST_TO_ADDR
45425: LD_VAR 0 1
45429: PUSH
45430: FOR_TO
45431: IFFALSE 45469
// if array1 [ i ] <> array2 [ i ] then
45433: LD_VAR 0 1
45437: PUSH
45438: LD_VAR 0 4
45442: ARRAY
45443: PUSH
45444: LD_VAR 0 2
45448: PUSH
45449: LD_VAR 0 4
45453: ARRAY
45454: NONEQUAL
45455: IFFALSE 45467
// begin result := false ;
45457: LD_ADDR_VAR 0 3
45461: PUSH
45462: LD_INT 0
45464: ST_TO_ADDR
// break ;
45465: GO 45469
// end ;
45467: GO 45430
45469: POP
45470: POP
// end else
45471: GO 45481
// result := false ;
45473: LD_ADDR_VAR 0 3
45477: PUSH
45478: LD_INT 0
45480: ST_TO_ADDR
// end ;
45481: LD_VAR 0 3
45485: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45486: LD_INT 0
45488: PPUSH
45489: PPUSH
// if not array1 or not array2 then
45490: LD_VAR 0 1
45494: NOT
45495: PUSH
45496: LD_VAR 0 2
45500: NOT
45501: OR
45502: IFFALSE 45506
// exit ;
45504: GO 45570
// result := true ;
45506: LD_ADDR_VAR 0 3
45510: PUSH
45511: LD_INT 1
45513: ST_TO_ADDR
// for i = 1 to array1 do
45514: LD_ADDR_VAR 0 4
45518: PUSH
45519: DOUBLE
45520: LD_INT 1
45522: DEC
45523: ST_TO_ADDR
45524: LD_VAR 0 1
45528: PUSH
45529: FOR_TO
45530: IFFALSE 45568
// if array1 [ i ] <> array2 [ i ] then
45532: LD_VAR 0 1
45536: PUSH
45537: LD_VAR 0 4
45541: ARRAY
45542: PUSH
45543: LD_VAR 0 2
45547: PUSH
45548: LD_VAR 0 4
45552: ARRAY
45553: NONEQUAL
45554: IFFALSE 45566
// begin result := false ;
45556: LD_ADDR_VAR 0 3
45560: PUSH
45561: LD_INT 0
45563: ST_TO_ADDR
// break ;
45564: GO 45568
// end ;
45566: GO 45529
45568: POP
45569: POP
// end ;
45570: LD_VAR 0 3
45574: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45575: LD_INT 0
45577: PPUSH
45578: PPUSH
45579: PPUSH
// pom := GetBase ( fac ) ;
45580: LD_ADDR_VAR 0 5
45584: PUSH
45585: LD_VAR 0 1
45589: PPUSH
45590: CALL_OW 274
45594: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45595: LD_ADDR_VAR 0 4
45599: PUSH
45600: LD_VAR 0 2
45604: PUSH
45605: LD_INT 1
45607: ARRAY
45608: PPUSH
45609: LD_VAR 0 2
45613: PUSH
45614: LD_INT 2
45616: ARRAY
45617: PPUSH
45618: LD_VAR 0 2
45622: PUSH
45623: LD_INT 3
45625: ARRAY
45626: PPUSH
45627: LD_VAR 0 2
45631: PUSH
45632: LD_INT 4
45634: ARRAY
45635: PPUSH
45636: CALL_OW 449
45640: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45641: LD_ADDR_VAR 0 3
45645: PUSH
45646: LD_VAR 0 5
45650: PPUSH
45651: LD_INT 1
45653: PPUSH
45654: CALL_OW 275
45658: PUSH
45659: LD_VAR 0 4
45663: PUSH
45664: LD_INT 1
45666: ARRAY
45667: GREATEREQUAL
45668: PUSH
45669: LD_VAR 0 5
45673: PPUSH
45674: LD_INT 2
45676: PPUSH
45677: CALL_OW 275
45681: PUSH
45682: LD_VAR 0 4
45686: PUSH
45687: LD_INT 2
45689: ARRAY
45690: GREATEREQUAL
45691: AND
45692: PUSH
45693: LD_VAR 0 5
45697: PPUSH
45698: LD_INT 3
45700: PPUSH
45701: CALL_OW 275
45705: PUSH
45706: LD_VAR 0 4
45710: PUSH
45711: LD_INT 3
45713: ARRAY
45714: GREATEREQUAL
45715: AND
45716: ST_TO_ADDR
// end ;
45717: LD_VAR 0 3
45721: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45722: LD_INT 0
45724: PPUSH
45725: PPUSH
45726: PPUSH
45727: PPUSH
// pom := GetBase ( building ) ;
45728: LD_ADDR_VAR 0 3
45732: PUSH
45733: LD_VAR 0 1
45737: PPUSH
45738: CALL_OW 274
45742: ST_TO_ADDR
// if not pom then
45743: LD_VAR 0 3
45747: NOT
45748: IFFALSE 45752
// exit ;
45750: GO 45922
// btype := GetBType ( building ) ;
45752: LD_ADDR_VAR 0 5
45756: PUSH
45757: LD_VAR 0 1
45761: PPUSH
45762: CALL_OW 266
45766: ST_TO_ADDR
// if btype = b_armoury then
45767: LD_VAR 0 5
45771: PUSH
45772: LD_INT 4
45774: EQUAL
45775: IFFALSE 45785
// btype := b_barracks ;
45777: LD_ADDR_VAR 0 5
45781: PUSH
45782: LD_INT 5
45784: ST_TO_ADDR
// if btype = b_depot then
45785: LD_VAR 0 5
45789: PUSH
45790: LD_INT 0
45792: EQUAL
45793: IFFALSE 45803
// btype := b_warehouse ;
45795: LD_ADDR_VAR 0 5
45799: PUSH
45800: LD_INT 1
45802: ST_TO_ADDR
// if btype = b_workshop then
45803: LD_VAR 0 5
45807: PUSH
45808: LD_INT 2
45810: EQUAL
45811: IFFALSE 45821
// btype := b_factory ;
45813: LD_ADDR_VAR 0 5
45817: PUSH
45818: LD_INT 3
45820: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45821: LD_ADDR_VAR 0 4
45825: PUSH
45826: LD_VAR 0 5
45830: PPUSH
45831: LD_VAR 0 1
45835: PPUSH
45836: CALL_OW 248
45840: PPUSH
45841: CALL_OW 450
45845: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45846: LD_ADDR_VAR 0 2
45850: PUSH
45851: LD_VAR 0 3
45855: PPUSH
45856: LD_INT 1
45858: PPUSH
45859: CALL_OW 275
45863: PUSH
45864: LD_VAR 0 4
45868: PUSH
45869: LD_INT 1
45871: ARRAY
45872: GREATEREQUAL
45873: PUSH
45874: LD_VAR 0 3
45878: PPUSH
45879: LD_INT 2
45881: PPUSH
45882: CALL_OW 275
45886: PUSH
45887: LD_VAR 0 4
45891: PUSH
45892: LD_INT 2
45894: ARRAY
45895: GREATEREQUAL
45896: AND
45897: PUSH
45898: LD_VAR 0 3
45902: PPUSH
45903: LD_INT 3
45905: PPUSH
45906: CALL_OW 275
45910: PUSH
45911: LD_VAR 0 4
45915: PUSH
45916: LD_INT 3
45918: ARRAY
45919: GREATEREQUAL
45920: AND
45921: ST_TO_ADDR
// end ;
45922: LD_VAR 0 2
45926: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45927: LD_INT 0
45929: PPUSH
45930: PPUSH
45931: PPUSH
// pom := GetBase ( building ) ;
45932: LD_ADDR_VAR 0 4
45936: PUSH
45937: LD_VAR 0 1
45941: PPUSH
45942: CALL_OW 274
45946: ST_TO_ADDR
// if not pom then
45947: LD_VAR 0 4
45951: NOT
45952: IFFALSE 45956
// exit ;
45954: GO 46057
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45956: LD_ADDR_VAR 0 5
45960: PUSH
45961: LD_VAR 0 2
45965: PPUSH
45966: LD_VAR 0 1
45970: PPUSH
45971: CALL_OW 248
45975: PPUSH
45976: CALL_OW 450
45980: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45981: LD_ADDR_VAR 0 3
45985: PUSH
45986: LD_VAR 0 4
45990: PPUSH
45991: LD_INT 1
45993: PPUSH
45994: CALL_OW 275
45998: PUSH
45999: LD_VAR 0 5
46003: PUSH
46004: LD_INT 1
46006: ARRAY
46007: GREATEREQUAL
46008: PUSH
46009: LD_VAR 0 4
46013: PPUSH
46014: LD_INT 2
46016: PPUSH
46017: CALL_OW 275
46021: PUSH
46022: LD_VAR 0 5
46026: PUSH
46027: LD_INT 2
46029: ARRAY
46030: GREATEREQUAL
46031: AND
46032: PUSH
46033: LD_VAR 0 4
46037: PPUSH
46038: LD_INT 3
46040: PPUSH
46041: CALL_OW 275
46045: PUSH
46046: LD_VAR 0 5
46050: PUSH
46051: LD_INT 3
46053: ARRAY
46054: GREATEREQUAL
46055: AND
46056: ST_TO_ADDR
// end ;
46057: LD_VAR 0 3
46061: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
46062: LD_INT 0
46064: PPUSH
46065: PPUSH
46066: PPUSH
46067: PPUSH
46068: PPUSH
46069: PPUSH
46070: PPUSH
46071: PPUSH
46072: PPUSH
46073: PPUSH
46074: PPUSH
// result := false ;
46075: LD_ADDR_VAR 0 8
46079: PUSH
46080: LD_INT 0
46082: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
46083: LD_VAR 0 5
46087: NOT
46088: PUSH
46089: LD_VAR 0 1
46093: NOT
46094: OR
46095: PUSH
46096: LD_VAR 0 2
46100: NOT
46101: OR
46102: PUSH
46103: LD_VAR 0 3
46107: NOT
46108: OR
46109: IFFALSE 46113
// exit ;
46111: GO 46927
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46113: LD_ADDR_VAR 0 14
46117: PUSH
46118: LD_VAR 0 1
46122: PPUSH
46123: LD_VAR 0 2
46127: PPUSH
46128: LD_VAR 0 3
46132: PPUSH
46133: LD_VAR 0 4
46137: PPUSH
46138: LD_VAR 0 5
46142: PUSH
46143: LD_INT 1
46145: ARRAY
46146: PPUSH
46147: CALL_OW 248
46151: PPUSH
46152: LD_INT 0
46154: PPUSH
46155: CALL 48164 0 6
46159: ST_TO_ADDR
// if not hexes then
46160: LD_VAR 0 14
46164: NOT
46165: IFFALSE 46169
// exit ;
46167: GO 46927
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46169: LD_ADDR_VAR 0 17
46173: PUSH
46174: LD_VAR 0 5
46178: PPUSH
46179: LD_INT 22
46181: PUSH
46182: LD_VAR 0 13
46186: PPUSH
46187: CALL_OW 255
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 2
46198: PUSH
46199: LD_INT 30
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 30
46211: PUSH
46212: LD_INT 1
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: LIST
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PPUSH
46228: CALL_OW 72
46232: ST_TO_ADDR
// for i = 1 to hexes do
46233: LD_ADDR_VAR 0 9
46237: PUSH
46238: DOUBLE
46239: LD_INT 1
46241: DEC
46242: ST_TO_ADDR
46243: LD_VAR 0 14
46247: PUSH
46248: FOR_TO
46249: IFFALSE 46925
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46251: LD_ADDR_VAR 0 13
46255: PUSH
46256: LD_VAR 0 14
46260: PUSH
46261: LD_VAR 0 9
46265: ARRAY
46266: PUSH
46267: LD_INT 1
46269: ARRAY
46270: PPUSH
46271: LD_VAR 0 14
46275: PUSH
46276: LD_VAR 0 9
46280: ARRAY
46281: PUSH
46282: LD_INT 2
46284: ARRAY
46285: PPUSH
46286: CALL_OW 428
46290: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46291: LD_VAR 0 14
46295: PUSH
46296: LD_VAR 0 9
46300: ARRAY
46301: PUSH
46302: LD_INT 1
46304: ARRAY
46305: PPUSH
46306: LD_VAR 0 14
46310: PUSH
46311: LD_VAR 0 9
46315: ARRAY
46316: PUSH
46317: LD_INT 2
46319: ARRAY
46320: PPUSH
46321: CALL_OW 351
46325: PUSH
46326: LD_VAR 0 14
46330: PUSH
46331: LD_VAR 0 9
46335: ARRAY
46336: PUSH
46337: LD_INT 1
46339: ARRAY
46340: PPUSH
46341: LD_VAR 0 14
46345: PUSH
46346: LD_VAR 0 9
46350: ARRAY
46351: PUSH
46352: LD_INT 2
46354: ARRAY
46355: PPUSH
46356: CALL_OW 488
46360: NOT
46361: OR
46362: PUSH
46363: LD_VAR 0 13
46367: PPUSH
46368: CALL_OW 247
46372: PUSH
46373: LD_INT 3
46375: EQUAL
46376: OR
46377: IFFALSE 46383
// exit ;
46379: POP
46380: POP
46381: GO 46927
// if not tmp then
46383: LD_VAR 0 13
46387: NOT
46388: IFFALSE 46392
// continue ;
46390: GO 46248
// result := true ;
46392: LD_ADDR_VAR 0 8
46396: PUSH
46397: LD_INT 1
46399: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46400: LD_VAR 0 6
46404: PUSH
46405: LD_VAR 0 13
46409: PPUSH
46410: CALL_OW 247
46414: PUSH
46415: LD_INT 2
46417: EQUAL
46418: AND
46419: PUSH
46420: LD_VAR 0 13
46424: PPUSH
46425: CALL_OW 263
46429: PUSH
46430: LD_INT 1
46432: EQUAL
46433: AND
46434: IFFALSE 46598
// begin if IsDrivenBy ( tmp ) then
46436: LD_VAR 0 13
46440: PPUSH
46441: CALL_OW 311
46445: IFFALSE 46449
// continue ;
46447: GO 46248
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46449: LD_VAR 0 6
46453: PPUSH
46454: LD_INT 3
46456: PUSH
46457: LD_INT 60
46459: PUSH
46460: EMPTY
46461: LIST
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 3
46469: PUSH
46470: LD_INT 55
46472: PUSH
46473: EMPTY
46474: LIST
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PPUSH
46484: CALL_OW 72
46488: IFFALSE 46596
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46490: LD_ADDR_VAR 0 18
46494: PUSH
46495: LD_VAR 0 6
46499: PPUSH
46500: LD_INT 3
46502: PUSH
46503: LD_INT 60
46505: PUSH
46506: EMPTY
46507: LIST
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 3
46515: PUSH
46516: LD_INT 55
46518: PUSH
46519: EMPTY
46520: LIST
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PPUSH
46530: CALL_OW 72
46534: PUSH
46535: LD_INT 1
46537: ARRAY
46538: ST_TO_ADDR
// if IsInUnit ( driver ) then
46539: LD_VAR 0 18
46543: PPUSH
46544: CALL_OW 310
46548: IFFALSE 46559
// ComExit ( driver ) ;
46550: LD_VAR 0 18
46554: PPUSH
46555: CALL 71348 0 1
// AddComEnterUnit ( driver , tmp ) ;
46559: LD_VAR 0 18
46563: PPUSH
46564: LD_VAR 0 13
46568: PPUSH
46569: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46573: LD_VAR 0 18
46577: PPUSH
46578: LD_VAR 0 7
46582: PPUSH
46583: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46587: LD_VAR 0 18
46591: PPUSH
46592: CALL_OW 181
// end ; continue ;
46596: GO 46248
// end ; if not cleaners or not tmp in cleaners then
46598: LD_VAR 0 6
46602: NOT
46603: PUSH
46604: LD_VAR 0 13
46608: PUSH
46609: LD_VAR 0 6
46613: IN
46614: NOT
46615: OR
46616: IFFALSE 46923
// begin if dep then
46618: LD_VAR 0 17
46622: IFFALSE 46758
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46624: LD_ADDR_VAR 0 16
46628: PUSH
46629: LD_VAR 0 17
46633: PUSH
46634: LD_INT 1
46636: ARRAY
46637: PPUSH
46638: CALL_OW 250
46642: PPUSH
46643: LD_VAR 0 17
46647: PUSH
46648: LD_INT 1
46650: ARRAY
46651: PPUSH
46652: CALL_OW 254
46656: PPUSH
46657: LD_INT 5
46659: PPUSH
46660: CALL_OW 272
46664: PUSH
46665: LD_VAR 0 17
46669: PUSH
46670: LD_INT 1
46672: ARRAY
46673: PPUSH
46674: CALL_OW 251
46678: PPUSH
46679: LD_VAR 0 17
46683: PUSH
46684: LD_INT 1
46686: ARRAY
46687: PPUSH
46688: CALL_OW 254
46692: PPUSH
46693: LD_INT 5
46695: PPUSH
46696: CALL_OW 273
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46705: LD_VAR 0 16
46709: PUSH
46710: LD_INT 1
46712: ARRAY
46713: PPUSH
46714: LD_VAR 0 16
46718: PUSH
46719: LD_INT 2
46721: ARRAY
46722: PPUSH
46723: CALL_OW 488
46727: IFFALSE 46758
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46729: LD_VAR 0 13
46733: PPUSH
46734: LD_VAR 0 16
46738: PUSH
46739: LD_INT 1
46741: ARRAY
46742: PPUSH
46743: LD_VAR 0 16
46747: PUSH
46748: LD_INT 2
46750: ARRAY
46751: PPUSH
46752: CALL_OW 111
// continue ;
46756: GO 46248
// end ; end ; r := GetDir ( tmp ) ;
46758: LD_ADDR_VAR 0 15
46762: PUSH
46763: LD_VAR 0 13
46767: PPUSH
46768: CALL_OW 254
46772: ST_TO_ADDR
// if r = 5 then
46773: LD_VAR 0 15
46777: PUSH
46778: LD_INT 5
46780: EQUAL
46781: IFFALSE 46791
// r := 0 ;
46783: LD_ADDR_VAR 0 15
46787: PUSH
46788: LD_INT 0
46790: ST_TO_ADDR
// for j = r to 5 do
46791: LD_ADDR_VAR 0 10
46795: PUSH
46796: DOUBLE
46797: LD_VAR 0 15
46801: DEC
46802: ST_TO_ADDR
46803: LD_INT 5
46805: PUSH
46806: FOR_TO
46807: IFFALSE 46921
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46809: LD_ADDR_VAR 0 11
46813: PUSH
46814: LD_VAR 0 13
46818: PPUSH
46819: CALL_OW 250
46823: PPUSH
46824: LD_VAR 0 10
46828: PPUSH
46829: LD_INT 2
46831: PPUSH
46832: CALL_OW 272
46836: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46837: LD_ADDR_VAR 0 12
46841: PUSH
46842: LD_VAR 0 13
46846: PPUSH
46847: CALL_OW 251
46851: PPUSH
46852: LD_VAR 0 10
46856: PPUSH
46857: LD_INT 2
46859: PPUSH
46860: CALL_OW 273
46864: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46865: LD_VAR 0 11
46869: PPUSH
46870: LD_VAR 0 12
46874: PPUSH
46875: CALL_OW 488
46879: PUSH
46880: LD_VAR 0 11
46884: PPUSH
46885: LD_VAR 0 12
46889: PPUSH
46890: CALL_OW 428
46894: NOT
46895: AND
46896: IFFALSE 46919
// begin ComMoveXY ( tmp , _x , _y ) ;
46898: LD_VAR 0 13
46902: PPUSH
46903: LD_VAR 0 11
46907: PPUSH
46908: LD_VAR 0 12
46912: PPUSH
46913: CALL_OW 111
// break ;
46917: GO 46921
// end ; end ;
46919: GO 46806
46921: POP
46922: POP
// end ; end ;
46923: GO 46248
46925: POP
46926: POP
// end ;
46927: LD_VAR 0 8
46931: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46932: LD_INT 0
46934: PPUSH
// result := true ;
46935: LD_ADDR_VAR 0 3
46939: PUSH
46940: LD_INT 1
46942: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46943: LD_VAR 0 2
46947: PUSH
46948: LD_INT 24
46950: DOUBLE
46951: EQUAL
46952: IFTRUE 46962
46954: LD_INT 33
46956: DOUBLE
46957: EQUAL
46958: IFTRUE 46962
46960: GO 46987
46962: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46963: LD_ADDR_VAR 0 3
46967: PUSH
46968: LD_INT 32
46970: PPUSH
46971: LD_VAR 0 1
46975: PPUSH
46976: CALL_OW 321
46980: PUSH
46981: LD_INT 2
46983: EQUAL
46984: ST_TO_ADDR
46985: GO 47307
46987: LD_INT 20
46989: DOUBLE
46990: EQUAL
46991: IFTRUE 46995
46993: GO 47020
46995: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46996: LD_ADDR_VAR 0 3
47000: PUSH
47001: LD_INT 6
47003: PPUSH
47004: LD_VAR 0 1
47008: PPUSH
47009: CALL_OW 321
47013: PUSH
47014: LD_INT 2
47016: EQUAL
47017: ST_TO_ADDR
47018: GO 47307
47020: LD_INT 22
47022: DOUBLE
47023: EQUAL
47024: IFTRUE 47034
47026: LD_INT 36
47028: DOUBLE
47029: EQUAL
47030: IFTRUE 47034
47032: GO 47059
47034: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
47035: LD_ADDR_VAR 0 3
47039: PUSH
47040: LD_INT 15
47042: PPUSH
47043: LD_VAR 0 1
47047: PPUSH
47048: CALL_OW 321
47052: PUSH
47053: LD_INT 2
47055: EQUAL
47056: ST_TO_ADDR
47057: GO 47307
47059: LD_INT 30
47061: DOUBLE
47062: EQUAL
47063: IFTRUE 47067
47065: GO 47092
47067: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
47068: LD_ADDR_VAR 0 3
47072: PUSH
47073: LD_INT 20
47075: PPUSH
47076: LD_VAR 0 1
47080: PPUSH
47081: CALL_OW 321
47085: PUSH
47086: LD_INT 2
47088: EQUAL
47089: ST_TO_ADDR
47090: GO 47307
47092: LD_INT 28
47094: DOUBLE
47095: EQUAL
47096: IFTRUE 47106
47098: LD_INT 21
47100: DOUBLE
47101: EQUAL
47102: IFTRUE 47106
47104: GO 47131
47106: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47107: LD_ADDR_VAR 0 3
47111: PUSH
47112: LD_INT 21
47114: PPUSH
47115: LD_VAR 0 1
47119: PPUSH
47120: CALL_OW 321
47124: PUSH
47125: LD_INT 2
47127: EQUAL
47128: ST_TO_ADDR
47129: GO 47307
47131: LD_INT 16
47133: DOUBLE
47134: EQUAL
47135: IFTRUE 47139
47137: GO 47166
47139: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47140: LD_ADDR_VAR 0 3
47144: PUSH
47145: LD_EXP 48
47149: PPUSH
47150: LD_VAR 0 1
47154: PPUSH
47155: CALL_OW 321
47159: PUSH
47160: LD_INT 2
47162: EQUAL
47163: ST_TO_ADDR
47164: GO 47307
47166: LD_INT 19
47168: DOUBLE
47169: EQUAL
47170: IFTRUE 47180
47172: LD_INT 23
47174: DOUBLE
47175: EQUAL
47176: IFTRUE 47180
47178: GO 47207
47180: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47181: LD_ADDR_VAR 0 3
47185: PUSH
47186: LD_EXP 47
47190: PPUSH
47191: LD_VAR 0 1
47195: PPUSH
47196: CALL_OW 321
47200: PUSH
47201: LD_INT 2
47203: EQUAL
47204: ST_TO_ADDR
47205: GO 47307
47207: LD_INT 17
47209: DOUBLE
47210: EQUAL
47211: IFTRUE 47215
47213: GO 47240
47215: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47216: LD_ADDR_VAR 0 3
47220: PUSH
47221: LD_INT 39
47223: PPUSH
47224: LD_VAR 0 1
47228: PPUSH
47229: CALL_OW 321
47233: PUSH
47234: LD_INT 2
47236: EQUAL
47237: ST_TO_ADDR
47238: GO 47307
47240: LD_INT 18
47242: DOUBLE
47243: EQUAL
47244: IFTRUE 47248
47246: GO 47273
47248: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47249: LD_ADDR_VAR 0 3
47253: PUSH
47254: LD_INT 40
47256: PPUSH
47257: LD_VAR 0 1
47261: PPUSH
47262: CALL_OW 321
47266: PUSH
47267: LD_INT 2
47269: EQUAL
47270: ST_TO_ADDR
47271: GO 47307
47273: LD_INT 27
47275: DOUBLE
47276: EQUAL
47277: IFTRUE 47281
47279: GO 47306
47281: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47282: LD_ADDR_VAR 0 3
47286: PUSH
47287: LD_INT 35
47289: PPUSH
47290: LD_VAR 0 1
47294: PPUSH
47295: CALL_OW 321
47299: PUSH
47300: LD_INT 2
47302: EQUAL
47303: ST_TO_ADDR
47304: GO 47307
47306: POP
// end ;
47307: LD_VAR 0 3
47311: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47312: LD_INT 0
47314: PPUSH
47315: PPUSH
47316: PPUSH
47317: PPUSH
47318: PPUSH
47319: PPUSH
47320: PPUSH
47321: PPUSH
47322: PPUSH
47323: PPUSH
47324: PPUSH
// result := false ;
47325: LD_ADDR_VAR 0 6
47329: PUSH
47330: LD_INT 0
47332: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47333: LD_VAR 0 1
47337: NOT
47338: PUSH
47339: LD_VAR 0 1
47343: PPUSH
47344: CALL_OW 266
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: LD_INT 1
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: IN
47359: NOT
47360: OR
47361: PUSH
47362: LD_VAR 0 2
47366: NOT
47367: OR
47368: PUSH
47369: LD_VAR 0 5
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: LD_INT 1
47379: PUSH
47380: LD_INT 2
47382: PUSH
47383: LD_INT 3
47385: PUSH
47386: LD_INT 4
47388: PUSH
47389: LD_INT 5
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: IN
47400: NOT
47401: OR
47402: PUSH
47403: LD_VAR 0 3
47407: PPUSH
47408: LD_VAR 0 4
47412: PPUSH
47413: CALL_OW 488
47417: NOT
47418: OR
47419: IFFALSE 47423
// exit ;
47421: GO 48159
// side := GetSide ( depot ) ;
47423: LD_ADDR_VAR 0 9
47427: PUSH
47428: LD_VAR 0 1
47432: PPUSH
47433: CALL_OW 255
47437: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47438: LD_VAR 0 9
47442: PPUSH
47443: LD_VAR 0 2
47447: PPUSH
47448: CALL 46932 0 2
47452: NOT
47453: IFFALSE 47457
// exit ;
47455: GO 48159
// pom := GetBase ( depot ) ;
47457: LD_ADDR_VAR 0 10
47461: PUSH
47462: LD_VAR 0 1
47466: PPUSH
47467: CALL_OW 274
47471: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47472: LD_ADDR_VAR 0 11
47476: PUSH
47477: LD_VAR 0 2
47481: PPUSH
47482: LD_VAR 0 1
47486: PPUSH
47487: CALL_OW 248
47491: PPUSH
47492: CALL_OW 450
47496: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47497: LD_VAR 0 10
47501: PPUSH
47502: LD_INT 1
47504: PPUSH
47505: CALL_OW 275
47509: PUSH
47510: LD_VAR 0 11
47514: PUSH
47515: LD_INT 1
47517: ARRAY
47518: GREATEREQUAL
47519: PUSH
47520: LD_VAR 0 10
47524: PPUSH
47525: LD_INT 2
47527: PPUSH
47528: CALL_OW 275
47532: PUSH
47533: LD_VAR 0 11
47537: PUSH
47538: LD_INT 2
47540: ARRAY
47541: GREATEREQUAL
47542: AND
47543: PUSH
47544: LD_VAR 0 10
47548: PPUSH
47549: LD_INT 3
47551: PPUSH
47552: CALL_OW 275
47556: PUSH
47557: LD_VAR 0 11
47561: PUSH
47562: LD_INT 3
47564: ARRAY
47565: GREATEREQUAL
47566: AND
47567: NOT
47568: IFFALSE 47572
// exit ;
47570: GO 48159
// if GetBType ( depot ) = b_depot then
47572: LD_VAR 0 1
47576: PPUSH
47577: CALL_OW 266
47581: PUSH
47582: LD_INT 0
47584: EQUAL
47585: IFFALSE 47597
// dist := 28 else
47587: LD_ADDR_VAR 0 14
47591: PUSH
47592: LD_INT 28
47594: ST_TO_ADDR
47595: GO 47605
// dist := 36 ;
47597: LD_ADDR_VAR 0 14
47601: PUSH
47602: LD_INT 36
47604: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47605: LD_VAR 0 1
47609: PPUSH
47610: LD_VAR 0 3
47614: PPUSH
47615: LD_VAR 0 4
47619: PPUSH
47620: CALL_OW 297
47624: PUSH
47625: LD_VAR 0 14
47629: GREATER
47630: IFFALSE 47634
// exit ;
47632: GO 48159
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47634: LD_ADDR_VAR 0 12
47638: PUSH
47639: LD_VAR 0 2
47643: PPUSH
47644: LD_VAR 0 3
47648: PPUSH
47649: LD_VAR 0 4
47653: PPUSH
47654: LD_VAR 0 5
47658: PPUSH
47659: LD_VAR 0 1
47663: PPUSH
47664: CALL_OW 248
47668: PPUSH
47669: LD_INT 0
47671: PPUSH
47672: CALL 48164 0 6
47676: ST_TO_ADDR
// if not hexes then
47677: LD_VAR 0 12
47681: NOT
47682: IFFALSE 47686
// exit ;
47684: GO 48159
// hex := GetHexInfo ( x , y ) ;
47686: LD_ADDR_VAR 0 15
47690: PUSH
47691: LD_VAR 0 3
47695: PPUSH
47696: LD_VAR 0 4
47700: PPUSH
47701: CALL_OW 546
47705: ST_TO_ADDR
// if hex [ 1 ] then
47706: LD_VAR 0 15
47710: PUSH
47711: LD_INT 1
47713: ARRAY
47714: IFFALSE 47718
// exit ;
47716: GO 48159
// height := hex [ 2 ] ;
47718: LD_ADDR_VAR 0 13
47722: PUSH
47723: LD_VAR 0 15
47727: PUSH
47728: LD_INT 2
47730: ARRAY
47731: ST_TO_ADDR
// for i = 1 to hexes do
47732: LD_ADDR_VAR 0 7
47736: PUSH
47737: DOUBLE
47738: LD_INT 1
47740: DEC
47741: ST_TO_ADDR
47742: LD_VAR 0 12
47746: PUSH
47747: FOR_TO
47748: IFFALSE 48078
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47750: LD_VAR 0 12
47754: PUSH
47755: LD_VAR 0 7
47759: ARRAY
47760: PUSH
47761: LD_INT 1
47763: ARRAY
47764: PPUSH
47765: LD_VAR 0 12
47769: PUSH
47770: LD_VAR 0 7
47774: ARRAY
47775: PUSH
47776: LD_INT 2
47778: ARRAY
47779: PPUSH
47780: CALL_OW 488
47784: NOT
47785: PUSH
47786: LD_VAR 0 12
47790: PUSH
47791: LD_VAR 0 7
47795: ARRAY
47796: PUSH
47797: LD_INT 1
47799: ARRAY
47800: PPUSH
47801: LD_VAR 0 12
47805: PUSH
47806: LD_VAR 0 7
47810: ARRAY
47811: PUSH
47812: LD_INT 2
47814: ARRAY
47815: PPUSH
47816: CALL_OW 428
47820: PUSH
47821: LD_INT 0
47823: GREATER
47824: OR
47825: PUSH
47826: LD_VAR 0 12
47830: PUSH
47831: LD_VAR 0 7
47835: ARRAY
47836: PUSH
47837: LD_INT 1
47839: ARRAY
47840: PPUSH
47841: LD_VAR 0 12
47845: PUSH
47846: LD_VAR 0 7
47850: ARRAY
47851: PUSH
47852: LD_INT 2
47854: ARRAY
47855: PPUSH
47856: CALL_OW 351
47860: OR
47861: IFFALSE 47867
// exit ;
47863: POP
47864: POP
47865: GO 48159
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47867: LD_ADDR_VAR 0 8
47871: PUSH
47872: LD_VAR 0 12
47876: PUSH
47877: LD_VAR 0 7
47881: ARRAY
47882: PUSH
47883: LD_INT 1
47885: ARRAY
47886: PPUSH
47887: LD_VAR 0 12
47891: PUSH
47892: LD_VAR 0 7
47896: ARRAY
47897: PUSH
47898: LD_INT 2
47900: ARRAY
47901: PPUSH
47902: CALL_OW 546
47906: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47907: LD_VAR 0 8
47911: PUSH
47912: LD_INT 1
47914: ARRAY
47915: PUSH
47916: LD_VAR 0 8
47920: PUSH
47921: LD_INT 2
47923: ARRAY
47924: PUSH
47925: LD_VAR 0 13
47929: PUSH
47930: LD_INT 2
47932: PLUS
47933: GREATER
47934: OR
47935: PUSH
47936: LD_VAR 0 8
47940: PUSH
47941: LD_INT 2
47943: ARRAY
47944: PUSH
47945: LD_VAR 0 13
47949: PUSH
47950: LD_INT 2
47952: MINUS
47953: LESS
47954: OR
47955: PUSH
47956: LD_VAR 0 8
47960: PUSH
47961: LD_INT 3
47963: ARRAY
47964: PUSH
47965: LD_INT 0
47967: PUSH
47968: LD_INT 8
47970: PUSH
47971: LD_INT 9
47973: PUSH
47974: LD_INT 10
47976: PUSH
47977: LD_INT 11
47979: PUSH
47980: LD_INT 12
47982: PUSH
47983: LD_INT 13
47985: PUSH
47986: LD_INT 16
47988: PUSH
47989: LD_INT 17
47991: PUSH
47992: LD_INT 18
47994: PUSH
47995: LD_INT 19
47997: PUSH
47998: LD_INT 20
48000: PUSH
48001: LD_INT 21
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: IN
48019: NOT
48020: OR
48021: PUSH
48022: LD_VAR 0 8
48026: PUSH
48027: LD_INT 5
48029: ARRAY
48030: NOT
48031: OR
48032: PUSH
48033: LD_VAR 0 8
48037: PUSH
48038: LD_INT 6
48040: ARRAY
48041: PUSH
48042: LD_INT 1
48044: PUSH
48045: LD_INT 2
48047: PUSH
48048: LD_INT 7
48050: PUSH
48051: LD_INT 9
48053: PUSH
48054: LD_INT 10
48056: PUSH
48057: LD_INT 11
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: IN
48068: NOT
48069: OR
48070: IFFALSE 48076
// exit ;
48072: POP
48073: POP
48074: GO 48159
// end ;
48076: GO 47747
48078: POP
48079: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48080: LD_VAR 0 9
48084: PPUSH
48085: LD_VAR 0 3
48089: PPUSH
48090: LD_VAR 0 4
48094: PPUSH
48095: LD_INT 20
48097: PPUSH
48098: CALL 40105 0 4
48102: PUSH
48103: LD_INT 4
48105: ARRAY
48106: IFFALSE 48110
// exit ;
48108: GO 48159
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48110: LD_VAR 0 2
48114: PUSH
48115: LD_INT 29
48117: PUSH
48118: LD_INT 30
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: IN
48125: PUSH
48126: LD_VAR 0 3
48130: PPUSH
48131: LD_VAR 0 4
48135: PPUSH
48136: LD_VAR 0 9
48140: PPUSH
48141: CALL_OW 440
48145: NOT
48146: AND
48147: IFFALSE 48151
// exit ;
48149: GO 48159
// result := true ;
48151: LD_ADDR_VAR 0 6
48155: PUSH
48156: LD_INT 1
48158: ST_TO_ADDR
// end ;
48159: LD_VAR 0 6
48163: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48164: LD_INT 0
48166: PPUSH
48167: PPUSH
48168: PPUSH
48169: PPUSH
48170: PPUSH
48171: PPUSH
48172: PPUSH
48173: PPUSH
48174: PPUSH
48175: PPUSH
48176: PPUSH
48177: PPUSH
48178: PPUSH
48179: PPUSH
48180: PPUSH
48181: PPUSH
48182: PPUSH
48183: PPUSH
48184: PPUSH
48185: PPUSH
48186: PPUSH
48187: PPUSH
48188: PPUSH
48189: PPUSH
48190: PPUSH
48191: PPUSH
48192: PPUSH
48193: PPUSH
48194: PPUSH
48195: PPUSH
48196: PPUSH
48197: PPUSH
48198: PPUSH
48199: PPUSH
48200: PPUSH
48201: PPUSH
48202: PPUSH
48203: PPUSH
48204: PPUSH
48205: PPUSH
48206: PPUSH
48207: PPUSH
48208: PPUSH
48209: PPUSH
48210: PPUSH
48211: PPUSH
48212: PPUSH
48213: PPUSH
48214: PPUSH
48215: PPUSH
48216: PPUSH
48217: PPUSH
48218: PPUSH
48219: PPUSH
48220: PPUSH
48221: PPUSH
48222: PPUSH
48223: PPUSH
// result = [ ] ;
48224: LD_ADDR_VAR 0 7
48228: PUSH
48229: EMPTY
48230: ST_TO_ADDR
// temp_list = [ ] ;
48231: LD_ADDR_VAR 0 9
48235: PUSH
48236: EMPTY
48237: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48238: LD_VAR 0 4
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: LD_INT 1
48248: PUSH
48249: LD_INT 2
48251: PUSH
48252: LD_INT 3
48254: PUSH
48255: LD_INT 4
48257: PUSH
48258: LD_INT 5
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: IN
48269: NOT
48270: PUSH
48271: LD_VAR 0 1
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: LD_INT 1
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: IN
48286: PUSH
48287: LD_VAR 0 5
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: LD_INT 2
48297: PUSH
48298: LD_INT 3
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: LIST
48305: IN
48306: NOT
48307: AND
48308: OR
48309: IFFALSE 48313
// exit ;
48311: GO 66704
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48313: LD_VAR 0 1
48317: PUSH
48318: LD_INT 6
48320: PUSH
48321: LD_INT 7
48323: PUSH
48324: LD_INT 8
48326: PUSH
48327: LD_INT 13
48329: PUSH
48330: LD_INT 12
48332: PUSH
48333: LD_INT 15
48335: PUSH
48336: LD_INT 11
48338: PUSH
48339: LD_INT 14
48341: PUSH
48342: LD_INT 10
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: IN
48356: IFFALSE 48366
// btype = b_lab ;
48358: LD_ADDR_VAR 0 1
48362: PUSH
48363: LD_INT 6
48365: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48366: LD_VAR 0 6
48370: PUSH
48371: LD_INT 0
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: LD_INT 2
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: LIST
48384: IN
48385: NOT
48386: PUSH
48387: LD_VAR 0 1
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: LD_INT 1
48397: PUSH
48398: LD_INT 2
48400: PUSH
48401: LD_INT 3
48403: PUSH
48404: LD_INT 6
48406: PUSH
48407: LD_INT 36
48409: PUSH
48410: LD_INT 4
48412: PUSH
48413: LD_INT 5
48415: PUSH
48416: LD_INT 31
48418: PUSH
48419: LD_INT 32
48421: PUSH
48422: LD_INT 33
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: IN
48438: NOT
48439: PUSH
48440: LD_VAR 0 6
48444: PUSH
48445: LD_INT 1
48447: EQUAL
48448: AND
48449: OR
48450: PUSH
48451: LD_VAR 0 1
48455: PUSH
48456: LD_INT 2
48458: PUSH
48459: LD_INT 3
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: IN
48466: NOT
48467: PUSH
48468: LD_VAR 0 6
48472: PUSH
48473: LD_INT 2
48475: EQUAL
48476: AND
48477: OR
48478: IFFALSE 48488
// mode = 0 ;
48480: LD_ADDR_VAR 0 6
48484: PUSH
48485: LD_INT 0
48487: ST_TO_ADDR
// case mode of 0 :
48488: LD_VAR 0 6
48492: PUSH
48493: LD_INT 0
48495: DOUBLE
48496: EQUAL
48497: IFTRUE 48501
48499: GO 59954
48501: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48502: LD_ADDR_VAR 0 11
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: LD_INT 1
48522: NEG
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 1
48571: NEG
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: LD_INT 2
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: LD_INT 2
48598: NEG
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: LD_INT 1
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: LD_INT 2
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: LD_INT 2
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 1
48637: NEG
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: PUSH
48649: LD_INT 3
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 0
48658: PUSH
48659: LD_INT 3
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 1
48668: NEG
48669: PUSH
48670: LD_INT 2
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48695: LD_ADDR_VAR 0 12
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: LD_INT 1
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: LD_INT 1
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 1
48764: NEG
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 1
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 2
48787: PUSH
48788: LD_INT 0
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 2
48797: PUSH
48798: LD_INT 1
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 1
48807: NEG
48808: PUSH
48809: LD_INT 1
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 2
48818: NEG
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 2
48829: NEG
48830: PUSH
48831: LD_INT 1
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 2
48841: NEG
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 3
48852: NEG
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 3
48863: NEG
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48891: LD_ADDR_VAR 0 13
48895: PUSH
48896: LD_INT 0
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 0
48908: PUSH
48909: LD_INT 1
48911: NEG
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 1
48929: PUSH
48930: LD_INT 1
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 0
48939: PUSH
48940: LD_INT 1
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 1
48949: NEG
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 1
48960: NEG
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 1
48972: NEG
48973: PUSH
48974: LD_INT 2
48976: NEG
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 2
48984: PUSH
48985: LD_INT 1
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 2
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: LD_INT 2
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 2
49014: NEG
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 2
49026: NEG
49027: PUSH
49028: LD_INT 2
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 2
49038: NEG
49039: PUSH
49040: LD_INT 3
49042: NEG
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 3
49050: NEG
49051: PUSH
49052: LD_INT 2
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 3
49062: NEG
49063: PUSH
49064: LD_INT 3
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49090: LD_ADDR_VAR 0 14
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 1
49128: PUSH
49129: LD_INT 1
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 1
49159: NEG
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 1
49171: NEG
49172: PUSH
49173: LD_INT 2
49175: NEG
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: LD_INT 2
49186: NEG
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 1
49205: PUSH
49206: LD_INT 2
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 0
49215: PUSH
49216: LD_INT 2
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 1
49225: NEG
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: LD_INT 3
49240: NEG
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 0
49248: PUSH
49249: LD_INT 3
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: LD_INT 2
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49286: LD_ADDR_VAR 0 15
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 0
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 1
49314: PUSH
49315: LD_INT 0
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: LD_INT 1
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 1
49367: PUSH
49368: LD_INT 1
49370: NEG
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 2
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 2
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 2
49409: NEG
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 2
49420: NEG
49421: PUSH
49422: LD_INT 1
49424: NEG
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 2
49432: PUSH
49433: LD_INT 1
49435: NEG
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 3
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 3
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49479: LD_ADDR_VAR 0 16
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 0
49496: PUSH
49497: LD_INT 1
49499: NEG
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 1
49507: PUSH
49508: LD_INT 0
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: LD_INT 1
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: LD_INT 1
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 1
49537: NEG
49538: PUSH
49539: LD_INT 0
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 1
49548: NEG
49549: PUSH
49550: LD_INT 1
49552: NEG
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 1
49560: NEG
49561: PUSH
49562: LD_INT 2
49564: NEG
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 2
49572: PUSH
49573: LD_INT 1
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 2
49582: PUSH
49583: LD_INT 2
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 1
49592: PUSH
49593: LD_INT 2
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 2
49602: NEG
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 2
49614: NEG
49615: PUSH
49616: LD_INT 2
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 3
49626: PUSH
49627: LD_INT 2
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 3
49636: PUSH
49637: LD_INT 3
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 2
49646: PUSH
49647: LD_INT 3
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49672: LD_ADDR_VAR 0 17
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: LD_INT 1
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 1
49730: NEG
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: LD_INT 2
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 0
49765: PUSH
49766: LD_INT 2
49768: NEG
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 1
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 2
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 2
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 2
49807: PUSH
49808: LD_INT 2
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: PUSH
49818: LD_INT 2
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: LD_INT 2
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 1
49837: NEG
49838: PUSH
49839: LD_INT 1
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 2
49848: NEG
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 2
49859: NEG
49860: PUSH
49861: LD_INT 1
49863: NEG
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 2
49871: NEG
49872: PUSH
49873: LD_INT 2
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49902: LD_ADDR_VAR 0 18
49906: PUSH
49907: LD_INT 0
49909: PUSH
49910: LD_INT 0
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 0
49919: PUSH
49920: LD_INT 1
49922: NEG
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 1
49930: PUSH
49931: LD_INT 0
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: LD_INT 1
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 1
49960: NEG
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: NEG
49972: PUSH
49973: LD_INT 1
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: LD_INT 2
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: LD_INT 2
49998: NEG
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 1
50006: PUSH
50007: LD_INT 1
50009: NEG
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 2
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 2
50027: PUSH
50028: LD_INT 1
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 2
50037: PUSH
50038: LD_INT 2
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 1
50047: PUSH
50048: LD_INT 2
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: LD_INT 2
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: NEG
50068: PUSH
50069: LD_INT 1
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 2
50078: NEG
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 2
50089: NEG
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 2
50101: NEG
50102: PUSH
50103: LD_INT 2
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50132: LD_ADDR_VAR 0 19
50136: PUSH
50137: LD_INT 0
50139: PUSH
50140: LD_INT 0
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 0
50149: PUSH
50150: LD_INT 1
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 1
50160: PUSH
50161: LD_INT 0
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 1
50170: PUSH
50171: LD_INT 1
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 0
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: NEG
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: LD_INT 2
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: LD_INT 2
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 2
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 2
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 2
50267: PUSH
50268: LD_INT 2
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 1
50277: PUSH
50278: LD_INT 2
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 0
50287: PUSH
50288: LD_INT 2
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: NEG
50298: PUSH
50299: LD_INT 1
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 2
50308: NEG
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 2
50319: NEG
50320: PUSH
50321: LD_INT 1
50323: NEG
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 2
50331: NEG
50332: PUSH
50333: LD_INT 2
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50362: LD_ADDR_VAR 0 20
50366: PUSH
50367: LD_INT 0
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 1
50400: PUSH
50401: LD_INT 1
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: LD_INT 1
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 1
50420: NEG
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: LD_INT 1
50435: NEG
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: LD_INT 2
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: LD_INT 2
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 1
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 2
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 2
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 2
50497: PUSH
50498: LD_INT 2
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: LD_INT 2
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 0
50517: PUSH
50518: LD_INT 2
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: NEG
50528: PUSH
50529: LD_INT 1
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 2
50538: NEG
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 2
50549: NEG
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 2
50561: NEG
50562: PUSH
50563: LD_INT 2
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50592: LD_ADDR_VAR 0 21
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: LD_INT 1
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: LD_INT 1
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 1
50673: NEG
50674: PUSH
50675: LD_INT 2
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: LD_INT 2
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 2
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 2
50717: PUSH
50718: LD_INT 1
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 2
50727: PUSH
50728: LD_INT 2
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: LD_INT 2
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: LD_INT 2
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: NEG
50758: PUSH
50759: LD_INT 1
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 2
50768: NEG
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 2
50779: NEG
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 2
50791: NEG
50792: PUSH
50793: LD_INT 2
50795: NEG
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50822: LD_ADDR_VAR 0 22
50826: PUSH
50827: LD_INT 0
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 0
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 1
50860: PUSH
50861: LD_INT 1
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: LD_INT 1
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: NEG
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 1
50891: NEG
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 1
50903: NEG
50904: PUSH
50905: LD_INT 2
50907: NEG
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: LD_INT 2
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 1
50926: PUSH
50927: LD_INT 1
50929: NEG
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 2
50937: PUSH
50938: LD_INT 0
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 2
50947: PUSH
50948: LD_INT 1
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 2
50957: PUSH
50958: LD_INT 2
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 1
50967: PUSH
50968: LD_INT 2
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: LD_INT 2
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 2
50998: NEG
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 2
51009: NEG
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 2
51021: NEG
51022: PUSH
51023: LD_INT 2
51025: NEG
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51052: LD_ADDR_VAR 0 23
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: LD_INT 1
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: LD_INT 1
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 1
51110: NEG
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: NEG
51122: PUSH
51123: LD_INT 1
51125: NEG
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 1
51133: NEG
51134: PUSH
51135: LD_INT 2
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: LD_INT 2
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: LD_INT 1
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 2
51167: PUSH
51168: LD_INT 0
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 2
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 2
51187: PUSH
51188: LD_INT 2
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: LD_INT 2
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: LD_INT 2
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 2
51228: NEG
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 2
51239: NEG
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 2
51251: NEG
51252: PUSH
51253: LD_INT 2
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 2
51263: NEG
51264: PUSH
51265: LD_INT 3
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: NEG
51276: PUSH
51277: LD_INT 3
51279: NEG
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: LD_INT 2
51290: NEG
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 2
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51332: LD_ADDR_VAR 0 24
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: LD_INT 0
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: LD_INT 1
51352: NEG
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 1
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 1
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 0
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: LD_INT 1
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 1
51413: NEG
51414: PUSH
51415: LD_INT 2
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 0
51425: PUSH
51426: LD_INT 2
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 2
51447: PUSH
51448: LD_INT 0
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 2
51457: PUSH
51458: LD_INT 1
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 2
51467: PUSH
51468: LD_INT 2
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: LD_INT 2
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: LD_INT 2
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 1
51497: NEG
51498: PUSH
51499: LD_INT 1
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 2
51508: NEG
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 2
51519: NEG
51520: PUSH
51521: LD_INT 1
51523: NEG
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 2
51531: NEG
51532: PUSH
51533: LD_INT 2
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 1
51543: PUSH
51544: LD_INT 2
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 2
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 3
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 3
51575: PUSH
51576: LD_INT 2
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51608: LD_ADDR_VAR 0 25
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: LD_INT 0
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 1
51646: PUSH
51647: LD_INT 1
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 1
51666: NEG
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: LD_INT 1
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 1
51689: NEG
51690: PUSH
51691: LD_INT 2
51693: NEG
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: LD_INT 2
51704: NEG
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 1
51712: PUSH
51713: LD_INT 1
51715: NEG
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 2
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 2
51733: PUSH
51734: LD_INT 1
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 2
51743: PUSH
51744: LD_INT 2
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: LD_INT 2
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: LD_INT 2
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: LD_INT 1
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 2
51784: NEG
51785: PUSH
51786: LD_INT 0
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 2
51795: NEG
51796: PUSH
51797: LD_INT 1
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 2
51807: NEG
51808: PUSH
51809: LD_INT 2
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 3
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 3
51829: PUSH
51830: LD_INT 2
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 2
51839: PUSH
51840: LD_INT 3
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: LD_INT 3
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51882: LD_ADDR_VAR 0 26
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: LD_INT 0
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 0
51899: PUSH
51900: LD_INT 1
51902: NEG
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 1
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 1
51920: PUSH
51921: LD_INT 1
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 0
51930: PUSH
51931: LD_INT 1
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 1
51940: NEG
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 1
51951: NEG
51952: PUSH
51953: LD_INT 1
51955: NEG
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 1
51963: NEG
51964: PUSH
51965: LD_INT 2
51967: NEG
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: LD_INT 2
51978: NEG
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 1
51986: PUSH
51987: LD_INT 1
51989: NEG
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 2
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 2
52007: PUSH
52008: LD_INT 1
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 2
52017: PUSH
52018: LD_INT 2
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: PUSH
52028: LD_INT 2
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: LD_INT 2
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 1
52047: NEG
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 2
52058: NEG
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 2
52069: NEG
52070: PUSH
52071: LD_INT 1
52073: NEG
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 2
52081: NEG
52082: PUSH
52083: LD_INT 2
52085: NEG
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 2
52093: PUSH
52094: LD_INT 3
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 1
52103: PUSH
52104: LD_INT 3
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 1
52113: NEG
52114: PUSH
52115: LD_INT 2
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 2
52124: NEG
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52158: LD_ADDR_VAR 0 27
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: LD_INT 0
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: LD_INT 1
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 1
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 1
52196: PUSH
52197: LD_INT 1
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: LD_INT 1
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 1
52239: NEG
52240: PUSH
52241: LD_INT 2
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: LD_INT 2
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 1
52262: PUSH
52263: LD_INT 1
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 2
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 2
52283: PUSH
52284: LD_INT 1
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 2
52293: PUSH
52294: LD_INT 2
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 1
52303: PUSH
52304: LD_INT 2
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 0
52313: PUSH
52314: LD_INT 2
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 2
52334: NEG
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 2
52345: NEG
52346: PUSH
52347: LD_INT 1
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 2
52357: NEG
52358: PUSH
52359: LD_INT 2
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 1
52369: NEG
52370: PUSH
52371: LD_INT 2
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 2
52380: NEG
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 3
52391: NEG
52392: PUSH
52393: LD_INT 1
52395: NEG
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 3
52403: NEG
52404: PUSH
52405: LD_INT 2
52407: NEG
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52438: LD_ADDR_VAR 0 28
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: LD_INT 0
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 1
52466: PUSH
52467: LD_INT 0
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 1
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: NEG
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 1
52519: NEG
52520: PUSH
52521: LD_INT 2
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: LD_INT 2
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: LD_INT 1
52545: NEG
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 2
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 2
52563: PUSH
52564: LD_INT 1
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 2
52573: PUSH
52574: LD_INT 2
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 1
52583: PUSH
52584: LD_INT 2
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 0
52593: PUSH
52594: LD_INT 2
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 1
52603: NEG
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 2
52614: NEG
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 2
52625: NEG
52626: PUSH
52627: LD_INT 1
52629: NEG
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 2
52637: NEG
52638: PUSH
52639: LD_INT 2
52641: NEG
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 2
52649: NEG
52650: PUSH
52651: LD_INT 3
52653: NEG
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 1
52661: NEG
52662: PUSH
52663: LD_INT 3
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 3
52673: NEG
52674: PUSH
52675: LD_INT 1
52677: NEG
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 3
52685: NEG
52686: PUSH
52687: LD_INT 2
52689: NEG
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52720: LD_ADDR_VAR 0 29
52724: PUSH
52725: LD_INT 0
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: LD_INT 1
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: LD_INT 0
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 1
52758: PUSH
52759: LD_INT 1
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: LD_INT 1
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 1
52778: NEG
52779: PUSH
52780: LD_INT 0
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 1
52789: NEG
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: LD_INT 2
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 0
52813: PUSH
52814: LD_INT 2
52816: NEG
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 1
52824: PUSH
52825: LD_INT 1
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 2
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 2
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 1
52855: PUSH
52856: LD_INT 2
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 0
52865: PUSH
52866: LD_INT 2
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 1
52875: NEG
52876: PUSH
52877: LD_INT 1
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 2
52886: NEG
52887: PUSH
52888: LD_INT 1
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 2
52898: NEG
52899: PUSH
52900: LD_INT 2
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 2
52910: NEG
52911: PUSH
52912: LD_INT 3
52914: NEG
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 2
52922: PUSH
52923: LD_INT 1
52925: NEG
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 3
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: LD_INT 3
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 1
52953: NEG
52954: PUSH
52955: LD_INT 2
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 3
52964: NEG
52965: PUSH
52966: LD_INT 2
52968: NEG
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52999: LD_ADDR_VAR 0 30
53003: PUSH
53004: LD_INT 0
53006: PUSH
53007: LD_INT 0
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: LD_INT 1
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: LD_INT 1
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: NEG
53069: PUSH
53070: LD_INT 1
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 1
53080: NEG
53081: PUSH
53082: LD_INT 2
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: LD_INT 2
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: LD_INT 1
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 2
53114: PUSH
53115: LD_INT 0
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 2
53124: PUSH
53125: LD_INT 1
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 2
53134: PUSH
53135: LD_INT 2
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: LD_INT 2
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 1
53154: NEG
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 2
53165: NEG
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 2
53176: NEG
53177: PUSH
53178: LD_INT 1
53180: NEG
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 1
53188: NEG
53189: PUSH
53190: LD_INT 3
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: LD_INT 2
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 3
53211: PUSH
53212: LD_INT 2
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 2
53221: PUSH
53222: LD_INT 3
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 2
53231: NEG
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 3
53242: NEG
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53277: LD_ADDR_VAR 0 31
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: LD_INT 1
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 1
53346: NEG
53347: PUSH
53348: LD_INT 1
53350: NEG
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 1
53358: NEG
53359: PUSH
53360: LD_INT 2
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 1
53370: PUSH
53371: LD_INT 1
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 2
53381: PUSH
53382: LD_INT 0
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 2
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 2
53401: PUSH
53402: LD_INT 2
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: LD_INT 2
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: LD_INT 2
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: LD_INT 1
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 2
53442: NEG
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 2
53454: NEG
53455: PUSH
53456: LD_INT 2
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 2
53466: NEG
53467: PUSH
53468: LD_INT 3
53470: NEG
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 2
53478: PUSH
53479: LD_INT 1
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 3
53489: PUSH
53490: LD_INT 1
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 1
53499: PUSH
53500: LD_INT 3
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 1
53509: NEG
53510: PUSH
53511: LD_INT 2
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 3
53520: NEG
53521: PUSH
53522: LD_INT 2
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53555: LD_ADDR_VAR 0 32
53559: PUSH
53560: LD_INT 0
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: LD_INT 1
53575: NEG
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 1
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: PUSH
53594: LD_INT 1
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 1
53624: NEG
53625: PUSH
53626: LD_INT 1
53628: NEG
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 1
53636: NEG
53637: PUSH
53638: LD_INT 2
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: LD_INT 2
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 1
53659: PUSH
53660: LD_INT 1
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 2
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 2
53680: PUSH
53681: LD_INT 2
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: LD_INT 2
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: LD_INT 2
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 1
53710: NEG
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 2
53721: NEG
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 2
53732: NEG
53733: PUSH
53734: LD_INT 1
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: LD_INT 3
53748: NEG
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 1
53756: PUSH
53757: LD_INT 2
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 3
53767: PUSH
53768: LD_INT 2
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 2
53777: PUSH
53778: LD_INT 3
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 2
53787: NEG
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 3
53798: NEG
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53833: LD_ADDR_VAR 0 33
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: LD_INT 1
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: LD_INT 2
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: LD_INT 1
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 2
53937: PUSH
53938: LD_INT 0
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 2
53947: PUSH
53948: LD_INT 1
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: LD_INT 2
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: LD_INT 2
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: LD_INT 1
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 2
53988: NEG
53989: PUSH
53990: LD_INT 0
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 2
53999: NEG
54000: PUSH
54001: LD_INT 1
54003: NEG
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 2
54011: NEG
54012: PUSH
54013: LD_INT 2
54015: NEG
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 2
54023: NEG
54024: PUSH
54025: LD_INT 3
54027: NEG
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 2
54035: PUSH
54036: LD_INT 1
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 3
54046: PUSH
54047: LD_INT 1
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: LD_INT 3
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: LD_INT 2
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 3
54077: NEG
54078: PUSH
54079: LD_INT 2
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54112: LD_ADDR_VAR 0 34
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: LD_INT 0
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: NEG
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: LD_INT 2
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: LD_INT 2
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: PUSH
54217: LD_INT 1
54219: NEG
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 2
54227: PUSH
54228: LD_INT 1
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 2
54237: PUSH
54238: LD_INT 2
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: LD_INT 2
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: NEG
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 2
54268: NEG
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 2
54279: NEG
54280: PUSH
54281: LD_INT 1
54283: NEG
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 2
54291: NEG
54292: PUSH
54293: LD_INT 2
54295: NEG
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: LD_INT 3
54307: NEG
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 1
54315: PUSH
54316: LD_INT 2
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 3
54326: PUSH
54327: LD_INT 2
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 2
54336: PUSH
54337: LD_INT 3
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 2
54346: NEG
54347: PUSH
54348: LD_INT 1
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 3
54357: NEG
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54392: LD_ADDR_VAR 0 35
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: LD_INT 1
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 1
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 1
54430: PUSH
54431: LD_INT 1
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: LD_INT 1
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 1
54450: NEG
54451: PUSH
54452: LD_INT 0
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 1
54461: NEG
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 2
54473: PUSH
54474: LD_INT 1
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 2
54483: NEG
54484: PUSH
54485: LD_INT 1
54487: NEG
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54504: LD_ADDR_VAR 0 36
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: LD_INT 0
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: LD_INT 1
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 1
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 1
54542: PUSH
54543: LD_INT 1
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 0
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 1
54573: NEG
54574: PUSH
54575: LD_INT 1
54577: NEG
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 1
54585: NEG
54586: PUSH
54587: LD_INT 2
54589: NEG
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 1
54597: PUSH
54598: LD_INT 2
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54616: LD_ADDR_VAR 0 37
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 0
54633: PUSH
54634: LD_INT 1
54636: NEG
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: LD_INT 0
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: LD_INT 1
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: LD_INT 1
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 1
54674: NEG
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 1
54685: NEG
54686: PUSH
54687: LD_INT 1
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 1
54697: PUSH
54698: LD_INT 1
54700: NEG
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 1
54708: NEG
54709: PUSH
54710: LD_INT 1
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54728: LD_ADDR_VAR 0 38
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: LD_INT 1
54748: NEG
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 1
54766: PUSH
54767: LD_INT 1
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: LD_INT 1
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: NEG
54787: PUSH
54788: LD_INT 0
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 1
54797: NEG
54798: PUSH
54799: LD_INT 1
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 2
54809: PUSH
54810: LD_INT 1
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 2
54819: NEG
54820: PUSH
54821: LD_INT 1
54823: NEG
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54840: LD_ADDR_VAR 0 39
54844: PUSH
54845: LD_INT 0
54847: PUSH
54848: LD_INT 0
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 0
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: LD_INT 0
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 1
54878: PUSH
54879: LD_INT 1
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: LD_INT 1
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 1
54898: NEG
54899: PUSH
54900: LD_INT 0
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 1
54909: NEG
54910: PUSH
54911: LD_INT 1
54913: NEG
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 1
54921: NEG
54922: PUSH
54923: LD_INT 2
54925: NEG
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 1
54933: PUSH
54934: LD_INT 2
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54952: LD_ADDR_VAR 0 40
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: LD_INT 1
54972: NEG
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 1
54990: PUSH
54991: LD_INT 1
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: LD_INT 1
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 1
55044: NEG
55045: PUSH
55046: LD_INT 1
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55064: LD_ADDR_VAR 0 41
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 1
55102: PUSH
55103: LD_INT 1
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: LD_INT 1
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 1
55122: NEG
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: LD_INT 1
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 1
55145: NEG
55146: PUSH
55147: LD_INT 2
55149: NEG
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 1
55157: PUSH
55158: LD_INT 1
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 2
55168: PUSH
55169: LD_INT 0
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 2
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 2
55188: PUSH
55189: LD_INT 2
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 1
55198: PUSH
55199: LD_INT 2
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 1
55208: NEG
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 2
55219: NEG
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 2
55230: NEG
55231: PUSH
55232: LD_INT 1
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 2
55242: NEG
55243: PUSH
55244: LD_INT 2
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 2
55254: NEG
55255: PUSH
55256: LD_INT 3
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 2
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 3
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 3
55287: PUSH
55288: LD_INT 1
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 3
55297: PUSH
55298: LD_INT 2
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 3
55307: PUSH
55308: LD_INT 3
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 2
55317: PUSH
55318: LD_INT 3
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 2
55327: NEG
55328: PUSH
55329: LD_INT 1
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 3
55338: NEG
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 3
55349: NEG
55350: PUSH
55351: LD_INT 1
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 3
55361: NEG
55362: PUSH
55363: LD_INT 2
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 3
55373: NEG
55374: PUSH
55375: LD_INT 3
55377: NEG
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55414: LD_ADDR_VAR 0 42
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 0
55431: PUSH
55432: LD_INT 1
55434: NEG
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 1
55452: PUSH
55453: LD_INT 1
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 1
55472: NEG
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 1
55483: NEG
55484: PUSH
55485: LD_INT 1
55487: NEG
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 1
55495: NEG
55496: PUSH
55497: LD_INT 2
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: LD_INT 2
55510: NEG
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 1
55518: PUSH
55519: LD_INT 1
55521: NEG
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 2
55529: PUSH
55530: LD_INT 1
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 2
55539: PUSH
55540: LD_INT 2
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 1
55549: PUSH
55550: LD_INT 2
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: LD_INT 2
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 1
55569: NEG
55570: PUSH
55571: LD_INT 1
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 2
55580: NEG
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 2
55592: NEG
55593: PUSH
55594: LD_INT 2
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 2
55604: NEG
55605: PUSH
55606: LD_INT 3
55608: NEG
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 1
55616: NEG
55617: PUSH
55618: LD_INT 3
55620: NEG
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: LD_INT 3
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: PUSH
55640: LD_INT 2
55642: NEG
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 3
55650: PUSH
55651: LD_INT 2
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 3
55660: PUSH
55661: LD_INT 3
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 2
55670: PUSH
55671: LD_INT 3
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 1
55680: PUSH
55681: LD_INT 3
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: LD_INT 3
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 1
55700: NEG
55701: PUSH
55702: LD_INT 2
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 3
55711: NEG
55712: PUSH
55713: LD_INT 2
55715: NEG
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 3
55723: NEG
55724: PUSH
55725: LD_INT 3
55727: NEG
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55764: LD_ADDR_VAR 0 43
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: LD_INT 1
55784: NEG
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 1
55792: PUSH
55793: LD_INT 0
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 1
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 1
55833: NEG
55834: PUSH
55835: LD_INT 1
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: LD_INT 2
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: LD_INT 2
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 1
55868: PUSH
55869: LD_INT 1
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 2
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 2
55889: PUSH
55890: LD_INT 1
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: LD_INT 2
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: LD_INT 2
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 1
55919: NEG
55920: PUSH
55921: LD_INT 1
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 2
55930: NEG
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 2
55941: NEG
55942: PUSH
55943: LD_INT 1
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 1
55953: NEG
55954: PUSH
55955: LD_INT 3
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: LD_INT 3
55968: NEG
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 1
55976: PUSH
55977: LD_INT 2
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 2
55987: PUSH
55988: LD_INT 1
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 3
55998: PUSH
55999: LD_INT 0
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 3
56008: PUSH
56009: LD_INT 1
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: LD_INT 3
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: LD_INT 3
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 1
56038: NEG
56039: PUSH
56040: LD_INT 2
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 2
56049: NEG
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 3
56060: NEG
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 3
56071: NEG
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56112: LD_ADDR_VAR 0 44
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 1
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 1
56150: PUSH
56151: LD_INT 1
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 0
56160: PUSH
56161: LD_INT 1
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 1
56193: NEG
56194: PUSH
56195: LD_INT 2
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 1
56205: PUSH
56206: LD_INT 1
56208: NEG
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 2
56216: PUSH
56217: LD_INT 0
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 2
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 2
56236: PUSH
56237: LD_INT 2
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 1
56246: PUSH
56247: LD_INT 2
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 1
56256: NEG
56257: PUSH
56258: LD_INT 1
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 2
56267: NEG
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 2
56278: NEG
56279: PUSH
56280: LD_INT 1
56282: NEG
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 2
56290: NEG
56291: PUSH
56292: LD_INT 2
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 2
56302: NEG
56303: PUSH
56304: LD_INT 3
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 2
56314: PUSH
56315: LD_INT 1
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 3
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 3
56335: PUSH
56336: LD_INT 1
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 3
56345: PUSH
56346: LD_INT 2
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 3
56355: PUSH
56356: LD_INT 3
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 2
56365: PUSH
56366: LD_INT 3
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 2
56375: NEG
56376: PUSH
56377: LD_INT 1
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 3
56386: NEG
56387: PUSH
56388: LD_INT 0
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 3
56397: NEG
56398: PUSH
56399: LD_INT 1
56401: NEG
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 3
56409: NEG
56410: PUSH
56411: LD_INT 2
56413: NEG
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 3
56421: NEG
56422: PUSH
56423: LD_INT 3
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56462: LD_ADDR_VAR 0 45
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: LD_INT 0
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 1
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: NEG
56521: PUSH
56522: LD_INT 0
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: NEG
56532: PUSH
56533: LD_INT 1
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 1
56543: NEG
56544: PUSH
56545: LD_INT 2
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: LD_INT 2
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: LD_INT 1
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 2
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 2
56587: PUSH
56588: LD_INT 2
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 1
56597: PUSH
56598: LD_INT 2
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 0
56607: PUSH
56608: LD_INT 2
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 1
56617: NEG
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 2
56628: NEG
56629: PUSH
56630: LD_INT 1
56632: NEG
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 2
56640: NEG
56641: PUSH
56642: LD_INT 2
56644: NEG
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 2
56652: NEG
56653: PUSH
56654: LD_INT 3
56656: NEG
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: LD_INT 3
56668: NEG
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 0
56676: PUSH
56677: LD_INT 3
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 1
56687: PUSH
56688: LD_INT 2
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 3
56698: PUSH
56699: LD_INT 2
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 3
56708: PUSH
56709: LD_INT 3
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 2
56718: PUSH
56719: LD_INT 3
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 1
56728: PUSH
56729: LD_INT 3
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 0
56738: PUSH
56739: LD_INT 3
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 1
56748: NEG
56749: PUSH
56750: LD_INT 2
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 3
56759: NEG
56760: PUSH
56761: LD_INT 2
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 3
56771: NEG
56772: PUSH
56773: LD_INT 3
56775: NEG
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56812: LD_ADDR_VAR 0 46
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: LD_INT 1
56832: NEG
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 1
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 1
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 1
56870: NEG
56871: PUSH
56872: LD_INT 0
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 1
56881: NEG
56882: PUSH
56883: LD_INT 1
56885: NEG
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 1
56893: NEG
56894: PUSH
56895: LD_INT 2
56897: NEG
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 0
56905: PUSH
56906: LD_INT 2
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 1
56916: PUSH
56917: LD_INT 1
56919: NEG
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 2
56927: PUSH
56928: LD_INT 0
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 2
56937: PUSH
56938: LD_INT 1
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 1
56947: PUSH
56948: LD_INT 2
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 0
56957: PUSH
56958: LD_INT 2
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 1
56967: NEG
56968: PUSH
56969: LD_INT 1
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 2
56978: NEG
56979: PUSH
56980: LD_INT 0
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 2
56989: NEG
56990: PUSH
56991: LD_INT 1
56993: NEG
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 1
57001: NEG
57002: PUSH
57003: LD_INT 3
57005: NEG
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 0
57013: PUSH
57014: LD_INT 3
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 1
57024: PUSH
57025: LD_INT 2
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 2
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 3
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 3
57056: PUSH
57057: LD_INT 1
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: LD_INT 3
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 0
57076: PUSH
57077: LD_INT 3
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 1
57086: NEG
57087: PUSH
57088: LD_INT 2
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 2
57097: NEG
57098: PUSH
57099: LD_INT 1
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 3
57108: NEG
57109: PUSH
57110: LD_INT 0
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 3
57119: NEG
57120: PUSH
57121: LD_INT 1
57123: NEG
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57160: LD_ADDR_VAR 0 47
57164: PUSH
57165: LD_INT 0
57167: PUSH
57168: LD_INT 0
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 0
57177: PUSH
57178: LD_INT 1
57180: NEG
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 1
57188: PUSH
57189: LD_INT 0
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 1
57198: PUSH
57199: LD_INT 1
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 0
57208: PUSH
57209: LD_INT 1
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 1
57218: NEG
57219: PUSH
57220: LD_INT 0
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 1
57229: NEG
57230: PUSH
57231: LD_INT 1
57233: NEG
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 1
57241: NEG
57242: PUSH
57243: LD_INT 2
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 0
57253: PUSH
57254: LD_INT 2
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 1
57264: PUSH
57265: LD_INT 1
57267: NEG
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 2
57275: NEG
57276: PUSH
57277: LD_INT 1
57279: NEG
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 2
57287: NEG
57288: PUSH
57289: LD_INT 2
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57311: LD_ADDR_VAR 0 48
57315: PUSH
57316: LD_INT 0
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 0
57328: PUSH
57329: LD_INT 1
57331: NEG
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 1
57339: PUSH
57340: LD_INT 0
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 1
57349: PUSH
57350: LD_INT 1
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 0
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 1
57369: NEG
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 1
57380: NEG
57381: PUSH
57382: LD_INT 1
57384: NEG
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 1
57392: NEG
57393: PUSH
57394: LD_INT 2
57396: NEG
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 0
57404: PUSH
57405: LD_INT 2
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 1
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 2
57426: PUSH
57427: LD_INT 0
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 2
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57458: LD_ADDR_VAR 0 49
57462: PUSH
57463: LD_INT 0
57465: PUSH
57466: LD_INT 0
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 0
57475: PUSH
57476: LD_INT 1
57478: NEG
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 1
57486: PUSH
57487: LD_INT 0
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 1
57496: PUSH
57497: LD_INT 1
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 0
57506: PUSH
57507: LD_INT 1
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: NEG
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 1
57527: NEG
57528: PUSH
57529: LD_INT 1
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 1
57539: PUSH
57540: LD_INT 1
57542: NEG
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 2
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 2
57560: PUSH
57561: LD_INT 1
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 2
57570: PUSH
57571: LD_INT 2
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 1
57580: PUSH
57581: LD_INT 2
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57602: LD_ADDR_VAR 0 50
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: LD_INT 0
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 0
57619: PUSH
57620: LD_INT 1
57622: NEG
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 1
57630: PUSH
57631: LD_INT 0
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 1
57640: PUSH
57641: LD_INT 1
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: LD_INT 1
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 1
57660: NEG
57661: PUSH
57662: LD_INT 0
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 1
57671: NEG
57672: PUSH
57673: LD_INT 1
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 2
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 2
57693: PUSH
57694: LD_INT 2
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: LD_INT 2
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 0
57713: PUSH
57714: LD_INT 2
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 1
57723: NEG
57724: PUSH
57725: LD_INT 1
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57746: LD_ADDR_VAR 0 51
57750: PUSH
57751: LD_INT 0
57753: PUSH
57754: LD_INT 0
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: LD_INT 1
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 1
57774: PUSH
57775: LD_INT 0
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 1
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: LD_INT 1
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 1
57804: NEG
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: NEG
57816: PUSH
57817: LD_INT 1
57819: NEG
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 1
57827: PUSH
57828: LD_INT 2
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 0
57837: PUSH
57838: LD_INT 2
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 1
57847: NEG
57848: PUSH
57849: LD_INT 1
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 2
57858: NEG
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 2
57869: NEG
57870: PUSH
57871: LD_INT 1
57873: NEG
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57893: LD_ADDR_VAR 0 52
57897: PUSH
57898: LD_INT 0
57900: PUSH
57901: LD_INT 0
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: LD_INT 1
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: LD_INT 0
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 1
57931: PUSH
57932: LD_INT 1
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 0
57941: PUSH
57942: LD_INT 1
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: LD_INT 0
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: LD_INT 1
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 1
57974: NEG
57975: PUSH
57976: LD_INT 2
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: LD_INT 1
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 2
57997: NEG
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 2
58008: NEG
58009: PUSH
58010: LD_INT 1
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 2
58020: NEG
58021: PUSH
58022: LD_INT 2
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58044: LD_ADDR_VAR 0 53
58048: PUSH
58049: LD_INT 0
58051: PUSH
58052: LD_INT 0
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 0
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 1
58072: PUSH
58073: LD_INT 0
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 1
58082: PUSH
58083: LD_INT 1
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: LD_INT 1
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 1
58102: NEG
58103: PUSH
58104: LD_INT 0
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 1
58113: NEG
58114: PUSH
58115: LD_INT 1
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 1
58125: NEG
58126: PUSH
58127: LD_INT 2
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 0
58137: PUSH
58138: LD_INT 2
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 1
58148: PUSH
58149: LD_INT 1
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 2
58159: PUSH
58160: LD_INT 0
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 2
58169: PUSH
58170: LD_INT 1
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 2
58179: PUSH
58180: LD_INT 2
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: PUSH
58190: LD_INT 2
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 0
58199: PUSH
58200: LD_INT 2
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 1
58209: NEG
58210: PUSH
58211: LD_INT 1
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 2
58220: NEG
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 2
58231: NEG
58232: PUSH
58233: LD_INT 1
58235: NEG
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 2
58243: NEG
58244: PUSH
58245: LD_INT 2
58247: NEG
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58274: LD_ADDR_VAR 0 54
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: LD_INT 0
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: LD_INT 1
58294: NEG
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 1
58302: PUSH
58303: LD_INT 0
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: LD_INT 1
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: LD_INT 1
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 1
58332: NEG
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 1
58343: NEG
58344: PUSH
58345: LD_INT 1
58347: NEG
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 1
58355: NEG
58356: PUSH
58357: LD_INT 2
58359: NEG
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 0
58367: PUSH
58368: LD_INT 2
58370: NEG
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 1
58378: PUSH
58379: LD_INT 1
58381: NEG
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 2
58389: PUSH
58390: LD_INT 0
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 2
58399: PUSH
58400: LD_INT 1
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 2
58409: PUSH
58410: LD_INT 2
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 1
58419: PUSH
58420: LD_INT 2
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 0
58429: PUSH
58430: LD_INT 2
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 1
58439: NEG
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 2
58450: NEG
58451: PUSH
58452: LD_INT 0
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 2
58461: NEG
58462: PUSH
58463: LD_INT 1
58465: NEG
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 2
58473: NEG
58474: PUSH
58475: LD_INT 2
58477: NEG
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58504: LD_ADDR_VAR 0 55
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 0
58521: PUSH
58522: LD_INT 1
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 1
58532: PUSH
58533: LD_INT 0
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 1
58542: PUSH
58543: LD_INT 1
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 0
58552: PUSH
58553: LD_INT 1
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 1
58562: NEG
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 1
58573: NEG
58574: PUSH
58575: LD_INT 1
58577: NEG
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 1
58585: NEG
58586: PUSH
58587: LD_INT 2
58589: NEG
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 0
58597: PUSH
58598: LD_INT 2
58600: NEG
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 1
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 2
58619: PUSH
58620: LD_INT 0
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 2
58629: PUSH
58630: LD_INT 1
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 2
58639: PUSH
58640: LD_INT 2
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 1
58649: PUSH
58650: LD_INT 2
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 0
58659: PUSH
58660: LD_INT 2
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 1
58669: NEG
58670: PUSH
58671: LD_INT 1
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 2
58680: NEG
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 2
58691: NEG
58692: PUSH
58693: LD_INT 1
58695: NEG
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 2
58703: NEG
58704: PUSH
58705: LD_INT 2
58707: NEG
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58734: LD_ADDR_VAR 0 56
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 0
58751: PUSH
58752: LD_INT 1
58754: NEG
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 1
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 1
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 0
58782: PUSH
58783: LD_INT 1
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 1
58792: NEG
58793: PUSH
58794: LD_INT 0
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 1
58803: NEG
58804: PUSH
58805: LD_INT 1
58807: NEG
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 1
58815: NEG
58816: PUSH
58817: LD_INT 2
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 0
58827: PUSH
58828: LD_INT 2
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 1
58838: PUSH
58839: LD_INT 1
58841: NEG
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 2
58849: PUSH
58850: LD_INT 0
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 2
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 2
58869: PUSH
58870: LD_INT 2
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 1
58879: PUSH
58880: LD_INT 2
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: LD_INT 2
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 1
58899: NEG
58900: PUSH
58901: LD_INT 1
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 2
58910: NEG
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 2
58921: NEG
58922: PUSH
58923: LD_INT 1
58925: NEG
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 2
58933: NEG
58934: PUSH
58935: LD_INT 2
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58964: LD_ADDR_VAR 0 57
58968: PUSH
58969: LD_INT 0
58971: PUSH
58972: LD_INT 0
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 0
58981: PUSH
58982: LD_INT 1
58984: NEG
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 1
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 1
59002: PUSH
59003: LD_INT 1
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 0
59012: PUSH
59013: LD_INT 1
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 1
59022: NEG
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 1
59033: NEG
59034: PUSH
59035: LD_INT 1
59037: NEG
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 1
59045: NEG
59046: PUSH
59047: LD_INT 2
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 0
59057: PUSH
59058: LD_INT 2
59060: NEG
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 1
59068: PUSH
59069: LD_INT 1
59071: NEG
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 2
59079: PUSH
59080: LD_INT 0
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 2
59089: PUSH
59090: LD_INT 1
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 2
59099: PUSH
59100: LD_INT 2
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 1
59109: PUSH
59110: LD_INT 2
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 0
59119: PUSH
59120: LD_INT 2
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 1
59129: NEG
59130: PUSH
59131: LD_INT 1
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 2
59140: NEG
59141: PUSH
59142: LD_INT 0
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 2
59151: NEG
59152: PUSH
59153: LD_INT 1
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 2
59163: NEG
59164: PUSH
59165: LD_INT 2
59167: NEG
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59194: LD_ADDR_VAR 0 58
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: LD_INT 0
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 0
59211: PUSH
59212: LD_INT 1
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: LD_INT 0
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 1
59232: PUSH
59233: LD_INT 1
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 0
59242: PUSH
59243: LD_INT 1
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 1
59252: NEG
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 1
59263: NEG
59264: PUSH
59265: LD_INT 1
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 1
59275: NEG
59276: PUSH
59277: LD_INT 2
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 0
59287: PUSH
59288: LD_INT 2
59290: NEG
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 1
59298: PUSH
59299: LD_INT 1
59301: NEG
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 2
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 2
59319: PUSH
59320: LD_INT 1
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 2
59329: PUSH
59330: LD_INT 2
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 1
59339: PUSH
59340: LD_INT 2
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 0
59349: PUSH
59350: LD_INT 2
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 1
59359: NEG
59360: PUSH
59361: LD_INT 1
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 2
59370: NEG
59371: PUSH
59372: LD_INT 0
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 2
59381: NEG
59382: PUSH
59383: LD_INT 1
59385: NEG
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 2
59393: NEG
59394: PUSH
59395: LD_INT 2
59397: NEG
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59424: LD_ADDR_VAR 0 59
59428: PUSH
59429: LD_INT 0
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 0
59441: PUSH
59442: LD_INT 1
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 1
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 1
59462: PUSH
59463: LD_INT 1
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 0
59472: PUSH
59473: LD_INT 1
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: LD_INT 0
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 1
59493: NEG
59494: PUSH
59495: LD_INT 1
59497: NEG
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59512: LD_ADDR_VAR 0 60
59516: PUSH
59517: LD_INT 0
59519: PUSH
59520: LD_INT 0
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 0
59529: PUSH
59530: LD_INT 1
59532: NEG
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 1
59540: PUSH
59541: LD_INT 0
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 1
59550: PUSH
59551: LD_INT 1
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 0
59560: PUSH
59561: LD_INT 1
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 1
59570: NEG
59571: PUSH
59572: LD_INT 0
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 1
59581: NEG
59582: PUSH
59583: LD_INT 1
59585: NEG
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59600: LD_ADDR_VAR 0 61
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: LD_INT 0
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 0
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 1
59628: PUSH
59629: LD_INT 0
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 1
59638: PUSH
59639: LD_INT 1
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 0
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: LD_INT 0
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 1
59669: NEG
59670: PUSH
59671: LD_INT 1
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59688: LD_ADDR_VAR 0 62
59692: PUSH
59693: LD_INT 0
59695: PUSH
59696: LD_INT 0
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 0
59705: PUSH
59706: LD_INT 1
59708: NEG
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 1
59716: PUSH
59717: LD_INT 0
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 1
59726: PUSH
59727: LD_INT 1
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 0
59736: PUSH
59737: LD_INT 1
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 1
59746: NEG
59747: PUSH
59748: LD_INT 0
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 1
59757: NEG
59758: PUSH
59759: LD_INT 1
59761: NEG
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59776: LD_ADDR_VAR 0 63
59780: PUSH
59781: LD_INT 0
59783: PUSH
59784: LD_INT 0
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 0
59793: PUSH
59794: LD_INT 1
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 1
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 1
59814: PUSH
59815: LD_INT 1
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 0
59824: PUSH
59825: LD_INT 1
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: NEG
59835: PUSH
59836: LD_INT 0
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 1
59845: NEG
59846: PUSH
59847: LD_INT 1
59849: NEG
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59864: LD_ADDR_VAR 0 64
59868: PUSH
59869: LD_INT 0
59871: PUSH
59872: LD_INT 0
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 0
59881: PUSH
59882: LD_INT 1
59884: NEG
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 1
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 1
59902: PUSH
59903: LD_INT 1
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 0
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 1
59922: NEG
59923: PUSH
59924: LD_INT 0
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 1
59933: NEG
59934: PUSH
59935: LD_INT 1
59937: NEG
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: ST_TO_ADDR
// end ; 1 :
59952: GO 65849
59954: LD_INT 1
59956: DOUBLE
59957: EQUAL
59958: IFTRUE 59962
59960: GO 62585
59962: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59963: LD_ADDR_VAR 0 11
59967: PUSH
59968: LD_INT 1
59970: NEG
59971: PUSH
59972: LD_INT 3
59974: NEG
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 0
59982: PUSH
59983: LD_INT 3
59985: NEG
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 1
59993: PUSH
59994: LD_INT 2
59996: NEG
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: LIST
60006: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60007: LD_ADDR_VAR 0 12
60011: PUSH
60012: LD_INT 2
60014: PUSH
60015: LD_INT 1
60017: NEG
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 3
60025: PUSH
60026: LD_INT 0
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 3
60035: PUSH
60036: LD_INT 1
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: LIST
60047: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60048: LD_ADDR_VAR 0 13
60052: PUSH
60053: LD_INT 3
60055: PUSH
60056: LD_INT 2
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 3
60065: PUSH
60066: LD_INT 3
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 2
60075: PUSH
60076: LD_INT 3
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: LIST
60087: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60088: LD_ADDR_VAR 0 14
60092: PUSH
60093: LD_INT 1
60095: PUSH
60096: LD_INT 3
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 0
60105: PUSH
60106: LD_INT 3
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 1
60115: NEG
60116: PUSH
60117: LD_INT 2
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: LIST
60128: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60129: LD_ADDR_VAR 0 15
60133: PUSH
60134: LD_INT 2
60136: NEG
60137: PUSH
60138: LD_INT 1
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 3
60147: NEG
60148: PUSH
60149: LD_INT 0
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 3
60158: NEG
60159: PUSH
60160: LD_INT 1
60162: NEG
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: LIST
60172: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60173: LD_ADDR_VAR 0 16
60177: PUSH
60178: LD_INT 2
60180: NEG
60181: PUSH
60182: LD_INT 3
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 3
60192: NEG
60193: PUSH
60194: LD_INT 2
60196: NEG
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 3
60204: NEG
60205: PUSH
60206: LD_INT 3
60208: NEG
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: LIST
60218: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60219: LD_ADDR_VAR 0 17
60223: PUSH
60224: LD_INT 1
60226: NEG
60227: PUSH
60228: LD_INT 3
60230: NEG
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 0
60238: PUSH
60239: LD_INT 3
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 1
60249: PUSH
60250: LD_INT 2
60252: NEG
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: LIST
60262: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60263: LD_ADDR_VAR 0 18
60267: PUSH
60268: LD_INT 2
60270: PUSH
60271: LD_INT 1
60273: NEG
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 3
60281: PUSH
60282: LD_INT 0
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 3
60291: PUSH
60292: LD_INT 1
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: LIST
60303: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60304: LD_ADDR_VAR 0 19
60308: PUSH
60309: LD_INT 3
60311: PUSH
60312: LD_INT 2
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 3
60321: PUSH
60322: LD_INT 3
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 2
60331: PUSH
60332: LD_INT 3
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: LIST
60343: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60344: LD_ADDR_VAR 0 20
60348: PUSH
60349: LD_INT 1
60351: PUSH
60352: LD_INT 3
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 0
60361: PUSH
60362: LD_INT 3
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 1
60371: NEG
60372: PUSH
60373: LD_INT 2
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: LIST
60384: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60385: LD_ADDR_VAR 0 21
60389: PUSH
60390: LD_INT 2
60392: NEG
60393: PUSH
60394: LD_INT 1
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 3
60403: NEG
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 3
60414: NEG
60415: PUSH
60416: LD_INT 1
60418: NEG
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: LIST
60428: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60429: LD_ADDR_VAR 0 22
60433: PUSH
60434: LD_INT 2
60436: NEG
60437: PUSH
60438: LD_INT 3
60440: NEG
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 3
60448: NEG
60449: PUSH
60450: LD_INT 2
60452: NEG
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 3
60460: NEG
60461: PUSH
60462: LD_INT 3
60464: NEG
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: LIST
60474: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60475: LD_ADDR_VAR 0 23
60479: PUSH
60480: LD_INT 0
60482: PUSH
60483: LD_INT 3
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 1
60493: NEG
60494: PUSH
60495: LD_INT 4
60497: NEG
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 1
60505: PUSH
60506: LD_INT 3
60508: NEG
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: LIST
60518: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60519: LD_ADDR_VAR 0 24
60523: PUSH
60524: LD_INT 3
60526: PUSH
60527: LD_INT 0
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 3
60536: PUSH
60537: LD_INT 1
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 4
60547: PUSH
60548: LD_INT 1
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: LIST
60559: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60560: LD_ADDR_VAR 0 25
60564: PUSH
60565: LD_INT 3
60567: PUSH
60568: LD_INT 3
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 4
60577: PUSH
60578: LD_INT 3
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 3
60587: PUSH
60588: LD_INT 4
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: LIST
60599: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60600: LD_ADDR_VAR 0 26
60604: PUSH
60605: LD_INT 0
60607: PUSH
60608: LD_INT 3
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 1
60617: PUSH
60618: LD_INT 4
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 1
60627: NEG
60628: PUSH
60629: LD_INT 3
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: LIST
60640: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60641: LD_ADDR_VAR 0 27
60645: PUSH
60646: LD_INT 3
60648: NEG
60649: PUSH
60650: LD_INT 0
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 3
60659: NEG
60660: PUSH
60661: LD_INT 1
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 4
60670: NEG
60671: PUSH
60672: LD_INT 1
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: LIST
60684: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60685: LD_ADDR_VAR 0 28
60689: PUSH
60690: LD_INT 3
60692: NEG
60693: PUSH
60694: LD_INT 3
60696: NEG
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 3
60704: NEG
60705: PUSH
60706: LD_INT 4
60708: NEG
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 4
60716: NEG
60717: PUSH
60718: LD_INT 3
60720: NEG
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: LIST
60730: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60731: LD_ADDR_VAR 0 29
60735: PUSH
60736: LD_INT 1
60738: NEG
60739: PUSH
60740: LD_INT 3
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 0
60750: PUSH
60751: LD_INT 3
60753: NEG
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 1
60761: PUSH
60762: LD_INT 2
60764: NEG
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 1
60772: NEG
60773: PUSH
60774: LD_INT 4
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 0
60784: PUSH
60785: LD_INT 4
60787: NEG
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 1
60795: PUSH
60796: LD_INT 3
60798: NEG
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 1
60806: NEG
60807: PUSH
60808: LD_INT 5
60810: NEG
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 0
60818: PUSH
60819: LD_INT 5
60821: NEG
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 1
60829: PUSH
60830: LD_INT 4
60832: NEG
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 1
60840: NEG
60841: PUSH
60842: LD_INT 6
60844: NEG
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 0
60852: PUSH
60853: LD_INT 6
60855: NEG
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 1
60863: PUSH
60864: LD_INT 5
60866: NEG
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60886: LD_ADDR_VAR 0 30
60890: PUSH
60891: LD_INT 2
60893: PUSH
60894: LD_INT 1
60896: NEG
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 3
60904: PUSH
60905: LD_INT 0
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 3
60914: PUSH
60915: LD_INT 1
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 3
60924: PUSH
60925: LD_INT 1
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 4
60935: PUSH
60936: LD_INT 0
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 4
60945: PUSH
60946: LD_INT 1
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 4
60955: PUSH
60956: LD_INT 1
60958: NEG
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 5
60966: PUSH
60967: LD_INT 0
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 5
60976: PUSH
60977: LD_INT 1
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 5
60986: PUSH
60987: LD_INT 1
60989: NEG
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 6
60997: PUSH
60998: LD_INT 0
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 6
61007: PUSH
61008: LD_INT 1
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61029: LD_ADDR_VAR 0 31
61033: PUSH
61034: LD_INT 3
61036: PUSH
61037: LD_INT 2
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 3
61046: PUSH
61047: LD_INT 3
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 2
61056: PUSH
61057: LD_INT 3
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 4
61066: PUSH
61067: LD_INT 3
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 4
61076: PUSH
61077: LD_INT 4
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 3
61086: PUSH
61087: LD_INT 4
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 5
61096: PUSH
61097: LD_INT 4
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 5
61106: PUSH
61107: LD_INT 5
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 4
61116: PUSH
61117: LD_INT 5
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 6
61126: PUSH
61127: LD_INT 5
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 6
61136: PUSH
61137: LD_INT 6
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 5
61146: PUSH
61147: LD_INT 6
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61168: LD_ADDR_VAR 0 32
61172: PUSH
61173: LD_INT 1
61175: PUSH
61176: LD_INT 3
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 0
61185: PUSH
61186: LD_INT 3
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 1
61195: NEG
61196: PUSH
61197: LD_INT 2
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 1
61206: PUSH
61207: LD_INT 4
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 0
61216: PUSH
61217: LD_INT 4
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 1
61226: NEG
61227: PUSH
61228: LD_INT 3
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 1
61237: PUSH
61238: LD_INT 5
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 0
61247: PUSH
61248: LD_INT 5
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 1
61257: NEG
61258: PUSH
61259: LD_INT 4
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 1
61268: PUSH
61269: LD_INT 6
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 0
61278: PUSH
61279: LD_INT 6
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 1
61288: NEG
61289: PUSH
61290: LD_INT 5
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61311: LD_ADDR_VAR 0 33
61315: PUSH
61316: LD_INT 2
61318: NEG
61319: PUSH
61320: LD_INT 1
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 3
61329: NEG
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 3
61340: NEG
61341: PUSH
61342: LD_INT 1
61344: NEG
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 3
61352: NEG
61353: PUSH
61354: LD_INT 1
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 4
61363: NEG
61364: PUSH
61365: LD_INT 0
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 4
61374: NEG
61375: PUSH
61376: LD_INT 1
61378: NEG
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 4
61386: NEG
61387: PUSH
61388: LD_INT 1
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 5
61397: NEG
61398: PUSH
61399: LD_INT 0
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 5
61408: NEG
61409: PUSH
61410: LD_INT 1
61412: NEG
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 5
61420: NEG
61421: PUSH
61422: LD_INT 1
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 6
61431: NEG
61432: PUSH
61433: LD_INT 0
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 6
61442: NEG
61443: PUSH
61444: LD_INT 1
61446: NEG
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61466: LD_ADDR_VAR 0 34
61470: PUSH
61471: LD_INT 2
61473: NEG
61474: PUSH
61475: LD_INT 3
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 3
61485: NEG
61486: PUSH
61487: LD_INT 2
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 3
61497: NEG
61498: PUSH
61499: LD_INT 3
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 3
61509: NEG
61510: PUSH
61511: LD_INT 4
61513: NEG
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 4
61521: NEG
61522: PUSH
61523: LD_INT 3
61525: NEG
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 4
61533: NEG
61534: PUSH
61535: LD_INT 4
61537: NEG
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 4
61545: NEG
61546: PUSH
61547: LD_INT 5
61549: NEG
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 5
61557: NEG
61558: PUSH
61559: LD_INT 4
61561: NEG
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 5
61569: NEG
61570: PUSH
61571: LD_INT 5
61573: NEG
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 5
61581: NEG
61582: PUSH
61583: LD_INT 6
61585: NEG
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 6
61593: NEG
61594: PUSH
61595: LD_INT 5
61597: NEG
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 6
61605: NEG
61606: PUSH
61607: LD_INT 6
61609: NEG
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61629: LD_ADDR_VAR 0 41
61633: PUSH
61634: LD_INT 0
61636: PUSH
61637: LD_INT 2
61639: NEG
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 1
61647: NEG
61648: PUSH
61649: LD_INT 3
61651: NEG
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 1
61659: PUSH
61660: LD_INT 2
61662: NEG
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: LIST
61672: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61673: LD_ADDR_VAR 0 42
61677: PUSH
61678: LD_INT 2
61680: PUSH
61681: LD_INT 0
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 2
61690: PUSH
61691: LD_INT 1
61693: NEG
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 3
61701: PUSH
61702: LD_INT 1
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: LIST
61713: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61714: LD_ADDR_VAR 0 43
61718: PUSH
61719: LD_INT 2
61721: PUSH
61722: LD_INT 2
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 3
61731: PUSH
61732: LD_INT 2
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 2
61741: PUSH
61742: LD_INT 3
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: LIST
61753: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61754: LD_ADDR_VAR 0 44
61758: PUSH
61759: LD_INT 0
61761: PUSH
61762: LD_INT 2
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 1
61771: PUSH
61772: LD_INT 3
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 1
61781: NEG
61782: PUSH
61783: LD_INT 2
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: LIST
61794: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61795: LD_ADDR_VAR 0 45
61799: PUSH
61800: LD_INT 2
61802: NEG
61803: PUSH
61804: LD_INT 0
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 2
61813: NEG
61814: PUSH
61815: LD_INT 1
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 3
61824: NEG
61825: PUSH
61826: LD_INT 1
61828: NEG
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: LIST
61838: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61839: LD_ADDR_VAR 0 46
61843: PUSH
61844: LD_INT 2
61846: NEG
61847: PUSH
61848: LD_INT 2
61850: NEG
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 2
61858: NEG
61859: PUSH
61860: LD_INT 3
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 3
61870: NEG
61871: PUSH
61872: LD_INT 2
61874: NEG
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: LIST
61884: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61885: LD_ADDR_VAR 0 47
61889: PUSH
61890: LD_INT 2
61892: NEG
61893: PUSH
61894: LD_INT 3
61896: NEG
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 1
61904: NEG
61905: PUSH
61906: LD_INT 3
61908: NEG
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61918: LD_ADDR_VAR 0 48
61922: PUSH
61923: LD_INT 1
61925: PUSH
61926: LD_INT 2
61928: NEG
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 2
61936: PUSH
61937: LD_INT 1
61939: NEG
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61949: LD_ADDR_VAR 0 49
61953: PUSH
61954: LD_INT 3
61956: PUSH
61957: LD_INT 1
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 3
61966: PUSH
61967: LD_INT 2
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61978: LD_ADDR_VAR 0 50
61982: PUSH
61983: LD_INT 2
61985: PUSH
61986: LD_INT 3
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 1
61995: PUSH
61996: LD_INT 3
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62007: LD_ADDR_VAR 0 51
62011: PUSH
62012: LD_INT 1
62014: NEG
62015: PUSH
62016: LD_INT 2
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 2
62025: NEG
62026: PUSH
62027: LD_INT 1
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62038: LD_ADDR_VAR 0 52
62042: PUSH
62043: LD_INT 3
62045: NEG
62046: PUSH
62047: LD_INT 1
62049: NEG
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 3
62057: NEG
62058: PUSH
62059: LD_INT 2
62061: NEG
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62071: LD_ADDR_VAR 0 53
62075: PUSH
62076: LD_INT 1
62078: NEG
62079: PUSH
62080: LD_INT 3
62082: NEG
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 0
62090: PUSH
62091: LD_INT 3
62093: NEG
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 1
62101: PUSH
62102: LD_INT 2
62104: NEG
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: LIST
62114: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62115: LD_ADDR_VAR 0 54
62119: PUSH
62120: LD_INT 2
62122: PUSH
62123: LD_INT 1
62125: NEG
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 3
62133: PUSH
62134: LD_INT 0
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 3
62143: PUSH
62144: LD_INT 1
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: LIST
62155: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62156: LD_ADDR_VAR 0 55
62160: PUSH
62161: LD_INT 3
62163: PUSH
62164: LD_INT 2
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 3
62173: PUSH
62174: LD_INT 3
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 2
62183: PUSH
62184: LD_INT 3
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: LIST
62195: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62196: LD_ADDR_VAR 0 56
62200: PUSH
62201: LD_INT 1
62203: PUSH
62204: LD_INT 3
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 0
62213: PUSH
62214: LD_INT 3
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 1
62223: NEG
62224: PUSH
62225: LD_INT 2
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: LIST
62236: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62237: LD_ADDR_VAR 0 57
62241: PUSH
62242: LD_INT 2
62244: NEG
62245: PUSH
62246: LD_INT 1
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 3
62255: NEG
62256: PUSH
62257: LD_INT 0
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 3
62266: NEG
62267: PUSH
62268: LD_INT 1
62270: NEG
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: LIST
62280: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62281: LD_ADDR_VAR 0 58
62285: PUSH
62286: LD_INT 2
62288: NEG
62289: PUSH
62290: LD_INT 3
62292: NEG
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 3
62300: NEG
62301: PUSH
62302: LD_INT 2
62304: NEG
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 3
62312: NEG
62313: PUSH
62314: LD_INT 3
62316: NEG
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: LIST
62326: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62327: LD_ADDR_VAR 0 59
62331: PUSH
62332: LD_INT 1
62334: NEG
62335: PUSH
62336: LD_INT 2
62338: NEG
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 0
62346: PUSH
62347: LD_INT 2
62349: NEG
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 1
62357: PUSH
62358: LD_INT 1
62360: NEG
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: LIST
62370: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62371: LD_ADDR_VAR 0 60
62375: PUSH
62376: LD_INT 1
62378: PUSH
62379: LD_INT 1
62381: NEG
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 2
62389: PUSH
62390: LD_INT 0
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 2
62399: PUSH
62400: LD_INT 1
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: LIST
62411: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62412: LD_ADDR_VAR 0 61
62416: PUSH
62417: LD_INT 2
62419: PUSH
62420: LD_INT 1
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 2
62429: PUSH
62430: LD_INT 2
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 1
62439: PUSH
62440: LD_INT 2
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: LIST
62451: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62452: LD_ADDR_VAR 0 62
62456: PUSH
62457: LD_INT 1
62459: PUSH
62460: LD_INT 2
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 0
62469: PUSH
62470: LD_INT 2
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 1
62479: NEG
62480: PUSH
62481: LD_INT 1
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: LIST
62492: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62493: LD_ADDR_VAR 0 63
62497: PUSH
62498: LD_INT 1
62500: NEG
62501: PUSH
62502: LD_INT 1
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 2
62511: NEG
62512: PUSH
62513: LD_INT 0
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 2
62522: NEG
62523: PUSH
62524: LD_INT 1
62526: NEG
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: LIST
62536: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62537: LD_ADDR_VAR 0 64
62541: PUSH
62542: LD_INT 1
62544: NEG
62545: PUSH
62546: LD_INT 2
62548: NEG
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 2
62556: NEG
62557: PUSH
62558: LD_INT 1
62560: NEG
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 2
62568: NEG
62569: PUSH
62570: LD_INT 2
62572: NEG
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: LIST
62582: ST_TO_ADDR
// end ; 2 :
62583: GO 65849
62585: LD_INT 2
62587: DOUBLE
62588: EQUAL
62589: IFTRUE 62593
62591: GO 65848
62593: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62594: LD_ADDR_VAR 0 29
62598: PUSH
62599: LD_INT 4
62601: PUSH
62602: LD_INT 0
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 4
62611: PUSH
62612: LD_INT 1
62614: NEG
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 5
62622: PUSH
62623: LD_INT 0
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 5
62632: PUSH
62633: LD_INT 1
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 4
62642: PUSH
62643: LD_INT 1
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 3
62652: PUSH
62653: LD_INT 0
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 3
62662: PUSH
62663: LD_INT 1
62665: NEG
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 3
62673: PUSH
62674: LD_INT 2
62676: NEG
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 5
62684: PUSH
62685: LD_INT 2
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 3
62694: PUSH
62695: LD_INT 3
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 3
62704: PUSH
62705: LD_INT 2
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 4
62714: PUSH
62715: LD_INT 3
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 4
62724: PUSH
62725: LD_INT 4
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 3
62734: PUSH
62735: LD_INT 4
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 2
62744: PUSH
62745: LD_INT 3
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 2
62754: PUSH
62755: LD_INT 2
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 4
62764: PUSH
62765: LD_INT 2
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 2
62774: PUSH
62775: LD_INT 4
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 0
62784: PUSH
62785: LD_INT 4
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 0
62794: PUSH
62795: LD_INT 3
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 1
62804: PUSH
62805: LD_INT 4
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 1
62814: PUSH
62815: LD_INT 5
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 0
62824: PUSH
62825: LD_INT 5
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 1
62834: NEG
62835: PUSH
62836: LD_INT 4
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 1
62845: NEG
62846: PUSH
62847: LD_INT 3
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 2
62856: PUSH
62857: LD_INT 5
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 2
62866: NEG
62867: PUSH
62868: LD_INT 3
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 3
62877: NEG
62878: PUSH
62879: LD_INT 0
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 3
62888: NEG
62889: PUSH
62890: LD_INT 1
62892: NEG
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 2
62900: NEG
62901: PUSH
62902: LD_INT 0
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 2
62911: NEG
62912: PUSH
62913: LD_INT 1
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 3
62922: NEG
62923: PUSH
62924: LD_INT 1
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 4
62933: NEG
62934: PUSH
62935: LD_INT 0
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 4
62944: NEG
62945: PUSH
62946: LD_INT 1
62948: NEG
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 4
62956: NEG
62957: PUSH
62958: LD_INT 2
62960: NEG
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 2
62968: NEG
62969: PUSH
62970: LD_INT 2
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 4
62979: NEG
62980: PUSH
62981: LD_INT 4
62983: NEG
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 4
62991: NEG
62992: PUSH
62993: LD_INT 5
62995: NEG
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 3
63003: NEG
63004: PUSH
63005: LD_INT 4
63007: NEG
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 3
63015: NEG
63016: PUSH
63017: LD_INT 3
63019: NEG
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 4
63027: NEG
63028: PUSH
63029: LD_INT 3
63031: NEG
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 5
63039: NEG
63040: PUSH
63041: LD_INT 4
63043: NEG
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 5
63051: NEG
63052: PUSH
63053: LD_INT 5
63055: NEG
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 3
63063: NEG
63064: PUSH
63065: LD_INT 5
63067: NEG
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 5
63075: NEG
63076: PUSH
63077: LD_INT 3
63079: NEG
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: LIST
63131: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63132: LD_ADDR_VAR 0 30
63136: PUSH
63137: LD_INT 4
63139: PUSH
63140: LD_INT 4
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 4
63149: PUSH
63150: LD_INT 3
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 5
63159: PUSH
63160: LD_INT 4
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 5
63169: PUSH
63170: LD_INT 5
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 4
63179: PUSH
63180: LD_INT 5
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 3
63189: PUSH
63190: LD_INT 4
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_INT 3
63199: PUSH
63200: LD_INT 3
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 5
63209: PUSH
63210: LD_INT 3
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: LD_INT 3
63219: PUSH
63220: LD_INT 5
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 0
63229: PUSH
63230: LD_INT 3
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 0
63239: PUSH
63240: LD_INT 2
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 1
63249: PUSH
63250: LD_INT 3
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 1
63259: PUSH
63260: LD_INT 4
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 0
63269: PUSH
63270: LD_INT 4
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 1
63279: NEG
63280: PUSH
63281: LD_INT 3
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 1
63290: NEG
63291: PUSH
63292: LD_INT 2
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 2
63301: PUSH
63302: LD_INT 4
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 2
63311: NEG
63312: PUSH
63313: LD_INT 2
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 4
63322: NEG
63323: PUSH
63324: LD_INT 0
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 4
63333: NEG
63334: PUSH
63335: LD_INT 1
63337: NEG
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 3
63345: NEG
63346: PUSH
63347: LD_INT 0
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 3
63356: NEG
63357: PUSH
63358: LD_INT 1
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 4
63367: NEG
63368: PUSH
63369: LD_INT 1
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 5
63378: NEG
63379: PUSH
63380: LD_INT 0
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 5
63389: NEG
63390: PUSH
63391: LD_INT 1
63393: NEG
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 5
63401: NEG
63402: PUSH
63403: LD_INT 2
63405: NEG
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 3
63413: NEG
63414: PUSH
63415: LD_INT 2
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 3
63424: NEG
63425: PUSH
63426: LD_INT 3
63428: NEG
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 3
63436: NEG
63437: PUSH
63438: LD_INT 4
63440: NEG
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 2
63448: NEG
63449: PUSH
63450: LD_INT 3
63452: NEG
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 2
63460: NEG
63461: PUSH
63462: LD_INT 2
63464: NEG
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 3
63472: NEG
63473: PUSH
63474: LD_INT 2
63476: NEG
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 4
63484: NEG
63485: PUSH
63486: LD_INT 3
63488: NEG
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 4
63496: NEG
63497: PUSH
63498: LD_INT 4
63500: NEG
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 2
63508: NEG
63509: PUSH
63510: LD_INT 4
63512: NEG
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 4
63520: NEG
63521: PUSH
63522: LD_INT 2
63524: NEG
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 0
63532: PUSH
63533: LD_INT 4
63535: NEG
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 0
63543: PUSH
63544: LD_INT 5
63546: NEG
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 1
63554: PUSH
63555: LD_INT 4
63557: NEG
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 1
63565: PUSH
63566: LD_INT 3
63568: NEG
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 0
63576: PUSH
63577: LD_INT 3
63579: NEG
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 1
63587: NEG
63588: PUSH
63589: LD_INT 4
63591: NEG
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 1
63599: NEG
63600: PUSH
63601: LD_INT 5
63603: NEG
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 2
63611: PUSH
63612: LD_INT 3
63614: NEG
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 2
63622: NEG
63623: PUSH
63624: LD_INT 5
63626: NEG
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63679: LD_ADDR_VAR 0 31
63683: PUSH
63684: LD_INT 0
63686: PUSH
63687: LD_INT 4
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 0
63696: PUSH
63697: LD_INT 3
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 1
63706: PUSH
63707: LD_INT 4
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 1
63716: PUSH
63717: LD_INT 5
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 0
63726: PUSH
63727: LD_INT 5
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 1
63736: NEG
63737: PUSH
63738: LD_INT 4
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 1
63747: NEG
63748: PUSH
63749: LD_INT 3
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 2
63758: PUSH
63759: LD_INT 5
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 2
63768: NEG
63769: PUSH
63770: LD_INT 3
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 3
63779: NEG
63780: PUSH
63781: LD_INT 0
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 3
63790: NEG
63791: PUSH
63792: LD_INT 1
63794: NEG
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 2
63802: NEG
63803: PUSH
63804: LD_INT 0
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 2
63813: NEG
63814: PUSH
63815: LD_INT 1
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 3
63824: NEG
63825: PUSH
63826: LD_INT 1
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 4
63835: NEG
63836: PUSH
63837: LD_INT 0
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 4
63846: NEG
63847: PUSH
63848: LD_INT 1
63850: NEG
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 4
63858: NEG
63859: PUSH
63860: LD_INT 2
63862: NEG
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 2
63870: NEG
63871: PUSH
63872: LD_INT 2
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 4
63881: NEG
63882: PUSH
63883: LD_INT 4
63885: NEG
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 4
63893: NEG
63894: PUSH
63895: LD_INT 5
63897: NEG
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 3
63905: NEG
63906: PUSH
63907: LD_INT 4
63909: NEG
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 3
63917: NEG
63918: PUSH
63919: LD_INT 3
63921: NEG
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 4
63929: NEG
63930: PUSH
63931: LD_INT 3
63933: NEG
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 5
63941: NEG
63942: PUSH
63943: LD_INT 4
63945: NEG
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 5
63953: NEG
63954: PUSH
63955: LD_INT 5
63957: NEG
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 3
63965: NEG
63966: PUSH
63967: LD_INT 5
63969: NEG
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 5
63977: NEG
63978: PUSH
63979: LD_INT 3
63981: NEG
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 0
63989: PUSH
63990: LD_INT 3
63992: NEG
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 0
64000: PUSH
64001: LD_INT 4
64003: NEG
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 1
64011: PUSH
64012: LD_INT 3
64014: NEG
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 1
64022: PUSH
64023: LD_INT 2
64025: NEG
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 0
64033: PUSH
64034: LD_INT 2
64036: NEG
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 1
64044: NEG
64045: PUSH
64046: LD_INT 3
64048: NEG
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 1
64056: NEG
64057: PUSH
64058: LD_INT 4
64060: NEG
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 2
64068: PUSH
64069: LD_INT 2
64071: NEG
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 2
64079: NEG
64080: PUSH
64081: LD_INT 4
64083: NEG
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: LD_INT 4
64091: PUSH
64092: LD_INT 0
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 4
64101: PUSH
64102: LD_INT 1
64104: NEG
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 5
64112: PUSH
64113: LD_INT 0
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 5
64122: PUSH
64123: LD_INT 1
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 4
64132: PUSH
64133: LD_INT 1
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 3
64142: PUSH
64143: LD_INT 0
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 3
64152: PUSH
64153: LD_INT 1
64155: NEG
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 3
64163: PUSH
64164: LD_INT 2
64166: NEG
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 5
64174: PUSH
64175: LD_INT 2
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64229: LD_ADDR_VAR 0 32
64233: PUSH
64234: LD_INT 4
64236: NEG
64237: PUSH
64238: LD_INT 0
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 4
64247: NEG
64248: PUSH
64249: LD_INT 1
64251: NEG
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 3
64259: NEG
64260: PUSH
64261: LD_INT 0
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 3
64270: NEG
64271: PUSH
64272: LD_INT 1
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 4
64281: NEG
64282: PUSH
64283: LD_INT 1
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 5
64292: NEG
64293: PUSH
64294: LD_INT 0
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 5
64303: NEG
64304: PUSH
64305: LD_INT 1
64307: NEG
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 5
64315: NEG
64316: PUSH
64317: LD_INT 2
64319: NEG
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 3
64327: NEG
64328: PUSH
64329: LD_INT 2
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 3
64338: NEG
64339: PUSH
64340: LD_INT 3
64342: NEG
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 3
64350: NEG
64351: PUSH
64352: LD_INT 4
64354: NEG
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 2
64362: NEG
64363: PUSH
64364: LD_INT 3
64366: NEG
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 2
64374: NEG
64375: PUSH
64376: LD_INT 2
64378: NEG
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 3
64386: NEG
64387: PUSH
64388: LD_INT 2
64390: NEG
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 4
64398: NEG
64399: PUSH
64400: LD_INT 3
64402: NEG
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 4
64410: NEG
64411: PUSH
64412: LD_INT 4
64414: NEG
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 2
64422: NEG
64423: PUSH
64424: LD_INT 4
64426: NEG
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 4
64434: NEG
64435: PUSH
64436: LD_INT 2
64438: NEG
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 0
64446: PUSH
64447: LD_INT 4
64449: NEG
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 0
64457: PUSH
64458: LD_INT 5
64460: NEG
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 1
64468: PUSH
64469: LD_INT 4
64471: NEG
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 1
64479: PUSH
64480: LD_INT 3
64482: NEG
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 0
64490: PUSH
64491: LD_INT 3
64493: NEG
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 1
64501: NEG
64502: PUSH
64503: LD_INT 4
64505: NEG
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 1
64513: NEG
64514: PUSH
64515: LD_INT 5
64517: NEG
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 2
64525: PUSH
64526: LD_INT 3
64528: NEG
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 2
64536: NEG
64537: PUSH
64538: LD_INT 5
64540: NEG
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 3
64548: PUSH
64549: LD_INT 0
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 3
64558: PUSH
64559: LD_INT 1
64561: NEG
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 4
64569: PUSH
64570: LD_INT 0
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 4
64579: PUSH
64580: LD_INT 1
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 3
64589: PUSH
64590: LD_INT 1
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 2
64599: PUSH
64600: LD_INT 0
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 2
64609: PUSH
64610: LD_INT 1
64612: NEG
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 2
64620: PUSH
64621: LD_INT 2
64623: NEG
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 4
64631: PUSH
64632: LD_INT 2
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 4
64641: PUSH
64642: LD_INT 4
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 4
64651: PUSH
64652: LD_INT 3
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 5
64661: PUSH
64662: LD_INT 4
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 5
64671: PUSH
64672: LD_INT 5
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 4
64681: PUSH
64682: LD_INT 5
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 3
64691: PUSH
64692: LD_INT 4
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 3
64701: PUSH
64702: LD_INT 3
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 5
64711: PUSH
64712: LD_INT 3
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 3
64721: PUSH
64722: LD_INT 5
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64776: LD_ADDR_VAR 0 33
64780: PUSH
64781: LD_INT 4
64783: NEG
64784: PUSH
64785: LD_INT 4
64787: NEG
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 4
64795: NEG
64796: PUSH
64797: LD_INT 5
64799: NEG
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 3
64807: NEG
64808: PUSH
64809: LD_INT 4
64811: NEG
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 3
64819: NEG
64820: PUSH
64821: LD_INT 3
64823: NEG
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 4
64831: NEG
64832: PUSH
64833: LD_INT 3
64835: NEG
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 5
64843: NEG
64844: PUSH
64845: LD_INT 4
64847: NEG
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 5
64855: NEG
64856: PUSH
64857: LD_INT 5
64859: NEG
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 3
64867: NEG
64868: PUSH
64869: LD_INT 5
64871: NEG
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 5
64879: NEG
64880: PUSH
64881: LD_INT 3
64883: NEG
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 0
64891: PUSH
64892: LD_INT 3
64894: NEG
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 0
64902: PUSH
64903: LD_INT 4
64905: NEG
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 1
64913: PUSH
64914: LD_INT 3
64916: NEG
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 1
64924: PUSH
64925: LD_INT 2
64927: NEG
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 0
64935: PUSH
64936: LD_INT 2
64938: NEG
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: LD_INT 1
64946: NEG
64947: PUSH
64948: LD_INT 3
64950: NEG
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 1
64958: NEG
64959: PUSH
64960: LD_INT 4
64962: NEG
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: LD_INT 2
64970: PUSH
64971: LD_INT 2
64973: NEG
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 2
64981: NEG
64982: PUSH
64983: LD_INT 4
64985: NEG
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 4
64993: PUSH
64994: LD_INT 0
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 4
65003: PUSH
65004: LD_INT 1
65006: NEG
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 5
65014: PUSH
65015: LD_INT 0
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: LD_INT 5
65024: PUSH
65025: LD_INT 1
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 4
65034: PUSH
65035: LD_INT 1
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 3
65044: PUSH
65045: LD_INT 0
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 3
65054: PUSH
65055: LD_INT 1
65057: NEG
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 3
65065: PUSH
65066: LD_INT 2
65068: NEG
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: LD_INT 5
65076: PUSH
65077: LD_INT 2
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 3
65086: PUSH
65087: LD_INT 3
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 3
65096: PUSH
65097: LD_INT 2
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 4
65106: PUSH
65107: LD_INT 3
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: LD_INT 4
65116: PUSH
65117: LD_INT 4
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: LD_INT 3
65126: PUSH
65127: LD_INT 4
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: LD_INT 2
65136: PUSH
65137: LD_INT 3
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 2
65146: PUSH
65147: LD_INT 2
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: LD_INT 4
65156: PUSH
65157: LD_INT 2
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: LD_INT 2
65166: PUSH
65167: LD_INT 4
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 0
65176: PUSH
65177: LD_INT 4
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 0
65186: PUSH
65187: LD_INT 3
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 1
65196: PUSH
65197: LD_INT 4
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 1
65206: PUSH
65207: LD_INT 5
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 0
65216: PUSH
65217: LD_INT 5
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 1
65226: NEG
65227: PUSH
65228: LD_INT 4
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 1
65237: NEG
65238: PUSH
65239: LD_INT 3
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 2
65248: PUSH
65249: LD_INT 5
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 2
65258: NEG
65259: PUSH
65260: LD_INT 3
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65314: LD_ADDR_VAR 0 34
65318: PUSH
65319: LD_INT 0
65321: PUSH
65322: LD_INT 4
65324: NEG
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 0
65332: PUSH
65333: LD_INT 5
65335: NEG
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: LD_INT 1
65343: PUSH
65344: LD_INT 4
65346: NEG
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 1
65354: PUSH
65355: LD_INT 3
65357: NEG
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 0
65365: PUSH
65366: LD_INT 3
65368: NEG
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 1
65376: NEG
65377: PUSH
65378: LD_INT 4
65380: NEG
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 1
65388: NEG
65389: PUSH
65390: LD_INT 5
65392: NEG
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 2
65400: PUSH
65401: LD_INT 3
65403: NEG
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 2
65411: NEG
65412: PUSH
65413: LD_INT 5
65415: NEG
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 3
65423: PUSH
65424: LD_INT 0
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 3
65433: PUSH
65434: LD_INT 1
65436: NEG
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 4
65444: PUSH
65445: LD_INT 0
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 4
65454: PUSH
65455: LD_INT 1
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 3
65464: PUSH
65465: LD_INT 1
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 2
65474: PUSH
65475: LD_INT 0
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 2
65484: PUSH
65485: LD_INT 1
65487: NEG
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 2
65495: PUSH
65496: LD_INT 2
65498: NEG
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 4
65506: PUSH
65507: LD_INT 2
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 4
65516: PUSH
65517: LD_INT 4
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 4
65526: PUSH
65527: LD_INT 3
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 5
65536: PUSH
65537: LD_INT 4
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 5
65546: PUSH
65547: LD_INT 5
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 4
65556: PUSH
65557: LD_INT 5
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 3
65566: PUSH
65567: LD_INT 4
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 3
65576: PUSH
65577: LD_INT 3
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 5
65586: PUSH
65587: LD_INT 3
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 3
65596: PUSH
65597: LD_INT 5
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: LD_INT 0
65606: PUSH
65607: LD_INT 3
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 0
65616: PUSH
65617: LD_INT 2
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 1
65626: PUSH
65627: LD_INT 3
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: LD_INT 1
65636: PUSH
65637: LD_INT 4
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PUSH
65644: LD_INT 0
65646: PUSH
65647: LD_INT 4
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 1
65656: NEG
65657: PUSH
65658: LD_INT 3
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 1
65667: NEG
65668: PUSH
65669: LD_INT 2
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 2
65678: PUSH
65679: LD_INT 4
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 2
65688: NEG
65689: PUSH
65690: LD_INT 2
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 4
65699: NEG
65700: PUSH
65701: LD_INT 0
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 4
65710: NEG
65711: PUSH
65712: LD_INT 1
65714: NEG
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 3
65722: NEG
65723: PUSH
65724: LD_INT 0
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 3
65733: NEG
65734: PUSH
65735: LD_INT 1
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 4
65744: NEG
65745: PUSH
65746: LD_INT 1
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 5
65755: NEG
65756: PUSH
65757: LD_INT 0
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 5
65766: NEG
65767: PUSH
65768: LD_INT 1
65770: NEG
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 5
65778: NEG
65779: PUSH
65780: LD_INT 2
65782: NEG
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 3
65790: NEG
65791: PUSH
65792: LD_INT 2
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: LIST
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: ST_TO_ADDR
// end ; end ;
65846: GO 65849
65848: POP
// case btype of b_depot , b_warehouse :
65849: LD_VAR 0 1
65853: PUSH
65854: LD_INT 0
65856: DOUBLE
65857: EQUAL
65858: IFTRUE 65868
65860: LD_INT 1
65862: DOUBLE
65863: EQUAL
65864: IFTRUE 65868
65866: GO 66069
65868: POP
// case nation of nation_american :
65869: LD_VAR 0 5
65873: PUSH
65874: LD_INT 1
65876: DOUBLE
65877: EQUAL
65878: IFTRUE 65882
65880: GO 65938
65882: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65883: LD_ADDR_VAR 0 9
65887: PUSH
65888: LD_VAR 0 11
65892: PUSH
65893: LD_VAR 0 12
65897: PUSH
65898: LD_VAR 0 13
65902: PUSH
65903: LD_VAR 0 14
65907: PUSH
65908: LD_VAR 0 15
65912: PUSH
65913: LD_VAR 0 16
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: PUSH
65926: LD_VAR 0 4
65930: PUSH
65931: LD_INT 1
65933: PLUS
65934: ARRAY
65935: ST_TO_ADDR
65936: GO 66067
65938: LD_INT 2
65940: DOUBLE
65941: EQUAL
65942: IFTRUE 65946
65944: GO 66002
65946: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65947: LD_ADDR_VAR 0 9
65951: PUSH
65952: LD_VAR 0 17
65956: PUSH
65957: LD_VAR 0 18
65961: PUSH
65962: LD_VAR 0 19
65966: PUSH
65967: LD_VAR 0 20
65971: PUSH
65972: LD_VAR 0 21
65976: PUSH
65977: LD_VAR 0 22
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: PUSH
65990: LD_VAR 0 4
65994: PUSH
65995: LD_INT 1
65997: PLUS
65998: ARRAY
65999: ST_TO_ADDR
66000: GO 66067
66002: LD_INT 3
66004: DOUBLE
66005: EQUAL
66006: IFTRUE 66010
66008: GO 66066
66010: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66011: LD_ADDR_VAR 0 9
66015: PUSH
66016: LD_VAR 0 23
66020: PUSH
66021: LD_VAR 0 24
66025: PUSH
66026: LD_VAR 0 25
66030: PUSH
66031: LD_VAR 0 26
66035: PUSH
66036: LD_VAR 0 27
66040: PUSH
66041: LD_VAR 0 28
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: PUSH
66054: LD_VAR 0 4
66058: PUSH
66059: LD_INT 1
66061: PLUS
66062: ARRAY
66063: ST_TO_ADDR
66064: GO 66067
66066: POP
66067: GO 66622
66069: LD_INT 2
66071: DOUBLE
66072: EQUAL
66073: IFTRUE 66083
66075: LD_INT 3
66077: DOUBLE
66078: EQUAL
66079: IFTRUE 66083
66081: GO 66139
66083: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66084: LD_ADDR_VAR 0 9
66088: PUSH
66089: LD_VAR 0 29
66093: PUSH
66094: LD_VAR 0 30
66098: PUSH
66099: LD_VAR 0 31
66103: PUSH
66104: LD_VAR 0 32
66108: PUSH
66109: LD_VAR 0 33
66113: PUSH
66114: LD_VAR 0 34
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: PUSH
66127: LD_VAR 0 4
66131: PUSH
66132: LD_INT 1
66134: PLUS
66135: ARRAY
66136: ST_TO_ADDR
66137: GO 66622
66139: LD_INT 16
66141: DOUBLE
66142: EQUAL
66143: IFTRUE 66201
66145: LD_INT 17
66147: DOUBLE
66148: EQUAL
66149: IFTRUE 66201
66151: LD_INT 18
66153: DOUBLE
66154: EQUAL
66155: IFTRUE 66201
66157: LD_INT 19
66159: DOUBLE
66160: EQUAL
66161: IFTRUE 66201
66163: LD_INT 22
66165: DOUBLE
66166: EQUAL
66167: IFTRUE 66201
66169: LD_INT 20
66171: DOUBLE
66172: EQUAL
66173: IFTRUE 66201
66175: LD_INT 21
66177: DOUBLE
66178: EQUAL
66179: IFTRUE 66201
66181: LD_INT 23
66183: DOUBLE
66184: EQUAL
66185: IFTRUE 66201
66187: LD_INT 24
66189: DOUBLE
66190: EQUAL
66191: IFTRUE 66201
66193: LD_INT 25
66195: DOUBLE
66196: EQUAL
66197: IFTRUE 66201
66199: GO 66257
66201: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66202: LD_ADDR_VAR 0 9
66206: PUSH
66207: LD_VAR 0 35
66211: PUSH
66212: LD_VAR 0 36
66216: PUSH
66217: LD_VAR 0 37
66221: PUSH
66222: LD_VAR 0 38
66226: PUSH
66227: LD_VAR 0 39
66231: PUSH
66232: LD_VAR 0 40
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: PUSH
66245: LD_VAR 0 4
66249: PUSH
66250: LD_INT 1
66252: PLUS
66253: ARRAY
66254: ST_TO_ADDR
66255: GO 66622
66257: LD_INT 6
66259: DOUBLE
66260: EQUAL
66261: IFTRUE 66313
66263: LD_INT 7
66265: DOUBLE
66266: EQUAL
66267: IFTRUE 66313
66269: LD_INT 8
66271: DOUBLE
66272: EQUAL
66273: IFTRUE 66313
66275: LD_INT 13
66277: DOUBLE
66278: EQUAL
66279: IFTRUE 66313
66281: LD_INT 12
66283: DOUBLE
66284: EQUAL
66285: IFTRUE 66313
66287: LD_INT 15
66289: DOUBLE
66290: EQUAL
66291: IFTRUE 66313
66293: LD_INT 11
66295: DOUBLE
66296: EQUAL
66297: IFTRUE 66313
66299: LD_INT 14
66301: DOUBLE
66302: EQUAL
66303: IFTRUE 66313
66305: LD_INT 10
66307: DOUBLE
66308: EQUAL
66309: IFTRUE 66313
66311: GO 66369
66313: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66314: LD_ADDR_VAR 0 9
66318: PUSH
66319: LD_VAR 0 41
66323: PUSH
66324: LD_VAR 0 42
66328: PUSH
66329: LD_VAR 0 43
66333: PUSH
66334: LD_VAR 0 44
66338: PUSH
66339: LD_VAR 0 45
66343: PUSH
66344: LD_VAR 0 46
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: PUSH
66357: LD_VAR 0 4
66361: PUSH
66362: LD_INT 1
66364: PLUS
66365: ARRAY
66366: ST_TO_ADDR
66367: GO 66622
66369: LD_INT 36
66371: DOUBLE
66372: EQUAL
66373: IFTRUE 66377
66375: GO 66433
66377: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66378: LD_ADDR_VAR 0 9
66382: PUSH
66383: LD_VAR 0 47
66387: PUSH
66388: LD_VAR 0 48
66392: PUSH
66393: LD_VAR 0 49
66397: PUSH
66398: LD_VAR 0 50
66402: PUSH
66403: LD_VAR 0 51
66407: PUSH
66408: LD_VAR 0 52
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: PUSH
66421: LD_VAR 0 4
66425: PUSH
66426: LD_INT 1
66428: PLUS
66429: ARRAY
66430: ST_TO_ADDR
66431: GO 66622
66433: LD_INT 4
66435: DOUBLE
66436: EQUAL
66437: IFTRUE 66459
66439: LD_INT 5
66441: DOUBLE
66442: EQUAL
66443: IFTRUE 66459
66445: LD_INT 34
66447: DOUBLE
66448: EQUAL
66449: IFTRUE 66459
66451: LD_INT 37
66453: DOUBLE
66454: EQUAL
66455: IFTRUE 66459
66457: GO 66515
66459: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66460: LD_ADDR_VAR 0 9
66464: PUSH
66465: LD_VAR 0 53
66469: PUSH
66470: LD_VAR 0 54
66474: PUSH
66475: LD_VAR 0 55
66479: PUSH
66480: LD_VAR 0 56
66484: PUSH
66485: LD_VAR 0 57
66489: PUSH
66490: LD_VAR 0 58
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: LIST
66501: LIST
66502: PUSH
66503: LD_VAR 0 4
66507: PUSH
66508: LD_INT 1
66510: PLUS
66511: ARRAY
66512: ST_TO_ADDR
66513: GO 66622
66515: LD_INT 31
66517: DOUBLE
66518: EQUAL
66519: IFTRUE 66565
66521: LD_INT 32
66523: DOUBLE
66524: EQUAL
66525: IFTRUE 66565
66527: LD_INT 33
66529: DOUBLE
66530: EQUAL
66531: IFTRUE 66565
66533: LD_INT 27
66535: DOUBLE
66536: EQUAL
66537: IFTRUE 66565
66539: LD_INT 26
66541: DOUBLE
66542: EQUAL
66543: IFTRUE 66565
66545: LD_INT 28
66547: DOUBLE
66548: EQUAL
66549: IFTRUE 66565
66551: LD_INT 29
66553: DOUBLE
66554: EQUAL
66555: IFTRUE 66565
66557: LD_INT 30
66559: DOUBLE
66560: EQUAL
66561: IFTRUE 66565
66563: GO 66621
66565: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66566: LD_ADDR_VAR 0 9
66570: PUSH
66571: LD_VAR 0 59
66575: PUSH
66576: LD_VAR 0 60
66580: PUSH
66581: LD_VAR 0 61
66585: PUSH
66586: LD_VAR 0 62
66590: PUSH
66591: LD_VAR 0 63
66595: PUSH
66596: LD_VAR 0 64
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: PUSH
66609: LD_VAR 0 4
66613: PUSH
66614: LD_INT 1
66616: PLUS
66617: ARRAY
66618: ST_TO_ADDR
66619: GO 66622
66621: POP
// temp_list2 = [ ] ;
66622: LD_ADDR_VAR 0 10
66626: PUSH
66627: EMPTY
66628: ST_TO_ADDR
// for i in temp_list do
66629: LD_ADDR_VAR 0 8
66633: PUSH
66634: LD_VAR 0 9
66638: PUSH
66639: FOR_IN
66640: IFFALSE 66692
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66642: LD_ADDR_VAR 0 10
66646: PUSH
66647: LD_VAR 0 10
66651: PUSH
66652: LD_VAR 0 8
66656: PUSH
66657: LD_INT 1
66659: ARRAY
66660: PUSH
66661: LD_VAR 0 2
66665: PLUS
66666: PUSH
66667: LD_VAR 0 8
66671: PUSH
66672: LD_INT 2
66674: ARRAY
66675: PUSH
66676: LD_VAR 0 3
66680: PLUS
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: EMPTY
66687: LIST
66688: ADD
66689: ST_TO_ADDR
66690: GO 66639
66692: POP
66693: POP
// result = temp_list2 ;
66694: LD_ADDR_VAR 0 7
66698: PUSH
66699: LD_VAR 0 10
66703: ST_TO_ADDR
// end ;
66704: LD_VAR 0 7
66708: RET
// export function EnemyInRange ( unit , dist ) ; begin
66709: LD_INT 0
66711: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66712: LD_ADDR_VAR 0 3
66716: PUSH
66717: LD_VAR 0 1
66721: PPUSH
66722: CALL_OW 255
66726: PPUSH
66727: LD_VAR 0 1
66731: PPUSH
66732: CALL_OW 250
66736: PPUSH
66737: LD_VAR 0 1
66741: PPUSH
66742: CALL_OW 251
66746: PPUSH
66747: LD_VAR 0 2
66751: PPUSH
66752: CALL 40105 0 4
66756: PUSH
66757: LD_INT 4
66759: ARRAY
66760: ST_TO_ADDR
// end ;
66761: LD_VAR 0 3
66765: RET
// export function PlayerSeeMe ( unit ) ; begin
66766: LD_INT 0
66768: PPUSH
// result := See ( your_side , unit ) ;
66769: LD_ADDR_VAR 0 2
66773: PUSH
66774: LD_OWVAR 2
66778: PPUSH
66779: LD_VAR 0 1
66783: PPUSH
66784: CALL_OW 292
66788: ST_TO_ADDR
// end ;
66789: LD_VAR 0 2
66793: RET
// export function ReverseDir ( unit ) ; begin
66794: LD_INT 0
66796: PPUSH
// if not unit then
66797: LD_VAR 0 1
66801: NOT
66802: IFFALSE 66806
// exit ;
66804: GO 66829
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66806: LD_ADDR_VAR 0 2
66810: PUSH
66811: LD_VAR 0 1
66815: PPUSH
66816: CALL_OW 254
66820: PUSH
66821: LD_INT 3
66823: PLUS
66824: PUSH
66825: LD_INT 6
66827: MOD
66828: ST_TO_ADDR
// end ;
66829: LD_VAR 0 2
66833: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
66834: LD_INT 0
66836: PPUSH
66837: PPUSH
66838: PPUSH
66839: PPUSH
66840: PPUSH
// if not hexes then
66841: LD_VAR 0 2
66845: NOT
66846: IFFALSE 66850
// exit ;
66848: GO 66998
// dist := 9999 ;
66850: LD_ADDR_VAR 0 5
66854: PUSH
66855: LD_INT 9999
66857: ST_TO_ADDR
// for i = 1 to hexes do
66858: LD_ADDR_VAR 0 4
66862: PUSH
66863: DOUBLE
66864: LD_INT 1
66866: DEC
66867: ST_TO_ADDR
66868: LD_VAR 0 2
66872: PUSH
66873: FOR_TO
66874: IFFALSE 66986
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
66876: LD_VAR 0 1
66880: PPUSH
66881: LD_VAR 0 2
66885: PUSH
66886: LD_VAR 0 4
66890: ARRAY
66891: PUSH
66892: LD_INT 1
66894: ARRAY
66895: PPUSH
66896: LD_VAR 0 2
66900: PUSH
66901: LD_VAR 0 4
66905: ARRAY
66906: PUSH
66907: LD_INT 2
66909: ARRAY
66910: PPUSH
66911: CALL_OW 297
66915: PUSH
66916: LD_VAR 0 5
66920: LESS
66921: IFFALSE 66984
// begin hex := hexes [ i ] ;
66923: LD_ADDR_VAR 0 7
66927: PUSH
66928: LD_VAR 0 2
66932: PUSH
66933: LD_VAR 0 4
66937: ARRAY
66938: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66939: LD_ADDR_VAR 0 5
66943: PUSH
66944: LD_VAR 0 1
66948: PPUSH
66949: LD_VAR 0 2
66953: PUSH
66954: LD_VAR 0 4
66958: ARRAY
66959: PUSH
66960: LD_INT 1
66962: ARRAY
66963: PPUSH
66964: LD_VAR 0 2
66968: PUSH
66969: LD_VAR 0 4
66973: ARRAY
66974: PUSH
66975: LD_INT 2
66977: ARRAY
66978: PPUSH
66979: CALL_OW 297
66983: ST_TO_ADDR
// end ; end ;
66984: GO 66873
66986: POP
66987: POP
// result := hex ;
66988: LD_ADDR_VAR 0 3
66992: PUSH
66993: LD_VAR 0 7
66997: ST_TO_ADDR
// end ;
66998: LD_VAR 0 3
67002: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67003: LD_INT 0
67005: PPUSH
67006: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67007: LD_VAR 0 1
67011: NOT
67012: PUSH
67013: LD_VAR 0 1
67017: PUSH
67018: LD_INT 21
67020: PUSH
67021: LD_INT 2
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 23
67030: PUSH
67031: LD_INT 2
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PPUSH
67042: CALL_OW 69
67046: IN
67047: NOT
67048: OR
67049: IFFALSE 67053
// exit ;
67051: GO 67100
// for i = 1 to 3 do
67053: LD_ADDR_VAR 0 3
67057: PUSH
67058: DOUBLE
67059: LD_INT 1
67061: DEC
67062: ST_TO_ADDR
67063: LD_INT 3
67065: PUSH
67066: FOR_TO
67067: IFFALSE 67098
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67069: LD_VAR 0 1
67073: PPUSH
67074: CALL_OW 250
67078: PPUSH
67079: LD_VAR 0 1
67083: PPUSH
67084: CALL_OW 251
67088: PPUSH
67089: LD_INT 1
67091: PPUSH
67092: CALL_OW 453
67096: GO 67066
67098: POP
67099: POP
// end ;
67100: LD_VAR 0 2
67104: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67105: LD_INT 0
67107: PPUSH
67108: PPUSH
67109: PPUSH
67110: PPUSH
67111: PPUSH
67112: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
67113: LD_VAR 0 1
67117: NOT
67118: PUSH
67119: LD_VAR 0 2
67123: NOT
67124: OR
67125: PUSH
67126: LD_VAR 0 1
67130: PPUSH
67131: CALL_OW 314
67135: OR
67136: IFFALSE 67140
// exit ;
67138: GO 67581
// x := GetX ( enemy_unit ) ;
67140: LD_ADDR_VAR 0 7
67144: PUSH
67145: LD_VAR 0 2
67149: PPUSH
67150: CALL_OW 250
67154: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67155: LD_ADDR_VAR 0 8
67159: PUSH
67160: LD_VAR 0 2
67164: PPUSH
67165: CALL_OW 251
67169: ST_TO_ADDR
// if not x or not y then
67170: LD_VAR 0 7
67174: NOT
67175: PUSH
67176: LD_VAR 0 8
67180: NOT
67181: OR
67182: IFFALSE 67186
// exit ;
67184: GO 67581
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67186: LD_ADDR_VAR 0 6
67190: PUSH
67191: LD_VAR 0 7
67195: PPUSH
67196: LD_INT 0
67198: PPUSH
67199: LD_INT 4
67201: PPUSH
67202: CALL_OW 272
67206: PUSH
67207: LD_VAR 0 8
67211: PPUSH
67212: LD_INT 0
67214: PPUSH
67215: LD_INT 4
67217: PPUSH
67218: CALL_OW 273
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: LD_VAR 0 7
67231: PPUSH
67232: LD_INT 1
67234: PPUSH
67235: LD_INT 4
67237: PPUSH
67238: CALL_OW 272
67242: PUSH
67243: LD_VAR 0 8
67247: PPUSH
67248: LD_INT 1
67250: PPUSH
67251: LD_INT 4
67253: PPUSH
67254: CALL_OW 273
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: LD_VAR 0 7
67267: PPUSH
67268: LD_INT 2
67270: PPUSH
67271: LD_INT 4
67273: PPUSH
67274: CALL_OW 272
67278: PUSH
67279: LD_VAR 0 8
67283: PPUSH
67284: LD_INT 2
67286: PPUSH
67287: LD_INT 4
67289: PPUSH
67290: CALL_OW 273
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_VAR 0 7
67303: PPUSH
67304: LD_INT 3
67306: PPUSH
67307: LD_INT 4
67309: PPUSH
67310: CALL_OW 272
67314: PUSH
67315: LD_VAR 0 8
67319: PPUSH
67320: LD_INT 3
67322: PPUSH
67323: LD_INT 4
67325: PPUSH
67326: CALL_OW 273
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: LD_VAR 0 7
67339: PPUSH
67340: LD_INT 4
67342: PPUSH
67343: LD_INT 4
67345: PPUSH
67346: CALL_OW 272
67350: PUSH
67351: LD_VAR 0 8
67355: PPUSH
67356: LD_INT 4
67358: PPUSH
67359: LD_INT 4
67361: PPUSH
67362: CALL_OW 273
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_VAR 0 7
67375: PPUSH
67376: LD_INT 5
67378: PPUSH
67379: LD_INT 4
67381: PPUSH
67382: CALL_OW 272
67386: PUSH
67387: LD_VAR 0 8
67391: PPUSH
67392: LD_INT 5
67394: PPUSH
67395: LD_INT 4
67397: PPUSH
67398: CALL_OW 273
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: ST_TO_ADDR
// for i = tmp downto 1 do
67415: LD_ADDR_VAR 0 4
67419: PUSH
67420: DOUBLE
67421: LD_VAR 0 6
67425: INC
67426: ST_TO_ADDR
67427: LD_INT 1
67429: PUSH
67430: FOR_DOWNTO
67431: IFFALSE 67532
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67433: LD_VAR 0 6
67437: PUSH
67438: LD_VAR 0 4
67442: ARRAY
67443: PUSH
67444: LD_INT 1
67446: ARRAY
67447: PPUSH
67448: LD_VAR 0 6
67452: PUSH
67453: LD_VAR 0 4
67457: ARRAY
67458: PUSH
67459: LD_INT 2
67461: ARRAY
67462: PPUSH
67463: CALL_OW 488
67467: NOT
67468: PUSH
67469: LD_VAR 0 6
67473: PUSH
67474: LD_VAR 0 4
67478: ARRAY
67479: PUSH
67480: LD_INT 1
67482: ARRAY
67483: PPUSH
67484: LD_VAR 0 6
67488: PUSH
67489: LD_VAR 0 4
67493: ARRAY
67494: PUSH
67495: LD_INT 2
67497: ARRAY
67498: PPUSH
67499: CALL_OW 428
67503: PUSH
67504: LD_INT 0
67506: NONEQUAL
67507: OR
67508: IFFALSE 67530
// tmp := Delete ( tmp , i ) ;
67510: LD_ADDR_VAR 0 6
67514: PUSH
67515: LD_VAR 0 6
67519: PPUSH
67520: LD_VAR 0 4
67524: PPUSH
67525: CALL_OW 3
67529: ST_TO_ADDR
67530: GO 67430
67532: POP
67533: POP
// j := GetClosestHex ( unit , tmp ) ;
67534: LD_ADDR_VAR 0 5
67538: PUSH
67539: LD_VAR 0 1
67543: PPUSH
67544: LD_VAR 0 6
67548: PPUSH
67549: CALL 66834 0 2
67553: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67554: LD_VAR 0 1
67558: PPUSH
67559: LD_VAR 0 5
67563: PUSH
67564: LD_INT 1
67566: ARRAY
67567: PPUSH
67568: LD_VAR 0 5
67572: PUSH
67573: LD_INT 2
67575: ARRAY
67576: PPUSH
67577: CALL_OW 111
// end ;
67581: LD_VAR 0 3
67585: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67586: LD_INT 0
67588: PPUSH
67589: PPUSH
67590: PPUSH
// uc_side = 0 ;
67591: LD_ADDR_OWVAR 20
67595: PUSH
67596: LD_INT 0
67598: ST_TO_ADDR
// uc_nation = 0 ;
67599: LD_ADDR_OWVAR 21
67603: PUSH
67604: LD_INT 0
67606: ST_TO_ADDR
// InitHc_All ( ) ;
67607: CALL_OW 584
// InitVc ;
67611: CALL_OW 20
// if mastodonts then
67615: LD_VAR 0 6
67619: IFFALSE 67686
// for i = 1 to mastodonts do
67621: LD_ADDR_VAR 0 11
67625: PUSH
67626: DOUBLE
67627: LD_INT 1
67629: DEC
67630: ST_TO_ADDR
67631: LD_VAR 0 6
67635: PUSH
67636: FOR_TO
67637: IFFALSE 67684
// begin vc_chassis := 31 ;
67639: LD_ADDR_OWVAR 37
67643: PUSH
67644: LD_INT 31
67646: ST_TO_ADDR
// vc_control := control_rider ;
67647: LD_ADDR_OWVAR 38
67651: PUSH
67652: LD_INT 4
67654: ST_TO_ADDR
// animal := CreateVehicle ;
67655: LD_ADDR_VAR 0 12
67659: PUSH
67660: CALL_OW 45
67664: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67665: LD_VAR 0 12
67669: PPUSH
67670: LD_VAR 0 8
67674: PPUSH
67675: LD_INT 0
67677: PPUSH
67678: CALL 69874 0 3
// end ;
67682: GO 67636
67684: POP
67685: POP
// if horses then
67686: LD_VAR 0 5
67690: IFFALSE 67757
// for i = 1 to horses do
67692: LD_ADDR_VAR 0 11
67696: PUSH
67697: DOUBLE
67698: LD_INT 1
67700: DEC
67701: ST_TO_ADDR
67702: LD_VAR 0 5
67706: PUSH
67707: FOR_TO
67708: IFFALSE 67755
// begin hc_class := 21 ;
67710: LD_ADDR_OWVAR 28
67714: PUSH
67715: LD_INT 21
67717: ST_TO_ADDR
// hc_gallery :=  ;
67718: LD_ADDR_OWVAR 33
67722: PUSH
67723: LD_STRING 
67725: ST_TO_ADDR
// animal := CreateHuman ;
67726: LD_ADDR_VAR 0 12
67730: PUSH
67731: CALL_OW 44
67735: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67736: LD_VAR 0 12
67740: PPUSH
67741: LD_VAR 0 8
67745: PPUSH
67746: LD_INT 0
67748: PPUSH
67749: CALL 69874 0 3
// end ;
67753: GO 67707
67755: POP
67756: POP
// if birds then
67757: LD_VAR 0 1
67761: IFFALSE 67828
// for i = 1 to birds do
67763: LD_ADDR_VAR 0 11
67767: PUSH
67768: DOUBLE
67769: LD_INT 1
67771: DEC
67772: ST_TO_ADDR
67773: LD_VAR 0 1
67777: PUSH
67778: FOR_TO
67779: IFFALSE 67826
// begin hc_class = 18 ;
67781: LD_ADDR_OWVAR 28
67785: PUSH
67786: LD_INT 18
67788: ST_TO_ADDR
// hc_gallery =  ;
67789: LD_ADDR_OWVAR 33
67793: PUSH
67794: LD_STRING 
67796: ST_TO_ADDR
// animal := CreateHuman ;
67797: LD_ADDR_VAR 0 12
67801: PUSH
67802: CALL_OW 44
67806: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67807: LD_VAR 0 12
67811: PPUSH
67812: LD_VAR 0 8
67816: PPUSH
67817: LD_INT 0
67819: PPUSH
67820: CALL 69874 0 3
// end ;
67824: GO 67778
67826: POP
67827: POP
// if tigers then
67828: LD_VAR 0 2
67832: IFFALSE 67916
// for i = 1 to tigers do
67834: LD_ADDR_VAR 0 11
67838: PUSH
67839: DOUBLE
67840: LD_INT 1
67842: DEC
67843: ST_TO_ADDR
67844: LD_VAR 0 2
67848: PUSH
67849: FOR_TO
67850: IFFALSE 67914
// begin hc_class = class_tiger ;
67852: LD_ADDR_OWVAR 28
67856: PUSH
67857: LD_INT 14
67859: ST_TO_ADDR
// hc_gallery =  ;
67860: LD_ADDR_OWVAR 33
67864: PUSH
67865: LD_STRING 
67867: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67868: LD_ADDR_OWVAR 35
67872: PUSH
67873: LD_INT 7
67875: NEG
67876: PPUSH
67877: LD_INT 7
67879: PPUSH
67880: CALL_OW 12
67884: ST_TO_ADDR
// animal := CreateHuman ;
67885: LD_ADDR_VAR 0 12
67889: PUSH
67890: CALL_OW 44
67894: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67895: LD_VAR 0 12
67899: PPUSH
67900: LD_VAR 0 8
67904: PPUSH
67905: LD_INT 0
67907: PPUSH
67908: CALL 69874 0 3
// end ;
67912: GO 67849
67914: POP
67915: POP
// if apemans then
67916: LD_VAR 0 3
67920: IFFALSE 68043
// for i = 1 to apemans do
67922: LD_ADDR_VAR 0 11
67926: PUSH
67927: DOUBLE
67928: LD_INT 1
67930: DEC
67931: ST_TO_ADDR
67932: LD_VAR 0 3
67936: PUSH
67937: FOR_TO
67938: IFFALSE 68041
// begin hc_class = class_apeman ;
67940: LD_ADDR_OWVAR 28
67944: PUSH
67945: LD_INT 12
67947: ST_TO_ADDR
// hc_gallery =  ;
67948: LD_ADDR_OWVAR 33
67952: PUSH
67953: LD_STRING 
67955: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67956: LD_ADDR_OWVAR 35
67960: PUSH
67961: LD_INT 2
67963: NEG
67964: PPUSH
67965: LD_INT 2
67967: PPUSH
67968: CALL_OW 12
67972: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67973: LD_ADDR_OWVAR 31
67977: PUSH
67978: LD_INT 1
67980: PPUSH
67981: LD_INT 3
67983: PPUSH
67984: CALL_OW 12
67988: PUSH
67989: LD_INT 1
67991: PPUSH
67992: LD_INT 3
67994: PPUSH
67995: CALL_OW 12
67999: PUSH
68000: LD_INT 0
68002: PUSH
68003: LD_INT 0
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: LIST
68010: LIST
68011: ST_TO_ADDR
// animal := CreateHuman ;
68012: LD_ADDR_VAR 0 12
68016: PUSH
68017: CALL_OW 44
68021: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68022: LD_VAR 0 12
68026: PPUSH
68027: LD_VAR 0 8
68031: PPUSH
68032: LD_INT 0
68034: PPUSH
68035: CALL 69874 0 3
// end ;
68039: GO 67937
68041: POP
68042: POP
// if enchidnas then
68043: LD_VAR 0 4
68047: IFFALSE 68114
// for i = 1 to enchidnas do
68049: LD_ADDR_VAR 0 11
68053: PUSH
68054: DOUBLE
68055: LD_INT 1
68057: DEC
68058: ST_TO_ADDR
68059: LD_VAR 0 4
68063: PUSH
68064: FOR_TO
68065: IFFALSE 68112
// begin hc_class = 13 ;
68067: LD_ADDR_OWVAR 28
68071: PUSH
68072: LD_INT 13
68074: ST_TO_ADDR
// hc_gallery =  ;
68075: LD_ADDR_OWVAR 33
68079: PUSH
68080: LD_STRING 
68082: ST_TO_ADDR
// animal := CreateHuman ;
68083: LD_ADDR_VAR 0 12
68087: PUSH
68088: CALL_OW 44
68092: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68093: LD_VAR 0 12
68097: PPUSH
68098: LD_VAR 0 8
68102: PPUSH
68103: LD_INT 0
68105: PPUSH
68106: CALL 69874 0 3
// end ;
68110: GO 68064
68112: POP
68113: POP
// if fishes then
68114: LD_VAR 0 7
68118: IFFALSE 68185
// for i = 1 to fishes do
68120: LD_ADDR_VAR 0 11
68124: PUSH
68125: DOUBLE
68126: LD_INT 1
68128: DEC
68129: ST_TO_ADDR
68130: LD_VAR 0 7
68134: PUSH
68135: FOR_TO
68136: IFFALSE 68183
// begin hc_class = 20 ;
68138: LD_ADDR_OWVAR 28
68142: PUSH
68143: LD_INT 20
68145: ST_TO_ADDR
// hc_gallery =  ;
68146: LD_ADDR_OWVAR 33
68150: PUSH
68151: LD_STRING 
68153: ST_TO_ADDR
// animal := CreateHuman ;
68154: LD_ADDR_VAR 0 12
68158: PUSH
68159: CALL_OW 44
68163: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68164: LD_VAR 0 12
68168: PPUSH
68169: LD_VAR 0 9
68173: PPUSH
68174: LD_INT 0
68176: PPUSH
68177: CALL 69874 0 3
// end ;
68181: GO 68135
68183: POP
68184: POP
// end ;
68185: LD_VAR 0 10
68189: RET
// export function WantHeal ( sci , unit ) ; begin
68190: LD_INT 0
68192: PPUSH
// if GetTaskList ( sci ) > 0 then
68193: LD_VAR 0 1
68197: PPUSH
68198: CALL_OW 437
68202: PUSH
68203: LD_INT 0
68205: GREATER
68206: IFFALSE 68276
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68208: LD_VAR 0 1
68212: PPUSH
68213: CALL_OW 437
68217: PUSH
68218: LD_INT 1
68220: ARRAY
68221: PUSH
68222: LD_INT 1
68224: ARRAY
68225: PUSH
68226: LD_STRING l
68228: EQUAL
68229: PUSH
68230: LD_VAR 0 1
68234: PPUSH
68235: CALL_OW 437
68239: PUSH
68240: LD_INT 1
68242: ARRAY
68243: PUSH
68244: LD_INT 4
68246: ARRAY
68247: PUSH
68248: LD_VAR 0 2
68252: EQUAL
68253: AND
68254: IFFALSE 68266
// result := true else
68256: LD_ADDR_VAR 0 3
68260: PUSH
68261: LD_INT 1
68263: ST_TO_ADDR
68264: GO 68274
// result := false ;
68266: LD_ADDR_VAR 0 3
68270: PUSH
68271: LD_INT 0
68273: ST_TO_ADDR
// end else
68274: GO 68284
// result := false ;
68276: LD_ADDR_VAR 0 3
68280: PUSH
68281: LD_INT 0
68283: ST_TO_ADDR
// end ;
68284: LD_VAR 0 3
68288: RET
// export function HealTarget ( sci ) ; begin
68289: LD_INT 0
68291: PPUSH
// if not sci then
68292: LD_VAR 0 1
68296: NOT
68297: IFFALSE 68301
// exit ;
68299: GO 68366
// result := 0 ;
68301: LD_ADDR_VAR 0 2
68305: PUSH
68306: LD_INT 0
68308: ST_TO_ADDR
// if GetTaskList ( sci ) then
68309: LD_VAR 0 1
68313: PPUSH
68314: CALL_OW 437
68318: IFFALSE 68366
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68320: LD_VAR 0 1
68324: PPUSH
68325: CALL_OW 437
68329: PUSH
68330: LD_INT 1
68332: ARRAY
68333: PUSH
68334: LD_INT 1
68336: ARRAY
68337: PUSH
68338: LD_STRING l
68340: EQUAL
68341: IFFALSE 68366
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68343: LD_ADDR_VAR 0 2
68347: PUSH
68348: LD_VAR 0 1
68352: PPUSH
68353: CALL_OW 437
68357: PUSH
68358: LD_INT 1
68360: ARRAY
68361: PUSH
68362: LD_INT 4
68364: ARRAY
68365: ST_TO_ADDR
// end ;
68366: LD_VAR 0 2
68370: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68371: LD_INT 0
68373: PPUSH
68374: PPUSH
68375: PPUSH
68376: PPUSH
// if not base_units then
68377: LD_VAR 0 1
68381: NOT
68382: IFFALSE 68386
// exit ;
68384: GO 68473
// result := false ;
68386: LD_ADDR_VAR 0 2
68390: PUSH
68391: LD_INT 0
68393: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68394: LD_ADDR_VAR 0 5
68398: PUSH
68399: LD_VAR 0 1
68403: PPUSH
68404: LD_INT 21
68406: PUSH
68407: LD_INT 3
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: PPUSH
68414: CALL_OW 72
68418: ST_TO_ADDR
// if not tmp then
68419: LD_VAR 0 5
68423: NOT
68424: IFFALSE 68428
// exit ;
68426: GO 68473
// for i in tmp do
68428: LD_ADDR_VAR 0 3
68432: PUSH
68433: LD_VAR 0 5
68437: PUSH
68438: FOR_IN
68439: IFFALSE 68471
// begin result := EnemyInRange ( i , 22 ) ;
68441: LD_ADDR_VAR 0 2
68445: PUSH
68446: LD_VAR 0 3
68450: PPUSH
68451: LD_INT 22
68453: PPUSH
68454: CALL 66709 0 2
68458: ST_TO_ADDR
// if result then
68459: LD_VAR 0 2
68463: IFFALSE 68469
// exit ;
68465: POP
68466: POP
68467: GO 68473
// end ;
68469: GO 68438
68471: POP
68472: POP
// end ;
68473: LD_VAR 0 2
68477: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
68478: LD_INT 0
68480: PPUSH
68481: PPUSH
// if not units then
68482: LD_VAR 0 1
68486: NOT
68487: IFFALSE 68491
// exit ;
68489: GO 68561
// result := [ ] ;
68491: LD_ADDR_VAR 0 3
68495: PUSH
68496: EMPTY
68497: ST_TO_ADDR
// for i in units do
68498: LD_ADDR_VAR 0 4
68502: PUSH
68503: LD_VAR 0 1
68507: PUSH
68508: FOR_IN
68509: IFFALSE 68559
// if GetTag ( i ) = tag then
68511: LD_VAR 0 4
68515: PPUSH
68516: CALL_OW 110
68520: PUSH
68521: LD_VAR 0 2
68525: EQUAL
68526: IFFALSE 68557
// result := Replace ( result , result + 1 , i ) ;
68528: LD_ADDR_VAR 0 3
68532: PUSH
68533: LD_VAR 0 3
68537: PPUSH
68538: LD_VAR 0 3
68542: PUSH
68543: LD_INT 1
68545: PLUS
68546: PPUSH
68547: LD_VAR 0 4
68551: PPUSH
68552: CALL_OW 1
68556: ST_TO_ADDR
68557: GO 68508
68559: POP
68560: POP
// end ;
68561: LD_VAR 0 3
68565: RET
// export function IsDriver ( un ) ; begin
68566: LD_INT 0
68568: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
68569: LD_ADDR_VAR 0 2
68573: PUSH
68574: LD_VAR 0 1
68578: PUSH
68579: LD_INT 55
68581: PUSH
68582: EMPTY
68583: LIST
68584: PPUSH
68585: CALL_OW 69
68589: IN
68590: ST_TO_ADDR
// end ;
68591: LD_VAR 0 2
68595: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68596: LD_INT 0
68598: PPUSH
68599: PPUSH
// list := [ ] ;
68600: LD_ADDR_VAR 0 5
68604: PUSH
68605: EMPTY
68606: ST_TO_ADDR
// case d of 0 :
68607: LD_VAR 0 3
68611: PUSH
68612: LD_INT 0
68614: DOUBLE
68615: EQUAL
68616: IFTRUE 68620
68618: GO 68753
68620: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68621: LD_ADDR_VAR 0 5
68625: PUSH
68626: LD_VAR 0 1
68630: PUSH
68631: LD_INT 4
68633: MINUS
68634: PUSH
68635: LD_VAR 0 2
68639: PUSH
68640: LD_INT 4
68642: MINUS
68643: PUSH
68644: LD_INT 2
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: LIST
68651: PUSH
68652: LD_VAR 0 1
68656: PUSH
68657: LD_INT 3
68659: MINUS
68660: PUSH
68661: LD_VAR 0 2
68665: PUSH
68666: LD_INT 1
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: LIST
68673: PUSH
68674: LD_VAR 0 1
68678: PUSH
68679: LD_INT 4
68681: PLUS
68682: PUSH
68683: LD_VAR 0 2
68687: PUSH
68688: LD_INT 4
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: LIST
68695: PUSH
68696: LD_VAR 0 1
68700: PUSH
68701: LD_INT 3
68703: PLUS
68704: PUSH
68705: LD_VAR 0 2
68709: PUSH
68710: LD_INT 3
68712: PLUS
68713: PUSH
68714: LD_INT 5
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: LIST
68721: PUSH
68722: LD_VAR 0 1
68726: PUSH
68727: LD_VAR 0 2
68731: PUSH
68732: LD_INT 4
68734: PLUS
68735: PUSH
68736: LD_INT 0
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: LIST
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: ST_TO_ADDR
// end ; 1 :
68751: GO 69451
68753: LD_INT 1
68755: DOUBLE
68756: EQUAL
68757: IFTRUE 68761
68759: GO 68894
68761: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68762: LD_ADDR_VAR 0 5
68766: PUSH
68767: LD_VAR 0 1
68771: PUSH
68772: LD_VAR 0 2
68776: PUSH
68777: LD_INT 4
68779: MINUS
68780: PUSH
68781: LD_INT 3
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: LIST
68788: PUSH
68789: LD_VAR 0 1
68793: PUSH
68794: LD_INT 3
68796: MINUS
68797: PUSH
68798: LD_VAR 0 2
68802: PUSH
68803: LD_INT 3
68805: MINUS
68806: PUSH
68807: LD_INT 2
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: LIST
68814: PUSH
68815: LD_VAR 0 1
68819: PUSH
68820: LD_INT 4
68822: MINUS
68823: PUSH
68824: LD_VAR 0 2
68828: PUSH
68829: LD_INT 1
68831: PUSH
68832: EMPTY
68833: LIST
68834: LIST
68835: LIST
68836: PUSH
68837: LD_VAR 0 1
68841: PUSH
68842: LD_VAR 0 2
68846: PUSH
68847: LD_INT 3
68849: PLUS
68850: PUSH
68851: LD_INT 0
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: LIST
68858: PUSH
68859: LD_VAR 0 1
68863: PUSH
68864: LD_INT 4
68866: PLUS
68867: PUSH
68868: LD_VAR 0 2
68872: PUSH
68873: LD_INT 4
68875: PLUS
68876: PUSH
68877: LD_INT 5
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: LIST
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: ST_TO_ADDR
// end ; 2 :
68892: GO 69451
68894: LD_INT 2
68896: DOUBLE
68897: EQUAL
68898: IFTRUE 68902
68900: GO 69031
68902: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68903: LD_ADDR_VAR 0 5
68907: PUSH
68908: LD_VAR 0 1
68912: PUSH
68913: LD_VAR 0 2
68917: PUSH
68918: LD_INT 3
68920: MINUS
68921: PUSH
68922: LD_INT 3
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: LIST
68929: PUSH
68930: LD_VAR 0 1
68934: PUSH
68935: LD_INT 4
68937: PLUS
68938: PUSH
68939: LD_VAR 0 2
68943: PUSH
68944: LD_INT 4
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: LIST
68951: PUSH
68952: LD_VAR 0 1
68956: PUSH
68957: LD_VAR 0 2
68961: PUSH
68962: LD_INT 4
68964: PLUS
68965: PUSH
68966: LD_INT 0
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: LIST
68973: PUSH
68974: LD_VAR 0 1
68978: PUSH
68979: LD_INT 3
68981: MINUS
68982: PUSH
68983: LD_VAR 0 2
68987: PUSH
68988: LD_INT 1
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: LIST
68995: PUSH
68996: LD_VAR 0 1
69000: PUSH
69001: LD_INT 4
69003: MINUS
69004: PUSH
69005: LD_VAR 0 2
69009: PUSH
69010: LD_INT 4
69012: MINUS
69013: PUSH
69014: LD_INT 2
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: LIST
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: ST_TO_ADDR
// end ; 3 :
69029: GO 69451
69031: LD_INT 3
69033: DOUBLE
69034: EQUAL
69035: IFTRUE 69039
69037: GO 69172
69039: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69040: LD_ADDR_VAR 0 5
69044: PUSH
69045: LD_VAR 0 1
69049: PUSH
69050: LD_INT 3
69052: PLUS
69053: PUSH
69054: LD_VAR 0 2
69058: PUSH
69059: LD_INT 4
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: LIST
69066: PUSH
69067: LD_VAR 0 1
69071: PUSH
69072: LD_INT 4
69074: PLUS
69075: PUSH
69076: LD_VAR 0 2
69080: PUSH
69081: LD_INT 4
69083: PLUS
69084: PUSH
69085: LD_INT 5
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: LIST
69092: PUSH
69093: LD_VAR 0 1
69097: PUSH
69098: LD_INT 4
69100: MINUS
69101: PUSH
69102: LD_VAR 0 2
69106: PUSH
69107: LD_INT 1
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: LIST
69114: PUSH
69115: LD_VAR 0 1
69119: PUSH
69120: LD_VAR 0 2
69124: PUSH
69125: LD_INT 4
69127: MINUS
69128: PUSH
69129: LD_INT 3
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: LIST
69136: PUSH
69137: LD_VAR 0 1
69141: PUSH
69142: LD_INT 3
69144: MINUS
69145: PUSH
69146: LD_VAR 0 2
69150: PUSH
69151: LD_INT 3
69153: MINUS
69154: PUSH
69155: LD_INT 2
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: LIST
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: LIST
69167: LIST
69168: LIST
69169: ST_TO_ADDR
// end ; 4 :
69170: GO 69451
69172: LD_INT 4
69174: DOUBLE
69175: EQUAL
69176: IFTRUE 69180
69178: GO 69313
69180: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69181: LD_ADDR_VAR 0 5
69185: PUSH
69186: LD_VAR 0 1
69190: PUSH
69191: LD_VAR 0 2
69195: PUSH
69196: LD_INT 4
69198: PLUS
69199: PUSH
69200: LD_INT 0
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: LIST
69207: PUSH
69208: LD_VAR 0 1
69212: PUSH
69213: LD_INT 3
69215: PLUS
69216: PUSH
69217: LD_VAR 0 2
69221: PUSH
69222: LD_INT 3
69224: PLUS
69225: PUSH
69226: LD_INT 5
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: LIST
69233: PUSH
69234: LD_VAR 0 1
69238: PUSH
69239: LD_INT 4
69241: PLUS
69242: PUSH
69243: LD_VAR 0 2
69247: PUSH
69248: LD_INT 4
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: LIST
69255: PUSH
69256: LD_VAR 0 1
69260: PUSH
69261: LD_VAR 0 2
69265: PUSH
69266: LD_INT 3
69268: MINUS
69269: PUSH
69270: LD_INT 3
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: LIST
69277: PUSH
69278: LD_VAR 0 1
69282: PUSH
69283: LD_INT 4
69285: MINUS
69286: PUSH
69287: LD_VAR 0 2
69291: PUSH
69292: LD_INT 4
69294: MINUS
69295: PUSH
69296: LD_INT 2
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: LIST
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: LIST
69308: LIST
69309: LIST
69310: ST_TO_ADDR
// end ; 5 :
69311: GO 69451
69313: LD_INT 5
69315: DOUBLE
69316: EQUAL
69317: IFTRUE 69321
69319: GO 69450
69321: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69322: LD_ADDR_VAR 0 5
69326: PUSH
69327: LD_VAR 0 1
69331: PUSH
69332: LD_INT 4
69334: MINUS
69335: PUSH
69336: LD_VAR 0 2
69340: PUSH
69341: LD_INT 1
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: LIST
69348: PUSH
69349: LD_VAR 0 1
69353: PUSH
69354: LD_VAR 0 2
69358: PUSH
69359: LD_INT 4
69361: MINUS
69362: PUSH
69363: LD_INT 3
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: LIST
69370: PUSH
69371: LD_VAR 0 1
69375: PUSH
69376: LD_INT 4
69378: PLUS
69379: PUSH
69380: LD_VAR 0 2
69384: PUSH
69385: LD_INT 4
69387: PLUS
69388: PUSH
69389: LD_INT 5
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: LIST
69396: PUSH
69397: LD_VAR 0 1
69401: PUSH
69402: LD_INT 3
69404: PLUS
69405: PUSH
69406: LD_VAR 0 2
69410: PUSH
69411: LD_INT 4
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: LIST
69418: PUSH
69419: LD_VAR 0 1
69423: PUSH
69424: LD_VAR 0 2
69428: PUSH
69429: LD_INT 3
69431: PLUS
69432: PUSH
69433: LD_INT 0
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: LIST
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: LIST
69445: LIST
69446: LIST
69447: ST_TO_ADDR
// end ; end ;
69448: GO 69451
69450: POP
// result := list ;
69451: LD_ADDR_VAR 0 4
69455: PUSH
69456: LD_VAR 0 5
69460: ST_TO_ADDR
// end ;
69461: LD_VAR 0 4
69465: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69466: LD_INT 0
69468: PPUSH
69469: PPUSH
69470: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69471: LD_VAR 0 1
69475: NOT
69476: PUSH
69477: LD_VAR 0 2
69481: PUSH
69482: LD_INT 1
69484: PUSH
69485: LD_INT 2
69487: PUSH
69488: LD_INT 3
69490: PUSH
69491: LD_INT 4
69493: PUSH
69494: EMPTY
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: IN
69500: NOT
69501: OR
69502: IFFALSE 69506
// exit ;
69504: GO 69598
// tmp := [ ] ;
69506: LD_ADDR_VAR 0 5
69510: PUSH
69511: EMPTY
69512: ST_TO_ADDR
// for i in units do
69513: LD_ADDR_VAR 0 4
69517: PUSH
69518: LD_VAR 0 1
69522: PUSH
69523: FOR_IN
69524: IFFALSE 69567
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
69526: LD_ADDR_VAR 0 5
69530: PUSH
69531: LD_VAR 0 5
69535: PPUSH
69536: LD_VAR 0 5
69540: PUSH
69541: LD_INT 1
69543: PLUS
69544: PPUSH
69545: LD_VAR 0 4
69549: PPUSH
69550: LD_VAR 0 2
69554: PPUSH
69555: CALL_OW 259
69559: PPUSH
69560: CALL_OW 2
69564: ST_TO_ADDR
69565: GO 69523
69567: POP
69568: POP
// if not tmp then
69569: LD_VAR 0 5
69573: NOT
69574: IFFALSE 69578
// exit ;
69576: GO 69598
// result := SortListByListDesc ( units , tmp ) ;
69578: LD_ADDR_VAR 0 3
69582: PUSH
69583: LD_VAR 0 1
69587: PPUSH
69588: LD_VAR 0 5
69592: PPUSH
69593: CALL_OW 77
69597: ST_TO_ADDR
// end ;
69598: LD_VAR 0 3
69602: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69603: LD_INT 0
69605: PPUSH
69606: PPUSH
69607: PPUSH
// result := false ;
69608: LD_ADDR_VAR 0 3
69612: PUSH
69613: LD_INT 0
69615: ST_TO_ADDR
// x := GetX ( building ) ;
69616: LD_ADDR_VAR 0 4
69620: PUSH
69621: LD_VAR 0 2
69625: PPUSH
69626: CALL_OW 250
69630: ST_TO_ADDR
// y := GetY ( building ) ;
69631: LD_ADDR_VAR 0 5
69635: PUSH
69636: LD_VAR 0 2
69640: PPUSH
69641: CALL_OW 251
69645: ST_TO_ADDR
// if not building or not x or not y then
69646: LD_VAR 0 2
69650: NOT
69651: PUSH
69652: LD_VAR 0 4
69656: NOT
69657: OR
69658: PUSH
69659: LD_VAR 0 5
69663: NOT
69664: OR
69665: IFFALSE 69669
// exit ;
69667: GO 69761
// if GetTaskList ( unit ) then
69669: LD_VAR 0 1
69673: PPUSH
69674: CALL_OW 437
69678: IFFALSE 69761
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69680: LD_STRING e
69682: PUSH
69683: LD_VAR 0 1
69687: PPUSH
69688: CALL_OW 437
69692: PUSH
69693: LD_INT 1
69695: ARRAY
69696: PUSH
69697: LD_INT 1
69699: ARRAY
69700: EQUAL
69701: PUSH
69702: LD_VAR 0 4
69706: PUSH
69707: LD_VAR 0 1
69711: PPUSH
69712: CALL_OW 437
69716: PUSH
69717: LD_INT 1
69719: ARRAY
69720: PUSH
69721: LD_INT 2
69723: ARRAY
69724: EQUAL
69725: AND
69726: PUSH
69727: LD_VAR 0 5
69731: PUSH
69732: LD_VAR 0 1
69736: PPUSH
69737: CALL_OW 437
69741: PUSH
69742: LD_INT 1
69744: ARRAY
69745: PUSH
69746: LD_INT 3
69748: ARRAY
69749: EQUAL
69750: AND
69751: IFFALSE 69761
// result := true end ;
69753: LD_ADDR_VAR 0 3
69757: PUSH
69758: LD_INT 1
69760: ST_TO_ADDR
// end ;
69761: LD_VAR 0 3
69765: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69766: LD_INT 0
69768: PPUSH
// result := false ;
69769: LD_ADDR_VAR 0 4
69773: PUSH
69774: LD_INT 0
69776: ST_TO_ADDR
// if GetTaskList ( unit ) then
69777: LD_VAR 0 1
69781: PPUSH
69782: CALL_OW 437
69786: IFFALSE 69869
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69788: LD_STRING M
69790: PUSH
69791: LD_VAR 0 1
69795: PPUSH
69796: CALL_OW 437
69800: PUSH
69801: LD_INT 1
69803: ARRAY
69804: PUSH
69805: LD_INT 1
69807: ARRAY
69808: EQUAL
69809: PUSH
69810: LD_VAR 0 2
69814: PUSH
69815: LD_VAR 0 1
69819: PPUSH
69820: CALL_OW 437
69824: PUSH
69825: LD_INT 1
69827: ARRAY
69828: PUSH
69829: LD_INT 2
69831: ARRAY
69832: EQUAL
69833: AND
69834: PUSH
69835: LD_VAR 0 3
69839: PUSH
69840: LD_VAR 0 1
69844: PPUSH
69845: CALL_OW 437
69849: PUSH
69850: LD_INT 1
69852: ARRAY
69853: PUSH
69854: LD_INT 3
69856: ARRAY
69857: EQUAL
69858: AND
69859: IFFALSE 69869
// result := true ;
69861: LD_ADDR_VAR 0 4
69865: PUSH
69866: LD_INT 1
69868: ST_TO_ADDR
// end ; end ;
69869: LD_VAR 0 4
69873: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69874: LD_INT 0
69876: PPUSH
69877: PPUSH
69878: PPUSH
69879: PPUSH
// if not unit or not area then
69880: LD_VAR 0 1
69884: NOT
69885: PUSH
69886: LD_VAR 0 2
69890: NOT
69891: OR
69892: IFFALSE 69896
// exit ;
69894: GO 70060
// tmp := AreaToList ( area , i ) ;
69896: LD_ADDR_VAR 0 6
69900: PUSH
69901: LD_VAR 0 2
69905: PPUSH
69906: LD_VAR 0 5
69910: PPUSH
69911: CALL_OW 517
69915: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69916: LD_ADDR_VAR 0 5
69920: PUSH
69921: DOUBLE
69922: LD_INT 1
69924: DEC
69925: ST_TO_ADDR
69926: LD_VAR 0 6
69930: PUSH
69931: LD_INT 1
69933: ARRAY
69934: PUSH
69935: FOR_TO
69936: IFFALSE 70058
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69938: LD_ADDR_VAR 0 7
69942: PUSH
69943: LD_VAR 0 6
69947: PUSH
69948: LD_INT 1
69950: ARRAY
69951: PUSH
69952: LD_VAR 0 5
69956: ARRAY
69957: PUSH
69958: LD_VAR 0 6
69962: PUSH
69963: LD_INT 2
69965: ARRAY
69966: PUSH
69967: LD_VAR 0 5
69971: ARRAY
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
69977: LD_VAR 0 7
69981: PUSH
69982: LD_INT 1
69984: ARRAY
69985: PPUSH
69986: LD_VAR 0 7
69990: PUSH
69991: LD_INT 2
69993: ARRAY
69994: PPUSH
69995: CALL_OW 428
69999: PUSH
70000: LD_INT 0
70002: EQUAL
70003: IFFALSE 70056
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70005: LD_VAR 0 1
70009: PPUSH
70010: LD_VAR 0 7
70014: PUSH
70015: LD_INT 1
70017: ARRAY
70018: PPUSH
70019: LD_VAR 0 7
70023: PUSH
70024: LD_INT 2
70026: ARRAY
70027: PPUSH
70028: LD_VAR 0 3
70032: PPUSH
70033: CALL_OW 48
// result := IsPlaced ( unit ) ;
70037: LD_ADDR_VAR 0 4
70041: PUSH
70042: LD_VAR 0 1
70046: PPUSH
70047: CALL_OW 305
70051: ST_TO_ADDR
// exit ;
70052: POP
70053: POP
70054: GO 70060
// end ; end ;
70056: GO 69935
70058: POP
70059: POP
// end ;
70060: LD_VAR 0 4
70064: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70065: LD_INT 0
70067: PPUSH
70068: PPUSH
70069: PPUSH
// if not side or side > 8 then
70070: LD_VAR 0 1
70074: NOT
70075: PUSH
70076: LD_VAR 0 1
70080: PUSH
70081: LD_INT 8
70083: GREATER
70084: OR
70085: IFFALSE 70089
// exit ;
70087: GO 70276
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70089: LD_ADDR_VAR 0 4
70093: PUSH
70094: LD_INT 22
70096: PUSH
70097: LD_VAR 0 1
70101: PUSH
70102: EMPTY
70103: LIST
70104: LIST
70105: PUSH
70106: LD_INT 21
70108: PUSH
70109: LD_INT 3
70111: PUSH
70112: EMPTY
70113: LIST
70114: LIST
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PPUSH
70120: CALL_OW 69
70124: ST_TO_ADDR
// if not tmp then
70125: LD_VAR 0 4
70129: NOT
70130: IFFALSE 70134
// exit ;
70132: GO 70276
// enable_addtolog := true ;
70134: LD_ADDR_OWVAR 81
70138: PUSH
70139: LD_INT 1
70141: ST_TO_ADDR
// AddToLog ( [ ) ;
70142: LD_STRING [
70144: PPUSH
70145: CALL_OW 561
// for i in tmp do
70149: LD_ADDR_VAR 0 3
70153: PUSH
70154: LD_VAR 0 4
70158: PUSH
70159: FOR_IN
70160: IFFALSE 70267
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70162: LD_STRING [
70164: PUSH
70165: LD_VAR 0 3
70169: PPUSH
70170: CALL_OW 266
70174: STR
70175: PUSH
70176: LD_STRING , 
70178: STR
70179: PUSH
70180: LD_VAR 0 3
70184: PPUSH
70185: CALL_OW 250
70189: STR
70190: PUSH
70191: LD_STRING , 
70193: STR
70194: PUSH
70195: LD_VAR 0 3
70199: PPUSH
70200: CALL_OW 251
70204: STR
70205: PUSH
70206: LD_STRING , 
70208: STR
70209: PUSH
70210: LD_VAR 0 3
70214: PPUSH
70215: CALL_OW 254
70219: STR
70220: PUSH
70221: LD_STRING , 
70223: STR
70224: PUSH
70225: LD_VAR 0 3
70229: PPUSH
70230: LD_INT 1
70232: PPUSH
70233: CALL_OW 268
70237: STR
70238: PUSH
70239: LD_STRING , 
70241: STR
70242: PUSH
70243: LD_VAR 0 3
70247: PPUSH
70248: LD_INT 2
70250: PPUSH
70251: CALL_OW 268
70255: STR
70256: PUSH
70257: LD_STRING ],
70259: STR
70260: PPUSH
70261: CALL_OW 561
// end ;
70265: GO 70159
70267: POP
70268: POP
// AddToLog ( ]; ) ;
70269: LD_STRING ];
70271: PPUSH
70272: CALL_OW 561
// end ;
70276: LD_VAR 0 2
70280: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70281: LD_INT 0
70283: PPUSH
70284: PPUSH
70285: PPUSH
70286: PPUSH
70287: PPUSH
// if not area or not rate or not max then
70288: LD_VAR 0 1
70292: NOT
70293: PUSH
70294: LD_VAR 0 2
70298: NOT
70299: OR
70300: PUSH
70301: LD_VAR 0 4
70305: NOT
70306: OR
70307: IFFALSE 70311
// exit ;
70309: GO 70503
// while 1 do
70311: LD_INT 1
70313: IFFALSE 70503
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70315: LD_ADDR_VAR 0 9
70319: PUSH
70320: LD_VAR 0 1
70324: PPUSH
70325: LD_INT 1
70327: PPUSH
70328: CALL_OW 287
70332: PUSH
70333: LD_INT 10
70335: MUL
70336: ST_TO_ADDR
// r := rate / 10 ;
70337: LD_ADDR_VAR 0 7
70341: PUSH
70342: LD_VAR 0 2
70346: PUSH
70347: LD_INT 10
70349: DIVREAL
70350: ST_TO_ADDR
// time := 1 1$00 ;
70351: LD_ADDR_VAR 0 8
70355: PUSH
70356: LD_INT 2100
70358: ST_TO_ADDR
// if amount < min then
70359: LD_VAR 0 9
70363: PUSH
70364: LD_VAR 0 3
70368: LESS
70369: IFFALSE 70387
// r := r * 2 else
70371: LD_ADDR_VAR 0 7
70375: PUSH
70376: LD_VAR 0 7
70380: PUSH
70381: LD_INT 2
70383: MUL
70384: ST_TO_ADDR
70385: GO 70413
// if amount > max then
70387: LD_VAR 0 9
70391: PUSH
70392: LD_VAR 0 4
70396: GREATER
70397: IFFALSE 70413
// r := r / 2 ;
70399: LD_ADDR_VAR 0 7
70403: PUSH
70404: LD_VAR 0 7
70408: PUSH
70409: LD_INT 2
70411: DIVREAL
70412: ST_TO_ADDR
// time := time / r ;
70413: LD_ADDR_VAR 0 8
70417: PUSH
70418: LD_VAR 0 8
70422: PUSH
70423: LD_VAR 0 7
70427: DIVREAL
70428: ST_TO_ADDR
// if time < 0 then
70429: LD_VAR 0 8
70433: PUSH
70434: LD_INT 0
70436: LESS
70437: IFFALSE 70454
// time := time * - 1 ;
70439: LD_ADDR_VAR 0 8
70443: PUSH
70444: LD_VAR 0 8
70448: PUSH
70449: LD_INT 1
70451: NEG
70452: MUL
70453: ST_TO_ADDR
// wait ( time ) ;
70454: LD_VAR 0 8
70458: PPUSH
70459: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
70463: LD_INT 35
70465: PPUSH
70466: LD_INT 875
70468: PPUSH
70469: CALL_OW 12
70473: PPUSH
70474: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70478: LD_INT 1
70480: PPUSH
70481: LD_INT 5
70483: PPUSH
70484: CALL_OW 12
70488: PPUSH
70489: LD_VAR 0 1
70493: PPUSH
70494: LD_INT 1
70496: PPUSH
70497: CALL_OW 55
// end ;
70501: GO 70311
// end ;
70503: LD_VAR 0 5
70507: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70508: LD_INT 0
70510: PPUSH
70511: PPUSH
70512: PPUSH
70513: PPUSH
70514: PPUSH
70515: PPUSH
70516: PPUSH
70517: PPUSH
// if not turrets or not factories then
70518: LD_VAR 0 1
70522: NOT
70523: PUSH
70524: LD_VAR 0 2
70528: NOT
70529: OR
70530: IFFALSE 70534
// exit ;
70532: GO 70841
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70534: LD_ADDR_VAR 0 10
70538: PUSH
70539: LD_INT 5
70541: PUSH
70542: LD_INT 6
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: PUSH
70549: LD_INT 2
70551: PUSH
70552: LD_INT 4
70554: PUSH
70555: EMPTY
70556: LIST
70557: LIST
70558: PUSH
70559: LD_INT 3
70561: PUSH
70562: LD_INT 5
70564: PUSH
70565: EMPTY
70566: LIST
70567: LIST
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: LIST
70573: PUSH
70574: LD_INT 24
70576: PUSH
70577: LD_INT 25
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: PUSH
70584: LD_INT 23
70586: PUSH
70587: LD_INT 27
70589: PUSH
70590: EMPTY
70591: LIST
70592: LIST
70593: PUSH
70594: EMPTY
70595: LIST
70596: LIST
70597: PUSH
70598: LD_INT 42
70600: PUSH
70601: LD_INT 43
70603: PUSH
70604: EMPTY
70605: LIST
70606: LIST
70607: PUSH
70608: LD_INT 44
70610: PUSH
70611: LD_INT 46
70613: PUSH
70614: EMPTY
70615: LIST
70616: LIST
70617: PUSH
70618: LD_INT 45
70620: PUSH
70621: LD_INT 47
70623: PUSH
70624: EMPTY
70625: LIST
70626: LIST
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: LIST
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: LIST
70637: ST_TO_ADDR
// result := [ ] ;
70638: LD_ADDR_VAR 0 3
70642: PUSH
70643: EMPTY
70644: ST_TO_ADDR
// for i in turrets do
70645: LD_ADDR_VAR 0 4
70649: PUSH
70650: LD_VAR 0 1
70654: PUSH
70655: FOR_IN
70656: IFFALSE 70839
// begin nat := GetNation ( i ) ;
70658: LD_ADDR_VAR 0 7
70662: PUSH
70663: LD_VAR 0 4
70667: PPUSH
70668: CALL_OW 248
70672: ST_TO_ADDR
// weapon := 0 ;
70673: LD_ADDR_VAR 0 8
70677: PUSH
70678: LD_INT 0
70680: ST_TO_ADDR
// if not nat then
70681: LD_VAR 0 7
70685: NOT
70686: IFFALSE 70690
// continue ;
70688: GO 70655
// for j in list [ nat ] do
70690: LD_ADDR_VAR 0 5
70694: PUSH
70695: LD_VAR 0 10
70699: PUSH
70700: LD_VAR 0 7
70704: ARRAY
70705: PUSH
70706: FOR_IN
70707: IFFALSE 70748
// if GetBWeapon ( i ) = j [ 1 ] then
70709: LD_VAR 0 4
70713: PPUSH
70714: CALL_OW 269
70718: PUSH
70719: LD_VAR 0 5
70723: PUSH
70724: LD_INT 1
70726: ARRAY
70727: EQUAL
70728: IFFALSE 70746
// begin weapon := j [ 2 ] ;
70730: LD_ADDR_VAR 0 8
70734: PUSH
70735: LD_VAR 0 5
70739: PUSH
70740: LD_INT 2
70742: ARRAY
70743: ST_TO_ADDR
// break ;
70744: GO 70748
// end ;
70746: GO 70706
70748: POP
70749: POP
// if not weapon then
70750: LD_VAR 0 8
70754: NOT
70755: IFFALSE 70759
// continue ;
70757: GO 70655
// for k in factories do
70759: LD_ADDR_VAR 0 6
70763: PUSH
70764: LD_VAR 0 2
70768: PUSH
70769: FOR_IN
70770: IFFALSE 70835
// begin weapons := AvailableWeaponList ( k ) ;
70772: LD_ADDR_VAR 0 9
70776: PUSH
70777: LD_VAR 0 6
70781: PPUSH
70782: CALL_OW 478
70786: ST_TO_ADDR
// if not weapons then
70787: LD_VAR 0 9
70791: NOT
70792: IFFALSE 70796
// continue ;
70794: GO 70769
// if weapon in weapons then
70796: LD_VAR 0 8
70800: PUSH
70801: LD_VAR 0 9
70805: IN
70806: IFFALSE 70833
// begin result := [ i , weapon ] ;
70808: LD_ADDR_VAR 0 3
70812: PUSH
70813: LD_VAR 0 4
70817: PUSH
70818: LD_VAR 0 8
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: ST_TO_ADDR
// exit ;
70827: POP
70828: POP
70829: POP
70830: POP
70831: GO 70841
// end ; end ;
70833: GO 70769
70835: POP
70836: POP
// end ;
70837: GO 70655
70839: POP
70840: POP
// end ;
70841: LD_VAR 0 3
70845: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70846: LD_INT 0
70848: PPUSH
// if not side or side > 8 then
70849: LD_VAR 0 3
70853: NOT
70854: PUSH
70855: LD_VAR 0 3
70859: PUSH
70860: LD_INT 8
70862: GREATER
70863: OR
70864: IFFALSE 70868
// exit ;
70866: GO 70927
// if not range then
70868: LD_VAR 0 4
70872: NOT
70873: IFFALSE 70884
// range := - 12 ;
70875: LD_ADDR_VAR 0 4
70879: PUSH
70880: LD_INT 12
70882: NEG
70883: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70884: LD_VAR 0 1
70888: PPUSH
70889: LD_VAR 0 2
70893: PPUSH
70894: LD_VAR 0 3
70898: PPUSH
70899: LD_VAR 0 4
70903: PPUSH
70904: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70908: LD_VAR 0 1
70912: PPUSH
70913: LD_VAR 0 2
70917: PPUSH
70918: LD_VAR 0 3
70922: PPUSH
70923: CALL_OW 331
// end ;
70927: LD_VAR 0 5
70931: RET
// export function Video ( mode ) ; begin
70932: LD_INT 0
70934: PPUSH
// ingame_video = mode ;
70935: LD_ADDR_OWVAR 52
70939: PUSH
70940: LD_VAR 0 1
70944: ST_TO_ADDR
// interface_hidden = mode ;
70945: LD_ADDR_OWVAR 54
70949: PUSH
70950: LD_VAR 0 1
70954: ST_TO_ADDR
// end ;
70955: LD_VAR 0 2
70959: RET
// export function Join ( array , element ) ; begin
70960: LD_INT 0
70962: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70963: LD_ADDR_VAR 0 3
70967: PUSH
70968: LD_VAR 0 1
70972: PPUSH
70973: LD_VAR 0 1
70977: PUSH
70978: LD_INT 1
70980: PLUS
70981: PPUSH
70982: LD_VAR 0 2
70986: PPUSH
70987: CALL_OW 1
70991: ST_TO_ADDR
// end ;
70992: LD_VAR 0 3
70996: RET
// export function JoinUnion ( array , element ) ; begin
70997: LD_INT 0
70999: PPUSH
// result := array union element ;
71000: LD_ADDR_VAR 0 3
71004: PUSH
71005: LD_VAR 0 1
71009: PUSH
71010: LD_VAR 0 2
71014: UNION
71015: ST_TO_ADDR
// end ;
71016: LD_VAR 0 3
71020: RET
// export function GetBehemoths ( side ) ; begin
71021: LD_INT 0
71023: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
71024: LD_ADDR_VAR 0 2
71028: PUSH
71029: LD_INT 22
71031: PUSH
71032: LD_VAR 0 1
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: PUSH
71041: LD_INT 31
71043: PUSH
71044: LD_INT 25
71046: PUSH
71047: EMPTY
71048: LIST
71049: LIST
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: PPUSH
71055: CALL_OW 69
71059: ST_TO_ADDR
// end ;
71060: LD_VAR 0 2
71064: RET
// export function Shuffle ( array ) ; var i , index ; begin
71065: LD_INT 0
71067: PPUSH
71068: PPUSH
71069: PPUSH
// result := [ ] ;
71070: LD_ADDR_VAR 0 2
71074: PUSH
71075: EMPTY
71076: ST_TO_ADDR
// if not array then
71077: LD_VAR 0 1
71081: NOT
71082: IFFALSE 71086
// exit ;
71084: GO 71185
// Randomize ;
71086: CALL_OW 10
// for i = array downto 1 do
71090: LD_ADDR_VAR 0 3
71094: PUSH
71095: DOUBLE
71096: LD_VAR 0 1
71100: INC
71101: ST_TO_ADDR
71102: LD_INT 1
71104: PUSH
71105: FOR_DOWNTO
71106: IFFALSE 71183
// begin index := rand ( 1 , array ) ;
71108: LD_ADDR_VAR 0 4
71112: PUSH
71113: LD_INT 1
71115: PPUSH
71116: LD_VAR 0 1
71120: PPUSH
71121: CALL_OW 12
71125: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71126: LD_ADDR_VAR 0 2
71130: PUSH
71131: LD_VAR 0 2
71135: PPUSH
71136: LD_VAR 0 2
71140: PUSH
71141: LD_INT 1
71143: PLUS
71144: PPUSH
71145: LD_VAR 0 1
71149: PUSH
71150: LD_VAR 0 4
71154: ARRAY
71155: PPUSH
71156: CALL_OW 2
71160: ST_TO_ADDR
// array := Delete ( array , index ) ;
71161: LD_ADDR_VAR 0 1
71165: PUSH
71166: LD_VAR 0 1
71170: PPUSH
71171: LD_VAR 0 4
71175: PPUSH
71176: CALL_OW 3
71180: ST_TO_ADDR
// end ;
71181: GO 71105
71183: POP
71184: POP
// end ;
71185: LD_VAR 0 2
71189: RET
// export function GetBaseMaterials ( base ) ; begin
71190: LD_INT 0
71192: PPUSH
// result := [ 0 , 0 , 0 ] ;
71193: LD_ADDR_VAR 0 2
71197: PUSH
71198: LD_INT 0
71200: PUSH
71201: LD_INT 0
71203: PUSH
71204: LD_INT 0
71206: PUSH
71207: EMPTY
71208: LIST
71209: LIST
71210: LIST
71211: ST_TO_ADDR
// if not base then
71212: LD_VAR 0 1
71216: NOT
71217: IFFALSE 71221
// exit ;
71219: GO 71270
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71221: LD_ADDR_VAR 0 2
71225: PUSH
71226: LD_VAR 0 1
71230: PPUSH
71231: LD_INT 1
71233: PPUSH
71234: CALL_OW 275
71238: PUSH
71239: LD_VAR 0 1
71243: PPUSH
71244: LD_INT 2
71246: PPUSH
71247: CALL_OW 275
71251: PUSH
71252: LD_VAR 0 1
71256: PPUSH
71257: LD_INT 3
71259: PPUSH
71260: CALL_OW 275
71264: PUSH
71265: EMPTY
71266: LIST
71267: LIST
71268: LIST
71269: ST_TO_ADDR
// end ;
71270: LD_VAR 0 2
71274: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71275: LD_INT 0
71277: PPUSH
71278: PPUSH
// result := array ;
71279: LD_ADDR_VAR 0 3
71283: PUSH
71284: LD_VAR 0 1
71288: ST_TO_ADDR
// if size > 0 then
71289: LD_VAR 0 2
71293: PUSH
71294: LD_INT 0
71296: GREATER
71297: IFFALSE 71343
// for i := array downto size do
71299: LD_ADDR_VAR 0 4
71303: PUSH
71304: DOUBLE
71305: LD_VAR 0 1
71309: INC
71310: ST_TO_ADDR
71311: LD_VAR 0 2
71315: PUSH
71316: FOR_DOWNTO
71317: IFFALSE 71341
// result := Delete ( result , result ) ;
71319: LD_ADDR_VAR 0 3
71323: PUSH
71324: LD_VAR 0 3
71328: PPUSH
71329: LD_VAR 0 3
71333: PPUSH
71334: CALL_OW 3
71338: ST_TO_ADDR
71339: GO 71316
71341: POP
71342: POP
// end ;
71343: LD_VAR 0 3
71347: RET
// export function ComExit ( unit ) ; var tmp ; begin
71348: LD_INT 0
71350: PPUSH
71351: PPUSH
// if not IsInUnit ( unit ) then
71352: LD_VAR 0 1
71356: PPUSH
71357: CALL_OW 310
71361: NOT
71362: IFFALSE 71366
// exit ;
71364: GO 71426
// tmp := IsInUnit ( unit ) ;
71366: LD_ADDR_VAR 0 3
71370: PUSH
71371: LD_VAR 0 1
71375: PPUSH
71376: CALL_OW 310
71380: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71381: LD_VAR 0 3
71385: PPUSH
71386: CALL_OW 247
71390: PUSH
71391: LD_INT 2
71393: EQUAL
71394: IFFALSE 71407
// ComExitVehicle ( unit ) else
71396: LD_VAR 0 1
71400: PPUSH
71401: CALL_OW 121
71405: GO 71416
// ComExitBuilding ( unit ) ;
71407: LD_VAR 0 1
71411: PPUSH
71412: CALL_OW 122
// result := tmp ;
71416: LD_ADDR_VAR 0 2
71420: PUSH
71421: LD_VAR 0 3
71425: ST_TO_ADDR
// end ;
71426: LD_VAR 0 2
71430: RET
// export function ComExitAll ( units ) ; var i ; begin
71431: LD_INT 0
71433: PPUSH
71434: PPUSH
// if not units then
71435: LD_VAR 0 1
71439: NOT
71440: IFFALSE 71444
// exit ;
71442: GO 71470
// for i in units do
71444: LD_ADDR_VAR 0 3
71448: PUSH
71449: LD_VAR 0 1
71453: PUSH
71454: FOR_IN
71455: IFFALSE 71468
// ComExit ( i ) ;
71457: LD_VAR 0 3
71461: PPUSH
71462: CALL 71348 0 1
71466: GO 71454
71468: POP
71469: POP
// end ;
71470: LD_VAR 0 2
71474: RET
// export function ResetHc ; begin
71475: LD_INT 0
71477: PPUSH
// InitHc ;
71478: CALL_OW 19
// hc_importance := 0 ;
71482: LD_ADDR_OWVAR 32
71486: PUSH
71487: LD_INT 0
71489: ST_TO_ADDR
// end ;
71490: LD_VAR 0 1
71494: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71495: LD_INT 0
71497: PPUSH
71498: PPUSH
71499: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71500: LD_ADDR_VAR 0 6
71504: PUSH
71505: LD_VAR 0 1
71509: PUSH
71510: LD_VAR 0 3
71514: PLUS
71515: PUSH
71516: LD_INT 2
71518: DIV
71519: ST_TO_ADDR
// if _x < 0 then
71520: LD_VAR 0 6
71524: PUSH
71525: LD_INT 0
71527: LESS
71528: IFFALSE 71545
// _x := _x * - 1 ;
71530: LD_ADDR_VAR 0 6
71534: PUSH
71535: LD_VAR 0 6
71539: PUSH
71540: LD_INT 1
71542: NEG
71543: MUL
71544: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
71545: LD_ADDR_VAR 0 7
71549: PUSH
71550: LD_VAR 0 2
71554: PUSH
71555: LD_VAR 0 4
71559: PLUS
71560: PUSH
71561: LD_INT 2
71563: DIV
71564: ST_TO_ADDR
// if _y < 0 then
71565: LD_VAR 0 7
71569: PUSH
71570: LD_INT 0
71572: LESS
71573: IFFALSE 71590
// _y := _y * - 1 ;
71575: LD_ADDR_VAR 0 7
71579: PUSH
71580: LD_VAR 0 7
71584: PUSH
71585: LD_INT 1
71587: NEG
71588: MUL
71589: ST_TO_ADDR
// result := [ _x , _y ] ;
71590: LD_ADDR_VAR 0 5
71594: PUSH
71595: LD_VAR 0 6
71599: PUSH
71600: LD_VAR 0 7
71604: PUSH
71605: EMPTY
71606: LIST
71607: LIST
71608: ST_TO_ADDR
// end ;
71609: LD_VAR 0 5
71613: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71614: LD_INT 0
71616: PPUSH
71617: PPUSH
71618: PPUSH
71619: PPUSH
// task := GetTaskList ( unit ) ;
71620: LD_ADDR_VAR 0 7
71624: PUSH
71625: LD_VAR 0 1
71629: PPUSH
71630: CALL_OW 437
71634: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71635: LD_VAR 0 7
71639: NOT
71640: PUSH
71641: LD_VAR 0 1
71645: PPUSH
71646: LD_VAR 0 2
71650: PPUSH
71651: CALL_OW 308
71655: NOT
71656: AND
71657: IFFALSE 71661
// exit ;
71659: GO 71779
// if IsInArea ( unit , area ) then
71661: LD_VAR 0 1
71665: PPUSH
71666: LD_VAR 0 2
71670: PPUSH
71671: CALL_OW 308
71675: IFFALSE 71693
// begin ComMoveToArea ( unit , goAway ) ;
71677: LD_VAR 0 1
71681: PPUSH
71682: LD_VAR 0 3
71686: PPUSH
71687: CALL_OW 113
// exit ;
71691: GO 71779
// end ; if task [ 1 ] [ 1 ] <> M then
71693: LD_VAR 0 7
71697: PUSH
71698: LD_INT 1
71700: ARRAY
71701: PUSH
71702: LD_INT 1
71704: ARRAY
71705: PUSH
71706: LD_STRING M
71708: NONEQUAL
71709: IFFALSE 71713
// exit ;
71711: GO 71779
// x := task [ 1 ] [ 2 ] ;
71713: LD_ADDR_VAR 0 5
71717: PUSH
71718: LD_VAR 0 7
71722: PUSH
71723: LD_INT 1
71725: ARRAY
71726: PUSH
71727: LD_INT 2
71729: ARRAY
71730: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71731: LD_ADDR_VAR 0 6
71735: PUSH
71736: LD_VAR 0 7
71740: PUSH
71741: LD_INT 1
71743: ARRAY
71744: PUSH
71745: LD_INT 3
71747: ARRAY
71748: ST_TO_ADDR
// if InArea ( x , y , area ) then
71749: LD_VAR 0 5
71753: PPUSH
71754: LD_VAR 0 6
71758: PPUSH
71759: LD_VAR 0 2
71763: PPUSH
71764: CALL_OW 309
71768: IFFALSE 71779
// ComStop ( unit ) ;
71770: LD_VAR 0 1
71774: PPUSH
71775: CALL_OW 141
// end ;
71779: LD_VAR 0 4
71783: RET
// export function Abs ( value ) ; begin
71784: LD_INT 0
71786: PPUSH
// result := value ;
71787: LD_ADDR_VAR 0 2
71791: PUSH
71792: LD_VAR 0 1
71796: ST_TO_ADDR
// if value < 0 then
71797: LD_VAR 0 1
71801: PUSH
71802: LD_INT 0
71804: LESS
71805: IFFALSE 71822
// result := value * - 1 ;
71807: LD_ADDR_VAR 0 2
71811: PUSH
71812: LD_VAR 0 1
71816: PUSH
71817: LD_INT 1
71819: NEG
71820: MUL
71821: ST_TO_ADDR
// end ;
71822: LD_VAR 0 2
71826: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71827: LD_INT 0
71829: PPUSH
71830: PPUSH
71831: PPUSH
71832: PPUSH
71833: PPUSH
71834: PPUSH
71835: PPUSH
71836: PPUSH
// if not unit or not building then
71837: LD_VAR 0 1
71841: NOT
71842: PUSH
71843: LD_VAR 0 2
71847: NOT
71848: OR
71849: IFFALSE 71853
// exit ;
71851: GO 72079
// x := GetX ( building ) ;
71853: LD_ADDR_VAR 0 4
71857: PUSH
71858: LD_VAR 0 2
71862: PPUSH
71863: CALL_OW 250
71867: ST_TO_ADDR
// y := GetY ( building ) ;
71868: LD_ADDR_VAR 0 6
71872: PUSH
71873: LD_VAR 0 2
71877: PPUSH
71878: CALL_OW 251
71882: ST_TO_ADDR
// d := GetDir ( building ) ;
71883: LD_ADDR_VAR 0 8
71887: PUSH
71888: LD_VAR 0 2
71892: PPUSH
71893: CALL_OW 254
71897: ST_TO_ADDR
// r := 4 ;
71898: LD_ADDR_VAR 0 9
71902: PUSH
71903: LD_INT 4
71905: ST_TO_ADDR
// for i := 1 to 5 do
71906: LD_ADDR_VAR 0 10
71910: PUSH
71911: DOUBLE
71912: LD_INT 1
71914: DEC
71915: ST_TO_ADDR
71916: LD_INT 5
71918: PUSH
71919: FOR_TO
71920: IFFALSE 72077
// begin _x := ShiftX ( x , d , r + i ) ;
71922: LD_ADDR_VAR 0 5
71926: PUSH
71927: LD_VAR 0 4
71931: PPUSH
71932: LD_VAR 0 8
71936: PPUSH
71937: LD_VAR 0 9
71941: PUSH
71942: LD_VAR 0 10
71946: PLUS
71947: PPUSH
71948: CALL_OW 272
71952: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71953: LD_ADDR_VAR 0 7
71957: PUSH
71958: LD_VAR 0 6
71962: PPUSH
71963: LD_VAR 0 8
71967: PPUSH
71968: LD_VAR 0 9
71972: PUSH
71973: LD_VAR 0 10
71977: PLUS
71978: PPUSH
71979: CALL_OW 273
71983: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71984: LD_VAR 0 5
71988: PPUSH
71989: LD_VAR 0 7
71993: PPUSH
71994: CALL_OW 488
71998: PUSH
71999: LD_VAR 0 5
72003: PPUSH
72004: LD_VAR 0 7
72008: PPUSH
72009: CALL_OW 428
72013: PPUSH
72014: CALL_OW 247
72018: PUSH
72019: LD_INT 3
72021: PUSH
72022: LD_INT 2
72024: PUSH
72025: EMPTY
72026: LIST
72027: LIST
72028: IN
72029: NOT
72030: AND
72031: IFFALSE 72075
// begin ComMoveXY ( unit , _x , _y ) ;
72033: LD_VAR 0 1
72037: PPUSH
72038: LD_VAR 0 5
72042: PPUSH
72043: LD_VAR 0 7
72047: PPUSH
72048: CALL_OW 111
// result := [ _x , _y ] ;
72052: LD_ADDR_VAR 0 3
72056: PUSH
72057: LD_VAR 0 5
72061: PUSH
72062: LD_VAR 0 7
72066: PUSH
72067: EMPTY
72068: LIST
72069: LIST
72070: ST_TO_ADDR
// exit ;
72071: POP
72072: POP
72073: GO 72079
// end ; end ;
72075: GO 71919
72077: POP
72078: POP
// end ;
72079: LD_VAR 0 3
72083: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72084: LD_INT 0
72086: PPUSH
72087: PPUSH
72088: PPUSH
// result := 0 ;
72089: LD_ADDR_VAR 0 3
72093: PUSH
72094: LD_INT 0
72096: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72097: LD_VAR 0 1
72101: PUSH
72102: LD_INT 0
72104: LESS
72105: PUSH
72106: LD_VAR 0 1
72110: PUSH
72111: LD_INT 8
72113: GREATER
72114: OR
72115: PUSH
72116: LD_VAR 0 2
72120: PUSH
72121: LD_INT 0
72123: LESS
72124: OR
72125: PUSH
72126: LD_VAR 0 2
72130: PUSH
72131: LD_INT 8
72133: GREATER
72134: OR
72135: IFFALSE 72139
// exit ;
72137: GO 72214
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72139: LD_ADDR_VAR 0 4
72143: PUSH
72144: LD_INT 22
72146: PUSH
72147: LD_VAR 0 2
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: PPUSH
72156: CALL_OW 69
72160: PUSH
72161: FOR_IN
72162: IFFALSE 72212
// begin un := UnitShoot ( i ) ;
72164: LD_ADDR_VAR 0 5
72168: PUSH
72169: LD_VAR 0 4
72173: PPUSH
72174: CALL_OW 504
72178: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72179: LD_VAR 0 5
72183: PPUSH
72184: CALL_OW 255
72188: PUSH
72189: LD_VAR 0 1
72193: EQUAL
72194: IFFALSE 72210
// begin result := un ;
72196: LD_ADDR_VAR 0 3
72200: PUSH
72201: LD_VAR 0 5
72205: ST_TO_ADDR
// exit ;
72206: POP
72207: POP
72208: GO 72214
// end ; end ;
72210: GO 72161
72212: POP
72213: POP
// end ;
72214: LD_VAR 0 3
72218: RET
// export function GetCargoBay ( units ) ; begin
72219: LD_INT 0
72221: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72222: LD_ADDR_VAR 0 2
72226: PUSH
72227: LD_VAR 0 1
72231: PPUSH
72232: LD_INT 2
72234: PUSH
72235: LD_INT 34
72237: PUSH
72238: LD_INT 12
72240: PUSH
72241: EMPTY
72242: LIST
72243: LIST
72244: PUSH
72245: LD_INT 34
72247: PUSH
72248: LD_INT 51
72250: PUSH
72251: EMPTY
72252: LIST
72253: LIST
72254: PUSH
72255: LD_INT 34
72257: PUSH
72258: LD_INT 32
72260: PUSH
72261: EMPTY
72262: LIST
72263: LIST
72264: PUSH
72265: LD_INT 34
72267: PUSH
72268: LD_EXP 37
72272: PUSH
72273: EMPTY
72274: LIST
72275: LIST
72276: PUSH
72277: EMPTY
72278: LIST
72279: LIST
72280: LIST
72281: LIST
72282: LIST
72283: PPUSH
72284: CALL_OW 72
72288: ST_TO_ADDR
// end ;
72289: LD_VAR 0 2
72293: RET
// export function Negate ( value ) ; begin
72294: LD_INT 0
72296: PPUSH
// result := not value ;
72297: LD_ADDR_VAR 0 2
72301: PUSH
72302: LD_VAR 0 1
72306: NOT
72307: ST_TO_ADDR
// end ;
72308: LD_VAR 0 2
72312: RET
// export function Inc ( value ) ; begin
72313: LD_INT 0
72315: PPUSH
// result := value + 1 ;
72316: LD_ADDR_VAR 0 2
72320: PUSH
72321: LD_VAR 0 1
72325: PUSH
72326: LD_INT 1
72328: PLUS
72329: ST_TO_ADDR
// end ;
72330: LD_VAR 0 2
72334: RET
// export function Dec ( value ) ; begin
72335: LD_INT 0
72337: PPUSH
// result := value - 1 ;
72338: LD_ADDR_VAR 0 2
72342: PUSH
72343: LD_VAR 0 1
72347: PUSH
72348: LD_INT 1
72350: MINUS
72351: ST_TO_ADDR
// end ;
72352: LD_VAR 0 2
72356: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
72357: LD_INT 0
72359: PPUSH
72360: PPUSH
72361: PPUSH
72362: PPUSH
72363: PPUSH
72364: PPUSH
72365: PPUSH
72366: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
72367: LD_VAR 0 1
72371: PPUSH
72372: LD_VAR 0 2
72376: PPUSH
72377: CALL_OW 488
72381: NOT
72382: PUSH
72383: LD_VAR 0 3
72387: PPUSH
72388: LD_VAR 0 4
72392: PPUSH
72393: CALL_OW 488
72397: NOT
72398: OR
72399: IFFALSE 72412
// begin result := - 1 ;
72401: LD_ADDR_VAR 0 5
72405: PUSH
72406: LD_INT 1
72408: NEG
72409: ST_TO_ADDR
// exit ;
72410: GO 72647
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
72412: LD_ADDR_VAR 0 12
72416: PUSH
72417: LD_VAR 0 1
72421: PPUSH
72422: LD_VAR 0 2
72426: PPUSH
72427: LD_VAR 0 3
72431: PPUSH
72432: LD_VAR 0 4
72436: PPUSH
72437: CALL 71495 0 4
72441: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
72442: LD_ADDR_VAR 0 11
72446: PUSH
72447: LD_VAR 0 1
72451: PPUSH
72452: LD_VAR 0 2
72456: PPUSH
72457: LD_VAR 0 12
72461: PUSH
72462: LD_INT 1
72464: ARRAY
72465: PPUSH
72466: LD_VAR 0 12
72470: PUSH
72471: LD_INT 2
72473: ARRAY
72474: PPUSH
72475: CALL_OW 298
72479: ST_TO_ADDR
// distance := 9999 ;
72480: LD_ADDR_VAR 0 10
72484: PUSH
72485: LD_INT 9999
72487: ST_TO_ADDR
// for i := 0 to 5 do
72488: LD_ADDR_VAR 0 6
72492: PUSH
72493: DOUBLE
72494: LD_INT 0
72496: DEC
72497: ST_TO_ADDR
72498: LD_INT 5
72500: PUSH
72501: FOR_TO
72502: IFFALSE 72645
// begin _x := ShiftX ( x1 , i , centerDist ) ;
72504: LD_ADDR_VAR 0 7
72508: PUSH
72509: LD_VAR 0 1
72513: PPUSH
72514: LD_VAR 0 6
72518: PPUSH
72519: LD_VAR 0 11
72523: PPUSH
72524: CALL_OW 272
72528: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
72529: LD_ADDR_VAR 0 8
72533: PUSH
72534: LD_VAR 0 2
72538: PPUSH
72539: LD_VAR 0 6
72543: PPUSH
72544: LD_VAR 0 11
72548: PPUSH
72549: CALL_OW 273
72553: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72554: LD_VAR 0 7
72558: PPUSH
72559: LD_VAR 0 8
72563: PPUSH
72564: CALL_OW 488
72568: NOT
72569: IFFALSE 72573
// continue ;
72571: GO 72501
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
72573: LD_ADDR_VAR 0 9
72577: PUSH
72578: LD_VAR 0 12
72582: PUSH
72583: LD_INT 1
72585: ARRAY
72586: PPUSH
72587: LD_VAR 0 12
72591: PUSH
72592: LD_INT 2
72594: ARRAY
72595: PPUSH
72596: LD_VAR 0 7
72600: PPUSH
72601: LD_VAR 0 8
72605: PPUSH
72606: CALL_OW 298
72610: ST_TO_ADDR
// if tmp < distance then
72611: LD_VAR 0 9
72615: PUSH
72616: LD_VAR 0 10
72620: LESS
72621: IFFALSE 72643
// begin result := i ;
72623: LD_ADDR_VAR 0 5
72627: PUSH
72628: LD_VAR 0 6
72632: ST_TO_ADDR
// distance := tmp ;
72633: LD_ADDR_VAR 0 10
72637: PUSH
72638: LD_VAR 0 9
72642: ST_TO_ADDR
// end ; end ;
72643: GO 72501
72645: POP
72646: POP
// end ;
72647: LD_VAR 0 5
72651: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72652: LD_INT 0
72654: PPUSH
72655: PPUSH
// if not driver or not IsInUnit ( driver ) then
72656: LD_VAR 0 1
72660: NOT
72661: PUSH
72662: LD_VAR 0 1
72666: PPUSH
72667: CALL_OW 310
72671: NOT
72672: OR
72673: IFFALSE 72677
// exit ;
72675: GO 72767
// vehicle := IsInUnit ( driver ) ;
72677: LD_ADDR_VAR 0 3
72681: PUSH
72682: LD_VAR 0 1
72686: PPUSH
72687: CALL_OW 310
72691: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72692: LD_VAR 0 1
72696: PPUSH
72697: LD_STRING \
72699: PUSH
72700: LD_INT 0
72702: PUSH
72703: LD_INT 0
72705: PUSH
72706: LD_INT 0
72708: PUSH
72709: LD_INT 0
72711: PUSH
72712: LD_INT 0
72714: PUSH
72715: LD_INT 0
72717: PUSH
72718: EMPTY
72719: LIST
72720: LIST
72721: LIST
72722: LIST
72723: LIST
72724: LIST
72725: LIST
72726: PUSH
72727: LD_STRING E
72729: PUSH
72730: LD_INT 0
72732: PUSH
72733: LD_INT 0
72735: PUSH
72736: LD_VAR 0 3
72740: PUSH
72741: LD_INT 0
72743: PUSH
72744: LD_INT 0
72746: PUSH
72747: LD_INT 0
72749: PUSH
72750: EMPTY
72751: LIST
72752: LIST
72753: LIST
72754: LIST
72755: LIST
72756: LIST
72757: LIST
72758: PUSH
72759: EMPTY
72760: LIST
72761: LIST
72762: PPUSH
72763: CALL_OW 446
// end ;
72767: LD_VAR 0 2
72771: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72772: LD_INT 0
72774: PPUSH
72775: PPUSH
// if not driver or not IsInUnit ( driver ) then
72776: LD_VAR 0 1
72780: NOT
72781: PUSH
72782: LD_VAR 0 1
72786: PPUSH
72787: CALL_OW 310
72791: NOT
72792: OR
72793: IFFALSE 72797
// exit ;
72795: GO 72887
// vehicle := IsInUnit ( driver ) ;
72797: LD_ADDR_VAR 0 3
72801: PUSH
72802: LD_VAR 0 1
72806: PPUSH
72807: CALL_OW 310
72811: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72812: LD_VAR 0 1
72816: PPUSH
72817: LD_STRING \
72819: PUSH
72820: LD_INT 0
72822: PUSH
72823: LD_INT 0
72825: PUSH
72826: LD_INT 0
72828: PUSH
72829: LD_INT 0
72831: PUSH
72832: LD_INT 0
72834: PUSH
72835: LD_INT 0
72837: PUSH
72838: EMPTY
72839: LIST
72840: LIST
72841: LIST
72842: LIST
72843: LIST
72844: LIST
72845: LIST
72846: PUSH
72847: LD_STRING E
72849: PUSH
72850: LD_INT 0
72852: PUSH
72853: LD_INT 0
72855: PUSH
72856: LD_VAR 0 3
72860: PUSH
72861: LD_INT 0
72863: PUSH
72864: LD_INT 0
72866: PUSH
72867: LD_INT 0
72869: PUSH
72870: EMPTY
72871: LIST
72872: LIST
72873: LIST
72874: LIST
72875: LIST
72876: LIST
72877: LIST
72878: PUSH
72879: EMPTY
72880: LIST
72881: LIST
72882: PPUSH
72883: CALL_OW 447
// end ;
72887: LD_VAR 0 2
72891: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72892: LD_INT 0
72894: PPUSH
72895: PPUSH
72896: PPUSH
// tmp := [ ] ;
72897: LD_ADDR_VAR 0 5
72901: PUSH
72902: EMPTY
72903: ST_TO_ADDR
// for i in units do
72904: LD_ADDR_VAR 0 4
72908: PUSH
72909: LD_VAR 0 1
72913: PUSH
72914: FOR_IN
72915: IFFALSE 72953
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72917: LD_ADDR_VAR 0 5
72921: PUSH
72922: LD_VAR 0 5
72926: PPUSH
72927: LD_VAR 0 5
72931: PUSH
72932: LD_INT 1
72934: PLUS
72935: PPUSH
72936: LD_VAR 0 4
72940: PPUSH
72941: CALL_OW 256
72945: PPUSH
72946: CALL_OW 2
72950: ST_TO_ADDR
72951: GO 72914
72953: POP
72954: POP
// if not tmp then
72955: LD_VAR 0 5
72959: NOT
72960: IFFALSE 72964
// exit ;
72962: GO 73012
// if asc then
72964: LD_VAR 0 2
72968: IFFALSE 72992
// result := SortListByListAsc ( units , tmp ) else
72970: LD_ADDR_VAR 0 3
72974: PUSH
72975: LD_VAR 0 1
72979: PPUSH
72980: LD_VAR 0 5
72984: PPUSH
72985: CALL_OW 76
72989: ST_TO_ADDR
72990: GO 73012
// result := SortListByListDesc ( units , tmp ) ;
72992: LD_ADDR_VAR 0 3
72996: PUSH
72997: LD_VAR 0 1
73001: PPUSH
73002: LD_VAR 0 5
73006: PPUSH
73007: CALL_OW 77
73011: ST_TO_ADDR
// end ;
73012: LD_VAR 0 3
73016: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73017: LD_INT 0
73019: PPUSH
73020: PPUSH
// task := GetTaskList ( mech ) ;
73021: LD_ADDR_VAR 0 4
73025: PUSH
73026: LD_VAR 0 1
73030: PPUSH
73031: CALL_OW 437
73035: ST_TO_ADDR
// if not task then
73036: LD_VAR 0 4
73040: NOT
73041: IFFALSE 73045
// exit ;
73043: GO 73087
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73045: LD_ADDR_VAR 0 3
73049: PUSH
73050: LD_VAR 0 4
73054: PUSH
73055: LD_INT 1
73057: ARRAY
73058: PUSH
73059: LD_INT 1
73061: ARRAY
73062: PUSH
73063: LD_STRING r
73065: EQUAL
73066: PUSH
73067: LD_VAR 0 4
73071: PUSH
73072: LD_INT 1
73074: ARRAY
73075: PUSH
73076: LD_INT 4
73078: ARRAY
73079: PUSH
73080: LD_VAR 0 2
73084: EQUAL
73085: AND
73086: ST_TO_ADDR
// end ;
73087: LD_VAR 0 3
73091: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73092: LD_INT 0
73094: PPUSH
// SetDir ( unit , d ) ;
73095: LD_VAR 0 1
73099: PPUSH
73100: LD_VAR 0 4
73104: PPUSH
73105: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
73109: LD_VAR 0 1
73113: PPUSH
73114: LD_VAR 0 2
73118: PPUSH
73119: LD_VAR 0 3
73123: PPUSH
73124: LD_VAR 0 5
73128: PPUSH
73129: CALL_OW 48
// end ;
73133: LD_VAR 0 6
73137: RET
// export function ToNaturalNumber ( number ) ; begin
73138: LD_INT 0
73140: PPUSH
// result := number div 1 ;
73141: LD_ADDR_VAR 0 2
73145: PUSH
73146: LD_VAR 0 1
73150: PUSH
73151: LD_INT 1
73153: DIV
73154: ST_TO_ADDR
// if number < 0 then
73155: LD_VAR 0 1
73159: PUSH
73160: LD_INT 0
73162: LESS
73163: IFFALSE 73173
// result := 0 ;
73165: LD_ADDR_VAR 0 2
73169: PUSH
73170: LD_INT 0
73172: ST_TO_ADDR
// end ;
73173: LD_VAR 0 2
73177: RET
// export function SortByClass ( units , class ) ; var un ; begin
73178: LD_INT 0
73180: PPUSH
73181: PPUSH
// if not units or not class then
73182: LD_VAR 0 1
73186: NOT
73187: PUSH
73188: LD_VAR 0 2
73192: NOT
73193: OR
73194: IFFALSE 73198
// exit ;
73196: GO 73293
// result := [ ] ;
73198: LD_ADDR_VAR 0 3
73202: PUSH
73203: EMPTY
73204: ST_TO_ADDR
// for un in units do
73205: LD_ADDR_VAR 0 4
73209: PUSH
73210: LD_VAR 0 1
73214: PUSH
73215: FOR_IN
73216: IFFALSE 73291
// if GetClass ( un ) = class then
73218: LD_VAR 0 4
73222: PPUSH
73223: CALL_OW 257
73227: PUSH
73228: LD_VAR 0 2
73232: EQUAL
73233: IFFALSE 73260
// result := Insert ( result , 1 , un ) else
73235: LD_ADDR_VAR 0 3
73239: PUSH
73240: LD_VAR 0 3
73244: PPUSH
73245: LD_INT 1
73247: PPUSH
73248: LD_VAR 0 4
73252: PPUSH
73253: CALL_OW 2
73257: ST_TO_ADDR
73258: GO 73289
// result := Replace ( result , result + 1 , un ) ;
73260: LD_ADDR_VAR 0 3
73264: PUSH
73265: LD_VAR 0 3
73269: PPUSH
73270: LD_VAR 0 3
73274: PUSH
73275: LD_INT 1
73277: PLUS
73278: PPUSH
73279: LD_VAR 0 4
73283: PPUSH
73284: CALL_OW 1
73288: ST_TO_ADDR
73289: GO 73215
73291: POP
73292: POP
// end ;
73293: LD_VAR 0 3
73297: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
73298: LD_INT 0
73300: PPUSH
73301: PPUSH
73302: PPUSH
73303: PPUSH
73304: PPUSH
73305: PPUSH
73306: PPUSH
// result := [ ] ;
73307: LD_ADDR_VAR 0 4
73311: PUSH
73312: EMPTY
73313: ST_TO_ADDR
// if x - r < 0 then
73314: LD_VAR 0 1
73318: PUSH
73319: LD_VAR 0 3
73323: MINUS
73324: PUSH
73325: LD_INT 0
73327: LESS
73328: IFFALSE 73340
// min_x := 0 else
73330: LD_ADDR_VAR 0 8
73334: PUSH
73335: LD_INT 0
73337: ST_TO_ADDR
73338: GO 73356
// min_x := x - r ;
73340: LD_ADDR_VAR 0 8
73344: PUSH
73345: LD_VAR 0 1
73349: PUSH
73350: LD_VAR 0 3
73354: MINUS
73355: ST_TO_ADDR
// if y - r < 0 then
73356: LD_VAR 0 2
73360: PUSH
73361: LD_VAR 0 3
73365: MINUS
73366: PUSH
73367: LD_INT 0
73369: LESS
73370: IFFALSE 73382
// min_y := 0 else
73372: LD_ADDR_VAR 0 7
73376: PUSH
73377: LD_INT 0
73379: ST_TO_ADDR
73380: GO 73398
// min_y := y - r ;
73382: LD_ADDR_VAR 0 7
73386: PUSH
73387: LD_VAR 0 2
73391: PUSH
73392: LD_VAR 0 3
73396: MINUS
73397: ST_TO_ADDR
// max_x := x + r ;
73398: LD_ADDR_VAR 0 9
73402: PUSH
73403: LD_VAR 0 1
73407: PUSH
73408: LD_VAR 0 3
73412: PLUS
73413: ST_TO_ADDR
// max_y := y + r ;
73414: LD_ADDR_VAR 0 10
73418: PUSH
73419: LD_VAR 0 2
73423: PUSH
73424: LD_VAR 0 3
73428: PLUS
73429: ST_TO_ADDR
// for _x = min_x to max_x do
73430: LD_ADDR_VAR 0 5
73434: PUSH
73435: DOUBLE
73436: LD_VAR 0 8
73440: DEC
73441: ST_TO_ADDR
73442: LD_VAR 0 9
73446: PUSH
73447: FOR_TO
73448: IFFALSE 73549
// for _y = min_y to max_y do
73450: LD_ADDR_VAR 0 6
73454: PUSH
73455: DOUBLE
73456: LD_VAR 0 7
73460: DEC
73461: ST_TO_ADDR
73462: LD_VAR 0 10
73466: PUSH
73467: FOR_TO
73468: IFFALSE 73545
// begin if not ValidHex ( _x , _y ) then
73470: LD_VAR 0 5
73474: PPUSH
73475: LD_VAR 0 6
73479: PPUSH
73480: CALL_OW 488
73484: NOT
73485: IFFALSE 73489
// continue ;
73487: GO 73467
// if GetResourceTypeXY ( _x , _y ) then
73489: LD_VAR 0 5
73493: PPUSH
73494: LD_VAR 0 6
73498: PPUSH
73499: CALL_OW 283
73503: IFFALSE 73543
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
73505: LD_ADDR_VAR 0 4
73509: PUSH
73510: LD_VAR 0 4
73514: PPUSH
73515: LD_VAR 0 4
73519: PUSH
73520: LD_INT 1
73522: PLUS
73523: PPUSH
73524: LD_VAR 0 5
73528: PUSH
73529: LD_VAR 0 6
73533: PUSH
73534: EMPTY
73535: LIST
73536: LIST
73537: PPUSH
73538: CALL_OW 1
73542: ST_TO_ADDR
// end ;
73543: GO 73467
73545: POP
73546: POP
73547: GO 73447
73549: POP
73550: POP
// end ;
73551: LD_VAR 0 4
73555: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
73556: LD_INT 0
73558: PPUSH
73559: PPUSH
73560: PPUSH
73561: PPUSH
73562: PPUSH
73563: PPUSH
73564: PPUSH
73565: PPUSH
// if not units then
73566: LD_VAR 0 1
73570: NOT
73571: IFFALSE 73575
// exit ;
73573: GO 74000
// result := UnitFilter ( units , [ f_ok ] ) ;
73575: LD_ADDR_VAR 0 3
73579: PUSH
73580: LD_VAR 0 1
73584: PPUSH
73585: LD_INT 50
73587: PUSH
73588: EMPTY
73589: LIST
73590: PPUSH
73591: CALL_OW 72
73595: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
73596: LD_ADDR_VAR 0 8
73600: PUSH
73601: LD_VAR 0 1
73605: PUSH
73606: LD_INT 1
73608: ARRAY
73609: PPUSH
73610: CALL_OW 255
73614: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
73615: LD_ADDR_VAR 0 10
73619: PUSH
73620: LD_INT 29
73622: PUSH
73623: LD_EXP 40
73627: PUSH
73628: EMPTY
73629: LIST
73630: LIST
73631: ST_TO_ADDR
// if not result then
73632: LD_VAR 0 3
73636: NOT
73637: IFFALSE 73641
// exit ;
73639: GO 74000
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
73641: LD_ADDR_VAR 0 5
73645: PUSH
73646: LD_INT 81
73648: PUSH
73649: LD_VAR 0 8
73653: PUSH
73654: EMPTY
73655: LIST
73656: LIST
73657: PPUSH
73658: CALL_OW 69
73662: ST_TO_ADDR
// for i in result do
73663: LD_ADDR_VAR 0 4
73667: PUSH
73668: LD_VAR 0 3
73672: PUSH
73673: FOR_IN
73674: IFFALSE 73998
// begin tag := GetTag ( i ) + 1 ;
73676: LD_ADDR_VAR 0 9
73680: PUSH
73681: LD_VAR 0 4
73685: PPUSH
73686: CALL_OW 110
73690: PUSH
73691: LD_INT 1
73693: PLUS
73694: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
73695: LD_ADDR_VAR 0 7
73699: PUSH
73700: LD_VAR 0 4
73704: PPUSH
73705: CALL_OW 250
73709: PPUSH
73710: LD_VAR 0 4
73714: PPUSH
73715: CALL_OW 251
73719: PPUSH
73720: LD_INT 6
73722: PPUSH
73723: CALL 73298 0 3
73727: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
73728: LD_VAR 0 7
73732: PUSH
73733: LD_VAR 0 4
73737: PPUSH
73738: CALL_OW 264
73742: PUSH
73743: LD_VAR 0 10
73747: IN
73748: NOT
73749: AND
73750: IFFALSE 73789
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
73752: LD_VAR 0 4
73756: PPUSH
73757: LD_VAR 0 7
73761: PUSH
73762: LD_INT 1
73764: ARRAY
73765: PUSH
73766: LD_INT 1
73768: ARRAY
73769: PPUSH
73770: LD_VAR 0 7
73774: PUSH
73775: LD_INT 1
73777: ARRAY
73778: PUSH
73779: LD_INT 2
73781: ARRAY
73782: PPUSH
73783: CALL_OW 116
73787: GO 73996
// if path > tag then
73789: LD_VAR 0 2
73793: PUSH
73794: LD_VAR 0 9
73798: GREATER
73799: IFFALSE 73966
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
73801: LD_ADDR_VAR 0 6
73805: PUSH
73806: LD_VAR 0 5
73810: PPUSH
73811: LD_INT 91
73813: PUSH
73814: LD_VAR 0 4
73818: PUSH
73819: LD_INT 12
73821: PUSH
73822: EMPTY
73823: LIST
73824: LIST
73825: LIST
73826: PPUSH
73827: CALL_OW 72
73831: ST_TO_ADDR
// if nearEnemy then
73832: LD_VAR 0 6
73836: IFFALSE 73864
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73838: LD_VAR 0 4
73842: PPUSH
73843: LD_VAR 0 6
73847: PPUSH
73848: LD_VAR 0 4
73852: PPUSH
73853: CALL_OW 74
73857: PPUSH
73858: CALL_OW 115
73862: GO 73964
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73864: LD_VAR 0 4
73868: PPUSH
73869: LD_VAR 0 2
73873: PUSH
73874: LD_VAR 0 9
73878: ARRAY
73879: PUSH
73880: LD_INT 1
73882: ARRAY
73883: PPUSH
73884: LD_VAR 0 2
73888: PUSH
73889: LD_VAR 0 9
73893: ARRAY
73894: PUSH
73895: LD_INT 2
73897: ARRAY
73898: PPUSH
73899: CALL_OW 297
73903: PUSH
73904: LD_INT 6
73906: GREATER
73907: IFFALSE 73950
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73909: LD_VAR 0 4
73913: PPUSH
73914: LD_VAR 0 2
73918: PUSH
73919: LD_VAR 0 9
73923: ARRAY
73924: PUSH
73925: LD_INT 1
73927: ARRAY
73928: PPUSH
73929: LD_VAR 0 2
73933: PUSH
73934: LD_VAR 0 9
73938: ARRAY
73939: PUSH
73940: LD_INT 2
73942: ARRAY
73943: PPUSH
73944: CALL_OW 114
73948: GO 73964
// SetTag ( i , tag ) ;
73950: LD_VAR 0 4
73954: PPUSH
73955: LD_VAR 0 9
73959: PPUSH
73960: CALL_OW 109
// end else
73964: GO 73996
// if enemy then
73966: LD_VAR 0 5
73970: IFFALSE 73996
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73972: LD_VAR 0 4
73976: PPUSH
73977: LD_VAR 0 5
73981: PPUSH
73982: LD_VAR 0 4
73986: PPUSH
73987: CALL_OW 74
73991: PPUSH
73992: CALL_OW 115
// end ;
73996: GO 73673
73998: POP
73999: POP
// end ;
74000: LD_VAR 0 3
74004: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
74005: LD_INT 0
74007: PPUSH
74008: PPUSH
74009: PPUSH
// if not unit or IsInUnit ( unit ) then
74010: LD_VAR 0 1
74014: NOT
74015: PUSH
74016: LD_VAR 0 1
74020: PPUSH
74021: CALL_OW 310
74025: OR
74026: IFFALSE 74030
// exit ;
74028: GO 74121
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
74030: LD_ADDR_VAR 0 4
74034: PUSH
74035: LD_VAR 0 1
74039: PPUSH
74040: CALL_OW 250
74044: PPUSH
74045: LD_VAR 0 2
74049: PPUSH
74050: LD_INT 1
74052: PPUSH
74053: CALL_OW 272
74057: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
74058: LD_ADDR_VAR 0 5
74062: PUSH
74063: LD_VAR 0 1
74067: PPUSH
74068: CALL_OW 251
74072: PPUSH
74073: LD_VAR 0 2
74077: PPUSH
74078: LD_INT 1
74080: PPUSH
74081: CALL_OW 273
74085: ST_TO_ADDR
// if ValidHex ( x , y ) then
74086: LD_VAR 0 4
74090: PPUSH
74091: LD_VAR 0 5
74095: PPUSH
74096: CALL_OW 488
74100: IFFALSE 74121
// ComTurnXY ( unit , x , y ) ;
74102: LD_VAR 0 1
74106: PPUSH
74107: LD_VAR 0 4
74111: PPUSH
74112: LD_VAR 0 5
74116: PPUSH
74117: CALL_OW 118
// end ;
74121: LD_VAR 0 3
74125: RET
// export function SeeUnits ( side , units ) ; var i ; begin
74126: LD_INT 0
74128: PPUSH
74129: PPUSH
// result := false ;
74130: LD_ADDR_VAR 0 3
74134: PUSH
74135: LD_INT 0
74137: ST_TO_ADDR
// if not units then
74138: LD_VAR 0 2
74142: NOT
74143: IFFALSE 74147
// exit ;
74145: GO 74192
// for i in units do
74147: LD_ADDR_VAR 0 4
74151: PUSH
74152: LD_VAR 0 2
74156: PUSH
74157: FOR_IN
74158: IFFALSE 74190
// if See ( side , i ) then
74160: LD_VAR 0 1
74164: PPUSH
74165: LD_VAR 0 4
74169: PPUSH
74170: CALL_OW 292
74174: IFFALSE 74188
// begin result := true ;
74176: LD_ADDR_VAR 0 3
74180: PUSH
74181: LD_INT 1
74183: ST_TO_ADDR
// exit ;
74184: POP
74185: POP
74186: GO 74192
// end ;
74188: GO 74157
74190: POP
74191: POP
// end ;
74192: LD_VAR 0 3
74196: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
74197: LD_INT 0
74199: PPUSH
74200: PPUSH
74201: PPUSH
74202: PPUSH
// if not unit or not points then
74203: LD_VAR 0 1
74207: NOT
74208: PUSH
74209: LD_VAR 0 2
74213: NOT
74214: OR
74215: IFFALSE 74219
// exit ;
74217: GO 74309
// dist := 99999 ;
74219: LD_ADDR_VAR 0 5
74223: PUSH
74224: LD_INT 99999
74226: ST_TO_ADDR
// for i in points do
74227: LD_ADDR_VAR 0 4
74231: PUSH
74232: LD_VAR 0 2
74236: PUSH
74237: FOR_IN
74238: IFFALSE 74307
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
74240: LD_ADDR_VAR 0 6
74244: PUSH
74245: LD_VAR 0 1
74249: PPUSH
74250: LD_VAR 0 4
74254: PUSH
74255: LD_INT 1
74257: ARRAY
74258: PPUSH
74259: LD_VAR 0 4
74263: PUSH
74264: LD_INT 2
74266: ARRAY
74267: PPUSH
74268: CALL_OW 297
74272: ST_TO_ADDR
// if tmpDist < dist then
74273: LD_VAR 0 6
74277: PUSH
74278: LD_VAR 0 5
74282: LESS
74283: IFFALSE 74305
// begin result := i ;
74285: LD_ADDR_VAR 0 3
74289: PUSH
74290: LD_VAR 0 4
74294: ST_TO_ADDR
// dist := tmpDist ;
74295: LD_ADDR_VAR 0 5
74299: PUSH
74300: LD_VAR 0 6
74304: ST_TO_ADDR
// end ; end ;
74305: GO 74237
74307: POP
74308: POP
// end ; end_of_file
74309: LD_VAR 0 3
74313: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74314: LD_VAR 0 1
74318: PUSH
74319: LD_INT 200
74321: DOUBLE
74322: GREATEREQUAL
74323: IFFALSE 74331
74325: LD_INT 299
74327: DOUBLE
74328: LESSEQUAL
74329: IFTRUE 74333
74331: GO 74365
74333: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74334: LD_VAR 0 1
74338: PPUSH
74339: LD_VAR 0 2
74343: PPUSH
74344: LD_VAR 0 3
74348: PPUSH
74349: LD_VAR 0 4
74353: PPUSH
74354: LD_VAR 0 5
74358: PPUSH
74359: CALL 30340 0 5
74363: GO 74442
74365: LD_INT 300
74367: DOUBLE
74368: GREATEREQUAL
74369: IFFALSE 74377
74371: LD_INT 399
74373: DOUBLE
74374: LESSEQUAL
74375: IFTRUE 74379
74377: GO 74441
74379: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74380: LD_VAR 0 1
74384: PPUSH
74385: LD_VAR 0 2
74389: PPUSH
74390: LD_VAR 0 3
74394: PPUSH
74395: LD_VAR 0 4
74399: PPUSH
74400: LD_VAR 0 5
74404: PPUSH
74405: LD_VAR 0 6
74409: PPUSH
74410: LD_VAR 0 7
74414: PPUSH
74415: LD_VAR 0 8
74419: PPUSH
74420: LD_VAR 0 9
74424: PPUSH
74425: LD_VAR 0 10
74429: PPUSH
74430: LD_VAR 0 11
74434: PPUSH
74435: CALL 28238 0 11
74439: GO 74442
74441: POP
// end ;
74442: PPOPN 11
74444: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74445: LD_VAR 0 1
74449: PPUSH
74450: LD_VAR 0 2
74454: PPUSH
74455: LD_VAR 0 3
74459: PPUSH
74460: LD_VAR 0 4
74464: PPUSH
74465: LD_VAR 0 5
74469: PPUSH
74470: CALL 30332 0 5
// end ; end_of_file
74474: PPOPN 5
74476: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74477: LD_VAR 0 1
74481: PPUSH
74482: LD_VAR 0 2
74486: PPUSH
74487: LD_VAR 0 3
74491: PPUSH
74492: LD_VAR 0 4
74496: PPUSH
74497: LD_VAR 0 5
74501: PPUSH
74502: LD_VAR 0 6
74506: PPUSH
74507: CALL 16433 0 6
// end ;
74511: PPOPN 6
74513: END
