// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix , debug ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 77 0 0
// if debug then
  19: LD_EXP 34
  23: IFFALSE 40
// begin Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// end ; PrepareDifficulty ;
  40: CALL 10516 0 0
// PrepareRussianCommander ;
  44: CALL 12050 0 0
// PrepareSouthBase ;
  48: CALL 12146 0 0
// PrepareNorthBase ;
  52: CALL 12484 0 0
// PrepareOtherRussians ;
  56: CALL 12879 0 0
// PrepareHeroes ;
  60: CALL 10837 0 0
// PrepareLisSquad ;
  64: CALL 11207 0 0
// PrepareOtherAmericans ;
  68: CALL 11520 0 0
// Action ;
  72: CALL 329 0 0
// end ;
  76: END
// function Init ; begin
  77: LD_INT 0
  79: PPUSH
// debug := false ;
  80: LD_ADDR_EXP 34
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// mission_prefix := 02_ ;
  88: LD_ADDR_EXP 33
  92: PUSH
  93: LD_STRING 02_
  95: ST_TO_ADDR
// RuSoldMinLevel := 0 ;
  96: LD_ADDR_EXP 13
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// RuSoldMaxLevel := 0 ;
 104: LD_ADDR_EXP 14
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// hpJMM := 0 ;
 112: LD_ADDR_EXP 10
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// hpBobby := 0 ;
 120: LD_ADDR_EXP 11
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// hpCyrus := 0 ;
 128: LD_ADDR_EXP 12
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// cargoEscape := 0 ;
 136: LD_ADDR_EXP 20
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// mikhailStatus := 0 ;
 144: LD_ADDR_EXP 21
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// mikhailInBase := 0 ;
 152: LD_ADDR_EXP 22
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// mikhailDepot := 0 ;
 160: LD_ADDR_EXP 23
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// tigersRespawn := 0 ;
 168: LD_ADDR_EXP 30
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// cargoRespawn := 0 ;
 176: LD_ADDR_EXP 28
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cargoSee := 0 ;
 184: LD_ADDR_EXP 29
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// lastBattle := 0 ;
 192: LD_ADDR_EXP 27
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// deadsCounter := 0 ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// spotCorpses := 0 ;
 208: LD_ADDR_EXP 32
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// southBaseDefenders := [ ] ;
 216: LD_ADDR_EXP 25
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// northBaseDefenders := [ ] ;
 223: LD_ADDR_EXP 24
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// attackGroup := [ ] ;
 230: LD_ADDR_EXP 26
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// end ;
 237: LD_VAR 0 1
 241: RET
// every 0 0$1 trigger debug do var i ;
 242: LD_EXP 34
 246: IFFALSE 326
 248: GO 250
 250: DISABLE
 251: LD_INT 0
 253: PPUSH
// begin enable ;
 254: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
 255: LD_ADDR_VAR 0 1
 259: PUSH
 260: LD_INT 22
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 21
 272: PUSH
 273: LD_INT 1
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: LD_INT 3
 282: PUSH
 283: LD_INT 24
 285: PUSH
 286: LD_INT 1000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: PUSH
 307: FOR_IN
 308: IFFALSE 324
// SetLives ( i , 1000 ) ;
 310: LD_VAR 0 1
 314: PPUSH
 315: LD_INT 1000
 317: PPUSH
 318: CALL_OW 234
 322: GO 307
 324: POP
 325: POP
// end ; end_of_file
 326: PPOPN 1
 328: END
// export function Action ; var tmp ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// InGameOn ;
 333: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
 337: LD_EXP 1
 341: PPUSH
 342: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 346: LD_ADDR_VAR 0 2
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 4
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: LD_EXP 4
 384: PUSH
 385: EMPTY
 386: LIST
 387: DIFF
 388: ST_TO_ADDR
// if Cyrus and Bobby then
 389: LD_EXP 3
 393: PUSH
 394: LD_EXP 2
 398: AND
 399: IFFALSE 729
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 401: LD_EXP 3
 405: PPUSH
 406: LD_INT 43
 408: PPUSH
 409: LD_INT 72
 411: PPUSH
 412: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 416: LD_EXP 2
 420: PPUSH
 421: LD_INT 44
 423: PPUSH
 424: LD_INT 70
 426: PPUSH
 427: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 431: LD_EXP 1
 435: PPUSH
 436: LD_INT 46
 438: PPUSH
 439: LD_INT 73
 441: PPUSH
 442: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 446: LD_EXP 3
 450: PPUSH
 451: LD_STRING D1a-Cyrus-1
 453: PPUSH
 454: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 458: LD_EXP 1
 462: PPUSH
 463: LD_STRING D1a-JMM-1
 465: PPUSH
 466: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 470: LD_EXP 3
 474: PPUSH
 475: LD_INT 37
 477: PPUSH
 478: LD_INT 66
 480: PPUSH
 481: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 485: LD_EXP 2
 489: PPUSH
 490: LD_INT 41
 492: PPUSH
 493: LD_INT 67
 495: PPUSH
 496: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 500: LD_EXP 1
 504: PPUSH
 505: LD_INT 38
 507: PPUSH
 508: LD_INT 64
 510: PPUSH
 511: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 515: LD_EXP 2
 519: PPUSH
 520: LD_STRING D1a-Bobby-2
 522: PPUSH
 523: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 527: LD_EXP 3
 531: PPUSH
 532: LD_INT 35
 534: PPUSH
 535: LD_INT 62
 537: PPUSH
 538: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 542: LD_EXP 2
 546: PPUSH
 547: LD_INT 32
 549: PPUSH
 550: LD_INT 60
 552: PPUSH
 553: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_INT 35
 564: PPUSH
 565: LD_INT 60
 567: PPUSH
 568: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 572: LD_EXP 1
 576: PPUSH
 577: LD_STRING D1a-JMM-2
 579: PPUSH
 580: CALL_OW 88
// ComWalk ( Lisa ) ;
 584: LD_EXP 4
 588: PPUSH
 589: CALL_OW 138
// wait ( 0 0$1 ) ;
 593: LD_INT 35
 595: PPUSH
 596: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 600: LD_EXP 4
 604: PPUSH
 605: LD_EXP 1
 609: PPUSH
 610: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 614: LD_EXP 1
 618: PUSH
 619: LD_EXP 3
 623: PUSH
 624: LD_EXP 2
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: LIST
 633: PPUSH
 634: LD_EXP 4
 638: PPUSH
 639: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 643: LD_VAR 0 2
 647: PUSH
 648: LD_INT 1
 650: ARRAY
 651: PPUSH
 652: LD_INT 33
 654: PPUSH
 655: LD_INT 55
 657: PPUSH
 658: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 2
 669: ARRAY
 670: PPUSH
 671: LD_INT 30
 673: PPUSH
 674: LD_INT 54
 676: PPUSH
 677: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 1
 688: ARRAY
 689: PPUSH
 690: LD_EXP 1
 694: PPUSH
 695: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 699: LD_VAR 0 2
 703: PUSH
 704: LD_INT 2
 706: ARRAY
 707: PPUSH
 708: LD_EXP 1
 712: PPUSH
 713: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 717: LD_EXP 4
 721: PPUSH
 722: LD_STRING D1a-Lisa-2
 724: PPUSH
 725: CALL_OW 88
// end ; if Cyrus and not Bobby then
 729: LD_EXP 3
 733: PUSH
 734: LD_EXP 2
 738: NOT
 739: AND
 740: IFFALSE 945
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 742: LD_EXP 3
 746: PPUSH
 747: LD_INT 43
 749: PPUSH
 750: LD_INT 72
 752: PPUSH
 753: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 757: LD_EXP 1
 761: PPUSH
 762: LD_INT 46
 764: PPUSH
 765: LD_INT 73
 767: PPUSH
 768: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 772: LD_EXP 3
 776: PPUSH
 777: LD_STRING D1a-Cyrus-1
 779: PPUSH
 780: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 784: LD_EXP 1
 788: PPUSH
 789: LD_STRING D1a-JMM-1
 791: PPUSH
 792: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 796: LD_EXP 3
 800: PPUSH
 801: LD_INT 37
 803: PPUSH
 804: LD_INT 66
 806: PPUSH
 807: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 811: LD_EXP 1
 815: PPUSH
 816: LD_INT 38
 818: PPUSH
 819: LD_INT 64
 821: PPUSH
 822: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 826: LD_EXP 3
 830: PPUSH
 831: LD_STRING D1a-Cyrus-2
 833: PPUSH
 834: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 838: LD_EXP 3
 842: PPUSH
 843: LD_INT 35
 845: PPUSH
 846: LD_INT 62
 848: PPUSH
 849: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 853: LD_EXP 1
 857: PPUSH
 858: LD_INT 35
 860: PPUSH
 861: LD_INT 60
 863: PPUSH
 864: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 868: LD_EXP 1
 872: PPUSH
 873: LD_STRING D1a-JMM-2
 875: PPUSH
 876: CALL_OW 88
// ComWalk ( Lisa ) ;
 880: LD_EXP 4
 884: PPUSH
 885: CALL_OW 138
// wait ( 0 0$1 ) ;
 889: LD_INT 35
 891: PPUSH
 892: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 896: LD_EXP 4
 900: PPUSH
 901: LD_EXP 1
 905: PPUSH
 906: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 910: LD_EXP 4
 914: PPUSH
 915: LD_STRING D1a-Lisa-2
 917: PPUSH
 918: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 922: LD_EXP 1
 926: PUSH
 927: LD_EXP 3
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PPUSH
 936: LD_EXP 4
 940: PPUSH
 941: CALL_OW 119
// end ; if not Cyrus and Bobby then
 945: LD_EXP 3
 949: NOT
 950: PUSH
 951: LD_EXP 2
 955: AND
 956: IFFALSE 1235
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 958: LD_EXP 2
 962: PPUSH
 963: LD_INT 44
 965: PPUSH
 966: LD_INT 70
 968: PPUSH
 969: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 973: LD_EXP 1
 977: PPUSH
 978: LD_INT 46
 980: PPUSH
 981: LD_INT 73
 983: PPUSH
 984: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 988: LD_EXP 2
 992: PPUSH
 993: LD_STRING D1a-Bobby-1
 995: PPUSH
 996: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
1000: LD_EXP 1
1004: PPUSH
1005: LD_STRING D1a-JMM-1
1007: PPUSH
1008: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
1012: LD_EXP 2
1016: PPUSH
1017: LD_INT 37
1019: PPUSH
1020: LD_INT 66
1022: PPUSH
1023: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
1027: LD_EXP 1
1031: PPUSH
1032: LD_INT 38
1034: PPUSH
1035: LD_INT 64
1037: PPUSH
1038: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
1042: LD_EXP 2
1046: PPUSH
1047: LD_STRING D1a-Bobby-2
1049: PPUSH
1050: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
1054: LD_EXP 2
1058: PPUSH
1059: LD_INT 35
1061: PPUSH
1062: LD_INT 62
1064: PPUSH
1065: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
1069: LD_EXP 1
1073: PPUSH
1074: LD_INT 35
1076: PPUSH
1077: LD_INT 60
1079: PPUSH
1080: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
1084: LD_EXP 1
1088: PPUSH
1089: LD_STRING D1a-JMM-2
1091: PPUSH
1092: CALL_OW 88
// ComWalk ( Lisa ) ;
1096: LD_EXP 4
1100: PPUSH
1101: CALL_OW 138
// wait ( 0 0$1 ) ;
1105: LD_INT 35
1107: PPUSH
1108: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1112: LD_EXP 4
1116: PPUSH
1117: LD_EXP 1
1121: PPUSH
1122: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
1126: LD_EXP 1
1130: PUSH
1131: LD_EXP 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PPUSH
1140: LD_EXP 4
1144: PPUSH
1145: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1149: LD_VAR 0 2
1153: PUSH
1154: LD_INT 1
1156: ARRAY
1157: PPUSH
1158: LD_INT 33
1160: PPUSH
1161: LD_INT 55
1163: PPUSH
1164: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 2
1175: ARRAY
1176: PPUSH
1177: LD_INT 30
1179: PPUSH
1180: LD_INT 54
1182: PPUSH
1183: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PPUSH
1196: LD_EXP 1
1200: PPUSH
1201: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1205: LD_VAR 0 2
1209: PUSH
1210: LD_INT 2
1212: ARRAY
1213: PPUSH
1214: LD_EXP 1
1218: PPUSH
1219: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1223: LD_EXP 4
1227: PPUSH
1228: LD_STRING D1a-Lisa-2
1230: PPUSH
1231: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1235: LD_EXP 3
1239: NOT
1240: PUSH
1241: LD_EXP 2
1245: NOT
1246: AND
1247: IFFALSE 1461
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1249: LD_EXP 1
1253: PPUSH
1254: LD_INT 37
1256: PPUSH
1257: LD_INT 66
1259: PPUSH
1260: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1264: LD_EXP 1
1268: PPUSH
1269: LD_STRING D1b-JMM-1
1271: PPUSH
1272: CALL_OW 88
// ComCrawl ( JMM ) ;
1276: LD_EXP 1
1280: PPUSH
1281: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1285: LD_EXP 1
1289: PPUSH
1290: LD_INT 35
1292: PPUSH
1293: LD_INT 60
1295: PPUSH
1296: CALL_OW 171
// wait ( 0 0$8 ) ;
1300: LD_INT 280
1302: PPUSH
1303: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1307: LD_EXP 1
1311: PPUSH
1312: LD_STRING D1b-JMM-1a
1314: PPUSH
1315: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1319: LD_EXP 1
1323: PUSH
1324: LD_EXP 4
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: PPUSH
1333: CALL_OW 138
// wait ( 0 0$1 ) ;
1337: LD_INT 35
1339: PPUSH
1340: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1344: LD_EXP 4
1348: PPUSH
1349: LD_EXP 1
1353: PPUSH
1354: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1358: LD_EXP 1
1362: PUSH
1363: EMPTY
1364: LIST
1365: PPUSH
1366: LD_EXP 4
1370: PPUSH
1371: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1375: LD_VAR 0 2
1379: PUSH
1380: LD_INT 1
1382: ARRAY
1383: PPUSH
1384: LD_INT 33
1386: PPUSH
1387: LD_INT 55
1389: PPUSH
1390: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1394: LD_VAR 0 2
1398: PUSH
1399: LD_INT 2
1401: ARRAY
1402: PPUSH
1403: LD_INT 30
1405: PPUSH
1406: LD_INT 54
1408: PPUSH
1409: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1413: LD_VAR 0 2
1417: PUSH
1418: LD_INT 1
1420: ARRAY
1421: PPUSH
1422: LD_EXP 1
1426: PPUSH
1427: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1431: LD_VAR 0 2
1435: PUSH
1436: LD_INT 2
1438: ARRAY
1439: PPUSH
1440: LD_EXP 1
1444: PPUSH
1445: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1449: LD_EXP 4
1453: PPUSH
1454: LD_STRING D1b-Lisa-1
1456: PPUSH
1457: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1461: LD_EXP 1
1465: PPUSH
1466: LD_STRING D1-JMM-1
1468: PPUSH
1469: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1473: LD_EXP 4
1477: PPUSH
1478: LD_STRING D1-Lisa-1
1480: PPUSH
1481: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1485: LD_EXP 1
1489: PPUSH
1490: LD_STRING D1-JMM-2
1492: PPUSH
1493: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1497: LD_EXP 9
1501: PPUSH
1502: LD_STRING D1-Pow-2
1504: PPUSH
1505: CALL_OW 94
// if Cyrus then
1509: LD_EXP 3
1513: IFFALSE 1539
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1515: LD_EXP 3
1519: PPUSH
1520: LD_STRING D1-Cyrus-2
1522: PPUSH
1523: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1527: LD_EXP 1
1531: PPUSH
1532: LD_STRING D1-JMM-3
1534: PPUSH
1535: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1539: LD_EXP 9
1543: PPUSH
1544: LD_STRING D1-Pow-3
1546: PPUSH
1547: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1551: LD_EXP 1
1555: PPUSH
1556: LD_STRING D1-JMM-4
1558: PPUSH
1559: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1563: LD_EXP 9
1567: PPUSH
1568: LD_STRING D1-Pow-4
1570: PPUSH
1571: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1575: LD_EXP 9
1579: PPUSH
1580: LD_STRING D1-Pow-4a
1582: PPUSH
1583: CALL_OW 94
// if Cyrus then
1587: LD_EXP 3
1591: IFFALSE 1605
// Say ( Cyrus , D1-Cyrus-4 ) ;
1593: LD_EXP 3
1597: PPUSH
1598: LD_STRING D1-Cyrus-4
1600: PPUSH
1601: CALL_OW 88
// if Bobby then
1605: LD_EXP 2
1609: IFFALSE 1647
// begin Say ( Bobby , D1-Bobby-4 ) ;
1611: LD_EXP 2
1615: PPUSH
1616: LD_STRING D1-Bobby-4
1618: PPUSH
1619: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1623: LD_EXP 4
1627: PPUSH
1628: LD_STRING D1-Lisa-4
1630: PPUSH
1631: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1635: LD_EXP 1
1639: PPUSH
1640: LD_STRING D1-JMM-5
1642: PPUSH
1643: CALL_OW 88
// end ; InGameOff ;
1647: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1651: LD_INT 22
1653: PUSH
1654: LD_INT 4
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PPUSH
1661: CALL_OW 69
1665: PUSH
1666: LD_EXP 6
1670: PUSH
1671: LD_EXP 7
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: DIFF
1680: PPUSH
1681: LD_INT 1
1683: PPUSH
1684: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1688: LD_STRING M1
1690: PPUSH
1691: CALL_OW 337
// SaveForQuickRestart ;
1695: CALL_OW 22
// end ;
1699: LD_VAR 0 1
1703: RET
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1704: LD_INT 7
1706: PPUSH
1707: LD_INT 22
1709: PUSH
1710: LD_INT 1
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PPUSH
1717: CALL_OW 70
1721: PUSH
1722: LD_INT 0
1724: GREATER
1725: IFFALSE 2138
1727: GO 1729
1729: DISABLE
// begin InGameOn ;
1730: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1734: LD_INT 22
1736: PUSH
1737: LD_INT 1
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 21
1746: PUSH
1747: LD_INT 1
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PPUSH
1758: CALL_OW 69
1762: PPUSH
1763: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1767: LD_INT 24
1769: PPUSH
1770: LD_INT 32
1772: PPUSH
1773: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1777: LD_EXP 5
1781: PPUSH
1782: LD_INT 4
1784: PPUSH
1785: LD_INT 1
1787: PPUSH
1788: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1792: LD_EXP 5
1796: PPUSH
1797: LD_INT 4
1799: PPUSH
1800: CALL_OW 336
// wait ( 0 0$1 ) ;
1804: LD_INT 35
1806: PPUSH
1807: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1811: LD_EXP 5
1815: PPUSH
1816: LD_INT 27
1818: PPUSH
1819: LD_INT 38
1821: PPUSH
1822: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1826: LD_EXP 5
1830: PPUSH
1831: LD_EXP 1
1835: PPUSH
1836: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1840: LD_INT 22
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: LD_INT 21
1852: PUSH
1853: LD_INT 1
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PPUSH
1864: CALL_OW 69
1868: PUSH
1869: LD_EXP 5
1873: PUSH
1874: EMPTY
1875: LIST
1876: DIFF
1877: PPUSH
1878: LD_EXP 5
1882: PPUSH
1883: CALL_OW 119
// wait ( 0 0$1 ) ;
1887: LD_INT 35
1889: PPUSH
1890: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1894: LD_EXP 5
1898: PPUSH
1899: LD_STRING D2a-Khat-1
1901: PPUSH
1902: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1906: LD_EXP 1
1910: PPUSH
1911: LD_STRING D2a-JMM-1
1913: PPUSH
1914: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1918: LD_EXP 5
1922: PPUSH
1923: LD_STRING D2a-Khat-2
1925: PPUSH
1926: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1930: LD_EXP 1
1934: PPUSH
1935: LD_STRING D2a-JMM-2
1937: PPUSH
1938: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1942: LD_EXP 5
1946: PPUSH
1947: LD_STRING D2a-Khat-3
1949: PPUSH
1950: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1954: LD_EXP 1
1958: PPUSH
1959: LD_STRING D2a-JMM-3
1961: PPUSH
1962: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1966: LD_EXP 5
1970: PPUSH
1971: LD_STRING D2a-Khat-4
1973: PPUSH
1974: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1978: LD_EXP 1
1982: PPUSH
1983: LD_STRING D2a-JMM-4
1985: PPUSH
1986: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1990: LD_EXP 5
1994: PPUSH
1995: LD_STRING D2a-Khat-5
1997: PPUSH
1998: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
2002: LD_EXP 1
2006: PPUSH
2007: LD_STRING D2a-JMM-5
2009: PPUSH
2010: CALL_OW 88
// InGameOff ;
2014: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) then
2018: LD_INT 22
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PUSH
2028: LD_INT 21
2030: PUSH
2031: LD_INT 1
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PUSH
2038: LD_INT 3
2040: PUSH
2041: LD_INT 24
2043: PUSH
2044: LD_INT 800
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PPUSH
2060: CALL_OW 69
2064: IFFALSE 2138
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
2066: LD_EXP 5
2070: PPUSH
2071: LD_INT 22
2073: PUSH
2074: LD_INT 1
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PUSH
2081: LD_INT 21
2083: PUSH
2084: LD_INT 1
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 3
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 1000
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: PPUSH
2113: CALL_OW 69
2117: PUSH
2118: LD_INT 1
2120: ARRAY
2121: PPUSH
2122: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
2126: LD_EXP 5
2130: PPUSH
2131: LD_STRING D2b-Khat-1
2133: PPUSH
2134: CALL_OW 88
// end ; end ;
2138: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) do var i , distanceTab , min , tmp , p ;
2139: LD_INT 15
2141: PPUSH
2142: LD_INT 22
2144: PUSH
2145: LD_INT 1
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PPUSH
2152: CALL_OW 70
2156: IFFALSE 3353
2158: GO 2160
2160: DISABLE
2161: LD_INT 0
2163: PPUSH
2164: PPUSH
2165: PPUSH
2166: PPUSH
2167: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2168: LD_ADDR_VAR 0 2
2172: PUSH
2173: LD_INT 999
2175: PUSH
2176: LD_INT 999
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2186: LD_ADDR_VAR 0 4
2190: PUSH
2191: LD_INT 22
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 21
2203: PUSH
2204: LD_INT 1
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PPUSH
2215: CALL_OW 69
2219: PUSH
2220: LD_EXP 1
2224: PUSH
2225: LD_EXP 2
2229: PUSH
2230: LD_EXP 3
2234: PUSH
2235: LD_EXP 4
2239: PUSH
2240: LD_EXP 5
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: DIFF
2252: ST_TO_ADDR
// PrepareDeadSoldiers ;
2253: CALL 11662 0 0
// spotCorpses = 1 ;
2257: LD_ADDR_EXP 32
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2265: LD_INT 70
2267: PPUSH
2268: CALL_OW 67
// InGameOn ;
2272: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2276: LD_INT 23
2278: PPUSH
2279: LD_INT 12
2281: PPUSH
2282: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: LD_VAR 0 2
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: PUSH
2300: LD_INT 2
2302: ARRAY
2303: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2304: LD_ADDR_VAR 0 1
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 1
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 21
2321: PUSH
2322: LD_INT 1
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PPUSH
2333: CALL_OW 69
2337: PUSH
2338: LD_EXP 1
2342: PUSH
2343: LD_EXP 5
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: DIFF
2352: PUSH
2353: FOR_IN
2354: IFFALSE 2405
// if IsOK ( i ) then
2356: LD_VAR 0 1
2360: PPUSH
2361: CALL_OW 302
2365: IFFALSE 2403
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2367: LD_ADDR_VAR 0 2
2371: PUSH
2372: LD_VAR 0 2
2376: PUSH
2377: LD_VAR 0 1
2381: PUSH
2382: LD_VAR 0 1
2386: PPUSH
2387: LD_INT 16
2389: PPUSH
2390: CALL_OW 299
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PUSH
2399: EMPTY
2400: LIST
2401: ADD
2402: ST_TO_ADDR
2403: GO 2353
2405: POP
2406: POP
// for i = 2 to distanceTab do
2407: LD_ADDR_VAR 0 1
2411: PUSH
2412: DOUBLE
2413: LD_INT 2
2415: DEC
2416: ST_TO_ADDR
2417: LD_VAR 0 2
2421: PUSH
2422: FOR_TO
2423: IFFALSE 2469
// if distanceTab [ i ] [ 2 ] < min then
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PUSH
2436: LD_INT 2
2438: ARRAY
2439: PUSH
2440: LD_VAR 0 3
2444: LESS
2445: IFFALSE 2467
// min = distanceTab [ i ] [ 2 ] ;
2447: LD_ADDR_VAR 0 3
2451: PUSH
2452: LD_VAR 0 2
2456: PUSH
2457: LD_VAR 0 1
2461: ARRAY
2462: PUSH
2463: LD_INT 2
2465: ARRAY
2466: ST_TO_ADDR
2467: GO 2422
2469: POP
2470: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2471: LD_ADDR_VAR 0 1
2475: PUSH
2476: LD_INT 22
2478: PUSH
2479: LD_INT 1
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: LD_INT 21
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: PPUSH
2500: CALL_OW 69
2504: PUSH
2505: LD_EXP 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: DIFF
2513: PUSH
2514: FOR_IN
2515: IFFALSE 2585
// begin ComMoveToArea ( i , DeadCutscene ) ;
2517: LD_VAR 0 1
2521: PPUSH
2522: LD_INT 28
2524: PPUSH
2525: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2529: LD_EXP 1
2533: PPUSH
2534: LD_INT 30
2536: PPUSH
2537: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2541: LD_VAR 0 1
2545: PPUSH
2546: LD_INT 23
2548: PPUSH
2549: LD_INT 11
2551: PPUSH
2552: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2556: LD_EXP 1
2560: PPUSH
2561: LD_INT 23
2563: PPUSH
2564: LD_INT 11
2566: PPUSH
2567: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2571: LD_EXP 35
2575: PPUSH
2576: LD_INT 250
2578: PPUSH
2579: CALL_OW 234
// end ;
2583: GO 2514
2585: POP
2586: POP
// for i = 2 to distanceTab do
2587: LD_ADDR_VAR 0 1
2591: PUSH
2592: DOUBLE
2593: LD_INT 2
2595: DEC
2596: ST_TO_ADDR
2597: LD_VAR 0 2
2601: PUSH
2602: FOR_TO
2603: IFFALSE 2989
// begin if distanceTab [ i ] [ 2 ] = min then
2605: LD_VAR 0 2
2609: PUSH
2610: LD_VAR 0 1
2614: ARRAY
2615: PUSH
2616: LD_INT 2
2618: ARRAY
2619: PUSH
2620: LD_VAR 0 3
2624: EQUAL
2625: IFFALSE 2987
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2627: LD_VAR 0 2
2631: PUSH
2632: LD_VAR 0 1
2636: ARRAY
2637: PUSH
2638: LD_INT 1
2640: ARRAY
2641: PUSH
2642: LD_EXP 2
2646: EQUAL
2647: IFFALSE 2661
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2649: LD_EXP 2
2653: PPUSH
2654: LD_STRING DCorpses-Bobby-1
2656: PPUSH
2657: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2661: LD_VAR 0 2
2665: PUSH
2666: LD_VAR 0 1
2670: ARRAY
2671: PUSH
2672: LD_INT 1
2674: ARRAY
2675: PUSH
2676: LD_EXP 3
2680: EQUAL
2681: IFFALSE 2695
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2683: LD_EXP 3
2687: PPUSH
2688: LD_STRING DCorpses-Cyrus-1
2690: PPUSH
2691: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2695: LD_VAR 0 2
2699: PUSH
2700: LD_VAR 0 1
2704: ARRAY
2705: PUSH
2706: LD_INT 1
2708: ARRAY
2709: PUSH
2710: LD_EXP 4
2714: EQUAL
2715: IFFALSE 2729
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2717: LD_EXP 4
2721: PPUSH
2722: LD_STRING DCorpses-Lisa-1
2724: PPUSH
2725: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2729: LD_VAR 0 2
2733: PUSH
2734: LD_VAR 0 1
2738: ARRAY
2739: PUSH
2740: LD_INT 1
2742: ARRAY
2743: PUSH
2744: LD_VAR 0 4
2748: PUSH
2749: LD_INT 1
2751: ARRAY
2752: EQUAL
2753: PUSH
2754: LD_VAR 0 4
2758: PUSH
2759: LD_INT 1
2761: ARRAY
2762: PPUSH
2763: CALL_OW 258
2767: PUSH
2768: LD_INT 1
2770: EQUAL
2771: AND
2772: IFFALSE 2790
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2774: LD_VAR 0 4
2778: PUSH
2779: LD_INT 1
2781: ARRAY
2782: PPUSH
2783: LD_STRING DCorpses-Sol1-1
2785: PPUSH
2786: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2790: LD_VAR 0 2
2794: PUSH
2795: LD_VAR 0 1
2799: ARRAY
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PUSH
2805: LD_VAR 0 4
2809: PUSH
2810: LD_INT 1
2812: ARRAY
2813: EQUAL
2814: PUSH
2815: LD_VAR 0 4
2819: PUSH
2820: LD_INT 1
2822: ARRAY
2823: PPUSH
2824: CALL_OW 258
2828: PUSH
2829: LD_INT 2
2831: EQUAL
2832: AND
2833: IFFALSE 2851
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2835: LD_VAR 0 4
2839: PUSH
2840: LD_INT 1
2842: ARRAY
2843: PPUSH
2844: LD_STRING DCorpses-FSol1-1
2846: PPUSH
2847: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2851: LD_VAR 0 2
2855: PUSH
2856: LD_VAR 0 1
2860: ARRAY
2861: PUSH
2862: LD_INT 1
2864: ARRAY
2865: PUSH
2866: LD_VAR 0 4
2870: PUSH
2871: LD_INT 2
2873: ARRAY
2874: EQUAL
2875: PUSH
2876: LD_VAR 0 4
2880: PUSH
2881: LD_INT 2
2883: ARRAY
2884: PPUSH
2885: CALL_OW 258
2889: PUSH
2890: LD_INT 1
2892: EQUAL
2893: AND
2894: IFFALSE 2912
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2896: LD_VAR 0 4
2900: PUSH
2901: LD_INT 2
2903: ARRAY
2904: PPUSH
2905: LD_STRING DCorpses-Sol1-1
2907: PPUSH
2908: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2912: LD_VAR 0 2
2916: PUSH
2917: LD_VAR 0 1
2921: ARRAY
2922: PUSH
2923: LD_INT 1
2925: ARRAY
2926: PUSH
2927: LD_VAR 0 4
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: EQUAL
2936: PUSH
2937: LD_VAR 0 4
2941: PUSH
2942: LD_INT 2
2944: ARRAY
2945: PPUSH
2946: CALL_OW 258
2950: PUSH
2951: LD_INT 2
2953: EQUAL
2954: AND
2955: IFFALSE 2973
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2957: LD_VAR 0 4
2961: PUSH
2962: LD_INT 2
2964: ARRAY
2965: PPUSH
2966: LD_STRING DCorpses-FSol1-1
2968: PPUSH
2969: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2973: LD_EXP 35
2977: PPUSH
2978: LD_INT 150
2980: PPUSH
2981: CALL_OW 234
// break ;
2985: GO 2989
// end ; end ;
2987: GO 2602
2989: POP
2990: POP
// p := 0 ;
2991: LD_ADDR_VAR 0 5
2995: PUSH
2996: LD_INT 0
2998: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2999: LD_INT 35
3001: PPUSH
3002: CALL_OW 67
// p := p + 1 ;
3006: LD_ADDR_VAR 0 5
3010: PUSH
3011: LD_VAR 0 5
3015: PUSH
3016: LD_INT 1
3018: PLUS
3019: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
3020: LD_ADDR_VAR 0 1
3024: PUSH
3025: LD_INT 22
3027: PUSH
3028: LD_INT 1
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 21
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 69
3053: PUSH
3054: LD_EXP 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: DIFF
3062: PUSH
3063: FOR_IN
3064: IFFALSE 3134
// begin ComMoveToArea ( i , DeadCutscene ) ;
3066: LD_VAR 0 1
3070: PPUSH
3071: LD_INT 28
3073: PPUSH
3074: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
3078: LD_EXP 1
3082: PPUSH
3083: LD_INT 30
3085: PPUSH
3086: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_INT 23
3097: PPUSH
3098: LD_INT 11
3100: PPUSH
3101: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
3105: LD_EXP 1
3109: PPUSH
3110: LD_INT 23
3112: PPUSH
3113: LD_INT 11
3115: PPUSH
3116: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
3120: LD_EXP 35
3124: PPUSH
3125: LD_INT 250
3127: PPUSH
3128: CALL_OW 234
// end ;
3132: GO 3063
3134: POP
3135: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3136: LD_EXP 1
3140: PPUSH
3141: LD_INT 30
3143: PPUSH
3144: CALL_OW 308
3148: PUSH
3149: LD_VAR 0 5
3153: PUSH
3154: LD_INT 16
3156: GREATEREQUAL
3157: OR
3158: IFFALSE 2999
// wait ( 0 0$1 ) ;
3160: LD_INT 35
3162: PPUSH
3163: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING DCorpses-JMM-1
3174: PPUSH
3175: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3179: LD_EXP 35
3183: PPUSH
3184: LD_INT 100
3186: PPUSH
3187: CALL_OW 234
// if IsOK ( Khatam ) then
3191: LD_EXP 5
3195: PPUSH
3196: CALL_OW 302
3200: IFFALSE 3337
// begin repeat wait ( 0 0$1 ) ;
3202: LD_INT 35
3204: PPUSH
3205: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3209: LD_EXP 5
3213: PPUSH
3214: LD_EXP 35
3218: PPUSH
3219: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3223: LD_EXP 5
3227: PPUSH
3228: LD_EXP 35
3232: PPUSH
3233: CALL_OW 296
3237: PUSH
3238: LD_INT 2
3240: LESS
3241: IFFALSE 3202
// spotCorpses = 0 ;
3243: LD_ADDR_EXP 32
3247: PUSH
3248: LD_INT 0
3250: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3251: LD_EXP 35
3255: PPUSH
3256: LD_INT 10
3258: PPUSH
3259: CALL_OW 234
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// KillUnit ( DyingSold ) ;
3270: LD_EXP 35
3274: PPUSH
3275: CALL_OW 66
// wait ( 0 0$1 ) ;
3279: LD_INT 35
3281: PPUSH
3282: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3286: LD_EXP 1
3290: PUSH
3291: LD_EXP 5
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PPUSH
3300: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3304: LD_EXP 5
3308: PPUSH
3309: LD_EXP 1
3313: PPUSH
3314: CALL_OW 119
// wait ( 0 0$1 ) ;
3318: LD_INT 35
3320: PPUSH
3321: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3325: LD_EXP 5
3329: PPUSH
3330: LD_STRING DCorpses-Khat-1
3332: PPUSH
3333: CALL_OW 88
// end ; InGameOff ;
3337: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3341: LD_EXP 1
3345: PPUSH
3346: LD_STRING DCorpses-JMM-2
3348: PPUSH
3349: CALL_OW 88
// end ;
3353: PPOPN 5
3355: END
// every 0 0$1 trigger spotCorpses = 1 do
3356: LD_EXP 32
3360: PUSH
3361: LD_INT 1
3363: EQUAL
3364: IFFALSE 3382
3366: GO 3368
3368: DISABLE
// begin enable ;
3369: ENABLE
// SetLives ( DyingSold , 10 ) ;
3370: LD_EXP 35
3374: PPUSH
3375: LD_INT 10
3377: PPUSH
3378: CALL_OW 234
// end ;
3382: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3383: LD_INT 8
3385: PPUSH
3386: LD_INT 22
3388: PUSH
3389: LD_INT 1
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: PPUSH
3396: CALL_OW 70
3400: PUSH
3401: LD_INT 22
3403: PUSH
3404: LD_INT 1
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: PPUSH
3411: CALL_OW 69
3415: PPUSH
3416: LD_EXP 7
3420: PPUSH
3421: CALL_OW 74
3425: PPUSH
3426: LD_EXP 7
3430: PPUSH
3431: CALL_OW 296
3435: PUSH
3436: LD_INT 13
3438: LESS
3439: OR
3440: IFFALSE 3621
3442: GO 3444
3444: DISABLE
3445: LD_INT 0
3447: PPUSH
// begin InGameOn ;
3448: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3452: LD_EXP 7
3456: PPUSH
3457: LD_INT 250
3459: PPUSH
3460: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 , 700 ] [ Difficulty ] ) ;
3464: LD_EXP 6
3468: PPUSH
3469: LD_INT 1000
3471: PUSH
3472: LD_INT 800
3474: PUSH
3475: LD_INT 750
3477: PUSH
3478: LD_INT 700
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: PUSH
3487: LD_OWVAR 67
3491: ARRAY
3492: PPUSH
3493: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3497: LD_INT 3
3499: PPUSH
3500: LD_INT 4
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3513: LD_EXP 6
3517: PUSH
3518: LD_EXP 7
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PPUSH
3527: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) union FilterAllUnits ( [ f_side , 4 ] ) do
3531: LD_ADDR_VAR 0 1
3535: PUSH
3536: LD_INT 9
3538: PPUSH
3539: LD_INT 22
3541: PUSH
3542: LD_INT 3
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PPUSH
3549: CALL_OW 70
3553: PUSH
3554: LD_INT 22
3556: PUSH
3557: LD_INT 4
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PPUSH
3564: CALL_OW 69
3568: UNION
3569: PUSH
3570: FOR_IN
3571: IFFALSE 3584
// ComFree ( i ) ;
3573: LD_VAR 0 1
3577: PPUSH
3578: CALL_OW 139
3582: GO 3570
3584: POP
3585: POP
// wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// InGameOff ;
3593: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3597: LD_EXP 6
3601: PPUSH
3602: LD_STRING DF-Sol1-1
3604: PPUSH
3605: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3609: LD_EXP 1
3613: PPUSH
3614: LD_STRING DF-JMM-1
3616: PPUSH
3617: CALL_OW 88
// end ;
3621: PPOPN 1
3623: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3624: LD_INT 19
3626: PPUSH
3627: LD_INT 22
3629: PUSH
3630: LD_INT 3
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 70
3641: PUSH
3642: LD_INT 0
3644: EQUAL
3645: IFFALSE 3754
3647: GO 3649
3649: DISABLE
// begin if not IsDead ( Brian ) then
3650: LD_EXP 6
3654: PPUSH
3655: CALL_OW 301
3659: NOT
3660: IFFALSE 3674
// SetSide ( Brian , 1 ) ;
3662: LD_EXP 6
3666: PPUSH
3667: LD_INT 1
3669: PPUSH
3670: CALL_OW 235
// if not IsDead ( Jerry ) then
3674: LD_EXP 7
3678: PPUSH
3679: CALL_OW 301
3683: NOT
3684: IFFALSE 3698
// SetSide ( Jerry , 1 ) ;
3686: LD_EXP 7
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3698: LD_INT 22
3700: PUSH
3701: LD_INT 1
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PUSH
3708: LD_INT 25
3710: PUSH
3711: LD_INT 4
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PPUSH
3722: CALL_OW 69
3726: IFFALSE 3742
// Say ( JMM , DFa-JMM-1 ) else
3728: LD_EXP 1
3732: PPUSH
3733: LD_STRING DFa-JMM-1
3735: PPUSH
3736: CALL_OW 88
3740: GO 3754
// Say ( JMM , DFa-JMM-1a ) ;
3742: LD_EXP 1
3746: PPUSH
3747: LD_STRING DFa-JMM-1a
3749: PPUSH
3750: CALL_OW 88
// end ;
3754: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3755: LD_INT 19
3757: PPUSH
3758: LD_INT 22
3760: PUSH
3761: LD_INT 3
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PPUSH
3768: CALL_OW 70
3772: PUSH
3773: LD_INT 0
3775: EQUAL
3776: PUSH
3777: LD_EXP 6
3781: PPUSH
3782: CALL_OW 302
3786: NOT
3787: AND
3788: IFFALSE 3874
3790: GO 3792
3792: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3793: LD_INT 35
3795: PPUSH
3796: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3800: LD_EXP 6
3804: PPUSH
3805: CALL_OW 256
3809: PUSH
3810: LD_INT 250
3812: GREATER
3813: IFFALSE 3793
// Say ( Brian , DFb-Sol1-1 ) ;
3815: LD_EXP 6
3819: PPUSH
3820: LD_STRING DFb-Sol1-1
3822: PPUSH
3823: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3827: LD_EXP 6
3831: PPUSH
3832: LD_INT 78
3834: PPUSH
3835: LD_INT 74
3837: PPUSH
3838: CALL_OW 111
// if IsDead ( Jerry ) then
3842: LD_EXP 7
3846: PPUSH
3847: CALL_OW 301
3851: IFFALSE 3867
// Say ( Brian , DFb-Sol1-1a ) else
3853: LD_EXP 6
3857: PPUSH
3858: LD_STRING DFb-Sol1-1a
3860: PPUSH
3861: CALL_OW 88
3865: GO 3874
// SetAchievement ( ACH_JERRY ) ;
3867: LD_STRING ACH_JERRY
3869: PPUSH
3870: CALL_OW 543
// end ;
3874: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3875: LD_INT 22
3877: PUSH
3878: LD_INT 1
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PUSH
3885: LD_INT 21
3887: PUSH
3888: LD_INT 2
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PPUSH
3899: CALL_OW 69
3903: PUSH
3904: LD_INT 0
3906: EQUAL
3907: IFFALSE 3999
3909: GO 3911
3911: DISABLE
3912: LD_INT 0
3914: PPUSH
// begin enable ;
3915: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3916: LD_ADDR_VAR 0 1
3920: PUSH
3921: LD_INT 22
3923: PUSH
3924: LD_INT 3
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 21
3933: PUSH
3934: LD_INT 3
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: LD_INT 30
3943: PUSH
3944: LD_INT 31
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: PPUSH
3956: CALL_OW 69
3960: PUSH
3961: FOR_IN
3962: IFFALSE 3997
// begin if See ( 1 , i ) then
3964: LD_INT 1
3966: PPUSH
3967: LD_VAR 0 1
3971: PPUSH
3972: CALL_OW 292
3976: IFFALSE 3995
// begin disable ;
3978: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3979: LD_EXP 1
3983: PPUSH
3984: LD_STRING DX1-JMM-1
3986: PPUSH
3987: CALL_OW 88
// exit ;
3991: POP
3992: POP
3993: GO 3999
// end ; end ;
3995: GO 3961
3997: POP
3998: POP
// end ;
3999: PPOPN 1
4001: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 11
4007: PPUSH
4008: CALL_OW 294
4012: IFFALSE 4275
4014: GO 4016
4016: DISABLE
4017: LD_INT 0
4019: PPUSH
4020: PPUSH
4021: PPUSH
// begin DialogueOn ;
4022: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
4026: LD_INT 11
4028: PPUSH
4029: LD_INT 22
4031: PUSH
4032: LD_INT 3
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PUSH
4039: LD_INT 21
4041: PUSH
4042: LD_INT 1
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PPUSH
4053: CALL_OW 70
4057: PUSH
4058: LD_INT 1
4060: ARRAY
4061: PPUSH
4062: LD_STRING DX3-Rus1-1
4064: PPUSH
4065: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
4069: LD_EXP 1
4073: PPUSH
4074: LD_STRING DX3-JMM-1
4076: PPUSH
4077: CALL_OW 88
// DialogueOff ;
4081: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
4085: LD_ADDR_VAR 0 1
4089: PUSH
4090: LD_INT 11
4092: PPUSH
4093: LD_INT 22
4095: PUSH
4096: LD_INT 3
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: LD_INT 25
4105: PUSH
4106: LD_INT 1
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PPUSH
4117: CALL_OW 70
4121: PUSH
4122: FOR_IN
4123: IFFALSE 4143
// southBaseDefenders = southBaseDefenders ^ i ;
4125: LD_ADDR_EXP 25
4129: PUSH
4130: LD_EXP 25
4134: PUSH
4135: LD_VAR 0 1
4139: ADD
4140: ST_TO_ADDR
4141: GO 4122
4143: POP
4144: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 , 0 0$2 ] [ Difficulty ] ) ;
4145: LD_INT 175
4147: PUSH
4148: LD_INT 140
4150: PUSH
4151: LD_INT 105
4153: PUSH
4154: LD_INT 70
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_OWVAR 67
4167: ARRAY
4168: PPUSH
4169: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4173: LD_ADDR_VAR 0 3
4177: PUSH
4178: LD_INT 22
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 21
4190: PUSH
4191: LD_INT 1
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 25
4200: PUSH
4201: LD_INT 3
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: LIST
4212: PPUSH
4213: CALL_OW 69
4217: ST_TO_ADDR
// if not mech then
4218: LD_VAR 0 3
4222: NOT
4223: IFFALSE 4227
// exit ;
4225: GO 4275
// ComExitBuilding ( mech ) ;
4227: LD_VAR 0 3
4231: PPUSH
4232: CALL_OW 122
// wait ( 0 0$1 ) ;
4236: LD_INT 35
4238: PPUSH
4239: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4243: LD_VAR 0 3
4247: PUSH
4248: LD_INT 1
4250: ARRAY
4251: PPUSH
4252: LD_INT 5
4254: PPUSH
4255: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4259: LD_VAR 0 3
4263: PUSH
4264: LD_INT 2
4266: ARRAY
4267: PPUSH
4268: LD_INT 4
4270: PPUSH
4271: CALL_OW 180
// end ;
4275: PPOPN 3
4277: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4278: LD_INT 1
4280: PPUSH
4281: LD_INT 5
4283: PPUSH
4284: CALL_OW 292
4288: PUSH
4289: LD_INT 1
4291: PPUSH
4292: LD_INT 4
4294: PPUSH
4295: CALL_OW 292
4299: OR
4300: IFFALSE 4384
4302: GO 4304
4304: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4305: LD_INT 5
4307: PUSH
4308: LD_INT 4
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PPUSH
4315: CALL_OW 85
// if IsOK ( Bobby ) then
4319: LD_EXP 2
4323: PPUSH
4324: CALL_OW 302
4328: IFFALSE 4364
// begin DialogueOn ;
4330: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4334: LD_EXP 2
4338: PPUSH
4339: LD_STRING DX2-Bobby-1
4341: PPUSH
4342: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4346: LD_EXP 1
4350: PPUSH
4351: LD_STRING DX2-JMM-1a
4353: PPUSH
4354: CALL_OW 88
// DialogueOff ;
4358: CALL_OW 7
// end else
4362: GO 4384
// begin DialogueOn ;
4364: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4368: LD_EXP 1
4372: PPUSH
4373: LD_STRING DX2-JMM-1
4375: PPUSH
4376: CALL_OW 88
// DialogueOff ;
4380: CALL_OW 7
// end ; end ;
4384: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4385: LD_INT 22
4387: PUSH
4388: LD_INT 1
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PUSH
4395: LD_INT 23
4397: PUSH
4398: LD_INT 3
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PUSH
4405: LD_INT 21
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 34
4417: PUSH
4418: LD_INT 42
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: IFFALSE 4856
4437: GO 4439
4439: DISABLE
4440: LD_INT 0
4442: PPUSH
4443: PPUSH
4444: PPUSH
4445: PPUSH
4446: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4447: LD_ADDR_VAR 0 1
4451: PUSH
4452: LD_INT 22
4454: PUSH
4455: LD_INT 1
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PUSH
4462: LD_INT 23
4464: PUSH
4465: LD_INT 3
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 2
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 34
4484: PUSH
4485: LD_INT 42
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: PPUSH
4498: CALL_OW 69
4502: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4503: LD_ADDR_VAR 0 3
4507: PUSH
4508: LD_INT 22
4510: PUSH
4511: LD_INT 1
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: LD_INT 21
4520: PUSH
4521: LD_INT 1
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: LD_INT 26
4530: PUSH
4531: LD_INT 1
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: PPUSH
4543: CALL_OW 69
4547: PUSH
4548: LD_EXP 1
4552: PUSH
4553: LD_EXP 3
4557: PUSH
4558: LD_EXP 2
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: LIST
4567: DIFF
4568: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4569: LD_ADDR_VAR 0 4
4573: PUSH
4574: LD_INT 22
4576: PUSH
4577: LD_INT 1
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 21
4586: PUSH
4587: LD_INT 1
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 26
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 69
4613: PUSH
4614: LD_EXP 4
4618: PUSH
4619: EMPTY
4620: LIST
4621: DIFF
4622: ST_TO_ADDR
// if not tmp then
4623: LD_VAR 0 1
4627: NOT
4628: IFFALSE 4632
// exit ;
4630: GO 4856
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4632: LD_ADDR_VAR 0 2
4636: PUSH
4637: LD_VAR 0 1
4641: PUSH
4642: LD_INT 1
4644: ARRAY
4645: PPUSH
4646: CALL_OW 311
4650: ST_TO_ADDR
// if not speaker then
4651: LD_VAR 0 2
4655: NOT
4656: IFFALSE 4660
// exit ;
4658: GO 4856
// DialogueOn ;
4660: CALL_OW 6
// if speaker = JMM then
4664: LD_VAR 0 2
4668: PUSH
4669: LD_EXP 1
4673: EQUAL
4674: IFFALSE 4708
// begin if Lisa then
4676: LD_EXP 4
4680: IFFALSE 4694
// Say ( Lisa , DX2b-Lisa-1 ) ;
4682: LD_EXP 4
4686: PPUSH
4687: LD_STRING DX2b-Lisa-1
4689: PPUSH
4690: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4694: LD_EXP 1
4698: PPUSH
4699: LD_STRING DX2b-JMM-1
4701: PPUSH
4702: CALL_OW 88
// end else
4706: GO 4852
// begin Say ( JMM , DX2a-JMM-1 ) ;
4708: LD_EXP 1
4712: PPUSH
4713: LD_STRING DX2a-JMM-1
4715: PPUSH
4716: CALL_OW 88
// if speaker = Bobby then
4720: LD_VAR 0 2
4724: PUSH
4725: LD_EXP 2
4729: EQUAL
4730: IFFALSE 4744
// Say ( Bobby , DX2a-Bobby-1 ) ;
4732: LD_EXP 2
4736: PPUSH
4737: LD_STRING DX2a-Bobby-1
4739: PPUSH
4740: CALL_OW 88
// if speaker = Cyrus then
4744: LD_VAR 0 2
4748: PUSH
4749: LD_EXP 3
4753: EQUAL
4754: IFFALSE 4768
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4756: LD_EXP 3
4760: PPUSH
4761: LD_STRING DX2a-Cyrus-1
4763: PPUSH
4764: CALL_OW 88
// if speaker = Lisa then
4768: LD_VAR 0 2
4772: PUSH
4773: LD_EXP 4
4777: EQUAL
4778: IFFALSE 4792
// Say ( Lisa , DX2a-Lisa-1 ) ;
4780: LD_EXP 4
4784: PPUSH
4785: LD_STRING DX2a-Lisa-1
4787: PPUSH
4788: CALL_OW 88
// if speaker in temp1 then
4792: LD_VAR 0 2
4796: PUSH
4797: LD_VAR 0 3
4801: IN
4802: IFFALSE 4816
// Say ( speaker , DX2a-Sol1-1 ) ;
4804: LD_VAR 0 2
4808: PPUSH
4809: LD_STRING DX2a-Sol1-1
4811: PPUSH
4812: CALL_OW 88
// if speaker in temp2 then
4816: LD_VAR 0 2
4820: PUSH
4821: LD_VAR 0 4
4825: IN
4826: IFFALSE 4840
// Say ( speaker , DX2a-FSol1-1 ) ;
4828: LD_VAR 0 2
4832: PPUSH
4833: LD_STRING DX2a-FSol1-1
4835: PPUSH
4836: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4840: LD_EXP 1
4844: PPUSH
4845: LD_STRING DX2a-JMM-2
4847: PPUSH
4848: CALL_OW 88
// end ; DialogueOff ;
4852: CALL_OW 7
// end ;
4856: PPOPN 5
4858: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4859: LD_INT 1
4861: PPUSH
4862: CALL_OW 255
4866: PUSH
4867: LD_INT 1
4869: EQUAL
4870: PUSH
4871: LD_INT 10
4873: PPUSH
4874: CALL_OW 255
4878: PUSH
4879: LD_INT 1
4881: EQUAL
4882: OR
4883: IFFALSE 4943
4885: GO 4887
4887: DISABLE
// begin DialogueOn ;
4888: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4892: LD_EXP 1
4896: PPUSH
4897: LD_STRING D3-JMM-1
4899: PPUSH
4900: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4904: LD_EXP 9
4908: PPUSH
4909: LD_STRING D3-Pow-1
4911: PPUSH
4912: CALL_OW 94
// if IsOK ( Cyrus ) then
4916: LD_EXP 3
4920: PPUSH
4921: CALL_OW 302
4925: IFFALSE 4939
// Say ( Cyrus , D3-Cyrus-1 ) ;
4927: LD_EXP 3
4931: PPUSH
4932: LD_STRING D3-Cyrus-1
4934: PPUSH
4935: CALL_OW 88
// DialogueOff ;
4939: CALL_OW 7
// end ;
4943: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , tmp , i ;
4944: LD_INT 1
4946: PPUSH
4947: CALL_OW 255
4951: PUSH
4952: LD_INT 1
4954: EQUAL
4955: PUSH
4956: LD_INT 10
4958: PPUSH
4959: CALL_OW 255
4963: PUSH
4964: LD_INT 1
4966: EQUAL
4967: AND
4968: IFFALSE 6358
4970: GO 4972
4972: DISABLE
4973: LD_INT 0
4975: PPUSH
4976: PPUSH
4977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4978: LD_ADDR_VAR 0 2
4982: PUSH
4983: LD_INT 22
4985: PUSH
4986: LD_INT 3
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 21
4995: PUSH
4996: LD_INT 1
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PPUSH
5007: CALL_OW 69
5011: ST_TO_ADDR
// if tmp then
5012: LD_VAR 0 2
5016: IFFALSE 5077
// begin for i in tmp do
5018: LD_ADDR_VAR 0 3
5022: PUSH
5023: LD_VAR 0 2
5027: PUSH
5028: FOR_IN
5029: IFFALSE 5075
// begin if IsInUnit ( i ) then
5031: LD_VAR 0 3
5035: PPUSH
5036: CALL_OW 310
5040: IFFALSE 5051
// ComExitBuilding ( i ) ;
5042: LD_VAR 0 3
5046: PPUSH
5047: CALL_OW 122
// wait ( 0 0$1 ) ;
5051: LD_INT 35
5053: PPUSH
5054: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
5058: LD_VAR 0 3
5062: PPUSH
5063: LD_INT 54
5065: PPUSH
5066: LD_INT 17
5068: PPUSH
5069: CALL_OW 174
// end ;
5073: GO 5028
5075: POP
5076: POP
// end ; wait ( 0 0$03 ) ;
5077: LD_INT 105
5079: PPUSH
5080: CALL_OW 67
// DialogueOn ;
5084: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5088: LD_EXP 1
5092: PPUSH
5093: LD_STRING D3a-JMM-1
5095: PPUSH
5096: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5100: LD_EXP 9
5104: PPUSH
5105: LD_STRING D3a-Pow-1
5107: PPUSH
5108: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5112: LD_EXP 1
5116: PPUSH
5117: LD_STRING D3a-JMM-2
5119: PPUSH
5120: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5124: LD_EXP 9
5128: PPUSH
5129: LD_STRING D3a-Pow-2
5131: PPUSH
5132: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5136: LD_EXP 1
5140: PPUSH
5141: LD_STRING D3a-JMM-3
5143: PPUSH
5144: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5148: LD_EXP 9
5152: PPUSH
5153: LD_STRING D3a-Pow-3
5155: PPUSH
5156: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5160: LD_EXP 1
5164: PPUSH
5165: LD_STRING D3a-JMM-4
5167: PPUSH
5168: CALL_OW 88
// DialogueOff ;
5172: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5176: LD_STRING M2
5178: PPUSH
5179: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5183: LD_EXP 1
5187: PPUSH
5188: LD_STRING D3b-JMM-1
5190: PPUSH
5191: CALL_OW 88
// Hint ( Depot2 ) ;
5195: LD_STRING Depot2
5197: PPUSH
5198: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5202: LD_INT 35
5204: PPUSH
5205: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5209: LD_INT 22
5211: PPUSH
5212: LD_INT 22
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 25
5224: PUSH
5225: LD_INT 2
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PPUSH
5236: CALL_OW 70
5240: PUSH
5241: LD_INT 22
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 21
5253: PUSH
5254: LD_INT 1
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL_OW 69
5269: NOT
5270: AND
5271: IFFALSE 5202
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5273: LD_ADDR_VAR 0 1
5277: PUSH
5278: LD_INT 22
5280: PUSH
5281: LD_INT 1
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: LD_INT 23
5290: PUSH
5291: LD_INT 1
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PUSH
5298: LD_INT 25
5300: PUSH
5301: LD_INT 2
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: PUSH
5308: LD_INT 50
5310: PUSH
5311: EMPTY
5312: LIST
5313: PUSH
5314: LD_INT 56
5316: PUSH
5317: EMPTY
5318: LIST
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: PPUSH
5327: CALL_OW 69
5331: PUSH
5332: LD_EXP 1
5336: PUSH
5337: LD_EXP 5
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: DIFF
5346: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5347: LD_INT 35
5349: PPUSH
5350: CALL_OW 67
// until temp > 0 ;
5354: LD_VAR 0 1
5358: PUSH
5359: LD_INT 0
5361: GREATER
5362: IFFALSE 5273
// wait ( 0 0$5 ) ;
5364: LD_INT 175
5366: PPUSH
5367: CALL_OW 67
// PrepareRussianHeroes ;
5371: CALL 11888 0 0
// InGameOn ;
5375: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5379: LD_EXP 8
5383: PPUSH
5384: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5388: LD_EXP 1
5392: PUSH
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PPUSH
5406: LD_EXP 8
5410: PPUSH
5411: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5415: LD_EXP 8
5419: PPUSH
5420: LD_VAR 0 1
5424: PUSH
5425: LD_INT 1
5427: ARRAY
5428: PPUSH
5429: CALL_OW 119
// wait ( 0 0$02 ) ;
5433: LD_INT 70
5435: PPUSH
5436: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5440: LD_EXP 8
5444: PPUSH
5445: LD_STRING D4-Mikh-1
5447: PPUSH
5448: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5452: LD_VAR 0 1
5456: PUSH
5457: LD_INT 1
5459: ARRAY
5460: PPUSH
5461: CALL_OW 258
5465: PUSH
5466: LD_INT 1
5468: EQUAL
5469: IFFALSE 5487
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5471: LD_VAR 0 1
5475: PUSH
5476: LD_INT 1
5478: ARRAY
5479: PPUSH
5480: LD_STRING D4-Sol1-1
5482: PPUSH
5483: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5487: LD_VAR 0 1
5491: PUSH
5492: LD_INT 1
5494: ARRAY
5495: PPUSH
5496: CALL_OW 258
5500: PUSH
5501: LD_INT 2
5503: EQUAL
5504: IFFALSE 5522
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5506: LD_VAR 0 1
5510: PUSH
5511: LD_INT 1
5513: ARRAY
5514: PPUSH
5515: LD_STRING D4-FSol1-1
5517: PPUSH
5518: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5522: LD_EXP 8
5526: PPUSH
5527: LD_STRING D4-Mikh-2
5529: PPUSH
5530: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5534: LD_VAR 0 1
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PPUSH
5543: CALL_OW 258
5547: PUSH
5548: LD_INT 1
5550: EQUAL
5551: IFFALSE 5569
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5553: LD_VAR 0 1
5557: PUSH
5558: LD_INT 1
5560: ARRAY
5561: PPUSH
5562: LD_STRING D4-Sol1-2
5564: PPUSH
5565: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5569: LD_VAR 0 1
5573: PUSH
5574: LD_INT 1
5576: ARRAY
5577: PPUSH
5578: CALL_OW 258
5582: PUSH
5583: LD_INT 2
5585: EQUAL
5586: IFFALSE 5604
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5588: LD_VAR 0 1
5592: PUSH
5593: LD_INT 1
5595: ARRAY
5596: PPUSH
5597: LD_STRING D4-FSol1-2
5599: PPUSH
5600: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5604: LD_EXP 8
5608: PPUSH
5609: LD_STRING D4-Mikh-3
5611: PPUSH
5612: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5616: LD_VAR 0 1
5620: PUSH
5621: LD_INT 1
5623: ARRAY
5624: PPUSH
5625: CALL_OW 258
5629: PUSH
5630: LD_INT 1
5632: EQUAL
5633: IFFALSE 5651
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5635: LD_VAR 0 1
5639: PUSH
5640: LD_INT 1
5642: ARRAY
5643: PPUSH
5644: LD_STRING D4-Sol1-3
5646: PPUSH
5647: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5651: LD_VAR 0 1
5655: PUSH
5656: LD_INT 1
5658: ARRAY
5659: PPUSH
5660: CALL_OW 258
5664: PUSH
5665: LD_INT 2
5667: EQUAL
5668: IFFALSE 5686
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5670: LD_VAR 0 1
5674: PUSH
5675: LD_INT 1
5677: ARRAY
5678: PPUSH
5679: LD_STRING D4-FSol1-3
5681: PPUSH
5682: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5686: LD_EXP 8
5690: PPUSH
5691: LD_STRING D4-Mikh-4
5693: PPUSH
5694: CALL_OW 88
// case Query ( Qs1 ) of 1 :
5698: LD_STRING Qs1
5700: PPUSH
5701: CALL_OW 97
5705: PUSH
5706: LD_INT 1
5708: DOUBLE
5709: EQUAL
5710: IFTRUE 5714
5712: GO 5749
5714: POP
// begin InGameOff ;
5715: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5719: LD_INT 1
5721: PPUSH
5722: LD_INT 6
5724: PPUSH
5725: LD_INT 2
5727: PPUSH
5728: LD_INT 1
5730: PPUSH
5731: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5735: LD_EXP 8
5739: PPUSH
5740: LD_INT 17
5742: PPUSH
5743: CALL_OW 113
// end ; 2 :
5747: GO 6342
5749: LD_INT 2
5751: DOUBLE
5752: EQUAL
5753: IFTRUE 5757
5755: GO 6307
5757: POP
// begin repeat wait ( 0 0$1 ) ;
5758: LD_INT 35
5760: PPUSH
5761: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5765: LD_VAR 0 1
5769: PUSH
5770: LD_INT 1
5772: ARRAY
5773: PPUSH
5774: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5778: LD_VAR 0 1
5782: PUSH
5783: LD_INT 1
5785: ARRAY
5786: PPUSH
5787: LD_EXP 1
5791: PPUSH
5792: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5796: LD_EXP 8
5800: PPUSH
5801: LD_EXP 1
5805: PPUSH
5806: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5810: LD_EXP 1
5814: PPUSH
5815: LD_EXP 8
5819: PPUSH
5820: CALL_OW 296
5824: PUSH
5825: LD_INT 5
5827: LESS
5828: IFFALSE 5758
// ComTurnUnit ( Mikhail , JMM ) ;
5830: LD_EXP 8
5834: PPUSH
5835: LD_EXP 1
5839: PPUSH
5840: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5844: LD_EXP 1
5848: PPUSH
5849: LD_STRING D4b-JMM-1
5851: PPUSH
5852: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5856: LD_EXP 8
5860: PPUSH
5861: LD_STRING D4b-Mikh-1
5863: PPUSH
5864: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5868: LD_EXP 1
5872: PPUSH
5873: LD_STRING D4b-JMM-2
5875: PPUSH
5876: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5880: LD_EXP 8
5884: PPUSH
5885: LD_STRING D4b-Mikh-2
5887: PPUSH
5888: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5892: LD_EXP 1
5896: PPUSH
5897: LD_STRING D4b-JMM-3
5899: PPUSH
5900: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5904: LD_EXP 8
5908: PPUSH
5909: LD_STRING D4b-Mikh-3
5911: PPUSH
5912: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5916: LD_EXP 1
5920: PPUSH
5921: LD_STRING D4b-JMM-4
5923: PPUSH
5924: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5928: LD_EXP 8
5932: PPUSH
5933: LD_STRING D4b-Mikh-4
5935: PPUSH
5936: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5940: LD_EXP 1
5944: PPUSH
5945: LD_STRING D4b-JMM-5
5947: PPUSH
5948: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5952: LD_EXP 8
5956: PPUSH
5957: LD_STRING D4b-Mikh-5
5959: PPUSH
5960: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5964: LD_EXP 1
5968: PPUSH
5969: LD_STRING D4b-JMM-6
5971: PPUSH
5972: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5976: LD_EXP 8
5980: PPUSH
5981: LD_STRING D4b-Mikh-6
5983: PPUSH
5984: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5988: LD_EXP 1
5992: PPUSH
5993: LD_STRING D4b-JMM-7
5995: PPUSH
5996: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
6000: LD_EXP 8
6004: PPUSH
6005: LD_STRING D4b-Mikh-7
6007: PPUSH
6008: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6012: LD_VAR 0 1
6016: PUSH
6017: LD_INT 1
6019: ARRAY
6020: PPUSH
6021: CALL_OW 258
6025: PUSH
6026: LD_INT 1
6028: EQUAL
6029: IFFALSE 6047
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6031: LD_VAR 0 1
6035: PUSH
6036: LD_INT 1
6038: ARRAY
6039: PPUSH
6040: LD_STRING D4b-Sol1-7
6042: PPUSH
6043: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6047: LD_VAR 0 1
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PPUSH
6056: CALL_OW 258
6060: PUSH
6061: LD_INT 2
6063: EQUAL
6064: IFFALSE 6082
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6066: LD_VAR 0 1
6070: PUSH
6071: LD_INT 1
6073: ARRAY
6074: PPUSH
6075: LD_STRING D4b-FSol1-7
6077: PPUSH
6078: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6082: LD_EXP 1
6086: PPUSH
6087: LD_STRING D4b-JMM-8
6089: PPUSH
6090: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6094: LD_VAR 0 1
6098: PUSH
6099: LD_INT 1
6101: ARRAY
6102: PPUSH
6103: CALL_OW 258
6107: PUSH
6108: LD_INT 1
6110: EQUAL
6111: IFFALSE 6129
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6113: LD_VAR 0 1
6117: PUSH
6118: LD_INT 1
6120: ARRAY
6121: PPUSH
6122: LD_STRING D4b-Sol1-8
6124: PPUSH
6125: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6129: LD_VAR 0 1
6133: PUSH
6134: LD_INT 1
6136: ARRAY
6137: PPUSH
6138: CALL_OW 258
6142: PUSH
6143: LD_INT 2
6145: EQUAL
6146: IFFALSE 6164
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6148: LD_VAR 0 1
6152: PUSH
6153: LD_INT 1
6155: ARRAY
6156: PPUSH
6157: LD_STRING D4b-FSol1-8
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6164: LD_EXP 1
6168: PPUSH
6169: LD_STRING D4b-JMM-9
6171: PPUSH
6172: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6176: LD_EXP 8
6180: PPUSH
6181: LD_INT 1
6183: PPUSH
6184: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6188: LD_ADDR_VAR 0 3
6192: PUSH
6193: LD_INT 22
6195: PUSH
6196: LD_INT 1
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: PUSH
6203: EMPTY
6204: LIST
6205: PPUSH
6206: CALL_OW 69
6210: PUSH
6211: FOR_IN
6212: IFFALSE 6225
// ComFree ( i ) ;
6214: LD_VAR 0 3
6218: PPUSH
6219: CALL_OW 139
6223: GO 6211
6225: POP
6226: POP
// repeat wait ( 0 0$1 ) ;
6227: LD_INT 35
6229: PPUSH
6230: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6234: LD_EXP 8
6238: PPUSH
6239: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6243: LD_EXP 8
6247: PUSH
6248: LD_VAR 0 1
6252: PUSH
6253: LD_INT 1
6255: ARRAY
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PPUSH
6261: LD_INT 1
6263: PPUSH
6264: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6268: LD_EXP 8
6272: PPUSH
6273: CALL_OW 310
6277: IFFALSE 6227
// mikhailDepot = IsInUnit ( Mikhail ) ;
6279: LD_ADDR_EXP 23
6283: PUSH
6284: LD_EXP 8
6288: PPUSH
6289: CALL_OW 310
6293: ST_TO_ADDR
// InGameOff ;
6294: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6298: LD_STRING M3
6300: PPUSH
6301: CALL_OW 337
// end ; 3 :
6305: GO 6342
6307: LD_INT 3
6309: DOUBLE
6310: EQUAL
6311: IFTRUE 6315
6313: GO 6341
6315: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6316: LD_EXP 8
6320: PPUSH
6321: LD_INT 17
6323: PPUSH
6324: CALL_OW 113
// wait ( 0 0$3 ) ;
6328: LD_INT 105
6330: PPUSH
6331: CALL_OW 67
// InGameOff ;
6335: CALL_OW 9
// end ; end ;
6339: GO 6342
6341: POP
// PrepareTigers ;
6342: CALL 15211 0 0
// RussianTrap ;
6346: CALL 10215 0 0
// tigersRespawn = 1 ;
6350: LD_ADDR_EXP 30
6354: PUSH
6355: LD_INT 1
6357: ST_TO_ADDR
// end ;
6358: PPOPN 3
6360: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6361: LD_INT 1
6363: PPUSH
6364: CALL_OW 255
6368: PUSH
6369: LD_INT 1
6371: EQUAL
6372: PUSH
6373: LD_INT 10
6375: PPUSH
6376: CALL_OW 255
6380: PUSH
6381: LD_INT 1
6383: EQUAL
6384: AND
6385: PUSH
6386: LD_INT 1
6388: PPUSH
6389: CALL_OW 274
6393: PPUSH
6394: LD_INT 1
6396: PPUSH
6397: CALL_OW 275
6401: PUSH
6402: LD_INT 100
6404: GREATEREQUAL
6405: AND
6406: IFFALSE 6555
6408: GO 6410
6410: DISABLE
6411: LD_INT 0
6413: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6414: LD_INT 2100
6416: PPUSH
6417: LD_INT 4200
6419: PPUSH
6420: CALL_OW 12
6424: PUSH
6425: LD_INT 1050
6427: PLUS
6428: PPUSH
6429: CALL_OW 67
// PrepareCargoBays ;
6433: CALL 13071 0 0
// cargoRespawn = 1 ;
6437: LD_ADDR_EXP 28
6441: PUSH
6442: LD_INT 1
6444: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6445: LD_ADDR_VAR 0 1
6449: PUSH
6450: LD_EXP 15
6454: PUSH
6455: LD_EXP 16
6459: PUSH
6460: LD_EXP 17
6464: PUSH
6465: LD_EXP 18
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6476: LD_VAR 0 1
6480: PPUSH
6481: LD_INT 17
6483: PPUSH
6484: LD_INT 10
6486: PPUSH
6487: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6491: LD_VAR 0 1
6495: PPUSH
6496: LD_INT 36
6498: PPUSH
6499: LD_INT 13
6501: PPUSH
6502: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6506: LD_VAR 0 1
6510: PPUSH
6511: LD_INT 40
6513: PPUSH
6514: LD_INT 20
6516: PPUSH
6517: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6521: LD_VAR 0 1
6525: PPUSH
6526: LD_INT 53
6528: PPUSH
6529: LD_INT 16
6531: PPUSH
6532: CALL_OW 171
// wait ( 0 0$5 ) ;
6536: LD_INT 175
6538: PPUSH
6539: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6543: LD_EXP 17
6547: PPUSH
6548: LD_STRING D5-Rus2-1
6550: PPUSH
6551: CALL_OW 88
// end ;
6555: PPOPN 1
6557: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6558: LD_EXP 28
6562: PUSH
6563: LD_INT 1
6565: EQUAL
6566: IFFALSE 6721
6568: GO 6570
6570: DISABLE
6571: LD_INT 0
6573: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6574: LD_ADDR_VAR 0 1
6578: PUSH
6579: LD_INT 22
6581: PUSH
6582: LD_INT 3
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 21
6591: PUSH
6592: LD_INT 2
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 34
6601: PUSH
6602: LD_INT 51
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: PPUSH
6614: CALL_OW 69
6618: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6619: LD_INT 105
6621: PPUSH
6622: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6626: LD_VAR 0 1
6630: PPUSH
6631: LD_INT 3
6633: PUSH
6634: LD_INT 60
6636: PUSH
6637: EMPTY
6638: LIST
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PPUSH
6644: CALL_OW 72
6648: PUSH
6649: LD_VAR 0 1
6653: PPUSH
6654: LD_INT 3
6656: PUSH
6657: LD_INT 24
6659: PUSH
6660: LD_INT 980
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PPUSH
6671: CALL_OW 72
6675: OR
6676: IFFALSE 6619
// ComMoveXY ( cargos , 7 , 9 ) ;
6678: LD_VAR 0 1
6682: PPUSH
6683: LD_INT 7
6685: PPUSH
6686: LD_INT 9
6688: PPUSH
6689: CALL_OW 111
// cargoSee = 1 ;
6693: LD_ADDR_EXP 29
6697: PUSH
6698: LD_INT 1
6700: ST_TO_ADDR
// cargoEscape = 1 ;
6701: LD_ADDR_EXP 20
6705: PUSH
6706: LD_INT 1
6708: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6709: LD_EXP 17
6713: PPUSH
6714: LD_STRING D5-Rus2-1a
6716: PPUSH
6717: CALL_OW 88
// end ;
6721: PPOPN 1
6723: END
// every 0 0$1 trigger cargoEscape and UnitFilter ( [ cargo1 , cargo2 ] , [ [ f_ok ] , [ f_side , 3 ] , [ f_placed ] ] ) do var cr , i , x , y ;
6724: LD_EXP 20
6728: PUSH
6729: LD_EXP 15
6733: PUSH
6734: LD_EXP 16
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: PPUSH
6743: LD_INT 50
6745: PUSH
6746: EMPTY
6747: LIST
6748: PUSH
6749: LD_INT 22
6751: PUSH
6752: LD_INT 3
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 52
6761: PUSH
6762: EMPTY
6763: LIST
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: LIST
6769: PPUSH
6770: CALL_OW 72
6774: AND
6775: IFFALSE 7108
6777: GO 6779
6779: DISABLE
6780: LD_INT 0
6782: PPUSH
6783: PPUSH
6784: PPUSH
6785: PPUSH
// begin enable ;
6786: ENABLE
// for i in [ cargo1 , cargo2 ] do
6787: LD_ADDR_VAR 0 2
6791: PUSH
6792: LD_EXP 15
6796: PUSH
6797: LD_EXP 16
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: FOR_IN
6807: IFFALSE 7106
// begin cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
6809: LD_ADDR_VAR 0 1
6813: PUSH
6814: LD_VAR 0 2
6818: PPUSH
6819: CALL_OW 250
6823: PPUSH
6824: LD_VAR 0 2
6828: PPUSH
6829: CALL_OW 251
6833: PPUSH
6834: LD_INT 6
6836: PPUSH
6837: CALL 76233 0 3
6841: ST_TO_ADDR
// if cr and GetMultiCargo ( i ) [ 4 ] < 60 then
6842: LD_VAR 0 1
6846: PUSH
6847: LD_VAR 0 2
6851: PPUSH
6852: CALL 77452 0 1
6856: PUSH
6857: LD_INT 4
6859: ARRAY
6860: PUSH
6861: LD_INT 60
6863: LESS
6864: AND
6865: IFFALSE 6904
// ComCollect ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
6867: LD_VAR 0 2
6871: PPUSH
6872: LD_VAR 0 1
6876: PUSH
6877: LD_INT 1
6879: ARRAY
6880: PUSH
6881: LD_INT 1
6883: ARRAY
6884: PPUSH
6885: LD_VAR 0 1
6889: PUSH
6890: LD_INT 1
6892: ARRAY
6893: PUSH
6894: LD_INT 2
6896: ARRAY
6897: PPUSH
6898: CALL_OW 117
6902: GO 7104
// if not IsInArea ( i , RemoveArea ) then
6904: LD_VAR 0 2
6908: PPUSH
6909: LD_INT 32
6911: PPUSH
6912: CALL_OW 308
6916: NOT
6917: IFFALSE 7065
// begin x := ShiftX ( GetX ( i ) , 4 , 3 ) ;
6919: LD_ADDR_VAR 0 3
6923: PUSH
6924: LD_VAR 0 2
6928: PPUSH
6929: CALL_OW 250
6933: PPUSH
6934: LD_INT 4
6936: PPUSH
6937: LD_INT 3
6939: PPUSH
6940: CALL_OW 272
6944: ST_TO_ADDR
// y := GetY ( i ) ;
6945: LD_ADDR_VAR 0 4
6949: PUSH
6950: LD_VAR 0 2
6954: PPUSH
6955: CALL_OW 251
6959: ST_TO_ADDR
// if HexInfo ( x , y ) then
6960: LD_VAR 0 3
6964: PPUSH
6965: LD_VAR 0 4
6969: PPUSH
6970: CALL_OW 428
6974: IFFALSE 6997
// x := ShiftX ( x , 4 , 3 ) ;
6976: LD_ADDR_VAR 0 3
6980: PUSH
6981: LD_VAR 0 3
6985: PPUSH
6986: LD_INT 4
6988: PPUSH
6989: LD_INT 3
6991: PPUSH
6992: CALL_OW 272
6996: ST_TO_ADDR
// if HexInfo ( x , y ) or not ValidHex ( x , y ) then
6997: LD_VAR 0 3
7001: PPUSH
7002: LD_VAR 0 4
7006: PPUSH
7007: CALL_OW 428
7011: PUSH
7012: LD_VAR 0 3
7016: PPUSH
7017: LD_VAR 0 4
7021: PPUSH
7022: CALL_OW 488
7026: NOT
7027: OR
7028: IFFALSE 7044
// ComMoveToArea ( i , RemoveArea ) else
7030: LD_VAR 0 2
7034: PPUSH
7035: LD_INT 32
7037: PPUSH
7038: CALL_OW 113
7042: GO 7063
// ComMoveXY ( i , x , y ) ;
7044: LD_VAR 0 2
7048: PPUSH
7049: LD_VAR 0 3
7053: PPUSH
7054: LD_VAR 0 4
7058: PPUSH
7059: CALL_OW 111
// end else
7063: GO 7104
// begin RemoveUnit ( IsDrivenBy ( i ) ) ;
7065: LD_VAR 0 2
7069: PPUSH
7070: CALL_OW 311
7074: PPUSH
7075: CALL_OW 64
// RemoveUnit ( i ) ;
7079: LD_VAR 0 2
7083: PPUSH
7084: CALL_OW 64
// cargoEscape := cargoEscape + 1 ;
7088: LD_ADDR_EXP 20
7092: PUSH
7093: LD_EXP 20
7097: PUSH
7098: LD_INT 1
7100: PLUS
7101: ST_TO_ADDR
// continue ;
7102: GO 6806
// end ; end ;
7104: GO 6806
7106: POP
7107: POP
// end ;
7108: PPOPN 4
7110: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
7111: LD_EXP 20
7115: PUSH
7116: LD_INT 1
7118: GREATER
7119: IFFALSE 7368
7121: GO 7123
7123: DISABLE
7124: LD_INT 0
7126: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
7127: LD_INT 4
7129: PPUSH
7130: LD_INT 1
7132: PPUSH
7133: LD_INT 1
7135: PPUSH
7136: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
7140: LD_INT 31
7142: PPUSH
7143: LD_INT 1
7145: PPUSH
7146: LD_INT 1
7148: PPUSH
7149: CALL_OW 324
// Hint ( Bunker ) ;
7153: LD_STRING Bunker
7155: PPUSH
7156: CALL_OW 339
// if IsOK ( Jerry ) then
7160: LD_EXP 7
7164: PPUSH
7165: CALL_OW 302
7169: IFFALSE 7185
// Say ( Jerry , D5a-Sol1-1 ) else
7171: LD_EXP 7
7175: PPUSH
7176: LD_STRING D5a-Sol1-1
7178: PPUSH
7179: CALL_OW 88
7183: GO 7271
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
7185: LD_ADDR_VAR 0 1
7189: PUSH
7190: LD_INT 22
7192: PUSH
7193: LD_INT 1
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: LD_INT 26
7202: PUSH
7203: LD_INT 1
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 69
7218: PUSH
7219: LD_EXP 1
7223: PUSH
7224: LD_EXP 2
7228: PUSH
7229: LD_EXP 3
7233: PUSH
7234: LD_EXP 5
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: DIFF
7245: ST_TO_ADDR
// if not speaker then
7246: LD_VAR 0 1
7250: NOT
7251: IFFALSE 7255
// exit ;
7253: GO 7368
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7255: LD_VAR 0 1
7259: PUSH
7260: LD_INT 1
7262: ARRAY
7263: PPUSH
7264: LD_STRING D5a-Sol1-1
7266: PPUSH
7267: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7271: LD_EXP 1
7275: PPUSH
7276: LD_STRING D5a-JMM-1
7278: PPUSH
7279: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
7283: LD_INT 22
7285: PPUSH
7286: LD_INT 22
7288: PUSH
7289: LD_INT 1
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: PUSH
7296: LD_INT 25
7298: PUSH
7299: LD_INT 2
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PPUSH
7310: CALL_OW 70
7314: IFFALSE 7368
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
7316: LD_INT 22
7318: PPUSH
7319: LD_INT 22
7321: PUSH
7322: LD_INT 1
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: LD_INT 25
7331: PUSH
7332: LD_INT 2
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PPUSH
7343: CALL_OW 70
7347: PUSH
7348: LD_INT 1
7350: ARRAY
7351: PPUSH
7352: LD_INT 31
7354: PPUSH
7355: LD_INT 44
7357: PPUSH
7358: LD_INT 13
7360: PPUSH
7361: LD_INT 1
7363: PPUSH
7364: CALL_OW 145
// end ;
7368: PPOPN 1
7370: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7371: LD_INT 1
7373: PPUSH
7374: CALL_OW 255
7378: PUSH
7379: LD_INT 3
7381: EQUAL
7382: PUSH
7383: LD_INT 1
7385: PPUSH
7386: CALL_OW 256
7390: PUSH
7391: LD_INT 1000
7393: LESS
7394: AND
7395: PUSH
7396: LD_INT 10
7398: PPUSH
7399: CALL_OW 255
7403: PUSH
7404: LD_INT 3
7406: EQUAL
7407: PUSH
7408: LD_INT 10
7410: PPUSH
7411: CALL_OW 256
7415: PUSH
7416: LD_INT 1000
7418: LESS
7419: AND
7420: OR
7421: IFFALSE 7438
7423: GO 7425
7425: DISABLE
// Say ( JMM , D8-JMM-1 ) ;
7426: LD_EXP 1
7430: PPUSH
7431: LD_STRING D8-JMM-1
7433: PPUSH
7434: CALL_OW 88
7438: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7439: LD_EXP 8
7443: PPUSH
7444: CALL_OW 310
7448: PUSH
7449: LD_INT 1
7451: EQUAL
7452: PUSH
7453: LD_EXP 22
7457: PUSH
7458: LD_INT 3
7460: EQUAL
7461: NOT
7462: AND
7463: IFFALSE 7485
7465: GO 7467
7467: DISABLE
// begin enable ;
7468: ENABLE
// mikhailInBase = 1 ;
7469: LD_ADDR_EXP 22
7473: PUSH
7474: LD_INT 1
7476: ST_TO_ADDR
// mikhailStatus = 1 ;
7477: LD_ADDR_EXP 21
7481: PUSH
7482: LD_INT 1
7484: ST_TO_ADDR
// end ;
7485: END
// export function AskMikhail ; begin
7486: LD_INT 0
7488: PPUSH
// case Query ( QMikh2 ) of 1 :
7489: LD_STRING QMikh2
7491: PPUSH
7492: CALL_OW 97
7496: PUSH
7497: LD_INT 1
7499: DOUBLE
7500: EQUAL
7501: IFTRUE 7505
7503: GO 7572
7505: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7506: LD_INT 1
7508: PPUSH
7509: LD_INT 6
7511: PPUSH
7512: LD_INT 2
7514: PPUSH
7515: LD_INT 1
7517: PPUSH
7518: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7522: LD_EXP 8
7526: PPUSH
7527: LD_INT 6
7529: PPUSH
7530: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7534: LD_EXP 8
7538: PPUSH
7539: CALL_OW 122
// wait ( 0 0$1 ) ;
7543: LD_INT 35
7545: PPUSH
7546: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7550: LD_EXP 8
7554: PPUSH
7555: LD_INT 17
7557: PPUSH
7558: CALL_OW 113
// mikhailInbase = 0 ;
7562: LD_ADDR_EXP 22
7566: PUSH
7567: LD_INT 0
7569: ST_TO_ADDR
// end ; 2 :
7570: GO 7813
7572: LD_INT 2
7574: DOUBLE
7575: EQUAL
7576: IFTRUE 7580
7578: GO 7753
7580: POP
// begin mikhailInBase = 2 ;
7581: LD_ADDR_EXP 22
7585: PUSH
7586: LD_INT 2
7588: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7589: LD_EXP 8
7593: PPUSH
7594: LD_INT 6
7596: PPUSH
7597: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7601: LD_EXP 8
7605: PPUSH
7606: CALL_OW 122
// wait ( 0 0$1 ) ;
7610: LD_INT 35
7612: PPUSH
7613: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7617: LD_EXP 8
7621: PPUSH
7622: LD_EXP 8
7626: PPUSH
7627: CALL_OW 250
7631: PUSH
7632: LD_INT 2
7634: PLUS
7635: PPUSH
7636: LD_EXP 8
7640: PPUSH
7641: CALL_OW 251
7645: PUSH
7646: LD_INT 2
7648: PLUS
7649: PPUSH
7650: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7654: LD_EXP 8
7658: PPUSH
7659: LD_EXP 8
7663: PPUSH
7664: CALL_OW 250
7668: PUSH
7669: LD_INT 1
7671: PLUS
7672: PPUSH
7673: LD_EXP 8
7677: PPUSH
7678: CALL_OW 251
7682: PUSH
7683: LD_INT 2
7685: PLUS
7686: PPUSH
7687: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7691: LD_EXP 8
7695: PPUSH
7696: LD_EXP 8
7700: PPUSH
7701: CALL_OW 250
7705: PUSH
7706: LD_INT 2
7708: PLUS
7709: PPUSH
7710: LD_EXP 8
7714: PPUSH
7715: CALL_OW 251
7719: PPUSH
7720: CALL_OW 171
// wait ( 0 0$5 ) ;
7724: LD_INT 175
7726: PPUSH
7727: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7731: LD_EXP 8
7735: PPUSH
7736: LD_INT 25
7738: PPUSH
7739: CALL_OW 113
// mikhailInBase = 4 ;
7743: LD_ADDR_EXP 22
7747: PUSH
7748: LD_INT 4
7750: ST_TO_ADDR
// end ; 3 :
7751: GO 7813
7753: LD_INT 3
7755: DOUBLE
7756: EQUAL
7757: IFTRUE 7761
7759: GO 7812
7761: POP
// begin SetSide ( Mikhail , 6 ) ;
7762: LD_EXP 8
7766: PPUSH
7767: LD_INT 6
7769: PPUSH
7770: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7774: LD_EXP 8
7778: PPUSH
7779: CALL_OW 122
// wait ( 0 0$1 ) ;
7783: LD_INT 35
7785: PPUSH
7786: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7790: LD_EXP 8
7794: PPUSH
7795: LD_INT 17
7797: PPUSH
7798: CALL_OW 113
// mikhailInbase = 3 ;
7802: LD_ADDR_EXP 22
7806: PUSH
7807: LD_INT 3
7809: ST_TO_ADDR
// end ; end ;
7810: GO 7813
7812: POP
// end ;
7813: LD_VAR 0 1
7817: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7818: LD_EXP 8
7822: PPUSH
7823: LD_INT 25
7825: PPUSH
7826: CALL_OW 308
7830: PUSH
7831: LD_EXP 22
7835: PUSH
7836: LD_INT 4
7838: EQUAL
7839: AND
7840: IFFALSE 7944
7842: GO 7844
7844: DISABLE
// begin enable ;
7845: ENABLE
// mikhailInBase = 1 ;
7846: LD_ADDR_EXP 22
7850: PUSH
7851: LD_INT 1
7853: ST_TO_ADDR
// InGameOn ;
7854: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7858: LD_INT 1
7860: PPUSH
7861: LD_INT 6
7863: PPUSH
7864: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7868: LD_INT 35
7870: PPUSH
7871: CALL_OW 67
// if Carry ( Mikhail ) then
7875: LD_EXP 8
7879: PPUSH
7880: CALL_OW 281
7884: IFFALSE 7895
// ComUnload ( Mikhail ) ;
7886: LD_EXP 8
7890: PPUSH
7891: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7895: LD_EXP 8
7899: PPUSH
7900: LD_INT 1
7902: PPUSH
7903: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7907: LD_EXP 8
7911: PPUSH
7912: CALL_OW 310
7916: IFFALSE 7868
// SetSide ( dep1 , 1 ) ;
7918: LD_INT 1
7920: PPUSH
7921: LD_INT 1
7923: PPUSH
7924: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7928: LD_EXP 8
7932: PPUSH
7933: LD_INT 1
7935: PPUSH
7936: CALL_OW 235
// InGameOff ;
7940: CALL_OW 9
// end ;
7944: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7945: LD_EXP 8
7949: PPUSH
7950: CALL_OW 310
7954: PUSH
7955: LD_EXP 22
7959: PUSH
7960: LD_INT 3
7962: EQUAL
7963: NOT
7964: AND
7965: IFFALSE 8100
7967: GO 7969
7969: DISABLE
// begin enable ;
7970: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7971: LD_INT 22
7973: PUSH
7974: LD_INT 1
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 21
7983: PUSH
7984: LD_INT 1
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: LD_INT 91
7993: PUSH
7994: LD_EXP 8
7998: PPUSH
7999: CALL_OW 310
8003: PUSH
8004: LD_INT 10
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: LIST
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: PPUSH
8017: CALL_OW 69
8021: PUSH
8022: LD_INT 1
8024: EQUAL
8025: IFFALSE 8100
// begin mikhailStatus = 4 ;
8027: LD_ADDR_EXP 21
8031: PUSH
8032: LD_INT 4
8034: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
8035: LD_INT 1
8037: PPUSH
8038: LD_INT 6
8040: PPUSH
8041: LD_INT 2
8043: PPUSH
8044: LD_INT 1
8046: PPUSH
8047: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
8051: LD_EXP 8
8055: PPUSH
8056: LD_INT 6
8058: PPUSH
8059: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
8063: LD_EXP 8
8067: PPUSH
8068: CALL_OW 122
// wait ( 0 0$1 ) ;
8072: LD_INT 35
8074: PPUSH
8075: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
8079: LD_EXP 8
8083: PPUSH
8084: LD_INT 17
8086: PPUSH
8087: CALL_OW 113
// mikhailStatus = 3 ;
8091: LD_ADDR_EXP 21
8095: PUSH
8096: LD_INT 3
8098: ST_TO_ADDR
// disable ;
8099: DISABLE
// end ; end ;
8100: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
8101: LD_EXP 1
8105: PPUSH
8106: LD_EXP 23
8110: PPUSH
8111: CALL_OW 296
8115: PUSH
8116: LD_INT 5
8118: LESS
8119: PUSH
8120: LD_EXP 21
8124: PUSH
8125: LD_INT 3
8127: EQUAL
8128: AND
8129: PUSH
8130: LD_EXP 22
8134: PUSH
8135: LD_INT 3
8137: EQUAL
8138: NOT
8139: AND
8140: IFFALSE 8371
8142: GO 8144
8144: DISABLE
8145: LD_INT 0
8147: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
8148: LD_ADDR_VAR 0 1
8152: PUSH
8153: LD_INT 22
8155: PUSH
8156: LD_INT 1
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PUSH
8163: LD_INT 21
8165: PUSH
8166: LD_INT 1
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 26
8175: PUSH
8176: LD_INT 1
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: LIST
8187: PPUSH
8188: CALL_OW 69
8192: PUSH
8193: LD_EXP 1
8197: PUSH
8198: LD_EXP 5
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: DIFF
8207: ST_TO_ADDR
// if not tmp then
8208: LD_VAR 0 1
8212: NOT
8213: IFFALSE 8217
// exit ;
8215: GO 8371
// DialogueOn ;
8217: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
8221: LD_EXP 1
8225: PPUSH
8226: LD_STRING D7-JMM-1
8228: PPUSH
8229: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
8233: LD_VAR 0 1
8237: PUSH
8238: LD_INT 1
8240: ARRAY
8241: PPUSH
8242: LD_STRING D7-Sol1-1
8244: PPUSH
8245: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8249: LD_EXP 1
8253: PPUSH
8254: LD_STRING D7-JMM-2
8256: PPUSH
8257: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8261: LD_VAR 0 1
8265: PUSH
8266: LD_INT 1
8268: ARRAY
8269: PPUSH
8270: LD_STRING D7-Sol1-2
8272: PPUSH
8273: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8277: LD_EXP 1
8281: PPUSH
8282: LD_STRING D7-JMM-3
8284: PPUSH
8285: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8289: LD_VAR 0 1
8293: PUSH
8294: LD_INT 1
8296: ARRAY
8297: PPUSH
8298: LD_STRING D7-Sol1-3
8300: PPUSH
8301: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8305: LD_EXP 3
8309: PPUSH
8310: CALL_OW 302
8314: PUSH
8315: LD_EXP 4
8319: PPUSH
8320: CALL_OW 302
8324: AND
8325: IFFALSE 8367
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8327: LD_EXP 3
8331: PPUSH
8332: LD_STRING D7-Cyrus-3
8334: PPUSH
8335: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8339: LD_VAR 0 1
8343: PUSH
8344: LD_INT 1
8346: ARRAY
8347: PPUSH
8348: LD_STRING D7-Sol1-4
8350: PPUSH
8351: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8355: LD_EXP 4
8359: PPUSH
8360: LD_STRING D7-Lisa-4
8362: PPUSH
8363: CALL_OW 88
// end ; DialogueOff ;
8367: CALL_OW 7
// end ;
8371: PPOPN 1
8373: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8374: LD_EXP 8
8378: PPUSH
8379: CALL_OW 303
8383: PUSH
8384: LD_EXP 21
8388: PUSH
8389: LD_INT 3
8391: EQUAL
8392: AND
8393: IFFALSE 8407
8395: GO 8397
8397: DISABLE
// begin enable ;
8398: ENABLE
// mikhailStatus = 2 ;
8399: LD_ADDR_EXP 21
8403: PUSH
8404: LD_INT 2
8406: ST_TO_ADDR
// end ;
8407: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8408: LD_EXP 8
8412: PPUSH
8413: LD_INT 17
8415: PPUSH
8416: CALL_OW 308
8420: PUSH
8421: LD_EXP 8
8425: PPUSH
8426: CALL_OW 255
8430: PUSH
8431: LD_INT 6
8433: EQUAL
8434: AND
8435: IFFALSE 8468
8437: GO 8439
8439: DISABLE
// begin if not mikhailInBase = 3 then
8440: LD_EXP 22
8444: PUSH
8445: LD_INT 3
8447: EQUAL
8448: NOT
8449: IFFALSE 8459
// mikhailStatus = 3 ;
8451: LD_ADDR_EXP 21
8455: PUSH
8456: LD_INT 3
8458: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8459: LD_EXP 8
8463: PPUSH
8464: CALL_OW 64
// end ;
8468: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8469: LD_EXP 21
8473: PUSH
8474: LD_INT 3
8476: EQUAL
8477: PUSH
8478: LD_EXP 8
8482: PPUSH
8483: CALL_OW 255
8487: PUSH
8488: LD_INT 6
8490: EQUAL
8491: AND
8492: IFFALSE 8658
8494: GO 8496
8496: DISABLE
8497: LD_INT 0
8499: PPUSH
8500: PPUSH
// begin enable ;
8501: ENABLE
// if IsOk ( Mikhail ) then
8502: LD_EXP 8
8506: PPUSH
8507: CALL_OW 302
8511: IFFALSE 8658
// begin attacker := Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8513: LD_ADDR_VAR 0 2
8517: PUSH
8518: LD_EXP 8
8522: PPUSH
8523: LD_INT 22
8525: PUSH
8526: LD_INT 1
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 21
8535: PUSH
8536: LD_INT 1
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: PPUSH
8547: CALL_OW 69
8551: PPUSH
8552: CALL 10407 0 2
8556: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8557: LD_VAR 0 2
8561: PPUSH
8562: LD_EXP 8
8566: PPUSH
8567: CALL_OW 296
8571: PUSH
8572: LD_INT 8
8574: LESS
8575: IFFALSE 8658
// begin if GetSex ( attacker ) = sex_male then
8577: LD_VAR 0 2
8581: PPUSH
8582: CALL_OW 258
8586: PUSH
8587: LD_INT 1
8589: EQUAL
8590: IFFALSE 8626
// begin disable ;
8592: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8593: LD_VAR 0 2
8597: PPUSH
8598: LD_STRING D7a-Sol1-1
8600: PPUSH
8601: CALL_OW 88
// wait ( 0 0$2 ) ;
8605: LD_INT 70
8607: PPUSH
8608: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8612: LD_VAR 0 2
8616: PPUSH
8617: LD_STRING D7a-Sol1-1a
8619: PPUSH
8620: CALL_OW 88
// end else
8624: GO 8658
// begin disable ;
8626: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8627: LD_VAR 0 2
8631: PPUSH
8632: LD_STRING D7a-FSol1-1
8634: PPUSH
8635: CALL_OW 88
// wait ( 0 0$2 ) ;
8639: LD_INT 70
8641: PPUSH
8642: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8646: LD_VAR 0 2
8650: PPUSH
8651: LD_STRING D7a-FSol1-1a
8653: PPUSH
8654: CALL_OW 88
// end ; end ; end ; end ;
8658: PPOPN 2
8660: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8661: LD_EXP 27
8665: PUSH
8666: LD_INT 1
8668: EQUAL
8669: PUSH
8670: LD_INT 22
8672: PPUSH
8673: LD_INT 22
8675: PUSH
8676: LD_INT 3
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: LD_INT 21
8685: PUSH
8686: LD_INT 1
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PPUSH
8697: CALL_OW 70
8701: PUSH
8702: LD_INT 2
8704: GREATER
8705: AND
8706: PUSH
8707: LD_INT 22
8709: PPUSH
8710: LD_INT 22
8712: PUSH
8713: LD_INT 1
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: LD_INT 2
8722: PUSH
8723: LD_INT 21
8725: PUSH
8726: LD_INT 1
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PUSH
8733: LD_INT 59
8735: PUSH
8736: EMPTY
8737: LIST
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: LIST
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: PPUSH
8748: CALL_OW 70
8752: PUSH
8753: LD_INT 0
8755: EQUAL
8756: AND
8757: IFFALSE 8772
8759: GO 8761
8761: DISABLE
// SetSide ( dep1 , 3 ) ;
8762: LD_INT 1
8764: PPUSH
8765: LD_INT 3
8767: PPUSH
8768: CALL_OW 235
8772: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8773: LD_EXP 30
8777: PUSH
8778: LD_INT 1
8780: EQUAL
8781: PUSH
8782: LD_INT 22
8784: PUSH
8785: LD_INT 0
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PUSH
8792: LD_INT 25
8794: PUSH
8795: LD_INT 14
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PPUSH
8806: CALL_OW 69
8810: PUSH
8811: LD_INT 0
8813: EQUAL
8814: AND
8815: IFFALSE 8916
8817: GO 8819
8819: DISABLE
8820: LD_INT 0
8822: PPUSH
8823: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8824: LD_ADDR_VAR 0 2
8828: PUSH
8829: LD_INT 22
8831: PUSH
8832: LD_INT 1
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PUSH
8839: LD_INT 21
8841: PUSH
8842: LD_INT 1
8844: PUSH
8845: EMPTY
8846: LIST
8847: LIST
8848: PUSH
8849: LD_INT 23
8851: PUSH
8852: LD_INT 1
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: LIST
8863: PPUSH
8864: CALL_OW 69
8868: ST_TO_ADDR
// for i in tmp do
8869: LD_ADDR_VAR 0 1
8873: PUSH
8874: LD_VAR 0 2
8878: PUSH
8879: FOR_IN
8880: IFFALSE 8907
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8882: LD_VAR 0 1
8886: PPUSH
8887: LD_INT 1
8889: PPUSH
8890: LD_INT 4
8892: PPUSH
8893: CALL_OW 12
8897: PPUSH
8898: LD_INT 300
8900: PPUSH
8901: CALL_OW 492
8905: GO 8879
8907: POP
8908: POP
// SetAchievement ( ACH_TIGER ) ;
8909: LD_STRING ACH_TIGER
8911: PPUSH
8912: CALL_OW 543
// end ;
8916: PPOPN 2
8918: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
8919: LD_INT 22
8921: PUSH
8922: LD_INT 1
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PUSH
8929: LD_INT 34
8931: PUSH
8932: LD_INT 51
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PPUSH
8943: CALL_OW 69
8947: PUSH
8948: LD_INT 2
8950: GREATEREQUAL
8951: IFFALSE 8963
8953: GO 8955
8955: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
8956: LD_STRING ACH_CARGO
8958: PPUSH
8959: CALL_OW 543
8963: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , un ; begin
8964: LD_INT 0
8966: PPUSH
8967: PPUSH
8968: PPUSH
// for i = 1 to count do
8969: LD_ADDR_VAR 0 8
8973: PUSH
8974: DOUBLE
8975: LD_INT 1
8977: DEC
8978: ST_TO_ADDR
8979: LD_VAR 0 6
8983: PUSH
8984: FOR_TO
8985: IFFALSE 9066
// begin uc_side = side ;
8987: LD_ADDR_OWVAR 20
8991: PUSH
8992: LD_VAR 0 1
8996: ST_TO_ADDR
// uc_nation = nation ;
8997: LD_ADDR_OWVAR 21
9001: PUSH
9002: LD_VAR 0 2
9006: ST_TO_ADDR
// hc_gallery =  ;
9007: LD_ADDR_OWVAR 33
9011: PUSH
9012: LD_STRING 
9014: ST_TO_ADDR
// hc_name =  ;
9015: LD_ADDR_OWVAR 26
9019: PUSH
9020: LD_STRING 
9022: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
9023: LD_INT 0
9025: PPUSH
9026: LD_VAR 0 5
9030: PPUSH
9031: LD_VAR 0 4
9035: PPUSH
9036: CALL_OW 380
// un = CreateHuman ;
9040: LD_ADDR_VAR 0 9
9044: PUSH
9045: CALL_OW 44
9049: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
9050: LD_VAR 0 9
9054: PPUSH
9055: LD_VAR 0 3
9059: PPUSH
9060: CALL_OW 52
// end ;
9064: GO 8984
9066: POP
9067: POP
// end ;
9068: LD_VAR 0 7
9072: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
9073: LD_INT 0
9075: PPUSH
9076: PPUSH
9077: PPUSH
// uc_side := GetSide ( b ) ;
9078: LD_ADDR_OWVAR 20
9082: PUSH
9083: LD_VAR 0 2
9087: PPUSH
9088: CALL_OW 255
9092: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
9093: LD_ADDR_OWVAR 21
9097: PUSH
9098: LD_VAR 0 2
9102: PPUSH
9103: CALL_OW 248
9107: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
9108: LD_INT 0
9110: PPUSH
9111: LD_INT 1
9113: PPUSH
9114: LD_VAR 0 1
9118: PPUSH
9119: CALL_OW 380
// un = CreateHuman ;
9123: LD_ADDR_VAR 0 4
9127: PUSH
9128: CALL_OW 44
9132: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
9133: LD_ADDR_VAR 0 5
9137: PUSH
9138: LD_VAR 0 2
9142: PPUSH
9143: CALL_OW 254
9147: PUSH
9148: LD_INT 3
9150: MINUS
9151: ST_TO_ADDR
// if dir < 0 then
9152: LD_VAR 0 5
9156: PUSH
9157: LD_INT 0
9159: LESS
9160: IFFALSE 9176
// dir := 6 + dir ;
9162: LD_ADDR_VAR 0 5
9166: PUSH
9167: LD_INT 6
9169: PUSH
9170: LD_VAR 0 5
9174: PLUS
9175: ST_TO_ADDR
// SetDir ( un , dir ) ;
9176: LD_VAR 0 4
9180: PPUSH
9181: LD_VAR 0 5
9185: PPUSH
9186: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
9190: LD_VAR 0 4
9194: PPUSH
9195: LD_VAR 0 2
9199: PPUSH
9200: CALL_OW 52
// end ;
9204: LD_VAR 0 3
9208: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkList ; begin
9209: LD_INT 0
9211: PPUSH
9212: PPUSH
9213: PPUSH
9214: PPUSH
// engineerOkList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
9215: LD_ADDR_VAR 0 7
9219: PUSH
9220: LD_INT 22
9222: PUSH
9223: LD_VAR 0 1
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: PUSH
9232: LD_INT 25
9234: PUSH
9235: LD_INT 2
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 24
9244: PUSH
9245: LD_INT 1000
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: LIST
9256: PPUSH
9257: CALL_OW 69
9261: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9262: LD_ADDR_VAR 0 5
9266: PUSH
9267: LD_VAR 0 3
9271: PPUSH
9272: LD_INT 22
9274: PUSH
9275: LD_VAR 0 1
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 21
9286: PUSH
9287: LD_INT 3
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: LD_INT 3
9296: PUSH
9297: LD_INT 24
9299: PUSH
9300: LD_INT 1000
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: PPUSH
9319: CALL_OW 70
9323: ST_TO_ADDR
// if not buildingsList and not engineerOkList then
9324: LD_VAR 0 5
9328: NOT
9329: PUSH
9330: LD_VAR 0 7
9334: NOT
9335: AND
9336: IFFALSE 9340
// exit ;
9338: GO 9536
// if not buildingsList and UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) and IsOk ( building ) then
9340: LD_VAR 0 5
9344: NOT
9345: PUSH
9346: LD_VAR 0 7
9350: PPUSH
9351: LD_INT 3
9353: PUSH
9354: LD_INT 54
9356: PUSH
9357: EMPTY
9358: LIST
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PPUSH
9364: CALL_OW 72
9368: AND
9369: PUSH
9370: LD_VAR 0 2
9374: PPUSH
9375: CALL_OW 302
9379: AND
9380: IFFALSE 9414
// ComEnterUnit ( UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) , building ) ;
9382: LD_VAR 0 7
9386: PPUSH
9387: LD_INT 3
9389: PUSH
9390: LD_INT 54
9392: PUSH
9393: EMPTY
9394: LIST
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PPUSH
9400: CALL_OW 72
9404: PPUSH
9405: LD_VAR 0 2
9409: PPUSH
9410: CALL_OW 120
// if buildingsList then
9414: LD_VAR 0 5
9418: IFFALSE 9536
// begin for i in engineerOkList do
9420: LD_ADDR_VAR 0 6
9424: PUSH
9425: LD_VAR 0 7
9429: PUSH
9430: FOR_IN
9431: IFFALSE 9534
// if IsInUnit ( i ) then
9433: LD_VAR 0 6
9437: PPUSH
9438: CALL_OW 310
9442: IFFALSE 9455
// ComExitBuilding ( i ) else
9444: LD_VAR 0 6
9448: PPUSH
9449: CALL_OW 122
9453: GO 9532
// if GetLives ( i ) > 650 then
9455: LD_VAR 0 6
9459: PPUSH
9460: CALL_OW 256
9464: PUSH
9465: LD_INT 650
9467: GREATER
9468: IFFALSE 9496
// ComRepairBuilding ( i , NearestUnitToUnit ( buildingsList , i ) ) else
9470: LD_VAR 0 6
9474: PPUSH
9475: LD_VAR 0 5
9479: PPUSH
9480: LD_VAR 0 6
9484: PPUSH
9485: CALL_OW 74
9489: PPUSH
9490: CALL_OW 130
9494: GO 9532
// if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9496: LD_VAR 0 6
9500: PPUSH
9501: LD_INT 56
9503: PPUSH
9504: LD_INT 10
9506: PPUSH
9507: CALL_OW 297
9511: PUSH
9512: LD_INT 8
9514: GREATER
9515: IFFALSE 9532
// ComMoveXY ( i , 56 , 10 ) ;
9517: LD_VAR 0 6
9521: PPUSH
9522: LD_INT 56
9524: PPUSH
9525: LD_INT 10
9527: PPUSH
9528: CALL_OW 111
9532: GO 9430
9534: POP
9535: POP
// end ; end ;
9536: LD_VAR 0 4
9540: RET
// export function HealUnitInBase ( side , healArea , baseArea , building ) ; var sciList , i , damageUnits ; begin
9541: LD_INT 0
9543: PPUSH
9544: PPUSH
9545: PPUSH
9546: PPUSH
// sciList := FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9547: LD_ADDR_VAR 0 6
9551: PUSH
9552: LD_INT 22
9554: PUSH
9555: LD_VAR 0 1
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PUSH
9564: LD_INT 25
9566: PUSH
9567: LD_INT 4
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 24
9576: PUSH
9577: LD_INT 250
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: LIST
9588: PPUSH
9589: CALL_OW 69
9593: ST_TO_ADDR
// damageUnits := FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9594: LD_ADDR_VAR 0 8
9598: PUSH
9599: LD_VAR 0 3
9603: PPUSH
9604: LD_INT 22
9606: PUSH
9607: LD_VAR 0 1
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: LD_INT 21
9618: PUSH
9619: LD_INT 1
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PUSH
9626: LD_INT 3
9628: PUSH
9629: LD_INT 24
9631: PUSH
9632: LD_INT 650
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: LIST
9647: PPUSH
9648: CALL_OW 70
9652: ST_TO_ADDR
// if not damageUnits and not sciList then
9653: LD_VAR 0 8
9657: NOT
9658: PUSH
9659: LD_VAR 0 6
9663: NOT
9664: AND
9665: IFFALSE 9669
// exit ;
9667: GO 9808
// if damageUnits then
9669: LD_VAR 0 8
9673: IFFALSE 9752
// begin for i in sciList do
9675: LD_ADDR_VAR 0 7
9679: PUSH
9680: LD_VAR 0 6
9684: PUSH
9685: FOR_IN
9686: IFFALSE 9748
// if IsInUnit ( i ) then
9688: LD_VAR 0 7
9692: PPUSH
9693: CALL_OW 310
9697: IFFALSE 9710
// ComExitBuilding ( i ) else
9699: LD_VAR 0 7
9703: PPUSH
9704: CALL_OW 122
9708: GO 9746
// if not HasTask ( i ) then
9710: LD_VAR 0 7
9714: PPUSH
9715: CALL_OW 314
9719: NOT
9720: IFFALSE 9746
// ComHeal ( i , NearestUnitToUnit ( damageUnits , i ) ) ;
9722: LD_VAR 0 7
9726: PPUSH
9727: LD_VAR 0 8
9731: PPUSH
9732: LD_VAR 0 7
9736: PPUSH
9737: CALL_OW 74
9741: PPUSH
9742: CALL_OW 128
9746: GO 9685
9748: POP
9749: POP
// end else
9750: GO 9808
// if UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) then
9752: LD_VAR 0 6
9756: PPUSH
9757: LD_INT 3
9759: PUSH
9760: LD_INT 54
9762: PUSH
9763: EMPTY
9764: LIST
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: PPUSH
9770: CALL_OW 72
9774: IFFALSE 9808
// ComEnterUnit ( UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) , building ) ;
9776: LD_VAR 0 6
9780: PPUSH
9781: LD_INT 3
9783: PUSH
9784: LD_INT 54
9786: PUSH
9787: EMPTY
9788: LIST
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PPUSH
9794: CALL_OW 72
9798: PPUSH
9799: LD_VAR 0 4
9803: PPUSH
9804: CALL_OW 120
// end ;
9808: LD_VAR 0 5
9812: RET
// export function DefendBases ( area , enemySide , defendersList , building ) ; var i , enemy , nearestUnit ; begin
9813: LD_INT 0
9815: PPUSH
9816: PPUSH
9817: PPUSH
9818: PPUSH
// if not defendersList then
9819: LD_VAR 0 3
9823: NOT
9824: IFFALSE 9828
// exit ;
9826: GO 10210
// enemy := FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9828: LD_ADDR_VAR 0 7
9832: PUSH
9833: LD_VAR 0 1
9837: PPUSH
9838: LD_INT 22
9840: PUSH
9841: LD_VAR 0 2
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 2
9852: PUSH
9853: LD_INT 21
9855: PUSH
9856: LD_INT 2
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PUSH
9863: LD_INT 21
9865: PUSH
9866: LD_INT 1
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: LIST
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PPUSH
9882: CALL_OW 70
9886: ST_TO_ADDR
// if enemy then
9887: LD_VAR 0 7
9891: IFFALSE 10112
// begin for i in defendersList do
9893: LD_ADDR_VAR 0 6
9897: PUSH
9898: LD_VAR 0 3
9902: PUSH
9903: FOR_IN
9904: IFFALSE 10108
// begin if IsInUnit ( i ) and GetLives ( i ) > 500 then
9906: LD_VAR 0 6
9910: PPUSH
9911: CALL_OW 310
9915: PUSH
9916: LD_VAR 0 6
9920: PPUSH
9921: CALL_OW 256
9925: PUSH
9926: LD_INT 500
9928: GREATER
9929: AND
9930: IFFALSE 9943
// ComExitBuilding ( i ) else
9932: LD_VAR 0 6
9936: PPUSH
9937: CALL_OW 122
9941: GO 10106
// if GetLives ( i ) > 650 then
9943: LD_VAR 0 6
9947: PPUSH
9948: CALL_OW 256
9952: PUSH
9953: LD_INT 650
9955: GREATER
9956: IFFALSE 10009
// begin nearestUnit := NearestUnitToUnit ( enemy , i ) ;
9958: LD_ADDR_VAR 0 8
9962: PUSH
9963: LD_VAR 0 7
9967: PPUSH
9968: LD_VAR 0 6
9972: PPUSH
9973: CALL_OW 74
9977: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearestUnit ) , GetY ( nearestUnit ) ) ;
9978: LD_VAR 0 6
9982: PPUSH
9983: LD_VAR 0 8
9987: PPUSH
9988: CALL_OW 250
9992: PPUSH
9993: LD_VAR 0 8
9997: PPUSH
9998: CALL_OW 251
10002: PPUSH
10003: CALL_OW 114
// end else
10007: GO 10106
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
10009: LD_INT 22
10011: PUSH
10012: LD_INT 3
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: LD_INT 25
10021: PUSH
10022: LD_INT 4
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PPUSH
10033: CALL_OW 69
10037: IFFALSE 10077
// begin if GetDistUnitXY ( i , 56 , 10 ) > 8 then
10039: LD_VAR 0 6
10043: PPUSH
10044: LD_INT 56
10046: PPUSH
10047: LD_INT 10
10049: PPUSH
10050: CALL_OW 297
10054: PUSH
10055: LD_INT 8
10057: GREATER
10058: IFFALSE 10075
// ComMoveXY ( i , 56 , 10 ) ;
10060: LD_VAR 0 6
10064: PPUSH
10065: LD_INT 56
10067: PPUSH
10068: LD_INT 10
10070: PPUSH
10071: CALL_OW 111
// end else
10075: GO 10106
// if GetLives ( i ) <= 500 then
10077: LD_VAR 0 6
10081: PPUSH
10082: CALL_OW 256
10086: PUSH
10087: LD_INT 500
10089: LESSEQUAL
10090: IFFALSE 10106
// ComEnterUnit ( i , building ) ;
10092: LD_VAR 0 6
10096: PPUSH
10097: LD_VAR 0 4
10101: PPUSH
10102: CALL_OW 120
// end ;
10106: GO 9903
10108: POP
10109: POP
// end else
10110: GO 10210
// if UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) then
10112: LD_VAR 0 3
10116: PPUSH
10117: LD_INT 56
10119: PUSH
10120: EMPTY
10121: LIST
10122: PUSH
10123: LD_INT 3
10125: PUSH
10126: LD_INT 60
10128: PUSH
10129: EMPTY
10130: LIST
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PUSH
10136: LD_INT 24
10138: PUSH
10139: LD_INT 1000
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: LIST
10150: PPUSH
10151: CALL_OW 72
10155: IFFALSE 10210
// ComEnterUnit ( UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) , building ) ;
10157: LD_VAR 0 3
10161: PPUSH
10162: LD_INT 56
10164: PUSH
10165: EMPTY
10166: LIST
10167: PUSH
10168: LD_INT 3
10170: PUSH
10171: LD_INT 60
10173: PUSH
10174: EMPTY
10175: LIST
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 24
10183: PUSH
10184: LD_INT 1000
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: LIST
10195: PPUSH
10196: CALL_OW 72
10200: PPUSH
10201: LD_VAR 0 4
10205: PPUSH
10206: CALL_OW 120
// end ;
10210: LD_VAR 0 5
10214: RET
// export function RussianTrap ; var i ; begin
10215: LD_INT 0
10217: PPUSH
10218: PPUSH
// if GetSide ( Brian ) = 4 then
10219: LD_EXP 6
10223: PPUSH
10224: CALL_OW 255
10228: PUSH
10229: LD_INT 4
10231: EQUAL
10232: IFFALSE 10255
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10234: LD_EXP 6
10238: PUSH
10239: LD_EXP 7
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: PPUSH
10248: LD_INT 0
10250: PPUSH
10251: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10255: LD_ADDR_VAR 0 2
10259: PUSH
10260: LD_INT 22
10262: PUSH
10263: LD_INT 3
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 21
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PPUSH
10284: CALL_OW 69
10288: PUSH
10289: FOR_IN
10290: IFFALSE 10400
// begin ComExitBuilding ( i ) ;
10292: LD_VAR 0 2
10296: PPUSH
10297: CALL_OW 122
// wait ( 0 0$1 ) ;
10301: LD_INT 35
10303: PPUSH
10304: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10308: LD_VAR 0 2
10312: PPUSH
10313: LD_INT 120
10315: PPUSH
10316: LD_INT 56
10318: PPUSH
10319: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10323: LD_VAR 0 2
10327: PPUSH
10328: LD_INT 111
10330: PPUSH
10331: LD_INT 37
10333: PPUSH
10334: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10338: LD_INT 33
10340: PPUSH
10341: CALL_OW 255
10345: PUSH
10346: LD_INT 3
10348: EQUAL
10349: PUSH
10350: LD_INT 33
10352: PPUSH
10353: CALL_OW 302
10357: AND
10358: IFFALSE 10374
// AddComEnterUnit ( i , arm2 ) else
10360: LD_VAR 0 2
10364: PPUSH
10365: LD_INT 33
10367: PPUSH
10368: CALL_OW 180
10372: GO 10398
// begin AddComCrawl ( i ) ;
10374: LD_VAR 0 2
10378: PPUSH
10379: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10383: LD_VAR 0 2
10387: PPUSH
10388: LD_INT 109
10390: PPUSH
10391: LD_INT 30
10393: PPUSH
10394: CALL_OW 174
// end ; end ;
10398: GO 10289
10400: POP
10401: POP
// end ;
10402: LD_VAR 0 1
10406: RET
// export function Nearest ( un , units ) ; var nearestDist , nearestUn , sold , dist ; begin
10407: LD_INT 0
10409: PPUSH
10410: PPUSH
10411: PPUSH
10412: PPUSH
10413: PPUSH
// nearestDist := 1000 ;
10414: LD_ADDR_VAR 0 4
10418: PUSH
10419: LD_INT 1000
10421: ST_TO_ADDR
// nearestUn := un ;
10422: LD_ADDR_VAR 0 5
10426: PUSH
10427: LD_VAR 0 1
10431: ST_TO_ADDR
// for sold in units do
10432: LD_ADDR_VAR 0 6
10436: PUSH
10437: LD_VAR 0 2
10441: PUSH
10442: FOR_IN
10443: IFFALSE 10499
// begin dist := GetDistUnits ( un , sold ) ;
10445: LD_ADDR_VAR 0 7
10449: PUSH
10450: LD_VAR 0 1
10454: PPUSH
10455: LD_VAR 0 6
10459: PPUSH
10460: CALL_OW 296
10464: ST_TO_ADDR
// if dist < nearestDist then
10465: LD_VAR 0 7
10469: PUSH
10470: LD_VAR 0 4
10474: LESS
10475: IFFALSE 10497
// begin nearestUn := sold ;
10477: LD_ADDR_VAR 0 5
10481: PUSH
10482: LD_VAR 0 6
10486: ST_TO_ADDR
// nearestDist := dist ;
10487: LD_ADDR_VAR 0 4
10491: PUSH
10492: LD_VAR 0 7
10496: ST_TO_ADDR
// end ; end ;
10497: GO 10442
10499: POP
10500: POP
// result := NearestUn ;
10501: LD_ADDR_VAR 0 3
10505: PUSH
10506: LD_VAR 0 5
10510: ST_TO_ADDR
// end ;
10511: LD_VAR 0 3
10515: RET
// export function PrepareDifficulty ; begin
10516: LD_INT 0
10518: PPUSH
// if Difficulty = 1 then
10519: LD_OWVAR 67
10523: PUSH
10524: LD_INT 1
10526: EQUAL
10527: IFFALSE 10590
// begin RemoveUnit ( brw2 ) ;
10529: LD_INT 9
10531: PPUSH
10532: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10536: LD_INT 30
10538: PPUSH
10539: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10543: LD_INT 52
10545: PPUSH
10546: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10550: LD_INT 63
10552: PPUSH
10553: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10557: LD_INT 5
10559: PUSH
10560: LD_INT 4
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PPUSH
10567: LD_INT 60
10569: PPUSH
10570: CALL_OW 240
// RuSoldMinLevel = 0 ;
10574: LD_ADDR_EXP 13
10578: PUSH
10579: LD_INT 0
10581: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10582: LD_ADDR_EXP 14
10586: PUSH
10587: LD_INT 1
10589: ST_TO_ADDR
// end ; if Difficulty = 2 then
10590: LD_OWVAR 67
10594: PUSH
10595: LD_INT 2
10597: EQUAL
10598: IFFALSE 10640
// begin RemoveUnit ( brw4 ) ;
10600: LD_INT 52
10602: PPUSH
10603: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10607: LD_INT 5
10609: PUSH
10610: LD_INT 4
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PPUSH
10617: LD_INT 50
10619: PPUSH
10620: CALL_OW 240
// RuSoldMinLevel = 1 ;
10624: LD_ADDR_EXP 13
10628: PUSH
10629: LD_INT 1
10631: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10632: LD_ADDR_EXP 14
10636: PUSH
10637: LD_INT 2
10639: ST_TO_ADDR
// end ; if Difficulty >= 3 then
10640: LD_OWVAR 67
10644: PUSH
10645: LD_INT 3
10647: GREATEREQUAL
10648: IFFALSE 10683
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10650: LD_INT 5
10652: PUSH
10653: LD_INT 4
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PPUSH
10660: LD_INT 40
10662: PPUSH
10663: CALL_OW 240
// RuSoldMinLevel = 2 ;
10667: LD_ADDR_EXP 13
10671: PUSH
10672: LD_INT 2
10674: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10675: LD_ADDR_EXP 14
10679: PUSH
10680: LD_INT 3
10682: ST_TO_ADDR
// end ; end ;
10683: LD_VAR 0 1
10687: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10688: LD_INT 0
10690: PPUSH
10691: PPUSH
10692: PPUSH
// if not vehicles then
10693: LD_VAR 0 1
10697: NOT
10698: IFFALSE 10702
// exit ;
10700: GO 10832
// tmp := [ ] ;
10702: LD_ADDR_VAR 0 5
10706: PUSH
10707: EMPTY
10708: ST_TO_ADDR
// for i in vehicles do
10709: LD_ADDR_VAR 0 4
10713: PUSH
10714: LD_VAR 0 1
10718: PUSH
10719: FOR_IN
10720: IFFALSE 10816
// tmp := Replace ( tmp , tmp + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10722: LD_ADDR_VAR 0 5
10726: PUSH
10727: LD_VAR 0 5
10731: PPUSH
10732: LD_VAR 0 5
10736: PUSH
10737: LD_INT 1
10739: PLUS
10740: PPUSH
10741: LD_VAR 0 4
10745: PPUSH
10746: CALL_OW 265
10750: PUSH
10751: LD_VAR 0 4
10755: PPUSH
10756: CALL_OW 262
10760: PUSH
10761: LD_VAR 0 4
10765: PPUSH
10766: CALL_OW 263
10770: PUSH
10771: LD_VAR 0 4
10775: PPUSH
10776: CALL_OW 264
10780: PUSH
10781: LD_VAR 0 4
10785: PPUSH
10786: CALL_OW 261
10790: PUSH
10791: LD_VAR 0 4
10795: PPUSH
10796: CALL_OW 256
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: PPUSH
10809: CALL_OW 1
10813: ST_TO_ADDR
10814: GO 10719
10816: POP
10817: POP
// SaveVariable ( tmp , ident ) ;
10818: LD_VAR 0 5
10822: PPUSH
10823: LD_VAR 0 2
10827: PPUSH
10828: CALL_OW 39
// end ; end_of_file
10832: LD_VAR 0 3
10836: RET
// export function PrepareHeroes ; var plive , prefix ; begin
10837: LD_INT 0
10839: PPUSH
10840: PPUSH
10841: PPUSH
// prefix := 01_ ;
10842: LD_ADDR_VAR 0 3
10846: PUSH
10847: LD_STRING 01_
10849: ST_TO_ADDR
// uc_side := 1 ;
10850: LD_ADDR_OWVAR 20
10854: PUSH
10855: LD_INT 1
10857: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debug ) , prefix ) ;
10858: LD_ADDR_EXP 1
10862: PUSH
10863: LD_STRING JMM
10865: PPUSH
10866: LD_EXP 34
10870: NOT
10871: PPUSH
10872: LD_VAR 0 3
10876: PPUSH
10877: CALL 36511 0 3
10881: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10882: LD_ADDR_VAR 0 2
10886: PUSH
10887: LD_STRING 01_JMMLifePoints_1
10889: PPUSH
10890: LD_INT 1000
10892: PPUSH
10893: CALL_OW 30
10897: ST_TO_ADDR
// if plive < 250 then
10898: LD_VAR 0 2
10902: PUSH
10903: LD_INT 250
10905: LESS
10906: IFFALSE 10916
// plive := 300 ;
10908: LD_ADDR_VAR 0 2
10912: PUSH
10913: LD_INT 300
10915: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10916: LD_EXP 1
10920: PPUSH
10921: LD_VAR 0 2
10925: PPUSH
10926: CALL_OW 234
// Powell := NewCharacter ( Powell ) ;
10930: LD_ADDR_EXP 9
10934: PUSH
10935: LD_STRING Powell
10937: PPUSH
10938: CALL_OW 25
10942: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , prefix ) ;
10943: LD_ADDR_EXP 2
10947: PUSH
10948: LD_STRING Bobby
10950: PPUSH
10951: LD_EXP 34
10955: NOT
10956: PPUSH
10957: LD_VAR 0 3
10961: PPUSH
10962: CALL 36511 0 3
10966: ST_TO_ADDR
// if Bobby then
10967: LD_EXP 2
10971: IFFALSE 11021
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10973: LD_ADDR_VAR 0 2
10977: PUSH
10978: LD_STRING 01_BobbyLifePoints_1
10980: PPUSH
10981: LD_INT 1000
10983: PPUSH
10984: CALL_OW 30
10988: ST_TO_ADDR
// if plive < 250 then
10989: LD_VAR 0 2
10993: PUSH
10994: LD_INT 250
10996: LESS
10997: IFFALSE 11007
// plive := 300 ;
10999: LD_ADDR_VAR 0 2
11003: PUSH
11004: LD_INT 300
11006: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
11007: LD_EXP 2
11011: PPUSH
11012: LD_VAR 0 2
11016: PPUSH
11017: CALL_OW 234
// end ; Cyrus := PrepareUnit ( Cyrus , ( not debug ) , prefix ) ;
11021: LD_ADDR_EXP 3
11025: PUSH
11026: LD_STRING Cyrus
11028: PPUSH
11029: LD_EXP 34
11033: NOT
11034: PPUSH
11035: LD_VAR 0 3
11039: PPUSH
11040: CALL 36511 0 3
11044: ST_TO_ADDR
// if Cyrus then
11045: LD_EXP 3
11049: IFFALSE 11099
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
11051: LD_ADDR_VAR 0 2
11055: PUSH
11056: LD_STRING 01_CyrusLifePoints_1
11058: PPUSH
11059: LD_INT 1000
11061: PPUSH
11062: CALL_OW 30
11066: ST_TO_ADDR
// if plive < 250 then
11067: LD_VAR 0 2
11071: PUSH
11072: LD_INT 250
11074: LESS
11075: IFFALSE 11085
// plive := 300 ;
11077: LD_ADDR_VAR 0 2
11081: PUSH
11082: LD_INT 300
11084: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
11085: LD_EXP 3
11089: PPUSH
11090: LD_VAR 0 2
11094: PPUSH
11095: CALL_OW 234
// end ; Khatam := NewCharacter ( Khatam ) ;
11099: LD_ADDR_EXP 5
11103: PUSH
11104: LD_STRING Khatam
11106: PPUSH
11107: CALL_OW 25
11111: ST_TO_ADDR
// uc_side := 4 ;
11112: LD_ADDR_OWVAR 20
11116: PUSH
11117: LD_INT 4
11119: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
11120: LD_ADDR_EXP 4
11124: PUSH
11125: LD_STRING Lisa
11127: PPUSH
11128: CALL_OW 25
11132: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
11133: LD_EXP 1
11137: PPUSH
11138: LD_INT 3
11140: PPUSH
11141: LD_INT 0
11143: PPUSH
11144: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
11148: LD_EXP 2
11152: PPUSH
11153: LD_INT 3
11155: PPUSH
11156: LD_INT 0
11158: PPUSH
11159: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
11163: LD_EXP 3
11167: PPUSH
11168: LD_INT 3
11170: PPUSH
11171: LD_INT 0
11173: PPUSH
11174: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
11178: LD_EXP 4
11182: PPUSH
11183: LD_INT 5
11185: PPUSH
11186: LD_INT 0
11188: PPUSH
11189: CALL_OW 49
// ComCrawl ( Lisa ) ;
11193: LD_EXP 4
11197: PPUSH
11198: CALL_OW 137
// end ;
11202: LD_VAR 0 1
11206: RET
// export function PrepareLisSquad ; var i , un ; begin
11207: LD_INT 0
11209: PPUSH
11210: PPUSH
11211: PPUSH
// uc_side := 4 ;
11212: LD_ADDR_OWVAR 20
11216: PUSH
11217: LD_INT 4
11219: ST_TO_ADDR
// uc_nation := 1 ;
11220: LD_ADDR_OWVAR 21
11224: PUSH
11225: LD_INT 1
11227: ST_TO_ADDR
// hc_class := 2 ;
11228: LD_ADDR_OWVAR 28
11232: PUSH
11233: LD_INT 2
11235: ST_TO_ADDR
// hc_sex := sex_male ;
11236: LD_ADDR_OWVAR 27
11240: PUSH
11241: LD_INT 1
11243: ST_TO_ADDR
// hc_gallery :=  ;
11244: LD_ADDR_OWVAR 33
11248: PUSH
11249: LD_STRING 
11251: ST_TO_ADDR
// hc_name :=  ;
11252: LD_ADDR_OWVAR 26
11256: PUSH
11257: LD_STRING 
11259: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11260: LD_ADDR_OWVAR 30
11264: PUSH
11265: LD_INT 0
11267: PUSH
11268: LD_INT 1
11270: PUSH
11271: LD_INT 0
11273: PUSH
11274: LD_INT 0
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11283: LD_ADDR_OWVAR 31
11287: PUSH
11288: LD_INT 1
11290: PUSH
11291: LD_INT 2
11293: PUSH
11294: LD_INT 0
11296: PUSH
11297: LD_INT 0
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: ST_TO_ADDR
// un := CreateHuman ;
11306: LD_ADDR_VAR 0 3
11310: PUSH
11311: CALL_OW 44
11315: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11316: LD_VAR 0 3
11320: PPUSH
11321: LD_INT 6
11323: PPUSH
11324: LD_INT 0
11326: PPUSH
11327: CALL_OW 49
// hc_sex := sex_female ;
11331: LD_ADDR_OWVAR 27
11335: PUSH
11336: LD_INT 2
11338: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11339: LD_ADDR_OWVAR 30
11343: PUSH
11344: LD_INT 0
11346: PUSH
11347: LD_INT 0
11349: PUSH
11350: LD_INT 0
11352: PUSH
11353: LD_INT 1
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11362: LD_ADDR_OWVAR 31
11366: PUSH
11367: LD_INT 0
11369: PUSH
11370: LD_INT 1
11372: PUSH
11373: LD_INT 0
11375: PUSH
11376: LD_INT 1
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: ST_TO_ADDR
// un := CreateHuman ;
11385: LD_ADDR_VAR 0 3
11389: PUSH
11390: CALL_OW 44
11394: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11395: LD_VAR 0 3
11399: PPUSH
11400: LD_INT 6
11402: PPUSH
11403: LD_INT 0
11405: PPUSH
11406: CALL_OW 49
// if not Bobby and not Cyrus then
11410: LD_EXP 2
11414: NOT
11415: PUSH
11416: LD_EXP 3
11420: NOT
11421: AND
11422: IFFALSE 11511
// begin hc_class := 1 ;
11424: LD_ADDR_OWVAR 28
11428: PUSH
11429: LD_INT 1
11431: ST_TO_ADDR
// hc_sex := sex_male ;
11432: LD_ADDR_OWVAR 27
11436: PUSH
11437: LD_INT 1
11439: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11440: LD_ADDR_OWVAR 30
11444: PUSH
11445: LD_INT 2
11447: PUSH
11448: LD_INT 3
11450: PUSH
11451: LD_INT 1
11453: PUSH
11454: LD_INT 0
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11463: LD_ADDR_OWVAR 31
11467: PUSH
11468: LD_INT 2
11470: PUSH
11471: LD_INT 3
11473: PUSH
11474: LD_INT 1
11476: PUSH
11477: LD_INT 0
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: ST_TO_ADDR
// un := CreateHuman ;
11486: LD_ADDR_VAR 0 3
11490: PUSH
11491: CALL_OW 44
11495: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11496: LD_VAR 0 3
11500: PPUSH
11501: LD_INT 31
11503: PPUSH
11504: LD_INT 0
11506: PPUSH
11507: CALL_OW 49
// end ; InitHc ;
11511: CALL_OW 19
// end ;
11515: LD_VAR 0 1
11519: RET
// export function PrepareOtherAmericans ; begin
11520: LD_INT 0
11522: PPUSH
// uc_side := 4 ;
11523: LD_ADDR_OWVAR 20
11527: PUSH
11528: LD_INT 4
11530: ST_TO_ADDR
// uc_nation := 1 ;
11531: LD_ADDR_OWVAR 21
11535: PUSH
11536: LD_INT 1
11538: ST_TO_ADDR
// hc_gallery :=  ;
11539: LD_ADDR_OWVAR 33
11543: PUSH
11544: LD_STRING 
11546: ST_TO_ADDR
// hc_name := Tom Garvin ;
11547: LD_ADDR_OWVAR 26
11551: PUSH
11552: LD_STRING Tom Garvin
11554: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 2 ) ;
11555: LD_INT 1
11557: PPUSH
11558: LD_INT 1
11560: PPUSH
11561: LD_INT 2
11563: PPUSH
11564: CALL_OW 380
// Brian := CreateHuman ;
11568: LD_ADDR_EXP 6
11572: PUSH
11573: CALL_OW 44
11577: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11578: LD_EXP 6
11582: PPUSH
11583: LD_INT 10
11585: PPUSH
11586: LD_INT 0
11588: PPUSH
11589: CALL_OW 49
// hc_name := Jerry White ;
11593: LD_ADDR_OWVAR 26
11597: PUSH
11598: LD_STRING Jerry White
11600: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , 2 ) ;
11601: LD_INT 1
11603: PPUSH
11604: LD_INT 3
11606: PPUSH
11607: LD_INT 2
11609: PPUSH
11610: CALL_OW 380
// Jerry := CreateHuman ;
11614: LD_ADDR_EXP 7
11618: PUSH
11619: CALL_OW 44
11623: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11624: LD_EXP 7
11628: PPUSH
11629: LD_INT 10
11631: PPUSH
11632: LD_INT 0
11634: PPUSH
11635: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11639: LD_EXP 6
11643: PUSH
11644: LD_EXP 7
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PPUSH
11653: CALL_OW 140
// end ;
11657: LD_VAR 0 1
11661: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un , hexes ; begin
11662: LD_INT 0
11664: PPUSH
11665: PPUSH
11666: PPUSH
11667: PPUSH
// hexes := AreaToList ( DeadsSpawn , 0 ) ;
11668: LD_ADDR_VAR 0 4
11672: PUSH
11673: LD_INT 16
11675: PPUSH
11676: LD_INT 0
11678: PPUSH
11679: CALL_OW 517
11683: ST_TO_ADDR
// for i = 1 to 6 do
11684: LD_ADDR_VAR 0 2
11688: PUSH
11689: DOUBLE
11690: LD_INT 1
11692: DEC
11693: ST_TO_ADDR
11694: LD_INT 6
11696: PUSH
11697: FOR_TO
11698: IFFALSE 11844
// begin uc_side := 4 ;
11700: LD_ADDR_OWVAR 20
11704: PUSH
11705: LD_INT 4
11707: ST_TO_ADDR
// uc_nation := 1 ;
11708: LD_ADDR_OWVAR 21
11712: PUSH
11713: LD_INT 1
11715: ST_TO_ADDR
// hc_gallery :=  ;
11716: LD_ADDR_OWVAR 33
11720: PUSH
11721: LD_STRING 
11723: ST_TO_ADDR
// hc_name :=  ;
11724: LD_ADDR_OWVAR 26
11728: PUSH
11729: LD_STRING 
11731: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 1 ) ;
11732: LD_INT 0
11734: PPUSH
11735: LD_INT 1
11737: PUSH
11738: LD_INT 1
11740: PUSH
11741: LD_INT 4
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: LIST
11748: PUSH
11749: LD_VAR 0 2
11753: PUSH
11754: LD_INT 3
11756: MOD
11757: PUSH
11758: LD_INT 1
11760: PLUS
11761: ARRAY
11762: PPUSH
11763: LD_INT 1
11765: PPUSH
11766: CALL_OW 380
// un := CreateHuman ;
11770: LD_ADDR_VAR 0 3
11774: PUSH
11775: CALL_OW 44
11779: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11780: LD_VAR 0 3
11784: PPUSH
11785: LD_INT 0
11787: PPUSH
11788: LD_INT 5
11790: PPUSH
11791: CALL_OW 12
11795: PPUSH
11796: CALL_OW 233
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
11800: LD_VAR 0 3
11804: PPUSH
11805: LD_VAR 0 4
11809: PUSH
11810: LD_INT 1
11812: ARRAY
11813: PUSH
11814: LD_VAR 0 2
11818: ARRAY
11819: PPUSH
11820: LD_VAR 0 4
11824: PUSH
11825: LD_INT 2
11827: ARRAY
11828: PUSH
11829: LD_VAR 0 2
11833: ARRAY
11834: PPUSH
11835: LD_INT 1
11837: PPUSH
11838: CALL_OW 601
// end ;
11842: GO 11697
11844: POP
11845: POP
// DyingSold := CreateHuman ;
11846: LD_ADDR_EXP 35
11850: PUSH
11851: CALL_OW 44
11855: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11856: LD_EXP 35
11860: PPUSH
11861: LD_INT 16
11863: PPUSH
11864: LD_INT 0
11866: PPUSH
11867: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11871: LD_EXP 35
11875: PPUSH
11876: LD_INT 250
11878: PPUSH
11879: CALL_OW 234
// end ; end_of_file
11883: LD_VAR 0 1
11887: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11888: LD_INT 0
11890: PPUSH
11891: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11892: LD_ADDR_VAR 0 2
11896: PUSH
11897: LD_INT 22
11899: PUSH
11900: LD_INT 1
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 23
11909: PUSH
11910: LD_INT 1
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 25
11919: PUSH
11920: LD_INT 2
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: LD_INT 50
11929: PUSH
11930: EMPTY
11931: LIST
11932: PUSH
11933: LD_INT 56
11935: PUSH
11936: EMPTY
11937: LIST
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: PPUSH
11946: CALL_OW 69
11950: PUSH
11951: LD_EXP 1
11955: PUSH
11956: EMPTY
11957: LIST
11958: DIFF
11959: ST_TO_ADDR
// if not tmp then
11960: LD_VAR 0 2
11964: NOT
11965: IFFALSE 11969
// exit ;
11967: GO 12045
// uc_side = 6 ;
11969: LD_ADDR_OWVAR 20
11973: PUSH
11974: LD_INT 6
11976: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11977: LD_ADDR_EXP 8
11981: PUSH
11982: LD_STRING Mikhail
11984: PPUSH
11985: CALL_OW 25
11989: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11990: LD_EXP 8
11994: PPUSH
11995: LD_INT 3
11997: PPUSH
11998: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
12002: LD_EXP 8
12006: PPUSH
12007: LD_VAR 0 2
12011: PUSH
12012: LD_INT 1
12014: ARRAY
12015: PPUSH
12016: CALL_OW 250
12020: PPUSH
12021: LD_VAR 0 2
12025: PUSH
12026: LD_INT 1
12028: ARRAY
12029: PPUSH
12030: CALL_OW 251
12034: PPUSH
12035: LD_INT 5
12037: PPUSH
12038: LD_INT 1
12040: PPUSH
12041: CALL_OW 50
// end ;
12045: LD_VAR 0 1
12049: RET
// export function PrepareRussianCommander ; begin
12050: LD_INT 0
12052: PPUSH
// uc_side = 3 ;
12053: LD_ADDR_OWVAR 20
12057: PUSH
12058: LD_INT 3
12060: ST_TO_ADDR
// uc_nation = 3 ;
12061: LD_ADDR_OWVAR 21
12065: PUSH
12066: LD_INT 3
12068: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
12069: LD_ADDR_EXP 19
12073: PUSH
12074: LD_STRING Natasza
12076: PPUSH
12077: CALL_OW 25
12081: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
12082: LD_EXP 19
12086: PPUSH
12087: LD_INT 24
12089: PPUSH
12090: LD_INT 0
12092: PPUSH
12093: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
12097: LD_EXP 19
12101: PPUSH
12102: LD_INT 56
12104: PPUSH
12105: LD_INT 16
12107: PPUSH
12108: CALL_OW 118
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , Natasza ) ;
12112: LD_ADDR_EXP 24
12116: PUSH
12117: LD_EXP 24
12121: PPUSH
12122: LD_EXP 24
12126: PUSH
12127: LD_INT 1
12129: PLUS
12130: PPUSH
12131: LD_EXP 19
12135: PPUSH
12136: CALL_OW 1
12140: ST_TO_ADDR
// end ;
12141: LD_VAR 0 1
12145: RET
// export function PrepareSouthBase ; var i , un ; begin
12146: LD_INT 0
12148: PPUSH
12149: PPUSH
12150: PPUSH
// for i = 1 to 2 do
12151: LD_ADDR_VAR 0 2
12155: PUSH
12156: DOUBLE
12157: LD_INT 1
12159: DEC
12160: ST_TO_ADDR
12161: LD_INT 2
12163: PUSH
12164: FOR_TO
12165: IFFALSE 12274
// begin uc_side = 3 ;
12167: LD_ADDR_OWVAR 20
12171: PUSH
12172: LD_INT 3
12174: ST_TO_ADDR
// uc_nation = 3 ;
12175: LD_ADDR_OWVAR 21
12179: PUSH
12180: LD_INT 3
12182: ST_TO_ADDR
// hc_gallery =  ;
12183: LD_ADDR_OWVAR 33
12187: PUSH
12188: LD_STRING 
12190: ST_TO_ADDR
// hc_name =  ;
12191: LD_ADDR_OWVAR 26
12195: PUSH
12196: LD_STRING 
12198: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12199: LD_INT 1
12201: PPUSH
12202: LD_INT 1
12204: PPUSH
12205: LD_EXP 13
12209: PPUSH
12210: LD_EXP 14
12214: PPUSH
12215: CALL_OW 12
12219: PPUSH
12220: CALL_OW 380
// hc_importance = 0 ;
12224: LD_ADDR_OWVAR 32
12228: PUSH
12229: LD_INT 0
12231: ST_TO_ADDR
// un = CreateHuman ;
12232: LD_ADDR_VAR 0 3
12236: PUSH
12237: CALL_OW 44
12241: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12242: LD_VAR 0 3
12246: PPUSH
12247: LD_INT 11
12249: PPUSH
12250: LD_INT 0
12252: PPUSH
12253: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12257: LD_VAR 0 3
12261: PPUSH
12262: LD_INT 111
12264: PPUSH
12265: LD_INT 38
12267: PPUSH
12268: CALL_OW 118
// end ;
12272: GO 12164
12274: POP
12275: POP
// for i = 1 to 2 do
12276: LD_ADDR_VAR 0 2
12280: PUSH
12281: DOUBLE
12282: LD_INT 1
12284: DEC
12285: ST_TO_ADDR
12286: LD_INT 2
12288: PUSH
12289: FOR_TO
12290: IFFALSE 12373
// begin uc_side = 3 ;
12292: LD_ADDR_OWVAR 20
12296: PUSH
12297: LD_INT 3
12299: ST_TO_ADDR
// uc_nation = 3 ;
12300: LD_ADDR_OWVAR 21
12304: PUSH
12305: LD_INT 3
12307: ST_TO_ADDR
// hc_gallery =  ;
12308: LD_ADDR_OWVAR 33
12312: PUSH
12313: LD_STRING 
12315: ST_TO_ADDR
// hc_name =  ;
12316: LD_ADDR_OWVAR 26
12320: PUSH
12321: LD_STRING 
12323: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12324: LD_INT 0
12326: PPUSH
12327: LD_INT 3
12329: PPUSH
12330: LD_EXP 13
12334: PPUSH
12335: LD_EXP 14
12339: PPUSH
12340: CALL_OW 12
12344: PPUSH
12345: CALL_OW 380
// un = CreateHuman ;
12349: LD_ADDR_VAR 0 3
12353: PUSH
12354: CALL_OW 44
12358: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12359: LD_VAR 0 3
12363: PPUSH
12364: LD_INT 10
12366: PPUSH
12367: CALL_OW 52
// end ;
12371: GO 12289
12373: POP
12374: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12375: LD_INT 3
12377: PPUSH
12378: LD_INT 3
12380: PPUSH
12381: LD_INT 33
12383: PPUSH
12384: LD_EXP 13
12388: PPUSH
12389: LD_EXP 14
12393: PPUSH
12394: CALL_OW 12
12398: PPUSH
12399: LD_INT 1
12401: PPUSH
12402: LD_INT 1
12404: PUSH
12405: LD_INT 2
12407: PUSH
12408: LD_INT 2
12410: PUSH
12411: LD_INT 3
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: PUSH
12420: LD_OWVAR 67
12424: ARRAY
12425: PPUSH
12426: CALL 8964 0 6
// for i in UnitsInside ( arm2 ) do
12430: LD_ADDR_VAR 0 2
12434: PUSH
12435: LD_INT 33
12437: PPUSH
12438: CALL_OW 313
12442: PUSH
12443: FOR_IN
12444: IFFALSE 12477
// southBaseDefenders = Replace ( southBaseDefenders , southBaseDefenders + 1 , i ) ;
12446: LD_ADDR_EXP 25
12450: PUSH
12451: LD_EXP 25
12455: PPUSH
12456: LD_EXP 25
12460: PUSH
12461: LD_INT 1
12463: PLUS
12464: PPUSH
12465: LD_VAR 0 2
12469: PPUSH
12470: CALL_OW 1
12474: ST_TO_ADDR
12475: GO 12443
12477: POP
12478: POP
// end ;
12479: LD_VAR 0 1
12483: RET
// export function PrepareNorthBase ; var i , un ; begin
12484: LD_INT 0
12486: PPUSH
12487: PPUSH
12488: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) , 4 ] [ Difficulty ] do
12489: LD_ADDR_VAR 0 2
12493: PUSH
12494: DOUBLE
12495: LD_INT 1
12497: DEC
12498: ST_TO_ADDR
12499: LD_INT 1
12501: PPUSH
12502: LD_INT 2
12504: PPUSH
12505: CALL_OW 12
12509: PUSH
12510: LD_INT 2
12512: PPUSH
12513: LD_INT 3
12515: PPUSH
12516: CALL_OW 12
12520: PUSH
12521: LD_INT 3
12523: PPUSH
12524: LD_INT 4
12526: PPUSH
12527: CALL_OW 12
12531: PUSH
12532: LD_INT 4
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: PUSH
12541: LD_OWVAR 67
12545: ARRAY
12546: PUSH
12547: FOR_TO
12548: IFFALSE 12634
// begin uc_side = 3 ;
12550: LD_ADDR_OWVAR 20
12554: PUSH
12555: LD_INT 3
12557: ST_TO_ADDR
// uc_nation = 3 ;
12558: LD_ADDR_OWVAR 21
12562: PUSH
12563: LD_INT 3
12565: ST_TO_ADDR
// hc_gallery =  ;
12566: LD_ADDR_OWVAR 33
12570: PUSH
12571: LD_STRING 
12573: ST_TO_ADDR
// hc_name =  ;
12574: LD_ADDR_OWVAR 26
12578: PUSH
12579: LD_STRING 
12581: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12582: LD_INT 0
12584: PPUSH
12585: LD_INT 1
12587: PPUSH
12588: LD_EXP 13
12592: PPUSH
12593: LD_EXP 14
12597: PPUSH
12598: CALL_OW 12
12602: PPUSH
12603: CALL_OW 380
// un = CreateHuman ;
12607: LD_ADDR_VAR 0 3
12611: PUSH
12612: CALL_OW 44
12616: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12617: LD_VAR 0 3
12621: PPUSH
12622: LD_INT 14
12624: PPUSH
12625: LD_INT 0
12627: PPUSH
12628: CALL_OW 49
// end ;
12632: GO 12547
12634: POP
12635: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) , 4 ] [ Difficulty ] ) ;
12636: LD_INT 3
12638: PPUSH
12639: LD_INT 3
12641: PPUSH
12642: LD_INT 2
12644: PPUSH
12645: LD_EXP 13
12649: PPUSH
12650: LD_EXP 14
12654: PPUSH
12655: CALL_OW 12
12659: PPUSH
12660: LD_INT 1
12662: PPUSH
12663: LD_INT 1
12665: PPUSH
12666: LD_INT 2
12668: PPUSH
12669: CALL_OW 12
12673: PUSH
12674: LD_INT 1
12676: PPUSH
12677: LD_INT 3
12679: PPUSH
12680: CALL_OW 12
12684: PUSH
12685: LD_INT 1
12687: PPUSH
12688: LD_INT 3
12690: PPUSH
12691: CALL_OW 12
12695: PUSH
12696: LD_INT 4
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: PUSH
12705: LD_OWVAR 67
12709: ARRAY
12710: PPUSH
12711: CALL 8964 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 , 2 ] [ Difficulty ] ) ;
12715: LD_INT 3
12717: PPUSH
12718: LD_INT 3
12720: PPUSH
12721: LD_INT 23
12723: PPUSH
12724: LD_EXP 13
12728: PPUSH
12729: LD_EXP 14
12733: PPUSH
12734: CALL_OW 12
12738: PPUSH
12739: LD_INT 4
12741: PPUSH
12742: LD_INT 0
12744: PUSH
12745: LD_INT 1
12747: PUSH
12748: LD_INT 2
12750: PUSH
12751: LD_INT 2
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: PUSH
12760: LD_OWVAR 67
12764: ARRAY
12765: PPUSH
12766: CALL 8964 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12770: LD_INT 3
12772: PPUSH
12773: LD_INT 3
12775: PPUSH
12776: LD_INT 1
12778: PPUSH
12779: LD_EXP 13
12783: PPUSH
12784: LD_EXP 14
12788: PPUSH
12789: CALL_OW 12
12793: PPUSH
12794: LD_INT 2
12796: PPUSH
12797: LD_INT 1
12799: PUSH
12800: LD_INT 2
12802: PUSH
12803: LD_INT 2
12805: PUSH
12806: LD_INT 3
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: PUSH
12815: LD_OWVAR 67
12819: ARRAY
12820: PPUSH
12821: CALL 8964 0 6
// for i in UnitsInside ( arm1 ) do
12825: LD_ADDR_VAR 0 2
12829: PUSH
12830: LD_INT 2
12832: PPUSH
12833: CALL_OW 313
12837: PUSH
12838: FOR_IN
12839: IFFALSE 12872
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , i ) ;
12841: LD_ADDR_EXP 24
12845: PUSH
12846: LD_EXP 24
12850: PPUSH
12851: LD_EXP 24
12855: PUSH
12856: LD_INT 1
12858: PLUS
12859: PPUSH
12860: LD_VAR 0 2
12864: PPUSH
12865: CALL_OW 1
12869: ST_TO_ADDR
12870: GO 12838
12872: POP
12873: POP
// end ;
12874: LD_VAR 0 1
12878: RET
// export function PrepareOtherRussians ; var i , un ; begin
12879: LD_INT 0
12881: PPUSH
12882: PPUSH
12883: PPUSH
// for i = 1 to 2 do
12884: LD_ADDR_VAR 0 2
12888: PUSH
12889: DOUBLE
12890: LD_INT 1
12892: DEC
12893: ST_TO_ADDR
12894: LD_INT 2
12896: PUSH
12897: FOR_TO
12898: IFFALSE 12999
// begin uc_side = 3 ;
12900: LD_ADDR_OWVAR 20
12904: PUSH
12905: LD_INT 3
12907: ST_TO_ADDR
// uc_nation = 3 ;
12908: LD_ADDR_OWVAR 21
12912: PUSH
12913: LD_INT 3
12915: ST_TO_ADDR
// hc_gallery =  ;
12916: LD_ADDR_OWVAR 33
12920: PUSH
12921: LD_STRING 
12923: ST_TO_ADDR
// hc_name =  ;
12924: LD_ADDR_OWVAR 26
12928: PUSH
12929: LD_STRING 
12931: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12932: LD_INT 0
12934: PPUSH
12935: LD_INT 1
12937: PPUSH
12938: LD_EXP 13
12942: PPUSH
12943: LD_EXP 14
12947: PPUSH
12948: CALL_OW 12
12952: PPUSH
12953: CALL_OW 380
// un = CreateHuman ;
12957: LD_ADDR_VAR 0 3
12961: PUSH
12962: CALL_OW 44
12966: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12967: LD_VAR 0 3
12971: PPUSH
12972: LD_INT 9
12974: PPUSH
12975: LD_INT 0
12977: PPUSH
12978: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12982: LD_VAR 0 3
12986: PPUSH
12987: LD_INT 80
12989: PPUSH
12990: LD_INT 73
12992: PPUSH
12993: CALL_OW 118
// end ;
12997: GO 12897
12999: POP
13000: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
13001: LD_ADDR_VAR 0 2
13005: PUSH
13006: LD_INT 22
13008: PUSH
13009: LD_INT 3
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 30
13018: PUSH
13019: LD_INT 31
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PPUSH
13030: CALL_OW 69
13034: PUSH
13035: FOR_IN
13036: IFFALSE 13064
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
13038: LD_EXP 13
13042: PPUSH
13043: LD_EXP 14
13047: PPUSH
13048: CALL_OW 12
13052: PPUSH
13053: LD_VAR 0 2
13057: PPUSH
13058: CALL 9073 0 2
13062: GO 13035
13064: POP
13065: POP
// end ;
13066: LD_VAR 0 1
13070: RET
// export function PrepareCargoBays ; begin
13071: LD_INT 0
13073: PPUSH
// uc_side = 3 ;
13074: LD_ADDR_OWVAR 20
13078: PUSH
13079: LD_INT 3
13081: ST_TO_ADDR
// uc_nation = 3 ;
13082: LD_ADDR_OWVAR 21
13086: PUSH
13087: LD_INT 3
13089: ST_TO_ADDR
// vc_engine = 1 ;
13090: LD_ADDR_OWVAR 39
13094: PUSH
13095: LD_INT 1
13097: ST_TO_ADDR
// vc_control = 1 ;
13098: LD_ADDR_OWVAR 38
13102: PUSH
13103: LD_INT 1
13105: ST_TO_ADDR
// vc_weapon = 51 ;
13106: LD_ADDR_OWVAR 40
13110: PUSH
13111: LD_INT 51
13113: ST_TO_ADDR
// vc_chassis = 22 ;
13114: LD_ADDR_OWVAR 37
13118: PUSH
13119: LD_INT 22
13121: ST_TO_ADDR
// cargo1 = CreateVehicle ;
13122: LD_ADDR_EXP 15
13126: PUSH
13127: CALL_OW 45
13131: ST_TO_ADDR
// cargo2 = CreateVehicle ;
13132: LD_ADDR_EXP 16
13136: PUSH
13137: CALL_OW 45
13141: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
13142: LD_EXP 15
13146: PPUSH
13147: LD_INT 13
13149: PPUSH
13150: LD_INT 0
13152: PPUSH
13153: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
13157: LD_EXP 16
13161: PPUSH
13162: LD_INT 13
13164: PPUSH
13165: LD_INT 0
13167: PPUSH
13168: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13172: LD_EXP 15
13176: PPUSH
13177: LD_INT 2
13179: PPUSH
13180: LD_INT 70
13182: PUSH
13183: LD_INT 50
13185: PUSH
13186: LD_INT 30
13188: PUSH
13189: LD_INT 20
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: PUSH
13198: LD_OWVAR 67
13202: ARRAY
13203: PPUSH
13204: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13208: LD_EXP 16
13212: PPUSH
13213: LD_INT 2
13215: PPUSH
13216: LD_INT 70
13218: PUSH
13219: LD_INT 50
13221: PUSH
13222: LD_INT 30
13224: PUSH
13225: LD_INT 20
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: PUSH
13234: LD_OWVAR 67
13238: ARRAY
13239: PPUSH
13240: CALL_OW 291
// hc_gallery =  ;
13244: LD_ADDR_OWVAR 33
13248: PUSH
13249: LD_STRING 
13251: ST_TO_ADDR
// hc_name =  ;
13252: LD_ADDR_OWVAR 26
13256: PUSH
13257: LD_STRING 
13259: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13260: LD_INT 1
13262: PPUSH
13263: LD_INT 3
13265: PPUSH
13266: LD_INT 1
13268: PPUSH
13269: LD_INT 2
13271: PPUSH
13272: CALL_OW 12
13276: PPUSH
13277: CALL_OW 380
// driver1 = CreateHuman ;
13281: LD_ADDR_EXP 17
13285: PUSH
13286: CALL_OW 44
13290: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13291: LD_EXP 17
13295: PPUSH
13296: LD_EXP 15
13300: PPUSH
13301: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13305: LD_ADDR_OWVAR 26
13309: PUSH
13310: LD_STRING Nikolai Andreyev
13312: ST_TO_ADDR
// driver2 = CreateHuman ;
13313: LD_ADDR_EXP 18
13317: PUSH
13318: CALL_OW 44
13322: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13323: LD_EXP 18
13327: PPUSH
13328: LD_EXP 16
13332: PPUSH
13333: CALL_OW 52
// end ;
13337: LD_VAR 0 1
13341: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , mech ; begin
13342: LD_INT 0
13344: PPUSH
13345: PPUSH
13346: PPUSH
13347: PPUSH
13348: PPUSH
13349: PPUSH
// uc_side = 3 ;
13350: LD_ADDR_OWVAR 20
13354: PUSH
13355: LD_INT 3
13357: ST_TO_ADDR
// uc_nation = 3 ;
13358: LD_ADDR_OWVAR 21
13362: PUSH
13363: LD_INT 3
13365: ST_TO_ADDR
// for i := 1 to count do
13366: LD_ADDR_VAR 0 4
13370: PUSH
13371: DOUBLE
13372: LD_INT 1
13374: DEC
13375: ST_TO_ADDR
13376: LD_VAR 0 1
13380: PUSH
13381: FOR_TO
13382: IFFALSE 13644
// begin vc_engine = 1 ;
13384: LD_ADDR_OWVAR 39
13388: PUSH
13389: LD_INT 1
13391: ST_TO_ADDR
// vc_control = 1 ;
13392: LD_ADDR_OWVAR 38
13396: PUSH
13397: LD_INT 1
13399: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
13400: LD_ADDR_OWVAR 40
13404: PUSH
13405: LD_INT 42
13407: ST_TO_ADDR
// if Difficulty = 3 then
13408: LD_OWVAR 67
13412: PUSH
13413: LD_INT 3
13415: EQUAL
13416: IFFALSE 13445
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13418: LD_ADDR_OWVAR 40
13422: PUSH
13423: LD_INT 42
13425: PUSH
13426: LD_INT 43
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 1
13435: PPUSH
13436: LD_INT 2
13438: PPUSH
13439: CALL_OW 12
13443: ARRAY
13444: ST_TO_ADDR
// if Difficulty = 4 then
13445: LD_OWVAR 67
13449: PUSH
13450: LD_INT 4
13452: EQUAL
13453: IFFALSE 13490
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 4 ) ] ;
13455: LD_ADDR_OWVAR 40
13459: PUSH
13460: LD_INT 42
13462: PUSH
13463: LD_INT 43
13465: PUSH
13466: LD_INT 43
13468: PUSH
13469: LD_INT 44
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 1
13480: PPUSH
13481: LD_INT 4
13483: PPUSH
13484: CALL_OW 12
13488: ARRAY
13489: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
13490: LD_ADDR_OWVAR 37
13494: PUSH
13495: LD_INT 21
13497: PUSH
13498: LD_INT 22
13500: PUSH
13501: LD_INT 22
13503: PUSH
13504: LD_INT 22
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: PUSH
13513: LD_OWVAR 67
13517: ARRAY
13518: ST_TO_ADDR
// veh = CreateVehicle ;
13519: LD_ADDR_VAR 0 5
13523: PUSH
13524: CALL_OW 45
13528: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13529: LD_VAR 0 5
13533: PPUSH
13534: LD_VAR 0 2
13538: PPUSH
13539: LD_INT 0
13541: PPUSH
13542: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13546: LD_ADDR_EXP 26
13550: PUSH
13551: LD_EXP 26
13555: PUSH
13556: LD_VAR 0 5
13560: ADD
13561: ST_TO_ADDR
// hc_gallery =  ;
13562: LD_ADDR_OWVAR 33
13566: PUSH
13567: LD_STRING 
13569: ST_TO_ADDR
// hc_name =  ;
13570: LD_ADDR_OWVAR 26
13574: PUSH
13575: LD_STRING 
13577: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13578: LD_INT 0
13580: PPUSH
13581: LD_INT 3
13583: PPUSH
13584: LD_EXP 13
13588: PPUSH
13589: LD_EXP 14
13593: PPUSH
13594: CALL_OW 12
13598: PPUSH
13599: CALL_OW 380
// un = CreateHuman ;
13603: LD_ADDR_VAR 0 6
13607: PUSH
13608: CALL_OW 44
13612: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13613: LD_VAR 0 6
13617: PPUSH
13618: LD_VAR 0 5
13622: PPUSH
13623: CALL_OW 52
// ComMoveXY ( un , 14 , 9 ) ;
13627: LD_VAR 0 6
13631: PPUSH
13632: LD_INT 14
13634: PPUSH
13635: LD_INT 9
13637: PPUSH
13638: CALL_OW 111
// end ;
13642: GO 13381
13644: POP
13645: POP
// wait ( 0 0$1 ) ;
13646: LD_INT 35
13648: PPUSH
13649: CALL_OW 67
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13653: LD_INT 0
13655: PPUSH
13656: LD_INT 2
13658: PPUSH
13659: LD_EXP 13
13663: PPUSH
13664: LD_EXP 14
13668: PPUSH
13669: CALL_OW 12
13673: PPUSH
13674: CALL_OW 380
// un = CreateHuman ;
13678: LD_ADDR_VAR 0 6
13682: PUSH
13683: CALL_OW 44
13687: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13688: LD_ADDR_VAR 0 4
13692: PUSH
13693: DOUBLE
13694: LD_INT 1
13696: DEC
13697: ST_TO_ADDR
13698: LD_VAR 0 1
13702: PUSH
13703: LD_INT 2
13705: PUSH
13706: LD_INT 2
13708: MUL
13709: PLUS
13710: PUSH
13711: FOR_TO
13712: IFFALSE 13804
// begin hc_gallery =  ;
13714: LD_ADDR_OWVAR 33
13718: PUSH
13719: LD_STRING 
13721: ST_TO_ADDR
// hc_name =  ;
13722: LD_ADDR_OWVAR 26
13726: PUSH
13727: LD_STRING 
13729: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13730: LD_INT 1
13732: PPUSH
13733: LD_INT 1
13735: PPUSH
13736: LD_EXP 13
13740: PPUSH
13741: LD_EXP 14
13745: PPUSH
13746: CALL_OW 12
13750: PPUSH
13751: CALL_OW 380
// un = CreateHuman ;
13755: LD_ADDR_VAR 0 6
13759: PUSH
13760: CALL_OW 44
13764: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 13 , 4 , false ) ;
13765: LD_VAR 0 6
13769: PPUSH
13770: LD_INT 9
13772: PPUSH
13773: LD_INT 13
13775: PPUSH
13776: LD_INT 4
13778: PPUSH
13779: LD_INT 0
13781: PPUSH
13782: CALL_OW 50
// attackGroup = attackGroup ^ un ;
13786: LD_ADDR_EXP 26
13790: PUSH
13791: LD_EXP 26
13795: PUSH
13796: LD_VAR 0 6
13800: ADD
13801: ST_TO_ADDR
// end ;
13802: GO 13711
13804: POP
13805: POP
// tmp := FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13806: LD_ADDR_VAR 0 7
13810: PUSH
13811: LD_INT 26
13813: PPUSH
13814: LD_INT 22
13816: PUSH
13817: LD_INT 3
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PUSH
13824: LD_INT 21
13826: PUSH
13827: LD_INT 1
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: LD_INT 26
13836: PUSH
13837: LD_INT 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: LIST
13848: PPUSH
13849: CALL_OW 70
13853: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13854: LD_VAR 0 7
13858: PUSH
13859: LD_INT 1
13861: ARRAY
13862: PPUSH
13863: LD_STRING D9-Rus3-1
13865: PPUSH
13866: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13870: LD_VAR 0 7
13874: PUSH
13875: LD_INT 2
13877: ARRAY
13878: PPUSH
13879: LD_STRING D9-Russ-1
13881: PPUSH
13882: CALL_OW 88
// ComAgressiveMove ( attackGroup , 31 , 13 ) ;
13886: LD_EXP 26
13890: PPUSH
13891: LD_INT 31
13893: PPUSH
13894: LD_INT 13
13896: PPUSH
13897: CALL_OW 114
// wait ( 0 0$3 ) ;
13901: LD_INT 105
13903: PPUSH
13904: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13908: LD_INT 35
13910: PPUSH
13911: CALL_OW 67
// for i in attackGroup do
13915: LD_ADDR_VAR 0 4
13919: PUSH
13920: LD_EXP 26
13924: PUSH
13925: FOR_IN
13926: IFFALSE 14293
// begin if IsDead ( i ) then
13928: LD_VAR 0 4
13932: PPUSH
13933: CALL_OW 301
13937: IFFALSE 13957
// begin attackGroup := attackGroup diff i ;
13939: LD_ADDR_EXP 26
13943: PUSH
13944: LD_EXP 26
13948: PUSH
13949: LD_VAR 0 4
13953: DIFF
13954: ST_TO_ADDR
// continue ;
13955: GO 13925
// end ; if not HasTask ( i ) and not GetTag ( i ) then
13957: LD_VAR 0 4
13961: PPUSH
13962: CALL_OW 314
13966: NOT
13967: PUSH
13968: LD_VAR 0 4
13972: PPUSH
13973: CALL_OW 110
13977: NOT
13978: AND
13979: IFFALSE 14015
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
13981: LD_VAR 0 4
13985: PPUSH
13986: LD_INT 22
13988: PUSH
13989: LD_INT 1
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PPUSH
13996: CALL_OW 69
14000: PPUSH
14001: LD_VAR 0 4
14005: PPUSH
14006: CALL_OW 74
14010: PPUSH
14011: CALL_OW 115
// if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
14015: LD_VAR 0 4
14019: PPUSH
14020: CALL_OW 110
14024: NOT
14025: PUSH
14026: LD_VAR 0 4
14030: PPUSH
14031: CALL_OW 256
14035: PUSH
14036: LD_INT 650
14038: LESS
14039: AND
14040: PUSH
14041: LD_VAR 0 4
14045: PPUSH
14046: CALL_OW 247
14050: PUSH
14051: LD_INT 2
14053: EQUAL
14054: AND
14055: IFFALSE 14084
// begin SetTag ( i , 1 ) ;
14057: LD_VAR 0 4
14061: PPUSH
14062: LD_INT 1
14064: PPUSH
14065: CALL_OW 109
// ComMoveXY ( i , 20 , 8 ) ;
14069: LD_VAR 0 4
14073: PPUSH
14074: LD_INT 20
14076: PPUSH
14077: LD_INT 8
14079: PPUSH
14080: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 20 , 8 ) < 6 then
14084: LD_VAR 0 4
14088: PPUSH
14089: CALL_OW 110
14093: PUSH
14094: LD_INT 1
14096: EQUAL
14097: PUSH
14098: LD_VAR 0 4
14102: PPUSH
14103: LD_INT 20
14105: PPUSH
14106: LD_INT 8
14108: PPUSH
14109: CALL_OW 297
14113: PUSH
14114: LD_INT 6
14116: LESS
14117: AND
14118: IFFALSE 14132
// SetTag ( i , 2 ) ;
14120: LD_VAR 0 4
14124: PPUSH
14125: LD_INT 2
14127: PPUSH
14128: CALL_OW 109
// if GetTag ( i ) = 2 then
14132: LD_VAR 0 4
14136: PPUSH
14137: CALL_OW 110
14141: PUSH
14142: LD_INT 2
14144: EQUAL
14145: IFFALSE 14253
// begin if GetLives ( i ) = 1000 then
14147: LD_VAR 0 4
14151: PPUSH
14152: CALL_OW 256
14156: PUSH
14157: LD_INT 1000
14159: EQUAL
14160: IFFALSE 14176
// SetTag ( i , 3 ) else
14162: LD_VAR 0 4
14166: PPUSH
14167: LD_INT 3
14169: PPUSH
14170: CALL_OW 109
14174: GO 14253
// if IsDrivenBy ( i ) then
14176: LD_VAR 0 4
14180: PPUSH
14181: CALL_OW 311
14185: IFFALSE 14253
// begin mech := IsDrivenBy ( i ) ;
14187: LD_ADDR_VAR 0 8
14191: PUSH
14192: LD_VAR 0 4
14196: PPUSH
14197: CALL_OW 311
14201: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
14202: LD_INT 1
14204: PPUSH
14205: LD_VAR 0 8
14209: PPUSH
14210: CALL_OW 292
14214: NOT
14215: PUSH
14216: LD_VAR 0 8
14220: PPUSH
14221: CALL_OW 256
14225: PUSH
14226: LD_INT 1000
14228: LESS
14229: AND
14230: IFFALSE 14244
// SetLives ( mech , 1000 ) ;
14232: LD_VAR 0 8
14236: PPUSH
14237: LD_INT 1000
14239: PPUSH
14240: CALL_OW 234
// ComRepairVehicleAndReturn ( mech ) ;
14244: LD_VAR 0 8
14248: PPUSH
14249: CALL 75587 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
14253: LD_VAR 0 4
14257: PPUSH
14258: CALL_OW 110
14262: PUSH
14263: LD_INT 3
14265: EQUAL
14266: PUSH
14267: LD_VAR 0 4
14271: PPUSH
14272: CALL_OW 311
14276: AND
14277: IFFALSE 14291
// SetTag ( i , 0 ) ;
14279: LD_VAR 0 4
14283: PPUSH
14284: LD_INT 0
14286: PPUSH
14287: CALL_OW 109
// end ;
14291: GO 13925
14293: POP
14294: POP
// until not attackGroup ;
14295: LD_EXP 26
14299: NOT
14300: IFFALSE 13908
// end ;
14302: LD_VAR 0 3
14306: RET
// every 0 0$1 trigger UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do var i ;
14307: LD_EXP 26
14311: PPUSH
14312: LD_INT 21
14314: PUSH
14315: LD_INT 2
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PPUSH
14322: CALL_OW 72
14326: IFFALSE 14394
14328: GO 14330
14330: DISABLE
14331: LD_INT 0
14333: PPUSH
// begin enable ;
14334: ENABLE
// for i in UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do
14335: LD_ADDR_VAR 0 1
14339: PUSH
14340: LD_EXP 26
14344: PPUSH
14345: LD_INT 21
14347: PUSH
14348: LD_INT 2
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PPUSH
14355: CALL_OW 72
14359: PUSH
14360: FOR_IN
14361: IFFALSE 14392
// if GetFuel ( i ) < 3 then
14363: LD_VAR 0 1
14367: PPUSH
14368: CALL_OW 261
14372: PUSH
14373: LD_INT 3
14375: LESS
14376: IFFALSE 14390
// SetFuel ( i , 3 ) ;
14378: LD_VAR 0 1
14382: PPUSH
14383: LD_INT 3
14385: PPUSH
14386: CALL_OW 240
14390: GO 14360
14392: POP
14393: POP
// end ; end_of_file
14394: PPOPN 1
14396: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do
14397: LD_INT 22
14399: PUSH
14400: LD_INT 3
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: PUSH
14407: LD_INT 25
14409: PUSH
14410: LD_INT 2
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PPUSH
14421: CALL_OW 69
14425: IFFALSE 14444
14427: GO 14429
14429: DISABLE
// begin enable ;
14430: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
14431: LD_INT 3
14433: PPUSH
14434: LD_INT 1
14436: PPUSH
14437: LD_INT 22
14439: PPUSH
14440: CALL 9209 0 3
// end ;
14444: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
14445: LD_INT 22
14447: PUSH
14448: LD_INT 3
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: LD_INT 25
14457: PUSH
14458: LD_INT 4
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: PPUSH
14469: CALL_OW 69
14473: IFFALSE 14495
14475: GO 14477
14477: DISABLE
// begin enable ;
14478: ENABLE
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
14479: LD_INT 3
14481: PPUSH
14482: LD_INT 20
14484: PPUSH
14485: LD_INT 22
14487: PPUSH
14488: LD_INT 23
14490: PPUSH
14491: CALL 9541 0 4
// end ;
14495: END
// every 0 0$1 trigger northBaseDefenders do
14496: LD_EXP 24
14500: IFFALSE 14524
14502: GO 14504
14504: DISABLE
// begin enable ;
14505: ENABLE
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
14506: LD_INT 22
14508: PPUSH
14509: LD_INT 1
14511: PPUSH
14512: LD_EXP 24
14516: PPUSH
14517: LD_INT 2
14519: PPUSH
14520: CALL 9813 0 4
// end ;
14524: END
// every 0 0$1 trigger southBaseDefenders do
14525: LD_EXP 25
14529: IFFALSE 14553
14531: GO 14533
14533: DISABLE
// begin enable ;
14534: ENABLE
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
14535: LD_INT 23
14537: PPUSH
14538: LD_INT 1
14540: PPUSH
14541: LD_EXP 25
14545: PPUSH
14546: LD_INT 33
14548: PPUSH
14549: CALL 9813 0 4
// end ; end_of_file
14553: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14554: LD_VAR 0 1
14558: PPUSH
14559: CALL 32222 0 1
// if unit = JMM then
14563: LD_VAR 0 1
14567: PUSH
14568: LD_EXP 1
14572: EQUAL
14573: IFFALSE 14582
// YouLost ( JMM ) ;
14575: LD_STRING JMM
14577: PPUSH
14578: CALL_OW 104
// if GetBType ( unit ) = b_depot then
14582: LD_VAR 0 1
14586: PPUSH
14587: CALL_OW 266
14591: PUSH
14592: LD_INT 0
14594: EQUAL
14595: IFFALSE 14604
// YouLost ( DepotDestroyed ) ;
14597: LD_STRING DepotDestroyed
14599: PPUSH
14600: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 255
14613: PUSH
14614: LD_INT 1
14616: EQUAL
14617: PUSH
14618: LD_VAR 0 1
14622: PPUSH
14623: CALL_OW 247
14627: PUSH
14628: LD_INT 1
14630: EQUAL
14631: AND
14632: IFFALSE 14648
// deadsCounter = deadsCounter + 1 ;
14634: LD_ADDR_EXP 31
14638: PUSH
14639: LD_EXP 31
14643: PUSH
14644: LD_INT 1
14646: PLUS
14647: ST_TO_ADDR
// end ;
14648: PPOPN 1
14650: END
// on Command ( cmd ) do var i , j , tmp ;
14651: LD_INT 0
14653: PPUSH
14654: PPUSH
14655: PPUSH
// begin SOS_Command ( cmd ) ;
14656: LD_VAR 0 1
14660: PPUSH
14661: CALL 32326 0 1
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
14665: LD_ADDR_VAR 0 2
14669: PUSH
14670: LD_INT 22
14672: PUSH
14673: LD_INT 1
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 21
14682: PUSH
14683: LD_INT 2
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PPUSH
14694: CALL_OW 69
14698: PUSH
14699: FOR_IN
14700: IFFALSE 14821
// begin if GetTaskList ( i ) then
14702: LD_VAR 0 2
14706: PPUSH
14707: CALL_OW 437
14711: IFFALSE 14819
// begin for j = 1 to GetTaskList ( i ) do
14713: LD_ADDR_VAR 0 3
14717: PUSH
14718: DOUBLE
14719: LD_INT 1
14721: DEC
14722: ST_TO_ADDR
14723: LD_VAR 0 2
14727: PPUSH
14728: CALL_OW 437
14732: PUSH
14733: FOR_TO
14734: IFFALSE 14817
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14736: LD_ADDR_VAR 0 4
14740: PUSH
14741: LD_VAR 0 2
14745: PPUSH
14746: CALL_OW 437
14750: PUSH
14751: LD_VAR 0 3
14755: ARRAY
14756: PUSH
14757: LD_INT 4
14759: ARRAY
14760: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14761: LD_VAR 0 4
14765: PPUSH
14766: CALL_OW 255
14770: PUSH
14771: LD_INT 3
14773: EQUAL
14774: PUSH
14775: LD_VAR 0 4
14779: PPUSH
14780: CALL_OW 247
14784: PUSH
14785: LD_INT 2
14787: EQUAL
14788: AND
14789: PUSH
14790: LD_VAR 0 4
14794: PPUSH
14795: CALL_OW 264
14799: PUSH
14800: LD_INT 51
14802: EQUAL
14803: AND
14804: IFFALSE 14815
// ComStop ( i ) ;
14806: LD_VAR 0 2
14810: PPUSH
14811: CALL_OW 141
// end ;
14815: GO 14733
14817: POP
14818: POP
// end ; end ;
14819: GO 14699
14821: POP
14822: POP
// end ;
14823: PPOPN 4
14825: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14826: LD_VAR 0 2
14830: PUSH
14831: LD_EXP 8
14835: EQUAL
14836: PUSH
14837: LD_EXP 21
14841: PUSH
14842: LD_INT 4
14844: NONEQUAL
14845: AND
14846: IFFALSE 14998
// begin if IsOk ( Mikhail ) then
14848: LD_EXP 8
14852: PPUSH
14853: CALL_OW 302
14857: IFFALSE 14865
// AskMikhail else
14859: CALL 7486 0 0
14863: GO 14998
// if IsOk ( llab1 ) then
14865: LD_INT 23
14867: PPUSH
14868: CALL_OW 302
14872: IFFALSE 14961
// begin InGameOn ;
14874: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14878: LD_EXP 8
14882: PPUSH
14883: LD_INT 6
14885: PPUSH
14886: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
14890: LD_INT 23
14892: PPUSH
14893: LD_INT 6
14895: PPUSH
14896: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
14900: LD_EXP 8
14904: PPUSH
14905: LD_INT 23
14907: PPUSH
14908: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14912: LD_INT 35
14914: PPUSH
14915: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
14919: LD_EXP 8
14923: PPUSH
14924: CALL_OW 310
14928: PUSH
14929: LD_INT 23
14931: EQUAL
14932: PUSH
14933: LD_EXP 8
14937: PPUSH
14938: CALL_OW 301
14942: OR
14943: IFFALSE 14912
// SetSide ( llab1 , 1 ) ;
14945: LD_INT 23
14947: PPUSH
14948: LD_INT 1
14950: PPUSH
14951: CALL_OW 235
// InGameOff ;
14955: CALL_OW 9
// end else
14959: GO 14998
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
14961: LD_INT 3
14963: PPUSH
14964: LD_INT 6
14966: PPUSH
14967: LD_INT 2
14969: PPUSH
14970: LD_INT 1
14972: PPUSH
14973: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
14977: LD_EXP 8
14981: PPUSH
14982: LD_INT 6
14984: PPUSH
14985: CALL_OW 235
// ComHold ( Mikhail ) ;
14989: LD_EXP 8
14993: PPUSH
14994: CALL_OW 140
// end ; end ; end ;
14998: PPOPN 2
15000: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15001: LD_VAR 0 1
15005: PPUSH
15006: LD_VAR 0 2
15010: PPUSH
15011: CALL 32342 0 2
// end ;
15015: PPOPN 2
15017: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
15018: LD_EXP 8
15022: PPUSH
15023: CALL_OW 257
15027: PUSH
15028: LD_INT 3
15030: NONEQUAL
15031: IFFALSE 15049
15033: GO 15035
15035: DISABLE
// begin enable ;
15036: ENABLE
// SetClass ( Mikhail , 3 ) ;
15037: LD_EXP 8
15041: PPUSH
15042: LD_INT 3
15044: PPUSH
15045: CALL_OW 336
// end ; end_of_file
15049: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
15050: LD_INT 22
15052: PUSH
15053: LD_INT 1
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: PUSH
15060: LD_INT 21
15062: PUSH
15063: LD_INT 1
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: PUSH
15070: LD_INT 25
15072: PUSH
15073: LD_INT 2
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: LIST
15084: PPUSH
15085: CALL_OW 69
15089: PUSH
15090: LD_INT 0
15092: EQUAL
15093: PUSH
15094: LD_INT 22
15096: PUSH
15097: LD_INT 4
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: LD_INT 21
15106: PUSH
15107: LD_INT 1
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: LD_INT 25
15116: PUSH
15117: LD_INT 2
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: LIST
15128: PPUSH
15129: CALL_OW 69
15133: PUSH
15134: LD_INT 0
15136: EQUAL
15137: AND
15138: PUSH
15139: LD_INT 1
15141: PPUSH
15142: CALL_OW 255
15146: PUSH
15147: LD_INT 3
15149: EQUAL
15150: AND
15151: PUSH
15152: LD_INT 10
15154: PPUSH
15155: CALL_OW 255
15159: PUSH
15160: LD_INT 3
15162: EQUAL
15163: AND
15164: IFFALSE 15176
15166: GO 15168
15168: DISABLE
// YouLost ( Engineer ) ;
15169: LD_STRING Engineer
15171: PPUSH
15172: CALL_OW 104
15176: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
15177: LD_INT 1
15179: PPUSH
15180: CALL_OW 255
15184: PUSH
15185: LD_INT 3
15187: EQUAL
15188: PUSH
15189: LD_EXP 27
15193: PUSH
15194: LD_INT 1
15196: EQUAL
15197: AND
15198: IFFALSE 15210
15200: GO 15202
15202: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
15203: LD_STRING DepotCaptured
15205: PPUSH
15206: CALL_OW 104
15210: END
// export function PrepareTigers ; var i , un ; begin
15211: LD_INT 0
15213: PPUSH
15214: PPUSH
15215: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15216: LD_ADDR_VAR 0 2
15220: PUSH
15221: DOUBLE
15222: LD_INT 1
15224: DEC
15225: ST_TO_ADDR
15226: LD_INT 2
15228: PUSH
15229: LD_INT 3
15231: PUSH
15232: LD_INT 4
15234: PUSH
15235: LD_INT 5
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: PUSH
15244: LD_OWVAR 67
15248: ARRAY
15249: PUSH
15250: FOR_TO
15251: IFFALSE 15366
// begin uc_side := 0 ;
15253: LD_ADDR_OWVAR 20
15257: PUSH
15258: LD_INT 0
15260: ST_TO_ADDR
// uc_nation := nation_nature ;
15261: LD_ADDR_OWVAR 21
15265: PUSH
15266: LD_INT 0
15268: ST_TO_ADDR
// hc_sex := sex_male ;
15269: LD_ADDR_OWVAR 27
15273: PUSH
15274: LD_INT 1
15276: ST_TO_ADDR
// hc_class := class_tiger ;
15277: LD_ADDR_OWVAR 28
15281: PUSH
15282: LD_INT 14
15284: ST_TO_ADDR
// hc_skills := [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
15285: LD_ADDR_OWVAR 31
15289: PUSH
15290: LD_EXP 14
15294: PUSH
15295: LD_INT 0
15297: PUSH
15298: LD_INT 0
15300: PUSH
15301: LD_INT 0
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: ST_TO_ADDR
// hc_agressivity := [ 30 , 40 , 45 , 50 ] [ Difficulty ] ;
15310: LD_ADDR_OWVAR 35
15314: PUSH
15315: LD_INT 30
15317: PUSH
15318: LD_INT 40
15320: PUSH
15321: LD_INT 45
15323: PUSH
15324: LD_INT 50
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: PUSH
15333: LD_OWVAR 67
15337: ARRAY
15338: ST_TO_ADDR
// un = CreateHuman ;
15339: LD_ADDR_VAR 0 3
15343: PUSH
15344: CALL_OW 44
15348: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15349: LD_VAR 0 3
15353: PPUSH
15354: LD_INT 27
15356: PPUSH
15357: LD_INT 0
15359: PPUSH
15360: CALL_OW 49
// end ;
15364: GO 15250
15366: POP
15367: POP
// end ; end_of_file
15368: LD_VAR 0 1
15372: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
15373: LD_INT 1
15375: PPUSH
15376: CALL_OW 255
15380: PUSH
15381: LD_INT 1
15383: EQUAL
15384: PUSH
15385: LD_INT 10
15387: PPUSH
15388: CALL_OW 255
15392: PUSH
15393: LD_INT 1
15395: EQUAL
15396: AND
15397: PUSH
15398: LD_EXP 20
15402: PUSH
15403: LD_INT 1
15405: EQUAL
15406: AND
15407: PUSH
15408: LD_INT 22
15410: PUSH
15411: LD_INT 3
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: LD_INT 21
15420: PUSH
15421: LD_INT 2
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: LD_INT 34
15430: PUSH
15431: LD_INT 51
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: PUSH
15438: LD_INT 3
15440: PUSH
15441: LD_INT 58
15443: PUSH
15444: EMPTY
15445: LIST
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: PPUSH
15457: CALL_OW 69
15461: PUSH
15462: LD_INT 0
15464: EQUAL
15465: AND
15466: IFFALSE 15561
15468: GO 15470
15470: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ) ;
15471: LD_INT 9450
15473: PUSH
15474: LD_INT 8400
15476: PUSH
15477: LD_INT 6300
15479: PUSH
15480: LD_INT 6300
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: PUSH
15489: LD_OWVAR 67
15493: ARRAY
15494: PPUSH
15495: CALL_OW 67
// if cargoEscape = 1 then
15499: LD_EXP 20
15503: PUSH
15504: LD_INT 1
15506: EQUAL
15507: IFFALSE 15561
// begin SayRadio ( Powell , D6-Pow-1 ) ;
15509: LD_EXP 9
15513: PPUSH
15514: LD_STRING D6-Pow-1
15516: PPUSH
15517: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
15521: LD_EXP 1
15525: PPUSH
15526: LD_STRING D6-JMM-1
15528: PPUSH
15529: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
15533: LD_EXP 9
15537: PPUSH
15538: LD_STRING D6-Pow-2
15540: PPUSH
15541: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
15545: LD_EXP 1
15549: PPUSH
15550: LD_STRING D6-JMM-2
15552: PPUSH
15553: CALL_OW 88
// FinishMission ;
15557: CALL 15777 0 0
// end ; end ;
15561: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
15562: LD_INT 1
15564: PPUSH
15565: CALL_OW 255
15569: PUSH
15570: LD_INT 1
15572: EQUAL
15573: PUSH
15574: LD_INT 10
15576: PPUSH
15577: CALL_OW 255
15581: PUSH
15582: LD_INT 1
15584: EQUAL
15585: AND
15586: PUSH
15587: LD_EXP 20
15591: PUSH
15592: LD_INT 1
15594: GREATER
15595: AND
15596: IFFALSE 15671
15598: GO 15600
15600: DISABLE
15601: LD_INT 0
15603: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
15604: LD_INT 11550
15606: PUSH
15607: LD_INT 10500
15609: PUSH
15610: LD_INT 9450
15612: PUSH
15613: LD_INT 8400
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: PUSH
15622: LD_OWVAR 67
15626: ARRAY
15627: PPUSH
15628: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 , 4 ] [ Difficulty ] , RussianAttack ) ;
15632: LD_INT 1
15634: PUSH
15635: LD_INT 2
15637: PUSH
15638: LD_INT 3
15640: PUSH
15641: LD_INT 4
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: PUSH
15650: LD_OWVAR 67
15654: ARRAY
15655: PPUSH
15656: LD_INT 13
15658: PPUSH
15659: CALL 13342 0 2
// lastBattle = 1 ;
15663: LD_ADDR_EXP 27
15667: PUSH
15668: LD_INT 1
15670: ST_TO_ADDR
// end ;
15671: PPOPN 1
15673: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
15674: LD_EXP 27
15678: PUSH
15679: LD_INT 1
15681: EQUAL
15682: PUSH
15683: LD_INT 26
15685: PPUSH
15686: LD_INT 22
15688: PUSH
15689: LD_INT 3
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PUSH
15696: LD_INT 21
15698: PUSH
15699: LD_INT 1
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: PPUSH
15710: CALL_OW 70
15714: PUSH
15715: LD_INT 0
15717: EQUAL
15718: AND
15719: IFFALSE 15776
15721: GO 15723
15723: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
15724: LD_EXP 9
15728: PPUSH
15729: LD_STRING D6-Pow-1
15731: PPUSH
15732: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
15736: LD_EXP 1
15740: PPUSH
15741: LD_STRING D6-JMM-1
15743: PPUSH
15744: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
15748: LD_EXP 9
15752: PPUSH
15753: LD_STRING D6-Pow-2
15755: PPUSH
15756: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
15760: LD_EXP 1
15764: PPUSH
15765: LD_STRING D6-JMM-2
15767: PPUSH
15768: CALL_OW 88
// FinishMission ;
15772: CALL 15777 0 0
// end ;
15776: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
15777: LD_INT 0
15779: PPUSH
15780: PPUSH
15781: PPUSH
15782: PPUSH
15783: PPUSH
// if tick <= 18 18$00 then
15784: LD_OWVAR 1
15788: PUSH
15789: LD_INT 37800
15791: LESSEQUAL
15792: IFFALSE 15801
// SetAchievement ( ACH_ASPEED_2 ) ;
15794: LD_STRING ACH_ASPEED_2
15796: PPUSH
15797: CALL_OW 543
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15801: LD_ADDR_VAR 0 2
15805: PUSH
15806: LD_INT 22
15808: PUSH
15809: LD_INT 1
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: LD_INT 21
15818: PUSH
15819: LD_INT 2
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: LD_INT 24
15828: PUSH
15829: LD_INT 251
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: LIST
15840: PPUSH
15841: CALL_OW 69
15845: ST_TO_ADDR
// if tmp then
15846: LD_VAR 0 2
15850: IFFALSE 15864
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15852: LD_VAR 0 2
15856: PPUSH
15857: LD_STRING 02_tanks_1
15859: PPUSH
15860: CALL 10688 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
15864: LD_EXP 21
15868: PUSH
15869: LD_INT 1
15871: EQUAL
15872: PUSH
15873: LD_EXP 8
15877: PPUSH
15878: CALL_OW 300
15882: AND
15883: IFFALSE 15897
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15885: LD_EXP 21
15889: PPUSH
15890: LD_STRING 02_mikhailStatus_1
15892: PPUSH
15893: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15897: LD_INT 1
15899: PPUSH
15900: CALL_OW 274
15904: PPUSH
15905: LD_INT 1
15907: PPUSH
15908: CALL_OW 275
15912: PPUSH
15913: LD_STRING 02_resources_4
15915: PPUSH
15916: CALL_OW 39
// m1 := false ;
15920: LD_ADDR_VAR 0 3
15924: PUSH
15925: LD_INT 0
15927: ST_TO_ADDR
// m2 := false ;
15928: LD_ADDR_VAR 0 4
15932: PUSH
15933: LD_INT 0
15935: ST_TO_ADDR
// m3 := false ;
15936: LD_ADDR_VAR 0 5
15940: PUSH
15941: LD_INT 0
15943: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15944: LD_INT 1
15946: PPUSH
15947: CALL_OW 274
15951: PPUSH
15952: LD_INT 1
15954: PPUSH
15955: CALL_OW 275
15959: PUSH
15960: LD_INT 200
15962: GREATEREQUAL
15963: IFFALSE 15985
// begin AddMedal ( Cans , 1 ) ;
15965: LD_STRING Cans
15967: PPUSH
15968: LD_INT 1
15970: PPUSH
15971: CALL_OW 101
// m1 := true ;
15975: LD_ADDR_VAR 0 3
15979: PUSH
15980: LD_INT 1
15982: ST_TO_ADDR
// end else
15983: GO 15996
// begin AddMedal ( Cans , - 1 ) ;
15985: LD_STRING Cans
15987: PPUSH
15988: LD_INT 1
15990: NEG
15991: PPUSH
15992: CALL_OW 101
// end ; if deadsCounter < 2 then
15996: LD_EXP 31
16000: PUSH
16001: LD_INT 2
16003: LESS
16004: IFFALSE 16026
// begin AddMedal ( Deaths , 1 ) ;
16006: LD_STRING Deaths
16008: PPUSH
16009: LD_INT 1
16011: PPUSH
16012: CALL_OW 101
// m2 := true ;
16016: LD_ADDR_VAR 0 4
16020: PUSH
16021: LD_INT 1
16023: ST_TO_ADDR
// end else
16024: GO 16037
// begin AddMedal ( Deaths , - 1 ) ;
16026: LD_STRING Deaths
16028: PPUSH
16029: LD_INT 1
16031: NEG
16032: PPUSH
16033: CALL_OW 101
// end ; if mikhailStatus = 0 then
16037: LD_EXP 21
16041: PUSH
16042: LD_INT 0
16044: EQUAL
16045: IFFALSE 16058
// AddMedal ( Prisoner , - 1 ) ;
16047: LD_STRING Prisoner
16049: PPUSH
16050: LD_INT 1
16052: NEG
16053: PPUSH
16054: CALL_OW 101
// if mikhailStatus = 1 then
16058: LD_EXP 21
16062: PUSH
16063: LD_INT 1
16065: EQUAL
16066: IFFALSE 16086
// begin AddMedal ( Prisoner , 1 ) ;
16068: LD_STRING Prisoner
16070: PPUSH
16071: LD_INT 1
16073: PPUSH
16074: CALL_OW 101
// m3 := true ;
16078: LD_ADDR_VAR 0 5
16082: PUSH
16083: LD_INT 1
16085: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
16086: LD_EXP 21
16090: PUSH
16091: LD_INT 2
16093: EQUAL
16094: IFFALSE 16114
// begin AddMedal ( Prisoner , 2 ) ;
16096: LD_STRING Prisoner
16098: PPUSH
16099: LD_INT 2
16101: PPUSH
16102: CALL_OW 101
// m3 := true ;
16106: LD_ADDR_VAR 0 5
16110: PUSH
16111: LD_INT 1
16113: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
16114: LD_EXP 21
16118: PUSH
16119: LD_INT 3
16121: EQUAL
16122: IFFALSE 16135
// AddMedal ( Prisoner , - 2 ) ;
16124: LD_STRING Prisoner
16126: PPUSH
16127: LD_INT 2
16129: NEG
16130: PPUSH
16131: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
16135: LD_OWVAR 67
16139: PUSH
16140: LD_INT 3
16142: GREATEREQUAL
16143: PUSH
16144: LD_VAR 0 3
16148: AND
16149: PUSH
16150: LD_VAR 0 4
16154: AND
16155: PUSH
16156: LD_VAR 0 5
16160: AND
16161: IFFALSE 16173
// SetAchievementEX ( ACH_AMER , 2 ) ;
16163: LD_STRING ACH_AMER
16165: PPUSH
16166: LD_INT 2
16168: PPUSH
16169: CALL_OW 564
// GiveMedals ( MAIN ) ;
16173: LD_STRING MAIN
16175: PPUSH
16176: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
16180: LD_INT 22
16182: PUSH
16183: LD_INT 1
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PUSH
16190: LD_INT 23
16192: PUSH
16193: LD_INT 1
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: PUSH
16200: LD_INT 21
16202: PUSH
16203: LD_INT 1
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: LIST
16214: PPUSH
16215: CALL_OW 69
16219: PPUSH
16220: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
16224: LD_EXP 1
16228: PPUSH
16229: LD_EXP 33
16233: PUSH
16234: LD_STRING JMM
16236: STR
16237: PPUSH
16238: CALL_OW 38
// if IsOK ( Bobby ) then
16242: LD_EXP 2
16246: PPUSH
16247: CALL_OW 302
16251: IFFALSE 16271
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
16253: LD_EXP 2
16257: PPUSH
16258: LD_EXP 33
16262: PUSH
16263: LD_STRING Bobby
16265: STR
16266: PPUSH
16267: CALL_OW 38
// if IsOK ( Cyrus ) then
16271: LD_EXP 3
16275: PPUSH
16276: CALL_OW 302
16280: IFFALSE 16300
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
16282: LD_EXP 3
16286: PPUSH
16287: LD_EXP 33
16291: PUSH
16292: LD_STRING Cyrus
16294: STR
16295: PPUSH
16296: CALL_OW 38
// if IsOK ( Lisa ) then
16300: LD_EXP 4
16304: PPUSH
16305: CALL_OW 302
16309: IFFALSE 16329
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
16311: LD_EXP 4
16315: PPUSH
16316: LD_EXP 33
16320: PUSH
16321: LD_STRING Lisa
16323: STR
16324: PPUSH
16325: CALL_OW 38
// if IsOK ( Khatam ) then
16329: LD_EXP 5
16333: PPUSH
16334: CALL_OW 302
16338: IFFALSE 16358
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
16340: LD_EXP 5
16344: PPUSH
16345: LD_EXP 33
16349: PUSH
16350: LD_STRING Khatam
16352: STR
16353: PPUSH
16354: CALL_OW 38
// if IsOK ( Brian ) then
16358: LD_EXP 6
16362: PPUSH
16363: CALL_OW 302
16367: IFFALSE 16387
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
16369: LD_EXP 6
16373: PPUSH
16374: LD_EXP 33
16378: PUSH
16379: LD_STRING Brian
16381: STR
16382: PPUSH
16383: CALL_OW 38
// if IsOk ( Jerry ) then
16387: LD_EXP 7
16391: PPUSH
16392: CALL_OW 302
16396: IFFALSE 16416
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
16398: LD_EXP 7
16402: PPUSH
16403: LD_EXP 33
16407: PUSH
16408: LD_STRING Jerry
16410: STR
16411: PPUSH
16412: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
16416: LD_EXP 21
16420: PUSH
16421: LD_INT 1
16423: EQUAL
16424: PUSH
16425: LD_EXP 8
16429: PPUSH
16430: CALL_OW 255
16434: PUSH
16435: LD_INT 1
16437: EQUAL
16438: AND
16439: PUSH
16440: LD_EXP 8
16444: PPUSH
16445: CALL_OW 302
16449: AND
16450: IFFALSE 16470
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
16452: LD_EXP 8
16456: PPUSH
16457: LD_EXP 33
16461: PUSH
16462: LD_STRING Mikhail
16464: STR
16465: PPUSH
16466: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
16470: LD_INT 50
16472: PUSH
16473: EMPTY
16474: LIST
16475: PUSH
16476: LD_INT 22
16478: PUSH
16479: LD_INT 1
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 21
16488: PUSH
16489: LD_INT 1
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: LIST
16500: PPUSH
16501: CALL_OW 69
16505: PUSH
16506: LD_EXP 1
16510: PUSH
16511: LD_EXP 2
16515: PUSH
16516: LD_EXP 3
16520: PUSH
16521: LD_EXP 4
16525: PUSH
16526: LD_EXP 5
16530: PUSH
16531: LD_EXP 6
16535: PUSH
16536: LD_EXP 7
16540: PUSH
16541: LD_EXP 8
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: DIFF
16556: PPUSH
16557: LD_STRING 02_other_survivors
16559: PPUSH
16560: CALL_OW 38
// YouWin ;
16564: CALL_OW 103
// end ; end_of_file end_of_file
16568: LD_VAR 0 1
16572: RET
// every 0 0$1 do
16573: GO 16575
16575: DISABLE
// begin enable ;
16576: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
16577: LD_STRING updateTimer(
16579: PUSH
16580: LD_OWVAR 1
16584: STR
16585: PUSH
16586: LD_STRING );
16588: STR
16589: PPUSH
16590: CALL_OW 559
// end ;
16594: END
// export function SOS_MapStart ( ) ; begin
16595: LD_INT 0
16597: PPUSH
// if streamModeActive then
16598: LD_EXP 36
16602: IFFALSE 16611
// DefineStreamItems ( true ) ;
16604: LD_INT 1
16606: PPUSH
16607: CALL 18265 0 1
// UpdateFactoryWaypoints ( ) ;
16611: CALL 31126 0 0
// UpdateWarehouseGatheringPoints ( ) ;
16615: CALL 31383 0 0
// end ;
16619: LD_VAR 0 1
16623: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16624: LD_INT 0
16626: PPUSH
// if p2 = 100 then
16627: LD_VAR 0 2
16631: PUSH
16632: LD_INT 100
16634: EQUAL
16635: IFFALSE 17638
// begin if not StreamModeActive then
16637: LD_EXP 36
16641: NOT
16642: IFFALSE 16652
// StreamModeActive := true ;
16644: LD_ADDR_EXP 36
16648: PUSH
16649: LD_INT 1
16651: ST_TO_ADDR
// if p3 = 0 then
16652: LD_VAR 0 3
16656: PUSH
16657: LD_INT 0
16659: EQUAL
16660: IFFALSE 16666
// InitStreamMode ;
16662: CALL 17801 0 0
// if p3 = 1 then
16666: LD_VAR 0 3
16670: PUSH
16671: LD_INT 1
16673: EQUAL
16674: IFFALSE 16684
// sRocket := true ;
16676: LD_ADDR_EXP 41
16680: PUSH
16681: LD_INT 1
16683: ST_TO_ADDR
// if p3 = 2 then
16684: LD_VAR 0 3
16688: PUSH
16689: LD_INT 2
16691: EQUAL
16692: IFFALSE 16702
// sSpeed := true ;
16694: LD_ADDR_EXP 40
16698: PUSH
16699: LD_INT 1
16701: ST_TO_ADDR
// if p3 = 3 then
16702: LD_VAR 0 3
16706: PUSH
16707: LD_INT 3
16709: EQUAL
16710: IFFALSE 16720
// sEngine := true ;
16712: LD_ADDR_EXP 42
16716: PUSH
16717: LD_INT 1
16719: ST_TO_ADDR
// if p3 = 4 then
16720: LD_VAR 0 3
16724: PUSH
16725: LD_INT 4
16727: EQUAL
16728: IFFALSE 16738
// sSpec := true ;
16730: LD_ADDR_EXP 39
16734: PUSH
16735: LD_INT 1
16737: ST_TO_ADDR
// if p3 = 5 then
16738: LD_VAR 0 3
16742: PUSH
16743: LD_INT 5
16745: EQUAL
16746: IFFALSE 16756
// sLevel := true ;
16748: LD_ADDR_EXP 43
16752: PUSH
16753: LD_INT 1
16755: ST_TO_ADDR
// if p3 = 6 then
16756: LD_VAR 0 3
16760: PUSH
16761: LD_INT 6
16763: EQUAL
16764: IFFALSE 16774
// sArmoury := true ;
16766: LD_ADDR_EXP 44
16770: PUSH
16771: LD_INT 1
16773: ST_TO_ADDR
// if p3 = 7 then
16774: LD_VAR 0 3
16778: PUSH
16779: LD_INT 7
16781: EQUAL
16782: IFFALSE 16792
// sRadar := true ;
16784: LD_ADDR_EXP 45
16788: PUSH
16789: LD_INT 1
16791: ST_TO_ADDR
// if p3 = 8 then
16792: LD_VAR 0 3
16796: PUSH
16797: LD_INT 8
16799: EQUAL
16800: IFFALSE 16810
// sBunker := true ;
16802: LD_ADDR_EXP 46
16806: PUSH
16807: LD_INT 1
16809: ST_TO_ADDR
// if p3 = 9 then
16810: LD_VAR 0 3
16814: PUSH
16815: LD_INT 9
16817: EQUAL
16818: IFFALSE 16828
// sHack := true ;
16820: LD_ADDR_EXP 47
16824: PUSH
16825: LD_INT 1
16827: ST_TO_ADDR
// if p3 = 10 then
16828: LD_VAR 0 3
16832: PUSH
16833: LD_INT 10
16835: EQUAL
16836: IFFALSE 16846
// sFire := true ;
16838: LD_ADDR_EXP 48
16842: PUSH
16843: LD_INT 1
16845: ST_TO_ADDR
// if p3 = 11 then
16846: LD_VAR 0 3
16850: PUSH
16851: LD_INT 11
16853: EQUAL
16854: IFFALSE 16864
// sRefresh := true ;
16856: LD_ADDR_EXP 49
16860: PUSH
16861: LD_INT 1
16863: ST_TO_ADDR
// if p3 = 12 then
16864: LD_VAR 0 3
16868: PUSH
16869: LD_INT 12
16871: EQUAL
16872: IFFALSE 16882
// sExp := true ;
16874: LD_ADDR_EXP 50
16878: PUSH
16879: LD_INT 1
16881: ST_TO_ADDR
// if p3 = 13 then
16882: LD_VAR 0 3
16886: PUSH
16887: LD_INT 13
16889: EQUAL
16890: IFFALSE 16900
// sDepot := true ;
16892: LD_ADDR_EXP 51
16896: PUSH
16897: LD_INT 1
16899: ST_TO_ADDR
// if p3 = 14 then
16900: LD_VAR 0 3
16904: PUSH
16905: LD_INT 14
16907: EQUAL
16908: IFFALSE 16918
// sFlag := true ;
16910: LD_ADDR_EXP 52
16914: PUSH
16915: LD_INT 1
16917: ST_TO_ADDR
// if p3 = 15 then
16918: LD_VAR 0 3
16922: PUSH
16923: LD_INT 15
16925: EQUAL
16926: IFFALSE 16936
// sKamikadze := true ;
16928: LD_ADDR_EXP 60
16932: PUSH
16933: LD_INT 1
16935: ST_TO_ADDR
// if p3 = 16 then
16936: LD_VAR 0 3
16940: PUSH
16941: LD_INT 16
16943: EQUAL
16944: IFFALSE 16954
// sTroll := true ;
16946: LD_ADDR_EXP 61
16950: PUSH
16951: LD_INT 1
16953: ST_TO_ADDR
// if p3 = 17 then
16954: LD_VAR 0 3
16958: PUSH
16959: LD_INT 17
16961: EQUAL
16962: IFFALSE 16972
// sSlow := true ;
16964: LD_ADDR_EXP 62
16968: PUSH
16969: LD_INT 1
16971: ST_TO_ADDR
// if p3 = 18 then
16972: LD_VAR 0 3
16976: PUSH
16977: LD_INT 18
16979: EQUAL
16980: IFFALSE 16990
// sLack := true ;
16982: LD_ADDR_EXP 63
16986: PUSH
16987: LD_INT 1
16989: ST_TO_ADDR
// if p3 = 19 then
16990: LD_VAR 0 3
16994: PUSH
16995: LD_INT 19
16997: EQUAL
16998: IFFALSE 17008
// sTank := true ;
17000: LD_ADDR_EXP 65
17004: PUSH
17005: LD_INT 1
17007: ST_TO_ADDR
// if p3 = 20 then
17008: LD_VAR 0 3
17012: PUSH
17013: LD_INT 20
17015: EQUAL
17016: IFFALSE 17026
// sRemote := true ;
17018: LD_ADDR_EXP 66
17022: PUSH
17023: LD_INT 1
17025: ST_TO_ADDR
// if p3 = 21 then
17026: LD_VAR 0 3
17030: PUSH
17031: LD_INT 21
17033: EQUAL
17034: IFFALSE 17044
// sPowell := true ;
17036: LD_ADDR_EXP 67
17040: PUSH
17041: LD_INT 1
17043: ST_TO_ADDR
// if p3 = 22 then
17044: LD_VAR 0 3
17048: PUSH
17049: LD_INT 22
17051: EQUAL
17052: IFFALSE 17062
// sTeleport := true ;
17054: LD_ADDR_EXP 70
17058: PUSH
17059: LD_INT 1
17061: ST_TO_ADDR
// if p3 = 23 then
17062: LD_VAR 0 3
17066: PUSH
17067: LD_INT 23
17069: EQUAL
17070: IFFALSE 17080
// sOilTower := true ;
17072: LD_ADDR_EXP 72
17076: PUSH
17077: LD_INT 1
17079: ST_TO_ADDR
// if p3 = 24 then
17080: LD_VAR 0 3
17084: PUSH
17085: LD_INT 24
17087: EQUAL
17088: IFFALSE 17098
// sShovel := true ;
17090: LD_ADDR_EXP 73
17094: PUSH
17095: LD_INT 1
17097: ST_TO_ADDR
// if p3 = 25 then
17098: LD_VAR 0 3
17102: PUSH
17103: LD_INT 25
17105: EQUAL
17106: IFFALSE 17116
// sSheik := true ;
17108: LD_ADDR_EXP 74
17112: PUSH
17113: LD_INT 1
17115: ST_TO_ADDR
// if p3 = 26 then
17116: LD_VAR 0 3
17120: PUSH
17121: LD_INT 26
17123: EQUAL
17124: IFFALSE 17134
// sEarthquake := true ;
17126: LD_ADDR_EXP 76
17130: PUSH
17131: LD_INT 1
17133: ST_TO_ADDR
// if p3 = 27 then
17134: LD_VAR 0 3
17138: PUSH
17139: LD_INT 27
17141: EQUAL
17142: IFFALSE 17152
// sAI := true ;
17144: LD_ADDR_EXP 77
17148: PUSH
17149: LD_INT 1
17151: ST_TO_ADDR
// if p3 = 28 then
17152: LD_VAR 0 3
17156: PUSH
17157: LD_INT 28
17159: EQUAL
17160: IFFALSE 17170
// sCargo := true ;
17162: LD_ADDR_EXP 80
17166: PUSH
17167: LD_INT 1
17169: ST_TO_ADDR
// if p3 = 29 then
17170: LD_VAR 0 3
17174: PUSH
17175: LD_INT 29
17177: EQUAL
17178: IFFALSE 17188
// sDLaser := true ;
17180: LD_ADDR_EXP 81
17184: PUSH
17185: LD_INT 1
17187: ST_TO_ADDR
// if p3 = 30 then
17188: LD_VAR 0 3
17192: PUSH
17193: LD_INT 30
17195: EQUAL
17196: IFFALSE 17206
// sExchange := true ;
17198: LD_ADDR_EXP 82
17202: PUSH
17203: LD_INT 1
17205: ST_TO_ADDR
// if p3 = 31 then
17206: LD_VAR 0 3
17210: PUSH
17211: LD_INT 31
17213: EQUAL
17214: IFFALSE 17224
// sFac := true ;
17216: LD_ADDR_EXP 83
17220: PUSH
17221: LD_INT 1
17223: ST_TO_ADDR
// if p3 = 32 then
17224: LD_VAR 0 3
17228: PUSH
17229: LD_INT 32
17231: EQUAL
17232: IFFALSE 17242
// sPower := true ;
17234: LD_ADDR_EXP 84
17238: PUSH
17239: LD_INT 1
17241: ST_TO_ADDR
// if p3 = 33 then
17242: LD_VAR 0 3
17246: PUSH
17247: LD_INT 33
17249: EQUAL
17250: IFFALSE 17260
// sRandom := true ;
17252: LD_ADDR_EXP 85
17256: PUSH
17257: LD_INT 1
17259: ST_TO_ADDR
// if p3 = 34 then
17260: LD_VAR 0 3
17264: PUSH
17265: LD_INT 34
17267: EQUAL
17268: IFFALSE 17278
// sShield := true ;
17270: LD_ADDR_EXP 86
17274: PUSH
17275: LD_INT 1
17277: ST_TO_ADDR
// if p3 = 35 then
17278: LD_VAR 0 3
17282: PUSH
17283: LD_INT 35
17285: EQUAL
17286: IFFALSE 17296
// sTime := true ;
17288: LD_ADDR_EXP 87
17292: PUSH
17293: LD_INT 1
17295: ST_TO_ADDR
// if p3 = 36 then
17296: LD_VAR 0 3
17300: PUSH
17301: LD_INT 36
17303: EQUAL
17304: IFFALSE 17314
// sTools := true ;
17306: LD_ADDR_EXP 88
17310: PUSH
17311: LD_INT 1
17313: ST_TO_ADDR
// if p3 = 101 then
17314: LD_VAR 0 3
17318: PUSH
17319: LD_INT 101
17321: EQUAL
17322: IFFALSE 17332
// sSold := true ;
17324: LD_ADDR_EXP 53
17328: PUSH
17329: LD_INT 1
17331: ST_TO_ADDR
// if p3 = 102 then
17332: LD_VAR 0 3
17336: PUSH
17337: LD_INT 102
17339: EQUAL
17340: IFFALSE 17350
// sDiff := true ;
17342: LD_ADDR_EXP 54
17346: PUSH
17347: LD_INT 1
17349: ST_TO_ADDR
// if p3 = 103 then
17350: LD_VAR 0 3
17354: PUSH
17355: LD_INT 103
17357: EQUAL
17358: IFFALSE 17368
// sFog := true ;
17360: LD_ADDR_EXP 57
17364: PUSH
17365: LD_INT 1
17367: ST_TO_ADDR
// if p3 = 104 then
17368: LD_VAR 0 3
17372: PUSH
17373: LD_INT 104
17375: EQUAL
17376: IFFALSE 17386
// sReset := true ;
17378: LD_ADDR_EXP 58
17382: PUSH
17383: LD_INT 1
17385: ST_TO_ADDR
// if p3 = 105 then
17386: LD_VAR 0 3
17390: PUSH
17391: LD_INT 105
17393: EQUAL
17394: IFFALSE 17404
// sSun := true ;
17396: LD_ADDR_EXP 59
17400: PUSH
17401: LD_INT 1
17403: ST_TO_ADDR
// if p3 = 106 then
17404: LD_VAR 0 3
17408: PUSH
17409: LD_INT 106
17411: EQUAL
17412: IFFALSE 17422
// sTiger := true ;
17414: LD_ADDR_EXP 55
17418: PUSH
17419: LD_INT 1
17421: ST_TO_ADDR
// if p3 = 107 then
17422: LD_VAR 0 3
17426: PUSH
17427: LD_INT 107
17429: EQUAL
17430: IFFALSE 17440
// sBomb := true ;
17432: LD_ADDR_EXP 56
17436: PUSH
17437: LD_INT 1
17439: ST_TO_ADDR
// if p3 = 108 then
17440: LD_VAR 0 3
17444: PUSH
17445: LD_INT 108
17447: EQUAL
17448: IFFALSE 17458
// sWound := true ;
17450: LD_ADDR_EXP 64
17454: PUSH
17455: LD_INT 1
17457: ST_TO_ADDR
// if p3 = 109 then
17458: LD_VAR 0 3
17462: PUSH
17463: LD_INT 109
17465: EQUAL
17466: IFFALSE 17476
// sBetray := true ;
17468: LD_ADDR_EXP 68
17472: PUSH
17473: LD_INT 1
17475: ST_TO_ADDR
// if p3 = 110 then
17476: LD_VAR 0 3
17480: PUSH
17481: LD_INT 110
17483: EQUAL
17484: IFFALSE 17494
// sContamin := true ;
17486: LD_ADDR_EXP 69
17490: PUSH
17491: LD_INT 1
17493: ST_TO_ADDR
// if p3 = 111 then
17494: LD_VAR 0 3
17498: PUSH
17499: LD_INT 111
17501: EQUAL
17502: IFFALSE 17512
// sOil := true ;
17504: LD_ADDR_EXP 71
17508: PUSH
17509: LD_INT 1
17511: ST_TO_ADDR
// if p3 = 112 then
17512: LD_VAR 0 3
17516: PUSH
17517: LD_INT 112
17519: EQUAL
17520: IFFALSE 17530
// sStu := true ;
17522: LD_ADDR_EXP 75
17526: PUSH
17527: LD_INT 1
17529: ST_TO_ADDR
// if p3 = 113 then
17530: LD_VAR 0 3
17534: PUSH
17535: LD_INT 113
17537: EQUAL
17538: IFFALSE 17548
// sBazooka := true ;
17540: LD_ADDR_EXP 78
17544: PUSH
17545: LD_INT 1
17547: ST_TO_ADDR
// if p3 = 114 then
17548: LD_VAR 0 3
17552: PUSH
17553: LD_INT 114
17555: EQUAL
17556: IFFALSE 17566
// sMortar := true ;
17558: LD_ADDR_EXP 79
17562: PUSH
17563: LD_INT 1
17565: ST_TO_ADDR
// if p3 = 115 then
17566: LD_VAR 0 3
17570: PUSH
17571: LD_INT 115
17573: EQUAL
17574: IFFALSE 17584
// sRanger := true ;
17576: LD_ADDR_EXP 89
17580: PUSH
17581: LD_INT 1
17583: ST_TO_ADDR
// if p3 = 116 then
17584: LD_VAR 0 3
17588: PUSH
17589: LD_INT 116
17591: EQUAL
17592: IFFALSE 17602
// sComputer := true ;
17594: LD_ADDR_EXP 90
17598: PUSH
17599: LD_INT 1
17601: ST_TO_ADDR
// if p3 = 117 then
17602: LD_VAR 0 3
17606: PUSH
17607: LD_INT 117
17609: EQUAL
17610: IFFALSE 17620
// s30 := true ;
17612: LD_ADDR_EXP 91
17616: PUSH
17617: LD_INT 1
17619: ST_TO_ADDR
// if p3 = 118 then
17620: LD_VAR 0 3
17624: PUSH
17625: LD_INT 118
17627: EQUAL
17628: IFFALSE 17638
// s60 := true ;
17630: LD_ADDR_EXP 92
17634: PUSH
17635: LD_INT 1
17637: ST_TO_ADDR
// end ; if p2 = 101 then
17638: LD_VAR 0 2
17642: PUSH
17643: LD_INT 101
17645: EQUAL
17646: IFFALSE 17774
// begin case p3 of 1 :
17648: LD_VAR 0 3
17652: PUSH
17653: LD_INT 1
17655: DOUBLE
17656: EQUAL
17657: IFTRUE 17661
17659: GO 17668
17661: POP
// hHackUnlimitedResources ; 2 :
17662: CALL 29872 0 0
17666: GO 17774
17668: LD_INT 2
17670: DOUBLE
17671: EQUAL
17672: IFTRUE 17676
17674: GO 17683
17676: POP
// hHackSetLevel10 ; 3 :
17677: CALL 30005 0 0
17681: GO 17774
17683: LD_INT 3
17685: DOUBLE
17686: EQUAL
17687: IFTRUE 17691
17689: GO 17698
17691: POP
// hHackSetLevel10YourUnits ; 4 :
17692: CALL 30090 0 0
17696: GO 17774
17698: LD_INT 4
17700: DOUBLE
17701: EQUAL
17702: IFTRUE 17706
17704: GO 17713
17706: POP
// hHackInvincible ; 5 :
17707: CALL 30538 0 0
17711: GO 17774
17713: LD_INT 5
17715: DOUBLE
17716: EQUAL
17717: IFTRUE 17721
17719: GO 17728
17721: POP
// hHackInvisible ; 6 :
17722: CALL 30649 0 0
17726: GO 17774
17728: LD_INT 6
17730: DOUBLE
17731: EQUAL
17732: IFTRUE 17736
17734: GO 17743
17736: POP
// hHackChangeYourSide ; 7 :
17737: CALL 30706 0 0
17741: GO 17774
17743: LD_INT 7
17745: DOUBLE
17746: EQUAL
17747: IFTRUE 17751
17749: GO 17758
17751: POP
// hHackChangeUnitSide ; 8 :
17752: CALL 30748 0 0
17756: GO 17774
17758: LD_INT 8
17760: DOUBLE
17761: EQUAL
17762: IFTRUE 17766
17764: GO 17773
17766: POP
// hHackFog ; end ;
17767: CALL 30849 0 0
17771: GO 17774
17773: POP
// end ; end ;
17774: LD_VAR 0 7
17778: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
17779: GO 17781
17781: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
17782: LD_STRING initStreamRollete();
17784: PPUSH
17785: CALL_OW 559
// InitStreamMode ;
17789: CALL 17801 0 0
// DefineStreamItems ( false ) ;
17793: LD_INT 0
17795: PPUSH
17796: CALL 18265 0 1
// end ;
17800: END
// function InitStreamMode ; begin
17801: LD_INT 0
17803: PPUSH
// streamModeActive := false ;
17804: LD_ADDR_EXP 36
17808: PUSH
17809: LD_INT 0
17811: ST_TO_ADDR
// normalCounter := 36 ;
17812: LD_ADDR_EXP 37
17816: PUSH
17817: LD_INT 36
17819: ST_TO_ADDR
// hardcoreCounter := 18 ;
17820: LD_ADDR_EXP 38
17824: PUSH
17825: LD_INT 18
17827: ST_TO_ADDR
// sRocket := false ;
17828: LD_ADDR_EXP 41
17832: PUSH
17833: LD_INT 0
17835: ST_TO_ADDR
// sSpeed := false ;
17836: LD_ADDR_EXP 40
17840: PUSH
17841: LD_INT 0
17843: ST_TO_ADDR
// sEngine := false ;
17844: LD_ADDR_EXP 42
17848: PUSH
17849: LD_INT 0
17851: ST_TO_ADDR
// sSpec := false ;
17852: LD_ADDR_EXP 39
17856: PUSH
17857: LD_INT 0
17859: ST_TO_ADDR
// sLevel := false ;
17860: LD_ADDR_EXP 43
17864: PUSH
17865: LD_INT 0
17867: ST_TO_ADDR
// sArmoury := false ;
17868: LD_ADDR_EXP 44
17872: PUSH
17873: LD_INT 0
17875: ST_TO_ADDR
// sRadar := false ;
17876: LD_ADDR_EXP 45
17880: PUSH
17881: LD_INT 0
17883: ST_TO_ADDR
// sBunker := false ;
17884: LD_ADDR_EXP 46
17888: PUSH
17889: LD_INT 0
17891: ST_TO_ADDR
// sHack := false ;
17892: LD_ADDR_EXP 47
17896: PUSH
17897: LD_INT 0
17899: ST_TO_ADDR
// sFire := false ;
17900: LD_ADDR_EXP 48
17904: PUSH
17905: LD_INT 0
17907: ST_TO_ADDR
// sRefresh := false ;
17908: LD_ADDR_EXP 49
17912: PUSH
17913: LD_INT 0
17915: ST_TO_ADDR
// sExp := false ;
17916: LD_ADDR_EXP 50
17920: PUSH
17921: LD_INT 0
17923: ST_TO_ADDR
// sDepot := false ;
17924: LD_ADDR_EXP 51
17928: PUSH
17929: LD_INT 0
17931: ST_TO_ADDR
// sFlag := false ;
17932: LD_ADDR_EXP 52
17936: PUSH
17937: LD_INT 0
17939: ST_TO_ADDR
// sKamikadze := false ;
17940: LD_ADDR_EXP 60
17944: PUSH
17945: LD_INT 0
17947: ST_TO_ADDR
// sTroll := false ;
17948: LD_ADDR_EXP 61
17952: PUSH
17953: LD_INT 0
17955: ST_TO_ADDR
// sSlow := false ;
17956: LD_ADDR_EXP 62
17960: PUSH
17961: LD_INT 0
17963: ST_TO_ADDR
// sLack := false ;
17964: LD_ADDR_EXP 63
17968: PUSH
17969: LD_INT 0
17971: ST_TO_ADDR
// sTank := false ;
17972: LD_ADDR_EXP 65
17976: PUSH
17977: LD_INT 0
17979: ST_TO_ADDR
// sRemote := false ;
17980: LD_ADDR_EXP 66
17984: PUSH
17985: LD_INT 0
17987: ST_TO_ADDR
// sPowell := false ;
17988: LD_ADDR_EXP 67
17992: PUSH
17993: LD_INT 0
17995: ST_TO_ADDR
// sTeleport := false ;
17996: LD_ADDR_EXP 70
18000: PUSH
18001: LD_INT 0
18003: ST_TO_ADDR
// sOilTower := false ;
18004: LD_ADDR_EXP 72
18008: PUSH
18009: LD_INT 0
18011: ST_TO_ADDR
// sShovel := false ;
18012: LD_ADDR_EXP 73
18016: PUSH
18017: LD_INT 0
18019: ST_TO_ADDR
// sSheik := false ;
18020: LD_ADDR_EXP 74
18024: PUSH
18025: LD_INT 0
18027: ST_TO_ADDR
// sEarthquake := false ;
18028: LD_ADDR_EXP 76
18032: PUSH
18033: LD_INT 0
18035: ST_TO_ADDR
// sAI := false ;
18036: LD_ADDR_EXP 77
18040: PUSH
18041: LD_INT 0
18043: ST_TO_ADDR
// sCargo := false ;
18044: LD_ADDR_EXP 80
18048: PUSH
18049: LD_INT 0
18051: ST_TO_ADDR
// sDLaser := false ;
18052: LD_ADDR_EXP 81
18056: PUSH
18057: LD_INT 0
18059: ST_TO_ADDR
// sExchange := false ;
18060: LD_ADDR_EXP 82
18064: PUSH
18065: LD_INT 0
18067: ST_TO_ADDR
// sFac := false ;
18068: LD_ADDR_EXP 83
18072: PUSH
18073: LD_INT 0
18075: ST_TO_ADDR
// sPower := false ;
18076: LD_ADDR_EXP 84
18080: PUSH
18081: LD_INT 0
18083: ST_TO_ADDR
// sRandom := false ;
18084: LD_ADDR_EXP 85
18088: PUSH
18089: LD_INT 0
18091: ST_TO_ADDR
// sShield := false ;
18092: LD_ADDR_EXP 86
18096: PUSH
18097: LD_INT 0
18099: ST_TO_ADDR
// sTime := false ;
18100: LD_ADDR_EXP 87
18104: PUSH
18105: LD_INT 0
18107: ST_TO_ADDR
// sTools := false ;
18108: LD_ADDR_EXP 88
18112: PUSH
18113: LD_INT 0
18115: ST_TO_ADDR
// sSold := false ;
18116: LD_ADDR_EXP 53
18120: PUSH
18121: LD_INT 0
18123: ST_TO_ADDR
// sDiff := false ;
18124: LD_ADDR_EXP 54
18128: PUSH
18129: LD_INT 0
18131: ST_TO_ADDR
// sFog := false ;
18132: LD_ADDR_EXP 57
18136: PUSH
18137: LD_INT 0
18139: ST_TO_ADDR
// sReset := false ;
18140: LD_ADDR_EXP 58
18144: PUSH
18145: LD_INT 0
18147: ST_TO_ADDR
// sSun := false ;
18148: LD_ADDR_EXP 59
18152: PUSH
18153: LD_INT 0
18155: ST_TO_ADDR
// sTiger := false ;
18156: LD_ADDR_EXP 55
18160: PUSH
18161: LD_INT 0
18163: ST_TO_ADDR
// sBomb := false ;
18164: LD_ADDR_EXP 56
18168: PUSH
18169: LD_INT 0
18171: ST_TO_ADDR
// sWound := false ;
18172: LD_ADDR_EXP 64
18176: PUSH
18177: LD_INT 0
18179: ST_TO_ADDR
// sBetray := false ;
18180: LD_ADDR_EXP 68
18184: PUSH
18185: LD_INT 0
18187: ST_TO_ADDR
// sContamin := false ;
18188: LD_ADDR_EXP 69
18192: PUSH
18193: LD_INT 0
18195: ST_TO_ADDR
// sOil := false ;
18196: LD_ADDR_EXP 71
18200: PUSH
18201: LD_INT 0
18203: ST_TO_ADDR
// sStu := false ;
18204: LD_ADDR_EXP 75
18208: PUSH
18209: LD_INT 0
18211: ST_TO_ADDR
// sBazooka := false ;
18212: LD_ADDR_EXP 78
18216: PUSH
18217: LD_INT 0
18219: ST_TO_ADDR
// sMortar := false ;
18220: LD_ADDR_EXP 79
18224: PUSH
18225: LD_INT 0
18227: ST_TO_ADDR
// sRanger := false ;
18228: LD_ADDR_EXP 89
18232: PUSH
18233: LD_INT 0
18235: ST_TO_ADDR
// sComputer := false ;
18236: LD_ADDR_EXP 90
18240: PUSH
18241: LD_INT 0
18243: ST_TO_ADDR
// s30 := false ;
18244: LD_ADDR_EXP 91
18248: PUSH
18249: LD_INT 0
18251: ST_TO_ADDR
// s60 := false ;
18252: LD_ADDR_EXP 92
18256: PUSH
18257: LD_INT 0
18259: ST_TO_ADDR
// end ;
18260: LD_VAR 0 1
18264: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
18265: LD_INT 0
18267: PPUSH
18268: PPUSH
18269: PPUSH
18270: PPUSH
18271: PPUSH
18272: PPUSH
18273: PPUSH
// result := [ ] ;
18274: LD_ADDR_VAR 0 2
18278: PUSH
18279: EMPTY
18280: ST_TO_ADDR
// if campaign_id = 1 then
18281: LD_OWVAR 69
18285: PUSH
18286: LD_INT 1
18288: EQUAL
18289: IFFALSE 21455
// begin case mission_number of 1 :
18291: LD_OWVAR 70
18295: PUSH
18296: LD_INT 1
18298: DOUBLE
18299: EQUAL
18300: IFTRUE 18304
18302: GO 18380
18304: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18305: LD_ADDR_VAR 0 2
18309: PUSH
18310: LD_INT 2
18312: PUSH
18313: LD_INT 4
18315: PUSH
18316: LD_INT 11
18318: PUSH
18319: LD_INT 12
18321: PUSH
18322: LD_INT 15
18324: PUSH
18325: LD_INT 16
18327: PUSH
18328: LD_INT 22
18330: PUSH
18331: LD_INT 23
18333: PUSH
18334: LD_INT 26
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 101
18350: PUSH
18351: LD_INT 102
18353: PUSH
18354: LD_INT 106
18356: PUSH
18357: LD_INT 116
18359: PUSH
18360: LD_INT 117
18362: PUSH
18363: LD_INT 118
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: ST_TO_ADDR
18378: GO 21453
18380: LD_INT 2
18382: DOUBLE
18383: EQUAL
18384: IFTRUE 18388
18386: GO 18472
18388: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18389: LD_ADDR_VAR 0 2
18393: PUSH
18394: LD_INT 2
18396: PUSH
18397: LD_INT 4
18399: PUSH
18400: LD_INT 11
18402: PUSH
18403: LD_INT 12
18405: PUSH
18406: LD_INT 15
18408: PUSH
18409: LD_INT 16
18411: PUSH
18412: LD_INT 22
18414: PUSH
18415: LD_INT 23
18417: PUSH
18418: LD_INT 26
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: PUSH
18432: LD_INT 101
18434: PUSH
18435: LD_INT 102
18437: PUSH
18438: LD_INT 105
18440: PUSH
18441: LD_INT 106
18443: PUSH
18444: LD_INT 108
18446: PUSH
18447: LD_INT 116
18449: PUSH
18450: LD_INT 117
18452: PUSH
18453: LD_INT 118
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: ST_TO_ADDR
18470: GO 21453
18472: LD_INT 3
18474: DOUBLE
18475: EQUAL
18476: IFTRUE 18480
18478: GO 18568
18480: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
18481: LD_ADDR_VAR 0 2
18485: PUSH
18486: LD_INT 2
18488: PUSH
18489: LD_INT 4
18491: PUSH
18492: LD_INT 5
18494: PUSH
18495: LD_INT 11
18497: PUSH
18498: LD_INT 12
18500: PUSH
18501: LD_INT 15
18503: PUSH
18504: LD_INT 16
18506: PUSH
18507: LD_INT 22
18509: PUSH
18510: LD_INT 26
18512: PUSH
18513: LD_INT 36
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: PUSH
18528: LD_INT 101
18530: PUSH
18531: LD_INT 102
18533: PUSH
18534: LD_INT 105
18536: PUSH
18537: LD_INT 106
18539: PUSH
18540: LD_INT 108
18542: PUSH
18543: LD_INT 116
18545: PUSH
18546: LD_INT 117
18548: PUSH
18549: LD_INT 118
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: ST_TO_ADDR
18566: GO 21453
18568: LD_INT 4
18570: DOUBLE
18571: EQUAL
18572: IFTRUE 18576
18574: GO 18672
18576: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
18577: LD_ADDR_VAR 0 2
18581: PUSH
18582: LD_INT 2
18584: PUSH
18585: LD_INT 4
18587: PUSH
18588: LD_INT 5
18590: PUSH
18591: LD_INT 8
18593: PUSH
18594: LD_INT 11
18596: PUSH
18597: LD_INT 12
18599: PUSH
18600: LD_INT 15
18602: PUSH
18603: LD_INT 16
18605: PUSH
18606: LD_INT 22
18608: PUSH
18609: LD_INT 23
18611: PUSH
18612: LD_INT 26
18614: PUSH
18615: LD_INT 36
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: PUSH
18632: LD_INT 101
18634: PUSH
18635: LD_INT 102
18637: PUSH
18638: LD_INT 105
18640: PUSH
18641: LD_INT 106
18643: PUSH
18644: LD_INT 108
18646: PUSH
18647: LD_INT 116
18649: PUSH
18650: LD_INT 117
18652: PUSH
18653: LD_INT 118
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: ST_TO_ADDR
18670: GO 21453
18672: LD_INT 5
18674: DOUBLE
18675: EQUAL
18676: IFTRUE 18680
18678: GO 18792
18680: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
18681: LD_ADDR_VAR 0 2
18685: PUSH
18686: LD_INT 2
18688: PUSH
18689: LD_INT 4
18691: PUSH
18692: LD_INT 5
18694: PUSH
18695: LD_INT 6
18697: PUSH
18698: LD_INT 8
18700: PUSH
18701: LD_INT 11
18703: PUSH
18704: LD_INT 12
18706: PUSH
18707: LD_INT 15
18709: PUSH
18710: LD_INT 16
18712: PUSH
18713: LD_INT 22
18715: PUSH
18716: LD_INT 23
18718: PUSH
18719: LD_INT 25
18721: PUSH
18722: LD_INT 26
18724: PUSH
18725: LD_INT 36
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 101
18746: PUSH
18747: LD_INT 102
18749: PUSH
18750: LD_INT 105
18752: PUSH
18753: LD_INT 106
18755: PUSH
18756: LD_INT 108
18758: PUSH
18759: LD_INT 109
18761: PUSH
18762: LD_INT 112
18764: PUSH
18765: LD_INT 116
18767: PUSH
18768: LD_INT 117
18770: PUSH
18771: LD_INT 118
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: ST_TO_ADDR
18790: GO 21453
18792: LD_INT 6
18794: DOUBLE
18795: EQUAL
18796: IFTRUE 18800
18798: GO 18932
18800: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
18801: LD_ADDR_VAR 0 2
18805: PUSH
18806: LD_INT 2
18808: PUSH
18809: LD_INT 4
18811: PUSH
18812: LD_INT 5
18814: PUSH
18815: LD_INT 6
18817: PUSH
18818: LD_INT 8
18820: PUSH
18821: LD_INT 11
18823: PUSH
18824: LD_INT 12
18826: PUSH
18827: LD_INT 15
18829: PUSH
18830: LD_INT 16
18832: PUSH
18833: LD_INT 20
18835: PUSH
18836: LD_INT 21
18838: PUSH
18839: LD_INT 22
18841: PUSH
18842: LD_INT 23
18844: PUSH
18845: LD_INT 25
18847: PUSH
18848: LD_INT 26
18850: PUSH
18851: LD_INT 30
18853: PUSH
18854: LD_INT 31
18856: PUSH
18857: LD_INT 32
18859: PUSH
18860: LD_INT 36
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 101
18886: PUSH
18887: LD_INT 102
18889: PUSH
18890: LD_INT 105
18892: PUSH
18893: LD_INT 106
18895: PUSH
18896: LD_INT 108
18898: PUSH
18899: LD_INT 109
18901: PUSH
18902: LD_INT 112
18904: PUSH
18905: LD_INT 116
18907: PUSH
18908: LD_INT 117
18910: PUSH
18911: LD_INT 118
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: ST_TO_ADDR
18930: GO 21453
18932: LD_INT 7
18934: DOUBLE
18935: EQUAL
18936: IFTRUE 18940
18938: GO 19052
18940: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
18941: LD_ADDR_VAR 0 2
18945: PUSH
18946: LD_INT 2
18948: PUSH
18949: LD_INT 4
18951: PUSH
18952: LD_INT 5
18954: PUSH
18955: LD_INT 7
18957: PUSH
18958: LD_INT 11
18960: PUSH
18961: LD_INT 12
18963: PUSH
18964: LD_INT 15
18966: PUSH
18967: LD_INT 16
18969: PUSH
18970: LD_INT 20
18972: PUSH
18973: LD_INT 21
18975: PUSH
18976: LD_INT 22
18978: PUSH
18979: LD_INT 23
18981: PUSH
18982: LD_INT 25
18984: PUSH
18985: LD_INT 26
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 101
19006: PUSH
19007: LD_INT 102
19009: PUSH
19010: LD_INT 103
19012: PUSH
19013: LD_INT 105
19015: PUSH
19016: LD_INT 106
19018: PUSH
19019: LD_INT 108
19021: PUSH
19022: LD_INT 112
19024: PUSH
19025: LD_INT 116
19027: PUSH
19028: LD_INT 117
19030: PUSH
19031: LD_INT 118
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: ST_TO_ADDR
19050: GO 21453
19052: LD_INT 8
19054: DOUBLE
19055: EQUAL
19056: IFTRUE 19060
19058: GO 19200
19060: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
19061: LD_ADDR_VAR 0 2
19065: PUSH
19066: LD_INT 2
19068: PUSH
19069: LD_INT 4
19071: PUSH
19072: LD_INT 5
19074: PUSH
19075: LD_INT 6
19077: PUSH
19078: LD_INT 7
19080: PUSH
19081: LD_INT 8
19083: PUSH
19084: LD_INT 11
19086: PUSH
19087: LD_INT 12
19089: PUSH
19090: LD_INT 15
19092: PUSH
19093: LD_INT 16
19095: PUSH
19096: LD_INT 20
19098: PUSH
19099: LD_INT 21
19101: PUSH
19102: LD_INT 22
19104: PUSH
19105: LD_INT 23
19107: PUSH
19108: LD_INT 25
19110: PUSH
19111: LD_INT 26
19113: PUSH
19114: LD_INT 30
19116: PUSH
19117: LD_INT 31
19119: PUSH
19120: LD_INT 32
19122: PUSH
19123: LD_INT 36
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 101
19150: PUSH
19151: LD_INT 102
19153: PUSH
19154: LD_INT 103
19156: PUSH
19157: LD_INT 105
19159: PUSH
19160: LD_INT 106
19162: PUSH
19163: LD_INT 108
19165: PUSH
19166: LD_INT 109
19168: PUSH
19169: LD_INT 112
19171: PUSH
19172: LD_INT 116
19174: PUSH
19175: LD_INT 117
19177: PUSH
19178: LD_INT 118
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: ST_TO_ADDR
19198: GO 21453
19200: LD_INT 9
19202: DOUBLE
19203: EQUAL
19204: IFTRUE 19208
19206: GO 19356
19208: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
19209: LD_ADDR_VAR 0 2
19213: PUSH
19214: LD_INT 2
19216: PUSH
19217: LD_INT 4
19219: PUSH
19220: LD_INT 5
19222: PUSH
19223: LD_INT 6
19225: PUSH
19226: LD_INT 7
19228: PUSH
19229: LD_INT 8
19231: PUSH
19232: LD_INT 11
19234: PUSH
19235: LD_INT 12
19237: PUSH
19238: LD_INT 15
19240: PUSH
19241: LD_INT 16
19243: PUSH
19244: LD_INT 20
19246: PUSH
19247: LD_INT 21
19249: PUSH
19250: LD_INT 22
19252: PUSH
19253: LD_INT 23
19255: PUSH
19256: LD_INT 25
19258: PUSH
19259: LD_INT 26
19261: PUSH
19262: LD_INT 28
19264: PUSH
19265: LD_INT 30
19267: PUSH
19268: LD_INT 31
19270: PUSH
19271: LD_INT 32
19273: PUSH
19274: LD_INT 36
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: PUSH
19300: LD_INT 101
19302: PUSH
19303: LD_INT 102
19305: PUSH
19306: LD_INT 103
19308: PUSH
19309: LD_INT 105
19311: PUSH
19312: LD_INT 106
19314: PUSH
19315: LD_INT 108
19317: PUSH
19318: LD_INT 109
19320: PUSH
19321: LD_INT 112
19323: PUSH
19324: LD_INT 114
19326: PUSH
19327: LD_INT 116
19329: PUSH
19330: LD_INT 117
19332: PUSH
19333: LD_INT 118
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: ST_TO_ADDR
19354: GO 21453
19356: LD_INT 10
19358: DOUBLE
19359: EQUAL
19360: IFTRUE 19364
19362: GO 19560
19364: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
19365: LD_ADDR_VAR 0 2
19369: PUSH
19370: LD_INT 2
19372: PUSH
19373: LD_INT 4
19375: PUSH
19376: LD_INT 5
19378: PUSH
19379: LD_INT 6
19381: PUSH
19382: LD_INT 7
19384: PUSH
19385: LD_INT 8
19387: PUSH
19388: LD_INT 9
19390: PUSH
19391: LD_INT 10
19393: PUSH
19394: LD_INT 11
19396: PUSH
19397: LD_INT 12
19399: PUSH
19400: LD_INT 13
19402: PUSH
19403: LD_INT 14
19405: PUSH
19406: LD_INT 15
19408: PUSH
19409: LD_INT 16
19411: PUSH
19412: LD_INT 17
19414: PUSH
19415: LD_INT 18
19417: PUSH
19418: LD_INT 19
19420: PUSH
19421: LD_INT 20
19423: PUSH
19424: LD_INT 21
19426: PUSH
19427: LD_INT 22
19429: PUSH
19430: LD_INT 23
19432: PUSH
19433: LD_INT 24
19435: PUSH
19436: LD_INT 25
19438: PUSH
19439: LD_INT 26
19441: PUSH
19442: LD_INT 28
19444: PUSH
19445: LD_INT 30
19447: PUSH
19448: LD_INT 31
19450: PUSH
19451: LD_INT 32
19453: PUSH
19454: LD_INT 36
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 101
19490: PUSH
19491: LD_INT 102
19493: PUSH
19494: LD_INT 103
19496: PUSH
19497: LD_INT 104
19499: PUSH
19500: LD_INT 105
19502: PUSH
19503: LD_INT 106
19505: PUSH
19506: LD_INT 107
19508: PUSH
19509: LD_INT 108
19511: PUSH
19512: LD_INT 109
19514: PUSH
19515: LD_INT 110
19517: PUSH
19518: LD_INT 111
19520: PUSH
19521: LD_INT 112
19523: PUSH
19524: LD_INT 114
19526: PUSH
19527: LD_INT 116
19529: PUSH
19530: LD_INT 117
19532: PUSH
19533: LD_INT 118
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: ST_TO_ADDR
19558: GO 21453
19560: LD_INT 11
19562: DOUBLE
19563: EQUAL
19564: IFTRUE 19568
19566: GO 19772
19568: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
19569: LD_ADDR_VAR 0 2
19573: PUSH
19574: LD_INT 2
19576: PUSH
19577: LD_INT 3
19579: PUSH
19580: LD_INT 4
19582: PUSH
19583: LD_INT 5
19585: PUSH
19586: LD_INT 6
19588: PUSH
19589: LD_INT 7
19591: PUSH
19592: LD_INT 8
19594: PUSH
19595: LD_INT 9
19597: PUSH
19598: LD_INT 10
19600: PUSH
19601: LD_INT 11
19603: PUSH
19604: LD_INT 12
19606: PUSH
19607: LD_INT 13
19609: PUSH
19610: LD_INT 14
19612: PUSH
19613: LD_INT 15
19615: PUSH
19616: LD_INT 16
19618: PUSH
19619: LD_INT 17
19621: PUSH
19622: LD_INT 18
19624: PUSH
19625: LD_INT 19
19627: PUSH
19628: LD_INT 20
19630: PUSH
19631: LD_INT 21
19633: PUSH
19634: LD_INT 22
19636: PUSH
19637: LD_INT 23
19639: PUSH
19640: LD_INT 24
19642: PUSH
19643: LD_INT 25
19645: PUSH
19646: LD_INT 26
19648: PUSH
19649: LD_INT 28
19651: PUSH
19652: LD_INT 30
19654: PUSH
19655: LD_INT 31
19657: PUSH
19658: LD_INT 32
19660: PUSH
19661: LD_INT 34
19663: PUSH
19664: LD_INT 36
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: PUSH
19700: LD_INT 101
19702: PUSH
19703: LD_INT 102
19705: PUSH
19706: LD_INT 103
19708: PUSH
19709: LD_INT 104
19711: PUSH
19712: LD_INT 105
19714: PUSH
19715: LD_INT 106
19717: PUSH
19718: LD_INT 107
19720: PUSH
19721: LD_INT 108
19723: PUSH
19724: LD_INT 109
19726: PUSH
19727: LD_INT 110
19729: PUSH
19730: LD_INT 111
19732: PUSH
19733: LD_INT 112
19735: PUSH
19736: LD_INT 114
19738: PUSH
19739: LD_INT 116
19741: PUSH
19742: LD_INT 117
19744: PUSH
19745: LD_INT 118
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: ST_TO_ADDR
19770: GO 21453
19772: LD_INT 12
19774: DOUBLE
19775: EQUAL
19776: IFTRUE 19780
19778: GO 20000
19780: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
19781: LD_ADDR_VAR 0 2
19785: PUSH
19786: LD_INT 1
19788: PUSH
19789: LD_INT 2
19791: PUSH
19792: LD_INT 3
19794: PUSH
19795: LD_INT 4
19797: PUSH
19798: LD_INT 5
19800: PUSH
19801: LD_INT 6
19803: PUSH
19804: LD_INT 7
19806: PUSH
19807: LD_INT 8
19809: PUSH
19810: LD_INT 9
19812: PUSH
19813: LD_INT 10
19815: PUSH
19816: LD_INT 11
19818: PUSH
19819: LD_INT 12
19821: PUSH
19822: LD_INT 13
19824: PUSH
19825: LD_INT 14
19827: PUSH
19828: LD_INT 15
19830: PUSH
19831: LD_INT 16
19833: PUSH
19834: LD_INT 17
19836: PUSH
19837: LD_INT 18
19839: PUSH
19840: LD_INT 19
19842: PUSH
19843: LD_INT 20
19845: PUSH
19846: LD_INT 21
19848: PUSH
19849: LD_INT 22
19851: PUSH
19852: LD_INT 23
19854: PUSH
19855: LD_INT 24
19857: PUSH
19858: LD_INT 25
19860: PUSH
19861: LD_INT 26
19863: PUSH
19864: LD_INT 27
19866: PUSH
19867: LD_INT 28
19869: PUSH
19870: LD_INT 30
19872: PUSH
19873: LD_INT 31
19875: PUSH
19876: LD_INT 32
19878: PUSH
19879: LD_INT 33
19881: PUSH
19882: LD_INT 34
19884: PUSH
19885: LD_INT 36
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: PUSH
19924: LD_INT 101
19926: PUSH
19927: LD_INT 102
19929: PUSH
19930: LD_INT 103
19932: PUSH
19933: LD_INT 104
19935: PUSH
19936: LD_INT 105
19938: PUSH
19939: LD_INT 106
19941: PUSH
19942: LD_INT 107
19944: PUSH
19945: LD_INT 108
19947: PUSH
19948: LD_INT 109
19950: PUSH
19951: LD_INT 110
19953: PUSH
19954: LD_INT 111
19956: PUSH
19957: LD_INT 112
19959: PUSH
19960: LD_INT 113
19962: PUSH
19963: LD_INT 114
19965: PUSH
19966: LD_INT 116
19968: PUSH
19969: LD_INT 117
19971: PUSH
19972: LD_INT 118
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: ST_TO_ADDR
19998: GO 21453
20000: LD_INT 13
20002: DOUBLE
20003: EQUAL
20004: IFTRUE 20008
20006: GO 20216
20008: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20009: LD_ADDR_VAR 0 2
20013: PUSH
20014: LD_INT 1
20016: PUSH
20017: LD_INT 2
20019: PUSH
20020: LD_INT 3
20022: PUSH
20023: LD_INT 4
20025: PUSH
20026: LD_INT 5
20028: PUSH
20029: LD_INT 8
20031: PUSH
20032: LD_INT 9
20034: PUSH
20035: LD_INT 10
20037: PUSH
20038: LD_INT 11
20040: PUSH
20041: LD_INT 12
20043: PUSH
20044: LD_INT 14
20046: PUSH
20047: LD_INT 15
20049: PUSH
20050: LD_INT 16
20052: PUSH
20053: LD_INT 17
20055: PUSH
20056: LD_INT 18
20058: PUSH
20059: LD_INT 19
20061: PUSH
20062: LD_INT 20
20064: PUSH
20065: LD_INT 21
20067: PUSH
20068: LD_INT 22
20070: PUSH
20071: LD_INT 23
20073: PUSH
20074: LD_INT 24
20076: PUSH
20077: LD_INT 25
20079: PUSH
20080: LD_INT 26
20082: PUSH
20083: LD_INT 27
20085: PUSH
20086: LD_INT 28
20088: PUSH
20089: LD_INT 30
20091: PUSH
20092: LD_INT 31
20094: PUSH
20095: LD_INT 32
20097: PUSH
20098: LD_INT 33
20100: PUSH
20101: LD_INT 34
20103: PUSH
20104: LD_INT 36
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 101
20142: PUSH
20143: LD_INT 102
20145: PUSH
20146: LD_INT 103
20148: PUSH
20149: LD_INT 104
20151: PUSH
20152: LD_INT 105
20154: PUSH
20155: LD_INT 106
20157: PUSH
20158: LD_INT 107
20160: PUSH
20161: LD_INT 108
20163: PUSH
20164: LD_INT 109
20166: PUSH
20167: LD_INT 110
20169: PUSH
20170: LD_INT 111
20172: PUSH
20173: LD_INT 112
20175: PUSH
20176: LD_INT 113
20178: PUSH
20179: LD_INT 114
20181: PUSH
20182: LD_INT 116
20184: PUSH
20185: LD_INT 117
20187: PUSH
20188: LD_INT 118
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: ST_TO_ADDR
20214: GO 21453
20216: LD_INT 14
20218: DOUBLE
20219: EQUAL
20220: IFTRUE 20224
20222: GO 20448
20224: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20225: LD_ADDR_VAR 0 2
20229: PUSH
20230: LD_INT 1
20232: PUSH
20233: LD_INT 2
20235: PUSH
20236: LD_INT 3
20238: PUSH
20239: LD_INT 4
20241: PUSH
20242: LD_INT 5
20244: PUSH
20245: LD_INT 6
20247: PUSH
20248: LD_INT 7
20250: PUSH
20251: LD_INT 8
20253: PUSH
20254: LD_INT 9
20256: PUSH
20257: LD_INT 10
20259: PUSH
20260: LD_INT 11
20262: PUSH
20263: LD_INT 12
20265: PUSH
20266: LD_INT 13
20268: PUSH
20269: LD_INT 14
20271: PUSH
20272: LD_INT 15
20274: PUSH
20275: LD_INT 16
20277: PUSH
20278: LD_INT 17
20280: PUSH
20281: LD_INT 18
20283: PUSH
20284: LD_INT 19
20286: PUSH
20287: LD_INT 20
20289: PUSH
20290: LD_INT 21
20292: PUSH
20293: LD_INT 22
20295: PUSH
20296: LD_INT 23
20298: PUSH
20299: LD_INT 24
20301: PUSH
20302: LD_INT 25
20304: PUSH
20305: LD_INT 26
20307: PUSH
20308: LD_INT 27
20310: PUSH
20311: LD_INT 28
20313: PUSH
20314: LD_INT 29
20316: PUSH
20317: LD_INT 30
20319: PUSH
20320: LD_INT 31
20322: PUSH
20323: LD_INT 32
20325: PUSH
20326: LD_INT 33
20328: PUSH
20329: LD_INT 34
20331: PUSH
20332: LD_INT 36
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: PUSH
20372: LD_INT 101
20374: PUSH
20375: LD_INT 102
20377: PUSH
20378: LD_INT 103
20380: PUSH
20381: LD_INT 104
20383: PUSH
20384: LD_INT 105
20386: PUSH
20387: LD_INT 106
20389: PUSH
20390: LD_INT 107
20392: PUSH
20393: LD_INT 108
20395: PUSH
20396: LD_INT 109
20398: PUSH
20399: LD_INT 110
20401: PUSH
20402: LD_INT 111
20404: PUSH
20405: LD_INT 112
20407: PUSH
20408: LD_INT 113
20410: PUSH
20411: LD_INT 114
20413: PUSH
20414: LD_INT 116
20416: PUSH
20417: LD_INT 117
20419: PUSH
20420: LD_INT 118
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: ST_TO_ADDR
20446: GO 21453
20448: LD_INT 15
20450: DOUBLE
20451: EQUAL
20452: IFTRUE 20456
20454: GO 20680
20456: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
20457: LD_ADDR_VAR 0 2
20461: PUSH
20462: LD_INT 1
20464: PUSH
20465: LD_INT 2
20467: PUSH
20468: LD_INT 3
20470: PUSH
20471: LD_INT 4
20473: PUSH
20474: LD_INT 5
20476: PUSH
20477: LD_INT 6
20479: PUSH
20480: LD_INT 7
20482: PUSH
20483: LD_INT 8
20485: PUSH
20486: LD_INT 9
20488: PUSH
20489: LD_INT 10
20491: PUSH
20492: LD_INT 11
20494: PUSH
20495: LD_INT 12
20497: PUSH
20498: LD_INT 13
20500: PUSH
20501: LD_INT 14
20503: PUSH
20504: LD_INT 15
20506: PUSH
20507: LD_INT 16
20509: PUSH
20510: LD_INT 17
20512: PUSH
20513: LD_INT 18
20515: PUSH
20516: LD_INT 19
20518: PUSH
20519: LD_INT 20
20521: PUSH
20522: LD_INT 21
20524: PUSH
20525: LD_INT 22
20527: PUSH
20528: LD_INT 23
20530: PUSH
20531: LD_INT 24
20533: PUSH
20534: LD_INT 25
20536: PUSH
20537: LD_INT 26
20539: PUSH
20540: LD_INT 27
20542: PUSH
20543: LD_INT 28
20545: PUSH
20546: LD_INT 29
20548: PUSH
20549: LD_INT 30
20551: PUSH
20552: LD_INT 31
20554: PUSH
20555: LD_INT 32
20557: PUSH
20558: LD_INT 33
20560: PUSH
20561: LD_INT 34
20563: PUSH
20564: LD_INT 36
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 101
20606: PUSH
20607: LD_INT 102
20609: PUSH
20610: LD_INT 103
20612: PUSH
20613: LD_INT 104
20615: PUSH
20616: LD_INT 105
20618: PUSH
20619: LD_INT 106
20621: PUSH
20622: LD_INT 107
20624: PUSH
20625: LD_INT 108
20627: PUSH
20628: LD_INT 109
20630: PUSH
20631: LD_INT 110
20633: PUSH
20634: LD_INT 111
20636: PUSH
20637: LD_INT 112
20639: PUSH
20640: LD_INT 113
20642: PUSH
20643: LD_INT 114
20645: PUSH
20646: LD_INT 116
20648: PUSH
20649: LD_INT 117
20651: PUSH
20652: LD_INT 118
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: ST_TO_ADDR
20678: GO 21453
20680: LD_INT 16
20682: DOUBLE
20683: EQUAL
20684: IFTRUE 20688
20686: GO 20824
20688: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
20689: LD_ADDR_VAR 0 2
20693: PUSH
20694: LD_INT 2
20696: PUSH
20697: LD_INT 4
20699: PUSH
20700: LD_INT 5
20702: PUSH
20703: LD_INT 7
20705: PUSH
20706: LD_INT 11
20708: PUSH
20709: LD_INT 12
20711: PUSH
20712: LD_INT 15
20714: PUSH
20715: LD_INT 16
20717: PUSH
20718: LD_INT 20
20720: PUSH
20721: LD_INT 21
20723: PUSH
20724: LD_INT 22
20726: PUSH
20727: LD_INT 23
20729: PUSH
20730: LD_INT 25
20732: PUSH
20733: LD_INT 26
20735: PUSH
20736: LD_INT 30
20738: PUSH
20739: LD_INT 31
20741: PUSH
20742: LD_INT 32
20744: PUSH
20745: LD_INT 33
20747: PUSH
20748: LD_INT 34
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 101
20774: PUSH
20775: LD_INT 102
20777: PUSH
20778: LD_INT 103
20780: PUSH
20781: LD_INT 106
20783: PUSH
20784: LD_INT 108
20786: PUSH
20787: LD_INT 112
20789: PUSH
20790: LD_INT 113
20792: PUSH
20793: LD_INT 114
20795: PUSH
20796: LD_INT 116
20798: PUSH
20799: LD_INT 117
20801: PUSH
20802: LD_INT 118
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: ST_TO_ADDR
20822: GO 21453
20824: LD_INT 17
20826: DOUBLE
20827: EQUAL
20828: IFTRUE 20832
20830: GO 21056
20832: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
20833: LD_ADDR_VAR 0 2
20837: PUSH
20838: LD_INT 1
20840: PUSH
20841: LD_INT 2
20843: PUSH
20844: LD_INT 3
20846: PUSH
20847: LD_INT 4
20849: PUSH
20850: LD_INT 5
20852: PUSH
20853: LD_INT 6
20855: PUSH
20856: LD_INT 7
20858: PUSH
20859: LD_INT 8
20861: PUSH
20862: LD_INT 9
20864: PUSH
20865: LD_INT 10
20867: PUSH
20868: LD_INT 11
20870: PUSH
20871: LD_INT 12
20873: PUSH
20874: LD_INT 13
20876: PUSH
20877: LD_INT 14
20879: PUSH
20880: LD_INT 15
20882: PUSH
20883: LD_INT 16
20885: PUSH
20886: LD_INT 17
20888: PUSH
20889: LD_INT 18
20891: PUSH
20892: LD_INT 19
20894: PUSH
20895: LD_INT 20
20897: PUSH
20898: LD_INT 21
20900: PUSH
20901: LD_INT 22
20903: PUSH
20904: LD_INT 23
20906: PUSH
20907: LD_INT 24
20909: PUSH
20910: LD_INT 25
20912: PUSH
20913: LD_INT 26
20915: PUSH
20916: LD_INT 27
20918: PUSH
20919: LD_INT 28
20921: PUSH
20922: LD_INT 29
20924: PUSH
20925: LD_INT 30
20927: PUSH
20928: LD_INT 31
20930: PUSH
20931: LD_INT 32
20933: PUSH
20934: LD_INT 33
20936: PUSH
20937: LD_INT 34
20939: PUSH
20940: LD_INT 36
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: PUSH
20980: LD_INT 101
20982: PUSH
20983: LD_INT 102
20985: PUSH
20986: LD_INT 103
20988: PUSH
20989: LD_INT 104
20991: PUSH
20992: LD_INT 105
20994: PUSH
20995: LD_INT 106
20997: PUSH
20998: LD_INT 107
21000: PUSH
21001: LD_INT 108
21003: PUSH
21004: LD_INT 109
21006: PUSH
21007: LD_INT 110
21009: PUSH
21010: LD_INT 111
21012: PUSH
21013: LD_INT 112
21015: PUSH
21016: LD_INT 113
21018: PUSH
21019: LD_INT 114
21021: PUSH
21022: LD_INT 116
21024: PUSH
21025: LD_INT 117
21027: PUSH
21028: LD_INT 118
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: ST_TO_ADDR
21054: GO 21453
21056: LD_INT 18
21058: DOUBLE
21059: EQUAL
21060: IFTRUE 21064
21062: GO 21212
21064: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21065: LD_ADDR_VAR 0 2
21069: PUSH
21070: LD_INT 2
21072: PUSH
21073: LD_INT 4
21075: PUSH
21076: LD_INT 5
21078: PUSH
21079: LD_INT 7
21081: PUSH
21082: LD_INT 11
21084: PUSH
21085: LD_INT 12
21087: PUSH
21088: LD_INT 15
21090: PUSH
21091: LD_INT 16
21093: PUSH
21094: LD_INT 20
21096: PUSH
21097: LD_INT 21
21099: PUSH
21100: LD_INT 22
21102: PUSH
21103: LD_INT 23
21105: PUSH
21106: LD_INT 25
21108: PUSH
21109: LD_INT 26
21111: PUSH
21112: LD_INT 30
21114: PUSH
21115: LD_INT 31
21117: PUSH
21118: LD_INT 32
21120: PUSH
21121: LD_INT 33
21123: PUSH
21124: LD_INT 34
21126: PUSH
21127: LD_INT 35
21129: PUSH
21130: LD_INT 36
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 101
21158: PUSH
21159: LD_INT 102
21161: PUSH
21162: LD_INT 103
21164: PUSH
21165: LD_INT 106
21167: PUSH
21168: LD_INT 108
21170: PUSH
21171: LD_INT 112
21173: PUSH
21174: LD_INT 113
21176: PUSH
21177: LD_INT 114
21179: PUSH
21180: LD_INT 115
21182: PUSH
21183: LD_INT 116
21185: PUSH
21186: LD_INT 117
21188: PUSH
21189: LD_INT 118
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: ST_TO_ADDR
21210: GO 21453
21212: LD_INT 19
21214: DOUBLE
21215: EQUAL
21216: IFTRUE 21220
21218: GO 21452
21220: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21221: LD_ADDR_VAR 0 2
21225: PUSH
21226: LD_INT 1
21228: PUSH
21229: LD_INT 2
21231: PUSH
21232: LD_INT 3
21234: PUSH
21235: LD_INT 4
21237: PUSH
21238: LD_INT 5
21240: PUSH
21241: LD_INT 6
21243: PUSH
21244: LD_INT 7
21246: PUSH
21247: LD_INT 8
21249: PUSH
21250: LD_INT 9
21252: PUSH
21253: LD_INT 10
21255: PUSH
21256: LD_INT 11
21258: PUSH
21259: LD_INT 12
21261: PUSH
21262: LD_INT 13
21264: PUSH
21265: LD_INT 14
21267: PUSH
21268: LD_INT 15
21270: PUSH
21271: LD_INT 16
21273: PUSH
21274: LD_INT 17
21276: PUSH
21277: LD_INT 18
21279: PUSH
21280: LD_INT 19
21282: PUSH
21283: LD_INT 20
21285: PUSH
21286: LD_INT 21
21288: PUSH
21289: LD_INT 22
21291: PUSH
21292: LD_INT 23
21294: PUSH
21295: LD_INT 24
21297: PUSH
21298: LD_INT 25
21300: PUSH
21301: LD_INT 26
21303: PUSH
21304: LD_INT 27
21306: PUSH
21307: LD_INT 28
21309: PUSH
21310: LD_INT 29
21312: PUSH
21313: LD_INT 30
21315: PUSH
21316: LD_INT 31
21318: PUSH
21319: LD_INT 32
21321: PUSH
21322: LD_INT 33
21324: PUSH
21325: LD_INT 34
21327: PUSH
21328: LD_INT 35
21330: PUSH
21331: LD_INT 36
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 101
21374: PUSH
21375: LD_INT 102
21377: PUSH
21378: LD_INT 103
21380: PUSH
21381: LD_INT 104
21383: PUSH
21384: LD_INT 105
21386: PUSH
21387: LD_INT 106
21389: PUSH
21390: LD_INT 107
21392: PUSH
21393: LD_INT 108
21395: PUSH
21396: LD_INT 109
21398: PUSH
21399: LD_INT 110
21401: PUSH
21402: LD_INT 111
21404: PUSH
21405: LD_INT 112
21407: PUSH
21408: LD_INT 113
21410: PUSH
21411: LD_INT 114
21413: PUSH
21414: LD_INT 115
21416: PUSH
21417: LD_INT 116
21419: PUSH
21420: LD_INT 117
21422: PUSH
21423: LD_INT 118
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: ST_TO_ADDR
21450: GO 21453
21452: POP
// end else
21453: GO 21684
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
21455: LD_ADDR_VAR 0 2
21459: PUSH
21460: LD_INT 1
21462: PUSH
21463: LD_INT 2
21465: PUSH
21466: LD_INT 3
21468: PUSH
21469: LD_INT 4
21471: PUSH
21472: LD_INT 5
21474: PUSH
21475: LD_INT 6
21477: PUSH
21478: LD_INT 7
21480: PUSH
21481: LD_INT 8
21483: PUSH
21484: LD_INT 9
21486: PUSH
21487: LD_INT 10
21489: PUSH
21490: LD_INT 11
21492: PUSH
21493: LD_INT 12
21495: PUSH
21496: LD_INT 13
21498: PUSH
21499: LD_INT 14
21501: PUSH
21502: LD_INT 15
21504: PUSH
21505: LD_INT 16
21507: PUSH
21508: LD_INT 17
21510: PUSH
21511: LD_INT 18
21513: PUSH
21514: LD_INT 19
21516: PUSH
21517: LD_INT 20
21519: PUSH
21520: LD_INT 21
21522: PUSH
21523: LD_INT 22
21525: PUSH
21526: LD_INT 23
21528: PUSH
21529: LD_INT 24
21531: PUSH
21532: LD_INT 25
21534: PUSH
21535: LD_INT 26
21537: PUSH
21538: LD_INT 27
21540: PUSH
21541: LD_INT 28
21543: PUSH
21544: LD_INT 29
21546: PUSH
21547: LD_INT 30
21549: PUSH
21550: LD_INT 31
21552: PUSH
21553: LD_INT 32
21555: PUSH
21556: LD_INT 33
21558: PUSH
21559: LD_INT 34
21561: PUSH
21562: LD_INT 35
21564: PUSH
21565: LD_INT 36
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 101
21608: PUSH
21609: LD_INT 102
21611: PUSH
21612: LD_INT 103
21614: PUSH
21615: LD_INT 104
21617: PUSH
21618: LD_INT 105
21620: PUSH
21621: LD_INT 106
21623: PUSH
21624: LD_INT 107
21626: PUSH
21627: LD_INT 108
21629: PUSH
21630: LD_INT 109
21632: PUSH
21633: LD_INT 110
21635: PUSH
21636: LD_INT 111
21638: PUSH
21639: LD_INT 112
21641: PUSH
21642: LD_INT 113
21644: PUSH
21645: LD_INT 114
21647: PUSH
21648: LD_INT 115
21650: PUSH
21651: LD_INT 116
21653: PUSH
21654: LD_INT 117
21656: PUSH
21657: LD_INT 118
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: ST_TO_ADDR
// if result then
21684: LD_VAR 0 2
21688: IFFALSE 22474
// begin normal :=  ;
21690: LD_ADDR_VAR 0 5
21694: PUSH
21695: LD_STRING 
21697: ST_TO_ADDR
// hardcore :=  ;
21698: LD_ADDR_VAR 0 6
21702: PUSH
21703: LD_STRING 
21705: ST_TO_ADDR
// active :=  ;
21706: LD_ADDR_VAR 0 7
21710: PUSH
21711: LD_STRING 
21713: ST_TO_ADDR
// for i = 1 to normalCounter do
21714: LD_ADDR_VAR 0 8
21718: PUSH
21719: DOUBLE
21720: LD_INT 1
21722: DEC
21723: ST_TO_ADDR
21724: LD_EXP 37
21728: PUSH
21729: FOR_TO
21730: IFFALSE 21831
// begin tmp := 0 ;
21732: LD_ADDR_VAR 0 3
21736: PUSH
21737: LD_STRING 0
21739: ST_TO_ADDR
// if result [ 1 ] then
21740: LD_VAR 0 2
21744: PUSH
21745: LD_INT 1
21747: ARRAY
21748: IFFALSE 21813
// if result [ 1 ] [ 1 ] = i then
21750: LD_VAR 0 2
21754: PUSH
21755: LD_INT 1
21757: ARRAY
21758: PUSH
21759: LD_INT 1
21761: ARRAY
21762: PUSH
21763: LD_VAR 0 8
21767: EQUAL
21768: IFFALSE 21813
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21770: LD_ADDR_VAR 0 2
21774: PUSH
21775: LD_VAR 0 2
21779: PPUSH
21780: LD_INT 1
21782: PPUSH
21783: LD_VAR 0 2
21787: PUSH
21788: LD_INT 1
21790: ARRAY
21791: PPUSH
21792: LD_INT 1
21794: PPUSH
21795: CALL_OW 3
21799: PPUSH
21800: CALL_OW 1
21804: ST_TO_ADDR
// tmp := 1 ;
21805: LD_ADDR_VAR 0 3
21809: PUSH
21810: LD_STRING 1
21812: ST_TO_ADDR
// end ; normal := normal & tmp ;
21813: LD_ADDR_VAR 0 5
21817: PUSH
21818: LD_VAR 0 5
21822: PUSH
21823: LD_VAR 0 3
21827: STR
21828: ST_TO_ADDR
// end ;
21829: GO 21729
21831: POP
21832: POP
// for i = 1 to hardcoreCounter do
21833: LD_ADDR_VAR 0 8
21837: PUSH
21838: DOUBLE
21839: LD_INT 1
21841: DEC
21842: ST_TO_ADDR
21843: LD_EXP 38
21847: PUSH
21848: FOR_TO
21849: IFFALSE 21954
// begin tmp := 0 ;
21851: LD_ADDR_VAR 0 3
21855: PUSH
21856: LD_STRING 0
21858: ST_TO_ADDR
// if result [ 2 ] then
21859: LD_VAR 0 2
21863: PUSH
21864: LD_INT 2
21866: ARRAY
21867: IFFALSE 21936
// if result [ 2 ] [ 1 ] = 100 + i then
21869: LD_VAR 0 2
21873: PUSH
21874: LD_INT 2
21876: ARRAY
21877: PUSH
21878: LD_INT 1
21880: ARRAY
21881: PUSH
21882: LD_INT 100
21884: PUSH
21885: LD_VAR 0 8
21889: PLUS
21890: EQUAL
21891: IFFALSE 21936
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21893: LD_ADDR_VAR 0 2
21897: PUSH
21898: LD_VAR 0 2
21902: PPUSH
21903: LD_INT 2
21905: PPUSH
21906: LD_VAR 0 2
21910: PUSH
21911: LD_INT 2
21913: ARRAY
21914: PPUSH
21915: LD_INT 1
21917: PPUSH
21918: CALL_OW 3
21922: PPUSH
21923: CALL_OW 1
21927: ST_TO_ADDR
// tmp := 1 ;
21928: LD_ADDR_VAR 0 3
21932: PUSH
21933: LD_STRING 1
21935: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21936: LD_ADDR_VAR 0 6
21940: PUSH
21941: LD_VAR 0 6
21945: PUSH
21946: LD_VAR 0 3
21950: STR
21951: ST_TO_ADDR
// end ;
21952: GO 21848
21954: POP
21955: POP
// if isGameLoad then
21956: LD_VAR 0 1
21960: IFFALSE 22435
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
21962: LD_ADDR_VAR 0 4
21966: PUSH
21967: LD_EXP 41
21971: PUSH
21972: LD_EXP 40
21976: PUSH
21977: LD_EXP 42
21981: PUSH
21982: LD_EXP 39
21986: PUSH
21987: LD_EXP 43
21991: PUSH
21992: LD_EXP 44
21996: PUSH
21997: LD_EXP 45
22001: PUSH
22002: LD_EXP 46
22006: PUSH
22007: LD_EXP 47
22011: PUSH
22012: LD_EXP 48
22016: PUSH
22017: LD_EXP 49
22021: PUSH
22022: LD_EXP 50
22026: PUSH
22027: LD_EXP 51
22031: PUSH
22032: LD_EXP 52
22036: PUSH
22037: LD_EXP 60
22041: PUSH
22042: LD_EXP 61
22046: PUSH
22047: LD_EXP 62
22051: PUSH
22052: LD_EXP 63
22056: PUSH
22057: LD_EXP 65
22061: PUSH
22062: LD_EXP 66
22066: PUSH
22067: LD_EXP 67
22071: PUSH
22072: LD_EXP 70
22076: PUSH
22077: LD_EXP 72
22081: PUSH
22082: LD_EXP 73
22086: PUSH
22087: LD_EXP 74
22091: PUSH
22092: LD_EXP 76
22096: PUSH
22097: LD_EXP 77
22101: PUSH
22102: LD_EXP 80
22106: PUSH
22107: LD_EXP 81
22111: PUSH
22112: LD_EXP 82
22116: PUSH
22117: LD_EXP 83
22121: PUSH
22122: LD_EXP 84
22126: PUSH
22127: LD_EXP 85
22131: PUSH
22132: LD_EXP 86
22136: PUSH
22137: LD_EXP 87
22141: PUSH
22142: LD_EXP 88
22146: PUSH
22147: LD_EXP 53
22151: PUSH
22152: LD_EXP 54
22156: PUSH
22157: LD_EXP 57
22161: PUSH
22162: LD_EXP 58
22166: PUSH
22167: LD_EXP 59
22171: PUSH
22172: LD_EXP 55
22176: PUSH
22177: LD_EXP 56
22181: PUSH
22182: LD_EXP 64
22186: PUSH
22187: LD_EXP 68
22191: PUSH
22192: LD_EXP 69
22196: PUSH
22197: LD_EXP 71
22201: PUSH
22202: LD_EXP 75
22206: PUSH
22207: LD_EXP 78
22211: PUSH
22212: LD_EXP 79
22216: PUSH
22217: LD_EXP 89
22221: PUSH
22222: LD_EXP 90
22226: PUSH
22227: LD_EXP 91
22231: PUSH
22232: LD_EXP 92
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: ST_TO_ADDR
// tmp :=  ;
22293: LD_ADDR_VAR 0 3
22297: PUSH
22298: LD_STRING 
22300: ST_TO_ADDR
// for i = 1 to normalCounter do
22301: LD_ADDR_VAR 0 8
22305: PUSH
22306: DOUBLE
22307: LD_INT 1
22309: DEC
22310: ST_TO_ADDR
22311: LD_EXP 37
22315: PUSH
22316: FOR_TO
22317: IFFALSE 22353
// begin if flags [ i ] then
22319: LD_VAR 0 4
22323: PUSH
22324: LD_VAR 0 8
22328: ARRAY
22329: IFFALSE 22351
// tmp := tmp & i & ; ;
22331: LD_ADDR_VAR 0 3
22335: PUSH
22336: LD_VAR 0 3
22340: PUSH
22341: LD_VAR 0 8
22345: STR
22346: PUSH
22347: LD_STRING ;
22349: STR
22350: ST_TO_ADDR
// end ;
22351: GO 22316
22353: POP
22354: POP
// for i = 1 to hardcoreCounter do
22355: LD_ADDR_VAR 0 8
22359: PUSH
22360: DOUBLE
22361: LD_INT 1
22363: DEC
22364: ST_TO_ADDR
22365: LD_EXP 38
22369: PUSH
22370: FOR_TO
22371: IFFALSE 22417
// begin if flags [ normalCounter + i ] then
22373: LD_VAR 0 4
22377: PUSH
22378: LD_EXP 37
22382: PUSH
22383: LD_VAR 0 8
22387: PLUS
22388: ARRAY
22389: IFFALSE 22415
// tmp := tmp & ( 100 + i ) & ; ;
22391: LD_ADDR_VAR 0 3
22395: PUSH
22396: LD_VAR 0 3
22400: PUSH
22401: LD_INT 100
22403: PUSH
22404: LD_VAR 0 8
22408: PLUS
22409: STR
22410: PUSH
22411: LD_STRING ;
22413: STR
22414: ST_TO_ADDR
// end ;
22415: GO 22370
22417: POP
22418: POP
// if tmp then
22419: LD_VAR 0 3
22423: IFFALSE 22435
// active := tmp ;
22425: LD_ADDR_VAR 0 7
22429: PUSH
22430: LD_VAR 0 3
22434: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
22435: LD_STRING getStreamItemsFromMission("
22437: PUSH
22438: LD_VAR 0 5
22442: STR
22443: PUSH
22444: LD_STRING ","
22446: STR
22447: PUSH
22448: LD_VAR 0 6
22452: STR
22453: PUSH
22454: LD_STRING ","
22456: STR
22457: PUSH
22458: LD_VAR 0 7
22462: STR
22463: PUSH
22464: LD_STRING ")
22466: STR
22467: PPUSH
22468: CALL_OW 559
// end else
22472: GO 22481
// ToLua ( getStreamItemsFromMission("","","") ) ;
22474: LD_STRING getStreamItemsFromMission("","","")
22476: PPUSH
22477: CALL_OW 559
// end ;
22481: LD_VAR 0 2
22485: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22486: LD_EXP 36
22490: PUSH
22491: LD_EXP 41
22495: AND
22496: IFFALSE 22620
22498: GO 22500
22500: DISABLE
22501: LD_INT 0
22503: PPUSH
22504: PPUSH
// begin enable ;
22505: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
22506: LD_ADDR_VAR 0 2
22510: PUSH
22511: LD_INT 22
22513: PUSH
22514: LD_OWVAR 2
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: PUSH
22523: LD_INT 2
22525: PUSH
22526: LD_INT 34
22528: PUSH
22529: LD_INT 7
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 34
22538: PUSH
22539: LD_INT 45
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: LD_INT 34
22548: PUSH
22549: LD_INT 28
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 34
22558: PUSH
22559: LD_INT 47
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PPUSH
22577: CALL_OW 69
22581: ST_TO_ADDR
// if not tmp then
22582: LD_VAR 0 2
22586: NOT
22587: IFFALSE 22591
// exit ;
22589: GO 22620
// for i in tmp do
22591: LD_ADDR_VAR 0 1
22595: PUSH
22596: LD_VAR 0 2
22600: PUSH
22601: FOR_IN
22602: IFFALSE 22618
// begin SetLives ( i , 0 ) ;
22604: LD_VAR 0 1
22608: PPUSH
22609: LD_INT 0
22611: PPUSH
22612: CALL_OW 234
// end ;
22616: GO 22601
22618: POP
22619: POP
// end ;
22620: PPOPN 2
22622: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22623: LD_EXP 36
22627: PUSH
22628: LD_EXP 42
22632: AND
22633: IFFALSE 22717
22635: GO 22637
22637: DISABLE
22638: LD_INT 0
22640: PPUSH
22641: PPUSH
// begin enable ;
22642: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22643: LD_ADDR_VAR 0 2
22647: PUSH
22648: LD_INT 22
22650: PUSH
22651: LD_OWVAR 2
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 32
22662: PUSH
22663: LD_INT 3
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PPUSH
22674: CALL_OW 69
22678: ST_TO_ADDR
// if not tmp then
22679: LD_VAR 0 2
22683: NOT
22684: IFFALSE 22688
// exit ;
22686: GO 22717
// for i in tmp do
22688: LD_ADDR_VAR 0 1
22692: PUSH
22693: LD_VAR 0 2
22697: PUSH
22698: FOR_IN
22699: IFFALSE 22715
// begin SetLives ( i , 0 ) ;
22701: LD_VAR 0 1
22705: PPUSH
22706: LD_INT 0
22708: PPUSH
22709: CALL_OW 234
// end ;
22713: GO 22698
22715: POP
22716: POP
// end ;
22717: PPOPN 2
22719: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22720: LD_EXP 36
22724: PUSH
22725: LD_EXP 39
22729: AND
22730: IFFALSE 22823
22732: GO 22734
22734: DISABLE
22735: LD_INT 0
22737: PPUSH
// begin enable ;
22738: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22739: LD_ADDR_VAR 0 1
22743: PUSH
22744: LD_INT 22
22746: PUSH
22747: LD_OWVAR 2
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 2
22758: PUSH
22759: LD_INT 25
22761: PUSH
22762: LD_INT 5
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 25
22771: PUSH
22772: LD_INT 9
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: LD_INT 25
22781: PUSH
22782: LD_INT 8
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PPUSH
22799: CALL_OW 69
22803: PUSH
22804: FOR_IN
22805: IFFALSE 22821
// begin SetClass ( i , 1 ) ;
22807: LD_VAR 0 1
22811: PPUSH
22812: LD_INT 1
22814: PPUSH
22815: CALL_OW 336
// end ;
22819: GO 22804
22821: POP
22822: POP
// end ;
22823: PPOPN 1
22825: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22826: LD_EXP 36
22830: PUSH
22831: LD_EXP 40
22835: AND
22836: PUSH
22837: LD_OWVAR 65
22841: PUSH
22842: LD_INT 7
22844: LESS
22845: AND
22846: IFFALSE 22860
22848: GO 22850
22850: DISABLE
// begin enable ;
22851: ENABLE
// game_speed := 7 ;
22852: LD_ADDR_OWVAR 65
22856: PUSH
22857: LD_INT 7
22859: ST_TO_ADDR
// end ;
22860: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22861: LD_EXP 36
22865: PUSH
22866: LD_EXP 43
22870: AND
22871: IFFALSE 23073
22873: GO 22875
22875: DISABLE
22876: LD_INT 0
22878: PPUSH
22879: PPUSH
22880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22881: LD_ADDR_VAR 0 3
22885: PUSH
22886: LD_INT 81
22888: PUSH
22889: LD_OWVAR 2
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 21
22900: PUSH
22901: LD_INT 1
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PPUSH
22912: CALL_OW 69
22916: ST_TO_ADDR
// if not tmp then
22917: LD_VAR 0 3
22921: NOT
22922: IFFALSE 22926
// exit ;
22924: GO 23073
// if tmp > 5 then
22926: LD_VAR 0 3
22930: PUSH
22931: LD_INT 5
22933: GREATER
22934: IFFALSE 22946
// k := 5 else
22936: LD_ADDR_VAR 0 2
22940: PUSH
22941: LD_INT 5
22943: ST_TO_ADDR
22944: GO 22956
// k := tmp ;
22946: LD_ADDR_VAR 0 2
22950: PUSH
22951: LD_VAR 0 3
22955: ST_TO_ADDR
// for i := 1 to k do
22956: LD_ADDR_VAR 0 1
22960: PUSH
22961: DOUBLE
22962: LD_INT 1
22964: DEC
22965: ST_TO_ADDR
22966: LD_VAR 0 2
22970: PUSH
22971: FOR_TO
22972: IFFALSE 23071
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22974: LD_VAR 0 3
22978: PUSH
22979: LD_VAR 0 1
22983: ARRAY
22984: PPUSH
22985: LD_VAR 0 1
22989: PUSH
22990: LD_INT 4
22992: MOD
22993: PUSH
22994: LD_INT 1
22996: PLUS
22997: PPUSH
22998: CALL_OW 259
23002: PUSH
23003: LD_INT 10
23005: LESS
23006: IFFALSE 23069
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23008: LD_VAR 0 3
23012: PUSH
23013: LD_VAR 0 1
23017: ARRAY
23018: PPUSH
23019: LD_VAR 0 1
23023: PUSH
23024: LD_INT 4
23026: MOD
23027: PUSH
23028: LD_INT 1
23030: PLUS
23031: PPUSH
23032: LD_VAR 0 3
23036: PUSH
23037: LD_VAR 0 1
23041: ARRAY
23042: PPUSH
23043: LD_VAR 0 1
23047: PUSH
23048: LD_INT 4
23050: MOD
23051: PUSH
23052: LD_INT 1
23054: PLUS
23055: PPUSH
23056: CALL_OW 259
23060: PUSH
23061: LD_INT 1
23063: PLUS
23064: PPUSH
23065: CALL_OW 237
23069: GO 22971
23071: POP
23072: POP
// end ;
23073: PPOPN 3
23075: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23076: LD_EXP 36
23080: PUSH
23081: LD_EXP 44
23085: AND
23086: IFFALSE 23106
23088: GO 23090
23090: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23091: LD_INT 4
23093: PPUSH
23094: LD_OWVAR 2
23098: PPUSH
23099: LD_INT 0
23101: PPUSH
23102: CALL_OW 324
23106: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23107: LD_EXP 36
23111: PUSH
23112: LD_EXP 73
23116: AND
23117: IFFALSE 23137
23119: GO 23121
23121: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23122: LD_INT 19
23124: PPUSH
23125: LD_OWVAR 2
23129: PPUSH
23130: LD_INT 0
23132: PPUSH
23133: CALL_OW 324
23137: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23138: LD_EXP 36
23142: PUSH
23143: LD_EXP 45
23147: AND
23148: IFFALSE 23250
23150: GO 23152
23152: DISABLE
23153: LD_INT 0
23155: PPUSH
23156: PPUSH
// begin enable ;
23157: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23158: LD_ADDR_VAR 0 2
23162: PUSH
23163: LD_INT 22
23165: PUSH
23166: LD_OWVAR 2
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 2
23177: PUSH
23178: LD_INT 34
23180: PUSH
23181: LD_INT 11
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PUSH
23188: LD_INT 34
23190: PUSH
23191: LD_INT 30
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: LIST
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PPUSH
23207: CALL_OW 69
23211: ST_TO_ADDR
// if not tmp then
23212: LD_VAR 0 2
23216: NOT
23217: IFFALSE 23221
// exit ;
23219: GO 23250
// for i in tmp do
23221: LD_ADDR_VAR 0 1
23225: PUSH
23226: LD_VAR 0 2
23230: PUSH
23231: FOR_IN
23232: IFFALSE 23248
// begin SetLives ( i , 0 ) ;
23234: LD_VAR 0 1
23238: PPUSH
23239: LD_INT 0
23241: PPUSH
23242: CALL_OW 234
// end ;
23246: GO 23231
23248: POP
23249: POP
// end ;
23250: PPOPN 2
23252: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23253: LD_EXP 36
23257: PUSH
23258: LD_EXP 46
23262: AND
23263: IFFALSE 23283
23265: GO 23267
23267: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23268: LD_INT 32
23270: PPUSH
23271: LD_OWVAR 2
23275: PPUSH
23276: LD_INT 0
23278: PPUSH
23279: CALL_OW 324
23283: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23284: LD_EXP 36
23288: PUSH
23289: LD_EXP 47
23293: AND
23294: IFFALSE 23475
23296: GO 23298
23298: DISABLE
23299: LD_INT 0
23301: PPUSH
23302: PPUSH
23303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23304: LD_ADDR_VAR 0 2
23308: PUSH
23309: LD_INT 22
23311: PUSH
23312: LD_OWVAR 2
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PUSH
23321: LD_INT 33
23323: PUSH
23324: LD_INT 3
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PPUSH
23335: CALL_OW 69
23339: ST_TO_ADDR
// if not tmp then
23340: LD_VAR 0 2
23344: NOT
23345: IFFALSE 23349
// exit ;
23347: GO 23475
// side := 0 ;
23349: LD_ADDR_VAR 0 3
23353: PUSH
23354: LD_INT 0
23356: ST_TO_ADDR
// for i := 1 to 8 do
23357: LD_ADDR_VAR 0 1
23361: PUSH
23362: DOUBLE
23363: LD_INT 1
23365: DEC
23366: ST_TO_ADDR
23367: LD_INT 8
23369: PUSH
23370: FOR_TO
23371: IFFALSE 23419
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23373: LD_OWVAR 2
23377: PUSH
23378: LD_VAR 0 1
23382: NONEQUAL
23383: PUSH
23384: LD_OWVAR 2
23388: PPUSH
23389: LD_VAR 0 1
23393: PPUSH
23394: CALL_OW 81
23398: PUSH
23399: LD_INT 2
23401: EQUAL
23402: AND
23403: IFFALSE 23417
// begin side := i ;
23405: LD_ADDR_VAR 0 3
23409: PUSH
23410: LD_VAR 0 1
23414: ST_TO_ADDR
// break ;
23415: GO 23419
// end ;
23417: GO 23370
23419: POP
23420: POP
// if not side then
23421: LD_VAR 0 3
23425: NOT
23426: IFFALSE 23430
// exit ;
23428: GO 23475
// for i := 1 to tmp do
23430: LD_ADDR_VAR 0 1
23434: PUSH
23435: DOUBLE
23436: LD_INT 1
23438: DEC
23439: ST_TO_ADDR
23440: LD_VAR 0 2
23444: PUSH
23445: FOR_TO
23446: IFFALSE 23473
// if Prob ( 60 ) then
23448: LD_INT 60
23450: PPUSH
23451: CALL_OW 13
23455: IFFALSE 23471
// SetSide ( i , side ) ;
23457: LD_VAR 0 1
23461: PPUSH
23462: LD_VAR 0 3
23466: PPUSH
23467: CALL_OW 235
23471: GO 23445
23473: POP
23474: POP
// end ;
23475: PPOPN 3
23477: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23478: LD_EXP 36
23482: PUSH
23483: LD_EXP 49
23487: AND
23488: IFFALSE 23607
23490: GO 23492
23492: DISABLE
23493: LD_INT 0
23495: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23496: LD_ADDR_VAR 0 1
23500: PUSH
23501: LD_INT 22
23503: PUSH
23504: LD_OWVAR 2
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 21
23515: PUSH
23516: LD_INT 1
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 3
23525: PUSH
23526: LD_INT 23
23528: PUSH
23529: LD_INT 0
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: LIST
23544: PPUSH
23545: CALL_OW 69
23549: PUSH
23550: FOR_IN
23551: IFFALSE 23605
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23553: LD_VAR 0 1
23557: PPUSH
23558: CALL_OW 257
23562: PUSH
23563: LD_INT 1
23565: PUSH
23566: LD_INT 2
23568: PUSH
23569: LD_INT 3
23571: PUSH
23572: LD_INT 4
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: IN
23581: IFFALSE 23603
// SetClass ( un , rand ( 1 , 4 ) ) ;
23583: LD_VAR 0 1
23587: PPUSH
23588: LD_INT 1
23590: PPUSH
23591: LD_INT 4
23593: PPUSH
23594: CALL_OW 12
23598: PPUSH
23599: CALL_OW 336
23603: GO 23550
23605: POP
23606: POP
// end ;
23607: PPOPN 1
23609: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23610: LD_EXP 36
23614: PUSH
23615: LD_EXP 48
23619: AND
23620: IFFALSE 23699
23622: GO 23624
23624: DISABLE
23625: LD_INT 0
23627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23628: LD_ADDR_VAR 0 1
23632: PUSH
23633: LD_INT 22
23635: PUSH
23636: LD_OWVAR 2
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 21
23647: PUSH
23648: LD_INT 3
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PPUSH
23659: CALL_OW 69
23663: ST_TO_ADDR
// if not tmp then
23664: LD_VAR 0 1
23668: NOT
23669: IFFALSE 23673
// exit ;
23671: GO 23699
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23673: LD_VAR 0 1
23677: PUSH
23678: LD_INT 1
23680: PPUSH
23681: LD_VAR 0 1
23685: PPUSH
23686: CALL_OW 12
23690: ARRAY
23691: PPUSH
23692: LD_INT 100
23694: PPUSH
23695: CALL_OW 234
// end ;
23699: PPOPN 1
23701: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23702: LD_EXP 36
23706: PUSH
23707: LD_EXP 50
23711: AND
23712: IFFALSE 23810
23714: GO 23716
23716: DISABLE
23717: LD_INT 0
23719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23720: LD_ADDR_VAR 0 1
23724: PUSH
23725: LD_INT 22
23727: PUSH
23728: LD_OWVAR 2
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 21
23739: PUSH
23740: LD_INT 1
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PPUSH
23751: CALL_OW 69
23755: ST_TO_ADDR
// if not tmp then
23756: LD_VAR 0 1
23760: NOT
23761: IFFALSE 23765
// exit ;
23763: GO 23810
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23765: LD_VAR 0 1
23769: PUSH
23770: LD_INT 1
23772: PPUSH
23773: LD_VAR 0 1
23777: PPUSH
23778: CALL_OW 12
23782: ARRAY
23783: PPUSH
23784: LD_INT 1
23786: PPUSH
23787: LD_INT 4
23789: PPUSH
23790: CALL_OW 12
23794: PPUSH
23795: LD_INT 3000
23797: PPUSH
23798: LD_INT 9000
23800: PPUSH
23801: CALL_OW 12
23805: PPUSH
23806: CALL_OW 492
// end ;
23810: PPOPN 1
23812: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23813: LD_EXP 36
23817: PUSH
23818: LD_EXP 51
23822: AND
23823: IFFALSE 23843
23825: GO 23827
23827: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23828: LD_INT 1
23830: PPUSH
23831: LD_OWVAR 2
23835: PPUSH
23836: LD_INT 0
23838: PPUSH
23839: CALL_OW 324
23843: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23844: LD_EXP 36
23848: PUSH
23849: LD_EXP 52
23853: AND
23854: IFFALSE 23937
23856: GO 23858
23858: DISABLE
23859: LD_INT 0
23861: PPUSH
23862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23863: LD_ADDR_VAR 0 2
23867: PUSH
23868: LD_INT 22
23870: PUSH
23871: LD_OWVAR 2
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: LD_INT 21
23882: PUSH
23883: LD_INT 3
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PPUSH
23894: CALL_OW 69
23898: ST_TO_ADDR
// if not tmp then
23899: LD_VAR 0 2
23903: NOT
23904: IFFALSE 23908
// exit ;
23906: GO 23937
// for i in tmp do
23908: LD_ADDR_VAR 0 1
23912: PUSH
23913: LD_VAR 0 2
23917: PUSH
23918: FOR_IN
23919: IFFALSE 23935
// SetBLevel ( i , 10 ) ;
23921: LD_VAR 0 1
23925: PPUSH
23926: LD_INT 10
23928: PPUSH
23929: CALL_OW 241
23933: GO 23918
23935: POP
23936: POP
// end ;
23937: PPOPN 2
23939: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23940: LD_EXP 36
23944: PUSH
23945: LD_EXP 53
23949: AND
23950: IFFALSE 24061
23952: GO 23954
23954: DISABLE
23955: LD_INT 0
23957: PPUSH
23958: PPUSH
23959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23960: LD_ADDR_VAR 0 3
23964: PUSH
23965: LD_INT 22
23967: PUSH
23968: LD_OWVAR 2
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 25
23979: PUSH
23980: LD_INT 1
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PPUSH
23991: CALL_OW 69
23995: ST_TO_ADDR
// if not tmp then
23996: LD_VAR 0 3
24000: NOT
24001: IFFALSE 24005
// exit ;
24003: GO 24061
// un := tmp [ rand ( 1 , tmp ) ] ;
24005: LD_ADDR_VAR 0 2
24009: PUSH
24010: LD_VAR 0 3
24014: PUSH
24015: LD_INT 1
24017: PPUSH
24018: LD_VAR 0 3
24022: PPUSH
24023: CALL_OW 12
24027: ARRAY
24028: ST_TO_ADDR
// if Crawls ( un ) then
24029: LD_VAR 0 2
24033: PPUSH
24034: CALL_OW 318
24038: IFFALSE 24049
// ComWalk ( un ) ;
24040: LD_VAR 0 2
24044: PPUSH
24045: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24049: LD_VAR 0 2
24053: PPUSH
24054: LD_INT 5
24056: PPUSH
24057: CALL_OW 336
// end ;
24061: PPOPN 3
24063: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
24064: LD_EXP 36
24068: PUSH
24069: LD_EXP 54
24073: AND
24074: PUSH
24075: LD_OWVAR 67
24079: PUSH
24080: LD_INT 4
24082: LESS
24083: AND
24084: IFFALSE 24103
24086: GO 24088
24088: DISABLE
// begin Difficulty := Difficulty + 1 ;
24089: LD_ADDR_OWVAR 67
24093: PUSH
24094: LD_OWVAR 67
24098: PUSH
24099: LD_INT 1
24101: PLUS
24102: ST_TO_ADDR
// end ;
24103: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24104: LD_EXP 36
24108: PUSH
24109: LD_EXP 55
24113: AND
24114: IFFALSE 24217
24116: GO 24118
24118: DISABLE
24119: LD_INT 0
24121: PPUSH
// begin for i := 1 to 5 do
24122: LD_ADDR_VAR 0 1
24126: PUSH
24127: DOUBLE
24128: LD_INT 1
24130: DEC
24131: ST_TO_ADDR
24132: LD_INT 5
24134: PUSH
24135: FOR_TO
24136: IFFALSE 24215
// begin uc_nation := nation_nature ;
24138: LD_ADDR_OWVAR 21
24142: PUSH
24143: LD_INT 0
24145: ST_TO_ADDR
// uc_side := 0 ;
24146: LD_ADDR_OWVAR 20
24150: PUSH
24151: LD_INT 0
24153: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24154: LD_ADDR_OWVAR 29
24158: PUSH
24159: LD_INT 12
24161: PUSH
24162: LD_INT 12
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: ST_TO_ADDR
// hc_agressivity := 20 ;
24169: LD_ADDR_OWVAR 35
24173: PUSH
24174: LD_INT 20
24176: ST_TO_ADDR
// hc_class := class_tiger ;
24177: LD_ADDR_OWVAR 28
24181: PUSH
24182: LD_INT 14
24184: ST_TO_ADDR
// hc_gallery :=  ;
24185: LD_ADDR_OWVAR 33
24189: PUSH
24190: LD_STRING 
24192: ST_TO_ADDR
// hc_name :=  ;
24193: LD_ADDR_OWVAR 26
24197: PUSH
24198: LD_STRING 
24200: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24201: CALL_OW 44
24205: PPUSH
24206: LD_INT 0
24208: PPUSH
24209: CALL_OW 51
// end ;
24213: GO 24135
24215: POP
24216: POP
// end ;
24217: PPOPN 1
24219: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24220: LD_EXP 36
24224: PUSH
24225: LD_EXP 56
24229: AND
24230: IFFALSE 24239
24232: GO 24234
24234: DISABLE
// StreamSibBomb ;
24235: CALL 24240 0 0
24239: END
// export function StreamSibBomb ; var i , x , y ; begin
24240: LD_INT 0
24242: PPUSH
24243: PPUSH
24244: PPUSH
24245: PPUSH
// result := false ;
24246: LD_ADDR_VAR 0 1
24250: PUSH
24251: LD_INT 0
24253: ST_TO_ADDR
// for i := 1 to 16 do
24254: LD_ADDR_VAR 0 2
24258: PUSH
24259: DOUBLE
24260: LD_INT 1
24262: DEC
24263: ST_TO_ADDR
24264: LD_INT 16
24266: PUSH
24267: FOR_TO
24268: IFFALSE 24467
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24270: LD_ADDR_VAR 0 3
24274: PUSH
24275: LD_INT 10
24277: PUSH
24278: LD_INT 20
24280: PUSH
24281: LD_INT 30
24283: PUSH
24284: LD_INT 40
24286: PUSH
24287: LD_INT 50
24289: PUSH
24290: LD_INT 60
24292: PUSH
24293: LD_INT 70
24295: PUSH
24296: LD_INT 80
24298: PUSH
24299: LD_INT 90
24301: PUSH
24302: LD_INT 100
24304: PUSH
24305: LD_INT 110
24307: PUSH
24308: LD_INT 120
24310: PUSH
24311: LD_INT 130
24313: PUSH
24314: LD_INT 140
24316: PUSH
24317: LD_INT 150
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 1
24339: PPUSH
24340: LD_INT 15
24342: PPUSH
24343: CALL_OW 12
24347: ARRAY
24348: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24349: LD_ADDR_VAR 0 4
24353: PUSH
24354: LD_INT 10
24356: PUSH
24357: LD_INT 20
24359: PUSH
24360: LD_INT 30
24362: PUSH
24363: LD_INT 40
24365: PUSH
24366: LD_INT 50
24368: PUSH
24369: LD_INT 60
24371: PUSH
24372: LD_INT 70
24374: PUSH
24375: LD_INT 80
24377: PUSH
24378: LD_INT 90
24380: PUSH
24381: LD_INT 100
24383: PUSH
24384: LD_INT 110
24386: PUSH
24387: LD_INT 120
24389: PUSH
24390: LD_INT 130
24392: PUSH
24393: LD_INT 140
24395: PUSH
24396: LD_INT 150
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 1
24418: PPUSH
24419: LD_INT 15
24421: PPUSH
24422: CALL_OW 12
24426: ARRAY
24427: ST_TO_ADDR
// if ValidHex ( x , y ) then
24428: LD_VAR 0 3
24432: PPUSH
24433: LD_VAR 0 4
24437: PPUSH
24438: CALL_OW 488
24442: IFFALSE 24465
// begin result := [ x , y ] ;
24444: LD_ADDR_VAR 0 1
24448: PUSH
24449: LD_VAR 0 3
24453: PUSH
24454: LD_VAR 0 4
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: ST_TO_ADDR
// break ;
24463: GO 24467
// end ; end ;
24465: GO 24267
24467: POP
24468: POP
// if result then
24469: LD_VAR 0 1
24473: IFFALSE 24533
// begin ToLua ( playSibBomb() ) ;
24475: LD_STRING playSibBomb()
24477: PPUSH
24478: CALL_OW 559
// wait ( 0 0$14 ) ;
24482: LD_INT 490
24484: PPUSH
24485: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24489: LD_VAR 0 1
24493: PUSH
24494: LD_INT 1
24496: ARRAY
24497: PPUSH
24498: LD_VAR 0 1
24502: PUSH
24503: LD_INT 2
24505: ARRAY
24506: PPUSH
24507: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24511: LD_VAR 0 1
24515: PUSH
24516: LD_INT 1
24518: ARRAY
24519: PPUSH
24520: LD_VAR 0 1
24524: PUSH
24525: LD_INT 2
24527: ARRAY
24528: PPUSH
24529: CALL_OW 429
// end ; end ;
24533: LD_VAR 0 1
24537: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24538: LD_EXP 36
24542: PUSH
24543: LD_EXP 58
24547: AND
24548: IFFALSE 24560
24550: GO 24552
24552: DISABLE
// YouLost (  ) ;
24553: LD_STRING 
24555: PPUSH
24556: CALL_OW 104
24560: END
// every 0 0$1 trigger StreamModeActive and sFog do
24561: LD_EXP 36
24565: PUSH
24566: LD_EXP 57
24570: AND
24571: IFFALSE 24585
24573: GO 24575
24575: DISABLE
// FogOff ( your_side ) ;
24576: LD_OWVAR 2
24580: PPUSH
24581: CALL_OW 344
24585: END
// every 0 0$1 trigger StreamModeActive and sSun do
24586: LD_EXP 36
24590: PUSH
24591: LD_EXP 59
24595: AND
24596: IFFALSE 24624
24598: GO 24600
24600: DISABLE
// begin solar_recharge_percent := 0 ;
24601: LD_ADDR_OWVAR 79
24605: PUSH
24606: LD_INT 0
24608: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24609: LD_INT 10500
24611: PPUSH
24612: CALL_OW 67
// solar_recharge_percent := 100 ;
24616: LD_ADDR_OWVAR 79
24620: PUSH
24621: LD_INT 100
24623: ST_TO_ADDR
// end ;
24624: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24625: LD_EXP 36
24629: PUSH
24630: LD_EXP 60
24634: AND
24635: IFFALSE 24874
24637: GO 24639
24639: DISABLE
24640: LD_INT 0
24642: PPUSH
24643: PPUSH
24644: PPUSH
// begin tmp := [ ] ;
24645: LD_ADDR_VAR 0 3
24649: PUSH
24650: EMPTY
24651: ST_TO_ADDR
// for i := 1 to 6 do
24652: LD_ADDR_VAR 0 1
24656: PUSH
24657: DOUBLE
24658: LD_INT 1
24660: DEC
24661: ST_TO_ADDR
24662: LD_INT 6
24664: PUSH
24665: FOR_TO
24666: IFFALSE 24771
// begin uc_nation := nation_nature ;
24668: LD_ADDR_OWVAR 21
24672: PUSH
24673: LD_INT 0
24675: ST_TO_ADDR
// uc_side := 0 ;
24676: LD_ADDR_OWVAR 20
24680: PUSH
24681: LD_INT 0
24683: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24684: LD_ADDR_OWVAR 29
24688: PUSH
24689: LD_INT 12
24691: PUSH
24692: LD_INT 12
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: ST_TO_ADDR
// hc_agressivity := 20 ;
24699: LD_ADDR_OWVAR 35
24703: PUSH
24704: LD_INT 20
24706: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24707: LD_ADDR_OWVAR 28
24711: PUSH
24712: LD_INT 17
24714: ST_TO_ADDR
// hc_gallery :=  ;
24715: LD_ADDR_OWVAR 33
24719: PUSH
24720: LD_STRING 
24722: ST_TO_ADDR
// hc_name :=  ;
24723: LD_ADDR_OWVAR 26
24727: PUSH
24728: LD_STRING 
24730: ST_TO_ADDR
// un := CreateHuman ;
24731: LD_ADDR_VAR 0 2
24735: PUSH
24736: CALL_OW 44
24740: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24741: LD_VAR 0 2
24745: PPUSH
24746: LD_INT 1
24748: PPUSH
24749: CALL_OW 51
// tmp := tmp ^ un ;
24753: LD_ADDR_VAR 0 3
24757: PUSH
24758: LD_VAR 0 3
24762: PUSH
24763: LD_VAR 0 2
24767: ADD
24768: ST_TO_ADDR
// end ;
24769: GO 24665
24771: POP
24772: POP
// repeat wait ( 0 0$1 ) ;
24773: LD_INT 35
24775: PPUSH
24776: CALL_OW 67
// for un in tmp do
24780: LD_ADDR_VAR 0 2
24784: PUSH
24785: LD_VAR 0 3
24789: PUSH
24790: FOR_IN
24791: IFFALSE 24865
// begin if IsDead ( un ) then
24793: LD_VAR 0 2
24797: PPUSH
24798: CALL_OW 301
24802: IFFALSE 24822
// begin tmp := tmp diff un ;
24804: LD_ADDR_VAR 0 3
24808: PUSH
24809: LD_VAR 0 3
24813: PUSH
24814: LD_VAR 0 2
24818: DIFF
24819: ST_TO_ADDR
// continue ;
24820: GO 24790
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24822: LD_VAR 0 2
24826: PPUSH
24827: LD_INT 3
24829: PUSH
24830: LD_INT 22
24832: PUSH
24833: LD_INT 0
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PPUSH
24844: CALL_OW 69
24848: PPUSH
24849: LD_VAR 0 2
24853: PPUSH
24854: CALL_OW 74
24858: PPUSH
24859: CALL_OW 115
// end ;
24863: GO 24790
24865: POP
24866: POP
// until not tmp ;
24867: LD_VAR 0 3
24871: NOT
24872: IFFALSE 24773
// end ;
24874: PPOPN 3
24876: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24877: LD_EXP 36
24881: PUSH
24882: LD_EXP 61
24886: AND
24887: IFFALSE 24941
24889: GO 24891
24891: DISABLE
// begin ToLua ( displayTroll(); ) ;
24892: LD_STRING displayTroll();
24894: PPUSH
24895: CALL_OW 559
// wait ( 3 3$00 ) ;
24899: LD_INT 6300
24901: PPUSH
24902: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24906: LD_STRING hideTroll();
24908: PPUSH
24909: CALL_OW 559
// wait ( 1 1$00 ) ;
24913: LD_INT 2100
24915: PPUSH
24916: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24920: LD_STRING displayTroll();
24922: PPUSH
24923: CALL_OW 559
// wait ( 1 1$00 ) ;
24927: LD_INT 2100
24929: PPUSH
24930: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24934: LD_STRING hideTroll();
24936: PPUSH
24937: CALL_OW 559
// end ;
24941: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24942: LD_EXP 36
24946: PUSH
24947: LD_EXP 62
24951: AND
24952: IFFALSE 25015
24954: GO 24956
24956: DISABLE
24957: LD_INT 0
24959: PPUSH
// begin p := 0 ;
24960: LD_ADDR_VAR 0 1
24964: PUSH
24965: LD_INT 0
24967: ST_TO_ADDR
// repeat game_speed := 1 ;
24968: LD_ADDR_OWVAR 65
24972: PUSH
24973: LD_INT 1
24975: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24976: LD_INT 35
24978: PPUSH
24979: CALL_OW 67
// p := p + 1 ;
24983: LD_ADDR_VAR 0 1
24987: PUSH
24988: LD_VAR 0 1
24992: PUSH
24993: LD_INT 1
24995: PLUS
24996: ST_TO_ADDR
// until p >= 60 ;
24997: LD_VAR 0 1
25001: PUSH
25002: LD_INT 60
25004: GREATEREQUAL
25005: IFFALSE 24968
// game_speed := 4 ;
25007: LD_ADDR_OWVAR 65
25011: PUSH
25012: LD_INT 4
25014: ST_TO_ADDR
// end ;
25015: PPOPN 1
25017: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25018: LD_EXP 36
25022: PUSH
25023: LD_EXP 63
25027: AND
25028: IFFALSE 25174
25030: GO 25032
25032: DISABLE
25033: LD_INT 0
25035: PPUSH
25036: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25037: LD_ADDR_VAR 0 1
25041: PUSH
25042: LD_INT 22
25044: PUSH
25045: LD_OWVAR 2
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 2
25056: PUSH
25057: LD_INT 30
25059: PUSH
25060: LD_INT 0
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: LD_INT 30
25069: PUSH
25070: LD_INT 1
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: LIST
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PPUSH
25086: CALL_OW 69
25090: ST_TO_ADDR
// if not depot then
25091: LD_VAR 0 1
25095: NOT
25096: IFFALSE 25100
// exit ;
25098: GO 25174
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25100: LD_ADDR_VAR 0 2
25104: PUSH
25105: LD_VAR 0 1
25109: PUSH
25110: LD_INT 1
25112: PPUSH
25113: LD_VAR 0 1
25117: PPUSH
25118: CALL_OW 12
25122: ARRAY
25123: PPUSH
25124: CALL_OW 274
25128: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25129: LD_VAR 0 2
25133: PPUSH
25134: LD_INT 1
25136: PPUSH
25137: LD_INT 0
25139: PPUSH
25140: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25144: LD_VAR 0 2
25148: PPUSH
25149: LD_INT 2
25151: PPUSH
25152: LD_INT 0
25154: PPUSH
25155: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25159: LD_VAR 0 2
25163: PPUSH
25164: LD_INT 3
25166: PPUSH
25167: LD_INT 0
25169: PPUSH
25170: CALL_OW 277
// end ;
25174: PPOPN 2
25176: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25177: LD_EXP 36
25181: PUSH
25182: LD_EXP 64
25186: AND
25187: IFFALSE 25284
25189: GO 25191
25191: DISABLE
25192: LD_INT 0
25194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25195: LD_ADDR_VAR 0 1
25199: PUSH
25200: LD_INT 22
25202: PUSH
25203: LD_OWVAR 2
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 21
25214: PUSH
25215: LD_INT 1
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 3
25224: PUSH
25225: LD_INT 23
25227: PUSH
25228: LD_INT 0
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: LIST
25243: PPUSH
25244: CALL_OW 69
25248: ST_TO_ADDR
// if not tmp then
25249: LD_VAR 0 1
25253: NOT
25254: IFFALSE 25258
// exit ;
25256: GO 25284
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25258: LD_VAR 0 1
25262: PUSH
25263: LD_INT 1
25265: PPUSH
25266: LD_VAR 0 1
25270: PPUSH
25271: CALL_OW 12
25275: ARRAY
25276: PPUSH
25277: LD_INT 200
25279: PPUSH
25280: CALL_OW 234
// end ;
25284: PPOPN 1
25286: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25287: LD_EXP 36
25291: PUSH
25292: LD_EXP 65
25296: AND
25297: IFFALSE 25376
25299: GO 25301
25301: DISABLE
25302: LD_INT 0
25304: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25305: LD_ADDR_VAR 0 1
25309: PUSH
25310: LD_INT 22
25312: PUSH
25313: LD_OWVAR 2
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 21
25324: PUSH
25325: LD_INT 2
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PPUSH
25336: CALL_OW 69
25340: ST_TO_ADDR
// if not tmp then
25341: LD_VAR 0 1
25345: NOT
25346: IFFALSE 25350
// exit ;
25348: GO 25376
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25350: LD_VAR 0 1
25354: PUSH
25355: LD_INT 1
25357: PPUSH
25358: LD_VAR 0 1
25362: PPUSH
25363: CALL_OW 12
25367: ARRAY
25368: PPUSH
25369: LD_INT 60
25371: PPUSH
25372: CALL_OW 234
// end ;
25376: PPOPN 1
25378: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25379: LD_EXP 36
25383: PUSH
25384: LD_EXP 66
25388: AND
25389: IFFALSE 25488
25391: GO 25393
25393: DISABLE
25394: LD_INT 0
25396: PPUSH
25397: PPUSH
// begin enable ;
25398: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25399: LD_ADDR_VAR 0 1
25403: PUSH
25404: LD_INT 22
25406: PUSH
25407: LD_OWVAR 2
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 61
25418: PUSH
25419: EMPTY
25420: LIST
25421: PUSH
25422: LD_INT 33
25424: PUSH
25425: LD_INT 2
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: LIST
25436: PPUSH
25437: CALL_OW 69
25441: ST_TO_ADDR
// if not tmp then
25442: LD_VAR 0 1
25446: NOT
25447: IFFALSE 25451
// exit ;
25449: GO 25488
// for i in tmp do
25451: LD_ADDR_VAR 0 2
25455: PUSH
25456: LD_VAR 0 1
25460: PUSH
25461: FOR_IN
25462: IFFALSE 25486
// if IsControledBy ( i ) then
25464: LD_VAR 0 2
25468: PPUSH
25469: CALL_OW 312
25473: IFFALSE 25484
// ComUnlink ( i ) ;
25475: LD_VAR 0 2
25479: PPUSH
25480: CALL_OW 136
25484: GO 25461
25486: POP
25487: POP
// end ;
25488: PPOPN 2
25490: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25491: LD_EXP 36
25495: PUSH
25496: LD_EXP 67
25500: AND
25501: IFFALSE 25641
25503: GO 25505
25505: DISABLE
25506: LD_INT 0
25508: PPUSH
25509: PPUSH
// begin ToLua ( displayPowell(); ) ;
25510: LD_STRING displayPowell();
25512: PPUSH
25513: CALL_OW 559
// uc_side := 0 ;
25517: LD_ADDR_OWVAR 20
25521: PUSH
25522: LD_INT 0
25524: ST_TO_ADDR
// uc_nation := 2 ;
25525: LD_ADDR_OWVAR 21
25529: PUSH
25530: LD_INT 2
25532: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25533: LD_ADDR_OWVAR 37
25537: PUSH
25538: LD_INT 14
25540: ST_TO_ADDR
// vc_engine := engine_siberite ;
25541: LD_ADDR_OWVAR 39
25545: PUSH
25546: LD_INT 3
25548: ST_TO_ADDR
// vc_control := control_apeman ;
25549: LD_ADDR_OWVAR 38
25553: PUSH
25554: LD_INT 5
25556: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25557: LD_ADDR_OWVAR 40
25561: PUSH
25562: LD_INT 29
25564: ST_TO_ADDR
// un := CreateVehicle ;
25565: LD_ADDR_VAR 0 2
25569: PUSH
25570: CALL_OW 45
25574: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25575: LD_VAR 0 2
25579: PPUSH
25580: LD_INT 1
25582: PPUSH
25583: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25587: LD_INT 35
25589: PPUSH
25590: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25594: LD_VAR 0 2
25598: PPUSH
25599: LD_INT 22
25601: PUSH
25602: LD_OWVAR 2
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PPUSH
25611: CALL_OW 69
25615: PPUSH
25616: LD_VAR 0 2
25620: PPUSH
25621: CALL_OW 74
25625: PPUSH
25626: CALL_OW 115
// until IsDead ( un ) ;
25630: LD_VAR 0 2
25634: PPUSH
25635: CALL_OW 301
25639: IFFALSE 25587
// end ;
25641: PPOPN 2
25643: END
// every 0 0$1 trigger StreamModeActive and sStu do
25644: LD_EXP 36
25648: PUSH
25649: LD_EXP 75
25653: AND
25654: IFFALSE 25670
25656: GO 25658
25658: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25659: LD_STRING displayStucuk();
25661: PPUSH
25662: CALL_OW 559
// ResetFog ;
25666: CALL_OW 335
// end ;
25670: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25671: LD_EXP 36
25675: PUSH
25676: LD_EXP 68
25680: AND
25681: IFFALSE 25822
25683: GO 25685
25685: DISABLE
25686: LD_INT 0
25688: PPUSH
25689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25690: LD_ADDR_VAR 0 2
25694: PUSH
25695: LD_INT 22
25697: PUSH
25698: LD_OWVAR 2
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 21
25709: PUSH
25710: LD_INT 1
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PPUSH
25721: CALL_OW 69
25725: ST_TO_ADDR
// if not tmp then
25726: LD_VAR 0 2
25730: NOT
25731: IFFALSE 25735
// exit ;
25733: GO 25822
// un := tmp [ rand ( 1 , tmp ) ] ;
25735: LD_ADDR_VAR 0 1
25739: PUSH
25740: LD_VAR 0 2
25744: PUSH
25745: LD_INT 1
25747: PPUSH
25748: LD_VAR 0 2
25752: PPUSH
25753: CALL_OW 12
25757: ARRAY
25758: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25759: LD_VAR 0 1
25763: PPUSH
25764: LD_INT 0
25766: PPUSH
25767: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25771: LD_VAR 0 1
25775: PPUSH
25776: LD_OWVAR 3
25780: PUSH
25781: LD_VAR 0 1
25785: DIFF
25786: PPUSH
25787: LD_VAR 0 1
25791: PPUSH
25792: CALL_OW 74
25796: PPUSH
25797: CALL_OW 115
// wait ( 0 0$20 ) ;
25801: LD_INT 700
25803: PPUSH
25804: CALL_OW 67
// SetSide ( un , your_side ) ;
25808: LD_VAR 0 1
25812: PPUSH
25813: LD_OWVAR 2
25817: PPUSH
25818: CALL_OW 235
// end ;
25822: PPOPN 2
25824: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25825: LD_EXP 36
25829: PUSH
25830: LD_EXP 69
25834: AND
25835: IFFALSE 25941
25837: GO 25839
25839: DISABLE
25840: LD_INT 0
25842: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25843: LD_ADDR_VAR 0 1
25847: PUSH
25848: LD_INT 22
25850: PUSH
25851: LD_OWVAR 2
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 2
25862: PUSH
25863: LD_INT 30
25865: PUSH
25866: LD_INT 0
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: LD_INT 30
25875: PUSH
25876: LD_INT 1
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: LIST
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PPUSH
25892: CALL_OW 69
25896: ST_TO_ADDR
// if not depot then
25897: LD_VAR 0 1
25901: NOT
25902: IFFALSE 25906
// exit ;
25904: GO 25941
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25906: LD_VAR 0 1
25910: PUSH
25911: LD_INT 1
25913: ARRAY
25914: PPUSH
25915: CALL_OW 250
25919: PPUSH
25920: LD_VAR 0 1
25924: PUSH
25925: LD_INT 1
25927: ARRAY
25928: PPUSH
25929: CALL_OW 251
25933: PPUSH
25934: LD_INT 70
25936: PPUSH
25937: CALL_OW 495
// end ;
25941: PPOPN 1
25943: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25944: LD_EXP 36
25948: PUSH
25949: LD_EXP 70
25953: AND
25954: IFFALSE 26165
25956: GO 25958
25958: DISABLE
25959: LD_INT 0
25961: PPUSH
25962: PPUSH
25963: PPUSH
25964: PPUSH
25965: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25966: LD_ADDR_VAR 0 5
25970: PUSH
25971: LD_INT 22
25973: PUSH
25974: LD_OWVAR 2
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 21
25985: PUSH
25986: LD_INT 1
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PPUSH
25997: CALL_OW 69
26001: ST_TO_ADDR
// if not tmp then
26002: LD_VAR 0 5
26006: NOT
26007: IFFALSE 26011
// exit ;
26009: GO 26165
// for i in tmp do
26011: LD_ADDR_VAR 0 1
26015: PUSH
26016: LD_VAR 0 5
26020: PUSH
26021: FOR_IN
26022: IFFALSE 26163
// begin d := rand ( 0 , 5 ) ;
26024: LD_ADDR_VAR 0 4
26028: PUSH
26029: LD_INT 0
26031: PPUSH
26032: LD_INT 5
26034: PPUSH
26035: CALL_OW 12
26039: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26040: LD_ADDR_VAR 0 2
26044: PUSH
26045: LD_VAR 0 1
26049: PPUSH
26050: CALL_OW 250
26054: PPUSH
26055: LD_VAR 0 4
26059: PPUSH
26060: LD_INT 3
26062: PPUSH
26063: LD_INT 12
26065: PPUSH
26066: CALL_OW 12
26070: PPUSH
26071: CALL_OW 272
26075: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26076: LD_ADDR_VAR 0 3
26080: PUSH
26081: LD_VAR 0 1
26085: PPUSH
26086: CALL_OW 251
26090: PPUSH
26091: LD_VAR 0 4
26095: PPUSH
26096: LD_INT 3
26098: PPUSH
26099: LD_INT 12
26101: PPUSH
26102: CALL_OW 12
26106: PPUSH
26107: CALL_OW 273
26111: ST_TO_ADDR
// if ValidHex ( x , y ) then
26112: LD_VAR 0 2
26116: PPUSH
26117: LD_VAR 0 3
26121: PPUSH
26122: CALL_OW 488
26126: IFFALSE 26161
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26128: LD_VAR 0 1
26132: PPUSH
26133: LD_VAR 0 2
26137: PPUSH
26138: LD_VAR 0 3
26142: PPUSH
26143: LD_INT 3
26145: PPUSH
26146: LD_INT 6
26148: PPUSH
26149: CALL_OW 12
26153: PPUSH
26154: LD_INT 1
26156: PPUSH
26157: CALL_OW 483
// end ;
26161: GO 26021
26163: POP
26164: POP
// end ;
26165: PPOPN 5
26167: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26168: LD_EXP 36
26172: PUSH
26173: LD_EXP 71
26177: AND
26178: IFFALSE 26272
26180: GO 26182
26182: DISABLE
26183: LD_INT 0
26185: PPUSH
26186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26187: LD_ADDR_VAR 0 2
26191: PUSH
26192: LD_INT 22
26194: PUSH
26195: LD_OWVAR 2
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 32
26206: PUSH
26207: LD_INT 1
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 21
26216: PUSH
26217: LD_INT 2
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: LIST
26228: PPUSH
26229: CALL_OW 69
26233: ST_TO_ADDR
// if not tmp then
26234: LD_VAR 0 2
26238: NOT
26239: IFFALSE 26243
// exit ;
26241: GO 26272
// for i in tmp do
26243: LD_ADDR_VAR 0 1
26247: PUSH
26248: LD_VAR 0 2
26252: PUSH
26253: FOR_IN
26254: IFFALSE 26270
// SetFuel ( i , 0 ) ;
26256: LD_VAR 0 1
26260: PPUSH
26261: LD_INT 0
26263: PPUSH
26264: CALL_OW 240
26268: GO 26253
26270: POP
26271: POP
// end ;
26272: PPOPN 2
26274: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26275: LD_EXP 36
26279: PUSH
26280: LD_EXP 72
26284: AND
26285: IFFALSE 26351
26287: GO 26289
26289: DISABLE
26290: LD_INT 0
26292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26293: LD_ADDR_VAR 0 1
26297: PUSH
26298: LD_INT 22
26300: PUSH
26301: LD_OWVAR 2
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 30
26312: PUSH
26313: LD_INT 29
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: PPUSH
26324: CALL_OW 69
26328: ST_TO_ADDR
// if not tmp then
26329: LD_VAR 0 1
26333: NOT
26334: IFFALSE 26338
// exit ;
26336: GO 26351
// DestroyUnit ( tmp [ 1 ] ) ;
26338: LD_VAR 0 1
26342: PUSH
26343: LD_INT 1
26345: ARRAY
26346: PPUSH
26347: CALL_OW 65
// end ;
26351: PPOPN 1
26353: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26354: LD_EXP 36
26358: PUSH
26359: LD_EXP 74
26363: AND
26364: IFFALSE 26493
26366: GO 26368
26368: DISABLE
26369: LD_INT 0
26371: PPUSH
// begin uc_side := 0 ;
26372: LD_ADDR_OWVAR 20
26376: PUSH
26377: LD_INT 0
26379: ST_TO_ADDR
// uc_nation := nation_arabian ;
26380: LD_ADDR_OWVAR 21
26384: PUSH
26385: LD_INT 2
26387: ST_TO_ADDR
// hc_gallery :=  ;
26388: LD_ADDR_OWVAR 33
26392: PUSH
26393: LD_STRING 
26395: ST_TO_ADDR
// hc_name :=  ;
26396: LD_ADDR_OWVAR 26
26400: PUSH
26401: LD_STRING 
26403: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26404: LD_INT 1
26406: PPUSH
26407: LD_INT 11
26409: PPUSH
26410: LD_INT 10
26412: PPUSH
26413: CALL_OW 380
// un := CreateHuman ;
26417: LD_ADDR_VAR 0 1
26421: PUSH
26422: CALL_OW 44
26426: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26427: LD_VAR 0 1
26431: PPUSH
26432: LD_INT 1
26434: PPUSH
26435: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26439: LD_INT 35
26441: PPUSH
26442: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26446: LD_VAR 0 1
26450: PPUSH
26451: LD_INT 22
26453: PUSH
26454: LD_OWVAR 2
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PPUSH
26463: CALL_OW 69
26467: PPUSH
26468: LD_VAR 0 1
26472: PPUSH
26473: CALL_OW 74
26477: PPUSH
26478: CALL_OW 115
// until IsDead ( un ) ;
26482: LD_VAR 0 1
26486: PPUSH
26487: CALL_OW 301
26491: IFFALSE 26439
// end ;
26493: PPOPN 1
26495: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26496: LD_EXP 36
26500: PUSH
26501: LD_EXP 76
26505: AND
26506: IFFALSE 26518
26508: GO 26510
26510: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26511: LD_STRING earthquake(getX(game), 0, 32)
26513: PPUSH
26514: CALL_OW 559
26518: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26519: LD_EXP 36
26523: PUSH
26524: LD_EXP 77
26528: AND
26529: IFFALSE 26620
26531: GO 26533
26533: DISABLE
26534: LD_INT 0
26536: PPUSH
// begin enable ;
26537: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26538: LD_ADDR_VAR 0 1
26542: PUSH
26543: LD_INT 22
26545: PUSH
26546: LD_OWVAR 2
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 21
26557: PUSH
26558: LD_INT 2
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 33
26567: PUSH
26568: LD_INT 3
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: LIST
26579: PPUSH
26580: CALL_OW 69
26584: ST_TO_ADDR
// if not tmp then
26585: LD_VAR 0 1
26589: NOT
26590: IFFALSE 26594
// exit ;
26592: GO 26620
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26594: LD_VAR 0 1
26598: PUSH
26599: LD_INT 1
26601: PPUSH
26602: LD_VAR 0 1
26606: PPUSH
26607: CALL_OW 12
26611: ARRAY
26612: PPUSH
26613: LD_INT 1
26615: PPUSH
26616: CALL_OW 234
// end ;
26620: PPOPN 1
26622: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26623: LD_EXP 36
26627: PUSH
26628: LD_EXP 78
26632: AND
26633: IFFALSE 26774
26635: GO 26637
26637: DISABLE
26638: LD_INT 0
26640: PPUSH
26641: PPUSH
26642: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26643: LD_ADDR_VAR 0 3
26647: PUSH
26648: LD_INT 22
26650: PUSH
26651: LD_OWVAR 2
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 25
26662: PUSH
26663: LD_INT 1
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PPUSH
26674: CALL_OW 69
26678: ST_TO_ADDR
// if not tmp then
26679: LD_VAR 0 3
26683: NOT
26684: IFFALSE 26688
// exit ;
26686: GO 26774
// un := tmp [ rand ( 1 , tmp ) ] ;
26688: LD_ADDR_VAR 0 2
26692: PUSH
26693: LD_VAR 0 3
26697: PUSH
26698: LD_INT 1
26700: PPUSH
26701: LD_VAR 0 3
26705: PPUSH
26706: CALL_OW 12
26710: ARRAY
26711: ST_TO_ADDR
// if Crawls ( un ) then
26712: LD_VAR 0 2
26716: PPUSH
26717: CALL_OW 318
26721: IFFALSE 26732
// ComWalk ( un ) ;
26723: LD_VAR 0 2
26727: PPUSH
26728: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26732: LD_VAR 0 2
26736: PPUSH
26737: LD_INT 9
26739: PPUSH
26740: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26744: LD_INT 28
26746: PPUSH
26747: LD_OWVAR 2
26751: PPUSH
26752: LD_INT 2
26754: PPUSH
26755: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26759: LD_INT 29
26761: PPUSH
26762: LD_OWVAR 2
26766: PPUSH
26767: LD_INT 2
26769: PPUSH
26770: CALL_OW 322
// end ;
26774: PPOPN 3
26776: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26777: LD_EXP 36
26781: PUSH
26782: LD_EXP 79
26786: AND
26787: IFFALSE 26898
26789: GO 26791
26791: DISABLE
26792: LD_INT 0
26794: PPUSH
26795: PPUSH
26796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26797: LD_ADDR_VAR 0 3
26801: PUSH
26802: LD_INT 22
26804: PUSH
26805: LD_OWVAR 2
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 25
26816: PUSH
26817: LD_INT 1
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PPUSH
26828: CALL_OW 69
26832: ST_TO_ADDR
// if not tmp then
26833: LD_VAR 0 3
26837: NOT
26838: IFFALSE 26842
// exit ;
26840: GO 26898
// un := tmp [ rand ( 1 , tmp ) ] ;
26842: LD_ADDR_VAR 0 2
26846: PUSH
26847: LD_VAR 0 3
26851: PUSH
26852: LD_INT 1
26854: PPUSH
26855: LD_VAR 0 3
26859: PPUSH
26860: CALL_OW 12
26864: ARRAY
26865: ST_TO_ADDR
// if Crawls ( un ) then
26866: LD_VAR 0 2
26870: PPUSH
26871: CALL_OW 318
26875: IFFALSE 26886
// ComWalk ( un ) ;
26877: LD_VAR 0 2
26881: PPUSH
26882: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26886: LD_VAR 0 2
26890: PPUSH
26891: LD_INT 8
26893: PPUSH
26894: CALL_OW 336
// end ;
26898: PPOPN 3
26900: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26901: LD_EXP 36
26905: PUSH
26906: LD_EXP 80
26910: AND
26911: IFFALSE 27055
26913: GO 26915
26915: DISABLE
26916: LD_INT 0
26918: PPUSH
26919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26920: LD_ADDR_VAR 0 2
26924: PUSH
26925: LD_INT 22
26927: PUSH
26928: LD_OWVAR 2
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 21
26939: PUSH
26940: LD_INT 2
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 2
26949: PUSH
26950: LD_INT 34
26952: PUSH
26953: LD_INT 12
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 34
26962: PUSH
26963: LD_INT 51
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 34
26972: PUSH
26973: LD_INT 32
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: LIST
26990: PPUSH
26991: CALL_OW 69
26995: ST_TO_ADDR
// if not tmp then
26996: LD_VAR 0 2
27000: NOT
27001: IFFALSE 27005
// exit ;
27003: GO 27055
// for i in tmp do
27005: LD_ADDR_VAR 0 1
27009: PUSH
27010: LD_VAR 0 2
27014: PUSH
27015: FOR_IN
27016: IFFALSE 27053
// if GetCargo ( i , mat_artifact ) = 0 then
27018: LD_VAR 0 1
27022: PPUSH
27023: LD_INT 4
27025: PPUSH
27026: CALL_OW 289
27030: PUSH
27031: LD_INT 0
27033: EQUAL
27034: IFFALSE 27051
// SetCargo ( i , mat_siberit , 100 ) ;
27036: LD_VAR 0 1
27040: PPUSH
27041: LD_INT 3
27043: PPUSH
27044: LD_INT 100
27046: PPUSH
27047: CALL_OW 290
27051: GO 27015
27053: POP
27054: POP
// end ;
27055: PPOPN 2
27057: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27058: LD_EXP 36
27062: PUSH
27063: LD_EXP 81
27067: AND
27068: IFFALSE 27251
27070: GO 27072
27072: DISABLE
27073: LD_INT 0
27075: PPUSH
27076: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27077: LD_ADDR_VAR 0 2
27081: PUSH
27082: LD_INT 22
27084: PUSH
27085: LD_OWVAR 2
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PPUSH
27094: CALL_OW 69
27098: ST_TO_ADDR
// if not tmp then
27099: LD_VAR 0 2
27103: NOT
27104: IFFALSE 27108
// exit ;
27106: GO 27251
// for i := 1 to 2 do
27108: LD_ADDR_VAR 0 1
27112: PUSH
27113: DOUBLE
27114: LD_INT 1
27116: DEC
27117: ST_TO_ADDR
27118: LD_INT 2
27120: PUSH
27121: FOR_TO
27122: IFFALSE 27249
// begin uc_side := your_side ;
27124: LD_ADDR_OWVAR 20
27128: PUSH
27129: LD_OWVAR 2
27133: ST_TO_ADDR
// uc_nation := nation_american ;
27134: LD_ADDR_OWVAR 21
27138: PUSH
27139: LD_INT 1
27141: ST_TO_ADDR
// vc_chassis := us_morphling ;
27142: LD_ADDR_OWVAR 37
27146: PUSH
27147: LD_INT 5
27149: ST_TO_ADDR
// vc_engine := engine_siberite ;
27150: LD_ADDR_OWVAR 39
27154: PUSH
27155: LD_INT 3
27157: ST_TO_ADDR
// vc_control := control_computer ;
27158: LD_ADDR_OWVAR 38
27162: PUSH
27163: LD_INT 3
27165: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27166: LD_ADDR_OWVAR 40
27170: PUSH
27171: LD_INT 10
27173: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27174: LD_VAR 0 2
27178: PUSH
27179: LD_INT 1
27181: ARRAY
27182: PPUSH
27183: CALL_OW 310
27187: NOT
27188: IFFALSE 27235
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27190: CALL_OW 45
27194: PPUSH
27195: LD_VAR 0 2
27199: PUSH
27200: LD_INT 1
27202: ARRAY
27203: PPUSH
27204: CALL_OW 250
27208: PPUSH
27209: LD_VAR 0 2
27213: PUSH
27214: LD_INT 1
27216: ARRAY
27217: PPUSH
27218: CALL_OW 251
27222: PPUSH
27223: LD_INT 12
27225: PPUSH
27226: LD_INT 1
27228: PPUSH
27229: CALL_OW 50
27233: GO 27247
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27235: CALL_OW 45
27239: PPUSH
27240: LD_INT 1
27242: PPUSH
27243: CALL_OW 51
// end ;
27247: GO 27121
27249: POP
27250: POP
// end ;
27251: PPOPN 2
27253: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27254: LD_EXP 36
27258: PUSH
27259: LD_EXP 82
27263: AND
27264: IFFALSE 27486
27266: GO 27268
27268: DISABLE
27269: LD_INT 0
27271: PPUSH
27272: PPUSH
27273: PPUSH
27274: PPUSH
27275: PPUSH
27276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27277: LD_ADDR_VAR 0 6
27281: PUSH
27282: LD_INT 22
27284: PUSH
27285: LD_OWVAR 2
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 21
27296: PUSH
27297: LD_INT 1
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 3
27306: PUSH
27307: LD_INT 23
27309: PUSH
27310: LD_INT 0
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: LIST
27325: PPUSH
27326: CALL_OW 69
27330: ST_TO_ADDR
// if not tmp then
27331: LD_VAR 0 6
27335: NOT
27336: IFFALSE 27340
// exit ;
27338: GO 27486
// s1 := rand ( 1 , 4 ) ;
27340: LD_ADDR_VAR 0 2
27344: PUSH
27345: LD_INT 1
27347: PPUSH
27348: LD_INT 4
27350: PPUSH
27351: CALL_OW 12
27355: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27356: LD_ADDR_VAR 0 4
27360: PUSH
27361: LD_VAR 0 6
27365: PUSH
27366: LD_INT 1
27368: ARRAY
27369: PPUSH
27370: LD_VAR 0 2
27374: PPUSH
27375: CALL_OW 259
27379: ST_TO_ADDR
// if s1 = 1 then
27380: LD_VAR 0 2
27384: PUSH
27385: LD_INT 1
27387: EQUAL
27388: IFFALSE 27408
// s2 := rand ( 2 , 4 ) else
27390: LD_ADDR_VAR 0 3
27394: PUSH
27395: LD_INT 2
27397: PPUSH
27398: LD_INT 4
27400: PPUSH
27401: CALL_OW 12
27405: ST_TO_ADDR
27406: GO 27416
// s2 := 1 ;
27408: LD_ADDR_VAR 0 3
27412: PUSH
27413: LD_INT 1
27415: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27416: LD_ADDR_VAR 0 5
27420: PUSH
27421: LD_VAR 0 6
27425: PUSH
27426: LD_INT 1
27428: ARRAY
27429: PPUSH
27430: LD_VAR 0 3
27434: PPUSH
27435: CALL_OW 259
27439: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27440: LD_VAR 0 6
27444: PUSH
27445: LD_INT 1
27447: ARRAY
27448: PPUSH
27449: LD_VAR 0 2
27453: PPUSH
27454: LD_VAR 0 5
27458: PPUSH
27459: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27463: LD_VAR 0 6
27467: PUSH
27468: LD_INT 1
27470: ARRAY
27471: PPUSH
27472: LD_VAR 0 3
27476: PPUSH
27477: LD_VAR 0 4
27481: PPUSH
27482: CALL_OW 237
// end ;
27486: PPOPN 6
27488: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27489: LD_EXP 36
27493: PUSH
27494: LD_EXP 83
27498: AND
27499: IFFALSE 27578
27501: GO 27503
27503: DISABLE
27504: LD_INT 0
27506: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27507: LD_ADDR_VAR 0 1
27511: PUSH
27512: LD_INT 22
27514: PUSH
27515: LD_OWVAR 2
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 30
27526: PUSH
27527: LD_INT 3
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PPUSH
27538: CALL_OW 69
27542: ST_TO_ADDR
// if not tmp then
27543: LD_VAR 0 1
27547: NOT
27548: IFFALSE 27552
// exit ;
27550: GO 27578
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27552: LD_VAR 0 1
27556: PUSH
27557: LD_INT 1
27559: PPUSH
27560: LD_VAR 0 1
27564: PPUSH
27565: CALL_OW 12
27569: ARRAY
27570: PPUSH
27571: LD_INT 1
27573: PPUSH
27574: CALL_OW 234
// end ;
27578: PPOPN 1
27580: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27581: LD_EXP 36
27585: PUSH
27586: LD_EXP 84
27590: AND
27591: IFFALSE 27703
27593: GO 27595
27595: DISABLE
27596: LD_INT 0
27598: PPUSH
27599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27600: LD_ADDR_VAR 0 2
27604: PUSH
27605: LD_INT 22
27607: PUSH
27608: LD_OWVAR 2
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: LD_INT 2
27619: PUSH
27620: LD_INT 30
27622: PUSH
27623: LD_INT 27
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 30
27632: PUSH
27633: LD_INT 26
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 30
27642: PUSH
27643: LD_INT 28
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PPUSH
27660: CALL_OW 69
27664: ST_TO_ADDR
// if not tmp then
27665: LD_VAR 0 2
27669: NOT
27670: IFFALSE 27674
// exit ;
27672: GO 27703
// for i in tmp do
27674: LD_ADDR_VAR 0 1
27678: PUSH
27679: LD_VAR 0 2
27683: PUSH
27684: FOR_IN
27685: IFFALSE 27701
// SetLives ( i , 1 ) ;
27687: LD_VAR 0 1
27691: PPUSH
27692: LD_INT 1
27694: PPUSH
27695: CALL_OW 234
27699: GO 27684
27701: POP
27702: POP
// end ;
27703: PPOPN 2
27705: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27706: LD_EXP 36
27710: PUSH
27711: LD_EXP 85
27715: AND
27716: IFFALSE 28003
27718: GO 27720
27720: DISABLE
27721: LD_INT 0
27723: PPUSH
27724: PPUSH
27725: PPUSH
// begin i := rand ( 1 , 7 ) ;
27726: LD_ADDR_VAR 0 1
27730: PUSH
27731: LD_INT 1
27733: PPUSH
27734: LD_INT 7
27736: PPUSH
27737: CALL_OW 12
27741: ST_TO_ADDR
// case i of 1 :
27742: LD_VAR 0 1
27746: PUSH
27747: LD_INT 1
27749: DOUBLE
27750: EQUAL
27751: IFTRUE 27755
27753: GO 27765
27755: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27756: LD_STRING earthquake(getX(game), 0, 32)
27758: PPUSH
27759: CALL_OW 559
27763: GO 28003
27765: LD_INT 2
27767: DOUBLE
27768: EQUAL
27769: IFTRUE 27773
27771: GO 27787
27773: POP
// begin ToLua ( displayStucuk(); ) ;
27774: LD_STRING displayStucuk();
27776: PPUSH
27777: CALL_OW 559
// ResetFog ;
27781: CALL_OW 335
// end ; 3 :
27785: GO 28003
27787: LD_INT 3
27789: DOUBLE
27790: EQUAL
27791: IFTRUE 27795
27793: GO 27899
27795: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27796: LD_ADDR_VAR 0 2
27800: PUSH
27801: LD_INT 22
27803: PUSH
27804: LD_OWVAR 2
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: LD_INT 25
27815: PUSH
27816: LD_INT 1
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PPUSH
27827: CALL_OW 69
27831: ST_TO_ADDR
// if not tmp then
27832: LD_VAR 0 2
27836: NOT
27837: IFFALSE 27841
// exit ;
27839: GO 28003
// un := tmp [ rand ( 1 , tmp ) ] ;
27841: LD_ADDR_VAR 0 3
27845: PUSH
27846: LD_VAR 0 2
27850: PUSH
27851: LD_INT 1
27853: PPUSH
27854: LD_VAR 0 2
27858: PPUSH
27859: CALL_OW 12
27863: ARRAY
27864: ST_TO_ADDR
// if Crawls ( un ) then
27865: LD_VAR 0 3
27869: PPUSH
27870: CALL_OW 318
27874: IFFALSE 27885
// ComWalk ( un ) ;
27876: LD_VAR 0 3
27880: PPUSH
27881: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27885: LD_VAR 0 3
27889: PPUSH
27890: LD_INT 8
27892: PPUSH
27893: CALL_OW 336
// end ; 4 :
27897: GO 28003
27899: LD_INT 4
27901: DOUBLE
27902: EQUAL
27903: IFTRUE 27907
27905: GO 27981
27907: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27908: LD_ADDR_VAR 0 2
27912: PUSH
27913: LD_INT 22
27915: PUSH
27916: LD_OWVAR 2
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 30
27927: PUSH
27928: LD_INT 29
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PPUSH
27939: CALL_OW 69
27943: ST_TO_ADDR
// if not tmp then
27944: LD_VAR 0 2
27948: NOT
27949: IFFALSE 27953
// exit ;
27951: GO 28003
// CenterNowOnUnits ( tmp [ 1 ] ) ;
27953: LD_VAR 0 2
27957: PUSH
27958: LD_INT 1
27960: ARRAY
27961: PPUSH
27962: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
27966: LD_VAR 0 2
27970: PUSH
27971: LD_INT 1
27973: ARRAY
27974: PPUSH
27975: CALL_OW 65
// end ; 5 .. 7 :
27979: GO 28003
27981: LD_INT 5
27983: DOUBLE
27984: GREATEREQUAL
27985: IFFALSE 27993
27987: LD_INT 7
27989: DOUBLE
27990: LESSEQUAL
27991: IFTRUE 27995
27993: GO 28002
27995: POP
// StreamSibBomb ; end ;
27996: CALL 24240 0 0
28000: GO 28003
28002: POP
// end ;
28003: PPOPN 3
28005: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28006: LD_EXP 36
28010: PUSH
28011: LD_EXP 86
28015: AND
28016: IFFALSE 28172
28018: GO 28020
28020: DISABLE
28021: LD_INT 0
28023: PPUSH
28024: PPUSH
28025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28026: LD_ADDR_VAR 0 2
28030: PUSH
28031: LD_INT 81
28033: PUSH
28034: LD_OWVAR 2
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 2
28045: PUSH
28046: LD_INT 21
28048: PUSH
28049: LD_INT 1
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: LD_INT 21
28058: PUSH
28059: LD_INT 2
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: LIST
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PPUSH
28075: CALL_OW 69
28079: ST_TO_ADDR
// if not tmp then
28080: LD_VAR 0 2
28084: NOT
28085: IFFALSE 28089
// exit ;
28087: GO 28172
// p := 0 ;
28089: LD_ADDR_VAR 0 3
28093: PUSH
28094: LD_INT 0
28096: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28097: LD_INT 35
28099: PPUSH
28100: CALL_OW 67
// p := p + 1 ;
28104: LD_ADDR_VAR 0 3
28108: PUSH
28109: LD_VAR 0 3
28113: PUSH
28114: LD_INT 1
28116: PLUS
28117: ST_TO_ADDR
// for i in tmp do
28118: LD_ADDR_VAR 0 1
28122: PUSH
28123: LD_VAR 0 2
28127: PUSH
28128: FOR_IN
28129: IFFALSE 28160
// if GetLives ( i ) < 1000 then
28131: LD_VAR 0 1
28135: PPUSH
28136: CALL_OW 256
28140: PUSH
28141: LD_INT 1000
28143: LESS
28144: IFFALSE 28158
// SetLives ( i , 1000 ) ;
28146: LD_VAR 0 1
28150: PPUSH
28151: LD_INT 1000
28153: PPUSH
28154: CALL_OW 234
28158: GO 28128
28160: POP
28161: POP
// until p > 20 ;
28162: LD_VAR 0 3
28166: PUSH
28167: LD_INT 20
28169: GREATER
28170: IFFALSE 28097
// end ;
28172: PPOPN 3
28174: END
// every 0 0$1 trigger StreamModeActive and sTime do
28175: LD_EXP 36
28179: PUSH
28180: LD_EXP 87
28184: AND
28185: IFFALSE 28220
28187: GO 28189
28189: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28190: LD_INT 28
28192: PPUSH
28193: LD_OWVAR 2
28197: PPUSH
28198: LD_INT 2
28200: PPUSH
28201: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28205: LD_INT 30
28207: PPUSH
28208: LD_OWVAR 2
28212: PPUSH
28213: LD_INT 2
28215: PPUSH
28216: CALL_OW 322
// end ;
28220: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28221: LD_EXP 36
28225: PUSH
28226: LD_EXP 88
28230: AND
28231: IFFALSE 28352
28233: GO 28235
28235: DISABLE
28236: LD_INT 0
28238: PPUSH
28239: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28240: LD_ADDR_VAR 0 2
28244: PUSH
28245: LD_INT 22
28247: PUSH
28248: LD_OWVAR 2
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 21
28259: PUSH
28260: LD_INT 1
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 3
28269: PUSH
28270: LD_INT 23
28272: PUSH
28273: LD_INT 0
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: LIST
28288: PPUSH
28289: CALL_OW 69
28293: ST_TO_ADDR
// if not tmp then
28294: LD_VAR 0 2
28298: NOT
28299: IFFALSE 28303
// exit ;
28301: GO 28352
// for i in tmp do
28303: LD_ADDR_VAR 0 1
28307: PUSH
28308: LD_VAR 0 2
28312: PUSH
28313: FOR_IN
28314: IFFALSE 28350
// begin if Crawls ( i ) then
28316: LD_VAR 0 1
28320: PPUSH
28321: CALL_OW 318
28325: IFFALSE 28336
// ComWalk ( i ) ;
28327: LD_VAR 0 1
28331: PPUSH
28332: CALL_OW 138
// SetClass ( i , 2 ) ;
28336: LD_VAR 0 1
28340: PPUSH
28341: LD_INT 2
28343: PPUSH
28344: CALL_OW 336
// end ;
28348: GO 28313
28350: POP
28351: POP
// end ;
28352: PPOPN 2
28354: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28355: LD_EXP 36
28359: PUSH
28360: LD_EXP 89
28364: AND
28365: IFFALSE 28653
28367: GO 28369
28369: DISABLE
28370: LD_INT 0
28372: PPUSH
28373: PPUSH
28374: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28375: LD_OWVAR 2
28379: PPUSH
28380: LD_INT 9
28382: PPUSH
28383: LD_INT 1
28385: PPUSH
28386: LD_INT 1
28388: PPUSH
28389: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28393: LD_INT 9
28395: PPUSH
28396: LD_OWVAR 2
28400: PPUSH
28401: CALL_OW 343
// uc_side := 9 ;
28405: LD_ADDR_OWVAR 20
28409: PUSH
28410: LD_INT 9
28412: ST_TO_ADDR
// uc_nation := 2 ;
28413: LD_ADDR_OWVAR 21
28417: PUSH
28418: LD_INT 2
28420: ST_TO_ADDR
// hc_name := Dark Warrior ;
28421: LD_ADDR_OWVAR 26
28425: PUSH
28426: LD_STRING Dark Warrior
28428: ST_TO_ADDR
// hc_gallery :=  ;
28429: LD_ADDR_OWVAR 33
28433: PUSH
28434: LD_STRING 
28436: ST_TO_ADDR
// hc_noskilllimit := true ;
28437: LD_ADDR_OWVAR 76
28441: PUSH
28442: LD_INT 1
28444: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28445: LD_ADDR_OWVAR 31
28449: PUSH
28450: LD_INT 30
28452: PUSH
28453: LD_INT 30
28455: PUSH
28456: LD_INT 30
28458: PUSH
28459: LD_INT 30
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: ST_TO_ADDR
// un := CreateHuman ;
28468: LD_ADDR_VAR 0 3
28472: PUSH
28473: CALL_OW 44
28477: ST_TO_ADDR
// hc_noskilllimit := false ;
28478: LD_ADDR_OWVAR 76
28482: PUSH
28483: LD_INT 0
28485: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28486: LD_VAR 0 3
28490: PPUSH
28491: LD_INT 1
28493: PPUSH
28494: CALL_OW 51
// ToLua ( playRanger() ) ;
28498: LD_STRING playRanger()
28500: PPUSH
28501: CALL_OW 559
// p := 0 ;
28505: LD_ADDR_VAR 0 2
28509: PUSH
28510: LD_INT 0
28512: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28513: LD_INT 35
28515: PPUSH
28516: CALL_OW 67
// p := p + 1 ;
28520: LD_ADDR_VAR 0 2
28524: PUSH
28525: LD_VAR 0 2
28529: PUSH
28530: LD_INT 1
28532: PLUS
28533: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28534: LD_VAR 0 3
28538: PPUSH
28539: CALL_OW 256
28543: PUSH
28544: LD_INT 1000
28546: LESS
28547: IFFALSE 28561
// SetLives ( un , 1000 ) ;
28549: LD_VAR 0 3
28553: PPUSH
28554: LD_INT 1000
28556: PPUSH
28557: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28561: LD_VAR 0 3
28565: PPUSH
28566: LD_INT 81
28568: PUSH
28569: LD_OWVAR 2
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 91
28580: PUSH
28581: LD_VAR 0 3
28585: PUSH
28586: LD_INT 30
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: LIST
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PPUSH
28598: CALL_OW 69
28602: PPUSH
28603: LD_VAR 0 3
28607: PPUSH
28608: CALL_OW 74
28612: PPUSH
28613: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
28617: LD_VAR 0 2
28621: PUSH
28622: LD_INT 80
28624: GREATER
28625: PUSH
28626: LD_VAR 0 3
28630: PPUSH
28631: CALL_OW 301
28635: OR
28636: IFFALSE 28513
// if un then
28638: LD_VAR 0 3
28642: IFFALSE 28653
// RemoveUnit ( un ) ;
28644: LD_VAR 0 3
28648: PPUSH
28649: CALL_OW 64
// end ;
28653: PPOPN 3
28655: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
28656: LD_EXP 90
28660: IFFALSE 28776
28662: GO 28664
28664: DISABLE
28665: LD_INT 0
28667: PPUSH
28668: PPUSH
28669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28670: LD_ADDR_VAR 0 2
28674: PUSH
28675: LD_INT 81
28677: PUSH
28678: LD_OWVAR 2
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 21
28689: PUSH
28690: LD_INT 1
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PPUSH
28701: CALL_OW 69
28705: ST_TO_ADDR
// ToLua ( playComputer() ) ;
28706: LD_STRING playComputer()
28708: PPUSH
28709: CALL_OW 559
// if not tmp then
28713: LD_VAR 0 2
28717: NOT
28718: IFFALSE 28722
// exit ;
28720: GO 28776
// for i in tmp do
28722: LD_ADDR_VAR 0 1
28726: PUSH
28727: LD_VAR 0 2
28731: PUSH
28732: FOR_IN
28733: IFFALSE 28774
// for j := 1 to 4 do
28735: LD_ADDR_VAR 0 3
28739: PUSH
28740: DOUBLE
28741: LD_INT 1
28743: DEC
28744: ST_TO_ADDR
28745: LD_INT 4
28747: PUSH
28748: FOR_TO
28749: IFFALSE 28770
// SetSkill ( i , j , 10 ) ;
28751: LD_VAR 0 1
28755: PPUSH
28756: LD_VAR 0 3
28760: PPUSH
28761: LD_INT 10
28763: PPUSH
28764: CALL_OW 237
28768: GO 28748
28770: POP
28771: POP
28772: GO 28732
28774: POP
28775: POP
// end ;
28776: PPOPN 3
28778: END
// every 0 0$1 trigger s30 do var i , tmp ;
28779: LD_EXP 91
28783: IFFALSE 28852
28785: GO 28787
28787: DISABLE
28788: LD_INT 0
28790: PPUSH
28791: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28792: LD_ADDR_VAR 0 2
28796: PUSH
28797: LD_INT 22
28799: PUSH
28800: LD_OWVAR 2
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PPUSH
28809: CALL_OW 69
28813: ST_TO_ADDR
// if not tmp then
28814: LD_VAR 0 2
28818: NOT
28819: IFFALSE 28823
// exit ;
28821: GO 28852
// for i in tmp do
28823: LD_ADDR_VAR 0 1
28827: PUSH
28828: LD_VAR 0 2
28832: PUSH
28833: FOR_IN
28834: IFFALSE 28850
// SetLives ( i , 300 ) ;
28836: LD_VAR 0 1
28840: PPUSH
28841: LD_INT 300
28843: PPUSH
28844: CALL_OW 234
28848: GO 28833
28850: POP
28851: POP
// end ;
28852: PPOPN 2
28854: END
// every 0 0$1 trigger s60 do var i , tmp ;
28855: LD_EXP 92
28859: IFFALSE 28928
28861: GO 28863
28863: DISABLE
28864: LD_INT 0
28866: PPUSH
28867: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28868: LD_ADDR_VAR 0 2
28872: PUSH
28873: LD_INT 22
28875: PUSH
28876: LD_OWVAR 2
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PPUSH
28885: CALL_OW 69
28889: ST_TO_ADDR
// if not tmp then
28890: LD_VAR 0 2
28894: NOT
28895: IFFALSE 28899
// exit ;
28897: GO 28928
// for i in tmp do
28899: LD_ADDR_VAR 0 1
28903: PUSH
28904: LD_VAR 0 2
28908: PUSH
28909: FOR_IN
28910: IFFALSE 28926
// SetLives ( i , 600 ) ;
28912: LD_VAR 0 1
28916: PPUSH
28917: LD_INT 600
28919: PPUSH
28920: CALL_OW 234
28924: GO 28909
28926: POP
28927: POP
// end ;
28928: PPOPN 2
28930: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28931: LD_INT 0
28933: PPUSH
// case cmd of 301 :
28934: LD_VAR 0 1
28938: PUSH
28939: LD_INT 301
28941: DOUBLE
28942: EQUAL
28943: IFTRUE 28947
28945: GO 28979
28947: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28948: LD_VAR 0 6
28952: PPUSH
28953: LD_VAR 0 7
28957: PPUSH
28958: LD_VAR 0 8
28962: PPUSH
28963: LD_VAR 0 4
28967: PPUSH
28968: LD_VAR 0 5
28972: PPUSH
28973: CALL 30180 0 5
28977: GO 29100
28979: LD_INT 302
28981: DOUBLE
28982: EQUAL
28983: IFTRUE 28987
28985: GO 29024
28987: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28988: LD_VAR 0 6
28992: PPUSH
28993: LD_VAR 0 7
28997: PPUSH
28998: LD_VAR 0 8
29002: PPUSH
29003: LD_VAR 0 9
29007: PPUSH
29008: LD_VAR 0 4
29012: PPUSH
29013: LD_VAR 0 5
29017: PPUSH
29018: CALL 30271 0 6
29022: GO 29100
29024: LD_INT 303
29026: DOUBLE
29027: EQUAL
29028: IFTRUE 29032
29030: GO 29069
29032: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29033: LD_VAR 0 6
29037: PPUSH
29038: LD_VAR 0 7
29042: PPUSH
29043: LD_VAR 0 8
29047: PPUSH
29048: LD_VAR 0 9
29052: PPUSH
29053: LD_VAR 0 4
29057: PPUSH
29058: LD_VAR 0 5
29062: PPUSH
29063: CALL 29105 0 6
29067: GO 29100
29069: LD_INT 304
29071: DOUBLE
29072: EQUAL
29073: IFTRUE 29077
29075: GO 29099
29077: POP
// hHackTeleport ( unit , x , y ) ; end ;
29078: LD_VAR 0 2
29082: PPUSH
29083: LD_VAR 0 4
29087: PPUSH
29088: LD_VAR 0 5
29092: PPUSH
29093: CALL 30864 0 3
29097: GO 29100
29099: POP
// end ;
29100: LD_VAR 0 12
29104: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29105: LD_INT 0
29107: PPUSH
29108: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29109: LD_VAR 0 1
29113: PUSH
29114: LD_INT 1
29116: LESS
29117: PUSH
29118: LD_VAR 0 1
29122: PUSH
29123: LD_INT 3
29125: GREATER
29126: OR
29127: PUSH
29128: LD_VAR 0 5
29132: PPUSH
29133: LD_VAR 0 6
29137: PPUSH
29138: CALL_OW 428
29142: OR
29143: IFFALSE 29147
// exit ;
29145: GO 29867
// uc_side := your_side ;
29147: LD_ADDR_OWVAR 20
29151: PUSH
29152: LD_OWVAR 2
29156: ST_TO_ADDR
// uc_nation := nation ;
29157: LD_ADDR_OWVAR 21
29161: PUSH
29162: LD_VAR 0 1
29166: ST_TO_ADDR
// bc_level = 1 ;
29167: LD_ADDR_OWVAR 43
29171: PUSH
29172: LD_INT 1
29174: ST_TO_ADDR
// case btype of 1 :
29175: LD_VAR 0 2
29179: PUSH
29180: LD_INT 1
29182: DOUBLE
29183: EQUAL
29184: IFTRUE 29188
29186: GO 29199
29188: POP
// bc_type := b_depot ; 2 :
29189: LD_ADDR_OWVAR 42
29193: PUSH
29194: LD_INT 0
29196: ST_TO_ADDR
29197: GO 29811
29199: LD_INT 2
29201: DOUBLE
29202: EQUAL
29203: IFTRUE 29207
29205: GO 29218
29207: POP
// bc_type := b_warehouse ; 3 :
29208: LD_ADDR_OWVAR 42
29212: PUSH
29213: LD_INT 1
29215: ST_TO_ADDR
29216: GO 29811
29218: LD_INT 3
29220: DOUBLE
29221: EQUAL
29222: IFTRUE 29226
29224: GO 29237
29226: POP
// bc_type := b_lab ; 4 .. 9 :
29227: LD_ADDR_OWVAR 42
29231: PUSH
29232: LD_INT 6
29234: ST_TO_ADDR
29235: GO 29811
29237: LD_INT 4
29239: DOUBLE
29240: GREATEREQUAL
29241: IFFALSE 29249
29243: LD_INT 9
29245: DOUBLE
29246: LESSEQUAL
29247: IFTRUE 29251
29249: GO 29303
29251: POP
// begin bc_type := b_lab_half ;
29252: LD_ADDR_OWVAR 42
29256: PUSH
29257: LD_INT 7
29259: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29260: LD_ADDR_OWVAR 44
29264: PUSH
29265: LD_INT 10
29267: PUSH
29268: LD_INT 11
29270: PUSH
29271: LD_INT 12
29273: PUSH
29274: LD_INT 15
29276: PUSH
29277: LD_INT 14
29279: PUSH
29280: LD_INT 13
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: PUSH
29291: LD_VAR 0 2
29295: PUSH
29296: LD_INT 3
29298: MINUS
29299: ARRAY
29300: ST_TO_ADDR
// end ; 10 .. 13 :
29301: GO 29811
29303: LD_INT 10
29305: DOUBLE
29306: GREATEREQUAL
29307: IFFALSE 29315
29309: LD_INT 13
29311: DOUBLE
29312: LESSEQUAL
29313: IFTRUE 29317
29315: GO 29394
29317: POP
// begin bc_type := b_lab_full ;
29318: LD_ADDR_OWVAR 42
29322: PUSH
29323: LD_INT 8
29325: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29326: LD_ADDR_OWVAR 44
29330: PUSH
29331: LD_INT 10
29333: PUSH
29334: LD_INT 12
29336: PUSH
29337: LD_INT 14
29339: PUSH
29340: LD_INT 13
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: PUSH
29349: LD_VAR 0 2
29353: PUSH
29354: LD_INT 9
29356: MINUS
29357: ARRAY
29358: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29359: LD_ADDR_OWVAR 45
29363: PUSH
29364: LD_INT 11
29366: PUSH
29367: LD_INT 15
29369: PUSH
29370: LD_INT 12
29372: PUSH
29373: LD_INT 15
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: PUSH
29382: LD_VAR 0 2
29386: PUSH
29387: LD_INT 9
29389: MINUS
29390: ARRAY
29391: ST_TO_ADDR
// end ; 14 :
29392: GO 29811
29394: LD_INT 14
29396: DOUBLE
29397: EQUAL
29398: IFTRUE 29402
29400: GO 29413
29402: POP
// bc_type := b_workshop ; 15 :
29403: LD_ADDR_OWVAR 42
29407: PUSH
29408: LD_INT 2
29410: ST_TO_ADDR
29411: GO 29811
29413: LD_INT 15
29415: DOUBLE
29416: EQUAL
29417: IFTRUE 29421
29419: GO 29432
29421: POP
// bc_type := b_factory ; 16 :
29422: LD_ADDR_OWVAR 42
29426: PUSH
29427: LD_INT 3
29429: ST_TO_ADDR
29430: GO 29811
29432: LD_INT 16
29434: DOUBLE
29435: EQUAL
29436: IFTRUE 29440
29438: GO 29451
29440: POP
// bc_type := b_ext_gun ; 17 :
29441: LD_ADDR_OWVAR 42
29445: PUSH
29446: LD_INT 17
29448: ST_TO_ADDR
29449: GO 29811
29451: LD_INT 17
29453: DOUBLE
29454: EQUAL
29455: IFTRUE 29459
29457: GO 29487
29459: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29460: LD_ADDR_OWVAR 42
29464: PUSH
29465: LD_INT 19
29467: PUSH
29468: LD_INT 23
29470: PUSH
29471: LD_INT 19
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: LIST
29478: PUSH
29479: LD_VAR 0 1
29483: ARRAY
29484: ST_TO_ADDR
29485: GO 29811
29487: LD_INT 18
29489: DOUBLE
29490: EQUAL
29491: IFTRUE 29495
29493: GO 29506
29495: POP
// bc_type := b_ext_radar ; 19 :
29496: LD_ADDR_OWVAR 42
29500: PUSH
29501: LD_INT 20
29503: ST_TO_ADDR
29504: GO 29811
29506: LD_INT 19
29508: DOUBLE
29509: EQUAL
29510: IFTRUE 29514
29512: GO 29525
29514: POP
// bc_type := b_ext_radio ; 20 :
29515: LD_ADDR_OWVAR 42
29519: PUSH
29520: LD_INT 22
29522: ST_TO_ADDR
29523: GO 29811
29525: LD_INT 20
29527: DOUBLE
29528: EQUAL
29529: IFTRUE 29533
29531: GO 29544
29533: POP
// bc_type := b_ext_siberium ; 21 :
29534: LD_ADDR_OWVAR 42
29538: PUSH
29539: LD_INT 21
29541: ST_TO_ADDR
29542: GO 29811
29544: LD_INT 21
29546: DOUBLE
29547: EQUAL
29548: IFTRUE 29552
29550: GO 29563
29552: POP
// bc_type := b_ext_computer ; 22 :
29553: LD_ADDR_OWVAR 42
29557: PUSH
29558: LD_INT 24
29560: ST_TO_ADDR
29561: GO 29811
29563: LD_INT 22
29565: DOUBLE
29566: EQUAL
29567: IFTRUE 29571
29569: GO 29582
29571: POP
// bc_type := b_ext_track ; 23 :
29572: LD_ADDR_OWVAR 42
29576: PUSH
29577: LD_INT 16
29579: ST_TO_ADDR
29580: GO 29811
29582: LD_INT 23
29584: DOUBLE
29585: EQUAL
29586: IFTRUE 29590
29588: GO 29601
29590: POP
// bc_type := b_ext_laser ; 24 :
29591: LD_ADDR_OWVAR 42
29595: PUSH
29596: LD_INT 25
29598: ST_TO_ADDR
29599: GO 29811
29601: LD_INT 24
29603: DOUBLE
29604: EQUAL
29605: IFTRUE 29609
29607: GO 29620
29609: POP
// bc_type := b_control_tower ; 25 :
29610: LD_ADDR_OWVAR 42
29614: PUSH
29615: LD_INT 36
29617: ST_TO_ADDR
29618: GO 29811
29620: LD_INT 25
29622: DOUBLE
29623: EQUAL
29624: IFTRUE 29628
29626: GO 29639
29628: POP
// bc_type := b_breastwork ; 26 :
29629: LD_ADDR_OWVAR 42
29633: PUSH
29634: LD_INT 31
29636: ST_TO_ADDR
29637: GO 29811
29639: LD_INT 26
29641: DOUBLE
29642: EQUAL
29643: IFTRUE 29647
29645: GO 29658
29647: POP
// bc_type := b_bunker ; 27 :
29648: LD_ADDR_OWVAR 42
29652: PUSH
29653: LD_INT 32
29655: ST_TO_ADDR
29656: GO 29811
29658: LD_INT 27
29660: DOUBLE
29661: EQUAL
29662: IFTRUE 29666
29664: GO 29677
29666: POP
// bc_type := b_turret ; 28 :
29667: LD_ADDR_OWVAR 42
29671: PUSH
29672: LD_INT 33
29674: ST_TO_ADDR
29675: GO 29811
29677: LD_INT 28
29679: DOUBLE
29680: EQUAL
29681: IFTRUE 29685
29683: GO 29696
29685: POP
// bc_type := b_armoury ; 29 :
29686: LD_ADDR_OWVAR 42
29690: PUSH
29691: LD_INT 4
29693: ST_TO_ADDR
29694: GO 29811
29696: LD_INT 29
29698: DOUBLE
29699: EQUAL
29700: IFTRUE 29704
29702: GO 29715
29704: POP
// bc_type := b_barracks ; 30 :
29705: LD_ADDR_OWVAR 42
29709: PUSH
29710: LD_INT 5
29712: ST_TO_ADDR
29713: GO 29811
29715: LD_INT 30
29717: DOUBLE
29718: EQUAL
29719: IFTRUE 29723
29721: GO 29734
29723: POP
// bc_type := b_solar_power ; 31 :
29724: LD_ADDR_OWVAR 42
29728: PUSH
29729: LD_INT 27
29731: ST_TO_ADDR
29732: GO 29811
29734: LD_INT 31
29736: DOUBLE
29737: EQUAL
29738: IFTRUE 29742
29740: GO 29753
29742: POP
// bc_type := b_oil_power ; 32 :
29743: LD_ADDR_OWVAR 42
29747: PUSH
29748: LD_INT 26
29750: ST_TO_ADDR
29751: GO 29811
29753: LD_INT 32
29755: DOUBLE
29756: EQUAL
29757: IFTRUE 29761
29759: GO 29772
29761: POP
// bc_type := b_siberite_power ; 33 :
29762: LD_ADDR_OWVAR 42
29766: PUSH
29767: LD_INT 28
29769: ST_TO_ADDR
29770: GO 29811
29772: LD_INT 33
29774: DOUBLE
29775: EQUAL
29776: IFTRUE 29780
29778: GO 29791
29780: POP
// bc_type := b_oil_mine ; 34 :
29781: LD_ADDR_OWVAR 42
29785: PUSH
29786: LD_INT 29
29788: ST_TO_ADDR
29789: GO 29811
29791: LD_INT 34
29793: DOUBLE
29794: EQUAL
29795: IFTRUE 29799
29797: GO 29810
29799: POP
// bc_type := b_siberite_mine ; end ;
29800: LD_ADDR_OWVAR 42
29804: PUSH
29805: LD_INT 30
29807: ST_TO_ADDR
29808: GO 29811
29810: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29811: LD_ADDR_VAR 0 8
29815: PUSH
29816: LD_VAR 0 5
29820: PPUSH
29821: LD_VAR 0 6
29825: PPUSH
29826: LD_VAR 0 3
29830: PPUSH
29831: CALL_OW 47
29835: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29836: LD_OWVAR 42
29840: PUSH
29841: LD_INT 32
29843: PUSH
29844: LD_INT 33
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: IN
29851: IFFALSE 29867
// PlaceWeaponTurret ( b , weapon ) ;
29853: LD_VAR 0 8
29857: PPUSH
29858: LD_VAR 0 4
29862: PPUSH
29863: CALL_OW 431
// end ;
29867: LD_VAR 0 7
29871: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29872: LD_INT 0
29874: PPUSH
29875: PPUSH
29876: PPUSH
29877: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29878: LD_ADDR_VAR 0 4
29882: PUSH
29883: LD_INT 22
29885: PUSH
29886: LD_OWVAR 2
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 2
29897: PUSH
29898: LD_INT 30
29900: PUSH
29901: LD_INT 0
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 30
29910: PUSH
29911: LD_INT 1
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: LIST
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PPUSH
29927: CALL_OW 69
29931: ST_TO_ADDR
// if not tmp then
29932: LD_VAR 0 4
29936: NOT
29937: IFFALSE 29941
// exit ;
29939: GO 30000
// for i in tmp do
29941: LD_ADDR_VAR 0 2
29945: PUSH
29946: LD_VAR 0 4
29950: PUSH
29951: FOR_IN
29952: IFFALSE 29998
// for j = 1 to 3 do
29954: LD_ADDR_VAR 0 3
29958: PUSH
29959: DOUBLE
29960: LD_INT 1
29962: DEC
29963: ST_TO_ADDR
29964: LD_INT 3
29966: PUSH
29967: FOR_TO
29968: IFFALSE 29994
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29970: LD_VAR 0 2
29974: PPUSH
29975: CALL_OW 274
29979: PPUSH
29980: LD_VAR 0 3
29984: PPUSH
29985: LD_INT 99999
29987: PPUSH
29988: CALL_OW 277
29992: GO 29967
29994: POP
29995: POP
29996: GO 29951
29998: POP
29999: POP
// end ;
30000: LD_VAR 0 1
30004: RET
// export function hHackSetLevel10 ; var i , j ; begin
30005: LD_INT 0
30007: PPUSH
30008: PPUSH
30009: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30010: LD_ADDR_VAR 0 2
30014: PUSH
30015: LD_INT 21
30017: PUSH
30018: LD_INT 1
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PPUSH
30025: CALL_OW 69
30029: PUSH
30030: FOR_IN
30031: IFFALSE 30083
// if IsSelected ( i ) then
30033: LD_VAR 0 2
30037: PPUSH
30038: CALL_OW 306
30042: IFFALSE 30081
// begin for j := 1 to 4 do
30044: LD_ADDR_VAR 0 3
30048: PUSH
30049: DOUBLE
30050: LD_INT 1
30052: DEC
30053: ST_TO_ADDR
30054: LD_INT 4
30056: PUSH
30057: FOR_TO
30058: IFFALSE 30079
// SetSkill ( i , j , 10 ) ;
30060: LD_VAR 0 2
30064: PPUSH
30065: LD_VAR 0 3
30069: PPUSH
30070: LD_INT 10
30072: PPUSH
30073: CALL_OW 237
30077: GO 30057
30079: POP
30080: POP
// end ;
30081: GO 30030
30083: POP
30084: POP
// end ;
30085: LD_VAR 0 1
30089: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30090: LD_INT 0
30092: PPUSH
30093: PPUSH
30094: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30095: LD_ADDR_VAR 0 2
30099: PUSH
30100: LD_INT 22
30102: PUSH
30103: LD_OWVAR 2
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 21
30114: PUSH
30115: LD_INT 1
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PPUSH
30126: CALL_OW 69
30130: PUSH
30131: FOR_IN
30132: IFFALSE 30173
// begin for j := 1 to 4 do
30134: LD_ADDR_VAR 0 3
30138: PUSH
30139: DOUBLE
30140: LD_INT 1
30142: DEC
30143: ST_TO_ADDR
30144: LD_INT 4
30146: PUSH
30147: FOR_TO
30148: IFFALSE 30169
// SetSkill ( i , j , 10 ) ;
30150: LD_VAR 0 2
30154: PPUSH
30155: LD_VAR 0 3
30159: PPUSH
30160: LD_INT 10
30162: PPUSH
30163: CALL_OW 237
30167: GO 30147
30169: POP
30170: POP
// end ;
30171: GO 30131
30173: POP
30174: POP
// end ;
30175: LD_VAR 0 1
30179: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30180: LD_INT 0
30182: PPUSH
// uc_side := your_side ;
30183: LD_ADDR_OWVAR 20
30187: PUSH
30188: LD_OWVAR 2
30192: ST_TO_ADDR
// uc_nation := nation ;
30193: LD_ADDR_OWVAR 21
30197: PUSH
30198: LD_VAR 0 1
30202: ST_TO_ADDR
// InitHc ;
30203: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30207: LD_INT 0
30209: PPUSH
30210: LD_VAR 0 2
30214: PPUSH
30215: LD_VAR 0 3
30219: PPUSH
30220: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30224: LD_VAR 0 4
30228: PPUSH
30229: LD_VAR 0 5
30233: PPUSH
30234: CALL_OW 428
30238: PUSH
30239: LD_INT 0
30241: EQUAL
30242: IFFALSE 30266
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30244: CALL_OW 44
30248: PPUSH
30249: LD_VAR 0 4
30253: PPUSH
30254: LD_VAR 0 5
30258: PPUSH
30259: LD_INT 1
30261: PPUSH
30262: CALL_OW 48
// end ;
30266: LD_VAR 0 6
30270: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30271: LD_INT 0
30273: PPUSH
30274: PPUSH
// uc_side := your_side ;
30275: LD_ADDR_OWVAR 20
30279: PUSH
30280: LD_OWVAR 2
30284: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30285: LD_VAR 0 1
30289: PUSH
30290: LD_INT 1
30292: PUSH
30293: LD_INT 2
30295: PUSH
30296: LD_INT 3
30298: PUSH
30299: LD_INT 4
30301: PUSH
30302: LD_INT 5
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: IN
30312: IFFALSE 30324
// uc_nation := nation_american else
30314: LD_ADDR_OWVAR 21
30318: PUSH
30319: LD_INT 1
30321: ST_TO_ADDR
30322: GO 30367
// if chassis in [ 11 , 12 , 13 , 14 ] then
30324: LD_VAR 0 1
30328: PUSH
30329: LD_INT 11
30331: PUSH
30332: LD_INT 12
30334: PUSH
30335: LD_INT 13
30337: PUSH
30338: LD_INT 14
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: IN
30347: IFFALSE 30359
// uc_nation := nation_arabian else
30349: LD_ADDR_OWVAR 21
30353: PUSH
30354: LD_INT 2
30356: ST_TO_ADDR
30357: GO 30367
// uc_nation := nation_russian ;
30359: LD_ADDR_OWVAR 21
30363: PUSH
30364: LD_INT 3
30366: ST_TO_ADDR
// vc_chassis := chassis ;
30367: LD_ADDR_OWVAR 37
30371: PUSH
30372: LD_VAR 0 1
30376: ST_TO_ADDR
// vc_engine := engine ;
30377: LD_ADDR_OWVAR 39
30381: PUSH
30382: LD_VAR 0 2
30386: ST_TO_ADDR
// vc_control := control ;
30387: LD_ADDR_OWVAR 38
30391: PUSH
30392: LD_VAR 0 3
30396: ST_TO_ADDR
// vc_weapon := weapon ;
30397: LD_ADDR_OWVAR 40
30401: PUSH
30402: LD_VAR 0 4
30406: ST_TO_ADDR
// un := CreateVehicle ;
30407: LD_ADDR_VAR 0 8
30411: PUSH
30412: CALL_OW 45
30416: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30417: LD_VAR 0 8
30421: PPUSH
30422: LD_INT 0
30424: PPUSH
30425: LD_INT 5
30427: PPUSH
30428: CALL_OW 12
30432: PPUSH
30433: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30437: LD_VAR 0 8
30441: PPUSH
30442: LD_VAR 0 5
30446: PPUSH
30447: LD_VAR 0 6
30451: PPUSH
30452: LD_INT 1
30454: PPUSH
30455: CALL_OW 48
// end ;
30459: LD_VAR 0 7
30463: RET
// export hInvincible ; every 1 do
30464: GO 30466
30466: DISABLE
// hInvincible := [ ] ;
30467: LD_ADDR_EXP 93
30471: PUSH
30472: EMPTY
30473: ST_TO_ADDR
30474: END
// every 10 do var i ;
30475: GO 30477
30477: DISABLE
30478: LD_INT 0
30480: PPUSH
// begin enable ;
30481: ENABLE
// if not hInvincible then
30482: LD_EXP 93
30486: NOT
30487: IFFALSE 30491
// exit ;
30489: GO 30535
// for i in hInvincible do
30491: LD_ADDR_VAR 0 1
30495: PUSH
30496: LD_EXP 93
30500: PUSH
30501: FOR_IN
30502: IFFALSE 30533
// if GetLives ( i ) < 1000 then
30504: LD_VAR 0 1
30508: PPUSH
30509: CALL_OW 256
30513: PUSH
30514: LD_INT 1000
30516: LESS
30517: IFFALSE 30531
// SetLives ( i , 1000 ) ;
30519: LD_VAR 0 1
30523: PPUSH
30524: LD_INT 1000
30526: PPUSH
30527: CALL_OW 234
30531: GO 30501
30533: POP
30534: POP
// end ;
30535: PPOPN 1
30537: END
// export function hHackInvincible ; var i ; begin
30538: LD_INT 0
30540: PPUSH
30541: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30542: LD_ADDR_VAR 0 2
30546: PUSH
30547: LD_INT 2
30549: PUSH
30550: LD_INT 21
30552: PUSH
30553: LD_INT 1
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 21
30562: PUSH
30563: LD_INT 2
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: LIST
30574: PPUSH
30575: CALL_OW 69
30579: PUSH
30580: FOR_IN
30581: IFFALSE 30642
// if IsSelected ( i ) then
30583: LD_VAR 0 2
30587: PPUSH
30588: CALL_OW 306
30592: IFFALSE 30640
// begin if i in hInvincible then
30594: LD_VAR 0 2
30598: PUSH
30599: LD_EXP 93
30603: IN
30604: IFFALSE 30624
// hInvincible := hInvincible diff i else
30606: LD_ADDR_EXP 93
30610: PUSH
30611: LD_EXP 93
30615: PUSH
30616: LD_VAR 0 2
30620: DIFF
30621: ST_TO_ADDR
30622: GO 30640
// hInvincible := hInvincible union i ;
30624: LD_ADDR_EXP 93
30628: PUSH
30629: LD_EXP 93
30633: PUSH
30634: LD_VAR 0 2
30638: UNION
30639: ST_TO_ADDR
// end ;
30640: GO 30580
30642: POP
30643: POP
// end ;
30644: LD_VAR 0 1
30648: RET
// export function hHackInvisible ; var i , j ; begin
30649: LD_INT 0
30651: PPUSH
30652: PPUSH
30653: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30654: LD_ADDR_VAR 0 2
30658: PUSH
30659: LD_INT 21
30661: PUSH
30662: LD_INT 1
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PPUSH
30669: CALL_OW 69
30673: PUSH
30674: FOR_IN
30675: IFFALSE 30699
// if IsSelected ( i ) then
30677: LD_VAR 0 2
30681: PPUSH
30682: CALL_OW 306
30686: IFFALSE 30697
// ComForceInvisible ( i ) ;
30688: LD_VAR 0 2
30692: PPUSH
30693: CALL_OW 496
30697: GO 30674
30699: POP
30700: POP
// end ;
30701: LD_VAR 0 1
30705: RET
// export function hHackChangeYourSide ; begin
30706: LD_INT 0
30708: PPUSH
// if your_side = 8 then
30709: LD_OWVAR 2
30713: PUSH
30714: LD_INT 8
30716: EQUAL
30717: IFFALSE 30729
// your_side := 0 else
30719: LD_ADDR_OWVAR 2
30723: PUSH
30724: LD_INT 0
30726: ST_TO_ADDR
30727: GO 30743
// your_side := your_side + 1 ;
30729: LD_ADDR_OWVAR 2
30733: PUSH
30734: LD_OWVAR 2
30738: PUSH
30739: LD_INT 1
30741: PLUS
30742: ST_TO_ADDR
// end ;
30743: LD_VAR 0 1
30747: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30748: LD_INT 0
30750: PPUSH
30751: PPUSH
30752: PPUSH
// for i in all_units do
30753: LD_ADDR_VAR 0 2
30757: PUSH
30758: LD_OWVAR 3
30762: PUSH
30763: FOR_IN
30764: IFFALSE 30842
// if IsSelected ( i ) then
30766: LD_VAR 0 2
30770: PPUSH
30771: CALL_OW 306
30775: IFFALSE 30840
// begin j := GetSide ( i ) ;
30777: LD_ADDR_VAR 0 3
30781: PUSH
30782: LD_VAR 0 2
30786: PPUSH
30787: CALL_OW 255
30791: ST_TO_ADDR
// if j = 8 then
30792: LD_VAR 0 3
30796: PUSH
30797: LD_INT 8
30799: EQUAL
30800: IFFALSE 30812
// j := 0 else
30802: LD_ADDR_VAR 0 3
30806: PUSH
30807: LD_INT 0
30809: ST_TO_ADDR
30810: GO 30826
// j := j + 1 ;
30812: LD_ADDR_VAR 0 3
30816: PUSH
30817: LD_VAR 0 3
30821: PUSH
30822: LD_INT 1
30824: PLUS
30825: ST_TO_ADDR
// SetSide ( i , j ) ;
30826: LD_VAR 0 2
30830: PPUSH
30831: LD_VAR 0 3
30835: PPUSH
30836: CALL_OW 235
// end ;
30840: GO 30763
30842: POP
30843: POP
// end ;
30844: LD_VAR 0 1
30848: RET
// export function hHackFog ; begin
30849: LD_INT 0
30851: PPUSH
// FogOff ( true ) ;
30852: LD_INT 1
30854: PPUSH
30855: CALL_OW 344
// end ;
30859: LD_VAR 0 1
30863: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30864: LD_INT 0
30866: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30867: LD_VAR 0 1
30871: PPUSH
30872: LD_VAR 0 2
30876: PPUSH
30877: LD_VAR 0 3
30881: PPUSH
30882: LD_INT 1
30884: PPUSH
30885: LD_INT 1
30887: PPUSH
30888: CALL_OW 483
// CenterOnXY ( x , y ) ;
30892: LD_VAR 0 2
30896: PPUSH
30897: LD_VAR 0 3
30901: PPUSH
30902: CALL_OW 84
// end ;
30906: LD_VAR 0 4
30910: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
30911: LD_INT 0
30913: PPUSH
30914: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
30915: LD_VAR 0 1
30919: NOT
30920: PUSH
30921: LD_VAR 0 2
30925: PPUSH
30926: LD_VAR 0 3
30930: PPUSH
30931: CALL_OW 488
30935: NOT
30936: OR
30937: PUSH
30938: LD_VAR 0 1
30942: PPUSH
30943: CALL_OW 266
30947: PUSH
30948: LD_INT 3
30950: NONEQUAL
30951: PUSH
30952: LD_VAR 0 1
30956: PPUSH
30957: CALL_OW 247
30961: PUSH
30962: LD_INT 1
30964: EQUAL
30965: NOT
30966: AND
30967: OR
30968: IFFALSE 30972
// exit ;
30970: GO 31121
// if GetType ( factory ) = unit_human then
30972: LD_VAR 0 1
30976: PPUSH
30977: CALL_OW 247
30981: PUSH
30982: LD_INT 1
30984: EQUAL
30985: IFFALSE 31002
// factory := IsInUnit ( factory ) ;
30987: LD_ADDR_VAR 0 1
30991: PUSH
30992: LD_VAR 0 1
30996: PPUSH
30997: CALL_OW 310
31001: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
31002: LD_VAR 0 1
31006: PPUSH
31007: CALL_OW 266
31011: PUSH
31012: LD_INT 3
31014: NONEQUAL
31015: IFFALSE 31019
// exit ;
31017: GO 31121
// if HexInfo ( x , y ) = factory then
31019: LD_VAR 0 2
31023: PPUSH
31024: LD_VAR 0 3
31028: PPUSH
31029: CALL_OW 428
31033: PUSH
31034: LD_VAR 0 1
31038: EQUAL
31039: IFFALSE 31066
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
31041: LD_ADDR_EXP 94
31045: PUSH
31046: LD_EXP 94
31050: PPUSH
31051: LD_VAR 0 1
31055: PPUSH
31056: LD_INT 0
31058: PPUSH
31059: CALL_OW 1
31063: ST_TO_ADDR
31064: GO 31117
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
31066: LD_ADDR_EXP 94
31070: PUSH
31071: LD_EXP 94
31075: PPUSH
31076: LD_VAR 0 1
31080: PPUSH
31081: LD_VAR 0 1
31085: PPUSH
31086: CALL_OW 255
31090: PUSH
31091: LD_VAR 0 1
31095: PUSH
31096: LD_VAR 0 2
31100: PUSH
31101: LD_VAR 0 3
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: PPUSH
31112: CALL_OW 1
31116: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31117: CALL 31126 0 0
// end ;
31121: LD_VAR 0 4
31125: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
31126: LD_INT 0
31128: PPUSH
31129: PPUSH
31130: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
31131: LD_STRING resetFactoryWaypoint();
31133: PPUSH
31134: CALL_OW 559
// if factoryWaypoints then
31138: LD_EXP 94
31142: IFFALSE 31268
// begin list := PrepareArray ( factoryWaypoints ) ;
31144: LD_ADDR_VAR 0 3
31148: PUSH
31149: LD_EXP 94
31153: PPUSH
31154: CALL 77645 0 1
31158: ST_TO_ADDR
// for i := 1 to list do
31159: LD_ADDR_VAR 0 2
31163: PUSH
31164: DOUBLE
31165: LD_INT 1
31167: DEC
31168: ST_TO_ADDR
31169: LD_VAR 0 3
31173: PUSH
31174: FOR_TO
31175: IFFALSE 31266
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31177: LD_STRING setFactoryWaypointXY(
31179: PUSH
31180: LD_VAR 0 3
31184: PUSH
31185: LD_VAR 0 2
31189: ARRAY
31190: PUSH
31191: LD_INT 1
31193: ARRAY
31194: STR
31195: PUSH
31196: LD_STRING ,
31198: STR
31199: PUSH
31200: LD_VAR 0 3
31204: PUSH
31205: LD_VAR 0 2
31209: ARRAY
31210: PUSH
31211: LD_INT 2
31213: ARRAY
31214: STR
31215: PUSH
31216: LD_STRING ,
31218: STR
31219: PUSH
31220: LD_VAR 0 3
31224: PUSH
31225: LD_VAR 0 2
31229: ARRAY
31230: PUSH
31231: LD_INT 3
31233: ARRAY
31234: STR
31235: PUSH
31236: LD_STRING ,
31238: STR
31239: PUSH
31240: LD_VAR 0 3
31244: PUSH
31245: LD_VAR 0 2
31249: ARRAY
31250: PUSH
31251: LD_INT 4
31253: ARRAY
31254: STR
31255: PUSH
31256: LD_STRING )
31258: STR
31259: PPUSH
31260: CALL_OW 559
31264: GO 31174
31266: POP
31267: POP
// end ; end ;
31268: LD_VAR 0 1
31272: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
31273: LD_INT 0
31275: PPUSH
// if HexInfo ( x , y ) = warehouse then
31276: LD_VAR 0 2
31280: PPUSH
31281: LD_VAR 0 3
31285: PPUSH
31286: CALL_OW 428
31290: PUSH
31291: LD_VAR 0 1
31295: EQUAL
31296: IFFALSE 31323
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
31298: LD_ADDR_EXP 95
31302: PUSH
31303: LD_EXP 95
31307: PPUSH
31308: LD_VAR 0 1
31312: PPUSH
31313: LD_INT 0
31315: PPUSH
31316: CALL_OW 1
31320: ST_TO_ADDR
31321: GO 31374
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
31323: LD_ADDR_EXP 95
31327: PUSH
31328: LD_EXP 95
31332: PPUSH
31333: LD_VAR 0 1
31337: PPUSH
31338: LD_VAR 0 1
31342: PPUSH
31343: CALL_OW 255
31347: PUSH
31348: LD_VAR 0 1
31352: PUSH
31353: LD_VAR 0 2
31357: PUSH
31358: LD_VAR 0 3
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: PPUSH
31369: CALL_OW 1
31373: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
31374: CALL 31383 0 0
// end ;
31378: LD_VAR 0 4
31382: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
31383: LD_INT 0
31385: PPUSH
31386: PPUSH
31387: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
31388: LD_STRING resetWarehouseGatheringPoints();
31390: PPUSH
31391: CALL_OW 559
// if warehouseGatheringPoints then
31395: LD_EXP 95
31399: IFFALSE 31525
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
31401: LD_ADDR_VAR 0 3
31405: PUSH
31406: LD_EXP 95
31410: PPUSH
31411: CALL 77645 0 1
31415: ST_TO_ADDR
// for i := 1 to list do
31416: LD_ADDR_VAR 0 2
31420: PUSH
31421: DOUBLE
31422: LD_INT 1
31424: DEC
31425: ST_TO_ADDR
31426: LD_VAR 0 3
31430: PUSH
31431: FOR_TO
31432: IFFALSE 31523
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31434: LD_STRING setWarehouseGatheringPointXY(
31436: PUSH
31437: LD_VAR 0 3
31441: PUSH
31442: LD_VAR 0 2
31446: ARRAY
31447: PUSH
31448: LD_INT 1
31450: ARRAY
31451: STR
31452: PUSH
31453: LD_STRING ,
31455: STR
31456: PUSH
31457: LD_VAR 0 3
31461: PUSH
31462: LD_VAR 0 2
31466: ARRAY
31467: PUSH
31468: LD_INT 2
31470: ARRAY
31471: STR
31472: PUSH
31473: LD_STRING ,
31475: STR
31476: PUSH
31477: LD_VAR 0 3
31481: PUSH
31482: LD_VAR 0 2
31486: ARRAY
31487: PUSH
31488: LD_INT 3
31490: ARRAY
31491: STR
31492: PUSH
31493: LD_STRING ,
31495: STR
31496: PUSH
31497: LD_VAR 0 3
31501: PUSH
31502: LD_VAR 0 2
31506: ARRAY
31507: PUSH
31508: LD_INT 4
31510: ARRAY
31511: STR
31512: PUSH
31513: LD_STRING )
31515: STR
31516: PPUSH
31517: CALL_OW 559
31521: GO 31431
31523: POP
31524: POP
// end ; end ;
31525: LD_VAR 0 1
31529: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
31530: LD_EXP 95
31534: IFFALSE 32219
31536: GO 31538
31538: DISABLE
31539: LD_INT 0
31541: PPUSH
31542: PPUSH
31543: PPUSH
31544: PPUSH
31545: PPUSH
31546: PPUSH
31547: PPUSH
31548: PPUSH
31549: PPUSH
// begin enable ;
31550: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
31551: LD_ADDR_VAR 0 3
31555: PUSH
31556: LD_EXP 95
31560: PPUSH
31561: CALL 77645 0 1
31565: ST_TO_ADDR
// if not list then
31566: LD_VAR 0 3
31570: NOT
31571: IFFALSE 31575
// exit ;
31573: GO 32219
// for i := 1 to list do
31575: LD_ADDR_VAR 0 1
31579: PUSH
31580: DOUBLE
31581: LD_INT 1
31583: DEC
31584: ST_TO_ADDR
31585: LD_VAR 0 3
31589: PUSH
31590: FOR_TO
31591: IFFALSE 32217
// begin depot := list [ i ] [ 2 ] ;
31593: LD_ADDR_VAR 0 8
31597: PUSH
31598: LD_VAR 0 3
31602: PUSH
31603: LD_VAR 0 1
31607: ARRAY
31608: PUSH
31609: LD_INT 2
31611: ARRAY
31612: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
31613: LD_ADDR_VAR 0 5
31617: PUSH
31618: LD_VAR 0 3
31622: PUSH
31623: LD_VAR 0 1
31627: ARRAY
31628: PUSH
31629: LD_INT 1
31631: ARRAY
31632: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
31633: LD_VAR 0 8
31637: PPUSH
31638: CALL_OW 301
31642: PUSH
31643: LD_VAR 0 5
31647: PUSH
31648: LD_VAR 0 8
31652: PPUSH
31653: CALL_OW 255
31657: NONEQUAL
31658: OR
31659: IFFALSE 31688
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
31661: LD_ADDR_EXP 95
31665: PUSH
31666: LD_EXP 95
31670: PPUSH
31671: LD_VAR 0 8
31675: PPUSH
31676: LD_INT 0
31678: PPUSH
31679: CALL_OW 1
31683: ST_TO_ADDR
// exit ;
31684: POP
31685: POP
31686: GO 32219
// end ; x := list [ i ] [ 3 ] ;
31688: LD_ADDR_VAR 0 6
31692: PUSH
31693: LD_VAR 0 3
31697: PUSH
31698: LD_VAR 0 1
31702: ARRAY
31703: PUSH
31704: LD_INT 3
31706: ARRAY
31707: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
31708: LD_ADDR_VAR 0 7
31712: PUSH
31713: LD_VAR 0 3
31717: PUSH
31718: LD_VAR 0 1
31722: ARRAY
31723: PUSH
31724: LD_INT 4
31726: ARRAY
31727: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
31728: LD_ADDR_VAR 0 9
31732: PUSH
31733: LD_VAR 0 6
31737: PPUSH
31738: LD_VAR 0 7
31742: PPUSH
31743: LD_INT 16
31745: PPUSH
31746: CALL 76233 0 3
31750: ST_TO_ADDR
// if not cratesNearbyPoint then
31751: LD_VAR 0 9
31755: NOT
31756: IFFALSE 31762
// exit ;
31758: POP
31759: POP
31760: GO 32219
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
31762: LD_ADDR_VAR 0 4
31766: PUSH
31767: LD_INT 22
31769: PUSH
31770: LD_VAR 0 5
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 3
31781: PUSH
31782: LD_INT 60
31784: PUSH
31785: EMPTY
31786: LIST
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 91
31794: PUSH
31795: LD_VAR 0 8
31799: PUSH
31800: LD_INT 6
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 2
31810: PUSH
31811: LD_INT 25
31813: PUSH
31814: LD_INT 2
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 25
31823: PUSH
31824: LD_INT 16
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: LIST
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: PPUSH
31842: CALL_OW 69
31846: PUSH
31847: LD_VAR 0 8
31851: PPUSH
31852: CALL_OW 313
31856: PPUSH
31857: LD_INT 3
31859: PUSH
31860: LD_INT 60
31862: PUSH
31863: EMPTY
31864: LIST
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 2
31872: PUSH
31873: LD_INT 25
31875: PUSH
31876: LD_INT 2
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 25
31885: PUSH
31886: LD_INT 16
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: LIST
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PPUSH
31902: CALL_OW 72
31906: UNION
31907: ST_TO_ADDR
// if tmp then
31908: LD_VAR 0 4
31912: IFFALSE 31992
// begin tmp := ShrinkArray ( tmp , 3 ) ;
31914: LD_ADDR_VAR 0 4
31918: PUSH
31919: LD_VAR 0 4
31923: PPUSH
31924: LD_INT 3
31926: PPUSH
31927: CALL 74202 0 2
31931: ST_TO_ADDR
// for j in tmp do
31932: LD_ADDR_VAR 0 2
31936: PUSH
31937: LD_VAR 0 4
31941: PUSH
31942: FOR_IN
31943: IFFALSE 31986
// begin if IsInUnit ( j ) then
31945: LD_VAR 0 2
31949: PPUSH
31950: CALL_OW 310
31954: IFFALSE 31965
// ComExit ( j ) ;
31956: LD_VAR 0 2
31960: PPUSH
31961: CALL 74285 0 1
// AddComCollect ( j , x , y ) ;
31965: LD_VAR 0 2
31969: PPUSH
31970: LD_VAR 0 6
31974: PPUSH
31975: LD_VAR 0 7
31979: PPUSH
31980: CALL_OW 177
// end ;
31984: GO 31942
31986: POP
31987: POP
// exit ;
31988: POP
31989: POP
31990: GO 32219
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
31992: LD_ADDR_VAR 0 4
31996: PUSH
31997: LD_INT 22
31999: PUSH
32000: LD_VAR 0 5
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 91
32011: PUSH
32012: LD_VAR 0 8
32016: PUSH
32017: LD_INT 8
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 2
32027: PUSH
32028: LD_INT 34
32030: PUSH
32031: LD_INT 12
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 34
32040: PUSH
32041: LD_INT 51
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 34
32050: PUSH
32051: LD_INT 32
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 34
32060: PUSH
32061: LD_INT 89
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: LIST
32079: PPUSH
32080: CALL_OW 69
32084: ST_TO_ADDR
// if tmp then
32085: LD_VAR 0 4
32089: IFFALSE 32215
// begin for j in tmp do
32091: LD_ADDR_VAR 0 2
32095: PUSH
32096: LD_VAR 0 4
32100: PUSH
32101: FOR_IN
32102: IFFALSE 32213
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
32104: LD_VAR 0 2
32108: PPUSH
32109: CALL_OW 262
32113: PUSH
32114: LD_INT 3
32116: EQUAL
32117: PUSH
32118: LD_VAR 0 2
32122: PPUSH
32123: CALL_OW 261
32127: PUSH
32128: LD_INT 20
32130: GREATER
32131: OR
32132: PUSH
32133: LD_VAR 0 2
32137: PPUSH
32138: CALL_OW 314
32142: NOT
32143: AND
32144: PUSH
32145: LD_VAR 0 2
32149: PPUSH
32150: CALL_OW 263
32154: PUSH
32155: LD_INT 1
32157: NONEQUAL
32158: PUSH
32159: LD_VAR 0 2
32163: PPUSH
32164: CALL_OW 311
32168: OR
32169: AND
32170: IFFALSE 32211
// begin ComCollect ( j , x , y ) ;
32172: LD_VAR 0 2
32176: PPUSH
32177: LD_VAR 0 6
32181: PPUSH
32182: LD_VAR 0 7
32186: PPUSH
32187: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
32191: LD_VAR 0 2
32195: PPUSH
32196: LD_VAR 0 8
32200: PPUSH
32201: CALL_OW 172
// exit ;
32205: POP
32206: POP
32207: POP
32208: POP
32209: GO 32219
// end ;
32211: GO 32101
32213: POP
32214: POP
// end ; end ;
32215: GO 31590
32217: POP
32218: POP
// end ; end_of_file
32219: PPOPN 9
32221: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32222: LD_INT 0
32224: PPUSH
32225: PPUSH
32226: PPUSH
32227: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32228: LD_VAR 0 1
32232: PPUSH
32233: CALL_OW 264
32237: PUSH
32238: LD_INT 91
32240: EQUAL
32241: IFFALSE 32313
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32243: LD_INT 68
32245: PPUSH
32246: LD_VAR 0 1
32250: PPUSH
32251: CALL_OW 255
32255: PPUSH
32256: CALL_OW 321
32260: PUSH
32261: LD_INT 2
32263: EQUAL
32264: IFFALSE 32276
// eff := 70 else
32266: LD_ADDR_VAR 0 4
32270: PUSH
32271: LD_INT 70
32273: ST_TO_ADDR
32274: GO 32284
// eff := 30 ;
32276: LD_ADDR_VAR 0 4
32280: PUSH
32281: LD_INT 30
32283: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32284: LD_VAR 0 1
32288: PPUSH
32289: CALL_OW 250
32293: PPUSH
32294: LD_VAR 0 1
32298: PPUSH
32299: CALL_OW 251
32303: PPUSH
32304: LD_VAR 0 4
32308: PPUSH
32309: CALL_OW 495
// end ; end ;
32313: LD_VAR 0 2
32317: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32318: LD_INT 0
32320: PPUSH
// end ;
32321: LD_VAR 0 4
32325: RET
// export function SOS_Command ( cmd ) ; begin
32326: LD_INT 0
32328: PPUSH
// end ;
32329: LD_VAR 0 2
32333: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32334: LD_INT 0
32336: PPUSH
// end ;
32337: LD_VAR 0 6
32341: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
32342: LD_INT 0
32344: PPUSH
32345: PPUSH
// if not vehicle or not factory then
32346: LD_VAR 0 1
32350: NOT
32351: PUSH
32352: LD_VAR 0 2
32356: NOT
32357: OR
32358: IFFALSE 32362
// exit ;
32360: GO 32593
// if factoryWaypoints >= factory then
32362: LD_EXP 94
32366: PUSH
32367: LD_VAR 0 2
32371: GREATEREQUAL
32372: IFFALSE 32593
// if factoryWaypoints [ factory ] then
32374: LD_EXP 94
32378: PUSH
32379: LD_VAR 0 2
32383: ARRAY
32384: IFFALSE 32593
// begin if GetControl ( vehicle ) = control_manual then
32386: LD_VAR 0 1
32390: PPUSH
32391: CALL_OW 263
32395: PUSH
32396: LD_INT 1
32398: EQUAL
32399: IFFALSE 32480
// begin driver := IsDrivenBy ( vehicle ) ;
32401: LD_ADDR_VAR 0 4
32405: PUSH
32406: LD_VAR 0 1
32410: PPUSH
32411: CALL_OW 311
32415: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32416: LD_VAR 0 4
32420: PPUSH
32421: LD_EXP 94
32425: PUSH
32426: LD_VAR 0 2
32430: ARRAY
32431: PUSH
32432: LD_INT 3
32434: ARRAY
32435: PPUSH
32436: LD_EXP 94
32440: PUSH
32441: LD_VAR 0 2
32445: ARRAY
32446: PUSH
32447: LD_INT 4
32449: ARRAY
32450: PPUSH
32451: CALL_OW 171
// AddComExitVehicle ( driver ) ;
32455: LD_VAR 0 4
32459: PPUSH
32460: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
32464: LD_VAR 0 4
32468: PPUSH
32469: LD_VAR 0 2
32473: PPUSH
32474: CALL_OW 180
// end else
32478: GO 32593
// if GetControl ( vehicle ) = control_remote then
32480: LD_VAR 0 1
32484: PPUSH
32485: CALL_OW 263
32489: PUSH
32490: LD_INT 2
32492: EQUAL
32493: IFFALSE 32554
// begin wait ( 0 0$2 ) ;
32495: LD_INT 70
32497: PPUSH
32498: CALL_OW 67
// if Connect ( vehicle ) then
32502: LD_VAR 0 1
32506: PPUSH
32507: CALL 44617 0 1
32511: IFFALSE 32552
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32513: LD_VAR 0 1
32517: PPUSH
32518: LD_EXP 94
32522: PUSH
32523: LD_VAR 0 2
32527: ARRAY
32528: PUSH
32529: LD_INT 3
32531: ARRAY
32532: PPUSH
32533: LD_EXP 94
32537: PUSH
32538: LD_VAR 0 2
32542: ARRAY
32543: PUSH
32544: LD_INT 4
32546: ARRAY
32547: PPUSH
32548: CALL_OW 171
// end else
32552: GO 32593
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32554: LD_VAR 0 1
32558: PPUSH
32559: LD_EXP 94
32563: PUSH
32564: LD_VAR 0 2
32568: ARRAY
32569: PUSH
32570: LD_INT 3
32572: ARRAY
32573: PPUSH
32574: LD_EXP 94
32578: PUSH
32579: LD_VAR 0 2
32583: ARRAY
32584: PUSH
32585: LD_INT 4
32587: ARRAY
32588: PPUSH
32589: CALL_OW 171
// end ; end ;
32593: LD_VAR 0 3
32597: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32598: LD_INT 0
32600: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32601: LD_VAR 0 1
32605: PUSH
32606: LD_INT 250
32608: EQUAL
32609: PUSH
32610: LD_VAR 0 2
32614: PPUSH
32615: CALL_OW 264
32619: PUSH
32620: LD_INT 81
32622: EQUAL
32623: AND
32624: IFFALSE 32645
// MinerPlaceMine ( unit , x , y ) ;
32626: LD_VAR 0 2
32630: PPUSH
32631: LD_VAR 0 4
32635: PPUSH
32636: LD_VAR 0 5
32640: PPUSH
32641: CALL 35030 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32645: LD_VAR 0 1
32649: PUSH
32650: LD_INT 251
32652: EQUAL
32653: PUSH
32654: LD_VAR 0 2
32658: PPUSH
32659: CALL_OW 264
32663: PUSH
32664: LD_INT 81
32666: EQUAL
32667: AND
32668: IFFALSE 32689
// MinerDetonateMine ( unit , x , y ) ;
32670: LD_VAR 0 2
32674: PPUSH
32675: LD_VAR 0 4
32679: PPUSH
32680: LD_VAR 0 5
32684: PPUSH
32685: CALL 35305 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32689: LD_VAR 0 1
32693: PUSH
32694: LD_INT 252
32696: EQUAL
32697: PUSH
32698: LD_VAR 0 2
32702: PPUSH
32703: CALL_OW 264
32707: PUSH
32708: LD_INT 81
32710: EQUAL
32711: AND
32712: IFFALSE 32733
// MinerCreateMinefield ( unit , x , y ) ;
32714: LD_VAR 0 2
32718: PPUSH
32719: LD_VAR 0 4
32723: PPUSH
32724: LD_VAR 0 5
32728: PPUSH
32729: CALL 35722 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32733: LD_VAR 0 1
32737: PUSH
32738: LD_INT 253
32740: EQUAL
32741: PUSH
32742: LD_VAR 0 2
32746: PPUSH
32747: CALL_OW 257
32751: PUSH
32752: LD_INT 5
32754: EQUAL
32755: AND
32756: IFFALSE 32777
// ComBinocular ( unit , x , y ) ;
32758: LD_VAR 0 2
32762: PPUSH
32763: LD_VAR 0 4
32767: PPUSH
32768: LD_VAR 0 5
32772: PPUSH
32773: CALL 36091 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32777: LD_VAR 0 1
32781: PUSH
32782: LD_INT 254
32784: EQUAL
32785: PUSH
32786: LD_VAR 0 2
32790: PPUSH
32791: CALL_OW 264
32795: PUSH
32796: LD_INT 99
32798: EQUAL
32799: AND
32800: PUSH
32801: LD_VAR 0 3
32805: PPUSH
32806: CALL_OW 263
32810: PUSH
32811: LD_INT 3
32813: EQUAL
32814: AND
32815: IFFALSE 32831
// HackDestroyVehicle ( unit , selectedUnit ) ;
32817: LD_VAR 0 2
32821: PPUSH
32822: LD_VAR 0 3
32826: PPUSH
32827: CALL 34394 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32831: LD_VAR 0 1
32835: PUSH
32836: LD_INT 255
32838: EQUAL
32839: PUSH
32840: LD_VAR 0 2
32844: PPUSH
32845: CALL_OW 264
32849: PUSH
32850: LD_INT 14
32852: PUSH
32853: LD_INT 53
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: IN
32860: AND
32861: PUSH
32862: LD_VAR 0 4
32866: PPUSH
32867: LD_VAR 0 5
32871: PPUSH
32872: CALL_OW 488
32876: AND
32877: IFFALSE 32901
// CutTreeXYR ( unit , x , y , 12 ) ;
32879: LD_VAR 0 2
32883: PPUSH
32884: LD_VAR 0 4
32888: PPUSH
32889: LD_VAR 0 5
32893: PPUSH
32894: LD_INT 12
32896: PPUSH
32897: CALL 32964 0 4
// if cmd = 256 then
32901: LD_VAR 0 1
32905: PUSH
32906: LD_INT 256
32908: EQUAL
32909: IFFALSE 32930
// SetFactoryWaypoint ( unit , x , y ) ;
32911: LD_VAR 0 2
32915: PPUSH
32916: LD_VAR 0 4
32920: PPUSH
32921: LD_VAR 0 5
32925: PPUSH
32926: CALL 30911 0 3
// if cmd = 257 then
32930: LD_VAR 0 1
32934: PUSH
32935: LD_INT 257
32937: EQUAL
32938: IFFALSE 32959
// SetWarehouseGatheringPoint ( unit , x , y ) ;
32940: LD_VAR 0 2
32944: PPUSH
32945: LD_VAR 0 4
32949: PPUSH
32950: LD_VAR 0 5
32954: PPUSH
32955: CALL 31273 0 3
// end ;
32959: LD_VAR 0 6
32963: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32964: LD_INT 0
32966: PPUSH
32967: PPUSH
32968: PPUSH
32969: PPUSH
32970: PPUSH
32971: PPUSH
32972: PPUSH
32973: PPUSH
32974: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32975: LD_VAR 0 1
32979: NOT
32980: PUSH
32981: LD_VAR 0 2
32985: PPUSH
32986: LD_VAR 0 3
32990: PPUSH
32991: CALL_OW 488
32995: NOT
32996: OR
32997: PUSH
32998: LD_VAR 0 4
33002: NOT
33003: OR
33004: IFFALSE 33008
// exit ;
33006: GO 33348
// list := [ ] ;
33008: LD_ADDR_VAR 0 13
33012: PUSH
33013: EMPTY
33014: ST_TO_ADDR
// if x - r < 0 then
33015: LD_VAR 0 2
33019: PUSH
33020: LD_VAR 0 4
33024: MINUS
33025: PUSH
33026: LD_INT 0
33028: LESS
33029: IFFALSE 33041
// min_x := 0 else
33031: LD_ADDR_VAR 0 7
33035: PUSH
33036: LD_INT 0
33038: ST_TO_ADDR
33039: GO 33057
// min_x := x - r ;
33041: LD_ADDR_VAR 0 7
33045: PUSH
33046: LD_VAR 0 2
33050: PUSH
33051: LD_VAR 0 4
33055: MINUS
33056: ST_TO_ADDR
// if y - r < 0 then
33057: LD_VAR 0 3
33061: PUSH
33062: LD_VAR 0 4
33066: MINUS
33067: PUSH
33068: LD_INT 0
33070: LESS
33071: IFFALSE 33083
// min_y := 0 else
33073: LD_ADDR_VAR 0 8
33077: PUSH
33078: LD_INT 0
33080: ST_TO_ADDR
33081: GO 33099
// min_y := y - r ;
33083: LD_ADDR_VAR 0 8
33087: PUSH
33088: LD_VAR 0 3
33092: PUSH
33093: LD_VAR 0 4
33097: MINUS
33098: ST_TO_ADDR
// max_x := x + r ;
33099: LD_ADDR_VAR 0 9
33103: PUSH
33104: LD_VAR 0 2
33108: PUSH
33109: LD_VAR 0 4
33113: PLUS
33114: ST_TO_ADDR
// max_y := y + r ;
33115: LD_ADDR_VAR 0 10
33119: PUSH
33120: LD_VAR 0 3
33124: PUSH
33125: LD_VAR 0 4
33129: PLUS
33130: ST_TO_ADDR
// for _x = min_x to max_x do
33131: LD_ADDR_VAR 0 11
33135: PUSH
33136: DOUBLE
33137: LD_VAR 0 7
33141: DEC
33142: ST_TO_ADDR
33143: LD_VAR 0 9
33147: PUSH
33148: FOR_TO
33149: IFFALSE 33266
// for _y = min_y to max_y do
33151: LD_ADDR_VAR 0 12
33155: PUSH
33156: DOUBLE
33157: LD_VAR 0 8
33161: DEC
33162: ST_TO_ADDR
33163: LD_VAR 0 10
33167: PUSH
33168: FOR_TO
33169: IFFALSE 33262
// begin if not ValidHex ( _x , _y ) then
33171: LD_VAR 0 11
33175: PPUSH
33176: LD_VAR 0 12
33180: PPUSH
33181: CALL_OW 488
33185: NOT
33186: IFFALSE 33190
// continue ;
33188: GO 33168
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33190: LD_VAR 0 11
33194: PPUSH
33195: LD_VAR 0 12
33199: PPUSH
33200: CALL_OW 351
33204: PUSH
33205: LD_VAR 0 11
33209: PPUSH
33210: LD_VAR 0 12
33214: PPUSH
33215: CALL_OW 554
33219: AND
33220: IFFALSE 33260
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33222: LD_ADDR_VAR 0 13
33226: PUSH
33227: LD_VAR 0 13
33231: PPUSH
33232: LD_VAR 0 13
33236: PUSH
33237: LD_INT 1
33239: PLUS
33240: PPUSH
33241: LD_VAR 0 11
33245: PUSH
33246: LD_VAR 0 12
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PPUSH
33255: CALL_OW 2
33259: ST_TO_ADDR
// end ;
33260: GO 33168
33262: POP
33263: POP
33264: GO 33148
33266: POP
33267: POP
// if not list then
33268: LD_VAR 0 13
33272: NOT
33273: IFFALSE 33277
// exit ;
33275: GO 33348
// for i in list do
33277: LD_ADDR_VAR 0 6
33281: PUSH
33282: LD_VAR 0 13
33286: PUSH
33287: FOR_IN
33288: IFFALSE 33346
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33290: LD_VAR 0 1
33294: PPUSH
33295: LD_STRING M
33297: PUSH
33298: LD_VAR 0 6
33302: PUSH
33303: LD_INT 1
33305: ARRAY
33306: PUSH
33307: LD_VAR 0 6
33311: PUSH
33312: LD_INT 2
33314: ARRAY
33315: PUSH
33316: LD_INT 0
33318: PUSH
33319: LD_INT 0
33321: PUSH
33322: LD_INT 0
33324: PUSH
33325: LD_INT 0
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: PUSH
33337: EMPTY
33338: LIST
33339: PPUSH
33340: CALL_OW 447
33344: GO 33287
33346: POP
33347: POP
// end ;
33348: LD_VAR 0 5
33352: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33353: LD_EXP 97
33357: NOT
33358: IFFALSE 33408
33360: GO 33362
33362: DISABLE
// begin initHack := true ;
33363: LD_ADDR_EXP 97
33367: PUSH
33368: LD_INT 1
33370: ST_TO_ADDR
// hackTanks := [ ] ;
33371: LD_ADDR_EXP 98
33375: PUSH
33376: EMPTY
33377: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33378: LD_ADDR_EXP 99
33382: PUSH
33383: EMPTY
33384: ST_TO_ADDR
// hackLimit := 3 ;
33385: LD_ADDR_EXP 100
33389: PUSH
33390: LD_INT 3
33392: ST_TO_ADDR
// hackDist := 12 ;
33393: LD_ADDR_EXP 101
33397: PUSH
33398: LD_INT 12
33400: ST_TO_ADDR
// hackCounter := [ ] ;
33401: LD_ADDR_EXP 102
33405: PUSH
33406: EMPTY
33407: ST_TO_ADDR
// end ;
33408: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33409: LD_EXP 97
33413: PUSH
33414: LD_INT 34
33416: PUSH
33417: LD_INT 99
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PPUSH
33424: CALL_OW 69
33428: AND
33429: IFFALSE 33682
33431: GO 33433
33433: DISABLE
33434: LD_INT 0
33436: PPUSH
33437: PPUSH
// begin enable ;
33438: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33439: LD_ADDR_VAR 0 1
33443: PUSH
33444: LD_INT 34
33446: PUSH
33447: LD_INT 99
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PPUSH
33454: CALL_OW 69
33458: PUSH
33459: FOR_IN
33460: IFFALSE 33680
// begin if not i in hackTanks then
33462: LD_VAR 0 1
33466: PUSH
33467: LD_EXP 98
33471: IN
33472: NOT
33473: IFFALSE 33556
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33475: LD_ADDR_EXP 98
33479: PUSH
33480: LD_EXP 98
33484: PPUSH
33485: LD_EXP 98
33489: PUSH
33490: LD_INT 1
33492: PLUS
33493: PPUSH
33494: LD_VAR 0 1
33498: PPUSH
33499: CALL_OW 1
33503: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33504: LD_ADDR_EXP 99
33508: PUSH
33509: LD_EXP 99
33513: PPUSH
33514: LD_EXP 99
33518: PUSH
33519: LD_INT 1
33521: PLUS
33522: PPUSH
33523: EMPTY
33524: PPUSH
33525: CALL_OW 1
33529: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33530: LD_ADDR_EXP 102
33534: PUSH
33535: LD_EXP 102
33539: PPUSH
33540: LD_EXP 102
33544: PUSH
33545: LD_INT 1
33547: PLUS
33548: PPUSH
33549: EMPTY
33550: PPUSH
33551: CALL_OW 1
33555: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33556: LD_VAR 0 1
33560: PPUSH
33561: CALL_OW 302
33565: NOT
33566: IFFALSE 33579
// begin HackUnlinkAll ( i ) ;
33568: LD_VAR 0 1
33572: PPUSH
33573: CALL 33685 0 1
// continue ;
33577: GO 33459
// end ; HackCheckCapturedStatus ( i ) ;
33579: LD_VAR 0 1
33583: PPUSH
33584: CALL 34128 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33588: LD_ADDR_VAR 0 2
33592: PUSH
33593: LD_INT 81
33595: PUSH
33596: LD_VAR 0 1
33600: PPUSH
33601: CALL_OW 255
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 33
33612: PUSH
33613: LD_INT 3
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 91
33622: PUSH
33623: LD_VAR 0 1
33627: PUSH
33628: LD_EXP 101
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 50
33640: PUSH
33641: EMPTY
33642: LIST
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: PPUSH
33650: CALL_OW 69
33654: ST_TO_ADDR
// if not tmp then
33655: LD_VAR 0 2
33659: NOT
33660: IFFALSE 33664
// continue ;
33662: GO 33459
// HackLink ( i , tmp ) ;
33664: LD_VAR 0 1
33668: PPUSH
33669: LD_VAR 0 2
33673: PPUSH
33674: CALL 33821 0 2
// end ;
33678: GO 33459
33680: POP
33681: POP
// end ;
33682: PPOPN 2
33684: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33685: LD_INT 0
33687: PPUSH
33688: PPUSH
33689: PPUSH
// if not hack in hackTanks then
33690: LD_VAR 0 1
33694: PUSH
33695: LD_EXP 98
33699: IN
33700: NOT
33701: IFFALSE 33705
// exit ;
33703: GO 33816
// index := GetElementIndex ( hackTanks , hack ) ;
33705: LD_ADDR_VAR 0 4
33709: PUSH
33710: LD_EXP 98
33714: PPUSH
33715: LD_VAR 0 1
33719: PPUSH
33720: CALL 41433 0 2
33724: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33725: LD_EXP 99
33729: PUSH
33730: LD_VAR 0 4
33734: ARRAY
33735: IFFALSE 33816
// begin for i in hackTanksCaptured [ index ] do
33737: LD_ADDR_VAR 0 3
33741: PUSH
33742: LD_EXP 99
33746: PUSH
33747: LD_VAR 0 4
33751: ARRAY
33752: PUSH
33753: FOR_IN
33754: IFFALSE 33780
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33756: LD_VAR 0 3
33760: PUSH
33761: LD_INT 1
33763: ARRAY
33764: PPUSH
33765: LD_VAR 0 3
33769: PUSH
33770: LD_INT 2
33772: ARRAY
33773: PPUSH
33774: CALL_OW 235
33778: GO 33753
33780: POP
33781: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33782: LD_ADDR_EXP 99
33786: PUSH
33787: LD_EXP 99
33791: PPUSH
33792: LD_VAR 0 4
33796: PPUSH
33797: EMPTY
33798: PPUSH
33799: CALL_OW 1
33803: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33804: LD_VAR 0 1
33808: PPUSH
33809: LD_INT 0
33811: PPUSH
33812: CALL_OW 505
// end ; end ;
33816: LD_VAR 0 2
33820: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33821: LD_INT 0
33823: PPUSH
33824: PPUSH
33825: PPUSH
// if not hack in hackTanks or not vehicles then
33826: LD_VAR 0 1
33830: PUSH
33831: LD_EXP 98
33835: IN
33836: NOT
33837: PUSH
33838: LD_VAR 0 2
33842: NOT
33843: OR
33844: IFFALSE 33848
// exit ;
33846: GO 34123
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33848: LD_ADDR_VAR 0 2
33852: PUSH
33853: LD_VAR 0 1
33857: PPUSH
33858: LD_VAR 0 2
33862: PPUSH
33863: LD_INT 1
33865: PPUSH
33866: LD_INT 1
33868: PPUSH
33869: CALL 42083 0 4
33873: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33874: LD_ADDR_VAR 0 5
33878: PUSH
33879: LD_EXP 98
33883: PPUSH
33884: LD_VAR 0 1
33888: PPUSH
33889: CALL 41433 0 2
33893: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33894: LD_EXP 99
33898: PUSH
33899: LD_VAR 0 5
33903: ARRAY
33904: PUSH
33905: LD_EXP 100
33909: LESS
33910: IFFALSE 34099
// begin for i := 1 to vehicles do
33912: LD_ADDR_VAR 0 4
33916: PUSH
33917: DOUBLE
33918: LD_INT 1
33920: DEC
33921: ST_TO_ADDR
33922: LD_VAR 0 2
33926: PUSH
33927: FOR_TO
33928: IFFALSE 34097
// begin if hackTanksCaptured [ index ] = hackLimit then
33930: LD_EXP 99
33934: PUSH
33935: LD_VAR 0 5
33939: ARRAY
33940: PUSH
33941: LD_EXP 100
33945: EQUAL
33946: IFFALSE 33950
// break ;
33948: GO 34097
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33950: LD_ADDR_EXP 102
33954: PUSH
33955: LD_EXP 102
33959: PPUSH
33960: LD_VAR 0 5
33964: PPUSH
33965: LD_EXP 102
33969: PUSH
33970: LD_VAR 0 5
33974: ARRAY
33975: PUSH
33976: LD_INT 1
33978: PLUS
33979: PPUSH
33980: CALL_OW 1
33984: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33985: LD_ADDR_EXP 99
33989: PUSH
33990: LD_EXP 99
33994: PPUSH
33995: LD_VAR 0 5
33999: PUSH
34000: LD_EXP 99
34004: PUSH
34005: LD_VAR 0 5
34009: ARRAY
34010: PUSH
34011: LD_INT 1
34013: PLUS
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PPUSH
34019: LD_VAR 0 2
34023: PUSH
34024: LD_VAR 0 4
34028: ARRAY
34029: PUSH
34030: LD_VAR 0 2
34034: PUSH
34035: LD_VAR 0 4
34039: ARRAY
34040: PPUSH
34041: CALL_OW 255
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PPUSH
34050: CALL 41648 0 3
34054: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34055: LD_VAR 0 2
34059: PUSH
34060: LD_VAR 0 4
34064: ARRAY
34065: PPUSH
34066: LD_VAR 0 1
34070: PPUSH
34071: CALL_OW 255
34075: PPUSH
34076: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34080: LD_VAR 0 2
34084: PUSH
34085: LD_VAR 0 4
34089: ARRAY
34090: PPUSH
34091: CALL_OW 141
// end ;
34095: GO 33927
34097: POP
34098: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34099: LD_VAR 0 1
34103: PPUSH
34104: LD_EXP 99
34108: PUSH
34109: LD_VAR 0 5
34113: ARRAY
34114: PUSH
34115: LD_INT 0
34117: PLUS
34118: PPUSH
34119: CALL_OW 505
// end ;
34123: LD_VAR 0 3
34127: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34128: LD_INT 0
34130: PPUSH
34131: PPUSH
34132: PPUSH
34133: PPUSH
// if not hack in hackTanks then
34134: LD_VAR 0 1
34138: PUSH
34139: LD_EXP 98
34143: IN
34144: NOT
34145: IFFALSE 34149
// exit ;
34147: GO 34389
// index := GetElementIndex ( hackTanks , hack ) ;
34149: LD_ADDR_VAR 0 4
34153: PUSH
34154: LD_EXP 98
34158: PPUSH
34159: LD_VAR 0 1
34163: PPUSH
34164: CALL 41433 0 2
34168: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34169: LD_ADDR_VAR 0 3
34173: PUSH
34174: DOUBLE
34175: LD_EXP 99
34179: PUSH
34180: LD_VAR 0 4
34184: ARRAY
34185: INC
34186: ST_TO_ADDR
34187: LD_INT 1
34189: PUSH
34190: FOR_DOWNTO
34191: IFFALSE 34363
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34193: LD_ADDR_VAR 0 5
34197: PUSH
34198: LD_EXP 99
34202: PUSH
34203: LD_VAR 0 4
34207: ARRAY
34208: PUSH
34209: LD_VAR 0 3
34213: ARRAY
34214: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34215: LD_VAR 0 5
34219: PUSH
34220: LD_INT 1
34222: ARRAY
34223: PPUSH
34224: CALL_OW 302
34228: NOT
34229: PUSH
34230: LD_VAR 0 5
34234: PUSH
34235: LD_INT 1
34237: ARRAY
34238: PPUSH
34239: CALL_OW 255
34243: PUSH
34244: LD_VAR 0 1
34248: PPUSH
34249: CALL_OW 255
34253: NONEQUAL
34254: OR
34255: IFFALSE 34361
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34257: LD_VAR 0 5
34261: PUSH
34262: LD_INT 1
34264: ARRAY
34265: PPUSH
34266: CALL_OW 305
34270: PUSH
34271: LD_VAR 0 5
34275: PUSH
34276: LD_INT 1
34278: ARRAY
34279: PPUSH
34280: CALL_OW 255
34284: PUSH
34285: LD_VAR 0 1
34289: PPUSH
34290: CALL_OW 255
34294: EQUAL
34295: AND
34296: IFFALSE 34320
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34298: LD_VAR 0 5
34302: PUSH
34303: LD_INT 1
34305: ARRAY
34306: PPUSH
34307: LD_VAR 0 5
34311: PUSH
34312: LD_INT 2
34314: ARRAY
34315: PPUSH
34316: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34320: LD_ADDR_EXP 99
34324: PUSH
34325: LD_EXP 99
34329: PPUSH
34330: LD_VAR 0 4
34334: PPUSH
34335: LD_EXP 99
34339: PUSH
34340: LD_VAR 0 4
34344: ARRAY
34345: PPUSH
34346: LD_VAR 0 3
34350: PPUSH
34351: CALL_OW 3
34355: PPUSH
34356: CALL_OW 1
34360: ST_TO_ADDR
// end ; end ;
34361: GO 34190
34363: POP
34364: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34365: LD_VAR 0 1
34369: PPUSH
34370: LD_EXP 99
34374: PUSH
34375: LD_VAR 0 4
34379: ARRAY
34380: PUSH
34381: LD_INT 0
34383: PLUS
34384: PPUSH
34385: CALL_OW 505
// end ;
34389: LD_VAR 0 2
34393: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34394: LD_INT 0
34396: PPUSH
34397: PPUSH
34398: PPUSH
34399: PPUSH
// if not hack in hackTanks then
34400: LD_VAR 0 1
34404: PUSH
34405: LD_EXP 98
34409: IN
34410: NOT
34411: IFFALSE 34415
// exit ;
34413: GO 34500
// index := GetElementIndex ( hackTanks , hack ) ;
34415: LD_ADDR_VAR 0 5
34419: PUSH
34420: LD_EXP 98
34424: PPUSH
34425: LD_VAR 0 1
34429: PPUSH
34430: CALL 41433 0 2
34434: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34435: LD_ADDR_VAR 0 4
34439: PUSH
34440: DOUBLE
34441: LD_INT 1
34443: DEC
34444: ST_TO_ADDR
34445: LD_EXP 99
34449: PUSH
34450: LD_VAR 0 5
34454: ARRAY
34455: PUSH
34456: FOR_TO
34457: IFFALSE 34498
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34459: LD_EXP 99
34463: PUSH
34464: LD_VAR 0 5
34468: ARRAY
34469: PUSH
34470: LD_VAR 0 4
34474: ARRAY
34475: PUSH
34476: LD_INT 1
34478: ARRAY
34479: PUSH
34480: LD_VAR 0 2
34484: EQUAL
34485: IFFALSE 34496
// KillUnit ( vehicle ) ;
34487: LD_VAR 0 2
34491: PPUSH
34492: CALL_OW 66
34496: GO 34456
34498: POP
34499: POP
// end ;
34500: LD_VAR 0 3
34504: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34505: LD_EXP 103
34509: NOT
34510: IFFALSE 34545
34512: GO 34514
34514: DISABLE
// begin initMiner := true ;
34515: LD_ADDR_EXP 103
34519: PUSH
34520: LD_INT 1
34522: ST_TO_ADDR
// minersList := [ ] ;
34523: LD_ADDR_EXP 104
34527: PUSH
34528: EMPTY
34529: ST_TO_ADDR
// minerMinesList := [ ] ;
34530: LD_ADDR_EXP 105
34534: PUSH
34535: EMPTY
34536: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34537: LD_ADDR_EXP 106
34541: PUSH
34542: LD_INT 5
34544: ST_TO_ADDR
// end ;
34545: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34546: LD_EXP 103
34550: PUSH
34551: LD_INT 34
34553: PUSH
34554: LD_INT 81
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PPUSH
34561: CALL_OW 69
34565: AND
34566: IFFALSE 35027
34568: GO 34570
34570: DISABLE
34571: LD_INT 0
34573: PPUSH
34574: PPUSH
34575: PPUSH
34576: PPUSH
// begin enable ;
34577: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34578: LD_ADDR_VAR 0 1
34582: PUSH
34583: LD_INT 34
34585: PUSH
34586: LD_INT 81
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PPUSH
34593: CALL_OW 69
34597: PUSH
34598: FOR_IN
34599: IFFALSE 34671
// begin if not i in minersList then
34601: LD_VAR 0 1
34605: PUSH
34606: LD_EXP 104
34610: IN
34611: NOT
34612: IFFALSE 34669
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34614: LD_ADDR_EXP 104
34618: PUSH
34619: LD_EXP 104
34623: PPUSH
34624: LD_EXP 104
34628: PUSH
34629: LD_INT 1
34631: PLUS
34632: PPUSH
34633: LD_VAR 0 1
34637: PPUSH
34638: CALL_OW 1
34642: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34643: LD_ADDR_EXP 105
34647: PUSH
34648: LD_EXP 105
34652: PPUSH
34653: LD_EXP 105
34657: PUSH
34658: LD_INT 1
34660: PLUS
34661: PPUSH
34662: EMPTY
34663: PPUSH
34664: CALL_OW 1
34668: ST_TO_ADDR
// end end ;
34669: GO 34598
34671: POP
34672: POP
// for i := minerMinesList downto 1 do
34673: LD_ADDR_VAR 0 1
34677: PUSH
34678: DOUBLE
34679: LD_EXP 105
34683: INC
34684: ST_TO_ADDR
34685: LD_INT 1
34687: PUSH
34688: FOR_DOWNTO
34689: IFFALSE 35025
// begin if IsLive ( minersList [ i ] ) then
34691: LD_EXP 104
34695: PUSH
34696: LD_VAR 0 1
34700: ARRAY
34701: PPUSH
34702: CALL_OW 300
34706: IFFALSE 34734
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34708: LD_EXP 104
34712: PUSH
34713: LD_VAR 0 1
34717: ARRAY
34718: PPUSH
34719: LD_EXP 105
34723: PUSH
34724: LD_VAR 0 1
34728: ARRAY
34729: PPUSH
34730: CALL_OW 505
// if not minerMinesList [ i ] then
34734: LD_EXP 105
34738: PUSH
34739: LD_VAR 0 1
34743: ARRAY
34744: NOT
34745: IFFALSE 34749
// continue ;
34747: GO 34688
// for j := minerMinesList [ i ] downto 1 do
34749: LD_ADDR_VAR 0 2
34753: PUSH
34754: DOUBLE
34755: LD_EXP 105
34759: PUSH
34760: LD_VAR 0 1
34764: ARRAY
34765: INC
34766: ST_TO_ADDR
34767: LD_INT 1
34769: PUSH
34770: FOR_DOWNTO
34771: IFFALSE 35021
// begin side := GetSide ( minersList [ i ] ) ;
34773: LD_ADDR_VAR 0 3
34777: PUSH
34778: LD_EXP 104
34782: PUSH
34783: LD_VAR 0 1
34787: ARRAY
34788: PPUSH
34789: CALL_OW 255
34793: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34794: LD_ADDR_VAR 0 4
34798: PUSH
34799: LD_EXP 105
34803: PUSH
34804: LD_VAR 0 1
34808: ARRAY
34809: PUSH
34810: LD_VAR 0 2
34814: ARRAY
34815: PUSH
34816: LD_INT 1
34818: ARRAY
34819: PPUSH
34820: LD_EXP 105
34824: PUSH
34825: LD_VAR 0 1
34829: ARRAY
34830: PUSH
34831: LD_VAR 0 2
34835: ARRAY
34836: PUSH
34837: LD_INT 2
34839: ARRAY
34840: PPUSH
34841: CALL_OW 428
34845: ST_TO_ADDR
// if not tmp then
34846: LD_VAR 0 4
34850: NOT
34851: IFFALSE 34855
// continue ;
34853: GO 34770
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34855: LD_VAR 0 4
34859: PUSH
34860: LD_INT 81
34862: PUSH
34863: LD_VAR 0 3
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PPUSH
34872: CALL_OW 69
34876: IN
34877: PUSH
34878: LD_EXP 105
34882: PUSH
34883: LD_VAR 0 1
34887: ARRAY
34888: PUSH
34889: LD_VAR 0 2
34893: ARRAY
34894: PUSH
34895: LD_INT 1
34897: ARRAY
34898: PPUSH
34899: LD_EXP 105
34903: PUSH
34904: LD_VAR 0 1
34908: ARRAY
34909: PUSH
34910: LD_VAR 0 2
34914: ARRAY
34915: PUSH
34916: LD_INT 2
34918: ARRAY
34919: PPUSH
34920: CALL_OW 458
34924: AND
34925: IFFALSE 35019
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34927: LD_EXP 105
34931: PUSH
34932: LD_VAR 0 1
34936: ARRAY
34937: PUSH
34938: LD_VAR 0 2
34942: ARRAY
34943: PUSH
34944: LD_INT 1
34946: ARRAY
34947: PPUSH
34948: LD_EXP 105
34952: PUSH
34953: LD_VAR 0 1
34957: ARRAY
34958: PUSH
34959: LD_VAR 0 2
34963: ARRAY
34964: PUSH
34965: LD_INT 2
34967: ARRAY
34968: PPUSH
34969: LD_VAR 0 3
34973: PPUSH
34974: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34978: LD_ADDR_EXP 105
34982: PUSH
34983: LD_EXP 105
34987: PPUSH
34988: LD_VAR 0 1
34992: PPUSH
34993: LD_EXP 105
34997: PUSH
34998: LD_VAR 0 1
35002: ARRAY
35003: PPUSH
35004: LD_VAR 0 2
35008: PPUSH
35009: CALL_OW 3
35013: PPUSH
35014: CALL_OW 1
35018: ST_TO_ADDR
// end ; end ;
35019: GO 34770
35021: POP
35022: POP
// end ;
35023: GO 34688
35025: POP
35026: POP
// end ;
35027: PPOPN 4
35029: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35030: LD_INT 0
35032: PPUSH
35033: PPUSH
// result := false ;
35034: LD_ADDR_VAR 0 4
35038: PUSH
35039: LD_INT 0
35041: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35042: LD_VAR 0 1
35046: PPUSH
35047: CALL_OW 264
35051: PUSH
35052: LD_INT 81
35054: EQUAL
35055: NOT
35056: IFFALSE 35060
// exit ;
35058: GO 35300
// index := GetElementIndex ( minersList , unit ) ;
35060: LD_ADDR_VAR 0 5
35064: PUSH
35065: LD_EXP 104
35069: PPUSH
35070: LD_VAR 0 1
35074: PPUSH
35075: CALL 41433 0 2
35079: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35080: LD_EXP 105
35084: PUSH
35085: LD_VAR 0 5
35089: ARRAY
35090: PUSH
35091: LD_EXP 106
35095: GREATEREQUAL
35096: IFFALSE 35100
// exit ;
35098: GO 35300
// ComMoveXY ( unit , x , y ) ;
35100: LD_VAR 0 1
35104: PPUSH
35105: LD_VAR 0 2
35109: PPUSH
35110: LD_VAR 0 3
35114: PPUSH
35115: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35119: LD_INT 35
35121: PPUSH
35122: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35126: LD_VAR 0 1
35130: PPUSH
35131: LD_VAR 0 2
35135: PPUSH
35136: LD_VAR 0 3
35140: PPUSH
35141: CALL 72696 0 3
35145: NOT
35146: PUSH
35147: LD_VAR 0 1
35151: PPUSH
35152: CALL_OW 314
35156: AND
35157: IFFALSE 35161
// exit ;
35159: GO 35300
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35161: LD_VAR 0 2
35165: PPUSH
35166: LD_VAR 0 3
35170: PPUSH
35171: CALL_OW 428
35175: PUSH
35176: LD_VAR 0 1
35180: EQUAL
35181: PUSH
35182: LD_VAR 0 1
35186: PPUSH
35187: CALL_OW 314
35191: NOT
35192: AND
35193: IFFALSE 35119
// PlaySoundXY ( x , y , PlantMine ) ;
35195: LD_VAR 0 2
35199: PPUSH
35200: LD_VAR 0 3
35204: PPUSH
35205: LD_STRING PlantMine
35207: PPUSH
35208: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35212: LD_VAR 0 2
35216: PPUSH
35217: LD_VAR 0 3
35221: PPUSH
35222: LD_VAR 0 1
35226: PPUSH
35227: CALL_OW 255
35231: PPUSH
35232: LD_INT 0
35234: PPUSH
35235: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35239: LD_ADDR_EXP 105
35243: PUSH
35244: LD_EXP 105
35248: PPUSH
35249: LD_VAR 0 5
35253: PUSH
35254: LD_EXP 105
35258: PUSH
35259: LD_VAR 0 5
35263: ARRAY
35264: PUSH
35265: LD_INT 1
35267: PLUS
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PPUSH
35273: LD_VAR 0 2
35277: PUSH
35278: LD_VAR 0 3
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PPUSH
35287: CALL 41648 0 3
35291: ST_TO_ADDR
// result := true ;
35292: LD_ADDR_VAR 0 4
35296: PUSH
35297: LD_INT 1
35299: ST_TO_ADDR
// end ;
35300: LD_VAR 0 4
35304: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35305: LD_INT 0
35307: PPUSH
35308: PPUSH
35309: PPUSH
// if not unit in minersList then
35310: LD_VAR 0 1
35314: PUSH
35315: LD_EXP 104
35319: IN
35320: NOT
35321: IFFALSE 35325
// exit ;
35323: GO 35717
// index := GetElementIndex ( minersList , unit ) ;
35325: LD_ADDR_VAR 0 6
35329: PUSH
35330: LD_EXP 104
35334: PPUSH
35335: LD_VAR 0 1
35339: PPUSH
35340: CALL 41433 0 2
35344: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35345: LD_ADDR_VAR 0 5
35349: PUSH
35350: DOUBLE
35351: LD_EXP 105
35355: PUSH
35356: LD_VAR 0 6
35360: ARRAY
35361: INC
35362: ST_TO_ADDR
35363: LD_INT 1
35365: PUSH
35366: FOR_DOWNTO
35367: IFFALSE 35528
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35369: LD_EXP 105
35373: PUSH
35374: LD_VAR 0 6
35378: ARRAY
35379: PUSH
35380: LD_VAR 0 5
35384: ARRAY
35385: PUSH
35386: LD_INT 1
35388: ARRAY
35389: PUSH
35390: LD_VAR 0 2
35394: EQUAL
35395: PUSH
35396: LD_EXP 105
35400: PUSH
35401: LD_VAR 0 6
35405: ARRAY
35406: PUSH
35407: LD_VAR 0 5
35411: ARRAY
35412: PUSH
35413: LD_INT 2
35415: ARRAY
35416: PUSH
35417: LD_VAR 0 3
35421: EQUAL
35422: AND
35423: IFFALSE 35526
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35425: LD_EXP 105
35429: PUSH
35430: LD_VAR 0 6
35434: ARRAY
35435: PUSH
35436: LD_VAR 0 5
35440: ARRAY
35441: PUSH
35442: LD_INT 1
35444: ARRAY
35445: PPUSH
35446: LD_EXP 105
35450: PUSH
35451: LD_VAR 0 6
35455: ARRAY
35456: PUSH
35457: LD_VAR 0 5
35461: ARRAY
35462: PUSH
35463: LD_INT 2
35465: ARRAY
35466: PPUSH
35467: LD_VAR 0 1
35471: PPUSH
35472: CALL_OW 255
35476: PPUSH
35477: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35481: LD_ADDR_EXP 105
35485: PUSH
35486: LD_EXP 105
35490: PPUSH
35491: LD_VAR 0 6
35495: PPUSH
35496: LD_EXP 105
35500: PUSH
35501: LD_VAR 0 6
35505: ARRAY
35506: PPUSH
35507: LD_VAR 0 5
35511: PPUSH
35512: CALL_OW 3
35516: PPUSH
35517: CALL_OW 1
35521: ST_TO_ADDR
// exit ;
35522: POP
35523: POP
35524: GO 35717
// end ; end ;
35526: GO 35366
35528: POP
35529: POP
// for i := minerMinesList [ index ] downto 1 do
35530: LD_ADDR_VAR 0 5
35534: PUSH
35535: DOUBLE
35536: LD_EXP 105
35540: PUSH
35541: LD_VAR 0 6
35545: ARRAY
35546: INC
35547: ST_TO_ADDR
35548: LD_INT 1
35550: PUSH
35551: FOR_DOWNTO
35552: IFFALSE 35715
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35554: LD_EXP 105
35558: PUSH
35559: LD_VAR 0 6
35563: ARRAY
35564: PUSH
35565: LD_VAR 0 5
35569: ARRAY
35570: PUSH
35571: LD_INT 1
35573: ARRAY
35574: PPUSH
35575: LD_EXP 105
35579: PUSH
35580: LD_VAR 0 6
35584: ARRAY
35585: PUSH
35586: LD_VAR 0 5
35590: ARRAY
35591: PUSH
35592: LD_INT 2
35594: ARRAY
35595: PPUSH
35596: LD_VAR 0 2
35600: PPUSH
35601: LD_VAR 0 3
35605: PPUSH
35606: CALL_OW 298
35610: PUSH
35611: LD_INT 6
35613: LESS
35614: IFFALSE 35713
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35616: LD_EXP 105
35620: PUSH
35621: LD_VAR 0 6
35625: ARRAY
35626: PUSH
35627: LD_VAR 0 5
35631: ARRAY
35632: PUSH
35633: LD_INT 1
35635: ARRAY
35636: PPUSH
35637: LD_EXP 105
35641: PUSH
35642: LD_VAR 0 6
35646: ARRAY
35647: PUSH
35648: LD_VAR 0 5
35652: ARRAY
35653: PUSH
35654: LD_INT 2
35656: ARRAY
35657: PPUSH
35658: LD_VAR 0 1
35662: PPUSH
35663: CALL_OW 255
35667: PPUSH
35668: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35672: LD_ADDR_EXP 105
35676: PUSH
35677: LD_EXP 105
35681: PPUSH
35682: LD_VAR 0 6
35686: PPUSH
35687: LD_EXP 105
35691: PUSH
35692: LD_VAR 0 6
35696: ARRAY
35697: PPUSH
35698: LD_VAR 0 5
35702: PPUSH
35703: CALL_OW 3
35707: PPUSH
35708: CALL_OW 1
35712: ST_TO_ADDR
// end ; end ;
35713: GO 35551
35715: POP
35716: POP
// end ;
35717: LD_VAR 0 4
35721: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35722: LD_INT 0
35724: PPUSH
35725: PPUSH
35726: PPUSH
35727: PPUSH
35728: PPUSH
35729: PPUSH
35730: PPUSH
35731: PPUSH
35732: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35733: LD_VAR 0 1
35737: PPUSH
35738: CALL_OW 264
35742: PUSH
35743: LD_INT 81
35745: EQUAL
35746: NOT
35747: PUSH
35748: LD_VAR 0 1
35752: PUSH
35753: LD_EXP 104
35757: IN
35758: NOT
35759: OR
35760: IFFALSE 35764
// exit ;
35762: GO 36086
// index := GetElementIndex ( minersList , unit ) ;
35764: LD_ADDR_VAR 0 6
35768: PUSH
35769: LD_EXP 104
35773: PPUSH
35774: LD_VAR 0 1
35778: PPUSH
35779: CALL 41433 0 2
35783: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35784: LD_ADDR_VAR 0 8
35788: PUSH
35789: LD_EXP 106
35793: PUSH
35794: LD_EXP 105
35798: PUSH
35799: LD_VAR 0 6
35803: ARRAY
35804: MINUS
35805: ST_TO_ADDR
// if not minesFreeAmount then
35806: LD_VAR 0 8
35810: NOT
35811: IFFALSE 35815
// exit ;
35813: GO 36086
// tmp := [ ] ;
35815: LD_ADDR_VAR 0 7
35819: PUSH
35820: EMPTY
35821: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35822: LD_ADDR_VAR 0 5
35826: PUSH
35827: DOUBLE
35828: LD_INT 1
35830: DEC
35831: ST_TO_ADDR
35832: LD_VAR 0 8
35836: PUSH
35837: FOR_TO
35838: IFFALSE 36033
// begin _d := rand ( 0 , 5 ) ;
35840: LD_ADDR_VAR 0 11
35844: PUSH
35845: LD_INT 0
35847: PPUSH
35848: LD_INT 5
35850: PPUSH
35851: CALL_OW 12
35855: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35856: LD_ADDR_VAR 0 12
35860: PUSH
35861: LD_INT 2
35863: PPUSH
35864: LD_INT 6
35866: PPUSH
35867: CALL_OW 12
35871: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35872: LD_ADDR_VAR 0 9
35876: PUSH
35877: LD_VAR 0 2
35881: PPUSH
35882: LD_VAR 0 11
35886: PPUSH
35887: LD_VAR 0 12
35891: PPUSH
35892: CALL_OW 272
35896: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35897: LD_ADDR_VAR 0 10
35901: PUSH
35902: LD_VAR 0 3
35906: PPUSH
35907: LD_VAR 0 11
35911: PPUSH
35912: LD_VAR 0 12
35916: PPUSH
35917: CALL_OW 273
35921: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35922: LD_VAR 0 9
35926: PPUSH
35927: LD_VAR 0 10
35931: PPUSH
35932: CALL_OW 488
35936: PUSH
35937: LD_VAR 0 9
35941: PUSH
35942: LD_VAR 0 10
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_VAR 0 7
35955: IN
35956: NOT
35957: AND
35958: PUSH
35959: LD_VAR 0 9
35963: PPUSH
35964: LD_VAR 0 10
35968: PPUSH
35969: CALL_OW 458
35973: NOT
35974: AND
35975: IFFALSE 36017
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35977: LD_ADDR_VAR 0 7
35981: PUSH
35982: LD_VAR 0 7
35986: PPUSH
35987: LD_VAR 0 7
35991: PUSH
35992: LD_INT 1
35994: PLUS
35995: PPUSH
35996: LD_VAR 0 9
36000: PUSH
36001: LD_VAR 0 10
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PPUSH
36010: CALL_OW 1
36014: ST_TO_ADDR
36015: GO 36031
// i := i - 1 ;
36017: LD_ADDR_VAR 0 5
36021: PUSH
36022: LD_VAR 0 5
36026: PUSH
36027: LD_INT 1
36029: MINUS
36030: ST_TO_ADDR
// end ;
36031: GO 35837
36033: POP
36034: POP
// for i in tmp do
36035: LD_ADDR_VAR 0 5
36039: PUSH
36040: LD_VAR 0 7
36044: PUSH
36045: FOR_IN
36046: IFFALSE 36084
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36048: LD_VAR 0 1
36052: PPUSH
36053: LD_VAR 0 5
36057: PUSH
36058: LD_INT 1
36060: ARRAY
36061: PPUSH
36062: LD_VAR 0 5
36066: PUSH
36067: LD_INT 2
36069: ARRAY
36070: PPUSH
36071: CALL 35030 0 3
36075: NOT
36076: IFFALSE 36082
// exit ;
36078: POP
36079: POP
36080: GO 36086
36082: GO 36045
36084: POP
36085: POP
// end ;
36086: LD_VAR 0 4
36090: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36091: LD_INT 0
36093: PPUSH
36094: PPUSH
36095: PPUSH
36096: PPUSH
36097: PPUSH
36098: PPUSH
36099: PPUSH
// if not GetClass ( unit ) = class_sniper then
36100: LD_VAR 0 1
36104: PPUSH
36105: CALL_OW 257
36109: PUSH
36110: LD_INT 5
36112: EQUAL
36113: NOT
36114: IFFALSE 36118
// exit ;
36116: GO 36506
// dist := 8 ;
36118: LD_ADDR_VAR 0 5
36122: PUSH
36123: LD_INT 8
36125: ST_TO_ADDR
// viewRange := 12 ;
36126: LD_ADDR_VAR 0 7
36130: PUSH
36131: LD_INT 12
36133: ST_TO_ADDR
// side := GetSide ( unit ) ;
36134: LD_ADDR_VAR 0 6
36138: PUSH
36139: LD_VAR 0 1
36143: PPUSH
36144: CALL_OW 255
36148: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36149: LD_INT 61
36151: PPUSH
36152: LD_VAR 0 6
36156: PPUSH
36157: CALL_OW 321
36161: PUSH
36162: LD_INT 2
36164: EQUAL
36165: IFFALSE 36175
// viewRange := 16 ;
36167: LD_ADDR_VAR 0 7
36171: PUSH
36172: LD_INT 16
36174: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36175: LD_VAR 0 1
36179: PPUSH
36180: LD_VAR 0 2
36184: PPUSH
36185: LD_VAR 0 3
36189: PPUSH
36190: CALL_OW 297
36194: PUSH
36195: LD_VAR 0 5
36199: GREATER
36200: IFFALSE 36279
// begin ComMoveXY ( unit , x , y ) ;
36202: LD_VAR 0 1
36206: PPUSH
36207: LD_VAR 0 2
36211: PPUSH
36212: LD_VAR 0 3
36216: PPUSH
36217: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36221: LD_INT 35
36223: PPUSH
36224: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36228: LD_VAR 0 1
36232: PPUSH
36233: LD_VAR 0 2
36237: PPUSH
36238: LD_VAR 0 3
36242: PPUSH
36243: CALL 72696 0 3
36247: NOT
36248: IFFALSE 36252
// exit ;
36250: GO 36506
// until GetDistUnitXY ( unit , x , y ) < dist ;
36252: LD_VAR 0 1
36256: PPUSH
36257: LD_VAR 0 2
36261: PPUSH
36262: LD_VAR 0 3
36266: PPUSH
36267: CALL_OW 297
36271: PUSH
36272: LD_VAR 0 5
36276: LESS
36277: IFFALSE 36221
// end ; ComTurnXY ( unit , x , y ) ;
36279: LD_VAR 0 1
36283: PPUSH
36284: LD_VAR 0 2
36288: PPUSH
36289: LD_VAR 0 3
36293: PPUSH
36294: CALL_OW 118
// wait ( 5 ) ;
36298: LD_INT 5
36300: PPUSH
36301: CALL_OW 67
// _d := GetDir ( unit ) ;
36305: LD_ADDR_VAR 0 10
36309: PUSH
36310: LD_VAR 0 1
36314: PPUSH
36315: CALL_OW 254
36319: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36320: LD_ADDR_VAR 0 8
36324: PUSH
36325: LD_VAR 0 1
36329: PPUSH
36330: CALL_OW 250
36334: PPUSH
36335: LD_VAR 0 10
36339: PPUSH
36340: LD_VAR 0 5
36344: PPUSH
36345: CALL_OW 272
36349: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36350: LD_ADDR_VAR 0 9
36354: PUSH
36355: LD_VAR 0 1
36359: PPUSH
36360: CALL_OW 251
36364: PPUSH
36365: LD_VAR 0 10
36369: PPUSH
36370: LD_VAR 0 5
36374: PPUSH
36375: CALL_OW 273
36379: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36380: LD_VAR 0 8
36384: PPUSH
36385: LD_VAR 0 9
36389: PPUSH
36390: CALL_OW 488
36394: NOT
36395: IFFALSE 36399
// exit ;
36397: GO 36506
// ComAnimCustom ( unit , 1 ) ;
36399: LD_VAR 0 1
36403: PPUSH
36404: LD_INT 1
36406: PPUSH
36407: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36411: LD_VAR 0 8
36415: PPUSH
36416: LD_VAR 0 9
36420: PPUSH
36421: LD_VAR 0 6
36425: PPUSH
36426: LD_VAR 0 7
36430: PPUSH
36431: CALL_OW 330
// repeat wait ( 1 ) ;
36435: LD_INT 1
36437: PPUSH
36438: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36442: LD_VAR 0 1
36446: PPUSH
36447: CALL_OW 316
36451: PUSH
36452: LD_VAR 0 1
36456: PPUSH
36457: CALL_OW 314
36461: OR
36462: PUSH
36463: LD_VAR 0 1
36467: PPUSH
36468: CALL_OW 302
36472: NOT
36473: OR
36474: PUSH
36475: LD_VAR 0 1
36479: PPUSH
36480: CALL_OW 301
36484: OR
36485: IFFALSE 36435
// RemoveSeeing ( _x , _y , side ) ;
36487: LD_VAR 0 8
36491: PPUSH
36492: LD_VAR 0 9
36496: PPUSH
36497: LD_VAR 0 6
36501: PPUSH
36502: CALL_OW 331
// end ; end_of_file
36506: LD_VAR 0 4
36510: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36511: LD_INT 0
36513: PPUSH
36514: PPUSH
// if exist_mode then
36515: LD_VAR 0 2
36519: IFFALSE 36544
// unit := CreateCharacter ( prefix & ident ) else
36521: LD_ADDR_VAR 0 5
36525: PUSH
36526: LD_VAR 0 3
36530: PUSH
36531: LD_VAR 0 1
36535: STR
36536: PPUSH
36537: CALL_OW 34
36541: ST_TO_ADDR
36542: GO 36559
// unit := NewCharacter ( ident ) ;
36544: LD_ADDR_VAR 0 5
36548: PUSH
36549: LD_VAR 0 1
36553: PPUSH
36554: CALL_OW 25
36558: ST_TO_ADDR
// result := unit ;
36559: LD_ADDR_VAR 0 4
36563: PUSH
36564: LD_VAR 0 5
36568: ST_TO_ADDR
// end ;
36569: LD_VAR 0 4
36573: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36574: LD_INT 0
36576: PPUSH
36577: PPUSH
// if not side or not nation then
36578: LD_VAR 0 1
36582: NOT
36583: PUSH
36584: LD_VAR 0 2
36588: NOT
36589: OR
36590: IFFALSE 36594
// exit ;
36592: GO 37362
// case nation of nation_american :
36594: LD_VAR 0 2
36598: PUSH
36599: LD_INT 1
36601: DOUBLE
36602: EQUAL
36603: IFTRUE 36607
36605: GO 36821
36607: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36608: LD_ADDR_VAR 0 4
36612: PUSH
36613: LD_INT 35
36615: PUSH
36616: LD_INT 45
36618: PUSH
36619: LD_INT 46
36621: PUSH
36622: LD_INT 47
36624: PUSH
36625: LD_INT 82
36627: PUSH
36628: LD_INT 83
36630: PUSH
36631: LD_INT 84
36633: PUSH
36634: LD_INT 85
36636: PUSH
36637: LD_INT 86
36639: PUSH
36640: LD_INT 1
36642: PUSH
36643: LD_INT 2
36645: PUSH
36646: LD_INT 6
36648: PUSH
36649: LD_INT 15
36651: PUSH
36652: LD_INT 16
36654: PUSH
36655: LD_INT 7
36657: PUSH
36658: LD_INT 12
36660: PUSH
36661: LD_INT 13
36663: PUSH
36664: LD_INT 10
36666: PUSH
36667: LD_INT 14
36669: PUSH
36670: LD_INT 20
36672: PUSH
36673: LD_INT 21
36675: PUSH
36676: LD_INT 22
36678: PUSH
36679: LD_INT 25
36681: PUSH
36682: LD_INT 32
36684: PUSH
36685: LD_INT 27
36687: PUSH
36688: LD_INT 36
36690: PUSH
36691: LD_INT 69
36693: PUSH
36694: LD_INT 39
36696: PUSH
36697: LD_INT 34
36699: PUSH
36700: LD_INT 40
36702: PUSH
36703: LD_INT 48
36705: PUSH
36706: LD_INT 49
36708: PUSH
36709: LD_INT 50
36711: PUSH
36712: LD_INT 51
36714: PUSH
36715: LD_INT 52
36717: PUSH
36718: LD_INT 53
36720: PUSH
36721: LD_INT 54
36723: PUSH
36724: LD_INT 55
36726: PUSH
36727: LD_INT 56
36729: PUSH
36730: LD_INT 57
36732: PUSH
36733: LD_INT 58
36735: PUSH
36736: LD_INT 59
36738: PUSH
36739: LD_INT 60
36741: PUSH
36742: LD_INT 61
36744: PUSH
36745: LD_INT 62
36747: PUSH
36748: LD_INT 80
36750: PUSH
36751: LD_INT 82
36753: PUSH
36754: LD_INT 83
36756: PUSH
36757: LD_INT 84
36759: PUSH
36760: LD_INT 85
36762: PUSH
36763: LD_INT 86
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: ST_TO_ADDR
36819: GO 37286
36821: LD_INT 2
36823: DOUBLE
36824: EQUAL
36825: IFTRUE 36829
36827: GO 37055
36829: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36830: LD_ADDR_VAR 0 4
36834: PUSH
36835: LD_INT 35
36837: PUSH
36838: LD_INT 45
36840: PUSH
36841: LD_INT 46
36843: PUSH
36844: LD_INT 47
36846: PUSH
36847: LD_INT 82
36849: PUSH
36850: LD_INT 83
36852: PUSH
36853: LD_INT 84
36855: PUSH
36856: LD_INT 85
36858: PUSH
36859: LD_INT 87
36861: PUSH
36862: LD_INT 70
36864: PUSH
36865: LD_INT 1
36867: PUSH
36868: LD_INT 11
36870: PUSH
36871: LD_INT 3
36873: PUSH
36874: LD_INT 4
36876: PUSH
36877: LD_INT 5
36879: PUSH
36880: LD_INT 6
36882: PUSH
36883: LD_INT 15
36885: PUSH
36886: LD_INT 18
36888: PUSH
36889: LD_INT 7
36891: PUSH
36892: LD_INT 17
36894: PUSH
36895: LD_INT 8
36897: PUSH
36898: LD_INT 20
36900: PUSH
36901: LD_INT 21
36903: PUSH
36904: LD_INT 22
36906: PUSH
36907: LD_INT 72
36909: PUSH
36910: LD_INT 26
36912: PUSH
36913: LD_INT 69
36915: PUSH
36916: LD_INT 39
36918: PUSH
36919: LD_INT 40
36921: PUSH
36922: LD_INT 41
36924: PUSH
36925: LD_INT 42
36927: PUSH
36928: LD_INT 43
36930: PUSH
36931: LD_INT 48
36933: PUSH
36934: LD_INT 49
36936: PUSH
36937: LD_INT 50
36939: PUSH
36940: LD_INT 51
36942: PUSH
36943: LD_INT 52
36945: PUSH
36946: LD_INT 53
36948: PUSH
36949: LD_INT 54
36951: PUSH
36952: LD_INT 55
36954: PUSH
36955: LD_INT 56
36957: PUSH
36958: LD_INT 60
36960: PUSH
36961: LD_INT 61
36963: PUSH
36964: LD_INT 62
36966: PUSH
36967: LD_INT 66
36969: PUSH
36970: LD_INT 67
36972: PUSH
36973: LD_INT 68
36975: PUSH
36976: LD_INT 81
36978: PUSH
36979: LD_INT 82
36981: PUSH
36982: LD_INT 83
36984: PUSH
36985: LD_INT 84
36987: PUSH
36988: LD_INT 85
36990: PUSH
36991: LD_INT 87
36993: PUSH
36994: LD_INT 88
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: ST_TO_ADDR
37053: GO 37286
37055: LD_INT 3
37057: DOUBLE
37058: EQUAL
37059: IFTRUE 37063
37061: GO 37285
37063: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37064: LD_ADDR_VAR 0 4
37068: PUSH
37069: LD_INT 46
37071: PUSH
37072: LD_INT 47
37074: PUSH
37075: LD_INT 1
37077: PUSH
37078: LD_INT 2
37080: PUSH
37081: LD_INT 82
37083: PUSH
37084: LD_INT 83
37086: PUSH
37087: LD_INT 84
37089: PUSH
37090: LD_INT 85
37092: PUSH
37093: LD_INT 86
37095: PUSH
37096: LD_INT 11
37098: PUSH
37099: LD_INT 9
37101: PUSH
37102: LD_INT 20
37104: PUSH
37105: LD_INT 19
37107: PUSH
37108: LD_INT 21
37110: PUSH
37111: LD_INT 24
37113: PUSH
37114: LD_INT 22
37116: PUSH
37117: LD_INT 25
37119: PUSH
37120: LD_INT 28
37122: PUSH
37123: LD_INT 29
37125: PUSH
37126: LD_INT 30
37128: PUSH
37129: LD_INT 31
37131: PUSH
37132: LD_INT 37
37134: PUSH
37135: LD_INT 38
37137: PUSH
37138: LD_INT 32
37140: PUSH
37141: LD_INT 27
37143: PUSH
37144: LD_INT 33
37146: PUSH
37147: LD_INT 69
37149: PUSH
37150: LD_INT 39
37152: PUSH
37153: LD_INT 34
37155: PUSH
37156: LD_INT 40
37158: PUSH
37159: LD_INT 71
37161: PUSH
37162: LD_INT 23
37164: PUSH
37165: LD_INT 44
37167: PUSH
37168: LD_INT 48
37170: PUSH
37171: LD_INT 49
37173: PUSH
37174: LD_INT 50
37176: PUSH
37177: LD_INT 51
37179: PUSH
37180: LD_INT 52
37182: PUSH
37183: LD_INT 53
37185: PUSH
37186: LD_INT 54
37188: PUSH
37189: LD_INT 55
37191: PUSH
37192: LD_INT 56
37194: PUSH
37195: LD_INT 57
37197: PUSH
37198: LD_INT 58
37200: PUSH
37201: LD_INT 59
37203: PUSH
37204: LD_INT 63
37206: PUSH
37207: LD_INT 64
37209: PUSH
37210: LD_INT 65
37212: PUSH
37213: LD_INT 82
37215: PUSH
37216: LD_INT 83
37218: PUSH
37219: LD_INT 84
37221: PUSH
37222: LD_INT 85
37224: PUSH
37225: LD_INT 86
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: ST_TO_ADDR
37283: GO 37286
37285: POP
// if state > - 1 and state < 3 then
37286: LD_VAR 0 3
37290: PUSH
37291: LD_INT 1
37293: NEG
37294: GREATER
37295: PUSH
37296: LD_VAR 0 3
37300: PUSH
37301: LD_INT 3
37303: LESS
37304: AND
37305: IFFALSE 37362
// for i in result do
37307: LD_ADDR_VAR 0 5
37311: PUSH
37312: LD_VAR 0 4
37316: PUSH
37317: FOR_IN
37318: IFFALSE 37360
// if GetTech ( i , side ) <> state then
37320: LD_VAR 0 5
37324: PPUSH
37325: LD_VAR 0 1
37329: PPUSH
37330: CALL_OW 321
37334: PUSH
37335: LD_VAR 0 3
37339: NONEQUAL
37340: IFFALSE 37358
// result := result diff i ;
37342: LD_ADDR_VAR 0 4
37346: PUSH
37347: LD_VAR 0 4
37351: PUSH
37352: LD_VAR 0 5
37356: DIFF
37357: ST_TO_ADDR
37358: GO 37317
37360: POP
37361: POP
// end ;
37362: LD_VAR 0 4
37366: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37367: LD_INT 0
37369: PPUSH
37370: PPUSH
37371: PPUSH
// result := true ;
37372: LD_ADDR_VAR 0 3
37376: PUSH
37377: LD_INT 1
37379: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37380: LD_ADDR_VAR 0 5
37384: PUSH
37385: LD_VAR 0 2
37389: PPUSH
37390: CALL_OW 480
37394: ST_TO_ADDR
// if not tmp then
37395: LD_VAR 0 5
37399: NOT
37400: IFFALSE 37404
// exit ;
37402: GO 37453
// for i in tmp do
37404: LD_ADDR_VAR 0 4
37408: PUSH
37409: LD_VAR 0 5
37413: PUSH
37414: FOR_IN
37415: IFFALSE 37451
// if GetTech ( i , side ) <> state_researched then
37417: LD_VAR 0 4
37421: PPUSH
37422: LD_VAR 0 1
37426: PPUSH
37427: CALL_OW 321
37431: PUSH
37432: LD_INT 2
37434: NONEQUAL
37435: IFFALSE 37449
// begin result := false ;
37437: LD_ADDR_VAR 0 3
37441: PUSH
37442: LD_INT 0
37444: ST_TO_ADDR
// exit ;
37445: POP
37446: POP
37447: GO 37453
// end ;
37449: GO 37414
37451: POP
37452: POP
// end ;
37453: LD_VAR 0 3
37457: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37458: LD_INT 0
37460: PPUSH
37461: PPUSH
37462: PPUSH
37463: PPUSH
37464: PPUSH
37465: PPUSH
37466: PPUSH
37467: PPUSH
37468: PPUSH
37469: PPUSH
37470: PPUSH
37471: PPUSH
37472: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37473: LD_VAR 0 1
37477: NOT
37478: PUSH
37479: LD_VAR 0 1
37483: PPUSH
37484: CALL_OW 257
37488: PUSH
37489: LD_INT 9
37491: NONEQUAL
37492: OR
37493: IFFALSE 37497
// exit ;
37495: GO 38070
// side := GetSide ( unit ) ;
37497: LD_ADDR_VAR 0 9
37501: PUSH
37502: LD_VAR 0 1
37506: PPUSH
37507: CALL_OW 255
37511: ST_TO_ADDR
// tech_space := tech_spacanom ;
37512: LD_ADDR_VAR 0 12
37516: PUSH
37517: LD_INT 29
37519: ST_TO_ADDR
// tech_time := tech_taurad ;
37520: LD_ADDR_VAR 0 13
37524: PUSH
37525: LD_INT 28
37527: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37528: LD_ADDR_VAR 0 11
37532: PUSH
37533: LD_VAR 0 1
37537: PPUSH
37538: CALL_OW 310
37542: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37543: LD_VAR 0 11
37547: PPUSH
37548: CALL_OW 247
37552: PUSH
37553: LD_INT 2
37555: EQUAL
37556: IFFALSE 37560
// exit ;
37558: GO 38070
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37560: LD_ADDR_VAR 0 8
37564: PUSH
37565: LD_INT 81
37567: PUSH
37568: LD_VAR 0 9
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 3
37579: PUSH
37580: LD_INT 21
37582: PUSH
37583: LD_INT 3
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PPUSH
37598: CALL_OW 69
37602: ST_TO_ADDR
// if not tmp then
37603: LD_VAR 0 8
37607: NOT
37608: IFFALSE 37612
// exit ;
37610: GO 38070
// if in_unit then
37612: LD_VAR 0 11
37616: IFFALSE 37640
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37618: LD_ADDR_VAR 0 10
37622: PUSH
37623: LD_VAR 0 8
37627: PPUSH
37628: LD_VAR 0 11
37632: PPUSH
37633: CALL_OW 74
37637: ST_TO_ADDR
37638: GO 37660
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37640: LD_ADDR_VAR 0 10
37644: PUSH
37645: LD_VAR 0 8
37649: PPUSH
37650: LD_VAR 0 1
37654: PPUSH
37655: CALL_OW 74
37659: ST_TO_ADDR
// if not enemy then
37660: LD_VAR 0 10
37664: NOT
37665: IFFALSE 37669
// exit ;
37667: GO 38070
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37669: LD_VAR 0 11
37673: PUSH
37674: LD_VAR 0 11
37678: PPUSH
37679: LD_VAR 0 10
37683: PPUSH
37684: CALL_OW 296
37688: PUSH
37689: LD_INT 13
37691: GREATER
37692: AND
37693: PUSH
37694: LD_VAR 0 1
37698: PPUSH
37699: LD_VAR 0 10
37703: PPUSH
37704: CALL_OW 296
37708: PUSH
37709: LD_INT 12
37711: GREATER
37712: OR
37713: IFFALSE 37717
// exit ;
37715: GO 38070
// missile := [ 1 ] ;
37717: LD_ADDR_VAR 0 14
37721: PUSH
37722: LD_INT 1
37724: PUSH
37725: EMPTY
37726: LIST
37727: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37728: LD_VAR 0 9
37732: PPUSH
37733: LD_VAR 0 12
37737: PPUSH
37738: CALL_OW 325
37742: IFFALSE 37771
// missile := Replace ( missile , missile + 1 , 2 ) ;
37744: LD_ADDR_VAR 0 14
37748: PUSH
37749: LD_VAR 0 14
37753: PPUSH
37754: LD_VAR 0 14
37758: PUSH
37759: LD_INT 1
37761: PLUS
37762: PPUSH
37763: LD_INT 2
37765: PPUSH
37766: CALL_OW 1
37770: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37771: LD_VAR 0 9
37775: PPUSH
37776: LD_VAR 0 13
37780: PPUSH
37781: CALL_OW 325
37785: PUSH
37786: LD_VAR 0 10
37790: PPUSH
37791: CALL_OW 255
37795: PPUSH
37796: LD_VAR 0 13
37800: PPUSH
37801: CALL_OW 325
37805: NOT
37806: AND
37807: IFFALSE 37836
// missile := Replace ( missile , missile + 1 , 3 ) ;
37809: LD_ADDR_VAR 0 14
37813: PUSH
37814: LD_VAR 0 14
37818: PPUSH
37819: LD_VAR 0 14
37823: PUSH
37824: LD_INT 1
37826: PLUS
37827: PPUSH
37828: LD_INT 3
37830: PPUSH
37831: CALL_OW 1
37835: ST_TO_ADDR
// if missile < 2 then
37836: LD_VAR 0 14
37840: PUSH
37841: LD_INT 2
37843: LESS
37844: IFFALSE 37848
// exit ;
37846: GO 38070
// x := GetX ( enemy ) ;
37848: LD_ADDR_VAR 0 4
37852: PUSH
37853: LD_VAR 0 10
37857: PPUSH
37858: CALL_OW 250
37862: ST_TO_ADDR
// y := GetY ( enemy ) ;
37863: LD_ADDR_VAR 0 5
37867: PUSH
37868: LD_VAR 0 10
37872: PPUSH
37873: CALL_OW 251
37877: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37878: LD_ADDR_VAR 0 6
37882: PUSH
37883: LD_VAR 0 4
37887: PUSH
37888: LD_INT 1
37890: NEG
37891: PPUSH
37892: LD_INT 1
37894: PPUSH
37895: CALL_OW 12
37899: PLUS
37900: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37901: LD_ADDR_VAR 0 7
37905: PUSH
37906: LD_VAR 0 5
37910: PUSH
37911: LD_INT 1
37913: NEG
37914: PPUSH
37915: LD_INT 1
37917: PPUSH
37918: CALL_OW 12
37922: PLUS
37923: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37924: LD_VAR 0 6
37928: PPUSH
37929: LD_VAR 0 7
37933: PPUSH
37934: CALL_OW 488
37938: NOT
37939: IFFALSE 37961
// begin _x := x ;
37941: LD_ADDR_VAR 0 6
37945: PUSH
37946: LD_VAR 0 4
37950: ST_TO_ADDR
// _y := y ;
37951: LD_ADDR_VAR 0 7
37955: PUSH
37956: LD_VAR 0 5
37960: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37961: LD_ADDR_VAR 0 3
37965: PUSH
37966: LD_INT 1
37968: PPUSH
37969: LD_VAR 0 14
37973: PPUSH
37974: CALL_OW 12
37978: ST_TO_ADDR
// case i of 1 :
37979: LD_VAR 0 3
37983: PUSH
37984: LD_INT 1
37986: DOUBLE
37987: EQUAL
37988: IFTRUE 37992
37990: GO 38009
37992: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37993: LD_VAR 0 1
37997: PPUSH
37998: LD_VAR 0 10
38002: PPUSH
38003: CALL_OW 115
38007: GO 38070
38009: LD_INT 2
38011: DOUBLE
38012: EQUAL
38013: IFTRUE 38017
38015: GO 38039
38017: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38018: LD_VAR 0 1
38022: PPUSH
38023: LD_VAR 0 6
38027: PPUSH
38028: LD_VAR 0 7
38032: PPUSH
38033: CALL_OW 153
38037: GO 38070
38039: LD_INT 3
38041: DOUBLE
38042: EQUAL
38043: IFTRUE 38047
38045: GO 38069
38047: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38048: LD_VAR 0 1
38052: PPUSH
38053: LD_VAR 0 6
38057: PPUSH
38058: LD_VAR 0 7
38062: PPUSH
38063: CALL_OW 154
38067: GO 38070
38069: POP
// end ;
38070: LD_VAR 0 2
38074: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38075: LD_INT 0
38077: PPUSH
38078: PPUSH
38079: PPUSH
38080: PPUSH
38081: PPUSH
38082: PPUSH
// if not unit or not building then
38083: LD_VAR 0 1
38087: NOT
38088: PUSH
38089: LD_VAR 0 2
38093: NOT
38094: OR
38095: IFFALSE 38099
// exit ;
38097: GO 38257
// x := GetX ( building ) ;
38099: LD_ADDR_VAR 0 5
38103: PUSH
38104: LD_VAR 0 2
38108: PPUSH
38109: CALL_OW 250
38113: ST_TO_ADDR
// y := GetY ( building ) ;
38114: LD_ADDR_VAR 0 6
38118: PUSH
38119: LD_VAR 0 2
38123: PPUSH
38124: CALL_OW 251
38128: ST_TO_ADDR
// for i = 0 to 5 do
38129: LD_ADDR_VAR 0 4
38133: PUSH
38134: DOUBLE
38135: LD_INT 0
38137: DEC
38138: ST_TO_ADDR
38139: LD_INT 5
38141: PUSH
38142: FOR_TO
38143: IFFALSE 38255
// begin _x := ShiftX ( x , i , 3 ) ;
38145: LD_ADDR_VAR 0 7
38149: PUSH
38150: LD_VAR 0 5
38154: PPUSH
38155: LD_VAR 0 4
38159: PPUSH
38160: LD_INT 3
38162: PPUSH
38163: CALL_OW 272
38167: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38168: LD_ADDR_VAR 0 8
38172: PUSH
38173: LD_VAR 0 6
38177: PPUSH
38178: LD_VAR 0 4
38182: PPUSH
38183: LD_INT 3
38185: PPUSH
38186: CALL_OW 273
38190: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38191: LD_VAR 0 7
38195: PPUSH
38196: LD_VAR 0 8
38200: PPUSH
38201: CALL_OW 488
38205: NOT
38206: IFFALSE 38210
// continue ;
38208: GO 38142
// if HexInfo ( _x , _y ) = 0 then
38210: LD_VAR 0 7
38214: PPUSH
38215: LD_VAR 0 8
38219: PPUSH
38220: CALL_OW 428
38224: PUSH
38225: LD_INT 0
38227: EQUAL
38228: IFFALSE 38253
// begin ComMoveXY ( unit , _x , _y ) ;
38230: LD_VAR 0 1
38234: PPUSH
38235: LD_VAR 0 7
38239: PPUSH
38240: LD_VAR 0 8
38244: PPUSH
38245: CALL_OW 111
// exit ;
38249: POP
38250: POP
38251: GO 38257
// end ; end ;
38253: GO 38142
38255: POP
38256: POP
// end ;
38257: LD_VAR 0 3
38261: RET
// export function ScanBase ( side , base_area ) ; begin
38262: LD_INT 0
38264: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38265: LD_ADDR_VAR 0 3
38269: PUSH
38270: LD_VAR 0 2
38274: PPUSH
38275: LD_INT 81
38277: PUSH
38278: LD_VAR 0 1
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PPUSH
38287: CALL_OW 70
38291: ST_TO_ADDR
// end ;
38292: LD_VAR 0 3
38296: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38297: LD_INT 0
38299: PPUSH
38300: PPUSH
38301: PPUSH
38302: PPUSH
// result := false ;
38303: LD_ADDR_VAR 0 2
38307: PUSH
38308: LD_INT 0
38310: ST_TO_ADDR
// side := GetSide ( unit ) ;
38311: LD_ADDR_VAR 0 3
38315: PUSH
38316: LD_VAR 0 1
38320: PPUSH
38321: CALL_OW 255
38325: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38326: LD_ADDR_VAR 0 4
38330: PUSH
38331: LD_VAR 0 1
38335: PPUSH
38336: CALL_OW 248
38340: ST_TO_ADDR
// case nat of 1 :
38341: LD_VAR 0 4
38345: PUSH
38346: LD_INT 1
38348: DOUBLE
38349: EQUAL
38350: IFTRUE 38354
38352: GO 38365
38354: POP
// tech := tech_lassight ; 2 :
38355: LD_ADDR_VAR 0 5
38359: PUSH
38360: LD_INT 12
38362: ST_TO_ADDR
38363: GO 38404
38365: LD_INT 2
38367: DOUBLE
38368: EQUAL
38369: IFTRUE 38373
38371: GO 38384
38373: POP
// tech := tech_mortar ; 3 :
38374: LD_ADDR_VAR 0 5
38378: PUSH
38379: LD_INT 41
38381: ST_TO_ADDR
38382: GO 38404
38384: LD_INT 3
38386: DOUBLE
38387: EQUAL
38388: IFTRUE 38392
38390: GO 38403
38392: POP
// tech := tech_bazooka ; end ;
38393: LD_ADDR_VAR 0 5
38397: PUSH
38398: LD_INT 44
38400: ST_TO_ADDR
38401: GO 38404
38403: POP
// if Researched ( side , tech ) then
38404: LD_VAR 0 3
38408: PPUSH
38409: LD_VAR 0 5
38413: PPUSH
38414: CALL_OW 325
38418: IFFALSE 38445
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38420: LD_ADDR_VAR 0 2
38424: PUSH
38425: LD_INT 5
38427: PUSH
38428: LD_INT 8
38430: PUSH
38431: LD_INT 9
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: LIST
38438: PUSH
38439: LD_VAR 0 4
38443: ARRAY
38444: ST_TO_ADDR
// end ;
38445: LD_VAR 0 2
38449: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38450: LD_INT 0
38452: PPUSH
38453: PPUSH
38454: PPUSH
// if not mines then
38455: LD_VAR 0 2
38459: NOT
38460: IFFALSE 38464
// exit ;
38462: GO 38608
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38464: LD_ADDR_VAR 0 5
38468: PUSH
38469: LD_INT 81
38471: PUSH
38472: LD_VAR 0 1
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 3
38483: PUSH
38484: LD_INT 21
38486: PUSH
38487: LD_INT 3
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PPUSH
38502: CALL_OW 69
38506: ST_TO_ADDR
// for i in mines do
38507: LD_ADDR_VAR 0 4
38511: PUSH
38512: LD_VAR 0 2
38516: PUSH
38517: FOR_IN
38518: IFFALSE 38606
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38520: LD_VAR 0 4
38524: PUSH
38525: LD_INT 1
38527: ARRAY
38528: PPUSH
38529: LD_VAR 0 4
38533: PUSH
38534: LD_INT 2
38536: ARRAY
38537: PPUSH
38538: CALL_OW 458
38542: NOT
38543: IFFALSE 38547
// continue ;
38545: GO 38517
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38547: LD_VAR 0 4
38551: PUSH
38552: LD_INT 1
38554: ARRAY
38555: PPUSH
38556: LD_VAR 0 4
38560: PUSH
38561: LD_INT 2
38563: ARRAY
38564: PPUSH
38565: CALL_OW 428
38569: PUSH
38570: LD_VAR 0 5
38574: IN
38575: IFFALSE 38604
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38577: LD_VAR 0 4
38581: PUSH
38582: LD_INT 1
38584: ARRAY
38585: PPUSH
38586: LD_VAR 0 4
38590: PUSH
38591: LD_INT 2
38593: ARRAY
38594: PPUSH
38595: LD_VAR 0 1
38599: PPUSH
38600: CALL_OW 456
// end ;
38604: GO 38517
38606: POP
38607: POP
// end ;
38608: LD_VAR 0 3
38612: RET
// export function Count ( array ) ; var i ; begin
38613: LD_INT 0
38615: PPUSH
38616: PPUSH
// result := 0 ;
38617: LD_ADDR_VAR 0 2
38621: PUSH
38622: LD_INT 0
38624: ST_TO_ADDR
// for i in array do
38625: LD_ADDR_VAR 0 3
38629: PUSH
38630: LD_VAR 0 1
38634: PUSH
38635: FOR_IN
38636: IFFALSE 38660
// if i then
38638: LD_VAR 0 3
38642: IFFALSE 38658
// result := result + 1 ;
38644: LD_ADDR_VAR 0 2
38648: PUSH
38649: LD_VAR 0 2
38653: PUSH
38654: LD_INT 1
38656: PLUS
38657: ST_TO_ADDR
38658: GO 38635
38660: POP
38661: POP
// end ;
38662: LD_VAR 0 2
38666: RET
// export function IsEmpty ( building ) ; begin
38667: LD_INT 0
38669: PPUSH
// if not building then
38670: LD_VAR 0 1
38674: NOT
38675: IFFALSE 38679
// exit ;
38677: GO 38722
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38679: LD_ADDR_VAR 0 2
38683: PUSH
38684: LD_VAR 0 1
38688: PUSH
38689: LD_INT 22
38691: PUSH
38692: LD_VAR 0 1
38696: PPUSH
38697: CALL_OW 255
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 58
38708: PUSH
38709: EMPTY
38710: LIST
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PPUSH
38716: CALL_OW 69
38720: IN
38721: ST_TO_ADDR
// end ;
38722: LD_VAR 0 2
38726: RET
// export function IsNotFull ( building ) ; var places ; begin
38727: LD_INT 0
38729: PPUSH
38730: PPUSH
// if not building then
38731: LD_VAR 0 1
38735: NOT
38736: IFFALSE 38740
// exit ;
38738: GO 38911
// result := false ;
38740: LD_ADDR_VAR 0 2
38744: PUSH
38745: LD_INT 0
38747: ST_TO_ADDR
// places := 0 ;
38748: LD_ADDR_VAR 0 3
38752: PUSH
38753: LD_INT 0
38755: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
38756: LD_VAR 0 1
38760: PPUSH
38761: CALL_OW 266
38765: PUSH
38766: LD_INT 0
38768: DOUBLE
38769: EQUAL
38770: IFTRUE 38828
38772: LD_INT 1
38774: DOUBLE
38775: EQUAL
38776: IFTRUE 38828
38778: LD_INT 6
38780: DOUBLE
38781: EQUAL
38782: IFTRUE 38828
38784: LD_INT 7
38786: DOUBLE
38787: EQUAL
38788: IFTRUE 38828
38790: LD_INT 8
38792: DOUBLE
38793: EQUAL
38794: IFTRUE 38828
38796: LD_INT 4
38798: DOUBLE
38799: EQUAL
38800: IFTRUE 38828
38802: LD_INT 5
38804: DOUBLE
38805: EQUAL
38806: IFTRUE 38828
38808: LD_INT 2
38810: DOUBLE
38811: EQUAL
38812: IFTRUE 38828
38814: LD_INT 3
38816: DOUBLE
38817: EQUAL
38818: IFTRUE 38828
38820: LD_INT 35
38822: DOUBLE
38823: EQUAL
38824: IFTRUE 38828
38826: GO 38839
38828: POP
// places := 6 ; b_bunker , b_breastwork :
38829: LD_ADDR_VAR 0 3
38833: PUSH
38834: LD_INT 6
38836: ST_TO_ADDR
38837: GO 38884
38839: LD_INT 32
38841: DOUBLE
38842: EQUAL
38843: IFTRUE 38853
38845: LD_INT 31
38847: DOUBLE
38848: EQUAL
38849: IFTRUE 38853
38851: GO 38864
38853: POP
// places := 1 ; b_control_tower :
38854: LD_ADDR_VAR 0 3
38858: PUSH
38859: LD_INT 1
38861: ST_TO_ADDR
38862: GO 38884
38864: LD_INT 36
38866: DOUBLE
38867: EQUAL
38868: IFTRUE 38872
38870: GO 38883
38872: POP
// places := 3 ; end ;
38873: LD_ADDR_VAR 0 3
38877: PUSH
38878: LD_INT 3
38880: ST_TO_ADDR
38881: GO 38884
38883: POP
// if places then
38884: LD_VAR 0 3
38888: IFFALSE 38911
// result := UnitsInside ( building ) < places ;
38890: LD_ADDR_VAR 0 2
38894: PUSH
38895: LD_VAR 0 1
38899: PPUSH
38900: CALL_OW 313
38904: PUSH
38905: LD_VAR 0 3
38909: LESS
38910: ST_TO_ADDR
// end ;
38911: LD_VAR 0 2
38915: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38916: LD_INT 0
38918: PPUSH
38919: PPUSH
38920: PPUSH
38921: PPUSH
// tmp := [ ] ;
38922: LD_ADDR_VAR 0 3
38926: PUSH
38927: EMPTY
38928: ST_TO_ADDR
// list := [ ] ;
38929: LD_ADDR_VAR 0 5
38933: PUSH
38934: EMPTY
38935: ST_TO_ADDR
// for i = 16 to 25 do
38936: LD_ADDR_VAR 0 4
38940: PUSH
38941: DOUBLE
38942: LD_INT 16
38944: DEC
38945: ST_TO_ADDR
38946: LD_INT 25
38948: PUSH
38949: FOR_TO
38950: IFFALSE 39023
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38952: LD_ADDR_VAR 0 3
38956: PUSH
38957: LD_VAR 0 3
38961: PUSH
38962: LD_INT 22
38964: PUSH
38965: LD_VAR 0 1
38969: PPUSH
38970: CALL_OW 255
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 91
38981: PUSH
38982: LD_VAR 0 1
38986: PUSH
38987: LD_INT 6
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 30
38997: PUSH
38998: LD_VAR 0 4
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: LIST
39011: PUSH
39012: EMPTY
39013: LIST
39014: PPUSH
39015: CALL_OW 69
39019: ADD
39020: ST_TO_ADDR
39021: GO 38949
39023: POP
39024: POP
// for i = 1 to tmp do
39025: LD_ADDR_VAR 0 4
39029: PUSH
39030: DOUBLE
39031: LD_INT 1
39033: DEC
39034: ST_TO_ADDR
39035: LD_VAR 0 3
39039: PUSH
39040: FOR_TO
39041: IFFALSE 39129
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39043: LD_ADDR_VAR 0 5
39047: PUSH
39048: LD_VAR 0 5
39052: PUSH
39053: LD_VAR 0 3
39057: PUSH
39058: LD_VAR 0 4
39062: ARRAY
39063: PPUSH
39064: CALL_OW 266
39068: PUSH
39069: LD_VAR 0 3
39073: PUSH
39074: LD_VAR 0 4
39078: ARRAY
39079: PPUSH
39080: CALL_OW 250
39084: PUSH
39085: LD_VAR 0 3
39089: PUSH
39090: LD_VAR 0 4
39094: ARRAY
39095: PPUSH
39096: CALL_OW 251
39100: PUSH
39101: LD_VAR 0 3
39105: PUSH
39106: LD_VAR 0 4
39110: ARRAY
39111: PPUSH
39112: CALL_OW 254
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: PUSH
39123: EMPTY
39124: LIST
39125: ADD
39126: ST_TO_ADDR
39127: GO 39040
39129: POP
39130: POP
// result := list ;
39131: LD_ADDR_VAR 0 2
39135: PUSH
39136: LD_VAR 0 5
39140: ST_TO_ADDR
// end ;
39141: LD_VAR 0 2
39145: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39146: LD_INT 0
39148: PPUSH
39149: PPUSH
39150: PPUSH
39151: PPUSH
39152: PPUSH
39153: PPUSH
39154: PPUSH
// if not factory then
39155: LD_VAR 0 1
39159: NOT
39160: IFFALSE 39164
// exit ;
39162: GO 39757
// if control = control_apeman then
39164: LD_VAR 0 4
39168: PUSH
39169: LD_INT 5
39171: EQUAL
39172: IFFALSE 39281
// begin tmp := UnitsInside ( factory ) ;
39174: LD_ADDR_VAR 0 8
39178: PUSH
39179: LD_VAR 0 1
39183: PPUSH
39184: CALL_OW 313
39188: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39189: LD_VAR 0 8
39193: PPUSH
39194: LD_INT 25
39196: PUSH
39197: LD_INT 12
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PPUSH
39204: CALL_OW 72
39208: NOT
39209: IFFALSE 39219
// control := control_manual ;
39211: LD_ADDR_VAR 0 4
39215: PUSH
39216: LD_INT 1
39218: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39219: LD_ADDR_VAR 0 8
39223: PUSH
39224: LD_VAR 0 1
39228: PPUSH
39229: CALL 38916 0 1
39233: ST_TO_ADDR
// if tmp then
39234: LD_VAR 0 8
39238: IFFALSE 39281
// begin for i in tmp do
39240: LD_ADDR_VAR 0 7
39244: PUSH
39245: LD_VAR 0 8
39249: PUSH
39250: FOR_IN
39251: IFFALSE 39279
// if i [ 1 ] = b_ext_radio then
39253: LD_VAR 0 7
39257: PUSH
39258: LD_INT 1
39260: ARRAY
39261: PUSH
39262: LD_INT 22
39264: EQUAL
39265: IFFALSE 39277
// begin control := control_remote ;
39267: LD_ADDR_VAR 0 4
39271: PUSH
39272: LD_INT 2
39274: ST_TO_ADDR
// break ;
39275: GO 39279
// end ;
39277: GO 39250
39279: POP
39280: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39281: LD_VAR 0 1
39285: PPUSH
39286: LD_VAR 0 2
39290: PPUSH
39291: LD_VAR 0 3
39295: PPUSH
39296: LD_VAR 0 4
39300: PPUSH
39301: LD_VAR 0 5
39305: PPUSH
39306: CALL_OW 448
39310: IFFALSE 39345
// begin result := [ chassis , engine , control , weapon ] ;
39312: LD_ADDR_VAR 0 6
39316: PUSH
39317: LD_VAR 0 2
39321: PUSH
39322: LD_VAR 0 3
39326: PUSH
39327: LD_VAR 0 4
39331: PUSH
39332: LD_VAR 0 5
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: ST_TO_ADDR
// exit ;
39343: GO 39757
// end ; _chassis := AvailableChassisList ( factory ) ;
39345: LD_ADDR_VAR 0 9
39349: PUSH
39350: LD_VAR 0 1
39354: PPUSH
39355: CALL_OW 475
39359: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39360: LD_ADDR_VAR 0 11
39364: PUSH
39365: LD_VAR 0 1
39369: PPUSH
39370: CALL_OW 476
39374: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39375: LD_ADDR_VAR 0 12
39379: PUSH
39380: LD_VAR 0 1
39384: PPUSH
39385: CALL_OW 477
39389: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39390: LD_ADDR_VAR 0 10
39394: PUSH
39395: LD_VAR 0 1
39399: PPUSH
39400: CALL_OW 478
39404: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39405: LD_VAR 0 9
39409: NOT
39410: PUSH
39411: LD_VAR 0 11
39415: NOT
39416: OR
39417: PUSH
39418: LD_VAR 0 12
39422: NOT
39423: OR
39424: PUSH
39425: LD_VAR 0 10
39429: NOT
39430: OR
39431: IFFALSE 39466
// begin result := [ chassis , engine , control , weapon ] ;
39433: LD_ADDR_VAR 0 6
39437: PUSH
39438: LD_VAR 0 2
39442: PUSH
39443: LD_VAR 0 3
39447: PUSH
39448: LD_VAR 0 4
39452: PUSH
39453: LD_VAR 0 5
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: ST_TO_ADDR
// exit ;
39464: GO 39757
// end ; if not chassis in _chassis then
39466: LD_VAR 0 2
39470: PUSH
39471: LD_VAR 0 9
39475: IN
39476: NOT
39477: IFFALSE 39503
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39479: LD_ADDR_VAR 0 2
39483: PUSH
39484: LD_VAR 0 9
39488: PUSH
39489: LD_INT 1
39491: PPUSH
39492: LD_VAR 0 9
39496: PPUSH
39497: CALL_OW 12
39501: ARRAY
39502: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39503: LD_VAR 0 2
39507: PPUSH
39508: LD_VAR 0 3
39512: PPUSH
39513: CALL 39762 0 2
39517: NOT
39518: IFFALSE 39577
// repeat engine := _engine [ 1 ] ;
39520: LD_ADDR_VAR 0 3
39524: PUSH
39525: LD_VAR 0 11
39529: PUSH
39530: LD_INT 1
39532: ARRAY
39533: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39534: LD_ADDR_VAR 0 11
39538: PUSH
39539: LD_VAR 0 11
39543: PPUSH
39544: LD_INT 1
39546: PPUSH
39547: CALL_OW 3
39551: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39552: LD_VAR 0 2
39556: PPUSH
39557: LD_VAR 0 3
39561: PPUSH
39562: CALL 39762 0 2
39566: PUSH
39567: LD_VAR 0 11
39571: PUSH
39572: EMPTY
39573: EQUAL
39574: OR
39575: IFFALSE 39520
// if not control in _control then
39577: LD_VAR 0 4
39581: PUSH
39582: LD_VAR 0 12
39586: IN
39587: NOT
39588: IFFALSE 39614
// control := _control [ rand ( 1 , _control ) ] ;
39590: LD_ADDR_VAR 0 4
39594: PUSH
39595: LD_VAR 0 12
39599: PUSH
39600: LD_INT 1
39602: PPUSH
39603: LD_VAR 0 12
39607: PPUSH
39608: CALL_OW 12
39612: ARRAY
39613: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39614: LD_VAR 0 2
39618: PPUSH
39619: LD_VAR 0 5
39623: PPUSH
39624: CALL 39982 0 2
39628: NOT
39629: IFFALSE 39688
// repeat weapon := _weapon [ 1 ] ;
39631: LD_ADDR_VAR 0 5
39635: PUSH
39636: LD_VAR 0 10
39640: PUSH
39641: LD_INT 1
39643: ARRAY
39644: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39645: LD_ADDR_VAR 0 10
39649: PUSH
39650: LD_VAR 0 10
39654: PPUSH
39655: LD_INT 1
39657: PPUSH
39658: CALL_OW 3
39662: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39663: LD_VAR 0 2
39667: PPUSH
39668: LD_VAR 0 5
39672: PPUSH
39673: CALL 39982 0 2
39677: PUSH
39678: LD_VAR 0 10
39682: PUSH
39683: EMPTY
39684: EQUAL
39685: OR
39686: IFFALSE 39631
// result := [ ] ;
39688: LD_ADDR_VAR 0 6
39692: PUSH
39693: EMPTY
39694: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39695: LD_VAR 0 1
39699: PPUSH
39700: LD_VAR 0 2
39704: PPUSH
39705: LD_VAR 0 3
39709: PPUSH
39710: LD_VAR 0 4
39714: PPUSH
39715: LD_VAR 0 5
39719: PPUSH
39720: CALL_OW 448
39724: IFFALSE 39757
// result := [ chassis , engine , control , weapon ] ;
39726: LD_ADDR_VAR 0 6
39730: PUSH
39731: LD_VAR 0 2
39735: PUSH
39736: LD_VAR 0 3
39740: PUSH
39741: LD_VAR 0 4
39745: PUSH
39746: LD_VAR 0 5
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: ST_TO_ADDR
// end ;
39757: LD_VAR 0 6
39761: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39762: LD_INT 0
39764: PPUSH
// if not chassis or not engine then
39765: LD_VAR 0 1
39769: NOT
39770: PUSH
39771: LD_VAR 0 2
39775: NOT
39776: OR
39777: IFFALSE 39781
// exit ;
39779: GO 39977
// case engine of engine_solar :
39781: LD_VAR 0 2
39785: PUSH
39786: LD_INT 2
39788: DOUBLE
39789: EQUAL
39790: IFTRUE 39794
39792: GO 39832
39794: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39795: LD_ADDR_VAR 0 3
39799: PUSH
39800: LD_INT 11
39802: PUSH
39803: LD_INT 12
39805: PUSH
39806: LD_INT 13
39808: PUSH
39809: LD_INT 14
39811: PUSH
39812: LD_INT 1
39814: PUSH
39815: LD_INT 2
39817: PUSH
39818: LD_INT 3
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: ST_TO_ADDR
39830: GO 39961
39832: LD_INT 1
39834: DOUBLE
39835: EQUAL
39836: IFTRUE 39840
39838: GO 39902
39840: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39841: LD_ADDR_VAR 0 3
39845: PUSH
39846: LD_INT 11
39848: PUSH
39849: LD_INT 12
39851: PUSH
39852: LD_INT 13
39854: PUSH
39855: LD_INT 14
39857: PUSH
39858: LD_INT 1
39860: PUSH
39861: LD_INT 2
39863: PUSH
39864: LD_INT 3
39866: PUSH
39867: LD_INT 4
39869: PUSH
39870: LD_INT 5
39872: PUSH
39873: LD_INT 21
39875: PUSH
39876: LD_INT 23
39878: PUSH
39879: LD_INT 22
39881: PUSH
39882: LD_INT 24
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: ST_TO_ADDR
39900: GO 39961
39902: LD_INT 3
39904: DOUBLE
39905: EQUAL
39906: IFTRUE 39910
39908: GO 39960
39910: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39911: LD_ADDR_VAR 0 3
39915: PUSH
39916: LD_INT 13
39918: PUSH
39919: LD_INT 14
39921: PUSH
39922: LD_INT 2
39924: PUSH
39925: LD_INT 3
39927: PUSH
39928: LD_INT 4
39930: PUSH
39931: LD_INT 5
39933: PUSH
39934: LD_INT 21
39936: PUSH
39937: LD_INT 22
39939: PUSH
39940: LD_INT 23
39942: PUSH
39943: LD_INT 24
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: ST_TO_ADDR
39958: GO 39961
39960: POP
// result := ( chassis in result ) ;
39961: LD_ADDR_VAR 0 3
39965: PUSH
39966: LD_VAR 0 1
39970: PUSH
39971: LD_VAR 0 3
39975: IN
39976: ST_TO_ADDR
// end ;
39977: LD_VAR 0 3
39981: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39982: LD_INT 0
39984: PPUSH
// if not chassis or not weapon then
39985: LD_VAR 0 1
39989: NOT
39990: PUSH
39991: LD_VAR 0 2
39995: NOT
39996: OR
39997: IFFALSE 40001
// exit ;
39999: GO 41061
// case weapon of us_machine_gun :
40001: LD_VAR 0 2
40005: PUSH
40006: LD_INT 2
40008: DOUBLE
40009: EQUAL
40010: IFTRUE 40014
40012: GO 40044
40014: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40015: LD_ADDR_VAR 0 3
40019: PUSH
40020: LD_INT 1
40022: PUSH
40023: LD_INT 2
40025: PUSH
40026: LD_INT 3
40028: PUSH
40029: LD_INT 4
40031: PUSH
40032: LD_INT 5
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: ST_TO_ADDR
40042: GO 41045
40044: LD_INT 3
40046: DOUBLE
40047: EQUAL
40048: IFTRUE 40052
40050: GO 40082
40052: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40053: LD_ADDR_VAR 0 3
40057: PUSH
40058: LD_INT 1
40060: PUSH
40061: LD_INT 2
40063: PUSH
40064: LD_INT 3
40066: PUSH
40067: LD_INT 4
40069: PUSH
40070: LD_INT 5
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: ST_TO_ADDR
40080: GO 41045
40082: LD_INT 11
40084: DOUBLE
40085: EQUAL
40086: IFTRUE 40090
40088: GO 40120
40090: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40091: LD_ADDR_VAR 0 3
40095: PUSH
40096: LD_INT 1
40098: PUSH
40099: LD_INT 2
40101: PUSH
40102: LD_INT 3
40104: PUSH
40105: LD_INT 4
40107: PUSH
40108: LD_INT 5
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: ST_TO_ADDR
40118: GO 41045
40120: LD_INT 4
40122: DOUBLE
40123: EQUAL
40124: IFTRUE 40128
40126: GO 40154
40128: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40129: LD_ADDR_VAR 0 3
40133: PUSH
40134: LD_INT 2
40136: PUSH
40137: LD_INT 3
40139: PUSH
40140: LD_INT 4
40142: PUSH
40143: LD_INT 5
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: ST_TO_ADDR
40152: GO 41045
40154: LD_INT 5
40156: DOUBLE
40157: EQUAL
40158: IFTRUE 40162
40160: GO 40188
40162: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40163: LD_ADDR_VAR 0 3
40167: PUSH
40168: LD_INT 2
40170: PUSH
40171: LD_INT 3
40173: PUSH
40174: LD_INT 4
40176: PUSH
40177: LD_INT 5
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: ST_TO_ADDR
40186: GO 41045
40188: LD_INT 9
40190: DOUBLE
40191: EQUAL
40192: IFTRUE 40196
40194: GO 40222
40196: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40197: LD_ADDR_VAR 0 3
40201: PUSH
40202: LD_INT 2
40204: PUSH
40205: LD_INT 3
40207: PUSH
40208: LD_INT 4
40210: PUSH
40211: LD_INT 5
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: ST_TO_ADDR
40220: GO 41045
40222: LD_INT 7
40224: DOUBLE
40225: EQUAL
40226: IFTRUE 40230
40228: GO 40256
40230: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40231: LD_ADDR_VAR 0 3
40235: PUSH
40236: LD_INT 2
40238: PUSH
40239: LD_INT 3
40241: PUSH
40242: LD_INT 4
40244: PUSH
40245: LD_INT 5
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: ST_TO_ADDR
40254: GO 41045
40256: LD_INT 12
40258: DOUBLE
40259: EQUAL
40260: IFTRUE 40264
40262: GO 40290
40264: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40265: LD_ADDR_VAR 0 3
40269: PUSH
40270: LD_INT 2
40272: PUSH
40273: LD_INT 3
40275: PUSH
40276: LD_INT 4
40278: PUSH
40279: LD_INT 5
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: ST_TO_ADDR
40288: GO 41045
40290: LD_INT 13
40292: DOUBLE
40293: EQUAL
40294: IFTRUE 40298
40296: GO 40324
40298: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40299: LD_ADDR_VAR 0 3
40303: PUSH
40304: LD_INT 2
40306: PUSH
40307: LD_INT 3
40309: PUSH
40310: LD_INT 4
40312: PUSH
40313: LD_INT 5
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: ST_TO_ADDR
40322: GO 41045
40324: LD_INT 14
40326: DOUBLE
40327: EQUAL
40328: IFTRUE 40332
40330: GO 40350
40332: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40333: LD_ADDR_VAR 0 3
40337: PUSH
40338: LD_INT 4
40340: PUSH
40341: LD_INT 5
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: ST_TO_ADDR
40348: GO 41045
40350: LD_INT 6
40352: DOUBLE
40353: EQUAL
40354: IFTRUE 40358
40356: GO 40376
40358: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40359: LD_ADDR_VAR 0 3
40363: PUSH
40364: LD_INT 4
40366: PUSH
40367: LD_INT 5
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: ST_TO_ADDR
40374: GO 41045
40376: LD_INT 10
40378: DOUBLE
40379: EQUAL
40380: IFTRUE 40384
40382: GO 40402
40384: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40385: LD_ADDR_VAR 0 3
40389: PUSH
40390: LD_INT 4
40392: PUSH
40393: LD_INT 5
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: ST_TO_ADDR
40400: GO 41045
40402: LD_INT 22
40404: DOUBLE
40405: EQUAL
40406: IFTRUE 40410
40408: GO 40436
40410: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40411: LD_ADDR_VAR 0 3
40415: PUSH
40416: LD_INT 11
40418: PUSH
40419: LD_INT 12
40421: PUSH
40422: LD_INT 13
40424: PUSH
40425: LD_INT 14
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: ST_TO_ADDR
40434: GO 41045
40436: LD_INT 23
40438: DOUBLE
40439: EQUAL
40440: IFTRUE 40444
40442: GO 40470
40444: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40445: LD_ADDR_VAR 0 3
40449: PUSH
40450: LD_INT 11
40452: PUSH
40453: LD_INT 12
40455: PUSH
40456: LD_INT 13
40458: PUSH
40459: LD_INT 14
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: ST_TO_ADDR
40468: GO 41045
40470: LD_INT 24
40472: DOUBLE
40473: EQUAL
40474: IFTRUE 40478
40476: GO 40504
40478: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40479: LD_ADDR_VAR 0 3
40483: PUSH
40484: LD_INT 11
40486: PUSH
40487: LD_INT 12
40489: PUSH
40490: LD_INT 13
40492: PUSH
40493: LD_INT 14
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: ST_TO_ADDR
40502: GO 41045
40504: LD_INT 30
40506: DOUBLE
40507: EQUAL
40508: IFTRUE 40512
40510: GO 40538
40512: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40513: LD_ADDR_VAR 0 3
40517: PUSH
40518: LD_INT 11
40520: PUSH
40521: LD_INT 12
40523: PUSH
40524: LD_INT 13
40526: PUSH
40527: LD_INT 14
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: ST_TO_ADDR
40536: GO 41045
40538: LD_INT 25
40540: DOUBLE
40541: EQUAL
40542: IFTRUE 40546
40544: GO 40564
40546: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40547: LD_ADDR_VAR 0 3
40551: PUSH
40552: LD_INT 13
40554: PUSH
40555: LD_INT 14
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: ST_TO_ADDR
40562: GO 41045
40564: LD_INT 27
40566: DOUBLE
40567: EQUAL
40568: IFTRUE 40572
40570: GO 40590
40572: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40573: LD_ADDR_VAR 0 3
40577: PUSH
40578: LD_INT 13
40580: PUSH
40581: LD_INT 14
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: ST_TO_ADDR
40588: GO 41045
40590: LD_INT 92
40592: DOUBLE
40593: EQUAL
40594: IFTRUE 40598
40596: GO 40624
40598: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40599: LD_ADDR_VAR 0 3
40603: PUSH
40604: LD_INT 11
40606: PUSH
40607: LD_INT 12
40609: PUSH
40610: LD_INT 13
40612: PUSH
40613: LD_INT 14
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: ST_TO_ADDR
40622: GO 41045
40624: LD_INT 28
40626: DOUBLE
40627: EQUAL
40628: IFTRUE 40632
40630: GO 40650
40632: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40633: LD_ADDR_VAR 0 3
40637: PUSH
40638: LD_INT 13
40640: PUSH
40641: LD_INT 14
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: ST_TO_ADDR
40648: GO 41045
40650: LD_INT 29
40652: DOUBLE
40653: EQUAL
40654: IFTRUE 40658
40656: GO 40676
40658: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40659: LD_ADDR_VAR 0 3
40663: PUSH
40664: LD_INT 13
40666: PUSH
40667: LD_INT 14
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: ST_TO_ADDR
40674: GO 41045
40676: LD_INT 31
40678: DOUBLE
40679: EQUAL
40680: IFTRUE 40684
40682: GO 40702
40684: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40685: LD_ADDR_VAR 0 3
40689: PUSH
40690: LD_INT 13
40692: PUSH
40693: LD_INT 14
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: ST_TO_ADDR
40700: GO 41045
40702: LD_INT 26
40704: DOUBLE
40705: EQUAL
40706: IFTRUE 40710
40708: GO 40728
40710: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40711: LD_ADDR_VAR 0 3
40715: PUSH
40716: LD_INT 13
40718: PUSH
40719: LD_INT 14
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: ST_TO_ADDR
40726: GO 41045
40728: LD_INT 42
40730: DOUBLE
40731: EQUAL
40732: IFTRUE 40736
40734: GO 40762
40736: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40737: LD_ADDR_VAR 0 3
40741: PUSH
40742: LD_INT 21
40744: PUSH
40745: LD_INT 22
40747: PUSH
40748: LD_INT 23
40750: PUSH
40751: LD_INT 24
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: ST_TO_ADDR
40760: GO 41045
40762: LD_INT 43
40764: DOUBLE
40765: EQUAL
40766: IFTRUE 40770
40768: GO 40796
40770: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40771: LD_ADDR_VAR 0 3
40775: PUSH
40776: LD_INT 21
40778: PUSH
40779: LD_INT 22
40781: PUSH
40782: LD_INT 23
40784: PUSH
40785: LD_INT 24
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: ST_TO_ADDR
40794: GO 41045
40796: LD_INT 44
40798: DOUBLE
40799: EQUAL
40800: IFTRUE 40804
40802: GO 40830
40804: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40805: LD_ADDR_VAR 0 3
40809: PUSH
40810: LD_INT 21
40812: PUSH
40813: LD_INT 22
40815: PUSH
40816: LD_INT 23
40818: PUSH
40819: LD_INT 24
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: ST_TO_ADDR
40828: GO 41045
40830: LD_INT 45
40832: DOUBLE
40833: EQUAL
40834: IFTRUE 40838
40836: GO 40864
40838: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40839: LD_ADDR_VAR 0 3
40843: PUSH
40844: LD_INT 21
40846: PUSH
40847: LD_INT 22
40849: PUSH
40850: LD_INT 23
40852: PUSH
40853: LD_INT 24
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: ST_TO_ADDR
40862: GO 41045
40864: LD_INT 49
40866: DOUBLE
40867: EQUAL
40868: IFTRUE 40872
40870: GO 40898
40872: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40873: LD_ADDR_VAR 0 3
40877: PUSH
40878: LD_INT 21
40880: PUSH
40881: LD_INT 22
40883: PUSH
40884: LD_INT 23
40886: PUSH
40887: LD_INT 24
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: ST_TO_ADDR
40896: GO 41045
40898: LD_INT 51
40900: DOUBLE
40901: EQUAL
40902: IFTRUE 40906
40904: GO 40932
40906: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40907: LD_ADDR_VAR 0 3
40911: PUSH
40912: LD_INT 21
40914: PUSH
40915: LD_INT 22
40917: PUSH
40918: LD_INT 23
40920: PUSH
40921: LD_INT 24
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: ST_TO_ADDR
40930: GO 41045
40932: LD_INT 52
40934: DOUBLE
40935: EQUAL
40936: IFTRUE 40940
40938: GO 40966
40940: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40941: LD_ADDR_VAR 0 3
40945: PUSH
40946: LD_INT 21
40948: PUSH
40949: LD_INT 22
40951: PUSH
40952: LD_INT 23
40954: PUSH
40955: LD_INT 24
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: ST_TO_ADDR
40964: GO 41045
40966: LD_INT 53
40968: DOUBLE
40969: EQUAL
40970: IFTRUE 40974
40972: GO 40992
40974: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40975: LD_ADDR_VAR 0 3
40979: PUSH
40980: LD_INT 23
40982: PUSH
40983: LD_INT 24
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: ST_TO_ADDR
40990: GO 41045
40992: LD_INT 46
40994: DOUBLE
40995: EQUAL
40996: IFTRUE 41000
40998: GO 41018
41000: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41001: LD_ADDR_VAR 0 3
41005: PUSH
41006: LD_INT 23
41008: PUSH
41009: LD_INT 24
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: ST_TO_ADDR
41016: GO 41045
41018: LD_INT 47
41020: DOUBLE
41021: EQUAL
41022: IFTRUE 41026
41024: GO 41044
41026: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41027: LD_ADDR_VAR 0 3
41031: PUSH
41032: LD_INT 23
41034: PUSH
41035: LD_INT 24
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: ST_TO_ADDR
41042: GO 41045
41044: POP
// result := ( chassis in result ) ;
41045: LD_ADDR_VAR 0 3
41049: PUSH
41050: LD_VAR 0 1
41054: PUSH
41055: LD_VAR 0 3
41059: IN
41060: ST_TO_ADDR
// end ;
41061: LD_VAR 0 3
41065: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41066: LD_INT 0
41068: PPUSH
41069: PPUSH
41070: PPUSH
41071: PPUSH
41072: PPUSH
41073: PPUSH
41074: PPUSH
// result := array ;
41075: LD_ADDR_VAR 0 5
41079: PUSH
41080: LD_VAR 0 1
41084: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41085: LD_VAR 0 1
41089: NOT
41090: PUSH
41091: LD_VAR 0 2
41095: NOT
41096: OR
41097: PUSH
41098: LD_VAR 0 3
41102: NOT
41103: OR
41104: PUSH
41105: LD_VAR 0 2
41109: PUSH
41110: LD_VAR 0 1
41114: GREATER
41115: OR
41116: PUSH
41117: LD_VAR 0 3
41121: PUSH
41122: LD_VAR 0 1
41126: GREATER
41127: OR
41128: IFFALSE 41132
// exit ;
41130: GO 41428
// if direction then
41132: LD_VAR 0 4
41136: IFFALSE 41200
// begin d := 1 ;
41138: LD_ADDR_VAR 0 9
41142: PUSH
41143: LD_INT 1
41145: ST_TO_ADDR
// if i_from > i_to then
41146: LD_VAR 0 2
41150: PUSH
41151: LD_VAR 0 3
41155: GREATER
41156: IFFALSE 41182
// length := ( array - i_from ) + i_to else
41158: LD_ADDR_VAR 0 11
41162: PUSH
41163: LD_VAR 0 1
41167: PUSH
41168: LD_VAR 0 2
41172: MINUS
41173: PUSH
41174: LD_VAR 0 3
41178: PLUS
41179: ST_TO_ADDR
41180: GO 41198
// length := i_to - i_from ;
41182: LD_ADDR_VAR 0 11
41186: PUSH
41187: LD_VAR 0 3
41191: PUSH
41192: LD_VAR 0 2
41196: MINUS
41197: ST_TO_ADDR
// end else
41198: GO 41261
// begin d := - 1 ;
41200: LD_ADDR_VAR 0 9
41204: PUSH
41205: LD_INT 1
41207: NEG
41208: ST_TO_ADDR
// if i_from > i_to then
41209: LD_VAR 0 2
41213: PUSH
41214: LD_VAR 0 3
41218: GREATER
41219: IFFALSE 41239
// length := i_from - i_to else
41221: LD_ADDR_VAR 0 11
41225: PUSH
41226: LD_VAR 0 2
41230: PUSH
41231: LD_VAR 0 3
41235: MINUS
41236: ST_TO_ADDR
41237: GO 41261
// length := ( array - i_to ) + i_from ;
41239: LD_ADDR_VAR 0 11
41243: PUSH
41244: LD_VAR 0 1
41248: PUSH
41249: LD_VAR 0 3
41253: MINUS
41254: PUSH
41255: LD_VAR 0 2
41259: PLUS
41260: ST_TO_ADDR
// end ; if not length then
41261: LD_VAR 0 11
41265: NOT
41266: IFFALSE 41270
// exit ;
41268: GO 41428
// tmp := array ;
41270: LD_ADDR_VAR 0 10
41274: PUSH
41275: LD_VAR 0 1
41279: ST_TO_ADDR
// for i = 1 to length do
41280: LD_ADDR_VAR 0 6
41284: PUSH
41285: DOUBLE
41286: LD_INT 1
41288: DEC
41289: ST_TO_ADDR
41290: LD_VAR 0 11
41294: PUSH
41295: FOR_TO
41296: IFFALSE 41416
// begin for j = 1 to array do
41298: LD_ADDR_VAR 0 7
41302: PUSH
41303: DOUBLE
41304: LD_INT 1
41306: DEC
41307: ST_TO_ADDR
41308: LD_VAR 0 1
41312: PUSH
41313: FOR_TO
41314: IFFALSE 41402
// begin k := j + d ;
41316: LD_ADDR_VAR 0 8
41320: PUSH
41321: LD_VAR 0 7
41325: PUSH
41326: LD_VAR 0 9
41330: PLUS
41331: ST_TO_ADDR
// if k > array then
41332: LD_VAR 0 8
41336: PUSH
41337: LD_VAR 0 1
41341: GREATER
41342: IFFALSE 41352
// k := 1 ;
41344: LD_ADDR_VAR 0 8
41348: PUSH
41349: LD_INT 1
41351: ST_TO_ADDR
// if not k then
41352: LD_VAR 0 8
41356: NOT
41357: IFFALSE 41369
// k := array ;
41359: LD_ADDR_VAR 0 8
41363: PUSH
41364: LD_VAR 0 1
41368: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41369: LD_ADDR_VAR 0 10
41373: PUSH
41374: LD_VAR 0 10
41378: PPUSH
41379: LD_VAR 0 8
41383: PPUSH
41384: LD_VAR 0 1
41388: PUSH
41389: LD_VAR 0 7
41393: ARRAY
41394: PPUSH
41395: CALL_OW 1
41399: ST_TO_ADDR
// end ;
41400: GO 41313
41402: POP
41403: POP
// array := tmp ;
41404: LD_ADDR_VAR 0 1
41408: PUSH
41409: LD_VAR 0 10
41413: ST_TO_ADDR
// end ;
41414: GO 41295
41416: POP
41417: POP
// result := array ;
41418: LD_ADDR_VAR 0 5
41422: PUSH
41423: LD_VAR 0 1
41427: ST_TO_ADDR
// end ;
41428: LD_VAR 0 5
41432: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41433: LD_INT 0
41435: PPUSH
41436: PPUSH
// result := 0 ;
41437: LD_ADDR_VAR 0 3
41441: PUSH
41442: LD_INT 0
41444: ST_TO_ADDR
// if not array or not value in array then
41445: LD_VAR 0 1
41449: NOT
41450: PUSH
41451: LD_VAR 0 2
41455: PUSH
41456: LD_VAR 0 1
41460: IN
41461: NOT
41462: OR
41463: IFFALSE 41467
// exit ;
41465: GO 41521
// for i = 1 to array do
41467: LD_ADDR_VAR 0 4
41471: PUSH
41472: DOUBLE
41473: LD_INT 1
41475: DEC
41476: ST_TO_ADDR
41477: LD_VAR 0 1
41481: PUSH
41482: FOR_TO
41483: IFFALSE 41519
// if value = array [ i ] then
41485: LD_VAR 0 2
41489: PUSH
41490: LD_VAR 0 1
41494: PUSH
41495: LD_VAR 0 4
41499: ARRAY
41500: EQUAL
41501: IFFALSE 41517
// begin result := i ;
41503: LD_ADDR_VAR 0 3
41507: PUSH
41508: LD_VAR 0 4
41512: ST_TO_ADDR
// exit ;
41513: POP
41514: POP
41515: GO 41521
// end ;
41517: GO 41482
41519: POP
41520: POP
// end ;
41521: LD_VAR 0 3
41525: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41526: LD_INT 0
41528: PPUSH
// vc_chassis := chassis ;
41529: LD_ADDR_OWVAR 37
41533: PUSH
41534: LD_VAR 0 1
41538: ST_TO_ADDR
// vc_engine := engine ;
41539: LD_ADDR_OWVAR 39
41543: PUSH
41544: LD_VAR 0 2
41548: ST_TO_ADDR
// vc_control := control ;
41549: LD_ADDR_OWVAR 38
41553: PUSH
41554: LD_VAR 0 3
41558: ST_TO_ADDR
// vc_weapon := weapon ;
41559: LD_ADDR_OWVAR 40
41563: PUSH
41564: LD_VAR 0 4
41568: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41569: LD_ADDR_OWVAR 41
41573: PUSH
41574: LD_VAR 0 5
41578: ST_TO_ADDR
// end ;
41579: LD_VAR 0 6
41583: RET
// export function WantPlant ( unit ) ; var task ; begin
41584: LD_INT 0
41586: PPUSH
41587: PPUSH
// result := false ;
41588: LD_ADDR_VAR 0 2
41592: PUSH
41593: LD_INT 0
41595: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41596: LD_ADDR_VAR 0 3
41600: PUSH
41601: LD_VAR 0 1
41605: PPUSH
41606: CALL_OW 437
41610: ST_TO_ADDR
// if task then
41611: LD_VAR 0 3
41615: IFFALSE 41643
// if task [ 1 ] [ 1 ] = p then
41617: LD_VAR 0 3
41621: PUSH
41622: LD_INT 1
41624: ARRAY
41625: PUSH
41626: LD_INT 1
41628: ARRAY
41629: PUSH
41630: LD_STRING p
41632: EQUAL
41633: IFFALSE 41643
// result := true ;
41635: LD_ADDR_VAR 0 2
41639: PUSH
41640: LD_INT 1
41642: ST_TO_ADDR
// end ;
41643: LD_VAR 0 2
41647: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41648: LD_INT 0
41650: PPUSH
41651: PPUSH
41652: PPUSH
41653: PPUSH
// if pos < 1 then
41654: LD_VAR 0 2
41658: PUSH
41659: LD_INT 1
41661: LESS
41662: IFFALSE 41666
// exit ;
41664: GO 41969
// if pos = 1 then
41666: LD_VAR 0 2
41670: PUSH
41671: LD_INT 1
41673: EQUAL
41674: IFFALSE 41707
// result := Replace ( arr , pos [ 1 ] , value ) else
41676: LD_ADDR_VAR 0 4
41680: PUSH
41681: LD_VAR 0 1
41685: PPUSH
41686: LD_VAR 0 2
41690: PUSH
41691: LD_INT 1
41693: ARRAY
41694: PPUSH
41695: LD_VAR 0 3
41699: PPUSH
41700: CALL_OW 1
41704: ST_TO_ADDR
41705: GO 41969
// begin tmp := arr ;
41707: LD_ADDR_VAR 0 6
41711: PUSH
41712: LD_VAR 0 1
41716: ST_TO_ADDR
// s_arr := [ tmp ] ;
41717: LD_ADDR_VAR 0 7
41721: PUSH
41722: LD_VAR 0 6
41726: PUSH
41727: EMPTY
41728: LIST
41729: ST_TO_ADDR
// for i = 1 to pos - 1 do
41730: LD_ADDR_VAR 0 5
41734: PUSH
41735: DOUBLE
41736: LD_INT 1
41738: DEC
41739: ST_TO_ADDR
41740: LD_VAR 0 2
41744: PUSH
41745: LD_INT 1
41747: MINUS
41748: PUSH
41749: FOR_TO
41750: IFFALSE 41795
// begin tmp := tmp [ pos [ i ] ] ;
41752: LD_ADDR_VAR 0 6
41756: PUSH
41757: LD_VAR 0 6
41761: PUSH
41762: LD_VAR 0 2
41766: PUSH
41767: LD_VAR 0 5
41771: ARRAY
41772: ARRAY
41773: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41774: LD_ADDR_VAR 0 7
41778: PUSH
41779: LD_VAR 0 7
41783: PUSH
41784: LD_VAR 0 6
41788: PUSH
41789: EMPTY
41790: LIST
41791: ADD
41792: ST_TO_ADDR
// end ;
41793: GO 41749
41795: POP
41796: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41797: LD_ADDR_VAR 0 6
41801: PUSH
41802: LD_VAR 0 6
41806: PPUSH
41807: LD_VAR 0 2
41811: PUSH
41812: LD_VAR 0 2
41816: ARRAY
41817: PPUSH
41818: LD_VAR 0 3
41822: PPUSH
41823: CALL_OW 1
41827: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41828: LD_ADDR_VAR 0 7
41832: PUSH
41833: LD_VAR 0 7
41837: PPUSH
41838: LD_VAR 0 7
41842: PPUSH
41843: LD_VAR 0 6
41847: PPUSH
41848: CALL_OW 1
41852: ST_TO_ADDR
// for i = s_arr downto 2 do
41853: LD_ADDR_VAR 0 5
41857: PUSH
41858: DOUBLE
41859: LD_VAR 0 7
41863: INC
41864: ST_TO_ADDR
41865: LD_INT 2
41867: PUSH
41868: FOR_DOWNTO
41869: IFFALSE 41953
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41871: LD_ADDR_VAR 0 6
41875: PUSH
41876: LD_VAR 0 7
41880: PUSH
41881: LD_VAR 0 5
41885: PUSH
41886: LD_INT 1
41888: MINUS
41889: ARRAY
41890: PPUSH
41891: LD_VAR 0 2
41895: PUSH
41896: LD_VAR 0 5
41900: PUSH
41901: LD_INT 1
41903: MINUS
41904: ARRAY
41905: PPUSH
41906: LD_VAR 0 7
41910: PUSH
41911: LD_VAR 0 5
41915: ARRAY
41916: PPUSH
41917: CALL_OW 1
41921: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41922: LD_ADDR_VAR 0 7
41926: PUSH
41927: LD_VAR 0 7
41931: PPUSH
41932: LD_VAR 0 5
41936: PUSH
41937: LD_INT 1
41939: MINUS
41940: PPUSH
41941: LD_VAR 0 6
41945: PPUSH
41946: CALL_OW 1
41950: ST_TO_ADDR
// end ;
41951: GO 41868
41953: POP
41954: POP
// result := s_arr [ 1 ] ;
41955: LD_ADDR_VAR 0 4
41959: PUSH
41960: LD_VAR 0 7
41964: PUSH
41965: LD_INT 1
41967: ARRAY
41968: ST_TO_ADDR
// end ; end ;
41969: LD_VAR 0 4
41973: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41974: LD_INT 0
41976: PPUSH
41977: PPUSH
// if not list then
41978: LD_VAR 0 1
41982: NOT
41983: IFFALSE 41987
// exit ;
41985: GO 42078
// i := list [ pos1 ] ;
41987: LD_ADDR_VAR 0 5
41991: PUSH
41992: LD_VAR 0 1
41996: PUSH
41997: LD_VAR 0 2
42001: ARRAY
42002: ST_TO_ADDR
// if not i then
42003: LD_VAR 0 5
42007: NOT
42008: IFFALSE 42012
// exit ;
42010: GO 42078
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42012: LD_ADDR_VAR 0 1
42016: PUSH
42017: LD_VAR 0 1
42021: PPUSH
42022: LD_VAR 0 2
42026: PPUSH
42027: LD_VAR 0 1
42031: PUSH
42032: LD_VAR 0 3
42036: ARRAY
42037: PPUSH
42038: CALL_OW 1
42042: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42043: LD_ADDR_VAR 0 1
42047: PUSH
42048: LD_VAR 0 1
42052: PPUSH
42053: LD_VAR 0 3
42057: PPUSH
42058: LD_VAR 0 5
42062: PPUSH
42063: CALL_OW 1
42067: ST_TO_ADDR
// result := list ;
42068: LD_ADDR_VAR 0 4
42072: PUSH
42073: LD_VAR 0 1
42077: ST_TO_ADDR
// end ;
42078: LD_VAR 0 4
42082: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42083: LD_INT 0
42085: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42086: LD_ADDR_VAR 0 5
42090: PUSH
42091: LD_VAR 0 1
42095: PPUSH
42096: CALL_OW 250
42100: PPUSH
42101: LD_VAR 0 1
42105: PPUSH
42106: CALL_OW 251
42110: PPUSH
42111: LD_VAR 0 2
42115: PPUSH
42116: LD_VAR 0 3
42120: PPUSH
42121: LD_VAR 0 4
42125: PPUSH
42126: CALL 42136 0 5
42130: ST_TO_ADDR
// end ;
42131: LD_VAR 0 5
42135: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42136: LD_INT 0
42138: PPUSH
42139: PPUSH
42140: PPUSH
42141: PPUSH
// if not list then
42142: LD_VAR 0 3
42146: NOT
42147: IFFALSE 42151
// exit ;
42149: GO 42539
// result := [ ] ;
42151: LD_ADDR_VAR 0 6
42155: PUSH
42156: EMPTY
42157: ST_TO_ADDR
// for i in list do
42158: LD_ADDR_VAR 0 7
42162: PUSH
42163: LD_VAR 0 3
42167: PUSH
42168: FOR_IN
42169: IFFALSE 42371
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42171: LD_ADDR_VAR 0 9
42175: PUSH
42176: LD_VAR 0 7
42180: PPUSH
42181: LD_VAR 0 1
42185: PPUSH
42186: LD_VAR 0 2
42190: PPUSH
42191: CALL_OW 297
42195: ST_TO_ADDR
// if not result then
42196: LD_VAR 0 6
42200: NOT
42201: IFFALSE 42227
// result := [ [ i , tmp ] ] else
42203: LD_ADDR_VAR 0 6
42207: PUSH
42208: LD_VAR 0 7
42212: PUSH
42213: LD_VAR 0 9
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: EMPTY
42223: LIST
42224: ST_TO_ADDR
42225: GO 42369
// begin if result [ result ] [ 2 ] < tmp then
42227: LD_VAR 0 6
42231: PUSH
42232: LD_VAR 0 6
42236: ARRAY
42237: PUSH
42238: LD_INT 2
42240: ARRAY
42241: PUSH
42242: LD_VAR 0 9
42246: LESS
42247: IFFALSE 42289
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42249: LD_ADDR_VAR 0 6
42253: PUSH
42254: LD_VAR 0 6
42258: PPUSH
42259: LD_VAR 0 6
42263: PUSH
42264: LD_INT 1
42266: PLUS
42267: PPUSH
42268: LD_VAR 0 7
42272: PUSH
42273: LD_VAR 0 9
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PPUSH
42282: CALL_OW 2
42286: ST_TO_ADDR
42287: GO 42369
// for j = 1 to result do
42289: LD_ADDR_VAR 0 8
42293: PUSH
42294: DOUBLE
42295: LD_INT 1
42297: DEC
42298: ST_TO_ADDR
42299: LD_VAR 0 6
42303: PUSH
42304: FOR_TO
42305: IFFALSE 42367
// begin if tmp < result [ j ] [ 2 ] then
42307: LD_VAR 0 9
42311: PUSH
42312: LD_VAR 0 6
42316: PUSH
42317: LD_VAR 0 8
42321: ARRAY
42322: PUSH
42323: LD_INT 2
42325: ARRAY
42326: LESS
42327: IFFALSE 42365
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42329: LD_ADDR_VAR 0 6
42333: PUSH
42334: LD_VAR 0 6
42338: PPUSH
42339: LD_VAR 0 8
42343: PPUSH
42344: LD_VAR 0 7
42348: PUSH
42349: LD_VAR 0 9
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PPUSH
42358: CALL_OW 2
42362: ST_TO_ADDR
// break ;
42363: GO 42367
// end ; end ;
42365: GO 42304
42367: POP
42368: POP
// end ; end ;
42369: GO 42168
42371: POP
42372: POP
// if result and not asc then
42373: LD_VAR 0 6
42377: PUSH
42378: LD_VAR 0 4
42382: NOT
42383: AND
42384: IFFALSE 42459
// begin tmp := result ;
42386: LD_ADDR_VAR 0 9
42390: PUSH
42391: LD_VAR 0 6
42395: ST_TO_ADDR
// for i = tmp downto 1 do
42396: LD_ADDR_VAR 0 7
42400: PUSH
42401: DOUBLE
42402: LD_VAR 0 9
42406: INC
42407: ST_TO_ADDR
42408: LD_INT 1
42410: PUSH
42411: FOR_DOWNTO
42412: IFFALSE 42457
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42414: LD_ADDR_VAR 0 6
42418: PUSH
42419: LD_VAR 0 6
42423: PPUSH
42424: LD_VAR 0 9
42428: PUSH
42429: LD_VAR 0 7
42433: MINUS
42434: PUSH
42435: LD_INT 1
42437: PLUS
42438: PPUSH
42439: LD_VAR 0 9
42443: PUSH
42444: LD_VAR 0 7
42448: ARRAY
42449: PPUSH
42450: CALL_OW 1
42454: ST_TO_ADDR
42455: GO 42411
42457: POP
42458: POP
// end ; tmp := [ ] ;
42459: LD_ADDR_VAR 0 9
42463: PUSH
42464: EMPTY
42465: ST_TO_ADDR
// if mode then
42466: LD_VAR 0 5
42470: IFFALSE 42539
// begin for i = 1 to result do
42472: LD_ADDR_VAR 0 7
42476: PUSH
42477: DOUBLE
42478: LD_INT 1
42480: DEC
42481: ST_TO_ADDR
42482: LD_VAR 0 6
42486: PUSH
42487: FOR_TO
42488: IFFALSE 42527
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42490: LD_ADDR_VAR 0 9
42494: PUSH
42495: LD_VAR 0 9
42499: PPUSH
42500: LD_VAR 0 7
42504: PPUSH
42505: LD_VAR 0 6
42509: PUSH
42510: LD_VAR 0 7
42514: ARRAY
42515: PUSH
42516: LD_INT 1
42518: ARRAY
42519: PPUSH
42520: CALL_OW 1
42524: ST_TO_ADDR
42525: GO 42487
42527: POP
42528: POP
// result := tmp ;
42529: LD_ADDR_VAR 0 6
42533: PUSH
42534: LD_VAR 0 9
42538: ST_TO_ADDR
// end ; end ;
42539: LD_VAR 0 6
42543: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42544: LD_INT 0
42546: PPUSH
42547: PPUSH
42548: PPUSH
42549: PPUSH
42550: PPUSH
42551: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42552: LD_ADDR_VAR 0 5
42556: PUSH
42557: LD_INT 0
42559: PUSH
42560: LD_INT 0
42562: PUSH
42563: LD_INT 0
42565: PUSH
42566: EMPTY
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: ST_TO_ADDR
// if not x or not y then
42574: LD_VAR 0 2
42578: NOT
42579: PUSH
42580: LD_VAR 0 3
42584: NOT
42585: OR
42586: IFFALSE 42590
// exit ;
42588: GO 44240
// if not range then
42590: LD_VAR 0 4
42594: NOT
42595: IFFALSE 42605
// range := 10 ;
42597: LD_ADDR_VAR 0 4
42601: PUSH
42602: LD_INT 10
42604: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42605: LD_ADDR_VAR 0 8
42609: PUSH
42610: LD_INT 81
42612: PUSH
42613: LD_VAR 0 1
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 92
42624: PUSH
42625: LD_VAR 0 2
42629: PUSH
42630: LD_VAR 0 3
42634: PUSH
42635: LD_VAR 0 4
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 3
42648: PUSH
42649: LD_INT 21
42651: PUSH
42652: LD_INT 3
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: LIST
42667: PPUSH
42668: CALL_OW 69
42672: ST_TO_ADDR
// if not tmp then
42673: LD_VAR 0 8
42677: NOT
42678: IFFALSE 42682
// exit ;
42680: GO 44240
// for i in tmp do
42682: LD_ADDR_VAR 0 6
42686: PUSH
42687: LD_VAR 0 8
42691: PUSH
42692: FOR_IN
42693: IFFALSE 44215
// begin points := [ 0 , 0 , 0 ] ;
42695: LD_ADDR_VAR 0 9
42699: PUSH
42700: LD_INT 0
42702: PUSH
42703: LD_INT 0
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: LIST
42713: ST_TO_ADDR
// bpoints := 1 ;
42714: LD_ADDR_VAR 0 10
42718: PUSH
42719: LD_INT 1
42721: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42722: LD_VAR 0 6
42726: PPUSH
42727: CALL_OW 247
42731: PUSH
42732: LD_INT 1
42734: DOUBLE
42735: EQUAL
42736: IFTRUE 42740
42738: GO 43318
42740: POP
// begin if GetClass ( i ) = 1 then
42741: LD_VAR 0 6
42745: PPUSH
42746: CALL_OW 257
42750: PUSH
42751: LD_INT 1
42753: EQUAL
42754: IFFALSE 42775
// points := [ 10 , 5 , 3 ] ;
42756: LD_ADDR_VAR 0 9
42760: PUSH
42761: LD_INT 10
42763: PUSH
42764: LD_INT 5
42766: PUSH
42767: LD_INT 3
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: LIST
42774: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42775: LD_VAR 0 6
42779: PPUSH
42780: CALL_OW 257
42784: PUSH
42785: LD_INT 2
42787: PUSH
42788: LD_INT 3
42790: PUSH
42791: LD_INT 4
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: LIST
42798: IN
42799: IFFALSE 42820
// points := [ 3 , 2 , 1 ] ;
42801: LD_ADDR_VAR 0 9
42805: PUSH
42806: LD_INT 3
42808: PUSH
42809: LD_INT 2
42811: PUSH
42812: LD_INT 1
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: LIST
42819: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42820: LD_VAR 0 6
42824: PPUSH
42825: CALL_OW 257
42829: PUSH
42830: LD_INT 5
42832: EQUAL
42833: IFFALSE 42854
// points := [ 130 , 5 , 2 ] ;
42835: LD_ADDR_VAR 0 9
42839: PUSH
42840: LD_INT 130
42842: PUSH
42843: LD_INT 5
42845: PUSH
42846: LD_INT 2
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: LIST
42853: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42854: LD_VAR 0 6
42858: PPUSH
42859: CALL_OW 257
42863: PUSH
42864: LD_INT 8
42866: EQUAL
42867: IFFALSE 42888
// points := [ 35 , 35 , 30 ] ;
42869: LD_ADDR_VAR 0 9
42873: PUSH
42874: LD_INT 35
42876: PUSH
42877: LD_INT 35
42879: PUSH
42880: LD_INT 30
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: LIST
42887: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42888: LD_VAR 0 6
42892: PPUSH
42893: CALL_OW 257
42897: PUSH
42898: LD_INT 9
42900: EQUAL
42901: IFFALSE 42922
// points := [ 20 , 55 , 40 ] ;
42903: LD_ADDR_VAR 0 9
42907: PUSH
42908: LD_INT 20
42910: PUSH
42911: LD_INT 55
42913: PUSH
42914: LD_INT 40
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: LIST
42921: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42922: LD_VAR 0 6
42926: PPUSH
42927: CALL_OW 257
42931: PUSH
42932: LD_INT 12
42934: PUSH
42935: LD_INT 16
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: IN
42942: IFFALSE 42963
// points := [ 5 , 3 , 2 ] ;
42944: LD_ADDR_VAR 0 9
42948: PUSH
42949: LD_INT 5
42951: PUSH
42952: LD_INT 3
42954: PUSH
42955: LD_INT 2
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: LIST
42962: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42963: LD_VAR 0 6
42967: PPUSH
42968: CALL_OW 257
42972: PUSH
42973: LD_INT 17
42975: EQUAL
42976: IFFALSE 42997
// points := [ 100 , 50 , 75 ] ;
42978: LD_ADDR_VAR 0 9
42982: PUSH
42983: LD_INT 100
42985: PUSH
42986: LD_INT 50
42988: PUSH
42989: LD_INT 75
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: LIST
42996: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42997: LD_VAR 0 6
43001: PPUSH
43002: CALL_OW 257
43006: PUSH
43007: LD_INT 15
43009: EQUAL
43010: IFFALSE 43031
// points := [ 10 , 5 , 3 ] ;
43012: LD_ADDR_VAR 0 9
43016: PUSH
43017: LD_INT 10
43019: PUSH
43020: LD_INT 5
43022: PUSH
43023: LD_INT 3
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: LIST
43030: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43031: LD_VAR 0 6
43035: PPUSH
43036: CALL_OW 257
43040: PUSH
43041: LD_INT 14
43043: EQUAL
43044: IFFALSE 43065
// points := [ 10 , 0 , 0 ] ;
43046: LD_ADDR_VAR 0 9
43050: PUSH
43051: LD_INT 10
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: LD_INT 0
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: LIST
43064: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43065: LD_VAR 0 6
43069: PPUSH
43070: CALL_OW 257
43074: PUSH
43075: LD_INT 11
43077: EQUAL
43078: IFFALSE 43099
// points := [ 30 , 10 , 5 ] ;
43080: LD_ADDR_VAR 0 9
43084: PUSH
43085: LD_INT 30
43087: PUSH
43088: LD_INT 10
43090: PUSH
43091: LD_INT 5
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: LIST
43098: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43099: LD_VAR 0 1
43103: PPUSH
43104: LD_INT 5
43106: PPUSH
43107: CALL_OW 321
43111: PUSH
43112: LD_INT 2
43114: EQUAL
43115: IFFALSE 43132
// bpoints := bpoints * 1.8 ;
43117: LD_ADDR_VAR 0 10
43121: PUSH
43122: LD_VAR 0 10
43126: PUSH
43127: LD_REAL  1.80000000000000E+0000
43130: MUL
43131: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43132: LD_VAR 0 6
43136: PPUSH
43137: CALL_OW 257
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: LD_INT 2
43147: PUSH
43148: LD_INT 3
43150: PUSH
43151: LD_INT 4
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: IN
43160: PUSH
43161: LD_VAR 0 1
43165: PPUSH
43166: LD_INT 51
43168: PPUSH
43169: CALL_OW 321
43173: PUSH
43174: LD_INT 2
43176: EQUAL
43177: AND
43178: IFFALSE 43195
// bpoints := bpoints * 1.2 ;
43180: LD_ADDR_VAR 0 10
43184: PUSH
43185: LD_VAR 0 10
43189: PUSH
43190: LD_REAL  1.20000000000000E+0000
43193: MUL
43194: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43195: LD_VAR 0 6
43199: PPUSH
43200: CALL_OW 257
43204: PUSH
43205: LD_INT 5
43207: PUSH
43208: LD_INT 7
43210: PUSH
43211: LD_INT 9
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: LIST
43218: IN
43219: PUSH
43220: LD_VAR 0 1
43224: PPUSH
43225: LD_INT 52
43227: PPUSH
43228: CALL_OW 321
43232: PUSH
43233: LD_INT 2
43235: EQUAL
43236: AND
43237: IFFALSE 43254
// bpoints := bpoints * 1.5 ;
43239: LD_ADDR_VAR 0 10
43243: PUSH
43244: LD_VAR 0 10
43248: PUSH
43249: LD_REAL  1.50000000000000E+0000
43252: MUL
43253: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43254: LD_VAR 0 1
43258: PPUSH
43259: LD_INT 66
43261: PPUSH
43262: CALL_OW 321
43266: PUSH
43267: LD_INT 2
43269: EQUAL
43270: IFFALSE 43287
// bpoints := bpoints * 1.1 ;
43272: LD_ADDR_VAR 0 10
43276: PUSH
43277: LD_VAR 0 10
43281: PUSH
43282: LD_REAL  1.10000000000000E+0000
43285: MUL
43286: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43287: LD_ADDR_VAR 0 10
43291: PUSH
43292: LD_VAR 0 10
43296: PUSH
43297: LD_VAR 0 6
43301: PPUSH
43302: LD_INT 1
43304: PPUSH
43305: CALL_OW 259
43309: PUSH
43310: LD_REAL  1.15000000000000E+0000
43313: MUL
43314: MUL
43315: ST_TO_ADDR
// end ; unit_vehicle :
43316: GO 44144
43318: LD_INT 2
43320: DOUBLE
43321: EQUAL
43322: IFTRUE 43326
43324: GO 44132
43326: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43327: LD_VAR 0 6
43331: PPUSH
43332: CALL_OW 264
43336: PUSH
43337: LD_INT 2
43339: PUSH
43340: LD_INT 42
43342: PUSH
43343: LD_INT 24
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: LIST
43350: IN
43351: IFFALSE 43372
// points := [ 25 , 5 , 3 ] ;
43353: LD_ADDR_VAR 0 9
43357: PUSH
43358: LD_INT 25
43360: PUSH
43361: LD_INT 5
43363: PUSH
43364: LD_INT 3
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: LIST
43371: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43372: LD_VAR 0 6
43376: PPUSH
43377: CALL_OW 264
43381: PUSH
43382: LD_INT 4
43384: PUSH
43385: LD_INT 43
43387: PUSH
43388: LD_INT 25
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: LIST
43395: IN
43396: IFFALSE 43417
// points := [ 40 , 15 , 5 ] ;
43398: LD_ADDR_VAR 0 9
43402: PUSH
43403: LD_INT 40
43405: PUSH
43406: LD_INT 15
43408: PUSH
43409: LD_INT 5
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: LIST
43416: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43417: LD_VAR 0 6
43421: PPUSH
43422: CALL_OW 264
43426: PUSH
43427: LD_INT 3
43429: PUSH
43430: LD_INT 23
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: IN
43437: IFFALSE 43458
// points := [ 7 , 25 , 8 ] ;
43439: LD_ADDR_VAR 0 9
43443: PUSH
43444: LD_INT 7
43446: PUSH
43447: LD_INT 25
43449: PUSH
43450: LD_INT 8
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: LIST
43457: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43458: LD_VAR 0 6
43462: PPUSH
43463: CALL_OW 264
43467: PUSH
43468: LD_INT 5
43470: PUSH
43471: LD_INT 27
43473: PUSH
43474: LD_INT 44
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: LIST
43481: IN
43482: IFFALSE 43503
// points := [ 14 , 50 , 16 ] ;
43484: LD_ADDR_VAR 0 9
43488: PUSH
43489: LD_INT 14
43491: PUSH
43492: LD_INT 50
43494: PUSH
43495: LD_INT 16
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: LIST
43502: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43503: LD_VAR 0 6
43507: PPUSH
43508: CALL_OW 264
43512: PUSH
43513: LD_INT 6
43515: PUSH
43516: LD_INT 46
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: IN
43523: IFFALSE 43544
// points := [ 32 , 120 , 70 ] ;
43525: LD_ADDR_VAR 0 9
43529: PUSH
43530: LD_INT 32
43532: PUSH
43533: LD_INT 120
43535: PUSH
43536: LD_INT 70
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: LIST
43543: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43544: LD_VAR 0 6
43548: PPUSH
43549: CALL_OW 264
43553: PUSH
43554: LD_INT 7
43556: PUSH
43557: LD_INT 28
43559: PUSH
43560: LD_INT 45
43562: PUSH
43563: LD_INT 92
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: IN
43572: IFFALSE 43593
// points := [ 35 , 20 , 45 ] ;
43574: LD_ADDR_VAR 0 9
43578: PUSH
43579: LD_INT 35
43581: PUSH
43582: LD_INT 20
43584: PUSH
43585: LD_INT 45
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: LIST
43592: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43593: LD_VAR 0 6
43597: PPUSH
43598: CALL_OW 264
43602: PUSH
43603: LD_INT 47
43605: PUSH
43606: EMPTY
43607: LIST
43608: IN
43609: IFFALSE 43630
// points := [ 67 , 45 , 75 ] ;
43611: LD_ADDR_VAR 0 9
43615: PUSH
43616: LD_INT 67
43618: PUSH
43619: LD_INT 45
43621: PUSH
43622: LD_INT 75
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: LIST
43629: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43630: LD_VAR 0 6
43634: PPUSH
43635: CALL_OW 264
43639: PUSH
43640: LD_INT 26
43642: PUSH
43643: EMPTY
43644: LIST
43645: IN
43646: IFFALSE 43667
// points := [ 120 , 30 , 80 ] ;
43648: LD_ADDR_VAR 0 9
43652: PUSH
43653: LD_INT 120
43655: PUSH
43656: LD_INT 30
43658: PUSH
43659: LD_INT 80
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: LIST
43666: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43667: LD_VAR 0 6
43671: PPUSH
43672: CALL_OW 264
43676: PUSH
43677: LD_INT 22
43679: PUSH
43680: EMPTY
43681: LIST
43682: IN
43683: IFFALSE 43704
// points := [ 40 , 1 , 1 ] ;
43685: LD_ADDR_VAR 0 9
43689: PUSH
43690: LD_INT 40
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: LD_INT 1
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: LIST
43703: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43704: LD_VAR 0 6
43708: PPUSH
43709: CALL_OW 264
43713: PUSH
43714: LD_INT 29
43716: PUSH
43717: EMPTY
43718: LIST
43719: IN
43720: IFFALSE 43741
// points := [ 70 , 200 , 400 ] ;
43722: LD_ADDR_VAR 0 9
43726: PUSH
43727: LD_INT 70
43729: PUSH
43730: LD_INT 200
43732: PUSH
43733: LD_INT 400
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: LIST
43740: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43741: LD_VAR 0 6
43745: PPUSH
43746: CALL_OW 264
43750: PUSH
43751: LD_INT 14
43753: PUSH
43754: LD_INT 53
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: IN
43761: IFFALSE 43782
// points := [ 40 , 10 , 20 ] ;
43763: LD_ADDR_VAR 0 9
43767: PUSH
43768: LD_INT 40
43770: PUSH
43771: LD_INT 10
43773: PUSH
43774: LD_INT 20
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: LIST
43781: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43782: LD_VAR 0 6
43786: PPUSH
43787: CALL_OW 264
43791: PUSH
43792: LD_INT 9
43794: PUSH
43795: EMPTY
43796: LIST
43797: IN
43798: IFFALSE 43819
// points := [ 5 , 70 , 20 ] ;
43800: LD_ADDR_VAR 0 9
43804: PUSH
43805: LD_INT 5
43807: PUSH
43808: LD_INT 70
43810: PUSH
43811: LD_INT 20
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: LIST
43818: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43819: LD_VAR 0 6
43823: PPUSH
43824: CALL_OW 264
43828: PUSH
43829: LD_INT 10
43831: PUSH
43832: EMPTY
43833: LIST
43834: IN
43835: IFFALSE 43856
// points := [ 35 , 110 , 70 ] ;
43837: LD_ADDR_VAR 0 9
43841: PUSH
43842: LD_INT 35
43844: PUSH
43845: LD_INT 110
43847: PUSH
43848: LD_INT 70
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: LIST
43855: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43856: LD_VAR 0 6
43860: PPUSH
43861: CALL_OW 265
43865: PUSH
43866: LD_INT 25
43868: EQUAL
43869: IFFALSE 43890
// points := [ 80 , 65 , 100 ] ;
43871: LD_ADDR_VAR 0 9
43875: PUSH
43876: LD_INT 80
43878: PUSH
43879: LD_INT 65
43881: PUSH
43882: LD_INT 100
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: LIST
43889: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43890: LD_VAR 0 6
43894: PPUSH
43895: CALL_OW 263
43899: PUSH
43900: LD_INT 1
43902: EQUAL
43903: IFFALSE 43938
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43905: LD_ADDR_VAR 0 10
43909: PUSH
43910: LD_VAR 0 10
43914: PUSH
43915: LD_VAR 0 6
43919: PPUSH
43920: CALL_OW 311
43924: PPUSH
43925: LD_INT 3
43927: PPUSH
43928: CALL_OW 259
43932: PUSH
43933: LD_INT 4
43935: MUL
43936: MUL
43937: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43938: LD_VAR 0 6
43942: PPUSH
43943: CALL_OW 263
43947: PUSH
43948: LD_INT 2
43950: EQUAL
43951: IFFALSE 44002
// begin j := IsControledBy ( i ) ;
43953: LD_ADDR_VAR 0 7
43957: PUSH
43958: LD_VAR 0 6
43962: PPUSH
43963: CALL_OW 312
43967: ST_TO_ADDR
// if j then
43968: LD_VAR 0 7
43972: IFFALSE 44002
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43974: LD_ADDR_VAR 0 10
43978: PUSH
43979: LD_VAR 0 10
43983: PUSH
43984: LD_VAR 0 7
43988: PPUSH
43989: LD_INT 3
43991: PPUSH
43992: CALL_OW 259
43996: PUSH
43997: LD_INT 3
43999: MUL
44000: MUL
44001: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44002: LD_VAR 0 6
44006: PPUSH
44007: CALL_OW 264
44011: PUSH
44012: LD_INT 5
44014: PUSH
44015: LD_INT 6
44017: PUSH
44018: LD_INT 46
44020: PUSH
44021: LD_INT 44
44023: PUSH
44024: LD_INT 47
44026: PUSH
44027: LD_INT 45
44029: PUSH
44030: LD_INT 28
44032: PUSH
44033: LD_INT 7
44035: PUSH
44036: LD_INT 27
44038: PUSH
44039: LD_INT 29
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: IN
44054: PUSH
44055: LD_VAR 0 1
44059: PPUSH
44060: LD_INT 52
44062: PPUSH
44063: CALL_OW 321
44067: PUSH
44068: LD_INT 2
44070: EQUAL
44071: AND
44072: IFFALSE 44089
// bpoints := bpoints * 1.2 ;
44074: LD_ADDR_VAR 0 10
44078: PUSH
44079: LD_VAR 0 10
44083: PUSH
44084: LD_REAL  1.20000000000000E+0000
44087: MUL
44088: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44089: LD_VAR 0 6
44093: PPUSH
44094: CALL_OW 264
44098: PUSH
44099: LD_INT 6
44101: PUSH
44102: LD_INT 46
44104: PUSH
44105: LD_INT 47
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: LIST
44112: IN
44113: IFFALSE 44130
// bpoints := bpoints * 1.2 ;
44115: LD_ADDR_VAR 0 10
44119: PUSH
44120: LD_VAR 0 10
44124: PUSH
44125: LD_REAL  1.20000000000000E+0000
44128: MUL
44129: ST_TO_ADDR
// end ; unit_building :
44130: GO 44144
44132: LD_INT 3
44134: DOUBLE
44135: EQUAL
44136: IFTRUE 44140
44138: GO 44143
44140: POP
// ; end ;
44141: GO 44144
44143: POP
// for j = 1 to 3 do
44144: LD_ADDR_VAR 0 7
44148: PUSH
44149: DOUBLE
44150: LD_INT 1
44152: DEC
44153: ST_TO_ADDR
44154: LD_INT 3
44156: PUSH
44157: FOR_TO
44158: IFFALSE 44211
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44160: LD_ADDR_VAR 0 5
44164: PUSH
44165: LD_VAR 0 5
44169: PPUSH
44170: LD_VAR 0 7
44174: PPUSH
44175: LD_VAR 0 5
44179: PUSH
44180: LD_VAR 0 7
44184: ARRAY
44185: PUSH
44186: LD_VAR 0 9
44190: PUSH
44191: LD_VAR 0 7
44195: ARRAY
44196: PUSH
44197: LD_VAR 0 10
44201: MUL
44202: PLUS
44203: PPUSH
44204: CALL_OW 1
44208: ST_TO_ADDR
44209: GO 44157
44211: POP
44212: POP
// end ;
44213: GO 42692
44215: POP
44216: POP
// result := Replace ( result , 4 , tmp ) ;
44217: LD_ADDR_VAR 0 5
44221: PUSH
44222: LD_VAR 0 5
44226: PPUSH
44227: LD_INT 4
44229: PPUSH
44230: LD_VAR 0 8
44234: PPUSH
44235: CALL_OW 1
44239: ST_TO_ADDR
// end ;
44240: LD_VAR 0 5
44244: RET
// export function DangerAtRange ( unit , range ) ; begin
44245: LD_INT 0
44247: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44248: LD_ADDR_VAR 0 3
44252: PUSH
44253: LD_VAR 0 1
44257: PPUSH
44258: CALL_OW 255
44262: PPUSH
44263: LD_VAR 0 1
44267: PPUSH
44268: CALL_OW 250
44272: PPUSH
44273: LD_VAR 0 1
44277: PPUSH
44278: CALL_OW 251
44282: PPUSH
44283: LD_VAR 0 2
44287: PPUSH
44288: CALL 42544 0 4
44292: ST_TO_ADDR
// end ;
44293: LD_VAR 0 3
44297: RET
// export function DangerInArea ( side , area ) ; begin
44298: LD_INT 0
44300: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44301: LD_ADDR_VAR 0 3
44305: PUSH
44306: LD_VAR 0 2
44310: PPUSH
44311: LD_INT 81
44313: PUSH
44314: LD_VAR 0 1
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PPUSH
44323: CALL_OW 70
44327: ST_TO_ADDR
// end ;
44328: LD_VAR 0 3
44332: RET
// export function IsExtension ( b ) ; begin
44333: LD_INT 0
44335: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44336: LD_ADDR_VAR 0 2
44340: PUSH
44341: LD_VAR 0 1
44345: PUSH
44346: LD_INT 23
44348: PUSH
44349: LD_INT 20
44351: PUSH
44352: LD_INT 22
44354: PUSH
44355: LD_INT 17
44357: PUSH
44358: LD_INT 24
44360: PUSH
44361: LD_INT 21
44363: PUSH
44364: LD_INT 19
44366: PUSH
44367: LD_INT 16
44369: PUSH
44370: LD_INT 25
44372: PUSH
44373: LD_INT 18
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: IN
44388: ST_TO_ADDR
// end ;
44389: LD_VAR 0 2
44393: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44394: LD_INT 0
44396: PPUSH
44397: PPUSH
44398: PPUSH
// result := [ ] ;
44399: LD_ADDR_VAR 0 4
44403: PUSH
44404: EMPTY
44405: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44406: LD_ADDR_VAR 0 5
44410: PUSH
44411: LD_VAR 0 2
44415: PPUSH
44416: LD_INT 21
44418: PUSH
44419: LD_INT 3
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PPUSH
44426: CALL_OW 70
44430: ST_TO_ADDR
// if not tmp then
44431: LD_VAR 0 5
44435: NOT
44436: IFFALSE 44440
// exit ;
44438: GO 44504
// if checkLink then
44440: LD_VAR 0 3
44444: IFFALSE 44494
// begin for i in tmp do
44446: LD_ADDR_VAR 0 6
44450: PUSH
44451: LD_VAR 0 5
44455: PUSH
44456: FOR_IN
44457: IFFALSE 44492
// if GetBase ( i ) <> base then
44459: LD_VAR 0 6
44463: PPUSH
44464: CALL_OW 274
44468: PUSH
44469: LD_VAR 0 1
44473: NONEQUAL
44474: IFFALSE 44490
// ComLinkToBase ( base , i ) ;
44476: LD_VAR 0 1
44480: PPUSH
44481: LD_VAR 0 6
44485: PPUSH
44486: CALL_OW 169
44490: GO 44456
44492: POP
44493: POP
// end ; result := tmp ;
44494: LD_ADDR_VAR 0 4
44498: PUSH
44499: LD_VAR 0 5
44503: ST_TO_ADDR
// end ;
44504: LD_VAR 0 4
44508: RET
// export function ComComplete ( units , b ) ; var i ; begin
44509: LD_INT 0
44511: PPUSH
44512: PPUSH
// if not units then
44513: LD_VAR 0 1
44517: NOT
44518: IFFALSE 44522
// exit ;
44520: GO 44612
// for i in units do
44522: LD_ADDR_VAR 0 4
44526: PUSH
44527: LD_VAR 0 1
44531: PUSH
44532: FOR_IN
44533: IFFALSE 44610
// if BuildingStatus ( b ) = bs_build then
44535: LD_VAR 0 2
44539: PPUSH
44540: CALL_OW 461
44544: PUSH
44545: LD_INT 1
44547: EQUAL
44548: IFFALSE 44608
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44550: LD_VAR 0 4
44554: PPUSH
44555: LD_STRING h
44557: PUSH
44558: LD_VAR 0 2
44562: PPUSH
44563: CALL_OW 250
44567: PUSH
44568: LD_VAR 0 2
44572: PPUSH
44573: CALL_OW 251
44577: PUSH
44578: LD_VAR 0 2
44582: PUSH
44583: LD_INT 0
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: LD_INT 0
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: PUSH
44601: EMPTY
44602: LIST
44603: PPUSH
44604: CALL_OW 446
44608: GO 44532
44610: POP
44611: POP
// end ;
44612: LD_VAR 0 3
44616: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44617: LD_INT 0
44619: PPUSH
44620: PPUSH
44621: PPUSH
44622: PPUSH
44623: PPUSH
44624: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44625: LD_VAR 0 1
44629: NOT
44630: PUSH
44631: LD_VAR 0 1
44635: PPUSH
44636: CALL_OW 263
44640: PUSH
44641: LD_INT 2
44643: NONEQUAL
44644: OR
44645: IFFALSE 44649
// exit ;
44647: GO 44965
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44649: LD_ADDR_VAR 0 6
44653: PUSH
44654: LD_INT 22
44656: PUSH
44657: LD_VAR 0 1
44661: PPUSH
44662: CALL_OW 255
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 2
44673: PUSH
44674: LD_INT 30
44676: PUSH
44677: LD_INT 36
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 34
44686: PUSH
44687: LD_INT 31
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: LIST
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PPUSH
44703: CALL_OW 69
44707: ST_TO_ADDR
// if not tmp then
44708: LD_VAR 0 6
44712: NOT
44713: IFFALSE 44717
// exit ;
44715: GO 44965
// result := [ ] ;
44717: LD_ADDR_VAR 0 2
44721: PUSH
44722: EMPTY
44723: ST_TO_ADDR
// for i in tmp do
44724: LD_ADDR_VAR 0 3
44728: PUSH
44729: LD_VAR 0 6
44733: PUSH
44734: FOR_IN
44735: IFFALSE 44806
// begin t := UnitsInside ( i ) ;
44737: LD_ADDR_VAR 0 4
44741: PUSH
44742: LD_VAR 0 3
44746: PPUSH
44747: CALL_OW 313
44751: ST_TO_ADDR
// if t then
44752: LD_VAR 0 4
44756: IFFALSE 44804
// for j in t do
44758: LD_ADDR_VAR 0 7
44762: PUSH
44763: LD_VAR 0 4
44767: PUSH
44768: FOR_IN
44769: IFFALSE 44802
// result := Replace ( result , result + 1 , j ) ;
44771: LD_ADDR_VAR 0 2
44775: PUSH
44776: LD_VAR 0 2
44780: PPUSH
44781: LD_VAR 0 2
44785: PUSH
44786: LD_INT 1
44788: PLUS
44789: PPUSH
44790: LD_VAR 0 7
44794: PPUSH
44795: CALL_OW 1
44799: ST_TO_ADDR
44800: GO 44768
44802: POP
44803: POP
// end ;
44804: GO 44734
44806: POP
44807: POP
// if not result then
44808: LD_VAR 0 2
44812: NOT
44813: IFFALSE 44817
// exit ;
44815: GO 44965
// mech := result [ 1 ] ;
44817: LD_ADDR_VAR 0 5
44821: PUSH
44822: LD_VAR 0 2
44826: PUSH
44827: LD_INT 1
44829: ARRAY
44830: ST_TO_ADDR
// if result > 1 then
44831: LD_VAR 0 2
44835: PUSH
44836: LD_INT 1
44838: GREATER
44839: IFFALSE 44951
// begin for i = 2 to result do
44841: LD_ADDR_VAR 0 3
44845: PUSH
44846: DOUBLE
44847: LD_INT 2
44849: DEC
44850: ST_TO_ADDR
44851: LD_VAR 0 2
44855: PUSH
44856: FOR_TO
44857: IFFALSE 44949
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44859: LD_ADDR_VAR 0 4
44863: PUSH
44864: LD_VAR 0 2
44868: PUSH
44869: LD_VAR 0 3
44873: ARRAY
44874: PPUSH
44875: LD_INT 3
44877: PPUSH
44878: CALL_OW 259
44882: PUSH
44883: LD_VAR 0 2
44887: PUSH
44888: LD_VAR 0 3
44892: ARRAY
44893: PPUSH
44894: CALL_OW 432
44898: MINUS
44899: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44900: LD_VAR 0 4
44904: PUSH
44905: LD_VAR 0 5
44909: PPUSH
44910: LD_INT 3
44912: PPUSH
44913: CALL_OW 259
44917: PUSH
44918: LD_VAR 0 5
44922: PPUSH
44923: CALL_OW 432
44927: MINUS
44928: GREATEREQUAL
44929: IFFALSE 44947
// mech := result [ i ] ;
44931: LD_ADDR_VAR 0 5
44935: PUSH
44936: LD_VAR 0 2
44940: PUSH
44941: LD_VAR 0 3
44945: ARRAY
44946: ST_TO_ADDR
// end ;
44947: GO 44856
44949: POP
44950: POP
// end ; ComLinkTo ( vehicle , mech ) ;
44951: LD_VAR 0 1
44955: PPUSH
44956: LD_VAR 0 5
44960: PPUSH
44961: CALL_OW 135
// end ;
44965: LD_VAR 0 2
44969: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44970: LD_INT 0
44972: PPUSH
44973: PPUSH
44974: PPUSH
44975: PPUSH
44976: PPUSH
44977: PPUSH
44978: PPUSH
44979: PPUSH
44980: PPUSH
44981: PPUSH
44982: PPUSH
44983: PPUSH
44984: PPUSH
// result := [ ] ;
44985: LD_ADDR_VAR 0 7
44989: PUSH
44990: EMPTY
44991: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44992: LD_VAR 0 1
44996: PPUSH
44997: CALL_OW 266
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: IN
45012: NOT
45013: IFFALSE 45017
// exit ;
45015: GO 46651
// if name then
45017: LD_VAR 0 3
45021: IFFALSE 45037
// SetBName ( base_dep , name ) ;
45023: LD_VAR 0 1
45027: PPUSH
45028: LD_VAR 0 3
45032: PPUSH
45033: CALL_OW 500
// base := GetBase ( base_dep ) ;
45037: LD_ADDR_VAR 0 15
45041: PUSH
45042: LD_VAR 0 1
45046: PPUSH
45047: CALL_OW 274
45051: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45052: LD_ADDR_VAR 0 16
45056: PUSH
45057: LD_VAR 0 1
45061: PPUSH
45062: CALL_OW 255
45066: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45067: LD_ADDR_VAR 0 17
45071: PUSH
45072: LD_VAR 0 1
45076: PPUSH
45077: CALL_OW 248
45081: ST_TO_ADDR
// if sources then
45082: LD_VAR 0 5
45086: IFFALSE 45133
// for i = 1 to 3 do
45088: LD_ADDR_VAR 0 8
45092: PUSH
45093: DOUBLE
45094: LD_INT 1
45096: DEC
45097: ST_TO_ADDR
45098: LD_INT 3
45100: PUSH
45101: FOR_TO
45102: IFFALSE 45131
// AddResourceType ( base , i , sources [ i ] ) ;
45104: LD_VAR 0 15
45108: PPUSH
45109: LD_VAR 0 8
45113: PPUSH
45114: LD_VAR 0 5
45118: PUSH
45119: LD_VAR 0 8
45123: ARRAY
45124: PPUSH
45125: CALL_OW 276
45129: GO 45101
45131: POP
45132: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45133: LD_ADDR_VAR 0 18
45137: PUSH
45138: LD_VAR 0 15
45142: PPUSH
45143: LD_VAR 0 2
45147: PPUSH
45148: LD_INT 1
45150: PPUSH
45151: CALL 44394 0 3
45155: ST_TO_ADDR
// InitHc ;
45156: CALL_OW 19
// InitUc ;
45160: CALL_OW 18
// uc_side := side ;
45164: LD_ADDR_OWVAR 20
45168: PUSH
45169: LD_VAR 0 16
45173: ST_TO_ADDR
// uc_nation := nation ;
45174: LD_ADDR_OWVAR 21
45178: PUSH
45179: LD_VAR 0 17
45183: ST_TO_ADDR
// if buildings then
45184: LD_VAR 0 18
45188: IFFALSE 46510
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45190: LD_ADDR_VAR 0 19
45194: PUSH
45195: LD_VAR 0 18
45199: PPUSH
45200: LD_INT 2
45202: PUSH
45203: LD_INT 30
45205: PUSH
45206: LD_INT 29
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 30
45215: PUSH
45216: LD_INT 30
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: LIST
45227: PPUSH
45228: CALL_OW 72
45232: ST_TO_ADDR
// if tmp then
45233: LD_VAR 0 19
45237: IFFALSE 45285
// for i in tmp do
45239: LD_ADDR_VAR 0 8
45243: PUSH
45244: LD_VAR 0 19
45248: PUSH
45249: FOR_IN
45250: IFFALSE 45283
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45252: LD_VAR 0 8
45256: PPUSH
45257: CALL_OW 250
45261: PPUSH
45262: LD_VAR 0 8
45266: PPUSH
45267: CALL_OW 251
45271: PPUSH
45272: LD_VAR 0 16
45276: PPUSH
45277: CALL_OW 441
45281: GO 45249
45283: POP
45284: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45285: LD_VAR 0 18
45289: PPUSH
45290: LD_INT 2
45292: PUSH
45293: LD_INT 30
45295: PUSH
45296: LD_INT 32
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 30
45305: PUSH
45306: LD_INT 33
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: LIST
45317: PPUSH
45318: CALL_OW 72
45322: IFFALSE 45410
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45324: LD_ADDR_VAR 0 8
45328: PUSH
45329: LD_VAR 0 18
45333: PPUSH
45334: LD_INT 2
45336: PUSH
45337: LD_INT 30
45339: PUSH
45340: LD_INT 32
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 30
45349: PUSH
45350: LD_INT 33
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: LIST
45361: PPUSH
45362: CALL_OW 72
45366: PUSH
45367: FOR_IN
45368: IFFALSE 45408
// begin if not GetBWeapon ( i ) then
45370: LD_VAR 0 8
45374: PPUSH
45375: CALL_OW 269
45379: NOT
45380: IFFALSE 45406
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45382: LD_VAR 0 8
45386: PPUSH
45387: LD_VAR 0 8
45391: PPUSH
45392: LD_VAR 0 2
45396: PPUSH
45397: CALL 46656 0 2
45401: PPUSH
45402: CALL_OW 431
// end ;
45406: GO 45367
45408: POP
45409: POP
// end ; for i = 1 to personel do
45410: LD_ADDR_VAR 0 8
45414: PUSH
45415: DOUBLE
45416: LD_INT 1
45418: DEC
45419: ST_TO_ADDR
45420: LD_VAR 0 6
45424: PUSH
45425: FOR_TO
45426: IFFALSE 46490
// begin if i > 4 then
45428: LD_VAR 0 8
45432: PUSH
45433: LD_INT 4
45435: GREATER
45436: IFFALSE 45440
// break ;
45438: GO 46490
// case i of 1 :
45440: LD_VAR 0 8
45444: PUSH
45445: LD_INT 1
45447: DOUBLE
45448: EQUAL
45449: IFTRUE 45453
45451: GO 45533
45453: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45454: LD_ADDR_VAR 0 12
45458: PUSH
45459: LD_VAR 0 18
45463: PPUSH
45464: LD_INT 22
45466: PUSH
45467: LD_VAR 0 16
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 58
45478: PUSH
45479: EMPTY
45480: LIST
45481: PUSH
45482: LD_INT 2
45484: PUSH
45485: LD_INT 30
45487: PUSH
45488: LD_INT 32
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 30
45497: PUSH
45498: LD_INT 4
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 30
45507: PUSH
45508: LD_INT 5
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: LIST
45525: PPUSH
45526: CALL_OW 72
45530: ST_TO_ADDR
45531: GO 45755
45533: LD_INT 2
45535: DOUBLE
45536: EQUAL
45537: IFTRUE 45541
45539: GO 45603
45541: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45542: LD_ADDR_VAR 0 12
45546: PUSH
45547: LD_VAR 0 18
45551: PPUSH
45552: LD_INT 22
45554: PUSH
45555: LD_VAR 0 16
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 2
45566: PUSH
45567: LD_INT 30
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 30
45579: PUSH
45580: LD_INT 1
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: LIST
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PPUSH
45596: CALL_OW 72
45600: ST_TO_ADDR
45601: GO 45755
45603: LD_INT 3
45605: DOUBLE
45606: EQUAL
45607: IFTRUE 45611
45609: GO 45673
45611: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45612: LD_ADDR_VAR 0 12
45616: PUSH
45617: LD_VAR 0 18
45621: PPUSH
45622: LD_INT 22
45624: PUSH
45625: LD_VAR 0 16
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 2
45636: PUSH
45637: LD_INT 30
45639: PUSH
45640: LD_INT 2
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 30
45649: PUSH
45650: LD_INT 3
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: LIST
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PPUSH
45666: CALL_OW 72
45670: ST_TO_ADDR
45671: GO 45755
45673: LD_INT 4
45675: DOUBLE
45676: EQUAL
45677: IFTRUE 45681
45679: GO 45754
45681: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45682: LD_ADDR_VAR 0 12
45686: PUSH
45687: LD_VAR 0 18
45691: PPUSH
45692: LD_INT 22
45694: PUSH
45695: LD_VAR 0 16
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 2
45706: PUSH
45707: LD_INT 30
45709: PUSH
45710: LD_INT 6
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 30
45719: PUSH
45720: LD_INT 7
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 30
45729: PUSH
45730: LD_INT 8
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PPUSH
45747: CALL_OW 72
45751: ST_TO_ADDR
45752: GO 45755
45754: POP
// if i = 1 then
45755: LD_VAR 0 8
45759: PUSH
45760: LD_INT 1
45762: EQUAL
45763: IFFALSE 45874
// begin tmp := [ ] ;
45765: LD_ADDR_VAR 0 19
45769: PUSH
45770: EMPTY
45771: ST_TO_ADDR
// for j in f do
45772: LD_ADDR_VAR 0 9
45776: PUSH
45777: LD_VAR 0 12
45781: PUSH
45782: FOR_IN
45783: IFFALSE 45856
// if GetBType ( j ) = b_bunker then
45785: LD_VAR 0 9
45789: PPUSH
45790: CALL_OW 266
45794: PUSH
45795: LD_INT 32
45797: EQUAL
45798: IFFALSE 45825
// tmp := Insert ( tmp , 1 , j ) else
45800: LD_ADDR_VAR 0 19
45804: PUSH
45805: LD_VAR 0 19
45809: PPUSH
45810: LD_INT 1
45812: PPUSH
45813: LD_VAR 0 9
45817: PPUSH
45818: CALL_OW 2
45822: ST_TO_ADDR
45823: GO 45854
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45825: LD_ADDR_VAR 0 19
45829: PUSH
45830: LD_VAR 0 19
45834: PPUSH
45835: LD_VAR 0 19
45839: PUSH
45840: LD_INT 1
45842: PLUS
45843: PPUSH
45844: LD_VAR 0 9
45848: PPUSH
45849: CALL_OW 2
45853: ST_TO_ADDR
45854: GO 45782
45856: POP
45857: POP
// if tmp then
45858: LD_VAR 0 19
45862: IFFALSE 45874
// f := tmp ;
45864: LD_ADDR_VAR 0 12
45868: PUSH
45869: LD_VAR 0 19
45873: ST_TO_ADDR
// end ; x := personel [ i ] ;
45874: LD_ADDR_VAR 0 13
45878: PUSH
45879: LD_VAR 0 6
45883: PUSH
45884: LD_VAR 0 8
45888: ARRAY
45889: ST_TO_ADDR
// if x = - 1 then
45890: LD_VAR 0 13
45894: PUSH
45895: LD_INT 1
45897: NEG
45898: EQUAL
45899: IFFALSE 46108
// begin for j in f do
45901: LD_ADDR_VAR 0 9
45905: PUSH
45906: LD_VAR 0 12
45910: PUSH
45911: FOR_IN
45912: IFFALSE 46104
// repeat InitHc ;
45914: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45918: LD_VAR 0 9
45922: PPUSH
45923: CALL_OW 266
45927: PUSH
45928: LD_INT 5
45930: EQUAL
45931: IFFALSE 46001
// begin if UnitsInside ( j ) < 3 then
45933: LD_VAR 0 9
45937: PPUSH
45938: CALL_OW 313
45942: PUSH
45943: LD_INT 3
45945: LESS
45946: IFFALSE 45982
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45948: LD_INT 0
45950: PPUSH
45951: LD_INT 5
45953: PUSH
45954: LD_INT 8
45956: PUSH
45957: LD_INT 9
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: LIST
45964: PUSH
45965: LD_VAR 0 17
45969: ARRAY
45970: PPUSH
45971: LD_VAR 0 4
45975: PPUSH
45976: CALL_OW 380
45980: GO 45999
// PrepareHuman ( false , i , skill ) ;
45982: LD_INT 0
45984: PPUSH
45985: LD_VAR 0 8
45989: PPUSH
45990: LD_VAR 0 4
45994: PPUSH
45995: CALL_OW 380
// end else
45999: GO 46018
// PrepareHuman ( false , i , skill ) ;
46001: LD_INT 0
46003: PPUSH
46004: LD_VAR 0 8
46008: PPUSH
46009: LD_VAR 0 4
46013: PPUSH
46014: CALL_OW 380
// un := CreateHuman ;
46018: LD_ADDR_VAR 0 14
46022: PUSH
46023: CALL_OW 44
46027: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46028: LD_ADDR_VAR 0 7
46032: PUSH
46033: LD_VAR 0 7
46037: PPUSH
46038: LD_INT 1
46040: PPUSH
46041: LD_VAR 0 14
46045: PPUSH
46046: CALL_OW 2
46050: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46051: LD_VAR 0 14
46055: PPUSH
46056: LD_VAR 0 9
46060: PPUSH
46061: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46065: LD_VAR 0 9
46069: PPUSH
46070: CALL_OW 313
46074: PUSH
46075: LD_INT 6
46077: EQUAL
46078: PUSH
46079: LD_VAR 0 9
46083: PPUSH
46084: CALL_OW 266
46088: PUSH
46089: LD_INT 32
46091: PUSH
46092: LD_INT 31
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: IN
46099: OR
46100: IFFALSE 45914
46102: GO 45911
46104: POP
46105: POP
// end else
46106: GO 46488
// for j = 1 to x do
46108: LD_ADDR_VAR 0 9
46112: PUSH
46113: DOUBLE
46114: LD_INT 1
46116: DEC
46117: ST_TO_ADDR
46118: LD_VAR 0 13
46122: PUSH
46123: FOR_TO
46124: IFFALSE 46486
// begin InitHc ;
46126: CALL_OW 19
// if not f then
46130: LD_VAR 0 12
46134: NOT
46135: IFFALSE 46224
// begin PrepareHuman ( false , i , skill ) ;
46137: LD_INT 0
46139: PPUSH
46140: LD_VAR 0 8
46144: PPUSH
46145: LD_VAR 0 4
46149: PPUSH
46150: CALL_OW 380
// un := CreateHuman ;
46154: LD_ADDR_VAR 0 14
46158: PUSH
46159: CALL_OW 44
46163: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46164: LD_ADDR_VAR 0 7
46168: PUSH
46169: LD_VAR 0 7
46173: PPUSH
46174: LD_INT 1
46176: PPUSH
46177: LD_VAR 0 14
46181: PPUSH
46182: CALL_OW 2
46186: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46187: LD_VAR 0 14
46191: PPUSH
46192: LD_VAR 0 1
46196: PPUSH
46197: CALL_OW 250
46201: PPUSH
46202: LD_VAR 0 1
46206: PPUSH
46207: CALL_OW 251
46211: PPUSH
46212: LD_INT 10
46214: PPUSH
46215: LD_INT 0
46217: PPUSH
46218: CALL_OW 50
// continue ;
46222: GO 46123
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46224: LD_VAR 0 12
46228: PUSH
46229: LD_INT 1
46231: ARRAY
46232: PPUSH
46233: CALL_OW 313
46237: PUSH
46238: LD_VAR 0 12
46242: PUSH
46243: LD_INT 1
46245: ARRAY
46246: PPUSH
46247: CALL_OW 266
46251: PUSH
46252: LD_INT 32
46254: PUSH
46255: LD_INT 31
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: IN
46262: AND
46263: PUSH
46264: LD_VAR 0 12
46268: PUSH
46269: LD_INT 1
46271: ARRAY
46272: PPUSH
46273: CALL_OW 313
46277: PUSH
46278: LD_INT 6
46280: EQUAL
46281: OR
46282: IFFALSE 46302
// f := Delete ( f , 1 ) ;
46284: LD_ADDR_VAR 0 12
46288: PUSH
46289: LD_VAR 0 12
46293: PPUSH
46294: LD_INT 1
46296: PPUSH
46297: CALL_OW 3
46301: ST_TO_ADDR
// if not f then
46302: LD_VAR 0 12
46306: NOT
46307: IFFALSE 46325
// begin x := x + 2 ;
46309: LD_ADDR_VAR 0 13
46313: PUSH
46314: LD_VAR 0 13
46318: PUSH
46319: LD_INT 2
46321: PLUS
46322: ST_TO_ADDR
// continue ;
46323: GO 46123
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46325: LD_VAR 0 12
46329: PUSH
46330: LD_INT 1
46332: ARRAY
46333: PPUSH
46334: CALL_OW 266
46338: PUSH
46339: LD_INT 5
46341: EQUAL
46342: IFFALSE 46416
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46344: LD_VAR 0 12
46348: PUSH
46349: LD_INT 1
46351: ARRAY
46352: PPUSH
46353: CALL_OW 313
46357: PUSH
46358: LD_INT 3
46360: LESS
46361: IFFALSE 46397
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46363: LD_INT 0
46365: PPUSH
46366: LD_INT 5
46368: PUSH
46369: LD_INT 8
46371: PUSH
46372: LD_INT 9
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: LIST
46379: PUSH
46380: LD_VAR 0 17
46384: ARRAY
46385: PPUSH
46386: LD_VAR 0 4
46390: PPUSH
46391: CALL_OW 380
46395: GO 46414
// PrepareHuman ( false , i , skill ) ;
46397: LD_INT 0
46399: PPUSH
46400: LD_VAR 0 8
46404: PPUSH
46405: LD_VAR 0 4
46409: PPUSH
46410: CALL_OW 380
// end else
46414: GO 46433
// PrepareHuman ( false , i , skill ) ;
46416: LD_INT 0
46418: PPUSH
46419: LD_VAR 0 8
46423: PPUSH
46424: LD_VAR 0 4
46428: PPUSH
46429: CALL_OW 380
// un := CreateHuman ;
46433: LD_ADDR_VAR 0 14
46437: PUSH
46438: CALL_OW 44
46442: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46443: LD_ADDR_VAR 0 7
46447: PUSH
46448: LD_VAR 0 7
46452: PPUSH
46453: LD_INT 1
46455: PPUSH
46456: LD_VAR 0 14
46460: PPUSH
46461: CALL_OW 2
46465: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46466: LD_VAR 0 14
46470: PPUSH
46471: LD_VAR 0 12
46475: PUSH
46476: LD_INT 1
46478: ARRAY
46479: PPUSH
46480: CALL_OW 52
// end ;
46484: GO 46123
46486: POP
46487: POP
// end ;
46488: GO 45425
46490: POP
46491: POP
// result := result ^ buildings ;
46492: LD_ADDR_VAR 0 7
46496: PUSH
46497: LD_VAR 0 7
46501: PUSH
46502: LD_VAR 0 18
46506: ADD
46507: ST_TO_ADDR
// end else
46508: GO 46651
// begin for i = 1 to personel do
46510: LD_ADDR_VAR 0 8
46514: PUSH
46515: DOUBLE
46516: LD_INT 1
46518: DEC
46519: ST_TO_ADDR
46520: LD_VAR 0 6
46524: PUSH
46525: FOR_TO
46526: IFFALSE 46649
// begin if i > 4 then
46528: LD_VAR 0 8
46532: PUSH
46533: LD_INT 4
46535: GREATER
46536: IFFALSE 46540
// break ;
46538: GO 46649
// x := personel [ i ] ;
46540: LD_ADDR_VAR 0 13
46544: PUSH
46545: LD_VAR 0 6
46549: PUSH
46550: LD_VAR 0 8
46554: ARRAY
46555: ST_TO_ADDR
// if x = - 1 then
46556: LD_VAR 0 13
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: EQUAL
46565: IFFALSE 46569
// continue ;
46567: GO 46525
// PrepareHuman ( false , i , skill ) ;
46569: LD_INT 0
46571: PPUSH
46572: LD_VAR 0 8
46576: PPUSH
46577: LD_VAR 0 4
46581: PPUSH
46582: CALL_OW 380
// un := CreateHuman ;
46586: LD_ADDR_VAR 0 14
46590: PUSH
46591: CALL_OW 44
46595: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46596: LD_VAR 0 14
46600: PPUSH
46601: LD_VAR 0 1
46605: PPUSH
46606: CALL_OW 250
46610: PPUSH
46611: LD_VAR 0 1
46615: PPUSH
46616: CALL_OW 251
46620: PPUSH
46621: LD_INT 10
46623: PPUSH
46624: LD_INT 0
46626: PPUSH
46627: CALL_OW 50
// result := result ^ un ;
46631: LD_ADDR_VAR 0 7
46635: PUSH
46636: LD_VAR 0 7
46640: PUSH
46641: LD_VAR 0 14
46645: ADD
46646: ST_TO_ADDR
// end ;
46647: GO 46525
46649: POP
46650: POP
// end ; end ;
46651: LD_VAR 0 7
46655: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46656: LD_INT 0
46658: PPUSH
46659: PPUSH
46660: PPUSH
46661: PPUSH
46662: PPUSH
46663: PPUSH
46664: PPUSH
46665: PPUSH
46666: PPUSH
46667: PPUSH
46668: PPUSH
46669: PPUSH
46670: PPUSH
46671: PPUSH
46672: PPUSH
46673: PPUSH
// result := false ;
46674: LD_ADDR_VAR 0 3
46678: PUSH
46679: LD_INT 0
46681: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46682: LD_VAR 0 1
46686: NOT
46687: PUSH
46688: LD_VAR 0 1
46692: PPUSH
46693: CALL_OW 266
46697: PUSH
46698: LD_INT 32
46700: PUSH
46701: LD_INT 33
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: IN
46708: NOT
46709: OR
46710: IFFALSE 46714
// exit ;
46712: GO 47823
// nat := GetNation ( tower ) ;
46714: LD_ADDR_VAR 0 12
46718: PUSH
46719: LD_VAR 0 1
46723: PPUSH
46724: CALL_OW 248
46728: ST_TO_ADDR
// side := GetSide ( tower ) ;
46729: LD_ADDR_VAR 0 16
46733: PUSH
46734: LD_VAR 0 1
46738: PPUSH
46739: CALL_OW 255
46743: ST_TO_ADDR
// x := GetX ( tower ) ;
46744: LD_ADDR_VAR 0 10
46748: PUSH
46749: LD_VAR 0 1
46753: PPUSH
46754: CALL_OW 250
46758: ST_TO_ADDR
// y := GetY ( tower ) ;
46759: LD_ADDR_VAR 0 11
46763: PUSH
46764: LD_VAR 0 1
46768: PPUSH
46769: CALL_OW 251
46773: ST_TO_ADDR
// if not x or not y then
46774: LD_VAR 0 10
46778: NOT
46779: PUSH
46780: LD_VAR 0 11
46784: NOT
46785: OR
46786: IFFALSE 46790
// exit ;
46788: GO 47823
// weapon := 0 ;
46790: LD_ADDR_VAR 0 18
46794: PUSH
46795: LD_INT 0
46797: ST_TO_ADDR
// fac_list := [ ] ;
46798: LD_ADDR_VAR 0 17
46802: PUSH
46803: EMPTY
46804: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46805: LD_ADDR_VAR 0 6
46809: PUSH
46810: LD_VAR 0 1
46814: PPUSH
46815: CALL_OW 274
46819: PPUSH
46820: LD_VAR 0 2
46824: PPUSH
46825: LD_INT 0
46827: PPUSH
46828: CALL 44394 0 3
46832: PPUSH
46833: LD_INT 30
46835: PUSH
46836: LD_INT 3
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PPUSH
46843: CALL_OW 72
46847: ST_TO_ADDR
// if not factories then
46848: LD_VAR 0 6
46852: NOT
46853: IFFALSE 46857
// exit ;
46855: GO 47823
// for i in factories do
46857: LD_ADDR_VAR 0 8
46861: PUSH
46862: LD_VAR 0 6
46866: PUSH
46867: FOR_IN
46868: IFFALSE 46893
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46870: LD_ADDR_VAR 0 17
46874: PUSH
46875: LD_VAR 0 17
46879: PUSH
46880: LD_VAR 0 8
46884: PPUSH
46885: CALL_OW 478
46889: UNION
46890: ST_TO_ADDR
46891: GO 46867
46893: POP
46894: POP
// if not fac_list then
46895: LD_VAR 0 17
46899: NOT
46900: IFFALSE 46904
// exit ;
46902: GO 47823
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46904: LD_ADDR_VAR 0 5
46908: PUSH
46909: LD_INT 4
46911: PUSH
46912: LD_INT 5
46914: PUSH
46915: LD_INT 9
46917: PUSH
46918: LD_INT 10
46920: PUSH
46921: LD_INT 6
46923: PUSH
46924: LD_INT 7
46926: PUSH
46927: LD_INT 11
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 27
46941: PUSH
46942: LD_INT 28
46944: PUSH
46945: LD_INT 26
46947: PUSH
46948: LD_INT 30
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 43
46959: PUSH
46960: LD_INT 44
46962: PUSH
46963: LD_INT 46
46965: PUSH
46966: LD_INT 45
46968: PUSH
46969: LD_INT 47
46971: PUSH
46972: LD_INT 49
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: LIST
46987: PUSH
46988: LD_VAR 0 12
46992: ARRAY
46993: ST_TO_ADDR
// list := list isect fac_list ;
46994: LD_ADDR_VAR 0 5
46998: PUSH
46999: LD_VAR 0 5
47003: PUSH
47004: LD_VAR 0 17
47008: ISECT
47009: ST_TO_ADDR
// if not list then
47010: LD_VAR 0 5
47014: NOT
47015: IFFALSE 47019
// exit ;
47017: GO 47823
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47019: LD_VAR 0 12
47023: PUSH
47024: LD_INT 3
47026: EQUAL
47027: PUSH
47028: LD_INT 49
47030: PUSH
47031: LD_VAR 0 5
47035: IN
47036: AND
47037: PUSH
47038: LD_INT 31
47040: PPUSH
47041: LD_VAR 0 16
47045: PPUSH
47046: CALL_OW 321
47050: PUSH
47051: LD_INT 2
47053: EQUAL
47054: AND
47055: IFFALSE 47115
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47057: LD_INT 22
47059: PUSH
47060: LD_VAR 0 16
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 35
47071: PUSH
47072: LD_INT 49
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 91
47081: PUSH
47082: LD_VAR 0 1
47086: PUSH
47087: LD_INT 10
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: LIST
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: LIST
47099: PPUSH
47100: CALL_OW 69
47104: NOT
47105: IFFALSE 47115
// weapon := ru_time_lapser ;
47107: LD_ADDR_VAR 0 18
47111: PUSH
47112: LD_INT 49
47114: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47115: LD_VAR 0 12
47119: PUSH
47120: LD_INT 1
47122: PUSH
47123: LD_INT 2
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: IN
47130: PUSH
47131: LD_INT 11
47133: PUSH
47134: LD_VAR 0 5
47138: IN
47139: PUSH
47140: LD_INT 30
47142: PUSH
47143: LD_VAR 0 5
47147: IN
47148: OR
47149: AND
47150: PUSH
47151: LD_INT 6
47153: PPUSH
47154: LD_VAR 0 16
47158: PPUSH
47159: CALL_OW 321
47163: PUSH
47164: LD_INT 2
47166: EQUAL
47167: AND
47168: IFFALSE 47333
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47170: LD_INT 22
47172: PUSH
47173: LD_VAR 0 16
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 2
47184: PUSH
47185: LD_INT 35
47187: PUSH
47188: LD_INT 11
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 35
47197: PUSH
47198: LD_INT 30
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 91
47212: PUSH
47213: LD_VAR 0 1
47217: PUSH
47218: LD_INT 18
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: LIST
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: LIST
47230: PPUSH
47231: CALL_OW 69
47235: NOT
47236: PUSH
47237: LD_INT 22
47239: PUSH
47240: LD_VAR 0 16
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 2
47251: PUSH
47252: LD_INT 30
47254: PUSH
47255: LD_INT 32
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 30
47264: PUSH
47265: LD_INT 33
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 91
47279: PUSH
47280: LD_VAR 0 1
47284: PUSH
47285: LD_INT 12
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: LIST
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: LIST
47297: PUSH
47298: EMPTY
47299: LIST
47300: PPUSH
47301: CALL_OW 69
47305: PUSH
47306: LD_INT 2
47308: GREATER
47309: AND
47310: IFFALSE 47333
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47312: LD_ADDR_VAR 0 18
47316: PUSH
47317: LD_INT 11
47319: PUSH
47320: LD_INT 30
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_VAR 0 12
47331: ARRAY
47332: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47333: LD_VAR 0 18
47337: NOT
47338: PUSH
47339: LD_INT 40
47341: PPUSH
47342: LD_VAR 0 16
47346: PPUSH
47347: CALL_OW 321
47351: PUSH
47352: LD_INT 2
47354: EQUAL
47355: AND
47356: PUSH
47357: LD_INT 7
47359: PUSH
47360: LD_VAR 0 5
47364: IN
47365: PUSH
47366: LD_INT 28
47368: PUSH
47369: LD_VAR 0 5
47373: IN
47374: OR
47375: PUSH
47376: LD_INT 45
47378: PUSH
47379: LD_VAR 0 5
47383: IN
47384: OR
47385: AND
47386: IFFALSE 47640
// begin hex := GetHexInfo ( x , y ) ;
47388: LD_ADDR_VAR 0 4
47392: PUSH
47393: LD_VAR 0 10
47397: PPUSH
47398: LD_VAR 0 11
47402: PPUSH
47403: CALL_OW 546
47407: ST_TO_ADDR
// if hex [ 1 ] then
47408: LD_VAR 0 4
47412: PUSH
47413: LD_INT 1
47415: ARRAY
47416: IFFALSE 47420
// exit ;
47418: GO 47823
// height := hex [ 2 ] ;
47420: LD_ADDR_VAR 0 15
47424: PUSH
47425: LD_VAR 0 4
47429: PUSH
47430: LD_INT 2
47432: ARRAY
47433: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47434: LD_ADDR_VAR 0 14
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: LD_INT 2
47444: PUSH
47445: LD_INT 3
47447: PUSH
47448: LD_INT 5
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: ST_TO_ADDR
// for i in tmp do
47457: LD_ADDR_VAR 0 8
47461: PUSH
47462: LD_VAR 0 14
47466: PUSH
47467: FOR_IN
47468: IFFALSE 47638
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47470: LD_ADDR_VAR 0 9
47474: PUSH
47475: LD_VAR 0 10
47479: PPUSH
47480: LD_VAR 0 8
47484: PPUSH
47485: LD_INT 5
47487: PPUSH
47488: CALL_OW 272
47492: PUSH
47493: LD_VAR 0 11
47497: PPUSH
47498: LD_VAR 0 8
47502: PPUSH
47503: LD_INT 5
47505: PPUSH
47506: CALL_OW 273
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47515: LD_VAR 0 9
47519: PUSH
47520: LD_INT 1
47522: ARRAY
47523: PPUSH
47524: LD_VAR 0 9
47528: PUSH
47529: LD_INT 2
47531: ARRAY
47532: PPUSH
47533: CALL_OW 488
47537: IFFALSE 47636
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47539: LD_ADDR_VAR 0 4
47543: PUSH
47544: LD_VAR 0 9
47548: PUSH
47549: LD_INT 1
47551: ARRAY
47552: PPUSH
47553: LD_VAR 0 9
47557: PUSH
47558: LD_INT 2
47560: ARRAY
47561: PPUSH
47562: CALL_OW 546
47566: ST_TO_ADDR
// if hex [ 1 ] then
47567: LD_VAR 0 4
47571: PUSH
47572: LD_INT 1
47574: ARRAY
47575: IFFALSE 47579
// continue ;
47577: GO 47467
// h := hex [ 2 ] ;
47579: LD_ADDR_VAR 0 13
47583: PUSH
47584: LD_VAR 0 4
47588: PUSH
47589: LD_INT 2
47591: ARRAY
47592: ST_TO_ADDR
// if h + 7 < height then
47593: LD_VAR 0 13
47597: PUSH
47598: LD_INT 7
47600: PLUS
47601: PUSH
47602: LD_VAR 0 15
47606: LESS
47607: IFFALSE 47636
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47609: LD_ADDR_VAR 0 18
47613: PUSH
47614: LD_INT 7
47616: PUSH
47617: LD_INT 28
47619: PUSH
47620: LD_INT 45
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: LIST
47627: PUSH
47628: LD_VAR 0 12
47632: ARRAY
47633: ST_TO_ADDR
// break ;
47634: GO 47638
// end ; end ; end ;
47636: GO 47467
47638: POP
47639: POP
// end ; if not weapon then
47640: LD_VAR 0 18
47644: NOT
47645: IFFALSE 47705
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47647: LD_ADDR_VAR 0 5
47651: PUSH
47652: LD_VAR 0 5
47656: PUSH
47657: LD_INT 11
47659: PUSH
47660: LD_INT 30
47662: PUSH
47663: LD_INT 49
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: LIST
47670: DIFF
47671: ST_TO_ADDR
// if not list then
47672: LD_VAR 0 5
47676: NOT
47677: IFFALSE 47681
// exit ;
47679: GO 47823
// weapon := list [ rand ( 1 , list ) ] ;
47681: LD_ADDR_VAR 0 18
47685: PUSH
47686: LD_VAR 0 5
47690: PUSH
47691: LD_INT 1
47693: PPUSH
47694: LD_VAR 0 5
47698: PPUSH
47699: CALL_OW 12
47703: ARRAY
47704: ST_TO_ADDR
// end ; if weapon then
47705: LD_VAR 0 18
47709: IFFALSE 47823
// begin tmp := CostOfWeapon ( weapon ) ;
47711: LD_ADDR_VAR 0 14
47715: PUSH
47716: LD_VAR 0 18
47720: PPUSH
47721: CALL_OW 451
47725: ST_TO_ADDR
// j := GetBase ( tower ) ;
47726: LD_ADDR_VAR 0 9
47730: PUSH
47731: LD_VAR 0 1
47735: PPUSH
47736: CALL_OW 274
47740: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47741: LD_VAR 0 9
47745: PPUSH
47746: LD_INT 1
47748: PPUSH
47749: CALL_OW 275
47753: PUSH
47754: LD_VAR 0 14
47758: PUSH
47759: LD_INT 1
47761: ARRAY
47762: GREATEREQUAL
47763: PUSH
47764: LD_VAR 0 9
47768: PPUSH
47769: LD_INT 2
47771: PPUSH
47772: CALL_OW 275
47776: PUSH
47777: LD_VAR 0 14
47781: PUSH
47782: LD_INT 2
47784: ARRAY
47785: GREATEREQUAL
47786: AND
47787: PUSH
47788: LD_VAR 0 9
47792: PPUSH
47793: LD_INT 3
47795: PPUSH
47796: CALL_OW 275
47800: PUSH
47801: LD_VAR 0 14
47805: PUSH
47806: LD_INT 3
47808: ARRAY
47809: GREATEREQUAL
47810: AND
47811: IFFALSE 47823
// result := weapon ;
47813: LD_ADDR_VAR 0 3
47817: PUSH
47818: LD_VAR 0 18
47822: ST_TO_ADDR
// end ; end ;
47823: LD_VAR 0 3
47827: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47828: LD_INT 0
47830: PPUSH
47831: PPUSH
// result := true ;
47832: LD_ADDR_VAR 0 3
47836: PUSH
47837: LD_INT 1
47839: ST_TO_ADDR
// if array1 = array2 then
47840: LD_VAR 0 1
47844: PUSH
47845: LD_VAR 0 2
47849: EQUAL
47850: IFFALSE 47910
// begin for i = 1 to array1 do
47852: LD_ADDR_VAR 0 4
47856: PUSH
47857: DOUBLE
47858: LD_INT 1
47860: DEC
47861: ST_TO_ADDR
47862: LD_VAR 0 1
47866: PUSH
47867: FOR_TO
47868: IFFALSE 47906
// if array1 [ i ] <> array2 [ i ] then
47870: LD_VAR 0 1
47874: PUSH
47875: LD_VAR 0 4
47879: ARRAY
47880: PUSH
47881: LD_VAR 0 2
47885: PUSH
47886: LD_VAR 0 4
47890: ARRAY
47891: NONEQUAL
47892: IFFALSE 47904
// begin result := false ;
47894: LD_ADDR_VAR 0 3
47898: PUSH
47899: LD_INT 0
47901: ST_TO_ADDR
// break ;
47902: GO 47906
// end ;
47904: GO 47867
47906: POP
47907: POP
// end else
47908: GO 47918
// result := false ;
47910: LD_ADDR_VAR 0 3
47914: PUSH
47915: LD_INT 0
47917: ST_TO_ADDR
// end ;
47918: LD_VAR 0 3
47922: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47923: LD_INT 0
47925: PPUSH
47926: PPUSH
// if not array1 or not array2 then
47927: LD_VAR 0 1
47931: NOT
47932: PUSH
47933: LD_VAR 0 2
47937: NOT
47938: OR
47939: IFFALSE 47943
// exit ;
47941: GO 48007
// result := true ;
47943: LD_ADDR_VAR 0 3
47947: PUSH
47948: LD_INT 1
47950: ST_TO_ADDR
// for i = 1 to array1 do
47951: LD_ADDR_VAR 0 4
47955: PUSH
47956: DOUBLE
47957: LD_INT 1
47959: DEC
47960: ST_TO_ADDR
47961: LD_VAR 0 1
47965: PUSH
47966: FOR_TO
47967: IFFALSE 48005
// if array1 [ i ] <> array2 [ i ] then
47969: LD_VAR 0 1
47973: PUSH
47974: LD_VAR 0 4
47978: ARRAY
47979: PUSH
47980: LD_VAR 0 2
47984: PUSH
47985: LD_VAR 0 4
47989: ARRAY
47990: NONEQUAL
47991: IFFALSE 48003
// begin result := false ;
47993: LD_ADDR_VAR 0 3
47997: PUSH
47998: LD_INT 0
48000: ST_TO_ADDR
// break ;
48001: GO 48005
// end ;
48003: GO 47966
48005: POP
48006: POP
// end ;
48007: LD_VAR 0 3
48011: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48012: LD_INT 0
48014: PPUSH
48015: PPUSH
48016: PPUSH
// pom := GetBase ( fac ) ;
48017: LD_ADDR_VAR 0 5
48021: PUSH
48022: LD_VAR 0 1
48026: PPUSH
48027: CALL_OW 274
48031: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48032: LD_ADDR_VAR 0 4
48036: PUSH
48037: LD_VAR 0 2
48041: PUSH
48042: LD_INT 1
48044: ARRAY
48045: PPUSH
48046: LD_VAR 0 2
48050: PUSH
48051: LD_INT 2
48053: ARRAY
48054: PPUSH
48055: LD_VAR 0 2
48059: PUSH
48060: LD_INT 3
48062: ARRAY
48063: PPUSH
48064: LD_VAR 0 2
48068: PUSH
48069: LD_INT 4
48071: ARRAY
48072: PPUSH
48073: CALL_OW 449
48077: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48078: LD_ADDR_VAR 0 3
48082: PUSH
48083: LD_VAR 0 5
48087: PPUSH
48088: LD_INT 1
48090: PPUSH
48091: CALL_OW 275
48095: PUSH
48096: LD_VAR 0 4
48100: PUSH
48101: LD_INT 1
48103: ARRAY
48104: GREATEREQUAL
48105: PUSH
48106: LD_VAR 0 5
48110: PPUSH
48111: LD_INT 2
48113: PPUSH
48114: CALL_OW 275
48118: PUSH
48119: LD_VAR 0 4
48123: PUSH
48124: LD_INT 2
48126: ARRAY
48127: GREATEREQUAL
48128: AND
48129: PUSH
48130: LD_VAR 0 5
48134: PPUSH
48135: LD_INT 3
48137: PPUSH
48138: CALL_OW 275
48142: PUSH
48143: LD_VAR 0 4
48147: PUSH
48148: LD_INT 3
48150: ARRAY
48151: GREATEREQUAL
48152: AND
48153: ST_TO_ADDR
// end ;
48154: LD_VAR 0 3
48158: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48159: LD_INT 0
48161: PPUSH
48162: PPUSH
48163: PPUSH
48164: PPUSH
// pom := GetBase ( building ) ;
48165: LD_ADDR_VAR 0 3
48169: PUSH
48170: LD_VAR 0 1
48174: PPUSH
48175: CALL_OW 274
48179: ST_TO_ADDR
// if not pom then
48180: LD_VAR 0 3
48184: NOT
48185: IFFALSE 48189
// exit ;
48187: GO 48359
// btype := GetBType ( building ) ;
48189: LD_ADDR_VAR 0 5
48193: PUSH
48194: LD_VAR 0 1
48198: PPUSH
48199: CALL_OW 266
48203: ST_TO_ADDR
// if btype = b_armoury then
48204: LD_VAR 0 5
48208: PUSH
48209: LD_INT 4
48211: EQUAL
48212: IFFALSE 48222
// btype := b_barracks ;
48214: LD_ADDR_VAR 0 5
48218: PUSH
48219: LD_INT 5
48221: ST_TO_ADDR
// if btype = b_depot then
48222: LD_VAR 0 5
48226: PUSH
48227: LD_INT 0
48229: EQUAL
48230: IFFALSE 48240
// btype := b_warehouse ;
48232: LD_ADDR_VAR 0 5
48236: PUSH
48237: LD_INT 1
48239: ST_TO_ADDR
// if btype = b_workshop then
48240: LD_VAR 0 5
48244: PUSH
48245: LD_INT 2
48247: EQUAL
48248: IFFALSE 48258
// btype := b_factory ;
48250: LD_ADDR_VAR 0 5
48254: PUSH
48255: LD_INT 3
48257: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48258: LD_ADDR_VAR 0 4
48262: PUSH
48263: LD_VAR 0 5
48267: PPUSH
48268: LD_VAR 0 1
48272: PPUSH
48273: CALL_OW 248
48277: PPUSH
48278: CALL_OW 450
48282: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48283: LD_ADDR_VAR 0 2
48287: PUSH
48288: LD_VAR 0 3
48292: PPUSH
48293: LD_INT 1
48295: PPUSH
48296: CALL_OW 275
48300: PUSH
48301: LD_VAR 0 4
48305: PUSH
48306: LD_INT 1
48308: ARRAY
48309: GREATEREQUAL
48310: PUSH
48311: LD_VAR 0 3
48315: PPUSH
48316: LD_INT 2
48318: PPUSH
48319: CALL_OW 275
48323: PUSH
48324: LD_VAR 0 4
48328: PUSH
48329: LD_INT 2
48331: ARRAY
48332: GREATEREQUAL
48333: AND
48334: PUSH
48335: LD_VAR 0 3
48339: PPUSH
48340: LD_INT 3
48342: PPUSH
48343: CALL_OW 275
48347: PUSH
48348: LD_VAR 0 4
48352: PUSH
48353: LD_INT 3
48355: ARRAY
48356: GREATEREQUAL
48357: AND
48358: ST_TO_ADDR
// end ;
48359: LD_VAR 0 2
48363: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48364: LD_INT 0
48366: PPUSH
48367: PPUSH
48368: PPUSH
// pom := GetBase ( building ) ;
48369: LD_ADDR_VAR 0 4
48373: PUSH
48374: LD_VAR 0 1
48378: PPUSH
48379: CALL_OW 274
48383: ST_TO_ADDR
// if not pom then
48384: LD_VAR 0 4
48388: NOT
48389: IFFALSE 48393
// exit ;
48391: GO 48494
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48393: LD_ADDR_VAR 0 5
48397: PUSH
48398: LD_VAR 0 2
48402: PPUSH
48403: LD_VAR 0 1
48407: PPUSH
48408: CALL_OW 248
48412: PPUSH
48413: CALL_OW 450
48417: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48418: LD_ADDR_VAR 0 3
48422: PUSH
48423: LD_VAR 0 4
48427: PPUSH
48428: LD_INT 1
48430: PPUSH
48431: CALL_OW 275
48435: PUSH
48436: LD_VAR 0 5
48440: PUSH
48441: LD_INT 1
48443: ARRAY
48444: GREATEREQUAL
48445: PUSH
48446: LD_VAR 0 4
48450: PPUSH
48451: LD_INT 2
48453: PPUSH
48454: CALL_OW 275
48458: PUSH
48459: LD_VAR 0 5
48463: PUSH
48464: LD_INT 2
48466: ARRAY
48467: GREATEREQUAL
48468: AND
48469: PUSH
48470: LD_VAR 0 4
48474: PPUSH
48475: LD_INT 3
48477: PPUSH
48478: CALL_OW 275
48482: PUSH
48483: LD_VAR 0 5
48487: PUSH
48488: LD_INT 3
48490: ARRAY
48491: GREATEREQUAL
48492: AND
48493: ST_TO_ADDR
// end ;
48494: LD_VAR 0 3
48498: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48499: LD_INT 0
48501: PPUSH
48502: PPUSH
48503: PPUSH
48504: PPUSH
48505: PPUSH
48506: PPUSH
48507: PPUSH
48508: PPUSH
48509: PPUSH
48510: PPUSH
48511: PPUSH
// result := false ;
48512: LD_ADDR_VAR 0 8
48516: PUSH
48517: LD_INT 0
48519: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48520: LD_VAR 0 5
48524: NOT
48525: PUSH
48526: LD_VAR 0 1
48530: NOT
48531: OR
48532: PUSH
48533: LD_VAR 0 2
48537: NOT
48538: OR
48539: PUSH
48540: LD_VAR 0 3
48544: NOT
48545: OR
48546: IFFALSE 48550
// exit ;
48548: GO 49364
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48550: LD_ADDR_VAR 0 14
48554: PUSH
48555: LD_VAR 0 1
48559: PPUSH
48560: LD_VAR 0 2
48564: PPUSH
48565: LD_VAR 0 3
48569: PPUSH
48570: LD_VAR 0 4
48574: PPUSH
48575: LD_VAR 0 5
48579: PUSH
48580: LD_INT 1
48582: ARRAY
48583: PPUSH
48584: CALL_OW 248
48588: PPUSH
48589: LD_INT 0
48591: PPUSH
48592: CALL 50597 0 6
48596: ST_TO_ADDR
// if not hexes then
48597: LD_VAR 0 14
48601: NOT
48602: IFFALSE 48606
// exit ;
48604: GO 49364
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48606: LD_ADDR_VAR 0 17
48610: PUSH
48611: LD_VAR 0 5
48615: PPUSH
48616: LD_INT 22
48618: PUSH
48619: LD_VAR 0 13
48623: PPUSH
48624: CALL_OW 255
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 2
48635: PUSH
48636: LD_INT 30
48638: PUSH
48639: LD_INT 0
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 30
48648: PUSH
48649: LD_INT 1
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: LIST
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PPUSH
48665: CALL_OW 72
48669: ST_TO_ADDR
// for i = 1 to hexes do
48670: LD_ADDR_VAR 0 9
48674: PUSH
48675: DOUBLE
48676: LD_INT 1
48678: DEC
48679: ST_TO_ADDR
48680: LD_VAR 0 14
48684: PUSH
48685: FOR_TO
48686: IFFALSE 49362
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48688: LD_ADDR_VAR 0 13
48692: PUSH
48693: LD_VAR 0 14
48697: PUSH
48698: LD_VAR 0 9
48702: ARRAY
48703: PUSH
48704: LD_INT 1
48706: ARRAY
48707: PPUSH
48708: LD_VAR 0 14
48712: PUSH
48713: LD_VAR 0 9
48717: ARRAY
48718: PUSH
48719: LD_INT 2
48721: ARRAY
48722: PPUSH
48723: CALL_OW 428
48727: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48728: LD_VAR 0 14
48732: PUSH
48733: LD_VAR 0 9
48737: ARRAY
48738: PUSH
48739: LD_INT 1
48741: ARRAY
48742: PPUSH
48743: LD_VAR 0 14
48747: PUSH
48748: LD_VAR 0 9
48752: ARRAY
48753: PUSH
48754: LD_INT 2
48756: ARRAY
48757: PPUSH
48758: CALL_OW 351
48762: PUSH
48763: LD_VAR 0 14
48767: PUSH
48768: LD_VAR 0 9
48772: ARRAY
48773: PUSH
48774: LD_INT 1
48776: ARRAY
48777: PPUSH
48778: LD_VAR 0 14
48782: PUSH
48783: LD_VAR 0 9
48787: ARRAY
48788: PUSH
48789: LD_INT 2
48791: ARRAY
48792: PPUSH
48793: CALL_OW 488
48797: NOT
48798: OR
48799: PUSH
48800: LD_VAR 0 13
48804: PPUSH
48805: CALL_OW 247
48809: PUSH
48810: LD_INT 3
48812: EQUAL
48813: OR
48814: IFFALSE 48820
// exit ;
48816: POP
48817: POP
48818: GO 49364
// if not tmp then
48820: LD_VAR 0 13
48824: NOT
48825: IFFALSE 48829
// continue ;
48827: GO 48685
// result := true ;
48829: LD_ADDR_VAR 0 8
48833: PUSH
48834: LD_INT 1
48836: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48837: LD_VAR 0 6
48841: PUSH
48842: LD_VAR 0 13
48846: PPUSH
48847: CALL_OW 247
48851: PUSH
48852: LD_INT 2
48854: EQUAL
48855: AND
48856: PUSH
48857: LD_VAR 0 13
48861: PPUSH
48862: CALL_OW 263
48866: PUSH
48867: LD_INT 1
48869: EQUAL
48870: AND
48871: IFFALSE 49035
// begin if IsDrivenBy ( tmp ) then
48873: LD_VAR 0 13
48877: PPUSH
48878: CALL_OW 311
48882: IFFALSE 48886
// continue ;
48884: GO 48685
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48886: LD_VAR 0 6
48890: PPUSH
48891: LD_INT 3
48893: PUSH
48894: LD_INT 60
48896: PUSH
48897: EMPTY
48898: LIST
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 3
48906: PUSH
48907: LD_INT 55
48909: PUSH
48910: EMPTY
48911: LIST
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PPUSH
48921: CALL_OW 72
48925: IFFALSE 49033
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48927: LD_ADDR_VAR 0 18
48931: PUSH
48932: LD_VAR 0 6
48936: PPUSH
48937: LD_INT 3
48939: PUSH
48940: LD_INT 60
48942: PUSH
48943: EMPTY
48944: LIST
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 3
48952: PUSH
48953: LD_INT 55
48955: PUSH
48956: EMPTY
48957: LIST
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PPUSH
48967: CALL_OW 72
48971: PUSH
48972: LD_INT 1
48974: ARRAY
48975: ST_TO_ADDR
// if IsInUnit ( driver ) then
48976: LD_VAR 0 18
48980: PPUSH
48981: CALL_OW 310
48985: IFFALSE 48996
// ComExit ( driver ) ;
48987: LD_VAR 0 18
48991: PPUSH
48992: CALL 74285 0 1
// AddComEnterUnit ( driver , tmp ) ;
48996: LD_VAR 0 18
49000: PPUSH
49001: LD_VAR 0 13
49005: PPUSH
49006: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49010: LD_VAR 0 18
49014: PPUSH
49015: LD_VAR 0 7
49019: PPUSH
49020: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49024: LD_VAR 0 18
49028: PPUSH
49029: CALL_OW 181
// end ; continue ;
49033: GO 48685
// end ; if not cleaners or not tmp in cleaners then
49035: LD_VAR 0 6
49039: NOT
49040: PUSH
49041: LD_VAR 0 13
49045: PUSH
49046: LD_VAR 0 6
49050: IN
49051: NOT
49052: OR
49053: IFFALSE 49360
// begin if dep then
49055: LD_VAR 0 17
49059: IFFALSE 49195
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49061: LD_ADDR_VAR 0 16
49065: PUSH
49066: LD_VAR 0 17
49070: PUSH
49071: LD_INT 1
49073: ARRAY
49074: PPUSH
49075: CALL_OW 250
49079: PPUSH
49080: LD_VAR 0 17
49084: PUSH
49085: LD_INT 1
49087: ARRAY
49088: PPUSH
49089: CALL_OW 254
49093: PPUSH
49094: LD_INT 5
49096: PPUSH
49097: CALL_OW 272
49101: PUSH
49102: LD_VAR 0 17
49106: PUSH
49107: LD_INT 1
49109: ARRAY
49110: PPUSH
49111: CALL_OW 251
49115: PPUSH
49116: LD_VAR 0 17
49120: PUSH
49121: LD_INT 1
49123: ARRAY
49124: PPUSH
49125: CALL_OW 254
49129: PPUSH
49130: LD_INT 5
49132: PPUSH
49133: CALL_OW 273
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49142: LD_VAR 0 16
49146: PUSH
49147: LD_INT 1
49149: ARRAY
49150: PPUSH
49151: LD_VAR 0 16
49155: PUSH
49156: LD_INT 2
49158: ARRAY
49159: PPUSH
49160: CALL_OW 488
49164: IFFALSE 49195
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49166: LD_VAR 0 13
49170: PPUSH
49171: LD_VAR 0 16
49175: PUSH
49176: LD_INT 1
49178: ARRAY
49179: PPUSH
49180: LD_VAR 0 16
49184: PUSH
49185: LD_INT 2
49187: ARRAY
49188: PPUSH
49189: CALL_OW 111
// continue ;
49193: GO 48685
// end ; end ; r := GetDir ( tmp ) ;
49195: LD_ADDR_VAR 0 15
49199: PUSH
49200: LD_VAR 0 13
49204: PPUSH
49205: CALL_OW 254
49209: ST_TO_ADDR
// if r = 5 then
49210: LD_VAR 0 15
49214: PUSH
49215: LD_INT 5
49217: EQUAL
49218: IFFALSE 49228
// r := 0 ;
49220: LD_ADDR_VAR 0 15
49224: PUSH
49225: LD_INT 0
49227: ST_TO_ADDR
// for j = r to 5 do
49228: LD_ADDR_VAR 0 10
49232: PUSH
49233: DOUBLE
49234: LD_VAR 0 15
49238: DEC
49239: ST_TO_ADDR
49240: LD_INT 5
49242: PUSH
49243: FOR_TO
49244: IFFALSE 49358
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49246: LD_ADDR_VAR 0 11
49250: PUSH
49251: LD_VAR 0 13
49255: PPUSH
49256: CALL_OW 250
49260: PPUSH
49261: LD_VAR 0 10
49265: PPUSH
49266: LD_INT 2
49268: PPUSH
49269: CALL_OW 272
49273: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49274: LD_ADDR_VAR 0 12
49278: PUSH
49279: LD_VAR 0 13
49283: PPUSH
49284: CALL_OW 251
49288: PPUSH
49289: LD_VAR 0 10
49293: PPUSH
49294: LD_INT 2
49296: PPUSH
49297: CALL_OW 273
49301: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49302: LD_VAR 0 11
49306: PPUSH
49307: LD_VAR 0 12
49311: PPUSH
49312: CALL_OW 488
49316: PUSH
49317: LD_VAR 0 11
49321: PPUSH
49322: LD_VAR 0 12
49326: PPUSH
49327: CALL_OW 428
49331: NOT
49332: AND
49333: IFFALSE 49356
// begin ComMoveXY ( tmp , _x , _y ) ;
49335: LD_VAR 0 13
49339: PPUSH
49340: LD_VAR 0 11
49344: PPUSH
49345: LD_VAR 0 12
49349: PPUSH
49350: CALL_OW 111
// break ;
49354: GO 49358
// end ; end ;
49356: GO 49243
49358: POP
49359: POP
// end ; end ;
49360: GO 48685
49362: POP
49363: POP
// end ;
49364: LD_VAR 0 8
49368: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49369: LD_INT 0
49371: PPUSH
// result := true ;
49372: LD_ADDR_VAR 0 3
49376: PUSH
49377: LD_INT 1
49379: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49380: LD_VAR 0 2
49384: PUSH
49385: LD_INT 24
49387: DOUBLE
49388: EQUAL
49389: IFTRUE 49399
49391: LD_INT 33
49393: DOUBLE
49394: EQUAL
49395: IFTRUE 49399
49397: GO 49424
49399: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49400: LD_ADDR_VAR 0 3
49404: PUSH
49405: LD_INT 32
49407: PPUSH
49408: LD_VAR 0 1
49412: PPUSH
49413: CALL_OW 321
49417: PUSH
49418: LD_INT 2
49420: EQUAL
49421: ST_TO_ADDR
49422: GO 49740
49424: LD_INT 20
49426: DOUBLE
49427: EQUAL
49428: IFTRUE 49432
49430: GO 49457
49432: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49433: LD_ADDR_VAR 0 3
49437: PUSH
49438: LD_INT 6
49440: PPUSH
49441: LD_VAR 0 1
49445: PPUSH
49446: CALL_OW 321
49450: PUSH
49451: LD_INT 2
49453: EQUAL
49454: ST_TO_ADDR
49455: GO 49740
49457: LD_INT 22
49459: DOUBLE
49460: EQUAL
49461: IFTRUE 49471
49463: LD_INT 36
49465: DOUBLE
49466: EQUAL
49467: IFTRUE 49471
49469: GO 49496
49471: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49472: LD_ADDR_VAR 0 3
49476: PUSH
49477: LD_INT 15
49479: PPUSH
49480: LD_VAR 0 1
49484: PPUSH
49485: CALL_OW 321
49489: PUSH
49490: LD_INT 2
49492: EQUAL
49493: ST_TO_ADDR
49494: GO 49740
49496: LD_INT 30
49498: DOUBLE
49499: EQUAL
49500: IFTRUE 49504
49502: GO 49529
49504: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49505: LD_ADDR_VAR 0 3
49509: PUSH
49510: LD_INT 20
49512: PPUSH
49513: LD_VAR 0 1
49517: PPUSH
49518: CALL_OW 321
49522: PUSH
49523: LD_INT 2
49525: EQUAL
49526: ST_TO_ADDR
49527: GO 49740
49529: LD_INT 28
49531: DOUBLE
49532: EQUAL
49533: IFTRUE 49543
49535: LD_INT 21
49537: DOUBLE
49538: EQUAL
49539: IFTRUE 49543
49541: GO 49568
49543: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49544: LD_ADDR_VAR 0 3
49548: PUSH
49549: LD_INT 21
49551: PPUSH
49552: LD_VAR 0 1
49556: PPUSH
49557: CALL_OW 321
49561: PUSH
49562: LD_INT 2
49564: EQUAL
49565: ST_TO_ADDR
49566: GO 49740
49568: LD_INT 16
49570: DOUBLE
49571: EQUAL
49572: IFTRUE 49576
49574: GO 49601
49576: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49577: LD_ADDR_VAR 0 3
49581: PUSH
49582: LD_INT 84
49584: PPUSH
49585: LD_VAR 0 1
49589: PPUSH
49590: CALL_OW 321
49594: PUSH
49595: LD_INT 2
49597: EQUAL
49598: ST_TO_ADDR
49599: GO 49740
49601: LD_INT 19
49603: DOUBLE
49604: EQUAL
49605: IFTRUE 49615
49607: LD_INT 23
49609: DOUBLE
49610: EQUAL
49611: IFTRUE 49615
49613: GO 49640
49615: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49616: LD_ADDR_VAR 0 3
49620: PUSH
49621: LD_INT 83
49623: PPUSH
49624: LD_VAR 0 1
49628: PPUSH
49629: CALL_OW 321
49633: PUSH
49634: LD_INT 2
49636: EQUAL
49637: ST_TO_ADDR
49638: GO 49740
49640: LD_INT 17
49642: DOUBLE
49643: EQUAL
49644: IFTRUE 49648
49646: GO 49673
49648: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49649: LD_ADDR_VAR 0 3
49653: PUSH
49654: LD_INT 39
49656: PPUSH
49657: LD_VAR 0 1
49661: PPUSH
49662: CALL_OW 321
49666: PUSH
49667: LD_INT 2
49669: EQUAL
49670: ST_TO_ADDR
49671: GO 49740
49673: LD_INT 18
49675: DOUBLE
49676: EQUAL
49677: IFTRUE 49681
49679: GO 49706
49681: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49682: LD_ADDR_VAR 0 3
49686: PUSH
49687: LD_INT 40
49689: PPUSH
49690: LD_VAR 0 1
49694: PPUSH
49695: CALL_OW 321
49699: PUSH
49700: LD_INT 2
49702: EQUAL
49703: ST_TO_ADDR
49704: GO 49740
49706: LD_INT 27
49708: DOUBLE
49709: EQUAL
49710: IFTRUE 49714
49712: GO 49739
49714: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49715: LD_ADDR_VAR 0 3
49719: PUSH
49720: LD_INT 35
49722: PPUSH
49723: LD_VAR 0 1
49727: PPUSH
49728: CALL_OW 321
49732: PUSH
49733: LD_INT 2
49735: EQUAL
49736: ST_TO_ADDR
49737: GO 49740
49739: POP
// end ;
49740: LD_VAR 0 3
49744: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49745: LD_INT 0
49747: PPUSH
49748: PPUSH
49749: PPUSH
49750: PPUSH
49751: PPUSH
49752: PPUSH
49753: PPUSH
49754: PPUSH
49755: PPUSH
49756: PPUSH
49757: PPUSH
// result := false ;
49758: LD_ADDR_VAR 0 6
49762: PUSH
49763: LD_INT 0
49765: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49766: LD_VAR 0 1
49770: NOT
49771: PUSH
49772: LD_VAR 0 1
49776: PPUSH
49777: CALL_OW 266
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: IN
49792: NOT
49793: OR
49794: PUSH
49795: LD_VAR 0 2
49799: NOT
49800: OR
49801: PUSH
49802: LD_VAR 0 5
49806: PUSH
49807: LD_INT 0
49809: PUSH
49810: LD_INT 1
49812: PUSH
49813: LD_INT 2
49815: PUSH
49816: LD_INT 3
49818: PUSH
49819: LD_INT 4
49821: PUSH
49822: LD_INT 5
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: IN
49833: NOT
49834: OR
49835: PUSH
49836: LD_VAR 0 3
49840: PPUSH
49841: LD_VAR 0 4
49845: PPUSH
49846: CALL_OW 488
49850: NOT
49851: OR
49852: IFFALSE 49856
// exit ;
49854: GO 50592
// side := GetSide ( depot ) ;
49856: LD_ADDR_VAR 0 9
49860: PUSH
49861: LD_VAR 0 1
49865: PPUSH
49866: CALL_OW 255
49870: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49871: LD_VAR 0 9
49875: PPUSH
49876: LD_VAR 0 2
49880: PPUSH
49881: CALL 49369 0 2
49885: NOT
49886: IFFALSE 49890
// exit ;
49888: GO 50592
// pom := GetBase ( depot ) ;
49890: LD_ADDR_VAR 0 10
49894: PUSH
49895: LD_VAR 0 1
49899: PPUSH
49900: CALL_OW 274
49904: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49905: LD_ADDR_VAR 0 11
49909: PUSH
49910: LD_VAR 0 2
49914: PPUSH
49915: LD_VAR 0 1
49919: PPUSH
49920: CALL_OW 248
49924: PPUSH
49925: CALL_OW 450
49929: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49930: LD_VAR 0 10
49934: PPUSH
49935: LD_INT 1
49937: PPUSH
49938: CALL_OW 275
49942: PUSH
49943: LD_VAR 0 11
49947: PUSH
49948: LD_INT 1
49950: ARRAY
49951: GREATEREQUAL
49952: PUSH
49953: LD_VAR 0 10
49957: PPUSH
49958: LD_INT 2
49960: PPUSH
49961: CALL_OW 275
49965: PUSH
49966: LD_VAR 0 11
49970: PUSH
49971: LD_INT 2
49973: ARRAY
49974: GREATEREQUAL
49975: AND
49976: PUSH
49977: LD_VAR 0 10
49981: PPUSH
49982: LD_INT 3
49984: PPUSH
49985: CALL_OW 275
49989: PUSH
49990: LD_VAR 0 11
49994: PUSH
49995: LD_INT 3
49997: ARRAY
49998: GREATEREQUAL
49999: AND
50000: NOT
50001: IFFALSE 50005
// exit ;
50003: GO 50592
// if GetBType ( depot ) = b_depot then
50005: LD_VAR 0 1
50009: PPUSH
50010: CALL_OW 266
50014: PUSH
50015: LD_INT 0
50017: EQUAL
50018: IFFALSE 50030
// dist := 28 else
50020: LD_ADDR_VAR 0 14
50024: PUSH
50025: LD_INT 28
50027: ST_TO_ADDR
50028: GO 50038
// dist := 36 ;
50030: LD_ADDR_VAR 0 14
50034: PUSH
50035: LD_INT 36
50037: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50038: LD_VAR 0 1
50042: PPUSH
50043: LD_VAR 0 3
50047: PPUSH
50048: LD_VAR 0 4
50052: PPUSH
50053: CALL_OW 297
50057: PUSH
50058: LD_VAR 0 14
50062: GREATER
50063: IFFALSE 50067
// exit ;
50065: GO 50592
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50067: LD_ADDR_VAR 0 12
50071: PUSH
50072: LD_VAR 0 2
50076: PPUSH
50077: LD_VAR 0 3
50081: PPUSH
50082: LD_VAR 0 4
50086: PPUSH
50087: LD_VAR 0 5
50091: PPUSH
50092: LD_VAR 0 1
50096: PPUSH
50097: CALL_OW 248
50101: PPUSH
50102: LD_INT 0
50104: PPUSH
50105: CALL 50597 0 6
50109: ST_TO_ADDR
// if not hexes then
50110: LD_VAR 0 12
50114: NOT
50115: IFFALSE 50119
// exit ;
50117: GO 50592
// hex := GetHexInfo ( x , y ) ;
50119: LD_ADDR_VAR 0 15
50123: PUSH
50124: LD_VAR 0 3
50128: PPUSH
50129: LD_VAR 0 4
50133: PPUSH
50134: CALL_OW 546
50138: ST_TO_ADDR
// if hex [ 1 ] then
50139: LD_VAR 0 15
50143: PUSH
50144: LD_INT 1
50146: ARRAY
50147: IFFALSE 50151
// exit ;
50149: GO 50592
// height := hex [ 2 ] ;
50151: LD_ADDR_VAR 0 13
50155: PUSH
50156: LD_VAR 0 15
50160: PUSH
50161: LD_INT 2
50163: ARRAY
50164: ST_TO_ADDR
// for i = 1 to hexes do
50165: LD_ADDR_VAR 0 7
50169: PUSH
50170: DOUBLE
50171: LD_INT 1
50173: DEC
50174: ST_TO_ADDR
50175: LD_VAR 0 12
50179: PUSH
50180: FOR_TO
50181: IFFALSE 50511
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50183: LD_VAR 0 12
50187: PUSH
50188: LD_VAR 0 7
50192: ARRAY
50193: PUSH
50194: LD_INT 1
50196: ARRAY
50197: PPUSH
50198: LD_VAR 0 12
50202: PUSH
50203: LD_VAR 0 7
50207: ARRAY
50208: PUSH
50209: LD_INT 2
50211: ARRAY
50212: PPUSH
50213: CALL_OW 488
50217: NOT
50218: PUSH
50219: LD_VAR 0 12
50223: PUSH
50224: LD_VAR 0 7
50228: ARRAY
50229: PUSH
50230: LD_INT 1
50232: ARRAY
50233: PPUSH
50234: LD_VAR 0 12
50238: PUSH
50239: LD_VAR 0 7
50243: ARRAY
50244: PUSH
50245: LD_INT 2
50247: ARRAY
50248: PPUSH
50249: CALL_OW 428
50253: PUSH
50254: LD_INT 0
50256: GREATER
50257: OR
50258: PUSH
50259: LD_VAR 0 12
50263: PUSH
50264: LD_VAR 0 7
50268: ARRAY
50269: PUSH
50270: LD_INT 1
50272: ARRAY
50273: PPUSH
50274: LD_VAR 0 12
50278: PUSH
50279: LD_VAR 0 7
50283: ARRAY
50284: PUSH
50285: LD_INT 2
50287: ARRAY
50288: PPUSH
50289: CALL_OW 351
50293: OR
50294: IFFALSE 50300
// exit ;
50296: POP
50297: POP
50298: GO 50592
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50300: LD_ADDR_VAR 0 8
50304: PUSH
50305: LD_VAR 0 12
50309: PUSH
50310: LD_VAR 0 7
50314: ARRAY
50315: PUSH
50316: LD_INT 1
50318: ARRAY
50319: PPUSH
50320: LD_VAR 0 12
50324: PUSH
50325: LD_VAR 0 7
50329: ARRAY
50330: PUSH
50331: LD_INT 2
50333: ARRAY
50334: PPUSH
50335: CALL_OW 546
50339: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50340: LD_VAR 0 8
50344: PUSH
50345: LD_INT 1
50347: ARRAY
50348: PUSH
50349: LD_VAR 0 8
50353: PUSH
50354: LD_INT 2
50356: ARRAY
50357: PUSH
50358: LD_VAR 0 13
50362: PUSH
50363: LD_INT 2
50365: PLUS
50366: GREATER
50367: OR
50368: PUSH
50369: LD_VAR 0 8
50373: PUSH
50374: LD_INT 2
50376: ARRAY
50377: PUSH
50378: LD_VAR 0 13
50382: PUSH
50383: LD_INT 2
50385: MINUS
50386: LESS
50387: OR
50388: PUSH
50389: LD_VAR 0 8
50393: PUSH
50394: LD_INT 3
50396: ARRAY
50397: PUSH
50398: LD_INT 0
50400: PUSH
50401: LD_INT 8
50403: PUSH
50404: LD_INT 9
50406: PUSH
50407: LD_INT 10
50409: PUSH
50410: LD_INT 11
50412: PUSH
50413: LD_INT 12
50415: PUSH
50416: LD_INT 13
50418: PUSH
50419: LD_INT 16
50421: PUSH
50422: LD_INT 17
50424: PUSH
50425: LD_INT 18
50427: PUSH
50428: LD_INT 19
50430: PUSH
50431: LD_INT 20
50433: PUSH
50434: LD_INT 21
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: IN
50452: NOT
50453: OR
50454: PUSH
50455: LD_VAR 0 8
50459: PUSH
50460: LD_INT 5
50462: ARRAY
50463: NOT
50464: OR
50465: PUSH
50466: LD_VAR 0 8
50470: PUSH
50471: LD_INT 6
50473: ARRAY
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: LD_INT 2
50480: PUSH
50481: LD_INT 7
50483: PUSH
50484: LD_INT 9
50486: PUSH
50487: LD_INT 10
50489: PUSH
50490: LD_INT 11
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: IN
50501: NOT
50502: OR
50503: IFFALSE 50509
// exit ;
50505: POP
50506: POP
50507: GO 50592
// end ;
50509: GO 50180
50511: POP
50512: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50513: LD_VAR 0 9
50517: PPUSH
50518: LD_VAR 0 3
50522: PPUSH
50523: LD_VAR 0 4
50527: PPUSH
50528: LD_INT 20
50530: PPUSH
50531: CALL 42544 0 4
50535: PUSH
50536: LD_INT 4
50538: ARRAY
50539: IFFALSE 50543
// exit ;
50541: GO 50592
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50543: LD_VAR 0 2
50547: PUSH
50548: LD_INT 29
50550: PUSH
50551: LD_INT 30
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: IN
50558: PUSH
50559: LD_VAR 0 3
50563: PPUSH
50564: LD_VAR 0 4
50568: PPUSH
50569: LD_VAR 0 9
50573: PPUSH
50574: CALL_OW 440
50578: NOT
50579: AND
50580: IFFALSE 50584
// exit ;
50582: GO 50592
// result := true ;
50584: LD_ADDR_VAR 0 6
50588: PUSH
50589: LD_INT 1
50591: ST_TO_ADDR
// end ;
50592: LD_VAR 0 6
50596: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50597: LD_INT 0
50599: PPUSH
50600: PPUSH
50601: PPUSH
50602: PPUSH
50603: PPUSH
50604: PPUSH
50605: PPUSH
50606: PPUSH
50607: PPUSH
50608: PPUSH
50609: PPUSH
50610: PPUSH
50611: PPUSH
50612: PPUSH
50613: PPUSH
50614: PPUSH
50615: PPUSH
50616: PPUSH
50617: PPUSH
50618: PPUSH
50619: PPUSH
50620: PPUSH
50621: PPUSH
50622: PPUSH
50623: PPUSH
50624: PPUSH
50625: PPUSH
50626: PPUSH
50627: PPUSH
50628: PPUSH
50629: PPUSH
50630: PPUSH
50631: PPUSH
50632: PPUSH
50633: PPUSH
50634: PPUSH
50635: PPUSH
50636: PPUSH
50637: PPUSH
50638: PPUSH
50639: PPUSH
50640: PPUSH
50641: PPUSH
50642: PPUSH
50643: PPUSH
50644: PPUSH
50645: PPUSH
50646: PPUSH
50647: PPUSH
50648: PPUSH
50649: PPUSH
50650: PPUSH
50651: PPUSH
50652: PPUSH
50653: PPUSH
50654: PPUSH
50655: PPUSH
50656: PPUSH
// result = [ ] ;
50657: LD_ADDR_VAR 0 7
50661: PUSH
50662: EMPTY
50663: ST_TO_ADDR
// temp_list = [ ] ;
50664: LD_ADDR_VAR 0 9
50668: PUSH
50669: EMPTY
50670: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50671: LD_VAR 0 4
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: LD_INT 1
50681: PUSH
50682: LD_INT 2
50684: PUSH
50685: LD_INT 3
50687: PUSH
50688: LD_INT 4
50690: PUSH
50691: LD_INT 5
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: IN
50702: NOT
50703: PUSH
50704: LD_VAR 0 1
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: LD_INT 1
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: IN
50719: PUSH
50720: LD_VAR 0 5
50724: PUSH
50725: LD_INT 1
50727: PUSH
50728: LD_INT 2
50730: PUSH
50731: LD_INT 3
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: LIST
50738: IN
50739: NOT
50740: AND
50741: OR
50742: IFFALSE 50746
// exit ;
50744: GO 69137
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50746: LD_VAR 0 1
50750: PUSH
50751: LD_INT 6
50753: PUSH
50754: LD_INT 7
50756: PUSH
50757: LD_INT 8
50759: PUSH
50760: LD_INT 13
50762: PUSH
50763: LD_INT 12
50765: PUSH
50766: LD_INT 15
50768: PUSH
50769: LD_INT 11
50771: PUSH
50772: LD_INT 14
50774: PUSH
50775: LD_INT 10
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: IN
50789: IFFALSE 50799
// btype = b_lab ;
50791: LD_ADDR_VAR 0 1
50795: PUSH
50796: LD_INT 6
50798: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50799: LD_VAR 0 6
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: LD_INT 1
50809: PUSH
50810: LD_INT 2
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: LIST
50817: IN
50818: NOT
50819: PUSH
50820: LD_VAR 0 1
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: LD_INT 2
50833: PUSH
50834: LD_INT 3
50836: PUSH
50837: LD_INT 6
50839: PUSH
50840: LD_INT 36
50842: PUSH
50843: LD_INT 4
50845: PUSH
50846: LD_INT 5
50848: PUSH
50849: LD_INT 31
50851: PUSH
50852: LD_INT 32
50854: PUSH
50855: LD_INT 33
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: IN
50871: NOT
50872: PUSH
50873: LD_VAR 0 6
50877: PUSH
50878: LD_INT 1
50880: EQUAL
50881: AND
50882: OR
50883: PUSH
50884: LD_VAR 0 1
50888: PUSH
50889: LD_INT 2
50891: PUSH
50892: LD_INT 3
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: IN
50899: NOT
50900: PUSH
50901: LD_VAR 0 6
50905: PUSH
50906: LD_INT 2
50908: EQUAL
50909: AND
50910: OR
50911: IFFALSE 50921
// mode = 0 ;
50913: LD_ADDR_VAR 0 6
50917: PUSH
50918: LD_INT 0
50920: ST_TO_ADDR
// case mode of 0 :
50921: LD_VAR 0 6
50925: PUSH
50926: LD_INT 0
50928: DOUBLE
50929: EQUAL
50930: IFTRUE 50934
50932: GO 62387
50934: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50935: LD_ADDR_VAR 0 11
50939: PUSH
50940: LD_INT 0
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: NEG
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 1
51004: NEG
51005: PUSH
51006: LD_INT 1
51008: NEG
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 1
51016: NEG
51017: PUSH
51018: LD_INT 2
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: LD_INT 2
51031: NEG
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 1
51039: PUSH
51040: LD_INT 1
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 1
51050: PUSH
51051: LD_INT 2
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 0
51060: PUSH
51061: LD_INT 2
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 1
51070: NEG
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 1
51081: PUSH
51082: LD_INT 3
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: LD_INT 3
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 1
51101: NEG
51102: PUSH
51103: LD_INT 2
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51128: LD_ADDR_VAR 0 12
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: NEG
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: NEG
51198: PUSH
51199: LD_INT 1
51201: NEG
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: PUSH
51210: LD_INT 1
51212: NEG
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 2
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 2
51230: PUSH
51231: LD_INT 1
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 1
51240: NEG
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 2
51251: NEG
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 2
51262: NEG
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 2
51274: NEG
51275: PUSH
51276: LD_INT 1
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 3
51285: NEG
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 3
51296: NEG
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51324: LD_ADDR_VAR 0 13
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: LD_INT 0
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: LD_INT 1
51344: NEG
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 1
51352: PUSH
51353: LD_INT 0
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: LD_INT 1
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 1
51405: NEG
51406: PUSH
51407: LD_INT 2
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 2
51417: PUSH
51418: LD_INT 1
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 2
51427: PUSH
51428: LD_INT 2
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 1
51437: PUSH
51438: LD_INT 2
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 2
51447: NEG
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 2
51459: NEG
51460: PUSH
51461: LD_INT 2
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 2
51471: NEG
51472: PUSH
51473: LD_INT 3
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 3
51483: NEG
51484: PUSH
51485: LD_INT 2
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 3
51495: NEG
51496: PUSH
51497: LD_INT 3
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51523: LD_ADDR_VAR 0 14
51527: PUSH
51528: LD_INT 0
51530: PUSH
51531: LD_INT 0
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: LD_INT 1
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 1
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: LD_INT 1
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 1
51581: NEG
51582: PUSH
51583: LD_INT 0
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: LD_INT 2
51608: NEG
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 0
51616: PUSH
51617: LD_INT 2
51619: NEG
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: PUSH
51639: LD_INT 2
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: LD_INT 2
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 1
51658: NEG
51659: PUSH
51660: LD_INT 1
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 1
51669: NEG
51670: PUSH
51671: LD_INT 3
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: LD_INT 3
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: LD_INT 2
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51719: LD_ADDR_VAR 0 15
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 0
51736: PUSH
51737: LD_INT 1
51739: NEG
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 1
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 0
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 1
51777: NEG
51778: PUSH
51779: LD_INT 0
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 1
51788: NEG
51789: PUSH
51790: LD_INT 1
51792: NEG
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 1
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 2
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 2
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 1
51831: NEG
51832: PUSH
51833: LD_INT 1
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 2
51842: NEG
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 2
51853: NEG
51854: PUSH
51855: LD_INT 1
51857: NEG
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 2
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 3
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 3
51886: PUSH
51887: LD_INT 1
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51912: LD_ADDR_VAR 0 16
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: LD_INT 1
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 1
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: NEG
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 1
51981: NEG
51982: PUSH
51983: LD_INT 1
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: LD_INT 2
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 2
52005: PUSH
52006: LD_INT 1
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 2
52015: PUSH
52016: LD_INT 2
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: LD_INT 2
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 2
52035: NEG
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 2
52047: NEG
52048: PUSH
52049: LD_INT 2
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 3
52059: PUSH
52060: LD_INT 2
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 3
52069: PUSH
52070: LD_INT 3
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 2
52079: PUSH
52080: LD_INT 3
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52105: LD_ADDR_VAR 0 17
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: LD_INT 1
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: LD_INT 1
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 1
52163: NEG
52164: PUSH
52165: LD_INT 0
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: LD_INT 1
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 1
52186: NEG
52187: PUSH
52188: LD_INT 2
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 0
52198: PUSH
52199: LD_INT 2
52201: NEG
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 1
52209: PUSH
52210: LD_INT 1
52212: NEG
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 2
52220: PUSH
52221: LD_INT 0
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 2
52230: PUSH
52231: LD_INT 1
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 2
52240: PUSH
52241: LD_INT 2
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: LD_INT 2
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 1
52270: NEG
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 2
52281: NEG
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 2
52292: NEG
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 2
52304: NEG
52305: PUSH
52306: LD_INT 2
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52335: LD_ADDR_VAR 0 18
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: LD_INT 0
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: NEG
52394: PUSH
52395: LD_INT 0
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: LD_INT 2
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 0
52428: PUSH
52429: LD_INT 2
52431: NEG
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 1
52439: PUSH
52440: LD_INT 1
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 2
52450: PUSH
52451: LD_INT 0
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 2
52460: PUSH
52461: LD_INT 1
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 2
52470: PUSH
52471: LD_INT 2
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: LD_INT 2
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: LD_INT 2
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 2
52511: NEG
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 2
52522: NEG
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 2
52534: NEG
52535: PUSH
52536: LD_INT 2
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52565: LD_ADDR_VAR 0 19
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: LD_INT 1
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 1
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 1
52603: PUSH
52604: LD_INT 1
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 0
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 1
52623: NEG
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: LD_INT 1
52638: NEG
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: LD_INT 2
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: LD_INT 2
52661: NEG
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 1
52669: PUSH
52670: LD_INT 1
52672: NEG
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 2
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 2
52690: PUSH
52691: LD_INT 1
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 2
52700: PUSH
52701: LD_INT 2
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 1
52710: PUSH
52711: LD_INT 2
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: LD_INT 2
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 1
52730: NEG
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 2
52741: NEG
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 2
52752: NEG
52753: PUSH
52754: LD_INT 1
52756: NEG
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 2
52764: NEG
52765: PUSH
52766: LD_INT 2
52768: NEG
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52795: LD_ADDR_VAR 0 20
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: LD_INT 0
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 0
52812: PUSH
52813: LD_INT 1
52815: NEG
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 1
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 1
52833: PUSH
52834: LD_INT 1
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: LD_INT 1
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 1
52853: NEG
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 1
52864: NEG
52865: PUSH
52866: LD_INT 1
52868: NEG
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 1
52876: NEG
52877: PUSH
52878: LD_INT 2
52880: NEG
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: LD_INT 2
52891: NEG
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 2
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 2
52920: PUSH
52921: LD_INT 1
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 2
52930: PUSH
52931: LD_INT 2
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: LD_INT 2
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: LD_INT 2
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 2
52971: NEG
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 2
52982: NEG
52983: PUSH
52984: LD_INT 1
52986: NEG
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 2
52994: NEG
52995: PUSH
52996: LD_INT 2
52998: NEG
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53025: LD_ADDR_VAR 0 21
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: LD_INT 0
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: LD_INT 1
53045: NEG
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 1
53053: PUSH
53054: LD_INT 0
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 1
53063: PUSH
53064: LD_INT 1
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: LD_INT 1
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 1
53083: NEG
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: NEG
53095: PUSH
53096: LD_INT 1
53098: NEG
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 1
53106: NEG
53107: PUSH
53108: LD_INT 2
53110: NEG
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 0
53118: PUSH
53119: LD_INT 2
53121: NEG
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 1
53129: PUSH
53130: LD_INT 1
53132: NEG
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 2
53140: PUSH
53141: LD_INT 0
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 2
53150: PUSH
53151: LD_INT 1
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 2
53160: PUSH
53161: LD_INT 2
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: LD_INT 2
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: LD_INT 2
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 1
53190: NEG
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 2
53201: NEG
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 2
53212: NEG
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 2
53224: NEG
53225: PUSH
53226: LD_INT 2
53228: NEG
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53255: LD_ADDR_VAR 0 22
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 1
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 1
53313: NEG
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 1
53324: NEG
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 1
53336: NEG
53337: PUSH
53338: LD_INT 2
53340: NEG
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: LD_INT 2
53351: NEG
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 1
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 2
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 2
53380: PUSH
53381: LD_INT 1
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 2
53390: PUSH
53391: LD_INT 2
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: LD_INT 2
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: LD_INT 2
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 1
53420: NEG
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 2
53431: NEG
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 2
53442: NEG
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 2
53454: NEG
53455: PUSH
53456: LD_INT 2
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53485: LD_ADDR_VAR 0 23
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 0
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 1
53513: PUSH
53514: LD_INT 0
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 1
53523: PUSH
53524: LD_INT 1
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: LD_INT 1
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: NEG
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: LD_INT 2
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: LD_INT 2
53581: NEG
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 1
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 2
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 2
53610: PUSH
53611: LD_INT 1
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 2
53620: PUSH
53621: LD_INT 2
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: LD_INT 2
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 0
53640: PUSH
53641: LD_INT 2
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 1
53650: NEG
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 2
53661: NEG
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 2
53672: NEG
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 2
53684: NEG
53685: PUSH
53686: LD_INT 2
53688: NEG
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 2
53696: NEG
53697: PUSH
53698: LD_INT 3
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 1
53708: NEG
53709: PUSH
53710: LD_INT 3
53712: NEG
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: LD_INT 2
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 2
53731: PUSH
53732: LD_INT 1
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53765: LD_ADDR_VAR 0 24
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: LD_INT 1
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 1
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: PUSH
53804: LD_INT 1
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: LD_INT 1
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 1
53823: NEG
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 1
53834: NEG
53835: PUSH
53836: LD_INT 1
53838: NEG
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 1
53846: NEG
53847: PUSH
53848: LD_INT 2
53850: NEG
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: LD_INT 2
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: LD_INT 1
53872: NEG
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 2
53880: PUSH
53881: LD_INT 0
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 2
53890: PUSH
53891: LD_INT 1
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 2
53900: PUSH
53901: LD_INT 2
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: LD_INT 2
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: LD_INT 2
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: LD_INT 1
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 2
53941: NEG
53942: PUSH
53943: LD_INT 0
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 2
53952: NEG
53953: PUSH
53954: LD_INT 1
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 2
53964: NEG
53965: PUSH
53966: LD_INT 2
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: LD_INT 2
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 2
53987: PUSH
53988: LD_INT 1
53990: NEG
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 3
53998: PUSH
53999: LD_INT 1
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 3
54008: PUSH
54009: LD_INT 2
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54041: LD_ADDR_VAR 0 25
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 0
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 1
54099: NEG
54100: PUSH
54101: LD_INT 0
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 1
54110: NEG
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 1
54122: NEG
54123: PUSH
54124: LD_INT 2
54126: NEG
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: LD_INT 2
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 1
54145: PUSH
54146: LD_INT 1
54148: NEG
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 2
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 2
54166: PUSH
54167: LD_INT 1
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 2
54176: PUSH
54177: LD_INT 2
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 1
54186: PUSH
54187: LD_INT 2
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: LD_INT 2
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 1
54206: NEG
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 2
54217: NEG
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 2
54228: NEG
54229: PUSH
54230: LD_INT 1
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 2
54240: NEG
54241: PUSH
54242: LD_INT 2
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 3
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 3
54262: PUSH
54263: LD_INT 2
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 2
54272: PUSH
54273: LD_INT 3
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 1
54282: PUSH
54283: LD_INT 3
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54315: LD_ADDR_VAR 0 26
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 0
54332: PUSH
54333: LD_INT 1
54335: NEG
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: LD_INT 0
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 1
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 0
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 1
54373: NEG
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 1
54384: NEG
54385: PUSH
54386: LD_INT 1
54388: NEG
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: LD_INT 2
54400: NEG
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 0
54408: PUSH
54409: LD_INT 2
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 1
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 2
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 2
54440: PUSH
54441: LD_INT 1
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 2
54450: PUSH
54451: LD_INT 2
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: LD_INT 2
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: LD_INT 2
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 2
54491: NEG
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 2
54502: NEG
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 2
54514: NEG
54515: PUSH
54516: LD_INT 2
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 2
54526: PUSH
54527: LD_INT 3
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: LD_INT 3
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: LD_INT 2
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 2
54557: NEG
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54591: LD_ADDR_VAR 0 27
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: LD_INT 1
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 1
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: LD_INT 1
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: NEG
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: LD_INT 1
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: LD_INT 2
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: LD_INT 2
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 2
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 2
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 2
54726: PUSH
54727: LD_INT 2
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: LD_INT 2
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: LD_INT 2
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: NEG
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 2
54767: NEG
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 2
54778: NEG
54779: PUSH
54780: LD_INT 1
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 2
54790: NEG
54791: PUSH
54792: LD_INT 2
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 1
54802: NEG
54803: PUSH
54804: LD_INT 2
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 2
54813: NEG
54814: PUSH
54815: LD_INT 1
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 3
54824: NEG
54825: PUSH
54826: LD_INT 1
54828: NEG
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 3
54836: NEG
54837: PUSH
54838: LD_INT 2
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54871: LD_ADDR_VAR 0 28
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: LD_INT 0
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: LD_INT 1
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: PUSH
54900: LD_INT 0
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: LD_INT 1
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: LD_INT 1
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 1
54929: NEG
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 1
54940: NEG
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: LD_INT 2
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 0
54964: PUSH
54965: LD_INT 2
54967: NEG
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: LD_INT 1
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 2
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 2
54996: PUSH
54997: LD_INT 1
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 2
55006: PUSH
55007: LD_INT 2
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 1
55016: PUSH
55017: LD_INT 2
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: LD_INT 2
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: LD_INT 1
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 2
55047: NEG
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 2
55058: NEG
55059: PUSH
55060: LD_INT 1
55062: NEG
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 2
55070: NEG
55071: PUSH
55072: LD_INT 2
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 2
55082: NEG
55083: PUSH
55084: LD_INT 3
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 1
55094: NEG
55095: PUSH
55096: LD_INT 3
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 3
55106: NEG
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 3
55118: NEG
55119: PUSH
55120: LD_INT 2
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55153: LD_ADDR_VAR 0 29
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: LD_INT 0
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: LD_INT 1
55173: NEG
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: LD_INT 1
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: LD_INT 1
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: LD_INT 1
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 1
55234: NEG
55235: PUSH
55236: LD_INT 2
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 0
55246: PUSH
55247: LD_INT 2
55249: NEG
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 1
55257: PUSH
55258: LD_INT 1
55260: NEG
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 2
55268: PUSH
55269: LD_INT 0
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 2
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 1
55288: PUSH
55289: LD_INT 2
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: LD_INT 2
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 1
55308: NEG
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 2
55319: NEG
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 2
55331: NEG
55332: PUSH
55333: LD_INT 2
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 2
55343: NEG
55344: PUSH
55345: LD_INT 3
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 2
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 3
55366: PUSH
55367: LD_INT 1
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 1
55376: PUSH
55377: LD_INT 3
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 1
55386: NEG
55387: PUSH
55388: LD_INT 2
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 3
55397: NEG
55398: PUSH
55399: LD_INT 2
55401: NEG
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55432: LD_ADDR_VAR 0 30
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: LD_INT 1
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: PUSH
55471: LD_INT 1
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 1
55490: NEG
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 1
55501: NEG
55502: PUSH
55503: LD_INT 1
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: LD_INT 2
55517: NEG
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: LD_INT 2
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: PUSH
55537: LD_INT 1
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 2
55547: PUSH
55548: LD_INT 0
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 2
55557: PUSH
55558: LD_INT 1
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 2
55567: PUSH
55568: LD_INT 2
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 1
55577: PUSH
55578: LD_INT 2
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 1
55587: NEG
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 2
55598: NEG
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 2
55609: NEG
55610: PUSH
55611: LD_INT 1
55613: NEG
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 1
55621: NEG
55622: PUSH
55623: LD_INT 3
55625: NEG
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 1
55633: PUSH
55634: LD_INT 2
55636: NEG
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 3
55644: PUSH
55645: LD_INT 2
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 2
55654: PUSH
55655: LD_INT 3
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 2
55664: NEG
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 3
55675: NEG
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55710: LD_ADDR_VAR 0 31
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 1
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 1
55779: NEG
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: NEG
55792: PUSH
55793: LD_INT 2
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: LD_INT 1
55806: NEG
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 2
55814: PUSH
55815: LD_INT 0
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 2
55824: PUSH
55825: LD_INT 1
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 2
55834: PUSH
55835: LD_INT 2
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: LD_INT 2
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: NEG
55865: PUSH
55866: LD_INT 1
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 2
55875: NEG
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 2
55887: NEG
55888: PUSH
55889: LD_INT 2
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 2
55899: NEG
55900: PUSH
55901: LD_INT 3
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 2
55911: PUSH
55912: LD_INT 1
55914: NEG
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 3
55922: PUSH
55923: LD_INT 1
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 1
55932: PUSH
55933: LD_INT 3
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: LD_INT 2
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 3
55953: NEG
55954: PUSH
55955: LD_INT 2
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55988: LD_ADDR_VAR 0 32
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: LD_INT 1
56008: NEG
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 1
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: LD_INT 1
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: LD_INT 1
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 1
56069: NEG
56070: PUSH
56071: LD_INT 2
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: LD_INT 2
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 1
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 2
56103: PUSH
56104: LD_INT 1
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 2
56113: PUSH
56114: LD_INT 2
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 1
56123: PUSH
56124: LD_INT 2
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: LD_INT 2
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 2
56154: NEG
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 2
56165: NEG
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 1
56177: NEG
56178: PUSH
56179: LD_INT 3
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: LD_INT 2
56192: NEG
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 3
56200: PUSH
56201: LD_INT 2
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 2
56210: PUSH
56211: LD_INT 3
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 2
56220: NEG
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 3
56231: NEG
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56266: LD_ADDR_VAR 0 33
56270: PUSH
56271: LD_INT 0
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 1
56294: PUSH
56295: LD_INT 0
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 1
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: LD_INT 1
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 1
56324: NEG
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 1
56335: NEG
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 1
56347: NEG
56348: PUSH
56349: LD_INT 2
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 2
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 2
56380: PUSH
56381: LD_INT 1
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 1
56390: PUSH
56391: LD_INT 2
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 0
56400: PUSH
56401: LD_INT 2
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 1
56410: NEG
56411: PUSH
56412: LD_INT 1
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 2
56421: NEG
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 2
56432: NEG
56433: PUSH
56434: LD_INT 1
56436: NEG
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 2
56444: NEG
56445: PUSH
56446: LD_INT 2
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 2
56456: NEG
56457: PUSH
56458: LD_INT 3
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 2
56468: PUSH
56469: LD_INT 1
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 3
56479: PUSH
56480: LD_INT 1
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 1
56489: PUSH
56490: LD_INT 3
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 1
56499: NEG
56500: PUSH
56501: LD_INT 2
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 3
56510: NEG
56511: PUSH
56512: LD_INT 2
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56545: LD_ADDR_VAR 0 34
56549: PUSH
56550: LD_INT 0
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 0
56562: PUSH
56563: LD_INT 1
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: LD_INT 0
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 1
56583: PUSH
56584: LD_INT 1
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 0
56593: PUSH
56594: LD_INT 1
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 1
56603: NEG
56604: PUSH
56605: LD_INT 0
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 1
56614: NEG
56615: PUSH
56616: LD_INT 1
56618: NEG
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: LD_INT 2
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: LD_INT 2
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 1
56649: PUSH
56650: LD_INT 1
56652: NEG
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 2
56660: PUSH
56661: LD_INT 1
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 2
56670: PUSH
56671: LD_INT 2
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: LD_INT 2
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: LD_INT 1
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 2
56701: NEG
56702: PUSH
56703: LD_INT 0
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 2
56712: NEG
56713: PUSH
56714: LD_INT 1
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 2
56724: NEG
56725: PUSH
56726: LD_INT 2
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: LD_INT 3
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 1
56748: PUSH
56749: LD_INT 2
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 3
56759: PUSH
56760: LD_INT 2
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 2
56769: PUSH
56770: LD_INT 3
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 2
56779: NEG
56780: PUSH
56781: LD_INT 1
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 3
56790: NEG
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56825: LD_ADDR_VAR 0 35
56829: PUSH
56830: LD_INT 0
56832: PUSH
56833: LD_INT 0
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: LD_INT 1
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: LD_INT 0
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: NEG
56895: PUSH
56896: LD_INT 1
56898: NEG
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 2
56906: PUSH
56907: LD_INT 1
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 2
56916: NEG
56917: PUSH
56918: LD_INT 1
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56937: LD_ADDR_VAR 0 36
56941: PUSH
56942: LD_INT 0
56944: PUSH
56945: LD_INT 0
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: LD_INT 1
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 1
56975: PUSH
56976: LD_INT 1
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 0
56985: PUSH
56986: LD_INT 1
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 1
56995: NEG
56996: PUSH
56997: LD_INT 0
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 1
57006: NEG
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: NEG
57019: PUSH
57020: LD_INT 2
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 1
57030: PUSH
57031: LD_INT 2
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57049: LD_ADDR_VAR 0 37
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: LD_INT 0
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: LD_INT 1
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 1
57107: NEG
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 1
57118: NEG
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 1
57130: PUSH
57131: LD_INT 1
57133: NEG
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 1
57141: NEG
57142: PUSH
57143: LD_INT 1
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57161: LD_ADDR_VAR 0 38
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: LD_INT 0
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: LD_INT 1
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 1
57199: PUSH
57200: LD_INT 1
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 0
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 1
57230: NEG
57231: PUSH
57232: LD_INT 1
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 2
57242: PUSH
57243: LD_INT 1
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 2
57252: NEG
57253: PUSH
57254: LD_INT 1
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57273: LD_ADDR_VAR 0 39
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: LD_INT 1
57293: NEG
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: LD_INT 0
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 1
57311: PUSH
57312: LD_INT 1
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: LD_INT 1
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 1
57331: NEG
57332: PUSH
57333: LD_INT 0
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 1
57342: NEG
57343: PUSH
57344: LD_INT 1
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 1
57354: NEG
57355: PUSH
57356: LD_INT 2
57358: NEG
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 1
57366: PUSH
57367: LD_INT 2
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57385: LD_ADDR_VAR 0 40
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 1
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: LD_INT 1
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 1
57443: NEG
57444: PUSH
57445: LD_INT 0
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 1
57454: NEG
57455: PUSH
57456: LD_INT 1
57458: NEG
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 1
57466: PUSH
57467: LD_INT 1
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 1
57477: NEG
57478: PUSH
57479: LD_INT 1
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57497: LD_ADDR_VAR 0 41
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: LD_INT 0
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 1
57525: PUSH
57526: LD_INT 0
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 1
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 1
57555: NEG
57556: PUSH
57557: LD_INT 0
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: LD_INT 1
57570: NEG
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: LD_INT 2
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: LD_INT 1
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 2
57601: PUSH
57602: LD_INT 0
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 2
57611: PUSH
57612: LD_INT 1
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 2
57621: PUSH
57622: LD_INT 2
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 1
57631: PUSH
57632: LD_INT 2
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 1
57641: NEG
57642: PUSH
57643: LD_INT 1
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 2
57652: NEG
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 2
57663: NEG
57664: PUSH
57665: LD_INT 1
57667: NEG
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 2
57675: NEG
57676: PUSH
57677: LD_INT 2
57679: NEG
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 2
57687: NEG
57688: PUSH
57689: LD_INT 3
57691: NEG
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 2
57699: PUSH
57700: LD_INT 1
57702: NEG
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 3
57710: PUSH
57711: LD_INT 0
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 3
57720: PUSH
57721: LD_INT 1
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 3
57730: PUSH
57731: LD_INT 2
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 3
57740: PUSH
57741: LD_INT 3
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 2
57750: PUSH
57751: LD_INT 3
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 2
57760: NEG
57761: PUSH
57762: LD_INT 1
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 3
57771: NEG
57772: PUSH
57773: LD_INT 0
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 3
57782: NEG
57783: PUSH
57784: LD_INT 1
57786: NEG
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 3
57794: NEG
57795: PUSH
57796: LD_INT 2
57798: NEG
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 3
57806: NEG
57807: PUSH
57808: LD_INT 3
57810: NEG
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57847: LD_ADDR_VAR 0 42
57851: PUSH
57852: LD_INT 0
57854: PUSH
57855: LD_INT 0
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 0
57864: PUSH
57865: LD_INT 1
57867: NEG
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 1
57875: PUSH
57876: LD_INT 0
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: LD_INT 1
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: LD_INT 1
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 1
57905: NEG
57906: PUSH
57907: LD_INT 0
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 1
57916: NEG
57917: PUSH
57918: LD_INT 1
57920: NEG
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 1
57928: NEG
57929: PUSH
57930: LD_INT 2
57932: NEG
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 0
57940: PUSH
57941: LD_INT 2
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 1
57951: PUSH
57952: LD_INT 1
57954: NEG
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 2
57962: PUSH
57963: LD_INT 1
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 2
57972: PUSH
57973: LD_INT 2
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 1
57982: PUSH
57983: LD_INT 2
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 0
57992: PUSH
57993: LD_INT 2
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 1
58002: NEG
58003: PUSH
58004: LD_INT 1
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 2
58013: NEG
58014: PUSH
58015: LD_INT 1
58017: NEG
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 2
58025: NEG
58026: PUSH
58027: LD_INT 2
58029: NEG
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 2
58037: NEG
58038: PUSH
58039: LD_INT 3
58041: NEG
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: LD_INT 3
58053: NEG
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 0
58061: PUSH
58062: LD_INT 3
58064: NEG
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 1
58072: PUSH
58073: LD_INT 2
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 3
58083: PUSH
58084: LD_INT 2
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 3
58093: PUSH
58094: LD_INT 3
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 2
58103: PUSH
58104: LD_INT 3
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: LD_INT 3
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 0
58123: PUSH
58124: LD_INT 3
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 1
58133: NEG
58134: PUSH
58135: LD_INT 2
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 3
58144: NEG
58145: PUSH
58146: LD_INT 2
58148: NEG
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 3
58156: NEG
58157: PUSH
58158: LD_INT 3
58160: NEG
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58197: LD_ADDR_VAR 0 43
58201: PUSH
58202: LD_INT 0
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 0
58214: PUSH
58215: LD_INT 1
58217: NEG
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 1
58225: PUSH
58226: LD_INT 0
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 1
58235: PUSH
58236: LD_INT 1
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 0
58245: PUSH
58246: LD_INT 1
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 1
58255: NEG
58256: PUSH
58257: LD_INT 0
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: NEG
58267: PUSH
58268: LD_INT 1
58270: NEG
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: LD_INT 2
58282: NEG
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 0
58290: PUSH
58291: LD_INT 2
58293: NEG
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 1
58301: PUSH
58302: LD_INT 1
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 2
58312: PUSH
58313: LD_INT 0
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 2
58322: PUSH
58323: LD_INT 1
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 1
58332: PUSH
58333: LD_INT 2
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 0
58342: PUSH
58343: LD_INT 2
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 1
58352: NEG
58353: PUSH
58354: LD_INT 1
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 2
58363: NEG
58364: PUSH
58365: LD_INT 0
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 2
58374: NEG
58375: PUSH
58376: LD_INT 1
58378: NEG
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 1
58386: NEG
58387: PUSH
58388: LD_INT 3
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 0
58398: PUSH
58399: LD_INT 3
58401: NEG
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 1
58409: PUSH
58410: LD_INT 2
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 2
58420: PUSH
58421: LD_INT 1
58423: NEG
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 3
58431: PUSH
58432: LD_INT 0
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 3
58441: PUSH
58442: LD_INT 1
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 1
58451: PUSH
58452: LD_INT 3
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: LD_INT 3
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 1
58471: NEG
58472: PUSH
58473: LD_INT 2
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 2
58482: NEG
58483: PUSH
58484: LD_INT 1
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 3
58493: NEG
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 3
58504: NEG
58505: PUSH
58506: LD_INT 1
58508: NEG
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58545: LD_ADDR_VAR 0 44
58549: PUSH
58550: LD_INT 0
58552: PUSH
58553: LD_INT 0
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: LD_INT 1
58565: NEG
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 1
58573: PUSH
58574: LD_INT 0
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 1
58583: PUSH
58584: LD_INT 1
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: LD_INT 1
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 1
58603: NEG
58604: PUSH
58605: LD_INT 0
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 1
58614: NEG
58615: PUSH
58616: LD_INT 1
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 1
58626: NEG
58627: PUSH
58628: LD_INT 2
58630: NEG
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 1
58638: PUSH
58639: LD_INT 1
58641: NEG
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 2
58649: PUSH
58650: LD_INT 0
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 2
58659: PUSH
58660: LD_INT 1
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 2
58669: PUSH
58670: LD_INT 2
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 1
58679: PUSH
58680: LD_INT 2
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 1
58689: NEG
58690: PUSH
58691: LD_INT 1
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 2
58700: NEG
58701: PUSH
58702: LD_INT 0
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 2
58711: NEG
58712: PUSH
58713: LD_INT 1
58715: NEG
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 2
58723: NEG
58724: PUSH
58725: LD_INT 2
58727: NEG
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 2
58735: NEG
58736: PUSH
58737: LD_INT 3
58739: NEG
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 2
58747: PUSH
58748: LD_INT 1
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 3
58758: PUSH
58759: LD_INT 0
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 3
58768: PUSH
58769: LD_INT 1
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 3
58778: PUSH
58779: LD_INT 2
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 3
58788: PUSH
58789: LD_INT 3
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 2
58798: PUSH
58799: LD_INT 3
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 2
58808: NEG
58809: PUSH
58810: LD_INT 1
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 3
58819: NEG
58820: PUSH
58821: LD_INT 0
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 3
58830: NEG
58831: PUSH
58832: LD_INT 1
58834: NEG
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 3
58842: NEG
58843: PUSH
58844: LD_INT 2
58846: NEG
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 3
58854: NEG
58855: PUSH
58856: LD_INT 3
58858: NEG
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58895: LD_ADDR_VAR 0 45
58899: PUSH
58900: LD_INT 0
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 0
58912: PUSH
58913: LD_INT 1
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 1
58923: PUSH
58924: LD_INT 0
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 1
58933: PUSH
58934: LD_INT 1
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 0
58943: PUSH
58944: LD_INT 1
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 1
58953: NEG
58954: PUSH
58955: LD_INT 0
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 1
58964: NEG
58965: PUSH
58966: LD_INT 1
58968: NEG
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 1
58976: NEG
58977: PUSH
58978: LD_INT 2
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 0
58988: PUSH
58989: LD_INT 2
58991: NEG
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 1
58999: PUSH
59000: LD_INT 1
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 2
59010: PUSH
59011: LD_INT 1
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 2
59020: PUSH
59021: LD_INT 2
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 1
59030: PUSH
59031: LD_INT 2
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 0
59040: PUSH
59041: LD_INT 2
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 1
59050: NEG
59051: PUSH
59052: LD_INT 1
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 2
59061: NEG
59062: PUSH
59063: LD_INT 1
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 2
59073: NEG
59074: PUSH
59075: LD_INT 2
59077: NEG
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 2
59085: NEG
59086: PUSH
59087: LD_INT 3
59089: NEG
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 1
59097: NEG
59098: PUSH
59099: LD_INT 3
59101: NEG
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 0
59109: PUSH
59110: LD_INT 3
59112: NEG
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 1
59120: PUSH
59121: LD_INT 2
59123: NEG
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 3
59131: PUSH
59132: LD_INT 2
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 3
59141: PUSH
59142: LD_INT 3
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 2
59151: PUSH
59152: LD_INT 3
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 1
59161: PUSH
59162: LD_INT 3
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 0
59171: PUSH
59172: LD_INT 3
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 1
59181: NEG
59182: PUSH
59183: LD_INT 2
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 3
59192: NEG
59193: PUSH
59194: LD_INT 2
59196: NEG
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 3
59204: NEG
59205: PUSH
59206: LD_INT 3
59208: NEG
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59245: LD_ADDR_VAR 0 46
59249: PUSH
59250: LD_INT 0
59252: PUSH
59253: LD_INT 0
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 0
59262: PUSH
59263: LD_INT 1
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 1
59273: PUSH
59274: LD_INT 0
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 1
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: LD_INT 1
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 1
59303: NEG
59304: PUSH
59305: LD_INT 0
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 1
59314: NEG
59315: PUSH
59316: LD_INT 1
59318: NEG
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 1
59326: NEG
59327: PUSH
59328: LD_INT 2
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: LD_INT 2
59341: NEG
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 1
59349: PUSH
59350: LD_INT 1
59352: NEG
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 2
59360: PUSH
59361: LD_INT 0
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 2
59370: PUSH
59371: LD_INT 1
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: PUSH
59381: LD_INT 2
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 0
59390: PUSH
59391: LD_INT 2
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 1
59400: NEG
59401: PUSH
59402: LD_INT 1
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 2
59411: NEG
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 2
59422: NEG
59423: PUSH
59424: LD_INT 1
59426: NEG
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 1
59434: NEG
59435: PUSH
59436: LD_INT 3
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: LD_INT 3
59449: NEG
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 1
59457: PUSH
59458: LD_INT 2
59460: NEG
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 2
59468: PUSH
59469: LD_INT 1
59471: NEG
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 3
59479: PUSH
59480: LD_INT 0
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 3
59489: PUSH
59490: LD_INT 1
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 1
59499: PUSH
59500: LD_INT 3
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 0
59509: PUSH
59510: LD_INT 3
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 1
59519: NEG
59520: PUSH
59521: LD_INT 2
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 2
59530: NEG
59531: PUSH
59532: LD_INT 1
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 3
59541: NEG
59542: PUSH
59543: LD_INT 0
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 3
59552: NEG
59553: PUSH
59554: LD_INT 1
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59593: LD_ADDR_VAR 0 47
59597: PUSH
59598: LD_INT 0
59600: PUSH
59601: LD_INT 0
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 0
59610: PUSH
59611: LD_INT 1
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 1
59621: PUSH
59622: LD_INT 0
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 1
59631: PUSH
59632: LD_INT 1
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 0
59641: PUSH
59642: LD_INT 1
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 1
59651: NEG
59652: PUSH
59653: LD_INT 0
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 1
59662: NEG
59663: PUSH
59664: LD_INT 1
59666: NEG
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 1
59674: NEG
59675: PUSH
59676: LD_INT 2
59678: NEG
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 0
59686: PUSH
59687: LD_INT 2
59689: NEG
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 1
59697: PUSH
59698: LD_INT 1
59700: NEG
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 2
59708: NEG
59709: PUSH
59710: LD_INT 1
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 2
59720: NEG
59721: PUSH
59722: LD_INT 2
59724: NEG
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59744: LD_ADDR_VAR 0 48
59748: PUSH
59749: LD_INT 0
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 0
59761: PUSH
59762: LD_INT 1
59764: NEG
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 1
59772: PUSH
59773: LD_INT 0
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 1
59782: PUSH
59783: LD_INT 1
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 0
59792: PUSH
59793: LD_INT 1
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 1
59802: NEG
59803: PUSH
59804: LD_INT 0
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 1
59813: NEG
59814: PUSH
59815: LD_INT 1
59817: NEG
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 1
59825: NEG
59826: PUSH
59827: LD_INT 2
59829: NEG
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 0
59837: PUSH
59838: LD_INT 2
59840: NEG
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 1
59848: PUSH
59849: LD_INT 1
59851: NEG
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 2
59859: PUSH
59860: LD_INT 0
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 2
59869: PUSH
59870: LD_INT 1
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59891: LD_ADDR_VAR 0 49
59895: PUSH
59896: LD_INT 0
59898: PUSH
59899: LD_INT 0
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 0
59908: PUSH
59909: LD_INT 1
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 1
59919: PUSH
59920: LD_INT 0
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 1
59929: PUSH
59930: LD_INT 1
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 0
59939: PUSH
59940: LD_INT 1
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 1
59949: NEG
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 1
59960: NEG
59961: PUSH
59962: LD_INT 1
59964: NEG
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 1
59972: PUSH
59973: LD_INT 1
59975: NEG
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 2
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 2
59993: PUSH
59994: LD_INT 1
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 2
60003: PUSH
60004: LD_INT 2
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 1
60013: PUSH
60014: LD_INT 2
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60035: LD_ADDR_VAR 0 50
60039: PUSH
60040: LD_INT 0
60042: PUSH
60043: LD_INT 0
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 0
60052: PUSH
60053: LD_INT 1
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 1
60063: PUSH
60064: LD_INT 0
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 1
60073: PUSH
60074: LD_INT 1
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 0
60083: PUSH
60084: LD_INT 1
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 1
60093: NEG
60094: PUSH
60095: LD_INT 0
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 1
60104: NEG
60105: PUSH
60106: LD_INT 1
60108: NEG
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 2
60116: PUSH
60117: LD_INT 1
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 2
60126: PUSH
60127: LD_INT 2
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 1
60136: PUSH
60137: LD_INT 2
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 0
60146: PUSH
60147: LD_INT 2
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 1
60156: NEG
60157: PUSH
60158: LD_INT 1
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60179: LD_ADDR_VAR 0 51
60183: PUSH
60184: LD_INT 0
60186: PUSH
60187: LD_INT 0
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 0
60196: PUSH
60197: LD_INT 1
60199: NEG
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 1
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 1
60217: PUSH
60218: LD_INT 1
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 0
60227: PUSH
60228: LD_INT 1
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 1
60237: NEG
60238: PUSH
60239: LD_INT 0
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 1
60248: NEG
60249: PUSH
60250: LD_INT 1
60252: NEG
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 1
60260: PUSH
60261: LD_INT 2
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 0
60270: PUSH
60271: LD_INT 2
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 1
60280: NEG
60281: PUSH
60282: LD_INT 1
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 2
60291: NEG
60292: PUSH
60293: LD_INT 0
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 2
60302: NEG
60303: PUSH
60304: LD_INT 1
60306: NEG
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60326: LD_ADDR_VAR 0 52
60330: PUSH
60331: LD_INT 0
60333: PUSH
60334: LD_INT 0
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 0
60343: PUSH
60344: LD_INT 1
60346: NEG
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 1
60354: PUSH
60355: LD_INT 0
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 1
60364: PUSH
60365: LD_INT 1
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 0
60374: PUSH
60375: LD_INT 1
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 1
60384: NEG
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 1
60395: NEG
60396: PUSH
60397: LD_INT 1
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 1
60407: NEG
60408: PUSH
60409: LD_INT 2
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 1
60419: NEG
60420: PUSH
60421: LD_INT 1
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 2
60430: NEG
60431: PUSH
60432: LD_INT 0
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 2
60441: NEG
60442: PUSH
60443: LD_INT 1
60445: NEG
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 2
60453: NEG
60454: PUSH
60455: LD_INT 2
60457: NEG
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60477: LD_ADDR_VAR 0 53
60481: PUSH
60482: LD_INT 0
60484: PUSH
60485: LD_INT 0
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 0
60494: PUSH
60495: LD_INT 1
60497: NEG
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 1
60505: PUSH
60506: LD_INT 0
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 1
60515: PUSH
60516: LD_INT 1
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 0
60525: PUSH
60526: LD_INT 1
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 1
60535: NEG
60536: PUSH
60537: LD_INT 0
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 1
60546: NEG
60547: PUSH
60548: LD_INT 1
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 1
60558: NEG
60559: PUSH
60560: LD_INT 2
60562: NEG
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 0
60570: PUSH
60571: LD_INT 2
60573: NEG
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 1
60581: PUSH
60582: LD_INT 1
60584: NEG
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 2
60592: PUSH
60593: LD_INT 0
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 2
60602: PUSH
60603: LD_INT 1
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 2
60612: PUSH
60613: LD_INT 2
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 1
60622: PUSH
60623: LD_INT 2
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 0
60632: PUSH
60633: LD_INT 2
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 1
60642: NEG
60643: PUSH
60644: LD_INT 1
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 2
60653: NEG
60654: PUSH
60655: LD_INT 0
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 2
60664: NEG
60665: PUSH
60666: LD_INT 1
60668: NEG
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 2
60676: NEG
60677: PUSH
60678: LD_INT 2
60680: NEG
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60707: LD_ADDR_VAR 0 54
60711: PUSH
60712: LD_INT 0
60714: PUSH
60715: LD_INT 0
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 0
60724: PUSH
60725: LD_INT 1
60727: NEG
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 1
60735: PUSH
60736: LD_INT 0
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 1
60745: PUSH
60746: LD_INT 1
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 0
60755: PUSH
60756: LD_INT 1
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 1
60765: NEG
60766: PUSH
60767: LD_INT 0
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 1
60776: NEG
60777: PUSH
60778: LD_INT 1
60780: NEG
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 1
60788: NEG
60789: PUSH
60790: LD_INT 2
60792: NEG
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 0
60800: PUSH
60801: LD_INT 2
60803: NEG
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 1
60811: PUSH
60812: LD_INT 1
60814: NEG
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 2
60822: PUSH
60823: LD_INT 0
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 2
60832: PUSH
60833: LD_INT 1
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 2
60842: PUSH
60843: LD_INT 2
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 1
60852: PUSH
60853: LD_INT 2
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 0
60862: PUSH
60863: LD_INT 2
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 1
60872: NEG
60873: PUSH
60874: LD_INT 1
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 2
60883: NEG
60884: PUSH
60885: LD_INT 0
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 2
60894: NEG
60895: PUSH
60896: LD_INT 1
60898: NEG
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 2
60906: NEG
60907: PUSH
60908: LD_INT 2
60910: NEG
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60937: LD_ADDR_VAR 0 55
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 0
60954: PUSH
60955: LD_INT 1
60957: NEG
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 1
60965: PUSH
60966: LD_INT 0
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 1
60975: PUSH
60976: LD_INT 1
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: LD_INT 1
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 1
60995: NEG
60996: PUSH
60997: LD_INT 0
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 1
61006: NEG
61007: PUSH
61008: LD_INT 1
61010: NEG
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 1
61018: NEG
61019: PUSH
61020: LD_INT 2
61022: NEG
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 0
61030: PUSH
61031: LD_INT 2
61033: NEG
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 1
61041: PUSH
61042: LD_INT 1
61044: NEG
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 2
61052: PUSH
61053: LD_INT 0
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 2
61062: PUSH
61063: LD_INT 1
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 2
61072: PUSH
61073: LD_INT 2
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 1
61082: PUSH
61083: LD_INT 2
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 0
61092: PUSH
61093: LD_INT 2
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 1
61102: NEG
61103: PUSH
61104: LD_INT 1
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 2
61113: NEG
61114: PUSH
61115: LD_INT 0
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 2
61124: NEG
61125: PUSH
61126: LD_INT 1
61128: NEG
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 2
61136: NEG
61137: PUSH
61138: LD_INT 2
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61167: LD_ADDR_VAR 0 56
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: LD_INT 0
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 0
61184: PUSH
61185: LD_INT 1
61187: NEG
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 1
61195: PUSH
61196: LD_INT 0
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 1
61205: PUSH
61206: LD_INT 1
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 0
61215: PUSH
61216: LD_INT 1
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 1
61225: NEG
61226: PUSH
61227: LD_INT 0
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 1
61236: NEG
61237: PUSH
61238: LD_INT 1
61240: NEG
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 1
61248: NEG
61249: PUSH
61250: LD_INT 2
61252: NEG
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 0
61260: PUSH
61261: LD_INT 2
61263: NEG
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 1
61271: PUSH
61272: LD_INT 1
61274: NEG
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 2
61282: PUSH
61283: LD_INT 0
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 2
61292: PUSH
61293: LD_INT 1
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 2
61302: PUSH
61303: LD_INT 2
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 1
61312: PUSH
61313: LD_INT 2
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 0
61322: PUSH
61323: LD_INT 2
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 1
61332: NEG
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 2
61343: NEG
61344: PUSH
61345: LD_INT 0
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 2
61354: NEG
61355: PUSH
61356: LD_INT 1
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 2
61366: NEG
61367: PUSH
61368: LD_INT 2
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61397: LD_ADDR_VAR 0 57
61401: PUSH
61402: LD_INT 0
61404: PUSH
61405: LD_INT 0
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 0
61414: PUSH
61415: LD_INT 1
61417: NEG
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 1
61425: PUSH
61426: LD_INT 0
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 1
61435: PUSH
61436: LD_INT 1
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 0
61445: PUSH
61446: LD_INT 1
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 1
61455: NEG
61456: PUSH
61457: LD_INT 0
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 1
61466: NEG
61467: PUSH
61468: LD_INT 1
61470: NEG
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 1
61478: NEG
61479: PUSH
61480: LD_INT 2
61482: NEG
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 0
61490: PUSH
61491: LD_INT 2
61493: NEG
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 1
61501: PUSH
61502: LD_INT 1
61504: NEG
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 2
61512: PUSH
61513: LD_INT 0
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 2
61522: PUSH
61523: LD_INT 1
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 2
61532: PUSH
61533: LD_INT 2
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 1
61542: PUSH
61543: LD_INT 2
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 0
61552: PUSH
61553: LD_INT 2
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 1
61562: NEG
61563: PUSH
61564: LD_INT 1
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 2
61573: NEG
61574: PUSH
61575: LD_INT 0
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 2
61584: NEG
61585: PUSH
61586: LD_INT 1
61588: NEG
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 2
61596: NEG
61597: PUSH
61598: LD_INT 2
61600: NEG
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61627: LD_ADDR_VAR 0 58
61631: PUSH
61632: LD_INT 0
61634: PUSH
61635: LD_INT 0
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 0
61644: PUSH
61645: LD_INT 1
61647: NEG
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 1
61655: PUSH
61656: LD_INT 0
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 1
61665: PUSH
61666: LD_INT 1
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 0
61675: PUSH
61676: LD_INT 1
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 1
61685: NEG
61686: PUSH
61687: LD_INT 0
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 1
61696: NEG
61697: PUSH
61698: LD_INT 1
61700: NEG
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 1
61708: NEG
61709: PUSH
61710: LD_INT 2
61712: NEG
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 0
61720: PUSH
61721: LD_INT 2
61723: NEG
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 1
61731: PUSH
61732: LD_INT 1
61734: NEG
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 2
61742: PUSH
61743: LD_INT 0
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 2
61752: PUSH
61753: LD_INT 1
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 2
61762: PUSH
61763: LD_INT 2
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 1
61772: PUSH
61773: LD_INT 2
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 0
61782: PUSH
61783: LD_INT 2
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 1
61792: NEG
61793: PUSH
61794: LD_INT 1
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 2
61803: NEG
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 2
61814: NEG
61815: PUSH
61816: LD_INT 1
61818: NEG
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 2
61826: NEG
61827: PUSH
61828: LD_INT 2
61830: NEG
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61857: LD_ADDR_VAR 0 59
61861: PUSH
61862: LD_INT 0
61864: PUSH
61865: LD_INT 0
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 0
61874: PUSH
61875: LD_INT 1
61877: NEG
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 1
61885: PUSH
61886: LD_INT 0
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 1
61895: PUSH
61896: LD_INT 1
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 0
61905: PUSH
61906: LD_INT 1
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 1
61915: NEG
61916: PUSH
61917: LD_INT 0
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 1
61926: NEG
61927: PUSH
61928: LD_INT 1
61930: NEG
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61945: LD_ADDR_VAR 0 60
61949: PUSH
61950: LD_INT 0
61952: PUSH
61953: LD_INT 0
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 0
61962: PUSH
61963: LD_INT 1
61965: NEG
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 1
61973: PUSH
61974: LD_INT 0
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 1
61983: PUSH
61984: LD_INT 1
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 0
61993: PUSH
61994: LD_INT 1
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 1
62003: NEG
62004: PUSH
62005: LD_INT 0
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 1
62014: NEG
62015: PUSH
62016: LD_INT 1
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62033: LD_ADDR_VAR 0 61
62037: PUSH
62038: LD_INT 0
62040: PUSH
62041: LD_INT 0
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 0
62050: PUSH
62051: LD_INT 1
62053: NEG
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 1
62061: PUSH
62062: LD_INT 0
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 1
62071: PUSH
62072: LD_INT 1
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 0
62081: PUSH
62082: LD_INT 1
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 1
62091: NEG
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 1
62102: NEG
62103: PUSH
62104: LD_INT 1
62106: NEG
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62121: LD_ADDR_VAR 0 62
62125: PUSH
62126: LD_INT 0
62128: PUSH
62129: LD_INT 0
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 0
62138: PUSH
62139: LD_INT 1
62141: NEG
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 1
62149: PUSH
62150: LD_INT 0
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 1
62159: PUSH
62160: LD_INT 1
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 0
62169: PUSH
62170: LD_INT 1
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 1
62179: NEG
62180: PUSH
62181: LD_INT 0
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 1
62190: NEG
62191: PUSH
62192: LD_INT 1
62194: NEG
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62209: LD_ADDR_VAR 0 63
62213: PUSH
62214: LD_INT 0
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 0
62226: PUSH
62227: LD_INT 1
62229: NEG
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 1
62237: PUSH
62238: LD_INT 0
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 1
62247: PUSH
62248: LD_INT 1
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 0
62257: PUSH
62258: LD_INT 1
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 1
62267: NEG
62268: PUSH
62269: LD_INT 0
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 1
62278: NEG
62279: PUSH
62280: LD_INT 1
62282: NEG
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62297: LD_ADDR_VAR 0 64
62301: PUSH
62302: LD_INT 0
62304: PUSH
62305: LD_INT 0
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 0
62314: PUSH
62315: LD_INT 1
62317: NEG
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 1
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 1
62335: PUSH
62336: LD_INT 1
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 0
62345: PUSH
62346: LD_INT 1
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 1
62355: NEG
62356: PUSH
62357: LD_INT 0
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 1
62366: NEG
62367: PUSH
62368: LD_INT 1
62370: NEG
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: ST_TO_ADDR
// end ; 1 :
62385: GO 68282
62387: LD_INT 1
62389: DOUBLE
62390: EQUAL
62391: IFTRUE 62395
62393: GO 65018
62395: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62396: LD_ADDR_VAR 0 11
62400: PUSH
62401: LD_INT 1
62403: NEG
62404: PUSH
62405: LD_INT 3
62407: NEG
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 0
62415: PUSH
62416: LD_INT 3
62418: NEG
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 1
62426: PUSH
62427: LD_INT 2
62429: NEG
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: LIST
62439: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62440: LD_ADDR_VAR 0 12
62444: PUSH
62445: LD_INT 2
62447: PUSH
62448: LD_INT 1
62450: NEG
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 3
62458: PUSH
62459: LD_INT 0
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 3
62468: PUSH
62469: LD_INT 1
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: LIST
62480: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62481: LD_ADDR_VAR 0 13
62485: PUSH
62486: LD_INT 3
62488: PUSH
62489: LD_INT 2
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 3
62498: PUSH
62499: LD_INT 3
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 2
62508: PUSH
62509: LD_INT 3
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: LIST
62520: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62521: LD_ADDR_VAR 0 14
62525: PUSH
62526: LD_INT 1
62528: PUSH
62529: LD_INT 3
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 0
62538: PUSH
62539: LD_INT 3
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 1
62548: NEG
62549: PUSH
62550: LD_INT 2
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: LIST
62561: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62562: LD_ADDR_VAR 0 15
62566: PUSH
62567: LD_INT 2
62569: NEG
62570: PUSH
62571: LD_INT 1
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 3
62580: NEG
62581: PUSH
62582: LD_INT 0
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 3
62591: NEG
62592: PUSH
62593: LD_INT 1
62595: NEG
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: LIST
62605: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62606: LD_ADDR_VAR 0 16
62610: PUSH
62611: LD_INT 2
62613: NEG
62614: PUSH
62615: LD_INT 3
62617: NEG
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 3
62625: NEG
62626: PUSH
62627: LD_INT 2
62629: NEG
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 3
62637: NEG
62638: PUSH
62639: LD_INT 3
62641: NEG
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: LIST
62651: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62652: LD_ADDR_VAR 0 17
62656: PUSH
62657: LD_INT 1
62659: NEG
62660: PUSH
62661: LD_INT 3
62663: NEG
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 0
62671: PUSH
62672: LD_INT 3
62674: NEG
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 1
62682: PUSH
62683: LD_INT 2
62685: NEG
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: LIST
62695: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62696: LD_ADDR_VAR 0 18
62700: PUSH
62701: LD_INT 2
62703: PUSH
62704: LD_INT 1
62706: NEG
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 3
62714: PUSH
62715: LD_INT 0
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 3
62724: PUSH
62725: LD_INT 1
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: LIST
62736: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62737: LD_ADDR_VAR 0 19
62741: PUSH
62742: LD_INT 3
62744: PUSH
62745: LD_INT 2
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 3
62754: PUSH
62755: LD_INT 3
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 2
62764: PUSH
62765: LD_INT 3
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: LIST
62776: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62777: LD_ADDR_VAR 0 20
62781: PUSH
62782: LD_INT 1
62784: PUSH
62785: LD_INT 3
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 0
62794: PUSH
62795: LD_INT 3
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 1
62804: NEG
62805: PUSH
62806: LD_INT 2
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: LIST
62817: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62818: LD_ADDR_VAR 0 21
62822: PUSH
62823: LD_INT 2
62825: NEG
62826: PUSH
62827: LD_INT 1
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 3
62836: NEG
62837: PUSH
62838: LD_INT 0
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 3
62847: NEG
62848: PUSH
62849: LD_INT 1
62851: NEG
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: LIST
62861: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62862: LD_ADDR_VAR 0 22
62866: PUSH
62867: LD_INT 2
62869: NEG
62870: PUSH
62871: LD_INT 3
62873: NEG
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 3
62881: NEG
62882: PUSH
62883: LD_INT 2
62885: NEG
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 3
62893: NEG
62894: PUSH
62895: LD_INT 3
62897: NEG
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: LIST
62907: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62908: LD_ADDR_VAR 0 23
62912: PUSH
62913: LD_INT 0
62915: PUSH
62916: LD_INT 3
62918: NEG
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 1
62926: NEG
62927: PUSH
62928: LD_INT 4
62930: NEG
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 1
62938: PUSH
62939: LD_INT 3
62941: NEG
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: LIST
62951: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62952: LD_ADDR_VAR 0 24
62956: PUSH
62957: LD_INT 3
62959: PUSH
62960: LD_INT 0
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 3
62969: PUSH
62970: LD_INT 1
62972: NEG
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 4
62980: PUSH
62981: LD_INT 1
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: LIST
62992: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62993: LD_ADDR_VAR 0 25
62997: PUSH
62998: LD_INT 3
63000: PUSH
63001: LD_INT 3
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 4
63010: PUSH
63011: LD_INT 3
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 3
63020: PUSH
63021: LD_INT 4
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: LIST
63032: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63033: LD_ADDR_VAR 0 26
63037: PUSH
63038: LD_INT 0
63040: PUSH
63041: LD_INT 3
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 1
63050: PUSH
63051: LD_INT 4
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 1
63060: NEG
63061: PUSH
63062: LD_INT 3
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: LIST
63073: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63074: LD_ADDR_VAR 0 27
63078: PUSH
63079: LD_INT 3
63081: NEG
63082: PUSH
63083: LD_INT 0
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 3
63092: NEG
63093: PUSH
63094: LD_INT 1
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 4
63103: NEG
63104: PUSH
63105: LD_INT 1
63107: NEG
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: LIST
63117: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63118: LD_ADDR_VAR 0 28
63122: PUSH
63123: LD_INT 3
63125: NEG
63126: PUSH
63127: LD_INT 3
63129: NEG
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 3
63137: NEG
63138: PUSH
63139: LD_INT 4
63141: NEG
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 4
63149: NEG
63150: PUSH
63151: LD_INT 3
63153: NEG
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: LIST
63163: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63164: LD_ADDR_VAR 0 29
63168: PUSH
63169: LD_INT 1
63171: NEG
63172: PUSH
63173: LD_INT 3
63175: NEG
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 0
63183: PUSH
63184: LD_INT 3
63186: NEG
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 1
63194: PUSH
63195: LD_INT 2
63197: NEG
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 1
63205: NEG
63206: PUSH
63207: LD_INT 4
63209: NEG
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 0
63217: PUSH
63218: LD_INT 4
63220: NEG
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 1
63228: PUSH
63229: LD_INT 3
63231: NEG
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 1
63239: NEG
63240: PUSH
63241: LD_INT 5
63243: NEG
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 0
63251: PUSH
63252: LD_INT 5
63254: NEG
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 1
63262: PUSH
63263: LD_INT 4
63265: NEG
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 1
63273: NEG
63274: PUSH
63275: LD_INT 6
63277: NEG
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 0
63285: PUSH
63286: LD_INT 6
63288: NEG
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 1
63296: PUSH
63297: LD_INT 5
63299: NEG
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63319: LD_ADDR_VAR 0 30
63323: PUSH
63324: LD_INT 2
63326: PUSH
63327: LD_INT 1
63329: NEG
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 3
63337: PUSH
63338: LD_INT 0
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 3
63347: PUSH
63348: LD_INT 1
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 3
63357: PUSH
63358: LD_INT 1
63360: NEG
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 4
63368: PUSH
63369: LD_INT 0
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 4
63378: PUSH
63379: LD_INT 1
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 4
63388: PUSH
63389: LD_INT 1
63391: NEG
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 5
63399: PUSH
63400: LD_INT 0
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 5
63409: PUSH
63410: LD_INT 1
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 5
63419: PUSH
63420: LD_INT 1
63422: NEG
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 6
63430: PUSH
63431: LD_INT 0
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 6
63440: PUSH
63441: LD_INT 1
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63462: LD_ADDR_VAR 0 31
63466: PUSH
63467: LD_INT 3
63469: PUSH
63470: LD_INT 2
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 3
63479: PUSH
63480: LD_INT 3
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 2
63489: PUSH
63490: LD_INT 3
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 4
63499: PUSH
63500: LD_INT 3
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 4
63509: PUSH
63510: LD_INT 4
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 3
63519: PUSH
63520: LD_INT 4
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 5
63529: PUSH
63530: LD_INT 4
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 5
63539: PUSH
63540: LD_INT 5
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 4
63549: PUSH
63550: LD_INT 5
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 6
63559: PUSH
63560: LD_INT 5
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 6
63569: PUSH
63570: LD_INT 6
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 5
63579: PUSH
63580: LD_INT 6
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63601: LD_ADDR_VAR 0 32
63605: PUSH
63606: LD_INT 1
63608: PUSH
63609: LD_INT 3
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 0
63618: PUSH
63619: LD_INT 3
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 1
63628: NEG
63629: PUSH
63630: LD_INT 2
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 1
63639: PUSH
63640: LD_INT 4
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 0
63649: PUSH
63650: LD_INT 4
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 1
63659: NEG
63660: PUSH
63661: LD_INT 3
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 1
63670: PUSH
63671: LD_INT 5
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 0
63680: PUSH
63681: LD_INT 5
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 1
63690: NEG
63691: PUSH
63692: LD_INT 4
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 1
63701: PUSH
63702: LD_INT 6
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 0
63711: PUSH
63712: LD_INT 6
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 1
63721: NEG
63722: PUSH
63723: LD_INT 5
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63744: LD_ADDR_VAR 0 33
63748: PUSH
63749: LD_INT 2
63751: NEG
63752: PUSH
63753: LD_INT 1
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 3
63762: NEG
63763: PUSH
63764: LD_INT 0
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 3
63773: NEG
63774: PUSH
63775: LD_INT 1
63777: NEG
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 3
63785: NEG
63786: PUSH
63787: LD_INT 1
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 4
63796: NEG
63797: PUSH
63798: LD_INT 0
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 4
63807: NEG
63808: PUSH
63809: LD_INT 1
63811: NEG
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 4
63819: NEG
63820: PUSH
63821: LD_INT 1
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 5
63830: NEG
63831: PUSH
63832: LD_INT 0
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 5
63841: NEG
63842: PUSH
63843: LD_INT 1
63845: NEG
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 5
63853: NEG
63854: PUSH
63855: LD_INT 1
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 6
63864: NEG
63865: PUSH
63866: LD_INT 0
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 6
63875: NEG
63876: PUSH
63877: LD_INT 1
63879: NEG
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63899: LD_ADDR_VAR 0 34
63903: PUSH
63904: LD_INT 2
63906: NEG
63907: PUSH
63908: LD_INT 3
63910: NEG
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 3
63918: NEG
63919: PUSH
63920: LD_INT 2
63922: NEG
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 3
63930: NEG
63931: PUSH
63932: LD_INT 3
63934: NEG
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 3
63942: NEG
63943: PUSH
63944: LD_INT 4
63946: NEG
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 4
63954: NEG
63955: PUSH
63956: LD_INT 3
63958: NEG
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 4
63966: NEG
63967: PUSH
63968: LD_INT 4
63970: NEG
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 4
63978: NEG
63979: PUSH
63980: LD_INT 5
63982: NEG
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 5
63990: NEG
63991: PUSH
63992: LD_INT 4
63994: NEG
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 5
64002: NEG
64003: PUSH
64004: LD_INT 5
64006: NEG
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 5
64014: NEG
64015: PUSH
64016: LD_INT 6
64018: NEG
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: LD_INT 6
64026: NEG
64027: PUSH
64028: LD_INT 5
64030: NEG
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 6
64038: NEG
64039: PUSH
64040: LD_INT 6
64042: NEG
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64062: LD_ADDR_VAR 0 41
64066: PUSH
64067: LD_INT 0
64069: PUSH
64070: LD_INT 2
64072: NEG
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 1
64080: NEG
64081: PUSH
64082: LD_INT 3
64084: NEG
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 1
64092: PUSH
64093: LD_INT 2
64095: NEG
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: LIST
64105: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64106: LD_ADDR_VAR 0 42
64110: PUSH
64111: LD_INT 2
64113: PUSH
64114: LD_INT 0
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 2
64123: PUSH
64124: LD_INT 1
64126: NEG
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 3
64134: PUSH
64135: LD_INT 1
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: LIST
64146: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64147: LD_ADDR_VAR 0 43
64151: PUSH
64152: LD_INT 2
64154: PUSH
64155: LD_INT 2
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 3
64164: PUSH
64165: LD_INT 2
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 2
64174: PUSH
64175: LD_INT 3
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: LIST
64186: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64187: LD_ADDR_VAR 0 44
64191: PUSH
64192: LD_INT 0
64194: PUSH
64195: LD_INT 2
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 1
64204: PUSH
64205: LD_INT 3
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 1
64214: NEG
64215: PUSH
64216: LD_INT 2
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: LIST
64227: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64228: LD_ADDR_VAR 0 45
64232: PUSH
64233: LD_INT 2
64235: NEG
64236: PUSH
64237: LD_INT 0
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 2
64246: NEG
64247: PUSH
64248: LD_INT 1
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 3
64257: NEG
64258: PUSH
64259: LD_INT 1
64261: NEG
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: LIST
64271: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64272: LD_ADDR_VAR 0 46
64276: PUSH
64277: LD_INT 2
64279: NEG
64280: PUSH
64281: LD_INT 2
64283: NEG
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 2
64291: NEG
64292: PUSH
64293: LD_INT 3
64295: NEG
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 3
64303: NEG
64304: PUSH
64305: LD_INT 2
64307: NEG
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: LIST
64317: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64318: LD_ADDR_VAR 0 47
64322: PUSH
64323: LD_INT 2
64325: NEG
64326: PUSH
64327: LD_INT 3
64329: NEG
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 1
64337: NEG
64338: PUSH
64339: LD_INT 3
64341: NEG
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64351: LD_ADDR_VAR 0 48
64355: PUSH
64356: LD_INT 1
64358: PUSH
64359: LD_INT 2
64361: NEG
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 2
64369: PUSH
64370: LD_INT 1
64372: NEG
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64382: LD_ADDR_VAR 0 49
64386: PUSH
64387: LD_INT 3
64389: PUSH
64390: LD_INT 1
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: PUSH
64397: LD_INT 3
64399: PUSH
64400: LD_INT 2
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64411: LD_ADDR_VAR 0 50
64415: PUSH
64416: LD_INT 2
64418: PUSH
64419: LD_INT 3
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 1
64428: PUSH
64429: LD_INT 3
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64440: LD_ADDR_VAR 0 51
64444: PUSH
64445: LD_INT 1
64447: NEG
64448: PUSH
64449: LD_INT 2
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 2
64458: NEG
64459: PUSH
64460: LD_INT 1
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64471: LD_ADDR_VAR 0 52
64475: PUSH
64476: LD_INT 3
64478: NEG
64479: PUSH
64480: LD_INT 1
64482: NEG
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 3
64490: NEG
64491: PUSH
64492: LD_INT 2
64494: NEG
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64504: LD_ADDR_VAR 0 53
64508: PUSH
64509: LD_INT 1
64511: NEG
64512: PUSH
64513: LD_INT 3
64515: NEG
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 0
64523: PUSH
64524: LD_INT 3
64526: NEG
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 1
64534: PUSH
64535: LD_INT 2
64537: NEG
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: LIST
64547: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64548: LD_ADDR_VAR 0 54
64552: PUSH
64553: LD_INT 2
64555: PUSH
64556: LD_INT 1
64558: NEG
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: LD_INT 3
64566: PUSH
64567: LD_INT 0
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 3
64576: PUSH
64577: LD_INT 1
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: LIST
64588: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64589: LD_ADDR_VAR 0 55
64593: PUSH
64594: LD_INT 3
64596: PUSH
64597: LD_INT 2
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: LD_INT 3
64606: PUSH
64607: LD_INT 3
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 2
64616: PUSH
64617: LD_INT 3
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: LIST
64628: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64629: LD_ADDR_VAR 0 56
64633: PUSH
64634: LD_INT 1
64636: PUSH
64637: LD_INT 3
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: LD_INT 0
64646: PUSH
64647: LD_INT 3
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: LD_INT 1
64656: NEG
64657: PUSH
64658: LD_INT 2
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: LIST
64669: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64670: LD_ADDR_VAR 0 57
64674: PUSH
64675: LD_INT 2
64677: NEG
64678: PUSH
64679: LD_INT 1
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 3
64688: NEG
64689: PUSH
64690: LD_INT 0
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 3
64699: NEG
64700: PUSH
64701: LD_INT 1
64703: NEG
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: LIST
64713: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64714: LD_ADDR_VAR 0 58
64718: PUSH
64719: LD_INT 2
64721: NEG
64722: PUSH
64723: LD_INT 3
64725: NEG
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 3
64733: NEG
64734: PUSH
64735: LD_INT 2
64737: NEG
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 3
64745: NEG
64746: PUSH
64747: LD_INT 3
64749: NEG
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: LIST
64759: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64760: LD_ADDR_VAR 0 59
64764: PUSH
64765: LD_INT 1
64767: NEG
64768: PUSH
64769: LD_INT 2
64771: NEG
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 0
64779: PUSH
64780: LD_INT 2
64782: NEG
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 1
64790: PUSH
64791: LD_INT 1
64793: NEG
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: LIST
64803: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64804: LD_ADDR_VAR 0 60
64808: PUSH
64809: LD_INT 1
64811: PUSH
64812: LD_INT 1
64814: NEG
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 2
64822: PUSH
64823: LD_INT 0
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 2
64832: PUSH
64833: LD_INT 1
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: LIST
64844: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64845: LD_ADDR_VAR 0 61
64849: PUSH
64850: LD_INT 2
64852: PUSH
64853: LD_INT 1
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 2
64862: PUSH
64863: LD_INT 2
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 1
64872: PUSH
64873: LD_INT 2
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: LIST
64884: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64885: LD_ADDR_VAR 0 62
64889: PUSH
64890: LD_INT 1
64892: PUSH
64893: LD_INT 2
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 0
64902: PUSH
64903: LD_INT 2
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 1
64912: NEG
64913: PUSH
64914: LD_INT 1
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: LIST
64925: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64926: LD_ADDR_VAR 0 63
64930: PUSH
64931: LD_INT 1
64933: NEG
64934: PUSH
64935: LD_INT 1
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: LD_INT 2
64944: NEG
64945: PUSH
64946: LD_INT 0
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 2
64955: NEG
64956: PUSH
64957: LD_INT 1
64959: NEG
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: LIST
64969: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64970: LD_ADDR_VAR 0 64
64974: PUSH
64975: LD_INT 1
64977: NEG
64978: PUSH
64979: LD_INT 2
64981: NEG
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 2
64989: NEG
64990: PUSH
64991: LD_INT 1
64993: NEG
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 2
65001: NEG
65002: PUSH
65003: LD_INT 2
65005: NEG
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: LIST
65015: ST_TO_ADDR
// end ; 2 :
65016: GO 68282
65018: LD_INT 2
65020: DOUBLE
65021: EQUAL
65022: IFTRUE 65026
65024: GO 68281
65026: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65027: LD_ADDR_VAR 0 29
65031: PUSH
65032: LD_INT 4
65034: PUSH
65035: LD_INT 0
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 4
65044: PUSH
65045: LD_INT 1
65047: NEG
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 5
65055: PUSH
65056: LD_INT 0
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 5
65065: PUSH
65066: LD_INT 1
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 4
65075: PUSH
65076: LD_INT 1
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 3
65085: PUSH
65086: LD_INT 0
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 3
65095: PUSH
65096: LD_INT 1
65098: NEG
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 3
65106: PUSH
65107: LD_INT 2
65109: NEG
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 5
65117: PUSH
65118: LD_INT 2
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 3
65127: PUSH
65128: LD_INT 3
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 3
65137: PUSH
65138: LD_INT 2
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 4
65147: PUSH
65148: LD_INT 3
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 4
65157: PUSH
65158: LD_INT 4
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 3
65167: PUSH
65168: LD_INT 4
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 2
65177: PUSH
65178: LD_INT 3
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 2
65187: PUSH
65188: LD_INT 2
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 4
65197: PUSH
65198: LD_INT 2
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 2
65207: PUSH
65208: LD_INT 4
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 0
65217: PUSH
65218: LD_INT 4
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 0
65227: PUSH
65228: LD_INT 3
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 1
65237: PUSH
65238: LD_INT 4
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 1
65247: PUSH
65248: LD_INT 5
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 0
65257: PUSH
65258: LD_INT 5
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 1
65267: NEG
65268: PUSH
65269: LD_INT 4
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 1
65278: NEG
65279: PUSH
65280: LD_INT 3
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: LD_INT 2
65289: PUSH
65290: LD_INT 5
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: LD_INT 2
65299: NEG
65300: PUSH
65301: LD_INT 3
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 3
65310: NEG
65311: PUSH
65312: LD_INT 0
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 3
65321: NEG
65322: PUSH
65323: LD_INT 1
65325: NEG
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 2
65333: NEG
65334: PUSH
65335: LD_INT 0
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PUSH
65342: LD_INT 2
65344: NEG
65345: PUSH
65346: LD_INT 1
65348: PUSH
65349: EMPTY
65350: LIST
65351: LIST
65352: PUSH
65353: LD_INT 3
65355: NEG
65356: PUSH
65357: LD_INT 1
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 4
65366: NEG
65367: PUSH
65368: LD_INT 0
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 4
65377: NEG
65378: PUSH
65379: LD_INT 1
65381: NEG
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 4
65389: NEG
65390: PUSH
65391: LD_INT 2
65393: NEG
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 2
65401: NEG
65402: PUSH
65403: LD_INT 2
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 4
65412: NEG
65413: PUSH
65414: LD_INT 4
65416: NEG
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 4
65424: NEG
65425: PUSH
65426: LD_INT 5
65428: NEG
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 3
65436: NEG
65437: PUSH
65438: LD_INT 4
65440: NEG
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 3
65448: NEG
65449: PUSH
65450: LD_INT 3
65452: NEG
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 4
65460: NEG
65461: PUSH
65462: LD_INT 3
65464: NEG
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 5
65472: NEG
65473: PUSH
65474: LD_INT 4
65476: NEG
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 5
65484: NEG
65485: PUSH
65486: LD_INT 5
65488: NEG
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 3
65496: NEG
65497: PUSH
65498: LD_INT 5
65500: NEG
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 5
65508: NEG
65509: PUSH
65510: LD_INT 3
65512: NEG
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65565: LD_ADDR_VAR 0 30
65569: PUSH
65570: LD_INT 4
65572: PUSH
65573: LD_INT 4
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 4
65582: PUSH
65583: LD_INT 3
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 5
65592: PUSH
65593: LD_INT 4
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 5
65602: PUSH
65603: LD_INT 5
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 4
65612: PUSH
65613: LD_INT 5
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 3
65622: PUSH
65623: LD_INT 4
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: LD_INT 3
65632: PUSH
65633: LD_INT 3
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 5
65642: PUSH
65643: LD_INT 3
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: PUSH
65650: LD_INT 3
65652: PUSH
65653: LD_INT 5
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 0
65662: PUSH
65663: LD_INT 3
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: PUSH
65670: LD_INT 0
65672: PUSH
65673: LD_INT 2
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 1
65682: PUSH
65683: LD_INT 3
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: LD_INT 1
65692: PUSH
65693: LD_INT 4
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 0
65702: PUSH
65703: LD_INT 4
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 1
65712: NEG
65713: PUSH
65714: LD_INT 3
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 1
65723: NEG
65724: PUSH
65725: LD_INT 2
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: LD_INT 2
65734: PUSH
65735: LD_INT 4
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 2
65744: NEG
65745: PUSH
65746: LD_INT 2
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 4
65755: NEG
65756: PUSH
65757: LD_INT 0
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 4
65766: NEG
65767: PUSH
65768: LD_INT 1
65770: NEG
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 3
65778: NEG
65779: PUSH
65780: LD_INT 0
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 3
65789: NEG
65790: PUSH
65791: LD_INT 1
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 4
65800: NEG
65801: PUSH
65802: LD_INT 1
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 5
65811: NEG
65812: PUSH
65813: LD_INT 0
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 5
65822: NEG
65823: PUSH
65824: LD_INT 1
65826: NEG
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 5
65834: NEG
65835: PUSH
65836: LD_INT 2
65838: NEG
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: LD_INT 3
65846: NEG
65847: PUSH
65848: LD_INT 2
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 3
65857: NEG
65858: PUSH
65859: LD_INT 3
65861: NEG
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 3
65869: NEG
65870: PUSH
65871: LD_INT 4
65873: NEG
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: LD_INT 2
65881: NEG
65882: PUSH
65883: LD_INT 3
65885: NEG
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 2
65893: NEG
65894: PUSH
65895: LD_INT 2
65897: NEG
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 3
65905: NEG
65906: PUSH
65907: LD_INT 2
65909: NEG
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 4
65917: NEG
65918: PUSH
65919: LD_INT 3
65921: NEG
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 4
65929: NEG
65930: PUSH
65931: LD_INT 4
65933: NEG
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 2
65941: NEG
65942: PUSH
65943: LD_INT 4
65945: NEG
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: LD_INT 4
65953: NEG
65954: PUSH
65955: LD_INT 2
65957: NEG
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 0
65965: PUSH
65966: LD_INT 4
65968: NEG
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 0
65976: PUSH
65977: LD_INT 5
65979: NEG
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 1
65987: PUSH
65988: LD_INT 4
65990: NEG
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 1
65998: PUSH
65999: LD_INT 3
66001: NEG
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: LD_INT 0
66009: PUSH
66010: LD_INT 3
66012: NEG
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 1
66020: NEG
66021: PUSH
66022: LD_INT 4
66024: NEG
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 1
66032: NEG
66033: PUSH
66034: LD_INT 5
66036: NEG
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 2
66044: PUSH
66045: LD_INT 3
66047: NEG
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: LD_INT 2
66055: NEG
66056: PUSH
66057: LD_INT 5
66059: NEG
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66112: LD_ADDR_VAR 0 31
66116: PUSH
66117: LD_INT 0
66119: PUSH
66120: LD_INT 4
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 0
66129: PUSH
66130: LD_INT 3
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 1
66139: PUSH
66140: LD_INT 4
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 1
66149: PUSH
66150: LD_INT 5
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 0
66159: PUSH
66160: LD_INT 5
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 1
66169: NEG
66170: PUSH
66171: LD_INT 4
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 1
66180: NEG
66181: PUSH
66182: LD_INT 3
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 2
66191: PUSH
66192: LD_INT 5
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 2
66201: NEG
66202: PUSH
66203: LD_INT 3
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: LD_INT 3
66212: NEG
66213: PUSH
66214: LD_INT 0
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_INT 3
66223: NEG
66224: PUSH
66225: LD_INT 1
66227: NEG
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 2
66235: NEG
66236: PUSH
66237: LD_INT 0
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 2
66246: NEG
66247: PUSH
66248: LD_INT 1
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: LD_INT 3
66257: NEG
66258: PUSH
66259: LD_INT 1
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 4
66268: NEG
66269: PUSH
66270: LD_INT 0
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 4
66279: NEG
66280: PUSH
66281: LD_INT 1
66283: NEG
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 4
66291: NEG
66292: PUSH
66293: LD_INT 2
66295: NEG
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 2
66303: NEG
66304: PUSH
66305: LD_INT 2
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 4
66314: NEG
66315: PUSH
66316: LD_INT 4
66318: NEG
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 4
66326: NEG
66327: PUSH
66328: LD_INT 5
66330: NEG
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 3
66338: NEG
66339: PUSH
66340: LD_INT 4
66342: NEG
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 3
66350: NEG
66351: PUSH
66352: LD_INT 3
66354: NEG
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: LD_INT 4
66362: NEG
66363: PUSH
66364: LD_INT 3
66366: NEG
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 5
66374: NEG
66375: PUSH
66376: LD_INT 4
66378: NEG
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 5
66386: NEG
66387: PUSH
66388: LD_INT 5
66390: NEG
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 3
66398: NEG
66399: PUSH
66400: LD_INT 5
66402: NEG
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_INT 5
66410: NEG
66411: PUSH
66412: LD_INT 3
66414: NEG
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: LD_INT 0
66422: PUSH
66423: LD_INT 3
66425: NEG
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 0
66433: PUSH
66434: LD_INT 4
66436: NEG
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 1
66444: PUSH
66445: LD_INT 3
66447: NEG
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 1
66455: PUSH
66456: LD_INT 2
66458: NEG
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 0
66466: PUSH
66467: LD_INT 2
66469: NEG
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 1
66477: NEG
66478: PUSH
66479: LD_INT 3
66481: NEG
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 1
66489: NEG
66490: PUSH
66491: LD_INT 4
66493: NEG
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 2
66501: PUSH
66502: LD_INT 2
66504: NEG
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 2
66512: NEG
66513: PUSH
66514: LD_INT 4
66516: NEG
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 4
66524: PUSH
66525: LD_INT 0
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 4
66534: PUSH
66535: LD_INT 1
66537: NEG
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 5
66545: PUSH
66546: LD_INT 0
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 5
66555: PUSH
66556: LD_INT 1
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: LD_INT 4
66565: PUSH
66566: LD_INT 1
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: LD_INT 3
66575: PUSH
66576: LD_INT 0
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: PUSH
66583: LD_INT 3
66585: PUSH
66586: LD_INT 1
66588: NEG
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 3
66596: PUSH
66597: LD_INT 2
66599: NEG
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 5
66607: PUSH
66608: LD_INT 2
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66662: LD_ADDR_VAR 0 32
66666: PUSH
66667: LD_INT 4
66669: NEG
66670: PUSH
66671: LD_INT 0
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 4
66680: NEG
66681: PUSH
66682: LD_INT 1
66684: NEG
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 3
66692: NEG
66693: PUSH
66694: LD_INT 0
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 3
66703: NEG
66704: PUSH
66705: LD_INT 1
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 4
66714: NEG
66715: PUSH
66716: LD_INT 1
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 5
66725: NEG
66726: PUSH
66727: LD_INT 0
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 5
66736: NEG
66737: PUSH
66738: LD_INT 1
66740: NEG
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 5
66748: NEG
66749: PUSH
66750: LD_INT 2
66752: NEG
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 3
66760: NEG
66761: PUSH
66762: LD_INT 2
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 3
66771: NEG
66772: PUSH
66773: LD_INT 3
66775: NEG
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: LD_INT 3
66783: NEG
66784: PUSH
66785: LD_INT 4
66787: NEG
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 2
66795: NEG
66796: PUSH
66797: LD_INT 3
66799: NEG
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 2
66807: NEG
66808: PUSH
66809: LD_INT 2
66811: NEG
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 3
66819: NEG
66820: PUSH
66821: LD_INT 2
66823: NEG
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 4
66831: NEG
66832: PUSH
66833: LD_INT 3
66835: NEG
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 4
66843: NEG
66844: PUSH
66845: LD_INT 4
66847: NEG
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 2
66855: NEG
66856: PUSH
66857: LD_INT 4
66859: NEG
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 4
66867: NEG
66868: PUSH
66869: LD_INT 2
66871: NEG
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 0
66879: PUSH
66880: LD_INT 4
66882: NEG
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 0
66890: PUSH
66891: LD_INT 5
66893: NEG
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 1
66901: PUSH
66902: LD_INT 4
66904: NEG
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 1
66912: PUSH
66913: LD_INT 3
66915: NEG
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 0
66923: PUSH
66924: LD_INT 3
66926: NEG
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: LD_INT 1
66934: NEG
66935: PUSH
66936: LD_INT 4
66938: NEG
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: LD_INT 1
66946: NEG
66947: PUSH
66948: LD_INT 5
66950: NEG
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: PUSH
66956: LD_INT 2
66958: PUSH
66959: LD_INT 3
66961: NEG
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: LD_INT 2
66969: NEG
66970: PUSH
66971: LD_INT 5
66973: NEG
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 3
66981: PUSH
66982: LD_INT 0
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 3
66991: PUSH
66992: LD_INT 1
66994: NEG
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 4
67002: PUSH
67003: LD_INT 0
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 4
67012: PUSH
67013: LD_INT 1
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 3
67022: PUSH
67023: LD_INT 1
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: LD_INT 2
67032: PUSH
67033: LD_INT 0
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 2
67042: PUSH
67043: LD_INT 1
67045: NEG
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 2
67053: PUSH
67054: LD_INT 2
67056: NEG
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 4
67064: PUSH
67065: LD_INT 2
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 4
67074: PUSH
67075: LD_INT 4
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PUSH
67082: LD_INT 4
67084: PUSH
67085: LD_INT 3
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: PUSH
67092: LD_INT 5
67094: PUSH
67095: LD_INT 4
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: PUSH
67102: LD_INT 5
67104: PUSH
67105: LD_INT 5
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: PUSH
67112: LD_INT 4
67114: PUSH
67115: LD_INT 5
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 3
67124: PUSH
67125: LD_INT 4
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 3
67134: PUSH
67135: LD_INT 3
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: LD_INT 5
67144: PUSH
67145: LD_INT 3
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 3
67154: PUSH
67155: LD_INT 5
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67209: LD_ADDR_VAR 0 33
67213: PUSH
67214: LD_INT 4
67216: NEG
67217: PUSH
67218: LD_INT 4
67220: NEG
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 4
67228: NEG
67229: PUSH
67230: LD_INT 5
67232: NEG
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 3
67240: NEG
67241: PUSH
67242: LD_INT 4
67244: NEG
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_INT 3
67252: NEG
67253: PUSH
67254: LD_INT 3
67256: NEG
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 4
67264: NEG
67265: PUSH
67266: LD_INT 3
67268: NEG
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 5
67276: NEG
67277: PUSH
67278: LD_INT 4
67280: NEG
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_INT 5
67288: NEG
67289: PUSH
67290: LD_INT 5
67292: NEG
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 3
67300: NEG
67301: PUSH
67302: LD_INT 5
67304: NEG
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 5
67312: NEG
67313: PUSH
67314: LD_INT 3
67316: NEG
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: LD_INT 0
67324: PUSH
67325: LD_INT 3
67327: NEG
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 0
67335: PUSH
67336: LD_INT 4
67338: NEG
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 1
67346: PUSH
67347: LD_INT 3
67349: NEG
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: LD_INT 1
67357: PUSH
67358: LD_INT 2
67360: NEG
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 0
67368: PUSH
67369: LD_INT 2
67371: NEG
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 1
67379: NEG
67380: PUSH
67381: LD_INT 3
67383: NEG
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: LD_INT 1
67391: NEG
67392: PUSH
67393: LD_INT 4
67395: NEG
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: PUSH
67401: LD_INT 2
67403: PUSH
67404: LD_INT 2
67406: NEG
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 2
67414: NEG
67415: PUSH
67416: LD_INT 4
67418: NEG
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 4
67426: PUSH
67427: LD_INT 0
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 4
67436: PUSH
67437: LD_INT 1
67439: NEG
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 5
67447: PUSH
67448: LD_INT 0
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: LD_INT 5
67457: PUSH
67458: LD_INT 1
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 4
67467: PUSH
67468: LD_INT 1
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 3
67477: PUSH
67478: LD_INT 0
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: LD_INT 3
67487: PUSH
67488: LD_INT 1
67490: NEG
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 3
67498: PUSH
67499: LD_INT 2
67501: NEG
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 5
67509: PUSH
67510: LD_INT 2
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 3
67519: PUSH
67520: LD_INT 3
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: LD_INT 3
67529: PUSH
67530: LD_INT 2
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PUSH
67537: LD_INT 4
67539: PUSH
67540: LD_INT 3
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: LD_INT 4
67549: PUSH
67550: LD_INT 4
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: PUSH
67557: LD_INT 3
67559: PUSH
67560: LD_INT 4
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 2
67569: PUSH
67570: LD_INT 3
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: LD_INT 2
67579: PUSH
67580: LD_INT 2
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PUSH
67587: LD_INT 4
67589: PUSH
67590: LD_INT 2
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: LD_INT 2
67599: PUSH
67600: LD_INT 4
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: PUSH
67607: LD_INT 0
67609: PUSH
67610: LD_INT 4
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PUSH
67617: LD_INT 0
67619: PUSH
67620: LD_INT 3
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: LD_INT 1
67629: PUSH
67630: LD_INT 4
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 1
67639: PUSH
67640: LD_INT 5
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 0
67649: PUSH
67650: LD_INT 5
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: PUSH
67657: LD_INT 1
67659: NEG
67660: PUSH
67661: LD_INT 4
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 1
67670: NEG
67671: PUSH
67672: LD_INT 3
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 2
67681: PUSH
67682: LD_INT 5
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 2
67691: NEG
67692: PUSH
67693: LD_INT 3
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: LIST
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: LIST
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67747: LD_ADDR_VAR 0 34
67751: PUSH
67752: LD_INT 0
67754: PUSH
67755: LD_INT 4
67757: NEG
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 0
67765: PUSH
67766: LD_INT 5
67768: NEG
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 1
67776: PUSH
67777: LD_INT 4
67779: NEG
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 1
67787: PUSH
67788: LD_INT 3
67790: NEG
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PUSH
67796: LD_INT 0
67798: PUSH
67799: LD_INT 3
67801: NEG
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 1
67809: NEG
67810: PUSH
67811: LD_INT 4
67813: NEG
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: LD_INT 1
67821: NEG
67822: PUSH
67823: LD_INT 5
67825: NEG
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: LD_INT 2
67833: PUSH
67834: LD_INT 3
67836: NEG
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: LD_INT 2
67844: NEG
67845: PUSH
67846: LD_INT 5
67848: NEG
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: PUSH
67854: LD_INT 3
67856: PUSH
67857: LD_INT 0
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: LD_INT 3
67866: PUSH
67867: LD_INT 1
67869: NEG
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: PUSH
67875: LD_INT 4
67877: PUSH
67878: LD_INT 0
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: PUSH
67885: LD_INT 4
67887: PUSH
67888: LD_INT 1
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: PUSH
67895: LD_INT 3
67897: PUSH
67898: LD_INT 1
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: LD_INT 2
67907: PUSH
67908: LD_INT 0
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: LD_INT 2
67917: PUSH
67918: LD_INT 1
67920: NEG
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: LD_INT 2
67928: PUSH
67929: LD_INT 2
67931: NEG
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: LD_INT 4
67939: PUSH
67940: LD_INT 2
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: LD_INT 4
67949: PUSH
67950: LD_INT 4
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PUSH
67957: LD_INT 4
67959: PUSH
67960: LD_INT 3
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 5
67969: PUSH
67970: LD_INT 4
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 5
67979: PUSH
67980: LD_INT 5
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_INT 4
67989: PUSH
67990: LD_INT 5
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: LD_INT 3
67999: PUSH
68000: LD_INT 4
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 3
68009: PUSH
68010: LD_INT 3
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 5
68019: PUSH
68020: LD_INT 3
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 3
68029: PUSH
68030: LD_INT 5
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 0
68039: PUSH
68040: LD_INT 3
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 0
68049: PUSH
68050: LD_INT 2
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 1
68059: PUSH
68060: LD_INT 3
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 1
68069: PUSH
68070: LD_INT 4
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 0
68079: PUSH
68080: LD_INT 4
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 1
68089: NEG
68090: PUSH
68091: LD_INT 3
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 1
68100: NEG
68101: PUSH
68102: LD_INT 2
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: LD_INT 2
68111: PUSH
68112: LD_INT 4
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: LD_INT 2
68121: NEG
68122: PUSH
68123: LD_INT 2
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 4
68132: NEG
68133: PUSH
68134: LD_INT 0
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PUSH
68141: LD_INT 4
68143: NEG
68144: PUSH
68145: LD_INT 1
68147: NEG
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 3
68155: NEG
68156: PUSH
68157: LD_INT 0
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 3
68166: NEG
68167: PUSH
68168: LD_INT 1
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 4
68177: NEG
68178: PUSH
68179: LD_INT 1
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 5
68188: NEG
68189: PUSH
68190: LD_INT 0
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: LD_INT 5
68199: NEG
68200: PUSH
68201: LD_INT 1
68203: NEG
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 5
68211: NEG
68212: PUSH
68213: LD_INT 2
68215: NEG
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 3
68223: NEG
68224: PUSH
68225: LD_INT 2
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: ST_TO_ADDR
// end ; end ;
68279: GO 68282
68281: POP
// case btype of b_depot , b_warehouse :
68282: LD_VAR 0 1
68286: PUSH
68287: LD_INT 0
68289: DOUBLE
68290: EQUAL
68291: IFTRUE 68301
68293: LD_INT 1
68295: DOUBLE
68296: EQUAL
68297: IFTRUE 68301
68299: GO 68502
68301: POP
// case nation of nation_american :
68302: LD_VAR 0 5
68306: PUSH
68307: LD_INT 1
68309: DOUBLE
68310: EQUAL
68311: IFTRUE 68315
68313: GO 68371
68315: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68316: LD_ADDR_VAR 0 9
68320: PUSH
68321: LD_VAR 0 11
68325: PUSH
68326: LD_VAR 0 12
68330: PUSH
68331: LD_VAR 0 13
68335: PUSH
68336: LD_VAR 0 14
68340: PUSH
68341: LD_VAR 0 15
68345: PUSH
68346: LD_VAR 0 16
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: PUSH
68359: LD_VAR 0 4
68363: PUSH
68364: LD_INT 1
68366: PLUS
68367: ARRAY
68368: ST_TO_ADDR
68369: GO 68500
68371: LD_INT 2
68373: DOUBLE
68374: EQUAL
68375: IFTRUE 68379
68377: GO 68435
68379: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68380: LD_ADDR_VAR 0 9
68384: PUSH
68385: LD_VAR 0 17
68389: PUSH
68390: LD_VAR 0 18
68394: PUSH
68395: LD_VAR 0 19
68399: PUSH
68400: LD_VAR 0 20
68404: PUSH
68405: LD_VAR 0 21
68409: PUSH
68410: LD_VAR 0 22
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: PUSH
68423: LD_VAR 0 4
68427: PUSH
68428: LD_INT 1
68430: PLUS
68431: ARRAY
68432: ST_TO_ADDR
68433: GO 68500
68435: LD_INT 3
68437: DOUBLE
68438: EQUAL
68439: IFTRUE 68443
68441: GO 68499
68443: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68444: LD_ADDR_VAR 0 9
68448: PUSH
68449: LD_VAR 0 23
68453: PUSH
68454: LD_VAR 0 24
68458: PUSH
68459: LD_VAR 0 25
68463: PUSH
68464: LD_VAR 0 26
68468: PUSH
68469: LD_VAR 0 27
68473: PUSH
68474: LD_VAR 0 28
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: PUSH
68487: LD_VAR 0 4
68491: PUSH
68492: LD_INT 1
68494: PLUS
68495: ARRAY
68496: ST_TO_ADDR
68497: GO 68500
68499: POP
68500: GO 69055
68502: LD_INT 2
68504: DOUBLE
68505: EQUAL
68506: IFTRUE 68516
68508: LD_INT 3
68510: DOUBLE
68511: EQUAL
68512: IFTRUE 68516
68514: GO 68572
68516: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68517: LD_ADDR_VAR 0 9
68521: PUSH
68522: LD_VAR 0 29
68526: PUSH
68527: LD_VAR 0 30
68531: PUSH
68532: LD_VAR 0 31
68536: PUSH
68537: LD_VAR 0 32
68541: PUSH
68542: LD_VAR 0 33
68546: PUSH
68547: LD_VAR 0 34
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: PUSH
68560: LD_VAR 0 4
68564: PUSH
68565: LD_INT 1
68567: PLUS
68568: ARRAY
68569: ST_TO_ADDR
68570: GO 69055
68572: LD_INT 16
68574: DOUBLE
68575: EQUAL
68576: IFTRUE 68634
68578: LD_INT 17
68580: DOUBLE
68581: EQUAL
68582: IFTRUE 68634
68584: LD_INT 18
68586: DOUBLE
68587: EQUAL
68588: IFTRUE 68634
68590: LD_INT 19
68592: DOUBLE
68593: EQUAL
68594: IFTRUE 68634
68596: LD_INT 22
68598: DOUBLE
68599: EQUAL
68600: IFTRUE 68634
68602: LD_INT 20
68604: DOUBLE
68605: EQUAL
68606: IFTRUE 68634
68608: LD_INT 21
68610: DOUBLE
68611: EQUAL
68612: IFTRUE 68634
68614: LD_INT 23
68616: DOUBLE
68617: EQUAL
68618: IFTRUE 68634
68620: LD_INT 24
68622: DOUBLE
68623: EQUAL
68624: IFTRUE 68634
68626: LD_INT 25
68628: DOUBLE
68629: EQUAL
68630: IFTRUE 68634
68632: GO 68690
68634: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68635: LD_ADDR_VAR 0 9
68639: PUSH
68640: LD_VAR 0 35
68644: PUSH
68645: LD_VAR 0 36
68649: PUSH
68650: LD_VAR 0 37
68654: PUSH
68655: LD_VAR 0 38
68659: PUSH
68660: LD_VAR 0 39
68664: PUSH
68665: LD_VAR 0 40
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: PUSH
68678: LD_VAR 0 4
68682: PUSH
68683: LD_INT 1
68685: PLUS
68686: ARRAY
68687: ST_TO_ADDR
68688: GO 69055
68690: LD_INT 6
68692: DOUBLE
68693: EQUAL
68694: IFTRUE 68746
68696: LD_INT 7
68698: DOUBLE
68699: EQUAL
68700: IFTRUE 68746
68702: LD_INT 8
68704: DOUBLE
68705: EQUAL
68706: IFTRUE 68746
68708: LD_INT 13
68710: DOUBLE
68711: EQUAL
68712: IFTRUE 68746
68714: LD_INT 12
68716: DOUBLE
68717: EQUAL
68718: IFTRUE 68746
68720: LD_INT 15
68722: DOUBLE
68723: EQUAL
68724: IFTRUE 68746
68726: LD_INT 11
68728: DOUBLE
68729: EQUAL
68730: IFTRUE 68746
68732: LD_INT 14
68734: DOUBLE
68735: EQUAL
68736: IFTRUE 68746
68738: LD_INT 10
68740: DOUBLE
68741: EQUAL
68742: IFTRUE 68746
68744: GO 68802
68746: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68747: LD_ADDR_VAR 0 9
68751: PUSH
68752: LD_VAR 0 41
68756: PUSH
68757: LD_VAR 0 42
68761: PUSH
68762: LD_VAR 0 43
68766: PUSH
68767: LD_VAR 0 44
68771: PUSH
68772: LD_VAR 0 45
68776: PUSH
68777: LD_VAR 0 46
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: LIST
68786: LIST
68787: LIST
68788: LIST
68789: PUSH
68790: LD_VAR 0 4
68794: PUSH
68795: LD_INT 1
68797: PLUS
68798: ARRAY
68799: ST_TO_ADDR
68800: GO 69055
68802: LD_INT 36
68804: DOUBLE
68805: EQUAL
68806: IFTRUE 68810
68808: GO 68866
68810: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68811: LD_ADDR_VAR 0 9
68815: PUSH
68816: LD_VAR 0 47
68820: PUSH
68821: LD_VAR 0 48
68825: PUSH
68826: LD_VAR 0 49
68830: PUSH
68831: LD_VAR 0 50
68835: PUSH
68836: LD_VAR 0 51
68840: PUSH
68841: LD_VAR 0 52
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: LIST
68850: LIST
68851: LIST
68852: LIST
68853: PUSH
68854: LD_VAR 0 4
68858: PUSH
68859: LD_INT 1
68861: PLUS
68862: ARRAY
68863: ST_TO_ADDR
68864: GO 69055
68866: LD_INT 4
68868: DOUBLE
68869: EQUAL
68870: IFTRUE 68892
68872: LD_INT 5
68874: DOUBLE
68875: EQUAL
68876: IFTRUE 68892
68878: LD_INT 34
68880: DOUBLE
68881: EQUAL
68882: IFTRUE 68892
68884: LD_INT 37
68886: DOUBLE
68887: EQUAL
68888: IFTRUE 68892
68890: GO 68948
68892: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68893: LD_ADDR_VAR 0 9
68897: PUSH
68898: LD_VAR 0 53
68902: PUSH
68903: LD_VAR 0 54
68907: PUSH
68908: LD_VAR 0 55
68912: PUSH
68913: LD_VAR 0 56
68917: PUSH
68918: LD_VAR 0 57
68922: PUSH
68923: LD_VAR 0 58
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: LIST
68932: LIST
68933: LIST
68934: LIST
68935: PUSH
68936: LD_VAR 0 4
68940: PUSH
68941: LD_INT 1
68943: PLUS
68944: ARRAY
68945: ST_TO_ADDR
68946: GO 69055
68948: LD_INT 31
68950: DOUBLE
68951: EQUAL
68952: IFTRUE 68998
68954: LD_INT 32
68956: DOUBLE
68957: EQUAL
68958: IFTRUE 68998
68960: LD_INT 33
68962: DOUBLE
68963: EQUAL
68964: IFTRUE 68998
68966: LD_INT 27
68968: DOUBLE
68969: EQUAL
68970: IFTRUE 68998
68972: LD_INT 26
68974: DOUBLE
68975: EQUAL
68976: IFTRUE 68998
68978: LD_INT 28
68980: DOUBLE
68981: EQUAL
68982: IFTRUE 68998
68984: LD_INT 29
68986: DOUBLE
68987: EQUAL
68988: IFTRUE 68998
68990: LD_INT 30
68992: DOUBLE
68993: EQUAL
68994: IFTRUE 68998
68996: GO 69054
68998: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68999: LD_ADDR_VAR 0 9
69003: PUSH
69004: LD_VAR 0 59
69008: PUSH
69009: LD_VAR 0 60
69013: PUSH
69014: LD_VAR 0 61
69018: PUSH
69019: LD_VAR 0 62
69023: PUSH
69024: LD_VAR 0 63
69028: PUSH
69029: LD_VAR 0 64
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: PUSH
69042: LD_VAR 0 4
69046: PUSH
69047: LD_INT 1
69049: PLUS
69050: ARRAY
69051: ST_TO_ADDR
69052: GO 69055
69054: POP
// temp_list2 = [ ] ;
69055: LD_ADDR_VAR 0 10
69059: PUSH
69060: EMPTY
69061: ST_TO_ADDR
// for i in temp_list do
69062: LD_ADDR_VAR 0 8
69066: PUSH
69067: LD_VAR 0 9
69071: PUSH
69072: FOR_IN
69073: IFFALSE 69125
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69075: LD_ADDR_VAR 0 10
69079: PUSH
69080: LD_VAR 0 10
69084: PUSH
69085: LD_VAR 0 8
69089: PUSH
69090: LD_INT 1
69092: ARRAY
69093: PUSH
69094: LD_VAR 0 2
69098: PLUS
69099: PUSH
69100: LD_VAR 0 8
69104: PUSH
69105: LD_INT 2
69107: ARRAY
69108: PUSH
69109: LD_VAR 0 3
69113: PLUS
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: PUSH
69119: EMPTY
69120: LIST
69121: ADD
69122: ST_TO_ADDR
69123: GO 69072
69125: POP
69126: POP
// result = temp_list2 ;
69127: LD_ADDR_VAR 0 7
69131: PUSH
69132: LD_VAR 0 10
69136: ST_TO_ADDR
// end ;
69137: LD_VAR 0 7
69141: RET
// export function EnemyInRange ( unit , dist ) ; begin
69142: LD_INT 0
69144: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69145: LD_ADDR_VAR 0 3
69149: PUSH
69150: LD_VAR 0 1
69154: PPUSH
69155: CALL_OW 255
69159: PPUSH
69160: LD_VAR 0 1
69164: PPUSH
69165: CALL_OW 250
69169: PPUSH
69170: LD_VAR 0 1
69174: PPUSH
69175: CALL_OW 251
69179: PPUSH
69180: LD_VAR 0 2
69184: PPUSH
69185: CALL 42544 0 4
69189: PUSH
69190: LD_INT 4
69192: ARRAY
69193: ST_TO_ADDR
// end ;
69194: LD_VAR 0 3
69198: RET
// export function PlayerSeeMe ( unit ) ; begin
69199: LD_INT 0
69201: PPUSH
// result := See ( your_side , unit ) ;
69202: LD_ADDR_VAR 0 2
69206: PUSH
69207: LD_OWVAR 2
69211: PPUSH
69212: LD_VAR 0 1
69216: PPUSH
69217: CALL_OW 292
69221: ST_TO_ADDR
// end ;
69222: LD_VAR 0 2
69226: RET
// export function ReverseDir ( unit ) ; begin
69227: LD_INT 0
69229: PPUSH
// if not unit then
69230: LD_VAR 0 1
69234: NOT
69235: IFFALSE 69239
// exit ;
69237: GO 69262
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69239: LD_ADDR_VAR 0 2
69243: PUSH
69244: LD_VAR 0 1
69248: PPUSH
69249: CALL_OW 254
69253: PUSH
69254: LD_INT 3
69256: PLUS
69257: PUSH
69258: LD_INT 6
69260: MOD
69261: ST_TO_ADDR
// end ;
69262: LD_VAR 0 2
69266: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
69267: LD_INT 0
69269: PPUSH
69270: PPUSH
69271: PPUSH
69272: PPUSH
69273: PPUSH
69274: PPUSH
// if not unit or not hexes then
69275: LD_VAR 0 1
69279: NOT
69280: PUSH
69281: LD_VAR 0 2
69285: NOT
69286: OR
69287: IFFALSE 69291
// exit ;
69289: GO 69414
// dist := 9999 ;
69291: LD_ADDR_VAR 0 5
69295: PUSH
69296: LD_INT 9999
69298: ST_TO_ADDR
// for i = 1 to hexes do
69299: LD_ADDR_VAR 0 4
69303: PUSH
69304: DOUBLE
69305: LD_INT 1
69307: DEC
69308: ST_TO_ADDR
69309: LD_VAR 0 2
69313: PUSH
69314: FOR_TO
69315: IFFALSE 69402
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69317: LD_ADDR_VAR 0 6
69321: PUSH
69322: LD_VAR 0 1
69326: PPUSH
69327: LD_VAR 0 2
69331: PUSH
69332: LD_VAR 0 4
69336: ARRAY
69337: PUSH
69338: LD_INT 1
69340: ARRAY
69341: PPUSH
69342: LD_VAR 0 2
69346: PUSH
69347: LD_VAR 0 4
69351: ARRAY
69352: PUSH
69353: LD_INT 2
69355: ARRAY
69356: PPUSH
69357: CALL_OW 297
69361: ST_TO_ADDR
// if tdist < dist then
69362: LD_VAR 0 6
69366: PUSH
69367: LD_VAR 0 5
69371: LESS
69372: IFFALSE 69400
// begin hex := hexes [ i ] ;
69374: LD_ADDR_VAR 0 8
69378: PUSH
69379: LD_VAR 0 2
69383: PUSH
69384: LD_VAR 0 4
69388: ARRAY
69389: ST_TO_ADDR
// dist := tdist ;
69390: LD_ADDR_VAR 0 5
69394: PUSH
69395: LD_VAR 0 6
69399: ST_TO_ADDR
// end ; end ;
69400: GO 69314
69402: POP
69403: POP
// result := hex ;
69404: LD_ADDR_VAR 0 3
69408: PUSH
69409: LD_VAR 0 8
69413: ST_TO_ADDR
// end ;
69414: LD_VAR 0 3
69418: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69419: LD_INT 0
69421: PPUSH
69422: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69423: LD_VAR 0 1
69427: NOT
69428: PUSH
69429: LD_VAR 0 1
69433: PUSH
69434: LD_INT 21
69436: PUSH
69437: LD_INT 2
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: PUSH
69444: LD_INT 23
69446: PUSH
69447: LD_INT 2
69449: PUSH
69450: EMPTY
69451: LIST
69452: LIST
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PPUSH
69458: CALL_OW 69
69462: IN
69463: NOT
69464: OR
69465: IFFALSE 69469
// exit ;
69467: GO 69516
// for i = 1 to 3 do
69469: LD_ADDR_VAR 0 3
69473: PUSH
69474: DOUBLE
69475: LD_INT 1
69477: DEC
69478: ST_TO_ADDR
69479: LD_INT 3
69481: PUSH
69482: FOR_TO
69483: IFFALSE 69514
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69485: LD_VAR 0 1
69489: PPUSH
69490: CALL_OW 250
69494: PPUSH
69495: LD_VAR 0 1
69499: PPUSH
69500: CALL_OW 251
69504: PPUSH
69505: LD_INT 1
69507: PPUSH
69508: CALL_OW 453
69512: GO 69482
69514: POP
69515: POP
// end ;
69516: LD_VAR 0 2
69520: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69521: LD_INT 0
69523: PPUSH
69524: PPUSH
69525: PPUSH
69526: PPUSH
69527: PPUSH
69528: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69529: LD_VAR 0 1
69533: NOT
69534: PUSH
69535: LD_VAR 0 2
69539: NOT
69540: OR
69541: PUSH
69542: LD_VAR 0 1
69546: PPUSH
69547: CALL_OW 314
69551: OR
69552: IFFALSE 69556
// exit ;
69554: GO 69997
// x := GetX ( enemy_unit ) ;
69556: LD_ADDR_VAR 0 7
69560: PUSH
69561: LD_VAR 0 2
69565: PPUSH
69566: CALL_OW 250
69570: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69571: LD_ADDR_VAR 0 8
69575: PUSH
69576: LD_VAR 0 2
69580: PPUSH
69581: CALL_OW 251
69585: ST_TO_ADDR
// if not x or not y then
69586: LD_VAR 0 7
69590: NOT
69591: PUSH
69592: LD_VAR 0 8
69596: NOT
69597: OR
69598: IFFALSE 69602
// exit ;
69600: GO 69997
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69602: LD_ADDR_VAR 0 6
69606: PUSH
69607: LD_VAR 0 7
69611: PPUSH
69612: LD_INT 0
69614: PPUSH
69615: LD_INT 4
69617: PPUSH
69618: CALL_OW 272
69622: PUSH
69623: LD_VAR 0 8
69627: PPUSH
69628: LD_INT 0
69630: PPUSH
69631: LD_INT 4
69633: PPUSH
69634: CALL_OW 273
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PUSH
69643: LD_VAR 0 7
69647: PPUSH
69648: LD_INT 1
69650: PPUSH
69651: LD_INT 4
69653: PPUSH
69654: CALL_OW 272
69658: PUSH
69659: LD_VAR 0 8
69663: PPUSH
69664: LD_INT 1
69666: PPUSH
69667: LD_INT 4
69669: PPUSH
69670: CALL_OW 273
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PUSH
69679: LD_VAR 0 7
69683: PPUSH
69684: LD_INT 2
69686: PPUSH
69687: LD_INT 4
69689: PPUSH
69690: CALL_OW 272
69694: PUSH
69695: LD_VAR 0 8
69699: PPUSH
69700: LD_INT 2
69702: PPUSH
69703: LD_INT 4
69705: PPUSH
69706: CALL_OW 273
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: PUSH
69715: LD_VAR 0 7
69719: PPUSH
69720: LD_INT 3
69722: PPUSH
69723: LD_INT 4
69725: PPUSH
69726: CALL_OW 272
69730: PUSH
69731: LD_VAR 0 8
69735: PPUSH
69736: LD_INT 3
69738: PPUSH
69739: LD_INT 4
69741: PPUSH
69742: CALL_OW 273
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: PUSH
69751: LD_VAR 0 7
69755: PPUSH
69756: LD_INT 4
69758: PPUSH
69759: LD_INT 4
69761: PPUSH
69762: CALL_OW 272
69766: PUSH
69767: LD_VAR 0 8
69771: PPUSH
69772: LD_INT 4
69774: PPUSH
69775: LD_INT 4
69777: PPUSH
69778: CALL_OW 273
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: PUSH
69787: LD_VAR 0 7
69791: PPUSH
69792: LD_INT 5
69794: PPUSH
69795: LD_INT 4
69797: PPUSH
69798: CALL_OW 272
69802: PUSH
69803: LD_VAR 0 8
69807: PPUSH
69808: LD_INT 5
69810: PPUSH
69811: LD_INT 4
69813: PPUSH
69814: CALL_OW 273
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: LIST
69830: ST_TO_ADDR
// for i = tmp downto 1 do
69831: LD_ADDR_VAR 0 4
69835: PUSH
69836: DOUBLE
69837: LD_VAR 0 6
69841: INC
69842: ST_TO_ADDR
69843: LD_INT 1
69845: PUSH
69846: FOR_DOWNTO
69847: IFFALSE 69948
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69849: LD_VAR 0 6
69853: PUSH
69854: LD_VAR 0 4
69858: ARRAY
69859: PUSH
69860: LD_INT 1
69862: ARRAY
69863: PPUSH
69864: LD_VAR 0 6
69868: PUSH
69869: LD_VAR 0 4
69873: ARRAY
69874: PUSH
69875: LD_INT 2
69877: ARRAY
69878: PPUSH
69879: CALL_OW 488
69883: NOT
69884: PUSH
69885: LD_VAR 0 6
69889: PUSH
69890: LD_VAR 0 4
69894: ARRAY
69895: PUSH
69896: LD_INT 1
69898: ARRAY
69899: PPUSH
69900: LD_VAR 0 6
69904: PUSH
69905: LD_VAR 0 4
69909: ARRAY
69910: PUSH
69911: LD_INT 2
69913: ARRAY
69914: PPUSH
69915: CALL_OW 428
69919: PUSH
69920: LD_INT 0
69922: NONEQUAL
69923: OR
69924: IFFALSE 69946
// tmp := Delete ( tmp , i ) ;
69926: LD_ADDR_VAR 0 6
69930: PUSH
69931: LD_VAR 0 6
69935: PPUSH
69936: LD_VAR 0 4
69940: PPUSH
69941: CALL_OW 3
69945: ST_TO_ADDR
69946: GO 69846
69948: POP
69949: POP
// j := GetClosestHex ( unit , tmp ) ;
69950: LD_ADDR_VAR 0 5
69954: PUSH
69955: LD_VAR 0 1
69959: PPUSH
69960: LD_VAR 0 6
69964: PPUSH
69965: CALL 69267 0 2
69969: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69970: LD_VAR 0 1
69974: PPUSH
69975: LD_VAR 0 5
69979: PUSH
69980: LD_INT 1
69982: ARRAY
69983: PPUSH
69984: LD_VAR 0 5
69988: PUSH
69989: LD_INT 2
69991: ARRAY
69992: PPUSH
69993: CALL_OW 111
// end ;
69997: LD_VAR 0 3
70001: RET
// export function PrepareApemanSoldier ( ) ; begin
70002: LD_INT 0
70004: PPUSH
// uc_nation := 0 ;
70005: LD_ADDR_OWVAR 21
70009: PUSH
70010: LD_INT 0
70012: ST_TO_ADDR
// hc_sex := sex_male ;
70013: LD_ADDR_OWVAR 27
70017: PUSH
70018: LD_INT 1
70020: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
70021: LD_ADDR_OWVAR 28
70025: PUSH
70026: LD_INT 15
70028: ST_TO_ADDR
// hc_gallery :=  ;
70029: LD_ADDR_OWVAR 33
70033: PUSH
70034: LD_STRING 
70036: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70037: LD_ADDR_OWVAR 31
70041: PUSH
70042: LD_INT 0
70044: PPUSH
70045: LD_INT 3
70047: PPUSH
70048: CALL_OW 12
70052: PUSH
70053: LD_INT 0
70055: PPUSH
70056: LD_INT 3
70058: PPUSH
70059: CALL_OW 12
70063: PUSH
70064: LD_INT 0
70066: PUSH
70067: LD_INT 0
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: ST_TO_ADDR
// end ;
70076: LD_VAR 0 1
70080: RET
// export function PrepareApemanEngineer ( ) ; begin
70081: LD_INT 0
70083: PPUSH
// uc_nation := 0 ;
70084: LD_ADDR_OWVAR 21
70088: PUSH
70089: LD_INT 0
70091: ST_TO_ADDR
// hc_sex := sex_male ;
70092: LD_ADDR_OWVAR 27
70096: PUSH
70097: LD_INT 1
70099: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
70100: LD_ADDR_OWVAR 28
70104: PUSH
70105: LD_INT 16
70107: ST_TO_ADDR
// hc_gallery :=  ;
70108: LD_ADDR_OWVAR 33
70112: PUSH
70113: LD_STRING 
70115: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70116: LD_ADDR_OWVAR 31
70120: PUSH
70121: LD_INT 0
70123: PPUSH
70124: LD_INT 3
70126: PPUSH
70127: CALL_OW 12
70131: PUSH
70132: LD_INT 0
70134: PPUSH
70135: LD_INT 3
70137: PPUSH
70138: CALL_OW 12
70142: PUSH
70143: LD_INT 0
70145: PUSH
70146: LD_INT 0
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: LIST
70153: LIST
70154: ST_TO_ADDR
// end ;
70155: LD_VAR 0 1
70159: RET
// export function PrepareApeman ( agressivity ) ; begin
70160: LD_INT 0
70162: PPUSH
// uc_side := 0 ;
70163: LD_ADDR_OWVAR 20
70167: PUSH
70168: LD_INT 0
70170: ST_TO_ADDR
// uc_nation := 0 ;
70171: LD_ADDR_OWVAR 21
70175: PUSH
70176: LD_INT 0
70178: ST_TO_ADDR
// hc_sex := sex_male ;
70179: LD_ADDR_OWVAR 27
70183: PUSH
70184: LD_INT 1
70186: ST_TO_ADDR
// hc_class := class_apeman ;
70187: LD_ADDR_OWVAR 28
70191: PUSH
70192: LD_INT 12
70194: ST_TO_ADDR
// hc_gallery :=  ;
70195: LD_ADDR_OWVAR 33
70199: PUSH
70200: LD_STRING 
70202: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70203: LD_ADDR_OWVAR 35
70207: PUSH
70208: LD_VAR 0 1
70212: NEG
70213: PPUSH
70214: LD_VAR 0 1
70218: PPUSH
70219: CALL_OW 12
70223: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70224: LD_ADDR_OWVAR 31
70228: PUSH
70229: LD_INT 0
70231: PPUSH
70232: LD_INT 3
70234: PPUSH
70235: CALL_OW 12
70239: PUSH
70240: LD_INT 0
70242: PPUSH
70243: LD_INT 3
70245: PPUSH
70246: CALL_OW 12
70250: PUSH
70251: LD_INT 0
70253: PUSH
70254: LD_INT 0
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: LIST
70261: LIST
70262: ST_TO_ADDR
// end ;
70263: LD_VAR 0 2
70267: RET
// export function PrepareTiger ( agressivity ) ; begin
70268: LD_INT 0
70270: PPUSH
// uc_side := 0 ;
70271: LD_ADDR_OWVAR 20
70275: PUSH
70276: LD_INT 0
70278: ST_TO_ADDR
// uc_nation := 0 ;
70279: LD_ADDR_OWVAR 21
70283: PUSH
70284: LD_INT 0
70286: ST_TO_ADDR
// hc_class := class_tiger ;
70287: LD_ADDR_OWVAR 28
70291: PUSH
70292: LD_INT 14
70294: ST_TO_ADDR
// hc_gallery :=  ;
70295: LD_ADDR_OWVAR 33
70299: PUSH
70300: LD_STRING 
70302: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70303: LD_ADDR_OWVAR 35
70307: PUSH
70308: LD_VAR 0 1
70312: NEG
70313: PPUSH
70314: LD_VAR 0 1
70318: PPUSH
70319: CALL_OW 12
70323: ST_TO_ADDR
// end ;
70324: LD_VAR 0 2
70328: RET
// export function PrepareEnchidna ( ) ; begin
70329: LD_INT 0
70331: PPUSH
// uc_side := 0 ;
70332: LD_ADDR_OWVAR 20
70336: PUSH
70337: LD_INT 0
70339: ST_TO_ADDR
// uc_nation := 0 ;
70340: LD_ADDR_OWVAR 21
70344: PUSH
70345: LD_INT 0
70347: ST_TO_ADDR
// hc_class := class_baggie ;
70348: LD_ADDR_OWVAR 28
70352: PUSH
70353: LD_INT 13
70355: ST_TO_ADDR
// hc_gallery :=  ;
70356: LD_ADDR_OWVAR 33
70360: PUSH
70361: LD_STRING 
70363: ST_TO_ADDR
// end ;
70364: LD_VAR 0 1
70368: RET
// export function PrepareFrog ( ) ; begin
70369: LD_INT 0
70371: PPUSH
// uc_side := 0 ;
70372: LD_ADDR_OWVAR 20
70376: PUSH
70377: LD_INT 0
70379: ST_TO_ADDR
// uc_nation := 0 ;
70380: LD_ADDR_OWVAR 21
70384: PUSH
70385: LD_INT 0
70387: ST_TO_ADDR
// hc_class := class_frog ;
70388: LD_ADDR_OWVAR 28
70392: PUSH
70393: LD_INT 19
70395: ST_TO_ADDR
// hc_gallery :=  ;
70396: LD_ADDR_OWVAR 33
70400: PUSH
70401: LD_STRING 
70403: ST_TO_ADDR
// end ;
70404: LD_VAR 0 1
70408: RET
// export function PrepareFish ( ) ; begin
70409: LD_INT 0
70411: PPUSH
// uc_side := 0 ;
70412: LD_ADDR_OWVAR 20
70416: PUSH
70417: LD_INT 0
70419: ST_TO_ADDR
// uc_nation := 0 ;
70420: LD_ADDR_OWVAR 21
70424: PUSH
70425: LD_INT 0
70427: ST_TO_ADDR
// hc_class := class_fish ;
70428: LD_ADDR_OWVAR 28
70432: PUSH
70433: LD_INT 20
70435: ST_TO_ADDR
// hc_gallery :=  ;
70436: LD_ADDR_OWVAR 33
70440: PUSH
70441: LD_STRING 
70443: ST_TO_ADDR
// end ;
70444: LD_VAR 0 1
70448: RET
// export function PrepareBird ( ) ; begin
70449: LD_INT 0
70451: PPUSH
// uc_side := 0 ;
70452: LD_ADDR_OWVAR 20
70456: PUSH
70457: LD_INT 0
70459: ST_TO_ADDR
// uc_nation := 0 ;
70460: LD_ADDR_OWVAR 21
70464: PUSH
70465: LD_INT 0
70467: ST_TO_ADDR
// hc_class := class_phororhacos ;
70468: LD_ADDR_OWVAR 28
70472: PUSH
70473: LD_INT 18
70475: ST_TO_ADDR
// hc_gallery :=  ;
70476: LD_ADDR_OWVAR 33
70480: PUSH
70481: LD_STRING 
70483: ST_TO_ADDR
// end ;
70484: LD_VAR 0 1
70488: RET
// export function PrepareHorse ( ) ; begin
70489: LD_INT 0
70491: PPUSH
// uc_side := 0 ;
70492: LD_ADDR_OWVAR 20
70496: PUSH
70497: LD_INT 0
70499: ST_TO_ADDR
// uc_nation := 0 ;
70500: LD_ADDR_OWVAR 21
70504: PUSH
70505: LD_INT 0
70507: ST_TO_ADDR
// hc_class := class_horse ;
70508: LD_ADDR_OWVAR 28
70512: PUSH
70513: LD_INT 21
70515: ST_TO_ADDR
// hc_gallery :=  ;
70516: LD_ADDR_OWVAR 33
70520: PUSH
70521: LD_STRING 
70523: ST_TO_ADDR
// end ;
70524: LD_VAR 0 1
70528: RET
// export function PrepareMastodont ( ) ; begin
70529: LD_INT 0
70531: PPUSH
// uc_side := 0 ;
70532: LD_ADDR_OWVAR 20
70536: PUSH
70537: LD_INT 0
70539: ST_TO_ADDR
// uc_nation := 0 ;
70540: LD_ADDR_OWVAR 21
70544: PUSH
70545: LD_INT 0
70547: ST_TO_ADDR
// vc_chassis := class_mastodont ;
70548: LD_ADDR_OWVAR 37
70552: PUSH
70553: LD_INT 31
70555: ST_TO_ADDR
// vc_control := control_rider ;
70556: LD_ADDR_OWVAR 38
70560: PUSH
70561: LD_INT 4
70563: ST_TO_ADDR
// end ;
70564: LD_VAR 0 1
70568: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70569: LD_INT 0
70571: PPUSH
70572: PPUSH
70573: PPUSH
// uc_side = 0 ;
70574: LD_ADDR_OWVAR 20
70578: PUSH
70579: LD_INT 0
70581: ST_TO_ADDR
// uc_nation = 0 ;
70582: LD_ADDR_OWVAR 21
70586: PUSH
70587: LD_INT 0
70589: ST_TO_ADDR
// InitHc_All ( ) ;
70590: CALL_OW 584
// InitVc ;
70594: CALL_OW 20
// if mastodonts then
70598: LD_VAR 0 6
70602: IFFALSE 70669
// for i = 1 to mastodonts do
70604: LD_ADDR_VAR 0 11
70608: PUSH
70609: DOUBLE
70610: LD_INT 1
70612: DEC
70613: ST_TO_ADDR
70614: LD_VAR 0 6
70618: PUSH
70619: FOR_TO
70620: IFFALSE 70667
// begin vc_chassis := 31 ;
70622: LD_ADDR_OWVAR 37
70626: PUSH
70627: LD_INT 31
70629: ST_TO_ADDR
// vc_control := control_rider ;
70630: LD_ADDR_OWVAR 38
70634: PUSH
70635: LD_INT 4
70637: ST_TO_ADDR
// animal := CreateVehicle ;
70638: LD_ADDR_VAR 0 12
70642: PUSH
70643: CALL_OW 45
70647: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70648: LD_VAR 0 12
70652: PPUSH
70653: LD_VAR 0 8
70657: PPUSH
70658: LD_INT 0
70660: PPUSH
70661: CALL 72804 0 3
// end ;
70665: GO 70619
70667: POP
70668: POP
// if horses then
70669: LD_VAR 0 5
70673: IFFALSE 70740
// for i = 1 to horses do
70675: LD_ADDR_VAR 0 11
70679: PUSH
70680: DOUBLE
70681: LD_INT 1
70683: DEC
70684: ST_TO_ADDR
70685: LD_VAR 0 5
70689: PUSH
70690: FOR_TO
70691: IFFALSE 70738
// begin hc_class := 21 ;
70693: LD_ADDR_OWVAR 28
70697: PUSH
70698: LD_INT 21
70700: ST_TO_ADDR
// hc_gallery :=  ;
70701: LD_ADDR_OWVAR 33
70705: PUSH
70706: LD_STRING 
70708: ST_TO_ADDR
// animal := CreateHuman ;
70709: LD_ADDR_VAR 0 12
70713: PUSH
70714: CALL_OW 44
70718: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70719: LD_VAR 0 12
70723: PPUSH
70724: LD_VAR 0 8
70728: PPUSH
70729: LD_INT 0
70731: PPUSH
70732: CALL 72804 0 3
// end ;
70736: GO 70690
70738: POP
70739: POP
// if birds then
70740: LD_VAR 0 1
70744: IFFALSE 70811
// for i = 1 to birds do
70746: LD_ADDR_VAR 0 11
70750: PUSH
70751: DOUBLE
70752: LD_INT 1
70754: DEC
70755: ST_TO_ADDR
70756: LD_VAR 0 1
70760: PUSH
70761: FOR_TO
70762: IFFALSE 70809
// begin hc_class = 18 ;
70764: LD_ADDR_OWVAR 28
70768: PUSH
70769: LD_INT 18
70771: ST_TO_ADDR
// hc_gallery =  ;
70772: LD_ADDR_OWVAR 33
70776: PUSH
70777: LD_STRING 
70779: ST_TO_ADDR
// animal := CreateHuman ;
70780: LD_ADDR_VAR 0 12
70784: PUSH
70785: CALL_OW 44
70789: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70790: LD_VAR 0 12
70794: PPUSH
70795: LD_VAR 0 8
70799: PPUSH
70800: LD_INT 0
70802: PPUSH
70803: CALL 72804 0 3
// end ;
70807: GO 70761
70809: POP
70810: POP
// if tigers then
70811: LD_VAR 0 2
70815: IFFALSE 70899
// for i = 1 to tigers do
70817: LD_ADDR_VAR 0 11
70821: PUSH
70822: DOUBLE
70823: LD_INT 1
70825: DEC
70826: ST_TO_ADDR
70827: LD_VAR 0 2
70831: PUSH
70832: FOR_TO
70833: IFFALSE 70897
// begin hc_class = class_tiger ;
70835: LD_ADDR_OWVAR 28
70839: PUSH
70840: LD_INT 14
70842: ST_TO_ADDR
// hc_gallery =  ;
70843: LD_ADDR_OWVAR 33
70847: PUSH
70848: LD_STRING 
70850: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70851: LD_ADDR_OWVAR 35
70855: PUSH
70856: LD_INT 7
70858: NEG
70859: PPUSH
70860: LD_INT 7
70862: PPUSH
70863: CALL_OW 12
70867: ST_TO_ADDR
// animal := CreateHuman ;
70868: LD_ADDR_VAR 0 12
70872: PUSH
70873: CALL_OW 44
70877: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70878: LD_VAR 0 12
70882: PPUSH
70883: LD_VAR 0 8
70887: PPUSH
70888: LD_INT 0
70890: PPUSH
70891: CALL 72804 0 3
// end ;
70895: GO 70832
70897: POP
70898: POP
// if apemans then
70899: LD_VAR 0 3
70903: IFFALSE 71026
// for i = 1 to apemans do
70905: LD_ADDR_VAR 0 11
70909: PUSH
70910: DOUBLE
70911: LD_INT 1
70913: DEC
70914: ST_TO_ADDR
70915: LD_VAR 0 3
70919: PUSH
70920: FOR_TO
70921: IFFALSE 71024
// begin hc_class = class_apeman ;
70923: LD_ADDR_OWVAR 28
70927: PUSH
70928: LD_INT 12
70930: ST_TO_ADDR
// hc_gallery =  ;
70931: LD_ADDR_OWVAR 33
70935: PUSH
70936: LD_STRING 
70938: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70939: LD_ADDR_OWVAR 35
70943: PUSH
70944: LD_INT 2
70946: NEG
70947: PPUSH
70948: LD_INT 2
70950: PPUSH
70951: CALL_OW 12
70955: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70956: LD_ADDR_OWVAR 31
70960: PUSH
70961: LD_INT 1
70963: PPUSH
70964: LD_INT 3
70966: PPUSH
70967: CALL_OW 12
70971: PUSH
70972: LD_INT 1
70974: PPUSH
70975: LD_INT 3
70977: PPUSH
70978: CALL_OW 12
70982: PUSH
70983: LD_INT 0
70985: PUSH
70986: LD_INT 0
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: LIST
70993: LIST
70994: ST_TO_ADDR
// animal := CreateHuman ;
70995: LD_ADDR_VAR 0 12
70999: PUSH
71000: CALL_OW 44
71004: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71005: LD_VAR 0 12
71009: PPUSH
71010: LD_VAR 0 8
71014: PPUSH
71015: LD_INT 0
71017: PPUSH
71018: CALL 72804 0 3
// end ;
71022: GO 70920
71024: POP
71025: POP
// if enchidnas then
71026: LD_VAR 0 4
71030: IFFALSE 71097
// for i = 1 to enchidnas do
71032: LD_ADDR_VAR 0 11
71036: PUSH
71037: DOUBLE
71038: LD_INT 1
71040: DEC
71041: ST_TO_ADDR
71042: LD_VAR 0 4
71046: PUSH
71047: FOR_TO
71048: IFFALSE 71095
// begin hc_class = 13 ;
71050: LD_ADDR_OWVAR 28
71054: PUSH
71055: LD_INT 13
71057: ST_TO_ADDR
// hc_gallery =  ;
71058: LD_ADDR_OWVAR 33
71062: PUSH
71063: LD_STRING 
71065: ST_TO_ADDR
// animal := CreateHuman ;
71066: LD_ADDR_VAR 0 12
71070: PUSH
71071: CALL_OW 44
71075: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71076: LD_VAR 0 12
71080: PPUSH
71081: LD_VAR 0 8
71085: PPUSH
71086: LD_INT 0
71088: PPUSH
71089: CALL 72804 0 3
// end ;
71093: GO 71047
71095: POP
71096: POP
// if fishes then
71097: LD_VAR 0 7
71101: IFFALSE 71168
// for i = 1 to fishes do
71103: LD_ADDR_VAR 0 11
71107: PUSH
71108: DOUBLE
71109: LD_INT 1
71111: DEC
71112: ST_TO_ADDR
71113: LD_VAR 0 7
71117: PUSH
71118: FOR_TO
71119: IFFALSE 71166
// begin hc_class = 20 ;
71121: LD_ADDR_OWVAR 28
71125: PUSH
71126: LD_INT 20
71128: ST_TO_ADDR
// hc_gallery =  ;
71129: LD_ADDR_OWVAR 33
71133: PUSH
71134: LD_STRING 
71136: ST_TO_ADDR
// animal := CreateHuman ;
71137: LD_ADDR_VAR 0 12
71141: PUSH
71142: CALL_OW 44
71146: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71147: LD_VAR 0 12
71151: PPUSH
71152: LD_VAR 0 9
71156: PPUSH
71157: LD_INT 0
71159: PPUSH
71160: CALL 72804 0 3
// end ;
71164: GO 71118
71166: POP
71167: POP
// end ;
71168: LD_VAR 0 10
71172: RET
// export function WantHeal ( sci , unit ) ; begin
71173: LD_INT 0
71175: PPUSH
// if GetTaskList ( sci ) > 0 then
71176: LD_VAR 0 1
71180: PPUSH
71181: CALL_OW 437
71185: PUSH
71186: LD_INT 0
71188: GREATER
71189: IFFALSE 71259
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71191: LD_VAR 0 1
71195: PPUSH
71196: CALL_OW 437
71200: PUSH
71201: LD_INT 1
71203: ARRAY
71204: PUSH
71205: LD_INT 1
71207: ARRAY
71208: PUSH
71209: LD_STRING l
71211: EQUAL
71212: PUSH
71213: LD_VAR 0 1
71217: PPUSH
71218: CALL_OW 437
71222: PUSH
71223: LD_INT 1
71225: ARRAY
71226: PUSH
71227: LD_INT 4
71229: ARRAY
71230: PUSH
71231: LD_VAR 0 2
71235: EQUAL
71236: AND
71237: IFFALSE 71249
// result := true else
71239: LD_ADDR_VAR 0 3
71243: PUSH
71244: LD_INT 1
71246: ST_TO_ADDR
71247: GO 71257
// result := false ;
71249: LD_ADDR_VAR 0 3
71253: PUSH
71254: LD_INT 0
71256: ST_TO_ADDR
// end else
71257: GO 71267
// result := false ;
71259: LD_ADDR_VAR 0 3
71263: PUSH
71264: LD_INT 0
71266: ST_TO_ADDR
// end ;
71267: LD_VAR 0 3
71271: RET
// export function HealTarget ( sci ) ; begin
71272: LD_INT 0
71274: PPUSH
// if not sci then
71275: LD_VAR 0 1
71279: NOT
71280: IFFALSE 71284
// exit ;
71282: GO 71349
// result := 0 ;
71284: LD_ADDR_VAR 0 2
71288: PUSH
71289: LD_INT 0
71291: ST_TO_ADDR
// if GetTaskList ( sci ) then
71292: LD_VAR 0 1
71296: PPUSH
71297: CALL_OW 437
71301: IFFALSE 71349
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71303: LD_VAR 0 1
71307: PPUSH
71308: CALL_OW 437
71312: PUSH
71313: LD_INT 1
71315: ARRAY
71316: PUSH
71317: LD_INT 1
71319: ARRAY
71320: PUSH
71321: LD_STRING l
71323: EQUAL
71324: IFFALSE 71349
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71326: LD_ADDR_VAR 0 2
71330: PUSH
71331: LD_VAR 0 1
71335: PPUSH
71336: CALL_OW 437
71340: PUSH
71341: LD_INT 1
71343: ARRAY
71344: PUSH
71345: LD_INT 4
71347: ARRAY
71348: ST_TO_ADDR
// end ;
71349: LD_VAR 0 2
71353: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71354: LD_INT 0
71356: PPUSH
71357: PPUSH
71358: PPUSH
71359: PPUSH
// if not base_units then
71360: LD_VAR 0 1
71364: NOT
71365: IFFALSE 71369
// exit ;
71367: GO 71456
// result := false ;
71369: LD_ADDR_VAR 0 2
71373: PUSH
71374: LD_INT 0
71376: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71377: LD_ADDR_VAR 0 5
71381: PUSH
71382: LD_VAR 0 1
71386: PPUSH
71387: LD_INT 21
71389: PUSH
71390: LD_INT 3
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: PPUSH
71397: CALL_OW 72
71401: ST_TO_ADDR
// if not tmp then
71402: LD_VAR 0 5
71406: NOT
71407: IFFALSE 71411
// exit ;
71409: GO 71456
// for i in tmp do
71411: LD_ADDR_VAR 0 3
71415: PUSH
71416: LD_VAR 0 5
71420: PUSH
71421: FOR_IN
71422: IFFALSE 71454
// begin result := EnemyInRange ( i , 22 ) ;
71424: LD_ADDR_VAR 0 2
71428: PUSH
71429: LD_VAR 0 3
71433: PPUSH
71434: LD_INT 22
71436: PPUSH
71437: CALL 69142 0 2
71441: ST_TO_ADDR
// if result then
71442: LD_VAR 0 2
71446: IFFALSE 71452
// exit ;
71448: POP
71449: POP
71450: GO 71456
// end ;
71452: GO 71421
71454: POP
71455: POP
// end ;
71456: LD_VAR 0 2
71460: RET
// export function FilterByTag ( units , tag ) ; begin
71461: LD_INT 0
71463: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
71464: LD_ADDR_VAR 0 3
71468: PUSH
71469: LD_VAR 0 1
71473: PPUSH
71474: LD_INT 120
71476: PUSH
71477: LD_VAR 0 2
71481: PUSH
71482: EMPTY
71483: LIST
71484: LIST
71485: PPUSH
71486: CALL_OW 72
71490: ST_TO_ADDR
// end ;
71491: LD_VAR 0 3
71495: RET
// export function IsDriver ( un ) ; begin
71496: LD_INT 0
71498: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71499: LD_ADDR_VAR 0 2
71503: PUSH
71504: LD_VAR 0 1
71508: PUSH
71509: LD_INT 55
71511: PUSH
71512: EMPTY
71513: LIST
71514: PPUSH
71515: CALL_OW 69
71519: IN
71520: ST_TO_ADDR
// end ;
71521: LD_VAR 0 2
71525: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71526: LD_INT 0
71528: PPUSH
71529: PPUSH
// list := [ ] ;
71530: LD_ADDR_VAR 0 5
71534: PUSH
71535: EMPTY
71536: ST_TO_ADDR
// case d of 0 :
71537: LD_VAR 0 3
71541: PUSH
71542: LD_INT 0
71544: DOUBLE
71545: EQUAL
71546: IFTRUE 71550
71548: GO 71683
71550: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71551: LD_ADDR_VAR 0 5
71555: PUSH
71556: LD_VAR 0 1
71560: PUSH
71561: LD_INT 4
71563: MINUS
71564: PUSH
71565: LD_VAR 0 2
71569: PUSH
71570: LD_INT 4
71572: MINUS
71573: PUSH
71574: LD_INT 2
71576: PUSH
71577: EMPTY
71578: LIST
71579: LIST
71580: LIST
71581: PUSH
71582: LD_VAR 0 1
71586: PUSH
71587: LD_INT 3
71589: MINUS
71590: PUSH
71591: LD_VAR 0 2
71595: PUSH
71596: LD_INT 1
71598: PUSH
71599: EMPTY
71600: LIST
71601: LIST
71602: LIST
71603: PUSH
71604: LD_VAR 0 1
71608: PUSH
71609: LD_INT 4
71611: PLUS
71612: PUSH
71613: LD_VAR 0 2
71617: PUSH
71618: LD_INT 4
71620: PUSH
71621: EMPTY
71622: LIST
71623: LIST
71624: LIST
71625: PUSH
71626: LD_VAR 0 1
71630: PUSH
71631: LD_INT 3
71633: PLUS
71634: PUSH
71635: LD_VAR 0 2
71639: PUSH
71640: LD_INT 3
71642: PLUS
71643: PUSH
71644: LD_INT 5
71646: PUSH
71647: EMPTY
71648: LIST
71649: LIST
71650: LIST
71651: PUSH
71652: LD_VAR 0 1
71656: PUSH
71657: LD_VAR 0 2
71661: PUSH
71662: LD_INT 4
71664: PLUS
71665: PUSH
71666: LD_INT 0
71668: PUSH
71669: EMPTY
71670: LIST
71671: LIST
71672: LIST
71673: PUSH
71674: EMPTY
71675: LIST
71676: LIST
71677: LIST
71678: LIST
71679: LIST
71680: ST_TO_ADDR
// end ; 1 :
71681: GO 72381
71683: LD_INT 1
71685: DOUBLE
71686: EQUAL
71687: IFTRUE 71691
71689: GO 71824
71691: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71692: LD_ADDR_VAR 0 5
71696: PUSH
71697: LD_VAR 0 1
71701: PUSH
71702: LD_VAR 0 2
71706: PUSH
71707: LD_INT 4
71709: MINUS
71710: PUSH
71711: LD_INT 3
71713: PUSH
71714: EMPTY
71715: LIST
71716: LIST
71717: LIST
71718: PUSH
71719: LD_VAR 0 1
71723: PUSH
71724: LD_INT 3
71726: MINUS
71727: PUSH
71728: LD_VAR 0 2
71732: PUSH
71733: LD_INT 3
71735: MINUS
71736: PUSH
71737: LD_INT 2
71739: PUSH
71740: EMPTY
71741: LIST
71742: LIST
71743: LIST
71744: PUSH
71745: LD_VAR 0 1
71749: PUSH
71750: LD_INT 4
71752: MINUS
71753: PUSH
71754: LD_VAR 0 2
71758: PUSH
71759: LD_INT 1
71761: PUSH
71762: EMPTY
71763: LIST
71764: LIST
71765: LIST
71766: PUSH
71767: LD_VAR 0 1
71771: PUSH
71772: LD_VAR 0 2
71776: PUSH
71777: LD_INT 3
71779: PLUS
71780: PUSH
71781: LD_INT 0
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: LIST
71788: PUSH
71789: LD_VAR 0 1
71793: PUSH
71794: LD_INT 4
71796: PLUS
71797: PUSH
71798: LD_VAR 0 2
71802: PUSH
71803: LD_INT 4
71805: PLUS
71806: PUSH
71807: LD_INT 5
71809: PUSH
71810: EMPTY
71811: LIST
71812: LIST
71813: LIST
71814: PUSH
71815: EMPTY
71816: LIST
71817: LIST
71818: LIST
71819: LIST
71820: LIST
71821: ST_TO_ADDR
// end ; 2 :
71822: GO 72381
71824: LD_INT 2
71826: DOUBLE
71827: EQUAL
71828: IFTRUE 71832
71830: GO 71961
71832: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71833: LD_ADDR_VAR 0 5
71837: PUSH
71838: LD_VAR 0 1
71842: PUSH
71843: LD_VAR 0 2
71847: PUSH
71848: LD_INT 3
71850: MINUS
71851: PUSH
71852: LD_INT 3
71854: PUSH
71855: EMPTY
71856: LIST
71857: LIST
71858: LIST
71859: PUSH
71860: LD_VAR 0 1
71864: PUSH
71865: LD_INT 4
71867: PLUS
71868: PUSH
71869: LD_VAR 0 2
71873: PUSH
71874: LD_INT 4
71876: PUSH
71877: EMPTY
71878: LIST
71879: LIST
71880: LIST
71881: PUSH
71882: LD_VAR 0 1
71886: PUSH
71887: LD_VAR 0 2
71891: PUSH
71892: LD_INT 4
71894: PLUS
71895: PUSH
71896: LD_INT 0
71898: PUSH
71899: EMPTY
71900: LIST
71901: LIST
71902: LIST
71903: PUSH
71904: LD_VAR 0 1
71908: PUSH
71909: LD_INT 3
71911: MINUS
71912: PUSH
71913: LD_VAR 0 2
71917: PUSH
71918: LD_INT 1
71920: PUSH
71921: EMPTY
71922: LIST
71923: LIST
71924: LIST
71925: PUSH
71926: LD_VAR 0 1
71930: PUSH
71931: LD_INT 4
71933: MINUS
71934: PUSH
71935: LD_VAR 0 2
71939: PUSH
71940: LD_INT 4
71942: MINUS
71943: PUSH
71944: LD_INT 2
71946: PUSH
71947: EMPTY
71948: LIST
71949: LIST
71950: LIST
71951: PUSH
71952: EMPTY
71953: LIST
71954: LIST
71955: LIST
71956: LIST
71957: LIST
71958: ST_TO_ADDR
// end ; 3 :
71959: GO 72381
71961: LD_INT 3
71963: DOUBLE
71964: EQUAL
71965: IFTRUE 71969
71967: GO 72102
71969: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71970: LD_ADDR_VAR 0 5
71974: PUSH
71975: LD_VAR 0 1
71979: PUSH
71980: LD_INT 3
71982: PLUS
71983: PUSH
71984: LD_VAR 0 2
71988: PUSH
71989: LD_INT 4
71991: PUSH
71992: EMPTY
71993: LIST
71994: LIST
71995: LIST
71996: PUSH
71997: LD_VAR 0 1
72001: PUSH
72002: LD_INT 4
72004: PLUS
72005: PUSH
72006: LD_VAR 0 2
72010: PUSH
72011: LD_INT 4
72013: PLUS
72014: PUSH
72015: LD_INT 5
72017: PUSH
72018: EMPTY
72019: LIST
72020: LIST
72021: LIST
72022: PUSH
72023: LD_VAR 0 1
72027: PUSH
72028: LD_INT 4
72030: MINUS
72031: PUSH
72032: LD_VAR 0 2
72036: PUSH
72037: LD_INT 1
72039: PUSH
72040: EMPTY
72041: LIST
72042: LIST
72043: LIST
72044: PUSH
72045: LD_VAR 0 1
72049: PUSH
72050: LD_VAR 0 2
72054: PUSH
72055: LD_INT 4
72057: MINUS
72058: PUSH
72059: LD_INT 3
72061: PUSH
72062: EMPTY
72063: LIST
72064: LIST
72065: LIST
72066: PUSH
72067: LD_VAR 0 1
72071: PUSH
72072: LD_INT 3
72074: MINUS
72075: PUSH
72076: LD_VAR 0 2
72080: PUSH
72081: LD_INT 3
72083: MINUS
72084: PUSH
72085: LD_INT 2
72087: PUSH
72088: EMPTY
72089: LIST
72090: LIST
72091: LIST
72092: PUSH
72093: EMPTY
72094: LIST
72095: LIST
72096: LIST
72097: LIST
72098: LIST
72099: ST_TO_ADDR
// end ; 4 :
72100: GO 72381
72102: LD_INT 4
72104: DOUBLE
72105: EQUAL
72106: IFTRUE 72110
72108: GO 72243
72110: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72111: LD_ADDR_VAR 0 5
72115: PUSH
72116: LD_VAR 0 1
72120: PUSH
72121: LD_VAR 0 2
72125: PUSH
72126: LD_INT 4
72128: PLUS
72129: PUSH
72130: LD_INT 0
72132: PUSH
72133: EMPTY
72134: LIST
72135: LIST
72136: LIST
72137: PUSH
72138: LD_VAR 0 1
72142: PUSH
72143: LD_INT 3
72145: PLUS
72146: PUSH
72147: LD_VAR 0 2
72151: PUSH
72152: LD_INT 3
72154: PLUS
72155: PUSH
72156: LD_INT 5
72158: PUSH
72159: EMPTY
72160: LIST
72161: LIST
72162: LIST
72163: PUSH
72164: LD_VAR 0 1
72168: PUSH
72169: LD_INT 4
72171: PLUS
72172: PUSH
72173: LD_VAR 0 2
72177: PUSH
72178: LD_INT 4
72180: PUSH
72181: EMPTY
72182: LIST
72183: LIST
72184: LIST
72185: PUSH
72186: LD_VAR 0 1
72190: PUSH
72191: LD_VAR 0 2
72195: PUSH
72196: LD_INT 3
72198: MINUS
72199: PUSH
72200: LD_INT 3
72202: PUSH
72203: EMPTY
72204: LIST
72205: LIST
72206: LIST
72207: PUSH
72208: LD_VAR 0 1
72212: PUSH
72213: LD_INT 4
72215: MINUS
72216: PUSH
72217: LD_VAR 0 2
72221: PUSH
72222: LD_INT 4
72224: MINUS
72225: PUSH
72226: LD_INT 2
72228: PUSH
72229: EMPTY
72230: LIST
72231: LIST
72232: LIST
72233: PUSH
72234: EMPTY
72235: LIST
72236: LIST
72237: LIST
72238: LIST
72239: LIST
72240: ST_TO_ADDR
// end ; 5 :
72241: GO 72381
72243: LD_INT 5
72245: DOUBLE
72246: EQUAL
72247: IFTRUE 72251
72249: GO 72380
72251: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72252: LD_ADDR_VAR 0 5
72256: PUSH
72257: LD_VAR 0 1
72261: PUSH
72262: LD_INT 4
72264: MINUS
72265: PUSH
72266: LD_VAR 0 2
72270: PUSH
72271: LD_INT 1
72273: PUSH
72274: EMPTY
72275: LIST
72276: LIST
72277: LIST
72278: PUSH
72279: LD_VAR 0 1
72283: PUSH
72284: LD_VAR 0 2
72288: PUSH
72289: LD_INT 4
72291: MINUS
72292: PUSH
72293: LD_INT 3
72295: PUSH
72296: EMPTY
72297: LIST
72298: LIST
72299: LIST
72300: PUSH
72301: LD_VAR 0 1
72305: PUSH
72306: LD_INT 4
72308: PLUS
72309: PUSH
72310: LD_VAR 0 2
72314: PUSH
72315: LD_INT 4
72317: PLUS
72318: PUSH
72319: LD_INT 5
72321: PUSH
72322: EMPTY
72323: LIST
72324: LIST
72325: LIST
72326: PUSH
72327: LD_VAR 0 1
72331: PUSH
72332: LD_INT 3
72334: PLUS
72335: PUSH
72336: LD_VAR 0 2
72340: PUSH
72341: LD_INT 4
72343: PUSH
72344: EMPTY
72345: LIST
72346: LIST
72347: LIST
72348: PUSH
72349: LD_VAR 0 1
72353: PUSH
72354: LD_VAR 0 2
72358: PUSH
72359: LD_INT 3
72361: PLUS
72362: PUSH
72363: LD_INT 0
72365: PUSH
72366: EMPTY
72367: LIST
72368: LIST
72369: LIST
72370: PUSH
72371: EMPTY
72372: LIST
72373: LIST
72374: LIST
72375: LIST
72376: LIST
72377: ST_TO_ADDR
// end ; end ;
72378: GO 72381
72380: POP
// result := list ;
72381: LD_ADDR_VAR 0 4
72385: PUSH
72386: LD_VAR 0 5
72390: ST_TO_ADDR
// end ;
72391: LD_VAR 0 4
72395: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72396: LD_INT 0
72398: PPUSH
72399: PPUSH
72400: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72401: LD_VAR 0 1
72405: NOT
72406: PUSH
72407: LD_VAR 0 2
72411: PUSH
72412: LD_INT 1
72414: PUSH
72415: LD_INT 2
72417: PUSH
72418: LD_INT 3
72420: PUSH
72421: LD_INT 4
72423: PUSH
72424: EMPTY
72425: LIST
72426: LIST
72427: LIST
72428: LIST
72429: IN
72430: NOT
72431: OR
72432: IFFALSE 72436
// exit ;
72434: GO 72528
// tmp := [ ] ;
72436: LD_ADDR_VAR 0 5
72440: PUSH
72441: EMPTY
72442: ST_TO_ADDR
// for i in units do
72443: LD_ADDR_VAR 0 4
72447: PUSH
72448: LD_VAR 0 1
72452: PUSH
72453: FOR_IN
72454: IFFALSE 72497
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
72456: LD_ADDR_VAR 0 5
72460: PUSH
72461: LD_VAR 0 5
72465: PPUSH
72466: LD_VAR 0 5
72470: PUSH
72471: LD_INT 1
72473: PLUS
72474: PPUSH
72475: LD_VAR 0 4
72479: PPUSH
72480: LD_VAR 0 2
72484: PPUSH
72485: CALL_OW 259
72489: PPUSH
72490: CALL_OW 2
72494: ST_TO_ADDR
72495: GO 72453
72497: POP
72498: POP
// if not tmp then
72499: LD_VAR 0 5
72503: NOT
72504: IFFALSE 72508
// exit ;
72506: GO 72528
// result := SortListByListDesc ( units , tmp ) ;
72508: LD_ADDR_VAR 0 3
72512: PUSH
72513: LD_VAR 0 1
72517: PPUSH
72518: LD_VAR 0 5
72522: PPUSH
72523: CALL_OW 77
72527: ST_TO_ADDR
// end ;
72528: LD_VAR 0 3
72532: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72533: LD_INT 0
72535: PPUSH
72536: PPUSH
72537: PPUSH
// result := false ;
72538: LD_ADDR_VAR 0 3
72542: PUSH
72543: LD_INT 0
72545: ST_TO_ADDR
// x := GetX ( building ) ;
72546: LD_ADDR_VAR 0 4
72550: PUSH
72551: LD_VAR 0 2
72555: PPUSH
72556: CALL_OW 250
72560: ST_TO_ADDR
// y := GetY ( building ) ;
72561: LD_ADDR_VAR 0 5
72565: PUSH
72566: LD_VAR 0 2
72570: PPUSH
72571: CALL_OW 251
72575: ST_TO_ADDR
// if not building or not x or not y then
72576: LD_VAR 0 2
72580: NOT
72581: PUSH
72582: LD_VAR 0 4
72586: NOT
72587: OR
72588: PUSH
72589: LD_VAR 0 5
72593: NOT
72594: OR
72595: IFFALSE 72599
// exit ;
72597: GO 72691
// if GetTaskList ( unit ) then
72599: LD_VAR 0 1
72603: PPUSH
72604: CALL_OW 437
72608: IFFALSE 72691
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72610: LD_STRING e
72612: PUSH
72613: LD_VAR 0 1
72617: PPUSH
72618: CALL_OW 437
72622: PUSH
72623: LD_INT 1
72625: ARRAY
72626: PUSH
72627: LD_INT 1
72629: ARRAY
72630: EQUAL
72631: PUSH
72632: LD_VAR 0 4
72636: PUSH
72637: LD_VAR 0 1
72641: PPUSH
72642: CALL_OW 437
72646: PUSH
72647: LD_INT 1
72649: ARRAY
72650: PUSH
72651: LD_INT 2
72653: ARRAY
72654: EQUAL
72655: AND
72656: PUSH
72657: LD_VAR 0 5
72661: PUSH
72662: LD_VAR 0 1
72666: PPUSH
72667: CALL_OW 437
72671: PUSH
72672: LD_INT 1
72674: ARRAY
72675: PUSH
72676: LD_INT 3
72678: ARRAY
72679: EQUAL
72680: AND
72681: IFFALSE 72691
// result := true end ;
72683: LD_ADDR_VAR 0 3
72687: PUSH
72688: LD_INT 1
72690: ST_TO_ADDR
// end ;
72691: LD_VAR 0 3
72695: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72696: LD_INT 0
72698: PPUSH
// result := false ;
72699: LD_ADDR_VAR 0 4
72703: PUSH
72704: LD_INT 0
72706: ST_TO_ADDR
// if GetTaskList ( unit ) then
72707: LD_VAR 0 1
72711: PPUSH
72712: CALL_OW 437
72716: IFFALSE 72799
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72718: LD_STRING M
72720: PUSH
72721: LD_VAR 0 1
72725: PPUSH
72726: CALL_OW 437
72730: PUSH
72731: LD_INT 1
72733: ARRAY
72734: PUSH
72735: LD_INT 1
72737: ARRAY
72738: EQUAL
72739: PUSH
72740: LD_VAR 0 2
72744: PUSH
72745: LD_VAR 0 1
72749: PPUSH
72750: CALL_OW 437
72754: PUSH
72755: LD_INT 1
72757: ARRAY
72758: PUSH
72759: LD_INT 2
72761: ARRAY
72762: EQUAL
72763: AND
72764: PUSH
72765: LD_VAR 0 3
72769: PUSH
72770: LD_VAR 0 1
72774: PPUSH
72775: CALL_OW 437
72779: PUSH
72780: LD_INT 1
72782: ARRAY
72783: PUSH
72784: LD_INT 3
72786: ARRAY
72787: EQUAL
72788: AND
72789: IFFALSE 72799
// result := true ;
72791: LD_ADDR_VAR 0 4
72795: PUSH
72796: LD_INT 1
72798: ST_TO_ADDR
// end ; end ;
72799: LD_VAR 0 4
72803: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72804: LD_INT 0
72806: PPUSH
72807: PPUSH
72808: PPUSH
72809: PPUSH
// if not unit or not area then
72810: LD_VAR 0 1
72814: NOT
72815: PUSH
72816: LD_VAR 0 2
72820: NOT
72821: OR
72822: IFFALSE 72826
// exit ;
72824: GO 72990
// tmp := AreaToList ( area , i ) ;
72826: LD_ADDR_VAR 0 6
72830: PUSH
72831: LD_VAR 0 2
72835: PPUSH
72836: LD_VAR 0 5
72840: PPUSH
72841: CALL_OW 517
72845: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72846: LD_ADDR_VAR 0 5
72850: PUSH
72851: DOUBLE
72852: LD_INT 1
72854: DEC
72855: ST_TO_ADDR
72856: LD_VAR 0 6
72860: PUSH
72861: LD_INT 1
72863: ARRAY
72864: PUSH
72865: FOR_TO
72866: IFFALSE 72988
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72868: LD_ADDR_VAR 0 7
72872: PUSH
72873: LD_VAR 0 6
72877: PUSH
72878: LD_INT 1
72880: ARRAY
72881: PUSH
72882: LD_VAR 0 5
72886: ARRAY
72887: PUSH
72888: LD_VAR 0 6
72892: PUSH
72893: LD_INT 2
72895: ARRAY
72896: PUSH
72897: LD_VAR 0 5
72901: ARRAY
72902: PUSH
72903: EMPTY
72904: LIST
72905: LIST
72906: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
72907: LD_VAR 0 7
72911: PUSH
72912: LD_INT 1
72914: ARRAY
72915: PPUSH
72916: LD_VAR 0 7
72920: PUSH
72921: LD_INT 2
72923: ARRAY
72924: PPUSH
72925: CALL_OW 428
72929: PUSH
72930: LD_INT 0
72932: EQUAL
72933: IFFALSE 72986
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72935: LD_VAR 0 1
72939: PPUSH
72940: LD_VAR 0 7
72944: PUSH
72945: LD_INT 1
72947: ARRAY
72948: PPUSH
72949: LD_VAR 0 7
72953: PUSH
72954: LD_INT 2
72956: ARRAY
72957: PPUSH
72958: LD_VAR 0 3
72962: PPUSH
72963: CALL_OW 48
// result := IsPlaced ( unit ) ;
72967: LD_ADDR_VAR 0 4
72971: PUSH
72972: LD_VAR 0 1
72976: PPUSH
72977: CALL_OW 305
72981: ST_TO_ADDR
// exit ;
72982: POP
72983: POP
72984: GO 72990
// end ; end ;
72986: GO 72865
72988: POP
72989: POP
// end ;
72990: LD_VAR 0 4
72994: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72995: LD_INT 0
72997: PPUSH
72998: PPUSH
72999: PPUSH
// if not side or side > 8 then
73000: LD_VAR 0 1
73004: NOT
73005: PUSH
73006: LD_VAR 0 1
73010: PUSH
73011: LD_INT 8
73013: GREATER
73014: OR
73015: IFFALSE 73019
// exit ;
73017: GO 73206
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73019: LD_ADDR_VAR 0 4
73023: PUSH
73024: LD_INT 22
73026: PUSH
73027: LD_VAR 0 1
73031: PUSH
73032: EMPTY
73033: LIST
73034: LIST
73035: PUSH
73036: LD_INT 21
73038: PUSH
73039: LD_INT 3
73041: PUSH
73042: EMPTY
73043: LIST
73044: LIST
73045: PUSH
73046: EMPTY
73047: LIST
73048: LIST
73049: PPUSH
73050: CALL_OW 69
73054: ST_TO_ADDR
// if not tmp then
73055: LD_VAR 0 4
73059: NOT
73060: IFFALSE 73064
// exit ;
73062: GO 73206
// enable_addtolog := true ;
73064: LD_ADDR_OWVAR 81
73068: PUSH
73069: LD_INT 1
73071: ST_TO_ADDR
// AddToLog ( [ ) ;
73072: LD_STRING [
73074: PPUSH
73075: CALL_OW 561
// for i in tmp do
73079: LD_ADDR_VAR 0 3
73083: PUSH
73084: LD_VAR 0 4
73088: PUSH
73089: FOR_IN
73090: IFFALSE 73197
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73092: LD_STRING [
73094: PUSH
73095: LD_VAR 0 3
73099: PPUSH
73100: CALL_OW 266
73104: STR
73105: PUSH
73106: LD_STRING , 
73108: STR
73109: PUSH
73110: LD_VAR 0 3
73114: PPUSH
73115: CALL_OW 250
73119: STR
73120: PUSH
73121: LD_STRING , 
73123: STR
73124: PUSH
73125: LD_VAR 0 3
73129: PPUSH
73130: CALL_OW 251
73134: STR
73135: PUSH
73136: LD_STRING , 
73138: STR
73139: PUSH
73140: LD_VAR 0 3
73144: PPUSH
73145: CALL_OW 254
73149: STR
73150: PUSH
73151: LD_STRING , 
73153: STR
73154: PUSH
73155: LD_VAR 0 3
73159: PPUSH
73160: LD_INT 1
73162: PPUSH
73163: CALL_OW 268
73167: STR
73168: PUSH
73169: LD_STRING , 
73171: STR
73172: PUSH
73173: LD_VAR 0 3
73177: PPUSH
73178: LD_INT 2
73180: PPUSH
73181: CALL_OW 268
73185: STR
73186: PUSH
73187: LD_STRING ],
73189: STR
73190: PPUSH
73191: CALL_OW 561
// end ;
73195: GO 73089
73197: POP
73198: POP
// AddToLog ( ]; ) ;
73199: LD_STRING ];
73201: PPUSH
73202: CALL_OW 561
// end ;
73206: LD_VAR 0 2
73210: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73211: LD_INT 0
73213: PPUSH
73214: PPUSH
73215: PPUSH
73216: PPUSH
73217: PPUSH
// if not area or not rate or not max then
73218: LD_VAR 0 1
73222: NOT
73223: PUSH
73224: LD_VAR 0 2
73228: NOT
73229: OR
73230: PUSH
73231: LD_VAR 0 4
73235: NOT
73236: OR
73237: IFFALSE 73241
// exit ;
73239: GO 73430
// while 1 do
73241: LD_INT 1
73243: IFFALSE 73430
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73245: LD_ADDR_VAR 0 9
73249: PUSH
73250: LD_VAR 0 1
73254: PPUSH
73255: LD_INT 1
73257: PPUSH
73258: CALL_OW 287
73262: PUSH
73263: LD_INT 10
73265: MUL
73266: ST_TO_ADDR
// r := rate / 10 ;
73267: LD_ADDR_VAR 0 7
73271: PUSH
73272: LD_VAR 0 2
73276: PUSH
73277: LD_INT 10
73279: DIVREAL
73280: ST_TO_ADDR
// time := 1 1$00 ;
73281: LD_ADDR_VAR 0 8
73285: PUSH
73286: LD_INT 2100
73288: ST_TO_ADDR
// if amount < min then
73289: LD_VAR 0 9
73293: PUSH
73294: LD_VAR 0 3
73298: LESS
73299: IFFALSE 73317
// r := r * 2 else
73301: LD_ADDR_VAR 0 7
73305: PUSH
73306: LD_VAR 0 7
73310: PUSH
73311: LD_INT 2
73313: MUL
73314: ST_TO_ADDR
73315: GO 73343
// if amount > max then
73317: LD_VAR 0 9
73321: PUSH
73322: LD_VAR 0 4
73326: GREATER
73327: IFFALSE 73343
// r := r / 2 ;
73329: LD_ADDR_VAR 0 7
73333: PUSH
73334: LD_VAR 0 7
73338: PUSH
73339: LD_INT 2
73341: DIVREAL
73342: ST_TO_ADDR
// time := time / r ;
73343: LD_ADDR_VAR 0 8
73347: PUSH
73348: LD_VAR 0 8
73352: PUSH
73353: LD_VAR 0 7
73357: DIVREAL
73358: ST_TO_ADDR
// if time < 0 then
73359: LD_VAR 0 8
73363: PUSH
73364: LD_INT 0
73366: LESS
73367: IFFALSE 73384
// time := time * - 1 ;
73369: LD_ADDR_VAR 0 8
73373: PUSH
73374: LD_VAR 0 8
73378: PUSH
73379: LD_INT 1
73381: NEG
73382: MUL
73383: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
73384: LD_VAR 0 8
73388: PUSH
73389: LD_INT 35
73391: PPUSH
73392: LD_INT 875
73394: PPUSH
73395: CALL_OW 12
73399: PLUS
73400: PPUSH
73401: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73405: LD_INT 1
73407: PPUSH
73408: LD_INT 5
73410: PPUSH
73411: CALL_OW 12
73415: PPUSH
73416: LD_VAR 0 1
73420: PPUSH
73421: LD_INT 1
73423: PPUSH
73424: CALL_OW 55
// end ;
73428: GO 73241
// end ;
73430: LD_VAR 0 5
73434: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73435: LD_INT 0
73437: PPUSH
73438: PPUSH
73439: PPUSH
73440: PPUSH
73441: PPUSH
73442: PPUSH
73443: PPUSH
73444: PPUSH
// if not turrets or not factories then
73445: LD_VAR 0 1
73449: NOT
73450: PUSH
73451: LD_VAR 0 2
73455: NOT
73456: OR
73457: IFFALSE 73461
// exit ;
73459: GO 73768
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73461: LD_ADDR_VAR 0 10
73465: PUSH
73466: LD_INT 5
73468: PUSH
73469: LD_INT 6
73471: PUSH
73472: EMPTY
73473: LIST
73474: LIST
73475: PUSH
73476: LD_INT 2
73478: PUSH
73479: LD_INT 4
73481: PUSH
73482: EMPTY
73483: LIST
73484: LIST
73485: PUSH
73486: LD_INT 3
73488: PUSH
73489: LD_INT 5
73491: PUSH
73492: EMPTY
73493: LIST
73494: LIST
73495: PUSH
73496: EMPTY
73497: LIST
73498: LIST
73499: LIST
73500: PUSH
73501: LD_INT 24
73503: PUSH
73504: LD_INT 25
73506: PUSH
73507: EMPTY
73508: LIST
73509: LIST
73510: PUSH
73511: LD_INT 23
73513: PUSH
73514: LD_INT 27
73516: PUSH
73517: EMPTY
73518: LIST
73519: LIST
73520: PUSH
73521: EMPTY
73522: LIST
73523: LIST
73524: PUSH
73525: LD_INT 42
73527: PUSH
73528: LD_INT 43
73530: PUSH
73531: EMPTY
73532: LIST
73533: LIST
73534: PUSH
73535: LD_INT 44
73537: PUSH
73538: LD_INT 46
73540: PUSH
73541: EMPTY
73542: LIST
73543: LIST
73544: PUSH
73545: LD_INT 45
73547: PUSH
73548: LD_INT 47
73550: PUSH
73551: EMPTY
73552: LIST
73553: LIST
73554: PUSH
73555: EMPTY
73556: LIST
73557: LIST
73558: LIST
73559: PUSH
73560: EMPTY
73561: LIST
73562: LIST
73563: LIST
73564: ST_TO_ADDR
// result := [ ] ;
73565: LD_ADDR_VAR 0 3
73569: PUSH
73570: EMPTY
73571: ST_TO_ADDR
// for i in turrets do
73572: LD_ADDR_VAR 0 4
73576: PUSH
73577: LD_VAR 0 1
73581: PUSH
73582: FOR_IN
73583: IFFALSE 73766
// begin nat := GetNation ( i ) ;
73585: LD_ADDR_VAR 0 7
73589: PUSH
73590: LD_VAR 0 4
73594: PPUSH
73595: CALL_OW 248
73599: ST_TO_ADDR
// weapon := 0 ;
73600: LD_ADDR_VAR 0 8
73604: PUSH
73605: LD_INT 0
73607: ST_TO_ADDR
// if not nat then
73608: LD_VAR 0 7
73612: NOT
73613: IFFALSE 73617
// continue ;
73615: GO 73582
// for j in list [ nat ] do
73617: LD_ADDR_VAR 0 5
73621: PUSH
73622: LD_VAR 0 10
73626: PUSH
73627: LD_VAR 0 7
73631: ARRAY
73632: PUSH
73633: FOR_IN
73634: IFFALSE 73675
// if GetBWeapon ( i ) = j [ 1 ] then
73636: LD_VAR 0 4
73640: PPUSH
73641: CALL_OW 269
73645: PUSH
73646: LD_VAR 0 5
73650: PUSH
73651: LD_INT 1
73653: ARRAY
73654: EQUAL
73655: IFFALSE 73673
// begin weapon := j [ 2 ] ;
73657: LD_ADDR_VAR 0 8
73661: PUSH
73662: LD_VAR 0 5
73666: PUSH
73667: LD_INT 2
73669: ARRAY
73670: ST_TO_ADDR
// break ;
73671: GO 73675
// end ;
73673: GO 73633
73675: POP
73676: POP
// if not weapon then
73677: LD_VAR 0 8
73681: NOT
73682: IFFALSE 73686
// continue ;
73684: GO 73582
// for k in factories do
73686: LD_ADDR_VAR 0 6
73690: PUSH
73691: LD_VAR 0 2
73695: PUSH
73696: FOR_IN
73697: IFFALSE 73762
// begin weapons := AvailableWeaponList ( k ) ;
73699: LD_ADDR_VAR 0 9
73703: PUSH
73704: LD_VAR 0 6
73708: PPUSH
73709: CALL_OW 478
73713: ST_TO_ADDR
// if not weapons then
73714: LD_VAR 0 9
73718: NOT
73719: IFFALSE 73723
// continue ;
73721: GO 73696
// if weapon in weapons then
73723: LD_VAR 0 8
73727: PUSH
73728: LD_VAR 0 9
73732: IN
73733: IFFALSE 73760
// begin result := [ i , weapon ] ;
73735: LD_ADDR_VAR 0 3
73739: PUSH
73740: LD_VAR 0 4
73744: PUSH
73745: LD_VAR 0 8
73749: PUSH
73750: EMPTY
73751: LIST
73752: LIST
73753: ST_TO_ADDR
// exit ;
73754: POP
73755: POP
73756: POP
73757: POP
73758: GO 73768
// end ; end ;
73760: GO 73696
73762: POP
73763: POP
// end ;
73764: GO 73582
73766: POP
73767: POP
// end ;
73768: LD_VAR 0 3
73772: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73773: LD_INT 0
73775: PPUSH
// if not side or side > 8 then
73776: LD_VAR 0 3
73780: NOT
73781: PUSH
73782: LD_VAR 0 3
73786: PUSH
73787: LD_INT 8
73789: GREATER
73790: OR
73791: IFFALSE 73795
// exit ;
73793: GO 73854
// if not range then
73795: LD_VAR 0 4
73799: NOT
73800: IFFALSE 73811
// range := - 12 ;
73802: LD_ADDR_VAR 0 4
73806: PUSH
73807: LD_INT 12
73809: NEG
73810: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73811: LD_VAR 0 1
73815: PPUSH
73816: LD_VAR 0 2
73820: PPUSH
73821: LD_VAR 0 3
73825: PPUSH
73826: LD_VAR 0 4
73830: PPUSH
73831: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73835: LD_VAR 0 1
73839: PPUSH
73840: LD_VAR 0 2
73844: PPUSH
73845: LD_VAR 0 3
73849: PPUSH
73850: CALL_OW 331
// end ;
73854: LD_VAR 0 5
73858: RET
// export function Video ( mode ) ; begin
73859: LD_INT 0
73861: PPUSH
// ingame_video = mode ;
73862: LD_ADDR_OWVAR 52
73866: PUSH
73867: LD_VAR 0 1
73871: ST_TO_ADDR
// interface_hidden = mode ;
73872: LD_ADDR_OWVAR 54
73876: PUSH
73877: LD_VAR 0 1
73881: ST_TO_ADDR
// end ;
73882: LD_VAR 0 2
73886: RET
// export function Join ( array , element ) ; begin
73887: LD_INT 0
73889: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73890: LD_ADDR_VAR 0 3
73894: PUSH
73895: LD_VAR 0 1
73899: PPUSH
73900: LD_VAR 0 1
73904: PUSH
73905: LD_INT 1
73907: PLUS
73908: PPUSH
73909: LD_VAR 0 2
73913: PPUSH
73914: CALL_OW 1
73918: ST_TO_ADDR
// end ;
73919: LD_VAR 0 3
73923: RET
// export function JoinUnion ( array , element ) ; begin
73924: LD_INT 0
73926: PPUSH
// result := array union element ;
73927: LD_ADDR_VAR 0 3
73931: PUSH
73932: LD_VAR 0 1
73936: PUSH
73937: LD_VAR 0 2
73941: UNION
73942: ST_TO_ADDR
// end ;
73943: LD_VAR 0 3
73947: RET
// export function GetBehemoths ( side ) ; begin
73948: LD_INT 0
73950: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
73951: LD_ADDR_VAR 0 2
73955: PUSH
73956: LD_INT 22
73958: PUSH
73959: LD_VAR 0 1
73963: PUSH
73964: EMPTY
73965: LIST
73966: LIST
73967: PUSH
73968: LD_INT 31
73970: PUSH
73971: LD_INT 25
73973: PUSH
73974: EMPTY
73975: LIST
73976: LIST
73977: PUSH
73978: EMPTY
73979: LIST
73980: LIST
73981: PPUSH
73982: CALL_OW 69
73986: ST_TO_ADDR
// end ;
73987: LD_VAR 0 2
73991: RET
// export function Shuffle ( array ) ; var i , index ; begin
73992: LD_INT 0
73994: PPUSH
73995: PPUSH
73996: PPUSH
// result := [ ] ;
73997: LD_ADDR_VAR 0 2
74001: PUSH
74002: EMPTY
74003: ST_TO_ADDR
// if not array then
74004: LD_VAR 0 1
74008: NOT
74009: IFFALSE 74013
// exit ;
74011: GO 74112
// Randomize ;
74013: CALL_OW 10
// for i = array downto 1 do
74017: LD_ADDR_VAR 0 3
74021: PUSH
74022: DOUBLE
74023: LD_VAR 0 1
74027: INC
74028: ST_TO_ADDR
74029: LD_INT 1
74031: PUSH
74032: FOR_DOWNTO
74033: IFFALSE 74110
// begin index := rand ( 1 , array ) ;
74035: LD_ADDR_VAR 0 4
74039: PUSH
74040: LD_INT 1
74042: PPUSH
74043: LD_VAR 0 1
74047: PPUSH
74048: CALL_OW 12
74052: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74053: LD_ADDR_VAR 0 2
74057: PUSH
74058: LD_VAR 0 2
74062: PPUSH
74063: LD_VAR 0 2
74067: PUSH
74068: LD_INT 1
74070: PLUS
74071: PPUSH
74072: LD_VAR 0 1
74076: PUSH
74077: LD_VAR 0 4
74081: ARRAY
74082: PPUSH
74083: CALL_OW 2
74087: ST_TO_ADDR
// array := Delete ( array , index ) ;
74088: LD_ADDR_VAR 0 1
74092: PUSH
74093: LD_VAR 0 1
74097: PPUSH
74098: LD_VAR 0 4
74102: PPUSH
74103: CALL_OW 3
74107: ST_TO_ADDR
// end ;
74108: GO 74032
74110: POP
74111: POP
// end ;
74112: LD_VAR 0 2
74116: RET
// export function GetBaseMaterials ( base ) ; begin
74117: LD_INT 0
74119: PPUSH
// result := [ 0 , 0 , 0 ] ;
74120: LD_ADDR_VAR 0 2
74124: PUSH
74125: LD_INT 0
74127: PUSH
74128: LD_INT 0
74130: PUSH
74131: LD_INT 0
74133: PUSH
74134: EMPTY
74135: LIST
74136: LIST
74137: LIST
74138: ST_TO_ADDR
// if not base then
74139: LD_VAR 0 1
74143: NOT
74144: IFFALSE 74148
// exit ;
74146: GO 74197
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74148: LD_ADDR_VAR 0 2
74152: PUSH
74153: LD_VAR 0 1
74157: PPUSH
74158: LD_INT 1
74160: PPUSH
74161: CALL_OW 275
74165: PUSH
74166: LD_VAR 0 1
74170: PPUSH
74171: LD_INT 2
74173: PPUSH
74174: CALL_OW 275
74178: PUSH
74179: LD_VAR 0 1
74183: PPUSH
74184: LD_INT 3
74186: PPUSH
74187: CALL_OW 275
74191: PUSH
74192: EMPTY
74193: LIST
74194: LIST
74195: LIST
74196: ST_TO_ADDR
// end ;
74197: LD_VAR 0 2
74201: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74202: LD_INT 0
74204: PPUSH
74205: PPUSH
// result := array ;
74206: LD_ADDR_VAR 0 3
74210: PUSH
74211: LD_VAR 0 1
74215: ST_TO_ADDR
// if size >= result then
74216: LD_VAR 0 2
74220: PUSH
74221: LD_VAR 0 3
74225: GREATEREQUAL
74226: IFFALSE 74230
// exit ;
74228: GO 74280
// if size then
74230: LD_VAR 0 2
74234: IFFALSE 74280
// for i := array downto size do
74236: LD_ADDR_VAR 0 4
74240: PUSH
74241: DOUBLE
74242: LD_VAR 0 1
74246: INC
74247: ST_TO_ADDR
74248: LD_VAR 0 2
74252: PUSH
74253: FOR_DOWNTO
74254: IFFALSE 74278
// result := Delete ( result , result ) ;
74256: LD_ADDR_VAR 0 3
74260: PUSH
74261: LD_VAR 0 3
74265: PPUSH
74266: LD_VAR 0 3
74270: PPUSH
74271: CALL_OW 3
74275: ST_TO_ADDR
74276: GO 74253
74278: POP
74279: POP
// end ;
74280: LD_VAR 0 3
74284: RET
// export function ComExit ( unit ) ; var tmp ; begin
74285: LD_INT 0
74287: PPUSH
74288: PPUSH
// if not IsInUnit ( unit ) then
74289: LD_VAR 0 1
74293: PPUSH
74294: CALL_OW 310
74298: NOT
74299: IFFALSE 74303
// exit ;
74301: GO 74363
// tmp := IsInUnit ( unit ) ;
74303: LD_ADDR_VAR 0 3
74307: PUSH
74308: LD_VAR 0 1
74312: PPUSH
74313: CALL_OW 310
74317: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74318: LD_VAR 0 3
74322: PPUSH
74323: CALL_OW 247
74327: PUSH
74328: LD_INT 2
74330: EQUAL
74331: IFFALSE 74344
// ComExitVehicle ( unit ) else
74333: LD_VAR 0 1
74337: PPUSH
74338: CALL_OW 121
74342: GO 74353
// ComExitBuilding ( unit ) ;
74344: LD_VAR 0 1
74348: PPUSH
74349: CALL_OW 122
// result := tmp ;
74353: LD_ADDR_VAR 0 2
74357: PUSH
74358: LD_VAR 0 3
74362: ST_TO_ADDR
// end ;
74363: LD_VAR 0 2
74367: RET
// export function ComExitAll ( units ) ; var i ; begin
74368: LD_INT 0
74370: PPUSH
74371: PPUSH
// if not units then
74372: LD_VAR 0 1
74376: NOT
74377: IFFALSE 74381
// exit ;
74379: GO 74407
// for i in units do
74381: LD_ADDR_VAR 0 3
74385: PUSH
74386: LD_VAR 0 1
74390: PUSH
74391: FOR_IN
74392: IFFALSE 74405
// ComExit ( i ) ;
74394: LD_VAR 0 3
74398: PPUSH
74399: CALL 74285 0 1
74403: GO 74391
74405: POP
74406: POP
// end ;
74407: LD_VAR 0 2
74411: RET
// export function ResetHc ; begin
74412: LD_INT 0
74414: PPUSH
// InitHc ;
74415: CALL_OW 19
// hc_importance := 0 ;
74419: LD_ADDR_OWVAR 32
74423: PUSH
74424: LD_INT 0
74426: ST_TO_ADDR
// end ;
74427: LD_VAR 0 1
74431: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74432: LD_INT 0
74434: PPUSH
74435: PPUSH
74436: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74437: LD_ADDR_VAR 0 6
74441: PUSH
74442: LD_VAR 0 1
74446: PUSH
74447: LD_VAR 0 3
74451: PLUS
74452: PUSH
74453: LD_INT 2
74455: DIV
74456: ST_TO_ADDR
// if _x < 0 then
74457: LD_VAR 0 6
74461: PUSH
74462: LD_INT 0
74464: LESS
74465: IFFALSE 74482
// _x := _x * - 1 ;
74467: LD_ADDR_VAR 0 6
74471: PUSH
74472: LD_VAR 0 6
74476: PUSH
74477: LD_INT 1
74479: NEG
74480: MUL
74481: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74482: LD_ADDR_VAR 0 7
74486: PUSH
74487: LD_VAR 0 2
74491: PUSH
74492: LD_VAR 0 4
74496: PLUS
74497: PUSH
74498: LD_INT 2
74500: DIV
74501: ST_TO_ADDR
// if _y < 0 then
74502: LD_VAR 0 7
74506: PUSH
74507: LD_INT 0
74509: LESS
74510: IFFALSE 74527
// _y := _y * - 1 ;
74512: LD_ADDR_VAR 0 7
74516: PUSH
74517: LD_VAR 0 7
74521: PUSH
74522: LD_INT 1
74524: NEG
74525: MUL
74526: ST_TO_ADDR
// result := [ _x , _y ] ;
74527: LD_ADDR_VAR 0 5
74531: PUSH
74532: LD_VAR 0 6
74536: PUSH
74537: LD_VAR 0 7
74541: PUSH
74542: EMPTY
74543: LIST
74544: LIST
74545: ST_TO_ADDR
// end ;
74546: LD_VAR 0 5
74550: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74551: LD_INT 0
74553: PPUSH
74554: PPUSH
74555: PPUSH
74556: PPUSH
// task := GetTaskList ( unit ) ;
74557: LD_ADDR_VAR 0 7
74561: PUSH
74562: LD_VAR 0 1
74566: PPUSH
74567: CALL_OW 437
74571: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74572: LD_VAR 0 7
74576: NOT
74577: PUSH
74578: LD_VAR 0 1
74582: PPUSH
74583: LD_VAR 0 2
74587: PPUSH
74588: CALL_OW 308
74592: NOT
74593: AND
74594: IFFALSE 74598
// exit ;
74596: GO 74716
// if IsInArea ( unit , area ) then
74598: LD_VAR 0 1
74602: PPUSH
74603: LD_VAR 0 2
74607: PPUSH
74608: CALL_OW 308
74612: IFFALSE 74630
// begin ComMoveToArea ( unit , goAway ) ;
74614: LD_VAR 0 1
74618: PPUSH
74619: LD_VAR 0 3
74623: PPUSH
74624: CALL_OW 113
// exit ;
74628: GO 74716
// end ; if task [ 1 ] [ 1 ] <> M then
74630: LD_VAR 0 7
74634: PUSH
74635: LD_INT 1
74637: ARRAY
74638: PUSH
74639: LD_INT 1
74641: ARRAY
74642: PUSH
74643: LD_STRING M
74645: NONEQUAL
74646: IFFALSE 74650
// exit ;
74648: GO 74716
// x := task [ 1 ] [ 2 ] ;
74650: LD_ADDR_VAR 0 5
74654: PUSH
74655: LD_VAR 0 7
74659: PUSH
74660: LD_INT 1
74662: ARRAY
74663: PUSH
74664: LD_INT 2
74666: ARRAY
74667: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74668: LD_ADDR_VAR 0 6
74672: PUSH
74673: LD_VAR 0 7
74677: PUSH
74678: LD_INT 1
74680: ARRAY
74681: PUSH
74682: LD_INT 3
74684: ARRAY
74685: ST_TO_ADDR
// if InArea ( x , y , area ) then
74686: LD_VAR 0 5
74690: PPUSH
74691: LD_VAR 0 6
74695: PPUSH
74696: LD_VAR 0 2
74700: PPUSH
74701: CALL_OW 309
74705: IFFALSE 74716
// ComStop ( unit ) ;
74707: LD_VAR 0 1
74711: PPUSH
74712: CALL_OW 141
// end ;
74716: LD_VAR 0 4
74720: RET
// export function Abs ( value ) ; begin
74721: LD_INT 0
74723: PPUSH
// result := value ;
74724: LD_ADDR_VAR 0 2
74728: PUSH
74729: LD_VAR 0 1
74733: ST_TO_ADDR
// if value < 0 then
74734: LD_VAR 0 1
74738: PUSH
74739: LD_INT 0
74741: LESS
74742: IFFALSE 74759
// result := value * - 1 ;
74744: LD_ADDR_VAR 0 2
74748: PUSH
74749: LD_VAR 0 1
74753: PUSH
74754: LD_INT 1
74756: NEG
74757: MUL
74758: ST_TO_ADDR
// end ;
74759: LD_VAR 0 2
74763: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74764: LD_INT 0
74766: PPUSH
74767: PPUSH
74768: PPUSH
74769: PPUSH
74770: PPUSH
74771: PPUSH
74772: PPUSH
74773: PPUSH
// if not unit or not building then
74774: LD_VAR 0 1
74778: NOT
74779: PUSH
74780: LD_VAR 0 2
74784: NOT
74785: OR
74786: IFFALSE 74790
// exit ;
74788: GO 75016
// x := GetX ( building ) ;
74790: LD_ADDR_VAR 0 4
74794: PUSH
74795: LD_VAR 0 2
74799: PPUSH
74800: CALL_OW 250
74804: ST_TO_ADDR
// y := GetY ( building ) ;
74805: LD_ADDR_VAR 0 6
74809: PUSH
74810: LD_VAR 0 2
74814: PPUSH
74815: CALL_OW 251
74819: ST_TO_ADDR
// d := GetDir ( building ) ;
74820: LD_ADDR_VAR 0 8
74824: PUSH
74825: LD_VAR 0 2
74829: PPUSH
74830: CALL_OW 254
74834: ST_TO_ADDR
// r := 4 ;
74835: LD_ADDR_VAR 0 9
74839: PUSH
74840: LD_INT 4
74842: ST_TO_ADDR
// for i := 1 to 5 do
74843: LD_ADDR_VAR 0 10
74847: PUSH
74848: DOUBLE
74849: LD_INT 1
74851: DEC
74852: ST_TO_ADDR
74853: LD_INT 5
74855: PUSH
74856: FOR_TO
74857: IFFALSE 75014
// begin _x := ShiftX ( x , d , r + i ) ;
74859: LD_ADDR_VAR 0 5
74863: PUSH
74864: LD_VAR 0 4
74868: PPUSH
74869: LD_VAR 0 8
74873: PPUSH
74874: LD_VAR 0 9
74878: PUSH
74879: LD_VAR 0 10
74883: PLUS
74884: PPUSH
74885: CALL_OW 272
74889: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74890: LD_ADDR_VAR 0 7
74894: PUSH
74895: LD_VAR 0 6
74899: PPUSH
74900: LD_VAR 0 8
74904: PPUSH
74905: LD_VAR 0 9
74909: PUSH
74910: LD_VAR 0 10
74914: PLUS
74915: PPUSH
74916: CALL_OW 273
74920: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74921: LD_VAR 0 5
74925: PPUSH
74926: LD_VAR 0 7
74930: PPUSH
74931: CALL_OW 488
74935: PUSH
74936: LD_VAR 0 5
74940: PPUSH
74941: LD_VAR 0 7
74945: PPUSH
74946: CALL_OW 428
74950: PPUSH
74951: CALL_OW 247
74955: PUSH
74956: LD_INT 3
74958: PUSH
74959: LD_INT 2
74961: PUSH
74962: EMPTY
74963: LIST
74964: LIST
74965: IN
74966: NOT
74967: AND
74968: IFFALSE 75012
// begin ComMoveXY ( unit , _x , _y ) ;
74970: LD_VAR 0 1
74974: PPUSH
74975: LD_VAR 0 5
74979: PPUSH
74980: LD_VAR 0 7
74984: PPUSH
74985: CALL_OW 111
// result := [ _x , _y ] ;
74989: LD_ADDR_VAR 0 3
74993: PUSH
74994: LD_VAR 0 5
74998: PUSH
74999: LD_VAR 0 7
75003: PUSH
75004: EMPTY
75005: LIST
75006: LIST
75007: ST_TO_ADDR
// exit ;
75008: POP
75009: POP
75010: GO 75016
// end ; end ;
75012: GO 74856
75014: POP
75015: POP
// end ;
75016: LD_VAR 0 3
75020: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75021: LD_INT 0
75023: PPUSH
75024: PPUSH
75025: PPUSH
// result := 0 ;
75026: LD_ADDR_VAR 0 3
75030: PUSH
75031: LD_INT 0
75033: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75034: LD_VAR 0 1
75038: PUSH
75039: LD_INT 0
75041: LESS
75042: PUSH
75043: LD_VAR 0 1
75047: PUSH
75048: LD_INT 8
75050: GREATER
75051: OR
75052: PUSH
75053: LD_VAR 0 2
75057: PUSH
75058: LD_INT 0
75060: LESS
75061: OR
75062: PUSH
75063: LD_VAR 0 2
75067: PUSH
75068: LD_INT 8
75070: GREATER
75071: OR
75072: IFFALSE 75076
// exit ;
75074: GO 75151
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75076: LD_ADDR_VAR 0 4
75080: PUSH
75081: LD_INT 22
75083: PUSH
75084: LD_VAR 0 2
75088: PUSH
75089: EMPTY
75090: LIST
75091: LIST
75092: PPUSH
75093: CALL_OW 69
75097: PUSH
75098: FOR_IN
75099: IFFALSE 75149
// begin un := UnitShoot ( i ) ;
75101: LD_ADDR_VAR 0 5
75105: PUSH
75106: LD_VAR 0 4
75110: PPUSH
75111: CALL_OW 504
75115: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75116: LD_VAR 0 5
75120: PPUSH
75121: CALL_OW 255
75125: PUSH
75126: LD_VAR 0 1
75130: EQUAL
75131: IFFALSE 75147
// begin result := un ;
75133: LD_ADDR_VAR 0 3
75137: PUSH
75138: LD_VAR 0 5
75142: ST_TO_ADDR
// exit ;
75143: POP
75144: POP
75145: GO 75151
// end ; end ;
75147: GO 75098
75149: POP
75150: POP
// end ;
75151: LD_VAR 0 3
75155: RET
// export function GetCargoBay ( units ) ; begin
75156: LD_INT 0
75158: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75159: LD_ADDR_VAR 0 2
75163: PUSH
75164: LD_VAR 0 1
75168: PPUSH
75169: LD_INT 2
75171: PUSH
75172: LD_INT 34
75174: PUSH
75175: LD_INT 12
75177: PUSH
75178: EMPTY
75179: LIST
75180: LIST
75181: PUSH
75182: LD_INT 34
75184: PUSH
75185: LD_INT 51
75187: PUSH
75188: EMPTY
75189: LIST
75190: LIST
75191: PUSH
75192: LD_INT 34
75194: PUSH
75195: LD_INT 32
75197: PUSH
75198: EMPTY
75199: LIST
75200: LIST
75201: PUSH
75202: LD_INT 34
75204: PUSH
75205: LD_INT 89
75207: PUSH
75208: EMPTY
75209: LIST
75210: LIST
75211: PUSH
75212: EMPTY
75213: LIST
75214: LIST
75215: LIST
75216: LIST
75217: LIST
75218: PPUSH
75219: CALL_OW 72
75223: ST_TO_ADDR
// end ;
75224: LD_VAR 0 2
75228: RET
// export function Negate ( value ) ; begin
75229: LD_INT 0
75231: PPUSH
// result := not value ;
75232: LD_ADDR_VAR 0 2
75236: PUSH
75237: LD_VAR 0 1
75241: NOT
75242: ST_TO_ADDR
// end ;
75243: LD_VAR 0 2
75247: RET
// export function Inc ( value ) ; begin
75248: LD_INT 0
75250: PPUSH
// result := value + 1 ;
75251: LD_ADDR_VAR 0 2
75255: PUSH
75256: LD_VAR 0 1
75260: PUSH
75261: LD_INT 1
75263: PLUS
75264: ST_TO_ADDR
// end ;
75265: LD_VAR 0 2
75269: RET
// export function Dec ( value ) ; begin
75270: LD_INT 0
75272: PPUSH
// result := value - 1 ;
75273: LD_ADDR_VAR 0 2
75277: PUSH
75278: LD_VAR 0 1
75282: PUSH
75283: LD_INT 1
75285: MINUS
75286: ST_TO_ADDR
// end ;
75287: LD_VAR 0 2
75291: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75292: LD_INT 0
75294: PPUSH
75295: PPUSH
75296: PPUSH
75297: PPUSH
75298: PPUSH
75299: PPUSH
75300: PPUSH
75301: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75302: LD_VAR 0 1
75306: PPUSH
75307: LD_VAR 0 2
75311: PPUSH
75312: CALL_OW 488
75316: NOT
75317: PUSH
75318: LD_VAR 0 3
75322: PPUSH
75323: LD_VAR 0 4
75327: PPUSH
75328: CALL_OW 488
75332: NOT
75333: OR
75334: IFFALSE 75347
// begin result := - 1 ;
75336: LD_ADDR_VAR 0 5
75340: PUSH
75341: LD_INT 1
75343: NEG
75344: ST_TO_ADDR
// exit ;
75345: GO 75582
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75347: LD_ADDR_VAR 0 12
75351: PUSH
75352: LD_VAR 0 1
75356: PPUSH
75357: LD_VAR 0 2
75361: PPUSH
75362: LD_VAR 0 3
75366: PPUSH
75367: LD_VAR 0 4
75371: PPUSH
75372: CALL 74432 0 4
75376: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75377: LD_ADDR_VAR 0 11
75381: PUSH
75382: LD_VAR 0 1
75386: PPUSH
75387: LD_VAR 0 2
75391: PPUSH
75392: LD_VAR 0 12
75396: PUSH
75397: LD_INT 1
75399: ARRAY
75400: PPUSH
75401: LD_VAR 0 12
75405: PUSH
75406: LD_INT 2
75408: ARRAY
75409: PPUSH
75410: CALL_OW 298
75414: ST_TO_ADDR
// distance := 9999 ;
75415: LD_ADDR_VAR 0 10
75419: PUSH
75420: LD_INT 9999
75422: ST_TO_ADDR
// for i := 0 to 5 do
75423: LD_ADDR_VAR 0 6
75427: PUSH
75428: DOUBLE
75429: LD_INT 0
75431: DEC
75432: ST_TO_ADDR
75433: LD_INT 5
75435: PUSH
75436: FOR_TO
75437: IFFALSE 75580
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75439: LD_ADDR_VAR 0 7
75443: PUSH
75444: LD_VAR 0 1
75448: PPUSH
75449: LD_VAR 0 6
75453: PPUSH
75454: LD_VAR 0 11
75458: PPUSH
75459: CALL_OW 272
75463: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75464: LD_ADDR_VAR 0 8
75468: PUSH
75469: LD_VAR 0 2
75473: PPUSH
75474: LD_VAR 0 6
75478: PPUSH
75479: LD_VAR 0 11
75483: PPUSH
75484: CALL_OW 273
75488: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75489: LD_VAR 0 7
75493: PPUSH
75494: LD_VAR 0 8
75498: PPUSH
75499: CALL_OW 488
75503: NOT
75504: IFFALSE 75508
// continue ;
75506: GO 75436
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75508: LD_ADDR_VAR 0 9
75512: PUSH
75513: LD_VAR 0 12
75517: PUSH
75518: LD_INT 1
75520: ARRAY
75521: PPUSH
75522: LD_VAR 0 12
75526: PUSH
75527: LD_INT 2
75529: ARRAY
75530: PPUSH
75531: LD_VAR 0 7
75535: PPUSH
75536: LD_VAR 0 8
75540: PPUSH
75541: CALL_OW 298
75545: ST_TO_ADDR
// if tmp < distance then
75546: LD_VAR 0 9
75550: PUSH
75551: LD_VAR 0 10
75555: LESS
75556: IFFALSE 75578
// begin result := i ;
75558: LD_ADDR_VAR 0 5
75562: PUSH
75563: LD_VAR 0 6
75567: ST_TO_ADDR
// distance := tmp ;
75568: LD_ADDR_VAR 0 10
75572: PUSH
75573: LD_VAR 0 9
75577: ST_TO_ADDR
// end ; end ;
75578: GO 75436
75580: POP
75581: POP
// end ;
75582: LD_VAR 0 5
75586: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75587: LD_INT 0
75589: PPUSH
75590: PPUSH
// if not driver or not IsInUnit ( driver ) then
75591: LD_VAR 0 1
75595: NOT
75596: PUSH
75597: LD_VAR 0 1
75601: PPUSH
75602: CALL_OW 310
75606: NOT
75607: OR
75608: IFFALSE 75612
// exit ;
75610: GO 75702
// vehicle := IsInUnit ( driver ) ;
75612: LD_ADDR_VAR 0 3
75616: PUSH
75617: LD_VAR 0 1
75621: PPUSH
75622: CALL_OW 310
75626: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75627: LD_VAR 0 1
75631: PPUSH
75632: LD_STRING \
75634: PUSH
75635: LD_INT 0
75637: PUSH
75638: LD_INT 0
75640: PUSH
75641: LD_INT 0
75643: PUSH
75644: LD_INT 0
75646: PUSH
75647: LD_INT 0
75649: PUSH
75650: LD_INT 0
75652: PUSH
75653: EMPTY
75654: LIST
75655: LIST
75656: LIST
75657: LIST
75658: LIST
75659: LIST
75660: LIST
75661: PUSH
75662: LD_STRING E
75664: PUSH
75665: LD_INT 0
75667: PUSH
75668: LD_INT 0
75670: PUSH
75671: LD_VAR 0 3
75675: PUSH
75676: LD_INT 0
75678: PUSH
75679: LD_INT 0
75681: PUSH
75682: LD_INT 0
75684: PUSH
75685: EMPTY
75686: LIST
75687: LIST
75688: LIST
75689: LIST
75690: LIST
75691: LIST
75692: LIST
75693: PUSH
75694: EMPTY
75695: LIST
75696: LIST
75697: PPUSH
75698: CALL_OW 446
// end ;
75702: LD_VAR 0 2
75706: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75707: LD_INT 0
75709: PPUSH
75710: PPUSH
// if not driver or not IsInUnit ( driver ) then
75711: LD_VAR 0 1
75715: NOT
75716: PUSH
75717: LD_VAR 0 1
75721: PPUSH
75722: CALL_OW 310
75726: NOT
75727: OR
75728: IFFALSE 75732
// exit ;
75730: GO 75822
// vehicle := IsInUnit ( driver ) ;
75732: LD_ADDR_VAR 0 3
75736: PUSH
75737: LD_VAR 0 1
75741: PPUSH
75742: CALL_OW 310
75746: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75747: LD_VAR 0 1
75751: PPUSH
75752: LD_STRING \
75754: PUSH
75755: LD_INT 0
75757: PUSH
75758: LD_INT 0
75760: PUSH
75761: LD_INT 0
75763: PUSH
75764: LD_INT 0
75766: PUSH
75767: LD_INT 0
75769: PUSH
75770: LD_INT 0
75772: PUSH
75773: EMPTY
75774: LIST
75775: LIST
75776: LIST
75777: LIST
75778: LIST
75779: LIST
75780: LIST
75781: PUSH
75782: LD_STRING E
75784: PUSH
75785: LD_INT 0
75787: PUSH
75788: LD_INT 0
75790: PUSH
75791: LD_VAR 0 3
75795: PUSH
75796: LD_INT 0
75798: PUSH
75799: LD_INT 0
75801: PUSH
75802: LD_INT 0
75804: PUSH
75805: EMPTY
75806: LIST
75807: LIST
75808: LIST
75809: LIST
75810: LIST
75811: LIST
75812: LIST
75813: PUSH
75814: EMPTY
75815: LIST
75816: LIST
75817: PPUSH
75818: CALL_OW 447
// end ;
75822: LD_VAR 0 2
75826: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75827: LD_INT 0
75829: PPUSH
75830: PPUSH
75831: PPUSH
// tmp := [ ] ;
75832: LD_ADDR_VAR 0 5
75836: PUSH
75837: EMPTY
75838: ST_TO_ADDR
// for i in units do
75839: LD_ADDR_VAR 0 4
75843: PUSH
75844: LD_VAR 0 1
75848: PUSH
75849: FOR_IN
75850: IFFALSE 75888
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75852: LD_ADDR_VAR 0 5
75856: PUSH
75857: LD_VAR 0 5
75861: PPUSH
75862: LD_VAR 0 5
75866: PUSH
75867: LD_INT 1
75869: PLUS
75870: PPUSH
75871: LD_VAR 0 4
75875: PPUSH
75876: CALL_OW 256
75880: PPUSH
75881: CALL_OW 2
75885: ST_TO_ADDR
75886: GO 75849
75888: POP
75889: POP
// if not tmp then
75890: LD_VAR 0 5
75894: NOT
75895: IFFALSE 75899
// exit ;
75897: GO 75947
// if asc then
75899: LD_VAR 0 2
75903: IFFALSE 75927
// result := SortListByListAsc ( units , tmp ) else
75905: LD_ADDR_VAR 0 3
75909: PUSH
75910: LD_VAR 0 1
75914: PPUSH
75915: LD_VAR 0 5
75919: PPUSH
75920: CALL_OW 76
75924: ST_TO_ADDR
75925: GO 75947
// result := SortListByListDesc ( units , tmp ) ;
75927: LD_ADDR_VAR 0 3
75931: PUSH
75932: LD_VAR 0 1
75936: PPUSH
75937: LD_VAR 0 5
75941: PPUSH
75942: CALL_OW 77
75946: ST_TO_ADDR
// end ;
75947: LD_VAR 0 3
75951: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75952: LD_INT 0
75954: PPUSH
75955: PPUSH
// task := GetTaskList ( mech ) ;
75956: LD_ADDR_VAR 0 4
75960: PUSH
75961: LD_VAR 0 1
75965: PPUSH
75966: CALL_OW 437
75970: ST_TO_ADDR
// if not task then
75971: LD_VAR 0 4
75975: NOT
75976: IFFALSE 75980
// exit ;
75978: GO 76022
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75980: LD_ADDR_VAR 0 3
75984: PUSH
75985: LD_VAR 0 4
75989: PUSH
75990: LD_INT 1
75992: ARRAY
75993: PUSH
75994: LD_INT 1
75996: ARRAY
75997: PUSH
75998: LD_STRING r
76000: EQUAL
76001: PUSH
76002: LD_VAR 0 4
76006: PUSH
76007: LD_INT 1
76009: ARRAY
76010: PUSH
76011: LD_INT 4
76013: ARRAY
76014: PUSH
76015: LD_VAR 0 2
76019: EQUAL
76020: AND
76021: ST_TO_ADDR
// end ;
76022: LD_VAR 0 3
76026: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76027: LD_INT 0
76029: PPUSH
// SetDir ( unit , d ) ;
76030: LD_VAR 0 1
76034: PPUSH
76035: LD_VAR 0 4
76039: PPUSH
76040: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76044: LD_VAR 0 1
76048: PPUSH
76049: LD_VAR 0 2
76053: PPUSH
76054: LD_VAR 0 3
76058: PPUSH
76059: LD_VAR 0 5
76063: PPUSH
76064: CALL_OW 48
// end ;
76068: LD_VAR 0 6
76072: RET
// export function ToNaturalNumber ( number ) ; begin
76073: LD_INT 0
76075: PPUSH
// result := number div 1 ;
76076: LD_ADDR_VAR 0 2
76080: PUSH
76081: LD_VAR 0 1
76085: PUSH
76086: LD_INT 1
76088: DIV
76089: ST_TO_ADDR
// if number < 0 then
76090: LD_VAR 0 1
76094: PUSH
76095: LD_INT 0
76097: LESS
76098: IFFALSE 76108
// result := 0 ;
76100: LD_ADDR_VAR 0 2
76104: PUSH
76105: LD_INT 0
76107: ST_TO_ADDR
// end ;
76108: LD_VAR 0 2
76112: RET
// export function SortByClass ( units , class ) ; var un ; begin
76113: LD_INT 0
76115: PPUSH
76116: PPUSH
// if not units or not class then
76117: LD_VAR 0 1
76121: NOT
76122: PUSH
76123: LD_VAR 0 2
76127: NOT
76128: OR
76129: IFFALSE 76133
// exit ;
76131: GO 76228
// result := [ ] ;
76133: LD_ADDR_VAR 0 3
76137: PUSH
76138: EMPTY
76139: ST_TO_ADDR
// for un in units do
76140: LD_ADDR_VAR 0 4
76144: PUSH
76145: LD_VAR 0 1
76149: PUSH
76150: FOR_IN
76151: IFFALSE 76226
// if GetClass ( un ) = class then
76153: LD_VAR 0 4
76157: PPUSH
76158: CALL_OW 257
76162: PUSH
76163: LD_VAR 0 2
76167: EQUAL
76168: IFFALSE 76195
// result := Insert ( result , 1 , un ) else
76170: LD_ADDR_VAR 0 3
76174: PUSH
76175: LD_VAR 0 3
76179: PPUSH
76180: LD_INT 1
76182: PPUSH
76183: LD_VAR 0 4
76187: PPUSH
76188: CALL_OW 2
76192: ST_TO_ADDR
76193: GO 76224
// result := Replace ( result , result + 1 , un ) ;
76195: LD_ADDR_VAR 0 3
76199: PUSH
76200: LD_VAR 0 3
76204: PPUSH
76205: LD_VAR 0 3
76209: PUSH
76210: LD_INT 1
76212: PLUS
76213: PPUSH
76214: LD_VAR 0 4
76218: PPUSH
76219: CALL_OW 1
76223: ST_TO_ADDR
76224: GO 76150
76226: POP
76227: POP
// end ;
76228: LD_VAR 0 3
76232: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76233: LD_INT 0
76235: PPUSH
76236: PPUSH
76237: PPUSH
76238: PPUSH
76239: PPUSH
76240: PPUSH
76241: PPUSH
// result := [ ] ;
76242: LD_ADDR_VAR 0 4
76246: PUSH
76247: EMPTY
76248: ST_TO_ADDR
// if x - r < 0 then
76249: LD_VAR 0 1
76253: PUSH
76254: LD_VAR 0 3
76258: MINUS
76259: PUSH
76260: LD_INT 0
76262: LESS
76263: IFFALSE 76275
// min_x := 0 else
76265: LD_ADDR_VAR 0 8
76269: PUSH
76270: LD_INT 0
76272: ST_TO_ADDR
76273: GO 76291
// min_x := x - r ;
76275: LD_ADDR_VAR 0 8
76279: PUSH
76280: LD_VAR 0 1
76284: PUSH
76285: LD_VAR 0 3
76289: MINUS
76290: ST_TO_ADDR
// if y - r < 0 then
76291: LD_VAR 0 2
76295: PUSH
76296: LD_VAR 0 3
76300: MINUS
76301: PUSH
76302: LD_INT 0
76304: LESS
76305: IFFALSE 76317
// min_y := 0 else
76307: LD_ADDR_VAR 0 7
76311: PUSH
76312: LD_INT 0
76314: ST_TO_ADDR
76315: GO 76333
// min_y := y - r ;
76317: LD_ADDR_VAR 0 7
76321: PUSH
76322: LD_VAR 0 2
76326: PUSH
76327: LD_VAR 0 3
76331: MINUS
76332: ST_TO_ADDR
// max_x := x + r ;
76333: LD_ADDR_VAR 0 9
76337: PUSH
76338: LD_VAR 0 1
76342: PUSH
76343: LD_VAR 0 3
76347: PLUS
76348: ST_TO_ADDR
// max_y := y + r ;
76349: LD_ADDR_VAR 0 10
76353: PUSH
76354: LD_VAR 0 2
76358: PUSH
76359: LD_VAR 0 3
76363: PLUS
76364: ST_TO_ADDR
// for _x = min_x to max_x do
76365: LD_ADDR_VAR 0 5
76369: PUSH
76370: DOUBLE
76371: LD_VAR 0 8
76375: DEC
76376: ST_TO_ADDR
76377: LD_VAR 0 9
76381: PUSH
76382: FOR_TO
76383: IFFALSE 76484
// for _y = min_y to max_y do
76385: LD_ADDR_VAR 0 6
76389: PUSH
76390: DOUBLE
76391: LD_VAR 0 7
76395: DEC
76396: ST_TO_ADDR
76397: LD_VAR 0 10
76401: PUSH
76402: FOR_TO
76403: IFFALSE 76480
// begin if not ValidHex ( _x , _y ) then
76405: LD_VAR 0 5
76409: PPUSH
76410: LD_VAR 0 6
76414: PPUSH
76415: CALL_OW 488
76419: NOT
76420: IFFALSE 76424
// continue ;
76422: GO 76402
// if GetResourceTypeXY ( _x , _y ) then
76424: LD_VAR 0 5
76428: PPUSH
76429: LD_VAR 0 6
76433: PPUSH
76434: CALL_OW 283
76438: IFFALSE 76478
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76440: LD_ADDR_VAR 0 4
76444: PUSH
76445: LD_VAR 0 4
76449: PPUSH
76450: LD_VAR 0 4
76454: PUSH
76455: LD_INT 1
76457: PLUS
76458: PPUSH
76459: LD_VAR 0 5
76463: PUSH
76464: LD_VAR 0 6
76468: PUSH
76469: EMPTY
76470: LIST
76471: LIST
76472: PPUSH
76473: CALL_OW 1
76477: ST_TO_ADDR
// end ;
76478: GO 76402
76480: POP
76481: POP
76482: GO 76382
76484: POP
76485: POP
// end ;
76486: LD_VAR 0 4
76490: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76491: LD_INT 0
76493: PPUSH
76494: PPUSH
76495: PPUSH
76496: PPUSH
76497: PPUSH
76498: PPUSH
76499: PPUSH
76500: PPUSH
// if not units then
76501: LD_VAR 0 1
76505: NOT
76506: IFFALSE 76510
// exit ;
76508: GO 77034
// result := UnitFilter ( units , [ f_ok ] ) ;
76510: LD_ADDR_VAR 0 3
76514: PUSH
76515: LD_VAR 0 1
76519: PPUSH
76520: LD_INT 50
76522: PUSH
76523: EMPTY
76524: LIST
76525: PPUSH
76526: CALL_OW 72
76530: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76531: LD_ADDR_VAR 0 8
76535: PUSH
76536: LD_VAR 0 1
76540: PUSH
76541: LD_INT 1
76543: ARRAY
76544: PPUSH
76545: CALL_OW 255
76549: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
76550: LD_ADDR_VAR 0 10
76554: PUSH
76555: LD_INT 29
76557: PUSH
76558: LD_INT 91
76560: PUSH
76561: LD_INT 49
76563: PUSH
76564: EMPTY
76565: LIST
76566: LIST
76567: LIST
76568: ST_TO_ADDR
// if not result then
76569: LD_VAR 0 3
76573: NOT
76574: IFFALSE 76578
// exit ;
76576: GO 77034
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76578: LD_ADDR_VAR 0 5
76582: PUSH
76583: LD_INT 81
76585: PUSH
76586: LD_VAR 0 8
76590: PUSH
76591: EMPTY
76592: LIST
76593: LIST
76594: PPUSH
76595: CALL_OW 69
76599: ST_TO_ADDR
// for i in result do
76600: LD_ADDR_VAR 0 4
76604: PUSH
76605: LD_VAR 0 3
76609: PUSH
76610: FOR_IN
76611: IFFALSE 77032
// begin tag := GetTag ( i ) + 1 ;
76613: LD_ADDR_VAR 0 9
76617: PUSH
76618: LD_VAR 0 4
76622: PPUSH
76623: CALL_OW 110
76627: PUSH
76628: LD_INT 1
76630: PLUS
76631: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76632: LD_ADDR_VAR 0 7
76636: PUSH
76637: LD_VAR 0 4
76641: PPUSH
76642: CALL_OW 250
76646: PPUSH
76647: LD_VAR 0 4
76651: PPUSH
76652: CALL_OW 251
76656: PPUSH
76657: LD_INT 6
76659: PPUSH
76660: CALL 76233 0 3
76664: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
76665: LD_VAR 0 4
76669: PPUSH
76670: CALL_OW 247
76674: PUSH
76675: LD_INT 2
76677: EQUAL
76678: PUSH
76679: LD_VAR 0 7
76683: AND
76684: PUSH
76685: LD_VAR 0 4
76689: PPUSH
76690: CALL_OW 264
76694: PUSH
76695: LD_VAR 0 10
76699: IN
76700: NOT
76701: AND
76702: IFFALSE 76741
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76704: LD_VAR 0 4
76708: PPUSH
76709: LD_VAR 0 7
76713: PUSH
76714: LD_INT 1
76716: ARRAY
76717: PUSH
76718: LD_INT 1
76720: ARRAY
76721: PPUSH
76722: LD_VAR 0 7
76726: PUSH
76727: LD_INT 1
76729: ARRAY
76730: PUSH
76731: LD_INT 2
76733: ARRAY
76734: PPUSH
76735: CALL_OW 116
76739: GO 77030
// if path > tag then
76741: LD_VAR 0 2
76745: PUSH
76746: LD_VAR 0 9
76750: GREATER
76751: IFFALSE 76959
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
76753: LD_ADDR_VAR 0 6
76757: PUSH
76758: LD_VAR 0 5
76762: PPUSH
76763: LD_INT 91
76765: PUSH
76766: LD_VAR 0 4
76770: PUSH
76771: LD_INT 8
76773: PUSH
76774: EMPTY
76775: LIST
76776: LIST
76777: LIST
76778: PPUSH
76779: CALL_OW 72
76783: ST_TO_ADDR
// if nearEnemy then
76784: LD_VAR 0 6
76788: IFFALSE 76857
// begin if GetWeapon ( i ) = ru_time_lapser then
76790: LD_VAR 0 4
76794: PPUSH
76795: CALL_OW 264
76799: PUSH
76800: LD_INT 49
76802: EQUAL
76803: IFFALSE 76831
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
76805: LD_VAR 0 4
76809: PPUSH
76810: LD_VAR 0 6
76814: PPUSH
76815: LD_VAR 0 4
76819: PPUSH
76820: CALL_OW 74
76824: PPUSH
76825: CALL_OW 112
76829: GO 76855
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
76831: LD_VAR 0 4
76835: PPUSH
76836: LD_VAR 0 6
76840: PPUSH
76841: LD_VAR 0 4
76845: PPUSH
76846: CALL_OW 74
76850: PPUSH
76851: CALL_OW 115
// end else
76855: GO 76957
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76857: LD_VAR 0 4
76861: PPUSH
76862: LD_VAR 0 2
76866: PUSH
76867: LD_VAR 0 9
76871: ARRAY
76872: PUSH
76873: LD_INT 1
76875: ARRAY
76876: PPUSH
76877: LD_VAR 0 2
76881: PUSH
76882: LD_VAR 0 9
76886: ARRAY
76887: PUSH
76888: LD_INT 2
76890: ARRAY
76891: PPUSH
76892: CALL_OW 297
76896: PUSH
76897: LD_INT 6
76899: GREATER
76900: IFFALSE 76943
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
76902: LD_VAR 0 4
76906: PPUSH
76907: LD_VAR 0 2
76911: PUSH
76912: LD_VAR 0 9
76916: ARRAY
76917: PUSH
76918: LD_INT 1
76920: ARRAY
76921: PPUSH
76922: LD_VAR 0 2
76926: PUSH
76927: LD_VAR 0 9
76931: ARRAY
76932: PUSH
76933: LD_INT 2
76935: ARRAY
76936: PPUSH
76937: CALL_OW 114
76941: GO 76957
// SetTag ( i , tag ) ;
76943: LD_VAR 0 4
76947: PPUSH
76948: LD_VAR 0 9
76952: PPUSH
76953: CALL_OW 109
// end else
76957: GO 77030
// if enemy then
76959: LD_VAR 0 5
76963: IFFALSE 77030
// begin if GetWeapon ( i ) = ru_time_lapser then
76965: LD_VAR 0 4
76969: PPUSH
76970: CALL_OW 264
76974: PUSH
76975: LD_INT 49
76977: EQUAL
76978: IFFALSE 77006
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
76980: LD_VAR 0 4
76984: PPUSH
76985: LD_VAR 0 5
76989: PPUSH
76990: LD_VAR 0 4
76994: PPUSH
76995: CALL_OW 74
76999: PPUSH
77000: CALL_OW 112
77004: GO 77030
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77006: LD_VAR 0 4
77010: PPUSH
77011: LD_VAR 0 5
77015: PPUSH
77016: LD_VAR 0 4
77020: PPUSH
77021: CALL_OW 74
77025: PPUSH
77026: CALL_OW 115
// end ; end ;
77030: GO 76610
77032: POP
77033: POP
// end ;
77034: LD_VAR 0 3
77038: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77039: LD_INT 0
77041: PPUSH
77042: PPUSH
77043: PPUSH
// if not unit or IsInUnit ( unit ) then
77044: LD_VAR 0 1
77048: NOT
77049: PUSH
77050: LD_VAR 0 1
77054: PPUSH
77055: CALL_OW 310
77059: OR
77060: IFFALSE 77064
// exit ;
77062: GO 77155
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77064: LD_ADDR_VAR 0 4
77068: PUSH
77069: LD_VAR 0 1
77073: PPUSH
77074: CALL_OW 250
77078: PPUSH
77079: LD_VAR 0 2
77083: PPUSH
77084: LD_INT 1
77086: PPUSH
77087: CALL_OW 272
77091: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77092: LD_ADDR_VAR 0 5
77096: PUSH
77097: LD_VAR 0 1
77101: PPUSH
77102: CALL_OW 251
77106: PPUSH
77107: LD_VAR 0 2
77111: PPUSH
77112: LD_INT 1
77114: PPUSH
77115: CALL_OW 273
77119: ST_TO_ADDR
// if ValidHex ( x , y ) then
77120: LD_VAR 0 4
77124: PPUSH
77125: LD_VAR 0 5
77129: PPUSH
77130: CALL_OW 488
77134: IFFALSE 77155
// ComTurnXY ( unit , x , y ) ;
77136: LD_VAR 0 1
77140: PPUSH
77141: LD_VAR 0 4
77145: PPUSH
77146: LD_VAR 0 5
77150: PPUSH
77151: CALL_OW 118
// end ;
77155: LD_VAR 0 3
77159: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77160: LD_INT 0
77162: PPUSH
77163: PPUSH
// result := false ;
77164: LD_ADDR_VAR 0 3
77168: PUSH
77169: LD_INT 0
77171: ST_TO_ADDR
// if not units then
77172: LD_VAR 0 2
77176: NOT
77177: IFFALSE 77181
// exit ;
77179: GO 77226
// for i in units do
77181: LD_ADDR_VAR 0 4
77185: PUSH
77186: LD_VAR 0 2
77190: PUSH
77191: FOR_IN
77192: IFFALSE 77224
// if See ( side , i ) then
77194: LD_VAR 0 1
77198: PPUSH
77199: LD_VAR 0 4
77203: PPUSH
77204: CALL_OW 292
77208: IFFALSE 77222
// begin result := true ;
77210: LD_ADDR_VAR 0 3
77214: PUSH
77215: LD_INT 1
77217: ST_TO_ADDR
// exit ;
77218: POP
77219: POP
77220: GO 77226
// end ;
77222: GO 77191
77224: POP
77225: POP
// end ;
77226: LD_VAR 0 3
77230: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77231: LD_INT 0
77233: PPUSH
77234: PPUSH
77235: PPUSH
77236: PPUSH
// if not unit or not points then
77237: LD_VAR 0 1
77241: NOT
77242: PUSH
77243: LD_VAR 0 2
77247: NOT
77248: OR
77249: IFFALSE 77253
// exit ;
77251: GO 77343
// dist := 99999 ;
77253: LD_ADDR_VAR 0 5
77257: PUSH
77258: LD_INT 99999
77260: ST_TO_ADDR
// for i in points do
77261: LD_ADDR_VAR 0 4
77265: PUSH
77266: LD_VAR 0 2
77270: PUSH
77271: FOR_IN
77272: IFFALSE 77341
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77274: LD_ADDR_VAR 0 6
77278: PUSH
77279: LD_VAR 0 1
77283: PPUSH
77284: LD_VAR 0 4
77288: PUSH
77289: LD_INT 1
77291: ARRAY
77292: PPUSH
77293: LD_VAR 0 4
77297: PUSH
77298: LD_INT 2
77300: ARRAY
77301: PPUSH
77302: CALL_OW 297
77306: ST_TO_ADDR
// if tmpDist < dist then
77307: LD_VAR 0 6
77311: PUSH
77312: LD_VAR 0 5
77316: LESS
77317: IFFALSE 77339
// begin result := i ;
77319: LD_ADDR_VAR 0 3
77323: PUSH
77324: LD_VAR 0 4
77328: ST_TO_ADDR
// dist := tmpDist ;
77329: LD_ADDR_VAR 0 5
77333: PUSH
77334: LD_VAR 0 6
77338: ST_TO_ADDR
// end ; end ;
77339: GO 77271
77341: POP
77342: POP
// end ;
77343: LD_VAR 0 3
77347: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
77348: LD_INT 0
77350: PPUSH
// uc_side := side ;
77351: LD_ADDR_OWVAR 20
77355: PUSH
77356: LD_VAR 0 1
77360: ST_TO_ADDR
// uc_nation := 3 ;
77361: LD_ADDR_OWVAR 21
77365: PUSH
77366: LD_INT 3
77368: ST_TO_ADDR
// vc_chassis := 25 ;
77369: LD_ADDR_OWVAR 37
77373: PUSH
77374: LD_INT 25
77376: ST_TO_ADDR
// vc_engine := engine_siberite ;
77377: LD_ADDR_OWVAR 39
77381: PUSH
77382: LD_INT 3
77384: ST_TO_ADDR
// vc_control := control_computer ;
77385: LD_ADDR_OWVAR 38
77389: PUSH
77390: LD_INT 3
77392: ST_TO_ADDR
// vc_weapon := 59 ;
77393: LD_ADDR_OWVAR 40
77397: PUSH
77398: LD_INT 59
77400: ST_TO_ADDR
// result := CreateVehicle ;
77401: LD_ADDR_VAR 0 5
77405: PUSH
77406: CALL_OW 45
77410: ST_TO_ADDR
// SetDir ( result , d ) ;
77411: LD_VAR 0 5
77415: PPUSH
77416: LD_VAR 0 4
77420: PPUSH
77421: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
77425: LD_VAR 0 5
77429: PPUSH
77430: LD_VAR 0 2
77434: PPUSH
77435: LD_VAR 0 3
77439: PPUSH
77440: LD_INT 0
77442: PPUSH
77443: CALL_OW 48
// end ;
77447: LD_VAR 0 5
77451: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
77452: LD_INT 0
77454: PPUSH
77455: PPUSH
77456: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
77457: LD_ADDR_VAR 0 2
77461: PUSH
77462: LD_INT 0
77464: PUSH
77465: LD_INT 0
77467: PUSH
77468: LD_INT 0
77470: PUSH
77471: LD_INT 0
77473: PUSH
77474: EMPTY
77475: LIST
77476: LIST
77477: LIST
77478: LIST
77479: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
77480: LD_VAR 0 1
77484: NOT
77485: PUSH
77486: LD_VAR 0 1
77490: PPUSH
77491: CALL_OW 264
77495: PUSH
77496: LD_INT 12
77498: PUSH
77499: LD_INT 51
77501: PUSH
77502: LD_INT 32
77504: PUSH
77505: LD_INT 89
77507: PUSH
77508: EMPTY
77509: LIST
77510: LIST
77511: LIST
77512: LIST
77513: IN
77514: NOT
77515: OR
77516: IFFALSE 77520
// exit ;
77518: GO 77618
// for i := 1 to 3 do
77520: LD_ADDR_VAR 0 3
77524: PUSH
77525: DOUBLE
77526: LD_INT 1
77528: DEC
77529: ST_TO_ADDR
77530: LD_INT 3
77532: PUSH
77533: FOR_TO
77534: IFFALSE 77616
// begin tmp := GetCargo ( cargo , i ) ;
77536: LD_ADDR_VAR 0 4
77540: PUSH
77541: LD_VAR 0 1
77545: PPUSH
77546: LD_VAR 0 3
77550: PPUSH
77551: CALL_OW 289
77555: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
77556: LD_ADDR_VAR 0 2
77560: PUSH
77561: LD_VAR 0 2
77565: PPUSH
77566: LD_VAR 0 3
77570: PPUSH
77571: LD_VAR 0 4
77575: PPUSH
77576: CALL_OW 1
77580: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
77581: LD_ADDR_VAR 0 2
77585: PUSH
77586: LD_VAR 0 2
77590: PPUSH
77591: LD_INT 4
77593: PPUSH
77594: LD_VAR 0 2
77598: PUSH
77599: LD_INT 4
77601: ARRAY
77602: PUSH
77603: LD_VAR 0 4
77607: PLUS
77608: PPUSH
77609: CALL_OW 1
77613: ST_TO_ADDR
// end ;
77614: GO 77533
77616: POP
77617: POP
// end ;
77618: LD_VAR 0 2
77622: RET
// export function Length ( array ) ; begin
77623: LD_INT 0
77625: PPUSH
// result := array + 0 ;
77626: LD_ADDR_VAR 0 2
77630: PUSH
77631: LD_VAR 0 1
77635: PUSH
77636: LD_INT 0
77638: PLUS
77639: ST_TO_ADDR
// end ;
77640: LD_VAR 0 2
77644: RET
// export function PrepareArray ( array ) ; begin
77645: LD_INT 0
77647: PPUSH
// result := array diff 0 ;
77648: LD_ADDR_VAR 0 2
77652: PUSH
77653: LD_VAR 0 1
77657: PUSH
77658: LD_INT 0
77660: DIFF
77661: ST_TO_ADDR
// if not result [ 1 ] then
77662: LD_VAR 0 2
77666: PUSH
77667: LD_INT 1
77669: ARRAY
77670: NOT
77671: IFFALSE 77691
// result := Delete ( result , 1 ) ;
77673: LD_ADDR_VAR 0 2
77677: PUSH
77678: LD_VAR 0 2
77682: PPUSH
77683: LD_INT 1
77685: PPUSH
77686: CALL_OW 3
77690: ST_TO_ADDR
// end ; end_of_file
77691: LD_VAR 0 2
77695: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77696: LD_VAR 0 1
77700: PUSH
77701: LD_INT 200
77703: DOUBLE
77704: GREATEREQUAL
77705: IFFALSE 77713
77707: LD_INT 299
77709: DOUBLE
77710: LESSEQUAL
77711: IFTRUE 77715
77713: GO 77747
77715: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77716: LD_VAR 0 1
77720: PPUSH
77721: LD_VAR 0 2
77725: PPUSH
77726: LD_VAR 0 3
77730: PPUSH
77731: LD_VAR 0 4
77735: PPUSH
77736: LD_VAR 0 5
77740: PPUSH
77741: CALL 32598 0 5
77745: GO 77824
77747: LD_INT 300
77749: DOUBLE
77750: GREATEREQUAL
77751: IFFALSE 77759
77753: LD_INT 399
77755: DOUBLE
77756: LESSEQUAL
77757: IFTRUE 77761
77759: GO 77823
77761: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77762: LD_VAR 0 1
77766: PPUSH
77767: LD_VAR 0 2
77771: PPUSH
77772: LD_VAR 0 3
77776: PPUSH
77777: LD_VAR 0 4
77781: PPUSH
77782: LD_VAR 0 5
77786: PPUSH
77787: LD_VAR 0 6
77791: PPUSH
77792: LD_VAR 0 7
77796: PPUSH
77797: LD_VAR 0 8
77801: PPUSH
77802: LD_VAR 0 9
77806: PPUSH
77807: LD_VAR 0 10
77811: PPUSH
77812: LD_VAR 0 11
77816: PPUSH
77817: CALL 28931 0 11
77821: GO 77824
77823: POP
// end ;
77824: PPOPN 11
77826: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77827: LD_VAR 0 1
77831: PPUSH
77832: LD_VAR 0 2
77836: PPUSH
77837: LD_VAR 0 3
77841: PPUSH
77842: LD_VAR 0 4
77846: PPUSH
77847: LD_VAR 0 5
77851: PPUSH
77852: CALL 32334 0 5
// end ; end_of_file
77856: PPOPN 5
77858: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77859: LD_VAR 0 1
77863: PPUSH
77864: LD_VAR 0 2
77868: PPUSH
77869: LD_VAR 0 3
77873: PPUSH
77874: LD_VAR 0 4
77878: PPUSH
77879: LD_VAR 0 5
77883: PPUSH
77884: LD_VAR 0 6
77888: PPUSH
77889: CALL 16624 0 6
// end ;
77893: PPOPN 6
77895: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77896: LD_INT 0
77898: PPUSH
// begin if not units then
77899: LD_VAR 0 1
77903: NOT
77904: IFFALSE 77908
// exit ;
77906: GO 77908
// end ;
77908: PPOPN 7
77910: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77911: CALL 16595 0 0
// end ;
77915: PPOPN 1
77917: END
