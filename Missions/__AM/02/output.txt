// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix , debug ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 77 0 0
// if debug then
  19: LD_EXP 34
  23: IFFALSE 40
// begin Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// end ; PrepareDifficulty ;
  40: CALL 10516 0 0
// PrepareRussianCommander ;
  44: CALL 12050 0 0
// PrepareSouthBase ;
  48: CALL 12146 0 0
// PrepareNorthBase ;
  52: CALL 12484 0 0
// PrepareOtherRussians ;
  56: CALL 12879 0 0
// PrepareHeroes ;
  60: CALL 10837 0 0
// PrepareLisSquad ;
  64: CALL 11207 0 0
// PrepareOtherAmericans ;
  68: CALL 11520 0 0
// Action ;
  72: CALL 329 0 0
// end ;
  76: END
// function Init ; begin
  77: LD_INT 0
  79: PPUSH
// debug := false ;
  80: LD_ADDR_EXP 34
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// mission_prefix := 02_ ;
  88: LD_ADDR_EXP 33
  92: PUSH
  93: LD_STRING 02_
  95: ST_TO_ADDR
// RuSoldMinLevel := 0 ;
  96: LD_ADDR_EXP 13
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// RuSoldMaxLevel := 0 ;
 104: LD_ADDR_EXP 14
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// hpJMM := 0 ;
 112: LD_ADDR_EXP 10
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// hpBobby := 0 ;
 120: LD_ADDR_EXP 11
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// hpCyrus := 0 ;
 128: LD_ADDR_EXP 12
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// cargoEscape := 0 ;
 136: LD_ADDR_EXP 20
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// mikhailStatus := 0 ;
 144: LD_ADDR_EXP 21
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// mikhailInBase := 0 ;
 152: LD_ADDR_EXP 22
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// mikhailDepot := 0 ;
 160: LD_ADDR_EXP 23
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// tigersRespawn := 0 ;
 168: LD_ADDR_EXP 30
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// cargoRespawn := 0 ;
 176: LD_ADDR_EXP 28
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cargoSee := 0 ;
 184: LD_ADDR_EXP 29
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// lastBattle := 0 ;
 192: LD_ADDR_EXP 27
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// deadsCounter := 0 ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// spotCorpses := 0 ;
 208: LD_ADDR_EXP 32
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// southBaseDefenders := [ ] ;
 216: LD_ADDR_EXP 25
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// northBaseDefenders := [ ] ;
 223: LD_ADDR_EXP 24
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// attackGroup := [ ] ;
 230: LD_ADDR_EXP 26
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// end ;
 237: LD_VAR 0 1
 241: RET
// every 0 0$1 trigger debug do var i ;
 242: LD_EXP 34
 246: IFFALSE 326
 248: GO 250
 250: DISABLE
 251: LD_INT 0
 253: PPUSH
// begin enable ;
 254: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
 255: LD_ADDR_VAR 0 1
 259: PUSH
 260: LD_INT 22
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 21
 272: PUSH
 273: LD_INT 1
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: LD_INT 3
 282: PUSH
 283: LD_INT 24
 285: PUSH
 286: LD_INT 1000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: PUSH
 307: FOR_IN
 308: IFFALSE 324
// SetLives ( i , 1000 ) ;
 310: LD_VAR 0 1
 314: PPUSH
 315: LD_INT 1000
 317: PPUSH
 318: CALL_OW 234
 322: GO 307
 324: POP
 325: POP
// end ; end_of_file
 326: PPOPN 1
 328: END
// export function Action ; var tmp ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// InGameOn ;
 333: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
 337: LD_EXP 1
 341: PPUSH
 342: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 346: LD_ADDR_VAR 0 2
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 4
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: LD_EXP 4
 384: PUSH
 385: EMPTY
 386: LIST
 387: DIFF
 388: ST_TO_ADDR
// if Cyrus and Bobby then
 389: LD_EXP 3
 393: PUSH
 394: LD_EXP 2
 398: AND
 399: IFFALSE 729
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 401: LD_EXP 3
 405: PPUSH
 406: LD_INT 43
 408: PPUSH
 409: LD_INT 72
 411: PPUSH
 412: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 416: LD_EXP 2
 420: PPUSH
 421: LD_INT 44
 423: PPUSH
 424: LD_INT 70
 426: PPUSH
 427: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 431: LD_EXP 1
 435: PPUSH
 436: LD_INT 46
 438: PPUSH
 439: LD_INT 73
 441: PPUSH
 442: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 446: LD_EXP 3
 450: PPUSH
 451: LD_STRING D1a-Cyrus-1
 453: PPUSH
 454: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 458: LD_EXP 1
 462: PPUSH
 463: LD_STRING D1a-JMM-1
 465: PPUSH
 466: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 470: LD_EXP 3
 474: PPUSH
 475: LD_INT 37
 477: PPUSH
 478: LD_INT 66
 480: PPUSH
 481: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 485: LD_EXP 2
 489: PPUSH
 490: LD_INT 41
 492: PPUSH
 493: LD_INT 67
 495: PPUSH
 496: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 500: LD_EXP 1
 504: PPUSH
 505: LD_INT 38
 507: PPUSH
 508: LD_INT 64
 510: PPUSH
 511: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 515: LD_EXP 2
 519: PPUSH
 520: LD_STRING D1a-Bobby-2
 522: PPUSH
 523: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 527: LD_EXP 3
 531: PPUSH
 532: LD_INT 35
 534: PPUSH
 535: LD_INT 62
 537: PPUSH
 538: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 542: LD_EXP 2
 546: PPUSH
 547: LD_INT 32
 549: PPUSH
 550: LD_INT 60
 552: PPUSH
 553: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_INT 35
 564: PPUSH
 565: LD_INT 60
 567: PPUSH
 568: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 572: LD_EXP 1
 576: PPUSH
 577: LD_STRING D1a-JMM-2
 579: PPUSH
 580: CALL_OW 88
// ComWalk ( Lisa ) ;
 584: LD_EXP 4
 588: PPUSH
 589: CALL_OW 138
// wait ( 0 0$1 ) ;
 593: LD_INT 35
 595: PPUSH
 596: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 600: LD_EXP 4
 604: PPUSH
 605: LD_EXP 1
 609: PPUSH
 610: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 614: LD_EXP 1
 618: PUSH
 619: LD_EXP 3
 623: PUSH
 624: LD_EXP 2
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: LIST
 633: PPUSH
 634: LD_EXP 4
 638: PPUSH
 639: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 643: LD_VAR 0 2
 647: PUSH
 648: LD_INT 1
 650: ARRAY
 651: PPUSH
 652: LD_INT 33
 654: PPUSH
 655: LD_INT 55
 657: PPUSH
 658: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 2
 669: ARRAY
 670: PPUSH
 671: LD_INT 30
 673: PPUSH
 674: LD_INT 54
 676: PPUSH
 677: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 1
 688: ARRAY
 689: PPUSH
 690: LD_EXP 1
 694: PPUSH
 695: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 699: LD_VAR 0 2
 703: PUSH
 704: LD_INT 2
 706: ARRAY
 707: PPUSH
 708: LD_EXP 1
 712: PPUSH
 713: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 717: LD_EXP 4
 721: PPUSH
 722: LD_STRING D1a-Lisa-2
 724: PPUSH
 725: CALL_OW 88
// end ; if Cyrus and not Bobby then
 729: LD_EXP 3
 733: PUSH
 734: LD_EXP 2
 738: NOT
 739: AND
 740: IFFALSE 945
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 742: LD_EXP 3
 746: PPUSH
 747: LD_INT 43
 749: PPUSH
 750: LD_INT 72
 752: PPUSH
 753: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 757: LD_EXP 1
 761: PPUSH
 762: LD_INT 46
 764: PPUSH
 765: LD_INT 73
 767: PPUSH
 768: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 772: LD_EXP 3
 776: PPUSH
 777: LD_STRING D1a-Cyrus-1
 779: PPUSH
 780: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 784: LD_EXP 1
 788: PPUSH
 789: LD_STRING D1a-JMM-1
 791: PPUSH
 792: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 796: LD_EXP 3
 800: PPUSH
 801: LD_INT 37
 803: PPUSH
 804: LD_INT 66
 806: PPUSH
 807: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 811: LD_EXP 1
 815: PPUSH
 816: LD_INT 38
 818: PPUSH
 819: LD_INT 64
 821: PPUSH
 822: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 826: LD_EXP 3
 830: PPUSH
 831: LD_STRING D1a-Cyrus-2
 833: PPUSH
 834: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 838: LD_EXP 3
 842: PPUSH
 843: LD_INT 35
 845: PPUSH
 846: LD_INT 62
 848: PPUSH
 849: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 853: LD_EXP 1
 857: PPUSH
 858: LD_INT 35
 860: PPUSH
 861: LD_INT 60
 863: PPUSH
 864: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 868: LD_EXP 1
 872: PPUSH
 873: LD_STRING D1a-JMM-2
 875: PPUSH
 876: CALL_OW 88
// ComWalk ( Lisa ) ;
 880: LD_EXP 4
 884: PPUSH
 885: CALL_OW 138
// wait ( 0 0$1 ) ;
 889: LD_INT 35
 891: PPUSH
 892: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 896: LD_EXP 4
 900: PPUSH
 901: LD_EXP 1
 905: PPUSH
 906: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 910: LD_EXP 4
 914: PPUSH
 915: LD_STRING D1a-Lisa-2
 917: PPUSH
 918: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 922: LD_EXP 1
 926: PUSH
 927: LD_EXP 3
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PPUSH
 936: LD_EXP 4
 940: PPUSH
 941: CALL_OW 119
// end ; if not Cyrus and Bobby then
 945: LD_EXP 3
 949: NOT
 950: PUSH
 951: LD_EXP 2
 955: AND
 956: IFFALSE 1235
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 958: LD_EXP 2
 962: PPUSH
 963: LD_INT 44
 965: PPUSH
 966: LD_INT 70
 968: PPUSH
 969: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 973: LD_EXP 1
 977: PPUSH
 978: LD_INT 46
 980: PPUSH
 981: LD_INT 73
 983: PPUSH
 984: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 988: LD_EXP 2
 992: PPUSH
 993: LD_STRING D1a-Bobby-1
 995: PPUSH
 996: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
1000: LD_EXP 1
1004: PPUSH
1005: LD_STRING D1a-JMM-1
1007: PPUSH
1008: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
1012: LD_EXP 2
1016: PPUSH
1017: LD_INT 37
1019: PPUSH
1020: LD_INT 66
1022: PPUSH
1023: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
1027: LD_EXP 1
1031: PPUSH
1032: LD_INT 38
1034: PPUSH
1035: LD_INT 64
1037: PPUSH
1038: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
1042: LD_EXP 2
1046: PPUSH
1047: LD_STRING D1a-Bobby-2
1049: PPUSH
1050: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
1054: LD_EXP 2
1058: PPUSH
1059: LD_INT 35
1061: PPUSH
1062: LD_INT 62
1064: PPUSH
1065: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
1069: LD_EXP 1
1073: PPUSH
1074: LD_INT 35
1076: PPUSH
1077: LD_INT 60
1079: PPUSH
1080: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
1084: LD_EXP 1
1088: PPUSH
1089: LD_STRING D1a-JMM-2
1091: PPUSH
1092: CALL_OW 88
// ComWalk ( Lisa ) ;
1096: LD_EXP 4
1100: PPUSH
1101: CALL_OW 138
// wait ( 0 0$1 ) ;
1105: LD_INT 35
1107: PPUSH
1108: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1112: LD_EXP 4
1116: PPUSH
1117: LD_EXP 1
1121: PPUSH
1122: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
1126: LD_EXP 1
1130: PUSH
1131: LD_EXP 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PPUSH
1140: LD_EXP 4
1144: PPUSH
1145: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1149: LD_VAR 0 2
1153: PUSH
1154: LD_INT 1
1156: ARRAY
1157: PPUSH
1158: LD_INT 33
1160: PPUSH
1161: LD_INT 55
1163: PPUSH
1164: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 2
1175: ARRAY
1176: PPUSH
1177: LD_INT 30
1179: PPUSH
1180: LD_INT 54
1182: PPUSH
1183: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PPUSH
1196: LD_EXP 1
1200: PPUSH
1201: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1205: LD_VAR 0 2
1209: PUSH
1210: LD_INT 2
1212: ARRAY
1213: PPUSH
1214: LD_EXP 1
1218: PPUSH
1219: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1223: LD_EXP 4
1227: PPUSH
1228: LD_STRING D1a-Lisa-2
1230: PPUSH
1231: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1235: LD_EXP 3
1239: NOT
1240: PUSH
1241: LD_EXP 2
1245: NOT
1246: AND
1247: IFFALSE 1461
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1249: LD_EXP 1
1253: PPUSH
1254: LD_INT 37
1256: PPUSH
1257: LD_INT 66
1259: PPUSH
1260: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1264: LD_EXP 1
1268: PPUSH
1269: LD_STRING D1b-JMM-1
1271: PPUSH
1272: CALL_OW 88
// ComCrawl ( JMM ) ;
1276: LD_EXP 1
1280: PPUSH
1281: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1285: LD_EXP 1
1289: PPUSH
1290: LD_INT 35
1292: PPUSH
1293: LD_INT 60
1295: PPUSH
1296: CALL_OW 171
// wait ( 0 0$8 ) ;
1300: LD_INT 280
1302: PPUSH
1303: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1307: LD_EXP 1
1311: PPUSH
1312: LD_STRING D1b-JMM-1a
1314: PPUSH
1315: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1319: LD_EXP 1
1323: PUSH
1324: LD_EXP 4
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: PPUSH
1333: CALL_OW 138
// wait ( 0 0$1 ) ;
1337: LD_INT 35
1339: PPUSH
1340: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1344: LD_EXP 4
1348: PPUSH
1349: LD_EXP 1
1353: PPUSH
1354: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1358: LD_EXP 1
1362: PUSH
1363: EMPTY
1364: LIST
1365: PPUSH
1366: LD_EXP 4
1370: PPUSH
1371: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1375: LD_VAR 0 2
1379: PUSH
1380: LD_INT 1
1382: ARRAY
1383: PPUSH
1384: LD_INT 33
1386: PPUSH
1387: LD_INT 55
1389: PPUSH
1390: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1394: LD_VAR 0 2
1398: PUSH
1399: LD_INT 2
1401: ARRAY
1402: PPUSH
1403: LD_INT 30
1405: PPUSH
1406: LD_INT 54
1408: PPUSH
1409: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1413: LD_VAR 0 2
1417: PUSH
1418: LD_INT 1
1420: ARRAY
1421: PPUSH
1422: LD_EXP 1
1426: PPUSH
1427: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1431: LD_VAR 0 2
1435: PUSH
1436: LD_INT 2
1438: ARRAY
1439: PPUSH
1440: LD_EXP 1
1444: PPUSH
1445: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1449: LD_EXP 4
1453: PPUSH
1454: LD_STRING D1b-Lisa-1
1456: PPUSH
1457: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1461: LD_EXP 1
1465: PPUSH
1466: LD_STRING D1-JMM-1
1468: PPUSH
1469: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1473: LD_EXP 4
1477: PPUSH
1478: LD_STRING D1-Lisa-1
1480: PPUSH
1481: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1485: LD_EXP 1
1489: PPUSH
1490: LD_STRING D1-JMM-2
1492: PPUSH
1493: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
1497: LD_EXP 9
1501: PPUSH
1502: LD_STRING D1-Pow-2
1504: PPUSH
1505: CALL_OW 586
// if Cyrus then
1509: LD_EXP 3
1513: IFFALSE 1539
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1515: LD_EXP 3
1519: PPUSH
1520: LD_STRING D1-Cyrus-2
1522: PPUSH
1523: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1527: LD_EXP 1
1531: PPUSH
1532: LD_STRING D1-JMM-3
1534: PPUSH
1535: CALL_OW 88
// end ; SayRadioNoFace ( Powell , D1-Pow-3 ) ;
1539: LD_EXP 9
1543: PPUSH
1544: LD_STRING D1-Pow-3
1546: PPUSH
1547: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
1551: LD_EXP 1
1555: PPUSH
1556: LD_STRING D1-JMM-4
1558: PPUSH
1559: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-4 ) ;
1563: LD_EXP 9
1567: PPUSH
1568: LD_STRING D1-Pow-4
1570: PPUSH
1571: CALL_OW 586
// SayRadioNoFace ( Powell , D1-Pow-4a ) ;
1575: LD_EXP 9
1579: PPUSH
1580: LD_STRING D1-Pow-4a
1582: PPUSH
1583: CALL_OW 586
// if Cyrus then
1587: LD_EXP 3
1591: IFFALSE 1605
// Say ( Cyrus , D1-Cyrus-4 ) ;
1593: LD_EXP 3
1597: PPUSH
1598: LD_STRING D1-Cyrus-4
1600: PPUSH
1601: CALL_OW 88
// if Bobby then
1605: LD_EXP 2
1609: IFFALSE 1647
// begin Say ( Bobby , D1-Bobby-4 ) ;
1611: LD_EXP 2
1615: PPUSH
1616: LD_STRING D1-Bobby-4
1618: PPUSH
1619: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1623: LD_EXP 4
1627: PPUSH
1628: LD_STRING D1-Lisa-4
1630: PPUSH
1631: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1635: LD_EXP 1
1639: PPUSH
1640: LD_STRING D1-JMM-5
1642: PPUSH
1643: CALL_OW 88
// end ; InGameOff ;
1647: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1651: LD_INT 22
1653: PUSH
1654: LD_INT 4
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PPUSH
1661: CALL_OW 69
1665: PUSH
1666: LD_EXP 6
1670: PUSH
1671: LD_EXP 7
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: DIFF
1680: PPUSH
1681: LD_INT 1
1683: PPUSH
1684: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1688: LD_STRING M1
1690: PPUSH
1691: CALL_OW 337
// SaveForQuickRestart ;
1695: CALL_OW 22
// end ;
1699: LD_VAR 0 1
1703: RET
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1704: LD_INT 7
1706: PPUSH
1707: LD_INT 22
1709: PUSH
1710: LD_INT 1
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PPUSH
1717: CALL_OW 70
1721: PUSH
1722: LD_INT 0
1724: GREATER
1725: IFFALSE 2138
1727: GO 1729
1729: DISABLE
// begin InGameOn ;
1730: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1734: LD_INT 22
1736: PUSH
1737: LD_INT 1
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 21
1746: PUSH
1747: LD_INT 1
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PPUSH
1758: CALL_OW 69
1762: PPUSH
1763: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1767: LD_INT 24
1769: PPUSH
1770: LD_INT 32
1772: PPUSH
1773: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1777: LD_EXP 5
1781: PPUSH
1782: LD_INT 4
1784: PPUSH
1785: LD_INT 1
1787: PPUSH
1788: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1792: LD_EXP 5
1796: PPUSH
1797: LD_INT 4
1799: PPUSH
1800: CALL_OW 336
// wait ( 0 0$1 ) ;
1804: LD_INT 35
1806: PPUSH
1807: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1811: LD_EXP 5
1815: PPUSH
1816: LD_INT 27
1818: PPUSH
1819: LD_INT 38
1821: PPUSH
1822: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1826: LD_EXP 5
1830: PPUSH
1831: LD_EXP 1
1835: PPUSH
1836: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1840: LD_INT 22
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: LD_INT 21
1852: PUSH
1853: LD_INT 1
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PPUSH
1864: CALL_OW 69
1868: PUSH
1869: LD_EXP 5
1873: PUSH
1874: EMPTY
1875: LIST
1876: DIFF
1877: PPUSH
1878: LD_EXP 5
1882: PPUSH
1883: CALL_OW 119
// wait ( 0 0$1 ) ;
1887: LD_INT 35
1889: PPUSH
1890: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1894: LD_EXP 5
1898: PPUSH
1899: LD_STRING D2a-Khat-1
1901: PPUSH
1902: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1906: LD_EXP 1
1910: PPUSH
1911: LD_STRING D2a-JMM-1
1913: PPUSH
1914: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1918: LD_EXP 5
1922: PPUSH
1923: LD_STRING D2a-Khat-2
1925: PPUSH
1926: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1930: LD_EXP 1
1934: PPUSH
1935: LD_STRING D2a-JMM-2
1937: PPUSH
1938: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1942: LD_EXP 5
1946: PPUSH
1947: LD_STRING D2a-Khat-3
1949: PPUSH
1950: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1954: LD_EXP 1
1958: PPUSH
1959: LD_STRING D2a-JMM-3
1961: PPUSH
1962: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1966: LD_EXP 5
1970: PPUSH
1971: LD_STRING D2a-Khat-4
1973: PPUSH
1974: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1978: LD_EXP 1
1982: PPUSH
1983: LD_STRING D2a-JMM-4
1985: PPUSH
1986: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1990: LD_EXP 5
1994: PPUSH
1995: LD_STRING D2a-Khat-5
1997: PPUSH
1998: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
2002: LD_EXP 1
2006: PPUSH
2007: LD_STRING D2a-JMM-5
2009: PPUSH
2010: CALL_OW 88
// InGameOff ;
2014: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) then
2018: LD_INT 22
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PUSH
2028: LD_INT 21
2030: PUSH
2031: LD_INT 1
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PUSH
2038: LD_INT 3
2040: PUSH
2041: LD_INT 24
2043: PUSH
2044: LD_INT 800
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PPUSH
2060: CALL_OW 69
2064: IFFALSE 2138
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
2066: LD_EXP 5
2070: PPUSH
2071: LD_INT 22
2073: PUSH
2074: LD_INT 1
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PUSH
2081: LD_INT 21
2083: PUSH
2084: LD_INT 1
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 3
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 1000
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: PPUSH
2113: CALL_OW 69
2117: PUSH
2118: LD_INT 1
2120: ARRAY
2121: PPUSH
2122: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
2126: LD_EXP 5
2130: PPUSH
2131: LD_STRING D2b-Khat-1
2133: PPUSH
2134: CALL_OW 88
// end ; end ;
2138: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) do var i , distanceTab , min , tmp , p ;
2139: LD_INT 15
2141: PPUSH
2142: LD_INT 22
2144: PUSH
2145: LD_INT 1
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PPUSH
2152: CALL_OW 70
2156: IFFALSE 3353
2158: GO 2160
2160: DISABLE
2161: LD_INT 0
2163: PPUSH
2164: PPUSH
2165: PPUSH
2166: PPUSH
2167: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2168: LD_ADDR_VAR 0 2
2172: PUSH
2173: LD_INT 999
2175: PUSH
2176: LD_INT 999
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2186: LD_ADDR_VAR 0 4
2190: PUSH
2191: LD_INT 22
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 21
2203: PUSH
2204: LD_INT 1
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PPUSH
2215: CALL_OW 69
2219: PUSH
2220: LD_EXP 1
2224: PUSH
2225: LD_EXP 2
2229: PUSH
2230: LD_EXP 3
2234: PUSH
2235: LD_EXP 4
2239: PUSH
2240: LD_EXP 5
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: DIFF
2252: ST_TO_ADDR
// PrepareDeadSoldiers ;
2253: CALL 11662 0 0
// spotCorpses = 1 ;
2257: LD_ADDR_EXP 32
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2265: LD_INT 70
2267: PPUSH
2268: CALL_OW 67
// InGameOn ;
2272: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2276: LD_INT 23
2278: PPUSH
2279: LD_INT 12
2281: PPUSH
2282: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: LD_VAR 0 2
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: PUSH
2300: LD_INT 2
2302: ARRAY
2303: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2304: LD_ADDR_VAR 0 1
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 1
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 21
2321: PUSH
2322: LD_INT 1
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PPUSH
2333: CALL_OW 69
2337: PUSH
2338: LD_EXP 1
2342: PUSH
2343: LD_EXP 5
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: DIFF
2352: PUSH
2353: FOR_IN
2354: IFFALSE 2405
// if IsOK ( i ) then
2356: LD_VAR 0 1
2360: PPUSH
2361: CALL_OW 302
2365: IFFALSE 2403
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2367: LD_ADDR_VAR 0 2
2371: PUSH
2372: LD_VAR 0 2
2376: PUSH
2377: LD_VAR 0 1
2381: PUSH
2382: LD_VAR 0 1
2386: PPUSH
2387: LD_INT 16
2389: PPUSH
2390: CALL_OW 299
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PUSH
2399: EMPTY
2400: LIST
2401: ADD
2402: ST_TO_ADDR
2403: GO 2353
2405: POP
2406: POP
// for i = 2 to distanceTab do
2407: LD_ADDR_VAR 0 1
2411: PUSH
2412: DOUBLE
2413: LD_INT 2
2415: DEC
2416: ST_TO_ADDR
2417: LD_VAR 0 2
2421: PUSH
2422: FOR_TO
2423: IFFALSE 2469
// if distanceTab [ i ] [ 2 ] < min then
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PUSH
2436: LD_INT 2
2438: ARRAY
2439: PUSH
2440: LD_VAR 0 3
2444: LESS
2445: IFFALSE 2467
// min = distanceTab [ i ] [ 2 ] ;
2447: LD_ADDR_VAR 0 3
2451: PUSH
2452: LD_VAR 0 2
2456: PUSH
2457: LD_VAR 0 1
2461: ARRAY
2462: PUSH
2463: LD_INT 2
2465: ARRAY
2466: ST_TO_ADDR
2467: GO 2422
2469: POP
2470: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2471: LD_ADDR_VAR 0 1
2475: PUSH
2476: LD_INT 22
2478: PUSH
2479: LD_INT 1
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: LD_INT 21
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: PPUSH
2500: CALL_OW 69
2504: PUSH
2505: LD_EXP 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: DIFF
2513: PUSH
2514: FOR_IN
2515: IFFALSE 2585
// begin ComMoveToArea ( i , DeadCutscene ) ;
2517: LD_VAR 0 1
2521: PPUSH
2522: LD_INT 28
2524: PPUSH
2525: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2529: LD_EXP 1
2533: PPUSH
2534: LD_INT 30
2536: PPUSH
2537: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2541: LD_VAR 0 1
2545: PPUSH
2546: LD_INT 23
2548: PPUSH
2549: LD_INT 11
2551: PPUSH
2552: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2556: LD_EXP 1
2560: PPUSH
2561: LD_INT 23
2563: PPUSH
2564: LD_INT 11
2566: PPUSH
2567: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2571: LD_EXP 35
2575: PPUSH
2576: LD_INT 250
2578: PPUSH
2579: CALL_OW 234
// end ;
2583: GO 2514
2585: POP
2586: POP
// for i = 2 to distanceTab do
2587: LD_ADDR_VAR 0 1
2591: PUSH
2592: DOUBLE
2593: LD_INT 2
2595: DEC
2596: ST_TO_ADDR
2597: LD_VAR 0 2
2601: PUSH
2602: FOR_TO
2603: IFFALSE 2989
// begin if distanceTab [ i ] [ 2 ] = min then
2605: LD_VAR 0 2
2609: PUSH
2610: LD_VAR 0 1
2614: ARRAY
2615: PUSH
2616: LD_INT 2
2618: ARRAY
2619: PUSH
2620: LD_VAR 0 3
2624: EQUAL
2625: IFFALSE 2987
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2627: LD_VAR 0 2
2631: PUSH
2632: LD_VAR 0 1
2636: ARRAY
2637: PUSH
2638: LD_INT 1
2640: ARRAY
2641: PUSH
2642: LD_EXP 2
2646: EQUAL
2647: IFFALSE 2661
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2649: LD_EXP 2
2653: PPUSH
2654: LD_STRING DCorpses-Bobby-1
2656: PPUSH
2657: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2661: LD_VAR 0 2
2665: PUSH
2666: LD_VAR 0 1
2670: ARRAY
2671: PUSH
2672: LD_INT 1
2674: ARRAY
2675: PUSH
2676: LD_EXP 3
2680: EQUAL
2681: IFFALSE 2695
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2683: LD_EXP 3
2687: PPUSH
2688: LD_STRING DCorpses-Cyrus-1
2690: PPUSH
2691: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2695: LD_VAR 0 2
2699: PUSH
2700: LD_VAR 0 1
2704: ARRAY
2705: PUSH
2706: LD_INT 1
2708: ARRAY
2709: PUSH
2710: LD_EXP 4
2714: EQUAL
2715: IFFALSE 2729
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2717: LD_EXP 4
2721: PPUSH
2722: LD_STRING DCorpses-Lisa-1
2724: PPUSH
2725: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2729: LD_VAR 0 2
2733: PUSH
2734: LD_VAR 0 1
2738: ARRAY
2739: PUSH
2740: LD_INT 1
2742: ARRAY
2743: PUSH
2744: LD_VAR 0 4
2748: PUSH
2749: LD_INT 1
2751: ARRAY
2752: EQUAL
2753: PUSH
2754: LD_VAR 0 4
2758: PUSH
2759: LD_INT 1
2761: ARRAY
2762: PPUSH
2763: CALL_OW 258
2767: PUSH
2768: LD_INT 1
2770: EQUAL
2771: AND
2772: IFFALSE 2790
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2774: LD_VAR 0 4
2778: PUSH
2779: LD_INT 1
2781: ARRAY
2782: PPUSH
2783: LD_STRING DCorpses-Sol1-1
2785: PPUSH
2786: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2790: LD_VAR 0 2
2794: PUSH
2795: LD_VAR 0 1
2799: ARRAY
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PUSH
2805: LD_VAR 0 4
2809: PUSH
2810: LD_INT 1
2812: ARRAY
2813: EQUAL
2814: PUSH
2815: LD_VAR 0 4
2819: PUSH
2820: LD_INT 1
2822: ARRAY
2823: PPUSH
2824: CALL_OW 258
2828: PUSH
2829: LD_INT 2
2831: EQUAL
2832: AND
2833: IFFALSE 2851
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2835: LD_VAR 0 4
2839: PUSH
2840: LD_INT 1
2842: ARRAY
2843: PPUSH
2844: LD_STRING DCorpses-FSol1-1
2846: PPUSH
2847: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2851: LD_VAR 0 2
2855: PUSH
2856: LD_VAR 0 1
2860: ARRAY
2861: PUSH
2862: LD_INT 1
2864: ARRAY
2865: PUSH
2866: LD_VAR 0 4
2870: PUSH
2871: LD_INT 2
2873: ARRAY
2874: EQUAL
2875: PUSH
2876: LD_VAR 0 4
2880: PUSH
2881: LD_INT 2
2883: ARRAY
2884: PPUSH
2885: CALL_OW 258
2889: PUSH
2890: LD_INT 1
2892: EQUAL
2893: AND
2894: IFFALSE 2912
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2896: LD_VAR 0 4
2900: PUSH
2901: LD_INT 2
2903: ARRAY
2904: PPUSH
2905: LD_STRING DCorpses-Sol1-1
2907: PPUSH
2908: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2912: LD_VAR 0 2
2916: PUSH
2917: LD_VAR 0 1
2921: ARRAY
2922: PUSH
2923: LD_INT 1
2925: ARRAY
2926: PUSH
2927: LD_VAR 0 4
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: EQUAL
2936: PUSH
2937: LD_VAR 0 4
2941: PUSH
2942: LD_INT 2
2944: ARRAY
2945: PPUSH
2946: CALL_OW 258
2950: PUSH
2951: LD_INT 2
2953: EQUAL
2954: AND
2955: IFFALSE 2973
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2957: LD_VAR 0 4
2961: PUSH
2962: LD_INT 2
2964: ARRAY
2965: PPUSH
2966: LD_STRING DCorpses-FSol1-1
2968: PPUSH
2969: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2973: LD_EXP 35
2977: PPUSH
2978: LD_INT 150
2980: PPUSH
2981: CALL_OW 234
// break ;
2985: GO 2989
// end ; end ;
2987: GO 2602
2989: POP
2990: POP
// p := 0 ;
2991: LD_ADDR_VAR 0 5
2995: PUSH
2996: LD_INT 0
2998: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2999: LD_INT 35
3001: PPUSH
3002: CALL_OW 67
// p := p + 1 ;
3006: LD_ADDR_VAR 0 5
3010: PUSH
3011: LD_VAR 0 5
3015: PUSH
3016: LD_INT 1
3018: PLUS
3019: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
3020: LD_ADDR_VAR 0 1
3024: PUSH
3025: LD_INT 22
3027: PUSH
3028: LD_INT 1
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 21
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 69
3053: PUSH
3054: LD_EXP 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: DIFF
3062: PUSH
3063: FOR_IN
3064: IFFALSE 3134
// begin ComMoveToArea ( i , DeadCutscene ) ;
3066: LD_VAR 0 1
3070: PPUSH
3071: LD_INT 28
3073: PPUSH
3074: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
3078: LD_EXP 1
3082: PPUSH
3083: LD_INT 30
3085: PPUSH
3086: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_INT 23
3097: PPUSH
3098: LD_INT 11
3100: PPUSH
3101: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
3105: LD_EXP 1
3109: PPUSH
3110: LD_INT 23
3112: PPUSH
3113: LD_INT 11
3115: PPUSH
3116: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
3120: LD_EXP 35
3124: PPUSH
3125: LD_INT 250
3127: PPUSH
3128: CALL_OW 234
// end ;
3132: GO 3063
3134: POP
3135: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3136: LD_EXP 1
3140: PPUSH
3141: LD_INT 30
3143: PPUSH
3144: CALL_OW 308
3148: PUSH
3149: LD_VAR 0 5
3153: PUSH
3154: LD_INT 16
3156: GREATEREQUAL
3157: OR
3158: IFFALSE 2999
// wait ( 0 0$1 ) ;
3160: LD_INT 35
3162: PPUSH
3163: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING DCorpses-JMM-1
3174: PPUSH
3175: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3179: LD_EXP 35
3183: PPUSH
3184: LD_INT 100
3186: PPUSH
3187: CALL_OW 234
// if IsOK ( Khatam ) then
3191: LD_EXP 5
3195: PPUSH
3196: CALL_OW 302
3200: IFFALSE 3337
// begin repeat wait ( 0 0$1 ) ;
3202: LD_INT 35
3204: PPUSH
3205: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3209: LD_EXP 5
3213: PPUSH
3214: LD_EXP 35
3218: PPUSH
3219: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3223: LD_EXP 5
3227: PPUSH
3228: LD_EXP 35
3232: PPUSH
3233: CALL_OW 296
3237: PUSH
3238: LD_INT 2
3240: LESS
3241: IFFALSE 3202
// spotCorpses = 0 ;
3243: LD_ADDR_EXP 32
3247: PUSH
3248: LD_INT 0
3250: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3251: LD_EXP 35
3255: PPUSH
3256: LD_INT 10
3258: PPUSH
3259: CALL_OW 234
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// KillUnit ( DyingSold ) ;
3270: LD_EXP 35
3274: PPUSH
3275: CALL_OW 66
// wait ( 0 0$1 ) ;
3279: LD_INT 35
3281: PPUSH
3282: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3286: LD_EXP 1
3290: PUSH
3291: LD_EXP 5
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PPUSH
3300: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3304: LD_EXP 5
3308: PPUSH
3309: LD_EXP 1
3313: PPUSH
3314: CALL_OW 119
// wait ( 0 0$1 ) ;
3318: LD_INT 35
3320: PPUSH
3321: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3325: LD_EXP 5
3329: PPUSH
3330: LD_STRING DCorpses-Khat-1
3332: PPUSH
3333: CALL_OW 88
// end ; InGameOff ;
3337: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3341: LD_EXP 1
3345: PPUSH
3346: LD_STRING DCorpses-JMM-2
3348: PPUSH
3349: CALL_OW 88
// end ;
3353: PPOPN 5
3355: END
// every 0 0$1 trigger spotCorpses = 1 do
3356: LD_EXP 32
3360: PUSH
3361: LD_INT 1
3363: EQUAL
3364: IFFALSE 3382
3366: GO 3368
3368: DISABLE
// begin enable ;
3369: ENABLE
// SetLives ( DyingSold , 10 ) ;
3370: LD_EXP 35
3374: PPUSH
3375: LD_INT 10
3377: PPUSH
3378: CALL_OW 234
// end ;
3382: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3383: LD_INT 8
3385: PPUSH
3386: LD_INT 22
3388: PUSH
3389: LD_INT 1
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: PPUSH
3396: CALL_OW 70
3400: PUSH
3401: LD_INT 22
3403: PUSH
3404: LD_INT 1
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: PPUSH
3411: CALL_OW 69
3415: PPUSH
3416: LD_EXP 7
3420: PPUSH
3421: CALL_OW 74
3425: PPUSH
3426: LD_EXP 7
3430: PPUSH
3431: CALL_OW 296
3435: PUSH
3436: LD_INT 13
3438: LESS
3439: OR
3440: IFFALSE 3621
3442: GO 3444
3444: DISABLE
3445: LD_INT 0
3447: PPUSH
// begin InGameOn ;
3448: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3452: LD_EXP 7
3456: PPUSH
3457: LD_INT 250
3459: PPUSH
3460: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 , 700 ] [ Difficulty ] ) ;
3464: LD_EXP 6
3468: PPUSH
3469: LD_INT 1000
3471: PUSH
3472: LD_INT 800
3474: PUSH
3475: LD_INT 750
3477: PUSH
3478: LD_INT 700
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: PUSH
3487: LD_OWVAR 67
3491: ARRAY
3492: PPUSH
3493: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3497: LD_INT 3
3499: PPUSH
3500: LD_INT 4
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3513: LD_EXP 6
3517: PUSH
3518: LD_EXP 7
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PPUSH
3527: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) union FilterAllUnits ( [ f_side , 4 ] ) do
3531: LD_ADDR_VAR 0 1
3535: PUSH
3536: LD_INT 9
3538: PPUSH
3539: LD_INT 22
3541: PUSH
3542: LD_INT 3
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PPUSH
3549: CALL_OW 70
3553: PUSH
3554: LD_INT 22
3556: PUSH
3557: LD_INT 4
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PPUSH
3564: CALL_OW 69
3568: UNION
3569: PUSH
3570: FOR_IN
3571: IFFALSE 3584
// ComFree ( i ) ;
3573: LD_VAR 0 1
3577: PPUSH
3578: CALL_OW 139
3582: GO 3570
3584: POP
3585: POP
// wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// InGameOff ;
3593: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3597: LD_EXP 6
3601: PPUSH
3602: LD_STRING DF-Sol1-1
3604: PPUSH
3605: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3609: LD_EXP 1
3613: PPUSH
3614: LD_STRING DF-JMM-1
3616: PPUSH
3617: CALL_OW 88
// end ;
3621: PPOPN 1
3623: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3624: LD_INT 19
3626: PPUSH
3627: LD_INT 22
3629: PUSH
3630: LD_INT 3
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 70
3641: PUSH
3642: LD_INT 0
3644: EQUAL
3645: IFFALSE 3754
3647: GO 3649
3649: DISABLE
// begin if not IsDead ( Brian ) then
3650: LD_EXP 6
3654: PPUSH
3655: CALL_OW 301
3659: NOT
3660: IFFALSE 3674
// SetSide ( Brian , 1 ) ;
3662: LD_EXP 6
3666: PPUSH
3667: LD_INT 1
3669: PPUSH
3670: CALL_OW 235
// if not IsDead ( Jerry ) then
3674: LD_EXP 7
3678: PPUSH
3679: CALL_OW 301
3683: NOT
3684: IFFALSE 3698
// SetSide ( Jerry , 1 ) ;
3686: LD_EXP 7
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3698: LD_INT 22
3700: PUSH
3701: LD_INT 1
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PUSH
3708: LD_INT 25
3710: PUSH
3711: LD_INT 4
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PPUSH
3722: CALL_OW 69
3726: IFFALSE 3742
// Say ( JMM , DFa-JMM-1 ) else
3728: LD_EXP 1
3732: PPUSH
3733: LD_STRING DFa-JMM-1
3735: PPUSH
3736: CALL_OW 88
3740: GO 3754
// Say ( JMM , DFa-JMM-1a ) ;
3742: LD_EXP 1
3746: PPUSH
3747: LD_STRING DFa-JMM-1a
3749: PPUSH
3750: CALL_OW 88
// end ;
3754: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3755: LD_INT 19
3757: PPUSH
3758: LD_INT 22
3760: PUSH
3761: LD_INT 3
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PPUSH
3768: CALL_OW 70
3772: PUSH
3773: LD_INT 0
3775: EQUAL
3776: PUSH
3777: LD_EXP 6
3781: PPUSH
3782: CALL_OW 302
3786: NOT
3787: AND
3788: IFFALSE 3874
3790: GO 3792
3792: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3793: LD_INT 35
3795: PPUSH
3796: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3800: LD_EXP 6
3804: PPUSH
3805: CALL_OW 256
3809: PUSH
3810: LD_INT 250
3812: GREATER
3813: IFFALSE 3793
// Say ( Brian , DFb-Sol1-1 ) ;
3815: LD_EXP 6
3819: PPUSH
3820: LD_STRING DFb-Sol1-1
3822: PPUSH
3823: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3827: LD_EXP 6
3831: PPUSH
3832: LD_INT 78
3834: PPUSH
3835: LD_INT 74
3837: PPUSH
3838: CALL_OW 111
// if IsDead ( Jerry ) then
3842: LD_EXP 7
3846: PPUSH
3847: CALL_OW 301
3851: IFFALSE 3867
// Say ( Brian , DFb-Sol1-1a ) else
3853: LD_EXP 6
3857: PPUSH
3858: LD_STRING DFb-Sol1-1a
3860: PPUSH
3861: CALL_OW 88
3865: GO 3874
// SetAchievement ( ACH_JERRY ) ;
3867: LD_STRING ACH_JERRY
3869: PPUSH
3870: CALL_OW 543
// end ;
3874: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3875: LD_INT 22
3877: PUSH
3878: LD_INT 1
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PUSH
3885: LD_INT 21
3887: PUSH
3888: LD_INT 2
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PPUSH
3899: CALL_OW 69
3903: PUSH
3904: LD_INT 0
3906: EQUAL
3907: IFFALSE 3999
3909: GO 3911
3911: DISABLE
3912: LD_INT 0
3914: PPUSH
// begin enable ;
3915: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3916: LD_ADDR_VAR 0 1
3920: PUSH
3921: LD_INT 22
3923: PUSH
3924: LD_INT 3
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 21
3933: PUSH
3934: LD_INT 3
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: LD_INT 30
3943: PUSH
3944: LD_INT 31
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: PPUSH
3956: CALL_OW 69
3960: PUSH
3961: FOR_IN
3962: IFFALSE 3997
// begin if See ( 1 , i ) then
3964: LD_INT 1
3966: PPUSH
3967: LD_VAR 0 1
3971: PPUSH
3972: CALL_OW 292
3976: IFFALSE 3995
// begin disable ;
3978: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3979: LD_EXP 1
3983: PPUSH
3984: LD_STRING DX1-JMM-1
3986: PPUSH
3987: CALL_OW 88
// exit ;
3991: POP
3992: POP
3993: GO 3999
// end ; end ;
3995: GO 3961
3997: POP
3998: POP
// end ;
3999: PPOPN 1
4001: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 11
4007: PPUSH
4008: CALL_OW 294
4012: IFFALSE 4275
4014: GO 4016
4016: DISABLE
4017: LD_INT 0
4019: PPUSH
4020: PPUSH
4021: PPUSH
// begin DialogueOn ;
4022: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
4026: LD_INT 11
4028: PPUSH
4029: LD_INT 22
4031: PUSH
4032: LD_INT 3
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PUSH
4039: LD_INT 21
4041: PUSH
4042: LD_INT 1
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PPUSH
4053: CALL_OW 70
4057: PUSH
4058: LD_INT 1
4060: ARRAY
4061: PPUSH
4062: LD_STRING DX3-Rus1-1
4064: PPUSH
4065: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
4069: LD_EXP 1
4073: PPUSH
4074: LD_STRING DX3-JMM-1
4076: PPUSH
4077: CALL_OW 88
// DialogueOff ;
4081: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
4085: LD_ADDR_VAR 0 1
4089: PUSH
4090: LD_INT 11
4092: PPUSH
4093: LD_INT 22
4095: PUSH
4096: LD_INT 3
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: LD_INT 25
4105: PUSH
4106: LD_INT 1
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PPUSH
4117: CALL_OW 70
4121: PUSH
4122: FOR_IN
4123: IFFALSE 4143
// southBaseDefenders = southBaseDefenders ^ i ;
4125: LD_ADDR_EXP 25
4129: PUSH
4130: LD_EXP 25
4134: PUSH
4135: LD_VAR 0 1
4139: ADD
4140: ST_TO_ADDR
4141: GO 4122
4143: POP
4144: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 , 0 0$2 ] [ Difficulty ] ) ;
4145: LD_INT 175
4147: PUSH
4148: LD_INT 140
4150: PUSH
4151: LD_INT 105
4153: PUSH
4154: LD_INT 70
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_OWVAR 67
4167: ARRAY
4168: PPUSH
4169: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4173: LD_ADDR_VAR 0 3
4177: PUSH
4178: LD_INT 22
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 21
4190: PUSH
4191: LD_INT 1
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 25
4200: PUSH
4201: LD_INT 3
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: LIST
4212: PPUSH
4213: CALL_OW 69
4217: ST_TO_ADDR
// if not mech then
4218: LD_VAR 0 3
4222: NOT
4223: IFFALSE 4227
// exit ;
4225: GO 4275
// ComExitBuilding ( mech ) ;
4227: LD_VAR 0 3
4231: PPUSH
4232: CALL_OW 122
// wait ( 0 0$1 ) ;
4236: LD_INT 35
4238: PPUSH
4239: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4243: LD_VAR 0 3
4247: PUSH
4248: LD_INT 1
4250: ARRAY
4251: PPUSH
4252: LD_INT 5
4254: PPUSH
4255: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4259: LD_VAR 0 3
4263: PUSH
4264: LD_INT 2
4266: ARRAY
4267: PPUSH
4268: LD_INT 4
4270: PPUSH
4271: CALL_OW 180
// end ;
4275: PPOPN 3
4277: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4278: LD_INT 1
4280: PPUSH
4281: LD_INT 5
4283: PPUSH
4284: CALL_OW 292
4288: PUSH
4289: LD_INT 1
4291: PPUSH
4292: LD_INT 4
4294: PPUSH
4295: CALL_OW 292
4299: OR
4300: IFFALSE 4384
4302: GO 4304
4304: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4305: LD_INT 5
4307: PUSH
4308: LD_INT 4
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PPUSH
4315: CALL_OW 85
// if IsOK ( Bobby ) then
4319: LD_EXP 2
4323: PPUSH
4324: CALL_OW 302
4328: IFFALSE 4364
// begin DialogueOn ;
4330: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4334: LD_EXP 2
4338: PPUSH
4339: LD_STRING DX2-Bobby-1
4341: PPUSH
4342: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4346: LD_EXP 1
4350: PPUSH
4351: LD_STRING DX2-JMM-1a
4353: PPUSH
4354: CALL_OW 88
// DialogueOff ;
4358: CALL_OW 7
// end else
4362: GO 4384
// begin DialogueOn ;
4364: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4368: LD_EXP 1
4372: PPUSH
4373: LD_STRING DX2-JMM-1
4375: PPUSH
4376: CALL_OW 88
// DialogueOff ;
4380: CALL_OW 7
// end ; end ;
4384: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4385: LD_INT 22
4387: PUSH
4388: LD_INT 1
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PUSH
4395: LD_INT 23
4397: PUSH
4398: LD_INT 3
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PUSH
4405: LD_INT 21
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 34
4417: PUSH
4418: LD_INT 42
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: IFFALSE 4856
4437: GO 4439
4439: DISABLE
4440: LD_INT 0
4442: PPUSH
4443: PPUSH
4444: PPUSH
4445: PPUSH
4446: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4447: LD_ADDR_VAR 0 1
4451: PUSH
4452: LD_INT 22
4454: PUSH
4455: LD_INT 1
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PUSH
4462: LD_INT 23
4464: PUSH
4465: LD_INT 3
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 2
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 34
4484: PUSH
4485: LD_INT 42
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: PPUSH
4498: CALL_OW 69
4502: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4503: LD_ADDR_VAR 0 3
4507: PUSH
4508: LD_INT 22
4510: PUSH
4511: LD_INT 1
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: LD_INT 21
4520: PUSH
4521: LD_INT 1
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: LD_INT 26
4530: PUSH
4531: LD_INT 1
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: PPUSH
4543: CALL_OW 69
4547: PUSH
4548: LD_EXP 1
4552: PUSH
4553: LD_EXP 3
4557: PUSH
4558: LD_EXP 2
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: LIST
4567: DIFF
4568: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4569: LD_ADDR_VAR 0 4
4573: PUSH
4574: LD_INT 22
4576: PUSH
4577: LD_INT 1
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 21
4586: PUSH
4587: LD_INT 1
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 26
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 69
4613: PUSH
4614: LD_EXP 4
4618: PUSH
4619: EMPTY
4620: LIST
4621: DIFF
4622: ST_TO_ADDR
// if not tmp then
4623: LD_VAR 0 1
4627: NOT
4628: IFFALSE 4632
// exit ;
4630: GO 4856
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4632: LD_ADDR_VAR 0 2
4636: PUSH
4637: LD_VAR 0 1
4641: PUSH
4642: LD_INT 1
4644: ARRAY
4645: PPUSH
4646: CALL_OW 311
4650: ST_TO_ADDR
// if not speaker then
4651: LD_VAR 0 2
4655: NOT
4656: IFFALSE 4660
// exit ;
4658: GO 4856
// DialogueOn ;
4660: CALL_OW 6
// if speaker = JMM then
4664: LD_VAR 0 2
4668: PUSH
4669: LD_EXP 1
4673: EQUAL
4674: IFFALSE 4708
// begin if Lisa then
4676: LD_EXP 4
4680: IFFALSE 4694
// Say ( Lisa , DX2b-Lisa-1 ) ;
4682: LD_EXP 4
4686: PPUSH
4687: LD_STRING DX2b-Lisa-1
4689: PPUSH
4690: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4694: LD_EXP 1
4698: PPUSH
4699: LD_STRING DX2b-JMM-1
4701: PPUSH
4702: CALL_OW 88
// end else
4706: GO 4852
// begin Say ( JMM , DX2a-JMM-1 ) ;
4708: LD_EXP 1
4712: PPUSH
4713: LD_STRING DX2a-JMM-1
4715: PPUSH
4716: CALL_OW 88
// if speaker = Bobby then
4720: LD_VAR 0 2
4724: PUSH
4725: LD_EXP 2
4729: EQUAL
4730: IFFALSE 4744
// Say ( Bobby , DX2a-Bobby-1 ) ;
4732: LD_EXP 2
4736: PPUSH
4737: LD_STRING DX2a-Bobby-1
4739: PPUSH
4740: CALL_OW 88
// if speaker = Cyrus then
4744: LD_VAR 0 2
4748: PUSH
4749: LD_EXP 3
4753: EQUAL
4754: IFFALSE 4768
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4756: LD_EXP 3
4760: PPUSH
4761: LD_STRING DX2a-Cyrus-1
4763: PPUSH
4764: CALL_OW 88
// if speaker = Lisa then
4768: LD_VAR 0 2
4772: PUSH
4773: LD_EXP 4
4777: EQUAL
4778: IFFALSE 4792
// Say ( Lisa , DX2a-Lisa-1 ) ;
4780: LD_EXP 4
4784: PPUSH
4785: LD_STRING DX2a-Lisa-1
4787: PPUSH
4788: CALL_OW 88
// if speaker in temp1 then
4792: LD_VAR 0 2
4796: PUSH
4797: LD_VAR 0 3
4801: IN
4802: IFFALSE 4816
// Say ( speaker , DX2a-Sol1-1 ) ;
4804: LD_VAR 0 2
4808: PPUSH
4809: LD_STRING DX2a-Sol1-1
4811: PPUSH
4812: CALL_OW 88
// if speaker in temp2 then
4816: LD_VAR 0 2
4820: PUSH
4821: LD_VAR 0 4
4825: IN
4826: IFFALSE 4840
// Say ( speaker , DX2a-FSol1-1 ) ;
4828: LD_VAR 0 2
4832: PPUSH
4833: LD_STRING DX2a-FSol1-1
4835: PPUSH
4836: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4840: LD_EXP 1
4844: PPUSH
4845: LD_STRING DX2a-JMM-2
4847: PPUSH
4848: CALL_OW 88
// end ; DialogueOff ;
4852: CALL_OW 7
// end ;
4856: PPOPN 5
4858: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4859: LD_INT 1
4861: PPUSH
4862: CALL_OW 255
4866: PUSH
4867: LD_INT 1
4869: EQUAL
4870: PUSH
4871: LD_INT 10
4873: PPUSH
4874: CALL_OW 255
4878: PUSH
4879: LD_INT 1
4881: EQUAL
4882: OR
4883: IFFALSE 4943
4885: GO 4887
4887: DISABLE
// begin DialogueOn ;
4888: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4892: LD_EXP 1
4896: PPUSH
4897: LD_STRING D3-JMM-1
4899: PPUSH
4900: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4904: LD_EXP 9
4908: PPUSH
4909: LD_STRING D3-Pow-1
4911: PPUSH
4912: CALL_OW 586
// if IsOK ( Cyrus ) then
4916: LD_EXP 3
4920: PPUSH
4921: CALL_OW 302
4925: IFFALSE 4939
// Say ( Cyrus , D3-Cyrus-1 ) ;
4927: LD_EXP 3
4931: PPUSH
4932: LD_STRING D3-Cyrus-1
4934: PPUSH
4935: CALL_OW 88
// DialogueOff ;
4939: CALL_OW 7
// end ;
4943: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , tmp , i ;
4944: LD_INT 1
4946: PPUSH
4947: CALL_OW 255
4951: PUSH
4952: LD_INT 1
4954: EQUAL
4955: PUSH
4956: LD_INT 10
4958: PPUSH
4959: CALL_OW 255
4963: PUSH
4964: LD_INT 1
4966: EQUAL
4967: AND
4968: IFFALSE 6358
4970: GO 4972
4972: DISABLE
4973: LD_INT 0
4975: PPUSH
4976: PPUSH
4977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4978: LD_ADDR_VAR 0 2
4982: PUSH
4983: LD_INT 22
4985: PUSH
4986: LD_INT 3
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 21
4995: PUSH
4996: LD_INT 1
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PPUSH
5007: CALL_OW 69
5011: ST_TO_ADDR
// if tmp then
5012: LD_VAR 0 2
5016: IFFALSE 5077
// begin for i in tmp do
5018: LD_ADDR_VAR 0 3
5022: PUSH
5023: LD_VAR 0 2
5027: PUSH
5028: FOR_IN
5029: IFFALSE 5075
// begin if IsInUnit ( i ) then
5031: LD_VAR 0 3
5035: PPUSH
5036: CALL_OW 310
5040: IFFALSE 5051
// ComExitBuilding ( i ) ;
5042: LD_VAR 0 3
5046: PPUSH
5047: CALL_OW 122
// wait ( 0 0$1 ) ;
5051: LD_INT 35
5053: PPUSH
5054: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
5058: LD_VAR 0 3
5062: PPUSH
5063: LD_INT 54
5065: PPUSH
5066: LD_INT 17
5068: PPUSH
5069: CALL_OW 174
// end ;
5073: GO 5028
5075: POP
5076: POP
// end ; wait ( 0 0$03 ) ;
5077: LD_INT 105
5079: PPUSH
5080: CALL_OW 67
// DialogueOn ;
5084: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5088: LD_EXP 1
5092: PPUSH
5093: LD_STRING D3a-JMM-1
5095: PPUSH
5096: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-1 ) ;
5100: LD_EXP 9
5104: PPUSH
5105: LD_STRING D3a-Pow-1
5107: PPUSH
5108: CALL_OW 586
// Say ( JMM , D3a-JMM-2 ) ;
5112: LD_EXP 1
5116: PPUSH
5117: LD_STRING D3a-JMM-2
5119: PPUSH
5120: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-2 ) ;
5124: LD_EXP 9
5128: PPUSH
5129: LD_STRING D3a-Pow-2
5131: PPUSH
5132: CALL_OW 586
// Say ( JMM , D3a-JMM-3 ) ;
5136: LD_EXP 1
5140: PPUSH
5141: LD_STRING D3a-JMM-3
5143: PPUSH
5144: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-3 ) ;
5148: LD_EXP 9
5152: PPUSH
5153: LD_STRING D3a-Pow-3
5155: PPUSH
5156: CALL_OW 586
// Say ( JMM , D3a-JMM-4 ) ;
5160: LD_EXP 1
5164: PPUSH
5165: LD_STRING D3a-JMM-4
5167: PPUSH
5168: CALL_OW 88
// DialogueOff ;
5172: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5176: LD_STRING M2
5178: PPUSH
5179: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5183: LD_EXP 1
5187: PPUSH
5188: LD_STRING D3b-JMM-1
5190: PPUSH
5191: CALL_OW 88
// Hint ( Depot2 ) ;
5195: LD_STRING Depot2
5197: PPUSH
5198: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5202: LD_INT 35
5204: PPUSH
5205: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5209: LD_INT 22
5211: PPUSH
5212: LD_INT 22
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 25
5224: PUSH
5225: LD_INT 2
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PPUSH
5236: CALL_OW 70
5240: PUSH
5241: LD_INT 22
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 21
5253: PUSH
5254: LD_INT 1
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL_OW 69
5269: NOT
5270: AND
5271: IFFALSE 5202
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5273: LD_ADDR_VAR 0 1
5277: PUSH
5278: LD_INT 22
5280: PUSH
5281: LD_INT 1
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: LD_INT 23
5290: PUSH
5291: LD_INT 1
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PUSH
5298: LD_INT 25
5300: PUSH
5301: LD_INT 2
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: PUSH
5308: LD_INT 50
5310: PUSH
5311: EMPTY
5312: LIST
5313: PUSH
5314: LD_INT 56
5316: PUSH
5317: EMPTY
5318: LIST
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: PPUSH
5327: CALL_OW 69
5331: PUSH
5332: LD_EXP 1
5336: PUSH
5337: LD_EXP 5
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: DIFF
5346: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5347: LD_INT 35
5349: PPUSH
5350: CALL_OW 67
// until temp > 0 ;
5354: LD_VAR 0 1
5358: PUSH
5359: LD_INT 0
5361: GREATER
5362: IFFALSE 5273
// wait ( 0 0$5 ) ;
5364: LD_INT 175
5366: PPUSH
5367: CALL_OW 67
// PrepareRussianHeroes ;
5371: CALL 11888 0 0
// InGameOn ;
5375: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5379: LD_EXP 8
5383: PPUSH
5384: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5388: LD_EXP 1
5392: PUSH
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PPUSH
5406: LD_EXP 8
5410: PPUSH
5411: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5415: LD_EXP 8
5419: PPUSH
5420: LD_VAR 0 1
5424: PUSH
5425: LD_INT 1
5427: ARRAY
5428: PPUSH
5429: CALL_OW 119
// wait ( 0 0$02 ) ;
5433: LD_INT 70
5435: PPUSH
5436: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5440: LD_EXP 8
5444: PPUSH
5445: LD_STRING D4-Mikh-1
5447: PPUSH
5448: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5452: LD_VAR 0 1
5456: PUSH
5457: LD_INT 1
5459: ARRAY
5460: PPUSH
5461: CALL_OW 258
5465: PUSH
5466: LD_INT 1
5468: EQUAL
5469: IFFALSE 5487
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5471: LD_VAR 0 1
5475: PUSH
5476: LD_INT 1
5478: ARRAY
5479: PPUSH
5480: LD_STRING D4-Sol1-1
5482: PPUSH
5483: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5487: LD_VAR 0 1
5491: PUSH
5492: LD_INT 1
5494: ARRAY
5495: PPUSH
5496: CALL_OW 258
5500: PUSH
5501: LD_INT 2
5503: EQUAL
5504: IFFALSE 5522
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5506: LD_VAR 0 1
5510: PUSH
5511: LD_INT 1
5513: ARRAY
5514: PPUSH
5515: LD_STRING D4-FSol1-1
5517: PPUSH
5518: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5522: LD_EXP 8
5526: PPUSH
5527: LD_STRING D4-Mikh-2
5529: PPUSH
5530: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5534: LD_VAR 0 1
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PPUSH
5543: CALL_OW 258
5547: PUSH
5548: LD_INT 1
5550: EQUAL
5551: IFFALSE 5569
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5553: LD_VAR 0 1
5557: PUSH
5558: LD_INT 1
5560: ARRAY
5561: PPUSH
5562: LD_STRING D4-Sol1-2
5564: PPUSH
5565: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5569: LD_VAR 0 1
5573: PUSH
5574: LD_INT 1
5576: ARRAY
5577: PPUSH
5578: CALL_OW 258
5582: PUSH
5583: LD_INT 2
5585: EQUAL
5586: IFFALSE 5604
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5588: LD_VAR 0 1
5592: PUSH
5593: LD_INT 1
5595: ARRAY
5596: PPUSH
5597: LD_STRING D4-FSol1-2
5599: PPUSH
5600: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5604: LD_EXP 8
5608: PPUSH
5609: LD_STRING D4-Mikh-3
5611: PPUSH
5612: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5616: LD_VAR 0 1
5620: PUSH
5621: LD_INT 1
5623: ARRAY
5624: PPUSH
5625: CALL_OW 258
5629: PUSH
5630: LD_INT 1
5632: EQUAL
5633: IFFALSE 5651
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5635: LD_VAR 0 1
5639: PUSH
5640: LD_INT 1
5642: ARRAY
5643: PPUSH
5644: LD_STRING D4-Sol1-3
5646: PPUSH
5647: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5651: LD_VAR 0 1
5655: PUSH
5656: LD_INT 1
5658: ARRAY
5659: PPUSH
5660: CALL_OW 258
5664: PUSH
5665: LD_INT 2
5667: EQUAL
5668: IFFALSE 5686
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5670: LD_VAR 0 1
5674: PUSH
5675: LD_INT 1
5677: ARRAY
5678: PPUSH
5679: LD_STRING D4-FSol1-3
5681: PPUSH
5682: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5686: LD_EXP 8
5690: PPUSH
5691: LD_STRING D4-Mikh-4
5693: PPUSH
5694: CALL_OW 88
// case Query ( Qs1 ) of 1 :
5698: LD_STRING Qs1
5700: PPUSH
5701: CALL_OW 97
5705: PUSH
5706: LD_INT 1
5708: DOUBLE
5709: EQUAL
5710: IFTRUE 5714
5712: GO 5749
5714: POP
// begin InGameOff ;
5715: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5719: LD_INT 1
5721: PPUSH
5722: LD_INT 6
5724: PPUSH
5725: LD_INT 2
5727: PPUSH
5728: LD_INT 1
5730: PPUSH
5731: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5735: LD_EXP 8
5739: PPUSH
5740: LD_INT 17
5742: PPUSH
5743: CALL_OW 113
// end ; 2 :
5747: GO 6342
5749: LD_INT 2
5751: DOUBLE
5752: EQUAL
5753: IFTRUE 5757
5755: GO 6307
5757: POP
// begin repeat wait ( 0 0$1 ) ;
5758: LD_INT 35
5760: PPUSH
5761: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5765: LD_VAR 0 1
5769: PUSH
5770: LD_INT 1
5772: ARRAY
5773: PPUSH
5774: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5778: LD_VAR 0 1
5782: PUSH
5783: LD_INT 1
5785: ARRAY
5786: PPUSH
5787: LD_EXP 1
5791: PPUSH
5792: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5796: LD_EXP 8
5800: PPUSH
5801: LD_EXP 1
5805: PPUSH
5806: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5810: LD_EXP 1
5814: PPUSH
5815: LD_EXP 8
5819: PPUSH
5820: CALL_OW 296
5824: PUSH
5825: LD_INT 5
5827: LESS
5828: IFFALSE 5758
// ComTurnUnit ( Mikhail , JMM ) ;
5830: LD_EXP 8
5834: PPUSH
5835: LD_EXP 1
5839: PPUSH
5840: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5844: LD_EXP 1
5848: PPUSH
5849: LD_STRING D4b-JMM-1
5851: PPUSH
5852: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5856: LD_EXP 8
5860: PPUSH
5861: LD_STRING D4b-Mikh-1
5863: PPUSH
5864: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5868: LD_EXP 1
5872: PPUSH
5873: LD_STRING D4b-JMM-2
5875: PPUSH
5876: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5880: LD_EXP 8
5884: PPUSH
5885: LD_STRING D4b-Mikh-2
5887: PPUSH
5888: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5892: LD_EXP 1
5896: PPUSH
5897: LD_STRING D4b-JMM-3
5899: PPUSH
5900: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5904: LD_EXP 8
5908: PPUSH
5909: LD_STRING D4b-Mikh-3
5911: PPUSH
5912: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5916: LD_EXP 1
5920: PPUSH
5921: LD_STRING D4b-JMM-4
5923: PPUSH
5924: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5928: LD_EXP 8
5932: PPUSH
5933: LD_STRING D4b-Mikh-4
5935: PPUSH
5936: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5940: LD_EXP 1
5944: PPUSH
5945: LD_STRING D4b-JMM-5
5947: PPUSH
5948: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5952: LD_EXP 8
5956: PPUSH
5957: LD_STRING D4b-Mikh-5
5959: PPUSH
5960: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5964: LD_EXP 1
5968: PPUSH
5969: LD_STRING D4b-JMM-6
5971: PPUSH
5972: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5976: LD_EXP 8
5980: PPUSH
5981: LD_STRING D4b-Mikh-6
5983: PPUSH
5984: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5988: LD_EXP 1
5992: PPUSH
5993: LD_STRING D4b-JMM-7
5995: PPUSH
5996: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
6000: LD_EXP 8
6004: PPUSH
6005: LD_STRING D4b-Mikh-7
6007: PPUSH
6008: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6012: LD_VAR 0 1
6016: PUSH
6017: LD_INT 1
6019: ARRAY
6020: PPUSH
6021: CALL_OW 258
6025: PUSH
6026: LD_INT 1
6028: EQUAL
6029: IFFALSE 6047
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6031: LD_VAR 0 1
6035: PUSH
6036: LD_INT 1
6038: ARRAY
6039: PPUSH
6040: LD_STRING D4b-Sol1-7
6042: PPUSH
6043: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6047: LD_VAR 0 1
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PPUSH
6056: CALL_OW 258
6060: PUSH
6061: LD_INT 2
6063: EQUAL
6064: IFFALSE 6082
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6066: LD_VAR 0 1
6070: PUSH
6071: LD_INT 1
6073: ARRAY
6074: PPUSH
6075: LD_STRING D4b-FSol1-7
6077: PPUSH
6078: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6082: LD_EXP 1
6086: PPUSH
6087: LD_STRING D4b-JMM-8
6089: PPUSH
6090: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6094: LD_VAR 0 1
6098: PUSH
6099: LD_INT 1
6101: ARRAY
6102: PPUSH
6103: CALL_OW 258
6107: PUSH
6108: LD_INT 1
6110: EQUAL
6111: IFFALSE 6129
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6113: LD_VAR 0 1
6117: PUSH
6118: LD_INT 1
6120: ARRAY
6121: PPUSH
6122: LD_STRING D4b-Sol1-8
6124: PPUSH
6125: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6129: LD_VAR 0 1
6133: PUSH
6134: LD_INT 1
6136: ARRAY
6137: PPUSH
6138: CALL_OW 258
6142: PUSH
6143: LD_INT 2
6145: EQUAL
6146: IFFALSE 6164
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6148: LD_VAR 0 1
6152: PUSH
6153: LD_INT 1
6155: ARRAY
6156: PPUSH
6157: LD_STRING D4b-FSol1-8
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6164: LD_EXP 1
6168: PPUSH
6169: LD_STRING D4b-JMM-9
6171: PPUSH
6172: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6176: LD_EXP 8
6180: PPUSH
6181: LD_INT 1
6183: PPUSH
6184: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6188: LD_ADDR_VAR 0 3
6192: PUSH
6193: LD_INT 22
6195: PUSH
6196: LD_INT 1
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: PUSH
6203: EMPTY
6204: LIST
6205: PPUSH
6206: CALL_OW 69
6210: PUSH
6211: FOR_IN
6212: IFFALSE 6225
// ComFree ( i ) ;
6214: LD_VAR 0 3
6218: PPUSH
6219: CALL_OW 139
6223: GO 6211
6225: POP
6226: POP
// repeat wait ( 0 0$1 ) ;
6227: LD_INT 35
6229: PPUSH
6230: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6234: LD_EXP 8
6238: PPUSH
6239: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6243: LD_EXP 8
6247: PUSH
6248: LD_VAR 0 1
6252: PUSH
6253: LD_INT 1
6255: ARRAY
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PPUSH
6261: LD_INT 1
6263: PPUSH
6264: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6268: LD_EXP 8
6272: PPUSH
6273: CALL_OW 310
6277: IFFALSE 6227
// mikhailDepot = IsInUnit ( Mikhail ) ;
6279: LD_ADDR_EXP 23
6283: PUSH
6284: LD_EXP 8
6288: PPUSH
6289: CALL_OW 310
6293: ST_TO_ADDR
// InGameOff ;
6294: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6298: LD_STRING M3
6300: PPUSH
6301: CALL_OW 337
// end ; 3 :
6305: GO 6342
6307: LD_INT 3
6309: DOUBLE
6310: EQUAL
6311: IFTRUE 6315
6313: GO 6341
6315: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6316: LD_EXP 8
6320: PPUSH
6321: LD_INT 17
6323: PPUSH
6324: CALL_OW 113
// wait ( 0 0$3 ) ;
6328: LD_INT 105
6330: PPUSH
6331: CALL_OW 67
// InGameOff ;
6335: CALL_OW 9
// end ; end ;
6339: GO 6342
6341: POP
// PrepareTigers ;
6342: CALL 15211 0 0
// RussianTrap ;
6346: CALL 10215 0 0
// tigersRespawn = 1 ;
6350: LD_ADDR_EXP 30
6354: PUSH
6355: LD_INT 1
6357: ST_TO_ADDR
// end ;
6358: PPOPN 3
6360: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6361: LD_INT 1
6363: PPUSH
6364: CALL_OW 255
6368: PUSH
6369: LD_INT 1
6371: EQUAL
6372: PUSH
6373: LD_INT 10
6375: PPUSH
6376: CALL_OW 255
6380: PUSH
6381: LD_INT 1
6383: EQUAL
6384: AND
6385: PUSH
6386: LD_INT 1
6388: PPUSH
6389: CALL_OW 274
6393: PPUSH
6394: LD_INT 1
6396: PPUSH
6397: CALL_OW 275
6401: PUSH
6402: LD_INT 100
6404: GREATEREQUAL
6405: AND
6406: IFFALSE 6555
6408: GO 6410
6410: DISABLE
6411: LD_INT 0
6413: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6414: LD_INT 2100
6416: PPUSH
6417: LD_INT 4200
6419: PPUSH
6420: CALL_OW 12
6424: PUSH
6425: LD_INT 1050
6427: PLUS
6428: PPUSH
6429: CALL_OW 67
// PrepareCargoBays ;
6433: CALL 13071 0 0
// cargoRespawn = 1 ;
6437: LD_ADDR_EXP 28
6441: PUSH
6442: LD_INT 1
6444: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6445: LD_ADDR_VAR 0 1
6449: PUSH
6450: LD_EXP 15
6454: PUSH
6455: LD_EXP 16
6459: PUSH
6460: LD_EXP 17
6464: PUSH
6465: LD_EXP 18
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6476: LD_VAR 0 1
6480: PPUSH
6481: LD_INT 17
6483: PPUSH
6484: LD_INT 10
6486: PPUSH
6487: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6491: LD_VAR 0 1
6495: PPUSH
6496: LD_INT 36
6498: PPUSH
6499: LD_INT 13
6501: PPUSH
6502: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6506: LD_VAR 0 1
6510: PPUSH
6511: LD_INT 40
6513: PPUSH
6514: LD_INT 20
6516: PPUSH
6517: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6521: LD_VAR 0 1
6525: PPUSH
6526: LD_INT 53
6528: PPUSH
6529: LD_INT 16
6531: PPUSH
6532: CALL_OW 171
// wait ( 0 0$5 ) ;
6536: LD_INT 175
6538: PPUSH
6539: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6543: LD_EXP 17
6547: PPUSH
6548: LD_STRING D5-Rus2-1
6550: PPUSH
6551: CALL_OW 88
// end ;
6555: PPOPN 1
6557: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6558: LD_EXP 28
6562: PUSH
6563: LD_INT 1
6565: EQUAL
6566: IFFALSE 6721
6568: GO 6570
6570: DISABLE
6571: LD_INT 0
6573: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6574: LD_ADDR_VAR 0 1
6578: PUSH
6579: LD_INT 22
6581: PUSH
6582: LD_INT 3
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 21
6591: PUSH
6592: LD_INT 2
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 34
6601: PUSH
6602: LD_INT 51
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: PPUSH
6614: CALL_OW 69
6618: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6619: LD_INT 105
6621: PPUSH
6622: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6626: LD_VAR 0 1
6630: PPUSH
6631: LD_INT 3
6633: PUSH
6634: LD_INT 60
6636: PUSH
6637: EMPTY
6638: LIST
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PPUSH
6644: CALL_OW 72
6648: PUSH
6649: LD_VAR 0 1
6653: PPUSH
6654: LD_INT 3
6656: PUSH
6657: LD_INT 24
6659: PUSH
6660: LD_INT 980
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PPUSH
6671: CALL_OW 72
6675: OR
6676: IFFALSE 6619
// ComMoveXY ( cargos , 7 , 9 ) ;
6678: LD_VAR 0 1
6682: PPUSH
6683: LD_INT 7
6685: PPUSH
6686: LD_INT 9
6688: PPUSH
6689: CALL_OW 111
// cargoSee = 1 ;
6693: LD_ADDR_EXP 29
6697: PUSH
6698: LD_INT 1
6700: ST_TO_ADDR
// cargoEscape = 1 ;
6701: LD_ADDR_EXP 20
6705: PUSH
6706: LD_INT 1
6708: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6709: LD_EXP 17
6713: PPUSH
6714: LD_STRING D5-Rus2-1a
6716: PPUSH
6717: CALL_OW 88
// end ;
6721: PPOPN 1
6723: END
// every 0 0$1 trigger cargoEscape and UnitFilter ( [ cargo1 , cargo2 ] , [ [ f_ok ] , [ f_side , 3 ] , [ f_placed ] ] ) do var cr , i , x , y ;
6724: LD_EXP 20
6728: PUSH
6729: LD_EXP 15
6733: PUSH
6734: LD_EXP 16
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: PPUSH
6743: LD_INT 50
6745: PUSH
6746: EMPTY
6747: LIST
6748: PUSH
6749: LD_INT 22
6751: PUSH
6752: LD_INT 3
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 52
6761: PUSH
6762: EMPTY
6763: LIST
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: LIST
6769: PPUSH
6770: CALL_OW 72
6774: AND
6775: IFFALSE 7108
6777: GO 6779
6779: DISABLE
6780: LD_INT 0
6782: PPUSH
6783: PPUSH
6784: PPUSH
6785: PPUSH
// begin enable ;
6786: ENABLE
// for i in [ cargo1 , cargo2 ] do
6787: LD_ADDR_VAR 0 2
6791: PUSH
6792: LD_EXP 15
6796: PUSH
6797: LD_EXP 16
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: FOR_IN
6807: IFFALSE 7106
// begin cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
6809: LD_ADDR_VAR 0 1
6813: PUSH
6814: LD_VAR 0 2
6818: PPUSH
6819: CALL_OW 250
6823: PPUSH
6824: LD_VAR 0 2
6828: PPUSH
6829: CALL_OW 251
6833: PPUSH
6834: LD_INT 6
6836: PPUSH
6837: CALL 76466 0 3
6841: ST_TO_ADDR
// if cr and GetMultiCargo ( i ) [ 4 ] < 60 then
6842: LD_VAR 0 1
6846: PUSH
6847: LD_VAR 0 2
6851: PPUSH
6852: CALL 77685 0 1
6856: PUSH
6857: LD_INT 4
6859: ARRAY
6860: PUSH
6861: LD_INT 60
6863: LESS
6864: AND
6865: IFFALSE 6904
// ComCollect ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
6867: LD_VAR 0 2
6871: PPUSH
6872: LD_VAR 0 1
6876: PUSH
6877: LD_INT 1
6879: ARRAY
6880: PUSH
6881: LD_INT 1
6883: ARRAY
6884: PPUSH
6885: LD_VAR 0 1
6889: PUSH
6890: LD_INT 1
6892: ARRAY
6893: PUSH
6894: LD_INT 2
6896: ARRAY
6897: PPUSH
6898: CALL_OW 117
6902: GO 7104
// if not IsInArea ( i , RemoveArea ) then
6904: LD_VAR 0 2
6908: PPUSH
6909: LD_INT 32
6911: PPUSH
6912: CALL_OW 308
6916: NOT
6917: IFFALSE 7065
// begin x := ShiftX ( GetX ( i ) , 4 , 3 ) ;
6919: LD_ADDR_VAR 0 3
6923: PUSH
6924: LD_VAR 0 2
6928: PPUSH
6929: CALL_OW 250
6933: PPUSH
6934: LD_INT 4
6936: PPUSH
6937: LD_INT 3
6939: PPUSH
6940: CALL_OW 272
6944: ST_TO_ADDR
// y := GetY ( i ) ;
6945: LD_ADDR_VAR 0 4
6949: PUSH
6950: LD_VAR 0 2
6954: PPUSH
6955: CALL_OW 251
6959: ST_TO_ADDR
// if HexInfo ( x , y ) then
6960: LD_VAR 0 3
6964: PPUSH
6965: LD_VAR 0 4
6969: PPUSH
6970: CALL_OW 428
6974: IFFALSE 6997
// x := ShiftX ( x , 4 , 3 ) ;
6976: LD_ADDR_VAR 0 3
6980: PUSH
6981: LD_VAR 0 3
6985: PPUSH
6986: LD_INT 4
6988: PPUSH
6989: LD_INT 3
6991: PPUSH
6992: CALL_OW 272
6996: ST_TO_ADDR
// if HexInfo ( x , y ) or not ValidHex ( x , y ) then
6997: LD_VAR 0 3
7001: PPUSH
7002: LD_VAR 0 4
7006: PPUSH
7007: CALL_OW 428
7011: PUSH
7012: LD_VAR 0 3
7016: PPUSH
7017: LD_VAR 0 4
7021: PPUSH
7022: CALL_OW 488
7026: NOT
7027: OR
7028: IFFALSE 7044
// ComMoveToArea ( i , RemoveArea ) else
7030: LD_VAR 0 2
7034: PPUSH
7035: LD_INT 32
7037: PPUSH
7038: CALL_OW 113
7042: GO 7063
// ComMoveXY ( i , x , y ) ;
7044: LD_VAR 0 2
7048: PPUSH
7049: LD_VAR 0 3
7053: PPUSH
7054: LD_VAR 0 4
7058: PPUSH
7059: CALL_OW 111
// end else
7063: GO 7104
// begin RemoveUnit ( IsDrivenBy ( i ) ) ;
7065: LD_VAR 0 2
7069: PPUSH
7070: CALL_OW 311
7074: PPUSH
7075: CALL_OW 64
// RemoveUnit ( i ) ;
7079: LD_VAR 0 2
7083: PPUSH
7084: CALL_OW 64
// cargoEscape := cargoEscape + 1 ;
7088: LD_ADDR_EXP 20
7092: PUSH
7093: LD_EXP 20
7097: PUSH
7098: LD_INT 1
7100: PLUS
7101: ST_TO_ADDR
// continue ;
7102: GO 6806
// end ; end ;
7104: GO 6806
7106: POP
7107: POP
// end ;
7108: PPOPN 4
7110: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
7111: LD_EXP 20
7115: PUSH
7116: LD_INT 1
7118: GREATER
7119: IFFALSE 7368
7121: GO 7123
7123: DISABLE
7124: LD_INT 0
7126: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
7127: LD_INT 4
7129: PPUSH
7130: LD_INT 1
7132: PPUSH
7133: LD_INT 1
7135: PPUSH
7136: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
7140: LD_INT 31
7142: PPUSH
7143: LD_INT 1
7145: PPUSH
7146: LD_INT 1
7148: PPUSH
7149: CALL_OW 324
// Hint ( Bunker ) ;
7153: LD_STRING Bunker
7155: PPUSH
7156: CALL_OW 339
// if IsOK ( Jerry ) then
7160: LD_EXP 7
7164: PPUSH
7165: CALL_OW 302
7169: IFFALSE 7185
// Say ( Jerry , D5a-Sol1-1 ) else
7171: LD_EXP 7
7175: PPUSH
7176: LD_STRING D5a-Sol1-1
7178: PPUSH
7179: CALL_OW 88
7183: GO 7271
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
7185: LD_ADDR_VAR 0 1
7189: PUSH
7190: LD_INT 22
7192: PUSH
7193: LD_INT 1
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: LD_INT 26
7202: PUSH
7203: LD_INT 1
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 69
7218: PUSH
7219: LD_EXP 1
7223: PUSH
7224: LD_EXP 2
7228: PUSH
7229: LD_EXP 3
7233: PUSH
7234: LD_EXP 5
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: DIFF
7245: ST_TO_ADDR
// if not speaker then
7246: LD_VAR 0 1
7250: NOT
7251: IFFALSE 7255
// exit ;
7253: GO 7368
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7255: LD_VAR 0 1
7259: PUSH
7260: LD_INT 1
7262: ARRAY
7263: PPUSH
7264: LD_STRING D5a-Sol1-1
7266: PPUSH
7267: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7271: LD_EXP 1
7275: PPUSH
7276: LD_STRING D5a-JMM-1
7278: PPUSH
7279: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
7283: LD_INT 22
7285: PPUSH
7286: LD_INT 22
7288: PUSH
7289: LD_INT 1
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: PUSH
7296: LD_INT 25
7298: PUSH
7299: LD_INT 2
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PPUSH
7310: CALL_OW 70
7314: IFFALSE 7368
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
7316: LD_INT 22
7318: PPUSH
7319: LD_INT 22
7321: PUSH
7322: LD_INT 1
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: LD_INT 25
7331: PUSH
7332: LD_INT 2
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PPUSH
7343: CALL_OW 70
7347: PUSH
7348: LD_INT 1
7350: ARRAY
7351: PPUSH
7352: LD_INT 31
7354: PPUSH
7355: LD_INT 44
7357: PPUSH
7358: LD_INT 13
7360: PPUSH
7361: LD_INT 1
7363: PPUSH
7364: CALL_OW 145
// end ;
7368: PPOPN 1
7370: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7371: LD_INT 1
7373: PPUSH
7374: CALL_OW 255
7378: PUSH
7379: LD_INT 3
7381: EQUAL
7382: PUSH
7383: LD_INT 1
7385: PPUSH
7386: CALL_OW 256
7390: PUSH
7391: LD_INT 1000
7393: LESS
7394: AND
7395: PUSH
7396: LD_INT 10
7398: PPUSH
7399: CALL_OW 255
7403: PUSH
7404: LD_INT 3
7406: EQUAL
7407: PUSH
7408: LD_INT 10
7410: PPUSH
7411: CALL_OW 256
7415: PUSH
7416: LD_INT 1000
7418: LESS
7419: AND
7420: OR
7421: IFFALSE 7438
7423: GO 7425
7425: DISABLE
// Say ( JMM , D8-JMM-1 ) ;
7426: LD_EXP 1
7430: PPUSH
7431: LD_STRING D8-JMM-1
7433: PPUSH
7434: CALL_OW 88
7438: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7439: LD_EXP 8
7443: PPUSH
7444: CALL_OW 310
7448: PUSH
7449: LD_INT 1
7451: EQUAL
7452: PUSH
7453: LD_EXP 22
7457: PUSH
7458: LD_INT 3
7460: EQUAL
7461: NOT
7462: AND
7463: IFFALSE 7485
7465: GO 7467
7467: DISABLE
// begin enable ;
7468: ENABLE
// mikhailInBase = 1 ;
7469: LD_ADDR_EXP 22
7473: PUSH
7474: LD_INT 1
7476: ST_TO_ADDR
// mikhailStatus = 1 ;
7477: LD_ADDR_EXP 21
7481: PUSH
7482: LD_INT 1
7484: ST_TO_ADDR
// end ;
7485: END
// export function AskMikhail ; begin
7486: LD_INT 0
7488: PPUSH
// case Query ( QMikh2 ) of 1 :
7489: LD_STRING QMikh2
7491: PPUSH
7492: CALL_OW 97
7496: PUSH
7497: LD_INT 1
7499: DOUBLE
7500: EQUAL
7501: IFTRUE 7505
7503: GO 7572
7505: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7506: LD_INT 1
7508: PPUSH
7509: LD_INT 6
7511: PPUSH
7512: LD_INT 2
7514: PPUSH
7515: LD_INT 1
7517: PPUSH
7518: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7522: LD_EXP 8
7526: PPUSH
7527: LD_INT 6
7529: PPUSH
7530: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7534: LD_EXP 8
7538: PPUSH
7539: CALL_OW 122
// wait ( 0 0$1 ) ;
7543: LD_INT 35
7545: PPUSH
7546: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7550: LD_EXP 8
7554: PPUSH
7555: LD_INT 17
7557: PPUSH
7558: CALL_OW 113
// mikhailInbase = 0 ;
7562: LD_ADDR_EXP 22
7566: PUSH
7567: LD_INT 0
7569: ST_TO_ADDR
// end ; 2 :
7570: GO 7813
7572: LD_INT 2
7574: DOUBLE
7575: EQUAL
7576: IFTRUE 7580
7578: GO 7753
7580: POP
// begin mikhailInBase = 2 ;
7581: LD_ADDR_EXP 22
7585: PUSH
7586: LD_INT 2
7588: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7589: LD_EXP 8
7593: PPUSH
7594: LD_INT 6
7596: PPUSH
7597: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7601: LD_EXP 8
7605: PPUSH
7606: CALL_OW 122
// wait ( 0 0$1 ) ;
7610: LD_INT 35
7612: PPUSH
7613: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7617: LD_EXP 8
7621: PPUSH
7622: LD_EXP 8
7626: PPUSH
7627: CALL_OW 250
7631: PUSH
7632: LD_INT 2
7634: PLUS
7635: PPUSH
7636: LD_EXP 8
7640: PPUSH
7641: CALL_OW 251
7645: PUSH
7646: LD_INT 2
7648: PLUS
7649: PPUSH
7650: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7654: LD_EXP 8
7658: PPUSH
7659: LD_EXP 8
7663: PPUSH
7664: CALL_OW 250
7668: PUSH
7669: LD_INT 1
7671: PLUS
7672: PPUSH
7673: LD_EXP 8
7677: PPUSH
7678: CALL_OW 251
7682: PUSH
7683: LD_INT 2
7685: PLUS
7686: PPUSH
7687: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7691: LD_EXP 8
7695: PPUSH
7696: LD_EXP 8
7700: PPUSH
7701: CALL_OW 250
7705: PUSH
7706: LD_INT 2
7708: PLUS
7709: PPUSH
7710: LD_EXP 8
7714: PPUSH
7715: CALL_OW 251
7719: PPUSH
7720: CALL_OW 171
// wait ( 0 0$5 ) ;
7724: LD_INT 175
7726: PPUSH
7727: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7731: LD_EXP 8
7735: PPUSH
7736: LD_INT 25
7738: PPUSH
7739: CALL_OW 113
// mikhailInBase = 4 ;
7743: LD_ADDR_EXP 22
7747: PUSH
7748: LD_INT 4
7750: ST_TO_ADDR
// end ; 3 :
7751: GO 7813
7753: LD_INT 3
7755: DOUBLE
7756: EQUAL
7757: IFTRUE 7761
7759: GO 7812
7761: POP
// begin SetSide ( Mikhail , 6 ) ;
7762: LD_EXP 8
7766: PPUSH
7767: LD_INT 6
7769: PPUSH
7770: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7774: LD_EXP 8
7778: PPUSH
7779: CALL_OW 122
// wait ( 0 0$1 ) ;
7783: LD_INT 35
7785: PPUSH
7786: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7790: LD_EXP 8
7794: PPUSH
7795: LD_INT 17
7797: PPUSH
7798: CALL_OW 113
// mikhailInbase = 3 ;
7802: LD_ADDR_EXP 22
7806: PUSH
7807: LD_INT 3
7809: ST_TO_ADDR
// end ; end ;
7810: GO 7813
7812: POP
// end ;
7813: LD_VAR 0 1
7817: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7818: LD_EXP 8
7822: PPUSH
7823: LD_INT 25
7825: PPUSH
7826: CALL_OW 308
7830: PUSH
7831: LD_EXP 22
7835: PUSH
7836: LD_INT 4
7838: EQUAL
7839: AND
7840: IFFALSE 7944
7842: GO 7844
7844: DISABLE
// begin enable ;
7845: ENABLE
// mikhailInBase = 1 ;
7846: LD_ADDR_EXP 22
7850: PUSH
7851: LD_INT 1
7853: ST_TO_ADDR
// InGameOn ;
7854: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7858: LD_INT 1
7860: PPUSH
7861: LD_INT 6
7863: PPUSH
7864: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7868: LD_INT 35
7870: PPUSH
7871: CALL_OW 67
// if Carry ( Mikhail ) then
7875: LD_EXP 8
7879: PPUSH
7880: CALL_OW 281
7884: IFFALSE 7895
// ComUnload ( Mikhail ) ;
7886: LD_EXP 8
7890: PPUSH
7891: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7895: LD_EXP 8
7899: PPUSH
7900: LD_INT 1
7902: PPUSH
7903: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7907: LD_EXP 8
7911: PPUSH
7912: CALL_OW 310
7916: IFFALSE 7868
// SetSide ( dep1 , 1 ) ;
7918: LD_INT 1
7920: PPUSH
7921: LD_INT 1
7923: PPUSH
7924: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7928: LD_EXP 8
7932: PPUSH
7933: LD_INT 1
7935: PPUSH
7936: CALL_OW 235
// InGameOff ;
7940: CALL_OW 9
// end ;
7944: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7945: LD_EXP 8
7949: PPUSH
7950: CALL_OW 310
7954: PUSH
7955: LD_EXP 22
7959: PUSH
7960: LD_INT 3
7962: EQUAL
7963: NOT
7964: AND
7965: IFFALSE 8100
7967: GO 7969
7969: DISABLE
// begin enable ;
7970: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7971: LD_INT 22
7973: PUSH
7974: LD_INT 1
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 21
7983: PUSH
7984: LD_INT 1
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: LD_INT 91
7993: PUSH
7994: LD_EXP 8
7998: PPUSH
7999: CALL_OW 310
8003: PUSH
8004: LD_INT 10
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: LIST
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: PPUSH
8017: CALL_OW 69
8021: PUSH
8022: LD_INT 1
8024: EQUAL
8025: IFFALSE 8100
// begin mikhailStatus = 4 ;
8027: LD_ADDR_EXP 21
8031: PUSH
8032: LD_INT 4
8034: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
8035: LD_INT 1
8037: PPUSH
8038: LD_INT 6
8040: PPUSH
8041: LD_INT 2
8043: PPUSH
8044: LD_INT 1
8046: PPUSH
8047: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
8051: LD_EXP 8
8055: PPUSH
8056: LD_INT 6
8058: PPUSH
8059: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
8063: LD_EXP 8
8067: PPUSH
8068: CALL_OW 122
// wait ( 0 0$1 ) ;
8072: LD_INT 35
8074: PPUSH
8075: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
8079: LD_EXP 8
8083: PPUSH
8084: LD_INT 17
8086: PPUSH
8087: CALL_OW 113
// mikhailStatus = 3 ;
8091: LD_ADDR_EXP 21
8095: PUSH
8096: LD_INT 3
8098: ST_TO_ADDR
// disable ;
8099: DISABLE
// end ; end ;
8100: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
8101: LD_EXP 1
8105: PPUSH
8106: LD_EXP 23
8110: PPUSH
8111: CALL_OW 296
8115: PUSH
8116: LD_INT 5
8118: LESS
8119: PUSH
8120: LD_EXP 21
8124: PUSH
8125: LD_INT 3
8127: EQUAL
8128: AND
8129: PUSH
8130: LD_EXP 22
8134: PUSH
8135: LD_INT 3
8137: EQUAL
8138: NOT
8139: AND
8140: IFFALSE 8371
8142: GO 8144
8144: DISABLE
8145: LD_INT 0
8147: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
8148: LD_ADDR_VAR 0 1
8152: PUSH
8153: LD_INT 22
8155: PUSH
8156: LD_INT 1
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PUSH
8163: LD_INT 21
8165: PUSH
8166: LD_INT 1
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 26
8175: PUSH
8176: LD_INT 1
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: LIST
8187: PPUSH
8188: CALL_OW 69
8192: PUSH
8193: LD_EXP 1
8197: PUSH
8198: LD_EXP 5
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: DIFF
8207: ST_TO_ADDR
// if not tmp then
8208: LD_VAR 0 1
8212: NOT
8213: IFFALSE 8217
// exit ;
8215: GO 8371
// DialogueOn ;
8217: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
8221: LD_EXP 1
8225: PPUSH
8226: LD_STRING D7-JMM-1
8228: PPUSH
8229: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
8233: LD_VAR 0 1
8237: PUSH
8238: LD_INT 1
8240: ARRAY
8241: PPUSH
8242: LD_STRING D7-Sol1-1
8244: PPUSH
8245: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8249: LD_EXP 1
8253: PPUSH
8254: LD_STRING D7-JMM-2
8256: PPUSH
8257: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8261: LD_VAR 0 1
8265: PUSH
8266: LD_INT 1
8268: ARRAY
8269: PPUSH
8270: LD_STRING D7-Sol1-2
8272: PPUSH
8273: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8277: LD_EXP 1
8281: PPUSH
8282: LD_STRING D7-JMM-3
8284: PPUSH
8285: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8289: LD_VAR 0 1
8293: PUSH
8294: LD_INT 1
8296: ARRAY
8297: PPUSH
8298: LD_STRING D7-Sol1-3
8300: PPUSH
8301: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8305: LD_EXP 3
8309: PPUSH
8310: CALL_OW 302
8314: PUSH
8315: LD_EXP 4
8319: PPUSH
8320: CALL_OW 302
8324: AND
8325: IFFALSE 8367
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8327: LD_EXP 3
8331: PPUSH
8332: LD_STRING D7-Cyrus-3
8334: PPUSH
8335: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8339: LD_VAR 0 1
8343: PUSH
8344: LD_INT 1
8346: ARRAY
8347: PPUSH
8348: LD_STRING D7-Sol1-4
8350: PPUSH
8351: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8355: LD_EXP 4
8359: PPUSH
8360: LD_STRING D7-Lisa-4
8362: PPUSH
8363: CALL_OW 88
// end ; DialogueOff ;
8367: CALL_OW 7
// end ;
8371: PPOPN 1
8373: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8374: LD_EXP 8
8378: PPUSH
8379: CALL_OW 303
8383: PUSH
8384: LD_EXP 21
8388: PUSH
8389: LD_INT 3
8391: EQUAL
8392: AND
8393: IFFALSE 8407
8395: GO 8397
8397: DISABLE
// begin enable ;
8398: ENABLE
// mikhailStatus = 2 ;
8399: LD_ADDR_EXP 21
8403: PUSH
8404: LD_INT 2
8406: ST_TO_ADDR
// end ;
8407: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8408: LD_EXP 8
8412: PPUSH
8413: LD_INT 17
8415: PPUSH
8416: CALL_OW 308
8420: PUSH
8421: LD_EXP 8
8425: PPUSH
8426: CALL_OW 255
8430: PUSH
8431: LD_INT 6
8433: EQUAL
8434: AND
8435: IFFALSE 8468
8437: GO 8439
8439: DISABLE
// begin if not mikhailInBase = 3 then
8440: LD_EXP 22
8444: PUSH
8445: LD_INT 3
8447: EQUAL
8448: NOT
8449: IFFALSE 8459
// mikhailStatus = 3 ;
8451: LD_ADDR_EXP 21
8455: PUSH
8456: LD_INT 3
8458: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8459: LD_EXP 8
8463: PPUSH
8464: CALL_OW 64
// end ;
8468: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8469: LD_EXP 21
8473: PUSH
8474: LD_INT 3
8476: EQUAL
8477: PUSH
8478: LD_EXP 8
8482: PPUSH
8483: CALL_OW 255
8487: PUSH
8488: LD_INT 6
8490: EQUAL
8491: AND
8492: IFFALSE 8658
8494: GO 8496
8496: DISABLE
8497: LD_INT 0
8499: PPUSH
8500: PPUSH
// begin enable ;
8501: ENABLE
// if IsOk ( Mikhail ) then
8502: LD_EXP 8
8506: PPUSH
8507: CALL_OW 302
8511: IFFALSE 8658
// begin attacker := Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8513: LD_ADDR_VAR 0 2
8517: PUSH
8518: LD_EXP 8
8522: PPUSH
8523: LD_INT 22
8525: PUSH
8526: LD_INT 1
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 21
8535: PUSH
8536: LD_INT 1
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: PPUSH
8547: CALL_OW 69
8551: PPUSH
8552: CALL 10407 0 2
8556: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8557: LD_VAR 0 2
8561: PPUSH
8562: LD_EXP 8
8566: PPUSH
8567: CALL_OW 296
8571: PUSH
8572: LD_INT 8
8574: LESS
8575: IFFALSE 8658
// begin if GetSex ( attacker ) = sex_male then
8577: LD_VAR 0 2
8581: PPUSH
8582: CALL_OW 258
8586: PUSH
8587: LD_INT 1
8589: EQUAL
8590: IFFALSE 8626
// begin disable ;
8592: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8593: LD_VAR 0 2
8597: PPUSH
8598: LD_STRING D7a-Sol1-1
8600: PPUSH
8601: CALL_OW 88
// wait ( 0 0$2 ) ;
8605: LD_INT 70
8607: PPUSH
8608: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8612: LD_VAR 0 2
8616: PPUSH
8617: LD_STRING D7a-Sol1-1a
8619: PPUSH
8620: CALL_OW 88
// end else
8624: GO 8658
// begin disable ;
8626: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8627: LD_VAR 0 2
8631: PPUSH
8632: LD_STRING D7a-FSol1-1
8634: PPUSH
8635: CALL_OW 88
// wait ( 0 0$2 ) ;
8639: LD_INT 70
8641: PPUSH
8642: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8646: LD_VAR 0 2
8650: PPUSH
8651: LD_STRING D7a-FSol1-1a
8653: PPUSH
8654: CALL_OW 88
// end ; end ; end ; end ;
8658: PPOPN 2
8660: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8661: LD_EXP 27
8665: PUSH
8666: LD_INT 1
8668: EQUAL
8669: PUSH
8670: LD_INT 22
8672: PPUSH
8673: LD_INT 22
8675: PUSH
8676: LD_INT 3
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: LD_INT 21
8685: PUSH
8686: LD_INT 1
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PPUSH
8697: CALL_OW 70
8701: PUSH
8702: LD_INT 2
8704: GREATER
8705: AND
8706: PUSH
8707: LD_INT 22
8709: PPUSH
8710: LD_INT 22
8712: PUSH
8713: LD_INT 1
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: LD_INT 2
8722: PUSH
8723: LD_INT 21
8725: PUSH
8726: LD_INT 1
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PUSH
8733: LD_INT 59
8735: PUSH
8736: EMPTY
8737: LIST
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: LIST
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: PPUSH
8748: CALL_OW 70
8752: PUSH
8753: LD_INT 0
8755: EQUAL
8756: AND
8757: IFFALSE 8772
8759: GO 8761
8761: DISABLE
// SetSide ( dep1 , 3 ) ;
8762: LD_INT 1
8764: PPUSH
8765: LD_INT 3
8767: PPUSH
8768: CALL_OW 235
8772: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8773: LD_EXP 30
8777: PUSH
8778: LD_INT 1
8780: EQUAL
8781: PUSH
8782: LD_INT 22
8784: PUSH
8785: LD_INT 0
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PUSH
8792: LD_INT 25
8794: PUSH
8795: LD_INT 14
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PPUSH
8806: CALL_OW 69
8810: PUSH
8811: LD_INT 0
8813: EQUAL
8814: AND
8815: IFFALSE 8916
8817: GO 8819
8819: DISABLE
8820: LD_INT 0
8822: PPUSH
8823: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8824: LD_ADDR_VAR 0 2
8828: PUSH
8829: LD_INT 22
8831: PUSH
8832: LD_INT 1
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PUSH
8839: LD_INT 21
8841: PUSH
8842: LD_INT 1
8844: PUSH
8845: EMPTY
8846: LIST
8847: LIST
8848: PUSH
8849: LD_INT 23
8851: PUSH
8852: LD_INT 1
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: LIST
8863: PPUSH
8864: CALL_OW 69
8868: ST_TO_ADDR
// for i in tmp do
8869: LD_ADDR_VAR 0 1
8873: PUSH
8874: LD_VAR 0 2
8878: PUSH
8879: FOR_IN
8880: IFFALSE 8907
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8882: LD_VAR 0 1
8886: PPUSH
8887: LD_INT 1
8889: PPUSH
8890: LD_INT 4
8892: PPUSH
8893: CALL_OW 12
8897: PPUSH
8898: LD_INT 300
8900: PPUSH
8901: CALL_OW 492
8905: GO 8879
8907: POP
8908: POP
// SetAchievement ( ACH_TIGER ) ;
8909: LD_STRING ACH_TIGER
8911: PPUSH
8912: CALL_OW 543
// end ;
8916: PPOPN 2
8918: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
8919: LD_INT 22
8921: PUSH
8922: LD_INT 1
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PUSH
8929: LD_INT 34
8931: PUSH
8932: LD_INT 51
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PPUSH
8943: CALL_OW 69
8947: PUSH
8948: LD_INT 2
8950: GREATEREQUAL
8951: IFFALSE 8963
8953: GO 8955
8955: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
8956: LD_STRING ACH_CARGO
8958: PPUSH
8959: CALL_OW 543
8963: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , un ; begin
8964: LD_INT 0
8966: PPUSH
8967: PPUSH
8968: PPUSH
// for i = 1 to count do
8969: LD_ADDR_VAR 0 8
8973: PUSH
8974: DOUBLE
8975: LD_INT 1
8977: DEC
8978: ST_TO_ADDR
8979: LD_VAR 0 6
8983: PUSH
8984: FOR_TO
8985: IFFALSE 9066
// begin uc_side = side ;
8987: LD_ADDR_OWVAR 20
8991: PUSH
8992: LD_VAR 0 1
8996: ST_TO_ADDR
// uc_nation = nation ;
8997: LD_ADDR_OWVAR 21
9001: PUSH
9002: LD_VAR 0 2
9006: ST_TO_ADDR
// hc_gallery =  ;
9007: LD_ADDR_OWVAR 33
9011: PUSH
9012: LD_STRING 
9014: ST_TO_ADDR
// hc_name =  ;
9015: LD_ADDR_OWVAR 26
9019: PUSH
9020: LD_STRING 
9022: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
9023: LD_INT 0
9025: PPUSH
9026: LD_VAR 0 5
9030: PPUSH
9031: LD_VAR 0 4
9035: PPUSH
9036: CALL_OW 380
// un = CreateHuman ;
9040: LD_ADDR_VAR 0 9
9044: PUSH
9045: CALL_OW 44
9049: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
9050: LD_VAR 0 9
9054: PPUSH
9055: LD_VAR 0 3
9059: PPUSH
9060: CALL_OW 52
// end ;
9064: GO 8984
9066: POP
9067: POP
// end ;
9068: LD_VAR 0 7
9072: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
9073: LD_INT 0
9075: PPUSH
9076: PPUSH
9077: PPUSH
// uc_side := GetSide ( b ) ;
9078: LD_ADDR_OWVAR 20
9082: PUSH
9083: LD_VAR 0 2
9087: PPUSH
9088: CALL_OW 255
9092: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
9093: LD_ADDR_OWVAR 21
9097: PUSH
9098: LD_VAR 0 2
9102: PPUSH
9103: CALL_OW 248
9107: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
9108: LD_INT 0
9110: PPUSH
9111: LD_INT 1
9113: PPUSH
9114: LD_VAR 0 1
9118: PPUSH
9119: CALL_OW 380
// un = CreateHuman ;
9123: LD_ADDR_VAR 0 4
9127: PUSH
9128: CALL_OW 44
9132: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
9133: LD_ADDR_VAR 0 5
9137: PUSH
9138: LD_VAR 0 2
9142: PPUSH
9143: CALL_OW 254
9147: PUSH
9148: LD_INT 3
9150: MINUS
9151: ST_TO_ADDR
// if dir < 0 then
9152: LD_VAR 0 5
9156: PUSH
9157: LD_INT 0
9159: LESS
9160: IFFALSE 9176
// dir := 6 + dir ;
9162: LD_ADDR_VAR 0 5
9166: PUSH
9167: LD_INT 6
9169: PUSH
9170: LD_VAR 0 5
9174: PLUS
9175: ST_TO_ADDR
// SetDir ( un , dir ) ;
9176: LD_VAR 0 4
9180: PPUSH
9181: LD_VAR 0 5
9185: PPUSH
9186: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
9190: LD_VAR 0 4
9194: PPUSH
9195: LD_VAR 0 2
9199: PPUSH
9200: CALL_OW 52
// end ;
9204: LD_VAR 0 3
9208: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkList ; begin
9209: LD_INT 0
9211: PPUSH
9212: PPUSH
9213: PPUSH
9214: PPUSH
// engineerOkList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
9215: LD_ADDR_VAR 0 7
9219: PUSH
9220: LD_INT 22
9222: PUSH
9223: LD_VAR 0 1
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: PUSH
9232: LD_INT 25
9234: PUSH
9235: LD_INT 2
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 24
9244: PUSH
9245: LD_INT 1000
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: LIST
9256: PPUSH
9257: CALL_OW 69
9261: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9262: LD_ADDR_VAR 0 5
9266: PUSH
9267: LD_VAR 0 3
9271: PPUSH
9272: LD_INT 22
9274: PUSH
9275: LD_VAR 0 1
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 21
9286: PUSH
9287: LD_INT 3
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: LD_INT 3
9296: PUSH
9297: LD_INT 24
9299: PUSH
9300: LD_INT 1000
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: PPUSH
9319: CALL_OW 70
9323: ST_TO_ADDR
// if not buildingsList and not engineerOkList then
9324: LD_VAR 0 5
9328: NOT
9329: PUSH
9330: LD_VAR 0 7
9334: NOT
9335: AND
9336: IFFALSE 9340
// exit ;
9338: GO 9536
// if not buildingsList and UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) and IsOk ( building ) then
9340: LD_VAR 0 5
9344: NOT
9345: PUSH
9346: LD_VAR 0 7
9350: PPUSH
9351: LD_INT 3
9353: PUSH
9354: LD_INT 54
9356: PUSH
9357: EMPTY
9358: LIST
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PPUSH
9364: CALL_OW 72
9368: AND
9369: PUSH
9370: LD_VAR 0 2
9374: PPUSH
9375: CALL_OW 302
9379: AND
9380: IFFALSE 9414
// ComEnterUnit ( UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) , building ) ;
9382: LD_VAR 0 7
9386: PPUSH
9387: LD_INT 3
9389: PUSH
9390: LD_INT 54
9392: PUSH
9393: EMPTY
9394: LIST
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PPUSH
9400: CALL_OW 72
9404: PPUSH
9405: LD_VAR 0 2
9409: PPUSH
9410: CALL_OW 120
// if buildingsList then
9414: LD_VAR 0 5
9418: IFFALSE 9536
// begin for i in engineerOkList do
9420: LD_ADDR_VAR 0 6
9424: PUSH
9425: LD_VAR 0 7
9429: PUSH
9430: FOR_IN
9431: IFFALSE 9534
// if IsInUnit ( i ) then
9433: LD_VAR 0 6
9437: PPUSH
9438: CALL_OW 310
9442: IFFALSE 9455
// ComExitBuilding ( i ) else
9444: LD_VAR 0 6
9448: PPUSH
9449: CALL_OW 122
9453: GO 9532
// if GetLives ( i ) > 650 then
9455: LD_VAR 0 6
9459: PPUSH
9460: CALL_OW 256
9464: PUSH
9465: LD_INT 650
9467: GREATER
9468: IFFALSE 9496
// ComRepairBuilding ( i , NearestUnitToUnit ( buildingsList , i ) ) else
9470: LD_VAR 0 6
9474: PPUSH
9475: LD_VAR 0 5
9479: PPUSH
9480: LD_VAR 0 6
9484: PPUSH
9485: CALL_OW 74
9489: PPUSH
9490: CALL_OW 130
9494: GO 9532
// if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9496: LD_VAR 0 6
9500: PPUSH
9501: LD_INT 56
9503: PPUSH
9504: LD_INT 10
9506: PPUSH
9507: CALL_OW 297
9511: PUSH
9512: LD_INT 8
9514: GREATER
9515: IFFALSE 9532
// ComMoveXY ( i , 56 , 10 ) ;
9517: LD_VAR 0 6
9521: PPUSH
9522: LD_INT 56
9524: PPUSH
9525: LD_INT 10
9527: PPUSH
9528: CALL_OW 111
9532: GO 9430
9534: POP
9535: POP
// end ; end ;
9536: LD_VAR 0 4
9540: RET
// export function HealUnitInBase ( side , healArea , baseArea , building ) ; var sciList , i , damageUnits ; begin
9541: LD_INT 0
9543: PPUSH
9544: PPUSH
9545: PPUSH
9546: PPUSH
// sciList := FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9547: LD_ADDR_VAR 0 6
9551: PUSH
9552: LD_INT 22
9554: PUSH
9555: LD_VAR 0 1
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PUSH
9564: LD_INT 25
9566: PUSH
9567: LD_INT 4
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 24
9576: PUSH
9577: LD_INT 250
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: LIST
9588: PPUSH
9589: CALL_OW 69
9593: ST_TO_ADDR
// damageUnits := FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9594: LD_ADDR_VAR 0 8
9598: PUSH
9599: LD_VAR 0 3
9603: PPUSH
9604: LD_INT 22
9606: PUSH
9607: LD_VAR 0 1
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: LD_INT 21
9618: PUSH
9619: LD_INT 1
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PUSH
9626: LD_INT 3
9628: PUSH
9629: LD_INT 24
9631: PUSH
9632: LD_INT 650
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: LIST
9647: PPUSH
9648: CALL_OW 70
9652: ST_TO_ADDR
// if not damageUnits and not sciList then
9653: LD_VAR 0 8
9657: NOT
9658: PUSH
9659: LD_VAR 0 6
9663: NOT
9664: AND
9665: IFFALSE 9669
// exit ;
9667: GO 9808
// if damageUnits then
9669: LD_VAR 0 8
9673: IFFALSE 9752
// begin for i in sciList do
9675: LD_ADDR_VAR 0 7
9679: PUSH
9680: LD_VAR 0 6
9684: PUSH
9685: FOR_IN
9686: IFFALSE 9748
// if IsInUnit ( i ) then
9688: LD_VAR 0 7
9692: PPUSH
9693: CALL_OW 310
9697: IFFALSE 9710
// ComExitBuilding ( i ) else
9699: LD_VAR 0 7
9703: PPUSH
9704: CALL_OW 122
9708: GO 9746
// if not HasTask ( i ) then
9710: LD_VAR 0 7
9714: PPUSH
9715: CALL_OW 314
9719: NOT
9720: IFFALSE 9746
// ComHeal ( i , NearestUnitToUnit ( damageUnits , i ) ) ;
9722: LD_VAR 0 7
9726: PPUSH
9727: LD_VAR 0 8
9731: PPUSH
9732: LD_VAR 0 7
9736: PPUSH
9737: CALL_OW 74
9741: PPUSH
9742: CALL_OW 128
9746: GO 9685
9748: POP
9749: POP
// end else
9750: GO 9808
// if UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) then
9752: LD_VAR 0 6
9756: PPUSH
9757: LD_INT 3
9759: PUSH
9760: LD_INT 54
9762: PUSH
9763: EMPTY
9764: LIST
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: PPUSH
9770: CALL_OW 72
9774: IFFALSE 9808
// ComEnterUnit ( UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) , building ) ;
9776: LD_VAR 0 6
9780: PPUSH
9781: LD_INT 3
9783: PUSH
9784: LD_INT 54
9786: PUSH
9787: EMPTY
9788: LIST
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PPUSH
9794: CALL_OW 72
9798: PPUSH
9799: LD_VAR 0 4
9803: PPUSH
9804: CALL_OW 120
// end ;
9808: LD_VAR 0 5
9812: RET
// export function DefendBases ( area , enemySide , defendersList , building ) ; var i , enemy , nearestUnit ; begin
9813: LD_INT 0
9815: PPUSH
9816: PPUSH
9817: PPUSH
9818: PPUSH
// if not defendersList then
9819: LD_VAR 0 3
9823: NOT
9824: IFFALSE 9828
// exit ;
9826: GO 10210
// enemy := FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9828: LD_ADDR_VAR 0 7
9832: PUSH
9833: LD_VAR 0 1
9837: PPUSH
9838: LD_INT 22
9840: PUSH
9841: LD_VAR 0 2
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 2
9852: PUSH
9853: LD_INT 21
9855: PUSH
9856: LD_INT 2
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PUSH
9863: LD_INT 21
9865: PUSH
9866: LD_INT 1
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: LIST
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PPUSH
9882: CALL_OW 70
9886: ST_TO_ADDR
// if enemy then
9887: LD_VAR 0 7
9891: IFFALSE 10112
// begin for i in defendersList do
9893: LD_ADDR_VAR 0 6
9897: PUSH
9898: LD_VAR 0 3
9902: PUSH
9903: FOR_IN
9904: IFFALSE 10108
// begin if IsInUnit ( i ) and GetLives ( i ) > 500 then
9906: LD_VAR 0 6
9910: PPUSH
9911: CALL_OW 310
9915: PUSH
9916: LD_VAR 0 6
9920: PPUSH
9921: CALL_OW 256
9925: PUSH
9926: LD_INT 500
9928: GREATER
9929: AND
9930: IFFALSE 9943
// ComExitBuilding ( i ) else
9932: LD_VAR 0 6
9936: PPUSH
9937: CALL_OW 122
9941: GO 10106
// if GetLives ( i ) > 650 then
9943: LD_VAR 0 6
9947: PPUSH
9948: CALL_OW 256
9952: PUSH
9953: LD_INT 650
9955: GREATER
9956: IFFALSE 10009
// begin nearestUnit := NearestUnitToUnit ( enemy , i ) ;
9958: LD_ADDR_VAR 0 8
9962: PUSH
9963: LD_VAR 0 7
9967: PPUSH
9968: LD_VAR 0 6
9972: PPUSH
9973: CALL_OW 74
9977: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearestUnit ) , GetY ( nearestUnit ) ) ;
9978: LD_VAR 0 6
9982: PPUSH
9983: LD_VAR 0 8
9987: PPUSH
9988: CALL_OW 250
9992: PPUSH
9993: LD_VAR 0 8
9997: PPUSH
9998: CALL_OW 251
10002: PPUSH
10003: CALL_OW 114
// end else
10007: GO 10106
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
10009: LD_INT 22
10011: PUSH
10012: LD_INT 3
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: LD_INT 25
10021: PUSH
10022: LD_INT 4
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PPUSH
10033: CALL_OW 69
10037: IFFALSE 10077
// begin if GetDistUnitXY ( i , 56 , 10 ) > 8 then
10039: LD_VAR 0 6
10043: PPUSH
10044: LD_INT 56
10046: PPUSH
10047: LD_INT 10
10049: PPUSH
10050: CALL_OW 297
10054: PUSH
10055: LD_INT 8
10057: GREATER
10058: IFFALSE 10075
// ComMoveXY ( i , 56 , 10 ) ;
10060: LD_VAR 0 6
10064: PPUSH
10065: LD_INT 56
10067: PPUSH
10068: LD_INT 10
10070: PPUSH
10071: CALL_OW 111
// end else
10075: GO 10106
// if GetLives ( i ) <= 500 then
10077: LD_VAR 0 6
10081: PPUSH
10082: CALL_OW 256
10086: PUSH
10087: LD_INT 500
10089: LESSEQUAL
10090: IFFALSE 10106
// ComEnterUnit ( i , building ) ;
10092: LD_VAR 0 6
10096: PPUSH
10097: LD_VAR 0 4
10101: PPUSH
10102: CALL_OW 120
// end ;
10106: GO 9903
10108: POP
10109: POP
// end else
10110: GO 10210
// if UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) then
10112: LD_VAR 0 3
10116: PPUSH
10117: LD_INT 56
10119: PUSH
10120: EMPTY
10121: LIST
10122: PUSH
10123: LD_INT 3
10125: PUSH
10126: LD_INT 60
10128: PUSH
10129: EMPTY
10130: LIST
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PUSH
10136: LD_INT 24
10138: PUSH
10139: LD_INT 1000
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: LIST
10150: PPUSH
10151: CALL_OW 72
10155: IFFALSE 10210
// ComEnterUnit ( UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) , building ) ;
10157: LD_VAR 0 3
10161: PPUSH
10162: LD_INT 56
10164: PUSH
10165: EMPTY
10166: LIST
10167: PUSH
10168: LD_INT 3
10170: PUSH
10171: LD_INT 60
10173: PUSH
10174: EMPTY
10175: LIST
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 24
10183: PUSH
10184: LD_INT 1000
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: LIST
10195: PPUSH
10196: CALL_OW 72
10200: PPUSH
10201: LD_VAR 0 4
10205: PPUSH
10206: CALL_OW 120
// end ;
10210: LD_VAR 0 5
10214: RET
// export function RussianTrap ; var i ; begin
10215: LD_INT 0
10217: PPUSH
10218: PPUSH
// if GetSide ( Brian ) = 4 then
10219: LD_EXP 6
10223: PPUSH
10224: CALL_OW 255
10228: PUSH
10229: LD_INT 4
10231: EQUAL
10232: IFFALSE 10255
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10234: LD_EXP 6
10238: PUSH
10239: LD_EXP 7
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: PPUSH
10248: LD_INT 0
10250: PPUSH
10251: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10255: LD_ADDR_VAR 0 2
10259: PUSH
10260: LD_INT 22
10262: PUSH
10263: LD_INT 3
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 21
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PPUSH
10284: CALL_OW 69
10288: PUSH
10289: FOR_IN
10290: IFFALSE 10400
// begin ComExitBuilding ( i ) ;
10292: LD_VAR 0 2
10296: PPUSH
10297: CALL_OW 122
// wait ( 0 0$1 ) ;
10301: LD_INT 35
10303: PPUSH
10304: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10308: LD_VAR 0 2
10312: PPUSH
10313: LD_INT 120
10315: PPUSH
10316: LD_INT 56
10318: PPUSH
10319: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10323: LD_VAR 0 2
10327: PPUSH
10328: LD_INT 111
10330: PPUSH
10331: LD_INT 37
10333: PPUSH
10334: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10338: LD_INT 33
10340: PPUSH
10341: CALL_OW 255
10345: PUSH
10346: LD_INT 3
10348: EQUAL
10349: PUSH
10350: LD_INT 33
10352: PPUSH
10353: CALL_OW 302
10357: AND
10358: IFFALSE 10374
// AddComEnterUnit ( i , arm2 ) else
10360: LD_VAR 0 2
10364: PPUSH
10365: LD_INT 33
10367: PPUSH
10368: CALL_OW 180
10372: GO 10398
// begin AddComCrawl ( i ) ;
10374: LD_VAR 0 2
10378: PPUSH
10379: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10383: LD_VAR 0 2
10387: PPUSH
10388: LD_INT 109
10390: PPUSH
10391: LD_INT 30
10393: PPUSH
10394: CALL_OW 174
// end ; end ;
10398: GO 10289
10400: POP
10401: POP
// end ;
10402: LD_VAR 0 1
10406: RET
// export function Nearest ( un , units ) ; var nearestDist , nearestUn , sold , dist ; begin
10407: LD_INT 0
10409: PPUSH
10410: PPUSH
10411: PPUSH
10412: PPUSH
10413: PPUSH
// nearestDist := 1000 ;
10414: LD_ADDR_VAR 0 4
10418: PUSH
10419: LD_INT 1000
10421: ST_TO_ADDR
// nearestUn := un ;
10422: LD_ADDR_VAR 0 5
10426: PUSH
10427: LD_VAR 0 1
10431: ST_TO_ADDR
// for sold in units do
10432: LD_ADDR_VAR 0 6
10436: PUSH
10437: LD_VAR 0 2
10441: PUSH
10442: FOR_IN
10443: IFFALSE 10499
// begin dist := GetDistUnits ( un , sold ) ;
10445: LD_ADDR_VAR 0 7
10449: PUSH
10450: LD_VAR 0 1
10454: PPUSH
10455: LD_VAR 0 6
10459: PPUSH
10460: CALL_OW 296
10464: ST_TO_ADDR
// if dist < nearestDist then
10465: LD_VAR 0 7
10469: PUSH
10470: LD_VAR 0 4
10474: LESS
10475: IFFALSE 10497
// begin nearestUn := sold ;
10477: LD_ADDR_VAR 0 5
10481: PUSH
10482: LD_VAR 0 6
10486: ST_TO_ADDR
// nearestDist := dist ;
10487: LD_ADDR_VAR 0 4
10491: PUSH
10492: LD_VAR 0 7
10496: ST_TO_ADDR
// end ; end ;
10497: GO 10442
10499: POP
10500: POP
// result := NearestUn ;
10501: LD_ADDR_VAR 0 3
10505: PUSH
10506: LD_VAR 0 5
10510: ST_TO_ADDR
// end ;
10511: LD_VAR 0 3
10515: RET
// export function PrepareDifficulty ; begin
10516: LD_INT 0
10518: PPUSH
// if Difficulty = 1 then
10519: LD_OWVAR 67
10523: PUSH
10524: LD_INT 1
10526: EQUAL
10527: IFFALSE 10590
// begin RemoveUnit ( brw2 ) ;
10529: LD_INT 9
10531: PPUSH
10532: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10536: LD_INT 30
10538: PPUSH
10539: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10543: LD_INT 52
10545: PPUSH
10546: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10550: LD_INT 63
10552: PPUSH
10553: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10557: LD_INT 5
10559: PUSH
10560: LD_INT 4
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PPUSH
10567: LD_INT 60
10569: PPUSH
10570: CALL_OW 240
// RuSoldMinLevel = 0 ;
10574: LD_ADDR_EXP 13
10578: PUSH
10579: LD_INT 0
10581: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10582: LD_ADDR_EXP 14
10586: PUSH
10587: LD_INT 1
10589: ST_TO_ADDR
// end ; if Difficulty = 2 then
10590: LD_OWVAR 67
10594: PUSH
10595: LD_INT 2
10597: EQUAL
10598: IFFALSE 10640
// begin RemoveUnit ( brw4 ) ;
10600: LD_INT 52
10602: PPUSH
10603: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10607: LD_INT 5
10609: PUSH
10610: LD_INT 4
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PPUSH
10617: LD_INT 50
10619: PPUSH
10620: CALL_OW 240
// RuSoldMinLevel = 1 ;
10624: LD_ADDR_EXP 13
10628: PUSH
10629: LD_INT 1
10631: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10632: LD_ADDR_EXP 14
10636: PUSH
10637: LD_INT 2
10639: ST_TO_ADDR
// end ; if Difficulty >= 3 then
10640: LD_OWVAR 67
10644: PUSH
10645: LD_INT 3
10647: GREATEREQUAL
10648: IFFALSE 10683
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10650: LD_INT 5
10652: PUSH
10653: LD_INT 4
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PPUSH
10660: LD_INT 40
10662: PPUSH
10663: CALL_OW 240
// RuSoldMinLevel = 2 ;
10667: LD_ADDR_EXP 13
10671: PUSH
10672: LD_INT 2
10674: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10675: LD_ADDR_EXP 14
10679: PUSH
10680: LD_INT 3
10682: ST_TO_ADDR
// end ; end ;
10683: LD_VAR 0 1
10687: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10688: LD_INT 0
10690: PPUSH
10691: PPUSH
10692: PPUSH
// if not vehicles then
10693: LD_VAR 0 1
10697: NOT
10698: IFFALSE 10702
// exit ;
10700: GO 10832
// tmp := [ ] ;
10702: LD_ADDR_VAR 0 5
10706: PUSH
10707: EMPTY
10708: ST_TO_ADDR
// for i in vehicles do
10709: LD_ADDR_VAR 0 4
10713: PUSH
10714: LD_VAR 0 1
10718: PUSH
10719: FOR_IN
10720: IFFALSE 10816
// tmp := Replace ( tmp , tmp + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10722: LD_ADDR_VAR 0 5
10726: PUSH
10727: LD_VAR 0 5
10731: PPUSH
10732: LD_VAR 0 5
10736: PUSH
10737: LD_INT 1
10739: PLUS
10740: PPUSH
10741: LD_VAR 0 4
10745: PPUSH
10746: CALL_OW 265
10750: PUSH
10751: LD_VAR 0 4
10755: PPUSH
10756: CALL_OW 262
10760: PUSH
10761: LD_VAR 0 4
10765: PPUSH
10766: CALL_OW 263
10770: PUSH
10771: LD_VAR 0 4
10775: PPUSH
10776: CALL_OW 264
10780: PUSH
10781: LD_VAR 0 4
10785: PPUSH
10786: CALL_OW 261
10790: PUSH
10791: LD_VAR 0 4
10795: PPUSH
10796: CALL_OW 256
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: PPUSH
10809: CALL_OW 1
10813: ST_TO_ADDR
10814: GO 10719
10816: POP
10817: POP
// SaveVariable ( tmp , ident ) ;
10818: LD_VAR 0 5
10822: PPUSH
10823: LD_VAR 0 2
10827: PPUSH
10828: CALL_OW 39
// end ; end_of_file
10832: LD_VAR 0 3
10836: RET
// export function PrepareHeroes ; var plive , prefix ; begin
10837: LD_INT 0
10839: PPUSH
10840: PPUSH
10841: PPUSH
// prefix := 01_ ;
10842: LD_ADDR_VAR 0 3
10846: PUSH
10847: LD_STRING 01_
10849: ST_TO_ADDR
// uc_side := 1 ;
10850: LD_ADDR_OWVAR 20
10854: PUSH
10855: LD_INT 1
10857: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debug ) , prefix ) ;
10858: LD_ADDR_EXP 1
10862: PUSH
10863: LD_STRING JMM
10865: PPUSH
10866: LD_EXP 34
10870: NOT
10871: PPUSH
10872: LD_VAR 0 3
10876: PPUSH
10877: CALL 36652 0 3
10881: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10882: LD_ADDR_VAR 0 2
10886: PUSH
10887: LD_STRING 01_JMMLifePoints_1
10889: PPUSH
10890: LD_INT 1000
10892: PPUSH
10893: CALL_OW 30
10897: ST_TO_ADDR
// if plive < 250 then
10898: LD_VAR 0 2
10902: PUSH
10903: LD_INT 250
10905: LESS
10906: IFFALSE 10916
// plive := 300 ;
10908: LD_ADDR_VAR 0 2
10912: PUSH
10913: LD_INT 300
10915: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10916: LD_EXP 1
10920: PPUSH
10921: LD_VAR 0 2
10925: PPUSH
10926: CALL_OW 234
// Powell := NewCharacter ( Powell ) ;
10930: LD_ADDR_EXP 9
10934: PUSH
10935: LD_STRING Powell
10937: PPUSH
10938: CALL_OW 25
10942: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , prefix ) ;
10943: LD_ADDR_EXP 2
10947: PUSH
10948: LD_STRING Bobby
10950: PPUSH
10951: LD_EXP 34
10955: NOT
10956: PPUSH
10957: LD_VAR 0 3
10961: PPUSH
10962: CALL 36652 0 3
10966: ST_TO_ADDR
// if Bobby then
10967: LD_EXP 2
10971: IFFALSE 11021
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10973: LD_ADDR_VAR 0 2
10977: PUSH
10978: LD_STRING 01_BobbyLifePoints_1
10980: PPUSH
10981: LD_INT 1000
10983: PPUSH
10984: CALL_OW 30
10988: ST_TO_ADDR
// if plive < 250 then
10989: LD_VAR 0 2
10993: PUSH
10994: LD_INT 250
10996: LESS
10997: IFFALSE 11007
// plive := 300 ;
10999: LD_ADDR_VAR 0 2
11003: PUSH
11004: LD_INT 300
11006: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
11007: LD_EXP 2
11011: PPUSH
11012: LD_VAR 0 2
11016: PPUSH
11017: CALL_OW 234
// end ; Cyrus := PrepareUnit ( Cyrus , ( not debug ) , prefix ) ;
11021: LD_ADDR_EXP 3
11025: PUSH
11026: LD_STRING Cyrus
11028: PPUSH
11029: LD_EXP 34
11033: NOT
11034: PPUSH
11035: LD_VAR 0 3
11039: PPUSH
11040: CALL 36652 0 3
11044: ST_TO_ADDR
// if Cyrus then
11045: LD_EXP 3
11049: IFFALSE 11099
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
11051: LD_ADDR_VAR 0 2
11055: PUSH
11056: LD_STRING 01_CyrusLifePoints_1
11058: PPUSH
11059: LD_INT 1000
11061: PPUSH
11062: CALL_OW 30
11066: ST_TO_ADDR
// if plive < 250 then
11067: LD_VAR 0 2
11071: PUSH
11072: LD_INT 250
11074: LESS
11075: IFFALSE 11085
// plive := 300 ;
11077: LD_ADDR_VAR 0 2
11081: PUSH
11082: LD_INT 300
11084: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
11085: LD_EXP 3
11089: PPUSH
11090: LD_VAR 0 2
11094: PPUSH
11095: CALL_OW 234
// end ; Khatam := NewCharacter ( Khatam ) ;
11099: LD_ADDR_EXP 5
11103: PUSH
11104: LD_STRING Khatam
11106: PPUSH
11107: CALL_OW 25
11111: ST_TO_ADDR
// uc_side := 4 ;
11112: LD_ADDR_OWVAR 20
11116: PUSH
11117: LD_INT 4
11119: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
11120: LD_ADDR_EXP 4
11124: PUSH
11125: LD_STRING Lisa
11127: PPUSH
11128: CALL_OW 25
11132: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
11133: LD_EXP 1
11137: PPUSH
11138: LD_INT 3
11140: PPUSH
11141: LD_INT 0
11143: PPUSH
11144: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
11148: LD_EXP 2
11152: PPUSH
11153: LD_INT 3
11155: PPUSH
11156: LD_INT 0
11158: PPUSH
11159: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
11163: LD_EXP 3
11167: PPUSH
11168: LD_INT 3
11170: PPUSH
11171: LD_INT 0
11173: PPUSH
11174: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
11178: LD_EXP 4
11182: PPUSH
11183: LD_INT 5
11185: PPUSH
11186: LD_INT 0
11188: PPUSH
11189: CALL_OW 49
// ComCrawl ( Lisa ) ;
11193: LD_EXP 4
11197: PPUSH
11198: CALL_OW 137
// end ;
11202: LD_VAR 0 1
11206: RET
// export function PrepareLisSquad ; var i , un ; begin
11207: LD_INT 0
11209: PPUSH
11210: PPUSH
11211: PPUSH
// uc_side := 4 ;
11212: LD_ADDR_OWVAR 20
11216: PUSH
11217: LD_INT 4
11219: ST_TO_ADDR
// uc_nation := 1 ;
11220: LD_ADDR_OWVAR 21
11224: PUSH
11225: LD_INT 1
11227: ST_TO_ADDR
// hc_class := 2 ;
11228: LD_ADDR_OWVAR 28
11232: PUSH
11233: LD_INT 2
11235: ST_TO_ADDR
// hc_sex := sex_male ;
11236: LD_ADDR_OWVAR 27
11240: PUSH
11241: LD_INT 1
11243: ST_TO_ADDR
// hc_gallery :=  ;
11244: LD_ADDR_OWVAR 33
11248: PUSH
11249: LD_STRING 
11251: ST_TO_ADDR
// hc_name :=  ;
11252: LD_ADDR_OWVAR 26
11256: PUSH
11257: LD_STRING 
11259: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11260: LD_ADDR_OWVAR 30
11264: PUSH
11265: LD_INT 0
11267: PUSH
11268: LD_INT 1
11270: PUSH
11271: LD_INT 0
11273: PUSH
11274: LD_INT 0
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11283: LD_ADDR_OWVAR 31
11287: PUSH
11288: LD_INT 1
11290: PUSH
11291: LD_INT 2
11293: PUSH
11294: LD_INT 0
11296: PUSH
11297: LD_INT 0
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: ST_TO_ADDR
// un := CreateHuman ;
11306: LD_ADDR_VAR 0 3
11310: PUSH
11311: CALL_OW 44
11315: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11316: LD_VAR 0 3
11320: PPUSH
11321: LD_INT 6
11323: PPUSH
11324: LD_INT 0
11326: PPUSH
11327: CALL_OW 49
// hc_sex := sex_female ;
11331: LD_ADDR_OWVAR 27
11335: PUSH
11336: LD_INT 2
11338: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11339: LD_ADDR_OWVAR 30
11343: PUSH
11344: LD_INT 0
11346: PUSH
11347: LD_INT 0
11349: PUSH
11350: LD_INT 0
11352: PUSH
11353: LD_INT 1
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11362: LD_ADDR_OWVAR 31
11366: PUSH
11367: LD_INT 0
11369: PUSH
11370: LD_INT 1
11372: PUSH
11373: LD_INT 0
11375: PUSH
11376: LD_INT 1
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: ST_TO_ADDR
// un := CreateHuman ;
11385: LD_ADDR_VAR 0 3
11389: PUSH
11390: CALL_OW 44
11394: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11395: LD_VAR 0 3
11399: PPUSH
11400: LD_INT 6
11402: PPUSH
11403: LD_INT 0
11405: PPUSH
11406: CALL_OW 49
// if not Bobby and not Cyrus then
11410: LD_EXP 2
11414: NOT
11415: PUSH
11416: LD_EXP 3
11420: NOT
11421: AND
11422: IFFALSE 11511
// begin hc_class := 1 ;
11424: LD_ADDR_OWVAR 28
11428: PUSH
11429: LD_INT 1
11431: ST_TO_ADDR
// hc_sex := sex_male ;
11432: LD_ADDR_OWVAR 27
11436: PUSH
11437: LD_INT 1
11439: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11440: LD_ADDR_OWVAR 30
11444: PUSH
11445: LD_INT 2
11447: PUSH
11448: LD_INT 3
11450: PUSH
11451: LD_INT 1
11453: PUSH
11454: LD_INT 0
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11463: LD_ADDR_OWVAR 31
11467: PUSH
11468: LD_INT 2
11470: PUSH
11471: LD_INT 3
11473: PUSH
11474: LD_INT 1
11476: PUSH
11477: LD_INT 0
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: ST_TO_ADDR
// un := CreateHuman ;
11486: LD_ADDR_VAR 0 3
11490: PUSH
11491: CALL_OW 44
11495: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11496: LD_VAR 0 3
11500: PPUSH
11501: LD_INT 31
11503: PPUSH
11504: LD_INT 0
11506: PPUSH
11507: CALL_OW 49
// end ; InitHc ;
11511: CALL_OW 19
// end ;
11515: LD_VAR 0 1
11519: RET
// export function PrepareOtherAmericans ; begin
11520: LD_INT 0
11522: PPUSH
// uc_side := 4 ;
11523: LD_ADDR_OWVAR 20
11527: PUSH
11528: LD_INT 4
11530: ST_TO_ADDR
// uc_nation := 1 ;
11531: LD_ADDR_OWVAR 21
11535: PUSH
11536: LD_INT 1
11538: ST_TO_ADDR
// hc_gallery :=  ;
11539: LD_ADDR_OWVAR 33
11543: PUSH
11544: LD_STRING 
11546: ST_TO_ADDR
// hc_name := Tom Garvin ;
11547: LD_ADDR_OWVAR 26
11551: PUSH
11552: LD_STRING Tom Garvin
11554: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 2 ) ;
11555: LD_INT 1
11557: PPUSH
11558: LD_INT 1
11560: PPUSH
11561: LD_INT 2
11563: PPUSH
11564: CALL_OW 380
// Brian := CreateHuman ;
11568: LD_ADDR_EXP 6
11572: PUSH
11573: CALL_OW 44
11577: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11578: LD_EXP 6
11582: PPUSH
11583: LD_INT 10
11585: PPUSH
11586: LD_INT 0
11588: PPUSH
11589: CALL_OW 49
// hc_name := Jerry White ;
11593: LD_ADDR_OWVAR 26
11597: PUSH
11598: LD_STRING Jerry White
11600: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , 2 ) ;
11601: LD_INT 1
11603: PPUSH
11604: LD_INT 3
11606: PPUSH
11607: LD_INT 2
11609: PPUSH
11610: CALL_OW 380
// Jerry := CreateHuman ;
11614: LD_ADDR_EXP 7
11618: PUSH
11619: CALL_OW 44
11623: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11624: LD_EXP 7
11628: PPUSH
11629: LD_INT 10
11631: PPUSH
11632: LD_INT 0
11634: PPUSH
11635: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11639: LD_EXP 6
11643: PUSH
11644: LD_EXP 7
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PPUSH
11653: CALL_OW 140
// end ;
11657: LD_VAR 0 1
11661: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un , hexes ; begin
11662: LD_INT 0
11664: PPUSH
11665: PPUSH
11666: PPUSH
11667: PPUSH
// hexes := AreaToList ( DeadsSpawn , 0 ) ;
11668: LD_ADDR_VAR 0 4
11672: PUSH
11673: LD_INT 16
11675: PPUSH
11676: LD_INT 0
11678: PPUSH
11679: CALL_OW 517
11683: ST_TO_ADDR
// for i = 1 to 6 do
11684: LD_ADDR_VAR 0 2
11688: PUSH
11689: DOUBLE
11690: LD_INT 1
11692: DEC
11693: ST_TO_ADDR
11694: LD_INT 6
11696: PUSH
11697: FOR_TO
11698: IFFALSE 11844
// begin uc_side := 4 ;
11700: LD_ADDR_OWVAR 20
11704: PUSH
11705: LD_INT 4
11707: ST_TO_ADDR
// uc_nation := 1 ;
11708: LD_ADDR_OWVAR 21
11712: PUSH
11713: LD_INT 1
11715: ST_TO_ADDR
// hc_gallery :=  ;
11716: LD_ADDR_OWVAR 33
11720: PUSH
11721: LD_STRING 
11723: ST_TO_ADDR
// hc_name :=  ;
11724: LD_ADDR_OWVAR 26
11728: PUSH
11729: LD_STRING 
11731: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 1 ) ;
11732: LD_INT 0
11734: PPUSH
11735: LD_INT 1
11737: PUSH
11738: LD_INT 1
11740: PUSH
11741: LD_INT 4
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: LIST
11748: PUSH
11749: LD_VAR 0 2
11753: PUSH
11754: LD_INT 3
11756: MOD
11757: PUSH
11758: LD_INT 1
11760: PLUS
11761: ARRAY
11762: PPUSH
11763: LD_INT 1
11765: PPUSH
11766: CALL_OW 380
// un := CreateHuman ;
11770: LD_ADDR_VAR 0 3
11774: PUSH
11775: CALL_OW 44
11779: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11780: LD_VAR 0 3
11784: PPUSH
11785: LD_INT 0
11787: PPUSH
11788: LD_INT 5
11790: PPUSH
11791: CALL_OW 12
11795: PPUSH
11796: CALL_OW 233
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
11800: LD_VAR 0 3
11804: PPUSH
11805: LD_VAR 0 4
11809: PUSH
11810: LD_INT 1
11812: ARRAY
11813: PUSH
11814: LD_VAR 0 2
11818: ARRAY
11819: PPUSH
11820: LD_VAR 0 4
11824: PUSH
11825: LD_INT 2
11827: ARRAY
11828: PUSH
11829: LD_VAR 0 2
11833: ARRAY
11834: PPUSH
11835: LD_INT 1
11837: PPUSH
11838: CALL_OW 601
// end ;
11842: GO 11697
11844: POP
11845: POP
// DyingSold := CreateHuman ;
11846: LD_ADDR_EXP 35
11850: PUSH
11851: CALL_OW 44
11855: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11856: LD_EXP 35
11860: PPUSH
11861: LD_INT 16
11863: PPUSH
11864: LD_INT 0
11866: PPUSH
11867: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11871: LD_EXP 35
11875: PPUSH
11876: LD_INT 250
11878: PPUSH
11879: CALL_OW 234
// end ; end_of_file
11883: LD_VAR 0 1
11887: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11888: LD_INT 0
11890: PPUSH
11891: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11892: LD_ADDR_VAR 0 2
11896: PUSH
11897: LD_INT 22
11899: PUSH
11900: LD_INT 1
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 23
11909: PUSH
11910: LD_INT 1
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 25
11919: PUSH
11920: LD_INT 2
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: LD_INT 50
11929: PUSH
11930: EMPTY
11931: LIST
11932: PUSH
11933: LD_INT 56
11935: PUSH
11936: EMPTY
11937: LIST
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: PPUSH
11946: CALL_OW 69
11950: PUSH
11951: LD_EXP 1
11955: PUSH
11956: EMPTY
11957: LIST
11958: DIFF
11959: ST_TO_ADDR
// if not tmp then
11960: LD_VAR 0 2
11964: NOT
11965: IFFALSE 11969
// exit ;
11967: GO 12045
// uc_side = 6 ;
11969: LD_ADDR_OWVAR 20
11973: PUSH
11974: LD_INT 6
11976: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11977: LD_ADDR_EXP 8
11981: PUSH
11982: LD_STRING Mikhail
11984: PPUSH
11985: CALL_OW 25
11989: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11990: LD_EXP 8
11994: PPUSH
11995: LD_INT 3
11997: PPUSH
11998: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
12002: LD_EXP 8
12006: PPUSH
12007: LD_VAR 0 2
12011: PUSH
12012: LD_INT 1
12014: ARRAY
12015: PPUSH
12016: CALL_OW 250
12020: PPUSH
12021: LD_VAR 0 2
12025: PUSH
12026: LD_INT 1
12028: ARRAY
12029: PPUSH
12030: CALL_OW 251
12034: PPUSH
12035: LD_INT 5
12037: PPUSH
12038: LD_INT 1
12040: PPUSH
12041: CALL_OW 50
// end ;
12045: LD_VAR 0 1
12049: RET
// export function PrepareRussianCommander ; begin
12050: LD_INT 0
12052: PPUSH
// uc_side = 3 ;
12053: LD_ADDR_OWVAR 20
12057: PUSH
12058: LD_INT 3
12060: ST_TO_ADDR
// uc_nation = 3 ;
12061: LD_ADDR_OWVAR 21
12065: PUSH
12066: LD_INT 3
12068: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
12069: LD_ADDR_EXP 19
12073: PUSH
12074: LD_STRING Natasza
12076: PPUSH
12077: CALL_OW 25
12081: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
12082: LD_EXP 19
12086: PPUSH
12087: LD_INT 24
12089: PPUSH
12090: LD_INT 0
12092: PPUSH
12093: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
12097: LD_EXP 19
12101: PPUSH
12102: LD_INT 56
12104: PPUSH
12105: LD_INT 16
12107: PPUSH
12108: CALL_OW 118
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , Natasza ) ;
12112: LD_ADDR_EXP 24
12116: PUSH
12117: LD_EXP 24
12121: PPUSH
12122: LD_EXP 24
12126: PUSH
12127: LD_INT 1
12129: PLUS
12130: PPUSH
12131: LD_EXP 19
12135: PPUSH
12136: CALL_OW 1
12140: ST_TO_ADDR
// end ;
12141: LD_VAR 0 1
12145: RET
// export function PrepareSouthBase ; var i , un ; begin
12146: LD_INT 0
12148: PPUSH
12149: PPUSH
12150: PPUSH
// for i = 1 to 2 do
12151: LD_ADDR_VAR 0 2
12155: PUSH
12156: DOUBLE
12157: LD_INT 1
12159: DEC
12160: ST_TO_ADDR
12161: LD_INT 2
12163: PUSH
12164: FOR_TO
12165: IFFALSE 12274
// begin uc_side = 3 ;
12167: LD_ADDR_OWVAR 20
12171: PUSH
12172: LD_INT 3
12174: ST_TO_ADDR
// uc_nation = 3 ;
12175: LD_ADDR_OWVAR 21
12179: PUSH
12180: LD_INT 3
12182: ST_TO_ADDR
// hc_gallery =  ;
12183: LD_ADDR_OWVAR 33
12187: PUSH
12188: LD_STRING 
12190: ST_TO_ADDR
// hc_name =  ;
12191: LD_ADDR_OWVAR 26
12195: PUSH
12196: LD_STRING 
12198: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12199: LD_INT 1
12201: PPUSH
12202: LD_INT 1
12204: PPUSH
12205: LD_EXP 13
12209: PPUSH
12210: LD_EXP 14
12214: PPUSH
12215: CALL_OW 12
12219: PPUSH
12220: CALL_OW 380
// hc_importance = 0 ;
12224: LD_ADDR_OWVAR 32
12228: PUSH
12229: LD_INT 0
12231: ST_TO_ADDR
// un = CreateHuman ;
12232: LD_ADDR_VAR 0 3
12236: PUSH
12237: CALL_OW 44
12241: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12242: LD_VAR 0 3
12246: PPUSH
12247: LD_INT 11
12249: PPUSH
12250: LD_INT 0
12252: PPUSH
12253: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12257: LD_VAR 0 3
12261: PPUSH
12262: LD_INT 111
12264: PPUSH
12265: LD_INT 38
12267: PPUSH
12268: CALL_OW 118
// end ;
12272: GO 12164
12274: POP
12275: POP
// for i = 1 to 2 do
12276: LD_ADDR_VAR 0 2
12280: PUSH
12281: DOUBLE
12282: LD_INT 1
12284: DEC
12285: ST_TO_ADDR
12286: LD_INT 2
12288: PUSH
12289: FOR_TO
12290: IFFALSE 12373
// begin uc_side = 3 ;
12292: LD_ADDR_OWVAR 20
12296: PUSH
12297: LD_INT 3
12299: ST_TO_ADDR
// uc_nation = 3 ;
12300: LD_ADDR_OWVAR 21
12304: PUSH
12305: LD_INT 3
12307: ST_TO_ADDR
// hc_gallery =  ;
12308: LD_ADDR_OWVAR 33
12312: PUSH
12313: LD_STRING 
12315: ST_TO_ADDR
// hc_name =  ;
12316: LD_ADDR_OWVAR 26
12320: PUSH
12321: LD_STRING 
12323: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12324: LD_INT 0
12326: PPUSH
12327: LD_INT 3
12329: PPUSH
12330: LD_EXP 13
12334: PPUSH
12335: LD_EXP 14
12339: PPUSH
12340: CALL_OW 12
12344: PPUSH
12345: CALL_OW 380
// un = CreateHuman ;
12349: LD_ADDR_VAR 0 3
12353: PUSH
12354: CALL_OW 44
12358: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12359: LD_VAR 0 3
12363: PPUSH
12364: LD_INT 10
12366: PPUSH
12367: CALL_OW 52
// end ;
12371: GO 12289
12373: POP
12374: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12375: LD_INT 3
12377: PPUSH
12378: LD_INT 3
12380: PPUSH
12381: LD_INT 33
12383: PPUSH
12384: LD_EXP 13
12388: PPUSH
12389: LD_EXP 14
12393: PPUSH
12394: CALL_OW 12
12398: PPUSH
12399: LD_INT 1
12401: PPUSH
12402: LD_INT 1
12404: PUSH
12405: LD_INT 2
12407: PUSH
12408: LD_INT 2
12410: PUSH
12411: LD_INT 3
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: PUSH
12420: LD_OWVAR 67
12424: ARRAY
12425: PPUSH
12426: CALL 8964 0 6
// for i in UnitsInside ( arm2 ) do
12430: LD_ADDR_VAR 0 2
12434: PUSH
12435: LD_INT 33
12437: PPUSH
12438: CALL_OW 313
12442: PUSH
12443: FOR_IN
12444: IFFALSE 12477
// southBaseDefenders = Replace ( southBaseDefenders , southBaseDefenders + 1 , i ) ;
12446: LD_ADDR_EXP 25
12450: PUSH
12451: LD_EXP 25
12455: PPUSH
12456: LD_EXP 25
12460: PUSH
12461: LD_INT 1
12463: PLUS
12464: PPUSH
12465: LD_VAR 0 2
12469: PPUSH
12470: CALL_OW 1
12474: ST_TO_ADDR
12475: GO 12443
12477: POP
12478: POP
// end ;
12479: LD_VAR 0 1
12483: RET
// export function PrepareNorthBase ; var i , un ; begin
12484: LD_INT 0
12486: PPUSH
12487: PPUSH
12488: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) , 4 ] [ Difficulty ] do
12489: LD_ADDR_VAR 0 2
12493: PUSH
12494: DOUBLE
12495: LD_INT 1
12497: DEC
12498: ST_TO_ADDR
12499: LD_INT 1
12501: PPUSH
12502: LD_INT 2
12504: PPUSH
12505: CALL_OW 12
12509: PUSH
12510: LD_INT 2
12512: PPUSH
12513: LD_INT 3
12515: PPUSH
12516: CALL_OW 12
12520: PUSH
12521: LD_INT 3
12523: PPUSH
12524: LD_INT 4
12526: PPUSH
12527: CALL_OW 12
12531: PUSH
12532: LD_INT 4
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: PUSH
12541: LD_OWVAR 67
12545: ARRAY
12546: PUSH
12547: FOR_TO
12548: IFFALSE 12634
// begin uc_side = 3 ;
12550: LD_ADDR_OWVAR 20
12554: PUSH
12555: LD_INT 3
12557: ST_TO_ADDR
// uc_nation = 3 ;
12558: LD_ADDR_OWVAR 21
12562: PUSH
12563: LD_INT 3
12565: ST_TO_ADDR
// hc_gallery =  ;
12566: LD_ADDR_OWVAR 33
12570: PUSH
12571: LD_STRING 
12573: ST_TO_ADDR
// hc_name =  ;
12574: LD_ADDR_OWVAR 26
12578: PUSH
12579: LD_STRING 
12581: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12582: LD_INT 0
12584: PPUSH
12585: LD_INT 1
12587: PPUSH
12588: LD_EXP 13
12592: PPUSH
12593: LD_EXP 14
12597: PPUSH
12598: CALL_OW 12
12602: PPUSH
12603: CALL_OW 380
// un = CreateHuman ;
12607: LD_ADDR_VAR 0 3
12611: PUSH
12612: CALL_OW 44
12616: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12617: LD_VAR 0 3
12621: PPUSH
12622: LD_INT 14
12624: PPUSH
12625: LD_INT 0
12627: PPUSH
12628: CALL_OW 49
// end ;
12632: GO 12547
12634: POP
12635: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) , 4 ] [ Difficulty ] ) ;
12636: LD_INT 3
12638: PPUSH
12639: LD_INT 3
12641: PPUSH
12642: LD_INT 2
12644: PPUSH
12645: LD_EXP 13
12649: PPUSH
12650: LD_EXP 14
12654: PPUSH
12655: CALL_OW 12
12659: PPUSH
12660: LD_INT 1
12662: PPUSH
12663: LD_INT 1
12665: PPUSH
12666: LD_INT 2
12668: PPUSH
12669: CALL_OW 12
12673: PUSH
12674: LD_INT 1
12676: PPUSH
12677: LD_INT 3
12679: PPUSH
12680: CALL_OW 12
12684: PUSH
12685: LD_INT 1
12687: PPUSH
12688: LD_INT 3
12690: PPUSH
12691: CALL_OW 12
12695: PUSH
12696: LD_INT 4
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: PUSH
12705: LD_OWVAR 67
12709: ARRAY
12710: PPUSH
12711: CALL 8964 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 , 2 ] [ Difficulty ] ) ;
12715: LD_INT 3
12717: PPUSH
12718: LD_INT 3
12720: PPUSH
12721: LD_INT 23
12723: PPUSH
12724: LD_EXP 13
12728: PPUSH
12729: LD_EXP 14
12733: PPUSH
12734: CALL_OW 12
12738: PPUSH
12739: LD_INT 4
12741: PPUSH
12742: LD_INT 0
12744: PUSH
12745: LD_INT 1
12747: PUSH
12748: LD_INT 2
12750: PUSH
12751: LD_INT 2
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: PUSH
12760: LD_OWVAR 67
12764: ARRAY
12765: PPUSH
12766: CALL 8964 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12770: LD_INT 3
12772: PPUSH
12773: LD_INT 3
12775: PPUSH
12776: LD_INT 1
12778: PPUSH
12779: LD_EXP 13
12783: PPUSH
12784: LD_EXP 14
12788: PPUSH
12789: CALL_OW 12
12793: PPUSH
12794: LD_INT 2
12796: PPUSH
12797: LD_INT 1
12799: PUSH
12800: LD_INT 2
12802: PUSH
12803: LD_INT 2
12805: PUSH
12806: LD_INT 3
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: PUSH
12815: LD_OWVAR 67
12819: ARRAY
12820: PPUSH
12821: CALL 8964 0 6
// for i in UnitsInside ( arm1 ) do
12825: LD_ADDR_VAR 0 2
12829: PUSH
12830: LD_INT 2
12832: PPUSH
12833: CALL_OW 313
12837: PUSH
12838: FOR_IN
12839: IFFALSE 12872
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , i ) ;
12841: LD_ADDR_EXP 24
12845: PUSH
12846: LD_EXP 24
12850: PPUSH
12851: LD_EXP 24
12855: PUSH
12856: LD_INT 1
12858: PLUS
12859: PPUSH
12860: LD_VAR 0 2
12864: PPUSH
12865: CALL_OW 1
12869: ST_TO_ADDR
12870: GO 12838
12872: POP
12873: POP
// end ;
12874: LD_VAR 0 1
12878: RET
// export function PrepareOtherRussians ; var i , un ; begin
12879: LD_INT 0
12881: PPUSH
12882: PPUSH
12883: PPUSH
// for i = 1 to 2 do
12884: LD_ADDR_VAR 0 2
12888: PUSH
12889: DOUBLE
12890: LD_INT 1
12892: DEC
12893: ST_TO_ADDR
12894: LD_INT 2
12896: PUSH
12897: FOR_TO
12898: IFFALSE 12999
// begin uc_side = 3 ;
12900: LD_ADDR_OWVAR 20
12904: PUSH
12905: LD_INT 3
12907: ST_TO_ADDR
// uc_nation = 3 ;
12908: LD_ADDR_OWVAR 21
12912: PUSH
12913: LD_INT 3
12915: ST_TO_ADDR
// hc_gallery =  ;
12916: LD_ADDR_OWVAR 33
12920: PUSH
12921: LD_STRING 
12923: ST_TO_ADDR
// hc_name =  ;
12924: LD_ADDR_OWVAR 26
12928: PUSH
12929: LD_STRING 
12931: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12932: LD_INT 0
12934: PPUSH
12935: LD_INT 1
12937: PPUSH
12938: LD_EXP 13
12942: PPUSH
12943: LD_EXP 14
12947: PPUSH
12948: CALL_OW 12
12952: PPUSH
12953: CALL_OW 380
// un = CreateHuman ;
12957: LD_ADDR_VAR 0 3
12961: PUSH
12962: CALL_OW 44
12966: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12967: LD_VAR 0 3
12971: PPUSH
12972: LD_INT 9
12974: PPUSH
12975: LD_INT 0
12977: PPUSH
12978: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12982: LD_VAR 0 3
12986: PPUSH
12987: LD_INT 80
12989: PPUSH
12990: LD_INT 73
12992: PPUSH
12993: CALL_OW 118
// end ;
12997: GO 12897
12999: POP
13000: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
13001: LD_ADDR_VAR 0 2
13005: PUSH
13006: LD_INT 22
13008: PUSH
13009: LD_INT 3
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 30
13018: PUSH
13019: LD_INT 31
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PPUSH
13030: CALL_OW 69
13034: PUSH
13035: FOR_IN
13036: IFFALSE 13064
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
13038: LD_EXP 13
13042: PPUSH
13043: LD_EXP 14
13047: PPUSH
13048: CALL_OW 12
13052: PPUSH
13053: LD_VAR 0 2
13057: PPUSH
13058: CALL 9073 0 2
13062: GO 13035
13064: POP
13065: POP
// end ;
13066: LD_VAR 0 1
13070: RET
// export function PrepareCargoBays ; begin
13071: LD_INT 0
13073: PPUSH
// uc_side = 3 ;
13074: LD_ADDR_OWVAR 20
13078: PUSH
13079: LD_INT 3
13081: ST_TO_ADDR
// uc_nation = 3 ;
13082: LD_ADDR_OWVAR 21
13086: PUSH
13087: LD_INT 3
13089: ST_TO_ADDR
// vc_engine = 1 ;
13090: LD_ADDR_OWVAR 39
13094: PUSH
13095: LD_INT 1
13097: ST_TO_ADDR
// vc_control = 1 ;
13098: LD_ADDR_OWVAR 38
13102: PUSH
13103: LD_INT 1
13105: ST_TO_ADDR
// vc_weapon = 51 ;
13106: LD_ADDR_OWVAR 40
13110: PUSH
13111: LD_INT 51
13113: ST_TO_ADDR
// vc_chassis = 22 ;
13114: LD_ADDR_OWVAR 37
13118: PUSH
13119: LD_INT 22
13121: ST_TO_ADDR
// cargo1 = CreateVehicle ;
13122: LD_ADDR_EXP 15
13126: PUSH
13127: CALL_OW 45
13131: ST_TO_ADDR
// cargo2 = CreateVehicle ;
13132: LD_ADDR_EXP 16
13136: PUSH
13137: CALL_OW 45
13141: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
13142: LD_EXP 15
13146: PPUSH
13147: LD_INT 13
13149: PPUSH
13150: LD_INT 0
13152: PPUSH
13153: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
13157: LD_EXP 16
13161: PPUSH
13162: LD_INT 13
13164: PPUSH
13165: LD_INT 0
13167: PPUSH
13168: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13172: LD_EXP 15
13176: PPUSH
13177: LD_INT 2
13179: PPUSH
13180: LD_INT 70
13182: PUSH
13183: LD_INT 50
13185: PUSH
13186: LD_INT 30
13188: PUSH
13189: LD_INT 20
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: PUSH
13198: LD_OWVAR 67
13202: ARRAY
13203: PPUSH
13204: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13208: LD_EXP 16
13212: PPUSH
13213: LD_INT 2
13215: PPUSH
13216: LD_INT 70
13218: PUSH
13219: LD_INT 50
13221: PUSH
13222: LD_INT 30
13224: PUSH
13225: LD_INT 20
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: PUSH
13234: LD_OWVAR 67
13238: ARRAY
13239: PPUSH
13240: CALL_OW 291
// hc_gallery =  ;
13244: LD_ADDR_OWVAR 33
13248: PUSH
13249: LD_STRING 
13251: ST_TO_ADDR
// hc_name =  ;
13252: LD_ADDR_OWVAR 26
13256: PUSH
13257: LD_STRING 
13259: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13260: LD_INT 1
13262: PPUSH
13263: LD_INT 3
13265: PPUSH
13266: LD_INT 1
13268: PPUSH
13269: LD_INT 2
13271: PPUSH
13272: CALL_OW 12
13276: PPUSH
13277: CALL_OW 380
// driver1 = CreateHuman ;
13281: LD_ADDR_EXP 17
13285: PUSH
13286: CALL_OW 44
13290: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13291: LD_EXP 17
13295: PPUSH
13296: LD_EXP 15
13300: PPUSH
13301: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13305: LD_ADDR_OWVAR 26
13309: PUSH
13310: LD_STRING Nikolai Andreyev
13312: ST_TO_ADDR
// driver2 = CreateHuman ;
13313: LD_ADDR_EXP 18
13317: PUSH
13318: CALL_OW 44
13322: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13323: LD_EXP 18
13327: PPUSH
13328: LD_EXP 16
13332: PPUSH
13333: CALL_OW 52
// end ;
13337: LD_VAR 0 1
13341: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , mech ; begin
13342: LD_INT 0
13344: PPUSH
13345: PPUSH
13346: PPUSH
13347: PPUSH
13348: PPUSH
13349: PPUSH
// uc_side = 3 ;
13350: LD_ADDR_OWVAR 20
13354: PUSH
13355: LD_INT 3
13357: ST_TO_ADDR
// uc_nation = 3 ;
13358: LD_ADDR_OWVAR 21
13362: PUSH
13363: LD_INT 3
13365: ST_TO_ADDR
// for i := 1 to count do
13366: LD_ADDR_VAR 0 4
13370: PUSH
13371: DOUBLE
13372: LD_INT 1
13374: DEC
13375: ST_TO_ADDR
13376: LD_VAR 0 1
13380: PUSH
13381: FOR_TO
13382: IFFALSE 13644
// begin vc_engine = 1 ;
13384: LD_ADDR_OWVAR 39
13388: PUSH
13389: LD_INT 1
13391: ST_TO_ADDR
// vc_control = 1 ;
13392: LD_ADDR_OWVAR 38
13396: PUSH
13397: LD_INT 1
13399: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
13400: LD_ADDR_OWVAR 40
13404: PUSH
13405: LD_INT 42
13407: ST_TO_ADDR
// if Difficulty = 3 then
13408: LD_OWVAR 67
13412: PUSH
13413: LD_INT 3
13415: EQUAL
13416: IFFALSE 13445
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13418: LD_ADDR_OWVAR 40
13422: PUSH
13423: LD_INT 42
13425: PUSH
13426: LD_INT 43
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 1
13435: PPUSH
13436: LD_INT 2
13438: PPUSH
13439: CALL_OW 12
13443: ARRAY
13444: ST_TO_ADDR
// if Difficulty = 4 then
13445: LD_OWVAR 67
13449: PUSH
13450: LD_INT 4
13452: EQUAL
13453: IFFALSE 13490
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 4 ) ] ;
13455: LD_ADDR_OWVAR 40
13459: PUSH
13460: LD_INT 42
13462: PUSH
13463: LD_INT 43
13465: PUSH
13466: LD_INT 43
13468: PUSH
13469: LD_INT 44
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 1
13480: PPUSH
13481: LD_INT 4
13483: PPUSH
13484: CALL_OW 12
13488: ARRAY
13489: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
13490: LD_ADDR_OWVAR 37
13494: PUSH
13495: LD_INT 21
13497: PUSH
13498: LD_INT 22
13500: PUSH
13501: LD_INT 22
13503: PUSH
13504: LD_INT 22
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: PUSH
13513: LD_OWVAR 67
13517: ARRAY
13518: ST_TO_ADDR
// veh = CreateVehicle ;
13519: LD_ADDR_VAR 0 5
13523: PUSH
13524: CALL_OW 45
13528: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13529: LD_VAR 0 5
13533: PPUSH
13534: LD_VAR 0 2
13538: PPUSH
13539: LD_INT 0
13541: PPUSH
13542: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13546: LD_ADDR_EXP 26
13550: PUSH
13551: LD_EXP 26
13555: PUSH
13556: LD_VAR 0 5
13560: ADD
13561: ST_TO_ADDR
// hc_gallery =  ;
13562: LD_ADDR_OWVAR 33
13566: PUSH
13567: LD_STRING 
13569: ST_TO_ADDR
// hc_name =  ;
13570: LD_ADDR_OWVAR 26
13574: PUSH
13575: LD_STRING 
13577: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13578: LD_INT 0
13580: PPUSH
13581: LD_INT 3
13583: PPUSH
13584: LD_EXP 13
13588: PPUSH
13589: LD_EXP 14
13593: PPUSH
13594: CALL_OW 12
13598: PPUSH
13599: CALL_OW 380
// un = CreateHuman ;
13603: LD_ADDR_VAR 0 6
13607: PUSH
13608: CALL_OW 44
13612: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13613: LD_VAR 0 6
13617: PPUSH
13618: LD_VAR 0 5
13622: PPUSH
13623: CALL_OW 52
// ComMoveXY ( un , 14 , 9 ) ;
13627: LD_VAR 0 6
13631: PPUSH
13632: LD_INT 14
13634: PPUSH
13635: LD_INT 9
13637: PPUSH
13638: CALL_OW 111
// end ;
13642: GO 13381
13644: POP
13645: POP
// wait ( 0 0$1 ) ;
13646: LD_INT 35
13648: PPUSH
13649: CALL_OW 67
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13653: LD_INT 0
13655: PPUSH
13656: LD_INT 2
13658: PPUSH
13659: LD_EXP 13
13663: PPUSH
13664: LD_EXP 14
13668: PPUSH
13669: CALL_OW 12
13673: PPUSH
13674: CALL_OW 380
// un = CreateHuman ;
13678: LD_ADDR_VAR 0 6
13682: PUSH
13683: CALL_OW 44
13687: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13688: LD_ADDR_VAR 0 4
13692: PUSH
13693: DOUBLE
13694: LD_INT 1
13696: DEC
13697: ST_TO_ADDR
13698: LD_VAR 0 1
13702: PUSH
13703: LD_INT 2
13705: PUSH
13706: LD_INT 2
13708: MUL
13709: PLUS
13710: PUSH
13711: FOR_TO
13712: IFFALSE 13804
// begin hc_gallery =  ;
13714: LD_ADDR_OWVAR 33
13718: PUSH
13719: LD_STRING 
13721: ST_TO_ADDR
// hc_name =  ;
13722: LD_ADDR_OWVAR 26
13726: PUSH
13727: LD_STRING 
13729: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13730: LD_INT 1
13732: PPUSH
13733: LD_INT 1
13735: PPUSH
13736: LD_EXP 13
13740: PPUSH
13741: LD_EXP 14
13745: PPUSH
13746: CALL_OW 12
13750: PPUSH
13751: CALL_OW 380
// un = CreateHuman ;
13755: LD_ADDR_VAR 0 6
13759: PUSH
13760: CALL_OW 44
13764: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 13 , 4 , false ) ;
13765: LD_VAR 0 6
13769: PPUSH
13770: LD_INT 9
13772: PPUSH
13773: LD_INT 13
13775: PPUSH
13776: LD_INT 4
13778: PPUSH
13779: LD_INT 0
13781: PPUSH
13782: CALL_OW 50
// attackGroup = attackGroup ^ un ;
13786: LD_ADDR_EXP 26
13790: PUSH
13791: LD_EXP 26
13795: PUSH
13796: LD_VAR 0 6
13800: ADD
13801: ST_TO_ADDR
// end ;
13802: GO 13711
13804: POP
13805: POP
// tmp := FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13806: LD_ADDR_VAR 0 7
13810: PUSH
13811: LD_INT 26
13813: PPUSH
13814: LD_INT 22
13816: PUSH
13817: LD_INT 3
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PUSH
13824: LD_INT 21
13826: PUSH
13827: LD_INT 1
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: LD_INT 26
13836: PUSH
13837: LD_INT 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: LIST
13848: PPUSH
13849: CALL_OW 70
13853: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13854: LD_VAR 0 7
13858: PUSH
13859: LD_INT 1
13861: ARRAY
13862: PPUSH
13863: LD_STRING D9-Rus3-1
13865: PPUSH
13866: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13870: LD_VAR 0 7
13874: PUSH
13875: LD_INT 2
13877: ARRAY
13878: PPUSH
13879: LD_STRING D9-Russ-1
13881: PPUSH
13882: CALL_OW 88
// ComAgressiveMove ( attackGroup , 31 , 13 ) ;
13886: LD_EXP 26
13890: PPUSH
13891: LD_INT 31
13893: PPUSH
13894: LD_INT 13
13896: PPUSH
13897: CALL_OW 114
// wait ( 0 0$3 ) ;
13901: LD_INT 105
13903: PPUSH
13904: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13908: LD_INT 35
13910: PPUSH
13911: CALL_OW 67
// for i in attackGroup do
13915: LD_ADDR_VAR 0 4
13919: PUSH
13920: LD_EXP 26
13924: PUSH
13925: FOR_IN
13926: IFFALSE 14293
// begin if IsDead ( i ) then
13928: LD_VAR 0 4
13932: PPUSH
13933: CALL_OW 301
13937: IFFALSE 13957
// begin attackGroup := attackGroup diff i ;
13939: LD_ADDR_EXP 26
13943: PUSH
13944: LD_EXP 26
13948: PUSH
13949: LD_VAR 0 4
13953: DIFF
13954: ST_TO_ADDR
// continue ;
13955: GO 13925
// end ; if not HasTask ( i ) and not GetTag ( i ) then
13957: LD_VAR 0 4
13961: PPUSH
13962: CALL_OW 314
13966: NOT
13967: PUSH
13968: LD_VAR 0 4
13972: PPUSH
13973: CALL_OW 110
13977: NOT
13978: AND
13979: IFFALSE 14015
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
13981: LD_VAR 0 4
13985: PPUSH
13986: LD_INT 22
13988: PUSH
13989: LD_INT 1
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PPUSH
13996: CALL_OW 69
14000: PPUSH
14001: LD_VAR 0 4
14005: PPUSH
14006: CALL_OW 74
14010: PPUSH
14011: CALL_OW 115
// if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
14015: LD_VAR 0 4
14019: PPUSH
14020: CALL_OW 110
14024: NOT
14025: PUSH
14026: LD_VAR 0 4
14030: PPUSH
14031: CALL_OW 256
14035: PUSH
14036: LD_INT 650
14038: LESS
14039: AND
14040: PUSH
14041: LD_VAR 0 4
14045: PPUSH
14046: CALL_OW 247
14050: PUSH
14051: LD_INT 2
14053: EQUAL
14054: AND
14055: IFFALSE 14084
// begin SetTag ( i , 1 ) ;
14057: LD_VAR 0 4
14061: PPUSH
14062: LD_INT 1
14064: PPUSH
14065: CALL_OW 109
// ComMoveXY ( i , 20 , 8 ) ;
14069: LD_VAR 0 4
14073: PPUSH
14074: LD_INT 20
14076: PPUSH
14077: LD_INT 8
14079: PPUSH
14080: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 20 , 8 ) < 6 then
14084: LD_VAR 0 4
14088: PPUSH
14089: CALL_OW 110
14093: PUSH
14094: LD_INT 1
14096: EQUAL
14097: PUSH
14098: LD_VAR 0 4
14102: PPUSH
14103: LD_INT 20
14105: PPUSH
14106: LD_INT 8
14108: PPUSH
14109: CALL_OW 297
14113: PUSH
14114: LD_INT 6
14116: LESS
14117: AND
14118: IFFALSE 14132
// SetTag ( i , 2 ) ;
14120: LD_VAR 0 4
14124: PPUSH
14125: LD_INT 2
14127: PPUSH
14128: CALL_OW 109
// if GetTag ( i ) = 2 then
14132: LD_VAR 0 4
14136: PPUSH
14137: CALL_OW 110
14141: PUSH
14142: LD_INT 2
14144: EQUAL
14145: IFFALSE 14253
// begin if GetLives ( i ) = 1000 then
14147: LD_VAR 0 4
14151: PPUSH
14152: CALL_OW 256
14156: PUSH
14157: LD_INT 1000
14159: EQUAL
14160: IFFALSE 14176
// SetTag ( i , 3 ) else
14162: LD_VAR 0 4
14166: PPUSH
14167: LD_INT 3
14169: PPUSH
14170: CALL_OW 109
14174: GO 14253
// if IsDrivenBy ( i ) then
14176: LD_VAR 0 4
14180: PPUSH
14181: CALL_OW 311
14185: IFFALSE 14253
// begin mech := IsDrivenBy ( i ) ;
14187: LD_ADDR_VAR 0 8
14191: PUSH
14192: LD_VAR 0 4
14196: PPUSH
14197: CALL_OW 311
14201: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
14202: LD_INT 1
14204: PPUSH
14205: LD_VAR 0 8
14209: PPUSH
14210: CALL_OW 292
14214: NOT
14215: PUSH
14216: LD_VAR 0 8
14220: PPUSH
14221: CALL_OW 256
14225: PUSH
14226: LD_INT 1000
14228: LESS
14229: AND
14230: IFFALSE 14244
// SetLives ( mech , 1000 ) ;
14232: LD_VAR 0 8
14236: PPUSH
14237: LD_INT 1000
14239: PPUSH
14240: CALL_OW 234
// ComRepairVehicleAndReturn ( mech ) ;
14244: LD_VAR 0 8
14248: PPUSH
14249: CALL 75820 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
14253: LD_VAR 0 4
14257: PPUSH
14258: CALL_OW 110
14262: PUSH
14263: LD_INT 3
14265: EQUAL
14266: PUSH
14267: LD_VAR 0 4
14271: PPUSH
14272: CALL_OW 311
14276: AND
14277: IFFALSE 14291
// SetTag ( i , 0 ) ;
14279: LD_VAR 0 4
14283: PPUSH
14284: LD_INT 0
14286: PPUSH
14287: CALL_OW 109
// end ;
14291: GO 13925
14293: POP
14294: POP
// until not attackGroup ;
14295: LD_EXP 26
14299: NOT
14300: IFFALSE 13908
// end ;
14302: LD_VAR 0 3
14306: RET
// every 0 0$1 trigger UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do var i ;
14307: LD_EXP 26
14311: PPUSH
14312: LD_INT 21
14314: PUSH
14315: LD_INT 2
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PPUSH
14322: CALL_OW 72
14326: IFFALSE 14394
14328: GO 14330
14330: DISABLE
14331: LD_INT 0
14333: PPUSH
// begin enable ;
14334: ENABLE
// for i in UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do
14335: LD_ADDR_VAR 0 1
14339: PUSH
14340: LD_EXP 26
14344: PPUSH
14345: LD_INT 21
14347: PUSH
14348: LD_INT 2
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PPUSH
14355: CALL_OW 72
14359: PUSH
14360: FOR_IN
14361: IFFALSE 14392
// if GetFuel ( i ) < 3 then
14363: LD_VAR 0 1
14367: PPUSH
14368: CALL_OW 261
14372: PUSH
14373: LD_INT 3
14375: LESS
14376: IFFALSE 14390
// SetFuel ( i , 3 ) ;
14378: LD_VAR 0 1
14382: PPUSH
14383: LD_INT 3
14385: PPUSH
14386: CALL_OW 240
14390: GO 14360
14392: POP
14393: POP
// end ; end_of_file
14394: PPOPN 1
14396: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do
14397: LD_INT 22
14399: PUSH
14400: LD_INT 3
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: PUSH
14407: LD_INT 25
14409: PUSH
14410: LD_INT 2
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PPUSH
14421: CALL_OW 69
14425: IFFALSE 14444
14427: GO 14429
14429: DISABLE
// begin enable ;
14430: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
14431: LD_INT 3
14433: PPUSH
14434: LD_INT 1
14436: PPUSH
14437: LD_INT 22
14439: PPUSH
14440: CALL 9209 0 3
// end ;
14444: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
14445: LD_INT 22
14447: PUSH
14448: LD_INT 3
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: LD_INT 25
14457: PUSH
14458: LD_INT 4
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: PPUSH
14469: CALL_OW 69
14473: IFFALSE 14495
14475: GO 14477
14477: DISABLE
// begin enable ;
14478: ENABLE
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
14479: LD_INT 3
14481: PPUSH
14482: LD_INT 20
14484: PPUSH
14485: LD_INT 22
14487: PPUSH
14488: LD_INT 23
14490: PPUSH
14491: CALL 9541 0 4
// end ;
14495: END
// every 0 0$1 trigger northBaseDefenders do
14496: LD_EXP 24
14500: IFFALSE 14524
14502: GO 14504
14504: DISABLE
// begin enable ;
14505: ENABLE
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
14506: LD_INT 22
14508: PPUSH
14509: LD_INT 1
14511: PPUSH
14512: LD_EXP 24
14516: PPUSH
14517: LD_INT 2
14519: PPUSH
14520: CALL 9813 0 4
// end ;
14524: END
// every 0 0$1 trigger southBaseDefenders do
14525: LD_EXP 25
14529: IFFALSE 14553
14531: GO 14533
14533: DISABLE
// begin enable ;
14534: ENABLE
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
14535: LD_INT 23
14537: PPUSH
14538: LD_INT 1
14540: PPUSH
14541: LD_EXP 25
14545: PPUSH
14546: LD_INT 33
14548: PPUSH
14549: CALL 9813 0 4
// end ; end_of_file
14553: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14554: LD_VAR 0 1
14558: PPUSH
14559: CALL 32363 0 1
// if unit = JMM then
14563: LD_VAR 0 1
14567: PUSH
14568: LD_EXP 1
14572: EQUAL
14573: IFFALSE 14582
// YouLost ( JMM ) ;
14575: LD_STRING JMM
14577: PPUSH
14578: CALL_OW 104
// if GetBType ( unit ) = b_depot then
14582: LD_VAR 0 1
14586: PPUSH
14587: CALL_OW 266
14591: PUSH
14592: LD_INT 0
14594: EQUAL
14595: IFFALSE 14604
// YouLost ( DepotDestroyed ) ;
14597: LD_STRING DepotDestroyed
14599: PPUSH
14600: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 255
14613: PUSH
14614: LD_INT 1
14616: EQUAL
14617: PUSH
14618: LD_VAR 0 1
14622: PPUSH
14623: CALL_OW 247
14627: PUSH
14628: LD_INT 1
14630: EQUAL
14631: AND
14632: IFFALSE 14648
// deadsCounter = deadsCounter + 1 ;
14634: LD_ADDR_EXP 31
14638: PUSH
14639: LD_EXP 31
14643: PUSH
14644: LD_INT 1
14646: PLUS
14647: ST_TO_ADDR
// end ;
14648: PPOPN 1
14650: END
// on Command ( cmd ) do var i , j , tmp ;
14651: LD_INT 0
14653: PPUSH
14654: PPUSH
14655: PPUSH
// begin SOS_Command ( cmd ) ;
14656: LD_VAR 0 1
14660: PPUSH
14661: CALL 32467 0 1
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
14665: LD_ADDR_VAR 0 2
14669: PUSH
14670: LD_INT 22
14672: PUSH
14673: LD_INT 1
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 21
14682: PUSH
14683: LD_INT 2
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PPUSH
14694: CALL_OW 69
14698: PUSH
14699: FOR_IN
14700: IFFALSE 14821
// begin if GetTaskList ( i ) then
14702: LD_VAR 0 2
14706: PPUSH
14707: CALL_OW 437
14711: IFFALSE 14819
// begin for j = 1 to GetTaskList ( i ) do
14713: LD_ADDR_VAR 0 3
14717: PUSH
14718: DOUBLE
14719: LD_INT 1
14721: DEC
14722: ST_TO_ADDR
14723: LD_VAR 0 2
14727: PPUSH
14728: CALL_OW 437
14732: PUSH
14733: FOR_TO
14734: IFFALSE 14817
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14736: LD_ADDR_VAR 0 4
14740: PUSH
14741: LD_VAR 0 2
14745: PPUSH
14746: CALL_OW 437
14750: PUSH
14751: LD_VAR 0 3
14755: ARRAY
14756: PUSH
14757: LD_INT 4
14759: ARRAY
14760: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14761: LD_VAR 0 4
14765: PPUSH
14766: CALL_OW 255
14770: PUSH
14771: LD_INT 3
14773: EQUAL
14774: PUSH
14775: LD_VAR 0 4
14779: PPUSH
14780: CALL_OW 247
14784: PUSH
14785: LD_INT 2
14787: EQUAL
14788: AND
14789: PUSH
14790: LD_VAR 0 4
14794: PPUSH
14795: CALL_OW 264
14799: PUSH
14800: LD_INT 51
14802: EQUAL
14803: AND
14804: IFFALSE 14815
// ComStop ( i ) ;
14806: LD_VAR 0 2
14810: PPUSH
14811: CALL_OW 141
// end ;
14815: GO 14733
14817: POP
14818: POP
// end ; end ;
14819: GO 14699
14821: POP
14822: POP
// end ;
14823: PPOPN 4
14825: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14826: LD_VAR 0 2
14830: PUSH
14831: LD_EXP 8
14835: EQUAL
14836: PUSH
14837: LD_EXP 21
14841: PUSH
14842: LD_INT 4
14844: NONEQUAL
14845: AND
14846: IFFALSE 14998
// begin if IsOk ( Mikhail ) then
14848: LD_EXP 8
14852: PPUSH
14853: CALL_OW 302
14857: IFFALSE 14865
// AskMikhail else
14859: CALL 7486 0 0
14863: GO 14998
// if IsOk ( llab1 ) then
14865: LD_INT 23
14867: PPUSH
14868: CALL_OW 302
14872: IFFALSE 14961
// begin InGameOn ;
14874: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14878: LD_EXP 8
14882: PPUSH
14883: LD_INT 6
14885: PPUSH
14886: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
14890: LD_INT 23
14892: PPUSH
14893: LD_INT 6
14895: PPUSH
14896: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
14900: LD_EXP 8
14904: PPUSH
14905: LD_INT 23
14907: PPUSH
14908: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14912: LD_INT 35
14914: PPUSH
14915: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
14919: LD_EXP 8
14923: PPUSH
14924: CALL_OW 310
14928: PUSH
14929: LD_INT 23
14931: EQUAL
14932: PUSH
14933: LD_EXP 8
14937: PPUSH
14938: CALL_OW 301
14942: OR
14943: IFFALSE 14912
// SetSide ( llab1 , 1 ) ;
14945: LD_INT 23
14947: PPUSH
14948: LD_INT 1
14950: PPUSH
14951: CALL_OW 235
// InGameOff ;
14955: CALL_OW 9
// end else
14959: GO 14998
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
14961: LD_INT 3
14963: PPUSH
14964: LD_INT 6
14966: PPUSH
14967: LD_INT 2
14969: PPUSH
14970: LD_INT 1
14972: PPUSH
14973: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
14977: LD_EXP 8
14981: PPUSH
14982: LD_INT 6
14984: PPUSH
14985: CALL_OW 235
// ComHold ( Mikhail ) ;
14989: LD_EXP 8
14993: PPUSH
14994: CALL_OW 140
// end ; end ; end ;
14998: PPOPN 2
15000: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15001: LD_VAR 0 1
15005: PPUSH
15006: LD_VAR 0 2
15010: PPUSH
15011: CALL 32483 0 2
// end ;
15015: PPOPN 2
15017: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
15018: LD_EXP 8
15022: PPUSH
15023: CALL_OW 257
15027: PUSH
15028: LD_INT 3
15030: NONEQUAL
15031: IFFALSE 15049
15033: GO 15035
15035: DISABLE
// begin enable ;
15036: ENABLE
// SetClass ( Mikhail , 3 ) ;
15037: LD_EXP 8
15041: PPUSH
15042: LD_INT 3
15044: PPUSH
15045: CALL_OW 336
// end ; end_of_file
15049: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
15050: LD_INT 22
15052: PUSH
15053: LD_INT 1
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: PUSH
15060: LD_INT 21
15062: PUSH
15063: LD_INT 1
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: PUSH
15070: LD_INT 25
15072: PUSH
15073: LD_INT 2
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: LIST
15084: PPUSH
15085: CALL_OW 69
15089: PUSH
15090: LD_INT 0
15092: EQUAL
15093: PUSH
15094: LD_INT 22
15096: PUSH
15097: LD_INT 4
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: LD_INT 21
15106: PUSH
15107: LD_INT 1
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: LD_INT 25
15116: PUSH
15117: LD_INT 2
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: LIST
15128: PPUSH
15129: CALL_OW 69
15133: PUSH
15134: LD_INT 0
15136: EQUAL
15137: AND
15138: PUSH
15139: LD_INT 1
15141: PPUSH
15142: CALL_OW 255
15146: PUSH
15147: LD_INT 3
15149: EQUAL
15150: AND
15151: PUSH
15152: LD_INT 10
15154: PPUSH
15155: CALL_OW 255
15159: PUSH
15160: LD_INT 3
15162: EQUAL
15163: AND
15164: IFFALSE 15176
15166: GO 15168
15168: DISABLE
// YouLost ( Engineer ) ;
15169: LD_STRING Engineer
15171: PPUSH
15172: CALL_OW 104
15176: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
15177: LD_INT 1
15179: PPUSH
15180: CALL_OW 255
15184: PUSH
15185: LD_INT 3
15187: EQUAL
15188: PUSH
15189: LD_EXP 27
15193: PUSH
15194: LD_INT 1
15196: EQUAL
15197: AND
15198: IFFALSE 15210
15200: GO 15202
15202: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
15203: LD_STRING DepotCaptured
15205: PPUSH
15206: CALL_OW 104
15210: END
// export function PrepareTigers ; var i , un ; begin
15211: LD_INT 0
15213: PPUSH
15214: PPUSH
15215: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15216: LD_ADDR_VAR 0 2
15220: PUSH
15221: DOUBLE
15222: LD_INT 1
15224: DEC
15225: ST_TO_ADDR
15226: LD_INT 2
15228: PUSH
15229: LD_INT 3
15231: PUSH
15232: LD_INT 4
15234: PUSH
15235: LD_INT 5
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: PUSH
15244: LD_OWVAR 67
15248: ARRAY
15249: PUSH
15250: FOR_TO
15251: IFFALSE 15366
// begin uc_side := 0 ;
15253: LD_ADDR_OWVAR 20
15257: PUSH
15258: LD_INT 0
15260: ST_TO_ADDR
// uc_nation := nation_nature ;
15261: LD_ADDR_OWVAR 21
15265: PUSH
15266: LD_INT 0
15268: ST_TO_ADDR
// hc_sex := sex_male ;
15269: LD_ADDR_OWVAR 27
15273: PUSH
15274: LD_INT 1
15276: ST_TO_ADDR
// hc_class := class_tiger ;
15277: LD_ADDR_OWVAR 28
15281: PUSH
15282: LD_INT 14
15284: ST_TO_ADDR
// hc_skills := [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
15285: LD_ADDR_OWVAR 31
15289: PUSH
15290: LD_EXP 14
15294: PUSH
15295: LD_INT 0
15297: PUSH
15298: LD_INT 0
15300: PUSH
15301: LD_INT 0
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: ST_TO_ADDR
// hc_agressivity := [ 30 , 40 , 45 , 50 ] [ Difficulty ] ;
15310: LD_ADDR_OWVAR 35
15314: PUSH
15315: LD_INT 30
15317: PUSH
15318: LD_INT 40
15320: PUSH
15321: LD_INT 45
15323: PUSH
15324: LD_INT 50
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: PUSH
15333: LD_OWVAR 67
15337: ARRAY
15338: ST_TO_ADDR
// un = CreateHuman ;
15339: LD_ADDR_VAR 0 3
15343: PUSH
15344: CALL_OW 44
15348: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15349: LD_VAR 0 3
15353: PPUSH
15354: LD_INT 27
15356: PPUSH
15357: LD_INT 0
15359: PPUSH
15360: CALL_OW 49
// end ;
15364: GO 15250
15366: POP
15367: POP
// end ; end_of_file
15368: LD_VAR 0 1
15372: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
15373: LD_INT 1
15375: PPUSH
15376: CALL_OW 255
15380: PUSH
15381: LD_INT 1
15383: EQUAL
15384: PUSH
15385: LD_INT 10
15387: PPUSH
15388: CALL_OW 255
15392: PUSH
15393: LD_INT 1
15395: EQUAL
15396: AND
15397: PUSH
15398: LD_EXP 20
15402: PUSH
15403: LD_INT 1
15405: EQUAL
15406: AND
15407: PUSH
15408: LD_INT 22
15410: PUSH
15411: LD_INT 3
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: LD_INT 21
15420: PUSH
15421: LD_INT 2
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: LD_INT 34
15430: PUSH
15431: LD_INT 51
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: PUSH
15438: LD_INT 3
15440: PUSH
15441: LD_INT 58
15443: PUSH
15444: EMPTY
15445: LIST
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: PPUSH
15457: CALL_OW 69
15461: PUSH
15462: LD_INT 0
15464: EQUAL
15465: AND
15466: IFFALSE 15557
15468: GO 15470
15470: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ) ;
15471: LD_INT 9450
15473: PUSH
15474: LD_INT 8400
15476: PUSH
15477: LD_INT 6300
15479: PUSH
15480: LD_INT 6300
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: PUSH
15489: LD_OWVAR 67
15493: ARRAY
15494: PPUSH
15495: CALL_OW 67
// if cargoEscape then
15499: LD_EXP 20
15503: IFFALSE 15557
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15505: LD_EXP 9
15509: PPUSH
15510: LD_STRING D6-Pow-1
15512: PPUSH
15513: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
15517: LD_EXP 1
15521: PPUSH
15522: LD_STRING D6-JMM-1
15524: PPUSH
15525: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
15529: LD_EXP 9
15533: PPUSH
15534: LD_STRING D6-Pow-2
15536: PPUSH
15537: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
15541: LD_EXP 1
15545: PPUSH
15546: LD_STRING D6-JMM-2
15548: PPUSH
15549: CALL_OW 88
// FinishMission ;
15553: CALL 15773 0 0
// end ; end ;
15557: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
15558: LD_INT 1
15560: PPUSH
15561: CALL_OW 255
15565: PUSH
15566: LD_INT 1
15568: EQUAL
15569: PUSH
15570: LD_INT 10
15572: PPUSH
15573: CALL_OW 255
15577: PUSH
15578: LD_INT 1
15580: EQUAL
15581: AND
15582: PUSH
15583: LD_EXP 20
15587: PUSH
15588: LD_INT 1
15590: GREATER
15591: AND
15592: IFFALSE 15667
15594: GO 15596
15596: DISABLE
15597: LD_INT 0
15599: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
15600: LD_INT 11550
15602: PUSH
15603: LD_INT 10500
15605: PUSH
15606: LD_INT 9450
15608: PUSH
15609: LD_INT 8400
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: PUSH
15618: LD_OWVAR 67
15622: ARRAY
15623: PPUSH
15624: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 , 4 ] [ Difficulty ] , RussianAttack ) ;
15628: LD_INT 1
15630: PUSH
15631: LD_INT 2
15633: PUSH
15634: LD_INT 3
15636: PUSH
15637: LD_INT 4
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: PUSH
15646: LD_OWVAR 67
15650: ARRAY
15651: PPUSH
15652: LD_INT 13
15654: PPUSH
15655: CALL 13342 0 2
// lastBattle = 1 ;
15659: LD_ADDR_EXP 27
15663: PUSH
15664: LD_INT 1
15666: ST_TO_ADDR
// end ;
15667: PPOPN 1
15669: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
15670: LD_EXP 27
15674: PUSH
15675: LD_INT 1
15677: EQUAL
15678: PUSH
15679: LD_INT 26
15681: PPUSH
15682: LD_INT 22
15684: PUSH
15685: LD_INT 3
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PUSH
15692: LD_INT 21
15694: PUSH
15695: LD_INT 1
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PPUSH
15706: CALL_OW 70
15710: PUSH
15711: LD_INT 0
15713: EQUAL
15714: AND
15715: IFFALSE 15772
15717: GO 15719
15719: DISABLE
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15720: LD_EXP 9
15724: PPUSH
15725: LD_STRING D6-Pow-1
15727: PPUSH
15728: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
15732: LD_EXP 1
15736: PPUSH
15737: LD_STRING D6-JMM-1
15739: PPUSH
15740: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
15744: LD_EXP 9
15748: PPUSH
15749: LD_STRING D6-Pow-2
15751: PPUSH
15752: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
15756: LD_EXP 1
15760: PPUSH
15761: LD_STRING D6-JMM-2
15763: PPUSH
15764: CALL_OW 88
// FinishMission ;
15768: CALL 15773 0 0
// end ;
15772: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
15773: LD_INT 0
15775: PPUSH
15776: PPUSH
15777: PPUSH
15778: PPUSH
15779: PPUSH
// if tick <= 18 18$00 then
15780: LD_OWVAR 1
15784: PUSH
15785: LD_INT 37800
15787: LESSEQUAL
15788: IFFALSE 15797
// SetAchievement ( ACH_ASPEED_2 ) ;
15790: LD_STRING ACH_ASPEED_2
15792: PPUSH
15793: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15797: LD_ADDR_VAR 0 2
15801: PUSH
15802: LD_INT 22
15804: PUSH
15805: LD_INT 1
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: PUSH
15812: LD_INT 21
15814: PUSH
15815: LD_INT 2
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: LD_INT 24
15824: PUSH
15825: LD_INT 251
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: LIST
15836: PPUSH
15837: CALL_OW 69
15841: ST_TO_ADDR
// if tmp then
15842: LD_VAR 0 2
15846: IFFALSE 15860
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15848: LD_VAR 0 2
15852: PPUSH
15853: LD_STRING 02_tanks_1
15855: PPUSH
15856: CALL 10688 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
15860: LD_EXP 21
15864: PUSH
15865: LD_INT 1
15867: EQUAL
15868: PUSH
15869: LD_EXP 8
15873: PPUSH
15874: CALL_OW 300
15878: AND
15879: IFFALSE 15893
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15881: LD_EXP 21
15885: PPUSH
15886: LD_STRING 02_mikhailStatus_1
15888: PPUSH
15889: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15893: LD_INT 1
15895: PPUSH
15896: CALL_OW 274
15900: PPUSH
15901: LD_INT 1
15903: PPUSH
15904: CALL_OW 275
15908: PPUSH
15909: LD_STRING 02_resources_4
15911: PPUSH
15912: CALL_OW 39
// m1 := false ;
15916: LD_ADDR_VAR 0 3
15920: PUSH
15921: LD_INT 0
15923: ST_TO_ADDR
// m2 := false ;
15924: LD_ADDR_VAR 0 4
15928: PUSH
15929: LD_INT 0
15931: ST_TO_ADDR
// m3 := false ;
15932: LD_ADDR_VAR 0 5
15936: PUSH
15937: LD_INT 0
15939: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15940: LD_INT 1
15942: PPUSH
15943: CALL_OW 274
15947: PPUSH
15948: LD_INT 1
15950: PPUSH
15951: CALL_OW 275
15955: PUSH
15956: LD_INT 200
15958: GREATEREQUAL
15959: IFFALSE 15981
// begin AddMedal ( Cans , 1 ) ;
15961: LD_STRING Cans
15963: PPUSH
15964: LD_INT 1
15966: PPUSH
15967: CALL_OW 101
// m1 := true ;
15971: LD_ADDR_VAR 0 3
15975: PUSH
15976: LD_INT 1
15978: ST_TO_ADDR
// end else
15979: GO 15992
// begin AddMedal ( Cans , - 1 ) ;
15981: LD_STRING Cans
15983: PPUSH
15984: LD_INT 1
15986: NEG
15987: PPUSH
15988: CALL_OW 101
// end ; if deadsCounter < 2 then
15992: LD_EXP 31
15996: PUSH
15997: LD_INT 2
15999: LESS
16000: IFFALSE 16022
// begin AddMedal ( Deaths , 1 ) ;
16002: LD_STRING Deaths
16004: PPUSH
16005: LD_INT 1
16007: PPUSH
16008: CALL_OW 101
// m2 := true ;
16012: LD_ADDR_VAR 0 4
16016: PUSH
16017: LD_INT 1
16019: ST_TO_ADDR
// end else
16020: GO 16033
// begin AddMedal ( Deaths , - 1 ) ;
16022: LD_STRING Deaths
16024: PPUSH
16025: LD_INT 1
16027: NEG
16028: PPUSH
16029: CALL_OW 101
// end ; if mikhailStatus = 0 then
16033: LD_EXP 21
16037: PUSH
16038: LD_INT 0
16040: EQUAL
16041: IFFALSE 16054
// AddMedal ( Prisoner , - 1 ) ;
16043: LD_STRING Prisoner
16045: PPUSH
16046: LD_INT 1
16048: NEG
16049: PPUSH
16050: CALL_OW 101
// if mikhailStatus = 1 then
16054: LD_EXP 21
16058: PUSH
16059: LD_INT 1
16061: EQUAL
16062: IFFALSE 16082
// begin AddMedal ( Prisoner , 1 ) ;
16064: LD_STRING Prisoner
16066: PPUSH
16067: LD_INT 1
16069: PPUSH
16070: CALL_OW 101
// m3 := true ;
16074: LD_ADDR_VAR 0 5
16078: PUSH
16079: LD_INT 1
16081: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
16082: LD_EXP 21
16086: PUSH
16087: LD_INT 2
16089: EQUAL
16090: IFFALSE 16110
// begin AddMedal ( Prisoner , 2 ) ;
16092: LD_STRING Prisoner
16094: PPUSH
16095: LD_INT 2
16097: PPUSH
16098: CALL_OW 101
// m3 := true ;
16102: LD_ADDR_VAR 0 5
16106: PUSH
16107: LD_INT 1
16109: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
16110: LD_EXP 21
16114: PUSH
16115: LD_INT 3
16117: EQUAL
16118: IFFALSE 16131
// AddMedal ( Prisoner , - 2 ) ;
16120: LD_STRING Prisoner
16122: PPUSH
16123: LD_INT 2
16125: NEG
16126: PPUSH
16127: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
16131: LD_OWVAR 67
16135: PUSH
16136: LD_INT 3
16138: GREATEREQUAL
16139: PUSH
16140: LD_VAR 0 3
16144: AND
16145: PUSH
16146: LD_VAR 0 4
16150: AND
16151: PUSH
16152: LD_VAR 0 5
16156: AND
16157: IFFALSE 16169
// SetAchievementEX ( ACH_AMER , 2 ) ;
16159: LD_STRING ACH_AMER
16161: PPUSH
16162: LD_INT 2
16164: PPUSH
16165: CALL_OW 564
// GiveMedals ( MAIN ) ;
16169: LD_STRING MAIN
16171: PPUSH
16172: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
16176: LD_INT 22
16178: PUSH
16179: LD_INT 1
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: PUSH
16186: LD_INT 23
16188: PUSH
16189: LD_INT 1
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: LD_INT 21
16198: PUSH
16199: LD_INT 1
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: LIST
16210: PPUSH
16211: CALL_OW 69
16215: PPUSH
16216: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
16220: LD_EXP 1
16224: PPUSH
16225: LD_EXP 33
16229: PUSH
16230: LD_STRING JMM
16232: STR
16233: PPUSH
16234: CALL_OW 38
// if IsOK ( Bobby ) then
16238: LD_EXP 2
16242: PPUSH
16243: CALL_OW 302
16247: IFFALSE 16267
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
16249: LD_EXP 2
16253: PPUSH
16254: LD_EXP 33
16258: PUSH
16259: LD_STRING Bobby
16261: STR
16262: PPUSH
16263: CALL_OW 38
// if IsOK ( Cyrus ) then
16267: LD_EXP 3
16271: PPUSH
16272: CALL_OW 302
16276: IFFALSE 16296
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
16278: LD_EXP 3
16282: PPUSH
16283: LD_EXP 33
16287: PUSH
16288: LD_STRING Cyrus
16290: STR
16291: PPUSH
16292: CALL_OW 38
// if IsOK ( Lisa ) then
16296: LD_EXP 4
16300: PPUSH
16301: CALL_OW 302
16305: IFFALSE 16325
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
16307: LD_EXP 4
16311: PPUSH
16312: LD_EXP 33
16316: PUSH
16317: LD_STRING Lisa
16319: STR
16320: PPUSH
16321: CALL_OW 38
// if IsOK ( Khatam ) then
16325: LD_EXP 5
16329: PPUSH
16330: CALL_OW 302
16334: IFFALSE 16354
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
16336: LD_EXP 5
16340: PPUSH
16341: LD_EXP 33
16345: PUSH
16346: LD_STRING Khatam
16348: STR
16349: PPUSH
16350: CALL_OW 38
// if IsOK ( Brian ) then
16354: LD_EXP 6
16358: PPUSH
16359: CALL_OW 302
16363: IFFALSE 16383
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
16365: LD_EXP 6
16369: PPUSH
16370: LD_EXP 33
16374: PUSH
16375: LD_STRING Brian
16377: STR
16378: PPUSH
16379: CALL_OW 38
// if IsOk ( Jerry ) then
16383: LD_EXP 7
16387: PPUSH
16388: CALL_OW 302
16392: IFFALSE 16412
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
16394: LD_EXP 7
16398: PPUSH
16399: LD_EXP 33
16403: PUSH
16404: LD_STRING Jerry
16406: STR
16407: PPUSH
16408: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
16412: LD_EXP 21
16416: PUSH
16417: LD_INT 1
16419: EQUAL
16420: PUSH
16421: LD_EXP 8
16425: PPUSH
16426: CALL_OW 255
16430: PUSH
16431: LD_INT 1
16433: EQUAL
16434: AND
16435: PUSH
16436: LD_EXP 8
16440: PPUSH
16441: CALL_OW 302
16445: AND
16446: IFFALSE 16466
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
16448: LD_EXP 8
16452: PPUSH
16453: LD_EXP 33
16457: PUSH
16458: LD_STRING Mikhail
16460: STR
16461: PPUSH
16462: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
16466: LD_INT 50
16468: PUSH
16469: EMPTY
16470: LIST
16471: PUSH
16472: LD_INT 22
16474: PUSH
16475: LD_INT 1
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 21
16484: PUSH
16485: LD_INT 1
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: LIST
16496: PPUSH
16497: CALL_OW 69
16501: PUSH
16502: LD_EXP 1
16506: PUSH
16507: LD_EXP 2
16511: PUSH
16512: LD_EXP 3
16516: PUSH
16517: LD_EXP 4
16521: PUSH
16522: LD_EXP 5
16526: PUSH
16527: LD_EXP 6
16531: PUSH
16532: LD_EXP 7
16536: PUSH
16537: LD_EXP 8
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: DIFF
16552: PPUSH
16553: LD_STRING 02_other_survivors
16555: PPUSH
16556: CALL_OW 38
// YouWin ;
16560: CALL_OW 103
// end ; end_of_file end_of_file
16564: LD_VAR 0 1
16568: RET
// export globalGameSaveCounter ; every 0 0$1 do
16569: GO 16571
16571: DISABLE
// begin enable ;
16572: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
16573: LD_STRING updateTimer(
16575: PUSH
16576: LD_OWVAR 1
16580: STR
16581: PUSH
16582: LD_STRING );
16584: STR
16585: PPUSH
16586: CALL_OW 559
// end ;
16590: END
// every 0 0$1 do
16591: GO 16593
16593: DISABLE
// begin globalGameSaveCounter := 0 ;
16594: LD_ADDR_EXP 36
16598: PUSH
16599: LD_INT 0
16601: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
16602: LD_STRING setGameSaveCounter(0)
16604: PPUSH
16605: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
16609: LD_STRING initStreamRollete();
16611: PPUSH
16612: CALL_OW 559
// InitStreamMode ;
16616: CALL 17942 0 0
// DefineStreamItems ( false ) ;
16620: LD_INT 0
16622: PPUSH
16623: CALL 18406 0 1
// end ;
16627: END
// export function SOS_MapStart ( ) ; begin
16628: LD_INT 0
16630: PPUSH
// if streamModeActive then
16631: LD_EXP 37
16635: IFFALSE 16644
// DefineStreamItems ( true ) ;
16637: LD_INT 1
16639: PPUSH
16640: CALL 18406 0 1
// UpdateLuaVariables ( ) ;
16644: CALL 16661 0 0
// UpdateFactoryWaypoints ( ) ;
16648: CALL 31267 0 0
// UpdateWarehouseGatheringPoints ( ) ;
16652: CALL 31524 0 0
// end ;
16656: LD_VAR 0 1
16660: RET
// function UpdateLuaVariables ( ) ; begin
16661: LD_INT 0
16663: PPUSH
// if globalGameSaveCounter then
16664: LD_EXP 36
16668: IFFALSE 16702
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
16670: LD_ADDR_EXP 36
16674: PUSH
16675: LD_EXP 36
16679: PPUSH
16680: CALL 75481 0 1
16684: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
16685: LD_STRING setGameSaveCounter(
16687: PUSH
16688: LD_EXP 36
16692: STR
16693: PUSH
16694: LD_STRING )
16696: STR
16697: PPUSH
16698: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
16702: LD_STRING setGameDifficulty(
16704: PUSH
16705: LD_OWVAR 67
16709: STR
16710: PUSH
16711: LD_STRING )
16713: STR
16714: PPUSH
16715: CALL_OW 559
// end ;
16719: LD_VAR 0 1
16723: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16724: LD_INT 0
16726: PPUSH
// if p2 = stream_mode then
16727: LD_VAR 0 2
16731: PUSH
16732: LD_INT 100
16734: EQUAL
16735: IFFALSE 17738
// begin if not StreamModeActive then
16737: LD_EXP 37
16741: NOT
16742: IFFALSE 16752
// StreamModeActive := true ;
16744: LD_ADDR_EXP 37
16748: PUSH
16749: LD_INT 1
16751: ST_TO_ADDR
// if p3 = 0 then
16752: LD_VAR 0 3
16756: PUSH
16757: LD_INT 0
16759: EQUAL
16760: IFFALSE 16766
// InitStreamMode ;
16762: CALL 17942 0 0
// if p3 = 1 then
16766: LD_VAR 0 3
16770: PUSH
16771: LD_INT 1
16773: EQUAL
16774: IFFALSE 16784
// sRocket := true ;
16776: LD_ADDR_EXP 42
16780: PUSH
16781: LD_INT 1
16783: ST_TO_ADDR
// if p3 = 2 then
16784: LD_VAR 0 3
16788: PUSH
16789: LD_INT 2
16791: EQUAL
16792: IFFALSE 16802
// sSpeed := true ;
16794: LD_ADDR_EXP 41
16798: PUSH
16799: LD_INT 1
16801: ST_TO_ADDR
// if p3 = 3 then
16802: LD_VAR 0 3
16806: PUSH
16807: LD_INT 3
16809: EQUAL
16810: IFFALSE 16820
// sEngine := true ;
16812: LD_ADDR_EXP 43
16816: PUSH
16817: LD_INT 1
16819: ST_TO_ADDR
// if p3 = 4 then
16820: LD_VAR 0 3
16824: PUSH
16825: LD_INT 4
16827: EQUAL
16828: IFFALSE 16838
// sSpec := true ;
16830: LD_ADDR_EXP 40
16834: PUSH
16835: LD_INT 1
16837: ST_TO_ADDR
// if p3 = 5 then
16838: LD_VAR 0 3
16842: PUSH
16843: LD_INT 5
16845: EQUAL
16846: IFFALSE 16856
// sLevel := true ;
16848: LD_ADDR_EXP 44
16852: PUSH
16853: LD_INT 1
16855: ST_TO_ADDR
// if p3 = 6 then
16856: LD_VAR 0 3
16860: PUSH
16861: LD_INT 6
16863: EQUAL
16864: IFFALSE 16874
// sArmoury := true ;
16866: LD_ADDR_EXP 45
16870: PUSH
16871: LD_INT 1
16873: ST_TO_ADDR
// if p3 = 7 then
16874: LD_VAR 0 3
16878: PUSH
16879: LD_INT 7
16881: EQUAL
16882: IFFALSE 16892
// sRadar := true ;
16884: LD_ADDR_EXP 46
16888: PUSH
16889: LD_INT 1
16891: ST_TO_ADDR
// if p3 = 8 then
16892: LD_VAR 0 3
16896: PUSH
16897: LD_INT 8
16899: EQUAL
16900: IFFALSE 16910
// sBunker := true ;
16902: LD_ADDR_EXP 47
16906: PUSH
16907: LD_INT 1
16909: ST_TO_ADDR
// if p3 = 9 then
16910: LD_VAR 0 3
16914: PUSH
16915: LD_INT 9
16917: EQUAL
16918: IFFALSE 16928
// sHack := true ;
16920: LD_ADDR_EXP 48
16924: PUSH
16925: LD_INT 1
16927: ST_TO_ADDR
// if p3 = 10 then
16928: LD_VAR 0 3
16932: PUSH
16933: LD_INT 10
16935: EQUAL
16936: IFFALSE 16946
// sFire := true ;
16938: LD_ADDR_EXP 49
16942: PUSH
16943: LD_INT 1
16945: ST_TO_ADDR
// if p3 = 11 then
16946: LD_VAR 0 3
16950: PUSH
16951: LD_INT 11
16953: EQUAL
16954: IFFALSE 16964
// sRefresh := true ;
16956: LD_ADDR_EXP 50
16960: PUSH
16961: LD_INT 1
16963: ST_TO_ADDR
// if p3 = 12 then
16964: LD_VAR 0 3
16968: PUSH
16969: LD_INT 12
16971: EQUAL
16972: IFFALSE 16982
// sExp := true ;
16974: LD_ADDR_EXP 51
16978: PUSH
16979: LD_INT 1
16981: ST_TO_ADDR
// if p3 = 13 then
16982: LD_VAR 0 3
16986: PUSH
16987: LD_INT 13
16989: EQUAL
16990: IFFALSE 17000
// sDepot := true ;
16992: LD_ADDR_EXP 52
16996: PUSH
16997: LD_INT 1
16999: ST_TO_ADDR
// if p3 = 14 then
17000: LD_VAR 0 3
17004: PUSH
17005: LD_INT 14
17007: EQUAL
17008: IFFALSE 17018
// sFlag := true ;
17010: LD_ADDR_EXP 53
17014: PUSH
17015: LD_INT 1
17017: ST_TO_ADDR
// if p3 = 15 then
17018: LD_VAR 0 3
17022: PUSH
17023: LD_INT 15
17025: EQUAL
17026: IFFALSE 17036
// sKamikadze := true ;
17028: LD_ADDR_EXP 61
17032: PUSH
17033: LD_INT 1
17035: ST_TO_ADDR
// if p3 = 16 then
17036: LD_VAR 0 3
17040: PUSH
17041: LD_INT 16
17043: EQUAL
17044: IFFALSE 17054
// sTroll := true ;
17046: LD_ADDR_EXP 62
17050: PUSH
17051: LD_INT 1
17053: ST_TO_ADDR
// if p3 = 17 then
17054: LD_VAR 0 3
17058: PUSH
17059: LD_INT 17
17061: EQUAL
17062: IFFALSE 17072
// sSlow := true ;
17064: LD_ADDR_EXP 63
17068: PUSH
17069: LD_INT 1
17071: ST_TO_ADDR
// if p3 = 18 then
17072: LD_VAR 0 3
17076: PUSH
17077: LD_INT 18
17079: EQUAL
17080: IFFALSE 17090
// sLack := true ;
17082: LD_ADDR_EXP 64
17086: PUSH
17087: LD_INT 1
17089: ST_TO_ADDR
// if p3 = 19 then
17090: LD_VAR 0 3
17094: PUSH
17095: LD_INT 19
17097: EQUAL
17098: IFFALSE 17108
// sTank := true ;
17100: LD_ADDR_EXP 66
17104: PUSH
17105: LD_INT 1
17107: ST_TO_ADDR
// if p3 = 20 then
17108: LD_VAR 0 3
17112: PUSH
17113: LD_INT 20
17115: EQUAL
17116: IFFALSE 17126
// sRemote := true ;
17118: LD_ADDR_EXP 67
17122: PUSH
17123: LD_INT 1
17125: ST_TO_ADDR
// if p3 = 21 then
17126: LD_VAR 0 3
17130: PUSH
17131: LD_INT 21
17133: EQUAL
17134: IFFALSE 17144
// sPowell := true ;
17136: LD_ADDR_EXP 68
17140: PUSH
17141: LD_INT 1
17143: ST_TO_ADDR
// if p3 = 22 then
17144: LD_VAR 0 3
17148: PUSH
17149: LD_INT 22
17151: EQUAL
17152: IFFALSE 17162
// sTeleport := true ;
17154: LD_ADDR_EXP 71
17158: PUSH
17159: LD_INT 1
17161: ST_TO_ADDR
// if p3 = 23 then
17162: LD_VAR 0 3
17166: PUSH
17167: LD_INT 23
17169: EQUAL
17170: IFFALSE 17180
// sOilTower := true ;
17172: LD_ADDR_EXP 73
17176: PUSH
17177: LD_INT 1
17179: ST_TO_ADDR
// if p3 = 24 then
17180: LD_VAR 0 3
17184: PUSH
17185: LD_INT 24
17187: EQUAL
17188: IFFALSE 17198
// sShovel := true ;
17190: LD_ADDR_EXP 74
17194: PUSH
17195: LD_INT 1
17197: ST_TO_ADDR
// if p3 = 25 then
17198: LD_VAR 0 3
17202: PUSH
17203: LD_INT 25
17205: EQUAL
17206: IFFALSE 17216
// sSheik := true ;
17208: LD_ADDR_EXP 75
17212: PUSH
17213: LD_INT 1
17215: ST_TO_ADDR
// if p3 = 26 then
17216: LD_VAR 0 3
17220: PUSH
17221: LD_INT 26
17223: EQUAL
17224: IFFALSE 17234
// sEarthquake := true ;
17226: LD_ADDR_EXP 77
17230: PUSH
17231: LD_INT 1
17233: ST_TO_ADDR
// if p3 = 27 then
17234: LD_VAR 0 3
17238: PUSH
17239: LD_INT 27
17241: EQUAL
17242: IFFALSE 17252
// sAI := true ;
17244: LD_ADDR_EXP 78
17248: PUSH
17249: LD_INT 1
17251: ST_TO_ADDR
// if p3 = 28 then
17252: LD_VAR 0 3
17256: PUSH
17257: LD_INT 28
17259: EQUAL
17260: IFFALSE 17270
// sCargo := true ;
17262: LD_ADDR_EXP 81
17266: PUSH
17267: LD_INT 1
17269: ST_TO_ADDR
// if p3 = 29 then
17270: LD_VAR 0 3
17274: PUSH
17275: LD_INT 29
17277: EQUAL
17278: IFFALSE 17288
// sDLaser := true ;
17280: LD_ADDR_EXP 82
17284: PUSH
17285: LD_INT 1
17287: ST_TO_ADDR
// if p3 = 30 then
17288: LD_VAR 0 3
17292: PUSH
17293: LD_INT 30
17295: EQUAL
17296: IFFALSE 17306
// sExchange := true ;
17298: LD_ADDR_EXP 83
17302: PUSH
17303: LD_INT 1
17305: ST_TO_ADDR
// if p3 = 31 then
17306: LD_VAR 0 3
17310: PUSH
17311: LD_INT 31
17313: EQUAL
17314: IFFALSE 17324
// sFac := true ;
17316: LD_ADDR_EXP 84
17320: PUSH
17321: LD_INT 1
17323: ST_TO_ADDR
// if p3 = 32 then
17324: LD_VAR 0 3
17328: PUSH
17329: LD_INT 32
17331: EQUAL
17332: IFFALSE 17342
// sPower := true ;
17334: LD_ADDR_EXP 85
17338: PUSH
17339: LD_INT 1
17341: ST_TO_ADDR
// if p3 = 33 then
17342: LD_VAR 0 3
17346: PUSH
17347: LD_INT 33
17349: EQUAL
17350: IFFALSE 17360
// sRandom := true ;
17352: LD_ADDR_EXP 86
17356: PUSH
17357: LD_INT 1
17359: ST_TO_ADDR
// if p3 = 34 then
17360: LD_VAR 0 3
17364: PUSH
17365: LD_INT 34
17367: EQUAL
17368: IFFALSE 17378
// sShield := true ;
17370: LD_ADDR_EXP 87
17374: PUSH
17375: LD_INT 1
17377: ST_TO_ADDR
// if p3 = 35 then
17378: LD_VAR 0 3
17382: PUSH
17383: LD_INT 35
17385: EQUAL
17386: IFFALSE 17396
// sTime := true ;
17388: LD_ADDR_EXP 88
17392: PUSH
17393: LD_INT 1
17395: ST_TO_ADDR
// if p3 = 36 then
17396: LD_VAR 0 3
17400: PUSH
17401: LD_INT 36
17403: EQUAL
17404: IFFALSE 17414
// sTools := true ;
17406: LD_ADDR_EXP 89
17410: PUSH
17411: LD_INT 1
17413: ST_TO_ADDR
// if p3 = 101 then
17414: LD_VAR 0 3
17418: PUSH
17419: LD_INT 101
17421: EQUAL
17422: IFFALSE 17432
// sSold := true ;
17424: LD_ADDR_EXP 54
17428: PUSH
17429: LD_INT 1
17431: ST_TO_ADDR
// if p3 = 102 then
17432: LD_VAR 0 3
17436: PUSH
17437: LD_INT 102
17439: EQUAL
17440: IFFALSE 17450
// sDiff := true ;
17442: LD_ADDR_EXP 55
17446: PUSH
17447: LD_INT 1
17449: ST_TO_ADDR
// if p3 = 103 then
17450: LD_VAR 0 3
17454: PUSH
17455: LD_INT 103
17457: EQUAL
17458: IFFALSE 17468
// sFog := true ;
17460: LD_ADDR_EXP 58
17464: PUSH
17465: LD_INT 1
17467: ST_TO_ADDR
// if p3 = 104 then
17468: LD_VAR 0 3
17472: PUSH
17473: LD_INT 104
17475: EQUAL
17476: IFFALSE 17486
// sReset := true ;
17478: LD_ADDR_EXP 59
17482: PUSH
17483: LD_INT 1
17485: ST_TO_ADDR
// if p3 = 105 then
17486: LD_VAR 0 3
17490: PUSH
17491: LD_INT 105
17493: EQUAL
17494: IFFALSE 17504
// sSun := true ;
17496: LD_ADDR_EXP 60
17500: PUSH
17501: LD_INT 1
17503: ST_TO_ADDR
// if p3 = 106 then
17504: LD_VAR 0 3
17508: PUSH
17509: LD_INT 106
17511: EQUAL
17512: IFFALSE 17522
// sTiger := true ;
17514: LD_ADDR_EXP 56
17518: PUSH
17519: LD_INT 1
17521: ST_TO_ADDR
// if p3 = 107 then
17522: LD_VAR 0 3
17526: PUSH
17527: LD_INT 107
17529: EQUAL
17530: IFFALSE 17540
// sBomb := true ;
17532: LD_ADDR_EXP 57
17536: PUSH
17537: LD_INT 1
17539: ST_TO_ADDR
// if p3 = 108 then
17540: LD_VAR 0 3
17544: PUSH
17545: LD_INT 108
17547: EQUAL
17548: IFFALSE 17558
// sWound := true ;
17550: LD_ADDR_EXP 65
17554: PUSH
17555: LD_INT 1
17557: ST_TO_ADDR
// if p3 = 109 then
17558: LD_VAR 0 3
17562: PUSH
17563: LD_INT 109
17565: EQUAL
17566: IFFALSE 17576
// sBetray := true ;
17568: LD_ADDR_EXP 69
17572: PUSH
17573: LD_INT 1
17575: ST_TO_ADDR
// if p3 = 110 then
17576: LD_VAR 0 3
17580: PUSH
17581: LD_INT 110
17583: EQUAL
17584: IFFALSE 17594
// sContamin := true ;
17586: LD_ADDR_EXP 70
17590: PUSH
17591: LD_INT 1
17593: ST_TO_ADDR
// if p3 = 111 then
17594: LD_VAR 0 3
17598: PUSH
17599: LD_INT 111
17601: EQUAL
17602: IFFALSE 17612
// sOil := true ;
17604: LD_ADDR_EXP 72
17608: PUSH
17609: LD_INT 1
17611: ST_TO_ADDR
// if p3 = 112 then
17612: LD_VAR 0 3
17616: PUSH
17617: LD_INT 112
17619: EQUAL
17620: IFFALSE 17630
// sStu := true ;
17622: LD_ADDR_EXP 76
17626: PUSH
17627: LD_INT 1
17629: ST_TO_ADDR
// if p3 = 113 then
17630: LD_VAR 0 3
17634: PUSH
17635: LD_INT 113
17637: EQUAL
17638: IFFALSE 17648
// sBazooka := true ;
17640: LD_ADDR_EXP 79
17644: PUSH
17645: LD_INT 1
17647: ST_TO_ADDR
// if p3 = 114 then
17648: LD_VAR 0 3
17652: PUSH
17653: LD_INT 114
17655: EQUAL
17656: IFFALSE 17666
// sMortar := true ;
17658: LD_ADDR_EXP 80
17662: PUSH
17663: LD_INT 1
17665: ST_TO_ADDR
// if p3 = 115 then
17666: LD_VAR 0 3
17670: PUSH
17671: LD_INT 115
17673: EQUAL
17674: IFFALSE 17684
// sRanger := true ;
17676: LD_ADDR_EXP 90
17680: PUSH
17681: LD_INT 1
17683: ST_TO_ADDR
// if p3 = 116 then
17684: LD_VAR 0 3
17688: PUSH
17689: LD_INT 116
17691: EQUAL
17692: IFFALSE 17702
// sComputer := true ;
17694: LD_ADDR_EXP 91
17698: PUSH
17699: LD_INT 1
17701: ST_TO_ADDR
// if p3 = 117 then
17702: LD_VAR 0 3
17706: PUSH
17707: LD_INT 117
17709: EQUAL
17710: IFFALSE 17720
// s30 := true ;
17712: LD_ADDR_EXP 92
17716: PUSH
17717: LD_INT 1
17719: ST_TO_ADDR
// if p3 = 118 then
17720: LD_VAR 0 3
17724: PUSH
17725: LD_INT 118
17727: EQUAL
17728: IFFALSE 17738
// s60 := true ;
17730: LD_ADDR_EXP 93
17734: PUSH
17735: LD_INT 1
17737: ST_TO_ADDR
// end ; if p2 = hack_mode then
17738: LD_VAR 0 2
17742: PUSH
17743: LD_INT 101
17745: EQUAL
17746: IFFALSE 17874
// begin case p3 of 1 :
17748: LD_VAR 0 3
17752: PUSH
17753: LD_INT 1
17755: DOUBLE
17756: EQUAL
17757: IFTRUE 17761
17759: GO 17768
17761: POP
// hHackUnlimitedResources ; 2 :
17762: CALL 30013 0 0
17766: GO 17874
17768: LD_INT 2
17770: DOUBLE
17771: EQUAL
17772: IFTRUE 17776
17774: GO 17783
17776: POP
// hHackSetLevel10 ; 3 :
17777: CALL 30146 0 0
17781: GO 17874
17783: LD_INT 3
17785: DOUBLE
17786: EQUAL
17787: IFTRUE 17791
17789: GO 17798
17791: POP
// hHackSetLevel10YourUnits ; 4 :
17792: CALL 30231 0 0
17796: GO 17874
17798: LD_INT 4
17800: DOUBLE
17801: EQUAL
17802: IFTRUE 17806
17804: GO 17813
17806: POP
// hHackInvincible ; 5 :
17807: CALL 30679 0 0
17811: GO 17874
17813: LD_INT 5
17815: DOUBLE
17816: EQUAL
17817: IFTRUE 17821
17819: GO 17828
17821: POP
// hHackInvisible ; 6 :
17822: CALL 30790 0 0
17826: GO 17874
17828: LD_INT 6
17830: DOUBLE
17831: EQUAL
17832: IFTRUE 17836
17834: GO 17843
17836: POP
// hHackChangeYourSide ; 7 :
17837: CALL 30847 0 0
17841: GO 17874
17843: LD_INT 7
17845: DOUBLE
17846: EQUAL
17847: IFTRUE 17851
17849: GO 17858
17851: POP
// hHackChangeUnitSide ; 8 :
17852: CALL 30889 0 0
17856: GO 17874
17858: LD_INT 8
17860: DOUBLE
17861: EQUAL
17862: IFTRUE 17866
17864: GO 17873
17866: POP
// hHackFog ; end ;
17867: CALL 30990 0 0
17871: GO 17874
17873: POP
// end ; if p2 = game_save_mode then
17874: LD_VAR 0 2
17878: PUSH
17879: LD_INT 102
17881: EQUAL
17882: IFFALSE 17937
// begin if p3 = 1 then
17884: LD_VAR 0 3
17888: PUSH
17889: LD_INT 1
17891: EQUAL
17892: IFFALSE 17904
// globalGameSaveCounter := p4 ;
17894: LD_ADDR_EXP 36
17898: PUSH
17899: LD_VAR 0 4
17903: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
17904: LD_VAR 0 3
17908: PUSH
17909: LD_INT 2
17911: EQUAL
17912: PUSH
17913: LD_EXP 36
17917: AND
17918: IFFALSE 17937
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17920: LD_STRING setGameSaveCounter(
17922: PUSH
17923: LD_EXP 36
17927: STR
17928: PUSH
17929: LD_STRING )
17931: STR
17932: PPUSH
17933: CALL_OW 559
// end ; end ;
17937: LD_VAR 0 7
17941: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
17942: LD_INT 0
17944: PPUSH
// streamModeActive := false ;
17945: LD_ADDR_EXP 37
17949: PUSH
17950: LD_INT 0
17952: ST_TO_ADDR
// normalCounter := 36 ;
17953: LD_ADDR_EXP 38
17957: PUSH
17958: LD_INT 36
17960: ST_TO_ADDR
// hardcoreCounter := 18 ;
17961: LD_ADDR_EXP 39
17965: PUSH
17966: LD_INT 18
17968: ST_TO_ADDR
// sRocket := false ;
17969: LD_ADDR_EXP 42
17973: PUSH
17974: LD_INT 0
17976: ST_TO_ADDR
// sSpeed := false ;
17977: LD_ADDR_EXP 41
17981: PUSH
17982: LD_INT 0
17984: ST_TO_ADDR
// sEngine := false ;
17985: LD_ADDR_EXP 43
17989: PUSH
17990: LD_INT 0
17992: ST_TO_ADDR
// sSpec := false ;
17993: LD_ADDR_EXP 40
17997: PUSH
17998: LD_INT 0
18000: ST_TO_ADDR
// sLevel := false ;
18001: LD_ADDR_EXP 44
18005: PUSH
18006: LD_INT 0
18008: ST_TO_ADDR
// sArmoury := false ;
18009: LD_ADDR_EXP 45
18013: PUSH
18014: LD_INT 0
18016: ST_TO_ADDR
// sRadar := false ;
18017: LD_ADDR_EXP 46
18021: PUSH
18022: LD_INT 0
18024: ST_TO_ADDR
// sBunker := false ;
18025: LD_ADDR_EXP 47
18029: PUSH
18030: LD_INT 0
18032: ST_TO_ADDR
// sHack := false ;
18033: LD_ADDR_EXP 48
18037: PUSH
18038: LD_INT 0
18040: ST_TO_ADDR
// sFire := false ;
18041: LD_ADDR_EXP 49
18045: PUSH
18046: LD_INT 0
18048: ST_TO_ADDR
// sRefresh := false ;
18049: LD_ADDR_EXP 50
18053: PUSH
18054: LD_INT 0
18056: ST_TO_ADDR
// sExp := false ;
18057: LD_ADDR_EXP 51
18061: PUSH
18062: LD_INT 0
18064: ST_TO_ADDR
// sDepot := false ;
18065: LD_ADDR_EXP 52
18069: PUSH
18070: LD_INT 0
18072: ST_TO_ADDR
// sFlag := false ;
18073: LD_ADDR_EXP 53
18077: PUSH
18078: LD_INT 0
18080: ST_TO_ADDR
// sKamikadze := false ;
18081: LD_ADDR_EXP 61
18085: PUSH
18086: LD_INT 0
18088: ST_TO_ADDR
// sTroll := false ;
18089: LD_ADDR_EXP 62
18093: PUSH
18094: LD_INT 0
18096: ST_TO_ADDR
// sSlow := false ;
18097: LD_ADDR_EXP 63
18101: PUSH
18102: LD_INT 0
18104: ST_TO_ADDR
// sLack := false ;
18105: LD_ADDR_EXP 64
18109: PUSH
18110: LD_INT 0
18112: ST_TO_ADDR
// sTank := false ;
18113: LD_ADDR_EXP 66
18117: PUSH
18118: LD_INT 0
18120: ST_TO_ADDR
// sRemote := false ;
18121: LD_ADDR_EXP 67
18125: PUSH
18126: LD_INT 0
18128: ST_TO_ADDR
// sPowell := false ;
18129: LD_ADDR_EXP 68
18133: PUSH
18134: LD_INT 0
18136: ST_TO_ADDR
// sTeleport := false ;
18137: LD_ADDR_EXP 71
18141: PUSH
18142: LD_INT 0
18144: ST_TO_ADDR
// sOilTower := false ;
18145: LD_ADDR_EXP 73
18149: PUSH
18150: LD_INT 0
18152: ST_TO_ADDR
// sShovel := false ;
18153: LD_ADDR_EXP 74
18157: PUSH
18158: LD_INT 0
18160: ST_TO_ADDR
// sSheik := false ;
18161: LD_ADDR_EXP 75
18165: PUSH
18166: LD_INT 0
18168: ST_TO_ADDR
// sEarthquake := false ;
18169: LD_ADDR_EXP 77
18173: PUSH
18174: LD_INT 0
18176: ST_TO_ADDR
// sAI := false ;
18177: LD_ADDR_EXP 78
18181: PUSH
18182: LD_INT 0
18184: ST_TO_ADDR
// sCargo := false ;
18185: LD_ADDR_EXP 81
18189: PUSH
18190: LD_INT 0
18192: ST_TO_ADDR
// sDLaser := false ;
18193: LD_ADDR_EXP 82
18197: PUSH
18198: LD_INT 0
18200: ST_TO_ADDR
// sExchange := false ;
18201: LD_ADDR_EXP 83
18205: PUSH
18206: LD_INT 0
18208: ST_TO_ADDR
// sFac := false ;
18209: LD_ADDR_EXP 84
18213: PUSH
18214: LD_INT 0
18216: ST_TO_ADDR
// sPower := false ;
18217: LD_ADDR_EXP 85
18221: PUSH
18222: LD_INT 0
18224: ST_TO_ADDR
// sRandom := false ;
18225: LD_ADDR_EXP 86
18229: PUSH
18230: LD_INT 0
18232: ST_TO_ADDR
// sShield := false ;
18233: LD_ADDR_EXP 87
18237: PUSH
18238: LD_INT 0
18240: ST_TO_ADDR
// sTime := false ;
18241: LD_ADDR_EXP 88
18245: PUSH
18246: LD_INT 0
18248: ST_TO_ADDR
// sTools := false ;
18249: LD_ADDR_EXP 89
18253: PUSH
18254: LD_INT 0
18256: ST_TO_ADDR
// sSold := false ;
18257: LD_ADDR_EXP 54
18261: PUSH
18262: LD_INT 0
18264: ST_TO_ADDR
// sDiff := false ;
18265: LD_ADDR_EXP 55
18269: PUSH
18270: LD_INT 0
18272: ST_TO_ADDR
// sFog := false ;
18273: LD_ADDR_EXP 58
18277: PUSH
18278: LD_INT 0
18280: ST_TO_ADDR
// sReset := false ;
18281: LD_ADDR_EXP 59
18285: PUSH
18286: LD_INT 0
18288: ST_TO_ADDR
// sSun := false ;
18289: LD_ADDR_EXP 60
18293: PUSH
18294: LD_INT 0
18296: ST_TO_ADDR
// sTiger := false ;
18297: LD_ADDR_EXP 56
18301: PUSH
18302: LD_INT 0
18304: ST_TO_ADDR
// sBomb := false ;
18305: LD_ADDR_EXP 57
18309: PUSH
18310: LD_INT 0
18312: ST_TO_ADDR
// sWound := false ;
18313: LD_ADDR_EXP 65
18317: PUSH
18318: LD_INT 0
18320: ST_TO_ADDR
// sBetray := false ;
18321: LD_ADDR_EXP 69
18325: PUSH
18326: LD_INT 0
18328: ST_TO_ADDR
// sContamin := false ;
18329: LD_ADDR_EXP 70
18333: PUSH
18334: LD_INT 0
18336: ST_TO_ADDR
// sOil := false ;
18337: LD_ADDR_EXP 72
18341: PUSH
18342: LD_INT 0
18344: ST_TO_ADDR
// sStu := false ;
18345: LD_ADDR_EXP 76
18349: PUSH
18350: LD_INT 0
18352: ST_TO_ADDR
// sBazooka := false ;
18353: LD_ADDR_EXP 79
18357: PUSH
18358: LD_INT 0
18360: ST_TO_ADDR
// sMortar := false ;
18361: LD_ADDR_EXP 80
18365: PUSH
18366: LD_INT 0
18368: ST_TO_ADDR
// sRanger := false ;
18369: LD_ADDR_EXP 90
18373: PUSH
18374: LD_INT 0
18376: ST_TO_ADDR
// sComputer := false ;
18377: LD_ADDR_EXP 91
18381: PUSH
18382: LD_INT 0
18384: ST_TO_ADDR
// s30 := false ;
18385: LD_ADDR_EXP 92
18389: PUSH
18390: LD_INT 0
18392: ST_TO_ADDR
// s60 := false ;
18393: LD_ADDR_EXP 93
18397: PUSH
18398: LD_INT 0
18400: ST_TO_ADDR
// end ;
18401: LD_VAR 0 1
18405: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
18406: LD_INT 0
18408: PPUSH
18409: PPUSH
18410: PPUSH
18411: PPUSH
18412: PPUSH
18413: PPUSH
18414: PPUSH
// result := [ ] ;
18415: LD_ADDR_VAR 0 2
18419: PUSH
18420: EMPTY
18421: ST_TO_ADDR
// if campaign_id = 1 then
18422: LD_OWVAR 69
18426: PUSH
18427: LD_INT 1
18429: EQUAL
18430: IFFALSE 21596
// begin case mission_number of 1 :
18432: LD_OWVAR 70
18436: PUSH
18437: LD_INT 1
18439: DOUBLE
18440: EQUAL
18441: IFTRUE 18445
18443: GO 18521
18445: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18446: LD_ADDR_VAR 0 2
18450: PUSH
18451: LD_INT 2
18453: PUSH
18454: LD_INT 4
18456: PUSH
18457: LD_INT 11
18459: PUSH
18460: LD_INT 12
18462: PUSH
18463: LD_INT 15
18465: PUSH
18466: LD_INT 16
18468: PUSH
18469: LD_INT 22
18471: PUSH
18472: LD_INT 23
18474: PUSH
18475: LD_INT 26
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: PUSH
18489: LD_INT 101
18491: PUSH
18492: LD_INT 102
18494: PUSH
18495: LD_INT 106
18497: PUSH
18498: LD_INT 116
18500: PUSH
18501: LD_INT 117
18503: PUSH
18504: LD_INT 118
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: ST_TO_ADDR
18519: GO 21594
18521: LD_INT 2
18523: DOUBLE
18524: EQUAL
18525: IFTRUE 18529
18527: GO 18613
18529: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18530: LD_ADDR_VAR 0 2
18534: PUSH
18535: LD_INT 2
18537: PUSH
18538: LD_INT 4
18540: PUSH
18541: LD_INT 11
18543: PUSH
18544: LD_INT 12
18546: PUSH
18547: LD_INT 15
18549: PUSH
18550: LD_INT 16
18552: PUSH
18553: LD_INT 22
18555: PUSH
18556: LD_INT 23
18558: PUSH
18559: LD_INT 26
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 101
18575: PUSH
18576: LD_INT 102
18578: PUSH
18579: LD_INT 105
18581: PUSH
18582: LD_INT 106
18584: PUSH
18585: LD_INT 108
18587: PUSH
18588: LD_INT 116
18590: PUSH
18591: LD_INT 117
18593: PUSH
18594: LD_INT 118
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: ST_TO_ADDR
18611: GO 21594
18613: LD_INT 3
18615: DOUBLE
18616: EQUAL
18617: IFTRUE 18621
18619: GO 18709
18621: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
18622: LD_ADDR_VAR 0 2
18626: PUSH
18627: LD_INT 2
18629: PUSH
18630: LD_INT 4
18632: PUSH
18633: LD_INT 5
18635: PUSH
18636: LD_INT 11
18638: PUSH
18639: LD_INT 12
18641: PUSH
18642: LD_INT 15
18644: PUSH
18645: LD_INT 16
18647: PUSH
18648: LD_INT 22
18650: PUSH
18651: LD_INT 26
18653: PUSH
18654: LD_INT 36
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: PUSH
18669: LD_INT 101
18671: PUSH
18672: LD_INT 102
18674: PUSH
18675: LD_INT 105
18677: PUSH
18678: LD_INT 106
18680: PUSH
18681: LD_INT 108
18683: PUSH
18684: LD_INT 116
18686: PUSH
18687: LD_INT 117
18689: PUSH
18690: LD_INT 118
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: ST_TO_ADDR
18707: GO 21594
18709: LD_INT 4
18711: DOUBLE
18712: EQUAL
18713: IFTRUE 18717
18715: GO 18813
18717: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
18718: LD_ADDR_VAR 0 2
18722: PUSH
18723: LD_INT 2
18725: PUSH
18726: LD_INT 4
18728: PUSH
18729: LD_INT 5
18731: PUSH
18732: LD_INT 8
18734: PUSH
18735: LD_INT 11
18737: PUSH
18738: LD_INT 12
18740: PUSH
18741: LD_INT 15
18743: PUSH
18744: LD_INT 16
18746: PUSH
18747: LD_INT 22
18749: PUSH
18750: LD_INT 23
18752: PUSH
18753: LD_INT 26
18755: PUSH
18756: LD_INT 36
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 101
18775: PUSH
18776: LD_INT 102
18778: PUSH
18779: LD_INT 105
18781: PUSH
18782: LD_INT 106
18784: PUSH
18785: LD_INT 108
18787: PUSH
18788: LD_INT 116
18790: PUSH
18791: LD_INT 117
18793: PUSH
18794: LD_INT 118
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: ST_TO_ADDR
18811: GO 21594
18813: LD_INT 5
18815: DOUBLE
18816: EQUAL
18817: IFTRUE 18821
18819: GO 18933
18821: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
18822: LD_ADDR_VAR 0 2
18826: PUSH
18827: LD_INT 2
18829: PUSH
18830: LD_INT 4
18832: PUSH
18833: LD_INT 5
18835: PUSH
18836: LD_INT 6
18838: PUSH
18839: LD_INT 8
18841: PUSH
18842: LD_INT 11
18844: PUSH
18845: LD_INT 12
18847: PUSH
18848: LD_INT 15
18850: PUSH
18851: LD_INT 16
18853: PUSH
18854: LD_INT 22
18856: PUSH
18857: LD_INT 23
18859: PUSH
18860: LD_INT 25
18862: PUSH
18863: LD_INT 26
18865: PUSH
18866: LD_INT 36
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: PUSH
18885: LD_INT 101
18887: PUSH
18888: LD_INT 102
18890: PUSH
18891: LD_INT 105
18893: PUSH
18894: LD_INT 106
18896: PUSH
18897: LD_INT 108
18899: PUSH
18900: LD_INT 109
18902: PUSH
18903: LD_INT 112
18905: PUSH
18906: LD_INT 116
18908: PUSH
18909: LD_INT 117
18911: PUSH
18912: LD_INT 118
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: ST_TO_ADDR
18931: GO 21594
18933: LD_INT 6
18935: DOUBLE
18936: EQUAL
18937: IFTRUE 18941
18939: GO 19073
18941: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
18942: LD_ADDR_VAR 0 2
18946: PUSH
18947: LD_INT 2
18949: PUSH
18950: LD_INT 4
18952: PUSH
18953: LD_INT 5
18955: PUSH
18956: LD_INT 6
18958: PUSH
18959: LD_INT 8
18961: PUSH
18962: LD_INT 11
18964: PUSH
18965: LD_INT 12
18967: PUSH
18968: LD_INT 15
18970: PUSH
18971: LD_INT 16
18973: PUSH
18974: LD_INT 20
18976: PUSH
18977: LD_INT 21
18979: PUSH
18980: LD_INT 22
18982: PUSH
18983: LD_INT 23
18985: PUSH
18986: LD_INT 25
18988: PUSH
18989: LD_INT 26
18991: PUSH
18992: LD_INT 30
18994: PUSH
18995: LD_INT 31
18997: PUSH
18998: LD_INT 32
19000: PUSH
19001: LD_INT 36
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 101
19027: PUSH
19028: LD_INT 102
19030: PUSH
19031: LD_INT 105
19033: PUSH
19034: LD_INT 106
19036: PUSH
19037: LD_INT 108
19039: PUSH
19040: LD_INT 109
19042: PUSH
19043: LD_INT 112
19045: PUSH
19046: LD_INT 116
19048: PUSH
19049: LD_INT 117
19051: PUSH
19052: LD_INT 118
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: ST_TO_ADDR
19071: GO 21594
19073: LD_INT 7
19075: DOUBLE
19076: EQUAL
19077: IFTRUE 19081
19079: GO 19193
19081: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
19082: LD_ADDR_VAR 0 2
19086: PUSH
19087: LD_INT 2
19089: PUSH
19090: LD_INT 4
19092: PUSH
19093: LD_INT 5
19095: PUSH
19096: LD_INT 7
19098: PUSH
19099: LD_INT 11
19101: PUSH
19102: LD_INT 12
19104: PUSH
19105: LD_INT 15
19107: PUSH
19108: LD_INT 16
19110: PUSH
19111: LD_INT 20
19113: PUSH
19114: LD_INT 21
19116: PUSH
19117: LD_INT 22
19119: PUSH
19120: LD_INT 23
19122: PUSH
19123: LD_INT 25
19125: PUSH
19126: LD_INT 26
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 101
19147: PUSH
19148: LD_INT 102
19150: PUSH
19151: LD_INT 103
19153: PUSH
19154: LD_INT 105
19156: PUSH
19157: LD_INT 106
19159: PUSH
19160: LD_INT 108
19162: PUSH
19163: LD_INT 112
19165: PUSH
19166: LD_INT 116
19168: PUSH
19169: LD_INT 117
19171: PUSH
19172: LD_INT 118
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: ST_TO_ADDR
19191: GO 21594
19193: LD_INT 8
19195: DOUBLE
19196: EQUAL
19197: IFTRUE 19201
19199: GO 19341
19201: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
19202: LD_ADDR_VAR 0 2
19206: PUSH
19207: LD_INT 2
19209: PUSH
19210: LD_INT 4
19212: PUSH
19213: LD_INT 5
19215: PUSH
19216: LD_INT 6
19218: PUSH
19219: LD_INT 7
19221: PUSH
19222: LD_INT 8
19224: PUSH
19225: LD_INT 11
19227: PUSH
19228: LD_INT 12
19230: PUSH
19231: LD_INT 15
19233: PUSH
19234: LD_INT 16
19236: PUSH
19237: LD_INT 20
19239: PUSH
19240: LD_INT 21
19242: PUSH
19243: LD_INT 22
19245: PUSH
19246: LD_INT 23
19248: PUSH
19249: LD_INT 25
19251: PUSH
19252: LD_INT 26
19254: PUSH
19255: LD_INT 30
19257: PUSH
19258: LD_INT 31
19260: PUSH
19261: LD_INT 32
19263: PUSH
19264: LD_INT 36
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: PUSH
19289: LD_INT 101
19291: PUSH
19292: LD_INT 102
19294: PUSH
19295: LD_INT 103
19297: PUSH
19298: LD_INT 105
19300: PUSH
19301: LD_INT 106
19303: PUSH
19304: LD_INT 108
19306: PUSH
19307: LD_INT 109
19309: PUSH
19310: LD_INT 112
19312: PUSH
19313: LD_INT 116
19315: PUSH
19316: LD_INT 117
19318: PUSH
19319: LD_INT 118
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: ST_TO_ADDR
19339: GO 21594
19341: LD_INT 9
19343: DOUBLE
19344: EQUAL
19345: IFTRUE 19349
19347: GO 19497
19349: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
19350: LD_ADDR_VAR 0 2
19354: PUSH
19355: LD_INT 2
19357: PUSH
19358: LD_INT 4
19360: PUSH
19361: LD_INT 5
19363: PUSH
19364: LD_INT 6
19366: PUSH
19367: LD_INT 7
19369: PUSH
19370: LD_INT 8
19372: PUSH
19373: LD_INT 11
19375: PUSH
19376: LD_INT 12
19378: PUSH
19379: LD_INT 15
19381: PUSH
19382: LD_INT 16
19384: PUSH
19385: LD_INT 20
19387: PUSH
19388: LD_INT 21
19390: PUSH
19391: LD_INT 22
19393: PUSH
19394: LD_INT 23
19396: PUSH
19397: LD_INT 25
19399: PUSH
19400: LD_INT 26
19402: PUSH
19403: LD_INT 28
19405: PUSH
19406: LD_INT 30
19408: PUSH
19409: LD_INT 31
19411: PUSH
19412: LD_INT 32
19414: PUSH
19415: LD_INT 36
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: PUSH
19441: LD_INT 101
19443: PUSH
19444: LD_INT 102
19446: PUSH
19447: LD_INT 103
19449: PUSH
19450: LD_INT 105
19452: PUSH
19453: LD_INT 106
19455: PUSH
19456: LD_INT 108
19458: PUSH
19459: LD_INT 109
19461: PUSH
19462: LD_INT 112
19464: PUSH
19465: LD_INT 114
19467: PUSH
19468: LD_INT 116
19470: PUSH
19471: LD_INT 117
19473: PUSH
19474: LD_INT 118
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: ST_TO_ADDR
19495: GO 21594
19497: LD_INT 10
19499: DOUBLE
19500: EQUAL
19501: IFTRUE 19505
19503: GO 19701
19505: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
19506: LD_ADDR_VAR 0 2
19510: PUSH
19511: LD_INT 2
19513: PUSH
19514: LD_INT 4
19516: PUSH
19517: LD_INT 5
19519: PUSH
19520: LD_INT 6
19522: PUSH
19523: LD_INT 7
19525: PUSH
19526: LD_INT 8
19528: PUSH
19529: LD_INT 9
19531: PUSH
19532: LD_INT 10
19534: PUSH
19535: LD_INT 11
19537: PUSH
19538: LD_INT 12
19540: PUSH
19541: LD_INT 13
19543: PUSH
19544: LD_INT 14
19546: PUSH
19547: LD_INT 15
19549: PUSH
19550: LD_INT 16
19552: PUSH
19553: LD_INT 17
19555: PUSH
19556: LD_INT 18
19558: PUSH
19559: LD_INT 19
19561: PUSH
19562: LD_INT 20
19564: PUSH
19565: LD_INT 21
19567: PUSH
19568: LD_INT 22
19570: PUSH
19571: LD_INT 23
19573: PUSH
19574: LD_INT 24
19576: PUSH
19577: LD_INT 25
19579: PUSH
19580: LD_INT 26
19582: PUSH
19583: LD_INT 28
19585: PUSH
19586: LD_INT 30
19588: PUSH
19589: LD_INT 31
19591: PUSH
19592: LD_INT 32
19594: PUSH
19595: LD_INT 36
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 101
19631: PUSH
19632: LD_INT 102
19634: PUSH
19635: LD_INT 103
19637: PUSH
19638: LD_INT 104
19640: PUSH
19641: LD_INT 105
19643: PUSH
19644: LD_INT 106
19646: PUSH
19647: LD_INT 107
19649: PUSH
19650: LD_INT 108
19652: PUSH
19653: LD_INT 109
19655: PUSH
19656: LD_INT 110
19658: PUSH
19659: LD_INT 111
19661: PUSH
19662: LD_INT 112
19664: PUSH
19665: LD_INT 114
19667: PUSH
19668: LD_INT 116
19670: PUSH
19671: LD_INT 117
19673: PUSH
19674: LD_INT 118
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: ST_TO_ADDR
19699: GO 21594
19701: LD_INT 11
19703: DOUBLE
19704: EQUAL
19705: IFTRUE 19709
19707: GO 19913
19709: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
19710: LD_ADDR_VAR 0 2
19714: PUSH
19715: LD_INT 2
19717: PUSH
19718: LD_INT 3
19720: PUSH
19721: LD_INT 4
19723: PUSH
19724: LD_INT 5
19726: PUSH
19727: LD_INT 6
19729: PUSH
19730: LD_INT 7
19732: PUSH
19733: LD_INT 8
19735: PUSH
19736: LD_INT 9
19738: PUSH
19739: LD_INT 10
19741: PUSH
19742: LD_INT 11
19744: PUSH
19745: LD_INT 12
19747: PUSH
19748: LD_INT 13
19750: PUSH
19751: LD_INT 14
19753: PUSH
19754: LD_INT 15
19756: PUSH
19757: LD_INT 16
19759: PUSH
19760: LD_INT 17
19762: PUSH
19763: LD_INT 18
19765: PUSH
19766: LD_INT 19
19768: PUSH
19769: LD_INT 20
19771: PUSH
19772: LD_INT 21
19774: PUSH
19775: LD_INT 22
19777: PUSH
19778: LD_INT 23
19780: PUSH
19781: LD_INT 24
19783: PUSH
19784: LD_INT 25
19786: PUSH
19787: LD_INT 26
19789: PUSH
19790: LD_INT 28
19792: PUSH
19793: LD_INT 30
19795: PUSH
19796: LD_INT 31
19798: PUSH
19799: LD_INT 32
19801: PUSH
19802: LD_INT 34
19804: PUSH
19805: LD_INT 36
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: PUSH
19841: LD_INT 101
19843: PUSH
19844: LD_INT 102
19846: PUSH
19847: LD_INT 103
19849: PUSH
19850: LD_INT 104
19852: PUSH
19853: LD_INT 105
19855: PUSH
19856: LD_INT 106
19858: PUSH
19859: LD_INT 107
19861: PUSH
19862: LD_INT 108
19864: PUSH
19865: LD_INT 109
19867: PUSH
19868: LD_INT 110
19870: PUSH
19871: LD_INT 111
19873: PUSH
19874: LD_INT 112
19876: PUSH
19877: LD_INT 114
19879: PUSH
19880: LD_INT 116
19882: PUSH
19883: LD_INT 117
19885: PUSH
19886: LD_INT 118
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: ST_TO_ADDR
19911: GO 21594
19913: LD_INT 12
19915: DOUBLE
19916: EQUAL
19917: IFTRUE 19921
19919: GO 20141
19921: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
19922: LD_ADDR_VAR 0 2
19926: PUSH
19927: LD_INT 1
19929: PUSH
19930: LD_INT 2
19932: PUSH
19933: LD_INT 3
19935: PUSH
19936: LD_INT 4
19938: PUSH
19939: LD_INT 5
19941: PUSH
19942: LD_INT 6
19944: PUSH
19945: LD_INT 7
19947: PUSH
19948: LD_INT 8
19950: PUSH
19951: LD_INT 9
19953: PUSH
19954: LD_INT 10
19956: PUSH
19957: LD_INT 11
19959: PUSH
19960: LD_INT 12
19962: PUSH
19963: LD_INT 13
19965: PUSH
19966: LD_INT 14
19968: PUSH
19969: LD_INT 15
19971: PUSH
19972: LD_INT 16
19974: PUSH
19975: LD_INT 17
19977: PUSH
19978: LD_INT 18
19980: PUSH
19981: LD_INT 19
19983: PUSH
19984: LD_INT 20
19986: PUSH
19987: LD_INT 21
19989: PUSH
19990: LD_INT 22
19992: PUSH
19993: LD_INT 23
19995: PUSH
19996: LD_INT 24
19998: PUSH
19999: LD_INT 25
20001: PUSH
20002: LD_INT 26
20004: PUSH
20005: LD_INT 27
20007: PUSH
20008: LD_INT 28
20010: PUSH
20011: LD_INT 30
20013: PUSH
20014: LD_INT 31
20016: PUSH
20017: LD_INT 32
20019: PUSH
20020: LD_INT 33
20022: PUSH
20023: LD_INT 34
20025: PUSH
20026: LD_INT 36
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 101
20067: PUSH
20068: LD_INT 102
20070: PUSH
20071: LD_INT 103
20073: PUSH
20074: LD_INT 104
20076: PUSH
20077: LD_INT 105
20079: PUSH
20080: LD_INT 106
20082: PUSH
20083: LD_INT 107
20085: PUSH
20086: LD_INT 108
20088: PUSH
20089: LD_INT 109
20091: PUSH
20092: LD_INT 110
20094: PUSH
20095: LD_INT 111
20097: PUSH
20098: LD_INT 112
20100: PUSH
20101: LD_INT 113
20103: PUSH
20104: LD_INT 114
20106: PUSH
20107: LD_INT 116
20109: PUSH
20110: LD_INT 117
20112: PUSH
20113: LD_INT 118
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: ST_TO_ADDR
20139: GO 21594
20141: LD_INT 13
20143: DOUBLE
20144: EQUAL
20145: IFTRUE 20149
20147: GO 20357
20149: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20150: LD_ADDR_VAR 0 2
20154: PUSH
20155: LD_INT 1
20157: PUSH
20158: LD_INT 2
20160: PUSH
20161: LD_INT 3
20163: PUSH
20164: LD_INT 4
20166: PUSH
20167: LD_INT 5
20169: PUSH
20170: LD_INT 8
20172: PUSH
20173: LD_INT 9
20175: PUSH
20176: LD_INT 10
20178: PUSH
20179: LD_INT 11
20181: PUSH
20182: LD_INT 12
20184: PUSH
20185: LD_INT 14
20187: PUSH
20188: LD_INT 15
20190: PUSH
20191: LD_INT 16
20193: PUSH
20194: LD_INT 17
20196: PUSH
20197: LD_INT 18
20199: PUSH
20200: LD_INT 19
20202: PUSH
20203: LD_INT 20
20205: PUSH
20206: LD_INT 21
20208: PUSH
20209: LD_INT 22
20211: PUSH
20212: LD_INT 23
20214: PUSH
20215: LD_INT 24
20217: PUSH
20218: LD_INT 25
20220: PUSH
20221: LD_INT 26
20223: PUSH
20224: LD_INT 27
20226: PUSH
20227: LD_INT 28
20229: PUSH
20230: LD_INT 30
20232: PUSH
20233: LD_INT 31
20235: PUSH
20236: LD_INT 32
20238: PUSH
20239: LD_INT 33
20241: PUSH
20242: LD_INT 34
20244: PUSH
20245: LD_INT 36
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: PUSH
20281: LD_INT 101
20283: PUSH
20284: LD_INT 102
20286: PUSH
20287: LD_INT 103
20289: PUSH
20290: LD_INT 104
20292: PUSH
20293: LD_INT 105
20295: PUSH
20296: LD_INT 106
20298: PUSH
20299: LD_INT 107
20301: PUSH
20302: LD_INT 108
20304: PUSH
20305: LD_INT 109
20307: PUSH
20308: LD_INT 110
20310: PUSH
20311: LD_INT 111
20313: PUSH
20314: LD_INT 112
20316: PUSH
20317: LD_INT 113
20319: PUSH
20320: LD_INT 114
20322: PUSH
20323: LD_INT 116
20325: PUSH
20326: LD_INT 117
20328: PUSH
20329: LD_INT 118
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: ST_TO_ADDR
20355: GO 21594
20357: LD_INT 14
20359: DOUBLE
20360: EQUAL
20361: IFTRUE 20365
20363: GO 20589
20365: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20366: LD_ADDR_VAR 0 2
20370: PUSH
20371: LD_INT 1
20373: PUSH
20374: LD_INT 2
20376: PUSH
20377: LD_INT 3
20379: PUSH
20380: LD_INT 4
20382: PUSH
20383: LD_INT 5
20385: PUSH
20386: LD_INT 6
20388: PUSH
20389: LD_INT 7
20391: PUSH
20392: LD_INT 8
20394: PUSH
20395: LD_INT 9
20397: PUSH
20398: LD_INT 10
20400: PUSH
20401: LD_INT 11
20403: PUSH
20404: LD_INT 12
20406: PUSH
20407: LD_INT 13
20409: PUSH
20410: LD_INT 14
20412: PUSH
20413: LD_INT 15
20415: PUSH
20416: LD_INT 16
20418: PUSH
20419: LD_INT 17
20421: PUSH
20422: LD_INT 18
20424: PUSH
20425: LD_INT 19
20427: PUSH
20428: LD_INT 20
20430: PUSH
20431: LD_INT 21
20433: PUSH
20434: LD_INT 22
20436: PUSH
20437: LD_INT 23
20439: PUSH
20440: LD_INT 24
20442: PUSH
20443: LD_INT 25
20445: PUSH
20446: LD_INT 26
20448: PUSH
20449: LD_INT 27
20451: PUSH
20452: LD_INT 28
20454: PUSH
20455: LD_INT 29
20457: PUSH
20458: LD_INT 30
20460: PUSH
20461: LD_INT 31
20463: PUSH
20464: LD_INT 32
20466: PUSH
20467: LD_INT 33
20469: PUSH
20470: LD_INT 34
20472: PUSH
20473: LD_INT 36
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: PUSH
20513: LD_INT 101
20515: PUSH
20516: LD_INT 102
20518: PUSH
20519: LD_INT 103
20521: PUSH
20522: LD_INT 104
20524: PUSH
20525: LD_INT 105
20527: PUSH
20528: LD_INT 106
20530: PUSH
20531: LD_INT 107
20533: PUSH
20534: LD_INT 108
20536: PUSH
20537: LD_INT 109
20539: PUSH
20540: LD_INT 110
20542: PUSH
20543: LD_INT 111
20545: PUSH
20546: LD_INT 112
20548: PUSH
20549: LD_INT 113
20551: PUSH
20552: LD_INT 114
20554: PUSH
20555: LD_INT 116
20557: PUSH
20558: LD_INT 117
20560: PUSH
20561: LD_INT 118
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: ST_TO_ADDR
20587: GO 21594
20589: LD_INT 15
20591: DOUBLE
20592: EQUAL
20593: IFTRUE 20597
20595: GO 20821
20597: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
20598: LD_ADDR_VAR 0 2
20602: PUSH
20603: LD_INT 1
20605: PUSH
20606: LD_INT 2
20608: PUSH
20609: LD_INT 3
20611: PUSH
20612: LD_INT 4
20614: PUSH
20615: LD_INT 5
20617: PUSH
20618: LD_INT 6
20620: PUSH
20621: LD_INT 7
20623: PUSH
20624: LD_INT 8
20626: PUSH
20627: LD_INT 9
20629: PUSH
20630: LD_INT 10
20632: PUSH
20633: LD_INT 11
20635: PUSH
20636: LD_INT 12
20638: PUSH
20639: LD_INT 13
20641: PUSH
20642: LD_INT 14
20644: PUSH
20645: LD_INT 15
20647: PUSH
20648: LD_INT 16
20650: PUSH
20651: LD_INT 17
20653: PUSH
20654: LD_INT 18
20656: PUSH
20657: LD_INT 19
20659: PUSH
20660: LD_INT 20
20662: PUSH
20663: LD_INT 21
20665: PUSH
20666: LD_INT 22
20668: PUSH
20669: LD_INT 23
20671: PUSH
20672: LD_INT 24
20674: PUSH
20675: LD_INT 25
20677: PUSH
20678: LD_INT 26
20680: PUSH
20681: LD_INT 27
20683: PUSH
20684: LD_INT 28
20686: PUSH
20687: LD_INT 29
20689: PUSH
20690: LD_INT 30
20692: PUSH
20693: LD_INT 31
20695: PUSH
20696: LD_INT 32
20698: PUSH
20699: LD_INT 33
20701: PUSH
20702: LD_INT 34
20704: PUSH
20705: LD_INT 36
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: PUSH
20745: LD_INT 101
20747: PUSH
20748: LD_INT 102
20750: PUSH
20751: LD_INT 103
20753: PUSH
20754: LD_INT 104
20756: PUSH
20757: LD_INT 105
20759: PUSH
20760: LD_INT 106
20762: PUSH
20763: LD_INT 107
20765: PUSH
20766: LD_INT 108
20768: PUSH
20769: LD_INT 109
20771: PUSH
20772: LD_INT 110
20774: PUSH
20775: LD_INT 111
20777: PUSH
20778: LD_INT 112
20780: PUSH
20781: LD_INT 113
20783: PUSH
20784: LD_INT 114
20786: PUSH
20787: LD_INT 116
20789: PUSH
20790: LD_INT 117
20792: PUSH
20793: LD_INT 118
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: ST_TO_ADDR
20819: GO 21594
20821: LD_INT 16
20823: DOUBLE
20824: EQUAL
20825: IFTRUE 20829
20827: GO 20965
20829: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
20830: LD_ADDR_VAR 0 2
20834: PUSH
20835: LD_INT 2
20837: PUSH
20838: LD_INT 4
20840: PUSH
20841: LD_INT 5
20843: PUSH
20844: LD_INT 7
20846: PUSH
20847: LD_INT 11
20849: PUSH
20850: LD_INT 12
20852: PUSH
20853: LD_INT 15
20855: PUSH
20856: LD_INT 16
20858: PUSH
20859: LD_INT 20
20861: PUSH
20862: LD_INT 21
20864: PUSH
20865: LD_INT 22
20867: PUSH
20868: LD_INT 23
20870: PUSH
20871: LD_INT 25
20873: PUSH
20874: LD_INT 26
20876: PUSH
20877: LD_INT 30
20879: PUSH
20880: LD_INT 31
20882: PUSH
20883: LD_INT 32
20885: PUSH
20886: LD_INT 33
20888: PUSH
20889: LD_INT 34
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 101
20915: PUSH
20916: LD_INT 102
20918: PUSH
20919: LD_INT 103
20921: PUSH
20922: LD_INT 106
20924: PUSH
20925: LD_INT 108
20927: PUSH
20928: LD_INT 112
20930: PUSH
20931: LD_INT 113
20933: PUSH
20934: LD_INT 114
20936: PUSH
20937: LD_INT 116
20939: PUSH
20940: LD_INT 117
20942: PUSH
20943: LD_INT 118
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: ST_TO_ADDR
20963: GO 21594
20965: LD_INT 17
20967: DOUBLE
20968: EQUAL
20969: IFTRUE 20973
20971: GO 21197
20973: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
20974: LD_ADDR_VAR 0 2
20978: PUSH
20979: LD_INT 1
20981: PUSH
20982: LD_INT 2
20984: PUSH
20985: LD_INT 3
20987: PUSH
20988: LD_INT 4
20990: PUSH
20991: LD_INT 5
20993: PUSH
20994: LD_INT 6
20996: PUSH
20997: LD_INT 7
20999: PUSH
21000: LD_INT 8
21002: PUSH
21003: LD_INT 9
21005: PUSH
21006: LD_INT 10
21008: PUSH
21009: LD_INT 11
21011: PUSH
21012: LD_INT 12
21014: PUSH
21015: LD_INT 13
21017: PUSH
21018: LD_INT 14
21020: PUSH
21021: LD_INT 15
21023: PUSH
21024: LD_INT 16
21026: PUSH
21027: LD_INT 17
21029: PUSH
21030: LD_INT 18
21032: PUSH
21033: LD_INT 19
21035: PUSH
21036: LD_INT 20
21038: PUSH
21039: LD_INT 21
21041: PUSH
21042: LD_INT 22
21044: PUSH
21045: LD_INT 23
21047: PUSH
21048: LD_INT 24
21050: PUSH
21051: LD_INT 25
21053: PUSH
21054: LD_INT 26
21056: PUSH
21057: LD_INT 27
21059: PUSH
21060: LD_INT 28
21062: PUSH
21063: LD_INT 29
21065: PUSH
21066: LD_INT 30
21068: PUSH
21069: LD_INT 31
21071: PUSH
21072: LD_INT 32
21074: PUSH
21075: LD_INT 33
21077: PUSH
21078: LD_INT 34
21080: PUSH
21081: LD_INT 36
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 101
21123: PUSH
21124: LD_INT 102
21126: PUSH
21127: LD_INT 103
21129: PUSH
21130: LD_INT 104
21132: PUSH
21133: LD_INT 105
21135: PUSH
21136: LD_INT 106
21138: PUSH
21139: LD_INT 107
21141: PUSH
21142: LD_INT 108
21144: PUSH
21145: LD_INT 109
21147: PUSH
21148: LD_INT 110
21150: PUSH
21151: LD_INT 111
21153: PUSH
21154: LD_INT 112
21156: PUSH
21157: LD_INT 113
21159: PUSH
21160: LD_INT 114
21162: PUSH
21163: LD_INT 116
21165: PUSH
21166: LD_INT 117
21168: PUSH
21169: LD_INT 118
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: ST_TO_ADDR
21195: GO 21594
21197: LD_INT 18
21199: DOUBLE
21200: EQUAL
21201: IFTRUE 21205
21203: GO 21353
21205: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21206: LD_ADDR_VAR 0 2
21210: PUSH
21211: LD_INT 2
21213: PUSH
21214: LD_INT 4
21216: PUSH
21217: LD_INT 5
21219: PUSH
21220: LD_INT 7
21222: PUSH
21223: LD_INT 11
21225: PUSH
21226: LD_INT 12
21228: PUSH
21229: LD_INT 15
21231: PUSH
21232: LD_INT 16
21234: PUSH
21235: LD_INT 20
21237: PUSH
21238: LD_INT 21
21240: PUSH
21241: LD_INT 22
21243: PUSH
21244: LD_INT 23
21246: PUSH
21247: LD_INT 25
21249: PUSH
21250: LD_INT 26
21252: PUSH
21253: LD_INT 30
21255: PUSH
21256: LD_INT 31
21258: PUSH
21259: LD_INT 32
21261: PUSH
21262: LD_INT 33
21264: PUSH
21265: LD_INT 34
21267: PUSH
21268: LD_INT 35
21270: PUSH
21271: LD_INT 36
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: PUSH
21297: LD_INT 101
21299: PUSH
21300: LD_INT 102
21302: PUSH
21303: LD_INT 103
21305: PUSH
21306: LD_INT 106
21308: PUSH
21309: LD_INT 108
21311: PUSH
21312: LD_INT 112
21314: PUSH
21315: LD_INT 113
21317: PUSH
21318: LD_INT 114
21320: PUSH
21321: LD_INT 115
21323: PUSH
21324: LD_INT 116
21326: PUSH
21327: LD_INT 117
21329: PUSH
21330: LD_INT 118
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: ST_TO_ADDR
21351: GO 21594
21353: LD_INT 19
21355: DOUBLE
21356: EQUAL
21357: IFTRUE 21361
21359: GO 21593
21361: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21362: LD_ADDR_VAR 0 2
21366: PUSH
21367: LD_INT 1
21369: PUSH
21370: LD_INT 2
21372: PUSH
21373: LD_INT 3
21375: PUSH
21376: LD_INT 4
21378: PUSH
21379: LD_INT 5
21381: PUSH
21382: LD_INT 6
21384: PUSH
21385: LD_INT 7
21387: PUSH
21388: LD_INT 8
21390: PUSH
21391: LD_INT 9
21393: PUSH
21394: LD_INT 10
21396: PUSH
21397: LD_INT 11
21399: PUSH
21400: LD_INT 12
21402: PUSH
21403: LD_INT 13
21405: PUSH
21406: LD_INT 14
21408: PUSH
21409: LD_INT 15
21411: PUSH
21412: LD_INT 16
21414: PUSH
21415: LD_INT 17
21417: PUSH
21418: LD_INT 18
21420: PUSH
21421: LD_INT 19
21423: PUSH
21424: LD_INT 20
21426: PUSH
21427: LD_INT 21
21429: PUSH
21430: LD_INT 22
21432: PUSH
21433: LD_INT 23
21435: PUSH
21436: LD_INT 24
21438: PUSH
21439: LD_INT 25
21441: PUSH
21442: LD_INT 26
21444: PUSH
21445: LD_INT 27
21447: PUSH
21448: LD_INT 28
21450: PUSH
21451: LD_INT 29
21453: PUSH
21454: LD_INT 30
21456: PUSH
21457: LD_INT 31
21459: PUSH
21460: LD_INT 32
21462: PUSH
21463: LD_INT 33
21465: PUSH
21466: LD_INT 34
21468: PUSH
21469: LD_INT 35
21471: PUSH
21472: LD_INT 36
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: PUSH
21513: LD_INT 101
21515: PUSH
21516: LD_INT 102
21518: PUSH
21519: LD_INT 103
21521: PUSH
21522: LD_INT 104
21524: PUSH
21525: LD_INT 105
21527: PUSH
21528: LD_INT 106
21530: PUSH
21531: LD_INT 107
21533: PUSH
21534: LD_INT 108
21536: PUSH
21537: LD_INT 109
21539: PUSH
21540: LD_INT 110
21542: PUSH
21543: LD_INT 111
21545: PUSH
21546: LD_INT 112
21548: PUSH
21549: LD_INT 113
21551: PUSH
21552: LD_INT 114
21554: PUSH
21555: LD_INT 115
21557: PUSH
21558: LD_INT 116
21560: PUSH
21561: LD_INT 117
21563: PUSH
21564: LD_INT 118
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: ST_TO_ADDR
21591: GO 21594
21593: POP
// end else
21594: GO 21825
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
21596: LD_ADDR_VAR 0 2
21600: PUSH
21601: LD_INT 1
21603: PUSH
21604: LD_INT 2
21606: PUSH
21607: LD_INT 3
21609: PUSH
21610: LD_INT 4
21612: PUSH
21613: LD_INT 5
21615: PUSH
21616: LD_INT 6
21618: PUSH
21619: LD_INT 7
21621: PUSH
21622: LD_INT 8
21624: PUSH
21625: LD_INT 9
21627: PUSH
21628: LD_INT 10
21630: PUSH
21631: LD_INT 11
21633: PUSH
21634: LD_INT 12
21636: PUSH
21637: LD_INT 13
21639: PUSH
21640: LD_INT 14
21642: PUSH
21643: LD_INT 15
21645: PUSH
21646: LD_INT 16
21648: PUSH
21649: LD_INT 17
21651: PUSH
21652: LD_INT 18
21654: PUSH
21655: LD_INT 19
21657: PUSH
21658: LD_INT 20
21660: PUSH
21661: LD_INT 21
21663: PUSH
21664: LD_INT 22
21666: PUSH
21667: LD_INT 23
21669: PUSH
21670: LD_INT 24
21672: PUSH
21673: LD_INT 25
21675: PUSH
21676: LD_INT 26
21678: PUSH
21679: LD_INT 27
21681: PUSH
21682: LD_INT 28
21684: PUSH
21685: LD_INT 29
21687: PUSH
21688: LD_INT 30
21690: PUSH
21691: LD_INT 31
21693: PUSH
21694: LD_INT 32
21696: PUSH
21697: LD_INT 33
21699: PUSH
21700: LD_INT 34
21702: PUSH
21703: LD_INT 35
21705: PUSH
21706: LD_INT 36
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: PUSH
21747: LD_INT 101
21749: PUSH
21750: LD_INT 102
21752: PUSH
21753: LD_INT 103
21755: PUSH
21756: LD_INT 104
21758: PUSH
21759: LD_INT 105
21761: PUSH
21762: LD_INT 106
21764: PUSH
21765: LD_INT 107
21767: PUSH
21768: LD_INT 108
21770: PUSH
21771: LD_INT 109
21773: PUSH
21774: LD_INT 110
21776: PUSH
21777: LD_INT 111
21779: PUSH
21780: LD_INT 112
21782: PUSH
21783: LD_INT 113
21785: PUSH
21786: LD_INT 114
21788: PUSH
21789: LD_INT 115
21791: PUSH
21792: LD_INT 116
21794: PUSH
21795: LD_INT 117
21797: PUSH
21798: LD_INT 118
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: ST_TO_ADDR
// if result then
21825: LD_VAR 0 2
21829: IFFALSE 22615
// begin normal :=  ;
21831: LD_ADDR_VAR 0 5
21835: PUSH
21836: LD_STRING 
21838: ST_TO_ADDR
// hardcore :=  ;
21839: LD_ADDR_VAR 0 6
21843: PUSH
21844: LD_STRING 
21846: ST_TO_ADDR
// active :=  ;
21847: LD_ADDR_VAR 0 7
21851: PUSH
21852: LD_STRING 
21854: ST_TO_ADDR
// for i = 1 to normalCounter do
21855: LD_ADDR_VAR 0 8
21859: PUSH
21860: DOUBLE
21861: LD_INT 1
21863: DEC
21864: ST_TO_ADDR
21865: LD_EXP 38
21869: PUSH
21870: FOR_TO
21871: IFFALSE 21972
// begin tmp := 0 ;
21873: LD_ADDR_VAR 0 3
21877: PUSH
21878: LD_STRING 0
21880: ST_TO_ADDR
// if result [ 1 ] then
21881: LD_VAR 0 2
21885: PUSH
21886: LD_INT 1
21888: ARRAY
21889: IFFALSE 21954
// if result [ 1 ] [ 1 ] = i then
21891: LD_VAR 0 2
21895: PUSH
21896: LD_INT 1
21898: ARRAY
21899: PUSH
21900: LD_INT 1
21902: ARRAY
21903: PUSH
21904: LD_VAR 0 8
21908: EQUAL
21909: IFFALSE 21954
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21911: LD_ADDR_VAR 0 2
21915: PUSH
21916: LD_VAR 0 2
21920: PPUSH
21921: LD_INT 1
21923: PPUSH
21924: LD_VAR 0 2
21928: PUSH
21929: LD_INT 1
21931: ARRAY
21932: PPUSH
21933: LD_INT 1
21935: PPUSH
21936: CALL_OW 3
21940: PPUSH
21941: CALL_OW 1
21945: ST_TO_ADDR
// tmp := 1 ;
21946: LD_ADDR_VAR 0 3
21950: PUSH
21951: LD_STRING 1
21953: ST_TO_ADDR
// end ; normal := normal & tmp ;
21954: LD_ADDR_VAR 0 5
21958: PUSH
21959: LD_VAR 0 5
21963: PUSH
21964: LD_VAR 0 3
21968: STR
21969: ST_TO_ADDR
// end ;
21970: GO 21870
21972: POP
21973: POP
// for i = 1 to hardcoreCounter do
21974: LD_ADDR_VAR 0 8
21978: PUSH
21979: DOUBLE
21980: LD_INT 1
21982: DEC
21983: ST_TO_ADDR
21984: LD_EXP 39
21988: PUSH
21989: FOR_TO
21990: IFFALSE 22095
// begin tmp := 0 ;
21992: LD_ADDR_VAR 0 3
21996: PUSH
21997: LD_STRING 0
21999: ST_TO_ADDR
// if result [ 2 ] then
22000: LD_VAR 0 2
22004: PUSH
22005: LD_INT 2
22007: ARRAY
22008: IFFALSE 22077
// if result [ 2 ] [ 1 ] = 100 + i then
22010: LD_VAR 0 2
22014: PUSH
22015: LD_INT 2
22017: ARRAY
22018: PUSH
22019: LD_INT 1
22021: ARRAY
22022: PUSH
22023: LD_INT 100
22025: PUSH
22026: LD_VAR 0 8
22030: PLUS
22031: EQUAL
22032: IFFALSE 22077
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22034: LD_ADDR_VAR 0 2
22038: PUSH
22039: LD_VAR 0 2
22043: PPUSH
22044: LD_INT 2
22046: PPUSH
22047: LD_VAR 0 2
22051: PUSH
22052: LD_INT 2
22054: ARRAY
22055: PPUSH
22056: LD_INT 1
22058: PPUSH
22059: CALL_OW 3
22063: PPUSH
22064: CALL_OW 1
22068: ST_TO_ADDR
// tmp := 1 ;
22069: LD_ADDR_VAR 0 3
22073: PUSH
22074: LD_STRING 1
22076: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22077: LD_ADDR_VAR 0 6
22081: PUSH
22082: LD_VAR 0 6
22086: PUSH
22087: LD_VAR 0 3
22091: STR
22092: ST_TO_ADDR
// end ;
22093: GO 21989
22095: POP
22096: POP
// if isGameLoad then
22097: LD_VAR 0 1
22101: IFFALSE 22576
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
22103: LD_ADDR_VAR 0 4
22107: PUSH
22108: LD_EXP 42
22112: PUSH
22113: LD_EXP 41
22117: PUSH
22118: LD_EXP 43
22122: PUSH
22123: LD_EXP 40
22127: PUSH
22128: LD_EXP 44
22132: PUSH
22133: LD_EXP 45
22137: PUSH
22138: LD_EXP 46
22142: PUSH
22143: LD_EXP 47
22147: PUSH
22148: LD_EXP 48
22152: PUSH
22153: LD_EXP 49
22157: PUSH
22158: LD_EXP 50
22162: PUSH
22163: LD_EXP 51
22167: PUSH
22168: LD_EXP 52
22172: PUSH
22173: LD_EXP 53
22177: PUSH
22178: LD_EXP 61
22182: PUSH
22183: LD_EXP 62
22187: PUSH
22188: LD_EXP 63
22192: PUSH
22193: LD_EXP 64
22197: PUSH
22198: LD_EXP 66
22202: PUSH
22203: LD_EXP 67
22207: PUSH
22208: LD_EXP 68
22212: PUSH
22213: LD_EXP 71
22217: PUSH
22218: LD_EXP 73
22222: PUSH
22223: LD_EXP 74
22227: PUSH
22228: LD_EXP 75
22232: PUSH
22233: LD_EXP 77
22237: PUSH
22238: LD_EXP 78
22242: PUSH
22243: LD_EXP 81
22247: PUSH
22248: LD_EXP 82
22252: PUSH
22253: LD_EXP 83
22257: PUSH
22258: LD_EXP 84
22262: PUSH
22263: LD_EXP 85
22267: PUSH
22268: LD_EXP 86
22272: PUSH
22273: LD_EXP 87
22277: PUSH
22278: LD_EXP 88
22282: PUSH
22283: LD_EXP 89
22287: PUSH
22288: LD_EXP 54
22292: PUSH
22293: LD_EXP 55
22297: PUSH
22298: LD_EXP 58
22302: PUSH
22303: LD_EXP 59
22307: PUSH
22308: LD_EXP 60
22312: PUSH
22313: LD_EXP 56
22317: PUSH
22318: LD_EXP 57
22322: PUSH
22323: LD_EXP 65
22327: PUSH
22328: LD_EXP 69
22332: PUSH
22333: LD_EXP 70
22337: PUSH
22338: LD_EXP 72
22342: PUSH
22343: LD_EXP 76
22347: PUSH
22348: LD_EXP 79
22352: PUSH
22353: LD_EXP 80
22357: PUSH
22358: LD_EXP 90
22362: PUSH
22363: LD_EXP 91
22367: PUSH
22368: LD_EXP 92
22372: PUSH
22373: LD_EXP 93
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: ST_TO_ADDR
// tmp :=  ;
22434: LD_ADDR_VAR 0 3
22438: PUSH
22439: LD_STRING 
22441: ST_TO_ADDR
// for i = 1 to normalCounter do
22442: LD_ADDR_VAR 0 8
22446: PUSH
22447: DOUBLE
22448: LD_INT 1
22450: DEC
22451: ST_TO_ADDR
22452: LD_EXP 38
22456: PUSH
22457: FOR_TO
22458: IFFALSE 22494
// begin if flags [ i ] then
22460: LD_VAR 0 4
22464: PUSH
22465: LD_VAR 0 8
22469: ARRAY
22470: IFFALSE 22492
// tmp := tmp & i & ; ;
22472: LD_ADDR_VAR 0 3
22476: PUSH
22477: LD_VAR 0 3
22481: PUSH
22482: LD_VAR 0 8
22486: STR
22487: PUSH
22488: LD_STRING ;
22490: STR
22491: ST_TO_ADDR
// end ;
22492: GO 22457
22494: POP
22495: POP
// for i = 1 to hardcoreCounter do
22496: LD_ADDR_VAR 0 8
22500: PUSH
22501: DOUBLE
22502: LD_INT 1
22504: DEC
22505: ST_TO_ADDR
22506: LD_EXP 39
22510: PUSH
22511: FOR_TO
22512: IFFALSE 22558
// begin if flags [ normalCounter + i ] then
22514: LD_VAR 0 4
22518: PUSH
22519: LD_EXP 38
22523: PUSH
22524: LD_VAR 0 8
22528: PLUS
22529: ARRAY
22530: IFFALSE 22556
// tmp := tmp & ( 100 + i ) & ; ;
22532: LD_ADDR_VAR 0 3
22536: PUSH
22537: LD_VAR 0 3
22541: PUSH
22542: LD_INT 100
22544: PUSH
22545: LD_VAR 0 8
22549: PLUS
22550: STR
22551: PUSH
22552: LD_STRING ;
22554: STR
22555: ST_TO_ADDR
// end ;
22556: GO 22511
22558: POP
22559: POP
// if tmp then
22560: LD_VAR 0 3
22564: IFFALSE 22576
// active := tmp ;
22566: LD_ADDR_VAR 0 7
22570: PUSH
22571: LD_VAR 0 3
22575: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
22576: LD_STRING getStreamItemsFromMission("
22578: PUSH
22579: LD_VAR 0 5
22583: STR
22584: PUSH
22585: LD_STRING ","
22587: STR
22588: PUSH
22589: LD_VAR 0 6
22593: STR
22594: PUSH
22595: LD_STRING ","
22597: STR
22598: PUSH
22599: LD_VAR 0 7
22603: STR
22604: PUSH
22605: LD_STRING ")
22607: STR
22608: PPUSH
22609: CALL_OW 559
// end else
22613: GO 22622
// ToLua ( getStreamItemsFromMission("","","") ) ;
22615: LD_STRING getStreamItemsFromMission("","","")
22617: PPUSH
22618: CALL_OW 559
// end ;
22622: LD_VAR 0 2
22626: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22627: LD_EXP 37
22631: PUSH
22632: LD_EXP 42
22636: AND
22637: IFFALSE 22761
22639: GO 22641
22641: DISABLE
22642: LD_INT 0
22644: PPUSH
22645: PPUSH
// begin enable ;
22646: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
22647: LD_ADDR_VAR 0 2
22651: PUSH
22652: LD_INT 22
22654: PUSH
22655: LD_OWVAR 2
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 2
22666: PUSH
22667: LD_INT 34
22669: PUSH
22670: LD_INT 7
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 34
22679: PUSH
22680: LD_INT 45
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 34
22689: PUSH
22690: LD_INT 28
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 34
22699: PUSH
22700: LD_INT 47
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PPUSH
22718: CALL_OW 69
22722: ST_TO_ADDR
// if not tmp then
22723: LD_VAR 0 2
22727: NOT
22728: IFFALSE 22732
// exit ;
22730: GO 22761
// for i in tmp do
22732: LD_ADDR_VAR 0 1
22736: PUSH
22737: LD_VAR 0 2
22741: PUSH
22742: FOR_IN
22743: IFFALSE 22759
// begin SetLives ( i , 0 ) ;
22745: LD_VAR 0 1
22749: PPUSH
22750: LD_INT 0
22752: PPUSH
22753: CALL_OW 234
// end ;
22757: GO 22742
22759: POP
22760: POP
// end ;
22761: PPOPN 2
22763: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22764: LD_EXP 37
22768: PUSH
22769: LD_EXP 43
22773: AND
22774: IFFALSE 22858
22776: GO 22778
22778: DISABLE
22779: LD_INT 0
22781: PPUSH
22782: PPUSH
// begin enable ;
22783: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22784: LD_ADDR_VAR 0 2
22788: PUSH
22789: LD_INT 22
22791: PUSH
22792: LD_OWVAR 2
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 32
22803: PUSH
22804: LD_INT 3
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PPUSH
22815: CALL_OW 69
22819: ST_TO_ADDR
// if not tmp then
22820: LD_VAR 0 2
22824: NOT
22825: IFFALSE 22829
// exit ;
22827: GO 22858
// for i in tmp do
22829: LD_ADDR_VAR 0 1
22833: PUSH
22834: LD_VAR 0 2
22838: PUSH
22839: FOR_IN
22840: IFFALSE 22856
// begin SetLives ( i , 0 ) ;
22842: LD_VAR 0 1
22846: PPUSH
22847: LD_INT 0
22849: PPUSH
22850: CALL_OW 234
// end ;
22854: GO 22839
22856: POP
22857: POP
// end ;
22858: PPOPN 2
22860: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22861: LD_EXP 37
22865: PUSH
22866: LD_EXP 40
22870: AND
22871: IFFALSE 22964
22873: GO 22875
22875: DISABLE
22876: LD_INT 0
22878: PPUSH
// begin enable ;
22879: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22880: LD_ADDR_VAR 0 1
22884: PUSH
22885: LD_INT 22
22887: PUSH
22888: LD_OWVAR 2
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 2
22899: PUSH
22900: LD_INT 25
22902: PUSH
22903: LD_INT 5
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: LD_INT 25
22912: PUSH
22913: LD_INT 9
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PUSH
22920: LD_INT 25
22922: PUSH
22923: LD_INT 8
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: PPUSH
22940: CALL_OW 69
22944: PUSH
22945: FOR_IN
22946: IFFALSE 22962
// begin SetClass ( i , 1 ) ;
22948: LD_VAR 0 1
22952: PPUSH
22953: LD_INT 1
22955: PPUSH
22956: CALL_OW 336
// end ;
22960: GO 22945
22962: POP
22963: POP
// end ;
22964: PPOPN 1
22966: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22967: LD_EXP 37
22971: PUSH
22972: LD_EXP 41
22976: AND
22977: PUSH
22978: LD_OWVAR 65
22982: PUSH
22983: LD_INT 7
22985: LESS
22986: AND
22987: IFFALSE 23001
22989: GO 22991
22991: DISABLE
// begin enable ;
22992: ENABLE
// game_speed := 7 ;
22993: LD_ADDR_OWVAR 65
22997: PUSH
22998: LD_INT 7
23000: ST_TO_ADDR
// end ;
23001: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23002: LD_EXP 37
23006: PUSH
23007: LD_EXP 44
23011: AND
23012: IFFALSE 23214
23014: GO 23016
23016: DISABLE
23017: LD_INT 0
23019: PPUSH
23020: PPUSH
23021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23022: LD_ADDR_VAR 0 3
23026: PUSH
23027: LD_INT 81
23029: PUSH
23030: LD_OWVAR 2
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: LD_INT 21
23041: PUSH
23042: LD_INT 1
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PPUSH
23053: CALL_OW 69
23057: ST_TO_ADDR
// if not tmp then
23058: LD_VAR 0 3
23062: NOT
23063: IFFALSE 23067
// exit ;
23065: GO 23214
// if tmp > 5 then
23067: LD_VAR 0 3
23071: PUSH
23072: LD_INT 5
23074: GREATER
23075: IFFALSE 23087
// k := 5 else
23077: LD_ADDR_VAR 0 2
23081: PUSH
23082: LD_INT 5
23084: ST_TO_ADDR
23085: GO 23097
// k := tmp ;
23087: LD_ADDR_VAR 0 2
23091: PUSH
23092: LD_VAR 0 3
23096: ST_TO_ADDR
// for i := 1 to k do
23097: LD_ADDR_VAR 0 1
23101: PUSH
23102: DOUBLE
23103: LD_INT 1
23105: DEC
23106: ST_TO_ADDR
23107: LD_VAR 0 2
23111: PUSH
23112: FOR_TO
23113: IFFALSE 23212
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23115: LD_VAR 0 3
23119: PUSH
23120: LD_VAR 0 1
23124: ARRAY
23125: PPUSH
23126: LD_VAR 0 1
23130: PUSH
23131: LD_INT 4
23133: MOD
23134: PUSH
23135: LD_INT 1
23137: PLUS
23138: PPUSH
23139: CALL_OW 259
23143: PUSH
23144: LD_INT 10
23146: LESS
23147: IFFALSE 23210
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23149: LD_VAR 0 3
23153: PUSH
23154: LD_VAR 0 1
23158: ARRAY
23159: PPUSH
23160: LD_VAR 0 1
23164: PUSH
23165: LD_INT 4
23167: MOD
23168: PUSH
23169: LD_INT 1
23171: PLUS
23172: PPUSH
23173: LD_VAR 0 3
23177: PUSH
23178: LD_VAR 0 1
23182: ARRAY
23183: PPUSH
23184: LD_VAR 0 1
23188: PUSH
23189: LD_INT 4
23191: MOD
23192: PUSH
23193: LD_INT 1
23195: PLUS
23196: PPUSH
23197: CALL_OW 259
23201: PUSH
23202: LD_INT 1
23204: PLUS
23205: PPUSH
23206: CALL_OW 237
23210: GO 23112
23212: POP
23213: POP
// end ;
23214: PPOPN 3
23216: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23217: LD_EXP 37
23221: PUSH
23222: LD_EXP 45
23226: AND
23227: IFFALSE 23247
23229: GO 23231
23231: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23232: LD_INT 4
23234: PPUSH
23235: LD_OWVAR 2
23239: PPUSH
23240: LD_INT 0
23242: PPUSH
23243: CALL_OW 324
23247: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23248: LD_EXP 37
23252: PUSH
23253: LD_EXP 74
23257: AND
23258: IFFALSE 23278
23260: GO 23262
23262: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23263: LD_INT 19
23265: PPUSH
23266: LD_OWVAR 2
23270: PPUSH
23271: LD_INT 0
23273: PPUSH
23274: CALL_OW 324
23278: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23279: LD_EXP 37
23283: PUSH
23284: LD_EXP 46
23288: AND
23289: IFFALSE 23391
23291: GO 23293
23293: DISABLE
23294: LD_INT 0
23296: PPUSH
23297: PPUSH
// begin enable ;
23298: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23299: LD_ADDR_VAR 0 2
23303: PUSH
23304: LD_INT 22
23306: PUSH
23307: LD_OWVAR 2
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 2
23318: PUSH
23319: LD_INT 34
23321: PUSH
23322: LD_INT 11
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PUSH
23329: LD_INT 34
23331: PUSH
23332: LD_INT 30
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: LIST
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PPUSH
23348: CALL_OW 69
23352: ST_TO_ADDR
// if not tmp then
23353: LD_VAR 0 2
23357: NOT
23358: IFFALSE 23362
// exit ;
23360: GO 23391
// for i in tmp do
23362: LD_ADDR_VAR 0 1
23366: PUSH
23367: LD_VAR 0 2
23371: PUSH
23372: FOR_IN
23373: IFFALSE 23389
// begin SetLives ( i , 0 ) ;
23375: LD_VAR 0 1
23379: PPUSH
23380: LD_INT 0
23382: PPUSH
23383: CALL_OW 234
// end ;
23387: GO 23372
23389: POP
23390: POP
// end ;
23391: PPOPN 2
23393: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23394: LD_EXP 37
23398: PUSH
23399: LD_EXP 47
23403: AND
23404: IFFALSE 23424
23406: GO 23408
23408: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23409: LD_INT 32
23411: PPUSH
23412: LD_OWVAR 2
23416: PPUSH
23417: LD_INT 0
23419: PPUSH
23420: CALL_OW 324
23424: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23425: LD_EXP 37
23429: PUSH
23430: LD_EXP 48
23434: AND
23435: IFFALSE 23616
23437: GO 23439
23439: DISABLE
23440: LD_INT 0
23442: PPUSH
23443: PPUSH
23444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23445: LD_ADDR_VAR 0 2
23449: PUSH
23450: LD_INT 22
23452: PUSH
23453: LD_OWVAR 2
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 33
23464: PUSH
23465: LD_INT 3
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PPUSH
23476: CALL_OW 69
23480: ST_TO_ADDR
// if not tmp then
23481: LD_VAR 0 2
23485: NOT
23486: IFFALSE 23490
// exit ;
23488: GO 23616
// side := 0 ;
23490: LD_ADDR_VAR 0 3
23494: PUSH
23495: LD_INT 0
23497: ST_TO_ADDR
// for i := 1 to 8 do
23498: LD_ADDR_VAR 0 1
23502: PUSH
23503: DOUBLE
23504: LD_INT 1
23506: DEC
23507: ST_TO_ADDR
23508: LD_INT 8
23510: PUSH
23511: FOR_TO
23512: IFFALSE 23560
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23514: LD_OWVAR 2
23518: PUSH
23519: LD_VAR 0 1
23523: NONEQUAL
23524: PUSH
23525: LD_OWVAR 2
23529: PPUSH
23530: LD_VAR 0 1
23534: PPUSH
23535: CALL_OW 81
23539: PUSH
23540: LD_INT 2
23542: EQUAL
23543: AND
23544: IFFALSE 23558
// begin side := i ;
23546: LD_ADDR_VAR 0 3
23550: PUSH
23551: LD_VAR 0 1
23555: ST_TO_ADDR
// break ;
23556: GO 23560
// end ;
23558: GO 23511
23560: POP
23561: POP
// if not side then
23562: LD_VAR 0 3
23566: NOT
23567: IFFALSE 23571
// exit ;
23569: GO 23616
// for i := 1 to tmp do
23571: LD_ADDR_VAR 0 1
23575: PUSH
23576: DOUBLE
23577: LD_INT 1
23579: DEC
23580: ST_TO_ADDR
23581: LD_VAR 0 2
23585: PUSH
23586: FOR_TO
23587: IFFALSE 23614
// if Prob ( 60 ) then
23589: LD_INT 60
23591: PPUSH
23592: CALL_OW 13
23596: IFFALSE 23612
// SetSide ( i , side ) ;
23598: LD_VAR 0 1
23602: PPUSH
23603: LD_VAR 0 3
23607: PPUSH
23608: CALL_OW 235
23612: GO 23586
23614: POP
23615: POP
// end ;
23616: PPOPN 3
23618: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23619: LD_EXP 37
23623: PUSH
23624: LD_EXP 50
23628: AND
23629: IFFALSE 23748
23631: GO 23633
23633: DISABLE
23634: LD_INT 0
23636: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23637: LD_ADDR_VAR 0 1
23641: PUSH
23642: LD_INT 22
23644: PUSH
23645: LD_OWVAR 2
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: LD_INT 21
23656: PUSH
23657: LD_INT 1
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: LD_INT 3
23666: PUSH
23667: LD_INT 23
23669: PUSH
23670: LD_INT 0
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: LIST
23685: PPUSH
23686: CALL_OW 69
23690: PUSH
23691: FOR_IN
23692: IFFALSE 23746
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23694: LD_VAR 0 1
23698: PPUSH
23699: CALL_OW 257
23703: PUSH
23704: LD_INT 1
23706: PUSH
23707: LD_INT 2
23709: PUSH
23710: LD_INT 3
23712: PUSH
23713: LD_INT 4
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: IN
23722: IFFALSE 23744
// SetClass ( un , rand ( 1 , 4 ) ) ;
23724: LD_VAR 0 1
23728: PPUSH
23729: LD_INT 1
23731: PPUSH
23732: LD_INT 4
23734: PPUSH
23735: CALL_OW 12
23739: PPUSH
23740: CALL_OW 336
23744: GO 23691
23746: POP
23747: POP
// end ;
23748: PPOPN 1
23750: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23751: LD_EXP 37
23755: PUSH
23756: LD_EXP 49
23760: AND
23761: IFFALSE 23840
23763: GO 23765
23765: DISABLE
23766: LD_INT 0
23768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23769: LD_ADDR_VAR 0 1
23773: PUSH
23774: LD_INT 22
23776: PUSH
23777: LD_OWVAR 2
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 21
23788: PUSH
23789: LD_INT 3
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: PPUSH
23800: CALL_OW 69
23804: ST_TO_ADDR
// if not tmp then
23805: LD_VAR 0 1
23809: NOT
23810: IFFALSE 23814
// exit ;
23812: GO 23840
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23814: LD_VAR 0 1
23818: PUSH
23819: LD_INT 1
23821: PPUSH
23822: LD_VAR 0 1
23826: PPUSH
23827: CALL_OW 12
23831: ARRAY
23832: PPUSH
23833: LD_INT 100
23835: PPUSH
23836: CALL_OW 234
// end ;
23840: PPOPN 1
23842: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23843: LD_EXP 37
23847: PUSH
23848: LD_EXP 51
23852: AND
23853: IFFALSE 23951
23855: GO 23857
23857: DISABLE
23858: LD_INT 0
23860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23861: LD_ADDR_VAR 0 1
23865: PUSH
23866: LD_INT 22
23868: PUSH
23869: LD_OWVAR 2
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 21
23880: PUSH
23881: LD_INT 1
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PPUSH
23892: CALL_OW 69
23896: ST_TO_ADDR
// if not tmp then
23897: LD_VAR 0 1
23901: NOT
23902: IFFALSE 23906
// exit ;
23904: GO 23951
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23906: LD_VAR 0 1
23910: PUSH
23911: LD_INT 1
23913: PPUSH
23914: LD_VAR 0 1
23918: PPUSH
23919: CALL_OW 12
23923: ARRAY
23924: PPUSH
23925: LD_INT 1
23927: PPUSH
23928: LD_INT 4
23930: PPUSH
23931: CALL_OW 12
23935: PPUSH
23936: LD_INT 3000
23938: PPUSH
23939: LD_INT 9000
23941: PPUSH
23942: CALL_OW 12
23946: PPUSH
23947: CALL_OW 492
// end ;
23951: PPOPN 1
23953: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23954: LD_EXP 37
23958: PUSH
23959: LD_EXP 52
23963: AND
23964: IFFALSE 23984
23966: GO 23968
23968: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23969: LD_INT 1
23971: PPUSH
23972: LD_OWVAR 2
23976: PPUSH
23977: LD_INT 0
23979: PPUSH
23980: CALL_OW 324
23984: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23985: LD_EXP 37
23989: PUSH
23990: LD_EXP 53
23994: AND
23995: IFFALSE 24078
23997: GO 23999
23999: DISABLE
24000: LD_INT 0
24002: PPUSH
24003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24004: LD_ADDR_VAR 0 2
24008: PUSH
24009: LD_INT 22
24011: PUSH
24012: LD_OWVAR 2
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 21
24023: PUSH
24024: LD_INT 3
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PPUSH
24035: CALL_OW 69
24039: ST_TO_ADDR
// if not tmp then
24040: LD_VAR 0 2
24044: NOT
24045: IFFALSE 24049
// exit ;
24047: GO 24078
// for i in tmp do
24049: LD_ADDR_VAR 0 1
24053: PUSH
24054: LD_VAR 0 2
24058: PUSH
24059: FOR_IN
24060: IFFALSE 24076
// SetBLevel ( i , 10 ) ;
24062: LD_VAR 0 1
24066: PPUSH
24067: LD_INT 10
24069: PPUSH
24070: CALL_OW 241
24074: GO 24059
24076: POP
24077: POP
// end ;
24078: PPOPN 2
24080: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24081: LD_EXP 37
24085: PUSH
24086: LD_EXP 54
24090: AND
24091: IFFALSE 24202
24093: GO 24095
24095: DISABLE
24096: LD_INT 0
24098: PPUSH
24099: PPUSH
24100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24101: LD_ADDR_VAR 0 3
24105: PUSH
24106: LD_INT 22
24108: PUSH
24109: LD_OWVAR 2
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 25
24120: PUSH
24121: LD_INT 1
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PPUSH
24132: CALL_OW 69
24136: ST_TO_ADDR
// if not tmp then
24137: LD_VAR 0 3
24141: NOT
24142: IFFALSE 24146
// exit ;
24144: GO 24202
// un := tmp [ rand ( 1 , tmp ) ] ;
24146: LD_ADDR_VAR 0 2
24150: PUSH
24151: LD_VAR 0 3
24155: PUSH
24156: LD_INT 1
24158: PPUSH
24159: LD_VAR 0 3
24163: PPUSH
24164: CALL_OW 12
24168: ARRAY
24169: ST_TO_ADDR
// if Crawls ( un ) then
24170: LD_VAR 0 2
24174: PPUSH
24175: CALL_OW 318
24179: IFFALSE 24190
// ComWalk ( un ) ;
24181: LD_VAR 0 2
24185: PPUSH
24186: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24190: LD_VAR 0 2
24194: PPUSH
24195: LD_INT 5
24197: PPUSH
24198: CALL_OW 336
// end ;
24202: PPOPN 3
24204: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
24205: LD_EXP 37
24209: PUSH
24210: LD_EXP 55
24214: AND
24215: PUSH
24216: LD_OWVAR 67
24220: PUSH
24221: LD_INT 4
24223: LESS
24224: AND
24225: IFFALSE 24244
24227: GO 24229
24229: DISABLE
// begin Difficulty := Difficulty + 1 ;
24230: LD_ADDR_OWVAR 67
24234: PUSH
24235: LD_OWVAR 67
24239: PUSH
24240: LD_INT 1
24242: PLUS
24243: ST_TO_ADDR
// end ;
24244: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24245: LD_EXP 37
24249: PUSH
24250: LD_EXP 56
24254: AND
24255: IFFALSE 24358
24257: GO 24259
24259: DISABLE
24260: LD_INT 0
24262: PPUSH
// begin for i := 1 to 5 do
24263: LD_ADDR_VAR 0 1
24267: PUSH
24268: DOUBLE
24269: LD_INT 1
24271: DEC
24272: ST_TO_ADDR
24273: LD_INT 5
24275: PUSH
24276: FOR_TO
24277: IFFALSE 24356
// begin uc_nation := nation_nature ;
24279: LD_ADDR_OWVAR 21
24283: PUSH
24284: LD_INT 0
24286: ST_TO_ADDR
// uc_side := 0 ;
24287: LD_ADDR_OWVAR 20
24291: PUSH
24292: LD_INT 0
24294: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24295: LD_ADDR_OWVAR 29
24299: PUSH
24300: LD_INT 12
24302: PUSH
24303: LD_INT 12
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: ST_TO_ADDR
// hc_agressivity := 20 ;
24310: LD_ADDR_OWVAR 35
24314: PUSH
24315: LD_INT 20
24317: ST_TO_ADDR
// hc_class := class_tiger ;
24318: LD_ADDR_OWVAR 28
24322: PUSH
24323: LD_INT 14
24325: ST_TO_ADDR
// hc_gallery :=  ;
24326: LD_ADDR_OWVAR 33
24330: PUSH
24331: LD_STRING 
24333: ST_TO_ADDR
// hc_name :=  ;
24334: LD_ADDR_OWVAR 26
24338: PUSH
24339: LD_STRING 
24341: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24342: CALL_OW 44
24346: PPUSH
24347: LD_INT 0
24349: PPUSH
24350: CALL_OW 51
// end ;
24354: GO 24276
24356: POP
24357: POP
// end ;
24358: PPOPN 1
24360: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24361: LD_EXP 37
24365: PUSH
24366: LD_EXP 57
24370: AND
24371: IFFALSE 24380
24373: GO 24375
24375: DISABLE
// StreamSibBomb ;
24376: CALL 24381 0 0
24380: END
// export function StreamSibBomb ; var i , x , y ; begin
24381: LD_INT 0
24383: PPUSH
24384: PPUSH
24385: PPUSH
24386: PPUSH
// result := false ;
24387: LD_ADDR_VAR 0 1
24391: PUSH
24392: LD_INT 0
24394: ST_TO_ADDR
// for i := 1 to 16 do
24395: LD_ADDR_VAR 0 2
24399: PUSH
24400: DOUBLE
24401: LD_INT 1
24403: DEC
24404: ST_TO_ADDR
24405: LD_INT 16
24407: PUSH
24408: FOR_TO
24409: IFFALSE 24608
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24411: LD_ADDR_VAR 0 3
24415: PUSH
24416: LD_INT 10
24418: PUSH
24419: LD_INT 20
24421: PUSH
24422: LD_INT 30
24424: PUSH
24425: LD_INT 40
24427: PUSH
24428: LD_INT 50
24430: PUSH
24431: LD_INT 60
24433: PUSH
24434: LD_INT 70
24436: PUSH
24437: LD_INT 80
24439: PUSH
24440: LD_INT 90
24442: PUSH
24443: LD_INT 100
24445: PUSH
24446: LD_INT 110
24448: PUSH
24449: LD_INT 120
24451: PUSH
24452: LD_INT 130
24454: PUSH
24455: LD_INT 140
24457: PUSH
24458: LD_INT 150
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 1
24480: PPUSH
24481: LD_INT 15
24483: PPUSH
24484: CALL_OW 12
24488: ARRAY
24489: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24490: LD_ADDR_VAR 0 4
24494: PUSH
24495: LD_INT 10
24497: PUSH
24498: LD_INT 20
24500: PUSH
24501: LD_INT 30
24503: PUSH
24504: LD_INT 40
24506: PUSH
24507: LD_INT 50
24509: PUSH
24510: LD_INT 60
24512: PUSH
24513: LD_INT 70
24515: PUSH
24516: LD_INT 80
24518: PUSH
24519: LD_INT 90
24521: PUSH
24522: LD_INT 100
24524: PUSH
24525: LD_INT 110
24527: PUSH
24528: LD_INT 120
24530: PUSH
24531: LD_INT 130
24533: PUSH
24534: LD_INT 140
24536: PUSH
24537: LD_INT 150
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 1
24559: PPUSH
24560: LD_INT 15
24562: PPUSH
24563: CALL_OW 12
24567: ARRAY
24568: ST_TO_ADDR
// if ValidHex ( x , y ) then
24569: LD_VAR 0 3
24573: PPUSH
24574: LD_VAR 0 4
24578: PPUSH
24579: CALL_OW 488
24583: IFFALSE 24606
// begin result := [ x , y ] ;
24585: LD_ADDR_VAR 0 1
24589: PUSH
24590: LD_VAR 0 3
24594: PUSH
24595: LD_VAR 0 4
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: ST_TO_ADDR
// break ;
24604: GO 24608
// end ; end ;
24606: GO 24408
24608: POP
24609: POP
// if result then
24610: LD_VAR 0 1
24614: IFFALSE 24674
// begin ToLua ( playSibBomb() ) ;
24616: LD_STRING playSibBomb()
24618: PPUSH
24619: CALL_OW 559
// wait ( 0 0$14 ) ;
24623: LD_INT 490
24625: PPUSH
24626: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24630: LD_VAR 0 1
24634: PUSH
24635: LD_INT 1
24637: ARRAY
24638: PPUSH
24639: LD_VAR 0 1
24643: PUSH
24644: LD_INT 2
24646: ARRAY
24647: PPUSH
24648: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24652: LD_VAR 0 1
24656: PUSH
24657: LD_INT 1
24659: ARRAY
24660: PPUSH
24661: LD_VAR 0 1
24665: PUSH
24666: LD_INT 2
24668: ARRAY
24669: PPUSH
24670: CALL_OW 429
// end ; end ;
24674: LD_VAR 0 1
24678: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24679: LD_EXP 37
24683: PUSH
24684: LD_EXP 59
24688: AND
24689: IFFALSE 24701
24691: GO 24693
24693: DISABLE
// YouLost (  ) ;
24694: LD_STRING 
24696: PPUSH
24697: CALL_OW 104
24701: END
// every 0 0$1 trigger StreamModeActive and sFog do
24702: LD_EXP 37
24706: PUSH
24707: LD_EXP 58
24711: AND
24712: IFFALSE 24726
24714: GO 24716
24716: DISABLE
// FogOff ( your_side ) ;
24717: LD_OWVAR 2
24721: PPUSH
24722: CALL_OW 344
24726: END
// every 0 0$1 trigger StreamModeActive and sSun do
24727: LD_EXP 37
24731: PUSH
24732: LD_EXP 60
24736: AND
24737: IFFALSE 24765
24739: GO 24741
24741: DISABLE
// begin solar_recharge_percent := 0 ;
24742: LD_ADDR_OWVAR 79
24746: PUSH
24747: LD_INT 0
24749: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24750: LD_INT 10500
24752: PPUSH
24753: CALL_OW 67
// solar_recharge_percent := 100 ;
24757: LD_ADDR_OWVAR 79
24761: PUSH
24762: LD_INT 100
24764: ST_TO_ADDR
// end ;
24765: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24766: LD_EXP 37
24770: PUSH
24771: LD_EXP 61
24775: AND
24776: IFFALSE 25015
24778: GO 24780
24780: DISABLE
24781: LD_INT 0
24783: PPUSH
24784: PPUSH
24785: PPUSH
// begin tmp := [ ] ;
24786: LD_ADDR_VAR 0 3
24790: PUSH
24791: EMPTY
24792: ST_TO_ADDR
// for i := 1 to 6 do
24793: LD_ADDR_VAR 0 1
24797: PUSH
24798: DOUBLE
24799: LD_INT 1
24801: DEC
24802: ST_TO_ADDR
24803: LD_INT 6
24805: PUSH
24806: FOR_TO
24807: IFFALSE 24912
// begin uc_nation := nation_nature ;
24809: LD_ADDR_OWVAR 21
24813: PUSH
24814: LD_INT 0
24816: ST_TO_ADDR
// uc_side := 0 ;
24817: LD_ADDR_OWVAR 20
24821: PUSH
24822: LD_INT 0
24824: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24825: LD_ADDR_OWVAR 29
24829: PUSH
24830: LD_INT 12
24832: PUSH
24833: LD_INT 12
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: ST_TO_ADDR
// hc_agressivity := 20 ;
24840: LD_ADDR_OWVAR 35
24844: PUSH
24845: LD_INT 20
24847: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24848: LD_ADDR_OWVAR 28
24852: PUSH
24853: LD_INT 17
24855: ST_TO_ADDR
// hc_gallery :=  ;
24856: LD_ADDR_OWVAR 33
24860: PUSH
24861: LD_STRING 
24863: ST_TO_ADDR
// hc_name :=  ;
24864: LD_ADDR_OWVAR 26
24868: PUSH
24869: LD_STRING 
24871: ST_TO_ADDR
// un := CreateHuman ;
24872: LD_ADDR_VAR 0 2
24876: PUSH
24877: CALL_OW 44
24881: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24882: LD_VAR 0 2
24886: PPUSH
24887: LD_INT 1
24889: PPUSH
24890: CALL_OW 51
// tmp := tmp ^ un ;
24894: LD_ADDR_VAR 0 3
24898: PUSH
24899: LD_VAR 0 3
24903: PUSH
24904: LD_VAR 0 2
24908: ADD
24909: ST_TO_ADDR
// end ;
24910: GO 24806
24912: POP
24913: POP
// repeat wait ( 0 0$1 ) ;
24914: LD_INT 35
24916: PPUSH
24917: CALL_OW 67
// for un in tmp do
24921: LD_ADDR_VAR 0 2
24925: PUSH
24926: LD_VAR 0 3
24930: PUSH
24931: FOR_IN
24932: IFFALSE 25006
// begin if IsDead ( un ) then
24934: LD_VAR 0 2
24938: PPUSH
24939: CALL_OW 301
24943: IFFALSE 24963
// begin tmp := tmp diff un ;
24945: LD_ADDR_VAR 0 3
24949: PUSH
24950: LD_VAR 0 3
24954: PUSH
24955: LD_VAR 0 2
24959: DIFF
24960: ST_TO_ADDR
// continue ;
24961: GO 24931
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24963: LD_VAR 0 2
24967: PPUSH
24968: LD_INT 3
24970: PUSH
24971: LD_INT 22
24973: PUSH
24974: LD_INT 0
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PPUSH
24985: CALL_OW 69
24989: PPUSH
24990: LD_VAR 0 2
24994: PPUSH
24995: CALL_OW 74
24999: PPUSH
25000: CALL_OW 115
// end ;
25004: GO 24931
25006: POP
25007: POP
// until not tmp ;
25008: LD_VAR 0 3
25012: NOT
25013: IFFALSE 24914
// end ;
25015: PPOPN 3
25017: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25018: LD_EXP 37
25022: PUSH
25023: LD_EXP 62
25027: AND
25028: IFFALSE 25082
25030: GO 25032
25032: DISABLE
// begin ToLua ( displayTroll(); ) ;
25033: LD_STRING displayTroll();
25035: PPUSH
25036: CALL_OW 559
// wait ( 3 3$00 ) ;
25040: LD_INT 6300
25042: PPUSH
25043: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25047: LD_STRING hideTroll();
25049: PPUSH
25050: CALL_OW 559
// wait ( 1 1$00 ) ;
25054: LD_INT 2100
25056: PPUSH
25057: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25061: LD_STRING displayTroll();
25063: PPUSH
25064: CALL_OW 559
// wait ( 1 1$00 ) ;
25068: LD_INT 2100
25070: PPUSH
25071: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25075: LD_STRING hideTroll();
25077: PPUSH
25078: CALL_OW 559
// end ;
25082: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25083: LD_EXP 37
25087: PUSH
25088: LD_EXP 63
25092: AND
25093: IFFALSE 25156
25095: GO 25097
25097: DISABLE
25098: LD_INT 0
25100: PPUSH
// begin p := 0 ;
25101: LD_ADDR_VAR 0 1
25105: PUSH
25106: LD_INT 0
25108: ST_TO_ADDR
// repeat game_speed := 1 ;
25109: LD_ADDR_OWVAR 65
25113: PUSH
25114: LD_INT 1
25116: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25117: LD_INT 35
25119: PPUSH
25120: CALL_OW 67
// p := p + 1 ;
25124: LD_ADDR_VAR 0 1
25128: PUSH
25129: LD_VAR 0 1
25133: PUSH
25134: LD_INT 1
25136: PLUS
25137: ST_TO_ADDR
// until p >= 60 ;
25138: LD_VAR 0 1
25142: PUSH
25143: LD_INT 60
25145: GREATEREQUAL
25146: IFFALSE 25109
// game_speed := 4 ;
25148: LD_ADDR_OWVAR 65
25152: PUSH
25153: LD_INT 4
25155: ST_TO_ADDR
// end ;
25156: PPOPN 1
25158: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25159: LD_EXP 37
25163: PUSH
25164: LD_EXP 64
25168: AND
25169: IFFALSE 25315
25171: GO 25173
25173: DISABLE
25174: LD_INT 0
25176: PPUSH
25177: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25178: LD_ADDR_VAR 0 1
25182: PUSH
25183: LD_INT 22
25185: PUSH
25186: LD_OWVAR 2
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PUSH
25195: LD_INT 2
25197: PUSH
25198: LD_INT 30
25200: PUSH
25201: LD_INT 0
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 30
25210: PUSH
25211: LD_INT 1
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: LIST
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PPUSH
25227: CALL_OW 69
25231: ST_TO_ADDR
// if not depot then
25232: LD_VAR 0 1
25236: NOT
25237: IFFALSE 25241
// exit ;
25239: GO 25315
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25241: LD_ADDR_VAR 0 2
25245: PUSH
25246: LD_VAR 0 1
25250: PUSH
25251: LD_INT 1
25253: PPUSH
25254: LD_VAR 0 1
25258: PPUSH
25259: CALL_OW 12
25263: ARRAY
25264: PPUSH
25265: CALL_OW 274
25269: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25270: LD_VAR 0 2
25274: PPUSH
25275: LD_INT 1
25277: PPUSH
25278: LD_INT 0
25280: PPUSH
25281: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25285: LD_VAR 0 2
25289: PPUSH
25290: LD_INT 2
25292: PPUSH
25293: LD_INT 0
25295: PPUSH
25296: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25300: LD_VAR 0 2
25304: PPUSH
25305: LD_INT 3
25307: PPUSH
25308: LD_INT 0
25310: PPUSH
25311: CALL_OW 277
// end ;
25315: PPOPN 2
25317: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25318: LD_EXP 37
25322: PUSH
25323: LD_EXP 65
25327: AND
25328: IFFALSE 25425
25330: GO 25332
25332: DISABLE
25333: LD_INT 0
25335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25336: LD_ADDR_VAR 0 1
25340: PUSH
25341: LD_INT 22
25343: PUSH
25344: LD_OWVAR 2
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 21
25355: PUSH
25356: LD_INT 1
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 3
25365: PUSH
25366: LD_INT 23
25368: PUSH
25369: LD_INT 0
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: LIST
25384: PPUSH
25385: CALL_OW 69
25389: ST_TO_ADDR
// if not tmp then
25390: LD_VAR 0 1
25394: NOT
25395: IFFALSE 25399
// exit ;
25397: GO 25425
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25399: LD_VAR 0 1
25403: PUSH
25404: LD_INT 1
25406: PPUSH
25407: LD_VAR 0 1
25411: PPUSH
25412: CALL_OW 12
25416: ARRAY
25417: PPUSH
25418: LD_INT 200
25420: PPUSH
25421: CALL_OW 234
// end ;
25425: PPOPN 1
25427: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25428: LD_EXP 37
25432: PUSH
25433: LD_EXP 66
25437: AND
25438: IFFALSE 25517
25440: GO 25442
25442: DISABLE
25443: LD_INT 0
25445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25446: LD_ADDR_VAR 0 1
25450: PUSH
25451: LD_INT 22
25453: PUSH
25454: LD_OWVAR 2
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: LD_INT 21
25465: PUSH
25466: LD_INT 2
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PPUSH
25477: CALL_OW 69
25481: ST_TO_ADDR
// if not tmp then
25482: LD_VAR 0 1
25486: NOT
25487: IFFALSE 25491
// exit ;
25489: GO 25517
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25491: LD_VAR 0 1
25495: PUSH
25496: LD_INT 1
25498: PPUSH
25499: LD_VAR 0 1
25503: PPUSH
25504: CALL_OW 12
25508: ARRAY
25509: PPUSH
25510: LD_INT 60
25512: PPUSH
25513: CALL_OW 234
// end ;
25517: PPOPN 1
25519: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25520: LD_EXP 37
25524: PUSH
25525: LD_EXP 67
25529: AND
25530: IFFALSE 25629
25532: GO 25534
25534: DISABLE
25535: LD_INT 0
25537: PPUSH
25538: PPUSH
// begin enable ;
25539: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25540: LD_ADDR_VAR 0 1
25544: PUSH
25545: LD_INT 22
25547: PUSH
25548: LD_OWVAR 2
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 61
25559: PUSH
25560: EMPTY
25561: LIST
25562: PUSH
25563: LD_INT 33
25565: PUSH
25566: LD_INT 2
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: LIST
25577: PPUSH
25578: CALL_OW 69
25582: ST_TO_ADDR
// if not tmp then
25583: LD_VAR 0 1
25587: NOT
25588: IFFALSE 25592
// exit ;
25590: GO 25629
// for i in tmp do
25592: LD_ADDR_VAR 0 2
25596: PUSH
25597: LD_VAR 0 1
25601: PUSH
25602: FOR_IN
25603: IFFALSE 25627
// if IsControledBy ( i ) then
25605: LD_VAR 0 2
25609: PPUSH
25610: CALL_OW 312
25614: IFFALSE 25625
// ComUnlink ( i ) ;
25616: LD_VAR 0 2
25620: PPUSH
25621: CALL_OW 136
25625: GO 25602
25627: POP
25628: POP
// end ;
25629: PPOPN 2
25631: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25632: LD_EXP 37
25636: PUSH
25637: LD_EXP 68
25641: AND
25642: IFFALSE 25782
25644: GO 25646
25646: DISABLE
25647: LD_INT 0
25649: PPUSH
25650: PPUSH
// begin ToLua ( displayPowell(); ) ;
25651: LD_STRING displayPowell();
25653: PPUSH
25654: CALL_OW 559
// uc_side := 0 ;
25658: LD_ADDR_OWVAR 20
25662: PUSH
25663: LD_INT 0
25665: ST_TO_ADDR
// uc_nation := 2 ;
25666: LD_ADDR_OWVAR 21
25670: PUSH
25671: LD_INT 2
25673: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25674: LD_ADDR_OWVAR 37
25678: PUSH
25679: LD_INT 14
25681: ST_TO_ADDR
// vc_engine := engine_siberite ;
25682: LD_ADDR_OWVAR 39
25686: PUSH
25687: LD_INT 3
25689: ST_TO_ADDR
// vc_control := control_apeman ;
25690: LD_ADDR_OWVAR 38
25694: PUSH
25695: LD_INT 5
25697: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25698: LD_ADDR_OWVAR 40
25702: PUSH
25703: LD_INT 29
25705: ST_TO_ADDR
// un := CreateVehicle ;
25706: LD_ADDR_VAR 0 2
25710: PUSH
25711: CALL_OW 45
25715: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25716: LD_VAR 0 2
25720: PPUSH
25721: LD_INT 1
25723: PPUSH
25724: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25728: LD_INT 35
25730: PPUSH
25731: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25735: LD_VAR 0 2
25739: PPUSH
25740: LD_INT 22
25742: PUSH
25743: LD_OWVAR 2
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PPUSH
25752: CALL_OW 69
25756: PPUSH
25757: LD_VAR 0 2
25761: PPUSH
25762: CALL_OW 74
25766: PPUSH
25767: CALL_OW 115
// until IsDead ( un ) ;
25771: LD_VAR 0 2
25775: PPUSH
25776: CALL_OW 301
25780: IFFALSE 25728
// end ;
25782: PPOPN 2
25784: END
// every 0 0$1 trigger StreamModeActive and sStu do
25785: LD_EXP 37
25789: PUSH
25790: LD_EXP 76
25794: AND
25795: IFFALSE 25811
25797: GO 25799
25799: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25800: LD_STRING displayStucuk();
25802: PPUSH
25803: CALL_OW 559
// ResetFog ;
25807: CALL_OW 335
// end ;
25811: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25812: LD_EXP 37
25816: PUSH
25817: LD_EXP 69
25821: AND
25822: IFFALSE 25963
25824: GO 25826
25826: DISABLE
25827: LD_INT 0
25829: PPUSH
25830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25831: LD_ADDR_VAR 0 2
25835: PUSH
25836: LD_INT 22
25838: PUSH
25839: LD_OWVAR 2
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: LD_INT 21
25850: PUSH
25851: LD_INT 1
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PPUSH
25862: CALL_OW 69
25866: ST_TO_ADDR
// if not tmp then
25867: LD_VAR 0 2
25871: NOT
25872: IFFALSE 25876
// exit ;
25874: GO 25963
// un := tmp [ rand ( 1 , tmp ) ] ;
25876: LD_ADDR_VAR 0 1
25880: PUSH
25881: LD_VAR 0 2
25885: PUSH
25886: LD_INT 1
25888: PPUSH
25889: LD_VAR 0 2
25893: PPUSH
25894: CALL_OW 12
25898: ARRAY
25899: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25900: LD_VAR 0 1
25904: PPUSH
25905: LD_INT 0
25907: PPUSH
25908: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25912: LD_VAR 0 1
25916: PPUSH
25917: LD_OWVAR 3
25921: PUSH
25922: LD_VAR 0 1
25926: DIFF
25927: PPUSH
25928: LD_VAR 0 1
25932: PPUSH
25933: CALL_OW 74
25937: PPUSH
25938: CALL_OW 115
// wait ( 0 0$20 ) ;
25942: LD_INT 700
25944: PPUSH
25945: CALL_OW 67
// SetSide ( un , your_side ) ;
25949: LD_VAR 0 1
25953: PPUSH
25954: LD_OWVAR 2
25958: PPUSH
25959: CALL_OW 235
// end ;
25963: PPOPN 2
25965: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25966: LD_EXP 37
25970: PUSH
25971: LD_EXP 70
25975: AND
25976: IFFALSE 26082
25978: GO 25980
25980: DISABLE
25981: LD_INT 0
25983: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25984: LD_ADDR_VAR 0 1
25988: PUSH
25989: LD_INT 22
25991: PUSH
25992: LD_OWVAR 2
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 2
26003: PUSH
26004: LD_INT 30
26006: PUSH
26007: LD_INT 0
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 30
26016: PUSH
26017: LD_INT 1
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: LIST
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PPUSH
26033: CALL_OW 69
26037: ST_TO_ADDR
// if not depot then
26038: LD_VAR 0 1
26042: NOT
26043: IFFALSE 26047
// exit ;
26045: GO 26082
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26047: LD_VAR 0 1
26051: PUSH
26052: LD_INT 1
26054: ARRAY
26055: PPUSH
26056: CALL_OW 250
26060: PPUSH
26061: LD_VAR 0 1
26065: PUSH
26066: LD_INT 1
26068: ARRAY
26069: PPUSH
26070: CALL_OW 251
26074: PPUSH
26075: LD_INT 70
26077: PPUSH
26078: CALL_OW 495
// end ;
26082: PPOPN 1
26084: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26085: LD_EXP 37
26089: PUSH
26090: LD_EXP 71
26094: AND
26095: IFFALSE 26306
26097: GO 26099
26099: DISABLE
26100: LD_INT 0
26102: PPUSH
26103: PPUSH
26104: PPUSH
26105: PPUSH
26106: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26107: LD_ADDR_VAR 0 5
26111: PUSH
26112: LD_INT 22
26114: PUSH
26115: LD_OWVAR 2
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: LD_INT 21
26126: PUSH
26127: LD_INT 1
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PPUSH
26138: CALL_OW 69
26142: ST_TO_ADDR
// if not tmp then
26143: LD_VAR 0 5
26147: NOT
26148: IFFALSE 26152
// exit ;
26150: GO 26306
// for i in tmp do
26152: LD_ADDR_VAR 0 1
26156: PUSH
26157: LD_VAR 0 5
26161: PUSH
26162: FOR_IN
26163: IFFALSE 26304
// begin d := rand ( 0 , 5 ) ;
26165: LD_ADDR_VAR 0 4
26169: PUSH
26170: LD_INT 0
26172: PPUSH
26173: LD_INT 5
26175: PPUSH
26176: CALL_OW 12
26180: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26181: LD_ADDR_VAR 0 2
26185: PUSH
26186: LD_VAR 0 1
26190: PPUSH
26191: CALL_OW 250
26195: PPUSH
26196: LD_VAR 0 4
26200: PPUSH
26201: LD_INT 3
26203: PPUSH
26204: LD_INT 12
26206: PPUSH
26207: CALL_OW 12
26211: PPUSH
26212: CALL_OW 272
26216: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26217: LD_ADDR_VAR 0 3
26221: PUSH
26222: LD_VAR 0 1
26226: PPUSH
26227: CALL_OW 251
26231: PPUSH
26232: LD_VAR 0 4
26236: PPUSH
26237: LD_INT 3
26239: PPUSH
26240: LD_INT 12
26242: PPUSH
26243: CALL_OW 12
26247: PPUSH
26248: CALL_OW 273
26252: ST_TO_ADDR
// if ValidHex ( x , y ) then
26253: LD_VAR 0 2
26257: PPUSH
26258: LD_VAR 0 3
26262: PPUSH
26263: CALL_OW 488
26267: IFFALSE 26302
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26269: LD_VAR 0 1
26273: PPUSH
26274: LD_VAR 0 2
26278: PPUSH
26279: LD_VAR 0 3
26283: PPUSH
26284: LD_INT 3
26286: PPUSH
26287: LD_INT 6
26289: PPUSH
26290: CALL_OW 12
26294: PPUSH
26295: LD_INT 1
26297: PPUSH
26298: CALL_OW 483
// end ;
26302: GO 26162
26304: POP
26305: POP
// end ;
26306: PPOPN 5
26308: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26309: LD_EXP 37
26313: PUSH
26314: LD_EXP 72
26318: AND
26319: IFFALSE 26413
26321: GO 26323
26323: DISABLE
26324: LD_INT 0
26326: PPUSH
26327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26328: LD_ADDR_VAR 0 2
26332: PUSH
26333: LD_INT 22
26335: PUSH
26336: LD_OWVAR 2
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PUSH
26345: LD_INT 32
26347: PUSH
26348: LD_INT 1
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 21
26357: PUSH
26358: LD_INT 2
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: LIST
26369: PPUSH
26370: CALL_OW 69
26374: ST_TO_ADDR
// if not tmp then
26375: LD_VAR 0 2
26379: NOT
26380: IFFALSE 26384
// exit ;
26382: GO 26413
// for i in tmp do
26384: LD_ADDR_VAR 0 1
26388: PUSH
26389: LD_VAR 0 2
26393: PUSH
26394: FOR_IN
26395: IFFALSE 26411
// SetFuel ( i , 0 ) ;
26397: LD_VAR 0 1
26401: PPUSH
26402: LD_INT 0
26404: PPUSH
26405: CALL_OW 240
26409: GO 26394
26411: POP
26412: POP
// end ;
26413: PPOPN 2
26415: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26416: LD_EXP 37
26420: PUSH
26421: LD_EXP 73
26425: AND
26426: IFFALSE 26492
26428: GO 26430
26430: DISABLE
26431: LD_INT 0
26433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26434: LD_ADDR_VAR 0 1
26438: PUSH
26439: LD_INT 22
26441: PUSH
26442: LD_OWVAR 2
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 30
26453: PUSH
26454: LD_INT 29
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PPUSH
26465: CALL_OW 69
26469: ST_TO_ADDR
// if not tmp then
26470: LD_VAR 0 1
26474: NOT
26475: IFFALSE 26479
// exit ;
26477: GO 26492
// DestroyUnit ( tmp [ 1 ] ) ;
26479: LD_VAR 0 1
26483: PUSH
26484: LD_INT 1
26486: ARRAY
26487: PPUSH
26488: CALL_OW 65
// end ;
26492: PPOPN 1
26494: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26495: LD_EXP 37
26499: PUSH
26500: LD_EXP 75
26504: AND
26505: IFFALSE 26634
26507: GO 26509
26509: DISABLE
26510: LD_INT 0
26512: PPUSH
// begin uc_side := 0 ;
26513: LD_ADDR_OWVAR 20
26517: PUSH
26518: LD_INT 0
26520: ST_TO_ADDR
// uc_nation := nation_arabian ;
26521: LD_ADDR_OWVAR 21
26525: PUSH
26526: LD_INT 2
26528: ST_TO_ADDR
// hc_gallery :=  ;
26529: LD_ADDR_OWVAR 33
26533: PUSH
26534: LD_STRING 
26536: ST_TO_ADDR
// hc_name :=  ;
26537: LD_ADDR_OWVAR 26
26541: PUSH
26542: LD_STRING 
26544: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26545: LD_INT 1
26547: PPUSH
26548: LD_INT 11
26550: PPUSH
26551: LD_INT 10
26553: PPUSH
26554: CALL_OW 380
// un := CreateHuman ;
26558: LD_ADDR_VAR 0 1
26562: PUSH
26563: CALL_OW 44
26567: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26568: LD_VAR 0 1
26572: PPUSH
26573: LD_INT 1
26575: PPUSH
26576: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26580: LD_INT 35
26582: PPUSH
26583: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26587: LD_VAR 0 1
26591: PPUSH
26592: LD_INT 22
26594: PUSH
26595: LD_OWVAR 2
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PPUSH
26604: CALL_OW 69
26608: PPUSH
26609: LD_VAR 0 1
26613: PPUSH
26614: CALL_OW 74
26618: PPUSH
26619: CALL_OW 115
// until IsDead ( un ) ;
26623: LD_VAR 0 1
26627: PPUSH
26628: CALL_OW 301
26632: IFFALSE 26580
// end ;
26634: PPOPN 1
26636: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26637: LD_EXP 37
26641: PUSH
26642: LD_EXP 77
26646: AND
26647: IFFALSE 26659
26649: GO 26651
26651: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26652: LD_STRING earthquake(getX(game), 0, 32)
26654: PPUSH
26655: CALL_OW 559
26659: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26660: LD_EXP 37
26664: PUSH
26665: LD_EXP 78
26669: AND
26670: IFFALSE 26761
26672: GO 26674
26674: DISABLE
26675: LD_INT 0
26677: PPUSH
// begin enable ;
26678: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26679: LD_ADDR_VAR 0 1
26683: PUSH
26684: LD_INT 22
26686: PUSH
26687: LD_OWVAR 2
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 21
26698: PUSH
26699: LD_INT 2
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 33
26708: PUSH
26709: LD_INT 3
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: LIST
26720: PPUSH
26721: CALL_OW 69
26725: ST_TO_ADDR
// if not tmp then
26726: LD_VAR 0 1
26730: NOT
26731: IFFALSE 26735
// exit ;
26733: GO 26761
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26735: LD_VAR 0 1
26739: PUSH
26740: LD_INT 1
26742: PPUSH
26743: LD_VAR 0 1
26747: PPUSH
26748: CALL_OW 12
26752: ARRAY
26753: PPUSH
26754: LD_INT 1
26756: PPUSH
26757: CALL_OW 234
// end ;
26761: PPOPN 1
26763: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26764: LD_EXP 37
26768: PUSH
26769: LD_EXP 79
26773: AND
26774: IFFALSE 26915
26776: GO 26778
26778: DISABLE
26779: LD_INT 0
26781: PPUSH
26782: PPUSH
26783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26784: LD_ADDR_VAR 0 3
26788: PUSH
26789: LD_INT 22
26791: PUSH
26792: LD_OWVAR 2
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 25
26803: PUSH
26804: LD_INT 1
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PPUSH
26815: CALL_OW 69
26819: ST_TO_ADDR
// if not tmp then
26820: LD_VAR 0 3
26824: NOT
26825: IFFALSE 26829
// exit ;
26827: GO 26915
// un := tmp [ rand ( 1 , tmp ) ] ;
26829: LD_ADDR_VAR 0 2
26833: PUSH
26834: LD_VAR 0 3
26838: PUSH
26839: LD_INT 1
26841: PPUSH
26842: LD_VAR 0 3
26846: PPUSH
26847: CALL_OW 12
26851: ARRAY
26852: ST_TO_ADDR
// if Crawls ( un ) then
26853: LD_VAR 0 2
26857: PPUSH
26858: CALL_OW 318
26862: IFFALSE 26873
// ComWalk ( un ) ;
26864: LD_VAR 0 2
26868: PPUSH
26869: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26873: LD_VAR 0 2
26877: PPUSH
26878: LD_INT 9
26880: PPUSH
26881: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26885: LD_INT 28
26887: PPUSH
26888: LD_OWVAR 2
26892: PPUSH
26893: LD_INT 2
26895: PPUSH
26896: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26900: LD_INT 29
26902: PPUSH
26903: LD_OWVAR 2
26907: PPUSH
26908: LD_INT 2
26910: PPUSH
26911: CALL_OW 322
// end ;
26915: PPOPN 3
26917: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26918: LD_EXP 37
26922: PUSH
26923: LD_EXP 80
26927: AND
26928: IFFALSE 27039
26930: GO 26932
26932: DISABLE
26933: LD_INT 0
26935: PPUSH
26936: PPUSH
26937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26938: LD_ADDR_VAR 0 3
26942: PUSH
26943: LD_INT 22
26945: PUSH
26946: LD_OWVAR 2
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 25
26957: PUSH
26958: LD_INT 1
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PPUSH
26969: CALL_OW 69
26973: ST_TO_ADDR
// if not tmp then
26974: LD_VAR 0 3
26978: NOT
26979: IFFALSE 26983
// exit ;
26981: GO 27039
// un := tmp [ rand ( 1 , tmp ) ] ;
26983: LD_ADDR_VAR 0 2
26987: PUSH
26988: LD_VAR 0 3
26992: PUSH
26993: LD_INT 1
26995: PPUSH
26996: LD_VAR 0 3
27000: PPUSH
27001: CALL_OW 12
27005: ARRAY
27006: ST_TO_ADDR
// if Crawls ( un ) then
27007: LD_VAR 0 2
27011: PPUSH
27012: CALL_OW 318
27016: IFFALSE 27027
// ComWalk ( un ) ;
27018: LD_VAR 0 2
27022: PPUSH
27023: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27027: LD_VAR 0 2
27031: PPUSH
27032: LD_INT 8
27034: PPUSH
27035: CALL_OW 336
// end ;
27039: PPOPN 3
27041: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27042: LD_EXP 37
27046: PUSH
27047: LD_EXP 81
27051: AND
27052: IFFALSE 27196
27054: GO 27056
27056: DISABLE
27057: LD_INT 0
27059: PPUSH
27060: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27061: LD_ADDR_VAR 0 2
27065: PUSH
27066: LD_INT 22
27068: PUSH
27069: LD_OWVAR 2
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 21
27080: PUSH
27081: LD_INT 2
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 2
27090: PUSH
27091: LD_INT 34
27093: PUSH
27094: LD_INT 12
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 34
27103: PUSH
27104: LD_INT 51
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 34
27113: PUSH
27114: LD_INT 32
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: LIST
27131: PPUSH
27132: CALL_OW 69
27136: ST_TO_ADDR
// if not tmp then
27137: LD_VAR 0 2
27141: NOT
27142: IFFALSE 27146
// exit ;
27144: GO 27196
// for i in tmp do
27146: LD_ADDR_VAR 0 1
27150: PUSH
27151: LD_VAR 0 2
27155: PUSH
27156: FOR_IN
27157: IFFALSE 27194
// if GetCargo ( i , mat_artifact ) = 0 then
27159: LD_VAR 0 1
27163: PPUSH
27164: LD_INT 4
27166: PPUSH
27167: CALL_OW 289
27171: PUSH
27172: LD_INT 0
27174: EQUAL
27175: IFFALSE 27192
// SetCargo ( i , mat_siberit , 100 ) ;
27177: LD_VAR 0 1
27181: PPUSH
27182: LD_INT 3
27184: PPUSH
27185: LD_INT 100
27187: PPUSH
27188: CALL_OW 290
27192: GO 27156
27194: POP
27195: POP
// end ;
27196: PPOPN 2
27198: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27199: LD_EXP 37
27203: PUSH
27204: LD_EXP 82
27208: AND
27209: IFFALSE 27392
27211: GO 27213
27213: DISABLE
27214: LD_INT 0
27216: PPUSH
27217: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27218: LD_ADDR_VAR 0 2
27222: PUSH
27223: LD_INT 22
27225: PUSH
27226: LD_OWVAR 2
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PPUSH
27235: CALL_OW 69
27239: ST_TO_ADDR
// if not tmp then
27240: LD_VAR 0 2
27244: NOT
27245: IFFALSE 27249
// exit ;
27247: GO 27392
// for i := 1 to 2 do
27249: LD_ADDR_VAR 0 1
27253: PUSH
27254: DOUBLE
27255: LD_INT 1
27257: DEC
27258: ST_TO_ADDR
27259: LD_INT 2
27261: PUSH
27262: FOR_TO
27263: IFFALSE 27390
// begin uc_side := your_side ;
27265: LD_ADDR_OWVAR 20
27269: PUSH
27270: LD_OWVAR 2
27274: ST_TO_ADDR
// uc_nation := nation_american ;
27275: LD_ADDR_OWVAR 21
27279: PUSH
27280: LD_INT 1
27282: ST_TO_ADDR
// vc_chassis := us_morphling ;
27283: LD_ADDR_OWVAR 37
27287: PUSH
27288: LD_INT 5
27290: ST_TO_ADDR
// vc_engine := engine_siberite ;
27291: LD_ADDR_OWVAR 39
27295: PUSH
27296: LD_INT 3
27298: ST_TO_ADDR
// vc_control := control_computer ;
27299: LD_ADDR_OWVAR 38
27303: PUSH
27304: LD_INT 3
27306: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27307: LD_ADDR_OWVAR 40
27311: PUSH
27312: LD_INT 10
27314: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27315: LD_VAR 0 2
27319: PUSH
27320: LD_INT 1
27322: ARRAY
27323: PPUSH
27324: CALL_OW 310
27328: NOT
27329: IFFALSE 27376
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27331: CALL_OW 45
27335: PPUSH
27336: LD_VAR 0 2
27340: PUSH
27341: LD_INT 1
27343: ARRAY
27344: PPUSH
27345: CALL_OW 250
27349: PPUSH
27350: LD_VAR 0 2
27354: PUSH
27355: LD_INT 1
27357: ARRAY
27358: PPUSH
27359: CALL_OW 251
27363: PPUSH
27364: LD_INT 12
27366: PPUSH
27367: LD_INT 1
27369: PPUSH
27370: CALL_OW 50
27374: GO 27388
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27376: CALL_OW 45
27380: PPUSH
27381: LD_INT 1
27383: PPUSH
27384: CALL_OW 51
// end ;
27388: GO 27262
27390: POP
27391: POP
// end ;
27392: PPOPN 2
27394: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27395: LD_EXP 37
27399: PUSH
27400: LD_EXP 83
27404: AND
27405: IFFALSE 27627
27407: GO 27409
27409: DISABLE
27410: LD_INT 0
27412: PPUSH
27413: PPUSH
27414: PPUSH
27415: PPUSH
27416: PPUSH
27417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27418: LD_ADDR_VAR 0 6
27422: PUSH
27423: LD_INT 22
27425: PUSH
27426: LD_OWVAR 2
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: LD_INT 21
27437: PUSH
27438: LD_INT 1
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 3
27447: PUSH
27448: LD_INT 23
27450: PUSH
27451: LD_INT 0
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: LIST
27466: PPUSH
27467: CALL_OW 69
27471: ST_TO_ADDR
// if not tmp then
27472: LD_VAR 0 6
27476: NOT
27477: IFFALSE 27481
// exit ;
27479: GO 27627
// s1 := rand ( 1 , 4 ) ;
27481: LD_ADDR_VAR 0 2
27485: PUSH
27486: LD_INT 1
27488: PPUSH
27489: LD_INT 4
27491: PPUSH
27492: CALL_OW 12
27496: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27497: LD_ADDR_VAR 0 4
27501: PUSH
27502: LD_VAR 0 6
27506: PUSH
27507: LD_INT 1
27509: ARRAY
27510: PPUSH
27511: LD_VAR 0 2
27515: PPUSH
27516: CALL_OW 259
27520: ST_TO_ADDR
// if s1 = 1 then
27521: LD_VAR 0 2
27525: PUSH
27526: LD_INT 1
27528: EQUAL
27529: IFFALSE 27549
// s2 := rand ( 2 , 4 ) else
27531: LD_ADDR_VAR 0 3
27535: PUSH
27536: LD_INT 2
27538: PPUSH
27539: LD_INT 4
27541: PPUSH
27542: CALL_OW 12
27546: ST_TO_ADDR
27547: GO 27557
// s2 := 1 ;
27549: LD_ADDR_VAR 0 3
27553: PUSH
27554: LD_INT 1
27556: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27557: LD_ADDR_VAR 0 5
27561: PUSH
27562: LD_VAR 0 6
27566: PUSH
27567: LD_INT 1
27569: ARRAY
27570: PPUSH
27571: LD_VAR 0 3
27575: PPUSH
27576: CALL_OW 259
27580: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27581: LD_VAR 0 6
27585: PUSH
27586: LD_INT 1
27588: ARRAY
27589: PPUSH
27590: LD_VAR 0 2
27594: PPUSH
27595: LD_VAR 0 5
27599: PPUSH
27600: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27604: LD_VAR 0 6
27608: PUSH
27609: LD_INT 1
27611: ARRAY
27612: PPUSH
27613: LD_VAR 0 3
27617: PPUSH
27618: LD_VAR 0 4
27622: PPUSH
27623: CALL_OW 237
// end ;
27627: PPOPN 6
27629: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27630: LD_EXP 37
27634: PUSH
27635: LD_EXP 84
27639: AND
27640: IFFALSE 27719
27642: GO 27644
27644: DISABLE
27645: LD_INT 0
27647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27648: LD_ADDR_VAR 0 1
27652: PUSH
27653: LD_INT 22
27655: PUSH
27656: LD_OWVAR 2
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 30
27667: PUSH
27668: LD_INT 3
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PPUSH
27679: CALL_OW 69
27683: ST_TO_ADDR
// if not tmp then
27684: LD_VAR 0 1
27688: NOT
27689: IFFALSE 27693
// exit ;
27691: GO 27719
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27693: LD_VAR 0 1
27697: PUSH
27698: LD_INT 1
27700: PPUSH
27701: LD_VAR 0 1
27705: PPUSH
27706: CALL_OW 12
27710: ARRAY
27711: PPUSH
27712: LD_INT 1
27714: PPUSH
27715: CALL_OW 234
// end ;
27719: PPOPN 1
27721: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27722: LD_EXP 37
27726: PUSH
27727: LD_EXP 85
27731: AND
27732: IFFALSE 27844
27734: GO 27736
27736: DISABLE
27737: LD_INT 0
27739: PPUSH
27740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27741: LD_ADDR_VAR 0 2
27745: PUSH
27746: LD_INT 22
27748: PUSH
27749: LD_OWVAR 2
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 2
27760: PUSH
27761: LD_INT 30
27763: PUSH
27764: LD_INT 27
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 30
27773: PUSH
27774: LD_INT 26
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: LD_INT 30
27783: PUSH
27784: LD_INT 28
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PPUSH
27801: CALL_OW 69
27805: ST_TO_ADDR
// if not tmp then
27806: LD_VAR 0 2
27810: NOT
27811: IFFALSE 27815
// exit ;
27813: GO 27844
// for i in tmp do
27815: LD_ADDR_VAR 0 1
27819: PUSH
27820: LD_VAR 0 2
27824: PUSH
27825: FOR_IN
27826: IFFALSE 27842
// SetLives ( i , 1 ) ;
27828: LD_VAR 0 1
27832: PPUSH
27833: LD_INT 1
27835: PPUSH
27836: CALL_OW 234
27840: GO 27825
27842: POP
27843: POP
// end ;
27844: PPOPN 2
27846: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27847: LD_EXP 37
27851: PUSH
27852: LD_EXP 86
27856: AND
27857: IFFALSE 28144
27859: GO 27861
27861: DISABLE
27862: LD_INT 0
27864: PPUSH
27865: PPUSH
27866: PPUSH
// begin i := rand ( 1 , 7 ) ;
27867: LD_ADDR_VAR 0 1
27871: PUSH
27872: LD_INT 1
27874: PPUSH
27875: LD_INT 7
27877: PPUSH
27878: CALL_OW 12
27882: ST_TO_ADDR
// case i of 1 :
27883: LD_VAR 0 1
27887: PUSH
27888: LD_INT 1
27890: DOUBLE
27891: EQUAL
27892: IFTRUE 27896
27894: GO 27906
27896: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27897: LD_STRING earthquake(getX(game), 0, 32)
27899: PPUSH
27900: CALL_OW 559
27904: GO 28144
27906: LD_INT 2
27908: DOUBLE
27909: EQUAL
27910: IFTRUE 27914
27912: GO 27928
27914: POP
// begin ToLua ( displayStucuk(); ) ;
27915: LD_STRING displayStucuk();
27917: PPUSH
27918: CALL_OW 559
// ResetFog ;
27922: CALL_OW 335
// end ; 3 :
27926: GO 28144
27928: LD_INT 3
27930: DOUBLE
27931: EQUAL
27932: IFTRUE 27936
27934: GO 28040
27936: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27937: LD_ADDR_VAR 0 2
27941: PUSH
27942: LD_INT 22
27944: PUSH
27945: LD_OWVAR 2
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: LD_INT 25
27956: PUSH
27957: LD_INT 1
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PPUSH
27968: CALL_OW 69
27972: ST_TO_ADDR
// if not tmp then
27973: LD_VAR 0 2
27977: NOT
27978: IFFALSE 27982
// exit ;
27980: GO 28144
// un := tmp [ rand ( 1 , tmp ) ] ;
27982: LD_ADDR_VAR 0 3
27986: PUSH
27987: LD_VAR 0 2
27991: PUSH
27992: LD_INT 1
27994: PPUSH
27995: LD_VAR 0 2
27999: PPUSH
28000: CALL_OW 12
28004: ARRAY
28005: ST_TO_ADDR
// if Crawls ( un ) then
28006: LD_VAR 0 3
28010: PPUSH
28011: CALL_OW 318
28015: IFFALSE 28026
// ComWalk ( un ) ;
28017: LD_VAR 0 3
28021: PPUSH
28022: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28026: LD_VAR 0 3
28030: PPUSH
28031: LD_INT 8
28033: PPUSH
28034: CALL_OW 336
// end ; 4 :
28038: GO 28144
28040: LD_INT 4
28042: DOUBLE
28043: EQUAL
28044: IFTRUE 28048
28046: GO 28122
28048: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28049: LD_ADDR_VAR 0 2
28053: PUSH
28054: LD_INT 22
28056: PUSH
28057: LD_OWVAR 2
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: LD_INT 30
28068: PUSH
28069: LD_INT 29
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PPUSH
28080: CALL_OW 69
28084: ST_TO_ADDR
// if not tmp then
28085: LD_VAR 0 2
28089: NOT
28090: IFFALSE 28094
// exit ;
28092: GO 28144
// CenterNowOnUnits ( tmp [ 1 ] ) ;
28094: LD_VAR 0 2
28098: PUSH
28099: LD_INT 1
28101: ARRAY
28102: PPUSH
28103: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
28107: LD_VAR 0 2
28111: PUSH
28112: LD_INT 1
28114: ARRAY
28115: PPUSH
28116: CALL_OW 65
// end ; 5 .. 7 :
28120: GO 28144
28122: LD_INT 5
28124: DOUBLE
28125: GREATEREQUAL
28126: IFFALSE 28134
28128: LD_INT 7
28130: DOUBLE
28131: LESSEQUAL
28132: IFTRUE 28136
28134: GO 28143
28136: POP
// StreamSibBomb ; end ;
28137: CALL 24381 0 0
28141: GO 28144
28143: POP
// end ;
28144: PPOPN 3
28146: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28147: LD_EXP 37
28151: PUSH
28152: LD_EXP 87
28156: AND
28157: IFFALSE 28313
28159: GO 28161
28161: DISABLE
28162: LD_INT 0
28164: PPUSH
28165: PPUSH
28166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28167: LD_ADDR_VAR 0 2
28171: PUSH
28172: LD_INT 81
28174: PUSH
28175: LD_OWVAR 2
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 2
28186: PUSH
28187: LD_INT 21
28189: PUSH
28190: LD_INT 1
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 21
28199: PUSH
28200: LD_INT 2
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: LIST
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PPUSH
28216: CALL_OW 69
28220: ST_TO_ADDR
// if not tmp then
28221: LD_VAR 0 2
28225: NOT
28226: IFFALSE 28230
// exit ;
28228: GO 28313
// p := 0 ;
28230: LD_ADDR_VAR 0 3
28234: PUSH
28235: LD_INT 0
28237: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28238: LD_INT 35
28240: PPUSH
28241: CALL_OW 67
// p := p + 1 ;
28245: LD_ADDR_VAR 0 3
28249: PUSH
28250: LD_VAR 0 3
28254: PUSH
28255: LD_INT 1
28257: PLUS
28258: ST_TO_ADDR
// for i in tmp do
28259: LD_ADDR_VAR 0 1
28263: PUSH
28264: LD_VAR 0 2
28268: PUSH
28269: FOR_IN
28270: IFFALSE 28301
// if GetLives ( i ) < 1000 then
28272: LD_VAR 0 1
28276: PPUSH
28277: CALL_OW 256
28281: PUSH
28282: LD_INT 1000
28284: LESS
28285: IFFALSE 28299
// SetLives ( i , 1000 ) ;
28287: LD_VAR 0 1
28291: PPUSH
28292: LD_INT 1000
28294: PPUSH
28295: CALL_OW 234
28299: GO 28269
28301: POP
28302: POP
// until p > 20 ;
28303: LD_VAR 0 3
28307: PUSH
28308: LD_INT 20
28310: GREATER
28311: IFFALSE 28238
// end ;
28313: PPOPN 3
28315: END
// every 0 0$1 trigger StreamModeActive and sTime do
28316: LD_EXP 37
28320: PUSH
28321: LD_EXP 88
28325: AND
28326: IFFALSE 28361
28328: GO 28330
28330: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28331: LD_INT 28
28333: PPUSH
28334: LD_OWVAR 2
28338: PPUSH
28339: LD_INT 2
28341: PPUSH
28342: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28346: LD_INT 30
28348: PPUSH
28349: LD_OWVAR 2
28353: PPUSH
28354: LD_INT 2
28356: PPUSH
28357: CALL_OW 322
// end ;
28361: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28362: LD_EXP 37
28366: PUSH
28367: LD_EXP 89
28371: AND
28372: IFFALSE 28493
28374: GO 28376
28376: DISABLE
28377: LD_INT 0
28379: PPUSH
28380: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28381: LD_ADDR_VAR 0 2
28385: PUSH
28386: LD_INT 22
28388: PUSH
28389: LD_OWVAR 2
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 21
28400: PUSH
28401: LD_INT 1
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 3
28410: PUSH
28411: LD_INT 23
28413: PUSH
28414: LD_INT 0
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: LIST
28429: PPUSH
28430: CALL_OW 69
28434: ST_TO_ADDR
// if not tmp then
28435: LD_VAR 0 2
28439: NOT
28440: IFFALSE 28444
// exit ;
28442: GO 28493
// for i in tmp do
28444: LD_ADDR_VAR 0 1
28448: PUSH
28449: LD_VAR 0 2
28453: PUSH
28454: FOR_IN
28455: IFFALSE 28491
// begin if Crawls ( i ) then
28457: LD_VAR 0 1
28461: PPUSH
28462: CALL_OW 318
28466: IFFALSE 28477
// ComWalk ( i ) ;
28468: LD_VAR 0 1
28472: PPUSH
28473: CALL_OW 138
// SetClass ( i , 2 ) ;
28477: LD_VAR 0 1
28481: PPUSH
28482: LD_INT 2
28484: PPUSH
28485: CALL_OW 336
// end ;
28489: GO 28454
28491: POP
28492: POP
// end ;
28493: PPOPN 2
28495: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28496: LD_EXP 37
28500: PUSH
28501: LD_EXP 90
28505: AND
28506: IFFALSE 28794
28508: GO 28510
28510: DISABLE
28511: LD_INT 0
28513: PPUSH
28514: PPUSH
28515: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28516: LD_OWVAR 2
28520: PPUSH
28521: LD_INT 9
28523: PPUSH
28524: LD_INT 1
28526: PPUSH
28527: LD_INT 1
28529: PPUSH
28530: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28534: LD_INT 9
28536: PPUSH
28537: LD_OWVAR 2
28541: PPUSH
28542: CALL_OW 343
// uc_side := 9 ;
28546: LD_ADDR_OWVAR 20
28550: PUSH
28551: LD_INT 9
28553: ST_TO_ADDR
// uc_nation := 2 ;
28554: LD_ADDR_OWVAR 21
28558: PUSH
28559: LD_INT 2
28561: ST_TO_ADDR
// hc_name := Dark Warrior ;
28562: LD_ADDR_OWVAR 26
28566: PUSH
28567: LD_STRING Dark Warrior
28569: ST_TO_ADDR
// hc_gallery :=  ;
28570: LD_ADDR_OWVAR 33
28574: PUSH
28575: LD_STRING 
28577: ST_TO_ADDR
// hc_noskilllimit := true ;
28578: LD_ADDR_OWVAR 76
28582: PUSH
28583: LD_INT 1
28585: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28586: LD_ADDR_OWVAR 31
28590: PUSH
28591: LD_INT 30
28593: PUSH
28594: LD_INT 30
28596: PUSH
28597: LD_INT 30
28599: PUSH
28600: LD_INT 30
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: ST_TO_ADDR
// un := CreateHuman ;
28609: LD_ADDR_VAR 0 3
28613: PUSH
28614: CALL_OW 44
28618: ST_TO_ADDR
// hc_noskilllimit := false ;
28619: LD_ADDR_OWVAR 76
28623: PUSH
28624: LD_INT 0
28626: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28627: LD_VAR 0 3
28631: PPUSH
28632: LD_INT 1
28634: PPUSH
28635: CALL_OW 51
// ToLua ( playRanger() ) ;
28639: LD_STRING playRanger()
28641: PPUSH
28642: CALL_OW 559
// p := 0 ;
28646: LD_ADDR_VAR 0 2
28650: PUSH
28651: LD_INT 0
28653: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28654: LD_INT 35
28656: PPUSH
28657: CALL_OW 67
// p := p + 1 ;
28661: LD_ADDR_VAR 0 2
28665: PUSH
28666: LD_VAR 0 2
28670: PUSH
28671: LD_INT 1
28673: PLUS
28674: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28675: LD_VAR 0 3
28679: PPUSH
28680: CALL_OW 256
28684: PUSH
28685: LD_INT 1000
28687: LESS
28688: IFFALSE 28702
// SetLives ( un , 1000 ) ;
28690: LD_VAR 0 3
28694: PPUSH
28695: LD_INT 1000
28697: PPUSH
28698: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28702: LD_VAR 0 3
28706: PPUSH
28707: LD_INT 81
28709: PUSH
28710: LD_OWVAR 2
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 91
28721: PUSH
28722: LD_VAR 0 3
28726: PUSH
28727: LD_INT 30
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: LIST
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PPUSH
28739: CALL_OW 69
28743: PPUSH
28744: LD_VAR 0 3
28748: PPUSH
28749: CALL_OW 74
28753: PPUSH
28754: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
28758: LD_VAR 0 2
28762: PUSH
28763: LD_INT 80
28765: GREATER
28766: PUSH
28767: LD_VAR 0 3
28771: PPUSH
28772: CALL_OW 301
28776: OR
28777: IFFALSE 28654
// if un then
28779: LD_VAR 0 3
28783: IFFALSE 28794
// RemoveUnit ( un ) ;
28785: LD_VAR 0 3
28789: PPUSH
28790: CALL_OW 64
// end ;
28794: PPOPN 3
28796: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
28797: LD_EXP 91
28801: IFFALSE 28917
28803: GO 28805
28805: DISABLE
28806: LD_INT 0
28808: PPUSH
28809: PPUSH
28810: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28811: LD_ADDR_VAR 0 2
28815: PUSH
28816: LD_INT 81
28818: PUSH
28819: LD_OWVAR 2
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PUSH
28828: LD_INT 21
28830: PUSH
28831: LD_INT 1
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PPUSH
28842: CALL_OW 69
28846: ST_TO_ADDR
// ToLua ( playComputer() ) ;
28847: LD_STRING playComputer()
28849: PPUSH
28850: CALL_OW 559
// if not tmp then
28854: LD_VAR 0 2
28858: NOT
28859: IFFALSE 28863
// exit ;
28861: GO 28917
// for i in tmp do
28863: LD_ADDR_VAR 0 1
28867: PUSH
28868: LD_VAR 0 2
28872: PUSH
28873: FOR_IN
28874: IFFALSE 28915
// for j := 1 to 4 do
28876: LD_ADDR_VAR 0 3
28880: PUSH
28881: DOUBLE
28882: LD_INT 1
28884: DEC
28885: ST_TO_ADDR
28886: LD_INT 4
28888: PUSH
28889: FOR_TO
28890: IFFALSE 28911
// SetSkill ( i , j , 10 ) ;
28892: LD_VAR 0 1
28896: PPUSH
28897: LD_VAR 0 3
28901: PPUSH
28902: LD_INT 10
28904: PPUSH
28905: CALL_OW 237
28909: GO 28889
28911: POP
28912: POP
28913: GO 28873
28915: POP
28916: POP
// end ;
28917: PPOPN 3
28919: END
// every 0 0$1 trigger s30 do var i , tmp ;
28920: LD_EXP 92
28924: IFFALSE 28993
28926: GO 28928
28928: DISABLE
28929: LD_INT 0
28931: PPUSH
28932: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28933: LD_ADDR_VAR 0 2
28937: PUSH
28938: LD_INT 22
28940: PUSH
28941: LD_OWVAR 2
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PPUSH
28950: CALL_OW 69
28954: ST_TO_ADDR
// if not tmp then
28955: LD_VAR 0 2
28959: NOT
28960: IFFALSE 28964
// exit ;
28962: GO 28993
// for i in tmp do
28964: LD_ADDR_VAR 0 1
28968: PUSH
28969: LD_VAR 0 2
28973: PUSH
28974: FOR_IN
28975: IFFALSE 28991
// SetLives ( i , 300 ) ;
28977: LD_VAR 0 1
28981: PPUSH
28982: LD_INT 300
28984: PPUSH
28985: CALL_OW 234
28989: GO 28974
28991: POP
28992: POP
// end ;
28993: PPOPN 2
28995: END
// every 0 0$1 trigger s60 do var i , tmp ;
28996: LD_EXP 93
29000: IFFALSE 29069
29002: GO 29004
29004: DISABLE
29005: LD_INT 0
29007: PPUSH
29008: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29009: LD_ADDR_VAR 0 2
29013: PUSH
29014: LD_INT 22
29016: PUSH
29017: LD_OWVAR 2
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PPUSH
29026: CALL_OW 69
29030: ST_TO_ADDR
// if not tmp then
29031: LD_VAR 0 2
29035: NOT
29036: IFFALSE 29040
// exit ;
29038: GO 29069
// for i in tmp do
29040: LD_ADDR_VAR 0 1
29044: PUSH
29045: LD_VAR 0 2
29049: PUSH
29050: FOR_IN
29051: IFFALSE 29067
// SetLives ( i , 600 ) ;
29053: LD_VAR 0 1
29057: PPUSH
29058: LD_INT 600
29060: PPUSH
29061: CALL_OW 234
29065: GO 29050
29067: POP
29068: POP
// end ;
29069: PPOPN 2
29071: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29072: LD_INT 0
29074: PPUSH
// case cmd of 301 :
29075: LD_VAR 0 1
29079: PUSH
29080: LD_INT 301
29082: DOUBLE
29083: EQUAL
29084: IFTRUE 29088
29086: GO 29120
29088: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29089: LD_VAR 0 6
29093: PPUSH
29094: LD_VAR 0 7
29098: PPUSH
29099: LD_VAR 0 8
29103: PPUSH
29104: LD_VAR 0 4
29108: PPUSH
29109: LD_VAR 0 5
29113: PPUSH
29114: CALL 30321 0 5
29118: GO 29241
29120: LD_INT 302
29122: DOUBLE
29123: EQUAL
29124: IFTRUE 29128
29126: GO 29165
29128: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29129: LD_VAR 0 6
29133: PPUSH
29134: LD_VAR 0 7
29138: PPUSH
29139: LD_VAR 0 8
29143: PPUSH
29144: LD_VAR 0 9
29148: PPUSH
29149: LD_VAR 0 4
29153: PPUSH
29154: LD_VAR 0 5
29158: PPUSH
29159: CALL 30412 0 6
29163: GO 29241
29165: LD_INT 303
29167: DOUBLE
29168: EQUAL
29169: IFTRUE 29173
29171: GO 29210
29173: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29174: LD_VAR 0 6
29178: PPUSH
29179: LD_VAR 0 7
29183: PPUSH
29184: LD_VAR 0 8
29188: PPUSH
29189: LD_VAR 0 9
29193: PPUSH
29194: LD_VAR 0 4
29198: PPUSH
29199: LD_VAR 0 5
29203: PPUSH
29204: CALL 29246 0 6
29208: GO 29241
29210: LD_INT 304
29212: DOUBLE
29213: EQUAL
29214: IFTRUE 29218
29216: GO 29240
29218: POP
// hHackTeleport ( unit , x , y ) ; end ;
29219: LD_VAR 0 2
29223: PPUSH
29224: LD_VAR 0 4
29228: PPUSH
29229: LD_VAR 0 5
29233: PPUSH
29234: CALL 31005 0 3
29238: GO 29241
29240: POP
// end ;
29241: LD_VAR 0 12
29245: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29246: LD_INT 0
29248: PPUSH
29249: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29250: LD_VAR 0 1
29254: PUSH
29255: LD_INT 1
29257: LESS
29258: PUSH
29259: LD_VAR 0 1
29263: PUSH
29264: LD_INT 3
29266: GREATER
29267: OR
29268: PUSH
29269: LD_VAR 0 5
29273: PPUSH
29274: LD_VAR 0 6
29278: PPUSH
29279: CALL_OW 428
29283: OR
29284: IFFALSE 29288
// exit ;
29286: GO 30008
// uc_side := your_side ;
29288: LD_ADDR_OWVAR 20
29292: PUSH
29293: LD_OWVAR 2
29297: ST_TO_ADDR
// uc_nation := nation ;
29298: LD_ADDR_OWVAR 21
29302: PUSH
29303: LD_VAR 0 1
29307: ST_TO_ADDR
// bc_level = 1 ;
29308: LD_ADDR_OWVAR 43
29312: PUSH
29313: LD_INT 1
29315: ST_TO_ADDR
// case btype of 1 :
29316: LD_VAR 0 2
29320: PUSH
29321: LD_INT 1
29323: DOUBLE
29324: EQUAL
29325: IFTRUE 29329
29327: GO 29340
29329: POP
// bc_type := b_depot ; 2 :
29330: LD_ADDR_OWVAR 42
29334: PUSH
29335: LD_INT 0
29337: ST_TO_ADDR
29338: GO 29952
29340: LD_INT 2
29342: DOUBLE
29343: EQUAL
29344: IFTRUE 29348
29346: GO 29359
29348: POP
// bc_type := b_warehouse ; 3 :
29349: LD_ADDR_OWVAR 42
29353: PUSH
29354: LD_INT 1
29356: ST_TO_ADDR
29357: GO 29952
29359: LD_INT 3
29361: DOUBLE
29362: EQUAL
29363: IFTRUE 29367
29365: GO 29378
29367: POP
// bc_type := b_lab ; 4 .. 9 :
29368: LD_ADDR_OWVAR 42
29372: PUSH
29373: LD_INT 6
29375: ST_TO_ADDR
29376: GO 29952
29378: LD_INT 4
29380: DOUBLE
29381: GREATEREQUAL
29382: IFFALSE 29390
29384: LD_INT 9
29386: DOUBLE
29387: LESSEQUAL
29388: IFTRUE 29392
29390: GO 29444
29392: POP
// begin bc_type := b_lab_half ;
29393: LD_ADDR_OWVAR 42
29397: PUSH
29398: LD_INT 7
29400: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29401: LD_ADDR_OWVAR 44
29405: PUSH
29406: LD_INT 10
29408: PUSH
29409: LD_INT 11
29411: PUSH
29412: LD_INT 12
29414: PUSH
29415: LD_INT 15
29417: PUSH
29418: LD_INT 14
29420: PUSH
29421: LD_INT 13
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: PUSH
29432: LD_VAR 0 2
29436: PUSH
29437: LD_INT 3
29439: MINUS
29440: ARRAY
29441: ST_TO_ADDR
// end ; 10 .. 13 :
29442: GO 29952
29444: LD_INT 10
29446: DOUBLE
29447: GREATEREQUAL
29448: IFFALSE 29456
29450: LD_INT 13
29452: DOUBLE
29453: LESSEQUAL
29454: IFTRUE 29458
29456: GO 29535
29458: POP
// begin bc_type := b_lab_full ;
29459: LD_ADDR_OWVAR 42
29463: PUSH
29464: LD_INT 8
29466: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29467: LD_ADDR_OWVAR 44
29471: PUSH
29472: LD_INT 10
29474: PUSH
29475: LD_INT 12
29477: PUSH
29478: LD_INT 14
29480: PUSH
29481: LD_INT 13
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: PUSH
29490: LD_VAR 0 2
29494: PUSH
29495: LD_INT 9
29497: MINUS
29498: ARRAY
29499: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29500: LD_ADDR_OWVAR 45
29504: PUSH
29505: LD_INT 11
29507: PUSH
29508: LD_INT 15
29510: PUSH
29511: LD_INT 12
29513: PUSH
29514: LD_INT 15
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: PUSH
29523: LD_VAR 0 2
29527: PUSH
29528: LD_INT 9
29530: MINUS
29531: ARRAY
29532: ST_TO_ADDR
// end ; 14 :
29533: GO 29952
29535: LD_INT 14
29537: DOUBLE
29538: EQUAL
29539: IFTRUE 29543
29541: GO 29554
29543: POP
// bc_type := b_workshop ; 15 :
29544: LD_ADDR_OWVAR 42
29548: PUSH
29549: LD_INT 2
29551: ST_TO_ADDR
29552: GO 29952
29554: LD_INT 15
29556: DOUBLE
29557: EQUAL
29558: IFTRUE 29562
29560: GO 29573
29562: POP
// bc_type := b_factory ; 16 :
29563: LD_ADDR_OWVAR 42
29567: PUSH
29568: LD_INT 3
29570: ST_TO_ADDR
29571: GO 29952
29573: LD_INT 16
29575: DOUBLE
29576: EQUAL
29577: IFTRUE 29581
29579: GO 29592
29581: POP
// bc_type := b_ext_gun ; 17 :
29582: LD_ADDR_OWVAR 42
29586: PUSH
29587: LD_INT 17
29589: ST_TO_ADDR
29590: GO 29952
29592: LD_INT 17
29594: DOUBLE
29595: EQUAL
29596: IFTRUE 29600
29598: GO 29628
29600: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29601: LD_ADDR_OWVAR 42
29605: PUSH
29606: LD_INT 19
29608: PUSH
29609: LD_INT 23
29611: PUSH
29612: LD_INT 19
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: LIST
29619: PUSH
29620: LD_VAR 0 1
29624: ARRAY
29625: ST_TO_ADDR
29626: GO 29952
29628: LD_INT 18
29630: DOUBLE
29631: EQUAL
29632: IFTRUE 29636
29634: GO 29647
29636: POP
// bc_type := b_ext_radar ; 19 :
29637: LD_ADDR_OWVAR 42
29641: PUSH
29642: LD_INT 20
29644: ST_TO_ADDR
29645: GO 29952
29647: LD_INT 19
29649: DOUBLE
29650: EQUAL
29651: IFTRUE 29655
29653: GO 29666
29655: POP
// bc_type := b_ext_radio ; 20 :
29656: LD_ADDR_OWVAR 42
29660: PUSH
29661: LD_INT 22
29663: ST_TO_ADDR
29664: GO 29952
29666: LD_INT 20
29668: DOUBLE
29669: EQUAL
29670: IFTRUE 29674
29672: GO 29685
29674: POP
// bc_type := b_ext_siberium ; 21 :
29675: LD_ADDR_OWVAR 42
29679: PUSH
29680: LD_INT 21
29682: ST_TO_ADDR
29683: GO 29952
29685: LD_INT 21
29687: DOUBLE
29688: EQUAL
29689: IFTRUE 29693
29691: GO 29704
29693: POP
// bc_type := b_ext_computer ; 22 :
29694: LD_ADDR_OWVAR 42
29698: PUSH
29699: LD_INT 24
29701: ST_TO_ADDR
29702: GO 29952
29704: LD_INT 22
29706: DOUBLE
29707: EQUAL
29708: IFTRUE 29712
29710: GO 29723
29712: POP
// bc_type := b_ext_track ; 23 :
29713: LD_ADDR_OWVAR 42
29717: PUSH
29718: LD_INT 16
29720: ST_TO_ADDR
29721: GO 29952
29723: LD_INT 23
29725: DOUBLE
29726: EQUAL
29727: IFTRUE 29731
29729: GO 29742
29731: POP
// bc_type := b_ext_laser ; 24 :
29732: LD_ADDR_OWVAR 42
29736: PUSH
29737: LD_INT 25
29739: ST_TO_ADDR
29740: GO 29952
29742: LD_INT 24
29744: DOUBLE
29745: EQUAL
29746: IFTRUE 29750
29748: GO 29761
29750: POP
// bc_type := b_control_tower ; 25 :
29751: LD_ADDR_OWVAR 42
29755: PUSH
29756: LD_INT 36
29758: ST_TO_ADDR
29759: GO 29952
29761: LD_INT 25
29763: DOUBLE
29764: EQUAL
29765: IFTRUE 29769
29767: GO 29780
29769: POP
// bc_type := b_breastwork ; 26 :
29770: LD_ADDR_OWVAR 42
29774: PUSH
29775: LD_INT 31
29777: ST_TO_ADDR
29778: GO 29952
29780: LD_INT 26
29782: DOUBLE
29783: EQUAL
29784: IFTRUE 29788
29786: GO 29799
29788: POP
// bc_type := b_bunker ; 27 :
29789: LD_ADDR_OWVAR 42
29793: PUSH
29794: LD_INT 32
29796: ST_TO_ADDR
29797: GO 29952
29799: LD_INT 27
29801: DOUBLE
29802: EQUAL
29803: IFTRUE 29807
29805: GO 29818
29807: POP
// bc_type := b_turret ; 28 :
29808: LD_ADDR_OWVAR 42
29812: PUSH
29813: LD_INT 33
29815: ST_TO_ADDR
29816: GO 29952
29818: LD_INT 28
29820: DOUBLE
29821: EQUAL
29822: IFTRUE 29826
29824: GO 29837
29826: POP
// bc_type := b_armoury ; 29 :
29827: LD_ADDR_OWVAR 42
29831: PUSH
29832: LD_INT 4
29834: ST_TO_ADDR
29835: GO 29952
29837: LD_INT 29
29839: DOUBLE
29840: EQUAL
29841: IFTRUE 29845
29843: GO 29856
29845: POP
// bc_type := b_barracks ; 30 :
29846: LD_ADDR_OWVAR 42
29850: PUSH
29851: LD_INT 5
29853: ST_TO_ADDR
29854: GO 29952
29856: LD_INT 30
29858: DOUBLE
29859: EQUAL
29860: IFTRUE 29864
29862: GO 29875
29864: POP
// bc_type := b_solar_power ; 31 :
29865: LD_ADDR_OWVAR 42
29869: PUSH
29870: LD_INT 27
29872: ST_TO_ADDR
29873: GO 29952
29875: LD_INT 31
29877: DOUBLE
29878: EQUAL
29879: IFTRUE 29883
29881: GO 29894
29883: POP
// bc_type := b_oil_power ; 32 :
29884: LD_ADDR_OWVAR 42
29888: PUSH
29889: LD_INT 26
29891: ST_TO_ADDR
29892: GO 29952
29894: LD_INT 32
29896: DOUBLE
29897: EQUAL
29898: IFTRUE 29902
29900: GO 29913
29902: POP
// bc_type := b_siberite_power ; 33 :
29903: LD_ADDR_OWVAR 42
29907: PUSH
29908: LD_INT 28
29910: ST_TO_ADDR
29911: GO 29952
29913: LD_INT 33
29915: DOUBLE
29916: EQUAL
29917: IFTRUE 29921
29919: GO 29932
29921: POP
// bc_type := b_oil_mine ; 34 :
29922: LD_ADDR_OWVAR 42
29926: PUSH
29927: LD_INT 29
29929: ST_TO_ADDR
29930: GO 29952
29932: LD_INT 34
29934: DOUBLE
29935: EQUAL
29936: IFTRUE 29940
29938: GO 29951
29940: POP
// bc_type := b_siberite_mine ; end ;
29941: LD_ADDR_OWVAR 42
29945: PUSH
29946: LD_INT 30
29948: ST_TO_ADDR
29949: GO 29952
29951: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29952: LD_ADDR_VAR 0 8
29956: PUSH
29957: LD_VAR 0 5
29961: PPUSH
29962: LD_VAR 0 6
29966: PPUSH
29967: LD_VAR 0 3
29971: PPUSH
29972: CALL_OW 47
29976: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29977: LD_OWVAR 42
29981: PUSH
29982: LD_INT 32
29984: PUSH
29985: LD_INT 33
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: IN
29992: IFFALSE 30008
// PlaceWeaponTurret ( b , weapon ) ;
29994: LD_VAR 0 8
29998: PPUSH
29999: LD_VAR 0 4
30003: PPUSH
30004: CALL_OW 431
// end ;
30008: LD_VAR 0 7
30012: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30013: LD_INT 0
30015: PPUSH
30016: PPUSH
30017: PPUSH
30018: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30019: LD_ADDR_VAR 0 4
30023: PUSH
30024: LD_INT 22
30026: PUSH
30027: LD_OWVAR 2
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 2
30038: PUSH
30039: LD_INT 30
30041: PUSH
30042: LD_INT 0
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 30
30051: PUSH
30052: LD_INT 1
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: LIST
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PPUSH
30068: CALL_OW 69
30072: ST_TO_ADDR
// if not tmp then
30073: LD_VAR 0 4
30077: NOT
30078: IFFALSE 30082
// exit ;
30080: GO 30141
// for i in tmp do
30082: LD_ADDR_VAR 0 2
30086: PUSH
30087: LD_VAR 0 4
30091: PUSH
30092: FOR_IN
30093: IFFALSE 30139
// for j = 1 to 3 do
30095: LD_ADDR_VAR 0 3
30099: PUSH
30100: DOUBLE
30101: LD_INT 1
30103: DEC
30104: ST_TO_ADDR
30105: LD_INT 3
30107: PUSH
30108: FOR_TO
30109: IFFALSE 30135
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30111: LD_VAR 0 2
30115: PPUSH
30116: CALL_OW 274
30120: PPUSH
30121: LD_VAR 0 3
30125: PPUSH
30126: LD_INT 99999
30128: PPUSH
30129: CALL_OW 277
30133: GO 30108
30135: POP
30136: POP
30137: GO 30092
30139: POP
30140: POP
// end ;
30141: LD_VAR 0 1
30145: RET
// export function hHackSetLevel10 ; var i , j ; begin
30146: LD_INT 0
30148: PPUSH
30149: PPUSH
30150: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30151: LD_ADDR_VAR 0 2
30155: PUSH
30156: LD_INT 21
30158: PUSH
30159: LD_INT 1
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PPUSH
30166: CALL_OW 69
30170: PUSH
30171: FOR_IN
30172: IFFALSE 30224
// if IsSelected ( i ) then
30174: LD_VAR 0 2
30178: PPUSH
30179: CALL_OW 306
30183: IFFALSE 30222
// begin for j := 1 to 4 do
30185: LD_ADDR_VAR 0 3
30189: PUSH
30190: DOUBLE
30191: LD_INT 1
30193: DEC
30194: ST_TO_ADDR
30195: LD_INT 4
30197: PUSH
30198: FOR_TO
30199: IFFALSE 30220
// SetSkill ( i , j , 10 ) ;
30201: LD_VAR 0 2
30205: PPUSH
30206: LD_VAR 0 3
30210: PPUSH
30211: LD_INT 10
30213: PPUSH
30214: CALL_OW 237
30218: GO 30198
30220: POP
30221: POP
// end ;
30222: GO 30171
30224: POP
30225: POP
// end ;
30226: LD_VAR 0 1
30230: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30231: LD_INT 0
30233: PPUSH
30234: PPUSH
30235: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30236: LD_ADDR_VAR 0 2
30240: PUSH
30241: LD_INT 22
30243: PUSH
30244: LD_OWVAR 2
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 21
30255: PUSH
30256: LD_INT 1
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PPUSH
30267: CALL_OW 69
30271: PUSH
30272: FOR_IN
30273: IFFALSE 30314
// begin for j := 1 to 4 do
30275: LD_ADDR_VAR 0 3
30279: PUSH
30280: DOUBLE
30281: LD_INT 1
30283: DEC
30284: ST_TO_ADDR
30285: LD_INT 4
30287: PUSH
30288: FOR_TO
30289: IFFALSE 30310
// SetSkill ( i , j , 10 ) ;
30291: LD_VAR 0 2
30295: PPUSH
30296: LD_VAR 0 3
30300: PPUSH
30301: LD_INT 10
30303: PPUSH
30304: CALL_OW 237
30308: GO 30288
30310: POP
30311: POP
// end ;
30312: GO 30272
30314: POP
30315: POP
// end ;
30316: LD_VAR 0 1
30320: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30321: LD_INT 0
30323: PPUSH
// uc_side := your_side ;
30324: LD_ADDR_OWVAR 20
30328: PUSH
30329: LD_OWVAR 2
30333: ST_TO_ADDR
// uc_nation := nation ;
30334: LD_ADDR_OWVAR 21
30338: PUSH
30339: LD_VAR 0 1
30343: ST_TO_ADDR
// InitHc ;
30344: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30348: LD_INT 0
30350: PPUSH
30351: LD_VAR 0 2
30355: PPUSH
30356: LD_VAR 0 3
30360: PPUSH
30361: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30365: LD_VAR 0 4
30369: PPUSH
30370: LD_VAR 0 5
30374: PPUSH
30375: CALL_OW 428
30379: PUSH
30380: LD_INT 0
30382: EQUAL
30383: IFFALSE 30407
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30385: CALL_OW 44
30389: PPUSH
30390: LD_VAR 0 4
30394: PPUSH
30395: LD_VAR 0 5
30399: PPUSH
30400: LD_INT 1
30402: PPUSH
30403: CALL_OW 48
// end ;
30407: LD_VAR 0 6
30411: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30412: LD_INT 0
30414: PPUSH
30415: PPUSH
// uc_side := your_side ;
30416: LD_ADDR_OWVAR 20
30420: PUSH
30421: LD_OWVAR 2
30425: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30426: LD_VAR 0 1
30430: PUSH
30431: LD_INT 1
30433: PUSH
30434: LD_INT 2
30436: PUSH
30437: LD_INT 3
30439: PUSH
30440: LD_INT 4
30442: PUSH
30443: LD_INT 5
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: IN
30453: IFFALSE 30465
// uc_nation := nation_american else
30455: LD_ADDR_OWVAR 21
30459: PUSH
30460: LD_INT 1
30462: ST_TO_ADDR
30463: GO 30508
// if chassis in [ 11 , 12 , 13 , 14 ] then
30465: LD_VAR 0 1
30469: PUSH
30470: LD_INT 11
30472: PUSH
30473: LD_INT 12
30475: PUSH
30476: LD_INT 13
30478: PUSH
30479: LD_INT 14
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: IN
30488: IFFALSE 30500
// uc_nation := nation_arabian else
30490: LD_ADDR_OWVAR 21
30494: PUSH
30495: LD_INT 2
30497: ST_TO_ADDR
30498: GO 30508
// uc_nation := nation_russian ;
30500: LD_ADDR_OWVAR 21
30504: PUSH
30505: LD_INT 3
30507: ST_TO_ADDR
// vc_chassis := chassis ;
30508: LD_ADDR_OWVAR 37
30512: PUSH
30513: LD_VAR 0 1
30517: ST_TO_ADDR
// vc_engine := engine ;
30518: LD_ADDR_OWVAR 39
30522: PUSH
30523: LD_VAR 0 2
30527: ST_TO_ADDR
// vc_control := control ;
30528: LD_ADDR_OWVAR 38
30532: PUSH
30533: LD_VAR 0 3
30537: ST_TO_ADDR
// vc_weapon := weapon ;
30538: LD_ADDR_OWVAR 40
30542: PUSH
30543: LD_VAR 0 4
30547: ST_TO_ADDR
// un := CreateVehicle ;
30548: LD_ADDR_VAR 0 8
30552: PUSH
30553: CALL_OW 45
30557: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30558: LD_VAR 0 8
30562: PPUSH
30563: LD_INT 0
30565: PPUSH
30566: LD_INT 5
30568: PPUSH
30569: CALL_OW 12
30573: PPUSH
30574: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30578: LD_VAR 0 8
30582: PPUSH
30583: LD_VAR 0 5
30587: PPUSH
30588: LD_VAR 0 6
30592: PPUSH
30593: LD_INT 1
30595: PPUSH
30596: CALL_OW 48
// end ;
30600: LD_VAR 0 7
30604: RET
// export hInvincible ; every 1 do
30605: GO 30607
30607: DISABLE
// hInvincible := [ ] ;
30608: LD_ADDR_EXP 94
30612: PUSH
30613: EMPTY
30614: ST_TO_ADDR
30615: END
// every 10 do var i ;
30616: GO 30618
30618: DISABLE
30619: LD_INT 0
30621: PPUSH
// begin enable ;
30622: ENABLE
// if not hInvincible then
30623: LD_EXP 94
30627: NOT
30628: IFFALSE 30632
// exit ;
30630: GO 30676
// for i in hInvincible do
30632: LD_ADDR_VAR 0 1
30636: PUSH
30637: LD_EXP 94
30641: PUSH
30642: FOR_IN
30643: IFFALSE 30674
// if GetLives ( i ) < 1000 then
30645: LD_VAR 0 1
30649: PPUSH
30650: CALL_OW 256
30654: PUSH
30655: LD_INT 1000
30657: LESS
30658: IFFALSE 30672
// SetLives ( i , 1000 ) ;
30660: LD_VAR 0 1
30664: PPUSH
30665: LD_INT 1000
30667: PPUSH
30668: CALL_OW 234
30672: GO 30642
30674: POP
30675: POP
// end ;
30676: PPOPN 1
30678: END
// export function hHackInvincible ; var i ; begin
30679: LD_INT 0
30681: PPUSH
30682: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30683: LD_ADDR_VAR 0 2
30687: PUSH
30688: LD_INT 2
30690: PUSH
30691: LD_INT 21
30693: PUSH
30694: LD_INT 1
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 21
30703: PUSH
30704: LD_INT 2
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: LIST
30715: PPUSH
30716: CALL_OW 69
30720: PUSH
30721: FOR_IN
30722: IFFALSE 30783
// if IsSelected ( i ) then
30724: LD_VAR 0 2
30728: PPUSH
30729: CALL_OW 306
30733: IFFALSE 30781
// begin if i in hInvincible then
30735: LD_VAR 0 2
30739: PUSH
30740: LD_EXP 94
30744: IN
30745: IFFALSE 30765
// hInvincible := hInvincible diff i else
30747: LD_ADDR_EXP 94
30751: PUSH
30752: LD_EXP 94
30756: PUSH
30757: LD_VAR 0 2
30761: DIFF
30762: ST_TO_ADDR
30763: GO 30781
// hInvincible := hInvincible union i ;
30765: LD_ADDR_EXP 94
30769: PUSH
30770: LD_EXP 94
30774: PUSH
30775: LD_VAR 0 2
30779: UNION
30780: ST_TO_ADDR
// end ;
30781: GO 30721
30783: POP
30784: POP
// end ;
30785: LD_VAR 0 1
30789: RET
// export function hHackInvisible ; var i , j ; begin
30790: LD_INT 0
30792: PPUSH
30793: PPUSH
30794: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30795: LD_ADDR_VAR 0 2
30799: PUSH
30800: LD_INT 21
30802: PUSH
30803: LD_INT 1
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PPUSH
30810: CALL_OW 69
30814: PUSH
30815: FOR_IN
30816: IFFALSE 30840
// if IsSelected ( i ) then
30818: LD_VAR 0 2
30822: PPUSH
30823: CALL_OW 306
30827: IFFALSE 30838
// ComForceInvisible ( i ) ;
30829: LD_VAR 0 2
30833: PPUSH
30834: CALL_OW 496
30838: GO 30815
30840: POP
30841: POP
// end ;
30842: LD_VAR 0 1
30846: RET
// export function hHackChangeYourSide ; begin
30847: LD_INT 0
30849: PPUSH
// if your_side = 8 then
30850: LD_OWVAR 2
30854: PUSH
30855: LD_INT 8
30857: EQUAL
30858: IFFALSE 30870
// your_side := 0 else
30860: LD_ADDR_OWVAR 2
30864: PUSH
30865: LD_INT 0
30867: ST_TO_ADDR
30868: GO 30884
// your_side := your_side + 1 ;
30870: LD_ADDR_OWVAR 2
30874: PUSH
30875: LD_OWVAR 2
30879: PUSH
30880: LD_INT 1
30882: PLUS
30883: ST_TO_ADDR
// end ;
30884: LD_VAR 0 1
30888: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30889: LD_INT 0
30891: PPUSH
30892: PPUSH
30893: PPUSH
// for i in all_units do
30894: LD_ADDR_VAR 0 2
30898: PUSH
30899: LD_OWVAR 3
30903: PUSH
30904: FOR_IN
30905: IFFALSE 30983
// if IsSelected ( i ) then
30907: LD_VAR 0 2
30911: PPUSH
30912: CALL_OW 306
30916: IFFALSE 30981
// begin j := GetSide ( i ) ;
30918: LD_ADDR_VAR 0 3
30922: PUSH
30923: LD_VAR 0 2
30927: PPUSH
30928: CALL_OW 255
30932: ST_TO_ADDR
// if j = 8 then
30933: LD_VAR 0 3
30937: PUSH
30938: LD_INT 8
30940: EQUAL
30941: IFFALSE 30953
// j := 0 else
30943: LD_ADDR_VAR 0 3
30947: PUSH
30948: LD_INT 0
30950: ST_TO_ADDR
30951: GO 30967
// j := j + 1 ;
30953: LD_ADDR_VAR 0 3
30957: PUSH
30958: LD_VAR 0 3
30962: PUSH
30963: LD_INT 1
30965: PLUS
30966: ST_TO_ADDR
// SetSide ( i , j ) ;
30967: LD_VAR 0 2
30971: PPUSH
30972: LD_VAR 0 3
30976: PPUSH
30977: CALL_OW 235
// end ;
30981: GO 30904
30983: POP
30984: POP
// end ;
30985: LD_VAR 0 1
30989: RET
// export function hHackFog ; begin
30990: LD_INT 0
30992: PPUSH
// FogOff ( true ) ;
30993: LD_INT 1
30995: PPUSH
30996: CALL_OW 344
// end ;
31000: LD_VAR 0 1
31004: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31005: LD_INT 0
31007: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31008: LD_VAR 0 1
31012: PPUSH
31013: LD_VAR 0 2
31017: PPUSH
31018: LD_VAR 0 3
31022: PPUSH
31023: LD_INT 1
31025: PPUSH
31026: LD_INT 1
31028: PPUSH
31029: CALL_OW 483
// CenterOnXY ( x , y ) ;
31033: LD_VAR 0 2
31037: PPUSH
31038: LD_VAR 0 3
31042: PPUSH
31043: CALL_OW 84
// end ;
31047: LD_VAR 0 4
31051: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
31052: LD_INT 0
31054: PPUSH
31055: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
31056: LD_VAR 0 1
31060: NOT
31061: PUSH
31062: LD_VAR 0 2
31066: PPUSH
31067: LD_VAR 0 3
31071: PPUSH
31072: CALL_OW 488
31076: NOT
31077: OR
31078: PUSH
31079: LD_VAR 0 1
31083: PPUSH
31084: CALL_OW 266
31088: PUSH
31089: LD_INT 3
31091: NONEQUAL
31092: PUSH
31093: LD_VAR 0 1
31097: PPUSH
31098: CALL_OW 247
31102: PUSH
31103: LD_INT 1
31105: EQUAL
31106: NOT
31107: AND
31108: OR
31109: IFFALSE 31113
// exit ;
31111: GO 31262
// if GetType ( factory ) = unit_human then
31113: LD_VAR 0 1
31117: PPUSH
31118: CALL_OW 247
31122: PUSH
31123: LD_INT 1
31125: EQUAL
31126: IFFALSE 31143
// factory := IsInUnit ( factory ) ;
31128: LD_ADDR_VAR 0 1
31132: PUSH
31133: LD_VAR 0 1
31137: PPUSH
31138: CALL_OW 310
31142: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
31143: LD_VAR 0 1
31147: PPUSH
31148: CALL_OW 266
31152: PUSH
31153: LD_INT 3
31155: NONEQUAL
31156: IFFALSE 31160
// exit ;
31158: GO 31262
// if HexInfo ( x , y ) = factory then
31160: LD_VAR 0 2
31164: PPUSH
31165: LD_VAR 0 3
31169: PPUSH
31170: CALL_OW 428
31174: PUSH
31175: LD_VAR 0 1
31179: EQUAL
31180: IFFALSE 31207
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
31182: LD_ADDR_EXP 95
31186: PUSH
31187: LD_EXP 95
31191: PPUSH
31192: LD_VAR 0 1
31196: PPUSH
31197: LD_INT 0
31199: PPUSH
31200: CALL_OW 1
31204: ST_TO_ADDR
31205: GO 31258
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
31207: LD_ADDR_EXP 95
31211: PUSH
31212: LD_EXP 95
31216: PPUSH
31217: LD_VAR 0 1
31221: PPUSH
31222: LD_VAR 0 1
31226: PPUSH
31227: CALL_OW 255
31231: PUSH
31232: LD_VAR 0 1
31236: PUSH
31237: LD_VAR 0 2
31241: PUSH
31242: LD_VAR 0 3
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: PPUSH
31253: CALL_OW 1
31257: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31258: CALL 31267 0 0
// end ;
31262: LD_VAR 0 4
31266: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
31267: LD_INT 0
31269: PPUSH
31270: PPUSH
31271: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
31272: LD_STRING resetFactoryWaypoint();
31274: PPUSH
31275: CALL_OW 559
// if factoryWaypoints then
31279: LD_EXP 95
31283: IFFALSE 31409
// begin list := PrepareArray ( factoryWaypoints ) ;
31285: LD_ADDR_VAR 0 3
31289: PUSH
31290: LD_EXP 95
31294: PPUSH
31295: CALL 77878 0 1
31299: ST_TO_ADDR
// for i := 1 to list do
31300: LD_ADDR_VAR 0 2
31304: PUSH
31305: DOUBLE
31306: LD_INT 1
31308: DEC
31309: ST_TO_ADDR
31310: LD_VAR 0 3
31314: PUSH
31315: FOR_TO
31316: IFFALSE 31407
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31318: LD_STRING setFactoryWaypointXY(
31320: PUSH
31321: LD_VAR 0 3
31325: PUSH
31326: LD_VAR 0 2
31330: ARRAY
31331: PUSH
31332: LD_INT 1
31334: ARRAY
31335: STR
31336: PUSH
31337: LD_STRING ,
31339: STR
31340: PUSH
31341: LD_VAR 0 3
31345: PUSH
31346: LD_VAR 0 2
31350: ARRAY
31351: PUSH
31352: LD_INT 2
31354: ARRAY
31355: STR
31356: PUSH
31357: LD_STRING ,
31359: STR
31360: PUSH
31361: LD_VAR 0 3
31365: PUSH
31366: LD_VAR 0 2
31370: ARRAY
31371: PUSH
31372: LD_INT 3
31374: ARRAY
31375: STR
31376: PUSH
31377: LD_STRING ,
31379: STR
31380: PUSH
31381: LD_VAR 0 3
31385: PUSH
31386: LD_VAR 0 2
31390: ARRAY
31391: PUSH
31392: LD_INT 4
31394: ARRAY
31395: STR
31396: PUSH
31397: LD_STRING )
31399: STR
31400: PPUSH
31401: CALL_OW 559
31405: GO 31315
31407: POP
31408: POP
// end ; end ;
31409: LD_VAR 0 1
31413: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
31414: LD_INT 0
31416: PPUSH
// if HexInfo ( x , y ) = warehouse then
31417: LD_VAR 0 2
31421: PPUSH
31422: LD_VAR 0 3
31426: PPUSH
31427: CALL_OW 428
31431: PUSH
31432: LD_VAR 0 1
31436: EQUAL
31437: IFFALSE 31464
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
31439: LD_ADDR_EXP 96
31443: PUSH
31444: LD_EXP 96
31448: PPUSH
31449: LD_VAR 0 1
31453: PPUSH
31454: LD_INT 0
31456: PPUSH
31457: CALL_OW 1
31461: ST_TO_ADDR
31462: GO 31515
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
31464: LD_ADDR_EXP 96
31468: PUSH
31469: LD_EXP 96
31473: PPUSH
31474: LD_VAR 0 1
31478: PPUSH
31479: LD_VAR 0 1
31483: PPUSH
31484: CALL_OW 255
31488: PUSH
31489: LD_VAR 0 1
31493: PUSH
31494: LD_VAR 0 2
31498: PUSH
31499: LD_VAR 0 3
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: PPUSH
31510: CALL_OW 1
31514: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
31515: CALL 31524 0 0
// end ;
31519: LD_VAR 0 4
31523: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
31524: LD_INT 0
31526: PPUSH
31527: PPUSH
31528: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
31529: LD_STRING resetWarehouseGatheringPoints();
31531: PPUSH
31532: CALL_OW 559
// if warehouseGatheringPoints then
31536: LD_EXP 96
31540: IFFALSE 31666
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
31542: LD_ADDR_VAR 0 3
31546: PUSH
31547: LD_EXP 96
31551: PPUSH
31552: CALL 77878 0 1
31556: ST_TO_ADDR
// for i := 1 to list do
31557: LD_ADDR_VAR 0 2
31561: PUSH
31562: DOUBLE
31563: LD_INT 1
31565: DEC
31566: ST_TO_ADDR
31567: LD_VAR 0 3
31571: PUSH
31572: FOR_TO
31573: IFFALSE 31664
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31575: LD_STRING setWarehouseGatheringPointXY(
31577: PUSH
31578: LD_VAR 0 3
31582: PUSH
31583: LD_VAR 0 2
31587: ARRAY
31588: PUSH
31589: LD_INT 1
31591: ARRAY
31592: STR
31593: PUSH
31594: LD_STRING ,
31596: STR
31597: PUSH
31598: LD_VAR 0 3
31602: PUSH
31603: LD_VAR 0 2
31607: ARRAY
31608: PUSH
31609: LD_INT 2
31611: ARRAY
31612: STR
31613: PUSH
31614: LD_STRING ,
31616: STR
31617: PUSH
31618: LD_VAR 0 3
31622: PUSH
31623: LD_VAR 0 2
31627: ARRAY
31628: PUSH
31629: LD_INT 3
31631: ARRAY
31632: STR
31633: PUSH
31634: LD_STRING ,
31636: STR
31637: PUSH
31638: LD_VAR 0 3
31642: PUSH
31643: LD_VAR 0 2
31647: ARRAY
31648: PUSH
31649: LD_INT 4
31651: ARRAY
31652: STR
31653: PUSH
31654: LD_STRING )
31656: STR
31657: PPUSH
31658: CALL_OW 559
31662: GO 31572
31664: POP
31665: POP
// end ; end ;
31666: LD_VAR 0 1
31670: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
31671: LD_EXP 96
31675: IFFALSE 32360
31677: GO 31679
31679: DISABLE
31680: LD_INT 0
31682: PPUSH
31683: PPUSH
31684: PPUSH
31685: PPUSH
31686: PPUSH
31687: PPUSH
31688: PPUSH
31689: PPUSH
31690: PPUSH
// begin enable ;
31691: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
31692: LD_ADDR_VAR 0 3
31696: PUSH
31697: LD_EXP 96
31701: PPUSH
31702: CALL 77878 0 1
31706: ST_TO_ADDR
// if not list then
31707: LD_VAR 0 3
31711: NOT
31712: IFFALSE 31716
// exit ;
31714: GO 32360
// for i := 1 to list do
31716: LD_ADDR_VAR 0 1
31720: PUSH
31721: DOUBLE
31722: LD_INT 1
31724: DEC
31725: ST_TO_ADDR
31726: LD_VAR 0 3
31730: PUSH
31731: FOR_TO
31732: IFFALSE 32358
// begin depot := list [ i ] [ 2 ] ;
31734: LD_ADDR_VAR 0 8
31738: PUSH
31739: LD_VAR 0 3
31743: PUSH
31744: LD_VAR 0 1
31748: ARRAY
31749: PUSH
31750: LD_INT 2
31752: ARRAY
31753: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
31754: LD_ADDR_VAR 0 5
31758: PUSH
31759: LD_VAR 0 3
31763: PUSH
31764: LD_VAR 0 1
31768: ARRAY
31769: PUSH
31770: LD_INT 1
31772: ARRAY
31773: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
31774: LD_VAR 0 8
31778: PPUSH
31779: CALL_OW 301
31783: PUSH
31784: LD_VAR 0 5
31788: PUSH
31789: LD_VAR 0 8
31793: PPUSH
31794: CALL_OW 255
31798: NONEQUAL
31799: OR
31800: IFFALSE 31829
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
31802: LD_ADDR_EXP 96
31806: PUSH
31807: LD_EXP 96
31811: PPUSH
31812: LD_VAR 0 8
31816: PPUSH
31817: LD_INT 0
31819: PPUSH
31820: CALL_OW 1
31824: ST_TO_ADDR
// exit ;
31825: POP
31826: POP
31827: GO 32360
// end ; x := list [ i ] [ 3 ] ;
31829: LD_ADDR_VAR 0 6
31833: PUSH
31834: LD_VAR 0 3
31838: PUSH
31839: LD_VAR 0 1
31843: ARRAY
31844: PUSH
31845: LD_INT 3
31847: ARRAY
31848: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
31849: LD_ADDR_VAR 0 7
31853: PUSH
31854: LD_VAR 0 3
31858: PUSH
31859: LD_VAR 0 1
31863: ARRAY
31864: PUSH
31865: LD_INT 4
31867: ARRAY
31868: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
31869: LD_ADDR_VAR 0 9
31873: PUSH
31874: LD_VAR 0 6
31878: PPUSH
31879: LD_VAR 0 7
31883: PPUSH
31884: LD_INT 16
31886: PPUSH
31887: CALL 76466 0 3
31891: ST_TO_ADDR
// if not cratesNearbyPoint then
31892: LD_VAR 0 9
31896: NOT
31897: IFFALSE 31903
// exit ;
31899: POP
31900: POP
31901: GO 32360
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
31903: LD_ADDR_VAR 0 4
31907: PUSH
31908: LD_INT 22
31910: PUSH
31911: LD_VAR 0 5
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 3
31922: PUSH
31923: LD_INT 60
31925: PUSH
31926: EMPTY
31927: LIST
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 91
31935: PUSH
31936: LD_VAR 0 8
31940: PUSH
31941: LD_INT 6
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 2
31951: PUSH
31952: LD_INT 25
31954: PUSH
31955: LD_INT 2
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 25
31964: PUSH
31965: LD_INT 16
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: LIST
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: PPUSH
31983: CALL_OW 69
31987: PUSH
31988: LD_VAR 0 8
31992: PPUSH
31993: CALL_OW 313
31997: PPUSH
31998: LD_INT 3
32000: PUSH
32001: LD_INT 60
32003: PUSH
32004: EMPTY
32005: LIST
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 2
32013: PUSH
32014: LD_INT 25
32016: PUSH
32017: LD_INT 2
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 25
32026: PUSH
32027: LD_INT 16
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: LIST
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PPUSH
32043: CALL_OW 72
32047: UNION
32048: ST_TO_ADDR
// if tmp then
32049: LD_VAR 0 4
32053: IFFALSE 32133
// begin tmp := ShrinkArray ( tmp , 3 ) ;
32055: LD_ADDR_VAR 0 4
32059: PUSH
32060: LD_VAR 0 4
32064: PPUSH
32065: LD_INT 3
32067: PPUSH
32068: CALL 74435 0 2
32072: ST_TO_ADDR
// for j in tmp do
32073: LD_ADDR_VAR 0 2
32077: PUSH
32078: LD_VAR 0 4
32082: PUSH
32083: FOR_IN
32084: IFFALSE 32127
// begin if IsInUnit ( j ) then
32086: LD_VAR 0 2
32090: PPUSH
32091: CALL_OW 310
32095: IFFALSE 32106
// ComExit ( j ) ;
32097: LD_VAR 0 2
32101: PPUSH
32102: CALL 74518 0 1
// AddComCollect ( j , x , y ) ;
32106: LD_VAR 0 2
32110: PPUSH
32111: LD_VAR 0 6
32115: PPUSH
32116: LD_VAR 0 7
32120: PPUSH
32121: CALL_OW 177
// end ;
32125: GO 32083
32127: POP
32128: POP
// exit ;
32129: POP
32130: POP
32131: GO 32360
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
32133: LD_ADDR_VAR 0 4
32137: PUSH
32138: LD_INT 22
32140: PUSH
32141: LD_VAR 0 5
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 91
32152: PUSH
32153: LD_VAR 0 8
32157: PUSH
32158: LD_INT 8
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 2
32168: PUSH
32169: LD_INT 34
32171: PUSH
32172: LD_INT 12
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 34
32181: PUSH
32182: LD_INT 51
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 34
32191: PUSH
32192: LD_INT 32
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 34
32201: PUSH
32202: LD_INT 89
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: LIST
32220: PPUSH
32221: CALL_OW 69
32225: ST_TO_ADDR
// if tmp then
32226: LD_VAR 0 4
32230: IFFALSE 32356
// begin for j in tmp do
32232: LD_ADDR_VAR 0 2
32236: PUSH
32237: LD_VAR 0 4
32241: PUSH
32242: FOR_IN
32243: IFFALSE 32354
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
32245: LD_VAR 0 2
32249: PPUSH
32250: CALL_OW 262
32254: PUSH
32255: LD_INT 3
32257: EQUAL
32258: PUSH
32259: LD_VAR 0 2
32263: PPUSH
32264: CALL_OW 261
32268: PUSH
32269: LD_INT 20
32271: GREATER
32272: OR
32273: PUSH
32274: LD_VAR 0 2
32278: PPUSH
32279: CALL_OW 314
32283: NOT
32284: AND
32285: PUSH
32286: LD_VAR 0 2
32290: PPUSH
32291: CALL_OW 263
32295: PUSH
32296: LD_INT 1
32298: NONEQUAL
32299: PUSH
32300: LD_VAR 0 2
32304: PPUSH
32305: CALL_OW 311
32309: OR
32310: AND
32311: IFFALSE 32352
// begin ComCollect ( j , x , y ) ;
32313: LD_VAR 0 2
32317: PPUSH
32318: LD_VAR 0 6
32322: PPUSH
32323: LD_VAR 0 7
32327: PPUSH
32328: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
32332: LD_VAR 0 2
32336: PPUSH
32337: LD_VAR 0 8
32341: PPUSH
32342: CALL_OW 172
// exit ;
32346: POP
32347: POP
32348: POP
32349: POP
32350: GO 32360
// end ;
32352: GO 32242
32354: POP
32355: POP
// end ; end ;
32356: GO 31731
32358: POP
32359: POP
// end ; end_of_file
32360: PPOPN 9
32362: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32363: LD_INT 0
32365: PPUSH
32366: PPUSH
32367: PPUSH
32368: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32369: LD_VAR 0 1
32373: PPUSH
32374: CALL_OW 264
32378: PUSH
32379: LD_INT 91
32381: EQUAL
32382: IFFALSE 32454
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32384: LD_INT 68
32386: PPUSH
32387: LD_VAR 0 1
32391: PPUSH
32392: CALL_OW 255
32396: PPUSH
32397: CALL_OW 321
32401: PUSH
32402: LD_INT 2
32404: EQUAL
32405: IFFALSE 32417
// eff := 70 else
32407: LD_ADDR_VAR 0 4
32411: PUSH
32412: LD_INT 70
32414: ST_TO_ADDR
32415: GO 32425
// eff := 30 ;
32417: LD_ADDR_VAR 0 4
32421: PUSH
32422: LD_INT 30
32424: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32425: LD_VAR 0 1
32429: PPUSH
32430: CALL_OW 250
32434: PPUSH
32435: LD_VAR 0 1
32439: PPUSH
32440: CALL_OW 251
32444: PPUSH
32445: LD_VAR 0 4
32449: PPUSH
32450: CALL_OW 495
// end ; end ;
32454: LD_VAR 0 2
32458: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32459: LD_INT 0
32461: PPUSH
// end ;
32462: LD_VAR 0 4
32466: RET
// export function SOS_Command ( cmd ) ; begin
32467: LD_INT 0
32469: PPUSH
// end ;
32470: LD_VAR 0 2
32474: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32475: LD_INT 0
32477: PPUSH
// end ;
32478: LD_VAR 0 6
32482: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
32483: LD_INT 0
32485: PPUSH
32486: PPUSH
// if not vehicle or not factory then
32487: LD_VAR 0 1
32491: NOT
32492: PUSH
32493: LD_VAR 0 2
32497: NOT
32498: OR
32499: IFFALSE 32503
// exit ;
32501: GO 32734
// if factoryWaypoints >= factory then
32503: LD_EXP 95
32507: PUSH
32508: LD_VAR 0 2
32512: GREATEREQUAL
32513: IFFALSE 32734
// if factoryWaypoints [ factory ] then
32515: LD_EXP 95
32519: PUSH
32520: LD_VAR 0 2
32524: ARRAY
32525: IFFALSE 32734
// begin if GetControl ( vehicle ) = control_manual then
32527: LD_VAR 0 1
32531: PPUSH
32532: CALL_OW 263
32536: PUSH
32537: LD_INT 1
32539: EQUAL
32540: IFFALSE 32621
// begin driver := IsDrivenBy ( vehicle ) ;
32542: LD_ADDR_VAR 0 4
32546: PUSH
32547: LD_VAR 0 1
32551: PPUSH
32552: CALL_OW 311
32556: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32557: LD_VAR 0 4
32561: PPUSH
32562: LD_EXP 95
32566: PUSH
32567: LD_VAR 0 2
32571: ARRAY
32572: PUSH
32573: LD_INT 3
32575: ARRAY
32576: PPUSH
32577: LD_EXP 95
32581: PUSH
32582: LD_VAR 0 2
32586: ARRAY
32587: PUSH
32588: LD_INT 4
32590: ARRAY
32591: PPUSH
32592: CALL_OW 171
// AddComExitVehicle ( driver ) ;
32596: LD_VAR 0 4
32600: PPUSH
32601: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
32605: LD_VAR 0 4
32609: PPUSH
32610: LD_VAR 0 2
32614: PPUSH
32615: CALL_OW 180
// end else
32619: GO 32734
// if GetControl ( vehicle ) = control_remote then
32621: LD_VAR 0 1
32625: PPUSH
32626: CALL_OW 263
32630: PUSH
32631: LD_INT 2
32633: EQUAL
32634: IFFALSE 32695
// begin wait ( 0 0$2 ) ;
32636: LD_INT 70
32638: PPUSH
32639: CALL_OW 67
// if Connect ( vehicle ) then
32643: LD_VAR 0 1
32647: PPUSH
32648: CALL 44758 0 1
32652: IFFALSE 32693
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32654: LD_VAR 0 1
32658: PPUSH
32659: LD_EXP 95
32663: PUSH
32664: LD_VAR 0 2
32668: ARRAY
32669: PUSH
32670: LD_INT 3
32672: ARRAY
32673: PPUSH
32674: LD_EXP 95
32678: PUSH
32679: LD_VAR 0 2
32683: ARRAY
32684: PUSH
32685: LD_INT 4
32687: ARRAY
32688: PPUSH
32689: CALL_OW 171
// end else
32693: GO 32734
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32695: LD_VAR 0 1
32699: PPUSH
32700: LD_EXP 95
32704: PUSH
32705: LD_VAR 0 2
32709: ARRAY
32710: PUSH
32711: LD_INT 3
32713: ARRAY
32714: PPUSH
32715: LD_EXP 95
32719: PUSH
32720: LD_VAR 0 2
32724: ARRAY
32725: PUSH
32726: LD_INT 4
32728: ARRAY
32729: PPUSH
32730: CALL_OW 171
// end ; end ;
32734: LD_VAR 0 3
32738: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32739: LD_INT 0
32741: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32742: LD_VAR 0 1
32746: PUSH
32747: LD_INT 250
32749: EQUAL
32750: PUSH
32751: LD_VAR 0 2
32755: PPUSH
32756: CALL_OW 264
32760: PUSH
32761: LD_INT 81
32763: EQUAL
32764: AND
32765: IFFALSE 32786
// MinerPlaceMine ( unit , x , y ) ;
32767: LD_VAR 0 2
32771: PPUSH
32772: LD_VAR 0 4
32776: PPUSH
32777: LD_VAR 0 5
32781: PPUSH
32782: CALL 35171 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32786: LD_VAR 0 1
32790: PUSH
32791: LD_INT 251
32793: EQUAL
32794: PUSH
32795: LD_VAR 0 2
32799: PPUSH
32800: CALL_OW 264
32804: PUSH
32805: LD_INT 81
32807: EQUAL
32808: AND
32809: IFFALSE 32830
// MinerDetonateMine ( unit , x , y ) ;
32811: LD_VAR 0 2
32815: PPUSH
32816: LD_VAR 0 4
32820: PPUSH
32821: LD_VAR 0 5
32825: PPUSH
32826: CALL 35446 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32830: LD_VAR 0 1
32834: PUSH
32835: LD_INT 252
32837: EQUAL
32838: PUSH
32839: LD_VAR 0 2
32843: PPUSH
32844: CALL_OW 264
32848: PUSH
32849: LD_INT 81
32851: EQUAL
32852: AND
32853: IFFALSE 32874
// MinerCreateMinefield ( unit , x , y ) ;
32855: LD_VAR 0 2
32859: PPUSH
32860: LD_VAR 0 4
32864: PPUSH
32865: LD_VAR 0 5
32869: PPUSH
32870: CALL 35863 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32874: LD_VAR 0 1
32878: PUSH
32879: LD_INT 253
32881: EQUAL
32882: PUSH
32883: LD_VAR 0 2
32887: PPUSH
32888: CALL_OW 257
32892: PUSH
32893: LD_INT 5
32895: EQUAL
32896: AND
32897: IFFALSE 32918
// ComBinocular ( unit , x , y ) ;
32899: LD_VAR 0 2
32903: PPUSH
32904: LD_VAR 0 4
32908: PPUSH
32909: LD_VAR 0 5
32913: PPUSH
32914: CALL 36232 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32918: LD_VAR 0 1
32922: PUSH
32923: LD_INT 254
32925: EQUAL
32926: PUSH
32927: LD_VAR 0 2
32931: PPUSH
32932: CALL_OW 264
32936: PUSH
32937: LD_INT 99
32939: EQUAL
32940: AND
32941: PUSH
32942: LD_VAR 0 3
32946: PPUSH
32947: CALL_OW 263
32951: PUSH
32952: LD_INT 3
32954: EQUAL
32955: AND
32956: IFFALSE 32972
// HackDestroyVehicle ( unit , selectedUnit ) ;
32958: LD_VAR 0 2
32962: PPUSH
32963: LD_VAR 0 3
32967: PPUSH
32968: CALL 34535 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32972: LD_VAR 0 1
32976: PUSH
32977: LD_INT 255
32979: EQUAL
32980: PUSH
32981: LD_VAR 0 2
32985: PPUSH
32986: CALL_OW 264
32990: PUSH
32991: LD_INT 14
32993: PUSH
32994: LD_INT 53
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: IN
33001: AND
33002: PUSH
33003: LD_VAR 0 4
33007: PPUSH
33008: LD_VAR 0 5
33012: PPUSH
33013: CALL_OW 488
33017: AND
33018: IFFALSE 33042
// CutTreeXYR ( unit , x , y , 12 ) ;
33020: LD_VAR 0 2
33024: PPUSH
33025: LD_VAR 0 4
33029: PPUSH
33030: LD_VAR 0 5
33034: PPUSH
33035: LD_INT 12
33037: PPUSH
33038: CALL 33105 0 4
// if cmd = 256 then
33042: LD_VAR 0 1
33046: PUSH
33047: LD_INT 256
33049: EQUAL
33050: IFFALSE 33071
// SetFactoryWaypoint ( unit , x , y ) ;
33052: LD_VAR 0 2
33056: PPUSH
33057: LD_VAR 0 4
33061: PPUSH
33062: LD_VAR 0 5
33066: PPUSH
33067: CALL 31052 0 3
// if cmd = 257 then
33071: LD_VAR 0 1
33075: PUSH
33076: LD_INT 257
33078: EQUAL
33079: IFFALSE 33100
// SetWarehouseGatheringPoint ( unit , x , y ) ;
33081: LD_VAR 0 2
33085: PPUSH
33086: LD_VAR 0 4
33090: PPUSH
33091: LD_VAR 0 5
33095: PPUSH
33096: CALL 31414 0 3
// end ;
33100: LD_VAR 0 6
33104: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33105: LD_INT 0
33107: PPUSH
33108: PPUSH
33109: PPUSH
33110: PPUSH
33111: PPUSH
33112: PPUSH
33113: PPUSH
33114: PPUSH
33115: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33116: LD_VAR 0 1
33120: NOT
33121: PUSH
33122: LD_VAR 0 2
33126: PPUSH
33127: LD_VAR 0 3
33131: PPUSH
33132: CALL_OW 488
33136: NOT
33137: OR
33138: PUSH
33139: LD_VAR 0 4
33143: NOT
33144: OR
33145: IFFALSE 33149
// exit ;
33147: GO 33489
// list := [ ] ;
33149: LD_ADDR_VAR 0 13
33153: PUSH
33154: EMPTY
33155: ST_TO_ADDR
// if x - r < 0 then
33156: LD_VAR 0 2
33160: PUSH
33161: LD_VAR 0 4
33165: MINUS
33166: PUSH
33167: LD_INT 0
33169: LESS
33170: IFFALSE 33182
// min_x := 0 else
33172: LD_ADDR_VAR 0 7
33176: PUSH
33177: LD_INT 0
33179: ST_TO_ADDR
33180: GO 33198
// min_x := x - r ;
33182: LD_ADDR_VAR 0 7
33186: PUSH
33187: LD_VAR 0 2
33191: PUSH
33192: LD_VAR 0 4
33196: MINUS
33197: ST_TO_ADDR
// if y - r < 0 then
33198: LD_VAR 0 3
33202: PUSH
33203: LD_VAR 0 4
33207: MINUS
33208: PUSH
33209: LD_INT 0
33211: LESS
33212: IFFALSE 33224
// min_y := 0 else
33214: LD_ADDR_VAR 0 8
33218: PUSH
33219: LD_INT 0
33221: ST_TO_ADDR
33222: GO 33240
// min_y := y - r ;
33224: LD_ADDR_VAR 0 8
33228: PUSH
33229: LD_VAR 0 3
33233: PUSH
33234: LD_VAR 0 4
33238: MINUS
33239: ST_TO_ADDR
// max_x := x + r ;
33240: LD_ADDR_VAR 0 9
33244: PUSH
33245: LD_VAR 0 2
33249: PUSH
33250: LD_VAR 0 4
33254: PLUS
33255: ST_TO_ADDR
// max_y := y + r ;
33256: LD_ADDR_VAR 0 10
33260: PUSH
33261: LD_VAR 0 3
33265: PUSH
33266: LD_VAR 0 4
33270: PLUS
33271: ST_TO_ADDR
// for _x = min_x to max_x do
33272: LD_ADDR_VAR 0 11
33276: PUSH
33277: DOUBLE
33278: LD_VAR 0 7
33282: DEC
33283: ST_TO_ADDR
33284: LD_VAR 0 9
33288: PUSH
33289: FOR_TO
33290: IFFALSE 33407
// for _y = min_y to max_y do
33292: LD_ADDR_VAR 0 12
33296: PUSH
33297: DOUBLE
33298: LD_VAR 0 8
33302: DEC
33303: ST_TO_ADDR
33304: LD_VAR 0 10
33308: PUSH
33309: FOR_TO
33310: IFFALSE 33403
// begin if not ValidHex ( _x , _y ) then
33312: LD_VAR 0 11
33316: PPUSH
33317: LD_VAR 0 12
33321: PPUSH
33322: CALL_OW 488
33326: NOT
33327: IFFALSE 33331
// continue ;
33329: GO 33309
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33331: LD_VAR 0 11
33335: PPUSH
33336: LD_VAR 0 12
33340: PPUSH
33341: CALL_OW 351
33345: PUSH
33346: LD_VAR 0 11
33350: PPUSH
33351: LD_VAR 0 12
33355: PPUSH
33356: CALL_OW 554
33360: AND
33361: IFFALSE 33401
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33363: LD_ADDR_VAR 0 13
33367: PUSH
33368: LD_VAR 0 13
33372: PPUSH
33373: LD_VAR 0 13
33377: PUSH
33378: LD_INT 1
33380: PLUS
33381: PPUSH
33382: LD_VAR 0 11
33386: PUSH
33387: LD_VAR 0 12
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PPUSH
33396: CALL_OW 2
33400: ST_TO_ADDR
// end ;
33401: GO 33309
33403: POP
33404: POP
33405: GO 33289
33407: POP
33408: POP
// if not list then
33409: LD_VAR 0 13
33413: NOT
33414: IFFALSE 33418
// exit ;
33416: GO 33489
// for i in list do
33418: LD_ADDR_VAR 0 6
33422: PUSH
33423: LD_VAR 0 13
33427: PUSH
33428: FOR_IN
33429: IFFALSE 33487
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33431: LD_VAR 0 1
33435: PPUSH
33436: LD_STRING M
33438: PUSH
33439: LD_VAR 0 6
33443: PUSH
33444: LD_INT 1
33446: ARRAY
33447: PUSH
33448: LD_VAR 0 6
33452: PUSH
33453: LD_INT 2
33455: ARRAY
33456: PUSH
33457: LD_INT 0
33459: PUSH
33460: LD_INT 0
33462: PUSH
33463: LD_INT 0
33465: PUSH
33466: LD_INT 0
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: PUSH
33478: EMPTY
33479: LIST
33480: PPUSH
33481: CALL_OW 447
33485: GO 33428
33487: POP
33488: POP
// end ;
33489: LD_VAR 0 5
33493: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33494: LD_EXP 98
33498: NOT
33499: IFFALSE 33549
33501: GO 33503
33503: DISABLE
// begin initHack := true ;
33504: LD_ADDR_EXP 98
33508: PUSH
33509: LD_INT 1
33511: ST_TO_ADDR
// hackTanks := [ ] ;
33512: LD_ADDR_EXP 99
33516: PUSH
33517: EMPTY
33518: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33519: LD_ADDR_EXP 100
33523: PUSH
33524: EMPTY
33525: ST_TO_ADDR
// hackLimit := 3 ;
33526: LD_ADDR_EXP 101
33530: PUSH
33531: LD_INT 3
33533: ST_TO_ADDR
// hackDist := 12 ;
33534: LD_ADDR_EXP 102
33538: PUSH
33539: LD_INT 12
33541: ST_TO_ADDR
// hackCounter := [ ] ;
33542: LD_ADDR_EXP 103
33546: PUSH
33547: EMPTY
33548: ST_TO_ADDR
// end ;
33549: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33550: LD_EXP 98
33554: PUSH
33555: LD_INT 34
33557: PUSH
33558: LD_INT 99
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PPUSH
33565: CALL_OW 69
33569: AND
33570: IFFALSE 33823
33572: GO 33574
33574: DISABLE
33575: LD_INT 0
33577: PPUSH
33578: PPUSH
// begin enable ;
33579: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33580: LD_ADDR_VAR 0 1
33584: PUSH
33585: LD_INT 34
33587: PUSH
33588: LD_INT 99
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PPUSH
33595: CALL_OW 69
33599: PUSH
33600: FOR_IN
33601: IFFALSE 33821
// begin if not i in hackTanks then
33603: LD_VAR 0 1
33607: PUSH
33608: LD_EXP 99
33612: IN
33613: NOT
33614: IFFALSE 33697
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33616: LD_ADDR_EXP 99
33620: PUSH
33621: LD_EXP 99
33625: PPUSH
33626: LD_EXP 99
33630: PUSH
33631: LD_INT 1
33633: PLUS
33634: PPUSH
33635: LD_VAR 0 1
33639: PPUSH
33640: CALL_OW 1
33644: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33645: LD_ADDR_EXP 100
33649: PUSH
33650: LD_EXP 100
33654: PPUSH
33655: LD_EXP 100
33659: PUSH
33660: LD_INT 1
33662: PLUS
33663: PPUSH
33664: EMPTY
33665: PPUSH
33666: CALL_OW 1
33670: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33671: LD_ADDR_EXP 103
33675: PUSH
33676: LD_EXP 103
33680: PPUSH
33681: LD_EXP 103
33685: PUSH
33686: LD_INT 1
33688: PLUS
33689: PPUSH
33690: EMPTY
33691: PPUSH
33692: CALL_OW 1
33696: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33697: LD_VAR 0 1
33701: PPUSH
33702: CALL_OW 302
33706: NOT
33707: IFFALSE 33720
// begin HackUnlinkAll ( i ) ;
33709: LD_VAR 0 1
33713: PPUSH
33714: CALL 33826 0 1
// continue ;
33718: GO 33600
// end ; HackCheckCapturedStatus ( i ) ;
33720: LD_VAR 0 1
33724: PPUSH
33725: CALL 34269 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33729: LD_ADDR_VAR 0 2
33733: PUSH
33734: LD_INT 81
33736: PUSH
33737: LD_VAR 0 1
33741: PPUSH
33742: CALL_OW 255
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 33
33753: PUSH
33754: LD_INT 3
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 91
33763: PUSH
33764: LD_VAR 0 1
33768: PUSH
33769: LD_EXP 102
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 50
33781: PUSH
33782: EMPTY
33783: LIST
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: PPUSH
33791: CALL_OW 69
33795: ST_TO_ADDR
// if not tmp then
33796: LD_VAR 0 2
33800: NOT
33801: IFFALSE 33805
// continue ;
33803: GO 33600
// HackLink ( i , tmp ) ;
33805: LD_VAR 0 1
33809: PPUSH
33810: LD_VAR 0 2
33814: PPUSH
33815: CALL 33962 0 2
// end ;
33819: GO 33600
33821: POP
33822: POP
// end ;
33823: PPOPN 2
33825: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33826: LD_INT 0
33828: PPUSH
33829: PPUSH
33830: PPUSH
// if not hack in hackTanks then
33831: LD_VAR 0 1
33835: PUSH
33836: LD_EXP 99
33840: IN
33841: NOT
33842: IFFALSE 33846
// exit ;
33844: GO 33957
// index := GetElementIndex ( hackTanks , hack ) ;
33846: LD_ADDR_VAR 0 4
33850: PUSH
33851: LD_EXP 99
33855: PPUSH
33856: LD_VAR 0 1
33860: PPUSH
33861: CALL 41574 0 2
33865: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33866: LD_EXP 100
33870: PUSH
33871: LD_VAR 0 4
33875: ARRAY
33876: IFFALSE 33957
// begin for i in hackTanksCaptured [ index ] do
33878: LD_ADDR_VAR 0 3
33882: PUSH
33883: LD_EXP 100
33887: PUSH
33888: LD_VAR 0 4
33892: ARRAY
33893: PUSH
33894: FOR_IN
33895: IFFALSE 33921
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33897: LD_VAR 0 3
33901: PUSH
33902: LD_INT 1
33904: ARRAY
33905: PPUSH
33906: LD_VAR 0 3
33910: PUSH
33911: LD_INT 2
33913: ARRAY
33914: PPUSH
33915: CALL_OW 235
33919: GO 33894
33921: POP
33922: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33923: LD_ADDR_EXP 100
33927: PUSH
33928: LD_EXP 100
33932: PPUSH
33933: LD_VAR 0 4
33937: PPUSH
33938: EMPTY
33939: PPUSH
33940: CALL_OW 1
33944: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33945: LD_VAR 0 1
33949: PPUSH
33950: LD_INT 0
33952: PPUSH
33953: CALL_OW 505
// end ; end ;
33957: LD_VAR 0 2
33961: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33962: LD_INT 0
33964: PPUSH
33965: PPUSH
33966: PPUSH
// if not hack in hackTanks or not vehicles then
33967: LD_VAR 0 1
33971: PUSH
33972: LD_EXP 99
33976: IN
33977: NOT
33978: PUSH
33979: LD_VAR 0 2
33983: NOT
33984: OR
33985: IFFALSE 33989
// exit ;
33987: GO 34264
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33989: LD_ADDR_VAR 0 2
33993: PUSH
33994: LD_VAR 0 1
33998: PPUSH
33999: LD_VAR 0 2
34003: PPUSH
34004: LD_INT 1
34006: PPUSH
34007: LD_INT 1
34009: PPUSH
34010: CALL 42224 0 4
34014: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34015: LD_ADDR_VAR 0 5
34019: PUSH
34020: LD_EXP 99
34024: PPUSH
34025: LD_VAR 0 1
34029: PPUSH
34030: CALL 41574 0 2
34034: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34035: LD_EXP 100
34039: PUSH
34040: LD_VAR 0 5
34044: ARRAY
34045: PUSH
34046: LD_EXP 101
34050: LESS
34051: IFFALSE 34240
// begin for i := 1 to vehicles do
34053: LD_ADDR_VAR 0 4
34057: PUSH
34058: DOUBLE
34059: LD_INT 1
34061: DEC
34062: ST_TO_ADDR
34063: LD_VAR 0 2
34067: PUSH
34068: FOR_TO
34069: IFFALSE 34238
// begin if hackTanksCaptured [ index ] = hackLimit then
34071: LD_EXP 100
34075: PUSH
34076: LD_VAR 0 5
34080: ARRAY
34081: PUSH
34082: LD_EXP 101
34086: EQUAL
34087: IFFALSE 34091
// break ;
34089: GO 34238
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34091: LD_ADDR_EXP 103
34095: PUSH
34096: LD_EXP 103
34100: PPUSH
34101: LD_VAR 0 5
34105: PPUSH
34106: LD_EXP 103
34110: PUSH
34111: LD_VAR 0 5
34115: ARRAY
34116: PUSH
34117: LD_INT 1
34119: PLUS
34120: PPUSH
34121: CALL_OW 1
34125: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34126: LD_ADDR_EXP 100
34130: PUSH
34131: LD_EXP 100
34135: PPUSH
34136: LD_VAR 0 5
34140: PUSH
34141: LD_EXP 100
34145: PUSH
34146: LD_VAR 0 5
34150: ARRAY
34151: PUSH
34152: LD_INT 1
34154: PLUS
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PPUSH
34160: LD_VAR 0 2
34164: PUSH
34165: LD_VAR 0 4
34169: ARRAY
34170: PUSH
34171: LD_VAR 0 2
34175: PUSH
34176: LD_VAR 0 4
34180: ARRAY
34181: PPUSH
34182: CALL_OW 255
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PPUSH
34191: CALL 41789 0 3
34195: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34196: LD_VAR 0 2
34200: PUSH
34201: LD_VAR 0 4
34205: ARRAY
34206: PPUSH
34207: LD_VAR 0 1
34211: PPUSH
34212: CALL_OW 255
34216: PPUSH
34217: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34221: LD_VAR 0 2
34225: PUSH
34226: LD_VAR 0 4
34230: ARRAY
34231: PPUSH
34232: CALL_OW 141
// end ;
34236: GO 34068
34238: POP
34239: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34240: LD_VAR 0 1
34244: PPUSH
34245: LD_EXP 100
34249: PUSH
34250: LD_VAR 0 5
34254: ARRAY
34255: PUSH
34256: LD_INT 0
34258: PLUS
34259: PPUSH
34260: CALL_OW 505
// end ;
34264: LD_VAR 0 3
34268: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34269: LD_INT 0
34271: PPUSH
34272: PPUSH
34273: PPUSH
34274: PPUSH
// if not hack in hackTanks then
34275: LD_VAR 0 1
34279: PUSH
34280: LD_EXP 99
34284: IN
34285: NOT
34286: IFFALSE 34290
// exit ;
34288: GO 34530
// index := GetElementIndex ( hackTanks , hack ) ;
34290: LD_ADDR_VAR 0 4
34294: PUSH
34295: LD_EXP 99
34299: PPUSH
34300: LD_VAR 0 1
34304: PPUSH
34305: CALL 41574 0 2
34309: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34310: LD_ADDR_VAR 0 3
34314: PUSH
34315: DOUBLE
34316: LD_EXP 100
34320: PUSH
34321: LD_VAR 0 4
34325: ARRAY
34326: INC
34327: ST_TO_ADDR
34328: LD_INT 1
34330: PUSH
34331: FOR_DOWNTO
34332: IFFALSE 34504
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34334: LD_ADDR_VAR 0 5
34338: PUSH
34339: LD_EXP 100
34343: PUSH
34344: LD_VAR 0 4
34348: ARRAY
34349: PUSH
34350: LD_VAR 0 3
34354: ARRAY
34355: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34356: LD_VAR 0 5
34360: PUSH
34361: LD_INT 1
34363: ARRAY
34364: PPUSH
34365: CALL_OW 302
34369: NOT
34370: PUSH
34371: LD_VAR 0 5
34375: PUSH
34376: LD_INT 1
34378: ARRAY
34379: PPUSH
34380: CALL_OW 255
34384: PUSH
34385: LD_VAR 0 1
34389: PPUSH
34390: CALL_OW 255
34394: NONEQUAL
34395: OR
34396: IFFALSE 34502
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34398: LD_VAR 0 5
34402: PUSH
34403: LD_INT 1
34405: ARRAY
34406: PPUSH
34407: CALL_OW 305
34411: PUSH
34412: LD_VAR 0 5
34416: PUSH
34417: LD_INT 1
34419: ARRAY
34420: PPUSH
34421: CALL_OW 255
34425: PUSH
34426: LD_VAR 0 1
34430: PPUSH
34431: CALL_OW 255
34435: EQUAL
34436: AND
34437: IFFALSE 34461
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34439: LD_VAR 0 5
34443: PUSH
34444: LD_INT 1
34446: ARRAY
34447: PPUSH
34448: LD_VAR 0 5
34452: PUSH
34453: LD_INT 2
34455: ARRAY
34456: PPUSH
34457: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34461: LD_ADDR_EXP 100
34465: PUSH
34466: LD_EXP 100
34470: PPUSH
34471: LD_VAR 0 4
34475: PPUSH
34476: LD_EXP 100
34480: PUSH
34481: LD_VAR 0 4
34485: ARRAY
34486: PPUSH
34487: LD_VAR 0 3
34491: PPUSH
34492: CALL_OW 3
34496: PPUSH
34497: CALL_OW 1
34501: ST_TO_ADDR
// end ; end ;
34502: GO 34331
34504: POP
34505: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34506: LD_VAR 0 1
34510: PPUSH
34511: LD_EXP 100
34515: PUSH
34516: LD_VAR 0 4
34520: ARRAY
34521: PUSH
34522: LD_INT 0
34524: PLUS
34525: PPUSH
34526: CALL_OW 505
// end ;
34530: LD_VAR 0 2
34534: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34535: LD_INT 0
34537: PPUSH
34538: PPUSH
34539: PPUSH
34540: PPUSH
// if not hack in hackTanks then
34541: LD_VAR 0 1
34545: PUSH
34546: LD_EXP 99
34550: IN
34551: NOT
34552: IFFALSE 34556
// exit ;
34554: GO 34641
// index := GetElementIndex ( hackTanks , hack ) ;
34556: LD_ADDR_VAR 0 5
34560: PUSH
34561: LD_EXP 99
34565: PPUSH
34566: LD_VAR 0 1
34570: PPUSH
34571: CALL 41574 0 2
34575: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34576: LD_ADDR_VAR 0 4
34580: PUSH
34581: DOUBLE
34582: LD_INT 1
34584: DEC
34585: ST_TO_ADDR
34586: LD_EXP 100
34590: PUSH
34591: LD_VAR 0 5
34595: ARRAY
34596: PUSH
34597: FOR_TO
34598: IFFALSE 34639
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34600: LD_EXP 100
34604: PUSH
34605: LD_VAR 0 5
34609: ARRAY
34610: PUSH
34611: LD_VAR 0 4
34615: ARRAY
34616: PUSH
34617: LD_INT 1
34619: ARRAY
34620: PUSH
34621: LD_VAR 0 2
34625: EQUAL
34626: IFFALSE 34637
// KillUnit ( vehicle ) ;
34628: LD_VAR 0 2
34632: PPUSH
34633: CALL_OW 66
34637: GO 34597
34639: POP
34640: POP
// end ;
34641: LD_VAR 0 3
34645: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34646: LD_EXP 104
34650: NOT
34651: IFFALSE 34686
34653: GO 34655
34655: DISABLE
// begin initMiner := true ;
34656: LD_ADDR_EXP 104
34660: PUSH
34661: LD_INT 1
34663: ST_TO_ADDR
// minersList := [ ] ;
34664: LD_ADDR_EXP 105
34668: PUSH
34669: EMPTY
34670: ST_TO_ADDR
// minerMinesList := [ ] ;
34671: LD_ADDR_EXP 106
34675: PUSH
34676: EMPTY
34677: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34678: LD_ADDR_EXP 107
34682: PUSH
34683: LD_INT 5
34685: ST_TO_ADDR
// end ;
34686: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34687: LD_EXP 104
34691: PUSH
34692: LD_INT 34
34694: PUSH
34695: LD_INT 81
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PPUSH
34702: CALL_OW 69
34706: AND
34707: IFFALSE 35168
34709: GO 34711
34711: DISABLE
34712: LD_INT 0
34714: PPUSH
34715: PPUSH
34716: PPUSH
34717: PPUSH
// begin enable ;
34718: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34719: LD_ADDR_VAR 0 1
34723: PUSH
34724: LD_INT 34
34726: PUSH
34727: LD_INT 81
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PPUSH
34734: CALL_OW 69
34738: PUSH
34739: FOR_IN
34740: IFFALSE 34812
// begin if not i in minersList then
34742: LD_VAR 0 1
34746: PUSH
34747: LD_EXP 105
34751: IN
34752: NOT
34753: IFFALSE 34810
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34755: LD_ADDR_EXP 105
34759: PUSH
34760: LD_EXP 105
34764: PPUSH
34765: LD_EXP 105
34769: PUSH
34770: LD_INT 1
34772: PLUS
34773: PPUSH
34774: LD_VAR 0 1
34778: PPUSH
34779: CALL_OW 1
34783: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34784: LD_ADDR_EXP 106
34788: PUSH
34789: LD_EXP 106
34793: PPUSH
34794: LD_EXP 106
34798: PUSH
34799: LD_INT 1
34801: PLUS
34802: PPUSH
34803: EMPTY
34804: PPUSH
34805: CALL_OW 1
34809: ST_TO_ADDR
// end end ;
34810: GO 34739
34812: POP
34813: POP
// for i := minerMinesList downto 1 do
34814: LD_ADDR_VAR 0 1
34818: PUSH
34819: DOUBLE
34820: LD_EXP 106
34824: INC
34825: ST_TO_ADDR
34826: LD_INT 1
34828: PUSH
34829: FOR_DOWNTO
34830: IFFALSE 35166
// begin if IsLive ( minersList [ i ] ) then
34832: LD_EXP 105
34836: PUSH
34837: LD_VAR 0 1
34841: ARRAY
34842: PPUSH
34843: CALL_OW 300
34847: IFFALSE 34875
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34849: LD_EXP 105
34853: PUSH
34854: LD_VAR 0 1
34858: ARRAY
34859: PPUSH
34860: LD_EXP 106
34864: PUSH
34865: LD_VAR 0 1
34869: ARRAY
34870: PPUSH
34871: CALL_OW 505
// if not minerMinesList [ i ] then
34875: LD_EXP 106
34879: PUSH
34880: LD_VAR 0 1
34884: ARRAY
34885: NOT
34886: IFFALSE 34890
// continue ;
34888: GO 34829
// for j := minerMinesList [ i ] downto 1 do
34890: LD_ADDR_VAR 0 2
34894: PUSH
34895: DOUBLE
34896: LD_EXP 106
34900: PUSH
34901: LD_VAR 0 1
34905: ARRAY
34906: INC
34907: ST_TO_ADDR
34908: LD_INT 1
34910: PUSH
34911: FOR_DOWNTO
34912: IFFALSE 35162
// begin side := GetSide ( minersList [ i ] ) ;
34914: LD_ADDR_VAR 0 3
34918: PUSH
34919: LD_EXP 105
34923: PUSH
34924: LD_VAR 0 1
34928: ARRAY
34929: PPUSH
34930: CALL_OW 255
34934: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34935: LD_ADDR_VAR 0 4
34939: PUSH
34940: LD_EXP 106
34944: PUSH
34945: LD_VAR 0 1
34949: ARRAY
34950: PUSH
34951: LD_VAR 0 2
34955: ARRAY
34956: PUSH
34957: LD_INT 1
34959: ARRAY
34960: PPUSH
34961: LD_EXP 106
34965: PUSH
34966: LD_VAR 0 1
34970: ARRAY
34971: PUSH
34972: LD_VAR 0 2
34976: ARRAY
34977: PUSH
34978: LD_INT 2
34980: ARRAY
34981: PPUSH
34982: CALL_OW 428
34986: ST_TO_ADDR
// if not tmp then
34987: LD_VAR 0 4
34991: NOT
34992: IFFALSE 34996
// continue ;
34994: GO 34911
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34996: LD_VAR 0 4
35000: PUSH
35001: LD_INT 81
35003: PUSH
35004: LD_VAR 0 3
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PPUSH
35013: CALL_OW 69
35017: IN
35018: PUSH
35019: LD_EXP 106
35023: PUSH
35024: LD_VAR 0 1
35028: ARRAY
35029: PUSH
35030: LD_VAR 0 2
35034: ARRAY
35035: PUSH
35036: LD_INT 1
35038: ARRAY
35039: PPUSH
35040: LD_EXP 106
35044: PUSH
35045: LD_VAR 0 1
35049: ARRAY
35050: PUSH
35051: LD_VAR 0 2
35055: ARRAY
35056: PUSH
35057: LD_INT 2
35059: ARRAY
35060: PPUSH
35061: CALL_OW 458
35065: AND
35066: IFFALSE 35160
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35068: LD_EXP 106
35072: PUSH
35073: LD_VAR 0 1
35077: ARRAY
35078: PUSH
35079: LD_VAR 0 2
35083: ARRAY
35084: PUSH
35085: LD_INT 1
35087: ARRAY
35088: PPUSH
35089: LD_EXP 106
35093: PUSH
35094: LD_VAR 0 1
35098: ARRAY
35099: PUSH
35100: LD_VAR 0 2
35104: ARRAY
35105: PUSH
35106: LD_INT 2
35108: ARRAY
35109: PPUSH
35110: LD_VAR 0 3
35114: PPUSH
35115: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35119: LD_ADDR_EXP 106
35123: PUSH
35124: LD_EXP 106
35128: PPUSH
35129: LD_VAR 0 1
35133: PPUSH
35134: LD_EXP 106
35138: PUSH
35139: LD_VAR 0 1
35143: ARRAY
35144: PPUSH
35145: LD_VAR 0 2
35149: PPUSH
35150: CALL_OW 3
35154: PPUSH
35155: CALL_OW 1
35159: ST_TO_ADDR
// end ; end ;
35160: GO 34911
35162: POP
35163: POP
// end ;
35164: GO 34829
35166: POP
35167: POP
// end ;
35168: PPOPN 4
35170: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35171: LD_INT 0
35173: PPUSH
35174: PPUSH
// result := false ;
35175: LD_ADDR_VAR 0 4
35179: PUSH
35180: LD_INT 0
35182: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35183: LD_VAR 0 1
35187: PPUSH
35188: CALL_OW 264
35192: PUSH
35193: LD_INT 81
35195: EQUAL
35196: NOT
35197: IFFALSE 35201
// exit ;
35199: GO 35441
// index := GetElementIndex ( minersList , unit ) ;
35201: LD_ADDR_VAR 0 5
35205: PUSH
35206: LD_EXP 105
35210: PPUSH
35211: LD_VAR 0 1
35215: PPUSH
35216: CALL 41574 0 2
35220: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35221: LD_EXP 106
35225: PUSH
35226: LD_VAR 0 5
35230: ARRAY
35231: PUSH
35232: LD_EXP 107
35236: GREATEREQUAL
35237: IFFALSE 35241
// exit ;
35239: GO 35441
// ComMoveXY ( unit , x , y ) ;
35241: LD_VAR 0 1
35245: PPUSH
35246: LD_VAR 0 2
35250: PPUSH
35251: LD_VAR 0 3
35255: PPUSH
35256: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35260: LD_INT 35
35262: PPUSH
35263: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35267: LD_VAR 0 1
35271: PPUSH
35272: LD_VAR 0 2
35276: PPUSH
35277: LD_VAR 0 3
35281: PPUSH
35282: CALL 72929 0 3
35286: NOT
35287: PUSH
35288: LD_VAR 0 1
35292: PPUSH
35293: CALL_OW 314
35297: AND
35298: IFFALSE 35302
// exit ;
35300: GO 35441
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35302: LD_VAR 0 2
35306: PPUSH
35307: LD_VAR 0 3
35311: PPUSH
35312: CALL_OW 428
35316: PUSH
35317: LD_VAR 0 1
35321: EQUAL
35322: PUSH
35323: LD_VAR 0 1
35327: PPUSH
35328: CALL_OW 314
35332: NOT
35333: AND
35334: IFFALSE 35260
// PlaySoundXY ( x , y , PlantMine ) ;
35336: LD_VAR 0 2
35340: PPUSH
35341: LD_VAR 0 3
35345: PPUSH
35346: LD_STRING PlantMine
35348: PPUSH
35349: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35353: LD_VAR 0 2
35357: PPUSH
35358: LD_VAR 0 3
35362: PPUSH
35363: LD_VAR 0 1
35367: PPUSH
35368: CALL_OW 255
35372: PPUSH
35373: LD_INT 0
35375: PPUSH
35376: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35380: LD_ADDR_EXP 106
35384: PUSH
35385: LD_EXP 106
35389: PPUSH
35390: LD_VAR 0 5
35394: PUSH
35395: LD_EXP 106
35399: PUSH
35400: LD_VAR 0 5
35404: ARRAY
35405: PUSH
35406: LD_INT 1
35408: PLUS
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PPUSH
35414: LD_VAR 0 2
35418: PUSH
35419: LD_VAR 0 3
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PPUSH
35428: CALL 41789 0 3
35432: ST_TO_ADDR
// result := true ;
35433: LD_ADDR_VAR 0 4
35437: PUSH
35438: LD_INT 1
35440: ST_TO_ADDR
// end ;
35441: LD_VAR 0 4
35445: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35446: LD_INT 0
35448: PPUSH
35449: PPUSH
35450: PPUSH
// if not unit in minersList then
35451: LD_VAR 0 1
35455: PUSH
35456: LD_EXP 105
35460: IN
35461: NOT
35462: IFFALSE 35466
// exit ;
35464: GO 35858
// index := GetElementIndex ( minersList , unit ) ;
35466: LD_ADDR_VAR 0 6
35470: PUSH
35471: LD_EXP 105
35475: PPUSH
35476: LD_VAR 0 1
35480: PPUSH
35481: CALL 41574 0 2
35485: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35486: LD_ADDR_VAR 0 5
35490: PUSH
35491: DOUBLE
35492: LD_EXP 106
35496: PUSH
35497: LD_VAR 0 6
35501: ARRAY
35502: INC
35503: ST_TO_ADDR
35504: LD_INT 1
35506: PUSH
35507: FOR_DOWNTO
35508: IFFALSE 35669
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35510: LD_EXP 106
35514: PUSH
35515: LD_VAR 0 6
35519: ARRAY
35520: PUSH
35521: LD_VAR 0 5
35525: ARRAY
35526: PUSH
35527: LD_INT 1
35529: ARRAY
35530: PUSH
35531: LD_VAR 0 2
35535: EQUAL
35536: PUSH
35537: LD_EXP 106
35541: PUSH
35542: LD_VAR 0 6
35546: ARRAY
35547: PUSH
35548: LD_VAR 0 5
35552: ARRAY
35553: PUSH
35554: LD_INT 2
35556: ARRAY
35557: PUSH
35558: LD_VAR 0 3
35562: EQUAL
35563: AND
35564: IFFALSE 35667
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35566: LD_EXP 106
35570: PUSH
35571: LD_VAR 0 6
35575: ARRAY
35576: PUSH
35577: LD_VAR 0 5
35581: ARRAY
35582: PUSH
35583: LD_INT 1
35585: ARRAY
35586: PPUSH
35587: LD_EXP 106
35591: PUSH
35592: LD_VAR 0 6
35596: ARRAY
35597: PUSH
35598: LD_VAR 0 5
35602: ARRAY
35603: PUSH
35604: LD_INT 2
35606: ARRAY
35607: PPUSH
35608: LD_VAR 0 1
35612: PPUSH
35613: CALL_OW 255
35617: PPUSH
35618: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35622: LD_ADDR_EXP 106
35626: PUSH
35627: LD_EXP 106
35631: PPUSH
35632: LD_VAR 0 6
35636: PPUSH
35637: LD_EXP 106
35641: PUSH
35642: LD_VAR 0 6
35646: ARRAY
35647: PPUSH
35648: LD_VAR 0 5
35652: PPUSH
35653: CALL_OW 3
35657: PPUSH
35658: CALL_OW 1
35662: ST_TO_ADDR
// exit ;
35663: POP
35664: POP
35665: GO 35858
// end ; end ;
35667: GO 35507
35669: POP
35670: POP
// for i := minerMinesList [ index ] downto 1 do
35671: LD_ADDR_VAR 0 5
35675: PUSH
35676: DOUBLE
35677: LD_EXP 106
35681: PUSH
35682: LD_VAR 0 6
35686: ARRAY
35687: INC
35688: ST_TO_ADDR
35689: LD_INT 1
35691: PUSH
35692: FOR_DOWNTO
35693: IFFALSE 35856
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35695: LD_EXP 106
35699: PUSH
35700: LD_VAR 0 6
35704: ARRAY
35705: PUSH
35706: LD_VAR 0 5
35710: ARRAY
35711: PUSH
35712: LD_INT 1
35714: ARRAY
35715: PPUSH
35716: LD_EXP 106
35720: PUSH
35721: LD_VAR 0 6
35725: ARRAY
35726: PUSH
35727: LD_VAR 0 5
35731: ARRAY
35732: PUSH
35733: LD_INT 2
35735: ARRAY
35736: PPUSH
35737: LD_VAR 0 2
35741: PPUSH
35742: LD_VAR 0 3
35746: PPUSH
35747: CALL_OW 298
35751: PUSH
35752: LD_INT 6
35754: LESS
35755: IFFALSE 35854
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35757: LD_EXP 106
35761: PUSH
35762: LD_VAR 0 6
35766: ARRAY
35767: PUSH
35768: LD_VAR 0 5
35772: ARRAY
35773: PUSH
35774: LD_INT 1
35776: ARRAY
35777: PPUSH
35778: LD_EXP 106
35782: PUSH
35783: LD_VAR 0 6
35787: ARRAY
35788: PUSH
35789: LD_VAR 0 5
35793: ARRAY
35794: PUSH
35795: LD_INT 2
35797: ARRAY
35798: PPUSH
35799: LD_VAR 0 1
35803: PPUSH
35804: CALL_OW 255
35808: PPUSH
35809: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35813: LD_ADDR_EXP 106
35817: PUSH
35818: LD_EXP 106
35822: PPUSH
35823: LD_VAR 0 6
35827: PPUSH
35828: LD_EXP 106
35832: PUSH
35833: LD_VAR 0 6
35837: ARRAY
35838: PPUSH
35839: LD_VAR 0 5
35843: PPUSH
35844: CALL_OW 3
35848: PPUSH
35849: CALL_OW 1
35853: ST_TO_ADDR
// end ; end ;
35854: GO 35692
35856: POP
35857: POP
// end ;
35858: LD_VAR 0 4
35862: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35863: LD_INT 0
35865: PPUSH
35866: PPUSH
35867: PPUSH
35868: PPUSH
35869: PPUSH
35870: PPUSH
35871: PPUSH
35872: PPUSH
35873: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35874: LD_VAR 0 1
35878: PPUSH
35879: CALL_OW 264
35883: PUSH
35884: LD_INT 81
35886: EQUAL
35887: NOT
35888: PUSH
35889: LD_VAR 0 1
35893: PUSH
35894: LD_EXP 105
35898: IN
35899: NOT
35900: OR
35901: IFFALSE 35905
// exit ;
35903: GO 36227
// index := GetElementIndex ( minersList , unit ) ;
35905: LD_ADDR_VAR 0 6
35909: PUSH
35910: LD_EXP 105
35914: PPUSH
35915: LD_VAR 0 1
35919: PPUSH
35920: CALL 41574 0 2
35924: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35925: LD_ADDR_VAR 0 8
35929: PUSH
35930: LD_EXP 107
35934: PUSH
35935: LD_EXP 106
35939: PUSH
35940: LD_VAR 0 6
35944: ARRAY
35945: MINUS
35946: ST_TO_ADDR
// if not minesFreeAmount then
35947: LD_VAR 0 8
35951: NOT
35952: IFFALSE 35956
// exit ;
35954: GO 36227
// tmp := [ ] ;
35956: LD_ADDR_VAR 0 7
35960: PUSH
35961: EMPTY
35962: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35963: LD_ADDR_VAR 0 5
35967: PUSH
35968: DOUBLE
35969: LD_INT 1
35971: DEC
35972: ST_TO_ADDR
35973: LD_VAR 0 8
35977: PUSH
35978: FOR_TO
35979: IFFALSE 36174
// begin _d := rand ( 0 , 5 ) ;
35981: LD_ADDR_VAR 0 11
35985: PUSH
35986: LD_INT 0
35988: PPUSH
35989: LD_INT 5
35991: PPUSH
35992: CALL_OW 12
35996: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35997: LD_ADDR_VAR 0 12
36001: PUSH
36002: LD_INT 2
36004: PPUSH
36005: LD_INT 6
36007: PPUSH
36008: CALL_OW 12
36012: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36013: LD_ADDR_VAR 0 9
36017: PUSH
36018: LD_VAR 0 2
36022: PPUSH
36023: LD_VAR 0 11
36027: PPUSH
36028: LD_VAR 0 12
36032: PPUSH
36033: CALL_OW 272
36037: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36038: LD_ADDR_VAR 0 10
36042: PUSH
36043: LD_VAR 0 3
36047: PPUSH
36048: LD_VAR 0 11
36052: PPUSH
36053: LD_VAR 0 12
36057: PPUSH
36058: CALL_OW 273
36062: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36063: LD_VAR 0 9
36067: PPUSH
36068: LD_VAR 0 10
36072: PPUSH
36073: CALL_OW 488
36077: PUSH
36078: LD_VAR 0 9
36082: PUSH
36083: LD_VAR 0 10
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_VAR 0 7
36096: IN
36097: NOT
36098: AND
36099: PUSH
36100: LD_VAR 0 9
36104: PPUSH
36105: LD_VAR 0 10
36109: PPUSH
36110: CALL_OW 458
36114: NOT
36115: AND
36116: IFFALSE 36158
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36118: LD_ADDR_VAR 0 7
36122: PUSH
36123: LD_VAR 0 7
36127: PPUSH
36128: LD_VAR 0 7
36132: PUSH
36133: LD_INT 1
36135: PLUS
36136: PPUSH
36137: LD_VAR 0 9
36141: PUSH
36142: LD_VAR 0 10
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PPUSH
36151: CALL_OW 1
36155: ST_TO_ADDR
36156: GO 36172
// i := i - 1 ;
36158: LD_ADDR_VAR 0 5
36162: PUSH
36163: LD_VAR 0 5
36167: PUSH
36168: LD_INT 1
36170: MINUS
36171: ST_TO_ADDR
// end ;
36172: GO 35978
36174: POP
36175: POP
// for i in tmp do
36176: LD_ADDR_VAR 0 5
36180: PUSH
36181: LD_VAR 0 7
36185: PUSH
36186: FOR_IN
36187: IFFALSE 36225
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36189: LD_VAR 0 1
36193: PPUSH
36194: LD_VAR 0 5
36198: PUSH
36199: LD_INT 1
36201: ARRAY
36202: PPUSH
36203: LD_VAR 0 5
36207: PUSH
36208: LD_INT 2
36210: ARRAY
36211: PPUSH
36212: CALL 35171 0 3
36216: NOT
36217: IFFALSE 36223
// exit ;
36219: POP
36220: POP
36221: GO 36227
36223: GO 36186
36225: POP
36226: POP
// end ;
36227: LD_VAR 0 4
36231: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36232: LD_INT 0
36234: PPUSH
36235: PPUSH
36236: PPUSH
36237: PPUSH
36238: PPUSH
36239: PPUSH
36240: PPUSH
// if not GetClass ( unit ) = class_sniper then
36241: LD_VAR 0 1
36245: PPUSH
36246: CALL_OW 257
36250: PUSH
36251: LD_INT 5
36253: EQUAL
36254: NOT
36255: IFFALSE 36259
// exit ;
36257: GO 36647
// dist := 8 ;
36259: LD_ADDR_VAR 0 5
36263: PUSH
36264: LD_INT 8
36266: ST_TO_ADDR
// viewRange := 12 ;
36267: LD_ADDR_VAR 0 7
36271: PUSH
36272: LD_INT 12
36274: ST_TO_ADDR
// side := GetSide ( unit ) ;
36275: LD_ADDR_VAR 0 6
36279: PUSH
36280: LD_VAR 0 1
36284: PPUSH
36285: CALL_OW 255
36289: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36290: LD_INT 61
36292: PPUSH
36293: LD_VAR 0 6
36297: PPUSH
36298: CALL_OW 321
36302: PUSH
36303: LD_INT 2
36305: EQUAL
36306: IFFALSE 36316
// viewRange := 16 ;
36308: LD_ADDR_VAR 0 7
36312: PUSH
36313: LD_INT 16
36315: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36316: LD_VAR 0 1
36320: PPUSH
36321: LD_VAR 0 2
36325: PPUSH
36326: LD_VAR 0 3
36330: PPUSH
36331: CALL_OW 297
36335: PUSH
36336: LD_VAR 0 5
36340: GREATER
36341: IFFALSE 36420
// begin ComMoveXY ( unit , x , y ) ;
36343: LD_VAR 0 1
36347: PPUSH
36348: LD_VAR 0 2
36352: PPUSH
36353: LD_VAR 0 3
36357: PPUSH
36358: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36362: LD_INT 35
36364: PPUSH
36365: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36369: LD_VAR 0 1
36373: PPUSH
36374: LD_VAR 0 2
36378: PPUSH
36379: LD_VAR 0 3
36383: PPUSH
36384: CALL 72929 0 3
36388: NOT
36389: IFFALSE 36393
// exit ;
36391: GO 36647
// until GetDistUnitXY ( unit , x , y ) < dist ;
36393: LD_VAR 0 1
36397: PPUSH
36398: LD_VAR 0 2
36402: PPUSH
36403: LD_VAR 0 3
36407: PPUSH
36408: CALL_OW 297
36412: PUSH
36413: LD_VAR 0 5
36417: LESS
36418: IFFALSE 36362
// end ; ComTurnXY ( unit , x , y ) ;
36420: LD_VAR 0 1
36424: PPUSH
36425: LD_VAR 0 2
36429: PPUSH
36430: LD_VAR 0 3
36434: PPUSH
36435: CALL_OW 118
// wait ( 5 ) ;
36439: LD_INT 5
36441: PPUSH
36442: CALL_OW 67
// _d := GetDir ( unit ) ;
36446: LD_ADDR_VAR 0 10
36450: PUSH
36451: LD_VAR 0 1
36455: PPUSH
36456: CALL_OW 254
36460: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36461: LD_ADDR_VAR 0 8
36465: PUSH
36466: LD_VAR 0 1
36470: PPUSH
36471: CALL_OW 250
36475: PPUSH
36476: LD_VAR 0 10
36480: PPUSH
36481: LD_VAR 0 5
36485: PPUSH
36486: CALL_OW 272
36490: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36491: LD_ADDR_VAR 0 9
36495: PUSH
36496: LD_VAR 0 1
36500: PPUSH
36501: CALL_OW 251
36505: PPUSH
36506: LD_VAR 0 10
36510: PPUSH
36511: LD_VAR 0 5
36515: PPUSH
36516: CALL_OW 273
36520: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36521: LD_VAR 0 8
36525: PPUSH
36526: LD_VAR 0 9
36530: PPUSH
36531: CALL_OW 488
36535: NOT
36536: IFFALSE 36540
// exit ;
36538: GO 36647
// ComAnimCustom ( unit , 1 ) ;
36540: LD_VAR 0 1
36544: PPUSH
36545: LD_INT 1
36547: PPUSH
36548: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36552: LD_VAR 0 8
36556: PPUSH
36557: LD_VAR 0 9
36561: PPUSH
36562: LD_VAR 0 6
36566: PPUSH
36567: LD_VAR 0 7
36571: PPUSH
36572: CALL_OW 330
// repeat wait ( 1 ) ;
36576: LD_INT 1
36578: PPUSH
36579: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36583: LD_VAR 0 1
36587: PPUSH
36588: CALL_OW 316
36592: PUSH
36593: LD_VAR 0 1
36597: PPUSH
36598: CALL_OW 314
36602: OR
36603: PUSH
36604: LD_VAR 0 1
36608: PPUSH
36609: CALL_OW 302
36613: NOT
36614: OR
36615: PUSH
36616: LD_VAR 0 1
36620: PPUSH
36621: CALL_OW 301
36625: OR
36626: IFFALSE 36576
// RemoveSeeing ( _x , _y , side ) ;
36628: LD_VAR 0 8
36632: PPUSH
36633: LD_VAR 0 9
36637: PPUSH
36638: LD_VAR 0 6
36642: PPUSH
36643: CALL_OW 331
// end ; end_of_file
36647: LD_VAR 0 4
36651: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36652: LD_INT 0
36654: PPUSH
36655: PPUSH
// if exist_mode then
36656: LD_VAR 0 2
36660: IFFALSE 36685
// unit := CreateCharacter ( prefix & ident ) else
36662: LD_ADDR_VAR 0 5
36666: PUSH
36667: LD_VAR 0 3
36671: PUSH
36672: LD_VAR 0 1
36676: STR
36677: PPUSH
36678: CALL_OW 34
36682: ST_TO_ADDR
36683: GO 36700
// unit := NewCharacter ( ident ) ;
36685: LD_ADDR_VAR 0 5
36689: PUSH
36690: LD_VAR 0 1
36694: PPUSH
36695: CALL_OW 25
36699: ST_TO_ADDR
// result := unit ;
36700: LD_ADDR_VAR 0 4
36704: PUSH
36705: LD_VAR 0 5
36709: ST_TO_ADDR
// end ;
36710: LD_VAR 0 4
36714: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36715: LD_INT 0
36717: PPUSH
36718: PPUSH
// if not side or not nation then
36719: LD_VAR 0 1
36723: NOT
36724: PUSH
36725: LD_VAR 0 2
36729: NOT
36730: OR
36731: IFFALSE 36735
// exit ;
36733: GO 37503
// case nation of nation_american :
36735: LD_VAR 0 2
36739: PUSH
36740: LD_INT 1
36742: DOUBLE
36743: EQUAL
36744: IFTRUE 36748
36746: GO 36962
36748: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36749: LD_ADDR_VAR 0 4
36753: PUSH
36754: LD_INT 35
36756: PUSH
36757: LD_INT 45
36759: PUSH
36760: LD_INT 46
36762: PUSH
36763: LD_INT 47
36765: PUSH
36766: LD_INT 82
36768: PUSH
36769: LD_INT 83
36771: PUSH
36772: LD_INT 84
36774: PUSH
36775: LD_INT 85
36777: PUSH
36778: LD_INT 86
36780: PUSH
36781: LD_INT 1
36783: PUSH
36784: LD_INT 2
36786: PUSH
36787: LD_INT 6
36789: PUSH
36790: LD_INT 15
36792: PUSH
36793: LD_INT 16
36795: PUSH
36796: LD_INT 7
36798: PUSH
36799: LD_INT 12
36801: PUSH
36802: LD_INT 13
36804: PUSH
36805: LD_INT 10
36807: PUSH
36808: LD_INT 14
36810: PUSH
36811: LD_INT 20
36813: PUSH
36814: LD_INT 21
36816: PUSH
36817: LD_INT 22
36819: PUSH
36820: LD_INT 25
36822: PUSH
36823: LD_INT 32
36825: PUSH
36826: LD_INT 27
36828: PUSH
36829: LD_INT 36
36831: PUSH
36832: LD_INT 69
36834: PUSH
36835: LD_INT 39
36837: PUSH
36838: LD_INT 34
36840: PUSH
36841: LD_INT 40
36843: PUSH
36844: LD_INT 48
36846: PUSH
36847: LD_INT 49
36849: PUSH
36850: LD_INT 50
36852: PUSH
36853: LD_INT 51
36855: PUSH
36856: LD_INT 52
36858: PUSH
36859: LD_INT 53
36861: PUSH
36862: LD_INT 54
36864: PUSH
36865: LD_INT 55
36867: PUSH
36868: LD_INT 56
36870: PUSH
36871: LD_INT 57
36873: PUSH
36874: LD_INT 58
36876: PUSH
36877: LD_INT 59
36879: PUSH
36880: LD_INT 60
36882: PUSH
36883: LD_INT 61
36885: PUSH
36886: LD_INT 62
36888: PUSH
36889: LD_INT 80
36891: PUSH
36892: LD_INT 82
36894: PUSH
36895: LD_INT 83
36897: PUSH
36898: LD_INT 84
36900: PUSH
36901: LD_INT 85
36903: PUSH
36904: LD_INT 86
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: ST_TO_ADDR
36960: GO 37427
36962: LD_INT 2
36964: DOUBLE
36965: EQUAL
36966: IFTRUE 36970
36968: GO 37196
36970: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36971: LD_ADDR_VAR 0 4
36975: PUSH
36976: LD_INT 35
36978: PUSH
36979: LD_INT 45
36981: PUSH
36982: LD_INT 46
36984: PUSH
36985: LD_INT 47
36987: PUSH
36988: LD_INT 82
36990: PUSH
36991: LD_INT 83
36993: PUSH
36994: LD_INT 84
36996: PUSH
36997: LD_INT 85
36999: PUSH
37000: LD_INT 87
37002: PUSH
37003: LD_INT 70
37005: PUSH
37006: LD_INT 1
37008: PUSH
37009: LD_INT 11
37011: PUSH
37012: LD_INT 3
37014: PUSH
37015: LD_INT 4
37017: PUSH
37018: LD_INT 5
37020: PUSH
37021: LD_INT 6
37023: PUSH
37024: LD_INT 15
37026: PUSH
37027: LD_INT 18
37029: PUSH
37030: LD_INT 7
37032: PUSH
37033: LD_INT 17
37035: PUSH
37036: LD_INT 8
37038: PUSH
37039: LD_INT 20
37041: PUSH
37042: LD_INT 21
37044: PUSH
37045: LD_INT 22
37047: PUSH
37048: LD_INT 72
37050: PUSH
37051: LD_INT 26
37053: PUSH
37054: LD_INT 69
37056: PUSH
37057: LD_INT 39
37059: PUSH
37060: LD_INT 40
37062: PUSH
37063: LD_INT 41
37065: PUSH
37066: LD_INT 42
37068: PUSH
37069: LD_INT 43
37071: PUSH
37072: LD_INT 48
37074: PUSH
37075: LD_INT 49
37077: PUSH
37078: LD_INT 50
37080: PUSH
37081: LD_INT 51
37083: PUSH
37084: LD_INT 52
37086: PUSH
37087: LD_INT 53
37089: PUSH
37090: LD_INT 54
37092: PUSH
37093: LD_INT 55
37095: PUSH
37096: LD_INT 56
37098: PUSH
37099: LD_INT 60
37101: PUSH
37102: LD_INT 61
37104: PUSH
37105: LD_INT 62
37107: PUSH
37108: LD_INT 66
37110: PUSH
37111: LD_INT 67
37113: PUSH
37114: LD_INT 68
37116: PUSH
37117: LD_INT 81
37119: PUSH
37120: LD_INT 82
37122: PUSH
37123: LD_INT 83
37125: PUSH
37126: LD_INT 84
37128: PUSH
37129: LD_INT 85
37131: PUSH
37132: LD_INT 87
37134: PUSH
37135: LD_INT 88
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: ST_TO_ADDR
37194: GO 37427
37196: LD_INT 3
37198: DOUBLE
37199: EQUAL
37200: IFTRUE 37204
37202: GO 37426
37204: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37205: LD_ADDR_VAR 0 4
37209: PUSH
37210: LD_INT 46
37212: PUSH
37213: LD_INT 47
37215: PUSH
37216: LD_INT 1
37218: PUSH
37219: LD_INT 2
37221: PUSH
37222: LD_INT 82
37224: PUSH
37225: LD_INT 83
37227: PUSH
37228: LD_INT 84
37230: PUSH
37231: LD_INT 85
37233: PUSH
37234: LD_INT 86
37236: PUSH
37237: LD_INT 11
37239: PUSH
37240: LD_INT 9
37242: PUSH
37243: LD_INT 20
37245: PUSH
37246: LD_INT 19
37248: PUSH
37249: LD_INT 21
37251: PUSH
37252: LD_INT 24
37254: PUSH
37255: LD_INT 22
37257: PUSH
37258: LD_INT 25
37260: PUSH
37261: LD_INT 28
37263: PUSH
37264: LD_INT 29
37266: PUSH
37267: LD_INT 30
37269: PUSH
37270: LD_INT 31
37272: PUSH
37273: LD_INT 37
37275: PUSH
37276: LD_INT 38
37278: PUSH
37279: LD_INT 32
37281: PUSH
37282: LD_INT 27
37284: PUSH
37285: LD_INT 33
37287: PUSH
37288: LD_INT 69
37290: PUSH
37291: LD_INT 39
37293: PUSH
37294: LD_INT 34
37296: PUSH
37297: LD_INT 40
37299: PUSH
37300: LD_INT 71
37302: PUSH
37303: LD_INT 23
37305: PUSH
37306: LD_INT 44
37308: PUSH
37309: LD_INT 48
37311: PUSH
37312: LD_INT 49
37314: PUSH
37315: LD_INT 50
37317: PUSH
37318: LD_INT 51
37320: PUSH
37321: LD_INT 52
37323: PUSH
37324: LD_INT 53
37326: PUSH
37327: LD_INT 54
37329: PUSH
37330: LD_INT 55
37332: PUSH
37333: LD_INT 56
37335: PUSH
37336: LD_INT 57
37338: PUSH
37339: LD_INT 58
37341: PUSH
37342: LD_INT 59
37344: PUSH
37345: LD_INT 63
37347: PUSH
37348: LD_INT 64
37350: PUSH
37351: LD_INT 65
37353: PUSH
37354: LD_INT 82
37356: PUSH
37357: LD_INT 83
37359: PUSH
37360: LD_INT 84
37362: PUSH
37363: LD_INT 85
37365: PUSH
37366: LD_INT 86
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: LIST
37419: LIST
37420: LIST
37421: LIST
37422: LIST
37423: ST_TO_ADDR
37424: GO 37427
37426: POP
// if state > - 1 and state < 3 then
37427: LD_VAR 0 3
37431: PUSH
37432: LD_INT 1
37434: NEG
37435: GREATER
37436: PUSH
37437: LD_VAR 0 3
37441: PUSH
37442: LD_INT 3
37444: LESS
37445: AND
37446: IFFALSE 37503
// for i in result do
37448: LD_ADDR_VAR 0 5
37452: PUSH
37453: LD_VAR 0 4
37457: PUSH
37458: FOR_IN
37459: IFFALSE 37501
// if GetTech ( i , side ) <> state then
37461: LD_VAR 0 5
37465: PPUSH
37466: LD_VAR 0 1
37470: PPUSH
37471: CALL_OW 321
37475: PUSH
37476: LD_VAR 0 3
37480: NONEQUAL
37481: IFFALSE 37499
// result := result diff i ;
37483: LD_ADDR_VAR 0 4
37487: PUSH
37488: LD_VAR 0 4
37492: PUSH
37493: LD_VAR 0 5
37497: DIFF
37498: ST_TO_ADDR
37499: GO 37458
37501: POP
37502: POP
// end ;
37503: LD_VAR 0 4
37507: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37508: LD_INT 0
37510: PPUSH
37511: PPUSH
37512: PPUSH
// result := true ;
37513: LD_ADDR_VAR 0 3
37517: PUSH
37518: LD_INT 1
37520: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37521: LD_ADDR_VAR 0 5
37525: PUSH
37526: LD_VAR 0 2
37530: PPUSH
37531: CALL_OW 480
37535: ST_TO_ADDR
// if not tmp then
37536: LD_VAR 0 5
37540: NOT
37541: IFFALSE 37545
// exit ;
37543: GO 37594
// for i in tmp do
37545: LD_ADDR_VAR 0 4
37549: PUSH
37550: LD_VAR 0 5
37554: PUSH
37555: FOR_IN
37556: IFFALSE 37592
// if GetTech ( i , side ) <> state_researched then
37558: LD_VAR 0 4
37562: PPUSH
37563: LD_VAR 0 1
37567: PPUSH
37568: CALL_OW 321
37572: PUSH
37573: LD_INT 2
37575: NONEQUAL
37576: IFFALSE 37590
// begin result := false ;
37578: LD_ADDR_VAR 0 3
37582: PUSH
37583: LD_INT 0
37585: ST_TO_ADDR
// exit ;
37586: POP
37587: POP
37588: GO 37594
// end ;
37590: GO 37555
37592: POP
37593: POP
// end ;
37594: LD_VAR 0 3
37598: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37599: LD_INT 0
37601: PPUSH
37602: PPUSH
37603: PPUSH
37604: PPUSH
37605: PPUSH
37606: PPUSH
37607: PPUSH
37608: PPUSH
37609: PPUSH
37610: PPUSH
37611: PPUSH
37612: PPUSH
37613: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37614: LD_VAR 0 1
37618: NOT
37619: PUSH
37620: LD_VAR 0 1
37624: PPUSH
37625: CALL_OW 257
37629: PUSH
37630: LD_INT 9
37632: NONEQUAL
37633: OR
37634: IFFALSE 37638
// exit ;
37636: GO 38211
// side := GetSide ( unit ) ;
37638: LD_ADDR_VAR 0 9
37642: PUSH
37643: LD_VAR 0 1
37647: PPUSH
37648: CALL_OW 255
37652: ST_TO_ADDR
// tech_space := tech_spacanom ;
37653: LD_ADDR_VAR 0 12
37657: PUSH
37658: LD_INT 29
37660: ST_TO_ADDR
// tech_time := tech_taurad ;
37661: LD_ADDR_VAR 0 13
37665: PUSH
37666: LD_INT 28
37668: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37669: LD_ADDR_VAR 0 11
37673: PUSH
37674: LD_VAR 0 1
37678: PPUSH
37679: CALL_OW 310
37683: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37684: LD_VAR 0 11
37688: PPUSH
37689: CALL_OW 247
37693: PUSH
37694: LD_INT 2
37696: EQUAL
37697: IFFALSE 37701
// exit ;
37699: GO 38211
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37701: LD_ADDR_VAR 0 8
37705: PUSH
37706: LD_INT 81
37708: PUSH
37709: LD_VAR 0 9
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 3
37720: PUSH
37721: LD_INT 21
37723: PUSH
37724: LD_INT 3
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PPUSH
37739: CALL_OW 69
37743: ST_TO_ADDR
// if not tmp then
37744: LD_VAR 0 8
37748: NOT
37749: IFFALSE 37753
// exit ;
37751: GO 38211
// if in_unit then
37753: LD_VAR 0 11
37757: IFFALSE 37781
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37759: LD_ADDR_VAR 0 10
37763: PUSH
37764: LD_VAR 0 8
37768: PPUSH
37769: LD_VAR 0 11
37773: PPUSH
37774: CALL_OW 74
37778: ST_TO_ADDR
37779: GO 37801
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37781: LD_ADDR_VAR 0 10
37785: PUSH
37786: LD_VAR 0 8
37790: PPUSH
37791: LD_VAR 0 1
37795: PPUSH
37796: CALL_OW 74
37800: ST_TO_ADDR
// if not enemy then
37801: LD_VAR 0 10
37805: NOT
37806: IFFALSE 37810
// exit ;
37808: GO 38211
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37810: LD_VAR 0 11
37814: PUSH
37815: LD_VAR 0 11
37819: PPUSH
37820: LD_VAR 0 10
37824: PPUSH
37825: CALL_OW 296
37829: PUSH
37830: LD_INT 13
37832: GREATER
37833: AND
37834: PUSH
37835: LD_VAR 0 1
37839: PPUSH
37840: LD_VAR 0 10
37844: PPUSH
37845: CALL_OW 296
37849: PUSH
37850: LD_INT 12
37852: GREATER
37853: OR
37854: IFFALSE 37858
// exit ;
37856: GO 38211
// missile := [ 1 ] ;
37858: LD_ADDR_VAR 0 14
37862: PUSH
37863: LD_INT 1
37865: PUSH
37866: EMPTY
37867: LIST
37868: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37869: LD_VAR 0 9
37873: PPUSH
37874: LD_VAR 0 12
37878: PPUSH
37879: CALL_OW 325
37883: IFFALSE 37912
// missile := Replace ( missile , missile + 1 , 2 ) ;
37885: LD_ADDR_VAR 0 14
37889: PUSH
37890: LD_VAR 0 14
37894: PPUSH
37895: LD_VAR 0 14
37899: PUSH
37900: LD_INT 1
37902: PLUS
37903: PPUSH
37904: LD_INT 2
37906: PPUSH
37907: CALL_OW 1
37911: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37912: LD_VAR 0 9
37916: PPUSH
37917: LD_VAR 0 13
37921: PPUSH
37922: CALL_OW 325
37926: PUSH
37927: LD_VAR 0 10
37931: PPUSH
37932: CALL_OW 255
37936: PPUSH
37937: LD_VAR 0 13
37941: PPUSH
37942: CALL_OW 325
37946: NOT
37947: AND
37948: IFFALSE 37977
// missile := Replace ( missile , missile + 1 , 3 ) ;
37950: LD_ADDR_VAR 0 14
37954: PUSH
37955: LD_VAR 0 14
37959: PPUSH
37960: LD_VAR 0 14
37964: PUSH
37965: LD_INT 1
37967: PLUS
37968: PPUSH
37969: LD_INT 3
37971: PPUSH
37972: CALL_OW 1
37976: ST_TO_ADDR
// if missile < 2 then
37977: LD_VAR 0 14
37981: PUSH
37982: LD_INT 2
37984: LESS
37985: IFFALSE 37989
// exit ;
37987: GO 38211
// x := GetX ( enemy ) ;
37989: LD_ADDR_VAR 0 4
37993: PUSH
37994: LD_VAR 0 10
37998: PPUSH
37999: CALL_OW 250
38003: ST_TO_ADDR
// y := GetY ( enemy ) ;
38004: LD_ADDR_VAR 0 5
38008: PUSH
38009: LD_VAR 0 10
38013: PPUSH
38014: CALL_OW 251
38018: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38019: LD_ADDR_VAR 0 6
38023: PUSH
38024: LD_VAR 0 4
38028: PUSH
38029: LD_INT 1
38031: NEG
38032: PPUSH
38033: LD_INT 1
38035: PPUSH
38036: CALL_OW 12
38040: PLUS
38041: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38042: LD_ADDR_VAR 0 7
38046: PUSH
38047: LD_VAR 0 5
38051: PUSH
38052: LD_INT 1
38054: NEG
38055: PPUSH
38056: LD_INT 1
38058: PPUSH
38059: CALL_OW 12
38063: PLUS
38064: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38065: LD_VAR 0 6
38069: PPUSH
38070: LD_VAR 0 7
38074: PPUSH
38075: CALL_OW 488
38079: NOT
38080: IFFALSE 38102
// begin _x := x ;
38082: LD_ADDR_VAR 0 6
38086: PUSH
38087: LD_VAR 0 4
38091: ST_TO_ADDR
// _y := y ;
38092: LD_ADDR_VAR 0 7
38096: PUSH
38097: LD_VAR 0 5
38101: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38102: LD_ADDR_VAR 0 3
38106: PUSH
38107: LD_INT 1
38109: PPUSH
38110: LD_VAR 0 14
38114: PPUSH
38115: CALL_OW 12
38119: ST_TO_ADDR
// case i of 1 :
38120: LD_VAR 0 3
38124: PUSH
38125: LD_INT 1
38127: DOUBLE
38128: EQUAL
38129: IFTRUE 38133
38131: GO 38150
38133: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38134: LD_VAR 0 1
38138: PPUSH
38139: LD_VAR 0 10
38143: PPUSH
38144: CALL_OW 115
38148: GO 38211
38150: LD_INT 2
38152: DOUBLE
38153: EQUAL
38154: IFTRUE 38158
38156: GO 38180
38158: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38159: LD_VAR 0 1
38163: PPUSH
38164: LD_VAR 0 6
38168: PPUSH
38169: LD_VAR 0 7
38173: PPUSH
38174: CALL_OW 153
38178: GO 38211
38180: LD_INT 3
38182: DOUBLE
38183: EQUAL
38184: IFTRUE 38188
38186: GO 38210
38188: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38189: LD_VAR 0 1
38193: PPUSH
38194: LD_VAR 0 6
38198: PPUSH
38199: LD_VAR 0 7
38203: PPUSH
38204: CALL_OW 154
38208: GO 38211
38210: POP
// end ;
38211: LD_VAR 0 2
38215: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38216: LD_INT 0
38218: PPUSH
38219: PPUSH
38220: PPUSH
38221: PPUSH
38222: PPUSH
38223: PPUSH
// if not unit or not building then
38224: LD_VAR 0 1
38228: NOT
38229: PUSH
38230: LD_VAR 0 2
38234: NOT
38235: OR
38236: IFFALSE 38240
// exit ;
38238: GO 38398
// x := GetX ( building ) ;
38240: LD_ADDR_VAR 0 5
38244: PUSH
38245: LD_VAR 0 2
38249: PPUSH
38250: CALL_OW 250
38254: ST_TO_ADDR
// y := GetY ( building ) ;
38255: LD_ADDR_VAR 0 6
38259: PUSH
38260: LD_VAR 0 2
38264: PPUSH
38265: CALL_OW 251
38269: ST_TO_ADDR
// for i = 0 to 5 do
38270: LD_ADDR_VAR 0 4
38274: PUSH
38275: DOUBLE
38276: LD_INT 0
38278: DEC
38279: ST_TO_ADDR
38280: LD_INT 5
38282: PUSH
38283: FOR_TO
38284: IFFALSE 38396
// begin _x := ShiftX ( x , i , 3 ) ;
38286: LD_ADDR_VAR 0 7
38290: PUSH
38291: LD_VAR 0 5
38295: PPUSH
38296: LD_VAR 0 4
38300: PPUSH
38301: LD_INT 3
38303: PPUSH
38304: CALL_OW 272
38308: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38309: LD_ADDR_VAR 0 8
38313: PUSH
38314: LD_VAR 0 6
38318: PPUSH
38319: LD_VAR 0 4
38323: PPUSH
38324: LD_INT 3
38326: PPUSH
38327: CALL_OW 273
38331: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38332: LD_VAR 0 7
38336: PPUSH
38337: LD_VAR 0 8
38341: PPUSH
38342: CALL_OW 488
38346: NOT
38347: IFFALSE 38351
// continue ;
38349: GO 38283
// if HexInfo ( _x , _y ) = 0 then
38351: LD_VAR 0 7
38355: PPUSH
38356: LD_VAR 0 8
38360: PPUSH
38361: CALL_OW 428
38365: PUSH
38366: LD_INT 0
38368: EQUAL
38369: IFFALSE 38394
// begin ComMoveXY ( unit , _x , _y ) ;
38371: LD_VAR 0 1
38375: PPUSH
38376: LD_VAR 0 7
38380: PPUSH
38381: LD_VAR 0 8
38385: PPUSH
38386: CALL_OW 111
// exit ;
38390: POP
38391: POP
38392: GO 38398
// end ; end ;
38394: GO 38283
38396: POP
38397: POP
// end ;
38398: LD_VAR 0 3
38402: RET
// export function ScanBase ( side , base_area ) ; begin
38403: LD_INT 0
38405: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38406: LD_ADDR_VAR 0 3
38410: PUSH
38411: LD_VAR 0 2
38415: PPUSH
38416: LD_INT 81
38418: PUSH
38419: LD_VAR 0 1
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PPUSH
38428: CALL_OW 70
38432: ST_TO_ADDR
// end ;
38433: LD_VAR 0 3
38437: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38438: LD_INT 0
38440: PPUSH
38441: PPUSH
38442: PPUSH
38443: PPUSH
// result := false ;
38444: LD_ADDR_VAR 0 2
38448: PUSH
38449: LD_INT 0
38451: ST_TO_ADDR
// side := GetSide ( unit ) ;
38452: LD_ADDR_VAR 0 3
38456: PUSH
38457: LD_VAR 0 1
38461: PPUSH
38462: CALL_OW 255
38466: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38467: LD_ADDR_VAR 0 4
38471: PUSH
38472: LD_VAR 0 1
38476: PPUSH
38477: CALL_OW 248
38481: ST_TO_ADDR
// case nat of 1 :
38482: LD_VAR 0 4
38486: PUSH
38487: LD_INT 1
38489: DOUBLE
38490: EQUAL
38491: IFTRUE 38495
38493: GO 38506
38495: POP
// tech := tech_lassight ; 2 :
38496: LD_ADDR_VAR 0 5
38500: PUSH
38501: LD_INT 12
38503: ST_TO_ADDR
38504: GO 38545
38506: LD_INT 2
38508: DOUBLE
38509: EQUAL
38510: IFTRUE 38514
38512: GO 38525
38514: POP
// tech := tech_mortar ; 3 :
38515: LD_ADDR_VAR 0 5
38519: PUSH
38520: LD_INT 41
38522: ST_TO_ADDR
38523: GO 38545
38525: LD_INT 3
38527: DOUBLE
38528: EQUAL
38529: IFTRUE 38533
38531: GO 38544
38533: POP
// tech := tech_bazooka ; end ;
38534: LD_ADDR_VAR 0 5
38538: PUSH
38539: LD_INT 44
38541: ST_TO_ADDR
38542: GO 38545
38544: POP
// if Researched ( side , tech ) then
38545: LD_VAR 0 3
38549: PPUSH
38550: LD_VAR 0 5
38554: PPUSH
38555: CALL_OW 325
38559: IFFALSE 38586
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38561: LD_ADDR_VAR 0 2
38565: PUSH
38566: LD_INT 5
38568: PUSH
38569: LD_INT 8
38571: PUSH
38572: LD_INT 9
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: LIST
38579: PUSH
38580: LD_VAR 0 4
38584: ARRAY
38585: ST_TO_ADDR
// end ;
38586: LD_VAR 0 2
38590: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38591: LD_INT 0
38593: PPUSH
38594: PPUSH
38595: PPUSH
// if not mines then
38596: LD_VAR 0 2
38600: NOT
38601: IFFALSE 38605
// exit ;
38603: GO 38749
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38605: LD_ADDR_VAR 0 5
38609: PUSH
38610: LD_INT 81
38612: PUSH
38613: LD_VAR 0 1
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 3
38624: PUSH
38625: LD_INT 21
38627: PUSH
38628: LD_INT 3
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PPUSH
38643: CALL_OW 69
38647: ST_TO_ADDR
// for i in mines do
38648: LD_ADDR_VAR 0 4
38652: PUSH
38653: LD_VAR 0 2
38657: PUSH
38658: FOR_IN
38659: IFFALSE 38747
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38661: LD_VAR 0 4
38665: PUSH
38666: LD_INT 1
38668: ARRAY
38669: PPUSH
38670: LD_VAR 0 4
38674: PUSH
38675: LD_INT 2
38677: ARRAY
38678: PPUSH
38679: CALL_OW 458
38683: NOT
38684: IFFALSE 38688
// continue ;
38686: GO 38658
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38688: LD_VAR 0 4
38692: PUSH
38693: LD_INT 1
38695: ARRAY
38696: PPUSH
38697: LD_VAR 0 4
38701: PUSH
38702: LD_INT 2
38704: ARRAY
38705: PPUSH
38706: CALL_OW 428
38710: PUSH
38711: LD_VAR 0 5
38715: IN
38716: IFFALSE 38745
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38718: LD_VAR 0 4
38722: PUSH
38723: LD_INT 1
38725: ARRAY
38726: PPUSH
38727: LD_VAR 0 4
38731: PUSH
38732: LD_INT 2
38734: ARRAY
38735: PPUSH
38736: LD_VAR 0 1
38740: PPUSH
38741: CALL_OW 456
// end ;
38745: GO 38658
38747: POP
38748: POP
// end ;
38749: LD_VAR 0 3
38753: RET
// export function Count ( array ) ; var i ; begin
38754: LD_INT 0
38756: PPUSH
38757: PPUSH
// result := 0 ;
38758: LD_ADDR_VAR 0 2
38762: PUSH
38763: LD_INT 0
38765: ST_TO_ADDR
// for i in array do
38766: LD_ADDR_VAR 0 3
38770: PUSH
38771: LD_VAR 0 1
38775: PUSH
38776: FOR_IN
38777: IFFALSE 38801
// if i then
38779: LD_VAR 0 3
38783: IFFALSE 38799
// result := result + 1 ;
38785: LD_ADDR_VAR 0 2
38789: PUSH
38790: LD_VAR 0 2
38794: PUSH
38795: LD_INT 1
38797: PLUS
38798: ST_TO_ADDR
38799: GO 38776
38801: POP
38802: POP
// end ;
38803: LD_VAR 0 2
38807: RET
// export function IsEmpty ( building ) ; begin
38808: LD_INT 0
38810: PPUSH
// if not building then
38811: LD_VAR 0 1
38815: NOT
38816: IFFALSE 38820
// exit ;
38818: GO 38863
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38820: LD_ADDR_VAR 0 2
38824: PUSH
38825: LD_VAR 0 1
38829: PUSH
38830: LD_INT 22
38832: PUSH
38833: LD_VAR 0 1
38837: PPUSH
38838: CALL_OW 255
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 58
38849: PUSH
38850: EMPTY
38851: LIST
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PPUSH
38857: CALL_OW 69
38861: IN
38862: ST_TO_ADDR
// end ;
38863: LD_VAR 0 2
38867: RET
// export function IsNotFull ( building ) ; var places ; begin
38868: LD_INT 0
38870: PPUSH
38871: PPUSH
// if not building then
38872: LD_VAR 0 1
38876: NOT
38877: IFFALSE 38881
// exit ;
38879: GO 39052
// result := false ;
38881: LD_ADDR_VAR 0 2
38885: PUSH
38886: LD_INT 0
38888: ST_TO_ADDR
// places := 0 ;
38889: LD_ADDR_VAR 0 3
38893: PUSH
38894: LD_INT 0
38896: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
38897: LD_VAR 0 1
38901: PPUSH
38902: CALL_OW 266
38906: PUSH
38907: LD_INT 0
38909: DOUBLE
38910: EQUAL
38911: IFTRUE 38969
38913: LD_INT 1
38915: DOUBLE
38916: EQUAL
38917: IFTRUE 38969
38919: LD_INT 6
38921: DOUBLE
38922: EQUAL
38923: IFTRUE 38969
38925: LD_INT 7
38927: DOUBLE
38928: EQUAL
38929: IFTRUE 38969
38931: LD_INT 8
38933: DOUBLE
38934: EQUAL
38935: IFTRUE 38969
38937: LD_INT 4
38939: DOUBLE
38940: EQUAL
38941: IFTRUE 38969
38943: LD_INT 5
38945: DOUBLE
38946: EQUAL
38947: IFTRUE 38969
38949: LD_INT 2
38951: DOUBLE
38952: EQUAL
38953: IFTRUE 38969
38955: LD_INT 3
38957: DOUBLE
38958: EQUAL
38959: IFTRUE 38969
38961: LD_INT 35
38963: DOUBLE
38964: EQUAL
38965: IFTRUE 38969
38967: GO 38980
38969: POP
// places := 6 ; b_bunker , b_breastwork :
38970: LD_ADDR_VAR 0 3
38974: PUSH
38975: LD_INT 6
38977: ST_TO_ADDR
38978: GO 39025
38980: LD_INT 32
38982: DOUBLE
38983: EQUAL
38984: IFTRUE 38994
38986: LD_INT 31
38988: DOUBLE
38989: EQUAL
38990: IFTRUE 38994
38992: GO 39005
38994: POP
// places := 1 ; b_control_tower :
38995: LD_ADDR_VAR 0 3
38999: PUSH
39000: LD_INT 1
39002: ST_TO_ADDR
39003: GO 39025
39005: LD_INT 36
39007: DOUBLE
39008: EQUAL
39009: IFTRUE 39013
39011: GO 39024
39013: POP
// places := 3 ; end ;
39014: LD_ADDR_VAR 0 3
39018: PUSH
39019: LD_INT 3
39021: ST_TO_ADDR
39022: GO 39025
39024: POP
// if places then
39025: LD_VAR 0 3
39029: IFFALSE 39052
// result := UnitsInside ( building ) < places ;
39031: LD_ADDR_VAR 0 2
39035: PUSH
39036: LD_VAR 0 1
39040: PPUSH
39041: CALL_OW 313
39045: PUSH
39046: LD_VAR 0 3
39050: LESS
39051: ST_TO_ADDR
// end ;
39052: LD_VAR 0 2
39056: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39057: LD_INT 0
39059: PPUSH
39060: PPUSH
39061: PPUSH
39062: PPUSH
// tmp := [ ] ;
39063: LD_ADDR_VAR 0 3
39067: PUSH
39068: EMPTY
39069: ST_TO_ADDR
// list := [ ] ;
39070: LD_ADDR_VAR 0 5
39074: PUSH
39075: EMPTY
39076: ST_TO_ADDR
// for i = 16 to 25 do
39077: LD_ADDR_VAR 0 4
39081: PUSH
39082: DOUBLE
39083: LD_INT 16
39085: DEC
39086: ST_TO_ADDR
39087: LD_INT 25
39089: PUSH
39090: FOR_TO
39091: IFFALSE 39164
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39093: LD_ADDR_VAR 0 3
39097: PUSH
39098: LD_VAR 0 3
39102: PUSH
39103: LD_INT 22
39105: PUSH
39106: LD_VAR 0 1
39110: PPUSH
39111: CALL_OW 255
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 91
39122: PUSH
39123: LD_VAR 0 1
39127: PUSH
39128: LD_INT 6
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 30
39138: PUSH
39139: LD_VAR 0 4
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: LIST
39152: PUSH
39153: EMPTY
39154: LIST
39155: PPUSH
39156: CALL_OW 69
39160: ADD
39161: ST_TO_ADDR
39162: GO 39090
39164: POP
39165: POP
// for i = 1 to tmp do
39166: LD_ADDR_VAR 0 4
39170: PUSH
39171: DOUBLE
39172: LD_INT 1
39174: DEC
39175: ST_TO_ADDR
39176: LD_VAR 0 3
39180: PUSH
39181: FOR_TO
39182: IFFALSE 39270
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39184: LD_ADDR_VAR 0 5
39188: PUSH
39189: LD_VAR 0 5
39193: PUSH
39194: LD_VAR 0 3
39198: PUSH
39199: LD_VAR 0 4
39203: ARRAY
39204: PPUSH
39205: CALL_OW 266
39209: PUSH
39210: LD_VAR 0 3
39214: PUSH
39215: LD_VAR 0 4
39219: ARRAY
39220: PPUSH
39221: CALL_OW 250
39225: PUSH
39226: LD_VAR 0 3
39230: PUSH
39231: LD_VAR 0 4
39235: ARRAY
39236: PPUSH
39237: CALL_OW 251
39241: PUSH
39242: LD_VAR 0 3
39246: PUSH
39247: LD_VAR 0 4
39251: ARRAY
39252: PPUSH
39253: CALL_OW 254
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: PUSH
39264: EMPTY
39265: LIST
39266: ADD
39267: ST_TO_ADDR
39268: GO 39181
39270: POP
39271: POP
// result := list ;
39272: LD_ADDR_VAR 0 2
39276: PUSH
39277: LD_VAR 0 5
39281: ST_TO_ADDR
// end ;
39282: LD_VAR 0 2
39286: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39287: LD_INT 0
39289: PPUSH
39290: PPUSH
39291: PPUSH
39292: PPUSH
39293: PPUSH
39294: PPUSH
39295: PPUSH
// if not factory then
39296: LD_VAR 0 1
39300: NOT
39301: IFFALSE 39305
// exit ;
39303: GO 39898
// if control = control_apeman then
39305: LD_VAR 0 4
39309: PUSH
39310: LD_INT 5
39312: EQUAL
39313: IFFALSE 39422
// begin tmp := UnitsInside ( factory ) ;
39315: LD_ADDR_VAR 0 8
39319: PUSH
39320: LD_VAR 0 1
39324: PPUSH
39325: CALL_OW 313
39329: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39330: LD_VAR 0 8
39334: PPUSH
39335: LD_INT 25
39337: PUSH
39338: LD_INT 12
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PPUSH
39345: CALL_OW 72
39349: NOT
39350: IFFALSE 39360
// control := control_manual ;
39352: LD_ADDR_VAR 0 4
39356: PUSH
39357: LD_INT 1
39359: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39360: LD_ADDR_VAR 0 8
39364: PUSH
39365: LD_VAR 0 1
39369: PPUSH
39370: CALL 39057 0 1
39374: ST_TO_ADDR
// if tmp then
39375: LD_VAR 0 8
39379: IFFALSE 39422
// begin for i in tmp do
39381: LD_ADDR_VAR 0 7
39385: PUSH
39386: LD_VAR 0 8
39390: PUSH
39391: FOR_IN
39392: IFFALSE 39420
// if i [ 1 ] = b_ext_radio then
39394: LD_VAR 0 7
39398: PUSH
39399: LD_INT 1
39401: ARRAY
39402: PUSH
39403: LD_INT 22
39405: EQUAL
39406: IFFALSE 39418
// begin control := control_remote ;
39408: LD_ADDR_VAR 0 4
39412: PUSH
39413: LD_INT 2
39415: ST_TO_ADDR
// break ;
39416: GO 39420
// end ;
39418: GO 39391
39420: POP
39421: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39422: LD_VAR 0 1
39426: PPUSH
39427: LD_VAR 0 2
39431: PPUSH
39432: LD_VAR 0 3
39436: PPUSH
39437: LD_VAR 0 4
39441: PPUSH
39442: LD_VAR 0 5
39446: PPUSH
39447: CALL_OW 448
39451: IFFALSE 39486
// begin result := [ chassis , engine , control , weapon ] ;
39453: LD_ADDR_VAR 0 6
39457: PUSH
39458: LD_VAR 0 2
39462: PUSH
39463: LD_VAR 0 3
39467: PUSH
39468: LD_VAR 0 4
39472: PUSH
39473: LD_VAR 0 5
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: ST_TO_ADDR
// exit ;
39484: GO 39898
// end ; _chassis := AvailableChassisList ( factory ) ;
39486: LD_ADDR_VAR 0 9
39490: PUSH
39491: LD_VAR 0 1
39495: PPUSH
39496: CALL_OW 475
39500: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39501: LD_ADDR_VAR 0 11
39505: PUSH
39506: LD_VAR 0 1
39510: PPUSH
39511: CALL_OW 476
39515: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39516: LD_ADDR_VAR 0 12
39520: PUSH
39521: LD_VAR 0 1
39525: PPUSH
39526: CALL_OW 477
39530: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39531: LD_ADDR_VAR 0 10
39535: PUSH
39536: LD_VAR 0 1
39540: PPUSH
39541: CALL_OW 478
39545: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39546: LD_VAR 0 9
39550: NOT
39551: PUSH
39552: LD_VAR 0 11
39556: NOT
39557: OR
39558: PUSH
39559: LD_VAR 0 12
39563: NOT
39564: OR
39565: PUSH
39566: LD_VAR 0 10
39570: NOT
39571: OR
39572: IFFALSE 39607
// begin result := [ chassis , engine , control , weapon ] ;
39574: LD_ADDR_VAR 0 6
39578: PUSH
39579: LD_VAR 0 2
39583: PUSH
39584: LD_VAR 0 3
39588: PUSH
39589: LD_VAR 0 4
39593: PUSH
39594: LD_VAR 0 5
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: ST_TO_ADDR
// exit ;
39605: GO 39898
// end ; if not chassis in _chassis then
39607: LD_VAR 0 2
39611: PUSH
39612: LD_VAR 0 9
39616: IN
39617: NOT
39618: IFFALSE 39644
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39620: LD_ADDR_VAR 0 2
39624: PUSH
39625: LD_VAR 0 9
39629: PUSH
39630: LD_INT 1
39632: PPUSH
39633: LD_VAR 0 9
39637: PPUSH
39638: CALL_OW 12
39642: ARRAY
39643: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39644: LD_VAR 0 2
39648: PPUSH
39649: LD_VAR 0 3
39653: PPUSH
39654: CALL 39903 0 2
39658: NOT
39659: IFFALSE 39718
// repeat engine := _engine [ 1 ] ;
39661: LD_ADDR_VAR 0 3
39665: PUSH
39666: LD_VAR 0 11
39670: PUSH
39671: LD_INT 1
39673: ARRAY
39674: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39675: LD_ADDR_VAR 0 11
39679: PUSH
39680: LD_VAR 0 11
39684: PPUSH
39685: LD_INT 1
39687: PPUSH
39688: CALL_OW 3
39692: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39693: LD_VAR 0 2
39697: PPUSH
39698: LD_VAR 0 3
39702: PPUSH
39703: CALL 39903 0 2
39707: PUSH
39708: LD_VAR 0 11
39712: PUSH
39713: EMPTY
39714: EQUAL
39715: OR
39716: IFFALSE 39661
// if not control in _control then
39718: LD_VAR 0 4
39722: PUSH
39723: LD_VAR 0 12
39727: IN
39728: NOT
39729: IFFALSE 39755
// control := _control [ rand ( 1 , _control ) ] ;
39731: LD_ADDR_VAR 0 4
39735: PUSH
39736: LD_VAR 0 12
39740: PUSH
39741: LD_INT 1
39743: PPUSH
39744: LD_VAR 0 12
39748: PPUSH
39749: CALL_OW 12
39753: ARRAY
39754: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39755: LD_VAR 0 2
39759: PPUSH
39760: LD_VAR 0 5
39764: PPUSH
39765: CALL 40123 0 2
39769: NOT
39770: IFFALSE 39829
// repeat weapon := _weapon [ 1 ] ;
39772: LD_ADDR_VAR 0 5
39776: PUSH
39777: LD_VAR 0 10
39781: PUSH
39782: LD_INT 1
39784: ARRAY
39785: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39786: LD_ADDR_VAR 0 10
39790: PUSH
39791: LD_VAR 0 10
39795: PPUSH
39796: LD_INT 1
39798: PPUSH
39799: CALL_OW 3
39803: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39804: LD_VAR 0 2
39808: PPUSH
39809: LD_VAR 0 5
39813: PPUSH
39814: CALL 40123 0 2
39818: PUSH
39819: LD_VAR 0 10
39823: PUSH
39824: EMPTY
39825: EQUAL
39826: OR
39827: IFFALSE 39772
// result := [ ] ;
39829: LD_ADDR_VAR 0 6
39833: PUSH
39834: EMPTY
39835: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39836: LD_VAR 0 1
39840: PPUSH
39841: LD_VAR 0 2
39845: PPUSH
39846: LD_VAR 0 3
39850: PPUSH
39851: LD_VAR 0 4
39855: PPUSH
39856: LD_VAR 0 5
39860: PPUSH
39861: CALL_OW 448
39865: IFFALSE 39898
// result := [ chassis , engine , control , weapon ] ;
39867: LD_ADDR_VAR 0 6
39871: PUSH
39872: LD_VAR 0 2
39876: PUSH
39877: LD_VAR 0 3
39881: PUSH
39882: LD_VAR 0 4
39886: PUSH
39887: LD_VAR 0 5
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: ST_TO_ADDR
// end ;
39898: LD_VAR 0 6
39902: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39903: LD_INT 0
39905: PPUSH
// if not chassis or not engine then
39906: LD_VAR 0 1
39910: NOT
39911: PUSH
39912: LD_VAR 0 2
39916: NOT
39917: OR
39918: IFFALSE 39922
// exit ;
39920: GO 40118
// case engine of engine_solar :
39922: LD_VAR 0 2
39926: PUSH
39927: LD_INT 2
39929: DOUBLE
39930: EQUAL
39931: IFTRUE 39935
39933: GO 39973
39935: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39936: LD_ADDR_VAR 0 3
39940: PUSH
39941: LD_INT 11
39943: PUSH
39944: LD_INT 12
39946: PUSH
39947: LD_INT 13
39949: PUSH
39950: LD_INT 14
39952: PUSH
39953: LD_INT 1
39955: PUSH
39956: LD_INT 2
39958: PUSH
39959: LD_INT 3
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: ST_TO_ADDR
39971: GO 40102
39973: LD_INT 1
39975: DOUBLE
39976: EQUAL
39977: IFTRUE 39981
39979: GO 40043
39981: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39982: LD_ADDR_VAR 0 3
39986: PUSH
39987: LD_INT 11
39989: PUSH
39990: LD_INT 12
39992: PUSH
39993: LD_INT 13
39995: PUSH
39996: LD_INT 14
39998: PUSH
39999: LD_INT 1
40001: PUSH
40002: LD_INT 2
40004: PUSH
40005: LD_INT 3
40007: PUSH
40008: LD_INT 4
40010: PUSH
40011: LD_INT 5
40013: PUSH
40014: LD_INT 21
40016: PUSH
40017: LD_INT 23
40019: PUSH
40020: LD_INT 22
40022: PUSH
40023: LD_INT 24
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: ST_TO_ADDR
40041: GO 40102
40043: LD_INT 3
40045: DOUBLE
40046: EQUAL
40047: IFTRUE 40051
40049: GO 40101
40051: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40052: LD_ADDR_VAR 0 3
40056: PUSH
40057: LD_INT 13
40059: PUSH
40060: LD_INT 14
40062: PUSH
40063: LD_INT 2
40065: PUSH
40066: LD_INT 3
40068: PUSH
40069: LD_INT 4
40071: PUSH
40072: LD_INT 5
40074: PUSH
40075: LD_INT 21
40077: PUSH
40078: LD_INT 22
40080: PUSH
40081: LD_INT 23
40083: PUSH
40084: LD_INT 24
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: ST_TO_ADDR
40099: GO 40102
40101: POP
// result := ( chassis in result ) ;
40102: LD_ADDR_VAR 0 3
40106: PUSH
40107: LD_VAR 0 1
40111: PUSH
40112: LD_VAR 0 3
40116: IN
40117: ST_TO_ADDR
// end ;
40118: LD_VAR 0 3
40122: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40123: LD_INT 0
40125: PPUSH
// if not chassis or not weapon then
40126: LD_VAR 0 1
40130: NOT
40131: PUSH
40132: LD_VAR 0 2
40136: NOT
40137: OR
40138: IFFALSE 40142
// exit ;
40140: GO 41202
// case weapon of us_machine_gun :
40142: LD_VAR 0 2
40146: PUSH
40147: LD_INT 2
40149: DOUBLE
40150: EQUAL
40151: IFTRUE 40155
40153: GO 40185
40155: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40156: LD_ADDR_VAR 0 3
40160: PUSH
40161: LD_INT 1
40163: PUSH
40164: LD_INT 2
40166: PUSH
40167: LD_INT 3
40169: PUSH
40170: LD_INT 4
40172: PUSH
40173: LD_INT 5
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: ST_TO_ADDR
40183: GO 41186
40185: LD_INT 3
40187: DOUBLE
40188: EQUAL
40189: IFTRUE 40193
40191: GO 40223
40193: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40194: LD_ADDR_VAR 0 3
40198: PUSH
40199: LD_INT 1
40201: PUSH
40202: LD_INT 2
40204: PUSH
40205: LD_INT 3
40207: PUSH
40208: LD_INT 4
40210: PUSH
40211: LD_INT 5
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: ST_TO_ADDR
40221: GO 41186
40223: LD_INT 11
40225: DOUBLE
40226: EQUAL
40227: IFTRUE 40231
40229: GO 40261
40231: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40232: LD_ADDR_VAR 0 3
40236: PUSH
40237: LD_INT 1
40239: PUSH
40240: LD_INT 2
40242: PUSH
40243: LD_INT 3
40245: PUSH
40246: LD_INT 4
40248: PUSH
40249: LD_INT 5
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: ST_TO_ADDR
40259: GO 41186
40261: LD_INT 4
40263: DOUBLE
40264: EQUAL
40265: IFTRUE 40269
40267: GO 40295
40269: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40270: LD_ADDR_VAR 0 3
40274: PUSH
40275: LD_INT 2
40277: PUSH
40278: LD_INT 3
40280: PUSH
40281: LD_INT 4
40283: PUSH
40284: LD_INT 5
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: ST_TO_ADDR
40293: GO 41186
40295: LD_INT 5
40297: DOUBLE
40298: EQUAL
40299: IFTRUE 40303
40301: GO 40329
40303: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40304: LD_ADDR_VAR 0 3
40308: PUSH
40309: LD_INT 2
40311: PUSH
40312: LD_INT 3
40314: PUSH
40315: LD_INT 4
40317: PUSH
40318: LD_INT 5
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: ST_TO_ADDR
40327: GO 41186
40329: LD_INT 9
40331: DOUBLE
40332: EQUAL
40333: IFTRUE 40337
40335: GO 40363
40337: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40338: LD_ADDR_VAR 0 3
40342: PUSH
40343: LD_INT 2
40345: PUSH
40346: LD_INT 3
40348: PUSH
40349: LD_INT 4
40351: PUSH
40352: LD_INT 5
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: ST_TO_ADDR
40361: GO 41186
40363: LD_INT 7
40365: DOUBLE
40366: EQUAL
40367: IFTRUE 40371
40369: GO 40397
40371: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40372: LD_ADDR_VAR 0 3
40376: PUSH
40377: LD_INT 2
40379: PUSH
40380: LD_INT 3
40382: PUSH
40383: LD_INT 4
40385: PUSH
40386: LD_INT 5
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: ST_TO_ADDR
40395: GO 41186
40397: LD_INT 12
40399: DOUBLE
40400: EQUAL
40401: IFTRUE 40405
40403: GO 40431
40405: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40406: LD_ADDR_VAR 0 3
40410: PUSH
40411: LD_INT 2
40413: PUSH
40414: LD_INT 3
40416: PUSH
40417: LD_INT 4
40419: PUSH
40420: LD_INT 5
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: ST_TO_ADDR
40429: GO 41186
40431: LD_INT 13
40433: DOUBLE
40434: EQUAL
40435: IFTRUE 40439
40437: GO 40465
40439: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40440: LD_ADDR_VAR 0 3
40444: PUSH
40445: LD_INT 2
40447: PUSH
40448: LD_INT 3
40450: PUSH
40451: LD_INT 4
40453: PUSH
40454: LD_INT 5
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: ST_TO_ADDR
40463: GO 41186
40465: LD_INT 14
40467: DOUBLE
40468: EQUAL
40469: IFTRUE 40473
40471: GO 40491
40473: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40474: LD_ADDR_VAR 0 3
40478: PUSH
40479: LD_INT 4
40481: PUSH
40482: LD_INT 5
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: ST_TO_ADDR
40489: GO 41186
40491: LD_INT 6
40493: DOUBLE
40494: EQUAL
40495: IFTRUE 40499
40497: GO 40517
40499: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40500: LD_ADDR_VAR 0 3
40504: PUSH
40505: LD_INT 4
40507: PUSH
40508: LD_INT 5
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: ST_TO_ADDR
40515: GO 41186
40517: LD_INT 10
40519: DOUBLE
40520: EQUAL
40521: IFTRUE 40525
40523: GO 40543
40525: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40526: LD_ADDR_VAR 0 3
40530: PUSH
40531: LD_INT 4
40533: PUSH
40534: LD_INT 5
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: ST_TO_ADDR
40541: GO 41186
40543: LD_INT 22
40545: DOUBLE
40546: EQUAL
40547: IFTRUE 40551
40549: GO 40577
40551: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40552: LD_ADDR_VAR 0 3
40556: PUSH
40557: LD_INT 11
40559: PUSH
40560: LD_INT 12
40562: PUSH
40563: LD_INT 13
40565: PUSH
40566: LD_INT 14
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: ST_TO_ADDR
40575: GO 41186
40577: LD_INT 23
40579: DOUBLE
40580: EQUAL
40581: IFTRUE 40585
40583: GO 40611
40585: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40586: LD_ADDR_VAR 0 3
40590: PUSH
40591: LD_INT 11
40593: PUSH
40594: LD_INT 12
40596: PUSH
40597: LD_INT 13
40599: PUSH
40600: LD_INT 14
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: ST_TO_ADDR
40609: GO 41186
40611: LD_INT 24
40613: DOUBLE
40614: EQUAL
40615: IFTRUE 40619
40617: GO 40645
40619: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40620: LD_ADDR_VAR 0 3
40624: PUSH
40625: LD_INT 11
40627: PUSH
40628: LD_INT 12
40630: PUSH
40631: LD_INT 13
40633: PUSH
40634: LD_INT 14
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: ST_TO_ADDR
40643: GO 41186
40645: LD_INT 30
40647: DOUBLE
40648: EQUAL
40649: IFTRUE 40653
40651: GO 40679
40653: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40654: LD_ADDR_VAR 0 3
40658: PUSH
40659: LD_INT 11
40661: PUSH
40662: LD_INT 12
40664: PUSH
40665: LD_INT 13
40667: PUSH
40668: LD_INT 14
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: ST_TO_ADDR
40677: GO 41186
40679: LD_INT 25
40681: DOUBLE
40682: EQUAL
40683: IFTRUE 40687
40685: GO 40705
40687: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40688: LD_ADDR_VAR 0 3
40692: PUSH
40693: LD_INT 13
40695: PUSH
40696: LD_INT 14
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: ST_TO_ADDR
40703: GO 41186
40705: LD_INT 27
40707: DOUBLE
40708: EQUAL
40709: IFTRUE 40713
40711: GO 40731
40713: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40714: LD_ADDR_VAR 0 3
40718: PUSH
40719: LD_INT 13
40721: PUSH
40722: LD_INT 14
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: ST_TO_ADDR
40729: GO 41186
40731: LD_INT 92
40733: DOUBLE
40734: EQUAL
40735: IFTRUE 40739
40737: GO 40765
40739: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40740: LD_ADDR_VAR 0 3
40744: PUSH
40745: LD_INT 11
40747: PUSH
40748: LD_INT 12
40750: PUSH
40751: LD_INT 13
40753: PUSH
40754: LD_INT 14
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: ST_TO_ADDR
40763: GO 41186
40765: LD_INT 28
40767: DOUBLE
40768: EQUAL
40769: IFTRUE 40773
40771: GO 40791
40773: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40774: LD_ADDR_VAR 0 3
40778: PUSH
40779: LD_INT 13
40781: PUSH
40782: LD_INT 14
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: ST_TO_ADDR
40789: GO 41186
40791: LD_INT 29
40793: DOUBLE
40794: EQUAL
40795: IFTRUE 40799
40797: GO 40817
40799: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40800: LD_ADDR_VAR 0 3
40804: PUSH
40805: LD_INT 13
40807: PUSH
40808: LD_INT 14
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: ST_TO_ADDR
40815: GO 41186
40817: LD_INT 31
40819: DOUBLE
40820: EQUAL
40821: IFTRUE 40825
40823: GO 40843
40825: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40826: LD_ADDR_VAR 0 3
40830: PUSH
40831: LD_INT 13
40833: PUSH
40834: LD_INT 14
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: ST_TO_ADDR
40841: GO 41186
40843: LD_INT 26
40845: DOUBLE
40846: EQUAL
40847: IFTRUE 40851
40849: GO 40869
40851: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40852: LD_ADDR_VAR 0 3
40856: PUSH
40857: LD_INT 13
40859: PUSH
40860: LD_INT 14
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: ST_TO_ADDR
40867: GO 41186
40869: LD_INT 42
40871: DOUBLE
40872: EQUAL
40873: IFTRUE 40877
40875: GO 40903
40877: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40878: LD_ADDR_VAR 0 3
40882: PUSH
40883: LD_INT 21
40885: PUSH
40886: LD_INT 22
40888: PUSH
40889: LD_INT 23
40891: PUSH
40892: LD_INT 24
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: ST_TO_ADDR
40901: GO 41186
40903: LD_INT 43
40905: DOUBLE
40906: EQUAL
40907: IFTRUE 40911
40909: GO 40937
40911: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40912: LD_ADDR_VAR 0 3
40916: PUSH
40917: LD_INT 21
40919: PUSH
40920: LD_INT 22
40922: PUSH
40923: LD_INT 23
40925: PUSH
40926: LD_INT 24
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: ST_TO_ADDR
40935: GO 41186
40937: LD_INT 44
40939: DOUBLE
40940: EQUAL
40941: IFTRUE 40945
40943: GO 40971
40945: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40946: LD_ADDR_VAR 0 3
40950: PUSH
40951: LD_INT 21
40953: PUSH
40954: LD_INT 22
40956: PUSH
40957: LD_INT 23
40959: PUSH
40960: LD_INT 24
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: ST_TO_ADDR
40969: GO 41186
40971: LD_INT 45
40973: DOUBLE
40974: EQUAL
40975: IFTRUE 40979
40977: GO 41005
40979: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40980: LD_ADDR_VAR 0 3
40984: PUSH
40985: LD_INT 21
40987: PUSH
40988: LD_INT 22
40990: PUSH
40991: LD_INT 23
40993: PUSH
40994: LD_INT 24
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: ST_TO_ADDR
41003: GO 41186
41005: LD_INT 49
41007: DOUBLE
41008: EQUAL
41009: IFTRUE 41013
41011: GO 41039
41013: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41014: LD_ADDR_VAR 0 3
41018: PUSH
41019: LD_INT 21
41021: PUSH
41022: LD_INT 22
41024: PUSH
41025: LD_INT 23
41027: PUSH
41028: LD_INT 24
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: ST_TO_ADDR
41037: GO 41186
41039: LD_INT 51
41041: DOUBLE
41042: EQUAL
41043: IFTRUE 41047
41045: GO 41073
41047: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41048: LD_ADDR_VAR 0 3
41052: PUSH
41053: LD_INT 21
41055: PUSH
41056: LD_INT 22
41058: PUSH
41059: LD_INT 23
41061: PUSH
41062: LD_INT 24
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: ST_TO_ADDR
41071: GO 41186
41073: LD_INT 52
41075: DOUBLE
41076: EQUAL
41077: IFTRUE 41081
41079: GO 41107
41081: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41082: LD_ADDR_VAR 0 3
41086: PUSH
41087: LD_INT 21
41089: PUSH
41090: LD_INT 22
41092: PUSH
41093: LD_INT 23
41095: PUSH
41096: LD_INT 24
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: ST_TO_ADDR
41105: GO 41186
41107: LD_INT 53
41109: DOUBLE
41110: EQUAL
41111: IFTRUE 41115
41113: GO 41133
41115: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41116: LD_ADDR_VAR 0 3
41120: PUSH
41121: LD_INT 23
41123: PUSH
41124: LD_INT 24
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: ST_TO_ADDR
41131: GO 41186
41133: LD_INT 46
41135: DOUBLE
41136: EQUAL
41137: IFTRUE 41141
41139: GO 41159
41141: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41142: LD_ADDR_VAR 0 3
41146: PUSH
41147: LD_INT 23
41149: PUSH
41150: LD_INT 24
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: ST_TO_ADDR
41157: GO 41186
41159: LD_INT 47
41161: DOUBLE
41162: EQUAL
41163: IFTRUE 41167
41165: GO 41185
41167: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41168: LD_ADDR_VAR 0 3
41172: PUSH
41173: LD_INT 23
41175: PUSH
41176: LD_INT 24
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: ST_TO_ADDR
41183: GO 41186
41185: POP
// result := ( chassis in result ) ;
41186: LD_ADDR_VAR 0 3
41190: PUSH
41191: LD_VAR 0 1
41195: PUSH
41196: LD_VAR 0 3
41200: IN
41201: ST_TO_ADDR
// end ;
41202: LD_VAR 0 3
41206: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41207: LD_INT 0
41209: PPUSH
41210: PPUSH
41211: PPUSH
41212: PPUSH
41213: PPUSH
41214: PPUSH
41215: PPUSH
// result := array ;
41216: LD_ADDR_VAR 0 5
41220: PUSH
41221: LD_VAR 0 1
41225: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41226: LD_VAR 0 1
41230: NOT
41231: PUSH
41232: LD_VAR 0 2
41236: NOT
41237: OR
41238: PUSH
41239: LD_VAR 0 3
41243: NOT
41244: OR
41245: PUSH
41246: LD_VAR 0 2
41250: PUSH
41251: LD_VAR 0 1
41255: GREATER
41256: OR
41257: PUSH
41258: LD_VAR 0 3
41262: PUSH
41263: LD_VAR 0 1
41267: GREATER
41268: OR
41269: IFFALSE 41273
// exit ;
41271: GO 41569
// if direction then
41273: LD_VAR 0 4
41277: IFFALSE 41341
// begin d := 1 ;
41279: LD_ADDR_VAR 0 9
41283: PUSH
41284: LD_INT 1
41286: ST_TO_ADDR
// if i_from > i_to then
41287: LD_VAR 0 2
41291: PUSH
41292: LD_VAR 0 3
41296: GREATER
41297: IFFALSE 41323
// length := ( array - i_from ) + i_to else
41299: LD_ADDR_VAR 0 11
41303: PUSH
41304: LD_VAR 0 1
41308: PUSH
41309: LD_VAR 0 2
41313: MINUS
41314: PUSH
41315: LD_VAR 0 3
41319: PLUS
41320: ST_TO_ADDR
41321: GO 41339
// length := i_to - i_from ;
41323: LD_ADDR_VAR 0 11
41327: PUSH
41328: LD_VAR 0 3
41332: PUSH
41333: LD_VAR 0 2
41337: MINUS
41338: ST_TO_ADDR
// end else
41339: GO 41402
// begin d := - 1 ;
41341: LD_ADDR_VAR 0 9
41345: PUSH
41346: LD_INT 1
41348: NEG
41349: ST_TO_ADDR
// if i_from > i_to then
41350: LD_VAR 0 2
41354: PUSH
41355: LD_VAR 0 3
41359: GREATER
41360: IFFALSE 41380
// length := i_from - i_to else
41362: LD_ADDR_VAR 0 11
41366: PUSH
41367: LD_VAR 0 2
41371: PUSH
41372: LD_VAR 0 3
41376: MINUS
41377: ST_TO_ADDR
41378: GO 41402
// length := ( array - i_to ) + i_from ;
41380: LD_ADDR_VAR 0 11
41384: PUSH
41385: LD_VAR 0 1
41389: PUSH
41390: LD_VAR 0 3
41394: MINUS
41395: PUSH
41396: LD_VAR 0 2
41400: PLUS
41401: ST_TO_ADDR
// end ; if not length then
41402: LD_VAR 0 11
41406: NOT
41407: IFFALSE 41411
// exit ;
41409: GO 41569
// tmp := array ;
41411: LD_ADDR_VAR 0 10
41415: PUSH
41416: LD_VAR 0 1
41420: ST_TO_ADDR
// for i = 1 to length do
41421: LD_ADDR_VAR 0 6
41425: PUSH
41426: DOUBLE
41427: LD_INT 1
41429: DEC
41430: ST_TO_ADDR
41431: LD_VAR 0 11
41435: PUSH
41436: FOR_TO
41437: IFFALSE 41557
// begin for j = 1 to array do
41439: LD_ADDR_VAR 0 7
41443: PUSH
41444: DOUBLE
41445: LD_INT 1
41447: DEC
41448: ST_TO_ADDR
41449: LD_VAR 0 1
41453: PUSH
41454: FOR_TO
41455: IFFALSE 41543
// begin k := j + d ;
41457: LD_ADDR_VAR 0 8
41461: PUSH
41462: LD_VAR 0 7
41466: PUSH
41467: LD_VAR 0 9
41471: PLUS
41472: ST_TO_ADDR
// if k > array then
41473: LD_VAR 0 8
41477: PUSH
41478: LD_VAR 0 1
41482: GREATER
41483: IFFALSE 41493
// k := 1 ;
41485: LD_ADDR_VAR 0 8
41489: PUSH
41490: LD_INT 1
41492: ST_TO_ADDR
// if not k then
41493: LD_VAR 0 8
41497: NOT
41498: IFFALSE 41510
// k := array ;
41500: LD_ADDR_VAR 0 8
41504: PUSH
41505: LD_VAR 0 1
41509: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41510: LD_ADDR_VAR 0 10
41514: PUSH
41515: LD_VAR 0 10
41519: PPUSH
41520: LD_VAR 0 8
41524: PPUSH
41525: LD_VAR 0 1
41529: PUSH
41530: LD_VAR 0 7
41534: ARRAY
41535: PPUSH
41536: CALL_OW 1
41540: ST_TO_ADDR
// end ;
41541: GO 41454
41543: POP
41544: POP
// array := tmp ;
41545: LD_ADDR_VAR 0 1
41549: PUSH
41550: LD_VAR 0 10
41554: ST_TO_ADDR
// end ;
41555: GO 41436
41557: POP
41558: POP
// result := array ;
41559: LD_ADDR_VAR 0 5
41563: PUSH
41564: LD_VAR 0 1
41568: ST_TO_ADDR
// end ;
41569: LD_VAR 0 5
41573: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41574: LD_INT 0
41576: PPUSH
41577: PPUSH
// result := 0 ;
41578: LD_ADDR_VAR 0 3
41582: PUSH
41583: LD_INT 0
41585: ST_TO_ADDR
// if not array or not value in array then
41586: LD_VAR 0 1
41590: NOT
41591: PUSH
41592: LD_VAR 0 2
41596: PUSH
41597: LD_VAR 0 1
41601: IN
41602: NOT
41603: OR
41604: IFFALSE 41608
// exit ;
41606: GO 41662
// for i = 1 to array do
41608: LD_ADDR_VAR 0 4
41612: PUSH
41613: DOUBLE
41614: LD_INT 1
41616: DEC
41617: ST_TO_ADDR
41618: LD_VAR 0 1
41622: PUSH
41623: FOR_TO
41624: IFFALSE 41660
// if value = array [ i ] then
41626: LD_VAR 0 2
41630: PUSH
41631: LD_VAR 0 1
41635: PUSH
41636: LD_VAR 0 4
41640: ARRAY
41641: EQUAL
41642: IFFALSE 41658
// begin result := i ;
41644: LD_ADDR_VAR 0 3
41648: PUSH
41649: LD_VAR 0 4
41653: ST_TO_ADDR
// exit ;
41654: POP
41655: POP
41656: GO 41662
// end ;
41658: GO 41623
41660: POP
41661: POP
// end ;
41662: LD_VAR 0 3
41666: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41667: LD_INT 0
41669: PPUSH
// vc_chassis := chassis ;
41670: LD_ADDR_OWVAR 37
41674: PUSH
41675: LD_VAR 0 1
41679: ST_TO_ADDR
// vc_engine := engine ;
41680: LD_ADDR_OWVAR 39
41684: PUSH
41685: LD_VAR 0 2
41689: ST_TO_ADDR
// vc_control := control ;
41690: LD_ADDR_OWVAR 38
41694: PUSH
41695: LD_VAR 0 3
41699: ST_TO_ADDR
// vc_weapon := weapon ;
41700: LD_ADDR_OWVAR 40
41704: PUSH
41705: LD_VAR 0 4
41709: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41710: LD_ADDR_OWVAR 41
41714: PUSH
41715: LD_VAR 0 5
41719: ST_TO_ADDR
// end ;
41720: LD_VAR 0 6
41724: RET
// export function WantPlant ( unit ) ; var task ; begin
41725: LD_INT 0
41727: PPUSH
41728: PPUSH
// result := false ;
41729: LD_ADDR_VAR 0 2
41733: PUSH
41734: LD_INT 0
41736: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41737: LD_ADDR_VAR 0 3
41741: PUSH
41742: LD_VAR 0 1
41746: PPUSH
41747: CALL_OW 437
41751: ST_TO_ADDR
// if task then
41752: LD_VAR 0 3
41756: IFFALSE 41784
// if task [ 1 ] [ 1 ] = p then
41758: LD_VAR 0 3
41762: PUSH
41763: LD_INT 1
41765: ARRAY
41766: PUSH
41767: LD_INT 1
41769: ARRAY
41770: PUSH
41771: LD_STRING p
41773: EQUAL
41774: IFFALSE 41784
// result := true ;
41776: LD_ADDR_VAR 0 2
41780: PUSH
41781: LD_INT 1
41783: ST_TO_ADDR
// end ;
41784: LD_VAR 0 2
41788: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41789: LD_INT 0
41791: PPUSH
41792: PPUSH
41793: PPUSH
41794: PPUSH
// if pos < 1 then
41795: LD_VAR 0 2
41799: PUSH
41800: LD_INT 1
41802: LESS
41803: IFFALSE 41807
// exit ;
41805: GO 42110
// if pos = 1 then
41807: LD_VAR 0 2
41811: PUSH
41812: LD_INT 1
41814: EQUAL
41815: IFFALSE 41848
// result := Replace ( arr , pos [ 1 ] , value ) else
41817: LD_ADDR_VAR 0 4
41821: PUSH
41822: LD_VAR 0 1
41826: PPUSH
41827: LD_VAR 0 2
41831: PUSH
41832: LD_INT 1
41834: ARRAY
41835: PPUSH
41836: LD_VAR 0 3
41840: PPUSH
41841: CALL_OW 1
41845: ST_TO_ADDR
41846: GO 42110
// begin tmp := arr ;
41848: LD_ADDR_VAR 0 6
41852: PUSH
41853: LD_VAR 0 1
41857: ST_TO_ADDR
// s_arr := [ tmp ] ;
41858: LD_ADDR_VAR 0 7
41862: PUSH
41863: LD_VAR 0 6
41867: PUSH
41868: EMPTY
41869: LIST
41870: ST_TO_ADDR
// for i = 1 to pos - 1 do
41871: LD_ADDR_VAR 0 5
41875: PUSH
41876: DOUBLE
41877: LD_INT 1
41879: DEC
41880: ST_TO_ADDR
41881: LD_VAR 0 2
41885: PUSH
41886: LD_INT 1
41888: MINUS
41889: PUSH
41890: FOR_TO
41891: IFFALSE 41936
// begin tmp := tmp [ pos [ i ] ] ;
41893: LD_ADDR_VAR 0 6
41897: PUSH
41898: LD_VAR 0 6
41902: PUSH
41903: LD_VAR 0 2
41907: PUSH
41908: LD_VAR 0 5
41912: ARRAY
41913: ARRAY
41914: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41915: LD_ADDR_VAR 0 7
41919: PUSH
41920: LD_VAR 0 7
41924: PUSH
41925: LD_VAR 0 6
41929: PUSH
41930: EMPTY
41931: LIST
41932: ADD
41933: ST_TO_ADDR
// end ;
41934: GO 41890
41936: POP
41937: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41938: LD_ADDR_VAR 0 6
41942: PUSH
41943: LD_VAR 0 6
41947: PPUSH
41948: LD_VAR 0 2
41952: PUSH
41953: LD_VAR 0 2
41957: ARRAY
41958: PPUSH
41959: LD_VAR 0 3
41963: PPUSH
41964: CALL_OW 1
41968: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41969: LD_ADDR_VAR 0 7
41973: PUSH
41974: LD_VAR 0 7
41978: PPUSH
41979: LD_VAR 0 7
41983: PPUSH
41984: LD_VAR 0 6
41988: PPUSH
41989: CALL_OW 1
41993: ST_TO_ADDR
// for i = s_arr downto 2 do
41994: LD_ADDR_VAR 0 5
41998: PUSH
41999: DOUBLE
42000: LD_VAR 0 7
42004: INC
42005: ST_TO_ADDR
42006: LD_INT 2
42008: PUSH
42009: FOR_DOWNTO
42010: IFFALSE 42094
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42012: LD_ADDR_VAR 0 6
42016: PUSH
42017: LD_VAR 0 7
42021: PUSH
42022: LD_VAR 0 5
42026: PUSH
42027: LD_INT 1
42029: MINUS
42030: ARRAY
42031: PPUSH
42032: LD_VAR 0 2
42036: PUSH
42037: LD_VAR 0 5
42041: PUSH
42042: LD_INT 1
42044: MINUS
42045: ARRAY
42046: PPUSH
42047: LD_VAR 0 7
42051: PUSH
42052: LD_VAR 0 5
42056: ARRAY
42057: PPUSH
42058: CALL_OW 1
42062: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42063: LD_ADDR_VAR 0 7
42067: PUSH
42068: LD_VAR 0 7
42072: PPUSH
42073: LD_VAR 0 5
42077: PUSH
42078: LD_INT 1
42080: MINUS
42081: PPUSH
42082: LD_VAR 0 6
42086: PPUSH
42087: CALL_OW 1
42091: ST_TO_ADDR
// end ;
42092: GO 42009
42094: POP
42095: POP
// result := s_arr [ 1 ] ;
42096: LD_ADDR_VAR 0 4
42100: PUSH
42101: LD_VAR 0 7
42105: PUSH
42106: LD_INT 1
42108: ARRAY
42109: ST_TO_ADDR
// end ; end ;
42110: LD_VAR 0 4
42114: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42115: LD_INT 0
42117: PPUSH
42118: PPUSH
// if not list then
42119: LD_VAR 0 1
42123: NOT
42124: IFFALSE 42128
// exit ;
42126: GO 42219
// i := list [ pos1 ] ;
42128: LD_ADDR_VAR 0 5
42132: PUSH
42133: LD_VAR 0 1
42137: PUSH
42138: LD_VAR 0 2
42142: ARRAY
42143: ST_TO_ADDR
// if not i then
42144: LD_VAR 0 5
42148: NOT
42149: IFFALSE 42153
// exit ;
42151: GO 42219
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42153: LD_ADDR_VAR 0 1
42157: PUSH
42158: LD_VAR 0 1
42162: PPUSH
42163: LD_VAR 0 2
42167: PPUSH
42168: LD_VAR 0 1
42172: PUSH
42173: LD_VAR 0 3
42177: ARRAY
42178: PPUSH
42179: CALL_OW 1
42183: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42184: LD_ADDR_VAR 0 1
42188: PUSH
42189: LD_VAR 0 1
42193: PPUSH
42194: LD_VAR 0 3
42198: PPUSH
42199: LD_VAR 0 5
42203: PPUSH
42204: CALL_OW 1
42208: ST_TO_ADDR
// result := list ;
42209: LD_ADDR_VAR 0 4
42213: PUSH
42214: LD_VAR 0 1
42218: ST_TO_ADDR
// end ;
42219: LD_VAR 0 4
42223: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42224: LD_INT 0
42226: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42227: LD_ADDR_VAR 0 5
42231: PUSH
42232: LD_VAR 0 1
42236: PPUSH
42237: CALL_OW 250
42241: PPUSH
42242: LD_VAR 0 1
42246: PPUSH
42247: CALL_OW 251
42251: PPUSH
42252: LD_VAR 0 2
42256: PPUSH
42257: LD_VAR 0 3
42261: PPUSH
42262: LD_VAR 0 4
42266: PPUSH
42267: CALL 42277 0 5
42271: ST_TO_ADDR
// end ;
42272: LD_VAR 0 5
42276: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42277: LD_INT 0
42279: PPUSH
42280: PPUSH
42281: PPUSH
42282: PPUSH
// if not list then
42283: LD_VAR 0 3
42287: NOT
42288: IFFALSE 42292
// exit ;
42290: GO 42680
// result := [ ] ;
42292: LD_ADDR_VAR 0 6
42296: PUSH
42297: EMPTY
42298: ST_TO_ADDR
// for i in list do
42299: LD_ADDR_VAR 0 7
42303: PUSH
42304: LD_VAR 0 3
42308: PUSH
42309: FOR_IN
42310: IFFALSE 42512
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42312: LD_ADDR_VAR 0 9
42316: PUSH
42317: LD_VAR 0 7
42321: PPUSH
42322: LD_VAR 0 1
42326: PPUSH
42327: LD_VAR 0 2
42331: PPUSH
42332: CALL_OW 297
42336: ST_TO_ADDR
// if not result then
42337: LD_VAR 0 6
42341: NOT
42342: IFFALSE 42368
// result := [ [ i , tmp ] ] else
42344: LD_ADDR_VAR 0 6
42348: PUSH
42349: LD_VAR 0 7
42353: PUSH
42354: LD_VAR 0 9
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: EMPTY
42364: LIST
42365: ST_TO_ADDR
42366: GO 42510
// begin if result [ result ] [ 2 ] < tmp then
42368: LD_VAR 0 6
42372: PUSH
42373: LD_VAR 0 6
42377: ARRAY
42378: PUSH
42379: LD_INT 2
42381: ARRAY
42382: PUSH
42383: LD_VAR 0 9
42387: LESS
42388: IFFALSE 42430
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42390: LD_ADDR_VAR 0 6
42394: PUSH
42395: LD_VAR 0 6
42399: PPUSH
42400: LD_VAR 0 6
42404: PUSH
42405: LD_INT 1
42407: PLUS
42408: PPUSH
42409: LD_VAR 0 7
42413: PUSH
42414: LD_VAR 0 9
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PPUSH
42423: CALL_OW 2
42427: ST_TO_ADDR
42428: GO 42510
// for j = 1 to result do
42430: LD_ADDR_VAR 0 8
42434: PUSH
42435: DOUBLE
42436: LD_INT 1
42438: DEC
42439: ST_TO_ADDR
42440: LD_VAR 0 6
42444: PUSH
42445: FOR_TO
42446: IFFALSE 42508
// begin if tmp < result [ j ] [ 2 ] then
42448: LD_VAR 0 9
42452: PUSH
42453: LD_VAR 0 6
42457: PUSH
42458: LD_VAR 0 8
42462: ARRAY
42463: PUSH
42464: LD_INT 2
42466: ARRAY
42467: LESS
42468: IFFALSE 42506
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42470: LD_ADDR_VAR 0 6
42474: PUSH
42475: LD_VAR 0 6
42479: PPUSH
42480: LD_VAR 0 8
42484: PPUSH
42485: LD_VAR 0 7
42489: PUSH
42490: LD_VAR 0 9
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PPUSH
42499: CALL_OW 2
42503: ST_TO_ADDR
// break ;
42504: GO 42508
// end ; end ;
42506: GO 42445
42508: POP
42509: POP
// end ; end ;
42510: GO 42309
42512: POP
42513: POP
// if result and not asc then
42514: LD_VAR 0 6
42518: PUSH
42519: LD_VAR 0 4
42523: NOT
42524: AND
42525: IFFALSE 42600
// begin tmp := result ;
42527: LD_ADDR_VAR 0 9
42531: PUSH
42532: LD_VAR 0 6
42536: ST_TO_ADDR
// for i = tmp downto 1 do
42537: LD_ADDR_VAR 0 7
42541: PUSH
42542: DOUBLE
42543: LD_VAR 0 9
42547: INC
42548: ST_TO_ADDR
42549: LD_INT 1
42551: PUSH
42552: FOR_DOWNTO
42553: IFFALSE 42598
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42555: LD_ADDR_VAR 0 6
42559: PUSH
42560: LD_VAR 0 6
42564: PPUSH
42565: LD_VAR 0 9
42569: PUSH
42570: LD_VAR 0 7
42574: MINUS
42575: PUSH
42576: LD_INT 1
42578: PLUS
42579: PPUSH
42580: LD_VAR 0 9
42584: PUSH
42585: LD_VAR 0 7
42589: ARRAY
42590: PPUSH
42591: CALL_OW 1
42595: ST_TO_ADDR
42596: GO 42552
42598: POP
42599: POP
// end ; tmp := [ ] ;
42600: LD_ADDR_VAR 0 9
42604: PUSH
42605: EMPTY
42606: ST_TO_ADDR
// if mode then
42607: LD_VAR 0 5
42611: IFFALSE 42680
// begin for i = 1 to result do
42613: LD_ADDR_VAR 0 7
42617: PUSH
42618: DOUBLE
42619: LD_INT 1
42621: DEC
42622: ST_TO_ADDR
42623: LD_VAR 0 6
42627: PUSH
42628: FOR_TO
42629: IFFALSE 42668
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42631: LD_ADDR_VAR 0 9
42635: PUSH
42636: LD_VAR 0 9
42640: PPUSH
42641: LD_VAR 0 7
42645: PPUSH
42646: LD_VAR 0 6
42650: PUSH
42651: LD_VAR 0 7
42655: ARRAY
42656: PUSH
42657: LD_INT 1
42659: ARRAY
42660: PPUSH
42661: CALL_OW 1
42665: ST_TO_ADDR
42666: GO 42628
42668: POP
42669: POP
// result := tmp ;
42670: LD_ADDR_VAR 0 6
42674: PUSH
42675: LD_VAR 0 9
42679: ST_TO_ADDR
// end ; end ;
42680: LD_VAR 0 6
42684: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42685: LD_INT 0
42687: PPUSH
42688: PPUSH
42689: PPUSH
42690: PPUSH
42691: PPUSH
42692: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42693: LD_ADDR_VAR 0 5
42697: PUSH
42698: LD_INT 0
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: EMPTY
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: ST_TO_ADDR
// if not x or not y then
42715: LD_VAR 0 2
42719: NOT
42720: PUSH
42721: LD_VAR 0 3
42725: NOT
42726: OR
42727: IFFALSE 42731
// exit ;
42729: GO 44381
// if not range then
42731: LD_VAR 0 4
42735: NOT
42736: IFFALSE 42746
// range := 10 ;
42738: LD_ADDR_VAR 0 4
42742: PUSH
42743: LD_INT 10
42745: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42746: LD_ADDR_VAR 0 8
42750: PUSH
42751: LD_INT 81
42753: PUSH
42754: LD_VAR 0 1
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 92
42765: PUSH
42766: LD_VAR 0 2
42770: PUSH
42771: LD_VAR 0 3
42775: PUSH
42776: LD_VAR 0 4
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 3
42789: PUSH
42790: LD_INT 21
42792: PUSH
42793: LD_INT 3
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: LIST
42808: PPUSH
42809: CALL_OW 69
42813: ST_TO_ADDR
// if not tmp then
42814: LD_VAR 0 8
42818: NOT
42819: IFFALSE 42823
// exit ;
42821: GO 44381
// for i in tmp do
42823: LD_ADDR_VAR 0 6
42827: PUSH
42828: LD_VAR 0 8
42832: PUSH
42833: FOR_IN
42834: IFFALSE 44356
// begin points := [ 0 , 0 , 0 ] ;
42836: LD_ADDR_VAR 0 9
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: LD_INT 0
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: LIST
42854: ST_TO_ADDR
// bpoints := 1 ;
42855: LD_ADDR_VAR 0 10
42859: PUSH
42860: LD_INT 1
42862: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42863: LD_VAR 0 6
42867: PPUSH
42868: CALL_OW 247
42872: PUSH
42873: LD_INT 1
42875: DOUBLE
42876: EQUAL
42877: IFTRUE 42881
42879: GO 43459
42881: POP
// begin if GetClass ( i ) = 1 then
42882: LD_VAR 0 6
42886: PPUSH
42887: CALL_OW 257
42891: PUSH
42892: LD_INT 1
42894: EQUAL
42895: IFFALSE 42916
// points := [ 10 , 5 , 3 ] ;
42897: LD_ADDR_VAR 0 9
42901: PUSH
42902: LD_INT 10
42904: PUSH
42905: LD_INT 5
42907: PUSH
42908: LD_INT 3
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: LIST
42915: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42916: LD_VAR 0 6
42920: PPUSH
42921: CALL_OW 257
42925: PUSH
42926: LD_INT 2
42928: PUSH
42929: LD_INT 3
42931: PUSH
42932: LD_INT 4
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: LIST
42939: IN
42940: IFFALSE 42961
// points := [ 3 , 2 , 1 ] ;
42942: LD_ADDR_VAR 0 9
42946: PUSH
42947: LD_INT 3
42949: PUSH
42950: LD_INT 2
42952: PUSH
42953: LD_INT 1
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: LIST
42960: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42961: LD_VAR 0 6
42965: PPUSH
42966: CALL_OW 257
42970: PUSH
42971: LD_INT 5
42973: EQUAL
42974: IFFALSE 42995
// points := [ 130 , 5 , 2 ] ;
42976: LD_ADDR_VAR 0 9
42980: PUSH
42981: LD_INT 130
42983: PUSH
42984: LD_INT 5
42986: PUSH
42987: LD_INT 2
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: LIST
42994: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42995: LD_VAR 0 6
42999: PPUSH
43000: CALL_OW 257
43004: PUSH
43005: LD_INT 8
43007: EQUAL
43008: IFFALSE 43029
// points := [ 35 , 35 , 30 ] ;
43010: LD_ADDR_VAR 0 9
43014: PUSH
43015: LD_INT 35
43017: PUSH
43018: LD_INT 35
43020: PUSH
43021: LD_INT 30
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: LIST
43028: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43029: LD_VAR 0 6
43033: PPUSH
43034: CALL_OW 257
43038: PUSH
43039: LD_INT 9
43041: EQUAL
43042: IFFALSE 43063
// points := [ 20 , 55 , 40 ] ;
43044: LD_ADDR_VAR 0 9
43048: PUSH
43049: LD_INT 20
43051: PUSH
43052: LD_INT 55
43054: PUSH
43055: LD_INT 40
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: LIST
43062: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43063: LD_VAR 0 6
43067: PPUSH
43068: CALL_OW 257
43072: PUSH
43073: LD_INT 12
43075: PUSH
43076: LD_INT 16
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: IN
43083: IFFALSE 43104
// points := [ 5 , 3 , 2 ] ;
43085: LD_ADDR_VAR 0 9
43089: PUSH
43090: LD_INT 5
43092: PUSH
43093: LD_INT 3
43095: PUSH
43096: LD_INT 2
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: LIST
43103: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43104: LD_VAR 0 6
43108: PPUSH
43109: CALL_OW 257
43113: PUSH
43114: LD_INT 17
43116: EQUAL
43117: IFFALSE 43138
// points := [ 100 , 50 , 75 ] ;
43119: LD_ADDR_VAR 0 9
43123: PUSH
43124: LD_INT 100
43126: PUSH
43127: LD_INT 50
43129: PUSH
43130: LD_INT 75
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: LIST
43137: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43138: LD_VAR 0 6
43142: PPUSH
43143: CALL_OW 257
43147: PUSH
43148: LD_INT 15
43150: EQUAL
43151: IFFALSE 43172
// points := [ 10 , 5 , 3 ] ;
43153: LD_ADDR_VAR 0 9
43157: PUSH
43158: LD_INT 10
43160: PUSH
43161: LD_INT 5
43163: PUSH
43164: LD_INT 3
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: LIST
43171: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43172: LD_VAR 0 6
43176: PPUSH
43177: CALL_OW 257
43181: PUSH
43182: LD_INT 14
43184: EQUAL
43185: IFFALSE 43206
// points := [ 10 , 0 , 0 ] ;
43187: LD_ADDR_VAR 0 9
43191: PUSH
43192: LD_INT 10
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: LD_INT 0
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: LIST
43205: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43206: LD_VAR 0 6
43210: PPUSH
43211: CALL_OW 257
43215: PUSH
43216: LD_INT 11
43218: EQUAL
43219: IFFALSE 43240
// points := [ 30 , 10 , 5 ] ;
43221: LD_ADDR_VAR 0 9
43225: PUSH
43226: LD_INT 30
43228: PUSH
43229: LD_INT 10
43231: PUSH
43232: LD_INT 5
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: LIST
43239: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43240: LD_VAR 0 1
43244: PPUSH
43245: LD_INT 5
43247: PPUSH
43248: CALL_OW 321
43252: PUSH
43253: LD_INT 2
43255: EQUAL
43256: IFFALSE 43273
// bpoints := bpoints * 1.8 ;
43258: LD_ADDR_VAR 0 10
43262: PUSH
43263: LD_VAR 0 10
43267: PUSH
43268: LD_REAL  1.80000000000000E+0000
43271: MUL
43272: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43273: LD_VAR 0 6
43277: PPUSH
43278: CALL_OW 257
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: LD_INT 2
43288: PUSH
43289: LD_INT 3
43291: PUSH
43292: LD_INT 4
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: IN
43301: PUSH
43302: LD_VAR 0 1
43306: PPUSH
43307: LD_INT 51
43309: PPUSH
43310: CALL_OW 321
43314: PUSH
43315: LD_INT 2
43317: EQUAL
43318: AND
43319: IFFALSE 43336
// bpoints := bpoints * 1.2 ;
43321: LD_ADDR_VAR 0 10
43325: PUSH
43326: LD_VAR 0 10
43330: PUSH
43331: LD_REAL  1.20000000000000E+0000
43334: MUL
43335: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43336: LD_VAR 0 6
43340: PPUSH
43341: CALL_OW 257
43345: PUSH
43346: LD_INT 5
43348: PUSH
43349: LD_INT 7
43351: PUSH
43352: LD_INT 9
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: LIST
43359: IN
43360: PUSH
43361: LD_VAR 0 1
43365: PPUSH
43366: LD_INT 52
43368: PPUSH
43369: CALL_OW 321
43373: PUSH
43374: LD_INT 2
43376: EQUAL
43377: AND
43378: IFFALSE 43395
// bpoints := bpoints * 1.5 ;
43380: LD_ADDR_VAR 0 10
43384: PUSH
43385: LD_VAR 0 10
43389: PUSH
43390: LD_REAL  1.50000000000000E+0000
43393: MUL
43394: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43395: LD_VAR 0 1
43399: PPUSH
43400: LD_INT 66
43402: PPUSH
43403: CALL_OW 321
43407: PUSH
43408: LD_INT 2
43410: EQUAL
43411: IFFALSE 43428
// bpoints := bpoints * 1.1 ;
43413: LD_ADDR_VAR 0 10
43417: PUSH
43418: LD_VAR 0 10
43422: PUSH
43423: LD_REAL  1.10000000000000E+0000
43426: MUL
43427: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43428: LD_ADDR_VAR 0 10
43432: PUSH
43433: LD_VAR 0 10
43437: PUSH
43438: LD_VAR 0 6
43442: PPUSH
43443: LD_INT 1
43445: PPUSH
43446: CALL_OW 259
43450: PUSH
43451: LD_REAL  1.15000000000000E+0000
43454: MUL
43455: MUL
43456: ST_TO_ADDR
// end ; unit_vehicle :
43457: GO 44285
43459: LD_INT 2
43461: DOUBLE
43462: EQUAL
43463: IFTRUE 43467
43465: GO 44273
43467: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43468: LD_VAR 0 6
43472: PPUSH
43473: CALL_OW 264
43477: PUSH
43478: LD_INT 2
43480: PUSH
43481: LD_INT 42
43483: PUSH
43484: LD_INT 24
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: LIST
43491: IN
43492: IFFALSE 43513
// points := [ 25 , 5 , 3 ] ;
43494: LD_ADDR_VAR 0 9
43498: PUSH
43499: LD_INT 25
43501: PUSH
43502: LD_INT 5
43504: PUSH
43505: LD_INT 3
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: LIST
43512: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43513: LD_VAR 0 6
43517: PPUSH
43518: CALL_OW 264
43522: PUSH
43523: LD_INT 4
43525: PUSH
43526: LD_INT 43
43528: PUSH
43529: LD_INT 25
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: LIST
43536: IN
43537: IFFALSE 43558
// points := [ 40 , 15 , 5 ] ;
43539: LD_ADDR_VAR 0 9
43543: PUSH
43544: LD_INT 40
43546: PUSH
43547: LD_INT 15
43549: PUSH
43550: LD_INT 5
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: LIST
43557: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43558: LD_VAR 0 6
43562: PPUSH
43563: CALL_OW 264
43567: PUSH
43568: LD_INT 3
43570: PUSH
43571: LD_INT 23
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: IN
43578: IFFALSE 43599
// points := [ 7 , 25 , 8 ] ;
43580: LD_ADDR_VAR 0 9
43584: PUSH
43585: LD_INT 7
43587: PUSH
43588: LD_INT 25
43590: PUSH
43591: LD_INT 8
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: LIST
43598: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43599: LD_VAR 0 6
43603: PPUSH
43604: CALL_OW 264
43608: PUSH
43609: LD_INT 5
43611: PUSH
43612: LD_INT 27
43614: PUSH
43615: LD_INT 44
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: LIST
43622: IN
43623: IFFALSE 43644
// points := [ 14 , 50 , 16 ] ;
43625: LD_ADDR_VAR 0 9
43629: PUSH
43630: LD_INT 14
43632: PUSH
43633: LD_INT 50
43635: PUSH
43636: LD_INT 16
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: LIST
43643: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43644: LD_VAR 0 6
43648: PPUSH
43649: CALL_OW 264
43653: PUSH
43654: LD_INT 6
43656: PUSH
43657: LD_INT 46
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: IN
43664: IFFALSE 43685
// points := [ 32 , 120 , 70 ] ;
43666: LD_ADDR_VAR 0 9
43670: PUSH
43671: LD_INT 32
43673: PUSH
43674: LD_INT 120
43676: PUSH
43677: LD_INT 70
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: LIST
43684: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43685: LD_VAR 0 6
43689: PPUSH
43690: CALL_OW 264
43694: PUSH
43695: LD_INT 7
43697: PUSH
43698: LD_INT 28
43700: PUSH
43701: LD_INT 45
43703: PUSH
43704: LD_INT 92
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: IN
43713: IFFALSE 43734
// points := [ 35 , 20 , 45 ] ;
43715: LD_ADDR_VAR 0 9
43719: PUSH
43720: LD_INT 35
43722: PUSH
43723: LD_INT 20
43725: PUSH
43726: LD_INT 45
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: LIST
43733: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43734: LD_VAR 0 6
43738: PPUSH
43739: CALL_OW 264
43743: PUSH
43744: LD_INT 47
43746: PUSH
43747: EMPTY
43748: LIST
43749: IN
43750: IFFALSE 43771
// points := [ 67 , 45 , 75 ] ;
43752: LD_ADDR_VAR 0 9
43756: PUSH
43757: LD_INT 67
43759: PUSH
43760: LD_INT 45
43762: PUSH
43763: LD_INT 75
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: LIST
43770: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43771: LD_VAR 0 6
43775: PPUSH
43776: CALL_OW 264
43780: PUSH
43781: LD_INT 26
43783: PUSH
43784: EMPTY
43785: LIST
43786: IN
43787: IFFALSE 43808
// points := [ 120 , 30 , 80 ] ;
43789: LD_ADDR_VAR 0 9
43793: PUSH
43794: LD_INT 120
43796: PUSH
43797: LD_INT 30
43799: PUSH
43800: LD_INT 80
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: LIST
43807: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43808: LD_VAR 0 6
43812: PPUSH
43813: CALL_OW 264
43817: PUSH
43818: LD_INT 22
43820: PUSH
43821: EMPTY
43822: LIST
43823: IN
43824: IFFALSE 43845
// points := [ 40 , 1 , 1 ] ;
43826: LD_ADDR_VAR 0 9
43830: PUSH
43831: LD_INT 40
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: LD_INT 1
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: LIST
43844: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43845: LD_VAR 0 6
43849: PPUSH
43850: CALL_OW 264
43854: PUSH
43855: LD_INT 29
43857: PUSH
43858: EMPTY
43859: LIST
43860: IN
43861: IFFALSE 43882
// points := [ 70 , 200 , 400 ] ;
43863: LD_ADDR_VAR 0 9
43867: PUSH
43868: LD_INT 70
43870: PUSH
43871: LD_INT 200
43873: PUSH
43874: LD_INT 400
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: LIST
43881: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43882: LD_VAR 0 6
43886: PPUSH
43887: CALL_OW 264
43891: PUSH
43892: LD_INT 14
43894: PUSH
43895: LD_INT 53
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: IN
43902: IFFALSE 43923
// points := [ 40 , 10 , 20 ] ;
43904: LD_ADDR_VAR 0 9
43908: PUSH
43909: LD_INT 40
43911: PUSH
43912: LD_INT 10
43914: PUSH
43915: LD_INT 20
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: LIST
43922: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43923: LD_VAR 0 6
43927: PPUSH
43928: CALL_OW 264
43932: PUSH
43933: LD_INT 9
43935: PUSH
43936: EMPTY
43937: LIST
43938: IN
43939: IFFALSE 43960
// points := [ 5 , 70 , 20 ] ;
43941: LD_ADDR_VAR 0 9
43945: PUSH
43946: LD_INT 5
43948: PUSH
43949: LD_INT 70
43951: PUSH
43952: LD_INT 20
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: LIST
43959: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43960: LD_VAR 0 6
43964: PPUSH
43965: CALL_OW 264
43969: PUSH
43970: LD_INT 10
43972: PUSH
43973: EMPTY
43974: LIST
43975: IN
43976: IFFALSE 43997
// points := [ 35 , 110 , 70 ] ;
43978: LD_ADDR_VAR 0 9
43982: PUSH
43983: LD_INT 35
43985: PUSH
43986: LD_INT 110
43988: PUSH
43989: LD_INT 70
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: LIST
43996: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43997: LD_VAR 0 6
44001: PPUSH
44002: CALL_OW 265
44006: PUSH
44007: LD_INT 25
44009: EQUAL
44010: IFFALSE 44031
// points := [ 80 , 65 , 100 ] ;
44012: LD_ADDR_VAR 0 9
44016: PUSH
44017: LD_INT 80
44019: PUSH
44020: LD_INT 65
44022: PUSH
44023: LD_INT 100
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: LIST
44030: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44031: LD_VAR 0 6
44035: PPUSH
44036: CALL_OW 263
44040: PUSH
44041: LD_INT 1
44043: EQUAL
44044: IFFALSE 44079
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44046: LD_ADDR_VAR 0 10
44050: PUSH
44051: LD_VAR 0 10
44055: PUSH
44056: LD_VAR 0 6
44060: PPUSH
44061: CALL_OW 311
44065: PPUSH
44066: LD_INT 3
44068: PPUSH
44069: CALL_OW 259
44073: PUSH
44074: LD_INT 4
44076: MUL
44077: MUL
44078: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44079: LD_VAR 0 6
44083: PPUSH
44084: CALL_OW 263
44088: PUSH
44089: LD_INT 2
44091: EQUAL
44092: IFFALSE 44143
// begin j := IsControledBy ( i ) ;
44094: LD_ADDR_VAR 0 7
44098: PUSH
44099: LD_VAR 0 6
44103: PPUSH
44104: CALL_OW 312
44108: ST_TO_ADDR
// if j then
44109: LD_VAR 0 7
44113: IFFALSE 44143
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44115: LD_ADDR_VAR 0 10
44119: PUSH
44120: LD_VAR 0 10
44124: PUSH
44125: LD_VAR 0 7
44129: PPUSH
44130: LD_INT 3
44132: PPUSH
44133: CALL_OW 259
44137: PUSH
44138: LD_INT 3
44140: MUL
44141: MUL
44142: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44143: LD_VAR 0 6
44147: PPUSH
44148: CALL_OW 264
44152: PUSH
44153: LD_INT 5
44155: PUSH
44156: LD_INT 6
44158: PUSH
44159: LD_INT 46
44161: PUSH
44162: LD_INT 44
44164: PUSH
44165: LD_INT 47
44167: PUSH
44168: LD_INT 45
44170: PUSH
44171: LD_INT 28
44173: PUSH
44174: LD_INT 7
44176: PUSH
44177: LD_INT 27
44179: PUSH
44180: LD_INT 29
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: IN
44195: PUSH
44196: LD_VAR 0 1
44200: PPUSH
44201: LD_INT 52
44203: PPUSH
44204: CALL_OW 321
44208: PUSH
44209: LD_INT 2
44211: EQUAL
44212: AND
44213: IFFALSE 44230
// bpoints := bpoints * 1.2 ;
44215: LD_ADDR_VAR 0 10
44219: PUSH
44220: LD_VAR 0 10
44224: PUSH
44225: LD_REAL  1.20000000000000E+0000
44228: MUL
44229: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44230: LD_VAR 0 6
44234: PPUSH
44235: CALL_OW 264
44239: PUSH
44240: LD_INT 6
44242: PUSH
44243: LD_INT 46
44245: PUSH
44246: LD_INT 47
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: LIST
44253: IN
44254: IFFALSE 44271
// bpoints := bpoints * 1.2 ;
44256: LD_ADDR_VAR 0 10
44260: PUSH
44261: LD_VAR 0 10
44265: PUSH
44266: LD_REAL  1.20000000000000E+0000
44269: MUL
44270: ST_TO_ADDR
// end ; unit_building :
44271: GO 44285
44273: LD_INT 3
44275: DOUBLE
44276: EQUAL
44277: IFTRUE 44281
44279: GO 44284
44281: POP
// ; end ;
44282: GO 44285
44284: POP
// for j = 1 to 3 do
44285: LD_ADDR_VAR 0 7
44289: PUSH
44290: DOUBLE
44291: LD_INT 1
44293: DEC
44294: ST_TO_ADDR
44295: LD_INT 3
44297: PUSH
44298: FOR_TO
44299: IFFALSE 44352
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44301: LD_ADDR_VAR 0 5
44305: PUSH
44306: LD_VAR 0 5
44310: PPUSH
44311: LD_VAR 0 7
44315: PPUSH
44316: LD_VAR 0 5
44320: PUSH
44321: LD_VAR 0 7
44325: ARRAY
44326: PUSH
44327: LD_VAR 0 9
44331: PUSH
44332: LD_VAR 0 7
44336: ARRAY
44337: PUSH
44338: LD_VAR 0 10
44342: MUL
44343: PLUS
44344: PPUSH
44345: CALL_OW 1
44349: ST_TO_ADDR
44350: GO 44298
44352: POP
44353: POP
// end ;
44354: GO 42833
44356: POP
44357: POP
// result := Replace ( result , 4 , tmp ) ;
44358: LD_ADDR_VAR 0 5
44362: PUSH
44363: LD_VAR 0 5
44367: PPUSH
44368: LD_INT 4
44370: PPUSH
44371: LD_VAR 0 8
44375: PPUSH
44376: CALL_OW 1
44380: ST_TO_ADDR
// end ;
44381: LD_VAR 0 5
44385: RET
// export function DangerAtRange ( unit , range ) ; begin
44386: LD_INT 0
44388: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44389: LD_ADDR_VAR 0 3
44393: PUSH
44394: LD_VAR 0 1
44398: PPUSH
44399: CALL_OW 255
44403: PPUSH
44404: LD_VAR 0 1
44408: PPUSH
44409: CALL_OW 250
44413: PPUSH
44414: LD_VAR 0 1
44418: PPUSH
44419: CALL_OW 251
44423: PPUSH
44424: LD_VAR 0 2
44428: PPUSH
44429: CALL 42685 0 4
44433: ST_TO_ADDR
// end ;
44434: LD_VAR 0 3
44438: RET
// export function DangerInArea ( side , area ) ; begin
44439: LD_INT 0
44441: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44442: LD_ADDR_VAR 0 3
44446: PUSH
44447: LD_VAR 0 2
44451: PPUSH
44452: LD_INT 81
44454: PUSH
44455: LD_VAR 0 1
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PPUSH
44464: CALL_OW 70
44468: ST_TO_ADDR
// end ;
44469: LD_VAR 0 3
44473: RET
// export function IsExtension ( b ) ; begin
44474: LD_INT 0
44476: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44477: LD_ADDR_VAR 0 2
44481: PUSH
44482: LD_VAR 0 1
44486: PUSH
44487: LD_INT 23
44489: PUSH
44490: LD_INT 20
44492: PUSH
44493: LD_INT 22
44495: PUSH
44496: LD_INT 17
44498: PUSH
44499: LD_INT 24
44501: PUSH
44502: LD_INT 21
44504: PUSH
44505: LD_INT 19
44507: PUSH
44508: LD_INT 16
44510: PUSH
44511: LD_INT 25
44513: PUSH
44514: LD_INT 18
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: IN
44529: ST_TO_ADDR
// end ;
44530: LD_VAR 0 2
44534: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44535: LD_INT 0
44537: PPUSH
44538: PPUSH
44539: PPUSH
// result := [ ] ;
44540: LD_ADDR_VAR 0 4
44544: PUSH
44545: EMPTY
44546: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44547: LD_ADDR_VAR 0 5
44551: PUSH
44552: LD_VAR 0 2
44556: PPUSH
44557: LD_INT 21
44559: PUSH
44560: LD_INT 3
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PPUSH
44567: CALL_OW 70
44571: ST_TO_ADDR
// if not tmp then
44572: LD_VAR 0 5
44576: NOT
44577: IFFALSE 44581
// exit ;
44579: GO 44645
// if checkLink then
44581: LD_VAR 0 3
44585: IFFALSE 44635
// begin for i in tmp do
44587: LD_ADDR_VAR 0 6
44591: PUSH
44592: LD_VAR 0 5
44596: PUSH
44597: FOR_IN
44598: IFFALSE 44633
// if GetBase ( i ) <> base then
44600: LD_VAR 0 6
44604: PPUSH
44605: CALL_OW 274
44609: PUSH
44610: LD_VAR 0 1
44614: NONEQUAL
44615: IFFALSE 44631
// ComLinkToBase ( base , i ) ;
44617: LD_VAR 0 1
44621: PPUSH
44622: LD_VAR 0 6
44626: PPUSH
44627: CALL_OW 169
44631: GO 44597
44633: POP
44634: POP
// end ; result := tmp ;
44635: LD_ADDR_VAR 0 4
44639: PUSH
44640: LD_VAR 0 5
44644: ST_TO_ADDR
// end ;
44645: LD_VAR 0 4
44649: RET
// export function ComComplete ( units , b ) ; var i ; begin
44650: LD_INT 0
44652: PPUSH
44653: PPUSH
// if not units then
44654: LD_VAR 0 1
44658: NOT
44659: IFFALSE 44663
// exit ;
44661: GO 44753
// for i in units do
44663: LD_ADDR_VAR 0 4
44667: PUSH
44668: LD_VAR 0 1
44672: PUSH
44673: FOR_IN
44674: IFFALSE 44751
// if BuildingStatus ( b ) = bs_build then
44676: LD_VAR 0 2
44680: PPUSH
44681: CALL_OW 461
44685: PUSH
44686: LD_INT 1
44688: EQUAL
44689: IFFALSE 44749
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44691: LD_VAR 0 4
44695: PPUSH
44696: LD_STRING h
44698: PUSH
44699: LD_VAR 0 2
44703: PPUSH
44704: CALL_OW 250
44708: PUSH
44709: LD_VAR 0 2
44713: PPUSH
44714: CALL_OW 251
44718: PUSH
44719: LD_VAR 0 2
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: LD_INT 0
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: PUSH
44742: EMPTY
44743: LIST
44744: PPUSH
44745: CALL_OW 446
44749: GO 44673
44751: POP
44752: POP
// end ;
44753: LD_VAR 0 3
44757: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44758: LD_INT 0
44760: PPUSH
44761: PPUSH
44762: PPUSH
44763: PPUSH
44764: PPUSH
44765: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44766: LD_VAR 0 1
44770: NOT
44771: PUSH
44772: LD_VAR 0 1
44776: PPUSH
44777: CALL_OW 263
44781: PUSH
44782: LD_INT 2
44784: NONEQUAL
44785: OR
44786: IFFALSE 44790
// exit ;
44788: GO 45106
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44790: LD_ADDR_VAR 0 6
44794: PUSH
44795: LD_INT 22
44797: PUSH
44798: LD_VAR 0 1
44802: PPUSH
44803: CALL_OW 255
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 2
44814: PUSH
44815: LD_INT 30
44817: PUSH
44818: LD_INT 36
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 34
44827: PUSH
44828: LD_INT 31
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: LIST
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PPUSH
44844: CALL_OW 69
44848: ST_TO_ADDR
// if not tmp then
44849: LD_VAR 0 6
44853: NOT
44854: IFFALSE 44858
// exit ;
44856: GO 45106
// result := [ ] ;
44858: LD_ADDR_VAR 0 2
44862: PUSH
44863: EMPTY
44864: ST_TO_ADDR
// for i in tmp do
44865: LD_ADDR_VAR 0 3
44869: PUSH
44870: LD_VAR 0 6
44874: PUSH
44875: FOR_IN
44876: IFFALSE 44947
// begin t := UnitsInside ( i ) ;
44878: LD_ADDR_VAR 0 4
44882: PUSH
44883: LD_VAR 0 3
44887: PPUSH
44888: CALL_OW 313
44892: ST_TO_ADDR
// if t then
44893: LD_VAR 0 4
44897: IFFALSE 44945
// for j in t do
44899: LD_ADDR_VAR 0 7
44903: PUSH
44904: LD_VAR 0 4
44908: PUSH
44909: FOR_IN
44910: IFFALSE 44943
// result := Replace ( result , result + 1 , j ) ;
44912: LD_ADDR_VAR 0 2
44916: PUSH
44917: LD_VAR 0 2
44921: PPUSH
44922: LD_VAR 0 2
44926: PUSH
44927: LD_INT 1
44929: PLUS
44930: PPUSH
44931: LD_VAR 0 7
44935: PPUSH
44936: CALL_OW 1
44940: ST_TO_ADDR
44941: GO 44909
44943: POP
44944: POP
// end ;
44945: GO 44875
44947: POP
44948: POP
// if not result then
44949: LD_VAR 0 2
44953: NOT
44954: IFFALSE 44958
// exit ;
44956: GO 45106
// mech := result [ 1 ] ;
44958: LD_ADDR_VAR 0 5
44962: PUSH
44963: LD_VAR 0 2
44967: PUSH
44968: LD_INT 1
44970: ARRAY
44971: ST_TO_ADDR
// if result > 1 then
44972: LD_VAR 0 2
44976: PUSH
44977: LD_INT 1
44979: GREATER
44980: IFFALSE 45092
// begin for i = 2 to result do
44982: LD_ADDR_VAR 0 3
44986: PUSH
44987: DOUBLE
44988: LD_INT 2
44990: DEC
44991: ST_TO_ADDR
44992: LD_VAR 0 2
44996: PUSH
44997: FOR_TO
44998: IFFALSE 45090
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45000: LD_ADDR_VAR 0 4
45004: PUSH
45005: LD_VAR 0 2
45009: PUSH
45010: LD_VAR 0 3
45014: ARRAY
45015: PPUSH
45016: LD_INT 3
45018: PPUSH
45019: CALL_OW 259
45023: PUSH
45024: LD_VAR 0 2
45028: PUSH
45029: LD_VAR 0 3
45033: ARRAY
45034: PPUSH
45035: CALL_OW 432
45039: MINUS
45040: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45041: LD_VAR 0 4
45045: PUSH
45046: LD_VAR 0 5
45050: PPUSH
45051: LD_INT 3
45053: PPUSH
45054: CALL_OW 259
45058: PUSH
45059: LD_VAR 0 5
45063: PPUSH
45064: CALL_OW 432
45068: MINUS
45069: GREATEREQUAL
45070: IFFALSE 45088
// mech := result [ i ] ;
45072: LD_ADDR_VAR 0 5
45076: PUSH
45077: LD_VAR 0 2
45081: PUSH
45082: LD_VAR 0 3
45086: ARRAY
45087: ST_TO_ADDR
// end ;
45088: GO 44997
45090: POP
45091: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45092: LD_VAR 0 1
45096: PPUSH
45097: LD_VAR 0 5
45101: PPUSH
45102: CALL_OW 135
// end ;
45106: LD_VAR 0 2
45110: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45111: LD_INT 0
45113: PPUSH
45114: PPUSH
45115: PPUSH
45116: PPUSH
45117: PPUSH
45118: PPUSH
45119: PPUSH
45120: PPUSH
45121: PPUSH
45122: PPUSH
45123: PPUSH
45124: PPUSH
45125: PPUSH
// result := [ ] ;
45126: LD_ADDR_VAR 0 7
45130: PUSH
45131: EMPTY
45132: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45133: LD_VAR 0 1
45137: PPUSH
45138: CALL_OW 266
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: LD_INT 1
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: IN
45153: NOT
45154: IFFALSE 45158
// exit ;
45156: GO 46792
// if name then
45158: LD_VAR 0 3
45162: IFFALSE 45178
// SetBName ( base_dep , name ) ;
45164: LD_VAR 0 1
45168: PPUSH
45169: LD_VAR 0 3
45173: PPUSH
45174: CALL_OW 500
// base := GetBase ( base_dep ) ;
45178: LD_ADDR_VAR 0 15
45182: PUSH
45183: LD_VAR 0 1
45187: PPUSH
45188: CALL_OW 274
45192: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45193: LD_ADDR_VAR 0 16
45197: PUSH
45198: LD_VAR 0 1
45202: PPUSH
45203: CALL_OW 255
45207: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45208: LD_ADDR_VAR 0 17
45212: PUSH
45213: LD_VAR 0 1
45217: PPUSH
45218: CALL_OW 248
45222: ST_TO_ADDR
// if sources then
45223: LD_VAR 0 5
45227: IFFALSE 45274
// for i = 1 to 3 do
45229: LD_ADDR_VAR 0 8
45233: PUSH
45234: DOUBLE
45235: LD_INT 1
45237: DEC
45238: ST_TO_ADDR
45239: LD_INT 3
45241: PUSH
45242: FOR_TO
45243: IFFALSE 45272
// AddResourceType ( base , i , sources [ i ] ) ;
45245: LD_VAR 0 15
45249: PPUSH
45250: LD_VAR 0 8
45254: PPUSH
45255: LD_VAR 0 5
45259: PUSH
45260: LD_VAR 0 8
45264: ARRAY
45265: PPUSH
45266: CALL_OW 276
45270: GO 45242
45272: POP
45273: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45274: LD_ADDR_VAR 0 18
45278: PUSH
45279: LD_VAR 0 15
45283: PPUSH
45284: LD_VAR 0 2
45288: PPUSH
45289: LD_INT 1
45291: PPUSH
45292: CALL 44535 0 3
45296: ST_TO_ADDR
// InitHc ;
45297: CALL_OW 19
// InitUc ;
45301: CALL_OW 18
// uc_side := side ;
45305: LD_ADDR_OWVAR 20
45309: PUSH
45310: LD_VAR 0 16
45314: ST_TO_ADDR
// uc_nation := nation ;
45315: LD_ADDR_OWVAR 21
45319: PUSH
45320: LD_VAR 0 17
45324: ST_TO_ADDR
// if buildings then
45325: LD_VAR 0 18
45329: IFFALSE 46651
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45331: LD_ADDR_VAR 0 19
45335: PUSH
45336: LD_VAR 0 18
45340: PPUSH
45341: LD_INT 2
45343: PUSH
45344: LD_INT 30
45346: PUSH
45347: LD_INT 29
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 30
45356: PUSH
45357: LD_INT 30
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: LIST
45368: PPUSH
45369: CALL_OW 72
45373: ST_TO_ADDR
// if tmp then
45374: LD_VAR 0 19
45378: IFFALSE 45426
// for i in tmp do
45380: LD_ADDR_VAR 0 8
45384: PUSH
45385: LD_VAR 0 19
45389: PUSH
45390: FOR_IN
45391: IFFALSE 45424
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45393: LD_VAR 0 8
45397: PPUSH
45398: CALL_OW 250
45402: PPUSH
45403: LD_VAR 0 8
45407: PPUSH
45408: CALL_OW 251
45412: PPUSH
45413: LD_VAR 0 16
45417: PPUSH
45418: CALL_OW 441
45422: GO 45390
45424: POP
45425: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45426: LD_VAR 0 18
45430: PPUSH
45431: LD_INT 2
45433: PUSH
45434: LD_INT 30
45436: PUSH
45437: LD_INT 32
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 30
45446: PUSH
45447: LD_INT 33
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: LIST
45458: PPUSH
45459: CALL_OW 72
45463: IFFALSE 45551
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45465: LD_ADDR_VAR 0 8
45469: PUSH
45470: LD_VAR 0 18
45474: PPUSH
45475: LD_INT 2
45477: PUSH
45478: LD_INT 30
45480: PUSH
45481: LD_INT 32
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 30
45490: PUSH
45491: LD_INT 33
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: LIST
45502: PPUSH
45503: CALL_OW 72
45507: PUSH
45508: FOR_IN
45509: IFFALSE 45549
// begin if not GetBWeapon ( i ) then
45511: LD_VAR 0 8
45515: PPUSH
45516: CALL_OW 269
45520: NOT
45521: IFFALSE 45547
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45523: LD_VAR 0 8
45527: PPUSH
45528: LD_VAR 0 8
45532: PPUSH
45533: LD_VAR 0 2
45537: PPUSH
45538: CALL 46797 0 2
45542: PPUSH
45543: CALL_OW 431
// end ;
45547: GO 45508
45549: POP
45550: POP
// end ; for i = 1 to personel do
45551: LD_ADDR_VAR 0 8
45555: PUSH
45556: DOUBLE
45557: LD_INT 1
45559: DEC
45560: ST_TO_ADDR
45561: LD_VAR 0 6
45565: PUSH
45566: FOR_TO
45567: IFFALSE 46631
// begin if i > 4 then
45569: LD_VAR 0 8
45573: PUSH
45574: LD_INT 4
45576: GREATER
45577: IFFALSE 45581
// break ;
45579: GO 46631
// case i of 1 :
45581: LD_VAR 0 8
45585: PUSH
45586: LD_INT 1
45588: DOUBLE
45589: EQUAL
45590: IFTRUE 45594
45592: GO 45674
45594: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45595: LD_ADDR_VAR 0 12
45599: PUSH
45600: LD_VAR 0 18
45604: PPUSH
45605: LD_INT 22
45607: PUSH
45608: LD_VAR 0 16
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 58
45619: PUSH
45620: EMPTY
45621: LIST
45622: PUSH
45623: LD_INT 2
45625: PUSH
45626: LD_INT 30
45628: PUSH
45629: LD_INT 32
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 30
45638: PUSH
45639: LD_INT 4
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 30
45648: PUSH
45649: LD_INT 5
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: LIST
45666: PPUSH
45667: CALL_OW 72
45671: ST_TO_ADDR
45672: GO 45896
45674: LD_INT 2
45676: DOUBLE
45677: EQUAL
45678: IFTRUE 45682
45680: GO 45744
45682: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45683: LD_ADDR_VAR 0 12
45687: PUSH
45688: LD_VAR 0 18
45692: PPUSH
45693: LD_INT 22
45695: PUSH
45696: LD_VAR 0 16
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 2
45707: PUSH
45708: LD_INT 30
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 30
45720: PUSH
45721: LD_INT 1
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: LIST
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PPUSH
45737: CALL_OW 72
45741: ST_TO_ADDR
45742: GO 45896
45744: LD_INT 3
45746: DOUBLE
45747: EQUAL
45748: IFTRUE 45752
45750: GO 45814
45752: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45753: LD_ADDR_VAR 0 12
45757: PUSH
45758: LD_VAR 0 18
45762: PPUSH
45763: LD_INT 22
45765: PUSH
45766: LD_VAR 0 16
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 2
45777: PUSH
45778: LD_INT 30
45780: PUSH
45781: LD_INT 2
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 30
45790: PUSH
45791: LD_INT 3
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: LIST
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PPUSH
45807: CALL_OW 72
45811: ST_TO_ADDR
45812: GO 45896
45814: LD_INT 4
45816: DOUBLE
45817: EQUAL
45818: IFTRUE 45822
45820: GO 45895
45822: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45823: LD_ADDR_VAR 0 12
45827: PUSH
45828: LD_VAR 0 18
45832: PPUSH
45833: LD_INT 22
45835: PUSH
45836: LD_VAR 0 16
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 2
45847: PUSH
45848: LD_INT 30
45850: PUSH
45851: LD_INT 6
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 30
45860: PUSH
45861: LD_INT 7
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 30
45870: PUSH
45871: LD_INT 8
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PPUSH
45888: CALL_OW 72
45892: ST_TO_ADDR
45893: GO 45896
45895: POP
// if i = 1 then
45896: LD_VAR 0 8
45900: PUSH
45901: LD_INT 1
45903: EQUAL
45904: IFFALSE 46015
// begin tmp := [ ] ;
45906: LD_ADDR_VAR 0 19
45910: PUSH
45911: EMPTY
45912: ST_TO_ADDR
// for j in f do
45913: LD_ADDR_VAR 0 9
45917: PUSH
45918: LD_VAR 0 12
45922: PUSH
45923: FOR_IN
45924: IFFALSE 45997
// if GetBType ( j ) = b_bunker then
45926: LD_VAR 0 9
45930: PPUSH
45931: CALL_OW 266
45935: PUSH
45936: LD_INT 32
45938: EQUAL
45939: IFFALSE 45966
// tmp := Insert ( tmp , 1 , j ) else
45941: LD_ADDR_VAR 0 19
45945: PUSH
45946: LD_VAR 0 19
45950: PPUSH
45951: LD_INT 1
45953: PPUSH
45954: LD_VAR 0 9
45958: PPUSH
45959: CALL_OW 2
45963: ST_TO_ADDR
45964: GO 45995
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45966: LD_ADDR_VAR 0 19
45970: PUSH
45971: LD_VAR 0 19
45975: PPUSH
45976: LD_VAR 0 19
45980: PUSH
45981: LD_INT 1
45983: PLUS
45984: PPUSH
45985: LD_VAR 0 9
45989: PPUSH
45990: CALL_OW 2
45994: ST_TO_ADDR
45995: GO 45923
45997: POP
45998: POP
// if tmp then
45999: LD_VAR 0 19
46003: IFFALSE 46015
// f := tmp ;
46005: LD_ADDR_VAR 0 12
46009: PUSH
46010: LD_VAR 0 19
46014: ST_TO_ADDR
// end ; x := personel [ i ] ;
46015: LD_ADDR_VAR 0 13
46019: PUSH
46020: LD_VAR 0 6
46024: PUSH
46025: LD_VAR 0 8
46029: ARRAY
46030: ST_TO_ADDR
// if x = - 1 then
46031: LD_VAR 0 13
46035: PUSH
46036: LD_INT 1
46038: NEG
46039: EQUAL
46040: IFFALSE 46249
// begin for j in f do
46042: LD_ADDR_VAR 0 9
46046: PUSH
46047: LD_VAR 0 12
46051: PUSH
46052: FOR_IN
46053: IFFALSE 46245
// repeat InitHc ;
46055: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46059: LD_VAR 0 9
46063: PPUSH
46064: CALL_OW 266
46068: PUSH
46069: LD_INT 5
46071: EQUAL
46072: IFFALSE 46142
// begin if UnitsInside ( j ) < 3 then
46074: LD_VAR 0 9
46078: PPUSH
46079: CALL_OW 313
46083: PUSH
46084: LD_INT 3
46086: LESS
46087: IFFALSE 46123
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46089: LD_INT 0
46091: PPUSH
46092: LD_INT 5
46094: PUSH
46095: LD_INT 8
46097: PUSH
46098: LD_INT 9
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: LIST
46105: PUSH
46106: LD_VAR 0 17
46110: ARRAY
46111: PPUSH
46112: LD_VAR 0 4
46116: PPUSH
46117: CALL_OW 380
46121: GO 46140
// PrepareHuman ( false , i , skill ) ;
46123: LD_INT 0
46125: PPUSH
46126: LD_VAR 0 8
46130: PPUSH
46131: LD_VAR 0 4
46135: PPUSH
46136: CALL_OW 380
// end else
46140: GO 46159
// PrepareHuman ( false , i , skill ) ;
46142: LD_INT 0
46144: PPUSH
46145: LD_VAR 0 8
46149: PPUSH
46150: LD_VAR 0 4
46154: PPUSH
46155: CALL_OW 380
// un := CreateHuman ;
46159: LD_ADDR_VAR 0 14
46163: PUSH
46164: CALL_OW 44
46168: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46169: LD_ADDR_VAR 0 7
46173: PUSH
46174: LD_VAR 0 7
46178: PPUSH
46179: LD_INT 1
46181: PPUSH
46182: LD_VAR 0 14
46186: PPUSH
46187: CALL_OW 2
46191: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46192: LD_VAR 0 14
46196: PPUSH
46197: LD_VAR 0 9
46201: PPUSH
46202: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46206: LD_VAR 0 9
46210: PPUSH
46211: CALL_OW 313
46215: PUSH
46216: LD_INT 6
46218: EQUAL
46219: PUSH
46220: LD_VAR 0 9
46224: PPUSH
46225: CALL_OW 266
46229: PUSH
46230: LD_INT 32
46232: PUSH
46233: LD_INT 31
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: IN
46240: OR
46241: IFFALSE 46055
46243: GO 46052
46245: POP
46246: POP
// end else
46247: GO 46629
// for j = 1 to x do
46249: LD_ADDR_VAR 0 9
46253: PUSH
46254: DOUBLE
46255: LD_INT 1
46257: DEC
46258: ST_TO_ADDR
46259: LD_VAR 0 13
46263: PUSH
46264: FOR_TO
46265: IFFALSE 46627
// begin InitHc ;
46267: CALL_OW 19
// if not f then
46271: LD_VAR 0 12
46275: NOT
46276: IFFALSE 46365
// begin PrepareHuman ( false , i , skill ) ;
46278: LD_INT 0
46280: PPUSH
46281: LD_VAR 0 8
46285: PPUSH
46286: LD_VAR 0 4
46290: PPUSH
46291: CALL_OW 380
// un := CreateHuman ;
46295: LD_ADDR_VAR 0 14
46299: PUSH
46300: CALL_OW 44
46304: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46305: LD_ADDR_VAR 0 7
46309: PUSH
46310: LD_VAR 0 7
46314: PPUSH
46315: LD_INT 1
46317: PPUSH
46318: LD_VAR 0 14
46322: PPUSH
46323: CALL_OW 2
46327: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46328: LD_VAR 0 14
46332: PPUSH
46333: LD_VAR 0 1
46337: PPUSH
46338: CALL_OW 250
46342: PPUSH
46343: LD_VAR 0 1
46347: PPUSH
46348: CALL_OW 251
46352: PPUSH
46353: LD_INT 10
46355: PPUSH
46356: LD_INT 0
46358: PPUSH
46359: CALL_OW 50
// continue ;
46363: GO 46264
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46365: LD_VAR 0 12
46369: PUSH
46370: LD_INT 1
46372: ARRAY
46373: PPUSH
46374: CALL_OW 313
46378: PUSH
46379: LD_VAR 0 12
46383: PUSH
46384: LD_INT 1
46386: ARRAY
46387: PPUSH
46388: CALL_OW 266
46392: PUSH
46393: LD_INT 32
46395: PUSH
46396: LD_INT 31
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: IN
46403: AND
46404: PUSH
46405: LD_VAR 0 12
46409: PUSH
46410: LD_INT 1
46412: ARRAY
46413: PPUSH
46414: CALL_OW 313
46418: PUSH
46419: LD_INT 6
46421: EQUAL
46422: OR
46423: IFFALSE 46443
// f := Delete ( f , 1 ) ;
46425: LD_ADDR_VAR 0 12
46429: PUSH
46430: LD_VAR 0 12
46434: PPUSH
46435: LD_INT 1
46437: PPUSH
46438: CALL_OW 3
46442: ST_TO_ADDR
// if not f then
46443: LD_VAR 0 12
46447: NOT
46448: IFFALSE 46466
// begin x := x + 2 ;
46450: LD_ADDR_VAR 0 13
46454: PUSH
46455: LD_VAR 0 13
46459: PUSH
46460: LD_INT 2
46462: PLUS
46463: ST_TO_ADDR
// continue ;
46464: GO 46264
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46466: LD_VAR 0 12
46470: PUSH
46471: LD_INT 1
46473: ARRAY
46474: PPUSH
46475: CALL_OW 266
46479: PUSH
46480: LD_INT 5
46482: EQUAL
46483: IFFALSE 46557
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46485: LD_VAR 0 12
46489: PUSH
46490: LD_INT 1
46492: ARRAY
46493: PPUSH
46494: CALL_OW 313
46498: PUSH
46499: LD_INT 3
46501: LESS
46502: IFFALSE 46538
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46504: LD_INT 0
46506: PPUSH
46507: LD_INT 5
46509: PUSH
46510: LD_INT 8
46512: PUSH
46513: LD_INT 9
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: LIST
46520: PUSH
46521: LD_VAR 0 17
46525: ARRAY
46526: PPUSH
46527: LD_VAR 0 4
46531: PPUSH
46532: CALL_OW 380
46536: GO 46555
// PrepareHuman ( false , i , skill ) ;
46538: LD_INT 0
46540: PPUSH
46541: LD_VAR 0 8
46545: PPUSH
46546: LD_VAR 0 4
46550: PPUSH
46551: CALL_OW 380
// end else
46555: GO 46574
// PrepareHuman ( false , i , skill ) ;
46557: LD_INT 0
46559: PPUSH
46560: LD_VAR 0 8
46564: PPUSH
46565: LD_VAR 0 4
46569: PPUSH
46570: CALL_OW 380
// un := CreateHuman ;
46574: LD_ADDR_VAR 0 14
46578: PUSH
46579: CALL_OW 44
46583: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46584: LD_ADDR_VAR 0 7
46588: PUSH
46589: LD_VAR 0 7
46593: PPUSH
46594: LD_INT 1
46596: PPUSH
46597: LD_VAR 0 14
46601: PPUSH
46602: CALL_OW 2
46606: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46607: LD_VAR 0 14
46611: PPUSH
46612: LD_VAR 0 12
46616: PUSH
46617: LD_INT 1
46619: ARRAY
46620: PPUSH
46621: CALL_OW 52
// end ;
46625: GO 46264
46627: POP
46628: POP
// end ;
46629: GO 45566
46631: POP
46632: POP
// result := result ^ buildings ;
46633: LD_ADDR_VAR 0 7
46637: PUSH
46638: LD_VAR 0 7
46642: PUSH
46643: LD_VAR 0 18
46647: ADD
46648: ST_TO_ADDR
// end else
46649: GO 46792
// begin for i = 1 to personel do
46651: LD_ADDR_VAR 0 8
46655: PUSH
46656: DOUBLE
46657: LD_INT 1
46659: DEC
46660: ST_TO_ADDR
46661: LD_VAR 0 6
46665: PUSH
46666: FOR_TO
46667: IFFALSE 46790
// begin if i > 4 then
46669: LD_VAR 0 8
46673: PUSH
46674: LD_INT 4
46676: GREATER
46677: IFFALSE 46681
// break ;
46679: GO 46790
// x := personel [ i ] ;
46681: LD_ADDR_VAR 0 13
46685: PUSH
46686: LD_VAR 0 6
46690: PUSH
46691: LD_VAR 0 8
46695: ARRAY
46696: ST_TO_ADDR
// if x = - 1 then
46697: LD_VAR 0 13
46701: PUSH
46702: LD_INT 1
46704: NEG
46705: EQUAL
46706: IFFALSE 46710
// continue ;
46708: GO 46666
// PrepareHuman ( false , i , skill ) ;
46710: LD_INT 0
46712: PPUSH
46713: LD_VAR 0 8
46717: PPUSH
46718: LD_VAR 0 4
46722: PPUSH
46723: CALL_OW 380
// un := CreateHuman ;
46727: LD_ADDR_VAR 0 14
46731: PUSH
46732: CALL_OW 44
46736: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46737: LD_VAR 0 14
46741: PPUSH
46742: LD_VAR 0 1
46746: PPUSH
46747: CALL_OW 250
46751: PPUSH
46752: LD_VAR 0 1
46756: PPUSH
46757: CALL_OW 251
46761: PPUSH
46762: LD_INT 10
46764: PPUSH
46765: LD_INT 0
46767: PPUSH
46768: CALL_OW 50
// result := result ^ un ;
46772: LD_ADDR_VAR 0 7
46776: PUSH
46777: LD_VAR 0 7
46781: PUSH
46782: LD_VAR 0 14
46786: ADD
46787: ST_TO_ADDR
// end ;
46788: GO 46666
46790: POP
46791: POP
// end ; end ;
46792: LD_VAR 0 7
46796: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46797: LD_INT 0
46799: PPUSH
46800: PPUSH
46801: PPUSH
46802: PPUSH
46803: PPUSH
46804: PPUSH
46805: PPUSH
46806: PPUSH
46807: PPUSH
46808: PPUSH
46809: PPUSH
46810: PPUSH
46811: PPUSH
46812: PPUSH
46813: PPUSH
46814: PPUSH
// result := false ;
46815: LD_ADDR_VAR 0 3
46819: PUSH
46820: LD_INT 0
46822: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46823: LD_VAR 0 1
46827: NOT
46828: PUSH
46829: LD_VAR 0 1
46833: PPUSH
46834: CALL_OW 266
46838: PUSH
46839: LD_INT 32
46841: PUSH
46842: LD_INT 33
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: IN
46849: NOT
46850: OR
46851: IFFALSE 46855
// exit ;
46853: GO 47964
// nat := GetNation ( tower ) ;
46855: LD_ADDR_VAR 0 12
46859: PUSH
46860: LD_VAR 0 1
46864: PPUSH
46865: CALL_OW 248
46869: ST_TO_ADDR
// side := GetSide ( tower ) ;
46870: LD_ADDR_VAR 0 16
46874: PUSH
46875: LD_VAR 0 1
46879: PPUSH
46880: CALL_OW 255
46884: ST_TO_ADDR
// x := GetX ( tower ) ;
46885: LD_ADDR_VAR 0 10
46889: PUSH
46890: LD_VAR 0 1
46894: PPUSH
46895: CALL_OW 250
46899: ST_TO_ADDR
// y := GetY ( tower ) ;
46900: LD_ADDR_VAR 0 11
46904: PUSH
46905: LD_VAR 0 1
46909: PPUSH
46910: CALL_OW 251
46914: ST_TO_ADDR
// if not x or not y then
46915: LD_VAR 0 10
46919: NOT
46920: PUSH
46921: LD_VAR 0 11
46925: NOT
46926: OR
46927: IFFALSE 46931
// exit ;
46929: GO 47964
// weapon := 0 ;
46931: LD_ADDR_VAR 0 18
46935: PUSH
46936: LD_INT 0
46938: ST_TO_ADDR
// fac_list := [ ] ;
46939: LD_ADDR_VAR 0 17
46943: PUSH
46944: EMPTY
46945: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46946: LD_ADDR_VAR 0 6
46950: PUSH
46951: LD_VAR 0 1
46955: PPUSH
46956: CALL_OW 274
46960: PPUSH
46961: LD_VAR 0 2
46965: PPUSH
46966: LD_INT 0
46968: PPUSH
46969: CALL 44535 0 3
46973: PPUSH
46974: LD_INT 30
46976: PUSH
46977: LD_INT 3
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PPUSH
46984: CALL_OW 72
46988: ST_TO_ADDR
// if not factories then
46989: LD_VAR 0 6
46993: NOT
46994: IFFALSE 46998
// exit ;
46996: GO 47964
// for i in factories do
46998: LD_ADDR_VAR 0 8
47002: PUSH
47003: LD_VAR 0 6
47007: PUSH
47008: FOR_IN
47009: IFFALSE 47034
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47011: LD_ADDR_VAR 0 17
47015: PUSH
47016: LD_VAR 0 17
47020: PUSH
47021: LD_VAR 0 8
47025: PPUSH
47026: CALL_OW 478
47030: UNION
47031: ST_TO_ADDR
47032: GO 47008
47034: POP
47035: POP
// if not fac_list then
47036: LD_VAR 0 17
47040: NOT
47041: IFFALSE 47045
// exit ;
47043: GO 47964
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47045: LD_ADDR_VAR 0 5
47049: PUSH
47050: LD_INT 4
47052: PUSH
47053: LD_INT 5
47055: PUSH
47056: LD_INT 9
47058: PUSH
47059: LD_INT 10
47061: PUSH
47062: LD_INT 6
47064: PUSH
47065: LD_INT 7
47067: PUSH
47068: LD_INT 11
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 27
47082: PUSH
47083: LD_INT 28
47085: PUSH
47086: LD_INT 26
47088: PUSH
47089: LD_INT 30
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 43
47100: PUSH
47101: LD_INT 44
47103: PUSH
47104: LD_INT 46
47106: PUSH
47107: LD_INT 45
47109: PUSH
47110: LD_INT 47
47112: PUSH
47113: LD_INT 49
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: LIST
47128: PUSH
47129: LD_VAR 0 12
47133: ARRAY
47134: ST_TO_ADDR
// list := list isect fac_list ;
47135: LD_ADDR_VAR 0 5
47139: PUSH
47140: LD_VAR 0 5
47144: PUSH
47145: LD_VAR 0 17
47149: ISECT
47150: ST_TO_ADDR
// if not list then
47151: LD_VAR 0 5
47155: NOT
47156: IFFALSE 47160
// exit ;
47158: GO 47964
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47160: LD_VAR 0 12
47164: PUSH
47165: LD_INT 3
47167: EQUAL
47168: PUSH
47169: LD_INT 49
47171: PUSH
47172: LD_VAR 0 5
47176: IN
47177: AND
47178: PUSH
47179: LD_INT 31
47181: PPUSH
47182: LD_VAR 0 16
47186: PPUSH
47187: CALL_OW 321
47191: PUSH
47192: LD_INT 2
47194: EQUAL
47195: AND
47196: IFFALSE 47256
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47198: LD_INT 22
47200: PUSH
47201: LD_VAR 0 16
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 35
47212: PUSH
47213: LD_INT 49
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 91
47222: PUSH
47223: LD_VAR 0 1
47227: PUSH
47228: LD_INT 10
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: LIST
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: LIST
47240: PPUSH
47241: CALL_OW 69
47245: NOT
47246: IFFALSE 47256
// weapon := ru_time_lapser ;
47248: LD_ADDR_VAR 0 18
47252: PUSH
47253: LD_INT 49
47255: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47256: LD_VAR 0 12
47260: PUSH
47261: LD_INT 1
47263: PUSH
47264: LD_INT 2
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: IN
47271: PUSH
47272: LD_INT 11
47274: PUSH
47275: LD_VAR 0 5
47279: IN
47280: PUSH
47281: LD_INT 30
47283: PUSH
47284: LD_VAR 0 5
47288: IN
47289: OR
47290: AND
47291: PUSH
47292: LD_INT 6
47294: PPUSH
47295: LD_VAR 0 16
47299: PPUSH
47300: CALL_OW 321
47304: PUSH
47305: LD_INT 2
47307: EQUAL
47308: AND
47309: IFFALSE 47474
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47311: LD_INT 22
47313: PUSH
47314: LD_VAR 0 16
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 2
47325: PUSH
47326: LD_INT 35
47328: PUSH
47329: LD_INT 11
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 35
47338: PUSH
47339: LD_INT 30
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 91
47353: PUSH
47354: LD_VAR 0 1
47358: PUSH
47359: LD_INT 18
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: LIST
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: LIST
47371: PPUSH
47372: CALL_OW 69
47376: NOT
47377: PUSH
47378: LD_INT 22
47380: PUSH
47381: LD_VAR 0 16
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 2
47392: PUSH
47393: LD_INT 30
47395: PUSH
47396: LD_INT 32
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 30
47405: PUSH
47406: LD_INT 33
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 91
47420: PUSH
47421: LD_VAR 0 1
47425: PUSH
47426: LD_INT 12
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: LIST
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: LIST
47438: PUSH
47439: EMPTY
47440: LIST
47441: PPUSH
47442: CALL_OW 69
47446: PUSH
47447: LD_INT 2
47449: GREATER
47450: AND
47451: IFFALSE 47474
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47453: LD_ADDR_VAR 0 18
47457: PUSH
47458: LD_INT 11
47460: PUSH
47461: LD_INT 30
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_VAR 0 12
47472: ARRAY
47473: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47474: LD_VAR 0 18
47478: NOT
47479: PUSH
47480: LD_INT 40
47482: PPUSH
47483: LD_VAR 0 16
47487: PPUSH
47488: CALL_OW 321
47492: PUSH
47493: LD_INT 2
47495: EQUAL
47496: AND
47497: PUSH
47498: LD_INT 7
47500: PUSH
47501: LD_VAR 0 5
47505: IN
47506: PUSH
47507: LD_INT 28
47509: PUSH
47510: LD_VAR 0 5
47514: IN
47515: OR
47516: PUSH
47517: LD_INT 45
47519: PUSH
47520: LD_VAR 0 5
47524: IN
47525: OR
47526: AND
47527: IFFALSE 47781
// begin hex := GetHexInfo ( x , y ) ;
47529: LD_ADDR_VAR 0 4
47533: PUSH
47534: LD_VAR 0 10
47538: PPUSH
47539: LD_VAR 0 11
47543: PPUSH
47544: CALL_OW 546
47548: ST_TO_ADDR
// if hex [ 1 ] then
47549: LD_VAR 0 4
47553: PUSH
47554: LD_INT 1
47556: ARRAY
47557: IFFALSE 47561
// exit ;
47559: GO 47964
// height := hex [ 2 ] ;
47561: LD_ADDR_VAR 0 15
47565: PUSH
47566: LD_VAR 0 4
47570: PUSH
47571: LD_INT 2
47573: ARRAY
47574: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47575: LD_ADDR_VAR 0 14
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: LD_INT 2
47585: PUSH
47586: LD_INT 3
47588: PUSH
47589: LD_INT 5
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: ST_TO_ADDR
// for i in tmp do
47598: LD_ADDR_VAR 0 8
47602: PUSH
47603: LD_VAR 0 14
47607: PUSH
47608: FOR_IN
47609: IFFALSE 47779
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47611: LD_ADDR_VAR 0 9
47615: PUSH
47616: LD_VAR 0 10
47620: PPUSH
47621: LD_VAR 0 8
47625: PPUSH
47626: LD_INT 5
47628: PPUSH
47629: CALL_OW 272
47633: PUSH
47634: LD_VAR 0 11
47638: PPUSH
47639: LD_VAR 0 8
47643: PPUSH
47644: LD_INT 5
47646: PPUSH
47647: CALL_OW 273
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47656: LD_VAR 0 9
47660: PUSH
47661: LD_INT 1
47663: ARRAY
47664: PPUSH
47665: LD_VAR 0 9
47669: PUSH
47670: LD_INT 2
47672: ARRAY
47673: PPUSH
47674: CALL_OW 488
47678: IFFALSE 47777
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47680: LD_ADDR_VAR 0 4
47684: PUSH
47685: LD_VAR 0 9
47689: PUSH
47690: LD_INT 1
47692: ARRAY
47693: PPUSH
47694: LD_VAR 0 9
47698: PUSH
47699: LD_INT 2
47701: ARRAY
47702: PPUSH
47703: CALL_OW 546
47707: ST_TO_ADDR
// if hex [ 1 ] then
47708: LD_VAR 0 4
47712: PUSH
47713: LD_INT 1
47715: ARRAY
47716: IFFALSE 47720
// continue ;
47718: GO 47608
// h := hex [ 2 ] ;
47720: LD_ADDR_VAR 0 13
47724: PUSH
47725: LD_VAR 0 4
47729: PUSH
47730: LD_INT 2
47732: ARRAY
47733: ST_TO_ADDR
// if h + 7 < height then
47734: LD_VAR 0 13
47738: PUSH
47739: LD_INT 7
47741: PLUS
47742: PUSH
47743: LD_VAR 0 15
47747: LESS
47748: IFFALSE 47777
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47750: LD_ADDR_VAR 0 18
47754: PUSH
47755: LD_INT 7
47757: PUSH
47758: LD_INT 28
47760: PUSH
47761: LD_INT 45
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: LIST
47768: PUSH
47769: LD_VAR 0 12
47773: ARRAY
47774: ST_TO_ADDR
// break ;
47775: GO 47779
// end ; end ; end ;
47777: GO 47608
47779: POP
47780: POP
// end ; if not weapon then
47781: LD_VAR 0 18
47785: NOT
47786: IFFALSE 47846
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47788: LD_ADDR_VAR 0 5
47792: PUSH
47793: LD_VAR 0 5
47797: PUSH
47798: LD_INT 11
47800: PUSH
47801: LD_INT 30
47803: PUSH
47804: LD_INT 49
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: LIST
47811: DIFF
47812: ST_TO_ADDR
// if not list then
47813: LD_VAR 0 5
47817: NOT
47818: IFFALSE 47822
// exit ;
47820: GO 47964
// weapon := list [ rand ( 1 , list ) ] ;
47822: LD_ADDR_VAR 0 18
47826: PUSH
47827: LD_VAR 0 5
47831: PUSH
47832: LD_INT 1
47834: PPUSH
47835: LD_VAR 0 5
47839: PPUSH
47840: CALL_OW 12
47844: ARRAY
47845: ST_TO_ADDR
// end ; if weapon then
47846: LD_VAR 0 18
47850: IFFALSE 47964
// begin tmp := CostOfWeapon ( weapon ) ;
47852: LD_ADDR_VAR 0 14
47856: PUSH
47857: LD_VAR 0 18
47861: PPUSH
47862: CALL_OW 451
47866: ST_TO_ADDR
// j := GetBase ( tower ) ;
47867: LD_ADDR_VAR 0 9
47871: PUSH
47872: LD_VAR 0 1
47876: PPUSH
47877: CALL_OW 274
47881: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47882: LD_VAR 0 9
47886: PPUSH
47887: LD_INT 1
47889: PPUSH
47890: CALL_OW 275
47894: PUSH
47895: LD_VAR 0 14
47899: PUSH
47900: LD_INT 1
47902: ARRAY
47903: GREATEREQUAL
47904: PUSH
47905: LD_VAR 0 9
47909: PPUSH
47910: LD_INT 2
47912: PPUSH
47913: CALL_OW 275
47917: PUSH
47918: LD_VAR 0 14
47922: PUSH
47923: LD_INT 2
47925: ARRAY
47926: GREATEREQUAL
47927: AND
47928: PUSH
47929: LD_VAR 0 9
47933: PPUSH
47934: LD_INT 3
47936: PPUSH
47937: CALL_OW 275
47941: PUSH
47942: LD_VAR 0 14
47946: PUSH
47947: LD_INT 3
47949: ARRAY
47950: GREATEREQUAL
47951: AND
47952: IFFALSE 47964
// result := weapon ;
47954: LD_ADDR_VAR 0 3
47958: PUSH
47959: LD_VAR 0 18
47963: ST_TO_ADDR
// end ; end ;
47964: LD_VAR 0 3
47968: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47969: LD_INT 0
47971: PPUSH
47972: PPUSH
// result := true ;
47973: LD_ADDR_VAR 0 3
47977: PUSH
47978: LD_INT 1
47980: ST_TO_ADDR
// if array1 = array2 then
47981: LD_VAR 0 1
47985: PUSH
47986: LD_VAR 0 2
47990: EQUAL
47991: IFFALSE 48051
// begin for i = 1 to array1 do
47993: LD_ADDR_VAR 0 4
47997: PUSH
47998: DOUBLE
47999: LD_INT 1
48001: DEC
48002: ST_TO_ADDR
48003: LD_VAR 0 1
48007: PUSH
48008: FOR_TO
48009: IFFALSE 48047
// if array1 [ i ] <> array2 [ i ] then
48011: LD_VAR 0 1
48015: PUSH
48016: LD_VAR 0 4
48020: ARRAY
48021: PUSH
48022: LD_VAR 0 2
48026: PUSH
48027: LD_VAR 0 4
48031: ARRAY
48032: NONEQUAL
48033: IFFALSE 48045
// begin result := false ;
48035: LD_ADDR_VAR 0 3
48039: PUSH
48040: LD_INT 0
48042: ST_TO_ADDR
// break ;
48043: GO 48047
// end ;
48045: GO 48008
48047: POP
48048: POP
// end else
48049: GO 48059
// result := false ;
48051: LD_ADDR_VAR 0 3
48055: PUSH
48056: LD_INT 0
48058: ST_TO_ADDR
// end ;
48059: LD_VAR 0 3
48063: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48064: LD_INT 0
48066: PPUSH
48067: PPUSH
// if not array1 or not array2 then
48068: LD_VAR 0 1
48072: NOT
48073: PUSH
48074: LD_VAR 0 2
48078: NOT
48079: OR
48080: IFFALSE 48084
// exit ;
48082: GO 48148
// result := true ;
48084: LD_ADDR_VAR 0 3
48088: PUSH
48089: LD_INT 1
48091: ST_TO_ADDR
// for i = 1 to array1 do
48092: LD_ADDR_VAR 0 4
48096: PUSH
48097: DOUBLE
48098: LD_INT 1
48100: DEC
48101: ST_TO_ADDR
48102: LD_VAR 0 1
48106: PUSH
48107: FOR_TO
48108: IFFALSE 48146
// if array1 [ i ] <> array2 [ i ] then
48110: LD_VAR 0 1
48114: PUSH
48115: LD_VAR 0 4
48119: ARRAY
48120: PUSH
48121: LD_VAR 0 2
48125: PUSH
48126: LD_VAR 0 4
48130: ARRAY
48131: NONEQUAL
48132: IFFALSE 48144
// begin result := false ;
48134: LD_ADDR_VAR 0 3
48138: PUSH
48139: LD_INT 0
48141: ST_TO_ADDR
// break ;
48142: GO 48146
// end ;
48144: GO 48107
48146: POP
48147: POP
// end ;
48148: LD_VAR 0 3
48152: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48153: LD_INT 0
48155: PPUSH
48156: PPUSH
48157: PPUSH
// pom := GetBase ( fac ) ;
48158: LD_ADDR_VAR 0 5
48162: PUSH
48163: LD_VAR 0 1
48167: PPUSH
48168: CALL_OW 274
48172: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48173: LD_ADDR_VAR 0 4
48177: PUSH
48178: LD_VAR 0 2
48182: PUSH
48183: LD_INT 1
48185: ARRAY
48186: PPUSH
48187: LD_VAR 0 2
48191: PUSH
48192: LD_INT 2
48194: ARRAY
48195: PPUSH
48196: LD_VAR 0 2
48200: PUSH
48201: LD_INT 3
48203: ARRAY
48204: PPUSH
48205: LD_VAR 0 2
48209: PUSH
48210: LD_INT 4
48212: ARRAY
48213: PPUSH
48214: CALL_OW 449
48218: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48219: LD_ADDR_VAR 0 3
48223: PUSH
48224: LD_VAR 0 5
48228: PPUSH
48229: LD_INT 1
48231: PPUSH
48232: CALL_OW 275
48236: PUSH
48237: LD_VAR 0 4
48241: PUSH
48242: LD_INT 1
48244: ARRAY
48245: GREATEREQUAL
48246: PUSH
48247: LD_VAR 0 5
48251: PPUSH
48252: LD_INT 2
48254: PPUSH
48255: CALL_OW 275
48259: PUSH
48260: LD_VAR 0 4
48264: PUSH
48265: LD_INT 2
48267: ARRAY
48268: GREATEREQUAL
48269: AND
48270: PUSH
48271: LD_VAR 0 5
48275: PPUSH
48276: LD_INT 3
48278: PPUSH
48279: CALL_OW 275
48283: PUSH
48284: LD_VAR 0 4
48288: PUSH
48289: LD_INT 3
48291: ARRAY
48292: GREATEREQUAL
48293: AND
48294: ST_TO_ADDR
// end ;
48295: LD_VAR 0 3
48299: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48300: LD_INT 0
48302: PPUSH
48303: PPUSH
48304: PPUSH
48305: PPUSH
// pom := GetBase ( building ) ;
48306: LD_ADDR_VAR 0 3
48310: PUSH
48311: LD_VAR 0 1
48315: PPUSH
48316: CALL_OW 274
48320: ST_TO_ADDR
// if not pom then
48321: LD_VAR 0 3
48325: NOT
48326: IFFALSE 48330
// exit ;
48328: GO 48500
// btype := GetBType ( building ) ;
48330: LD_ADDR_VAR 0 5
48334: PUSH
48335: LD_VAR 0 1
48339: PPUSH
48340: CALL_OW 266
48344: ST_TO_ADDR
// if btype = b_armoury then
48345: LD_VAR 0 5
48349: PUSH
48350: LD_INT 4
48352: EQUAL
48353: IFFALSE 48363
// btype := b_barracks ;
48355: LD_ADDR_VAR 0 5
48359: PUSH
48360: LD_INT 5
48362: ST_TO_ADDR
// if btype = b_depot then
48363: LD_VAR 0 5
48367: PUSH
48368: LD_INT 0
48370: EQUAL
48371: IFFALSE 48381
// btype := b_warehouse ;
48373: LD_ADDR_VAR 0 5
48377: PUSH
48378: LD_INT 1
48380: ST_TO_ADDR
// if btype = b_workshop then
48381: LD_VAR 0 5
48385: PUSH
48386: LD_INT 2
48388: EQUAL
48389: IFFALSE 48399
// btype := b_factory ;
48391: LD_ADDR_VAR 0 5
48395: PUSH
48396: LD_INT 3
48398: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48399: LD_ADDR_VAR 0 4
48403: PUSH
48404: LD_VAR 0 5
48408: PPUSH
48409: LD_VAR 0 1
48413: PPUSH
48414: CALL_OW 248
48418: PPUSH
48419: CALL_OW 450
48423: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48424: LD_ADDR_VAR 0 2
48428: PUSH
48429: LD_VAR 0 3
48433: PPUSH
48434: LD_INT 1
48436: PPUSH
48437: CALL_OW 275
48441: PUSH
48442: LD_VAR 0 4
48446: PUSH
48447: LD_INT 1
48449: ARRAY
48450: GREATEREQUAL
48451: PUSH
48452: LD_VAR 0 3
48456: PPUSH
48457: LD_INT 2
48459: PPUSH
48460: CALL_OW 275
48464: PUSH
48465: LD_VAR 0 4
48469: PUSH
48470: LD_INT 2
48472: ARRAY
48473: GREATEREQUAL
48474: AND
48475: PUSH
48476: LD_VAR 0 3
48480: PPUSH
48481: LD_INT 3
48483: PPUSH
48484: CALL_OW 275
48488: PUSH
48489: LD_VAR 0 4
48493: PUSH
48494: LD_INT 3
48496: ARRAY
48497: GREATEREQUAL
48498: AND
48499: ST_TO_ADDR
// end ;
48500: LD_VAR 0 2
48504: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48505: LD_INT 0
48507: PPUSH
48508: PPUSH
48509: PPUSH
// pom := GetBase ( building ) ;
48510: LD_ADDR_VAR 0 4
48514: PUSH
48515: LD_VAR 0 1
48519: PPUSH
48520: CALL_OW 274
48524: ST_TO_ADDR
// if not pom then
48525: LD_VAR 0 4
48529: NOT
48530: IFFALSE 48534
// exit ;
48532: GO 48635
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48534: LD_ADDR_VAR 0 5
48538: PUSH
48539: LD_VAR 0 2
48543: PPUSH
48544: LD_VAR 0 1
48548: PPUSH
48549: CALL_OW 248
48553: PPUSH
48554: CALL_OW 450
48558: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48559: LD_ADDR_VAR 0 3
48563: PUSH
48564: LD_VAR 0 4
48568: PPUSH
48569: LD_INT 1
48571: PPUSH
48572: CALL_OW 275
48576: PUSH
48577: LD_VAR 0 5
48581: PUSH
48582: LD_INT 1
48584: ARRAY
48585: GREATEREQUAL
48586: PUSH
48587: LD_VAR 0 4
48591: PPUSH
48592: LD_INT 2
48594: PPUSH
48595: CALL_OW 275
48599: PUSH
48600: LD_VAR 0 5
48604: PUSH
48605: LD_INT 2
48607: ARRAY
48608: GREATEREQUAL
48609: AND
48610: PUSH
48611: LD_VAR 0 4
48615: PPUSH
48616: LD_INT 3
48618: PPUSH
48619: CALL_OW 275
48623: PUSH
48624: LD_VAR 0 5
48628: PUSH
48629: LD_INT 3
48631: ARRAY
48632: GREATEREQUAL
48633: AND
48634: ST_TO_ADDR
// end ;
48635: LD_VAR 0 3
48639: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48640: LD_INT 0
48642: PPUSH
48643: PPUSH
48644: PPUSH
48645: PPUSH
48646: PPUSH
48647: PPUSH
48648: PPUSH
48649: PPUSH
48650: PPUSH
48651: PPUSH
48652: PPUSH
// result := false ;
48653: LD_ADDR_VAR 0 8
48657: PUSH
48658: LD_INT 0
48660: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48661: LD_VAR 0 5
48665: NOT
48666: PUSH
48667: LD_VAR 0 1
48671: NOT
48672: OR
48673: PUSH
48674: LD_VAR 0 2
48678: NOT
48679: OR
48680: PUSH
48681: LD_VAR 0 3
48685: NOT
48686: OR
48687: IFFALSE 48691
// exit ;
48689: GO 49505
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48691: LD_ADDR_VAR 0 14
48695: PUSH
48696: LD_VAR 0 1
48700: PPUSH
48701: LD_VAR 0 2
48705: PPUSH
48706: LD_VAR 0 3
48710: PPUSH
48711: LD_VAR 0 4
48715: PPUSH
48716: LD_VAR 0 5
48720: PUSH
48721: LD_INT 1
48723: ARRAY
48724: PPUSH
48725: CALL_OW 248
48729: PPUSH
48730: LD_INT 0
48732: PPUSH
48733: CALL 50738 0 6
48737: ST_TO_ADDR
// if not hexes then
48738: LD_VAR 0 14
48742: NOT
48743: IFFALSE 48747
// exit ;
48745: GO 49505
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48747: LD_ADDR_VAR 0 17
48751: PUSH
48752: LD_VAR 0 5
48756: PPUSH
48757: LD_INT 22
48759: PUSH
48760: LD_VAR 0 13
48764: PPUSH
48765: CALL_OW 255
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 2
48776: PUSH
48777: LD_INT 30
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 30
48789: PUSH
48790: LD_INT 1
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: LIST
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PPUSH
48806: CALL_OW 72
48810: ST_TO_ADDR
// for i = 1 to hexes do
48811: LD_ADDR_VAR 0 9
48815: PUSH
48816: DOUBLE
48817: LD_INT 1
48819: DEC
48820: ST_TO_ADDR
48821: LD_VAR 0 14
48825: PUSH
48826: FOR_TO
48827: IFFALSE 49503
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48829: LD_ADDR_VAR 0 13
48833: PUSH
48834: LD_VAR 0 14
48838: PUSH
48839: LD_VAR 0 9
48843: ARRAY
48844: PUSH
48845: LD_INT 1
48847: ARRAY
48848: PPUSH
48849: LD_VAR 0 14
48853: PUSH
48854: LD_VAR 0 9
48858: ARRAY
48859: PUSH
48860: LD_INT 2
48862: ARRAY
48863: PPUSH
48864: CALL_OW 428
48868: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48869: LD_VAR 0 14
48873: PUSH
48874: LD_VAR 0 9
48878: ARRAY
48879: PUSH
48880: LD_INT 1
48882: ARRAY
48883: PPUSH
48884: LD_VAR 0 14
48888: PUSH
48889: LD_VAR 0 9
48893: ARRAY
48894: PUSH
48895: LD_INT 2
48897: ARRAY
48898: PPUSH
48899: CALL_OW 351
48903: PUSH
48904: LD_VAR 0 14
48908: PUSH
48909: LD_VAR 0 9
48913: ARRAY
48914: PUSH
48915: LD_INT 1
48917: ARRAY
48918: PPUSH
48919: LD_VAR 0 14
48923: PUSH
48924: LD_VAR 0 9
48928: ARRAY
48929: PUSH
48930: LD_INT 2
48932: ARRAY
48933: PPUSH
48934: CALL_OW 488
48938: NOT
48939: OR
48940: PUSH
48941: LD_VAR 0 13
48945: PPUSH
48946: CALL_OW 247
48950: PUSH
48951: LD_INT 3
48953: EQUAL
48954: OR
48955: IFFALSE 48961
// exit ;
48957: POP
48958: POP
48959: GO 49505
// if not tmp then
48961: LD_VAR 0 13
48965: NOT
48966: IFFALSE 48970
// continue ;
48968: GO 48826
// result := true ;
48970: LD_ADDR_VAR 0 8
48974: PUSH
48975: LD_INT 1
48977: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48978: LD_VAR 0 6
48982: PUSH
48983: LD_VAR 0 13
48987: PPUSH
48988: CALL_OW 247
48992: PUSH
48993: LD_INT 2
48995: EQUAL
48996: AND
48997: PUSH
48998: LD_VAR 0 13
49002: PPUSH
49003: CALL_OW 263
49007: PUSH
49008: LD_INT 1
49010: EQUAL
49011: AND
49012: IFFALSE 49176
// begin if IsDrivenBy ( tmp ) then
49014: LD_VAR 0 13
49018: PPUSH
49019: CALL_OW 311
49023: IFFALSE 49027
// continue ;
49025: GO 48826
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49027: LD_VAR 0 6
49031: PPUSH
49032: LD_INT 3
49034: PUSH
49035: LD_INT 60
49037: PUSH
49038: EMPTY
49039: LIST
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 3
49047: PUSH
49048: LD_INT 55
49050: PUSH
49051: EMPTY
49052: LIST
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PPUSH
49062: CALL_OW 72
49066: IFFALSE 49174
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49068: LD_ADDR_VAR 0 18
49072: PUSH
49073: LD_VAR 0 6
49077: PPUSH
49078: LD_INT 3
49080: PUSH
49081: LD_INT 60
49083: PUSH
49084: EMPTY
49085: LIST
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 3
49093: PUSH
49094: LD_INT 55
49096: PUSH
49097: EMPTY
49098: LIST
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PPUSH
49108: CALL_OW 72
49112: PUSH
49113: LD_INT 1
49115: ARRAY
49116: ST_TO_ADDR
// if IsInUnit ( driver ) then
49117: LD_VAR 0 18
49121: PPUSH
49122: CALL_OW 310
49126: IFFALSE 49137
// ComExit ( driver ) ;
49128: LD_VAR 0 18
49132: PPUSH
49133: CALL 74518 0 1
// AddComEnterUnit ( driver , tmp ) ;
49137: LD_VAR 0 18
49141: PPUSH
49142: LD_VAR 0 13
49146: PPUSH
49147: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49151: LD_VAR 0 18
49155: PPUSH
49156: LD_VAR 0 7
49160: PPUSH
49161: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49165: LD_VAR 0 18
49169: PPUSH
49170: CALL_OW 181
// end ; continue ;
49174: GO 48826
// end ; if not cleaners or not tmp in cleaners then
49176: LD_VAR 0 6
49180: NOT
49181: PUSH
49182: LD_VAR 0 13
49186: PUSH
49187: LD_VAR 0 6
49191: IN
49192: NOT
49193: OR
49194: IFFALSE 49501
// begin if dep then
49196: LD_VAR 0 17
49200: IFFALSE 49336
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49202: LD_ADDR_VAR 0 16
49206: PUSH
49207: LD_VAR 0 17
49211: PUSH
49212: LD_INT 1
49214: ARRAY
49215: PPUSH
49216: CALL_OW 250
49220: PPUSH
49221: LD_VAR 0 17
49225: PUSH
49226: LD_INT 1
49228: ARRAY
49229: PPUSH
49230: CALL_OW 254
49234: PPUSH
49235: LD_INT 5
49237: PPUSH
49238: CALL_OW 272
49242: PUSH
49243: LD_VAR 0 17
49247: PUSH
49248: LD_INT 1
49250: ARRAY
49251: PPUSH
49252: CALL_OW 251
49256: PPUSH
49257: LD_VAR 0 17
49261: PUSH
49262: LD_INT 1
49264: ARRAY
49265: PPUSH
49266: CALL_OW 254
49270: PPUSH
49271: LD_INT 5
49273: PPUSH
49274: CALL_OW 273
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49283: LD_VAR 0 16
49287: PUSH
49288: LD_INT 1
49290: ARRAY
49291: PPUSH
49292: LD_VAR 0 16
49296: PUSH
49297: LD_INT 2
49299: ARRAY
49300: PPUSH
49301: CALL_OW 488
49305: IFFALSE 49336
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49307: LD_VAR 0 13
49311: PPUSH
49312: LD_VAR 0 16
49316: PUSH
49317: LD_INT 1
49319: ARRAY
49320: PPUSH
49321: LD_VAR 0 16
49325: PUSH
49326: LD_INT 2
49328: ARRAY
49329: PPUSH
49330: CALL_OW 111
// continue ;
49334: GO 48826
// end ; end ; r := GetDir ( tmp ) ;
49336: LD_ADDR_VAR 0 15
49340: PUSH
49341: LD_VAR 0 13
49345: PPUSH
49346: CALL_OW 254
49350: ST_TO_ADDR
// if r = 5 then
49351: LD_VAR 0 15
49355: PUSH
49356: LD_INT 5
49358: EQUAL
49359: IFFALSE 49369
// r := 0 ;
49361: LD_ADDR_VAR 0 15
49365: PUSH
49366: LD_INT 0
49368: ST_TO_ADDR
// for j = r to 5 do
49369: LD_ADDR_VAR 0 10
49373: PUSH
49374: DOUBLE
49375: LD_VAR 0 15
49379: DEC
49380: ST_TO_ADDR
49381: LD_INT 5
49383: PUSH
49384: FOR_TO
49385: IFFALSE 49499
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49387: LD_ADDR_VAR 0 11
49391: PUSH
49392: LD_VAR 0 13
49396: PPUSH
49397: CALL_OW 250
49401: PPUSH
49402: LD_VAR 0 10
49406: PPUSH
49407: LD_INT 2
49409: PPUSH
49410: CALL_OW 272
49414: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49415: LD_ADDR_VAR 0 12
49419: PUSH
49420: LD_VAR 0 13
49424: PPUSH
49425: CALL_OW 251
49429: PPUSH
49430: LD_VAR 0 10
49434: PPUSH
49435: LD_INT 2
49437: PPUSH
49438: CALL_OW 273
49442: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49443: LD_VAR 0 11
49447: PPUSH
49448: LD_VAR 0 12
49452: PPUSH
49453: CALL_OW 488
49457: PUSH
49458: LD_VAR 0 11
49462: PPUSH
49463: LD_VAR 0 12
49467: PPUSH
49468: CALL_OW 428
49472: NOT
49473: AND
49474: IFFALSE 49497
// begin ComMoveXY ( tmp , _x , _y ) ;
49476: LD_VAR 0 13
49480: PPUSH
49481: LD_VAR 0 11
49485: PPUSH
49486: LD_VAR 0 12
49490: PPUSH
49491: CALL_OW 111
// break ;
49495: GO 49499
// end ; end ;
49497: GO 49384
49499: POP
49500: POP
// end ; end ;
49501: GO 48826
49503: POP
49504: POP
// end ;
49505: LD_VAR 0 8
49509: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49510: LD_INT 0
49512: PPUSH
// result := true ;
49513: LD_ADDR_VAR 0 3
49517: PUSH
49518: LD_INT 1
49520: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49521: LD_VAR 0 2
49525: PUSH
49526: LD_INT 24
49528: DOUBLE
49529: EQUAL
49530: IFTRUE 49540
49532: LD_INT 33
49534: DOUBLE
49535: EQUAL
49536: IFTRUE 49540
49538: GO 49565
49540: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49541: LD_ADDR_VAR 0 3
49545: PUSH
49546: LD_INT 32
49548: PPUSH
49549: LD_VAR 0 1
49553: PPUSH
49554: CALL_OW 321
49558: PUSH
49559: LD_INT 2
49561: EQUAL
49562: ST_TO_ADDR
49563: GO 49881
49565: LD_INT 20
49567: DOUBLE
49568: EQUAL
49569: IFTRUE 49573
49571: GO 49598
49573: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49574: LD_ADDR_VAR 0 3
49578: PUSH
49579: LD_INT 6
49581: PPUSH
49582: LD_VAR 0 1
49586: PPUSH
49587: CALL_OW 321
49591: PUSH
49592: LD_INT 2
49594: EQUAL
49595: ST_TO_ADDR
49596: GO 49881
49598: LD_INT 22
49600: DOUBLE
49601: EQUAL
49602: IFTRUE 49612
49604: LD_INT 36
49606: DOUBLE
49607: EQUAL
49608: IFTRUE 49612
49610: GO 49637
49612: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49613: LD_ADDR_VAR 0 3
49617: PUSH
49618: LD_INT 15
49620: PPUSH
49621: LD_VAR 0 1
49625: PPUSH
49626: CALL_OW 321
49630: PUSH
49631: LD_INT 2
49633: EQUAL
49634: ST_TO_ADDR
49635: GO 49881
49637: LD_INT 30
49639: DOUBLE
49640: EQUAL
49641: IFTRUE 49645
49643: GO 49670
49645: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49646: LD_ADDR_VAR 0 3
49650: PUSH
49651: LD_INT 20
49653: PPUSH
49654: LD_VAR 0 1
49658: PPUSH
49659: CALL_OW 321
49663: PUSH
49664: LD_INT 2
49666: EQUAL
49667: ST_TO_ADDR
49668: GO 49881
49670: LD_INT 28
49672: DOUBLE
49673: EQUAL
49674: IFTRUE 49684
49676: LD_INT 21
49678: DOUBLE
49679: EQUAL
49680: IFTRUE 49684
49682: GO 49709
49684: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49685: LD_ADDR_VAR 0 3
49689: PUSH
49690: LD_INT 21
49692: PPUSH
49693: LD_VAR 0 1
49697: PPUSH
49698: CALL_OW 321
49702: PUSH
49703: LD_INT 2
49705: EQUAL
49706: ST_TO_ADDR
49707: GO 49881
49709: LD_INT 16
49711: DOUBLE
49712: EQUAL
49713: IFTRUE 49717
49715: GO 49742
49717: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49718: LD_ADDR_VAR 0 3
49722: PUSH
49723: LD_INT 84
49725: PPUSH
49726: LD_VAR 0 1
49730: PPUSH
49731: CALL_OW 321
49735: PUSH
49736: LD_INT 2
49738: EQUAL
49739: ST_TO_ADDR
49740: GO 49881
49742: LD_INT 19
49744: DOUBLE
49745: EQUAL
49746: IFTRUE 49756
49748: LD_INT 23
49750: DOUBLE
49751: EQUAL
49752: IFTRUE 49756
49754: GO 49781
49756: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49757: LD_ADDR_VAR 0 3
49761: PUSH
49762: LD_INT 83
49764: PPUSH
49765: LD_VAR 0 1
49769: PPUSH
49770: CALL_OW 321
49774: PUSH
49775: LD_INT 2
49777: EQUAL
49778: ST_TO_ADDR
49779: GO 49881
49781: LD_INT 17
49783: DOUBLE
49784: EQUAL
49785: IFTRUE 49789
49787: GO 49814
49789: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49790: LD_ADDR_VAR 0 3
49794: PUSH
49795: LD_INT 39
49797: PPUSH
49798: LD_VAR 0 1
49802: PPUSH
49803: CALL_OW 321
49807: PUSH
49808: LD_INT 2
49810: EQUAL
49811: ST_TO_ADDR
49812: GO 49881
49814: LD_INT 18
49816: DOUBLE
49817: EQUAL
49818: IFTRUE 49822
49820: GO 49847
49822: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49823: LD_ADDR_VAR 0 3
49827: PUSH
49828: LD_INT 40
49830: PPUSH
49831: LD_VAR 0 1
49835: PPUSH
49836: CALL_OW 321
49840: PUSH
49841: LD_INT 2
49843: EQUAL
49844: ST_TO_ADDR
49845: GO 49881
49847: LD_INT 27
49849: DOUBLE
49850: EQUAL
49851: IFTRUE 49855
49853: GO 49880
49855: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49856: LD_ADDR_VAR 0 3
49860: PUSH
49861: LD_INT 35
49863: PPUSH
49864: LD_VAR 0 1
49868: PPUSH
49869: CALL_OW 321
49873: PUSH
49874: LD_INT 2
49876: EQUAL
49877: ST_TO_ADDR
49878: GO 49881
49880: POP
// end ;
49881: LD_VAR 0 3
49885: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49886: LD_INT 0
49888: PPUSH
49889: PPUSH
49890: PPUSH
49891: PPUSH
49892: PPUSH
49893: PPUSH
49894: PPUSH
49895: PPUSH
49896: PPUSH
49897: PPUSH
49898: PPUSH
// result := false ;
49899: LD_ADDR_VAR 0 6
49903: PUSH
49904: LD_INT 0
49906: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49907: LD_VAR 0 1
49911: NOT
49912: PUSH
49913: LD_VAR 0 1
49917: PPUSH
49918: CALL_OW 266
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: LD_INT 1
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: IN
49933: NOT
49934: OR
49935: PUSH
49936: LD_VAR 0 2
49940: NOT
49941: OR
49942: PUSH
49943: LD_VAR 0 5
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: LD_INT 2
49956: PUSH
49957: LD_INT 3
49959: PUSH
49960: LD_INT 4
49962: PUSH
49963: LD_INT 5
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: IN
49974: NOT
49975: OR
49976: PUSH
49977: LD_VAR 0 3
49981: PPUSH
49982: LD_VAR 0 4
49986: PPUSH
49987: CALL_OW 488
49991: NOT
49992: OR
49993: IFFALSE 49997
// exit ;
49995: GO 50733
// side := GetSide ( depot ) ;
49997: LD_ADDR_VAR 0 9
50001: PUSH
50002: LD_VAR 0 1
50006: PPUSH
50007: CALL_OW 255
50011: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50012: LD_VAR 0 9
50016: PPUSH
50017: LD_VAR 0 2
50021: PPUSH
50022: CALL 49510 0 2
50026: NOT
50027: IFFALSE 50031
// exit ;
50029: GO 50733
// pom := GetBase ( depot ) ;
50031: LD_ADDR_VAR 0 10
50035: PUSH
50036: LD_VAR 0 1
50040: PPUSH
50041: CALL_OW 274
50045: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50046: LD_ADDR_VAR 0 11
50050: PUSH
50051: LD_VAR 0 2
50055: PPUSH
50056: LD_VAR 0 1
50060: PPUSH
50061: CALL_OW 248
50065: PPUSH
50066: CALL_OW 450
50070: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50071: LD_VAR 0 10
50075: PPUSH
50076: LD_INT 1
50078: PPUSH
50079: CALL_OW 275
50083: PUSH
50084: LD_VAR 0 11
50088: PUSH
50089: LD_INT 1
50091: ARRAY
50092: GREATEREQUAL
50093: PUSH
50094: LD_VAR 0 10
50098: PPUSH
50099: LD_INT 2
50101: PPUSH
50102: CALL_OW 275
50106: PUSH
50107: LD_VAR 0 11
50111: PUSH
50112: LD_INT 2
50114: ARRAY
50115: GREATEREQUAL
50116: AND
50117: PUSH
50118: LD_VAR 0 10
50122: PPUSH
50123: LD_INT 3
50125: PPUSH
50126: CALL_OW 275
50130: PUSH
50131: LD_VAR 0 11
50135: PUSH
50136: LD_INT 3
50138: ARRAY
50139: GREATEREQUAL
50140: AND
50141: NOT
50142: IFFALSE 50146
// exit ;
50144: GO 50733
// if GetBType ( depot ) = b_depot then
50146: LD_VAR 0 1
50150: PPUSH
50151: CALL_OW 266
50155: PUSH
50156: LD_INT 0
50158: EQUAL
50159: IFFALSE 50171
// dist := 28 else
50161: LD_ADDR_VAR 0 14
50165: PUSH
50166: LD_INT 28
50168: ST_TO_ADDR
50169: GO 50179
// dist := 36 ;
50171: LD_ADDR_VAR 0 14
50175: PUSH
50176: LD_INT 36
50178: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50179: LD_VAR 0 1
50183: PPUSH
50184: LD_VAR 0 3
50188: PPUSH
50189: LD_VAR 0 4
50193: PPUSH
50194: CALL_OW 297
50198: PUSH
50199: LD_VAR 0 14
50203: GREATER
50204: IFFALSE 50208
// exit ;
50206: GO 50733
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50208: LD_ADDR_VAR 0 12
50212: PUSH
50213: LD_VAR 0 2
50217: PPUSH
50218: LD_VAR 0 3
50222: PPUSH
50223: LD_VAR 0 4
50227: PPUSH
50228: LD_VAR 0 5
50232: PPUSH
50233: LD_VAR 0 1
50237: PPUSH
50238: CALL_OW 248
50242: PPUSH
50243: LD_INT 0
50245: PPUSH
50246: CALL 50738 0 6
50250: ST_TO_ADDR
// if not hexes then
50251: LD_VAR 0 12
50255: NOT
50256: IFFALSE 50260
// exit ;
50258: GO 50733
// hex := GetHexInfo ( x , y ) ;
50260: LD_ADDR_VAR 0 15
50264: PUSH
50265: LD_VAR 0 3
50269: PPUSH
50270: LD_VAR 0 4
50274: PPUSH
50275: CALL_OW 546
50279: ST_TO_ADDR
// if hex [ 1 ] then
50280: LD_VAR 0 15
50284: PUSH
50285: LD_INT 1
50287: ARRAY
50288: IFFALSE 50292
// exit ;
50290: GO 50733
// height := hex [ 2 ] ;
50292: LD_ADDR_VAR 0 13
50296: PUSH
50297: LD_VAR 0 15
50301: PUSH
50302: LD_INT 2
50304: ARRAY
50305: ST_TO_ADDR
// for i = 1 to hexes do
50306: LD_ADDR_VAR 0 7
50310: PUSH
50311: DOUBLE
50312: LD_INT 1
50314: DEC
50315: ST_TO_ADDR
50316: LD_VAR 0 12
50320: PUSH
50321: FOR_TO
50322: IFFALSE 50652
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50324: LD_VAR 0 12
50328: PUSH
50329: LD_VAR 0 7
50333: ARRAY
50334: PUSH
50335: LD_INT 1
50337: ARRAY
50338: PPUSH
50339: LD_VAR 0 12
50343: PUSH
50344: LD_VAR 0 7
50348: ARRAY
50349: PUSH
50350: LD_INT 2
50352: ARRAY
50353: PPUSH
50354: CALL_OW 488
50358: NOT
50359: PUSH
50360: LD_VAR 0 12
50364: PUSH
50365: LD_VAR 0 7
50369: ARRAY
50370: PUSH
50371: LD_INT 1
50373: ARRAY
50374: PPUSH
50375: LD_VAR 0 12
50379: PUSH
50380: LD_VAR 0 7
50384: ARRAY
50385: PUSH
50386: LD_INT 2
50388: ARRAY
50389: PPUSH
50390: CALL_OW 428
50394: PUSH
50395: LD_INT 0
50397: GREATER
50398: OR
50399: PUSH
50400: LD_VAR 0 12
50404: PUSH
50405: LD_VAR 0 7
50409: ARRAY
50410: PUSH
50411: LD_INT 1
50413: ARRAY
50414: PPUSH
50415: LD_VAR 0 12
50419: PUSH
50420: LD_VAR 0 7
50424: ARRAY
50425: PUSH
50426: LD_INT 2
50428: ARRAY
50429: PPUSH
50430: CALL_OW 351
50434: OR
50435: IFFALSE 50441
// exit ;
50437: POP
50438: POP
50439: GO 50733
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50441: LD_ADDR_VAR 0 8
50445: PUSH
50446: LD_VAR 0 12
50450: PUSH
50451: LD_VAR 0 7
50455: ARRAY
50456: PUSH
50457: LD_INT 1
50459: ARRAY
50460: PPUSH
50461: LD_VAR 0 12
50465: PUSH
50466: LD_VAR 0 7
50470: ARRAY
50471: PUSH
50472: LD_INT 2
50474: ARRAY
50475: PPUSH
50476: CALL_OW 546
50480: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50481: LD_VAR 0 8
50485: PUSH
50486: LD_INT 1
50488: ARRAY
50489: PUSH
50490: LD_VAR 0 8
50494: PUSH
50495: LD_INT 2
50497: ARRAY
50498: PUSH
50499: LD_VAR 0 13
50503: PUSH
50504: LD_INT 2
50506: PLUS
50507: GREATER
50508: OR
50509: PUSH
50510: LD_VAR 0 8
50514: PUSH
50515: LD_INT 2
50517: ARRAY
50518: PUSH
50519: LD_VAR 0 13
50523: PUSH
50524: LD_INT 2
50526: MINUS
50527: LESS
50528: OR
50529: PUSH
50530: LD_VAR 0 8
50534: PUSH
50535: LD_INT 3
50537: ARRAY
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: LD_INT 8
50544: PUSH
50545: LD_INT 9
50547: PUSH
50548: LD_INT 10
50550: PUSH
50551: LD_INT 11
50553: PUSH
50554: LD_INT 12
50556: PUSH
50557: LD_INT 13
50559: PUSH
50560: LD_INT 16
50562: PUSH
50563: LD_INT 17
50565: PUSH
50566: LD_INT 18
50568: PUSH
50569: LD_INT 19
50571: PUSH
50572: LD_INT 20
50574: PUSH
50575: LD_INT 21
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: IN
50593: NOT
50594: OR
50595: PUSH
50596: LD_VAR 0 8
50600: PUSH
50601: LD_INT 5
50603: ARRAY
50604: NOT
50605: OR
50606: PUSH
50607: LD_VAR 0 8
50611: PUSH
50612: LD_INT 6
50614: ARRAY
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: LD_INT 2
50621: PUSH
50622: LD_INT 7
50624: PUSH
50625: LD_INT 9
50627: PUSH
50628: LD_INT 10
50630: PUSH
50631: LD_INT 11
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: IN
50642: NOT
50643: OR
50644: IFFALSE 50650
// exit ;
50646: POP
50647: POP
50648: GO 50733
// end ;
50650: GO 50321
50652: POP
50653: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50654: LD_VAR 0 9
50658: PPUSH
50659: LD_VAR 0 3
50663: PPUSH
50664: LD_VAR 0 4
50668: PPUSH
50669: LD_INT 20
50671: PPUSH
50672: CALL 42685 0 4
50676: PUSH
50677: LD_INT 4
50679: ARRAY
50680: IFFALSE 50684
// exit ;
50682: GO 50733
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50684: LD_VAR 0 2
50688: PUSH
50689: LD_INT 29
50691: PUSH
50692: LD_INT 30
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: IN
50699: PUSH
50700: LD_VAR 0 3
50704: PPUSH
50705: LD_VAR 0 4
50709: PPUSH
50710: LD_VAR 0 9
50714: PPUSH
50715: CALL_OW 440
50719: NOT
50720: AND
50721: IFFALSE 50725
// exit ;
50723: GO 50733
// result := true ;
50725: LD_ADDR_VAR 0 6
50729: PUSH
50730: LD_INT 1
50732: ST_TO_ADDR
// end ;
50733: LD_VAR 0 6
50737: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50738: LD_INT 0
50740: PPUSH
50741: PPUSH
50742: PPUSH
50743: PPUSH
50744: PPUSH
50745: PPUSH
50746: PPUSH
50747: PPUSH
50748: PPUSH
50749: PPUSH
50750: PPUSH
50751: PPUSH
50752: PPUSH
50753: PPUSH
50754: PPUSH
50755: PPUSH
50756: PPUSH
50757: PPUSH
50758: PPUSH
50759: PPUSH
50760: PPUSH
50761: PPUSH
50762: PPUSH
50763: PPUSH
50764: PPUSH
50765: PPUSH
50766: PPUSH
50767: PPUSH
50768: PPUSH
50769: PPUSH
50770: PPUSH
50771: PPUSH
50772: PPUSH
50773: PPUSH
50774: PPUSH
50775: PPUSH
50776: PPUSH
50777: PPUSH
50778: PPUSH
50779: PPUSH
50780: PPUSH
50781: PPUSH
50782: PPUSH
50783: PPUSH
50784: PPUSH
50785: PPUSH
50786: PPUSH
50787: PPUSH
50788: PPUSH
50789: PPUSH
50790: PPUSH
50791: PPUSH
50792: PPUSH
50793: PPUSH
50794: PPUSH
50795: PPUSH
50796: PPUSH
50797: PPUSH
// result = [ ] ;
50798: LD_ADDR_VAR 0 7
50802: PUSH
50803: EMPTY
50804: ST_TO_ADDR
// temp_list = [ ] ;
50805: LD_ADDR_VAR 0 9
50809: PUSH
50810: EMPTY
50811: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50812: LD_VAR 0 4
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: LD_INT 2
50825: PUSH
50826: LD_INT 3
50828: PUSH
50829: LD_INT 4
50831: PUSH
50832: LD_INT 5
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: IN
50843: NOT
50844: PUSH
50845: LD_VAR 0 1
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: IN
50860: PUSH
50861: LD_VAR 0 5
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: LD_INT 2
50871: PUSH
50872: LD_INT 3
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: LIST
50879: IN
50880: NOT
50881: AND
50882: OR
50883: IFFALSE 50887
// exit ;
50885: GO 69278
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50887: LD_VAR 0 1
50891: PUSH
50892: LD_INT 6
50894: PUSH
50895: LD_INT 7
50897: PUSH
50898: LD_INT 8
50900: PUSH
50901: LD_INT 13
50903: PUSH
50904: LD_INT 12
50906: PUSH
50907: LD_INT 15
50909: PUSH
50910: LD_INT 11
50912: PUSH
50913: LD_INT 14
50915: PUSH
50916: LD_INT 10
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: IN
50930: IFFALSE 50940
// btype = b_lab ;
50932: LD_ADDR_VAR 0 1
50936: PUSH
50937: LD_INT 6
50939: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50940: LD_VAR 0 6
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: LD_INT 1
50950: PUSH
50951: LD_INT 2
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: LIST
50958: IN
50959: NOT
50960: PUSH
50961: LD_VAR 0 1
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: LD_INT 1
50971: PUSH
50972: LD_INT 2
50974: PUSH
50975: LD_INT 3
50977: PUSH
50978: LD_INT 6
50980: PUSH
50981: LD_INT 36
50983: PUSH
50984: LD_INT 4
50986: PUSH
50987: LD_INT 5
50989: PUSH
50990: LD_INT 31
50992: PUSH
50993: LD_INT 32
50995: PUSH
50996: LD_INT 33
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: IN
51012: NOT
51013: PUSH
51014: LD_VAR 0 6
51018: PUSH
51019: LD_INT 1
51021: EQUAL
51022: AND
51023: OR
51024: PUSH
51025: LD_VAR 0 1
51029: PUSH
51030: LD_INT 2
51032: PUSH
51033: LD_INT 3
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: IN
51040: NOT
51041: PUSH
51042: LD_VAR 0 6
51046: PUSH
51047: LD_INT 2
51049: EQUAL
51050: AND
51051: OR
51052: IFFALSE 51062
// mode = 0 ;
51054: LD_ADDR_VAR 0 6
51058: PUSH
51059: LD_INT 0
51061: ST_TO_ADDR
// case mode of 0 :
51062: LD_VAR 0 6
51066: PUSH
51067: LD_INT 0
51069: DOUBLE
51070: EQUAL
51071: IFTRUE 51075
51073: GO 62528
51075: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51076: LD_ADDR_VAR 0 11
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: LD_INT 1
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: LD_INT 1
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: LD_INT 1
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: LD_INT 2
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: LD_INT 2
51172: NEG
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: LD_INT 1
51183: NEG
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 1
51191: PUSH
51192: LD_INT 2
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 0
51201: PUSH
51202: LD_INT 2
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 1
51211: NEG
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: LD_INT 3
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: LD_INT 3
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 1
51242: NEG
51243: PUSH
51244: LD_INT 2
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51269: LD_ADDR_VAR 0 12
51273: PUSH
51274: LD_INT 0
51276: PUSH
51277: LD_INT 0
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: LD_INT 1
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: LD_INT 1
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 1
51338: NEG
51339: PUSH
51340: LD_INT 1
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: LD_INT 1
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 2
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 2
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 2
51392: NEG
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 2
51403: NEG
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 2
51415: NEG
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 3
51426: NEG
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 3
51437: NEG
51438: PUSH
51439: LD_INT 1
51441: NEG
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51465: LD_ADDR_VAR 0 13
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: LD_INT 1
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 0
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 1
51523: NEG
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 1
51534: NEG
51535: PUSH
51536: LD_INT 1
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: LD_INT 2
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 2
51558: PUSH
51559: LD_INT 1
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 2
51568: PUSH
51569: LD_INT 2
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 1
51578: PUSH
51579: LD_INT 2
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 2
51588: NEG
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 2
51600: NEG
51601: PUSH
51602: LD_INT 2
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 2
51612: NEG
51613: PUSH
51614: LD_INT 3
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 3
51624: NEG
51625: PUSH
51626: LD_INT 2
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 3
51636: NEG
51637: PUSH
51638: LD_INT 3
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51664: LD_ADDR_VAR 0 14
51668: PUSH
51669: LD_INT 0
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: LD_INT 1
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: LD_INT 0
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 1
51733: NEG
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: NEG
51746: PUSH
51747: LD_INT 2
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 0
51757: PUSH
51758: LD_INT 2
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 1
51779: PUSH
51780: LD_INT 2
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: LD_INT 2
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 1
51799: NEG
51800: PUSH
51801: LD_INT 1
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: LD_INT 3
51814: NEG
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: LD_INT 3
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: LD_INT 2
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51860: LD_ADDR_VAR 0 15
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 0
51877: PUSH
51878: LD_INT 1
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: LD_INT 1
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: LD_INT 1
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 2
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 2
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 1
51972: NEG
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 2
51983: NEG
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 2
51994: NEG
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 2
52006: PUSH
52007: LD_INT 1
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 3
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 3
52027: PUSH
52028: LD_INT 1
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52053: LD_ADDR_VAR 0 16
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 0
52070: PUSH
52071: LD_INT 1
52073: NEG
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: LD_INT 1
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 1
52122: NEG
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 1
52134: NEG
52135: PUSH
52136: LD_INT 2
52138: NEG
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 2
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 2
52156: PUSH
52157: LD_INT 2
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 1
52166: PUSH
52167: LD_INT 2
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 2
52176: NEG
52177: PUSH
52178: LD_INT 1
52180: NEG
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 2
52188: NEG
52189: PUSH
52190: LD_INT 2
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 3
52200: PUSH
52201: LD_INT 2
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 3
52210: PUSH
52211: LD_INT 3
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 2
52220: PUSH
52221: LD_INT 3
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52246: LD_ADDR_VAR 0 17
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 0
52263: PUSH
52264: LD_INT 1
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: LD_INT 0
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 1
52304: NEG
52305: PUSH
52306: LD_INT 0
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 1
52315: NEG
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: LD_INT 2
52331: NEG
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: LD_INT 2
52342: NEG
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 1
52350: PUSH
52351: LD_INT 1
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 2
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 2
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 2
52381: PUSH
52382: LD_INT 2
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 1
52391: PUSH
52392: LD_INT 2
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: LD_INT 2
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 1
52411: NEG
52412: PUSH
52413: LD_INT 1
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 2
52422: NEG
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 2
52433: NEG
52434: PUSH
52435: LD_INT 1
52437: NEG
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 2
52445: NEG
52446: PUSH
52447: LD_INT 2
52449: NEG
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52476: LD_ADDR_VAR 0 18
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 0
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: LD_INT 0
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 1
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 1
52545: NEG
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: LD_INT 2
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 0
52569: PUSH
52570: LD_INT 2
52572: NEG
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 2
52601: PUSH
52602: LD_INT 1
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 2
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: LD_INT 2
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: LD_INT 2
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 1
52641: NEG
52642: PUSH
52643: LD_INT 1
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 2
52652: NEG
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 2
52663: NEG
52664: PUSH
52665: LD_INT 1
52667: NEG
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 2
52675: NEG
52676: PUSH
52677: LD_INT 2
52679: NEG
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52706: LD_ADDR_VAR 0 19
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: LD_INT 1
52726: NEG
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: LD_INT 1
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 1
52764: NEG
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 1
52775: NEG
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: LD_INT 2
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: LD_INT 2
52802: NEG
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 2
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 2
52831: PUSH
52832: LD_INT 1
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 2
52841: PUSH
52842: LD_INT 2
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: PUSH
52852: LD_INT 2
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: LD_INT 2
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 2
52882: NEG
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 2
52893: NEG
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 2
52905: NEG
52906: PUSH
52907: LD_INT 2
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52936: LD_ADDR_VAR 0 20
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: LD_INT 1
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: LD_INT 0
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: LD_INT 1
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 1
52994: NEG
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: LD_INT 1
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: NEG
53018: PUSH
53019: LD_INT 2
53021: NEG
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 0
53029: PUSH
53030: LD_INT 2
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 2
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 2
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 2
53071: PUSH
53072: LD_INT 2
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: LD_INT 2
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 0
53091: PUSH
53092: LD_INT 2
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 1
53101: NEG
53102: PUSH
53103: LD_INT 1
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 2
53112: NEG
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 2
53123: NEG
53124: PUSH
53125: LD_INT 1
53127: NEG
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 2
53135: NEG
53136: PUSH
53137: LD_INT 2
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53166: LD_ADDR_VAR 0 21
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 0
53183: PUSH
53184: LD_INT 1
53186: NEG
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: LD_INT 0
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 1
53204: PUSH
53205: LD_INT 1
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: LD_INT 1
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 1
53224: NEG
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 1
53235: NEG
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: LD_INT 2
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: LD_INT 2
53262: NEG
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 2
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 2
53291: PUSH
53292: LD_INT 1
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 2
53301: PUSH
53302: LD_INT 2
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 1
53311: PUSH
53312: LD_INT 2
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 0
53321: PUSH
53322: LD_INT 2
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 1
53331: NEG
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 2
53342: NEG
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 2
53353: NEG
53354: PUSH
53355: LD_INT 1
53357: NEG
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 2
53365: NEG
53366: PUSH
53367: LD_INT 2
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53396: LD_ADDR_VAR 0 22
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: LD_INT 1
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: LD_INT 0
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: NEG
53466: PUSH
53467: LD_INT 1
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: LD_INT 2
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: LD_INT 2
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 2
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 2
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 2
53531: PUSH
53532: LD_INT 2
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: LD_INT 2
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: LD_INT 2
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: LD_INT 1
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 2
53572: NEG
53573: PUSH
53574: LD_INT 0
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 2
53583: NEG
53584: PUSH
53585: LD_INT 1
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 2
53595: NEG
53596: PUSH
53597: LD_INT 2
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53626: LD_ADDR_VAR 0 23
53630: PUSH
53631: LD_INT 0
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: LD_INT 1
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: LD_INT 0
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: PUSH
53665: LD_INT 1
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 1
53695: NEG
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: LD_INT 2
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: LD_INT 2
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 2
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 2
53751: PUSH
53752: LD_INT 1
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 2
53761: PUSH
53762: LD_INT 2
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: LD_INT 2
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: LD_INT 2
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: LD_INT 1
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 2
53802: NEG
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 2
53813: NEG
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 2
53825: NEG
53826: PUSH
53827: LD_INT 2
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 2
53837: NEG
53838: PUSH
53839: LD_INT 3
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 1
53849: NEG
53850: PUSH
53851: LD_INT 3
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: LD_INT 2
53864: NEG
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 2
53872: PUSH
53873: LD_INT 1
53875: NEG
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53906: LD_ADDR_VAR 0 24
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: LD_INT 1
53926: NEG
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 1
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 0
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 1
53964: NEG
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 1
53975: NEG
53976: PUSH
53977: LD_INT 1
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 1
53987: NEG
53988: PUSH
53989: LD_INT 2
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: LD_INT 2
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: LD_INT 1
54013: NEG
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 2
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 2
54031: PUSH
54032: LD_INT 1
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 2
54041: PUSH
54042: LD_INT 2
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: LD_INT 2
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: LD_INT 2
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 1
54071: NEG
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 2
54082: NEG
54083: PUSH
54084: LD_INT 0
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 2
54093: NEG
54094: PUSH
54095: LD_INT 1
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 2
54105: NEG
54106: PUSH
54107: LD_INT 2
54109: NEG
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 1
54117: PUSH
54118: LD_INT 2
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 2
54128: PUSH
54129: LD_INT 1
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 3
54139: PUSH
54140: LD_INT 1
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 3
54149: PUSH
54150: LD_INT 2
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54182: LD_ADDR_VAR 0 25
54186: PUSH
54187: LD_INT 0
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 0
54199: PUSH
54200: LD_INT 1
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 1
54220: PUSH
54221: LD_INT 1
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: LD_INT 1
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 1
54251: NEG
54252: PUSH
54253: LD_INT 1
54255: NEG
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: NEG
54264: PUSH
54265: LD_INT 2
54267: NEG
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: LD_INT 2
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 1
54286: PUSH
54287: LD_INT 1
54289: NEG
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 2
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 2
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 2
54317: PUSH
54318: LD_INT 2
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: LD_INT 2
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: LD_INT 2
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 2
54358: NEG
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 2
54369: NEG
54370: PUSH
54371: LD_INT 1
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 2
54381: NEG
54382: PUSH
54383: LD_INT 2
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 3
54393: PUSH
54394: LD_INT 1
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 3
54403: PUSH
54404: LD_INT 2
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 2
54413: PUSH
54414: LD_INT 3
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 1
54423: PUSH
54424: LD_INT 3
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54456: LD_ADDR_VAR 0 26
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: LD_INT 1
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: NEG
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: LD_INT 1
54529: NEG
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 1
54537: NEG
54538: PUSH
54539: LD_INT 2
54541: NEG
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: LD_INT 2
54552: NEG
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 1
54560: PUSH
54561: LD_INT 1
54563: NEG
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 2
54571: PUSH
54572: LD_INT 0
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 2
54581: PUSH
54582: LD_INT 1
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 2
54591: PUSH
54592: LD_INT 2
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: LD_INT 2
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: LD_INT 2
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 1
54621: NEG
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 2
54632: NEG
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 2
54643: NEG
54644: PUSH
54645: LD_INT 1
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 2
54655: NEG
54656: PUSH
54657: LD_INT 2
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 2
54667: PUSH
54668: LD_INT 3
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 1
54677: PUSH
54678: LD_INT 3
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 1
54687: NEG
54688: PUSH
54689: LD_INT 2
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 2
54698: NEG
54699: PUSH
54700: LD_INT 1
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54732: LD_ADDR_VAR 0 27
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: LD_INT 1
54752: NEG
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: LD_INT 0
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 1
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: LD_INT 1
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 1
54801: NEG
54802: PUSH
54803: LD_INT 1
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 1
54813: NEG
54814: PUSH
54815: LD_INT 2
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: LD_INT 2
54828: NEG
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: LD_INT 1
54839: NEG
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 2
54847: PUSH
54848: LD_INT 0
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 2
54857: PUSH
54858: LD_INT 1
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 2
54867: PUSH
54868: LD_INT 2
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: PUSH
54878: LD_INT 2
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: LD_INT 2
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: PUSH
54899: LD_INT 1
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 2
54908: NEG
54909: PUSH
54910: LD_INT 0
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 2
54919: NEG
54920: PUSH
54921: LD_INT 1
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 2
54931: NEG
54932: PUSH
54933: LD_INT 2
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 1
54943: NEG
54944: PUSH
54945: LD_INT 2
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 2
54954: NEG
54955: PUSH
54956: LD_INT 1
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 3
54965: NEG
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 3
54977: NEG
54978: PUSH
54979: LD_INT 2
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55012: LD_ADDR_VAR 0 28
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: LD_INT 1
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 1
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 1
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: LD_INT 1
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 1
55070: NEG
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: LD_INT 1
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: LD_INT 2
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: LD_INT 2
55108: NEG
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 1
55116: PUSH
55117: LD_INT 1
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 2
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 2
55137: PUSH
55138: LD_INT 1
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 2
55147: PUSH
55148: LD_INT 2
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 1
55157: PUSH
55158: LD_INT 2
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: LD_INT 2
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 1
55177: NEG
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 2
55188: NEG
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 2
55199: NEG
55200: PUSH
55201: LD_INT 1
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 2
55211: NEG
55212: PUSH
55213: LD_INT 2
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 2
55223: NEG
55224: PUSH
55225: LD_INT 3
55227: NEG
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: LD_INT 3
55239: NEG
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 3
55247: NEG
55248: PUSH
55249: LD_INT 1
55251: NEG
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 3
55259: NEG
55260: PUSH
55261: LD_INT 2
55263: NEG
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55294: LD_ADDR_VAR 0 29
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: LD_INT 0
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: LD_INT 1
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: LD_INT 1
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: LD_INT 1
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 1
55352: NEG
55353: PUSH
55354: LD_INT 0
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 1
55363: NEG
55364: PUSH
55365: LD_INT 1
55367: NEG
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: NEG
55376: PUSH
55377: LD_INT 2
55379: NEG
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 0
55387: PUSH
55388: LD_INT 2
55390: NEG
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 1
55398: PUSH
55399: LD_INT 1
55401: NEG
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 2
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 2
55419: PUSH
55420: LD_INT 1
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 1
55429: PUSH
55430: LD_INT 2
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: LD_INT 2
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 1
55449: NEG
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 2
55460: NEG
55461: PUSH
55462: LD_INT 1
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 2
55472: NEG
55473: PUSH
55474: LD_INT 2
55476: NEG
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 2
55484: NEG
55485: PUSH
55486: LD_INT 3
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 2
55496: PUSH
55497: LD_INT 1
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 3
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: LD_INT 3
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: LD_INT 2
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 3
55538: NEG
55539: PUSH
55540: LD_INT 2
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55573: LD_ADDR_VAR 0 30
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: NEG
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 1
55654: NEG
55655: PUSH
55656: LD_INT 2
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: LD_INT 2
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 1
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 2
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 2
55698: PUSH
55699: LD_INT 1
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 2
55708: PUSH
55709: LD_INT 2
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: LD_INT 2
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: NEG
55729: PUSH
55730: LD_INT 1
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 2
55739: NEG
55740: PUSH
55741: LD_INT 0
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 2
55750: NEG
55751: PUSH
55752: LD_INT 1
55754: NEG
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 1
55762: NEG
55763: PUSH
55764: LD_INT 3
55766: NEG
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 1
55774: PUSH
55775: LD_INT 2
55777: NEG
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 3
55785: PUSH
55786: LD_INT 2
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 2
55795: PUSH
55796: LD_INT 3
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 2
55805: NEG
55806: PUSH
55807: LD_INT 1
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 3
55816: NEG
55817: PUSH
55818: LD_INT 1
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55851: LD_ADDR_VAR 0 31
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: LD_INT 1
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 1
55889: PUSH
55890: LD_INT 1
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: LD_INT 1
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: NEG
55921: PUSH
55922: LD_INT 1
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: LD_INT 2
55936: NEG
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: PUSH
55945: LD_INT 1
55947: NEG
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 2
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 2
55965: PUSH
55966: LD_INT 1
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 2
55975: PUSH
55976: LD_INT 2
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: LD_INT 2
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: LD_INT 2
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 1
56005: NEG
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 2
56016: NEG
56017: PUSH
56018: LD_INT 1
56020: NEG
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 2
56028: NEG
56029: PUSH
56030: LD_INT 2
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 2
56040: NEG
56041: PUSH
56042: LD_INT 3
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 2
56052: PUSH
56053: LD_INT 1
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 3
56063: PUSH
56064: LD_INT 1
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 1
56073: PUSH
56074: LD_INT 3
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: LD_INT 2
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 3
56094: NEG
56095: PUSH
56096: LD_INT 2
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56129: LD_ADDR_VAR 0 32
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: LD_INT 0
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: LD_INT 1
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: LD_INT 0
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 1
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 0
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: LD_INT 1
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: LD_INT 2
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: LD_INT 2
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 1
56233: PUSH
56234: LD_INT 1
56236: NEG
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 2
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 2
56254: PUSH
56255: LD_INT 2
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 1
56264: PUSH
56265: LD_INT 2
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: LD_INT 2
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 1
56284: NEG
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 2
56295: NEG
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 2
56306: NEG
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 1
56318: NEG
56319: PUSH
56320: LD_INT 3
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 1
56330: PUSH
56331: LD_INT 2
56333: NEG
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 3
56341: PUSH
56342: LD_INT 2
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 2
56351: PUSH
56352: LD_INT 3
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 2
56361: NEG
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 3
56372: NEG
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56407: LD_ADDR_VAR 0 33
56411: PUSH
56412: LD_INT 0
56414: PUSH
56415: LD_INT 0
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 0
56424: PUSH
56425: LD_INT 1
56427: NEG
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 1
56435: PUSH
56436: LD_INT 0
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: LD_INT 1
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 0
56455: PUSH
56456: LD_INT 1
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 1
56465: NEG
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: LD_INT 1
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 1
56488: NEG
56489: PUSH
56490: LD_INT 2
56492: NEG
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 1
56500: PUSH
56501: LD_INT 1
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 2
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 2
56521: PUSH
56522: LD_INT 1
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: LD_INT 2
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: LD_INT 2
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: NEG
56552: PUSH
56553: LD_INT 1
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 2
56562: NEG
56563: PUSH
56564: LD_INT 0
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 2
56573: NEG
56574: PUSH
56575: LD_INT 1
56577: NEG
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 2
56585: NEG
56586: PUSH
56587: LD_INT 2
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 2
56597: NEG
56598: PUSH
56599: LD_INT 3
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 2
56609: PUSH
56610: LD_INT 1
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 3
56620: PUSH
56621: LD_INT 1
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 1
56630: PUSH
56631: LD_INT 3
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 1
56640: NEG
56641: PUSH
56642: LD_INT 2
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 3
56651: NEG
56652: PUSH
56653: LD_INT 2
56655: NEG
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56686: LD_ADDR_VAR 0 34
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: LD_INT 1
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 1
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: LD_INT 1
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: NEG
56756: PUSH
56757: LD_INT 1
56759: NEG
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 1
56767: NEG
56768: PUSH
56769: LD_INT 2
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: LD_INT 2
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: LD_INT 1
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 2
56801: PUSH
56802: LD_INT 1
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 2
56811: PUSH
56812: LD_INT 2
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 1
56821: PUSH
56822: LD_INT 2
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 1
56831: NEG
56832: PUSH
56833: LD_INT 1
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 2
56842: NEG
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 2
56853: NEG
56854: PUSH
56855: LD_INT 1
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 2
56865: NEG
56866: PUSH
56867: LD_INT 2
56869: NEG
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 1
56877: NEG
56878: PUSH
56879: LD_INT 3
56881: NEG
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 1
56889: PUSH
56890: LD_INT 2
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 3
56900: PUSH
56901: LD_INT 2
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 2
56910: PUSH
56911: LD_INT 3
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 2
56920: NEG
56921: PUSH
56922: LD_INT 1
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 3
56931: NEG
56932: PUSH
56933: LD_INT 1
56935: NEG
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56966: LD_ADDR_VAR 0 35
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 0
56983: PUSH
56984: LD_INT 1
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 1
56994: PUSH
56995: LD_INT 0
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: LD_INT 1
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 0
57014: PUSH
57015: LD_INT 1
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 1
57024: NEG
57025: PUSH
57026: LD_INT 0
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 1
57035: NEG
57036: PUSH
57037: LD_INT 1
57039: NEG
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 2
57047: PUSH
57048: LD_INT 1
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 2
57057: NEG
57058: PUSH
57059: LD_INT 1
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57078: LD_ADDR_VAR 0 36
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: LD_INT 0
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 1
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 0
57126: PUSH
57127: LD_INT 1
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 1
57136: NEG
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 1
57147: NEG
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 1
57159: NEG
57160: PUSH
57161: LD_INT 2
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: LD_INT 2
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57190: LD_ADDR_VAR 0 37
57194: PUSH
57195: LD_INT 0
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: LD_INT 1
57210: NEG
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 1
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 1
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 1
57248: NEG
57249: PUSH
57250: LD_INT 0
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 1
57259: NEG
57260: PUSH
57261: LD_INT 1
57263: NEG
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 1
57271: PUSH
57272: LD_INT 1
57274: NEG
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 1
57282: NEG
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57302: LD_ADDR_VAR 0 38
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 0
57319: PUSH
57320: LD_INT 1
57322: NEG
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: LD_INT 0
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 1
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 0
57350: PUSH
57351: LD_INT 1
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 1
57360: NEG
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 1
57371: NEG
57372: PUSH
57373: LD_INT 1
57375: NEG
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 2
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 2
57393: NEG
57394: PUSH
57395: LD_INT 1
57397: NEG
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57414: LD_ADDR_VAR 0 39
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 0
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 1
57442: PUSH
57443: LD_INT 0
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 1
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 0
57462: PUSH
57463: LD_INT 1
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 1
57472: NEG
57473: PUSH
57474: LD_INT 0
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 1
57483: NEG
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: LD_INT 2
57499: NEG
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 1
57507: PUSH
57508: LD_INT 2
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57526: LD_ADDR_VAR 0 40
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 0
57543: PUSH
57544: LD_INT 1
57546: NEG
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 1
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 1
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 0
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: NEG
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 1
57595: NEG
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 1
57607: PUSH
57608: LD_INT 1
57610: NEG
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 1
57618: NEG
57619: PUSH
57620: LD_INT 1
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57638: LD_ADDR_VAR 0 41
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: LD_INT 0
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 0
57655: PUSH
57656: LD_INT 1
57658: NEG
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 1
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 1
57676: PUSH
57677: LD_INT 1
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 0
57686: PUSH
57687: LD_INT 1
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 1
57696: NEG
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 1
57707: NEG
57708: PUSH
57709: LD_INT 1
57711: NEG
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 1
57719: NEG
57720: PUSH
57721: LD_INT 2
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 1
57731: PUSH
57732: LD_INT 1
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 2
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 2
57752: PUSH
57753: LD_INT 1
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 2
57762: PUSH
57763: LD_INT 2
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: LD_INT 2
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 1
57782: NEG
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 2
57793: NEG
57794: PUSH
57795: LD_INT 0
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 2
57804: NEG
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 2
57816: NEG
57817: PUSH
57818: LD_INT 2
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 2
57828: NEG
57829: PUSH
57830: LD_INT 3
57832: NEG
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 2
57840: PUSH
57841: LD_INT 1
57843: NEG
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 3
57851: PUSH
57852: LD_INT 0
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 3
57861: PUSH
57862: LD_INT 1
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 3
57871: PUSH
57872: LD_INT 2
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 3
57881: PUSH
57882: LD_INT 3
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 2
57891: PUSH
57892: LD_INT 3
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 2
57901: NEG
57902: PUSH
57903: LD_INT 1
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 3
57912: NEG
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 3
57923: NEG
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 3
57935: NEG
57936: PUSH
57937: LD_INT 2
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 3
57947: NEG
57948: PUSH
57949: LD_INT 3
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57988: LD_ADDR_VAR 0 42
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: LD_INT 0
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: LD_INT 1
58008: NEG
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 1
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: LD_INT 1
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 1
58046: NEG
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: PUSH
58059: LD_INT 1
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 1
58069: NEG
58070: PUSH
58071: LD_INT 2
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: LD_INT 2
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 1
58092: PUSH
58093: LD_INT 1
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 2
58103: PUSH
58104: LD_INT 1
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 2
58113: PUSH
58114: LD_INT 2
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: LD_INT 2
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 0
58133: PUSH
58134: LD_INT 2
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 1
58143: NEG
58144: PUSH
58145: LD_INT 1
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 2
58154: NEG
58155: PUSH
58156: LD_INT 1
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 2
58166: NEG
58167: PUSH
58168: LD_INT 2
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 2
58178: NEG
58179: PUSH
58180: LD_INT 3
58182: NEG
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: LD_INT 3
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: LD_INT 3
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 1
58213: PUSH
58214: LD_INT 2
58216: NEG
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 3
58224: PUSH
58225: LD_INT 2
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 3
58234: PUSH
58235: LD_INT 3
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 2
58244: PUSH
58245: LD_INT 3
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 1
58254: PUSH
58255: LD_INT 3
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 0
58264: PUSH
58265: LD_INT 3
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: NEG
58275: PUSH
58276: LD_INT 2
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 3
58285: NEG
58286: PUSH
58287: LD_INT 2
58289: NEG
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 3
58297: NEG
58298: PUSH
58299: LD_INT 3
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58338: LD_ADDR_VAR 0 43
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 0
58355: PUSH
58356: LD_INT 1
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 1
58376: PUSH
58377: LD_INT 1
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 0
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: LD_INT 0
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 1
58407: NEG
58408: PUSH
58409: LD_INT 1
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 1
58419: NEG
58420: PUSH
58421: LD_INT 2
58423: NEG
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 0
58431: PUSH
58432: LD_INT 2
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 1
58442: PUSH
58443: LD_INT 1
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 2
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 2
58463: PUSH
58464: LD_INT 1
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: LD_INT 2
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 0
58483: PUSH
58484: LD_INT 2
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 1
58493: NEG
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 2
58504: NEG
58505: PUSH
58506: LD_INT 0
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 2
58515: NEG
58516: PUSH
58517: LD_INT 1
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 1
58527: NEG
58528: PUSH
58529: LD_INT 3
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: LD_INT 3
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 1
58550: PUSH
58551: LD_INT 2
58553: NEG
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 2
58561: PUSH
58562: LD_INT 1
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 3
58572: PUSH
58573: LD_INT 0
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 3
58582: PUSH
58583: LD_INT 1
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: LD_INT 3
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 0
58602: PUSH
58603: LD_INT 3
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: PUSH
58614: LD_INT 2
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 2
58623: NEG
58624: PUSH
58625: LD_INT 1
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 3
58634: NEG
58635: PUSH
58636: LD_INT 0
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 3
58645: NEG
58646: PUSH
58647: LD_INT 1
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58686: LD_ADDR_VAR 0 44
58690: PUSH
58691: LD_INT 0
58693: PUSH
58694: LD_INT 0
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 0
58703: PUSH
58704: LD_INT 1
58706: NEG
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 1
58714: PUSH
58715: LD_INT 0
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 1
58724: PUSH
58725: LD_INT 1
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: LD_INT 1
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 1
58744: NEG
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 1
58755: NEG
58756: PUSH
58757: LD_INT 1
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 1
58767: NEG
58768: PUSH
58769: LD_INT 2
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 1
58779: PUSH
58780: LD_INT 1
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 2
58790: PUSH
58791: LD_INT 0
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 2
58800: PUSH
58801: LD_INT 1
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 2
58810: PUSH
58811: LD_INT 2
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: PUSH
58821: LD_INT 2
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 1
58830: NEG
58831: PUSH
58832: LD_INT 1
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 2
58841: NEG
58842: PUSH
58843: LD_INT 0
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 2
58852: NEG
58853: PUSH
58854: LD_INT 1
58856: NEG
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 2
58864: NEG
58865: PUSH
58866: LD_INT 2
58868: NEG
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 2
58876: NEG
58877: PUSH
58878: LD_INT 3
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 2
58888: PUSH
58889: LD_INT 1
58891: NEG
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 3
58899: PUSH
58900: LD_INT 0
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 3
58909: PUSH
58910: LD_INT 1
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 3
58919: PUSH
58920: LD_INT 2
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 3
58929: PUSH
58930: LD_INT 3
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 2
58939: PUSH
58940: LD_INT 3
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 2
58949: NEG
58950: PUSH
58951: LD_INT 1
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 3
58960: NEG
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 3
58971: NEG
58972: PUSH
58973: LD_INT 1
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 3
58983: NEG
58984: PUSH
58985: LD_INT 2
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 3
58995: NEG
58996: PUSH
58997: LD_INT 3
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59036: LD_ADDR_VAR 0 45
59040: PUSH
59041: LD_INT 0
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: LD_INT 1
59056: NEG
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 1
59064: PUSH
59065: LD_INT 0
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 1
59074: PUSH
59075: LD_INT 1
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 0
59084: PUSH
59085: LD_INT 1
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: NEG
59095: PUSH
59096: LD_INT 0
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: NEG
59106: PUSH
59107: LD_INT 1
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 1
59117: NEG
59118: PUSH
59119: LD_INT 2
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 0
59129: PUSH
59130: LD_INT 2
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 1
59140: PUSH
59141: LD_INT 1
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 2
59151: PUSH
59152: LD_INT 1
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 2
59161: PUSH
59162: LD_INT 2
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 1
59171: PUSH
59172: LD_INT 2
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: LD_INT 2
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 1
59191: NEG
59192: PUSH
59193: LD_INT 1
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 2
59202: NEG
59203: PUSH
59204: LD_INT 1
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 2
59214: NEG
59215: PUSH
59216: LD_INT 2
59218: NEG
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 2
59226: NEG
59227: PUSH
59228: LD_INT 3
59230: NEG
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 1
59238: NEG
59239: PUSH
59240: LD_INT 3
59242: NEG
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 0
59250: PUSH
59251: LD_INT 3
59253: NEG
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 1
59261: PUSH
59262: LD_INT 2
59264: NEG
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 3
59272: PUSH
59273: LD_INT 2
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 3
59282: PUSH
59283: LD_INT 3
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 2
59292: PUSH
59293: LD_INT 3
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 1
59302: PUSH
59303: LD_INT 3
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: LD_INT 3
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: LD_INT 2
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 3
59333: NEG
59334: PUSH
59335: LD_INT 2
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 3
59345: NEG
59346: PUSH
59347: LD_INT 3
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59386: LD_ADDR_VAR 0 46
59390: PUSH
59391: LD_INT 0
59393: PUSH
59394: LD_INT 0
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: LD_INT 1
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 1
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 1
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: LD_INT 1
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 1
59444: NEG
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 1
59455: NEG
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 1
59467: NEG
59468: PUSH
59469: LD_INT 2
59471: NEG
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: LD_INT 2
59482: NEG
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: LD_INT 1
59493: NEG
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 2
59501: PUSH
59502: LD_INT 0
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 2
59511: PUSH
59512: LD_INT 1
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: LD_INT 2
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 0
59531: PUSH
59532: LD_INT 2
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 1
59541: NEG
59542: PUSH
59543: LD_INT 1
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 2
59552: NEG
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 2
59563: NEG
59564: PUSH
59565: LD_INT 1
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 1
59575: NEG
59576: PUSH
59577: LD_INT 3
59579: NEG
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 0
59587: PUSH
59588: LD_INT 3
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: LD_INT 2
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 2
59609: PUSH
59610: LD_INT 1
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 3
59620: PUSH
59621: LD_INT 0
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 3
59630: PUSH
59631: LD_INT 1
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 1
59640: PUSH
59641: LD_INT 3
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: LD_INT 3
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 1
59660: NEG
59661: PUSH
59662: LD_INT 2
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 2
59671: NEG
59672: PUSH
59673: LD_INT 1
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 3
59682: NEG
59683: PUSH
59684: LD_INT 0
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 3
59693: NEG
59694: PUSH
59695: LD_INT 1
59697: NEG
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59734: LD_ADDR_VAR 0 47
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: LD_INT 0
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 0
59751: PUSH
59752: LD_INT 1
59754: NEG
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 1
59762: PUSH
59763: LD_INT 0
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 1
59772: PUSH
59773: LD_INT 1
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: LD_INT 1
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 1
59792: NEG
59793: PUSH
59794: LD_INT 0
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 1
59803: NEG
59804: PUSH
59805: LD_INT 1
59807: NEG
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: LD_INT 2
59819: NEG
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: LD_INT 2
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 1
59838: PUSH
59839: LD_INT 1
59841: NEG
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 2
59849: NEG
59850: PUSH
59851: LD_INT 1
59853: NEG
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 2
59861: NEG
59862: PUSH
59863: LD_INT 2
59865: NEG
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59885: LD_ADDR_VAR 0 48
59889: PUSH
59890: LD_INT 0
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 0
59902: PUSH
59903: LD_INT 1
59905: NEG
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 1
59913: PUSH
59914: LD_INT 0
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 1
59923: PUSH
59924: LD_INT 1
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 0
59933: PUSH
59934: LD_INT 1
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 1
59943: NEG
59944: PUSH
59945: LD_INT 0
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 1
59954: NEG
59955: PUSH
59956: LD_INT 1
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 1
59966: NEG
59967: PUSH
59968: LD_INT 2
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 0
59978: PUSH
59979: LD_INT 2
59981: NEG
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 1
59989: PUSH
59990: LD_INT 1
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 2
60000: PUSH
60001: LD_INT 0
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 2
60010: PUSH
60011: LD_INT 1
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60032: LD_ADDR_VAR 0 49
60036: PUSH
60037: LD_INT 0
60039: PUSH
60040: LD_INT 0
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 0
60049: PUSH
60050: LD_INT 1
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 1
60060: PUSH
60061: LD_INT 0
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 1
60070: PUSH
60071: LD_INT 1
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 0
60080: PUSH
60081: LD_INT 1
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: LD_INT 0
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 1
60101: NEG
60102: PUSH
60103: LD_INT 1
60105: NEG
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 1
60113: PUSH
60114: LD_INT 1
60116: NEG
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 2
60124: PUSH
60125: LD_INT 0
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 2
60134: PUSH
60135: LD_INT 1
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 2
60144: PUSH
60145: LD_INT 2
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 1
60154: PUSH
60155: LD_INT 2
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60176: LD_ADDR_VAR 0 50
60180: PUSH
60181: LD_INT 0
60183: PUSH
60184: LD_INT 0
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 0
60193: PUSH
60194: LD_INT 1
60196: NEG
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 1
60204: PUSH
60205: LD_INT 0
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 1
60214: PUSH
60215: LD_INT 1
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 0
60224: PUSH
60225: LD_INT 1
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 1
60234: NEG
60235: PUSH
60236: LD_INT 0
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 1
60245: NEG
60246: PUSH
60247: LD_INT 1
60249: NEG
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 2
60257: PUSH
60258: LD_INT 1
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 2
60267: PUSH
60268: LD_INT 2
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 1
60277: PUSH
60278: LD_INT 2
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 0
60287: PUSH
60288: LD_INT 2
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 1
60297: NEG
60298: PUSH
60299: LD_INT 1
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60320: LD_ADDR_VAR 0 51
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: LD_INT 0
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 0
60337: PUSH
60338: LD_INT 1
60340: NEG
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 1
60348: PUSH
60349: LD_INT 0
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 1
60358: PUSH
60359: LD_INT 1
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 0
60368: PUSH
60369: LD_INT 1
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: NEG
60379: PUSH
60380: LD_INT 0
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 1
60389: NEG
60390: PUSH
60391: LD_INT 1
60393: NEG
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 1
60401: PUSH
60402: LD_INT 2
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 0
60411: PUSH
60412: LD_INT 2
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 1
60421: NEG
60422: PUSH
60423: LD_INT 1
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 2
60432: NEG
60433: PUSH
60434: LD_INT 0
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 2
60443: NEG
60444: PUSH
60445: LD_INT 1
60447: NEG
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60467: LD_ADDR_VAR 0 52
60471: PUSH
60472: LD_INT 0
60474: PUSH
60475: LD_INT 0
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 0
60484: PUSH
60485: LD_INT 1
60487: NEG
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 1
60495: PUSH
60496: LD_INT 0
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 1
60505: PUSH
60506: LD_INT 1
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: LD_INT 1
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 1
60525: NEG
60526: PUSH
60527: LD_INT 0
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 1
60536: NEG
60537: PUSH
60538: LD_INT 1
60540: NEG
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 1
60548: NEG
60549: PUSH
60550: LD_INT 2
60552: NEG
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 1
60560: NEG
60561: PUSH
60562: LD_INT 1
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 2
60571: NEG
60572: PUSH
60573: LD_INT 0
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 2
60582: NEG
60583: PUSH
60584: LD_INT 1
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 2
60594: NEG
60595: PUSH
60596: LD_INT 2
60598: NEG
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60618: LD_ADDR_VAR 0 53
60622: PUSH
60623: LD_INT 0
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 0
60635: PUSH
60636: LD_INT 1
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 1
60646: PUSH
60647: LD_INT 0
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 1
60656: PUSH
60657: LD_INT 1
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 1
60676: NEG
60677: PUSH
60678: LD_INT 0
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: NEG
60688: PUSH
60689: LD_INT 1
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 1
60699: NEG
60700: PUSH
60701: LD_INT 2
60703: NEG
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 0
60711: PUSH
60712: LD_INT 2
60714: NEG
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 1
60722: PUSH
60723: LD_INT 1
60725: NEG
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 2
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 2
60743: PUSH
60744: LD_INT 1
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 2
60753: PUSH
60754: LD_INT 2
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 1
60763: PUSH
60764: LD_INT 2
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 0
60773: PUSH
60774: LD_INT 2
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 1
60783: NEG
60784: PUSH
60785: LD_INT 1
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 2
60794: NEG
60795: PUSH
60796: LD_INT 0
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 2
60805: NEG
60806: PUSH
60807: LD_INT 1
60809: NEG
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 2
60817: NEG
60818: PUSH
60819: LD_INT 2
60821: NEG
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60848: LD_ADDR_VAR 0 54
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 0
60865: PUSH
60866: LD_INT 1
60868: NEG
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 1
60876: PUSH
60877: LD_INT 0
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 1
60886: PUSH
60887: LD_INT 1
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 0
60896: PUSH
60897: LD_INT 1
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 1
60906: NEG
60907: PUSH
60908: LD_INT 0
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 1
60917: NEG
60918: PUSH
60919: LD_INT 1
60921: NEG
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 1
60929: NEG
60930: PUSH
60931: LD_INT 2
60933: NEG
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 0
60941: PUSH
60942: LD_INT 2
60944: NEG
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 1
60952: PUSH
60953: LD_INT 1
60955: NEG
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 2
60963: PUSH
60964: LD_INT 0
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 2
60973: PUSH
60974: LD_INT 1
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 2
60983: PUSH
60984: LD_INT 2
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 1
60993: PUSH
60994: LD_INT 2
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 0
61003: PUSH
61004: LD_INT 2
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 1
61013: NEG
61014: PUSH
61015: LD_INT 1
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 2
61024: NEG
61025: PUSH
61026: LD_INT 0
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 2
61035: NEG
61036: PUSH
61037: LD_INT 1
61039: NEG
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 2
61047: NEG
61048: PUSH
61049: LD_INT 2
61051: NEG
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61078: LD_ADDR_VAR 0 55
61082: PUSH
61083: LD_INT 0
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 0
61095: PUSH
61096: LD_INT 1
61098: NEG
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 1
61106: PUSH
61107: LD_INT 0
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 1
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 0
61126: PUSH
61127: LD_INT 1
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 1
61136: NEG
61137: PUSH
61138: LD_INT 0
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 1
61147: NEG
61148: PUSH
61149: LD_INT 1
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: LD_INT 2
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 0
61171: PUSH
61172: LD_INT 2
61174: NEG
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 1
61182: PUSH
61183: LD_INT 1
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 2
61193: PUSH
61194: LD_INT 0
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 2
61203: PUSH
61204: LD_INT 1
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 2
61213: PUSH
61214: LD_INT 2
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 1
61223: PUSH
61224: LD_INT 2
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 0
61233: PUSH
61234: LD_INT 2
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 1
61243: NEG
61244: PUSH
61245: LD_INT 1
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 2
61254: NEG
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 2
61265: NEG
61266: PUSH
61267: LD_INT 1
61269: NEG
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 2
61277: NEG
61278: PUSH
61279: LD_INT 2
61281: NEG
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61308: LD_ADDR_VAR 0 56
61312: PUSH
61313: LD_INT 0
61315: PUSH
61316: LD_INT 0
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 0
61325: PUSH
61326: LD_INT 1
61328: NEG
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: LD_INT 0
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 1
61346: PUSH
61347: LD_INT 1
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 0
61356: PUSH
61357: LD_INT 1
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 1
61366: NEG
61367: PUSH
61368: LD_INT 0
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 1
61377: NEG
61378: PUSH
61379: LD_INT 1
61381: NEG
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 1
61389: NEG
61390: PUSH
61391: LD_INT 2
61393: NEG
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 0
61401: PUSH
61402: LD_INT 2
61404: NEG
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 1
61412: PUSH
61413: LD_INT 1
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 2
61423: PUSH
61424: LD_INT 0
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 2
61433: PUSH
61434: LD_INT 1
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 2
61443: PUSH
61444: LD_INT 2
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 1
61453: PUSH
61454: LD_INT 2
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 0
61463: PUSH
61464: LD_INT 2
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 1
61473: NEG
61474: PUSH
61475: LD_INT 1
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 2
61484: NEG
61485: PUSH
61486: LD_INT 0
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 2
61495: NEG
61496: PUSH
61497: LD_INT 1
61499: NEG
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 2
61507: NEG
61508: PUSH
61509: LD_INT 2
61511: NEG
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61538: LD_ADDR_VAR 0 57
61542: PUSH
61543: LD_INT 0
61545: PUSH
61546: LD_INT 0
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 0
61555: PUSH
61556: LD_INT 1
61558: NEG
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 1
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 1
61576: PUSH
61577: LD_INT 1
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: LD_INT 1
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: LD_INT 0
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 1
61607: NEG
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 1
61619: NEG
61620: PUSH
61621: LD_INT 2
61623: NEG
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 0
61631: PUSH
61632: LD_INT 2
61634: NEG
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 1
61642: PUSH
61643: LD_INT 1
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 2
61653: PUSH
61654: LD_INT 0
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 2
61663: PUSH
61664: LD_INT 1
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 2
61673: PUSH
61674: LD_INT 2
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 1
61683: PUSH
61684: LD_INT 2
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 0
61693: PUSH
61694: LD_INT 2
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 1
61703: NEG
61704: PUSH
61705: LD_INT 1
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 2
61714: NEG
61715: PUSH
61716: LD_INT 0
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 2
61725: NEG
61726: PUSH
61727: LD_INT 1
61729: NEG
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 2
61737: NEG
61738: PUSH
61739: LD_INT 2
61741: NEG
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61768: LD_ADDR_VAR 0 58
61772: PUSH
61773: LD_INT 0
61775: PUSH
61776: LD_INT 0
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 0
61785: PUSH
61786: LD_INT 1
61788: NEG
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 1
61796: PUSH
61797: LD_INT 0
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 1
61806: PUSH
61807: LD_INT 1
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 0
61816: PUSH
61817: LD_INT 1
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 1
61826: NEG
61827: PUSH
61828: LD_INT 0
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 1
61837: NEG
61838: PUSH
61839: LD_INT 1
61841: NEG
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 1
61849: NEG
61850: PUSH
61851: LD_INT 2
61853: NEG
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 0
61861: PUSH
61862: LD_INT 2
61864: NEG
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 1
61872: PUSH
61873: LD_INT 1
61875: NEG
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 2
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 2
61893: PUSH
61894: LD_INT 1
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 2
61903: PUSH
61904: LD_INT 2
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 1
61913: PUSH
61914: LD_INT 2
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 0
61923: PUSH
61924: LD_INT 2
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 1
61933: NEG
61934: PUSH
61935: LD_INT 1
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 2
61944: NEG
61945: PUSH
61946: LD_INT 0
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 2
61955: NEG
61956: PUSH
61957: LD_INT 1
61959: NEG
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 2
61967: NEG
61968: PUSH
61969: LD_INT 2
61971: NEG
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61998: LD_ADDR_VAR 0 59
62002: PUSH
62003: LD_INT 0
62005: PUSH
62006: LD_INT 0
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 0
62015: PUSH
62016: LD_INT 1
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 1
62026: PUSH
62027: LD_INT 0
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 1
62036: PUSH
62037: LD_INT 1
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 0
62046: PUSH
62047: LD_INT 1
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 1
62056: NEG
62057: PUSH
62058: LD_INT 0
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 1
62067: NEG
62068: PUSH
62069: LD_INT 1
62071: NEG
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62086: LD_ADDR_VAR 0 60
62090: PUSH
62091: LD_INT 0
62093: PUSH
62094: LD_INT 0
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 0
62103: PUSH
62104: LD_INT 1
62106: NEG
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 1
62114: PUSH
62115: LD_INT 0
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 1
62124: PUSH
62125: LD_INT 1
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 0
62134: PUSH
62135: LD_INT 1
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 1
62144: NEG
62145: PUSH
62146: LD_INT 0
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 1
62155: NEG
62156: PUSH
62157: LD_INT 1
62159: NEG
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62174: LD_ADDR_VAR 0 61
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: LD_INT 0
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 0
62191: PUSH
62192: LD_INT 1
62194: NEG
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 1
62202: PUSH
62203: LD_INT 0
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 1
62212: PUSH
62213: LD_INT 1
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 0
62222: PUSH
62223: LD_INT 1
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 1
62232: NEG
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 1
62243: NEG
62244: PUSH
62245: LD_INT 1
62247: NEG
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62262: LD_ADDR_VAR 0 62
62266: PUSH
62267: LD_INT 0
62269: PUSH
62270: LD_INT 0
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 0
62279: PUSH
62280: LD_INT 1
62282: NEG
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 1
62290: PUSH
62291: LD_INT 0
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 1
62300: PUSH
62301: LD_INT 1
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 0
62310: PUSH
62311: LD_INT 1
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 1
62320: NEG
62321: PUSH
62322: LD_INT 0
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 1
62331: NEG
62332: PUSH
62333: LD_INT 1
62335: NEG
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62350: LD_ADDR_VAR 0 63
62354: PUSH
62355: LD_INT 0
62357: PUSH
62358: LD_INT 0
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 0
62367: PUSH
62368: LD_INT 1
62370: NEG
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 1
62378: PUSH
62379: LD_INT 0
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 1
62388: PUSH
62389: LD_INT 1
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 0
62398: PUSH
62399: LD_INT 1
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 1
62408: NEG
62409: PUSH
62410: LD_INT 0
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 1
62419: NEG
62420: PUSH
62421: LD_INT 1
62423: NEG
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62438: LD_ADDR_VAR 0 64
62442: PUSH
62443: LD_INT 0
62445: PUSH
62446: LD_INT 0
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 0
62455: PUSH
62456: LD_INT 1
62458: NEG
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 1
62466: PUSH
62467: LD_INT 0
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 1
62476: PUSH
62477: LD_INT 1
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 0
62486: PUSH
62487: LD_INT 1
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 1
62496: NEG
62497: PUSH
62498: LD_INT 0
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 1
62507: NEG
62508: PUSH
62509: LD_INT 1
62511: NEG
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: ST_TO_ADDR
// end ; 1 :
62526: GO 68423
62528: LD_INT 1
62530: DOUBLE
62531: EQUAL
62532: IFTRUE 62536
62534: GO 65159
62536: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62537: LD_ADDR_VAR 0 11
62541: PUSH
62542: LD_INT 1
62544: NEG
62545: PUSH
62546: LD_INT 3
62548: NEG
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 0
62556: PUSH
62557: LD_INT 3
62559: NEG
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 1
62567: PUSH
62568: LD_INT 2
62570: NEG
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: LIST
62580: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62581: LD_ADDR_VAR 0 12
62585: PUSH
62586: LD_INT 2
62588: PUSH
62589: LD_INT 1
62591: NEG
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 3
62599: PUSH
62600: LD_INT 0
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 3
62609: PUSH
62610: LD_INT 1
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: LIST
62621: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62622: LD_ADDR_VAR 0 13
62626: PUSH
62627: LD_INT 3
62629: PUSH
62630: LD_INT 2
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 3
62639: PUSH
62640: LD_INT 3
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 2
62649: PUSH
62650: LD_INT 3
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: LIST
62661: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62662: LD_ADDR_VAR 0 14
62666: PUSH
62667: LD_INT 1
62669: PUSH
62670: LD_INT 3
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: LD_INT 3
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 1
62689: NEG
62690: PUSH
62691: LD_INT 2
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: LIST
62702: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62703: LD_ADDR_VAR 0 15
62707: PUSH
62708: LD_INT 2
62710: NEG
62711: PUSH
62712: LD_INT 1
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 3
62721: NEG
62722: PUSH
62723: LD_INT 0
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 3
62732: NEG
62733: PUSH
62734: LD_INT 1
62736: NEG
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: LIST
62746: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62747: LD_ADDR_VAR 0 16
62751: PUSH
62752: LD_INT 2
62754: NEG
62755: PUSH
62756: LD_INT 3
62758: NEG
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 3
62766: NEG
62767: PUSH
62768: LD_INT 2
62770: NEG
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 3
62778: NEG
62779: PUSH
62780: LD_INT 3
62782: NEG
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: LIST
62792: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62793: LD_ADDR_VAR 0 17
62797: PUSH
62798: LD_INT 1
62800: NEG
62801: PUSH
62802: LD_INT 3
62804: NEG
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 0
62812: PUSH
62813: LD_INT 3
62815: NEG
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 1
62823: PUSH
62824: LD_INT 2
62826: NEG
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: LIST
62836: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62837: LD_ADDR_VAR 0 18
62841: PUSH
62842: LD_INT 2
62844: PUSH
62845: LD_INT 1
62847: NEG
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 3
62855: PUSH
62856: LD_INT 0
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 3
62865: PUSH
62866: LD_INT 1
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: LIST
62877: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62878: LD_ADDR_VAR 0 19
62882: PUSH
62883: LD_INT 3
62885: PUSH
62886: LD_INT 2
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 3
62895: PUSH
62896: LD_INT 3
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 2
62905: PUSH
62906: LD_INT 3
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: LIST
62917: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62918: LD_ADDR_VAR 0 20
62922: PUSH
62923: LD_INT 1
62925: PUSH
62926: LD_INT 3
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 0
62935: PUSH
62936: LD_INT 3
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 1
62945: NEG
62946: PUSH
62947: LD_INT 2
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: LIST
62958: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62959: LD_ADDR_VAR 0 21
62963: PUSH
62964: LD_INT 2
62966: NEG
62967: PUSH
62968: LD_INT 1
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 3
62977: NEG
62978: PUSH
62979: LD_INT 0
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 3
62988: NEG
62989: PUSH
62990: LD_INT 1
62992: NEG
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: LIST
63002: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63003: LD_ADDR_VAR 0 22
63007: PUSH
63008: LD_INT 2
63010: NEG
63011: PUSH
63012: LD_INT 3
63014: NEG
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 3
63022: NEG
63023: PUSH
63024: LD_INT 2
63026: NEG
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 3
63034: NEG
63035: PUSH
63036: LD_INT 3
63038: NEG
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: LIST
63048: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63049: LD_ADDR_VAR 0 23
63053: PUSH
63054: LD_INT 0
63056: PUSH
63057: LD_INT 3
63059: NEG
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 1
63067: NEG
63068: PUSH
63069: LD_INT 4
63071: NEG
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 1
63079: PUSH
63080: LD_INT 3
63082: NEG
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: LIST
63092: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63093: LD_ADDR_VAR 0 24
63097: PUSH
63098: LD_INT 3
63100: PUSH
63101: LD_INT 0
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 3
63110: PUSH
63111: LD_INT 1
63113: NEG
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 4
63121: PUSH
63122: LD_INT 1
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: LIST
63133: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63134: LD_ADDR_VAR 0 25
63138: PUSH
63139: LD_INT 3
63141: PUSH
63142: LD_INT 3
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 4
63151: PUSH
63152: LD_INT 3
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 3
63161: PUSH
63162: LD_INT 4
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: LIST
63173: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63174: LD_ADDR_VAR 0 26
63178: PUSH
63179: LD_INT 0
63181: PUSH
63182: LD_INT 3
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 1
63191: PUSH
63192: LD_INT 4
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 1
63201: NEG
63202: PUSH
63203: LD_INT 3
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: LIST
63214: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63215: LD_ADDR_VAR 0 27
63219: PUSH
63220: LD_INT 3
63222: NEG
63223: PUSH
63224: LD_INT 0
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 3
63233: NEG
63234: PUSH
63235: LD_INT 1
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 4
63244: NEG
63245: PUSH
63246: LD_INT 1
63248: NEG
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: LIST
63258: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63259: LD_ADDR_VAR 0 28
63263: PUSH
63264: LD_INT 3
63266: NEG
63267: PUSH
63268: LD_INT 3
63270: NEG
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 3
63278: NEG
63279: PUSH
63280: LD_INT 4
63282: NEG
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 4
63290: NEG
63291: PUSH
63292: LD_INT 3
63294: NEG
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: LIST
63304: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63305: LD_ADDR_VAR 0 29
63309: PUSH
63310: LD_INT 1
63312: NEG
63313: PUSH
63314: LD_INT 3
63316: NEG
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 0
63324: PUSH
63325: LD_INT 3
63327: NEG
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 1
63335: PUSH
63336: LD_INT 2
63338: NEG
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 1
63346: NEG
63347: PUSH
63348: LD_INT 4
63350: NEG
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 0
63358: PUSH
63359: LD_INT 4
63361: NEG
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 1
63369: PUSH
63370: LD_INT 3
63372: NEG
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 1
63380: NEG
63381: PUSH
63382: LD_INT 5
63384: NEG
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 0
63392: PUSH
63393: LD_INT 5
63395: NEG
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 1
63403: PUSH
63404: LD_INT 4
63406: NEG
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 1
63414: NEG
63415: PUSH
63416: LD_INT 6
63418: NEG
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 0
63426: PUSH
63427: LD_INT 6
63429: NEG
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 1
63437: PUSH
63438: LD_INT 5
63440: NEG
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63460: LD_ADDR_VAR 0 30
63464: PUSH
63465: LD_INT 2
63467: PUSH
63468: LD_INT 1
63470: NEG
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 3
63478: PUSH
63479: LD_INT 0
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 3
63488: PUSH
63489: LD_INT 1
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 3
63498: PUSH
63499: LD_INT 1
63501: NEG
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 4
63509: PUSH
63510: LD_INT 0
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 4
63519: PUSH
63520: LD_INT 1
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 4
63529: PUSH
63530: LD_INT 1
63532: NEG
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 5
63540: PUSH
63541: LD_INT 0
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 5
63550: PUSH
63551: LD_INT 1
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 5
63560: PUSH
63561: LD_INT 1
63563: NEG
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 6
63571: PUSH
63572: LD_INT 0
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 6
63581: PUSH
63582: LD_INT 1
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63603: LD_ADDR_VAR 0 31
63607: PUSH
63608: LD_INT 3
63610: PUSH
63611: LD_INT 2
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 3
63620: PUSH
63621: LD_INT 3
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 2
63630: PUSH
63631: LD_INT 3
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 4
63640: PUSH
63641: LD_INT 3
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 4
63650: PUSH
63651: LD_INT 4
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 3
63660: PUSH
63661: LD_INT 4
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 5
63670: PUSH
63671: LD_INT 4
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 5
63680: PUSH
63681: LD_INT 5
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 4
63690: PUSH
63691: LD_INT 5
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 6
63700: PUSH
63701: LD_INT 5
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 6
63710: PUSH
63711: LD_INT 6
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 5
63720: PUSH
63721: LD_INT 6
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63742: LD_ADDR_VAR 0 32
63746: PUSH
63747: LD_INT 1
63749: PUSH
63750: LD_INT 3
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 0
63759: PUSH
63760: LD_INT 3
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 1
63769: NEG
63770: PUSH
63771: LD_INT 2
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 1
63780: PUSH
63781: LD_INT 4
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 0
63790: PUSH
63791: LD_INT 4
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 1
63800: NEG
63801: PUSH
63802: LD_INT 3
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 1
63811: PUSH
63812: LD_INT 5
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 0
63821: PUSH
63822: LD_INT 5
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 1
63831: NEG
63832: PUSH
63833: LD_INT 4
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 1
63842: PUSH
63843: LD_INT 6
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 0
63852: PUSH
63853: LD_INT 6
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 1
63862: NEG
63863: PUSH
63864: LD_INT 5
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63885: LD_ADDR_VAR 0 33
63889: PUSH
63890: LD_INT 2
63892: NEG
63893: PUSH
63894: LD_INT 1
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 3
63903: NEG
63904: PUSH
63905: LD_INT 0
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 3
63914: NEG
63915: PUSH
63916: LD_INT 1
63918: NEG
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 3
63926: NEG
63927: PUSH
63928: LD_INT 1
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 4
63937: NEG
63938: PUSH
63939: LD_INT 0
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 4
63948: NEG
63949: PUSH
63950: LD_INT 1
63952: NEG
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 4
63960: NEG
63961: PUSH
63962: LD_INT 1
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 5
63971: NEG
63972: PUSH
63973: LD_INT 0
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 5
63982: NEG
63983: PUSH
63984: LD_INT 1
63986: NEG
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 5
63994: NEG
63995: PUSH
63996: LD_INT 1
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 6
64005: NEG
64006: PUSH
64007: LD_INT 0
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 6
64016: NEG
64017: PUSH
64018: LD_INT 1
64020: NEG
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64040: LD_ADDR_VAR 0 34
64044: PUSH
64045: LD_INT 2
64047: NEG
64048: PUSH
64049: LD_INT 3
64051: NEG
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 3
64059: NEG
64060: PUSH
64061: LD_INT 2
64063: NEG
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 3
64071: NEG
64072: PUSH
64073: LD_INT 3
64075: NEG
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 3
64083: NEG
64084: PUSH
64085: LD_INT 4
64087: NEG
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 4
64095: NEG
64096: PUSH
64097: LD_INT 3
64099: NEG
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 4
64107: NEG
64108: PUSH
64109: LD_INT 4
64111: NEG
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 4
64119: NEG
64120: PUSH
64121: LD_INT 5
64123: NEG
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 5
64131: NEG
64132: PUSH
64133: LD_INT 4
64135: NEG
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 5
64143: NEG
64144: PUSH
64145: LD_INT 5
64147: NEG
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 5
64155: NEG
64156: PUSH
64157: LD_INT 6
64159: NEG
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 6
64167: NEG
64168: PUSH
64169: LD_INT 5
64171: NEG
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 6
64179: NEG
64180: PUSH
64181: LD_INT 6
64183: NEG
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64203: LD_ADDR_VAR 0 41
64207: PUSH
64208: LD_INT 0
64210: PUSH
64211: LD_INT 2
64213: NEG
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 1
64221: NEG
64222: PUSH
64223: LD_INT 3
64225: NEG
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 1
64233: PUSH
64234: LD_INT 2
64236: NEG
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: LIST
64246: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64247: LD_ADDR_VAR 0 42
64251: PUSH
64252: LD_INT 2
64254: PUSH
64255: LD_INT 0
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 2
64264: PUSH
64265: LD_INT 1
64267: NEG
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_INT 3
64275: PUSH
64276: LD_INT 1
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: LIST
64287: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64288: LD_ADDR_VAR 0 43
64292: PUSH
64293: LD_INT 2
64295: PUSH
64296: LD_INT 2
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 3
64305: PUSH
64306: LD_INT 2
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 2
64315: PUSH
64316: LD_INT 3
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: LIST
64327: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64328: LD_ADDR_VAR 0 44
64332: PUSH
64333: LD_INT 0
64335: PUSH
64336: LD_INT 2
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 1
64345: PUSH
64346: LD_INT 3
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 1
64355: NEG
64356: PUSH
64357: LD_INT 2
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: LIST
64368: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64369: LD_ADDR_VAR 0 45
64373: PUSH
64374: LD_INT 2
64376: NEG
64377: PUSH
64378: LD_INT 0
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 2
64387: NEG
64388: PUSH
64389: LD_INT 1
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 3
64398: NEG
64399: PUSH
64400: LD_INT 1
64402: NEG
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: LIST
64412: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64413: LD_ADDR_VAR 0 46
64417: PUSH
64418: LD_INT 2
64420: NEG
64421: PUSH
64422: LD_INT 2
64424: NEG
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 2
64432: NEG
64433: PUSH
64434: LD_INT 3
64436: NEG
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 3
64444: NEG
64445: PUSH
64446: LD_INT 2
64448: NEG
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: LIST
64458: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64459: LD_ADDR_VAR 0 47
64463: PUSH
64464: LD_INT 2
64466: NEG
64467: PUSH
64468: LD_INT 3
64470: NEG
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 1
64478: NEG
64479: PUSH
64480: LD_INT 3
64482: NEG
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64492: LD_ADDR_VAR 0 48
64496: PUSH
64497: LD_INT 1
64499: PUSH
64500: LD_INT 2
64502: NEG
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 2
64510: PUSH
64511: LD_INT 1
64513: NEG
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64523: LD_ADDR_VAR 0 49
64527: PUSH
64528: LD_INT 3
64530: PUSH
64531: LD_INT 1
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 3
64540: PUSH
64541: LD_INT 2
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64552: LD_ADDR_VAR 0 50
64556: PUSH
64557: LD_INT 2
64559: PUSH
64560: LD_INT 3
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 1
64569: PUSH
64570: LD_INT 3
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64581: LD_ADDR_VAR 0 51
64585: PUSH
64586: LD_INT 1
64588: NEG
64589: PUSH
64590: LD_INT 2
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 2
64599: NEG
64600: PUSH
64601: LD_INT 1
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64612: LD_ADDR_VAR 0 52
64616: PUSH
64617: LD_INT 3
64619: NEG
64620: PUSH
64621: LD_INT 1
64623: NEG
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 3
64631: NEG
64632: PUSH
64633: LD_INT 2
64635: NEG
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64645: LD_ADDR_VAR 0 53
64649: PUSH
64650: LD_INT 1
64652: NEG
64653: PUSH
64654: LD_INT 3
64656: NEG
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 0
64664: PUSH
64665: LD_INT 3
64667: NEG
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: LD_INT 1
64675: PUSH
64676: LD_INT 2
64678: NEG
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: LIST
64688: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64689: LD_ADDR_VAR 0 54
64693: PUSH
64694: LD_INT 2
64696: PUSH
64697: LD_INT 1
64699: NEG
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 3
64707: PUSH
64708: LD_INT 0
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: LD_INT 3
64717: PUSH
64718: LD_INT 1
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: LIST
64729: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64730: LD_ADDR_VAR 0 55
64734: PUSH
64735: LD_INT 3
64737: PUSH
64738: LD_INT 2
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 3
64747: PUSH
64748: LD_INT 3
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 2
64757: PUSH
64758: LD_INT 3
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: LIST
64769: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64770: LD_ADDR_VAR 0 56
64774: PUSH
64775: LD_INT 1
64777: PUSH
64778: LD_INT 3
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 0
64787: PUSH
64788: LD_INT 3
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: LD_INT 1
64797: NEG
64798: PUSH
64799: LD_INT 2
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: LIST
64810: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64811: LD_ADDR_VAR 0 57
64815: PUSH
64816: LD_INT 2
64818: NEG
64819: PUSH
64820: LD_INT 1
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 3
64829: NEG
64830: PUSH
64831: LD_INT 0
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 3
64840: NEG
64841: PUSH
64842: LD_INT 1
64844: NEG
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: LIST
64854: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64855: LD_ADDR_VAR 0 58
64859: PUSH
64860: LD_INT 2
64862: NEG
64863: PUSH
64864: LD_INT 3
64866: NEG
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 3
64874: NEG
64875: PUSH
64876: LD_INT 2
64878: NEG
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 3
64886: NEG
64887: PUSH
64888: LD_INT 3
64890: NEG
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: LIST
64900: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64901: LD_ADDR_VAR 0 59
64905: PUSH
64906: LD_INT 1
64908: NEG
64909: PUSH
64910: LD_INT 2
64912: NEG
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 0
64920: PUSH
64921: LD_INT 2
64923: NEG
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 1
64931: PUSH
64932: LD_INT 1
64934: NEG
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: LIST
64944: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64945: LD_ADDR_VAR 0 60
64949: PUSH
64950: LD_INT 1
64952: PUSH
64953: LD_INT 1
64955: NEG
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 2
64963: PUSH
64964: LD_INT 0
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 2
64973: PUSH
64974: LD_INT 1
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: LIST
64985: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64986: LD_ADDR_VAR 0 61
64990: PUSH
64991: LD_INT 2
64993: PUSH
64994: LD_INT 1
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 2
65003: PUSH
65004: LD_INT 2
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 1
65013: PUSH
65014: LD_INT 2
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: LIST
65025: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65026: LD_ADDR_VAR 0 62
65030: PUSH
65031: LD_INT 1
65033: PUSH
65034: LD_INT 2
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 0
65043: PUSH
65044: LD_INT 2
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 1
65053: NEG
65054: PUSH
65055: LD_INT 1
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: LIST
65066: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65067: LD_ADDR_VAR 0 63
65071: PUSH
65072: LD_INT 1
65074: NEG
65075: PUSH
65076: LD_INT 1
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 2
65085: NEG
65086: PUSH
65087: LD_INT 0
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 2
65096: NEG
65097: PUSH
65098: LD_INT 1
65100: NEG
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: LIST
65110: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65111: LD_ADDR_VAR 0 64
65115: PUSH
65116: LD_INT 1
65118: NEG
65119: PUSH
65120: LD_INT 2
65122: NEG
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 2
65130: NEG
65131: PUSH
65132: LD_INT 1
65134: NEG
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 2
65142: NEG
65143: PUSH
65144: LD_INT 2
65146: NEG
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: LIST
65156: ST_TO_ADDR
// end ; 2 :
65157: GO 68423
65159: LD_INT 2
65161: DOUBLE
65162: EQUAL
65163: IFTRUE 65167
65165: GO 68422
65167: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65168: LD_ADDR_VAR 0 29
65172: PUSH
65173: LD_INT 4
65175: PUSH
65176: LD_INT 0
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 4
65185: PUSH
65186: LD_INT 1
65188: NEG
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 5
65196: PUSH
65197: LD_INT 0
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 5
65206: PUSH
65207: LD_INT 1
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 4
65216: PUSH
65217: LD_INT 1
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 3
65226: PUSH
65227: LD_INT 0
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 3
65236: PUSH
65237: LD_INT 1
65239: NEG
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 3
65247: PUSH
65248: LD_INT 2
65250: NEG
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 5
65258: PUSH
65259: LD_INT 2
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 3
65268: PUSH
65269: LD_INT 3
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 3
65278: PUSH
65279: LD_INT 2
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 4
65288: PUSH
65289: LD_INT 3
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 4
65298: PUSH
65299: LD_INT 4
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 3
65308: PUSH
65309: LD_INT 4
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 2
65318: PUSH
65319: LD_INT 3
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 2
65328: PUSH
65329: LD_INT 2
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 4
65338: PUSH
65339: LD_INT 2
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 2
65348: PUSH
65349: LD_INT 4
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 0
65358: PUSH
65359: LD_INT 4
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 0
65368: PUSH
65369: LD_INT 3
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 1
65378: PUSH
65379: LD_INT 4
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 1
65388: PUSH
65389: LD_INT 5
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 0
65398: PUSH
65399: LD_INT 5
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 1
65408: NEG
65409: PUSH
65410: LD_INT 4
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 1
65419: NEG
65420: PUSH
65421: LD_INT 3
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: LD_INT 2
65430: PUSH
65431: LD_INT 5
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 2
65440: NEG
65441: PUSH
65442: LD_INT 3
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 3
65451: NEG
65452: PUSH
65453: LD_INT 0
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 3
65462: NEG
65463: PUSH
65464: LD_INT 1
65466: NEG
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 2
65474: NEG
65475: PUSH
65476: LD_INT 0
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 2
65485: NEG
65486: PUSH
65487: LD_INT 1
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 3
65496: NEG
65497: PUSH
65498: LD_INT 1
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 4
65507: NEG
65508: PUSH
65509: LD_INT 0
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 4
65518: NEG
65519: PUSH
65520: LD_INT 1
65522: NEG
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 4
65530: NEG
65531: PUSH
65532: LD_INT 2
65534: NEG
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 2
65542: NEG
65543: PUSH
65544: LD_INT 2
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 4
65553: NEG
65554: PUSH
65555: LD_INT 4
65557: NEG
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 4
65565: NEG
65566: PUSH
65567: LD_INT 5
65569: NEG
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 3
65577: NEG
65578: PUSH
65579: LD_INT 4
65581: NEG
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 3
65589: NEG
65590: PUSH
65591: LD_INT 3
65593: NEG
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: PUSH
65599: LD_INT 4
65601: NEG
65602: PUSH
65603: LD_INT 3
65605: NEG
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 5
65613: NEG
65614: PUSH
65615: LD_INT 4
65617: NEG
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 5
65625: NEG
65626: PUSH
65627: LD_INT 5
65629: NEG
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 3
65637: NEG
65638: PUSH
65639: LD_INT 5
65641: NEG
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 5
65649: NEG
65650: PUSH
65651: LD_INT 3
65653: NEG
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65706: LD_ADDR_VAR 0 30
65710: PUSH
65711: LD_INT 4
65713: PUSH
65714: LD_INT 4
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 4
65723: PUSH
65724: LD_INT 3
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 5
65733: PUSH
65734: LD_INT 4
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 5
65743: PUSH
65744: LD_INT 5
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 4
65753: PUSH
65754: LD_INT 5
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 3
65763: PUSH
65764: LD_INT 4
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 3
65773: PUSH
65774: LD_INT 3
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 5
65783: PUSH
65784: LD_INT 3
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 3
65793: PUSH
65794: LD_INT 5
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 0
65803: PUSH
65804: LD_INT 3
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 0
65813: PUSH
65814: LD_INT 2
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 1
65823: PUSH
65824: LD_INT 3
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 1
65833: PUSH
65834: LD_INT 4
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 0
65843: PUSH
65844: LD_INT 4
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 1
65853: NEG
65854: PUSH
65855: LD_INT 3
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 1
65864: NEG
65865: PUSH
65866: LD_INT 2
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 2
65875: PUSH
65876: LD_INT 4
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 2
65885: NEG
65886: PUSH
65887: LD_INT 2
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 4
65896: NEG
65897: PUSH
65898: LD_INT 0
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: PUSH
65905: LD_INT 4
65907: NEG
65908: PUSH
65909: LD_INT 1
65911: NEG
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 3
65919: NEG
65920: PUSH
65921: LD_INT 0
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 3
65930: NEG
65931: PUSH
65932: LD_INT 1
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 4
65941: NEG
65942: PUSH
65943: LD_INT 1
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 5
65952: NEG
65953: PUSH
65954: LD_INT 0
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 5
65963: NEG
65964: PUSH
65965: LD_INT 1
65967: NEG
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 5
65975: NEG
65976: PUSH
65977: LD_INT 2
65979: NEG
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 3
65987: NEG
65988: PUSH
65989: LD_INT 2
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 3
65998: NEG
65999: PUSH
66000: LD_INT 3
66002: NEG
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 3
66010: NEG
66011: PUSH
66012: LD_INT 4
66014: NEG
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 2
66022: NEG
66023: PUSH
66024: LD_INT 3
66026: NEG
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 2
66034: NEG
66035: PUSH
66036: LD_INT 2
66038: NEG
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 3
66046: NEG
66047: PUSH
66048: LD_INT 2
66050: NEG
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 4
66058: NEG
66059: PUSH
66060: LD_INT 3
66062: NEG
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: PUSH
66068: LD_INT 4
66070: NEG
66071: PUSH
66072: LD_INT 4
66074: NEG
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: LD_INT 2
66082: NEG
66083: PUSH
66084: LD_INT 4
66086: NEG
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 4
66094: NEG
66095: PUSH
66096: LD_INT 2
66098: NEG
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 0
66106: PUSH
66107: LD_INT 4
66109: NEG
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 0
66117: PUSH
66118: LD_INT 5
66120: NEG
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: LD_INT 1
66128: PUSH
66129: LD_INT 4
66131: NEG
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 1
66139: PUSH
66140: LD_INT 3
66142: NEG
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 0
66150: PUSH
66151: LD_INT 3
66153: NEG
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: LD_INT 1
66161: NEG
66162: PUSH
66163: LD_INT 4
66165: NEG
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 1
66173: NEG
66174: PUSH
66175: LD_INT 5
66177: NEG
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 2
66185: PUSH
66186: LD_INT 3
66188: NEG
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 2
66196: NEG
66197: PUSH
66198: LD_INT 5
66200: NEG
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66253: LD_ADDR_VAR 0 31
66257: PUSH
66258: LD_INT 0
66260: PUSH
66261: LD_INT 4
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: PUSH
66268: LD_INT 0
66270: PUSH
66271: LD_INT 3
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 1
66280: PUSH
66281: LD_INT 4
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 1
66290: PUSH
66291: LD_INT 5
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: LD_INT 0
66300: PUSH
66301: LD_INT 5
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 1
66310: NEG
66311: PUSH
66312: LD_INT 4
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PUSH
66319: LD_INT 1
66321: NEG
66322: PUSH
66323: LD_INT 3
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 2
66332: PUSH
66333: LD_INT 5
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: LD_INT 2
66342: NEG
66343: PUSH
66344: LD_INT 3
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 3
66353: NEG
66354: PUSH
66355: LD_INT 0
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 3
66364: NEG
66365: PUSH
66366: LD_INT 1
66368: NEG
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 2
66376: NEG
66377: PUSH
66378: LD_INT 0
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 2
66387: NEG
66388: PUSH
66389: LD_INT 1
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 3
66398: NEG
66399: PUSH
66400: LD_INT 1
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 4
66409: NEG
66410: PUSH
66411: LD_INT 0
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_INT 4
66420: NEG
66421: PUSH
66422: LD_INT 1
66424: NEG
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: LD_INT 4
66432: NEG
66433: PUSH
66434: LD_INT 2
66436: NEG
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 2
66444: NEG
66445: PUSH
66446: LD_INT 2
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 4
66455: NEG
66456: PUSH
66457: LD_INT 4
66459: NEG
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 4
66467: NEG
66468: PUSH
66469: LD_INT 5
66471: NEG
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 3
66479: NEG
66480: PUSH
66481: LD_INT 4
66483: NEG
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 3
66491: NEG
66492: PUSH
66493: LD_INT 3
66495: NEG
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 4
66503: NEG
66504: PUSH
66505: LD_INT 3
66507: NEG
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 5
66515: NEG
66516: PUSH
66517: LD_INT 4
66519: NEG
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: LD_INT 5
66527: NEG
66528: PUSH
66529: LD_INT 5
66531: NEG
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 3
66539: NEG
66540: PUSH
66541: LD_INT 5
66543: NEG
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 5
66551: NEG
66552: PUSH
66553: LD_INT 3
66555: NEG
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: LD_INT 0
66563: PUSH
66564: LD_INT 3
66566: NEG
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: LD_INT 0
66574: PUSH
66575: LD_INT 4
66577: NEG
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: PUSH
66583: LD_INT 1
66585: PUSH
66586: LD_INT 3
66588: NEG
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 1
66596: PUSH
66597: LD_INT 2
66599: NEG
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 0
66607: PUSH
66608: LD_INT 2
66610: NEG
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 1
66618: NEG
66619: PUSH
66620: LD_INT 3
66622: NEG
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 1
66630: NEG
66631: PUSH
66632: LD_INT 4
66634: NEG
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 2
66642: PUSH
66643: LD_INT 2
66645: NEG
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 2
66653: NEG
66654: PUSH
66655: LD_INT 4
66657: NEG
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: LD_INT 4
66665: PUSH
66666: LD_INT 0
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 4
66675: PUSH
66676: LD_INT 1
66678: NEG
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 5
66686: PUSH
66687: LD_INT 0
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 5
66696: PUSH
66697: LD_INT 1
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 4
66706: PUSH
66707: LD_INT 1
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 3
66716: PUSH
66717: LD_INT 0
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 3
66726: PUSH
66727: LD_INT 1
66729: NEG
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 3
66737: PUSH
66738: LD_INT 2
66740: NEG
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 5
66748: PUSH
66749: LD_INT 2
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66803: LD_ADDR_VAR 0 32
66807: PUSH
66808: LD_INT 4
66810: NEG
66811: PUSH
66812: LD_INT 0
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 4
66821: NEG
66822: PUSH
66823: LD_INT 1
66825: NEG
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: LD_INT 3
66833: NEG
66834: PUSH
66835: LD_INT 0
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 3
66844: NEG
66845: PUSH
66846: LD_INT 1
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 4
66855: NEG
66856: PUSH
66857: LD_INT 1
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: LD_INT 5
66866: NEG
66867: PUSH
66868: LD_INT 0
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: PUSH
66875: LD_INT 5
66877: NEG
66878: PUSH
66879: LD_INT 1
66881: NEG
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: LD_INT 5
66889: NEG
66890: PUSH
66891: LD_INT 2
66893: NEG
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 3
66901: NEG
66902: PUSH
66903: LD_INT 2
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 3
66912: NEG
66913: PUSH
66914: LD_INT 3
66916: NEG
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 3
66924: NEG
66925: PUSH
66926: LD_INT 4
66928: NEG
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 2
66936: NEG
66937: PUSH
66938: LD_INT 3
66940: NEG
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: LD_INT 2
66948: NEG
66949: PUSH
66950: LD_INT 2
66952: NEG
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 3
66960: NEG
66961: PUSH
66962: LD_INT 2
66964: NEG
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: LD_INT 4
66972: NEG
66973: PUSH
66974: LD_INT 3
66976: NEG
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 4
66984: NEG
66985: PUSH
66986: LD_INT 4
66988: NEG
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: LD_INT 2
66996: NEG
66997: PUSH
66998: LD_INT 4
67000: NEG
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PUSH
67006: LD_INT 4
67008: NEG
67009: PUSH
67010: LD_INT 2
67012: NEG
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 0
67020: PUSH
67021: LD_INT 4
67023: NEG
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 0
67031: PUSH
67032: LD_INT 5
67034: NEG
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 1
67042: PUSH
67043: LD_INT 4
67045: NEG
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 1
67053: PUSH
67054: LD_INT 3
67056: NEG
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 0
67064: PUSH
67065: LD_INT 3
67067: NEG
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 1
67075: NEG
67076: PUSH
67077: LD_INT 4
67079: NEG
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: LD_INT 1
67087: NEG
67088: PUSH
67089: LD_INT 5
67091: NEG
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 2
67099: PUSH
67100: LD_INT 3
67102: NEG
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 2
67110: NEG
67111: PUSH
67112: LD_INT 5
67114: NEG
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 3
67122: PUSH
67123: LD_INT 0
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 3
67132: PUSH
67133: LD_INT 1
67135: NEG
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 4
67143: PUSH
67144: LD_INT 0
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 4
67153: PUSH
67154: LD_INT 1
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: LD_INT 3
67163: PUSH
67164: LD_INT 1
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 2
67173: PUSH
67174: LD_INT 0
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 2
67183: PUSH
67184: LD_INT 1
67186: NEG
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 2
67194: PUSH
67195: LD_INT 2
67197: NEG
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 4
67205: PUSH
67206: LD_INT 2
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 4
67215: PUSH
67216: LD_INT 4
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 4
67225: PUSH
67226: LD_INT 3
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 5
67235: PUSH
67236: LD_INT 4
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 5
67245: PUSH
67246: LD_INT 5
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 4
67255: PUSH
67256: LD_INT 5
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: LD_INT 3
67265: PUSH
67266: LD_INT 4
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 3
67275: PUSH
67276: LD_INT 3
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 5
67285: PUSH
67286: LD_INT 3
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 3
67295: PUSH
67296: LD_INT 5
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67350: LD_ADDR_VAR 0 33
67354: PUSH
67355: LD_INT 4
67357: NEG
67358: PUSH
67359: LD_INT 4
67361: NEG
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 4
67369: NEG
67370: PUSH
67371: LD_INT 5
67373: NEG
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 3
67381: NEG
67382: PUSH
67383: LD_INT 4
67385: NEG
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: LD_INT 3
67393: NEG
67394: PUSH
67395: LD_INT 3
67397: NEG
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 4
67405: NEG
67406: PUSH
67407: LD_INT 3
67409: NEG
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 5
67417: NEG
67418: PUSH
67419: LD_INT 4
67421: NEG
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: LD_INT 5
67429: NEG
67430: PUSH
67431: LD_INT 5
67433: NEG
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 3
67441: NEG
67442: PUSH
67443: LD_INT 5
67445: NEG
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 5
67453: NEG
67454: PUSH
67455: LD_INT 3
67457: NEG
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 0
67465: PUSH
67466: LD_INT 3
67468: NEG
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: LD_INT 0
67476: PUSH
67477: LD_INT 4
67479: NEG
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: LD_INT 1
67487: PUSH
67488: LD_INT 3
67490: NEG
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 1
67498: PUSH
67499: LD_INT 2
67501: NEG
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 0
67509: PUSH
67510: LD_INT 2
67512: NEG
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 1
67520: NEG
67521: PUSH
67522: LD_INT 3
67524: NEG
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 1
67532: NEG
67533: PUSH
67534: LD_INT 4
67536: NEG
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 2
67544: PUSH
67545: LD_INT 2
67547: NEG
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 2
67555: NEG
67556: PUSH
67557: LD_INT 4
67559: NEG
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 4
67567: PUSH
67568: LD_INT 0
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 4
67577: PUSH
67578: LD_INT 1
67580: NEG
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 5
67588: PUSH
67589: LD_INT 0
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 5
67598: PUSH
67599: LD_INT 1
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 4
67608: PUSH
67609: LD_INT 1
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 3
67618: PUSH
67619: LD_INT 0
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 3
67628: PUSH
67629: LD_INT 1
67631: NEG
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 3
67639: PUSH
67640: LD_INT 2
67642: NEG
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 5
67650: PUSH
67651: LD_INT 2
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 3
67660: PUSH
67661: LD_INT 3
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 3
67670: PUSH
67671: LD_INT 2
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 4
67680: PUSH
67681: LD_INT 3
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 4
67690: PUSH
67691: LD_INT 4
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: LD_INT 3
67700: PUSH
67701: LD_INT 4
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: PUSH
67708: LD_INT 2
67710: PUSH
67711: LD_INT 3
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 2
67720: PUSH
67721: LD_INT 2
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: PUSH
67728: LD_INT 4
67730: PUSH
67731: LD_INT 2
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: PUSH
67738: LD_INT 2
67740: PUSH
67741: LD_INT 4
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: PUSH
67748: LD_INT 0
67750: PUSH
67751: LD_INT 4
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: PUSH
67758: LD_INT 0
67760: PUSH
67761: LD_INT 3
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: LD_INT 1
67770: PUSH
67771: LD_INT 4
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: LD_INT 1
67780: PUSH
67781: LD_INT 5
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: PUSH
67788: LD_INT 0
67790: PUSH
67791: LD_INT 5
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 1
67800: NEG
67801: PUSH
67802: LD_INT 4
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 1
67811: NEG
67812: PUSH
67813: LD_INT 3
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: PUSH
67820: LD_INT 2
67822: PUSH
67823: LD_INT 5
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: LD_INT 2
67832: NEG
67833: PUSH
67834: LD_INT 3
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67888: LD_ADDR_VAR 0 34
67892: PUSH
67893: LD_INT 0
67895: PUSH
67896: LD_INT 4
67898: NEG
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 0
67906: PUSH
67907: LD_INT 5
67909: NEG
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: LD_INT 1
67917: PUSH
67918: LD_INT 4
67920: NEG
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: LD_INT 1
67928: PUSH
67929: LD_INT 3
67931: NEG
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: LD_INT 0
67939: PUSH
67940: LD_INT 3
67942: NEG
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: PUSH
67948: LD_INT 1
67950: NEG
67951: PUSH
67952: LD_INT 4
67954: NEG
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 1
67962: NEG
67963: PUSH
67964: LD_INT 5
67966: NEG
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: PUSH
67972: LD_INT 2
67974: PUSH
67975: LD_INT 3
67977: NEG
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: PUSH
67983: LD_INT 2
67985: NEG
67986: PUSH
67987: LD_INT 5
67989: NEG
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: LD_INT 3
67997: PUSH
67998: LD_INT 0
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PUSH
68005: LD_INT 3
68007: PUSH
68008: LD_INT 1
68010: NEG
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: LD_INT 4
68018: PUSH
68019: LD_INT 0
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 4
68028: PUSH
68029: LD_INT 1
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 3
68038: PUSH
68039: LD_INT 1
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 2
68048: PUSH
68049: LD_INT 0
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 2
68058: PUSH
68059: LD_INT 1
68061: NEG
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 2
68069: PUSH
68070: LD_INT 2
68072: NEG
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 4
68080: PUSH
68081: LD_INT 2
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 4
68090: PUSH
68091: LD_INT 4
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 4
68100: PUSH
68101: LD_INT 3
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 5
68110: PUSH
68111: LD_INT 4
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 5
68120: PUSH
68121: LD_INT 5
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 4
68130: PUSH
68131: LD_INT 5
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 3
68140: PUSH
68141: LD_INT 4
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 3
68150: PUSH
68151: LD_INT 3
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: LD_INT 5
68160: PUSH
68161: LD_INT 3
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: LD_INT 3
68170: PUSH
68171: LD_INT 5
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: LD_INT 0
68180: PUSH
68181: LD_INT 3
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: LD_INT 0
68190: PUSH
68191: LD_INT 2
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 1
68200: PUSH
68201: LD_INT 3
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 1
68210: PUSH
68211: LD_INT 4
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: LD_INT 0
68220: PUSH
68221: LD_INT 4
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: LD_INT 1
68230: NEG
68231: PUSH
68232: LD_INT 3
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: LD_INT 1
68241: NEG
68242: PUSH
68243: LD_INT 2
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: LD_INT 2
68252: PUSH
68253: LD_INT 4
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: PUSH
68260: LD_INT 2
68262: NEG
68263: PUSH
68264: LD_INT 2
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: LD_INT 4
68273: NEG
68274: PUSH
68275: LD_INT 0
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 4
68284: NEG
68285: PUSH
68286: LD_INT 1
68288: NEG
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: PUSH
68294: LD_INT 3
68296: NEG
68297: PUSH
68298: LD_INT 0
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 3
68307: NEG
68308: PUSH
68309: LD_INT 1
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: LD_INT 4
68318: NEG
68319: PUSH
68320: LD_INT 1
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: LD_INT 5
68329: NEG
68330: PUSH
68331: LD_INT 0
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: LD_INT 5
68340: NEG
68341: PUSH
68342: LD_INT 1
68344: NEG
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 5
68352: NEG
68353: PUSH
68354: LD_INT 2
68356: NEG
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 3
68364: NEG
68365: PUSH
68366: LD_INT 2
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: ST_TO_ADDR
// end ; end ;
68420: GO 68423
68422: POP
// case btype of b_depot , b_warehouse :
68423: LD_VAR 0 1
68427: PUSH
68428: LD_INT 0
68430: DOUBLE
68431: EQUAL
68432: IFTRUE 68442
68434: LD_INT 1
68436: DOUBLE
68437: EQUAL
68438: IFTRUE 68442
68440: GO 68643
68442: POP
// case nation of nation_american :
68443: LD_VAR 0 5
68447: PUSH
68448: LD_INT 1
68450: DOUBLE
68451: EQUAL
68452: IFTRUE 68456
68454: GO 68512
68456: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68457: LD_ADDR_VAR 0 9
68461: PUSH
68462: LD_VAR 0 11
68466: PUSH
68467: LD_VAR 0 12
68471: PUSH
68472: LD_VAR 0 13
68476: PUSH
68477: LD_VAR 0 14
68481: PUSH
68482: LD_VAR 0 15
68486: PUSH
68487: LD_VAR 0 16
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: PUSH
68500: LD_VAR 0 4
68504: PUSH
68505: LD_INT 1
68507: PLUS
68508: ARRAY
68509: ST_TO_ADDR
68510: GO 68641
68512: LD_INT 2
68514: DOUBLE
68515: EQUAL
68516: IFTRUE 68520
68518: GO 68576
68520: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68521: LD_ADDR_VAR 0 9
68525: PUSH
68526: LD_VAR 0 17
68530: PUSH
68531: LD_VAR 0 18
68535: PUSH
68536: LD_VAR 0 19
68540: PUSH
68541: LD_VAR 0 20
68545: PUSH
68546: LD_VAR 0 21
68550: PUSH
68551: LD_VAR 0 22
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: PUSH
68564: LD_VAR 0 4
68568: PUSH
68569: LD_INT 1
68571: PLUS
68572: ARRAY
68573: ST_TO_ADDR
68574: GO 68641
68576: LD_INT 3
68578: DOUBLE
68579: EQUAL
68580: IFTRUE 68584
68582: GO 68640
68584: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68585: LD_ADDR_VAR 0 9
68589: PUSH
68590: LD_VAR 0 23
68594: PUSH
68595: LD_VAR 0 24
68599: PUSH
68600: LD_VAR 0 25
68604: PUSH
68605: LD_VAR 0 26
68609: PUSH
68610: LD_VAR 0 27
68614: PUSH
68615: LD_VAR 0 28
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: LIST
68624: LIST
68625: LIST
68626: LIST
68627: PUSH
68628: LD_VAR 0 4
68632: PUSH
68633: LD_INT 1
68635: PLUS
68636: ARRAY
68637: ST_TO_ADDR
68638: GO 68641
68640: POP
68641: GO 69196
68643: LD_INT 2
68645: DOUBLE
68646: EQUAL
68647: IFTRUE 68657
68649: LD_INT 3
68651: DOUBLE
68652: EQUAL
68653: IFTRUE 68657
68655: GO 68713
68657: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68658: LD_ADDR_VAR 0 9
68662: PUSH
68663: LD_VAR 0 29
68667: PUSH
68668: LD_VAR 0 30
68672: PUSH
68673: LD_VAR 0 31
68677: PUSH
68678: LD_VAR 0 32
68682: PUSH
68683: LD_VAR 0 33
68687: PUSH
68688: LD_VAR 0 34
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: PUSH
68701: LD_VAR 0 4
68705: PUSH
68706: LD_INT 1
68708: PLUS
68709: ARRAY
68710: ST_TO_ADDR
68711: GO 69196
68713: LD_INT 16
68715: DOUBLE
68716: EQUAL
68717: IFTRUE 68775
68719: LD_INT 17
68721: DOUBLE
68722: EQUAL
68723: IFTRUE 68775
68725: LD_INT 18
68727: DOUBLE
68728: EQUAL
68729: IFTRUE 68775
68731: LD_INT 19
68733: DOUBLE
68734: EQUAL
68735: IFTRUE 68775
68737: LD_INT 22
68739: DOUBLE
68740: EQUAL
68741: IFTRUE 68775
68743: LD_INT 20
68745: DOUBLE
68746: EQUAL
68747: IFTRUE 68775
68749: LD_INT 21
68751: DOUBLE
68752: EQUAL
68753: IFTRUE 68775
68755: LD_INT 23
68757: DOUBLE
68758: EQUAL
68759: IFTRUE 68775
68761: LD_INT 24
68763: DOUBLE
68764: EQUAL
68765: IFTRUE 68775
68767: LD_INT 25
68769: DOUBLE
68770: EQUAL
68771: IFTRUE 68775
68773: GO 68831
68775: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68776: LD_ADDR_VAR 0 9
68780: PUSH
68781: LD_VAR 0 35
68785: PUSH
68786: LD_VAR 0 36
68790: PUSH
68791: LD_VAR 0 37
68795: PUSH
68796: LD_VAR 0 38
68800: PUSH
68801: LD_VAR 0 39
68805: PUSH
68806: LD_VAR 0 40
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: PUSH
68819: LD_VAR 0 4
68823: PUSH
68824: LD_INT 1
68826: PLUS
68827: ARRAY
68828: ST_TO_ADDR
68829: GO 69196
68831: LD_INT 6
68833: DOUBLE
68834: EQUAL
68835: IFTRUE 68887
68837: LD_INT 7
68839: DOUBLE
68840: EQUAL
68841: IFTRUE 68887
68843: LD_INT 8
68845: DOUBLE
68846: EQUAL
68847: IFTRUE 68887
68849: LD_INT 13
68851: DOUBLE
68852: EQUAL
68853: IFTRUE 68887
68855: LD_INT 12
68857: DOUBLE
68858: EQUAL
68859: IFTRUE 68887
68861: LD_INT 15
68863: DOUBLE
68864: EQUAL
68865: IFTRUE 68887
68867: LD_INT 11
68869: DOUBLE
68870: EQUAL
68871: IFTRUE 68887
68873: LD_INT 14
68875: DOUBLE
68876: EQUAL
68877: IFTRUE 68887
68879: LD_INT 10
68881: DOUBLE
68882: EQUAL
68883: IFTRUE 68887
68885: GO 68943
68887: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68888: LD_ADDR_VAR 0 9
68892: PUSH
68893: LD_VAR 0 41
68897: PUSH
68898: LD_VAR 0 42
68902: PUSH
68903: LD_VAR 0 43
68907: PUSH
68908: LD_VAR 0 44
68912: PUSH
68913: LD_VAR 0 45
68917: PUSH
68918: LD_VAR 0 46
68922: PUSH
68923: EMPTY
68924: LIST
68925: LIST
68926: LIST
68927: LIST
68928: LIST
68929: LIST
68930: PUSH
68931: LD_VAR 0 4
68935: PUSH
68936: LD_INT 1
68938: PLUS
68939: ARRAY
68940: ST_TO_ADDR
68941: GO 69196
68943: LD_INT 36
68945: DOUBLE
68946: EQUAL
68947: IFTRUE 68951
68949: GO 69007
68951: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68952: LD_ADDR_VAR 0 9
68956: PUSH
68957: LD_VAR 0 47
68961: PUSH
68962: LD_VAR 0 48
68966: PUSH
68967: LD_VAR 0 49
68971: PUSH
68972: LD_VAR 0 50
68976: PUSH
68977: LD_VAR 0 51
68981: PUSH
68982: LD_VAR 0 52
68986: PUSH
68987: EMPTY
68988: LIST
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: PUSH
68995: LD_VAR 0 4
68999: PUSH
69000: LD_INT 1
69002: PLUS
69003: ARRAY
69004: ST_TO_ADDR
69005: GO 69196
69007: LD_INT 4
69009: DOUBLE
69010: EQUAL
69011: IFTRUE 69033
69013: LD_INT 5
69015: DOUBLE
69016: EQUAL
69017: IFTRUE 69033
69019: LD_INT 34
69021: DOUBLE
69022: EQUAL
69023: IFTRUE 69033
69025: LD_INT 37
69027: DOUBLE
69028: EQUAL
69029: IFTRUE 69033
69031: GO 69089
69033: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69034: LD_ADDR_VAR 0 9
69038: PUSH
69039: LD_VAR 0 53
69043: PUSH
69044: LD_VAR 0 54
69048: PUSH
69049: LD_VAR 0 55
69053: PUSH
69054: LD_VAR 0 56
69058: PUSH
69059: LD_VAR 0 57
69063: PUSH
69064: LD_VAR 0 58
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: LIST
69076: PUSH
69077: LD_VAR 0 4
69081: PUSH
69082: LD_INT 1
69084: PLUS
69085: ARRAY
69086: ST_TO_ADDR
69087: GO 69196
69089: LD_INT 31
69091: DOUBLE
69092: EQUAL
69093: IFTRUE 69139
69095: LD_INT 32
69097: DOUBLE
69098: EQUAL
69099: IFTRUE 69139
69101: LD_INT 33
69103: DOUBLE
69104: EQUAL
69105: IFTRUE 69139
69107: LD_INT 27
69109: DOUBLE
69110: EQUAL
69111: IFTRUE 69139
69113: LD_INT 26
69115: DOUBLE
69116: EQUAL
69117: IFTRUE 69139
69119: LD_INT 28
69121: DOUBLE
69122: EQUAL
69123: IFTRUE 69139
69125: LD_INT 29
69127: DOUBLE
69128: EQUAL
69129: IFTRUE 69139
69131: LD_INT 30
69133: DOUBLE
69134: EQUAL
69135: IFTRUE 69139
69137: GO 69195
69139: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69140: LD_ADDR_VAR 0 9
69144: PUSH
69145: LD_VAR 0 59
69149: PUSH
69150: LD_VAR 0 60
69154: PUSH
69155: LD_VAR 0 61
69159: PUSH
69160: LD_VAR 0 62
69164: PUSH
69165: LD_VAR 0 63
69169: PUSH
69170: LD_VAR 0 64
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: PUSH
69183: LD_VAR 0 4
69187: PUSH
69188: LD_INT 1
69190: PLUS
69191: ARRAY
69192: ST_TO_ADDR
69193: GO 69196
69195: POP
// temp_list2 = [ ] ;
69196: LD_ADDR_VAR 0 10
69200: PUSH
69201: EMPTY
69202: ST_TO_ADDR
// for i in temp_list do
69203: LD_ADDR_VAR 0 8
69207: PUSH
69208: LD_VAR 0 9
69212: PUSH
69213: FOR_IN
69214: IFFALSE 69266
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69216: LD_ADDR_VAR 0 10
69220: PUSH
69221: LD_VAR 0 10
69225: PUSH
69226: LD_VAR 0 8
69230: PUSH
69231: LD_INT 1
69233: ARRAY
69234: PUSH
69235: LD_VAR 0 2
69239: PLUS
69240: PUSH
69241: LD_VAR 0 8
69245: PUSH
69246: LD_INT 2
69248: ARRAY
69249: PUSH
69250: LD_VAR 0 3
69254: PLUS
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: EMPTY
69261: LIST
69262: ADD
69263: ST_TO_ADDR
69264: GO 69213
69266: POP
69267: POP
// result = temp_list2 ;
69268: LD_ADDR_VAR 0 7
69272: PUSH
69273: LD_VAR 0 10
69277: ST_TO_ADDR
// end ;
69278: LD_VAR 0 7
69282: RET
// export function EnemyInRange ( unit , dist ) ; begin
69283: LD_INT 0
69285: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69286: LD_ADDR_VAR 0 3
69290: PUSH
69291: LD_VAR 0 1
69295: PPUSH
69296: CALL_OW 255
69300: PPUSH
69301: LD_VAR 0 1
69305: PPUSH
69306: CALL_OW 250
69310: PPUSH
69311: LD_VAR 0 1
69315: PPUSH
69316: CALL_OW 251
69320: PPUSH
69321: LD_VAR 0 2
69325: PPUSH
69326: CALL 42685 0 4
69330: PUSH
69331: LD_INT 4
69333: ARRAY
69334: ST_TO_ADDR
// end ;
69335: LD_VAR 0 3
69339: RET
// export function PlayerSeeMe ( unit ) ; begin
69340: LD_INT 0
69342: PPUSH
// result := See ( your_side , unit ) ;
69343: LD_ADDR_VAR 0 2
69347: PUSH
69348: LD_OWVAR 2
69352: PPUSH
69353: LD_VAR 0 1
69357: PPUSH
69358: CALL_OW 292
69362: ST_TO_ADDR
// end ;
69363: LD_VAR 0 2
69367: RET
// export function ReverseDir ( unit ) ; begin
69368: LD_INT 0
69370: PPUSH
// if not unit then
69371: LD_VAR 0 1
69375: NOT
69376: IFFALSE 69380
// exit ;
69378: GO 69403
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69380: LD_ADDR_VAR 0 2
69384: PUSH
69385: LD_VAR 0 1
69389: PPUSH
69390: CALL_OW 254
69394: PUSH
69395: LD_INT 3
69397: PLUS
69398: PUSH
69399: LD_INT 6
69401: MOD
69402: ST_TO_ADDR
// end ;
69403: LD_VAR 0 2
69407: RET
// export function ReverseArray ( array ) ; var i ; begin
69408: LD_INT 0
69410: PPUSH
69411: PPUSH
// if not array then
69412: LD_VAR 0 1
69416: NOT
69417: IFFALSE 69421
// exit ;
69419: GO 69476
// result := [ ] ;
69421: LD_ADDR_VAR 0 2
69425: PUSH
69426: EMPTY
69427: ST_TO_ADDR
// for i := array downto 1 do
69428: LD_ADDR_VAR 0 3
69432: PUSH
69433: DOUBLE
69434: LD_VAR 0 1
69438: INC
69439: ST_TO_ADDR
69440: LD_INT 1
69442: PUSH
69443: FOR_DOWNTO
69444: IFFALSE 69474
// result := Join ( result , array [ i ] ) ;
69446: LD_ADDR_VAR 0 2
69450: PUSH
69451: LD_VAR 0 2
69455: PPUSH
69456: LD_VAR 0 1
69460: PUSH
69461: LD_VAR 0 3
69465: ARRAY
69466: PPUSH
69467: CALL 74120 0 2
69471: ST_TO_ADDR
69472: GO 69443
69474: POP
69475: POP
// end ;
69476: LD_VAR 0 2
69480: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
69481: LD_INT 0
69483: PPUSH
69484: PPUSH
69485: PPUSH
69486: PPUSH
69487: PPUSH
69488: PPUSH
// if not unit or not hexes then
69489: LD_VAR 0 1
69493: NOT
69494: PUSH
69495: LD_VAR 0 2
69499: NOT
69500: OR
69501: IFFALSE 69505
// exit ;
69503: GO 69628
// dist := 9999 ;
69505: LD_ADDR_VAR 0 5
69509: PUSH
69510: LD_INT 9999
69512: ST_TO_ADDR
// for i = 1 to hexes do
69513: LD_ADDR_VAR 0 4
69517: PUSH
69518: DOUBLE
69519: LD_INT 1
69521: DEC
69522: ST_TO_ADDR
69523: LD_VAR 0 2
69527: PUSH
69528: FOR_TO
69529: IFFALSE 69616
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69531: LD_ADDR_VAR 0 6
69535: PUSH
69536: LD_VAR 0 1
69540: PPUSH
69541: LD_VAR 0 2
69545: PUSH
69546: LD_VAR 0 4
69550: ARRAY
69551: PUSH
69552: LD_INT 1
69554: ARRAY
69555: PPUSH
69556: LD_VAR 0 2
69560: PUSH
69561: LD_VAR 0 4
69565: ARRAY
69566: PUSH
69567: LD_INT 2
69569: ARRAY
69570: PPUSH
69571: CALL_OW 297
69575: ST_TO_ADDR
// if tdist < dist then
69576: LD_VAR 0 6
69580: PUSH
69581: LD_VAR 0 5
69585: LESS
69586: IFFALSE 69614
// begin hex := hexes [ i ] ;
69588: LD_ADDR_VAR 0 8
69592: PUSH
69593: LD_VAR 0 2
69597: PUSH
69598: LD_VAR 0 4
69602: ARRAY
69603: ST_TO_ADDR
// dist := tdist ;
69604: LD_ADDR_VAR 0 5
69608: PUSH
69609: LD_VAR 0 6
69613: ST_TO_ADDR
// end ; end ;
69614: GO 69528
69616: POP
69617: POP
// result := hex ;
69618: LD_ADDR_VAR 0 3
69622: PUSH
69623: LD_VAR 0 8
69627: ST_TO_ADDR
// end ;
69628: LD_VAR 0 3
69632: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69633: LD_INT 0
69635: PPUSH
69636: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69637: LD_VAR 0 1
69641: NOT
69642: PUSH
69643: LD_VAR 0 1
69647: PUSH
69648: LD_INT 21
69650: PUSH
69651: LD_INT 2
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 23
69660: PUSH
69661: LD_INT 2
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PPUSH
69672: CALL_OW 69
69676: IN
69677: NOT
69678: OR
69679: IFFALSE 69683
// exit ;
69681: GO 69730
// for i = 1 to 3 do
69683: LD_ADDR_VAR 0 3
69687: PUSH
69688: DOUBLE
69689: LD_INT 1
69691: DEC
69692: ST_TO_ADDR
69693: LD_INT 3
69695: PUSH
69696: FOR_TO
69697: IFFALSE 69728
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69699: LD_VAR 0 1
69703: PPUSH
69704: CALL_OW 250
69708: PPUSH
69709: LD_VAR 0 1
69713: PPUSH
69714: CALL_OW 251
69718: PPUSH
69719: LD_INT 1
69721: PPUSH
69722: CALL_OW 453
69726: GO 69696
69728: POP
69729: POP
// end ;
69730: LD_VAR 0 2
69734: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69735: LD_INT 0
69737: PPUSH
69738: PPUSH
69739: PPUSH
69740: PPUSH
69741: PPUSH
69742: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69743: LD_VAR 0 1
69747: NOT
69748: PUSH
69749: LD_VAR 0 2
69753: NOT
69754: OR
69755: PUSH
69756: LD_VAR 0 1
69760: PPUSH
69761: CALL_OW 314
69765: OR
69766: IFFALSE 69770
// exit ;
69768: GO 70237
// if GetLives ( i ) < 250 then
69770: LD_VAR 0 4
69774: PPUSH
69775: CALL_OW 256
69779: PUSH
69780: LD_INT 250
69782: LESS
69783: IFFALSE 69796
// begin ComAutodestruct ( i ) ;
69785: LD_VAR 0 4
69789: PPUSH
69790: CALL 69633 0 1
// exit ;
69794: GO 70237
// end ; x := GetX ( enemy_unit ) ;
69796: LD_ADDR_VAR 0 7
69800: PUSH
69801: LD_VAR 0 2
69805: PPUSH
69806: CALL_OW 250
69810: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69811: LD_ADDR_VAR 0 8
69815: PUSH
69816: LD_VAR 0 2
69820: PPUSH
69821: CALL_OW 251
69825: ST_TO_ADDR
// if not x or not y then
69826: LD_VAR 0 7
69830: NOT
69831: PUSH
69832: LD_VAR 0 8
69836: NOT
69837: OR
69838: IFFALSE 69842
// exit ;
69840: GO 70237
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69842: LD_ADDR_VAR 0 6
69846: PUSH
69847: LD_VAR 0 7
69851: PPUSH
69852: LD_INT 0
69854: PPUSH
69855: LD_INT 4
69857: PPUSH
69858: CALL_OW 272
69862: PUSH
69863: LD_VAR 0 8
69867: PPUSH
69868: LD_INT 0
69870: PPUSH
69871: LD_INT 4
69873: PPUSH
69874: CALL_OW 273
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: LD_VAR 0 7
69887: PPUSH
69888: LD_INT 1
69890: PPUSH
69891: LD_INT 4
69893: PPUSH
69894: CALL_OW 272
69898: PUSH
69899: LD_VAR 0 8
69903: PPUSH
69904: LD_INT 1
69906: PPUSH
69907: LD_INT 4
69909: PPUSH
69910: CALL_OW 273
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: PUSH
69919: LD_VAR 0 7
69923: PPUSH
69924: LD_INT 2
69926: PPUSH
69927: LD_INT 4
69929: PPUSH
69930: CALL_OW 272
69934: PUSH
69935: LD_VAR 0 8
69939: PPUSH
69940: LD_INT 2
69942: PPUSH
69943: LD_INT 4
69945: PPUSH
69946: CALL_OW 273
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: PUSH
69955: LD_VAR 0 7
69959: PPUSH
69960: LD_INT 3
69962: PPUSH
69963: LD_INT 4
69965: PPUSH
69966: CALL_OW 272
69970: PUSH
69971: LD_VAR 0 8
69975: PPUSH
69976: LD_INT 3
69978: PPUSH
69979: LD_INT 4
69981: PPUSH
69982: CALL_OW 273
69986: PUSH
69987: EMPTY
69988: LIST
69989: LIST
69990: PUSH
69991: LD_VAR 0 7
69995: PPUSH
69996: LD_INT 4
69998: PPUSH
69999: LD_INT 4
70001: PPUSH
70002: CALL_OW 272
70006: PUSH
70007: LD_VAR 0 8
70011: PPUSH
70012: LD_INT 4
70014: PPUSH
70015: LD_INT 4
70017: PPUSH
70018: CALL_OW 273
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: LD_VAR 0 7
70031: PPUSH
70032: LD_INT 5
70034: PPUSH
70035: LD_INT 4
70037: PPUSH
70038: CALL_OW 272
70042: PUSH
70043: LD_VAR 0 8
70047: PPUSH
70048: LD_INT 5
70050: PPUSH
70051: LD_INT 4
70053: PPUSH
70054: CALL_OW 273
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: ST_TO_ADDR
// for i = tmp downto 1 do
70071: LD_ADDR_VAR 0 4
70075: PUSH
70076: DOUBLE
70077: LD_VAR 0 6
70081: INC
70082: ST_TO_ADDR
70083: LD_INT 1
70085: PUSH
70086: FOR_DOWNTO
70087: IFFALSE 70188
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70089: LD_VAR 0 6
70093: PUSH
70094: LD_VAR 0 4
70098: ARRAY
70099: PUSH
70100: LD_INT 1
70102: ARRAY
70103: PPUSH
70104: LD_VAR 0 6
70108: PUSH
70109: LD_VAR 0 4
70113: ARRAY
70114: PUSH
70115: LD_INT 2
70117: ARRAY
70118: PPUSH
70119: CALL_OW 488
70123: NOT
70124: PUSH
70125: LD_VAR 0 6
70129: PUSH
70130: LD_VAR 0 4
70134: ARRAY
70135: PUSH
70136: LD_INT 1
70138: ARRAY
70139: PPUSH
70140: LD_VAR 0 6
70144: PUSH
70145: LD_VAR 0 4
70149: ARRAY
70150: PUSH
70151: LD_INT 2
70153: ARRAY
70154: PPUSH
70155: CALL_OW 428
70159: PUSH
70160: LD_INT 0
70162: NONEQUAL
70163: OR
70164: IFFALSE 70186
// tmp := Delete ( tmp , i ) ;
70166: LD_ADDR_VAR 0 6
70170: PUSH
70171: LD_VAR 0 6
70175: PPUSH
70176: LD_VAR 0 4
70180: PPUSH
70181: CALL_OW 3
70185: ST_TO_ADDR
70186: GO 70086
70188: POP
70189: POP
// j := GetClosestHex ( unit , tmp ) ;
70190: LD_ADDR_VAR 0 5
70194: PUSH
70195: LD_VAR 0 1
70199: PPUSH
70200: LD_VAR 0 6
70204: PPUSH
70205: CALL 69481 0 2
70209: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70210: LD_VAR 0 1
70214: PPUSH
70215: LD_VAR 0 5
70219: PUSH
70220: LD_INT 1
70222: ARRAY
70223: PPUSH
70224: LD_VAR 0 5
70228: PUSH
70229: LD_INT 2
70231: ARRAY
70232: PPUSH
70233: CALL_OW 111
// end ;
70237: LD_VAR 0 3
70241: RET
// export function PrepareApemanSoldier ( ) ; begin
70242: LD_INT 0
70244: PPUSH
// uc_nation := 0 ;
70245: LD_ADDR_OWVAR 21
70249: PUSH
70250: LD_INT 0
70252: ST_TO_ADDR
// hc_sex := sex_male ;
70253: LD_ADDR_OWVAR 27
70257: PUSH
70258: LD_INT 1
70260: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
70261: LD_ADDR_OWVAR 28
70265: PUSH
70266: LD_INT 15
70268: ST_TO_ADDR
// hc_gallery :=  ;
70269: LD_ADDR_OWVAR 33
70273: PUSH
70274: LD_STRING 
70276: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70277: LD_ADDR_OWVAR 31
70281: PUSH
70282: LD_INT 0
70284: PPUSH
70285: LD_INT 3
70287: PPUSH
70288: CALL_OW 12
70292: PUSH
70293: LD_INT 0
70295: PPUSH
70296: LD_INT 3
70298: PPUSH
70299: CALL_OW 12
70303: PUSH
70304: LD_INT 0
70306: PUSH
70307: LD_INT 0
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: ST_TO_ADDR
// end ;
70316: LD_VAR 0 1
70320: RET
// export function PrepareApemanEngineer ( ) ; begin
70321: LD_INT 0
70323: PPUSH
// uc_nation := 0 ;
70324: LD_ADDR_OWVAR 21
70328: PUSH
70329: LD_INT 0
70331: ST_TO_ADDR
// hc_sex := sex_male ;
70332: LD_ADDR_OWVAR 27
70336: PUSH
70337: LD_INT 1
70339: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
70340: LD_ADDR_OWVAR 28
70344: PUSH
70345: LD_INT 16
70347: ST_TO_ADDR
// hc_gallery :=  ;
70348: LD_ADDR_OWVAR 33
70352: PUSH
70353: LD_STRING 
70355: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70356: LD_ADDR_OWVAR 31
70360: PUSH
70361: LD_INT 0
70363: PPUSH
70364: LD_INT 3
70366: PPUSH
70367: CALL_OW 12
70371: PUSH
70372: LD_INT 0
70374: PPUSH
70375: LD_INT 3
70377: PPUSH
70378: CALL_OW 12
70382: PUSH
70383: LD_INT 0
70385: PUSH
70386: LD_INT 0
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: LIST
70393: LIST
70394: ST_TO_ADDR
// end ;
70395: LD_VAR 0 1
70399: RET
// export function PrepareApeman ( agressivity ) ; begin
70400: LD_INT 0
70402: PPUSH
// uc_side := 0 ;
70403: LD_ADDR_OWVAR 20
70407: PUSH
70408: LD_INT 0
70410: ST_TO_ADDR
// uc_nation := 0 ;
70411: LD_ADDR_OWVAR 21
70415: PUSH
70416: LD_INT 0
70418: ST_TO_ADDR
// hc_sex := sex_male ;
70419: LD_ADDR_OWVAR 27
70423: PUSH
70424: LD_INT 1
70426: ST_TO_ADDR
// hc_class := class_apeman ;
70427: LD_ADDR_OWVAR 28
70431: PUSH
70432: LD_INT 12
70434: ST_TO_ADDR
// hc_gallery :=  ;
70435: LD_ADDR_OWVAR 33
70439: PUSH
70440: LD_STRING 
70442: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70443: LD_ADDR_OWVAR 35
70447: PUSH
70448: LD_VAR 0 1
70452: NEG
70453: PPUSH
70454: LD_VAR 0 1
70458: PPUSH
70459: CALL_OW 12
70463: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70464: LD_ADDR_OWVAR 31
70468: PUSH
70469: LD_INT 0
70471: PPUSH
70472: LD_INT 3
70474: PPUSH
70475: CALL_OW 12
70479: PUSH
70480: LD_INT 0
70482: PPUSH
70483: LD_INT 3
70485: PPUSH
70486: CALL_OW 12
70490: PUSH
70491: LD_INT 0
70493: PUSH
70494: LD_INT 0
70496: PUSH
70497: EMPTY
70498: LIST
70499: LIST
70500: LIST
70501: LIST
70502: ST_TO_ADDR
// end ;
70503: LD_VAR 0 2
70507: RET
// export function PrepareTiger ( agressivity ) ; begin
70508: LD_INT 0
70510: PPUSH
// uc_side := 0 ;
70511: LD_ADDR_OWVAR 20
70515: PUSH
70516: LD_INT 0
70518: ST_TO_ADDR
// uc_nation := 0 ;
70519: LD_ADDR_OWVAR 21
70523: PUSH
70524: LD_INT 0
70526: ST_TO_ADDR
// hc_class := class_tiger ;
70527: LD_ADDR_OWVAR 28
70531: PUSH
70532: LD_INT 14
70534: ST_TO_ADDR
// hc_gallery :=  ;
70535: LD_ADDR_OWVAR 33
70539: PUSH
70540: LD_STRING 
70542: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70543: LD_ADDR_OWVAR 35
70547: PUSH
70548: LD_VAR 0 1
70552: NEG
70553: PPUSH
70554: LD_VAR 0 1
70558: PPUSH
70559: CALL_OW 12
70563: ST_TO_ADDR
// end ;
70564: LD_VAR 0 2
70568: RET
// export function PrepareEnchidna ( ) ; begin
70569: LD_INT 0
70571: PPUSH
// uc_side := 0 ;
70572: LD_ADDR_OWVAR 20
70576: PUSH
70577: LD_INT 0
70579: ST_TO_ADDR
// uc_nation := 0 ;
70580: LD_ADDR_OWVAR 21
70584: PUSH
70585: LD_INT 0
70587: ST_TO_ADDR
// hc_class := class_baggie ;
70588: LD_ADDR_OWVAR 28
70592: PUSH
70593: LD_INT 13
70595: ST_TO_ADDR
// hc_gallery :=  ;
70596: LD_ADDR_OWVAR 33
70600: PUSH
70601: LD_STRING 
70603: ST_TO_ADDR
// end ;
70604: LD_VAR 0 1
70608: RET
// export function PrepareFrog ( ) ; begin
70609: LD_INT 0
70611: PPUSH
// uc_side := 0 ;
70612: LD_ADDR_OWVAR 20
70616: PUSH
70617: LD_INT 0
70619: ST_TO_ADDR
// uc_nation := 0 ;
70620: LD_ADDR_OWVAR 21
70624: PUSH
70625: LD_INT 0
70627: ST_TO_ADDR
// hc_class := class_frog ;
70628: LD_ADDR_OWVAR 28
70632: PUSH
70633: LD_INT 19
70635: ST_TO_ADDR
// hc_gallery :=  ;
70636: LD_ADDR_OWVAR 33
70640: PUSH
70641: LD_STRING 
70643: ST_TO_ADDR
// end ;
70644: LD_VAR 0 1
70648: RET
// export function PrepareFish ( ) ; begin
70649: LD_INT 0
70651: PPUSH
// uc_side := 0 ;
70652: LD_ADDR_OWVAR 20
70656: PUSH
70657: LD_INT 0
70659: ST_TO_ADDR
// uc_nation := 0 ;
70660: LD_ADDR_OWVAR 21
70664: PUSH
70665: LD_INT 0
70667: ST_TO_ADDR
// hc_class := class_fish ;
70668: LD_ADDR_OWVAR 28
70672: PUSH
70673: LD_INT 20
70675: ST_TO_ADDR
// hc_gallery :=  ;
70676: LD_ADDR_OWVAR 33
70680: PUSH
70681: LD_STRING 
70683: ST_TO_ADDR
// end ;
70684: LD_VAR 0 1
70688: RET
// export function PrepareBird ( ) ; begin
70689: LD_INT 0
70691: PPUSH
// uc_side := 0 ;
70692: LD_ADDR_OWVAR 20
70696: PUSH
70697: LD_INT 0
70699: ST_TO_ADDR
// uc_nation := 0 ;
70700: LD_ADDR_OWVAR 21
70704: PUSH
70705: LD_INT 0
70707: ST_TO_ADDR
// hc_class := class_phororhacos ;
70708: LD_ADDR_OWVAR 28
70712: PUSH
70713: LD_INT 18
70715: ST_TO_ADDR
// hc_gallery :=  ;
70716: LD_ADDR_OWVAR 33
70720: PUSH
70721: LD_STRING 
70723: ST_TO_ADDR
// end ;
70724: LD_VAR 0 1
70728: RET
// export function PrepareHorse ( ) ; begin
70729: LD_INT 0
70731: PPUSH
// uc_side := 0 ;
70732: LD_ADDR_OWVAR 20
70736: PUSH
70737: LD_INT 0
70739: ST_TO_ADDR
// uc_nation := 0 ;
70740: LD_ADDR_OWVAR 21
70744: PUSH
70745: LD_INT 0
70747: ST_TO_ADDR
// hc_class := class_horse ;
70748: LD_ADDR_OWVAR 28
70752: PUSH
70753: LD_INT 21
70755: ST_TO_ADDR
// hc_gallery :=  ;
70756: LD_ADDR_OWVAR 33
70760: PUSH
70761: LD_STRING 
70763: ST_TO_ADDR
// end ;
70764: LD_VAR 0 1
70768: RET
// export function PrepareMastodont ( ) ; begin
70769: LD_INT 0
70771: PPUSH
// uc_side := 0 ;
70772: LD_ADDR_OWVAR 20
70776: PUSH
70777: LD_INT 0
70779: ST_TO_ADDR
// uc_nation := 0 ;
70780: LD_ADDR_OWVAR 21
70784: PUSH
70785: LD_INT 0
70787: ST_TO_ADDR
// vc_chassis := class_mastodont ;
70788: LD_ADDR_OWVAR 37
70792: PUSH
70793: LD_INT 31
70795: ST_TO_ADDR
// vc_control := control_rider ;
70796: LD_ADDR_OWVAR 38
70800: PUSH
70801: LD_INT 4
70803: ST_TO_ADDR
// end ;
70804: LD_VAR 0 1
70808: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70809: LD_INT 0
70811: PPUSH
70812: PPUSH
70813: PPUSH
// uc_side = 0 ;
70814: LD_ADDR_OWVAR 20
70818: PUSH
70819: LD_INT 0
70821: ST_TO_ADDR
// uc_nation = 0 ;
70822: LD_ADDR_OWVAR 21
70826: PUSH
70827: LD_INT 0
70829: ST_TO_ADDR
// InitHc_All ( ) ;
70830: CALL_OW 584
// InitVc ;
70834: CALL_OW 20
// if mastodonts then
70838: LD_VAR 0 6
70842: IFFALSE 70909
// for i = 1 to mastodonts do
70844: LD_ADDR_VAR 0 11
70848: PUSH
70849: DOUBLE
70850: LD_INT 1
70852: DEC
70853: ST_TO_ADDR
70854: LD_VAR 0 6
70858: PUSH
70859: FOR_TO
70860: IFFALSE 70907
// begin vc_chassis := 31 ;
70862: LD_ADDR_OWVAR 37
70866: PUSH
70867: LD_INT 31
70869: ST_TO_ADDR
// vc_control := control_rider ;
70870: LD_ADDR_OWVAR 38
70874: PUSH
70875: LD_INT 4
70877: ST_TO_ADDR
// animal := CreateVehicle ;
70878: LD_ADDR_VAR 0 12
70882: PUSH
70883: CALL_OW 45
70887: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70888: LD_VAR 0 12
70892: PPUSH
70893: LD_VAR 0 8
70897: PPUSH
70898: LD_INT 0
70900: PPUSH
70901: CALL 73037 0 3
// end ;
70905: GO 70859
70907: POP
70908: POP
// if horses then
70909: LD_VAR 0 5
70913: IFFALSE 70980
// for i = 1 to horses do
70915: LD_ADDR_VAR 0 11
70919: PUSH
70920: DOUBLE
70921: LD_INT 1
70923: DEC
70924: ST_TO_ADDR
70925: LD_VAR 0 5
70929: PUSH
70930: FOR_TO
70931: IFFALSE 70978
// begin hc_class := 21 ;
70933: LD_ADDR_OWVAR 28
70937: PUSH
70938: LD_INT 21
70940: ST_TO_ADDR
// hc_gallery :=  ;
70941: LD_ADDR_OWVAR 33
70945: PUSH
70946: LD_STRING 
70948: ST_TO_ADDR
// animal := CreateHuman ;
70949: LD_ADDR_VAR 0 12
70953: PUSH
70954: CALL_OW 44
70958: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70959: LD_VAR 0 12
70963: PPUSH
70964: LD_VAR 0 8
70968: PPUSH
70969: LD_INT 0
70971: PPUSH
70972: CALL 73037 0 3
// end ;
70976: GO 70930
70978: POP
70979: POP
// if birds then
70980: LD_VAR 0 1
70984: IFFALSE 71051
// for i = 1 to birds do
70986: LD_ADDR_VAR 0 11
70990: PUSH
70991: DOUBLE
70992: LD_INT 1
70994: DEC
70995: ST_TO_ADDR
70996: LD_VAR 0 1
71000: PUSH
71001: FOR_TO
71002: IFFALSE 71049
// begin hc_class = 18 ;
71004: LD_ADDR_OWVAR 28
71008: PUSH
71009: LD_INT 18
71011: ST_TO_ADDR
// hc_gallery =  ;
71012: LD_ADDR_OWVAR 33
71016: PUSH
71017: LD_STRING 
71019: ST_TO_ADDR
// animal := CreateHuman ;
71020: LD_ADDR_VAR 0 12
71024: PUSH
71025: CALL_OW 44
71029: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71030: LD_VAR 0 12
71034: PPUSH
71035: LD_VAR 0 8
71039: PPUSH
71040: LD_INT 0
71042: PPUSH
71043: CALL 73037 0 3
// end ;
71047: GO 71001
71049: POP
71050: POP
// if tigers then
71051: LD_VAR 0 2
71055: IFFALSE 71139
// for i = 1 to tigers do
71057: LD_ADDR_VAR 0 11
71061: PUSH
71062: DOUBLE
71063: LD_INT 1
71065: DEC
71066: ST_TO_ADDR
71067: LD_VAR 0 2
71071: PUSH
71072: FOR_TO
71073: IFFALSE 71137
// begin hc_class = class_tiger ;
71075: LD_ADDR_OWVAR 28
71079: PUSH
71080: LD_INT 14
71082: ST_TO_ADDR
// hc_gallery =  ;
71083: LD_ADDR_OWVAR 33
71087: PUSH
71088: LD_STRING 
71090: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71091: LD_ADDR_OWVAR 35
71095: PUSH
71096: LD_INT 7
71098: NEG
71099: PPUSH
71100: LD_INT 7
71102: PPUSH
71103: CALL_OW 12
71107: ST_TO_ADDR
// animal := CreateHuman ;
71108: LD_ADDR_VAR 0 12
71112: PUSH
71113: CALL_OW 44
71117: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71118: LD_VAR 0 12
71122: PPUSH
71123: LD_VAR 0 8
71127: PPUSH
71128: LD_INT 0
71130: PPUSH
71131: CALL 73037 0 3
// end ;
71135: GO 71072
71137: POP
71138: POP
// if apemans then
71139: LD_VAR 0 3
71143: IFFALSE 71266
// for i = 1 to apemans do
71145: LD_ADDR_VAR 0 11
71149: PUSH
71150: DOUBLE
71151: LD_INT 1
71153: DEC
71154: ST_TO_ADDR
71155: LD_VAR 0 3
71159: PUSH
71160: FOR_TO
71161: IFFALSE 71264
// begin hc_class = class_apeman ;
71163: LD_ADDR_OWVAR 28
71167: PUSH
71168: LD_INT 12
71170: ST_TO_ADDR
// hc_gallery =  ;
71171: LD_ADDR_OWVAR 33
71175: PUSH
71176: LD_STRING 
71178: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71179: LD_ADDR_OWVAR 35
71183: PUSH
71184: LD_INT 2
71186: NEG
71187: PPUSH
71188: LD_INT 2
71190: PPUSH
71191: CALL_OW 12
71195: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71196: LD_ADDR_OWVAR 31
71200: PUSH
71201: LD_INT 1
71203: PPUSH
71204: LD_INT 3
71206: PPUSH
71207: CALL_OW 12
71211: PUSH
71212: LD_INT 1
71214: PPUSH
71215: LD_INT 3
71217: PPUSH
71218: CALL_OW 12
71222: PUSH
71223: LD_INT 0
71225: PUSH
71226: LD_INT 0
71228: PUSH
71229: EMPTY
71230: LIST
71231: LIST
71232: LIST
71233: LIST
71234: ST_TO_ADDR
// animal := CreateHuman ;
71235: LD_ADDR_VAR 0 12
71239: PUSH
71240: CALL_OW 44
71244: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71245: LD_VAR 0 12
71249: PPUSH
71250: LD_VAR 0 8
71254: PPUSH
71255: LD_INT 0
71257: PPUSH
71258: CALL 73037 0 3
// end ;
71262: GO 71160
71264: POP
71265: POP
// if enchidnas then
71266: LD_VAR 0 4
71270: IFFALSE 71337
// for i = 1 to enchidnas do
71272: LD_ADDR_VAR 0 11
71276: PUSH
71277: DOUBLE
71278: LD_INT 1
71280: DEC
71281: ST_TO_ADDR
71282: LD_VAR 0 4
71286: PUSH
71287: FOR_TO
71288: IFFALSE 71335
// begin hc_class = 13 ;
71290: LD_ADDR_OWVAR 28
71294: PUSH
71295: LD_INT 13
71297: ST_TO_ADDR
// hc_gallery =  ;
71298: LD_ADDR_OWVAR 33
71302: PUSH
71303: LD_STRING 
71305: ST_TO_ADDR
// animal := CreateHuman ;
71306: LD_ADDR_VAR 0 12
71310: PUSH
71311: CALL_OW 44
71315: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71316: LD_VAR 0 12
71320: PPUSH
71321: LD_VAR 0 8
71325: PPUSH
71326: LD_INT 0
71328: PPUSH
71329: CALL 73037 0 3
// end ;
71333: GO 71287
71335: POP
71336: POP
// if fishes then
71337: LD_VAR 0 7
71341: IFFALSE 71408
// for i = 1 to fishes do
71343: LD_ADDR_VAR 0 11
71347: PUSH
71348: DOUBLE
71349: LD_INT 1
71351: DEC
71352: ST_TO_ADDR
71353: LD_VAR 0 7
71357: PUSH
71358: FOR_TO
71359: IFFALSE 71406
// begin hc_class = 20 ;
71361: LD_ADDR_OWVAR 28
71365: PUSH
71366: LD_INT 20
71368: ST_TO_ADDR
// hc_gallery =  ;
71369: LD_ADDR_OWVAR 33
71373: PUSH
71374: LD_STRING 
71376: ST_TO_ADDR
// animal := CreateHuman ;
71377: LD_ADDR_VAR 0 12
71381: PUSH
71382: CALL_OW 44
71386: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71387: LD_VAR 0 12
71391: PPUSH
71392: LD_VAR 0 9
71396: PPUSH
71397: LD_INT 0
71399: PPUSH
71400: CALL 73037 0 3
// end ;
71404: GO 71358
71406: POP
71407: POP
// end ;
71408: LD_VAR 0 10
71412: RET
// export function WantHeal ( sci , unit ) ; begin
71413: LD_INT 0
71415: PPUSH
// if GetTaskList ( sci ) > 0 then
71416: LD_VAR 0 1
71420: PPUSH
71421: CALL_OW 437
71425: PUSH
71426: LD_INT 0
71428: GREATER
71429: IFFALSE 71499
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71431: LD_VAR 0 1
71435: PPUSH
71436: CALL_OW 437
71440: PUSH
71441: LD_INT 1
71443: ARRAY
71444: PUSH
71445: LD_INT 1
71447: ARRAY
71448: PUSH
71449: LD_STRING l
71451: EQUAL
71452: PUSH
71453: LD_VAR 0 1
71457: PPUSH
71458: CALL_OW 437
71462: PUSH
71463: LD_INT 1
71465: ARRAY
71466: PUSH
71467: LD_INT 4
71469: ARRAY
71470: PUSH
71471: LD_VAR 0 2
71475: EQUAL
71476: AND
71477: IFFALSE 71489
// result := true else
71479: LD_ADDR_VAR 0 3
71483: PUSH
71484: LD_INT 1
71486: ST_TO_ADDR
71487: GO 71497
// result := false ;
71489: LD_ADDR_VAR 0 3
71493: PUSH
71494: LD_INT 0
71496: ST_TO_ADDR
// end else
71497: GO 71507
// result := false ;
71499: LD_ADDR_VAR 0 3
71503: PUSH
71504: LD_INT 0
71506: ST_TO_ADDR
// end ;
71507: LD_VAR 0 3
71511: RET
// export function HealTarget ( sci ) ; begin
71512: LD_INT 0
71514: PPUSH
// if not sci then
71515: LD_VAR 0 1
71519: NOT
71520: IFFALSE 71524
// exit ;
71522: GO 71589
// result := 0 ;
71524: LD_ADDR_VAR 0 2
71528: PUSH
71529: LD_INT 0
71531: ST_TO_ADDR
// if GetTaskList ( sci ) then
71532: LD_VAR 0 1
71536: PPUSH
71537: CALL_OW 437
71541: IFFALSE 71589
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71543: LD_VAR 0 1
71547: PPUSH
71548: CALL_OW 437
71552: PUSH
71553: LD_INT 1
71555: ARRAY
71556: PUSH
71557: LD_INT 1
71559: ARRAY
71560: PUSH
71561: LD_STRING l
71563: EQUAL
71564: IFFALSE 71589
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71566: LD_ADDR_VAR 0 2
71570: PUSH
71571: LD_VAR 0 1
71575: PPUSH
71576: CALL_OW 437
71580: PUSH
71581: LD_INT 1
71583: ARRAY
71584: PUSH
71585: LD_INT 4
71587: ARRAY
71588: ST_TO_ADDR
// end ;
71589: LD_VAR 0 2
71593: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71594: LD_INT 0
71596: PPUSH
71597: PPUSH
71598: PPUSH
71599: PPUSH
// if not base_units then
71600: LD_VAR 0 1
71604: NOT
71605: IFFALSE 71609
// exit ;
71607: GO 71696
// result := false ;
71609: LD_ADDR_VAR 0 2
71613: PUSH
71614: LD_INT 0
71616: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71617: LD_ADDR_VAR 0 5
71621: PUSH
71622: LD_VAR 0 1
71626: PPUSH
71627: LD_INT 21
71629: PUSH
71630: LD_INT 3
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: PPUSH
71637: CALL_OW 72
71641: ST_TO_ADDR
// if not tmp then
71642: LD_VAR 0 5
71646: NOT
71647: IFFALSE 71651
// exit ;
71649: GO 71696
// for i in tmp do
71651: LD_ADDR_VAR 0 3
71655: PUSH
71656: LD_VAR 0 5
71660: PUSH
71661: FOR_IN
71662: IFFALSE 71694
// begin result := EnemyInRange ( i , 22 ) ;
71664: LD_ADDR_VAR 0 2
71668: PUSH
71669: LD_VAR 0 3
71673: PPUSH
71674: LD_INT 22
71676: PPUSH
71677: CALL 69283 0 2
71681: ST_TO_ADDR
// if result then
71682: LD_VAR 0 2
71686: IFFALSE 71692
// exit ;
71688: POP
71689: POP
71690: GO 71696
// end ;
71692: GO 71661
71694: POP
71695: POP
// end ;
71696: LD_VAR 0 2
71700: RET
// export function FilterByTag ( units , tag ) ; begin
71701: LD_INT 0
71703: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
71704: LD_ADDR_VAR 0 3
71708: PUSH
71709: LD_VAR 0 1
71713: PPUSH
71714: LD_INT 120
71716: PUSH
71717: LD_VAR 0 2
71721: PUSH
71722: EMPTY
71723: LIST
71724: LIST
71725: PPUSH
71726: CALL_OW 72
71730: ST_TO_ADDR
// end ;
71731: LD_VAR 0 3
71735: RET
// export function IsDriver ( un ) ; begin
71736: LD_INT 0
71738: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71739: LD_ADDR_VAR 0 2
71743: PUSH
71744: LD_VAR 0 1
71748: PUSH
71749: LD_INT 55
71751: PUSH
71752: EMPTY
71753: LIST
71754: PPUSH
71755: CALL_OW 69
71759: IN
71760: ST_TO_ADDR
// end ;
71761: LD_VAR 0 2
71765: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71766: LD_INT 0
71768: PPUSH
71769: PPUSH
// list := [ ] ;
71770: LD_ADDR_VAR 0 5
71774: PUSH
71775: EMPTY
71776: ST_TO_ADDR
// case d of 0 :
71777: LD_VAR 0 3
71781: PUSH
71782: LD_INT 0
71784: DOUBLE
71785: EQUAL
71786: IFTRUE 71790
71788: GO 71923
71790: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71791: LD_ADDR_VAR 0 5
71795: PUSH
71796: LD_VAR 0 1
71800: PUSH
71801: LD_INT 4
71803: MINUS
71804: PUSH
71805: LD_VAR 0 2
71809: PUSH
71810: LD_INT 4
71812: MINUS
71813: PUSH
71814: LD_INT 2
71816: PUSH
71817: EMPTY
71818: LIST
71819: LIST
71820: LIST
71821: PUSH
71822: LD_VAR 0 1
71826: PUSH
71827: LD_INT 3
71829: MINUS
71830: PUSH
71831: LD_VAR 0 2
71835: PUSH
71836: LD_INT 1
71838: PUSH
71839: EMPTY
71840: LIST
71841: LIST
71842: LIST
71843: PUSH
71844: LD_VAR 0 1
71848: PUSH
71849: LD_INT 4
71851: PLUS
71852: PUSH
71853: LD_VAR 0 2
71857: PUSH
71858: LD_INT 4
71860: PUSH
71861: EMPTY
71862: LIST
71863: LIST
71864: LIST
71865: PUSH
71866: LD_VAR 0 1
71870: PUSH
71871: LD_INT 3
71873: PLUS
71874: PUSH
71875: LD_VAR 0 2
71879: PUSH
71880: LD_INT 3
71882: PLUS
71883: PUSH
71884: LD_INT 5
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: LIST
71891: PUSH
71892: LD_VAR 0 1
71896: PUSH
71897: LD_VAR 0 2
71901: PUSH
71902: LD_INT 4
71904: PLUS
71905: PUSH
71906: LD_INT 0
71908: PUSH
71909: EMPTY
71910: LIST
71911: LIST
71912: LIST
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: LIST
71918: LIST
71919: LIST
71920: ST_TO_ADDR
// end ; 1 :
71921: GO 72621
71923: LD_INT 1
71925: DOUBLE
71926: EQUAL
71927: IFTRUE 71931
71929: GO 72064
71931: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71932: LD_ADDR_VAR 0 5
71936: PUSH
71937: LD_VAR 0 1
71941: PUSH
71942: LD_VAR 0 2
71946: PUSH
71947: LD_INT 4
71949: MINUS
71950: PUSH
71951: LD_INT 3
71953: PUSH
71954: EMPTY
71955: LIST
71956: LIST
71957: LIST
71958: PUSH
71959: LD_VAR 0 1
71963: PUSH
71964: LD_INT 3
71966: MINUS
71967: PUSH
71968: LD_VAR 0 2
71972: PUSH
71973: LD_INT 3
71975: MINUS
71976: PUSH
71977: LD_INT 2
71979: PUSH
71980: EMPTY
71981: LIST
71982: LIST
71983: LIST
71984: PUSH
71985: LD_VAR 0 1
71989: PUSH
71990: LD_INT 4
71992: MINUS
71993: PUSH
71994: LD_VAR 0 2
71998: PUSH
71999: LD_INT 1
72001: PUSH
72002: EMPTY
72003: LIST
72004: LIST
72005: LIST
72006: PUSH
72007: LD_VAR 0 1
72011: PUSH
72012: LD_VAR 0 2
72016: PUSH
72017: LD_INT 3
72019: PLUS
72020: PUSH
72021: LD_INT 0
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: LIST
72028: PUSH
72029: LD_VAR 0 1
72033: PUSH
72034: LD_INT 4
72036: PLUS
72037: PUSH
72038: LD_VAR 0 2
72042: PUSH
72043: LD_INT 4
72045: PLUS
72046: PUSH
72047: LD_INT 5
72049: PUSH
72050: EMPTY
72051: LIST
72052: LIST
72053: LIST
72054: PUSH
72055: EMPTY
72056: LIST
72057: LIST
72058: LIST
72059: LIST
72060: LIST
72061: ST_TO_ADDR
// end ; 2 :
72062: GO 72621
72064: LD_INT 2
72066: DOUBLE
72067: EQUAL
72068: IFTRUE 72072
72070: GO 72201
72072: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72073: LD_ADDR_VAR 0 5
72077: PUSH
72078: LD_VAR 0 1
72082: PUSH
72083: LD_VAR 0 2
72087: PUSH
72088: LD_INT 3
72090: MINUS
72091: PUSH
72092: LD_INT 3
72094: PUSH
72095: EMPTY
72096: LIST
72097: LIST
72098: LIST
72099: PUSH
72100: LD_VAR 0 1
72104: PUSH
72105: LD_INT 4
72107: PLUS
72108: PUSH
72109: LD_VAR 0 2
72113: PUSH
72114: LD_INT 4
72116: PUSH
72117: EMPTY
72118: LIST
72119: LIST
72120: LIST
72121: PUSH
72122: LD_VAR 0 1
72126: PUSH
72127: LD_VAR 0 2
72131: PUSH
72132: LD_INT 4
72134: PLUS
72135: PUSH
72136: LD_INT 0
72138: PUSH
72139: EMPTY
72140: LIST
72141: LIST
72142: LIST
72143: PUSH
72144: LD_VAR 0 1
72148: PUSH
72149: LD_INT 3
72151: MINUS
72152: PUSH
72153: LD_VAR 0 2
72157: PUSH
72158: LD_INT 1
72160: PUSH
72161: EMPTY
72162: LIST
72163: LIST
72164: LIST
72165: PUSH
72166: LD_VAR 0 1
72170: PUSH
72171: LD_INT 4
72173: MINUS
72174: PUSH
72175: LD_VAR 0 2
72179: PUSH
72180: LD_INT 4
72182: MINUS
72183: PUSH
72184: LD_INT 2
72186: PUSH
72187: EMPTY
72188: LIST
72189: LIST
72190: LIST
72191: PUSH
72192: EMPTY
72193: LIST
72194: LIST
72195: LIST
72196: LIST
72197: LIST
72198: ST_TO_ADDR
// end ; 3 :
72199: GO 72621
72201: LD_INT 3
72203: DOUBLE
72204: EQUAL
72205: IFTRUE 72209
72207: GO 72342
72209: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72210: LD_ADDR_VAR 0 5
72214: PUSH
72215: LD_VAR 0 1
72219: PUSH
72220: LD_INT 3
72222: PLUS
72223: PUSH
72224: LD_VAR 0 2
72228: PUSH
72229: LD_INT 4
72231: PUSH
72232: EMPTY
72233: LIST
72234: LIST
72235: LIST
72236: PUSH
72237: LD_VAR 0 1
72241: PUSH
72242: LD_INT 4
72244: PLUS
72245: PUSH
72246: LD_VAR 0 2
72250: PUSH
72251: LD_INT 4
72253: PLUS
72254: PUSH
72255: LD_INT 5
72257: PUSH
72258: EMPTY
72259: LIST
72260: LIST
72261: LIST
72262: PUSH
72263: LD_VAR 0 1
72267: PUSH
72268: LD_INT 4
72270: MINUS
72271: PUSH
72272: LD_VAR 0 2
72276: PUSH
72277: LD_INT 1
72279: PUSH
72280: EMPTY
72281: LIST
72282: LIST
72283: LIST
72284: PUSH
72285: LD_VAR 0 1
72289: PUSH
72290: LD_VAR 0 2
72294: PUSH
72295: LD_INT 4
72297: MINUS
72298: PUSH
72299: LD_INT 3
72301: PUSH
72302: EMPTY
72303: LIST
72304: LIST
72305: LIST
72306: PUSH
72307: LD_VAR 0 1
72311: PUSH
72312: LD_INT 3
72314: MINUS
72315: PUSH
72316: LD_VAR 0 2
72320: PUSH
72321: LD_INT 3
72323: MINUS
72324: PUSH
72325: LD_INT 2
72327: PUSH
72328: EMPTY
72329: LIST
72330: LIST
72331: LIST
72332: PUSH
72333: EMPTY
72334: LIST
72335: LIST
72336: LIST
72337: LIST
72338: LIST
72339: ST_TO_ADDR
// end ; 4 :
72340: GO 72621
72342: LD_INT 4
72344: DOUBLE
72345: EQUAL
72346: IFTRUE 72350
72348: GO 72483
72350: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72351: LD_ADDR_VAR 0 5
72355: PUSH
72356: LD_VAR 0 1
72360: PUSH
72361: LD_VAR 0 2
72365: PUSH
72366: LD_INT 4
72368: PLUS
72369: PUSH
72370: LD_INT 0
72372: PUSH
72373: EMPTY
72374: LIST
72375: LIST
72376: LIST
72377: PUSH
72378: LD_VAR 0 1
72382: PUSH
72383: LD_INT 3
72385: PLUS
72386: PUSH
72387: LD_VAR 0 2
72391: PUSH
72392: LD_INT 3
72394: PLUS
72395: PUSH
72396: LD_INT 5
72398: PUSH
72399: EMPTY
72400: LIST
72401: LIST
72402: LIST
72403: PUSH
72404: LD_VAR 0 1
72408: PUSH
72409: LD_INT 4
72411: PLUS
72412: PUSH
72413: LD_VAR 0 2
72417: PUSH
72418: LD_INT 4
72420: PUSH
72421: EMPTY
72422: LIST
72423: LIST
72424: LIST
72425: PUSH
72426: LD_VAR 0 1
72430: PUSH
72431: LD_VAR 0 2
72435: PUSH
72436: LD_INT 3
72438: MINUS
72439: PUSH
72440: LD_INT 3
72442: PUSH
72443: EMPTY
72444: LIST
72445: LIST
72446: LIST
72447: PUSH
72448: LD_VAR 0 1
72452: PUSH
72453: LD_INT 4
72455: MINUS
72456: PUSH
72457: LD_VAR 0 2
72461: PUSH
72462: LD_INT 4
72464: MINUS
72465: PUSH
72466: LD_INT 2
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: LIST
72473: PUSH
72474: EMPTY
72475: LIST
72476: LIST
72477: LIST
72478: LIST
72479: LIST
72480: ST_TO_ADDR
// end ; 5 :
72481: GO 72621
72483: LD_INT 5
72485: DOUBLE
72486: EQUAL
72487: IFTRUE 72491
72489: GO 72620
72491: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72492: LD_ADDR_VAR 0 5
72496: PUSH
72497: LD_VAR 0 1
72501: PUSH
72502: LD_INT 4
72504: MINUS
72505: PUSH
72506: LD_VAR 0 2
72510: PUSH
72511: LD_INT 1
72513: PUSH
72514: EMPTY
72515: LIST
72516: LIST
72517: LIST
72518: PUSH
72519: LD_VAR 0 1
72523: PUSH
72524: LD_VAR 0 2
72528: PUSH
72529: LD_INT 4
72531: MINUS
72532: PUSH
72533: LD_INT 3
72535: PUSH
72536: EMPTY
72537: LIST
72538: LIST
72539: LIST
72540: PUSH
72541: LD_VAR 0 1
72545: PUSH
72546: LD_INT 4
72548: PLUS
72549: PUSH
72550: LD_VAR 0 2
72554: PUSH
72555: LD_INT 4
72557: PLUS
72558: PUSH
72559: LD_INT 5
72561: PUSH
72562: EMPTY
72563: LIST
72564: LIST
72565: LIST
72566: PUSH
72567: LD_VAR 0 1
72571: PUSH
72572: LD_INT 3
72574: PLUS
72575: PUSH
72576: LD_VAR 0 2
72580: PUSH
72581: LD_INT 4
72583: PUSH
72584: EMPTY
72585: LIST
72586: LIST
72587: LIST
72588: PUSH
72589: LD_VAR 0 1
72593: PUSH
72594: LD_VAR 0 2
72598: PUSH
72599: LD_INT 3
72601: PLUS
72602: PUSH
72603: LD_INT 0
72605: PUSH
72606: EMPTY
72607: LIST
72608: LIST
72609: LIST
72610: PUSH
72611: EMPTY
72612: LIST
72613: LIST
72614: LIST
72615: LIST
72616: LIST
72617: ST_TO_ADDR
// end ; end ;
72618: GO 72621
72620: POP
// result := list ;
72621: LD_ADDR_VAR 0 4
72625: PUSH
72626: LD_VAR 0 5
72630: ST_TO_ADDR
// end ;
72631: LD_VAR 0 4
72635: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72636: LD_INT 0
72638: PPUSH
72639: PPUSH
72640: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72641: LD_VAR 0 1
72645: NOT
72646: PUSH
72647: LD_VAR 0 2
72651: PUSH
72652: LD_INT 1
72654: PUSH
72655: LD_INT 2
72657: PUSH
72658: LD_INT 3
72660: PUSH
72661: LD_INT 4
72663: PUSH
72664: EMPTY
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: IN
72670: NOT
72671: OR
72672: IFFALSE 72676
// exit ;
72674: GO 72759
// tmp := [ ] ;
72676: LD_ADDR_VAR 0 5
72680: PUSH
72681: EMPTY
72682: ST_TO_ADDR
// for i in units do
72683: LD_ADDR_VAR 0 4
72687: PUSH
72688: LD_VAR 0 1
72692: PUSH
72693: FOR_IN
72694: IFFALSE 72728
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
72696: LD_ADDR_VAR 0 5
72700: PUSH
72701: LD_VAR 0 5
72705: PPUSH
72706: LD_VAR 0 4
72710: PPUSH
72711: LD_VAR 0 2
72715: PPUSH
72716: CALL_OW 259
72720: PPUSH
72721: CALL 74120 0 2
72725: ST_TO_ADDR
72726: GO 72693
72728: POP
72729: POP
// if not tmp then
72730: LD_VAR 0 5
72734: NOT
72735: IFFALSE 72739
// exit ;
72737: GO 72759
// result := SortListByListDesc ( units , tmp ) ;
72739: LD_ADDR_VAR 0 3
72743: PUSH
72744: LD_VAR 0 1
72748: PPUSH
72749: LD_VAR 0 5
72753: PPUSH
72754: CALL_OW 77
72758: ST_TO_ADDR
// end ;
72759: LD_VAR 0 3
72763: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72764: LD_INT 0
72766: PPUSH
72767: PPUSH
72768: PPUSH
// result := false ;
72769: LD_ADDR_VAR 0 3
72773: PUSH
72774: LD_INT 0
72776: ST_TO_ADDR
// if not building then
72777: LD_VAR 0 2
72781: NOT
72782: IFFALSE 72786
// exit ;
72784: GO 72924
// x := GetX ( building ) ;
72786: LD_ADDR_VAR 0 4
72790: PUSH
72791: LD_VAR 0 2
72795: PPUSH
72796: CALL_OW 250
72800: ST_TO_ADDR
// y := GetY ( building ) ;
72801: LD_ADDR_VAR 0 5
72805: PUSH
72806: LD_VAR 0 2
72810: PPUSH
72811: CALL_OW 251
72815: ST_TO_ADDR
// if not x or not y then
72816: LD_VAR 0 4
72820: NOT
72821: PUSH
72822: LD_VAR 0 5
72826: NOT
72827: OR
72828: IFFALSE 72832
// exit ;
72830: GO 72924
// if GetTaskList ( unit ) then
72832: LD_VAR 0 1
72836: PPUSH
72837: CALL_OW 437
72841: IFFALSE 72924
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72843: LD_STRING e
72845: PUSH
72846: LD_VAR 0 1
72850: PPUSH
72851: CALL_OW 437
72855: PUSH
72856: LD_INT 1
72858: ARRAY
72859: PUSH
72860: LD_INT 1
72862: ARRAY
72863: EQUAL
72864: PUSH
72865: LD_VAR 0 4
72869: PUSH
72870: LD_VAR 0 1
72874: PPUSH
72875: CALL_OW 437
72879: PUSH
72880: LD_INT 1
72882: ARRAY
72883: PUSH
72884: LD_INT 2
72886: ARRAY
72887: EQUAL
72888: AND
72889: PUSH
72890: LD_VAR 0 5
72894: PUSH
72895: LD_VAR 0 1
72899: PPUSH
72900: CALL_OW 437
72904: PUSH
72905: LD_INT 1
72907: ARRAY
72908: PUSH
72909: LD_INT 3
72911: ARRAY
72912: EQUAL
72913: AND
72914: IFFALSE 72924
// result := true end ;
72916: LD_ADDR_VAR 0 3
72920: PUSH
72921: LD_INT 1
72923: ST_TO_ADDR
// end ;
72924: LD_VAR 0 3
72928: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72929: LD_INT 0
72931: PPUSH
// result := false ;
72932: LD_ADDR_VAR 0 4
72936: PUSH
72937: LD_INT 0
72939: ST_TO_ADDR
// if GetTaskList ( unit ) then
72940: LD_VAR 0 1
72944: PPUSH
72945: CALL_OW 437
72949: IFFALSE 73032
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72951: LD_STRING M
72953: PUSH
72954: LD_VAR 0 1
72958: PPUSH
72959: CALL_OW 437
72963: PUSH
72964: LD_INT 1
72966: ARRAY
72967: PUSH
72968: LD_INT 1
72970: ARRAY
72971: EQUAL
72972: PUSH
72973: LD_VAR 0 2
72977: PUSH
72978: LD_VAR 0 1
72982: PPUSH
72983: CALL_OW 437
72987: PUSH
72988: LD_INT 1
72990: ARRAY
72991: PUSH
72992: LD_INT 2
72994: ARRAY
72995: EQUAL
72996: AND
72997: PUSH
72998: LD_VAR 0 3
73002: PUSH
73003: LD_VAR 0 1
73007: PPUSH
73008: CALL_OW 437
73012: PUSH
73013: LD_INT 1
73015: ARRAY
73016: PUSH
73017: LD_INT 3
73019: ARRAY
73020: EQUAL
73021: AND
73022: IFFALSE 73032
// result := true ;
73024: LD_ADDR_VAR 0 4
73028: PUSH
73029: LD_INT 1
73031: ST_TO_ADDR
// end ; end ;
73032: LD_VAR 0 4
73036: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73037: LD_INT 0
73039: PPUSH
73040: PPUSH
73041: PPUSH
73042: PPUSH
// if not unit or not area then
73043: LD_VAR 0 1
73047: NOT
73048: PUSH
73049: LD_VAR 0 2
73053: NOT
73054: OR
73055: IFFALSE 73059
// exit ;
73057: GO 73223
// tmp := AreaToList ( area , i ) ;
73059: LD_ADDR_VAR 0 6
73063: PUSH
73064: LD_VAR 0 2
73068: PPUSH
73069: LD_VAR 0 5
73073: PPUSH
73074: CALL_OW 517
73078: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73079: LD_ADDR_VAR 0 5
73083: PUSH
73084: DOUBLE
73085: LD_INT 1
73087: DEC
73088: ST_TO_ADDR
73089: LD_VAR 0 6
73093: PUSH
73094: LD_INT 1
73096: ARRAY
73097: PUSH
73098: FOR_TO
73099: IFFALSE 73221
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73101: LD_ADDR_VAR 0 7
73105: PUSH
73106: LD_VAR 0 6
73110: PUSH
73111: LD_INT 1
73113: ARRAY
73114: PUSH
73115: LD_VAR 0 5
73119: ARRAY
73120: PUSH
73121: LD_VAR 0 6
73125: PUSH
73126: LD_INT 2
73128: ARRAY
73129: PUSH
73130: LD_VAR 0 5
73134: ARRAY
73135: PUSH
73136: EMPTY
73137: LIST
73138: LIST
73139: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73140: LD_VAR 0 7
73144: PUSH
73145: LD_INT 1
73147: ARRAY
73148: PPUSH
73149: LD_VAR 0 7
73153: PUSH
73154: LD_INT 2
73156: ARRAY
73157: PPUSH
73158: CALL_OW 428
73162: PUSH
73163: LD_INT 0
73165: EQUAL
73166: IFFALSE 73219
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73168: LD_VAR 0 1
73172: PPUSH
73173: LD_VAR 0 7
73177: PUSH
73178: LD_INT 1
73180: ARRAY
73181: PPUSH
73182: LD_VAR 0 7
73186: PUSH
73187: LD_INT 2
73189: ARRAY
73190: PPUSH
73191: LD_VAR 0 3
73195: PPUSH
73196: CALL_OW 48
// result := IsPlaced ( unit ) ;
73200: LD_ADDR_VAR 0 4
73204: PUSH
73205: LD_VAR 0 1
73209: PPUSH
73210: CALL_OW 305
73214: ST_TO_ADDR
// exit ;
73215: POP
73216: POP
73217: GO 73223
// end ; end ;
73219: GO 73098
73221: POP
73222: POP
// end ;
73223: LD_VAR 0 4
73227: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73228: LD_INT 0
73230: PPUSH
73231: PPUSH
73232: PPUSH
// if not side or side > 8 then
73233: LD_VAR 0 1
73237: NOT
73238: PUSH
73239: LD_VAR 0 1
73243: PUSH
73244: LD_INT 8
73246: GREATER
73247: OR
73248: IFFALSE 73252
// exit ;
73250: GO 73439
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73252: LD_ADDR_VAR 0 4
73256: PUSH
73257: LD_INT 22
73259: PUSH
73260: LD_VAR 0 1
73264: PUSH
73265: EMPTY
73266: LIST
73267: LIST
73268: PUSH
73269: LD_INT 21
73271: PUSH
73272: LD_INT 3
73274: PUSH
73275: EMPTY
73276: LIST
73277: LIST
73278: PUSH
73279: EMPTY
73280: LIST
73281: LIST
73282: PPUSH
73283: CALL_OW 69
73287: ST_TO_ADDR
// if not tmp then
73288: LD_VAR 0 4
73292: NOT
73293: IFFALSE 73297
// exit ;
73295: GO 73439
// enable_addtolog := true ;
73297: LD_ADDR_OWVAR 81
73301: PUSH
73302: LD_INT 1
73304: ST_TO_ADDR
// AddToLog ( [ ) ;
73305: LD_STRING [
73307: PPUSH
73308: CALL_OW 561
// for i in tmp do
73312: LD_ADDR_VAR 0 3
73316: PUSH
73317: LD_VAR 0 4
73321: PUSH
73322: FOR_IN
73323: IFFALSE 73430
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73325: LD_STRING [
73327: PUSH
73328: LD_VAR 0 3
73332: PPUSH
73333: CALL_OW 266
73337: STR
73338: PUSH
73339: LD_STRING , 
73341: STR
73342: PUSH
73343: LD_VAR 0 3
73347: PPUSH
73348: CALL_OW 250
73352: STR
73353: PUSH
73354: LD_STRING , 
73356: STR
73357: PUSH
73358: LD_VAR 0 3
73362: PPUSH
73363: CALL_OW 251
73367: STR
73368: PUSH
73369: LD_STRING , 
73371: STR
73372: PUSH
73373: LD_VAR 0 3
73377: PPUSH
73378: CALL_OW 254
73382: STR
73383: PUSH
73384: LD_STRING , 
73386: STR
73387: PUSH
73388: LD_VAR 0 3
73392: PPUSH
73393: LD_INT 1
73395: PPUSH
73396: CALL_OW 268
73400: STR
73401: PUSH
73402: LD_STRING , 
73404: STR
73405: PUSH
73406: LD_VAR 0 3
73410: PPUSH
73411: LD_INT 2
73413: PPUSH
73414: CALL_OW 268
73418: STR
73419: PUSH
73420: LD_STRING ],
73422: STR
73423: PPUSH
73424: CALL_OW 561
// end ;
73428: GO 73322
73430: POP
73431: POP
// AddToLog ( ]; ) ;
73432: LD_STRING ];
73434: PPUSH
73435: CALL_OW 561
// end ;
73439: LD_VAR 0 2
73443: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73444: LD_INT 0
73446: PPUSH
73447: PPUSH
73448: PPUSH
73449: PPUSH
73450: PPUSH
// if not area or not rate or not max then
73451: LD_VAR 0 1
73455: NOT
73456: PUSH
73457: LD_VAR 0 2
73461: NOT
73462: OR
73463: PUSH
73464: LD_VAR 0 4
73468: NOT
73469: OR
73470: IFFALSE 73474
// exit ;
73472: GO 73663
// while 1 do
73474: LD_INT 1
73476: IFFALSE 73663
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73478: LD_ADDR_VAR 0 9
73482: PUSH
73483: LD_VAR 0 1
73487: PPUSH
73488: LD_INT 1
73490: PPUSH
73491: CALL_OW 287
73495: PUSH
73496: LD_INT 10
73498: MUL
73499: ST_TO_ADDR
// r := rate / 10 ;
73500: LD_ADDR_VAR 0 7
73504: PUSH
73505: LD_VAR 0 2
73509: PUSH
73510: LD_INT 10
73512: DIVREAL
73513: ST_TO_ADDR
// time := 1 1$00 ;
73514: LD_ADDR_VAR 0 8
73518: PUSH
73519: LD_INT 2100
73521: ST_TO_ADDR
// if amount < min then
73522: LD_VAR 0 9
73526: PUSH
73527: LD_VAR 0 3
73531: LESS
73532: IFFALSE 73550
// r := r * 2 else
73534: LD_ADDR_VAR 0 7
73538: PUSH
73539: LD_VAR 0 7
73543: PUSH
73544: LD_INT 2
73546: MUL
73547: ST_TO_ADDR
73548: GO 73576
// if amount > max then
73550: LD_VAR 0 9
73554: PUSH
73555: LD_VAR 0 4
73559: GREATER
73560: IFFALSE 73576
// r := r / 2 ;
73562: LD_ADDR_VAR 0 7
73566: PUSH
73567: LD_VAR 0 7
73571: PUSH
73572: LD_INT 2
73574: DIVREAL
73575: ST_TO_ADDR
// time := time / r ;
73576: LD_ADDR_VAR 0 8
73580: PUSH
73581: LD_VAR 0 8
73585: PUSH
73586: LD_VAR 0 7
73590: DIVREAL
73591: ST_TO_ADDR
// if time < 0 then
73592: LD_VAR 0 8
73596: PUSH
73597: LD_INT 0
73599: LESS
73600: IFFALSE 73617
// time := time * - 1 ;
73602: LD_ADDR_VAR 0 8
73606: PUSH
73607: LD_VAR 0 8
73611: PUSH
73612: LD_INT 1
73614: NEG
73615: MUL
73616: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
73617: LD_VAR 0 8
73621: PUSH
73622: LD_INT 35
73624: PPUSH
73625: LD_INT 875
73627: PPUSH
73628: CALL_OW 12
73632: PLUS
73633: PPUSH
73634: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73638: LD_INT 1
73640: PPUSH
73641: LD_INT 5
73643: PPUSH
73644: CALL_OW 12
73648: PPUSH
73649: LD_VAR 0 1
73653: PPUSH
73654: LD_INT 1
73656: PPUSH
73657: CALL_OW 55
// end ;
73661: GO 73474
// end ;
73663: LD_VAR 0 5
73667: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73668: LD_INT 0
73670: PPUSH
73671: PPUSH
73672: PPUSH
73673: PPUSH
73674: PPUSH
73675: PPUSH
73676: PPUSH
73677: PPUSH
// if not turrets or not factories then
73678: LD_VAR 0 1
73682: NOT
73683: PUSH
73684: LD_VAR 0 2
73688: NOT
73689: OR
73690: IFFALSE 73694
// exit ;
73692: GO 74001
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73694: LD_ADDR_VAR 0 10
73698: PUSH
73699: LD_INT 5
73701: PUSH
73702: LD_INT 6
73704: PUSH
73705: EMPTY
73706: LIST
73707: LIST
73708: PUSH
73709: LD_INT 2
73711: PUSH
73712: LD_INT 4
73714: PUSH
73715: EMPTY
73716: LIST
73717: LIST
73718: PUSH
73719: LD_INT 3
73721: PUSH
73722: LD_INT 5
73724: PUSH
73725: EMPTY
73726: LIST
73727: LIST
73728: PUSH
73729: EMPTY
73730: LIST
73731: LIST
73732: LIST
73733: PUSH
73734: LD_INT 24
73736: PUSH
73737: LD_INT 25
73739: PUSH
73740: EMPTY
73741: LIST
73742: LIST
73743: PUSH
73744: LD_INT 23
73746: PUSH
73747: LD_INT 27
73749: PUSH
73750: EMPTY
73751: LIST
73752: LIST
73753: PUSH
73754: EMPTY
73755: LIST
73756: LIST
73757: PUSH
73758: LD_INT 42
73760: PUSH
73761: LD_INT 43
73763: PUSH
73764: EMPTY
73765: LIST
73766: LIST
73767: PUSH
73768: LD_INT 44
73770: PUSH
73771: LD_INT 46
73773: PUSH
73774: EMPTY
73775: LIST
73776: LIST
73777: PUSH
73778: LD_INT 45
73780: PUSH
73781: LD_INT 47
73783: PUSH
73784: EMPTY
73785: LIST
73786: LIST
73787: PUSH
73788: EMPTY
73789: LIST
73790: LIST
73791: LIST
73792: PUSH
73793: EMPTY
73794: LIST
73795: LIST
73796: LIST
73797: ST_TO_ADDR
// result := [ ] ;
73798: LD_ADDR_VAR 0 3
73802: PUSH
73803: EMPTY
73804: ST_TO_ADDR
// for i in turrets do
73805: LD_ADDR_VAR 0 4
73809: PUSH
73810: LD_VAR 0 1
73814: PUSH
73815: FOR_IN
73816: IFFALSE 73999
// begin nat := GetNation ( i ) ;
73818: LD_ADDR_VAR 0 7
73822: PUSH
73823: LD_VAR 0 4
73827: PPUSH
73828: CALL_OW 248
73832: ST_TO_ADDR
// weapon := 0 ;
73833: LD_ADDR_VAR 0 8
73837: PUSH
73838: LD_INT 0
73840: ST_TO_ADDR
// if not nat then
73841: LD_VAR 0 7
73845: NOT
73846: IFFALSE 73850
// continue ;
73848: GO 73815
// for j in list [ nat ] do
73850: LD_ADDR_VAR 0 5
73854: PUSH
73855: LD_VAR 0 10
73859: PUSH
73860: LD_VAR 0 7
73864: ARRAY
73865: PUSH
73866: FOR_IN
73867: IFFALSE 73908
// if GetBWeapon ( i ) = j [ 1 ] then
73869: LD_VAR 0 4
73873: PPUSH
73874: CALL_OW 269
73878: PUSH
73879: LD_VAR 0 5
73883: PUSH
73884: LD_INT 1
73886: ARRAY
73887: EQUAL
73888: IFFALSE 73906
// begin weapon := j [ 2 ] ;
73890: LD_ADDR_VAR 0 8
73894: PUSH
73895: LD_VAR 0 5
73899: PUSH
73900: LD_INT 2
73902: ARRAY
73903: ST_TO_ADDR
// break ;
73904: GO 73908
// end ;
73906: GO 73866
73908: POP
73909: POP
// if not weapon then
73910: LD_VAR 0 8
73914: NOT
73915: IFFALSE 73919
// continue ;
73917: GO 73815
// for k in factories do
73919: LD_ADDR_VAR 0 6
73923: PUSH
73924: LD_VAR 0 2
73928: PUSH
73929: FOR_IN
73930: IFFALSE 73995
// begin weapons := AvailableWeaponList ( k ) ;
73932: LD_ADDR_VAR 0 9
73936: PUSH
73937: LD_VAR 0 6
73941: PPUSH
73942: CALL_OW 478
73946: ST_TO_ADDR
// if not weapons then
73947: LD_VAR 0 9
73951: NOT
73952: IFFALSE 73956
// continue ;
73954: GO 73929
// if weapon in weapons then
73956: LD_VAR 0 8
73960: PUSH
73961: LD_VAR 0 9
73965: IN
73966: IFFALSE 73993
// begin result := [ i , weapon ] ;
73968: LD_ADDR_VAR 0 3
73972: PUSH
73973: LD_VAR 0 4
73977: PUSH
73978: LD_VAR 0 8
73982: PUSH
73983: EMPTY
73984: LIST
73985: LIST
73986: ST_TO_ADDR
// exit ;
73987: POP
73988: POP
73989: POP
73990: POP
73991: GO 74001
// end ; end ;
73993: GO 73929
73995: POP
73996: POP
// end ;
73997: GO 73815
73999: POP
74000: POP
// end ;
74001: LD_VAR 0 3
74005: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74006: LD_INT 0
74008: PPUSH
// if not side or side > 8 then
74009: LD_VAR 0 3
74013: NOT
74014: PUSH
74015: LD_VAR 0 3
74019: PUSH
74020: LD_INT 8
74022: GREATER
74023: OR
74024: IFFALSE 74028
// exit ;
74026: GO 74087
// if not range then
74028: LD_VAR 0 4
74032: NOT
74033: IFFALSE 74044
// range := - 12 ;
74035: LD_ADDR_VAR 0 4
74039: PUSH
74040: LD_INT 12
74042: NEG
74043: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74044: LD_VAR 0 1
74048: PPUSH
74049: LD_VAR 0 2
74053: PPUSH
74054: LD_VAR 0 3
74058: PPUSH
74059: LD_VAR 0 4
74063: PPUSH
74064: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74068: LD_VAR 0 1
74072: PPUSH
74073: LD_VAR 0 2
74077: PPUSH
74078: LD_VAR 0 3
74082: PPUSH
74083: CALL_OW 331
// end ;
74087: LD_VAR 0 5
74091: RET
// export function Video ( mode ) ; begin
74092: LD_INT 0
74094: PPUSH
// ingame_video = mode ;
74095: LD_ADDR_OWVAR 52
74099: PUSH
74100: LD_VAR 0 1
74104: ST_TO_ADDR
// interface_hidden = mode ;
74105: LD_ADDR_OWVAR 54
74109: PUSH
74110: LD_VAR 0 1
74114: ST_TO_ADDR
// end ;
74115: LD_VAR 0 2
74119: RET
// export function Join ( array , element ) ; begin
74120: LD_INT 0
74122: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74123: LD_ADDR_VAR 0 3
74127: PUSH
74128: LD_VAR 0 1
74132: PPUSH
74133: LD_VAR 0 1
74137: PUSH
74138: LD_INT 1
74140: PLUS
74141: PPUSH
74142: LD_VAR 0 2
74146: PPUSH
74147: CALL_OW 1
74151: ST_TO_ADDR
// end ;
74152: LD_VAR 0 3
74156: RET
// export function JoinUnion ( array , element ) ; begin
74157: LD_INT 0
74159: PPUSH
// result := array union element ;
74160: LD_ADDR_VAR 0 3
74164: PUSH
74165: LD_VAR 0 1
74169: PUSH
74170: LD_VAR 0 2
74174: UNION
74175: ST_TO_ADDR
// end ;
74176: LD_VAR 0 3
74180: RET
// export function GetBehemoths ( side ) ; begin
74181: LD_INT 0
74183: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
74184: LD_ADDR_VAR 0 2
74188: PUSH
74189: LD_INT 22
74191: PUSH
74192: LD_VAR 0 1
74196: PUSH
74197: EMPTY
74198: LIST
74199: LIST
74200: PUSH
74201: LD_INT 31
74203: PUSH
74204: LD_INT 25
74206: PUSH
74207: EMPTY
74208: LIST
74209: LIST
74210: PUSH
74211: EMPTY
74212: LIST
74213: LIST
74214: PPUSH
74215: CALL_OW 69
74219: ST_TO_ADDR
// end ;
74220: LD_VAR 0 2
74224: RET
// export function Shuffle ( array ) ; var i , index ; begin
74225: LD_INT 0
74227: PPUSH
74228: PPUSH
74229: PPUSH
// result := [ ] ;
74230: LD_ADDR_VAR 0 2
74234: PUSH
74235: EMPTY
74236: ST_TO_ADDR
// if not array then
74237: LD_VAR 0 1
74241: NOT
74242: IFFALSE 74246
// exit ;
74244: GO 74345
// Randomize ;
74246: CALL_OW 10
// for i = array downto 1 do
74250: LD_ADDR_VAR 0 3
74254: PUSH
74255: DOUBLE
74256: LD_VAR 0 1
74260: INC
74261: ST_TO_ADDR
74262: LD_INT 1
74264: PUSH
74265: FOR_DOWNTO
74266: IFFALSE 74343
// begin index := rand ( 1 , array ) ;
74268: LD_ADDR_VAR 0 4
74272: PUSH
74273: LD_INT 1
74275: PPUSH
74276: LD_VAR 0 1
74280: PPUSH
74281: CALL_OW 12
74285: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74286: LD_ADDR_VAR 0 2
74290: PUSH
74291: LD_VAR 0 2
74295: PPUSH
74296: LD_VAR 0 2
74300: PUSH
74301: LD_INT 1
74303: PLUS
74304: PPUSH
74305: LD_VAR 0 1
74309: PUSH
74310: LD_VAR 0 4
74314: ARRAY
74315: PPUSH
74316: CALL_OW 2
74320: ST_TO_ADDR
// array := Delete ( array , index ) ;
74321: LD_ADDR_VAR 0 1
74325: PUSH
74326: LD_VAR 0 1
74330: PPUSH
74331: LD_VAR 0 4
74335: PPUSH
74336: CALL_OW 3
74340: ST_TO_ADDR
// end ;
74341: GO 74265
74343: POP
74344: POP
// end ;
74345: LD_VAR 0 2
74349: RET
// export function GetBaseMaterials ( base ) ; begin
74350: LD_INT 0
74352: PPUSH
// result := [ 0 , 0 , 0 ] ;
74353: LD_ADDR_VAR 0 2
74357: PUSH
74358: LD_INT 0
74360: PUSH
74361: LD_INT 0
74363: PUSH
74364: LD_INT 0
74366: PUSH
74367: EMPTY
74368: LIST
74369: LIST
74370: LIST
74371: ST_TO_ADDR
// if not base then
74372: LD_VAR 0 1
74376: NOT
74377: IFFALSE 74381
// exit ;
74379: GO 74430
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74381: LD_ADDR_VAR 0 2
74385: PUSH
74386: LD_VAR 0 1
74390: PPUSH
74391: LD_INT 1
74393: PPUSH
74394: CALL_OW 275
74398: PUSH
74399: LD_VAR 0 1
74403: PPUSH
74404: LD_INT 2
74406: PPUSH
74407: CALL_OW 275
74411: PUSH
74412: LD_VAR 0 1
74416: PPUSH
74417: LD_INT 3
74419: PPUSH
74420: CALL_OW 275
74424: PUSH
74425: EMPTY
74426: LIST
74427: LIST
74428: LIST
74429: ST_TO_ADDR
// end ;
74430: LD_VAR 0 2
74434: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74435: LD_INT 0
74437: PPUSH
74438: PPUSH
// result := array ;
74439: LD_ADDR_VAR 0 3
74443: PUSH
74444: LD_VAR 0 1
74448: ST_TO_ADDR
// if size >= result then
74449: LD_VAR 0 2
74453: PUSH
74454: LD_VAR 0 3
74458: GREATEREQUAL
74459: IFFALSE 74463
// exit ;
74461: GO 74513
// if size then
74463: LD_VAR 0 2
74467: IFFALSE 74513
// for i := array downto size do
74469: LD_ADDR_VAR 0 4
74473: PUSH
74474: DOUBLE
74475: LD_VAR 0 1
74479: INC
74480: ST_TO_ADDR
74481: LD_VAR 0 2
74485: PUSH
74486: FOR_DOWNTO
74487: IFFALSE 74511
// result := Delete ( result , result ) ;
74489: LD_ADDR_VAR 0 3
74493: PUSH
74494: LD_VAR 0 3
74498: PPUSH
74499: LD_VAR 0 3
74503: PPUSH
74504: CALL_OW 3
74508: ST_TO_ADDR
74509: GO 74486
74511: POP
74512: POP
// end ;
74513: LD_VAR 0 3
74517: RET
// export function ComExit ( unit ) ; var tmp ; begin
74518: LD_INT 0
74520: PPUSH
74521: PPUSH
// if not IsInUnit ( unit ) then
74522: LD_VAR 0 1
74526: PPUSH
74527: CALL_OW 310
74531: NOT
74532: IFFALSE 74536
// exit ;
74534: GO 74596
// tmp := IsInUnit ( unit ) ;
74536: LD_ADDR_VAR 0 3
74540: PUSH
74541: LD_VAR 0 1
74545: PPUSH
74546: CALL_OW 310
74550: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74551: LD_VAR 0 3
74555: PPUSH
74556: CALL_OW 247
74560: PUSH
74561: LD_INT 2
74563: EQUAL
74564: IFFALSE 74577
// ComExitVehicle ( unit ) else
74566: LD_VAR 0 1
74570: PPUSH
74571: CALL_OW 121
74575: GO 74586
// ComExitBuilding ( unit ) ;
74577: LD_VAR 0 1
74581: PPUSH
74582: CALL_OW 122
// result := tmp ;
74586: LD_ADDR_VAR 0 2
74590: PUSH
74591: LD_VAR 0 3
74595: ST_TO_ADDR
// end ;
74596: LD_VAR 0 2
74600: RET
// export function ComExitAll ( units ) ; var i ; begin
74601: LD_INT 0
74603: PPUSH
74604: PPUSH
// if not units then
74605: LD_VAR 0 1
74609: NOT
74610: IFFALSE 74614
// exit ;
74612: GO 74640
// for i in units do
74614: LD_ADDR_VAR 0 3
74618: PUSH
74619: LD_VAR 0 1
74623: PUSH
74624: FOR_IN
74625: IFFALSE 74638
// ComExit ( i ) ;
74627: LD_VAR 0 3
74631: PPUSH
74632: CALL 74518 0 1
74636: GO 74624
74638: POP
74639: POP
// end ;
74640: LD_VAR 0 2
74644: RET
// export function ResetHc ; begin
74645: LD_INT 0
74647: PPUSH
// InitHc ;
74648: CALL_OW 19
// hc_importance := 0 ;
74652: LD_ADDR_OWVAR 32
74656: PUSH
74657: LD_INT 0
74659: ST_TO_ADDR
// end ;
74660: LD_VAR 0 1
74664: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74665: LD_INT 0
74667: PPUSH
74668: PPUSH
74669: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74670: LD_ADDR_VAR 0 6
74674: PUSH
74675: LD_VAR 0 1
74679: PUSH
74680: LD_VAR 0 3
74684: PLUS
74685: PUSH
74686: LD_INT 2
74688: DIV
74689: ST_TO_ADDR
// if _x < 0 then
74690: LD_VAR 0 6
74694: PUSH
74695: LD_INT 0
74697: LESS
74698: IFFALSE 74715
// _x := _x * - 1 ;
74700: LD_ADDR_VAR 0 6
74704: PUSH
74705: LD_VAR 0 6
74709: PUSH
74710: LD_INT 1
74712: NEG
74713: MUL
74714: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74715: LD_ADDR_VAR 0 7
74719: PUSH
74720: LD_VAR 0 2
74724: PUSH
74725: LD_VAR 0 4
74729: PLUS
74730: PUSH
74731: LD_INT 2
74733: DIV
74734: ST_TO_ADDR
// if _y < 0 then
74735: LD_VAR 0 7
74739: PUSH
74740: LD_INT 0
74742: LESS
74743: IFFALSE 74760
// _y := _y * - 1 ;
74745: LD_ADDR_VAR 0 7
74749: PUSH
74750: LD_VAR 0 7
74754: PUSH
74755: LD_INT 1
74757: NEG
74758: MUL
74759: ST_TO_ADDR
// result := [ _x , _y ] ;
74760: LD_ADDR_VAR 0 5
74764: PUSH
74765: LD_VAR 0 6
74769: PUSH
74770: LD_VAR 0 7
74774: PUSH
74775: EMPTY
74776: LIST
74777: LIST
74778: ST_TO_ADDR
// end ;
74779: LD_VAR 0 5
74783: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74784: LD_INT 0
74786: PPUSH
74787: PPUSH
74788: PPUSH
74789: PPUSH
// task := GetTaskList ( unit ) ;
74790: LD_ADDR_VAR 0 7
74794: PUSH
74795: LD_VAR 0 1
74799: PPUSH
74800: CALL_OW 437
74804: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74805: LD_VAR 0 7
74809: NOT
74810: PUSH
74811: LD_VAR 0 1
74815: PPUSH
74816: LD_VAR 0 2
74820: PPUSH
74821: CALL_OW 308
74825: NOT
74826: AND
74827: IFFALSE 74831
// exit ;
74829: GO 74949
// if IsInArea ( unit , area ) then
74831: LD_VAR 0 1
74835: PPUSH
74836: LD_VAR 0 2
74840: PPUSH
74841: CALL_OW 308
74845: IFFALSE 74863
// begin ComMoveToArea ( unit , goAway ) ;
74847: LD_VAR 0 1
74851: PPUSH
74852: LD_VAR 0 3
74856: PPUSH
74857: CALL_OW 113
// exit ;
74861: GO 74949
// end ; if task [ 1 ] [ 1 ] <> M then
74863: LD_VAR 0 7
74867: PUSH
74868: LD_INT 1
74870: ARRAY
74871: PUSH
74872: LD_INT 1
74874: ARRAY
74875: PUSH
74876: LD_STRING M
74878: NONEQUAL
74879: IFFALSE 74883
// exit ;
74881: GO 74949
// x := task [ 1 ] [ 2 ] ;
74883: LD_ADDR_VAR 0 5
74887: PUSH
74888: LD_VAR 0 7
74892: PUSH
74893: LD_INT 1
74895: ARRAY
74896: PUSH
74897: LD_INT 2
74899: ARRAY
74900: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74901: LD_ADDR_VAR 0 6
74905: PUSH
74906: LD_VAR 0 7
74910: PUSH
74911: LD_INT 1
74913: ARRAY
74914: PUSH
74915: LD_INT 3
74917: ARRAY
74918: ST_TO_ADDR
// if InArea ( x , y , area ) then
74919: LD_VAR 0 5
74923: PPUSH
74924: LD_VAR 0 6
74928: PPUSH
74929: LD_VAR 0 2
74933: PPUSH
74934: CALL_OW 309
74938: IFFALSE 74949
// ComStop ( unit ) ;
74940: LD_VAR 0 1
74944: PPUSH
74945: CALL_OW 141
// end ;
74949: LD_VAR 0 4
74953: RET
// export function Abs ( value ) ; begin
74954: LD_INT 0
74956: PPUSH
// result := value ;
74957: LD_ADDR_VAR 0 2
74961: PUSH
74962: LD_VAR 0 1
74966: ST_TO_ADDR
// if value < 0 then
74967: LD_VAR 0 1
74971: PUSH
74972: LD_INT 0
74974: LESS
74975: IFFALSE 74992
// result := value * - 1 ;
74977: LD_ADDR_VAR 0 2
74981: PUSH
74982: LD_VAR 0 1
74986: PUSH
74987: LD_INT 1
74989: NEG
74990: MUL
74991: ST_TO_ADDR
// end ;
74992: LD_VAR 0 2
74996: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74997: LD_INT 0
74999: PPUSH
75000: PPUSH
75001: PPUSH
75002: PPUSH
75003: PPUSH
75004: PPUSH
75005: PPUSH
75006: PPUSH
// if not unit or not building then
75007: LD_VAR 0 1
75011: NOT
75012: PUSH
75013: LD_VAR 0 2
75017: NOT
75018: OR
75019: IFFALSE 75023
// exit ;
75021: GO 75249
// x := GetX ( building ) ;
75023: LD_ADDR_VAR 0 4
75027: PUSH
75028: LD_VAR 0 2
75032: PPUSH
75033: CALL_OW 250
75037: ST_TO_ADDR
// y := GetY ( building ) ;
75038: LD_ADDR_VAR 0 6
75042: PUSH
75043: LD_VAR 0 2
75047: PPUSH
75048: CALL_OW 251
75052: ST_TO_ADDR
// d := GetDir ( building ) ;
75053: LD_ADDR_VAR 0 8
75057: PUSH
75058: LD_VAR 0 2
75062: PPUSH
75063: CALL_OW 254
75067: ST_TO_ADDR
// r := 4 ;
75068: LD_ADDR_VAR 0 9
75072: PUSH
75073: LD_INT 4
75075: ST_TO_ADDR
// for i := 1 to 5 do
75076: LD_ADDR_VAR 0 10
75080: PUSH
75081: DOUBLE
75082: LD_INT 1
75084: DEC
75085: ST_TO_ADDR
75086: LD_INT 5
75088: PUSH
75089: FOR_TO
75090: IFFALSE 75247
// begin _x := ShiftX ( x , d , r + i ) ;
75092: LD_ADDR_VAR 0 5
75096: PUSH
75097: LD_VAR 0 4
75101: PPUSH
75102: LD_VAR 0 8
75106: PPUSH
75107: LD_VAR 0 9
75111: PUSH
75112: LD_VAR 0 10
75116: PLUS
75117: PPUSH
75118: CALL_OW 272
75122: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75123: LD_ADDR_VAR 0 7
75127: PUSH
75128: LD_VAR 0 6
75132: PPUSH
75133: LD_VAR 0 8
75137: PPUSH
75138: LD_VAR 0 9
75142: PUSH
75143: LD_VAR 0 10
75147: PLUS
75148: PPUSH
75149: CALL_OW 273
75153: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75154: LD_VAR 0 5
75158: PPUSH
75159: LD_VAR 0 7
75163: PPUSH
75164: CALL_OW 488
75168: PUSH
75169: LD_VAR 0 5
75173: PPUSH
75174: LD_VAR 0 7
75178: PPUSH
75179: CALL_OW 428
75183: PPUSH
75184: CALL_OW 247
75188: PUSH
75189: LD_INT 3
75191: PUSH
75192: LD_INT 2
75194: PUSH
75195: EMPTY
75196: LIST
75197: LIST
75198: IN
75199: NOT
75200: AND
75201: IFFALSE 75245
// begin ComMoveXY ( unit , _x , _y ) ;
75203: LD_VAR 0 1
75207: PPUSH
75208: LD_VAR 0 5
75212: PPUSH
75213: LD_VAR 0 7
75217: PPUSH
75218: CALL_OW 111
// result := [ _x , _y ] ;
75222: LD_ADDR_VAR 0 3
75226: PUSH
75227: LD_VAR 0 5
75231: PUSH
75232: LD_VAR 0 7
75236: PUSH
75237: EMPTY
75238: LIST
75239: LIST
75240: ST_TO_ADDR
// exit ;
75241: POP
75242: POP
75243: GO 75249
// end ; end ;
75245: GO 75089
75247: POP
75248: POP
// end ;
75249: LD_VAR 0 3
75253: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75254: LD_INT 0
75256: PPUSH
75257: PPUSH
75258: PPUSH
// result := 0 ;
75259: LD_ADDR_VAR 0 3
75263: PUSH
75264: LD_INT 0
75266: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75267: LD_VAR 0 1
75271: PUSH
75272: LD_INT 0
75274: LESS
75275: PUSH
75276: LD_VAR 0 1
75280: PUSH
75281: LD_INT 8
75283: GREATER
75284: OR
75285: PUSH
75286: LD_VAR 0 2
75290: PUSH
75291: LD_INT 0
75293: LESS
75294: OR
75295: PUSH
75296: LD_VAR 0 2
75300: PUSH
75301: LD_INT 8
75303: GREATER
75304: OR
75305: IFFALSE 75309
// exit ;
75307: GO 75384
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75309: LD_ADDR_VAR 0 4
75313: PUSH
75314: LD_INT 22
75316: PUSH
75317: LD_VAR 0 2
75321: PUSH
75322: EMPTY
75323: LIST
75324: LIST
75325: PPUSH
75326: CALL_OW 69
75330: PUSH
75331: FOR_IN
75332: IFFALSE 75382
// begin un := UnitShoot ( i ) ;
75334: LD_ADDR_VAR 0 5
75338: PUSH
75339: LD_VAR 0 4
75343: PPUSH
75344: CALL_OW 504
75348: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75349: LD_VAR 0 5
75353: PPUSH
75354: CALL_OW 255
75358: PUSH
75359: LD_VAR 0 1
75363: EQUAL
75364: IFFALSE 75380
// begin result := un ;
75366: LD_ADDR_VAR 0 3
75370: PUSH
75371: LD_VAR 0 5
75375: ST_TO_ADDR
// exit ;
75376: POP
75377: POP
75378: GO 75384
// end ; end ;
75380: GO 75331
75382: POP
75383: POP
// end ;
75384: LD_VAR 0 3
75388: RET
// export function GetCargoBay ( units ) ; begin
75389: LD_INT 0
75391: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75392: LD_ADDR_VAR 0 2
75396: PUSH
75397: LD_VAR 0 1
75401: PPUSH
75402: LD_INT 2
75404: PUSH
75405: LD_INT 34
75407: PUSH
75408: LD_INT 12
75410: PUSH
75411: EMPTY
75412: LIST
75413: LIST
75414: PUSH
75415: LD_INT 34
75417: PUSH
75418: LD_INT 51
75420: PUSH
75421: EMPTY
75422: LIST
75423: LIST
75424: PUSH
75425: LD_INT 34
75427: PUSH
75428: LD_INT 32
75430: PUSH
75431: EMPTY
75432: LIST
75433: LIST
75434: PUSH
75435: LD_INT 34
75437: PUSH
75438: LD_INT 89
75440: PUSH
75441: EMPTY
75442: LIST
75443: LIST
75444: PUSH
75445: EMPTY
75446: LIST
75447: LIST
75448: LIST
75449: LIST
75450: LIST
75451: PPUSH
75452: CALL_OW 72
75456: ST_TO_ADDR
// end ;
75457: LD_VAR 0 2
75461: RET
// export function Negate ( value ) ; begin
75462: LD_INT 0
75464: PPUSH
// result := not value ;
75465: LD_ADDR_VAR 0 2
75469: PUSH
75470: LD_VAR 0 1
75474: NOT
75475: ST_TO_ADDR
// end ;
75476: LD_VAR 0 2
75480: RET
// export function Inc ( value ) ; begin
75481: LD_INT 0
75483: PPUSH
// result := value + 1 ;
75484: LD_ADDR_VAR 0 2
75488: PUSH
75489: LD_VAR 0 1
75493: PUSH
75494: LD_INT 1
75496: PLUS
75497: ST_TO_ADDR
// end ;
75498: LD_VAR 0 2
75502: RET
// export function Dec ( value ) ; begin
75503: LD_INT 0
75505: PPUSH
// result := value - 1 ;
75506: LD_ADDR_VAR 0 2
75510: PUSH
75511: LD_VAR 0 1
75515: PUSH
75516: LD_INT 1
75518: MINUS
75519: ST_TO_ADDR
// end ;
75520: LD_VAR 0 2
75524: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75525: LD_INT 0
75527: PPUSH
75528: PPUSH
75529: PPUSH
75530: PPUSH
75531: PPUSH
75532: PPUSH
75533: PPUSH
75534: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75535: LD_VAR 0 1
75539: PPUSH
75540: LD_VAR 0 2
75544: PPUSH
75545: CALL_OW 488
75549: NOT
75550: PUSH
75551: LD_VAR 0 3
75555: PPUSH
75556: LD_VAR 0 4
75560: PPUSH
75561: CALL_OW 488
75565: NOT
75566: OR
75567: IFFALSE 75580
// begin result := - 1 ;
75569: LD_ADDR_VAR 0 5
75573: PUSH
75574: LD_INT 1
75576: NEG
75577: ST_TO_ADDR
// exit ;
75578: GO 75815
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75580: LD_ADDR_VAR 0 12
75584: PUSH
75585: LD_VAR 0 1
75589: PPUSH
75590: LD_VAR 0 2
75594: PPUSH
75595: LD_VAR 0 3
75599: PPUSH
75600: LD_VAR 0 4
75604: PPUSH
75605: CALL 74665 0 4
75609: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75610: LD_ADDR_VAR 0 11
75614: PUSH
75615: LD_VAR 0 1
75619: PPUSH
75620: LD_VAR 0 2
75624: PPUSH
75625: LD_VAR 0 12
75629: PUSH
75630: LD_INT 1
75632: ARRAY
75633: PPUSH
75634: LD_VAR 0 12
75638: PUSH
75639: LD_INT 2
75641: ARRAY
75642: PPUSH
75643: CALL_OW 298
75647: ST_TO_ADDR
// distance := 9999 ;
75648: LD_ADDR_VAR 0 10
75652: PUSH
75653: LD_INT 9999
75655: ST_TO_ADDR
// for i := 0 to 5 do
75656: LD_ADDR_VAR 0 6
75660: PUSH
75661: DOUBLE
75662: LD_INT 0
75664: DEC
75665: ST_TO_ADDR
75666: LD_INT 5
75668: PUSH
75669: FOR_TO
75670: IFFALSE 75813
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75672: LD_ADDR_VAR 0 7
75676: PUSH
75677: LD_VAR 0 1
75681: PPUSH
75682: LD_VAR 0 6
75686: PPUSH
75687: LD_VAR 0 11
75691: PPUSH
75692: CALL_OW 272
75696: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75697: LD_ADDR_VAR 0 8
75701: PUSH
75702: LD_VAR 0 2
75706: PPUSH
75707: LD_VAR 0 6
75711: PPUSH
75712: LD_VAR 0 11
75716: PPUSH
75717: CALL_OW 273
75721: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75722: LD_VAR 0 7
75726: PPUSH
75727: LD_VAR 0 8
75731: PPUSH
75732: CALL_OW 488
75736: NOT
75737: IFFALSE 75741
// continue ;
75739: GO 75669
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75741: LD_ADDR_VAR 0 9
75745: PUSH
75746: LD_VAR 0 12
75750: PUSH
75751: LD_INT 1
75753: ARRAY
75754: PPUSH
75755: LD_VAR 0 12
75759: PUSH
75760: LD_INT 2
75762: ARRAY
75763: PPUSH
75764: LD_VAR 0 7
75768: PPUSH
75769: LD_VAR 0 8
75773: PPUSH
75774: CALL_OW 298
75778: ST_TO_ADDR
// if tmp < distance then
75779: LD_VAR 0 9
75783: PUSH
75784: LD_VAR 0 10
75788: LESS
75789: IFFALSE 75811
// begin result := i ;
75791: LD_ADDR_VAR 0 5
75795: PUSH
75796: LD_VAR 0 6
75800: ST_TO_ADDR
// distance := tmp ;
75801: LD_ADDR_VAR 0 10
75805: PUSH
75806: LD_VAR 0 9
75810: ST_TO_ADDR
// end ; end ;
75811: GO 75669
75813: POP
75814: POP
// end ;
75815: LD_VAR 0 5
75819: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75820: LD_INT 0
75822: PPUSH
75823: PPUSH
// if not driver or not IsInUnit ( driver ) then
75824: LD_VAR 0 1
75828: NOT
75829: PUSH
75830: LD_VAR 0 1
75834: PPUSH
75835: CALL_OW 310
75839: NOT
75840: OR
75841: IFFALSE 75845
// exit ;
75843: GO 75935
// vehicle := IsInUnit ( driver ) ;
75845: LD_ADDR_VAR 0 3
75849: PUSH
75850: LD_VAR 0 1
75854: PPUSH
75855: CALL_OW 310
75859: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75860: LD_VAR 0 1
75864: PPUSH
75865: LD_STRING \
75867: PUSH
75868: LD_INT 0
75870: PUSH
75871: LD_INT 0
75873: PUSH
75874: LD_INT 0
75876: PUSH
75877: LD_INT 0
75879: PUSH
75880: LD_INT 0
75882: PUSH
75883: LD_INT 0
75885: PUSH
75886: EMPTY
75887: LIST
75888: LIST
75889: LIST
75890: LIST
75891: LIST
75892: LIST
75893: LIST
75894: PUSH
75895: LD_STRING E
75897: PUSH
75898: LD_INT 0
75900: PUSH
75901: LD_INT 0
75903: PUSH
75904: LD_VAR 0 3
75908: PUSH
75909: LD_INT 0
75911: PUSH
75912: LD_INT 0
75914: PUSH
75915: LD_INT 0
75917: PUSH
75918: EMPTY
75919: LIST
75920: LIST
75921: LIST
75922: LIST
75923: LIST
75924: LIST
75925: LIST
75926: PUSH
75927: EMPTY
75928: LIST
75929: LIST
75930: PPUSH
75931: CALL_OW 446
// end ;
75935: LD_VAR 0 2
75939: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75940: LD_INT 0
75942: PPUSH
75943: PPUSH
// if not driver or not IsInUnit ( driver ) then
75944: LD_VAR 0 1
75948: NOT
75949: PUSH
75950: LD_VAR 0 1
75954: PPUSH
75955: CALL_OW 310
75959: NOT
75960: OR
75961: IFFALSE 75965
// exit ;
75963: GO 76055
// vehicle := IsInUnit ( driver ) ;
75965: LD_ADDR_VAR 0 3
75969: PUSH
75970: LD_VAR 0 1
75974: PPUSH
75975: CALL_OW 310
75979: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75980: LD_VAR 0 1
75984: PPUSH
75985: LD_STRING \
75987: PUSH
75988: LD_INT 0
75990: PUSH
75991: LD_INT 0
75993: PUSH
75994: LD_INT 0
75996: PUSH
75997: LD_INT 0
75999: PUSH
76000: LD_INT 0
76002: PUSH
76003: LD_INT 0
76005: PUSH
76006: EMPTY
76007: LIST
76008: LIST
76009: LIST
76010: LIST
76011: LIST
76012: LIST
76013: LIST
76014: PUSH
76015: LD_STRING E
76017: PUSH
76018: LD_INT 0
76020: PUSH
76021: LD_INT 0
76023: PUSH
76024: LD_VAR 0 3
76028: PUSH
76029: LD_INT 0
76031: PUSH
76032: LD_INT 0
76034: PUSH
76035: LD_INT 0
76037: PUSH
76038: EMPTY
76039: LIST
76040: LIST
76041: LIST
76042: LIST
76043: LIST
76044: LIST
76045: LIST
76046: PUSH
76047: EMPTY
76048: LIST
76049: LIST
76050: PPUSH
76051: CALL_OW 447
// end ;
76055: LD_VAR 0 2
76059: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76060: LD_INT 0
76062: PPUSH
76063: PPUSH
76064: PPUSH
// tmp := [ ] ;
76065: LD_ADDR_VAR 0 5
76069: PUSH
76070: EMPTY
76071: ST_TO_ADDR
// for i in units do
76072: LD_ADDR_VAR 0 4
76076: PUSH
76077: LD_VAR 0 1
76081: PUSH
76082: FOR_IN
76083: IFFALSE 76121
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76085: LD_ADDR_VAR 0 5
76089: PUSH
76090: LD_VAR 0 5
76094: PPUSH
76095: LD_VAR 0 5
76099: PUSH
76100: LD_INT 1
76102: PLUS
76103: PPUSH
76104: LD_VAR 0 4
76108: PPUSH
76109: CALL_OW 256
76113: PPUSH
76114: CALL_OW 2
76118: ST_TO_ADDR
76119: GO 76082
76121: POP
76122: POP
// if not tmp then
76123: LD_VAR 0 5
76127: NOT
76128: IFFALSE 76132
// exit ;
76130: GO 76180
// if asc then
76132: LD_VAR 0 2
76136: IFFALSE 76160
// result := SortListByListAsc ( units , tmp ) else
76138: LD_ADDR_VAR 0 3
76142: PUSH
76143: LD_VAR 0 1
76147: PPUSH
76148: LD_VAR 0 5
76152: PPUSH
76153: CALL_OW 76
76157: ST_TO_ADDR
76158: GO 76180
// result := SortListByListDesc ( units , tmp ) ;
76160: LD_ADDR_VAR 0 3
76164: PUSH
76165: LD_VAR 0 1
76169: PPUSH
76170: LD_VAR 0 5
76174: PPUSH
76175: CALL_OW 77
76179: ST_TO_ADDR
// end ;
76180: LD_VAR 0 3
76184: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76185: LD_INT 0
76187: PPUSH
76188: PPUSH
// task := GetTaskList ( mech ) ;
76189: LD_ADDR_VAR 0 4
76193: PUSH
76194: LD_VAR 0 1
76198: PPUSH
76199: CALL_OW 437
76203: ST_TO_ADDR
// if not task then
76204: LD_VAR 0 4
76208: NOT
76209: IFFALSE 76213
// exit ;
76211: GO 76255
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76213: LD_ADDR_VAR 0 3
76217: PUSH
76218: LD_VAR 0 4
76222: PUSH
76223: LD_INT 1
76225: ARRAY
76226: PUSH
76227: LD_INT 1
76229: ARRAY
76230: PUSH
76231: LD_STRING r
76233: EQUAL
76234: PUSH
76235: LD_VAR 0 4
76239: PUSH
76240: LD_INT 1
76242: ARRAY
76243: PUSH
76244: LD_INT 4
76246: ARRAY
76247: PUSH
76248: LD_VAR 0 2
76252: EQUAL
76253: AND
76254: ST_TO_ADDR
// end ;
76255: LD_VAR 0 3
76259: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76260: LD_INT 0
76262: PPUSH
// SetDir ( unit , d ) ;
76263: LD_VAR 0 1
76267: PPUSH
76268: LD_VAR 0 4
76272: PPUSH
76273: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76277: LD_VAR 0 1
76281: PPUSH
76282: LD_VAR 0 2
76286: PPUSH
76287: LD_VAR 0 3
76291: PPUSH
76292: LD_VAR 0 5
76296: PPUSH
76297: CALL_OW 48
// end ;
76301: LD_VAR 0 6
76305: RET
// export function ToNaturalNumber ( number ) ; begin
76306: LD_INT 0
76308: PPUSH
// result := number div 1 ;
76309: LD_ADDR_VAR 0 2
76313: PUSH
76314: LD_VAR 0 1
76318: PUSH
76319: LD_INT 1
76321: DIV
76322: ST_TO_ADDR
// if number < 0 then
76323: LD_VAR 0 1
76327: PUSH
76328: LD_INT 0
76330: LESS
76331: IFFALSE 76341
// result := 0 ;
76333: LD_ADDR_VAR 0 2
76337: PUSH
76338: LD_INT 0
76340: ST_TO_ADDR
// end ;
76341: LD_VAR 0 2
76345: RET
// export function SortByClass ( units , class ) ; var un ; begin
76346: LD_INT 0
76348: PPUSH
76349: PPUSH
// if not units or not class then
76350: LD_VAR 0 1
76354: NOT
76355: PUSH
76356: LD_VAR 0 2
76360: NOT
76361: OR
76362: IFFALSE 76366
// exit ;
76364: GO 76461
// result := [ ] ;
76366: LD_ADDR_VAR 0 3
76370: PUSH
76371: EMPTY
76372: ST_TO_ADDR
// for un in units do
76373: LD_ADDR_VAR 0 4
76377: PUSH
76378: LD_VAR 0 1
76382: PUSH
76383: FOR_IN
76384: IFFALSE 76459
// if GetClass ( un ) = class then
76386: LD_VAR 0 4
76390: PPUSH
76391: CALL_OW 257
76395: PUSH
76396: LD_VAR 0 2
76400: EQUAL
76401: IFFALSE 76428
// result := Insert ( result , 1 , un ) else
76403: LD_ADDR_VAR 0 3
76407: PUSH
76408: LD_VAR 0 3
76412: PPUSH
76413: LD_INT 1
76415: PPUSH
76416: LD_VAR 0 4
76420: PPUSH
76421: CALL_OW 2
76425: ST_TO_ADDR
76426: GO 76457
// result := Replace ( result , result + 1 , un ) ;
76428: LD_ADDR_VAR 0 3
76432: PUSH
76433: LD_VAR 0 3
76437: PPUSH
76438: LD_VAR 0 3
76442: PUSH
76443: LD_INT 1
76445: PLUS
76446: PPUSH
76447: LD_VAR 0 4
76451: PPUSH
76452: CALL_OW 1
76456: ST_TO_ADDR
76457: GO 76383
76459: POP
76460: POP
// end ;
76461: LD_VAR 0 3
76465: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76466: LD_INT 0
76468: PPUSH
76469: PPUSH
76470: PPUSH
76471: PPUSH
76472: PPUSH
76473: PPUSH
76474: PPUSH
// result := [ ] ;
76475: LD_ADDR_VAR 0 4
76479: PUSH
76480: EMPTY
76481: ST_TO_ADDR
// if x - r < 0 then
76482: LD_VAR 0 1
76486: PUSH
76487: LD_VAR 0 3
76491: MINUS
76492: PUSH
76493: LD_INT 0
76495: LESS
76496: IFFALSE 76508
// min_x := 0 else
76498: LD_ADDR_VAR 0 8
76502: PUSH
76503: LD_INT 0
76505: ST_TO_ADDR
76506: GO 76524
// min_x := x - r ;
76508: LD_ADDR_VAR 0 8
76512: PUSH
76513: LD_VAR 0 1
76517: PUSH
76518: LD_VAR 0 3
76522: MINUS
76523: ST_TO_ADDR
// if y - r < 0 then
76524: LD_VAR 0 2
76528: PUSH
76529: LD_VAR 0 3
76533: MINUS
76534: PUSH
76535: LD_INT 0
76537: LESS
76538: IFFALSE 76550
// min_y := 0 else
76540: LD_ADDR_VAR 0 7
76544: PUSH
76545: LD_INT 0
76547: ST_TO_ADDR
76548: GO 76566
// min_y := y - r ;
76550: LD_ADDR_VAR 0 7
76554: PUSH
76555: LD_VAR 0 2
76559: PUSH
76560: LD_VAR 0 3
76564: MINUS
76565: ST_TO_ADDR
// max_x := x + r ;
76566: LD_ADDR_VAR 0 9
76570: PUSH
76571: LD_VAR 0 1
76575: PUSH
76576: LD_VAR 0 3
76580: PLUS
76581: ST_TO_ADDR
// max_y := y + r ;
76582: LD_ADDR_VAR 0 10
76586: PUSH
76587: LD_VAR 0 2
76591: PUSH
76592: LD_VAR 0 3
76596: PLUS
76597: ST_TO_ADDR
// for _x = min_x to max_x do
76598: LD_ADDR_VAR 0 5
76602: PUSH
76603: DOUBLE
76604: LD_VAR 0 8
76608: DEC
76609: ST_TO_ADDR
76610: LD_VAR 0 9
76614: PUSH
76615: FOR_TO
76616: IFFALSE 76717
// for _y = min_y to max_y do
76618: LD_ADDR_VAR 0 6
76622: PUSH
76623: DOUBLE
76624: LD_VAR 0 7
76628: DEC
76629: ST_TO_ADDR
76630: LD_VAR 0 10
76634: PUSH
76635: FOR_TO
76636: IFFALSE 76713
// begin if not ValidHex ( _x , _y ) then
76638: LD_VAR 0 5
76642: PPUSH
76643: LD_VAR 0 6
76647: PPUSH
76648: CALL_OW 488
76652: NOT
76653: IFFALSE 76657
// continue ;
76655: GO 76635
// if GetResourceTypeXY ( _x , _y ) then
76657: LD_VAR 0 5
76661: PPUSH
76662: LD_VAR 0 6
76666: PPUSH
76667: CALL_OW 283
76671: IFFALSE 76711
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76673: LD_ADDR_VAR 0 4
76677: PUSH
76678: LD_VAR 0 4
76682: PPUSH
76683: LD_VAR 0 4
76687: PUSH
76688: LD_INT 1
76690: PLUS
76691: PPUSH
76692: LD_VAR 0 5
76696: PUSH
76697: LD_VAR 0 6
76701: PUSH
76702: EMPTY
76703: LIST
76704: LIST
76705: PPUSH
76706: CALL_OW 1
76710: ST_TO_ADDR
// end ;
76711: GO 76635
76713: POP
76714: POP
76715: GO 76615
76717: POP
76718: POP
// end ;
76719: LD_VAR 0 4
76723: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76724: LD_INT 0
76726: PPUSH
76727: PPUSH
76728: PPUSH
76729: PPUSH
76730: PPUSH
76731: PPUSH
76732: PPUSH
76733: PPUSH
// if not units then
76734: LD_VAR 0 1
76738: NOT
76739: IFFALSE 76743
// exit ;
76741: GO 77267
// result := UnitFilter ( units , [ f_ok ] ) ;
76743: LD_ADDR_VAR 0 3
76747: PUSH
76748: LD_VAR 0 1
76752: PPUSH
76753: LD_INT 50
76755: PUSH
76756: EMPTY
76757: LIST
76758: PPUSH
76759: CALL_OW 72
76763: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76764: LD_ADDR_VAR 0 8
76768: PUSH
76769: LD_VAR 0 1
76773: PUSH
76774: LD_INT 1
76776: ARRAY
76777: PPUSH
76778: CALL_OW 255
76782: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
76783: LD_ADDR_VAR 0 10
76787: PUSH
76788: LD_INT 29
76790: PUSH
76791: LD_INT 91
76793: PUSH
76794: LD_INT 49
76796: PUSH
76797: EMPTY
76798: LIST
76799: LIST
76800: LIST
76801: ST_TO_ADDR
// if not result then
76802: LD_VAR 0 3
76806: NOT
76807: IFFALSE 76811
// exit ;
76809: GO 77267
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76811: LD_ADDR_VAR 0 5
76815: PUSH
76816: LD_INT 81
76818: PUSH
76819: LD_VAR 0 8
76823: PUSH
76824: EMPTY
76825: LIST
76826: LIST
76827: PPUSH
76828: CALL_OW 69
76832: ST_TO_ADDR
// for i in result do
76833: LD_ADDR_VAR 0 4
76837: PUSH
76838: LD_VAR 0 3
76842: PUSH
76843: FOR_IN
76844: IFFALSE 77265
// begin tag := GetTag ( i ) + 1 ;
76846: LD_ADDR_VAR 0 9
76850: PUSH
76851: LD_VAR 0 4
76855: PPUSH
76856: CALL_OW 110
76860: PUSH
76861: LD_INT 1
76863: PLUS
76864: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76865: LD_ADDR_VAR 0 7
76869: PUSH
76870: LD_VAR 0 4
76874: PPUSH
76875: CALL_OW 250
76879: PPUSH
76880: LD_VAR 0 4
76884: PPUSH
76885: CALL_OW 251
76889: PPUSH
76890: LD_INT 6
76892: PPUSH
76893: CALL 76466 0 3
76897: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
76898: LD_VAR 0 4
76902: PPUSH
76903: CALL_OW 247
76907: PUSH
76908: LD_INT 2
76910: EQUAL
76911: PUSH
76912: LD_VAR 0 7
76916: AND
76917: PUSH
76918: LD_VAR 0 4
76922: PPUSH
76923: CALL_OW 264
76927: PUSH
76928: LD_VAR 0 10
76932: IN
76933: NOT
76934: AND
76935: IFFALSE 76974
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76937: LD_VAR 0 4
76941: PPUSH
76942: LD_VAR 0 7
76946: PUSH
76947: LD_INT 1
76949: ARRAY
76950: PUSH
76951: LD_INT 1
76953: ARRAY
76954: PPUSH
76955: LD_VAR 0 7
76959: PUSH
76960: LD_INT 1
76962: ARRAY
76963: PUSH
76964: LD_INT 2
76966: ARRAY
76967: PPUSH
76968: CALL_OW 116
76972: GO 77263
// if path > tag then
76974: LD_VAR 0 2
76978: PUSH
76979: LD_VAR 0 9
76983: GREATER
76984: IFFALSE 77192
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
76986: LD_ADDR_VAR 0 6
76990: PUSH
76991: LD_VAR 0 5
76995: PPUSH
76996: LD_INT 91
76998: PUSH
76999: LD_VAR 0 4
77003: PUSH
77004: LD_INT 8
77006: PUSH
77007: EMPTY
77008: LIST
77009: LIST
77010: LIST
77011: PPUSH
77012: CALL_OW 72
77016: ST_TO_ADDR
// if nearEnemy then
77017: LD_VAR 0 6
77021: IFFALSE 77090
// begin if GetWeapon ( i ) = ru_time_lapser then
77023: LD_VAR 0 4
77027: PPUSH
77028: CALL_OW 264
77032: PUSH
77033: LD_INT 49
77035: EQUAL
77036: IFFALSE 77064
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77038: LD_VAR 0 4
77042: PPUSH
77043: LD_VAR 0 6
77047: PPUSH
77048: LD_VAR 0 4
77052: PPUSH
77053: CALL_OW 74
77057: PPUSH
77058: CALL_OW 112
77062: GO 77088
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
77064: LD_VAR 0 4
77068: PPUSH
77069: LD_VAR 0 6
77073: PPUSH
77074: LD_VAR 0 4
77078: PPUSH
77079: CALL_OW 74
77083: PPUSH
77084: CALL_OW 115
// end else
77088: GO 77190
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77090: LD_VAR 0 4
77094: PPUSH
77095: LD_VAR 0 2
77099: PUSH
77100: LD_VAR 0 9
77104: ARRAY
77105: PUSH
77106: LD_INT 1
77108: ARRAY
77109: PPUSH
77110: LD_VAR 0 2
77114: PUSH
77115: LD_VAR 0 9
77119: ARRAY
77120: PUSH
77121: LD_INT 2
77123: ARRAY
77124: PPUSH
77125: CALL_OW 297
77129: PUSH
77130: LD_INT 6
77132: GREATER
77133: IFFALSE 77176
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77135: LD_VAR 0 4
77139: PPUSH
77140: LD_VAR 0 2
77144: PUSH
77145: LD_VAR 0 9
77149: ARRAY
77150: PUSH
77151: LD_INT 1
77153: ARRAY
77154: PPUSH
77155: LD_VAR 0 2
77159: PUSH
77160: LD_VAR 0 9
77164: ARRAY
77165: PUSH
77166: LD_INT 2
77168: ARRAY
77169: PPUSH
77170: CALL_OW 114
77174: GO 77190
// SetTag ( i , tag ) ;
77176: LD_VAR 0 4
77180: PPUSH
77181: LD_VAR 0 9
77185: PPUSH
77186: CALL_OW 109
// end else
77190: GO 77263
// if enemy then
77192: LD_VAR 0 5
77196: IFFALSE 77263
// begin if GetWeapon ( i ) = ru_time_lapser then
77198: LD_VAR 0 4
77202: PPUSH
77203: CALL_OW 264
77207: PUSH
77208: LD_INT 49
77210: EQUAL
77211: IFFALSE 77239
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
77213: LD_VAR 0 4
77217: PPUSH
77218: LD_VAR 0 5
77222: PPUSH
77223: LD_VAR 0 4
77227: PPUSH
77228: CALL_OW 74
77232: PPUSH
77233: CALL_OW 112
77237: GO 77263
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77239: LD_VAR 0 4
77243: PPUSH
77244: LD_VAR 0 5
77248: PPUSH
77249: LD_VAR 0 4
77253: PPUSH
77254: CALL_OW 74
77258: PPUSH
77259: CALL_OW 115
// end ; end ;
77263: GO 76843
77265: POP
77266: POP
// end ;
77267: LD_VAR 0 3
77271: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77272: LD_INT 0
77274: PPUSH
77275: PPUSH
77276: PPUSH
// if not unit or IsInUnit ( unit ) then
77277: LD_VAR 0 1
77281: NOT
77282: PUSH
77283: LD_VAR 0 1
77287: PPUSH
77288: CALL_OW 310
77292: OR
77293: IFFALSE 77297
// exit ;
77295: GO 77388
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77297: LD_ADDR_VAR 0 4
77301: PUSH
77302: LD_VAR 0 1
77306: PPUSH
77307: CALL_OW 250
77311: PPUSH
77312: LD_VAR 0 2
77316: PPUSH
77317: LD_INT 1
77319: PPUSH
77320: CALL_OW 272
77324: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77325: LD_ADDR_VAR 0 5
77329: PUSH
77330: LD_VAR 0 1
77334: PPUSH
77335: CALL_OW 251
77339: PPUSH
77340: LD_VAR 0 2
77344: PPUSH
77345: LD_INT 1
77347: PPUSH
77348: CALL_OW 273
77352: ST_TO_ADDR
// if ValidHex ( x , y ) then
77353: LD_VAR 0 4
77357: PPUSH
77358: LD_VAR 0 5
77362: PPUSH
77363: CALL_OW 488
77367: IFFALSE 77388
// ComTurnXY ( unit , x , y ) ;
77369: LD_VAR 0 1
77373: PPUSH
77374: LD_VAR 0 4
77378: PPUSH
77379: LD_VAR 0 5
77383: PPUSH
77384: CALL_OW 118
// end ;
77388: LD_VAR 0 3
77392: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77393: LD_INT 0
77395: PPUSH
77396: PPUSH
// result := false ;
77397: LD_ADDR_VAR 0 3
77401: PUSH
77402: LD_INT 0
77404: ST_TO_ADDR
// if not units then
77405: LD_VAR 0 2
77409: NOT
77410: IFFALSE 77414
// exit ;
77412: GO 77459
// for i in units do
77414: LD_ADDR_VAR 0 4
77418: PUSH
77419: LD_VAR 0 2
77423: PUSH
77424: FOR_IN
77425: IFFALSE 77457
// if See ( side , i ) then
77427: LD_VAR 0 1
77431: PPUSH
77432: LD_VAR 0 4
77436: PPUSH
77437: CALL_OW 292
77441: IFFALSE 77455
// begin result := true ;
77443: LD_ADDR_VAR 0 3
77447: PUSH
77448: LD_INT 1
77450: ST_TO_ADDR
// exit ;
77451: POP
77452: POP
77453: GO 77459
// end ;
77455: GO 77424
77457: POP
77458: POP
// end ;
77459: LD_VAR 0 3
77463: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77464: LD_INT 0
77466: PPUSH
77467: PPUSH
77468: PPUSH
77469: PPUSH
// if not unit or not points then
77470: LD_VAR 0 1
77474: NOT
77475: PUSH
77476: LD_VAR 0 2
77480: NOT
77481: OR
77482: IFFALSE 77486
// exit ;
77484: GO 77576
// dist := 99999 ;
77486: LD_ADDR_VAR 0 5
77490: PUSH
77491: LD_INT 99999
77493: ST_TO_ADDR
// for i in points do
77494: LD_ADDR_VAR 0 4
77498: PUSH
77499: LD_VAR 0 2
77503: PUSH
77504: FOR_IN
77505: IFFALSE 77574
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77507: LD_ADDR_VAR 0 6
77511: PUSH
77512: LD_VAR 0 1
77516: PPUSH
77517: LD_VAR 0 4
77521: PUSH
77522: LD_INT 1
77524: ARRAY
77525: PPUSH
77526: LD_VAR 0 4
77530: PUSH
77531: LD_INT 2
77533: ARRAY
77534: PPUSH
77535: CALL_OW 297
77539: ST_TO_ADDR
// if tmpDist < dist then
77540: LD_VAR 0 6
77544: PUSH
77545: LD_VAR 0 5
77549: LESS
77550: IFFALSE 77572
// begin result := i ;
77552: LD_ADDR_VAR 0 3
77556: PUSH
77557: LD_VAR 0 4
77561: ST_TO_ADDR
// dist := tmpDist ;
77562: LD_ADDR_VAR 0 5
77566: PUSH
77567: LD_VAR 0 6
77571: ST_TO_ADDR
// end ; end ;
77572: GO 77504
77574: POP
77575: POP
// end ;
77576: LD_VAR 0 3
77580: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
77581: LD_INT 0
77583: PPUSH
// uc_side := side ;
77584: LD_ADDR_OWVAR 20
77588: PUSH
77589: LD_VAR 0 1
77593: ST_TO_ADDR
// uc_nation := 3 ;
77594: LD_ADDR_OWVAR 21
77598: PUSH
77599: LD_INT 3
77601: ST_TO_ADDR
// vc_chassis := 25 ;
77602: LD_ADDR_OWVAR 37
77606: PUSH
77607: LD_INT 25
77609: ST_TO_ADDR
// vc_engine := engine_siberite ;
77610: LD_ADDR_OWVAR 39
77614: PUSH
77615: LD_INT 3
77617: ST_TO_ADDR
// vc_control := control_computer ;
77618: LD_ADDR_OWVAR 38
77622: PUSH
77623: LD_INT 3
77625: ST_TO_ADDR
// vc_weapon := 59 ;
77626: LD_ADDR_OWVAR 40
77630: PUSH
77631: LD_INT 59
77633: ST_TO_ADDR
// result := CreateVehicle ;
77634: LD_ADDR_VAR 0 5
77638: PUSH
77639: CALL_OW 45
77643: ST_TO_ADDR
// SetDir ( result , d ) ;
77644: LD_VAR 0 5
77648: PPUSH
77649: LD_VAR 0 4
77653: PPUSH
77654: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
77658: LD_VAR 0 5
77662: PPUSH
77663: LD_VAR 0 2
77667: PPUSH
77668: LD_VAR 0 3
77672: PPUSH
77673: LD_INT 0
77675: PPUSH
77676: CALL_OW 48
// end ;
77680: LD_VAR 0 5
77684: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
77685: LD_INT 0
77687: PPUSH
77688: PPUSH
77689: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
77690: LD_ADDR_VAR 0 2
77694: PUSH
77695: LD_INT 0
77697: PUSH
77698: LD_INT 0
77700: PUSH
77701: LD_INT 0
77703: PUSH
77704: LD_INT 0
77706: PUSH
77707: EMPTY
77708: LIST
77709: LIST
77710: LIST
77711: LIST
77712: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
77713: LD_VAR 0 1
77717: NOT
77718: PUSH
77719: LD_VAR 0 1
77723: PPUSH
77724: CALL_OW 264
77728: PUSH
77729: LD_INT 12
77731: PUSH
77732: LD_INT 51
77734: PUSH
77735: LD_INT 32
77737: PUSH
77738: LD_INT 89
77740: PUSH
77741: EMPTY
77742: LIST
77743: LIST
77744: LIST
77745: LIST
77746: IN
77747: NOT
77748: OR
77749: IFFALSE 77753
// exit ;
77751: GO 77851
// for i := 1 to 3 do
77753: LD_ADDR_VAR 0 3
77757: PUSH
77758: DOUBLE
77759: LD_INT 1
77761: DEC
77762: ST_TO_ADDR
77763: LD_INT 3
77765: PUSH
77766: FOR_TO
77767: IFFALSE 77849
// begin tmp := GetCargo ( cargo , i ) ;
77769: LD_ADDR_VAR 0 4
77773: PUSH
77774: LD_VAR 0 1
77778: PPUSH
77779: LD_VAR 0 3
77783: PPUSH
77784: CALL_OW 289
77788: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
77789: LD_ADDR_VAR 0 2
77793: PUSH
77794: LD_VAR 0 2
77798: PPUSH
77799: LD_VAR 0 3
77803: PPUSH
77804: LD_VAR 0 4
77808: PPUSH
77809: CALL_OW 1
77813: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
77814: LD_ADDR_VAR 0 2
77818: PUSH
77819: LD_VAR 0 2
77823: PPUSH
77824: LD_INT 4
77826: PPUSH
77827: LD_VAR 0 2
77831: PUSH
77832: LD_INT 4
77834: ARRAY
77835: PUSH
77836: LD_VAR 0 4
77840: PLUS
77841: PPUSH
77842: CALL_OW 1
77846: ST_TO_ADDR
// end ;
77847: GO 77766
77849: POP
77850: POP
// end ;
77851: LD_VAR 0 2
77855: RET
// export function Length ( array ) ; begin
77856: LD_INT 0
77858: PPUSH
// result := array + 0 ;
77859: LD_ADDR_VAR 0 2
77863: PUSH
77864: LD_VAR 0 1
77868: PUSH
77869: LD_INT 0
77871: PLUS
77872: ST_TO_ADDR
// end ;
77873: LD_VAR 0 2
77877: RET
// export function PrepareArray ( array ) ; begin
77878: LD_INT 0
77880: PPUSH
// result := array diff 0 ;
77881: LD_ADDR_VAR 0 2
77885: PUSH
77886: LD_VAR 0 1
77890: PUSH
77891: LD_INT 0
77893: DIFF
77894: ST_TO_ADDR
// if not result [ 1 ] then
77895: LD_VAR 0 2
77899: PUSH
77900: LD_INT 1
77902: ARRAY
77903: NOT
77904: IFFALSE 77924
// result := Delete ( result , 1 ) ;
77906: LD_ADDR_VAR 0 2
77910: PUSH
77911: LD_VAR 0 2
77915: PPUSH
77916: LD_INT 1
77918: PPUSH
77919: CALL_OW 3
77923: ST_TO_ADDR
// end ;
77924: LD_VAR 0 2
77928: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
77929: LD_INT 0
77931: PPUSH
77932: PPUSH
77933: PPUSH
77934: PPUSH
// sibRocketRange := 25 ;
77935: LD_ADDR_VAR 0 6
77939: PUSH
77940: LD_INT 25
77942: ST_TO_ADDR
// result := false ;
77943: LD_ADDR_VAR 0 4
77947: PUSH
77948: LD_INT 0
77950: ST_TO_ADDR
// for i := 0 to 5 do
77951: LD_ADDR_VAR 0 5
77955: PUSH
77956: DOUBLE
77957: LD_INT 0
77959: DEC
77960: ST_TO_ADDR
77961: LD_INT 5
77963: PUSH
77964: FOR_TO
77965: IFFALSE 78032
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
77967: LD_VAR 0 1
77971: PPUSH
77972: LD_VAR 0 5
77976: PPUSH
77977: LD_VAR 0 6
77981: PPUSH
77982: CALL_OW 272
77986: PPUSH
77987: LD_VAR 0 2
77991: PPUSH
77992: LD_VAR 0 5
77996: PPUSH
77997: LD_VAR 0 6
78001: PPUSH
78002: CALL_OW 273
78006: PPUSH
78007: LD_VAR 0 3
78011: PPUSH
78012: CALL_OW 309
78016: IFFALSE 78030
// begin result := true ;
78018: LD_ADDR_VAR 0 4
78022: PUSH
78023: LD_INT 1
78025: ST_TO_ADDR
// exit ;
78026: POP
78027: POP
78028: GO 78034
// end ;
78030: GO 77964
78032: POP
78033: POP
// end ;
78034: LD_VAR 0 4
78038: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
78039: LD_INT 0
78041: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
78042: LD_VAR 0 1
78046: PPUSH
78047: LD_VAR 0 2
78051: PPUSH
78052: LD_INT 0
78054: PPUSH
78055: LD_INT 0
78057: PPUSH
78058: LD_INT 1
78060: PPUSH
78061: LD_INT 0
78063: PPUSH
78064: CALL_OW 587
// end ; end_of_file
78068: LD_VAR 0 3
78072: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78073: LD_VAR 0 1
78077: PUSH
78078: LD_INT 200
78080: DOUBLE
78081: GREATEREQUAL
78082: IFFALSE 78090
78084: LD_INT 299
78086: DOUBLE
78087: LESSEQUAL
78088: IFTRUE 78092
78090: GO 78124
78092: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78093: LD_VAR 0 1
78097: PPUSH
78098: LD_VAR 0 2
78102: PPUSH
78103: LD_VAR 0 3
78107: PPUSH
78108: LD_VAR 0 4
78112: PPUSH
78113: LD_VAR 0 5
78117: PPUSH
78118: CALL 32739 0 5
78122: GO 78201
78124: LD_INT 300
78126: DOUBLE
78127: GREATEREQUAL
78128: IFFALSE 78136
78130: LD_INT 399
78132: DOUBLE
78133: LESSEQUAL
78134: IFTRUE 78138
78136: GO 78200
78138: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78139: LD_VAR 0 1
78143: PPUSH
78144: LD_VAR 0 2
78148: PPUSH
78149: LD_VAR 0 3
78153: PPUSH
78154: LD_VAR 0 4
78158: PPUSH
78159: LD_VAR 0 5
78163: PPUSH
78164: LD_VAR 0 6
78168: PPUSH
78169: LD_VAR 0 7
78173: PPUSH
78174: LD_VAR 0 8
78178: PPUSH
78179: LD_VAR 0 9
78183: PPUSH
78184: LD_VAR 0 10
78188: PPUSH
78189: LD_VAR 0 11
78193: PPUSH
78194: CALL 29072 0 11
78198: GO 78201
78200: POP
// end ;
78201: PPOPN 11
78203: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78204: LD_VAR 0 1
78208: PPUSH
78209: LD_VAR 0 2
78213: PPUSH
78214: LD_VAR 0 3
78218: PPUSH
78219: LD_VAR 0 4
78223: PPUSH
78224: LD_VAR 0 5
78228: PPUSH
78229: CALL 32475 0 5
// end ; end_of_file
78233: PPOPN 5
78235: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78236: LD_VAR 0 1
78240: PPUSH
78241: LD_VAR 0 2
78245: PPUSH
78246: LD_VAR 0 3
78250: PPUSH
78251: LD_VAR 0 4
78255: PPUSH
78256: LD_VAR 0 5
78260: PPUSH
78261: LD_VAR 0 6
78265: PPUSH
78266: CALL 16724 0 6
// end ;
78270: PPOPN 6
78272: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
78273: LD_INT 0
78275: PPUSH
// begin if not units then
78276: LD_VAR 0 1
78280: NOT
78281: IFFALSE 78285
// exit ;
78283: GO 78285
// end ;
78285: PPOPN 7
78287: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78288: CALL 16628 0 0
// end ;
78292: PPOPN 1
78294: END
