// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix , debug ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 77 0 0
// if debug then
  19: LD_EXP 34
  23: IFFALSE 40
// begin Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// end ; PrepareDifficulty ;
  40: CALL 10516 0 0
// PrepareRussianCommander ;
  44: CALL 12050 0 0
// PrepareSouthBase ;
  48: CALL 12146 0 0
// PrepareNorthBase ;
  52: CALL 12484 0 0
// PrepareOtherRussians ;
  56: CALL 12879 0 0
// PrepareHeroes ;
  60: CALL 10837 0 0
// PrepareLisSquad ;
  64: CALL 11207 0 0
// PrepareOtherAmericans ;
  68: CALL 11520 0 0
// Action ;
  72: CALL 329 0 0
// end ;
  76: END
// function Init ; begin
  77: LD_INT 0
  79: PPUSH
// debug := false ;
  80: LD_ADDR_EXP 34
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// mission_prefix := 02_ ;
  88: LD_ADDR_EXP 33
  92: PUSH
  93: LD_STRING 02_
  95: ST_TO_ADDR
// RuSoldMinLevel := 0 ;
  96: LD_ADDR_EXP 13
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// RuSoldMaxLevel := 0 ;
 104: LD_ADDR_EXP 14
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// hpJMM := 0 ;
 112: LD_ADDR_EXP 10
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// hpBobby := 0 ;
 120: LD_ADDR_EXP 11
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// hpCyrus := 0 ;
 128: LD_ADDR_EXP 12
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// cargoEscape := 0 ;
 136: LD_ADDR_EXP 20
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// mikhailStatus := 0 ;
 144: LD_ADDR_EXP 21
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// mikhailInBase := 0 ;
 152: LD_ADDR_EXP 22
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// mikhailDepot := 0 ;
 160: LD_ADDR_EXP 23
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// tigersRespawn := 0 ;
 168: LD_ADDR_EXP 30
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// cargoRespawn := 0 ;
 176: LD_ADDR_EXP 28
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cargoSee := 0 ;
 184: LD_ADDR_EXP 29
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// lastBattle := 0 ;
 192: LD_ADDR_EXP 27
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// deadsCounter := 0 ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// spotCorpses := 0 ;
 208: LD_ADDR_EXP 32
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// southBaseDefenders := [ ] ;
 216: LD_ADDR_EXP 25
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// northBaseDefenders := [ ] ;
 223: LD_ADDR_EXP 24
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// attackGroup := [ ] ;
 230: LD_ADDR_EXP 26
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// end ;
 237: LD_VAR 0 1
 241: RET
// every 0 0$1 trigger debug do var i ;
 242: LD_EXP 34
 246: IFFALSE 326
 248: GO 250
 250: DISABLE
 251: LD_INT 0
 253: PPUSH
// begin enable ;
 254: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
 255: LD_ADDR_VAR 0 1
 259: PUSH
 260: LD_INT 22
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 21
 272: PUSH
 273: LD_INT 1
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: LD_INT 3
 282: PUSH
 283: LD_INT 24
 285: PUSH
 286: LD_INT 1000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: PUSH
 307: FOR_IN
 308: IFFALSE 324
// SetLives ( i , 1000 ) ;
 310: LD_VAR 0 1
 314: PPUSH
 315: LD_INT 1000
 317: PPUSH
 318: CALL_OW 234
 322: GO 307
 324: POP
 325: POP
// end ; end_of_file
 326: PPOPN 1
 328: END
// export function Action ; var tmp ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// InGameOn ;
 333: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
 337: LD_EXP 1
 341: PPUSH
 342: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 346: LD_ADDR_VAR 0 2
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 4
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: LD_EXP 4
 384: PUSH
 385: EMPTY
 386: LIST
 387: DIFF
 388: ST_TO_ADDR
// if Cyrus and Bobby then
 389: LD_EXP 3
 393: PUSH
 394: LD_EXP 2
 398: AND
 399: IFFALSE 729
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 401: LD_EXP 3
 405: PPUSH
 406: LD_INT 43
 408: PPUSH
 409: LD_INT 72
 411: PPUSH
 412: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 416: LD_EXP 2
 420: PPUSH
 421: LD_INT 44
 423: PPUSH
 424: LD_INT 70
 426: PPUSH
 427: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 431: LD_EXP 1
 435: PPUSH
 436: LD_INT 46
 438: PPUSH
 439: LD_INT 73
 441: PPUSH
 442: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 446: LD_EXP 3
 450: PPUSH
 451: LD_STRING D1a-Cyrus-1
 453: PPUSH
 454: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 458: LD_EXP 1
 462: PPUSH
 463: LD_STRING D1a-JMM-1
 465: PPUSH
 466: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 470: LD_EXP 3
 474: PPUSH
 475: LD_INT 37
 477: PPUSH
 478: LD_INT 66
 480: PPUSH
 481: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 485: LD_EXP 2
 489: PPUSH
 490: LD_INT 41
 492: PPUSH
 493: LD_INT 67
 495: PPUSH
 496: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 500: LD_EXP 1
 504: PPUSH
 505: LD_INT 38
 507: PPUSH
 508: LD_INT 64
 510: PPUSH
 511: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 515: LD_EXP 2
 519: PPUSH
 520: LD_STRING D1a-Bobby-2
 522: PPUSH
 523: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 527: LD_EXP 3
 531: PPUSH
 532: LD_INT 35
 534: PPUSH
 535: LD_INT 62
 537: PPUSH
 538: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 542: LD_EXP 2
 546: PPUSH
 547: LD_INT 32
 549: PPUSH
 550: LD_INT 60
 552: PPUSH
 553: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_INT 35
 564: PPUSH
 565: LD_INT 60
 567: PPUSH
 568: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 572: LD_EXP 1
 576: PPUSH
 577: LD_STRING D1a-JMM-2
 579: PPUSH
 580: CALL_OW 88
// ComWalk ( Lisa ) ;
 584: LD_EXP 4
 588: PPUSH
 589: CALL_OW 138
// wait ( 0 0$1 ) ;
 593: LD_INT 35
 595: PPUSH
 596: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 600: LD_EXP 4
 604: PPUSH
 605: LD_EXP 1
 609: PPUSH
 610: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 614: LD_EXP 1
 618: PUSH
 619: LD_EXP 3
 623: PUSH
 624: LD_EXP 2
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: LIST
 633: PPUSH
 634: LD_EXP 4
 638: PPUSH
 639: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 643: LD_VAR 0 2
 647: PUSH
 648: LD_INT 1
 650: ARRAY
 651: PPUSH
 652: LD_INT 33
 654: PPUSH
 655: LD_INT 55
 657: PPUSH
 658: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 2
 669: ARRAY
 670: PPUSH
 671: LD_INT 30
 673: PPUSH
 674: LD_INT 54
 676: PPUSH
 677: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 1
 688: ARRAY
 689: PPUSH
 690: LD_EXP 1
 694: PPUSH
 695: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 699: LD_VAR 0 2
 703: PUSH
 704: LD_INT 2
 706: ARRAY
 707: PPUSH
 708: LD_EXP 1
 712: PPUSH
 713: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 717: LD_EXP 4
 721: PPUSH
 722: LD_STRING D1a-Lisa-2
 724: PPUSH
 725: CALL_OW 88
// end ; if Cyrus and not Bobby then
 729: LD_EXP 3
 733: PUSH
 734: LD_EXP 2
 738: NOT
 739: AND
 740: IFFALSE 945
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 742: LD_EXP 3
 746: PPUSH
 747: LD_INT 43
 749: PPUSH
 750: LD_INT 72
 752: PPUSH
 753: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 757: LD_EXP 1
 761: PPUSH
 762: LD_INT 46
 764: PPUSH
 765: LD_INT 73
 767: PPUSH
 768: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 772: LD_EXP 3
 776: PPUSH
 777: LD_STRING D1a-Cyrus-1
 779: PPUSH
 780: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 784: LD_EXP 1
 788: PPUSH
 789: LD_STRING D1a-JMM-1
 791: PPUSH
 792: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 796: LD_EXP 3
 800: PPUSH
 801: LD_INT 37
 803: PPUSH
 804: LD_INT 66
 806: PPUSH
 807: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 811: LD_EXP 1
 815: PPUSH
 816: LD_INT 38
 818: PPUSH
 819: LD_INT 64
 821: PPUSH
 822: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 826: LD_EXP 3
 830: PPUSH
 831: LD_STRING D1a-Cyrus-2
 833: PPUSH
 834: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 838: LD_EXP 3
 842: PPUSH
 843: LD_INT 35
 845: PPUSH
 846: LD_INT 62
 848: PPUSH
 849: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 853: LD_EXP 1
 857: PPUSH
 858: LD_INT 35
 860: PPUSH
 861: LD_INT 60
 863: PPUSH
 864: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 868: LD_EXP 1
 872: PPUSH
 873: LD_STRING D1a-JMM-2
 875: PPUSH
 876: CALL_OW 88
// ComWalk ( Lisa ) ;
 880: LD_EXP 4
 884: PPUSH
 885: CALL_OW 138
// wait ( 0 0$1 ) ;
 889: LD_INT 35
 891: PPUSH
 892: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 896: LD_EXP 4
 900: PPUSH
 901: LD_EXP 1
 905: PPUSH
 906: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 910: LD_EXP 4
 914: PPUSH
 915: LD_STRING D1a-Lisa-2
 917: PPUSH
 918: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 922: LD_EXP 1
 926: PUSH
 927: LD_EXP 3
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PPUSH
 936: LD_EXP 4
 940: PPUSH
 941: CALL_OW 119
// end ; if not Cyrus and Bobby then
 945: LD_EXP 3
 949: NOT
 950: PUSH
 951: LD_EXP 2
 955: AND
 956: IFFALSE 1235
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 958: LD_EXP 2
 962: PPUSH
 963: LD_INT 44
 965: PPUSH
 966: LD_INT 70
 968: PPUSH
 969: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 973: LD_EXP 1
 977: PPUSH
 978: LD_INT 46
 980: PPUSH
 981: LD_INT 73
 983: PPUSH
 984: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 988: LD_EXP 2
 992: PPUSH
 993: LD_STRING D1a-Bobby-1
 995: PPUSH
 996: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
1000: LD_EXP 1
1004: PPUSH
1005: LD_STRING D1a-JMM-1
1007: PPUSH
1008: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
1012: LD_EXP 2
1016: PPUSH
1017: LD_INT 37
1019: PPUSH
1020: LD_INT 66
1022: PPUSH
1023: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
1027: LD_EXP 1
1031: PPUSH
1032: LD_INT 38
1034: PPUSH
1035: LD_INT 64
1037: PPUSH
1038: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
1042: LD_EXP 2
1046: PPUSH
1047: LD_STRING D1a-Bobby-2
1049: PPUSH
1050: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
1054: LD_EXP 2
1058: PPUSH
1059: LD_INT 35
1061: PPUSH
1062: LD_INT 62
1064: PPUSH
1065: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
1069: LD_EXP 1
1073: PPUSH
1074: LD_INT 35
1076: PPUSH
1077: LD_INT 60
1079: PPUSH
1080: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
1084: LD_EXP 1
1088: PPUSH
1089: LD_STRING D1a-JMM-2
1091: PPUSH
1092: CALL_OW 88
// ComWalk ( Lisa ) ;
1096: LD_EXP 4
1100: PPUSH
1101: CALL_OW 138
// wait ( 0 0$1 ) ;
1105: LD_INT 35
1107: PPUSH
1108: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1112: LD_EXP 4
1116: PPUSH
1117: LD_EXP 1
1121: PPUSH
1122: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
1126: LD_EXP 1
1130: PUSH
1131: LD_EXP 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PPUSH
1140: LD_EXP 4
1144: PPUSH
1145: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1149: LD_VAR 0 2
1153: PUSH
1154: LD_INT 1
1156: ARRAY
1157: PPUSH
1158: LD_INT 33
1160: PPUSH
1161: LD_INT 55
1163: PPUSH
1164: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 2
1175: ARRAY
1176: PPUSH
1177: LD_INT 30
1179: PPUSH
1180: LD_INT 54
1182: PPUSH
1183: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PPUSH
1196: LD_EXP 1
1200: PPUSH
1201: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1205: LD_VAR 0 2
1209: PUSH
1210: LD_INT 2
1212: ARRAY
1213: PPUSH
1214: LD_EXP 1
1218: PPUSH
1219: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1223: LD_EXP 4
1227: PPUSH
1228: LD_STRING D1a-Lisa-2
1230: PPUSH
1231: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1235: LD_EXP 3
1239: NOT
1240: PUSH
1241: LD_EXP 2
1245: NOT
1246: AND
1247: IFFALSE 1461
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1249: LD_EXP 1
1253: PPUSH
1254: LD_INT 37
1256: PPUSH
1257: LD_INT 66
1259: PPUSH
1260: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1264: LD_EXP 1
1268: PPUSH
1269: LD_STRING D1b-JMM-1
1271: PPUSH
1272: CALL_OW 88
// ComCrawl ( JMM ) ;
1276: LD_EXP 1
1280: PPUSH
1281: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1285: LD_EXP 1
1289: PPUSH
1290: LD_INT 35
1292: PPUSH
1293: LD_INT 60
1295: PPUSH
1296: CALL_OW 171
// wait ( 0 0$8 ) ;
1300: LD_INT 280
1302: PPUSH
1303: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1307: LD_EXP 1
1311: PPUSH
1312: LD_STRING D1b-JMM-1a
1314: PPUSH
1315: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1319: LD_EXP 1
1323: PUSH
1324: LD_EXP 4
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: PPUSH
1333: CALL_OW 138
// wait ( 0 0$1 ) ;
1337: LD_INT 35
1339: PPUSH
1340: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1344: LD_EXP 4
1348: PPUSH
1349: LD_EXP 1
1353: PPUSH
1354: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1358: LD_EXP 1
1362: PUSH
1363: EMPTY
1364: LIST
1365: PPUSH
1366: LD_EXP 4
1370: PPUSH
1371: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1375: LD_VAR 0 2
1379: PUSH
1380: LD_INT 1
1382: ARRAY
1383: PPUSH
1384: LD_INT 33
1386: PPUSH
1387: LD_INT 55
1389: PPUSH
1390: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1394: LD_VAR 0 2
1398: PUSH
1399: LD_INT 2
1401: ARRAY
1402: PPUSH
1403: LD_INT 30
1405: PPUSH
1406: LD_INT 54
1408: PPUSH
1409: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1413: LD_VAR 0 2
1417: PUSH
1418: LD_INT 1
1420: ARRAY
1421: PPUSH
1422: LD_EXP 1
1426: PPUSH
1427: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1431: LD_VAR 0 2
1435: PUSH
1436: LD_INT 2
1438: ARRAY
1439: PPUSH
1440: LD_EXP 1
1444: PPUSH
1445: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1449: LD_EXP 4
1453: PPUSH
1454: LD_STRING D1b-Lisa-1
1456: PPUSH
1457: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1461: LD_EXP 1
1465: PPUSH
1466: LD_STRING D1-JMM-1
1468: PPUSH
1469: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1473: LD_EXP 4
1477: PPUSH
1478: LD_STRING D1-Lisa-1
1480: PPUSH
1481: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1485: LD_EXP 1
1489: PPUSH
1490: LD_STRING D1-JMM-2
1492: PPUSH
1493: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
1497: LD_EXP 9
1501: PPUSH
1502: LD_STRING D1-Pow-2
1504: PPUSH
1505: CALL_OW 586
// if Cyrus then
1509: LD_EXP 3
1513: IFFALSE 1539
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1515: LD_EXP 3
1519: PPUSH
1520: LD_STRING D1-Cyrus-2
1522: PPUSH
1523: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1527: LD_EXP 1
1531: PPUSH
1532: LD_STRING D1-JMM-3
1534: PPUSH
1535: CALL_OW 88
// end ; SayRadioNoFace ( Powell , D1-Pow-3 ) ;
1539: LD_EXP 9
1543: PPUSH
1544: LD_STRING D1-Pow-3
1546: PPUSH
1547: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
1551: LD_EXP 1
1555: PPUSH
1556: LD_STRING D1-JMM-4
1558: PPUSH
1559: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-4 ) ;
1563: LD_EXP 9
1567: PPUSH
1568: LD_STRING D1-Pow-4
1570: PPUSH
1571: CALL_OW 586
// SayRadioNoFace ( Powell , D1-Pow-4a ) ;
1575: LD_EXP 9
1579: PPUSH
1580: LD_STRING D1-Pow-4a
1582: PPUSH
1583: CALL_OW 586
// if Cyrus then
1587: LD_EXP 3
1591: IFFALSE 1605
// Say ( Cyrus , D1-Cyrus-4 ) ;
1593: LD_EXP 3
1597: PPUSH
1598: LD_STRING D1-Cyrus-4
1600: PPUSH
1601: CALL_OW 88
// if Bobby then
1605: LD_EXP 2
1609: IFFALSE 1647
// begin Say ( Bobby , D1-Bobby-4 ) ;
1611: LD_EXP 2
1615: PPUSH
1616: LD_STRING D1-Bobby-4
1618: PPUSH
1619: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1623: LD_EXP 4
1627: PPUSH
1628: LD_STRING D1-Lisa-4
1630: PPUSH
1631: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1635: LD_EXP 1
1639: PPUSH
1640: LD_STRING D1-JMM-5
1642: PPUSH
1643: CALL_OW 88
// end ; InGameOff ;
1647: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1651: LD_INT 22
1653: PUSH
1654: LD_INT 4
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PPUSH
1661: CALL_OW 69
1665: PUSH
1666: LD_EXP 6
1670: PUSH
1671: LD_EXP 7
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: DIFF
1680: PPUSH
1681: LD_INT 1
1683: PPUSH
1684: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1688: LD_STRING M1
1690: PPUSH
1691: CALL_OW 337
// SaveForQuickRestart ;
1695: CALL_OW 22
// end ;
1699: LD_VAR 0 1
1703: RET
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1704: LD_INT 7
1706: PPUSH
1707: LD_INT 22
1709: PUSH
1710: LD_INT 1
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PPUSH
1717: CALL_OW 70
1721: PUSH
1722: LD_INT 0
1724: GREATER
1725: IFFALSE 2138
1727: GO 1729
1729: DISABLE
// begin InGameOn ;
1730: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1734: LD_INT 22
1736: PUSH
1737: LD_INT 1
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 21
1746: PUSH
1747: LD_INT 1
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PPUSH
1758: CALL_OW 69
1762: PPUSH
1763: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1767: LD_INT 24
1769: PPUSH
1770: LD_INT 32
1772: PPUSH
1773: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1777: LD_EXP 5
1781: PPUSH
1782: LD_INT 4
1784: PPUSH
1785: LD_INT 1
1787: PPUSH
1788: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1792: LD_EXP 5
1796: PPUSH
1797: LD_INT 4
1799: PPUSH
1800: CALL_OW 336
// wait ( 0 0$1 ) ;
1804: LD_INT 35
1806: PPUSH
1807: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1811: LD_EXP 5
1815: PPUSH
1816: LD_INT 27
1818: PPUSH
1819: LD_INT 38
1821: PPUSH
1822: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1826: LD_EXP 5
1830: PPUSH
1831: LD_EXP 1
1835: PPUSH
1836: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1840: LD_INT 22
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: LD_INT 21
1852: PUSH
1853: LD_INT 1
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PPUSH
1864: CALL_OW 69
1868: PUSH
1869: LD_EXP 5
1873: PUSH
1874: EMPTY
1875: LIST
1876: DIFF
1877: PPUSH
1878: LD_EXP 5
1882: PPUSH
1883: CALL_OW 119
// wait ( 0 0$1 ) ;
1887: LD_INT 35
1889: PPUSH
1890: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1894: LD_EXP 5
1898: PPUSH
1899: LD_STRING D2a-Khat-1
1901: PPUSH
1902: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1906: LD_EXP 1
1910: PPUSH
1911: LD_STRING D2a-JMM-1
1913: PPUSH
1914: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1918: LD_EXP 5
1922: PPUSH
1923: LD_STRING D2a-Khat-2
1925: PPUSH
1926: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1930: LD_EXP 1
1934: PPUSH
1935: LD_STRING D2a-JMM-2
1937: PPUSH
1938: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1942: LD_EXP 5
1946: PPUSH
1947: LD_STRING D2a-Khat-3
1949: PPUSH
1950: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1954: LD_EXP 1
1958: PPUSH
1959: LD_STRING D2a-JMM-3
1961: PPUSH
1962: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1966: LD_EXP 5
1970: PPUSH
1971: LD_STRING D2a-Khat-4
1973: PPUSH
1974: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1978: LD_EXP 1
1982: PPUSH
1983: LD_STRING D2a-JMM-4
1985: PPUSH
1986: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1990: LD_EXP 5
1994: PPUSH
1995: LD_STRING D2a-Khat-5
1997: PPUSH
1998: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
2002: LD_EXP 1
2006: PPUSH
2007: LD_STRING D2a-JMM-5
2009: PPUSH
2010: CALL_OW 88
// InGameOff ;
2014: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) then
2018: LD_INT 22
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PUSH
2028: LD_INT 21
2030: PUSH
2031: LD_INT 1
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PUSH
2038: LD_INT 3
2040: PUSH
2041: LD_INT 24
2043: PUSH
2044: LD_INT 800
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PPUSH
2060: CALL_OW 69
2064: IFFALSE 2138
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
2066: LD_EXP 5
2070: PPUSH
2071: LD_INT 22
2073: PUSH
2074: LD_INT 1
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PUSH
2081: LD_INT 21
2083: PUSH
2084: LD_INT 1
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 3
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 1000
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: PPUSH
2113: CALL_OW 69
2117: PUSH
2118: LD_INT 1
2120: ARRAY
2121: PPUSH
2122: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
2126: LD_EXP 5
2130: PPUSH
2131: LD_STRING D2b-Khat-1
2133: PPUSH
2134: CALL_OW 88
// end ; end ;
2138: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) do var i , distanceTab , min , tmp , p ;
2139: LD_INT 15
2141: PPUSH
2142: LD_INT 22
2144: PUSH
2145: LD_INT 1
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PPUSH
2152: CALL_OW 70
2156: IFFALSE 3353
2158: GO 2160
2160: DISABLE
2161: LD_INT 0
2163: PPUSH
2164: PPUSH
2165: PPUSH
2166: PPUSH
2167: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2168: LD_ADDR_VAR 0 2
2172: PUSH
2173: LD_INT 999
2175: PUSH
2176: LD_INT 999
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2186: LD_ADDR_VAR 0 4
2190: PUSH
2191: LD_INT 22
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 21
2203: PUSH
2204: LD_INT 1
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PPUSH
2215: CALL_OW 69
2219: PUSH
2220: LD_EXP 1
2224: PUSH
2225: LD_EXP 2
2229: PUSH
2230: LD_EXP 3
2234: PUSH
2235: LD_EXP 4
2239: PUSH
2240: LD_EXP 5
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: DIFF
2252: ST_TO_ADDR
// PrepareDeadSoldiers ;
2253: CALL 11662 0 0
// spotCorpses = 1 ;
2257: LD_ADDR_EXP 32
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2265: LD_INT 70
2267: PPUSH
2268: CALL_OW 67
// InGameOn ;
2272: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2276: LD_INT 23
2278: PPUSH
2279: LD_INT 12
2281: PPUSH
2282: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: LD_VAR 0 2
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: PUSH
2300: LD_INT 2
2302: ARRAY
2303: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2304: LD_ADDR_VAR 0 1
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 1
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 21
2321: PUSH
2322: LD_INT 1
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PPUSH
2333: CALL_OW 69
2337: PUSH
2338: LD_EXP 1
2342: PUSH
2343: LD_EXP 5
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: DIFF
2352: PUSH
2353: FOR_IN
2354: IFFALSE 2405
// if IsOK ( i ) then
2356: LD_VAR 0 1
2360: PPUSH
2361: CALL_OW 302
2365: IFFALSE 2403
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2367: LD_ADDR_VAR 0 2
2371: PUSH
2372: LD_VAR 0 2
2376: PUSH
2377: LD_VAR 0 1
2381: PUSH
2382: LD_VAR 0 1
2386: PPUSH
2387: LD_INT 16
2389: PPUSH
2390: CALL_OW 299
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PUSH
2399: EMPTY
2400: LIST
2401: ADD
2402: ST_TO_ADDR
2403: GO 2353
2405: POP
2406: POP
// for i = 2 to distanceTab do
2407: LD_ADDR_VAR 0 1
2411: PUSH
2412: DOUBLE
2413: LD_INT 2
2415: DEC
2416: ST_TO_ADDR
2417: LD_VAR 0 2
2421: PUSH
2422: FOR_TO
2423: IFFALSE 2469
// if distanceTab [ i ] [ 2 ] < min then
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PUSH
2436: LD_INT 2
2438: ARRAY
2439: PUSH
2440: LD_VAR 0 3
2444: LESS
2445: IFFALSE 2467
// min = distanceTab [ i ] [ 2 ] ;
2447: LD_ADDR_VAR 0 3
2451: PUSH
2452: LD_VAR 0 2
2456: PUSH
2457: LD_VAR 0 1
2461: ARRAY
2462: PUSH
2463: LD_INT 2
2465: ARRAY
2466: ST_TO_ADDR
2467: GO 2422
2469: POP
2470: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2471: LD_ADDR_VAR 0 1
2475: PUSH
2476: LD_INT 22
2478: PUSH
2479: LD_INT 1
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: LD_INT 21
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: PPUSH
2500: CALL_OW 69
2504: PUSH
2505: LD_EXP 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: DIFF
2513: PUSH
2514: FOR_IN
2515: IFFALSE 2585
// begin ComMoveToArea ( i , DeadCutscene ) ;
2517: LD_VAR 0 1
2521: PPUSH
2522: LD_INT 28
2524: PPUSH
2525: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2529: LD_EXP 1
2533: PPUSH
2534: LD_INT 30
2536: PPUSH
2537: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2541: LD_VAR 0 1
2545: PPUSH
2546: LD_INT 23
2548: PPUSH
2549: LD_INT 11
2551: PPUSH
2552: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2556: LD_EXP 1
2560: PPUSH
2561: LD_INT 23
2563: PPUSH
2564: LD_INT 11
2566: PPUSH
2567: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2571: LD_EXP 35
2575: PPUSH
2576: LD_INT 250
2578: PPUSH
2579: CALL_OW 234
// end ;
2583: GO 2514
2585: POP
2586: POP
// for i = 2 to distanceTab do
2587: LD_ADDR_VAR 0 1
2591: PUSH
2592: DOUBLE
2593: LD_INT 2
2595: DEC
2596: ST_TO_ADDR
2597: LD_VAR 0 2
2601: PUSH
2602: FOR_TO
2603: IFFALSE 2989
// begin if distanceTab [ i ] [ 2 ] = min then
2605: LD_VAR 0 2
2609: PUSH
2610: LD_VAR 0 1
2614: ARRAY
2615: PUSH
2616: LD_INT 2
2618: ARRAY
2619: PUSH
2620: LD_VAR 0 3
2624: EQUAL
2625: IFFALSE 2987
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2627: LD_VAR 0 2
2631: PUSH
2632: LD_VAR 0 1
2636: ARRAY
2637: PUSH
2638: LD_INT 1
2640: ARRAY
2641: PUSH
2642: LD_EXP 2
2646: EQUAL
2647: IFFALSE 2661
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2649: LD_EXP 2
2653: PPUSH
2654: LD_STRING DCorpses-Bobby-1
2656: PPUSH
2657: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2661: LD_VAR 0 2
2665: PUSH
2666: LD_VAR 0 1
2670: ARRAY
2671: PUSH
2672: LD_INT 1
2674: ARRAY
2675: PUSH
2676: LD_EXP 3
2680: EQUAL
2681: IFFALSE 2695
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2683: LD_EXP 3
2687: PPUSH
2688: LD_STRING DCorpses-Cyrus-1
2690: PPUSH
2691: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2695: LD_VAR 0 2
2699: PUSH
2700: LD_VAR 0 1
2704: ARRAY
2705: PUSH
2706: LD_INT 1
2708: ARRAY
2709: PUSH
2710: LD_EXP 4
2714: EQUAL
2715: IFFALSE 2729
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2717: LD_EXP 4
2721: PPUSH
2722: LD_STRING DCorpses-Lisa-1
2724: PPUSH
2725: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2729: LD_VAR 0 2
2733: PUSH
2734: LD_VAR 0 1
2738: ARRAY
2739: PUSH
2740: LD_INT 1
2742: ARRAY
2743: PUSH
2744: LD_VAR 0 4
2748: PUSH
2749: LD_INT 1
2751: ARRAY
2752: EQUAL
2753: PUSH
2754: LD_VAR 0 4
2758: PUSH
2759: LD_INT 1
2761: ARRAY
2762: PPUSH
2763: CALL_OW 258
2767: PUSH
2768: LD_INT 1
2770: EQUAL
2771: AND
2772: IFFALSE 2790
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2774: LD_VAR 0 4
2778: PUSH
2779: LD_INT 1
2781: ARRAY
2782: PPUSH
2783: LD_STRING DCorpses-Sol1-1
2785: PPUSH
2786: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2790: LD_VAR 0 2
2794: PUSH
2795: LD_VAR 0 1
2799: ARRAY
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PUSH
2805: LD_VAR 0 4
2809: PUSH
2810: LD_INT 1
2812: ARRAY
2813: EQUAL
2814: PUSH
2815: LD_VAR 0 4
2819: PUSH
2820: LD_INT 1
2822: ARRAY
2823: PPUSH
2824: CALL_OW 258
2828: PUSH
2829: LD_INT 2
2831: EQUAL
2832: AND
2833: IFFALSE 2851
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2835: LD_VAR 0 4
2839: PUSH
2840: LD_INT 1
2842: ARRAY
2843: PPUSH
2844: LD_STRING DCorpses-FSol1-1
2846: PPUSH
2847: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2851: LD_VAR 0 2
2855: PUSH
2856: LD_VAR 0 1
2860: ARRAY
2861: PUSH
2862: LD_INT 1
2864: ARRAY
2865: PUSH
2866: LD_VAR 0 4
2870: PUSH
2871: LD_INT 2
2873: ARRAY
2874: EQUAL
2875: PUSH
2876: LD_VAR 0 4
2880: PUSH
2881: LD_INT 2
2883: ARRAY
2884: PPUSH
2885: CALL_OW 258
2889: PUSH
2890: LD_INT 1
2892: EQUAL
2893: AND
2894: IFFALSE 2912
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2896: LD_VAR 0 4
2900: PUSH
2901: LD_INT 2
2903: ARRAY
2904: PPUSH
2905: LD_STRING DCorpses-Sol1-1
2907: PPUSH
2908: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2912: LD_VAR 0 2
2916: PUSH
2917: LD_VAR 0 1
2921: ARRAY
2922: PUSH
2923: LD_INT 1
2925: ARRAY
2926: PUSH
2927: LD_VAR 0 4
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: EQUAL
2936: PUSH
2937: LD_VAR 0 4
2941: PUSH
2942: LD_INT 2
2944: ARRAY
2945: PPUSH
2946: CALL_OW 258
2950: PUSH
2951: LD_INT 2
2953: EQUAL
2954: AND
2955: IFFALSE 2973
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2957: LD_VAR 0 4
2961: PUSH
2962: LD_INT 2
2964: ARRAY
2965: PPUSH
2966: LD_STRING DCorpses-FSol1-1
2968: PPUSH
2969: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2973: LD_EXP 35
2977: PPUSH
2978: LD_INT 150
2980: PPUSH
2981: CALL_OW 234
// break ;
2985: GO 2989
// end ; end ;
2987: GO 2602
2989: POP
2990: POP
// p := 0 ;
2991: LD_ADDR_VAR 0 5
2995: PUSH
2996: LD_INT 0
2998: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2999: LD_INT 35
3001: PPUSH
3002: CALL_OW 67
// p := p + 1 ;
3006: LD_ADDR_VAR 0 5
3010: PUSH
3011: LD_VAR 0 5
3015: PUSH
3016: LD_INT 1
3018: PLUS
3019: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
3020: LD_ADDR_VAR 0 1
3024: PUSH
3025: LD_INT 22
3027: PUSH
3028: LD_INT 1
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 21
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 69
3053: PUSH
3054: LD_EXP 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: DIFF
3062: PUSH
3063: FOR_IN
3064: IFFALSE 3134
// begin ComMoveToArea ( i , DeadCutscene ) ;
3066: LD_VAR 0 1
3070: PPUSH
3071: LD_INT 28
3073: PPUSH
3074: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
3078: LD_EXP 1
3082: PPUSH
3083: LD_INT 30
3085: PPUSH
3086: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_INT 23
3097: PPUSH
3098: LD_INT 11
3100: PPUSH
3101: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
3105: LD_EXP 1
3109: PPUSH
3110: LD_INT 23
3112: PPUSH
3113: LD_INT 11
3115: PPUSH
3116: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
3120: LD_EXP 35
3124: PPUSH
3125: LD_INT 250
3127: PPUSH
3128: CALL_OW 234
// end ;
3132: GO 3063
3134: POP
3135: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3136: LD_EXP 1
3140: PPUSH
3141: LD_INT 30
3143: PPUSH
3144: CALL_OW 308
3148: PUSH
3149: LD_VAR 0 5
3153: PUSH
3154: LD_INT 16
3156: GREATEREQUAL
3157: OR
3158: IFFALSE 2999
// wait ( 0 0$1 ) ;
3160: LD_INT 35
3162: PPUSH
3163: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING DCorpses-JMM-1
3174: PPUSH
3175: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3179: LD_EXP 35
3183: PPUSH
3184: LD_INT 100
3186: PPUSH
3187: CALL_OW 234
// if IsOK ( Khatam ) then
3191: LD_EXP 5
3195: PPUSH
3196: CALL_OW 302
3200: IFFALSE 3337
// begin repeat wait ( 0 0$1 ) ;
3202: LD_INT 35
3204: PPUSH
3205: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3209: LD_EXP 5
3213: PPUSH
3214: LD_EXP 35
3218: PPUSH
3219: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3223: LD_EXP 5
3227: PPUSH
3228: LD_EXP 35
3232: PPUSH
3233: CALL_OW 296
3237: PUSH
3238: LD_INT 2
3240: LESS
3241: IFFALSE 3202
// spotCorpses = 0 ;
3243: LD_ADDR_EXP 32
3247: PUSH
3248: LD_INT 0
3250: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3251: LD_EXP 35
3255: PPUSH
3256: LD_INT 10
3258: PPUSH
3259: CALL_OW 234
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// KillUnit ( DyingSold ) ;
3270: LD_EXP 35
3274: PPUSH
3275: CALL_OW 66
// wait ( 0 0$1 ) ;
3279: LD_INT 35
3281: PPUSH
3282: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3286: LD_EXP 1
3290: PUSH
3291: LD_EXP 5
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PPUSH
3300: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3304: LD_EXP 5
3308: PPUSH
3309: LD_EXP 1
3313: PPUSH
3314: CALL_OW 119
// wait ( 0 0$1 ) ;
3318: LD_INT 35
3320: PPUSH
3321: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3325: LD_EXP 5
3329: PPUSH
3330: LD_STRING DCorpses-Khat-1
3332: PPUSH
3333: CALL_OW 88
// end ; InGameOff ;
3337: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3341: LD_EXP 1
3345: PPUSH
3346: LD_STRING DCorpses-JMM-2
3348: PPUSH
3349: CALL_OW 88
// end ;
3353: PPOPN 5
3355: END
// every 0 0$1 trigger spotCorpses = 1 do
3356: LD_EXP 32
3360: PUSH
3361: LD_INT 1
3363: EQUAL
3364: IFFALSE 3382
3366: GO 3368
3368: DISABLE
// begin enable ;
3369: ENABLE
// SetLives ( DyingSold , 10 ) ;
3370: LD_EXP 35
3374: PPUSH
3375: LD_INT 10
3377: PPUSH
3378: CALL_OW 234
// end ;
3382: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3383: LD_INT 8
3385: PPUSH
3386: LD_INT 22
3388: PUSH
3389: LD_INT 1
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: PPUSH
3396: CALL_OW 70
3400: PUSH
3401: LD_INT 22
3403: PUSH
3404: LD_INT 1
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: PPUSH
3411: CALL_OW 69
3415: PPUSH
3416: LD_EXP 7
3420: PPUSH
3421: CALL_OW 74
3425: PPUSH
3426: LD_EXP 7
3430: PPUSH
3431: CALL_OW 296
3435: PUSH
3436: LD_INT 13
3438: LESS
3439: OR
3440: IFFALSE 3621
3442: GO 3444
3444: DISABLE
3445: LD_INT 0
3447: PPUSH
// begin InGameOn ;
3448: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3452: LD_EXP 7
3456: PPUSH
3457: LD_INT 250
3459: PPUSH
3460: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 , 700 ] [ Difficulty ] ) ;
3464: LD_EXP 6
3468: PPUSH
3469: LD_INT 1000
3471: PUSH
3472: LD_INT 800
3474: PUSH
3475: LD_INT 750
3477: PUSH
3478: LD_INT 700
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: PUSH
3487: LD_OWVAR 67
3491: ARRAY
3492: PPUSH
3493: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3497: LD_INT 3
3499: PPUSH
3500: LD_INT 4
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3513: LD_EXP 6
3517: PUSH
3518: LD_EXP 7
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PPUSH
3527: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) union FilterAllUnits ( [ f_side , 4 ] ) do
3531: LD_ADDR_VAR 0 1
3535: PUSH
3536: LD_INT 9
3538: PPUSH
3539: LD_INT 22
3541: PUSH
3542: LD_INT 3
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PPUSH
3549: CALL_OW 70
3553: PUSH
3554: LD_INT 22
3556: PUSH
3557: LD_INT 4
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PPUSH
3564: CALL_OW 69
3568: UNION
3569: PUSH
3570: FOR_IN
3571: IFFALSE 3584
// ComFree ( i ) ;
3573: LD_VAR 0 1
3577: PPUSH
3578: CALL_OW 139
3582: GO 3570
3584: POP
3585: POP
// wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// InGameOff ;
3593: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3597: LD_EXP 6
3601: PPUSH
3602: LD_STRING DF-Sol1-1
3604: PPUSH
3605: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3609: LD_EXP 1
3613: PPUSH
3614: LD_STRING DF-JMM-1
3616: PPUSH
3617: CALL_OW 88
// end ;
3621: PPOPN 1
3623: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3624: LD_INT 19
3626: PPUSH
3627: LD_INT 22
3629: PUSH
3630: LD_INT 3
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 70
3641: PUSH
3642: LD_INT 0
3644: EQUAL
3645: IFFALSE 3754
3647: GO 3649
3649: DISABLE
// begin if not IsDead ( Brian ) then
3650: LD_EXP 6
3654: PPUSH
3655: CALL_OW 301
3659: NOT
3660: IFFALSE 3674
// SetSide ( Brian , 1 ) ;
3662: LD_EXP 6
3666: PPUSH
3667: LD_INT 1
3669: PPUSH
3670: CALL_OW 235
// if not IsDead ( Jerry ) then
3674: LD_EXP 7
3678: PPUSH
3679: CALL_OW 301
3683: NOT
3684: IFFALSE 3698
// SetSide ( Jerry , 1 ) ;
3686: LD_EXP 7
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3698: LD_INT 22
3700: PUSH
3701: LD_INT 1
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PUSH
3708: LD_INT 25
3710: PUSH
3711: LD_INT 4
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PPUSH
3722: CALL_OW 69
3726: IFFALSE 3742
// Say ( JMM , DFa-JMM-1 ) else
3728: LD_EXP 1
3732: PPUSH
3733: LD_STRING DFa-JMM-1
3735: PPUSH
3736: CALL_OW 88
3740: GO 3754
// Say ( JMM , DFa-JMM-1a ) ;
3742: LD_EXP 1
3746: PPUSH
3747: LD_STRING DFa-JMM-1a
3749: PPUSH
3750: CALL_OW 88
// end ;
3754: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3755: LD_INT 19
3757: PPUSH
3758: LD_INT 22
3760: PUSH
3761: LD_INT 3
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PPUSH
3768: CALL_OW 70
3772: PUSH
3773: LD_INT 0
3775: EQUAL
3776: PUSH
3777: LD_EXP 6
3781: PPUSH
3782: CALL_OW 302
3786: NOT
3787: AND
3788: IFFALSE 3874
3790: GO 3792
3792: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3793: LD_INT 35
3795: PPUSH
3796: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3800: LD_EXP 6
3804: PPUSH
3805: CALL_OW 256
3809: PUSH
3810: LD_INT 250
3812: GREATER
3813: IFFALSE 3793
// Say ( Brian , DFb-Sol1-1 ) ;
3815: LD_EXP 6
3819: PPUSH
3820: LD_STRING DFb-Sol1-1
3822: PPUSH
3823: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3827: LD_EXP 6
3831: PPUSH
3832: LD_INT 78
3834: PPUSH
3835: LD_INT 74
3837: PPUSH
3838: CALL_OW 111
// if IsDead ( Jerry ) then
3842: LD_EXP 7
3846: PPUSH
3847: CALL_OW 301
3851: IFFALSE 3867
// Say ( Brian , DFb-Sol1-1a ) else
3853: LD_EXP 6
3857: PPUSH
3858: LD_STRING DFb-Sol1-1a
3860: PPUSH
3861: CALL_OW 88
3865: GO 3874
// SetAchievement ( ACH_JERRY ) ;
3867: LD_STRING ACH_JERRY
3869: PPUSH
3870: CALL_OW 543
// end ;
3874: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3875: LD_INT 22
3877: PUSH
3878: LD_INT 1
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PUSH
3885: LD_INT 21
3887: PUSH
3888: LD_INT 2
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PPUSH
3899: CALL_OW 69
3903: PUSH
3904: LD_INT 0
3906: EQUAL
3907: IFFALSE 3999
3909: GO 3911
3911: DISABLE
3912: LD_INT 0
3914: PPUSH
// begin enable ;
3915: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3916: LD_ADDR_VAR 0 1
3920: PUSH
3921: LD_INT 22
3923: PUSH
3924: LD_INT 3
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 21
3933: PUSH
3934: LD_INT 3
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: LD_INT 30
3943: PUSH
3944: LD_INT 31
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: PPUSH
3956: CALL_OW 69
3960: PUSH
3961: FOR_IN
3962: IFFALSE 3997
// begin if See ( 1 , i ) then
3964: LD_INT 1
3966: PPUSH
3967: LD_VAR 0 1
3971: PPUSH
3972: CALL_OW 292
3976: IFFALSE 3995
// begin disable ;
3978: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3979: LD_EXP 1
3983: PPUSH
3984: LD_STRING DX1-JMM-1
3986: PPUSH
3987: CALL_OW 88
// exit ;
3991: POP
3992: POP
3993: GO 3999
// end ; end ;
3995: GO 3961
3997: POP
3998: POP
// end ;
3999: PPOPN 1
4001: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 11
4007: PPUSH
4008: CALL_OW 294
4012: IFFALSE 4275
4014: GO 4016
4016: DISABLE
4017: LD_INT 0
4019: PPUSH
4020: PPUSH
4021: PPUSH
// begin DialogueOn ;
4022: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
4026: LD_INT 11
4028: PPUSH
4029: LD_INT 22
4031: PUSH
4032: LD_INT 3
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PUSH
4039: LD_INT 21
4041: PUSH
4042: LD_INT 1
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PPUSH
4053: CALL_OW 70
4057: PUSH
4058: LD_INT 1
4060: ARRAY
4061: PPUSH
4062: LD_STRING DX3-Rus1-1
4064: PPUSH
4065: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
4069: LD_EXP 1
4073: PPUSH
4074: LD_STRING DX3-JMM-1
4076: PPUSH
4077: CALL_OW 88
// DialogueOff ;
4081: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
4085: LD_ADDR_VAR 0 1
4089: PUSH
4090: LD_INT 11
4092: PPUSH
4093: LD_INT 22
4095: PUSH
4096: LD_INT 3
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: LD_INT 25
4105: PUSH
4106: LD_INT 1
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PPUSH
4117: CALL_OW 70
4121: PUSH
4122: FOR_IN
4123: IFFALSE 4143
// southBaseDefenders = southBaseDefenders ^ i ;
4125: LD_ADDR_EXP 25
4129: PUSH
4130: LD_EXP 25
4134: PUSH
4135: LD_VAR 0 1
4139: ADD
4140: ST_TO_ADDR
4141: GO 4122
4143: POP
4144: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 , 0 0$2 ] [ Difficulty ] ) ;
4145: LD_INT 175
4147: PUSH
4148: LD_INT 140
4150: PUSH
4151: LD_INT 105
4153: PUSH
4154: LD_INT 70
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_OWVAR 67
4167: ARRAY
4168: PPUSH
4169: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4173: LD_ADDR_VAR 0 3
4177: PUSH
4178: LD_INT 22
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 21
4190: PUSH
4191: LD_INT 1
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 25
4200: PUSH
4201: LD_INT 3
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: LIST
4212: PPUSH
4213: CALL_OW 69
4217: ST_TO_ADDR
// if not mech then
4218: LD_VAR 0 3
4222: NOT
4223: IFFALSE 4227
// exit ;
4225: GO 4275
// ComExitBuilding ( mech ) ;
4227: LD_VAR 0 3
4231: PPUSH
4232: CALL_OW 122
// wait ( 0 0$1 ) ;
4236: LD_INT 35
4238: PPUSH
4239: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4243: LD_VAR 0 3
4247: PUSH
4248: LD_INT 1
4250: ARRAY
4251: PPUSH
4252: LD_INT 5
4254: PPUSH
4255: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4259: LD_VAR 0 3
4263: PUSH
4264: LD_INT 2
4266: ARRAY
4267: PPUSH
4268: LD_INT 4
4270: PPUSH
4271: CALL_OW 180
// end ;
4275: PPOPN 3
4277: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4278: LD_INT 1
4280: PPUSH
4281: LD_INT 5
4283: PPUSH
4284: CALL_OW 292
4288: PUSH
4289: LD_INT 1
4291: PPUSH
4292: LD_INT 4
4294: PPUSH
4295: CALL_OW 292
4299: OR
4300: IFFALSE 4384
4302: GO 4304
4304: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4305: LD_INT 5
4307: PUSH
4308: LD_INT 4
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PPUSH
4315: CALL_OW 85
// if IsOK ( Bobby ) then
4319: LD_EXP 2
4323: PPUSH
4324: CALL_OW 302
4328: IFFALSE 4364
// begin DialogueOn ;
4330: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4334: LD_EXP 2
4338: PPUSH
4339: LD_STRING DX2-Bobby-1
4341: PPUSH
4342: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4346: LD_EXP 1
4350: PPUSH
4351: LD_STRING DX2-JMM-1a
4353: PPUSH
4354: CALL_OW 88
// DialogueOff ;
4358: CALL_OW 7
// end else
4362: GO 4384
// begin DialogueOn ;
4364: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4368: LD_EXP 1
4372: PPUSH
4373: LD_STRING DX2-JMM-1
4375: PPUSH
4376: CALL_OW 88
// DialogueOff ;
4380: CALL_OW 7
// end ; end ;
4384: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4385: LD_INT 22
4387: PUSH
4388: LD_INT 1
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PUSH
4395: LD_INT 23
4397: PUSH
4398: LD_INT 3
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PUSH
4405: LD_INT 21
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 34
4417: PUSH
4418: LD_INT 42
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: IFFALSE 4856
4437: GO 4439
4439: DISABLE
4440: LD_INT 0
4442: PPUSH
4443: PPUSH
4444: PPUSH
4445: PPUSH
4446: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4447: LD_ADDR_VAR 0 1
4451: PUSH
4452: LD_INT 22
4454: PUSH
4455: LD_INT 1
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PUSH
4462: LD_INT 23
4464: PUSH
4465: LD_INT 3
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 2
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 34
4484: PUSH
4485: LD_INT 42
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: PPUSH
4498: CALL_OW 69
4502: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4503: LD_ADDR_VAR 0 3
4507: PUSH
4508: LD_INT 22
4510: PUSH
4511: LD_INT 1
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: LD_INT 21
4520: PUSH
4521: LD_INT 1
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: LD_INT 26
4530: PUSH
4531: LD_INT 1
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: PPUSH
4543: CALL_OW 69
4547: PUSH
4548: LD_EXP 1
4552: PUSH
4553: LD_EXP 3
4557: PUSH
4558: LD_EXP 2
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: LIST
4567: DIFF
4568: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4569: LD_ADDR_VAR 0 4
4573: PUSH
4574: LD_INT 22
4576: PUSH
4577: LD_INT 1
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 21
4586: PUSH
4587: LD_INT 1
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 26
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 69
4613: PUSH
4614: LD_EXP 4
4618: PUSH
4619: EMPTY
4620: LIST
4621: DIFF
4622: ST_TO_ADDR
// if not tmp then
4623: LD_VAR 0 1
4627: NOT
4628: IFFALSE 4632
// exit ;
4630: GO 4856
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4632: LD_ADDR_VAR 0 2
4636: PUSH
4637: LD_VAR 0 1
4641: PUSH
4642: LD_INT 1
4644: ARRAY
4645: PPUSH
4646: CALL_OW 311
4650: ST_TO_ADDR
// if not speaker then
4651: LD_VAR 0 2
4655: NOT
4656: IFFALSE 4660
// exit ;
4658: GO 4856
// DialogueOn ;
4660: CALL_OW 6
// if speaker = JMM then
4664: LD_VAR 0 2
4668: PUSH
4669: LD_EXP 1
4673: EQUAL
4674: IFFALSE 4708
// begin if Lisa then
4676: LD_EXP 4
4680: IFFALSE 4694
// Say ( Lisa , DX2b-Lisa-1 ) ;
4682: LD_EXP 4
4686: PPUSH
4687: LD_STRING DX2b-Lisa-1
4689: PPUSH
4690: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4694: LD_EXP 1
4698: PPUSH
4699: LD_STRING DX2b-JMM-1
4701: PPUSH
4702: CALL_OW 88
// end else
4706: GO 4852
// begin Say ( JMM , DX2a-JMM-1 ) ;
4708: LD_EXP 1
4712: PPUSH
4713: LD_STRING DX2a-JMM-1
4715: PPUSH
4716: CALL_OW 88
// if speaker = Bobby then
4720: LD_VAR 0 2
4724: PUSH
4725: LD_EXP 2
4729: EQUAL
4730: IFFALSE 4744
// Say ( Bobby , DX2a-Bobby-1 ) ;
4732: LD_EXP 2
4736: PPUSH
4737: LD_STRING DX2a-Bobby-1
4739: PPUSH
4740: CALL_OW 88
// if speaker = Cyrus then
4744: LD_VAR 0 2
4748: PUSH
4749: LD_EXP 3
4753: EQUAL
4754: IFFALSE 4768
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4756: LD_EXP 3
4760: PPUSH
4761: LD_STRING DX2a-Cyrus-1
4763: PPUSH
4764: CALL_OW 88
// if speaker = Lisa then
4768: LD_VAR 0 2
4772: PUSH
4773: LD_EXP 4
4777: EQUAL
4778: IFFALSE 4792
// Say ( Lisa , DX2a-Lisa-1 ) ;
4780: LD_EXP 4
4784: PPUSH
4785: LD_STRING DX2a-Lisa-1
4787: PPUSH
4788: CALL_OW 88
// if speaker in temp1 then
4792: LD_VAR 0 2
4796: PUSH
4797: LD_VAR 0 3
4801: IN
4802: IFFALSE 4816
// Say ( speaker , DX2a-Sol1-1 ) ;
4804: LD_VAR 0 2
4808: PPUSH
4809: LD_STRING DX2a-Sol1-1
4811: PPUSH
4812: CALL_OW 88
// if speaker in temp2 then
4816: LD_VAR 0 2
4820: PUSH
4821: LD_VAR 0 4
4825: IN
4826: IFFALSE 4840
// Say ( speaker , DX2a-FSol1-1 ) ;
4828: LD_VAR 0 2
4832: PPUSH
4833: LD_STRING DX2a-FSol1-1
4835: PPUSH
4836: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4840: LD_EXP 1
4844: PPUSH
4845: LD_STRING DX2a-JMM-2
4847: PPUSH
4848: CALL_OW 88
// end ; DialogueOff ;
4852: CALL_OW 7
// end ;
4856: PPOPN 5
4858: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4859: LD_INT 1
4861: PPUSH
4862: CALL_OW 255
4866: PUSH
4867: LD_INT 1
4869: EQUAL
4870: PUSH
4871: LD_INT 10
4873: PPUSH
4874: CALL_OW 255
4878: PUSH
4879: LD_INT 1
4881: EQUAL
4882: OR
4883: IFFALSE 4943
4885: GO 4887
4887: DISABLE
// begin DialogueOn ;
4888: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4892: LD_EXP 1
4896: PPUSH
4897: LD_STRING D3-JMM-1
4899: PPUSH
4900: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4904: LD_EXP 9
4908: PPUSH
4909: LD_STRING D3-Pow-1
4911: PPUSH
4912: CALL_OW 586
// if IsOK ( Cyrus ) then
4916: LD_EXP 3
4920: PPUSH
4921: CALL_OW 302
4925: IFFALSE 4939
// Say ( Cyrus , D3-Cyrus-1 ) ;
4927: LD_EXP 3
4931: PPUSH
4932: LD_STRING D3-Cyrus-1
4934: PPUSH
4935: CALL_OW 88
// DialogueOff ;
4939: CALL_OW 7
// end ;
4943: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , tmp , i ;
4944: LD_INT 1
4946: PPUSH
4947: CALL_OW 255
4951: PUSH
4952: LD_INT 1
4954: EQUAL
4955: PUSH
4956: LD_INT 10
4958: PPUSH
4959: CALL_OW 255
4963: PUSH
4964: LD_INT 1
4966: EQUAL
4967: AND
4968: IFFALSE 6358
4970: GO 4972
4972: DISABLE
4973: LD_INT 0
4975: PPUSH
4976: PPUSH
4977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4978: LD_ADDR_VAR 0 2
4982: PUSH
4983: LD_INT 22
4985: PUSH
4986: LD_INT 3
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 21
4995: PUSH
4996: LD_INT 1
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PPUSH
5007: CALL_OW 69
5011: ST_TO_ADDR
// if tmp then
5012: LD_VAR 0 2
5016: IFFALSE 5077
// begin for i in tmp do
5018: LD_ADDR_VAR 0 3
5022: PUSH
5023: LD_VAR 0 2
5027: PUSH
5028: FOR_IN
5029: IFFALSE 5075
// begin if IsInUnit ( i ) then
5031: LD_VAR 0 3
5035: PPUSH
5036: CALL_OW 310
5040: IFFALSE 5051
// ComExitBuilding ( i ) ;
5042: LD_VAR 0 3
5046: PPUSH
5047: CALL_OW 122
// wait ( 0 0$1 ) ;
5051: LD_INT 35
5053: PPUSH
5054: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
5058: LD_VAR 0 3
5062: PPUSH
5063: LD_INT 54
5065: PPUSH
5066: LD_INT 17
5068: PPUSH
5069: CALL_OW 174
// end ;
5073: GO 5028
5075: POP
5076: POP
// end ; wait ( 0 0$03 ) ;
5077: LD_INT 105
5079: PPUSH
5080: CALL_OW 67
// DialogueOn ;
5084: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5088: LD_EXP 1
5092: PPUSH
5093: LD_STRING D3a-JMM-1
5095: PPUSH
5096: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-1 ) ;
5100: LD_EXP 9
5104: PPUSH
5105: LD_STRING D3a-Pow-1
5107: PPUSH
5108: CALL_OW 586
// Say ( JMM , D3a-JMM-2 ) ;
5112: LD_EXP 1
5116: PPUSH
5117: LD_STRING D3a-JMM-2
5119: PPUSH
5120: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-2 ) ;
5124: LD_EXP 9
5128: PPUSH
5129: LD_STRING D3a-Pow-2
5131: PPUSH
5132: CALL_OW 586
// Say ( JMM , D3a-JMM-3 ) ;
5136: LD_EXP 1
5140: PPUSH
5141: LD_STRING D3a-JMM-3
5143: PPUSH
5144: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-3 ) ;
5148: LD_EXP 9
5152: PPUSH
5153: LD_STRING D3a-Pow-3
5155: PPUSH
5156: CALL_OW 586
// Say ( JMM , D3a-JMM-4 ) ;
5160: LD_EXP 1
5164: PPUSH
5165: LD_STRING D3a-JMM-4
5167: PPUSH
5168: CALL_OW 88
// DialogueOff ;
5172: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5176: LD_STRING M2
5178: PPUSH
5179: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5183: LD_EXP 1
5187: PPUSH
5188: LD_STRING D3b-JMM-1
5190: PPUSH
5191: CALL_OW 88
// Hint ( Depot2 ) ;
5195: LD_STRING Depot2
5197: PPUSH
5198: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5202: LD_INT 35
5204: PPUSH
5205: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5209: LD_INT 22
5211: PPUSH
5212: LD_INT 22
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 25
5224: PUSH
5225: LD_INT 2
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PPUSH
5236: CALL_OW 70
5240: PUSH
5241: LD_INT 22
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 21
5253: PUSH
5254: LD_INT 1
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL_OW 69
5269: NOT
5270: AND
5271: IFFALSE 5202
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5273: LD_ADDR_VAR 0 1
5277: PUSH
5278: LD_INT 22
5280: PUSH
5281: LD_INT 1
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: LD_INT 23
5290: PUSH
5291: LD_INT 1
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PUSH
5298: LD_INT 25
5300: PUSH
5301: LD_INT 2
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: PUSH
5308: LD_INT 50
5310: PUSH
5311: EMPTY
5312: LIST
5313: PUSH
5314: LD_INT 56
5316: PUSH
5317: EMPTY
5318: LIST
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: PPUSH
5327: CALL_OW 69
5331: PUSH
5332: LD_EXP 1
5336: PUSH
5337: LD_EXP 5
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: DIFF
5346: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5347: LD_INT 35
5349: PPUSH
5350: CALL_OW 67
// until temp > 0 ;
5354: LD_VAR 0 1
5358: PUSH
5359: LD_INT 0
5361: GREATER
5362: IFFALSE 5273
// wait ( 0 0$5 ) ;
5364: LD_INT 175
5366: PPUSH
5367: CALL_OW 67
// PrepareRussianHeroes ;
5371: CALL 11888 0 0
// InGameOn ;
5375: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5379: LD_EXP 8
5383: PPUSH
5384: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5388: LD_EXP 1
5392: PUSH
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PPUSH
5406: LD_EXP 8
5410: PPUSH
5411: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5415: LD_EXP 8
5419: PPUSH
5420: LD_VAR 0 1
5424: PUSH
5425: LD_INT 1
5427: ARRAY
5428: PPUSH
5429: CALL_OW 119
// wait ( 0 0$02 ) ;
5433: LD_INT 70
5435: PPUSH
5436: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5440: LD_EXP 8
5444: PPUSH
5445: LD_STRING D4-Mikh-1
5447: PPUSH
5448: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5452: LD_VAR 0 1
5456: PUSH
5457: LD_INT 1
5459: ARRAY
5460: PPUSH
5461: CALL_OW 258
5465: PUSH
5466: LD_INT 1
5468: EQUAL
5469: IFFALSE 5487
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5471: LD_VAR 0 1
5475: PUSH
5476: LD_INT 1
5478: ARRAY
5479: PPUSH
5480: LD_STRING D4-Sol1-1
5482: PPUSH
5483: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5487: LD_VAR 0 1
5491: PUSH
5492: LD_INT 1
5494: ARRAY
5495: PPUSH
5496: CALL_OW 258
5500: PUSH
5501: LD_INT 2
5503: EQUAL
5504: IFFALSE 5522
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5506: LD_VAR 0 1
5510: PUSH
5511: LD_INT 1
5513: ARRAY
5514: PPUSH
5515: LD_STRING D4-FSol1-1
5517: PPUSH
5518: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5522: LD_EXP 8
5526: PPUSH
5527: LD_STRING D4-Mikh-2
5529: PPUSH
5530: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5534: LD_VAR 0 1
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PPUSH
5543: CALL_OW 258
5547: PUSH
5548: LD_INT 1
5550: EQUAL
5551: IFFALSE 5569
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5553: LD_VAR 0 1
5557: PUSH
5558: LD_INT 1
5560: ARRAY
5561: PPUSH
5562: LD_STRING D4-Sol1-2
5564: PPUSH
5565: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5569: LD_VAR 0 1
5573: PUSH
5574: LD_INT 1
5576: ARRAY
5577: PPUSH
5578: CALL_OW 258
5582: PUSH
5583: LD_INT 2
5585: EQUAL
5586: IFFALSE 5604
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5588: LD_VAR 0 1
5592: PUSH
5593: LD_INT 1
5595: ARRAY
5596: PPUSH
5597: LD_STRING D4-FSol1-2
5599: PPUSH
5600: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5604: LD_EXP 8
5608: PPUSH
5609: LD_STRING D4-Mikh-3
5611: PPUSH
5612: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5616: LD_VAR 0 1
5620: PUSH
5621: LD_INT 1
5623: ARRAY
5624: PPUSH
5625: CALL_OW 258
5629: PUSH
5630: LD_INT 1
5632: EQUAL
5633: IFFALSE 5651
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5635: LD_VAR 0 1
5639: PUSH
5640: LD_INT 1
5642: ARRAY
5643: PPUSH
5644: LD_STRING D4-Sol1-3
5646: PPUSH
5647: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5651: LD_VAR 0 1
5655: PUSH
5656: LD_INT 1
5658: ARRAY
5659: PPUSH
5660: CALL_OW 258
5664: PUSH
5665: LD_INT 2
5667: EQUAL
5668: IFFALSE 5686
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5670: LD_VAR 0 1
5674: PUSH
5675: LD_INT 1
5677: ARRAY
5678: PPUSH
5679: LD_STRING D4-FSol1-3
5681: PPUSH
5682: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5686: LD_EXP 8
5690: PPUSH
5691: LD_STRING D4-Mikh-4
5693: PPUSH
5694: CALL_OW 88
// case Query ( Qs1 ) of 1 :
5698: LD_STRING Qs1
5700: PPUSH
5701: CALL_OW 97
5705: PUSH
5706: LD_INT 1
5708: DOUBLE
5709: EQUAL
5710: IFTRUE 5714
5712: GO 5749
5714: POP
// begin InGameOff ;
5715: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5719: LD_INT 1
5721: PPUSH
5722: LD_INT 6
5724: PPUSH
5725: LD_INT 2
5727: PPUSH
5728: LD_INT 1
5730: PPUSH
5731: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5735: LD_EXP 8
5739: PPUSH
5740: LD_INT 17
5742: PPUSH
5743: CALL_OW 113
// end ; 2 :
5747: GO 6342
5749: LD_INT 2
5751: DOUBLE
5752: EQUAL
5753: IFTRUE 5757
5755: GO 6307
5757: POP
// begin repeat wait ( 0 0$1 ) ;
5758: LD_INT 35
5760: PPUSH
5761: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5765: LD_VAR 0 1
5769: PUSH
5770: LD_INT 1
5772: ARRAY
5773: PPUSH
5774: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5778: LD_VAR 0 1
5782: PUSH
5783: LD_INT 1
5785: ARRAY
5786: PPUSH
5787: LD_EXP 1
5791: PPUSH
5792: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5796: LD_EXP 8
5800: PPUSH
5801: LD_EXP 1
5805: PPUSH
5806: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5810: LD_EXP 1
5814: PPUSH
5815: LD_EXP 8
5819: PPUSH
5820: CALL_OW 296
5824: PUSH
5825: LD_INT 5
5827: LESS
5828: IFFALSE 5758
// ComTurnUnit ( Mikhail , JMM ) ;
5830: LD_EXP 8
5834: PPUSH
5835: LD_EXP 1
5839: PPUSH
5840: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5844: LD_EXP 1
5848: PPUSH
5849: LD_STRING D4b-JMM-1
5851: PPUSH
5852: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5856: LD_EXP 8
5860: PPUSH
5861: LD_STRING D4b-Mikh-1
5863: PPUSH
5864: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5868: LD_EXP 1
5872: PPUSH
5873: LD_STRING D4b-JMM-2
5875: PPUSH
5876: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5880: LD_EXP 8
5884: PPUSH
5885: LD_STRING D4b-Mikh-2
5887: PPUSH
5888: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5892: LD_EXP 1
5896: PPUSH
5897: LD_STRING D4b-JMM-3
5899: PPUSH
5900: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5904: LD_EXP 8
5908: PPUSH
5909: LD_STRING D4b-Mikh-3
5911: PPUSH
5912: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5916: LD_EXP 1
5920: PPUSH
5921: LD_STRING D4b-JMM-4
5923: PPUSH
5924: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5928: LD_EXP 8
5932: PPUSH
5933: LD_STRING D4b-Mikh-4
5935: PPUSH
5936: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5940: LD_EXP 1
5944: PPUSH
5945: LD_STRING D4b-JMM-5
5947: PPUSH
5948: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5952: LD_EXP 8
5956: PPUSH
5957: LD_STRING D4b-Mikh-5
5959: PPUSH
5960: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5964: LD_EXP 1
5968: PPUSH
5969: LD_STRING D4b-JMM-6
5971: PPUSH
5972: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5976: LD_EXP 8
5980: PPUSH
5981: LD_STRING D4b-Mikh-6
5983: PPUSH
5984: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5988: LD_EXP 1
5992: PPUSH
5993: LD_STRING D4b-JMM-7
5995: PPUSH
5996: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
6000: LD_EXP 8
6004: PPUSH
6005: LD_STRING D4b-Mikh-7
6007: PPUSH
6008: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6012: LD_VAR 0 1
6016: PUSH
6017: LD_INT 1
6019: ARRAY
6020: PPUSH
6021: CALL_OW 258
6025: PUSH
6026: LD_INT 1
6028: EQUAL
6029: IFFALSE 6047
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6031: LD_VAR 0 1
6035: PUSH
6036: LD_INT 1
6038: ARRAY
6039: PPUSH
6040: LD_STRING D4b-Sol1-7
6042: PPUSH
6043: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6047: LD_VAR 0 1
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PPUSH
6056: CALL_OW 258
6060: PUSH
6061: LD_INT 2
6063: EQUAL
6064: IFFALSE 6082
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6066: LD_VAR 0 1
6070: PUSH
6071: LD_INT 1
6073: ARRAY
6074: PPUSH
6075: LD_STRING D4b-FSol1-7
6077: PPUSH
6078: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6082: LD_EXP 1
6086: PPUSH
6087: LD_STRING D4b-JMM-8
6089: PPUSH
6090: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6094: LD_VAR 0 1
6098: PUSH
6099: LD_INT 1
6101: ARRAY
6102: PPUSH
6103: CALL_OW 258
6107: PUSH
6108: LD_INT 1
6110: EQUAL
6111: IFFALSE 6129
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6113: LD_VAR 0 1
6117: PUSH
6118: LD_INT 1
6120: ARRAY
6121: PPUSH
6122: LD_STRING D4b-Sol1-8
6124: PPUSH
6125: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6129: LD_VAR 0 1
6133: PUSH
6134: LD_INT 1
6136: ARRAY
6137: PPUSH
6138: CALL_OW 258
6142: PUSH
6143: LD_INT 2
6145: EQUAL
6146: IFFALSE 6164
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6148: LD_VAR 0 1
6152: PUSH
6153: LD_INT 1
6155: ARRAY
6156: PPUSH
6157: LD_STRING D4b-FSol1-8
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6164: LD_EXP 1
6168: PPUSH
6169: LD_STRING D4b-JMM-9
6171: PPUSH
6172: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6176: LD_EXP 8
6180: PPUSH
6181: LD_INT 1
6183: PPUSH
6184: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6188: LD_ADDR_VAR 0 3
6192: PUSH
6193: LD_INT 22
6195: PUSH
6196: LD_INT 1
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: PUSH
6203: EMPTY
6204: LIST
6205: PPUSH
6206: CALL_OW 69
6210: PUSH
6211: FOR_IN
6212: IFFALSE 6225
// ComFree ( i ) ;
6214: LD_VAR 0 3
6218: PPUSH
6219: CALL_OW 139
6223: GO 6211
6225: POP
6226: POP
// repeat wait ( 0 0$1 ) ;
6227: LD_INT 35
6229: PPUSH
6230: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6234: LD_EXP 8
6238: PPUSH
6239: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6243: LD_EXP 8
6247: PUSH
6248: LD_VAR 0 1
6252: PUSH
6253: LD_INT 1
6255: ARRAY
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PPUSH
6261: LD_INT 1
6263: PPUSH
6264: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6268: LD_EXP 8
6272: PPUSH
6273: CALL_OW 310
6277: IFFALSE 6227
// mikhailDepot = IsInUnit ( Mikhail ) ;
6279: LD_ADDR_EXP 23
6283: PUSH
6284: LD_EXP 8
6288: PPUSH
6289: CALL_OW 310
6293: ST_TO_ADDR
// InGameOff ;
6294: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6298: LD_STRING M3
6300: PPUSH
6301: CALL_OW 337
// end ; 3 :
6305: GO 6342
6307: LD_INT 3
6309: DOUBLE
6310: EQUAL
6311: IFTRUE 6315
6313: GO 6341
6315: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6316: LD_EXP 8
6320: PPUSH
6321: LD_INT 17
6323: PPUSH
6324: CALL_OW 113
// wait ( 0 0$3 ) ;
6328: LD_INT 105
6330: PPUSH
6331: CALL_OW 67
// InGameOff ;
6335: CALL_OW 9
// end ; end ;
6339: GO 6342
6341: POP
// PrepareTigers ;
6342: CALL 15305 0 0
// RussianTrap ;
6346: CALL 10215 0 0
// tigersRespawn = 1 ;
6350: LD_ADDR_EXP 30
6354: PUSH
6355: LD_INT 1
6357: ST_TO_ADDR
// end ;
6358: PPOPN 3
6360: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6361: LD_INT 1
6363: PPUSH
6364: CALL_OW 255
6368: PUSH
6369: LD_INT 1
6371: EQUAL
6372: PUSH
6373: LD_INT 10
6375: PPUSH
6376: CALL_OW 255
6380: PUSH
6381: LD_INT 1
6383: EQUAL
6384: AND
6385: PUSH
6386: LD_INT 1
6388: PPUSH
6389: CALL_OW 274
6393: PPUSH
6394: LD_INT 1
6396: PPUSH
6397: CALL_OW 275
6401: PUSH
6402: LD_INT 100
6404: GREATEREQUAL
6405: AND
6406: IFFALSE 6555
6408: GO 6410
6410: DISABLE
6411: LD_INT 0
6413: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6414: LD_INT 2100
6416: PPUSH
6417: LD_INT 4200
6419: PPUSH
6420: CALL_OW 12
6424: PUSH
6425: LD_INT 1050
6427: PLUS
6428: PPUSH
6429: CALL_OW 67
// PrepareCargoBays ;
6433: CALL 13071 0 0
// cargoRespawn = 1 ;
6437: LD_ADDR_EXP 28
6441: PUSH
6442: LD_INT 1
6444: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6445: LD_ADDR_VAR 0 1
6449: PUSH
6450: LD_EXP 15
6454: PUSH
6455: LD_EXP 16
6459: PUSH
6460: LD_EXP 17
6464: PUSH
6465: LD_EXP 18
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6476: LD_VAR 0 1
6480: PPUSH
6481: LD_INT 17
6483: PPUSH
6484: LD_INT 10
6486: PPUSH
6487: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6491: LD_VAR 0 1
6495: PPUSH
6496: LD_INT 36
6498: PPUSH
6499: LD_INT 13
6501: PPUSH
6502: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6506: LD_VAR 0 1
6510: PPUSH
6511: LD_INT 40
6513: PPUSH
6514: LD_INT 20
6516: PPUSH
6517: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6521: LD_VAR 0 1
6525: PPUSH
6526: LD_INT 53
6528: PPUSH
6529: LD_INT 16
6531: PPUSH
6532: CALL_OW 171
// wait ( 0 0$5 ) ;
6536: LD_INT 175
6538: PPUSH
6539: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6543: LD_EXP 17
6547: PPUSH
6548: LD_STRING D5-Rus2-1
6550: PPUSH
6551: CALL_OW 88
// end ;
6555: PPOPN 1
6557: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6558: LD_EXP 28
6562: PUSH
6563: LD_INT 1
6565: EQUAL
6566: IFFALSE 6721
6568: GO 6570
6570: DISABLE
6571: LD_INT 0
6573: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6574: LD_ADDR_VAR 0 1
6578: PUSH
6579: LD_INT 22
6581: PUSH
6582: LD_INT 3
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 21
6591: PUSH
6592: LD_INT 2
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 34
6601: PUSH
6602: LD_INT 51
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: PPUSH
6614: CALL_OW 69
6618: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6619: LD_INT 105
6621: PPUSH
6622: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6626: LD_VAR 0 1
6630: PPUSH
6631: LD_INT 3
6633: PUSH
6634: LD_INT 60
6636: PUSH
6637: EMPTY
6638: LIST
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PPUSH
6644: CALL_OW 72
6648: PUSH
6649: LD_VAR 0 1
6653: PPUSH
6654: LD_INT 3
6656: PUSH
6657: LD_INT 24
6659: PUSH
6660: LD_INT 980
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PPUSH
6671: CALL_OW 72
6675: OR
6676: IFFALSE 6619
// ComMoveXY ( cargos , 7 , 9 ) ;
6678: LD_VAR 0 1
6682: PPUSH
6683: LD_INT 7
6685: PPUSH
6686: LD_INT 9
6688: PPUSH
6689: CALL_OW 111
// cargoSee = 1 ;
6693: LD_ADDR_EXP 29
6697: PUSH
6698: LD_INT 1
6700: ST_TO_ADDR
// cargoEscape = 1 ;
6701: LD_ADDR_EXP 20
6705: PUSH
6706: LD_INT 1
6708: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6709: LD_EXP 17
6713: PPUSH
6714: LD_STRING D5-Rus2-1a
6716: PPUSH
6717: CALL_OW 88
// end ;
6721: PPOPN 1
6723: END
// every 0 0$1 trigger cargoEscape and UnitFilter ( [ cargo1 , cargo2 ] , [ [ f_ok ] , [ f_side , 3 ] , [ f_placed ] ] ) do var cr , i , x , y ;
6724: LD_EXP 20
6728: PUSH
6729: LD_EXP 15
6733: PUSH
6734: LD_EXP 16
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: PPUSH
6743: LD_INT 50
6745: PUSH
6746: EMPTY
6747: LIST
6748: PUSH
6749: LD_INT 22
6751: PUSH
6752: LD_INT 3
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 52
6761: PUSH
6762: EMPTY
6763: LIST
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: LIST
6769: PPUSH
6770: CALL_OW 72
6774: AND
6775: IFFALSE 7108
6777: GO 6779
6779: DISABLE
6780: LD_INT 0
6782: PPUSH
6783: PPUSH
6784: PPUSH
6785: PPUSH
// begin enable ;
6786: ENABLE
// for i in [ cargo1 , cargo2 ] do
6787: LD_ADDR_VAR 0 2
6791: PUSH
6792: LD_EXP 15
6796: PUSH
6797: LD_EXP 16
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: FOR_IN
6807: IFFALSE 7106
// begin cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
6809: LD_ADDR_VAR 0 1
6813: PUSH
6814: LD_VAR 0 2
6818: PPUSH
6819: CALL_OW 250
6823: PPUSH
6824: LD_VAR 0 2
6828: PPUSH
6829: CALL_OW 251
6833: PPUSH
6834: LD_INT 6
6836: PPUSH
6837: CALL 76442 0 3
6841: ST_TO_ADDR
// if cr and GetMultiCargo ( i ) [ 4 ] < 60 then
6842: LD_VAR 0 1
6846: PUSH
6847: LD_VAR 0 2
6851: PPUSH
6852: CALL 77661 0 1
6856: PUSH
6857: LD_INT 4
6859: ARRAY
6860: PUSH
6861: LD_INT 60
6863: LESS
6864: AND
6865: IFFALSE 6904
// ComCollect ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
6867: LD_VAR 0 2
6871: PPUSH
6872: LD_VAR 0 1
6876: PUSH
6877: LD_INT 1
6879: ARRAY
6880: PUSH
6881: LD_INT 1
6883: ARRAY
6884: PPUSH
6885: LD_VAR 0 1
6889: PUSH
6890: LD_INT 1
6892: ARRAY
6893: PUSH
6894: LD_INT 2
6896: ARRAY
6897: PPUSH
6898: CALL_OW 117
6902: GO 7104
// if not IsInArea ( i , RemoveArea ) then
6904: LD_VAR 0 2
6908: PPUSH
6909: LD_INT 32
6911: PPUSH
6912: CALL_OW 308
6916: NOT
6917: IFFALSE 7065
// begin x := ShiftX ( GetX ( i ) , 4 , 3 ) ;
6919: LD_ADDR_VAR 0 3
6923: PUSH
6924: LD_VAR 0 2
6928: PPUSH
6929: CALL_OW 250
6933: PPUSH
6934: LD_INT 4
6936: PPUSH
6937: LD_INT 3
6939: PPUSH
6940: CALL_OW 272
6944: ST_TO_ADDR
// y := GetY ( i ) ;
6945: LD_ADDR_VAR 0 4
6949: PUSH
6950: LD_VAR 0 2
6954: PPUSH
6955: CALL_OW 251
6959: ST_TO_ADDR
// if HexInfo ( x , y ) then
6960: LD_VAR 0 3
6964: PPUSH
6965: LD_VAR 0 4
6969: PPUSH
6970: CALL_OW 428
6974: IFFALSE 6997
// x := ShiftX ( x , 4 , 3 ) ;
6976: LD_ADDR_VAR 0 3
6980: PUSH
6981: LD_VAR 0 3
6985: PPUSH
6986: LD_INT 4
6988: PPUSH
6989: LD_INT 3
6991: PPUSH
6992: CALL_OW 272
6996: ST_TO_ADDR
// if HexInfo ( x , y ) or not ValidHex ( x , y ) then
6997: LD_VAR 0 3
7001: PPUSH
7002: LD_VAR 0 4
7006: PPUSH
7007: CALL_OW 428
7011: PUSH
7012: LD_VAR 0 3
7016: PPUSH
7017: LD_VAR 0 4
7021: PPUSH
7022: CALL_OW 488
7026: NOT
7027: OR
7028: IFFALSE 7044
// ComMoveToArea ( i , RemoveArea ) else
7030: LD_VAR 0 2
7034: PPUSH
7035: LD_INT 32
7037: PPUSH
7038: CALL_OW 113
7042: GO 7063
// ComMoveXY ( i , x , y ) ;
7044: LD_VAR 0 2
7048: PPUSH
7049: LD_VAR 0 3
7053: PPUSH
7054: LD_VAR 0 4
7058: PPUSH
7059: CALL_OW 111
// end else
7063: GO 7104
// begin RemoveUnit ( IsDrivenBy ( i ) ) ;
7065: LD_VAR 0 2
7069: PPUSH
7070: CALL_OW 311
7074: PPUSH
7075: CALL_OW 64
// RemoveUnit ( i ) ;
7079: LD_VAR 0 2
7083: PPUSH
7084: CALL_OW 64
// cargoEscape := cargoEscape + 1 ;
7088: LD_ADDR_EXP 20
7092: PUSH
7093: LD_EXP 20
7097: PUSH
7098: LD_INT 1
7100: PLUS
7101: ST_TO_ADDR
// continue ;
7102: GO 6806
// end ; end ;
7104: GO 6806
7106: POP
7107: POP
// end ;
7108: PPOPN 4
7110: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
7111: LD_EXP 20
7115: PUSH
7116: LD_INT 1
7118: GREATER
7119: IFFALSE 7368
7121: GO 7123
7123: DISABLE
7124: LD_INT 0
7126: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
7127: LD_INT 4
7129: PPUSH
7130: LD_INT 1
7132: PPUSH
7133: LD_INT 1
7135: PPUSH
7136: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
7140: LD_INT 31
7142: PPUSH
7143: LD_INT 1
7145: PPUSH
7146: LD_INT 1
7148: PPUSH
7149: CALL_OW 324
// Hint ( Bunker ) ;
7153: LD_STRING Bunker
7155: PPUSH
7156: CALL_OW 339
// if IsOK ( Jerry ) then
7160: LD_EXP 7
7164: PPUSH
7165: CALL_OW 302
7169: IFFALSE 7185
// Say ( Jerry , D5a-Sol1-1 ) else
7171: LD_EXP 7
7175: PPUSH
7176: LD_STRING D5a-Sol1-1
7178: PPUSH
7179: CALL_OW 88
7183: GO 7271
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
7185: LD_ADDR_VAR 0 1
7189: PUSH
7190: LD_INT 22
7192: PUSH
7193: LD_INT 1
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: LD_INT 26
7202: PUSH
7203: LD_INT 1
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 69
7218: PUSH
7219: LD_EXP 1
7223: PUSH
7224: LD_EXP 2
7228: PUSH
7229: LD_EXP 3
7233: PUSH
7234: LD_EXP 5
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: DIFF
7245: ST_TO_ADDR
// if not speaker then
7246: LD_VAR 0 1
7250: NOT
7251: IFFALSE 7255
// exit ;
7253: GO 7368
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7255: LD_VAR 0 1
7259: PUSH
7260: LD_INT 1
7262: ARRAY
7263: PPUSH
7264: LD_STRING D5a-Sol1-1
7266: PPUSH
7267: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7271: LD_EXP 1
7275: PPUSH
7276: LD_STRING D5a-JMM-1
7278: PPUSH
7279: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
7283: LD_INT 22
7285: PPUSH
7286: LD_INT 22
7288: PUSH
7289: LD_INT 1
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: PUSH
7296: LD_INT 25
7298: PUSH
7299: LD_INT 2
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PPUSH
7310: CALL_OW 70
7314: IFFALSE 7368
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
7316: LD_INT 22
7318: PPUSH
7319: LD_INT 22
7321: PUSH
7322: LD_INT 1
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: LD_INT 25
7331: PUSH
7332: LD_INT 2
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PPUSH
7343: CALL_OW 70
7347: PUSH
7348: LD_INT 1
7350: ARRAY
7351: PPUSH
7352: LD_INT 31
7354: PPUSH
7355: LD_INT 44
7357: PPUSH
7358: LD_INT 13
7360: PPUSH
7361: LD_INT 1
7363: PPUSH
7364: CALL_OW 145
// end ;
7368: PPOPN 1
7370: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7371: LD_INT 1
7373: PPUSH
7374: CALL_OW 255
7378: PUSH
7379: LD_INT 3
7381: EQUAL
7382: PUSH
7383: LD_INT 1
7385: PPUSH
7386: CALL_OW 256
7390: PUSH
7391: LD_INT 1000
7393: LESS
7394: AND
7395: PUSH
7396: LD_INT 10
7398: PPUSH
7399: CALL_OW 255
7403: PUSH
7404: LD_INT 3
7406: EQUAL
7407: PUSH
7408: LD_INT 10
7410: PPUSH
7411: CALL_OW 256
7415: PUSH
7416: LD_INT 1000
7418: LESS
7419: AND
7420: OR
7421: IFFALSE 7438
7423: GO 7425
7425: DISABLE
// Say ( JMM , D8-JMM-1 ) ;
7426: LD_EXP 1
7430: PPUSH
7431: LD_STRING D8-JMM-1
7433: PPUSH
7434: CALL_OW 88
7438: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7439: LD_EXP 8
7443: PPUSH
7444: CALL_OW 310
7448: PUSH
7449: LD_INT 1
7451: EQUAL
7452: PUSH
7453: LD_EXP 22
7457: PUSH
7458: LD_INT 3
7460: EQUAL
7461: NOT
7462: AND
7463: IFFALSE 7485
7465: GO 7467
7467: DISABLE
// begin enable ;
7468: ENABLE
// mikhailInBase = 1 ;
7469: LD_ADDR_EXP 22
7473: PUSH
7474: LD_INT 1
7476: ST_TO_ADDR
// mikhailStatus = 1 ;
7477: LD_ADDR_EXP 21
7481: PUSH
7482: LD_INT 1
7484: ST_TO_ADDR
// end ;
7485: END
// export function AskMikhail ; begin
7486: LD_INT 0
7488: PPUSH
// case Query ( QMikh2 ) of 1 :
7489: LD_STRING QMikh2
7491: PPUSH
7492: CALL_OW 97
7496: PUSH
7497: LD_INT 1
7499: DOUBLE
7500: EQUAL
7501: IFTRUE 7505
7503: GO 7572
7505: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7506: LD_INT 1
7508: PPUSH
7509: LD_INT 6
7511: PPUSH
7512: LD_INT 2
7514: PPUSH
7515: LD_INT 1
7517: PPUSH
7518: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7522: LD_EXP 8
7526: PPUSH
7527: LD_INT 6
7529: PPUSH
7530: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7534: LD_EXP 8
7538: PPUSH
7539: CALL_OW 122
// wait ( 0 0$1 ) ;
7543: LD_INT 35
7545: PPUSH
7546: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7550: LD_EXP 8
7554: PPUSH
7555: LD_INT 17
7557: PPUSH
7558: CALL_OW 113
// mikhailInbase = 0 ;
7562: LD_ADDR_EXP 22
7566: PUSH
7567: LD_INT 0
7569: ST_TO_ADDR
// end ; 2 :
7570: GO 7813
7572: LD_INT 2
7574: DOUBLE
7575: EQUAL
7576: IFTRUE 7580
7578: GO 7753
7580: POP
// begin mikhailInBase = 2 ;
7581: LD_ADDR_EXP 22
7585: PUSH
7586: LD_INT 2
7588: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7589: LD_EXP 8
7593: PPUSH
7594: LD_INT 6
7596: PPUSH
7597: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7601: LD_EXP 8
7605: PPUSH
7606: CALL_OW 122
// wait ( 0 0$1 ) ;
7610: LD_INT 35
7612: PPUSH
7613: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7617: LD_EXP 8
7621: PPUSH
7622: LD_EXP 8
7626: PPUSH
7627: CALL_OW 250
7631: PUSH
7632: LD_INT 2
7634: PLUS
7635: PPUSH
7636: LD_EXP 8
7640: PPUSH
7641: CALL_OW 251
7645: PUSH
7646: LD_INT 2
7648: PLUS
7649: PPUSH
7650: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7654: LD_EXP 8
7658: PPUSH
7659: LD_EXP 8
7663: PPUSH
7664: CALL_OW 250
7668: PUSH
7669: LD_INT 1
7671: PLUS
7672: PPUSH
7673: LD_EXP 8
7677: PPUSH
7678: CALL_OW 251
7682: PUSH
7683: LD_INT 2
7685: PLUS
7686: PPUSH
7687: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7691: LD_EXP 8
7695: PPUSH
7696: LD_EXP 8
7700: PPUSH
7701: CALL_OW 250
7705: PUSH
7706: LD_INT 2
7708: PLUS
7709: PPUSH
7710: LD_EXP 8
7714: PPUSH
7715: CALL_OW 251
7719: PPUSH
7720: CALL_OW 171
// wait ( 0 0$5 ) ;
7724: LD_INT 175
7726: PPUSH
7727: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7731: LD_EXP 8
7735: PPUSH
7736: LD_INT 25
7738: PPUSH
7739: CALL_OW 113
// mikhailInBase = 4 ;
7743: LD_ADDR_EXP 22
7747: PUSH
7748: LD_INT 4
7750: ST_TO_ADDR
// end ; 3 :
7751: GO 7813
7753: LD_INT 3
7755: DOUBLE
7756: EQUAL
7757: IFTRUE 7761
7759: GO 7812
7761: POP
// begin SetSide ( Mikhail , 6 ) ;
7762: LD_EXP 8
7766: PPUSH
7767: LD_INT 6
7769: PPUSH
7770: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7774: LD_EXP 8
7778: PPUSH
7779: CALL_OW 122
// wait ( 0 0$1 ) ;
7783: LD_INT 35
7785: PPUSH
7786: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7790: LD_EXP 8
7794: PPUSH
7795: LD_INT 17
7797: PPUSH
7798: CALL_OW 113
// mikhailInbase = 3 ;
7802: LD_ADDR_EXP 22
7806: PUSH
7807: LD_INT 3
7809: ST_TO_ADDR
// end ; end ;
7810: GO 7813
7812: POP
// end ;
7813: LD_VAR 0 1
7817: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7818: LD_EXP 8
7822: PPUSH
7823: LD_INT 25
7825: PPUSH
7826: CALL_OW 308
7830: PUSH
7831: LD_EXP 22
7835: PUSH
7836: LD_INT 4
7838: EQUAL
7839: AND
7840: IFFALSE 7944
7842: GO 7844
7844: DISABLE
// begin enable ;
7845: ENABLE
// mikhailInBase = 1 ;
7846: LD_ADDR_EXP 22
7850: PUSH
7851: LD_INT 1
7853: ST_TO_ADDR
// InGameOn ;
7854: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7858: LD_INT 1
7860: PPUSH
7861: LD_INT 6
7863: PPUSH
7864: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7868: LD_INT 35
7870: PPUSH
7871: CALL_OW 67
// if Carry ( Mikhail ) then
7875: LD_EXP 8
7879: PPUSH
7880: CALL_OW 281
7884: IFFALSE 7895
// ComUnload ( Mikhail ) ;
7886: LD_EXP 8
7890: PPUSH
7891: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7895: LD_EXP 8
7899: PPUSH
7900: LD_INT 1
7902: PPUSH
7903: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7907: LD_EXP 8
7911: PPUSH
7912: CALL_OW 310
7916: IFFALSE 7868
// SetSide ( dep1 , 1 ) ;
7918: LD_INT 1
7920: PPUSH
7921: LD_INT 1
7923: PPUSH
7924: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7928: LD_EXP 8
7932: PPUSH
7933: LD_INT 1
7935: PPUSH
7936: CALL_OW 235
// InGameOff ;
7940: CALL_OW 9
// end ;
7944: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7945: LD_EXP 8
7949: PPUSH
7950: CALL_OW 310
7954: PUSH
7955: LD_EXP 22
7959: PUSH
7960: LD_INT 3
7962: EQUAL
7963: NOT
7964: AND
7965: IFFALSE 8100
7967: GO 7969
7969: DISABLE
// begin enable ;
7970: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7971: LD_INT 22
7973: PUSH
7974: LD_INT 1
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 21
7983: PUSH
7984: LD_INT 1
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: LD_INT 91
7993: PUSH
7994: LD_EXP 8
7998: PPUSH
7999: CALL_OW 310
8003: PUSH
8004: LD_INT 10
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: LIST
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: PPUSH
8017: CALL_OW 69
8021: PUSH
8022: LD_INT 1
8024: EQUAL
8025: IFFALSE 8100
// begin mikhailStatus = 4 ;
8027: LD_ADDR_EXP 21
8031: PUSH
8032: LD_INT 4
8034: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
8035: LD_INT 1
8037: PPUSH
8038: LD_INT 6
8040: PPUSH
8041: LD_INT 2
8043: PPUSH
8044: LD_INT 1
8046: PPUSH
8047: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
8051: LD_EXP 8
8055: PPUSH
8056: LD_INT 6
8058: PPUSH
8059: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
8063: LD_EXP 8
8067: PPUSH
8068: CALL_OW 122
// wait ( 0 0$1 ) ;
8072: LD_INT 35
8074: PPUSH
8075: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
8079: LD_EXP 8
8083: PPUSH
8084: LD_INT 17
8086: PPUSH
8087: CALL_OW 113
// mikhailStatus = 3 ;
8091: LD_ADDR_EXP 21
8095: PUSH
8096: LD_INT 3
8098: ST_TO_ADDR
// disable ;
8099: DISABLE
// end ; end ;
8100: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
8101: LD_EXP 1
8105: PPUSH
8106: LD_EXP 23
8110: PPUSH
8111: CALL_OW 296
8115: PUSH
8116: LD_INT 5
8118: LESS
8119: PUSH
8120: LD_EXP 21
8124: PUSH
8125: LD_INT 3
8127: EQUAL
8128: AND
8129: PUSH
8130: LD_EXP 22
8134: PUSH
8135: LD_INT 3
8137: EQUAL
8138: NOT
8139: AND
8140: IFFALSE 8371
8142: GO 8144
8144: DISABLE
8145: LD_INT 0
8147: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
8148: LD_ADDR_VAR 0 1
8152: PUSH
8153: LD_INT 22
8155: PUSH
8156: LD_INT 1
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PUSH
8163: LD_INT 21
8165: PUSH
8166: LD_INT 1
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 26
8175: PUSH
8176: LD_INT 1
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: LIST
8187: PPUSH
8188: CALL_OW 69
8192: PUSH
8193: LD_EXP 1
8197: PUSH
8198: LD_EXP 5
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: DIFF
8207: ST_TO_ADDR
// if not tmp then
8208: LD_VAR 0 1
8212: NOT
8213: IFFALSE 8217
// exit ;
8215: GO 8371
// DialogueOn ;
8217: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
8221: LD_EXP 1
8225: PPUSH
8226: LD_STRING D7-JMM-1
8228: PPUSH
8229: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
8233: LD_VAR 0 1
8237: PUSH
8238: LD_INT 1
8240: ARRAY
8241: PPUSH
8242: LD_STRING D7-Sol1-1
8244: PPUSH
8245: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8249: LD_EXP 1
8253: PPUSH
8254: LD_STRING D7-JMM-2
8256: PPUSH
8257: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8261: LD_VAR 0 1
8265: PUSH
8266: LD_INT 1
8268: ARRAY
8269: PPUSH
8270: LD_STRING D7-Sol1-2
8272: PPUSH
8273: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8277: LD_EXP 1
8281: PPUSH
8282: LD_STRING D7-JMM-3
8284: PPUSH
8285: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8289: LD_VAR 0 1
8293: PUSH
8294: LD_INT 1
8296: ARRAY
8297: PPUSH
8298: LD_STRING D7-Sol1-3
8300: PPUSH
8301: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8305: LD_EXP 3
8309: PPUSH
8310: CALL_OW 302
8314: PUSH
8315: LD_EXP 4
8319: PPUSH
8320: CALL_OW 302
8324: AND
8325: IFFALSE 8367
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8327: LD_EXP 3
8331: PPUSH
8332: LD_STRING D7-Cyrus-3
8334: PPUSH
8335: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8339: LD_VAR 0 1
8343: PUSH
8344: LD_INT 1
8346: ARRAY
8347: PPUSH
8348: LD_STRING D7-Sol1-4
8350: PPUSH
8351: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8355: LD_EXP 4
8359: PPUSH
8360: LD_STRING D7-Lisa-4
8362: PPUSH
8363: CALL_OW 88
// end ; DialogueOff ;
8367: CALL_OW 7
// end ;
8371: PPOPN 1
8373: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8374: LD_EXP 8
8378: PPUSH
8379: CALL_OW 303
8383: PUSH
8384: LD_EXP 21
8388: PUSH
8389: LD_INT 3
8391: EQUAL
8392: AND
8393: IFFALSE 8407
8395: GO 8397
8397: DISABLE
// begin enable ;
8398: ENABLE
// mikhailStatus = 2 ;
8399: LD_ADDR_EXP 21
8403: PUSH
8404: LD_INT 2
8406: ST_TO_ADDR
// end ;
8407: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8408: LD_EXP 8
8412: PPUSH
8413: LD_INT 17
8415: PPUSH
8416: CALL_OW 308
8420: PUSH
8421: LD_EXP 8
8425: PPUSH
8426: CALL_OW 255
8430: PUSH
8431: LD_INT 6
8433: EQUAL
8434: AND
8435: IFFALSE 8468
8437: GO 8439
8439: DISABLE
// begin if not mikhailInBase = 3 then
8440: LD_EXP 22
8444: PUSH
8445: LD_INT 3
8447: EQUAL
8448: NOT
8449: IFFALSE 8459
// mikhailStatus = 3 ;
8451: LD_ADDR_EXP 21
8455: PUSH
8456: LD_INT 3
8458: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8459: LD_EXP 8
8463: PPUSH
8464: CALL_OW 64
// end ;
8468: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8469: LD_EXP 21
8473: PUSH
8474: LD_INT 3
8476: EQUAL
8477: PUSH
8478: LD_EXP 8
8482: PPUSH
8483: CALL_OW 255
8487: PUSH
8488: LD_INT 6
8490: EQUAL
8491: AND
8492: IFFALSE 8658
8494: GO 8496
8496: DISABLE
8497: LD_INT 0
8499: PPUSH
8500: PPUSH
// begin enable ;
8501: ENABLE
// if IsOk ( Mikhail ) then
8502: LD_EXP 8
8506: PPUSH
8507: CALL_OW 302
8511: IFFALSE 8658
// begin attacker := Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8513: LD_ADDR_VAR 0 2
8517: PUSH
8518: LD_EXP 8
8522: PPUSH
8523: LD_INT 22
8525: PUSH
8526: LD_INT 1
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 21
8535: PUSH
8536: LD_INT 1
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: PPUSH
8547: CALL_OW 69
8551: PPUSH
8552: CALL 10407 0 2
8556: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8557: LD_VAR 0 2
8561: PPUSH
8562: LD_EXP 8
8566: PPUSH
8567: CALL_OW 296
8571: PUSH
8572: LD_INT 8
8574: LESS
8575: IFFALSE 8658
// begin if GetSex ( attacker ) = sex_male then
8577: LD_VAR 0 2
8581: PPUSH
8582: CALL_OW 258
8586: PUSH
8587: LD_INT 1
8589: EQUAL
8590: IFFALSE 8626
// begin disable ;
8592: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8593: LD_VAR 0 2
8597: PPUSH
8598: LD_STRING D7a-Sol1-1
8600: PPUSH
8601: CALL_OW 88
// wait ( 0 0$2 ) ;
8605: LD_INT 70
8607: PPUSH
8608: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8612: LD_VAR 0 2
8616: PPUSH
8617: LD_STRING D7a-Sol1-1a
8619: PPUSH
8620: CALL_OW 88
// end else
8624: GO 8658
// begin disable ;
8626: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8627: LD_VAR 0 2
8631: PPUSH
8632: LD_STRING D7a-FSol1-1
8634: PPUSH
8635: CALL_OW 88
// wait ( 0 0$2 ) ;
8639: LD_INT 70
8641: PPUSH
8642: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8646: LD_VAR 0 2
8650: PPUSH
8651: LD_STRING D7a-FSol1-1a
8653: PPUSH
8654: CALL_OW 88
// end ; end ; end ; end ;
8658: PPOPN 2
8660: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8661: LD_EXP 27
8665: PUSH
8666: LD_INT 1
8668: EQUAL
8669: PUSH
8670: LD_INT 22
8672: PPUSH
8673: LD_INT 22
8675: PUSH
8676: LD_INT 3
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: LD_INT 21
8685: PUSH
8686: LD_INT 1
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PPUSH
8697: CALL_OW 70
8701: PUSH
8702: LD_INT 2
8704: GREATER
8705: AND
8706: PUSH
8707: LD_INT 22
8709: PPUSH
8710: LD_INT 22
8712: PUSH
8713: LD_INT 1
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: LD_INT 2
8722: PUSH
8723: LD_INT 21
8725: PUSH
8726: LD_INT 1
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PUSH
8733: LD_INT 59
8735: PUSH
8736: EMPTY
8737: LIST
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: LIST
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: PPUSH
8748: CALL_OW 70
8752: PUSH
8753: LD_INT 0
8755: EQUAL
8756: AND
8757: IFFALSE 8772
8759: GO 8761
8761: DISABLE
// SetSide ( dep1 , 3 ) ;
8762: LD_INT 1
8764: PPUSH
8765: LD_INT 3
8767: PPUSH
8768: CALL_OW 235
8772: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8773: LD_EXP 30
8777: PUSH
8778: LD_INT 1
8780: EQUAL
8781: PUSH
8782: LD_INT 22
8784: PUSH
8785: LD_INT 0
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PUSH
8792: LD_INT 25
8794: PUSH
8795: LD_INT 14
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PPUSH
8806: CALL_OW 69
8810: PUSH
8811: LD_INT 0
8813: EQUAL
8814: AND
8815: IFFALSE 8916
8817: GO 8819
8819: DISABLE
8820: LD_INT 0
8822: PPUSH
8823: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8824: LD_ADDR_VAR 0 2
8828: PUSH
8829: LD_INT 22
8831: PUSH
8832: LD_INT 1
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PUSH
8839: LD_INT 21
8841: PUSH
8842: LD_INT 1
8844: PUSH
8845: EMPTY
8846: LIST
8847: LIST
8848: PUSH
8849: LD_INT 23
8851: PUSH
8852: LD_INT 1
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: LIST
8863: PPUSH
8864: CALL_OW 69
8868: ST_TO_ADDR
// for i in tmp do
8869: LD_ADDR_VAR 0 1
8873: PUSH
8874: LD_VAR 0 2
8878: PUSH
8879: FOR_IN
8880: IFFALSE 8907
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8882: LD_VAR 0 1
8886: PPUSH
8887: LD_INT 1
8889: PPUSH
8890: LD_INT 4
8892: PPUSH
8893: CALL_OW 12
8897: PPUSH
8898: LD_INT 300
8900: PPUSH
8901: CALL_OW 492
8905: GO 8879
8907: POP
8908: POP
// SetAchievement ( ACH_TIGER ) ;
8909: LD_STRING ACH_TIGER
8911: PPUSH
8912: CALL_OW 543
// end ;
8916: PPOPN 2
8918: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
8919: LD_INT 22
8921: PUSH
8922: LD_INT 1
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PUSH
8929: LD_INT 34
8931: PUSH
8932: LD_INT 51
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PPUSH
8943: CALL_OW 69
8947: PUSH
8948: LD_INT 2
8950: GREATEREQUAL
8951: IFFALSE 8963
8953: GO 8955
8955: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
8956: LD_STRING ACH_CARGO
8958: PPUSH
8959: CALL_OW 543
8963: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , un ; begin
8964: LD_INT 0
8966: PPUSH
8967: PPUSH
8968: PPUSH
// for i = 1 to count do
8969: LD_ADDR_VAR 0 8
8973: PUSH
8974: DOUBLE
8975: LD_INT 1
8977: DEC
8978: ST_TO_ADDR
8979: LD_VAR 0 6
8983: PUSH
8984: FOR_TO
8985: IFFALSE 9066
// begin uc_side = side ;
8987: LD_ADDR_OWVAR 20
8991: PUSH
8992: LD_VAR 0 1
8996: ST_TO_ADDR
// uc_nation = nation ;
8997: LD_ADDR_OWVAR 21
9001: PUSH
9002: LD_VAR 0 2
9006: ST_TO_ADDR
// hc_gallery =  ;
9007: LD_ADDR_OWVAR 33
9011: PUSH
9012: LD_STRING 
9014: ST_TO_ADDR
// hc_name =  ;
9015: LD_ADDR_OWVAR 26
9019: PUSH
9020: LD_STRING 
9022: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
9023: LD_INT 0
9025: PPUSH
9026: LD_VAR 0 5
9030: PPUSH
9031: LD_VAR 0 4
9035: PPUSH
9036: CALL_OW 380
// un = CreateHuman ;
9040: LD_ADDR_VAR 0 9
9044: PUSH
9045: CALL_OW 44
9049: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
9050: LD_VAR 0 9
9054: PPUSH
9055: LD_VAR 0 3
9059: PPUSH
9060: CALL_OW 52
// end ;
9064: GO 8984
9066: POP
9067: POP
// end ;
9068: LD_VAR 0 7
9072: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
9073: LD_INT 0
9075: PPUSH
9076: PPUSH
9077: PPUSH
// uc_side := GetSide ( b ) ;
9078: LD_ADDR_OWVAR 20
9082: PUSH
9083: LD_VAR 0 2
9087: PPUSH
9088: CALL_OW 255
9092: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
9093: LD_ADDR_OWVAR 21
9097: PUSH
9098: LD_VAR 0 2
9102: PPUSH
9103: CALL_OW 248
9107: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
9108: LD_INT 0
9110: PPUSH
9111: LD_INT 1
9113: PPUSH
9114: LD_VAR 0 1
9118: PPUSH
9119: CALL_OW 380
// un = CreateHuman ;
9123: LD_ADDR_VAR 0 4
9127: PUSH
9128: CALL_OW 44
9132: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
9133: LD_ADDR_VAR 0 5
9137: PUSH
9138: LD_VAR 0 2
9142: PPUSH
9143: CALL_OW 254
9147: PUSH
9148: LD_INT 3
9150: MINUS
9151: ST_TO_ADDR
// if dir < 0 then
9152: LD_VAR 0 5
9156: PUSH
9157: LD_INT 0
9159: LESS
9160: IFFALSE 9176
// dir := 6 + dir ;
9162: LD_ADDR_VAR 0 5
9166: PUSH
9167: LD_INT 6
9169: PUSH
9170: LD_VAR 0 5
9174: PLUS
9175: ST_TO_ADDR
// SetDir ( un , dir ) ;
9176: LD_VAR 0 4
9180: PPUSH
9181: LD_VAR 0 5
9185: PPUSH
9186: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
9190: LD_VAR 0 4
9194: PPUSH
9195: LD_VAR 0 2
9199: PPUSH
9200: CALL_OW 52
// end ;
9204: LD_VAR 0 3
9208: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkList ; begin
9209: LD_INT 0
9211: PPUSH
9212: PPUSH
9213: PPUSH
9214: PPUSH
// engineerOkList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
9215: LD_ADDR_VAR 0 7
9219: PUSH
9220: LD_INT 22
9222: PUSH
9223: LD_VAR 0 1
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: PUSH
9232: LD_INT 25
9234: PUSH
9235: LD_INT 2
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 24
9244: PUSH
9245: LD_INT 1000
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: LIST
9256: PPUSH
9257: CALL_OW 69
9261: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9262: LD_ADDR_VAR 0 5
9266: PUSH
9267: LD_VAR 0 3
9271: PPUSH
9272: LD_INT 22
9274: PUSH
9275: LD_VAR 0 1
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 21
9286: PUSH
9287: LD_INT 3
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: LD_INT 3
9296: PUSH
9297: LD_INT 24
9299: PUSH
9300: LD_INT 1000
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: PPUSH
9319: CALL_OW 70
9323: ST_TO_ADDR
// if not buildingsList and not engineerOkList then
9324: LD_VAR 0 5
9328: NOT
9329: PUSH
9330: LD_VAR 0 7
9334: NOT
9335: AND
9336: IFFALSE 9340
// exit ;
9338: GO 9536
// if not buildingsList and UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) and IsOk ( building ) then
9340: LD_VAR 0 5
9344: NOT
9345: PUSH
9346: LD_VAR 0 7
9350: PPUSH
9351: LD_INT 3
9353: PUSH
9354: LD_INT 54
9356: PUSH
9357: EMPTY
9358: LIST
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PPUSH
9364: CALL_OW 72
9368: AND
9369: PUSH
9370: LD_VAR 0 2
9374: PPUSH
9375: CALL_OW 302
9379: AND
9380: IFFALSE 9414
// ComEnterUnit ( UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) , building ) ;
9382: LD_VAR 0 7
9386: PPUSH
9387: LD_INT 3
9389: PUSH
9390: LD_INT 54
9392: PUSH
9393: EMPTY
9394: LIST
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PPUSH
9400: CALL_OW 72
9404: PPUSH
9405: LD_VAR 0 2
9409: PPUSH
9410: CALL_OW 120
// if buildingsList then
9414: LD_VAR 0 5
9418: IFFALSE 9536
// begin for i in engineerOkList do
9420: LD_ADDR_VAR 0 6
9424: PUSH
9425: LD_VAR 0 7
9429: PUSH
9430: FOR_IN
9431: IFFALSE 9534
// if IsInUnit ( i ) then
9433: LD_VAR 0 6
9437: PPUSH
9438: CALL_OW 310
9442: IFFALSE 9455
// ComExitBuilding ( i ) else
9444: LD_VAR 0 6
9448: PPUSH
9449: CALL_OW 122
9453: GO 9532
// if GetLives ( i ) > 650 then
9455: LD_VAR 0 6
9459: PPUSH
9460: CALL_OW 256
9464: PUSH
9465: LD_INT 650
9467: GREATER
9468: IFFALSE 9496
// ComRepairBuilding ( i , NearestUnitToUnit ( buildingsList , i ) ) else
9470: LD_VAR 0 6
9474: PPUSH
9475: LD_VAR 0 5
9479: PPUSH
9480: LD_VAR 0 6
9484: PPUSH
9485: CALL_OW 74
9489: PPUSH
9490: CALL_OW 130
9494: GO 9532
// if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9496: LD_VAR 0 6
9500: PPUSH
9501: LD_INT 56
9503: PPUSH
9504: LD_INT 10
9506: PPUSH
9507: CALL_OW 297
9511: PUSH
9512: LD_INT 8
9514: GREATER
9515: IFFALSE 9532
// ComMoveXY ( i , 56 , 10 ) ;
9517: LD_VAR 0 6
9521: PPUSH
9522: LD_INT 56
9524: PPUSH
9525: LD_INT 10
9527: PPUSH
9528: CALL_OW 111
9532: GO 9430
9534: POP
9535: POP
// end ; end ;
9536: LD_VAR 0 4
9540: RET
// export function HealUnitInBase ( side , healArea , baseArea , building ) ; var sciList , i , damageUnits ; begin
9541: LD_INT 0
9543: PPUSH
9544: PPUSH
9545: PPUSH
9546: PPUSH
// sciList := FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9547: LD_ADDR_VAR 0 6
9551: PUSH
9552: LD_INT 22
9554: PUSH
9555: LD_VAR 0 1
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PUSH
9564: LD_INT 25
9566: PUSH
9567: LD_INT 4
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 24
9576: PUSH
9577: LD_INT 250
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: LIST
9588: PPUSH
9589: CALL_OW 69
9593: ST_TO_ADDR
// damageUnits := FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9594: LD_ADDR_VAR 0 8
9598: PUSH
9599: LD_VAR 0 3
9603: PPUSH
9604: LD_INT 22
9606: PUSH
9607: LD_VAR 0 1
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: LD_INT 21
9618: PUSH
9619: LD_INT 1
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PUSH
9626: LD_INT 3
9628: PUSH
9629: LD_INT 24
9631: PUSH
9632: LD_INT 650
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: LIST
9647: PPUSH
9648: CALL_OW 70
9652: ST_TO_ADDR
// if not damageUnits and not sciList then
9653: LD_VAR 0 8
9657: NOT
9658: PUSH
9659: LD_VAR 0 6
9663: NOT
9664: AND
9665: IFFALSE 9669
// exit ;
9667: GO 9808
// if damageUnits then
9669: LD_VAR 0 8
9673: IFFALSE 9752
// begin for i in sciList do
9675: LD_ADDR_VAR 0 7
9679: PUSH
9680: LD_VAR 0 6
9684: PUSH
9685: FOR_IN
9686: IFFALSE 9748
// if IsInUnit ( i ) then
9688: LD_VAR 0 7
9692: PPUSH
9693: CALL_OW 310
9697: IFFALSE 9710
// ComExitBuilding ( i ) else
9699: LD_VAR 0 7
9703: PPUSH
9704: CALL_OW 122
9708: GO 9746
// if not HasTask ( i ) then
9710: LD_VAR 0 7
9714: PPUSH
9715: CALL_OW 314
9719: NOT
9720: IFFALSE 9746
// ComHeal ( i , NearestUnitToUnit ( damageUnits , i ) ) ;
9722: LD_VAR 0 7
9726: PPUSH
9727: LD_VAR 0 8
9731: PPUSH
9732: LD_VAR 0 7
9736: PPUSH
9737: CALL_OW 74
9741: PPUSH
9742: CALL_OW 128
9746: GO 9685
9748: POP
9749: POP
// end else
9750: GO 9808
// if UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) then
9752: LD_VAR 0 6
9756: PPUSH
9757: LD_INT 3
9759: PUSH
9760: LD_INT 54
9762: PUSH
9763: EMPTY
9764: LIST
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: PPUSH
9770: CALL_OW 72
9774: IFFALSE 9808
// ComEnterUnit ( UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) , building ) ;
9776: LD_VAR 0 6
9780: PPUSH
9781: LD_INT 3
9783: PUSH
9784: LD_INT 54
9786: PUSH
9787: EMPTY
9788: LIST
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PPUSH
9794: CALL_OW 72
9798: PPUSH
9799: LD_VAR 0 4
9803: PPUSH
9804: CALL_OW 120
// end ;
9808: LD_VAR 0 5
9812: RET
// export function DefendBases ( area , enemySide , defendersList , building ) ; var i , enemy , nearestUnit ; begin
9813: LD_INT 0
9815: PPUSH
9816: PPUSH
9817: PPUSH
9818: PPUSH
// if not defendersList then
9819: LD_VAR 0 3
9823: NOT
9824: IFFALSE 9828
// exit ;
9826: GO 10210
// enemy := FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9828: LD_ADDR_VAR 0 7
9832: PUSH
9833: LD_VAR 0 1
9837: PPUSH
9838: LD_INT 22
9840: PUSH
9841: LD_VAR 0 2
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 2
9852: PUSH
9853: LD_INT 21
9855: PUSH
9856: LD_INT 2
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PUSH
9863: LD_INT 21
9865: PUSH
9866: LD_INT 1
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: LIST
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PPUSH
9882: CALL_OW 70
9886: ST_TO_ADDR
// if enemy then
9887: LD_VAR 0 7
9891: IFFALSE 10112
// begin for i in defendersList do
9893: LD_ADDR_VAR 0 6
9897: PUSH
9898: LD_VAR 0 3
9902: PUSH
9903: FOR_IN
9904: IFFALSE 10108
// begin if IsInUnit ( i ) and GetLives ( i ) > 500 then
9906: LD_VAR 0 6
9910: PPUSH
9911: CALL_OW 310
9915: PUSH
9916: LD_VAR 0 6
9920: PPUSH
9921: CALL_OW 256
9925: PUSH
9926: LD_INT 500
9928: GREATER
9929: AND
9930: IFFALSE 9943
// ComExitBuilding ( i ) else
9932: LD_VAR 0 6
9936: PPUSH
9937: CALL_OW 122
9941: GO 10106
// if GetLives ( i ) > 650 then
9943: LD_VAR 0 6
9947: PPUSH
9948: CALL_OW 256
9952: PUSH
9953: LD_INT 650
9955: GREATER
9956: IFFALSE 10009
// begin nearestUnit := NearestUnitToUnit ( enemy , i ) ;
9958: LD_ADDR_VAR 0 8
9962: PUSH
9963: LD_VAR 0 7
9967: PPUSH
9968: LD_VAR 0 6
9972: PPUSH
9973: CALL_OW 74
9977: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearestUnit ) , GetY ( nearestUnit ) ) ;
9978: LD_VAR 0 6
9982: PPUSH
9983: LD_VAR 0 8
9987: PPUSH
9988: CALL_OW 250
9992: PPUSH
9993: LD_VAR 0 8
9997: PPUSH
9998: CALL_OW 251
10002: PPUSH
10003: CALL_OW 114
// end else
10007: GO 10106
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
10009: LD_INT 22
10011: PUSH
10012: LD_INT 3
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: LD_INT 25
10021: PUSH
10022: LD_INT 4
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PPUSH
10033: CALL_OW 69
10037: IFFALSE 10077
// begin if GetDistUnitXY ( i , 56 , 10 ) > 8 then
10039: LD_VAR 0 6
10043: PPUSH
10044: LD_INT 56
10046: PPUSH
10047: LD_INT 10
10049: PPUSH
10050: CALL_OW 297
10054: PUSH
10055: LD_INT 8
10057: GREATER
10058: IFFALSE 10075
// ComMoveXY ( i , 56 , 10 ) ;
10060: LD_VAR 0 6
10064: PPUSH
10065: LD_INT 56
10067: PPUSH
10068: LD_INT 10
10070: PPUSH
10071: CALL_OW 111
// end else
10075: GO 10106
// if GetLives ( i ) <= 500 then
10077: LD_VAR 0 6
10081: PPUSH
10082: CALL_OW 256
10086: PUSH
10087: LD_INT 500
10089: LESSEQUAL
10090: IFFALSE 10106
// ComEnterUnit ( i , building ) ;
10092: LD_VAR 0 6
10096: PPUSH
10097: LD_VAR 0 4
10101: PPUSH
10102: CALL_OW 120
// end ;
10106: GO 9903
10108: POP
10109: POP
// end else
10110: GO 10210
// if UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) then
10112: LD_VAR 0 3
10116: PPUSH
10117: LD_INT 56
10119: PUSH
10120: EMPTY
10121: LIST
10122: PUSH
10123: LD_INT 3
10125: PUSH
10126: LD_INT 60
10128: PUSH
10129: EMPTY
10130: LIST
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PUSH
10136: LD_INT 24
10138: PUSH
10139: LD_INT 1000
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: LIST
10150: PPUSH
10151: CALL_OW 72
10155: IFFALSE 10210
// ComEnterUnit ( UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) , building ) ;
10157: LD_VAR 0 3
10161: PPUSH
10162: LD_INT 56
10164: PUSH
10165: EMPTY
10166: LIST
10167: PUSH
10168: LD_INT 3
10170: PUSH
10171: LD_INT 60
10173: PUSH
10174: EMPTY
10175: LIST
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 24
10183: PUSH
10184: LD_INT 1000
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: LIST
10195: PPUSH
10196: CALL_OW 72
10200: PPUSH
10201: LD_VAR 0 4
10205: PPUSH
10206: CALL_OW 120
// end ;
10210: LD_VAR 0 5
10214: RET
// export function RussianTrap ; var i ; begin
10215: LD_INT 0
10217: PPUSH
10218: PPUSH
// if GetSide ( Brian ) = 4 then
10219: LD_EXP 6
10223: PPUSH
10224: CALL_OW 255
10228: PUSH
10229: LD_INT 4
10231: EQUAL
10232: IFFALSE 10255
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10234: LD_EXP 6
10238: PUSH
10239: LD_EXP 7
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: PPUSH
10248: LD_INT 0
10250: PPUSH
10251: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10255: LD_ADDR_VAR 0 2
10259: PUSH
10260: LD_INT 22
10262: PUSH
10263: LD_INT 3
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 21
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PPUSH
10284: CALL_OW 69
10288: PUSH
10289: FOR_IN
10290: IFFALSE 10400
// begin ComExitBuilding ( i ) ;
10292: LD_VAR 0 2
10296: PPUSH
10297: CALL_OW 122
// wait ( 0 0$1 ) ;
10301: LD_INT 35
10303: PPUSH
10304: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10308: LD_VAR 0 2
10312: PPUSH
10313: LD_INT 120
10315: PPUSH
10316: LD_INT 56
10318: PPUSH
10319: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10323: LD_VAR 0 2
10327: PPUSH
10328: LD_INT 111
10330: PPUSH
10331: LD_INT 37
10333: PPUSH
10334: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10338: LD_INT 33
10340: PPUSH
10341: CALL_OW 255
10345: PUSH
10346: LD_INT 3
10348: EQUAL
10349: PUSH
10350: LD_INT 33
10352: PPUSH
10353: CALL_OW 302
10357: AND
10358: IFFALSE 10374
// AddComEnterUnit ( i , arm2 ) else
10360: LD_VAR 0 2
10364: PPUSH
10365: LD_INT 33
10367: PPUSH
10368: CALL_OW 180
10372: GO 10398
// begin AddComCrawl ( i ) ;
10374: LD_VAR 0 2
10378: PPUSH
10379: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10383: LD_VAR 0 2
10387: PPUSH
10388: LD_INT 109
10390: PPUSH
10391: LD_INT 30
10393: PPUSH
10394: CALL_OW 174
// end ; end ;
10398: GO 10289
10400: POP
10401: POP
// end ;
10402: LD_VAR 0 1
10406: RET
// export function Nearest ( un , units ) ; var nearestDist , nearestUn , sold , dist ; begin
10407: LD_INT 0
10409: PPUSH
10410: PPUSH
10411: PPUSH
10412: PPUSH
10413: PPUSH
// nearestDist := 1000 ;
10414: LD_ADDR_VAR 0 4
10418: PUSH
10419: LD_INT 1000
10421: ST_TO_ADDR
// nearestUn := un ;
10422: LD_ADDR_VAR 0 5
10426: PUSH
10427: LD_VAR 0 1
10431: ST_TO_ADDR
// for sold in units do
10432: LD_ADDR_VAR 0 6
10436: PUSH
10437: LD_VAR 0 2
10441: PUSH
10442: FOR_IN
10443: IFFALSE 10499
// begin dist := GetDistUnits ( un , sold ) ;
10445: LD_ADDR_VAR 0 7
10449: PUSH
10450: LD_VAR 0 1
10454: PPUSH
10455: LD_VAR 0 6
10459: PPUSH
10460: CALL_OW 296
10464: ST_TO_ADDR
// if dist < nearestDist then
10465: LD_VAR 0 7
10469: PUSH
10470: LD_VAR 0 4
10474: LESS
10475: IFFALSE 10497
// begin nearestUn := sold ;
10477: LD_ADDR_VAR 0 5
10481: PUSH
10482: LD_VAR 0 6
10486: ST_TO_ADDR
// nearestDist := dist ;
10487: LD_ADDR_VAR 0 4
10491: PUSH
10492: LD_VAR 0 7
10496: ST_TO_ADDR
// end ; end ;
10497: GO 10442
10499: POP
10500: POP
// result := NearestUn ;
10501: LD_ADDR_VAR 0 3
10505: PUSH
10506: LD_VAR 0 5
10510: ST_TO_ADDR
// end ;
10511: LD_VAR 0 3
10515: RET
// export function PrepareDifficulty ; begin
10516: LD_INT 0
10518: PPUSH
// if Difficulty = 1 then
10519: LD_OWVAR 67
10523: PUSH
10524: LD_INT 1
10526: EQUAL
10527: IFFALSE 10590
// begin RemoveUnit ( brw2 ) ;
10529: LD_INT 9
10531: PPUSH
10532: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10536: LD_INT 30
10538: PPUSH
10539: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10543: LD_INT 52
10545: PPUSH
10546: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10550: LD_INT 63
10552: PPUSH
10553: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10557: LD_INT 5
10559: PUSH
10560: LD_INT 4
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PPUSH
10567: LD_INT 60
10569: PPUSH
10570: CALL_OW 240
// RuSoldMinLevel = 0 ;
10574: LD_ADDR_EXP 13
10578: PUSH
10579: LD_INT 0
10581: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10582: LD_ADDR_EXP 14
10586: PUSH
10587: LD_INT 1
10589: ST_TO_ADDR
// end ; if Difficulty = 2 then
10590: LD_OWVAR 67
10594: PUSH
10595: LD_INT 2
10597: EQUAL
10598: IFFALSE 10640
// begin RemoveUnit ( brw4 ) ;
10600: LD_INT 52
10602: PPUSH
10603: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10607: LD_INT 5
10609: PUSH
10610: LD_INT 4
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PPUSH
10617: LD_INT 50
10619: PPUSH
10620: CALL_OW 240
// RuSoldMinLevel = 1 ;
10624: LD_ADDR_EXP 13
10628: PUSH
10629: LD_INT 1
10631: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10632: LD_ADDR_EXP 14
10636: PUSH
10637: LD_INT 2
10639: ST_TO_ADDR
// end ; if Difficulty >= 3 then
10640: LD_OWVAR 67
10644: PUSH
10645: LD_INT 3
10647: GREATEREQUAL
10648: IFFALSE 10683
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10650: LD_INT 5
10652: PUSH
10653: LD_INT 4
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PPUSH
10660: LD_INT 40
10662: PPUSH
10663: CALL_OW 240
// RuSoldMinLevel = 2 ;
10667: LD_ADDR_EXP 13
10671: PUSH
10672: LD_INT 2
10674: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10675: LD_ADDR_EXP 14
10679: PUSH
10680: LD_INT 3
10682: ST_TO_ADDR
// end ; end ;
10683: LD_VAR 0 1
10687: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10688: LD_INT 0
10690: PPUSH
10691: PPUSH
10692: PPUSH
// if not vehicles then
10693: LD_VAR 0 1
10697: NOT
10698: IFFALSE 10702
// exit ;
10700: GO 10832
// tmp := [ ] ;
10702: LD_ADDR_VAR 0 5
10706: PUSH
10707: EMPTY
10708: ST_TO_ADDR
// for i in vehicles do
10709: LD_ADDR_VAR 0 4
10713: PUSH
10714: LD_VAR 0 1
10718: PUSH
10719: FOR_IN
10720: IFFALSE 10816
// tmp := Replace ( tmp , tmp + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10722: LD_ADDR_VAR 0 5
10726: PUSH
10727: LD_VAR 0 5
10731: PPUSH
10732: LD_VAR 0 5
10736: PUSH
10737: LD_INT 1
10739: PLUS
10740: PPUSH
10741: LD_VAR 0 4
10745: PPUSH
10746: CALL_OW 265
10750: PUSH
10751: LD_VAR 0 4
10755: PPUSH
10756: CALL_OW 262
10760: PUSH
10761: LD_VAR 0 4
10765: PPUSH
10766: CALL_OW 263
10770: PUSH
10771: LD_VAR 0 4
10775: PPUSH
10776: CALL_OW 264
10780: PUSH
10781: LD_VAR 0 4
10785: PPUSH
10786: CALL_OW 261
10790: PUSH
10791: LD_VAR 0 4
10795: PPUSH
10796: CALL_OW 256
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: PPUSH
10809: CALL_OW 1
10813: ST_TO_ADDR
10814: GO 10719
10816: POP
10817: POP
// SaveVariable ( tmp , ident ) ;
10818: LD_VAR 0 5
10822: PPUSH
10823: LD_VAR 0 2
10827: PPUSH
10828: CALL_OW 39
// end ; end_of_file
10832: LD_VAR 0 3
10836: RET
// export function PrepareHeroes ; var plive , prefix ; begin
10837: LD_INT 0
10839: PPUSH
10840: PPUSH
10841: PPUSH
// prefix := 01_ ;
10842: LD_ADDR_VAR 0 3
10846: PUSH
10847: LD_STRING 01_
10849: ST_TO_ADDR
// uc_side := 1 ;
10850: LD_ADDR_OWVAR 20
10854: PUSH
10855: LD_INT 1
10857: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debug ) , prefix ) ;
10858: LD_ADDR_EXP 1
10862: PUSH
10863: LD_STRING JMM
10865: PPUSH
10866: LD_EXP 34
10870: NOT
10871: PPUSH
10872: LD_VAR 0 3
10876: PPUSH
10877: CALL 36775 0 3
10881: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10882: LD_ADDR_VAR 0 2
10886: PUSH
10887: LD_STRING 01_JMMLifePoints_1
10889: PPUSH
10890: LD_INT 1000
10892: PPUSH
10893: CALL_OW 30
10897: ST_TO_ADDR
// if plive < 250 then
10898: LD_VAR 0 2
10902: PUSH
10903: LD_INT 250
10905: LESS
10906: IFFALSE 10916
// plive := 300 ;
10908: LD_ADDR_VAR 0 2
10912: PUSH
10913: LD_INT 300
10915: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10916: LD_EXP 1
10920: PPUSH
10921: LD_VAR 0 2
10925: PPUSH
10926: CALL_OW 234
// Powell := NewCharacter ( Powell ) ;
10930: LD_ADDR_EXP 9
10934: PUSH
10935: LD_STRING Powell
10937: PPUSH
10938: CALL_OW 25
10942: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , prefix ) ;
10943: LD_ADDR_EXP 2
10947: PUSH
10948: LD_STRING Bobby
10950: PPUSH
10951: LD_EXP 34
10955: NOT
10956: PPUSH
10957: LD_VAR 0 3
10961: PPUSH
10962: CALL 36775 0 3
10966: ST_TO_ADDR
// if Bobby then
10967: LD_EXP 2
10971: IFFALSE 11021
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10973: LD_ADDR_VAR 0 2
10977: PUSH
10978: LD_STRING 01_BobbyLifePoints_1
10980: PPUSH
10981: LD_INT 1000
10983: PPUSH
10984: CALL_OW 30
10988: ST_TO_ADDR
// if plive < 250 then
10989: LD_VAR 0 2
10993: PUSH
10994: LD_INT 250
10996: LESS
10997: IFFALSE 11007
// plive := 300 ;
10999: LD_ADDR_VAR 0 2
11003: PUSH
11004: LD_INT 300
11006: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
11007: LD_EXP 2
11011: PPUSH
11012: LD_VAR 0 2
11016: PPUSH
11017: CALL_OW 234
// end ; Cyrus := PrepareUnit ( Cyrus , ( not debug ) , prefix ) ;
11021: LD_ADDR_EXP 3
11025: PUSH
11026: LD_STRING Cyrus
11028: PPUSH
11029: LD_EXP 34
11033: NOT
11034: PPUSH
11035: LD_VAR 0 3
11039: PPUSH
11040: CALL 36775 0 3
11044: ST_TO_ADDR
// if Cyrus then
11045: LD_EXP 3
11049: IFFALSE 11099
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
11051: LD_ADDR_VAR 0 2
11055: PUSH
11056: LD_STRING 01_CyrusLifePoints_1
11058: PPUSH
11059: LD_INT 1000
11061: PPUSH
11062: CALL_OW 30
11066: ST_TO_ADDR
// if plive < 250 then
11067: LD_VAR 0 2
11071: PUSH
11072: LD_INT 250
11074: LESS
11075: IFFALSE 11085
// plive := 300 ;
11077: LD_ADDR_VAR 0 2
11081: PUSH
11082: LD_INT 300
11084: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
11085: LD_EXP 3
11089: PPUSH
11090: LD_VAR 0 2
11094: PPUSH
11095: CALL_OW 234
// end ; Khatam := NewCharacter ( Khatam ) ;
11099: LD_ADDR_EXP 5
11103: PUSH
11104: LD_STRING Khatam
11106: PPUSH
11107: CALL_OW 25
11111: ST_TO_ADDR
// uc_side := 4 ;
11112: LD_ADDR_OWVAR 20
11116: PUSH
11117: LD_INT 4
11119: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
11120: LD_ADDR_EXP 4
11124: PUSH
11125: LD_STRING Lisa
11127: PPUSH
11128: CALL_OW 25
11132: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
11133: LD_EXP 1
11137: PPUSH
11138: LD_INT 3
11140: PPUSH
11141: LD_INT 0
11143: PPUSH
11144: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
11148: LD_EXP 2
11152: PPUSH
11153: LD_INT 3
11155: PPUSH
11156: LD_INT 0
11158: PPUSH
11159: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
11163: LD_EXP 3
11167: PPUSH
11168: LD_INT 3
11170: PPUSH
11171: LD_INT 0
11173: PPUSH
11174: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
11178: LD_EXP 4
11182: PPUSH
11183: LD_INT 5
11185: PPUSH
11186: LD_INT 0
11188: PPUSH
11189: CALL_OW 49
// ComCrawl ( Lisa ) ;
11193: LD_EXP 4
11197: PPUSH
11198: CALL_OW 137
// end ;
11202: LD_VAR 0 1
11206: RET
// export function PrepareLisSquad ; var i , un ; begin
11207: LD_INT 0
11209: PPUSH
11210: PPUSH
11211: PPUSH
// uc_side := 4 ;
11212: LD_ADDR_OWVAR 20
11216: PUSH
11217: LD_INT 4
11219: ST_TO_ADDR
// uc_nation := 1 ;
11220: LD_ADDR_OWVAR 21
11224: PUSH
11225: LD_INT 1
11227: ST_TO_ADDR
// hc_class := 2 ;
11228: LD_ADDR_OWVAR 28
11232: PUSH
11233: LD_INT 2
11235: ST_TO_ADDR
// hc_sex := sex_male ;
11236: LD_ADDR_OWVAR 27
11240: PUSH
11241: LD_INT 1
11243: ST_TO_ADDR
// hc_gallery :=  ;
11244: LD_ADDR_OWVAR 33
11248: PUSH
11249: LD_STRING 
11251: ST_TO_ADDR
// hc_name :=  ;
11252: LD_ADDR_OWVAR 26
11256: PUSH
11257: LD_STRING 
11259: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11260: LD_ADDR_OWVAR 30
11264: PUSH
11265: LD_INT 0
11267: PUSH
11268: LD_INT 1
11270: PUSH
11271: LD_INT 0
11273: PUSH
11274: LD_INT 0
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11283: LD_ADDR_OWVAR 31
11287: PUSH
11288: LD_INT 1
11290: PUSH
11291: LD_INT 2
11293: PUSH
11294: LD_INT 0
11296: PUSH
11297: LD_INT 0
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: ST_TO_ADDR
// un := CreateHuman ;
11306: LD_ADDR_VAR 0 3
11310: PUSH
11311: CALL_OW 44
11315: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11316: LD_VAR 0 3
11320: PPUSH
11321: LD_INT 6
11323: PPUSH
11324: LD_INT 0
11326: PPUSH
11327: CALL_OW 49
// hc_sex := sex_female ;
11331: LD_ADDR_OWVAR 27
11335: PUSH
11336: LD_INT 2
11338: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11339: LD_ADDR_OWVAR 30
11343: PUSH
11344: LD_INT 0
11346: PUSH
11347: LD_INT 0
11349: PUSH
11350: LD_INT 0
11352: PUSH
11353: LD_INT 1
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11362: LD_ADDR_OWVAR 31
11366: PUSH
11367: LD_INT 0
11369: PUSH
11370: LD_INT 1
11372: PUSH
11373: LD_INT 0
11375: PUSH
11376: LD_INT 1
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: ST_TO_ADDR
// un := CreateHuman ;
11385: LD_ADDR_VAR 0 3
11389: PUSH
11390: CALL_OW 44
11394: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11395: LD_VAR 0 3
11399: PPUSH
11400: LD_INT 6
11402: PPUSH
11403: LD_INT 0
11405: PPUSH
11406: CALL_OW 49
// if not Bobby and not Cyrus then
11410: LD_EXP 2
11414: NOT
11415: PUSH
11416: LD_EXP 3
11420: NOT
11421: AND
11422: IFFALSE 11511
// begin hc_class := 1 ;
11424: LD_ADDR_OWVAR 28
11428: PUSH
11429: LD_INT 1
11431: ST_TO_ADDR
// hc_sex := sex_male ;
11432: LD_ADDR_OWVAR 27
11436: PUSH
11437: LD_INT 1
11439: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11440: LD_ADDR_OWVAR 30
11444: PUSH
11445: LD_INT 2
11447: PUSH
11448: LD_INT 3
11450: PUSH
11451: LD_INT 1
11453: PUSH
11454: LD_INT 0
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11463: LD_ADDR_OWVAR 31
11467: PUSH
11468: LD_INT 2
11470: PUSH
11471: LD_INT 3
11473: PUSH
11474: LD_INT 1
11476: PUSH
11477: LD_INT 0
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: ST_TO_ADDR
// un := CreateHuman ;
11486: LD_ADDR_VAR 0 3
11490: PUSH
11491: CALL_OW 44
11495: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11496: LD_VAR 0 3
11500: PPUSH
11501: LD_INT 31
11503: PPUSH
11504: LD_INT 0
11506: PPUSH
11507: CALL_OW 49
// end ; InitHc ;
11511: CALL_OW 19
// end ;
11515: LD_VAR 0 1
11519: RET
// export function PrepareOtherAmericans ; begin
11520: LD_INT 0
11522: PPUSH
// uc_side := 4 ;
11523: LD_ADDR_OWVAR 20
11527: PUSH
11528: LD_INT 4
11530: ST_TO_ADDR
// uc_nation := 1 ;
11531: LD_ADDR_OWVAR 21
11535: PUSH
11536: LD_INT 1
11538: ST_TO_ADDR
// hc_gallery :=  ;
11539: LD_ADDR_OWVAR 33
11543: PUSH
11544: LD_STRING 
11546: ST_TO_ADDR
// hc_name := Tom Garvin ;
11547: LD_ADDR_OWVAR 26
11551: PUSH
11552: LD_STRING Tom Garvin
11554: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 2 ) ;
11555: LD_INT 1
11557: PPUSH
11558: LD_INT 1
11560: PPUSH
11561: LD_INT 2
11563: PPUSH
11564: CALL_OW 380
// Brian := CreateHuman ;
11568: LD_ADDR_EXP 6
11572: PUSH
11573: CALL_OW 44
11577: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11578: LD_EXP 6
11582: PPUSH
11583: LD_INT 10
11585: PPUSH
11586: LD_INT 0
11588: PPUSH
11589: CALL_OW 49
// hc_name := Jerry White ;
11593: LD_ADDR_OWVAR 26
11597: PUSH
11598: LD_STRING Jerry White
11600: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , 2 ) ;
11601: LD_INT 1
11603: PPUSH
11604: LD_INT 3
11606: PPUSH
11607: LD_INT 2
11609: PPUSH
11610: CALL_OW 380
// Jerry := CreateHuman ;
11614: LD_ADDR_EXP 7
11618: PUSH
11619: CALL_OW 44
11623: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11624: LD_EXP 7
11628: PPUSH
11629: LD_INT 10
11631: PPUSH
11632: LD_INT 0
11634: PPUSH
11635: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11639: LD_EXP 6
11643: PUSH
11644: LD_EXP 7
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PPUSH
11653: CALL_OW 140
// end ;
11657: LD_VAR 0 1
11661: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un , hexes ; begin
11662: LD_INT 0
11664: PPUSH
11665: PPUSH
11666: PPUSH
11667: PPUSH
// hexes := AreaToList ( DeadsSpawn , 0 ) ;
11668: LD_ADDR_VAR 0 4
11672: PUSH
11673: LD_INT 16
11675: PPUSH
11676: LD_INT 0
11678: PPUSH
11679: CALL_OW 517
11683: ST_TO_ADDR
// for i = 1 to 6 do
11684: LD_ADDR_VAR 0 2
11688: PUSH
11689: DOUBLE
11690: LD_INT 1
11692: DEC
11693: ST_TO_ADDR
11694: LD_INT 6
11696: PUSH
11697: FOR_TO
11698: IFFALSE 11844
// begin uc_side := 4 ;
11700: LD_ADDR_OWVAR 20
11704: PUSH
11705: LD_INT 4
11707: ST_TO_ADDR
// uc_nation := 1 ;
11708: LD_ADDR_OWVAR 21
11712: PUSH
11713: LD_INT 1
11715: ST_TO_ADDR
// hc_gallery :=  ;
11716: LD_ADDR_OWVAR 33
11720: PUSH
11721: LD_STRING 
11723: ST_TO_ADDR
// hc_name :=  ;
11724: LD_ADDR_OWVAR 26
11728: PUSH
11729: LD_STRING 
11731: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 1 ) ;
11732: LD_INT 0
11734: PPUSH
11735: LD_INT 1
11737: PUSH
11738: LD_INT 1
11740: PUSH
11741: LD_INT 4
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: LIST
11748: PUSH
11749: LD_VAR 0 2
11753: PUSH
11754: LD_INT 3
11756: MOD
11757: PUSH
11758: LD_INT 1
11760: PLUS
11761: ARRAY
11762: PPUSH
11763: LD_INT 1
11765: PPUSH
11766: CALL_OW 380
// un := CreateHuman ;
11770: LD_ADDR_VAR 0 3
11774: PUSH
11775: CALL_OW 44
11779: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11780: LD_VAR 0 3
11784: PPUSH
11785: LD_INT 0
11787: PPUSH
11788: LD_INT 5
11790: PPUSH
11791: CALL_OW 12
11795: PPUSH
11796: CALL_OW 233
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
11800: LD_VAR 0 3
11804: PPUSH
11805: LD_VAR 0 4
11809: PUSH
11810: LD_INT 1
11812: ARRAY
11813: PUSH
11814: LD_VAR 0 2
11818: ARRAY
11819: PPUSH
11820: LD_VAR 0 4
11824: PUSH
11825: LD_INT 2
11827: ARRAY
11828: PUSH
11829: LD_VAR 0 2
11833: ARRAY
11834: PPUSH
11835: LD_INT 1
11837: PPUSH
11838: CALL_OW 601
// end ;
11842: GO 11697
11844: POP
11845: POP
// DyingSold := CreateHuman ;
11846: LD_ADDR_EXP 35
11850: PUSH
11851: CALL_OW 44
11855: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11856: LD_EXP 35
11860: PPUSH
11861: LD_INT 16
11863: PPUSH
11864: LD_INT 0
11866: PPUSH
11867: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11871: LD_EXP 35
11875: PPUSH
11876: LD_INT 250
11878: PPUSH
11879: CALL_OW 234
// end ; end_of_file
11883: LD_VAR 0 1
11887: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11888: LD_INT 0
11890: PPUSH
11891: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11892: LD_ADDR_VAR 0 2
11896: PUSH
11897: LD_INT 22
11899: PUSH
11900: LD_INT 1
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 23
11909: PUSH
11910: LD_INT 1
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 25
11919: PUSH
11920: LD_INT 2
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: LD_INT 50
11929: PUSH
11930: EMPTY
11931: LIST
11932: PUSH
11933: LD_INT 56
11935: PUSH
11936: EMPTY
11937: LIST
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: PPUSH
11946: CALL_OW 69
11950: PUSH
11951: LD_EXP 1
11955: PUSH
11956: EMPTY
11957: LIST
11958: DIFF
11959: ST_TO_ADDR
// if not tmp then
11960: LD_VAR 0 2
11964: NOT
11965: IFFALSE 11969
// exit ;
11967: GO 12045
// uc_side = 6 ;
11969: LD_ADDR_OWVAR 20
11973: PUSH
11974: LD_INT 6
11976: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11977: LD_ADDR_EXP 8
11981: PUSH
11982: LD_STRING Mikhail
11984: PPUSH
11985: CALL_OW 25
11989: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11990: LD_EXP 8
11994: PPUSH
11995: LD_INT 3
11997: PPUSH
11998: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
12002: LD_EXP 8
12006: PPUSH
12007: LD_VAR 0 2
12011: PUSH
12012: LD_INT 1
12014: ARRAY
12015: PPUSH
12016: CALL_OW 250
12020: PPUSH
12021: LD_VAR 0 2
12025: PUSH
12026: LD_INT 1
12028: ARRAY
12029: PPUSH
12030: CALL_OW 251
12034: PPUSH
12035: LD_INT 5
12037: PPUSH
12038: LD_INT 1
12040: PPUSH
12041: CALL_OW 50
// end ;
12045: LD_VAR 0 1
12049: RET
// export function PrepareRussianCommander ; begin
12050: LD_INT 0
12052: PPUSH
// uc_side = 3 ;
12053: LD_ADDR_OWVAR 20
12057: PUSH
12058: LD_INT 3
12060: ST_TO_ADDR
// uc_nation = 3 ;
12061: LD_ADDR_OWVAR 21
12065: PUSH
12066: LD_INT 3
12068: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
12069: LD_ADDR_EXP 19
12073: PUSH
12074: LD_STRING Natasza
12076: PPUSH
12077: CALL_OW 25
12081: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
12082: LD_EXP 19
12086: PPUSH
12087: LD_INT 24
12089: PPUSH
12090: LD_INT 0
12092: PPUSH
12093: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
12097: LD_EXP 19
12101: PPUSH
12102: LD_INT 56
12104: PPUSH
12105: LD_INT 16
12107: PPUSH
12108: CALL_OW 118
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , Natasza ) ;
12112: LD_ADDR_EXP 24
12116: PUSH
12117: LD_EXP 24
12121: PPUSH
12122: LD_EXP 24
12126: PUSH
12127: LD_INT 1
12129: PLUS
12130: PPUSH
12131: LD_EXP 19
12135: PPUSH
12136: CALL_OW 1
12140: ST_TO_ADDR
// end ;
12141: LD_VAR 0 1
12145: RET
// export function PrepareSouthBase ; var i , un ; begin
12146: LD_INT 0
12148: PPUSH
12149: PPUSH
12150: PPUSH
// for i = 1 to 2 do
12151: LD_ADDR_VAR 0 2
12155: PUSH
12156: DOUBLE
12157: LD_INT 1
12159: DEC
12160: ST_TO_ADDR
12161: LD_INT 2
12163: PUSH
12164: FOR_TO
12165: IFFALSE 12274
// begin uc_side = 3 ;
12167: LD_ADDR_OWVAR 20
12171: PUSH
12172: LD_INT 3
12174: ST_TO_ADDR
// uc_nation = 3 ;
12175: LD_ADDR_OWVAR 21
12179: PUSH
12180: LD_INT 3
12182: ST_TO_ADDR
// hc_gallery =  ;
12183: LD_ADDR_OWVAR 33
12187: PUSH
12188: LD_STRING 
12190: ST_TO_ADDR
// hc_name =  ;
12191: LD_ADDR_OWVAR 26
12195: PUSH
12196: LD_STRING 
12198: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12199: LD_INT 1
12201: PPUSH
12202: LD_INT 1
12204: PPUSH
12205: LD_EXP 13
12209: PPUSH
12210: LD_EXP 14
12214: PPUSH
12215: CALL_OW 12
12219: PPUSH
12220: CALL_OW 380
// hc_importance = 0 ;
12224: LD_ADDR_OWVAR 32
12228: PUSH
12229: LD_INT 0
12231: ST_TO_ADDR
// un = CreateHuman ;
12232: LD_ADDR_VAR 0 3
12236: PUSH
12237: CALL_OW 44
12241: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12242: LD_VAR 0 3
12246: PPUSH
12247: LD_INT 11
12249: PPUSH
12250: LD_INT 0
12252: PPUSH
12253: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12257: LD_VAR 0 3
12261: PPUSH
12262: LD_INT 111
12264: PPUSH
12265: LD_INT 38
12267: PPUSH
12268: CALL_OW 118
// end ;
12272: GO 12164
12274: POP
12275: POP
// for i = 1 to 2 do
12276: LD_ADDR_VAR 0 2
12280: PUSH
12281: DOUBLE
12282: LD_INT 1
12284: DEC
12285: ST_TO_ADDR
12286: LD_INT 2
12288: PUSH
12289: FOR_TO
12290: IFFALSE 12373
// begin uc_side = 3 ;
12292: LD_ADDR_OWVAR 20
12296: PUSH
12297: LD_INT 3
12299: ST_TO_ADDR
// uc_nation = 3 ;
12300: LD_ADDR_OWVAR 21
12304: PUSH
12305: LD_INT 3
12307: ST_TO_ADDR
// hc_gallery =  ;
12308: LD_ADDR_OWVAR 33
12312: PUSH
12313: LD_STRING 
12315: ST_TO_ADDR
// hc_name =  ;
12316: LD_ADDR_OWVAR 26
12320: PUSH
12321: LD_STRING 
12323: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12324: LD_INT 0
12326: PPUSH
12327: LD_INT 3
12329: PPUSH
12330: LD_EXP 13
12334: PPUSH
12335: LD_EXP 14
12339: PPUSH
12340: CALL_OW 12
12344: PPUSH
12345: CALL_OW 380
// un = CreateHuman ;
12349: LD_ADDR_VAR 0 3
12353: PUSH
12354: CALL_OW 44
12358: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12359: LD_VAR 0 3
12363: PPUSH
12364: LD_INT 10
12366: PPUSH
12367: CALL_OW 52
// end ;
12371: GO 12289
12373: POP
12374: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12375: LD_INT 3
12377: PPUSH
12378: LD_INT 3
12380: PPUSH
12381: LD_INT 33
12383: PPUSH
12384: LD_EXP 13
12388: PPUSH
12389: LD_EXP 14
12393: PPUSH
12394: CALL_OW 12
12398: PPUSH
12399: LD_INT 1
12401: PPUSH
12402: LD_INT 1
12404: PUSH
12405: LD_INT 2
12407: PUSH
12408: LD_INT 2
12410: PUSH
12411: LD_INT 3
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: PUSH
12420: LD_OWVAR 67
12424: ARRAY
12425: PPUSH
12426: CALL 8964 0 6
// for i in UnitsInside ( arm2 ) do
12430: LD_ADDR_VAR 0 2
12434: PUSH
12435: LD_INT 33
12437: PPUSH
12438: CALL_OW 313
12442: PUSH
12443: FOR_IN
12444: IFFALSE 12477
// southBaseDefenders = Replace ( southBaseDefenders , southBaseDefenders + 1 , i ) ;
12446: LD_ADDR_EXP 25
12450: PUSH
12451: LD_EXP 25
12455: PPUSH
12456: LD_EXP 25
12460: PUSH
12461: LD_INT 1
12463: PLUS
12464: PPUSH
12465: LD_VAR 0 2
12469: PPUSH
12470: CALL_OW 1
12474: ST_TO_ADDR
12475: GO 12443
12477: POP
12478: POP
// end ;
12479: LD_VAR 0 1
12483: RET
// export function PrepareNorthBase ; var i , un ; begin
12484: LD_INT 0
12486: PPUSH
12487: PPUSH
12488: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) , 4 ] [ Difficulty ] do
12489: LD_ADDR_VAR 0 2
12493: PUSH
12494: DOUBLE
12495: LD_INT 1
12497: DEC
12498: ST_TO_ADDR
12499: LD_INT 1
12501: PPUSH
12502: LD_INT 2
12504: PPUSH
12505: CALL_OW 12
12509: PUSH
12510: LD_INT 2
12512: PPUSH
12513: LD_INT 3
12515: PPUSH
12516: CALL_OW 12
12520: PUSH
12521: LD_INT 3
12523: PPUSH
12524: LD_INT 4
12526: PPUSH
12527: CALL_OW 12
12531: PUSH
12532: LD_INT 4
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: PUSH
12541: LD_OWVAR 67
12545: ARRAY
12546: PUSH
12547: FOR_TO
12548: IFFALSE 12634
// begin uc_side = 3 ;
12550: LD_ADDR_OWVAR 20
12554: PUSH
12555: LD_INT 3
12557: ST_TO_ADDR
// uc_nation = 3 ;
12558: LD_ADDR_OWVAR 21
12562: PUSH
12563: LD_INT 3
12565: ST_TO_ADDR
// hc_gallery =  ;
12566: LD_ADDR_OWVAR 33
12570: PUSH
12571: LD_STRING 
12573: ST_TO_ADDR
// hc_name =  ;
12574: LD_ADDR_OWVAR 26
12578: PUSH
12579: LD_STRING 
12581: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12582: LD_INT 0
12584: PPUSH
12585: LD_INT 1
12587: PPUSH
12588: LD_EXP 13
12592: PPUSH
12593: LD_EXP 14
12597: PPUSH
12598: CALL_OW 12
12602: PPUSH
12603: CALL_OW 380
// un = CreateHuman ;
12607: LD_ADDR_VAR 0 3
12611: PUSH
12612: CALL_OW 44
12616: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12617: LD_VAR 0 3
12621: PPUSH
12622: LD_INT 14
12624: PPUSH
12625: LD_INT 0
12627: PPUSH
12628: CALL_OW 49
// end ;
12632: GO 12547
12634: POP
12635: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) , 4 ] [ Difficulty ] ) ;
12636: LD_INT 3
12638: PPUSH
12639: LD_INT 3
12641: PPUSH
12642: LD_INT 2
12644: PPUSH
12645: LD_EXP 13
12649: PPUSH
12650: LD_EXP 14
12654: PPUSH
12655: CALL_OW 12
12659: PPUSH
12660: LD_INT 1
12662: PPUSH
12663: LD_INT 1
12665: PPUSH
12666: LD_INT 2
12668: PPUSH
12669: CALL_OW 12
12673: PUSH
12674: LD_INT 1
12676: PPUSH
12677: LD_INT 3
12679: PPUSH
12680: CALL_OW 12
12684: PUSH
12685: LD_INT 1
12687: PPUSH
12688: LD_INT 3
12690: PPUSH
12691: CALL_OW 12
12695: PUSH
12696: LD_INT 4
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: PUSH
12705: LD_OWVAR 67
12709: ARRAY
12710: PPUSH
12711: CALL 8964 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 , 2 ] [ Difficulty ] ) ;
12715: LD_INT 3
12717: PPUSH
12718: LD_INT 3
12720: PPUSH
12721: LD_INT 23
12723: PPUSH
12724: LD_EXP 13
12728: PPUSH
12729: LD_EXP 14
12733: PPUSH
12734: CALL_OW 12
12738: PPUSH
12739: LD_INT 4
12741: PPUSH
12742: LD_INT 0
12744: PUSH
12745: LD_INT 1
12747: PUSH
12748: LD_INT 2
12750: PUSH
12751: LD_INT 2
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: PUSH
12760: LD_OWVAR 67
12764: ARRAY
12765: PPUSH
12766: CALL 8964 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12770: LD_INT 3
12772: PPUSH
12773: LD_INT 3
12775: PPUSH
12776: LD_INT 1
12778: PPUSH
12779: LD_EXP 13
12783: PPUSH
12784: LD_EXP 14
12788: PPUSH
12789: CALL_OW 12
12793: PPUSH
12794: LD_INT 2
12796: PPUSH
12797: LD_INT 1
12799: PUSH
12800: LD_INT 2
12802: PUSH
12803: LD_INT 2
12805: PUSH
12806: LD_INT 3
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: PUSH
12815: LD_OWVAR 67
12819: ARRAY
12820: PPUSH
12821: CALL 8964 0 6
// for i in UnitsInside ( arm1 ) do
12825: LD_ADDR_VAR 0 2
12829: PUSH
12830: LD_INT 2
12832: PPUSH
12833: CALL_OW 313
12837: PUSH
12838: FOR_IN
12839: IFFALSE 12872
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , i ) ;
12841: LD_ADDR_EXP 24
12845: PUSH
12846: LD_EXP 24
12850: PPUSH
12851: LD_EXP 24
12855: PUSH
12856: LD_INT 1
12858: PLUS
12859: PPUSH
12860: LD_VAR 0 2
12864: PPUSH
12865: CALL_OW 1
12869: ST_TO_ADDR
12870: GO 12838
12872: POP
12873: POP
// end ;
12874: LD_VAR 0 1
12878: RET
// export function PrepareOtherRussians ; var i , un ; begin
12879: LD_INT 0
12881: PPUSH
12882: PPUSH
12883: PPUSH
// for i = 1 to 2 do
12884: LD_ADDR_VAR 0 2
12888: PUSH
12889: DOUBLE
12890: LD_INT 1
12892: DEC
12893: ST_TO_ADDR
12894: LD_INT 2
12896: PUSH
12897: FOR_TO
12898: IFFALSE 12999
// begin uc_side = 3 ;
12900: LD_ADDR_OWVAR 20
12904: PUSH
12905: LD_INT 3
12907: ST_TO_ADDR
// uc_nation = 3 ;
12908: LD_ADDR_OWVAR 21
12912: PUSH
12913: LD_INT 3
12915: ST_TO_ADDR
// hc_gallery =  ;
12916: LD_ADDR_OWVAR 33
12920: PUSH
12921: LD_STRING 
12923: ST_TO_ADDR
// hc_name =  ;
12924: LD_ADDR_OWVAR 26
12928: PUSH
12929: LD_STRING 
12931: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12932: LD_INT 0
12934: PPUSH
12935: LD_INT 1
12937: PPUSH
12938: LD_EXP 13
12942: PPUSH
12943: LD_EXP 14
12947: PPUSH
12948: CALL_OW 12
12952: PPUSH
12953: CALL_OW 380
// un = CreateHuman ;
12957: LD_ADDR_VAR 0 3
12961: PUSH
12962: CALL_OW 44
12966: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12967: LD_VAR 0 3
12971: PPUSH
12972: LD_INT 9
12974: PPUSH
12975: LD_INT 0
12977: PPUSH
12978: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12982: LD_VAR 0 3
12986: PPUSH
12987: LD_INT 80
12989: PPUSH
12990: LD_INT 73
12992: PPUSH
12993: CALL_OW 118
// end ;
12997: GO 12897
12999: POP
13000: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
13001: LD_ADDR_VAR 0 2
13005: PUSH
13006: LD_INT 22
13008: PUSH
13009: LD_INT 3
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 30
13018: PUSH
13019: LD_INT 31
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PPUSH
13030: CALL_OW 69
13034: PUSH
13035: FOR_IN
13036: IFFALSE 13064
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
13038: LD_EXP 13
13042: PPUSH
13043: LD_EXP 14
13047: PPUSH
13048: CALL_OW 12
13052: PPUSH
13053: LD_VAR 0 2
13057: PPUSH
13058: CALL 9073 0 2
13062: GO 13035
13064: POP
13065: POP
// end ;
13066: LD_VAR 0 1
13070: RET
// export function PrepareCargoBays ; begin
13071: LD_INT 0
13073: PPUSH
// uc_side = 3 ;
13074: LD_ADDR_OWVAR 20
13078: PUSH
13079: LD_INT 3
13081: ST_TO_ADDR
// uc_nation = 3 ;
13082: LD_ADDR_OWVAR 21
13086: PUSH
13087: LD_INT 3
13089: ST_TO_ADDR
// vc_engine = 1 ;
13090: LD_ADDR_OWVAR 39
13094: PUSH
13095: LD_INT 1
13097: ST_TO_ADDR
// vc_control = 1 ;
13098: LD_ADDR_OWVAR 38
13102: PUSH
13103: LD_INT 1
13105: ST_TO_ADDR
// vc_weapon = 51 ;
13106: LD_ADDR_OWVAR 40
13110: PUSH
13111: LD_INT 51
13113: ST_TO_ADDR
// vc_chassis = 22 ;
13114: LD_ADDR_OWVAR 37
13118: PUSH
13119: LD_INT 22
13121: ST_TO_ADDR
// cargo1 = CreateVehicle ;
13122: LD_ADDR_EXP 15
13126: PUSH
13127: CALL_OW 45
13131: ST_TO_ADDR
// cargo2 = CreateVehicle ;
13132: LD_ADDR_EXP 16
13136: PUSH
13137: CALL_OW 45
13141: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
13142: LD_EXP 15
13146: PPUSH
13147: LD_INT 13
13149: PPUSH
13150: LD_INT 0
13152: PPUSH
13153: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
13157: LD_EXP 16
13161: PPUSH
13162: LD_INT 13
13164: PPUSH
13165: LD_INT 0
13167: PPUSH
13168: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13172: LD_EXP 15
13176: PPUSH
13177: LD_INT 2
13179: PPUSH
13180: LD_INT 70
13182: PUSH
13183: LD_INT 50
13185: PUSH
13186: LD_INT 30
13188: PUSH
13189: LD_INT 20
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: PUSH
13198: LD_OWVAR 67
13202: ARRAY
13203: PPUSH
13204: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13208: LD_EXP 16
13212: PPUSH
13213: LD_INT 2
13215: PPUSH
13216: LD_INT 70
13218: PUSH
13219: LD_INT 50
13221: PUSH
13222: LD_INT 30
13224: PUSH
13225: LD_INT 20
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: PUSH
13234: LD_OWVAR 67
13238: ARRAY
13239: PPUSH
13240: CALL_OW 291
// hc_gallery =  ;
13244: LD_ADDR_OWVAR 33
13248: PUSH
13249: LD_STRING 
13251: ST_TO_ADDR
// hc_name =  ;
13252: LD_ADDR_OWVAR 26
13256: PUSH
13257: LD_STRING 
13259: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13260: LD_INT 1
13262: PPUSH
13263: LD_INT 3
13265: PPUSH
13266: LD_INT 1
13268: PPUSH
13269: LD_INT 2
13271: PPUSH
13272: CALL_OW 12
13276: PPUSH
13277: CALL_OW 380
// driver1 = CreateHuman ;
13281: LD_ADDR_EXP 17
13285: PUSH
13286: CALL_OW 44
13290: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13291: LD_EXP 17
13295: PPUSH
13296: LD_EXP 15
13300: PPUSH
13301: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13305: LD_ADDR_OWVAR 26
13309: PUSH
13310: LD_STRING Nikolai Andreyev
13312: ST_TO_ADDR
// driver2 = CreateHuman ;
13313: LD_ADDR_EXP 18
13317: PUSH
13318: CALL_OW 44
13322: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13323: LD_EXP 18
13327: PPUSH
13328: LD_EXP 16
13332: PPUSH
13333: CALL_OW 52
// end ;
13337: LD_VAR 0 1
13341: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , mech ; begin
13342: LD_INT 0
13344: PPUSH
13345: PPUSH
13346: PPUSH
13347: PPUSH
13348: PPUSH
13349: PPUSH
// uc_side = 3 ;
13350: LD_ADDR_OWVAR 20
13354: PUSH
13355: LD_INT 3
13357: ST_TO_ADDR
// uc_nation = 3 ;
13358: LD_ADDR_OWVAR 21
13362: PUSH
13363: LD_INT 3
13365: ST_TO_ADDR
// for i := 1 to count do
13366: LD_ADDR_VAR 0 4
13370: PUSH
13371: DOUBLE
13372: LD_INT 1
13374: DEC
13375: ST_TO_ADDR
13376: LD_VAR 0 1
13380: PUSH
13381: FOR_TO
13382: IFFALSE 13644
// begin vc_engine = 1 ;
13384: LD_ADDR_OWVAR 39
13388: PUSH
13389: LD_INT 1
13391: ST_TO_ADDR
// vc_control = 1 ;
13392: LD_ADDR_OWVAR 38
13396: PUSH
13397: LD_INT 1
13399: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
13400: LD_ADDR_OWVAR 40
13404: PUSH
13405: LD_INT 42
13407: ST_TO_ADDR
// if Difficulty = 3 then
13408: LD_OWVAR 67
13412: PUSH
13413: LD_INT 3
13415: EQUAL
13416: IFFALSE 13445
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13418: LD_ADDR_OWVAR 40
13422: PUSH
13423: LD_INT 42
13425: PUSH
13426: LD_INT 43
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 1
13435: PPUSH
13436: LD_INT 2
13438: PPUSH
13439: CALL_OW 12
13443: ARRAY
13444: ST_TO_ADDR
// if Difficulty = 4 then
13445: LD_OWVAR 67
13449: PUSH
13450: LD_INT 4
13452: EQUAL
13453: IFFALSE 13490
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 4 ) ] ;
13455: LD_ADDR_OWVAR 40
13459: PUSH
13460: LD_INT 42
13462: PUSH
13463: LD_INT 43
13465: PUSH
13466: LD_INT 43
13468: PUSH
13469: LD_INT 44
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 1
13480: PPUSH
13481: LD_INT 4
13483: PPUSH
13484: CALL_OW 12
13488: ARRAY
13489: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
13490: LD_ADDR_OWVAR 37
13494: PUSH
13495: LD_INT 21
13497: PUSH
13498: LD_INT 22
13500: PUSH
13501: LD_INT 22
13503: PUSH
13504: LD_INT 22
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: PUSH
13513: LD_OWVAR 67
13517: ARRAY
13518: ST_TO_ADDR
// veh = CreateVehicle ;
13519: LD_ADDR_VAR 0 5
13523: PUSH
13524: CALL_OW 45
13528: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13529: LD_VAR 0 5
13533: PPUSH
13534: LD_VAR 0 2
13538: PPUSH
13539: LD_INT 0
13541: PPUSH
13542: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13546: LD_ADDR_EXP 26
13550: PUSH
13551: LD_EXP 26
13555: PUSH
13556: LD_VAR 0 5
13560: ADD
13561: ST_TO_ADDR
// hc_gallery =  ;
13562: LD_ADDR_OWVAR 33
13566: PUSH
13567: LD_STRING 
13569: ST_TO_ADDR
// hc_name =  ;
13570: LD_ADDR_OWVAR 26
13574: PUSH
13575: LD_STRING 
13577: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13578: LD_INT 0
13580: PPUSH
13581: LD_INT 3
13583: PPUSH
13584: LD_EXP 13
13588: PPUSH
13589: LD_EXP 14
13593: PPUSH
13594: CALL_OW 12
13598: PPUSH
13599: CALL_OW 380
// un = CreateHuman ;
13603: LD_ADDR_VAR 0 6
13607: PUSH
13608: CALL_OW 44
13612: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13613: LD_VAR 0 6
13617: PPUSH
13618: LD_VAR 0 5
13622: PPUSH
13623: CALL_OW 52
// ComMoveXY ( un , 14 , 9 ) ;
13627: LD_VAR 0 6
13631: PPUSH
13632: LD_INT 14
13634: PPUSH
13635: LD_INT 9
13637: PPUSH
13638: CALL_OW 111
// end ;
13642: GO 13381
13644: POP
13645: POP
// wait ( 0 0$1 ) ;
13646: LD_INT 35
13648: PPUSH
13649: CALL_OW 67
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13653: LD_INT 0
13655: PPUSH
13656: LD_INT 2
13658: PPUSH
13659: LD_EXP 13
13663: PPUSH
13664: LD_EXP 14
13668: PPUSH
13669: CALL_OW 12
13673: PPUSH
13674: CALL_OW 380
// un = CreateHuman ;
13678: LD_ADDR_VAR 0 6
13682: PUSH
13683: CALL_OW 44
13687: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13688: LD_ADDR_VAR 0 4
13692: PUSH
13693: DOUBLE
13694: LD_INT 1
13696: DEC
13697: ST_TO_ADDR
13698: LD_VAR 0 1
13702: PUSH
13703: LD_INT 2
13705: PUSH
13706: LD_INT 2
13708: MUL
13709: PLUS
13710: PUSH
13711: FOR_TO
13712: IFFALSE 13804
// begin hc_gallery =  ;
13714: LD_ADDR_OWVAR 33
13718: PUSH
13719: LD_STRING 
13721: ST_TO_ADDR
// hc_name =  ;
13722: LD_ADDR_OWVAR 26
13726: PUSH
13727: LD_STRING 
13729: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13730: LD_INT 1
13732: PPUSH
13733: LD_INT 1
13735: PPUSH
13736: LD_EXP 13
13740: PPUSH
13741: LD_EXP 14
13745: PPUSH
13746: CALL_OW 12
13750: PPUSH
13751: CALL_OW 380
// un = CreateHuman ;
13755: LD_ADDR_VAR 0 6
13759: PUSH
13760: CALL_OW 44
13764: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 13 , 4 , false ) ;
13765: LD_VAR 0 6
13769: PPUSH
13770: LD_INT 9
13772: PPUSH
13773: LD_INT 13
13775: PPUSH
13776: LD_INT 4
13778: PPUSH
13779: LD_INT 0
13781: PPUSH
13782: CALL_OW 50
// attackGroup = attackGroup ^ un ;
13786: LD_ADDR_EXP 26
13790: PUSH
13791: LD_EXP 26
13795: PUSH
13796: LD_VAR 0 6
13800: ADD
13801: ST_TO_ADDR
// end ;
13802: GO 13711
13804: POP
13805: POP
// tmp := FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13806: LD_ADDR_VAR 0 7
13810: PUSH
13811: LD_INT 26
13813: PPUSH
13814: LD_INT 22
13816: PUSH
13817: LD_INT 3
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PUSH
13824: LD_INT 21
13826: PUSH
13827: LD_INT 1
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: LD_INT 26
13836: PUSH
13837: LD_INT 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: LIST
13848: PPUSH
13849: CALL_OW 70
13853: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13854: LD_VAR 0 7
13858: PUSH
13859: LD_INT 1
13861: ARRAY
13862: PPUSH
13863: LD_STRING D9-Rus3-1
13865: PPUSH
13866: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13870: LD_VAR 0 7
13874: PUSH
13875: LD_INT 2
13877: ARRAY
13878: PPUSH
13879: LD_STRING D9-Russ-1
13881: PPUSH
13882: CALL_OW 88
// ComAgressiveMove ( attackGroup , 31 , 13 ) ;
13886: LD_EXP 26
13890: PPUSH
13891: LD_INT 31
13893: PPUSH
13894: LD_INT 13
13896: PPUSH
13897: CALL_OW 114
// wait ( 0 0$3 ) ;
13901: LD_INT 105
13903: PPUSH
13904: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13908: LD_INT 35
13910: PPUSH
13911: CALL_OW 67
// for i in attackGroup do
13915: LD_ADDR_VAR 0 4
13919: PUSH
13920: LD_EXP 26
13924: PUSH
13925: FOR_IN
13926: IFFALSE 14293
// begin if IsDead ( i ) then
13928: LD_VAR 0 4
13932: PPUSH
13933: CALL_OW 301
13937: IFFALSE 13957
// begin attackGroup := attackGroup diff i ;
13939: LD_ADDR_EXP 26
13943: PUSH
13944: LD_EXP 26
13948: PUSH
13949: LD_VAR 0 4
13953: DIFF
13954: ST_TO_ADDR
// continue ;
13955: GO 13925
// end ; if not HasTask ( i ) and not GetTag ( i ) then
13957: LD_VAR 0 4
13961: PPUSH
13962: CALL_OW 314
13966: NOT
13967: PUSH
13968: LD_VAR 0 4
13972: PPUSH
13973: CALL_OW 110
13977: NOT
13978: AND
13979: IFFALSE 14015
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
13981: LD_VAR 0 4
13985: PPUSH
13986: LD_INT 22
13988: PUSH
13989: LD_INT 1
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PPUSH
13996: CALL_OW 69
14000: PPUSH
14001: LD_VAR 0 4
14005: PPUSH
14006: CALL_OW 74
14010: PPUSH
14011: CALL_OW 115
// if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
14015: LD_VAR 0 4
14019: PPUSH
14020: CALL_OW 110
14024: NOT
14025: PUSH
14026: LD_VAR 0 4
14030: PPUSH
14031: CALL_OW 256
14035: PUSH
14036: LD_INT 650
14038: LESS
14039: AND
14040: PUSH
14041: LD_VAR 0 4
14045: PPUSH
14046: CALL_OW 247
14050: PUSH
14051: LD_INT 2
14053: EQUAL
14054: AND
14055: IFFALSE 14084
// begin SetTag ( i , 1 ) ;
14057: LD_VAR 0 4
14061: PPUSH
14062: LD_INT 1
14064: PPUSH
14065: CALL_OW 109
// ComMoveXY ( i , 20 , 8 ) ;
14069: LD_VAR 0 4
14073: PPUSH
14074: LD_INT 20
14076: PPUSH
14077: LD_INT 8
14079: PPUSH
14080: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 20 , 8 ) < 6 then
14084: LD_VAR 0 4
14088: PPUSH
14089: CALL_OW 110
14093: PUSH
14094: LD_INT 1
14096: EQUAL
14097: PUSH
14098: LD_VAR 0 4
14102: PPUSH
14103: LD_INT 20
14105: PPUSH
14106: LD_INT 8
14108: PPUSH
14109: CALL_OW 297
14113: PUSH
14114: LD_INT 6
14116: LESS
14117: AND
14118: IFFALSE 14132
// SetTag ( i , 2 ) ;
14120: LD_VAR 0 4
14124: PPUSH
14125: LD_INT 2
14127: PPUSH
14128: CALL_OW 109
// if GetTag ( i ) = 2 then
14132: LD_VAR 0 4
14136: PPUSH
14137: CALL_OW 110
14141: PUSH
14142: LD_INT 2
14144: EQUAL
14145: IFFALSE 14253
// begin if GetLives ( i ) = 1000 then
14147: LD_VAR 0 4
14151: PPUSH
14152: CALL_OW 256
14156: PUSH
14157: LD_INT 1000
14159: EQUAL
14160: IFFALSE 14176
// SetTag ( i , 3 ) else
14162: LD_VAR 0 4
14166: PPUSH
14167: LD_INT 3
14169: PPUSH
14170: CALL_OW 109
14174: GO 14253
// if IsDrivenBy ( i ) then
14176: LD_VAR 0 4
14180: PPUSH
14181: CALL_OW 311
14185: IFFALSE 14253
// begin mech := IsDrivenBy ( i ) ;
14187: LD_ADDR_VAR 0 8
14191: PUSH
14192: LD_VAR 0 4
14196: PPUSH
14197: CALL_OW 311
14201: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
14202: LD_INT 1
14204: PPUSH
14205: LD_VAR 0 8
14209: PPUSH
14210: CALL_OW 292
14214: NOT
14215: PUSH
14216: LD_VAR 0 8
14220: PPUSH
14221: CALL_OW 256
14225: PUSH
14226: LD_INT 1000
14228: LESS
14229: AND
14230: IFFALSE 14244
// SetLives ( mech , 1000 ) ;
14232: LD_VAR 0 8
14236: PPUSH
14237: LD_INT 1000
14239: PPUSH
14240: CALL_OW 234
// ComRepairVehicleAndReturn ( mech ) ;
14244: LD_VAR 0 8
14248: PPUSH
14249: CALL 75796 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
14253: LD_VAR 0 4
14257: PPUSH
14258: CALL_OW 110
14262: PUSH
14263: LD_INT 3
14265: EQUAL
14266: PUSH
14267: LD_VAR 0 4
14271: PPUSH
14272: CALL_OW 311
14276: AND
14277: IFFALSE 14291
// SetTag ( i , 0 ) ;
14279: LD_VAR 0 4
14283: PPUSH
14284: LD_INT 0
14286: PPUSH
14287: CALL_OW 109
// end ;
14291: GO 13925
14293: POP
14294: POP
// until not attackGroup ;
14295: LD_EXP 26
14299: NOT
14300: IFFALSE 13908
// end ;
14302: LD_VAR 0 3
14306: RET
// every 0 0$1 trigger UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do var i ;
14307: LD_EXP 26
14311: PPUSH
14312: LD_INT 21
14314: PUSH
14315: LD_INT 2
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PPUSH
14322: CALL_OW 72
14326: IFFALSE 14394
14328: GO 14330
14330: DISABLE
14331: LD_INT 0
14333: PPUSH
// begin enable ;
14334: ENABLE
// for i in UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do
14335: LD_ADDR_VAR 0 1
14339: PUSH
14340: LD_EXP 26
14344: PPUSH
14345: LD_INT 21
14347: PUSH
14348: LD_INT 2
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PPUSH
14355: CALL_OW 72
14359: PUSH
14360: FOR_IN
14361: IFFALSE 14392
// if GetFuel ( i ) < 3 then
14363: LD_VAR 0 1
14367: PPUSH
14368: CALL_OW 261
14372: PUSH
14373: LD_INT 3
14375: LESS
14376: IFFALSE 14390
// SetFuel ( i , 3 ) ;
14378: LD_VAR 0 1
14382: PPUSH
14383: LD_INT 3
14385: PPUSH
14386: CALL_OW 240
14390: GO 14360
14392: POP
14393: POP
// end ; end_of_file
14394: PPOPN 1
14396: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do
14397: LD_INT 22
14399: PUSH
14400: LD_INT 3
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: PUSH
14407: LD_INT 25
14409: PUSH
14410: LD_INT 2
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PPUSH
14421: CALL_OW 69
14425: IFFALSE 14444
14427: GO 14429
14429: DISABLE
// begin enable ;
14430: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
14431: LD_INT 3
14433: PPUSH
14434: LD_INT 1
14436: PPUSH
14437: LD_INT 22
14439: PPUSH
14440: CALL 9209 0 3
// end ;
14444: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
14445: LD_INT 22
14447: PUSH
14448: LD_INT 3
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: LD_INT 25
14457: PUSH
14458: LD_INT 4
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: PPUSH
14469: CALL_OW 69
14473: IFFALSE 14495
14475: GO 14477
14477: DISABLE
// begin enable ;
14478: ENABLE
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
14479: LD_INT 3
14481: PPUSH
14482: LD_INT 20
14484: PPUSH
14485: LD_INT 22
14487: PPUSH
14488: LD_INT 23
14490: PPUSH
14491: CALL 9541 0 4
// end ;
14495: END
// every 0 0$1 trigger northBaseDefenders do
14496: LD_EXP 24
14500: IFFALSE 14524
14502: GO 14504
14504: DISABLE
// begin enable ;
14505: ENABLE
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
14506: LD_INT 22
14508: PPUSH
14509: LD_INT 1
14511: PPUSH
14512: LD_EXP 24
14516: PPUSH
14517: LD_INT 2
14519: PPUSH
14520: CALL 9813 0 4
// end ;
14524: END
// every 0 0$1 trigger southBaseDefenders do
14525: LD_EXP 25
14529: IFFALSE 14553
14531: GO 14533
14533: DISABLE
// begin enable ;
14534: ENABLE
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
14535: LD_INT 23
14537: PPUSH
14538: LD_INT 1
14540: PPUSH
14541: LD_EXP 25
14545: PPUSH
14546: LD_INT 33
14548: PPUSH
14549: CALL 9813 0 4
// end ; end_of_file
14553: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14554: LD_VAR 0 1
14558: PPUSH
14559: CALL 32486 0 1
// if unit = JMM then
14563: LD_VAR 0 1
14567: PUSH
14568: LD_EXP 1
14572: EQUAL
14573: IFFALSE 14582
// YouLost ( JMM ) ;
14575: LD_STRING JMM
14577: PPUSH
14578: CALL_OW 104
// if GetBType ( unit ) = b_depot then
14582: LD_VAR 0 1
14586: PPUSH
14587: CALL_OW 266
14591: PUSH
14592: LD_INT 0
14594: EQUAL
14595: IFFALSE 14604
// YouLost ( DepotDestroyed ) ;
14597: LD_STRING DepotDestroyed
14599: PPUSH
14600: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 255
14613: PUSH
14614: LD_INT 1
14616: EQUAL
14617: PUSH
14618: LD_VAR 0 1
14622: PPUSH
14623: CALL_OW 247
14627: PUSH
14628: LD_INT 1
14630: EQUAL
14631: AND
14632: IFFALSE 14648
// deadsCounter = deadsCounter + 1 ;
14634: LD_ADDR_EXP 31
14638: PUSH
14639: LD_EXP 31
14643: PUSH
14644: LD_INT 1
14646: PLUS
14647: ST_TO_ADDR
// end ;
14648: PPOPN 1
14650: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
14651: LD_VAR 0 1
14655: PPUSH
14656: CALL_OW 255
14660: PUSH
14661: LD_INT 3
14663: EQUAL
14664: IFFALSE 14742
// begin ComMoveXY ( driver , 6 , 10 ) ;
14666: LD_VAR 0 1
14670: PPUSH
14671: LD_INT 6
14673: PPUSH
14674: LD_INT 10
14676: PPUSH
14677: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14681: LD_INT 35
14683: PPUSH
14684: CALL_OW 67
// ComMoveXY ( driver , 6 , 10 ) ;
14688: LD_VAR 0 1
14692: PPUSH
14693: LD_INT 6
14695: PPUSH
14696: LD_INT 10
14698: PPUSH
14699: CALL_OW 111
// if IsDead ( driver ) then
14703: LD_VAR 0 1
14707: PPUSH
14708: CALL_OW 301
14712: IFFALSE 14716
// exit ;
14714: GO 14742
// until IsAt ( driver , 6 , 10 ) ;
14716: LD_VAR 0 1
14720: PPUSH
14721: LD_INT 6
14723: PPUSH
14724: LD_INT 10
14726: PPUSH
14727: CALL_OW 307
14731: IFFALSE 14681
// RemoveUnit ( driver ) ;
14733: LD_VAR 0 1
14737: PPUSH
14738: CALL_OW 64
// end ; end ;
14742: PPOPN 4
14744: END
// on Command ( cmd ) do var i , j , tmp ;
14745: LD_INT 0
14747: PPUSH
14748: PPUSH
14749: PPUSH
// begin SOS_Command ( cmd ) ;
14750: LD_VAR 0 1
14754: PPUSH
14755: CALL 32590 0 1
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
14759: LD_ADDR_VAR 0 2
14763: PUSH
14764: LD_INT 22
14766: PUSH
14767: LD_INT 1
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: LD_INT 21
14776: PUSH
14777: LD_INT 2
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PPUSH
14788: CALL_OW 69
14792: PUSH
14793: FOR_IN
14794: IFFALSE 14915
// begin if GetTaskList ( i ) then
14796: LD_VAR 0 2
14800: PPUSH
14801: CALL_OW 437
14805: IFFALSE 14913
// begin for j = 1 to GetTaskList ( i ) do
14807: LD_ADDR_VAR 0 3
14811: PUSH
14812: DOUBLE
14813: LD_INT 1
14815: DEC
14816: ST_TO_ADDR
14817: LD_VAR 0 2
14821: PPUSH
14822: CALL_OW 437
14826: PUSH
14827: FOR_TO
14828: IFFALSE 14911
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14830: LD_ADDR_VAR 0 4
14834: PUSH
14835: LD_VAR 0 2
14839: PPUSH
14840: CALL_OW 437
14844: PUSH
14845: LD_VAR 0 3
14849: ARRAY
14850: PUSH
14851: LD_INT 4
14853: ARRAY
14854: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14855: LD_VAR 0 4
14859: PPUSH
14860: CALL_OW 255
14864: PUSH
14865: LD_INT 3
14867: EQUAL
14868: PUSH
14869: LD_VAR 0 4
14873: PPUSH
14874: CALL_OW 247
14878: PUSH
14879: LD_INT 2
14881: EQUAL
14882: AND
14883: PUSH
14884: LD_VAR 0 4
14888: PPUSH
14889: CALL_OW 264
14893: PUSH
14894: LD_INT 51
14896: EQUAL
14897: AND
14898: IFFALSE 14909
// ComStop ( i ) ;
14900: LD_VAR 0 2
14904: PPUSH
14905: CALL_OW 141
// end ;
14909: GO 14827
14911: POP
14912: POP
// end ; end ;
14913: GO 14793
14915: POP
14916: POP
// end ;
14917: PPOPN 4
14919: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14920: LD_VAR 0 2
14924: PUSH
14925: LD_EXP 8
14929: EQUAL
14930: PUSH
14931: LD_EXP 21
14935: PUSH
14936: LD_INT 4
14938: NONEQUAL
14939: AND
14940: IFFALSE 15092
// begin if IsOk ( Mikhail ) then
14942: LD_EXP 8
14946: PPUSH
14947: CALL_OW 302
14951: IFFALSE 14959
// AskMikhail else
14953: CALL 7486 0 0
14957: GO 15092
// if IsOk ( llab1 ) then
14959: LD_INT 23
14961: PPUSH
14962: CALL_OW 302
14966: IFFALSE 15055
// begin InGameOn ;
14968: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14972: LD_EXP 8
14976: PPUSH
14977: LD_INT 6
14979: PPUSH
14980: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
14984: LD_INT 23
14986: PPUSH
14987: LD_INT 6
14989: PPUSH
14990: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
14994: LD_EXP 8
14998: PPUSH
14999: LD_INT 23
15001: PPUSH
15002: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15006: LD_INT 35
15008: PPUSH
15009: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
15013: LD_EXP 8
15017: PPUSH
15018: CALL_OW 310
15022: PUSH
15023: LD_INT 23
15025: EQUAL
15026: PUSH
15027: LD_EXP 8
15031: PPUSH
15032: CALL_OW 301
15036: OR
15037: IFFALSE 15006
// SetSide ( llab1 , 1 ) ;
15039: LD_INT 23
15041: PPUSH
15042: LD_INT 1
15044: PPUSH
15045: CALL_OW 235
// InGameOff ;
15049: CALL_OW 9
// end else
15053: GO 15092
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
15055: LD_INT 3
15057: PPUSH
15058: LD_INT 6
15060: PPUSH
15061: LD_INT 2
15063: PPUSH
15064: LD_INT 1
15066: PPUSH
15067: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
15071: LD_EXP 8
15075: PPUSH
15076: LD_INT 6
15078: PPUSH
15079: CALL_OW 235
// ComHold ( Mikhail ) ;
15083: LD_EXP 8
15087: PPUSH
15088: CALL_OW 140
// end ; end ; end ;
15092: PPOPN 2
15094: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15095: LD_VAR 0 1
15099: PPUSH
15100: LD_VAR 0 2
15104: PPUSH
15105: CALL 32606 0 2
// end ;
15109: PPOPN 2
15111: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
15112: LD_EXP 8
15116: PPUSH
15117: CALL_OW 257
15121: PUSH
15122: LD_INT 3
15124: NONEQUAL
15125: IFFALSE 15143
15127: GO 15129
15129: DISABLE
// begin enable ;
15130: ENABLE
// SetClass ( Mikhail , 3 ) ;
15131: LD_EXP 8
15135: PPUSH
15136: LD_INT 3
15138: PPUSH
15139: CALL_OW 336
// end ; end_of_file
15143: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
15144: LD_INT 22
15146: PUSH
15147: LD_INT 1
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PUSH
15154: LD_INT 21
15156: PUSH
15157: LD_INT 1
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PUSH
15164: LD_INT 25
15166: PUSH
15167: LD_INT 2
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: LIST
15178: PPUSH
15179: CALL_OW 69
15183: PUSH
15184: LD_INT 0
15186: EQUAL
15187: PUSH
15188: LD_INT 22
15190: PUSH
15191: LD_INT 4
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PUSH
15198: LD_INT 21
15200: PUSH
15201: LD_INT 1
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: PUSH
15208: LD_INT 25
15210: PUSH
15211: LD_INT 2
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: LIST
15222: PPUSH
15223: CALL_OW 69
15227: PUSH
15228: LD_INT 0
15230: EQUAL
15231: AND
15232: PUSH
15233: LD_INT 1
15235: PPUSH
15236: CALL_OW 255
15240: PUSH
15241: LD_INT 3
15243: EQUAL
15244: AND
15245: PUSH
15246: LD_INT 10
15248: PPUSH
15249: CALL_OW 255
15253: PUSH
15254: LD_INT 3
15256: EQUAL
15257: AND
15258: IFFALSE 15270
15260: GO 15262
15262: DISABLE
// YouLost ( Engineer ) ;
15263: LD_STRING Engineer
15265: PPUSH
15266: CALL_OW 104
15270: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
15271: LD_INT 1
15273: PPUSH
15274: CALL_OW 255
15278: PUSH
15279: LD_INT 3
15281: EQUAL
15282: PUSH
15283: LD_EXP 27
15287: PUSH
15288: LD_INT 1
15290: EQUAL
15291: AND
15292: IFFALSE 15304
15294: GO 15296
15296: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
15297: LD_STRING DepotCaptured
15299: PPUSH
15300: CALL_OW 104
15304: END
// export function PrepareTigers ; var i , un ; begin
15305: LD_INT 0
15307: PPUSH
15308: PPUSH
15309: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15310: LD_ADDR_VAR 0 2
15314: PUSH
15315: DOUBLE
15316: LD_INT 1
15318: DEC
15319: ST_TO_ADDR
15320: LD_INT 2
15322: PUSH
15323: LD_INT 3
15325: PUSH
15326: LD_INT 4
15328: PUSH
15329: LD_INT 5
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: PUSH
15338: LD_OWVAR 67
15342: ARRAY
15343: PUSH
15344: FOR_TO
15345: IFFALSE 15460
// begin uc_side := 0 ;
15347: LD_ADDR_OWVAR 20
15351: PUSH
15352: LD_INT 0
15354: ST_TO_ADDR
// uc_nation := nation_nature ;
15355: LD_ADDR_OWVAR 21
15359: PUSH
15360: LD_INT 0
15362: ST_TO_ADDR
// hc_sex := sex_male ;
15363: LD_ADDR_OWVAR 27
15367: PUSH
15368: LD_INT 1
15370: ST_TO_ADDR
// hc_class := class_tiger ;
15371: LD_ADDR_OWVAR 28
15375: PUSH
15376: LD_INT 14
15378: ST_TO_ADDR
// hc_skills := [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
15379: LD_ADDR_OWVAR 31
15383: PUSH
15384: LD_EXP 14
15388: PUSH
15389: LD_INT 0
15391: PUSH
15392: LD_INT 0
15394: PUSH
15395: LD_INT 0
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: ST_TO_ADDR
// hc_agressivity := [ 30 , 40 , 45 , 50 ] [ Difficulty ] ;
15404: LD_ADDR_OWVAR 35
15408: PUSH
15409: LD_INT 30
15411: PUSH
15412: LD_INT 40
15414: PUSH
15415: LD_INT 45
15417: PUSH
15418: LD_INT 50
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: PUSH
15427: LD_OWVAR 67
15431: ARRAY
15432: ST_TO_ADDR
// un = CreateHuman ;
15433: LD_ADDR_VAR 0 3
15437: PUSH
15438: CALL_OW 44
15442: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15443: LD_VAR 0 3
15447: PPUSH
15448: LD_INT 27
15450: PPUSH
15451: LD_INT 0
15453: PPUSH
15454: CALL_OW 49
// end ;
15458: GO 15344
15460: POP
15461: POP
// end ; end_of_file
15462: LD_VAR 0 1
15466: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
15467: LD_INT 1
15469: PPUSH
15470: CALL_OW 255
15474: PUSH
15475: LD_INT 1
15477: EQUAL
15478: PUSH
15479: LD_INT 10
15481: PPUSH
15482: CALL_OW 255
15486: PUSH
15487: LD_INT 1
15489: EQUAL
15490: AND
15491: PUSH
15492: LD_EXP 20
15496: PUSH
15497: LD_INT 1
15499: EQUAL
15500: AND
15501: PUSH
15502: LD_INT 22
15504: PUSH
15505: LD_INT 3
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 21
15514: PUSH
15515: LD_INT 2
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PUSH
15522: LD_INT 34
15524: PUSH
15525: LD_INT 51
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: LD_INT 3
15534: PUSH
15535: LD_INT 58
15537: PUSH
15538: EMPTY
15539: LIST
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: PPUSH
15551: CALL_OW 69
15555: PUSH
15556: LD_INT 0
15558: EQUAL
15559: AND
15560: IFFALSE 15651
15562: GO 15564
15564: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ) ;
15565: LD_INT 9450
15567: PUSH
15568: LD_INT 8400
15570: PUSH
15571: LD_INT 6300
15573: PUSH
15574: LD_INT 6300
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: PUSH
15583: LD_OWVAR 67
15587: ARRAY
15588: PPUSH
15589: CALL_OW 67
// if cargoEscape then
15593: LD_EXP 20
15597: IFFALSE 15651
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15599: LD_EXP 9
15603: PPUSH
15604: LD_STRING D6-Pow-1
15606: PPUSH
15607: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
15611: LD_EXP 1
15615: PPUSH
15616: LD_STRING D6-JMM-1
15618: PPUSH
15619: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
15623: LD_EXP 9
15627: PPUSH
15628: LD_STRING D6-Pow-2
15630: PPUSH
15631: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
15635: LD_EXP 1
15639: PPUSH
15640: LD_STRING D6-JMM-2
15642: PPUSH
15643: CALL_OW 88
// FinishMission ;
15647: CALL 15867 0 0
// end ; end ;
15651: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
15652: LD_INT 1
15654: PPUSH
15655: CALL_OW 255
15659: PUSH
15660: LD_INT 1
15662: EQUAL
15663: PUSH
15664: LD_INT 10
15666: PPUSH
15667: CALL_OW 255
15671: PUSH
15672: LD_INT 1
15674: EQUAL
15675: AND
15676: PUSH
15677: LD_EXP 20
15681: PUSH
15682: LD_INT 1
15684: GREATER
15685: AND
15686: IFFALSE 15761
15688: GO 15690
15690: DISABLE
15691: LD_INT 0
15693: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
15694: LD_INT 11550
15696: PUSH
15697: LD_INT 10500
15699: PUSH
15700: LD_INT 9450
15702: PUSH
15703: LD_INT 8400
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: PUSH
15712: LD_OWVAR 67
15716: ARRAY
15717: PPUSH
15718: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 , 4 ] [ Difficulty ] , RussianAttack ) ;
15722: LD_INT 1
15724: PUSH
15725: LD_INT 2
15727: PUSH
15728: LD_INT 3
15730: PUSH
15731: LD_INT 4
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: PUSH
15740: LD_OWVAR 67
15744: ARRAY
15745: PPUSH
15746: LD_INT 13
15748: PPUSH
15749: CALL 13342 0 2
// lastBattle = 1 ;
15753: LD_ADDR_EXP 27
15757: PUSH
15758: LD_INT 1
15760: ST_TO_ADDR
// end ;
15761: PPOPN 1
15763: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
15764: LD_EXP 27
15768: PUSH
15769: LD_INT 1
15771: EQUAL
15772: PUSH
15773: LD_INT 26
15775: PPUSH
15776: LD_INT 22
15778: PUSH
15779: LD_INT 3
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: LD_INT 21
15788: PUSH
15789: LD_INT 1
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: PPUSH
15800: CALL_OW 70
15804: PUSH
15805: LD_INT 0
15807: EQUAL
15808: AND
15809: IFFALSE 15866
15811: GO 15813
15813: DISABLE
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15814: LD_EXP 9
15818: PPUSH
15819: LD_STRING D6-Pow-1
15821: PPUSH
15822: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
15826: LD_EXP 1
15830: PPUSH
15831: LD_STRING D6-JMM-1
15833: PPUSH
15834: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
15838: LD_EXP 9
15842: PPUSH
15843: LD_STRING D6-Pow-2
15845: PPUSH
15846: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
15850: LD_EXP 1
15854: PPUSH
15855: LD_STRING D6-JMM-2
15857: PPUSH
15858: CALL_OW 88
// FinishMission ;
15862: CALL 15867 0 0
// end ;
15866: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
15867: LD_INT 0
15869: PPUSH
15870: PPUSH
15871: PPUSH
15872: PPUSH
15873: PPUSH
// if tick <= 18 18$00 then
15874: LD_OWVAR 1
15878: PUSH
15879: LD_INT 37800
15881: LESSEQUAL
15882: IFFALSE 15891
// SetAchievement ( ACH_ASPEED_2 ) ;
15884: LD_STRING ACH_ASPEED_2
15886: PPUSH
15887: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15891: LD_ADDR_VAR 0 2
15895: PUSH
15896: LD_INT 22
15898: PUSH
15899: LD_INT 1
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PUSH
15906: LD_INT 21
15908: PUSH
15909: LD_INT 2
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: PUSH
15916: LD_INT 24
15918: PUSH
15919: LD_INT 251
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: LIST
15930: PPUSH
15931: CALL_OW 69
15935: ST_TO_ADDR
// if tmp then
15936: LD_VAR 0 2
15940: IFFALSE 15954
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15942: LD_VAR 0 2
15946: PPUSH
15947: LD_STRING 02_tanks_1
15949: PPUSH
15950: CALL 10688 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
15954: LD_EXP 21
15958: PUSH
15959: LD_INT 1
15961: EQUAL
15962: PUSH
15963: LD_EXP 8
15967: PPUSH
15968: CALL_OW 300
15972: AND
15973: IFFALSE 15987
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15975: LD_EXP 21
15979: PPUSH
15980: LD_STRING 02_mikhailStatus_1
15982: PPUSH
15983: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15987: LD_INT 1
15989: PPUSH
15990: CALL_OW 274
15994: PPUSH
15995: LD_INT 1
15997: PPUSH
15998: CALL_OW 275
16002: PPUSH
16003: LD_STRING 02_resources_4
16005: PPUSH
16006: CALL_OW 39
// m1 := false ;
16010: LD_ADDR_VAR 0 3
16014: PUSH
16015: LD_INT 0
16017: ST_TO_ADDR
// m2 := false ;
16018: LD_ADDR_VAR 0 4
16022: PUSH
16023: LD_INT 0
16025: ST_TO_ADDR
// m3 := false ;
16026: LD_ADDR_VAR 0 5
16030: PUSH
16031: LD_INT 0
16033: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
16034: LD_INT 1
16036: PPUSH
16037: CALL_OW 274
16041: PPUSH
16042: LD_INT 1
16044: PPUSH
16045: CALL_OW 275
16049: PUSH
16050: LD_INT 200
16052: GREATEREQUAL
16053: IFFALSE 16075
// begin AddMedal ( Cans , 1 ) ;
16055: LD_STRING Cans
16057: PPUSH
16058: LD_INT 1
16060: PPUSH
16061: CALL_OW 101
// m1 := true ;
16065: LD_ADDR_VAR 0 3
16069: PUSH
16070: LD_INT 1
16072: ST_TO_ADDR
// end else
16073: GO 16086
// begin AddMedal ( Cans , - 1 ) ;
16075: LD_STRING Cans
16077: PPUSH
16078: LD_INT 1
16080: NEG
16081: PPUSH
16082: CALL_OW 101
// end ; if deadsCounter < 2 then
16086: LD_EXP 31
16090: PUSH
16091: LD_INT 2
16093: LESS
16094: IFFALSE 16116
// begin AddMedal ( Deaths , 1 ) ;
16096: LD_STRING Deaths
16098: PPUSH
16099: LD_INT 1
16101: PPUSH
16102: CALL_OW 101
// m2 := true ;
16106: LD_ADDR_VAR 0 4
16110: PUSH
16111: LD_INT 1
16113: ST_TO_ADDR
// end else
16114: GO 16127
// begin AddMedal ( Deaths , - 1 ) ;
16116: LD_STRING Deaths
16118: PPUSH
16119: LD_INT 1
16121: NEG
16122: PPUSH
16123: CALL_OW 101
// end ; if mikhailStatus = 0 then
16127: LD_EXP 21
16131: PUSH
16132: LD_INT 0
16134: EQUAL
16135: IFFALSE 16148
// AddMedal ( Prisoner , - 1 ) ;
16137: LD_STRING Prisoner
16139: PPUSH
16140: LD_INT 1
16142: NEG
16143: PPUSH
16144: CALL_OW 101
// if mikhailStatus = 1 then
16148: LD_EXP 21
16152: PUSH
16153: LD_INT 1
16155: EQUAL
16156: IFFALSE 16176
// begin AddMedal ( Prisoner , 1 ) ;
16158: LD_STRING Prisoner
16160: PPUSH
16161: LD_INT 1
16163: PPUSH
16164: CALL_OW 101
// m3 := true ;
16168: LD_ADDR_VAR 0 5
16172: PUSH
16173: LD_INT 1
16175: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
16176: LD_EXP 21
16180: PUSH
16181: LD_INT 2
16183: EQUAL
16184: IFFALSE 16204
// begin AddMedal ( Prisoner , 2 ) ;
16186: LD_STRING Prisoner
16188: PPUSH
16189: LD_INT 2
16191: PPUSH
16192: CALL_OW 101
// m3 := true ;
16196: LD_ADDR_VAR 0 5
16200: PUSH
16201: LD_INT 1
16203: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
16204: LD_EXP 21
16208: PUSH
16209: LD_INT 3
16211: EQUAL
16212: IFFALSE 16225
// AddMedal ( Prisoner , - 2 ) ;
16214: LD_STRING Prisoner
16216: PPUSH
16217: LD_INT 2
16219: NEG
16220: PPUSH
16221: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
16225: LD_OWVAR 67
16229: PUSH
16230: LD_INT 3
16232: GREATEREQUAL
16233: PUSH
16234: LD_VAR 0 3
16238: AND
16239: PUSH
16240: LD_VAR 0 4
16244: AND
16245: PUSH
16246: LD_VAR 0 5
16250: AND
16251: IFFALSE 16263
// SetAchievementEX ( ACH_AMER , 2 ) ;
16253: LD_STRING ACH_AMER
16255: PPUSH
16256: LD_INT 2
16258: PPUSH
16259: CALL_OW 564
// GiveMedals ( MAIN ) ;
16263: LD_STRING MAIN
16265: PPUSH
16266: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
16270: LD_INT 22
16272: PUSH
16273: LD_INT 1
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 23
16282: PUSH
16283: LD_INT 1
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 21
16292: PUSH
16293: LD_INT 1
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: LIST
16304: PPUSH
16305: CALL_OW 69
16309: PPUSH
16310: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
16314: LD_EXP 1
16318: PPUSH
16319: LD_EXP 33
16323: PUSH
16324: LD_STRING JMM
16326: STR
16327: PPUSH
16328: CALL_OW 38
// if IsOK ( Bobby ) then
16332: LD_EXP 2
16336: PPUSH
16337: CALL_OW 302
16341: IFFALSE 16361
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
16343: LD_EXP 2
16347: PPUSH
16348: LD_EXP 33
16352: PUSH
16353: LD_STRING Bobby
16355: STR
16356: PPUSH
16357: CALL_OW 38
// if IsOK ( Cyrus ) then
16361: LD_EXP 3
16365: PPUSH
16366: CALL_OW 302
16370: IFFALSE 16390
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
16372: LD_EXP 3
16376: PPUSH
16377: LD_EXP 33
16381: PUSH
16382: LD_STRING Cyrus
16384: STR
16385: PPUSH
16386: CALL_OW 38
// if IsOK ( Lisa ) then
16390: LD_EXP 4
16394: PPUSH
16395: CALL_OW 302
16399: IFFALSE 16426
// begin ToLua ( enableBioCharacter(BIO_LISA) ) ;
16401: LD_STRING enableBioCharacter(BIO_LISA)
16403: PPUSH
16404: CALL_OW 559
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
16408: LD_EXP 4
16412: PPUSH
16413: LD_EXP 33
16417: PUSH
16418: LD_STRING Lisa
16420: STR
16421: PPUSH
16422: CALL_OW 38
// end ; if IsOK ( Khatam ) then
16426: LD_EXP 5
16430: PPUSH
16431: CALL_OW 302
16435: IFFALSE 16462
// begin ToLua ( enableBioCharacter(BIO_KHAT) ) ;
16437: LD_STRING enableBioCharacter(BIO_KHAT)
16439: PPUSH
16440: CALL_OW 559
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
16444: LD_EXP 5
16448: PPUSH
16449: LD_EXP 33
16453: PUSH
16454: LD_STRING Khatam
16456: STR
16457: PPUSH
16458: CALL_OW 38
// end ; if IsOK ( Brian ) then
16462: LD_EXP 6
16466: PPUSH
16467: CALL_OW 302
16471: IFFALSE 16491
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
16473: LD_EXP 6
16477: PPUSH
16478: LD_EXP 33
16482: PUSH
16483: LD_STRING Brian
16485: STR
16486: PPUSH
16487: CALL_OW 38
// if IsOk ( Jerry ) then
16491: LD_EXP 7
16495: PPUSH
16496: CALL_OW 302
16500: IFFALSE 16520
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
16502: LD_EXP 7
16506: PPUSH
16507: LD_EXP 33
16511: PUSH
16512: LD_STRING Jerry
16514: STR
16515: PPUSH
16516: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
16520: LD_EXP 21
16524: PUSH
16525: LD_INT 1
16527: EQUAL
16528: PUSH
16529: LD_EXP 8
16533: PPUSH
16534: CALL_OW 255
16538: PUSH
16539: LD_INT 1
16541: EQUAL
16542: AND
16543: PUSH
16544: LD_EXP 8
16548: PPUSH
16549: CALL_OW 302
16553: AND
16554: IFFALSE 16581
// begin ToLua ( enableBioCharacter(BIO_MICH) ) ;
16556: LD_STRING enableBioCharacter(BIO_MICH)
16558: PPUSH
16559: CALL_OW 559
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
16563: LD_EXP 8
16567: PPUSH
16568: LD_EXP 33
16572: PUSH
16573: LD_STRING Mikhail
16575: STR
16576: PPUSH
16577: CALL_OW 38
// end ; SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
16581: LD_INT 50
16583: PUSH
16584: EMPTY
16585: LIST
16586: PUSH
16587: LD_INT 22
16589: PUSH
16590: LD_INT 1
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PUSH
16597: LD_INT 21
16599: PUSH
16600: LD_INT 1
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: LIST
16611: PPUSH
16612: CALL_OW 69
16616: PUSH
16617: LD_EXP 1
16621: PUSH
16622: LD_EXP 2
16626: PUSH
16627: LD_EXP 3
16631: PUSH
16632: LD_EXP 4
16636: PUSH
16637: LD_EXP 5
16641: PUSH
16642: LD_EXP 6
16646: PUSH
16647: LD_EXP 7
16651: PUSH
16652: LD_EXP 8
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: DIFF
16667: PPUSH
16668: LD_STRING 02_other_survivors
16670: PPUSH
16671: CALL_OW 38
// YouWin ;
16675: CALL_OW 103
// end ; end_of_file end_of_file
16679: LD_VAR 0 1
16683: RET
// export globalGameSaveCounter ; every 0 0$1 do
16684: GO 16686
16686: DISABLE
// begin enable ;
16687: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
16688: LD_STRING updateTimer(
16690: PUSH
16691: LD_OWVAR 1
16695: STR
16696: PUSH
16697: LD_STRING );
16699: STR
16700: PPUSH
16701: CALL_OW 559
// end ;
16705: END
// every 0 0$1 do
16706: GO 16708
16708: DISABLE
// begin globalGameSaveCounter := 0 ;
16709: LD_ADDR_EXP 36
16713: PUSH
16714: LD_INT 0
16716: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
16717: LD_STRING setGameSaveCounter(0)
16719: PPUSH
16720: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
16724: LD_STRING initStreamRollete();
16726: PPUSH
16727: CALL_OW 559
// InitStreamMode ;
16731: CALL 18057 0 0
// DefineStreamItems ( false ) ;
16735: LD_INT 0
16737: PPUSH
16738: CALL 18521 0 1
// end ;
16742: END
// export function SOS_MapStart ( ) ; begin
16743: LD_INT 0
16745: PPUSH
// if streamModeActive then
16746: LD_EXP 37
16750: IFFALSE 16759
// DefineStreamItems ( true ) ;
16752: LD_INT 1
16754: PPUSH
16755: CALL 18521 0 1
// UpdateLuaVariables ( ) ;
16759: CALL 16776 0 0
// UpdateFactoryWaypoints ( ) ;
16763: CALL 31390 0 0
// UpdateWarehouseGatheringPoints ( ) ;
16767: CALL 31647 0 0
// end ;
16771: LD_VAR 0 1
16775: RET
// function UpdateLuaVariables ( ) ; begin
16776: LD_INT 0
16778: PPUSH
// if globalGameSaveCounter then
16779: LD_EXP 36
16783: IFFALSE 16817
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
16785: LD_ADDR_EXP 36
16789: PUSH
16790: LD_EXP 36
16794: PPUSH
16795: CALL 75457 0 1
16799: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
16800: LD_STRING setGameSaveCounter(
16802: PUSH
16803: LD_EXP 36
16807: STR
16808: PUSH
16809: LD_STRING )
16811: STR
16812: PPUSH
16813: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
16817: LD_STRING setGameDifficulty(
16819: PUSH
16820: LD_OWVAR 67
16824: STR
16825: PUSH
16826: LD_STRING )
16828: STR
16829: PPUSH
16830: CALL_OW 559
// end ;
16834: LD_VAR 0 1
16838: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16839: LD_INT 0
16841: PPUSH
// if p2 = stream_mode then
16842: LD_VAR 0 2
16846: PUSH
16847: LD_INT 100
16849: EQUAL
16850: IFFALSE 17853
// begin if not StreamModeActive then
16852: LD_EXP 37
16856: NOT
16857: IFFALSE 16867
// StreamModeActive := true ;
16859: LD_ADDR_EXP 37
16863: PUSH
16864: LD_INT 1
16866: ST_TO_ADDR
// if p3 = 0 then
16867: LD_VAR 0 3
16871: PUSH
16872: LD_INT 0
16874: EQUAL
16875: IFFALSE 16881
// InitStreamMode ;
16877: CALL 18057 0 0
// if p3 = 1 then
16881: LD_VAR 0 3
16885: PUSH
16886: LD_INT 1
16888: EQUAL
16889: IFFALSE 16899
// sRocket := true ;
16891: LD_ADDR_EXP 42
16895: PUSH
16896: LD_INT 1
16898: ST_TO_ADDR
// if p3 = 2 then
16899: LD_VAR 0 3
16903: PUSH
16904: LD_INT 2
16906: EQUAL
16907: IFFALSE 16917
// sSpeed := true ;
16909: LD_ADDR_EXP 41
16913: PUSH
16914: LD_INT 1
16916: ST_TO_ADDR
// if p3 = 3 then
16917: LD_VAR 0 3
16921: PUSH
16922: LD_INT 3
16924: EQUAL
16925: IFFALSE 16935
// sEngine := true ;
16927: LD_ADDR_EXP 43
16931: PUSH
16932: LD_INT 1
16934: ST_TO_ADDR
// if p3 = 4 then
16935: LD_VAR 0 3
16939: PUSH
16940: LD_INT 4
16942: EQUAL
16943: IFFALSE 16953
// sSpec := true ;
16945: LD_ADDR_EXP 40
16949: PUSH
16950: LD_INT 1
16952: ST_TO_ADDR
// if p3 = 5 then
16953: LD_VAR 0 3
16957: PUSH
16958: LD_INT 5
16960: EQUAL
16961: IFFALSE 16971
// sLevel := true ;
16963: LD_ADDR_EXP 44
16967: PUSH
16968: LD_INT 1
16970: ST_TO_ADDR
// if p3 = 6 then
16971: LD_VAR 0 3
16975: PUSH
16976: LD_INT 6
16978: EQUAL
16979: IFFALSE 16989
// sArmoury := true ;
16981: LD_ADDR_EXP 45
16985: PUSH
16986: LD_INT 1
16988: ST_TO_ADDR
// if p3 = 7 then
16989: LD_VAR 0 3
16993: PUSH
16994: LD_INT 7
16996: EQUAL
16997: IFFALSE 17007
// sRadar := true ;
16999: LD_ADDR_EXP 46
17003: PUSH
17004: LD_INT 1
17006: ST_TO_ADDR
// if p3 = 8 then
17007: LD_VAR 0 3
17011: PUSH
17012: LD_INT 8
17014: EQUAL
17015: IFFALSE 17025
// sBunker := true ;
17017: LD_ADDR_EXP 47
17021: PUSH
17022: LD_INT 1
17024: ST_TO_ADDR
// if p3 = 9 then
17025: LD_VAR 0 3
17029: PUSH
17030: LD_INT 9
17032: EQUAL
17033: IFFALSE 17043
// sHack := true ;
17035: LD_ADDR_EXP 48
17039: PUSH
17040: LD_INT 1
17042: ST_TO_ADDR
// if p3 = 10 then
17043: LD_VAR 0 3
17047: PUSH
17048: LD_INT 10
17050: EQUAL
17051: IFFALSE 17061
// sFire := true ;
17053: LD_ADDR_EXP 49
17057: PUSH
17058: LD_INT 1
17060: ST_TO_ADDR
// if p3 = 11 then
17061: LD_VAR 0 3
17065: PUSH
17066: LD_INT 11
17068: EQUAL
17069: IFFALSE 17079
// sRefresh := true ;
17071: LD_ADDR_EXP 50
17075: PUSH
17076: LD_INT 1
17078: ST_TO_ADDR
// if p3 = 12 then
17079: LD_VAR 0 3
17083: PUSH
17084: LD_INT 12
17086: EQUAL
17087: IFFALSE 17097
// sExp := true ;
17089: LD_ADDR_EXP 51
17093: PUSH
17094: LD_INT 1
17096: ST_TO_ADDR
// if p3 = 13 then
17097: LD_VAR 0 3
17101: PUSH
17102: LD_INT 13
17104: EQUAL
17105: IFFALSE 17115
// sDepot := true ;
17107: LD_ADDR_EXP 52
17111: PUSH
17112: LD_INT 1
17114: ST_TO_ADDR
// if p3 = 14 then
17115: LD_VAR 0 3
17119: PUSH
17120: LD_INT 14
17122: EQUAL
17123: IFFALSE 17133
// sFlag := true ;
17125: LD_ADDR_EXP 53
17129: PUSH
17130: LD_INT 1
17132: ST_TO_ADDR
// if p3 = 15 then
17133: LD_VAR 0 3
17137: PUSH
17138: LD_INT 15
17140: EQUAL
17141: IFFALSE 17151
// sKamikadze := true ;
17143: LD_ADDR_EXP 61
17147: PUSH
17148: LD_INT 1
17150: ST_TO_ADDR
// if p3 = 16 then
17151: LD_VAR 0 3
17155: PUSH
17156: LD_INT 16
17158: EQUAL
17159: IFFALSE 17169
// sTroll := true ;
17161: LD_ADDR_EXP 62
17165: PUSH
17166: LD_INT 1
17168: ST_TO_ADDR
// if p3 = 17 then
17169: LD_VAR 0 3
17173: PUSH
17174: LD_INT 17
17176: EQUAL
17177: IFFALSE 17187
// sSlow := true ;
17179: LD_ADDR_EXP 63
17183: PUSH
17184: LD_INT 1
17186: ST_TO_ADDR
// if p3 = 18 then
17187: LD_VAR 0 3
17191: PUSH
17192: LD_INT 18
17194: EQUAL
17195: IFFALSE 17205
// sLack := true ;
17197: LD_ADDR_EXP 64
17201: PUSH
17202: LD_INT 1
17204: ST_TO_ADDR
// if p3 = 19 then
17205: LD_VAR 0 3
17209: PUSH
17210: LD_INT 19
17212: EQUAL
17213: IFFALSE 17223
// sTank := true ;
17215: LD_ADDR_EXP 66
17219: PUSH
17220: LD_INT 1
17222: ST_TO_ADDR
// if p3 = 20 then
17223: LD_VAR 0 3
17227: PUSH
17228: LD_INT 20
17230: EQUAL
17231: IFFALSE 17241
// sRemote := true ;
17233: LD_ADDR_EXP 67
17237: PUSH
17238: LD_INT 1
17240: ST_TO_ADDR
// if p3 = 21 then
17241: LD_VAR 0 3
17245: PUSH
17246: LD_INT 21
17248: EQUAL
17249: IFFALSE 17259
// sPowell := true ;
17251: LD_ADDR_EXP 68
17255: PUSH
17256: LD_INT 1
17258: ST_TO_ADDR
// if p3 = 22 then
17259: LD_VAR 0 3
17263: PUSH
17264: LD_INT 22
17266: EQUAL
17267: IFFALSE 17277
// sTeleport := true ;
17269: LD_ADDR_EXP 71
17273: PUSH
17274: LD_INT 1
17276: ST_TO_ADDR
// if p3 = 23 then
17277: LD_VAR 0 3
17281: PUSH
17282: LD_INT 23
17284: EQUAL
17285: IFFALSE 17295
// sOilTower := true ;
17287: LD_ADDR_EXP 73
17291: PUSH
17292: LD_INT 1
17294: ST_TO_ADDR
// if p3 = 24 then
17295: LD_VAR 0 3
17299: PUSH
17300: LD_INT 24
17302: EQUAL
17303: IFFALSE 17313
// sShovel := true ;
17305: LD_ADDR_EXP 74
17309: PUSH
17310: LD_INT 1
17312: ST_TO_ADDR
// if p3 = 25 then
17313: LD_VAR 0 3
17317: PUSH
17318: LD_INT 25
17320: EQUAL
17321: IFFALSE 17331
// sSheik := true ;
17323: LD_ADDR_EXP 75
17327: PUSH
17328: LD_INT 1
17330: ST_TO_ADDR
// if p3 = 26 then
17331: LD_VAR 0 3
17335: PUSH
17336: LD_INT 26
17338: EQUAL
17339: IFFALSE 17349
// sEarthquake := true ;
17341: LD_ADDR_EXP 77
17345: PUSH
17346: LD_INT 1
17348: ST_TO_ADDR
// if p3 = 27 then
17349: LD_VAR 0 3
17353: PUSH
17354: LD_INT 27
17356: EQUAL
17357: IFFALSE 17367
// sAI := true ;
17359: LD_ADDR_EXP 78
17363: PUSH
17364: LD_INT 1
17366: ST_TO_ADDR
// if p3 = 28 then
17367: LD_VAR 0 3
17371: PUSH
17372: LD_INT 28
17374: EQUAL
17375: IFFALSE 17385
// sCargo := true ;
17377: LD_ADDR_EXP 81
17381: PUSH
17382: LD_INT 1
17384: ST_TO_ADDR
// if p3 = 29 then
17385: LD_VAR 0 3
17389: PUSH
17390: LD_INT 29
17392: EQUAL
17393: IFFALSE 17403
// sDLaser := true ;
17395: LD_ADDR_EXP 82
17399: PUSH
17400: LD_INT 1
17402: ST_TO_ADDR
// if p3 = 30 then
17403: LD_VAR 0 3
17407: PUSH
17408: LD_INT 30
17410: EQUAL
17411: IFFALSE 17421
// sExchange := true ;
17413: LD_ADDR_EXP 83
17417: PUSH
17418: LD_INT 1
17420: ST_TO_ADDR
// if p3 = 31 then
17421: LD_VAR 0 3
17425: PUSH
17426: LD_INT 31
17428: EQUAL
17429: IFFALSE 17439
// sFac := true ;
17431: LD_ADDR_EXP 84
17435: PUSH
17436: LD_INT 1
17438: ST_TO_ADDR
// if p3 = 32 then
17439: LD_VAR 0 3
17443: PUSH
17444: LD_INT 32
17446: EQUAL
17447: IFFALSE 17457
// sPower := true ;
17449: LD_ADDR_EXP 85
17453: PUSH
17454: LD_INT 1
17456: ST_TO_ADDR
// if p3 = 33 then
17457: LD_VAR 0 3
17461: PUSH
17462: LD_INT 33
17464: EQUAL
17465: IFFALSE 17475
// sRandom := true ;
17467: LD_ADDR_EXP 86
17471: PUSH
17472: LD_INT 1
17474: ST_TO_ADDR
// if p3 = 34 then
17475: LD_VAR 0 3
17479: PUSH
17480: LD_INT 34
17482: EQUAL
17483: IFFALSE 17493
// sShield := true ;
17485: LD_ADDR_EXP 87
17489: PUSH
17490: LD_INT 1
17492: ST_TO_ADDR
// if p3 = 35 then
17493: LD_VAR 0 3
17497: PUSH
17498: LD_INT 35
17500: EQUAL
17501: IFFALSE 17511
// sTime := true ;
17503: LD_ADDR_EXP 88
17507: PUSH
17508: LD_INT 1
17510: ST_TO_ADDR
// if p3 = 36 then
17511: LD_VAR 0 3
17515: PUSH
17516: LD_INT 36
17518: EQUAL
17519: IFFALSE 17529
// sTools := true ;
17521: LD_ADDR_EXP 89
17525: PUSH
17526: LD_INT 1
17528: ST_TO_ADDR
// if p3 = 101 then
17529: LD_VAR 0 3
17533: PUSH
17534: LD_INT 101
17536: EQUAL
17537: IFFALSE 17547
// sSold := true ;
17539: LD_ADDR_EXP 54
17543: PUSH
17544: LD_INT 1
17546: ST_TO_ADDR
// if p3 = 102 then
17547: LD_VAR 0 3
17551: PUSH
17552: LD_INT 102
17554: EQUAL
17555: IFFALSE 17565
// sDiff := true ;
17557: LD_ADDR_EXP 55
17561: PUSH
17562: LD_INT 1
17564: ST_TO_ADDR
// if p3 = 103 then
17565: LD_VAR 0 3
17569: PUSH
17570: LD_INT 103
17572: EQUAL
17573: IFFALSE 17583
// sFog := true ;
17575: LD_ADDR_EXP 58
17579: PUSH
17580: LD_INT 1
17582: ST_TO_ADDR
// if p3 = 104 then
17583: LD_VAR 0 3
17587: PUSH
17588: LD_INT 104
17590: EQUAL
17591: IFFALSE 17601
// sReset := true ;
17593: LD_ADDR_EXP 59
17597: PUSH
17598: LD_INT 1
17600: ST_TO_ADDR
// if p3 = 105 then
17601: LD_VAR 0 3
17605: PUSH
17606: LD_INT 105
17608: EQUAL
17609: IFFALSE 17619
// sSun := true ;
17611: LD_ADDR_EXP 60
17615: PUSH
17616: LD_INT 1
17618: ST_TO_ADDR
// if p3 = 106 then
17619: LD_VAR 0 3
17623: PUSH
17624: LD_INT 106
17626: EQUAL
17627: IFFALSE 17637
// sTiger := true ;
17629: LD_ADDR_EXP 56
17633: PUSH
17634: LD_INT 1
17636: ST_TO_ADDR
// if p3 = 107 then
17637: LD_VAR 0 3
17641: PUSH
17642: LD_INT 107
17644: EQUAL
17645: IFFALSE 17655
// sBomb := true ;
17647: LD_ADDR_EXP 57
17651: PUSH
17652: LD_INT 1
17654: ST_TO_ADDR
// if p3 = 108 then
17655: LD_VAR 0 3
17659: PUSH
17660: LD_INT 108
17662: EQUAL
17663: IFFALSE 17673
// sWound := true ;
17665: LD_ADDR_EXP 65
17669: PUSH
17670: LD_INT 1
17672: ST_TO_ADDR
// if p3 = 109 then
17673: LD_VAR 0 3
17677: PUSH
17678: LD_INT 109
17680: EQUAL
17681: IFFALSE 17691
// sBetray := true ;
17683: LD_ADDR_EXP 69
17687: PUSH
17688: LD_INT 1
17690: ST_TO_ADDR
// if p3 = 110 then
17691: LD_VAR 0 3
17695: PUSH
17696: LD_INT 110
17698: EQUAL
17699: IFFALSE 17709
// sContamin := true ;
17701: LD_ADDR_EXP 70
17705: PUSH
17706: LD_INT 1
17708: ST_TO_ADDR
// if p3 = 111 then
17709: LD_VAR 0 3
17713: PUSH
17714: LD_INT 111
17716: EQUAL
17717: IFFALSE 17727
// sOil := true ;
17719: LD_ADDR_EXP 72
17723: PUSH
17724: LD_INT 1
17726: ST_TO_ADDR
// if p3 = 112 then
17727: LD_VAR 0 3
17731: PUSH
17732: LD_INT 112
17734: EQUAL
17735: IFFALSE 17745
// sStu := true ;
17737: LD_ADDR_EXP 76
17741: PUSH
17742: LD_INT 1
17744: ST_TO_ADDR
// if p3 = 113 then
17745: LD_VAR 0 3
17749: PUSH
17750: LD_INT 113
17752: EQUAL
17753: IFFALSE 17763
// sBazooka := true ;
17755: LD_ADDR_EXP 79
17759: PUSH
17760: LD_INT 1
17762: ST_TO_ADDR
// if p3 = 114 then
17763: LD_VAR 0 3
17767: PUSH
17768: LD_INT 114
17770: EQUAL
17771: IFFALSE 17781
// sMortar := true ;
17773: LD_ADDR_EXP 80
17777: PUSH
17778: LD_INT 1
17780: ST_TO_ADDR
// if p3 = 115 then
17781: LD_VAR 0 3
17785: PUSH
17786: LD_INT 115
17788: EQUAL
17789: IFFALSE 17799
// sRanger := true ;
17791: LD_ADDR_EXP 90
17795: PUSH
17796: LD_INT 1
17798: ST_TO_ADDR
// if p3 = 116 then
17799: LD_VAR 0 3
17803: PUSH
17804: LD_INT 116
17806: EQUAL
17807: IFFALSE 17817
// sComputer := true ;
17809: LD_ADDR_EXP 91
17813: PUSH
17814: LD_INT 1
17816: ST_TO_ADDR
// if p3 = 117 then
17817: LD_VAR 0 3
17821: PUSH
17822: LD_INT 117
17824: EQUAL
17825: IFFALSE 17835
// s30 := true ;
17827: LD_ADDR_EXP 92
17831: PUSH
17832: LD_INT 1
17834: ST_TO_ADDR
// if p3 = 118 then
17835: LD_VAR 0 3
17839: PUSH
17840: LD_INT 118
17842: EQUAL
17843: IFFALSE 17853
// s60 := true ;
17845: LD_ADDR_EXP 93
17849: PUSH
17850: LD_INT 1
17852: ST_TO_ADDR
// end ; if p2 = hack_mode then
17853: LD_VAR 0 2
17857: PUSH
17858: LD_INT 101
17860: EQUAL
17861: IFFALSE 17989
// begin case p3 of 1 :
17863: LD_VAR 0 3
17867: PUSH
17868: LD_INT 1
17870: DOUBLE
17871: EQUAL
17872: IFTRUE 17876
17874: GO 17883
17876: POP
// hHackUnlimitedResources ; 2 :
17877: CALL 30136 0 0
17881: GO 17989
17883: LD_INT 2
17885: DOUBLE
17886: EQUAL
17887: IFTRUE 17891
17889: GO 17898
17891: POP
// hHackSetLevel10 ; 3 :
17892: CALL 30269 0 0
17896: GO 17989
17898: LD_INT 3
17900: DOUBLE
17901: EQUAL
17902: IFTRUE 17906
17904: GO 17913
17906: POP
// hHackSetLevel10YourUnits ; 4 :
17907: CALL 30354 0 0
17911: GO 17989
17913: LD_INT 4
17915: DOUBLE
17916: EQUAL
17917: IFTRUE 17921
17919: GO 17928
17921: POP
// hHackInvincible ; 5 :
17922: CALL 30802 0 0
17926: GO 17989
17928: LD_INT 5
17930: DOUBLE
17931: EQUAL
17932: IFTRUE 17936
17934: GO 17943
17936: POP
// hHackInvisible ; 6 :
17937: CALL 30913 0 0
17941: GO 17989
17943: LD_INT 6
17945: DOUBLE
17946: EQUAL
17947: IFTRUE 17951
17949: GO 17958
17951: POP
// hHackChangeYourSide ; 7 :
17952: CALL 30970 0 0
17956: GO 17989
17958: LD_INT 7
17960: DOUBLE
17961: EQUAL
17962: IFTRUE 17966
17964: GO 17973
17966: POP
// hHackChangeUnitSide ; 8 :
17967: CALL 31012 0 0
17971: GO 17989
17973: LD_INT 8
17975: DOUBLE
17976: EQUAL
17977: IFTRUE 17981
17979: GO 17988
17981: POP
// hHackFog ; end ;
17982: CALL 31113 0 0
17986: GO 17989
17988: POP
// end ; if p2 = game_save_mode then
17989: LD_VAR 0 2
17993: PUSH
17994: LD_INT 102
17996: EQUAL
17997: IFFALSE 18052
// begin if p3 = 1 then
17999: LD_VAR 0 3
18003: PUSH
18004: LD_INT 1
18006: EQUAL
18007: IFFALSE 18019
// globalGameSaveCounter := p4 ;
18009: LD_ADDR_EXP 36
18013: PUSH
18014: LD_VAR 0 4
18018: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
18019: LD_VAR 0 3
18023: PUSH
18024: LD_INT 2
18026: EQUAL
18027: PUSH
18028: LD_EXP 36
18032: AND
18033: IFFALSE 18052
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18035: LD_STRING setGameSaveCounter(
18037: PUSH
18038: LD_EXP 36
18042: STR
18043: PUSH
18044: LD_STRING )
18046: STR
18047: PPUSH
18048: CALL_OW 559
// end ; end ;
18052: LD_VAR 0 7
18056: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
18057: LD_INT 0
18059: PPUSH
// streamModeActive := false ;
18060: LD_ADDR_EXP 37
18064: PUSH
18065: LD_INT 0
18067: ST_TO_ADDR
// normalCounter := 36 ;
18068: LD_ADDR_EXP 38
18072: PUSH
18073: LD_INT 36
18075: ST_TO_ADDR
// hardcoreCounter := 18 ;
18076: LD_ADDR_EXP 39
18080: PUSH
18081: LD_INT 18
18083: ST_TO_ADDR
// sRocket := false ;
18084: LD_ADDR_EXP 42
18088: PUSH
18089: LD_INT 0
18091: ST_TO_ADDR
// sSpeed := false ;
18092: LD_ADDR_EXP 41
18096: PUSH
18097: LD_INT 0
18099: ST_TO_ADDR
// sEngine := false ;
18100: LD_ADDR_EXP 43
18104: PUSH
18105: LD_INT 0
18107: ST_TO_ADDR
// sSpec := false ;
18108: LD_ADDR_EXP 40
18112: PUSH
18113: LD_INT 0
18115: ST_TO_ADDR
// sLevel := false ;
18116: LD_ADDR_EXP 44
18120: PUSH
18121: LD_INT 0
18123: ST_TO_ADDR
// sArmoury := false ;
18124: LD_ADDR_EXP 45
18128: PUSH
18129: LD_INT 0
18131: ST_TO_ADDR
// sRadar := false ;
18132: LD_ADDR_EXP 46
18136: PUSH
18137: LD_INT 0
18139: ST_TO_ADDR
// sBunker := false ;
18140: LD_ADDR_EXP 47
18144: PUSH
18145: LD_INT 0
18147: ST_TO_ADDR
// sHack := false ;
18148: LD_ADDR_EXP 48
18152: PUSH
18153: LD_INT 0
18155: ST_TO_ADDR
// sFire := false ;
18156: LD_ADDR_EXP 49
18160: PUSH
18161: LD_INT 0
18163: ST_TO_ADDR
// sRefresh := false ;
18164: LD_ADDR_EXP 50
18168: PUSH
18169: LD_INT 0
18171: ST_TO_ADDR
// sExp := false ;
18172: LD_ADDR_EXP 51
18176: PUSH
18177: LD_INT 0
18179: ST_TO_ADDR
// sDepot := false ;
18180: LD_ADDR_EXP 52
18184: PUSH
18185: LD_INT 0
18187: ST_TO_ADDR
// sFlag := false ;
18188: LD_ADDR_EXP 53
18192: PUSH
18193: LD_INT 0
18195: ST_TO_ADDR
// sKamikadze := false ;
18196: LD_ADDR_EXP 61
18200: PUSH
18201: LD_INT 0
18203: ST_TO_ADDR
// sTroll := false ;
18204: LD_ADDR_EXP 62
18208: PUSH
18209: LD_INT 0
18211: ST_TO_ADDR
// sSlow := false ;
18212: LD_ADDR_EXP 63
18216: PUSH
18217: LD_INT 0
18219: ST_TO_ADDR
// sLack := false ;
18220: LD_ADDR_EXP 64
18224: PUSH
18225: LD_INT 0
18227: ST_TO_ADDR
// sTank := false ;
18228: LD_ADDR_EXP 66
18232: PUSH
18233: LD_INT 0
18235: ST_TO_ADDR
// sRemote := false ;
18236: LD_ADDR_EXP 67
18240: PUSH
18241: LD_INT 0
18243: ST_TO_ADDR
// sPowell := false ;
18244: LD_ADDR_EXP 68
18248: PUSH
18249: LD_INT 0
18251: ST_TO_ADDR
// sTeleport := false ;
18252: LD_ADDR_EXP 71
18256: PUSH
18257: LD_INT 0
18259: ST_TO_ADDR
// sOilTower := false ;
18260: LD_ADDR_EXP 73
18264: PUSH
18265: LD_INT 0
18267: ST_TO_ADDR
// sShovel := false ;
18268: LD_ADDR_EXP 74
18272: PUSH
18273: LD_INT 0
18275: ST_TO_ADDR
// sSheik := false ;
18276: LD_ADDR_EXP 75
18280: PUSH
18281: LD_INT 0
18283: ST_TO_ADDR
// sEarthquake := false ;
18284: LD_ADDR_EXP 77
18288: PUSH
18289: LD_INT 0
18291: ST_TO_ADDR
// sAI := false ;
18292: LD_ADDR_EXP 78
18296: PUSH
18297: LD_INT 0
18299: ST_TO_ADDR
// sCargo := false ;
18300: LD_ADDR_EXP 81
18304: PUSH
18305: LD_INT 0
18307: ST_TO_ADDR
// sDLaser := false ;
18308: LD_ADDR_EXP 82
18312: PUSH
18313: LD_INT 0
18315: ST_TO_ADDR
// sExchange := false ;
18316: LD_ADDR_EXP 83
18320: PUSH
18321: LD_INT 0
18323: ST_TO_ADDR
// sFac := false ;
18324: LD_ADDR_EXP 84
18328: PUSH
18329: LD_INT 0
18331: ST_TO_ADDR
// sPower := false ;
18332: LD_ADDR_EXP 85
18336: PUSH
18337: LD_INT 0
18339: ST_TO_ADDR
// sRandom := false ;
18340: LD_ADDR_EXP 86
18344: PUSH
18345: LD_INT 0
18347: ST_TO_ADDR
// sShield := false ;
18348: LD_ADDR_EXP 87
18352: PUSH
18353: LD_INT 0
18355: ST_TO_ADDR
// sTime := false ;
18356: LD_ADDR_EXP 88
18360: PUSH
18361: LD_INT 0
18363: ST_TO_ADDR
// sTools := false ;
18364: LD_ADDR_EXP 89
18368: PUSH
18369: LD_INT 0
18371: ST_TO_ADDR
// sSold := false ;
18372: LD_ADDR_EXP 54
18376: PUSH
18377: LD_INT 0
18379: ST_TO_ADDR
// sDiff := false ;
18380: LD_ADDR_EXP 55
18384: PUSH
18385: LD_INT 0
18387: ST_TO_ADDR
// sFog := false ;
18388: LD_ADDR_EXP 58
18392: PUSH
18393: LD_INT 0
18395: ST_TO_ADDR
// sReset := false ;
18396: LD_ADDR_EXP 59
18400: PUSH
18401: LD_INT 0
18403: ST_TO_ADDR
// sSun := false ;
18404: LD_ADDR_EXP 60
18408: PUSH
18409: LD_INT 0
18411: ST_TO_ADDR
// sTiger := false ;
18412: LD_ADDR_EXP 56
18416: PUSH
18417: LD_INT 0
18419: ST_TO_ADDR
// sBomb := false ;
18420: LD_ADDR_EXP 57
18424: PUSH
18425: LD_INT 0
18427: ST_TO_ADDR
// sWound := false ;
18428: LD_ADDR_EXP 65
18432: PUSH
18433: LD_INT 0
18435: ST_TO_ADDR
// sBetray := false ;
18436: LD_ADDR_EXP 69
18440: PUSH
18441: LD_INT 0
18443: ST_TO_ADDR
// sContamin := false ;
18444: LD_ADDR_EXP 70
18448: PUSH
18449: LD_INT 0
18451: ST_TO_ADDR
// sOil := false ;
18452: LD_ADDR_EXP 72
18456: PUSH
18457: LD_INT 0
18459: ST_TO_ADDR
// sStu := false ;
18460: LD_ADDR_EXP 76
18464: PUSH
18465: LD_INT 0
18467: ST_TO_ADDR
// sBazooka := false ;
18468: LD_ADDR_EXP 79
18472: PUSH
18473: LD_INT 0
18475: ST_TO_ADDR
// sMortar := false ;
18476: LD_ADDR_EXP 80
18480: PUSH
18481: LD_INT 0
18483: ST_TO_ADDR
// sRanger := false ;
18484: LD_ADDR_EXP 90
18488: PUSH
18489: LD_INT 0
18491: ST_TO_ADDR
// sComputer := false ;
18492: LD_ADDR_EXP 91
18496: PUSH
18497: LD_INT 0
18499: ST_TO_ADDR
// s30 := false ;
18500: LD_ADDR_EXP 92
18504: PUSH
18505: LD_INT 0
18507: ST_TO_ADDR
// s60 := false ;
18508: LD_ADDR_EXP 93
18512: PUSH
18513: LD_INT 0
18515: ST_TO_ADDR
// end ;
18516: LD_VAR 0 1
18520: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
18521: LD_INT 0
18523: PPUSH
18524: PPUSH
18525: PPUSH
18526: PPUSH
18527: PPUSH
18528: PPUSH
18529: PPUSH
// result := [ ] ;
18530: LD_ADDR_VAR 0 2
18534: PUSH
18535: EMPTY
18536: ST_TO_ADDR
// if campaign_id = 1 then
18537: LD_OWVAR 69
18541: PUSH
18542: LD_INT 1
18544: EQUAL
18545: IFFALSE 21711
// begin case mission_number of 1 :
18547: LD_OWVAR 70
18551: PUSH
18552: LD_INT 1
18554: DOUBLE
18555: EQUAL
18556: IFTRUE 18560
18558: GO 18636
18560: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18561: LD_ADDR_VAR 0 2
18565: PUSH
18566: LD_INT 2
18568: PUSH
18569: LD_INT 4
18571: PUSH
18572: LD_INT 11
18574: PUSH
18575: LD_INT 12
18577: PUSH
18578: LD_INT 15
18580: PUSH
18581: LD_INT 16
18583: PUSH
18584: LD_INT 22
18586: PUSH
18587: LD_INT 23
18589: PUSH
18590: LD_INT 26
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: PUSH
18604: LD_INT 101
18606: PUSH
18607: LD_INT 102
18609: PUSH
18610: LD_INT 106
18612: PUSH
18613: LD_INT 116
18615: PUSH
18616: LD_INT 117
18618: PUSH
18619: LD_INT 118
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: ST_TO_ADDR
18634: GO 21709
18636: LD_INT 2
18638: DOUBLE
18639: EQUAL
18640: IFTRUE 18644
18642: GO 18728
18644: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18645: LD_ADDR_VAR 0 2
18649: PUSH
18650: LD_INT 2
18652: PUSH
18653: LD_INT 4
18655: PUSH
18656: LD_INT 11
18658: PUSH
18659: LD_INT 12
18661: PUSH
18662: LD_INT 15
18664: PUSH
18665: LD_INT 16
18667: PUSH
18668: LD_INT 22
18670: PUSH
18671: LD_INT 23
18673: PUSH
18674: LD_INT 26
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 101
18690: PUSH
18691: LD_INT 102
18693: PUSH
18694: LD_INT 105
18696: PUSH
18697: LD_INT 106
18699: PUSH
18700: LD_INT 108
18702: PUSH
18703: LD_INT 116
18705: PUSH
18706: LD_INT 117
18708: PUSH
18709: LD_INT 118
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: ST_TO_ADDR
18726: GO 21709
18728: LD_INT 3
18730: DOUBLE
18731: EQUAL
18732: IFTRUE 18736
18734: GO 18824
18736: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
18737: LD_ADDR_VAR 0 2
18741: PUSH
18742: LD_INT 2
18744: PUSH
18745: LD_INT 4
18747: PUSH
18748: LD_INT 5
18750: PUSH
18751: LD_INT 11
18753: PUSH
18754: LD_INT 12
18756: PUSH
18757: LD_INT 15
18759: PUSH
18760: LD_INT 16
18762: PUSH
18763: LD_INT 22
18765: PUSH
18766: LD_INT 26
18768: PUSH
18769: LD_INT 36
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 101
18786: PUSH
18787: LD_INT 102
18789: PUSH
18790: LD_INT 105
18792: PUSH
18793: LD_INT 106
18795: PUSH
18796: LD_INT 108
18798: PUSH
18799: LD_INT 116
18801: PUSH
18802: LD_INT 117
18804: PUSH
18805: LD_INT 118
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: ST_TO_ADDR
18822: GO 21709
18824: LD_INT 4
18826: DOUBLE
18827: EQUAL
18828: IFTRUE 18832
18830: GO 18928
18832: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
18833: LD_ADDR_VAR 0 2
18837: PUSH
18838: LD_INT 2
18840: PUSH
18841: LD_INT 4
18843: PUSH
18844: LD_INT 5
18846: PUSH
18847: LD_INT 8
18849: PUSH
18850: LD_INT 11
18852: PUSH
18853: LD_INT 12
18855: PUSH
18856: LD_INT 15
18858: PUSH
18859: LD_INT 16
18861: PUSH
18862: LD_INT 22
18864: PUSH
18865: LD_INT 23
18867: PUSH
18868: LD_INT 26
18870: PUSH
18871: LD_INT 36
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 101
18890: PUSH
18891: LD_INT 102
18893: PUSH
18894: LD_INT 105
18896: PUSH
18897: LD_INT 106
18899: PUSH
18900: LD_INT 108
18902: PUSH
18903: LD_INT 116
18905: PUSH
18906: LD_INT 117
18908: PUSH
18909: LD_INT 118
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: ST_TO_ADDR
18926: GO 21709
18928: LD_INT 5
18930: DOUBLE
18931: EQUAL
18932: IFTRUE 18936
18934: GO 19048
18936: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
18937: LD_ADDR_VAR 0 2
18941: PUSH
18942: LD_INT 2
18944: PUSH
18945: LD_INT 4
18947: PUSH
18948: LD_INT 5
18950: PUSH
18951: LD_INT 6
18953: PUSH
18954: LD_INT 8
18956: PUSH
18957: LD_INT 11
18959: PUSH
18960: LD_INT 12
18962: PUSH
18963: LD_INT 15
18965: PUSH
18966: LD_INT 16
18968: PUSH
18969: LD_INT 22
18971: PUSH
18972: LD_INT 23
18974: PUSH
18975: LD_INT 25
18977: PUSH
18978: LD_INT 26
18980: PUSH
18981: LD_INT 36
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 101
19002: PUSH
19003: LD_INT 102
19005: PUSH
19006: LD_INT 105
19008: PUSH
19009: LD_INT 106
19011: PUSH
19012: LD_INT 108
19014: PUSH
19015: LD_INT 109
19017: PUSH
19018: LD_INT 112
19020: PUSH
19021: LD_INT 116
19023: PUSH
19024: LD_INT 117
19026: PUSH
19027: LD_INT 118
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: ST_TO_ADDR
19046: GO 21709
19048: LD_INT 6
19050: DOUBLE
19051: EQUAL
19052: IFTRUE 19056
19054: GO 19188
19056: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
19057: LD_ADDR_VAR 0 2
19061: PUSH
19062: LD_INT 2
19064: PUSH
19065: LD_INT 4
19067: PUSH
19068: LD_INT 5
19070: PUSH
19071: LD_INT 6
19073: PUSH
19074: LD_INT 8
19076: PUSH
19077: LD_INT 11
19079: PUSH
19080: LD_INT 12
19082: PUSH
19083: LD_INT 15
19085: PUSH
19086: LD_INT 16
19088: PUSH
19089: LD_INT 20
19091: PUSH
19092: LD_INT 21
19094: PUSH
19095: LD_INT 22
19097: PUSH
19098: LD_INT 23
19100: PUSH
19101: LD_INT 25
19103: PUSH
19104: LD_INT 26
19106: PUSH
19107: LD_INT 30
19109: PUSH
19110: LD_INT 31
19112: PUSH
19113: LD_INT 32
19115: PUSH
19116: LD_INT 36
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 101
19142: PUSH
19143: LD_INT 102
19145: PUSH
19146: LD_INT 105
19148: PUSH
19149: LD_INT 106
19151: PUSH
19152: LD_INT 108
19154: PUSH
19155: LD_INT 109
19157: PUSH
19158: LD_INT 112
19160: PUSH
19161: LD_INT 116
19163: PUSH
19164: LD_INT 117
19166: PUSH
19167: LD_INT 118
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: ST_TO_ADDR
19186: GO 21709
19188: LD_INT 7
19190: DOUBLE
19191: EQUAL
19192: IFTRUE 19196
19194: GO 19308
19196: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
19197: LD_ADDR_VAR 0 2
19201: PUSH
19202: LD_INT 2
19204: PUSH
19205: LD_INT 4
19207: PUSH
19208: LD_INT 5
19210: PUSH
19211: LD_INT 7
19213: PUSH
19214: LD_INT 11
19216: PUSH
19217: LD_INT 12
19219: PUSH
19220: LD_INT 15
19222: PUSH
19223: LD_INT 16
19225: PUSH
19226: LD_INT 20
19228: PUSH
19229: LD_INT 21
19231: PUSH
19232: LD_INT 22
19234: PUSH
19235: LD_INT 23
19237: PUSH
19238: LD_INT 25
19240: PUSH
19241: LD_INT 26
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 101
19262: PUSH
19263: LD_INT 102
19265: PUSH
19266: LD_INT 103
19268: PUSH
19269: LD_INT 105
19271: PUSH
19272: LD_INT 106
19274: PUSH
19275: LD_INT 108
19277: PUSH
19278: LD_INT 112
19280: PUSH
19281: LD_INT 116
19283: PUSH
19284: LD_INT 117
19286: PUSH
19287: LD_INT 118
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: ST_TO_ADDR
19306: GO 21709
19308: LD_INT 8
19310: DOUBLE
19311: EQUAL
19312: IFTRUE 19316
19314: GO 19456
19316: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
19317: LD_ADDR_VAR 0 2
19321: PUSH
19322: LD_INT 2
19324: PUSH
19325: LD_INT 4
19327: PUSH
19328: LD_INT 5
19330: PUSH
19331: LD_INT 6
19333: PUSH
19334: LD_INT 7
19336: PUSH
19337: LD_INT 8
19339: PUSH
19340: LD_INT 11
19342: PUSH
19343: LD_INT 12
19345: PUSH
19346: LD_INT 15
19348: PUSH
19349: LD_INT 16
19351: PUSH
19352: LD_INT 20
19354: PUSH
19355: LD_INT 21
19357: PUSH
19358: LD_INT 22
19360: PUSH
19361: LD_INT 23
19363: PUSH
19364: LD_INT 25
19366: PUSH
19367: LD_INT 26
19369: PUSH
19370: LD_INT 30
19372: PUSH
19373: LD_INT 31
19375: PUSH
19376: LD_INT 32
19378: PUSH
19379: LD_INT 36
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: PUSH
19404: LD_INT 101
19406: PUSH
19407: LD_INT 102
19409: PUSH
19410: LD_INT 103
19412: PUSH
19413: LD_INT 105
19415: PUSH
19416: LD_INT 106
19418: PUSH
19419: LD_INT 108
19421: PUSH
19422: LD_INT 109
19424: PUSH
19425: LD_INT 112
19427: PUSH
19428: LD_INT 116
19430: PUSH
19431: LD_INT 117
19433: PUSH
19434: LD_INT 118
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: ST_TO_ADDR
19454: GO 21709
19456: LD_INT 9
19458: DOUBLE
19459: EQUAL
19460: IFTRUE 19464
19462: GO 19612
19464: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
19465: LD_ADDR_VAR 0 2
19469: PUSH
19470: LD_INT 2
19472: PUSH
19473: LD_INT 4
19475: PUSH
19476: LD_INT 5
19478: PUSH
19479: LD_INT 6
19481: PUSH
19482: LD_INT 7
19484: PUSH
19485: LD_INT 8
19487: PUSH
19488: LD_INT 11
19490: PUSH
19491: LD_INT 12
19493: PUSH
19494: LD_INT 15
19496: PUSH
19497: LD_INT 16
19499: PUSH
19500: LD_INT 20
19502: PUSH
19503: LD_INT 21
19505: PUSH
19506: LD_INT 22
19508: PUSH
19509: LD_INT 23
19511: PUSH
19512: LD_INT 25
19514: PUSH
19515: LD_INT 26
19517: PUSH
19518: LD_INT 28
19520: PUSH
19521: LD_INT 30
19523: PUSH
19524: LD_INT 31
19526: PUSH
19527: LD_INT 32
19529: PUSH
19530: LD_INT 36
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 101
19558: PUSH
19559: LD_INT 102
19561: PUSH
19562: LD_INT 103
19564: PUSH
19565: LD_INT 105
19567: PUSH
19568: LD_INT 106
19570: PUSH
19571: LD_INT 108
19573: PUSH
19574: LD_INT 109
19576: PUSH
19577: LD_INT 112
19579: PUSH
19580: LD_INT 114
19582: PUSH
19583: LD_INT 116
19585: PUSH
19586: LD_INT 117
19588: PUSH
19589: LD_INT 118
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: ST_TO_ADDR
19610: GO 21709
19612: LD_INT 10
19614: DOUBLE
19615: EQUAL
19616: IFTRUE 19620
19618: GO 19816
19620: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
19621: LD_ADDR_VAR 0 2
19625: PUSH
19626: LD_INT 2
19628: PUSH
19629: LD_INT 4
19631: PUSH
19632: LD_INT 5
19634: PUSH
19635: LD_INT 6
19637: PUSH
19638: LD_INT 7
19640: PUSH
19641: LD_INT 8
19643: PUSH
19644: LD_INT 9
19646: PUSH
19647: LD_INT 10
19649: PUSH
19650: LD_INT 11
19652: PUSH
19653: LD_INT 12
19655: PUSH
19656: LD_INT 13
19658: PUSH
19659: LD_INT 14
19661: PUSH
19662: LD_INT 15
19664: PUSH
19665: LD_INT 16
19667: PUSH
19668: LD_INT 17
19670: PUSH
19671: LD_INT 18
19673: PUSH
19674: LD_INT 19
19676: PUSH
19677: LD_INT 20
19679: PUSH
19680: LD_INT 21
19682: PUSH
19683: LD_INT 22
19685: PUSH
19686: LD_INT 23
19688: PUSH
19689: LD_INT 24
19691: PUSH
19692: LD_INT 25
19694: PUSH
19695: LD_INT 26
19697: PUSH
19698: LD_INT 28
19700: PUSH
19701: LD_INT 30
19703: PUSH
19704: LD_INT 31
19706: PUSH
19707: LD_INT 32
19709: PUSH
19710: LD_INT 36
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 101
19746: PUSH
19747: LD_INT 102
19749: PUSH
19750: LD_INT 103
19752: PUSH
19753: LD_INT 104
19755: PUSH
19756: LD_INT 105
19758: PUSH
19759: LD_INT 106
19761: PUSH
19762: LD_INT 107
19764: PUSH
19765: LD_INT 108
19767: PUSH
19768: LD_INT 109
19770: PUSH
19771: LD_INT 110
19773: PUSH
19774: LD_INT 111
19776: PUSH
19777: LD_INT 112
19779: PUSH
19780: LD_INT 114
19782: PUSH
19783: LD_INT 116
19785: PUSH
19786: LD_INT 117
19788: PUSH
19789: LD_INT 118
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: ST_TO_ADDR
19814: GO 21709
19816: LD_INT 11
19818: DOUBLE
19819: EQUAL
19820: IFTRUE 19824
19822: GO 20028
19824: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
19825: LD_ADDR_VAR 0 2
19829: PUSH
19830: LD_INT 2
19832: PUSH
19833: LD_INT 3
19835: PUSH
19836: LD_INT 4
19838: PUSH
19839: LD_INT 5
19841: PUSH
19842: LD_INT 6
19844: PUSH
19845: LD_INT 7
19847: PUSH
19848: LD_INT 8
19850: PUSH
19851: LD_INT 9
19853: PUSH
19854: LD_INT 10
19856: PUSH
19857: LD_INT 11
19859: PUSH
19860: LD_INT 12
19862: PUSH
19863: LD_INT 13
19865: PUSH
19866: LD_INT 14
19868: PUSH
19869: LD_INT 15
19871: PUSH
19872: LD_INT 16
19874: PUSH
19875: LD_INT 17
19877: PUSH
19878: LD_INT 18
19880: PUSH
19881: LD_INT 19
19883: PUSH
19884: LD_INT 20
19886: PUSH
19887: LD_INT 21
19889: PUSH
19890: LD_INT 22
19892: PUSH
19893: LD_INT 23
19895: PUSH
19896: LD_INT 24
19898: PUSH
19899: LD_INT 25
19901: PUSH
19902: LD_INT 26
19904: PUSH
19905: LD_INT 28
19907: PUSH
19908: LD_INT 30
19910: PUSH
19911: LD_INT 31
19913: PUSH
19914: LD_INT 32
19916: PUSH
19917: LD_INT 34
19919: PUSH
19920: LD_INT 36
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 101
19958: PUSH
19959: LD_INT 102
19961: PUSH
19962: LD_INT 103
19964: PUSH
19965: LD_INT 104
19967: PUSH
19968: LD_INT 105
19970: PUSH
19971: LD_INT 106
19973: PUSH
19974: LD_INT 107
19976: PUSH
19977: LD_INT 108
19979: PUSH
19980: LD_INT 109
19982: PUSH
19983: LD_INT 110
19985: PUSH
19986: LD_INT 111
19988: PUSH
19989: LD_INT 112
19991: PUSH
19992: LD_INT 114
19994: PUSH
19995: LD_INT 116
19997: PUSH
19998: LD_INT 117
20000: PUSH
20001: LD_INT 118
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: ST_TO_ADDR
20026: GO 21709
20028: LD_INT 12
20030: DOUBLE
20031: EQUAL
20032: IFTRUE 20036
20034: GO 20256
20036: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
20037: LD_ADDR_VAR 0 2
20041: PUSH
20042: LD_INT 1
20044: PUSH
20045: LD_INT 2
20047: PUSH
20048: LD_INT 3
20050: PUSH
20051: LD_INT 4
20053: PUSH
20054: LD_INT 5
20056: PUSH
20057: LD_INT 6
20059: PUSH
20060: LD_INT 7
20062: PUSH
20063: LD_INT 8
20065: PUSH
20066: LD_INT 9
20068: PUSH
20069: LD_INT 10
20071: PUSH
20072: LD_INT 11
20074: PUSH
20075: LD_INT 12
20077: PUSH
20078: LD_INT 13
20080: PUSH
20081: LD_INT 14
20083: PUSH
20084: LD_INT 15
20086: PUSH
20087: LD_INT 16
20089: PUSH
20090: LD_INT 17
20092: PUSH
20093: LD_INT 18
20095: PUSH
20096: LD_INT 19
20098: PUSH
20099: LD_INT 20
20101: PUSH
20102: LD_INT 21
20104: PUSH
20105: LD_INT 22
20107: PUSH
20108: LD_INT 23
20110: PUSH
20111: LD_INT 24
20113: PUSH
20114: LD_INT 25
20116: PUSH
20117: LD_INT 26
20119: PUSH
20120: LD_INT 27
20122: PUSH
20123: LD_INT 28
20125: PUSH
20126: LD_INT 30
20128: PUSH
20129: LD_INT 31
20131: PUSH
20132: LD_INT 32
20134: PUSH
20135: LD_INT 33
20137: PUSH
20138: LD_INT 34
20140: PUSH
20141: LD_INT 36
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 101
20182: PUSH
20183: LD_INT 102
20185: PUSH
20186: LD_INT 103
20188: PUSH
20189: LD_INT 104
20191: PUSH
20192: LD_INT 105
20194: PUSH
20195: LD_INT 106
20197: PUSH
20198: LD_INT 107
20200: PUSH
20201: LD_INT 108
20203: PUSH
20204: LD_INT 109
20206: PUSH
20207: LD_INT 110
20209: PUSH
20210: LD_INT 111
20212: PUSH
20213: LD_INT 112
20215: PUSH
20216: LD_INT 113
20218: PUSH
20219: LD_INT 114
20221: PUSH
20222: LD_INT 116
20224: PUSH
20225: LD_INT 117
20227: PUSH
20228: LD_INT 118
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: ST_TO_ADDR
20254: GO 21709
20256: LD_INT 13
20258: DOUBLE
20259: EQUAL
20260: IFTRUE 20264
20262: GO 20472
20264: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20265: LD_ADDR_VAR 0 2
20269: PUSH
20270: LD_INT 1
20272: PUSH
20273: LD_INT 2
20275: PUSH
20276: LD_INT 3
20278: PUSH
20279: LD_INT 4
20281: PUSH
20282: LD_INT 5
20284: PUSH
20285: LD_INT 8
20287: PUSH
20288: LD_INT 9
20290: PUSH
20291: LD_INT 10
20293: PUSH
20294: LD_INT 11
20296: PUSH
20297: LD_INT 12
20299: PUSH
20300: LD_INT 14
20302: PUSH
20303: LD_INT 15
20305: PUSH
20306: LD_INT 16
20308: PUSH
20309: LD_INT 17
20311: PUSH
20312: LD_INT 18
20314: PUSH
20315: LD_INT 19
20317: PUSH
20318: LD_INT 20
20320: PUSH
20321: LD_INT 21
20323: PUSH
20324: LD_INT 22
20326: PUSH
20327: LD_INT 23
20329: PUSH
20330: LD_INT 24
20332: PUSH
20333: LD_INT 25
20335: PUSH
20336: LD_INT 26
20338: PUSH
20339: LD_INT 27
20341: PUSH
20342: LD_INT 28
20344: PUSH
20345: LD_INT 30
20347: PUSH
20348: LD_INT 31
20350: PUSH
20351: LD_INT 32
20353: PUSH
20354: LD_INT 33
20356: PUSH
20357: LD_INT 34
20359: PUSH
20360: LD_INT 36
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: PUSH
20396: LD_INT 101
20398: PUSH
20399: LD_INT 102
20401: PUSH
20402: LD_INT 103
20404: PUSH
20405: LD_INT 104
20407: PUSH
20408: LD_INT 105
20410: PUSH
20411: LD_INT 106
20413: PUSH
20414: LD_INT 107
20416: PUSH
20417: LD_INT 108
20419: PUSH
20420: LD_INT 109
20422: PUSH
20423: LD_INT 110
20425: PUSH
20426: LD_INT 111
20428: PUSH
20429: LD_INT 112
20431: PUSH
20432: LD_INT 113
20434: PUSH
20435: LD_INT 114
20437: PUSH
20438: LD_INT 116
20440: PUSH
20441: LD_INT 117
20443: PUSH
20444: LD_INT 118
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: ST_TO_ADDR
20470: GO 21709
20472: LD_INT 14
20474: DOUBLE
20475: EQUAL
20476: IFTRUE 20480
20478: GO 20704
20480: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20481: LD_ADDR_VAR 0 2
20485: PUSH
20486: LD_INT 1
20488: PUSH
20489: LD_INT 2
20491: PUSH
20492: LD_INT 3
20494: PUSH
20495: LD_INT 4
20497: PUSH
20498: LD_INT 5
20500: PUSH
20501: LD_INT 6
20503: PUSH
20504: LD_INT 7
20506: PUSH
20507: LD_INT 8
20509: PUSH
20510: LD_INT 9
20512: PUSH
20513: LD_INT 10
20515: PUSH
20516: LD_INT 11
20518: PUSH
20519: LD_INT 12
20521: PUSH
20522: LD_INT 13
20524: PUSH
20525: LD_INT 14
20527: PUSH
20528: LD_INT 15
20530: PUSH
20531: LD_INT 16
20533: PUSH
20534: LD_INT 17
20536: PUSH
20537: LD_INT 18
20539: PUSH
20540: LD_INT 19
20542: PUSH
20543: LD_INT 20
20545: PUSH
20546: LD_INT 21
20548: PUSH
20549: LD_INT 22
20551: PUSH
20552: LD_INT 23
20554: PUSH
20555: LD_INT 24
20557: PUSH
20558: LD_INT 25
20560: PUSH
20561: LD_INT 26
20563: PUSH
20564: LD_INT 27
20566: PUSH
20567: LD_INT 28
20569: PUSH
20570: LD_INT 29
20572: PUSH
20573: LD_INT 30
20575: PUSH
20576: LD_INT 31
20578: PUSH
20579: LD_INT 32
20581: PUSH
20582: LD_INT 33
20584: PUSH
20585: LD_INT 34
20587: PUSH
20588: LD_INT 36
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: PUSH
20628: LD_INT 101
20630: PUSH
20631: LD_INT 102
20633: PUSH
20634: LD_INT 103
20636: PUSH
20637: LD_INT 104
20639: PUSH
20640: LD_INT 105
20642: PUSH
20643: LD_INT 106
20645: PUSH
20646: LD_INT 107
20648: PUSH
20649: LD_INT 108
20651: PUSH
20652: LD_INT 109
20654: PUSH
20655: LD_INT 110
20657: PUSH
20658: LD_INT 111
20660: PUSH
20661: LD_INT 112
20663: PUSH
20664: LD_INT 113
20666: PUSH
20667: LD_INT 114
20669: PUSH
20670: LD_INT 116
20672: PUSH
20673: LD_INT 117
20675: PUSH
20676: LD_INT 118
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: ST_TO_ADDR
20702: GO 21709
20704: LD_INT 15
20706: DOUBLE
20707: EQUAL
20708: IFTRUE 20712
20710: GO 20936
20712: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
20713: LD_ADDR_VAR 0 2
20717: PUSH
20718: LD_INT 1
20720: PUSH
20721: LD_INT 2
20723: PUSH
20724: LD_INT 3
20726: PUSH
20727: LD_INT 4
20729: PUSH
20730: LD_INT 5
20732: PUSH
20733: LD_INT 6
20735: PUSH
20736: LD_INT 7
20738: PUSH
20739: LD_INT 8
20741: PUSH
20742: LD_INT 9
20744: PUSH
20745: LD_INT 10
20747: PUSH
20748: LD_INT 11
20750: PUSH
20751: LD_INT 12
20753: PUSH
20754: LD_INT 13
20756: PUSH
20757: LD_INT 14
20759: PUSH
20760: LD_INT 15
20762: PUSH
20763: LD_INT 16
20765: PUSH
20766: LD_INT 17
20768: PUSH
20769: LD_INT 18
20771: PUSH
20772: LD_INT 19
20774: PUSH
20775: LD_INT 20
20777: PUSH
20778: LD_INT 21
20780: PUSH
20781: LD_INT 22
20783: PUSH
20784: LD_INT 23
20786: PUSH
20787: LD_INT 24
20789: PUSH
20790: LD_INT 25
20792: PUSH
20793: LD_INT 26
20795: PUSH
20796: LD_INT 27
20798: PUSH
20799: LD_INT 28
20801: PUSH
20802: LD_INT 29
20804: PUSH
20805: LD_INT 30
20807: PUSH
20808: LD_INT 31
20810: PUSH
20811: LD_INT 32
20813: PUSH
20814: LD_INT 33
20816: PUSH
20817: LD_INT 34
20819: PUSH
20820: LD_INT 36
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: PUSH
20860: LD_INT 101
20862: PUSH
20863: LD_INT 102
20865: PUSH
20866: LD_INT 103
20868: PUSH
20869: LD_INT 104
20871: PUSH
20872: LD_INT 105
20874: PUSH
20875: LD_INT 106
20877: PUSH
20878: LD_INT 107
20880: PUSH
20881: LD_INT 108
20883: PUSH
20884: LD_INT 109
20886: PUSH
20887: LD_INT 110
20889: PUSH
20890: LD_INT 111
20892: PUSH
20893: LD_INT 112
20895: PUSH
20896: LD_INT 113
20898: PUSH
20899: LD_INT 114
20901: PUSH
20902: LD_INT 116
20904: PUSH
20905: LD_INT 117
20907: PUSH
20908: LD_INT 118
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: ST_TO_ADDR
20934: GO 21709
20936: LD_INT 16
20938: DOUBLE
20939: EQUAL
20940: IFTRUE 20944
20942: GO 21080
20944: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
20945: LD_ADDR_VAR 0 2
20949: PUSH
20950: LD_INT 2
20952: PUSH
20953: LD_INT 4
20955: PUSH
20956: LD_INT 5
20958: PUSH
20959: LD_INT 7
20961: PUSH
20962: LD_INT 11
20964: PUSH
20965: LD_INT 12
20967: PUSH
20968: LD_INT 15
20970: PUSH
20971: LD_INT 16
20973: PUSH
20974: LD_INT 20
20976: PUSH
20977: LD_INT 21
20979: PUSH
20980: LD_INT 22
20982: PUSH
20983: LD_INT 23
20985: PUSH
20986: LD_INT 25
20988: PUSH
20989: LD_INT 26
20991: PUSH
20992: LD_INT 30
20994: PUSH
20995: LD_INT 31
20997: PUSH
20998: LD_INT 32
21000: PUSH
21001: LD_INT 33
21003: PUSH
21004: LD_INT 34
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 101
21030: PUSH
21031: LD_INT 102
21033: PUSH
21034: LD_INT 103
21036: PUSH
21037: LD_INT 106
21039: PUSH
21040: LD_INT 108
21042: PUSH
21043: LD_INT 112
21045: PUSH
21046: LD_INT 113
21048: PUSH
21049: LD_INT 114
21051: PUSH
21052: LD_INT 116
21054: PUSH
21055: LD_INT 117
21057: PUSH
21058: LD_INT 118
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: ST_TO_ADDR
21078: GO 21709
21080: LD_INT 17
21082: DOUBLE
21083: EQUAL
21084: IFTRUE 21088
21086: GO 21312
21088: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
21089: LD_ADDR_VAR 0 2
21093: PUSH
21094: LD_INT 1
21096: PUSH
21097: LD_INT 2
21099: PUSH
21100: LD_INT 3
21102: PUSH
21103: LD_INT 4
21105: PUSH
21106: LD_INT 5
21108: PUSH
21109: LD_INT 6
21111: PUSH
21112: LD_INT 7
21114: PUSH
21115: LD_INT 8
21117: PUSH
21118: LD_INT 9
21120: PUSH
21121: LD_INT 10
21123: PUSH
21124: LD_INT 11
21126: PUSH
21127: LD_INT 12
21129: PUSH
21130: LD_INT 13
21132: PUSH
21133: LD_INT 14
21135: PUSH
21136: LD_INT 15
21138: PUSH
21139: LD_INT 16
21141: PUSH
21142: LD_INT 17
21144: PUSH
21145: LD_INT 18
21147: PUSH
21148: LD_INT 19
21150: PUSH
21151: LD_INT 20
21153: PUSH
21154: LD_INT 21
21156: PUSH
21157: LD_INT 22
21159: PUSH
21160: LD_INT 23
21162: PUSH
21163: LD_INT 24
21165: PUSH
21166: LD_INT 25
21168: PUSH
21169: LD_INT 26
21171: PUSH
21172: LD_INT 27
21174: PUSH
21175: LD_INT 28
21177: PUSH
21178: LD_INT 29
21180: PUSH
21181: LD_INT 30
21183: PUSH
21184: LD_INT 31
21186: PUSH
21187: LD_INT 32
21189: PUSH
21190: LD_INT 33
21192: PUSH
21193: LD_INT 34
21195: PUSH
21196: LD_INT 36
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 101
21238: PUSH
21239: LD_INT 102
21241: PUSH
21242: LD_INT 103
21244: PUSH
21245: LD_INT 104
21247: PUSH
21248: LD_INT 105
21250: PUSH
21251: LD_INT 106
21253: PUSH
21254: LD_INT 107
21256: PUSH
21257: LD_INT 108
21259: PUSH
21260: LD_INT 109
21262: PUSH
21263: LD_INT 110
21265: PUSH
21266: LD_INT 111
21268: PUSH
21269: LD_INT 112
21271: PUSH
21272: LD_INT 113
21274: PUSH
21275: LD_INT 114
21277: PUSH
21278: LD_INT 116
21280: PUSH
21281: LD_INT 117
21283: PUSH
21284: LD_INT 118
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: ST_TO_ADDR
21310: GO 21709
21312: LD_INT 18
21314: DOUBLE
21315: EQUAL
21316: IFTRUE 21320
21318: GO 21468
21320: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21321: LD_ADDR_VAR 0 2
21325: PUSH
21326: LD_INT 2
21328: PUSH
21329: LD_INT 4
21331: PUSH
21332: LD_INT 5
21334: PUSH
21335: LD_INT 7
21337: PUSH
21338: LD_INT 11
21340: PUSH
21341: LD_INT 12
21343: PUSH
21344: LD_INT 15
21346: PUSH
21347: LD_INT 16
21349: PUSH
21350: LD_INT 20
21352: PUSH
21353: LD_INT 21
21355: PUSH
21356: LD_INT 22
21358: PUSH
21359: LD_INT 23
21361: PUSH
21362: LD_INT 25
21364: PUSH
21365: LD_INT 26
21367: PUSH
21368: LD_INT 30
21370: PUSH
21371: LD_INT 31
21373: PUSH
21374: LD_INT 32
21376: PUSH
21377: LD_INT 33
21379: PUSH
21380: LD_INT 34
21382: PUSH
21383: LD_INT 35
21385: PUSH
21386: LD_INT 36
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 101
21414: PUSH
21415: LD_INT 102
21417: PUSH
21418: LD_INT 103
21420: PUSH
21421: LD_INT 106
21423: PUSH
21424: LD_INT 108
21426: PUSH
21427: LD_INT 112
21429: PUSH
21430: LD_INT 113
21432: PUSH
21433: LD_INT 114
21435: PUSH
21436: LD_INT 115
21438: PUSH
21439: LD_INT 116
21441: PUSH
21442: LD_INT 117
21444: PUSH
21445: LD_INT 118
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: ST_TO_ADDR
21466: GO 21709
21468: LD_INT 19
21470: DOUBLE
21471: EQUAL
21472: IFTRUE 21476
21474: GO 21708
21476: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21477: LD_ADDR_VAR 0 2
21481: PUSH
21482: LD_INT 1
21484: PUSH
21485: LD_INT 2
21487: PUSH
21488: LD_INT 3
21490: PUSH
21491: LD_INT 4
21493: PUSH
21494: LD_INT 5
21496: PUSH
21497: LD_INT 6
21499: PUSH
21500: LD_INT 7
21502: PUSH
21503: LD_INT 8
21505: PUSH
21506: LD_INT 9
21508: PUSH
21509: LD_INT 10
21511: PUSH
21512: LD_INT 11
21514: PUSH
21515: LD_INT 12
21517: PUSH
21518: LD_INT 13
21520: PUSH
21521: LD_INT 14
21523: PUSH
21524: LD_INT 15
21526: PUSH
21527: LD_INT 16
21529: PUSH
21530: LD_INT 17
21532: PUSH
21533: LD_INT 18
21535: PUSH
21536: LD_INT 19
21538: PUSH
21539: LD_INT 20
21541: PUSH
21542: LD_INT 21
21544: PUSH
21545: LD_INT 22
21547: PUSH
21548: LD_INT 23
21550: PUSH
21551: LD_INT 24
21553: PUSH
21554: LD_INT 25
21556: PUSH
21557: LD_INT 26
21559: PUSH
21560: LD_INT 27
21562: PUSH
21563: LD_INT 28
21565: PUSH
21566: LD_INT 29
21568: PUSH
21569: LD_INT 30
21571: PUSH
21572: LD_INT 31
21574: PUSH
21575: LD_INT 32
21577: PUSH
21578: LD_INT 33
21580: PUSH
21581: LD_INT 34
21583: PUSH
21584: LD_INT 35
21586: PUSH
21587: LD_INT 36
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 101
21630: PUSH
21631: LD_INT 102
21633: PUSH
21634: LD_INT 103
21636: PUSH
21637: LD_INT 104
21639: PUSH
21640: LD_INT 105
21642: PUSH
21643: LD_INT 106
21645: PUSH
21646: LD_INT 107
21648: PUSH
21649: LD_INT 108
21651: PUSH
21652: LD_INT 109
21654: PUSH
21655: LD_INT 110
21657: PUSH
21658: LD_INT 111
21660: PUSH
21661: LD_INT 112
21663: PUSH
21664: LD_INT 113
21666: PUSH
21667: LD_INT 114
21669: PUSH
21670: LD_INT 115
21672: PUSH
21673: LD_INT 116
21675: PUSH
21676: LD_INT 117
21678: PUSH
21679: LD_INT 118
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: ST_TO_ADDR
21706: GO 21709
21708: POP
// end else
21709: GO 21940
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
21711: LD_ADDR_VAR 0 2
21715: PUSH
21716: LD_INT 1
21718: PUSH
21719: LD_INT 2
21721: PUSH
21722: LD_INT 3
21724: PUSH
21725: LD_INT 4
21727: PUSH
21728: LD_INT 5
21730: PUSH
21731: LD_INT 6
21733: PUSH
21734: LD_INT 7
21736: PUSH
21737: LD_INT 8
21739: PUSH
21740: LD_INT 9
21742: PUSH
21743: LD_INT 10
21745: PUSH
21746: LD_INT 11
21748: PUSH
21749: LD_INT 12
21751: PUSH
21752: LD_INT 13
21754: PUSH
21755: LD_INT 14
21757: PUSH
21758: LD_INT 15
21760: PUSH
21761: LD_INT 16
21763: PUSH
21764: LD_INT 17
21766: PUSH
21767: LD_INT 18
21769: PUSH
21770: LD_INT 19
21772: PUSH
21773: LD_INT 20
21775: PUSH
21776: LD_INT 21
21778: PUSH
21779: LD_INT 22
21781: PUSH
21782: LD_INT 23
21784: PUSH
21785: LD_INT 24
21787: PUSH
21788: LD_INT 25
21790: PUSH
21791: LD_INT 26
21793: PUSH
21794: LD_INT 27
21796: PUSH
21797: LD_INT 28
21799: PUSH
21800: LD_INT 29
21802: PUSH
21803: LD_INT 30
21805: PUSH
21806: LD_INT 31
21808: PUSH
21809: LD_INT 32
21811: PUSH
21812: LD_INT 33
21814: PUSH
21815: LD_INT 34
21817: PUSH
21818: LD_INT 35
21820: PUSH
21821: LD_INT 36
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 101
21864: PUSH
21865: LD_INT 102
21867: PUSH
21868: LD_INT 103
21870: PUSH
21871: LD_INT 104
21873: PUSH
21874: LD_INT 105
21876: PUSH
21877: LD_INT 106
21879: PUSH
21880: LD_INT 107
21882: PUSH
21883: LD_INT 108
21885: PUSH
21886: LD_INT 109
21888: PUSH
21889: LD_INT 110
21891: PUSH
21892: LD_INT 111
21894: PUSH
21895: LD_INT 112
21897: PUSH
21898: LD_INT 113
21900: PUSH
21901: LD_INT 114
21903: PUSH
21904: LD_INT 115
21906: PUSH
21907: LD_INT 116
21909: PUSH
21910: LD_INT 117
21912: PUSH
21913: LD_INT 118
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: ST_TO_ADDR
// if result then
21940: LD_VAR 0 2
21944: IFFALSE 22730
// begin normal :=  ;
21946: LD_ADDR_VAR 0 5
21950: PUSH
21951: LD_STRING 
21953: ST_TO_ADDR
// hardcore :=  ;
21954: LD_ADDR_VAR 0 6
21958: PUSH
21959: LD_STRING 
21961: ST_TO_ADDR
// active :=  ;
21962: LD_ADDR_VAR 0 7
21966: PUSH
21967: LD_STRING 
21969: ST_TO_ADDR
// for i = 1 to normalCounter do
21970: LD_ADDR_VAR 0 8
21974: PUSH
21975: DOUBLE
21976: LD_INT 1
21978: DEC
21979: ST_TO_ADDR
21980: LD_EXP 38
21984: PUSH
21985: FOR_TO
21986: IFFALSE 22087
// begin tmp := 0 ;
21988: LD_ADDR_VAR 0 3
21992: PUSH
21993: LD_STRING 0
21995: ST_TO_ADDR
// if result [ 1 ] then
21996: LD_VAR 0 2
22000: PUSH
22001: LD_INT 1
22003: ARRAY
22004: IFFALSE 22069
// if result [ 1 ] [ 1 ] = i then
22006: LD_VAR 0 2
22010: PUSH
22011: LD_INT 1
22013: ARRAY
22014: PUSH
22015: LD_INT 1
22017: ARRAY
22018: PUSH
22019: LD_VAR 0 8
22023: EQUAL
22024: IFFALSE 22069
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22026: LD_ADDR_VAR 0 2
22030: PUSH
22031: LD_VAR 0 2
22035: PPUSH
22036: LD_INT 1
22038: PPUSH
22039: LD_VAR 0 2
22043: PUSH
22044: LD_INT 1
22046: ARRAY
22047: PPUSH
22048: LD_INT 1
22050: PPUSH
22051: CALL_OW 3
22055: PPUSH
22056: CALL_OW 1
22060: ST_TO_ADDR
// tmp := 1 ;
22061: LD_ADDR_VAR 0 3
22065: PUSH
22066: LD_STRING 1
22068: ST_TO_ADDR
// end ; normal := normal & tmp ;
22069: LD_ADDR_VAR 0 5
22073: PUSH
22074: LD_VAR 0 5
22078: PUSH
22079: LD_VAR 0 3
22083: STR
22084: ST_TO_ADDR
// end ;
22085: GO 21985
22087: POP
22088: POP
// for i = 1 to hardcoreCounter do
22089: LD_ADDR_VAR 0 8
22093: PUSH
22094: DOUBLE
22095: LD_INT 1
22097: DEC
22098: ST_TO_ADDR
22099: LD_EXP 39
22103: PUSH
22104: FOR_TO
22105: IFFALSE 22210
// begin tmp := 0 ;
22107: LD_ADDR_VAR 0 3
22111: PUSH
22112: LD_STRING 0
22114: ST_TO_ADDR
// if result [ 2 ] then
22115: LD_VAR 0 2
22119: PUSH
22120: LD_INT 2
22122: ARRAY
22123: IFFALSE 22192
// if result [ 2 ] [ 1 ] = 100 + i then
22125: LD_VAR 0 2
22129: PUSH
22130: LD_INT 2
22132: ARRAY
22133: PUSH
22134: LD_INT 1
22136: ARRAY
22137: PUSH
22138: LD_INT 100
22140: PUSH
22141: LD_VAR 0 8
22145: PLUS
22146: EQUAL
22147: IFFALSE 22192
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22149: LD_ADDR_VAR 0 2
22153: PUSH
22154: LD_VAR 0 2
22158: PPUSH
22159: LD_INT 2
22161: PPUSH
22162: LD_VAR 0 2
22166: PUSH
22167: LD_INT 2
22169: ARRAY
22170: PPUSH
22171: LD_INT 1
22173: PPUSH
22174: CALL_OW 3
22178: PPUSH
22179: CALL_OW 1
22183: ST_TO_ADDR
// tmp := 1 ;
22184: LD_ADDR_VAR 0 3
22188: PUSH
22189: LD_STRING 1
22191: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22192: LD_ADDR_VAR 0 6
22196: PUSH
22197: LD_VAR 0 6
22201: PUSH
22202: LD_VAR 0 3
22206: STR
22207: ST_TO_ADDR
// end ;
22208: GO 22104
22210: POP
22211: POP
// if isGameLoad then
22212: LD_VAR 0 1
22216: IFFALSE 22691
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
22218: LD_ADDR_VAR 0 4
22222: PUSH
22223: LD_EXP 42
22227: PUSH
22228: LD_EXP 41
22232: PUSH
22233: LD_EXP 43
22237: PUSH
22238: LD_EXP 40
22242: PUSH
22243: LD_EXP 44
22247: PUSH
22248: LD_EXP 45
22252: PUSH
22253: LD_EXP 46
22257: PUSH
22258: LD_EXP 47
22262: PUSH
22263: LD_EXP 48
22267: PUSH
22268: LD_EXP 49
22272: PUSH
22273: LD_EXP 50
22277: PUSH
22278: LD_EXP 51
22282: PUSH
22283: LD_EXP 52
22287: PUSH
22288: LD_EXP 53
22292: PUSH
22293: LD_EXP 61
22297: PUSH
22298: LD_EXP 62
22302: PUSH
22303: LD_EXP 63
22307: PUSH
22308: LD_EXP 64
22312: PUSH
22313: LD_EXP 66
22317: PUSH
22318: LD_EXP 67
22322: PUSH
22323: LD_EXP 68
22327: PUSH
22328: LD_EXP 71
22332: PUSH
22333: LD_EXP 73
22337: PUSH
22338: LD_EXP 74
22342: PUSH
22343: LD_EXP 75
22347: PUSH
22348: LD_EXP 77
22352: PUSH
22353: LD_EXP 78
22357: PUSH
22358: LD_EXP 81
22362: PUSH
22363: LD_EXP 82
22367: PUSH
22368: LD_EXP 83
22372: PUSH
22373: LD_EXP 84
22377: PUSH
22378: LD_EXP 85
22382: PUSH
22383: LD_EXP 86
22387: PUSH
22388: LD_EXP 87
22392: PUSH
22393: LD_EXP 88
22397: PUSH
22398: LD_EXP 89
22402: PUSH
22403: LD_EXP 54
22407: PUSH
22408: LD_EXP 55
22412: PUSH
22413: LD_EXP 58
22417: PUSH
22418: LD_EXP 59
22422: PUSH
22423: LD_EXP 60
22427: PUSH
22428: LD_EXP 56
22432: PUSH
22433: LD_EXP 57
22437: PUSH
22438: LD_EXP 65
22442: PUSH
22443: LD_EXP 69
22447: PUSH
22448: LD_EXP 70
22452: PUSH
22453: LD_EXP 72
22457: PUSH
22458: LD_EXP 76
22462: PUSH
22463: LD_EXP 79
22467: PUSH
22468: LD_EXP 80
22472: PUSH
22473: LD_EXP 90
22477: PUSH
22478: LD_EXP 91
22482: PUSH
22483: LD_EXP 92
22487: PUSH
22488: LD_EXP 93
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: ST_TO_ADDR
// tmp :=  ;
22549: LD_ADDR_VAR 0 3
22553: PUSH
22554: LD_STRING 
22556: ST_TO_ADDR
// for i = 1 to normalCounter do
22557: LD_ADDR_VAR 0 8
22561: PUSH
22562: DOUBLE
22563: LD_INT 1
22565: DEC
22566: ST_TO_ADDR
22567: LD_EXP 38
22571: PUSH
22572: FOR_TO
22573: IFFALSE 22609
// begin if flags [ i ] then
22575: LD_VAR 0 4
22579: PUSH
22580: LD_VAR 0 8
22584: ARRAY
22585: IFFALSE 22607
// tmp := tmp & i & ; ;
22587: LD_ADDR_VAR 0 3
22591: PUSH
22592: LD_VAR 0 3
22596: PUSH
22597: LD_VAR 0 8
22601: STR
22602: PUSH
22603: LD_STRING ;
22605: STR
22606: ST_TO_ADDR
// end ;
22607: GO 22572
22609: POP
22610: POP
// for i = 1 to hardcoreCounter do
22611: LD_ADDR_VAR 0 8
22615: PUSH
22616: DOUBLE
22617: LD_INT 1
22619: DEC
22620: ST_TO_ADDR
22621: LD_EXP 39
22625: PUSH
22626: FOR_TO
22627: IFFALSE 22673
// begin if flags [ normalCounter + i ] then
22629: LD_VAR 0 4
22633: PUSH
22634: LD_EXP 38
22638: PUSH
22639: LD_VAR 0 8
22643: PLUS
22644: ARRAY
22645: IFFALSE 22671
// tmp := tmp & ( 100 + i ) & ; ;
22647: LD_ADDR_VAR 0 3
22651: PUSH
22652: LD_VAR 0 3
22656: PUSH
22657: LD_INT 100
22659: PUSH
22660: LD_VAR 0 8
22664: PLUS
22665: STR
22666: PUSH
22667: LD_STRING ;
22669: STR
22670: ST_TO_ADDR
// end ;
22671: GO 22626
22673: POP
22674: POP
// if tmp then
22675: LD_VAR 0 3
22679: IFFALSE 22691
// active := tmp ;
22681: LD_ADDR_VAR 0 7
22685: PUSH
22686: LD_VAR 0 3
22690: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
22691: LD_STRING getStreamItemsFromMission("
22693: PUSH
22694: LD_VAR 0 5
22698: STR
22699: PUSH
22700: LD_STRING ","
22702: STR
22703: PUSH
22704: LD_VAR 0 6
22708: STR
22709: PUSH
22710: LD_STRING ","
22712: STR
22713: PUSH
22714: LD_VAR 0 7
22718: STR
22719: PUSH
22720: LD_STRING ")
22722: STR
22723: PPUSH
22724: CALL_OW 559
// end else
22728: GO 22737
// ToLua ( getStreamItemsFromMission("","","") ) ;
22730: LD_STRING getStreamItemsFromMission("","","")
22732: PPUSH
22733: CALL_OW 559
// end ;
22737: LD_VAR 0 2
22741: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22742: LD_EXP 37
22746: PUSH
22747: LD_EXP 42
22751: AND
22752: IFFALSE 22876
22754: GO 22756
22756: DISABLE
22757: LD_INT 0
22759: PPUSH
22760: PPUSH
// begin enable ;
22761: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
22762: LD_ADDR_VAR 0 2
22766: PUSH
22767: LD_INT 22
22769: PUSH
22770: LD_OWVAR 2
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: LD_INT 2
22781: PUSH
22782: LD_INT 34
22784: PUSH
22785: LD_INT 7
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 34
22794: PUSH
22795: LD_INT 45
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 34
22804: PUSH
22805: LD_INT 28
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 34
22814: PUSH
22815: LD_INT 47
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PPUSH
22833: CALL_OW 69
22837: ST_TO_ADDR
// if not tmp then
22838: LD_VAR 0 2
22842: NOT
22843: IFFALSE 22847
// exit ;
22845: GO 22876
// for i in tmp do
22847: LD_ADDR_VAR 0 1
22851: PUSH
22852: LD_VAR 0 2
22856: PUSH
22857: FOR_IN
22858: IFFALSE 22874
// begin SetLives ( i , 0 ) ;
22860: LD_VAR 0 1
22864: PPUSH
22865: LD_INT 0
22867: PPUSH
22868: CALL_OW 234
// end ;
22872: GO 22857
22874: POP
22875: POP
// end ;
22876: PPOPN 2
22878: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22879: LD_EXP 37
22883: PUSH
22884: LD_EXP 43
22888: AND
22889: IFFALSE 22973
22891: GO 22893
22893: DISABLE
22894: LD_INT 0
22896: PPUSH
22897: PPUSH
// begin enable ;
22898: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22899: LD_ADDR_VAR 0 2
22903: PUSH
22904: LD_INT 22
22906: PUSH
22907: LD_OWVAR 2
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 32
22918: PUSH
22919: LD_INT 3
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PPUSH
22930: CALL_OW 69
22934: ST_TO_ADDR
// if not tmp then
22935: LD_VAR 0 2
22939: NOT
22940: IFFALSE 22944
// exit ;
22942: GO 22973
// for i in tmp do
22944: LD_ADDR_VAR 0 1
22948: PUSH
22949: LD_VAR 0 2
22953: PUSH
22954: FOR_IN
22955: IFFALSE 22971
// begin SetLives ( i , 0 ) ;
22957: LD_VAR 0 1
22961: PPUSH
22962: LD_INT 0
22964: PPUSH
22965: CALL_OW 234
// end ;
22969: GO 22954
22971: POP
22972: POP
// end ;
22973: PPOPN 2
22975: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22976: LD_EXP 37
22980: PUSH
22981: LD_EXP 40
22985: AND
22986: IFFALSE 23079
22988: GO 22990
22990: DISABLE
22991: LD_INT 0
22993: PPUSH
// begin enable ;
22994: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22995: LD_ADDR_VAR 0 1
22999: PUSH
23000: LD_INT 22
23002: PUSH
23003: LD_OWVAR 2
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 2
23014: PUSH
23015: LD_INT 25
23017: PUSH
23018: LD_INT 5
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 25
23027: PUSH
23028: LD_INT 9
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 25
23037: PUSH
23038: LD_INT 8
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PPUSH
23055: CALL_OW 69
23059: PUSH
23060: FOR_IN
23061: IFFALSE 23077
// begin SetClass ( i , 1 ) ;
23063: LD_VAR 0 1
23067: PPUSH
23068: LD_INT 1
23070: PPUSH
23071: CALL_OW 336
// end ;
23075: GO 23060
23077: POP
23078: POP
// end ;
23079: PPOPN 1
23081: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23082: LD_EXP 37
23086: PUSH
23087: LD_EXP 41
23091: AND
23092: PUSH
23093: LD_OWVAR 65
23097: PUSH
23098: LD_INT 7
23100: LESS
23101: AND
23102: IFFALSE 23116
23104: GO 23106
23106: DISABLE
// begin enable ;
23107: ENABLE
// game_speed := 7 ;
23108: LD_ADDR_OWVAR 65
23112: PUSH
23113: LD_INT 7
23115: ST_TO_ADDR
// end ;
23116: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23117: LD_EXP 37
23121: PUSH
23122: LD_EXP 44
23126: AND
23127: IFFALSE 23329
23129: GO 23131
23131: DISABLE
23132: LD_INT 0
23134: PPUSH
23135: PPUSH
23136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23137: LD_ADDR_VAR 0 3
23141: PUSH
23142: LD_INT 81
23144: PUSH
23145: LD_OWVAR 2
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 21
23156: PUSH
23157: LD_INT 1
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PPUSH
23168: CALL_OW 69
23172: ST_TO_ADDR
// if not tmp then
23173: LD_VAR 0 3
23177: NOT
23178: IFFALSE 23182
// exit ;
23180: GO 23329
// if tmp > 5 then
23182: LD_VAR 0 3
23186: PUSH
23187: LD_INT 5
23189: GREATER
23190: IFFALSE 23202
// k := 5 else
23192: LD_ADDR_VAR 0 2
23196: PUSH
23197: LD_INT 5
23199: ST_TO_ADDR
23200: GO 23212
// k := tmp ;
23202: LD_ADDR_VAR 0 2
23206: PUSH
23207: LD_VAR 0 3
23211: ST_TO_ADDR
// for i := 1 to k do
23212: LD_ADDR_VAR 0 1
23216: PUSH
23217: DOUBLE
23218: LD_INT 1
23220: DEC
23221: ST_TO_ADDR
23222: LD_VAR 0 2
23226: PUSH
23227: FOR_TO
23228: IFFALSE 23327
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23230: LD_VAR 0 3
23234: PUSH
23235: LD_VAR 0 1
23239: ARRAY
23240: PPUSH
23241: LD_VAR 0 1
23245: PUSH
23246: LD_INT 4
23248: MOD
23249: PUSH
23250: LD_INT 1
23252: PLUS
23253: PPUSH
23254: CALL_OW 259
23258: PUSH
23259: LD_INT 10
23261: LESS
23262: IFFALSE 23325
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23264: LD_VAR 0 3
23268: PUSH
23269: LD_VAR 0 1
23273: ARRAY
23274: PPUSH
23275: LD_VAR 0 1
23279: PUSH
23280: LD_INT 4
23282: MOD
23283: PUSH
23284: LD_INT 1
23286: PLUS
23287: PPUSH
23288: LD_VAR 0 3
23292: PUSH
23293: LD_VAR 0 1
23297: ARRAY
23298: PPUSH
23299: LD_VAR 0 1
23303: PUSH
23304: LD_INT 4
23306: MOD
23307: PUSH
23308: LD_INT 1
23310: PLUS
23311: PPUSH
23312: CALL_OW 259
23316: PUSH
23317: LD_INT 1
23319: PLUS
23320: PPUSH
23321: CALL_OW 237
23325: GO 23227
23327: POP
23328: POP
// end ;
23329: PPOPN 3
23331: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23332: LD_EXP 37
23336: PUSH
23337: LD_EXP 45
23341: AND
23342: IFFALSE 23362
23344: GO 23346
23346: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23347: LD_INT 4
23349: PPUSH
23350: LD_OWVAR 2
23354: PPUSH
23355: LD_INT 0
23357: PPUSH
23358: CALL_OW 324
23362: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23363: LD_EXP 37
23367: PUSH
23368: LD_EXP 74
23372: AND
23373: IFFALSE 23393
23375: GO 23377
23377: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23378: LD_INT 19
23380: PPUSH
23381: LD_OWVAR 2
23385: PPUSH
23386: LD_INT 0
23388: PPUSH
23389: CALL_OW 324
23393: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23394: LD_EXP 37
23398: PUSH
23399: LD_EXP 46
23403: AND
23404: IFFALSE 23506
23406: GO 23408
23408: DISABLE
23409: LD_INT 0
23411: PPUSH
23412: PPUSH
// begin enable ;
23413: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23414: LD_ADDR_VAR 0 2
23418: PUSH
23419: LD_INT 22
23421: PUSH
23422: LD_OWVAR 2
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 2
23433: PUSH
23434: LD_INT 34
23436: PUSH
23437: LD_INT 11
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 34
23446: PUSH
23447: LD_INT 30
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: LIST
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PPUSH
23463: CALL_OW 69
23467: ST_TO_ADDR
// if not tmp then
23468: LD_VAR 0 2
23472: NOT
23473: IFFALSE 23477
// exit ;
23475: GO 23506
// for i in tmp do
23477: LD_ADDR_VAR 0 1
23481: PUSH
23482: LD_VAR 0 2
23486: PUSH
23487: FOR_IN
23488: IFFALSE 23504
// begin SetLives ( i , 0 ) ;
23490: LD_VAR 0 1
23494: PPUSH
23495: LD_INT 0
23497: PPUSH
23498: CALL_OW 234
// end ;
23502: GO 23487
23504: POP
23505: POP
// end ;
23506: PPOPN 2
23508: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23509: LD_EXP 37
23513: PUSH
23514: LD_EXP 47
23518: AND
23519: IFFALSE 23539
23521: GO 23523
23523: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23524: LD_INT 32
23526: PPUSH
23527: LD_OWVAR 2
23531: PPUSH
23532: LD_INT 0
23534: PPUSH
23535: CALL_OW 324
23539: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23540: LD_EXP 37
23544: PUSH
23545: LD_EXP 48
23549: AND
23550: IFFALSE 23731
23552: GO 23554
23554: DISABLE
23555: LD_INT 0
23557: PPUSH
23558: PPUSH
23559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23560: LD_ADDR_VAR 0 2
23564: PUSH
23565: LD_INT 22
23567: PUSH
23568: LD_OWVAR 2
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 33
23579: PUSH
23580: LD_INT 3
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PPUSH
23591: CALL_OW 69
23595: ST_TO_ADDR
// if not tmp then
23596: LD_VAR 0 2
23600: NOT
23601: IFFALSE 23605
// exit ;
23603: GO 23731
// side := 0 ;
23605: LD_ADDR_VAR 0 3
23609: PUSH
23610: LD_INT 0
23612: ST_TO_ADDR
// for i := 1 to 8 do
23613: LD_ADDR_VAR 0 1
23617: PUSH
23618: DOUBLE
23619: LD_INT 1
23621: DEC
23622: ST_TO_ADDR
23623: LD_INT 8
23625: PUSH
23626: FOR_TO
23627: IFFALSE 23675
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23629: LD_OWVAR 2
23633: PUSH
23634: LD_VAR 0 1
23638: NONEQUAL
23639: PUSH
23640: LD_OWVAR 2
23644: PPUSH
23645: LD_VAR 0 1
23649: PPUSH
23650: CALL_OW 81
23654: PUSH
23655: LD_INT 2
23657: EQUAL
23658: AND
23659: IFFALSE 23673
// begin side := i ;
23661: LD_ADDR_VAR 0 3
23665: PUSH
23666: LD_VAR 0 1
23670: ST_TO_ADDR
// break ;
23671: GO 23675
// end ;
23673: GO 23626
23675: POP
23676: POP
// if not side then
23677: LD_VAR 0 3
23681: NOT
23682: IFFALSE 23686
// exit ;
23684: GO 23731
// for i := 1 to tmp do
23686: LD_ADDR_VAR 0 1
23690: PUSH
23691: DOUBLE
23692: LD_INT 1
23694: DEC
23695: ST_TO_ADDR
23696: LD_VAR 0 2
23700: PUSH
23701: FOR_TO
23702: IFFALSE 23729
// if Prob ( 60 ) then
23704: LD_INT 60
23706: PPUSH
23707: CALL_OW 13
23711: IFFALSE 23727
// SetSide ( i , side ) ;
23713: LD_VAR 0 1
23717: PPUSH
23718: LD_VAR 0 3
23722: PPUSH
23723: CALL_OW 235
23727: GO 23701
23729: POP
23730: POP
// end ;
23731: PPOPN 3
23733: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23734: LD_EXP 37
23738: PUSH
23739: LD_EXP 50
23743: AND
23744: IFFALSE 23863
23746: GO 23748
23748: DISABLE
23749: LD_INT 0
23751: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23752: LD_ADDR_VAR 0 1
23756: PUSH
23757: LD_INT 22
23759: PUSH
23760: LD_OWVAR 2
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 21
23771: PUSH
23772: LD_INT 1
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 3
23781: PUSH
23782: LD_INT 23
23784: PUSH
23785: LD_INT 0
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: LIST
23800: PPUSH
23801: CALL_OW 69
23805: PUSH
23806: FOR_IN
23807: IFFALSE 23861
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23809: LD_VAR 0 1
23813: PPUSH
23814: CALL_OW 257
23818: PUSH
23819: LD_INT 1
23821: PUSH
23822: LD_INT 2
23824: PUSH
23825: LD_INT 3
23827: PUSH
23828: LD_INT 4
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: IN
23837: IFFALSE 23859
// SetClass ( un , rand ( 1 , 4 ) ) ;
23839: LD_VAR 0 1
23843: PPUSH
23844: LD_INT 1
23846: PPUSH
23847: LD_INT 4
23849: PPUSH
23850: CALL_OW 12
23854: PPUSH
23855: CALL_OW 336
23859: GO 23806
23861: POP
23862: POP
// end ;
23863: PPOPN 1
23865: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23866: LD_EXP 37
23870: PUSH
23871: LD_EXP 49
23875: AND
23876: IFFALSE 23955
23878: GO 23880
23880: DISABLE
23881: LD_INT 0
23883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23884: LD_ADDR_VAR 0 1
23888: PUSH
23889: LD_INT 22
23891: PUSH
23892: LD_OWVAR 2
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 21
23903: PUSH
23904: LD_INT 3
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PPUSH
23915: CALL_OW 69
23919: ST_TO_ADDR
// if not tmp then
23920: LD_VAR 0 1
23924: NOT
23925: IFFALSE 23929
// exit ;
23927: GO 23955
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23929: LD_VAR 0 1
23933: PUSH
23934: LD_INT 1
23936: PPUSH
23937: LD_VAR 0 1
23941: PPUSH
23942: CALL_OW 12
23946: ARRAY
23947: PPUSH
23948: LD_INT 100
23950: PPUSH
23951: CALL_OW 234
// end ;
23955: PPOPN 1
23957: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23958: LD_EXP 37
23962: PUSH
23963: LD_EXP 51
23967: AND
23968: IFFALSE 24066
23970: GO 23972
23972: DISABLE
23973: LD_INT 0
23975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23976: LD_ADDR_VAR 0 1
23980: PUSH
23981: LD_INT 22
23983: PUSH
23984: LD_OWVAR 2
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 21
23995: PUSH
23996: LD_INT 1
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PPUSH
24007: CALL_OW 69
24011: ST_TO_ADDR
// if not tmp then
24012: LD_VAR 0 1
24016: NOT
24017: IFFALSE 24021
// exit ;
24019: GO 24066
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24021: LD_VAR 0 1
24025: PUSH
24026: LD_INT 1
24028: PPUSH
24029: LD_VAR 0 1
24033: PPUSH
24034: CALL_OW 12
24038: ARRAY
24039: PPUSH
24040: LD_INT 1
24042: PPUSH
24043: LD_INT 4
24045: PPUSH
24046: CALL_OW 12
24050: PPUSH
24051: LD_INT 3000
24053: PPUSH
24054: LD_INT 9000
24056: PPUSH
24057: CALL_OW 12
24061: PPUSH
24062: CALL_OW 492
// end ;
24066: PPOPN 1
24068: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24069: LD_EXP 37
24073: PUSH
24074: LD_EXP 52
24078: AND
24079: IFFALSE 24099
24081: GO 24083
24083: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24084: LD_INT 1
24086: PPUSH
24087: LD_OWVAR 2
24091: PPUSH
24092: LD_INT 0
24094: PPUSH
24095: CALL_OW 324
24099: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24100: LD_EXP 37
24104: PUSH
24105: LD_EXP 53
24109: AND
24110: IFFALSE 24193
24112: GO 24114
24114: DISABLE
24115: LD_INT 0
24117: PPUSH
24118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24119: LD_ADDR_VAR 0 2
24123: PUSH
24124: LD_INT 22
24126: PUSH
24127: LD_OWVAR 2
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 21
24138: PUSH
24139: LD_INT 3
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PPUSH
24150: CALL_OW 69
24154: ST_TO_ADDR
// if not tmp then
24155: LD_VAR 0 2
24159: NOT
24160: IFFALSE 24164
// exit ;
24162: GO 24193
// for i in tmp do
24164: LD_ADDR_VAR 0 1
24168: PUSH
24169: LD_VAR 0 2
24173: PUSH
24174: FOR_IN
24175: IFFALSE 24191
// SetBLevel ( i , 10 ) ;
24177: LD_VAR 0 1
24181: PPUSH
24182: LD_INT 10
24184: PPUSH
24185: CALL_OW 241
24189: GO 24174
24191: POP
24192: POP
// end ;
24193: PPOPN 2
24195: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24196: LD_EXP 37
24200: PUSH
24201: LD_EXP 54
24205: AND
24206: IFFALSE 24317
24208: GO 24210
24210: DISABLE
24211: LD_INT 0
24213: PPUSH
24214: PPUSH
24215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24216: LD_ADDR_VAR 0 3
24220: PUSH
24221: LD_INT 22
24223: PUSH
24224: LD_OWVAR 2
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 25
24235: PUSH
24236: LD_INT 1
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PPUSH
24247: CALL_OW 69
24251: ST_TO_ADDR
// if not tmp then
24252: LD_VAR 0 3
24256: NOT
24257: IFFALSE 24261
// exit ;
24259: GO 24317
// un := tmp [ rand ( 1 , tmp ) ] ;
24261: LD_ADDR_VAR 0 2
24265: PUSH
24266: LD_VAR 0 3
24270: PUSH
24271: LD_INT 1
24273: PPUSH
24274: LD_VAR 0 3
24278: PPUSH
24279: CALL_OW 12
24283: ARRAY
24284: ST_TO_ADDR
// if Crawls ( un ) then
24285: LD_VAR 0 2
24289: PPUSH
24290: CALL_OW 318
24294: IFFALSE 24305
// ComWalk ( un ) ;
24296: LD_VAR 0 2
24300: PPUSH
24301: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24305: LD_VAR 0 2
24309: PPUSH
24310: LD_INT 5
24312: PPUSH
24313: CALL_OW 336
// end ;
24317: PPOPN 3
24319: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
24320: LD_EXP 37
24324: PUSH
24325: LD_EXP 55
24329: AND
24330: PUSH
24331: LD_OWVAR 67
24335: PUSH
24336: LD_INT 4
24338: LESS
24339: AND
24340: IFFALSE 24359
24342: GO 24344
24344: DISABLE
// begin Difficulty := Difficulty + 1 ;
24345: LD_ADDR_OWVAR 67
24349: PUSH
24350: LD_OWVAR 67
24354: PUSH
24355: LD_INT 1
24357: PLUS
24358: ST_TO_ADDR
// end ;
24359: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24360: LD_EXP 37
24364: PUSH
24365: LD_EXP 56
24369: AND
24370: IFFALSE 24473
24372: GO 24374
24374: DISABLE
24375: LD_INT 0
24377: PPUSH
// begin for i := 1 to 5 do
24378: LD_ADDR_VAR 0 1
24382: PUSH
24383: DOUBLE
24384: LD_INT 1
24386: DEC
24387: ST_TO_ADDR
24388: LD_INT 5
24390: PUSH
24391: FOR_TO
24392: IFFALSE 24471
// begin uc_nation := nation_nature ;
24394: LD_ADDR_OWVAR 21
24398: PUSH
24399: LD_INT 0
24401: ST_TO_ADDR
// uc_side := 0 ;
24402: LD_ADDR_OWVAR 20
24406: PUSH
24407: LD_INT 0
24409: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24410: LD_ADDR_OWVAR 29
24414: PUSH
24415: LD_INT 12
24417: PUSH
24418: LD_INT 12
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: ST_TO_ADDR
// hc_agressivity := 20 ;
24425: LD_ADDR_OWVAR 35
24429: PUSH
24430: LD_INT 20
24432: ST_TO_ADDR
// hc_class := class_tiger ;
24433: LD_ADDR_OWVAR 28
24437: PUSH
24438: LD_INT 14
24440: ST_TO_ADDR
// hc_gallery :=  ;
24441: LD_ADDR_OWVAR 33
24445: PUSH
24446: LD_STRING 
24448: ST_TO_ADDR
// hc_name :=  ;
24449: LD_ADDR_OWVAR 26
24453: PUSH
24454: LD_STRING 
24456: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24457: CALL_OW 44
24461: PPUSH
24462: LD_INT 0
24464: PPUSH
24465: CALL_OW 51
// end ;
24469: GO 24391
24471: POP
24472: POP
// end ;
24473: PPOPN 1
24475: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24476: LD_EXP 37
24480: PUSH
24481: LD_EXP 57
24485: AND
24486: IFFALSE 24495
24488: GO 24490
24490: DISABLE
// StreamSibBomb ;
24491: CALL 24496 0 0
24495: END
// export function StreamSibBomb ; var i , x , y ; begin
24496: LD_INT 0
24498: PPUSH
24499: PPUSH
24500: PPUSH
24501: PPUSH
// result := false ;
24502: LD_ADDR_VAR 0 1
24506: PUSH
24507: LD_INT 0
24509: ST_TO_ADDR
// for i := 1 to 16 do
24510: LD_ADDR_VAR 0 2
24514: PUSH
24515: DOUBLE
24516: LD_INT 1
24518: DEC
24519: ST_TO_ADDR
24520: LD_INT 16
24522: PUSH
24523: FOR_TO
24524: IFFALSE 24723
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24526: LD_ADDR_VAR 0 3
24530: PUSH
24531: LD_INT 10
24533: PUSH
24534: LD_INT 20
24536: PUSH
24537: LD_INT 30
24539: PUSH
24540: LD_INT 40
24542: PUSH
24543: LD_INT 50
24545: PUSH
24546: LD_INT 60
24548: PUSH
24549: LD_INT 70
24551: PUSH
24552: LD_INT 80
24554: PUSH
24555: LD_INT 90
24557: PUSH
24558: LD_INT 100
24560: PUSH
24561: LD_INT 110
24563: PUSH
24564: LD_INT 120
24566: PUSH
24567: LD_INT 130
24569: PUSH
24570: LD_INT 140
24572: PUSH
24573: LD_INT 150
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 1
24595: PPUSH
24596: LD_INT 15
24598: PPUSH
24599: CALL_OW 12
24603: ARRAY
24604: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24605: LD_ADDR_VAR 0 4
24609: PUSH
24610: LD_INT 10
24612: PUSH
24613: LD_INT 20
24615: PUSH
24616: LD_INT 30
24618: PUSH
24619: LD_INT 40
24621: PUSH
24622: LD_INT 50
24624: PUSH
24625: LD_INT 60
24627: PUSH
24628: LD_INT 70
24630: PUSH
24631: LD_INT 80
24633: PUSH
24634: LD_INT 90
24636: PUSH
24637: LD_INT 100
24639: PUSH
24640: LD_INT 110
24642: PUSH
24643: LD_INT 120
24645: PUSH
24646: LD_INT 130
24648: PUSH
24649: LD_INT 140
24651: PUSH
24652: LD_INT 150
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 1
24674: PPUSH
24675: LD_INT 15
24677: PPUSH
24678: CALL_OW 12
24682: ARRAY
24683: ST_TO_ADDR
// if ValidHex ( x , y ) then
24684: LD_VAR 0 3
24688: PPUSH
24689: LD_VAR 0 4
24693: PPUSH
24694: CALL_OW 488
24698: IFFALSE 24721
// begin result := [ x , y ] ;
24700: LD_ADDR_VAR 0 1
24704: PUSH
24705: LD_VAR 0 3
24709: PUSH
24710: LD_VAR 0 4
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: ST_TO_ADDR
// break ;
24719: GO 24723
// end ; end ;
24721: GO 24523
24723: POP
24724: POP
// if result then
24725: LD_VAR 0 1
24729: IFFALSE 24789
// begin ToLua ( playSibBomb() ) ;
24731: LD_STRING playSibBomb()
24733: PPUSH
24734: CALL_OW 559
// wait ( 0 0$14 ) ;
24738: LD_INT 490
24740: PPUSH
24741: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24745: LD_VAR 0 1
24749: PUSH
24750: LD_INT 1
24752: ARRAY
24753: PPUSH
24754: LD_VAR 0 1
24758: PUSH
24759: LD_INT 2
24761: ARRAY
24762: PPUSH
24763: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24767: LD_VAR 0 1
24771: PUSH
24772: LD_INT 1
24774: ARRAY
24775: PPUSH
24776: LD_VAR 0 1
24780: PUSH
24781: LD_INT 2
24783: ARRAY
24784: PPUSH
24785: CALL_OW 429
// end ; end ;
24789: LD_VAR 0 1
24793: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24794: LD_EXP 37
24798: PUSH
24799: LD_EXP 59
24803: AND
24804: IFFALSE 24816
24806: GO 24808
24808: DISABLE
// YouLost (  ) ;
24809: LD_STRING 
24811: PPUSH
24812: CALL_OW 104
24816: END
// every 0 0$1 trigger StreamModeActive and sFog do
24817: LD_EXP 37
24821: PUSH
24822: LD_EXP 58
24826: AND
24827: IFFALSE 24841
24829: GO 24831
24831: DISABLE
// FogOff ( your_side ) ;
24832: LD_OWVAR 2
24836: PPUSH
24837: CALL_OW 344
24841: END
// every 0 0$1 trigger StreamModeActive and sSun do
24842: LD_EXP 37
24846: PUSH
24847: LD_EXP 60
24851: AND
24852: IFFALSE 24880
24854: GO 24856
24856: DISABLE
// begin solar_recharge_percent := 0 ;
24857: LD_ADDR_OWVAR 79
24861: PUSH
24862: LD_INT 0
24864: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24865: LD_INT 10500
24867: PPUSH
24868: CALL_OW 67
// solar_recharge_percent := 100 ;
24872: LD_ADDR_OWVAR 79
24876: PUSH
24877: LD_INT 100
24879: ST_TO_ADDR
// end ;
24880: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24881: LD_EXP 37
24885: PUSH
24886: LD_EXP 61
24890: AND
24891: IFFALSE 25130
24893: GO 24895
24895: DISABLE
24896: LD_INT 0
24898: PPUSH
24899: PPUSH
24900: PPUSH
// begin tmp := [ ] ;
24901: LD_ADDR_VAR 0 3
24905: PUSH
24906: EMPTY
24907: ST_TO_ADDR
// for i := 1 to 6 do
24908: LD_ADDR_VAR 0 1
24912: PUSH
24913: DOUBLE
24914: LD_INT 1
24916: DEC
24917: ST_TO_ADDR
24918: LD_INT 6
24920: PUSH
24921: FOR_TO
24922: IFFALSE 25027
// begin uc_nation := nation_nature ;
24924: LD_ADDR_OWVAR 21
24928: PUSH
24929: LD_INT 0
24931: ST_TO_ADDR
// uc_side := 0 ;
24932: LD_ADDR_OWVAR 20
24936: PUSH
24937: LD_INT 0
24939: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24940: LD_ADDR_OWVAR 29
24944: PUSH
24945: LD_INT 12
24947: PUSH
24948: LD_INT 12
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: ST_TO_ADDR
// hc_agressivity := 20 ;
24955: LD_ADDR_OWVAR 35
24959: PUSH
24960: LD_INT 20
24962: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24963: LD_ADDR_OWVAR 28
24967: PUSH
24968: LD_INT 17
24970: ST_TO_ADDR
// hc_gallery :=  ;
24971: LD_ADDR_OWVAR 33
24975: PUSH
24976: LD_STRING 
24978: ST_TO_ADDR
// hc_name :=  ;
24979: LD_ADDR_OWVAR 26
24983: PUSH
24984: LD_STRING 
24986: ST_TO_ADDR
// un := CreateHuman ;
24987: LD_ADDR_VAR 0 2
24991: PUSH
24992: CALL_OW 44
24996: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24997: LD_VAR 0 2
25001: PPUSH
25002: LD_INT 1
25004: PPUSH
25005: CALL_OW 51
// tmp := tmp ^ un ;
25009: LD_ADDR_VAR 0 3
25013: PUSH
25014: LD_VAR 0 3
25018: PUSH
25019: LD_VAR 0 2
25023: ADD
25024: ST_TO_ADDR
// end ;
25025: GO 24921
25027: POP
25028: POP
// repeat wait ( 0 0$1 ) ;
25029: LD_INT 35
25031: PPUSH
25032: CALL_OW 67
// for un in tmp do
25036: LD_ADDR_VAR 0 2
25040: PUSH
25041: LD_VAR 0 3
25045: PUSH
25046: FOR_IN
25047: IFFALSE 25121
// begin if IsDead ( un ) then
25049: LD_VAR 0 2
25053: PPUSH
25054: CALL_OW 301
25058: IFFALSE 25078
// begin tmp := tmp diff un ;
25060: LD_ADDR_VAR 0 3
25064: PUSH
25065: LD_VAR 0 3
25069: PUSH
25070: LD_VAR 0 2
25074: DIFF
25075: ST_TO_ADDR
// continue ;
25076: GO 25046
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25078: LD_VAR 0 2
25082: PPUSH
25083: LD_INT 3
25085: PUSH
25086: LD_INT 22
25088: PUSH
25089: LD_INT 0
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PPUSH
25100: CALL_OW 69
25104: PPUSH
25105: LD_VAR 0 2
25109: PPUSH
25110: CALL_OW 74
25114: PPUSH
25115: CALL_OW 115
// end ;
25119: GO 25046
25121: POP
25122: POP
// until not tmp ;
25123: LD_VAR 0 3
25127: NOT
25128: IFFALSE 25029
// end ;
25130: PPOPN 3
25132: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25133: LD_EXP 37
25137: PUSH
25138: LD_EXP 62
25142: AND
25143: IFFALSE 25197
25145: GO 25147
25147: DISABLE
// begin ToLua ( displayTroll(); ) ;
25148: LD_STRING displayTroll();
25150: PPUSH
25151: CALL_OW 559
// wait ( 3 3$00 ) ;
25155: LD_INT 6300
25157: PPUSH
25158: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25162: LD_STRING hideTroll();
25164: PPUSH
25165: CALL_OW 559
// wait ( 1 1$00 ) ;
25169: LD_INT 2100
25171: PPUSH
25172: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25176: LD_STRING displayTroll();
25178: PPUSH
25179: CALL_OW 559
// wait ( 1 1$00 ) ;
25183: LD_INT 2100
25185: PPUSH
25186: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25190: LD_STRING hideTroll();
25192: PPUSH
25193: CALL_OW 559
// end ;
25197: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25198: LD_EXP 37
25202: PUSH
25203: LD_EXP 63
25207: AND
25208: IFFALSE 25271
25210: GO 25212
25212: DISABLE
25213: LD_INT 0
25215: PPUSH
// begin p := 0 ;
25216: LD_ADDR_VAR 0 1
25220: PUSH
25221: LD_INT 0
25223: ST_TO_ADDR
// repeat game_speed := 1 ;
25224: LD_ADDR_OWVAR 65
25228: PUSH
25229: LD_INT 1
25231: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25232: LD_INT 35
25234: PPUSH
25235: CALL_OW 67
// p := p + 1 ;
25239: LD_ADDR_VAR 0 1
25243: PUSH
25244: LD_VAR 0 1
25248: PUSH
25249: LD_INT 1
25251: PLUS
25252: ST_TO_ADDR
// until p >= 60 ;
25253: LD_VAR 0 1
25257: PUSH
25258: LD_INT 60
25260: GREATEREQUAL
25261: IFFALSE 25224
// game_speed := 4 ;
25263: LD_ADDR_OWVAR 65
25267: PUSH
25268: LD_INT 4
25270: ST_TO_ADDR
// end ;
25271: PPOPN 1
25273: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25274: LD_EXP 37
25278: PUSH
25279: LD_EXP 64
25283: AND
25284: IFFALSE 25430
25286: GO 25288
25288: DISABLE
25289: LD_INT 0
25291: PPUSH
25292: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25293: LD_ADDR_VAR 0 1
25297: PUSH
25298: LD_INT 22
25300: PUSH
25301: LD_OWVAR 2
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 2
25312: PUSH
25313: LD_INT 30
25315: PUSH
25316: LD_INT 0
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 30
25325: PUSH
25326: LD_INT 1
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: LIST
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PPUSH
25342: CALL_OW 69
25346: ST_TO_ADDR
// if not depot then
25347: LD_VAR 0 1
25351: NOT
25352: IFFALSE 25356
// exit ;
25354: GO 25430
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25356: LD_ADDR_VAR 0 2
25360: PUSH
25361: LD_VAR 0 1
25365: PUSH
25366: LD_INT 1
25368: PPUSH
25369: LD_VAR 0 1
25373: PPUSH
25374: CALL_OW 12
25378: ARRAY
25379: PPUSH
25380: CALL_OW 274
25384: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25385: LD_VAR 0 2
25389: PPUSH
25390: LD_INT 1
25392: PPUSH
25393: LD_INT 0
25395: PPUSH
25396: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25400: LD_VAR 0 2
25404: PPUSH
25405: LD_INT 2
25407: PPUSH
25408: LD_INT 0
25410: PPUSH
25411: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25415: LD_VAR 0 2
25419: PPUSH
25420: LD_INT 3
25422: PPUSH
25423: LD_INT 0
25425: PPUSH
25426: CALL_OW 277
// end ;
25430: PPOPN 2
25432: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25433: LD_EXP 37
25437: PUSH
25438: LD_EXP 65
25442: AND
25443: IFFALSE 25540
25445: GO 25447
25447: DISABLE
25448: LD_INT 0
25450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25451: LD_ADDR_VAR 0 1
25455: PUSH
25456: LD_INT 22
25458: PUSH
25459: LD_OWVAR 2
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 21
25470: PUSH
25471: LD_INT 1
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 3
25480: PUSH
25481: LD_INT 23
25483: PUSH
25484: LD_INT 0
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: LIST
25499: PPUSH
25500: CALL_OW 69
25504: ST_TO_ADDR
// if not tmp then
25505: LD_VAR 0 1
25509: NOT
25510: IFFALSE 25514
// exit ;
25512: GO 25540
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25514: LD_VAR 0 1
25518: PUSH
25519: LD_INT 1
25521: PPUSH
25522: LD_VAR 0 1
25526: PPUSH
25527: CALL_OW 12
25531: ARRAY
25532: PPUSH
25533: LD_INT 200
25535: PPUSH
25536: CALL_OW 234
// end ;
25540: PPOPN 1
25542: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25543: LD_EXP 37
25547: PUSH
25548: LD_EXP 66
25552: AND
25553: IFFALSE 25632
25555: GO 25557
25557: DISABLE
25558: LD_INT 0
25560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25561: LD_ADDR_VAR 0 1
25565: PUSH
25566: LD_INT 22
25568: PUSH
25569: LD_OWVAR 2
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 21
25580: PUSH
25581: LD_INT 2
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PPUSH
25592: CALL_OW 69
25596: ST_TO_ADDR
// if not tmp then
25597: LD_VAR 0 1
25601: NOT
25602: IFFALSE 25606
// exit ;
25604: GO 25632
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25606: LD_VAR 0 1
25610: PUSH
25611: LD_INT 1
25613: PPUSH
25614: LD_VAR 0 1
25618: PPUSH
25619: CALL_OW 12
25623: ARRAY
25624: PPUSH
25625: LD_INT 60
25627: PPUSH
25628: CALL_OW 234
// end ;
25632: PPOPN 1
25634: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25635: LD_EXP 37
25639: PUSH
25640: LD_EXP 67
25644: AND
25645: IFFALSE 25744
25647: GO 25649
25649: DISABLE
25650: LD_INT 0
25652: PPUSH
25653: PPUSH
// begin enable ;
25654: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25655: LD_ADDR_VAR 0 1
25659: PUSH
25660: LD_INT 22
25662: PUSH
25663: LD_OWVAR 2
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 61
25674: PUSH
25675: EMPTY
25676: LIST
25677: PUSH
25678: LD_INT 33
25680: PUSH
25681: LD_INT 2
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: LIST
25692: PPUSH
25693: CALL_OW 69
25697: ST_TO_ADDR
// if not tmp then
25698: LD_VAR 0 1
25702: NOT
25703: IFFALSE 25707
// exit ;
25705: GO 25744
// for i in tmp do
25707: LD_ADDR_VAR 0 2
25711: PUSH
25712: LD_VAR 0 1
25716: PUSH
25717: FOR_IN
25718: IFFALSE 25742
// if IsControledBy ( i ) then
25720: LD_VAR 0 2
25724: PPUSH
25725: CALL_OW 312
25729: IFFALSE 25740
// ComUnlink ( i ) ;
25731: LD_VAR 0 2
25735: PPUSH
25736: CALL_OW 136
25740: GO 25717
25742: POP
25743: POP
// end ;
25744: PPOPN 2
25746: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25747: LD_EXP 37
25751: PUSH
25752: LD_EXP 68
25756: AND
25757: IFFALSE 25897
25759: GO 25761
25761: DISABLE
25762: LD_INT 0
25764: PPUSH
25765: PPUSH
// begin ToLua ( displayPowell(); ) ;
25766: LD_STRING displayPowell();
25768: PPUSH
25769: CALL_OW 559
// uc_side := 0 ;
25773: LD_ADDR_OWVAR 20
25777: PUSH
25778: LD_INT 0
25780: ST_TO_ADDR
// uc_nation := 2 ;
25781: LD_ADDR_OWVAR 21
25785: PUSH
25786: LD_INT 2
25788: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25789: LD_ADDR_OWVAR 37
25793: PUSH
25794: LD_INT 14
25796: ST_TO_ADDR
// vc_engine := engine_siberite ;
25797: LD_ADDR_OWVAR 39
25801: PUSH
25802: LD_INT 3
25804: ST_TO_ADDR
// vc_control := control_apeman ;
25805: LD_ADDR_OWVAR 38
25809: PUSH
25810: LD_INT 5
25812: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25813: LD_ADDR_OWVAR 40
25817: PUSH
25818: LD_INT 29
25820: ST_TO_ADDR
// un := CreateVehicle ;
25821: LD_ADDR_VAR 0 2
25825: PUSH
25826: CALL_OW 45
25830: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25831: LD_VAR 0 2
25835: PPUSH
25836: LD_INT 1
25838: PPUSH
25839: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25843: LD_INT 35
25845: PPUSH
25846: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25850: LD_VAR 0 2
25854: PPUSH
25855: LD_INT 22
25857: PUSH
25858: LD_OWVAR 2
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PPUSH
25867: CALL_OW 69
25871: PPUSH
25872: LD_VAR 0 2
25876: PPUSH
25877: CALL_OW 74
25881: PPUSH
25882: CALL_OW 115
// until IsDead ( un ) ;
25886: LD_VAR 0 2
25890: PPUSH
25891: CALL_OW 301
25895: IFFALSE 25843
// end ;
25897: PPOPN 2
25899: END
// every 0 0$1 trigger StreamModeActive and sStu do
25900: LD_EXP 37
25904: PUSH
25905: LD_EXP 76
25909: AND
25910: IFFALSE 25926
25912: GO 25914
25914: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25915: LD_STRING displayStucuk();
25917: PPUSH
25918: CALL_OW 559
// ResetFog ;
25922: CALL_OW 335
// end ;
25926: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25927: LD_EXP 37
25931: PUSH
25932: LD_EXP 69
25936: AND
25937: IFFALSE 26078
25939: GO 25941
25941: DISABLE
25942: LD_INT 0
25944: PPUSH
25945: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25946: LD_ADDR_VAR 0 2
25950: PUSH
25951: LD_INT 22
25953: PUSH
25954: LD_OWVAR 2
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 21
25965: PUSH
25966: LD_INT 1
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PPUSH
25977: CALL_OW 69
25981: ST_TO_ADDR
// if not tmp then
25982: LD_VAR 0 2
25986: NOT
25987: IFFALSE 25991
// exit ;
25989: GO 26078
// un := tmp [ rand ( 1 , tmp ) ] ;
25991: LD_ADDR_VAR 0 1
25995: PUSH
25996: LD_VAR 0 2
26000: PUSH
26001: LD_INT 1
26003: PPUSH
26004: LD_VAR 0 2
26008: PPUSH
26009: CALL_OW 12
26013: ARRAY
26014: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26015: LD_VAR 0 1
26019: PPUSH
26020: LD_INT 0
26022: PPUSH
26023: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26027: LD_VAR 0 1
26031: PPUSH
26032: LD_OWVAR 3
26036: PUSH
26037: LD_VAR 0 1
26041: DIFF
26042: PPUSH
26043: LD_VAR 0 1
26047: PPUSH
26048: CALL_OW 74
26052: PPUSH
26053: CALL_OW 115
// wait ( 0 0$20 ) ;
26057: LD_INT 700
26059: PPUSH
26060: CALL_OW 67
// SetSide ( un , your_side ) ;
26064: LD_VAR 0 1
26068: PPUSH
26069: LD_OWVAR 2
26073: PPUSH
26074: CALL_OW 235
// end ;
26078: PPOPN 2
26080: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26081: LD_EXP 37
26085: PUSH
26086: LD_EXP 70
26090: AND
26091: IFFALSE 26197
26093: GO 26095
26095: DISABLE
26096: LD_INT 0
26098: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26099: LD_ADDR_VAR 0 1
26103: PUSH
26104: LD_INT 22
26106: PUSH
26107: LD_OWVAR 2
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 2
26118: PUSH
26119: LD_INT 30
26121: PUSH
26122: LD_INT 0
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 30
26131: PUSH
26132: LD_INT 1
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: LIST
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PPUSH
26148: CALL_OW 69
26152: ST_TO_ADDR
// if not depot then
26153: LD_VAR 0 1
26157: NOT
26158: IFFALSE 26162
// exit ;
26160: GO 26197
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26162: LD_VAR 0 1
26166: PUSH
26167: LD_INT 1
26169: ARRAY
26170: PPUSH
26171: CALL_OW 250
26175: PPUSH
26176: LD_VAR 0 1
26180: PUSH
26181: LD_INT 1
26183: ARRAY
26184: PPUSH
26185: CALL_OW 251
26189: PPUSH
26190: LD_INT 70
26192: PPUSH
26193: CALL_OW 495
// end ;
26197: PPOPN 1
26199: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26200: LD_EXP 37
26204: PUSH
26205: LD_EXP 71
26209: AND
26210: IFFALSE 26421
26212: GO 26214
26214: DISABLE
26215: LD_INT 0
26217: PPUSH
26218: PPUSH
26219: PPUSH
26220: PPUSH
26221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26222: LD_ADDR_VAR 0 5
26226: PUSH
26227: LD_INT 22
26229: PUSH
26230: LD_OWVAR 2
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 21
26241: PUSH
26242: LD_INT 1
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PPUSH
26253: CALL_OW 69
26257: ST_TO_ADDR
// if not tmp then
26258: LD_VAR 0 5
26262: NOT
26263: IFFALSE 26267
// exit ;
26265: GO 26421
// for i in tmp do
26267: LD_ADDR_VAR 0 1
26271: PUSH
26272: LD_VAR 0 5
26276: PUSH
26277: FOR_IN
26278: IFFALSE 26419
// begin d := rand ( 0 , 5 ) ;
26280: LD_ADDR_VAR 0 4
26284: PUSH
26285: LD_INT 0
26287: PPUSH
26288: LD_INT 5
26290: PPUSH
26291: CALL_OW 12
26295: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26296: LD_ADDR_VAR 0 2
26300: PUSH
26301: LD_VAR 0 1
26305: PPUSH
26306: CALL_OW 250
26310: PPUSH
26311: LD_VAR 0 4
26315: PPUSH
26316: LD_INT 3
26318: PPUSH
26319: LD_INT 12
26321: PPUSH
26322: CALL_OW 12
26326: PPUSH
26327: CALL_OW 272
26331: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26332: LD_ADDR_VAR 0 3
26336: PUSH
26337: LD_VAR 0 1
26341: PPUSH
26342: CALL_OW 251
26346: PPUSH
26347: LD_VAR 0 4
26351: PPUSH
26352: LD_INT 3
26354: PPUSH
26355: LD_INT 12
26357: PPUSH
26358: CALL_OW 12
26362: PPUSH
26363: CALL_OW 273
26367: ST_TO_ADDR
// if ValidHex ( x , y ) then
26368: LD_VAR 0 2
26372: PPUSH
26373: LD_VAR 0 3
26377: PPUSH
26378: CALL_OW 488
26382: IFFALSE 26417
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26384: LD_VAR 0 1
26388: PPUSH
26389: LD_VAR 0 2
26393: PPUSH
26394: LD_VAR 0 3
26398: PPUSH
26399: LD_INT 3
26401: PPUSH
26402: LD_INT 6
26404: PPUSH
26405: CALL_OW 12
26409: PPUSH
26410: LD_INT 1
26412: PPUSH
26413: CALL_OW 483
// end ;
26417: GO 26277
26419: POP
26420: POP
// end ;
26421: PPOPN 5
26423: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26424: LD_EXP 37
26428: PUSH
26429: LD_EXP 72
26433: AND
26434: IFFALSE 26528
26436: GO 26438
26438: DISABLE
26439: LD_INT 0
26441: PPUSH
26442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26443: LD_ADDR_VAR 0 2
26447: PUSH
26448: LD_INT 22
26450: PUSH
26451: LD_OWVAR 2
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 32
26462: PUSH
26463: LD_INT 1
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 21
26472: PUSH
26473: LD_INT 2
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: LIST
26484: PPUSH
26485: CALL_OW 69
26489: ST_TO_ADDR
// if not tmp then
26490: LD_VAR 0 2
26494: NOT
26495: IFFALSE 26499
// exit ;
26497: GO 26528
// for i in tmp do
26499: LD_ADDR_VAR 0 1
26503: PUSH
26504: LD_VAR 0 2
26508: PUSH
26509: FOR_IN
26510: IFFALSE 26526
// SetFuel ( i , 0 ) ;
26512: LD_VAR 0 1
26516: PPUSH
26517: LD_INT 0
26519: PPUSH
26520: CALL_OW 240
26524: GO 26509
26526: POP
26527: POP
// end ;
26528: PPOPN 2
26530: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26531: LD_EXP 37
26535: PUSH
26536: LD_EXP 73
26540: AND
26541: IFFALSE 26607
26543: GO 26545
26545: DISABLE
26546: LD_INT 0
26548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26549: LD_ADDR_VAR 0 1
26553: PUSH
26554: LD_INT 22
26556: PUSH
26557: LD_OWVAR 2
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 30
26568: PUSH
26569: LD_INT 29
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PPUSH
26580: CALL_OW 69
26584: ST_TO_ADDR
// if not tmp then
26585: LD_VAR 0 1
26589: NOT
26590: IFFALSE 26594
// exit ;
26592: GO 26607
// DestroyUnit ( tmp [ 1 ] ) ;
26594: LD_VAR 0 1
26598: PUSH
26599: LD_INT 1
26601: ARRAY
26602: PPUSH
26603: CALL_OW 65
// end ;
26607: PPOPN 1
26609: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26610: LD_EXP 37
26614: PUSH
26615: LD_EXP 75
26619: AND
26620: IFFALSE 26749
26622: GO 26624
26624: DISABLE
26625: LD_INT 0
26627: PPUSH
// begin uc_side := 0 ;
26628: LD_ADDR_OWVAR 20
26632: PUSH
26633: LD_INT 0
26635: ST_TO_ADDR
// uc_nation := nation_arabian ;
26636: LD_ADDR_OWVAR 21
26640: PUSH
26641: LD_INT 2
26643: ST_TO_ADDR
// hc_gallery :=  ;
26644: LD_ADDR_OWVAR 33
26648: PUSH
26649: LD_STRING 
26651: ST_TO_ADDR
// hc_name :=  ;
26652: LD_ADDR_OWVAR 26
26656: PUSH
26657: LD_STRING 
26659: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26660: LD_INT 1
26662: PPUSH
26663: LD_INT 11
26665: PPUSH
26666: LD_INT 10
26668: PPUSH
26669: CALL_OW 380
// un := CreateHuman ;
26673: LD_ADDR_VAR 0 1
26677: PUSH
26678: CALL_OW 44
26682: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26683: LD_VAR 0 1
26687: PPUSH
26688: LD_INT 1
26690: PPUSH
26691: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26695: LD_INT 35
26697: PPUSH
26698: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26702: LD_VAR 0 1
26706: PPUSH
26707: LD_INT 22
26709: PUSH
26710: LD_OWVAR 2
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PPUSH
26719: CALL_OW 69
26723: PPUSH
26724: LD_VAR 0 1
26728: PPUSH
26729: CALL_OW 74
26733: PPUSH
26734: CALL_OW 115
// until IsDead ( un ) ;
26738: LD_VAR 0 1
26742: PPUSH
26743: CALL_OW 301
26747: IFFALSE 26695
// end ;
26749: PPOPN 1
26751: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26752: LD_EXP 37
26756: PUSH
26757: LD_EXP 77
26761: AND
26762: IFFALSE 26774
26764: GO 26766
26766: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26767: LD_STRING earthquake(getX(game), 0, 32)
26769: PPUSH
26770: CALL_OW 559
26774: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26775: LD_EXP 37
26779: PUSH
26780: LD_EXP 78
26784: AND
26785: IFFALSE 26876
26787: GO 26789
26789: DISABLE
26790: LD_INT 0
26792: PPUSH
// begin enable ;
26793: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26794: LD_ADDR_VAR 0 1
26798: PUSH
26799: LD_INT 22
26801: PUSH
26802: LD_OWVAR 2
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 21
26813: PUSH
26814: LD_INT 2
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 33
26823: PUSH
26824: LD_INT 3
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: LIST
26835: PPUSH
26836: CALL_OW 69
26840: ST_TO_ADDR
// if not tmp then
26841: LD_VAR 0 1
26845: NOT
26846: IFFALSE 26850
// exit ;
26848: GO 26876
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26850: LD_VAR 0 1
26854: PUSH
26855: LD_INT 1
26857: PPUSH
26858: LD_VAR 0 1
26862: PPUSH
26863: CALL_OW 12
26867: ARRAY
26868: PPUSH
26869: LD_INT 1
26871: PPUSH
26872: CALL_OW 234
// end ;
26876: PPOPN 1
26878: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26879: LD_EXP 37
26883: PUSH
26884: LD_EXP 79
26888: AND
26889: IFFALSE 27030
26891: GO 26893
26893: DISABLE
26894: LD_INT 0
26896: PPUSH
26897: PPUSH
26898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26899: LD_ADDR_VAR 0 3
26903: PUSH
26904: LD_INT 22
26906: PUSH
26907: LD_OWVAR 2
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 25
26918: PUSH
26919: LD_INT 1
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PPUSH
26930: CALL_OW 69
26934: ST_TO_ADDR
// if not tmp then
26935: LD_VAR 0 3
26939: NOT
26940: IFFALSE 26944
// exit ;
26942: GO 27030
// un := tmp [ rand ( 1 , tmp ) ] ;
26944: LD_ADDR_VAR 0 2
26948: PUSH
26949: LD_VAR 0 3
26953: PUSH
26954: LD_INT 1
26956: PPUSH
26957: LD_VAR 0 3
26961: PPUSH
26962: CALL_OW 12
26966: ARRAY
26967: ST_TO_ADDR
// if Crawls ( un ) then
26968: LD_VAR 0 2
26972: PPUSH
26973: CALL_OW 318
26977: IFFALSE 26988
// ComWalk ( un ) ;
26979: LD_VAR 0 2
26983: PPUSH
26984: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26988: LD_VAR 0 2
26992: PPUSH
26993: LD_INT 9
26995: PPUSH
26996: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27000: LD_INT 28
27002: PPUSH
27003: LD_OWVAR 2
27007: PPUSH
27008: LD_INT 2
27010: PPUSH
27011: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27015: LD_INT 29
27017: PPUSH
27018: LD_OWVAR 2
27022: PPUSH
27023: LD_INT 2
27025: PPUSH
27026: CALL_OW 322
// end ;
27030: PPOPN 3
27032: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27033: LD_EXP 37
27037: PUSH
27038: LD_EXP 80
27042: AND
27043: IFFALSE 27154
27045: GO 27047
27047: DISABLE
27048: LD_INT 0
27050: PPUSH
27051: PPUSH
27052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27053: LD_ADDR_VAR 0 3
27057: PUSH
27058: LD_INT 22
27060: PUSH
27061: LD_OWVAR 2
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 25
27072: PUSH
27073: LD_INT 1
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PPUSH
27084: CALL_OW 69
27088: ST_TO_ADDR
// if not tmp then
27089: LD_VAR 0 3
27093: NOT
27094: IFFALSE 27098
// exit ;
27096: GO 27154
// un := tmp [ rand ( 1 , tmp ) ] ;
27098: LD_ADDR_VAR 0 2
27102: PUSH
27103: LD_VAR 0 3
27107: PUSH
27108: LD_INT 1
27110: PPUSH
27111: LD_VAR 0 3
27115: PPUSH
27116: CALL_OW 12
27120: ARRAY
27121: ST_TO_ADDR
// if Crawls ( un ) then
27122: LD_VAR 0 2
27126: PPUSH
27127: CALL_OW 318
27131: IFFALSE 27142
// ComWalk ( un ) ;
27133: LD_VAR 0 2
27137: PPUSH
27138: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27142: LD_VAR 0 2
27146: PPUSH
27147: LD_INT 8
27149: PPUSH
27150: CALL_OW 336
// end ;
27154: PPOPN 3
27156: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27157: LD_EXP 37
27161: PUSH
27162: LD_EXP 81
27166: AND
27167: IFFALSE 27311
27169: GO 27171
27171: DISABLE
27172: LD_INT 0
27174: PPUSH
27175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27176: LD_ADDR_VAR 0 2
27180: PUSH
27181: LD_INT 22
27183: PUSH
27184: LD_OWVAR 2
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 21
27195: PUSH
27196: LD_INT 2
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 2
27205: PUSH
27206: LD_INT 34
27208: PUSH
27209: LD_INT 12
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 34
27218: PUSH
27219: LD_INT 51
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 34
27228: PUSH
27229: LD_INT 32
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: LIST
27246: PPUSH
27247: CALL_OW 69
27251: ST_TO_ADDR
// if not tmp then
27252: LD_VAR 0 2
27256: NOT
27257: IFFALSE 27261
// exit ;
27259: GO 27311
// for i in tmp do
27261: LD_ADDR_VAR 0 1
27265: PUSH
27266: LD_VAR 0 2
27270: PUSH
27271: FOR_IN
27272: IFFALSE 27309
// if GetCargo ( i , mat_artifact ) = 0 then
27274: LD_VAR 0 1
27278: PPUSH
27279: LD_INT 4
27281: PPUSH
27282: CALL_OW 289
27286: PUSH
27287: LD_INT 0
27289: EQUAL
27290: IFFALSE 27307
// SetCargo ( i , mat_siberit , 100 ) ;
27292: LD_VAR 0 1
27296: PPUSH
27297: LD_INT 3
27299: PPUSH
27300: LD_INT 100
27302: PPUSH
27303: CALL_OW 290
27307: GO 27271
27309: POP
27310: POP
// end ;
27311: PPOPN 2
27313: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27314: LD_EXP 37
27318: PUSH
27319: LD_EXP 82
27323: AND
27324: IFFALSE 27507
27326: GO 27328
27328: DISABLE
27329: LD_INT 0
27331: PPUSH
27332: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27333: LD_ADDR_VAR 0 2
27337: PUSH
27338: LD_INT 22
27340: PUSH
27341: LD_OWVAR 2
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PPUSH
27350: CALL_OW 69
27354: ST_TO_ADDR
// if not tmp then
27355: LD_VAR 0 2
27359: NOT
27360: IFFALSE 27364
// exit ;
27362: GO 27507
// for i := 1 to 2 do
27364: LD_ADDR_VAR 0 1
27368: PUSH
27369: DOUBLE
27370: LD_INT 1
27372: DEC
27373: ST_TO_ADDR
27374: LD_INT 2
27376: PUSH
27377: FOR_TO
27378: IFFALSE 27505
// begin uc_side := your_side ;
27380: LD_ADDR_OWVAR 20
27384: PUSH
27385: LD_OWVAR 2
27389: ST_TO_ADDR
// uc_nation := nation_american ;
27390: LD_ADDR_OWVAR 21
27394: PUSH
27395: LD_INT 1
27397: ST_TO_ADDR
// vc_chassis := us_morphling ;
27398: LD_ADDR_OWVAR 37
27402: PUSH
27403: LD_INT 5
27405: ST_TO_ADDR
// vc_engine := engine_siberite ;
27406: LD_ADDR_OWVAR 39
27410: PUSH
27411: LD_INT 3
27413: ST_TO_ADDR
// vc_control := control_computer ;
27414: LD_ADDR_OWVAR 38
27418: PUSH
27419: LD_INT 3
27421: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27422: LD_ADDR_OWVAR 40
27426: PUSH
27427: LD_INT 10
27429: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27430: LD_VAR 0 2
27434: PUSH
27435: LD_INT 1
27437: ARRAY
27438: PPUSH
27439: CALL_OW 310
27443: NOT
27444: IFFALSE 27491
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27446: CALL_OW 45
27450: PPUSH
27451: LD_VAR 0 2
27455: PUSH
27456: LD_INT 1
27458: ARRAY
27459: PPUSH
27460: CALL_OW 250
27464: PPUSH
27465: LD_VAR 0 2
27469: PUSH
27470: LD_INT 1
27472: ARRAY
27473: PPUSH
27474: CALL_OW 251
27478: PPUSH
27479: LD_INT 12
27481: PPUSH
27482: LD_INT 1
27484: PPUSH
27485: CALL_OW 50
27489: GO 27503
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27491: CALL_OW 45
27495: PPUSH
27496: LD_INT 1
27498: PPUSH
27499: CALL_OW 51
// end ;
27503: GO 27377
27505: POP
27506: POP
// end ;
27507: PPOPN 2
27509: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27510: LD_EXP 37
27514: PUSH
27515: LD_EXP 83
27519: AND
27520: IFFALSE 27742
27522: GO 27524
27524: DISABLE
27525: LD_INT 0
27527: PPUSH
27528: PPUSH
27529: PPUSH
27530: PPUSH
27531: PPUSH
27532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27533: LD_ADDR_VAR 0 6
27537: PUSH
27538: LD_INT 22
27540: PUSH
27541: LD_OWVAR 2
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 21
27552: PUSH
27553: LD_INT 1
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 3
27562: PUSH
27563: LD_INT 23
27565: PUSH
27566: LD_INT 0
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: LIST
27581: PPUSH
27582: CALL_OW 69
27586: ST_TO_ADDR
// if not tmp then
27587: LD_VAR 0 6
27591: NOT
27592: IFFALSE 27596
// exit ;
27594: GO 27742
// s1 := rand ( 1 , 4 ) ;
27596: LD_ADDR_VAR 0 2
27600: PUSH
27601: LD_INT 1
27603: PPUSH
27604: LD_INT 4
27606: PPUSH
27607: CALL_OW 12
27611: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27612: LD_ADDR_VAR 0 4
27616: PUSH
27617: LD_VAR 0 6
27621: PUSH
27622: LD_INT 1
27624: ARRAY
27625: PPUSH
27626: LD_VAR 0 2
27630: PPUSH
27631: CALL_OW 259
27635: ST_TO_ADDR
// if s1 = 1 then
27636: LD_VAR 0 2
27640: PUSH
27641: LD_INT 1
27643: EQUAL
27644: IFFALSE 27664
// s2 := rand ( 2 , 4 ) else
27646: LD_ADDR_VAR 0 3
27650: PUSH
27651: LD_INT 2
27653: PPUSH
27654: LD_INT 4
27656: PPUSH
27657: CALL_OW 12
27661: ST_TO_ADDR
27662: GO 27672
// s2 := 1 ;
27664: LD_ADDR_VAR 0 3
27668: PUSH
27669: LD_INT 1
27671: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27672: LD_ADDR_VAR 0 5
27676: PUSH
27677: LD_VAR 0 6
27681: PUSH
27682: LD_INT 1
27684: ARRAY
27685: PPUSH
27686: LD_VAR 0 3
27690: PPUSH
27691: CALL_OW 259
27695: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27696: LD_VAR 0 6
27700: PUSH
27701: LD_INT 1
27703: ARRAY
27704: PPUSH
27705: LD_VAR 0 2
27709: PPUSH
27710: LD_VAR 0 5
27714: PPUSH
27715: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27719: LD_VAR 0 6
27723: PUSH
27724: LD_INT 1
27726: ARRAY
27727: PPUSH
27728: LD_VAR 0 3
27732: PPUSH
27733: LD_VAR 0 4
27737: PPUSH
27738: CALL_OW 237
// end ;
27742: PPOPN 6
27744: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27745: LD_EXP 37
27749: PUSH
27750: LD_EXP 84
27754: AND
27755: IFFALSE 27834
27757: GO 27759
27759: DISABLE
27760: LD_INT 0
27762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27763: LD_ADDR_VAR 0 1
27767: PUSH
27768: LD_INT 22
27770: PUSH
27771: LD_OWVAR 2
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 30
27782: PUSH
27783: LD_INT 3
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PPUSH
27794: CALL_OW 69
27798: ST_TO_ADDR
// if not tmp then
27799: LD_VAR 0 1
27803: NOT
27804: IFFALSE 27808
// exit ;
27806: GO 27834
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27808: LD_VAR 0 1
27812: PUSH
27813: LD_INT 1
27815: PPUSH
27816: LD_VAR 0 1
27820: PPUSH
27821: CALL_OW 12
27825: ARRAY
27826: PPUSH
27827: LD_INT 1
27829: PPUSH
27830: CALL_OW 234
// end ;
27834: PPOPN 1
27836: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27837: LD_EXP 37
27841: PUSH
27842: LD_EXP 85
27846: AND
27847: IFFALSE 27959
27849: GO 27851
27851: DISABLE
27852: LD_INT 0
27854: PPUSH
27855: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27856: LD_ADDR_VAR 0 2
27860: PUSH
27861: LD_INT 22
27863: PUSH
27864: LD_OWVAR 2
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 2
27875: PUSH
27876: LD_INT 30
27878: PUSH
27879: LD_INT 27
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 30
27888: PUSH
27889: LD_INT 26
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 30
27898: PUSH
27899: LD_INT 28
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PPUSH
27916: CALL_OW 69
27920: ST_TO_ADDR
// if not tmp then
27921: LD_VAR 0 2
27925: NOT
27926: IFFALSE 27930
// exit ;
27928: GO 27959
// for i in tmp do
27930: LD_ADDR_VAR 0 1
27934: PUSH
27935: LD_VAR 0 2
27939: PUSH
27940: FOR_IN
27941: IFFALSE 27957
// SetLives ( i , 1 ) ;
27943: LD_VAR 0 1
27947: PPUSH
27948: LD_INT 1
27950: PPUSH
27951: CALL_OW 234
27955: GO 27940
27957: POP
27958: POP
// end ;
27959: PPOPN 2
27961: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27962: LD_EXP 37
27966: PUSH
27967: LD_EXP 86
27971: AND
27972: IFFALSE 28259
27974: GO 27976
27976: DISABLE
27977: LD_INT 0
27979: PPUSH
27980: PPUSH
27981: PPUSH
// begin i := rand ( 1 , 7 ) ;
27982: LD_ADDR_VAR 0 1
27986: PUSH
27987: LD_INT 1
27989: PPUSH
27990: LD_INT 7
27992: PPUSH
27993: CALL_OW 12
27997: ST_TO_ADDR
// case i of 1 :
27998: LD_VAR 0 1
28002: PUSH
28003: LD_INT 1
28005: DOUBLE
28006: EQUAL
28007: IFTRUE 28011
28009: GO 28021
28011: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28012: LD_STRING earthquake(getX(game), 0, 32)
28014: PPUSH
28015: CALL_OW 559
28019: GO 28259
28021: LD_INT 2
28023: DOUBLE
28024: EQUAL
28025: IFTRUE 28029
28027: GO 28043
28029: POP
// begin ToLua ( displayStucuk(); ) ;
28030: LD_STRING displayStucuk();
28032: PPUSH
28033: CALL_OW 559
// ResetFog ;
28037: CALL_OW 335
// end ; 3 :
28041: GO 28259
28043: LD_INT 3
28045: DOUBLE
28046: EQUAL
28047: IFTRUE 28051
28049: GO 28155
28051: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28052: LD_ADDR_VAR 0 2
28056: PUSH
28057: LD_INT 22
28059: PUSH
28060: LD_OWVAR 2
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 25
28071: PUSH
28072: LD_INT 1
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PPUSH
28083: CALL_OW 69
28087: ST_TO_ADDR
// if not tmp then
28088: LD_VAR 0 2
28092: NOT
28093: IFFALSE 28097
// exit ;
28095: GO 28259
// un := tmp [ rand ( 1 , tmp ) ] ;
28097: LD_ADDR_VAR 0 3
28101: PUSH
28102: LD_VAR 0 2
28106: PUSH
28107: LD_INT 1
28109: PPUSH
28110: LD_VAR 0 2
28114: PPUSH
28115: CALL_OW 12
28119: ARRAY
28120: ST_TO_ADDR
// if Crawls ( un ) then
28121: LD_VAR 0 3
28125: PPUSH
28126: CALL_OW 318
28130: IFFALSE 28141
// ComWalk ( un ) ;
28132: LD_VAR 0 3
28136: PPUSH
28137: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28141: LD_VAR 0 3
28145: PPUSH
28146: LD_INT 8
28148: PPUSH
28149: CALL_OW 336
// end ; 4 :
28153: GO 28259
28155: LD_INT 4
28157: DOUBLE
28158: EQUAL
28159: IFTRUE 28163
28161: GO 28237
28163: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28164: LD_ADDR_VAR 0 2
28168: PUSH
28169: LD_INT 22
28171: PUSH
28172: LD_OWVAR 2
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 30
28183: PUSH
28184: LD_INT 29
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PPUSH
28195: CALL_OW 69
28199: ST_TO_ADDR
// if not tmp then
28200: LD_VAR 0 2
28204: NOT
28205: IFFALSE 28209
// exit ;
28207: GO 28259
// CenterNowOnUnits ( tmp [ 1 ] ) ;
28209: LD_VAR 0 2
28213: PUSH
28214: LD_INT 1
28216: ARRAY
28217: PPUSH
28218: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
28222: LD_VAR 0 2
28226: PUSH
28227: LD_INT 1
28229: ARRAY
28230: PPUSH
28231: CALL_OW 65
// end ; 5 .. 7 :
28235: GO 28259
28237: LD_INT 5
28239: DOUBLE
28240: GREATEREQUAL
28241: IFFALSE 28249
28243: LD_INT 7
28245: DOUBLE
28246: LESSEQUAL
28247: IFTRUE 28251
28249: GO 28258
28251: POP
// StreamSibBomb ; end ;
28252: CALL 24496 0 0
28256: GO 28259
28258: POP
// end ;
28259: PPOPN 3
28261: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28262: LD_EXP 37
28266: PUSH
28267: LD_EXP 87
28271: AND
28272: IFFALSE 28428
28274: GO 28276
28276: DISABLE
28277: LD_INT 0
28279: PPUSH
28280: PPUSH
28281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28282: LD_ADDR_VAR 0 2
28286: PUSH
28287: LD_INT 81
28289: PUSH
28290: LD_OWVAR 2
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 2
28301: PUSH
28302: LD_INT 21
28304: PUSH
28305: LD_INT 1
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 21
28314: PUSH
28315: LD_INT 2
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: LIST
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PPUSH
28331: CALL_OW 69
28335: ST_TO_ADDR
// if not tmp then
28336: LD_VAR 0 2
28340: NOT
28341: IFFALSE 28345
// exit ;
28343: GO 28428
// p := 0 ;
28345: LD_ADDR_VAR 0 3
28349: PUSH
28350: LD_INT 0
28352: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28353: LD_INT 35
28355: PPUSH
28356: CALL_OW 67
// p := p + 1 ;
28360: LD_ADDR_VAR 0 3
28364: PUSH
28365: LD_VAR 0 3
28369: PUSH
28370: LD_INT 1
28372: PLUS
28373: ST_TO_ADDR
// for i in tmp do
28374: LD_ADDR_VAR 0 1
28378: PUSH
28379: LD_VAR 0 2
28383: PUSH
28384: FOR_IN
28385: IFFALSE 28416
// if GetLives ( i ) < 1000 then
28387: LD_VAR 0 1
28391: PPUSH
28392: CALL_OW 256
28396: PUSH
28397: LD_INT 1000
28399: LESS
28400: IFFALSE 28414
// SetLives ( i , 1000 ) ;
28402: LD_VAR 0 1
28406: PPUSH
28407: LD_INT 1000
28409: PPUSH
28410: CALL_OW 234
28414: GO 28384
28416: POP
28417: POP
// until p > 20 ;
28418: LD_VAR 0 3
28422: PUSH
28423: LD_INT 20
28425: GREATER
28426: IFFALSE 28353
// end ;
28428: PPOPN 3
28430: END
// every 0 0$1 trigger StreamModeActive and sTime do
28431: LD_EXP 37
28435: PUSH
28436: LD_EXP 88
28440: AND
28441: IFFALSE 28476
28443: GO 28445
28445: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28446: LD_INT 28
28448: PPUSH
28449: LD_OWVAR 2
28453: PPUSH
28454: LD_INT 2
28456: PPUSH
28457: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28461: LD_INT 30
28463: PPUSH
28464: LD_OWVAR 2
28468: PPUSH
28469: LD_INT 2
28471: PPUSH
28472: CALL_OW 322
// end ;
28476: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28477: LD_EXP 37
28481: PUSH
28482: LD_EXP 89
28486: AND
28487: IFFALSE 28608
28489: GO 28491
28491: DISABLE
28492: LD_INT 0
28494: PPUSH
28495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28496: LD_ADDR_VAR 0 2
28500: PUSH
28501: LD_INT 22
28503: PUSH
28504: LD_OWVAR 2
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 21
28515: PUSH
28516: LD_INT 1
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 3
28525: PUSH
28526: LD_INT 23
28528: PUSH
28529: LD_INT 0
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: LIST
28544: PPUSH
28545: CALL_OW 69
28549: ST_TO_ADDR
// if not tmp then
28550: LD_VAR 0 2
28554: NOT
28555: IFFALSE 28559
// exit ;
28557: GO 28608
// for i in tmp do
28559: LD_ADDR_VAR 0 1
28563: PUSH
28564: LD_VAR 0 2
28568: PUSH
28569: FOR_IN
28570: IFFALSE 28606
// begin if Crawls ( i ) then
28572: LD_VAR 0 1
28576: PPUSH
28577: CALL_OW 318
28581: IFFALSE 28592
// ComWalk ( i ) ;
28583: LD_VAR 0 1
28587: PPUSH
28588: CALL_OW 138
// SetClass ( i , 2 ) ;
28592: LD_VAR 0 1
28596: PPUSH
28597: LD_INT 2
28599: PPUSH
28600: CALL_OW 336
// end ;
28604: GO 28569
28606: POP
28607: POP
// end ;
28608: PPOPN 2
28610: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28611: LD_EXP 37
28615: PUSH
28616: LD_EXP 90
28620: AND
28621: IFFALSE 28909
28623: GO 28625
28625: DISABLE
28626: LD_INT 0
28628: PPUSH
28629: PPUSH
28630: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28631: LD_OWVAR 2
28635: PPUSH
28636: LD_INT 9
28638: PPUSH
28639: LD_INT 1
28641: PPUSH
28642: LD_INT 1
28644: PPUSH
28645: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28649: LD_INT 9
28651: PPUSH
28652: LD_OWVAR 2
28656: PPUSH
28657: CALL_OW 343
// uc_side := 9 ;
28661: LD_ADDR_OWVAR 20
28665: PUSH
28666: LD_INT 9
28668: ST_TO_ADDR
// uc_nation := 2 ;
28669: LD_ADDR_OWVAR 21
28673: PUSH
28674: LD_INT 2
28676: ST_TO_ADDR
// hc_name := Dark Warrior ;
28677: LD_ADDR_OWVAR 26
28681: PUSH
28682: LD_STRING Dark Warrior
28684: ST_TO_ADDR
// hc_gallery :=  ;
28685: LD_ADDR_OWVAR 33
28689: PUSH
28690: LD_STRING 
28692: ST_TO_ADDR
// hc_noskilllimit := true ;
28693: LD_ADDR_OWVAR 76
28697: PUSH
28698: LD_INT 1
28700: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28701: LD_ADDR_OWVAR 31
28705: PUSH
28706: LD_INT 30
28708: PUSH
28709: LD_INT 30
28711: PUSH
28712: LD_INT 30
28714: PUSH
28715: LD_INT 30
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: ST_TO_ADDR
// un := CreateHuman ;
28724: LD_ADDR_VAR 0 3
28728: PUSH
28729: CALL_OW 44
28733: ST_TO_ADDR
// hc_noskilllimit := false ;
28734: LD_ADDR_OWVAR 76
28738: PUSH
28739: LD_INT 0
28741: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28742: LD_VAR 0 3
28746: PPUSH
28747: LD_INT 1
28749: PPUSH
28750: CALL_OW 51
// ToLua ( playRanger() ) ;
28754: LD_STRING playRanger()
28756: PPUSH
28757: CALL_OW 559
// p := 0 ;
28761: LD_ADDR_VAR 0 2
28765: PUSH
28766: LD_INT 0
28768: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28769: LD_INT 35
28771: PPUSH
28772: CALL_OW 67
// p := p + 1 ;
28776: LD_ADDR_VAR 0 2
28780: PUSH
28781: LD_VAR 0 2
28785: PUSH
28786: LD_INT 1
28788: PLUS
28789: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28790: LD_VAR 0 3
28794: PPUSH
28795: CALL_OW 256
28799: PUSH
28800: LD_INT 1000
28802: LESS
28803: IFFALSE 28817
// SetLives ( un , 1000 ) ;
28805: LD_VAR 0 3
28809: PPUSH
28810: LD_INT 1000
28812: PPUSH
28813: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28817: LD_VAR 0 3
28821: PPUSH
28822: LD_INT 81
28824: PUSH
28825: LD_OWVAR 2
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 91
28836: PUSH
28837: LD_VAR 0 3
28841: PUSH
28842: LD_INT 30
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: LIST
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PPUSH
28854: CALL_OW 69
28858: PPUSH
28859: LD_VAR 0 3
28863: PPUSH
28864: CALL_OW 74
28868: PPUSH
28869: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
28873: LD_VAR 0 2
28877: PUSH
28878: LD_INT 80
28880: GREATER
28881: PUSH
28882: LD_VAR 0 3
28886: PPUSH
28887: CALL_OW 301
28891: OR
28892: IFFALSE 28769
// if un then
28894: LD_VAR 0 3
28898: IFFALSE 28909
// RemoveUnit ( un ) ;
28900: LD_VAR 0 3
28904: PPUSH
28905: CALL_OW 64
// end ;
28909: PPOPN 3
28911: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
28912: LD_EXP 91
28916: IFFALSE 29032
28918: GO 28920
28920: DISABLE
28921: LD_INT 0
28923: PPUSH
28924: PPUSH
28925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28926: LD_ADDR_VAR 0 2
28930: PUSH
28931: LD_INT 81
28933: PUSH
28934: LD_OWVAR 2
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 21
28945: PUSH
28946: LD_INT 1
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PPUSH
28957: CALL_OW 69
28961: ST_TO_ADDR
// ToLua ( playComputer() ) ;
28962: LD_STRING playComputer()
28964: PPUSH
28965: CALL_OW 559
// if not tmp then
28969: LD_VAR 0 2
28973: NOT
28974: IFFALSE 28978
// exit ;
28976: GO 29032
// for i in tmp do
28978: LD_ADDR_VAR 0 1
28982: PUSH
28983: LD_VAR 0 2
28987: PUSH
28988: FOR_IN
28989: IFFALSE 29030
// for j := 1 to 4 do
28991: LD_ADDR_VAR 0 3
28995: PUSH
28996: DOUBLE
28997: LD_INT 1
28999: DEC
29000: ST_TO_ADDR
29001: LD_INT 4
29003: PUSH
29004: FOR_TO
29005: IFFALSE 29026
// SetSkill ( i , j , 10 ) ;
29007: LD_VAR 0 1
29011: PPUSH
29012: LD_VAR 0 3
29016: PPUSH
29017: LD_INT 10
29019: PPUSH
29020: CALL_OW 237
29024: GO 29004
29026: POP
29027: POP
29028: GO 28988
29030: POP
29031: POP
// end ;
29032: PPOPN 3
29034: END
// every 0 0$1 trigger s30 do var i , tmp ;
29035: LD_EXP 92
29039: IFFALSE 29108
29041: GO 29043
29043: DISABLE
29044: LD_INT 0
29046: PPUSH
29047: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29048: LD_ADDR_VAR 0 2
29052: PUSH
29053: LD_INT 22
29055: PUSH
29056: LD_OWVAR 2
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PPUSH
29065: CALL_OW 69
29069: ST_TO_ADDR
// if not tmp then
29070: LD_VAR 0 2
29074: NOT
29075: IFFALSE 29079
// exit ;
29077: GO 29108
// for i in tmp do
29079: LD_ADDR_VAR 0 1
29083: PUSH
29084: LD_VAR 0 2
29088: PUSH
29089: FOR_IN
29090: IFFALSE 29106
// SetLives ( i , 300 ) ;
29092: LD_VAR 0 1
29096: PPUSH
29097: LD_INT 300
29099: PPUSH
29100: CALL_OW 234
29104: GO 29089
29106: POP
29107: POP
// end ;
29108: PPOPN 2
29110: END
// every 0 0$1 trigger s60 do var i , tmp ;
29111: LD_EXP 93
29115: IFFALSE 29184
29117: GO 29119
29119: DISABLE
29120: LD_INT 0
29122: PPUSH
29123: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29124: LD_ADDR_VAR 0 2
29128: PUSH
29129: LD_INT 22
29131: PUSH
29132: LD_OWVAR 2
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PPUSH
29141: CALL_OW 69
29145: ST_TO_ADDR
// if not tmp then
29146: LD_VAR 0 2
29150: NOT
29151: IFFALSE 29155
// exit ;
29153: GO 29184
// for i in tmp do
29155: LD_ADDR_VAR 0 1
29159: PUSH
29160: LD_VAR 0 2
29164: PUSH
29165: FOR_IN
29166: IFFALSE 29182
// SetLives ( i , 600 ) ;
29168: LD_VAR 0 1
29172: PPUSH
29173: LD_INT 600
29175: PPUSH
29176: CALL_OW 234
29180: GO 29165
29182: POP
29183: POP
// end ;
29184: PPOPN 2
29186: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29187: LD_INT 0
29189: PPUSH
// case cmd of 301 :
29190: LD_VAR 0 1
29194: PUSH
29195: LD_INT 301
29197: DOUBLE
29198: EQUAL
29199: IFTRUE 29203
29201: GO 29235
29203: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29204: LD_VAR 0 6
29208: PPUSH
29209: LD_VAR 0 7
29213: PPUSH
29214: LD_VAR 0 8
29218: PPUSH
29219: LD_VAR 0 4
29223: PPUSH
29224: LD_VAR 0 5
29228: PPUSH
29229: CALL 30444 0 5
29233: GO 29356
29235: LD_INT 302
29237: DOUBLE
29238: EQUAL
29239: IFTRUE 29243
29241: GO 29280
29243: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29244: LD_VAR 0 6
29248: PPUSH
29249: LD_VAR 0 7
29253: PPUSH
29254: LD_VAR 0 8
29258: PPUSH
29259: LD_VAR 0 9
29263: PPUSH
29264: LD_VAR 0 4
29268: PPUSH
29269: LD_VAR 0 5
29273: PPUSH
29274: CALL 30535 0 6
29278: GO 29356
29280: LD_INT 303
29282: DOUBLE
29283: EQUAL
29284: IFTRUE 29288
29286: GO 29325
29288: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29289: LD_VAR 0 6
29293: PPUSH
29294: LD_VAR 0 7
29298: PPUSH
29299: LD_VAR 0 8
29303: PPUSH
29304: LD_VAR 0 9
29308: PPUSH
29309: LD_VAR 0 4
29313: PPUSH
29314: LD_VAR 0 5
29318: PPUSH
29319: CALL 29361 0 6
29323: GO 29356
29325: LD_INT 304
29327: DOUBLE
29328: EQUAL
29329: IFTRUE 29333
29331: GO 29355
29333: POP
// hHackTeleport ( unit , x , y ) ; end ;
29334: LD_VAR 0 2
29338: PPUSH
29339: LD_VAR 0 4
29343: PPUSH
29344: LD_VAR 0 5
29348: PPUSH
29349: CALL 31128 0 3
29353: GO 29356
29355: POP
// end ;
29356: LD_VAR 0 12
29360: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29361: LD_INT 0
29363: PPUSH
29364: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29365: LD_VAR 0 1
29369: PUSH
29370: LD_INT 1
29372: LESS
29373: PUSH
29374: LD_VAR 0 1
29378: PUSH
29379: LD_INT 3
29381: GREATER
29382: OR
29383: PUSH
29384: LD_VAR 0 5
29388: PPUSH
29389: LD_VAR 0 6
29393: PPUSH
29394: CALL_OW 428
29398: OR
29399: IFFALSE 29403
// exit ;
29401: GO 30131
// uc_side := your_side ;
29403: LD_ADDR_OWVAR 20
29407: PUSH
29408: LD_OWVAR 2
29412: ST_TO_ADDR
// uc_nation := nation ;
29413: LD_ADDR_OWVAR 21
29417: PUSH
29418: LD_VAR 0 1
29422: ST_TO_ADDR
// bc_level = 1 ;
29423: LD_ADDR_OWVAR 43
29427: PUSH
29428: LD_INT 1
29430: ST_TO_ADDR
// case btype of 1 :
29431: LD_VAR 0 2
29435: PUSH
29436: LD_INT 1
29438: DOUBLE
29439: EQUAL
29440: IFTRUE 29444
29442: GO 29455
29444: POP
// bc_type := b_depot ; 2 :
29445: LD_ADDR_OWVAR 42
29449: PUSH
29450: LD_INT 0
29452: ST_TO_ADDR
29453: GO 30075
29455: LD_INT 2
29457: DOUBLE
29458: EQUAL
29459: IFTRUE 29463
29461: GO 29474
29463: POP
// bc_type := b_warehouse ; 3 :
29464: LD_ADDR_OWVAR 42
29468: PUSH
29469: LD_INT 1
29471: ST_TO_ADDR
29472: GO 30075
29474: LD_INT 3
29476: DOUBLE
29477: EQUAL
29478: IFTRUE 29482
29480: GO 29493
29482: POP
// bc_type := b_lab ; 4 .. 9 :
29483: LD_ADDR_OWVAR 42
29487: PUSH
29488: LD_INT 6
29490: ST_TO_ADDR
29491: GO 30075
29493: LD_INT 4
29495: DOUBLE
29496: GREATEREQUAL
29497: IFFALSE 29505
29499: LD_INT 9
29501: DOUBLE
29502: LESSEQUAL
29503: IFTRUE 29507
29505: GO 29567
29507: POP
// begin bc_type := b_lab_half ;
29508: LD_ADDR_OWVAR 42
29512: PUSH
29513: LD_INT 7
29515: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29516: LD_ADDR_OWVAR 44
29520: PUSH
29521: LD_INT 10
29523: PUSH
29524: LD_INT 11
29526: PUSH
29527: LD_INT 12
29529: PUSH
29530: LD_INT 15
29532: PUSH
29533: LD_INT 14
29535: PUSH
29536: LD_INT 13
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: PUSH
29547: LD_VAR 0 2
29551: PUSH
29552: LD_INT 3
29554: MINUS
29555: ARRAY
29556: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
29557: LD_ADDR_OWVAR 45
29561: PUSH
29562: LD_INT 9
29564: ST_TO_ADDR
// end ; 10 .. 13 :
29565: GO 30075
29567: LD_INT 10
29569: DOUBLE
29570: GREATEREQUAL
29571: IFFALSE 29579
29573: LD_INT 13
29575: DOUBLE
29576: LESSEQUAL
29577: IFTRUE 29581
29579: GO 29658
29581: POP
// begin bc_type := b_lab_full ;
29582: LD_ADDR_OWVAR 42
29586: PUSH
29587: LD_INT 8
29589: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29590: LD_ADDR_OWVAR 44
29594: PUSH
29595: LD_INT 10
29597: PUSH
29598: LD_INT 12
29600: PUSH
29601: LD_INT 14
29603: PUSH
29604: LD_INT 13
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: PUSH
29613: LD_VAR 0 2
29617: PUSH
29618: LD_INT 9
29620: MINUS
29621: ARRAY
29622: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29623: LD_ADDR_OWVAR 45
29627: PUSH
29628: LD_INT 11
29630: PUSH
29631: LD_INT 15
29633: PUSH
29634: LD_INT 12
29636: PUSH
29637: LD_INT 15
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: PUSH
29646: LD_VAR 0 2
29650: PUSH
29651: LD_INT 9
29653: MINUS
29654: ARRAY
29655: ST_TO_ADDR
// end ; 14 :
29656: GO 30075
29658: LD_INT 14
29660: DOUBLE
29661: EQUAL
29662: IFTRUE 29666
29664: GO 29677
29666: POP
// bc_type := b_workshop ; 15 :
29667: LD_ADDR_OWVAR 42
29671: PUSH
29672: LD_INT 2
29674: ST_TO_ADDR
29675: GO 30075
29677: LD_INT 15
29679: DOUBLE
29680: EQUAL
29681: IFTRUE 29685
29683: GO 29696
29685: POP
// bc_type := b_factory ; 16 :
29686: LD_ADDR_OWVAR 42
29690: PUSH
29691: LD_INT 3
29693: ST_TO_ADDR
29694: GO 30075
29696: LD_INT 16
29698: DOUBLE
29699: EQUAL
29700: IFTRUE 29704
29702: GO 29715
29704: POP
// bc_type := b_ext_gun ; 17 :
29705: LD_ADDR_OWVAR 42
29709: PUSH
29710: LD_INT 17
29712: ST_TO_ADDR
29713: GO 30075
29715: LD_INT 17
29717: DOUBLE
29718: EQUAL
29719: IFTRUE 29723
29721: GO 29751
29723: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29724: LD_ADDR_OWVAR 42
29728: PUSH
29729: LD_INT 19
29731: PUSH
29732: LD_INT 23
29734: PUSH
29735: LD_INT 19
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: LIST
29742: PUSH
29743: LD_VAR 0 1
29747: ARRAY
29748: ST_TO_ADDR
29749: GO 30075
29751: LD_INT 18
29753: DOUBLE
29754: EQUAL
29755: IFTRUE 29759
29757: GO 29770
29759: POP
// bc_type := b_ext_radar ; 19 :
29760: LD_ADDR_OWVAR 42
29764: PUSH
29765: LD_INT 20
29767: ST_TO_ADDR
29768: GO 30075
29770: LD_INT 19
29772: DOUBLE
29773: EQUAL
29774: IFTRUE 29778
29776: GO 29789
29778: POP
// bc_type := b_ext_radio ; 20 :
29779: LD_ADDR_OWVAR 42
29783: PUSH
29784: LD_INT 22
29786: ST_TO_ADDR
29787: GO 30075
29789: LD_INT 20
29791: DOUBLE
29792: EQUAL
29793: IFTRUE 29797
29795: GO 29808
29797: POP
// bc_type := b_ext_siberium ; 21 :
29798: LD_ADDR_OWVAR 42
29802: PUSH
29803: LD_INT 21
29805: ST_TO_ADDR
29806: GO 30075
29808: LD_INT 21
29810: DOUBLE
29811: EQUAL
29812: IFTRUE 29816
29814: GO 29827
29816: POP
// bc_type := b_ext_computer ; 22 :
29817: LD_ADDR_OWVAR 42
29821: PUSH
29822: LD_INT 24
29824: ST_TO_ADDR
29825: GO 30075
29827: LD_INT 22
29829: DOUBLE
29830: EQUAL
29831: IFTRUE 29835
29833: GO 29846
29835: POP
// bc_type := b_ext_track ; 23 :
29836: LD_ADDR_OWVAR 42
29840: PUSH
29841: LD_INT 16
29843: ST_TO_ADDR
29844: GO 30075
29846: LD_INT 23
29848: DOUBLE
29849: EQUAL
29850: IFTRUE 29854
29852: GO 29865
29854: POP
// bc_type := b_ext_laser ; 24 :
29855: LD_ADDR_OWVAR 42
29859: PUSH
29860: LD_INT 25
29862: ST_TO_ADDR
29863: GO 30075
29865: LD_INT 24
29867: DOUBLE
29868: EQUAL
29869: IFTRUE 29873
29871: GO 29884
29873: POP
// bc_type := b_control_tower ; 25 :
29874: LD_ADDR_OWVAR 42
29878: PUSH
29879: LD_INT 36
29881: ST_TO_ADDR
29882: GO 30075
29884: LD_INT 25
29886: DOUBLE
29887: EQUAL
29888: IFTRUE 29892
29890: GO 29903
29892: POP
// bc_type := b_breastwork ; 26 :
29893: LD_ADDR_OWVAR 42
29897: PUSH
29898: LD_INT 31
29900: ST_TO_ADDR
29901: GO 30075
29903: LD_INT 26
29905: DOUBLE
29906: EQUAL
29907: IFTRUE 29911
29909: GO 29922
29911: POP
// bc_type := b_bunker ; 27 :
29912: LD_ADDR_OWVAR 42
29916: PUSH
29917: LD_INT 32
29919: ST_TO_ADDR
29920: GO 30075
29922: LD_INT 27
29924: DOUBLE
29925: EQUAL
29926: IFTRUE 29930
29928: GO 29941
29930: POP
// bc_type := b_turret ; 28 :
29931: LD_ADDR_OWVAR 42
29935: PUSH
29936: LD_INT 33
29938: ST_TO_ADDR
29939: GO 30075
29941: LD_INT 28
29943: DOUBLE
29944: EQUAL
29945: IFTRUE 29949
29947: GO 29960
29949: POP
// bc_type := b_armoury ; 29 :
29950: LD_ADDR_OWVAR 42
29954: PUSH
29955: LD_INT 4
29957: ST_TO_ADDR
29958: GO 30075
29960: LD_INT 29
29962: DOUBLE
29963: EQUAL
29964: IFTRUE 29968
29966: GO 29979
29968: POP
// bc_type := b_barracks ; 30 :
29969: LD_ADDR_OWVAR 42
29973: PUSH
29974: LD_INT 5
29976: ST_TO_ADDR
29977: GO 30075
29979: LD_INT 30
29981: DOUBLE
29982: EQUAL
29983: IFTRUE 29987
29985: GO 29998
29987: POP
// bc_type := b_solar_power ; 31 :
29988: LD_ADDR_OWVAR 42
29992: PUSH
29993: LD_INT 27
29995: ST_TO_ADDR
29996: GO 30075
29998: LD_INT 31
30000: DOUBLE
30001: EQUAL
30002: IFTRUE 30006
30004: GO 30017
30006: POP
// bc_type := b_oil_power ; 32 :
30007: LD_ADDR_OWVAR 42
30011: PUSH
30012: LD_INT 26
30014: ST_TO_ADDR
30015: GO 30075
30017: LD_INT 32
30019: DOUBLE
30020: EQUAL
30021: IFTRUE 30025
30023: GO 30036
30025: POP
// bc_type := b_siberite_power ; 33 :
30026: LD_ADDR_OWVAR 42
30030: PUSH
30031: LD_INT 28
30033: ST_TO_ADDR
30034: GO 30075
30036: LD_INT 33
30038: DOUBLE
30039: EQUAL
30040: IFTRUE 30044
30042: GO 30055
30044: POP
// bc_type := b_oil_mine ; 34 :
30045: LD_ADDR_OWVAR 42
30049: PUSH
30050: LD_INT 29
30052: ST_TO_ADDR
30053: GO 30075
30055: LD_INT 34
30057: DOUBLE
30058: EQUAL
30059: IFTRUE 30063
30061: GO 30074
30063: POP
// bc_type := b_siberite_mine ; end ;
30064: LD_ADDR_OWVAR 42
30068: PUSH
30069: LD_INT 30
30071: ST_TO_ADDR
30072: GO 30075
30074: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30075: LD_ADDR_VAR 0 8
30079: PUSH
30080: LD_VAR 0 5
30084: PPUSH
30085: LD_VAR 0 6
30089: PPUSH
30090: LD_VAR 0 3
30094: PPUSH
30095: CALL_OW 47
30099: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30100: LD_OWVAR 42
30104: PUSH
30105: LD_INT 32
30107: PUSH
30108: LD_INT 33
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: IN
30115: IFFALSE 30131
// PlaceWeaponTurret ( b , weapon ) ;
30117: LD_VAR 0 8
30121: PPUSH
30122: LD_VAR 0 4
30126: PPUSH
30127: CALL_OW 431
// end ;
30131: LD_VAR 0 7
30135: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30136: LD_INT 0
30138: PPUSH
30139: PPUSH
30140: PPUSH
30141: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30142: LD_ADDR_VAR 0 4
30146: PUSH
30147: LD_INT 22
30149: PUSH
30150: LD_OWVAR 2
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 2
30161: PUSH
30162: LD_INT 30
30164: PUSH
30165: LD_INT 0
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 30
30174: PUSH
30175: LD_INT 1
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: LIST
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PPUSH
30191: CALL_OW 69
30195: ST_TO_ADDR
// if not tmp then
30196: LD_VAR 0 4
30200: NOT
30201: IFFALSE 30205
// exit ;
30203: GO 30264
// for i in tmp do
30205: LD_ADDR_VAR 0 2
30209: PUSH
30210: LD_VAR 0 4
30214: PUSH
30215: FOR_IN
30216: IFFALSE 30262
// for j = 1 to 3 do
30218: LD_ADDR_VAR 0 3
30222: PUSH
30223: DOUBLE
30224: LD_INT 1
30226: DEC
30227: ST_TO_ADDR
30228: LD_INT 3
30230: PUSH
30231: FOR_TO
30232: IFFALSE 30258
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30234: LD_VAR 0 2
30238: PPUSH
30239: CALL_OW 274
30243: PPUSH
30244: LD_VAR 0 3
30248: PPUSH
30249: LD_INT 99999
30251: PPUSH
30252: CALL_OW 277
30256: GO 30231
30258: POP
30259: POP
30260: GO 30215
30262: POP
30263: POP
// end ;
30264: LD_VAR 0 1
30268: RET
// export function hHackSetLevel10 ; var i , j ; begin
30269: LD_INT 0
30271: PPUSH
30272: PPUSH
30273: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30274: LD_ADDR_VAR 0 2
30278: PUSH
30279: LD_INT 21
30281: PUSH
30282: LD_INT 1
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PPUSH
30289: CALL_OW 69
30293: PUSH
30294: FOR_IN
30295: IFFALSE 30347
// if IsSelected ( i ) then
30297: LD_VAR 0 2
30301: PPUSH
30302: CALL_OW 306
30306: IFFALSE 30345
// begin for j := 1 to 4 do
30308: LD_ADDR_VAR 0 3
30312: PUSH
30313: DOUBLE
30314: LD_INT 1
30316: DEC
30317: ST_TO_ADDR
30318: LD_INT 4
30320: PUSH
30321: FOR_TO
30322: IFFALSE 30343
// SetSkill ( i , j , 10 ) ;
30324: LD_VAR 0 2
30328: PPUSH
30329: LD_VAR 0 3
30333: PPUSH
30334: LD_INT 10
30336: PPUSH
30337: CALL_OW 237
30341: GO 30321
30343: POP
30344: POP
// end ;
30345: GO 30294
30347: POP
30348: POP
// end ;
30349: LD_VAR 0 1
30353: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30354: LD_INT 0
30356: PPUSH
30357: PPUSH
30358: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30359: LD_ADDR_VAR 0 2
30363: PUSH
30364: LD_INT 22
30366: PUSH
30367: LD_OWVAR 2
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 21
30378: PUSH
30379: LD_INT 1
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PPUSH
30390: CALL_OW 69
30394: PUSH
30395: FOR_IN
30396: IFFALSE 30437
// begin for j := 1 to 4 do
30398: LD_ADDR_VAR 0 3
30402: PUSH
30403: DOUBLE
30404: LD_INT 1
30406: DEC
30407: ST_TO_ADDR
30408: LD_INT 4
30410: PUSH
30411: FOR_TO
30412: IFFALSE 30433
// SetSkill ( i , j , 10 ) ;
30414: LD_VAR 0 2
30418: PPUSH
30419: LD_VAR 0 3
30423: PPUSH
30424: LD_INT 10
30426: PPUSH
30427: CALL_OW 237
30431: GO 30411
30433: POP
30434: POP
// end ;
30435: GO 30395
30437: POP
30438: POP
// end ;
30439: LD_VAR 0 1
30443: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30444: LD_INT 0
30446: PPUSH
// uc_side := your_side ;
30447: LD_ADDR_OWVAR 20
30451: PUSH
30452: LD_OWVAR 2
30456: ST_TO_ADDR
// uc_nation := nation ;
30457: LD_ADDR_OWVAR 21
30461: PUSH
30462: LD_VAR 0 1
30466: ST_TO_ADDR
// InitHc ;
30467: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30471: LD_INT 0
30473: PPUSH
30474: LD_VAR 0 2
30478: PPUSH
30479: LD_VAR 0 3
30483: PPUSH
30484: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30488: LD_VAR 0 4
30492: PPUSH
30493: LD_VAR 0 5
30497: PPUSH
30498: CALL_OW 428
30502: PUSH
30503: LD_INT 0
30505: EQUAL
30506: IFFALSE 30530
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30508: CALL_OW 44
30512: PPUSH
30513: LD_VAR 0 4
30517: PPUSH
30518: LD_VAR 0 5
30522: PPUSH
30523: LD_INT 1
30525: PPUSH
30526: CALL_OW 48
// end ;
30530: LD_VAR 0 6
30534: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30535: LD_INT 0
30537: PPUSH
30538: PPUSH
// uc_side := your_side ;
30539: LD_ADDR_OWVAR 20
30543: PUSH
30544: LD_OWVAR 2
30548: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30549: LD_VAR 0 1
30553: PUSH
30554: LD_INT 1
30556: PUSH
30557: LD_INT 2
30559: PUSH
30560: LD_INT 3
30562: PUSH
30563: LD_INT 4
30565: PUSH
30566: LD_INT 5
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: IN
30576: IFFALSE 30588
// uc_nation := nation_american else
30578: LD_ADDR_OWVAR 21
30582: PUSH
30583: LD_INT 1
30585: ST_TO_ADDR
30586: GO 30631
// if chassis in [ 11 , 12 , 13 , 14 ] then
30588: LD_VAR 0 1
30592: PUSH
30593: LD_INT 11
30595: PUSH
30596: LD_INT 12
30598: PUSH
30599: LD_INT 13
30601: PUSH
30602: LD_INT 14
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: IN
30611: IFFALSE 30623
// uc_nation := nation_arabian else
30613: LD_ADDR_OWVAR 21
30617: PUSH
30618: LD_INT 2
30620: ST_TO_ADDR
30621: GO 30631
// uc_nation := nation_russian ;
30623: LD_ADDR_OWVAR 21
30627: PUSH
30628: LD_INT 3
30630: ST_TO_ADDR
// vc_chassis := chassis ;
30631: LD_ADDR_OWVAR 37
30635: PUSH
30636: LD_VAR 0 1
30640: ST_TO_ADDR
// vc_engine := engine ;
30641: LD_ADDR_OWVAR 39
30645: PUSH
30646: LD_VAR 0 2
30650: ST_TO_ADDR
// vc_control := control ;
30651: LD_ADDR_OWVAR 38
30655: PUSH
30656: LD_VAR 0 3
30660: ST_TO_ADDR
// vc_weapon := weapon ;
30661: LD_ADDR_OWVAR 40
30665: PUSH
30666: LD_VAR 0 4
30670: ST_TO_ADDR
// un := CreateVehicle ;
30671: LD_ADDR_VAR 0 8
30675: PUSH
30676: CALL_OW 45
30680: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30681: LD_VAR 0 8
30685: PPUSH
30686: LD_INT 0
30688: PPUSH
30689: LD_INT 5
30691: PPUSH
30692: CALL_OW 12
30696: PPUSH
30697: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30701: LD_VAR 0 8
30705: PPUSH
30706: LD_VAR 0 5
30710: PPUSH
30711: LD_VAR 0 6
30715: PPUSH
30716: LD_INT 1
30718: PPUSH
30719: CALL_OW 48
// end ;
30723: LD_VAR 0 7
30727: RET
// export hInvincible ; every 1 do
30728: GO 30730
30730: DISABLE
// hInvincible := [ ] ;
30731: LD_ADDR_EXP 94
30735: PUSH
30736: EMPTY
30737: ST_TO_ADDR
30738: END
// every 10 do var i ;
30739: GO 30741
30741: DISABLE
30742: LD_INT 0
30744: PPUSH
// begin enable ;
30745: ENABLE
// if not hInvincible then
30746: LD_EXP 94
30750: NOT
30751: IFFALSE 30755
// exit ;
30753: GO 30799
// for i in hInvincible do
30755: LD_ADDR_VAR 0 1
30759: PUSH
30760: LD_EXP 94
30764: PUSH
30765: FOR_IN
30766: IFFALSE 30797
// if GetLives ( i ) < 1000 then
30768: LD_VAR 0 1
30772: PPUSH
30773: CALL_OW 256
30777: PUSH
30778: LD_INT 1000
30780: LESS
30781: IFFALSE 30795
// SetLives ( i , 1000 ) ;
30783: LD_VAR 0 1
30787: PPUSH
30788: LD_INT 1000
30790: PPUSH
30791: CALL_OW 234
30795: GO 30765
30797: POP
30798: POP
// end ;
30799: PPOPN 1
30801: END
// export function hHackInvincible ; var i ; begin
30802: LD_INT 0
30804: PPUSH
30805: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30806: LD_ADDR_VAR 0 2
30810: PUSH
30811: LD_INT 2
30813: PUSH
30814: LD_INT 21
30816: PUSH
30817: LD_INT 1
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 21
30826: PUSH
30827: LD_INT 2
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: LIST
30838: PPUSH
30839: CALL_OW 69
30843: PUSH
30844: FOR_IN
30845: IFFALSE 30906
// if IsSelected ( i ) then
30847: LD_VAR 0 2
30851: PPUSH
30852: CALL_OW 306
30856: IFFALSE 30904
// begin if i in hInvincible then
30858: LD_VAR 0 2
30862: PUSH
30863: LD_EXP 94
30867: IN
30868: IFFALSE 30888
// hInvincible := hInvincible diff i else
30870: LD_ADDR_EXP 94
30874: PUSH
30875: LD_EXP 94
30879: PUSH
30880: LD_VAR 0 2
30884: DIFF
30885: ST_TO_ADDR
30886: GO 30904
// hInvincible := hInvincible union i ;
30888: LD_ADDR_EXP 94
30892: PUSH
30893: LD_EXP 94
30897: PUSH
30898: LD_VAR 0 2
30902: UNION
30903: ST_TO_ADDR
// end ;
30904: GO 30844
30906: POP
30907: POP
// end ;
30908: LD_VAR 0 1
30912: RET
// export function hHackInvisible ; var i , j ; begin
30913: LD_INT 0
30915: PPUSH
30916: PPUSH
30917: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30918: LD_ADDR_VAR 0 2
30922: PUSH
30923: LD_INT 21
30925: PUSH
30926: LD_INT 1
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PPUSH
30933: CALL_OW 69
30937: PUSH
30938: FOR_IN
30939: IFFALSE 30963
// if IsSelected ( i ) then
30941: LD_VAR 0 2
30945: PPUSH
30946: CALL_OW 306
30950: IFFALSE 30961
// ComForceInvisible ( i ) ;
30952: LD_VAR 0 2
30956: PPUSH
30957: CALL_OW 496
30961: GO 30938
30963: POP
30964: POP
// end ;
30965: LD_VAR 0 1
30969: RET
// export function hHackChangeYourSide ; begin
30970: LD_INT 0
30972: PPUSH
// if your_side = 8 then
30973: LD_OWVAR 2
30977: PUSH
30978: LD_INT 8
30980: EQUAL
30981: IFFALSE 30993
// your_side := 0 else
30983: LD_ADDR_OWVAR 2
30987: PUSH
30988: LD_INT 0
30990: ST_TO_ADDR
30991: GO 31007
// your_side := your_side + 1 ;
30993: LD_ADDR_OWVAR 2
30997: PUSH
30998: LD_OWVAR 2
31002: PUSH
31003: LD_INT 1
31005: PLUS
31006: ST_TO_ADDR
// end ;
31007: LD_VAR 0 1
31011: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31012: LD_INT 0
31014: PPUSH
31015: PPUSH
31016: PPUSH
// for i in all_units do
31017: LD_ADDR_VAR 0 2
31021: PUSH
31022: LD_OWVAR 3
31026: PUSH
31027: FOR_IN
31028: IFFALSE 31106
// if IsSelected ( i ) then
31030: LD_VAR 0 2
31034: PPUSH
31035: CALL_OW 306
31039: IFFALSE 31104
// begin j := GetSide ( i ) ;
31041: LD_ADDR_VAR 0 3
31045: PUSH
31046: LD_VAR 0 2
31050: PPUSH
31051: CALL_OW 255
31055: ST_TO_ADDR
// if j = 8 then
31056: LD_VAR 0 3
31060: PUSH
31061: LD_INT 8
31063: EQUAL
31064: IFFALSE 31076
// j := 0 else
31066: LD_ADDR_VAR 0 3
31070: PUSH
31071: LD_INT 0
31073: ST_TO_ADDR
31074: GO 31090
// j := j + 1 ;
31076: LD_ADDR_VAR 0 3
31080: PUSH
31081: LD_VAR 0 3
31085: PUSH
31086: LD_INT 1
31088: PLUS
31089: ST_TO_ADDR
// SetSide ( i , j ) ;
31090: LD_VAR 0 2
31094: PPUSH
31095: LD_VAR 0 3
31099: PPUSH
31100: CALL_OW 235
// end ;
31104: GO 31027
31106: POP
31107: POP
// end ;
31108: LD_VAR 0 1
31112: RET
// export function hHackFog ; begin
31113: LD_INT 0
31115: PPUSH
// FogOff ( true ) ;
31116: LD_INT 1
31118: PPUSH
31119: CALL_OW 344
// end ;
31123: LD_VAR 0 1
31127: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31128: LD_INT 0
31130: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31131: LD_VAR 0 1
31135: PPUSH
31136: LD_VAR 0 2
31140: PPUSH
31141: LD_VAR 0 3
31145: PPUSH
31146: LD_INT 1
31148: PPUSH
31149: LD_INT 1
31151: PPUSH
31152: CALL_OW 483
// CenterOnXY ( x , y ) ;
31156: LD_VAR 0 2
31160: PPUSH
31161: LD_VAR 0 3
31165: PPUSH
31166: CALL_OW 84
// end ;
31170: LD_VAR 0 4
31174: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
31175: LD_INT 0
31177: PPUSH
31178: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
31179: LD_VAR 0 1
31183: NOT
31184: PUSH
31185: LD_VAR 0 2
31189: PPUSH
31190: LD_VAR 0 3
31194: PPUSH
31195: CALL_OW 488
31199: NOT
31200: OR
31201: PUSH
31202: LD_VAR 0 1
31206: PPUSH
31207: CALL_OW 266
31211: PUSH
31212: LD_INT 3
31214: NONEQUAL
31215: PUSH
31216: LD_VAR 0 1
31220: PPUSH
31221: CALL_OW 247
31225: PUSH
31226: LD_INT 1
31228: EQUAL
31229: NOT
31230: AND
31231: OR
31232: IFFALSE 31236
// exit ;
31234: GO 31385
// if GetType ( factory ) = unit_human then
31236: LD_VAR 0 1
31240: PPUSH
31241: CALL_OW 247
31245: PUSH
31246: LD_INT 1
31248: EQUAL
31249: IFFALSE 31266
// factory := IsInUnit ( factory ) ;
31251: LD_ADDR_VAR 0 1
31255: PUSH
31256: LD_VAR 0 1
31260: PPUSH
31261: CALL_OW 310
31265: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
31266: LD_VAR 0 1
31270: PPUSH
31271: CALL_OW 266
31275: PUSH
31276: LD_INT 3
31278: NONEQUAL
31279: IFFALSE 31283
// exit ;
31281: GO 31385
// if HexInfo ( x , y ) = factory then
31283: LD_VAR 0 2
31287: PPUSH
31288: LD_VAR 0 3
31292: PPUSH
31293: CALL_OW 428
31297: PUSH
31298: LD_VAR 0 1
31302: EQUAL
31303: IFFALSE 31330
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
31305: LD_ADDR_EXP 95
31309: PUSH
31310: LD_EXP 95
31314: PPUSH
31315: LD_VAR 0 1
31319: PPUSH
31320: LD_INT 0
31322: PPUSH
31323: CALL_OW 1
31327: ST_TO_ADDR
31328: GO 31381
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
31330: LD_ADDR_EXP 95
31334: PUSH
31335: LD_EXP 95
31339: PPUSH
31340: LD_VAR 0 1
31344: PPUSH
31345: LD_VAR 0 1
31349: PPUSH
31350: CALL_OW 255
31354: PUSH
31355: LD_VAR 0 1
31359: PUSH
31360: LD_VAR 0 2
31364: PUSH
31365: LD_VAR 0 3
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: PPUSH
31376: CALL_OW 1
31380: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31381: CALL 31390 0 0
// end ;
31385: LD_VAR 0 4
31389: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
31390: LD_INT 0
31392: PPUSH
31393: PPUSH
31394: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
31395: LD_STRING resetFactoryWaypoint();
31397: PPUSH
31398: CALL_OW 559
// if factoryWaypoints then
31402: LD_EXP 95
31406: IFFALSE 31532
// begin list := PrepareArray ( factoryWaypoints ) ;
31408: LD_ADDR_VAR 0 3
31412: PUSH
31413: LD_EXP 95
31417: PPUSH
31418: CALL 77854 0 1
31422: ST_TO_ADDR
// for i := 1 to list do
31423: LD_ADDR_VAR 0 2
31427: PUSH
31428: DOUBLE
31429: LD_INT 1
31431: DEC
31432: ST_TO_ADDR
31433: LD_VAR 0 3
31437: PUSH
31438: FOR_TO
31439: IFFALSE 31530
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31441: LD_STRING setFactoryWaypointXY(
31443: PUSH
31444: LD_VAR 0 3
31448: PUSH
31449: LD_VAR 0 2
31453: ARRAY
31454: PUSH
31455: LD_INT 1
31457: ARRAY
31458: STR
31459: PUSH
31460: LD_STRING ,
31462: STR
31463: PUSH
31464: LD_VAR 0 3
31468: PUSH
31469: LD_VAR 0 2
31473: ARRAY
31474: PUSH
31475: LD_INT 2
31477: ARRAY
31478: STR
31479: PUSH
31480: LD_STRING ,
31482: STR
31483: PUSH
31484: LD_VAR 0 3
31488: PUSH
31489: LD_VAR 0 2
31493: ARRAY
31494: PUSH
31495: LD_INT 3
31497: ARRAY
31498: STR
31499: PUSH
31500: LD_STRING ,
31502: STR
31503: PUSH
31504: LD_VAR 0 3
31508: PUSH
31509: LD_VAR 0 2
31513: ARRAY
31514: PUSH
31515: LD_INT 4
31517: ARRAY
31518: STR
31519: PUSH
31520: LD_STRING )
31522: STR
31523: PPUSH
31524: CALL_OW 559
31528: GO 31438
31530: POP
31531: POP
// end ; end ;
31532: LD_VAR 0 1
31536: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
31537: LD_INT 0
31539: PPUSH
// if HexInfo ( x , y ) = warehouse then
31540: LD_VAR 0 2
31544: PPUSH
31545: LD_VAR 0 3
31549: PPUSH
31550: CALL_OW 428
31554: PUSH
31555: LD_VAR 0 1
31559: EQUAL
31560: IFFALSE 31587
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
31562: LD_ADDR_EXP 96
31566: PUSH
31567: LD_EXP 96
31571: PPUSH
31572: LD_VAR 0 1
31576: PPUSH
31577: LD_INT 0
31579: PPUSH
31580: CALL_OW 1
31584: ST_TO_ADDR
31585: GO 31638
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
31587: LD_ADDR_EXP 96
31591: PUSH
31592: LD_EXP 96
31596: PPUSH
31597: LD_VAR 0 1
31601: PPUSH
31602: LD_VAR 0 1
31606: PPUSH
31607: CALL_OW 255
31611: PUSH
31612: LD_VAR 0 1
31616: PUSH
31617: LD_VAR 0 2
31621: PUSH
31622: LD_VAR 0 3
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: PPUSH
31633: CALL_OW 1
31637: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
31638: CALL 31647 0 0
// end ;
31642: LD_VAR 0 4
31646: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
31647: LD_INT 0
31649: PPUSH
31650: PPUSH
31651: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
31652: LD_STRING resetWarehouseGatheringPoints();
31654: PPUSH
31655: CALL_OW 559
// if warehouseGatheringPoints then
31659: LD_EXP 96
31663: IFFALSE 31789
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
31665: LD_ADDR_VAR 0 3
31669: PUSH
31670: LD_EXP 96
31674: PPUSH
31675: CALL 77854 0 1
31679: ST_TO_ADDR
// for i := 1 to list do
31680: LD_ADDR_VAR 0 2
31684: PUSH
31685: DOUBLE
31686: LD_INT 1
31688: DEC
31689: ST_TO_ADDR
31690: LD_VAR 0 3
31694: PUSH
31695: FOR_TO
31696: IFFALSE 31787
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31698: LD_STRING setWarehouseGatheringPointXY(
31700: PUSH
31701: LD_VAR 0 3
31705: PUSH
31706: LD_VAR 0 2
31710: ARRAY
31711: PUSH
31712: LD_INT 1
31714: ARRAY
31715: STR
31716: PUSH
31717: LD_STRING ,
31719: STR
31720: PUSH
31721: LD_VAR 0 3
31725: PUSH
31726: LD_VAR 0 2
31730: ARRAY
31731: PUSH
31732: LD_INT 2
31734: ARRAY
31735: STR
31736: PUSH
31737: LD_STRING ,
31739: STR
31740: PUSH
31741: LD_VAR 0 3
31745: PUSH
31746: LD_VAR 0 2
31750: ARRAY
31751: PUSH
31752: LD_INT 3
31754: ARRAY
31755: STR
31756: PUSH
31757: LD_STRING ,
31759: STR
31760: PUSH
31761: LD_VAR 0 3
31765: PUSH
31766: LD_VAR 0 2
31770: ARRAY
31771: PUSH
31772: LD_INT 4
31774: ARRAY
31775: STR
31776: PUSH
31777: LD_STRING )
31779: STR
31780: PPUSH
31781: CALL_OW 559
31785: GO 31695
31787: POP
31788: POP
// end ; end ;
31789: LD_VAR 0 1
31793: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
31794: LD_EXP 96
31798: IFFALSE 32483
31800: GO 31802
31802: DISABLE
31803: LD_INT 0
31805: PPUSH
31806: PPUSH
31807: PPUSH
31808: PPUSH
31809: PPUSH
31810: PPUSH
31811: PPUSH
31812: PPUSH
31813: PPUSH
// begin enable ;
31814: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
31815: LD_ADDR_VAR 0 3
31819: PUSH
31820: LD_EXP 96
31824: PPUSH
31825: CALL 77854 0 1
31829: ST_TO_ADDR
// if not list then
31830: LD_VAR 0 3
31834: NOT
31835: IFFALSE 31839
// exit ;
31837: GO 32483
// for i := 1 to list do
31839: LD_ADDR_VAR 0 1
31843: PUSH
31844: DOUBLE
31845: LD_INT 1
31847: DEC
31848: ST_TO_ADDR
31849: LD_VAR 0 3
31853: PUSH
31854: FOR_TO
31855: IFFALSE 32481
// begin depot := list [ i ] [ 2 ] ;
31857: LD_ADDR_VAR 0 8
31861: PUSH
31862: LD_VAR 0 3
31866: PUSH
31867: LD_VAR 0 1
31871: ARRAY
31872: PUSH
31873: LD_INT 2
31875: ARRAY
31876: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
31877: LD_ADDR_VAR 0 5
31881: PUSH
31882: LD_VAR 0 3
31886: PUSH
31887: LD_VAR 0 1
31891: ARRAY
31892: PUSH
31893: LD_INT 1
31895: ARRAY
31896: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
31897: LD_VAR 0 8
31901: PPUSH
31902: CALL_OW 301
31906: PUSH
31907: LD_VAR 0 5
31911: PUSH
31912: LD_VAR 0 8
31916: PPUSH
31917: CALL_OW 255
31921: NONEQUAL
31922: OR
31923: IFFALSE 31952
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
31925: LD_ADDR_EXP 96
31929: PUSH
31930: LD_EXP 96
31934: PPUSH
31935: LD_VAR 0 8
31939: PPUSH
31940: LD_INT 0
31942: PPUSH
31943: CALL_OW 1
31947: ST_TO_ADDR
// exit ;
31948: POP
31949: POP
31950: GO 32483
// end ; x := list [ i ] [ 3 ] ;
31952: LD_ADDR_VAR 0 6
31956: PUSH
31957: LD_VAR 0 3
31961: PUSH
31962: LD_VAR 0 1
31966: ARRAY
31967: PUSH
31968: LD_INT 3
31970: ARRAY
31971: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
31972: LD_ADDR_VAR 0 7
31976: PUSH
31977: LD_VAR 0 3
31981: PUSH
31982: LD_VAR 0 1
31986: ARRAY
31987: PUSH
31988: LD_INT 4
31990: ARRAY
31991: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
31992: LD_ADDR_VAR 0 9
31996: PUSH
31997: LD_VAR 0 6
32001: PPUSH
32002: LD_VAR 0 7
32006: PPUSH
32007: LD_INT 16
32009: PPUSH
32010: CALL 76442 0 3
32014: ST_TO_ADDR
// if not cratesNearbyPoint then
32015: LD_VAR 0 9
32019: NOT
32020: IFFALSE 32026
// exit ;
32022: POP
32023: POP
32024: GO 32483
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
32026: LD_ADDR_VAR 0 4
32030: PUSH
32031: LD_INT 22
32033: PUSH
32034: LD_VAR 0 5
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 3
32045: PUSH
32046: LD_INT 60
32048: PUSH
32049: EMPTY
32050: LIST
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 91
32058: PUSH
32059: LD_VAR 0 8
32063: PUSH
32064: LD_INT 6
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 2
32074: PUSH
32075: LD_INT 25
32077: PUSH
32078: LD_INT 2
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 25
32087: PUSH
32088: LD_INT 16
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: LIST
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: PPUSH
32106: CALL_OW 69
32110: PUSH
32111: LD_VAR 0 8
32115: PPUSH
32116: CALL_OW 313
32120: PPUSH
32121: LD_INT 3
32123: PUSH
32124: LD_INT 60
32126: PUSH
32127: EMPTY
32128: LIST
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 2
32136: PUSH
32137: LD_INT 25
32139: PUSH
32140: LD_INT 2
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 25
32149: PUSH
32150: LD_INT 16
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: LIST
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PPUSH
32166: CALL_OW 72
32170: UNION
32171: ST_TO_ADDR
// if tmp then
32172: LD_VAR 0 4
32176: IFFALSE 32256
// begin tmp := ShrinkArray ( tmp , 3 ) ;
32178: LD_ADDR_VAR 0 4
32182: PUSH
32183: LD_VAR 0 4
32187: PPUSH
32188: LD_INT 3
32190: PPUSH
32191: CALL 74411 0 2
32195: ST_TO_ADDR
// for j in tmp do
32196: LD_ADDR_VAR 0 2
32200: PUSH
32201: LD_VAR 0 4
32205: PUSH
32206: FOR_IN
32207: IFFALSE 32250
// begin if IsInUnit ( j ) then
32209: LD_VAR 0 2
32213: PPUSH
32214: CALL_OW 310
32218: IFFALSE 32229
// ComExit ( j ) ;
32220: LD_VAR 0 2
32224: PPUSH
32225: CALL 74494 0 1
// AddComCollect ( j , x , y ) ;
32229: LD_VAR 0 2
32233: PPUSH
32234: LD_VAR 0 6
32238: PPUSH
32239: LD_VAR 0 7
32243: PPUSH
32244: CALL_OW 177
// end ;
32248: GO 32206
32250: POP
32251: POP
// exit ;
32252: POP
32253: POP
32254: GO 32483
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
32256: LD_ADDR_VAR 0 4
32260: PUSH
32261: LD_INT 22
32263: PUSH
32264: LD_VAR 0 5
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 91
32275: PUSH
32276: LD_VAR 0 8
32280: PUSH
32281: LD_INT 8
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 2
32291: PUSH
32292: LD_INT 34
32294: PUSH
32295: LD_INT 12
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 34
32304: PUSH
32305: LD_INT 51
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 34
32314: PUSH
32315: LD_INT 32
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 34
32324: PUSH
32325: LD_INT 89
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: LIST
32343: PPUSH
32344: CALL_OW 69
32348: ST_TO_ADDR
// if tmp then
32349: LD_VAR 0 4
32353: IFFALSE 32479
// begin for j in tmp do
32355: LD_ADDR_VAR 0 2
32359: PUSH
32360: LD_VAR 0 4
32364: PUSH
32365: FOR_IN
32366: IFFALSE 32477
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
32368: LD_VAR 0 2
32372: PPUSH
32373: CALL_OW 262
32377: PUSH
32378: LD_INT 3
32380: EQUAL
32381: PUSH
32382: LD_VAR 0 2
32386: PPUSH
32387: CALL_OW 261
32391: PUSH
32392: LD_INT 20
32394: GREATER
32395: OR
32396: PUSH
32397: LD_VAR 0 2
32401: PPUSH
32402: CALL_OW 314
32406: NOT
32407: AND
32408: PUSH
32409: LD_VAR 0 2
32413: PPUSH
32414: CALL_OW 263
32418: PUSH
32419: LD_INT 1
32421: NONEQUAL
32422: PUSH
32423: LD_VAR 0 2
32427: PPUSH
32428: CALL_OW 311
32432: OR
32433: AND
32434: IFFALSE 32475
// begin ComCollect ( j , x , y ) ;
32436: LD_VAR 0 2
32440: PPUSH
32441: LD_VAR 0 6
32445: PPUSH
32446: LD_VAR 0 7
32450: PPUSH
32451: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
32455: LD_VAR 0 2
32459: PPUSH
32460: LD_VAR 0 8
32464: PPUSH
32465: CALL_OW 172
// exit ;
32469: POP
32470: POP
32471: POP
32472: POP
32473: GO 32483
// end ;
32475: GO 32365
32477: POP
32478: POP
// end ; end ;
32479: GO 31854
32481: POP
32482: POP
// end ; end_of_file
32483: PPOPN 9
32485: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32486: LD_INT 0
32488: PPUSH
32489: PPUSH
32490: PPUSH
32491: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32492: LD_VAR 0 1
32496: PPUSH
32497: CALL_OW 264
32501: PUSH
32502: LD_INT 91
32504: EQUAL
32505: IFFALSE 32577
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32507: LD_INT 68
32509: PPUSH
32510: LD_VAR 0 1
32514: PPUSH
32515: CALL_OW 255
32519: PPUSH
32520: CALL_OW 321
32524: PUSH
32525: LD_INT 2
32527: EQUAL
32528: IFFALSE 32540
// eff := 70 else
32530: LD_ADDR_VAR 0 4
32534: PUSH
32535: LD_INT 70
32537: ST_TO_ADDR
32538: GO 32548
// eff := 30 ;
32540: LD_ADDR_VAR 0 4
32544: PUSH
32545: LD_INT 30
32547: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32548: LD_VAR 0 1
32552: PPUSH
32553: CALL_OW 250
32557: PPUSH
32558: LD_VAR 0 1
32562: PPUSH
32563: CALL_OW 251
32567: PPUSH
32568: LD_VAR 0 4
32572: PPUSH
32573: CALL_OW 495
// end ; end ;
32577: LD_VAR 0 2
32581: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32582: LD_INT 0
32584: PPUSH
// end ;
32585: LD_VAR 0 4
32589: RET
// export function SOS_Command ( cmd ) ; begin
32590: LD_INT 0
32592: PPUSH
// end ;
32593: LD_VAR 0 2
32597: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32598: LD_INT 0
32600: PPUSH
// end ;
32601: LD_VAR 0 6
32605: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
32606: LD_INT 0
32608: PPUSH
32609: PPUSH
// if not vehicle or not factory then
32610: LD_VAR 0 1
32614: NOT
32615: PUSH
32616: LD_VAR 0 2
32620: NOT
32621: OR
32622: IFFALSE 32626
// exit ;
32624: GO 32857
// if factoryWaypoints >= factory then
32626: LD_EXP 95
32630: PUSH
32631: LD_VAR 0 2
32635: GREATEREQUAL
32636: IFFALSE 32857
// if factoryWaypoints [ factory ] then
32638: LD_EXP 95
32642: PUSH
32643: LD_VAR 0 2
32647: ARRAY
32648: IFFALSE 32857
// begin if GetControl ( vehicle ) = control_manual then
32650: LD_VAR 0 1
32654: PPUSH
32655: CALL_OW 263
32659: PUSH
32660: LD_INT 1
32662: EQUAL
32663: IFFALSE 32744
// begin driver := IsDrivenBy ( vehicle ) ;
32665: LD_ADDR_VAR 0 4
32669: PUSH
32670: LD_VAR 0 1
32674: PPUSH
32675: CALL_OW 311
32679: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32680: LD_VAR 0 4
32684: PPUSH
32685: LD_EXP 95
32689: PUSH
32690: LD_VAR 0 2
32694: ARRAY
32695: PUSH
32696: LD_INT 3
32698: ARRAY
32699: PPUSH
32700: LD_EXP 95
32704: PUSH
32705: LD_VAR 0 2
32709: ARRAY
32710: PUSH
32711: LD_INT 4
32713: ARRAY
32714: PPUSH
32715: CALL_OW 171
// AddComExitVehicle ( driver ) ;
32719: LD_VAR 0 4
32723: PPUSH
32724: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
32728: LD_VAR 0 4
32732: PPUSH
32733: LD_VAR 0 2
32737: PPUSH
32738: CALL_OW 180
// end else
32742: GO 32857
// if GetControl ( vehicle ) = control_remote then
32744: LD_VAR 0 1
32748: PPUSH
32749: CALL_OW 263
32753: PUSH
32754: LD_INT 2
32756: EQUAL
32757: IFFALSE 32818
// begin wait ( 0 0$2 ) ;
32759: LD_INT 70
32761: PPUSH
32762: CALL_OW 67
// if Connect ( vehicle ) then
32766: LD_VAR 0 1
32770: PPUSH
32771: CALL 44715 0 1
32775: IFFALSE 32816
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32777: LD_VAR 0 1
32781: PPUSH
32782: LD_EXP 95
32786: PUSH
32787: LD_VAR 0 2
32791: ARRAY
32792: PUSH
32793: LD_INT 3
32795: ARRAY
32796: PPUSH
32797: LD_EXP 95
32801: PUSH
32802: LD_VAR 0 2
32806: ARRAY
32807: PUSH
32808: LD_INT 4
32810: ARRAY
32811: PPUSH
32812: CALL_OW 171
// end else
32816: GO 32857
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32818: LD_VAR 0 1
32822: PPUSH
32823: LD_EXP 95
32827: PUSH
32828: LD_VAR 0 2
32832: ARRAY
32833: PUSH
32834: LD_INT 3
32836: ARRAY
32837: PPUSH
32838: LD_EXP 95
32842: PUSH
32843: LD_VAR 0 2
32847: ARRAY
32848: PUSH
32849: LD_INT 4
32851: ARRAY
32852: PPUSH
32853: CALL_OW 171
// end ; end ;
32857: LD_VAR 0 3
32861: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32862: LD_INT 0
32864: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32865: LD_VAR 0 1
32869: PUSH
32870: LD_INT 250
32872: EQUAL
32873: PUSH
32874: LD_VAR 0 2
32878: PPUSH
32879: CALL_OW 264
32883: PUSH
32884: LD_INT 81
32886: EQUAL
32887: AND
32888: IFFALSE 32909
// MinerPlaceMine ( unit , x , y ) ;
32890: LD_VAR 0 2
32894: PPUSH
32895: LD_VAR 0 4
32899: PPUSH
32900: LD_VAR 0 5
32904: PPUSH
32905: CALL 35294 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32909: LD_VAR 0 1
32913: PUSH
32914: LD_INT 251
32916: EQUAL
32917: PUSH
32918: LD_VAR 0 2
32922: PPUSH
32923: CALL_OW 264
32927: PUSH
32928: LD_INT 81
32930: EQUAL
32931: AND
32932: IFFALSE 32953
// MinerDetonateMine ( unit , x , y ) ;
32934: LD_VAR 0 2
32938: PPUSH
32939: LD_VAR 0 4
32943: PPUSH
32944: LD_VAR 0 5
32948: PPUSH
32949: CALL 35569 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32953: LD_VAR 0 1
32957: PUSH
32958: LD_INT 252
32960: EQUAL
32961: PUSH
32962: LD_VAR 0 2
32966: PPUSH
32967: CALL_OW 264
32971: PUSH
32972: LD_INT 81
32974: EQUAL
32975: AND
32976: IFFALSE 32997
// MinerCreateMinefield ( unit , x , y ) ;
32978: LD_VAR 0 2
32982: PPUSH
32983: LD_VAR 0 4
32987: PPUSH
32988: LD_VAR 0 5
32992: PPUSH
32993: CALL 35986 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32997: LD_VAR 0 1
33001: PUSH
33002: LD_INT 253
33004: EQUAL
33005: PUSH
33006: LD_VAR 0 2
33010: PPUSH
33011: CALL_OW 257
33015: PUSH
33016: LD_INT 5
33018: EQUAL
33019: AND
33020: IFFALSE 33041
// ComBinocular ( unit , x , y ) ;
33022: LD_VAR 0 2
33026: PPUSH
33027: LD_VAR 0 4
33031: PPUSH
33032: LD_VAR 0 5
33036: PPUSH
33037: CALL 36355 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33041: LD_VAR 0 1
33045: PUSH
33046: LD_INT 254
33048: EQUAL
33049: PUSH
33050: LD_VAR 0 2
33054: PPUSH
33055: CALL_OW 264
33059: PUSH
33060: LD_INT 99
33062: EQUAL
33063: AND
33064: PUSH
33065: LD_VAR 0 3
33069: PPUSH
33070: CALL_OW 263
33074: PUSH
33075: LD_INT 3
33077: EQUAL
33078: AND
33079: IFFALSE 33095
// HackDestroyVehicle ( unit , selectedUnit ) ;
33081: LD_VAR 0 2
33085: PPUSH
33086: LD_VAR 0 3
33090: PPUSH
33091: CALL 34658 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33095: LD_VAR 0 1
33099: PUSH
33100: LD_INT 255
33102: EQUAL
33103: PUSH
33104: LD_VAR 0 2
33108: PPUSH
33109: CALL_OW 264
33113: PUSH
33114: LD_INT 14
33116: PUSH
33117: LD_INT 53
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: IN
33124: AND
33125: PUSH
33126: LD_VAR 0 4
33130: PPUSH
33131: LD_VAR 0 5
33135: PPUSH
33136: CALL_OW 488
33140: AND
33141: IFFALSE 33165
// CutTreeXYR ( unit , x , y , 12 ) ;
33143: LD_VAR 0 2
33147: PPUSH
33148: LD_VAR 0 4
33152: PPUSH
33153: LD_VAR 0 5
33157: PPUSH
33158: LD_INT 12
33160: PPUSH
33161: CALL 33228 0 4
// if cmd = 256 then
33165: LD_VAR 0 1
33169: PUSH
33170: LD_INT 256
33172: EQUAL
33173: IFFALSE 33194
// SetFactoryWaypoint ( unit , x , y ) ;
33175: LD_VAR 0 2
33179: PPUSH
33180: LD_VAR 0 4
33184: PPUSH
33185: LD_VAR 0 5
33189: PPUSH
33190: CALL 31175 0 3
// if cmd = 257 then
33194: LD_VAR 0 1
33198: PUSH
33199: LD_INT 257
33201: EQUAL
33202: IFFALSE 33223
// SetWarehouseGatheringPoint ( unit , x , y ) ;
33204: LD_VAR 0 2
33208: PPUSH
33209: LD_VAR 0 4
33213: PPUSH
33214: LD_VAR 0 5
33218: PPUSH
33219: CALL 31537 0 3
// end ;
33223: LD_VAR 0 6
33227: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33228: LD_INT 0
33230: PPUSH
33231: PPUSH
33232: PPUSH
33233: PPUSH
33234: PPUSH
33235: PPUSH
33236: PPUSH
33237: PPUSH
33238: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33239: LD_VAR 0 1
33243: NOT
33244: PUSH
33245: LD_VAR 0 2
33249: PPUSH
33250: LD_VAR 0 3
33254: PPUSH
33255: CALL_OW 488
33259: NOT
33260: OR
33261: PUSH
33262: LD_VAR 0 4
33266: NOT
33267: OR
33268: IFFALSE 33272
// exit ;
33270: GO 33612
// list := [ ] ;
33272: LD_ADDR_VAR 0 13
33276: PUSH
33277: EMPTY
33278: ST_TO_ADDR
// if x - r < 0 then
33279: LD_VAR 0 2
33283: PUSH
33284: LD_VAR 0 4
33288: MINUS
33289: PUSH
33290: LD_INT 0
33292: LESS
33293: IFFALSE 33305
// min_x := 0 else
33295: LD_ADDR_VAR 0 7
33299: PUSH
33300: LD_INT 0
33302: ST_TO_ADDR
33303: GO 33321
// min_x := x - r ;
33305: LD_ADDR_VAR 0 7
33309: PUSH
33310: LD_VAR 0 2
33314: PUSH
33315: LD_VAR 0 4
33319: MINUS
33320: ST_TO_ADDR
// if y - r < 0 then
33321: LD_VAR 0 3
33325: PUSH
33326: LD_VAR 0 4
33330: MINUS
33331: PUSH
33332: LD_INT 0
33334: LESS
33335: IFFALSE 33347
// min_y := 0 else
33337: LD_ADDR_VAR 0 8
33341: PUSH
33342: LD_INT 0
33344: ST_TO_ADDR
33345: GO 33363
// min_y := y - r ;
33347: LD_ADDR_VAR 0 8
33351: PUSH
33352: LD_VAR 0 3
33356: PUSH
33357: LD_VAR 0 4
33361: MINUS
33362: ST_TO_ADDR
// max_x := x + r ;
33363: LD_ADDR_VAR 0 9
33367: PUSH
33368: LD_VAR 0 2
33372: PUSH
33373: LD_VAR 0 4
33377: PLUS
33378: ST_TO_ADDR
// max_y := y + r ;
33379: LD_ADDR_VAR 0 10
33383: PUSH
33384: LD_VAR 0 3
33388: PUSH
33389: LD_VAR 0 4
33393: PLUS
33394: ST_TO_ADDR
// for _x = min_x to max_x do
33395: LD_ADDR_VAR 0 11
33399: PUSH
33400: DOUBLE
33401: LD_VAR 0 7
33405: DEC
33406: ST_TO_ADDR
33407: LD_VAR 0 9
33411: PUSH
33412: FOR_TO
33413: IFFALSE 33530
// for _y = min_y to max_y do
33415: LD_ADDR_VAR 0 12
33419: PUSH
33420: DOUBLE
33421: LD_VAR 0 8
33425: DEC
33426: ST_TO_ADDR
33427: LD_VAR 0 10
33431: PUSH
33432: FOR_TO
33433: IFFALSE 33526
// begin if not ValidHex ( _x , _y ) then
33435: LD_VAR 0 11
33439: PPUSH
33440: LD_VAR 0 12
33444: PPUSH
33445: CALL_OW 488
33449: NOT
33450: IFFALSE 33454
// continue ;
33452: GO 33432
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33454: LD_VAR 0 11
33458: PPUSH
33459: LD_VAR 0 12
33463: PPUSH
33464: CALL_OW 351
33468: PUSH
33469: LD_VAR 0 11
33473: PPUSH
33474: LD_VAR 0 12
33478: PPUSH
33479: CALL_OW 554
33483: AND
33484: IFFALSE 33524
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33486: LD_ADDR_VAR 0 13
33490: PUSH
33491: LD_VAR 0 13
33495: PPUSH
33496: LD_VAR 0 13
33500: PUSH
33501: LD_INT 1
33503: PLUS
33504: PPUSH
33505: LD_VAR 0 11
33509: PUSH
33510: LD_VAR 0 12
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PPUSH
33519: CALL_OW 2
33523: ST_TO_ADDR
// end ;
33524: GO 33432
33526: POP
33527: POP
33528: GO 33412
33530: POP
33531: POP
// if not list then
33532: LD_VAR 0 13
33536: NOT
33537: IFFALSE 33541
// exit ;
33539: GO 33612
// for i in list do
33541: LD_ADDR_VAR 0 6
33545: PUSH
33546: LD_VAR 0 13
33550: PUSH
33551: FOR_IN
33552: IFFALSE 33610
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33554: LD_VAR 0 1
33558: PPUSH
33559: LD_STRING M
33561: PUSH
33562: LD_VAR 0 6
33566: PUSH
33567: LD_INT 1
33569: ARRAY
33570: PUSH
33571: LD_VAR 0 6
33575: PUSH
33576: LD_INT 2
33578: ARRAY
33579: PUSH
33580: LD_INT 0
33582: PUSH
33583: LD_INT 0
33585: PUSH
33586: LD_INT 0
33588: PUSH
33589: LD_INT 0
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: PUSH
33601: EMPTY
33602: LIST
33603: PPUSH
33604: CALL_OW 447
33608: GO 33551
33610: POP
33611: POP
// end ;
33612: LD_VAR 0 5
33616: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33617: LD_EXP 98
33621: NOT
33622: IFFALSE 33672
33624: GO 33626
33626: DISABLE
// begin initHack := true ;
33627: LD_ADDR_EXP 98
33631: PUSH
33632: LD_INT 1
33634: ST_TO_ADDR
// hackTanks := [ ] ;
33635: LD_ADDR_EXP 99
33639: PUSH
33640: EMPTY
33641: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33642: LD_ADDR_EXP 100
33646: PUSH
33647: EMPTY
33648: ST_TO_ADDR
// hackLimit := 3 ;
33649: LD_ADDR_EXP 101
33653: PUSH
33654: LD_INT 3
33656: ST_TO_ADDR
// hackDist := 12 ;
33657: LD_ADDR_EXP 102
33661: PUSH
33662: LD_INT 12
33664: ST_TO_ADDR
// hackCounter := [ ] ;
33665: LD_ADDR_EXP 103
33669: PUSH
33670: EMPTY
33671: ST_TO_ADDR
// end ;
33672: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33673: LD_EXP 98
33677: PUSH
33678: LD_INT 34
33680: PUSH
33681: LD_INT 99
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PPUSH
33688: CALL_OW 69
33692: AND
33693: IFFALSE 33946
33695: GO 33697
33697: DISABLE
33698: LD_INT 0
33700: PPUSH
33701: PPUSH
// begin enable ;
33702: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33703: LD_ADDR_VAR 0 1
33707: PUSH
33708: LD_INT 34
33710: PUSH
33711: LD_INT 99
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PPUSH
33718: CALL_OW 69
33722: PUSH
33723: FOR_IN
33724: IFFALSE 33944
// begin if not i in hackTanks then
33726: LD_VAR 0 1
33730: PUSH
33731: LD_EXP 99
33735: IN
33736: NOT
33737: IFFALSE 33820
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33739: LD_ADDR_EXP 99
33743: PUSH
33744: LD_EXP 99
33748: PPUSH
33749: LD_EXP 99
33753: PUSH
33754: LD_INT 1
33756: PLUS
33757: PPUSH
33758: LD_VAR 0 1
33762: PPUSH
33763: CALL_OW 1
33767: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33768: LD_ADDR_EXP 100
33772: PUSH
33773: LD_EXP 100
33777: PPUSH
33778: LD_EXP 100
33782: PUSH
33783: LD_INT 1
33785: PLUS
33786: PPUSH
33787: EMPTY
33788: PPUSH
33789: CALL_OW 1
33793: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33794: LD_ADDR_EXP 103
33798: PUSH
33799: LD_EXP 103
33803: PPUSH
33804: LD_EXP 103
33808: PUSH
33809: LD_INT 1
33811: PLUS
33812: PPUSH
33813: EMPTY
33814: PPUSH
33815: CALL_OW 1
33819: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33820: LD_VAR 0 1
33824: PPUSH
33825: CALL_OW 302
33829: NOT
33830: IFFALSE 33843
// begin HackUnlinkAll ( i ) ;
33832: LD_VAR 0 1
33836: PPUSH
33837: CALL 33949 0 1
// continue ;
33841: GO 33723
// end ; HackCheckCapturedStatus ( i ) ;
33843: LD_VAR 0 1
33847: PPUSH
33848: CALL 34392 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33852: LD_ADDR_VAR 0 2
33856: PUSH
33857: LD_INT 81
33859: PUSH
33860: LD_VAR 0 1
33864: PPUSH
33865: CALL_OW 255
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 33
33876: PUSH
33877: LD_INT 3
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 91
33886: PUSH
33887: LD_VAR 0 1
33891: PUSH
33892: LD_EXP 102
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 50
33904: PUSH
33905: EMPTY
33906: LIST
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: PPUSH
33914: CALL_OW 69
33918: ST_TO_ADDR
// if not tmp then
33919: LD_VAR 0 2
33923: NOT
33924: IFFALSE 33928
// continue ;
33926: GO 33723
// HackLink ( i , tmp ) ;
33928: LD_VAR 0 1
33932: PPUSH
33933: LD_VAR 0 2
33937: PPUSH
33938: CALL 34085 0 2
// end ;
33942: GO 33723
33944: POP
33945: POP
// end ;
33946: PPOPN 2
33948: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33949: LD_INT 0
33951: PPUSH
33952: PPUSH
33953: PPUSH
// if not hack in hackTanks then
33954: LD_VAR 0 1
33958: PUSH
33959: LD_EXP 99
33963: IN
33964: NOT
33965: IFFALSE 33969
// exit ;
33967: GO 34080
// index := GetElementIndex ( hackTanks , hack ) ;
33969: LD_ADDR_VAR 0 4
33973: PUSH
33974: LD_EXP 99
33978: PPUSH
33979: LD_VAR 0 1
33983: PPUSH
33984: CALL 41522 0 2
33988: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33989: LD_EXP 100
33993: PUSH
33994: LD_VAR 0 4
33998: ARRAY
33999: IFFALSE 34080
// begin for i in hackTanksCaptured [ index ] do
34001: LD_ADDR_VAR 0 3
34005: PUSH
34006: LD_EXP 100
34010: PUSH
34011: LD_VAR 0 4
34015: ARRAY
34016: PUSH
34017: FOR_IN
34018: IFFALSE 34044
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34020: LD_VAR 0 3
34024: PUSH
34025: LD_INT 1
34027: ARRAY
34028: PPUSH
34029: LD_VAR 0 3
34033: PUSH
34034: LD_INT 2
34036: ARRAY
34037: PPUSH
34038: CALL_OW 235
34042: GO 34017
34044: POP
34045: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34046: LD_ADDR_EXP 100
34050: PUSH
34051: LD_EXP 100
34055: PPUSH
34056: LD_VAR 0 4
34060: PPUSH
34061: EMPTY
34062: PPUSH
34063: CALL_OW 1
34067: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34068: LD_VAR 0 1
34072: PPUSH
34073: LD_INT 0
34075: PPUSH
34076: CALL_OW 505
// end ; end ;
34080: LD_VAR 0 2
34084: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34085: LD_INT 0
34087: PPUSH
34088: PPUSH
34089: PPUSH
// if not hack in hackTanks or not vehicles then
34090: LD_VAR 0 1
34094: PUSH
34095: LD_EXP 99
34099: IN
34100: NOT
34101: PUSH
34102: LD_VAR 0 2
34106: NOT
34107: OR
34108: IFFALSE 34112
// exit ;
34110: GO 34387
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34112: LD_ADDR_VAR 0 2
34116: PUSH
34117: LD_VAR 0 1
34121: PPUSH
34122: LD_VAR 0 2
34126: PPUSH
34127: LD_INT 1
34129: PPUSH
34130: LD_INT 1
34132: PPUSH
34133: CALL 42172 0 4
34137: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34138: LD_ADDR_VAR 0 5
34142: PUSH
34143: LD_EXP 99
34147: PPUSH
34148: LD_VAR 0 1
34152: PPUSH
34153: CALL 41522 0 2
34157: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34158: LD_EXP 100
34162: PUSH
34163: LD_VAR 0 5
34167: ARRAY
34168: PUSH
34169: LD_EXP 101
34173: LESS
34174: IFFALSE 34363
// begin for i := 1 to vehicles do
34176: LD_ADDR_VAR 0 4
34180: PUSH
34181: DOUBLE
34182: LD_INT 1
34184: DEC
34185: ST_TO_ADDR
34186: LD_VAR 0 2
34190: PUSH
34191: FOR_TO
34192: IFFALSE 34361
// begin if hackTanksCaptured [ index ] = hackLimit then
34194: LD_EXP 100
34198: PUSH
34199: LD_VAR 0 5
34203: ARRAY
34204: PUSH
34205: LD_EXP 101
34209: EQUAL
34210: IFFALSE 34214
// break ;
34212: GO 34361
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34214: LD_ADDR_EXP 103
34218: PUSH
34219: LD_EXP 103
34223: PPUSH
34224: LD_VAR 0 5
34228: PPUSH
34229: LD_EXP 103
34233: PUSH
34234: LD_VAR 0 5
34238: ARRAY
34239: PUSH
34240: LD_INT 1
34242: PLUS
34243: PPUSH
34244: CALL_OW 1
34248: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34249: LD_ADDR_EXP 100
34253: PUSH
34254: LD_EXP 100
34258: PPUSH
34259: LD_VAR 0 5
34263: PUSH
34264: LD_EXP 100
34268: PUSH
34269: LD_VAR 0 5
34273: ARRAY
34274: PUSH
34275: LD_INT 1
34277: PLUS
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PPUSH
34283: LD_VAR 0 2
34287: PUSH
34288: LD_VAR 0 4
34292: ARRAY
34293: PUSH
34294: LD_VAR 0 2
34298: PUSH
34299: LD_VAR 0 4
34303: ARRAY
34304: PPUSH
34305: CALL_OW 255
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PPUSH
34314: CALL 41737 0 3
34318: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34319: LD_VAR 0 2
34323: PUSH
34324: LD_VAR 0 4
34328: ARRAY
34329: PPUSH
34330: LD_VAR 0 1
34334: PPUSH
34335: CALL_OW 255
34339: PPUSH
34340: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34344: LD_VAR 0 2
34348: PUSH
34349: LD_VAR 0 4
34353: ARRAY
34354: PPUSH
34355: CALL_OW 141
// end ;
34359: GO 34191
34361: POP
34362: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34363: LD_VAR 0 1
34367: PPUSH
34368: LD_EXP 100
34372: PUSH
34373: LD_VAR 0 5
34377: ARRAY
34378: PUSH
34379: LD_INT 0
34381: PLUS
34382: PPUSH
34383: CALL_OW 505
// end ;
34387: LD_VAR 0 3
34391: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34392: LD_INT 0
34394: PPUSH
34395: PPUSH
34396: PPUSH
34397: PPUSH
// if not hack in hackTanks then
34398: LD_VAR 0 1
34402: PUSH
34403: LD_EXP 99
34407: IN
34408: NOT
34409: IFFALSE 34413
// exit ;
34411: GO 34653
// index := GetElementIndex ( hackTanks , hack ) ;
34413: LD_ADDR_VAR 0 4
34417: PUSH
34418: LD_EXP 99
34422: PPUSH
34423: LD_VAR 0 1
34427: PPUSH
34428: CALL 41522 0 2
34432: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34433: LD_ADDR_VAR 0 3
34437: PUSH
34438: DOUBLE
34439: LD_EXP 100
34443: PUSH
34444: LD_VAR 0 4
34448: ARRAY
34449: INC
34450: ST_TO_ADDR
34451: LD_INT 1
34453: PUSH
34454: FOR_DOWNTO
34455: IFFALSE 34627
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34457: LD_ADDR_VAR 0 5
34461: PUSH
34462: LD_EXP 100
34466: PUSH
34467: LD_VAR 0 4
34471: ARRAY
34472: PUSH
34473: LD_VAR 0 3
34477: ARRAY
34478: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34479: LD_VAR 0 5
34483: PUSH
34484: LD_INT 1
34486: ARRAY
34487: PPUSH
34488: CALL_OW 302
34492: NOT
34493: PUSH
34494: LD_VAR 0 5
34498: PUSH
34499: LD_INT 1
34501: ARRAY
34502: PPUSH
34503: CALL_OW 255
34507: PUSH
34508: LD_VAR 0 1
34512: PPUSH
34513: CALL_OW 255
34517: NONEQUAL
34518: OR
34519: IFFALSE 34625
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34521: LD_VAR 0 5
34525: PUSH
34526: LD_INT 1
34528: ARRAY
34529: PPUSH
34530: CALL_OW 305
34534: PUSH
34535: LD_VAR 0 5
34539: PUSH
34540: LD_INT 1
34542: ARRAY
34543: PPUSH
34544: CALL_OW 255
34548: PUSH
34549: LD_VAR 0 1
34553: PPUSH
34554: CALL_OW 255
34558: EQUAL
34559: AND
34560: IFFALSE 34584
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34562: LD_VAR 0 5
34566: PUSH
34567: LD_INT 1
34569: ARRAY
34570: PPUSH
34571: LD_VAR 0 5
34575: PUSH
34576: LD_INT 2
34578: ARRAY
34579: PPUSH
34580: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34584: LD_ADDR_EXP 100
34588: PUSH
34589: LD_EXP 100
34593: PPUSH
34594: LD_VAR 0 4
34598: PPUSH
34599: LD_EXP 100
34603: PUSH
34604: LD_VAR 0 4
34608: ARRAY
34609: PPUSH
34610: LD_VAR 0 3
34614: PPUSH
34615: CALL_OW 3
34619: PPUSH
34620: CALL_OW 1
34624: ST_TO_ADDR
// end ; end ;
34625: GO 34454
34627: POP
34628: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34629: LD_VAR 0 1
34633: PPUSH
34634: LD_EXP 100
34638: PUSH
34639: LD_VAR 0 4
34643: ARRAY
34644: PUSH
34645: LD_INT 0
34647: PLUS
34648: PPUSH
34649: CALL_OW 505
// end ;
34653: LD_VAR 0 2
34657: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34658: LD_INT 0
34660: PPUSH
34661: PPUSH
34662: PPUSH
34663: PPUSH
// if not hack in hackTanks then
34664: LD_VAR 0 1
34668: PUSH
34669: LD_EXP 99
34673: IN
34674: NOT
34675: IFFALSE 34679
// exit ;
34677: GO 34764
// index := GetElementIndex ( hackTanks , hack ) ;
34679: LD_ADDR_VAR 0 5
34683: PUSH
34684: LD_EXP 99
34688: PPUSH
34689: LD_VAR 0 1
34693: PPUSH
34694: CALL 41522 0 2
34698: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34699: LD_ADDR_VAR 0 4
34703: PUSH
34704: DOUBLE
34705: LD_INT 1
34707: DEC
34708: ST_TO_ADDR
34709: LD_EXP 100
34713: PUSH
34714: LD_VAR 0 5
34718: ARRAY
34719: PUSH
34720: FOR_TO
34721: IFFALSE 34762
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34723: LD_EXP 100
34727: PUSH
34728: LD_VAR 0 5
34732: ARRAY
34733: PUSH
34734: LD_VAR 0 4
34738: ARRAY
34739: PUSH
34740: LD_INT 1
34742: ARRAY
34743: PUSH
34744: LD_VAR 0 2
34748: EQUAL
34749: IFFALSE 34760
// KillUnit ( vehicle ) ;
34751: LD_VAR 0 2
34755: PPUSH
34756: CALL_OW 66
34760: GO 34720
34762: POP
34763: POP
// end ;
34764: LD_VAR 0 3
34768: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34769: LD_EXP 104
34773: NOT
34774: IFFALSE 34809
34776: GO 34778
34778: DISABLE
// begin initMiner := true ;
34779: LD_ADDR_EXP 104
34783: PUSH
34784: LD_INT 1
34786: ST_TO_ADDR
// minersList := [ ] ;
34787: LD_ADDR_EXP 105
34791: PUSH
34792: EMPTY
34793: ST_TO_ADDR
// minerMinesList := [ ] ;
34794: LD_ADDR_EXP 106
34798: PUSH
34799: EMPTY
34800: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34801: LD_ADDR_EXP 107
34805: PUSH
34806: LD_INT 5
34808: ST_TO_ADDR
// end ;
34809: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34810: LD_EXP 104
34814: PUSH
34815: LD_INT 34
34817: PUSH
34818: LD_INT 81
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PPUSH
34825: CALL_OW 69
34829: AND
34830: IFFALSE 35291
34832: GO 34834
34834: DISABLE
34835: LD_INT 0
34837: PPUSH
34838: PPUSH
34839: PPUSH
34840: PPUSH
// begin enable ;
34841: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34842: LD_ADDR_VAR 0 1
34846: PUSH
34847: LD_INT 34
34849: PUSH
34850: LD_INT 81
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PPUSH
34857: CALL_OW 69
34861: PUSH
34862: FOR_IN
34863: IFFALSE 34935
// begin if not i in minersList then
34865: LD_VAR 0 1
34869: PUSH
34870: LD_EXP 105
34874: IN
34875: NOT
34876: IFFALSE 34933
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34878: LD_ADDR_EXP 105
34882: PUSH
34883: LD_EXP 105
34887: PPUSH
34888: LD_EXP 105
34892: PUSH
34893: LD_INT 1
34895: PLUS
34896: PPUSH
34897: LD_VAR 0 1
34901: PPUSH
34902: CALL_OW 1
34906: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34907: LD_ADDR_EXP 106
34911: PUSH
34912: LD_EXP 106
34916: PPUSH
34917: LD_EXP 106
34921: PUSH
34922: LD_INT 1
34924: PLUS
34925: PPUSH
34926: EMPTY
34927: PPUSH
34928: CALL_OW 1
34932: ST_TO_ADDR
// end end ;
34933: GO 34862
34935: POP
34936: POP
// for i := minerMinesList downto 1 do
34937: LD_ADDR_VAR 0 1
34941: PUSH
34942: DOUBLE
34943: LD_EXP 106
34947: INC
34948: ST_TO_ADDR
34949: LD_INT 1
34951: PUSH
34952: FOR_DOWNTO
34953: IFFALSE 35289
// begin if IsLive ( minersList [ i ] ) then
34955: LD_EXP 105
34959: PUSH
34960: LD_VAR 0 1
34964: ARRAY
34965: PPUSH
34966: CALL_OW 300
34970: IFFALSE 34998
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34972: LD_EXP 105
34976: PUSH
34977: LD_VAR 0 1
34981: ARRAY
34982: PPUSH
34983: LD_EXP 106
34987: PUSH
34988: LD_VAR 0 1
34992: ARRAY
34993: PPUSH
34994: CALL_OW 505
// if not minerMinesList [ i ] then
34998: LD_EXP 106
35002: PUSH
35003: LD_VAR 0 1
35007: ARRAY
35008: NOT
35009: IFFALSE 35013
// continue ;
35011: GO 34952
// for j := minerMinesList [ i ] downto 1 do
35013: LD_ADDR_VAR 0 2
35017: PUSH
35018: DOUBLE
35019: LD_EXP 106
35023: PUSH
35024: LD_VAR 0 1
35028: ARRAY
35029: INC
35030: ST_TO_ADDR
35031: LD_INT 1
35033: PUSH
35034: FOR_DOWNTO
35035: IFFALSE 35285
// begin side := GetSide ( minersList [ i ] ) ;
35037: LD_ADDR_VAR 0 3
35041: PUSH
35042: LD_EXP 105
35046: PUSH
35047: LD_VAR 0 1
35051: ARRAY
35052: PPUSH
35053: CALL_OW 255
35057: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35058: LD_ADDR_VAR 0 4
35062: PUSH
35063: LD_EXP 106
35067: PUSH
35068: LD_VAR 0 1
35072: ARRAY
35073: PUSH
35074: LD_VAR 0 2
35078: ARRAY
35079: PUSH
35080: LD_INT 1
35082: ARRAY
35083: PPUSH
35084: LD_EXP 106
35088: PUSH
35089: LD_VAR 0 1
35093: ARRAY
35094: PUSH
35095: LD_VAR 0 2
35099: ARRAY
35100: PUSH
35101: LD_INT 2
35103: ARRAY
35104: PPUSH
35105: CALL_OW 428
35109: ST_TO_ADDR
// if not tmp then
35110: LD_VAR 0 4
35114: NOT
35115: IFFALSE 35119
// continue ;
35117: GO 35034
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35119: LD_VAR 0 4
35123: PUSH
35124: LD_INT 81
35126: PUSH
35127: LD_VAR 0 3
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PPUSH
35136: CALL_OW 69
35140: IN
35141: PUSH
35142: LD_EXP 106
35146: PUSH
35147: LD_VAR 0 1
35151: ARRAY
35152: PUSH
35153: LD_VAR 0 2
35157: ARRAY
35158: PUSH
35159: LD_INT 1
35161: ARRAY
35162: PPUSH
35163: LD_EXP 106
35167: PUSH
35168: LD_VAR 0 1
35172: ARRAY
35173: PUSH
35174: LD_VAR 0 2
35178: ARRAY
35179: PUSH
35180: LD_INT 2
35182: ARRAY
35183: PPUSH
35184: CALL_OW 458
35188: AND
35189: IFFALSE 35283
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35191: LD_EXP 106
35195: PUSH
35196: LD_VAR 0 1
35200: ARRAY
35201: PUSH
35202: LD_VAR 0 2
35206: ARRAY
35207: PUSH
35208: LD_INT 1
35210: ARRAY
35211: PPUSH
35212: LD_EXP 106
35216: PUSH
35217: LD_VAR 0 1
35221: ARRAY
35222: PUSH
35223: LD_VAR 0 2
35227: ARRAY
35228: PUSH
35229: LD_INT 2
35231: ARRAY
35232: PPUSH
35233: LD_VAR 0 3
35237: PPUSH
35238: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35242: LD_ADDR_EXP 106
35246: PUSH
35247: LD_EXP 106
35251: PPUSH
35252: LD_VAR 0 1
35256: PPUSH
35257: LD_EXP 106
35261: PUSH
35262: LD_VAR 0 1
35266: ARRAY
35267: PPUSH
35268: LD_VAR 0 2
35272: PPUSH
35273: CALL_OW 3
35277: PPUSH
35278: CALL_OW 1
35282: ST_TO_ADDR
// end ; end ;
35283: GO 35034
35285: POP
35286: POP
// end ;
35287: GO 34952
35289: POP
35290: POP
// end ;
35291: PPOPN 4
35293: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35294: LD_INT 0
35296: PPUSH
35297: PPUSH
// result := false ;
35298: LD_ADDR_VAR 0 4
35302: PUSH
35303: LD_INT 0
35305: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35306: LD_VAR 0 1
35310: PPUSH
35311: CALL_OW 264
35315: PUSH
35316: LD_INT 81
35318: EQUAL
35319: NOT
35320: IFFALSE 35324
// exit ;
35322: GO 35564
// index := GetElementIndex ( minersList , unit ) ;
35324: LD_ADDR_VAR 0 5
35328: PUSH
35329: LD_EXP 105
35333: PPUSH
35334: LD_VAR 0 1
35338: PPUSH
35339: CALL 41522 0 2
35343: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35344: LD_EXP 106
35348: PUSH
35349: LD_VAR 0 5
35353: ARRAY
35354: PUSH
35355: LD_EXP 107
35359: GREATEREQUAL
35360: IFFALSE 35364
// exit ;
35362: GO 35564
// ComMoveXY ( unit , x , y ) ;
35364: LD_VAR 0 1
35368: PPUSH
35369: LD_VAR 0 2
35373: PPUSH
35374: LD_VAR 0 3
35378: PPUSH
35379: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35383: LD_INT 35
35385: PPUSH
35386: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35390: LD_VAR 0 1
35394: PPUSH
35395: LD_VAR 0 2
35399: PPUSH
35400: LD_VAR 0 3
35404: PPUSH
35405: CALL 72906 0 3
35409: NOT
35410: PUSH
35411: LD_VAR 0 1
35415: PPUSH
35416: CALL_OW 314
35420: AND
35421: IFFALSE 35425
// exit ;
35423: GO 35564
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35425: LD_VAR 0 2
35429: PPUSH
35430: LD_VAR 0 3
35434: PPUSH
35435: CALL_OW 428
35439: PUSH
35440: LD_VAR 0 1
35444: EQUAL
35445: PUSH
35446: LD_VAR 0 1
35450: PPUSH
35451: CALL_OW 314
35455: NOT
35456: AND
35457: IFFALSE 35383
// PlaySoundXY ( x , y , PlantMine ) ;
35459: LD_VAR 0 2
35463: PPUSH
35464: LD_VAR 0 3
35468: PPUSH
35469: LD_STRING PlantMine
35471: PPUSH
35472: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35476: LD_VAR 0 2
35480: PPUSH
35481: LD_VAR 0 3
35485: PPUSH
35486: LD_VAR 0 1
35490: PPUSH
35491: CALL_OW 255
35495: PPUSH
35496: LD_INT 0
35498: PPUSH
35499: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35503: LD_ADDR_EXP 106
35507: PUSH
35508: LD_EXP 106
35512: PPUSH
35513: LD_VAR 0 5
35517: PUSH
35518: LD_EXP 106
35522: PUSH
35523: LD_VAR 0 5
35527: ARRAY
35528: PUSH
35529: LD_INT 1
35531: PLUS
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PPUSH
35537: LD_VAR 0 2
35541: PUSH
35542: LD_VAR 0 3
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PPUSH
35551: CALL 41737 0 3
35555: ST_TO_ADDR
// result := true ;
35556: LD_ADDR_VAR 0 4
35560: PUSH
35561: LD_INT 1
35563: ST_TO_ADDR
// end ;
35564: LD_VAR 0 4
35568: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35569: LD_INT 0
35571: PPUSH
35572: PPUSH
35573: PPUSH
// if not unit in minersList then
35574: LD_VAR 0 1
35578: PUSH
35579: LD_EXP 105
35583: IN
35584: NOT
35585: IFFALSE 35589
// exit ;
35587: GO 35981
// index := GetElementIndex ( minersList , unit ) ;
35589: LD_ADDR_VAR 0 6
35593: PUSH
35594: LD_EXP 105
35598: PPUSH
35599: LD_VAR 0 1
35603: PPUSH
35604: CALL 41522 0 2
35608: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35609: LD_ADDR_VAR 0 5
35613: PUSH
35614: DOUBLE
35615: LD_EXP 106
35619: PUSH
35620: LD_VAR 0 6
35624: ARRAY
35625: INC
35626: ST_TO_ADDR
35627: LD_INT 1
35629: PUSH
35630: FOR_DOWNTO
35631: IFFALSE 35792
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35633: LD_EXP 106
35637: PUSH
35638: LD_VAR 0 6
35642: ARRAY
35643: PUSH
35644: LD_VAR 0 5
35648: ARRAY
35649: PUSH
35650: LD_INT 1
35652: ARRAY
35653: PUSH
35654: LD_VAR 0 2
35658: EQUAL
35659: PUSH
35660: LD_EXP 106
35664: PUSH
35665: LD_VAR 0 6
35669: ARRAY
35670: PUSH
35671: LD_VAR 0 5
35675: ARRAY
35676: PUSH
35677: LD_INT 2
35679: ARRAY
35680: PUSH
35681: LD_VAR 0 3
35685: EQUAL
35686: AND
35687: IFFALSE 35790
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35689: LD_EXP 106
35693: PUSH
35694: LD_VAR 0 6
35698: ARRAY
35699: PUSH
35700: LD_VAR 0 5
35704: ARRAY
35705: PUSH
35706: LD_INT 1
35708: ARRAY
35709: PPUSH
35710: LD_EXP 106
35714: PUSH
35715: LD_VAR 0 6
35719: ARRAY
35720: PUSH
35721: LD_VAR 0 5
35725: ARRAY
35726: PUSH
35727: LD_INT 2
35729: ARRAY
35730: PPUSH
35731: LD_VAR 0 1
35735: PPUSH
35736: CALL_OW 255
35740: PPUSH
35741: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35745: LD_ADDR_EXP 106
35749: PUSH
35750: LD_EXP 106
35754: PPUSH
35755: LD_VAR 0 6
35759: PPUSH
35760: LD_EXP 106
35764: PUSH
35765: LD_VAR 0 6
35769: ARRAY
35770: PPUSH
35771: LD_VAR 0 5
35775: PPUSH
35776: CALL_OW 3
35780: PPUSH
35781: CALL_OW 1
35785: ST_TO_ADDR
// exit ;
35786: POP
35787: POP
35788: GO 35981
// end ; end ;
35790: GO 35630
35792: POP
35793: POP
// for i := minerMinesList [ index ] downto 1 do
35794: LD_ADDR_VAR 0 5
35798: PUSH
35799: DOUBLE
35800: LD_EXP 106
35804: PUSH
35805: LD_VAR 0 6
35809: ARRAY
35810: INC
35811: ST_TO_ADDR
35812: LD_INT 1
35814: PUSH
35815: FOR_DOWNTO
35816: IFFALSE 35979
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35818: LD_EXP 106
35822: PUSH
35823: LD_VAR 0 6
35827: ARRAY
35828: PUSH
35829: LD_VAR 0 5
35833: ARRAY
35834: PUSH
35835: LD_INT 1
35837: ARRAY
35838: PPUSH
35839: LD_EXP 106
35843: PUSH
35844: LD_VAR 0 6
35848: ARRAY
35849: PUSH
35850: LD_VAR 0 5
35854: ARRAY
35855: PUSH
35856: LD_INT 2
35858: ARRAY
35859: PPUSH
35860: LD_VAR 0 2
35864: PPUSH
35865: LD_VAR 0 3
35869: PPUSH
35870: CALL_OW 298
35874: PUSH
35875: LD_INT 6
35877: LESS
35878: IFFALSE 35977
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35880: LD_EXP 106
35884: PUSH
35885: LD_VAR 0 6
35889: ARRAY
35890: PUSH
35891: LD_VAR 0 5
35895: ARRAY
35896: PUSH
35897: LD_INT 1
35899: ARRAY
35900: PPUSH
35901: LD_EXP 106
35905: PUSH
35906: LD_VAR 0 6
35910: ARRAY
35911: PUSH
35912: LD_VAR 0 5
35916: ARRAY
35917: PUSH
35918: LD_INT 2
35920: ARRAY
35921: PPUSH
35922: LD_VAR 0 1
35926: PPUSH
35927: CALL_OW 255
35931: PPUSH
35932: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35936: LD_ADDR_EXP 106
35940: PUSH
35941: LD_EXP 106
35945: PPUSH
35946: LD_VAR 0 6
35950: PPUSH
35951: LD_EXP 106
35955: PUSH
35956: LD_VAR 0 6
35960: ARRAY
35961: PPUSH
35962: LD_VAR 0 5
35966: PPUSH
35967: CALL_OW 3
35971: PPUSH
35972: CALL_OW 1
35976: ST_TO_ADDR
// end ; end ;
35977: GO 35815
35979: POP
35980: POP
// end ;
35981: LD_VAR 0 4
35985: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35986: LD_INT 0
35988: PPUSH
35989: PPUSH
35990: PPUSH
35991: PPUSH
35992: PPUSH
35993: PPUSH
35994: PPUSH
35995: PPUSH
35996: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35997: LD_VAR 0 1
36001: PPUSH
36002: CALL_OW 264
36006: PUSH
36007: LD_INT 81
36009: EQUAL
36010: NOT
36011: PUSH
36012: LD_VAR 0 1
36016: PUSH
36017: LD_EXP 105
36021: IN
36022: NOT
36023: OR
36024: IFFALSE 36028
// exit ;
36026: GO 36350
// index := GetElementIndex ( minersList , unit ) ;
36028: LD_ADDR_VAR 0 6
36032: PUSH
36033: LD_EXP 105
36037: PPUSH
36038: LD_VAR 0 1
36042: PPUSH
36043: CALL 41522 0 2
36047: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36048: LD_ADDR_VAR 0 8
36052: PUSH
36053: LD_EXP 107
36057: PUSH
36058: LD_EXP 106
36062: PUSH
36063: LD_VAR 0 6
36067: ARRAY
36068: MINUS
36069: ST_TO_ADDR
// if not minesFreeAmount then
36070: LD_VAR 0 8
36074: NOT
36075: IFFALSE 36079
// exit ;
36077: GO 36350
// tmp := [ ] ;
36079: LD_ADDR_VAR 0 7
36083: PUSH
36084: EMPTY
36085: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36086: LD_ADDR_VAR 0 5
36090: PUSH
36091: DOUBLE
36092: LD_INT 1
36094: DEC
36095: ST_TO_ADDR
36096: LD_VAR 0 8
36100: PUSH
36101: FOR_TO
36102: IFFALSE 36297
// begin _d := rand ( 0 , 5 ) ;
36104: LD_ADDR_VAR 0 11
36108: PUSH
36109: LD_INT 0
36111: PPUSH
36112: LD_INT 5
36114: PPUSH
36115: CALL_OW 12
36119: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36120: LD_ADDR_VAR 0 12
36124: PUSH
36125: LD_INT 2
36127: PPUSH
36128: LD_INT 6
36130: PPUSH
36131: CALL_OW 12
36135: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36136: LD_ADDR_VAR 0 9
36140: PUSH
36141: LD_VAR 0 2
36145: PPUSH
36146: LD_VAR 0 11
36150: PPUSH
36151: LD_VAR 0 12
36155: PPUSH
36156: CALL_OW 272
36160: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36161: LD_ADDR_VAR 0 10
36165: PUSH
36166: LD_VAR 0 3
36170: PPUSH
36171: LD_VAR 0 11
36175: PPUSH
36176: LD_VAR 0 12
36180: PPUSH
36181: CALL_OW 273
36185: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36186: LD_VAR 0 9
36190: PPUSH
36191: LD_VAR 0 10
36195: PPUSH
36196: CALL_OW 488
36200: PUSH
36201: LD_VAR 0 9
36205: PUSH
36206: LD_VAR 0 10
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_VAR 0 7
36219: IN
36220: NOT
36221: AND
36222: PUSH
36223: LD_VAR 0 9
36227: PPUSH
36228: LD_VAR 0 10
36232: PPUSH
36233: CALL_OW 458
36237: NOT
36238: AND
36239: IFFALSE 36281
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36241: LD_ADDR_VAR 0 7
36245: PUSH
36246: LD_VAR 0 7
36250: PPUSH
36251: LD_VAR 0 7
36255: PUSH
36256: LD_INT 1
36258: PLUS
36259: PPUSH
36260: LD_VAR 0 9
36264: PUSH
36265: LD_VAR 0 10
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PPUSH
36274: CALL_OW 1
36278: ST_TO_ADDR
36279: GO 36295
// i := i - 1 ;
36281: LD_ADDR_VAR 0 5
36285: PUSH
36286: LD_VAR 0 5
36290: PUSH
36291: LD_INT 1
36293: MINUS
36294: ST_TO_ADDR
// end ;
36295: GO 36101
36297: POP
36298: POP
// for i in tmp do
36299: LD_ADDR_VAR 0 5
36303: PUSH
36304: LD_VAR 0 7
36308: PUSH
36309: FOR_IN
36310: IFFALSE 36348
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36312: LD_VAR 0 1
36316: PPUSH
36317: LD_VAR 0 5
36321: PUSH
36322: LD_INT 1
36324: ARRAY
36325: PPUSH
36326: LD_VAR 0 5
36330: PUSH
36331: LD_INT 2
36333: ARRAY
36334: PPUSH
36335: CALL 35294 0 3
36339: NOT
36340: IFFALSE 36346
// exit ;
36342: POP
36343: POP
36344: GO 36350
36346: GO 36309
36348: POP
36349: POP
// end ;
36350: LD_VAR 0 4
36354: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36355: LD_INT 0
36357: PPUSH
36358: PPUSH
36359: PPUSH
36360: PPUSH
36361: PPUSH
36362: PPUSH
36363: PPUSH
// if not GetClass ( unit ) = class_sniper then
36364: LD_VAR 0 1
36368: PPUSH
36369: CALL_OW 257
36373: PUSH
36374: LD_INT 5
36376: EQUAL
36377: NOT
36378: IFFALSE 36382
// exit ;
36380: GO 36770
// dist := 8 ;
36382: LD_ADDR_VAR 0 5
36386: PUSH
36387: LD_INT 8
36389: ST_TO_ADDR
// viewRange := 12 ;
36390: LD_ADDR_VAR 0 7
36394: PUSH
36395: LD_INT 12
36397: ST_TO_ADDR
// side := GetSide ( unit ) ;
36398: LD_ADDR_VAR 0 6
36402: PUSH
36403: LD_VAR 0 1
36407: PPUSH
36408: CALL_OW 255
36412: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36413: LD_INT 61
36415: PPUSH
36416: LD_VAR 0 6
36420: PPUSH
36421: CALL_OW 321
36425: PUSH
36426: LD_INT 2
36428: EQUAL
36429: IFFALSE 36439
// viewRange := 16 ;
36431: LD_ADDR_VAR 0 7
36435: PUSH
36436: LD_INT 16
36438: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36439: LD_VAR 0 1
36443: PPUSH
36444: LD_VAR 0 2
36448: PPUSH
36449: LD_VAR 0 3
36453: PPUSH
36454: CALL_OW 297
36458: PUSH
36459: LD_VAR 0 5
36463: GREATER
36464: IFFALSE 36543
// begin ComMoveXY ( unit , x , y ) ;
36466: LD_VAR 0 1
36470: PPUSH
36471: LD_VAR 0 2
36475: PPUSH
36476: LD_VAR 0 3
36480: PPUSH
36481: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36485: LD_INT 35
36487: PPUSH
36488: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36492: LD_VAR 0 1
36496: PPUSH
36497: LD_VAR 0 2
36501: PPUSH
36502: LD_VAR 0 3
36506: PPUSH
36507: CALL 72906 0 3
36511: NOT
36512: IFFALSE 36516
// exit ;
36514: GO 36770
// until GetDistUnitXY ( unit , x , y ) < dist ;
36516: LD_VAR 0 1
36520: PPUSH
36521: LD_VAR 0 2
36525: PPUSH
36526: LD_VAR 0 3
36530: PPUSH
36531: CALL_OW 297
36535: PUSH
36536: LD_VAR 0 5
36540: LESS
36541: IFFALSE 36485
// end ; ComTurnXY ( unit , x , y ) ;
36543: LD_VAR 0 1
36547: PPUSH
36548: LD_VAR 0 2
36552: PPUSH
36553: LD_VAR 0 3
36557: PPUSH
36558: CALL_OW 118
// wait ( 5 ) ;
36562: LD_INT 5
36564: PPUSH
36565: CALL_OW 67
// _d := GetDir ( unit ) ;
36569: LD_ADDR_VAR 0 10
36573: PUSH
36574: LD_VAR 0 1
36578: PPUSH
36579: CALL_OW 254
36583: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36584: LD_ADDR_VAR 0 8
36588: PUSH
36589: LD_VAR 0 1
36593: PPUSH
36594: CALL_OW 250
36598: PPUSH
36599: LD_VAR 0 10
36603: PPUSH
36604: LD_VAR 0 5
36608: PPUSH
36609: CALL_OW 272
36613: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36614: LD_ADDR_VAR 0 9
36618: PUSH
36619: LD_VAR 0 1
36623: PPUSH
36624: CALL_OW 251
36628: PPUSH
36629: LD_VAR 0 10
36633: PPUSH
36634: LD_VAR 0 5
36638: PPUSH
36639: CALL_OW 273
36643: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36644: LD_VAR 0 8
36648: PPUSH
36649: LD_VAR 0 9
36653: PPUSH
36654: CALL_OW 488
36658: NOT
36659: IFFALSE 36663
// exit ;
36661: GO 36770
// ComAnimCustom ( unit , 1 ) ;
36663: LD_VAR 0 1
36667: PPUSH
36668: LD_INT 1
36670: PPUSH
36671: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36675: LD_VAR 0 8
36679: PPUSH
36680: LD_VAR 0 9
36684: PPUSH
36685: LD_VAR 0 6
36689: PPUSH
36690: LD_VAR 0 7
36694: PPUSH
36695: CALL_OW 330
// repeat wait ( 1 ) ;
36699: LD_INT 1
36701: PPUSH
36702: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36706: LD_VAR 0 1
36710: PPUSH
36711: CALL_OW 316
36715: PUSH
36716: LD_VAR 0 1
36720: PPUSH
36721: CALL_OW 314
36725: OR
36726: PUSH
36727: LD_VAR 0 1
36731: PPUSH
36732: CALL_OW 302
36736: NOT
36737: OR
36738: PUSH
36739: LD_VAR 0 1
36743: PPUSH
36744: CALL_OW 301
36748: OR
36749: IFFALSE 36699
// RemoveSeeing ( _x , _y , side ) ;
36751: LD_VAR 0 8
36755: PPUSH
36756: LD_VAR 0 9
36760: PPUSH
36761: LD_VAR 0 6
36765: PPUSH
36766: CALL_OW 331
// end ; end_of_file
36770: LD_VAR 0 4
36774: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36775: LD_INT 0
36777: PPUSH
36778: PPUSH
// if exist_mode then
36779: LD_VAR 0 2
36783: IFFALSE 36808
// unit := CreateCharacter ( prefix & ident ) else
36785: LD_ADDR_VAR 0 5
36789: PUSH
36790: LD_VAR 0 3
36794: PUSH
36795: LD_VAR 0 1
36799: STR
36800: PPUSH
36801: CALL_OW 34
36805: ST_TO_ADDR
36806: GO 36823
// unit := NewCharacter ( ident ) ;
36808: LD_ADDR_VAR 0 5
36812: PUSH
36813: LD_VAR 0 1
36817: PPUSH
36818: CALL_OW 25
36822: ST_TO_ADDR
// result := unit ;
36823: LD_ADDR_VAR 0 4
36827: PUSH
36828: LD_VAR 0 5
36832: ST_TO_ADDR
// end ;
36833: LD_VAR 0 4
36837: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36838: LD_INT 0
36840: PPUSH
36841: PPUSH
// if not side or not nation then
36842: LD_VAR 0 1
36846: NOT
36847: PUSH
36848: LD_VAR 0 2
36852: NOT
36853: OR
36854: IFFALSE 36858
// exit ;
36856: GO 37626
// case nation of nation_american :
36858: LD_VAR 0 2
36862: PUSH
36863: LD_INT 1
36865: DOUBLE
36866: EQUAL
36867: IFTRUE 36871
36869: GO 37085
36871: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36872: LD_ADDR_VAR 0 4
36876: PUSH
36877: LD_INT 35
36879: PUSH
36880: LD_INT 45
36882: PUSH
36883: LD_INT 46
36885: PUSH
36886: LD_INT 47
36888: PUSH
36889: LD_INT 82
36891: PUSH
36892: LD_INT 83
36894: PUSH
36895: LD_INT 84
36897: PUSH
36898: LD_INT 85
36900: PUSH
36901: LD_INT 86
36903: PUSH
36904: LD_INT 1
36906: PUSH
36907: LD_INT 2
36909: PUSH
36910: LD_INT 6
36912: PUSH
36913: LD_INT 15
36915: PUSH
36916: LD_INT 16
36918: PUSH
36919: LD_INT 7
36921: PUSH
36922: LD_INT 12
36924: PUSH
36925: LD_INT 13
36927: PUSH
36928: LD_INT 10
36930: PUSH
36931: LD_INT 14
36933: PUSH
36934: LD_INT 20
36936: PUSH
36937: LD_INT 21
36939: PUSH
36940: LD_INT 22
36942: PUSH
36943: LD_INT 25
36945: PUSH
36946: LD_INT 32
36948: PUSH
36949: LD_INT 27
36951: PUSH
36952: LD_INT 36
36954: PUSH
36955: LD_INT 69
36957: PUSH
36958: LD_INT 39
36960: PUSH
36961: LD_INT 34
36963: PUSH
36964: LD_INT 40
36966: PUSH
36967: LD_INT 48
36969: PUSH
36970: LD_INT 49
36972: PUSH
36973: LD_INT 50
36975: PUSH
36976: LD_INT 51
36978: PUSH
36979: LD_INT 52
36981: PUSH
36982: LD_INT 53
36984: PUSH
36985: LD_INT 54
36987: PUSH
36988: LD_INT 55
36990: PUSH
36991: LD_INT 56
36993: PUSH
36994: LD_INT 57
36996: PUSH
36997: LD_INT 58
36999: PUSH
37000: LD_INT 59
37002: PUSH
37003: LD_INT 60
37005: PUSH
37006: LD_INT 61
37008: PUSH
37009: LD_INT 62
37011: PUSH
37012: LD_INT 80
37014: PUSH
37015: LD_INT 82
37017: PUSH
37018: LD_INT 83
37020: PUSH
37021: LD_INT 84
37023: PUSH
37024: LD_INT 85
37026: PUSH
37027: LD_INT 86
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: ST_TO_ADDR
37083: GO 37550
37085: LD_INT 2
37087: DOUBLE
37088: EQUAL
37089: IFTRUE 37093
37091: GO 37319
37093: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37094: LD_ADDR_VAR 0 4
37098: PUSH
37099: LD_INT 35
37101: PUSH
37102: LD_INT 45
37104: PUSH
37105: LD_INT 46
37107: PUSH
37108: LD_INT 47
37110: PUSH
37111: LD_INT 82
37113: PUSH
37114: LD_INT 83
37116: PUSH
37117: LD_INT 84
37119: PUSH
37120: LD_INT 85
37122: PUSH
37123: LD_INT 87
37125: PUSH
37126: LD_INT 70
37128: PUSH
37129: LD_INT 1
37131: PUSH
37132: LD_INT 11
37134: PUSH
37135: LD_INT 3
37137: PUSH
37138: LD_INT 4
37140: PUSH
37141: LD_INT 5
37143: PUSH
37144: LD_INT 6
37146: PUSH
37147: LD_INT 15
37149: PUSH
37150: LD_INT 18
37152: PUSH
37153: LD_INT 7
37155: PUSH
37156: LD_INT 17
37158: PUSH
37159: LD_INT 8
37161: PUSH
37162: LD_INT 20
37164: PUSH
37165: LD_INT 21
37167: PUSH
37168: LD_INT 22
37170: PUSH
37171: LD_INT 72
37173: PUSH
37174: LD_INT 26
37176: PUSH
37177: LD_INT 69
37179: PUSH
37180: LD_INT 39
37182: PUSH
37183: LD_INT 40
37185: PUSH
37186: LD_INT 41
37188: PUSH
37189: LD_INT 42
37191: PUSH
37192: LD_INT 43
37194: PUSH
37195: LD_INT 48
37197: PUSH
37198: LD_INT 49
37200: PUSH
37201: LD_INT 50
37203: PUSH
37204: LD_INT 51
37206: PUSH
37207: LD_INT 52
37209: PUSH
37210: LD_INT 53
37212: PUSH
37213: LD_INT 54
37215: PUSH
37216: LD_INT 55
37218: PUSH
37219: LD_INT 56
37221: PUSH
37222: LD_INT 60
37224: PUSH
37225: LD_INT 61
37227: PUSH
37228: LD_INT 62
37230: PUSH
37231: LD_INT 66
37233: PUSH
37234: LD_INT 67
37236: PUSH
37237: LD_INT 68
37239: PUSH
37240: LD_INT 81
37242: PUSH
37243: LD_INT 82
37245: PUSH
37246: LD_INT 83
37248: PUSH
37249: LD_INT 84
37251: PUSH
37252: LD_INT 85
37254: PUSH
37255: LD_INT 87
37257: PUSH
37258: LD_INT 88
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: ST_TO_ADDR
37317: GO 37550
37319: LD_INT 3
37321: DOUBLE
37322: EQUAL
37323: IFTRUE 37327
37325: GO 37549
37327: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37328: LD_ADDR_VAR 0 4
37332: PUSH
37333: LD_INT 46
37335: PUSH
37336: LD_INT 47
37338: PUSH
37339: LD_INT 1
37341: PUSH
37342: LD_INT 2
37344: PUSH
37345: LD_INT 82
37347: PUSH
37348: LD_INT 83
37350: PUSH
37351: LD_INT 84
37353: PUSH
37354: LD_INT 85
37356: PUSH
37357: LD_INT 86
37359: PUSH
37360: LD_INT 11
37362: PUSH
37363: LD_INT 9
37365: PUSH
37366: LD_INT 20
37368: PUSH
37369: LD_INT 19
37371: PUSH
37372: LD_INT 21
37374: PUSH
37375: LD_INT 24
37377: PUSH
37378: LD_INT 22
37380: PUSH
37381: LD_INT 25
37383: PUSH
37384: LD_INT 28
37386: PUSH
37387: LD_INT 29
37389: PUSH
37390: LD_INT 30
37392: PUSH
37393: LD_INT 31
37395: PUSH
37396: LD_INT 37
37398: PUSH
37399: LD_INT 38
37401: PUSH
37402: LD_INT 32
37404: PUSH
37405: LD_INT 27
37407: PUSH
37408: LD_INT 33
37410: PUSH
37411: LD_INT 69
37413: PUSH
37414: LD_INT 39
37416: PUSH
37417: LD_INT 34
37419: PUSH
37420: LD_INT 40
37422: PUSH
37423: LD_INT 71
37425: PUSH
37426: LD_INT 23
37428: PUSH
37429: LD_INT 44
37431: PUSH
37432: LD_INT 48
37434: PUSH
37435: LD_INT 49
37437: PUSH
37438: LD_INT 50
37440: PUSH
37441: LD_INT 51
37443: PUSH
37444: LD_INT 52
37446: PUSH
37447: LD_INT 53
37449: PUSH
37450: LD_INT 54
37452: PUSH
37453: LD_INT 55
37455: PUSH
37456: LD_INT 56
37458: PUSH
37459: LD_INT 57
37461: PUSH
37462: LD_INT 58
37464: PUSH
37465: LD_INT 59
37467: PUSH
37468: LD_INT 63
37470: PUSH
37471: LD_INT 64
37473: PUSH
37474: LD_INT 65
37476: PUSH
37477: LD_INT 82
37479: PUSH
37480: LD_INT 83
37482: PUSH
37483: LD_INT 84
37485: PUSH
37486: LD_INT 85
37488: PUSH
37489: LD_INT 86
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: ST_TO_ADDR
37547: GO 37550
37549: POP
// if state > - 1 and state < 3 then
37550: LD_VAR 0 3
37554: PUSH
37555: LD_INT 1
37557: NEG
37558: GREATER
37559: PUSH
37560: LD_VAR 0 3
37564: PUSH
37565: LD_INT 3
37567: LESS
37568: AND
37569: IFFALSE 37626
// for i in result do
37571: LD_ADDR_VAR 0 5
37575: PUSH
37576: LD_VAR 0 4
37580: PUSH
37581: FOR_IN
37582: IFFALSE 37624
// if GetTech ( i , side ) <> state then
37584: LD_VAR 0 5
37588: PPUSH
37589: LD_VAR 0 1
37593: PPUSH
37594: CALL_OW 321
37598: PUSH
37599: LD_VAR 0 3
37603: NONEQUAL
37604: IFFALSE 37622
// result := result diff i ;
37606: LD_ADDR_VAR 0 4
37610: PUSH
37611: LD_VAR 0 4
37615: PUSH
37616: LD_VAR 0 5
37620: DIFF
37621: ST_TO_ADDR
37622: GO 37581
37624: POP
37625: POP
// end ;
37626: LD_VAR 0 4
37630: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37631: LD_INT 0
37633: PPUSH
37634: PPUSH
37635: PPUSH
// result := true ;
37636: LD_ADDR_VAR 0 3
37640: PUSH
37641: LD_INT 1
37643: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37644: LD_ADDR_VAR 0 5
37648: PUSH
37649: LD_VAR 0 2
37653: PPUSH
37654: CALL_OW 480
37658: ST_TO_ADDR
// if not tmp then
37659: LD_VAR 0 5
37663: NOT
37664: IFFALSE 37668
// exit ;
37666: GO 37717
// for i in tmp do
37668: LD_ADDR_VAR 0 4
37672: PUSH
37673: LD_VAR 0 5
37677: PUSH
37678: FOR_IN
37679: IFFALSE 37715
// if GetTech ( i , side ) <> state_researched then
37681: LD_VAR 0 4
37685: PPUSH
37686: LD_VAR 0 1
37690: PPUSH
37691: CALL_OW 321
37695: PUSH
37696: LD_INT 2
37698: NONEQUAL
37699: IFFALSE 37713
// begin result := false ;
37701: LD_ADDR_VAR 0 3
37705: PUSH
37706: LD_INT 0
37708: ST_TO_ADDR
// exit ;
37709: POP
37710: POP
37711: GO 37717
// end ;
37713: GO 37678
37715: POP
37716: POP
// end ;
37717: LD_VAR 0 3
37721: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37722: LD_INT 0
37724: PPUSH
37725: PPUSH
37726: PPUSH
37727: PPUSH
37728: PPUSH
37729: PPUSH
37730: PPUSH
37731: PPUSH
37732: PPUSH
37733: PPUSH
37734: PPUSH
37735: PPUSH
37736: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37737: LD_VAR 0 1
37741: NOT
37742: PUSH
37743: LD_VAR 0 1
37747: PPUSH
37748: CALL_OW 257
37752: PUSH
37753: LD_INT 9
37755: NONEQUAL
37756: OR
37757: IFFALSE 37761
// exit ;
37759: GO 38334
// side := GetSide ( unit ) ;
37761: LD_ADDR_VAR 0 9
37765: PUSH
37766: LD_VAR 0 1
37770: PPUSH
37771: CALL_OW 255
37775: ST_TO_ADDR
// tech_space := tech_spacanom ;
37776: LD_ADDR_VAR 0 12
37780: PUSH
37781: LD_INT 29
37783: ST_TO_ADDR
// tech_time := tech_taurad ;
37784: LD_ADDR_VAR 0 13
37788: PUSH
37789: LD_INT 28
37791: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37792: LD_ADDR_VAR 0 11
37796: PUSH
37797: LD_VAR 0 1
37801: PPUSH
37802: CALL_OW 310
37806: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37807: LD_VAR 0 11
37811: PPUSH
37812: CALL_OW 247
37816: PUSH
37817: LD_INT 2
37819: EQUAL
37820: IFFALSE 37824
// exit ;
37822: GO 38334
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37824: LD_ADDR_VAR 0 8
37828: PUSH
37829: LD_INT 81
37831: PUSH
37832: LD_VAR 0 9
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 3
37843: PUSH
37844: LD_INT 21
37846: PUSH
37847: LD_INT 3
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PPUSH
37862: CALL_OW 69
37866: ST_TO_ADDR
// if not tmp then
37867: LD_VAR 0 8
37871: NOT
37872: IFFALSE 37876
// exit ;
37874: GO 38334
// if in_unit then
37876: LD_VAR 0 11
37880: IFFALSE 37904
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37882: LD_ADDR_VAR 0 10
37886: PUSH
37887: LD_VAR 0 8
37891: PPUSH
37892: LD_VAR 0 11
37896: PPUSH
37897: CALL_OW 74
37901: ST_TO_ADDR
37902: GO 37924
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37904: LD_ADDR_VAR 0 10
37908: PUSH
37909: LD_VAR 0 8
37913: PPUSH
37914: LD_VAR 0 1
37918: PPUSH
37919: CALL_OW 74
37923: ST_TO_ADDR
// if not enemy then
37924: LD_VAR 0 10
37928: NOT
37929: IFFALSE 37933
// exit ;
37931: GO 38334
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37933: LD_VAR 0 11
37937: PUSH
37938: LD_VAR 0 11
37942: PPUSH
37943: LD_VAR 0 10
37947: PPUSH
37948: CALL_OW 296
37952: PUSH
37953: LD_INT 13
37955: GREATER
37956: AND
37957: PUSH
37958: LD_VAR 0 1
37962: PPUSH
37963: LD_VAR 0 10
37967: PPUSH
37968: CALL_OW 296
37972: PUSH
37973: LD_INT 12
37975: GREATER
37976: OR
37977: IFFALSE 37981
// exit ;
37979: GO 38334
// missile := [ 1 ] ;
37981: LD_ADDR_VAR 0 14
37985: PUSH
37986: LD_INT 1
37988: PUSH
37989: EMPTY
37990: LIST
37991: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37992: LD_VAR 0 9
37996: PPUSH
37997: LD_VAR 0 12
38001: PPUSH
38002: CALL_OW 325
38006: IFFALSE 38035
// missile := Replace ( missile , missile + 1 , 2 ) ;
38008: LD_ADDR_VAR 0 14
38012: PUSH
38013: LD_VAR 0 14
38017: PPUSH
38018: LD_VAR 0 14
38022: PUSH
38023: LD_INT 1
38025: PLUS
38026: PPUSH
38027: LD_INT 2
38029: PPUSH
38030: CALL_OW 1
38034: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38035: LD_VAR 0 9
38039: PPUSH
38040: LD_VAR 0 13
38044: PPUSH
38045: CALL_OW 325
38049: PUSH
38050: LD_VAR 0 10
38054: PPUSH
38055: CALL_OW 255
38059: PPUSH
38060: LD_VAR 0 13
38064: PPUSH
38065: CALL_OW 325
38069: NOT
38070: AND
38071: IFFALSE 38100
// missile := Replace ( missile , missile + 1 , 3 ) ;
38073: LD_ADDR_VAR 0 14
38077: PUSH
38078: LD_VAR 0 14
38082: PPUSH
38083: LD_VAR 0 14
38087: PUSH
38088: LD_INT 1
38090: PLUS
38091: PPUSH
38092: LD_INT 3
38094: PPUSH
38095: CALL_OW 1
38099: ST_TO_ADDR
// if missile < 2 then
38100: LD_VAR 0 14
38104: PUSH
38105: LD_INT 2
38107: LESS
38108: IFFALSE 38112
// exit ;
38110: GO 38334
// x := GetX ( enemy ) ;
38112: LD_ADDR_VAR 0 4
38116: PUSH
38117: LD_VAR 0 10
38121: PPUSH
38122: CALL_OW 250
38126: ST_TO_ADDR
// y := GetY ( enemy ) ;
38127: LD_ADDR_VAR 0 5
38131: PUSH
38132: LD_VAR 0 10
38136: PPUSH
38137: CALL_OW 251
38141: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38142: LD_ADDR_VAR 0 6
38146: PUSH
38147: LD_VAR 0 4
38151: PUSH
38152: LD_INT 1
38154: NEG
38155: PPUSH
38156: LD_INT 1
38158: PPUSH
38159: CALL_OW 12
38163: PLUS
38164: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38165: LD_ADDR_VAR 0 7
38169: PUSH
38170: LD_VAR 0 5
38174: PUSH
38175: LD_INT 1
38177: NEG
38178: PPUSH
38179: LD_INT 1
38181: PPUSH
38182: CALL_OW 12
38186: PLUS
38187: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38188: LD_VAR 0 6
38192: PPUSH
38193: LD_VAR 0 7
38197: PPUSH
38198: CALL_OW 488
38202: NOT
38203: IFFALSE 38225
// begin _x := x ;
38205: LD_ADDR_VAR 0 6
38209: PUSH
38210: LD_VAR 0 4
38214: ST_TO_ADDR
// _y := y ;
38215: LD_ADDR_VAR 0 7
38219: PUSH
38220: LD_VAR 0 5
38224: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38225: LD_ADDR_VAR 0 3
38229: PUSH
38230: LD_INT 1
38232: PPUSH
38233: LD_VAR 0 14
38237: PPUSH
38238: CALL_OW 12
38242: ST_TO_ADDR
// case i of 1 :
38243: LD_VAR 0 3
38247: PUSH
38248: LD_INT 1
38250: DOUBLE
38251: EQUAL
38252: IFTRUE 38256
38254: GO 38273
38256: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38257: LD_VAR 0 1
38261: PPUSH
38262: LD_VAR 0 10
38266: PPUSH
38267: CALL_OW 115
38271: GO 38334
38273: LD_INT 2
38275: DOUBLE
38276: EQUAL
38277: IFTRUE 38281
38279: GO 38303
38281: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38282: LD_VAR 0 1
38286: PPUSH
38287: LD_VAR 0 6
38291: PPUSH
38292: LD_VAR 0 7
38296: PPUSH
38297: CALL_OW 153
38301: GO 38334
38303: LD_INT 3
38305: DOUBLE
38306: EQUAL
38307: IFTRUE 38311
38309: GO 38333
38311: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38312: LD_VAR 0 1
38316: PPUSH
38317: LD_VAR 0 6
38321: PPUSH
38322: LD_VAR 0 7
38326: PPUSH
38327: CALL_OW 154
38331: GO 38334
38333: POP
// end ;
38334: LD_VAR 0 2
38338: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38339: LD_INT 0
38341: PPUSH
38342: PPUSH
38343: PPUSH
38344: PPUSH
38345: PPUSH
38346: PPUSH
// if not unit or not building then
38347: LD_VAR 0 1
38351: NOT
38352: PUSH
38353: LD_VAR 0 2
38357: NOT
38358: OR
38359: IFFALSE 38363
// exit ;
38361: GO 38521
// x := GetX ( building ) ;
38363: LD_ADDR_VAR 0 5
38367: PUSH
38368: LD_VAR 0 2
38372: PPUSH
38373: CALL_OW 250
38377: ST_TO_ADDR
// y := GetY ( building ) ;
38378: LD_ADDR_VAR 0 6
38382: PUSH
38383: LD_VAR 0 2
38387: PPUSH
38388: CALL_OW 251
38392: ST_TO_ADDR
// for i = 0 to 5 do
38393: LD_ADDR_VAR 0 4
38397: PUSH
38398: DOUBLE
38399: LD_INT 0
38401: DEC
38402: ST_TO_ADDR
38403: LD_INT 5
38405: PUSH
38406: FOR_TO
38407: IFFALSE 38519
// begin _x := ShiftX ( x , i , 3 ) ;
38409: LD_ADDR_VAR 0 7
38413: PUSH
38414: LD_VAR 0 5
38418: PPUSH
38419: LD_VAR 0 4
38423: PPUSH
38424: LD_INT 3
38426: PPUSH
38427: CALL_OW 272
38431: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38432: LD_ADDR_VAR 0 8
38436: PUSH
38437: LD_VAR 0 6
38441: PPUSH
38442: LD_VAR 0 4
38446: PPUSH
38447: LD_INT 3
38449: PPUSH
38450: CALL_OW 273
38454: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38455: LD_VAR 0 7
38459: PPUSH
38460: LD_VAR 0 8
38464: PPUSH
38465: CALL_OW 488
38469: NOT
38470: IFFALSE 38474
// continue ;
38472: GO 38406
// if HexInfo ( _x , _y ) = 0 then
38474: LD_VAR 0 7
38478: PPUSH
38479: LD_VAR 0 8
38483: PPUSH
38484: CALL_OW 428
38488: PUSH
38489: LD_INT 0
38491: EQUAL
38492: IFFALSE 38517
// begin ComMoveXY ( unit , _x , _y ) ;
38494: LD_VAR 0 1
38498: PPUSH
38499: LD_VAR 0 7
38503: PPUSH
38504: LD_VAR 0 8
38508: PPUSH
38509: CALL_OW 111
// exit ;
38513: POP
38514: POP
38515: GO 38521
// end ; end ;
38517: GO 38406
38519: POP
38520: POP
// end ;
38521: LD_VAR 0 3
38525: RET
// export function ScanBase ( side , base_area ) ; begin
38526: LD_INT 0
38528: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38529: LD_ADDR_VAR 0 3
38533: PUSH
38534: LD_VAR 0 2
38538: PPUSH
38539: LD_INT 81
38541: PUSH
38542: LD_VAR 0 1
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PPUSH
38551: CALL_OW 70
38555: ST_TO_ADDR
// end ;
38556: LD_VAR 0 3
38560: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38561: LD_INT 0
38563: PPUSH
38564: PPUSH
38565: PPUSH
38566: PPUSH
// result := false ;
38567: LD_ADDR_VAR 0 2
38571: PUSH
38572: LD_INT 0
38574: ST_TO_ADDR
// side := GetSide ( unit ) ;
38575: LD_ADDR_VAR 0 3
38579: PUSH
38580: LD_VAR 0 1
38584: PPUSH
38585: CALL_OW 255
38589: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38590: LD_ADDR_VAR 0 4
38594: PUSH
38595: LD_VAR 0 1
38599: PPUSH
38600: CALL_OW 248
38604: ST_TO_ADDR
// case nat of 1 :
38605: LD_VAR 0 4
38609: PUSH
38610: LD_INT 1
38612: DOUBLE
38613: EQUAL
38614: IFTRUE 38618
38616: GO 38629
38618: POP
// tech := tech_lassight ; 2 :
38619: LD_ADDR_VAR 0 5
38623: PUSH
38624: LD_INT 12
38626: ST_TO_ADDR
38627: GO 38668
38629: LD_INT 2
38631: DOUBLE
38632: EQUAL
38633: IFTRUE 38637
38635: GO 38648
38637: POP
// tech := tech_mortar ; 3 :
38638: LD_ADDR_VAR 0 5
38642: PUSH
38643: LD_INT 41
38645: ST_TO_ADDR
38646: GO 38668
38648: LD_INT 3
38650: DOUBLE
38651: EQUAL
38652: IFTRUE 38656
38654: GO 38667
38656: POP
// tech := tech_bazooka ; end ;
38657: LD_ADDR_VAR 0 5
38661: PUSH
38662: LD_INT 44
38664: ST_TO_ADDR
38665: GO 38668
38667: POP
// if Researched ( side , tech ) then
38668: LD_VAR 0 3
38672: PPUSH
38673: LD_VAR 0 5
38677: PPUSH
38678: CALL_OW 325
38682: IFFALSE 38709
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38684: LD_ADDR_VAR 0 2
38688: PUSH
38689: LD_INT 5
38691: PUSH
38692: LD_INT 8
38694: PUSH
38695: LD_INT 9
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: LIST
38702: PUSH
38703: LD_VAR 0 4
38707: ARRAY
38708: ST_TO_ADDR
// end ;
38709: LD_VAR 0 2
38713: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38714: LD_INT 0
38716: PPUSH
38717: PPUSH
38718: PPUSH
// if not mines then
38719: LD_VAR 0 2
38723: NOT
38724: IFFALSE 38728
// exit ;
38726: GO 38872
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38728: LD_ADDR_VAR 0 5
38732: PUSH
38733: LD_INT 81
38735: PUSH
38736: LD_VAR 0 1
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 3
38747: PUSH
38748: LD_INT 21
38750: PUSH
38751: LD_INT 3
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PPUSH
38766: CALL_OW 69
38770: ST_TO_ADDR
// for i in mines do
38771: LD_ADDR_VAR 0 4
38775: PUSH
38776: LD_VAR 0 2
38780: PUSH
38781: FOR_IN
38782: IFFALSE 38870
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38784: LD_VAR 0 4
38788: PUSH
38789: LD_INT 1
38791: ARRAY
38792: PPUSH
38793: LD_VAR 0 4
38797: PUSH
38798: LD_INT 2
38800: ARRAY
38801: PPUSH
38802: CALL_OW 458
38806: NOT
38807: IFFALSE 38811
// continue ;
38809: GO 38781
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38811: LD_VAR 0 4
38815: PUSH
38816: LD_INT 1
38818: ARRAY
38819: PPUSH
38820: LD_VAR 0 4
38824: PUSH
38825: LD_INT 2
38827: ARRAY
38828: PPUSH
38829: CALL_OW 428
38833: PUSH
38834: LD_VAR 0 5
38838: IN
38839: IFFALSE 38868
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38841: LD_VAR 0 4
38845: PUSH
38846: LD_INT 1
38848: ARRAY
38849: PPUSH
38850: LD_VAR 0 4
38854: PUSH
38855: LD_INT 2
38857: ARRAY
38858: PPUSH
38859: LD_VAR 0 1
38863: PPUSH
38864: CALL_OW 456
// end ;
38868: GO 38781
38870: POP
38871: POP
// end ;
38872: LD_VAR 0 3
38876: RET
// export function Count ( array ) ; begin
38877: LD_INT 0
38879: PPUSH
// result := array + 0 ;
38880: LD_ADDR_VAR 0 2
38884: PUSH
38885: LD_VAR 0 1
38889: PUSH
38890: LD_INT 0
38892: PLUS
38893: ST_TO_ADDR
// end ;
38894: LD_VAR 0 2
38898: RET
// export function IsEmpty ( building ) ; begin
38899: LD_INT 0
38901: PPUSH
// if not building then
38902: LD_VAR 0 1
38906: NOT
38907: IFFALSE 38911
// exit ;
38909: GO 38954
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38911: LD_ADDR_VAR 0 2
38915: PUSH
38916: LD_VAR 0 1
38920: PUSH
38921: LD_INT 22
38923: PUSH
38924: LD_VAR 0 1
38928: PPUSH
38929: CALL_OW 255
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 58
38940: PUSH
38941: EMPTY
38942: LIST
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PPUSH
38948: CALL_OW 69
38952: IN
38953: ST_TO_ADDR
// end ;
38954: LD_VAR 0 2
38958: RET
// export function IsNotFull ( building ) ; var places ; begin
38959: LD_INT 0
38961: PPUSH
38962: PPUSH
// if not building then
38963: LD_VAR 0 1
38967: NOT
38968: IFFALSE 38972
// exit ;
38970: GO 39000
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
38972: LD_ADDR_VAR 0 2
38976: PUSH
38977: LD_VAR 0 1
38981: PPUSH
38982: LD_INT 3
38984: PUSH
38985: LD_INT 62
38987: PUSH
38988: EMPTY
38989: LIST
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PPUSH
38995: CALL_OW 72
38999: ST_TO_ADDR
// end ;
39000: LD_VAR 0 2
39004: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39005: LD_INT 0
39007: PPUSH
39008: PPUSH
39009: PPUSH
39010: PPUSH
// tmp := [ ] ;
39011: LD_ADDR_VAR 0 3
39015: PUSH
39016: EMPTY
39017: ST_TO_ADDR
// list := [ ] ;
39018: LD_ADDR_VAR 0 5
39022: PUSH
39023: EMPTY
39024: ST_TO_ADDR
// for i = 16 to 25 do
39025: LD_ADDR_VAR 0 4
39029: PUSH
39030: DOUBLE
39031: LD_INT 16
39033: DEC
39034: ST_TO_ADDR
39035: LD_INT 25
39037: PUSH
39038: FOR_TO
39039: IFFALSE 39112
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39041: LD_ADDR_VAR 0 3
39045: PUSH
39046: LD_VAR 0 3
39050: PUSH
39051: LD_INT 22
39053: PUSH
39054: LD_VAR 0 1
39058: PPUSH
39059: CALL_OW 255
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 91
39070: PUSH
39071: LD_VAR 0 1
39075: PUSH
39076: LD_INT 6
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 30
39086: PUSH
39087: LD_VAR 0 4
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: LIST
39100: PUSH
39101: EMPTY
39102: LIST
39103: PPUSH
39104: CALL_OW 69
39108: ADD
39109: ST_TO_ADDR
39110: GO 39038
39112: POP
39113: POP
// for i = 1 to tmp do
39114: LD_ADDR_VAR 0 4
39118: PUSH
39119: DOUBLE
39120: LD_INT 1
39122: DEC
39123: ST_TO_ADDR
39124: LD_VAR 0 3
39128: PUSH
39129: FOR_TO
39130: IFFALSE 39218
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39132: LD_ADDR_VAR 0 5
39136: PUSH
39137: LD_VAR 0 5
39141: PUSH
39142: LD_VAR 0 3
39146: PUSH
39147: LD_VAR 0 4
39151: ARRAY
39152: PPUSH
39153: CALL_OW 266
39157: PUSH
39158: LD_VAR 0 3
39162: PUSH
39163: LD_VAR 0 4
39167: ARRAY
39168: PPUSH
39169: CALL_OW 250
39173: PUSH
39174: LD_VAR 0 3
39178: PUSH
39179: LD_VAR 0 4
39183: ARRAY
39184: PPUSH
39185: CALL_OW 251
39189: PUSH
39190: LD_VAR 0 3
39194: PUSH
39195: LD_VAR 0 4
39199: ARRAY
39200: PPUSH
39201: CALL_OW 254
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: PUSH
39212: EMPTY
39213: LIST
39214: ADD
39215: ST_TO_ADDR
39216: GO 39129
39218: POP
39219: POP
// result := list ;
39220: LD_ADDR_VAR 0 2
39224: PUSH
39225: LD_VAR 0 5
39229: ST_TO_ADDR
// end ;
39230: LD_VAR 0 2
39234: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39235: LD_INT 0
39237: PPUSH
39238: PPUSH
39239: PPUSH
39240: PPUSH
39241: PPUSH
39242: PPUSH
39243: PPUSH
// if not factory then
39244: LD_VAR 0 1
39248: NOT
39249: IFFALSE 39253
// exit ;
39251: GO 39846
// if control = control_apeman then
39253: LD_VAR 0 4
39257: PUSH
39258: LD_INT 5
39260: EQUAL
39261: IFFALSE 39370
// begin tmp := UnitsInside ( factory ) ;
39263: LD_ADDR_VAR 0 8
39267: PUSH
39268: LD_VAR 0 1
39272: PPUSH
39273: CALL_OW 313
39277: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39278: LD_VAR 0 8
39282: PPUSH
39283: LD_INT 25
39285: PUSH
39286: LD_INT 12
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PPUSH
39293: CALL_OW 72
39297: NOT
39298: IFFALSE 39308
// control := control_manual ;
39300: LD_ADDR_VAR 0 4
39304: PUSH
39305: LD_INT 1
39307: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39308: LD_ADDR_VAR 0 8
39312: PUSH
39313: LD_VAR 0 1
39317: PPUSH
39318: CALL 39005 0 1
39322: ST_TO_ADDR
// if tmp then
39323: LD_VAR 0 8
39327: IFFALSE 39370
// begin for i in tmp do
39329: LD_ADDR_VAR 0 7
39333: PUSH
39334: LD_VAR 0 8
39338: PUSH
39339: FOR_IN
39340: IFFALSE 39368
// if i [ 1 ] = b_ext_radio then
39342: LD_VAR 0 7
39346: PUSH
39347: LD_INT 1
39349: ARRAY
39350: PUSH
39351: LD_INT 22
39353: EQUAL
39354: IFFALSE 39366
// begin control := control_remote ;
39356: LD_ADDR_VAR 0 4
39360: PUSH
39361: LD_INT 2
39363: ST_TO_ADDR
// break ;
39364: GO 39368
// end ;
39366: GO 39339
39368: POP
39369: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39370: LD_VAR 0 1
39374: PPUSH
39375: LD_VAR 0 2
39379: PPUSH
39380: LD_VAR 0 3
39384: PPUSH
39385: LD_VAR 0 4
39389: PPUSH
39390: LD_VAR 0 5
39394: PPUSH
39395: CALL_OW 448
39399: IFFALSE 39434
// begin result := [ chassis , engine , control , weapon ] ;
39401: LD_ADDR_VAR 0 6
39405: PUSH
39406: LD_VAR 0 2
39410: PUSH
39411: LD_VAR 0 3
39415: PUSH
39416: LD_VAR 0 4
39420: PUSH
39421: LD_VAR 0 5
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: ST_TO_ADDR
// exit ;
39432: GO 39846
// end ; _chassis := AvailableChassisList ( factory ) ;
39434: LD_ADDR_VAR 0 9
39438: PUSH
39439: LD_VAR 0 1
39443: PPUSH
39444: CALL_OW 475
39448: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39449: LD_ADDR_VAR 0 11
39453: PUSH
39454: LD_VAR 0 1
39458: PPUSH
39459: CALL_OW 476
39463: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39464: LD_ADDR_VAR 0 12
39468: PUSH
39469: LD_VAR 0 1
39473: PPUSH
39474: CALL_OW 477
39478: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39479: LD_ADDR_VAR 0 10
39483: PUSH
39484: LD_VAR 0 1
39488: PPUSH
39489: CALL_OW 478
39493: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39494: LD_VAR 0 9
39498: NOT
39499: PUSH
39500: LD_VAR 0 11
39504: NOT
39505: OR
39506: PUSH
39507: LD_VAR 0 12
39511: NOT
39512: OR
39513: PUSH
39514: LD_VAR 0 10
39518: NOT
39519: OR
39520: IFFALSE 39555
// begin result := [ chassis , engine , control , weapon ] ;
39522: LD_ADDR_VAR 0 6
39526: PUSH
39527: LD_VAR 0 2
39531: PUSH
39532: LD_VAR 0 3
39536: PUSH
39537: LD_VAR 0 4
39541: PUSH
39542: LD_VAR 0 5
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: ST_TO_ADDR
// exit ;
39553: GO 39846
// end ; if not chassis in _chassis then
39555: LD_VAR 0 2
39559: PUSH
39560: LD_VAR 0 9
39564: IN
39565: NOT
39566: IFFALSE 39592
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39568: LD_ADDR_VAR 0 2
39572: PUSH
39573: LD_VAR 0 9
39577: PUSH
39578: LD_INT 1
39580: PPUSH
39581: LD_VAR 0 9
39585: PPUSH
39586: CALL_OW 12
39590: ARRAY
39591: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39592: LD_VAR 0 2
39596: PPUSH
39597: LD_VAR 0 3
39601: PPUSH
39602: CALL 39851 0 2
39606: NOT
39607: IFFALSE 39666
// repeat engine := _engine [ 1 ] ;
39609: LD_ADDR_VAR 0 3
39613: PUSH
39614: LD_VAR 0 11
39618: PUSH
39619: LD_INT 1
39621: ARRAY
39622: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39623: LD_ADDR_VAR 0 11
39627: PUSH
39628: LD_VAR 0 11
39632: PPUSH
39633: LD_INT 1
39635: PPUSH
39636: CALL_OW 3
39640: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39641: LD_VAR 0 2
39645: PPUSH
39646: LD_VAR 0 3
39650: PPUSH
39651: CALL 39851 0 2
39655: PUSH
39656: LD_VAR 0 11
39660: PUSH
39661: EMPTY
39662: EQUAL
39663: OR
39664: IFFALSE 39609
// if not control in _control then
39666: LD_VAR 0 4
39670: PUSH
39671: LD_VAR 0 12
39675: IN
39676: NOT
39677: IFFALSE 39703
// control := _control [ rand ( 1 , _control ) ] ;
39679: LD_ADDR_VAR 0 4
39683: PUSH
39684: LD_VAR 0 12
39688: PUSH
39689: LD_INT 1
39691: PPUSH
39692: LD_VAR 0 12
39696: PPUSH
39697: CALL_OW 12
39701: ARRAY
39702: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39703: LD_VAR 0 2
39707: PPUSH
39708: LD_VAR 0 5
39712: PPUSH
39713: CALL 40071 0 2
39717: NOT
39718: IFFALSE 39777
// repeat weapon := _weapon [ 1 ] ;
39720: LD_ADDR_VAR 0 5
39724: PUSH
39725: LD_VAR 0 10
39729: PUSH
39730: LD_INT 1
39732: ARRAY
39733: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39734: LD_ADDR_VAR 0 10
39738: PUSH
39739: LD_VAR 0 10
39743: PPUSH
39744: LD_INT 1
39746: PPUSH
39747: CALL_OW 3
39751: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39752: LD_VAR 0 2
39756: PPUSH
39757: LD_VAR 0 5
39761: PPUSH
39762: CALL 40071 0 2
39766: PUSH
39767: LD_VAR 0 10
39771: PUSH
39772: EMPTY
39773: EQUAL
39774: OR
39775: IFFALSE 39720
// result := [ ] ;
39777: LD_ADDR_VAR 0 6
39781: PUSH
39782: EMPTY
39783: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39784: LD_VAR 0 1
39788: PPUSH
39789: LD_VAR 0 2
39793: PPUSH
39794: LD_VAR 0 3
39798: PPUSH
39799: LD_VAR 0 4
39803: PPUSH
39804: LD_VAR 0 5
39808: PPUSH
39809: CALL_OW 448
39813: IFFALSE 39846
// result := [ chassis , engine , control , weapon ] ;
39815: LD_ADDR_VAR 0 6
39819: PUSH
39820: LD_VAR 0 2
39824: PUSH
39825: LD_VAR 0 3
39829: PUSH
39830: LD_VAR 0 4
39834: PUSH
39835: LD_VAR 0 5
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: ST_TO_ADDR
// end ;
39846: LD_VAR 0 6
39850: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39851: LD_INT 0
39853: PPUSH
// if not chassis or not engine then
39854: LD_VAR 0 1
39858: NOT
39859: PUSH
39860: LD_VAR 0 2
39864: NOT
39865: OR
39866: IFFALSE 39870
// exit ;
39868: GO 40066
// case engine of engine_solar :
39870: LD_VAR 0 2
39874: PUSH
39875: LD_INT 2
39877: DOUBLE
39878: EQUAL
39879: IFTRUE 39883
39881: GO 39921
39883: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39884: LD_ADDR_VAR 0 3
39888: PUSH
39889: LD_INT 11
39891: PUSH
39892: LD_INT 12
39894: PUSH
39895: LD_INT 13
39897: PUSH
39898: LD_INT 14
39900: PUSH
39901: LD_INT 1
39903: PUSH
39904: LD_INT 2
39906: PUSH
39907: LD_INT 3
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: LIST
39914: LIST
39915: LIST
39916: LIST
39917: LIST
39918: ST_TO_ADDR
39919: GO 40050
39921: LD_INT 1
39923: DOUBLE
39924: EQUAL
39925: IFTRUE 39929
39927: GO 39991
39929: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39930: LD_ADDR_VAR 0 3
39934: PUSH
39935: LD_INT 11
39937: PUSH
39938: LD_INT 12
39940: PUSH
39941: LD_INT 13
39943: PUSH
39944: LD_INT 14
39946: PUSH
39947: LD_INT 1
39949: PUSH
39950: LD_INT 2
39952: PUSH
39953: LD_INT 3
39955: PUSH
39956: LD_INT 4
39958: PUSH
39959: LD_INT 5
39961: PUSH
39962: LD_INT 21
39964: PUSH
39965: LD_INT 23
39967: PUSH
39968: LD_INT 22
39970: PUSH
39971: LD_INT 24
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: ST_TO_ADDR
39989: GO 40050
39991: LD_INT 3
39993: DOUBLE
39994: EQUAL
39995: IFTRUE 39999
39997: GO 40049
39999: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40000: LD_ADDR_VAR 0 3
40004: PUSH
40005: LD_INT 13
40007: PUSH
40008: LD_INT 14
40010: PUSH
40011: LD_INT 2
40013: PUSH
40014: LD_INT 3
40016: PUSH
40017: LD_INT 4
40019: PUSH
40020: LD_INT 5
40022: PUSH
40023: LD_INT 21
40025: PUSH
40026: LD_INT 22
40028: PUSH
40029: LD_INT 23
40031: PUSH
40032: LD_INT 24
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: ST_TO_ADDR
40047: GO 40050
40049: POP
// result := ( chassis in result ) ;
40050: LD_ADDR_VAR 0 3
40054: PUSH
40055: LD_VAR 0 1
40059: PUSH
40060: LD_VAR 0 3
40064: IN
40065: ST_TO_ADDR
// end ;
40066: LD_VAR 0 3
40070: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40071: LD_INT 0
40073: PPUSH
// if not chassis or not weapon then
40074: LD_VAR 0 1
40078: NOT
40079: PUSH
40080: LD_VAR 0 2
40084: NOT
40085: OR
40086: IFFALSE 40090
// exit ;
40088: GO 41150
// case weapon of us_machine_gun :
40090: LD_VAR 0 2
40094: PUSH
40095: LD_INT 2
40097: DOUBLE
40098: EQUAL
40099: IFTRUE 40103
40101: GO 40133
40103: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40104: LD_ADDR_VAR 0 3
40108: PUSH
40109: LD_INT 1
40111: PUSH
40112: LD_INT 2
40114: PUSH
40115: LD_INT 3
40117: PUSH
40118: LD_INT 4
40120: PUSH
40121: LD_INT 5
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: ST_TO_ADDR
40131: GO 41134
40133: LD_INT 3
40135: DOUBLE
40136: EQUAL
40137: IFTRUE 40141
40139: GO 40171
40141: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40142: LD_ADDR_VAR 0 3
40146: PUSH
40147: LD_INT 1
40149: PUSH
40150: LD_INT 2
40152: PUSH
40153: LD_INT 3
40155: PUSH
40156: LD_INT 4
40158: PUSH
40159: LD_INT 5
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: ST_TO_ADDR
40169: GO 41134
40171: LD_INT 11
40173: DOUBLE
40174: EQUAL
40175: IFTRUE 40179
40177: GO 40209
40179: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40180: LD_ADDR_VAR 0 3
40184: PUSH
40185: LD_INT 1
40187: PUSH
40188: LD_INT 2
40190: PUSH
40191: LD_INT 3
40193: PUSH
40194: LD_INT 4
40196: PUSH
40197: LD_INT 5
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: ST_TO_ADDR
40207: GO 41134
40209: LD_INT 4
40211: DOUBLE
40212: EQUAL
40213: IFTRUE 40217
40215: GO 40243
40217: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40218: LD_ADDR_VAR 0 3
40222: PUSH
40223: LD_INT 2
40225: PUSH
40226: LD_INT 3
40228: PUSH
40229: LD_INT 4
40231: PUSH
40232: LD_INT 5
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: ST_TO_ADDR
40241: GO 41134
40243: LD_INT 5
40245: DOUBLE
40246: EQUAL
40247: IFTRUE 40251
40249: GO 40277
40251: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40252: LD_ADDR_VAR 0 3
40256: PUSH
40257: LD_INT 2
40259: PUSH
40260: LD_INT 3
40262: PUSH
40263: LD_INT 4
40265: PUSH
40266: LD_INT 5
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: ST_TO_ADDR
40275: GO 41134
40277: LD_INT 9
40279: DOUBLE
40280: EQUAL
40281: IFTRUE 40285
40283: GO 40311
40285: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40286: LD_ADDR_VAR 0 3
40290: PUSH
40291: LD_INT 2
40293: PUSH
40294: LD_INT 3
40296: PUSH
40297: LD_INT 4
40299: PUSH
40300: LD_INT 5
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: ST_TO_ADDR
40309: GO 41134
40311: LD_INT 7
40313: DOUBLE
40314: EQUAL
40315: IFTRUE 40319
40317: GO 40345
40319: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40320: LD_ADDR_VAR 0 3
40324: PUSH
40325: LD_INT 2
40327: PUSH
40328: LD_INT 3
40330: PUSH
40331: LD_INT 4
40333: PUSH
40334: LD_INT 5
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: ST_TO_ADDR
40343: GO 41134
40345: LD_INT 12
40347: DOUBLE
40348: EQUAL
40349: IFTRUE 40353
40351: GO 40379
40353: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40354: LD_ADDR_VAR 0 3
40358: PUSH
40359: LD_INT 2
40361: PUSH
40362: LD_INT 3
40364: PUSH
40365: LD_INT 4
40367: PUSH
40368: LD_INT 5
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: ST_TO_ADDR
40377: GO 41134
40379: LD_INT 13
40381: DOUBLE
40382: EQUAL
40383: IFTRUE 40387
40385: GO 40413
40387: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40388: LD_ADDR_VAR 0 3
40392: PUSH
40393: LD_INT 2
40395: PUSH
40396: LD_INT 3
40398: PUSH
40399: LD_INT 4
40401: PUSH
40402: LD_INT 5
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: ST_TO_ADDR
40411: GO 41134
40413: LD_INT 14
40415: DOUBLE
40416: EQUAL
40417: IFTRUE 40421
40419: GO 40439
40421: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40422: LD_ADDR_VAR 0 3
40426: PUSH
40427: LD_INT 4
40429: PUSH
40430: LD_INT 5
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: ST_TO_ADDR
40437: GO 41134
40439: LD_INT 6
40441: DOUBLE
40442: EQUAL
40443: IFTRUE 40447
40445: GO 40465
40447: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40448: LD_ADDR_VAR 0 3
40452: PUSH
40453: LD_INT 4
40455: PUSH
40456: LD_INT 5
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: ST_TO_ADDR
40463: GO 41134
40465: LD_INT 10
40467: DOUBLE
40468: EQUAL
40469: IFTRUE 40473
40471: GO 40491
40473: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40474: LD_ADDR_VAR 0 3
40478: PUSH
40479: LD_INT 4
40481: PUSH
40482: LD_INT 5
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: ST_TO_ADDR
40489: GO 41134
40491: LD_INT 22
40493: DOUBLE
40494: EQUAL
40495: IFTRUE 40499
40497: GO 40525
40499: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40500: LD_ADDR_VAR 0 3
40504: PUSH
40505: LD_INT 11
40507: PUSH
40508: LD_INT 12
40510: PUSH
40511: LD_INT 13
40513: PUSH
40514: LD_INT 14
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: ST_TO_ADDR
40523: GO 41134
40525: LD_INT 23
40527: DOUBLE
40528: EQUAL
40529: IFTRUE 40533
40531: GO 40559
40533: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40534: LD_ADDR_VAR 0 3
40538: PUSH
40539: LD_INT 11
40541: PUSH
40542: LD_INT 12
40544: PUSH
40545: LD_INT 13
40547: PUSH
40548: LD_INT 14
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: ST_TO_ADDR
40557: GO 41134
40559: LD_INT 24
40561: DOUBLE
40562: EQUAL
40563: IFTRUE 40567
40565: GO 40593
40567: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40568: LD_ADDR_VAR 0 3
40572: PUSH
40573: LD_INT 11
40575: PUSH
40576: LD_INT 12
40578: PUSH
40579: LD_INT 13
40581: PUSH
40582: LD_INT 14
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: ST_TO_ADDR
40591: GO 41134
40593: LD_INT 30
40595: DOUBLE
40596: EQUAL
40597: IFTRUE 40601
40599: GO 40627
40601: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40602: LD_ADDR_VAR 0 3
40606: PUSH
40607: LD_INT 11
40609: PUSH
40610: LD_INT 12
40612: PUSH
40613: LD_INT 13
40615: PUSH
40616: LD_INT 14
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: ST_TO_ADDR
40625: GO 41134
40627: LD_INT 25
40629: DOUBLE
40630: EQUAL
40631: IFTRUE 40635
40633: GO 40653
40635: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40636: LD_ADDR_VAR 0 3
40640: PUSH
40641: LD_INT 13
40643: PUSH
40644: LD_INT 14
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: ST_TO_ADDR
40651: GO 41134
40653: LD_INT 27
40655: DOUBLE
40656: EQUAL
40657: IFTRUE 40661
40659: GO 40679
40661: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40662: LD_ADDR_VAR 0 3
40666: PUSH
40667: LD_INT 13
40669: PUSH
40670: LD_INT 14
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: ST_TO_ADDR
40677: GO 41134
40679: LD_INT 92
40681: DOUBLE
40682: EQUAL
40683: IFTRUE 40687
40685: GO 40713
40687: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40688: LD_ADDR_VAR 0 3
40692: PUSH
40693: LD_INT 11
40695: PUSH
40696: LD_INT 12
40698: PUSH
40699: LD_INT 13
40701: PUSH
40702: LD_INT 14
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: ST_TO_ADDR
40711: GO 41134
40713: LD_INT 28
40715: DOUBLE
40716: EQUAL
40717: IFTRUE 40721
40719: GO 40739
40721: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40722: LD_ADDR_VAR 0 3
40726: PUSH
40727: LD_INT 13
40729: PUSH
40730: LD_INT 14
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: ST_TO_ADDR
40737: GO 41134
40739: LD_INT 29
40741: DOUBLE
40742: EQUAL
40743: IFTRUE 40747
40745: GO 40765
40747: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40748: LD_ADDR_VAR 0 3
40752: PUSH
40753: LD_INT 13
40755: PUSH
40756: LD_INT 14
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: ST_TO_ADDR
40763: GO 41134
40765: LD_INT 31
40767: DOUBLE
40768: EQUAL
40769: IFTRUE 40773
40771: GO 40791
40773: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40774: LD_ADDR_VAR 0 3
40778: PUSH
40779: LD_INT 13
40781: PUSH
40782: LD_INT 14
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: ST_TO_ADDR
40789: GO 41134
40791: LD_INT 26
40793: DOUBLE
40794: EQUAL
40795: IFTRUE 40799
40797: GO 40817
40799: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40800: LD_ADDR_VAR 0 3
40804: PUSH
40805: LD_INT 13
40807: PUSH
40808: LD_INT 14
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: ST_TO_ADDR
40815: GO 41134
40817: LD_INT 42
40819: DOUBLE
40820: EQUAL
40821: IFTRUE 40825
40823: GO 40851
40825: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40826: LD_ADDR_VAR 0 3
40830: PUSH
40831: LD_INT 21
40833: PUSH
40834: LD_INT 22
40836: PUSH
40837: LD_INT 23
40839: PUSH
40840: LD_INT 24
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: ST_TO_ADDR
40849: GO 41134
40851: LD_INT 43
40853: DOUBLE
40854: EQUAL
40855: IFTRUE 40859
40857: GO 40885
40859: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40860: LD_ADDR_VAR 0 3
40864: PUSH
40865: LD_INT 21
40867: PUSH
40868: LD_INT 22
40870: PUSH
40871: LD_INT 23
40873: PUSH
40874: LD_INT 24
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: ST_TO_ADDR
40883: GO 41134
40885: LD_INT 44
40887: DOUBLE
40888: EQUAL
40889: IFTRUE 40893
40891: GO 40919
40893: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40894: LD_ADDR_VAR 0 3
40898: PUSH
40899: LD_INT 21
40901: PUSH
40902: LD_INT 22
40904: PUSH
40905: LD_INT 23
40907: PUSH
40908: LD_INT 24
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: ST_TO_ADDR
40917: GO 41134
40919: LD_INT 45
40921: DOUBLE
40922: EQUAL
40923: IFTRUE 40927
40925: GO 40953
40927: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40928: LD_ADDR_VAR 0 3
40932: PUSH
40933: LD_INT 21
40935: PUSH
40936: LD_INT 22
40938: PUSH
40939: LD_INT 23
40941: PUSH
40942: LD_INT 24
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: ST_TO_ADDR
40951: GO 41134
40953: LD_INT 49
40955: DOUBLE
40956: EQUAL
40957: IFTRUE 40961
40959: GO 40987
40961: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40962: LD_ADDR_VAR 0 3
40966: PUSH
40967: LD_INT 21
40969: PUSH
40970: LD_INT 22
40972: PUSH
40973: LD_INT 23
40975: PUSH
40976: LD_INT 24
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: ST_TO_ADDR
40985: GO 41134
40987: LD_INT 51
40989: DOUBLE
40990: EQUAL
40991: IFTRUE 40995
40993: GO 41021
40995: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40996: LD_ADDR_VAR 0 3
41000: PUSH
41001: LD_INT 21
41003: PUSH
41004: LD_INT 22
41006: PUSH
41007: LD_INT 23
41009: PUSH
41010: LD_INT 24
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: ST_TO_ADDR
41019: GO 41134
41021: LD_INT 52
41023: DOUBLE
41024: EQUAL
41025: IFTRUE 41029
41027: GO 41055
41029: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41030: LD_ADDR_VAR 0 3
41034: PUSH
41035: LD_INT 21
41037: PUSH
41038: LD_INT 22
41040: PUSH
41041: LD_INT 23
41043: PUSH
41044: LD_INT 24
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: ST_TO_ADDR
41053: GO 41134
41055: LD_INT 53
41057: DOUBLE
41058: EQUAL
41059: IFTRUE 41063
41061: GO 41081
41063: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41064: LD_ADDR_VAR 0 3
41068: PUSH
41069: LD_INT 23
41071: PUSH
41072: LD_INT 24
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: ST_TO_ADDR
41079: GO 41134
41081: LD_INT 46
41083: DOUBLE
41084: EQUAL
41085: IFTRUE 41089
41087: GO 41107
41089: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41090: LD_ADDR_VAR 0 3
41094: PUSH
41095: LD_INT 23
41097: PUSH
41098: LD_INT 24
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: ST_TO_ADDR
41105: GO 41134
41107: LD_INT 47
41109: DOUBLE
41110: EQUAL
41111: IFTRUE 41115
41113: GO 41133
41115: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41116: LD_ADDR_VAR 0 3
41120: PUSH
41121: LD_INT 23
41123: PUSH
41124: LD_INT 24
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: ST_TO_ADDR
41131: GO 41134
41133: POP
// result := ( chassis in result ) ;
41134: LD_ADDR_VAR 0 3
41138: PUSH
41139: LD_VAR 0 1
41143: PUSH
41144: LD_VAR 0 3
41148: IN
41149: ST_TO_ADDR
// end ;
41150: LD_VAR 0 3
41154: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41155: LD_INT 0
41157: PPUSH
41158: PPUSH
41159: PPUSH
41160: PPUSH
41161: PPUSH
41162: PPUSH
41163: PPUSH
// result := array ;
41164: LD_ADDR_VAR 0 5
41168: PUSH
41169: LD_VAR 0 1
41173: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41174: LD_VAR 0 1
41178: NOT
41179: PUSH
41180: LD_VAR 0 2
41184: NOT
41185: OR
41186: PUSH
41187: LD_VAR 0 3
41191: NOT
41192: OR
41193: PUSH
41194: LD_VAR 0 2
41198: PUSH
41199: LD_VAR 0 1
41203: GREATER
41204: OR
41205: PUSH
41206: LD_VAR 0 3
41210: PUSH
41211: LD_VAR 0 1
41215: GREATER
41216: OR
41217: IFFALSE 41221
// exit ;
41219: GO 41517
// if direction then
41221: LD_VAR 0 4
41225: IFFALSE 41289
// begin d := 1 ;
41227: LD_ADDR_VAR 0 9
41231: PUSH
41232: LD_INT 1
41234: ST_TO_ADDR
// if i_from > i_to then
41235: LD_VAR 0 2
41239: PUSH
41240: LD_VAR 0 3
41244: GREATER
41245: IFFALSE 41271
// length := ( array - i_from ) + i_to else
41247: LD_ADDR_VAR 0 11
41251: PUSH
41252: LD_VAR 0 1
41256: PUSH
41257: LD_VAR 0 2
41261: MINUS
41262: PUSH
41263: LD_VAR 0 3
41267: PLUS
41268: ST_TO_ADDR
41269: GO 41287
// length := i_to - i_from ;
41271: LD_ADDR_VAR 0 11
41275: PUSH
41276: LD_VAR 0 3
41280: PUSH
41281: LD_VAR 0 2
41285: MINUS
41286: ST_TO_ADDR
// end else
41287: GO 41350
// begin d := - 1 ;
41289: LD_ADDR_VAR 0 9
41293: PUSH
41294: LD_INT 1
41296: NEG
41297: ST_TO_ADDR
// if i_from > i_to then
41298: LD_VAR 0 2
41302: PUSH
41303: LD_VAR 0 3
41307: GREATER
41308: IFFALSE 41328
// length := i_from - i_to else
41310: LD_ADDR_VAR 0 11
41314: PUSH
41315: LD_VAR 0 2
41319: PUSH
41320: LD_VAR 0 3
41324: MINUS
41325: ST_TO_ADDR
41326: GO 41350
// length := ( array - i_to ) + i_from ;
41328: LD_ADDR_VAR 0 11
41332: PUSH
41333: LD_VAR 0 1
41337: PUSH
41338: LD_VAR 0 3
41342: MINUS
41343: PUSH
41344: LD_VAR 0 2
41348: PLUS
41349: ST_TO_ADDR
// end ; if not length then
41350: LD_VAR 0 11
41354: NOT
41355: IFFALSE 41359
// exit ;
41357: GO 41517
// tmp := array ;
41359: LD_ADDR_VAR 0 10
41363: PUSH
41364: LD_VAR 0 1
41368: ST_TO_ADDR
// for i = 1 to length do
41369: LD_ADDR_VAR 0 6
41373: PUSH
41374: DOUBLE
41375: LD_INT 1
41377: DEC
41378: ST_TO_ADDR
41379: LD_VAR 0 11
41383: PUSH
41384: FOR_TO
41385: IFFALSE 41505
// begin for j = 1 to array do
41387: LD_ADDR_VAR 0 7
41391: PUSH
41392: DOUBLE
41393: LD_INT 1
41395: DEC
41396: ST_TO_ADDR
41397: LD_VAR 0 1
41401: PUSH
41402: FOR_TO
41403: IFFALSE 41491
// begin k := j + d ;
41405: LD_ADDR_VAR 0 8
41409: PUSH
41410: LD_VAR 0 7
41414: PUSH
41415: LD_VAR 0 9
41419: PLUS
41420: ST_TO_ADDR
// if k > array then
41421: LD_VAR 0 8
41425: PUSH
41426: LD_VAR 0 1
41430: GREATER
41431: IFFALSE 41441
// k := 1 ;
41433: LD_ADDR_VAR 0 8
41437: PUSH
41438: LD_INT 1
41440: ST_TO_ADDR
// if not k then
41441: LD_VAR 0 8
41445: NOT
41446: IFFALSE 41458
// k := array ;
41448: LD_ADDR_VAR 0 8
41452: PUSH
41453: LD_VAR 0 1
41457: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41458: LD_ADDR_VAR 0 10
41462: PUSH
41463: LD_VAR 0 10
41467: PPUSH
41468: LD_VAR 0 8
41472: PPUSH
41473: LD_VAR 0 1
41477: PUSH
41478: LD_VAR 0 7
41482: ARRAY
41483: PPUSH
41484: CALL_OW 1
41488: ST_TO_ADDR
// end ;
41489: GO 41402
41491: POP
41492: POP
// array := tmp ;
41493: LD_ADDR_VAR 0 1
41497: PUSH
41498: LD_VAR 0 10
41502: ST_TO_ADDR
// end ;
41503: GO 41384
41505: POP
41506: POP
// result := array ;
41507: LD_ADDR_VAR 0 5
41511: PUSH
41512: LD_VAR 0 1
41516: ST_TO_ADDR
// end ;
41517: LD_VAR 0 5
41521: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41522: LD_INT 0
41524: PPUSH
41525: PPUSH
// result := 0 ;
41526: LD_ADDR_VAR 0 3
41530: PUSH
41531: LD_INT 0
41533: ST_TO_ADDR
// if not array or not value in array then
41534: LD_VAR 0 1
41538: NOT
41539: PUSH
41540: LD_VAR 0 2
41544: PUSH
41545: LD_VAR 0 1
41549: IN
41550: NOT
41551: OR
41552: IFFALSE 41556
// exit ;
41554: GO 41610
// for i = 1 to array do
41556: LD_ADDR_VAR 0 4
41560: PUSH
41561: DOUBLE
41562: LD_INT 1
41564: DEC
41565: ST_TO_ADDR
41566: LD_VAR 0 1
41570: PUSH
41571: FOR_TO
41572: IFFALSE 41608
// if value = array [ i ] then
41574: LD_VAR 0 2
41578: PUSH
41579: LD_VAR 0 1
41583: PUSH
41584: LD_VAR 0 4
41588: ARRAY
41589: EQUAL
41590: IFFALSE 41606
// begin result := i ;
41592: LD_ADDR_VAR 0 3
41596: PUSH
41597: LD_VAR 0 4
41601: ST_TO_ADDR
// exit ;
41602: POP
41603: POP
41604: GO 41610
// end ;
41606: GO 41571
41608: POP
41609: POP
// end ;
41610: LD_VAR 0 3
41614: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41615: LD_INT 0
41617: PPUSH
// vc_chassis := chassis ;
41618: LD_ADDR_OWVAR 37
41622: PUSH
41623: LD_VAR 0 1
41627: ST_TO_ADDR
// vc_engine := engine ;
41628: LD_ADDR_OWVAR 39
41632: PUSH
41633: LD_VAR 0 2
41637: ST_TO_ADDR
// vc_control := control ;
41638: LD_ADDR_OWVAR 38
41642: PUSH
41643: LD_VAR 0 3
41647: ST_TO_ADDR
// vc_weapon := weapon ;
41648: LD_ADDR_OWVAR 40
41652: PUSH
41653: LD_VAR 0 4
41657: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41658: LD_ADDR_OWVAR 41
41662: PUSH
41663: LD_VAR 0 5
41667: ST_TO_ADDR
// end ;
41668: LD_VAR 0 6
41672: RET
// export function WantPlant ( unit ) ; var task ; begin
41673: LD_INT 0
41675: PPUSH
41676: PPUSH
// result := false ;
41677: LD_ADDR_VAR 0 2
41681: PUSH
41682: LD_INT 0
41684: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41685: LD_ADDR_VAR 0 3
41689: PUSH
41690: LD_VAR 0 1
41694: PPUSH
41695: CALL_OW 437
41699: ST_TO_ADDR
// if task then
41700: LD_VAR 0 3
41704: IFFALSE 41732
// if task [ 1 ] [ 1 ] = p then
41706: LD_VAR 0 3
41710: PUSH
41711: LD_INT 1
41713: ARRAY
41714: PUSH
41715: LD_INT 1
41717: ARRAY
41718: PUSH
41719: LD_STRING p
41721: EQUAL
41722: IFFALSE 41732
// result := true ;
41724: LD_ADDR_VAR 0 2
41728: PUSH
41729: LD_INT 1
41731: ST_TO_ADDR
// end ;
41732: LD_VAR 0 2
41736: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41737: LD_INT 0
41739: PPUSH
41740: PPUSH
41741: PPUSH
41742: PPUSH
// if pos < 1 then
41743: LD_VAR 0 2
41747: PUSH
41748: LD_INT 1
41750: LESS
41751: IFFALSE 41755
// exit ;
41753: GO 42058
// if pos = 1 then
41755: LD_VAR 0 2
41759: PUSH
41760: LD_INT 1
41762: EQUAL
41763: IFFALSE 41796
// result := Replace ( arr , pos [ 1 ] , value ) else
41765: LD_ADDR_VAR 0 4
41769: PUSH
41770: LD_VAR 0 1
41774: PPUSH
41775: LD_VAR 0 2
41779: PUSH
41780: LD_INT 1
41782: ARRAY
41783: PPUSH
41784: LD_VAR 0 3
41788: PPUSH
41789: CALL_OW 1
41793: ST_TO_ADDR
41794: GO 42058
// begin tmp := arr ;
41796: LD_ADDR_VAR 0 6
41800: PUSH
41801: LD_VAR 0 1
41805: ST_TO_ADDR
// s_arr := [ tmp ] ;
41806: LD_ADDR_VAR 0 7
41810: PUSH
41811: LD_VAR 0 6
41815: PUSH
41816: EMPTY
41817: LIST
41818: ST_TO_ADDR
// for i = 1 to pos - 1 do
41819: LD_ADDR_VAR 0 5
41823: PUSH
41824: DOUBLE
41825: LD_INT 1
41827: DEC
41828: ST_TO_ADDR
41829: LD_VAR 0 2
41833: PUSH
41834: LD_INT 1
41836: MINUS
41837: PUSH
41838: FOR_TO
41839: IFFALSE 41884
// begin tmp := tmp [ pos [ i ] ] ;
41841: LD_ADDR_VAR 0 6
41845: PUSH
41846: LD_VAR 0 6
41850: PUSH
41851: LD_VAR 0 2
41855: PUSH
41856: LD_VAR 0 5
41860: ARRAY
41861: ARRAY
41862: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41863: LD_ADDR_VAR 0 7
41867: PUSH
41868: LD_VAR 0 7
41872: PUSH
41873: LD_VAR 0 6
41877: PUSH
41878: EMPTY
41879: LIST
41880: ADD
41881: ST_TO_ADDR
// end ;
41882: GO 41838
41884: POP
41885: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41886: LD_ADDR_VAR 0 6
41890: PUSH
41891: LD_VAR 0 6
41895: PPUSH
41896: LD_VAR 0 2
41900: PUSH
41901: LD_VAR 0 2
41905: ARRAY
41906: PPUSH
41907: LD_VAR 0 3
41911: PPUSH
41912: CALL_OW 1
41916: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41917: LD_ADDR_VAR 0 7
41921: PUSH
41922: LD_VAR 0 7
41926: PPUSH
41927: LD_VAR 0 7
41931: PPUSH
41932: LD_VAR 0 6
41936: PPUSH
41937: CALL_OW 1
41941: ST_TO_ADDR
// for i = s_arr downto 2 do
41942: LD_ADDR_VAR 0 5
41946: PUSH
41947: DOUBLE
41948: LD_VAR 0 7
41952: INC
41953: ST_TO_ADDR
41954: LD_INT 2
41956: PUSH
41957: FOR_DOWNTO
41958: IFFALSE 42042
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41960: LD_ADDR_VAR 0 6
41964: PUSH
41965: LD_VAR 0 7
41969: PUSH
41970: LD_VAR 0 5
41974: PUSH
41975: LD_INT 1
41977: MINUS
41978: ARRAY
41979: PPUSH
41980: LD_VAR 0 2
41984: PUSH
41985: LD_VAR 0 5
41989: PUSH
41990: LD_INT 1
41992: MINUS
41993: ARRAY
41994: PPUSH
41995: LD_VAR 0 7
41999: PUSH
42000: LD_VAR 0 5
42004: ARRAY
42005: PPUSH
42006: CALL_OW 1
42010: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42011: LD_ADDR_VAR 0 7
42015: PUSH
42016: LD_VAR 0 7
42020: PPUSH
42021: LD_VAR 0 5
42025: PUSH
42026: LD_INT 1
42028: MINUS
42029: PPUSH
42030: LD_VAR 0 6
42034: PPUSH
42035: CALL_OW 1
42039: ST_TO_ADDR
// end ;
42040: GO 41957
42042: POP
42043: POP
// result := s_arr [ 1 ] ;
42044: LD_ADDR_VAR 0 4
42048: PUSH
42049: LD_VAR 0 7
42053: PUSH
42054: LD_INT 1
42056: ARRAY
42057: ST_TO_ADDR
// end ; end ;
42058: LD_VAR 0 4
42062: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42063: LD_INT 0
42065: PPUSH
42066: PPUSH
// if not list then
42067: LD_VAR 0 1
42071: NOT
42072: IFFALSE 42076
// exit ;
42074: GO 42167
// i := list [ pos1 ] ;
42076: LD_ADDR_VAR 0 5
42080: PUSH
42081: LD_VAR 0 1
42085: PUSH
42086: LD_VAR 0 2
42090: ARRAY
42091: ST_TO_ADDR
// if not i then
42092: LD_VAR 0 5
42096: NOT
42097: IFFALSE 42101
// exit ;
42099: GO 42167
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42101: LD_ADDR_VAR 0 1
42105: PUSH
42106: LD_VAR 0 1
42110: PPUSH
42111: LD_VAR 0 2
42115: PPUSH
42116: LD_VAR 0 1
42120: PUSH
42121: LD_VAR 0 3
42125: ARRAY
42126: PPUSH
42127: CALL_OW 1
42131: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42132: LD_ADDR_VAR 0 1
42136: PUSH
42137: LD_VAR 0 1
42141: PPUSH
42142: LD_VAR 0 3
42146: PPUSH
42147: LD_VAR 0 5
42151: PPUSH
42152: CALL_OW 1
42156: ST_TO_ADDR
// result := list ;
42157: LD_ADDR_VAR 0 4
42161: PUSH
42162: LD_VAR 0 1
42166: ST_TO_ADDR
// end ;
42167: LD_VAR 0 4
42171: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42172: LD_INT 0
42174: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42175: LD_ADDR_VAR 0 5
42179: PUSH
42180: LD_VAR 0 1
42184: PPUSH
42185: CALL_OW 250
42189: PPUSH
42190: LD_VAR 0 1
42194: PPUSH
42195: CALL_OW 251
42199: PPUSH
42200: LD_VAR 0 2
42204: PPUSH
42205: LD_VAR 0 3
42209: PPUSH
42210: LD_VAR 0 4
42214: PPUSH
42215: CALL 42225 0 5
42219: ST_TO_ADDR
// end ;
42220: LD_VAR 0 5
42224: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42225: LD_INT 0
42227: PPUSH
42228: PPUSH
42229: PPUSH
42230: PPUSH
// if not list then
42231: LD_VAR 0 3
42235: NOT
42236: IFFALSE 42240
// exit ;
42238: GO 42628
// result := [ ] ;
42240: LD_ADDR_VAR 0 6
42244: PUSH
42245: EMPTY
42246: ST_TO_ADDR
// for i in list do
42247: LD_ADDR_VAR 0 7
42251: PUSH
42252: LD_VAR 0 3
42256: PUSH
42257: FOR_IN
42258: IFFALSE 42460
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42260: LD_ADDR_VAR 0 9
42264: PUSH
42265: LD_VAR 0 7
42269: PPUSH
42270: LD_VAR 0 1
42274: PPUSH
42275: LD_VAR 0 2
42279: PPUSH
42280: CALL_OW 297
42284: ST_TO_ADDR
// if not result then
42285: LD_VAR 0 6
42289: NOT
42290: IFFALSE 42316
// result := [ [ i , tmp ] ] else
42292: LD_ADDR_VAR 0 6
42296: PUSH
42297: LD_VAR 0 7
42301: PUSH
42302: LD_VAR 0 9
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: EMPTY
42312: LIST
42313: ST_TO_ADDR
42314: GO 42458
// begin if result [ result ] [ 2 ] < tmp then
42316: LD_VAR 0 6
42320: PUSH
42321: LD_VAR 0 6
42325: ARRAY
42326: PUSH
42327: LD_INT 2
42329: ARRAY
42330: PUSH
42331: LD_VAR 0 9
42335: LESS
42336: IFFALSE 42378
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42338: LD_ADDR_VAR 0 6
42342: PUSH
42343: LD_VAR 0 6
42347: PPUSH
42348: LD_VAR 0 6
42352: PUSH
42353: LD_INT 1
42355: PLUS
42356: PPUSH
42357: LD_VAR 0 7
42361: PUSH
42362: LD_VAR 0 9
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PPUSH
42371: CALL_OW 2
42375: ST_TO_ADDR
42376: GO 42458
// for j = 1 to result do
42378: LD_ADDR_VAR 0 8
42382: PUSH
42383: DOUBLE
42384: LD_INT 1
42386: DEC
42387: ST_TO_ADDR
42388: LD_VAR 0 6
42392: PUSH
42393: FOR_TO
42394: IFFALSE 42456
// begin if tmp < result [ j ] [ 2 ] then
42396: LD_VAR 0 9
42400: PUSH
42401: LD_VAR 0 6
42405: PUSH
42406: LD_VAR 0 8
42410: ARRAY
42411: PUSH
42412: LD_INT 2
42414: ARRAY
42415: LESS
42416: IFFALSE 42454
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42418: LD_ADDR_VAR 0 6
42422: PUSH
42423: LD_VAR 0 6
42427: PPUSH
42428: LD_VAR 0 8
42432: PPUSH
42433: LD_VAR 0 7
42437: PUSH
42438: LD_VAR 0 9
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PPUSH
42447: CALL_OW 2
42451: ST_TO_ADDR
// break ;
42452: GO 42456
// end ; end ;
42454: GO 42393
42456: POP
42457: POP
// end ; end ;
42458: GO 42257
42460: POP
42461: POP
// if result and not asc then
42462: LD_VAR 0 6
42466: PUSH
42467: LD_VAR 0 4
42471: NOT
42472: AND
42473: IFFALSE 42548
// begin tmp := result ;
42475: LD_ADDR_VAR 0 9
42479: PUSH
42480: LD_VAR 0 6
42484: ST_TO_ADDR
// for i = tmp downto 1 do
42485: LD_ADDR_VAR 0 7
42489: PUSH
42490: DOUBLE
42491: LD_VAR 0 9
42495: INC
42496: ST_TO_ADDR
42497: LD_INT 1
42499: PUSH
42500: FOR_DOWNTO
42501: IFFALSE 42546
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42503: LD_ADDR_VAR 0 6
42507: PUSH
42508: LD_VAR 0 6
42512: PPUSH
42513: LD_VAR 0 9
42517: PUSH
42518: LD_VAR 0 7
42522: MINUS
42523: PUSH
42524: LD_INT 1
42526: PLUS
42527: PPUSH
42528: LD_VAR 0 9
42532: PUSH
42533: LD_VAR 0 7
42537: ARRAY
42538: PPUSH
42539: CALL_OW 1
42543: ST_TO_ADDR
42544: GO 42500
42546: POP
42547: POP
// end ; tmp := [ ] ;
42548: LD_ADDR_VAR 0 9
42552: PUSH
42553: EMPTY
42554: ST_TO_ADDR
// if mode then
42555: LD_VAR 0 5
42559: IFFALSE 42628
// begin for i = 1 to result do
42561: LD_ADDR_VAR 0 7
42565: PUSH
42566: DOUBLE
42567: LD_INT 1
42569: DEC
42570: ST_TO_ADDR
42571: LD_VAR 0 6
42575: PUSH
42576: FOR_TO
42577: IFFALSE 42616
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42579: LD_ADDR_VAR 0 9
42583: PUSH
42584: LD_VAR 0 9
42588: PPUSH
42589: LD_VAR 0 7
42593: PPUSH
42594: LD_VAR 0 6
42598: PUSH
42599: LD_VAR 0 7
42603: ARRAY
42604: PUSH
42605: LD_INT 1
42607: ARRAY
42608: PPUSH
42609: CALL_OW 1
42613: ST_TO_ADDR
42614: GO 42576
42616: POP
42617: POP
// result := tmp ;
42618: LD_ADDR_VAR 0 6
42622: PUSH
42623: LD_VAR 0 9
42627: ST_TO_ADDR
// end ; end ;
42628: LD_VAR 0 6
42632: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42633: LD_INT 0
42635: PPUSH
42636: PPUSH
42637: PPUSH
42638: PPUSH
42639: PPUSH
42640: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42641: LD_ADDR_VAR 0 5
42645: PUSH
42646: LD_INT 0
42648: PUSH
42649: LD_INT 0
42651: PUSH
42652: LD_INT 0
42654: PUSH
42655: EMPTY
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: ST_TO_ADDR
// if not x or not y then
42663: LD_VAR 0 2
42667: NOT
42668: PUSH
42669: LD_VAR 0 3
42673: NOT
42674: OR
42675: IFFALSE 42679
// exit ;
42677: GO 44329
// if not range then
42679: LD_VAR 0 4
42683: NOT
42684: IFFALSE 42694
// range := 10 ;
42686: LD_ADDR_VAR 0 4
42690: PUSH
42691: LD_INT 10
42693: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42694: LD_ADDR_VAR 0 8
42698: PUSH
42699: LD_INT 81
42701: PUSH
42702: LD_VAR 0 1
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 92
42713: PUSH
42714: LD_VAR 0 2
42718: PUSH
42719: LD_VAR 0 3
42723: PUSH
42724: LD_VAR 0 4
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 3
42737: PUSH
42738: LD_INT 21
42740: PUSH
42741: LD_INT 3
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: LIST
42756: PPUSH
42757: CALL_OW 69
42761: ST_TO_ADDR
// if not tmp then
42762: LD_VAR 0 8
42766: NOT
42767: IFFALSE 42771
// exit ;
42769: GO 44329
// for i in tmp do
42771: LD_ADDR_VAR 0 6
42775: PUSH
42776: LD_VAR 0 8
42780: PUSH
42781: FOR_IN
42782: IFFALSE 44304
// begin points := [ 0 , 0 , 0 ] ;
42784: LD_ADDR_VAR 0 9
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: LD_INT 0
42794: PUSH
42795: LD_INT 0
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: LIST
42802: ST_TO_ADDR
// bpoints := 1 ;
42803: LD_ADDR_VAR 0 10
42807: PUSH
42808: LD_INT 1
42810: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42811: LD_VAR 0 6
42815: PPUSH
42816: CALL_OW 247
42820: PUSH
42821: LD_INT 1
42823: DOUBLE
42824: EQUAL
42825: IFTRUE 42829
42827: GO 43407
42829: POP
// begin if GetClass ( i ) = 1 then
42830: LD_VAR 0 6
42834: PPUSH
42835: CALL_OW 257
42839: PUSH
42840: LD_INT 1
42842: EQUAL
42843: IFFALSE 42864
// points := [ 10 , 5 , 3 ] ;
42845: LD_ADDR_VAR 0 9
42849: PUSH
42850: LD_INT 10
42852: PUSH
42853: LD_INT 5
42855: PUSH
42856: LD_INT 3
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: LIST
42863: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42864: LD_VAR 0 6
42868: PPUSH
42869: CALL_OW 257
42873: PUSH
42874: LD_INT 2
42876: PUSH
42877: LD_INT 3
42879: PUSH
42880: LD_INT 4
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: LIST
42887: IN
42888: IFFALSE 42909
// points := [ 3 , 2 , 1 ] ;
42890: LD_ADDR_VAR 0 9
42894: PUSH
42895: LD_INT 3
42897: PUSH
42898: LD_INT 2
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: LIST
42908: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42909: LD_VAR 0 6
42913: PPUSH
42914: CALL_OW 257
42918: PUSH
42919: LD_INT 5
42921: EQUAL
42922: IFFALSE 42943
// points := [ 130 , 5 , 2 ] ;
42924: LD_ADDR_VAR 0 9
42928: PUSH
42929: LD_INT 130
42931: PUSH
42932: LD_INT 5
42934: PUSH
42935: LD_INT 2
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: LIST
42942: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42943: LD_VAR 0 6
42947: PPUSH
42948: CALL_OW 257
42952: PUSH
42953: LD_INT 8
42955: EQUAL
42956: IFFALSE 42977
// points := [ 35 , 35 , 30 ] ;
42958: LD_ADDR_VAR 0 9
42962: PUSH
42963: LD_INT 35
42965: PUSH
42966: LD_INT 35
42968: PUSH
42969: LD_INT 30
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: LIST
42976: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42977: LD_VAR 0 6
42981: PPUSH
42982: CALL_OW 257
42986: PUSH
42987: LD_INT 9
42989: EQUAL
42990: IFFALSE 43011
// points := [ 20 , 55 , 40 ] ;
42992: LD_ADDR_VAR 0 9
42996: PUSH
42997: LD_INT 20
42999: PUSH
43000: LD_INT 55
43002: PUSH
43003: LD_INT 40
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: LIST
43010: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43011: LD_VAR 0 6
43015: PPUSH
43016: CALL_OW 257
43020: PUSH
43021: LD_INT 12
43023: PUSH
43024: LD_INT 16
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: IN
43031: IFFALSE 43052
// points := [ 5 , 3 , 2 ] ;
43033: LD_ADDR_VAR 0 9
43037: PUSH
43038: LD_INT 5
43040: PUSH
43041: LD_INT 3
43043: PUSH
43044: LD_INT 2
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: LIST
43051: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43052: LD_VAR 0 6
43056: PPUSH
43057: CALL_OW 257
43061: PUSH
43062: LD_INT 17
43064: EQUAL
43065: IFFALSE 43086
// points := [ 100 , 50 , 75 ] ;
43067: LD_ADDR_VAR 0 9
43071: PUSH
43072: LD_INT 100
43074: PUSH
43075: LD_INT 50
43077: PUSH
43078: LD_INT 75
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: LIST
43085: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43086: LD_VAR 0 6
43090: PPUSH
43091: CALL_OW 257
43095: PUSH
43096: LD_INT 15
43098: EQUAL
43099: IFFALSE 43120
// points := [ 10 , 5 , 3 ] ;
43101: LD_ADDR_VAR 0 9
43105: PUSH
43106: LD_INT 10
43108: PUSH
43109: LD_INT 5
43111: PUSH
43112: LD_INT 3
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: LIST
43119: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43120: LD_VAR 0 6
43124: PPUSH
43125: CALL_OW 257
43129: PUSH
43130: LD_INT 14
43132: EQUAL
43133: IFFALSE 43154
// points := [ 10 , 0 , 0 ] ;
43135: LD_ADDR_VAR 0 9
43139: PUSH
43140: LD_INT 10
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: LD_INT 0
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: LIST
43153: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43154: LD_VAR 0 6
43158: PPUSH
43159: CALL_OW 257
43163: PUSH
43164: LD_INT 11
43166: EQUAL
43167: IFFALSE 43188
// points := [ 30 , 10 , 5 ] ;
43169: LD_ADDR_VAR 0 9
43173: PUSH
43174: LD_INT 30
43176: PUSH
43177: LD_INT 10
43179: PUSH
43180: LD_INT 5
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: LIST
43187: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43188: LD_VAR 0 1
43192: PPUSH
43193: LD_INT 5
43195: PPUSH
43196: CALL_OW 321
43200: PUSH
43201: LD_INT 2
43203: EQUAL
43204: IFFALSE 43221
// bpoints := bpoints * 1.8 ;
43206: LD_ADDR_VAR 0 10
43210: PUSH
43211: LD_VAR 0 10
43215: PUSH
43216: LD_REAL  1.80000000000000E+0000
43219: MUL
43220: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43221: LD_VAR 0 6
43225: PPUSH
43226: CALL_OW 257
43230: PUSH
43231: LD_INT 1
43233: PUSH
43234: LD_INT 2
43236: PUSH
43237: LD_INT 3
43239: PUSH
43240: LD_INT 4
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: IN
43249: PUSH
43250: LD_VAR 0 1
43254: PPUSH
43255: LD_INT 51
43257: PPUSH
43258: CALL_OW 321
43262: PUSH
43263: LD_INT 2
43265: EQUAL
43266: AND
43267: IFFALSE 43284
// bpoints := bpoints * 1.2 ;
43269: LD_ADDR_VAR 0 10
43273: PUSH
43274: LD_VAR 0 10
43278: PUSH
43279: LD_REAL  1.20000000000000E+0000
43282: MUL
43283: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43284: LD_VAR 0 6
43288: PPUSH
43289: CALL_OW 257
43293: PUSH
43294: LD_INT 5
43296: PUSH
43297: LD_INT 7
43299: PUSH
43300: LD_INT 9
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: LIST
43307: IN
43308: PUSH
43309: LD_VAR 0 1
43313: PPUSH
43314: LD_INT 52
43316: PPUSH
43317: CALL_OW 321
43321: PUSH
43322: LD_INT 2
43324: EQUAL
43325: AND
43326: IFFALSE 43343
// bpoints := bpoints * 1.5 ;
43328: LD_ADDR_VAR 0 10
43332: PUSH
43333: LD_VAR 0 10
43337: PUSH
43338: LD_REAL  1.50000000000000E+0000
43341: MUL
43342: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43343: LD_VAR 0 1
43347: PPUSH
43348: LD_INT 66
43350: PPUSH
43351: CALL_OW 321
43355: PUSH
43356: LD_INT 2
43358: EQUAL
43359: IFFALSE 43376
// bpoints := bpoints * 1.1 ;
43361: LD_ADDR_VAR 0 10
43365: PUSH
43366: LD_VAR 0 10
43370: PUSH
43371: LD_REAL  1.10000000000000E+0000
43374: MUL
43375: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43376: LD_ADDR_VAR 0 10
43380: PUSH
43381: LD_VAR 0 10
43385: PUSH
43386: LD_VAR 0 6
43390: PPUSH
43391: LD_INT 1
43393: PPUSH
43394: CALL_OW 259
43398: PUSH
43399: LD_REAL  1.15000000000000E+0000
43402: MUL
43403: MUL
43404: ST_TO_ADDR
// end ; unit_vehicle :
43405: GO 44233
43407: LD_INT 2
43409: DOUBLE
43410: EQUAL
43411: IFTRUE 43415
43413: GO 44221
43415: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43416: LD_VAR 0 6
43420: PPUSH
43421: CALL_OW 264
43425: PUSH
43426: LD_INT 2
43428: PUSH
43429: LD_INT 42
43431: PUSH
43432: LD_INT 24
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: LIST
43439: IN
43440: IFFALSE 43461
// points := [ 25 , 5 , 3 ] ;
43442: LD_ADDR_VAR 0 9
43446: PUSH
43447: LD_INT 25
43449: PUSH
43450: LD_INT 5
43452: PUSH
43453: LD_INT 3
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: LIST
43460: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43461: LD_VAR 0 6
43465: PPUSH
43466: CALL_OW 264
43470: PUSH
43471: LD_INT 4
43473: PUSH
43474: LD_INT 43
43476: PUSH
43477: LD_INT 25
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: LIST
43484: IN
43485: IFFALSE 43506
// points := [ 40 , 15 , 5 ] ;
43487: LD_ADDR_VAR 0 9
43491: PUSH
43492: LD_INT 40
43494: PUSH
43495: LD_INT 15
43497: PUSH
43498: LD_INT 5
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: LIST
43505: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43506: LD_VAR 0 6
43510: PPUSH
43511: CALL_OW 264
43515: PUSH
43516: LD_INT 3
43518: PUSH
43519: LD_INT 23
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: IN
43526: IFFALSE 43547
// points := [ 7 , 25 , 8 ] ;
43528: LD_ADDR_VAR 0 9
43532: PUSH
43533: LD_INT 7
43535: PUSH
43536: LD_INT 25
43538: PUSH
43539: LD_INT 8
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: LIST
43546: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43547: LD_VAR 0 6
43551: PPUSH
43552: CALL_OW 264
43556: PUSH
43557: LD_INT 5
43559: PUSH
43560: LD_INT 27
43562: PUSH
43563: LD_INT 44
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: LIST
43570: IN
43571: IFFALSE 43592
// points := [ 14 , 50 , 16 ] ;
43573: LD_ADDR_VAR 0 9
43577: PUSH
43578: LD_INT 14
43580: PUSH
43581: LD_INT 50
43583: PUSH
43584: LD_INT 16
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: LIST
43591: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43592: LD_VAR 0 6
43596: PPUSH
43597: CALL_OW 264
43601: PUSH
43602: LD_INT 6
43604: PUSH
43605: LD_INT 46
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: IN
43612: IFFALSE 43633
// points := [ 32 , 120 , 70 ] ;
43614: LD_ADDR_VAR 0 9
43618: PUSH
43619: LD_INT 32
43621: PUSH
43622: LD_INT 120
43624: PUSH
43625: LD_INT 70
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: LIST
43632: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43633: LD_VAR 0 6
43637: PPUSH
43638: CALL_OW 264
43642: PUSH
43643: LD_INT 7
43645: PUSH
43646: LD_INT 28
43648: PUSH
43649: LD_INT 45
43651: PUSH
43652: LD_INT 92
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: IN
43661: IFFALSE 43682
// points := [ 35 , 20 , 45 ] ;
43663: LD_ADDR_VAR 0 9
43667: PUSH
43668: LD_INT 35
43670: PUSH
43671: LD_INT 20
43673: PUSH
43674: LD_INT 45
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: LIST
43681: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43682: LD_VAR 0 6
43686: PPUSH
43687: CALL_OW 264
43691: PUSH
43692: LD_INT 47
43694: PUSH
43695: EMPTY
43696: LIST
43697: IN
43698: IFFALSE 43719
// points := [ 67 , 45 , 75 ] ;
43700: LD_ADDR_VAR 0 9
43704: PUSH
43705: LD_INT 67
43707: PUSH
43708: LD_INT 45
43710: PUSH
43711: LD_INT 75
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: LIST
43718: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43719: LD_VAR 0 6
43723: PPUSH
43724: CALL_OW 264
43728: PUSH
43729: LD_INT 26
43731: PUSH
43732: EMPTY
43733: LIST
43734: IN
43735: IFFALSE 43756
// points := [ 120 , 30 , 80 ] ;
43737: LD_ADDR_VAR 0 9
43741: PUSH
43742: LD_INT 120
43744: PUSH
43745: LD_INT 30
43747: PUSH
43748: LD_INT 80
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: LIST
43755: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43756: LD_VAR 0 6
43760: PPUSH
43761: CALL_OW 264
43765: PUSH
43766: LD_INT 22
43768: PUSH
43769: EMPTY
43770: LIST
43771: IN
43772: IFFALSE 43793
// points := [ 40 , 1 , 1 ] ;
43774: LD_ADDR_VAR 0 9
43778: PUSH
43779: LD_INT 40
43781: PUSH
43782: LD_INT 1
43784: PUSH
43785: LD_INT 1
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: LIST
43792: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43793: LD_VAR 0 6
43797: PPUSH
43798: CALL_OW 264
43802: PUSH
43803: LD_INT 29
43805: PUSH
43806: EMPTY
43807: LIST
43808: IN
43809: IFFALSE 43830
// points := [ 70 , 200 , 400 ] ;
43811: LD_ADDR_VAR 0 9
43815: PUSH
43816: LD_INT 70
43818: PUSH
43819: LD_INT 200
43821: PUSH
43822: LD_INT 400
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: LIST
43829: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43830: LD_VAR 0 6
43834: PPUSH
43835: CALL_OW 264
43839: PUSH
43840: LD_INT 14
43842: PUSH
43843: LD_INT 53
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: IN
43850: IFFALSE 43871
// points := [ 40 , 10 , 20 ] ;
43852: LD_ADDR_VAR 0 9
43856: PUSH
43857: LD_INT 40
43859: PUSH
43860: LD_INT 10
43862: PUSH
43863: LD_INT 20
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: LIST
43870: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43871: LD_VAR 0 6
43875: PPUSH
43876: CALL_OW 264
43880: PUSH
43881: LD_INT 9
43883: PUSH
43884: EMPTY
43885: LIST
43886: IN
43887: IFFALSE 43908
// points := [ 5 , 70 , 20 ] ;
43889: LD_ADDR_VAR 0 9
43893: PUSH
43894: LD_INT 5
43896: PUSH
43897: LD_INT 70
43899: PUSH
43900: LD_INT 20
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: LIST
43907: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43908: LD_VAR 0 6
43912: PPUSH
43913: CALL_OW 264
43917: PUSH
43918: LD_INT 10
43920: PUSH
43921: EMPTY
43922: LIST
43923: IN
43924: IFFALSE 43945
// points := [ 35 , 110 , 70 ] ;
43926: LD_ADDR_VAR 0 9
43930: PUSH
43931: LD_INT 35
43933: PUSH
43934: LD_INT 110
43936: PUSH
43937: LD_INT 70
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: LIST
43944: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43945: LD_VAR 0 6
43949: PPUSH
43950: CALL_OW 265
43954: PUSH
43955: LD_INT 25
43957: EQUAL
43958: IFFALSE 43979
// points := [ 80 , 65 , 100 ] ;
43960: LD_ADDR_VAR 0 9
43964: PUSH
43965: LD_INT 80
43967: PUSH
43968: LD_INT 65
43970: PUSH
43971: LD_INT 100
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: LIST
43978: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43979: LD_VAR 0 6
43983: PPUSH
43984: CALL_OW 263
43988: PUSH
43989: LD_INT 1
43991: EQUAL
43992: IFFALSE 44027
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43994: LD_ADDR_VAR 0 10
43998: PUSH
43999: LD_VAR 0 10
44003: PUSH
44004: LD_VAR 0 6
44008: PPUSH
44009: CALL_OW 311
44013: PPUSH
44014: LD_INT 3
44016: PPUSH
44017: CALL_OW 259
44021: PUSH
44022: LD_INT 4
44024: MUL
44025: MUL
44026: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44027: LD_VAR 0 6
44031: PPUSH
44032: CALL_OW 263
44036: PUSH
44037: LD_INT 2
44039: EQUAL
44040: IFFALSE 44091
// begin j := IsControledBy ( i ) ;
44042: LD_ADDR_VAR 0 7
44046: PUSH
44047: LD_VAR 0 6
44051: PPUSH
44052: CALL_OW 312
44056: ST_TO_ADDR
// if j then
44057: LD_VAR 0 7
44061: IFFALSE 44091
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44063: LD_ADDR_VAR 0 10
44067: PUSH
44068: LD_VAR 0 10
44072: PUSH
44073: LD_VAR 0 7
44077: PPUSH
44078: LD_INT 3
44080: PPUSH
44081: CALL_OW 259
44085: PUSH
44086: LD_INT 3
44088: MUL
44089: MUL
44090: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44091: LD_VAR 0 6
44095: PPUSH
44096: CALL_OW 264
44100: PUSH
44101: LD_INT 5
44103: PUSH
44104: LD_INT 6
44106: PUSH
44107: LD_INT 46
44109: PUSH
44110: LD_INT 44
44112: PUSH
44113: LD_INT 47
44115: PUSH
44116: LD_INT 45
44118: PUSH
44119: LD_INT 28
44121: PUSH
44122: LD_INT 7
44124: PUSH
44125: LD_INT 27
44127: PUSH
44128: LD_INT 29
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: IN
44143: PUSH
44144: LD_VAR 0 1
44148: PPUSH
44149: LD_INT 52
44151: PPUSH
44152: CALL_OW 321
44156: PUSH
44157: LD_INT 2
44159: EQUAL
44160: AND
44161: IFFALSE 44178
// bpoints := bpoints * 1.2 ;
44163: LD_ADDR_VAR 0 10
44167: PUSH
44168: LD_VAR 0 10
44172: PUSH
44173: LD_REAL  1.20000000000000E+0000
44176: MUL
44177: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44178: LD_VAR 0 6
44182: PPUSH
44183: CALL_OW 264
44187: PUSH
44188: LD_INT 6
44190: PUSH
44191: LD_INT 46
44193: PUSH
44194: LD_INT 47
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: LIST
44201: IN
44202: IFFALSE 44219
// bpoints := bpoints * 1.2 ;
44204: LD_ADDR_VAR 0 10
44208: PUSH
44209: LD_VAR 0 10
44213: PUSH
44214: LD_REAL  1.20000000000000E+0000
44217: MUL
44218: ST_TO_ADDR
// end ; unit_building :
44219: GO 44233
44221: LD_INT 3
44223: DOUBLE
44224: EQUAL
44225: IFTRUE 44229
44227: GO 44232
44229: POP
// ; end ;
44230: GO 44233
44232: POP
// for j = 1 to 3 do
44233: LD_ADDR_VAR 0 7
44237: PUSH
44238: DOUBLE
44239: LD_INT 1
44241: DEC
44242: ST_TO_ADDR
44243: LD_INT 3
44245: PUSH
44246: FOR_TO
44247: IFFALSE 44300
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44249: LD_ADDR_VAR 0 5
44253: PUSH
44254: LD_VAR 0 5
44258: PPUSH
44259: LD_VAR 0 7
44263: PPUSH
44264: LD_VAR 0 5
44268: PUSH
44269: LD_VAR 0 7
44273: ARRAY
44274: PUSH
44275: LD_VAR 0 9
44279: PUSH
44280: LD_VAR 0 7
44284: ARRAY
44285: PUSH
44286: LD_VAR 0 10
44290: MUL
44291: PLUS
44292: PPUSH
44293: CALL_OW 1
44297: ST_TO_ADDR
44298: GO 44246
44300: POP
44301: POP
// end ;
44302: GO 42781
44304: POP
44305: POP
// result := Replace ( result , 4 , tmp ) ;
44306: LD_ADDR_VAR 0 5
44310: PUSH
44311: LD_VAR 0 5
44315: PPUSH
44316: LD_INT 4
44318: PPUSH
44319: LD_VAR 0 8
44323: PPUSH
44324: CALL_OW 1
44328: ST_TO_ADDR
// end ;
44329: LD_VAR 0 5
44333: RET
// export function DangerAtRange ( unit , range ) ; begin
44334: LD_INT 0
44336: PPUSH
// if not unit then
44337: LD_VAR 0 1
44341: NOT
44342: IFFALSE 44346
// exit ;
44344: GO 44391
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44346: LD_ADDR_VAR 0 3
44350: PUSH
44351: LD_VAR 0 1
44355: PPUSH
44356: CALL_OW 255
44360: PPUSH
44361: LD_VAR 0 1
44365: PPUSH
44366: CALL_OW 250
44370: PPUSH
44371: LD_VAR 0 1
44375: PPUSH
44376: CALL_OW 251
44380: PPUSH
44381: LD_VAR 0 2
44385: PPUSH
44386: CALL 42633 0 4
44390: ST_TO_ADDR
// end ;
44391: LD_VAR 0 3
44395: RET
// export function DangerInArea ( side , area ) ; begin
44396: LD_INT 0
44398: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44399: LD_ADDR_VAR 0 3
44403: PUSH
44404: LD_VAR 0 2
44408: PPUSH
44409: LD_INT 81
44411: PUSH
44412: LD_VAR 0 1
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PPUSH
44421: CALL_OW 70
44425: ST_TO_ADDR
// end ;
44426: LD_VAR 0 3
44430: RET
// export function IsExtension ( b ) ; begin
44431: LD_INT 0
44433: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44434: LD_ADDR_VAR 0 2
44438: PUSH
44439: LD_VAR 0 1
44443: PUSH
44444: LD_INT 23
44446: PUSH
44447: LD_INT 20
44449: PUSH
44450: LD_INT 22
44452: PUSH
44453: LD_INT 17
44455: PUSH
44456: LD_INT 24
44458: PUSH
44459: LD_INT 21
44461: PUSH
44462: LD_INT 19
44464: PUSH
44465: LD_INT 16
44467: PUSH
44468: LD_INT 25
44470: PUSH
44471: LD_INT 18
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: IN
44486: ST_TO_ADDR
// end ;
44487: LD_VAR 0 2
44491: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44492: LD_INT 0
44494: PPUSH
44495: PPUSH
44496: PPUSH
// result := [ ] ;
44497: LD_ADDR_VAR 0 4
44501: PUSH
44502: EMPTY
44503: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44504: LD_ADDR_VAR 0 5
44508: PUSH
44509: LD_VAR 0 2
44513: PPUSH
44514: LD_INT 21
44516: PUSH
44517: LD_INT 3
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PPUSH
44524: CALL_OW 70
44528: ST_TO_ADDR
// if not tmp then
44529: LD_VAR 0 5
44533: NOT
44534: IFFALSE 44538
// exit ;
44536: GO 44602
// if checkLink then
44538: LD_VAR 0 3
44542: IFFALSE 44592
// begin for i in tmp do
44544: LD_ADDR_VAR 0 6
44548: PUSH
44549: LD_VAR 0 5
44553: PUSH
44554: FOR_IN
44555: IFFALSE 44590
// if GetBase ( i ) <> base then
44557: LD_VAR 0 6
44561: PPUSH
44562: CALL_OW 274
44566: PUSH
44567: LD_VAR 0 1
44571: NONEQUAL
44572: IFFALSE 44588
// ComLinkToBase ( base , i ) ;
44574: LD_VAR 0 1
44578: PPUSH
44579: LD_VAR 0 6
44583: PPUSH
44584: CALL_OW 169
44588: GO 44554
44590: POP
44591: POP
// end ; result := tmp ;
44592: LD_ADDR_VAR 0 4
44596: PUSH
44597: LD_VAR 0 5
44601: ST_TO_ADDR
// end ;
44602: LD_VAR 0 4
44606: RET
// export function ComComplete ( units , b ) ; var i ; begin
44607: LD_INT 0
44609: PPUSH
44610: PPUSH
// if not units then
44611: LD_VAR 0 1
44615: NOT
44616: IFFALSE 44620
// exit ;
44618: GO 44710
// for i in units do
44620: LD_ADDR_VAR 0 4
44624: PUSH
44625: LD_VAR 0 1
44629: PUSH
44630: FOR_IN
44631: IFFALSE 44708
// if BuildingStatus ( b ) = bs_build then
44633: LD_VAR 0 2
44637: PPUSH
44638: CALL_OW 461
44642: PUSH
44643: LD_INT 1
44645: EQUAL
44646: IFFALSE 44706
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44648: LD_VAR 0 4
44652: PPUSH
44653: LD_STRING h
44655: PUSH
44656: LD_VAR 0 2
44660: PPUSH
44661: CALL_OW 250
44665: PUSH
44666: LD_VAR 0 2
44670: PPUSH
44671: CALL_OW 251
44675: PUSH
44676: LD_VAR 0 2
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: PUSH
44699: EMPTY
44700: LIST
44701: PPUSH
44702: CALL_OW 446
44706: GO 44630
44708: POP
44709: POP
// end ;
44710: LD_VAR 0 3
44714: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44715: LD_INT 0
44717: PPUSH
44718: PPUSH
44719: PPUSH
44720: PPUSH
44721: PPUSH
44722: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44723: LD_VAR 0 1
44727: NOT
44728: PUSH
44729: LD_VAR 0 1
44733: PPUSH
44734: CALL_OW 263
44738: PUSH
44739: LD_INT 2
44741: NONEQUAL
44742: OR
44743: IFFALSE 44747
// exit ;
44745: GO 45063
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44747: LD_ADDR_VAR 0 6
44751: PUSH
44752: LD_INT 22
44754: PUSH
44755: LD_VAR 0 1
44759: PPUSH
44760: CALL_OW 255
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 2
44771: PUSH
44772: LD_INT 30
44774: PUSH
44775: LD_INT 36
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 34
44784: PUSH
44785: LD_INT 31
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: LIST
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PPUSH
44801: CALL_OW 69
44805: ST_TO_ADDR
// if not tmp then
44806: LD_VAR 0 6
44810: NOT
44811: IFFALSE 44815
// exit ;
44813: GO 45063
// result := [ ] ;
44815: LD_ADDR_VAR 0 2
44819: PUSH
44820: EMPTY
44821: ST_TO_ADDR
// for i in tmp do
44822: LD_ADDR_VAR 0 3
44826: PUSH
44827: LD_VAR 0 6
44831: PUSH
44832: FOR_IN
44833: IFFALSE 44904
// begin t := UnitsInside ( i ) ;
44835: LD_ADDR_VAR 0 4
44839: PUSH
44840: LD_VAR 0 3
44844: PPUSH
44845: CALL_OW 313
44849: ST_TO_ADDR
// if t then
44850: LD_VAR 0 4
44854: IFFALSE 44902
// for j in t do
44856: LD_ADDR_VAR 0 7
44860: PUSH
44861: LD_VAR 0 4
44865: PUSH
44866: FOR_IN
44867: IFFALSE 44900
// result := Replace ( result , result + 1 , j ) ;
44869: LD_ADDR_VAR 0 2
44873: PUSH
44874: LD_VAR 0 2
44878: PPUSH
44879: LD_VAR 0 2
44883: PUSH
44884: LD_INT 1
44886: PLUS
44887: PPUSH
44888: LD_VAR 0 7
44892: PPUSH
44893: CALL_OW 1
44897: ST_TO_ADDR
44898: GO 44866
44900: POP
44901: POP
// end ;
44902: GO 44832
44904: POP
44905: POP
// if not result then
44906: LD_VAR 0 2
44910: NOT
44911: IFFALSE 44915
// exit ;
44913: GO 45063
// mech := result [ 1 ] ;
44915: LD_ADDR_VAR 0 5
44919: PUSH
44920: LD_VAR 0 2
44924: PUSH
44925: LD_INT 1
44927: ARRAY
44928: ST_TO_ADDR
// if result > 1 then
44929: LD_VAR 0 2
44933: PUSH
44934: LD_INT 1
44936: GREATER
44937: IFFALSE 45049
// begin for i = 2 to result do
44939: LD_ADDR_VAR 0 3
44943: PUSH
44944: DOUBLE
44945: LD_INT 2
44947: DEC
44948: ST_TO_ADDR
44949: LD_VAR 0 2
44953: PUSH
44954: FOR_TO
44955: IFFALSE 45047
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44957: LD_ADDR_VAR 0 4
44961: PUSH
44962: LD_VAR 0 2
44966: PUSH
44967: LD_VAR 0 3
44971: ARRAY
44972: PPUSH
44973: LD_INT 3
44975: PPUSH
44976: CALL_OW 259
44980: PUSH
44981: LD_VAR 0 2
44985: PUSH
44986: LD_VAR 0 3
44990: ARRAY
44991: PPUSH
44992: CALL_OW 432
44996: MINUS
44997: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44998: LD_VAR 0 4
45002: PUSH
45003: LD_VAR 0 5
45007: PPUSH
45008: LD_INT 3
45010: PPUSH
45011: CALL_OW 259
45015: PUSH
45016: LD_VAR 0 5
45020: PPUSH
45021: CALL_OW 432
45025: MINUS
45026: GREATEREQUAL
45027: IFFALSE 45045
// mech := result [ i ] ;
45029: LD_ADDR_VAR 0 5
45033: PUSH
45034: LD_VAR 0 2
45038: PUSH
45039: LD_VAR 0 3
45043: ARRAY
45044: ST_TO_ADDR
// end ;
45045: GO 44954
45047: POP
45048: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45049: LD_VAR 0 1
45053: PPUSH
45054: LD_VAR 0 5
45058: PPUSH
45059: CALL_OW 135
// end ;
45063: LD_VAR 0 2
45067: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45068: LD_INT 0
45070: PPUSH
45071: PPUSH
45072: PPUSH
45073: PPUSH
45074: PPUSH
45075: PPUSH
45076: PPUSH
45077: PPUSH
45078: PPUSH
45079: PPUSH
45080: PPUSH
45081: PPUSH
45082: PPUSH
// result := [ ] ;
45083: LD_ADDR_VAR 0 7
45087: PUSH
45088: EMPTY
45089: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45090: LD_VAR 0 1
45094: PPUSH
45095: CALL_OW 266
45099: PUSH
45100: LD_INT 0
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: IN
45110: NOT
45111: IFFALSE 45115
// exit ;
45113: GO 46749
// if name then
45115: LD_VAR 0 3
45119: IFFALSE 45135
// SetBName ( base_dep , name ) ;
45121: LD_VAR 0 1
45125: PPUSH
45126: LD_VAR 0 3
45130: PPUSH
45131: CALL_OW 500
// base := GetBase ( base_dep ) ;
45135: LD_ADDR_VAR 0 15
45139: PUSH
45140: LD_VAR 0 1
45144: PPUSH
45145: CALL_OW 274
45149: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45150: LD_ADDR_VAR 0 16
45154: PUSH
45155: LD_VAR 0 1
45159: PPUSH
45160: CALL_OW 255
45164: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45165: LD_ADDR_VAR 0 17
45169: PUSH
45170: LD_VAR 0 1
45174: PPUSH
45175: CALL_OW 248
45179: ST_TO_ADDR
// if sources then
45180: LD_VAR 0 5
45184: IFFALSE 45231
// for i = 1 to 3 do
45186: LD_ADDR_VAR 0 8
45190: PUSH
45191: DOUBLE
45192: LD_INT 1
45194: DEC
45195: ST_TO_ADDR
45196: LD_INT 3
45198: PUSH
45199: FOR_TO
45200: IFFALSE 45229
// AddResourceType ( base , i , sources [ i ] ) ;
45202: LD_VAR 0 15
45206: PPUSH
45207: LD_VAR 0 8
45211: PPUSH
45212: LD_VAR 0 5
45216: PUSH
45217: LD_VAR 0 8
45221: ARRAY
45222: PPUSH
45223: CALL_OW 276
45227: GO 45199
45229: POP
45230: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45231: LD_ADDR_VAR 0 18
45235: PUSH
45236: LD_VAR 0 15
45240: PPUSH
45241: LD_VAR 0 2
45245: PPUSH
45246: LD_INT 1
45248: PPUSH
45249: CALL 44492 0 3
45253: ST_TO_ADDR
// InitHc ;
45254: CALL_OW 19
// InitUc ;
45258: CALL_OW 18
// uc_side := side ;
45262: LD_ADDR_OWVAR 20
45266: PUSH
45267: LD_VAR 0 16
45271: ST_TO_ADDR
// uc_nation := nation ;
45272: LD_ADDR_OWVAR 21
45276: PUSH
45277: LD_VAR 0 17
45281: ST_TO_ADDR
// if buildings then
45282: LD_VAR 0 18
45286: IFFALSE 46608
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45288: LD_ADDR_VAR 0 19
45292: PUSH
45293: LD_VAR 0 18
45297: PPUSH
45298: LD_INT 2
45300: PUSH
45301: LD_INT 30
45303: PUSH
45304: LD_INT 29
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 30
45313: PUSH
45314: LD_INT 30
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: LIST
45325: PPUSH
45326: CALL_OW 72
45330: ST_TO_ADDR
// if tmp then
45331: LD_VAR 0 19
45335: IFFALSE 45383
// for i in tmp do
45337: LD_ADDR_VAR 0 8
45341: PUSH
45342: LD_VAR 0 19
45346: PUSH
45347: FOR_IN
45348: IFFALSE 45381
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45350: LD_VAR 0 8
45354: PPUSH
45355: CALL_OW 250
45359: PPUSH
45360: LD_VAR 0 8
45364: PPUSH
45365: CALL_OW 251
45369: PPUSH
45370: LD_VAR 0 16
45374: PPUSH
45375: CALL_OW 441
45379: GO 45347
45381: POP
45382: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45383: LD_VAR 0 18
45387: PPUSH
45388: LD_INT 2
45390: PUSH
45391: LD_INT 30
45393: PUSH
45394: LD_INT 32
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 30
45403: PUSH
45404: LD_INT 33
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: LIST
45415: PPUSH
45416: CALL_OW 72
45420: IFFALSE 45508
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45422: LD_ADDR_VAR 0 8
45426: PUSH
45427: LD_VAR 0 18
45431: PPUSH
45432: LD_INT 2
45434: PUSH
45435: LD_INT 30
45437: PUSH
45438: LD_INT 32
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 30
45447: PUSH
45448: LD_INT 33
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: LIST
45459: PPUSH
45460: CALL_OW 72
45464: PUSH
45465: FOR_IN
45466: IFFALSE 45506
// begin if not GetBWeapon ( i ) then
45468: LD_VAR 0 8
45472: PPUSH
45473: CALL_OW 269
45477: NOT
45478: IFFALSE 45504
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45480: LD_VAR 0 8
45484: PPUSH
45485: LD_VAR 0 8
45489: PPUSH
45490: LD_VAR 0 2
45494: PPUSH
45495: CALL 46754 0 2
45499: PPUSH
45500: CALL_OW 431
// end ;
45504: GO 45465
45506: POP
45507: POP
// end ; for i = 1 to personel do
45508: LD_ADDR_VAR 0 8
45512: PUSH
45513: DOUBLE
45514: LD_INT 1
45516: DEC
45517: ST_TO_ADDR
45518: LD_VAR 0 6
45522: PUSH
45523: FOR_TO
45524: IFFALSE 46588
// begin if i > 4 then
45526: LD_VAR 0 8
45530: PUSH
45531: LD_INT 4
45533: GREATER
45534: IFFALSE 45538
// break ;
45536: GO 46588
// case i of 1 :
45538: LD_VAR 0 8
45542: PUSH
45543: LD_INT 1
45545: DOUBLE
45546: EQUAL
45547: IFTRUE 45551
45549: GO 45631
45551: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45552: LD_ADDR_VAR 0 12
45556: PUSH
45557: LD_VAR 0 18
45561: PPUSH
45562: LD_INT 22
45564: PUSH
45565: LD_VAR 0 16
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 58
45576: PUSH
45577: EMPTY
45578: LIST
45579: PUSH
45580: LD_INT 2
45582: PUSH
45583: LD_INT 30
45585: PUSH
45586: LD_INT 32
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 30
45595: PUSH
45596: LD_INT 4
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 30
45605: PUSH
45606: LD_INT 5
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: LIST
45623: PPUSH
45624: CALL_OW 72
45628: ST_TO_ADDR
45629: GO 45853
45631: LD_INT 2
45633: DOUBLE
45634: EQUAL
45635: IFTRUE 45639
45637: GO 45701
45639: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45640: LD_ADDR_VAR 0 12
45644: PUSH
45645: LD_VAR 0 18
45649: PPUSH
45650: LD_INT 22
45652: PUSH
45653: LD_VAR 0 16
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 2
45664: PUSH
45665: LD_INT 30
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 30
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: LIST
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PPUSH
45694: CALL_OW 72
45698: ST_TO_ADDR
45699: GO 45853
45701: LD_INT 3
45703: DOUBLE
45704: EQUAL
45705: IFTRUE 45709
45707: GO 45771
45709: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45710: LD_ADDR_VAR 0 12
45714: PUSH
45715: LD_VAR 0 18
45719: PPUSH
45720: LD_INT 22
45722: PUSH
45723: LD_VAR 0 16
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 2
45734: PUSH
45735: LD_INT 30
45737: PUSH
45738: LD_INT 2
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 30
45747: PUSH
45748: LD_INT 3
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: LIST
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PPUSH
45764: CALL_OW 72
45768: ST_TO_ADDR
45769: GO 45853
45771: LD_INT 4
45773: DOUBLE
45774: EQUAL
45775: IFTRUE 45779
45777: GO 45852
45779: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45780: LD_ADDR_VAR 0 12
45784: PUSH
45785: LD_VAR 0 18
45789: PPUSH
45790: LD_INT 22
45792: PUSH
45793: LD_VAR 0 16
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 2
45804: PUSH
45805: LD_INT 30
45807: PUSH
45808: LD_INT 6
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 30
45817: PUSH
45818: LD_INT 7
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 30
45827: PUSH
45828: LD_INT 8
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PPUSH
45845: CALL_OW 72
45849: ST_TO_ADDR
45850: GO 45853
45852: POP
// if i = 1 then
45853: LD_VAR 0 8
45857: PUSH
45858: LD_INT 1
45860: EQUAL
45861: IFFALSE 45972
// begin tmp := [ ] ;
45863: LD_ADDR_VAR 0 19
45867: PUSH
45868: EMPTY
45869: ST_TO_ADDR
// for j in f do
45870: LD_ADDR_VAR 0 9
45874: PUSH
45875: LD_VAR 0 12
45879: PUSH
45880: FOR_IN
45881: IFFALSE 45954
// if GetBType ( j ) = b_bunker then
45883: LD_VAR 0 9
45887: PPUSH
45888: CALL_OW 266
45892: PUSH
45893: LD_INT 32
45895: EQUAL
45896: IFFALSE 45923
// tmp := Insert ( tmp , 1 , j ) else
45898: LD_ADDR_VAR 0 19
45902: PUSH
45903: LD_VAR 0 19
45907: PPUSH
45908: LD_INT 1
45910: PPUSH
45911: LD_VAR 0 9
45915: PPUSH
45916: CALL_OW 2
45920: ST_TO_ADDR
45921: GO 45952
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45923: LD_ADDR_VAR 0 19
45927: PUSH
45928: LD_VAR 0 19
45932: PPUSH
45933: LD_VAR 0 19
45937: PUSH
45938: LD_INT 1
45940: PLUS
45941: PPUSH
45942: LD_VAR 0 9
45946: PPUSH
45947: CALL_OW 2
45951: ST_TO_ADDR
45952: GO 45880
45954: POP
45955: POP
// if tmp then
45956: LD_VAR 0 19
45960: IFFALSE 45972
// f := tmp ;
45962: LD_ADDR_VAR 0 12
45966: PUSH
45967: LD_VAR 0 19
45971: ST_TO_ADDR
// end ; x := personel [ i ] ;
45972: LD_ADDR_VAR 0 13
45976: PUSH
45977: LD_VAR 0 6
45981: PUSH
45982: LD_VAR 0 8
45986: ARRAY
45987: ST_TO_ADDR
// if x = - 1 then
45988: LD_VAR 0 13
45992: PUSH
45993: LD_INT 1
45995: NEG
45996: EQUAL
45997: IFFALSE 46206
// begin for j in f do
45999: LD_ADDR_VAR 0 9
46003: PUSH
46004: LD_VAR 0 12
46008: PUSH
46009: FOR_IN
46010: IFFALSE 46202
// repeat InitHc ;
46012: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46016: LD_VAR 0 9
46020: PPUSH
46021: CALL_OW 266
46025: PUSH
46026: LD_INT 5
46028: EQUAL
46029: IFFALSE 46099
// begin if UnitsInside ( j ) < 3 then
46031: LD_VAR 0 9
46035: PPUSH
46036: CALL_OW 313
46040: PUSH
46041: LD_INT 3
46043: LESS
46044: IFFALSE 46080
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46046: LD_INT 0
46048: PPUSH
46049: LD_INT 5
46051: PUSH
46052: LD_INT 8
46054: PUSH
46055: LD_INT 9
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: LIST
46062: PUSH
46063: LD_VAR 0 17
46067: ARRAY
46068: PPUSH
46069: LD_VAR 0 4
46073: PPUSH
46074: CALL_OW 380
46078: GO 46097
// PrepareHuman ( false , i , skill ) ;
46080: LD_INT 0
46082: PPUSH
46083: LD_VAR 0 8
46087: PPUSH
46088: LD_VAR 0 4
46092: PPUSH
46093: CALL_OW 380
// end else
46097: GO 46116
// PrepareHuman ( false , i , skill ) ;
46099: LD_INT 0
46101: PPUSH
46102: LD_VAR 0 8
46106: PPUSH
46107: LD_VAR 0 4
46111: PPUSH
46112: CALL_OW 380
// un := CreateHuman ;
46116: LD_ADDR_VAR 0 14
46120: PUSH
46121: CALL_OW 44
46125: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46126: LD_ADDR_VAR 0 7
46130: PUSH
46131: LD_VAR 0 7
46135: PPUSH
46136: LD_INT 1
46138: PPUSH
46139: LD_VAR 0 14
46143: PPUSH
46144: CALL_OW 2
46148: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46149: LD_VAR 0 14
46153: PPUSH
46154: LD_VAR 0 9
46158: PPUSH
46159: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46163: LD_VAR 0 9
46167: PPUSH
46168: CALL_OW 313
46172: PUSH
46173: LD_INT 6
46175: EQUAL
46176: PUSH
46177: LD_VAR 0 9
46181: PPUSH
46182: CALL_OW 266
46186: PUSH
46187: LD_INT 32
46189: PUSH
46190: LD_INT 31
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: IN
46197: OR
46198: IFFALSE 46012
46200: GO 46009
46202: POP
46203: POP
// end else
46204: GO 46586
// for j = 1 to x do
46206: LD_ADDR_VAR 0 9
46210: PUSH
46211: DOUBLE
46212: LD_INT 1
46214: DEC
46215: ST_TO_ADDR
46216: LD_VAR 0 13
46220: PUSH
46221: FOR_TO
46222: IFFALSE 46584
// begin InitHc ;
46224: CALL_OW 19
// if not f then
46228: LD_VAR 0 12
46232: NOT
46233: IFFALSE 46322
// begin PrepareHuman ( false , i , skill ) ;
46235: LD_INT 0
46237: PPUSH
46238: LD_VAR 0 8
46242: PPUSH
46243: LD_VAR 0 4
46247: PPUSH
46248: CALL_OW 380
// un := CreateHuman ;
46252: LD_ADDR_VAR 0 14
46256: PUSH
46257: CALL_OW 44
46261: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46262: LD_ADDR_VAR 0 7
46266: PUSH
46267: LD_VAR 0 7
46271: PPUSH
46272: LD_INT 1
46274: PPUSH
46275: LD_VAR 0 14
46279: PPUSH
46280: CALL_OW 2
46284: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46285: LD_VAR 0 14
46289: PPUSH
46290: LD_VAR 0 1
46294: PPUSH
46295: CALL_OW 250
46299: PPUSH
46300: LD_VAR 0 1
46304: PPUSH
46305: CALL_OW 251
46309: PPUSH
46310: LD_INT 10
46312: PPUSH
46313: LD_INT 0
46315: PPUSH
46316: CALL_OW 50
// continue ;
46320: GO 46221
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46322: LD_VAR 0 12
46326: PUSH
46327: LD_INT 1
46329: ARRAY
46330: PPUSH
46331: CALL_OW 313
46335: PUSH
46336: LD_VAR 0 12
46340: PUSH
46341: LD_INT 1
46343: ARRAY
46344: PPUSH
46345: CALL_OW 266
46349: PUSH
46350: LD_INT 32
46352: PUSH
46353: LD_INT 31
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: IN
46360: AND
46361: PUSH
46362: LD_VAR 0 12
46366: PUSH
46367: LD_INT 1
46369: ARRAY
46370: PPUSH
46371: CALL_OW 313
46375: PUSH
46376: LD_INT 6
46378: EQUAL
46379: OR
46380: IFFALSE 46400
// f := Delete ( f , 1 ) ;
46382: LD_ADDR_VAR 0 12
46386: PUSH
46387: LD_VAR 0 12
46391: PPUSH
46392: LD_INT 1
46394: PPUSH
46395: CALL_OW 3
46399: ST_TO_ADDR
// if not f then
46400: LD_VAR 0 12
46404: NOT
46405: IFFALSE 46423
// begin x := x + 2 ;
46407: LD_ADDR_VAR 0 13
46411: PUSH
46412: LD_VAR 0 13
46416: PUSH
46417: LD_INT 2
46419: PLUS
46420: ST_TO_ADDR
// continue ;
46421: GO 46221
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46423: LD_VAR 0 12
46427: PUSH
46428: LD_INT 1
46430: ARRAY
46431: PPUSH
46432: CALL_OW 266
46436: PUSH
46437: LD_INT 5
46439: EQUAL
46440: IFFALSE 46514
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46442: LD_VAR 0 12
46446: PUSH
46447: LD_INT 1
46449: ARRAY
46450: PPUSH
46451: CALL_OW 313
46455: PUSH
46456: LD_INT 3
46458: LESS
46459: IFFALSE 46495
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46461: LD_INT 0
46463: PPUSH
46464: LD_INT 5
46466: PUSH
46467: LD_INT 8
46469: PUSH
46470: LD_INT 9
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: LIST
46477: PUSH
46478: LD_VAR 0 17
46482: ARRAY
46483: PPUSH
46484: LD_VAR 0 4
46488: PPUSH
46489: CALL_OW 380
46493: GO 46512
// PrepareHuman ( false , i , skill ) ;
46495: LD_INT 0
46497: PPUSH
46498: LD_VAR 0 8
46502: PPUSH
46503: LD_VAR 0 4
46507: PPUSH
46508: CALL_OW 380
// end else
46512: GO 46531
// PrepareHuman ( false , i , skill ) ;
46514: LD_INT 0
46516: PPUSH
46517: LD_VAR 0 8
46521: PPUSH
46522: LD_VAR 0 4
46526: PPUSH
46527: CALL_OW 380
// un := CreateHuman ;
46531: LD_ADDR_VAR 0 14
46535: PUSH
46536: CALL_OW 44
46540: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46541: LD_ADDR_VAR 0 7
46545: PUSH
46546: LD_VAR 0 7
46550: PPUSH
46551: LD_INT 1
46553: PPUSH
46554: LD_VAR 0 14
46558: PPUSH
46559: CALL_OW 2
46563: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46564: LD_VAR 0 14
46568: PPUSH
46569: LD_VAR 0 12
46573: PUSH
46574: LD_INT 1
46576: ARRAY
46577: PPUSH
46578: CALL_OW 52
// end ;
46582: GO 46221
46584: POP
46585: POP
// end ;
46586: GO 45523
46588: POP
46589: POP
// result := result ^ buildings ;
46590: LD_ADDR_VAR 0 7
46594: PUSH
46595: LD_VAR 0 7
46599: PUSH
46600: LD_VAR 0 18
46604: ADD
46605: ST_TO_ADDR
// end else
46606: GO 46749
// begin for i = 1 to personel do
46608: LD_ADDR_VAR 0 8
46612: PUSH
46613: DOUBLE
46614: LD_INT 1
46616: DEC
46617: ST_TO_ADDR
46618: LD_VAR 0 6
46622: PUSH
46623: FOR_TO
46624: IFFALSE 46747
// begin if i > 4 then
46626: LD_VAR 0 8
46630: PUSH
46631: LD_INT 4
46633: GREATER
46634: IFFALSE 46638
// break ;
46636: GO 46747
// x := personel [ i ] ;
46638: LD_ADDR_VAR 0 13
46642: PUSH
46643: LD_VAR 0 6
46647: PUSH
46648: LD_VAR 0 8
46652: ARRAY
46653: ST_TO_ADDR
// if x = - 1 then
46654: LD_VAR 0 13
46658: PUSH
46659: LD_INT 1
46661: NEG
46662: EQUAL
46663: IFFALSE 46667
// continue ;
46665: GO 46623
// PrepareHuman ( false , i , skill ) ;
46667: LD_INT 0
46669: PPUSH
46670: LD_VAR 0 8
46674: PPUSH
46675: LD_VAR 0 4
46679: PPUSH
46680: CALL_OW 380
// un := CreateHuman ;
46684: LD_ADDR_VAR 0 14
46688: PUSH
46689: CALL_OW 44
46693: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46694: LD_VAR 0 14
46698: PPUSH
46699: LD_VAR 0 1
46703: PPUSH
46704: CALL_OW 250
46708: PPUSH
46709: LD_VAR 0 1
46713: PPUSH
46714: CALL_OW 251
46718: PPUSH
46719: LD_INT 10
46721: PPUSH
46722: LD_INT 0
46724: PPUSH
46725: CALL_OW 50
// result := result ^ un ;
46729: LD_ADDR_VAR 0 7
46733: PUSH
46734: LD_VAR 0 7
46738: PUSH
46739: LD_VAR 0 14
46743: ADD
46744: ST_TO_ADDR
// end ;
46745: GO 46623
46747: POP
46748: POP
// end ; end ;
46749: LD_VAR 0 7
46753: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46754: LD_INT 0
46756: PPUSH
46757: PPUSH
46758: PPUSH
46759: PPUSH
46760: PPUSH
46761: PPUSH
46762: PPUSH
46763: PPUSH
46764: PPUSH
46765: PPUSH
46766: PPUSH
46767: PPUSH
46768: PPUSH
46769: PPUSH
46770: PPUSH
46771: PPUSH
// result := false ;
46772: LD_ADDR_VAR 0 3
46776: PUSH
46777: LD_INT 0
46779: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46780: LD_VAR 0 1
46784: NOT
46785: PUSH
46786: LD_VAR 0 1
46790: PPUSH
46791: CALL_OW 266
46795: PUSH
46796: LD_INT 32
46798: PUSH
46799: LD_INT 33
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: IN
46806: NOT
46807: OR
46808: IFFALSE 46812
// exit ;
46810: GO 47921
// nat := GetNation ( tower ) ;
46812: LD_ADDR_VAR 0 12
46816: PUSH
46817: LD_VAR 0 1
46821: PPUSH
46822: CALL_OW 248
46826: ST_TO_ADDR
// side := GetSide ( tower ) ;
46827: LD_ADDR_VAR 0 16
46831: PUSH
46832: LD_VAR 0 1
46836: PPUSH
46837: CALL_OW 255
46841: ST_TO_ADDR
// x := GetX ( tower ) ;
46842: LD_ADDR_VAR 0 10
46846: PUSH
46847: LD_VAR 0 1
46851: PPUSH
46852: CALL_OW 250
46856: ST_TO_ADDR
// y := GetY ( tower ) ;
46857: LD_ADDR_VAR 0 11
46861: PUSH
46862: LD_VAR 0 1
46866: PPUSH
46867: CALL_OW 251
46871: ST_TO_ADDR
// if not x or not y then
46872: LD_VAR 0 10
46876: NOT
46877: PUSH
46878: LD_VAR 0 11
46882: NOT
46883: OR
46884: IFFALSE 46888
// exit ;
46886: GO 47921
// weapon := 0 ;
46888: LD_ADDR_VAR 0 18
46892: PUSH
46893: LD_INT 0
46895: ST_TO_ADDR
// fac_list := [ ] ;
46896: LD_ADDR_VAR 0 17
46900: PUSH
46901: EMPTY
46902: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46903: LD_ADDR_VAR 0 6
46907: PUSH
46908: LD_VAR 0 1
46912: PPUSH
46913: CALL_OW 274
46917: PPUSH
46918: LD_VAR 0 2
46922: PPUSH
46923: LD_INT 0
46925: PPUSH
46926: CALL 44492 0 3
46930: PPUSH
46931: LD_INT 30
46933: PUSH
46934: LD_INT 3
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PPUSH
46941: CALL_OW 72
46945: ST_TO_ADDR
// if not factories then
46946: LD_VAR 0 6
46950: NOT
46951: IFFALSE 46955
// exit ;
46953: GO 47921
// for i in factories do
46955: LD_ADDR_VAR 0 8
46959: PUSH
46960: LD_VAR 0 6
46964: PUSH
46965: FOR_IN
46966: IFFALSE 46991
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46968: LD_ADDR_VAR 0 17
46972: PUSH
46973: LD_VAR 0 17
46977: PUSH
46978: LD_VAR 0 8
46982: PPUSH
46983: CALL_OW 478
46987: UNION
46988: ST_TO_ADDR
46989: GO 46965
46991: POP
46992: POP
// if not fac_list then
46993: LD_VAR 0 17
46997: NOT
46998: IFFALSE 47002
// exit ;
47000: GO 47921
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47002: LD_ADDR_VAR 0 5
47006: PUSH
47007: LD_INT 4
47009: PUSH
47010: LD_INT 5
47012: PUSH
47013: LD_INT 9
47015: PUSH
47016: LD_INT 10
47018: PUSH
47019: LD_INT 6
47021: PUSH
47022: LD_INT 7
47024: PUSH
47025: LD_INT 11
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 27
47039: PUSH
47040: LD_INT 28
47042: PUSH
47043: LD_INT 26
47045: PUSH
47046: LD_INT 30
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 43
47057: PUSH
47058: LD_INT 44
47060: PUSH
47061: LD_INT 46
47063: PUSH
47064: LD_INT 45
47066: PUSH
47067: LD_INT 47
47069: PUSH
47070: LD_INT 49
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: LIST
47085: PUSH
47086: LD_VAR 0 12
47090: ARRAY
47091: ST_TO_ADDR
// list := list isect fac_list ;
47092: LD_ADDR_VAR 0 5
47096: PUSH
47097: LD_VAR 0 5
47101: PUSH
47102: LD_VAR 0 17
47106: ISECT
47107: ST_TO_ADDR
// if not list then
47108: LD_VAR 0 5
47112: NOT
47113: IFFALSE 47117
// exit ;
47115: GO 47921
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47117: LD_VAR 0 12
47121: PUSH
47122: LD_INT 3
47124: EQUAL
47125: PUSH
47126: LD_INT 49
47128: PUSH
47129: LD_VAR 0 5
47133: IN
47134: AND
47135: PUSH
47136: LD_INT 31
47138: PPUSH
47139: LD_VAR 0 16
47143: PPUSH
47144: CALL_OW 321
47148: PUSH
47149: LD_INT 2
47151: EQUAL
47152: AND
47153: IFFALSE 47213
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47155: LD_INT 22
47157: PUSH
47158: LD_VAR 0 16
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 35
47169: PUSH
47170: LD_INT 49
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 91
47179: PUSH
47180: LD_VAR 0 1
47184: PUSH
47185: LD_INT 10
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: LIST
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: LIST
47197: PPUSH
47198: CALL_OW 69
47202: NOT
47203: IFFALSE 47213
// weapon := ru_time_lapser ;
47205: LD_ADDR_VAR 0 18
47209: PUSH
47210: LD_INT 49
47212: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47213: LD_VAR 0 12
47217: PUSH
47218: LD_INT 1
47220: PUSH
47221: LD_INT 2
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: IN
47228: PUSH
47229: LD_INT 11
47231: PUSH
47232: LD_VAR 0 5
47236: IN
47237: PUSH
47238: LD_INT 30
47240: PUSH
47241: LD_VAR 0 5
47245: IN
47246: OR
47247: AND
47248: PUSH
47249: LD_INT 6
47251: PPUSH
47252: LD_VAR 0 16
47256: PPUSH
47257: CALL_OW 321
47261: PUSH
47262: LD_INT 2
47264: EQUAL
47265: AND
47266: IFFALSE 47431
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47268: LD_INT 22
47270: PUSH
47271: LD_VAR 0 16
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 2
47282: PUSH
47283: LD_INT 35
47285: PUSH
47286: LD_INT 11
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 35
47295: PUSH
47296: LD_INT 30
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 91
47310: PUSH
47311: LD_VAR 0 1
47315: PUSH
47316: LD_INT 18
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: LIST
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: LIST
47328: PPUSH
47329: CALL_OW 69
47333: NOT
47334: PUSH
47335: LD_INT 22
47337: PUSH
47338: LD_VAR 0 16
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 2
47349: PUSH
47350: LD_INT 30
47352: PUSH
47353: LD_INT 32
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 30
47362: PUSH
47363: LD_INT 33
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 91
47377: PUSH
47378: LD_VAR 0 1
47382: PUSH
47383: LD_INT 12
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: LIST
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: LIST
47395: PUSH
47396: EMPTY
47397: LIST
47398: PPUSH
47399: CALL_OW 69
47403: PUSH
47404: LD_INT 2
47406: GREATER
47407: AND
47408: IFFALSE 47431
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47410: LD_ADDR_VAR 0 18
47414: PUSH
47415: LD_INT 11
47417: PUSH
47418: LD_INT 30
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_VAR 0 12
47429: ARRAY
47430: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47431: LD_VAR 0 18
47435: NOT
47436: PUSH
47437: LD_INT 40
47439: PPUSH
47440: LD_VAR 0 16
47444: PPUSH
47445: CALL_OW 321
47449: PUSH
47450: LD_INT 2
47452: EQUAL
47453: AND
47454: PUSH
47455: LD_INT 7
47457: PUSH
47458: LD_VAR 0 5
47462: IN
47463: PUSH
47464: LD_INT 28
47466: PUSH
47467: LD_VAR 0 5
47471: IN
47472: OR
47473: PUSH
47474: LD_INT 45
47476: PUSH
47477: LD_VAR 0 5
47481: IN
47482: OR
47483: AND
47484: IFFALSE 47738
// begin hex := GetHexInfo ( x , y ) ;
47486: LD_ADDR_VAR 0 4
47490: PUSH
47491: LD_VAR 0 10
47495: PPUSH
47496: LD_VAR 0 11
47500: PPUSH
47501: CALL_OW 546
47505: ST_TO_ADDR
// if hex [ 1 ] then
47506: LD_VAR 0 4
47510: PUSH
47511: LD_INT 1
47513: ARRAY
47514: IFFALSE 47518
// exit ;
47516: GO 47921
// height := hex [ 2 ] ;
47518: LD_ADDR_VAR 0 15
47522: PUSH
47523: LD_VAR 0 4
47527: PUSH
47528: LD_INT 2
47530: ARRAY
47531: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47532: LD_ADDR_VAR 0 14
47536: PUSH
47537: LD_INT 0
47539: PUSH
47540: LD_INT 2
47542: PUSH
47543: LD_INT 3
47545: PUSH
47546: LD_INT 5
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: ST_TO_ADDR
// for i in tmp do
47555: LD_ADDR_VAR 0 8
47559: PUSH
47560: LD_VAR 0 14
47564: PUSH
47565: FOR_IN
47566: IFFALSE 47736
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47568: LD_ADDR_VAR 0 9
47572: PUSH
47573: LD_VAR 0 10
47577: PPUSH
47578: LD_VAR 0 8
47582: PPUSH
47583: LD_INT 5
47585: PPUSH
47586: CALL_OW 272
47590: PUSH
47591: LD_VAR 0 11
47595: PPUSH
47596: LD_VAR 0 8
47600: PPUSH
47601: LD_INT 5
47603: PPUSH
47604: CALL_OW 273
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47613: LD_VAR 0 9
47617: PUSH
47618: LD_INT 1
47620: ARRAY
47621: PPUSH
47622: LD_VAR 0 9
47626: PUSH
47627: LD_INT 2
47629: ARRAY
47630: PPUSH
47631: CALL_OW 488
47635: IFFALSE 47734
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47637: LD_ADDR_VAR 0 4
47641: PUSH
47642: LD_VAR 0 9
47646: PUSH
47647: LD_INT 1
47649: ARRAY
47650: PPUSH
47651: LD_VAR 0 9
47655: PUSH
47656: LD_INT 2
47658: ARRAY
47659: PPUSH
47660: CALL_OW 546
47664: ST_TO_ADDR
// if hex [ 1 ] then
47665: LD_VAR 0 4
47669: PUSH
47670: LD_INT 1
47672: ARRAY
47673: IFFALSE 47677
// continue ;
47675: GO 47565
// h := hex [ 2 ] ;
47677: LD_ADDR_VAR 0 13
47681: PUSH
47682: LD_VAR 0 4
47686: PUSH
47687: LD_INT 2
47689: ARRAY
47690: ST_TO_ADDR
// if h + 7 < height then
47691: LD_VAR 0 13
47695: PUSH
47696: LD_INT 7
47698: PLUS
47699: PUSH
47700: LD_VAR 0 15
47704: LESS
47705: IFFALSE 47734
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47707: LD_ADDR_VAR 0 18
47711: PUSH
47712: LD_INT 7
47714: PUSH
47715: LD_INT 28
47717: PUSH
47718: LD_INT 45
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: LIST
47725: PUSH
47726: LD_VAR 0 12
47730: ARRAY
47731: ST_TO_ADDR
// break ;
47732: GO 47736
// end ; end ; end ;
47734: GO 47565
47736: POP
47737: POP
// end ; if not weapon then
47738: LD_VAR 0 18
47742: NOT
47743: IFFALSE 47803
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47745: LD_ADDR_VAR 0 5
47749: PUSH
47750: LD_VAR 0 5
47754: PUSH
47755: LD_INT 11
47757: PUSH
47758: LD_INT 30
47760: PUSH
47761: LD_INT 49
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: LIST
47768: DIFF
47769: ST_TO_ADDR
// if not list then
47770: LD_VAR 0 5
47774: NOT
47775: IFFALSE 47779
// exit ;
47777: GO 47921
// weapon := list [ rand ( 1 , list ) ] ;
47779: LD_ADDR_VAR 0 18
47783: PUSH
47784: LD_VAR 0 5
47788: PUSH
47789: LD_INT 1
47791: PPUSH
47792: LD_VAR 0 5
47796: PPUSH
47797: CALL_OW 12
47801: ARRAY
47802: ST_TO_ADDR
// end ; if weapon then
47803: LD_VAR 0 18
47807: IFFALSE 47921
// begin tmp := CostOfWeapon ( weapon ) ;
47809: LD_ADDR_VAR 0 14
47813: PUSH
47814: LD_VAR 0 18
47818: PPUSH
47819: CALL_OW 451
47823: ST_TO_ADDR
// j := GetBase ( tower ) ;
47824: LD_ADDR_VAR 0 9
47828: PUSH
47829: LD_VAR 0 1
47833: PPUSH
47834: CALL_OW 274
47838: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47839: LD_VAR 0 9
47843: PPUSH
47844: LD_INT 1
47846: PPUSH
47847: CALL_OW 275
47851: PUSH
47852: LD_VAR 0 14
47856: PUSH
47857: LD_INT 1
47859: ARRAY
47860: GREATEREQUAL
47861: PUSH
47862: LD_VAR 0 9
47866: PPUSH
47867: LD_INT 2
47869: PPUSH
47870: CALL_OW 275
47874: PUSH
47875: LD_VAR 0 14
47879: PUSH
47880: LD_INT 2
47882: ARRAY
47883: GREATEREQUAL
47884: AND
47885: PUSH
47886: LD_VAR 0 9
47890: PPUSH
47891: LD_INT 3
47893: PPUSH
47894: CALL_OW 275
47898: PUSH
47899: LD_VAR 0 14
47903: PUSH
47904: LD_INT 3
47906: ARRAY
47907: GREATEREQUAL
47908: AND
47909: IFFALSE 47921
// result := weapon ;
47911: LD_ADDR_VAR 0 3
47915: PUSH
47916: LD_VAR 0 18
47920: ST_TO_ADDR
// end ; end ;
47921: LD_VAR 0 3
47925: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47926: LD_INT 0
47928: PPUSH
47929: PPUSH
// result := true ;
47930: LD_ADDR_VAR 0 3
47934: PUSH
47935: LD_INT 1
47937: ST_TO_ADDR
// if array1 = array2 then
47938: LD_VAR 0 1
47942: PUSH
47943: LD_VAR 0 2
47947: EQUAL
47948: IFFALSE 48008
// begin for i = 1 to array1 do
47950: LD_ADDR_VAR 0 4
47954: PUSH
47955: DOUBLE
47956: LD_INT 1
47958: DEC
47959: ST_TO_ADDR
47960: LD_VAR 0 1
47964: PUSH
47965: FOR_TO
47966: IFFALSE 48004
// if array1 [ i ] <> array2 [ i ] then
47968: LD_VAR 0 1
47972: PUSH
47973: LD_VAR 0 4
47977: ARRAY
47978: PUSH
47979: LD_VAR 0 2
47983: PUSH
47984: LD_VAR 0 4
47988: ARRAY
47989: NONEQUAL
47990: IFFALSE 48002
// begin result := false ;
47992: LD_ADDR_VAR 0 3
47996: PUSH
47997: LD_INT 0
47999: ST_TO_ADDR
// break ;
48000: GO 48004
// end ;
48002: GO 47965
48004: POP
48005: POP
// end else
48006: GO 48016
// result := false ;
48008: LD_ADDR_VAR 0 3
48012: PUSH
48013: LD_INT 0
48015: ST_TO_ADDR
// end ;
48016: LD_VAR 0 3
48020: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48021: LD_INT 0
48023: PPUSH
48024: PPUSH
// if not array1 or not array2 then
48025: LD_VAR 0 1
48029: NOT
48030: PUSH
48031: LD_VAR 0 2
48035: NOT
48036: OR
48037: IFFALSE 48041
// exit ;
48039: GO 48105
// result := true ;
48041: LD_ADDR_VAR 0 3
48045: PUSH
48046: LD_INT 1
48048: ST_TO_ADDR
// for i = 1 to array1 do
48049: LD_ADDR_VAR 0 4
48053: PUSH
48054: DOUBLE
48055: LD_INT 1
48057: DEC
48058: ST_TO_ADDR
48059: LD_VAR 0 1
48063: PUSH
48064: FOR_TO
48065: IFFALSE 48103
// if array1 [ i ] <> array2 [ i ] then
48067: LD_VAR 0 1
48071: PUSH
48072: LD_VAR 0 4
48076: ARRAY
48077: PUSH
48078: LD_VAR 0 2
48082: PUSH
48083: LD_VAR 0 4
48087: ARRAY
48088: NONEQUAL
48089: IFFALSE 48101
// begin result := false ;
48091: LD_ADDR_VAR 0 3
48095: PUSH
48096: LD_INT 0
48098: ST_TO_ADDR
// break ;
48099: GO 48103
// end ;
48101: GO 48064
48103: POP
48104: POP
// end ;
48105: LD_VAR 0 3
48109: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48110: LD_INT 0
48112: PPUSH
48113: PPUSH
48114: PPUSH
// pom := GetBase ( fac ) ;
48115: LD_ADDR_VAR 0 5
48119: PUSH
48120: LD_VAR 0 1
48124: PPUSH
48125: CALL_OW 274
48129: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48130: LD_ADDR_VAR 0 4
48134: PUSH
48135: LD_VAR 0 2
48139: PUSH
48140: LD_INT 1
48142: ARRAY
48143: PPUSH
48144: LD_VAR 0 2
48148: PUSH
48149: LD_INT 2
48151: ARRAY
48152: PPUSH
48153: LD_VAR 0 2
48157: PUSH
48158: LD_INT 3
48160: ARRAY
48161: PPUSH
48162: LD_VAR 0 2
48166: PUSH
48167: LD_INT 4
48169: ARRAY
48170: PPUSH
48171: CALL_OW 449
48175: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48176: LD_ADDR_VAR 0 3
48180: PUSH
48181: LD_VAR 0 5
48185: PPUSH
48186: LD_INT 1
48188: PPUSH
48189: CALL_OW 275
48193: PUSH
48194: LD_VAR 0 4
48198: PUSH
48199: LD_INT 1
48201: ARRAY
48202: GREATEREQUAL
48203: PUSH
48204: LD_VAR 0 5
48208: PPUSH
48209: LD_INT 2
48211: PPUSH
48212: CALL_OW 275
48216: PUSH
48217: LD_VAR 0 4
48221: PUSH
48222: LD_INT 2
48224: ARRAY
48225: GREATEREQUAL
48226: AND
48227: PUSH
48228: LD_VAR 0 5
48232: PPUSH
48233: LD_INT 3
48235: PPUSH
48236: CALL_OW 275
48240: PUSH
48241: LD_VAR 0 4
48245: PUSH
48246: LD_INT 3
48248: ARRAY
48249: GREATEREQUAL
48250: AND
48251: ST_TO_ADDR
// end ;
48252: LD_VAR 0 3
48256: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48257: LD_INT 0
48259: PPUSH
48260: PPUSH
48261: PPUSH
48262: PPUSH
// pom := GetBase ( building ) ;
48263: LD_ADDR_VAR 0 3
48267: PUSH
48268: LD_VAR 0 1
48272: PPUSH
48273: CALL_OW 274
48277: ST_TO_ADDR
// if not pom then
48278: LD_VAR 0 3
48282: NOT
48283: IFFALSE 48287
// exit ;
48285: GO 48457
// btype := GetBType ( building ) ;
48287: LD_ADDR_VAR 0 5
48291: PUSH
48292: LD_VAR 0 1
48296: PPUSH
48297: CALL_OW 266
48301: ST_TO_ADDR
// if btype = b_armoury then
48302: LD_VAR 0 5
48306: PUSH
48307: LD_INT 4
48309: EQUAL
48310: IFFALSE 48320
// btype := b_barracks ;
48312: LD_ADDR_VAR 0 5
48316: PUSH
48317: LD_INT 5
48319: ST_TO_ADDR
// if btype = b_depot then
48320: LD_VAR 0 5
48324: PUSH
48325: LD_INT 0
48327: EQUAL
48328: IFFALSE 48338
// btype := b_warehouse ;
48330: LD_ADDR_VAR 0 5
48334: PUSH
48335: LD_INT 1
48337: ST_TO_ADDR
// if btype = b_workshop then
48338: LD_VAR 0 5
48342: PUSH
48343: LD_INT 2
48345: EQUAL
48346: IFFALSE 48356
// btype := b_factory ;
48348: LD_ADDR_VAR 0 5
48352: PUSH
48353: LD_INT 3
48355: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48356: LD_ADDR_VAR 0 4
48360: PUSH
48361: LD_VAR 0 5
48365: PPUSH
48366: LD_VAR 0 1
48370: PPUSH
48371: CALL_OW 248
48375: PPUSH
48376: CALL_OW 450
48380: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48381: LD_ADDR_VAR 0 2
48385: PUSH
48386: LD_VAR 0 3
48390: PPUSH
48391: LD_INT 1
48393: PPUSH
48394: CALL_OW 275
48398: PUSH
48399: LD_VAR 0 4
48403: PUSH
48404: LD_INT 1
48406: ARRAY
48407: GREATEREQUAL
48408: PUSH
48409: LD_VAR 0 3
48413: PPUSH
48414: LD_INT 2
48416: PPUSH
48417: CALL_OW 275
48421: PUSH
48422: LD_VAR 0 4
48426: PUSH
48427: LD_INT 2
48429: ARRAY
48430: GREATEREQUAL
48431: AND
48432: PUSH
48433: LD_VAR 0 3
48437: PPUSH
48438: LD_INT 3
48440: PPUSH
48441: CALL_OW 275
48445: PUSH
48446: LD_VAR 0 4
48450: PUSH
48451: LD_INT 3
48453: ARRAY
48454: GREATEREQUAL
48455: AND
48456: ST_TO_ADDR
// end ;
48457: LD_VAR 0 2
48461: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48462: LD_INT 0
48464: PPUSH
48465: PPUSH
48466: PPUSH
// pom := GetBase ( building ) ;
48467: LD_ADDR_VAR 0 4
48471: PUSH
48472: LD_VAR 0 1
48476: PPUSH
48477: CALL_OW 274
48481: ST_TO_ADDR
// if not pom then
48482: LD_VAR 0 4
48486: NOT
48487: IFFALSE 48491
// exit ;
48489: GO 48592
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48491: LD_ADDR_VAR 0 5
48495: PUSH
48496: LD_VAR 0 2
48500: PPUSH
48501: LD_VAR 0 1
48505: PPUSH
48506: CALL_OW 248
48510: PPUSH
48511: CALL_OW 450
48515: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48516: LD_ADDR_VAR 0 3
48520: PUSH
48521: LD_VAR 0 4
48525: PPUSH
48526: LD_INT 1
48528: PPUSH
48529: CALL_OW 275
48533: PUSH
48534: LD_VAR 0 5
48538: PUSH
48539: LD_INT 1
48541: ARRAY
48542: GREATEREQUAL
48543: PUSH
48544: LD_VAR 0 4
48548: PPUSH
48549: LD_INT 2
48551: PPUSH
48552: CALL_OW 275
48556: PUSH
48557: LD_VAR 0 5
48561: PUSH
48562: LD_INT 2
48564: ARRAY
48565: GREATEREQUAL
48566: AND
48567: PUSH
48568: LD_VAR 0 4
48572: PPUSH
48573: LD_INT 3
48575: PPUSH
48576: CALL_OW 275
48580: PUSH
48581: LD_VAR 0 5
48585: PUSH
48586: LD_INT 3
48588: ARRAY
48589: GREATEREQUAL
48590: AND
48591: ST_TO_ADDR
// end ;
48592: LD_VAR 0 3
48596: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48597: LD_INT 0
48599: PPUSH
48600: PPUSH
48601: PPUSH
48602: PPUSH
48603: PPUSH
48604: PPUSH
48605: PPUSH
48606: PPUSH
48607: PPUSH
48608: PPUSH
48609: PPUSH
// result := false ;
48610: LD_ADDR_VAR 0 8
48614: PUSH
48615: LD_INT 0
48617: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48618: LD_VAR 0 5
48622: NOT
48623: PUSH
48624: LD_VAR 0 1
48628: NOT
48629: OR
48630: PUSH
48631: LD_VAR 0 2
48635: NOT
48636: OR
48637: PUSH
48638: LD_VAR 0 3
48642: NOT
48643: OR
48644: IFFALSE 48648
// exit ;
48646: GO 49462
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48648: LD_ADDR_VAR 0 14
48652: PUSH
48653: LD_VAR 0 1
48657: PPUSH
48658: LD_VAR 0 2
48662: PPUSH
48663: LD_VAR 0 3
48667: PPUSH
48668: LD_VAR 0 4
48672: PPUSH
48673: LD_VAR 0 5
48677: PUSH
48678: LD_INT 1
48680: ARRAY
48681: PPUSH
48682: CALL_OW 248
48686: PPUSH
48687: LD_INT 0
48689: PPUSH
48690: CALL 50715 0 6
48694: ST_TO_ADDR
// if not hexes then
48695: LD_VAR 0 14
48699: NOT
48700: IFFALSE 48704
// exit ;
48702: GO 49462
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48704: LD_ADDR_VAR 0 17
48708: PUSH
48709: LD_VAR 0 5
48713: PPUSH
48714: LD_INT 22
48716: PUSH
48717: LD_VAR 0 13
48721: PPUSH
48722: CALL_OW 255
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 2
48733: PUSH
48734: LD_INT 30
48736: PUSH
48737: LD_INT 0
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 30
48746: PUSH
48747: LD_INT 1
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: LIST
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PPUSH
48763: CALL_OW 72
48767: ST_TO_ADDR
// for i = 1 to hexes do
48768: LD_ADDR_VAR 0 9
48772: PUSH
48773: DOUBLE
48774: LD_INT 1
48776: DEC
48777: ST_TO_ADDR
48778: LD_VAR 0 14
48782: PUSH
48783: FOR_TO
48784: IFFALSE 49460
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48786: LD_ADDR_VAR 0 13
48790: PUSH
48791: LD_VAR 0 14
48795: PUSH
48796: LD_VAR 0 9
48800: ARRAY
48801: PUSH
48802: LD_INT 1
48804: ARRAY
48805: PPUSH
48806: LD_VAR 0 14
48810: PUSH
48811: LD_VAR 0 9
48815: ARRAY
48816: PUSH
48817: LD_INT 2
48819: ARRAY
48820: PPUSH
48821: CALL_OW 428
48825: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48826: LD_VAR 0 14
48830: PUSH
48831: LD_VAR 0 9
48835: ARRAY
48836: PUSH
48837: LD_INT 1
48839: ARRAY
48840: PPUSH
48841: LD_VAR 0 14
48845: PUSH
48846: LD_VAR 0 9
48850: ARRAY
48851: PUSH
48852: LD_INT 2
48854: ARRAY
48855: PPUSH
48856: CALL_OW 351
48860: PUSH
48861: LD_VAR 0 14
48865: PUSH
48866: LD_VAR 0 9
48870: ARRAY
48871: PUSH
48872: LD_INT 1
48874: ARRAY
48875: PPUSH
48876: LD_VAR 0 14
48880: PUSH
48881: LD_VAR 0 9
48885: ARRAY
48886: PUSH
48887: LD_INT 2
48889: ARRAY
48890: PPUSH
48891: CALL_OW 488
48895: NOT
48896: OR
48897: PUSH
48898: LD_VAR 0 13
48902: PPUSH
48903: CALL_OW 247
48907: PUSH
48908: LD_INT 3
48910: EQUAL
48911: OR
48912: IFFALSE 48918
// exit ;
48914: POP
48915: POP
48916: GO 49462
// if not tmp then
48918: LD_VAR 0 13
48922: NOT
48923: IFFALSE 48927
// continue ;
48925: GO 48783
// result := true ;
48927: LD_ADDR_VAR 0 8
48931: PUSH
48932: LD_INT 1
48934: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48935: LD_VAR 0 6
48939: PUSH
48940: LD_VAR 0 13
48944: PPUSH
48945: CALL_OW 247
48949: PUSH
48950: LD_INT 2
48952: EQUAL
48953: AND
48954: PUSH
48955: LD_VAR 0 13
48959: PPUSH
48960: CALL_OW 263
48964: PUSH
48965: LD_INT 1
48967: EQUAL
48968: AND
48969: IFFALSE 49133
// begin if IsDrivenBy ( tmp ) then
48971: LD_VAR 0 13
48975: PPUSH
48976: CALL_OW 311
48980: IFFALSE 48984
// continue ;
48982: GO 48783
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48984: LD_VAR 0 6
48988: PPUSH
48989: LD_INT 3
48991: PUSH
48992: LD_INT 60
48994: PUSH
48995: EMPTY
48996: LIST
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 3
49004: PUSH
49005: LD_INT 55
49007: PUSH
49008: EMPTY
49009: LIST
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PPUSH
49019: CALL_OW 72
49023: IFFALSE 49131
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49025: LD_ADDR_VAR 0 18
49029: PUSH
49030: LD_VAR 0 6
49034: PPUSH
49035: LD_INT 3
49037: PUSH
49038: LD_INT 60
49040: PUSH
49041: EMPTY
49042: LIST
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 3
49050: PUSH
49051: LD_INT 55
49053: PUSH
49054: EMPTY
49055: LIST
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PPUSH
49065: CALL_OW 72
49069: PUSH
49070: LD_INT 1
49072: ARRAY
49073: ST_TO_ADDR
// if IsInUnit ( driver ) then
49074: LD_VAR 0 18
49078: PPUSH
49079: CALL_OW 310
49083: IFFALSE 49094
// ComExit ( driver ) ;
49085: LD_VAR 0 18
49089: PPUSH
49090: CALL 74494 0 1
// AddComEnterUnit ( driver , tmp ) ;
49094: LD_VAR 0 18
49098: PPUSH
49099: LD_VAR 0 13
49103: PPUSH
49104: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49108: LD_VAR 0 18
49112: PPUSH
49113: LD_VAR 0 7
49117: PPUSH
49118: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49122: LD_VAR 0 18
49126: PPUSH
49127: CALL_OW 181
// end ; continue ;
49131: GO 48783
// end ; if not cleaners or not tmp in cleaners then
49133: LD_VAR 0 6
49137: NOT
49138: PUSH
49139: LD_VAR 0 13
49143: PUSH
49144: LD_VAR 0 6
49148: IN
49149: NOT
49150: OR
49151: IFFALSE 49458
// begin if dep then
49153: LD_VAR 0 17
49157: IFFALSE 49293
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49159: LD_ADDR_VAR 0 16
49163: PUSH
49164: LD_VAR 0 17
49168: PUSH
49169: LD_INT 1
49171: ARRAY
49172: PPUSH
49173: CALL_OW 250
49177: PPUSH
49178: LD_VAR 0 17
49182: PUSH
49183: LD_INT 1
49185: ARRAY
49186: PPUSH
49187: CALL_OW 254
49191: PPUSH
49192: LD_INT 5
49194: PPUSH
49195: CALL_OW 272
49199: PUSH
49200: LD_VAR 0 17
49204: PUSH
49205: LD_INT 1
49207: ARRAY
49208: PPUSH
49209: CALL_OW 251
49213: PPUSH
49214: LD_VAR 0 17
49218: PUSH
49219: LD_INT 1
49221: ARRAY
49222: PPUSH
49223: CALL_OW 254
49227: PPUSH
49228: LD_INT 5
49230: PPUSH
49231: CALL_OW 273
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49240: LD_VAR 0 16
49244: PUSH
49245: LD_INT 1
49247: ARRAY
49248: PPUSH
49249: LD_VAR 0 16
49253: PUSH
49254: LD_INT 2
49256: ARRAY
49257: PPUSH
49258: CALL_OW 488
49262: IFFALSE 49293
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49264: LD_VAR 0 13
49268: PPUSH
49269: LD_VAR 0 16
49273: PUSH
49274: LD_INT 1
49276: ARRAY
49277: PPUSH
49278: LD_VAR 0 16
49282: PUSH
49283: LD_INT 2
49285: ARRAY
49286: PPUSH
49287: CALL_OW 111
// continue ;
49291: GO 48783
// end ; end ; r := GetDir ( tmp ) ;
49293: LD_ADDR_VAR 0 15
49297: PUSH
49298: LD_VAR 0 13
49302: PPUSH
49303: CALL_OW 254
49307: ST_TO_ADDR
// if r = 5 then
49308: LD_VAR 0 15
49312: PUSH
49313: LD_INT 5
49315: EQUAL
49316: IFFALSE 49326
// r := 0 ;
49318: LD_ADDR_VAR 0 15
49322: PUSH
49323: LD_INT 0
49325: ST_TO_ADDR
// for j = r to 5 do
49326: LD_ADDR_VAR 0 10
49330: PUSH
49331: DOUBLE
49332: LD_VAR 0 15
49336: DEC
49337: ST_TO_ADDR
49338: LD_INT 5
49340: PUSH
49341: FOR_TO
49342: IFFALSE 49456
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49344: LD_ADDR_VAR 0 11
49348: PUSH
49349: LD_VAR 0 13
49353: PPUSH
49354: CALL_OW 250
49358: PPUSH
49359: LD_VAR 0 10
49363: PPUSH
49364: LD_INT 2
49366: PPUSH
49367: CALL_OW 272
49371: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49372: LD_ADDR_VAR 0 12
49376: PUSH
49377: LD_VAR 0 13
49381: PPUSH
49382: CALL_OW 251
49386: PPUSH
49387: LD_VAR 0 10
49391: PPUSH
49392: LD_INT 2
49394: PPUSH
49395: CALL_OW 273
49399: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49400: LD_VAR 0 11
49404: PPUSH
49405: LD_VAR 0 12
49409: PPUSH
49410: CALL_OW 488
49414: PUSH
49415: LD_VAR 0 11
49419: PPUSH
49420: LD_VAR 0 12
49424: PPUSH
49425: CALL_OW 428
49429: NOT
49430: AND
49431: IFFALSE 49454
// begin ComMoveXY ( tmp , _x , _y ) ;
49433: LD_VAR 0 13
49437: PPUSH
49438: LD_VAR 0 11
49442: PPUSH
49443: LD_VAR 0 12
49447: PPUSH
49448: CALL_OW 111
// break ;
49452: GO 49456
// end ; end ;
49454: GO 49341
49456: POP
49457: POP
// end ; end ;
49458: GO 48783
49460: POP
49461: POP
// end ;
49462: LD_VAR 0 8
49466: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49467: LD_INT 0
49469: PPUSH
// result := true ;
49470: LD_ADDR_VAR 0 3
49474: PUSH
49475: LD_INT 1
49477: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49478: LD_VAR 0 2
49482: PUSH
49483: LD_INT 24
49485: DOUBLE
49486: EQUAL
49487: IFTRUE 49497
49489: LD_INT 33
49491: DOUBLE
49492: EQUAL
49493: IFTRUE 49497
49495: GO 49522
49497: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49498: LD_ADDR_VAR 0 3
49502: PUSH
49503: LD_INT 32
49505: PPUSH
49506: LD_VAR 0 1
49510: PPUSH
49511: CALL_OW 321
49515: PUSH
49516: LD_INT 2
49518: EQUAL
49519: ST_TO_ADDR
49520: GO 49838
49522: LD_INT 20
49524: DOUBLE
49525: EQUAL
49526: IFTRUE 49530
49528: GO 49555
49530: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49531: LD_ADDR_VAR 0 3
49535: PUSH
49536: LD_INT 6
49538: PPUSH
49539: LD_VAR 0 1
49543: PPUSH
49544: CALL_OW 321
49548: PUSH
49549: LD_INT 2
49551: EQUAL
49552: ST_TO_ADDR
49553: GO 49838
49555: LD_INT 22
49557: DOUBLE
49558: EQUAL
49559: IFTRUE 49569
49561: LD_INT 36
49563: DOUBLE
49564: EQUAL
49565: IFTRUE 49569
49567: GO 49594
49569: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49570: LD_ADDR_VAR 0 3
49574: PUSH
49575: LD_INT 15
49577: PPUSH
49578: LD_VAR 0 1
49582: PPUSH
49583: CALL_OW 321
49587: PUSH
49588: LD_INT 2
49590: EQUAL
49591: ST_TO_ADDR
49592: GO 49838
49594: LD_INT 30
49596: DOUBLE
49597: EQUAL
49598: IFTRUE 49602
49600: GO 49627
49602: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49603: LD_ADDR_VAR 0 3
49607: PUSH
49608: LD_INT 20
49610: PPUSH
49611: LD_VAR 0 1
49615: PPUSH
49616: CALL_OW 321
49620: PUSH
49621: LD_INT 2
49623: EQUAL
49624: ST_TO_ADDR
49625: GO 49838
49627: LD_INT 28
49629: DOUBLE
49630: EQUAL
49631: IFTRUE 49641
49633: LD_INT 21
49635: DOUBLE
49636: EQUAL
49637: IFTRUE 49641
49639: GO 49666
49641: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49642: LD_ADDR_VAR 0 3
49646: PUSH
49647: LD_INT 21
49649: PPUSH
49650: LD_VAR 0 1
49654: PPUSH
49655: CALL_OW 321
49659: PUSH
49660: LD_INT 2
49662: EQUAL
49663: ST_TO_ADDR
49664: GO 49838
49666: LD_INT 16
49668: DOUBLE
49669: EQUAL
49670: IFTRUE 49674
49672: GO 49699
49674: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49675: LD_ADDR_VAR 0 3
49679: PUSH
49680: LD_INT 84
49682: PPUSH
49683: LD_VAR 0 1
49687: PPUSH
49688: CALL_OW 321
49692: PUSH
49693: LD_INT 2
49695: EQUAL
49696: ST_TO_ADDR
49697: GO 49838
49699: LD_INT 19
49701: DOUBLE
49702: EQUAL
49703: IFTRUE 49713
49705: LD_INT 23
49707: DOUBLE
49708: EQUAL
49709: IFTRUE 49713
49711: GO 49738
49713: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49714: LD_ADDR_VAR 0 3
49718: PUSH
49719: LD_INT 83
49721: PPUSH
49722: LD_VAR 0 1
49726: PPUSH
49727: CALL_OW 321
49731: PUSH
49732: LD_INT 2
49734: EQUAL
49735: ST_TO_ADDR
49736: GO 49838
49738: LD_INT 17
49740: DOUBLE
49741: EQUAL
49742: IFTRUE 49746
49744: GO 49771
49746: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49747: LD_ADDR_VAR 0 3
49751: PUSH
49752: LD_INT 39
49754: PPUSH
49755: LD_VAR 0 1
49759: PPUSH
49760: CALL_OW 321
49764: PUSH
49765: LD_INT 2
49767: EQUAL
49768: ST_TO_ADDR
49769: GO 49838
49771: LD_INT 18
49773: DOUBLE
49774: EQUAL
49775: IFTRUE 49779
49777: GO 49804
49779: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49780: LD_ADDR_VAR 0 3
49784: PUSH
49785: LD_INT 40
49787: PPUSH
49788: LD_VAR 0 1
49792: PPUSH
49793: CALL_OW 321
49797: PUSH
49798: LD_INT 2
49800: EQUAL
49801: ST_TO_ADDR
49802: GO 49838
49804: LD_INT 27
49806: DOUBLE
49807: EQUAL
49808: IFTRUE 49812
49810: GO 49837
49812: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49813: LD_ADDR_VAR 0 3
49817: PUSH
49818: LD_INT 35
49820: PPUSH
49821: LD_VAR 0 1
49825: PPUSH
49826: CALL_OW 321
49830: PUSH
49831: LD_INT 2
49833: EQUAL
49834: ST_TO_ADDR
49835: GO 49838
49837: POP
// end ;
49838: LD_VAR 0 3
49842: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49843: LD_INT 0
49845: PPUSH
49846: PPUSH
49847: PPUSH
49848: PPUSH
49849: PPUSH
49850: PPUSH
49851: PPUSH
49852: PPUSH
49853: PPUSH
49854: PPUSH
49855: PPUSH
// result := false ;
49856: LD_ADDR_VAR 0 6
49860: PUSH
49861: LD_INT 0
49863: ST_TO_ADDR
// if btype = b_depot then
49864: LD_VAR 0 2
49868: PUSH
49869: LD_INT 0
49871: EQUAL
49872: IFFALSE 49884
// begin result := true ;
49874: LD_ADDR_VAR 0 6
49878: PUSH
49879: LD_INT 1
49881: ST_TO_ADDR
// exit ;
49882: GO 50710
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49884: LD_VAR 0 1
49888: NOT
49889: PUSH
49890: LD_VAR 0 1
49894: PPUSH
49895: CALL_OW 266
49899: PUSH
49900: LD_INT 0
49902: PUSH
49903: LD_INT 1
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: IN
49910: NOT
49911: OR
49912: PUSH
49913: LD_VAR 0 2
49917: NOT
49918: OR
49919: PUSH
49920: LD_VAR 0 5
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: LD_INT 1
49930: PUSH
49931: LD_INT 2
49933: PUSH
49934: LD_INT 3
49936: PUSH
49937: LD_INT 4
49939: PUSH
49940: LD_INT 5
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: IN
49951: NOT
49952: OR
49953: PUSH
49954: LD_VAR 0 3
49958: PPUSH
49959: LD_VAR 0 4
49963: PPUSH
49964: CALL_OW 488
49968: NOT
49969: OR
49970: IFFALSE 49974
// exit ;
49972: GO 50710
// side := GetSide ( depot ) ;
49974: LD_ADDR_VAR 0 9
49978: PUSH
49979: LD_VAR 0 1
49983: PPUSH
49984: CALL_OW 255
49988: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49989: LD_VAR 0 9
49993: PPUSH
49994: LD_VAR 0 2
49998: PPUSH
49999: CALL 49467 0 2
50003: NOT
50004: IFFALSE 50008
// exit ;
50006: GO 50710
// pom := GetBase ( depot ) ;
50008: LD_ADDR_VAR 0 10
50012: PUSH
50013: LD_VAR 0 1
50017: PPUSH
50018: CALL_OW 274
50022: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50023: LD_ADDR_VAR 0 11
50027: PUSH
50028: LD_VAR 0 2
50032: PPUSH
50033: LD_VAR 0 1
50037: PPUSH
50038: CALL_OW 248
50042: PPUSH
50043: CALL_OW 450
50047: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50048: LD_VAR 0 10
50052: PPUSH
50053: LD_INT 1
50055: PPUSH
50056: CALL_OW 275
50060: PUSH
50061: LD_VAR 0 11
50065: PUSH
50066: LD_INT 1
50068: ARRAY
50069: GREATEREQUAL
50070: PUSH
50071: LD_VAR 0 10
50075: PPUSH
50076: LD_INT 2
50078: PPUSH
50079: CALL_OW 275
50083: PUSH
50084: LD_VAR 0 11
50088: PUSH
50089: LD_INT 2
50091: ARRAY
50092: GREATEREQUAL
50093: AND
50094: PUSH
50095: LD_VAR 0 10
50099: PPUSH
50100: LD_INT 3
50102: PPUSH
50103: CALL_OW 275
50107: PUSH
50108: LD_VAR 0 11
50112: PUSH
50113: LD_INT 3
50115: ARRAY
50116: GREATEREQUAL
50117: AND
50118: NOT
50119: IFFALSE 50123
// exit ;
50121: GO 50710
// if GetBType ( depot ) = b_depot then
50123: LD_VAR 0 1
50127: PPUSH
50128: CALL_OW 266
50132: PUSH
50133: LD_INT 0
50135: EQUAL
50136: IFFALSE 50148
// dist := 28 else
50138: LD_ADDR_VAR 0 14
50142: PUSH
50143: LD_INT 28
50145: ST_TO_ADDR
50146: GO 50156
// dist := 36 ;
50148: LD_ADDR_VAR 0 14
50152: PUSH
50153: LD_INT 36
50155: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50156: LD_VAR 0 1
50160: PPUSH
50161: LD_VAR 0 3
50165: PPUSH
50166: LD_VAR 0 4
50170: PPUSH
50171: CALL_OW 297
50175: PUSH
50176: LD_VAR 0 14
50180: GREATER
50181: IFFALSE 50185
// exit ;
50183: GO 50710
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50185: LD_ADDR_VAR 0 12
50189: PUSH
50190: LD_VAR 0 2
50194: PPUSH
50195: LD_VAR 0 3
50199: PPUSH
50200: LD_VAR 0 4
50204: PPUSH
50205: LD_VAR 0 5
50209: PPUSH
50210: LD_VAR 0 1
50214: PPUSH
50215: CALL_OW 248
50219: PPUSH
50220: LD_INT 0
50222: PPUSH
50223: CALL 50715 0 6
50227: ST_TO_ADDR
// if not hexes then
50228: LD_VAR 0 12
50232: NOT
50233: IFFALSE 50237
// exit ;
50235: GO 50710
// hex := GetHexInfo ( x , y ) ;
50237: LD_ADDR_VAR 0 15
50241: PUSH
50242: LD_VAR 0 3
50246: PPUSH
50247: LD_VAR 0 4
50251: PPUSH
50252: CALL_OW 546
50256: ST_TO_ADDR
// if hex [ 1 ] then
50257: LD_VAR 0 15
50261: PUSH
50262: LD_INT 1
50264: ARRAY
50265: IFFALSE 50269
// exit ;
50267: GO 50710
// height := hex [ 2 ] ;
50269: LD_ADDR_VAR 0 13
50273: PUSH
50274: LD_VAR 0 15
50278: PUSH
50279: LD_INT 2
50281: ARRAY
50282: ST_TO_ADDR
// for i = 1 to hexes do
50283: LD_ADDR_VAR 0 7
50287: PUSH
50288: DOUBLE
50289: LD_INT 1
50291: DEC
50292: ST_TO_ADDR
50293: LD_VAR 0 12
50297: PUSH
50298: FOR_TO
50299: IFFALSE 50629
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50301: LD_VAR 0 12
50305: PUSH
50306: LD_VAR 0 7
50310: ARRAY
50311: PUSH
50312: LD_INT 1
50314: ARRAY
50315: PPUSH
50316: LD_VAR 0 12
50320: PUSH
50321: LD_VAR 0 7
50325: ARRAY
50326: PUSH
50327: LD_INT 2
50329: ARRAY
50330: PPUSH
50331: CALL_OW 488
50335: NOT
50336: PUSH
50337: LD_VAR 0 12
50341: PUSH
50342: LD_VAR 0 7
50346: ARRAY
50347: PUSH
50348: LD_INT 1
50350: ARRAY
50351: PPUSH
50352: LD_VAR 0 12
50356: PUSH
50357: LD_VAR 0 7
50361: ARRAY
50362: PUSH
50363: LD_INT 2
50365: ARRAY
50366: PPUSH
50367: CALL_OW 428
50371: PUSH
50372: LD_INT 0
50374: GREATER
50375: OR
50376: PUSH
50377: LD_VAR 0 12
50381: PUSH
50382: LD_VAR 0 7
50386: ARRAY
50387: PUSH
50388: LD_INT 1
50390: ARRAY
50391: PPUSH
50392: LD_VAR 0 12
50396: PUSH
50397: LD_VAR 0 7
50401: ARRAY
50402: PUSH
50403: LD_INT 2
50405: ARRAY
50406: PPUSH
50407: CALL_OW 351
50411: OR
50412: IFFALSE 50418
// exit ;
50414: POP
50415: POP
50416: GO 50710
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50418: LD_ADDR_VAR 0 8
50422: PUSH
50423: LD_VAR 0 12
50427: PUSH
50428: LD_VAR 0 7
50432: ARRAY
50433: PUSH
50434: LD_INT 1
50436: ARRAY
50437: PPUSH
50438: LD_VAR 0 12
50442: PUSH
50443: LD_VAR 0 7
50447: ARRAY
50448: PUSH
50449: LD_INT 2
50451: ARRAY
50452: PPUSH
50453: CALL_OW 546
50457: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50458: LD_VAR 0 8
50462: PUSH
50463: LD_INT 1
50465: ARRAY
50466: PUSH
50467: LD_VAR 0 8
50471: PUSH
50472: LD_INT 2
50474: ARRAY
50475: PUSH
50476: LD_VAR 0 13
50480: PUSH
50481: LD_INT 2
50483: PLUS
50484: GREATER
50485: OR
50486: PUSH
50487: LD_VAR 0 8
50491: PUSH
50492: LD_INT 2
50494: ARRAY
50495: PUSH
50496: LD_VAR 0 13
50500: PUSH
50501: LD_INT 2
50503: MINUS
50504: LESS
50505: OR
50506: PUSH
50507: LD_VAR 0 8
50511: PUSH
50512: LD_INT 3
50514: ARRAY
50515: PUSH
50516: LD_INT 0
50518: PUSH
50519: LD_INT 8
50521: PUSH
50522: LD_INT 9
50524: PUSH
50525: LD_INT 10
50527: PUSH
50528: LD_INT 11
50530: PUSH
50531: LD_INT 12
50533: PUSH
50534: LD_INT 13
50536: PUSH
50537: LD_INT 16
50539: PUSH
50540: LD_INT 17
50542: PUSH
50543: LD_INT 18
50545: PUSH
50546: LD_INT 19
50548: PUSH
50549: LD_INT 20
50551: PUSH
50552: LD_INT 21
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: IN
50570: NOT
50571: OR
50572: PUSH
50573: LD_VAR 0 8
50577: PUSH
50578: LD_INT 5
50580: ARRAY
50581: NOT
50582: OR
50583: PUSH
50584: LD_VAR 0 8
50588: PUSH
50589: LD_INT 6
50591: ARRAY
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: LD_INT 2
50598: PUSH
50599: LD_INT 7
50601: PUSH
50602: LD_INT 9
50604: PUSH
50605: LD_INT 10
50607: PUSH
50608: LD_INT 11
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: IN
50619: NOT
50620: OR
50621: IFFALSE 50627
// exit ;
50623: POP
50624: POP
50625: GO 50710
// end ;
50627: GO 50298
50629: POP
50630: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50631: LD_VAR 0 9
50635: PPUSH
50636: LD_VAR 0 3
50640: PPUSH
50641: LD_VAR 0 4
50645: PPUSH
50646: LD_INT 20
50648: PPUSH
50649: CALL 42633 0 4
50653: PUSH
50654: LD_INT 4
50656: ARRAY
50657: IFFALSE 50661
// exit ;
50659: GO 50710
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50661: LD_VAR 0 2
50665: PUSH
50666: LD_INT 29
50668: PUSH
50669: LD_INT 30
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: IN
50676: PUSH
50677: LD_VAR 0 3
50681: PPUSH
50682: LD_VAR 0 4
50686: PPUSH
50687: LD_VAR 0 9
50691: PPUSH
50692: CALL_OW 440
50696: NOT
50697: AND
50698: IFFALSE 50702
// exit ;
50700: GO 50710
// result := true ;
50702: LD_ADDR_VAR 0 6
50706: PUSH
50707: LD_INT 1
50709: ST_TO_ADDR
// end ;
50710: LD_VAR 0 6
50714: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50715: LD_INT 0
50717: PPUSH
50718: PPUSH
50719: PPUSH
50720: PPUSH
50721: PPUSH
50722: PPUSH
50723: PPUSH
50724: PPUSH
50725: PPUSH
50726: PPUSH
50727: PPUSH
50728: PPUSH
50729: PPUSH
50730: PPUSH
50731: PPUSH
50732: PPUSH
50733: PPUSH
50734: PPUSH
50735: PPUSH
50736: PPUSH
50737: PPUSH
50738: PPUSH
50739: PPUSH
50740: PPUSH
50741: PPUSH
50742: PPUSH
50743: PPUSH
50744: PPUSH
50745: PPUSH
50746: PPUSH
50747: PPUSH
50748: PPUSH
50749: PPUSH
50750: PPUSH
50751: PPUSH
50752: PPUSH
50753: PPUSH
50754: PPUSH
50755: PPUSH
50756: PPUSH
50757: PPUSH
50758: PPUSH
50759: PPUSH
50760: PPUSH
50761: PPUSH
50762: PPUSH
50763: PPUSH
50764: PPUSH
50765: PPUSH
50766: PPUSH
50767: PPUSH
50768: PPUSH
50769: PPUSH
50770: PPUSH
50771: PPUSH
50772: PPUSH
50773: PPUSH
50774: PPUSH
// result = [ ] ;
50775: LD_ADDR_VAR 0 7
50779: PUSH
50780: EMPTY
50781: ST_TO_ADDR
// temp_list = [ ] ;
50782: LD_ADDR_VAR 0 9
50786: PUSH
50787: EMPTY
50788: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50789: LD_VAR 0 4
50793: PUSH
50794: LD_INT 0
50796: PUSH
50797: LD_INT 1
50799: PUSH
50800: LD_INT 2
50802: PUSH
50803: LD_INT 3
50805: PUSH
50806: LD_INT 4
50808: PUSH
50809: LD_INT 5
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: IN
50820: NOT
50821: PUSH
50822: LD_VAR 0 1
50826: PUSH
50827: LD_INT 0
50829: PUSH
50830: LD_INT 1
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: IN
50837: PUSH
50838: LD_VAR 0 5
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: LD_INT 2
50848: PUSH
50849: LD_INT 3
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: LIST
50856: IN
50857: NOT
50858: AND
50859: OR
50860: IFFALSE 50864
// exit ;
50862: GO 69255
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50864: LD_VAR 0 1
50868: PUSH
50869: LD_INT 6
50871: PUSH
50872: LD_INT 7
50874: PUSH
50875: LD_INT 8
50877: PUSH
50878: LD_INT 13
50880: PUSH
50881: LD_INT 12
50883: PUSH
50884: LD_INT 15
50886: PUSH
50887: LD_INT 11
50889: PUSH
50890: LD_INT 14
50892: PUSH
50893: LD_INT 10
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: IN
50907: IFFALSE 50917
// btype = b_lab ;
50909: LD_ADDR_VAR 0 1
50913: PUSH
50914: LD_INT 6
50916: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50917: LD_VAR 0 6
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: LD_INT 1
50927: PUSH
50928: LD_INT 2
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: LIST
50935: IN
50936: NOT
50937: PUSH
50938: LD_VAR 0 1
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: LD_INT 1
50948: PUSH
50949: LD_INT 2
50951: PUSH
50952: LD_INT 3
50954: PUSH
50955: LD_INT 6
50957: PUSH
50958: LD_INT 36
50960: PUSH
50961: LD_INT 4
50963: PUSH
50964: LD_INT 5
50966: PUSH
50967: LD_INT 31
50969: PUSH
50970: LD_INT 32
50972: PUSH
50973: LD_INT 33
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: IN
50989: NOT
50990: PUSH
50991: LD_VAR 0 6
50995: PUSH
50996: LD_INT 1
50998: EQUAL
50999: AND
51000: OR
51001: PUSH
51002: LD_VAR 0 1
51006: PUSH
51007: LD_INT 2
51009: PUSH
51010: LD_INT 3
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: IN
51017: NOT
51018: PUSH
51019: LD_VAR 0 6
51023: PUSH
51024: LD_INT 2
51026: EQUAL
51027: AND
51028: OR
51029: IFFALSE 51039
// mode = 0 ;
51031: LD_ADDR_VAR 0 6
51035: PUSH
51036: LD_INT 0
51038: ST_TO_ADDR
// case mode of 0 :
51039: LD_VAR 0 6
51043: PUSH
51044: LD_INT 0
51046: DOUBLE
51047: EQUAL
51048: IFTRUE 51052
51050: GO 62505
51052: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51053: LD_ADDR_VAR 0 11
51057: PUSH
51058: LD_INT 0
51060: PUSH
51061: LD_INT 0
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: LD_INT 1
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 1
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: LD_INT 1
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 1
51122: NEG
51123: PUSH
51124: LD_INT 1
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: LD_INT 2
51138: NEG
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: LD_INT 2
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: LD_INT 2
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: LD_INT 2
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 1
51199: PUSH
51200: LD_INT 3
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: LD_INT 3
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: LD_INT 2
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51246: LD_ADDR_VAR 0 12
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: LD_INT 0
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: PUSH
51328: LD_INT 1
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 2
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 2
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: NEG
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 2
51369: NEG
51370: PUSH
51371: LD_INT 0
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 2
51380: NEG
51381: PUSH
51382: LD_INT 1
51384: NEG
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 2
51392: NEG
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 3
51403: NEG
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 3
51414: NEG
51415: PUSH
51416: LD_INT 1
51418: NEG
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51442: LD_ADDR_VAR 0 13
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: LD_INT 0
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: LD_INT 1
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 1
51523: NEG
51524: PUSH
51525: LD_INT 2
51527: NEG
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 2
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 2
51545: PUSH
51546: LD_INT 2
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 1
51555: PUSH
51556: LD_INT 2
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 2
51565: NEG
51566: PUSH
51567: LD_INT 1
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 2
51577: NEG
51578: PUSH
51579: LD_INT 2
51581: NEG
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 2
51589: NEG
51590: PUSH
51591: LD_INT 3
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 3
51601: NEG
51602: PUSH
51603: LD_INT 2
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 3
51613: NEG
51614: PUSH
51615: LD_INT 3
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51641: LD_ADDR_VAR 0 14
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: LD_INT 0
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: LD_INT 0
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: LD_INT 1
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 1
51710: NEG
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: LD_INT 2
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: LD_INT 2
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: LD_INT 1
51748: NEG
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 1
51756: PUSH
51757: LD_INT 2
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: LD_INT 2
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: LD_INT 3
51791: NEG
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: LD_INT 3
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: PUSH
51811: LD_INT 2
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51837: LD_ADDR_VAR 0 15
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: LD_INT 1
51857: NEG
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 1
51865: PUSH
51866: LD_INT 0
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 0
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: NEG
51896: PUSH
51897: LD_INT 0
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 1
51906: NEG
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 2
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 2
51939: PUSH
51940: LD_INT 1
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 1
51949: NEG
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 2
51960: NEG
51961: PUSH
51962: LD_INT 0
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 2
51971: NEG
51972: PUSH
51973: LD_INT 1
51975: NEG
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 2
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 3
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 3
52004: PUSH
52005: LD_INT 1
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52030: LD_ADDR_VAR 0 16
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 0
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 1
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 1
52099: NEG
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: LD_INT 2
52115: NEG
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 2
52123: PUSH
52124: LD_INT 1
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 2
52133: PUSH
52134: LD_INT 2
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: LD_INT 2
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 2
52153: NEG
52154: PUSH
52155: LD_INT 1
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 2
52165: NEG
52166: PUSH
52167: LD_INT 2
52169: NEG
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 3
52177: PUSH
52178: LD_INT 2
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 3
52187: PUSH
52188: LD_INT 3
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 2
52197: PUSH
52198: LD_INT 3
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52223: LD_ADDR_VAR 0 17
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: LD_INT 0
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: NEG
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 1
52304: NEG
52305: PUSH
52306: LD_INT 2
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: LD_INT 2
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: LD_INT 1
52330: NEG
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 2
52338: PUSH
52339: LD_INT 0
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 2
52348: PUSH
52349: LD_INT 1
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 2
52358: PUSH
52359: LD_INT 2
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: LD_INT 2
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: LD_INT 2
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 1
52388: NEG
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 2
52399: NEG
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 2
52410: NEG
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 2
52422: NEG
52423: PUSH
52424: LD_INT 2
52426: NEG
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52453: LD_ADDR_VAR 0 18
52457: PUSH
52458: LD_INT 0
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: LD_INT 1
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 1
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: LD_INT 2
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: LD_INT 2
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: PUSH
52558: LD_INT 1
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 2
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 2
52578: PUSH
52579: LD_INT 1
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 2
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: LD_INT 2
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: LD_INT 2
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 1
52618: NEG
52619: PUSH
52620: LD_INT 1
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 2
52629: NEG
52630: PUSH
52631: LD_INT 0
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 2
52640: NEG
52641: PUSH
52642: LD_INT 1
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 2
52652: NEG
52653: PUSH
52654: LD_INT 2
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52683: LD_ADDR_VAR 0 19
52687: PUSH
52688: LD_INT 0
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: LD_INT 0
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 1
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: NEG
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 1
52752: NEG
52753: PUSH
52754: LD_INT 1
52756: NEG
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 1
52764: NEG
52765: PUSH
52766: LD_INT 2
52768: NEG
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: LD_INT 2
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: PUSH
52788: LD_INT 1
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 2
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 2
52808: PUSH
52809: LD_INT 1
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 2
52818: PUSH
52819: LD_INT 2
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: PUSH
52829: LD_INT 2
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: LD_INT 2
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: NEG
52849: PUSH
52850: LD_INT 1
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 2
52859: NEG
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 2
52870: NEG
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 2
52882: NEG
52883: PUSH
52884: LD_INT 2
52886: NEG
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52913: LD_ADDR_VAR 0 20
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: LD_INT 1
52933: NEG
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 1
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 1
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 0
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 1
52982: NEG
52983: PUSH
52984: LD_INT 1
52986: NEG
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 1
52994: NEG
52995: PUSH
52996: LD_INT 2
52998: NEG
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 0
53006: PUSH
53007: LD_INT 2
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: LD_INT 1
53020: NEG
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 2
53028: PUSH
53029: LD_INT 0
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 2
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 2
53048: PUSH
53049: LD_INT 2
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: LD_INT 2
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 0
53068: PUSH
53069: LD_INT 2
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: NEG
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 2
53089: NEG
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 2
53100: NEG
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 2
53112: NEG
53113: PUSH
53114: LD_INT 2
53116: NEG
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53143: LD_ADDR_VAR 0 21
53147: PUSH
53148: LD_INT 0
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: LD_INT 1
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 0
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 1
53201: NEG
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 1
53212: NEG
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 1
53224: NEG
53225: PUSH
53226: LD_INT 2
53228: NEG
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: LD_INT 2
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: LD_INT 1
53250: NEG
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 2
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 2
53268: PUSH
53269: LD_INT 1
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 2
53278: PUSH
53279: LD_INT 2
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 1
53288: PUSH
53289: LD_INT 2
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: LD_INT 2
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 1
53308: NEG
53309: PUSH
53310: LD_INT 1
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 2
53319: NEG
53320: PUSH
53321: LD_INT 0
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 2
53330: NEG
53331: PUSH
53332: LD_INT 1
53334: NEG
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 2
53342: NEG
53343: PUSH
53344: LD_INT 2
53346: NEG
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53373: LD_ADDR_VAR 0 22
53377: PUSH
53378: LD_INT 0
53380: PUSH
53381: LD_INT 0
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: LD_INT 1
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: LD_INT 2
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: LD_INT 2
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 2
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 2
53498: PUSH
53499: LD_INT 1
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 2
53508: PUSH
53509: LD_INT 2
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: LD_INT 2
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: LD_INT 2
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: LD_INT 1
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 2
53549: NEG
53550: PUSH
53551: LD_INT 0
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 2
53560: NEG
53561: PUSH
53562: LD_INT 1
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 2
53572: NEG
53573: PUSH
53574: LD_INT 2
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53603: LD_ADDR_VAR 0 23
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 1
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: LD_INT 2
53688: NEG
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: LD_INT 2
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: PUSH
53708: LD_INT 1
53710: NEG
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 2
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 2
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 2
53738: PUSH
53739: LD_INT 2
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 1
53748: PUSH
53749: LD_INT 2
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 0
53758: PUSH
53759: LD_INT 2
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 1
53768: NEG
53769: PUSH
53770: LD_INT 1
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 2
53779: NEG
53780: PUSH
53781: LD_INT 0
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 2
53790: NEG
53791: PUSH
53792: LD_INT 1
53794: NEG
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 2
53802: NEG
53803: PUSH
53804: LD_INT 2
53806: NEG
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 2
53814: NEG
53815: PUSH
53816: LD_INT 3
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 1
53826: NEG
53827: PUSH
53828: LD_INT 3
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: LD_INT 2
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 2
53849: PUSH
53850: LD_INT 1
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53883: LD_ADDR_VAR 0 24
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: LD_INT 0
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 0
53900: PUSH
53901: LD_INT 1
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 1
53911: PUSH
53912: LD_INT 0
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 1
53921: PUSH
53922: LD_INT 1
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: LD_INT 1
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 1
53941: NEG
53942: PUSH
53943: LD_INT 0
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 1
53952: NEG
53953: PUSH
53954: LD_INT 1
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 1
53964: NEG
53965: PUSH
53966: LD_INT 2
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 0
53976: PUSH
53977: LD_INT 2
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: LD_INT 1
53990: NEG
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 2
53998: PUSH
53999: LD_INT 0
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 2
54008: PUSH
54009: LD_INT 1
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 2
54018: PUSH
54019: LD_INT 2
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 1
54028: PUSH
54029: LD_INT 2
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: LD_INT 2
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 1
54048: NEG
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 2
54059: NEG
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 2
54070: NEG
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 2
54082: NEG
54083: PUSH
54084: LD_INT 2
54086: NEG
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: LD_INT 2
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 2
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 3
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 3
54126: PUSH
54127: LD_INT 2
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54159: LD_ADDR_VAR 0 25
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: LD_INT 1
54179: NEG
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 1
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 1
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: LD_INT 1
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: LD_INT 2
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 0
54252: PUSH
54253: LD_INT 2
54255: NEG
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: PUSH
54264: LD_INT 1
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 2
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 2
54284: PUSH
54285: LD_INT 1
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 2
54294: PUSH
54295: LD_INT 2
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 1
54304: PUSH
54305: LD_INT 2
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 0
54314: PUSH
54315: LD_INT 2
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 1
54324: NEG
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 2
54335: NEG
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 2
54346: NEG
54347: PUSH
54348: LD_INT 1
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 2
54358: NEG
54359: PUSH
54360: LD_INT 2
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 3
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 3
54380: PUSH
54381: LD_INT 2
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 2
54390: PUSH
54391: LD_INT 3
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: LD_INT 3
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54433: LD_ADDR_VAR 0 26
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 1
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: NEG
54515: PUSH
54516: LD_INT 2
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 0
54526: PUSH
54527: LD_INT 2
54529: NEG
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 1
54537: PUSH
54538: LD_INT 1
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 2
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 2
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 2
54568: PUSH
54569: LD_INT 2
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 1
54578: PUSH
54579: LD_INT 2
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: LD_INT 2
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: NEG
54599: PUSH
54600: LD_INT 1
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 2
54609: NEG
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 2
54620: NEG
54621: PUSH
54622: LD_INT 1
54624: NEG
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 2
54632: NEG
54633: PUSH
54634: LD_INT 2
54636: NEG
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 2
54644: PUSH
54645: LD_INT 3
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: LD_INT 3
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 1
54664: NEG
54665: PUSH
54666: LD_INT 2
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 2
54675: NEG
54676: PUSH
54677: LD_INT 1
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54709: LD_ADDR_VAR 0 27
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 1
54747: PUSH
54748: LD_INT 1
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 1
54778: NEG
54779: PUSH
54780: LD_INT 1
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: LD_INT 2
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: LD_INT 2
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 1
54813: PUSH
54814: LD_INT 1
54816: NEG
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 2
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 2
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 2
54844: PUSH
54845: LD_INT 2
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 1
54854: PUSH
54855: LD_INT 2
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: LD_INT 2
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 1
54874: NEG
54875: PUSH
54876: LD_INT 1
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 2
54885: NEG
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 2
54896: NEG
54897: PUSH
54898: LD_INT 1
54900: NEG
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 2
54908: NEG
54909: PUSH
54910: LD_INT 2
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 1
54920: NEG
54921: PUSH
54922: LD_INT 2
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 2
54931: NEG
54932: PUSH
54933: LD_INT 1
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 3
54942: NEG
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 3
54954: NEG
54955: PUSH
54956: LD_INT 2
54958: NEG
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54989: LD_ADDR_VAR 0 28
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: LD_INT 0
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 0
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: LD_INT 0
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 1
55027: PUSH
55028: LD_INT 1
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 0
55037: PUSH
55038: LD_INT 1
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: NEG
55059: PUSH
55060: LD_INT 1
55062: NEG
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 1
55070: NEG
55071: PUSH
55072: LD_INT 2
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 0
55082: PUSH
55083: LD_INT 2
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: LD_INT 1
55096: NEG
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 2
55104: PUSH
55105: LD_INT 0
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 2
55114: PUSH
55115: LD_INT 1
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 2
55124: PUSH
55125: LD_INT 2
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: LD_INT 2
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: LD_INT 2
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 1
55154: NEG
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 2
55165: NEG
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 2
55176: NEG
55177: PUSH
55178: LD_INT 1
55180: NEG
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 2
55188: NEG
55189: PUSH
55190: LD_INT 2
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 2
55200: NEG
55201: PUSH
55202: LD_INT 3
55204: NEG
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: LD_INT 3
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 3
55224: NEG
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 3
55236: NEG
55237: PUSH
55238: LD_INT 2
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55271: LD_ADDR_VAR 0 29
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: LD_INT 1
55291: NEG
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: LD_INT 1
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 1
55352: NEG
55353: PUSH
55354: LD_INT 2
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: LD_INT 2
55367: NEG
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: LD_INT 1
55378: NEG
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 2
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 2
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 1
55406: PUSH
55407: LD_INT 2
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: LD_INT 2
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: NEG
55427: PUSH
55428: LD_INT 1
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 2
55437: NEG
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 2
55449: NEG
55450: PUSH
55451: LD_INT 2
55453: NEG
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 2
55461: NEG
55462: PUSH
55463: LD_INT 3
55465: NEG
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 2
55473: PUSH
55474: LD_INT 1
55476: NEG
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 3
55484: PUSH
55485: LD_INT 1
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 1
55494: PUSH
55495: LD_INT 3
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 1
55504: NEG
55505: PUSH
55506: LD_INT 2
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 3
55515: NEG
55516: PUSH
55517: LD_INT 2
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55550: LD_ADDR_VAR 0 30
55554: PUSH
55555: LD_INT 0
55557: PUSH
55558: LD_INT 0
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 0
55567: PUSH
55568: LD_INT 1
55570: NEG
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: LD_INT 0
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 0
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 1
55608: NEG
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 1
55619: NEG
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: NEG
55632: PUSH
55633: LD_INT 2
55635: NEG
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: LD_INT 2
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 1
55654: PUSH
55655: LD_INT 1
55657: NEG
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 2
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 2
55675: PUSH
55676: LD_INT 1
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 2
55685: PUSH
55686: LD_INT 2
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: LD_INT 2
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: LD_INT 1
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 2
55716: NEG
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 2
55727: NEG
55728: PUSH
55729: LD_INT 1
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 1
55739: NEG
55740: PUSH
55741: LD_INT 3
55743: NEG
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: LD_INT 2
55754: NEG
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 3
55762: PUSH
55763: LD_INT 2
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 2
55772: PUSH
55773: LD_INT 3
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 2
55782: NEG
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 3
55793: NEG
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55828: LD_ADDR_VAR 0 31
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 0
55845: PUSH
55846: LD_INT 1
55848: NEG
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 1
55856: PUSH
55857: LD_INT 0
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 1
55866: PUSH
55867: LD_INT 1
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 1
55886: NEG
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: LD_INT 2
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 1
55921: PUSH
55922: LD_INT 1
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 2
55932: PUSH
55933: LD_INT 0
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 2
55942: PUSH
55943: LD_INT 1
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 2
55952: PUSH
55953: LD_INT 2
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: LD_INT 2
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: LD_INT 2
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 1
55982: NEG
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 2
55993: NEG
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 2
56005: NEG
56006: PUSH
56007: LD_INT 2
56009: NEG
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 2
56017: NEG
56018: PUSH
56019: LD_INT 3
56021: NEG
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 2
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 3
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: LD_INT 3
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 1
56060: NEG
56061: PUSH
56062: LD_INT 2
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 3
56071: NEG
56072: PUSH
56073: LD_INT 2
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56106: LD_ADDR_VAR 0 32
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: LD_INT 1
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 1
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 1
56164: NEG
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 1
56175: NEG
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: LD_INT 2
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: LD_INT 2
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: PUSH
56211: LD_INT 1
56213: NEG
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 2
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 2
56231: PUSH
56232: LD_INT 2
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 1
56241: PUSH
56242: LD_INT 2
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 0
56251: PUSH
56252: LD_INT 2
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 1
56261: NEG
56262: PUSH
56263: LD_INT 1
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 2
56272: NEG
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 2
56283: NEG
56284: PUSH
56285: LD_INT 1
56287: NEG
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: NEG
56296: PUSH
56297: LD_INT 3
56299: NEG
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: LD_INT 2
56310: NEG
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 3
56318: PUSH
56319: LD_INT 2
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 2
56328: PUSH
56329: LD_INT 3
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 2
56338: NEG
56339: PUSH
56340: LD_INT 1
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 3
56349: NEG
56350: PUSH
56351: LD_INT 1
56353: NEG
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56384: LD_ADDR_VAR 0 33
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: LD_INT 0
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 0
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 1
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 1
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: LD_INT 1
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: LD_INT 0
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: LD_INT 1
56457: NEG
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 1
56465: NEG
56466: PUSH
56467: LD_INT 2
56469: NEG
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 1
56477: PUSH
56478: LD_INT 1
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 2
56488: PUSH
56489: LD_INT 0
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 2
56498: PUSH
56499: LD_INT 1
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: LD_INT 2
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: LD_INT 2
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 1
56528: NEG
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 2
56539: NEG
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 2
56550: NEG
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 2
56562: NEG
56563: PUSH
56564: LD_INT 2
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 2
56574: NEG
56575: PUSH
56576: LD_INT 3
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 2
56586: PUSH
56587: LD_INT 1
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 3
56597: PUSH
56598: LD_INT 1
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 1
56607: PUSH
56608: LD_INT 3
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 1
56617: NEG
56618: PUSH
56619: LD_INT 2
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 3
56628: NEG
56629: PUSH
56630: LD_INT 2
56632: NEG
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56663: LD_ADDR_VAR 0 34
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: LD_INT 1
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 1
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 1
56701: PUSH
56702: LD_INT 1
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 0
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 1
56721: NEG
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 1
56732: NEG
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: LD_INT 2
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: LD_INT 2
56759: NEG
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 1
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 2
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 2
56788: PUSH
56789: LD_INT 2
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: LD_INT 2
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 1
56808: NEG
56809: PUSH
56810: LD_INT 1
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 2
56819: NEG
56820: PUSH
56821: LD_INT 0
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 2
56830: NEG
56831: PUSH
56832: LD_INT 1
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 2
56842: NEG
56843: PUSH
56844: LD_INT 2
56846: NEG
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 1
56854: NEG
56855: PUSH
56856: LD_INT 3
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: LD_INT 2
56869: NEG
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 3
56877: PUSH
56878: LD_INT 2
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 2
56887: PUSH
56888: LD_INT 3
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 2
56897: NEG
56898: PUSH
56899: LD_INT 1
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 3
56908: NEG
56909: PUSH
56910: LD_INT 1
56912: NEG
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56943: LD_ADDR_VAR 0 35
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: LD_INT 0
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 0
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 1
56971: PUSH
56972: LD_INT 0
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 1
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: LD_INT 1
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 1
57001: NEG
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 1
57012: NEG
57013: PUSH
57014: LD_INT 1
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 2
57024: PUSH
57025: LD_INT 1
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 2
57034: NEG
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57055: LD_ADDR_VAR 0 36
57059: PUSH
57060: LD_INT 0
57062: PUSH
57063: LD_INT 0
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: LD_INT 1
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 1
57083: PUSH
57084: LD_INT 0
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: LD_INT 1
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: NEG
57125: PUSH
57126: LD_INT 1
57128: NEG
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 1
57136: NEG
57137: PUSH
57138: LD_INT 2
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: LD_INT 2
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57167: LD_ADDR_VAR 0 37
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: LD_INT 0
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 0
57184: PUSH
57185: LD_INT 1
57187: NEG
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: LD_INT 0
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 1
57205: PUSH
57206: LD_INT 1
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 0
57215: PUSH
57216: LD_INT 1
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 1
57225: NEG
57226: PUSH
57227: LD_INT 0
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 1
57236: NEG
57237: PUSH
57238: LD_INT 1
57240: NEG
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 1
57248: PUSH
57249: LD_INT 1
57251: NEG
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 1
57259: NEG
57260: PUSH
57261: LD_INT 1
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57279: LD_ADDR_VAR 0 38
57283: PUSH
57284: LD_INT 0
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 0
57296: PUSH
57297: LD_INT 1
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: LD_INT 0
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 1
57317: PUSH
57318: LD_INT 1
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 1
57337: NEG
57338: PUSH
57339: LD_INT 0
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 1
57348: NEG
57349: PUSH
57350: LD_INT 1
57352: NEG
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 2
57360: PUSH
57361: LD_INT 1
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 2
57370: NEG
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57391: LD_ADDR_VAR 0 39
57395: PUSH
57396: LD_INT 0
57398: PUSH
57399: LD_INT 0
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: LD_INT 1
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: LD_INT 0
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 1
57429: PUSH
57430: LD_INT 1
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: LD_INT 1
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 1
57449: NEG
57450: PUSH
57451: LD_INT 0
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 1
57460: NEG
57461: PUSH
57462: LD_INT 1
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 1
57472: NEG
57473: PUSH
57474: LD_INT 2
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 1
57484: PUSH
57485: LD_INT 2
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57503: LD_ADDR_VAR 0 40
57507: PUSH
57508: LD_INT 0
57510: PUSH
57511: LD_INT 0
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: LD_INT 1
57523: NEG
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 1
57531: PUSH
57532: LD_INT 0
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 1
57541: PUSH
57542: LD_INT 1
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 0
57551: PUSH
57552: LD_INT 1
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 1
57561: NEG
57562: PUSH
57563: LD_INT 0
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 1
57572: NEG
57573: PUSH
57574: LD_INT 1
57576: NEG
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: LD_INT 1
57587: NEG
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 1
57595: NEG
57596: PUSH
57597: LD_INT 1
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57615: LD_ADDR_VAR 0 41
57619: PUSH
57620: LD_INT 0
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 0
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 1
57643: PUSH
57644: LD_INT 0
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 1
57653: PUSH
57654: LD_INT 1
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 0
57663: PUSH
57664: LD_INT 1
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 1
57673: NEG
57674: PUSH
57675: LD_INT 0
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 1
57684: NEG
57685: PUSH
57686: LD_INT 1
57688: NEG
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 1
57696: NEG
57697: PUSH
57698: LD_INT 2
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 1
57708: PUSH
57709: LD_INT 1
57711: NEG
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 2
57719: PUSH
57720: LD_INT 0
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 2
57729: PUSH
57730: LD_INT 1
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 2
57739: PUSH
57740: LD_INT 2
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: PUSH
57750: LD_INT 2
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 1
57759: NEG
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 2
57770: NEG
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 2
57781: NEG
57782: PUSH
57783: LD_INT 1
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 2
57793: NEG
57794: PUSH
57795: LD_INT 2
57797: NEG
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 2
57805: NEG
57806: PUSH
57807: LD_INT 3
57809: NEG
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 2
57817: PUSH
57818: LD_INT 1
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 3
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 3
57838: PUSH
57839: LD_INT 1
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 3
57848: PUSH
57849: LD_INT 2
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 3
57858: PUSH
57859: LD_INT 3
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 2
57868: PUSH
57869: LD_INT 3
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 2
57878: NEG
57879: PUSH
57880: LD_INT 1
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 3
57889: NEG
57890: PUSH
57891: LD_INT 0
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 3
57900: NEG
57901: PUSH
57902: LD_INT 1
57904: NEG
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 3
57912: NEG
57913: PUSH
57914: LD_INT 2
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 3
57924: NEG
57925: PUSH
57926: LD_INT 3
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57965: LD_ADDR_VAR 0 42
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: LD_INT 1
57985: NEG
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 1
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 1
58003: PUSH
58004: LD_INT 1
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 0
58013: PUSH
58014: LD_INT 1
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 1
58023: NEG
58024: PUSH
58025: LD_INT 0
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 1
58034: NEG
58035: PUSH
58036: LD_INT 1
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 1
58046: NEG
58047: PUSH
58048: LD_INT 2
58050: NEG
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 0
58058: PUSH
58059: LD_INT 2
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 1
58069: PUSH
58070: LD_INT 1
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 2
58080: PUSH
58081: LD_INT 1
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 2
58090: PUSH
58091: LD_INT 2
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 1
58100: PUSH
58101: LD_INT 2
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 0
58110: PUSH
58111: LD_INT 2
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 1
58120: NEG
58121: PUSH
58122: LD_INT 1
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 2
58131: NEG
58132: PUSH
58133: LD_INT 1
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 2
58143: NEG
58144: PUSH
58145: LD_INT 2
58147: NEG
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 2
58155: NEG
58156: PUSH
58157: LD_INT 3
58159: NEG
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 1
58167: NEG
58168: PUSH
58169: LD_INT 3
58171: NEG
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: LD_INT 3
58182: NEG
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: PUSH
58191: LD_INT 2
58193: NEG
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 3
58201: PUSH
58202: LD_INT 2
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 3
58211: PUSH
58212: LD_INT 3
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 2
58221: PUSH
58222: LD_INT 3
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 1
58231: PUSH
58232: LD_INT 3
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 0
58241: PUSH
58242: LD_INT 3
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 1
58251: NEG
58252: PUSH
58253: LD_INT 2
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 3
58262: NEG
58263: PUSH
58264: LD_INT 2
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 3
58274: NEG
58275: PUSH
58276: LD_INT 3
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58315: LD_ADDR_VAR 0 43
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 0
58332: PUSH
58333: LD_INT 1
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 1
58343: PUSH
58344: LD_INT 0
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: LD_INT 1
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 1
58373: NEG
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 1
58384: NEG
58385: PUSH
58386: LD_INT 1
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: LD_INT 2
58400: NEG
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 0
58408: PUSH
58409: LD_INT 2
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 1
58419: PUSH
58420: LD_INT 1
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 2
58430: PUSH
58431: LD_INT 0
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 2
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 1
58450: PUSH
58451: LD_INT 2
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: LD_INT 2
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 1
58470: NEG
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 2
58481: NEG
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 2
58492: NEG
58493: PUSH
58494: LD_INT 1
58496: NEG
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: NEG
58505: PUSH
58506: LD_INT 3
58508: NEG
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 0
58516: PUSH
58517: LD_INT 3
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 1
58527: PUSH
58528: LD_INT 2
58530: NEG
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 2
58538: PUSH
58539: LD_INT 1
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 3
58549: PUSH
58550: LD_INT 0
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 3
58559: PUSH
58560: LD_INT 1
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: LD_INT 3
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 0
58579: PUSH
58580: LD_INT 3
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 1
58589: NEG
58590: PUSH
58591: LD_INT 2
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 2
58600: NEG
58601: PUSH
58602: LD_INT 1
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 3
58611: NEG
58612: PUSH
58613: LD_INT 0
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 3
58622: NEG
58623: PUSH
58624: LD_INT 1
58626: NEG
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58663: LD_ADDR_VAR 0 44
58667: PUSH
58668: LD_INT 0
58670: PUSH
58671: LD_INT 0
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 0
58680: PUSH
58681: LD_INT 1
58683: NEG
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 1
58691: PUSH
58692: LD_INT 0
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 1
58701: PUSH
58702: LD_INT 1
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: LD_INT 1
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 1
58721: NEG
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 1
58744: NEG
58745: PUSH
58746: LD_INT 2
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 1
58756: PUSH
58757: LD_INT 1
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 2
58767: PUSH
58768: LD_INT 0
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 2
58777: PUSH
58778: LD_INT 1
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 2
58787: PUSH
58788: LD_INT 2
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 1
58797: PUSH
58798: LD_INT 2
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 1
58807: NEG
58808: PUSH
58809: LD_INT 1
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 2
58818: NEG
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 2
58829: NEG
58830: PUSH
58831: LD_INT 1
58833: NEG
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 2
58841: NEG
58842: PUSH
58843: LD_INT 2
58845: NEG
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 2
58853: NEG
58854: PUSH
58855: LD_INT 3
58857: NEG
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 2
58865: PUSH
58866: LD_INT 1
58868: NEG
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 3
58876: PUSH
58877: LD_INT 0
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 3
58886: PUSH
58887: LD_INT 1
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 3
58896: PUSH
58897: LD_INT 2
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 3
58906: PUSH
58907: LD_INT 3
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 2
58916: PUSH
58917: LD_INT 3
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 2
58926: NEG
58927: PUSH
58928: LD_INT 1
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 3
58937: NEG
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 3
58948: NEG
58949: PUSH
58950: LD_INT 1
58952: NEG
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 3
58960: NEG
58961: PUSH
58962: LD_INT 2
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 3
58972: NEG
58973: PUSH
58974: LD_INT 3
58976: NEG
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59013: LD_ADDR_VAR 0 45
59017: PUSH
59018: LD_INT 0
59020: PUSH
59021: LD_INT 0
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 0
59030: PUSH
59031: LD_INT 1
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 1
59041: PUSH
59042: LD_INT 0
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 1
59051: PUSH
59052: LD_INT 1
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 0
59061: PUSH
59062: LD_INT 1
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 1
59071: NEG
59072: PUSH
59073: LD_INT 0
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 1
59082: NEG
59083: PUSH
59084: LD_INT 1
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: NEG
59095: PUSH
59096: LD_INT 2
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 0
59106: PUSH
59107: LD_INT 2
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 1
59117: PUSH
59118: LD_INT 1
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 2
59128: PUSH
59129: LD_INT 1
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 2
59138: PUSH
59139: LD_INT 2
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 1
59148: PUSH
59149: LD_INT 2
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 0
59158: PUSH
59159: LD_INT 2
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 1
59168: NEG
59169: PUSH
59170: LD_INT 1
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 2
59179: NEG
59180: PUSH
59181: LD_INT 1
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 2
59191: NEG
59192: PUSH
59193: LD_INT 2
59195: NEG
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 2
59203: NEG
59204: PUSH
59205: LD_INT 3
59207: NEG
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 1
59215: NEG
59216: PUSH
59217: LD_INT 3
59219: NEG
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 0
59227: PUSH
59228: LD_INT 3
59230: NEG
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 1
59238: PUSH
59239: LD_INT 2
59241: NEG
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 3
59249: PUSH
59250: LD_INT 2
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 3
59259: PUSH
59260: LD_INT 3
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 2
59269: PUSH
59270: LD_INT 3
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 1
59279: PUSH
59280: LD_INT 3
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 0
59289: PUSH
59290: LD_INT 3
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 1
59299: NEG
59300: PUSH
59301: LD_INT 2
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 3
59310: NEG
59311: PUSH
59312: LD_INT 2
59314: NEG
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 3
59322: NEG
59323: PUSH
59324: LD_INT 3
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59363: LD_ADDR_VAR 0 46
59367: PUSH
59368: LD_INT 0
59370: PUSH
59371: LD_INT 0
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 0
59380: PUSH
59381: LD_INT 1
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 1
59391: PUSH
59392: LD_INT 0
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 1
59401: PUSH
59402: LD_INT 1
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 0
59411: PUSH
59412: LD_INT 1
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 1
59421: NEG
59422: PUSH
59423: LD_INT 0
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 1
59432: NEG
59433: PUSH
59434: LD_INT 1
59436: NEG
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 1
59444: NEG
59445: PUSH
59446: LD_INT 2
59448: NEG
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 0
59456: PUSH
59457: LD_INT 2
59459: NEG
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 1
59467: PUSH
59468: LD_INT 1
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 2
59478: PUSH
59479: LD_INT 0
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 2
59488: PUSH
59489: LD_INT 1
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 1
59498: PUSH
59499: LD_INT 2
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 0
59508: PUSH
59509: LD_INT 2
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: NEG
59519: PUSH
59520: LD_INT 1
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 2
59529: NEG
59530: PUSH
59531: LD_INT 0
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 2
59540: NEG
59541: PUSH
59542: LD_INT 1
59544: NEG
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 1
59552: NEG
59553: PUSH
59554: LD_INT 3
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 0
59564: PUSH
59565: LD_INT 3
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 1
59575: PUSH
59576: LD_INT 2
59578: NEG
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 2
59586: PUSH
59587: LD_INT 1
59589: NEG
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 3
59597: PUSH
59598: LD_INT 0
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 3
59607: PUSH
59608: LD_INT 1
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 1
59617: PUSH
59618: LD_INT 3
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 0
59627: PUSH
59628: LD_INT 3
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 1
59637: NEG
59638: PUSH
59639: LD_INT 2
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 2
59648: NEG
59649: PUSH
59650: LD_INT 1
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 3
59659: NEG
59660: PUSH
59661: LD_INT 0
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 3
59670: NEG
59671: PUSH
59672: LD_INT 1
59674: NEG
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59711: LD_ADDR_VAR 0 47
59715: PUSH
59716: LD_INT 0
59718: PUSH
59719: LD_INT 0
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 0
59728: PUSH
59729: LD_INT 1
59731: NEG
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 1
59739: PUSH
59740: LD_INT 0
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 1
59749: PUSH
59750: LD_INT 1
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 0
59759: PUSH
59760: LD_INT 1
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 1
59769: NEG
59770: PUSH
59771: LD_INT 0
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 1
59780: NEG
59781: PUSH
59782: LD_INT 1
59784: NEG
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 1
59792: NEG
59793: PUSH
59794: LD_INT 2
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 0
59804: PUSH
59805: LD_INT 2
59807: NEG
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 1
59815: PUSH
59816: LD_INT 1
59818: NEG
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 2
59826: NEG
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 2
59838: NEG
59839: PUSH
59840: LD_INT 2
59842: NEG
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59862: LD_ADDR_VAR 0 48
59866: PUSH
59867: LD_INT 0
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 0
59879: PUSH
59880: LD_INT 1
59882: NEG
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 1
59890: PUSH
59891: LD_INT 0
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 1
59900: PUSH
59901: LD_INT 1
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 0
59910: PUSH
59911: LD_INT 1
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 1
59920: NEG
59921: PUSH
59922: LD_INT 0
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 1
59931: NEG
59932: PUSH
59933: LD_INT 1
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 1
59943: NEG
59944: PUSH
59945: LD_INT 2
59947: NEG
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 0
59955: PUSH
59956: LD_INT 2
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 1
59966: PUSH
59967: LD_INT 1
59969: NEG
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 2
59977: PUSH
59978: LD_INT 0
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 2
59987: PUSH
59988: LD_INT 1
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60009: LD_ADDR_VAR 0 49
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 0
60026: PUSH
60027: LD_INT 1
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 1
60037: PUSH
60038: LD_INT 0
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 1
60047: PUSH
60048: LD_INT 1
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 0
60057: PUSH
60058: LD_INT 1
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 1
60067: NEG
60068: PUSH
60069: LD_INT 0
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 1
60078: NEG
60079: PUSH
60080: LD_INT 1
60082: NEG
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 1
60090: PUSH
60091: LD_INT 1
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 2
60101: PUSH
60102: LD_INT 0
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 2
60111: PUSH
60112: LD_INT 1
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 2
60121: PUSH
60122: LD_INT 2
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 1
60131: PUSH
60132: LD_INT 2
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60153: LD_ADDR_VAR 0 50
60157: PUSH
60158: LD_INT 0
60160: PUSH
60161: LD_INT 0
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 0
60170: PUSH
60171: LD_INT 1
60173: NEG
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 1
60181: PUSH
60182: LD_INT 0
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 1
60191: PUSH
60192: LD_INT 1
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 0
60201: PUSH
60202: LD_INT 1
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 1
60211: NEG
60212: PUSH
60213: LD_INT 0
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 1
60222: NEG
60223: PUSH
60224: LD_INT 1
60226: NEG
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 2
60234: PUSH
60235: LD_INT 1
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 2
60244: PUSH
60245: LD_INT 2
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 1
60254: PUSH
60255: LD_INT 2
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: LD_INT 2
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 1
60274: NEG
60275: PUSH
60276: LD_INT 1
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60297: LD_ADDR_VAR 0 51
60301: PUSH
60302: LD_INT 0
60304: PUSH
60305: LD_INT 0
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 0
60314: PUSH
60315: LD_INT 1
60317: NEG
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 1
60325: PUSH
60326: LD_INT 0
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 1
60335: PUSH
60336: LD_INT 1
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: LD_INT 1
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 1
60355: NEG
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 1
60366: NEG
60367: PUSH
60368: LD_INT 1
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: PUSH
60379: LD_INT 2
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: LD_INT 2
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 1
60398: NEG
60399: PUSH
60400: LD_INT 1
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 2
60409: NEG
60410: PUSH
60411: LD_INT 0
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 2
60420: NEG
60421: PUSH
60422: LD_INT 1
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60444: LD_ADDR_VAR 0 52
60448: PUSH
60449: LD_INT 0
60451: PUSH
60452: LD_INT 0
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 0
60461: PUSH
60462: LD_INT 1
60464: NEG
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 1
60472: PUSH
60473: LD_INT 0
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 1
60482: PUSH
60483: LD_INT 1
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 0
60492: PUSH
60493: LD_INT 1
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 1
60502: NEG
60503: PUSH
60504: LD_INT 0
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 1
60513: NEG
60514: PUSH
60515: LD_INT 1
60517: NEG
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 1
60525: NEG
60526: PUSH
60527: LD_INT 2
60529: NEG
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 1
60537: NEG
60538: PUSH
60539: LD_INT 1
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 2
60548: NEG
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 2
60559: NEG
60560: PUSH
60561: LD_INT 1
60563: NEG
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 2
60571: NEG
60572: PUSH
60573: LD_INT 2
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60595: LD_ADDR_VAR 0 53
60599: PUSH
60600: LD_INT 0
60602: PUSH
60603: LD_INT 0
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: LD_INT 1
60615: NEG
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 1
60623: PUSH
60624: LD_INT 0
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 1
60633: PUSH
60634: LD_INT 1
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 0
60643: PUSH
60644: LD_INT 1
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 1
60653: NEG
60654: PUSH
60655: LD_INT 0
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 1
60664: NEG
60665: PUSH
60666: LD_INT 1
60668: NEG
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 1
60676: NEG
60677: PUSH
60678: LD_INT 2
60680: NEG
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 0
60688: PUSH
60689: LD_INT 2
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 1
60699: PUSH
60700: LD_INT 1
60702: NEG
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 2
60710: PUSH
60711: LD_INT 0
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 2
60720: PUSH
60721: LD_INT 1
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 2
60730: PUSH
60731: LD_INT 2
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 1
60740: PUSH
60741: LD_INT 2
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 0
60750: PUSH
60751: LD_INT 2
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 1
60760: NEG
60761: PUSH
60762: LD_INT 1
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 2
60771: NEG
60772: PUSH
60773: LD_INT 0
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 2
60782: NEG
60783: PUSH
60784: LD_INT 1
60786: NEG
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 2
60794: NEG
60795: PUSH
60796: LD_INT 2
60798: NEG
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60825: LD_ADDR_VAR 0 54
60829: PUSH
60830: LD_INT 0
60832: PUSH
60833: LD_INT 0
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 0
60842: PUSH
60843: LD_INT 1
60845: NEG
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 1
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 1
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 0
60873: PUSH
60874: LD_INT 1
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 1
60883: NEG
60884: PUSH
60885: LD_INT 0
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 1
60894: NEG
60895: PUSH
60896: LD_INT 1
60898: NEG
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 1
60906: NEG
60907: PUSH
60908: LD_INT 2
60910: NEG
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 0
60918: PUSH
60919: LD_INT 2
60921: NEG
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 1
60929: PUSH
60930: LD_INT 1
60932: NEG
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 2
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 2
60950: PUSH
60951: LD_INT 1
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 2
60960: PUSH
60961: LD_INT 2
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 1
60970: PUSH
60971: LD_INT 2
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 0
60980: PUSH
60981: LD_INT 2
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 1
60990: NEG
60991: PUSH
60992: LD_INT 1
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 2
61001: NEG
61002: PUSH
61003: LD_INT 0
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 2
61012: NEG
61013: PUSH
61014: LD_INT 1
61016: NEG
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 2
61024: NEG
61025: PUSH
61026: LD_INT 2
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61055: LD_ADDR_VAR 0 55
61059: PUSH
61060: LD_INT 0
61062: PUSH
61063: LD_INT 0
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 0
61072: PUSH
61073: LD_INT 1
61075: NEG
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 1
61083: PUSH
61084: LD_INT 0
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 1
61093: PUSH
61094: LD_INT 1
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 0
61103: PUSH
61104: LD_INT 1
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 1
61113: NEG
61114: PUSH
61115: LD_INT 0
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 1
61124: NEG
61125: PUSH
61126: LD_INT 1
61128: NEG
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 1
61136: NEG
61137: PUSH
61138: LD_INT 2
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 0
61148: PUSH
61149: LD_INT 2
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: PUSH
61160: LD_INT 1
61162: NEG
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 2
61170: PUSH
61171: LD_INT 0
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 2
61180: PUSH
61181: LD_INT 1
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 2
61190: PUSH
61191: LD_INT 2
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 1
61200: PUSH
61201: LD_INT 2
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 0
61210: PUSH
61211: LD_INT 2
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 1
61220: NEG
61221: PUSH
61222: LD_INT 1
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 2
61231: NEG
61232: PUSH
61233: LD_INT 0
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 2
61242: NEG
61243: PUSH
61244: LD_INT 1
61246: NEG
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 2
61254: NEG
61255: PUSH
61256: LD_INT 2
61258: NEG
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61285: LD_ADDR_VAR 0 56
61289: PUSH
61290: LD_INT 0
61292: PUSH
61293: LD_INT 0
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 1
61313: PUSH
61314: LD_INT 0
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 1
61323: PUSH
61324: LD_INT 1
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 1
61343: NEG
61344: PUSH
61345: LD_INT 0
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 1
61354: NEG
61355: PUSH
61356: LD_INT 1
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 1
61366: NEG
61367: PUSH
61368: LD_INT 2
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 0
61378: PUSH
61379: LD_INT 2
61381: NEG
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 1
61389: PUSH
61390: LD_INT 1
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 2
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 2
61410: PUSH
61411: LD_INT 1
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 2
61420: PUSH
61421: LD_INT 2
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 1
61430: PUSH
61431: LD_INT 2
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 0
61440: PUSH
61441: LD_INT 2
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 1
61450: NEG
61451: PUSH
61452: LD_INT 1
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 2
61461: NEG
61462: PUSH
61463: LD_INT 0
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 2
61472: NEG
61473: PUSH
61474: LD_INT 1
61476: NEG
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 2
61484: NEG
61485: PUSH
61486: LD_INT 2
61488: NEG
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61515: LD_ADDR_VAR 0 57
61519: PUSH
61520: LD_INT 0
61522: PUSH
61523: LD_INT 0
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 0
61532: PUSH
61533: LD_INT 1
61535: NEG
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 1
61543: PUSH
61544: LD_INT 0
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 1
61553: PUSH
61554: LD_INT 1
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 0
61563: PUSH
61564: LD_INT 1
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 1
61573: NEG
61574: PUSH
61575: LD_INT 0
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 1
61584: NEG
61585: PUSH
61586: LD_INT 1
61588: NEG
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: LD_INT 2
61600: NEG
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: LD_INT 2
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 1
61619: PUSH
61620: LD_INT 1
61622: NEG
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 2
61630: PUSH
61631: LD_INT 0
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 2
61640: PUSH
61641: LD_INT 1
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 2
61650: PUSH
61651: LD_INT 2
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 1
61660: PUSH
61661: LD_INT 2
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 0
61670: PUSH
61671: LD_INT 2
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 1
61680: NEG
61681: PUSH
61682: LD_INT 1
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 2
61691: NEG
61692: PUSH
61693: LD_INT 0
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 2
61702: NEG
61703: PUSH
61704: LD_INT 1
61706: NEG
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 2
61714: NEG
61715: PUSH
61716: LD_INT 2
61718: NEG
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61745: LD_ADDR_VAR 0 58
61749: PUSH
61750: LD_INT 0
61752: PUSH
61753: LD_INT 0
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 0
61762: PUSH
61763: LD_INT 1
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 1
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 1
61783: PUSH
61784: LD_INT 1
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 0
61793: PUSH
61794: LD_INT 1
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 1
61803: NEG
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 1
61814: NEG
61815: PUSH
61816: LD_INT 1
61818: NEG
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 1
61826: NEG
61827: PUSH
61828: LD_INT 2
61830: NEG
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: LD_INT 2
61841: NEG
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 1
61849: PUSH
61850: LD_INT 1
61852: NEG
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 2
61860: PUSH
61861: LD_INT 0
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 2
61870: PUSH
61871: LD_INT 1
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 2
61880: PUSH
61881: LD_INT 2
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 1
61890: PUSH
61891: LD_INT 2
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 0
61900: PUSH
61901: LD_INT 2
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 1
61910: NEG
61911: PUSH
61912: LD_INT 1
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 2
61921: NEG
61922: PUSH
61923: LD_INT 0
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 2
61932: NEG
61933: PUSH
61934: LD_INT 1
61936: NEG
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 2
61944: NEG
61945: PUSH
61946: LD_INT 2
61948: NEG
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61975: LD_ADDR_VAR 0 59
61979: PUSH
61980: LD_INT 0
61982: PUSH
61983: LD_INT 0
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 0
61992: PUSH
61993: LD_INT 1
61995: NEG
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 1
62003: PUSH
62004: LD_INT 0
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 1
62013: PUSH
62014: LD_INT 1
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 0
62023: PUSH
62024: LD_INT 1
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 1
62033: NEG
62034: PUSH
62035: LD_INT 0
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 1
62044: NEG
62045: PUSH
62046: LD_INT 1
62048: NEG
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62063: LD_ADDR_VAR 0 60
62067: PUSH
62068: LD_INT 0
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 0
62080: PUSH
62081: LD_INT 1
62083: NEG
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 1
62091: PUSH
62092: LD_INT 0
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 1
62101: PUSH
62102: LD_INT 1
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 0
62111: PUSH
62112: LD_INT 1
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 1
62121: NEG
62122: PUSH
62123: LD_INT 0
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 1
62132: NEG
62133: PUSH
62134: LD_INT 1
62136: NEG
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62151: LD_ADDR_VAR 0 61
62155: PUSH
62156: LD_INT 0
62158: PUSH
62159: LD_INT 0
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 0
62168: PUSH
62169: LD_INT 1
62171: NEG
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 1
62179: PUSH
62180: LD_INT 0
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 1
62189: PUSH
62190: LD_INT 1
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 0
62199: PUSH
62200: LD_INT 1
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 1
62209: NEG
62210: PUSH
62211: LD_INT 0
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 1
62220: NEG
62221: PUSH
62222: LD_INT 1
62224: NEG
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62239: LD_ADDR_VAR 0 62
62243: PUSH
62244: LD_INT 0
62246: PUSH
62247: LD_INT 0
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 0
62256: PUSH
62257: LD_INT 1
62259: NEG
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 1
62267: PUSH
62268: LD_INT 0
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 1
62277: PUSH
62278: LD_INT 1
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: LD_INT 1
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 1
62297: NEG
62298: PUSH
62299: LD_INT 0
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 1
62308: NEG
62309: PUSH
62310: LD_INT 1
62312: NEG
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62327: LD_ADDR_VAR 0 63
62331: PUSH
62332: LD_INT 0
62334: PUSH
62335: LD_INT 0
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 0
62344: PUSH
62345: LD_INT 1
62347: NEG
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 1
62355: PUSH
62356: LD_INT 0
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 1
62365: PUSH
62366: LD_INT 1
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 0
62375: PUSH
62376: LD_INT 1
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 1
62385: NEG
62386: PUSH
62387: LD_INT 0
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 1
62396: NEG
62397: PUSH
62398: LD_INT 1
62400: NEG
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62415: LD_ADDR_VAR 0 64
62419: PUSH
62420: LD_INT 0
62422: PUSH
62423: LD_INT 0
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 0
62432: PUSH
62433: LD_INT 1
62435: NEG
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 1
62443: PUSH
62444: LD_INT 0
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 1
62453: PUSH
62454: LD_INT 1
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 0
62463: PUSH
62464: LD_INT 1
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: LD_INT 1
62473: NEG
62474: PUSH
62475: LD_INT 0
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 1
62484: NEG
62485: PUSH
62486: LD_INT 1
62488: NEG
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: ST_TO_ADDR
// end ; 1 :
62503: GO 68400
62505: LD_INT 1
62507: DOUBLE
62508: EQUAL
62509: IFTRUE 62513
62511: GO 65136
62513: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62514: LD_ADDR_VAR 0 11
62518: PUSH
62519: LD_INT 1
62521: NEG
62522: PUSH
62523: LD_INT 3
62525: NEG
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 0
62533: PUSH
62534: LD_INT 3
62536: NEG
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 1
62544: PUSH
62545: LD_INT 2
62547: NEG
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: LIST
62557: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62558: LD_ADDR_VAR 0 12
62562: PUSH
62563: LD_INT 2
62565: PUSH
62566: LD_INT 1
62568: NEG
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 3
62576: PUSH
62577: LD_INT 0
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 3
62586: PUSH
62587: LD_INT 1
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: LIST
62598: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62599: LD_ADDR_VAR 0 13
62603: PUSH
62604: LD_INT 3
62606: PUSH
62607: LD_INT 2
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 3
62616: PUSH
62617: LD_INT 3
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 2
62626: PUSH
62627: LD_INT 3
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: LIST
62638: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62639: LD_ADDR_VAR 0 14
62643: PUSH
62644: LD_INT 1
62646: PUSH
62647: LD_INT 3
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: LD_INT 3
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 1
62666: NEG
62667: PUSH
62668: LD_INT 2
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: LIST
62679: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62680: LD_ADDR_VAR 0 15
62684: PUSH
62685: LD_INT 2
62687: NEG
62688: PUSH
62689: LD_INT 1
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 3
62698: NEG
62699: PUSH
62700: LD_INT 0
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 3
62709: NEG
62710: PUSH
62711: LD_INT 1
62713: NEG
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: LIST
62723: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62724: LD_ADDR_VAR 0 16
62728: PUSH
62729: LD_INT 2
62731: NEG
62732: PUSH
62733: LD_INT 3
62735: NEG
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 3
62743: NEG
62744: PUSH
62745: LD_INT 2
62747: NEG
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 3
62755: NEG
62756: PUSH
62757: LD_INT 3
62759: NEG
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: LIST
62769: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62770: LD_ADDR_VAR 0 17
62774: PUSH
62775: LD_INT 1
62777: NEG
62778: PUSH
62779: LD_INT 3
62781: NEG
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 0
62789: PUSH
62790: LD_INT 3
62792: NEG
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 1
62800: PUSH
62801: LD_INT 2
62803: NEG
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: LIST
62813: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62814: LD_ADDR_VAR 0 18
62818: PUSH
62819: LD_INT 2
62821: PUSH
62822: LD_INT 1
62824: NEG
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 3
62832: PUSH
62833: LD_INT 0
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 3
62842: PUSH
62843: LD_INT 1
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: LIST
62854: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62855: LD_ADDR_VAR 0 19
62859: PUSH
62860: LD_INT 3
62862: PUSH
62863: LD_INT 2
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 3
62872: PUSH
62873: LD_INT 3
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 2
62882: PUSH
62883: LD_INT 3
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: LIST
62894: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62895: LD_ADDR_VAR 0 20
62899: PUSH
62900: LD_INT 1
62902: PUSH
62903: LD_INT 3
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 0
62912: PUSH
62913: LD_INT 3
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 1
62922: NEG
62923: PUSH
62924: LD_INT 2
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: LIST
62935: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62936: LD_ADDR_VAR 0 21
62940: PUSH
62941: LD_INT 2
62943: NEG
62944: PUSH
62945: LD_INT 1
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 3
62954: NEG
62955: PUSH
62956: LD_INT 0
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 3
62965: NEG
62966: PUSH
62967: LD_INT 1
62969: NEG
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: LIST
62979: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62980: LD_ADDR_VAR 0 22
62984: PUSH
62985: LD_INT 2
62987: NEG
62988: PUSH
62989: LD_INT 3
62991: NEG
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 3
62999: NEG
63000: PUSH
63001: LD_INT 2
63003: NEG
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 3
63011: NEG
63012: PUSH
63013: LD_INT 3
63015: NEG
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: LIST
63025: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63026: LD_ADDR_VAR 0 23
63030: PUSH
63031: LD_INT 0
63033: PUSH
63034: LD_INT 3
63036: NEG
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 1
63044: NEG
63045: PUSH
63046: LD_INT 4
63048: NEG
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 1
63056: PUSH
63057: LD_INT 3
63059: NEG
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: LIST
63069: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63070: LD_ADDR_VAR 0 24
63074: PUSH
63075: LD_INT 3
63077: PUSH
63078: LD_INT 0
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 3
63087: PUSH
63088: LD_INT 1
63090: NEG
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 4
63098: PUSH
63099: LD_INT 1
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: LIST
63110: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63111: LD_ADDR_VAR 0 25
63115: PUSH
63116: LD_INT 3
63118: PUSH
63119: LD_INT 3
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 4
63128: PUSH
63129: LD_INT 3
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 3
63138: PUSH
63139: LD_INT 4
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: LIST
63150: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63151: LD_ADDR_VAR 0 26
63155: PUSH
63156: LD_INT 0
63158: PUSH
63159: LD_INT 3
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 1
63168: PUSH
63169: LD_INT 4
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 1
63178: NEG
63179: PUSH
63180: LD_INT 3
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: LIST
63191: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63192: LD_ADDR_VAR 0 27
63196: PUSH
63197: LD_INT 3
63199: NEG
63200: PUSH
63201: LD_INT 0
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 3
63210: NEG
63211: PUSH
63212: LD_INT 1
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 4
63221: NEG
63222: PUSH
63223: LD_INT 1
63225: NEG
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: LIST
63235: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63236: LD_ADDR_VAR 0 28
63240: PUSH
63241: LD_INT 3
63243: NEG
63244: PUSH
63245: LD_INT 3
63247: NEG
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 3
63255: NEG
63256: PUSH
63257: LD_INT 4
63259: NEG
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 4
63267: NEG
63268: PUSH
63269: LD_INT 3
63271: NEG
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: LIST
63281: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63282: LD_ADDR_VAR 0 29
63286: PUSH
63287: LD_INT 1
63289: NEG
63290: PUSH
63291: LD_INT 3
63293: NEG
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 0
63301: PUSH
63302: LD_INT 3
63304: NEG
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 1
63312: PUSH
63313: LD_INT 2
63315: NEG
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 1
63323: NEG
63324: PUSH
63325: LD_INT 4
63327: NEG
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 0
63335: PUSH
63336: LD_INT 4
63338: NEG
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 1
63346: PUSH
63347: LD_INT 3
63349: NEG
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 1
63357: NEG
63358: PUSH
63359: LD_INT 5
63361: NEG
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 0
63369: PUSH
63370: LD_INT 5
63372: NEG
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 1
63380: PUSH
63381: LD_INT 4
63383: NEG
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 1
63391: NEG
63392: PUSH
63393: LD_INT 6
63395: NEG
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 0
63403: PUSH
63404: LD_INT 6
63406: NEG
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 1
63414: PUSH
63415: LD_INT 5
63417: NEG
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63437: LD_ADDR_VAR 0 30
63441: PUSH
63442: LD_INT 2
63444: PUSH
63445: LD_INT 1
63447: NEG
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 3
63455: PUSH
63456: LD_INT 0
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 3
63465: PUSH
63466: LD_INT 1
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 3
63475: PUSH
63476: LD_INT 1
63478: NEG
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 4
63486: PUSH
63487: LD_INT 0
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 4
63496: PUSH
63497: LD_INT 1
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 4
63506: PUSH
63507: LD_INT 1
63509: NEG
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 5
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 5
63527: PUSH
63528: LD_INT 1
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 5
63537: PUSH
63538: LD_INT 1
63540: NEG
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 6
63548: PUSH
63549: LD_INT 0
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 6
63558: PUSH
63559: LD_INT 1
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63580: LD_ADDR_VAR 0 31
63584: PUSH
63585: LD_INT 3
63587: PUSH
63588: LD_INT 2
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 3
63597: PUSH
63598: LD_INT 3
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 2
63607: PUSH
63608: LD_INT 3
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 4
63617: PUSH
63618: LD_INT 3
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 4
63627: PUSH
63628: LD_INT 4
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 3
63637: PUSH
63638: LD_INT 4
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 5
63647: PUSH
63648: LD_INT 4
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 5
63657: PUSH
63658: LD_INT 5
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 4
63667: PUSH
63668: LD_INT 5
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 6
63677: PUSH
63678: LD_INT 5
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 6
63687: PUSH
63688: LD_INT 6
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 5
63697: PUSH
63698: LD_INT 6
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63719: LD_ADDR_VAR 0 32
63723: PUSH
63724: LD_INT 1
63726: PUSH
63727: LD_INT 3
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 0
63736: PUSH
63737: LD_INT 3
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 1
63746: NEG
63747: PUSH
63748: LD_INT 2
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 1
63757: PUSH
63758: LD_INT 4
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 0
63767: PUSH
63768: LD_INT 4
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 1
63777: NEG
63778: PUSH
63779: LD_INT 3
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 1
63788: PUSH
63789: LD_INT 5
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 0
63798: PUSH
63799: LD_INT 5
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 1
63808: NEG
63809: PUSH
63810: LD_INT 4
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 1
63819: PUSH
63820: LD_INT 6
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 0
63829: PUSH
63830: LD_INT 6
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 1
63839: NEG
63840: PUSH
63841: LD_INT 5
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63862: LD_ADDR_VAR 0 33
63866: PUSH
63867: LD_INT 2
63869: NEG
63870: PUSH
63871: LD_INT 1
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 3
63880: NEG
63881: PUSH
63882: LD_INT 0
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 3
63891: NEG
63892: PUSH
63893: LD_INT 1
63895: NEG
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 3
63903: NEG
63904: PUSH
63905: LD_INT 1
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 4
63914: NEG
63915: PUSH
63916: LD_INT 0
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 4
63925: NEG
63926: PUSH
63927: LD_INT 1
63929: NEG
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 4
63937: NEG
63938: PUSH
63939: LD_INT 1
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 5
63948: NEG
63949: PUSH
63950: LD_INT 0
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 5
63959: NEG
63960: PUSH
63961: LD_INT 1
63963: NEG
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 5
63971: NEG
63972: PUSH
63973: LD_INT 1
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 6
63982: NEG
63983: PUSH
63984: LD_INT 0
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 6
63993: NEG
63994: PUSH
63995: LD_INT 1
63997: NEG
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64017: LD_ADDR_VAR 0 34
64021: PUSH
64022: LD_INT 2
64024: NEG
64025: PUSH
64026: LD_INT 3
64028: NEG
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 3
64036: NEG
64037: PUSH
64038: LD_INT 2
64040: NEG
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 3
64048: NEG
64049: PUSH
64050: LD_INT 3
64052: NEG
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 3
64060: NEG
64061: PUSH
64062: LD_INT 4
64064: NEG
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 4
64072: NEG
64073: PUSH
64074: LD_INT 3
64076: NEG
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 4
64084: NEG
64085: PUSH
64086: LD_INT 4
64088: NEG
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 4
64096: NEG
64097: PUSH
64098: LD_INT 5
64100: NEG
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 5
64108: NEG
64109: PUSH
64110: LD_INT 4
64112: NEG
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 5
64120: NEG
64121: PUSH
64122: LD_INT 5
64124: NEG
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 5
64132: NEG
64133: PUSH
64134: LD_INT 6
64136: NEG
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 6
64144: NEG
64145: PUSH
64146: LD_INT 5
64148: NEG
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 6
64156: NEG
64157: PUSH
64158: LD_INT 6
64160: NEG
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64180: LD_ADDR_VAR 0 41
64184: PUSH
64185: LD_INT 0
64187: PUSH
64188: LD_INT 2
64190: NEG
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 1
64198: NEG
64199: PUSH
64200: LD_INT 3
64202: NEG
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 1
64210: PUSH
64211: LD_INT 2
64213: NEG
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: LIST
64223: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64224: LD_ADDR_VAR 0 42
64228: PUSH
64229: LD_INT 2
64231: PUSH
64232: LD_INT 0
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 2
64241: PUSH
64242: LD_INT 1
64244: NEG
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 3
64252: PUSH
64253: LD_INT 1
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: LIST
64264: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64265: LD_ADDR_VAR 0 43
64269: PUSH
64270: LD_INT 2
64272: PUSH
64273: LD_INT 2
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 3
64282: PUSH
64283: LD_INT 2
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 2
64292: PUSH
64293: LD_INT 3
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: LIST
64304: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64305: LD_ADDR_VAR 0 44
64309: PUSH
64310: LD_INT 0
64312: PUSH
64313: LD_INT 2
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 1
64322: PUSH
64323: LD_INT 3
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 1
64332: NEG
64333: PUSH
64334: LD_INT 2
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: LIST
64345: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64346: LD_ADDR_VAR 0 45
64350: PUSH
64351: LD_INT 2
64353: NEG
64354: PUSH
64355: LD_INT 0
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 2
64364: NEG
64365: PUSH
64366: LD_INT 1
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 3
64375: NEG
64376: PUSH
64377: LD_INT 1
64379: NEG
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: LIST
64389: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64390: LD_ADDR_VAR 0 46
64394: PUSH
64395: LD_INT 2
64397: NEG
64398: PUSH
64399: LD_INT 2
64401: NEG
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 2
64409: NEG
64410: PUSH
64411: LD_INT 3
64413: NEG
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 3
64421: NEG
64422: PUSH
64423: LD_INT 2
64425: NEG
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: LIST
64435: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64436: LD_ADDR_VAR 0 47
64440: PUSH
64441: LD_INT 2
64443: NEG
64444: PUSH
64445: LD_INT 3
64447: NEG
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 1
64455: NEG
64456: PUSH
64457: LD_INT 3
64459: NEG
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64469: LD_ADDR_VAR 0 48
64473: PUSH
64474: LD_INT 1
64476: PUSH
64477: LD_INT 2
64479: NEG
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 2
64487: PUSH
64488: LD_INT 1
64490: NEG
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64500: LD_ADDR_VAR 0 49
64504: PUSH
64505: LD_INT 3
64507: PUSH
64508: LD_INT 1
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 3
64517: PUSH
64518: LD_INT 2
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64529: LD_ADDR_VAR 0 50
64533: PUSH
64534: LD_INT 2
64536: PUSH
64537: LD_INT 3
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 1
64546: PUSH
64547: LD_INT 3
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64558: LD_ADDR_VAR 0 51
64562: PUSH
64563: LD_INT 1
64565: NEG
64566: PUSH
64567: LD_INT 2
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 2
64576: NEG
64577: PUSH
64578: LD_INT 1
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64589: LD_ADDR_VAR 0 52
64593: PUSH
64594: LD_INT 3
64596: NEG
64597: PUSH
64598: LD_INT 1
64600: NEG
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 3
64608: NEG
64609: PUSH
64610: LD_INT 2
64612: NEG
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64622: LD_ADDR_VAR 0 53
64626: PUSH
64627: LD_INT 1
64629: NEG
64630: PUSH
64631: LD_INT 3
64633: NEG
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 0
64641: PUSH
64642: LD_INT 3
64644: NEG
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 1
64652: PUSH
64653: LD_INT 2
64655: NEG
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: LIST
64665: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64666: LD_ADDR_VAR 0 54
64670: PUSH
64671: LD_INT 2
64673: PUSH
64674: LD_INT 1
64676: NEG
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 3
64684: PUSH
64685: LD_INT 0
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 3
64694: PUSH
64695: LD_INT 1
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: LIST
64706: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64707: LD_ADDR_VAR 0 55
64711: PUSH
64712: LD_INT 3
64714: PUSH
64715: LD_INT 2
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 3
64724: PUSH
64725: LD_INT 3
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 2
64734: PUSH
64735: LD_INT 3
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: LIST
64746: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64747: LD_ADDR_VAR 0 56
64751: PUSH
64752: LD_INT 1
64754: PUSH
64755: LD_INT 3
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 0
64764: PUSH
64765: LD_INT 3
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 1
64774: NEG
64775: PUSH
64776: LD_INT 2
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: LIST
64787: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64788: LD_ADDR_VAR 0 57
64792: PUSH
64793: LD_INT 2
64795: NEG
64796: PUSH
64797: LD_INT 1
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 3
64806: NEG
64807: PUSH
64808: LD_INT 0
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 3
64817: NEG
64818: PUSH
64819: LD_INT 1
64821: NEG
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: LIST
64831: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64832: LD_ADDR_VAR 0 58
64836: PUSH
64837: LD_INT 2
64839: NEG
64840: PUSH
64841: LD_INT 3
64843: NEG
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 3
64851: NEG
64852: PUSH
64853: LD_INT 2
64855: NEG
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 3
64863: NEG
64864: PUSH
64865: LD_INT 3
64867: NEG
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: LIST
64877: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64878: LD_ADDR_VAR 0 59
64882: PUSH
64883: LD_INT 1
64885: NEG
64886: PUSH
64887: LD_INT 2
64889: NEG
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 0
64897: PUSH
64898: LD_INT 2
64900: NEG
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 1
64908: PUSH
64909: LD_INT 1
64911: NEG
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: LIST
64921: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64922: LD_ADDR_VAR 0 60
64926: PUSH
64927: LD_INT 1
64929: PUSH
64930: LD_INT 1
64932: NEG
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_INT 2
64940: PUSH
64941: LD_INT 0
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 2
64950: PUSH
64951: LD_INT 1
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: LIST
64962: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64963: LD_ADDR_VAR 0 61
64967: PUSH
64968: LD_INT 2
64970: PUSH
64971: LD_INT 1
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: LD_INT 2
64980: PUSH
64981: LD_INT 2
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: LD_INT 1
64990: PUSH
64991: LD_INT 2
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: LIST
65002: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65003: LD_ADDR_VAR 0 62
65007: PUSH
65008: LD_INT 1
65010: PUSH
65011: LD_INT 2
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 0
65020: PUSH
65021: LD_INT 2
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 1
65030: NEG
65031: PUSH
65032: LD_INT 1
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: LIST
65043: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65044: LD_ADDR_VAR 0 63
65048: PUSH
65049: LD_INT 1
65051: NEG
65052: PUSH
65053: LD_INT 1
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 2
65062: NEG
65063: PUSH
65064: LD_INT 0
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 2
65073: NEG
65074: PUSH
65075: LD_INT 1
65077: NEG
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: LIST
65087: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65088: LD_ADDR_VAR 0 64
65092: PUSH
65093: LD_INT 1
65095: NEG
65096: PUSH
65097: LD_INT 2
65099: NEG
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 2
65107: NEG
65108: PUSH
65109: LD_INT 1
65111: NEG
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 2
65119: NEG
65120: PUSH
65121: LD_INT 2
65123: NEG
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: LIST
65133: ST_TO_ADDR
// end ; 2 :
65134: GO 68400
65136: LD_INT 2
65138: DOUBLE
65139: EQUAL
65140: IFTRUE 65144
65142: GO 68399
65144: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65145: LD_ADDR_VAR 0 29
65149: PUSH
65150: LD_INT 4
65152: PUSH
65153: LD_INT 0
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 4
65162: PUSH
65163: LD_INT 1
65165: NEG
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 5
65173: PUSH
65174: LD_INT 0
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 5
65183: PUSH
65184: LD_INT 1
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 4
65193: PUSH
65194: LD_INT 1
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 3
65203: PUSH
65204: LD_INT 0
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 3
65213: PUSH
65214: LD_INT 1
65216: NEG
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 3
65224: PUSH
65225: LD_INT 2
65227: NEG
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 5
65235: PUSH
65236: LD_INT 2
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 3
65245: PUSH
65246: LD_INT 3
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 3
65255: PUSH
65256: LD_INT 2
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 4
65265: PUSH
65266: LD_INT 3
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 4
65275: PUSH
65276: LD_INT 4
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 3
65285: PUSH
65286: LD_INT 4
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 2
65295: PUSH
65296: LD_INT 3
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 2
65305: PUSH
65306: LD_INT 2
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 4
65315: PUSH
65316: LD_INT 2
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 2
65325: PUSH
65326: LD_INT 4
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 0
65335: PUSH
65336: LD_INT 4
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 0
65345: PUSH
65346: LD_INT 3
65348: PUSH
65349: EMPTY
65350: LIST
65351: LIST
65352: PUSH
65353: LD_INT 1
65355: PUSH
65356: LD_INT 4
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 1
65365: PUSH
65366: LD_INT 5
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: LD_INT 0
65375: PUSH
65376: LD_INT 5
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_INT 1
65385: NEG
65386: PUSH
65387: LD_INT 4
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: PUSH
65394: LD_INT 1
65396: NEG
65397: PUSH
65398: LD_INT 3
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 2
65407: PUSH
65408: LD_INT 5
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 2
65417: NEG
65418: PUSH
65419: LD_INT 3
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 3
65428: NEG
65429: PUSH
65430: LD_INT 0
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 3
65439: NEG
65440: PUSH
65441: LD_INT 1
65443: NEG
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 2
65451: NEG
65452: PUSH
65453: LD_INT 0
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 2
65462: NEG
65463: PUSH
65464: LD_INT 1
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: LD_INT 3
65473: NEG
65474: PUSH
65475: LD_INT 1
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 4
65484: NEG
65485: PUSH
65486: LD_INT 0
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 4
65495: NEG
65496: PUSH
65497: LD_INT 1
65499: NEG
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 4
65507: NEG
65508: PUSH
65509: LD_INT 2
65511: NEG
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: LD_INT 2
65519: NEG
65520: PUSH
65521: LD_INT 2
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 4
65530: NEG
65531: PUSH
65532: LD_INT 4
65534: NEG
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 4
65542: NEG
65543: PUSH
65544: LD_INT 5
65546: NEG
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 3
65554: NEG
65555: PUSH
65556: LD_INT 4
65558: NEG
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 3
65566: NEG
65567: PUSH
65568: LD_INT 3
65570: NEG
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 4
65578: NEG
65579: PUSH
65580: LD_INT 3
65582: NEG
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 5
65590: NEG
65591: PUSH
65592: LD_INT 4
65594: NEG
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 5
65602: NEG
65603: PUSH
65604: LD_INT 5
65606: NEG
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PUSH
65612: LD_INT 3
65614: NEG
65615: PUSH
65616: LD_INT 5
65618: NEG
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 5
65626: NEG
65627: PUSH
65628: LD_INT 3
65630: NEG
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65683: LD_ADDR_VAR 0 30
65687: PUSH
65688: LD_INT 4
65690: PUSH
65691: LD_INT 4
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 4
65700: PUSH
65701: LD_INT 3
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 5
65710: PUSH
65711: LD_INT 4
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 5
65720: PUSH
65721: LD_INT 5
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 4
65730: PUSH
65731: LD_INT 5
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 3
65740: PUSH
65741: LD_INT 4
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 3
65750: PUSH
65751: LD_INT 3
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 5
65760: PUSH
65761: LD_INT 3
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 3
65770: PUSH
65771: LD_INT 5
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 0
65780: PUSH
65781: LD_INT 3
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 0
65790: PUSH
65791: LD_INT 2
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 1
65800: PUSH
65801: LD_INT 3
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 1
65810: PUSH
65811: LD_INT 4
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 0
65820: PUSH
65821: LD_INT 4
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 1
65830: NEG
65831: PUSH
65832: LD_INT 3
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 1
65841: NEG
65842: PUSH
65843: LD_INT 2
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 2
65852: PUSH
65853: LD_INT 4
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 2
65862: NEG
65863: PUSH
65864: LD_INT 2
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 4
65873: NEG
65874: PUSH
65875: LD_INT 0
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 4
65884: NEG
65885: PUSH
65886: LD_INT 1
65888: NEG
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 3
65896: NEG
65897: PUSH
65898: LD_INT 0
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: PUSH
65905: LD_INT 3
65907: NEG
65908: PUSH
65909: LD_INT 1
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 4
65918: NEG
65919: PUSH
65920: LD_INT 1
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 5
65929: NEG
65930: PUSH
65931: LD_INT 0
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 5
65940: NEG
65941: PUSH
65942: LD_INT 1
65944: NEG
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 5
65952: NEG
65953: PUSH
65954: LD_INT 2
65956: NEG
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 3
65964: NEG
65965: PUSH
65966: LD_INT 2
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 3
65975: NEG
65976: PUSH
65977: LD_INT 3
65979: NEG
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 3
65987: NEG
65988: PUSH
65989: LD_INT 4
65991: NEG
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_INT 2
65999: NEG
66000: PUSH
66001: LD_INT 3
66003: NEG
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 2
66011: NEG
66012: PUSH
66013: LD_INT 2
66015: NEG
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: PUSH
66021: LD_INT 3
66023: NEG
66024: PUSH
66025: LD_INT 2
66027: NEG
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_INT 4
66035: NEG
66036: PUSH
66037: LD_INT 3
66039: NEG
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 4
66047: NEG
66048: PUSH
66049: LD_INT 4
66051: NEG
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 2
66059: NEG
66060: PUSH
66061: LD_INT 4
66063: NEG
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 4
66071: NEG
66072: PUSH
66073: LD_INT 2
66075: NEG
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 0
66083: PUSH
66084: LD_INT 4
66086: NEG
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 0
66094: PUSH
66095: LD_INT 5
66097: NEG
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 1
66105: PUSH
66106: LD_INT 4
66108: NEG
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: LD_INT 1
66116: PUSH
66117: LD_INT 3
66119: NEG
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: LD_INT 0
66127: PUSH
66128: LD_INT 3
66130: NEG
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 1
66138: NEG
66139: PUSH
66140: LD_INT 4
66142: NEG
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 1
66150: NEG
66151: PUSH
66152: LD_INT 5
66154: NEG
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 2
66162: PUSH
66163: LD_INT 3
66165: NEG
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 2
66173: NEG
66174: PUSH
66175: LD_INT 5
66177: NEG
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66230: LD_ADDR_VAR 0 31
66234: PUSH
66235: LD_INT 0
66237: PUSH
66238: LD_INT 4
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: LD_INT 0
66247: PUSH
66248: LD_INT 3
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: LD_INT 1
66257: PUSH
66258: LD_INT 4
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 1
66267: PUSH
66268: LD_INT 5
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PUSH
66275: LD_INT 0
66277: PUSH
66278: LD_INT 5
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: LD_INT 1
66287: NEG
66288: PUSH
66289: LD_INT 4
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 1
66298: NEG
66299: PUSH
66300: LD_INT 3
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: LD_INT 2
66309: PUSH
66310: LD_INT 5
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 2
66319: NEG
66320: PUSH
66321: LD_INT 3
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 3
66330: NEG
66331: PUSH
66332: LD_INT 0
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: LD_INT 3
66341: NEG
66342: PUSH
66343: LD_INT 1
66345: NEG
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 2
66353: NEG
66354: PUSH
66355: LD_INT 0
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 2
66364: NEG
66365: PUSH
66366: LD_INT 1
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: LD_INT 3
66375: NEG
66376: PUSH
66377: LD_INT 1
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 4
66386: NEG
66387: PUSH
66388: LD_INT 0
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 4
66397: NEG
66398: PUSH
66399: LD_INT 1
66401: NEG
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 4
66409: NEG
66410: PUSH
66411: LD_INT 2
66413: NEG
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 2
66421: NEG
66422: PUSH
66423: LD_INT 2
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: LD_INT 4
66432: NEG
66433: PUSH
66434: LD_INT 4
66436: NEG
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 4
66444: NEG
66445: PUSH
66446: LD_INT 5
66448: NEG
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 3
66456: NEG
66457: PUSH
66458: LD_INT 4
66460: NEG
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PUSH
66466: LD_INT 3
66468: NEG
66469: PUSH
66470: LD_INT 3
66472: NEG
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: LD_INT 4
66480: NEG
66481: PUSH
66482: LD_INT 3
66484: NEG
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 5
66492: NEG
66493: PUSH
66494: LD_INT 4
66496: NEG
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 5
66504: NEG
66505: PUSH
66506: LD_INT 5
66508: NEG
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: PUSH
66514: LD_INT 3
66516: NEG
66517: PUSH
66518: LD_INT 5
66520: NEG
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: LD_INT 5
66528: NEG
66529: PUSH
66530: LD_INT 3
66532: NEG
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 0
66540: PUSH
66541: LD_INT 3
66543: NEG
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 0
66551: PUSH
66552: LD_INT 4
66554: NEG
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: LD_INT 1
66562: PUSH
66563: LD_INT 3
66565: NEG
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 1
66573: PUSH
66574: LD_INT 2
66576: NEG
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 0
66584: PUSH
66585: LD_INT 2
66587: NEG
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 1
66595: NEG
66596: PUSH
66597: LD_INT 3
66599: NEG
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 1
66607: NEG
66608: PUSH
66609: LD_INT 4
66611: NEG
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 2
66619: PUSH
66620: LD_INT 2
66622: NEG
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 2
66630: NEG
66631: PUSH
66632: LD_INT 4
66634: NEG
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 4
66642: PUSH
66643: LD_INT 0
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 4
66652: PUSH
66653: LD_INT 1
66655: NEG
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 5
66663: PUSH
66664: LD_INT 0
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: PUSH
66671: LD_INT 5
66673: PUSH
66674: LD_INT 1
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: LD_INT 4
66683: PUSH
66684: LD_INT 1
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 3
66693: PUSH
66694: LD_INT 0
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 3
66703: PUSH
66704: LD_INT 1
66706: NEG
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 3
66714: PUSH
66715: LD_INT 2
66717: NEG
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 5
66725: PUSH
66726: LD_INT 2
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66780: LD_ADDR_VAR 0 32
66784: PUSH
66785: LD_INT 4
66787: NEG
66788: PUSH
66789: LD_INT 0
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 4
66798: NEG
66799: PUSH
66800: LD_INT 1
66802: NEG
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 3
66810: NEG
66811: PUSH
66812: LD_INT 0
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 3
66821: NEG
66822: PUSH
66823: LD_INT 1
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 4
66832: NEG
66833: PUSH
66834: LD_INT 1
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 5
66843: NEG
66844: PUSH
66845: LD_INT 0
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 5
66854: NEG
66855: PUSH
66856: LD_INT 1
66858: NEG
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: LD_INT 5
66866: NEG
66867: PUSH
66868: LD_INT 2
66870: NEG
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 3
66878: NEG
66879: PUSH
66880: LD_INT 2
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: LD_INT 3
66889: NEG
66890: PUSH
66891: LD_INT 3
66893: NEG
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 3
66901: NEG
66902: PUSH
66903: LD_INT 4
66905: NEG
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 2
66913: NEG
66914: PUSH
66915: LD_INT 3
66917: NEG
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: PUSH
66923: LD_INT 2
66925: NEG
66926: PUSH
66927: LD_INT 2
66929: NEG
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 3
66937: NEG
66938: PUSH
66939: LD_INT 2
66941: NEG
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: LD_INT 4
66949: NEG
66950: PUSH
66951: LD_INT 3
66953: NEG
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 4
66961: NEG
66962: PUSH
66963: LD_INT 4
66965: NEG
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 2
66973: NEG
66974: PUSH
66975: LD_INT 4
66977: NEG
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 4
66985: NEG
66986: PUSH
66987: LD_INT 2
66989: NEG
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: PUSH
66995: LD_INT 0
66997: PUSH
66998: LD_INT 4
67000: NEG
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PUSH
67006: LD_INT 0
67008: PUSH
67009: LD_INT 5
67011: NEG
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 1
67019: PUSH
67020: LD_INT 4
67022: NEG
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 1
67030: PUSH
67031: LD_INT 3
67033: NEG
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 0
67041: PUSH
67042: LD_INT 3
67044: NEG
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: LD_INT 1
67052: NEG
67053: PUSH
67054: LD_INT 4
67056: NEG
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 1
67064: NEG
67065: PUSH
67066: LD_INT 5
67068: NEG
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: LD_INT 2
67076: PUSH
67077: LD_INT 3
67079: NEG
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: LD_INT 2
67087: NEG
67088: PUSH
67089: LD_INT 5
67091: NEG
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 3
67099: PUSH
67100: LD_INT 0
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 3
67109: PUSH
67110: LD_INT 1
67112: NEG
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: LD_INT 4
67120: PUSH
67121: LD_INT 0
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: LD_INT 4
67130: PUSH
67131: LD_INT 1
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: PUSH
67138: LD_INT 3
67140: PUSH
67141: LD_INT 1
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PUSH
67148: LD_INT 2
67150: PUSH
67151: LD_INT 0
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 2
67160: PUSH
67161: LD_INT 1
67163: NEG
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 2
67171: PUSH
67172: LD_INT 2
67174: NEG
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 4
67182: PUSH
67183: LD_INT 2
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 4
67192: PUSH
67193: LD_INT 4
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: LD_INT 4
67202: PUSH
67203: LD_INT 3
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: LD_INT 5
67212: PUSH
67213: LD_INT 4
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: PUSH
67220: LD_INT 5
67222: PUSH
67223: LD_INT 5
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: PUSH
67230: LD_INT 4
67232: PUSH
67233: LD_INT 5
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: PUSH
67240: LD_INT 3
67242: PUSH
67243: LD_INT 4
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_INT 3
67252: PUSH
67253: LD_INT 3
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: LD_INT 5
67262: PUSH
67263: LD_INT 3
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PUSH
67270: LD_INT 3
67272: PUSH
67273: LD_INT 5
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: LIST
67291: LIST
67292: LIST
67293: LIST
67294: LIST
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67327: LD_ADDR_VAR 0 33
67331: PUSH
67332: LD_INT 4
67334: NEG
67335: PUSH
67336: LD_INT 4
67338: NEG
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 4
67346: NEG
67347: PUSH
67348: LD_INT 5
67350: NEG
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 3
67358: NEG
67359: PUSH
67360: LD_INT 4
67362: NEG
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_INT 3
67370: NEG
67371: PUSH
67372: LD_INT 3
67374: NEG
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: LD_INT 4
67382: NEG
67383: PUSH
67384: LD_INT 3
67386: NEG
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: LD_INT 5
67394: NEG
67395: PUSH
67396: LD_INT 4
67398: NEG
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: LD_INT 5
67406: NEG
67407: PUSH
67408: LD_INT 5
67410: NEG
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PUSH
67416: LD_INT 3
67418: NEG
67419: PUSH
67420: LD_INT 5
67422: NEG
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 5
67430: NEG
67431: PUSH
67432: LD_INT 3
67434: NEG
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 0
67442: PUSH
67443: LD_INT 3
67445: NEG
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 0
67453: PUSH
67454: LD_INT 4
67456: NEG
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 1
67464: PUSH
67465: LD_INT 3
67467: NEG
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: LD_INT 1
67475: PUSH
67476: LD_INT 2
67478: NEG
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: LD_INT 0
67486: PUSH
67487: LD_INT 2
67489: NEG
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 1
67497: NEG
67498: PUSH
67499: LD_INT 3
67501: NEG
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 1
67509: NEG
67510: PUSH
67511: LD_INT 4
67513: NEG
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 2
67521: PUSH
67522: LD_INT 2
67524: NEG
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 2
67532: NEG
67533: PUSH
67534: LD_INT 4
67536: NEG
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 4
67544: PUSH
67545: LD_INT 0
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: LD_INT 4
67554: PUSH
67555: LD_INT 1
67557: NEG
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 5
67565: PUSH
67566: LD_INT 0
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: LD_INT 5
67575: PUSH
67576: LD_INT 1
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: LD_INT 4
67585: PUSH
67586: LD_INT 1
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 3
67595: PUSH
67596: LD_INT 0
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 3
67605: PUSH
67606: LD_INT 1
67608: NEG
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 3
67616: PUSH
67617: LD_INT 2
67619: NEG
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_INT 5
67627: PUSH
67628: LD_INT 2
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: PUSH
67635: LD_INT 3
67637: PUSH
67638: LD_INT 3
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: PUSH
67645: LD_INT 3
67647: PUSH
67648: LD_INT 2
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: LD_INT 4
67657: PUSH
67658: LD_INT 3
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 4
67667: PUSH
67668: LD_INT 4
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 3
67677: PUSH
67678: LD_INT 4
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 2
67687: PUSH
67688: LD_INT 3
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 2
67697: PUSH
67698: LD_INT 2
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PUSH
67705: LD_INT 4
67707: PUSH
67708: LD_INT 2
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 2
67717: PUSH
67718: LD_INT 4
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: LD_INT 0
67727: PUSH
67728: LD_INT 4
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: PUSH
67735: LD_INT 0
67737: PUSH
67738: LD_INT 3
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: LD_INT 1
67747: PUSH
67748: LD_INT 4
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: LD_INT 1
67757: PUSH
67758: LD_INT 5
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 0
67767: PUSH
67768: LD_INT 5
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 1
67777: NEG
67778: PUSH
67779: LD_INT 4
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PUSH
67786: LD_INT 1
67788: NEG
67789: PUSH
67790: LD_INT 3
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PUSH
67797: LD_INT 2
67799: PUSH
67800: LD_INT 5
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 2
67809: NEG
67810: PUSH
67811: LD_INT 3
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: LIST
67833: LIST
67834: LIST
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67865: LD_ADDR_VAR 0 34
67869: PUSH
67870: LD_INT 0
67872: PUSH
67873: LD_INT 4
67875: NEG
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PUSH
67881: LD_INT 0
67883: PUSH
67884: LD_INT 5
67886: NEG
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: PUSH
67892: LD_INT 1
67894: PUSH
67895: LD_INT 4
67897: NEG
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 1
67905: PUSH
67906: LD_INT 3
67908: NEG
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 0
67916: PUSH
67917: LD_INT 3
67919: NEG
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 1
67927: NEG
67928: PUSH
67929: LD_INT 4
67931: NEG
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: LD_INT 1
67939: NEG
67940: PUSH
67941: LD_INT 5
67943: NEG
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PUSH
67949: LD_INT 2
67951: PUSH
67952: LD_INT 3
67954: NEG
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 2
67962: NEG
67963: PUSH
67964: LD_INT 5
67966: NEG
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: PUSH
67972: LD_INT 3
67974: PUSH
67975: LD_INT 0
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: PUSH
67982: LD_INT 3
67984: PUSH
67985: LD_INT 1
67987: NEG
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PUSH
67993: LD_INT 4
67995: PUSH
67996: LD_INT 0
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: LD_INT 4
68005: PUSH
68006: LD_INT 1
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: LD_INT 3
68015: PUSH
68016: LD_INT 1
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 2
68025: PUSH
68026: LD_INT 0
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PUSH
68033: LD_INT 2
68035: PUSH
68036: LD_INT 1
68038: NEG
68039: PUSH
68040: EMPTY
68041: LIST
68042: LIST
68043: PUSH
68044: LD_INT 2
68046: PUSH
68047: LD_INT 2
68049: NEG
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: PUSH
68055: LD_INT 4
68057: PUSH
68058: LD_INT 2
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 4
68067: PUSH
68068: LD_INT 4
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 4
68077: PUSH
68078: LD_INT 3
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 5
68087: PUSH
68088: LD_INT 4
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 5
68097: PUSH
68098: LD_INT 5
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 4
68107: PUSH
68108: LD_INT 5
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 3
68117: PUSH
68118: LD_INT 4
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: LD_INT 3
68127: PUSH
68128: LD_INT 3
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: PUSH
68135: LD_INT 5
68137: PUSH
68138: LD_INT 3
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: LD_INT 3
68147: PUSH
68148: LD_INT 5
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: PUSH
68155: LD_INT 0
68157: PUSH
68158: LD_INT 3
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: PUSH
68165: LD_INT 0
68167: PUSH
68168: LD_INT 2
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 1
68177: PUSH
68178: LD_INT 3
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 1
68187: PUSH
68188: LD_INT 4
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PUSH
68195: LD_INT 0
68197: PUSH
68198: LD_INT 4
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: LD_INT 1
68207: NEG
68208: PUSH
68209: LD_INT 3
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: PUSH
68216: LD_INT 1
68218: NEG
68219: PUSH
68220: LD_INT 2
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: LD_INT 2
68229: PUSH
68230: LD_INT 4
68232: PUSH
68233: EMPTY
68234: LIST
68235: LIST
68236: PUSH
68237: LD_INT 2
68239: NEG
68240: PUSH
68241: LD_INT 2
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: PUSH
68248: LD_INT 4
68250: NEG
68251: PUSH
68252: LD_INT 0
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: PUSH
68259: LD_INT 4
68261: NEG
68262: PUSH
68263: LD_INT 1
68265: NEG
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: LD_INT 3
68273: NEG
68274: PUSH
68275: LD_INT 0
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 3
68284: NEG
68285: PUSH
68286: LD_INT 1
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 4
68295: NEG
68296: PUSH
68297: LD_INT 1
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 5
68306: NEG
68307: PUSH
68308: LD_INT 0
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 5
68317: NEG
68318: PUSH
68319: LD_INT 1
68321: NEG
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: LD_INT 5
68329: NEG
68330: PUSH
68331: LD_INT 2
68333: NEG
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PUSH
68339: LD_INT 3
68341: NEG
68342: PUSH
68343: LD_INT 2
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: LIST
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: ST_TO_ADDR
// end ; end ;
68397: GO 68400
68399: POP
// case btype of b_depot , b_warehouse :
68400: LD_VAR 0 1
68404: PUSH
68405: LD_INT 0
68407: DOUBLE
68408: EQUAL
68409: IFTRUE 68419
68411: LD_INT 1
68413: DOUBLE
68414: EQUAL
68415: IFTRUE 68419
68417: GO 68620
68419: POP
// case nation of nation_american :
68420: LD_VAR 0 5
68424: PUSH
68425: LD_INT 1
68427: DOUBLE
68428: EQUAL
68429: IFTRUE 68433
68431: GO 68489
68433: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68434: LD_ADDR_VAR 0 9
68438: PUSH
68439: LD_VAR 0 11
68443: PUSH
68444: LD_VAR 0 12
68448: PUSH
68449: LD_VAR 0 13
68453: PUSH
68454: LD_VAR 0 14
68458: PUSH
68459: LD_VAR 0 15
68463: PUSH
68464: LD_VAR 0 16
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: PUSH
68477: LD_VAR 0 4
68481: PUSH
68482: LD_INT 1
68484: PLUS
68485: ARRAY
68486: ST_TO_ADDR
68487: GO 68618
68489: LD_INT 2
68491: DOUBLE
68492: EQUAL
68493: IFTRUE 68497
68495: GO 68553
68497: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68498: LD_ADDR_VAR 0 9
68502: PUSH
68503: LD_VAR 0 17
68507: PUSH
68508: LD_VAR 0 18
68512: PUSH
68513: LD_VAR 0 19
68517: PUSH
68518: LD_VAR 0 20
68522: PUSH
68523: LD_VAR 0 21
68527: PUSH
68528: LD_VAR 0 22
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: LIST
68537: LIST
68538: LIST
68539: LIST
68540: PUSH
68541: LD_VAR 0 4
68545: PUSH
68546: LD_INT 1
68548: PLUS
68549: ARRAY
68550: ST_TO_ADDR
68551: GO 68618
68553: LD_INT 3
68555: DOUBLE
68556: EQUAL
68557: IFTRUE 68561
68559: GO 68617
68561: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68562: LD_ADDR_VAR 0 9
68566: PUSH
68567: LD_VAR 0 23
68571: PUSH
68572: LD_VAR 0 24
68576: PUSH
68577: LD_VAR 0 25
68581: PUSH
68582: LD_VAR 0 26
68586: PUSH
68587: LD_VAR 0 27
68591: PUSH
68592: LD_VAR 0 28
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: LIST
68604: PUSH
68605: LD_VAR 0 4
68609: PUSH
68610: LD_INT 1
68612: PLUS
68613: ARRAY
68614: ST_TO_ADDR
68615: GO 68618
68617: POP
68618: GO 69173
68620: LD_INT 2
68622: DOUBLE
68623: EQUAL
68624: IFTRUE 68634
68626: LD_INT 3
68628: DOUBLE
68629: EQUAL
68630: IFTRUE 68634
68632: GO 68690
68634: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68635: LD_ADDR_VAR 0 9
68639: PUSH
68640: LD_VAR 0 29
68644: PUSH
68645: LD_VAR 0 30
68649: PUSH
68650: LD_VAR 0 31
68654: PUSH
68655: LD_VAR 0 32
68659: PUSH
68660: LD_VAR 0 33
68664: PUSH
68665: LD_VAR 0 34
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: PUSH
68678: LD_VAR 0 4
68682: PUSH
68683: LD_INT 1
68685: PLUS
68686: ARRAY
68687: ST_TO_ADDR
68688: GO 69173
68690: LD_INT 16
68692: DOUBLE
68693: EQUAL
68694: IFTRUE 68752
68696: LD_INT 17
68698: DOUBLE
68699: EQUAL
68700: IFTRUE 68752
68702: LD_INT 18
68704: DOUBLE
68705: EQUAL
68706: IFTRUE 68752
68708: LD_INT 19
68710: DOUBLE
68711: EQUAL
68712: IFTRUE 68752
68714: LD_INT 22
68716: DOUBLE
68717: EQUAL
68718: IFTRUE 68752
68720: LD_INT 20
68722: DOUBLE
68723: EQUAL
68724: IFTRUE 68752
68726: LD_INT 21
68728: DOUBLE
68729: EQUAL
68730: IFTRUE 68752
68732: LD_INT 23
68734: DOUBLE
68735: EQUAL
68736: IFTRUE 68752
68738: LD_INT 24
68740: DOUBLE
68741: EQUAL
68742: IFTRUE 68752
68744: LD_INT 25
68746: DOUBLE
68747: EQUAL
68748: IFTRUE 68752
68750: GO 68808
68752: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68753: LD_ADDR_VAR 0 9
68757: PUSH
68758: LD_VAR 0 35
68762: PUSH
68763: LD_VAR 0 36
68767: PUSH
68768: LD_VAR 0 37
68772: PUSH
68773: LD_VAR 0 38
68777: PUSH
68778: LD_VAR 0 39
68782: PUSH
68783: LD_VAR 0 40
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: LIST
68795: PUSH
68796: LD_VAR 0 4
68800: PUSH
68801: LD_INT 1
68803: PLUS
68804: ARRAY
68805: ST_TO_ADDR
68806: GO 69173
68808: LD_INT 6
68810: DOUBLE
68811: EQUAL
68812: IFTRUE 68864
68814: LD_INT 7
68816: DOUBLE
68817: EQUAL
68818: IFTRUE 68864
68820: LD_INT 8
68822: DOUBLE
68823: EQUAL
68824: IFTRUE 68864
68826: LD_INT 13
68828: DOUBLE
68829: EQUAL
68830: IFTRUE 68864
68832: LD_INT 12
68834: DOUBLE
68835: EQUAL
68836: IFTRUE 68864
68838: LD_INT 15
68840: DOUBLE
68841: EQUAL
68842: IFTRUE 68864
68844: LD_INT 11
68846: DOUBLE
68847: EQUAL
68848: IFTRUE 68864
68850: LD_INT 14
68852: DOUBLE
68853: EQUAL
68854: IFTRUE 68864
68856: LD_INT 10
68858: DOUBLE
68859: EQUAL
68860: IFTRUE 68864
68862: GO 68920
68864: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68865: LD_ADDR_VAR 0 9
68869: PUSH
68870: LD_VAR 0 41
68874: PUSH
68875: LD_VAR 0 42
68879: PUSH
68880: LD_VAR 0 43
68884: PUSH
68885: LD_VAR 0 44
68889: PUSH
68890: LD_VAR 0 45
68894: PUSH
68895: LD_VAR 0 46
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: LIST
68904: LIST
68905: LIST
68906: LIST
68907: PUSH
68908: LD_VAR 0 4
68912: PUSH
68913: LD_INT 1
68915: PLUS
68916: ARRAY
68917: ST_TO_ADDR
68918: GO 69173
68920: LD_INT 36
68922: DOUBLE
68923: EQUAL
68924: IFTRUE 68928
68926: GO 68984
68928: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68929: LD_ADDR_VAR 0 9
68933: PUSH
68934: LD_VAR 0 47
68938: PUSH
68939: LD_VAR 0 48
68943: PUSH
68944: LD_VAR 0 49
68948: PUSH
68949: LD_VAR 0 50
68953: PUSH
68954: LD_VAR 0 51
68958: PUSH
68959: LD_VAR 0 52
68963: PUSH
68964: EMPTY
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: PUSH
68972: LD_VAR 0 4
68976: PUSH
68977: LD_INT 1
68979: PLUS
68980: ARRAY
68981: ST_TO_ADDR
68982: GO 69173
68984: LD_INT 4
68986: DOUBLE
68987: EQUAL
68988: IFTRUE 69010
68990: LD_INT 5
68992: DOUBLE
68993: EQUAL
68994: IFTRUE 69010
68996: LD_INT 34
68998: DOUBLE
68999: EQUAL
69000: IFTRUE 69010
69002: LD_INT 37
69004: DOUBLE
69005: EQUAL
69006: IFTRUE 69010
69008: GO 69066
69010: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69011: LD_ADDR_VAR 0 9
69015: PUSH
69016: LD_VAR 0 53
69020: PUSH
69021: LD_VAR 0 54
69025: PUSH
69026: LD_VAR 0 55
69030: PUSH
69031: LD_VAR 0 56
69035: PUSH
69036: LD_VAR 0 57
69040: PUSH
69041: LD_VAR 0 58
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: PUSH
69054: LD_VAR 0 4
69058: PUSH
69059: LD_INT 1
69061: PLUS
69062: ARRAY
69063: ST_TO_ADDR
69064: GO 69173
69066: LD_INT 31
69068: DOUBLE
69069: EQUAL
69070: IFTRUE 69116
69072: LD_INT 32
69074: DOUBLE
69075: EQUAL
69076: IFTRUE 69116
69078: LD_INT 33
69080: DOUBLE
69081: EQUAL
69082: IFTRUE 69116
69084: LD_INT 27
69086: DOUBLE
69087: EQUAL
69088: IFTRUE 69116
69090: LD_INT 26
69092: DOUBLE
69093: EQUAL
69094: IFTRUE 69116
69096: LD_INT 28
69098: DOUBLE
69099: EQUAL
69100: IFTRUE 69116
69102: LD_INT 29
69104: DOUBLE
69105: EQUAL
69106: IFTRUE 69116
69108: LD_INT 30
69110: DOUBLE
69111: EQUAL
69112: IFTRUE 69116
69114: GO 69172
69116: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69117: LD_ADDR_VAR 0 9
69121: PUSH
69122: LD_VAR 0 59
69126: PUSH
69127: LD_VAR 0 60
69131: PUSH
69132: LD_VAR 0 61
69136: PUSH
69137: LD_VAR 0 62
69141: PUSH
69142: LD_VAR 0 63
69146: PUSH
69147: LD_VAR 0 64
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: PUSH
69160: LD_VAR 0 4
69164: PUSH
69165: LD_INT 1
69167: PLUS
69168: ARRAY
69169: ST_TO_ADDR
69170: GO 69173
69172: POP
// temp_list2 = [ ] ;
69173: LD_ADDR_VAR 0 10
69177: PUSH
69178: EMPTY
69179: ST_TO_ADDR
// for i in temp_list do
69180: LD_ADDR_VAR 0 8
69184: PUSH
69185: LD_VAR 0 9
69189: PUSH
69190: FOR_IN
69191: IFFALSE 69243
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69193: LD_ADDR_VAR 0 10
69197: PUSH
69198: LD_VAR 0 10
69202: PUSH
69203: LD_VAR 0 8
69207: PUSH
69208: LD_INT 1
69210: ARRAY
69211: PUSH
69212: LD_VAR 0 2
69216: PLUS
69217: PUSH
69218: LD_VAR 0 8
69222: PUSH
69223: LD_INT 2
69225: ARRAY
69226: PUSH
69227: LD_VAR 0 3
69231: PLUS
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: EMPTY
69238: LIST
69239: ADD
69240: ST_TO_ADDR
69241: GO 69190
69243: POP
69244: POP
// result = temp_list2 ;
69245: LD_ADDR_VAR 0 7
69249: PUSH
69250: LD_VAR 0 10
69254: ST_TO_ADDR
// end ;
69255: LD_VAR 0 7
69259: RET
// export function EnemyInRange ( unit , dist ) ; begin
69260: LD_INT 0
69262: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69263: LD_ADDR_VAR 0 3
69267: PUSH
69268: LD_VAR 0 1
69272: PPUSH
69273: CALL_OW 255
69277: PPUSH
69278: LD_VAR 0 1
69282: PPUSH
69283: CALL_OW 250
69287: PPUSH
69288: LD_VAR 0 1
69292: PPUSH
69293: CALL_OW 251
69297: PPUSH
69298: LD_VAR 0 2
69302: PPUSH
69303: CALL 42633 0 4
69307: PUSH
69308: LD_INT 4
69310: ARRAY
69311: ST_TO_ADDR
// end ;
69312: LD_VAR 0 3
69316: RET
// export function PlayerSeeMe ( unit ) ; begin
69317: LD_INT 0
69319: PPUSH
// result := See ( your_side , unit ) ;
69320: LD_ADDR_VAR 0 2
69324: PUSH
69325: LD_OWVAR 2
69329: PPUSH
69330: LD_VAR 0 1
69334: PPUSH
69335: CALL_OW 292
69339: ST_TO_ADDR
// end ;
69340: LD_VAR 0 2
69344: RET
// export function ReverseDir ( unit ) ; begin
69345: LD_INT 0
69347: PPUSH
// if not unit then
69348: LD_VAR 0 1
69352: NOT
69353: IFFALSE 69357
// exit ;
69355: GO 69380
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69357: LD_ADDR_VAR 0 2
69361: PUSH
69362: LD_VAR 0 1
69366: PPUSH
69367: CALL_OW 254
69371: PUSH
69372: LD_INT 3
69374: PLUS
69375: PUSH
69376: LD_INT 6
69378: MOD
69379: ST_TO_ADDR
// end ;
69380: LD_VAR 0 2
69384: RET
// export function ReverseArray ( array ) ; var i ; begin
69385: LD_INT 0
69387: PPUSH
69388: PPUSH
// if not array then
69389: LD_VAR 0 1
69393: NOT
69394: IFFALSE 69398
// exit ;
69396: GO 69453
// result := [ ] ;
69398: LD_ADDR_VAR 0 2
69402: PUSH
69403: EMPTY
69404: ST_TO_ADDR
// for i := array downto 1 do
69405: LD_ADDR_VAR 0 3
69409: PUSH
69410: DOUBLE
69411: LD_VAR 0 1
69415: INC
69416: ST_TO_ADDR
69417: LD_INT 1
69419: PUSH
69420: FOR_DOWNTO
69421: IFFALSE 69451
// result := Join ( result , array [ i ] ) ;
69423: LD_ADDR_VAR 0 2
69427: PUSH
69428: LD_VAR 0 2
69432: PPUSH
69433: LD_VAR 0 1
69437: PUSH
69438: LD_VAR 0 3
69442: ARRAY
69443: PPUSH
69444: CALL 74096 0 2
69448: ST_TO_ADDR
69449: GO 69420
69451: POP
69452: POP
// end ;
69453: LD_VAR 0 2
69457: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
69458: LD_INT 0
69460: PPUSH
69461: PPUSH
69462: PPUSH
69463: PPUSH
69464: PPUSH
69465: PPUSH
// if not unit or not hexes then
69466: LD_VAR 0 1
69470: NOT
69471: PUSH
69472: LD_VAR 0 2
69476: NOT
69477: OR
69478: IFFALSE 69482
// exit ;
69480: GO 69605
// dist := 9999 ;
69482: LD_ADDR_VAR 0 5
69486: PUSH
69487: LD_INT 9999
69489: ST_TO_ADDR
// for i = 1 to hexes do
69490: LD_ADDR_VAR 0 4
69494: PUSH
69495: DOUBLE
69496: LD_INT 1
69498: DEC
69499: ST_TO_ADDR
69500: LD_VAR 0 2
69504: PUSH
69505: FOR_TO
69506: IFFALSE 69593
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69508: LD_ADDR_VAR 0 6
69512: PUSH
69513: LD_VAR 0 1
69517: PPUSH
69518: LD_VAR 0 2
69522: PUSH
69523: LD_VAR 0 4
69527: ARRAY
69528: PUSH
69529: LD_INT 1
69531: ARRAY
69532: PPUSH
69533: LD_VAR 0 2
69537: PUSH
69538: LD_VAR 0 4
69542: ARRAY
69543: PUSH
69544: LD_INT 2
69546: ARRAY
69547: PPUSH
69548: CALL_OW 297
69552: ST_TO_ADDR
// if tdist < dist then
69553: LD_VAR 0 6
69557: PUSH
69558: LD_VAR 0 5
69562: LESS
69563: IFFALSE 69591
// begin hex := hexes [ i ] ;
69565: LD_ADDR_VAR 0 8
69569: PUSH
69570: LD_VAR 0 2
69574: PUSH
69575: LD_VAR 0 4
69579: ARRAY
69580: ST_TO_ADDR
// dist := tdist ;
69581: LD_ADDR_VAR 0 5
69585: PUSH
69586: LD_VAR 0 6
69590: ST_TO_ADDR
// end ; end ;
69591: GO 69505
69593: POP
69594: POP
// result := hex ;
69595: LD_ADDR_VAR 0 3
69599: PUSH
69600: LD_VAR 0 8
69604: ST_TO_ADDR
// end ;
69605: LD_VAR 0 3
69609: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69610: LD_INT 0
69612: PPUSH
69613: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69614: LD_VAR 0 1
69618: NOT
69619: PUSH
69620: LD_VAR 0 1
69624: PUSH
69625: LD_INT 21
69627: PUSH
69628: LD_INT 2
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: PUSH
69635: LD_INT 23
69637: PUSH
69638: LD_INT 2
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: PUSH
69645: EMPTY
69646: LIST
69647: LIST
69648: PPUSH
69649: CALL_OW 69
69653: IN
69654: NOT
69655: OR
69656: IFFALSE 69660
// exit ;
69658: GO 69707
// for i = 1 to 3 do
69660: LD_ADDR_VAR 0 3
69664: PUSH
69665: DOUBLE
69666: LD_INT 1
69668: DEC
69669: ST_TO_ADDR
69670: LD_INT 3
69672: PUSH
69673: FOR_TO
69674: IFFALSE 69705
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69676: LD_VAR 0 1
69680: PPUSH
69681: CALL_OW 250
69685: PPUSH
69686: LD_VAR 0 1
69690: PPUSH
69691: CALL_OW 251
69695: PPUSH
69696: LD_INT 1
69698: PPUSH
69699: CALL_OW 453
69703: GO 69673
69705: POP
69706: POP
// end ;
69707: LD_VAR 0 2
69711: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69712: LD_INT 0
69714: PPUSH
69715: PPUSH
69716: PPUSH
69717: PPUSH
69718: PPUSH
69719: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69720: LD_VAR 0 1
69724: NOT
69725: PUSH
69726: LD_VAR 0 2
69730: NOT
69731: OR
69732: PUSH
69733: LD_VAR 0 1
69737: PPUSH
69738: CALL_OW 314
69742: OR
69743: IFFALSE 69747
// exit ;
69745: GO 70214
// if GetLives ( i ) < 250 then
69747: LD_VAR 0 4
69751: PPUSH
69752: CALL_OW 256
69756: PUSH
69757: LD_INT 250
69759: LESS
69760: IFFALSE 69773
// begin ComAutodestruct ( i ) ;
69762: LD_VAR 0 4
69766: PPUSH
69767: CALL 69610 0 1
// exit ;
69771: GO 70214
// end ; x := GetX ( enemy_unit ) ;
69773: LD_ADDR_VAR 0 7
69777: PUSH
69778: LD_VAR 0 2
69782: PPUSH
69783: CALL_OW 250
69787: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69788: LD_ADDR_VAR 0 8
69792: PUSH
69793: LD_VAR 0 2
69797: PPUSH
69798: CALL_OW 251
69802: ST_TO_ADDR
// if not x or not y then
69803: LD_VAR 0 7
69807: NOT
69808: PUSH
69809: LD_VAR 0 8
69813: NOT
69814: OR
69815: IFFALSE 69819
// exit ;
69817: GO 70214
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69819: LD_ADDR_VAR 0 6
69823: PUSH
69824: LD_VAR 0 7
69828: PPUSH
69829: LD_INT 0
69831: PPUSH
69832: LD_INT 4
69834: PPUSH
69835: CALL_OW 272
69839: PUSH
69840: LD_VAR 0 8
69844: PPUSH
69845: LD_INT 0
69847: PPUSH
69848: LD_INT 4
69850: PPUSH
69851: CALL_OW 273
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: LD_VAR 0 7
69864: PPUSH
69865: LD_INT 1
69867: PPUSH
69868: LD_INT 4
69870: PPUSH
69871: CALL_OW 272
69875: PUSH
69876: LD_VAR 0 8
69880: PPUSH
69881: LD_INT 1
69883: PPUSH
69884: LD_INT 4
69886: PPUSH
69887: CALL_OW 273
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: PUSH
69896: LD_VAR 0 7
69900: PPUSH
69901: LD_INT 2
69903: PPUSH
69904: LD_INT 4
69906: PPUSH
69907: CALL_OW 272
69911: PUSH
69912: LD_VAR 0 8
69916: PPUSH
69917: LD_INT 2
69919: PPUSH
69920: LD_INT 4
69922: PPUSH
69923: CALL_OW 273
69927: PUSH
69928: EMPTY
69929: LIST
69930: LIST
69931: PUSH
69932: LD_VAR 0 7
69936: PPUSH
69937: LD_INT 3
69939: PPUSH
69940: LD_INT 4
69942: PPUSH
69943: CALL_OW 272
69947: PUSH
69948: LD_VAR 0 8
69952: PPUSH
69953: LD_INT 3
69955: PPUSH
69956: LD_INT 4
69958: PPUSH
69959: CALL_OW 273
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_VAR 0 7
69972: PPUSH
69973: LD_INT 4
69975: PPUSH
69976: LD_INT 4
69978: PPUSH
69979: CALL_OW 272
69983: PUSH
69984: LD_VAR 0 8
69988: PPUSH
69989: LD_INT 4
69991: PPUSH
69992: LD_INT 4
69994: PPUSH
69995: CALL_OW 273
69999: PUSH
70000: EMPTY
70001: LIST
70002: LIST
70003: PUSH
70004: LD_VAR 0 7
70008: PPUSH
70009: LD_INT 5
70011: PPUSH
70012: LD_INT 4
70014: PPUSH
70015: CALL_OW 272
70019: PUSH
70020: LD_VAR 0 8
70024: PPUSH
70025: LD_INT 5
70027: PPUSH
70028: LD_INT 4
70030: PPUSH
70031: CALL_OW 273
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: ST_TO_ADDR
// for i = tmp downto 1 do
70048: LD_ADDR_VAR 0 4
70052: PUSH
70053: DOUBLE
70054: LD_VAR 0 6
70058: INC
70059: ST_TO_ADDR
70060: LD_INT 1
70062: PUSH
70063: FOR_DOWNTO
70064: IFFALSE 70165
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70066: LD_VAR 0 6
70070: PUSH
70071: LD_VAR 0 4
70075: ARRAY
70076: PUSH
70077: LD_INT 1
70079: ARRAY
70080: PPUSH
70081: LD_VAR 0 6
70085: PUSH
70086: LD_VAR 0 4
70090: ARRAY
70091: PUSH
70092: LD_INT 2
70094: ARRAY
70095: PPUSH
70096: CALL_OW 488
70100: NOT
70101: PUSH
70102: LD_VAR 0 6
70106: PUSH
70107: LD_VAR 0 4
70111: ARRAY
70112: PUSH
70113: LD_INT 1
70115: ARRAY
70116: PPUSH
70117: LD_VAR 0 6
70121: PUSH
70122: LD_VAR 0 4
70126: ARRAY
70127: PUSH
70128: LD_INT 2
70130: ARRAY
70131: PPUSH
70132: CALL_OW 428
70136: PUSH
70137: LD_INT 0
70139: NONEQUAL
70140: OR
70141: IFFALSE 70163
// tmp := Delete ( tmp , i ) ;
70143: LD_ADDR_VAR 0 6
70147: PUSH
70148: LD_VAR 0 6
70152: PPUSH
70153: LD_VAR 0 4
70157: PPUSH
70158: CALL_OW 3
70162: ST_TO_ADDR
70163: GO 70063
70165: POP
70166: POP
// j := GetClosestHex ( unit , tmp ) ;
70167: LD_ADDR_VAR 0 5
70171: PUSH
70172: LD_VAR 0 1
70176: PPUSH
70177: LD_VAR 0 6
70181: PPUSH
70182: CALL 69458 0 2
70186: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70187: LD_VAR 0 1
70191: PPUSH
70192: LD_VAR 0 5
70196: PUSH
70197: LD_INT 1
70199: ARRAY
70200: PPUSH
70201: LD_VAR 0 5
70205: PUSH
70206: LD_INT 2
70208: ARRAY
70209: PPUSH
70210: CALL_OW 111
// end ;
70214: LD_VAR 0 3
70218: RET
// export function PrepareApemanSoldier ( ) ; begin
70219: LD_INT 0
70221: PPUSH
// uc_nation := 0 ;
70222: LD_ADDR_OWVAR 21
70226: PUSH
70227: LD_INT 0
70229: ST_TO_ADDR
// hc_sex := sex_male ;
70230: LD_ADDR_OWVAR 27
70234: PUSH
70235: LD_INT 1
70237: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
70238: LD_ADDR_OWVAR 28
70242: PUSH
70243: LD_INT 15
70245: ST_TO_ADDR
// hc_gallery :=  ;
70246: LD_ADDR_OWVAR 33
70250: PUSH
70251: LD_STRING 
70253: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70254: LD_ADDR_OWVAR 31
70258: PUSH
70259: LD_INT 0
70261: PPUSH
70262: LD_INT 3
70264: PPUSH
70265: CALL_OW 12
70269: PUSH
70270: LD_INT 0
70272: PPUSH
70273: LD_INT 3
70275: PPUSH
70276: CALL_OW 12
70280: PUSH
70281: LD_INT 0
70283: PUSH
70284: LD_INT 0
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: ST_TO_ADDR
// end ;
70293: LD_VAR 0 1
70297: RET
// export function PrepareApemanEngineer ( ) ; begin
70298: LD_INT 0
70300: PPUSH
// uc_nation := 0 ;
70301: LD_ADDR_OWVAR 21
70305: PUSH
70306: LD_INT 0
70308: ST_TO_ADDR
// hc_sex := sex_male ;
70309: LD_ADDR_OWVAR 27
70313: PUSH
70314: LD_INT 1
70316: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
70317: LD_ADDR_OWVAR 28
70321: PUSH
70322: LD_INT 16
70324: ST_TO_ADDR
// hc_gallery :=  ;
70325: LD_ADDR_OWVAR 33
70329: PUSH
70330: LD_STRING 
70332: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70333: LD_ADDR_OWVAR 31
70337: PUSH
70338: LD_INT 0
70340: PPUSH
70341: LD_INT 3
70343: PPUSH
70344: CALL_OW 12
70348: PUSH
70349: LD_INT 0
70351: PPUSH
70352: LD_INT 3
70354: PPUSH
70355: CALL_OW 12
70359: PUSH
70360: LD_INT 0
70362: PUSH
70363: LD_INT 0
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: LIST
70370: LIST
70371: ST_TO_ADDR
// end ;
70372: LD_VAR 0 1
70376: RET
// export function PrepareApeman ( agressivity ) ; begin
70377: LD_INT 0
70379: PPUSH
// uc_side := 0 ;
70380: LD_ADDR_OWVAR 20
70384: PUSH
70385: LD_INT 0
70387: ST_TO_ADDR
// uc_nation := 0 ;
70388: LD_ADDR_OWVAR 21
70392: PUSH
70393: LD_INT 0
70395: ST_TO_ADDR
// hc_sex := sex_male ;
70396: LD_ADDR_OWVAR 27
70400: PUSH
70401: LD_INT 1
70403: ST_TO_ADDR
// hc_class := class_apeman ;
70404: LD_ADDR_OWVAR 28
70408: PUSH
70409: LD_INT 12
70411: ST_TO_ADDR
// hc_gallery :=  ;
70412: LD_ADDR_OWVAR 33
70416: PUSH
70417: LD_STRING 
70419: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70420: LD_ADDR_OWVAR 35
70424: PUSH
70425: LD_VAR 0 1
70429: NEG
70430: PPUSH
70431: LD_VAR 0 1
70435: PPUSH
70436: CALL_OW 12
70440: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70441: LD_ADDR_OWVAR 31
70445: PUSH
70446: LD_INT 0
70448: PPUSH
70449: LD_INT 3
70451: PPUSH
70452: CALL_OW 12
70456: PUSH
70457: LD_INT 0
70459: PPUSH
70460: LD_INT 3
70462: PPUSH
70463: CALL_OW 12
70467: PUSH
70468: LD_INT 0
70470: PUSH
70471: LD_INT 0
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: ST_TO_ADDR
// end ;
70480: LD_VAR 0 2
70484: RET
// export function PrepareTiger ( agressivity ) ; begin
70485: LD_INT 0
70487: PPUSH
// uc_side := 0 ;
70488: LD_ADDR_OWVAR 20
70492: PUSH
70493: LD_INT 0
70495: ST_TO_ADDR
// uc_nation := 0 ;
70496: LD_ADDR_OWVAR 21
70500: PUSH
70501: LD_INT 0
70503: ST_TO_ADDR
// hc_class := class_tiger ;
70504: LD_ADDR_OWVAR 28
70508: PUSH
70509: LD_INT 14
70511: ST_TO_ADDR
// hc_gallery :=  ;
70512: LD_ADDR_OWVAR 33
70516: PUSH
70517: LD_STRING 
70519: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70520: LD_ADDR_OWVAR 35
70524: PUSH
70525: LD_VAR 0 1
70529: NEG
70530: PPUSH
70531: LD_VAR 0 1
70535: PPUSH
70536: CALL_OW 12
70540: ST_TO_ADDR
// end ;
70541: LD_VAR 0 2
70545: RET
// export function PrepareEnchidna ( ) ; begin
70546: LD_INT 0
70548: PPUSH
// uc_side := 0 ;
70549: LD_ADDR_OWVAR 20
70553: PUSH
70554: LD_INT 0
70556: ST_TO_ADDR
// uc_nation := 0 ;
70557: LD_ADDR_OWVAR 21
70561: PUSH
70562: LD_INT 0
70564: ST_TO_ADDR
// hc_class := class_baggie ;
70565: LD_ADDR_OWVAR 28
70569: PUSH
70570: LD_INT 13
70572: ST_TO_ADDR
// hc_gallery :=  ;
70573: LD_ADDR_OWVAR 33
70577: PUSH
70578: LD_STRING 
70580: ST_TO_ADDR
// end ;
70581: LD_VAR 0 1
70585: RET
// export function PrepareFrog ( ) ; begin
70586: LD_INT 0
70588: PPUSH
// uc_side := 0 ;
70589: LD_ADDR_OWVAR 20
70593: PUSH
70594: LD_INT 0
70596: ST_TO_ADDR
// uc_nation := 0 ;
70597: LD_ADDR_OWVAR 21
70601: PUSH
70602: LD_INT 0
70604: ST_TO_ADDR
// hc_class := class_frog ;
70605: LD_ADDR_OWVAR 28
70609: PUSH
70610: LD_INT 19
70612: ST_TO_ADDR
// hc_gallery :=  ;
70613: LD_ADDR_OWVAR 33
70617: PUSH
70618: LD_STRING 
70620: ST_TO_ADDR
// end ;
70621: LD_VAR 0 1
70625: RET
// export function PrepareFish ( ) ; begin
70626: LD_INT 0
70628: PPUSH
// uc_side := 0 ;
70629: LD_ADDR_OWVAR 20
70633: PUSH
70634: LD_INT 0
70636: ST_TO_ADDR
// uc_nation := 0 ;
70637: LD_ADDR_OWVAR 21
70641: PUSH
70642: LD_INT 0
70644: ST_TO_ADDR
// hc_class := class_fish ;
70645: LD_ADDR_OWVAR 28
70649: PUSH
70650: LD_INT 20
70652: ST_TO_ADDR
// hc_gallery :=  ;
70653: LD_ADDR_OWVAR 33
70657: PUSH
70658: LD_STRING 
70660: ST_TO_ADDR
// end ;
70661: LD_VAR 0 1
70665: RET
// export function PrepareBird ( ) ; begin
70666: LD_INT 0
70668: PPUSH
// uc_side := 0 ;
70669: LD_ADDR_OWVAR 20
70673: PUSH
70674: LD_INT 0
70676: ST_TO_ADDR
// uc_nation := 0 ;
70677: LD_ADDR_OWVAR 21
70681: PUSH
70682: LD_INT 0
70684: ST_TO_ADDR
// hc_class := class_phororhacos ;
70685: LD_ADDR_OWVAR 28
70689: PUSH
70690: LD_INT 18
70692: ST_TO_ADDR
// hc_gallery :=  ;
70693: LD_ADDR_OWVAR 33
70697: PUSH
70698: LD_STRING 
70700: ST_TO_ADDR
// end ;
70701: LD_VAR 0 1
70705: RET
// export function PrepareHorse ( ) ; begin
70706: LD_INT 0
70708: PPUSH
// uc_side := 0 ;
70709: LD_ADDR_OWVAR 20
70713: PUSH
70714: LD_INT 0
70716: ST_TO_ADDR
// uc_nation := 0 ;
70717: LD_ADDR_OWVAR 21
70721: PUSH
70722: LD_INT 0
70724: ST_TO_ADDR
// hc_class := class_horse ;
70725: LD_ADDR_OWVAR 28
70729: PUSH
70730: LD_INT 21
70732: ST_TO_ADDR
// hc_gallery :=  ;
70733: LD_ADDR_OWVAR 33
70737: PUSH
70738: LD_STRING 
70740: ST_TO_ADDR
// end ;
70741: LD_VAR 0 1
70745: RET
// export function PrepareMastodont ( ) ; begin
70746: LD_INT 0
70748: PPUSH
// uc_side := 0 ;
70749: LD_ADDR_OWVAR 20
70753: PUSH
70754: LD_INT 0
70756: ST_TO_ADDR
// uc_nation := 0 ;
70757: LD_ADDR_OWVAR 21
70761: PUSH
70762: LD_INT 0
70764: ST_TO_ADDR
// vc_chassis := class_mastodont ;
70765: LD_ADDR_OWVAR 37
70769: PUSH
70770: LD_INT 31
70772: ST_TO_ADDR
// vc_control := control_rider ;
70773: LD_ADDR_OWVAR 38
70777: PUSH
70778: LD_INT 4
70780: ST_TO_ADDR
// end ;
70781: LD_VAR 0 1
70785: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70786: LD_INT 0
70788: PPUSH
70789: PPUSH
70790: PPUSH
// uc_side = 0 ;
70791: LD_ADDR_OWVAR 20
70795: PUSH
70796: LD_INT 0
70798: ST_TO_ADDR
// uc_nation = 0 ;
70799: LD_ADDR_OWVAR 21
70803: PUSH
70804: LD_INT 0
70806: ST_TO_ADDR
// InitHc_All ( ) ;
70807: CALL_OW 584
// InitVc ;
70811: CALL_OW 20
// if mastodonts then
70815: LD_VAR 0 6
70819: IFFALSE 70886
// for i = 1 to mastodonts do
70821: LD_ADDR_VAR 0 11
70825: PUSH
70826: DOUBLE
70827: LD_INT 1
70829: DEC
70830: ST_TO_ADDR
70831: LD_VAR 0 6
70835: PUSH
70836: FOR_TO
70837: IFFALSE 70884
// begin vc_chassis := 31 ;
70839: LD_ADDR_OWVAR 37
70843: PUSH
70844: LD_INT 31
70846: ST_TO_ADDR
// vc_control := control_rider ;
70847: LD_ADDR_OWVAR 38
70851: PUSH
70852: LD_INT 4
70854: ST_TO_ADDR
// animal := CreateVehicle ;
70855: LD_ADDR_VAR 0 12
70859: PUSH
70860: CALL_OW 45
70864: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70865: LD_VAR 0 12
70869: PPUSH
70870: LD_VAR 0 8
70874: PPUSH
70875: LD_INT 0
70877: PPUSH
70878: CALL 73014 0 3
// end ;
70882: GO 70836
70884: POP
70885: POP
// if horses then
70886: LD_VAR 0 5
70890: IFFALSE 70957
// for i = 1 to horses do
70892: LD_ADDR_VAR 0 11
70896: PUSH
70897: DOUBLE
70898: LD_INT 1
70900: DEC
70901: ST_TO_ADDR
70902: LD_VAR 0 5
70906: PUSH
70907: FOR_TO
70908: IFFALSE 70955
// begin hc_class := 21 ;
70910: LD_ADDR_OWVAR 28
70914: PUSH
70915: LD_INT 21
70917: ST_TO_ADDR
// hc_gallery :=  ;
70918: LD_ADDR_OWVAR 33
70922: PUSH
70923: LD_STRING 
70925: ST_TO_ADDR
// animal := CreateHuman ;
70926: LD_ADDR_VAR 0 12
70930: PUSH
70931: CALL_OW 44
70935: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70936: LD_VAR 0 12
70940: PPUSH
70941: LD_VAR 0 8
70945: PPUSH
70946: LD_INT 0
70948: PPUSH
70949: CALL 73014 0 3
// end ;
70953: GO 70907
70955: POP
70956: POP
// if birds then
70957: LD_VAR 0 1
70961: IFFALSE 71028
// for i = 1 to birds do
70963: LD_ADDR_VAR 0 11
70967: PUSH
70968: DOUBLE
70969: LD_INT 1
70971: DEC
70972: ST_TO_ADDR
70973: LD_VAR 0 1
70977: PUSH
70978: FOR_TO
70979: IFFALSE 71026
// begin hc_class := 18 ;
70981: LD_ADDR_OWVAR 28
70985: PUSH
70986: LD_INT 18
70988: ST_TO_ADDR
// hc_gallery =  ;
70989: LD_ADDR_OWVAR 33
70993: PUSH
70994: LD_STRING 
70996: ST_TO_ADDR
// animal := CreateHuman ;
70997: LD_ADDR_VAR 0 12
71001: PUSH
71002: CALL_OW 44
71006: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71007: LD_VAR 0 12
71011: PPUSH
71012: LD_VAR 0 8
71016: PPUSH
71017: LD_INT 0
71019: PPUSH
71020: CALL 73014 0 3
// end ;
71024: GO 70978
71026: POP
71027: POP
// if tigers then
71028: LD_VAR 0 2
71032: IFFALSE 71116
// for i = 1 to tigers do
71034: LD_ADDR_VAR 0 11
71038: PUSH
71039: DOUBLE
71040: LD_INT 1
71042: DEC
71043: ST_TO_ADDR
71044: LD_VAR 0 2
71048: PUSH
71049: FOR_TO
71050: IFFALSE 71114
// begin hc_class = class_tiger ;
71052: LD_ADDR_OWVAR 28
71056: PUSH
71057: LD_INT 14
71059: ST_TO_ADDR
// hc_gallery =  ;
71060: LD_ADDR_OWVAR 33
71064: PUSH
71065: LD_STRING 
71067: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71068: LD_ADDR_OWVAR 35
71072: PUSH
71073: LD_INT 7
71075: NEG
71076: PPUSH
71077: LD_INT 7
71079: PPUSH
71080: CALL_OW 12
71084: ST_TO_ADDR
// animal := CreateHuman ;
71085: LD_ADDR_VAR 0 12
71089: PUSH
71090: CALL_OW 44
71094: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71095: LD_VAR 0 12
71099: PPUSH
71100: LD_VAR 0 8
71104: PPUSH
71105: LD_INT 0
71107: PPUSH
71108: CALL 73014 0 3
// end ;
71112: GO 71049
71114: POP
71115: POP
// if apemans then
71116: LD_VAR 0 3
71120: IFFALSE 71243
// for i = 1 to apemans do
71122: LD_ADDR_VAR 0 11
71126: PUSH
71127: DOUBLE
71128: LD_INT 1
71130: DEC
71131: ST_TO_ADDR
71132: LD_VAR 0 3
71136: PUSH
71137: FOR_TO
71138: IFFALSE 71241
// begin hc_class = class_apeman ;
71140: LD_ADDR_OWVAR 28
71144: PUSH
71145: LD_INT 12
71147: ST_TO_ADDR
// hc_gallery =  ;
71148: LD_ADDR_OWVAR 33
71152: PUSH
71153: LD_STRING 
71155: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71156: LD_ADDR_OWVAR 35
71160: PUSH
71161: LD_INT 2
71163: NEG
71164: PPUSH
71165: LD_INT 2
71167: PPUSH
71168: CALL_OW 12
71172: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71173: LD_ADDR_OWVAR 31
71177: PUSH
71178: LD_INT 1
71180: PPUSH
71181: LD_INT 3
71183: PPUSH
71184: CALL_OW 12
71188: PUSH
71189: LD_INT 1
71191: PPUSH
71192: LD_INT 3
71194: PPUSH
71195: CALL_OW 12
71199: PUSH
71200: LD_INT 0
71202: PUSH
71203: LD_INT 0
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: LIST
71210: LIST
71211: ST_TO_ADDR
// animal := CreateHuman ;
71212: LD_ADDR_VAR 0 12
71216: PUSH
71217: CALL_OW 44
71221: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71222: LD_VAR 0 12
71226: PPUSH
71227: LD_VAR 0 8
71231: PPUSH
71232: LD_INT 0
71234: PPUSH
71235: CALL 73014 0 3
// end ;
71239: GO 71137
71241: POP
71242: POP
// if enchidnas then
71243: LD_VAR 0 4
71247: IFFALSE 71314
// for i = 1 to enchidnas do
71249: LD_ADDR_VAR 0 11
71253: PUSH
71254: DOUBLE
71255: LD_INT 1
71257: DEC
71258: ST_TO_ADDR
71259: LD_VAR 0 4
71263: PUSH
71264: FOR_TO
71265: IFFALSE 71312
// begin hc_class = 13 ;
71267: LD_ADDR_OWVAR 28
71271: PUSH
71272: LD_INT 13
71274: ST_TO_ADDR
// hc_gallery =  ;
71275: LD_ADDR_OWVAR 33
71279: PUSH
71280: LD_STRING 
71282: ST_TO_ADDR
// animal := CreateHuman ;
71283: LD_ADDR_VAR 0 12
71287: PUSH
71288: CALL_OW 44
71292: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71293: LD_VAR 0 12
71297: PPUSH
71298: LD_VAR 0 8
71302: PPUSH
71303: LD_INT 0
71305: PPUSH
71306: CALL 73014 0 3
// end ;
71310: GO 71264
71312: POP
71313: POP
// if fishes then
71314: LD_VAR 0 7
71318: IFFALSE 71385
// for i = 1 to fishes do
71320: LD_ADDR_VAR 0 11
71324: PUSH
71325: DOUBLE
71326: LD_INT 1
71328: DEC
71329: ST_TO_ADDR
71330: LD_VAR 0 7
71334: PUSH
71335: FOR_TO
71336: IFFALSE 71383
// begin hc_class = 20 ;
71338: LD_ADDR_OWVAR 28
71342: PUSH
71343: LD_INT 20
71345: ST_TO_ADDR
// hc_gallery =  ;
71346: LD_ADDR_OWVAR 33
71350: PUSH
71351: LD_STRING 
71353: ST_TO_ADDR
// animal := CreateHuman ;
71354: LD_ADDR_VAR 0 12
71358: PUSH
71359: CALL_OW 44
71363: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71364: LD_VAR 0 12
71368: PPUSH
71369: LD_VAR 0 9
71373: PPUSH
71374: LD_INT 0
71376: PPUSH
71377: CALL 73014 0 3
// end ;
71381: GO 71335
71383: POP
71384: POP
// end ;
71385: LD_VAR 0 10
71389: RET
// export function WantHeal ( sci , unit ) ; begin
71390: LD_INT 0
71392: PPUSH
// if GetTaskList ( sci ) > 0 then
71393: LD_VAR 0 1
71397: PPUSH
71398: CALL_OW 437
71402: PUSH
71403: LD_INT 0
71405: GREATER
71406: IFFALSE 71476
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71408: LD_VAR 0 1
71412: PPUSH
71413: CALL_OW 437
71417: PUSH
71418: LD_INT 1
71420: ARRAY
71421: PUSH
71422: LD_INT 1
71424: ARRAY
71425: PUSH
71426: LD_STRING l
71428: EQUAL
71429: PUSH
71430: LD_VAR 0 1
71434: PPUSH
71435: CALL_OW 437
71439: PUSH
71440: LD_INT 1
71442: ARRAY
71443: PUSH
71444: LD_INT 4
71446: ARRAY
71447: PUSH
71448: LD_VAR 0 2
71452: EQUAL
71453: AND
71454: IFFALSE 71466
// result := true else
71456: LD_ADDR_VAR 0 3
71460: PUSH
71461: LD_INT 1
71463: ST_TO_ADDR
71464: GO 71474
// result := false ;
71466: LD_ADDR_VAR 0 3
71470: PUSH
71471: LD_INT 0
71473: ST_TO_ADDR
// end else
71474: GO 71484
// result := false ;
71476: LD_ADDR_VAR 0 3
71480: PUSH
71481: LD_INT 0
71483: ST_TO_ADDR
// end ;
71484: LD_VAR 0 3
71488: RET
// export function HealTarget ( sci ) ; begin
71489: LD_INT 0
71491: PPUSH
// if not sci then
71492: LD_VAR 0 1
71496: NOT
71497: IFFALSE 71501
// exit ;
71499: GO 71566
// result := 0 ;
71501: LD_ADDR_VAR 0 2
71505: PUSH
71506: LD_INT 0
71508: ST_TO_ADDR
// if GetTaskList ( sci ) then
71509: LD_VAR 0 1
71513: PPUSH
71514: CALL_OW 437
71518: IFFALSE 71566
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71520: LD_VAR 0 1
71524: PPUSH
71525: CALL_OW 437
71529: PUSH
71530: LD_INT 1
71532: ARRAY
71533: PUSH
71534: LD_INT 1
71536: ARRAY
71537: PUSH
71538: LD_STRING l
71540: EQUAL
71541: IFFALSE 71566
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71543: LD_ADDR_VAR 0 2
71547: PUSH
71548: LD_VAR 0 1
71552: PPUSH
71553: CALL_OW 437
71557: PUSH
71558: LD_INT 1
71560: ARRAY
71561: PUSH
71562: LD_INT 4
71564: ARRAY
71565: ST_TO_ADDR
// end ;
71566: LD_VAR 0 2
71570: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71571: LD_INT 0
71573: PPUSH
71574: PPUSH
71575: PPUSH
71576: PPUSH
// if not base_units then
71577: LD_VAR 0 1
71581: NOT
71582: IFFALSE 71586
// exit ;
71584: GO 71673
// result := false ;
71586: LD_ADDR_VAR 0 2
71590: PUSH
71591: LD_INT 0
71593: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71594: LD_ADDR_VAR 0 5
71598: PUSH
71599: LD_VAR 0 1
71603: PPUSH
71604: LD_INT 21
71606: PUSH
71607: LD_INT 3
71609: PUSH
71610: EMPTY
71611: LIST
71612: LIST
71613: PPUSH
71614: CALL_OW 72
71618: ST_TO_ADDR
// if not tmp then
71619: LD_VAR 0 5
71623: NOT
71624: IFFALSE 71628
// exit ;
71626: GO 71673
// for i in tmp do
71628: LD_ADDR_VAR 0 3
71632: PUSH
71633: LD_VAR 0 5
71637: PUSH
71638: FOR_IN
71639: IFFALSE 71671
// begin result := EnemyInRange ( i , 22 ) ;
71641: LD_ADDR_VAR 0 2
71645: PUSH
71646: LD_VAR 0 3
71650: PPUSH
71651: LD_INT 22
71653: PPUSH
71654: CALL 69260 0 2
71658: ST_TO_ADDR
// if result then
71659: LD_VAR 0 2
71663: IFFALSE 71669
// exit ;
71665: POP
71666: POP
71667: GO 71673
// end ;
71669: GO 71638
71671: POP
71672: POP
// end ;
71673: LD_VAR 0 2
71677: RET
// export function FilterByTag ( units , tag ) ; begin
71678: LD_INT 0
71680: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
71681: LD_ADDR_VAR 0 3
71685: PUSH
71686: LD_VAR 0 1
71690: PPUSH
71691: LD_INT 120
71693: PUSH
71694: LD_VAR 0 2
71698: PUSH
71699: EMPTY
71700: LIST
71701: LIST
71702: PPUSH
71703: CALL_OW 72
71707: ST_TO_ADDR
// end ;
71708: LD_VAR 0 3
71712: RET
// export function IsDriver ( un ) ; begin
71713: LD_INT 0
71715: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71716: LD_ADDR_VAR 0 2
71720: PUSH
71721: LD_VAR 0 1
71725: PUSH
71726: LD_INT 55
71728: PUSH
71729: EMPTY
71730: LIST
71731: PPUSH
71732: CALL_OW 69
71736: IN
71737: ST_TO_ADDR
// end ;
71738: LD_VAR 0 2
71742: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71743: LD_INT 0
71745: PPUSH
71746: PPUSH
// list := [ ] ;
71747: LD_ADDR_VAR 0 5
71751: PUSH
71752: EMPTY
71753: ST_TO_ADDR
// case d of 0 :
71754: LD_VAR 0 3
71758: PUSH
71759: LD_INT 0
71761: DOUBLE
71762: EQUAL
71763: IFTRUE 71767
71765: GO 71900
71767: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71768: LD_ADDR_VAR 0 5
71772: PUSH
71773: LD_VAR 0 1
71777: PUSH
71778: LD_INT 4
71780: MINUS
71781: PUSH
71782: LD_VAR 0 2
71786: PUSH
71787: LD_INT 4
71789: MINUS
71790: PUSH
71791: LD_INT 2
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: LIST
71798: PUSH
71799: LD_VAR 0 1
71803: PUSH
71804: LD_INT 3
71806: MINUS
71807: PUSH
71808: LD_VAR 0 2
71812: PUSH
71813: LD_INT 1
71815: PUSH
71816: EMPTY
71817: LIST
71818: LIST
71819: LIST
71820: PUSH
71821: LD_VAR 0 1
71825: PUSH
71826: LD_INT 4
71828: PLUS
71829: PUSH
71830: LD_VAR 0 2
71834: PUSH
71835: LD_INT 4
71837: PUSH
71838: EMPTY
71839: LIST
71840: LIST
71841: LIST
71842: PUSH
71843: LD_VAR 0 1
71847: PUSH
71848: LD_INT 3
71850: PLUS
71851: PUSH
71852: LD_VAR 0 2
71856: PUSH
71857: LD_INT 3
71859: PLUS
71860: PUSH
71861: LD_INT 5
71863: PUSH
71864: EMPTY
71865: LIST
71866: LIST
71867: LIST
71868: PUSH
71869: LD_VAR 0 1
71873: PUSH
71874: LD_VAR 0 2
71878: PUSH
71879: LD_INT 4
71881: PLUS
71882: PUSH
71883: LD_INT 0
71885: PUSH
71886: EMPTY
71887: LIST
71888: LIST
71889: LIST
71890: PUSH
71891: EMPTY
71892: LIST
71893: LIST
71894: LIST
71895: LIST
71896: LIST
71897: ST_TO_ADDR
// end ; 1 :
71898: GO 72598
71900: LD_INT 1
71902: DOUBLE
71903: EQUAL
71904: IFTRUE 71908
71906: GO 72041
71908: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71909: LD_ADDR_VAR 0 5
71913: PUSH
71914: LD_VAR 0 1
71918: PUSH
71919: LD_VAR 0 2
71923: PUSH
71924: LD_INT 4
71926: MINUS
71927: PUSH
71928: LD_INT 3
71930: PUSH
71931: EMPTY
71932: LIST
71933: LIST
71934: LIST
71935: PUSH
71936: LD_VAR 0 1
71940: PUSH
71941: LD_INT 3
71943: MINUS
71944: PUSH
71945: LD_VAR 0 2
71949: PUSH
71950: LD_INT 3
71952: MINUS
71953: PUSH
71954: LD_INT 2
71956: PUSH
71957: EMPTY
71958: LIST
71959: LIST
71960: LIST
71961: PUSH
71962: LD_VAR 0 1
71966: PUSH
71967: LD_INT 4
71969: MINUS
71970: PUSH
71971: LD_VAR 0 2
71975: PUSH
71976: LD_INT 1
71978: PUSH
71979: EMPTY
71980: LIST
71981: LIST
71982: LIST
71983: PUSH
71984: LD_VAR 0 1
71988: PUSH
71989: LD_VAR 0 2
71993: PUSH
71994: LD_INT 3
71996: PLUS
71997: PUSH
71998: LD_INT 0
72000: PUSH
72001: EMPTY
72002: LIST
72003: LIST
72004: LIST
72005: PUSH
72006: LD_VAR 0 1
72010: PUSH
72011: LD_INT 4
72013: PLUS
72014: PUSH
72015: LD_VAR 0 2
72019: PUSH
72020: LD_INT 4
72022: PLUS
72023: PUSH
72024: LD_INT 5
72026: PUSH
72027: EMPTY
72028: LIST
72029: LIST
72030: LIST
72031: PUSH
72032: EMPTY
72033: LIST
72034: LIST
72035: LIST
72036: LIST
72037: LIST
72038: ST_TO_ADDR
// end ; 2 :
72039: GO 72598
72041: LD_INT 2
72043: DOUBLE
72044: EQUAL
72045: IFTRUE 72049
72047: GO 72178
72049: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72050: LD_ADDR_VAR 0 5
72054: PUSH
72055: LD_VAR 0 1
72059: PUSH
72060: LD_VAR 0 2
72064: PUSH
72065: LD_INT 3
72067: MINUS
72068: PUSH
72069: LD_INT 3
72071: PUSH
72072: EMPTY
72073: LIST
72074: LIST
72075: LIST
72076: PUSH
72077: LD_VAR 0 1
72081: PUSH
72082: LD_INT 4
72084: PLUS
72085: PUSH
72086: LD_VAR 0 2
72090: PUSH
72091: LD_INT 4
72093: PUSH
72094: EMPTY
72095: LIST
72096: LIST
72097: LIST
72098: PUSH
72099: LD_VAR 0 1
72103: PUSH
72104: LD_VAR 0 2
72108: PUSH
72109: LD_INT 4
72111: PLUS
72112: PUSH
72113: LD_INT 0
72115: PUSH
72116: EMPTY
72117: LIST
72118: LIST
72119: LIST
72120: PUSH
72121: LD_VAR 0 1
72125: PUSH
72126: LD_INT 3
72128: MINUS
72129: PUSH
72130: LD_VAR 0 2
72134: PUSH
72135: LD_INT 1
72137: PUSH
72138: EMPTY
72139: LIST
72140: LIST
72141: LIST
72142: PUSH
72143: LD_VAR 0 1
72147: PUSH
72148: LD_INT 4
72150: MINUS
72151: PUSH
72152: LD_VAR 0 2
72156: PUSH
72157: LD_INT 4
72159: MINUS
72160: PUSH
72161: LD_INT 2
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: LIST
72168: PUSH
72169: EMPTY
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: ST_TO_ADDR
// end ; 3 :
72176: GO 72598
72178: LD_INT 3
72180: DOUBLE
72181: EQUAL
72182: IFTRUE 72186
72184: GO 72319
72186: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72187: LD_ADDR_VAR 0 5
72191: PUSH
72192: LD_VAR 0 1
72196: PUSH
72197: LD_INT 3
72199: PLUS
72200: PUSH
72201: LD_VAR 0 2
72205: PUSH
72206: LD_INT 4
72208: PUSH
72209: EMPTY
72210: LIST
72211: LIST
72212: LIST
72213: PUSH
72214: LD_VAR 0 1
72218: PUSH
72219: LD_INT 4
72221: PLUS
72222: PUSH
72223: LD_VAR 0 2
72227: PUSH
72228: LD_INT 4
72230: PLUS
72231: PUSH
72232: LD_INT 5
72234: PUSH
72235: EMPTY
72236: LIST
72237: LIST
72238: LIST
72239: PUSH
72240: LD_VAR 0 1
72244: PUSH
72245: LD_INT 4
72247: MINUS
72248: PUSH
72249: LD_VAR 0 2
72253: PUSH
72254: LD_INT 1
72256: PUSH
72257: EMPTY
72258: LIST
72259: LIST
72260: LIST
72261: PUSH
72262: LD_VAR 0 1
72266: PUSH
72267: LD_VAR 0 2
72271: PUSH
72272: LD_INT 4
72274: MINUS
72275: PUSH
72276: LD_INT 3
72278: PUSH
72279: EMPTY
72280: LIST
72281: LIST
72282: LIST
72283: PUSH
72284: LD_VAR 0 1
72288: PUSH
72289: LD_INT 3
72291: MINUS
72292: PUSH
72293: LD_VAR 0 2
72297: PUSH
72298: LD_INT 3
72300: MINUS
72301: PUSH
72302: LD_INT 2
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: LIST
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: LIST
72314: LIST
72315: LIST
72316: ST_TO_ADDR
// end ; 4 :
72317: GO 72598
72319: LD_INT 4
72321: DOUBLE
72322: EQUAL
72323: IFTRUE 72327
72325: GO 72460
72327: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72328: LD_ADDR_VAR 0 5
72332: PUSH
72333: LD_VAR 0 1
72337: PUSH
72338: LD_VAR 0 2
72342: PUSH
72343: LD_INT 4
72345: PLUS
72346: PUSH
72347: LD_INT 0
72349: PUSH
72350: EMPTY
72351: LIST
72352: LIST
72353: LIST
72354: PUSH
72355: LD_VAR 0 1
72359: PUSH
72360: LD_INT 3
72362: PLUS
72363: PUSH
72364: LD_VAR 0 2
72368: PUSH
72369: LD_INT 3
72371: PLUS
72372: PUSH
72373: LD_INT 5
72375: PUSH
72376: EMPTY
72377: LIST
72378: LIST
72379: LIST
72380: PUSH
72381: LD_VAR 0 1
72385: PUSH
72386: LD_INT 4
72388: PLUS
72389: PUSH
72390: LD_VAR 0 2
72394: PUSH
72395: LD_INT 4
72397: PUSH
72398: EMPTY
72399: LIST
72400: LIST
72401: LIST
72402: PUSH
72403: LD_VAR 0 1
72407: PUSH
72408: LD_VAR 0 2
72412: PUSH
72413: LD_INT 3
72415: MINUS
72416: PUSH
72417: LD_INT 3
72419: PUSH
72420: EMPTY
72421: LIST
72422: LIST
72423: LIST
72424: PUSH
72425: LD_VAR 0 1
72429: PUSH
72430: LD_INT 4
72432: MINUS
72433: PUSH
72434: LD_VAR 0 2
72438: PUSH
72439: LD_INT 4
72441: MINUS
72442: PUSH
72443: LD_INT 2
72445: PUSH
72446: EMPTY
72447: LIST
72448: LIST
72449: LIST
72450: PUSH
72451: EMPTY
72452: LIST
72453: LIST
72454: LIST
72455: LIST
72456: LIST
72457: ST_TO_ADDR
// end ; 5 :
72458: GO 72598
72460: LD_INT 5
72462: DOUBLE
72463: EQUAL
72464: IFTRUE 72468
72466: GO 72597
72468: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72469: LD_ADDR_VAR 0 5
72473: PUSH
72474: LD_VAR 0 1
72478: PUSH
72479: LD_INT 4
72481: MINUS
72482: PUSH
72483: LD_VAR 0 2
72487: PUSH
72488: LD_INT 1
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: LIST
72495: PUSH
72496: LD_VAR 0 1
72500: PUSH
72501: LD_VAR 0 2
72505: PUSH
72506: LD_INT 4
72508: MINUS
72509: PUSH
72510: LD_INT 3
72512: PUSH
72513: EMPTY
72514: LIST
72515: LIST
72516: LIST
72517: PUSH
72518: LD_VAR 0 1
72522: PUSH
72523: LD_INT 4
72525: PLUS
72526: PUSH
72527: LD_VAR 0 2
72531: PUSH
72532: LD_INT 4
72534: PLUS
72535: PUSH
72536: LD_INT 5
72538: PUSH
72539: EMPTY
72540: LIST
72541: LIST
72542: LIST
72543: PUSH
72544: LD_VAR 0 1
72548: PUSH
72549: LD_INT 3
72551: PLUS
72552: PUSH
72553: LD_VAR 0 2
72557: PUSH
72558: LD_INT 4
72560: PUSH
72561: EMPTY
72562: LIST
72563: LIST
72564: LIST
72565: PUSH
72566: LD_VAR 0 1
72570: PUSH
72571: LD_VAR 0 2
72575: PUSH
72576: LD_INT 3
72578: PLUS
72579: PUSH
72580: LD_INT 0
72582: PUSH
72583: EMPTY
72584: LIST
72585: LIST
72586: LIST
72587: PUSH
72588: EMPTY
72589: LIST
72590: LIST
72591: LIST
72592: LIST
72593: LIST
72594: ST_TO_ADDR
// end ; end ;
72595: GO 72598
72597: POP
// result := list ;
72598: LD_ADDR_VAR 0 4
72602: PUSH
72603: LD_VAR 0 5
72607: ST_TO_ADDR
// end ;
72608: LD_VAR 0 4
72612: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72613: LD_INT 0
72615: PPUSH
72616: PPUSH
72617: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72618: LD_VAR 0 1
72622: NOT
72623: PUSH
72624: LD_VAR 0 2
72628: PUSH
72629: LD_INT 1
72631: PUSH
72632: LD_INT 2
72634: PUSH
72635: LD_INT 3
72637: PUSH
72638: LD_INT 4
72640: PUSH
72641: EMPTY
72642: LIST
72643: LIST
72644: LIST
72645: LIST
72646: IN
72647: NOT
72648: OR
72649: IFFALSE 72653
// exit ;
72651: GO 72736
// tmp := [ ] ;
72653: LD_ADDR_VAR 0 5
72657: PUSH
72658: EMPTY
72659: ST_TO_ADDR
// for i in units do
72660: LD_ADDR_VAR 0 4
72664: PUSH
72665: LD_VAR 0 1
72669: PUSH
72670: FOR_IN
72671: IFFALSE 72705
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
72673: LD_ADDR_VAR 0 5
72677: PUSH
72678: LD_VAR 0 5
72682: PPUSH
72683: LD_VAR 0 4
72687: PPUSH
72688: LD_VAR 0 2
72692: PPUSH
72693: CALL_OW 259
72697: PPUSH
72698: CALL 74096 0 2
72702: ST_TO_ADDR
72703: GO 72670
72705: POP
72706: POP
// if not tmp then
72707: LD_VAR 0 5
72711: NOT
72712: IFFALSE 72716
// exit ;
72714: GO 72736
// result := SortListByListDesc ( units , tmp ) ;
72716: LD_ADDR_VAR 0 3
72720: PUSH
72721: LD_VAR 0 1
72725: PPUSH
72726: LD_VAR 0 5
72730: PPUSH
72731: CALL_OW 77
72735: ST_TO_ADDR
// end ;
72736: LD_VAR 0 3
72740: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72741: LD_INT 0
72743: PPUSH
72744: PPUSH
72745: PPUSH
// result := false ;
72746: LD_ADDR_VAR 0 3
72750: PUSH
72751: LD_INT 0
72753: ST_TO_ADDR
// if not building then
72754: LD_VAR 0 2
72758: NOT
72759: IFFALSE 72763
// exit ;
72761: GO 72901
// x := GetX ( building ) ;
72763: LD_ADDR_VAR 0 4
72767: PUSH
72768: LD_VAR 0 2
72772: PPUSH
72773: CALL_OW 250
72777: ST_TO_ADDR
// y := GetY ( building ) ;
72778: LD_ADDR_VAR 0 5
72782: PUSH
72783: LD_VAR 0 2
72787: PPUSH
72788: CALL_OW 251
72792: ST_TO_ADDR
// if not x or not y then
72793: LD_VAR 0 4
72797: NOT
72798: PUSH
72799: LD_VAR 0 5
72803: NOT
72804: OR
72805: IFFALSE 72809
// exit ;
72807: GO 72901
// if GetTaskList ( unit ) then
72809: LD_VAR 0 1
72813: PPUSH
72814: CALL_OW 437
72818: IFFALSE 72901
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72820: LD_STRING e
72822: PUSH
72823: LD_VAR 0 1
72827: PPUSH
72828: CALL_OW 437
72832: PUSH
72833: LD_INT 1
72835: ARRAY
72836: PUSH
72837: LD_INT 1
72839: ARRAY
72840: EQUAL
72841: PUSH
72842: LD_VAR 0 4
72846: PUSH
72847: LD_VAR 0 1
72851: PPUSH
72852: CALL_OW 437
72856: PUSH
72857: LD_INT 1
72859: ARRAY
72860: PUSH
72861: LD_INT 2
72863: ARRAY
72864: EQUAL
72865: AND
72866: PUSH
72867: LD_VAR 0 5
72871: PUSH
72872: LD_VAR 0 1
72876: PPUSH
72877: CALL_OW 437
72881: PUSH
72882: LD_INT 1
72884: ARRAY
72885: PUSH
72886: LD_INT 3
72888: ARRAY
72889: EQUAL
72890: AND
72891: IFFALSE 72901
// result := true end ;
72893: LD_ADDR_VAR 0 3
72897: PUSH
72898: LD_INT 1
72900: ST_TO_ADDR
// end ;
72901: LD_VAR 0 3
72905: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72906: LD_INT 0
72908: PPUSH
// result := false ;
72909: LD_ADDR_VAR 0 4
72913: PUSH
72914: LD_INT 0
72916: ST_TO_ADDR
// if GetTaskList ( unit ) then
72917: LD_VAR 0 1
72921: PPUSH
72922: CALL_OW 437
72926: IFFALSE 73009
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72928: LD_STRING M
72930: PUSH
72931: LD_VAR 0 1
72935: PPUSH
72936: CALL_OW 437
72940: PUSH
72941: LD_INT 1
72943: ARRAY
72944: PUSH
72945: LD_INT 1
72947: ARRAY
72948: EQUAL
72949: PUSH
72950: LD_VAR 0 2
72954: PUSH
72955: LD_VAR 0 1
72959: PPUSH
72960: CALL_OW 437
72964: PUSH
72965: LD_INT 1
72967: ARRAY
72968: PUSH
72969: LD_INT 2
72971: ARRAY
72972: EQUAL
72973: AND
72974: PUSH
72975: LD_VAR 0 3
72979: PUSH
72980: LD_VAR 0 1
72984: PPUSH
72985: CALL_OW 437
72989: PUSH
72990: LD_INT 1
72992: ARRAY
72993: PUSH
72994: LD_INT 3
72996: ARRAY
72997: EQUAL
72998: AND
72999: IFFALSE 73009
// result := true ;
73001: LD_ADDR_VAR 0 4
73005: PUSH
73006: LD_INT 1
73008: ST_TO_ADDR
// end ; end ;
73009: LD_VAR 0 4
73013: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73014: LD_INT 0
73016: PPUSH
73017: PPUSH
73018: PPUSH
73019: PPUSH
// if not unit or not area then
73020: LD_VAR 0 1
73024: NOT
73025: PUSH
73026: LD_VAR 0 2
73030: NOT
73031: OR
73032: IFFALSE 73036
// exit ;
73034: GO 73199
// tmp := AreaToList ( area , i ) ;
73036: LD_ADDR_VAR 0 6
73040: PUSH
73041: LD_VAR 0 2
73045: PPUSH
73046: LD_VAR 0 5
73050: PPUSH
73051: CALL_OW 517
73055: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73056: LD_ADDR_VAR 0 5
73060: PUSH
73061: DOUBLE
73062: LD_INT 1
73064: DEC
73065: ST_TO_ADDR
73066: LD_VAR 0 6
73070: PUSH
73071: LD_INT 1
73073: ARRAY
73074: PUSH
73075: FOR_TO
73076: IFFALSE 73197
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73078: LD_ADDR_VAR 0 7
73082: PUSH
73083: LD_VAR 0 6
73087: PUSH
73088: LD_INT 1
73090: ARRAY
73091: PUSH
73092: LD_VAR 0 5
73096: ARRAY
73097: PUSH
73098: LD_VAR 0 6
73102: PUSH
73103: LD_INT 2
73105: ARRAY
73106: PUSH
73107: LD_VAR 0 5
73111: ARRAY
73112: PUSH
73113: EMPTY
73114: LIST
73115: LIST
73116: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
73117: LD_INT 92
73119: PUSH
73120: LD_VAR 0 7
73124: PUSH
73125: LD_INT 1
73127: ARRAY
73128: PUSH
73129: LD_VAR 0 7
73133: PUSH
73134: LD_INT 2
73136: ARRAY
73137: PUSH
73138: LD_INT 3
73140: PUSH
73141: EMPTY
73142: LIST
73143: LIST
73144: LIST
73145: LIST
73146: PPUSH
73147: CALL_OW 69
73151: PUSH
73152: LD_INT 0
73154: EQUAL
73155: IFFALSE 73195
// begin PlaceUnitArea ( unit , area , mode ) ;
73157: LD_VAR 0 1
73161: PPUSH
73162: LD_VAR 0 2
73166: PPUSH
73167: LD_VAR 0 3
73171: PPUSH
73172: CALL_OW 49
// result := IsPlaced ( unit ) ;
73176: LD_ADDR_VAR 0 4
73180: PUSH
73181: LD_VAR 0 1
73185: PPUSH
73186: CALL_OW 305
73190: ST_TO_ADDR
// exit ;
73191: POP
73192: POP
73193: GO 73199
// end ; end ;
73195: GO 73075
73197: POP
73198: POP
// end ;
73199: LD_VAR 0 4
73203: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73204: LD_INT 0
73206: PPUSH
73207: PPUSH
73208: PPUSH
// if not side or side > 8 then
73209: LD_VAR 0 1
73213: NOT
73214: PUSH
73215: LD_VAR 0 1
73219: PUSH
73220: LD_INT 8
73222: GREATER
73223: OR
73224: IFFALSE 73228
// exit ;
73226: GO 73415
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73228: LD_ADDR_VAR 0 4
73232: PUSH
73233: LD_INT 22
73235: PUSH
73236: LD_VAR 0 1
73240: PUSH
73241: EMPTY
73242: LIST
73243: LIST
73244: PUSH
73245: LD_INT 21
73247: PUSH
73248: LD_INT 3
73250: PUSH
73251: EMPTY
73252: LIST
73253: LIST
73254: PUSH
73255: EMPTY
73256: LIST
73257: LIST
73258: PPUSH
73259: CALL_OW 69
73263: ST_TO_ADDR
// if not tmp then
73264: LD_VAR 0 4
73268: NOT
73269: IFFALSE 73273
// exit ;
73271: GO 73415
// enable_addtolog := true ;
73273: LD_ADDR_OWVAR 81
73277: PUSH
73278: LD_INT 1
73280: ST_TO_ADDR
// AddToLog ( [ ) ;
73281: LD_STRING [
73283: PPUSH
73284: CALL_OW 561
// for i in tmp do
73288: LD_ADDR_VAR 0 3
73292: PUSH
73293: LD_VAR 0 4
73297: PUSH
73298: FOR_IN
73299: IFFALSE 73406
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73301: LD_STRING [
73303: PUSH
73304: LD_VAR 0 3
73308: PPUSH
73309: CALL_OW 266
73313: STR
73314: PUSH
73315: LD_STRING , 
73317: STR
73318: PUSH
73319: LD_VAR 0 3
73323: PPUSH
73324: CALL_OW 250
73328: STR
73329: PUSH
73330: LD_STRING , 
73332: STR
73333: PUSH
73334: LD_VAR 0 3
73338: PPUSH
73339: CALL_OW 251
73343: STR
73344: PUSH
73345: LD_STRING , 
73347: STR
73348: PUSH
73349: LD_VAR 0 3
73353: PPUSH
73354: CALL_OW 254
73358: STR
73359: PUSH
73360: LD_STRING , 
73362: STR
73363: PUSH
73364: LD_VAR 0 3
73368: PPUSH
73369: LD_INT 1
73371: PPUSH
73372: CALL_OW 268
73376: STR
73377: PUSH
73378: LD_STRING , 
73380: STR
73381: PUSH
73382: LD_VAR 0 3
73386: PPUSH
73387: LD_INT 2
73389: PPUSH
73390: CALL_OW 268
73394: STR
73395: PUSH
73396: LD_STRING ],
73398: STR
73399: PPUSH
73400: CALL_OW 561
// end ;
73404: GO 73298
73406: POP
73407: POP
// AddToLog ( ]; ) ;
73408: LD_STRING ];
73410: PPUSH
73411: CALL_OW 561
// end ;
73415: LD_VAR 0 2
73419: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73420: LD_INT 0
73422: PPUSH
73423: PPUSH
73424: PPUSH
73425: PPUSH
73426: PPUSH
// if not area or not rate or not max then
73427: LD_VAR 0 1
73431: NOT
73432: PUSH
73433: LD_VAR 0 2
73437: NOT
73438: OR
73439: PUSH
73440: LD_VAR 0 4
73444: NOT
73445: OR
73446: IFFALSE 73450
// exit ;
73448: GO 73639
// while 1 do
73450: LD_INT 1
73452: IFFALSE 73639
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73454: LD_ADDR_VAR 0 9
73458: PUSH
73459: LD_VAR 0 1
73463: PPUSH
73464: LD_INT 1
73466: PPUSH
73467: CALL_OW 287
73471: PUSH
73472: LD_INT 10
73474: MUL
73475: ST_TO_ADDR
// r := rate / 10 ;
73476: LD_ADDR_VAR 0 7
73480: PUSH
73481: LD_VAR 0 2
73485: PUSH
73486: LD_INT 10
73488: DIVREAL
73489: ST_TO_ADDR
// time := 1 1$00 ;
73490: LD_ADDR_VAR 0 8
73494: PUSH
73495: LD_INT 2100
73497: ST_TO_ADDR
// if amount < min then
73498: LD_VAR 0 9
73502: PUSH
73503: LD_VAR 0 3
73507: LESS
73508: IFFALSE 73526
// r := r * 2 else
73510: LD_ADDR_VAR 0 7
73514: PUSH
73515: LD_VAR 0 7
73519: PUSH
73520: LD_INT 2
73522: MUL
73523: ST_TO_ADDR
73524: GO 73552
// if amount > max then
73526: LD_VAR 0 9
73530: PUSH
73531: LD_VAR 0 4
73535: GREATER
73536: IFFALSE 73552
// r := r / 2 ;
73538: LD_ADDR_VAR 0 7
73542: PUSH
73543: LD_VAR 0 7
73547: PUSH
73548: LD_INT 2
73550: DIVREAL
73551: ST_TO_ADDR
// time := time / r ;
73552: LD_ADDR_VAR 0 8
73556: PUSH
73557: LD_VAR 0 8
73561: PUSH
73562: LD_VAR 0 7
73566: DIVREAL
73567: ST_TO_ADDR
// if time < 0 then
73568: LD_VAR 0 8
73572: PUSH
73573: LD_INT 0
73575: LESS
73576: IFFALSE 73593
// time := time * - 1 ;
73578: LD_ADDR_VAR 0 8
73582: PUSH
73583: LD_VAR 0 8
73587: PUSH
73588: LD_INT 1
73590: NEG
73591: MUL
73592: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
73593: LD_VAR 0 8
73597: PUSH
73598: LD_INT 35
73600: PPUSH
73601: LD_INT 875
73603: PPUSH
73604: CALL_OW 12
73608: PLUS
73609: PPUSH
73610: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73614: LD_INT 1
73616: PPUSH
73617: LD_INT 5
73619: PPUSH
73620: CALL_OW 12
73624: PPUSH
73625: LD_VAR 0 1
73629: PPUSH
73630: LD_INT 1
73632: PPUSH
73633: CALL_OW 55
// end ;
73637: GO 73450
// end ;
73639: LD_VAR 0 5
73643: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73644: LD_INT 0
73646: PPUSH
73647: PPUSH
73648: PPUSH
73649: PPUSH
73650: PPUSH
73651: PPUSH
73652: PPUSH
73653: PPUSH
// if not turrets or not factories then
73654: LD_VAR 0 1
73658: NOT
73659: PUSH
73660: LD_VAR 0 2
73664: NOT
73665: OR
73666: IFFALSE 73670
// exit ;
73668: GO 73977
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73670: LD_ADDR_VAR 0 10
73674: PUSH
73675: LD_INT 5
73677: PUSH
73678: LD_INT 6
73680: PUSH
73681: EMPTY
73682: LIST
73683: LIST
73684: PUSH
73685: LD_INT 2
73687: PUSH
73688: LD_INT 4
73690: PUSH
73691: EMPTY
73692: LIST
73693: LIST
73694: PUSH
73695: LD_INT 3
73697: PUSH
73698: LD_INT 5
73700: PUSH
73701: EMPTY
73702: LIST
73703: LIST
73704: PUSH
73705: EMPTY
73706: LIST
73707: LIST
73708: LIST
73709: PUSH
73710: LD_INT 24
73712: PUSH
73713: LD_INT 25
73715: PUSH
73716: EMPTY
73717: LIST
73718: LIST
73719: PUSH
73720: LD_INT 23
73722: PUSH
73723: LD_INT 27
73725: PUSH
73726: EMPTY
73727: LIST
73728: LIST
73729: PUSH
73730: EMPTY
73731: LIST
73732: LIST
73733: PUSH
73734: LD_INT 42
73736: PUSH
73737: LD_INT 43
73739: PUSH
73740: EMPTY
73741: LIST
73742: LIST
73743: PUSH
73744: LD_INT 44
73746: PUSH
73747: LD_INT 46
73749: PUSH
73750: EMPTY
73751: LIST
73752: LIST
73753: PUSH
73754: LD_INT 45
73756: PUSH
73757: LD_INT 47
73759: PUSH
73760: EMPTY
73761: LIST
73762: LIST
73763: PUSH
73764: EMPTY
73765: LIST
73766: LIST
73767: LIST
73768: PUSH
73769: EMPTY
73770: LIST
73771: LIST
73772: LIST
73773: ST_TO_ADDR
// result := [ ] ;
73774: LD_ADDR_VAR 0 3
73778: PUSH
73779: EMPTY
73780: ST_TO_ADDR
// for i in turrets do
73781: LD_ADDR_VAR 0 4
73785: PUSH
73786: LD_VAR 0 1
73790: PUSH
73791: FOR_IN
73792: IFFALSE 73975
// begin nat := GetNation ( i ) ;
73794: LD_ADDR_VAR 0 7
73798: PUSH
73799: LD_VAR 0 4
73803: PPUSH
73804: CALL_OW 248
73808: ST_TO_ADDR
// weapon := 0 ;
73809: LD_ADDR_VAR 0 8
73813: PUSH
73814: LD_INT 0
73816: ST_TO_ADDR
// if not nat then
73817: LD_VAR 0 7
73821: NOT
73822: IFFALSE 73826
// continue ;
73824: GO 73791
// for j in list [ nat ] do
73826: LD_ADDR_VAR 0 5
73830: PUSH
73831: LD_VAR 0 10
73835: PUSH
73836: LD_VAR 0 7
73840: ARRAY
73841: PUSH
73842: FOR_IN
73843: IFFALSE 73884
// if GetBWeapon ( i ) = j [ 1 ] then
73845: LD_VAR 0 4
73849: PPUSH
73850: CALL_OW 269
73854: PUSH
73855: LD_VAR 0 5
73859: PUSH
73860: LD_INT 1
73862: ARRAY
73863: EQUAL
73864: IFFALSE 73882
// begin weapon := j [ 2 ] ;
73866: LD_ADDR_VAR 0 8
73870: PUSH
73871: LD_VAR 0 5
73875: PUSH
73876: LD_INT 2
73878: ARRAY
73879: ST_TO_ADDR
// break ;
73880: GO 73884
// end ;
73882: GO 73842
73884: POP
73885: POP
// if not weapon then
73886: LD_VAR 0 8
73890: NOT
73891: IFFALSE 73895
// continue ;
73893: GO 73791
// for k in factories do
73895: LD_ADDR_VAR 0 6
73899: PUSH
73900: LD_VAR 0 2
73904: PUSH
73905: FOR_IN
73906: IFFALSE 73971
// begin weapons := AvailableWeaponList ( k ) ;
73908: LD_ADDR_VAR 0 9
73912: PUSH
73913: LD_VAR 0 6
73917: PPUSH
73918: CALL_OW 478
73922: ST_TO_ADDR
// if not weapons then
73923: LD_VAR 0 9
73927: NOT
73928: IFFALSE 73932
// continue ;
73930: GO 73905
// if weapon in weapons then
73932: LD_VAR 0 8
73936: PUSH
73937: LD_VAR 0 9
73941: IN
73942: IFFALSE 73969
// begin result := [ i , weapon ] ;
73944: LD_ADDR_VAR 0 3
73948: PUSH
73949: LD_VAR 0 4
73953: PUSH
73954: LD_VAR 0 8
73958: PUSH
73959: EMPTY
73960: LIST
73961: LIST
73962: ST_TO_ADDR
// exit ;
73963: POP
73964: POP
73965: POP
73966: POP
73967: GO 73977
// end ; end ;
73969: GO 73905
73971: POP
73972: POP
// end ;
73973: GO 73791
73975: POP
73976: POP
// end ;
73977: LD_VAR 0 3
73981: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73982: LD_INT 0
73984: PPUSH
// if not side or side > 8 then
73985: LD_VAR 0 3
73989: NOT
73990: PUSH
73991: LD_VAR 0 3
73995: PUSH
73996: LD_INT 8
73998: GREATER
73999: OR
74000: IFFALSE 74004
// exit ;
74002: GO 74063
// if not range then
74004: LD_VAR 0 4
74008: NOT
74009: IFFALSE 74020
// range := - 12 ;
74011: LD_ADDR_VAR 0 4
74015: PUSH
74016: LD_INT 12
74018: NEG
74019: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74020: LD_VAR 0 1
74024: PPUSH
74025: LD_VAR 0 2
74029: PPUSH
74030: LD_VAR 0 3
74034: PPUSH
74035: LD_VAR 0 4
74039: PPUSH
74040: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74044: LD_VAR 0 1
74048: PPUSH
74049: LD_VAR 0 2
74053: PPUSH
74054: LD_VAR 0 3
74058: PPUSH
74059: CALL_OW 331
// end ;
74063: LD_VAR 0 5
74067: RET
// export function Video ( mode ) ; begin
74068: LD_INT 0
74070: PPUSH
// ingame_video = mode ;
74071: LD_ADDR_OWVAR 52
74075: PUSH
74076: LD_VAR 0 1
74080: ST_TO_ADDR
// interface_hidden = mode ;
74081: LD_ADDR_OWVAR 54
74085: PUSH
74086: LD_VAR 0 1
74090: ST_TO_ADDR
// end ;
74091: LD_VAR 0 2
74095: RET
// export function Join ( array , element ) ; begin
74096: LD_INT 0
74098: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74099: LD_ADDR_VAR 0 3
74103: PUSH
74104: LD_VAR 0 1
74108: PPUSH
74109: LD_VAR 0 1
74113: PUSH
74114: LD_INT 1
74116: PLUS
74117: PPUSH
74118: LD_VAR 0 2
74122: PPUSH
74123: CALL_OW 1
74127: ST_TO_ADDR
// end ;
74128: LD_VAR 0 3
74132: RET
// export function JoinUnion ( array , element ) ; begin
74133: LD_INT 0
74135: PPUSH
// result := array union element ;
74136: LD_ADDR_VAR 0 3
74140: PUSH
74141: LD_VAR 0 1
74145: PUSH
74146: LD_VAR 0 2
74150: UNION
74151: ST_TO_ADDR
// end ;
74152: LD_VAR 0 3
74156: RET
// export function GetBehemoths ( side ) ; begin
74157: LD_INT 0
74159: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
74160: LD_ADDR_VAR 0 2
74164: PUSH
74165: LD_INT 22
74167: PUSH
74168: LD_VAR 0 1
74172: PUSH
74173: EMPTY
74174: LIST
74175: LIST
74176: PUSH
74177: LD_INT 31
74179: PUSH
74180: LD_INT 25
74182: PUSH
74183: EMPTY
74184: LIST
74185: LIST
74186: PUSH
74187: EMPTY
74188: LIST
74189: LIST
74190: PPUSH
74191: CALL_OW 69
74195: ST_TO_ADDR
// end ;
74196: LD_VAR 0 2
74200: RET
// export function Shuffle ( array ) ; var i , index ; begin
74201: LD_INT 0
74203: PPUSH
74204: PPUSH
74205: PPUSH
// result := [ ] ;
74206: LD_ADDR_VAR 0 2
74210: PUSH
74211: EMPTY
74212: ST_TO_ADDR
// if not array then
74213: LD_VAR 0 1
74217: NOT
74218: IFFALSE 74222
// exit ;
74220: GO 74321
// Randomize ;
74222: CALL_OW 10
// for i = array downto 1 do
74226: LD_ADDR_VAR 0 3
74230: PUSH
74231: DOUBLE
74232: LD_VAR 0 1
74236: INC
74237: ST_TO_ADDR
74238: LD_INT 1
74240: PUSH
74241: FOR_DOWNTO
74242: IFFALSE 74319
// begin index := rand ( 1 , array ) ;
74244: LD_ADDR_VAR 0 4
74248: PUSH
74249: LD_INT 1
74251: PPUSH
74252: LD_VAR 0 1
74256: PPUSH
74257: CALL_OW 12
74261: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74262: LD_ADDR_VAR 0 2
74266: PUSH
74267: LD_VAR 0 2
74271: PPUSH
74272: LD_VAR 0 2
74276: PUSH
74277: LD_INT 1
74279: PLUS
74280: PPUSH
74281: LD_VAR 0 1
74285: PUSH
74286: LD_VAR 0 4
74290: ARRAY
74291: PPUSH
74292: CALL_OW 2
74296: ST_TO_ADDR
// array := Delete ( array , index ) ;
74297: LD_ADDR_VAR 0 1
74301: PUSH
74302: LD_VAR 0 1
74306: PPUSH
74307: LD_VAR 0 4
74311: PPUSH
74312: CALL_OW 3
74316: ST_TO_ADDR
// end ;
74317: GO 74241
74319: POP
74320: POP
// end ;
74321: LD_VAR 0 2
74325: RET
// export function GetBaseMaterials ( base ) ; begin
74326: LD_INT 0
74328: PPUSH
// result := [ 0 , 0 , 0 ] ;
74329: LD_ADDR_VAR 0 2
74333: PUSH
74334: LD_INT 0
74336: PUSH
74337: LD_INT 0
74339: PUSH
74340: LD_INT 0
74342: PUSH
74343: EMPTY
74344: LIST
74345: LIST
74346: LIST
74347: ST_TO_ADDR
// if not base then
74348: LD_VAR 0 1
74352: NOT
74353: IFFALSE 74357
// exit ;
74355: GO 74406
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74357: LD_ADDR_VAR 0 2
74361: PUSH
74362: LD_VAR 0 1
74366: PPUSH
74367: LD_INT 1
74369: PPUSH
74370: CALL_OW 275
74374: PUSH
74375: LD_VAR 0 1
74379: PPUSH
74380: LD_INT 2
74382: PPUSH
74383: CALL_OW 275
74387: PUSH
74388: LD_VAR 0 1
74392: PPUSH
74393: LD_INT 3
74395: PPUSH
74396: CALL_OW 275
74400: PUSH
74401: EMPTY
74402: LIST
74403: LIST
74404: LIST
74405: ST_TO_ADDR
// end ;
74406: LD_VAR 0 2
74410: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74411: LD_INT 0
74413: PPUSH
74414: PPUSH
// result := array ;
74415: LD_ADDR_VAR 0 3
74419: PUSH
74420: LD_VAR 0 1
74424: ST_TO_ADDR
// if size >= result then
74425: LD_VAR 0 2
74429: PUSH
74430: LD_VAR 0 3
74434: GREATEREQUAL
74435: IFFALSE 74439
// exit ;
74437: GO 74489
// if size then
74439: LD_VAR 0 2
74443: IFFALSE 74489
// for i := array downto size do
74445: LD_ADDR_VAR 0 4
74449: PUSH
74450: DOUBLE
74451: LD_VAR 0 1
74455: INC
74456: ST_TO_ADDR
74457: LD_VAR 0 2
74461: PUSH
74462: FOR_DOWNTO
74463: IFFALSE 74487
// result := Delete ( result , result ) ;
74465: LD_ADDR_VAR 0 3
74469: PUSH
74470: LD_VAR 0 3
74474: PPUSH
74475: LD_VAR 0 3
74479: PPUSH
74480: CALL_OW 3
74484: ST_TO_ADDR
74485: GO 74462
74487: POP
74488: POP
// end ;
74489: LD_VAR 0 3
74493: RET
// export function ComExit ( unit ) ; var tmp ; begin
74494: LD_INT 0
74496: PPUSH
74497: PPUSH
// if not IsInUnit ( unit ) then
74498: LD_VAR 0 1
74502: PPUSH
74503: CALL_OW 310
74507: NOT
74508: IFFALSE 74512
// exit ;
74510: GO 74572
// tmp := IsInUnit ( unit ) ;
74512: LD_ADDR_VAR 0 3
74516: PUSH
74517: LD_VAR 0 1
74521: PPUSH
74522: CALL_OW 310
74526: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74527: LD_VAR 0 3
74531: PPUSH
74532: CALL_OW 247
74536: PUSH
74537: LD_INT 2
74539: EQUAL
74540: IFFALSE 74553
// ComExitVehicle ( unit ) else
74542: LD_VAR 0 1
74546: PPUSH
74547: CALL_OW 121
74551: GO 74562
// ComExitBuilding ( unit ) ;
74553: LD_VAR 0 1
74557: PPUSH
74558: CALL_OW 122
// result := tmp ;
74562: LD_ADDR_VAR 0 2
74566: PUSH
74567: LD_VAR 0 3
74571: ST_TO_ADDR
// end ;
74572: LD_VAR 0 2
74576: RET
// export function ComExitAll ( units ) ; var i ; begin
74577: LD_INT 0
74579: PPUSH
74580: PPUSH
// if not units then
74581: LD_VAR 0 1
74585: NOT
74586: IFFALSE 74590
// exit ;
74588: GO 74616
// for i in units do
74590: LD_ADDR_VAR 0 3
74594: PUSH
74595: LD_VAR 0 1
74599: PUSH
74600: FOR_IN
74601: IFFALSE 74614
// ComExit ( i ) ;
74603: LD_VAR 0 3
74607: PPUSH
74608: CALL 74494 0 1
74612: GO 74600
74614: POP
74615: POP
// end ;
74616: LD_VAR 0 2
74620: RET
// export function ResetHc ; begin
74621: LD_INT 0
74623: PPUSH
// InitHc ;
74624: CALL_OW 19
// hc_importance := 0 ;
74628: LD_ADDR_OWVAR 32
74632: PUSH
74633: LD_INT 0
74635: ST_TO_ADDR
// end ;
74636: LD_VAR 0 1
74640: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74641: LD_INT 0
74643: PPUSH
74644: PPUSH
74645: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74646: LD_ADDR_VAR 0 6
74650: PUSH
74651: LD_VAR 0 1
74655: PUSH
74656: LD_VAR 0 3
74660: PLUS
74661: PUSH
74662: LD_INT 2
74664: DIV
74665: ST_TO_ADDR
// if _x < 0 then
74666: LD_VAR 0 6
74670: PUSH
74671: LD_INT 0
74673: LESS
74674: IFFALSE 74691
// _x := _x * - 1 ;
74676: LD_ADDR_VAR 0 6
74680: PUSH
74681: LD_VAR 0 6
74685: PUSH
74686: LD_INT 1
74688: NEG
74689: MUL
74690: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74691: LD_ADDR_VAR 0 7
74695: PUSH
74696: LD_VAR 0 2
74700: PUSH
74701: LD_VAR 0 4
74705: PLUS
74706: PUSH
74707: LD_INT 2
74709: DIV
74710: ST_TO_ADDR
// if _y < 0 then
74711: LD_VAR 0 7
74715: PUSH
74716: LD_INT 0
74718: LESS
74719: IFFALSE 74736
// _y := _y * - 1 ;
74721: LD_ADDR_VAR 0 7
74725: PUSH
74726: LD_VAR 0 7
74730: PUSH
74731: LD_INT 1
74733: NEG
74734: MUL
74735: ST_TO_ADDR
// result := [ _x , _y ] ;
74736: LD_ADDR_VAR 0 5
74740: PUSH
74741: LD_VAR 0 6
74745: PUSH
74746: LD_VAR 0 7
74750: PUSH
74751: EMPTY
74752: LIST
74753: LIST
74754: ST_TO_ADDR
// end ;
74755: LD_VAR 0 5
74759: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74760: LD_INT 0
74762: PPUSH
74763: PPUSH
74764: PPUSH
74765: PPUSH
// task := GetTaskList ( unit ) ;
74766: LD_ADDR_VAR 0 7
74770: PUSH
74771: LD_VAR 0 1
74775: PPUSH
74776: CALL_OW 437
74780: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74781: LD_VAR 0 7
74785: NOT
74786: PUSH
74787: LD_VAR 0 1
74791: PPUSH
74792: LD_VAR 0 2
74796: PPUSH
74797: CALL_OW 308
74801: NOT
74802: AND
74803: IFFALSE 74807
// exit ;
74805: GO 74925
// if IsInArea ( unit , area ) then
74807: LD_VAR 0 1
74811: PPUSH
74812: LD_VAR 0 2
74816: PPUSH
74817: CALL_OW 308
74821: IFFALSE 74839
// begin ComMoveToArea ( unit , goAway ) ;
74823: LD_VAR 0 1
74827: PPUSH
74828: LD_VAR 0 3
74832: PPUSH
74833: CALL_OW 113
// exit ;
74837: GO 74925
// end ; if task [ 1 ] [ 1 ] <> M then
74839: LD_VAR 0 7
74843: PUSH
74844: LD_INT 1
74846: ARRAY
74847: PUSH
74848: LD_INT 1
74850: ARRAY
74851: PUSH
74852: LD_STRING M
74854: NONEQUAL
74855: IFFALSE 74859
// exit ;
74857: GO 74925
// x := task [ 1 ] [ 2 ] ;
74859: LD_ADDR_VAR 0 5
74863: PUSH
74864: LD_VAR 0 7
74868: PUSH
74869: LD_INT 1
74871: ARRAY
74872: PUSH
74873: LD_INT 2
74875: ARRAY
74876: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74877: LD_ADDR_VAR 0 6
74881: PUSH
74882: LD_VAR 0 7
74886: PUSH
74887: LD_INT 1
74889: ARRAY
74890: PUSH
74891: LD_INT 3
74893: ARRAY
74894: ST_TO_ADDR
// if InArea ( x , y , area ) then
74895: LD_VAR 0 5
74899: PPUSH
74900: LD_VAR 0 6
74904: PPUSH
74905: LD_VAR 0 2
74909: PPUSH
74910: CALL_OW 309
74914: IFFALSE 74925
// ComStop ( unit ) ;
74916: LD_VAR 0 1
74920: PPUSH
74921: CALL_OW 141
// end ;
74925: LD_VAR 0 4
74929: RET
// export function Abs ( value ) ; begin
74930: LD_INT 0
74932: PPUSH
// result := value ;
74933: LD_ADDR_VAR 0 2
74937: PUSH
74938: LD_VAR 0 1
74942: ST_TO_ADDR
// if value < 0 then
74943: LD_VAR 0 1
74947: PUSH
74948: LD_INT 0
74950: LESS
74951: IFFALSE 74968
// result := value * - 1 ;
74953: LD_ADDR_VAR 0 2
74957: PUSH
74958: LD_VAR 0 1
74962: PUSH
74963: LD_INT 1
74965: NEG
74966: MUL
74967: ST_TO_ADDR
// end ;
74968: LD_VAR 0 2
74972: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74973: LD_INT 0
74975: PPUSH
74976: PPUSH
74977: PPUSH
74978: PPUSH
74979: PPUSH
74980: PPUSH
74981: PPUSH
74982: PPUSH
// if not unit or not building then
74983: LD_VAR 0 1
74987: NOT
74988: PUSH
74989: LD_VAR 0 2
74993: NOT
74994: OR
74995: IFFALSE 74999
// exit ;
74997: GO 75225
// x := GetX ( building ) ;
74999: LD_ADDR_VAR 0 4
75003: PUSH
75004: LD_VAR 0 2
75008: PPUSH
75009: CALL_OW 250
75013: ST_TO_ADDR
// y := GetY ( building ) ;
75014: LD_ADDR_VAR 0 6
75018: PUSH
75019: LD_VAR 0 2
75023: PPUSH
75024: CALL_OW 251
75028: ST_TO_ADDR
// d := GetDir ( building ) ;
75029: LD_ADDR_VAR 0 8
75033: PUSH
75034: LD_VAR 0 2
75038: PPUSH
75039: CALL_OW 254
75043: ST_TO_ADDR
// r := 4 ;
75044: LD_ADDR_VAR 0 9
75048: PUSH
75049: LD_INT 4
75051: ST_TO_ADDR
// for i := 1 to 5 do
75052: LD_ADDR_VAR 0 10
75056: PUSH
75057: DOUBLE
75058: LD_INT 1
75060: DEC
75061: ST_TO_ADDR
75062: LD_INT 5
75064: PUSH
75065: FOR_TO
75066: IFFALSE 75223
// begin _x := ShiftX ( x , d , r + i ) ;
75068: LD_ADDR_VAR 0 5
75072: PUSH
75073: LD_VAR 0 4
75077: PPUSH
75078: LD_VAR 0 8
75082: PPUSH
75083: LD_VAR 0 9
75087: PUSH
75088: LD_VAR 0 10
75092: PLUS
75093: PPUSH
75094: CALL_OW 272
75098: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75099: LD_ADDR_VAR 0 7
75103: PUSH
75104: LD_VAR 0 6
75108: PPUSH
75109: LD_VAR 0 8
75113: PPUSH
75114: LD_VAR 0 9
75118: PUSH
75119: LD_VAR 0 10
75123: PLUS
75124: PPUSH
75125: CALL_OW 273
75129: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75130: LD_VAR 0 5
75134: PPUSH
75135: LD_VAR 0 7
75139: PPUSH
75140: CALL_OW 488
75144: PUSH
75145: LD_VAR 0 5
75149: PPUSH
75150: LD_VAR 0 7
75154: PPUSH
75155: CALL_OW 428
75159: PPUSH
75160: CALL_OW 247
75164: PUSH
75165: LD_INT 3
75167: PUSH
75168: LD_INT 2
75170: PUSH
75171: EMPTY
75172: LIST
75173: LIST
75174: IN
75175: NOT
75176: AND
75177: IFFALSE 75221
// begin ComMoveXY ( unit , _x , _y ) ;
75179: LD_VAR 0 1
75183: PPUSH
75184: LD_VAR 0 5
75188: PPUSH
75189: LD_VAR 0 7
75193: PPUSH
75194: CALL_OW 111
// result := [ _x , _y ] ;
75198: LD_ADDR_VAR 0 3
75202: PUSH
75203: LD_VAR 0 5
75207: PUSH
75208: LD_VAR 0 7
75212: PUSH
75213: EMPTY
75214: LIST
75215: LIST
75216: ST_TO_ADDR
// exit ;
75217: POP
75218: POP
75219: GO 75225
// end ; end ;
75221: GO 75065
75223: POP
75224: POP
// end ;
75225: LD_VAR 0 3
75229: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75230: LD_INT 0
75232: PPUSH
75233: PPUSH
75234: PPUSH
// result := 0 ;
75235: LD_ADDR_VAR 0 3
75239: PUSH
75240: LD_INT 0
75242: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75243: LD_VAR 0 1
75247: PUSH
75248: LD_INT 0
75250: LESS
75251: PUSH
75252: LD_VAR 0 1
75256: PUSH
75257: LD_INT 8
75259: GREATER
75260: OR
75261: PUSH
75262: LD_VAR 0 2
75266: PUSH
75267: LD_INT 0
75269: LESS
75270: OR
75271: PUSH
75272: LD_VAR 0 2
75276: PUSH
75277: LD_INT 8
75279: GREATER
75280: OR
75281: IFFALSE 75285
// exit ;
75283: GO 75360
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75285: LD_ADDR_VAR 0 4
75289: PUSH
75290: LD_INT 22
75292: PUSH
75293: LD_VAR 0 2
75297: PUSH
75298: EMPTY
75299: LIST
75300: LIST
75301: PPUSH
75302: CALL_OW 69
75306: PUSH
75307: FOR_IN
75308: IFFALSE 75358
// begin un := UnitShoot ( i ) ;
75310: LD_ADDR_VAR 0 5
75314: PUSH
75315: LD_VAR 0 4
75319: PPUSH
75320: CALL_OW 504
75324: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75325: LD_VAR 0 5
75329: PPUSH
75330: CALL_OW 255
75334: PUSH
75335: LD_VAR 0 1
75339: EQUAL
75340: IFFALSE 75356
// begin result := un ;
75342: LD_ADDR_VAR 0 3
75346: PUSH
75347: LD_VAR 0 5
75351: ST_TO_ADDR
// exit ;
75352: POP
75353: POP
75354: GO 75360
// end ; end ;
75356: GO 75307
75358: POP
75359: POP
// end ;
75360: LD_VAR 0 3
75364: RET
// export function GetCargoBay ( units ) ; begin
75365: LD_INT 0
75367: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75368: LD_ADDR_VAR 0 2
75372: PUSH
75373: LD_VAR 0 1
75377: PPUSH
75378: LD_INT 2
75380: PUSH
75381: LD_INT 34
75383: PUSH
75384: LD_INT 12
75386: PUSH
75387: EMPTY
75388: LIST
75389: LIST
75390: PUSH
75391: LD_INT 34
75393: PUSH
75394: LD_INT 51
75396: PUSH
75397: EMPTY
75398: LIST
75399: LIST
75400: PUSH
75401: LD_INT 34
75403: PUSH
75404: LD_INT 32
75406: PUSH
75407: EMPTY
75408: LIST
75409: LIST
75410: PUSH
75411: LD_INT 34
75413: PUSH
75414: LD_INT 89
75416: PUSH
75417: EMPTY
75418: LIST
75419: LIST
75420: PUSH
75421: EMPTY
75422: LIST
75423: LIST
75424: LIST
75425: LIST
75426: LIST
75427: PPUSH
75428: CALL_OW 72
75432: ST_TO_ADDR
// end ;
75433: LD_VAR 0 2
75437: RET
// export function Negate ( value ) ; begin
75438: LD_INT 0
75440: PPUSH
// result := not value ;
75441: LD_ADDR_VAR 0 2
75445: PUSH
75446: LD_VAR 0 1
75450: NOT
75451: ST_TO_ADDR
// end ;
75452: LD_VAR 0 2
75456: RET
// export function Inc ( value ) ; begin
75457: LD_INT 0
75459: PPUSH
// result := value + 1 ;
75460: LD_ADDR_VAR 0 2
75464: PUSH
75465: LD_VAR 0 1
75469: PUSH
75470: LD_INT 1
75472: PLUS
75473: ST_TO_ADDR
// end ;
75474: LD_VAR 0 2
75478: RET
// export function Dec ( value ) ; begin
75479: LD_INT 0
75481: PPUSH
// result := value - 1 ;
75482: LD_ADDR_VAR 0 2
75486: PUSH
75487: LD_VAR 0 1
75491: PUSH
75492: LD_INT 1
75494: MINUS
75495: ST_TO_ADDR
// end ;
75496: LD_VAR 0 2
75500: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75501: LD_INT 0
75503: PPUSH
75504: PPUSH
75505: PPUSH
75506: PPUSH
75507: PPUSH
75508: PPUSH
75509: PPUSH
75510: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75511: LD_VAR 0 1
75515: PPUSH
75516: LD_VAR 0 2
75520: PPUSH
75521: CALL_OW 488
75525: NOT
75526: PUSH
75527: LD_VAR 0 3
75531: PPUSH
75532: LD_VAR 0 4
75536: PPUSH
75537: CALL_OW 488
75541: NOT
75542: OR
75543: IFFALSE 75556
// begin result := - 1 ;
75545: LD_ADDR_VAR 0 5
75549: PUSH
75550: LD_INT 1
75552: NEG
75553: ST_TO_ADDR
// exit ;
75554: GO 75791
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75556: LD_ADDR_VAR 0 12
75560: PUSH
75561: LD_VAR 0 1
75565: PPUSH
75566: LD_VAR 0 2
75570: PPUSH
75571: LD_VAR 0 3
75575: PPUSH
75576: LD_VAR 0 4
75580: PPUSH
75581: CALL 74641 0 4
75585: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75586: LD_ADDR_VAR 0 11
75590: PUSH
75591: LD_VAR 0 1
75595: PPUSH
75596: LD_VAR 0 2
75600: PPUSH
75601: LD_VAR 0 12
75605: PUSH
75606: LD_INT 1
75608: ARRAY
75609: PPUSH
75610: LD_VAR 0 12
75614: PUSH
75615: LD_INT 2
75617: ARRAY
75618: PPUSH
75619: CALL_OW 298
75623: ST_TO_ADDR
// distance := 9999 ;
75624: LD_ADDR_VAR 0 10
75628: PUSH
75629: LD_INT 9999
75631: ST_TO_ADDR
// for i := 0 to 5 do
75632: LD_ADDR_VAR 0 6
75636: PUSH
75637: DOUBLE
75638: LD_INT 0
75640: DEC
75641: ST_TO_ADDR
75642: LD_INT 5
75644: PUSH
75645: FOR_TO
75646: IFFALSE 75789
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75648: LD_ADDR_VAR 0 7
75652: PUSH
75653: LD_VAR 0 1
75657: PPUSH
75658: LD_VAR 0 6
75662: PPUSH
75663: LD_VAR 0 11
75667: PPUSH
75668: CALL_OW 272
75672: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75673: LD_ADDR_VAR 0 8
75677: PUSH
75678: LD_VAR 0 2
75682: PPUSH
75683: LD_VAR 0 6
75687: PPUSH
75688: LD_VAR 0 11
75692: PPUSH
75693: CALL_OW 273
75697: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75698: LD_VAR 0 7
75702: PPUSH
75703: LD_VAR 0 8
75707: PPUSH
75708: CALL_OW 488
75712: NOT
75713: IFFALSE 75717
// continue ;
75715: GO 75645
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75717: LD_ADDR_VAR 0 9
75721: PUSH
75722: LD_VAR 0 12
75726: PUSH
75727: LD_INT 1
75729: ARRAY
75730: PPUSH
75731: LD_VAR 0 12
75735: PUSH
75736: LD_INT 2
75738: ARRAY
75739: PPUSH
75740: LD_VAR 0 7
75744: PPUSH
75745: LD_VAR 0 8
75749: PPUSH
75750: CALL_OW 298
75754: ST_TO_ADDR
// if tmp < distance then
75755: LD_VAR 0 9
75759: PUSH
75760: LD_VAR 0 10
75764: LESS
75765: IFFALSE 75787
// begin result := i ;
75767: LD_ADDR_VAR 0 5
75771: PUSH
75772: LD_VAR 0 6
75776: ST_TO_ADDR
// distance := tmp ;
75777: LD_ADDR_VAR 0 10
75781: PUSH
75782: LD_VAR 0 9
75786: ST_TO_ADDR
// end ; end ;
75787: GO 75645
75789: POP
75790: POP
// end ;
75791: LD_VAR 0 5
75795: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75796: LD_INT 0
75798: PPUSH
75799: PPUSH
// if not driver or not IsInUnit ( driver ) then
75800: LD_VAR 0 1
75804: NOT
75805: PUSH
75806: LD_VAR 0 1
75810: PPUSH
75811: CALL_OW 310
75815: NOT
75816: OR
75817: IFFALSE 75821
// exit ;
75819: GO 75911
// vehicle := IsInUnit ( driver ) ;
75821: LD_ADDR_VAR 0 3
75825: PUSH
75826: LD_VAR 0 1
75830: PPUSH
75831: CALL_OW 310
75835: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75836: LD_VAR 0 1
75840: PPUSH
75841: LD_STRING \
75843: PUSH
75844: LD_INT 0
75846: PUSH
75847: LD_INT 0
75849: PUSH
75850: LD_INT 0
75852: PUSH
75853: LD_INT 0
75855: PUSH
75856: LD_INT 0
75858: PUSH
75859: LD_INT 0
75861: PUSH
75862: EMPTY
75863: LIST
75864: LIST
75865: LIST
75866: LIST
75867: LIST
75868: LIST
75869: LIST
75870: PUSH
75871: LD_STRING E
75873: PUSH
75874: LD_INT 0
75876: PUSH
75877: LD_INT 0
75879: PUSH
75880: LD_VAR 0 3
75884: PUSH
75885: LD_INT 0
75887: PUSH
75888: LD_INT 0
75890: PUSH
75891: LD_INT 0
75893: PUSH
75894: EMPTY
75895: LIST
75896: LIST
75897: LIST
75898: LIST
75899: LIST
75900: LIST
75901: LIST
75902: PUSH
75903: EMPTY
75904: LIST
75905: LIST
75906: PPUSH
75907: CALL_OW 446
// end ;
75911: LD_VAR 0 2
75915: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75916: LD_INT 0
75918: PPUSH
75919: PPUSH
// if not driver or not IsInUnit ( driver ) then
75920: LD_VAR 0 1
75924: NOT
75925: PUSH
75926: LD_VAR 0 1
75930: PPUSH
75931: CALL_OW 310
75935: NOT
75936: OR
75937: IFFALSE 75941
// exit ;
75939: GO 76031
// vehicle := IsInUnit ( driver ) ;
75941: LD_ADDR_VAR 0 3
75945: PUSH
75946: LD_VAR 0 1
75950: PPUSH
75951: CALL_OW 310
75955: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75956: LD_VAR 0 1
75960: PPUSH
75961: LD_STRING \
75963: PUSH
75964: LD_INT 0
75966: PUSH
75967: LD_INT 0
75969: PUSH
75970: LD_INT 0
75972: PUSH
75973: LD_INT 0
75975: PUSH
75976: LD_INT 0
75978: PUSH
75979: LD_INT 0
75981: PUSH
75982: EMPTY
75983: LIST
75984: LIST
75985: LIST
75986: LIST
75987: LIST
75988: LIST
75989: LIST
75990: PUSH
75991: LD_STRING E
75993: PUSH
75994: LD_INT 0
75996: PUSH
75997: LD_INT 0
75999: PUSH
76000: LD_VAR 0 3
76004: PUSH
76005: LD_INT 0
76007: PUSH
76008: LD_INT 0
76010: PUSH
76011: LD_INT 0
76013: PUSH
76014: EMPTY
76015: LIST
76016: LIST
76017: LIST
76018: LIST
76019: LIST
76020: LIST
76021: LIST
76022: PUSH
76023: EMPTY
76024: LIST
76025: LIST
76026: PPUSH
76027: CALL_OW 447
// end ;
76031: LD_VAR 0 2
76035: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76036: LD_INT 0
76038: PPUSH
76039: PPUSH
76040: PPUSH
// tmp := [ ] ;
76041: LD_ADDR_VAR 0 5
76045: PUSH
76046: EMPTY
76047: ST_TO_ADDR
// for i in units do
76048: LD_ADDR_VAR 0 4
76052: PUSH
76053: LD_VAR 0 1
76057: PUSH
76058: FOR_IN
76059: IFFALSE 76097
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76061: LD_ADDR_VAR 0 5
76065: PUSH
76066: LD_VAR 0 5
76070: PPUSH
76071: LD_VAR 0 5
76075: PUSH
76076: LD_INT 1
76078: PLUS
76079: PPUSH
76080: LD_VAR 0 4
76084: PPUSH
76085: CALL_OW 256
76089: PPUSH
76090: CALL_OW 2
76094: ST_TO_ADDR
76095: GO 76058
76097: POP
76098: POP
// if not tmp then
76099: LD_VAR 0 5
76103: NOT
76104: IFFALSE 76108
// exit ;
76106: GO 76156
// if asc then
76108: LD_VAR 0 2
76112: IFFALSE 76136
// result := SortListByListAsc ( units , tmp ) else
76114: LD_ADDR_VAR 0 3
76118: PUSH
76119: LD_VAR 0 1
76123: PPUSH
76124: LD_VAR 0 5
76128: PPUSH
76129: CALL_OW 76
76133: ST_TO_ADDR
76134: GO 76156
// result := SortListByListDesc ( units , tmp ) ;
76136: LD_ADDR_VAR 0 3
76140: PUSH
76141: LD_VAR 0 1
76145: PPUSH
76146: LD_VAR 0 5
76150: PPUSH
76151: CALL_OW 77
76155: ST_TO_ADDR
// end ;
76156: LD_VAR 0 3
76160: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76161: LD_INT 0
76163: PPUSH
76164: PPUSH
// task := GetTaskList ( mech ) ;
76165: LD_ADDR_VAR 0 4
76169: PUSH
76170: LD_VAR 0 1
76174: PPUSH
76175: CALL_OW 437
76179: ST_TO_ADDR
// if not task then
76180: LD_VAR 0 4
76184: NOT
76185: IFFALSE 76189
// exit ;
76187: GO 76231
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76189: LD_ADDR_VAR 0 3
76193: PUSH
76194: LD_VAR 0 4
76198: PUSH
76199: LD_INT 1
76201: ARRAY
76202: PUSH
76203: LD_INT 1
76205: ARRAY
76206: PUSH
76207: LD_STRING r
76209: EQUAL
76210: PUSH
76211: LD_VAR 0 4
76215: PUSH
76216: LD_INT 1
76218: ARRAY
76219: PUSH
76220: LD_INT 4
76222: ARRAY
76223: PUSH
76224: LD_VAR 0 2
76228: EQUAL
76229: AND
76230: ST_TO_ADDR
// end ;
76231: LD_VAR 0 3
76235: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76236: LD_INT 0
76238: PPUSH
// SetDir ( unit , d ) ;
76239: LD_VAR 0 1
76243: PPUSH
76244: LD_VAR 0 4
76248: PPUSH
76249: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76253: LD_VAR 0 1
76257: PPUSH
76258: LD_VAR 0 2
76262: PPUSH
76263: LD_VAR 0 3
76267: PPUSH
76268: LD_VAR 0 5
76272: PPUSH
76273: CALL_OW 48
// end ;
76277: LD_VAR 0 6
76281: RET
// export function ToNaturalNumber ( number ) ; begin
76282: LD_INT 0
76284: PPUSH
// result := number div 1 ;
76285: LD_ADDR_VAR 0 2
76289: PUSH
76290: LD_VAR 0 1
76294: PUSH
76295: LD_INT 1
76297: DIV
76298: ST_TO_ADDR
// if number < 0 then
76299: LD_VAR 0 1
76303: PUSH
76304: LD_INT 0
76306: LESS
76307: IFFALSE 76317
// result := 0 ;
76309: LD_ADDR_VAR 0 2
76313: PUSH
76314: LD_INT 0
76316: ST_TO_ADDR
// end ;
76317: LD_VAR 0 2
76321: RET
// export function SortByClass ( units , class ) ; var un ; begin
76322: LD_INT 0
76324: PPUSH
76325: PPUSH
// if not units or not class then
76326: LD_VAR 0 1
76330: NOT
76331: PUSH
76332: LD_VAR 0 2
76336: NOT
76337: OR
76338: IFFALSE 76342
// exit ;
76340: GO 76437
// result := [ ] ;
76342: LD_ADDR_VAR 0 3
76346: PUSH
76347: EMPTY
76348: ST_TO_ADDR
// for un in units do
76349: LD_ADDR_VAR 0 4
76353: PUSH
76354: LD_VAR 0 1
76358: PUSH
76359: FOR_IN
76360: IFFALSE 76435
// if GetClass ( un ) = class then
76362: LD_VAR 0 4
76366: PPUSH
76367: CALL_OW 257
76371: PUSH
76372: LD_VAR 0 2
76376: EQUAL
76377: IFFALSE 76404
// result := Insert ( result , 1 , un ) else
76379: LD_ADDR_VAR 0 3
76383: PUSH
76384: LD_VAR 0 3
76388: PPUSH
76389: LD_INT 1
76391: PPUSH
76392: LD_VAR 0 4
76396: PPUSH
76397: CALL_OW 2
76401: ST_TO_ADDR
76402: GO 76433
// result := Replace ( result , result + 1 , un ) ;
76404: LD_ADDR_VAR 0 3
76408: PUSH
76409: LD_VAR 0 3
76413: PPUSH
76414: LD_VAR 0 3
76418: PUSH
76419: LD_INT 1
76421: PLUS
76422: PPUSH
76423: LD_VAR 0 4
76427: PPUSH
76428: CALL_OW 1
76432: ST_TO_ADDR
76433: GO 76359
76435: POP
76436: POP
// end ;
76437: LD_VAR 0 3
76441: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76442: LD_INT 0
76444: PPUSH
76445: PPUSH
76446: PPUSH
76447: PPUSH
76448: PPUSH
76449: PPUSH
76450: PPUSH
// result := [ ] ;
76451: LD_ADDR_VAR 0 4
76455: PUSH
76456: EMPTY
76457: ST_TO_ADDR
// if x - r < 0 then
76458: LD_VAR 0 1
76462: PUSH
76463: LD_VAR 0 3
76467: MINUS
76468: PUSH
76469: LD_INT 0
76471: LESS
76472: IFFALSE 76484
// min_x := 0 else
76474: LD_ADDR_VAR 0 8
76478: PUSH
76479: LD_INT 0
76481: ST_TO_ADDR
76482: GO 76500
// min_x := x - r ;
76484: LD_ADDR_VAR 0 8
76488: PUSH
76489: LD_VAR 0 1
76493: PUSH
76494: LD_VAR 0 3
76498: MINUS
76499: ST_TO_ADDR
// if y - r < 0 then
76500: LD_VAR 0 2
76504: PUSH
76505: LD_VAR 0 3
76509: MINUS
76510: PUSH
76511: LD_INT 0
76513: LESS
76514: IFFALSE 76526
// min_y := 0 else
76516: LD_ADDR_VAR 0 7
76520: PUSH
76521: LD_INT 0
76523: ST_TO_ADDR
76524: GO 76542
// min_y := y - r ;
76526: LD_ADDR_VAR 0 7
76530: PUSH
76531: LD_VAR 0 2
76535: PUSH
76536: LD_VAR 0 3
76540: MINUS
76541: ST_TO_ADDR
// max_x := x + r ;
76542: LD_ADDR_VAR 0 9
76546: PUSH
76547: LD_VAR 0 1
76551: PUSH
76552: LD_VAR 0 3
76556: PLUS
76557: ST_TO_ADDR
// max_y := y + r ;
76558: LD_ADDR_VAR 0 10
76562: PUSH
76563: LD_VAR 0 2
76567: PUSH
76568: LD_VAR 0 3
76572: PLUS
76573: ST_TO_ADDR
// for _x = min_x to max_x do
76574: LD_ADDR_VAR 0 5
76578: PUSH
76579: DOUBLE
76580: LD_VAR 0 8
76584: DEC
76585: ST_TO_ADDR
76586: LD_VAR 0 9
76590: PUSH
76591: FOR_TO
76592: IFFALSE 76693
// for _y = min_y to max_y do
76594: LD_ADDR_VAR 0 6
76598: PUSH
76599: DOUBLE
76600: LD_VAR 0 7
76604: DEC
76605: ST_TO_ADDR
76606: LD_VAR 0 10
76610: PUSH
76611: FOR_TO
76612: IFFALSE 76689
// begin if not ValidHex ( _x , _y ) then
76614: LD_VAR 0 5
76618: PPUSH
76619: LD_VAR 0 6
76623: PPUSH
76624: CALL_OW 488
76628: NOT
76629: IFFALSE 76633
// continue ;
76631: GO 76611
// if GetResourceTypeXY ( _x , _y ) then
76633: LD_VAR 0 5
76637: PPUSH
76638: LD_VAR 0 6
76642: PPUSH
76643: CALL_OW 283
76647: IFFALSE 76687
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76649: LD_ADDR_VAR 0 4
76653: PUSH
76654: LD_VAR 0 4
76658: PPUSH
76659: LD_VAR 0 4
76663: PUSH
76664: LD_INT 1
76666: PLUS
76667: PPUSH
76668: LD_VAR 0 5
76672: PUSH
76673: LD_VAR 0 6
76677: PUSH
76678: EMPTY
76679: LIST
76680: LIST
76681: PPUSH
76682: CALL_OW 1
76686: ST_TO_ADDR
// end ;
76687: GO 76611
76689: POP
76690: POP
76691: GO 76591
76693: POP
76694: POP
// end ;
76695: LD_VAR 0 4
76699: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76700: LD_INT 0
76702: PPUSH
76703: PPUSH
76704: PPUSH
76705: PPUSH
76706: PPUSH
76707: PPUSH
76708: PPUSH
76709: PPUSH
// if not units then
76710: LD_VAR 0 1
76714: NOT
76715: IFFALSE 76719
// exit ;
76717: GO 77243
// result := UnitFilter ( units , [ f_ok ] ) ;
76719: LD_ADDR_VAR 0 3
76723: PUSH
76724: LD_VAR 0 1
76728: PPUSH
76729: LD_INT 50
76731: PUSH
76732: EMPTY
76733: LIST
76734: PPUSH
76735: CALL_OW 72
76739: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76740: LD_ADDR_VAR 0 8
76744: PUSH
76745: LD_VAR 0 1
76749: PUSH
76750: LD_INT 1
76752: ARRAY
76753: PPUSH
76754: CALL_OW 255
76758: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
76759: LD_ADDR_VAR 0 10
76763: PUSH
76764: LD_INT 29
76766: PUSH
76767: LD_INT 91
76769: PUSH
76770: LD_INT 49
76772: PUSH
76773: EMPTY
76774: LIST
76775: LIST
76776: LIST
76777: ST_TO_ADDR
// if not result then
76778: LD_VAR 0 3
76782: NOT
76783: IFFALSE 76787
// exit ;
76785: GO 77243
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76787: LD_ADDR_VAR 0 5
76791: PUSH
76792: LD_INT 81
76794: PUSH
76795: LD_VAR 0 8
76799: PUSH
76800: EMPTY
76801: LIST
76802: LIST
76803: PPUSH
76804: CALL_OW 69
76808: ST_TO_ADDR
// for i in result do
76809: LD_ADDR_VAR 0 4
76813: PUSH
76814: LD_VAR 0 3
76818: PUSH
76819: FOR_IN
76820: IFFALSE 77241
// begin tag := GetTag ( i ) + 1 ;
76822: LD_ADDR_VAR 0 9
76826: PUSH
76827: LD_VAR 0 4
76831: PPUSH
76832: CALL_OW 110
76836: PUSH
76837: LD_INT 1
76839: PLUS
76840: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76841: LD_ADDR_VAR 0 7
76845: PUSH
76846: LD_VAR 0 4
76850: PPUSH
76851: CALL_OW 250
76855: PPUSH
76856: LD_VAR 0 4
76860: PPUSH
76861: CALL_OW 251
76865: PPUSH
76866: LD_INT 6
76868: PPUSH
76869: CALL 76442 0 3
76873: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
76874: LD_VAR 0 4
76878: PPUSH
76879: CALL_OW 247
76883: PUSH
76884: LD_INT 2
76886: EQUAL
76887: PUSH
76888: LD_VAR 0 7
76892: AND
76893: PUSH
76894: LD_VAR 0 4
76898: PPUSH
76899: CALL_OW 264
76903: PUSH
76904: LD_VAR 0 10
76908: IN
76909: NOT
76910: AND
76911: IFFALSE 76950
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76913: LD_VAR 0 4
76917: PPUSH
76918: LD_VAR 0 7
76922: PUSH
76923: LD_INT 1
76925: ARRAY
76926: PUSH
76927: LD_INT 1
76929: ARRAY
76930: PPUSH
76931: LD_VAR 0 7
76935: PUSH
76936: LD_INT 1
76938: ARRAY
76939: PUSH
76940: LD_INT 2
76942: ARRAY
76943: PPUSH
76944: CALL_OW 116
76948: GO 77239
// if path > tag then
76950: LD_VAR 0 2
76954: PUSH
76955: LD_VAR 0 9
76959: GREATER
76960: IFFALSE 77168
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
76962: LD_ADDR_VAR 0 6
76966: PUSH
76967: LD_VAR 0 5
76971: PPUSH
76972: LD_INT 91
76974: PUSH
76975: LD_VAR 0 4
76979: PUSH
76980: LD_INT 8
76982: PUSH
76983: EMPTY
76984: LIST
76985: LIST
76986: LIST
76987: PPUSH
76988: CALL_OW 72
76992: ST_TO_ADDR
// if nearEnemy then
76993: LD_VAR 0 6
76997: IFFALSE 77066
// begin if GetWeapon ( i ) = ru_time_lapser then
76999: LD_VAR 0 4
77003: PPUSH
77004: CALL_OW 264
77008: PUSH
77009: LD_INT 49
77011: EQUAL
77012: IFFALSE 77040
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77014: LD_VAR 0 4
77018: PPUSH
77019: LD_VAR 0 6
77023: PPUSH
77024: LD_VAR 0 4
77028: PPUSH
77029: CALL_OW 74
77033: PPUSH
77034: CALL_OW 112
77038: GO 77064
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
77040: LD_VAR 0 4
77044: PPUSH
77045: LD_VAR 0 6
77049: PPUSH
77050: LD_VAR 0 4
77054: PPUSH
77055: CALL_OW 74
77059: PPUSH
77060: CALL 78168 0 2
// end else
77064: GO 77166
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77066: LD_VAR 0 4
77070: PPUSH
77071: LD_VAR 0 2
77075: PUSH
77076: LD_VAR 0 9
77080: ARRAY
77081: PUSH
77082: LD_INT 1
77084: ARRAY
77085: PPUSH
77086: LD_VAR 0 2
77090: PUSH
77091: LD_VAR 0 9
77095: ARRAY
77096: PUSH
77097: LD_INT 2
77099: ARRAY
77100: PPUSH
77101: CALL_OW 297
77105: PUSH
77106: LD_INT 6
77108: GREATER
77109: IFFALSE 77152
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77111: LD_VAR 0 4
77115: PPUSH
77116: LD_VAR 0 2
77120: PUSH
77121: LD_VAR 0 9
77125: ARRAY
77126: PUSH
77127: LD_INT 1
77129: ARRAY
77130: PPUSH
77131: LD_VAR 0 2
77135: PUSH
77136: LD_VAR 0 9
77140: ARRAY
77141: PUSH
77142: LD_INT 2
77144: ARRAY
77145: PPUSH
77146: CALL_OW 114
77150: GO 77166
// SetTag ( i , tag ) ;
77152: LD_VAR 0 4
77156: PPUSH
77157: LD_VAR 0 9
77161: PPUSH
77162: CALL_OW 109
// end else
77166: GO 77239
// if enemy then
77168: LD_VAR 0 5
77172: IFFALSE 77239
// begin if GetWeapon ( i ) = ru_time_lapser then
77174: LD_VAR 0 4
77178: PPUSH
77179: CALL_OW 264
77183: PUSH
77184: LD_INT 49
77186: EQUAL
77187: IFFALSE 77215
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
77189: LD_VAR 0 4
77193: PPUSH
77194: LD_VAR 0 5
77198: PPUSH
77199: LD_VAR 0 4
77203: PPUSH
77204: CALL_OW 74
77208: PPUSH
77209: CALL_OW 112
77213: GO 77239
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77215: LD_VAR 0 4
77219: PPUSH
77220: LD_VAR 0 5
77224: PPUSH
77225: LD_VAR 0 4
77229: PPUSH
77230: CALL_OW 74
77234: PPUSH
77235: CALL 78168 0 2
// end ; end ;
77239: GO 76819
77241: POP
77242: POP
// end ;
77243: LD_VAR 0 3
77247: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77248: LD_INT 0
77250: PPUSH
77251: PPUSH
77252: PPUSH
// if not unit or IsInUnit ( unit ) then
77253: LD_VAR 0 1
77257: NOT
77258: PUSH
77259: LD_VAR 0 1
77263: PPUSH
77264: CALL_OW 310
77268: OR
77269: IFFALSE 77273
// exit ;
77271: GO 77364
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77273: LD_ADDR_VAR 0 4
77277: PUSH
77278: LD_VAR 0 1
77282: PPUSH
77283: CALL_OW 250
77287: PPUSH
77288: LD_VAR 0 2
77292: PPUSH
77293: LD_INT 1
77295: PPUSH
77296: CALL_OW 272
77300: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77301: LD_ADDR_VAR 0 5
77305: PUSH
77306: LD_VAR 0 1
77310: PPUSH
77311: CALL_OW 251
77315: PPUSH
77316: LD_VAR 0 2
77320: PPUSH
77321: LD_INT 1
77323: PPUSH
77324: CALL_OW 273
77328: ST_TO_ADDR
// if ValidHex ( x , y ) then
77329: LD_VAR 0 4
77333: PPUSH
77334: LD_VAR 0 5
77338: PPUSH
77339: CALL_OW 488
77343: IFFALSE 77364
// ComTurnXY ( unit , x , y ) ;
77345: LD_VAR 0 1
77349: PPUSH
77350: LD_VAR 0 4
77354: PPUSH
77355: LD_VAR 0 5
77359: PPUSH
77360: CALL_OW 118
// end ;
77364: LD_VAR 0 3
77368: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77369: LD_INT 0
77371: PPUSH
77372: PPUSH
// result := false ;
77373: LD_ADDR_VAR 0 3
77377: PUSH
77378: LD_INT 0
77380: ST_TO_ADDR
// if not units then
77381: LD_VAR 0 2
77385: NOT
77386: IFFALSE 77390
// exit ;
77388: GO 77435
// for i in units do
77390: LD_ADDR_VAR 0 4
77394: PUSH
77395: LD_VAR 0 2
77399: PUSH
77400: FOR_IN
77401: IFFALSE 77433
// if See ( side , i ) then
77403: LD_VAR 0 1
77407: PPUSH
77408: LD_VAR 0 4
77412: PPUSH
77413: CALL_OW 292
77417: IFFALSE 77431
// begin result := true ;
77419: LD_ADDR_VAR 0 3
77423: PUSH
77424: LD_INT 1
77426: ST_TO_ADDR
// exit ;
77427: POP
77428: POP
77429: GO 77435
// end ;
77431: GO 77400
77433: POP
77434: POP
// end ;
77435: LD_VAR 0 3
77439: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77440: LD_INT 0
77442: PPUSH
77443: PPUSH
77444: PPUSH
77445: PPUSH
// if not unit or not points then
77446: LD_VAR 0 1
77450: NOT
77451: PUSH
77452: LD_VAR 0 2
77456: NOT
77457: OR
77458: IFFALSE 77462
// exit ;
77460: GO 77552
// dist := 99999 ;
77462: LD_ADDR_VAR 0 5
77466: PUSH
77467: LD_INT 99999
77469: ST_TO_ADDR
// for i in points do
77470: LD_ADDR_VAR 0 4
77474: PUSH
77475: LD_VAR 0 2
77479: PUSH
77480: FOR_IN
77481: IFFALSE 77550
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77483: LD_ADDR_VAR 0 6
77487: PUSH
77488: LD_VAR 0 1
77492: PPUSH
77493: LD_VAR 0 4
77497: PUSH
77498: LD_INT 1
77500: ARRAY
77501: PPUSH
77502: LD_VAR 0 4
77506: PUSH
77507: LD_INT 2
77509: ARRAY
77510: PPUSH
77511: CALL_OW 297
77515: ST_TO_ADDR
// if tmpDist < dist then
77516: LD_VAR 0 6
77520: PUSH
77521: LD_VAR 0 5
77525: LESS
77526: IFFALSE 77548
// begin result := i ;
77528: LD_ADDR_VAR 0 3
77532: PUSH
77533: LD_VAR 0 4
77537: ST_TO_ADDR
// dist := tmpDist ;
77538: LD_ADDR_VAR 0 5
77542: PUSH
77543: LD_VAR 0 6
77547: ST_TO_ADDR
// end ; end ;
77548: GO 77480
77550: POP
77551: POP
// end ;
77552: LD_VAR 0 3
77556: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
77557: LD_INT 0
77559: PPUSH
// uc_side := side ;
77560: LD_ADDR_OWVAR 20
77564: PUSH
77565: LD_VAR 0 1
77569: ST_TO_ADDR
// uc_nation := 3 ;
77570: LD_ADDR_OWVAR 21
77574: PUSH
77575: LD_INT 3
77577: ST_TO_ADDR
// vc_chassis := 25 ;
77578: LD_ADDR_OWVAR 37
77582: PUSH
77583: LD_INT 25
77585: ST_TO_ADDR
// vc_engine := engine_siberite ;
77586: LD_ADDR_OWVAR 39
77590: PUSH
77591: LD_INT 3
77593: ST_TO_ADDR
// vc_control := control_computer ;
77594: LD_ADDR_OWVAR 38
77598: PUSH
77599: LD_INT 3
77601: ST_TO_ADDR
// vc_weapon := 59 ;
77602: LD_ADDR_OWVAR 40
77606: PUSH
77607: LD_INT 59
77609: ST_TO_ADDR
// result := CreateVehicle ;
77610: LD_ADDR_VAR 0 5
77614: PUSH
77615: CALL_OW 45
77619: ST_TO_ADDR
// SetDir ( result , d ) ;
77620: LD_VAR 0 5
77624: PPUSH
77625: LD_VAR 0 4
77629: PPUSH
77630: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
77634: LD_VAR 0 5
77638: PPUSH
77639: LD_VAR 0 2
77643: PPUSH
77644: LD_VAR 0 3
77648: PPUSH
77649: LD_INT 0
77651: PPUSH
77652: CALL_OW 48
// end ;
77656: LD_VAR 0 5
77660: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
77661: LD_INT 0
77663: PPUSH
77664: PPUSH
77665: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
77666: LD_ADDR_VAR 0 2
77670: PUSH
77671: LD_INT 0
77673: PUSH
77674: LD_INT 0
77676: PUSH
77677: LD_INT 0
77679: PUSH
77680: LD_INT 0
77682: PUSH
77683: EMPTY
77684: LIST
77685: LIST
77686: LIST
77687: LIST
77688: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
77689: LD_VAR 0 1
77693: NOT
77694: PUSH
77695: LD_VAR 0 1
77699: PPUSH
77700: CALL_OW 264
77704: PUSH
77705: LD_INT 12
77707: PUSH
77708: LD_INT 51
77710: PUSH
77711: LD_INT 32
77713: PUSH
77714: LD_INT 89
77716: PUSH
77717: EMPTY
77718: LIST
77719: LIST
77720: LIST
77721: LIST
77722: IN
77723: NOT
77724: OR
77725: IFFALSE 77729
// exit ;
77727: GO 77827
// for i := 1 to 3 do
77729: LD_ADDR_VAR 0 3
77733: PUSH
77734: DOUBLE
77735: LD_INT 1
77737: DEC
77738: ST_TO_ADDR
77739: LD_INT 3
77741: PUSH
77742: FOR_TO
77743: IFFALSE 77825
// begin tmp := GetCargo ( cargo , i ) ;
77745: LD_ADDR_VAR 0 4
77749: PUSH
77750: LD_VAR 0 1
77754: PPUSH
77755: LD_VAR 0 3
77759: PPUSH
77760: CALL_OW 289
77764: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
77765: LD_ADDR_VAR 0 2
77769: PUSH
77770: LD_VAR 0 2
77774: PPUSH
77775: LD_VAR 0 3
77779: PPUSH
77780: LD_VAR 0 4
77784: PPUSH
77785: CALL_OW 1
77789: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
77790: LD_ADDR_VAR 0 2
77794: PUSH
77795: LD_VAR 0 2
77799: PPUSH
77800: LD_INT 4
77802: PPUSH
77803: LD_VAR 0 2
77807: PUSH
77808: LD_INT 4
77810: ARRAY
77811: PUSH
77812: LD_VAR 0 4
77816: PLUS
77817: PPUSH
77818: CALL_OW 1
77822: ST_TO_ADDR
// end ;
77823: GO 77742
77825: POP
77826: POP
// end ;
77827: LD_VAR 0 2
77831: RET
// export function Length ( array ) ; begin
77832: LD_INT 0
77834: PPUSH
// result := array + 0 ;
77835: LD_ADDR_VAR 0 2
77839: PUSH
77840: LD_VAR 0 1
77844: PUSH
77845: LD_INT 0
77847: PLUS
77848: ST_TO_ADDR
// end ;
77849: LD_VAR 0 2
77853: RET
// export function PrepareArray ( array ) ; begin
77854: LD_INT 0
77856: PPUSH
// result := array diff 0 ;
77857: LD_ADDR_VAR 0 2
77861: PUSH
77862: LD_VAR 0 1
77866: PUSH
77867: LD_INT 0
77869: DIFF
77870: ST_TO_ADDR
// if not result [ 1 ] then
77871: LD_VAR 0 2
77875: PUSH
77876: LD_INT 1
77878: ARRAY
77879: NOT
77880: IFFALSE 77900
// result := Delete ( result , 1 ) ;
77882: LD_ADDR_VAR 0 2
77886: PUSH
77887: LD_VAR 0 2
77891: PPUSH
77892: LD_INT 1
77894: PPUSH
77895: CALL_OW 3
77899: ST_TO_ADDR
// end ;
77900: LD_VAR 0 2
77904: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
77905: LD_INT 0
77907: PPUSH
77908: PPUSH
77909: PPUSH
77910: PPUSH
// sibRocketRange := 25 ;
77911: LD_ADDR_VAR 0 6
77915: PUSH
77916: LD_INT 25
77918: ST_TO_ADDR
// result := false ;
77919: LD_ADDR_VAR 0 4
77923: PUSH
77924: LD_INT 0
77926: ST_TO_ADDR
// for i := 0 to 5 do
77927: LD_ADDR_VAR 0 5
77931: PUSH
77932: DOUBLE
77933: LD_INT 0
77935: DEC
77936: ST_TO_ADDR
77937: LD_INT 5
77939: PUSH
77940: FOR_TO
77941: IFFALSE 78008
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
77943: LD_VAR 0 1
77947: PPUSH
77948: LD_VAR 0 5
77952: PPUSH
77953: LD_VAR 0 6
77957: PPUSH
77958: CALL_OW 272
77962: PPUSH
77963: LD_VAR 0 2
77967: PPUSH
77968: LD_VAR 0 5
77972: PPUSH
77973: LD_VAR 0 6
77977: PPUSH
77978: CALL_OW 273
77982: PPUSH
77983: LD_VAR 0 3
77987: PPUSH
77988: CALL_OW 309
77992: IFFALSE 78006
// begin result := true ;
77994: LD_ADDR_VAR 0 4
77998: PUSH
77999: LD_INT 1
78001: ST_TO_ADDR
// exit ;
78002: POP
78003: POP
78004: GO 78010
// end ;
78006: GO 77940
78008: POP
78009: POP
// end ;
78010: LD_VAR 0 4
78014: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
78015: LD_INT 0
78017: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
78018: LD_VAR 0 1
78022: PPUSH
78023: LD_VAR 0 2
78027: PPUSH
78028: LD_INT 0
78030: PPUSH
78031: LD_INT 0
78033: PPUSH
78034: LD_INT 1
78036: PPUSH
78037: LD_INT 0
78039: PPUSH
78040: CALL_OW 587
// end ;
78044: LD_VAR 0 3
78048: RET
// export function CenterOnNow ( unit ) ; begin
78049: LD_INT 0
78051: PPUSH
// result := IsInUnit ( unit ) ;
78052: LD_ADDR_VAR 0 2
78056: PUSH
78057: LD_VAR 0 1
78061: PPUSH
78062: CALL_OW 310
78066: ST_TO_ADDR
// if not result then
78067: LD_VAR 0 2
78071: NOT
78072: IFFALSE 78084
// result := unit ;
78074: LD_ADDR_VAR 0 2
78078: PUSH
78079: LD_VAR 0 1
78083: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
78084: LD_VAR 0 1
78088: PPUSH
78089: CALL_OW 87
// end ;
78093: LD_VAR 0 2
78097: RET
// export function ComMoveHex ( unit , hex ) ; begin
78098: LD_INT 0
78100: PPUSH
// if not hex then
78101: LD_VAR 0 2
78105: NOT
78106: IFFALSE 78110
// exit ;
78108: GO 78163
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
78110: LD_VAR 0 2
78114: PUSH
78115: LD_INT 1
78117: ARRAY
78118: PPUSH
78119: LD_VAR 0 2
78123: PUSH
78124: LD_INT 2
78126: ARRAY
78127: PPUSH
78128: CALL_OW 428
78132: IFFALSE 78136
// exit ;
78134: GO 78163
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
78136: LD_VAR 0 1
78140: PPUSH
78141: LD_VAR 0 2
78145: PUSH
78146: LD_INT 1
78148: ARRAY
78149: PPUSH
78150: LD_VAR 0 2
78154: PUSH
78155: LD_INT 2
78157: ARRAY
78158: PPUSH
78159: CALL_OW 111
// end ;
78163: LD_VAR 0 3
78167: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
78168: LD_INT 0
78170: PPUSH
78171: PPUSH
78172: PPUSH
// if not unit or not enemy then
78173: LD_VAR 0 1
78177: NOT
78178: PUSH
78179: LD_VAR 0 2
78183: NOT
78184: OR
78185: IFFALSE 78189
// exit ;
78187: GO 78313
// x := GetX ( enemy ) ;
78189: LD_ADDR_VAR 0 4
78193: PUSH
78194: LD_VAR 0 2
78198: PPUSH
78199: CALL_OW 250
78203: ST_TO_ADDR
// y := GetY ( enemy ) ;
78204: LD_ADDR_VAR 0 5
78208: PUSH
78209: LD_VAR 0 2
78213: PPUSH
78214: CALL_OW 251
78218: ST_TO_ADDR
// if ValidHex ( x , y ) then
78219: LD_VAR 0 4
78223: PPUSH
78224: LD_VAR 0 5
78228: PPUSH
78229: CALL_OW 488
78233: IFFALSE 78313
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
78235: LD_VAR 0 2
78239: PPUSH
78240: CALL_OW 247
78244: PUSH
78245: LD_INT 3
78247: PUSH
78248: LD_INT 2
78250: PUSH
78251: EMPTY
78252: LIST
78253: LIST
78254: IN
78255: PUSH
78256: LD_VAR 0 1
78260: PPUSH
78261: CALL_OW 255
78265: PPUSH
78266: LD_VAR 0 2
78270: PPUSH
78271: CALL_OW 292
78275: AND
78276: IFFALSE 78294
// ComAttackUnit ( unit , enemy ) else
78278: LD_VAR 0 1
78282: PPUSH
78283: LD_VAR 0 2
78287: PPUSH
78288: CALL_OW 115
78292: GO 78313
// ComAgressiveMove ( unit , x , y ) ;
78294: LD_VAR 0 1
78298: PPUSH
78299: LD_VAR 0 4
78303: PPUSH
78304: LD_VAR 0 5
78308: PPUSH
78309: CALL_OW 114
// end ; end_of_file
78313: LD_VAR 0 3
78317: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78318: LD_VAR 0 1
78322: PUSH
78323: LD_INT 200
78325: DOUBLE
78326: GREATEREQUAL
78327: IFFALSE 78335
78329: LD_INT 299
78331: DOUBLE
78332: LESSEQUAL
78333: IFTRUE 78337
78335: GO 78369
78337: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78338: LD_VAR 0 1
78342: PPUSH
78343: LD_VAR 0 2
78347: PPUSH
78348: LD_VAR 0 3
78352: PPUSH
78353: LD_VAR 0 4
78357: PPUSH
78358: LD_VAR 0 5
78362: PPUSH
78363: CALL 32862 0 5
78367: GO 78446
78369: LD_INT 300
78371: DOUBLE
78372: GREATEREQUAL
78373: IFFALSE 78381
78375: LD_INT 399
78377: DOUBLE
78378: LESSEQUAL
78379: IFTRUE 78383
78381: GO 78445
78383: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78384: LD_VAR 0 1
78388: PPUSH
78389: LD_VAR 0 2
78393: PPUSH
78394: LD_VAR 0 3
78398: PPUSH
78399: LD_VAR 0 4
78403: PPUSH
78404: LD_VAR 0 5
78408: PPUSH
78409: LD_VAR 0 6
78413: PPUSH
78414: LD_VAR 0 7
78418: PPUSH
78419: LD_VAR 0 8
78423: PPUSH
78424: LD_VAR 0 9
78428: PPUSH
78429: LD_VAR 0 10
78433: PPUSH
78434: LD_VAR 0 11
78438: PPUSH
78439: CALL 29187 0 11
78443: GO 78446
78445: POP
// end ;
78446: PPOPN 11
78448: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78449: LD_VAR 0 1
78453: PPUSH
78454: LD_VAR 0 2
78458: PPUSH
78459: LD_VAR 0 3
78463: PPUSH
78464: LD_VAR 0 4
78468: PPUSH
78469: LD_VAR 0 5
78473: PPUSH
78474: CALL 32598 0 5
// end ; end_of_file
78478: PPOPN 5
78480: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78481: LD_VAR 0 1
78485: PPUSH
78486: LD_VAR 0 2
78490: PPUSH
78491: LD_VAR 0 3
78495: PPUSH
78496: LD_VAR 0 4
78500: PPUSH
78501: LD_VAR 0 5
78505: PPUSH
78506: LD_VAR 0 6
78510: PPUSH
78511: CALL 16839 0 6
// end ;
78515: PPOPN 6
78517: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
78518: LD_INT 0
78520: PPUSH
// begin if not units then
78521: LD_VAR 0 1
78525: NOT
78526: IFFALSE 78530
// exit ;
78528: GO 78530
// end ;
78530: PPOPN 7
78532: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78533: CALL 16743 0 0
// end ;
78537: PPOPN 1
78539: END
