// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix ; starting begin mission_prefix := 02_ ;
   0: LD_ADDR_EXP 33
   4: PUSH
   5: LD_STRING 02_
   7: ST_TO_ADDR
// RuSoldMinLevel = 0 ;
   8: LD_ADDR_EXP 13
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
  16: LD_ADDR_EXP 14
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpJMM = 0 ;
  24: LD_ADDR_EXP 10
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpBobby = 0 ;
  32: LD_ADDR_EXP 11
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// hpCyrus = 0 ;
  40: LD_ADDR_EXP 12
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// cargoEscape = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailInBase = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// mikhailDepot = 0 ;
  72: LD_ADDR_EXP 23
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// tigersRespawn = 0 ;
  80: LD_ADDR_EXP 30
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// cargoRespawn = 0 ;
  88: LD_ADDR_EXP 28
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// cargoSee = 0 ;
  96: LD_ADDR_EXP 29
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// lastBattle = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// deadsCounter = 0 ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// spotCorpses = 0 ;
 120: LD_ADDR_EXP 32
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 128: LD_ADDR_EXP 25
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 135: LD_ADDR_EXP 24
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// attackGroup = [ ] ;
 142: LD_ADDR_EXP 26
 146: PUSH
 147: EMPTY
 148: ST_TO_ADDR
// RandomizeAll ;
 149: CALL_OW 11
// InGameOn ;
 153: CALL_OW 8
// Resetfog ;
 157: CALL_OW 335
// AnimateTrees ( true ) ;
 161: LD_INT 1
 163: PPUSH
 164: CALL_OW 573
// PrepareDifficulty ;
 168: CALL 10287 0 0
// PrepareRussianCommander ;
 172: CALL 11743 0 0
// PrepareSouthBase ;
 176: CALL 11826 0 0
// PrepareNorthBase ;
 180: CALL 12165 0 0
// PrepareOtherRussians ;
 184: CALL 12531 0 0
// PrepareHeroes ;
 188: CALL 10602 0 0
// PrepareLisSquad ;
 192: CALL 10930 0 0
// PrepareOtherAmericans ;
 196: CALL 11275 0 0
// end ; end_of_file
 200: END
// every 1 do var tmp ;
 201: GO 203
 203: DISABLE
 204: LD_INT 0
 206: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 207: LD_EXP 1
 211: PPUSH
 212: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 216: LD_ADDR_VAR 0 1
 220: PUSH
 221: LD_INT 22
 223: PUSH
 224: LD_INT 4
 226: PUSH
 227: EMPTY
 228: LIST
 229: LIST
 230: PUSH
 231: LD_INT 21
 233: PUSH
 234: LD_INT 1
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: EMPTY
 242: LIST
 243: LIST
 244: PPUSH
 245: CALL_OW 69
 249: PUSH
 250: LD_EXP 4
 254: PUSH
 255: EMPTY
 256: LIST
 257: DIFF
 258: ST_TO_ADDR
// if Cyrus and Bobby then
 259: LD_EXP 3
 263: PUSH
 264: LD_EXP 2
 268: AND
 269: IFFALSE 599
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 271: LD_EXP 3
 275: PPUSH
 276: LD_INT 43
 278: PPUSH
 279: LD_INT 72
 281: PPUSH
 282: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 286: LD_EXP 2
 290: PPUSH
 291: LD_INT 44
 293: PPUSH
 294: LD_INT 70
 296: PPUSH
 297: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 301: LD_EXP 1
 305: PPUSH
 306: LD_INT 46
 308: PPUSH
 309: LD_INT 73
 311: PPUSH
 312: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 316: LD_EXP 3
 320: PPUSH
 321: LD_STRING D1a-Cyrus-1
 323: PPUSH
 324: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 328: LD_EXP 1
 332: PPUSH
 333: LD_STRING D1a-JMM-1
 335: PPUSH
 336: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 340: LD_EXP 3
 344: PPUSH
 345: LD_INT 37
 347: PPUSH
 348: LD_INT 66
 350: PPUSH
 351: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 355: LD_EXP 2
 359: PPUSH
 360: LD_INT 41
 362: PPUSH
 363: LD_INT 67
 365: PPUSH
 366: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 370: LD_EXP 1
 374: PPUSH
 375: LD_INT 38
 377: PPUSH
 378: LD_INT 64
 380: PPUSH
 381: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 385: LD_EXP 2
 389: PPUSH
 390: LD_STRING D1a-Bobby-2
 392: PPUSH
 393: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 397: LD_EXP 3
 401: PPUSH
 402: LD_INT 35
 404: PPUSH
 405: LD_INT 62
 407: PPUSH
 408: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 412: LD_EXP 2
 416: PPUSH
 417: LD_INT 32
 419: PPUSH
 420: LD_INT 60
 422: PPUSH
 423: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 427: LD_EXP 1
 431: PPUSH
 432: LD_INT 35
 434: PPUSH
 435: LD_INT 60
 437: PPUSH
 438: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 442: LD_EXP 1
 446: PPUSH
 447: LD_STRING D1a-JMM-2
 449: PPUSH
 450: CALL_OW 88
// ComWalk ( Lisa ) ;
 454: LD_EXP 4
 458: PPUSH
 459: CALL_OW 138
// wait ( 0 0$1 ) ;
 463: LD_INT 35
 465: PPUSH
 466: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 470: LD_EXP 4
 474: PPUSH
 475: LD_EXP 1
 479: PPUSH
 480: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 484: LD_EXP 1
 488: PUSH
 489: LD_EXP 3
 493: PUSH
 494: LD_EXP 2
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: PPUSH
 504: LD_EXP 4
 508: PPUSH
 509: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 513: LD_VAR 0 1
 517: PUSH
 518: LD_INT 1
 520: ARRAY
 521: PPUSH
 522: LD_INT 33
 524: PPUSH
 525: LD_INT 55
 527: PPUSH
 528: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 532: LD_VAR 0 1
 536: PUSH
 537: LD_INT 2
 539: ARRAY
 540: PPUSH
 541: LD_INT 30
 543: PPUSH
 544: LD_INT 54
 546: PPUSH
 547: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 551: LD_VAR 0 1
 555: PUSH
 556: LD_INT 1
 558: ARRAY
 559: PPUSH
 560: LD_EXP 1
 564: PPUSH
 565: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 569: LD_VAR 0 1
 573: PUSH
 574: LD_INT 2
 576: ARRAY
 577: PPUSH
 578: LD_EXP 1
 582: PPUSH
 583: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 587: LD_EXP 4
 591: PPUSH
 592: LD_STRING D1a-Lisa-2
 594: PPUSH
 595: CALL_OW 88
// end ; if Cyrus and not Bobby then
 599: LD_EXP 3
 603: PUSH
 604: LD_EXP 2
 608: NOT
 609: AND
 610: IFFALSE 815
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 612: LD_EXP 3
 616: PPUSH
 617: LD_INT 43
 619: PPUSH
 620: LD_INT 72
 622: PPUSH
 623: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 627: LD_EXP 1
 631: PPUSH
 632: LD_INT 46
 634: PPUSH
 635: LD_INT 73
 637: PPUSH
 638: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 642: LD_EXP 3
 646: PPUSH
 647: LD_STRING D1a-Cyrus-1
 649: PPUSH
 650: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 654: LD_EXP 1
 658: PPUSH
 659: LD_STRING D1a-JMM-1
 661: PPUSH
 662: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 666: LD_EXP 3
 670: PPUSH
 671: LD_INT 37
 673: PPUSH
 674: LD_INT 66
 676: PPUSH
 677: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 681: LD_EXP 1
 685: PPUSH
 686: LD_INT 38
 688: PPUSH
 689: LD_INT 64
 691: PPUSH
 692: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 696: LD_EXP 3
 700: PPUSH
 701: LD_STRING D1a-Cyrus-2
 703: PPUSH
 704: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 708: LD_EXP 3
 712: PPUSH
 713: LD_INT 35
 715: PPUSH
 716: LD_INT 62
 718: PPUSH
 719: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 723: LD_EXP 1
 727: PPUSH
 728: LD_INT 35
 730: PPUSH
 731: LD_INT 60
 733: PPUSH
 734: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 738: LD_EXP 1
 742: PPUSH
 743: LD_STRING D1a-JMM-2
 745: PPUSH
 746: CALL_OW 88
// ComWalk ( Lisa ) ;
 750: LD_EXP 4
 754: PPUSH
 755: CALL_OW 138
// wait ( 0 0$1 ) ;
 759: LD_INT 35
 761: PPUSH
 762: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 766: LD_EXP 4
 770: PPUSH
 771: LD_EXP 1
 775: PPUSH
 776: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 780: LD_EXP 4
 784: PPUSH
 785: LD_STRING D1a-Lisa-2
 787: PPUSH
 788: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 792: LD_EXP 1
 796: PUSH
 797: LD_EXP 3
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: PPUSH
 806: LD_EXP 4
 810: PPUSH
 811: CALL_OW 119
// end ; if not Cyrus and Bobby then
 815: LD_EXP 3
 819: NOT
 820: PUSH
 821: LD_EXP 2
 825: AND
 826: IFFALSE 1105
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 828: LD_EXP 2
 832: PPUSH
 833: LD_INT 44
 835: PPUSH
 836: LD_INT 70
 838: PPUSH
 839: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 843: LD_EXP 1
 847: PPUSH
 848: LD_INT 46
 850: PPUSH
 851: LD_INT 73
 853: PPUSH
 854: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 858: LD_EXP 2
 862: PPUSH
 863: LD_STRING D1a-Bobby-1
 865: PPUSH
 866: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 870: LD_EXP 1
 874: PPUSH
 875: LD_STRING D1a-JMM-1
 877: PPUSH
 878: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 882: LD_EXP 2
 886: PPUSH
 887: LD_INT 37
 889: PPUSH
 890: LD_INT 66
 892: PPUSH
 893: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 897: LD_EXP 1
 901: PPUSH
 902: LD_INT 38
 904: PPUSH
 905: LD_INT 64
 907: PPUSH
 908: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 912: LD_EXP 2
 916: PPUSH
 917: LD_STRING D1a-Bobby-2
 919: PPUSH
 920: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 924: LD_EXP 2
 928: PPUSH
 929: LD_INT 35
 931: PPUSH
 932: LD_INT 62
 934: PPUSH
 935: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 939: LD_EXP 1
 943: PPUSH
 944: LD_INT 35
 946: PPUSH
 947: LD_INT 60
 949: PPUSH
 950: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 954: LD_EXP 1
 958: PPUSH
 959: LD_STRING D1a-JMM-2
 961: PPUSH
 962: CALL_OW 88
// ComWalk ( Lisa ) ;
 966: LD_EXP 4
 970: PPUSH
 971: CALL_OW 138
// wait ( 0 0$1 ) ;
 975: LD_INT 35
 977: PPUSH
 978: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 982: LD_EXP 4
 986: PPUSH
 987: LD_EXP 1
 991: PPUSH
 992: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 996: LD_EXP 1
1000: PUSH
1001: LD_EXP 3
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PPUSH
1010: LD_EXP 4
1014: PPUSH
1015: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 1
1026: ARRAY
1027: PPUSH
1028: LD_INT 33
1030: PPUSH
1031: LD_INT 55
1033: PPUSH
1034: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1038: LD_VAR 0 1
1042: PUSH
1043: LD_INT 2
1045: ARRAY
1046: PPUSH
1047: LD_INT 30
1049: PPUSH
1050: LD_INT 54
1052: PPUSH
1053: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1057: LD_VAR 0 1
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: LD_EXP 1
1070: PPUSH
1071: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1075: LD_VAR 0 1
1079: PUSH
1080: LD_INT 2
1082: ARRAY
1083: PPUSH
1084: LD_EXP 1
1088: PPUSH
1089: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1093: LD_EXP 4
1097: PPUSH
1098: LD_STRING D1a-Lisa-2
1100: PPUSH
1101: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1105: LD_EXP 3
1109: NOT
1110: PUSH
1111: LD_EXP 2
1115: NOT
1116: AND
1117: IFFALSE 1331
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1119: LD_EXP 1
1123: PPUSH
1124: LD_INT 37
1126: PPUSH
1127: LD_INT 66
1129: PPUSH
1130: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1134: LD_EXP 1
1138: PPUSH
1139: LD_STRING D1b-JMM-1
1141: PPUSH
1142: CALL_OW 88
// ComCrawl ( JMM ) ;
1146: LD_EXP 1
1150: PPUSH
1151: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1155: LD_EXP 1
1159: PPUSH
1160: LD_INT 35
1162: PPUSH
1163: LD_INT 60
1165: PPUSH
1166: CALL_OW 171
// wait ( 0 0$8 ) ;
1170: LD_INT 280
1172: PPUSH
1173: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1177: LD_EXP 1
1181: PPUSH
1182: LD_STRING D1b-JMM-1a
1184: PPUSH
1185: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1189: LD_EXP 1
1193: PUSH
1194: LD_EXP 4
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PPUSH
1203: CALL_OW 138
// wait ( 0 0$1 ) ;
1207: LD_INT 35
1209: PPUSH
1210: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1214: LD_EXP 4
1218: PPUSH
1219: LD_EXP 1
1223: PPUSH
1224: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1228: LD_EXP 1
1232: PUSH
1233: EMPTY
1234: LIST
1235: PPUSH
1236: LD_EXP 4
1240: PPUSH
1241: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1245: LD_VAR 0 1
1249: PUSH
1250: LD_INT 1
1252: ARRAY
1253: PPUSH
1254: LD_INT 33
1256: PPUSH
1257: LD_INT 55
1259: PPUSH
1260: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: ARRAY
1272: PPUSH
1273: LD_INT 30
1275: PPUSH
1276: LD_INT 54
1278: PPUSH
1279: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1283: LD_VAR 0 1
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: LD_EXP 1
1296: PPUSH
1297: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1301: LD_VAR 0 1
1305: PUSH
1306: LD_INT 2
1308: ARRAY
1309: PPUSH
1310: LD_EXP 1
1314: PPUSH
1315: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1319: LD_EXP 4
1323: PPUSH
1324: LD_STRING D1b-Lisa-1
1326: PPUSH
1327: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1331: LD_EXP 1
1335: PPUSH
1336: LD_STRING D1-JMM-1
1338: PPUSH
1339: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1343: LD_EXP 4
1347: PPUSH
1348: LD_STRING D1-Lisa-1
1350: PPUSH
1351: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1355: LD_EXP 1
1359: PPUSH
1360: LD_STRING D1-JMM-2
1362: PPUSH
1363: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1367: LD_EXP 9
1371: PPUSH
1372: LD_STRING D1-Pow-2
1374: PPUSH
1375: CALL_OW 94
// if Cyrus then
1379: LD_EXP 3
1383: IFFALSE 1409
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1385: LD_EXP 3
1389: PPUSH
1390: LD_STRING D1-Cyrus-2
1392: PPUSH
1393: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1397: LD_EXP 1
1401: PPUSH
1402: LD_STRING D1-JMM-3
1404: PPUSH
1405: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1409: LD_EXP 9
1413: PPUSH
1414: LD_STRING D1-Pow-3
1416: PPUSH
1417: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1421: LD_EXP 1
1425: PPUSH
1426: LD_STRING D1-JMM-4
1428: PPUSH
1429: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1433: LD_EXP 9
1437: PPUSH
1438: LD_STRING D1-Pow-4
1440: PPUSH
1441: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1445: LD_EXP 9
1449: PPUSH
1450: LD_STRING D1-Pow-4a
1452: PPUSH
1453: CALL_OW 94
// if Cyrus then
1457: LD_EXP 3
1461: IFFALSE 1475
// Say ( Cyrus , D1-Cyrus-4 ) ;
1463: LD_EXP 3
1467: PPUSH
1468: LD_STRING D1-Cyrus-4
1470: PPUSH
1471: CALL_OW 88
// if Bobby then
1475: LD_EXP 2
1479: IFFALSE 1517
// begin Say ( Bobby , D1-Bobby-4 ) ;
1481: LD_EXP 2
1485: PPUSH
1486: LD_STRING D1-Bobby-4
1488: PPUSH
1489: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1493: LD_EXP 4
1497: PPUSH
1498: LD_STRING D1-Lisa-4
1500: PPUSH
1501: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1505: LD_EXP 1
1509: PPUSH
1510: LD_STRING D1-JMM-5
1512: PPUSH
1513: CALL_OW 88
// end ; InGameOff ;
1517: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1521: LD_INT 22
1523: PUSH
1524: LD_INT 4
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PPUSH
1531: CALL_OW 69
1535: PUSH
1536: LD_EXP 6
1540: PUSH
1541: LD_EXP 7
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: DIFF
1550: PPUSH
1551: LD_INT 1
1553: PPUSH
1554: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1558: LD_STRING M1
1560: PPUSH
1561: CALL_OW 337
// SaveForQuickRestart ;
1565: CALL_OW 22
// end ;
1569: PPOPN 1
1571: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1572: LD_INT 7
1574: PPUSH
1575: LD_INT 22
1577: PUSH
1578: LD_INT 1
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: PPUSH
1585: CALL_OW 70
1589: PUSH
1590: LD_INT 0
1592: GREATER
1593: IFFALSE 2010
1595: GO 1597
1597: DISABLE
// begin InGameOn ;
1598: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1602: LD_INT 22
1604: PUSH
1605: LD_INT 1
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 21
1614: PUSH
1615: LD_INT 1
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PPUSH
1626: CALL_OW 69
1630: PPUSH
1631: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1635: LD_INT 24
1637: PPUSH
1638: LD_INT 32
1640: PPUSH
1641: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1645: LD_EXP 5
1649: PPUSH
1650: LD_INT 4
1652: PPUSH
1653: LD_INT 1
1655: PPUSH
1656: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1660: LD_EXP 5
1664: PPUSH
1665: LD_INT 4
1667: PPUSH
1668: CALL_OW 336
// wait ( 0 0$1 ) ;
1672: LD_INT 35
1674: PPUSH
1675: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1679: LD_EXP 5
1683: PPUSH
1684: LD_INT 27
1686: PPUSH
1687: LD_INT 38
1689: PPUSH
1690: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1694: LD_EXP 5
1698: PPUSH
1699: LD_EXP 1
1703: PPUSH
1704: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1708: LD_INT 22
1710: PUSH
1711: LD_INT 1
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 21
1720: PUSH
1721: LD_INT 1
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: PPUSH
1732: CALL_OW 69
1736: PUSH
1737: LD_EXP 5
1741: PUSH
1742: EMPTY
1743: LIST
1744: DIFF
1745: PPUSH
1746: LD_EXP 5
1750: PPUSH
1751: CALL_OW 119
// wait ( 0 0$1 ) ;
1755: LD_INT 35
1757: PPUSH
1758: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1762: LD_EXP 5
1766: PPUSH
1767: LD_STRING D2a-Khat-1
1769: PPUSH
1770: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1774: LD_EXP 1
1778: PPUSH
1779: LD_STRING D2a-JMM-1
1781: PPUSH
1782: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1786: LD_EXP 5
1790: PPUSH
1791: LD_STRING D2a-Khat-2
1793: PPUSH
1794: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1798: LD_EXP 1
1802: PPUSH
1803: LD_STRING D2a-JMM-2
1805: PPUSH
1806: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1810: LD_EXP 5
1814: PPUSH
1815: LD_STRING D2a-Khat-3
1817: PPUSH
1818: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1822: LD_EXP 1
1826: PPUSH
1827: LD_STRING D2a-JMM-3
1829: PPUSH
1830: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1834: LD_EXP 5
1838: PPUSH
1839: LD_STRING D2a-Khat-4
1841: PPUSH
1842: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1846: LD_EXP 1
1850: PPUSH
1851: LD_STRING D2a-JMM-4
1853: PPUSH
1854: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1858: LD_EXP 5
1862: PPUSH
1863: LD_STRING D2a-Khat-5
1865: PPUSH
1866: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1870: LD_EXP 1
1874: PPUSH
1875: LD_STRING D2a-JMM-5
1877: PPUSH
1878: CALL_OW 88
// InGameOff ;
1882: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1886: LD_INT 22
1888: PUSH
1889: LD_INT 1
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: PUSH
1896: LD_INT 21
1898: PUSH
1899: LD_INT 1
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 3
1908: PUSH
1909: LD_INT 24
1911: PUSH
1912: LD_INT 800
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: PPUSH
1928: CALL_OW 69
1932: PUSH
1933: LD_INT 0
1935: GREATER
1936: IFFALSE 2010
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1938: LD_EXP 5
1942: PPUSH
1943: LD_INT 22
1945: PUSH
1946: LD_INT 1
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 21
1955: PUSH
1956: LD_INT 1
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: PUSH
1963: LD_INT 3
1965: PUSH
1966: LD_INT 24
1968: PUSH
1969: LD_INT 1000
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PPUSH
1985: CALL_OW 69
1989: PUSH
1990: LD_INT 1
1992: ARRAY
1993: PPUSH
1994: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1998: LD_EXP 5
2002: PPUSH
2003: LD_STRING D2b-Khat-1
2005: PPUSH
2006: CALL_OW 88
// end ; end ;
2010: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp , p ;
2011: LD_INT 15
2013: PPUSH
2014: LD_INT 22
2016: PUSH
2017: LD_INT 1
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PPUSH
2024: CALL_OW 70
2028: PUSH
2029: LD_INT 0
2031: GREATER
2032: IFFALSE 3229
2034: GO 2036
2036: DISABLE
2037: LD_INT 0
2039: PPUSH
2040: PPUSH
2041: PPUSH
2042: PPUSH
2043: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2044: LD_ADDR_VAR 0 2
2048: PUSH
2049: LD_INT 999
2051: PUSH
2052: LD_INT 999
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2062: LD_ADDR_VAR 0 4
2066: PUSH
2067: LD_INT 22
2069: PUSH
2070: LD_INT 1
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: PUSH
2077: LD_INT 21
2079: PUSH
2080: LD_INT 1
2082: PUSH
2083: EMPTY
2084: LIST
2085: LIST
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PPUSH
2091: CALL_OW 69
2095: PUSH
2096: LD_EXP 1
2100: PUSH
2101: LD_EXP 2
2105: PUSH
2106: LD_EXP 3
2110: PUSH
2111: LD_EXP 4
2115: PUSH
2116: LD_EXP 5
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: DIFF
2128: ST_TO_ADDR
// PrepareDeadSoldiers ;
2129: CALL 11433 0 0
// spotCorpses = 1 ;
2133: LD_ADDR_EXP 32
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2141: LD_INT 70
2143: PPUSH
2144: CALL_OW 67
// InGameOn ;
2148: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2152: LD_INT 23
2154: PPUSH
2155: LD_INT 12
2157: PPUSH
2158: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2162: LD_ADDR_VAR 0 3
2166: PUSH
2167: LD_VAR 0 2
2171: PUSH
2172: LD_INT 1
2174: ARRAY
2175: PUSH
2176: LD_INT 2
2178: ARRAY
2179: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2180: LD_ADDR_VAR 0 1
2184: PUSH
2185: LD_INT 22
2187: PUSH
2188: LD_INT 1
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 21
2197: PUSH
2198: LD_INT 1
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: PPUSH
2209: CALL_OW 69
2213: PUSH
2214: LD_EXP 1
2218: PUSH
2219: LD_EXP 5
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: DIFF
2228: PUSH
2229: FOR_IN
2230: IFFALSE 2281
// if IsOK ( i ) then
2232: LD_VAR 0 1
2236: PPUSH
2237: CALL_OW 302
2241: IFFALSE 2279
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: LD_VAR 0 2
2252: PUSH
2253: LD_VAR 0 1
2257: PUSH
2258: LD_VAR 0 1
2262: PPUSH
2263: LD_INT 16
2265: PPUSH
2266: CALL_OW 299
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: EMPTY
2276: LIST
2277: ADD
2278: ST_TO_ADDR
2279: GO 2229
2281: POP
2282: POP
// for i = 2 to distanceTab do
2283: LD_ADDR_VAR 0 1
2287: PUSH
2288: DOUBLE
2289: LD_INT 2
2291: DEC
2292: ST_TO_ADDR
2293: LD_VAR 0 2
2297: PUSH
2298: FOR_TO
2299: IFFALSE 2345
// if distanceTab [ i ] [ 2 ] < min then
2301: LD_VAR 0 2
2305: PUSH
2306: LD_VAR 0 1
2310: ARRAY
2311: PUSH
2312: LD_INT 2
2314: ARRAY
2315: PUSH
2316: LD_VAR 0 3
2320: LESS
2321: IFFALSE 2343
// min = distanceTab [ i ] [ 2 ] ;
2323: LD_ADDR_VAR 0 3
2327: PUSH
2328: LD_VAR 0 2
2332: PUSH
2333: LD_VAR 0 1
2337: ARRAY
2338: PUSH
2339: LD_INT 2
2341: ARRAY
2342: ST_TO_ADDR
2343: GO 2298
2345: POP
2346: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2347: LD_ADDR_VAR 0 1
2351: PUSH
2352: LD_INT 22
2354: PUSH
2355: LD_INT 1
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: LD_INT 21
2364: PUSH
2365: LD_INT 1
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PPUSH
2376: CALL_OW 69
2380: PUSH
2381: LD_EXP 1
2385: PUSH
2386: EMPTY
2387: LIST
2388: DIFF
2389: PUSH
2390: FOR_IN
2391: IFFALSE 2461
// begin ComMoveToArea ( i , DeadCutscene ) ;
2393: LD_VAR 0 1
2397: PPUSH
2398: LD_INT 28
2400: PPUSH
2401: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2405: LD_EXP 1
2409: PPUSH
2410: LD_INT 30
2412: PPUSH
2413: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2417: LD_VAR 0 1
2421: PPUSH
2422: LD_INT 23
2424: PPUSH
2425: LD_INT 11
2427: PPUSH
2428: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2432: LD_EXP 1
2436: PPUSH
2437: LD_INT 23
2439: PPUSH
2440: LD_INT 11
2442: PPUSH
2443: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2447: LD_EXP 34
2451: PPUSH
2452: LD_INT 250
2454: PPUSH
2455: CALL_OW 234
// end ;
2459: GO 2390
2461: POP
2462: POP
// for i = 2 to distanceTab do
2463: LD_ADDR_VAR 0 1
2467: PUSH
2468: DOUBLE
2469: LD_INT 2
2471: DEC
2472: ST_TO_ADDR
2473: LD_VAR 0 2
2477: PUSH
2478: FOR_TO
2479: IFFALSE 2865
// begin if distanceTab [ i ] [ 2 ] = min then
2481: LD_VAR 0 2
2485: PUSH
2486: LD_VAR 0 1
2490: ARRAY
2491: PUSH
2492: LD_INT 2
2494: ARRAY
2495: PUSH
2496: LD_VAR 0 3
2500: EQUAL
2501: IFFALSE 2863
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2503: LD_VAR 0 2
2507: PUSH
2508: LD_VAR 0 1
2512: ARRAY
2513: PUSH
2514: LD_INT 1
2516: ARRAY
2517: PUSH
2518: LD_EXP 2
2522: EQUAL
2523: IFFALSE 2537
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2525: LD_EXP 2
2529: PPUSH
2530: LD_STRING DCorpses-Bobby-1
2532: PPUSH
2533: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2537: LD_VAR 0 2
2541: PUSH
2542: LD_VAR 0 1
2546: ARRAY
2547: PUSH
2548: LD_INT 1
2550: ARRAY
2551: PUSH
2552: LD_EXP 3
2556: EQUAL
2557: IFFALSE 2571
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2559: LD_EXP 3
2563: PPUSH
2564: LD_STRING DCorpses-Cyrus-1
2566: PPUSH
2567: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2571: LD_VAR 0 2
2575: PUSH
2576: LD_VAR 0 1
2580: ARRAY
2581: PUSH
2582: LD_INT 1
2584: ARRAY
2585: PUSH
2586: LD_EXP 4
2590: EQUAL
2591: IFFALSE 2605
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2593: LD_EXP 4
2597: PPUSH
2598: LD_STRING DCorpses-Lisa-1
2600: PPUSH
2601: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2605: LD_VAR 0 2
2609: PUSH
2610: LD_VAR 0 1
2614: ARRAY
2615: PUSH
2616: LD_INT 1
2618: ARRAY
2619: PUSH
2620: LD_VAR 0 4
2624: PUSH
2625: LD_INT 1
2627: ARRAY
2628: EQUAL
2629: PUSH
2630: LD_VAR 0 4
2634: PUSH
2635: LD_INT 1
2637: ARRAY
2638: PPUSH
2639: CALL_OW 258
2643: PUSH
2644: LD_INT 1
2646: EQUAL
2647: AND
2648: IFFALSE 2666
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2650: LD_VAR 0 4
2654: PUSH
2655: LD_INT 1
2657: ARRAY
2658: PPUSH
2659: LD_STRING DCorpses-Sol1-1
2661: PPUSH
2662: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2666: LD_VAR 0 2
2670: PUSH
2671: LD_VAR 0 1
2675: ARRAY
2676: PUSH
2677: LD_INT 1
2679: ARRAY
2680: PUSH
2681: LD_VAR 0 4
2685: PUSH
2686: LD_INT 1
2688: ARRAY
2689: EQUAL
2690: PUSH
2691: LD_VAR 0 4
2695: PUSH
2696: LD_INT 1
2698: ARRAY
2699: PPUSH
2700: CALL_OW 258
2704: PUSH
2705: LD_INT 2
2707: EQUAL
2708: AND
2709: IFFALSE 2727
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2711: LD_VAR 0 4
2715: PUSH
2716: LD_INT 1
2718: ARRAY
2719: PPUSH
2720: LD_STRING DCorpses-FSol1-1
2722: PPUSH
2723: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2727: LD_VAR 0 2
2731: PUSH
2732: LD_VAR 0 1
2736: ARRAY
2737: PUSH
2738: LD_INT 1
2740: ARRAY
2741: PUSH
2742: LD_VAR 0 4
2746: PUSH
2747: LD_INT 2
2749: ARRAY
2750: EQUAL
2751: PUSH
2752: LD_VAR 0 4
2756: PUSH
2757: LD_INT 2
2759: ARRAY
2760: PPUSH
2761: CALL_OW 258
2765: PUSH
2766: LD_INT 1
2768: EQUAL
2769: AND
2770: IFFALSE 2788
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2772: LD_VAR 0 4
2776: PUSH
2777: LD_INT 2
2779: ARRAY
2780: PPUSH
2781: LD_STRING DCorpses-Sol1-1
2783: PPUSH
2784: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2788: LD_VAR 0 2
2792: PUSH
2793: LD_VAR 0 1
2797: ARRAY
2798: PUSH
2799: LD_INT 1
2801: ARRAY
2802: PUSH
2803: LD_VAR 0 4
2807: PUSH
2808: LD_INT 2
2810: ARRAY
2811: EQUAL
2812: PUSH
2813: LD_VAR 0 4
2817: PUSH
2818: LD_INT 2
2820: ARRAY
2821: PPUSH
2822: CALL_OW 258
2826: PUSH
2827: LD_INT 2
2829: EQUAL
2830: AND
2831: IFFALSE 2849
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2833: LD_VAR 0 4
2837: PUSH
2838: LD_INT 2
2840: ARRAY
2841: PPUSH
2842: LD_STRING DCorpses-FSol1-1
2844: PPUSH
2845: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2849: LD_EXP 34
2853: PPUSH
2854: LD_INT 150
2856: PPUSH
2857: CALL_OW 234
// break ;
2861: GO 2865
// end ; end ;
2863: GO 2478
2865: POP
2866: POP
// p := 0 ;
2867: LD_ADDR_VAR 0 5
2871: PUSH
2872: LD_INT 0
2874: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2875: LD_INT 35
2877: PPUSH
2878: CALL_OW 67
// p := p + 1 ;
2882: LD_ADDR_VAR 0 5
2886: PUSH
2887: LD_VAR 0 5
2891: PUSH
2892: LD_INT 1
2894: PLUS
2895: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2896: LD_ADDR_VAR 0 1
2900: PUSH
2901: LD_INT 22
2903: PUSH
2904: LD_INT 1
2906: PUSH
2907: EMPTY
2908: LIST
2909: LIST
2910: PUSH
2911: LD_INT 21
2913: PUSH
2914: LD_INT 1
2916: PUSH
2917: EMPTY
2918: LIST
2919: LIST
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: PPUSH
2925: CALL_OW 69
2929: PUSH
2930: LD_EXP 1
2934: PUSH
2935: EMPTY
2936: LIST
2937: DIFF
2938: PUSH
2939: FOR_IN
2940: IFFALSE 3010
// begin ComMoveToArea ( i , DeadCutscene ) ;
2942: LD_VAR 0 1
2946: PPUSH
2947: LD_INT 28
2949: PPUSH
2950: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2954: LD_EXP 1
2958: PPUSH
2959: LD_INT 30
2961: PPUSH
2962: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2966: LD_VAR 0 1
2970: PPUSH
2971: LD_INT 23
2973: PPUSH
2974: LD_INT 11
2976: PPUSH
2977: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2981: LD_EXP 1
2985: PPUSH
2986: LD_INT 23
2988: PPUSH
2989: LD_INT 11
2991: PPUSH
2992: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2996: LD_EXP 34
3000: PPUSH
3001: LD_INT 250
3003: PPUSH
3004: CALL_OW 234
// end ;
3008: GO 2939
3010: POP
3011: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3012: LD_EXP 1
3016: PPUSH
3017: LD_INT 30
3019: PPUSH
3020: CALL_OW 308
3024: PUSH
3025: LD_VAR 0 5
3029: PUSH
3030: LD_INT 16
3032: GREATEREQUAL
3033: OR
3034: IFFALSE 2875
// wait ( 0 0$1 ) ;
3036: LD_INT 35
3038: PPUSH
3039: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3043: LD_EXP 1
3047: PPUSH
3048: LD_STRING DCorpses-JMM-1
3050: PPUSH
3051: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3055: LD_EXP 34
3059: PPUSH
3060: LD_INT 100
3062: PPUSH
3063: CALL_OW 234
// if IsOK ( Khatam ) then
3067: LD_EXP 5
3071: PPUSH
3072: CALL_OW 302
3076: IFFALSE 3213
// begin repeat wait ( 0 0$1 ) ;
3078: LD_INT 35
3080: PPUSH
3081: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3085: LD_EXP 5
3089: PPUSH
3090: LD_EXP 34
3094: PPUSH
3095: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3099: LD_EXP 5
3103: PPUSH
3104: LD_EXP 34
3108: PPUSH
3109: CALL_OW 296
3113: PUSH
3114: LD_INT 2
3116: LESS
3117: IFFALSE 3078
// spotCorpses = 0 ;
3119: LD_ADDR_EXP 32
3123: PUSH
3124: LD_INT 0
3126: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3127: LD_EXP 34
3131: PPUSH
3132: LD_INT 10
3134: PPUSH
3135: CALL_OW 234
// wait ( 0 0$3 ) ;
3139: LD_INT 105
3141: PPUSH
3142: CALL_OW 67
// KillUnit ( DyingSold ) ;
3146: LD_EXP 34
3150: PPUSH
3151: CALL_OW 66
// wait ( 0 0$1 ) ;
3155: LD_INT 35
3157: PPUSH
3158: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3162: LD_EXP 1
3166: PUSH
3167: LD_EXP 5
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3180: LD_EXP 5
3184: PPUSH
3185: LD_EXP 1
3189: PPUSH
3190: CALL_OW 119
// wait ( 0 0$1 ) ;
3194: LD_INT 35
3196: PPUSH
3197: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3201: LD_EXP 5
3205: PPUSH
3206: LD_STRING DCorpses-Khat-1
3208: PPUSH
3209: CALL_OW 88
// end ; InGameOff ;
3213: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3217: LD_EXP 1
3221: PPUSH
3222: LD_STRING DCorpses-JMM-2
3224: PPUSH
3225: CALL_OW 88
// end ;
3229: PPOPN 5
3231: END
// every 0 0$1 trigger spotCorpses = 1 do
3232: LD_EXP 32
3236: PUSH
3237: LD_INT 1
3239: EQUAL
3240: IFFALSE 3258
3242: GO 3244
3244: DISABLE
// begin enable ;
3245: ENABLE
// SetLives ( DyingSold , 10 ) ;
3246: LD_EXP 34
3250: PPUSH
3251: LD_INT 10
3253: PPUSH
3254: CALL_OW 234
// end ;
3258: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3259: LD_INT 8
3261: PPUSH
3262: LD_INT 22
3264: PUSH
3265: LD_INT 1
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PPUSH
3272: CALL_OW 70
3276: PUSH
3277: LD_INT 0
3279: GREATER
3280: PUSH
3281: LD_INT 22
3283: PUSH
3284: LD_INT 1
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PPUSH
3291: CALL_OW 69
3295: PPUSH
3296: LD_EXP 7
3300: PPUSH
3301: CALL_OW 74
3305: PPUSH
3306: LD_EXP 7
3310: PPUSH
3311: CALL_OW 296
3315: PUSH
3316: LD_INT 13
3318: LESS
3319: OR
3320: IFFALSE 3517
3322: GO 3324
3324: DISABLE
3325: LD_INT 0
3327: PPUSH
// begin InGameOn ;
3328: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3332: LD_EXP 7
3336: PPUSH
3337: LD_INT 250
3339: PPUSH
3340: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 ] [ Difficulty ] ) ;
3344: LD_EXP 6
3348: PPUSH
3349: LD_INT 1000
3351: PUSH
3352: LD_INT 800
3354: PUSH
3355: LD_INT 750
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: LIST
3362: PUSH
3363: LD_OWVAR 67
3367: ARRAY
3368: PPUSH
3369: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3373: LD_INT 3
3375: PPUSH
3376: LD_INT 4
3378: PPUSH
3379: LD_INT 2
3381: PPUSH
3382: LD_INT 1
3384: PPUSH
3385: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3389: LD_EXP 6
3393: PUSH
3394: LD_EXP 7
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PPUSH
3403: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3407: LD_ADDR_VAR 0 1
3411: PUSH
3412: LD_INT 9
3414: PPUSH
3415: LD_INT 22
3417: PUSH
3418: LD_INT 3
3420: PUSH
3421: EMPTY
3422: LIST
3423: LIST
3424: PPUSH
3425: CALL_OW 70
3429: PUSH
3430: FOR_IN
3431: IFFALSE 3444
// ComFree ( i ) ;
3433: LD_VAR 0 1
3437: PPUSH
3438: CALL_OW 139
3442: GO 3430
3444: POP
3445: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3446: LD_ADDR_VAR 0 1
3450: PUSH
3451: LD_INT 22
3453: PUSH
3454: LD_INT 4
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PPUSH
3461: CALL_OW 69
3465: PUSH
3466: FOR_IN
3467: IFFALSE 3480
// ComFree ( i ) ;
3469: LD_VAR 0 1
3473: PPUSH
3474: CALL_OW 139
3478: GO 3466
3480: POP
3481: POP
// wait ( 0 0$1 ) ;
3482: LD_INT 35
3484: PPUSH
3485: CALL_OW 67
// InGameOff ;
3489: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3493: LD_EXP 6
3497: PPUSH
3498: LD_STRING DF-Sol1-1
3500: PPUSH
3501: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3505: LD_EXP 1
3509: PPUSH
3510: LD_STRING DF-JMM-1
3512: PPUSH
3513: CALL_OW 88
// end ;
3517: PPOPN 1
3519: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3520: LD_INT 19
3522: PPUSH
3523: LD_INT 22
3525: PUSH
3526: LD_INT 3
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: PPUSH
3533: CALL_OW 70
3537: PUSH
3538: LD_INT 0
3540: EQUAL
3541: IFFALSE 3650
3543: GO 3545
3545: DISABLE
// begin if not IsDead ( Brian ) then
3546: LD_EXP 6
3550: PPUSH
3551: CALL_OW 301
3555: NOT
3556: IFFALSE 3570
// SetSide ( Brian , 1 ) ;
3558: LD_EXP 6
3562: PPUSH
3563: LD_INT 1
3565: PPUSH
3566: CALL_OW 235
// if not IsDead ( Jerry ) then
3570: LD_EXP 7
3574: PPUSH
3575: CALL_OW 301
3579: NOT
3580: IFFALSE 3594
// SetSide ( Jerry , 1 ) ;
3582: LD_EXP 7
3586: PPUSH
3587: LD_INT 1
3589: PPUSH
3590: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3594: LD_INT 22
3596: PUSH
3597: LD_INT 1
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PUSH
3604: LD_INT 25
3606: PUSH
3607: LD_INT 4
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: PUSH
3614: EMPTY
3615: LIST
3616: LIST
3617: PPUSH
3618: CALL_OW 69
3622: IFFALSE 3638
// Say ( JMM , DFa-JMM-1 ) else
3624: LD_EXP 1
3628: PPUSH
3629: LD_STRING DFa-JMM-1
3631: PPUSH
3632: CALL_OW 88
3636: GO 3650
// Say ( JMM , DFa-JMM-1a ) ;
3638: LD_EXP 1
3642: PPUSH
3643: LD_STRING DFa-JMM-1a
3645: PPUSH
3646: CALL_OW 88
// end ;
3650: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3651: LD_INT 19
3653: PPUSH
3654: LD_INT 22
3656: PUSH
3657: LD_INT 3
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: PPUSH
3664: CALL_OW 70
3668: PUSH
3669: LD_INT 0
3671: EQUAL
3672: PUSH
3673: LD_EXP 6
3677: PPUSH
3678: CALL_OW 302
3682: NOT
3683: AND
3684: IFFALSE 3770
3686: GO 3688
3688: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3689: LD_INT 35
3691: PPUSH
3692: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3696: LD_EXP 6
3700: PPUSH
3701: CALL_OW 256
3705: PUSH
3706: LD_INT 250
3708: GREATER
3709: IFFALSE 3689
// Say ( Brian , DFb-Sol1-1 ) ;
3711: LD_EXP 6
3715: PPUSH
3716: LD_STRING DFb-Sol1-1
3718: PPUSH
3719: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3723: LD_EXP 6
3727: PPUSH
3728: LD_INT 78
3730: PPUSH
3731: LD_INT 74
3733: PPUSH
3734: CALL_OW 111
// if IsDead ( Jerry ) then
3738: LD_EXP 7
3742: PPUSH
3743: CALL_OW 301
3747: IFFALSE 3763
// Say ( Brian , DFb-Sol1-1a ) else
3749: LD_EXP 6
3753: PPUSH
3754: LD_STRING DFb-Sol1-1a
3756: PPUSH
3757: CALL_OW 88
3761: GO 3770
// SetAchievement ( ACH_JERRY ) ;
3763: LD_STRING ACH_JERRY
3765: PPUSH
3766: CALL_OW 543
// end ;
3770: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3771: LD_INT 22
3773: PUSH
3774: LD_INT 1
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PUSH
3781: LD_INT 21
3783: PUSH
3784: LD_INT 2
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: PPUSH
3795: CALL_OW 69
3799: PUSH
3800: LD_INT 0
3802: EQUAL
3803: IFFALSE 3891
3805: GO 3807
3807: DISABLE
3808: LD_INT 0
3810: PPUSH
// begin enable ;
3811: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3812: LD_ADDR_VAR 0 1
3816: PUSH
3817: LD_INT 22
3819: PUSH
3820: LD_INT 3
3822: PUSH
3823: EMPTY
3824: LIST
3825: LIST
3826: PUSH
3827: LD_INT 21
3829: PUSH
3830: LD_INT 3
3832: PUSH
3833: EMPTY
3834: LIST
3835: LIST
3836: PUSH
3837: LD_INT 30
3839: PUSH
3840: LD_INT 31
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: LIST
3851: PPUSH
3852: CALL_OW 69
3856: PUSH
3857: FOR_IN
3858: IFFALSE 3889
// begin if See ( 1 , i ) then
3860: LD_INT 1
3862: PPUSH
3863: LD_VAR 0 1
3867: PPUSH
3868: CALL_OW 292
3872: IFFALSE 3887
// begin disable ;
3874: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3875: LD_EXP 1
3879: PPUSH
3880: LD_STRING DX1-JMM-1
3882: PPUSH
3883: CALL_OW 88
// end ; end ;
3887: GO 3857
3889: POP
3890: POP
// end ;
3891: PPOPN 1
3893: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
3894: LD_INT 1
3896: PPUSH
3897: LD_INT 11
3899: PPUSH
3900: CALL_OW 294
3904: IFFALSE 4163
3906: GO 3908
3908: DISABLE
3909: LD_INT 0
3911: PPUSH
3912: PPUSH
3913: PPUSH
// begin DialogueOn ;
3914: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3918: LD_INT 11
3920: PPUSH
3921: LD_INT 22
3923: PUSH
3924: LD_INT 3
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 21
3933: PUSH
3934: LD_INT 1
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: EMPTY
3942: LIST
3943: LIST
3944: PPUSH
3945: CALL_OW 70
3949: PUSH
3950: LD_INT 1
3952: ARRAY
3953: PPUSH
3954: LD_STRING DX3-Rus1-1
3956: PPUSH
3957: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3961: LD_EXP 1
3965: PPUSH
3966: LD_STRING DX3-JMM-1
3968: PPUSH
3969: CALL_OW 88
// DialogueOff ;
3973: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
3977: LD_ADDR_VAR 0 1
3981: PUSH
3982: LD_INT 11
3984: PPUSH
3985: LD_INT 22
3987: PUSH
3988: LD_INT 3
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PUSH
3995: LD_INT 25
3997: PUSH
3998: LD_INT 1
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PPUSH
4009: CALL_OW 70
4013: PUSH
4014: FOR_IN
4015: IFFALSE 4035
// southBaseDefenders = southBaseDefenders ^ i ;
4017: LD_ADDR_EXP 25
4021: PUSH
4022: LD_EXP 25
4026: PUSH
4027: LD_VAR 0 1
4031: ADD
4032: ST_TO_ADDR
4033: GO 4014
4035: POP
4036: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 ] [ Difficulty ] ) ;
4037: LD_INT 175
4039: PUSH
4040: LD_INT 140
4042: PUSH
4043: LD_INT 105
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: PUSH
4051: LD_OWVAR 67
4055: ARRAY
4056: PPUSH
4057: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4061: LD_ADDR_VAR 0 3
4065: PUSH
4066: LD_INT 22
4068: PUSH
4069: LD_INT 3
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: PUSH
4076: LD_INT 21
4078: PUSH
4079: LD_INT 1
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: PUSH
4086: LD_INT 25
4088: PUSH
4089: LD_INT 3
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: LIST
4100: PPUSH
4101: CALL_OW 69
4105: ST_TO_ADDR
// if not mech then
4106: LD_VAR 0 3
4110: NOT
4111: IFFALSE 4115
// exit ;
4113: GO 4163
// ComExitBuilding ( mech ) ;
4115: LD_VAR 0 3
4119: PPUSH
4120: CALL_OW 122
// wait ( 0 0$1 ) ;
4124: LD_INT 35
4126: PPUSH
4127: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4131: LD_VAR 0 3
4135: PUSH
4136: LD_INT 1
4138: ARRAY
4139: PPUSH
4140: LD_INT 5
4142: PPUSH
4143: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4147: LD_VAR 0 3
4151: PUSH
4152: LD_INT 2
4154: ARRAY
4155: PPUSH
4156: LD_INT 4
4158: PPUSH
4159: CALL_OW 180
// end ;
4163: PPOPN 3
4165: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4166: LD_INT 1
4168: PPUSH
4169: LD_INT 5
4171: PPUSH
4172: CALL_OW 292
4176: PUSH
4177: LD_INT 1
4179: PPUSH
4180: LD_INT 4
4182: PPUSH
4183: CALL_OW 292
4187: OR
4188: IFFALSE 4272
4190: GO 4192
4192: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4193: LD_INT 5
4195: PUSH
4196: LD_INT 4
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PPUSH
4203: CALL_OW 85
// if IsOK ( Bobby ) then
4207: LD_EXP 2
4211: PPUSH
4212: CALL_OW 302
4216: IFFALSE 4252
// begin DialogueOn ;
4218: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4222: LD_EXP 2
4226: PPUSH
4227: LD_STRING DX2-Bobby-1
4229: PPUSH
4230: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4234: LD_EXP 1
4238: PPUSH
4239: LD_STRING DX2-JMM-1a
4241: PPUSH
4242: CALL_OW 88
// DialogueOff ;
4246: CALL_OW 7
// end else
4250: GO 4272
// begin DialogueOn ;
4252: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4256: LD_EXP 1
4260: PPUSH
4261: LD_STRING DX2-JMM-1
4263: PPUSH
4264: CALL_OW 88
// DialogueOff ;
4268: CALL_OW 7
// end ; end ;
4272: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4273: LD_INT 22
4275: PUSH
4276: LD_INT 1
4278: PUSH
4279: EMPTY
4280: LIST
4281: LIST
4282: PUSH
4283: LD_INT 23
4285: PUSH
4286: LD_INT 3
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: PUSH
4293: LD_INT 21
4295: PUSH
4296: LD_INT 2
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PUSH
4303: LD_INT 34
4305: PUSH
4306: LD_INT 42
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: PPUSH
4319: CALL_OW 69
4323: IFFALSE 4744
4325: GO 4327
4327: DISABLE
4328: LD_INT 0
4330: PPUSH
4331: PPUSH
4332: PPUSH
4333: PPUSH
4334: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4335: LD_ADDR_VAR 0 1
4339: PUSH
4340: LD_INT 22
4342: PUSH
4343: LD_INT 1
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: PUSH
4350: LD_INT 23
4352: PUSH
4353: LD_INT 3
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: PUSH
4360: LD_INT 21
4362: PUSH
4363: LD_INT 2
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: PUSH
4370: LD_INT 34
4372: PUSH
4373: LD_INT 42
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: PPUSH
4386: CALL_OW 69
4390: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4391: LD_ADDR_VAR 0 3
4395: PUSH
4396: LD_INT 22
4398: PUSH
4399: LD_INT 1
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PUSH
4406: LD_INT 21
4408: PUSH
4409: LD_INT 1
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: LD_INT 26
4418: PUSH
4419: LD_INT 1
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: PUSH
4436: LD_EXP 1
4440: PUSH
4441: LD_EXP 3
4445: PUSH
4446: LD_EXP 2
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: DIFF
4456: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4457: LD_ADDR_VAR 0 4
4461: PUSH
4462: LD_INT 22
4464: PUSH
4465: LD_INT 1
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 1
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 26
4484: PUSH
4485: LD_INT 2
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: PPUSH
4497: CALL_OW 69
4501: PUSH
4502: LD_EXP 4
4506: PUSH
4507: EMPTY
4508: LIST
4509: DIFF
4510: ST_TO_ADDR
// if not tmp then
4511: LD_VAR 0 1
4515: NOT
4516: IFFALSE 4520
// exit ;
4518: GO 4744
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4520: LD_ADDR_VAR 0 2
4524: PUSH
4525: LD_VAR 0 1
4529: PUSH
4530: LD_INT 1
4532: ARRAY
4533: PPUSH
4534: CALL_OW 311
4538: ST_TO_ADDR
// if not speaker then
4539: LD_VAR 0 2
4543: NOT
4544: IFFALSE 4548
// exit ;
4546: GO 4744
// DialogueOn ;
4548: CALL_OW 6
// if speaker = JMM then
4552: LD_VAR 0 2
4556: PUSH
4557: LD_EXP 1
4561: EQUAL
4562: IFFALSE 4596
// begin if Lisa then
4564: LD_EXP 4
4568: IFFALSE 4582
// Say ( Lisa , DX2b-Lisa-1 ) ;
4570: LD_EXP 4
4574: PPUSH
4575: LD_STRING DX2b-Lisa-1
4577: PPUSH
4578: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4582: LD_EXP 1
4586: PPUSH
4587: LD_STRING DX2b-JMM-1
4589: PPUSH
4590: CALL_OW 88
// end else
4594: GO 4740
// begin Say ( JMM , DX2a-JMM-1 ) ;
4596: LD_EXP 1
4600: PPUSH
4601: LD_STRING DX2a-JMM-1
4603: PPUSH
4604: CALL_OW 88
// if speaker = Bobby then
4608: LD_VAR 0 2
4612: PUSH
4613: LD_EXP 2
4617: EQUAL
4618: IFFALSE 4632
// Say ( Bobby , DX2a-Bobby-1 ) ;
4620: LD_EXP 2
4624: PPUSH
4625: LD_STRING DX2a-Bobby-1
4627: PPUSH
4628: CALL_OW 88
// if speaker = Cyrus then
4632: LD_VAR 0 2
4636: PUSH
4637: LD_EXP 3
4641: EQUAL
4642: IFFALSE 4656
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4644: LD_EXP 3
4648: PPUSH
4649: LD_STRING DX2a-Cyrus-1
4651: PPUSH
4652: CALL_OW 88
// if speaker = Lisa then
4656: LD_VAR 0 2
4660: PUSH
4661: LD_EXP 4
4665: EQUAL
4666: IFFALSE 4680
// Say ( Lisa , DX2a-Lisa-1 ) ;
4668: LD_EXP 4
4672: PPUSH
4673: LD_STRING DX2a-Lisa-1
4675: PPUSH
4676: CALL_OW 88
// if speaker in temp1 then
4680: LD_VAR 0 2
4684: PUSH
4685: LD_VAR 0 3
4689: IN
4690: IFFALSE 4704
// Say ( speaker , DX2a-Sol1-1 ) ;
4692: LD_VAR 0 2
4696: PPUSH
4697: LD_STRING DX2a-Sol1-1
4699: PPUSH
4700: CALL_OW 88
// if speaker in temp2 then
4704: LD_VAR 0 2
4708: PUSH
4709: LD_VAR 0 4
4713: IN
4714: IFFALSE 4728
// Say ( speaker , DX2a-FSol1-1 ) ;
4716: LD_VAR 0 2
4720: PPUSH
4721: LD_STRING DX2a-FSol1-1
4723: PPUSH
4724: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4728: LD_EXP 1
4732: PPUSH
4733: LD_STRING DX2a-JMM-2
4735: PPUSH
4736: CALL_OW 88
// end ; DialogueOff ;
4740: CALL_OW 7
// end ;
4744: PPOPN 5
4746: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4747: LD_INT 1
4749: PPUSH
4750: CALL_OW 255
4754: PUSH
4755: LD_INT 1
4757: EQUAL
4758: PUSH
4759: LD_INT 10
4761: PPUSH
4762: CALL_OW 255
4766: PUSH
4767: LD_INT 1
4769: EQUAL
4770: OR
4771: IFFALSE 4831
4773: GO 4775
4775: DISABLE
// begin DialogueOn ;
4776: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4780: LD_EXP 1
4784: PPUSH
4785: LD_STRING D3-JMM-1
4787: PPUSH
4788: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4792: LD_EXP 9
4796: PPUSH
4797: LD_STRING D3-Pow-1
4799: PPUSH
4800: CALL_OW 94
// if IsOK ( Cyrus ) then
4804: LD_EXP 3
4808: PPUSH
4809: CALL_OW 302
4813: IFFALSE 4827
// Say ( Cyrus , D3-Cyrus-1 ) ;
4815: LD_EXP 3
4819: PPUSH
4820: LD_STRING D3-Cyrus-1
4822: PPUSH
4823: CALL_OW 88
// DialogueOff ;
4827: CALL_OW 7
// end ;
4831: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , tmp , i ;
4832: LD_INT 1
4834: PPUSH
4835: CALL_OW 255
4839: PUSH
4840: LD_INT 1
4842: EQUAL
4843: PUSH
4844: LD_INT 10
4846: PPUSH
4847: CALL_OW 255
4851: PUSH
4852: LD_INT 1
4854: EQUAL
4855: AND
4856: IFFALSE 6239
4858: GO 4860
4860: DISABLE
4861: LD_INT 0
4863: PPUSH
4864: PPUSH
4865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4866: LD_ADDR_VAR 0 2
4870: PUSH
4871: LD_INT 22
4873: PUSH
4874: LD_INT 3
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: LD_INT 21
4883: PUSH
4884: LD_INT 1
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: PPUSH
4895: CALL_OW 69
4899: ST_TO_ADDR
// if tmp then
4900: LD_VAR 0 2
4904: IFFALSE 4965
// begin for i in tmp do
4906: LD_ADDR_VAR 0 3
4910: PUSH
4911: LD_VAR 0 2
4915: PUSH
4916: FOR_IN
4917: IFFALSE 4963
// begin if IsInUnit ( i ) then
4919: LD_VAR 0 3
4923: PPUSH
4924: CALL_OW 310
4928: IFFALSE 4939
// ComExitBuilding ( i ) ;
4930: LD_VAR 0 3
4934: PPUSH
4935: CALL_OW 122
// wait ( 0 0$1 ) ;
4939: LD_INT 35
4941: PPUSH
4942: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
4946: LD_VAR 0 3
4950: PPUSH
4951: LD_INT 54
4953: PPUSH
4954: LD_INT 17
4956: PPUSH
4957: CALL_OW 174
// end ;
4961: GO 4916
4963: POP
4964: POP
// end ; wait ( 0 0$03 ) ;
4965: LD_INT 105
4967: PPUSH
4968: CALL_OW 67
// DialogueOn ;
4972: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
4976: LD_EXP 1
4980: PPUSH
4981: LD_STRING D3a-JMM-1
4983: PPUSH
4984: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
4988: LD_EXP 9
4992: PPUSH
4993: LD_STRING D3a-Pow-1
4995: PPUSH
4996: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5000: LD_EXP 1
5004: PPUSH
5005: LD_STRING D3a-JMM-2
5007: PPUSH
5008: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5012: LD_EXP 9
5016: PPUSH
5017: LD_STRING D3a-Pow-2
5019: PPUSH
5020: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5024: LD_EXP 1
5028: PPUSH
5029: LD_STRING D3a-JMM-3
5031: PPUSH
5032: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5036: LD_EXP 9
5040: PPUSH
5041: LD_STRING D3a-Pow-3
5043: PPUSH
5044: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5048: LD_EXP 1
5052: PPUSH
5053: LD_STRING D3a-JMM-4
5055: PPUSH
5056: CALL_OW 88
// DialogueOff ;
5060: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5064: LD_STRING M2
5066: PPUSH
5067: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5071: LD_EXP 1
5075: PPUSH
5076: LD_STRING D3b-JMM-1
5078: PPUSH
5079: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5083: LD_INT 35
5085: PPUSH
5086: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5090: LD_INT 22
5092: PPUSH
5093: LD_INT 22
5095: PUSH
5096: LD_INT 1
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PUSH
5103: LD_INT 25
5105: PUSH
5106: LD_INT 2
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PPUSH
5117: CALL_OW 70
5121: PUSH
5122: LD_INT 22
5124: PUSH
5125: LD_INT 3
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: PUSH
5132: LD_INT 21
5134: PUSH
5135: LD_INT 1
5137: PUSH
5138: EMPTY
5139: LIST
5140: LIST
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: PPUSH
5146: CALL_OW 69
5150: NOT
5151: AND
5152: IFFALSE 5083
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5154: LD_ADDR_VAR 0 1
5158: PUSH
5159: LD_INT 22
5161: PUSH
5162: LD_INT 1
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: PUSH
5169: LD_INT 23
5171: PUSH
5172: LD_INT 1
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: LD_INT 25
5181: PUSH
5182: LD_INT 2
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: PUSH
5189: LD_INT 50
5191: PUSH
5192: EMPTY
5193: LIST
5194: PUSH
5195: LD_INT 56
5197: PUSH
5198: EMPTY
5199: LIST
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: PPUSH
5208: CALL_OW 69
5212: PUSH
5213: LD_EXP 1
5217: PUSH
5218: LD_EXP 5
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: DIFF
5227: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5228: LD_INT 35
5230: PPUSH
5231: CALL_OW 67
// until temp > 0 ;
5235: LD_VAR 0 1
5239: PUSH
5240: LD_INT 0
5242: GREATER
5243: IFFALSE 5154
// wait ( 0 0$5 ) ;
5245: LD_INT 175
5247: PPUSH
5248: CALL_OW 67
// PrepareRussianHeroes ;
5252: CALL 11590 0 0
// InGameOn ;
5256: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5260: LD_EXP 8
5264: PPUSH
5265: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5269: LD_EXP 1
5273: PUSH
5274: LD_VAR 0 1
5278: PUSH
5279: LD_INT 1
5281: ARRAY
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PPUSH
5287: LD_EXP 8
5291: PPUSH
5292: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5296: LD_EXP 8
5300: PPUSH
5301: LD_VAR 0 1
5305: PUSH
5306: LD_INT 1
5308: ARRAY
5309: PPUSH
5310: CALL_OW 119
// Wait ( 0 0$02 ) ;
5314: LD_INT 70
5316: PPUSH
5317: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5321: LD_EXP 8
5325: PPUSH
5326: LD_STRING D4-Mikh-1
5328: PPUSH
5329: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5333: LD_VAR 0 1
5337: PUSH
5338: LD_INT 1
5340: ARRAY
5341: PPUSH
5342: CALL_OW 258
5346: PUSH
5347: LD_INT 1
5349: EQUAL
5350: IFFALSE 5368
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5352: LD_VAR 0 1
5356: PUSH
5357: LD_INT 1
5359: ARRAY
5360: PPUSH
5361: LD_STRING D4-Sol1-1
5363: PPUSH
5364: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5368: LD_VAR 0 1
5372: PUSH
5373: LD_INT 1
5375: ARRAY
5376: PPUSH
5377: CALL_OW 258
5381: PUSH
5382: LD_INT 2
5384: EQUAL
5385: IFFALSE 5403
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5387: LD_VAR 0 1
5391: PUSH
5392: LD_INT 1
5394: ARRAY
5395: PPUSH
5396: LD_STRING D4-FSol1-1
5398: PPUSH
5399: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5403: LD_EXP 8
5407: PPUSH
5408: LD_STRING D4-Mikh-2
5410: PPUSH
5411: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5415: LD_VAR 0 1
5419: PUSH
5420: LD_INT 1
5422: ARRAY
5423: PPUSH
5424: CALL_OW 258
5428: PUSH
5429: LD_INT 1
5431: EQUAL
5432: IFFALSE 5450
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5434: LD_VAR 0 1
5438: PUSH
5439: LD_INT 1
5441: ARRAY
5442: PPUSH
5443: LD_STRING D4-Sol1-2
5445: PPUSH
5446: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5450: LD_VAR 0 1
5454: PUSH
5455: LD_INT 1
5457: ARRAY
5458: PPUSH
5459: CALL_OW 258
5463: PUSH
5464: LD_INT 2
5466: EQUAL
5467: IFFALSE 5485
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5469: LD_VAR 0 1
5473: PUSH
5474: LD_INT 1
5476: ARRAY
5477: PPUSH
5478: LD_STRING D4-FSol1-2
5480: PPUSH
5481: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5485: LD_EXP 8
5489: PPUSH
5490: LD_STRING D4-Mikh-3
5492: PPUSH
5493: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5497: LD_VAR 0 1
5501: PUSH
5502: LD_INT 1
5504: ARRAY
5505: PPUSH
5506: CALL_OW 258
5510: PUSH
5511: LD_INT 1
5513: EQUAL
5514: IFFALSE 5532
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5516: LD_VAR 0 1
5520: PUSH
5521: LD_INT 1
5523: ARRAY
5524: PPUSH
5525: LD_STRING D4-Sol1-3
5527: PPUSH
5528: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5532: LD_VAR 0 1
5536: PUSH
5537: LD_INT 1
5539: ARRAY
5540: PPUSH
5541: CALL_OW 258
5545: PUSH
5546: LD_INT 2
5548: EQUAL
5549: IFFALSE 5567
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5551: LD_VAR 0 1
5555: PUSH
5556: LD_INT 1
5558: ARRAY
5559: PPUSH
5560: LD_STRING D4-FSol1-3
5562: PPUSH
5563: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5567: LD_EXP 8
5571: PPUSH
5572: LD_STRING D4-Mikh-4
5574: PPUSH
5575: CALL_OW 88
// case query ( Qs1 ) of 1 :
5579: LD_STRING Qs1
5581: PPUSH
5582: CALL_OW 97
5586: PUSH
5587: LD_INT 1
5589: DOUBLE
5590: EQUAL
5591: IFTRUE 5595
5593: GO 5630
5595: POP
// begin InGameOff ;
5596: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5600: LD_INT 1
5602: PPUSH
5603: LD_INT 6
5605: PPUSH
5606: LD_INT 2
5608: PPUSH
5609: LD_INT 1
5611: PPUSH
5612: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5616: LD_EXP 8
5620: PPUSH
5621: LD_INT 17
5623: PPUSH
5624: CALL_OW 113
// end ; 2 :
5628: GO 6223
5630: LD_INT 2
5632: DOUBLE
5633: EQUAL
5634: IFTRUE 5638
5636: GO 6188
5638: POP
// begin repeat wait ( 0 0$1 ) ;
5639: LD_INT 35
5641: PPUSH
5642: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5646: LD_VAR 0 1
5650: PUSH
5651: LD_INT 1
5653: ARRAY
5654: PPUSH
5655: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5659: LD_VAR 0 1
5663: PUSH
5664: LD_INT 1
5666: ARRAY
5667: PPUSH
5668: LD_EXP 1
5672: PPUSH
5673: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5677: LD_EXP 8
5681: PPUSH
5682: LD_EXP 1
5686: PPUSH
5687: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5691: LD_EXP 1
5695: PPUSH
5696: LD_EXP 8
5700: PPUSH
5701: CALL_OW 296
5705: PUSH
5706: LD_INT 5
5708: LESS
5709: IFFALSE 5639
// ComTurnUnit ( Mikhail , JMM ) ;
5711: LD_EXP 8
5715: PPUSH
5716: LD_EXP 1
5720: PPUSH
5721: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5725: LD_EXP 1
5729: PPUSH
5730: LD_STRING D4b-JMM-1
5732: PPUSH
5733: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5737: LD_EXP 8
5741: PPUSH
5742: LD_STRING D4b-Mikh-1
5744: PPUSH
5745: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5749: LD_EXP 1
5753: PPUSH
5754: LD_STRING D4b-JMM-2
5756: PPUSH
5757: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5761: LD_EXP 8
5765: PPUSH
5766: LD_STRING D4b-Mikh-2
5768: PPUSH
5769: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5773: LD_EXP 1
5777: PPUSH
5778: LD_STRING D4b-JMM-3
5780: PPUSH
5781: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5785: LD_EXP 8
5789: PPUSH
5790: LD_STRING D4b-Mikh-3
5792: PPUSH
5793: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5797: LD_EXP 1
5801: PPUSH
5802: LD_STRING D4b-JMM-4
5804: PPUSH
5805: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5809: LD_EXP 8
5813: PPUSH
5814: LD_STRING D4b-Mikh-4
5816: PPUSH
5817: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5821: LD_EXP 1
5825: PPUSH
5826: LD_STRING D4b-JMM-5
5828: PPUSH
5829: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5833: LD_EXP 8
5837: PPUSH
5838: LD_STRING D4b-Mikh-5
5840: PPUSH
5841: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5845: LD_EXP 1
5849: PPUSH
5850: LD_STRING D4b-JMM-6
5852: PPUSH
5853: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5857: LD_EXP 8
5861: PPUSH
5862: LD_STRING D4b-Mikh-6
5864: PPUSH
5865: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5869: LD_EXP 1
5873: PPUSH
5874: LD_STRING D4b-JMM-7
5876: PPUSH
5877: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5881: LD_EXP 8
5885: PPUSH
5886: LD_STRING D4b-Mikh-7
5888: PPUSH
5889: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5893: LD_VAR 0 1
5897: PUSH
5898: LD_INT 1
5900: ARRAY
5901: PPUSH
5902: CALL_OW 258
5906: PUSH
5907: LD_INT 1
5909: EQUAL
5910: IFFALSE 5928
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
5912: LD_VAR 0 1
5916: PUSH
5917: LD_INT 1
5919: ARRAY
5920: PPUSH
5921: LD_STRING D4b-Sol1-7
5923: PPUSH
5924: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5928: LD_VAR 0 1
5932: PUSH
5933: LD_INT 1
5935: ARRAY
5936: PPUSH
5937: CALL_OW 258
5941: PUSH
5942: LD_INT 2
5944: EQUAL
5945: IFFALSE 5963
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
5947: LD_VAR 0 1
5951: PUSH
5952: LD_INT 1
5954: ARRAY
5955: PPUSH
5956: LD_STRING D4b-FSol1-7
5958: PPUSH
5959: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
5963: LD_EXP 1
5967: PPUSH
5968: LD_STRING D4b-JMM-8
5970: PPUSH
5971: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5975: LD_VAR 0 1
5979: PUSH
5980: LD_INT 1
5982: ARRAY
5983: PPUSH
5984: CALL_OW 258
5988: PUSH
5989: LD_INT 1
5991: EQUAL
5992: IFFALSE 6010
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
5994: LD_VAR 0 1
5998: PUSH
5999: LD_INT 1
6001: ARRAY
6002: PPUSH
6003: LD_STRING D4b-Sol1-8
6005: PPUSH
6006: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6010: LD_VAR 0 1
6014: PUSH
6015: LD_INT 1
6017: ARRAY
6018: PPUSH
6019: CALL_OW 258
6023: PUSH
6024: LD_INT 2
6026: EQUAL
6027: IFFALSE 6045
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6029: LD_VAR 0 1
6033: PUSH
6034: LD_INT 1
6036: ARRAY
6037: PPUSH
6038: LD_STRING D4b-FSol1-8
6040: PPUSH
6041: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6045: LD_EXP 1
6049: PPUSH
6050: LD_STRING D4b-JMM-9
6052: PPUSH
6053: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6057: LD_EXP 8
6061: PPUSH
6062: LD_INT 1
6064: PPUSH
6065: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6069: LD_ADDR_VAR 0 3
6073: PUSH
6074: LD_INT 22
6076: PUSH
6077: LD_INT 1
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: EMPTY
6085: LIST
6086: PPUSH
6087: CALL_OW 69
6091: PUSH
6092: FOR_IN
6093: IFFALSE 6106
// ComFree ( i ) ;
6095: LD_VAR 0 3
6099: PPUSH
6100: CALL_OW 139
6104: GO 6092
6106: POP
6107: POP
// repeat wait ( 0 0$1 ) ;
6108: LD_INT 35
6110: PPUSH
6111: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6115: LD_EXP 8
6119: PPUSH
6120: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6124: LD_EXP 8
6128: PUSH
6129: LD_VAR 0 1
6133: PUSH
6134: LD_INT 1
6136: ARRAY
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: PPUSH
6142: LD_INT 1
6144: PPUSH
6145: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6149: LD_EXP 8
6153: PPUSH
6154: CALL_OW 310
6158: IFFALSE 6108
// mikhailDepot = IsInUnit ( Mikhail ) ;
6160: LD_ADDR_EXP 23
6164: PUSH
6165: LD_EXP 8
6169: PPUSH
6170: CALL_OW 310
6174: ST_TO_ADDR
// InGameOff ;
6175: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6179: LD_STRING M3
6181: PPUSH
6182: CALL_OW 337
// end ; 3 :
6186: GO 6223
6188: LD_INT 3
6190: DOUBLE
6191: EQUAL
6192: IFTRUE 6196
6194: GO 6222
6196: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6197: LD_EXP 8
6201: PPUSH
6202: LD_INT 17
6204: PPUSH
6205: CALL_OW 113
// wait ( 0 0$3 ) ;
6209: LD_INT 105
6211: PPUSH
6212: CALL_OW 67
// InGameOff ;
6216: CALL_OW 9
// end ; end ;
6220: GO 6223
6222: POP
// PrepareTigers ;
6223: CALL 14440 0 0
// RussianTrap ;
6227: CALL 9986 0 0
// tigersRespawn = 1 ;
6231: LD_ADDR_EXP 30
6235: PUSH
6236: LD_INT 1
6238: ST_TO_ADDR
// end ;
6239: PPOPN 3
6241: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6242: LD_INT 1
6244: PPUSH
6245: CALL_OW 255
6249: PUSH
6250: LD_INT 1
6252: EQUAL
6253: PUSH
6254: LD_INT 10
6256: PPUSH
6257: CALL_OW 255
6261: PUSH
6262: LD_INT 1
6264: EQUAL
6265: AND
6266: PUSH
6267: LD_INT 1
6269: PPUSH
6270: CALL_OW 274
6274: PPUSH
6275: LD_INT 1
6277: PPUSH
6278: CALL_OW 275
6282: PUSH
6283: LD_INT 100
6285: GREATEREQUAL
6286: AND
6287: IFFALSE 6436
6289: GO 6291
6291: DISABLE
6292: LD_INT 0
6294: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6295: LD_INT 2100
6297: PPUSH
6298: LD_INT 4200
6300: PPUSH
6301: CALL_OW 12
6305: PUSH
6306: LD_INT 1050
6308: PLUS
6309: PPUSH
6310: CALL_OW 67
// PrepareCargoBays ;
6314: CALL 12723 0 0
// cargoRespawn = 1 ;
6318: LD_ADDR_EXP 28
6322: PUSH
6323: LD_INT 1
6325: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6326: LD_ADDR_VAR 0 1
6330: PUSH
6331: LD_EXP 15
6335: PUSH
6336: LD_EXP 16
6340: PUSH
6341: LD_EXP 17
6345: PUSH
6346: LD_EXP 18
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6357: LD_VAR 0 1
6361: PPUSH
6362: LD_INT 17
6364: PPUSH
6365: LD_INT 10
6367: PPUSH
6368: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6372: LD_VAR 0 1
6376: PPUSH
6377: LD_INT 36
6379: PPUSH
6380: LD_INT 13
6382: PPUSH
6383: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6387: LD_VAR 0 1
6391: PPUSH
6392: LD_INT 40
6394: PPUSH
6395: LD_INT 20
6397: PPUSH
6398: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6402: LD_VAR 0 1
6406: PPUSH
6407: LD_INT 53
6409: PPUSH
6410: LD_INT 16
6412: PPUSH
6413: CALL_OW 171
// wait ( 0 0$5 ) ;
6417: LD_INT 175
6419: PPUSH
6420: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6424: LD_EXP 17
6428: PPUSH
6429: LD_STRING D5-Rus2-1
6431: PPUSH
6432: CALL_OW 88
// end ;
6436: PPOPN 1
6438: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6439: LD_EXP 28
6443: PUSH
6444: LD_INT 1
6446: EQUAL
6447: IFFALSE 6602
6449: GO 6451
6451: DISABLE
6452: LD_INT 0
6454: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6455: LD_ADDR_VAR 0 1
6459: PUSH
6460: LD_INT 22
6462: PUSH
6463: LD_INT 3
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: PUSH
6470: LD_INT 21
6472: PUSH
6473: LD_INT 2
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: PUSH
6480: LD_INT 34
6482: PUSH
6483: LD_INT 51
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: LIST
6494: PPUSH
6495: CALL_OW 69
6499: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6500: LD_INT 105
6502: PPUSH
6503: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6507: LD_VAR 0 1
6511: PPUSH
6512: LD_INT 3
6514: PUSH
6515: LD_INT 60
6517: PUSH
6518: EMPTY
6519: LIST
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: PPUSH
6525: CALL_OW 72
6529: PUSH
6530: LD_VAR 0 1
6534: PPUSH
6535: LD_INT 3
6537: PUSH
6538: LD_INT 24
6540: PUSH
6541: LD_INT 980
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: PPUSH
6552: CALL_OW 72
6556: OR
6557: IFFALSE 6500
// ComMoveXY ( cargos , 7 , 9 ) ;
6559: LD_VAR 0 1
6563: PPUSH
6564: LD_INT 7
6566: PPUSH
6567: LD_INT 9
6569: PPUSH
6570: CALL_OW 111
// cargoSee = 1 ;
6574: LD_ADDR_EXP 29
6578: PUSH
6579: LD_INT 1
6581: ST_TO_ADDR
// cargoEscape = 1 ;
6582: LD_ADDR_EXP 20
6586: PUSH
6587: LD_INT 1
6589: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6590: LD_EXP 17
6594: PPUSH
6595: LD_STRING D5-Rus2-1a
6597: PPUSH
6598: CALL_OW 88
// end ;
6602: PPOPN 1
6604: END
// every 0 0$1 trigger cargoEscape > 0 do
6605: LD_EXP 20
6609: PUSH
6610: LD_INT 0
6612: GREATER
6613: IFFALSE 6760
6615: GO 6617
6617: DISABLE
// begin enable ;
6618: ENABLE
// ComMoveToArea ( [ cargo1 , cargo2 ] , RussianAttack ) ;
6619: LD_EXP 15
6623: PUSH
6624: LD_EXP 16
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PPUSH
6633: LD_INT 13
6635: PPUSH
6636: CALL_OW 113
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6640: LD_EXP 15
6644: PPUSH
6645: LD_INT 13
6647: PPUSH
6648: CALL_OW 308
6652: PUSH
6653: LD_EXP 17
6657: PPUSH
6658: LD_INT 13
6660: PPUSH
6661: CALL_OW 308
6665: OR
6666: IFFALSE 6700
// begin RemoveUnit ( cargo1 ) ;
6668: LD_EXP 15
6672: PPUSH
6673: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6677: LD_EXP 17
6681: PPUSH
6682: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6686: LD_ADDR_EXP 20
6690: PUSH
6691: LD_EXP 20
6695: PUSH
6696: LD_INT 1
6698: PLUS
6699: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6700: LD_EXP 16
6704: PPUSH
6705: LD_INT 13
6707: PPUSH
6708: CALL_OW 308
6712: PUSH
6713: LD_EXP 18
6717: PPUSH
6718: LD_INT 13
6720: PPUSH
6721: CALL_OW 308
6725: OR
6726: IFFALSE 6760
// begin RemoveUnit ( cargo2 ) ;
6728: LD_EXP 16
6732: PPUSH
6733: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6737: LD_EXP 18
6741: PPUSH
6742: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6746: LD_ADDR_EXP 20
6750: PUSH
6751: LD_EXP 20
6755: PUSH
6756: LD_INT 1
6758: PLUS
6759: ST_TO_ADDR
// end ; end ;
6760: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
6761: LD_EXP 20
6765: PUSH
6766: LD_INT 1
6768: GREATER
6769: IFFALSE 6926
6771: GO 6773
6773: DISABLE
6774: LD_INT 0
6776: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
6777: LD_INT 4
6779: PPUSH
6780: LD_INT 1
6782: PPUSH
6783: LD_INT 1
6785: PPUSH
6786: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6790: LD_INT 31
6792: PPUSH
6793: LD_INT 1
6795: PPUSH
6796: LD_INT 1
6798: PPUSH
6799: CALL_OW 324
// if IsOK ( Jerry ) then
6803: LD_EXP 7
6807: PPUSH
6808: CALL_OW 302
6812: IFFALSE 6828
// Say ( Jerry , D5a-Sol1-1 ) else
6814: LD_EXP 7
6818: PPUSH
6819: LD_STRING D5a-Sol1-1
6821: PPUSH
6822: CALL_OW 88
6826: GO 6914
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
6828: LD_ADDR_VAR 0 1
6832: PUSH
6833: LD_INT 22
6835: PUSH
6836: LD_INT 1
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PUSH
6843: LD_INT 26
6845: PUSH
6846: LD_INT 1
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PPUSH
6857: CALL_OW 69
6861: PUSH
6862: LD_EXP 1
6866: PUSH
6867: LD_EXP 2
6871: PUSH
6872: LD_EXP 3
6876: PUSH
6877: LD_EXP 5
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: DIFF
6888: ST_TO_ADDR
// if not speaker then
6889: LD_VAR 0 1
6893: NOT
6894: IFFALSE 6898
// exit ;
6896: GO 6926
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
6898: LD_VAR 0 1
6902: PUSH
6903: LD_INT 1
6905: ARRAY
6906: PPUSH
6907: LD_STRING D5a-Sol1-1
6909: PPUSH
6910: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
6914: LD_EXP 1
6918: PPUSH
6919: LD_STRING D5a-JMM-1
6921: PPUSH
6922: CALL_OW 88
// end ;
6926: PPOPN 1
6928: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
6929: LD_INT 1
6931: PPUSH
6932: CALL_OW 255
6936: PUSH
6937: LD_INT 3
6939: EQUAL
6940: PUSH
6941: LD_INT 1
6943: PPUSH
6944: CALL_OW 256
6948: PUSH
6949: LD_INT 1000
6951: LESS
6952: AND
6953: PUSH
6954: LD_INT 10
6956: PPUSH
6957: CALL_OW 255
6961: PUSH
6962: LD_INT 3
6964: EQUAL
6965: PUSH
6966: LD_INT 10
6968: PPUSH
6969: CALL_OW 256
6973: PUSH
6974: LD_INT 1000
6976: LESS
6977: AND
6978: OR
6979: IFFALSE 6996
6981: GO 6983
6983: DISABLE
// begin Say ( JMM , D8-JMM-1 ) ;
6984: LD_EXP 1
6988: PPUSH
6989: LD_STRING D8-JMM-1
6991: PPUSH
6992: CALL_OW 88
// end ;
6996: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
6997: LD_EXP 8
7001: PPUSH
7002: CALL_OW 310
7006: PUSH
7007: LD_INT 1
7009: EQUAL
7010: PUSH
7011: LD_EXP 22
7015: PUSH
7016: LD_INT 3
7018: EQUAL
7019: NOT
7020: AND
7021: IFFALSE 7043
7023: GO 7025
7025: DISABLE
// begin mikhailInBase = 1 ;
7026: LD_ADDR_EXP 22
7030: PUSH
7031: LD_INT 1
7033: ST_TO_ADDR
// mikhailStatus = 1 ;
7034: LD_ADDR_EXP 21
7038: PUSH
7039: LD_INT 1
7041: ST_TO_ADDR
// enable ;
7042: ENABLE
// end ;
7043: END
// export function AskMikhail ; begin
7044: LD_INT 0
7046: PPUSH
// case query ( QMikh2 ) of 1 :
7047: LD_STRING QMikh2
7049: PPUSH
7050: CALL_OW 97
7054: PUSH
7055: LD_INT 1
7057: DOUBLE
7058: EQUAL
7059: IFTRUE 7063
7061: GO 7130
7063: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7064: LD_INT 1
7066: PPUSH
7067: LD_INT 6
7069: PPUSH
7070: LD_INT 2
7072: PPUSH
7073: LD_INT 1
7075: PPUSH
7076: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7080: LD_EXP 8
7084: PPUSH
7085: LD_INT 6
7087: PPUSH
7088: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7092: LD_EXP 8
7096: PPUSH
7097: CALL_OW 122
// wait ( 0 0$1 ) ;
7101: LD_INT 35
7103: PPUSH
7104: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7108: LD_EXP 8
7112: PPUSH
7113: LD_INT 17
7115: PPUSH
7116: CALL_OW 113
// mikhailInbase = 0 ;
7120: LD_ADDR_EXP 22
7124: PUSH
7125: LD_INT 0
7127: ST_TO_ADDR
// end ; 2 :
7128: GO 7371
7130: LD_INT 2
7132: DOUBLE
7133: EQUAL
7134: IFTRUE 7138
7136: GO 7311
7138: POP
// begin mikhailInBase = 2 ;
7139: LD_ADDR_EXP 22
7143: PUSH
7144: LD_INT 2
7146: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7147: LD_EXP 8
7151: PPUSH
7152: LD_INT 6
7154: PPUSH
7155: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7159: LD_EXP 8
7163: PPUSH
7164: CALL_OW 122
// wait ( 0 0$1 ) ;
7168: LD_INT 35
7170: PPUSH
7171: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7175: LD_EXP 8
7179: PPUSH
7180: LD_EXP 8
7184: PPUSH
7185: CALL_OW 250
7189: PUSH
7190: LD_INT 2
7192: PLUS
7193: PPUSH
7194: LD_EXP 8
7198: PPUSH
7199: CALL_OW 251
7203: PUSH
7204: LD_INT 2
7206: PLUS
7207: PPUSH
7208: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7212: LD_EXP 8
7216: PPUSH
7217: LD_EXP 8
7221: PPUSH
7222: CALL_OW 250
7226: PUSH
7227: LD_INT 1
7229: PLUS
7230: PPUSH
7231: LD_EXP 8
7235: PPUSH
7236: CALL_OW 251
7240: PUSH
7241: LD_INT 2
7243: PLUS
7244: PPUSH
7245: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7249: LD_EXP 8
7253: PPUSH
7254: LD_EXP 8
7258: PPUSH
7259: CALL_OW 250
7263: PUSH
7264: LD_INT 2
7266: PLUS
7267: PPUSH
7268: LD_EXP 8
7272: PPUSH
7273: CALL_OW 251
7277: PPUSH
7278: CALL_OW 171
// wait ( 0 0$5 ) ;
7282: LD_INT 175
7284: PPUSH
7285: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7289: LD_EXP 8
7293: PPUSH
7294: LD_INT 25
7296: PPUSH
7297: CALL_OW 113
// mikhailInBase = 4 ;
7301: LD_ADDR_EXP 22
7305: PUSH
7306: LD_INT 4
7308: ST_TO_ADDR
// end ; 3 :
7309: GO 7371
7311: LD_INT 3
7313: DOUBLE
7314: EQUAL
7315: IFTRUE 7319
7317: GO 7370
7319: POP
// begin SetSide ( Mikhail , 6 ) ;
7320: LD_EXP 8
7324: PPUSH
7325: LD_INT 6
7327: PPUSH
7328: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7332: LD_EXP 8
7336: PPUSH
7337: CALL_OW 122
// wait ( 0 0$1 ) ;
7341: LD_INT 35
7343: PPUSH
7344: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7348: LD_EXP 8
7352: PPUSH
7353: LD_INT 17
7355: PPUSH
7356: CALL_OW 113
// mikhailInbase = 3 ;
7360: LD_ADDR_EXP 22
7364: PUSH
7365: LD_INT 3
7367: ST_TO_ADDR
// end ; end ;
7368: GO 7371
7370: POP
// end ;
7371: LD_VAR 0 1
7375: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7376: LD_EXP 8
7380: PPUSH
7381: LD_INT 25
7383: PPUSH
7384: CALL_OW 308
7388: PUSH
7389: LD_EXP 22
7393: PUSH
7394: LD_INT 4
7396: EQUAL
7397: AND
7398: IFFALSE 7502
7400: GO 7402
7402: DISABLE
// begin enable ;
7403: ENABLE
// mikhailInBase = 1 ;
7404: LD_ADDR_EXP 22
7408: PUSH
7409: LD_INT 1
7411: ST_TO_ADDR
// InGameOn ;
7412: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7416: LD_INT 1
7418: PPUSH
7419: LD_INT 6
7421: PPUSH
7422: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7426: LD_INT 35
7428: PPUSH
7429: CALL_OW 67
// if Carry ( Mikhail ) then
7433: LD_EXP 8
7437: PPUSH
7438: CALL_OW 281
7442: IFFALSE 7453
// ComUnload ( Mikhail ) ;
7444: LD_EXP 8
7448: PPUSH
7449: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7453: LD_EXP 8
7457: PPUSH
7458: LD_INT 1
7460: PPUSH
7461: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7465: LD_EXP 8
7469: PPUSH
7470: CALL_OW 310
7474: IFFALSE 7426
// SetSide ( dep1 , 1 ) ;
7476: LD_INT 1
7478: PPUSH
7479: LD_INT 1
7481: PPUSH
7482: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7486: LD_EXP 8
7490: PPUSH
7491: LD_INT 1
7493: PPUSH
7494: CALL_OW 235
// InGameOff ;
7498: CALL_OW 9
// end ;
7502: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7503: LD_EXP 8
7507: PPUSH
7508: CALL_OW 310
7512: PUSH
7513: LD_EXP 22
7517: PUSH
7518: LD_INT 3
7520: EQUAL
7521: NOT
7522: AND
7523: IFFALSE 7658
7525: GO 7527
7527: DISABLE
// begin enable ;
7528: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7529: LD_INT 22
7531: PUSH
7532: LD_INT 1
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 21
7541: PUSH
7542: LD_INT 1
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: PUSH
7549: LD_INT 91
7551: PUSH
7552: LD_EXP 8
7556: PPUSH
7557: CALL_OW 310
7561: PUSH
7562: LD_INT 10
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: LIST
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: LIST
7574: PPUSH
7575: CALL_OW 69
7579: PUSH
7580: LD_INT 1
7582: EQUAL
7583: IFFALSE 7658
// begin mikhailStatus = 4 ;
7585: LD_ADDR_EXP 21
7589: PUSH
7590: LD_INT 4
7592: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
7593: LD_INT 1
7595: PPUSH
7596: LD_INT 6
7598: PPUSH
7599: LD_INT 2
7601: PPUSH
7602: LD_INT 1
7604: PPUSH
7605: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7609: LD_EXP 8
7613: PPUSH
7614: LD_INT 6
7616: PPUSH
7617: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7621: LD_EXP 8
7625: PPUSH
7626: CALL_OW 122
// wait ( 0 0$1 ) ;
7630: LD_INT 35
7632: PPUSH
7633: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7637: LD_EXP 8
7641: PPUSH
7642: LD_INT 17
7644: PPUSH
7645: CALL_OW 113
// mikhailStatus = 3 ;
7649: LD_ADDR_EXP 21
7653: PUSH
7654: LD_INT 3
7656: ST_TO_ADDR
// disable ;
7657: DISABLE
// end ; end ;
7658: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7659: LD_EXP 1
7663: PPUSH
7664: LD_EXP 23
7668: PPUSH
7669: CALL_OW 296
7673: PUSH
7674: LD_INT 5
7676: LESS
7677: PUSH
7678: LD_EXP 21
7682: PUSH
7683: LD_INT 3
7685: EQUAL
7686: AND
7687: PUSH
7688: LD_EXP 22
7692: PUSH
7693: LD_INT 3
7695: EQUAL
7696: NOT
7697: AND
7698: IFFALSE 7920
7700: GO 7702
7702: DISABLE
7703: LD_INT 0
7705: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
7706: LD_ADDR_VAR 0 1
7710: PUSH
7711: LD_INT 22
7713: PUSH
7714: LD_INT 1
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: PUSH
7721: LD_INT 21
7723: PUSH
7724: LD_INT 1
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: PUSH
7731: LD_INT 26
7733: PUSH
7734: LD_INT 1
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: LIST
7745: PPUSH
7746: CALL_OW 69
7750: PUSH
7751: LD_EXP 1
7755: PUSH
7756: LD_EXP 5
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: DIFF
7765: ST_TO_ADDR
// DialogueOn ;
7766: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7770: LD_EXP 1
7774: PPUSH
7775: LD_STRING D7-JMM-1
7777: PPUSH
7778: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7782: LD_VAR 0 1
7786: PUSH
7787: LD_INT 1
7789: ARRAY
7790: PPUSH
7791: LD_STRING D7-Sol1-1
7793: PPUSH
7794: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7798: LD_EXP 1
7802: PPUSH
7803: LD_STRING D7-JMM-2
7805: PPUSH
7806: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
7810: LD_VAR 0 1
7814: PUSH
7815: LD_INT 1
7817: ARRAY
7818: PPUSH
7819: LD_STRING D7-Sol1-2
7821: PPUSH
7822: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
7826: LD_EXP 1
7830: PPUSH
7831: LD_STRING D7-JMM-3
7833: PPUSH
7834: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
7838: LD_VAR 0 1
7842: PUSH
7843: LD_INT 1
7845: ARRAY
7846: PPUSH
7847: LD_STRING D7-Sol1-3
7849: PPUSH
7850: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
7854: LD_EXP 3
7858: PPUSH
7859: CALL_OW 302
7863: PUSH
7864: LD_EXP 4
7868: PPUSH
7869: CALL_OW 302
7873: AND
7874: IFFALSE 7916
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
7876: LD_EXP 3
7880: PPUSH
7881: LD_STRING D7-Cyrus-3
7883: PPUSH
7884: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
7888: LD_VAR 0 1
7892: PUSH
7893: LD_INT 1
7895: ARRAY
7896: PPUSH
7897: LD_STRING D7-Sol1-4
7899: PPUSH
7900: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
7904: LD_EXP 4
7908: PPUSH
7909: LD_STRING D7-Lisa-4
7911: PPUSH
7912: CALL_OW 88
// end ; DialogueOff ;
7916: CALL_OW 7
// end ;
7920: PPOPN 1
7922: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
7923: LD_EXP 8
7927: PPUSH
7928: CALL_OW 303
7932: PUSH
7933: LD_EXP 21
7937: PUSH
7938: LD_INT 3
7940: EQUAL
7941: AND
7942: IFFALSE 7956
7944: GO 7946
7946: DISABLE
// begin enable ;
7947: ENABLE
// mikhailStatus = 2 ;
7948: LD_ADDR_EXP 21
7952: PUSH
7953: LD_INT 2
7955: ST_TO_ADDR
// end ;
7956: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
7957: LD_EXP 8
7961: PPUSH
7962: LD_INT 17
7964: PPUSH
7965: CALL_OW 308
7969: PUSH
7970: LD_EXP 8
7974: PPUSH
7975: CALL_OW 255
7979: PUSH
7980: LD_INT 6
7982: EQUAL
7983: AND
7984: IFFALSE 8017
7986: GO 7988
7988: DISABLE
// begin if not mikhailInBase = 3 then
7989: LD_EXP 22
7993: PUSH
7994: LD_INT 3
7996: EQUAL
7997: NOT
7998: IFFALSE 8008
// mikhailStatus = 3 ;
8000: LD_ADDR_EXP 21
8004: PUSH
8005: LD_INT 3
8007: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8008: LD_EXP 8
8012: PPUSH
8013: CALL_OW 64
// end ;
8017: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8018: LD_EXP 21
8022: PUSH
8023: LD_INT 3
8025: EQUAL
8026: PUSH
8027: LD_EXP 8
8031: PPUSH
8032: CALL_OW 255
8036: PUSH
8037: LD_INT 6
8039: EQUAL
8040: AND
8041: IFFALSE 8207
8043: GO 8045
8045: DISABLE
8046: LD_INT 0
8048: PPUSH
8049: PPUSH
// begin enable ;
8050: ENABLE
// if IsOk ( Mikhail ) then
8051: LD_EXP 8
8055: PPUSH
8056: CALL_OW 302
8060: IFFALSE 8207
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8062: LD_ADDR_VAR 0 2
8066: PUSH
8067: LD_EXP 8
8071: PPUSH
8072: LD_INT 22
8074: PUSH
8075: LD_INT 1
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: PUSH
8082: LD_INT 21
8084: PUSH
8085: LD_INT 1
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PPUSH
8096: CALL_OW 69
8100: PPUSH
8101: CALL 10178 0 2
8105: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8106: LD_VAR 0 2
8110: PPUSH
8111: LD_EXP 8
8115: PPUSH
8116: CALL_OW 296
8120: PUSH
8121: LD_INT 8
8123: LESS
8124: IFFALSE 8207
// begin if GetSex ( attacker ) = sex_male then
8126: LD_VAR 0 2
8130: PPUSH
8131: CALL_OW 258
8135: PUSH
8136: LD_INT 1
8138: EQUAL
8139: IFFALSE 8175
// begin disable ;
8141: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8142: LD_VAR 0 2
8146: PPUSH
8147: LD_STRING D7a-Sol1-1
8149: PPUSH
8150: CALL_OW 88
// wait ( 0 0$2 ) ;
8154: LD_INT 70
8156: PPUSH
8157: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8161: LD_VAR 0 2
8165: PPUSH
8166: LD_STRING D7a-Sol1-1a
8168: PPUSH
8169: CALL_OW 88
// end else
8173: GO 8207
// begin disable ;
8175: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8176: LD_VAR 0 2
8180: PPUSH
8181: LD_STRING D7a-FSol1-1
8183: PPUSH
8184: CALL_OW 88
// wait ( 0 0$2 ) ;
8188: LD_INT 70
8190: PPUSH
8191: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8195: LD_VAR 0 2
8199: PPUSH
8200: LD_STRING D7a-FSol1-1a
8202: PPUSH
8203: CALL_OW 88
// end ; end ; end ; end ;
8207: PPOPN 2
8209: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8210: LD_EXP 27
8214: PUSH
8215: LD_INT 1
8217: EQUAL
8218: PUSH
8219: LD_INT 22
8221: PPUSH
8222: LD_INT 22
8224: PUSH
8225: LD_INT 3
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: LD_INT 21
8234: PUSH
8235: LD_INT 1
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: PPUSH
8246: CALL_OW 70
8250: PUSH
8251: LD_INT 2
8253: GREATER
8254: AND
8255: PUSH
8256: LD_INT 22
8258: PPUSH
8259: LD_INT 22
8261: PUSH
8262: LD_INT 1
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PUSH
8269: LD_INT 2
8271: PUSH
8272: LD_INT 21
8274: PUSH
8275: LD_INT 1
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: PUSH
8282: LD_INT 59
8284: PUSH
8285: EMPTY
8286: LIST
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: LIST
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: PPUSH
8297: CALL_OW 70
8301: PUSH
8302: LD_INT 0
8304: EQUAL
8305: AND
8306: IFFALSE 8321
8308: GO 8310
8310: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8311: LD_INT 1
8313: PPUSH
8314: LD_INT 3
8316: PPUSH
8317: CALL_OW 235
// end ;
8321: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8322: LD_EXP 30
8326: PUSH
8327: LD_INT 1
8329: EQUAL
8330: PUSH
8331: LD_INT 22
8333: PUSH
8334: LD_INT 0
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: PUSH
8341: LD_INT 25
8343: PUSH
8344: LD_INT 14
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PPUSH
8355: CALL_OW 69
8359: PUSH
8360: LD_INT 0
8362: EQUAL
8363: AND
8364: IFFALSE 8465
8366: GO 8368
8368: DISABLE
8369: LD_INT 0
8371: PPUSH
8372: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8373: LD_ADDR_VAR 0 2
8377: PUSH
8378: LD_INT 22
8380: PUSH
8381: LD_INT 1
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: PUSH
8388: LD_INT 21
8390: PUSH
8391: LD_INT 1
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PUSH
8398: LD_INT 23
8400: PUSH
8401: LD_INT 1
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: LIST
8412: PPUSH
8413: CALL_OW 69
8417: ST_TO_ADDR
// for i in tmp do
8418: LD_ADDR_VAR 0 1
8422: PUSH
8423: LD_VAR 0 2
8427: PUSH
8428: FOR_IN
8429: IFFALSE 8456
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8431: LD_VAR 0 1
8435: PPUSH
8436: LD_INT 1
8438: PPUSH
8439: LD_INT 4
8441: PPUSH
8442: CALL_OW 12
8446: PPUSH
8447: LD_INT 300
8449: PPUSH
8450: CALL_OW 492
8454: GO 8428
8456: POP
8457: POP
// SetAchievement ( ACH_TIGER ) ;
8458: LD_STRING ACH_TIGER
8460: PPUSH
8461: CALL_OW 543
// end ;
8465: PPOPN 2
8467: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
8468: LD_INT 22
8470: PUSH
8471: LD_INT 1
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: PUSH
8478: LD_INT 34
8480: PUSH
8481: LD_INT 51
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: PPUSH
8492: CALL_OW 69
8496: PUSH
8497: LD_INT 2
8499: GREATEREQUAL
8500: IFFALSE 8512
8502: GO 8504
8504: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
8505: LD_STRING ACH_CARGO
8507: PPUSH
8508: CALL_OW 543
8512: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8513: LD_INT 0
8515: PPUSH
8516: PPUSH
8517: PPUSH
8518: PPUSH
// for i = 1 to count do
8519: LD_ADDR_VAR 0 8
8523: PUSH
8524: DOUBLE
8525: LD_INT 1
8527: DEC
8528: ST_TO_ADDR
8529: LD_VAR 0 6
8533: PUSH
8534: FOR_TO
8535: IFFALSE 8616
// begin uc_side = side ;
8537: LD_ADDR_OWVAR 20
8541: PUSH
8542: LD_VAR 0 1
8546: ST_TO_ADDR
// uc_nation = nation ;
8547: LD_ADDR_OWVAR 21
8551: PUSH
8552: LD_VAR 0 2
8556: ST_TO_ADDR
// hc_gallery =  ;
8557: LD_ADDR_OWVAR 33
8561: PUSH
8562: LD_STRING 
8564: ST_TO_ADDR
// hc_name =  ;
8565: LD_ADDR_OWVAR 26
8569: PUSH
8570: LD_STRING 
8572: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8573: LD_INT 0
8575: PPUSH
8576: LD_VAR 0 5
8580: PPUSH
8581: LD_VAR 0 4
8585: PPUSH
8586: CALL_OW 380
// un = CreateHuman ;
8590: LD_ADDR_VAR 0 10
8594: PUSH
8595: CALL_OW 44
8599: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8600: LD_VAR 0 10
8604: PPUSH
8605: LD_VAR 0 3
8609: PPUSH
8610: CALL_OW 52
// end ;
8614: GO 8534
8616: POP
8617: POP
// end ;
8618: LD_VAR 0 7
8622: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8623: LD_INT 0
8625: PPUSH
8626: PPUSH
8627: PPUSH
// uc_side := GetSide ( b ) ;
8628: LD_ADDR_OWVAR 20
8632: PUSH
8633: LD_VAR 0 2
8637: PPUSH
8638: CALL_OW 255
8642: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8643: LD_ADDR_OWVAR 21
8647: PUSH
8648: LD_VAR 0 2
8652: PPUSH
8653: CALL_OW 248
8657: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8658: LD_INT 0
8660: PPUSH
8661: LD_INT 1
8663: PPUSH
8664: LD_VAR 0 1
8668: PPUSH
8669: CALL_OW 380
// un = CreateHuman ;
8673: LD_ADDR_VAR 0 4
8677: PUSH
8678: CALL_OW 44
8682: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8683: LD_ADDR_VAR 0 5
8687: PUSH
8688: LD_VAR 0 2
8692: PPUSH
8693: CALL_OW 254
8697: PUSH
8698: LD_INT 3
8700: MINUS
8701: ST_TO_ADDR
// if dir < 0 then
8702: LD_VAR 0 5
8706: PUSH
8707: LD_INT 0
8709: LESS
8710: IFFALSE 8726
// dir := 6 + dir ;
8712: LD_ADDR_VAR 0 5
8716: PUSH
8717: LD_INT 6
8719: PUSH
8720: LD_VAR 0 5
8724: PLUS
8725: ST_TO_ADDR
// SetDir ( un , dir ) ;
8726: LD_VAR 0 4
8730: PPUSH
8731: LD_VAR 0 5
8735: PPUSH
8736: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8740: LD_VAR 0 4
8744: PPUSH
8745: LD_VAR 0 2
8749: PPUSH
8750: CALL_OW 52
// end ;
8754: LD_VAR 0 3
8758: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8759: LD_INT 0
8761: PPUSH
8762: PPUSH
8763: PPUSH
8764: PPUSH
8765: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8766: LD_ADDR_VAR 0 7
8770: PUSH
8771: LD_INT 22
8773: PUSH
8774: LD_VAR 0 1
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: PUSH
8783: LD_INT 25
8785: PUSH
8786: LD_INT 2
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: LD_INT 24
8795: PUSH
8796: LD_INT 1000
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: LIST
8807: PPUSH
8808: CALL_OW 69
8812: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8813: LD_ADDR_VAR 0 5
8817: PUSH
8818: LD_VAR 0 3
8822: PPUSH
8823: LD_INT 22
8825: PUSH
8826: LD_VAR 0 1
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PUSH
8835: LD_INT 21
8837: PUSH
8838: LD_INT 3
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: PUSH
8845: LD_INT 3
8847: PUSH
8848: LD_INT 24
8850: PUSH
8851: LD_INT 1000
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: LIST
8866: PUSH
8867: EMPTY
8868: LIST
8869: PPUSH
8870: CALL_OW 70
8874: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8875: LD_VAR 0 5
8879: PUSH
8880: LD_INT 0
8882: GREATER
8883: PUSH
8884: LD_VAR 0 7
8888: PUSH
8889: LD_INT 0
8891: GREATER
8892: AND
8893: IFFALSE 8959
// begin for i in engineerOk_list do
8895: LD_ADDR_VAR 0 6
8899: PUSH
8900: LD_VAR 0 7
8904: PUSH
8905: FOR_IN
8906: IFFALSE 8957
// begin for j in buildings_list do
8908: LD_ADDR_VAR 0 8
8912: PUSH
8913: LD_VAR 0 5
8917: PUSH
8918: FOR_IN
8919: IFFALSE 8953
// begin AddComExitBuilding ( i ) ;
8921: LD_VAR 0 6
8925: PPUSH
8926: CALL_OW 182
// wait ( 0 0$1 ) ;
8930: LD_INT 35
8932: PPUSH
8933: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8937: LD_VAR 0 6
8941: PPUSH
8942: LD_VAR 0 8
8946: PPUSH
8947: CALL_OW 190
// end ;
8951: GO 8918
8953: POP
8954: POP
// end ;
8955: GO 8905
8957: POP
8958: POP
// end ; if buildings_list = 0 then
8959: LD_VAR 0 5
8963: PUSH
8964: LD_INT 0
8966: EQUAL
8967: IFFALSE 9000
// begin for i in engineerOK_list do
8969: LD_ADDR_VAR 0 6
8973: PUSH
8974: LD_VAR 0 7
8978: PUSH
8979: FOR_IN
8980: IFFALSE 8998
// begin ComEnterUnit ( i , building ) ;
8982: LD_VAR 0 6
8986: PPUSH
8987: LD_VAR 0 2
8991: PPUSH
8992: CALL_OW 120
// end ;
8996: GO 8979
8998: POP
8999: POP
// end ; end ;
9000: LD_VAR 0 4
9004: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
9005: LD_INT 0
9007: PPUSH
9008: PPUSH
9009: PPUSH
9010: PPUSH
9011: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9012: LD_ADDR_VAR 0 6
9016: PUSH
9017: LD_INT 22
9019: PUSH
9020: LD_VAR 0 1
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: PUSH
9029: LD_INT 25
9031: PUSH
9032: LD_INT 4
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: PUSH
9039: LD_INT 24
9041: PUSH
9042: LD_INT 250
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: LIST
9053: PPUSH
9054: CALL_OW 69
9058: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9059: LD_ADDR_VAR 0 9
9063: PUSH
9064: LD_VAR 0 3
9068: PPUSH
9069: LD_INT 22
9071: PUSH
9072: LD_VAR 0 1
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: PUSH
9081: LD_INT 21
9083: PUSH
9084: LD_INT 1
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: PUSH
9091: LD_INT 3
9093: PUSH
9094: LD_INT 24
9096: PUSH
9097: LD_INT 650
9099: PUSH
9100: EMPTY
9101: LIST
9102: LIST
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: LIST
9112: PPUSH
9113: CALL_OW 70
9117: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
9118: LD_VAR 0 9
9122: PUSH
9123: LD_INT 0
9125: GREATER
9126: PUSH
9127: LD_VAR 0 6
9131: PUSH
9132: LD_INT 0
9134: GREATER
9135: AND
9136: IFFALSE 9263
// begin for i = 1 to damageUnits do
9138: LD_ADDR_VAR 0 7
9142: PUSH
9143: DOUBLE
9144: LD_INT 1
9146: DEC
9147: ST_TO_ADDR
9148: LD_VAR 0 9
9152: PUSH
9153: FOR_TO
9154: IFFALSE 9178
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9156: LD_VAR 0 9
9160: PUSH
9161: LD_VAR 0 7
9165: ARRAY
9166: PPUSH
9167: LD_VAR 0 2
9171: PPUSH
9172: CALL_OW 113
9176: GO 9153
9178: POP
9179: POP
// for i in sci_list do
9180: LD_ADDR_VAR 0 7
9184: PUSH
9185: LD_VAR 0 6
9189: PUSH
9190: FOR_IN
9191: IFFALSE 9259
// begin ComExitBuilding ( i ) ;
9193: LD_VAR 0 7
9197: PPUSH
9198: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9202: LD_ADDR_VAR 0 8
9206: PUSH
9207: LD_VAR 0 2
9211: PPUSH
9212: LD_INT 22
9214: PUSH
9215: LD_VAR 0 1
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: PPUSH
9224: CALL_OW 70
9228: PUSH
9229: FOR_IN
9230: IFFALSE 9255
// begin AddComHeal ( i , j ) ;
9232: LD_VAR 0 7
9236: PPUSH
9237: LD_VAR 0 8
9241: PPUSH
9242: CALL_OW 188
// wait ( 1 1$0 ) ;
9246: LD_INT 2100
9248: PPUSH
9249: CALL_OW 67
// end ;
9253: GO 9229
9255: POP
9256: POP
// end ;
9257: GO 9190
9259: POP
9260: POP
// end else
9261: GO 9277
// begin AddComEnterUnit ( sci_list , build ) ;
9263: LD_VAR 0 6
9267: PPUSH
9268: LD_VAR 0 4
9272: PPUSH
9273: CALL_OW 180
// end ; end ;
9277: LD_VAR 0 5
9281: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9282: LD_INT 0
9284: PPUSH
9285: PPUSH
9286: PPUSH
9287: PPUSH
9288: PPUSH
9289: PPUSH
9290: PPUSH
9291: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9292: LD_ADDR_VAR 0 7
9296: PUSH
9297: LD_VAR 0 3
9301: PPUSH
9302: LD_INT 22
9304: PUSH
9305: LD_VAR 0 1
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: PUSH
9314: LD_INT 21
9316: PUSH
9317: LD_INT 2
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PUSH
9324: LD_INT 24
9326: PUSH
9327: LD_INT 550
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: PUSH
9334: LD_INT 34
9336: PUSH
9337: LD_INT 46
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: PPUSH
9350: CALL_OW 70
9354: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9355: LD_ADDR_VAR 0 8
9359: PUSH
9360: LD_VAR 0 3
9364: PPUSH
9365: LD_INT 22
9367: PUSH
9368: LD_VAR 0 1
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: PUSH
9377: LD_INT 21
9379: PUSH
9380: LD_INT 2
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: PUSH
9387: LD_INT 34
9389: PUSH
9390: LD_INT 46
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: PUSH
9397: LD_INT 3
9399: PUSH
9400: LD_INT 24
9402: PUSH
9403: LD_INT 550
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: PPUSH
9420: CALL_OW 70
9424: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9425: LD_ADDR_VAR 0 9
9429: PUSH
9430: LD_VAR 0 2
9434: PPUSH
9435: LD_INT 22
9437: PUSH
9438: LD_VAR 0 1
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: PUSH
9447: LD_INT 21
9449: PUSH
9450: LD_INT 2
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: PUSH
9457: LD_INT 34
9459: PUSH
9460: LD_INT 46
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PUSH
9467: LD_INT 24
9469: PUSH
9470: LD_INT 1000
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: PUSH
9477: LD_INT 58
9479: PUSH
9480: EMPTY
9481: LIST
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: PPUSH
9490: CALL_OW 70
9494: ST_TO_ADDR
// for i in damageVehicle_list do
9495: LD_ADDR_VAR 0 5
9499: PUSH
9500: LD_VAR 0 8
9504: PUSH
9505: FOR_IN
9506: IFFALSE 9525
// mechanicInside_list = UnitsInside ( i ) ;
9508: LD_ADDR_VAR 0 10
9512: PUSH
9513: LD_VAR 0 5
9517: PPUSH
9518: CALL_OW 313
9522: ST_TO_ADDR
9523: GO 9505
9525: POP
9526: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9527: LD_ADDR_VAR 0 11
9531: PUSH
9532: LD_VAR 0 2
9536: PPUSH
9537: LD_INT 22
9539: PUSH
9540: LD_VAR 0 1
9544: PUSH
9545: EMPTY
9546: LIST
9547: LIST
9548: PUSH
9549: LD_INT 25
9551: PUSH
9552: LD_INT 3
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: PPUSH
9563: CALL_OW 70
9567: ST_TO_ADDR
// if damageVehicle_list > 0 then
9568: LD_VAR 0 8
9572: PUSH
9573: LD_INT 0
9575: GREATER
9576: IFFALSE 9649
// begin for i in damageVehicle_list do
9578: LD_ADDR_VAR 0 5
9582: PUSH
9583: LD_VAR 0 8
9587: PUSH
9588: FOR_IN
9589: IFFALSE 9647
// begin for j in mechanicInside_list do
9591: LD_ADDR_VAR 0 6
9595: PUSH
9596: LD_VAR 0 10
9600: PUSH
9601: FOR_IN
9602: IFFALSE 9643
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9604: LD_VAR 0 8
9608: PPUSH
9609: LD_VAR 0 2
9613: PPUSH
9614: CALL_OW 113
// AddComExitVehicle ( j ) ;
9618: LD_VAR 0 6
9622: PPUSH
9623: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9627: LD_VAR 0 6
9631: PPUSH
9632: LD_VAR 0 5
9636: PPUSH
9637: CALL_OW 189
// end ;
9641: GO 9601
9643: POP
9644: POP
// end ;
9645: GO 9588
9647: POP
9648: POP
// end ; if emptyVehicle_list > 0 then
9649: LD_VAR 0 9
9653: PUSH
9654: LD_INT 0
9656: GREATER
9657: IFFALSE 9707
// begin for i in emptyVehicle_list do
9659: LD_ADDR_VAR 0 5
9663: PUSH
9664: LD_VAR 0 9
9668: PUSH
9669: FOR_IN
9670: IFFALSE 9705
// begin for j in mechanicOutside_list do
9672: LD_ADDR_VAR 0 6
9676: PUSH
9677: LD_VAR 0 11
9681: PUSH
9682: FOR_IN
9683: IFFALSE 9701
// begin AddComEnterUnit ( j , i ) ;
9685: LD_VAR 0 6
9689: PPUSH
9690: LD_VAR 0 5
9694: PPUSH
9695: CALL_OW 180
// end ;
9699: GO 9682
9701: POP
9702: POP
// end ;
9703: GO 9669
9705: POP
9706: POP
// end ; if VehicleOK_list > 0 then
9707: LD_VAR 0 7
9711: PUSH
9712: LD_INT 0
9714: GREATER
9715: IFFALSE 9749
// begin for i in VehicleOK_list do
9717: LD_ADDR_VAR 0 5
9721: PUSH
9722: LD_VAR 0 7
9726: PUSH
9727: FOR_IN
9728: IFFALSE 9747
// ComAgressiveMove ( i , 110 , 29 ) ;
9730: LD_VAR 0 5
9734: PPUSH
9735: LD_INT 110
9737: PPUSH
9738: LD_INT 29
9740: PPUSH
9741: CALL_OW 114
9745: GO 9727
9747: POP
9748: POP
// end ; end ;
9749: LD_VAR 0 4
9753: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9754: LD_INT 0
9756: PPUSH
9757: PPUSH
9758: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9759: LD_VAR 0 1
9763: PPUSH
9764: LD_INT 22
9766: PUSH
9767: LD_VAR 0 2
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: LD_INT 2
9778: PUSH
9779: LD_INT 21
9781: PUSH
9782: LD_INT 2
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PUSH
9789: LD_INT 21
9791: PUSH
9792: LD_INT 1
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: LIST
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PPUSH
9808: CALL_OW 70
9812: PUSH
9813: LD_VAR 0 5
9817: GREATER
9818: IFFALSE 9950
// begin for i in defendersList do
9820: LD_ADDR_VAR 0 7
9824: PUSH
9825: LD_VAR 0 3
9829: PUSH
9830: FOR_IN
9831: IFFALSE 9946
// begin AddComExitBuilding ( i ) ;
9833: LD_VAR 0 7
9837: PPUSH
9838: CALL_OW 182
// wait ( 0 0$1 ) ;
9842: LD_INT 35
9844: PPUSH
9845: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
9849: LD_ADDR_VAR 0 8
9853: PUSH
9854: LD_VAR 0 1
9858: PPUSH
9859: LD_INT 22
9861: PUSH
9862: LD_VAR 0 2
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PUSH
9871: LD_INT 2
9873: PUSH
9874: LD_INT 21
9876: PUSH
9877: LD_INT 2
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PUSH
9884: LD_INT 21
9886: PUSH
9887: LD_INT 1
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: LIST
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PPUSH
9903: CALL_OW 70
9907: PUSH
9908: FOR_IN
9909: IFFALSE 9942
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
9911: LD_VAR 0 7
9915: PPUSH
9916: LD_VAR 0 8
9920: PPUSH
9921: CALL_OW 250
9925: PPUSH
9926: LD_VAR 0 8
9930: PPUSH
9931: CALL_OW 251
9935: PPUSH
9936: CALL_OW 174
9940: GO 9908
9942: POP
9943: POP
// end ;
9944: GO 9830
9946: POP
9947: POP
// end else
9948: GO 9981
// begin for i in defendersList do
9950: LD_ADDR_VAR 0 7
9954: PUSH
9955: LD_VAR 0 3
9959: PUSH
9960: FOR_IN
9961: IFFALSE 9979
// ComEnterUnit ( i , build ) ;
9963: LD_VAR 0 7
9967: PPUSH
9968: LD_VAR 0 4
9972: PPUSH
9973: CALL_OW 120
9977: GO 9960
9979: POP
9980: POP
// end ; end ;
9981: LD_VAR 0 6
9985: RET
// export function RussianTrap ; var i ; begin
9986: LD_INT 0
9988: PPUSH
9989: PPUSH
// if GetSide ( Brian ) = 4 then
9990: LD_EXP 6
9994: PPUSH
9995: CALL_OW 255
9999: PUSH
10000: LD_INT 4
10002: EQUAL
10003: IFFALSE 10026
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10005: LD_EXP 6
10009: PUSH
10010: LD_EXP 7
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PPUSH
10019: LD_INT 0
10021: PPUSH
10022: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10026: LD_ADDR_VAR 0 2
10030: PUSH
10031: LD_INT 22
10033: PUSH
10034: LD_INT 3
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: PUSH
10041: LD_INT 21
10043: PUSH
10044: LD_INT 1
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PPUSH
10055: CALL_OW 69
10059: PUSH
10060: FOR_IN
10061: IFFALSE 10171
// begin ComExitBuilding ( i ) ;
10063: LD_VAR 0 2
10067: PPUSH
10068: CALL_OW 122
// wait ( 0 0$1 ) ;
10072: LD_INT 35
10074: PPUSH
10075: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10079: LD_VAR 0 2
10083: PPUSH
10084: LD_INT 120
10086: PPUSH
10087: LD_INT 56
10089: PPUSH
10090: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10094: LD_VAR 0 2
10098: PPUSH
10099: LD_INT 111
10101: PPUSH
10102: LD_INT 37
10104: PPUSH
10105: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10109: LD_INT 33
10111: PPUSH
10112: CALL_OW 255
10116: PUSH
10117: LD_INT 3
10119: EQUAL
10120: PUSH
10121: LD_INT 33
10123: PPUSH
10124: CALL_OW 302
10128: AND
10129: IFFALSE 10145
// begin AddComEnterUnit ( i , arm2 ) ;
10131: LD_VAR 0 2
10135: PPUSH
10136: LD_INT 33
10138: PPUSH
10139: CALL_OW 180
// end else
10143: GO 10169
// begin AddComCrawl ( i ) ;
10145: LD_VAR 0 2
10149: PPUSH
10150: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10154: LD_VAR 0 2
10158: PPUSH
10159: LD_INT 109
10161: PPUSH
10162: LD_INT 30
10164: PPUSH
10165: CALL_OW 174
// end ; end ;
10169: GO 10060
10171: POP
10172: POP
// end ;
10173: LD_VAR 0 1
10177: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10178: LD_INT 0
10180: PPUSH
10181: PPUSH
10182: PPUSH
10183: PPUSH
10184: PPUSH
// nearest_dist = 1000 ;
10185: LD_ADDR_VAR 0 4
10189: PUSH
10190: LD_INT 1000
10192: ST_TO_ADDR
// nearest_un = un ;
10193: LD_ADDR_VAR 0 5
10197: PUSH
10198: LD_VAR 0 1
10202: ST_TO_ADDR
// for sold in units do
10203: LD_ADDR_VAR 0 6
10207: PUSH
10208: LD_VAR 0 2
10212: PUSH
10213: FOR_IN
10214: IFFALSE 10270
// begin dist = GetDistUnits ( un , sold ) ;
10216: LD_ADDR_VAR 0 7
10220: PUSH
10221: LD_VAR 0 1
10225: PPUSH
10226: LD_VAR 0 6
10230: PPUSH
10231: CALL_OW 296
10235: ST_TO_ADDR
// if dist < nearest_dist then
10236: LD_VAR 0 7
10240: PUSH
10241: LD_VAR 0 4
10245: LESS
10246: IFFALSE 10268
// begin nearest_un = sold ;
10248: LD_ADDR_VAR 0 5
10252: PUSH
10253: LD_VAR 0 6
10257: ST_TO_ADDR
// nearest_dist = dist ;
10258: LD_ADDR_VAR 0 4
10262: PUSH
10263: LD_VAR 0 7
10267: ST_TO_ADDR
// end ; end ;
10268: GO 10213
10270: POP
10271: POP
// result := nearest_un ;
10272: LD_ADDR_VAR 0 3
10276: PUSH
10277: LD_VAR 0 5
10281: ST_TO_ADDR
// end ;
10282: LD_VAR 0 3
10286: RET
// export function PrepareDifficulty ; begin
10287: LD_INT 0
10289: PPUSH
// if Difficulty = 1 then
10290: LD_OWVAR 67
10294: PUSH
10295: LD_INT 1
10297: EQUAL
10298: IFFALSE 10361
// begin RemoveUnit ( brw2 ) ;
10300: LD_INT 9
10302: PPUSH
10303: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10307: LD_INT 30
10309: PPUSH
10310: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10314: LD_INT 52
10316: PPUSH
10317: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10321: LD_INT 63
10323: PPUSH
10324: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10328: LD_INT 5
10330: PUSH
10331: LD_INT 4
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PPUSH
10338: LD_INT 60
10340: PPUSH
10341: CALL_OW 240
// RuSoldMinLevel = 0 ;
10345: LD_ADDR_EXP 13
10349: PUSH
10350: LD_INT 0
10352: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10353: LD_ADDR_EXP 14
10357: PUSH
10358: LD_INT 1
10360: ST_TO_ADDR
// end ; if Difficulty = 2 then
10361: LD_OWVAR 67
10365: PUSH
10366: LD_INT 2
10368: EQUAL
10369: IFFALSE 10411
// begin RemoveUnit ( brw4 ) ;
10371: LD_INT 52
10373: PPUSH
10374: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10378: LD_INT 5
10380: PUSH
10381: LD_INT 4
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PPUSH
10388: LD_INT 50
10390: PPUSH
10391: CALL_OW 240
// RuSoldMinLevel = 1 ;
10395: LD_ADDR_EXP 13
10399: PUSH
10400: LD_INT 1
10402: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10403: LD_ADDR_EXP 14
10407: PUSH
10408: LD_INT 2
10410: ST_TO_ADDR
// end ; if Difficulty = 3 then
10411: LD_OWVAR 67
10415: PUSH
10416: LD_INT 3
10418: EQUAL
10419: IFFALSE 10454
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10421: LD_INT 5
10423: PUSH
10424: LD_INT 4
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PPUSH
10431: LD_INT 40
10433: PPUSH
10434: CALL_OW 240
// RuSoldMinLevel = 2 ;
10438: LD_ADDR_EXP 13
10442: PUSH
10443: LD_INT 2
10445: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10446: LD_ADDR_EXP 14
10450: PUSH
10451: LD_INT 3
10453: ST_TO_ADDR
// end ; end ;
10454: LD_VAR 0 1
10458: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10459: LD_INT 0
10461: PPUSH
10462: PPUSH
10463: PPUSH
// tmp = [ ] ;
10464: LD_ADDR_VAR 0 5
10468: PUSH
10469: EMPTY
10470: ST_TO_ADDR
// if not vehicles then
10471: LD_VAR 0 1
10475: NOT
10476: IFFALSE 10480
// exit ;
10478: GO 10597
// for i in vehicles do
10480: LD_ADDR_VAR 0 4
10484: PUSH
10485: LD_VAR 0 1
10489: PUSH
10490: FOR_IN
10491: IFFALSE 10581
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10493: LD_ADDR_VAR 0 5
10497: PUSH
10498: LD_VAR 0 5
10502: PPUSH
10503: LD_INT 1
10505: PPUSH
10506: LD_VAR 0 4
10510: PPUSH
10511: CALL_OW 265
10515: PUSH
10516: LD_VAR 0 4
10520: PPUSH
10521: CALL_OW 262
10525: PUSH
10526: LD_VAR 0 4
10530: PPUSH
10531: CALL_OW 263
10535: PUSH
10536: LD_VAR 0 4
10540: PPUSH
10541: CALL_OW 264
10545: PUSH
10546: LD_VAR 0 4
10550: PPUSH
10551: CALL_OW 261
10555: PUSH
10556: LD_VAR 0 4
10560: PPUSH
10561: CALL_OW 256
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: PPUSH
10574: CALL_OW 2
10578: ST_TO_ADDR
// end ;
10579: GO 10490
10581: POP
10582: POP
// SaveVariable ( tmp , ident ) ;
10583: LD_VAR 0 5
10587: PPUSH
10588: LD_VAR 0 2
10592: PPUSH
10593: CALL_OW 39
// end ; end_of_file
10597: LD_VAR 0 3
10601: RET
// export function PrepareHeroes ; var plive ; begin
10602: LD_INT 0
10604: PPUSH
10605: PPUSH
// uc_side = 1 ;
10606: LD_ADDR_OWVAR 20
10610: PUSH
10611: LD_INT 1
10613: ST_TO_ADDR
// JMM = CreateCharacter ( 01_JMM ) ;
10614: LD_ADDR_EXP 1
10618: PUSH
10619: LD_STRING 01_JMM
10621: PPUSH
10622: CALL_OW 34
10626: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10627: LD_ADDR_VAR 0 2
10631: PUSH
10632: LD_STRING 01_JMMLifePoints_1
10634: PPUSH
10635: LD_INT 1000
10637: PPUSH
10638: CALL_OW 30
10642: ST_TO_ADDR
// if plive < 250 then
10643: LD_VAR 0 2
10647: PUSH
10648: LD_INT 250
10650: LESS
10651: IFFALSE 10661
// plive := 300 ;
10653: LD_ADDR_VAR 0 2
10657: PUSH
10658: LD_INT 300
10660: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10661: LD_EXP 1
10665: PPUSH
10666: LD_VAR 0 2
10670: PPUSH
10671: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10675: LD_ADDR_EXP 9
10679: PUSH
10680: LD_STRING Powell
10682: PPUSH
10683: CALL_OW 25
10687: ST_TO_ADDR
// Bobby = CreateCharacter ( 01_Bobby ) ;
10688: LD_ADDR_EXP 2
10692: PUSH
10693: LD_STRING 01_Bobby
10695: PPUSH
10696: CALL_OW 34
10700: ST_TO_ADDR
// if Bobby then
10701: LD_EXP 2
10705: IFFALSE 10755
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10707: LD_ADDR_VAR 0 2
10711: PUSH
10712: LD_STRING 01_BobbyLifePoints_1
10714: PPUSH
10715: LD_INT 1000
10717: PPUSH
10718: CALL_OW 30
10722: ST_TO_ADDR
// if plive < 250 then
10723: LD_VAR 0 2
10727: PUSH
10728: LD_INT 250
10730: LESS
10731: IFFALSE 10741
// plive := 300 ;
10733: LD_ADDR_VAR 0 2
10737: PUSH
10738: LD_INT 300
10740: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
10741: LD_EXP 2
10745: PPUSH
10746: LD_VAR 0 2
10750: PPUSH
10751: CALL_OW 234
// end ; Cyrus = CreateCharacter ( 01_Cyrus ) ;
10755: LD_ADDR_EXP 3
10759: PUSH
10760: LD_STRING 01_Cyrus
10762: PPUSH
10763: CALL_OW 34
10767: ST_TO_ADDR
// if Cyrus then
10768: LD_EXP 3
10772: IFFALSE 10822
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
10774: LD_ADDR_VAR 0 2
10778: PUSH
10779: LD_STRING 01_CyrusLifePoints_1
10781: PPUSH
10782: LD_INT 1000
10784: PPUSH
10785: CALL_OW 30
10789: ST_TO_ADDR
// if plive < 250 then
10790: LD_VAR 0 2
10794: PUSH
10795: LD_INT 250
10797: LESS
10798: IFFALSE 10808
// plive := 300 ;
10800: LD_ADDR_VAR 0 2
10804: PUSH
10805: LD_INT 300
10807: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
10808: LD_EXP 3
10812: PPUSH
10813: LD_VAR 0 2
10817: PPUSH
10818: CALL_OW 234
// end ; Khatam = NewCharacter ( Khatam ) ;
10822: LD_ADDR_EXP 5
10826: PUSH
10827: LD_STRING Khatam
10829: PPUSH
10830: CALL_OW 25
10834: ST_TO_ADDR
// uc_side = 4 ;
10835: LD_ADDR_OWVAR 20
10839: PUSH
10840: LD_INT 4
10842: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10843: LD_ADDR_EXP 4
10847: PUSH
10848: LD_STRING Lisa
10850: PPUSH
10851: CALL_OW 25
10855: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10856: LD_EXP 1
10860: PPUSH
10861: LD_INT 3
10863: PPUSH
10864: LD_INT 0
10866: PPUSH
10867: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10871: LD_EXP 2
10875: PPUSH
10876: LD_INT 3
10878: PPUSH
10879: LD_INT 0
10881: PPUSH
10882: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10886: LD_EXP 3
10890: PPUSH
10891: LD_INT 3
10893: PPUSH
10894: LD_INT 0
10896: PPUSH
10897: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10901: LD_EXP 4
10905: PPUSH
10906: LD_INT 5
10908: PPUSH
10909: LD_INT 0
10911: PPUSH
10912: CALL_OW 49
// ComCrawl ( Lisa ) ;
10916: LD_EXP 4
10920: PPUSH
10921: CALL_OW 137
// end ;
10925: LD_VAR 0 1
10929: RET
// export function PrepareLisSquad ; var i , un ; begin
10930: LD_INT 0
10932: PPUSH
10933: PPUSH
10934: PPUSH
// uc_side = 4 ;
10935: LD_ADDR_OWVAR 20
10939: PUSH
10940: LD_INT 4
10942: ST_TO_ADDR
// uc_nation = 1 ;
10943: LD_ADDR_OWVAR 21
10947: PUSH
10948: LD_INT 1
10950: ST_TO_ADDR
// hc_class := 2 ;
10951: LD_ADDR_OWVAR 28
10955: PUSH
10956: LD_INT 2
10958: ST_TO_ADDR
// hc_sex := sex_male ;
10959: LD_ADDR_OWVAR 27
10963: PUSH
10964: LD_INT 1
10966: ST_TO_ADDR
// hc_gallery :=  ;
10967: LD_ADDR_OWVAR 33
10971: PUSH
10972: LD_STRING 
10974: ST_TO_ADDR
// hc_name :=  ;
10975: LD_ADDR_OWVAR 26
10979: PUSH
10980: LD_STRING 
10982: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
10983: LD_ADDR_OWVAR 30
10987: PUSH
10988: LD_INT 0
10990: PUSH
10991: LD_INT 1
10993: PUSH
10994: LD_INT 0
10996: PUSH
10997: LD_INT 0
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11006: LD_ADDR_OWVAR 31
11010: PUSH
11011: LD_INT 1
11013: PUSH
11014: LD_INT 2
11016: PUSH
11017: LD_INT 0
11019: PUSH
11020: LD_INT 0
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: ST_TO_ADDR
// un := CreateHuman ;
11029: LD_ADDR_VAR 0 3
11033: PUSH
11034: CALL_OW 44
11038: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11039: LD_VAR 0 3
11043: PPUSH
11044: LD_INT 6
11046: PPUSH
11047: LD_INT 0
11049: PPUSH
11050: CALL_OW 49
// hc_sex := sex_female ;
11054: LD_ADDR_OWVAR 27
11058: PUSH
11059: LD_INT 2
11061: ST_TO_ADDR
// hc_gallery :=  ;
11062: LD_ADDR_OWVAR 33
11066: PUSH
11067: LD_STRING 
11069: ST_TO_ADDR
// hc_name :=  ;
11070: LD_ADDR_OWVAR 26
11074: PUSH
11075: LD_STRING 
11077: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11078: LD_ADDR_OWVAR 30
11082: PUSH
11083: LD_INT 0
11085: PUSH
11086: LD_INT 0
11088: PUSH
11089: LD_INT 0
11091: PUSH
11092: LD_INT 1
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11101: LD_ADDR_OWVAR 31
11105: PUSH
11106: LD_INT 0
11108: PUSH
11109: LD_INT 1
11111: PUSH
11112: LD_INT 0
11114: PUSH
11115: LD_INT 1
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: ST_TO_ADDR
// un := CreateHuman ;
11124: LD_ADDR_VAR 0 3
11128: PUSH
11129: CALL_OW 44
11133: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11134: LD_VAR 0 3
11138: PPUSH
11139: LD_INT 6
11141: PPUSH
11142: LD_INT 0
11144: PPUSH
11145: CALL_OW 49
// if not Bobby and not Cyrus then
11149: LD_EXP 2
11153: NOT
11154: PUSH
11155: LD_EXP 3
11159: NOT
11160: AND
11161: IFFALSE 11266
// begin hc_class := 1 ;
11163: LD_ADDR_OWVAR 28
11167: PUSH
11168: LD_INT 1
11170: ST_TO_ADDR
// hc_sex := sex_male ;
11171: LD_ADDR_OWVAR 27
11175: PUSH
11176: LD_INT 1
11178: ST_TO_ADDR
// hc_gallery :=  ;
11179: LD_ADDR_OWVAR 33
11183: PUSH
11184: LD_STRING 
11186: ST_TO_ADDR
// hc_name :=  ;
11187: LD_ADDR_OWVAR 26
11191: PUSH
11192: LD_STRING 
11194: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11195: LD_ADDR_OWVAR 30
11199: PUSH
11200: LD_INT 2
11202: PUSH
11203: LD_INT 3
11205: PUSH
11206: LD_INT 1
11208: PUSH
11209: LD_INT 0
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11218: LD_ADDR_OWVAR 31
11222: PUSH
11223: LD_INT 2
11225: PUSH
11226: LD_INT 3
11228: PUSH
11229: LD_INT 1
11231: PUSH
11232: LD_INT 0
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: ST_TO_ADDR
// un := CreateHuman ;
11241: LD_ADDR_VAR 0 3
11245: PUSH
11246: CALL_OW 44
11250: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11251: LD_VAR 0 3
11255: PPUSH
11256: LD_INT 31
11258: PPUSH
11259: LD_INT 0
11261: PPUSH
11262: CALL_OW 49
// end ; InitHc ;
11266: CALL_OW 19
// end ;
11270: LD_VAR 0 1
11274: RET
// export function PrepareOtherAmericans ; begin
11275: LD_INT 0
11277: PPUSH
// uc_side = 4 ;
11278: LD_ADDR_OWVAR 20
11282: PUSH
11283: LD_INT 4
11285: ST_TO_ADDR
// uc_nation = 1 ;
11286: LD_ADDR_OWVAR 21
11290: PUSH
11291: LD_INT 1
11293: ST_TO_ADDR
// hc_gallery =  ;
11294: LD_ADDR_OWVAR 33
11298: PUSH
11299: LD_STRING 
11301: ST_TO_ADDR
// hc_name = Tom Garvin ;
11302: LD_ADDR_OWVAR 26
11306: PUSH
11307: LD_STRING Tom Garvin
11309: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
11310: LD_INT 1
11312: PPUSH
11313: LD_INT 1
11315: PPUSH
11316: LD_INT 1
11318: PPUSH
11319: LD_INT 2
11321: PPUSH
11322: CALL_OW 12
11326: PPUSH
11327: CALL_OW 380
// Brian = CreateHuman ;
11331: LD_ADDR_EXP 6
11335: PUSH
11336: CALL_OW 44
11340: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11341: LD_EXP 6
11345: PPUSH
11346: LD_INT 10
11348: PPUSH
11349: LD_INT 0
11351: PPUSH
11352: CALL_OW 49
// hc_name = Jerry White ;
11356: LD_ADDR_OWVAR 26
11360: PUSH
11361: LD_STRING Jerry White
11363: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11364: LD_INT 1
11366: PPUSH
11367: LD_INT 3
11369: PPUSH
11370: LD_INT 1
11372: PPUSH
11373: LD_INT 2
11375: PPUSH
11376: CALL_OW 12
11380: PPUSH
11381: CALL_OW 380
// Jerry = CreateHuman ;
11385: LD_ADDR_EXP 7
11389: PUSH
11390: CALL_OW 44
11394: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11395: LD_EXP 7
11399: PPUSH
11400: LD_INT 10
11402: PPUSH
11403: LD_INT 0
11405: PPUSH
11406: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11410: LD_EXP 6
11414: PUSH
11415: LD_EXP 7
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PPUSH
11424: CALL_OW 140
// end ;
11428: LD_VAR 0 1
11432: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11433: LD_INT 0
11435: PPUSH
11436: PPUSH
11437: PPUSH
// for i = 1 to 6 do
11438: LD_ADDR_VAR 0 2
11442: PUSH
11443: DOUBLE
11444: LD_INT 1
11446: DEC
11447: ST_TO_ADDR
11448: LD_INT 6
11450: PUSH
11451: FOR_TO
11452: IFFALSE 11546
// begin uc_side = 4 ;
11454: LD_ADDR_OWVAR 20
11458: PUSH
11459: LD_INT 4
11461: ST_TO_ADDR
// uc_nation = 1 ;
11462: LD_ADDR_OWVAR 21
11466: PUSH
11467: LD_INT 1
11469: ST_TO_ADDR
// hc_gallery =  ;
11470: LD_ADDR_OWVAR 33
11474: PUSH
11475: LD_STRING 
11477: ST_TO_ADDR
// hc_name =  ;
11478: LD_ADDR_OWVAR 26
11482: PUSH
11483: LD_STRING 
11485: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11486: LD_INT 0
11488: PPUSH
11489: LD_INT 1
11491: PPUSH
11492: LD_INT 4
11494: PPUSH
11495: CALL_OW 12
11499: PPUSH
11500: LD_INT 1
11502: PPUSH
11503: CALL_OW 380
// un = CreateHuman ;
11507: LD_ADDR_VAR 0 3
11511: PUSH
11512: CALL_OW 44
11516: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11517: LD_VAR 0 3
11521: PPUSH
11522: LD_INT 16
11524: PPUSH
11525: LD_INT 0
11527: PPUSH
11528: CALL_OW 49
// SetLives ( un , 1 ) ;
11532: LD_VAR 0 3
11536: PPUSH
11537: LD_INT 1
11539: PPUSH
11540: CALL_OW 234
// end ;
11544: GO 11451
11546: POP
11547: POP
// DyingSold = CreateHuman ;
11548: LD_ADDR_EXP 34
11552: PUSH
11553: CALL_OW 44
11557: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11558: LD_EXP 34
11562: PPUSH
11563: LD_INT 16
11565: PPUSH
11566: LD_INT 0
11568: PPUSH
11569: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11573: LD_EXP 34
11577: PPUSH
11578: LD_INT 250
11580: PPUSH
11581: CALL_OW 234
// end ; end_of_file
11585: LD_VAR 0 1
11589: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11590: LD_INT 0
11592: PPUSH
11593: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11594: LD_ADDR_VAR 0 2
11598: PUSH
11599: LD_INT 22
11601: PUSH
11602: LD_INT 1
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: PUSH
11609: LD_INT 23
11611: PUSH
11612: LD_INT 1
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: PUSH
11619: LD_INT 25
11621: PUSH
11622: LD_INT 2
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PUSH
11629: LD_INT 50
11631: PUSH
11632: EMPTY
11633: LIST
11634: PUSH
11635: LD_INT 56
11637: PUSH
11638: EMPTY
11639: LIST
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: PPUSH
11648: CALL_OW 69
11652: PUSH
11653: LD_EXP 1
11657: PUSH
11658: EMPTY
11659: LIST
11660: DIFF
11661: ST_TO_ADDR
// uc_side = 6 ;
11662: LD_ADDR_OWVAR 20
11666: PUSH
11667: LD_INT 6
11669: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11670: LD_ADDR_EXP 8
11674: PUSH
11675: LD_STRING Mikhail
11677: PPUSH
11678: CALL_OW 25
11682: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11683: LD_EXP 8
11687: PPUSH
11688: LD_INT 3
11690: PPUSH
11691: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
11695: LD_EXP 8
11699: PPUSH
11700: LD_VAR 0 2
11704: PUSH
11705: LD_INT 1
11707: ARRAY
11708: PPUSH
11709: CALL_OW 250
11713: PPUSH
11714: LD_VAR 0 2
11718: PUSH
11719: LD_INT 1
11721: ARRAY
11722: PPUSH
11723: CALL_OW 251
11727: PPUSH
11728: LD_INT 5
11730: PPUSH
11731: LD_INT 1
11733: PPUSH
11734: CALL_OW 50
// end ;
11738: LD_VAR 0 1
11742: RET
// export function PrepareRussianCommander ; begin
11743: LD_INT 0
11745: PPUSH
// uc_side = 3 ;
11746: LD_ADDR_OWVAR 20
11750: PUSH
11751: LD_INT 3
11753: ST_TO_ADDR
// uc_nation = 3 ;
11754: LD_ADDR_OWVAR 21
11758: PUSH
11759: LD_INT 3
11761: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11762: LD_ADDR_EXP 19
11766: PUSH
11767: LD_STRING Natasza
11769: PPUSH
11770: CALL_OW 25
11774: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11775: LD_EXP 19
11779: PPUSH
11780: LD_INT 24
11782: PPUSH
11783: LD_INT 0
11785: PPUSH
11786: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11790: LD_EXP 19
11794: PPUSH
11795: LD_INT 56
11797: PPUSH
11798: LD_INT 16
11800: PPUSH
11801: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11805: LD_ADDR_EXP 24
11809: PUSH
11810: LD_EXP 24
11814: PUSH
11815: LD_EXP 19
11819: ADD
11820: ST_TO_ADDR
// end ;
11821: LD_VAR 0 1
11825: RET
// export function PrepareSouthBase ; var i , un ; begin
11826: LD_INT 0
11828: PPUSH
11829: PPUSH
11830: PPUSH
// for i = 1 to 2 do
11831: LD_ADDR_VAR 0 2
11835: PUSH
11836: DOUBLE
11837: LD_INT 1
11839: DEC
11840: ST_TO_ADDR
11841: LD_INT 2
11843: PUSH
11844: FOR_TO
11845: IFFALSE 11954
// begin uc_side = 3 ;
11847: LD_ADDR_OWVAR 20
11851: PUSH
11852: LD_INT 3
11854: ST_TO_ADDR
// uc_nation = 3 ;
11855: LD_ADDR_OWVAR 21
11859: PUSH
11860: LD_INT 3
11862: ST_TO_ADDR
// hc_gallery =  ;
11863: LD_ADDR_OWVAR 33
11867: PUSH
11868: LD_STRING 
11870: ST_TO_ADDR
// hc_name =  ;
11871: LD_ADDR_OWVAR 26
11875: PUSH
11876: LD_STRING 
11878: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11879: LD_INT 1
11881: PPUSH
11882: LD_INT 1
11884: PPUSH
11885: LD_EXP 13
11889: PPUSH
11890: LD_EXP 14
11894: PPUSH
11895: CALL_OW 12
11899: PPUSH
11900: CALL_OW 380
// hc_importance = 0 ;
11904: LD_ADDR_OWVAR 32
11908: PUSH
11909: LD_INT 0
11911: ST_TO_ADDR
// un = CreateHuman ;
11912: LD_ADDR_VAR 0 3
11916: PUSH
11917: CALL_OW 44
11921: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11922: LD_VAR 0 3
11926: PPUSH
11927: LD_INT 11
11929: PPUSH
11930: LD_INT 0
11932: PPUSH
11933: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
11937: LD_VAR 0 3
11941: PPUSH
11942: LD_INT 111
11944: PPUSH
11945: LD_INT 38
11947: PPUSH
11948: CALL_OW 118
// end ;
11952: GO 11844
11954: POP
11955: POP
// for i = 1 to Difficulty do
11956: LD_ADDR_VAR 0 2
11960: PUSH
11961: DOUBLE
11962: LD_INT 1
11964: DEC
11965: ST_TO_ADDR
11966: LD_OWVAR 67
11970: PUSH
11971: FOR_TO
11972: IFFALSE 12055
// begin uc_side = 3 ;
11974: LD_ADDR_OWVAR 20
11978: PUSH
11979: LD_INT 3
11981: ST_TO_ADDR
// uc_nation = 3 ;
11982: LD_ADDR_OWVAR 21
11986: PUSH
11987: LD_INT 3
11989: ST_TO_ADDR
// hc_gallery =  ;
11990: LD_ADDR_OWVAR 33
11994: PUSH
11995: LD_STRING 
11997: ST_TO_ADDR
// hc_name =  ;
11998: LD_ADDR_OWVAR 26
12002: PUSH
12003: LD_STRING 
12005: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12006: LD_INT 0
12008: PPUSH
12009: LD_INT 3
12011: PPUSH
12012: LD_EXP 13
12016: PPUSH
12017: LD_EXP 14
12021: PPUSH
12022: CALL_OW 12
12026: PPUSH
12027: CALL_OW 380
// un = CreateHuman ;
12031: LD_ADDR_VAR 0 3
12035: PUSH
12036: CALL_OW 44
12040: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12041: LD_VAR 0 3
12045: PPUSH
12046: LD_INT 10
12048: PPUSH
12049: CALL_OW 52
// end ;
12053: GO 11971
12055: POP
12056: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
12057: LD_INT 3
12059: PPUSH
12060: LD_INT 3
12062: PPUSH
12063: LD_INT 33
12065: PPUSH
12066: LD_EXP 13
12070: PPUSH
12071: LD_EXP 14
12075: PPUSH
12076: CALL_OW 12
12080: PPUSH
12081: LD_INT 1
12083: PPUSH
12084: LD_INT 1
12086: PUSH
12087: LD_INT 1
12089: PPUSH
12090: LD_INT 2
12092: PPUSH
12093: CALL_OW 12
12097: PUSH
12098: LD_INT 1
12100: PPUSH
12101: LD_INT 2
12103: PPUSH
12104: CALL_OW 12
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: LIST
12113: PUSH
12114: LD_OWVAR 67
12118: ARRAY
12119: PPUSH
12120: CALL 8513 0 6
// for i in UnitsInside ( arm2 ) do
12124: LD_ADDR_VAR 0 2
12128: PUSH
12129: LD_INT 33
12131: PPUSH
12132: CALL_OW 313
12136: PUSH
12137: FOR_IN
12138: IFFALSE 12158
// southBaseDefenders = southBaseDefenders ^ i ;
12140: LD_ADDR_EXP 25
12144: PUSH
12145: LD_EXP 25
12149: PUSH
12150: LD_VAR 0 2
12154: ADD
12155: ST_TO_ADDR
12156: GO 12137
12158: POP
12159: POP
// end ;
12160: LD_VAR 0 1
12164: RET
// export function PrepareNorthBase ; var i , un ; begin
12165: LD_INT 0
12167: PPUSH
12168: PPUSH
12169: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
12170: LD_ADDR_VAR 0 2
12174: PUSH
12175: DOUBLE
12176: LD_INT 1
12178: DEC
12179: ST_TO_ADDR
12180: LD_INT 1
12182: PPUSH
12183: LD_INT 2
12185: PPUSH
12186: CALL_OW 12
12190: PUSH
12191: LD_INT 2
12193: PPUSH
12194: LD_INT 3
12196: PPUSH
12197: CALL_OW 12
12201: PUSH
12202: LD_INT 3
12204: PPUSH
12205: LD_INT 4
12207: PPUSH
12208: CALL_OW 12
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: LIST
12217: PUSH
12218: LD_OWVAR 67
12222: ARRAY
12223: PUSH
12224: FOR_TO
12225: IFFALSE 12311
// begin uc_side = 3 ;
12227: LD_ADDR_OWVAR 20
12231: PUSH
12232: LD_INT 3
12234: ST_TO_ADDR
// uc_nation = 3 ;
12235: LD_ADDR_OWVAR 21
12239: PUSH
12240: LD_INT 3
12242: ST_TO_ADDR
// hc_gallery =  ;
12243: LD_ADDR_OWVAR 33
12247: PUSH
12248: LD_STRING 
12250: ST_TO_ADDR
// hc_name =  ;
12251: LD_ADDR_OWVAR 26
12255: PUSH
12256: LD_STRING 
12258: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12259: LD_INT 0
12261: PPUSH
12262: LD_INT 1
12264: PPUSH
12265: LD_EXP 13
12269: PPUSH
12270: LD_EXP 14
12274: PPUSH
12275: CALL_OW 12
12279: PPUSH
12280: CALL_OW 380
// un = CreateHuman ;
12284: LD_ADDR_VAR 0 3
12288: PUSH
12289: CALL_OW 44
12293: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12294: LD_VAR 0 3
12298: PPUSH
12299: LD_INT 14
12301: PPUSH
12302: LD_INT 0
12304: PPUSH
12305: CALL_OW 49
// end ;
12309: GO 12224
12311: POP
12312: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
12313: LD_INT 3
12315: PPUSH
12316: LD_INT 3
12318: PPUSH
12319: LD_INT 2
12321: PPUSH
12322: LD_EXP 13
12326: PPUSH
12327: LD_EXP 14
12331: PPUSH
12332: CALL_OW 12
12336: PPUSH
12337: LD_INT 1
12339: PPUSH
12340: LD_INT 1
12342: PPUSH
12343: LD_INT 2
12345: PPUSH
12346: CALL_OW 12
12350: PUSH
12351: LD_INT 1
12353: PPUSH
12354: LD_INT 3
12356: PPUSH
12357: CALL_OW 12
12361: PUSH
12362: LD_INT 1
12364: PPUSH
12365: LD_INT 3
12367: PPUSH
12368: CALL_OW 12
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: LIST
12377: PUSH
12378: LD_OWVAR 67
12382: ARRAY
12383: PPUSH
12384: CALL 8513 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
12388: LD_INT 3
12390: PPUSH
12391: LD_INT 3
12393: PPUSH
12394: LD_INT 23
12396: PPUSH
12397: LD_EXP 13
12401: PPUSH
12402: LD_EXP 14
12406: PPUSH
12407: CALL_OW 12
12411: PPUSH
12412: LD_INT 4
12414: PPUSH
12415: LD_INT 0
12417: PUSH
12418: LD_INT 1
12420: PUSH
12421: LD_INT 2
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: LIST
12428: PUSH
12429: LD_OWVAR 67
12433: ARRAY
12434: PPUSH
12435: CALL 8513 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12439: LD_INT 3
12441: PPUSH
12442: LD_INT 3
12444: PPUSH
12445: LD_INT 1
12447: PPUSH
12448: LD_EXP 13
12452: PPUSH
12453: LD_EXP 14
12457: PPUSH
12458: CALL_OW 12
12462: PPUSH
12463: LD_INT 2
12465: PPUSH
12466: LD_INT 1
12468: PUSH
12469: LD_INT 2
12471: PUSH
12472: LD_INT 2
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: LIST
12479: PUSH
12480: LD_OWVAR 67
12484: ARRAY
12485: PPUSH
12486: CALL 8513 0 6
// for i in UnitsInside ( arm1 ) do
12490: LD_ADDR_VAR 0 2
12494: PUSH
12495: LD_INT 2
12497: PPUSH
12498: CALL_OW 313
12502: PUSH
12503: FOR_IN
12504: IFFALSE 12524
// northBaseDefenders = northBaseDefenders ^ i ;
12506: LD_ADDR_EXP 24
12510: PUSH
12511: LD_EXP 24
12515: PUSH
12516: LD_VAR 0 2
12520: ADD
12521: ST_TO_ADDR
12522: GO 12503
12524: POP
12525: POP
// end ;
12526: LD_VAR 0 1
12530: RET
// export function PrepareOtherRussians ; var i , un ; begin
12531: LD_INT 0
12533: PPUSH
12534: PPUSH
12535: PPUSH
// for i = 1 to 2 do
12536: LD_ADDR_VAR 0 2
12540: PUSH
12541: DOUBLE
12542: LD_INT 1
12544: DEC
12545: ST_TO_ADDR
12546: LD_INT 2
12548: PUSH
12549: FOR_TO
12550: IFFALSE 12651
// begin uc_side = 3 ;
12552: LD_ADDR_OWVAR 20
12556: PUSH
12557: LD_INT 3
12559: ST_TO_ADDR
// uc_nation = 3 ;
12560: LD_ADDR_OWVAR 21
12564: PUSH
12565: LD_INT 3
12567: ST_TO_ADDR
// hc_gallery =  ;
12568: LD_ADDR_OWVAR 33
12572: PUSH
12573: LD_STRING 
12575: ST_TO_ADDR
// hc_name =  ;
12576: LD_ADDR_OWVAR 26
12580: PUSH
12581: LD_STRING 
12583: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12584: LD_INT 0
12586: PPUSH
12587: LD_INT 1
12589: PPUSH
12590: LD_EXP 13
12594: PPUSH
12595: LD_EXP 14
12599: PPUSH
12600: CALL_OW 12
12604: PPUSH
12605: CALL_OW 380
// un = CreateHuman ;
12609: LD_ADDR_VAR 0 3
12613: PUSH
12614: CALL_OW 44
12618: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12619: LD_VAR 0 3
12623: PPUSH
12624: LD_INT 9
12626: PPUSH
12627: LD_INT 0
12629: PPUSH
12630: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12634: LD_VAR 0 3
12638: PPUSH
12639: LD_INT 80
12641: PPUSH
12642: LD_INT 73
12644: PPUSH
12645: CALL_OW 118
// end ;
12649: GO 12549
12651: POP
12652: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12653: LD_ADDR_VAR 0 2
12657: PUSH
12658: LD_INT 22
12660: PUSH
12661: LD_INT 3
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PUSH
12668: LD_INT 30
12670: PUSH
12671: LD_INT 31
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: PPUSH
12682: CALL_OW 69
12686: PUSH
12687: FOR_IN
12688: IFFALSE 12716
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12690: LD_EXP 13
12694: PPUSH
12695: LD_EXP 14
12699: PPUSH
12700: CALL_OW 12
12704: PPUSH
12705: LD_VAR 0 2
12709: PPUSH
12710: CALL 8623 0 2
12714: GO 12687
12716: POP
12717: POP
// end ;
12718: LD_VAR 0 1
12722: RET
// export function PrepareCargoBays ; begin
12723: LD_INT 0
12725: PPUSH
// uc_side = 3 ;
12726: LD_ADDR_OWVAR 20
12730: PUSH
12731: LD_INT 3
12733: ST_TO_ADDR
// uc_nation = 3 ;
12734: LD_ADDR_OWVAR 21
12738: PUSH
12739: LD_INT 3
12741: ST_TO_ADDR
// vc_engine = 1 ;
12742: LD_ADDR_OWVAR 39
12746: PUSH
12747: LD_INT 1
12749: ST_TO_ADDR
// vc_control = 1 ;
12750: LD_ADDR_OWVAR 38
12754: PUSH
12755: LD_INT 1
12757: ST_TO_ADDR
// vc_weapon = 51 ;
12758: LD_ADDR_OWVAR 40
12762: PUSH
12763: LD_INT 51
12765: ST_TO_ADDR
// vc_chassis = 22 ;
12766: LD_ADDR_OWVAR 37
12770: PUSH
12771: LD_INT 22
12773: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12774: LD_ADDR_EXP 15
12778: PUSH
12779: CALL_OW 45
12783: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12784: LD_ADDR_EXP 16
12788: PUSH
12789: CALL_OW 45
12793: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12794: LD_EXP 15
12798: PPUSH
12799: LD_INT 13
12801: PPUSH
12802: LD_INT 0
12804: PPUSH
12805: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12809: LD_EXP 16
12813: PPUSH
12814: LD_INT 13
12816: PPUSH
12817: LD_INT 0
12819: PPUSH
12820: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12824: LD_EXP 15
12828: PPUSH
12829: LD_INT 2
12831: PPUSH
12832: LD_INT 70
12834: PUSH
12835: LD_INT 50
12837: PUSH
12838: LD_INT 30
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: LIST
12845: PUSH
12846: LD_OWVAR 67
12850: ARRAY
12851: PPUSH
12852: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12856: LD_EXP 16
12860: PPUSH
12861: LD_INT 2
12863: PPUSH
12864: LD_INT 70
12866: PUSH
12867: LD_INT 50
12869: PUSH
12870: LD_INT 30
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: LIST
12877: PUSH
12878: LD_OWVAR 67
12882: ARRAY
12883: PPUSH
12884: CALL_OW 291
// hc_gallery =  ;
12888: LD_ADDR_OWVAR 33
12892: PUSH
12893: LD_STRING 
12895: ST_TO_ADDR
// hc_name =  ;
12896: LD_ADDR_OWVAR 26
12900: PUSH
12901: LD_STRING 
12903: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12904: LD_INT 1
12906: PPUSH
12907: LD_INT 3
12909: PPUSH
12910: LD_INT 1
12912: PPUSH
12913: LD_INT 2
12915: PPUSH
12916: CALL_OW 12
12920: PPUSH
12921: CALL_OW 380
// driver1 = CreateHuman ;
12925: LD_ADDR_EXP 17
12929: PUSH
12930: CALL_OW 44
12934: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
12935: LD_EXP 17
12939: PPUSH
12940: LD_EXP 15
12944: PPUSH
12945: CALL_OW 52
// hc_name = Nikolai Andreyev ;
12949: LD_ADDR_OWVAR 26
12953: PUSH
12954: LD_STRING Nikolai Andreyev
12956: ST_TO_ADDR
// driver2 = CreateHuman ;
12957: LD_ADDR_EXP 18
12961: PUSH
12962: CALL_OW 44
12966: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
12967: LD_EXP 18
12971: PPUSH
12972: LD_EXP 16
12976: PPUSH
12977: CALL_OW 52
// end ;
12981: LD_VAR 0 1
12985: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
12986: LD_INT 0
12988: PPUSH
12989: PPUSH
12990: PPUSH
12991: PPUSH
12992: PPUSH
12993: PPUSH
12994: PPUSH
// uc_side = 3 ;
12995: LD_ADDR_OWVAR 20
12999: PUSH
13000: LD_INT 3
13002: ST_TO_ADDR
// uc_nation = 3 ;
13003: LD_ADDR_OWVAR 21
13007: PUSH
13008: LD_INT 3
13010: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
13011: LD_ADDR_VAR 0 4
13015: PUSH
13016: DOUBLE
13017: LD_INT 1
13019: DEC
13020: ST_TO_ADDR
13021: LD_VAR 0 1
13025: PUSH
13026: LD_INT 1
13028: PPUSH
13029: LD_INT 3
13031: PPUSH
13032: CALL_OW 12
13036: PLUS
13037: PUSH
13038: FOR_TO
13039: IFFALSE 13216
// begin vc_engine = 1 ;
13041: LD_ADDR_OWVAR 39
13045: PUSH
13046: LD_INT 1
13048: ST_TO_ADDR
// vc_control = 1 ;
13049: LD_ADDR_OWVAR 38
13053: PUSH
13054: LD_INT 1
13056: ST_TO_ADDR
// vc_weapon = 42 ;
13057: LD_ADDR_OWVAR 40
13061: PUSH
13062: LD_INT 42
13064: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
13065: LD_ADDR_OWVAR 37
13069: PUSH
13070: LD_INT 21
13072: PUSH
13073: LD_INT 22
13075: PUSH
13076: LD_INT 22
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: LIST
13083: PUSH
13084: LD_OWVAR 67
13088: ARRAY
13089: ST_TO_ADDR
// veh = CreateVehicle ;
13090: LD_ADDR_VAR 0 5
13094: PUSH
13095: CALL_OW 45
13099: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13100: LD_VAR 0 5
13104: PPUSH
13105: LD_VAR 0 2
13109: PPUSH
13110: LD_INT 0
13112: PPUSH
13113: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13117: LD_ADDR_EXP 26
13121: PUSH
13122: LD_EXP 26
13126: PUSH
13127: LD_VAR 0 5
13131: ADD
13132: ST_TO_ADDR
// hc_gallery =  ;
13133: LD_ADDR_OWVAR 33
13137: PUSH
13138: LD_STRING 
13140: ST_TO_ADDR
// hc_name =  ;
13141: LD_ADDR_OWVAR 26
13145: PUSH
13146: LD_STRING 
13148: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13149: LD_INT 0
13151: PPUSH
13152: LD_INT 3
13154: PPUSH
13155: LD_EXP 13
13159: PPUSH
13160: LD_EXP 14
13164: PPUSH
13165: CALL_OW 12
13169: PPUSH
13170: CALL_OW 380
// un = CreateHuman ;
13174: LD_ADDR_VAR 0 6
13178: PUSH
13179: CALL_OW 44
13183: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13184: LD_VAR 0 6
13188: PPUSH
13189: LD_VAR 0 5
13193: PPUSH
13194: CALL_OW 52
// attackGroup = attackGroup ^ un ;
13198: LD_ADDR_EXP 26
13202: PUSH
13203: LD_EXP 26
13207: PUSH
13208: LD_VAR 0 6
13212: ADD
13213: ST_TO_ADDR
// end ;
13214: GO 13038
13216: POP
13217: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13218: LD_INT 0
13220: PPUSH
13221: LD_INT 2
13223: PPUSH
13224: LD_EXP 13
13228: PPUSH
13229: LD_EXP 14
13233: PPUSH
13234: CALL_OW 12
13238: PPUSH
13239: CALL_OW 380
// un = CreateHuman ;
13243: LD_ADDR_VAR 0 6
13247: PUSH
13248: CALL_OW 44
13252: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13253: LD_ADDR_VAR 0 4
13257: PUSH
13258: DOUBLE
13259: LD_INT 1
13261: DEC
13262: ST_TO_ADDR
13263: LD_VAR 0 1
13267: PUSH
13268: LD_INT 2
13270: PUSH
13271: LD_INT 2
13273: MUL
13274: PLUS
13275: PUSH
13276: FOR_TO
13277: IFFALSE 13365
// begin hc_gallery =  ;
13279: LD_ADDR_OWVAR 33
13283: PUSH
13284: LD_STRING 
13286: ST_TO_ADDR
// hc_name =  ;
13287: LD_ADDR_OWVAR 26
13291: PUSH
13292: LD_STRING 
13294: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13295: LD_INT 1
13297: PPUSH
13298: LD_INT 1
13300: PPUSH
13301: LD_EXP 13
13305: PPUSH
13306: LD_EXP 14
13310: PPUSH
13311: CALL_OW 12
13315: PPUSH
13316: CALL_OW 380
// un = CreateHuman ;
13320: LD_ADDR_VAR 0 6
13324: PUSH
13325: CALL_OW 44
13329: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
13330: LD_VAR 0 6
13334: PPUSH
13335: LD_VAR 0 2
13339: PPUSH
13340: LD_INT 0
13342: PPUSH
13343: CALL_OW 49
// attackGroup = attackGroup ^ un ;
13347: LD_ADDR_EXP 26
13351: PUSH
13352: LD_EXP 26
13356: PUSH
13357: LD_VAR 0 6
13361: ADD
13362: ST_TO_ADDR
// end ;
13363: GO 13276
13365: POP
13366: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13367: LD_ADDR_VAR 0 7
13371: PUSH
13372: LD_INT 26
13374: PPUSH
13375: LD_INT 22
13377: PUSH
13378: LD_INT 3
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: LD_INT 21
13387: PUSH
13388: LD_INT 1
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 26
13397: PUSH
13398: LD_INT 1
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 70
13414: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13415: LD_VAR 0 7
13419: PUSH
13420: LD_INT 1
13422: ARRAY
13423: PPUSH
13424: LD_STRING D9-Rus3-1
13426: PPUSH
13427: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13431: LD_VAR 0 7
13435: PUSH
13436: LD_INT 2
13438: ARRAY
13439: PPUSH
13440: LD_STRING D9-Russ-1
13442: PPUSH
13443: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13447: LD_INT 35
13449: PPUSH
13450: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13454: LD_ADDR_VAR 0 4
13458: PUSH
13459: LD_INT 26
13461: PPUSH
13462: LD_INT 22
13464: PUSH
13465: LD_INT 3
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: PUSH
13472: EMPTY
13473: LIST
13474: PPUSH
13475: CALL_OW 70
13479: PUSH
13480: FOR_IN
13481: IFFALSE 13653
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13483: LD_ADDR_VAR 0 8
13487: PUSH
13488: LD_INT 22
13490: PUSH
13491: LD_INT 1
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PPUSH
13498: CALL_OW 69
13502: PPUSH
13503: LD_VAR 0 4
13507: PPUSH
13508: CALL_OW 74
13512: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13513: LD_ADDR_VAR 0 9
13517: PUSH
13518: LD_INT 22
13520: PUSH
13521: LD_INT 1
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: LD_INT 2
13530: PUSH
13531: LD_INT 59
13533: PUSH
13534: EMPTY
13535: LIST
13536: PUSH
13537: LD_INT 21
13539: PUSH
13540: LD_INT 1
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: PUSH
13547: LD_INT 21
13549: PUSH
13550: LD_INT 2
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: EMPTY
13568: LIST
13569: PPUSH
13570: CALL_OW 69
13574: PPUSH
13575: LD_VAR 0 4
13579: PPUSH
13580: CALL_OW 74
13584: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13585: LD_VAR 0 4
13589: PPUSH
13590: LD_VAR 0 8
13594: PPUSH
13595: CALL_OW 296
13599: PUSH
13600: LD_INT 8
13602: PLUS
13603: PUSH
13604: LD_VAR 0 4
13608: PPUSH
13609: LD_VAR 0 9
13613: PPUSH
13614: CALL_OW 296
13618: LESS
13619: IFFALSE 13637
// begin ComAttackUnit ( i , target1 ) ;
13621: LD_VAR 0 4
13625: PPUSH
13626: LD_VAR 0 8
13630: PPUSH
13631: CALL_OW 115
// end else
13635: GO 13651
// begin ComAttackUnit ( i , target2 ) ;
13637: LD_VAR 0 4
13641: PPUSH
13642: LD_VAR 0 9
13646: PPUSH
13647: CALL_OW 115
// end ; end ;
13651: GO 13480
13653: POP
13654: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13655: LD_INT 26
13657: PPUSH
13658: LD_INT 22
13660: PUSH
13661: LD_INT 3
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: PUSH
13668: LD_INT 2
13670: PUSH
13671: LD_INT 21
13673: PUSH
13674: LD_INT 1
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: LD_INT 21
13683: PUSH
13684: LD_INT 2
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: PUSH
13691: LD_INT 59
13693: PUSH
13694: EMPTY
13695: LIST
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: PPUSH
13707: CALL_OW 70
13711: PUSH
13712: LD_INT 0
13714: EQUAL
13715: IFFALSE 13447
// end ; end_of_file
13717: LD_VAR 0 3
13721: RET
// every 0 0$1 do
13722: GO 13724
13724: DISABLE
// begin enable ;
13725: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13726: LD_INT 3
13728: PPUSH
13729: LD_INT 1
13731: PPUSH
13732: LD_INT 22
13734: PPUSH
13735: CALL 8759 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
13739: LD_INT 3
13741: PPUSH
13742: LD_INT 20
13744: PPUSH
13745: LD_INT 22
13747: PPUSH
13748: LD_INT 23
13750: PPUSH
13751: CALL 9005 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13755: LD_INT 3
13757: PPUSH
13758: LD_INT 21
13760: PPUSH
13761: LD_INT 23
13763: PPUSH
13764: CALL 9282 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13768: LD_INT 22
13770: PPUSH
13771: LD_INT 1
13773: PPUSH
13774: LD_EXP 24
13778: PPUSH
13779: LD_INT 2
13781: PPUSH
13782: LD_INT 3
13784: PPUSH
13785: CALL 9754 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13789: LD_INT 23
13791: PPUSH
13792: LD_INT 1
13794: PPUSH
13795: LD_EXP 25
13799: PPUSH
13800: LD_INT 33
13802: PPUSH
13803: LD_INT 1
13805: PPUSH
13806: CALL 9754 0 5
// end ; end_of_file
13810: END
// on UnitDestroyed ( unit ) do begin if GetBType ( unit ) = b_depot then
13811: LD_VAR 0 1
13815: PPUSH
13816: CALL_OW 266
13820: PUSH
13821: LD_INT 0
13823: EQUAL
13824: IFFALSE 13833
// YouLost ( DepotDestroyed ) ;
13826: LD_STRING DepotDestroyed
13828: PPUSH
13829: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13833: LD_VAR 0 1
13837: PPUSH
13838: CALL_OW 255
13842: PUSH
13843: LD_INT 1
13845: EQUAL
13846: PUSH
13847: LD_VAR 0 1
13851: PPUSH
13852: CALL_OW 247
13856: PUSH
13857: LD_INT 1
13859: EQUAL
13860: AND
13861: IFFALSE 13877
// deadsCounter = deadsCounter + 1 ;
13863: LD_ADDR_EXP 31
13867: PUSH
13868: LD_EXP 31
13872: PUSH
13873: LD_INT 1
13875: PLUS
13876: ST_TO_ADDR
// end ;
13877: PPOPN 1
13879: END
// on Command ( comandid ) do var i , j , tmp ;
13880: LD_INT 0
13882: PPUSH
13883: PPUSH
13884: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
13885: LD_ADDR_VAR 0 2
13889: PUSH
13890: LD_INT 22
13892: PUSH
13893: LD_INT 1
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PUSH
13900: LD_INT 21
13902: PUSH
13903: LD_INT 2
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: PPUSH
13914: CALL_OW 69
13918: PUSH
13919: FOR_IN
13920: IFFALSE 14045
// begin if GetTaskList ( i ) > 0 then
13922: LD_VAR 0 2
13926: PPUSH
13927: CALL_OW 437
13931: PUSH
13932: LD_INT 0
13934: GREATER
13935: IFFALSE 14043
// begin for j = 1 to GetTaskList ( i ) do
13937: LD_ADDR_VAR 0 3
13941: PUSH
13942: DOUBLE
13943: LD_INT 1
13945: DEC
13946: ST_TO_ADDR
13947: LD_VAR 0 2
13951: PPUSH
13952: CALL_OW 437
13956: PUSH
13957: FOR_TO
13958: IFFALSE 14041
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
13960: LD_ADDR_VAR 0 4
13964: PUSH
13965: LD_VAR 0 2
13969: PPUSH
13970: CALL_OW 437
13974: PUSH
13975: LD_VAR 0 3
13979: ARRAY
13980: PUSH
13981: LD_INT 4
13983: ARRAY
13984: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
13985: LD_VAR 0 4
13989: PPUSH
13990: CALL_OW 255
13994: PUSH
13995: LD_INT 3
13997: EQUAL
13998: PUSH
13999: LD_VAR 0 4
14003: PPUSH
14004: CALL_OW 247
14008: PUSH
14009: LD_INT 2
14011: EQUAL
14012: AND
14013: PUSH
14014: LD_VAR 0 4
14018: PPUSH
14019: CALL_OW 264
14023: PUSH
14024: LD_INT 51
14026: EQUAL
14027: AND
14028: IFFALSE 14039
// ComStop ( i ) ;
14030: LD_VAR 0 2
14034: PPUSH
14035: CALL_OW 141
// end ;
14039: GO 13957
14041: POP
14042: POP
// end ; end ;
14043: GO 13919
14045: POP
14046: POP
// end ;
14047: PPOPN 4
14049: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14050: LD_VAR 0 2
14054: PUSH
14055: LD_EXP 8
14059: EQUAL
14060: PUSH
14061: LD_EXP 21
14065: PUSH
14066: LD_INT 4
14068: NONEQUAL
14069: AND
14070: IFFALSE 14222
// begin if IsOk ( Mikhail ) then
14072: LD_EXP 8
14076: PPUSH
14077: CALL_OW 302
14081: IFFALSE 14089
// AskMikhail else
14083: CALL 7044 0 0
14087: GO 14222
// if IsOk ( llab1 ) then
14089: LD_INT 23
14091: PPUSH
14092: CALL_OW 302
14096: IFFALSE 14185
// begin InGameOn ;
14098: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14102: LD_EXP 8
14106: PPUSH
14107: LD_INT 6
14109: PPUSH
14110: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
14114: LD_INT 23
14116: PPUSH
14117: LD_INT 6
14119: PPUSH
14120: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
14124: LD_EXP 8
14128: PPUSH
14129: LD_INT 23
14131: PPUSH
14132: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14136: LD_INT 35
14138: PPUSH
14139: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
14143: LD_EXP 8
14147: PPUSH
14148: CALL_OW 310
14152: PUSH
14153: LD_INT 23
14155: EQUAL
14156: PUSH
14157: LD_EXP 8
14161: PPUSH
14162: CALL_OW 301
14166: OR
14167: IFFALSE 14136
// SetSide ( llab1 , 1 ) ;
14169: LD_INT 23
14171: PPUSH
14172: LD_INT 1
14174: PPUSH
14175: CALL_OW 235
// InGameOff ;
14179: CALL_OW 9
// end else
14183: GO 14222
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
14185: LD_INT 3
14187: PPUSH
14188: LD_INT 6
14190: PPUSH
14191: LD_INT 2
14193: PPUSH
14194: LD_INT 1
14196: PPUSH
14197: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
14201: LD_EXP 8
14205: PPUSH
14206: LD_INT 6
14208: PPUSH
14209: CALL_OW 235
// ComHold ( Mikhail ) ;
14213: LD_EXP 8
14217: PPUSH
14218: CALL_OW 140
// end ; end ; end ;
14222: PPOPN 2
14224: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
14225: LD_EXP 8
14229: PPUSH
14230: CALL_OW 257
14234: PUSH
14235: LD_INT 3
14237: NONEQUAL
14238: IFFALSE 14256
14240: GO 14242
14242: DISABLE
// begin enable ;
14243: ENABLE
// SetClass ( Mikhail , 3 ) ;
14244: LD_EXP 8
14248: PPUSH
14249: LD_INT 3
14251: PPUSH
14252: CALL_OW 336
// end ; end_of_file
14256: END
// every 0 0$1 trigger IsDead ( JMM ) do
14257: LD_EXP 1
14261: PPUSH
14262: CALL_OW 301
14266: IFFALSE 14278
14268: GO 14270
14270: DISABLE
// YouLost ( JMM ) ;
14271: LD_STRING JMM
14273: PPUSH
14274: CALL_OW 104
14278: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
14279: LD_INT 22
14281: PUSH
14282: LD_INT 1
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: PUSH
14289: LD_INT 21
14291: PUSH
14292: LD_INT 1
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PUSH
14299: LD_INT 25
14301: PUSH
14302: LD_INT 2
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: LIST
14313: PPUSH
14314: CALL_OW 69
14318: PUSH
14319: LD_INT 0
14321: EQUAL
14322: PUSH
14323: LD_INT 22
14325: PUSH
14326: LD_INT 4
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PUSH
14333: LD_INT 21
14335: PUSH
14336: LD_INT 1
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 25
14345: PUSH
14346: LD_INT 2
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: LIST
14357: PPUSH
14358: CALL_OW 69
14362: PUSH
14363: LD_INT 0
14365: EQUAL
14366: AND
14367: PUSH
14368: LD_INT 1
14370: PPUSH
14371: CALL_OW 255
14375: PUSH
14376: LD_INT 3
14378: EQUAL
14379: AND
14380: PUSH
14381: LD_INT 10
14383: PPUSH
14384: CALL_OW 255
14388: PUSH
14389: LD_INT 3
14391: EQUAL
14392: AND
14393: IFFALSE 14405
14395: GO 14397
14397: DISABLE
// YouLost ( Engineer ) ;
14398: LD_STRING Engineer
14400: PPUSH
14401: CALL_OW 104
14405: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14406: LD_INT 1
14408: PPUSH
14409: CALL_OW 255
14413: PUSH
14414: LD_INT 3
14416: EQUAL
14417: PUSH
14418: LD_EXP 27
14422: PUSH
14423: LD_INT 1
14425: EQUAL
14426: AND
14427: IFFALSE 14439
14429: GO 14431
14431: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14432: LD_STRING DepotCaptured
14434: PPUSH
14435: CALL_OW 104
14439: END
// export function PrepareTigers ; var i , un ; begin
14440: LD_INT 0
14442: PPUSH
14443: PPUSH
14444: PPUSH
// for i = 1 to Difficulty do
14445: LD_ADDR_VAR 0 2
14449: PUSH
14450: DOUBLE
14451: LD_INT 1
14453: DEC
14454: ST_TO_ADDR
14455: LD_OWVAR 67
14459: PUSH
14460: FOR_TO
14461: IFFALSE 14596
// begin hc_sex = sex_male ;
14463: LD_ADDR_OWVAR 27
14467: PUSH
14468: LD_INT 1
14470: ST_TO_ADDR
// uc_side = 0 ;
14471: LD_ADDR_OWVAR 20
14475: PUSH
14476: LD_INT 0
14478: ST_TO_ADDR
// uc_nation = nation_nature ;
14479: LD_ADDR_OWVAR 21
14483: PUSH
14484: LD_INT 0
14486: ST_TO_ADDR
// hc_class = class_tiger ;
14487: LD_ADDR_OWVAR 28
14491: PUSH
14492: LD_INT 14
14494: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14495: LD_ADDR_OWVAR 31
14499: PUSH
14500: LD_EXP 14
14504: PUSH
14505: LD_INT 0
14507: PUSH
14508: LD_INT 0
14510: PUSH
14511: LD_INT 0
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
14520: LD_ADDR_OWVAR 35
14524: PUSH
14525: LD_INT 30
14527: PPUSH
14528: LD_INT 40
14530: PPUSH
14531: CALL_OW 12
14535: PUSH
14536: LD_INT 40
14538: PPUSH
14539: LD_INT 50
14541: PPUSH
14542: CALL_OW 12
14546: PUSH
14547: LD_INT 50
14549: PPUSH
14550: LD_INT 60
14552: PPUSH
14553: CALL_OW 12
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: LIST
14562: PUSH
14563: LD_OWVAR 67
14567: ARRAY
14568: ST_TO_ADDR
// un = CreateHuman ;
14569: LD_ADDR_VAR 0 3
14573: PUSH
14574: CALL_OW 44
14578: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14579: LD_VAR 0 3
14583: PPUSH
14584: LD_INT 27
14586: PPUSH
14587: LD_INT 0
14589: PPUSH
14590: CALL_OW 49
// end ;
14594: GO 14460
14596: POP
14597: POP
// end ; end_of_file
14598: LD_VAR 0 1
14602: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
14603: LD_INT 1
14605: PPUSH
14606: CALL_OW 255
14610: PUSH
14611: LD_INT 1
14613: EQUAL
14614: PUSH
14615: LD_INT 10
14617: PPUSH
14618: CALL_OW 255
14622: PUSH
14623: LD_INT 1
14625: EQUAL
14626: AND
14627: PUSH
14628: LD_EXP 20
14632: PUSH
14633: LD_INT 1
14635: EQUAL
14636: AND
14637: PUSH
14638: LD_INT 22
14640: PUSH
14641: LD_INT 3
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: PUSH
14648: LD_INT 21
14650: PUSH
14651: LD_INT 2
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: PUSH
14658: LD_INT 34
14660: PUSH
14661: LD_INT 51
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: PUSH
14668: LD_INT 3
14670: PUSH
14671: LD_INT 58
14673: PUSH
14674: EMPTY
14675: LIST
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: PPUSH
14687: CALL_OW 69
14691: PUSH
14692: LD_INT 0
14694: EQUAL
14695: AND
14696: IFFALSE 14787
14698: GO 14700
14700: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
14701: LD_INT 9450
14703: PUSH
14704: LD_INT 8400
14706: PUSH
14707: LD_INT 6300
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: LIST
14714: PUSH
14715: LD_OWVAR 67
14719: ARRAY
14720: PPUSH
14721: CALL_OW 67
// if cargoEscape = 1 then
14725: LD_EXP 20
14729: PUSH
14730: LD_INT 1
14732: EQUAL
14733: IFFALSE 14787
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14735: LD_EXP 9
14739: PPUSH
14740: LD_STRING D6-Pow-1
14742: PPUSH
14743: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14747: LD_EXP 1
14751: PPUSH
14752: LD_STRING D6-JMM-1
14754: PPUSH
14755: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14759: LD_EXP 9
14763: PPUSH
14764: LD_STRING D6-Pow-2
14766: PPUSH
14767: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14771: LD_EXP 1
14775: PPUSH
14776: LD_STRING D6-JMM-2
14778: PPUSH
14779: CALL_OW 88
// FinishMission ;
14783: CALL 14995 0 0
// end ; end ;
14787: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
14788: LD_INT 1
14790: PPUSH
14791: CALL_OW 255
14795: PUSH
14796: LD_INT 1
14798: EQUAL
14799: PUSH
14800: LD_INT 10
14802: PPUSH
14803: CALL_OW 255
14807: PUSH
14808: LD_INT 1
14810: EQUAL
14811: AND
14812: PUSH
14813: LD_EXP 20
14817: PUSH
14818: LD_INT 1
14820: GREATER
14821: AND
14822: IFFALSE 14889
14824: GO 14826
14826: DISABLE
14827: LD_INT 0
14829: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
14830: LD_INT 11550
14832: PUSH
14833: LD_INT 10500
14835: PUSH
14836: LD_INT 9450
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: LIST
14843: PUSH
14844: LD_OWVAR 67
14848: ARRAY
14849: PPUSH
14850: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
14854: LD_INT 1
14856: PUSH
14857: LD_INT 2
14859: PUSH
14860: LD_INT 3
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: LIST
14867: PUSH
14868: LD_OWVAR 67
14872: ARRAY
14873: PPUSH
14874: LD_INT 13
14876: PPUSH
14877: CALL 12986 0 2
// lastBattle = 1 ;
14881: LD_ADDR_EXP 27
14885: PUSH
14886: LD_INT 1
14888: ST_TO_ADDR
// end ;
14889: PPOPN 1
14891: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14892: LD_EXP 27
14896: PUSH
14897: LD_INT 1
14899: EQUAL
14900: PUSH
14901: LD_INT 26
14903: PPUSH
14904: LD_INT 22
14906: PUSH
14907: LD_INT 3
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: PUSH
14914: LD_INT 21
14916: PUSH
14917: LD_INT 1
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: PPUSH
14928: CALL_OW 70
14932: PUSH
14933: LD_INT 0
14935: EQUAL
14936: AND
14937: IFFALSE 14994
14939: GO 14941
14941: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14942: LD_EXP 9
14946: PPUSH
14947: LD_STRING D6-Pow-1
14949: PPUSH
14950: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14954: LD_EXP 1
14958: PPUSH
14959: LD_STRING D6-JMM-1
14961: PPUSH
14962: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14966: LD_EXP 9
14970: PPUSH
14971: LD_STRING D6-Pow-2
14973: PPUSH
14974: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14978: LD_EXP 1
14982: PPUSH
14983: LD_STRING D6-JMM-2
14985: PPUSH
14986: CALL_OW 88
// FinishMission ;
14990: CALL 14995 0 0
// end ;
14994: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
14995: LD_INT 0
14997: PPUSH
14998: PPUSH
14999: PPUSH
15000: PPUSH
15001: PPUSH
// if tick <= 18 18$00 then
15002: LD_OWVAR 1
15006: PUSH
15007: LD_INT 37800
15009: LESSEQUAL
15010: IFFALSE 15019
// SetAchievement ( ACH_ASPEED_2 ) ;
15012: LD_STRING ACH_ASPEED_2
15014: PPUSH
15015: CALL_OW 543
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15019: LD_ADDR_VAR 0 2
15023: PUSH
15024: LD_INT 22
15026: PUSH
15027: LD_INT 1
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: PUSH
15034: LD_INT 21
15036: PUSH
15037: LD_INT 2
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PUSH
15044: LD_INT 24
15046: PUSH
15047: LD_INT 251
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: LIST
15058: PPUSH
15059: CALL_OW 69
15063: ST_TO_ADDR
// if tmp then
15064: LD_VAR 0 2
15068: IFFALSE 15082
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15070: LD_VAR 0 2
15074: PPUSH
15075: LD_STRING 02_tanks_1
15077: PPUSH
15078: CALL 10459 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
15082: LD_EXP 21
15086: PUSH
15087: LD_INT 1
15089: EQUAL
15090: PUSH
15091: LD_EXP 8
15095: PPUSH
15096: CALL_OW 300
15100: AND
15101: IFFALSE 15115
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15103: LD_EXP 21
15107: PPUSH
15108: LD_STRING 02_mikhailStatus_1
15110: PPUSH
15111: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15115: LD_INT 1
15117: PPUSH
15118: CALL_OW 274
15122: PPUSH
15123: LD_INT 1
15125: PPUSH
15126: CALL_OW 275
15130: PPUSH
15131: LD_STRING 02_resources_4
15133: PPUSH
15134: CALL_OW 39
// m1 := false ;
15138: LD_ADDR_VAR 0 3
15142: PUSH
15143: LD_INT 0
15145: ST_TO_ADDR
// m2 := false ;
15146: LD_ADDR_VAR 0 4
15150: PUSH
15151: LD_INT 0
15153: ST_TO_ADDR
// m3 := false ;
15154: LD_ADDR_VAR 0 5
15158: PUSH
15159: LD_INT 0
15161: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15162: LD_INT 1
15164: PPUSH
15165: CALL_OW 274
15169: PPUSH
15170: LD_INT 1
15172: PPUSH
15173: CALL_OW 275
15177: PUSH
15178: LD_INT 200
15180: GREATEREQUAL
15181: IFFALSE 15203
// begin AddMedal ( Cans , 1 ) ;
15183: LD_STRING Cans
15185: PPUSH
15186: LD_INT 1
15188: PPUSH
15189: CALL_OW 101
// m1 := true ;
15193: LD_ADDR_VAR 0 3
15197: PUSH
15198: LD_INT 1
15200: ST_TO_ADDR
// end else
15201: GO 15214
// begin AddMedal ( Cans , - 1 ) ;
15203: LD_STRING Cans
15205: PPUSH
15206: LD_INT 1
15208: NEG
15209: PPUSH
15210: CALL_OW 101
// end ; if deadsCounter < 2 then
15214: LD_EXP 31
15218: PUSH
15219: LD_INT 2
15221: LESS
15222: IFFALSE 15244
// begin AddMedal ( Deaths , 1 ) ;
15224: LD_STRING Deaths
15226: PPUSH
15227: LD_INT 1
15229: PPUSH
15230: CALL_OW 101
// m2 := true ;
15234: LD_ADDR_VAR 0 4
15238: PUSH
15239: LD_INT 1
15241: ST_TO_ADDR
// end else
15242: GO 15255
// begin AddMedal ( Deaths , - 1 ) ;
15244: LD_STRING Deaths
15246: PPUSH
15247: LD_INT 1
15249: NEG
15250: PPUSH
15251: CALL_OW 101
// end ; if mikhailStatus = 0 then
15255: LD_EXP 21
15259: PUSH
15260: LD_INT 0
15262: EQUAL
15263: IFFALSE 15276
// AddMedal ( Prisoner , - 1 ) ;
15265: LD_STRING Prisoner
15267: PPUSH
15268: LD_INT 1
15270: NEG
15271: PPUSH
15272: CALL_OW 101
// if mikhailStatus = 1 then
15276: LD_EXP 21
15280: PUSH
15281: LD_INT 1
15283: EQUAL
15284: IFFALSE 15304
// begin AddMedal ( Prisoner , 1 ) ;
15286: LD_STRING Prisoner
15288: PPUSH
15289: LD_INT 1
15291: PPUSH
15292: CALL_OW 101
// m3 := true ;
15296: LD_ADDR_VAR 0 5
15300: PUSH
15301: LD_INT 1
15303: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
15304: LD_EXP 21
15308: PUSH
15309: LD_INT 2
15311: EQUAL
15312: IFFALSE 15332
// begin AddMedal ( Prisoner , 2 ) ;
15314: LD_STRING Prisoner
15316: PPUSH
15317: LD_INT 2
15319: PPUSH
15320: CALL_OW 101
// m3 := true ;
15324: LD_ADDR_VAR 0 5
15328: PUSH
15329: LD_INT 1
15331: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
15332: LD_EXP 21
15336: PUSH
15337: LD_INT 3
15339: EQUAL
15340: IFFALSE 15353
// AddMedal ( Prisoner , - 2 ) ;
15342: LD_STRING Prisoner
15344: PPUSH
15345: LD_INT 2
15347: NEG
15348: PPUSH
15349: CALL_OW 101
// if Difficulty = 3 and m1 and m2 and m3 then
15353: LD_OWVAR 67
15357: PUSH
15358: LD_INT 3
15360: EQUAL
15361: PUSH
15362: LD_VAR 0 3
15366: AND
15367: PUSH
15368: LD_VAR 0 4
15372: AND
15373: PUSH
15374: LD_VAR 0 5
15378: AND
15379: IFFALSE 15391
// SetAchievementEX ( ACH_AMER , 2 ) ;
15381: LD_STRING ACH_AMER
15383: PPUSH
15384: LD_INT 2
15386: PPUSH
15387: CALL_OW 564
// GiveMedals ( MAIN ) ;
15391: LD_STRING MAIN
15393: PPUSH
15394: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
15398: LD_INT 22
15400: PUSH
15401: LD_INT 1
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: PUSH
15408: LD_INT 23
15410: PUSH
15411: LD_INT 1
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: LD_INT 21
15420: PUSH
15421: LD_INT 1
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: LIST
15432: PPUSH
15433: CALL_OW 69
15437: PPUSH
15438: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15442: LD_EXP 1
15446: PPUSH
15447: LD_EXP 33
15451: PUSH
15452: LD_STRING JMM
15454: STR
15455: PPUSH
15456: CALL_OW 38
// if IsOK ( Bobby ) then
15460: LD_EXP 2
15464: PPUSH
15465: CALL_OW 302
15469: IFFALSE 15489
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15471: LD_EXP 2
15475: PPUSH
15476: LD_EXP 33
15480: PUSH
15481: LD_STRING Bobby
15483: STR
15484: PPUSH
15485: CALL_OW 38
// if IsOK ( Cyrus ) then
15489: LD_EXP 3
15493: PPUSH
15494: CALL_OW 302
15498: IFFALSE 15518
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15500: LD_EXP 3
15504: PPUSH
15505: LD_EXP 33
15509: PUSH
15510: LD_STRING Cyrus
15512: STR
15513: PPUSH
15514: CALL_OW 38
// if IsOK ( Lisa ) then
15518: LD_EXP 4
15522: PPUSH
15523: CALL_OW 302
15527: IFFALSE 15547
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15529: LD_EXP 4
15533: PPUSH
15534: LD_EXP 33
15538: PUSH
15539: LD_STRING Lisa
15541: STR
15542: PPUSH
15543: CALL_OW 38
// if IsOK ( Khatam ) then
15547: LD_EXP 5
15551: PPUSH
15552: CALL_OW 302
15556: IFFALSE 15576
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
15558: LD_EXP 5
15562: PPUSH
15563: LD_EXP 33
15567: PUSH
15568: LD_STRING Khatam
15570: STR
15571: PPUSH
15572: CALL_OW 38
// if IsOK ( Brian ) then
15576: LD_EXP 6
15580: PPUSH
15581: CALL_OW 302
15585: IFFALSE 15605
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
15587: LD_EXP 6
15591: PPUSH
15592: LD_EXP 33
15596: PUSH
15597: LD_STRING Brian
15599: STR
15600: PPUSH
15601: CALL_OW 38
// if IsOk ( Jerry ) then
15605: LD_EXP 7
15609: PPUSH
15610: CALL_OW 302
15614: IFFALSE 15634
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
15616: LD_EXP 7
15620: PPUSH
15621: LD_EXP 33
15625: PUSH
15626: LD_STRING Jerry
15628: STR
15629: PPUSH
15630: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
15634: LD_EXP 21
15638: PUSH
15639: LD_INT 1
15641: EQUAL
15642: PUSH
15643: LD_EXP 8
15647: PPUSH
15648: CALL_OW 255
15652: PUSH
15653: LD_INT 1
15655: EQUAL
15656: AND
15657: PUSH
15658: LD_EXP 8
15662: PPUSH
15663: CALL_OW 302
15667: AND
15668: IFFALSE 15688
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
15670: LD_EXP 8
15674: PPUSH
15675: LD_EXP 33
15679: PUSH
15680: LD_STRING Mikhail
15682: STR
15683: PPUSH
15684: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
15688: LD_INT 50
15690: PUSH
15691: EMPTY
15692: LIST
15693: PUSH
15694: LD_INT 22
15696: PUSH
15697: LD_INT 1
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PUSH
15704: LD_INT 21
15706: PUSH
15707: LD_INT 1
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: LIST
15718: PPUSH
15719: CALL_OW 69
15723: PUSH
15724: LD_EXP 1
15728: PUSH
15729: LD_EXP 2
15733: PUSH
15734: LD_EXP 3
15738: PUSH
15739: LD_EXP 4
15743: PUSH
15744: LD_EXP 5
15748: PUSH
15749: LD_EXP 6
15753: PUSH
15754: LD_EXP 7
15758: PUSH
15759: LD_EXP 8
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: DIFF
15774: PPUSH
15775: LD_STRING 02_other_survivors
15777: PPUSH
15778: CALL_OW 38
// YouWin ;
15782: CALL_OW 103
// end ; end_of_file
15786: LD_VAR 0 1
15790: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
15791: LD_INT 0
15793: PPUSH
// ar_crane := 88 ;
15794: LD_ADDR_EXP 41
15798: PUSH
15799: LD_INT 88
15801: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
15802: LD_ADDR_EXP 36
15806: PUSH
15807: LD_INT 89
15809: ST_TO_ADDR
// us_hack := 99 ;
15810: LD_ADDR_EXP 37
15814: PUSH
15815: LD_INT 99
15817: ST_TO_ADDR
// us_artillery := 97 ;
15818: LD_ADDR_EXP 38
15822: PUSH
15823: LD_INT 97
15825: ST_TO_ADDR
// ar_bio_bomb := 91 ;
15826: LD_ADDR_EXP 39
15830: PUSH
15831: LD_INT 91
15833: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
15834: LD_ADDR_EXP 40
15838: PUSH
15839: LD_INT 92
15841: ST_TO_ADDR
// ru_radar := 98 ;
15842: LD_ADDR_EXP 35
15846: PUSH
15847: LD_INT 98
15849: ST_TO_ADDR
// tech_Artillery := 80 ;
15850: LD_ADDR_EXP 42
15854: PUSH
15855: LD_INT 80
15857: ST_TO_ADDR
// tech_RadMat := 81 ;
15858: LD_ADDR_EXP 43
15862: PUSH
15863: LD_INT 81
15865: ST_TO_ADDR
// tech_BasicTools := 82 ;
15866: LD_ADDR_EXP 44
15870: PUSH
15871: LD_INT 82
15873: ST_TO_ADDR
// tech_Cargo := 83 ;
15874: LD_ADDR_EXP 45
15878: PUSH
15879: LD_INT 83
15881: ST_TO_ADDR
// tech_Track := 84 ;
15882: LD_ADDR_EXP 46
15886: PUSH
15887: LD_INT 84
15889: ST_TO_ADDR
// tech_Crane := 85 ;
15890: LD_ADDR_EXP 47
15894: PUSH
15895: LD_INT 85
15897: ST_TO_ADDR
// tech_Bulldozer := 86 ;
15898: LD_ADDR_EXP 48
15902: PUSH
15903: LD_INT 86
15905: ST_TO_ADDR
// tech_Hovercraft := 87 ;
15906: LD_ADDR_EXP 49
15910: PUSH
15911: LD_INT 87
15913: ST_TO_ADDR
// end ;
15914: LD_VAR 0 1
15918: RET
// every 1 do
15919: GO 15921
15921: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
15922: CALL 15791 0 0
15926: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
15927: LD_VAR 0 2
15931: PUSH
15932: LD_INT 100
15934: EQUAL
15935: IFFALSE 16884
// begin if not StreamModeActive then
15937: LD_EXP 50
15941: NOT
15942: IFFALSE 15952
// StreamModeActive := true ;
15944: LD_ADDR_EXP 50
15948: PUSH
15949: LD_INT 1
15951: ST_TO_ADDR
// if p3 = 0 then
15952: LD_VAR 0 3
15956: PUSH
15957: LD_INT 0
15959: EQUAL
15960: IFFALSE 15966
// InitStreamMode ;
15962: CALL 17117 0 0
// if p3 = 1 then
15966: LD_VAR 0 3
15970: PUSH
15971: LD_INT 1
15973: EQUAL
15974: IFFALSE 15984
// sRocket := true ;
15976: LD_ADDR_EXP 55
15980: PUSH
15981: LD_INT 1
15983: ST_TO_ADDR
// if p3 = 2 then
15984: LD_VAR 0 3
15988: PUSH
15989: LD_INT 2
15991: EQUAL
15992: IFFALSE 16002
// sSpeed := true ;
15994: LD_ADDR_EXP 54
15998: PUSH
15999: LD_INT 1
16001: ST_TO_ADDR
// if p3 = 3 then
16002: LD_VAR 0 3
16006: PUSH
16007: LD_INT 3
16009: EQUAL
16010: IFFALSE 16020
// sEngine := true ;
16012: LD_ADDR_EXP 56
16016: PUSH
16017: LD_INT 1
16019: ST_TO_ADDR
// if p3 = 4 then
16020: LD_VAR 0 3
16024: PUSH
16025: LD_INT 4
16027: EQUAL
16028: IFFALSE 16038
// sSpec := true ;
16030: LD_ADDR_EXP 53
16034: PUSH
16035: LD_INT 1
16037: ST_TO_ADDR
// if p3 = 5 then
16038: LD_VAR 0 3
16042: PUSH
16043: LD_INT 5
16045: EQUAL
16046: IFFALSE 16056
// sLevel := true ;
16048: LD_ADDR_EXP 57
16052: PUSH
16053: LD_INT 1
16055: ST_TO_ADDR
// if p3 = 6 then
16056: LD_VAR 0 3
16060: PUSH
16061: LD_INT 6
16063: EQUAL
16064: IFFALSE 16074
// sArmoury := true ;
16066: LD_ADDR_EXP 58
16070: PUSH
16071: LD_INT 1
16073: ST_TO_ADDR
// if p3 = 7 then
16074: LD_VAR 0 3
16078: PUSH
16079: LD_INT 7
16081: EQUAL
16082: IFFALSE 16092
// sRadar := true ;
16084: LD_ADDR_EXP 59
16088: PUSH
16089: LD_INT 1
16091: ST_TO_ADDR
// if p3 = 8 then
16092: LD_VAR 0 3
16096: PUSH
16097: LD_INT 8
16099: EQUAL
16100: IFFALSE 16110
// sBunker := true ;
16102: LD_ADDR_EXP 60
16106: PUSH
16107: LD_INT 1
16109: ST_TO_ADDR
// if p3 = 9 then
16110: LD_VAR 0 3
16114: PUSH
16115: LD_INT 9
16117: EQUAL
16118: IFFALSE 16128
// sHack := true ;
16120: LD_ADDR_EXP 61
16124: PUSH
16125: LD_INT 1
16127: ST_TO_ADDR
// if p3 = 10 then
16128: LD_VAR 0 3
16132: PUSH
16133: LD_INT 10
16135: EQUAL
16136: IFFALSE 16146
// sFire := true ;
16138: LD_ADDR_EXP 62
16142: PUSH
16143: LD_INT 1
16145: ST_TO_ADDR
// if p3 = 11 then
16146: LD_VAR 0 3
16150: PUSH
16151: LD_INT 11
16153: EQUAL
16154: IFFALSE 16164
// sRefresh := true ;
16156: LD_ADDR_EXP 63
16160: PUSH
16161: LD_INT 1
16163: ST_TO_ADDR
// if p3 = 12 then
16164: LD_VAR 0 3
16168: PUSH
16169: LD_INT 12
16171: EQUAL
16172: IFFALSE 16182
// sExp := true ;
16174: LD_ADDR_EXP 64
16178: PUSH
16179: LD_INT 1
16181: ST_TO_ADDR
// if p3 = 13 then
16182: LD_VAR 0 3
16186: PUSH
16187: LD_INT 13
16189: EQUAL
16190: IFFALSE 16200
// sDepot := true ;
16192: LD_ADDR_EXP 65
16196: PUSH
16197: LD_INT 1
16199: ST_TO_ADDR
// if p3 = 14 then
16200: LD_VAR 0 3
16204: PUSH
16205: LD_INT 14
16207: EQUAL
16208: IFFALSE 16218
// sFlag := true ;
16210: LD_ADDR_EXP 66
16214: PUSH
16215: LD_INT 1
16217: ST_TO_ADDR
// if p3 = 15 then
16218: LD_VAR 0 3
16222: PUSH
16223: LD_INT 15
16225: EQUAL
16226: IFFALSE 16236
// sKamikadze := true ;
16228: LD_ADDR_EXP 74
16232: PUSH
16233: LD_INT 1
16235: ST_TO_ADDR
// if p3 = 16 then
16236: LD_VAR 0 3
16240: PUSH
16241: LD_INT 16
16243: EQUAL
16244: IFFALSE 16254
// sTroll := true ;
16246: LD_ADDR_EXP 75
16250: PUSH
16251: LD_INT 1
16253: ST_TO_ADDR
// if p3 = 17 then
16254: LD_VAR 0 3
16258: PUSH
16259: LD_INT 17
16261: EQUAL
16262: IFFALSE 16272
// sSlow := true ;
16264: LD_ADDR_EXP 76
16268: PUSH
16269: LD_INT 1
16271: ST_TO_ADDR
// if p3 = 18 then
16272: LD_VAR 0 3
16276: PUSH
16277: LD_INT 18
16279: EQUAL
16280: IFFALSE 16290
// sLack := true ;
16282: LD_ADDR_EXP 77
16286: PUSH
16287: LD_INT 1
16289: ST_TO_ADDR
// if p3 = 19 then
16290: LD_VAR 0 3
16294: PUSH
16295: LD_INT 19
16297: EQUAL
16298: IFFALSE 16308
// sTank := true ;
16300: LD_ADDR_EXP 79
16304: PUSH
16305: LD_INT 1
16307: ST_TO_ADDR
// if p3 = 20 then
16308: LD_VAR 0 3
16312: PUSH
16313: LD_INT 20
16315: EQUAL
16316: IFFALSE 16326
// sRemote := true ;
16318: LD_ADDR_EXP 80
16322: PUSH
16323: LD_INT 1
16325: ST_TO_ADDR
// if p3 = 21 then
16326: LD_VAR 0 3
16330: PUSH
16331: LD_INT 21
16333: EQUAL
16334: IFFALSE 16344
// sPowell := true ;
16336: LD_ADDR_EXP 81
16340: PUSH
16341: LD_INT 1
16343: ST_TO_ADDR
// if p3 = 22 then
16344: LD_VAR 0 3
16348: PUSH
16349: LD_INT 22
16351: EQUAL
16352: IFFALSE 16362
// sTeleport := true ;
16354: LD_ADDR_EXP 84
16358: PUSH
16359: LD_INT 1
16361: ST_TO_ADDR
// if p3 = 23 then
16362: LD_VAR 0 3
16366: PUSH
16367: LD_INT 23
16369: EQUAL
16370: IFFALSE 16380
// sOilTower := true ;
16372: LD_ADDR_EXP 86
16376: PUSH
16377: LD_INT 1
16379: ST_TO_ADDR
// if p3 = 24 then
16380: LD_VAR 0 3
16384: PUSH
16385: LD_INT 24
16387: EQUAL
16388: IFFALSE 16398
// sShovel := true ;
16390: LD_ADDR_EXP 87
16394: PUSH
16395: LD_INT 1
16397: ST_TO_ADDR
// if p3 = 25 then
16398: LD_VAR 0 3
16402: PUSH
16403: LD_INT 25
16405: EQUAL
16406: IFFALSE 16416
// sSheik := true ;
16408: LD_ADDR_EXP 88
16412: PUSH
16413: LD_INT 1
16415: ST_TO_ADDR
// if p3 = 26 then
16416: LD_VAR 0 3
16420: PUSH
16421: LD_INT 26
16423: EQUAL
16424: IFFALSE 16434
// sEarthquake := true ;
16426: LD_ADDR_EXP 90
16430: PUSH
16431: LD_INT 1
16433: ST_TO_ADDR
// if p3 = 27 then
16434: LD_VAR 0 3
16438: PUSH
16439: LD_INT 27
16441: EQUAL
16442: IFFALSE 16452
// sAI := true ;
16444: LD_ADDR_EXP 91
16448: PUSH
16449: LD_INT 1
16451: ST_TO_ADDR
// if p3 = 28 then
16452: LD_VAR 0 3
16456: PUSH
16457: LD_INT 28
16459: EQUAL
16460: IFFALSE 16470
// sCargo := true ;
16462: LD_ADDR_EXP 94
16466: PUSH
16467: LD_INT 1
16469: ST_TO_ADDR
// if p3 = 29 then
16470: LD_VAR 0 3
16474: PUSH
16475: LD_INT 29
16477: EQUAL
16478: IFFALSE 16488
// sDLaser := true ;
16480: LD_ADDR_EXP 95
16484: PUSH
16485: LD_INT 1
16487: ST_TO_ADDR
// if p3 = 30 then
16488: LD_VAR 0 3
16492: PUSH
16493: LD_INT 30
16495: EQUAL
16496: IFFALSE 16506
// sExchange := true ;
16498: LD_ADDR_EXP 96
16502: PUSH
16503: LD_INT 1
16505: ST_TO_ADDR
// if p3 = 31 then
16506: LD_VAR 0 3
16510: PUSH
16511: LD_INT 31
16513: EQUAL
16514: IFFALSE 16524
// sFac := true ;
16516: LD_ADDR_EXP 97
16520: PUSH
16521: LD_INT 1
16523: ST_TO_ADDR
// if p3 = 32 then
16524: LD_VAR 0 3
16528: PUSH
16529: LD_INT 32
16531: EQUAL
16532: IFFALSE 16542
// sPower := true ;
16534: LD_ADDR_EXP 98
16538: PUSH
16539: LD_INT 1
16541: ST_TO_ADDR
// if p3 = 33 then
16542: LD_VAR 0 3
16546: PUSH
16547: LD_INT 33
16549: EQUAL
16550: IFFALSE 16560
// sRandom := true ;
16552: LD_ADDR_EXP 99
16556: PUSH
16557: LD_INT 1
16559: ST_TO_ADDR
// if p3 = 34 then
16560: LD_VAR 0 3
16564: PUSH
16565: LD_INT 34
16567: EQUAL
16568: IFFALSE 16578
// sShield := true ;
16570: LD_ADDR_EXP 100
16574: PUSH
16575: LD_INT 1
16577: ST_TO_ADDR
// if p3 = 35 then
16578: LD_VAR 0 3
16582: PUSH
16583: LD_INT 35
16585: EQUAL
16586: IFFALSE 16596
// sTime := true ;
16588: LD_ADDR_EXP 101
16592: PUSH
16593: LD_INT 1
16595: ST_TO_ADDR
// if p3 = 36 then
16596: LD_VAR 0 3
16600: PUSH
16601: LD_INT 36
16603: EQUAL
16604: IFFALSE 16614
// sTools := true ;
16606: LD_ADDR_EXP 102
16610: PUSH
16611: LD_INT 1
16613: ST_TO_ADDR
// if p3 = 101 then
16614: LD_VAR 0 3
16618: PUSH
16619: LD_INT 101
16621: EQUAL
16622: IFFALSE 16632
// sSold := true ;
16624: LD_ADDR_EXP 67
16628: PUSH
16629: LD_INT 1
16631: ST_TO_ADDR
// if p3 = 102 then
16632: LD_VAR 0 3
16636: PUSH
16637: LD_INT 102
16639: EQUAL
16640: IFFALSE 16650
// sDiff := true ;
16642: LD_ADDR_EXP 68
16646: PUSH
16647: LD_INT 1
16649: ST_TO_ADDR
// if p3 = 103 then
16650: LD_VAR 0 3
16654: PUSH
16655: LD_INT 103
16657: EQUAL
16658: IFFALSE 16668
// sFog := true ;
16660: LD_ADDR_EXP 71
16664: PUSH
16665: LD_INT 1
16667: ST_TO_ADDR
// if p3 = 104 then
16668: LD_VAR 0 3
16672: PUSH
16673: LD_INT 104
16675: EQUAL
16676: IFFALSE 16686
// sReset := true ;
16678: LD_ADDR_EXP 72
16682: PUSH
16683: LD_INT 1
16685: ST_TO_ADDR
// if p3 = 105 then
16686: LD_VAR 0 3
16690: PUSH
16691: LD_INT 105
16693: EQUAL
16694: IFFALSE 16704
// sSun := true ;
16696: LD_ADDR_EXP 73
16700: PUSH
16701: LD_INT 1
16703: ST_TO_ADDR
// if p3 = 106 then
16704: LD_VAR 0 3
16708: PUSH
16709: LD_INT 106
16711: EQUAL
16712: IFFALSE 16722
// sTiger := true ;
16714: LD_ADDR_EXP 69
16718: PUSH
16719: LD_INT 1
16721: ST_TO_ADDR
// if p3 = 107 then
16722: LD_VAR 0 3
16726: PUSH
16727: LD_INT 107
16729: EQUAL
16730: IFFALSE 16740
// sBomb := true ;
16732: LD_ADDR_EXP 70
16736: PUSH
16737: LD_INT 1
16739: ST_TO_ADDR
// if p3 = 108 then
16740: LD_VAR 0 3
16744: PUSH
16745: LD_INT 108
16747: EQUAL
16748: IFFALSE 16758
// sWound := true ;
16750: LD_ADDR_EXP 78
16754: PUSH
16755: LD_INT 1
16757: ST_TO_ADDR
// if p3 = 109 then
16758: LD_VAR 0 3
16762: PUSH
16763: LD_INT 109
16765: EQUAL
16766: IFFALSE 16776
// sBetray := true ;
16768: LD_ADDR_EXP 82
16772: PUSH
16773: LD_INT 1
16775: ST_TO_ADDR
// if p3 = 110 then
16776: LD_VAR 0 3
16780: PUSH
16781: LD_INT 110
16783: EQUAL
16784: IFFALSE 16794
// sContamin := true ;
16786: LD_ADDR_EXP 83
16790: PUSH
16791: LD_INT 1
16793: ST_TO_ADDR
// if p3 = 111 then
16794: LD_VAR 0 3
16798: PUSH
16799: LD_INT 111
16801: EQUAL
16802: IFFALSE 16812
// sOil := true ;
16804: LD_ADDR_EXP 85
16808: PUSH
16809: LD_INT 1
16811: ST_TO_ADDR
// if p3 = 112 then
16812: LD_VAR 0 3
16816: PUSH
16817: LD_INT 112
16819: EQUAL
16820: IFFALSE 16830
// sStu := true ;
16822: LD_ADDR_EXP 89
16826: PUSH
16827: LD_INT 1
16829: ST_TO_ADDR
// if p3 = 113 then
16830: LD_VAR 0 3
16834: PUSH
16835: LD_INT 113
16837: EQUAL
16838: IFFALSE 16848
// sBazooka := true ;
16840: LD_ADDR_EXP 92
16844: PUSH
16845: LD_INT 1
16847: ST_TO_ADDR
// if p3 = 114 then
16848: LD_VAR 0 3
16852: PUSH
16853: LD_INT 114
16855: EQUAL
16856: IFFALSE 16866
// sMortar := true ;
16858: LD_ADDR_EXP 93
16862: PUSH
16863: LD_INT 1
16865: ST_TO_ADDR
// if p3 = 115 then
16866: LD_VAR 0 3
16870: PUSH
16871: LD_INT 115
16873: EQUAL
16874: IFFALSE 16884
// sRanger := true ;
16876: LD_ADDR_EXP 103
16880: PUSH
16881: LD_INT 1
16883: ST_TO_ADDR
// end ; if p2 = 101 then
16884: LD_VAR 0 2
16888: PUSH
16889: LD_INT 101
16891: EQUAL
16892: IFFALSE 17095
// begin case p3 of 1 :
16894: LD_VAR 0 3
16898: PUSH
16899: LD_INT 1
16901: DOUBLE
16902: EQUAL
16903: IFTRUE 16907
16905: GO 16914
16907: POP
// hHackUnlimitedResources ; 2 :
16908: CALL 27189 0 0
16912: GO 17095
16914: LD_INT 2
16916: DOUBLE
16917: EQUAL
16918: IFTRUE 16922
16920: GO 16929
16922: POP
// hHackSetLevel10 ; 3 :
16923: CALL 27322 0 0
16927: GO 17095
16929: LD_INT 3
16931: DOUBLE
16932: EQUAL
16933: IFTRUE 16937
16935: GO 16944
16937: POP
// hHackSetLevel10YourUnits ; 4 :
16938: CALL 27407 0 0
16942: GO 17095
16944: LD_INT 4
16946: DOUBLE
16947: EQUAL
16948: IFTRUE 16952
16950: GO 16974
16952: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
16953: LD_VAR 0 4
16957: PPUSH
16958: LD_VAR 0 5
16962: PPUSH
16963: LD_VAR 0 6
16967: PPUSH
16968: CALL 27497 0 3
16972: GO 17095
16974: LD_INT 5
16976: DOUBLE
16977: EQUAL
16978: IFTRUE 16982
16980: GO 16989
16982: POP
// hHackSpawnVehicle ; 6 :
16983: CALL 27558 0 0
16987: GO 17095
16989: LD_INT 6
16991: DOUBLE
16992: EQUAL
16993: IFTRUE 16997
16995: GO 17004
16997: POP
// hHackInvincible ; 7 :
16998: CALL 28104 0 0
17002: GO 17095
17004: LD_INT 7
17006: DOUBLE
17007: EQUAL
17008: IFTRUE 17012
17010: GO 17019
17012: POP
// hHackInvisible ; 8 :
17013: CALL 28215 0 0
17017: GO 17095
17019: LD_INT 8
17021: DOUBLE
17022: EQUAL
17023: IFTRUE 17027
17025: GO 17034
17027: POP
// hHackChangeYourSide ; 9 :
17028: CALL 28272 0 0
17032: GO 17095
17034: LD_INT 9
17036: DOUBLE
17037: EQUAL
17038: IFTRUE 17042
17040: GO 17049
17042: POP
// hHackChangeUnitSide ; 10 :
17043: CALL 28314 0 0
17047: GO 17095
17049: LD_INT 10
17051: DOUBLE
17052: EQUAL
17053: IFTRUE 17057
17055: GO 17064
17057: POP
// hHackFog ; 11 :
17058: CALL 28415 0 0
17062: GO 17095
17064: LD_INT 11
17066: DOUBLE
17067: EQUAL
17068: IFTRUE 17072
17070: GO 17079
17072: POP
// hHackApeman ; 12 :
17073: CALL 28430 0 0
17077: GO 17095
17079: LD_INT 12
17081: DOUBLE
17082: EQUAL
17083: IFTRUE 17087
17085: GO 17094
17087: POP
// hHackBoom ; end ;
17088: CALL 28515 0 0
17092: GO 17095
17094: POP
// end ; end ;
17095: PPOPN 6
17097: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
17098: GO 17100
17100: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
17101: LD_STRING initStreamRollete();
17103: PPUSH
17104: CALL_OW 559
// InitStreamMode ;
17108: CALL 17117 0 0
// DefineStreamItems ( ) ;
17112: CALL 17557 0 0
// end ;
17116: END
// function InitStreamMode ; begin
17117: LD_INT 0
17119: PPUSH
// streamModeActive := false ;
17120: LD_ADDR_EXP 50
17124: PUSH
17125: LD_INT 0
17127: ST_TO_ADDR
// normalCounter := 36 ;
17128: LD_ADDR_EXP 51
17132: PUSH
17133: LD_INT 36
17135: ST_TO_ADDR
// hardcoreCounter := 16 ;
17136: LD_ADDR_EXP 52
17140: PUSH
17141: LD_INT 16
17143: ST_TO_ADDR
// sRocket := false ;
17144: LD_ADDR_EXP 55
17148: PUSH
17149: LD_INT 0
17151: ST_TO_ADDR
// sSpeed := false ;
17152: LD_ADDR_EXP 54
17156: PUSH
17157: LD_INT 0
17159: ST_TO_ADDR
// sEngine := false ;
17160: LD_ADDR_EXP 56
17164: PUSH
17165: LD_INT 0
17167: ST_TO_ADDR
// sSpec := false ;
17168: LD_ADDR_EXP 53
17172: PUSH
17173: LD_INT 0
17175: ST_TO_ADDR
// sLevel := false ;
17176: LD_ADDR_EXP 57
17180: PUSH
17181: LD_INT 0
17183: ST_TO_ADDR
// sArmoury := false ;
17184: LD_ADDR_EXP 58
17188: PUSH
17189: LD_INT 0
17191: ST_TO_ADDR
// sRadar := false ;
17192: LD_ADDR_EXP 59
17196: PUSH
17197: LD_INT 0
17199: ST_TO_ADDR
// sBunker := false ;
17200: LD_ADDR_EXP 60
17204: PUSH
17205: LD_INT 0
17207: ST_TO_ADDR
// sHack := false ;
17208: LD_ADDR_EXP 61
17212: PUSH
17213: LD_INT 0
17215: ST_TO_ADDR
// sFire := false ;
17216: LD_ADDR_EXP 62
17220: PUSH
17221: LD_INT 0
17223: ST_TO_ADDR
// sRefresh := false ;
17224: LD_ADDR_EXP 63
17228: PUSH
17229: LD_INT 0
17231: ST_TO_ADDR
// sExp := false ;
17232: LD_ADDR_EXP 64
17236: PUSH
17237: LD_INT 0
17239: ST_TO_ADDR
// sDepot := false ;
17240: LD_ADDR_EXP 65
17244: PUSH
17245: LD_INT 0
17247: ST_TO_ADDR
// sFlag := false ;
17248: LD_ADDR_EXP 66
17252: PUSH
17253: LD_INT 0
17255: ST_TO_ADDR
// sKamikadze := false ;
17256: LD_ADDR_EXP 74
17260: PUSH
17261: LD_INT 0
17263: ST_TO_ADDR
// sTroll := false ;
17264: LD_ADDR_EXP 75
17268: PUSH
17269: LD_INT 0
17271: ST_TO_ADDR
// sSlow := false ;
17272: LD_ADDR_EXP 76
17276: PUSH
17277: LD_INT 0
17279: ST_TO_ADDR
// sLack := false ;
17280: LD_ADDR_EXP 77
17284: PUSH
17285: LD_INT 0
17287: ST_TO_ADDR
// sTank := false ;
17288: LD_ADDR_EXP 79
17292: PUSH
17293: LD_INT 0
17295: ST_TO_ADDR
// sRemote := false ;
17296: LD_ADDR_EXP 80
17300: PUSH
17301: LD_INT 0
17303: ST_TO_ADDR
// sPowell := false ;
17304: LD_ADDR_EXP 81
17308: PUSH
17309: LD_INT 0
17311: ST_TO_ADDR
// sTeleport := false ;
17312: LD_ADDR_EXP 84
17316: PUSH
17317: LD_INT 0
17319: ST_TO_ADDR
// sOilTower := false ;
17320: LD_ADDR_EXP 86
17324: PUSH
17325: LD_INT 0
17327: ST_TO_ADDR
// sShovel := false ;
17328: LD_ADDR_EXP 87
17332: PUSH
17333: LD_INT 0
17335: ST_TO_ADDR
// sSheik := false ;
17336: LD_ADDR_EXP 88
17340: PUSH
17341: LD_INT 0
17343: ST_TO_ADDR
// sEarthquake := false ;
17344: LD_ADDR_EXP 90
17348: PUSH
17349: LD_INT 0
17351: ST_TO_ADDR
// sAI := false ;
17352: LD_ADDR_EXP 91
17356: PUSH
17357: LD_INT 0
17359: ST_TO_ADDR
// sCargo := false ;
17360: LD_ADDR_EXP 94
17364: PUSH
17365: LD_INT 0
17367: ST_TO_ADDR
// sDLaser := false ;
17368: LD_ADDR_EXP 95
17372: PUSH
17373: LD_INT 0
17375: ST_TO_ADDR
// sExchange := false ;
17376: LD_ADDR_EXP 96
17380: PUSH
17381: LD_INT 0
17383: ST_TO_ADDR
// sFac := false ;
17384: LD_ADDR_EXP 97
17388: PUSH
17389: LD_INT 0
17391: ST_TO_ADDR
// sPower := false ;
17392: LD_ADDR_EXP 98
17396: PUSH
17397: LD_INT 0
17399: ST_TO_ADDR
// sRandom := false ;
17400: LD_ADDR_EXP 99
17404: PUSH
17405: LD_INT 0
17407: ST_TO_ADDR
// sShield := false ;
17408: LD_ADDR_EXP 100
17412: PUSH
17413: LD_INT 0
17415: ST_TO_ADDR
// sTime := false ;
17416: LD_ADDR_EXP 101
17420: PUSH
17421: LD_INT 0
17423: ST_TO_ADDR
// sTools := false ;
17424: LD_ADDR_EXP 102
17428: PUSH
17429: LD_INT 0
17431: ST_TO_ADDR
// sSold := false ;
17432: LD_ADDR_EXP 67
17436: PUSH
17437: LD_INT 0
17439: ST_TO_ADDR
// sDiff := false ;
17440: LD_ADDR_EXP 68
17444: PUSH
17445: LD_INT 0
17447: ST_TO_ADDR
// sFog := false ;
17448: LD_ADDR_EXP 71
17452: PUSH
17453: LD_INT 0
17455: ST_TO_ADDR
// sReset := false ;
17456: LD_ADDR_EXP 72
17460: PUSH
17461: LD_INT 0
17463: ST_TO_ADDR
// sSun := false ;
17464: LD_ADDR_EXP 73
17468: PUSH
17469: LD_INT 0
17471: ST_TO_ADDR
// sTiger := false ;
17472: LD_ADDR_EXP 69
17476: PUSH
17477: LD_INT 0
17479: ST_TO_ADDR
// sBomb := false ;
17480: LD_ADDR_EXP 70
17484: PUSH
17485: LD_INT 0
17487: ST_TO_ADDR
// sWound := false ;
17488: LD_ADDR_EXP 78
17492: PUSH
17493: LD_INT 0
17495: ST_TO_ADDR
// sBetray := false ;
17496: LD_ADDR_EXP 82
17500: PUSH
17501: LD_INT 0
17503: ST_TO_ADDR
// sContamin := false ;
17504: LD_ADDR_EXP 83
17508: PUSH
17509: LD_INT 0
17511: ST_TO_ADDR
// sOil := false ;
17512: LD_ADDR_EXP 85
17516: PUSH
17517: LD_INT 0
17519: ST_TO_ADDR
// sStu := false ;
17520: LD_ADDR_EXP 89
17524: PUSH
17525: LD_INT 0
17527: ST_TO_ADDR
// sBazooka := false ;
17528: LD_ADDR_EXP 92
17532: PUSH
17533: LD_INT 0
17535: ST_TO_ADDR
// sMortar := false ;
17536: LD_ADDR_EXP 93
17540: PUSH
17541: LD_INT 0
17543: ST_TO_ADDR
// sRanger := false ;
17544: LD_ADDR_EXP 103
17548: PUSH
17549: LD_INT 0
17551: ST_TO_ADDR
// end ;
17552: LD_VAR 0 1
17556: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
17557: LD_INT 0
17559: PPUSH
17560: PPUSH
17561: PPUSH
17562: PPUSH
17563: PPUSH
// result := [ ] ;
17564: LD_ADDR_VAR 0 1
17568: PUSH
17569: EMPTY
17570: ST_TO_ADDR
// if campaign_id = 1 then
17571: LD_OWVAR 69
17575: PUSH
17576: LD_INT 1
17578: EQUAL
17579: IFFALSE 20517
// begin case mission_number of 1 :
17581: LD_OWVAR 70
17585: PUSH
17586: LD_INT 1
17588: DOUBLE
17589: EQUAL
17590: IFTRUE 17594
17592: GO 17658
17594: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
17595: LD_ADDR_VAR 0 1
17599: PUSH
17600: LD_INT 2
17602: PUSH
17603: LD_INT 4
17605: PUSH
17606: LD_INT 11
17608: PUSH
17609: LD_INT 12
17611: PUSH
17612: LD_INT 15
17614: PUSH
17615: LD_INT 16
17617: PUSH
17618: LD_INT 22
17620: PUSH
17621: LD_INT 23
17623: PUSH
17624: LD_INT 26
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: PUSH
17638: LD_INT 101
17640: PUSH
17641: LD_INT 102
17643: PUSH
17644: LD_INT 106
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: LIST
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: ST_TO_ADDR
17656: GO 20515
17658: LD_INT 2
17660: DOUBLE
17661: EQUAL
17662: IFTRUE 17666
17664: GO 17738
17666: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
17667: LD_ADDR_VAR 0 1
17671: PUSH
17672: LD_INT 2
17674: PUSH
17675: LD_INT 4
17677: PUSH
17678: LD_INT 11
17680: PUSH
17681: LD_INT 12
17683: PUSH
17684: LD_INT 15
17686: PUSH
17687: LD_INT 16
17689: PUSH
17690: LD_INT 22
17692: PUSH
17693: LD_INT 23
17695: PUSH
17696: LD_INT 26
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: PUSH
17710: LD_INT 101
17712: PUSH
17713: LD_INT 102
17715: PUSH
17716: LD_INT 105
17718: PUSH
17719: LD_INT 106
17721: PUSH
17722: LD_INT 108
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: ST_TO_ADDR
17736: GO 20515
17738: LD_INT 3
17740: DOUBLE
17741: EQUAL
17742: IFTRUE 17746
17744: GO 17822
17746: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
17747: LD_ADDR_VAR 0 1
17751: PUSH
17752: LD_INT 2
17754: PUSH
17755: LD_INT 4
17757: PUSH
17758: LD_INT 5
17760: PUSH
17761: LD_INT 11
17763: PUSH
17764: LD_INT 12
17766: PUSH
17767: LD_INT 15
17769: PUSH
17770: LD_INT 16
17772: PUSH
17773: LD_INT 22
17775: PUSH
17776: LD_INT 26
17778: PUSH
17779: LD_INT 36
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: PUSH
17794: LD_INT 101
17796: PUSH
17797: LD_INT 102
17799: PUSH
17800: LD_INT 105
17802: PUSH
17803: LD_INT 106
17805: PUSH
17806: LD_INT 108
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: ST_TO_ADDR
17820: GO 20515
17822: LD_INT 4
17824: DOUBLE
17825: EQUAL
17826: IFTRUE 17830
17828: GO 17914
17830: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
17831: LD_ADDR_VAR 0 1
17835: PUSH
17836: LD_INT 2
17838: PUSH
17839: LD_INT 4
17841: PUSH
17842: LD_INT 5
17844: PUSH
17845: LD_INT 8
17847: PUSH
17848: LD_INT 11
17850: PUSH
17851: LD_INT 12
17853: PUSH
17854: LD_INT 15
17856: PUSH
17857: LD_INT 16
17859: PUSH
17860: LD_INT 22
17862: PUSH
17863: LD_INT 23
17865: PUSH
17866: LD_INT 26
17868: PUSH
17869: LD_INT 36
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 101
17888: PUSH
17889: LD_INT 102
17891: PUSH
17892: LD_INT 105
17894: PUSH
17895: LD_INT 106
17897: PUSH
17898: LD_INT 108
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: ST_TO_ADDR
17912: GO 20515
17914: LD_INT 5
17916: DOUBLE
17917: EQUAL
17918: IFTRUE 17922
17920: GO 18022
17922: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
17923: LD_ADDR_VAR 0 1
17927: PUSH
17928: LD_INT 2
17930: PUSH
17931: LD_INT 4
17933: PUSH
17934: LD_INT 5
17936: PUSH
17937: LD_INT 6
17939: PUSH
17940: LD_INT 8
17942: PUSH
17943: LD_INT 11
17945: PUSH
17946: LD_INT 12
17948: PUSH
17949: LD_INT 15
17951: PUSH
17952: LD_INT 16
17954: PUSH
17955: LD_INT 22
17957: PUSH
17958: LD_INT 23
17960: PUSH
17961: LD_INT 25
17963: PUSH
17964: LD_INT 26
17966: PUSH
17967: LD_INT 36
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 101
17988: PUSH
17989: LD_INT 102
17991: PUSH
17992: LD_INT 105
17994: PUSH
17995: LD_INT 106
17997: PUSH
17998: LD_INT 108
18000: PUSH
18001: LD_INT 109
18003: PUSH
18004: LD_INT 112
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: ST_TO_ADDR
18020: GO 20515
18022: LD_INT 6
18024: DOUBLE
18025: EQUAL
18026: IFTRUE 18030
18028: GO 18150
18030: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
18031: LD_ADDR_VAR 0 1
18035: PUSH
18036: LD_INT 2
18038: PUSH
18039: LD_INT 4
18041: PUSH
18042: LD_INT 5
18044: PUSH
18045: LD_INT 6
18047: PUSH
18048: LD_INT 8
18050: PUSH
18051: LD_INT 11
18053: PUSH
18054: LD_INT 12
18056: PUSH
18057: LD_INT 15
18059: PUSH
18060: LD_INT 16
18062: PUSH
18063: LD_INT 20
18065: PUSH
18066: LD_INT 21
18068: PUSH
18069: LD_INT 22
18071: PUSH
18072: LD_INT 23
18074: PUSH
18075: LD_INT 25
18077: PUSH
18078: LD_INT 26
18080: PUSH
18081: LD_INT 30
18083: PUSH
18084: LD_INT 31
18086: PUSH
18087: LD_INT 32
18089: PUSH
18090: LD_INT 36
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 101
18116: PUSH
18117: LD_INT 102
18119: PUSH
18120: LD_INT 105
18122: PUSH
18123: LD_INT 106
18125: PUSH
18126: LD_INT 108
18128: PUSH
18129: LD_INT 109
18131: PUSH
18132: LD_INT 112
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: ST_TO_ADDR
18148: GO 20515
18150: LD_INT 7
18152: DOUBLE
18153: EQUAL
18154: IFTRUE 18158
18156: GO 18258
18158: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
18159: LD_ADDR_VAR 0 1
18163: PUSH
18164: LD_INT 2
18166: PUSH
18167: LD_INT 4
18169: PUSH
18170: LD_INT 5
18172: PUSH
18173: LD_INT 7
18175: PUSH
18176: LD_INT 11
18178: PUSH
18179: LD_INT 12
18181: PUSH
18182: LD_INT 15
18184: PUSH
18185: LD_INT 16
18187: PUSH
18188: LD_INT 20
18190: PUSH
18191: LD_INT 21
18193: PUSH
18194: LD_INT 22
18196: PUSH
18197: LD_INT 23
18199: PUSH
18200: LD_INT 25
18202: PUSH
18203: LD_INT 26
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 101
18224: PUSH
18225: LD_INT 102
18227: PUSH
18228: LD_INT 103
18230: PUSH
18231: LD_INT 105
18233: PUSH
18234: LD_INT 106
18236: PUSH
18237: LD_INT 108
18239: PUSH
18240: LD_INT 112
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: ST_TO_ADDR
18256: GO 20515
18258: LD_INT 8
18260: DOUBLE
18261: EQUAL
18262: IFTRUE 18266
18264: GO 18394
18266: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
18267: LD_ADDR_VAR 0 1
18271: PUSH
18272: LD_INT 2
18274: PUSH
18275: LD_INT 4
18277: PUSH
18278: LD_INT 5
18280: PUSH
18281: LD_INT 6
18283: PUSH
18284: LD_INT 7
18286: PUSH
18287: LD_INT 8
18289: PUSH
18290: LD_INT 11
18292: PUSH
18293: LD_INT 12
18295: PUSH
18296: LD_INT 15
18298: PUSH
18299: LD_INT 16
18301: PUSH
18302: LD_INT 20
18304: PUSH
18305: LD_INT 21
18307: PUSH
18308: LD_INT 22
18310: PUSH
18311: LD_INT 23
18313: PUSH
18314: LD_INT 25
18316: PUSH
18317: LD_INT 26
18319: PUSH
18320: LD_INT 30
18322: PUSH
18323: LD_INT 31
18325: PUSH
18326: LD_INT 32
18328: PUSH
18329: LD_INT 36
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 101
18356: PUSH
18357: LD_INT 102
18359: PUSH
18360: LD_INT 103
18362: PUSH
18363: LD_INT 105
18365: PUSH
18366: LD_INT 106
18368: PUSH
18369: LD_INT 108
18371: PUSH
18372: LD_INT 109
18374: PUSH
18375: LD_INT 112
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: ST_TO_ADDR
18392: GO 20515
18394: LD_INT 9
18396: DOUBLE
18397: EQUAL
18398: IFTRUE 18402
18400: GO 18538
18402: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
18403: LD_ADDR_VAR 0 1
18407: PUSH
18408: LD_INT 2
18410: PUSH
18411: LD_INT 4
18413: PUSH
18414: LD_INT 5
18416: PUSH
18417: LD_INT 6
18419: PUSH
18420: LD_INT 7
18422: PUSH
18423: LD_INT 8
18425: PUSH
18426: LD_INT 11
18428: PUSH
18429: LD_INT 12
18431: PUSH
18432: LD_INT 15
18434: PUSH
18435: LD_INT 16
18437: PUSH
18438: LD_INT 20
18440: PUSH
18441: LD_INT 21
18443: PUSH
18444: LD_INT 22
18446: PUSH
18447: LD_INT 23
18449: PUSH
18450: LD_INT 25
18452: PUSH
18453: LD_INT 26
18455: PUSH
18456: LD_INT 28
18458: PUSH
18459: LD_INT 30
18461: PUSH
18462: LD_INT 31
18464: PUSH
18465: LD_INT 32
18467: PUSH
18468: LD_INT 36
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: PUSH
18494: LD_INT 101
18496: PUSH
18497: LD_INT 102
18499: PUSH
18500: LD_INT 103
18502: PUSH
18503: LD_INT 105
18505: PUSH
18506: LD_INT 106
18508: PUSH
18509: LD_INT 108
18511: PUSH
18512: LD_INT 109
18514: PUSH
18515: LD_INT 112
18517: PUSH
18518: LD_INT 114
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: ST_TO_ADDR
18536: GO 20515
18538: LD_INT 10
18540: DOUBLE
18541: EQUAL
18542: IFTRUE 18546
18544: GO 18730
18546: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
18547: LD_ADDR_VAR 0 1
18551: PUSH
18552: LD_INT 2
18554: PUSH
18555: LD_INT 4
18557: PUSH
18558: LD_INT 5
18560: PUSH
18561: LD_INT 6
18563: PUSH
18564: LD_INT 7
18566: PUSH
18567: LD_INT 8
18569: PUSH
18570: LD_INT 9
18572: PUSH
18573: LD_INT 10
18575: PUSH
18576: LD_INT 11
18578: PUSH
18579: LD_INT 12
18581: PUSH
18582: LD_INT 13
18584: PUSH
18585: LD_INT 14
18587: PUSH
18588: LD_INT 15
18590: PUSH
18591: LD_INT 16
18593: PUSH
18594: LD_INT 17
18596: PUSH
18597: LD_INT 18
18599: PUSH
18600: LD_INT 19
18602: PUSH
18603: LD_INT 20
18605: PUSH
18606: LD_INT 21
18608: PUSH
18609: LD_INT 22
18611: PUSH
18612: LD_INT 23
18614: PUSH
18615: LD_INT 24
18617: PUSH
18618: LD_INT 25
18620: PUSH
18621: LD_INT 26
18623: PUSH
18624: LD_INT 28
18626: PUSH
18627: LD_INT 30
18629: PUSH
18630: LD_INT 31
18632: PUSH
18633: LD_INT 32
18635: PUSH
18636: LD_INT 36
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 101
18672: PUSH
18673: LD_INT 102
18675: PUSH
18676: LD_INT 103
18678: PUSH
18679: LD_INT 104
18681: PUSH
18682: LD_INT 105
18684: PUSH
18685: LD_INT 106
18687: PUSH
18688: LD_INT 107
18690: PUSH
18691: LD_INT 108
18693: PUSH
18694: LD_INT 109
18696: PUSH
18697: LD_INT 110
18699: PUSH
18700: LD_INT 111
18702: PUSH
18703: LD_INT 112
18705: PUSH
18706: LD_INT 114
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: ST_TO_ADDR
18728: GO 20515
18730: LD_INT 11
18732: DOUBLE
18733: EQUAL
18734: IFTRUE 18738
18736: GO 18930
18738: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
18739: LD_ADDR_VAR 0 1
18743: PUSH
18744: LD_INT 2
18746: PUSH
18747: LD_INT 3
18749: PUSH
18750: LD_INT 4
18752: PUSH
18753: LD_INT 5
18755: PUSH
18756: LD_INT 6
18758: PUSH
18759: LD_INT 7
18761: PUSH
18762: LD_INT 8
18764: PUSH
18765: LD_INT 9
18767: PUSH
18768: LD_INT 10
18770: PUSH
18771: LD_INT 11
18773: PUSH
18774: LD_INT 12
18776: PUSH
18777: LD_INT 13
18779: PUSH
18780: LD_INT 14
18782: PUSH
18783: LD_INT 15
18785: PUSH
18786: LD_INT 16
18788: PUSH
18789: LD_INT 17
18791: PUSH
18792: LD_INT 18
18794: PUSH
18795: LD_INT 19
18797: PUSH
18798: LD_INT 20
18800: PUSH
18801: LD_INT 21
18803: PUSH
18804: LD_INT 22
18806: PUSH
18807: LD_INT 23
18809: PUSH
18810: LD_INT 24
18812: PUSH
18813: LD_INT 25
18815: PUSH
18816: LD_INT 26
18818: PUSH
18819: LD_INT 28
18821: PUSH
18822: LD_INT 30
18824: PUSH
18825: LD_INT 31
18827: PUSH
18828: LD_INT 32
18830: PUSH
18831: LD_INT 34
18833: PUSH
18834: LD_INT 36
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: PUSH
18870: LD_INT 101
18872: PUSH
18873: LD_INT 102
18875: PUSH
18876: LD_INT 103
18878: PUSH
18879: LD_INT 104
18881: PUSH
18882: LD_INT 105
18884: PUSH
18885: LD_INT 106
18887: PUSH
18888: LD_INT 107
18890: PUSH
18891: LD_INT 108
18893: PUSH
18894: LD_INT 109
18896: PUSH
18897: LD_INT 110
18899: PUSH
18900: LD_INT 111
18902: PUSH
18903: LD_INT 112
18905: PUSH
18906: LD_INT 114
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: ST_TO_ADDR
18928: GO 20515
18930: LD_INT 12
18932: DOUBLE
18933: EQUAL
18934: IFTRUE 18938
18936: GO 19146
18938: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
18939: LD_ADDR_VAR 0 1
18943: PUSH
18944: LD_INT 1
18946: PUSH
18947: LD_INT 2
18949: PUSH
18950: LD_INT 3
18952: PUSH
18953: LD_INT 4
18955: PUSH
18956: LD_INT 5
18958: PUSH
18959: LD_INT 6
18961: PUSH
18962: LD_INT 7
18964: PUSH
18965: LD_INT 8
18967: PUSH
18968: LD_INT 9
18970: PUSH
18971: LD_INT 10
18973: PUSH
18974: LD_INT 11
18976: PUSH
18977: LD_INT 12
18979: PUSH
18980: LD_INT 13
18982: PUSH
18983: LD_INT 14
18985: PUSH
18986: LD_INT 15
18988: PUSH
18989: LD_INT 16
18991: PUSH
18992: LD_INT 17
18994: PUSH
18995: LD_INT 18
18997: PUSH
18998: LD_INT 19
19000: PUSH
19001: LD_INT 20
19003: PUSH
19004: LD_INT 21
19006: PUSH
19007: LD_INT 22
19009: PUSH
19010: LD_INT 23
19012: PUSH
19013: LD_INT 24
19015: PUSH
19016: LD_INT 25
19018: PUSH
19019: LD_INT 26
19021: PUSH
19022: LD_INT 27
19024: PUSH
19025: LD_INT 28
19027: PUSH
19028: LD_INT 30
19030: PUSH
19031: LD_INT 31
19033: PUSH
19034: LD_INT 32
19036: PUSH
19037: LD_INT 33
19039: PUSH
19040: LD_INT 34
19042: PUSH
19043: LD_INT 36
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 101
19084: PUSH
19085: LD_INT 102
19087: PUSH
19088: LD_INT 103
19090: PUSH
19091: LD_INT 104
19093: PUSH
19094: LD_INT 105
19096: PUSH
19097: LD_INT 106
19099: PUSH
19100: LD_INT 107
19102: PUSH
19103: LD_INT 108
19105: PUSH
19106: LD_INT 109
19108: PUSH
19109: LD_INT 110
19111: PUSH
19112: LD_INT 111
19114: PUSH
19115: LD_INT 112
19117: PUSH
19118: LD_INT 113
19120: PUSH
19121: LD_INT 114
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: ST_TO_ADDR
19144: GO 20515
19146: LD_INT 13
19148: DOUBLE
19149: EQUAL
19150: IFTRUE 19154
19152: GO 19350
19154: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
19155: LD_ADDR_VAR 0 1
19159: PUSH
19160: LD_INT 1
19162: PUSH
19163: LD_INT 2
19165: PUSH
19166: LD_INT 3
19168: PUSH
19169: LD_INT 4
19171: PUSH
19172: LD_INT 5
19174: PUSH
19175: LD_INT 8
19177: PUSH
19178: LD_INT 9
19180: PUSH
19181: LD_INT 10
19183: PUSH
19184: LD_INT 11
19186: PUSH
19187: LD_INT 12
19189: PUSH
19190: LD_INT 14
19192: PUSH
19193: LD_INT 15
19195: PUSH
19196: LD_INT 16
19198: PUSH
19199: LD_INT 17
19201: PUSH
19202: LD_INT 18
19204: PUSH
19205: LD_INT 19
19207: PUSH
19208: LD_INT 20
19210: PUSH
19211: LD_INT 21
19213: PUSH
19214: LD_INT 22
19216: PUSH
19217: LD_INT 23
19219: PUSH
19220: LD_INT 24
19222: PUSH
19223: LD_INT 25
19225: PUSH
19226: LD_INT 26
19228: PUSH
19229: LD_INT 27
19231: PUSH
19232: LD_INT 28
19234: PUSH
19235: LD_INT 30
19237: PUSH
19238: LD_INT 31
19240: PUSH
19241: LD_INT 32
19243: PUSH
19244: LD_INT 33
19246: PUSH
19247: LD_INT 34
19249: PUSH
19250: LD_INT 36
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: PUSH
19286: LD_INT 101
19288: PUSH
19289: LD_INT 102
19291: PUSH
19292: LD_INT 103
19294: PUSH
19295: LD_INT 104
19297: PUSH
19298: LD_INT 105
19300: PUSH
19301: LD_INT 106
19303: PUSH
19304: LD_INT 107
19306: PUSH
19307: LD_INT 108
19309: PUSH
19310: LD_INT 109
19312: PUSH
19313: LD_INT 110
19315: PUSH
19316: LD_INT 111
19318: PUSH
19319: LD_INT 112
19321: PUSH
19322: LD_INT 113
19324: PUSH
19325: LD_INT 114
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: ST_TO_ADDR
19348: GO 20515
19350: LD_INT 14
19352: DOUBLE
19353: EQUAL
19354: IFTRUE 19358
19356: GO 19570
19358: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
19359: LD_ADDR_VAR 0 1
19363: PUSH
19364: LD_INT 1
19366: PUSH
19367: LD_INT 2
19369: PUSH
19370: LD_INT 3
19372: PUSH
19373: LD_INT 4
19375: PUSH
19376: LD_INT 5
19378: PUSH
19379: LD_INT 6
19381: PUSH
19382: LD_INT 7
19384: PUSH
19385: LD_INT 8
19387: PUSH
19388: LD_INT 9
19390: PUSH
19391: LD_INT 10
19393: PUSH
19394: LD_INT 11
19396: PUSH
19397: LD_INT 12
19399: PUSH
19400: LD_INT 13
19402: PUSH
19403: LD_INT 14
19405: PUSH
19406: LD_INT 15
19408: PUSH
19409: LD_INT 16
19411: PUSH
19412: LD_INT 17
19414: PUSH
19415: LD_INT 18
19417: PUSH
19418: LD_INT 19
19420: PUSH
19421: LD_INT 20
19423: PUSH
19424: LD_INT 21
19426: PUSH
19427: LD_INT 22
19429: PUSH
19430: LD_INT 23
19432: PUSH
19433: LD_INT 24
19435: PUSH
19436: LD_INT 25
19438: PUSH
19439: LD_INT 26
19441: PUSH
19442: LD_INT 27
19444: PUSH
19445: LD_INT 28
19447: PUSH
19448: LD_INT 29
19450: PUSH
19451: LD_INT 30
19453: PUSH
19454: LD_INT 31
19456: PUSH
19457: LD_INT 32
19459: PUSH
19460: LD_INT 33
19462: PUSH
19463: LD_INT 34
19465: PUSH
19466: LD_INT 36
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: PUSH
19506: LD_INT 101
19508: PUSH
19509: LD_INT 102
19511: PUSH
19512: LD_INT 103
19514: PUSH
19515: LD_INT 104
19517: PUSH
19518: LD_INT 105
19520: PUSH
19521: LD_INT 106
19523: PUSH
19524: LD_INT 107
19526: PUSH
19527: LD_INT 108
19529: PUSH
19530: LD_INT 109
19532: PUSH
19533: LD_INT 110
19535: PUSH
19536: LD_INT 111
19538: PUSH
19539: LD_INT 112
19541: PUSH
19542: LD_INT 113
19544: PUSH
19545: LD_INT 114
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: ST_TO_ADDR
19568: GO 20515
19570: LD_INT 15
19572: DOUBLE
19573: EQUAL
19574: IFTRUE 19578
19576: GO 19790
19578: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
19579: LD_ADDR_VAR 0 1
19583: PUSH
19584: LD_INT 1
19586: PUSH
19587: LD_INT 2
19589: PUSH
19590: LD_INT 3
19592: PUSH
19593: LD_INT 4
19595: PUSH
19596: LD_INT 5
19598: PUSH
19599: LD_INT 6
19601: PUSH
19602: LD_INT 7
19604: PUSH
19605: LD_INT 8
19607: PUSH
19608: LD_INT 9
19610: PUSH
19611: LD_INT 10
19613: PUSH
19614: LD_INT 11
19616: PUSH
19617: LD_INT 12
19619: PUSH
19620: LD_INT 13
19622: PUSH
19623: LD_INT 14
19625: PUSH
19626: LD_INT 15
19628: PUSH
19629: LD_INT 16
19631: PUSH
19632: LD_INT 17
19634: PUSH
19635: LD_INT 18
19637: PUSH
19638: LD_INT 19
19640: PUSH
19641: LD_INT 20
19643: PUSH
19644: LD_INT 21
19646: PUSH
19647: LD_INT 22
19649: PUSH
19650: LD_INT 23
19652: PUSH
19653: LD_INT 24
19655: PUSH
19656: LD_INT 25
19658: PUSH
19659: LD_INT 26
19661: PUSH
19662: LD_INT 27
19664: PUSH
19665: LD_INT 28
19667: PUSH
19668: LD_INT 29
19670: PUSH
19671: LD_INT 30
19673: PUSH
19674: LD_INT 31
19676: PUSH
19677: LD_INT 32
19679: PUSH
19680: LD_INT 33
19682: PUSH
19683: LD_INT 34
19685: PUSH
19686: LD_INT 36
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 101
19728: PUSH
19729: LD_INT 102
19731: PUSH
19732: LD_INT 103
19734: PUSH
19735: LD_INT 104
19737: PUSH
19738: LD_INT 105
19740: PUSH
19741: LD_INT 106
19743: PUSH
19744: LD_INT 107
19746: PUSH
19747: LD_INT 108
19749: PUSH
19750: LD_INT 109
19752: PUSH
19753: LD_INT 110
19755: PUSH
19756: LD_INT 111
19758: PUSH
19759: LD_INT 112
19761: PUSH
19762: LD_INT 113
19764: PUSH
19765: LD_INT 114
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: ST_TO_ADDR
19788: GO 20515
19790: LD_INT 16
19792: DOUBLE
19793: EQUAL
19794: IFTRUE 19798
19796: GO 19922
19798: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
19799: LD_ADDR_VAR 0 1
19803: PUSH
19804: LD_INT 2
19806: PUSH
19807: LD_INT 4
19809: PUSH
19810: LD_INT 5
19812: PUSH
19813: LD_INT 7
19815: PUSH
19816: LD_INT 11
19818: PUSH
19819: LD_INT 12
19821: PUSH
19822: LD_INT 15
19824: PUSH
19825: LD_INT 16
19827: PUSH
19828: LD_INT 20
19830: PUSH
19831: LD_INT 21
19833: PUSH
19834: LD_INT 22
19836: PUSH
19837: LD_INT 23
19839: PUSH
19840: LD_INT 25
19842: PUSH
19843: LD_INT 26
19845: PUSH
19846: LD_INT 30
19848: PUSH
19849: LD_INT 31
19851: PUSH
19852: LD_INT 32
19854: PUSH
19855: LD_INT 33
19857: PUSH
19858: LD_INT 34
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 101
19884: PUSH
19885: LD_INT 102
19887: PUSH
19888: LD_INT 103
19890: PUSH
19891: LD_INT 106
19893: PUSH
19894: LD_INT 108
19896: PUSH
19897: LD_INT 112
19899: PUSH
19900: LD_INT 113
19902: PUSH
19903: LD_INT 114
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: ST_TO_ADDR
19920: GO 20515
19922: LD_INT 17
19924: DOUBLE
19925: EQUAL
19926: IFTRUE 19930
19928: GO 20142
19930: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
19931: LD_ADDR_VAR 0 1
19935: PUSH
19936: LD_INT 1
19938: PUSH
19939: LD_INT 2
19941: PUSH
19942: LD_INT 3
19944: PUSH
19945: LD_INT 4
19947: PUSH
19948: LD_INT 5
19950: PUSH
19951: LD_INT 6
19953: PUSH
19954: LD_INT 7
19956: PUSH
19957: LD_INT 8
19959: PUSH
19960: LD_INT 9
19962: PUSH
19963: LD_INT 10
19965: PUSH
19966: LD_INT 11
19968: PUSH
19969: LD_INT 12
19971: PUSH
19972: LD_INT 13
19974: PUSH
19975: LD_INT 14
19977: PUSH
19978: LD_INT 15
19980: PUSH
19981: LD_INT 16
19983: PUSH
19984: LD_INT 17
19986: PUSH
19987: LD_INT 18
19989: PUSH
19990: LD_INT 19
19992: PUSH
19993: LD_INT 20
19995: PUSH
19996: LD_INT 21
19998: PUSH
19999: LD_INT 22
20001: PUSH
20002: LD_INT 23
20004: PUSH
20005: LD_INT 24
20007: PUSH
20008: LD_INT 25
20010: PUSH
20011: LD_INT 26
20013: PUSH
20014: LD_INT 27
20016: PUSH
20017: LD_INT 28
20019: PUSH
20020: LD_INT 29
20022: PUSH
20023: LD_INT 30
20025: PUSH
20026: LD_INT 31
20028: PUSH
20029: LD_INT 32
20031: PUSH
20032: LD_INT 33
20034: PUSH
20035: LD_INT 34
20037: PUSH
20038: LD_INT 36
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: PUSH
20078: LD_INT 101
20080: PUSH
20081: LD_INT 102
20083: PUSH
20084: LD_INT 103
20086: PUSH
20087: LD_INT 104
20089: PUSH
20090: LD_INT 105
20092: PUSH
20093: LD_INT 106
20095: PUSH
20096: LD_INT 107
20098: PUSH
20099: LD_INT 108
20101: PUSH
20102: LD_INT 109
20104: PUSH
20105: LD_INT 110
20107: PUSH
20108: LD_INT 111
20110: PUSH
20111: LD_INT 112
20113: PUSH
20114: LD_INT 113
20116: PUSH
20117: LD_INT 114
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: ST_TO_ADDR
20140: GO 20515
20142: LD_INT 18
20144: DOUBLE
20145: EQUAL
20146: IFTRUE 20150
20148: GO 20286
20150: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
20151: LD_ADDR_VAR 0 1
20155: PUSH
20156: LD_INT 2
20158: PUSH
20159: LD_INT 4
20161: PUSH
20162: LD_INT 5
20164: PUSH
20165: LD_INT 7
20167: PUSH
20168: LD_INT 11
20170: PUSH
20171: LD_INT 12
20173: PUSH
20174: LD_INT 15
20176: PUSH
20177: LD_INT 16
20179: PUSH
20180: LD_INT 20
20182: PUSH
20183: LD_INT 21
20185: PUSH
20186: LD_INT 22
20188: PUSH
20189: LD_INT 23
20191: PUSH
20192: LD_INT 25
20194: PUSH
20195: LD_INT 26
20197: PUSH
20198: LD_INT 30
20200: PUSH
20201: LD_INT 31
20203: PUSH
20204: LD_INT 32
20206: PUSH
20207: LD_INT 33
20209: PUSH
20210: LD_INT 34
20212: PUSH
20213: LD_INT 35
20215: PUSH
20216: LD_INT 36
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: PUSH
20242: LD_INT 101
20244: PUSH
20245: LD_INT 102
20247: PUSH
20248: LD_INT 103
20250: PUSH
20251: LD_INT 106
20253: PUSH
20254: LD_INT 108
20256: PUSH
20257: LD_INT 112
20259: PUSH
20260: LD_INT 113
20262: PUSH
20263: LD_INT 114
20265: PUSH
20266: LD_INT 115
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: ST_TO_ADDR
20284: GO 20515
20286: LD_INT 19
20288: DOUBLE
20289: EQUAL
20290: IFTRUE 20294
20292: GO 20514
20294: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
20295: LD_ADDR_VAR 0 1
20299: PUSH
20300: LD_INT 1
20302: PUSH
20303: LD_INT 2
20305: PUSH
20306: LD_INT 3
20308: PUSH
20309: LD_INT 4
20311: PUSH
20312: LD_INT 5
20314: PUSH
20315: LD_INT 6
20317: PUSH
20318: LD_INT 7
20320: PUSH
20321: LD_INT 8
20323: PUSH
20324: LD_INT 9
20326: PUSH
20327: LD_INT 10
20329: PUSH
20330: LD_INT 11
20332: PUSH
20333: LD_INT 12
20335: PUSH
20336: LD_INT 13
20338: PUSH
20339: LD_INT 14
20341: PUSH
20342: LD_INT 15
20344: PUSH
20345: LD_INT 16
20347: PUSH
20348: LD_INT 17
20350: PUSH
20351: LD_INT 18
20353: PUSH
20354: LD_INT 19
20356: PUSH
20357: LD_INT 20
20359: PUSH
20360: LD_INT 21
20362: PUSH
20363: LD_INT 22
20365: PUSH
20366: LD_INT 23
20368: PUSH
20369: LD_INT 24
20371: PUSH
20372: LD_INT 25
20374: PUSH
20375: LD_INT 26
20377: PUSH
20378: LD_INT 27
20380: PUSH
20381: LD_INT 28
20383: PUSH
20384: LD_INT 29
20386: PUSH
20387: LD_INT 30
20389: PUSH
20390: LD_INT 31
20392: PUSH
20393: LD_INT 32
20395: PUSH
20396: LD_INT 33
20398: PUSH
20399: LD_INT 34
20401: PUSH
20402: LD_INT 35
20404: PUSH
20405: LD_INT 36
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: PUSH
20446: LD_INT 101
20448: PUSH
20449: LD_INT 102
20451: PUSH
20452: LD_INT 103
20454: PUSH
20455: LD_INT 104
20457: PUSH
20458: LD_INT 105
20460: PUSH
20461: LD_INT 106
20463: PUSH
20464: LD_INT 107
20466: PUSH
20467: LD_INT 108
20469: PUSH
20470: LD_INT 109
20472: PUSH
20473: LD_INT 110
20475: PUSH
20476: LD_INT 111
20478: PUSH
20479: LD_INT 112
20481: PUSH
20482: LD_INT 113
20484: PUSH
20485: LD_INT 114
20487: PUSH
20488: LD_INT 115
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: ST_TO_ADDR
20512: GO 20515
20514: POP
// end else
20515: GO 20734
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
20517: LD_ADDR_VAR 0 1
20521: PUSH
20522: LD_INT 1
20524: PUSH
20525: LD_INT 2
20527: PUSH
20528: LD_INT 3
20530: PUSH
20531: LD_INT 4
20533: PUSH
20534: LD_INT 5
20536: PUSH
20537: LD_INT 6
20539: PUSH
20540: LD_INT 7
20542: PUSH
20543: LD_INT 8
20545: PUSH
20546: LD_INT 9
20548: PUSH
20549: LD_INT 10
20551: PUSH
20552: LD_INT 11
20554: PUSH
20555: LD_INT 12
20557: PUSH
20558: LD_INT 13
20560: PUSH
20561: LD_INT 14
20563: PUSH
20564: LD_INT 15
20566: PUSH
20567: LD_INT 16
20569: PUSH
20570: LD_INT 17
20572: PUSH
20573: LD_INT 18
20575: PUSH
20576: LD_INT 19
20578: PUSH
20579: LD_INT 20
20581: PUSH
20582: LD_INT 21
20584: PUSH
20585: LD_INT 22
20587: PUSH
20588: LD_INT 23
20590: PUSH
20591: LD_INT 24
20593: PUSH
20594: LD_INT 25
20596: PUSH
20597: LD_INT 26
20599: PUSH
20600: LD_INT 27
20602: PUSH
20603: LD_INT 28
20605: PUSH
20606: LD_INT 29
20608: PUSH
20609: LD_INT 30
20611: PUSH
20612: LD_INT 31
20614: PUSH
20615: LD_INT 32
20617: PUSH
20618: LD_INT 33
20620: PUSH
20621: LD_INT 34
20623: PUSH
20624: LD_INT 35
20626: PUSH
20627: LD_INT 36
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 101
20670: PUSH
20671: LD_INT 102
20673: PUSH
20674: LD_INT 103
20676: PUSH
20677: LD_INT 104
20679: PUSH
20680: LD_INT 105
20682: PUSH
20683: LD_INT 106
20685: PUSH
20686: LD_INT 107
20688: PUSH
20689: LD_INT 108
20691: PUSH
20692: LD_INT 109
20694: PUSH
20695: LD_INT 110
20697: PUSH
20698: LD_INT 111
20700: PUSH
20701: LD_INT 112
20703: PUSH
20704: LD_INT 113
20706: PUSH
20707: LD_INT 114
20709: PUSH
20710: LD_INT 115
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: ST_TO_ADDR
// if result then
20734: LD_VAR 0 1
20738: IFFALSE 21027
// begin normal :=  ;
20740: LD_ADDR_VAR 0 3
20744: PUSH
20745: LD_STRING 
20747: ST_TO_ADDR
// hardcore :=  ;
20748: LD_ADDR_VAR 0 4
20752: PUSH
20753: LD_STRING 
20755: ST_TO_ADDR
// for i = 1 to normalCounter do
20756: LD_ADDR_VAR 0 5
20760: PUSH
20761: DOUBLE
20762: LD_INT 1
20764: DEC
20765: ST_TO_ADDR
20766: LD_EXP 51
20770: PUSH
20771: FOR_TO
20772: IFFALSE 20873
// begin tmp := 0 ;
20774: LD_ADDR_VAR 0 2
20778: PUSH
20779: LD_STRING 0
20781: ST_TO_ADDR
// if result [ 1 ] then
20782: LD_VAR 0 1
20786: PUSH
20787: LD_INT 1
20789: ARRAY
20790: IFFALSE 20855
// if result [ 1 ] [ 1 ] = i then
20792: LD_VAR 0 1
20796: PUSH
20797: LD_INT 1
20799: ARRAY
20800: PUSH
20801: LD_INT 1
20803: ARRAY
20804: PUSH
20805: LD_VAR 0 5
20809: EQUAL
20810: IFFALSE 20855
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20812: LD_ADDR_VAR 0 1
20816: PUSH
20817: LD_VAR 0 1
20821: PPUSH
20822: LD_INT 1
20824: PPUSH
20825: LD_VAR 0 1
20829: PUSH
20830: LD_INT 1
20832: ARRAY
20833: PPUSH
20834: LD_INT 1
20836: PPUSH
20837: CALL_OW 3
20841: PPUSH
20842: CALL_OW 1
20846: ST_TO_ADDR
// tmp := 1 ;
20847: LD_ADDR_VAR 0 2
20851: PUSH
20852: LD_STRING 1
20854: ST_TO_ADDR
// end ; normal := normal & tmp ;
20855: LD_ADDR_VAR 0 3
20859: PUSH
20860: LD_VAR 0 3
20864: PUSH
20865: LD_VAR 0 2
20869: STR
20870: ST_TO_ADDR
// end ;
20871: GO 20771
20873: POP
20874: POP
// for i = 1 to hardcoreCounter do
20875: LD_ADDR_VAR 0 5
20879: PUSH
20880: DOUBLE
20881: LD_INT 1
20883: DEC
20884: ST_TO_ADDR
20885: LD_EXP 52
20889: PUSH
20890: FOR_TO
20891: IFFALSE 20996
// begin tmp := 0 ;
20893: LD_ADDR_VAR 0 2
20897: PUSH
20898: LD_STRING 0
20900: ST_TO_ADDR
// if result [ 2 ] then
20901: LD_VAR 0 1
20905: PUSH
20906: LD_INT 2
20908: ARRAY
20909: IFFALSE 20978
// if result [ 2 ] [ 1 ] = 100 + i then
20911: LD_VAR 0 1
20915: PUSH
20916: LD_INT 2
20918: ARRAY
20919: PUSH
20920: LD_INT 1
20922: ARRAY
20923: PUSH
20924: LD_INT 100
20926: PUSH
20927: LD_VAR 0 5
20931: PLUS
20932: EQUAL
20933: IFFALSE 20978
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20935: LD_ADDR_VAR 0 1
20939: PUSH
20940: LD_VAR 0 1
20944: PPUSH
20945: LD_INT 2
20947: PPUSH
20948: LD_VAR 0 1
20952: PUSH
20953: LD_INT 2
20955: ARRAY
20956: PPUSH
20957: LD_INT 1
20959: PPUSH
20960: CALL_OW 3
20964: PPUSH
20965: CALL_OW 1
20969: ST_TO_ADDR
// tmp := 1 ;
20970: LD_ADDR_VAR 0 2
20974: PUSH
20975: LD_STRING 1
20977: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20978: LD_ADDR_VAR 0 4
20982: PUSH
20983: LD_VAR 0 4
20987: PUSH
20988: LD_VAR 0 2
20992: STR
20993: ST_TO_ADDR
// end ;
20994: GO 20890
20996: POP
20997: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
20998: LD_STRING getStreamItemsFromMission("
21000: PUSH
21001: LD_VAR 0 3
21005: STR
21006: PUSH
21007: LD_STRING ","
21009: STR
21010: PUSH
21011: LD_VAR 0 4
21015: STR
21016: PUSH
21017: LD_STRING ")
21019: STR
21020: PPUSH
21021: CALL_OW 559
// end else
21025: GO 21034
// ToLua ( getStreamItemsFromMission("","") ) ;
21027: LD_STRING getStreamItemsFromMission("","")
21029: PPUSH
21030: CALL_OW 559
// end ;
21034: LD_VAR 0 1
21038: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21039: LD_EXP 50
21043: PUSH
21044: LD_EXP 55
21048: AND
21049: IFFALSE 21173
21051: GO 21053
21053: DISABLE
21054: LD_INT 0
21056: PPUSH
21057: PPUSH
// begin enable ;
21058: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21059: LD_ADDR_VAR 0 2
21063: PUSH
21064: LD_INT 22
21066: PUSH
21067: LD_OWVAR 2
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 2
21078: PUSH
21079: LD_INT 34
21081: PUSH
21082: LD_INT 7
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: LD_INT 34
21091: PUSH
21092: LD_INT 45
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 34
21101: PUSH
21102: LD_INT 28
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 34
21111: PUSH
21112: LD_INT 47
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PPUSH
21130: CALL_OW 69
21134: ST_TO_ADDR
// if not tmp then
21135: LD_VAR 0 2
21139: NOT
21140: IFFALSE 21144
// exit ;
21142: GO 21173
// for i in tmp do
21144: LD_ADDR_VAR 0 1
21148: PUSH
21149: LD_VAR 0 2
21153: PUSH
21154: FOR_IN
21155: IFFALSE 21171
// begin SetLives ( i , 0 ) ;
21157: LD_VAR 0 1
21161: PPUSH
21162: LD_INT 0
21164: PPUSH
21165: CALL_OW 234
// end ;
21169: GO 21154
21171: POP
21172: POP
// end ;
21173: PPOPN 2
21175: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21176: LD_EXP 50
21180: PUSH
21181: LD_EXP 56
21185: AND
21186: IFFALSE 21270
21188: GO 21190
21190: DISABLE
21191: LD_INT 0
21193: PPUSH
21194: PPUSH
// begin enable ;
21195: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21196: LD_ADDR_VAR 0 2
21200: PUSH
21201: LD_INT 22
21203: PUSH
21204: LD_OWVAR 2
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: LD_INT 32
21215: PUSH
21216: LD_INT 3
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PPUSH
21227: CALL_OW 69
21231: ST_TO_ADDR
// if not tmp then
21232: LD_VAR 0 2
21236: NOT
21237: IFFALSE 21241
// exit ;
21239: GO 21270
// for i in tmp do
21241: LD_ADDR_VAR 0 1
21245: PUSH
21246: LD_VAR 0 2
21250: PUSH
21251: FOR_IN
21252: IFFALSE 21268
// begin SetLives ( i , 0 ) ;
21254: LD_VAR 0 1
21258: PPUSH
21259: LD_INT 0
21261: PPUSH
21262: CALL_OW 234
// end ;
21266: GO 21251
21268: POP
21269: POP
// end ;
21270: PPOPN 2
21272: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21273: LD_EXP 50
21277: PUSH
21278: LD_EXP 53
21282: AND
21283: IFFALSE 21376
21285: GO 21287
21287: DISABLE
21288: LD_INT 0
21290: PPUSH
// begin enable ;
21291: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21292: LD_ADDR_VAR 0 1
21296: PUSH
21297: LD_INT 22
21299: PUSH
21300: LD_OWVAR 2
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 2
21311: PUSH
21312: LD_INT 25
21314: PUSH
21315: LD_INT 5
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: LD_INT 25
21324: PUSH
21325: LD_INT 9
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 25
21334: PUSH
21335: LD_INT 8
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PPUSH
21352: CALL_OW 69
21356: PUSH
21357: FOR_IN
21358: IFFALSE 21374
// begin SetClass ( i , 1 ) ;
21360: LD_VAR 0 1
21364: PPUSH
21365: LD_INT 1
21367: PPUSH
21368: CALL_OW 336
// end ;
21372: GO 21357
21374: POP
21375: POP
// end ;
21376: PPOPN 1
21378: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21379: LD_EXP 50
21383: PUSH
21384: LD_EXP 54
21388: AND
21389: PUSH
21390: LD_OWVAR 65
21394: PUSH
21395: LD_INT 7
21397: LESS
21398: AND
21399: IFFALSE 21413
21401: GO 21403
21403: DISABLE
// begin enable ;
21404: ENABLE
// game_speed := 7 ;
21405: LD_ADDR_OWVAR 65
21409: PUSH
21410: LD_INT 7
21412: ST_TO_ADDR
// end ;
21413: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21414: LD_EXP 50
21418: PUSH
21419: LD_EXP 57
21423: AND
21424: IFFALSE 21626
21426: GO 21428
21428: DISABLE
21429: LD_INT 0
21431: PPUSH
21432: PPUSH
21433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21434: LD_ADDR_VAR 0 3
21438: PUSH
21439: LD_INT 81
21441: PUSH
21442: LD_OWVAR 2
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: LD_INT 21
21453: PUSH
21454: LD_INT 1
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PPUSH
21465: CALL_OW 69
21469: ST_TO_ADDR
// if not tmp then
21470: LD_VAR 0 3
21474: NOT
21475: IFFALSE 21479
// exit ;
21477: GO 21626
// if tmp > 5 then
21479: LD_VAR 0 3
21483: PUSH
21484: LD_INT 5
21486: GREATER
21487: IFFALSE 21499
// k := 5 else
21489: LD_ADDR_VAR 0 2
21493: PUSH
21494: LD_INT 5
21496: ST_TO_ADDR
21497: GO 21509
// k := tmp ;
21499: LD_ADDR_VAR 0 2
21503: PUSH
21504: LD_VAR 0 3
21508: ST_TO_ADDR
// for i := 1 to k do
21509: LD_ADDR_VAR 0 1
21513: PUSH
21514: DOUBLE
21515: LD_INT 1
21517: DEC
21518: ST_TO_ADDR
21519: LD_VAR 0 2
21523: PUSH
21524: FOR_TO
21525: IFFALSE 21624
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21527: LD_VAR 0 3
21531: PUSH
21532: LD_VAR 0 1
21536: ARRAY
21537: PPUSH
21538: LD_VAR 0 1
21542: PUSH
21543: LD_INT 4
21545: MOD
21546: PUSH
21547: LD_INT 1
21549: PLUS
21550: PPUSH
21551: CALL_OW 259
21555: PUSH
21556: LD_INT 10
21558: LESS
21559: IFFALSE 21622
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21561: LD_VAR 0 3
21565: PUSH
21566: LD_VAR 0 1
21570: ARRAY
21571: PPUSH
21572: LD_VAR 0 1
21576: PUSH
21577: LD_INT 4
21579: MOD
21580: PUSH
21581: LD_INT 1
21583: PLUS
21584: PPUSH
21585: LD_VAR 0 3
21589: PUSH
21590: LD_VAR 0 1
21594: ARRAY
21595: PPUSH
21596: LD_VAR 0 1
21600: PUSH
21601: LD_INT 4
21603: MOD
21604: PUSH
21605: LD_INT 1
21607: PLUS
21608: PPUSH
21609: CALL_OW 259
21613: PUSH
21614: LD_INT 1
21616: PLUS
21617: PPUSH
21618: CALL_OW 237
21622: GO 21524
21624: POP
21625: POP
// end ;
21626: PPOPN 3
21628: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21629: LD_EXP 50
21633: PUSH
21634: LD_EXP 58
21638: AND
21639: IFFALSE 21659
21641: GO 21643
21643: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21644: LD_INT 4
21646: PPUSH
21647: LD_OWVAR 2
21651: PPUSH
21652: LD_INT 0
21654: PPUSH
21655: CALL_OW 324
21659: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21660: LD_EXP 50
21664: PUSH
21665: LD_EXP 87
21669: AND
21670: IFFALSE 21690
21672: GO 21674
21674: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21675: LD_INT 19
21677: PPUSH
21678: LD_OWVAR 2
21682: PPUSH
21683: LD_INT 0
21685: PPUSH
21686: CALL_OW 324
21690: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21691: LD_EXP 50
21695: PUSH
21696: LD_EXP 59
21700: AND
21701: IFFALSE 21803
21703: GO 21705
21705: DISABLE
21706: LD_INT 0
21708: PPUSH
21709: PPUSH
// begin enable ;
21710: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21711: LD_ADDR_VAR 0 2
21715: PUSH
21716: LD_INT 22
21718: PUSH
21719: LD_OWVAR 2
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 2
21730: PUSH
21731: LD_INT 34
21733: PUSH
21734: LD_INT 11
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: LD_INT 34
21743: PUSH
21744: LD_INT 30
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: LIST
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PPUSH
21760: CALL_OW 69
21764: ST_TO_ADDR
// if not tmp then
21765: LD_VAR 0 2
21769: NOT
21770: IFFALSE 21774
// exit ;
21772: GO 21803
// for i in tmp do
21774: LD_ADDR_VAR 0 1
21778: PUSH
21779: LD_VAR 0 2
21783: PUSH
21784: FOR_IN
21785: IFFALSE 21801
// begin SetLives ( i , 0 ) ;
21787: LD_VAR 0 1
21791: PPUSH
21792: LD_INT 0
21794: PPUSH
21795: CALL_OW 234
// end ;
21799: GO 21784
21801: POP
21802: POP
// end ;
21803: PPOPN 2
21805: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21806: LD_EXP 50
21810: PUSH
21811: LD_EXP 60
21815: AND
21816: IFFALSE 21836
21818: GO 21820
21820: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21821: LD_INT 32
21823: PPUSH
21824: LD_OWVAR 2
21828: PPUSH
21829: LD_INT 0
21831: PPUSH
21832: CALL_OW 324
21836: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21837: LD_EXP 50
21841: PUSH
21842: LD_EXP 61
21846: AND
21847: IFFALSE 22028
21849: GO 21851
21851: DISABLE
21852: LD_INT 0
21854: PPUSH
21855: PPUSH
21856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21857: LD_ADDR_VAR 0 2
21861: PUSH
21862: LD_INT 22
21864: PUSH
21865: LD_OWVAR 2
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: PUSH
21874: LD_INT 33
21876: PUSH
21877: LD_INT 3
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PPUSH
21888: CALL_OW 69
21892: ST_TO_ADDR
// if not tmp then
21893: LD_VAR 0 2
21897: NOT
21898: IFFALSE 21902
// exit ;
21900: GO 22028
// side := 0 ;
21902: LD_ADDR_VAR 0 3
21906: PUSH
21907: LD_INT 0
21909: ST_TO_ADDR
// for i := 1 to 8 do
21910: LD_ADDR_VAR 0 1
21914: PUSH
21915: DOUBLE
21916: LD_INT 1
21918: DEC
21919: ST_TO_ADDR
21920: LD_INT 8
21922: PUSH
21923: FOR_TO
21924: IFFALSE 21972
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21926: LD_OWVAR 2
21930: PUSH
21931: LD_VAR 0 1
21935: NONEQUAL
21936: PUSH
21937: LD_OWVAR 2
21941: PPUSH
21942: LD_VAR 0 1
21946: PPUSH
21947: CALL_OW 81
21951: PUSH
21952: LD_INT 2
21954: EQUAL
21955: AND
21956: IFFALSE 21970
// begin side := i ;
21958: LD_ADDR_VAR 0 3
21962: PUSH
21963: LD_VAR 0 1
21967: ST_TO_ADDR
// break ;
21968: GO 21972
// end ;
21970: GO 21923
21972: POP
21973: POP
// if not side then
21974: LD_VAR 0 3
21978: NOT
21979: IFFALSE 21983
// exit ;
21981: GO 22028
// for i := 1 to tmp do
21983: LD_ADDR_VAR 0 1
21987: PUSH
21988: DOUBLE
21989: LD_INT 1
21991: DEC
21992: ST_TO_ADDR
21993: LD_VAR 0 2
21997: PUSH
21998: FOR_TO
21999: IFFALSE 22026
// if Prob ( 60 ) then
22001: LD_INT 60
22003: PPUSH
22004: CALL_OW 13
22008: IFFALSE 22024
// SetSide ( i , side ) ;
22010: LD_VAR 0 1
22014: PPUSH
22015: LD_VAR 0 3
22019: PPUSH
22020: CALL_OW 235
22024: GO 21998
22026: POP
22027: POP
// end ;
22028: PPOPN 3
22030: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22031: LD_EXP 50
22035: PUSH
22036: LD_EXP 63
22040: AND
22041: IFFALSE 22160
22043: GO 22045
22045: DISABLE
22046: LD_INT 0
22048: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22049: LD_ADDR_VAR 0 1
22053: PUSH
22054: LD_INT 22
22056: PUSH
22057: LD_OWVAR 2
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 21
22068: PUSH
22069: LD_INT 1
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 3
22078: PUSH
22079: LD_INT 23
22081: PUSH
22082: LD_INT 0
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: LIST
22097: PPUSH
22098: CALL_OW 69
22102: PUSH
22103: FOR_IN
22104: IFFALSE 22158
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22106: LD_VAR 0 1
22110: PPUSH
22111: CALL_OW 257
22115: PUSH
22116: LD_INT 1
22118: PUSH
22119: LD_INT 2
22121: PUSH
22122: LD_INT 3
22124: PUSH
22125: LD_INT 4
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: IN
22134: IFFALSE 22156
// SetClass ( un , rand ( 1 , 4 ) ) ;
22136: LD_VAR 0 1
22140: PPUSH
22141: LD_INT 1
22143: PPUSH
22144: LD_INT 4
22146: PPUSH
22147: CALL_OW 12
22151: PPUSH
22152: CALL_OW 336
22156: GO 22103
22158: POP
22159: POP
// end ;
22160: PPOPN 1
22162: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22163: LD_EXP 50
22167: PUSH
22168: LD_EXP 62
22172: AND
22173: IFFALSE 22252
22175: GO 22177
22177: DISABLE
22178: LD_INT 0
22180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22181: LD_ADDR_VAR 0 1
22185: PUSH
22186: LD_INT 22
22188: PUSH
22189: LD_OWVAR 2
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 21
22200: PUSH
22201: LD_INT 3
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PPUSH
22212: CALL_OW 69
22216: ST_TO_ADDR
// if not tmp then
22217: LD_VAR 0 1
22221: NOT
22222: IFFALSE 22226
// exit ;
22224: GO 22252
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22226: LD_VAR 0 1
22230: PUSH
22231: LD_INT 1
22233: PPUSH
22234: LD_VAR 0 1
22238: PPUSH
22239: CALL_OW 12
22243: ARRAY
22244: PPUSH
22245: LD_INT 100
22247: PPUSH
22248: CALL_OW 234
// end ;
22252: PPOPN 1
22254: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22255: LD_EXP 50
22259: PUSH
22260: LD_EXP 64
22264: AND
22265: IFFALSE 22363
22267: GO 22269
22269: DISABLE
22270: LD_INT 0
22272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22273: LD_ADDR_VAR 0 1
22277: PUSH
22278: LD_INT 22
22280: PUSH
22281: LD_OWVAR 2
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 21
22292: PUSH
22293: LD_INT 1
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PPUSH
22304: CALL_OW 69
22308: ST_TO_ADDR
// if not tmp then
22309: LD_VAR 0 1
22313: NOT
22314: IFFALSE 22318
// exit ;
22316: GO 22363
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22318: LD_VAR 0 1
22322: PUSH
22323: LD_INT 1
22325: PPUSH
22326: LD_VAR 0 1
22330: PPUSH
22331: CALL_OW 12
22335: ARRAY
22336: PPUSH
22337: LD_INT 1
22339: PPUSH
22340: LD_INT 4
22342: PPUSH
22343: CALL_OW 12
22347: PPUSH
22348: LD_INT 3000
22350: PPUSH
22351: LD_INT 9000
22353: PPUSH
22354: CALL_OW 12
22358: PPUSH
22359: CALL_OW 492
// end ;
22363: PPOPN 1
22365: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22366: LD_EXP 50
22370: PUSH
22371: LD_EXP 65
22375: AND
22376: IFFALSE 22396
22378: GO 22380
22380: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22381: LD_INT 1
22383: PPUSH
22384: LD_OWVAR 2
22388: PPUSH
22389: LD_INT 0
22391: PPUSH
22392: CALL_OW 324
22396: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22397: LD_EXP 50
22401: PUSH
22402: LD_EXP 66
22406: AND
22407: IFFALSE 22490
22409: GO 22411
22411: DISABLE
22412: LD_INT 0
22414: PPUSH
22415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22416: LD_ADDR_VAR 0 2
22420: PUSH
22421: LD_INT 22
22423: PUSH
22424: LD_OWVAR 2
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 21
22435: PUSH
22436: LD_INT 3
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: PPUSH
22447: CALL_OW 69
22451: ST_TO_ADDR
// if not tmp then
22452: LD_VAR 0 2
22456: NOT
22457: IFFALSE 22461
// exit ;
22459: GO 22490
// for i in tmp do
22461: LD_ADDR_VAR 0 1
22465: PUSH
22466: LD_VAR 0 2
22470: PUSH
22471: FOR_IN
22472: IFFALSE 22488
// SetBLevel ( i , 10 ) ;
22474: LD_VAR 0 1
22478: PPUSH
22479: LD_INT 10
22481: PPUSH
22482: CALL_OW 241
22486: GO 22471
22488: POP
22489: POP
// end ;
22490: PPOPN 2
22492: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22493: LD_EXP 50
22497: PUSH
22498: LD_EXP 67
22502: AND
22503: IFFALSE 22614
22505: GO 22507
22507: DISABLE
22508: LD_INT 0
22510: PPUSH
22511: PPUSH
22512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22513: LD_ADDR_VAR 0 3
22517: PUSH
22518: LD_INT 22
22520: PUSH
22521: LD_OWVAR 2
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: LD_INT 25
22532: PUSH
22533: LD_INT 1
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: PPUSH
22544: CALL_OW 69
22548: ST_TO_ADDR
// if not tmp then
22549: LD_VAR 0 3
22553: NOT
22554: IFFALSE 22558
// exit ;
22556: GO 22614
// un := tmp [ rand ( 1 , tmp ) ] ;
22558: LD_ADDR_VAR 0 2
22562: PUSH
22563: LD_VAR 0 3
22567: PUSH
22568: LD_INT 1
22570: PPUSH
22571: LD_VAR 0 3
22575: PPUSH
22576: CALL_OW 12
22580: ARRAY
22581: ST_TO_ADDR
// if Crawls ( un ) then
22582: LD_VAR 0 2
22586: PPUSH
22587: CALL_OW 318
22591: IFFALSE 22602
// ComWalk ( un ) ;
22593: LD_VAR 0 2
22597: PPUSH
22598: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22602: LD_VAR 0 2
22606: PPUSH
22607: LD_INT 5
22609: PPUSH
22610: CALL_OW 336
// end ;
22614: PPOPN 3
22616: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
22617: LD_EXP 50
22621: PUSH
22622: LD_EXP 68
22626: AND
22627: PUSH
22628: LD_OWVAR 67
22632: PUSH
22633: LD_INT 3
22635: LESS
22636: AND
22637: IFFALSE 22656
22639: GO 22641
22641: DISABLE
// Difficulty := Difficulty + 1 ;
22642: LD_ADDR_OWVAR 67
22646: PUSH
22647: LD_OWVAR 67
22651: PUSH
22652: LD_INT 1
22654: PLUS
22655: ST_TO_ADDR
22656: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22657: LD_EXP 50
22661: PUSH
22662: LD_EXP 69
22666: AND
22667: IFFALSE 22770
22669: GO 22671
22671: DISABLE
22672: LD_INT 0
22674: PPUSH
// begin for i := 1 to 5 do
22675: LD_ADDR_VAR 0 1
22679: PUSH
22680: DOUBLE
22681: LD_INT 1
22683: DEC
22684: ST_TO_ADDR
22685: LD_INT 5
22687: PUSH
22688: FOR_TO
22689: IFFALSE 22768
// begin uc_nation := nation_nature ;
22691: LD_ADDR_OWVAR 21
22695: PUSH
22696: LD_INT 0
22698: ST_TO_ADDR
// uc_side := 0 ;
22699: LD_ADDR_OWVAR 20
22703: PUSH
22704: LD_INT 0
22706: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22707: LD_ADDR_OWVAR 29
22711: PUSH
22712: LD_INT 12
22714: PUSH
22715: LD_INT 12
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: ST_TO_ADDR
// hc_agressivity := 20 ;
22722: LD_ADDR_OWVAR 35
22726: PUSH
22727: LD_INT 20
22729: ST_TO_ADDR
// hc_class := class_tiger ;
22730: LD_ADDR_OWVAR 28
22734: PUSH
22735: LD_INT 14
22737: ST_TO_ADDR
// hc_gallery :=  ;
22738: LD_ADDR_OWVAR 33
22742: PUSH
22743: LD_STRING 
22745: ST_TO_ADDR
// hc_name :=  ;
22746: LD_ADDR_OWVAR 26
22750: PUSH
22751: LD_STRING 
22753: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22754: CALL_OW 44
22758: PPUSH
22759: LD_INT 0
22761: PPUSH
22762: CALL_OW 51
// end ;
22766: GO 22688
22768: POP
22769: POP
// end ;
22770: PPOPN 1
22772: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22773: LD_EXP 50
22777: PUSH
22778: LD_EXP 70
22782: AND
22783: IFFALSE 22792
22785: GO 22787
22787: DISABLE
// StreamSibBomb ;
22788: CALL 22793 0 0
22792: END
// export function StreamSibBomb ; var i , x , y ; begin
22793: LD_INT 0
22795: PPUSH
22796: PPUSH
22797: PPUSH
22798: PPUSH
// result := false ;
22799: LD_ADDR_VAR 0 1
22803: PUSH
22804: LD_INT 0
22806: ST_TO_ADDR
// for i := 1 to 16 do
22807: LD_ADDR_VAR 0 2
22811: PUSH
22812: DOUBLE
22813: LD_INT 1
22815: DEC
22816: ST_TO_ADDR
22817: LD_INT 16
22819: PUSH
22820: FOR_TO
22821: IFFALSE 23020
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22823: LD_ADDR_VAR 0 3
22827: PUSH
22828: LD_INT 10
22830: PUSH
22831: LD_INT 20
22833: PUSH
22834: LD_INT 30
22836: PUSH
22837: LD_INT 40
22839: PUSH
22840: LD_INT 50
22842: PUSH
22843: LD_INT 60
22845: PUSH
22846: LD_INT 70
22848: PUSH
22849: LD_INT 80
22851: PUSH
22852: LD_INT 90
22854: PUSH
22855: LD_INT 100
22857: PUSH
22858: LD_INT 110
22860: PUSH
22861: LD_INT 120
22863: PUSH
22864: LD_INT 130
22866: PUSH
22867: LD_INT 140
22869: PUSH
22870: LD_INT 150
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 1
22892: PPUSH
22893: LD_INT 15
22895: PPUSH
22896: CALL_OW 12
22900: ARRAY
22901: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22902: LD_ADDR_VAR 0 4
22906: PUSH
22907: LD_INT 10
22909: PUSH
22910: LD_INT 20
22912: PUSH
22913: LD_INT 30
22915: PUSH
22916: LD_INT 40
22918: PUSH
22919: LD_INT 50
22921: PUSH
22922: LD_INT 60
22924: PUSH
22925: LD_INT 70
22927: PUSH
22928: LD_INT 80
22930: PUSH
22931: LD_INT 90
22933: PUSH
22934: LD_INT 100
22936: PUSH
22937: LD_INT 110
22939: PUSH
22940: LD_INT 120
22942: PUSH
22943: LD_INT 130
22945: PUSH
22946: LD_INT 140
22948: PUSH
22949: LD_INT 150
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 1
22971: PPUSH
22972: LD_INT 15
22974: PPUSH
22975: CALL_OW 12
22979: ARRAY
22980: ST_TO_ADDR
// if ValidHex ( x , y ) then
22981: LD_VAR 0 3
22985: PPUSH
22986: LD_VAR 0 4
22990: PPUSH
22991: CALL_OW 488
22995: IFFALSE 23018
// begin result := [ x , y ] ;
22997: LD_ADDR_VAR 0 1
23001: PUSH
23002: LD_VAR 0 3
23006: PUSH
23007: LD_VAR 0 4
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: ST_TO_ADDR
// break ;
23016: GO 23020
// end ; end ;
23018: GO 22820
23020: POP
23021: POP
// if result then
23022: LD_VAR 0 1
23026: IFFALSE 23086
// begin ToLua ( playSibBomb() ) ;
23028: LD_STRING playSibBomb()
23030: PPUSH
23031: CALL_OW 559
// wait ( 0 0$14 ) ;
23035: LD_INT 490
23037: PPUSH
23038: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23042: LD_VAR 0 1
23046: PUSH
23047: LD_INT 1
23049: ARRAY
23050: PPUSH
23051: LD_VAR 0 1
23055: PUSH
23056: LD_INT 2
23058: ARRAY
23059: PPUSH
23060: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23064: LD_VAR 0 1
23068: PUSH
23069: LD_INT 1
23071: ARRAY
23072: PPUSH
23073: LD_VAR 0 1
23077: PUSH
23078: LD_INT 2
23080: ARRAY
23081: PPUSH
23082: CALL_OW 429
// end ; end ;
23086: LD_VAR 0 1
23090: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23091: LD_EXP 50
23095: PUSH
23096: LD_EXP 72
23100: AND
23101: IFFALSE 23113
23103: GO 23105
23105: DISABLE
// YouLost (  ) ;
23106: LD_STRING 
23108: PPUSH
23109: CALL_OW 104
23113: END
// every 0 0$1 trigger StreamModeActive and sFog do
23114: LD_EXP 50
23118: PUSH
23119: LD_EXP 71
23123: AND
23124: IFFALSE 23138
23126: GO 23128
23128: DISABLE
// FogOff ( your_side ) ;
23129: LD_OWVAR 2
23133: PPUSH
23134: CALL_OW 344
23138: END
// every 0 0$1 trigger StreamModeActive and sSun do
23139: LD_EXP 50
23143: PUSH
23144: LD_EXP 73
23148: AND
23149: IFFALSE 23177
23151: GO 23153
23153: DISABLE
// begin solar_recharge_percent := 0 ;
23154: LD_ADDR_OWVAR 79
23158: PUSH
23159: LD_INT 0
23161: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23162: LD_INT 10500
23164: PPUSH
23165: CALL_OW 67
// solar_recharge_percent := 100 ;
23169: LD_ADDR_OWVAR 79
23173: PUSH
23174: LD_INT 100
23176: ST_TO_ADDR
// end ;
23177: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23178: LD_EXP 50
23182: PUSH
23183: LD_EXP 74
23187: AND
23188: IFFALSE 23427
23190: GO 23192
23192: DISABLE
23193: LD_INT 0
23195: PPUSH
23196: PPUSH
23197: PPUSH
// begin tmp := [ ] ;
23198: LD_ADDR_VAR 0 3
23202: PUSH
23203: EMPTY
23204: ST_TO_ADDR
// for i := 1 to 6 do
23205: LD_ADDR_VAR 0 1
23209: PUSH
23210: DOUBLE
23211: LD_INT 1
23213: DEC
23214: ST_TO_ADDR
23215: LD_INT 6
23217: PUSH
23218: FOR_TO
23219: IFFALSE 23324
// begin uc_nation := nation_nature ;
23221: LD_ADDR_OWVAR 21
23225: PUSH
23226: LD_INT 0
23228: ST_TO_ADDR
// uc_side := 0 ;
23229: LD_ADDR_OWVAR 20
23233: PUSH
23234: LD_INT 0
23236: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23237: LD_ADDR_OWVAR 29
23241: PUSH
23242: LD_INT 12
23244: PUSH
23245: LD_INT 12
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: ST_TO_ADDR
// hc_agressivity := 20 ;
23252: LD_ADDR_OWVAR 35
23256: PUSH
23257: LD_INT 20
23259: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23260: LD_ADDR_OWVAR 28
23264: PUSH
23265: LD_INT 17
23267: ST_TO_ADDR
// hc_gallery :=  ;
23268: LD_ADDR_OWVAR 33
23272: PUSH
23273: LD_STRING 
23275: ST_TO_ADDR
// hc_name :=  ;
23276: LD_ADDR_OWVAR 26
23280: PUSH
23281: LD_STRING 
23283: ST_TO_ADDR
// un := CreateHuman ;
23284: LD_ADDR_VAR 0 2
23288: PUSH
23289: CALL_OW 44
23293: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23294: LD_VAR 0 2
23298: PPUSH
23299: LD_INT 1
23301: PPUSH
23302: CALL_OW 51
// tmp := tmp ^ un ;
23306: LD_ADDR_VAR 0 3
23310: PUSH
23311: LD_VAR 0 3
23315: PUSH
23316: LD_VAR 0 2
23320: ADD
23321: ST_TO_ADDR
// end ;
23322: GO 23218
23324: POP
23325: POP
// repeat wait ( 0 0$1 ) ;
23326: LD_INT 35
23328: PPUSH
23329: CALL_OW 67
// for un in tmp do
23333: LD_ADDR_VAR 0 2
23337: PUSH
23338: LD_VAR 0 3
23342: PUSH
23343: FOR_IN
23344: IFFALSE 23418
// begin if IsDead ( un ) then
23346: LD_VAR 0 2
23350: PPUSH
23351: CALL_OW 301
23355: IFFALSE 23375
// begin tmp := tmp diff un ;
23357: LD_ADDR_VAR 0 3
23361: PUSH
23362: LD_VAR 0 3
23366: PUSH
23367: LD_VAR 0 2
23371: DIFF
23372: ST_TO_ADDR
// continue ;
23373: GO 23343
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23375: LD_VAR 0 2
23379: PPUSH
23380: LD_INT 3
23382: PUSH
23383: LD_INT 22
23385: PUSH
23386: LD_INT 0
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PPUSH
23397: CALL_OW 69
23401: PPUSH
23402: LD_VAR 0 2
23406: PPUSH
23407: CALL_OW 74
23411: PPUSH
23412: CALL_OW 115
// end ;
23416: GO 23343
23418: POP
23419: POP
// until not tmp ;
23420: LD_VAR 0 3
23424: NOT
23425: IFFALSE 23326
// end ;
23427: PPOPN 3
23429: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23430: LD_EXP 50
23434: PUSH
23435: LD_EXP 75
23439: AND
23440: IFFALSE 23494
23442: GO 23444
23444: DISABLE
// begin ToLua ( displayTroll(); ) ;
23445: LD_STRING displayTroll();
23447: PPUSH
23448: CALL_OW 559
// wait ( 3 3$00 ) ;
23452: LD_INT 6300
23454: PPUSH
23455: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23459: LD_STRING hideTroll();
23461: PPUSH
23462: CALL_OW 559
// wait ( 1 1$00 ) ;
23466: LD_INT 2100
23468: PPUSH
23469: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23473: LD_STRING displayTroll();
23475: PPUSH
23476: CALL_OW 559
// wait ( 1 1$00 ) ;
23480: LD_INT 2100
23482: PPUSH
23483: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23487: LD_STRING hideTroll();
23489: PPUSH
23490: CALL_OW 559
// end ;
23494: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23495: LD_EXP 50
23499: PUSH
23500: LD_EXP 76
23504: AND
23505: IFFALSE 23568
23507: GO 23509
23509: DISABLE
23510: LD_INT 0
23512: PPUSH
// begin p := 0 ;
23513: LD_ADDR_VAR 0 1
23517: PUSH
23518: LD_INT 0
23520: ST_TO_ADDR
// repeat game_speed := 1 ;
23521: LD_ADDR_OWVAR 65
23525: PUSH
23526: LD_INT 1
23528: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23529: LD_INT 35
23531: PPUSH
23532: CALL_OW 67
// p := p + 1 ;
23536: LD_ADDR_VAR 0 1
23540: PUSH
23541: LD_VAR 0 1
23545: PUSH
23546: LD_INT 1
23548: PLUS
23549: ST_TO_ADDR
// until p >= 60 ;
23550: LD_VAR 0 1
23554: PUSH
23555: LD_INT 60
23557: GREATEREQUAL
23558: IFFALSE 23521
// game_speed := 4 ;
23560: LD_ADDR_OWVAR 65
23564: PUSH
23565: LD_INT 4
23567: ST_TO_ADDR
// end ;
23568: PPOPN 1
23570: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23571: LD_EXP 50
23575: PUSH
23576: LD_EXP 77
23580: AND
23581: IFFALSE 23727
23583: GO 23585
23585: DISABLE
23586: LD_INT 0
23588: PPUSH
23589: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23590: LD_ADDR_VAR 0 1
23594: PUSH
23595: LD_INT 22
23597: PUSH
23598: LD_OWVAR 2
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PUSH
23607: LD_INT 2
23609: PUSH
23610: LD_INT 30
23612: PUSH
23613: LD_INT 0
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 30
23622: PUSH
23623: LD_INT 1
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: LIST
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PPUSH
23639: CALL_OW 69
23643: ST_TO_ADDR
// if not depot then
23644: LD_VAR 0 1
23648: NOT
23649: IFFALSE 23653
// exit ;
23651: GO 23727
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23653: LD_ADDR_VAR 0 2
23657: PUSH
23658: LD_VAR 0 1
23662: PUSH
23663: LD_INT 1
23665: PPUSH
23666: LD_VAR 0 1
23670: PPUSH
23671: CALL_OW 12
23675: ARRAY
23676: PPUSH
23677: CALL_OW 274
23681: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23682: LD_VAR 0 2
23686: PPUSH
23687: LD_INT 1
23689: PPUSH
23690: LD_INT 0
23692: PPUSH
23693: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23697: LD_VAR 0 2
23701: PPUSH
23702: LD_INT 2
23704: PPUSH
23705: LD_INT 0
23707: PPUSH
23708: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23712: LD_VAR 0 2
23716: PPUSH
23717: LD_INT 3
23719: PPUSH
23720: LD_INT 0
23722: PPUSH
23723: CALL_OW 277
// end ;
23727: PPOPN 2
23729: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23730: LD_EXP 50
23734: PUSH
23735: LD_EXP 78
23739: AND
23740: IFFALSE 23837
23742: GO 23744
23744: DISABLE
23745: LD_INT 0
23747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23748: LD_ADDR_VAR 0 1
23752: PUSH
23753: LD_INT 22
23755: PUSH
23756: LD_OWVAR 2
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 21
23767: PUSH
23768: LD_INT 1
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: LD_INT 3
23777: PUSH
23778: LD_INT 23
23780: PUSH
23781: LD_INT 0
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: LIST
23796: PPUSH
23797: CALL_OW 69
23801: ST_TO_ADDR
// if not tmp then
23802: LD_VAR 0 1
23806: NOT
23807: IFFALSE 23811
// exit ;
23809: GO 23837
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23811: LD_VAR 0 1
23815: PUSH
23816: LD_INT 1
23818: PPUSH
23819: LD_VAR 0 1
23823: PPUSH
23824: CALL_OW 12
23828: ARRAY
23829: PPUSH
23830: LD_INT 200
23832: PPUSH
23833: CALL_OW 234
// end ;
23837: PPOPN 1
23839: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23840: LD_EXP 50
23844: PUSH
23845: LD_EXP 79
23849: AND
23850: IFFALSE 23929
23852: GO 23854
23854: DISABLE
23855: LD_INT 0
23857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23858: LD_ADDR_VAR 0 1
23862: PUSH
23863: LD_INT 22
23865: PUSH
23866: LD_OWVAR 2
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 21
23877: PUSH
23878: LD_INT 2
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PPUSH
23889: CALL_OW 69
23893: ST_TO_ADDR
// if not tmp then
23894: LD_VAR 0 1
23898: NOT
23899: IFFALSE 23903
// exit ;
23901: GO 23929
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23903: LD_VAR 0 1
23907: PUSH
23908: LD_INT 1
23910: PPUSH
23911: LD_VAR 0 1
23915: PPUSH
23916: CALL_OW 12
23920: ARRAY
23921: PPUSH
23922: LD_INT 60
23924: PPUSH
23925: CALL_OW 234
// end ;
23929: PPOPN 1
23931: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23932: LD_EXP 50
23936: PUSH
23937: LD_EXP 80
23941: AND
23942: IFFALSE 24041
23944: GO 23946
23946: DISABLE
23947: LD_INT 0
23949: PPUSH
23950: PPUSH
// begin enable ;
23951: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23952: LD_ADDR_VAR 0 1
23956: PUSH
23957: LD_INT 22
23959: PUSH
23960: LD_OWVAR 2
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: PUSH
23969: LD_INT 61
23971: PUSH
23972: EMPTY
23973: LIST
23974: PUSH
23975: LD_INT 33
23977: PUSH
23978: LD_INT 2
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: LIST
23989: PPUSH
23990: CALL_OW 69
23994: ST_TO_ADDR
// if not tmp then
23995: LD_VAR 0 1
23999: NOT
24000: IFFALSE 24004
// exit ;
24002: GO 24041
// for i in tmp do
24004: LD_ADDR_VAR 0 2
24008: PUSH
24009: LD_VAR 0 1
24013: PUSH
24014: FOR_IN
24015: IFFALSE 24039
// if IsControledBy ( i ) then
24017: LD_VAR 0 2
24021: PPUSH
24022: CALL_OW 312
24026: IFFALSE 24037
// ComUnlink ( i ) ;
24028: LD_VAR 0 2
24032: PPUSH
24033: CALL_OW 136
24037: GO 24014
24039: POP
24040: POP
// end ;
24041: PPOPN 2
24043: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24044: LD_EXP 50
24048: PUSH
24049: LD_EXP 81
24053: AND
24054: IFFALSE 24194
24056: GO 24058
24058: DISABLE
24059: LD_INT 0
24061: PPUSH
24062: PPUSH
// begin ToLua ( displayPowell(); ) ;
24063: LD_STRING displayPowell();
24065: PPUSH
24066: CALL_OW 559
// uc_side := 0 ;
24070: LD_ADDR_OWVAR 20
24074: PUSH
24075: LD_INT 0
24077: ST_TO_ADDR
// uc_nation := 2 ;
24078: LD_ADDR_OWVAR 21
24082: PUSH
24083: LD_INT 2
24085: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24086: LD_ADDR_OWVAR 37
24090: PUSH
24091: LD_INT 14
24093: ST_TO_ADDR
// vc_engine := engine_siberite ;
24094: LD_ADDR_OWVAR 39
24098: PUSH
24099: LD_INT 3
24101: ST_TO_ADDR
// vc_control := control_apeman ;
24102: LD_ADDR_OWVAR 38
24106: PUSH
24107: LD_INT 5
24109: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24110: LD_ADDR_OWVAR 40
24114: PUSH
24115: LD_INT 29
24117: ST_TO_ADDR
// un := CreateVehicle ;
24118: LD_ADDR_VAR 0 2
24122: PUSH
24123: CALL_OW 45
24127: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24128: LD_VAR 0 2
24132: PPUSH
24133: LD_INT 1
24135: PPUSH
24136: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24140: LD_INT 35
24142: PPUSH
24143: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24147: LD_VAR 0 2
24151: PPUSH
24152: LD_INT 22
24154: PUSH
24155: LD_OWVAR 2
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PPUSH
24164: CALL_OW 69
24168: PPUSH
24169: LD_VAR 0 2
24173: PPUSH
24174: CALL_OW 74
24178: PPUSH
24179: CALL_OW 115
// until IsDead ( un ) ;
24183: LD_VAR 0 2
24187: PPUSH
24188: CALL_OW 301
24192: IFFALSE 24140
// end ;
24194: PPOPN 2
24196: END
// every 0 0$1 trigger StreamModeActive and sStu do
24197: LD_EXP 50
24201: PUSH
24202: LD_EXP 89
24206: AND
24207: IFFALSE 24223
24209: GO 24211
24211: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24212: LD_STRING displayStucuk();
24214: PPUSH
24215: CALL_OW 559
// ResetFog ;
24219: CALL_OW 335
// end ;
24223: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24224: LD_EXP 50
24228: PUSH
24229: LD_EXP 82
24233: AND
24234: IFFALSE 24375
24236: GO 24238
24238: DISABLE
24239: LD_INT 0
24241: PPUSH
24242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24243: LD_ADDR_VAR 0 2
24247: PUSH
24248: LD_INT 22
24250: PUSH
24251: LD_OWVAR 2
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: LD_INT 21
24262: PUSH
24263: LD_INT 1
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PPUSH
24274: CALL_OW 69
24278: ST_TO_ADDR
// if not tmp then
24279: LD_VAR 0 2
24283: NOT
24284: IFFALSE 24288
// exit ;
24286: GO 24375
// un := tmp [ rand ( 1 , tmp ) ] ;
24288: LD_ADDR_VAR 0 1
24292: PUSH
24293: LD_VAR 0 2
24297: PUSH
24298: LD_INT 1
24300: PPUSH
24301: LD_VAR 0 2
24305: PPUSH
24306: CALL_OW 12
24310: ARRAY
24311: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24312: LD_VAR 0 1
24316: PPUSH
24317: LD_INT 0
24319: PPUSH
24320: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24324: LD_VAR 0 1
24328: PPUSH
24329: LD_OWVAR 3
24333: PUSH
24334: LD_VAR 0 1
24338: DIFF
24339: PPUSH
24340: LD_VAR 0 1
24344: PPUSH
24345: CALL_OW 74
24349: PPUSH
24350: CALL_OW 115
// wait ( 0 0$20 ) ;
24354: LD_INT 700
24356: PPUSH
24357: CALL_OW 67
// SetSide ( un , your_side ) ;
24361: LD_VAR 0 1
24365: PPUSH
24366: LD_OWVAR 2
24370: PPUSH
24371: CALL_OW 235
// end ;
24375: PPOPN 2
24377: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24378: LD_EXP 50
24382: PUSH
24383: LD_EXP 83
24387: AND
24388: IFFALSE 24494
24390: GO 24392
24392: DISABLE
24393: LD_INT 0
24395: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24396: LD_ADDR_VAR 0 1
24400: PUSH
24401: LD_INT 22
24403: PUSH
24404: LD_OWVAR 2
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 2
24415: PUSH
24416: LD_INT 30
24418: PUSH
24419: LD_INT 0
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 30
24428: PUSH
24429: LD_INT 1
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: LIST
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PPUSH
24445: CALL_OW 69
24449: ST_TO_ADDR
// if not depot then
24450: LD_VAR 0 1
24454: NOT
24455: IFFALSE 24459
// exit ;
24457: GO 24494
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24459: LD_VAR 0 1
24463: PUSH
24464: LD_INT 1
24466: ARRAY
24467: PPUSH
24468: CALL_OW 250
24472: PPUSH
24473: LD_VAR 0 1
24477: PUSH
24478: LD_INT 1
24480: ARRAY
24481: PPUSH
24482: CALL_OW 251
24486: PPUSH
24487: LD_INT 70
24489: PPUSH
24490: CALL_OW 495
// end ;
24494: PPOPN 1
24496: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24497: LD_EXP 50
24501: PUSH
24502: LD_EXP 84
24506: AND
24507: IFFALSE 24718
24509: GO 24511
24511: DISABLE
24512: LD_INT 0
24514: PPUSH
24515: PPUSH
24516: PPUSH
24517: PPUSH
24518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24519: LD_ADDR_VAR 0 5
24523: PUSH
24524: LD_INT 22
24526: PUSH
24527: LD_OWVAR 2
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 21
24538: PUSH
24539: LD_INT 1
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PPUSH
24550: CALL_OW 69
24554: ST_TO_ADDR
// if not tmp then
24555: LD_VAR 0 5
24559: NOT
24560: IFFALSE 24564
// exit ;
24562: GO 24718
// for i in tmp do
24564: LD_ADDR_VAR 0 1
24568: PUSH
24569: LD_VAR 0 5
24573: PUSH
24574: FOR_IN
24575: IFFALSE 24716
// begin d := rand ( 0 , 5 ) ;
24577: LD_ADDR_VAR 0 4
24581: PUSH
24582: LD_INT 0
24584: PPUSH
24585: LD_INT 5
24587: PPUSH
24588: CALL_OW 12
24592: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24593: LD_ADDR_VAR 0 2
24597: PUSH
24598: LD_VAR 0 1
24602: PPUSH
24603: CALL_OW 250
24607: PPUSH
24608: LD_VAR 0 4
24612: PPUSH
24613: LD_INT 3
24615: PPUSH
24616: LD_INT 12
24618: PPUSH
24619: CALL_OW 12
24623: PPUSH
24624: CALL_OW 272
24628: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24629: LD_ADDR_VAR 0 3
24633: PUSH
24634: LD_VAR 0 1
24638: PPUSH
24639: CALL_OW 251
24643: PPUSH
24644: LD_VAR 0 4
24648: PPUSH
24649: LD_INT 3
24651: PPUSH
24652: LD_INT 12
24654: PPUSH
24655: CALL_OW 12
24659: PPUSH
24660: CALL_OW 273
24664: ST_TO_ADDR
// if ValidHex ( x , y ) then
24665: LD_VAR 0 2
24669: PPUSH
24670: LD_VAR 0 3
24674: PPUSH
24675: CALL_OW 488
24679: IFFALSE 24714
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24681: LD_VAR 0 1
24685: PPUSH
24686: LD_VAR 0 2
24690: PPUSH
24691: LD_VAR 0 3
24695: PPUSH
24696: LD_INT 3
24698: PPUSH
24699: LD_INT 6
24701: PPUSH
24702: CALL_OW 12
24706: PPUSH
24707: LD_INT 1
24709: PPUSH
24710: CALL_OW 483
// end ;
24714: GO 24574
24716: POP
24717: POP
// end ;
24718: PPOPN 5
24720: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24721: LD_EXP 50
24725: PUSH
24726: LD_EXP 85
24730: AND
24731: IFFALSE 24825
24733: GO 24735
24735: DISABLE
24736: LD_INT 0
24738: PPUSH
24739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24740: LD_ADDR_VAR 0 2
24744: PUSH
24745: LD_INT 22
24747: PUSH
24748: LD_OWVAR 2
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 32
24759: PUSH
24760: LD_INT 1
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 21
24769: PUSH
24770: LD_INT 2
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: LIST
24781: PPUSH
24782: CALL_OW 69
24786: ST_TO_ADDR
// if not tmp then
24787: LD_VAR 0 2
24791: NOT
24792: IFFALSE 24796
// exit ;
24794: GO 24825
// for i in tmp do
24796: LD_ADDR_VAR 0 1
24800: PUSH
24801: LD_VAR 0 2
24805: PUSH
24806: FOR_IN
24807: IFFALSE 24823
// SetFuel ( i , 0 ) ;
24809: LD_VAR 0 1
24813: PPUSH
24814: LD_INT 0
24816: PPUSH
24817: CALL_OW 240
24821: GO 24806
24823: POP
24824: POP
// end ;
24825: PPOPN 2
24827: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24828: LD_EXP 50
24832: PUSH
24833: LD_EXP 86
24837: AND
24838: IFFALSE 24904
24840: GO 24842
24842: DISABLE
24843: LD_INT 0
24845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24846: LD_ADDR_VAR 0 1
24850: PUSH
24851: LD_INT 22
24853: PUSH
24854: LD_OWVAR 2
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 30
24865: PUSH
24866: LD_INT 29
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PPUSH
24877: CALL_OW 69
24881: ST_TO_ADDR
// if not tmp then
24882: LD_VAR 0 1
24886: NOT
24887: IFFALSE 24891
// exit ;
24889: GO 24904
// DestroyUnit ( tmp [ 1 ] ) ;
24891: LD_VAR 0 1
24895: PUSH
24896: LD_INT 1
24898: ARRAY
24899: PPUSH
24900: CALL_OW 65
// end ;
24904: PPOPN 1
24906: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24907: LD_EXP 50
24911: PUSH
24912: LD_EXP 88
24916: AND
24917: IFFALSE 25046
24919: GO 24921
24921: DISABLE
24922: LD_INT 0
24924: PPUSH
// begin uc_side := 0 ;
24925: LD_ADDR_OWVAR 20
24929: PUSH
24930: LD_INT 0
24932: ST_TO_ADDR
// uc_nation := nation_arabian ;
24933: LD_ADDR_OWVAR 21
24937: PUSH
24938: LD_INT 2
24940: ST_TO_ADDR
// hc_gallery :=  ;
24941: LD_ADDR_OWVAR 33
24945: PUSH
24946: LD_STRING 
24948: ST_TO_ADDR
// hc_name :=  ;
24949: LD_ADDR_OWVAR 26
24953: PUSH
24954: LD_STRING 
24956: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24957: LD_INT 1
24959: PPUSH
24960: LD_INT 11
24962: PPUSH
24963: LD_INT 10
24965: PPUSH
24966: CALL_OW 380
// un := CreateHuman ;
24970: LD_ADDR_VAR 0 1
24974: PUSH
24975: CALL_OW 44
24979: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24980: LD_VAR 0 1
24984: PPUSH
24985: LD_INT 1
24987: PPUSH
24988: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24992: LD_INT 35
24994: PPUSH
24995: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24999: LD_VAR 0 1
25003: PPUSH
25004: LD_INT 22
25006: PUSH
25007: LD_OWVAR 2
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PPUSH
25016: CALL_OW 69
25020: PPUSH
25021: LD_VAR 0 1
25025: PPUSH
25026: CALL_OW 74
25030: PPUSH
25031: CALL_OW 115
// until IsDead ( un ) ;
25035: LD_VAR 0 1
25039: PPUSH
25040: CALL_OW 301
25044: IFFALSE 24992
// end ;
25046: PPOPN 1
25048: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25049: LD_EXP 50
25053: PUSH
25054: LD_EXP 90
25058: AND
25059: IFFALSE 25071
25061: GO 25063
25063: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25064: LD_STRING earthquake(getX(game), 0, 32)
25066: PPUSH
25067: CALL_OW 559
25071: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25072: LD_EXP 50
25076: PUSH
25077: LD_EXP 91
25081: AND
25082: IFFALSE 25173
25084: GO 25086
25086: DISABLE
25087: LD_INT 0
25089: PPUSH
// begin enable ;
25090: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25091: LD_ADDR_VAR 0 1
25095: PUSH
25096: LD_INT 22
25098: PUSH
25099: LD_OWVAR 2
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 21
25110: PUSH
25111: LD_INT 2
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_INT 33
25120: PUSH
25121: LD_INT 3
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: LIST
25132: PPUSH
25133: CALL_OW 69
25137: ST_TO_ADDR
// if not tmp then
25138: LD_VAR 0 1
25142: NOT
25143: IFFALSE 25147
// exit ;
25145: GO 25173
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25147: LD_VAR 0 1
25151: PUSH
25152: LD_INT 1
25154: PPUSH
25155: LD_VAR 0 1
25159: PPUSH
25160: CALL_OW 12
25164: ARRAY
25165: PPUSH
25166: LD_INT 1
25168: PPUSH
25169: CALL_OW 234
// end ;
25173: PPOPN 1
25175: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25176: LD_EXP 50
25180: PUSH
25181: LD_EXP 92
25185: AND
25186: IFFALSE 25327
25188: GO 25190
25190: DISABLE
25191: LD_INT 0
25193: PPUSH
25194: PPUSH
25195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25196: LD_ADDR_VAR 0 3
25200: PUSH
25201: LD_INT 22
25203: PUSH
25204: LD_OWVAR 2
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 25
25215: PUSH
25216: LD_INT 1
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PPUSH
25227: CALL_OW 69
25231: ST_TO_ADDR
// if not tmp then
25232: LD_VAR 0 3
25236: NOT
25237: IFFALSE 25241
// exit ;
25239: GO 25327
// un := tmp [ rand ( 1 , tmp ) ] ;
25241: LD_ADDR_VAR 0 2
25245: PUSH
25246: LD_VAR 0 3
25250: PUSH
25251: LD_INT 1
25253: PPUSH
25254: LD_VAR 0 3
25258: PPUSH
25259: CALL_OW 12
25263: ARRAY
25264: ST_TO_ADDR
// if Crawls ( un ) then
25265: LD_VAR 0 2
25269: PPUSH
25270: CALL_OW 318
25274: IFFALSE 25285
// ComWalk ( un ) ;
25276: LD_VAR 0 2
25280: PPUSH
25281: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25285: LD_VAR 0 2
25289: PPUSH
25290: LD_INT 9
25292: PPUSH
25293: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25297: LD_INT 28
25299: PPUSH
25300: LD_OWVAR 2
25304: PPUSH
25305: LD_INT 2
25307: PPUSH
25308: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25312: LD_INT 29
25314: PPUSH
25315: LD_OWVAR 2
25319: PPUSH
25320: LD_INT 2
25322: PPUSH
25323: CALL_OW 322
// end ;
25327: PPOPN 3
25329: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25330: LD_EXP 50
25334: PUSH
25335: LD_EXP 93
25339: AND
25340: IFFALSE 25451
25342: GO 25344
25344: DISABLE
25345: LD_INT 0
25347: PPUSH
25348: PPUSH
25349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25350: LD_ADDR_VAR 0 3
25354: PUSH
25355: LD_INT 22
25357: PUSH
25358: LD_OWVAR 2
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 25
25369: PUSH
25370: LD_INT 1
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PPUSH
25381: CALL_OW 69
25385: ST_TO_ADDR
// if not tmp then
25386: LD_VAR 0 3
25390: NOT
25391: IFFALSE 25395
// exit ;
25393: GO 25451
// un := tmp [ rand ( 1 , tmp ) ] ;
25395: LD_ADDR_VAR 0 2
25399: PUSH
25400: LD_VAR 0 3
25404: PUSH
25405: LD_INT 1
25407: PPUSH
25408: LD_VAR 0 3
25412: PPUSH
25413: CALL_OW 12
25417: ARRAY
25418: ST_TO_ADDR
// if Crawls ( un ) then
25419: LD_VAR 0 2
25423: PPUSH
25424: CALL_OW 318
25428: IFFALSE 25439
// ComWalk ( un ) ;
25430: LD_VAR 0 2
25434: PPUSH
25435: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25439: LD_VAR 0 2
25443: PPUSH
25444: LD_INT 8
25446: PPUSH
25447: CALL_OW 336
// end ;
25451: PPOPN 3
25453: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25454: LD_EXP 50
25458: PUSH
25459: LD_EXP 94
25463: AND
25464: IFFALSE 25608
25466: GO 25468
25468: DISABLE
25469: LD_INT 0
25471: PPUSH
25472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25473: LD_ADDR_VAR 0 2
25477: PUSH
25478: LD_INT 22
25480: PUSH
25481: LD_OWVAR 2
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: LD_INT 21
25492: PUSH
25493: LD_INT 2
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 2
25502: PUSH
25503: LD_INT 34
25505: PUSH
25506: LD_INT 12
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 34
25515: PUSH
25516: LD_INT 51
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 34
25525: PUSH
25526: LD_INT 32
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: LIST
25543: PPUSH
25544: CALL_OW 69
25548: ST_TO_ADDR
// if not tmp then
25549: LD_VAR 0 2
25553: NOT
25554: IFFALSE 25558
// exit ;
25556: GO 25608
// for i in tmp do
25558: LD_ADDR_VAR 0 1
25562: PUSH
25563: LD_VAR 0 2
25567: PUSH
25568: FOR_IN
25569: IFFALSE 25606
// if GetCargo ( i , mat_artifact ) = 0 then
25571: LD_VAR 0 1
25575: PPUSH
25576: LD_INT 4
25578: PPUSH
25579: CALL_OW 289
25583: PUSH
25584: LD_INT 0
25586: EQUAL
25587: IFFALSE 25604
// SetCargo ( i , mat_siberit , 100 ) ;
25589: LD_VAR 0 1
25593: PPUSH
25594: LD_INT 3
25596: PPUSH
25597: LD_INT 100
25599: PPUSH
25600: CALL_OW 290
25604: GO 25568
25606: POP
25607: POP
// end ;
25608: PPOPN 2
25610: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25611: LD_EXP 50
25615: PUSH
25616: LD_EXP 95
25620: AND
25621: IFFALSE 25804
25623: GO 25625
25625: DISABLE
25626: LD_INT 0
25628: PPUSH
25629: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25630: LD_ADDR_VAR 0 2
25634: PUSH
25635: LD_INT 22
25637: PUSH
25638: LD_OWVAR 2
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PPUSH
25647: CALL_OW 69
25651: ST_TO_ADDR
// if not tmp then
25652: LD_VAR 0 2
25656: NOT
25657: IFFALSE 25661
// exit ;
25659: GO 25804
// for i := 1 to 2 do
25661: LD_ADDR_VAR 0 1
25665: PUSH
25666: DOUBLE
25667: LD_INT 1
25669: DEC
25670: ST_TO_ADDR
25671: LD_INT 2
25673: PUSH
25674: FOR_TO
25675: IFFALSE 25802
// begin uc_side := your_side ;
25677: LD_ADDR_OWVAR 20
25681: PUSH
25682: LD_OWVAR 2
25686: ST_TO_ADDR
// uc_nation := nation_american ;
25687: LD_ADDR_OWVAR 21
25691: PUSH
25692: LD_INT 1
25694: ST_TO_ADDR
// vc_chassis := us_morphling ;
25695: LD_ADDR_OWVAR 37
25699: PUSH
25700: LD_INT 5
25702: ST_TO_ADDR
// vc_engine := engine_siberite ;
25703: LD_ADDR_OWVAR 39
25707: PUSH
25708: LD_INT 3
25710: ST_TO_ADDR
// vc_control := control_computer ;
25711: LD_ADDR_OWVAR 38
25715: PUSH
25716: LD_INT 3
25718: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25719: LD_ADDR_OWVAR 40
25723: PUSH
25724: LD_INT 10
25726: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25727: LD_VAR 0 2
25731: PUSH
25732: LD_INT 1
25734: ARRAY
25735: PPUSH
25736: CALL_OW 310
25740: NOT
25741: IFFALSE 25788
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25743: CALL_OW 45
25747: PPUSH
25748: LD_VAR 0 2
25752: PUSH
25753: LD_INT 1
25755: ARRAY
25756: PPUSH
25757: CALL_OW 250
25761: PPUSH
25762: LD_VAR 0 2
25766: PUSH
25767: LD_INT 1
25769: ARRAY
25770: PPUSH
25771: CALL_OW 251
25775: PPUSH
25776: LD_INT 12
25778: PPUSH
25779: LD_INT 1
25781: PPUSH
25782: CALL_OW 50
25786: GO 25800
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25788: CALL_OW 45
25792: PPUSH
25793: LD_INT 1
25795: PPUSH
25796: CALL_OW 51
// end ;
25800: GO 25674
25802: POP
25803: POP
// end ;
25804: PPOPN 2
25806: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25807: LD_EXP 50
25811: PUSH
25812: LD_EXP 96
25816: AND
25817: IFFALSE 26039
25819: GO 25821
25821: DISABLE
25822: LD_INT 0
25824: PPUSH
25825: PPUSH
25826: PPUSH
25827: PPUSH
25828: PPUSH
25829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25830: LD_ADDR_VAR 0 6
25834: PUSH
25835: LD_INT 22
25837: PUSH
25838: LD_OWVAR 2
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 21
25849: PUSH
25850: LD_INT 1
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 3
25859: PUSH
25860: LD_INT 23
25862: PUSH
25863: LD_INT 0
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: LIST
25878: PPUSH
25879: CALL_OW 69
25883: ST_TO_ADDR
// if not tmp then
25884: LD_VAR 0 6
25888: NOT
25889: IFFALSE 25893
// exit ;
25891: GO 26039
// s1 := rand ( 1 , 4 ) ;
25893: LD_ADDR_VAR 0 2
25897: PUSH
25898: LD_INT 1
25900: PPUSH
25901: LD_INT 4
25903: PPUSH
25904: CALL_OW 12
25908: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25909: LD_ADDR_VAR 0 4
25913: PUSH
25914: LD_VAR 0 6
25918: PUSH
25919: LD_INT 1
25921: ARRAY
25922: PPUSH
25923: LD_VAR 0 2
25927: PPUSH
25928: CALL_OW 259
25932: ST_TO_ADDR
// if s1 = 1 then
25933: LD_VAR 0 2
25937: PUSH
25938: LD_INT 1
25940: EQUAL
25941: IFFALSE 25961
// s2 := rand ( 2 , 4 ) else
25943: LD_ADDR_VAR 0 3
25947: PUSH
25948: LD_INT 2
25950: PPUSH
25951: LD_INT 4
25953: PPUSH
25954: CALL_OW 12
25958: ST_TO_ADDR
25959: GO 25969
// s2 := 1 ;
25961: LD_ADDR_VAR 0 3
25965: PUSH
25966: LD_INT 1
25968: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25969: LD_ADDR_VAR 0 5
25973: PUSH
25974: LD_VAR 0 6
25978: PUSH
25979: LD_INT 1
25981: ARRAY
25982: PPUSH
25983: LD_VAR 0 3
25987: PPUSH
25988: CALL_OW 259
25992: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25993: LD_VAR 0 6
25997: PUSH
25998: LD_INT 1
26000: ARRAY
26001: PPUSH
26002: LD_VAR 0 2
26006: PPUSH
26007: LD_VAR 0 5
26011: PPUSH
26012: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26016: LD_VAR 0 6
26020: PUSH
26021: LD_INT 1
26023: ARRAY
26024: PPUSH
26025: LD_VAR 0 3
26029: PPUSH
26030: LD_VAR 0 4
26034: PPUSH
26035: CALL_OW 237
// end ;
26039: PPOPN 6
26041: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26042: LD_EXP 50
26046: PUSH
26047: LD_EXP 97
26051: AND
26052: IFFALSE 26131
26054: GO 26056
26056: DISABLE
26057: LD_INT 0
26059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26060: LD_ADDR_VAR 0 1
26064: PUSH
26065: LD_INT 22
26067: PUSH
26068: LD_OWVAR 2
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 30
26079: PUSH
26080: LD_INT 3
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PPUSH
26091: CALL_OW 69
26095: ST_TO_ADDR
// if not tmp then
26096: LD_VAR 0 1
26100: NOT
26101: IFFALSE 26105
// exit ;
26103: GO 26131
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26105: LD_VAR 0 1
26109: PUSH
26110: LD_INT 1
26112: PPUSH
26113: LD_VAR 0 1
26117: PPUSH
26118: CALL_OW 12
26122: ARRAY
26123: PPUSH
26124: LD_INT 1
26126: PPUSH
26127: CALL_OW 234
// end ;
26131: PPOPN 1
26133: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26134: LD_EXP 50
26138: PUSH
26139: LD_EXP 98
26143: AND
26144: IFFALSE 26256
26146: GO 26148
26148: DISABLE
26149: LD_INT 0
26151: PPUSH
26152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26153: LD_ADDR_VAR 0 2
26157: PUSH
26158: LD_INT 22
26160: PUSH
26161: LD_OWVAR 2
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 2
26172: PUSH
26173: LD_INT 30
26175: PUSH
26176: LD_INT 27
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 30
26185: PUSH
26186: LD_INT 26
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 30
26195: PUSH
26196: LD_INT 28
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PPUSH
26213: CALL_OW 69
26217: ST_TO_ADDR
// if not tmp then
26218: LD_VAR 0 2
26222: NOT
26223: IFFALSE 26227
// exit ;
26225: GO 26256
// for i in tmp do
26227: LD_ADDR_VAR 0 1
26231: PUSH
26232: LD_VAR 0 2
26236: PUSH
26237: FOR_IN
26238: IFFALSE 26254
// SetLives ( i , 1 ) ;
26240: LD_VAR 0 1
26244: PPUSH
26245: LD_INT 1
26247: PPUSH
26248: CALL_OW 234
26252: GO 26237
26254: POP
26255: POP
// end ;
26256: PPOPN 2
26258: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26259: LD_EXP 50
26263: PUSH
26264: LD_EXP 99
26268: AND
26269: IFFALSE 26543
26271: GO 26273
26273: DISABLE
26274: LD_INT 0
26276: PPUSH
26277: PPUSH
26278: PPUSH
// begin i := rand ( 1 , 7 ) ;
26279: LD_ADDR_VAR 0 1
26283: PUSH
26284: LD_INT 1
26286: PPUSH
26287: LD_INT 7
26289: PPUSH
26290: CALL_OW 12
26294: ST_TO_ADDR
// case i of 1 :
26295: LD_VAR 0 1
26299: PUSH
26300: LD_INT 1
26302: DOUBLE
26303: EQUAL
26304: IFTRUE 26308
26306: GO 26318
26308: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26309: LD_STRING earthquake(getX(game), 0, 32)
26311: PPUSH
26312: CALL_OW 559
26316: GO 26543
26318: LD_INT 2
26320: DOUBLE
26321: EQUAL
26322: IFTRUE 26326
26324: GO 26340
26326: POP
// begin ToLua ( displayStucuk(); ) ;
26327: LD_STRING displayStucuk();
26329: PPUSH
26330: CALL_OW 559
// ResetFog ;
26334: CALL_OW 335
// end ; 3 :
26338: GO 26543
26340: LD_INT 3
26342: DOUBLE
26343: EQUAL
26344: IFTRUE 26348
26346: GO 26452
26348: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26349: LD_ADDR_VAR 0 2
26353: PUSH
26354: LD_INT 22
26356: PUSH
26357: LD_OWVAR 2
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 25
26368: PUSH
26369: LD_INT 1
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PPUSH
26380: CALL_OW 69
26384: ST_TO_ADDR
// if not tmp then
26385: LD_VAR 0 2
26389: NOT
26390: IFFALSE 26394
// exit ;
26392: GO 26543
// un := tmp [ rand ( 1 , tmp ) ] ;
26394: LD_ADDR_VAR 0 3
26398: PUSH
26399: LD_VAR 0 2
26403: PUSH
26404: LD_INT 1
26406: PPUSH
26407: LD_VAR 0 2
26411: PPUSH
26412: CALL_OW 12
26416: ARRAY
26417: ST_TO_ADDR
// if Crawls ( un ) then
26418: LD_VAR 0 3
26422: PPUSH
26423: CALL_OW 318
26427: IFFALSE 26438
// ComWalk ( un ) ;
26429: LD_VAR 0 3
26433: PPUSH
26434: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26438: LD_VAR 0 3
26442: PPUSH
26443: LD_INT 8
26445: PPUSH
26446: CALL_OW 336
// end ; 4 :
26450: GO 26543
26452: LD_INT 4
26454: DOUBLE
26455: EQUAL
26456: IFTRUE 26460
26458: GO 26521
26460: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26461: LD_ADDR_VAR 0 2
26465: PUSH
26466: LD_INT 22
26468: PUSH
26469: LD_OWVAR 2
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 30
26480: PUSH
26481: LD_INT 29
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PPUSH
26492: CALL_OW 69
26496: ST_TO_ADDR
// if not tmp then
26497: LD_VAR 0 2
26501: NOT
26502: IFFALSE 26506
// exit ;
26504: GO 26543
// DestroyUnit ( tmp [ 1 ] ) ;
26506: LD_VAR 0 2
26510: PUSH
26511: LD_INT 1
26513: ARRAY
26514: PPUSH
26515: CALL_OW 65
// end ; 5 .. 7 :
26519: GO 26543
26521: LD_INT 5
26523: DOUBLE
26524: GREATEREQUAL
26525: IFFALSE 26533
26527: LD_INT 7
26529: DOUBLE
26530: LESSEQUAL
26531: IFTRUE 26535
26533: GO 26542
26535: POP
// StreamSibBomb ; end ;
26536: CALL 22793 0 0
26540: GO 26543
26542: POP
// end ;
26543: PPOPN 3
26545: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26546: LD_EXP 50
26550: PUSH
26551: LD_EXP 100
26555: AND
26556: IFFALSE 26712
26558: GO 26560
26560: DISABLE
26561: LD_INT 0
26563: PPUSH
26564: PPUSH
26565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26566: LD_ADDR_VAR 0 2
26570: PUSH
26571: LD_INT 81
26573: PUSH
26574: LD_OWVAR 2
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 2
26585: PUSH
26586: LD_INT 21
26588: PUSH
26589: LD_INT 1
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: LD_INT 21
26598: PUSH
26599: LD_INT 2
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: LIST
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PPUSH
26615: CALL_OW 69
26619: ST_TO_ADDR
// if not tmp then
26620: LD_VAR 0 2
26624: NOT
26625: IFFALSE 26629
// exit ;
26627: GO 26712
// p := 0 ;
26629: LD_ADDR_VAR 0 3
26633: PUSH
26634: LD_INT 0
26636: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26637: LD_INT 35
26639: PPUSH
26640: CALL_OW 67
// p := p + 1 ;
26644: LD_ADDR_VAR 0 3
26648: PUSH
26649: LD_VAR 0 3
26653: PUSH
26654: LD_INT 1
26656: PLUS
26657: ST_TO_ADDR
// for i in tmp do
26658: LD_ADDR_VAR 0 1
26662: PUSH
26663: LD_VAR 0 2
26667: PUSH
26668: FOR_IN
26669: IFFALSE 26700
// if GetLives ( i ) < 1000 then
26671: LD_VAR 0 1
26675: PPUSH
26676: CALL_OW 256
26680: PUSH
26681: LD_INT 1000
26683: LESS
26684: IFFALSE 26698
// SetLives ( i , 1000 ) ;
26686: LD_VAR 0 1
26690: PPUSH
26691: LD_INT 1000
26693: PPUSH
26694: CALL_OW 234
26698: GO 26668
26700: POP
26701: POP
// until p > 20 ;
26702: LD_VAR 0 3
26706: PUSH
26707: LD_INT 20
26709: GREATER
26710: IFFALSE 26637
// end ;
26712: PPOPN 3
26714: END
// every 0 0$1 trigger StreamModeActive and sTime do
26715: LD_EXP 50
26719: PUSH
26720: LD_EXP 101
26724: AND
26725: IFFALSE 26760
26727: GO 26729
26729: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26730: LD_INT 28
26732: PPUSH
26733: LD_OWVAR 2
26737: PPUSH
26738: LD_INT 2
26740: PPUSH
26741: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26745: LD_INT 30
26747: PPUSH
26748: LD_OWVAR 2
26752: PPUSH
26753: LD_INT 2
26755: PPUSH
26756: CALL_OW 322
// end ;
26760: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26761: LD_EXP 50
26765: PUSH
26766: LD_EXP 102
26770: AND
26771: IFFALSE 26892
26773: GO 26775
26775: DISABLE
26776: LD_INT 0
26778: PPUSH
26779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26780: LD_ADDR_VAR 0 2
26784: PUSH
26785: LD_INT 22
26787: PUSH
26788: LD_OWVAR 2
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 21
26799: PUSH
26800: LD_INT 1
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 3
26809: PUSH
26810: LD_INT 23
26812: PUSH
26813: LD_INT 0
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: LIST
26828: PPUSH
26829: CALL_OW 69
26833: ST_TO_ADDR
// if not tmp then
26834: LD_VAR 0 2
26838: NOT
26839: IFFALSE 26843
// exit ;
26841: GO 26892
// for i in tmp do
26843: LD_ADDR_VAR 0 1
26847: PUSH
26848: LD_VAR 0 2
26852: PUSH
26853: FOR_IN
26854: IFFALSE 26890
// begin if Crawls ( i ) then
26856: LD_VAR 0 1
26860: PPUSH
26861: CALL_OW 318
26865: IFFALSE 26876
// ComWalk ( i ) ;
26867: LD_VAR 0 1
26871: PPUSH
26872: CALL_OW 138
// SetClass ( i , 2 ) ;
26876: LD_VAR 0 1
26880: PPUSH
26881: LD_INT 2
26883: PPUSH
26884: CALL_OW 336
// end ;
26888: GO 26853
26890: POP
26891: POP
// end ;
26892: PPOPN 2
26894: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26895: LD_EXP 50
26899: PUSH
26900: LD_EXP 103
26904: AND
26905: IFFALSE 27186
26907: GO 26909
26909: DISABLE
26910: LD_INT 0
26912: PPUSH
26913: PPUSH
26914: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26915: LD_OWVAR 2
26919: PPUSH
26920: LD_INT 9
26922: PPUSH
26923: LD_INT 1
26925: PPUSH
26926: LD_INT 1
26928: PPUSH
26929: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26933: LD_INT 9
26935: PPUSH
26936: LD_OWVAR 2
26940: PPUSH
26941: CALL_OW 343
// uc_side := 9 ;
26945: LD_ADDR_OWVAR 20
26949: PUSH
26950: LD_INT 9
26952: ST_TO_ADDR
// uc_nation := 2 ;
26953: LD_ADDR_OWVAR 21
26957: PUSH
26958: LD_INT 2
26960: ST_TO_ADDR
// hc_name := Dark Warrior ;
26961: LD_ADDR_OWVAR 26
26965: PUSH
26966: LD_STRING Dark Warrior
26968: ST_TO_ADDR
// hc_gallery :=  ;
26969: LD_ADDR_OWVAR 33
26973: PUSH
26974: LD_STRING 
26976: ST_TO_ADDR
// hc_noskilllimit := true ;
26977: LD_ADDR_OWVAR 76
26981: PUSH
26982: LD_INT 1
26984: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26985: LD_ADDR_OWVAR 31
26989: PUSH
26990: LD_INT 30
26992: PUSH
26993: LD_INT 30
26995: PUSH
26996: LD_INT 30
26998: PUSH
26999: LD_INT 30
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: ST_TO_ADDR
// un := CreateHuman ;
27008: LD_ADDR_VAR 0 3
27012: PUSH
27013: CALL_OW 44
27017: ST_TO_ADDR
// hc_noskilllimit := false ;
27018: LD_ADDR_OWVAR 76
27022: PUSH
27023: LD_INT 0
27025: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27026: LD_VAR 0 3
27030: PPUSH
27031: LD_INT 1
27033: PPUSH
27034: CALL_OW 51
// p := 0 ;
27038: LD_ADDR_VAR 0 2
27042: PUSH
27043: LD_INT 0
27045: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27046: LD_INT 35
27048: PPUSH
27049: CALL_OW 67
// p := p + 1 ;
27053: LD_ADDR_VAR 0 2
27057: PUSH
27058: LD_VAR 0 2
27062: PUSH
27063: LD_INT 1
27065: PLUS
27066: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27067: LD_VAR 0 3
27071: PPUSH
27072: CALL_OW 256
27076: PUSH
27077: LD_INT 1000
27079: LESS
27080: IFFALSE 27094
// SetLives ( un , 1000 ) ;
27082: LD_VAR 0 3
27086: PPUSH
27087: LD_INT 1000
27089: PPUSH
27090: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27094: LD_VAR 0 3
27098: PPUSH
27099: LD_INT 81
27101: PUSH
27102: LD_OWVAR 2
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 91
27113: PUSH
27114: LD_VAR 0 3
27118: PUSH
27119: LD_INT 30
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: LIST
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PPUSH
27131: CALL_OW 69
27135: PPUSH
27136: LD_VAR 0 3
27140: PPUSH
27141: CALL_OW 74
27145: PPUSH
27146: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
27150: LD_VAR 0 2
27154: PUSH
27155: LD_INT 60
27157: GREATER
27158: PUSH
27159: LD_VAR 0 3
27163: PPUSH
27164: CALL_OW 301
27168: OR
27169: IFFALSE 27046
// if un then
27171: LD_VAR 0 3
27175: IFFALSE 27186
// RemoveUnit ( un ) ;
27177: LD_VAR 0 3
27181: PPUSH
27182: CALL_OW 64
// end ;
27186: PPOPN 3
27188: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27189: LD_INT 0
27191: PPUSH
27192: PPUSH
27193: PPUSH
27194: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27195: LD_ADDR_VAR 0 4
27199: PUSH
27200: LD_INT 22
27202: PUSH
27203: LD_OWVAR 2
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 2
27214: PUSH
27215: LD_INT 30
27217: PUSH
27218: LD_INT 0
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 30
27227: PUSH
27228: LD_INT 1
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: LIST
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PPUSH
27244: CALL_OW 69
27248: ST_TO_ADDR
// if not tmp then
27249: LD_VAR 0 4
27253: NOT
27254: IFFALSE 27258
// exit ;
27256: GO 27317
// for i in tmp do
27258: LD_ADDR_VAR 0 2
27262: PUSH
27263: LD_VAR 0 4
27267: PUSH
27268: FOR_IN
27269: IFFALSE 27315
// for j = 1 to 3 do
27271: LD_ADDR_VAR 0 3
27275: PUSH
27276: DOUBLE
27277: LD_INT 1
27279: DEC
27280: ST_TO_ADDR
27281: LD_INT 3
27283: PUSH
27284: FOR_TO
27285: IFFALSE 27311
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
27287: LD_VAR 0 2
27291: PPUSH
27292: CALL_OW 274
27296: PPUSH
27297: LD_VAR 0 3
27301: PPUSH
27302: LD_INT 99999
27304: PPUSH
27305: CALL_OW 277
27309: GO 27284
27311: POP
27312: POP
27313: GO 27268
27315: POP
27316: POP
// end ;
27317: LD_VAR 0 1
27321: RET
// export function hHackSetLevel10 ; var i , j ; begin
27322: LD_INT 0
27324: PPUSH
27325: PPUSH
27326: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27327: LD_ADDR_VAR 0 2
27331: PUSH
27332: LD_INT 21
27334: PUSH
27335: LD_INT 1
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PPUSH
27342: CALL_OW 69
27346: PUSH
27347: FOR_IN
27348: IFFALSE 27400
// if IsSelected ( i ) then
27350: LD_VAR 0 2
27354: PPUSH
27355: CALL_OW 306
27359: IFFALSE 27398
// begin for j := 1 to 4 do
27361: LD_ADDR_VAR 0 3
27365: PUSH
27366: DOUBLE
27367: LD_INT 1
27369: DEC
27370: ST_TO_ADDR
27371: LD_INT 4
27373: PUSH
27374: FOR_TO
27375: IFFALSE 27396
// SetSkill ( i , j , 10 ) ;
27377: LD_VAR 0 2
27381: PPUSH
27382: LD_VAR 0 3
27386: PPUSH
27387: LD_INT 10
27389: PPUSH
27390: CALL_OW 237
27394: GO 27374
27396: POP
27397: POP
// end ;
27398: GO 27347
27400: POP
27401: POP
// end ;
27402: LD_VAR 0 1
27406: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
27407: LD_INT 0
27409: PPUSH
27410: PPUSH
27411: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
27412: LD_ADDR_VAR 0 2
27416: PUSH
27417: LD_INT 22
27419: PUSH
27420: LD_OWVAR 2
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 21
27431: PUSH
27432: LD_INT 1
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PPUSH
27443: CALL_OW 69
27447: PUSH
27448: FOR_IN
27449: IFFALSE 27490
// begin for j := 1 to 4 do
27451: LD_ADDR_VAR 0 3
27455: PUSH
27456: DOUBLE
27457: LD_INT 1
27459: DEC
27460: ST_TO_ADDR
27461: LD_INT 4
27463: PUSH
27464: FOR_TO
27465: IFFALSE 27486
// SetSkill ( i , j , 10 ) ;
27467: LD_VAR 0 2
27471: PPUSH
27472: LD_VAR 0 3
27476: PPUSH
27477: LD_INT 10
27479: PPUSH
27480: CALL_OW 237
27484: GO 27464
27486: POP
27487: POP
// end ;
27488: GO 27448
27490: POP
27491: POP
// end ;
27492: LD_VAR 0 1
27496: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
27497: LD_INT 0
27499: PPUSH
// uc_side := your_side ;
27500: LD_ADDR_OWVAR 20
27504: PUSH
27505: LD_OWVAR 2
27509: ST_TO_ADDR
// uc_nation := nation ;
27510: LD_ADDR_OWVAR 21
27514: PUSH
27515: LD_VAR 0 1
27519: ST_TO_ADDR
// InitHc ;
27520: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
27524: LD_INT 0
27526: PPUSH
27527: LD_VAR 0 2
27531: PPUSH
27532: LD_VAR 0 3
27536: PPUSH
27537: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
27541: CALL_OW 44
27545: PPUSH
27546: LD_INT 1
27548: PPUSH
27549: CALL_OW 51
// end ;
27553: LD_VAR 0 4
27557: RET
// export function hHackSpawnVehicle ; begin
27558: LD_INT 0
27560: PPUSH
// uc_side := your_side ;
27561: LD_ADDR_OWVAR 20
27565: PUSH
27566: LD_OWVAR 2
27570: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
27571: LD_ADDR_OWVAR 21
27575: PUSH
27576: LD_INT 1
27578: PPUSH
27579: LD_INT 3
27581: PPUSH
27582: CALL_OW 12
27586: ST_TO_ADDR
// InitVc ;
27587: CALL_OW 20
// case uc_nation of 1 :
27591: LD_OWVAR 21
27595: PUSH
27596: LD_INT 1
27598: DOUBLE
27599: EQUAL
27600: IFTRUE 27604
27602: GO 27748
27604: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
27605: LD_ADDR_OWVAR 37
27609: PUSH
27610: LD_INT 1
27612: PUSH
27613: LD_INT 2
27615: PUSH
27616: LD_INT 3
27618: PUSH
27619: LD_INT 4
27621: PUSH
27622: LD_INT 5
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 1
27634: PPUSH
27635: LD_INT 5
27637: PPUSH
27638: CALL_OW 12
27642: ARRAY
27643: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
27644: LD_ADDR_OWVAR 39
27648: PUSH
27649: LD_INT 1
27651: PPUSH
27652: LD_INT 3
27654: PPUSH
27655: CALL_OW 12
27659: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
27660: LD_ADDR_OWVAR 38
27664: PUSH
27665: LD_INT 1
27667: PUSH
27668: LD_INT 2
27670: PUSH
27671: LD_INT 3
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 1
27681: PPUSH
27682: LD_INT 3
27684: PPUSH
27685: CALL_OW 12
27689: ARRAY
27690: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
27691: LD_ADDR_OWVAR 40
27695: PUSH
27696: LD_INT 2
27698: PUSH
27699: LD_INT 4
27701: PUSH
27702: LD_INT 5
27704: PUSH
27705: LD_INT 3
27707: PUSH
27708: LD_INT 7
27710: PUSH
27711: LD_INT 8
27713: PUSH
27714: LD_INT 9
27716: PUSH
27717: LD_INT 10
27719: PUSH
27720: LD_INT 6
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 1
27736: PPUSH
27737: LD_INT 9
27739: PPUSH
27740: CALL_OW 12
27744: ARRAY
27745: ST_TO_ADDR
// end ; 2 :
27746: GO 28013
27748: LD_INT 2
27750: DOUBLE
27751: EQUAL
27752: IFTRUE 27756
27754: GO 27880
27756: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
27757: LD_ADDR_OWVAR 37
27761: PUSH
27762: LD_INT 11
27764: PUSH
27765: LD_INT 12
27767: PUSH
27768: LD_INT 13
27770: PUSH
27771: LD_INT 14
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 1
27782: PPUSH
27783: LD_INT 4
27785: PPUSH
27786: CALL_OW 12
27790: ARRAY
27791: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
27792: LD_ADDR_OWVAR 39
27796: PUSH
27797: LD_INT 1
27799: PPUSH
27800: LD_INT 3
27802: PPUSH
27803: CALL_OW 12
27807: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
27808: LD_ADDR_OWVAR 38
27812: PUSH
27813: LD_INT 1
27815: PUSH
27816: LD_INT 2
27818: PUSH
27819: LD_INT 5
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 1
27829: PPUSH
27830: LD_INT 3
27832: PPUSH
27833: CALL_OW 12
27837: ARRAY
27838: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
27839: LD_ADDR_OWVAR 40
27843: PUSH
27844: LD_INT 24
27846: PUSH
27847: LD_INT 26
27849: PUSH
27850: LD_INT 27
27852: PUSH
27853: LD_INT 28
27855: PUSH
27856: LD_INT 29
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 1
27868: PPUSH
27869: LD_INT 5
27871: PPUSH
27872: CALL_OW 12
27876: ARRAY
27877: ST_TO_ADDR
// end ; 3 :
27878: GO 28013
27880: LD_INT 3
27882: DOUBLE
27883: EQUAL
27884: IFTRUE 27888
27886: GO 28012
27888: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
27889: LD_ADDR_OWVAR 37
27893: PUSH
27894: LD_INT 21
27896: PUSH
27897: LD_INT 23
27899: PUSH
27900: LD_INT 22
27902: PUSH
27903: LD_INT 24
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 1
27914: PPUSH
27915: LD_INT 4
27917: PPUSH
27918: CALL_OW 12
27922: ARRAY
27923: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
27924: LD_ADDR_OWVAR 39
27928: PUSH
27929: LD_INT 1
27931: PPUSH
27932: LD_INT 3
27934: PPUSH
27935: CALL_OW 12
27939: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
27940: LD_ADDR_OWVAR 38
27944: PUSH
27945: LD_INT 1
27947: PUSH
27948: LD_INT 3
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 1
27957: PPUSH
27958: LD_INT 2
27960: PPUSH
27961: CALL_OW 12
27965: ARRAY
27966: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
27967: LD_ADDR_OWVAR 40
27971: PUSH
27972: LD_INT 42
27974: PUSH
27975: LD_INT 43
27977: PUSH
27978: LD_INT 44
27980: PUSH
27981: LD_INT 46
27983: PUSH
27984: LD_INT 48
27986: PUSH
27987: LD_INT 47
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 1
28000: PPUSH
28001: LD_INT 6
28003: PPUSH
28004: CALL_OW 12
28008: ARRAY
28009: ST_TO_ADDR
// end ; end ;
28010: GO 28013
28012: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28013: CALL_OW 45
28017: PPUSH
28018: LD_INT 1
28020: PPUSH
28021: CALL_OW 51
// end ;
28025: LD_VAR 0 1
28029: RET
// export hInvincible ; every 1 do
28030: GO 28032
28032: DISABLE
// hInvincible := [ ] ;
28033: LD_ADDR_EXP 104
28037: PUSH
28038: EMPTY
28039: ST_TO_ADDR
28040: END
// every 10 do var i ;
28041: GO 28043
28043: DISABLE
28044: LD_INT 0
28046: PPUSH
// begin enable ;
28047: ENABLE
// if not hInvincible then
28048: LD_EXP 104
28052: NOT
28053: IFFALSE 28057
// exit ;
28055: GO 28101
// for i in hInvincible do
28057: LD_ADDR_VAR 0 1
28061: PUSH
28062: LD_EXP 104
28066: PUSH
28067: FOR_IN
28068: IFFALSE 28099
// if GetLives ( i ) < 1000 then
28070: LD_VAR 0 1
28074: PPUSH
28075: CALL_OW 256
28079: PUSH
28080: LD_INT 1000
28082: LESS
28083: IFFALSE 28097
// SetLives ( i , 1000 ) ;
28085: LD_VAR 0 1
28089: PPUSH
28090: LD_INT 1000
28092: PPUSH
28093: CALL_OW 234
28097: GO 28067
28099: POP
28100: POP
// end ;
28101: PPOPN 1
28103: END
// export function hHackInvincible ; var i ; begin
28104: LD_INT 0
28106: PPUSH
28107: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28108: LD_ADDR_VAR 0 2
28112: PUSH
28113: LD_INT 2
28115: PUSH
28116: LD_INT 21
28118: PUSH
28119: LD_INT 1
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 21
28128: PUSH
28129: LD_INT 2
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: LIST
28140: PPUSH
28141: CALL_OW 69
28145: PUSH
28146: FOR_IN
28147: IFFALSE 28208
// if IsSelected ( i ) then
28149: LD_VAR 0 2
28153: PPUSH
28154: CALL_OW 306
28158: IFFALSE 28206
// begin if i in hInvincible then
28160: LD_VAR 0 2
28164: PUSH
28165: LD_EXP 104
28169: IN
28170: IFFALSE 28190
// hInvincible := hInvincible diff i else
28172: LD_ADDR_EXP 104
28176: PUSH
28177: LD_EXP 104
28181: PUSH
28182: LD_VAR 0 2
28186: DIFF
28187: ST_TO_ADDR
28188: GO 28206
// hInvincible := hInvincible union i ;
28190: LD_ADDR_EXP 104
28194: PUSH
28195: LD_EXP 104
28199: PUSH
28200: LD_VAR 0 2
28204: UNION
28205: ST_TO_ADDR
// end ;
28206: GO 28146
28208: POP
28209: POP
// end ;
28210: LD_VAR 0 1
28214: RET
// export function hHackInvisible ; var i , j ; begin
28215: LD_INT 0
28217: PPUSH
28218: PPUSH
28219: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28220: LD_ADDR_VAR 0 2
28224: PUSH
28225: LD_INT 21
28227: PUSH
28228: LD_INT 1
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PPUSH
28235: CALL_OW 69
28239: PUSH
28240: FOR_IN
28241: IFFALSE 28265
// if IsSelected ( i ) then
28243: LD_VAR 0 2
28247: PPUSH
28248: CALL_OW 306
28252: IFFALSE 28263
// ComForceInvisible ( i ) ;
28254: LD_VAR 0 2
28258: PPUSH
28259: CALL_OW 496
28263: GO 28240
28265: POP
28266: POP
// end ;
28267: LD_VAR 0 1
28271: RET
// export function hHackChangeYourSide ; begin
28272: LD_INT 0
28274: PPUSH
// if your_side = 8 then
28275: LD_OWVAR 2
28279: PUSH
28280: LD_INT 8
28282: EQUAL
28283: IFFALSE 28295
// your_side := 0 else
28285: LD_ADDR_OWVAR 2
28289: PUSH
28290: LD_INT 0
28292: ST_TO_ADDR
28293: GO 28309
// your_side := your_side + 1 ;
28295: LD_ADDR_OWVAR 2
28299: PUSH
28300: LD_OWVAR 2
28304: PUSH
28305: LD_INT 1
28307: PLUS
28308: ST_TO_ADDR
// end ;
28309: LD_VAR 0 1
28313: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28314: LD_INT 0
28316: PPUSH
28317: PPUSH
28318: PPUSH
// for i in all_units do
28319: LD_ADDR_VAR 0 2
28323: PUSH
28324: LD_OWVAR 3
28328: PUSH
28329: FOR_IN
28330: IFFALSE 28408
// if IsSelected ( i ) then
28332: LD_VAR 0 2
28336: PPUSH
28337: CALL_OW 306
28341: IFFALSE 28406
// begin j := GetSide ( i ) ;
28343: LD_ADDR_VAR 0 3
28347: PUSH
28348: LD_VAR 0 2
28352: PPUSH
28353: CALL_OW 255
28357: ST_TO_ADDR
// if j = 8 then
28358: LD_VAR 0 3
28362: PUSH
28363: LD_INT 8
28365: EQUAL
28366: IFFALSE 28378
// j := 0 else
28368: LD_ADDR_VAR 0 3
28372: PUSH
28373: LD_INT 0
28375: ST_TO_ADDR
28376: GO 28392
// j := j + 1 ;
28378: LD_ADDR_VAR 0 3
28382: PUSH
28383: LD_VAR 0 3
28387: PUSH
28388: LD_INT 1
28390: PLUS
28391: ST_TO_ADDR
// SetSide ( i , j ) ;
28392: LD_VAR 0 2
28396: PPUSH
28397: LD_VAR 0 3
28401: PPUSH
28402: CALL_OW 235
// end ;
28406: GO 28329
28408: POP
28409: POP
// end ;
28410: LD_VAR 0 1
28414: RET
// export function hHackFog ; begin
28415: LD_INT 0
28417: PPUSH
// FogOff ( true ) ;
28418: LD_INT 1
28420: PPUSH
28421: CALL_OW 344
// end ;
28425: LD_VAR 0 1
28429: RET
// export function hHackApeman ; begin
28430: LD_INT 0
28432: PPUSH
// uc_side := your_side ;
28433: LD_ADDR_OWVAR 20
28437: PUSH
28438: LD_OWVAR 2
28442: ST_TO_ADDR
// uc_nation := 0 ;
28443: LD_ADDR_OWVAR 21
28447: PUSH
28448: LD_INT 0
28450: ST_TO_ADDR
// hc_name :=  ;
28451: LD_ADDR_OWVAR 26
28455: PUSH
28456: LD_STRING 
28458: ST_TO_ADDR
// hc_gallery :=  ;
28459: LD_ADDR_OWVAR 33
28463: PUSH
28464: LD_STRING 
28466: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
28467: LD_ADDR_OWVAR 31
28471: PUSH
28472: LD_INT 0
28474: PUSH
28475: LD_INT 0
28477: PUSH
28478: LD_INT 0
28480: PUSH
28481: LD_INT 0
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: ST_TO_ADDR
// hc_class := class_apeman ;
28490: LD_ADDR_OWVAR 28
28494: PUSH
28495: LD_INT 12
28497: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
28498: CALL_OW 44
28502: PPUSH
28503: LD_INT 1
28505: PPUSH
28506: CALL_OW 51
// end ;
28510: LD_VAR 0 1
28514: RET
// export function hHackBoom ; begin
28515: LD_INT 0
28517: PPUSH
// uc_side := your_side ;
28518: LD_ADDR_OWVAR 20
28522: PUSH
28523: LD_OWVAR 2
28527: ST_TO_ADDR
// uc_nation := 1 ;
28528: LD_ADDR_OWVAR 21
28532: PUSH
28533: LD_INT 1
28535: ST_TO_ADDR
// vc_chassis := us_morphling ;
28536: LD_ADDR_OWVAR 37
28540: PUSH
28541: LD_INT 5
28543: ST_TO_ADDR
// vc_engine := engine_siberite ;
28544: LD_ADDR_OWVAR 39
28548: PUSH
28549: LD_INT 3
28551: ST_TO_ADDR
// vc_control := control_computer ;
28552: LD_ADDR_OWVAR 38
28556: PUSH
28557: LD_INT 3
28559: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
28560: LD_ADDR_OWVAR 40
28564: PUSH
28565: LD_INT 8
28567: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28568: CALL_OW 45
28572: PPUSH
28573: LD_INT 1
28575: PPUSH
28576: CALL_OW 51
// end ; end_of_file
28580: LD_VAR 0 1
28584: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28585: LD_INT 0
28587: PPUSH
28588: PPUSH
28589: PPUSH
28590: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28591: LD_VAR 0 1
28595: PPUSH
28596: CALL_OW 264
28600: PUSH
28601: LD_EXP 39
28605: EQUAL
28606: IFFALSE 28678
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28608: LD_INT 68
28610: PPUSH
28611: LD_VAR 0 1
28615: PPUSH
28616: CALL_OW 255
28620: PPUSH
28621: CALL_OW 321
28625: PUSH
28626: LD_INT 2
28628: EQUAL
28629: IFFALSE 28641
// eff := 70 else
28631: LD_ADDR_VAR 0 4
28635: PUSH
28636: LD_INT 70
28638: ST_TO_ADDR
28639: GO 28649
// eff := 30 ;
28641: LD_ADDR_VAR 0 4
28645: PUSH
28646: LD_INT 30
28648: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28649: LD_VAR 0 1
28653: PPUSH
28654: CALL_OW 250
28658: PPUSH
28659: LD_VAR 0 1
28663: PPUSH
28664: CALL_OW 251
28668: PPUSH
28669: LD_VAR 0 4
28673: PPUSH
28674: CALL_OW 495
// end ; end ;
28678: LD_VAR 0 2
28682: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28683: LD_INT 0
28685: PPUSH
// end ;
28686: LD_VAR 0 4
28690: RET
// export function SOS_Command ( cmd ) ; begin
28691: LD_INT 0
28693: PPUSH
// end ;
28694: LD_VAR 0 2
28698: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28699: LD_INT 0
28701: PPUSH
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28702: LD_VAR 0 1
28706: PUSH
28707: LD_INT 254
28709: EQUAL
28710: PUSH
28711: LD_VAR 0 2
28715: PPUSH
28716: CALL_OW 264
28720: PUSH
28721: LD_EXP 37
28725: EQUAL
28726: AND
28727: PUSH
28728: LD_VAR 0 3
28732: PPUSH
28733: CALL_OW 263
28737: PUSH
28738: LD_INT 3
28740: EQUAL
28741: AND
28742: IFFALSE 28758
// HackDestroyVehicle ( unit , selectedUnit ) ;
28744: LD_VAR 0 2
28748: PPUSH
28749: LD_VAR 0 3
28753: PPUSH
28754: CALL 30267 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28758: LD_VAR 0 1
28762: PUSH
28763: LD_INT 255
28765: EQUAL
28766: PUSH
28767: LD_VAR 0 2
28771: PPUSH
28772: CALL_OW 264
28776: PUSH
28777: LD_INT 14
28779: PUSH
28780: LD_INT 53
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: IN
28787: AND
28788: PUSH
28789: LD_VAR 0 4
28793: PPUSH
28794: LD_VAR 0 5
28798: PPUSH
28799: CALL_OW 488
28803: AND
28804: IFFALSE 28828
// CutTreeXYR ( unit , x , y , 12 ) ;
28806: LD_VAR 0 2
28810: PPUSH
28811: LD_VAR 0 4
28815: PPUSH
28816: LD_VAR 0 5
28820: PPUSH
28821: LD_INT 12
28823: PPUSH
28824: CALL 28833 0 4
// end ;
28828: LD_VAR 0 6
28832: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28833: LD_INT 0
28835: PPUSH
28836: PPUSH
28837: PPUSH
28838: PPUSH
28839: PPUSH
28840: PPUSH
28841: PPUSH
28842: PPUSH
28843: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
28844: LD_VAR 0 1
28848: NOT
28849: PUSH
28850: LD_VAR 0 2
28854: PPUSH
28855: LD_VAR 0 3
28859: PPUSH
28860: CALL_OW 488
28864: NOT
28865: OR
28866: PUSH
28867: LD_VAR 0 4
28871: NOT
28872: OR
28873: IFFALSE 28877
// exit ;
28875: GO 29217
// list := [ ] ;
28877: LD_ADDR_VAR 0 13
28881: PUSH
28882: EMPTY
28883: ST_TO_ADDR
// if x - r < 0 then
28884: LD_VAR 0 2
28888: PUSH
28889: LD_VAR 0 4
28893: MINUS
28894: PUSH
28895: LD_INT 0
28897: LESS
28898: IFFALSE 28910
// min_x := 0 else
28900: LD_ADDR_VAR 0 7
28904: PUSH
28905: LD_INT 0
28907: ST_TO_ADDR
28908: GO 28926
// min_x := x - r ;
28910: LD_ADDR_VAR 0 7
28914: PUSH
28915: LD_VAR 0 2
28919: PUSH
28920: LD_VAR 0 4
28924: MINUS
28925: ST_TO_ADDR
// if y - r < 0 then
28926: LD_VAR 0 3
28930: PUSH
28931: LD_VAR 0 4
28935: MINUS
28936: PUSH
28937: LD_INT 0
28939: LESS
28940: IFFALSE 28952
// min_y := 0 else
28942: LD_ADDR_VAR 0 8
28946: PUSH
28947: LD_INT 0
28949: ST_TO_ADDR
28950: GO 28968
// min_y := y - r ;
28952: LD_ADDR_VAR 0 8
28956: PUSH
28957: LD_VAR 0 3
28961: PUSH
28962: LD_VAR 0 4
28966: MINUS
28967: ST_TO_ADDR
// max_x := x + r ;
28968: LD_ADDR_VAR 0 9
28972: PUSH
28973: LD_VAR 0 2
28977: PUSH
28978: LD_VAR 0 4
28982: PLUS
28983: ST_TO_ADDR
// max_y := y + r ;
28984: LD_ADDR_VAR 0 10
28988: PUSH
28989: LD_VAR 0 3
28993: PUSH
28994: LD_VAR 0 4
28998: PLUS
28999: ST_TO_ADDR
// for _x = min_x to max_x do
29000: LD_ADDR_VAR 0 11
29004: PUSH
29005: DOUBLE
29006: LD_VAR 0 7
29010: DEC
29011: ST_TO_ADDR
29012: LD_VAR 0 9
29016: PUSH
29017: FOR_TO
29018: IFFALSE 29135
// for _y = min_y to max_y do
29020: LD_ADDR_VAR 0 12
29024: PUSH
29025: DOUBLE
29026: LD_VAR 0 8
29030: DEC
29031: ST_TO_ADDR
29032: LD_VAR 0 10
29036: PUSH
29037: FOR_TO
29038: IFFALSE 29131
// begin if not ValidHex ( _x , _y ) then
29040: LD_VAR 0 11
29044: PPUSH
29045: LD_VAR 0 12
29049: PPUSH
29050: CALL_OW 488
29054: NOT
29055: IFFALSE 29059
// continue ;
29057: GO 29037
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29059: LD_VAR 0 11
29063: PPUSH
29064: LD_VAR 0 12
29068: PPUSH
29069: CALL_OW 351
29073: PUSH
29074: LD_VAR 0 11
29078: PPUSH
29079: LD_VAR 0 12
29083: PPUSH
29084: CALL_OW 554
29088: AND
29089: IFFALSE 29129
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29091: LD_ADDR_VAR 0 13
29095: PUSH
29096: LD_VAR 0 13
29100: PPUSH
29101: LD_VAR 0 13
29105: PUSH
29106: LD_INT 1
29108: PLUS
29109: PPUSH
29110: LD_VAR 0 11
29114: PUSH
29115: LD_VAR 0 12
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PPUSH
29124: CALL_OW 2
29128: ST_TO_ADDR
// end ;
29129: GO 29037
29131: POP
29132: POP
29133: GO 29017
29135: POP
29136: POP
// if not list then
29137: LD_VAR 0 13
29141: NOT
29142: IFFALSE 29146
// exit ;
29144: GO 29217
// for i in list do
29146: LD_ADDR_VAR 0 6
29150: PUSH
29151: LD_VAR 0 13
29155: PUSH
29156: FOR_IN
29157: IFFALSE 29215
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29159: LD_VAR 0 1
29163: PPUSH
29164: LD_STRING M
29166: PUSH
29167: LD_VAR 0 6
29171: PUSH
29172: LD_INT 1
29174: ARRAY
29175: PUSH
29176: LD_VAR 0 6
29180: PUSH
29181: LD_INT 2
29183: ARRAY
29184: PUSH
29185: LD_INT 0
29187: PUSH
29188: LD_INT 0
29190: PUSH
29191: LD_INT 0
29193: PUSH
29194: LD_INT 0
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: PUSH
29206: EMPTY
29207: LIST
29208: PPUSH
29209: CALL_OW 447
29213: GO 29156
29215: POP
29216: POP
// end ;
29217: LD_VAR 0 5
29221: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29222: LD_EXP 105
29226: NOT
29227: IFFALSE 29277
29229: GO 29231
29231: DISABLE
// begin initHack := true ;
29232: LD_ADDR_EXP 105
29236: PUSH
29237: LD_INT 1
29239: ST_TO_ADDR
// hackTanks := [ ] ;
29240: LD_ADDR_EXP 106
29244: PUSH
29245: EMPTY
29246: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29247: LD_ADDR_EXP 107
29251: PUSH
29252: EMPTY
29253: ST_TO_ADDR
// hackLimit := 3 ;
29254: LD_ADDR_EXP 108
29258: PUSH
29259: LD_INT 3
29261: ST_TO_ADDR
// hackDist := 12 ;
29262: LD_ADDR_EXP 109
29266: PUSH
29267: LD_INT 12
29269: ST_TO_ADDR
// hackCounter := [ ] ;
29270: LD_ADDR_EXP 110
29274: PUSH
29275: EMPTY
29276: ST_TO_ADDR
// end ;
29277: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29278: LD_EXP 105
29282: PUSH
29283: LD_INT 34
29285: PUSH
29286: LD_EXP 37
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PPUSH
29295: CALL_OW 69
29299: AND
29300: IFFALSE 29555
29302: GO 29304
29304: DISABLE
29305: LD_INT 0
29307: PPUSH
29308: PPUSH
// begin enable ;
29309: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29310: LD_ADDR_VAR 0 1
29314: PUSH
29315: LD_INT 34
29317: PUSH
29318: LD_EXP 37
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PPUSH
29327: CALL_OW 69
29331: PUSH
29332: FOR_IN
29333: IFFALSE 29553
// begin if not i in hackTanks then
29335: LD_VAR 0 1
29339: PUSH
29340: LD_EXP 106
29344: IN
29345: NOT
29346: IFFALSE 29429
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29348: LD_ADDR_EXP 106
29352: PUSH
29353: LD_EXP 106
29357: PPUSH
29358: LD_EXP 106
29362: PUSH
29363: LD_INT 1
29365: PLUS
29366: PPUSH
29367: LD_VAR 0 1
29371: PPUSH
29372: CALL_OW 1
29376: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29377: LD_ADDR_EXP 107
29381: PUSH
29382: LD_EXP 107
29386: PPUSH
29387: LD_EXP 107
29391: PUSH
29392: LD_INT 1
29394: PLUS
29395: PPUSH
29396: EMPTY
29397: PPUSH
29398: CALL_OW 1
29402: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29403: LD_ADDR_EXP 110
29407: PUSH
29408: LD_EXP 110
29412: PPUSH
29413: LD_EXP 110
29417: PUSH
29418: LD_INT 1
29420: PLUS
29421: PPUSH
29422: EMPTY
29423: PPUSH
29424: CALL_OW 1
29428: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29429: LD_VAR 0 1
29433: PPUSH
29434: CALL_OW 302
29438: NOT
29439: IFFALSE 29452
// begin HackUnlinkAll ( i ) ;
29441: LD_VAR 0 1
29445: PPUSH
29446: CALL 29558 0 1
// continue ;
29450: GO 29332
// end ; HackCheckCapturedStatus ( i ) ;
29452: LD_VAR 0 1
29456: PPUSH
29457: CALL 30001 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29461: LD_ADDR_VAR 0 2
29465: PUSH
29466: LD_INT 81
29468: PUSH
29469: LD_VAR 0 1
29473: PPUSH
29474: CALL_OW 255
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 33
29485: PUSH
29486: LD_INT 3
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 91
29495: PUSH
29496: LD_VAR 0 1
29500: PUSH
29501: LD_EXP 109
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 50
29513: PUSH
29514: EMPTY
29515: LIST
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: PPUSH
29523: CALL_OW 69
29527: ST_TO_ADDR
// if not tmp then
29528: LD_VAR 0 2
29532: NOT
29533: IFFALSE 29537
// continue ;
29535: GO 29332
// HackLink ( i , tmp ) ;
29537: LD_VAR 0 1
29541: PPUSH
29542: LD_VAR 0 2
29546: PPUSH
29547: CALL 29694 0 2
// end ;
29551: GO 29332
29553: POP
29554: POP
// end ;
29555: PPOPN 2
29557: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29558: LD_INT 0
29560: PPUSH
29561: PPUSH
29562: PPUSH
// if not hack in hackTanks then
29563: LD_VAR 0 1
29567: PUSH
29568: LD_EXP 106
29572: IN
29573: NOT
29574: IFFALSE 29578
// exit ;
29576: GO 29689
// index := GetElementIndex ( hackTanks , hack ) ;
29578: LD_ADDR_VAR 0 4
29582: PUSH
29583: LD_EXP 106
29587: PPUSH
29588: LD_VAR 0 1
29592: PPUSH
29593: CALL 35109 0 2
29597: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29598: LD_EXP 107
29602: PUSH
29603: LD_VAR 0 4
29607: ARRAY
29608: IFFALSE 29689
// begin for i in hackTanksCaptured [ index ] do
29610: LD_ADDR_VAR 0 3
29614: PUSH
29615: LD_EXP 107
29619: PUSH
29620: LD_VAR 0 4
29624: ARRAY
29625: PUSH
29626: FOR_IN
29627: IFFALSE 29653
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29629: LD_VAR 0 3
29633: PUSH
29634: LD_INT 1
29636: ARRAY
29637: PPUSH
29638: LD_VAR 0 3
29642: PUSH
29643: LD_INT 2
29645: ARRAY
29646: PPUSH
29647: CALL_OW 235
29651: GO 29626
29653: POP
29654: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29655: LD_ADDR_EXP 107
29659: PUSH
29660: LD_EXP 107
29664: PPUSH
29665: LD_VAR 0 4
29669: PPUSH
29670: EMPTY
29671: PPUSH
29672: CALL_OW 1
29676: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29677: LD_VAR 0 1
29681: PPUSH
29682: LD_INT 0
29684: PPUSH
29685: CALL_OW 505
// end ; end ;
29689: LD_VAR 0 2
29693: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29694: LD_INT 0
29696: PPUSH
29697: PPUSH
29698: PPUSH
// if not hack in hackTanks or not vehicles then
29699: LD_VAR 0 1
29703: PUSH
29704: LD_EXP 106
29708: IN
29709: NOT
29710: PUSH
29711: LD_VAR 0 2
29715: NOT
29716: OR
29717: IFFALSE 29721
// exit ;
29719: GO 29996
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29721: LD_ADDR_VAR 0 2
29725: PUSH
29726: LD_VAR 0 1
29730: PPUSH
29731: LD_VAR 0 2
29735: PPUSH
29736: LD_INT 1
29738: PPUSH
29739: LD_INT 1
29741: PPUSH
29742: CALL 35759 0 4
29746: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29747: LD_ADDR_VAR 0 5
29751: PUSH
29752: LD_EXP 106
29756: PPUSH
29757: LD_VAR 0 1
29761: PPUSH
29762: CALL 35109 0 2
29766: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29767: LD_EXP 107
29771: PUSH
29772: LD_VAR 0 5
29776: ARRAY
29777: PUSH
29778: LD_EXP 108
29782: LESS
29783: IFFALSE 29972
// begin for i := 1 to vehicles do
29785: LD_ADDR_VAR 0 4
29789: PUSH
29790: DOUBLE
29791: LD_INT 1
29793: DEC
29794: ST_TO_ADDR
29795: LD_VAR 0 2
29799: PUSH
29800: FOR_TO
29801: IFFALSE 29970
// begin if hackTanksCaptured [ index ] = hackLimit then
29803: LD_EXP 107
29807: PUSH
29808: LD_VAR 0 5
29812: ARRAY
29813: PUSH
29814: LD_EXP 108
29818: EQUAL
29819: IFFALSE 29823
// break ;
29821: GO 29970
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29823: LD_ADDR_EXP 110
29827: PUSH
29828: LD_EXP 110
29832: PPUSH
29833: LD_VAR 0 5
29837: PPUSH
29838: LD_EXP 110
29842: PUSH
29843: LD_VAR 0 5
29847: ARRAY
29848: PUSH
29849: LD_INT 1
29851: PLUS
29852: PPUSH
29853: CALL_OW 1
29857: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29858: LD_ADDR_EXP 107
29862: PUSH
29863: LD_EXP 107
29867: PPUSH
29868: LD_VAR 0 5
29872: PUSH
29873: LD_EXP 107
29877: PUSH
29878: LD_VAR 0 5
29882: ARRAY
29883: PUSH
29884: LD_INT 1
29886: PLUS
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PPUSH
29892: LD_VAR 0 2
29896: PUSH
29897: LD_VAR 0 4
29901: ARRAY
29902: PUSH
29903: LD_VAR 0 2
29907: PUSH
29908: LD_VAR 0 4
29912: ARRAY
29913: PPUSH
29914: CALL_OW 255
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PPUSH
29923: CALL 35324 0 3
29927: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29928: LD_VAR 0 2
29932: PUSH
29933: LD_VAR 0 4
29937: ARRAY
29938: PPUSH
29939: LD_VAR 0 1
29943: PPUSH
29944: CALL_OW 255
29948: PPUSH
29949: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29953: LD_VAR 0 2
29957: PUSH
29958: LD_VAR 0 4
29962: ARRAY
29963: PPUSH
29964: CALL_OW 141
// end ;
29968: GO 29800
29970: POP
29971: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29972: LD_VAR 0 1
29976: PPUSH
29977: LD_EXP 107
29981: PUSH
29982: LD_VAR 0 5
29986: ARRAY
29987: PUSH
29988: LD_INT 0
29990: PLUS
29991: PPUSH
29992: CALL_OW 505
// end ;
29996: LD_VAR 0 3
30000: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30001: LD_INT 0
30003: PPUSH
30004: PPUSH
30005: PPUSH
30006: PPUSH
// if not hack in hackTanks then
30007: LD_VAR 0 1
30011: PUSH
30012: LD_EXP 106
30016: IN
30017: NOT
30018: IFFALSE 30022
// exit ;
30020: GO 30262
// index := GetElementIndex ( hackTanks , hack ) ;
30022: LD_ADDR_VAR 0 4
30026: PUSH
30027: LD_EXP 106
30031: PPUSH
30032: LD_VAR 0 1
30036: PPUSH
30037: CALL 35109 0 2
30041: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30042: LD_ADDR_VAR 0 3
30046: PUSH
30047: DOUBLE
30048: LD_EXP 107
30052: PUSH
30053: LD_VAR 0 4
30057: ARRAY
30058: INC
30059: ST_TO_ADDR
30060: LD_INT 1
30062: PUSH
30063: FOR_DOWNTO
30064: IFFALSE 30236
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30066: LD_ADDR_VAR 0 5
30070: PUSH
30071: LD_EXP 107
30075: PUSH
30076: LD_VAR 0 4
30080: ARRAY
30081: PUSH
30082: LD_VAR 0 3
30086: ARRAY
30087: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30088: LD_VAR 0 5
30092: PUSH
30093: LD_INT 1
30095: ARRAY
30096: PPUSH
30097: CALL_OW 302
30101: NOT
30102: PUSH
30103: LD_VAR 0 5
30107: PUSH
30108: LD_INT 1
30110: ARRAY
30111: PPUSH
30112: CALL_OW 255
30116: PUSH
30117: LD_VAR 0 1
30121: PPUSH
30122: CALL_OW 255
30126: NONEQUAL
30127: OR
30128: IFFALSE 30234
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30130: LD_VAR 0 5
30134: PUSH
30135: LD_INT 1
30137: ARRAY
30138: PPUSH
30139: CALL_OW 305
30143: PUSH
30144: LD_VAR 0 5
30148: PUSH
30149: LD_INT 1
30151: ARRAY
30152: PPUSH
30153: CALL_OW 255
30157: PUSH
30158: LD_VAR 0 1
30162: PPUSH
30163: CALL_OW 255
30167: EQUAL
30168: AND
30169: IFFALSE 30193
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30171: LD_VAR 0 5
30175: PUSH
30176: LD_INT 1
30178: ARRAY
30179: PPUSH
30180: LD_VAR 0 5
30184: PUSH
30185: LD_INT 2
30187: ARRAY
30188: PPUSH
30189: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30193: LD_ADDR_EXP 107
30197: PUSH
30198: LD_EXP 107
30202: PPUSH
30203: LD_VAR 0 4
30207: PPUSH
30208: LD_EXP 107
30212: PUSH
30213: LD_VAR 0 4
30217: ARRAY
30218: PPUSH
30219: LD_VAR 0 3
30223: PPUSH
30224: CALL_OW 3
30228: PPUSH
30229: CALL_OW 1
30233: ST_TO_ADDR
// end ; end ;
30234: GO 30063
30236: POP
30237: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30238: LD_VAR 0 1
30242: PPUSH
30243: LD_EXP 107
30247: PUSH
30248: LD_VAR 0 4
30252: ARRAY
30253: PUSH
30254: LD_INT 0
30256: PLUS
30257: PPUSH
30258: CALL_OW 505
// end ;
30262: LD_VAR 0 2
30266: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30267: LD_INT 0
30269: PPUSH
30270: PPUSH
30271: PPUSH
30272: PPUSH
// if not hack in hackTanks then
30273: LD_VAR 0 1
30277: PUSH
30278: LD_EXP 106
30282: IN
30283: NOT
30284: IFFALSE 30288
// exit ;
30286: GO 30373
// index := GetElementIndex ( hackTanks , hack ) ;
30288: LD_ADDR_VAR 0 5
30292: PUSH
30293: LD_EXP 106
30297: PPUSH
30298: LD_VAR 0 1
30302: PPUSH
30303: CALL 35109 0 2
30307: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30308: LD_ADDR_VAR 0 4
30312: PUSH
30313: DOUBLE
30314: LD_INT 1
30316: DEC
30317: ST_TO_ADDR
30318: LD_EXP 107
30322: PUSH
30323: LD_VAR 0 5
30327: ARRAY
30328: PUSH
30329: FOR_TO
30330: IFFALSE 30371
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30332: LD_EXP 107
30336: PUSH
30337: LD_VAR 0 5
30341: ARRAY
30342: PUSH
30343: LD_VAR 0 4
30347: ARRAY
30348: PUSH
30349: LD_INT 1
30351: ARRAY
30352: PUSH
30353: LD_VAR 0 2
30357: EQUAL
30358: IFFALSE 30369
// KillUnit ( vehicle ) ;
30360: LD_VAR 0 2
30364: PPUSH
30365: CALL_OW 66
30369: GO 30329
30371: POP
30372: POP
// end ; end_of_file
30373: LD_VAR 0 3
30377: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30378: LD_INT 0
30380: PPUSH
30381: PPUSH
// if exist_mode then
30382: LD_VAR 0 2
30386: IFFALSE 30411
// unit := CreateCharacter ( prefix & ident ) else
30388: LD_ADDR_VAR 0 5
30392: PUSH
30393: LD_VAR 0 3
30397: PUSH
30398: LD_VAR 0 1
30402: STR
30403: PPUSH
30404: CALL_OW 34
30408: ST_TO_ADDR
30409: GO 30426
// unit := NewCharacter ( ident ) ;
30411: LD_ADDR_VAR 0 5
30415: PUSH
30416: LD_VAR 0 1
30420: PPUSH
30421: CALL_OW 25
30425: ST_TO_ADDR
// result := unit ;
30426: LD_ADDR_VAR 0 4
30430: PUSH
30431: LD_VAR 0 5
30435: ST_TO_ADDR
// end ;
30436: LD_VAR 0 4
30440: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30441: LD_INT 0
30443: PPUSH
30444: PPUSH
// if not side or not nation then
30445: LD_VAR 0 1
30449: NOT
30450: PUSH
30451: LD_VAR 0 2
30455: NOT
30456: OR
30457: IFFALSE 30461
// exit ;
30459: GO 31225
// case nation of nation_american :
30461: LD_VAR 0 2
30465: PUSH
30466: LD_INT 1
30468: DOUBLE
30469: EQUAL
30470: IFTRUE 30474
30472: GO 30688
30474: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30475: LD_ADDR_VAR 0 4
30479: PUSH
30480: LD_INT 35
30482: PUSH
30483: LD_INT 45
30485: PUSH
30486: LD_INT 46
30488: PUSH
30489: LD_INT 47
30491: PUSH
30492: LD_INT 82
30494: PUSH
30495: LD_INT 83
30497: PUSH
30498: LD_INT 84
30500: PUSH
30501: LD_INT 85
30503: PUSH
30504: LD_INT 86
30506: PUSH
30507: LD_INT 1
30509: PUSH
30510: LD_INT 2
30512: PUSH
30513: LD_INT 6
30515: PUSH
30516: LD_INT 15
30518: PUSH
30519: LD_INT 16
30521: PUSH
30522: LD_INT 7
30524: PUSH
30525: LD_INT 12
30527: PUSH
30528: LD_INT 13
30530: PUSH
30531: LD_INT 10
30533: PUSH
30534: LD_INT 14
30536: PUSH
30537: LD_INT 20
30539: PUSH
30540: LD_INT 21
30542: PUSH
30543: LD_INT 22
30545: PUSH
30546: LD_INT 25
30548: PUSH
30549: LD_INT 32
30551: PUSH
30552: LD_INT 27
30554: PUSH
30555: LD_INT 36
30557: PUSH
30558: LD_INT 69
30560: PUSH
30561: LD_INT 39
30563: PUSH
30564: LD_INT 34
30566: PUSH
30567: LD_INT 40
30569: PUSH
30570: LD_INT 48
30572: PUSH
30573: LD_INT 49
30575: PUSH
30576: LD_INT 50
30578: PUSH
30579: LD_INT 51
30581: PUSH
30582: LD_INT 52
30584: PUSH
30585: LD_INT 53
30587: PUSH
30588: LD_INT 54
30590: PUSH
30591: LD_INT 55
30593: PUSH
30594: LD_INT 56
30596: PUSH
30597: LD_INT 57
30599: PUSH
30600: LD_INT 58
30602: PUSH
30603: LD_INT 59
30605: PUSH
30606: LD_INT 60
30608: PUSH
30609: LD_INT 61
30611: PUSH
30612: LD_INT 62
30614: PUSH
30615: LD_INT 80
30617: PUSH
30618: LD_INT 82
30620: PUSH
30621: LD_INT 83
30623: PUSH
30624: LD_INT 84
30626: PUSH
30627: LD_INT 85
30629: PUSH
30630: LD_INT 86
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: ST_TO_ADDR
30686: GO 31149
30688: LD_INT 2
30690: DOUBLE
30691: EQUAL
30692: IFTRUE 30696
30694: GO 30918
30696: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
30697: LD_ADDR_VAR 0 4
30701: PUSH
30702: LD_INT 35
30704: PUSH
30705: LD_INT 45
30707: PUSH
30708: LD_INT 46
30710: PUSH
30711: LD_INT 47
30713: PUSH
30714: LD_INT 82
30716: PUSH
30717: LD_INT 83
30719: PUSH
30720: LD_INT 84
30722: PUSH
30723: LD_INT 85
30725: PUSH
30726: LD_INT 87
30728: PUSH
30729: LD_INT 70
30731: PUSH
30732: LD_INT 1
30734: PUSH
30735: LD_INT 11
30737: PUSH
30738: LD_INT 3
30740: PUSH
30741: LD_INT 4
30743: PUSH
30744: LD_INT 5
30746: PUSH
30747: LD_INT 6
30749: PUSH
30750: LD_INT 15
30752: PUSH
30753: LD_INT 18
30755: PUSH
30756: LD_INT 7
30758: PUSH
30759: LD_INT 17
30761: PUSH
30762: LD_INT 8
30764: PUSH
30765: LD_INT 20
30767: PUSH
30768: LD_INT 21
30770: PUSH
30771: LD_INT 22
30773: PUSH
30774: LD_INT 72
30776: PUSH
30777: LD_INT 26
30779: PUSH
30780: LD_INT 69
30782: PUSH
30783: LD_INT 39
30785: PUSH
30786: LD_INT 40
30788: PUSH
30789: LD_INT 41
30791: PUSH
30792: LD_INT 42
30794: PUSH
30795: LD_INT 43
30797: PUSH
30798: LD_INT 48
30800: PUSH
30801: LD_INT 49
30803: PUSH
30804: LD_INT 50
30806: PUSH
30807: LD_INT 51
30809: PUSH
30810: LD_INT 52
30812: PUSH
30813: LD_INT 53
30815: PUSH
30816: LD_INT 54
30818: PUSH
30819: LD_INT 55
30821: PUSH
30822: LD_INT 56
30824: PUSH
30825: LD_INT 60
30827: PUSH
30828: LD_INT 61
30830: PUSH
30831: LD_INT 62
30833: PUSH
30834: LD_INT 66
30836: PUSH
30837: LD_INT 67
30839: PUSH
30840: LD_INT 68
30842: PUSH
30843: LD_INT 81
30845: PUSH
30846: LD_INT 82
30848: PUSH
30849: LD_INT 83
30851: PUSH
30852: LD_INT 84
30854: PUSH
30855: LD_INT 85
30857: PUSH
30858: LD_INT 87
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: ST_TO_ADDR
30916: GO 31149
30918: LD_INT 3
30920: DOUBLE
30921: EQUAL
30922: IFTRUE 30926
30924: GO 31148
30926: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30927: LD_ADDR_VAR 0 4
30931: PUSH
30932: LD_INT 46
30934: PUSH
30935: LD_INT 47
30937: PUSH
30938: LD_INT 1
30940: PUSH
30941: LD_INT 2
30943: PUSH
30944: LD_INT 82
30946: PUSH
30947: LD_INT 83
30949: PUSH
30950: LD_INT 84
30952: PUSH
30953: LD_INT 85
30955: PUSH
30956: LD_INT 86
30958: PUSH
30959: LD_INT 11
30961: PUSH
30962: LD_INT 9
30964: PUSH
30965: LD_INT 20
30967: PUSH
30968: LD_INT 19
30970: PUSH
30971: LD_INT 21
30973: PUSH
30974: LD_INT 24
30976: PUSH
30977: LD_INT 22
30979: PUSH
30980: LD_INT 25
30982: PUSH
30983: LD_INT 28
30985: PUSH
30986: LD_INT 29
30988: PUSH
30989: LD_INT 30
30991: PUSH
30992: LD_INT 31
30994: PUSH
30995: LD_INT 37
30997: PUSH
30998: LD_INT 38
31000: PUSH
31001: LD_INT 32
31003: PUSH
31004: LD_INT 27
31006: PUSH
31007: LD_INT 33
31009: PUSH
31010: LD_INT 69
31012: PUSH
31013: LD_INT 39
31015: PUSH
31016: LD_INT 34
31018: PUSH
31019: LD_INT 40
31021: PUSH
31022: LD_INT 71
31024: PUSH
31025: LD_INT 23
31027: PUSH
31028: LD_INT 44
31030: PUSH
31031: LD_INT 48
31033: PUSH
31034: LD_INT 49
31036: PUSH
31037: LD_INT 50
31039: PUSH
31040: LD_INT 51
31042: PUSH
31043: LD_INT 52
31045: PUSH
31046: LD_INT 53
31048: PUSH
31049: LD_INT 54
31051: PUSH
31052: LD_INT 55
31054: PUSH
31055: LD_INT 56
31057: PUSH
31058: LD_INT 57
31060: PUSH
31061: LD_INT 58
31063: PUSH
31064: LD_INT 59
31066: PUSH
31067: LD_INT 63
31069: PUSH
31070: LD_INT 64
31072: PUSH
31073: LD_INT 65
31075: PUSH
31076: LD_INT 82
31078: PUSH
31079: LD_INT 83
31081: PUSH
31082: LD_INT 84
31084: PUSH
31085: LD_INT 85
31087: PUSH
31088: LD_INT 86
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: ST_TO_ADDR
31146: GO 31149
31148: POP
// if state > - 1 and state < 3 then
31149: LD_VAR 0 3
31153: PUSH
31154: LD_INT 1
31156: NEG
31157: GREATER
31158: PUSH
31159: LD_VAR 0 3
31163: PUSH
31164: LD_INT 3
31166: LESS
31167: AND
31168: IFFALSE 31225
// for i in result do
31170: LD_ADDR_VAR 0 5
31174: PUSH
31175: LD_VAR 0 4
31179: PUSH
31180: FOR_IN
31181: IFFALSE 31223
// if GetTech ( i , side ) <> state then
31183: LD_VAR 0 5
31187: PPUSH
31188: LD_VAR 0 1
31192: PPUSH
31193: CALL_OW 321
31197: PUSH
31198: LD_VAR 0 3
31202: NONEQUAL
31203: IFFALSE 31221
// result := result diff i ;
31205: LD_ADDR_VAR 0 4
31209: PUSH
31210: LD_VAR 0 4
31214: PUSH
31215: LD_VAR 0 5
31219: DIFF
31220: ST_TO_ADDR
31221: GO 31180
31223: POP
31224: POP
// end ;
31225: LD_VAR 0 4
31229: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31230: LD_INT 0
31232: PPUSH
31233: PPUSH
31234: PPUSH
// result := true ;
31235: LD_ADDR_VAR 0 3
31239: PUSH
31240: LD_INT 1
31242: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31243: LD_ADDR_VAR 0 5
31247: PUSH
31248: LD_VAR 0 2
31252: PPUSH
31253: CALL_OW 480
31257: ST_TO_ADDR
// if not tmp then
31258: LD_VAR 0 5
31262: NOT
31263: IFFALSE 31267
// exit ;
31265: GO 31316
// for i in tmp do
31267: LD_ADDR_VAR 0 4
31271: PUSH
31272: LD_VAR 0 5
31276: PUSH
31277: FOR_IN
31278: IFFALSE 31314
// if GetTech ( i , side ) <> state_researched then
31280: LD_VAR 0 4
31284: PPUSH
31285: LD_VAR 0 1
31289: PPUSH
31290: CALL_OW 321
31294: PUSH
31295: LD_INT 2
31297: NONEQUAL
31298: IFFALSE 31312
// begin result := false ;
31300: LD_ADDR_VAR 0 3
31304: PUSH
31305: LD_INT 0
31307: ST_TO_ADDR
// exit ;
31308: POP
31309: POP
31310: GO 31316
// end ;
31312: GO 31277
31314: POP
31315: POP
// end ;
31316: LD_VAR 0 3
31320: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31321: LD_INT 0
31323: PPUSH
31324: PPUSH
31325: PPUSH
31326: PPUSH
31327: PPUSH
31328: PPUSH
31329: PPUSH
31330: PPUSH
31331: PPUSH
31332: PPUSH
31333: PPUSH
31334: PPUSH
31335: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31336: LD_VAR 0 1
31340: NOT
31341: PUSH
31342: LD_VAR 0 1
31346: PPUSH
31347: CALL_OW 257
31351: PUSH
31352: LD_INT 9
31354: NONEQUAL
31355: OR
31356: IFFALSE 31360
// exit ;
31358: GO 31933
// side := GetSide ( unit ) ;
31360: LD_ADDR_VAR 0 9
31364: PUSH
31365: LD_VAR 0 1
31369: PPUSH
31370: CALL_OW 255
31374: ST_TO_ADDR
// tech_space := tech_spacanom ;
31375: LD_ADDR_VAR 0 12
31379: PUSH
31380: LD_INT 29
31382: ST_TO_ADDR
// tech_time := tech_taurad ;
31383: LD_ADDR_VAR 0 13
31387: PUSH
31388: LD_INT 28
31390: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31391: LD_ADDR_VAR 0 11
31395: PUSH
31396: LD_VAR 0 1
31400: PPUSH
31401: CALL_OW 310
31405: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31406: LD_VAR 0 11
31410: PPUSH
31411: CALL_OW 247
31415: PUSH
31416: LD_INT 2
31418: EQUAL
31419: IFFALSE 31423
// exit ;
31421: GO 31933
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31423: LD_ADDR_VAR 0 8
31427: PUSH
31428: LD_INT 81
31430: PUSH
31431: LD_VAR 0 9
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 3
31442: PUSH
31443: LD_INT 21
31445: PUSH
31446: LD_INT 3
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PPUSH
31461: CALL_OW 69
31465: ST_TO_ADDR
// if not tmp then
31466: LD_VAR 0 8
31470: NOT
31471: IFFALSE 31475
// exit ;
31473: GO 31933
// if in_unit then
31475: LD_VAR 0 11
31479: IFFALSE 31503
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31481: LD_ADDR_VAR 0 10
31485: PUSH
31486: LD_VAR 0 8
31490: PPUSH
31491: LD_VAR 0 11
31495: PPUSH
31496: CALL_OW 74
31500: ST_TO_ADDR
31501: GO 31523
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31503: LD_ADDR_VAR 0 10
31507: PUSH
31508: LD_VAR 0 8
31512: PPUSH
31513: LD_VAR 0 1
31517: PPUSH
31518: CALL_OW 74
31522: ST_TO_ADDR
// if not enemy then
31523: LD_VAR 0 10
31527: NOT
31528: IFFALSE 31532
// exit ;
31530: GO 31933
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31532: LD_VAR 0 11
31536: PUSH
31537: LD_VAR 0 11
31541: PPUSH
31542: LD_VAR 0 10
31546: PPUSH
31547: CALL_OW 296
31551: PUSH
31552: LD_INT 13
31554: GREATER
31555: AND
31556: PUSH
31557: LD_VAR 0 1
31561: PPUSH
31562: LD_VAR 0 10
31566: PPUSH
31567: CALL_OW 296
31571: PUSH
31572: LD_INT 12
31574: GREATER
31575: OR
31576: IFFALSE 31580
// exit ;
31578: GO 31933
// missile := [ 1 ] ;
31580: LD_ADDR_VAR 0 14
31584: PUSH
31585: LD_INT 1
31587: PUSH
31588: EMPTY
31589: LIST
31590: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31591: LD_VAR 0 9
31595: PPUSH
31596: LD_VAR 0 12
31600: PPUSH
31601: CALL_OW 325
31605: IFFALSE 31634
// missile := Insert ( missile , missile + 1 , 2 ) ;
31607: LD_ADDR_VAR 0 14
31611: PUSH
31612: LD_VAR 0 14
31616: PPUSH
31617: LD_VAR 0 14
31621: PUSH
31622: LD_INT 1
31624: PLUS
31625: PPUSH
31626: LD_INT 2
31628: PPUSH
31629: CALL_OW 2
31633: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31634: LD_VAR 0 9
31638: PPUSH
31639: LD_VAR 0 13
31643: PPUSH
31644: CALL_OW 325
31648: PUSH
31649: LD_VAR 0 10
31653: PPUSH
31654: CALL_OW 255
31658: PPUSH
31659: LD_VAR 0 13
31663: PPUSH
31664: CALL_OW 325
31668: NOT
31669: AND
31670: IFFALSE 31699
// missile := Insert ( missile , missile + 1 , 3 ) ;
31672: LD_ADDR_VAR 0 14
31676: PUSH
31677: LD_VAR 0 14
31681: PPUSH
31682: LD_VAR 0 14
31686: PUSH
31687: LD_INT 1
31689: PLUS
31690: PPUSH
31691: LD_INT 3
31693: PPUSH
31694: CALL_OW 2
31698: ST_TO_ADDR
// if missile < 2 then
31699: LD_VAR 0 14
31703: PUSH
31704: LD_INT 2
31706: LESS
31707: IFFALSE 31711
// exit ;
31709: GO 31933
// x := GetX ( enemy ) ;
31711: LD_ADDR_VAR 0 4
31715: PUSH
31716: LD_VAR 0 10
31720: PPUSH
31721: CALL_OW 250
31725: ST_TO_ADDR
// y := GetY ( enemy ) ;
31726: LD_ADDR_VAR 0 5
31730: PUSH
31731: LD_VAR 0 10
31735: PPUSH
31736: CALL_OW 251
31740: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31741: LD_ADDR_VAR 0 6
31745: PUSH
31746: LD_VAR 0 4
31750: PUSH
31751: LD_INT 1
31753: NEG
31754: PPUSH
31755: LD_INT 1
31757: PPUSH
31758: CALL_OW 12
31762: PLUS
31763: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31764: LD_ADDR_VAR 0 7
31768: PUSH
31769: LD_VAR 0 5
31773: PUSH
31774: LD_INT 1
31776: NEG
31777: PPUSH
31778: LD_INT 1
31780: PPUSH
31781: CALL_OW 12
31785: PLUS
31786: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31787: LD_VAR 0 6
31791: PPUSH
31792: LD_VAR 0 7
31796: PPUSH
31797: CALL_OW 488
31801: NOT
31802: IFFALSE 31824
// begin _x := x ;
31804: LD_ADDR_VAR 0 6
31808: PUSH
31809: LD_VAR 0 4
31813: ST_TO_ADDR
// _y := y ;
31814: LD_ADDR_VAR 0 7
31818: PUSH
31819: LD_VAR 0 5
31823: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31824: LD_ADDR_VAR 0 3
31828: PUSH
31829: LD_INT 1
31831: PPUSH
31832: LD_VAR 0 14
31836: PPUSH
31837: CALL_OW 12
31841: ST_TO_ADDR
// case i of 1 :
31842: LD_VAR 0 3
31846: PUSH
31847: LD_INT 1
31849: DOUBLE
31850: EQUAL
31851: IFTRUE 31855
31853: GO 31872
31855: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31856: LD_VAR 0 1
31860: PPUSH
31861: LD_VAR 0 10
31865: PPUSH
31866: CALL_OW 115
31870: GO 31933
31872: LD_INT 2
31874: DOUBLE
31875: EQUAL
31876: IFTRUE 31880
31878: GO 31902
31880: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31881: LD_VAR 0 1
31885: PPUSH
31886: LD_VAR 0 6
31890: PPUSH
31891: LD_VAR 0 7
31895: PPUSH
31896: CALL_OW 153
31900: GO 31933
31902: LD_INT 3
31904: DOUBLE
31905: EQUAL
31906: IFTRUE 31910
31908: GO 31932
31910: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31911: LD_VAR 0 1
31915: PPUSH
31916: LD_VAR 0 6
31920: PPUSH
31921: LD_VAR 0 7
31925: PPUSH
31926: CALL_OW 154
31930: GO 31933
31932: POP
// end ;
31933: LD_VAR 0 2
31937: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31938: LD_INT 0
31940: PPUSH
31941: PPUSH
31942: PPUSH
31943: PPUSH
31944: PPUSH
31945: PPUSH
// if not unit or not building then
31946: LD_VAR 0 1
31950: NOT
31951: PUSH
31952: LD_VAR 0 2
31956: NOT
31957: OR
31958: IFFALSE 31962
// exit ;
31960: GO 32120
// x := GetX ( building ) ;
31962: LD_ADDR_VAR 0 5
31966: PUSH
31967: LD_VAR 0 2
31971: PPUSH
31972: CALL_OW 250
31976: ST_TO_ADDR
// y := GetY ( building ) ;
31977: LD_ADDR_VAR 0 6
31981: PUSH
31982: LD_VAR 0 2
31986: PPUSH
31987: CALL_OW 251
31991: ST_TO_ADDR
// for i = 0 to 5 do
31992: LD_ADDR_VAR 0 4
31996: PUSH
31997: DOUBLE
31998: LD_INT 0
32000: DEC
32001: ST_TO_ADDR
32002: LD_INT 5
32004: PUSH
32005: FOR_TO
32006: IFFALSE 32118
// begin _x := ShiftX ( x , i , 3 ) ;
32008: LD_ADDR_VAR 0 7
32012: PUSH
32013: LD_VAR 0 5
32017: PPUSH
32018: LD_VAR 0 4
32022: PPUSH
32023: LD_INT 3
32025: PPUSH
32026: CALL_OW 272
32030: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32031: LD_ADDR_VAR 0 8
32035: PUSH
32036: LD_VAR 0 6
32040: PPUSH
32041: LD_VAR 0 4
32045: PPUSH
32046: LD_INT 3
32048: PPUSH
32049: CALL_OW 273
32053: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32054: LD_VAR 0 7
32058: PPUSH
32059: LD_VAR 0 8
32063: PPUSH
32064: CALL_OW 488
32068: NOT
32069: IFFALSE 32073
// continue ;
32071: GO 32005
// if HexInfo ( _x , _y ) = 0 then
32073: LD_VAR 0 7
32077: PPUSH
32078: LD_VAR 0 8
32082: PPUSH
32083: CALL_OW 428
32087: PUSH
32088: LD_INT 0
32090: EQUAL
32091: IFFALSE 32116
// begin ComMoveXY ( unit , _x , _y ) ;
32093: LD_VAR 0 1
32097: PPUSH
32098: LD_VAR 0 7
32102: PPUSH
32103: LD_VAR 0 8
32107: PPUSH
32108: CALL_OW 111
// exit ;
32112: POP
32113: POP
32114: GO 32120
// end ; end ;
32116: GO 32005
32118: POP
32119: POP
// end ;
32120: LD_VAR 0 3
32124: RET
// export function ScanBase ( side , base_area ) ; begin
32125: LD_INT 0
32127: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32128: LD_ADDR_VAR 0 3
32132: PUSH
32133: LD_VAR 0 2
32137: PPUSH
32138: LD_INT 81
32140: PUSH
32141: LD_VAR 0 1
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PPUSH
32150: CALL_OW 70
32154: ST_TO_ADDR
// end ;
32155: LD_VAR 0 3
32159: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32160: LD_INT 0
32162: PPUSH
32163: PPUSH
32164: PPUSH
32165: PPUSH
// result := false ;
32166: LD_ADDR_VAR 0 2
32170: PUSH
32171: LD_INT 0
32173: ST_TO_ADDR
// side := GetSide ( unit ) ;
32174: LD_ADDR_VAR 0 3
32178: PUSH
32179: LD_VAR 0 1
32183: PPUSH
32184: CALL_OW 255
32188: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32189: LD_ADDR_VAR 0 4
32193: PUSH
32194: LD_VAR 0 1
32198: PPUSH
32199: CALL_OW 248
32203: ST_TO_ADDR
// case nat of 1 :
32204: LD_VAR 0 4
32208: PUSH
32209: LD_INT 1
32211: DOUBLE
32212: EQUAL
32213: IFTRUE 32217
32215: GO 32228
32217: POP
// tech := tech_lassight ; 2 :
32218: LD_ADDR_VAR 0 5
32222: PUSH
32223: LD_INT 12
32225: ST_TO_ADDR
32226: GO 32267
32228: LD_INT 2
32230: DOUBLE
32231: EQUAL
32232: IFTRUE 32236
32234: GO 32247
32236: POP
// tech := tech_mortar ; 3 :
32237: LD_ADDR_VAR 0 5
32241: PUSH
32242: LD_INT 41
32244: ST_TO_ADDR
32245: GO 32267
32247: LD_INT 3
32249: DOUBLE
32250: EQUAL
32251: IFTRUE 32255
32253: GO 32266
32255: POP
// tech := tech_bazooka ; end ;
32256: LD_ADDR_VAR 0 5
32260: PUSH
32261: LD_INT 44
32263: ST_TO_ADDR
32264: GO 32267
32266: POP
// if Researched ( side , tech ) then
32267: LD_VAR 0 3
32271: PPUSH
32272: LD_VAR 0 5
32276: PPUSH
32277: CALL_OW 325
32281: IFFALSE 32308
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32283: LD_ADDR_VAR 0 2
32287: PUSH
32288: LD_INT 5
32290: PUSH
32291: LD_INT 8
32293: PUSH
32294: LD_INT 9
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: LIST
32301: PUSH
32302: LD_VAR 0 4
32306: ARRAY
32307: ST_TO_ADDR
// end ;
32308: LD_VAR 0 2
32312: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32313: LD_INT 0
32315: PPUSH
32316: PPUSH
32317: PPUSH
// if not mines then
32318: LD_VAR 0 2
32322: NOT
32323: IFFALSE 32327
// exit ;
32325: GO 32471
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32327: LD_ADDR_VAR 0 5
32331: PUSH
32332: LD_INT 81
32334: PUSH
32335: LD_VAR 0 1
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 3
32346: PUSH
32347: LD_INT 21
32349: PUSH
32350: LD_INT 3
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PPUSH
32365: CALL_OW 69
32369: ST_TO_ADDR
// for i in mines do
32370: LD_ADDR_VAR 0 4
32374: PUSH
32375: LD_VAR 0 2
32379: PUSH
32380: FOR_IN
32381: IFFALSE 32469
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32383: LD_VAR 0 4
32387: PUSH
32388: LD_INT 1
32390: ARRAY
32391: PPUSH
32392: LD_VAR 0 4
32396: PUSH
32397: LD_INT 2
32399: ARRAY
32400: PPUSH
32401: CALL_OW 458
32405: NOT
32406: IFFALSE 32410
// continue ;
32408: GO 32380
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32410: LD_VAR 0 4
32414: PUSH
32415: LD_INT 1
32417: ARRAY
32418: PPUSH
32419: LD_VAR 0 4
32423: PUSH
32424: LD_INT 2
32426: ARRAY
32427: PPUSH
32428: CALL_OW 428
32432: PUSH
32433: LD_VAR 0 5
32437: IN
32438: IFFALSE 32467
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32440: LD_VAR 0 4
32444: PUSH
32445: LD_INT 1
32447: ARRAY
32448: PPUSH
32449: LD_VAR 0 4
32453: PUSH
32454: LD_INT 2
32456: ARRAY
32457: PPUSH
32458: LD_VAR 0 1
32462: PPUSH
32463: CALL_OW 456
// end ;
32467: GO 32380
32469: POP
32470: POP
// end ;
32471: LD_VAR 0 3
32475: RET
// export function Count ( array ) ; var i ; begin
32476: LD_INT 0
32478: PPUSH
32479: PPUSH
// result := 0 ;
32480: LD_ADDR_VAR 0 2
32484: PUSH
32485: LD_INT 0
32487: ST_TO_ADDR
// for i in array do
32488: LD_ADDR_VAR 0 3
32492: PUSH
32493: LD_VAR 0 1
32497: PUSH
32498: FOR_IN
32499: IFFALSE 32523
// if i then
32501: LD_VAR 0 3
32505: IFFALSE 32521
// result := result + 1 ;
32507: LD_ADDR_VAR 0 2
32511: PUSH
32512: LD_VAR 0 2
32516: PUSH
32517: LD_INT 1
32519: PLUS
32520: ST_TO_ADDR
32521: GO 32498
32523: POP
32524: POP
// end ;
32525: LD_VAR 0 2
32529: RET
// export function IsEmpty ( building ) ; begin
32530: LD_INT 0
32532: PPUSH
// if not building then
32533: LD_VAR 0 1
32537: NOT
32538: IFFALSE 32542
// exit ;
32540: GO 32585
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32542: LD_ADDR_VAR 0 2
32546: PUSH
32547: LD_VAR 0 1
32551: PUSH
32552: LD_INT 22
32554: PUSH
32555: LD_VAR 0 1
32559: PPUSH
32560: CALL_OW 255
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 58
32571: PUSH
32572: EMPTY
32573: LIST
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PPUSH
32579: CALL_OW 69
32583: IN
32584: ST_TO_ADDR
// end ;
32585: LD_VAR 0 2
32589: RET
// export function IsNotFull ( building ) ; begin
32590: LD_INT 0
32592: PPUSH
// if not building then
32593: LD_VAR 0 1
32597: NOT
32598: IFFALSE 32602
// exit ;
32600: GO 32621
// result := UnitsInside ( building ) < 6 ;
32602: LD_ADDR_VAR 0 2
32606: PUSH
32607: LD_VAR 0 1
32611: PPUSH
32612: CALL_OW 313
32616: PUSH
32617: LD_INT 6
32619: LESS
32620: ST_TO_ADDR
// end ;
32621: LD_VAR 0 2
32625: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32626: LD_INT 0
32628: PPUSH
32629: PPUSH
32630: PPUSH
32631: PPUSH
// tmp := [ ] ;
32632: LD_ADDR_VAR 0 3
32636: PUSH
32637: EMPTY
32638: ST_TO_ADDR
// list := [ ] ;
32639: LD_ADDR_VAR 0 5
32643: PUSH
32644: EMPTY
32645: ST_TO_ADDR
// for i = 16 to 25 do
32646: LD_ADDR_VAR 0 4
32650: PUSH
32651: DOUBLE
32652: LD_INT 16
32654: DEC
32655: ST_TO_ADDR
32656: LD_INT 25
32658: PUSH
32659: FOR_TO
32660: IFFALSE 32733
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32662: LD_ADDR_VAR 0 3
32666: PUSH
32667: LD_VAR 0 3
32671: PUSH
32672: LD_INT 22
32674: PUSH
32675: LD_VAR 0 1
32679: PPUSH
32680: CALL_OW 255
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 91
32691: PUSH
32692: LD_VAR 0 1
32696: PUSH
32697: LD_INT 6
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 30
32707: PUSH
32708: LD_VAR 0 4
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: LIST
32721: PUSH
32722: EMPTY
32723: LIST
32724: PPUSH
32725: CALL_OW 69
32729: ADD
32730: ST_TO_ADDR
32731: GO 32659
32733: POP
32734: POP
// for i = 1 to tmp do
32735: LD_ADDR_VAR 0 4
32739: PUSH
32740: DOUBLE
32741: LD_INT 1
32743: DEC
32744: ST_TO_ADDR
32745: LD_VAR 0 3
32749: PUSH
32750: FOR_TO
32751: IFFALSE 32839
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32753: LD_ADDR_VAR 0 5
32757: PUSH
32758: LD_VAR 0 5
32762: PUSH
32763: LD_VAR 0 3
32767: PUSH
32768: LD_VAR 0 4
32772: ARRAY
32773: PPUSH
32774: CALL_OW 266
32778: PUSH
32779: LD_VAR 0 3
32783: PUSH
32784: LD_VAR 0 4
32788: ARRAY
32789: PPUSH
32790: CALL_OW 250
32794: PUSH
32795: LD_VAR 0 3
32799: PUSH
32800: LD_VAR 0 4
32804: ARRAY
32805: PPUSH
32806: CALL_OW 251
32810: PUSH
32811: LD_VAR 0 3
32815: PUSH
32816: LD_VAR 0 4
32820: ARRAY
32821: PPUSH
32822: CALL_OW 254
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: PUSH
32833: EMPTY
32834: LIST
32835: ADD
32836: ST_TO_ADDR
32837: GO 32750
32839: POP
32840: POP
// result := list ;
32841: LD_ADDR_VAR 0 2
32845: PUSH
32846: LD_VAR 0 5
32850: ST_TO_ADDR
// end ;
32851: LD_VAR 0 2
32855: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32856: LD_INT 0
32858: PPUSH
32859: PPUSH
32860: PPUSH
32861: PPUSH
32862: PPUSH
32863: PPUSH
32864: PPUSH
// if not factory then
32865: LD_VAR 0 1
32869: NOT
32870: IFFALSE 32874
// exit ;
32872: GO 33467
// if control = control_apeman then
32874: LD_VAR 0 4
32878: PUSH
32879: LD_INT 5
32881: EQUAL
32882: IFFALSE 32991
// begin tmp := UnitsInside ( factory ) ;
32884: LD_ADDR_VAR 0 8
32888: PUSH
32889: LD_VAR 0 1
32893: PPUSH
32894: CALL_OW 313
32898: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32899: LD_VAR 0 8
32903: PPUSH
32904: LD_INT 25
32906: PUSH
32907: LD_INT 12
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PPUSH
32914: CALL_OW 72
32918: NOT
32919: IFFALSE 32929
// control := control_manual ;
32921: LD_ADDR_VAR 0 4
32925: PUSH
32926: LD_INT 1
32928: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32929: LD_ADDR_VAR 0 8
32933: PUSH
32934: LD_VAR 0 1
32938: PPUSH
32939: CALL 32626 0 1
32943: ST_TO_ADDR
// if tmp then
32944: LD_VAR 0 8
32948: IFFALSE 32991
// begin for i in tmp do
32950: LD_ADDR_VAR 0 7
32954: PUSH
32955: LD_VAR 0 8
32959: PUSH
32960: FOR_IN
32961: IFFALSE 32989
// if i [ 1 ] = b_ext_radio then
32963: LD_VAR 0 7
32967: PUSH
32968: LD_INT 1
32970: ARRAY
32971: PUSH
32972: LD_INT 22
32974: EQUAL
32975: IFFALSE 32987
// begin control := control_remote ;
32977: LD_ADDR_VAR 0 4
32981: PUSH
32982: LD_INT 2
32984: ST_TO_ADDR
// break ;
32985: GO 32989
// end ;
32987: GO 32960
32989: POP
32990: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32991: LD_VAR 0 1
32995: PPUSH
32996: LD_VAR 0 2
33000: PPUSH
33001: LD_VAR 0 3
33005: PPUSH
33006: LD_VAR 0 4
33010: PPUSH
33011: LD_VAR 0 5
33015: PPUSH
33016: CALL_OW 448
33020: IFFALSE 33055
// begin result := [ chassis , engine , control , weapon ] ;
33022: LD_ADDR_VAR 0 6
33026: PUSH
33027: LD_VAR 0 2
33031: PUSH
33032: LD_VAR 0 3
33036: PUSH
33037: LD_VAR 0 4
33041: PUSH
33042: LD_VAR 0 5
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: ST_TO_ADDR
// exit ;
33053: GO 33467
// end ; _chassis := AvailableChassisList ( factory ) ;
33055: LD_ADDR_VAR 0 9
33059: PUSH
33060: LD_VAR 0 1
33064: PPUSH
33065: CALL_OW 475
33069: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33070: LD_ADDR_VAR 0 11
33074: PUSH
33075: LD_VAR 0 1
33079: PPUSH
33080: CALL_OW 476
33084: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33085: LD_ADDR_VAR 0 12
33089: PUSH
33090: LD_VAR 0 1
33094: PPUSH
33095: CALL_OW 477
33099: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33100: LD_ADDR_VAR 0 10
33104: PUSH
33105: LD_VAR 0 1
33109: PPUSH
33110: CALL_OW 478
33114: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33115: LD_VAR 0 9
33119: NOT
33120: PUSH
33121: LD_VAR 0 11
33125: NOT
33126: OR
33127: PUSH
33128: LD_VAR 0 12
33132: NOT
33133: OR
33134: PUSH
33135: LD_VAR 0 10
33139: NOT
33140: OR
33141: IFFALSE 33176
// begin result := [ chassis , engine , control , weapon ] ;
33143: LD_ADDR_VAR 0 6
33147: PUSH
33148: LD_VAR 0 2
33152: PUSH
33153: LD_VAR 0 3
33157: PUSH
33158: LD_VAR 0 4
33162: PUSH
33163: LD_VAR 0 5
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: ST_TO_ADDR
// exit ;
33174: GO 33467
// end ; if not chassis in _chassis then
33176: LD_VAR 0 2
33180: PUSH
33181: LD_VAR 0 9
33185: IN
33186: NOT
33187: IFFALSE 33213
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33189: LD_ADDR_VAR 0 2
33193: PUSH
33194: LD_VAR 0 9
33198: PUSH
33199: LD_INT 1
33201: PPUSH
33202: LD_VAR 0 9
33206: PPUSH
33207: CALL_OW 12
33211: ARRAY
33212: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33213: LD_VAR 0 2
33217: PPUSH
33218: LD_VAR 0 3
33222: PPUSH
33223: CALL 33472 0 2
33227: NOT
33228: IFFALSE 33287
// repeat engine := _engine [ 1 ] ;
33230: LD_ADDR_VAR 0 3
33234: PUSH
33235: LD_VAR 0 11
33239: PUSH
33240: LD_INT 1
33242: ARRAY
33243: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33244: LD_ADDR_VAR 0 11
33248: PUSH
33249: LD_VAR 0 11
33253: PPUSH
33254: LD_INT 1
33256: PPUSH
33257: CALL_OW 3
33261: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33262: LD_VAR 0 2
33266: PPUSH
33267: LD_VAR 0 3
33271: PPUSH
33272: CALL 33472 0 2
33276: PUSH
33277: LD_VAR 0 11
33281: PUSH
33282: EMPTY
33283: EQUAL
33284: OR
33285: IFFALSE 33230
// if not control in _control then
33287: LD_VAR 0 4
33291: PUSH
33292: LD_VAR 0 12
33296: IN
33297: NOT
33298: IFFALSE 33324
// control := _control [ rand ( 1 , _control ) ] ;
33300: LD_ADDR_VAR 0 4
33304: PUSH
33305: LD_VAR 0 12
33309: PUSH
33310: LD_INT 1
33312: PPUSH
33313: LD_VAR 0 12
33317: PPUSH
33318: CALL_OW 12
33322: ARRAY
33323: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33324: LD_VAR 0 2
33328: PPUSH
33329: LD_VAR 0 5
33333: PPUSH
33334: CALL 33692 0 2
33338: NOT
33339: IFFALSE 33398
// repeat weapon := _weapon [ 1 ] ;
33341: LD_ADDR_VAR 0 5
33345: PUSH
33346: LD_VAR 0 10
33350: PUSH
33351: LD_INT 1
33353: ARRAY
33354: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33355: LD_ADDR_VAR 0 10
33359: PUSH
33360: LD_VAR 0 10
33364: PPUSH
33365: LD_INT 1
33367: PPUSH
33368: CALL_OW 3
33372: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33373: LD_VAR 0 2
33377: PPUSH
33378: LD_VAR 0 5
33382: PPUSH
33383: CALL 33692 0 2
33387: PUSH
33388: LD_VAR 0 10
33392: PUSH
33393: EMPTY
33394: EQUAL
33395: OR
33396: IFFALSE 33341
// result := [ ] ;
33398: LD_ADDR_VAR 0 6
33402: PUSH
33403: EMPTY
33404: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33405: LD_VAR 0 1
33409: PPUSH
33410: LD_VAR 0 2
33414: PPUSH
33415: LD_VAR 0 3
33419: PPUSH
33420: LD_VAR 0 4
33424: PPUSH
33425: LD_VAR 0 5
33429: PPUSH
33430: CALL_OW 448
33434: IFFALSE 33467
// result := [ chassis , engine , control , weapon ] ;
33436: LD_ADDR_VAR 0 6
33440: PUSH
33441: LD_VAR 0 2
33445: PUSH
33446: LD_VAR 0 3
33450: PUSH
33451: LD_VAR 0 4
33455: PUSH
33456: LD_VAR 0 5
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: ST_TO_ADDR
// end ;
33467: LD_VAR 0 6
33471: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33472: LD_INT 0
33474: PPUSH
// if not chassis or not engine then
33475: LD_VAR 0 1
33479: NOT
33480: PUSH
33481: LD_VAR 0 2
33485: NOT
33486: OR
33487: IFFALSE 33491
// exit ;
33489: GO 33687
// case engine of engine_solar :
33491: LD_VAR 0 2
33495: PUSH
33496: LD_INT 2
33498: DOUBLE
33499: EQUAL
33500: IFTRUE 33504
33502: GO 33542
33504: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33505: LD_ADDR_VAR 0 3
33509: PUSH
33510: LD_INT 11
33512: PUSH
33513: LD_INT 12
33515: PUSH
33516: LD_INT 13
33518: PUSH
33519: LD_INT 14
33521: PUSH
33522: LD_INT 1
33524: PUSH
33525: LD_INT 2
33527: PUSH
33528: LD_INT 3
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: ST_TO_ADDR
33540: GO 33671
33542: LD_INT 1
33544: DOUBLE
33545: EQUAL
33546: IFTRUE 33550
33548: GO 33612
33550: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33551: LD_ADDR_VAR 0 3
33555: PUSH
33556: LD_INT 11
33558: PUSH
33559: LD_INT 12
33561: PUSH
33562: LD_INT 13
33564: PUSH
33565: LD_INT 14
33567: PUSH
33568: LD_INT 1
33570: PUSH
33571: LD_INT 2
33573: PUSH
33574: LD_INT 3
33576: PUSH
33577: LD_INT 4
33579: PUSH
33580: LD_INT 5
33582: PUSH
33583: LD_INT 21
33585: PUSH
33586: LD_INT 23
33588: PUSH
33589: LD_INT 22
33591: PUSH
33592: LD_INT 24
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: ST_TO_ADDR
33610: GO 33671
33612: LD_INT 3
33614: DOUBLE
33615: EQUAL
33616: IFTRUE 33620
33618: GO 33670
33620: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33621: LD_ADDR_VAR 0 3
33625: PUSH
33626: LD_INT 13
33628: PUSH
33629: LD_INT 14
33631: PUSH
33632: LD_INT 2
33634: PUSH
33635: LD_INT 3
33637: PUSH
33638: LD_INT 4
33640: PUSH
33641: LD_INT 5
33643: PUSH
33644: LD_INT 21
33646: PUSH
33647: LD_INT 22
33649: PUSH
33650: LD_INT 23
33652: PUSH
33653: LD_INT 24
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: ST_TO_ADDR
33668: GO 33671
33670: POP
// result := ( chassis in result ) ;
33671: LD_ADDR_VAR 0 3
33675: PUSH
33676: LD_VAR 0 1
33680: PUSH
33681: LD_VAR 0 3
33685: IN
33686: ST_TO_ADDR
// end ;
33687: LD_VAR 0 3
33691: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33692: LD_INT 0
33694: PPUSH
// if not chassis or not weapon then
33695: LD_VAR 0 1
33699: NOT
33700: PUSH
33701: LD_VAR 0 2
33705: NOT
33706: OR
33707: IFFALSE 33711
// exit ;
33709: GO 34737
// case weapon of us_machine_gun :
33711: LD_VAR 0 2
33715: PUSH
33716: LD_INT 2
33718: DOUBLE
33719: EQUAL
33720: IFTRUE 33724
33722: GO 33754
33724: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33725: LD_ADDR_VAR 0 3
33729: PUSH
33730: LD_INT 1
33732: PUSH
33733: LD_INT 2
33735: PUSH
33736: LD_INT 3
33738: PUSH
33739: LD_INT 4
33741: PUSH
33742: LD_INT 5
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: ST_TO_ADDR
33752: GO 34721
33754: LD_INT 3
33756: DOUBLE
33757: EQUAL
33758: IFTRUE 33762
33760: GO 33792
33762: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33763: LD_ADDR_VAR 0 3
33767: PUSH
33768: LD_INT 1
33770: PUSH
33771: LD_INT 2
33773: PUSH
33774: LD_INT 3
33776: PUSH
33777: LD_INT 4
33779: PUSH
33780: LD_INT 5
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: ST_TO_ADDR
33790: GO 34721
33792: LD_INT 11
33794: DOUBLE
33795: EQUAL
33796: IFTRUE 33800
33798: GO 33830
33800: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33801: LD_ADDR_VAR 0 3
33805: PUSH
33806: LD_INT 1
33808: PUSH
33809: LD_INT 2
33811: PUSH
33812: LD_INT 3
33814: PUSH
33815: LD_INT 4
33817: PUSH
33818: LD_INT 5
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: ST_TO_ADDR
33828: GO 34721
33830: LD_INT 4
33832: DOUBLE
33833: EQUAL
33834: IFTRUE 33838
33836: GO 33864
33838: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33839: LD_ADDR_VAR 0 3
33843: PUSH
33844: LD_INT 2
33846: PUSH
33847: LD_INT 3
33849: PUSH
33850: LD_INT 4
33852: PUSH
33853: LD_INT 5
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: ST_TO_ADDR
33862: GO 34721
33864: LD_INT 5
33866: DOUBLE
33867: EQUAL
33868: IFTRUE 33872
33870: GO 33898
33872: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33873: LD_ADDR_VAR 0 3
33877: PUSH
33878: LD_INT 2
33880: PUSH
33881: LD_INT 3
33883: PUSH
33884: LD_INT 4
33886: PUSH
33887: LD_INT 5
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: ST_TO_ADDR
33896: GO 34721
33898: LD_INT 9
33900: DOUBLE
33901: EQUAL
33902: IFTRUE 33906
33904: GO 33932
33906: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33907: LD_ADDR_VAR 0 3
33911: PUSH
33912: LD_INT 2
33914: PUSH
33915: LD_INT 3
33917: PUSH
33918: LD_INT 4
33920: PUSH
33921: LD_INT 5
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: ST_TO_ADDR
33930: GO 34721
33932: LD_INT 7
33934: DOUBLE
33935: EQUAL
33936: IFTRUE 33940
33938: GO 33966
33940: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33941: LD_ADDR_VAR 0 3
33945: PUSH
33946: LD_INT 2
33948: PUSH
33949: LD_INT 3
33951: PUSH
33952: LD_INT 4
33954: PUSH
33955: LD_INT 5
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: ST_TO_ADDR
33964: GO 34721
33966: LD_INT 12
33968: DOUBLE
33969: EQUAL
33970: IFTRUE 33974
33972: GO 34000
33974: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33975: LD_ADDR_VAR 0 3
33979: PUSH
33980: LD_INT 2
33982: PUSH
33983: LD_INT 3
33985: PUSH
33986: LD_INT 4
33988: PUSH
33989: LD_INT 5
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: ST_TO_ADDR
33998: GO 34721
34000: LD_INT 13
34002: DOUBLE
34003: EQUAL
34004: IFTRUE 34008
34006: GO 34034
34008: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34009: LD_ADDR_VAR 0 3
34013: PUSH
34014: LD_INT 2
34016: PUSH
34017: LD_INT 3
34019: PUSH
34020: LD_INT 4
34022: PUSH
34023: LD_INT 5
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: ST_TO_ADDR
34032: GO 34721
34034: LD_INT 14
34036: DOUBLE
34037: EQUAL
34038: IFTRUE 34042
34040: GO 34060
34042: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34043: LD_ADDR_VAR 0 3
34047: PUSH
34048: LD_INT 4
34050: PUSH
34051: LD_INT 5
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: ST_TO_ADDR
34058: GO 34721
34060: LD_INT 6
34062: DOUBLE
34063: EQUAL
34064: IFTRUE 34068
34066: GO 34086
34068: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34069: LD_ADDR_VAR 0 3
34073: PUSH
34074: LD_INT 4
34076: PUSH
34077: LD_INT 5
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: ST_TO_ADDR
34084: GO 34721
34086: LD_INT 10
34088: DOUBLE
34089: EQUAL
34090: IFTRUE 34094
34092: GO 34112
34094: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34095: LD_ADDR_VAR 0 3
34099: PUSH
34100: LD_INT 4
34102: PUSH
34103: LD_INT 5
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: ST_TO_ADDR
34110: GO 34721
34112: LD_INT 22
34114: DOUBLE
34115: EQUAL
34116: IFTRUE 34120
34118: GO 34146
34120: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34121: LD_ADDR_VAR 0 3
34125: PUSH
34126: LD_INT 11
34128: PUSH
34129: LD_INT 12
34131: PUSH
34132: LD_INT 13
34134: PUSH
34135: LD_INT 14
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: ST_TO_ADDR
34144: GO 34721
34146: LD_INT 23
34148: DOUBLE
34149: EQUAL
34150: IFTRUE 34154
34152: GO 34180
34154: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34155: LD_ADDR_VAR 0 3
34159: PUSH
34160: LD_INT 11
34162: PUSH
34163: LD_INT 12
34165: PUSH
34166: LD_INT 13
34168: PUSH
34169: LD_INT 14
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: ST_TO_ADDR
34178: GO 34721
34180: LD_INT 24
34182: DOUBLE
34183: EQUAL
34184: IFTRUE 34188
34186: GO 34214
34188: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34189: LD_ADDR_VAR 0 3
34193: PUSH
34194: LD_INT 11
34196: PUSH
34197: LD_INT 12
34199: PUSH
34200: LD_INT 13
34202: PUSH
34203: LD_INT 14
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: ST_TO_ADDR
34212: GO 34721
34214: LD_INT 30
34216: DOUBLE
34217: EQUAL
34218: IFTRUE 34222
34220: GO 34248
34222: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34223: LD_ADDR_VAR 0 3
34227: PUSH
34228: LD_INT 11
34230: PUSH
34231: LD_INT 12
34233: PUSH
34234: LD_INT 13
34236: PUSH
34237: LD_INT 14
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: ST_TO_ADDR
34246: GO 34721
34248: LD_INT 25
34250: DOUBLE
34251: EQUAL
34252: IFTRUE 34256
34254: GO 34274
34256: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34257: LD_ADDR_VAR 0 3
34261: PUSH
34262: LD_INT 13
34264: PUSH
34265: LD_INT 14
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: ST_TO_ADDR
34272: GO 34721
34274: LD_INT 27
34276: DOUBLE
34277: EQUAL
34278: IFTRUE 34282
34280: GO 34300
34282: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34283: LD_ADDR_VAR 0 3
34287: PUSH
34288: LD_INT 13
34290: PUSH
34291: LD_INT 14
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: ST_TO_ADDR
34298: GO 34721
34300: LD_INT 28
34302: DOUBLE
34303: EQUAL
34304: IFTRUE 34308
34306: GO 34326
34308: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34309: LD_ADDR_VAR 0 3
34313: PUSH
34314: LD_INT 13
34316: PUSH
34317: LD_INT 14
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: ST_TO_ADDR
34324: GO 34721
34326: LD_INT 29
34328: DOUBLE
34329: EQUAL
34330: IFTRUE 34334
34332: GO 34352
34334: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34335: LD_ADDR_VAR 0 3
34339: PUSH
34340: LD_INT 13
34342: PUSH
34343: LD_INT 14
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: ST_TO_ADDR
34350: GO 34721
34352: LD_INT 31
34354: DOUBLE
34355: EQUAL
34356: IFTRUE 34360
34358: GO 34378
34360: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34361: LD_ADDR_VAR 0 3
34365: PUSH
34366: LD_INT 13
34368: PUSH
34369: LD_INT 14
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: ST_TO_ADDR
34376: GO 34721
34378: LD_INT 26
34380: DOUBLE
34381: EQUAL
34382: IFTRUE 34386
34384: GO 34404
34386: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34387: LD_ADDR_VAR 0 3
34391: PUSH
34392: LD_INT 13
34394: PUSH
34395: LD_INT 14
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: ST_TO_ADDR
34402: GO 34721
34404: LD_INT 42
34406: DOUBLE
34407: EQUAL
34408: IFTRUE 34412
34410: GO 34438
34412: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34413: LD_ADDR_VAR 0 3
34417: PUSH
34418: LD_INT 21
34420: PUSH
34421: LD_INT 22
34423: PUSH
34424: LD_INT 23
34426: PUSH
34427: LD_INT 24
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: ST_TO_ADDR
34436: GO 34721
34438: LD_INT 43
34440: DOUBLE
34441: EQUAL
34442: IFTRUE 34446
34444: GO 34472
34446: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34447: LD_ADDR_VAR 0 3
34451: PUSH
34452: LD_INT 21
34454: PUSH
34455: LD_INT 22
34457: PUSH
34458: LD_INT 23
34460: PUSH
34461: LD_INT 24
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: ST_TO_ADDR
34470: GO 34721
34472: LD_INT 44
34474: DOUBLE
34475: EQUAL
34476: IFTRUE 34480
34478: GO 34506
34480: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34481: LD_ADDR_VAR 0 3
34485: PUSH
34486: LD_INT 21
34488: PUSH
34489: LD_INT 22
34491: PUSH
34492: LD_INT 23
34494: PUSH
34495: LD_INT 24
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: ST_TO_ADDR
34504: GO 34721
34506: LD_INT 45
34508: DOUBLE
34509: EQUAL
34510: IFTRUE 34514
34512: GO 34540
34514: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34515: LD_ADDR_VAR 0 3
34519: PUSH
34520: LD_INT 21
34522: PUSH
34523: LD_INT 22
34525: PUSH
34526: LD_INT 23
34528: PUSH
34529: LD_INT 24
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: ST_TO_ADDR
34538: GO 34721
34540: LD_INT 49
34542: DOUBLE
34543: EQUAL
34544: IFTRUE 34548
34546: GO 34574
34548: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34549: LD_ADDR_VAR 0 3
34553: PUSH
34554: LD_INT 21
34556: PUSH
34557: LD_INT 22
34559: PUSH
34560: LD_INT 23
34562: PUSH
34563: LD_INT 24
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: ST_TO_ADDR
34572: GO 34721
34574: LD_INT 51
34576: DOUBLE
34577: EQUAL
34578: IFTRUE 34582
34580: GO 34608
34582: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34583: LD_ADDR_VAR 0 3
34587: PUSH
34588: LD_INT 21
34590: PUSH
34591: LD_INT 22
34593: PUSH
34594: LD_INT 23
34596: PUSH
34597: LD_INT 24
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: ST_TO_ADDR
34606: GO 34721
34608: LD_INT 52
34610: DOUBLE
34611: EQUAL
34612: IFTRUE 34616
34614: GO 34642
34616: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34617: LD_ADDR_VAR 0 3
34621: PUSH
34622: LD_INT 21
34624: PUSH
34625: LD_INT 22
34627: PUSH
34628: LD_INT 23
34630: PUSH
34631: LD_INT 24
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: ST_TO_ADDR
34640: GO 34721
34642: LD_INT 53
34644: DOUBLE
34645: EQUAL
34646: IFTRUE 34650
34648: GO 34668
34650: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34651: LD_ADDR_VAR 0 3
34655: PUSH
34656: LD_INT 23
34658: PUSH
34659: LD_INT 24
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: ST_TO_ADDR
34666: GO 34721
34668: LD_INT 46
34670: DOUBLE
34671: EQUAL
34672: IFTRUE 34676
34674: GO 34694
34676: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34677: LD_ADDR_VAR 0 3
34681: PUSH
34682: LD_INT 23
34684: PUSH
34685: LD_INT 24
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: ST_TO_ADDR
34692: GO 34721
34694: LD_INT 47
34696: DOUBLE
34697: EQUAL
34698: IFTRUE 34702
34700: GO 34720
34702: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34703: LD_ADDR_VAR 0 3
34707: PUSH
34708: LD_INT 23
34710: PUSH
34711: LD_INT 24
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: ST_TO_ADDR
34718: GO 34721
34720: POP
// result := ( chassis in result ) ;
34721: LD_ADDR_VAR 0 3
34725: PUSH
34726: LD_VAR 0 1
34730: PUSH
34731: LD_VAR 0 3
34735: IN
34736: ST_TO_ADDR
// end ;
34737: LD_VAR 0 3
34741: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34742: LD_INT 0
34744: PPUSH
34745: PPUSH
34746: PPUSH
34747: PPUSH
34748: PPUSH
34749: PPUSH
34750: PPUSH
// result := array ;
34751: LD_ADDR_VAR 0 5
34755: PUSH
34756: LD_VAR 0 1
34760: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34761: LD_VAR 0 1
34765: NOT
34766: PUSH
34767: LD_VAR 0 2
34771: NOT
34772: OR
34773: PUSH
34774: LD_VAR 0 3
34778: NOT
34779: OR
34780: PUSH
34781: LD_VAR 0 2
34785: PUSH
34786: LD_VAR 0 1
34790: GREATER
34791: OR
34792: PUSH
34793: LD_VAR 0 3
34797: PUSH
34798: LD_VAR 0 1
34802: GREATER
34803: OR
34804: IFFALSE 34808
// exit ;
34806: GO 35104
// if direction then
34808: LD_VAR 0 4
34812: IFFALSE 34876
// begin d := 1 ;
34814: LD_ADDR_VAR 0 9
34818: PUSH
34819: LD_INT 1
34821: ST_TO_ADDR
// if i_from > i_to then
34822: LD_VAR 0 2
34826: PUSH
34827: LD_VAR 0 3
34831: GREATER
34832: IFFALSE 34858
// length := ( array - i_from ) + i_to else
34834: LD_ADDR_VAR 0 11
34838: PUSH
34839: LD_VAR 0 1
34843: PUSH
34844: LD_VAR 0 2
34848: MINUS
34849: PUSH
34850: LD_VAR 0 3
34854: PLUS
34855: ST_TO_ADDR
34856: GO 34874
// length := i_to - i_from ;
34858: LD_ADDR_VAR 0 11
34862: PUSH
34863: LD_VAR 0 3
34867: PUSH
34868: LD_VAR 0 2
34872: MINUS
34873: ST_TO_ADDR
// end else
34874: GO 34937
// begin d := - 1 ;
34876: LD_ADDR_VAR 0 9
34880: PUSH
34881: LD_INT 1
34883: NEG
34884: ST_TO_ADDR
// if i_from > i_to then
34885: LD_VAR 0 2
34889: PUSH
34890: LD_VAR 0 3
34894: GREATER
34895: IFFALSE 34915
// length := i_from - i_to else
34897: LD_ADDR_VAR 0 11
34901: PUSH
34902: LD_VAR 0 2
34906: PUSH
34907: LD_VAR 0 3
34911: MINUS
34912: ST_TO_ADDR
34913: GO 34937
// length := ( array - i_to ) + i_from ;
34915: LD_ADDR_VAR 0 11
34919: PUSH
34920: LD_VAR 0 1
34924: PUSH
34925: LD_VAR 0 3
34929: MINUS
34930: PUSH
34931: LD_VAR 0 2
34935: PLUS
34936: ST_TO_ADDR
// end ; if not length then
34937: LD_VAR 0 11
34941: NOT
34942: IFFALSE 34946
// exit ;
34944: GO 35104
// tmp := array ;
34946: LD_ADDR_VAR 0 10
34950: PUSH
34951: LD_VAR 0 1
34955: ST_TO_ADDR
// for i = 1 to length do
34956: LD_ADDR_VAR 0 6
34960: PUSH
34961: DOUBLE
34962: LD_INT 1
34964: DEC
34965: ST_TO_ADDR
34966: LD_VAR 0 11
34970: PUSH
34971: FOR_TO
34972: IFFALSE 35092
// begin for j = 1 to array do
34974: LD_ADDR_VAR 0 7
34978: PUSH
34979: DOUBLE
34980: LD_INT 1
34982: DEC
34983: ST_TO_ADDR
34984: LD_VAR 0 1
34988: PUSH
34989: FOR_TO
34990: IFFALSE 35078
// begin k := j + d ;
34992: LD_ADDR_VAR 0 8
34996: PUSH
34997: LD_VAR 0 7
35001: PUSH
35002: LD_VAR 0 9
35006: PLUS
35007: ST_TO_ADDR
// if k > array then
35008: LD_VAR 0 8
35012: PUSH
35013: LD_VAR 0 1
35017: GREATER
35018: IFFALSE 35028
// k := 1 ;
35020: LD_ADDR_VAR 0 8
35024: PUSH
35025: LD_INT 1
35027: ST_TO_ADDR
// if not k then
35028: LD_VAR 0 8
35032: NOT
35033: IFFALSE 35045
// k := array ;
35035: LD_ADDR_VAR 0 8
35039: PUSH
35040: LD_VAR 0 1
35044: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35045: LD_ADDR_VAR 0 10
35049: PUSH
35050: LD_VAR 0 10
35054: PPUSH
35055: LD_VAR 0 8
35059: PPUSH
35060: LD_VAR 0 1
35064: PUSH
35065: LD_VAR 0 7
35069: ARRAY
35070: PPUSH
35071: CALL_OW 1
35075: ST_TO_ADDR
// end ;
35076: GO 34989
35078: POP
35079: POP
// array := tmp ;
35080: LD_ADDR_VAR 0 1
35084: PUSH
35085: LD_VAR 0 10
35089: ST_TO_ADDR
// end ;
35090: GO 34971
35092: POP
35093: POP
// result := array ;
35094: LD_ADDR_VAR 0 5
35098: PUSH
35099: LD_VAR 0 1
35103: ST_TO_ADDR
// end ;
35104: LD_VAR 0 5
35108: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35109: LD_INT 0
35111: PPUSH
35112: PPUSH
// result := 0 ;
35113: LD_ADDR_VAR 0 3
35117: PUSH
35118: LD_INT 0
35120: ST_TO_ADDR
// if not array or not value in array then
35121: LD_VAR 0 1
35125: NOT
35126: PUSH
35127: LD_VAR 0 2
35131: PUSH
35132: LD_VAR 0 1
35136: IN
35137: NOT
35138: OR
35139: IFFALSE 35143
// exit ;
35141: GO 35197
// for i = 1 to array do
35143: LD_ADDR_VAR 0 4
35147: PUSH
35148: DOUBLE
35149: LD_INT 1
35151: DEC
35152: ST_TO_ADDR
35153: LD_VAR 0 1
35157: PUSH
35158: FOR_TO
35159: IFFALSE 35195
// if value = array [ i ] then
35161: LD_VAR 0 2
35165: PUSH
35166: LD_VAR 0 1
35170: PUSH
35171: LD_VAR 0 4
35175: ARRAY
35176: EQUAL
35177: IFFALSE 35193
// begin result := i ;
35179: LD_ADDR_VAR 0 3
35183: PUSH
35184: LD_VAR 0 4
35188: ST_TO_ADDR
// exit ;
35189: POP
35190: POP
35191: GO 35197
// end ;
35193: GO 35158
35195: POP
35196: POP
// end ;
35197: LD_VAR 0 3
35201: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35202: LD_INT 0
35204: PPUSH
// vc_chassis := chassis ;
35205: LD_ADDR_OWVAR 37
35209: PUSH
35210: LD_VAR 0 1
35214: ST_TO_ADDR
// vc_engine := engine ;
35215: LD_ADDR_OWVAR 39
35219: PUSH
35220: LD_VAR 0 2
35224: ST_TO_ADDR
// vc_control := control ;
35225: LD_ADDR_OWVAR 38
35229: PUSH
35230: LD_VAR 0 3
35234: ST_TO_ADDR
// vc_weapon := weapon ;
35235: LD_ADDR_OWVAR 40
35239: PUSH
35240: LD_VAR 0 4
35244: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35245: LD_ADDR_OWVAR 41
35249: PUSH
35250: LD_VAR 0 5
35254: ST_TO_ADDR
// end ;
35255: LD_VAR 0 6
35259: RET
// export function WantPlant ( unit ) ; var task ; begin
35260: LD_INT 0
35262: PPUSH
35263: PPUSH
// result := false ;
35264: LD_ADDR_VAR 0 2
35268: PUSH
35269: LD_INT 0
35271: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35272: LD_ADDR_VAR 0 3
35276: PUSH
35277: LD_VAR 0 1
35281: PPUSH
35282: CALL_OW 437
35286: ST_TO_ADDR
// if task then
35287: LD_VAR 0 3
35291: IFFALSE 35319
// if task [ 1 ] [ 1 ] = p then
35293: LD_VAR 0 3
35297: PUSH
35298: LD_INT 1
35300: ARRAY
35301: PUSH
35302: LD_INT 1
35304: ARRAY
35305: PUSH
35306: LD_STRING p
35308: EQUAL
35309: IFFALSE 35319
// result := true ;
35311: LD_ADDR_VAR 0 2
35315: PUSH
35316: LD_INT 1
35318: ST_TO_ADDR
// end ;
35319: LD_VAR 0 2
35323: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35324: LD_INT 0
35326: PPUSH
35327: PPUSH
35328: PPUSH
35329: PPUSH
// if pos < 1 then
35330: LD_VAR 0 2
35334: PUSH
35335: LD_INT 1
35337: LESS
35338: IFFALSE 35342
// exit ;
35340: GO 35645
// if pos = 1 then
35342: LD_VAR 0 2
35346: PUSH
35347: LD_INT 1
35349: EQUAL
35350: IFFALSE 35383
// result := Replace ( arr , pos [ 1 ] , value ) else
35352: LD_ADDR_VAR 0 4
35356: PUSH
35357: LD_VAR 0 1
35361: PPUSH
35362: LD_VAR 0 2
35366: PUSH
35367: LD_INT 1
35369: ARRAY
35370: PPUSH
35371: LD_VAR 0 3
35375: PPUSH
35376: CALL_OW 1
35380: ST_TO_ADDR
35381: GO 35645
// begin tmp := arr ;
35383: LD_ADDR_VAR 0 6
35387: PUSH
35388: LD_VAR 0 1
35392: ST_TO_ADDR
// s_arr := [ tmp ] ;
35393: LD_ADDR_VAR 0 7
35397: PUSH
35398: LD_VAR 0 6
35402: PUSH
35403: EMPTY
35404: LIST
35405: ST_TO_ADDR
// for i = 1 to pos - 1 do
35406: LD_ADDR_VAR 0 5
35410: PUSH
35411: DOUBLE
35412: LD_INT 1
35414: DEC
35415: ST_TO_ADDR
35416: LD_VAR 0 2
35420: PUSH
35421: LD_INT 1
35423: MINUS
35424: PUSH
35425: FOR_TO
35426: IFFALSE 35471
// begin tmp := tmp [ pos [ i ] ] ;
35428: LD_ADDR_VAR 0 6
35432: PUSH
35433: LD_VAR 0 6
35437: PUSH
35438: LD_VAR 0 2
35442: PUSH
35443: LD_VAR 0 5
35447: ARRAY
35448: ARRAY
35449: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35450: LD_ADDR_VAR 0 7
35454: PUSH
35455: LD_VAR 0 7
35459: PUSH
35460: LD_VAR 0 6
35464: PUSH
35465: EMPTY
35466: LIST
35467: ADD
35468: ST_TO_ADDR
// end ;
35469: GO 35425
35471: POP
35472: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35473: LD_ADDR_VAR 0 6
35477: PUSH
35478: LD_VAR 0 6
35482: PPUSH
35483: LD_VAR 0 2
35487: PUSH
35488: LD_VAR 0 2
35492: ARRAY
35493: PPUSH
35494: LD_VAR 0 3
35498: PPUSH
35499: CALL_OW 1
35503: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35504: LD_ADDR_VAR 0 7
35508: PUSH
35509: LD_VAR 0 7
35513: PPUSH
35514: LD_VAR 0 7
35518: PPUSH
35519: LD_VAR 0 6
35523: PPUSH
35524: CALL_OW 1
35528: ST_TO_ADDR
// for i = s_arr downto 2 do
35529: LD_ADDR_VAR 0 5
35533: PUSH
35534: DOUBLE
35535: LD_VAR 0 7
35539: INC
35540: ST_TO_ADDR
35541: LD_INT 2
35543: PUSH
35544: FOR_DOWNTO
35545: IFFALSE 35629
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35547: LD_ADDR_VAR 0 6
35551: PUSH
35552: LD_VAR 0 7
35556: PUSH
35557: LD_VAR 0 5
35561: PUSH
35562: LD_INT 1
35564: MINUS
35565: ARRAY
35566: PPUSH
35567: LD_VAR 0 2
35571: PUSH
35572: LD_VAR 0 5
35576: PUSH
35577: LD_INT 1
35579: MINUS
35580: ARRAY
35581: PPUSH
35582: LD_VAR 0 7
35586: PUSH
35587: LD_VAR 0 5
35591: ARRAY
35592: PPUSH
35593: CALL_OW 1
35597: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35598: LD_ADDR_VAR 0 7
35602: PUSH
35603: LD_VAR 0 7
35607: PPUSH
35608: LD_VAR 0 5
35612: PUSH
35613: LD_INT 1
35615: MINUS
35616: PPUSH
35617: LD_VAR 0 6
35621: PPUSH
35622: CALL_OW 1
35626: ST_TO_ADDR
// end ;
35627: GO 35544
35629: POP
35630: POP
// result := s_arr [ 1 ] ;
35631: LD_ADDR_VAR 0 4
35635: PUSH
35636: LD_VAR 0 7
35640: PUSH
35641: LD_INT 1
35643: ARRAY
35644: ST_TO_ADDR
// end ; end ;
35645: LD_VAR 0 4
35649: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35650: LD_INT 0
35652: PPUSH
35653: PPUSH
// if not list then
35654: LD_VAR 0 1
35658: NOT
35659: IFFALSE 35663
// exit ;
35661: GO 35754
// i := list [ pos1 ] ;
35663: LD_ADDR_VAR 0 5
35667: PUSH
35668: LD_VAR 0 1
35672: PUSH
35673: LD_VAR 0 2
35677: ARRAY
35678: ST_TO_ADDR
// if not i then
35679: LD_VAR 0 5
35683: NOT
35684: IFFALSE 35688
// exit ;
35686: GO 35754
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35688: LD_ADDR_VAR 0 1
35692: PUSH
35693: LD_VAR 0 1
35697: PPUSH
35698: LD_VAR 0 2
35702: PPUSH
35703: LD_VAR 0 1
35707: PUSH
35708: LD_VAR 0 3
35712: ARRAY
35713: PPUSH
35714: CALL_OW 1
35718: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35719: LD_ADDR_VAR 0 1
35723: PUSH
35724: LD_VAR 0 1
35728: PPUSH
35729: LD_VAR 0 3
35733: PPUSH
35734: LD_VAR 0 5
35738: PPUSH
35739: CALL_OW 1
35743: ST_TO_ADDR
// result := list ;
35744: LD_ADDR_VAR 0 4
35748: PUSH
35749: LD_VAR 0 1
35753: ST_TO_ADDR
// end ;
35754: LD_VAR 0 4
35758: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35759: LD_INT 0
35761: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35762: LD_ADDR_VAR 0 5
35766: PUSH
35767: LD_VAR 0 1
35771: PPUSH
35772: CALL_OW 250
35776: PPUSH
35777: LD_VAR 0 1
35781: PPUSH
35782: CALL_OW 251
35786: PPUSH
35787: LD_VAR 0 2
35791: PPUSH
35792: LD_VAR 0 3
35796: PPUSH
35797: LD_VAR 0 4
35801: PPUSH
35802: CALL 35812 0 5
35806: ST_TO_ADDR
// end ;
35807: LD_VAR 0 5
35811: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35812: LD_INT 0
35814: PPUSH
35815: PPUSH
35816: PPUSH
35817: PPUSH
// if not list then
35818: LD_VAR 0 3
35822: NOT
35823: IFFALSE 35827
// exit ;
35825: GO 36215
// result := [ ] ;
35827: LD_ADDR_VAR 0 6
35831: PUSH
35832: EMPTY
35833: ST_TO_ADDR
// for i in list do
35834: LD_ADDR_VAR 0 7
35838: PUSH
35839: LD_VAR 0 3
35843: PUSH
35844: FOR_IN
35845: IFFALSE 36047
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35847: LD_ADDR_VAR 0 9
35851: PUSH
35852: LD_VAR 0 7
35856: PPUSH
35857: LD_VAR 0 1
35861: PPUSH
35862: LD_VAR 0 2
35866: PPUSH
35867: CALL_OW 297
35871: ST_TO_ADDR
// if not result then
35872: LD_VAR 0 6
35876: NOT
35877: IFFALSE 35903
// result := [ [ i , tmp ] ] else
35879: LD_ADDR_VAR 0 6
35883: PUSH
35884: LD_VAR 0 7
35888: PUSH
35889: LD_VAR 0 9
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: EMPTY
35899: LIST
35900: ST_TO_ADDR
35901: GO 36045
// begin if result [ result ] [ 2 ] < tmp then
35903: LD_VAR 0 6
35907: PUSH
35908: LD_VAR 0 6
35912: ARRAY
35913: PUSH
35914: LD_INT 2
35916: ARRAY
35917: PUSH
35918: LD_VAR 0 9
35922: LESS
35923: IFFALSE 35965
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35925: LD_ADDR_VAR 0 6
35929: PUSH
35930: LD_VAR 0 6
35934: PPUSH
35935: LD_VAR 0 6
35939: PUSH
35940: LD_INT 1
35942: PLUS
35943: PPUSH
35944: LD_VAR 0 7
35948: PUSH
35949: LD_VAR 0 9
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PPUSH
35958: CALL_OW 2
35962: ST_TO_ADDR
35963: GO 36045
// for j = 1 to result do
35965: LD_ADDR_VAR 0 8
35969: PUSH
35970: DOUBLE
35971: LD_INT 1
35973: DEC
35974: ST_TO_ADDR
35975: LD_VAR 0 6
35979: PUSH
35980: FOR_TO
35981: IFFALSE 36043
// begin if tmp < result [ j ] [ 2 ] then
35983: LD_VAR 0 9
35987: PUSH
35988: LD_VAR 0 6
35992: PUSH
35993: LD_VAR 0 8
35997: ARRAY
35998: PUSH
35999: LD_INT 2
36001: ARRAY
36002: LESS
36003: IFFALSE 36041
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36005: LD_ADDR_VAR 0 6
36009: PUSH
36010: LD_VAR 0 6
36014: PPUSH
36015: LD_VAR 0 8
36019: PPUSH
36020: LD_VAR 0 7
36024: PUSH
36025: LD_VAR 0 9
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PPUSH
36034: CALL_OW 2
36038: ST_TO_ADDR
// break ;
36039: GO 36043
// end ; end ;
36041: GO 35980
36043: POP
36044: POP
// end ; end ;
36045: GO 35844
36047: POP
36048: POP
// if result and not asc then
36049: LD_VAR 0 6
36053: PUSH
36054: LD_VAR 0 4
36058: NOT
36059: AND
36060: IFFALSE 36135
// begin tmp := result ;
36062: LD_ADDR_VAR 0 9
36066: PUSH
36067: LD_VAR 0 6
36071: ST_TO_ADDR
// for i = tmp downto 1 do
36072: LD_ADDR_VAR 0 7
36076: PUSH
36077: DOUBLE
36078: LD_VAR 0 9
36082: INC
36083: ST_TO_ADDR
36084: LD_INT 1
36086: PUSH
36087: FOR_DOWNTO
36088: IFFALSE 36133
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36090: LD_ADDR_VAR 0 6
36094: PUSH
36095: LD_VAR 0 6
36099: PPUSH
36100: LD_VAR 0 9
36104: PUSH
36105: LD_VAR 0 7
36109: MINUS
36110: PUSH
36111: LD_INT 1
36113: PLUS
36114: PPUSH
36115: LD_VAR 0 9
36119: PUSH
36120: LD_VAR 0 7
36124: ARRAY
36125: PPUSH
36126: CALL_OW 1
36130: ST_TO_ADDR
36131: GO 36087
36133: POP
36134: POP
// end ; tmp := [ ] ;
36135: LD_ADDR_VAR 0 9
36139: PUSH
36140: EMPTY
36141: ST_TO_ADDR
// if mode then
36142: LD_VAR 0 5
36146: IFFALSE 36215
// begin for i = 1 to result do
36148: LD_ADDR_VAR 0 7
36152: PUSH
36153: DOUBLE
36154: LD_INT 1
36156: DEC
36157: ST_TO_ADDR
36158: LD_VAR 0 6
36162: PUSH
36163: FOR_TO
36164: IFFALSE 36203
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36166: LD_ADDR_VAR 0 9
36170: PUSH
36171: LD_VAR 0 9
36175: PPUSH
36176: LD_VAR 0 7
36180: PPUSH
36181: LD_VAR 0 6
36185: PUSH
36186: LD_VAR 0 7
36190: ARRAY
36191: PUSH
36192: LD_INT 1
36194: ARRAY
36195: PPUSH
36196: CALL_OW 1
36200: ST_TO_ADDR
36201: GO 36163
36203: POP
36204: POP
// result := tmp ;
36205: LD_ADDR_VAR 0 6
36209: PUSH
36210: LD_VAR 0 9
36214: ST_TO_ADDR
// end ; end ;
36215: LD_VAR 0 6
36219: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36220: LD_INT 0
36222: PPUSH
36223: PPUSH
36224: PPUSH
36225: PPUSH
36226: PPUSH
36227: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36228: LD_ADDR_VAR 0 5
36232: PUSH
36233: LD_INT 0
36235: PUSH
36236: LD_INT 0
36238: PUSH
36239: LD_INT 0
36241: PUSH
36242: EMPTY
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: ST_TO_ADDR
// if not x or not y then
36250: LD_VAR 0 2
36254: NOT
36255: PUSH
36256: LD_VAR 0 3
36260: NOT
36261: OR
36262: IFFALSE 36266
// exit ;
36264: GO 37912
// if not range then
36266: LD_VAR 0 4
36270: NOT
36271: IFFALSE 36281
// range := 10 ;
36273: LD_ADDR_VAR 0 4
36277: PUSH
36278: LD_INT 10
36280: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36281: LD_ADDR_VAR 0 8
36285: PUSH
36286: LD_INT 81
36288: PUSH
36289: LD_VAR 0 1
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 92
36300: PUSH
36301: LD_VAR 0 2
36305: PUSH
36306: LD_VAR 0 3
36310: PUSH
36311: LD_VAR 0 4
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 3
36324: PUSH
36325: LD_INT 21
36327: PUSH
36328: LD_INT 3
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: LIST
36343: PPUSH
36344: CALL_OW 69
36348: ST_TO_ADDR
// if not tmp then
36349: LD_VAR 0 8
36353: NOT
36354: IFFALSE 36358
// exit ;
36356: GO 37912
// for i in tmp do
36358: LD_ADDR_VAR 0 6
36362: PUSH
36363: LD_VAR 0 8
36367: PUSH
36368: FOR_IN
36369: IFFALSE 37887
// begin points := [ 0 , 0 , 0 ] ;
36371: LD_ADDR_VAR 0 9
36375: PUSH
36376: LD_INT 0
36378: PUSH
36379: LD_INT 0
36381: PUSH
36382: LD_INT 0
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: LIST
36389: ST_TO_ADDR
// bpoints := 1 ;
36390: LD_ADDR_VAR 0 10
36394: PUSH
36395: LD_INT 1
36397: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36398: LD_VAR 0 6
36402: PPUSH
36403: CALL_OW 247
36407: PUSH
36408: LD_INT 1
36410: DOUBLE
36411: EQUAL
36412: IFTRUE 36416
36414: GO 36994
36416: POP
// begin if GetClass ( i ) = 1 then
36417: LD_VAR 0 6
36421: PPUSH
36422: CALL_OW 257
36426: PUSH
36427: LD_INT 1
36429: EQUAL
36430: IFFALSE 36451
// points := [ 10 , 5 , 3 ] ;
36432: LD_ADDR_VAR 0 9
36436: PUSH
36437: LD_INT 10
36439: PUSH
36440: LD_INT 5
36442: PUSH
36443: LD_INT 3
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: LIST
36450: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36451: LD_VAR 0 6
36455: PPUSH
36456: CALL_OW 257
36460: PUSH
36461: LD_INT 2
36463: PUSH
36464: LD_INT 3
36466: PUSH
36467: LD_INT 4
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: LIST
36474: IN
36475: IFFALSE 36496
// points := [ 3 , 2 , 1 ] ;
36477: LD_ADDR_VAR 0 9
36481: PUSH
36482: LD_INT 3
36484: PUSH
36485: LD_INT 2
36487: PUSH
36488: LD_INT 1
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: LIST
36495: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36496: LD_VAR 0 6
36500: PPUSH
36501: CALL_OW 257
36505: PUSH
36506: LD_INT 5
36508: EQUAL
36509: IFFALSE 36530
// points := [ 130 , 5 , 2 ] ;
36511: LD_ADDR_VAR 0 9
36515: PUSH
36516: LD_INT 130
36518: PUSH
36519: LD_INT 5
36521: PUSH
36522: LD_INT 2
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: LIST
36529: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36530: LD_VAR 0 6
36534: PPUSH
36535: CALL_OW 257
36539: PUSH
36540: LD_INT 8
36542: EQUAL
36543: IFFALSE 36564
// points := [ 35 , 35 , 30 ] ;
36545: LD_ADDR_VAR 0 9
36549: PUSH
36550: LD_INT 35
36552: PUSH
36553: LD_INT 35
36555: PUSH
36556: LD_INT 30
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: LIST
36563: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36564: LD_VAR 0 6
36568: PPUSH
36569: CALL_OW 257
36573: PUSH
36574: LD_INT 9
36576: EQUAL
36577: IFFALSE 36598
// points := [ 20 , 55 , 40 ] ;
36579: LD_ADDR_VAR 0 9
36583: PUSH
36584: LD_INT 20
36586: PUSH
36587: LD_INT 55
36589: PUSH
36590: LD_INT 40
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: LIST
36597: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36598: LD_VAR 0 6
36602: PPUSH
36603: CALL_OW 257
36607: PUSH
36608: LD_INT 12
36610: PUSH
36611: LD_INT 16
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: IN
36618: IFFALSE 36639
// points := [ 5 , 3 , 2 ] ;
36620: LD_ADDR_VAR 0 9
36624: PUSH
36625: LD_INT 5
36627: PUSH
36628: LD_INT 3
36630: PUSH
36631: LD_INT 2
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: LIST
36638: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36639: LD_VAR 0 6
36643: PPUSH
36644: CALL_OW 257
36648: PUSH
36649: LD_INT 17
36651: EQUAL
36652: IFFALSE 36673
// points := [ 100 , 50 , 75 ] ;
36654: LD_ADDR_VAR 0 9
36658: PUSH
36659: LD_INT 100
36661: PUSH
36662: LD_INT 50
36664: PUSH
36665: LD_INT 75
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: LIST
36672: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36673: LD_VAR 0 6
36677: PPUSH
36678: CALL_OW 257
36682: PUSH
36683: LD_INT 15
36685: EQUAL
36686: IFFALSE 36707
// points := [ 10 , 5 , 3 ] ;
36688: LD_ADDR_VAR 0 9
36692: PUSH
36693: LD_INT 10
36695: PUSH
36696: LD_INT 5
36698: PUSH
36699: LD_INT 3
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: LIST
36706: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36707: LD_VAR 0 6
36711: PPUSH
36712: CALL_OW 257
36716: PUSH
36717: LD_INT 14
36719: EQUAL
36720: IFFALSE 36741
// points := [ 10 , 0 , 0 ] ;
36722: LD_ADDR_VAR 0 9
36726: PUSH
36727: LD_INT 10
36729: PUSH
36730: LD_INT 0
36732: PUSH
36733: LD_INT 0
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: LIST
36740: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36741: LD_VAR 0 6
36745: PPUSH
36746: CALL_OW 257
36750: PUSH
36751: LD_INT 11
36753: EQUAL
36754: IFFALSE 36775
// points := [ 30 , 10 , 5 ] ;
36756: LD_ADDR_VAR 0 9
36760: PUSH
36761: LD_INT 30
36763: PUSH
36764: LD_INT 10
36766: PUSH
36767: LD_INT 5
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: LIST
36774: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36775: LD_VAR 0 1
36779: PPUSH
36780: LD_INT 5
36782: PPUSH
36783: CALL_OW 321
36787: PUSH
36788: LD_INT 2
36790: EQUAL
36791: IFFALSE 36808
// bpoints := bpoints * 1.8 ;
36793: LD_ADDR_VAR 0 10
36797: PUSH
36798: LD_VAR 0 10
36802: PUSH
36803: LD_REAL  1.80000000000000E+0000
36806: MUL
36807: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36808: LD_VAR 0 6
36812: PPUSH
36813: CALL_OW 257
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: LD_INT 2
36823: PUSH
36824: LD_INT 3
36826: PUSH
36827: LD_INT 4
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: IN
36836: PUSH
36837: LD_VAR 0 1
36841: PPUSH
36842: LD_INT 51
36844: PPUSH
36845: CALL_OW 321
36849: PUSH
36850: LD_INT 2
36852: EQUAL
36853: AND
36854: IFFALSE 36871
// bpoints := bpoints * 1.2 ;
36856: LD_ADDR_VAR 0 10
36860: PUSH
36861: LD_VAR 0 10
36865: PUSH
36866: LD_REAL  1.20000000000000E+0000
36869: MUL
36870: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36871: LD_VAR 0 6
36875: PPUSH
36876: CALL_OW 257
36880: PUSH
36881: LD_INT 5
36883: PUSH
36884: LD_INT 7
36886: PUSH
36887: LD_INT 9
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: LIST
36894: IN
36895: PUSH
36896: LD_VAR 0 1
36900: PPUSH
36901: LD_INT 52
36903: PPUSH
36904: CALL_OW 321
36908: PUSH
36909: LD_INT 2
36911: EQUAL
36912: AND
36913: IFFALSE 36930
// bpoints := bpoints * 1.5 ;
36915: LD_ADDR_VAR 0 10
36919: PUSH
36920: LD_VAR 0 10
36924: PUSH
36925: LD_REAL  1.50000000000000E+0000
36928: MUL
36929: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36930: LD_VAR 0 1
36934: PPUSH
36935: LD_INT 66
36937: PPUSH
36938: CALL_OW 321
36942: PUSH
36943: LD_INT 2
36945: EQUAL
36946: IFFALSE 36963
// bpoints := bpoints * 1.1 ;
36948: LD_ADDR_VAR 0 10
36952: PUSH
36953: LD_VAR 0 10
36957: PUSH
36958: LD_REAL  1.10000000000000E+0000
36961: MUL
36962: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36963: LD_ADDR_VAR 0 10
36967: PUSH
36968: LD_VAR 0 10
36972: PUSH
36973: LD_VAR 0 6
36977: PPUSH
36978: LD_INT 1
36980: PPUSH
36981: CALL_OW 259
36985: PUSH
36986: LD_REAL  1.15000000000000E+0000
36989: MUL
36990: MUL
36991: ST_TO_ADDR
// end ; unit_vehicle :
36992: GO 37816
36994: LD_INT 2
36996: DOUBLE
36997: EQUAL
36998: IFTRUE 37002
37000: GO 37804
37002: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37003: LD_VAR 0 6
37007: PPUSH
37008: CALL_OW 264
37012: PUSH
37013: LD_INT 2
37015: PUSH
37016: LD_INT 42
37018: PUSH
37019: LD_INT 24
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: LIST
37026: IN
37027: IFFALSE 37048
// points := [ 25 , 5 , 3 ] ;
37029: LD_ADDR_VAR 0 9
37033: PUSH
37034: LD_INT 25
37036: PUSH
37037: LD_INT 5
37039: PUSH
37040: LD_INT 3
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: LIST
37047: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37048: LD_VAR 0 6
37052: PPUSH
37053: CALL_OW 264
37057: PUSH
37058: LD_INT 4
37060: PUSH
37061: LD_INT 43
37063: PUSH
37064: LD_INT 25
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: LIST
37071: IN
37072: IFFALSE 37093
// points := [ 40 , 15 , 5 ] ;
37074: LD_ADDR_VAR 0 9
37078: PUSH
37079: LD_INT 40
37081: PUSH
37082: LD_INT 15
37084: PUSH
37085: LD_INT 5
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: LIST
37092: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37093: LD_VAR 0 6
37097: PPUSH
37098: CALL_OW 264
37102: PUSH
37103: LD_INT 3
37105: PUSH
37106: LD_INT 23
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: IN
37113: IFFALSE 37134
// points := [ 7 , 25 , 8 ] ;
37115: LD_ADDR_VAR 0 9
37119: PUSH
37120: LD_INT 7
37122: PUSH
37123: LD_INT 25
37125: PUSH
37126: LD_INT 8
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: LIST
37133: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37134: LD_VAR 0 6
37138: PPUSH
37139: CALL_OW 264
37143: PUSH
37144: LD_INT 5
37146: PUSH
37147: LD_INT 27
37149: PUSH
37150: LD_INT 44
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: LIST
37157: IN
37158: IFFALSE 37179
// points := [ 14 , 50 , 16 ] ;
37160: LD_ADDR_VAR 0 9
37164: PUSH
37165: LD_INT 14
37167: PUSH
37168: LD_INT 50
37170: PUSH
37171: LD_INT 16
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: LIST
37178: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37179: LD_VAR 0 6
37183: PPUSH
37184: CALL_OW 264
37188: PUSH
37189: LD_INT 6
37191: PUSH
37192: LD_INT 46
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: IN
37199: IFFALSE 37220
// points := [ 32 , 120 , 70 ] ;
37201: LD_ADDR_VAR 0 9
37205: PUSH
37206: LD_INT 32
37208: PUSH
37209: LD_INT 120
37211: PUSH
37212: LD_INT 70
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: LIST
37219: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
37220: LD_VAR 0 6
37224: PPUSH
37225: CALL_OW 264
37229: PUSH
37230: LD_INT 7
37232: PUSH
37233: LD_INT 28
37235: PUSH
37236: LD_INT 45
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: LIST
37243: IN
37244: IFFALSE 37265
// points := [ 35 , 20 , 45 ] ;
37246: LD_ADDR_VAR 0 9
37250: PUSH
37251: LD_INT 35
37253: PUSH
37254: LD_INT 20
37256: PUSH
37257: LD_INT 45
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: LIST
37264: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37265: LD_VAR 0 6
37269: PPUSH
37270: CALL_OW 264
37274: PUSH
37275: LD_INT 47
37277: PUSH
37278: EMPTY
37279: LIST
37280: IN
37281: IFFALSE 37302
// points := [ 67 , 45 , 75 ] ;
37283: LD_ADDR_VAR 0 9
37287: PUSH
37288: LD_INT 67
37290: PUSH
37291: LD_INT 45
37293: PUSH
37294: LD_INT 75
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: LIST
37301: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37302: LD_VAR 0 6
37306: PPUSH
37307: CALL_OW 264
37311: PUSH
37312: LD_INT 26
37314: PUSH
37315: EMPTY
37316: LIST
37317: IN
37318: IFFALSE 37339
// points := [ 120 , 30 , 80 ] ;
37320: LD_ADDR_VAR 0 9
37324: PUSH
37325: LD_INT 120
37327: PUSH
37328: LD_INT 30
37330: PUSH
37331: LD_INT 80
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: LIST
37338: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37339: LD_VAR 0 6
37343: PPUSH
37344: CALL_OW 264
37348: PUSH
37349: LD_INT 22
37351: PUSH
37352: EMPTY
37353: LIST
37354: IN
37355: IFFALSE 37376
// points := [ 40 , 1 , 1 ] ;
37357: LD_ADDR_VAR 0 9
37361: PUSH
37362: LD_INT 40
37364: PUSH
37365: LD_INT 1
37367: PUSH
37368: LD_INT 1
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: LIST
37375: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37376: LD_VAR 0 6
37380: PPUSH
37381: CALL_OW 264
37385: PUSH
37386: LD_INT 29
37388: PUSH
37389: EMPTY
37390: LIST
37391: IN
37392: IFFALSE 37413
// points := [ 70 , 200 , 400 ] ;
37394: LD_ADDR_VAR 0 9
37398: PUSH
37399: LD_INT 70
37401: PUSH
37402: LD_INT 200
37404: PUSH
37405: LD_INT 400
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: LIST
37412: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37413: LD_VAR 0 6
37417: PPUSH
37418: CALL_OW 264
37422: PUSH
37423: LD_INT 14
37425: PUSH
37426: LD_INT 53
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: IN
37433: IFFALSE 37454
// points := [ 40 , 10 , 20 ] ;
37435: LD_ADDR_VAR 0 9
37439: PUSH
37440: LD_INT 40
37442: PUSH
37443: LD_INT 10
37445: PUSH
37446: LD_INT 20
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: LIST
37453: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37454: LD_VAR 0 6
37458: PPUSH
37459: CALL_OW 264
37463: PUSH
37464: LD_INT 9
37466: PUSH
37467: EMPTY
37468: LIST
37469: IN
37470: IFFALSE 37491
// points := [ 5 , 70 , 20 ] ;
37472: LD_ADDR_VAR 0 9
37476: PUSH
37477: LD_INT 5
37479: PUSH
37480: LD_INT 70
37482: PUSH
37483: LD_INT 20
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: LIST
37490: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37491: LD_VAR 0 6
37495: PPUSH
37496: CALL_OW 264
37500: PUSH
37501: LD_INT 10
37503: PUSH
37504: EMPTY
37505: LIST
37506: IN
37507: IFFALSE 37528
// points := [ 35 , 110 , 70 ] ;
37509: LD_ADDR_VAR 0 9
37513: PUSH
37514: LD_INT 35
37516: PUSH
37517: LD_INT 110
37519: PUSH
37520: LD_INT 70
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: LIST
37527: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37528: LD_VAR 0 6
37532: PPUSH
37533: CALL_OW 265
37537: PUSH
37538: LD_INT 25
37540: EQUAL
37541: IFFALSE 37562
// points := [ 80 , 65 , 100 ] ;
37543: LD_ADDR_VAR 0 9
37547: PUSH
37548: LD_INT 80
37550: PUSH
37551: LD_INT 65
37553: PUSH
37554: LD_INT 100
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: LIST
37561: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37562: LD_VAR 0 6
37566: PPUSH
37567: CALL_OW 263
37571: PUSH
37572: LD_INT 1
37574: EQUAL
37575: IFFALSE 37610
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37577: LD_ADDR_VAR 0 10
37581: PUSH
37582: LD_VAR 0 10
37586: PUSH
37587: LD_VAR 0 6
37591: PPUSH
37592: CALL_OW 311
37596: PPUSH
37597: LD_INT 3
37599: PPUSH
37600: CALL_OW 259
37604: PUSH
37605: LD_INT 4
37607: MUL
37608: MUL
37609: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37610: LD_VAR 0 6
37614: PPUSH
37615: CALL_OW 263
37619: PUSH
37620: LD_INT 2
37622: EQUAL
37623: IFFALSE 37674
// begin j := IsControledBy ( i ) ;
37625: LD_ADDR_VAR 0 7
37629: PUSH
37630: LD_VAR 0 6
37634: PPUSH
37635: CALL_OW 312
37639: ST_TO_ADDR
// if j then
37640: LD_VAR 0 7
37644: IFFALSE 37674
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37646: LD_ADDR_VAR 0 10
37650: PUSH
37651: LD_VAR 0 10
37655: PUSH
37656: LD_VAR 0 7
37660: PPUSH
37661: LD_INT 3
37663: PPUSH
37664: CALL_OW 259
37668: PUSH
37669: LD_INT 3
37671: MUL
37672: MUL
37673: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37674: LD_VAR 0 6
37678: PPUSH
37679: CALL_OW 264
37683: PUSH
37684: LD_INT 5
37686: PUSH
37687: LD_INT 6
37689: PUSH
37690: LD_INT 46
37692: PUSH
37693: LD_INT 44
37695: PUSH
37696: LD_INT 47
37698: PUSH
37699: LD_INT 45
37701: PUSH
37702: LD_INT 28
37704: PUSH
37705: LD_INT 7
37707: PUSH
37708: LD_INT 27
37710: PUSH
37711: LD_INT 29
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: IN
37726: PUSH
37727: LD_VAR 0 1
37731: PPUSH
37732: LD_INT 52
37734: PPUSH
37735: CALL_OW 321
37739: PUSH
37740: LD_INT 2
37742: EQUAL
37743: AND
37744: IFFALSE 37761
// bpoints := bpoints * 1.2 ;
37746: LD_ADDR_VAR 0 10
37750: PUSH
37751: LD_VAR 0 10
37755: PUSH
37756: LD_REAL  1.20000000000000E+0000
37759: MUL
37760: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37761: LD_VAR 0 6
37765: PPUSH
37766: CALL_OW 264
37770: PUSH
37771: LD_INT 6
37773: PUSH
37774: LD_INT 46
37776: PUSH
37777: LD_INT 47
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: LIST
37784: IN
37785: IFFALSE 37802
// bpoints := bpoints * 1.2 ;
37787: LD_ADDR_VAR 0 10
37791: PUSH
37792: LD_VAR 0 10
37796: PUSH
37797: LD_REAL  1.20000000000000E+0000
37800: MUL
37801: ST_TO_ADDR
// end ; unit_building :
37802: GO 37816
37804: LD_INT 3
37806: DOUBLE
37807: EQUAL
37808: IFTRUE 37812
37810: GO 37815
37812: POP
// ; end ;
37813: GO 37816
37815: POP
// for j = 1 to 3 do
37816: LD_ADDR_VAR 0 7
37820: PUSH
37821: DOUBLE
37822: LD_INT 1
37824: DEC
37825: ST_TO_ADDR
37826: LD_INT 3
37828: PUSH
37829: FOR_TO
37830: IFFALSE 37883
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37832: LD_ADDR_VAR 0 5
37836: PUSH
37837: LD_VAR 0 5
37841: PPUSH
37842: LD_VAR 0 7
37846: PPUSH
37847: LD_VAR 0 5
37851: PUSH
37852: LD_VAR 0 7
37856: ARRAY
37857: PUSH
37858: LD_VAR 0 9
37862: PUSH
37863: LD_VAR 0 7
37867: ARRAY
37868: PUSH
37869: LD_VAR 0 10
37873: MUL
37874: PLUS
37875: PPUSH
37876: CALL_OW 1
37880: ST_TO_ADDR
37881: GO 37829
37883: POP
37884: POP
// end ;
37885: GO 36368
37887: POP
37888: POP
// result := Replace ( result , 4 , tmp ) ;
37889: LD_ADDR_VAR 0 5
37893: PUSH
37894: LD_VAR 0 5
37898: PPUSH
37899: LD_INT 4
37901: PPUSH
37902: LD_VAR 0 8
37906: PPUSH
37907: CALL_OW 1
37911: ST_TO_ADDR
// end ;
37912: LD_VAR 0 5
37916: RET
// export function DangerAtRange ( unit , range ) ; begin
37917: LD_INT 0
37919: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37920: LD_ADDR_VAR 0 3
37924: PUSH
37925: LD_VAR 0 1
37929: PPUSH
37930: CALL_OW 255
37934: PPUSH
37935: LD_VAR 0 1
37939: PPUSH
37940: CALL_OW 250
37944: PPUSH
37945: LD_VAR 0 1
37949: PPUSH
37950: CALL_OW 251
37954: PPUSH
37955: LD_VAR 0 2
37959: PPUSH
37960: CALL 36220 0 4
37964: ST_TO_ADDR
// end ;
37965: LD_VAR 0 3
37969: RET
// export function DangerInArea ( side , area ) ; begin
37970: LD_INT 0
37972: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37973: LD_ADDR_VAR 0 3
37977: PUSH
37978: LD_VAR 0 2
37982: PPUSH
37983: LD_INT 81
37985: PUSH
37986: LD_VAR 0 1
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PPUSH
37995: CALL_OW 70
37999: ST_TO_ADDR
// end ;
38000: LD_VAR 0 3
38004: RET
// export function IsExtension ( b ) ; begin
38005: LD_INT 0
38007: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38008: LD_ADDR_VAR 0 2
38012: PUSH
38013: LD_VAR 0 1
38017: PUSH
38018: LD_INT 23
38020: PUSH
38021: LD_INT 20
38023: PUSH
38024: LD_INT 22
38026: PUSH
38027: LD_INT 17
38029: PUSH
38030: LD_INT 24
38032: PUSH
38033: LD_INT 21
38035: PUSH
38036: LD_INT 19
38038: PUSH
38039: LD_INT 16
38041: PUSH
38042: LD_INT 25
38044: PUSH
38045: LD_INT 18
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: IN
38060: ST_TO_ADDR
// end ;
38061: LD_VAR 0 2
38065: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
38066: LD_INT 0
38068: PPUSH
38069: PPUSH
38070: PPUSH
// result := [ ] ;
38071: LD_ADDR_VAR 0 3
38075: PUSH
38076: EMPTY
38077: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38078: LD_ADDR_VAR 0 4
38082: PUSH
38083: LD_VAR 0 2
38087: PPUSH
38088: LD_INT 21
38090: PUSH
38091: LD_INT 3
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PPUSH
38098: CALL_OW 70
38102: ST_TO_ADDR
// if not tmp then
38103: LD_VAR 0 4
38107: NOT
38108: IFFALSE 38112
// exit ;
38110: GO 38170
// for i in tmp do
38112: LD_ADDR_VAR 0 5
38116: PUSH
38117: LD_VAR 0 4
38121: PUSH
38122: FOR_IN
38123: IFFALSE 38158
// if GetBase ( i ) <> base then
38125: LD_VAR 0 5
38129: PPUSH
38130: CALL_OW 274
38134: PUSH
38135: LD_VAR 0 1
38139: NONEQUAL
38140: IFFALSE 38156
// ComLinkToBase ( base , i ) ;
38142: LD_VAR 0 1
38146: PPUSH
38147: LD_VAR 0 5
38151: PPUSH
38152: CALL_OW 169
38156: GO 38122
38158: POP
38159: POP
// result := tmp ;
38160: LD_ADDR_VAR 0 3
38164: PUSH
38165: LD_VAR 0 4
38169: ST_TO_ADDR
// end ;
38170: LD_VAR 0 3
38174: RET
// export function ComComplete ( unit , b ) ; var i ; begin
38175: LD_INT 0
38177: PPUSH
38178: PPUSH
// if BuildingStatus ( b ) = bs_build then
38179: LD_VAR 0 2
38183: PPUSH
38184: CALL_OW 461
38188: PUSH
38189: LD_INT 1
38191: EQUAL
38192: IFFALSE 38252
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38194: LD_VAR 0 1
38198: PPUSH
38199: LD_STRING h
38201: PUSH
38202: LD_VAR 0 2
38206: PPUSH
38207: CALL_OW 250
38211: PUSH
38212: LD_VAR 0 2
38216: PPUSH
38217: CALL_OW 251
38221: PUSH
38222: LD_VAR 0 2
38226: PUSH
38227: LD_INT 0
38229: PUSH
38230: LD_INT 0
38232: PUSH
38233: LD_INT 0
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: PUSH
38245: EMPTY
38246: LIST
38247: PPUSH
38248: CALL_OW 446
// end ;
38252: LD_VAR 0 3
38256: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38257: LD_INT 0
38259: PPUSH
38260: PPUSH
38261: PPUSH
38262: PPUSH
38263: PPUSH
38264: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
38265: LD_VAR 0 1
38269: NOT
38270: PUSH
38271: LD_VAR 0 1
38275: PPUSH
38276: CALL_OW 263
38280: PUSH
38281: LD_INT 2
38283: EQUAL
38284: NOT
38285: OR
38286: IFFALSE 38290
// exit ;
38288: GO 38606
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38290: LD_ADDR_VAR 0 6
38294: PUSH
38295: LD_INT 22
38297: PUSH
38298: LD_VAR 0 1
38302: PPUSH
38303: CALL_OW 255
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 2
38314: PUSH
38315: LD_INT 30
38317: PUSH
38318: LD_INT 36
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 34
38327: PUSH
38328: LD_INT 31
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: LIST
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PPUSH
38344: CALL_OW 69
38348: ST_TO_ADDR
// if not tmp then
38349: LD_VAR 0 6
38353: NOT
38354: IFFALSE 38358
// exit ;
38356: GO 38606
// result := [ ] ;
38358: LD_ADDR_VAR 0 2
38362: PUSH
38363: EMPTY
38364: ST_TO_ADDR
// for i in tmp do
38365: LD_ADDR_VAR 0 3
38369: PUSH
38370: LD_VAR 0 6
38374: PUSH
38375: FOR_IN
38376: IFFALSE 38447
// begin t := UnitsInside ( i ) ;
38378: LD_ADDR_VAR 0 4
38382: PUSH
38383: LD_VAR 0 3
38387: PPUSH
38388: CALL_OW 313
38392: ST_TO_ADDR
// if t then
38393: LD_VAR 0 4
38397: IFFALSE 38445
// for j in t do
38399: LD_ADDR_VAR 0 7
38403: PUSH
38404: LD_VAR 0 4
38408: PUSH
38409: FOR_IN
38410: IFFALSE 38443
// result := Insert ( result , result + 1 , j ) ;
38412: LD_ADDR_VAR 0 2
38416: PUSH
38417: LD_VAR 0 2
38421: PPUSH
38422: LD_VAR 0 2
38426: PUSH
38427: LD_INT 1
38429: PLUS
38430: PPUSH
38431: LD_VAR 0 7
38435: PPUSH
38436: CALL_OW 2
38440: ST_TO_ADDR
38441: GO 38409
38443: POP
38444: POP
// end ;
38445: GO 38375
38447: POP
38448: POP
// if not result then
38449: LD_VAR 0 2
38453: NOT
38454: IFFALSE 38458
// exit ;
38456: GO 38606
// mech := result [ 1 ] ;
38458: LD_ADDR_VAR 0 5
38462: PUSH
38463: LD_VAR 0 2
38467: PUSH
38468: LD_INT 1
38470: ARRAY
38471: ST_TO_ADDR
// if result > 1 then
38472: LD_VAR 0 2
38476: PUSH
38477: LD_INT 1
38479: GREATER
38480: IFFALSE 38592
// for i = 2 to result do
38482: LD_ADDR_VAR 0 3
38486: PUSH
38487: DOUBLE
38488: LD_INT 2
38490: DEC
38491: ST_TO_ADDR
38492: LD_VAR 0 2
38496: PUSH
38497: FOR_TO
38498: IFFALSE 38590
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38500: LD_ADDR_VAR 0 4
38504: PUSH
38505: LD_VAR 0 2
38509: PUSH
38510: LD_VAR 0 3
38514: ARRAY
38515: PPUSH
38516: LD_INT 3
38518: PPUSH
38519: CALL_OW 259
38523: PUSH
38524: LD_VAR 0 2
38528: PUSH
38529: LD_VAR 0 3
38533: ARRAY
38534: PPUSH
38535: CALL_OW 432
38539: MINUS
38540: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38541: LD_VAR 0 4
38545: PUSH
38546: LD_VAR 0 5
38550: PPUSH
38551: LD_INT 3
38553: PPUSH
38554: CALL_OW 259
38558: PUSH
38559: LD_VAR 0 5
38563: PPUSH
38564: CALL_OW 432
38568: MINUS
38569: GREATEREQUAL
38570: IFFALSE 38588
// mech := result [ i ] ;
38572: LD_ADDR_VAR 0 5
38576: PUSH
38577: LD_VAR 0 2
38581: PUSH
38582: LD_VAR 0 3
38586: ARRAY
38587: ST_TO_ADDR
// end ;
38588: GO 38497
38590: POP
38591: POP
// ComLinkTo ( vehicle , mech ) ;
38592: LD_VAR 0 1
38596: PPUSH
38597: LD_VAR 0 5
38601: PPUSH
38602: CALL_OW 135
// end ;
38606: LD_VAR 0 2
38610: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38611: LD_INT 0
38613: PPUSH
38614: PPUSH
38615: PPUSH
38616: PPUSH
38617: PPUSH
38618: PPUSH
38619: PPUSH
38620: PPUSH
38621: PPUSH
38622: PPUSH
38623: PPUSH
38624: PPUSH
38625: PPUSH
// result := [ ] ;
38626: LD_ADDR_VAR 0 7
38630: PUSH
38631: EMPTY
38632: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38633: LD_VAR 0 1
38637: PPUSH
38638: CALL_OW 266
38642: PUSH
38643: LD_INT 0
38645: PUSH
38646: LD_INT 1
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: IN
38653: NOT
38654: IFFALSE 38658
// exit ;
38656: GO 40289
// if name then
38658: LD_VAR 0 3
38662: IFFALSE 38678
// SetBName ( base_dep , name ) ;
38664: LD_VAR 0 1
38668: PPUSH
38669: LD_VAR 0 3
38673: PPUSH
38674: CALL_OW 500
// base := GetBase ( base_dep ) ;
38678: LD_ADDR_VAR 0 15
38682: PUSH
38683: LD_VAR 0 1
38687: PPUSH
38688: CALL_OW 274
38692: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38693: LD_ADDR_VAR 0 16
38697: PUSH
38698: LD_VAR 0 1
38702: PPUSH
38703: CALL_OW 255
38707: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38708: LD_ADDR_VAR 0 17
38712: PUSH
38713: LD_VAR 0 1
38717: PPUSH
38718: CALL_OW 248
38722: ST_TO_ADDR
// if sources then
38723: LD_VAR 0 5
38727: IFFALSE 38774
// for i = 1 to 3 do
38729: LD_ADDR_VAR 0 8
38733: PUSH
38734: DOUBLE
38735: LD_INT 1
38737: DEC
38738: ST_TO_ADDR
38739: LD_INT 3
38741: PUSH
38742: FOR_TO
38743: IFFALSE 38772
// AddResourceType ( base , i , sources [ i ] ) ;
38745: LD_VAR 0 15
38749: PPUSH
38750: LD_VAR 0 8
38754: PPUSH
38755: LD_VAR 0 5
38759: PUSH
38760: LD_VAR 0 8
38764: ARRAY
38765: PPUSH
38766: CALL_OW 276
38770: GO 38742
38772: POP
38773: POP
// buildings := GetBaseBuildings ( base , area ) ;
38774: LD_ADDR_VAR 0 18
38778: PUSH
38779: LD_VAR 0 15
38783: PPUSH
38784: LD_VAR 0 2
38788: PPUSH
38789: CALL 38066 0 2
38793: ST_TO_ADDR
// InitHc ;
38794: CALL_OW 19
// InitUc ;
38798: CALL_OW 18
// uc_side := side ;
38802: LD_ADDR_OWVAR 20
38806: PUSH
38807: LD_VAR 0 16
38811: ST_TO_ADDR
// uc_nation := nation ;
38812: LD_ADDR_OWVAR 21
38816: PUSH
38817: LD_VAR 0 17
38821: ST_TO_ADDR
// if buildings then
38822: LD_VAR 0 18
38826: IFFALSE 40148
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38828: LD_ADDR_VAR 0 19
38832: PUSH
38833: LD_VAR 0 18
38837: PPUSH
38838: LD_INT 2
38840: PUSH
38841: LD_INT 30
38843: PUSH
38844: LD_INT 29
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 30
38853: PUSH
38854: LD_INT 30
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: LIST
38865: PPUSH
38866: CALL_OW 72
38870: ST_TO_ADDR
// if tmp then
38871: LD_VAR 0 19
38875: IFFALSE 38923
// for i in tmp do
38877: LD_ADDR_VAR 0 8
38881: PUSH
38882: LD_VAR 0 19
38886: PUSH
38887: FOR_IN
38888: IFFALSE 38921
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38890: LD_VAR 0 8
38894: PPUSH
38895: CALL_OW 250
38899: PPUSH
38900: LD_VAR 0 8
38904: PPUSH
38905: CALL_OW 251
38909: PPUSH
38910: LD_VAR 0 16
38914: PPUSH
38915: CALL_OW 441
38919: GO 38887
38921: POP
38922: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38923: LD_VAR 0 18
38927: PPUSH
38928: LD_INT 2
38930: PUSH
38931: LD_INT 30
38933: PUSH
38934: LD_INT 32
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 30
38943: PUSH
38944: LD_INT 33
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: LIST
38955: PPUSH
38956: CALL_OW 72
38960: IFFALSE 39048
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38962: LD_ADDR_VAR 0 8
38966: PUSH
38967: LD_VAR 0 18
38971: PPUSH
38972: LD_INT 2
38974: PUSH
38975: LD_INT 30
38977: PUSH
38978: LD_INT 32
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 30
38987: PUSH
38988: LD_INT 33
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: LIST
38999: PPUSH
39000: CALL_OW 72
39004: PUSH
39005: FOR_IN
39006: IFFALSE 39046
// begin if not GetBWeapon ( i ) then
39008: LD_VAR 0 8
39012: PPUSH
39013: CALL_OW 269
39017: NOT
39018: IFFALSE 39044
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39020: LD_VAR 0 8
39024: PPUSH
39025: LD_VAR 0 8
39029: PPUSH
39030: LD_VAR 0 2
39034: PPUSH
39035: CALL 40294 0 2
39039: PPUSH
39040: CALL_OW 431
// end ;
39044: GO 39005
39046: POP
39047: POP
// end ; for i = 1 to personel do
39048: LD_ADDR_VAR 0 8
39052: PUSH
39053: DOUBLE
39054: LD_INT 1
39056: DEC
39057: ST_TO_ADDR
39058: LD_VAR 0 6
39062: PUSH
39063: FOR_TO
39064: IFFALSE 40128
// begin if i > 4 then
39066: LD_VAR 0 8
39070: PUSH
39071: LD_INT 4
39073: GREATER
39074: IFFALSE 39078
// break ;
39076: GO 40128
// case i of 1 :
39078: LD_VAR 0 8
39082: PUSH
39083: LD_INT 1
39085: DOUBLE
39086: EQUAL
39087: IFTRUE 39091
39089: GO 39171
39091: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39092: LD_ADDR_VAR 0 12
39096: PUSH
39097: LD_VAR 0 18
39101: PPUSH
39102: LD_INT 22
39104: PUSH
39105: LD_VAR 0 16
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 58
39116: PUSH
39117: EMPTY
39118: LIST
39119: PUSH
39120: LD_INT 2
39122: PUSH
39123: LD_INT 30
39125: PUSH
39126: LD_INT 32
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 30
39135: PUSH
39136: LD_INT 4
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 30
39145: PUSH
39146: LD_INT 5
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: LIST
39163: PPUSH
39164: CALL_OW 72
39168: ST_TO_ADDR
39169: GO 39393
39171: LD_INT 2
39173: DOUBLE
39174: EQUAL
39175: IFTRUE 39179
39177: GO 39241
39179: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39180: LD_ADDR_VAR 0 12
39184: PUSH
39185: LD_VAR 0 18
39189: PPUSH
39190: LD_INT 22
39192: PUSH
39193: LD_VAR 0 16
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 2
39204: PUSH
39205: LD_INT 30
39207: PUSH
39208: LD_INT 0
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 30
39217: PUSH
39218: LD_INT 1
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: LIST
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PPUSH
39234: CALL_OW 72
39238: ST_TO_ADDR
39239: GO 39393
39241: LD_INT 3
39243: DOUBLE
39244: EQUAL
39245: IFTRUE 39249
39247: GO 39311
39249: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39250: LD_ADDR_VAR 0 12
39254: PUSH
39255: LD_VAR 0 18
39259: PPUSH
39260: LD_INT 22
39262: PUSH
39263: LD_VAR 0 16
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 2
39274: PUSH
39275: LD_INT 30
39277: PUSH
39278: LD_INT 2
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 30
39287: PUSH
39288: LD_INT 3
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: LIST
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PPUSH
39304: CALL_OW 72
39308: ST_TO_ADDR
39309: GO 39393
39311: LD_INT 4
39313: DOUBLE
39314: EQUAL
39315: IFTRUE 39319
39317: GO 39392
39319: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39320: LD_ADDR_VAR 0 12
39324: PUSH
39325: LD_VAR 0 18
39329: PPUSH
39330: LD_INT 22
39332: PUSH
39333: LD_VAR 0 16
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 2
39344: PUSH
39345: LD_INT 30
39347: PUSH
39348: LD_INT 6
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 30
39357: PUSH
39358: LD_INT 7
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 30
39367: PUSH
39368: LD_INT 8
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PPUSH
39385: CALL_OW 72
39389: ST_TO_ADDR
39390: GO 39393
39392: POP
// if i = 1 then
39393: LD_VAR 0 8
39397: PUSH
39398: LD_INT 1
39400: EQUAL
39401: IFFALSE 39512
// begin tmp := [ ] ;
39403: LD_ADDR_VAR 0 19
39407: PUSH
39408: EMPTY
39409: ST_TO_ADDR
// for j in f do
39410: LD_ADDR_VAR 0 9
39414: PUSH
39415: LD_VAR 0 12
39419: PUSH
39420: FOR_IN
39421: IFFALSE 39494
// if GetBType ( j ) = b_bunker then
39423: LD_VAR 0 9
39427: PPUSH
39428: CALL_OW 266
39432: PUSH
39433: LD_INT 32
39435: EQUAL
39436: IFFALSE 39463
// tmp := Insert ( tmp , 1 , j ) else
39438: LD_ADDR_VAR 0 19
39442: PUSH
39443: LD_VAR 0 19
39447: PPUSH
39448: LD_INT 1
39450: PPUSH
39451: LD_VAR 0 9
39455: PPUSH
39456: CALL_OW 2
39460: ST_TO_ADDR
39461: GO 39492
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39463: LD_ADDR_VAR 0 19
39467: PUSH
39468: LD_VAR 0 19
39472: PPUSH
39473: LD_VAR 0 19
39477: PUSH
39478: LD_INT 1
39480: PLUS
39481: PPUSH
39482: LD_VAR 0 9
39486: PPUSH
39487: CALL_OW 2
39491: ST_TO_ADDR
39492: GO 39420
39494: POP
39495: POP
// if tmp then
39496: LD_VAR 0 19
39500: IFFALSE 39512
// f := tmp ;
39502: LD_ADDR_VAR 0 12
39506: PUSH
39507: LD_VAR 0 19
39511: ST_TO_ADDR
// end ; x := personel [ i ] ;
39512: LD_ADDR_VAR 0 13
39516: PUSH
39517: LD_VAR 0 6
39521: PUSH
39522: LD_VAR 0 8
39526: ARRAY
39527: ST_TO_ADDR
// if x = - 1 then
39528: LD_VAR 0 13
39532: PUSH
39533: LD_INT 1
39535: NEG
39536: EQUAL
39537: IFFALSE 39746
// begin for j in f do
39539: LD_ADDR_VAR 0 9
39543: PUSH
39544: LD_VAR 0 12
39548: PUSH
39549: FOR_IN
39550: IFFALSE 39742
// repeat InitHc ;
39552: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39556: LD_VAR 0 9
39560: PPUSH
39561: CALL_OW 266
39565: PUSH
39566: LD_INT 5
39568: EQUAL
39569: IFFALSE 39639
// begin if UnitsInside ( j ) < 3 then
39571: LD_VAR 0 9
39575: PPUSH
39576: CALL_OW 313
39580: PUSH
39581: LD_INT 3
39583: LESS
39584: IFFALSE 39620
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39586: LD_INT 0
39588: PPUSH
39589: LD_INT 5
39591: PUSH
39592: LD_INT 8
39594: PUSH
39595: LD_INT 9
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: LIST
39602: PUSH
39603: LD_VAR 0 17
39607: ARRAY
39608: PPUSH
39609: LD_VAR 0 4
39613: PPUSH
39614: CALL_OW 380
39618: GO 39637
// PrepareHuman ( false , i , skill ) ;
39620: LD_INT 0
39622: PPUSH
39623: LD_VAR 0 8
39627: PPUSH
39628: LD_VAR 0 4
39632: PPUSH
39633: CALL_OW 380
// end else
39637: GO 39656
// PrepareHuman ( false , i , skill ) ;
39639: LD_INT 0
39641: PPUSH
39642: LD_VAR 0 8
39646: PPUSH
39647: LD_VAR 0 4
39651: PPUSH
39652: CALL_OW 380
// un := CreateHuman ;
39656: LD_ADDR_VAR 0 14
39660: PUSH
39661: CALL_OW 44
39665: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39666: LD_ADDR_VAR 0 7
39670: PUSH
39671: LD_VAR 0 7
39675: PPUSH
39676: LD_INT 1
39678: PPUSH
39679: LD_VAR 0 14
39683: PPUSH
39684: CALL_OW 2
39688: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39689: LD_VAR 0 14
39693: PPUSH
39694: LD_VAR 0 9
39698: PPUSH
39699: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39703: LD_VAR 0 9
39707: PPUSH
39708: CALL_OW 313
39712: PUSH
39713: LD_INT 6
39715: EQUAL
39716: PUSH
39717: LD_VAR 0 9
39721: PPUSH
39722: CALL_OW 266
39726: PUSH
39727: LD_INT 32
39729: PUSH
39730: LD_INT 31
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: IN
39737: OR
39738: IFFALSE 39552
39740: GO 39549
39742: POP
39743: POP
// end else
39744: GO 40126
// for j = 1 to x do
39746: LD_ADDR_VAR 0 9
39750: PUSH
39751: DOUBLE
39752: LD_INT 1
39754: DEC
39755: ST_TO_ADDR
39756: LD_VAR 0 13
39760: PUSH
39761: FOR_TO
39762: IFFALSE 40124
// begin InitHc ;
39764: CALL_OW 19
// if not f then
39768: LD_VAR 0 12
39772: NOT
39773: IFFALSE 39862
// begin PrepareHuman ( false , i , skill ) ;
39775: LD_INT 0
39777: PPUSH
39778: LD_VAR 0 8
39782: PPUSH
39783: LD_VAR 0 4
39787: PPUSH
39788: CALL_OW 380
// un := CreateHuman ;
39792: LD_ADDR_VAR 0 14
39796: PUSH
39797: CALL_OW 44
39801: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39802: LD_ADDR_VAR 0 7
39806: PUSH
39807: LD_VAR 0 7
39811: PPUSH
39812: LD_INT 1
39814: PPUSH
39815: LD_VAR 0 14
39819: PPUSH
39820: CALL_OW 2
39824: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39825: LD_VAR 0 14
39829: PPUSH
39830: LD_VAR 0 1
39834: PPUSH
39835: CALL_OW 250
39839: PPUSH
39840: LD_VAR 0 1
39844: PPUSH
39845: CALL_OW 251
39849: PPUSH
39850: LD_INT 10
39852: PPUSH
39853: LD_INT 0
39855: PPUSH
39856: CALL_OW 50
// continue ;
39860: GO 39761
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39862: LD_VAR 0 12
39866: PUSH
39867: LD_INT 1
39869: ARRAY
39870: PPUSH
39871: CALL_OW 313
39875: PUSH
39876: LD_VAR 0 12
39880: PUSH
39881: LD_INT 1
39883: ARRAY
39884: PPUSH
39885: CALL_OW 266
39889: PUSH
39890: LD_INT 32
39892: PUSH
39893: LD_INT 31
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: IN
39900: AND
39901: PUSH
39902: LD_VAR 0 12
39906: PUSH
39907: LD_INT 1
39909: ARRAY
39910: PPUSH
39911: CALL_OW 313
39915: PUSH
39916: LD_INT 6
39918: EQUAL
39919: OR
39920: IFFALSE 39940
// f := Delete ( f , 1 ) ;
39922: LD_ADDR_VAR 0 12
39926: PUSH
39927: LD_VAR 0 12
39931: PPUSH
39932: LD_INT 1
39934: PPUSH
39935: CALL_OW 3
39939: ST_TO_ADDR
// if not f then
39940: LD_VAR 0 12
39944: NOT
39945: IFFALSE 39963
// begin x := x + 2 ;
39947: LD_ADDR_VAR 0 13
39951: PUSH
39952: LD_VAR 0 13
39956: PUSH
39957: LD_INT 2
39959: PLUS
39960: ST_TO_ADDR
// continue ;
39961: GO 39761
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39963: LD_VAR 0 12
39967: PUSH
39968: LD_INT 1
39970: ARRAY
39971: PPUSH
39972: CALL_OW 266
39976: PUSH
39977: LD_INT 5
39979: EQUAL
39980: IFFALSE 40054
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39982: LD_VAR 0 12
39986: PUSH
39987: LD_INT 1
39989: ARRAY
39990: PPUSH
39991: CALL_OW 313
39995: PUSH
39996: LD_INT 3
39998: LESS
39999: IFFALSE 40035
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40001: LD_INT 0
40003: PPUSH
40004: LD_INT 5
40006: PUSH
40007: LD_INT 8
40009: PUSH
40010: LD_INT 9
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: LIST
40017: PUSH
40018: LD_VAR 0 17
40022: ARRAY
40023: PPUSH
40024: LD_VAR 0 4
40028: PPUSH
40029: CALL_OW 380
40033: GO 40052
// PrepareHuman ( false , i , skill ) ;
40035: LD_INT 0
40037: PPUSH
40038: LD_VAR 0 8
40042: PPUSH
40043: LD_VAR 0 4
40047: PPUSH
40048: CALL_OW 380
// end else
40052: GO 40071
// PrepareHuman ( false , i , skill ) ;
40054: LD_INT 0
40056: PPUSH
40057: LD_VAR 0 8
40061: PPUSH
40062: LD_VAR 0 4
40066: PPUSH
40067: CALL_OW 380
// un := CreateHuman ;
40071: LD_ADDR_VAR 0 14
40075: PUSH
40076: CALL_OW 44
40080: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40081: LD_ADDR_VAR 0 7
40085: PUSH
40086: LD_VAR 0 7
40090: PPUSH
40091: LD_INT 1
40093: PPUSH
40094: LD_VAR 0 14
40098: PPUSH
40099: CALL_OW 2
40103: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40104: LD_VAR 0 14
40108: PPUSH
40109: LD_VAR 0 12
40113: PUSH
40114: LD_INT 1
40116: ARRAY
40117: PPUSH
40118: CALL_OW 52
// end ;
40122: GO 39761
40124: POP
40125: POP
// end ;
40126: GO 39063
40128: POP
40129: POP
// result := result ^ buildings ;
40130: LD_ADDR_VAR 0 7
40134: PUSH
40135: LD_VAR 0 7
40139: PUSH
40140: LD_VAR 0 18
40144: ADD
40145: ST_TO_ADDR
// end else
40146: GO 40289
// begin for i = 1 to personel do
40148: LD_ADDR_VAR 0 8
40152: PUSH
40153: DOUBLE
40154: LD_INT 1
40156: DEC
40157: ST_TO_ADDR
40158: LD_VAR 0 6
40162: PUSH
40163: FOR_TO
40164: IFFALSE 40287
// begin if i > 4 then
40166: LD_VAR 0 8
40170: PUSH
40171: LD_INT 4
40173: GREATER
40174: IFFALSE 40178
// break ;
40176: GO 40287
// x := personel [ i ] ;
40178: LD_ADDR_VAR 0 13
40182: PUSH
40183: LD_VAR 0 6
40187: PUSH
40188: LD_VAR 0 8
40192: ARRAY
40193: ST_TO_ADDR
// if x = - 1 then
40194: LD_VAR 0 13
40198: PUSH
40199: LD_INT 1
40201: NEG
40202: EQUAL
40203: IFFALSE 40207
// continue ;
40205: GO 40163
// PrepareHuman ( false , i , skill ) ;
40207: LD_INT 0
40209: PPUSH
40210: LD_VAR 0 8
40214: PPUSH
40215: LD_VAR 0 4
40219: PPUSH
40220: CALL_OW 380
// un := CreateHuman ;
40224: LD_ADDR_VAR 0 14
40228: PUSH
40229: CALL_OW 44
40233: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40234: LD_VAR 0 14
40238: PPUSH
40239: LD_VAR 0 1
40243: PPUSH
40244: CALL_OW 250
40248: PPUSH
40249: LD_VAR 0 1
40253: PPUSH
40254: CALL_OW 251
40258: PPUSH
40259: LD_INT 10
40261: PPUSH
40262: LD_INT 0
40264: PPUSH
40265: CALL_OW 50
// result := result ^ un ;
40269: LD_ADDR_VAR 0 7
40273: PUSH
40274: LD_VAR 0 7
40278: PUSH
40279: LD_VAR 0 14
40283: ADD
40284: ST_TO_ADDR
// end ;
40285: GO 40163
40287: POP
40288: POP
// end ; end ;
40289: LD_VAR 0 7
40293: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40294: LD_INT 0
40296: PPUSH
40297: PPUSH
40298: PPUSH
40299: PPUSH
40300: PPUSH
40301: PPUSH
40302: PPUSH
40303: PPUSH
40304: PPUSH
40305: PPUSH
40306: PPUSH
40307: PPUSH
40308: PPUSH
40309: PPUSH
40310: PPUSH
40311: PPUSH
// result := false ;
40312: LD_ADDR_VAR 0 3
40316: PUSH
40317: LD_INT 0
40319: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40320: LD_VAR 0 1
40324: NOT
40325: PUSH
40326: LD_VAR 0 1
40330: PPUSH
40331: CALL_OW 266
40335: PUSH
40336: LD_INT 32
40338: PUSH
40339: LD_INT 33
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: IN
40346: NOT
40347: OR
40348: IFFALSE 40352
// exit ;
40350: GO 41488
// nat := GetNation ( tower ) ;
40352: LD_ADDR_VAR 0 12
40356: PUSH
40357: LD_VAR 0 1
40361: PPUSH
40362: CALL_OW 248
40366: ST_TO_ADDR
// side := GetSide ( tower ) ;
40367: LD_ADDR_VAR 0 16
40371: PUSH
40372: LD_VAR 0 1
40376: PPUSH
40377: CALL_OW 255
40381: ST_TO_ADDR
// x := GetX ( tower ) ;
40382: LD_ADDR_VAR 0 10
40386: PUSH
40387: LD_VAR 0 1
40391: PPUSH
40392: CALL_OW 250
40396: ST_TO_ADDR
// y := GetY ( tower ) ;
40397: LD_ADDR_VAR 0 11
40401: PUSH
40402: LD_VAR 0 1
40406: PPUSH
40407: CALL_OW 251
40411: ST_TO_ADDR
// if not x or not y then
40412: LD_VAR 0 10
40416: NOT
40417: PUSH
40418: LD_VAR 0 11
40422: NOT
40423: OR
40424: IFFALSE 40428
// exit ;
40426: GO 41488
// weapon := 0 ;
40428: LD_ADDR_VAR 0 18
40432: PUSH
40433: LD_INT 0
40435: ST_TO_ADDR
// fac_list := [ ] ;
40436: LD_ADDR_VAR 0 17
40440: PUSH
40441: EMPTY
40442: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
40443: LD_ADDR_VAR 0 6
40447: PUSH
40448: LD_VAR 0 1
40452: PPUSH
40453: CALL_OW 274
40457: PPUSH
40458: LD_VAR 0 2
40462: PPUSH
40463: CALL 38066 0 2
40467: PPUSH
40468: LD_INT 30
40470: PUSH
40471: LD_INT 3
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PPUSH
40478: CALL_OW 72
40482: ST_TO_ADDR
// if not factories then
40483: LD_VAR 0 6
40487: NOT
40488: IFFALSE 40492
// exit ;
40490: GO 41488
// for i in factories do
40492: LD_ADDR_VAR 0 8
40496: PUSH
40497: LD_VAR 0 6
40501: PUSH
40502: FOR_IN
40503: IFFALSE 40528
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40505: LD_ADDR_VAR 0 17
40509: PUSH
40510: LD_VAR 0 17
40514: PUSH
40515: LD_VAR 0 8
40519: PPUSH
40520: CALL_OW 478
40524: UNION
40525: ST_TO_ADDR
40526: GO 40502
40528: POP
40529: POP
// if not fac_list then
40530: LD_VAR 0 17
40534: NOT
40535: IFFALSE 40539
// exit ;
40537: GO 41488
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40539: LD_ADDR_VAR 0 5
40543: PUSH
40544: LD_INT 4
40546: PUSH
40547: LD_INT 5
40549: PUSH
40550: LD_INT 9
40552: PUSH
40553: LD_INT 10
40555: PUSH
40556: LD_INT 6
40558: PUSH
40559: LD_INT 7
40561: PUSH
40562: LD_INT 11
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 27
40576: PUSH
40577: LD_INT 28
40579: PUSH
40580: LD_INT 26
40582: PUSH
40583: LD_INT 30
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 43
40594: PUSH
40595: LD_INT 44
40597: PUSH
40598: LD_INT 46
40600: PUSH
40601: LD_INT 45
40603: PUSH
40604: LD_INT 47
40606: PUSH
40607: LD_INT 49
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: LIST
40622: PUSH
40623: LD_VAR 0 12
40627: ARRAY
40628: ST_TO_ADDR
// for i in list do
40629: LD_ADDR_VAR 0 8
40633: PUSH
40634: LD_VAR 0 5
40638: PUSH
40639: FOR_IN
40640: IFFALSE 40673
// if not i in fac_list then
40642: LD_VAR 0 8
40646: PUSH
40647: LD_VAR 0 17
40651: IN
40652: NOT
40653: IFFALSE 40671
// list := list diff i ;
40655: LD_ADDR_VAR 0 5
40659: PUSH
40660: LD_VAR 0 5
40664: PUSH
40665: LD_VAR 0 8
40669: DIFF
40670: ST_TO_ADDR
40671: GO 40639
40673: POP
40674: POP
// if not list then
40675: LD_VAR 0 5
40679: NOT
40680: IFFALSE 40684
// exit ;
40682: GO 41488
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40684: LD_VAR 0 12
40688: PUSH
40689: LD_INT 3
40691: EQUAL
40692: PUSH
40693: LD_INT 49
40695: PUSH
40696: LD_VAR 0 5
40700: IN
40701: AND
40702: PUSH
40703: LD_INT 31
40705: PPUSH
40706: LD_VAR 0 16
40710: PPUSH
40711: CALL_OW 321
40715: PUSH
40716: LD_INT 2
40718: EQUAL
40719: AND
40720: IFFALSE 40780
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40722: LD_INT 22
40724: PUSH
40725: LD_VAR 0 16
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 35
40736: PUSH
40737: LD_INT 49
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 91
40746: PUSH
40747: LD_VAR 0 1
40751: PUSH
40752: LD_INT 10
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: LIST
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: LIST
40764: PPUSH
40765: CALL_OW 69
40769: NOT
40770: IFFALSE 40780
// weapon := ru_time_lapser ;
40772: LD_ADDR_VAR 0 18
40776: PUSH
40777: LD_INT 49
40779: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40780: LD_VAR 0 12
40784: PUSH
40785: LD_INT 1
40787: PUSH
40788: LD_INT 2
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: IN
40795: PUSH
40796: LD_INT 11
40798: PUSH
40799: LD_VAR 0 5
40803: IN
40804: PUSH
40805: LD_INT 30
40807: PUSH
40808: LD_VAR 0 5
40812: IN
40813: OR
40814: AND
40815: PUSH
40816: LD_INT 6
40818: PPUSH
40819: LD_VAR 0 16
40823: PPUSH
40824: CALL_OW 321
40828: PUSH
40829: LD_INT 2
40831: EQUAL
40832: AND
40833: IFFALSE 40998
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40835: LD_INT 22
40837: PUSH
40838: LD_VAR 0 16
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 2
40849: PUSH
40850: LD_INT 35
40852: PUSH
40853: LD_INT 11
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 35
40862: PUSH
40863: LD_INT 30
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 91
40877: PUSH
40878: LD_VAR 0 1
40882: PUSH
40883: LD_INT 18
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: LIST
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: LIST
40895: PPUSH
40896: CALL_OW 69
40900: NOT
40901: PUSH
40902: LD_INT 22
40904: PUSH
40905: LD_VAR 0 16
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 2
40916: PUSH
40917: LD_INT 30
40919: PUSH
40920: LD_INT 32
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 30
40929: PUSH
40930: LD_INT 33
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 91
40944: PUSH
40945: LD_VAR 0 1
40949: PUSH
40950: LD_INT 12
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: LIST
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: LIST
40962: PUSH
40963: EMPTY
40964: LIST
40965: PPUSH
40966: CALL_OW 69
40970: PUSH
40971: LD_INT 2
40973: GREATER
40974: AND
40975: IFFALSE 40998
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40977: LD_ADDR_VAR 0 18
40981: PUSH
40982: LD_INT 11
40984: PUSH
40985: LD_INT 30
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_VAR 0 12
40996: ARRAY
40997: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40998: LD_VAR 0 18
41002: NOT
41003: PUSH
41004: LD_INT 40
41006: PPUSH
41007: LD_VAR 0 16
41011: PPUSH
41012: CALL_OW 321
41016: PUSH
41017: LD_INT 2
41019: EQUAL
41020: AND
41021: PUSH
41022: LD_INT 7
41024: PUSH
41025: LD_VAR 0 5
41029: IN
41030: PUSH
41031: LD_INT 28
41033: PUSH
41034: LD_VAR 0 5
41038: IN
41039: OR
41040: PUSH
41041: LD_INT 45
41043: PUSH
41044: LD_VAR 0 5
41048: IN
41049: OR
41050: AND
41051: IFFALSE 41305
// begin hex := GetHexInfo ( x , y ) ;
41053: LD_ADDR_VAR 0 4
41057: PUSH
41058: LD_VAR 0 10
41062: PPUSH
41063: LD_VAR 0 11
41067: PPUSH
41068: CALL_OW 546
41072: ST_TO_ADDR
// if hex [ 1 ] then
41073: LD_VAR 0 4
41077: PUSH
41078: LD_INT 1
41080: ARRAY
41081: IFFALSE 41085
// exit ;
41083: GO 41488
// height := hex [ 2 ] ;
41085: LD_ADDR_VAR 0 15
41089: PUSH
41090: LD_VAR 0 4
41094: PUSH
41095: LD_INT 2
41097: ARRAY
41098: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41099: LD_ADDR_VAR 0 14
41103: PUSH
41104: LD_INT 0
41106: PUSH
41107: LD_INT 2
41109: PUSH
41110: LD_INT 3
41112: PUSH
41113: LD_INT 5
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: ST_TO_ADDR
// for i in tmp do
41122: LD_ADDR_VAR 0 8
41126: PUSH
41127: LD_VAR 0 14
41131: PUSH
41132: FOR_IN
41133: IFFALSE 41303
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41135: LD_ADDR_VAR 0 9
41139: PUSH
41140: LD_VAR 0 10
41144: PPUSH
41145: LD_VAR 0 8
41149: PPUSH
41150: LD_INT 5
41152: PPUSH
41153: CALL_OW 272
41157: PUSH
41158: LD_VAR 0 11
41162: PPUSH
41163: LD_VAR 0 8
41167: PPUSH
41168: LD_INT 5
41170: PPUSH
41171: CALL_OW 273
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41180: LD_VAR 0 9
41184: PUSH
41185: LD_INT 1
41187: ARRAY
41188: PPUSH
41189: LD_VAR 0 9
41193: PUSH
41194: LD_INT 2
41196: ARRAY
41197: PPUSH
41198: CALL_OW 488
41202: IFFALSE 41301
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41204: LD_ADDR_VAR 0 4
41208: PUSH
41209: LD_VAR 0 9
41213: PUSH
41214: LD_INT 1
41216: ARRAY
41217: PPUSH
41218: LD_VAR 0 9
41222: PUSH
41223: LD_INT 2
41225: ARRAY
41226: PPUSH
41227: CALL_OW 546
41231: ST_TO_ADDR
// if hex [ 1 ] then
41232: LD_VAR 0 4
41236: PUSH
41237: LD_INT 1
41239: ARRAY
41240: IFFALSE 41244
// continue ;
41242: GO 41132
// h := hex [ 2 ] ;
41244: LD_ADDR_VAR 0 13
41248: PUSH
41249: LD_VAR 0 4
41253: PUSH
41254: LD_INT 2
41256: ARRAY
41257: ST_TO_ADDR
// if h + 7 < height then
41258: LD_VAR 0 13
41262: PUSH
41263: LD_INT 7
41265: PLUS
41266: PUSH
41267: LD_VAR 0 15
41271: LESS
41272: IFFALSE 41301
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41274: LD_ADDR_VAR 0 18
41278: PUSH
41279: LD_INT 7
41281: PUSH
41282: LD_INT 28
41284: PUSH
41285: LD_INT 45
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: LIST
41292: PUSH
41293: LD_VAR 0 12
41297: ARRAY
41298: ST_TO_ADDR
// break ;
41299: GO 41303
// end ; end ; end ;
41301: GO 41132
41303: POP
41304: POP
// end ; if not weapon then
41305: LD_VAR 0 18
41309: NOT
41310: IFFALSE 41370
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41312: LD_ADDR_VAR 0 5
41316: PUSH
41317: LD_VAR 0 5
41321: PUSH
41322: LD_INT 11
41324: PUSH
41325: LD_INT 30
41327: PUSH
41328: LD_INT 49
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: LIST
41335: DIFF
41336: ST_TO_ADDR
// if not list then
41337: LD_VAR 0 5
41341: NOT
41342: IFFALSE 41346
// exit ;
41344: GO 41488
// weapon := list [ rand ( 1 , list ) ] ;
41346: LD_ADDR_VAR 0 18
41350: PUSH
41351: LD_VAR 0 5
41355: PUSH
41356: LD_INT 1
41358: PPUSH
41359: LD_VAR 0 5
41363: PPUSH
41364: CALL_OW 12
41368: ARRAY
41369: ST_TO_ADDR
// end ; if weapon then
41370: LD_VAR 0 18
41374: IFFALSE 41488
// begin tmp := CostOfWeapon ( weapon ) ;
41376: LD_ADDR_VAR 0 14
41380: PUSH
41381: LD_VAR 0 18
41385: PPUSH
41386: CALL_OW 451
41390: ST_TO_ADDR
// j := GetBase ( tower ) ;
41391: LD_ADDR_VAR 0 9
41395: PUSH
41396: LD_VAR 0 1
41400: PPUSH
41401: CALL_OW 274
41405: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41406: LD_VAR 0 9
41410: PPUSH
41411: LD_INT 1
41413: PPUSH
41414: CALL_OW 275
41418: PUSH
41419: LD_VAR 0 14
41423: PUSH
41424: LD_INT 1
41426: ARRAY
41427: GREATEREQUAL
41428: PUSH
41429: LD_VAR 0 9
41433: PPUSH
41434: LD_INT 2
41436: PPUSH
41437: CALL_OW 275
41441: PUSH
41442: LD_VAR 0 14
41446: PUSH
41447: LD_INT 2
41449: ARRAY
41450: GREATEREQUAL
41451: AND
41452: PUSH
41453: LD_VAR 0 9
41457: PPUSH
41458: LD_INT 3
41460: PPUSH
41461: CALL_OW 275
41465: PUSH
41466: LD_VAR 0 14
41470: PUSH
41471: LD_INT 3
41473: ARRAY
41474: GREATEREQUAL
41475: AND
41476: IFFALSE 41488
// result := weapon ;
41478: LD_ADDR_VAR 0 3
41482: PUSH
41483: LD_VAR 0 18
41487: ST_TO_ADDR
// end ; end ;
41488: LD_VAR 0 3
41492: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41493: LD_INT 0
41495: PPUSH
41496: PPUSH
// result := true ;
41497: LD_ADDR_VAR 0 3
41501: PUSH
41502: LD_INT 1
41504: ST_TO_ADDR
// if array1 = array2 then
41505: LD_VAR 0 1
41509: PUSH
41510: LD_VAR 0 2
41514: EQUAL
41515: IFFALSE 41575
// begin for i = 1 to array1 do
41517: LD_ADDR_VAR 0 4
41521: PUSH
41522: DOUBLE
41523: LD_INT 1
41525: DEC
41526: ST_TO_ADDR
41527: LD_VAR 0 1
41531: PUSH
41532: FOR_TO
41533: IFFALSE 41571
// if array1 [ i ] <> array2 [ i ] then
41535: LD_VAR 0 1
41539: PUSH
41540: LD_VAR 0 4
41544: ARRAY
41545: PUSH
41546: LD_VAR 0 2
41550: PUSH
41551: LD_VAR 0 4
41555: ARRAY
41556: NONEQUAL
41557: IFFALSE 41569
// begin result := false ;
41559: LD_ADDR_VAR 0 3
41563: PUSH
41564: LD_INT 0
41566: ST_TO_ADDR
// break ;
41567: GO 41571
// end ;
41569: GO 41532
41571: POP
41572: POP
// end else
41573: GO 41583
// result := false ;
41575: LD_ADDR_VAR 0 3
41579: PUSH
41580: LD_INT 0
41582: ST_TO_ADDR
// end ;
41583: LD_VAR 0 3
41587: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41588: LD_INT 0
41590: PPUSH
41591: PPUSH
41592: PPUSH
// pom := GetBase ( fac ) ;
41593: LD_ADDR_VAR 0 5
41597: PUSH
41598: LD_VAR 0 1
41602: PPUSH
41603: CALL_OW 274
41607: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41608: LD_ADDR_VAR 0 4
41612: PUSH
41613: LD_VAR 0 2
41617: PUSH
41618: LD_INT 1
41620: ARRAY
41621: PPUSH
41622: LD_VAR 0 2
41626: PUSH
41627: LD_INT 2
41629: ARRAY
41630: PPUSH
41631: LD_VAR 0 2
41635: PUSH
41636: LD_INT 3
41638: ARRAY
41639: PPUSH
41640: LD_VAR 0 2
41644: PUSH
41645: LD_INT 4
41647: ARRAY
41648: PPUSH
41649: CALL_OW 449
41653: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41654: LD_ADDR_VAR 0 3
41658: PUSH
41659: LD_VAR 0 5
41663: PPUSH
41664: LD_INT 1
41666: PPUSH
41667: CALL_OW 275
41671: PUSH
41672: LD_VAR 0 4
41676: PUSH
41677: LD_INT 1
41679: ARRAY
41680: GREATEREQUAL
41681: PUSH
41682: LD_VAR 0 5
41686: PPUSH
41687: LD_INT 2
41689: PPUSH
41690: CALL_OW 275
41694: PUSH
41695: LD_VAR 0 4
41699: PUSH
41700: LD_INT 2
41702: ARRAY
41703: GREATEREQUAL
41704: AND
41705: PUSH
41706: LD_VAR 0 5
41710: PPUSH
41711: LD_INT 3
41713: PPUSH
41714: CALL_OW 275
41718: PUSH
41719: LD_VAR 0 4
41723: PUSH
41724: LD_INT 3
41726: ARRAY
41727: GREATEREQUAL
41728: AND
41729: ST_TO_ADDR
// end ;
41730: LD_VAR 0 3
41734: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41735: LD_INT 0
41737: PPUSH
41738: PPUSH
41739: PPUSH
41740: PPUSH
// pom := GetBase ( building ) ;
41741: LD_ADDR_VAR 0 3
41745: PUSH
41746: LD_VAR 0 1
41750: PPUSH
41751: CALL_OW 274
41755: ST_TO_ADDR
// if not pom then
41756: LD_VAR 0 3
41760: NOT
41761: IFFALSE 41765
// exit ;
41763: GO 41935
// btype := GetBType ( building ) ;
41765: LD_ADDR_VAR 0 5
41769: PUSH
41770: LD_VAR 0 1
41774: PPUSH
41775: CALL_OW 266
41779: ST_TO_ADDR
// if btype = b_armoury then
41780: LD_VAR 0 5
41784: PUSH
41785: LD_INT 4
41787: EQUAL
41788: IFFALSE 41798
// btype := b_barracks ;
41790: LD_ADDR_VAR 0 5
41794: PUSH
41795: LD_INT 5
41797: ST_TO_ADDR
// if btype = b_depot then
41798: LD_VAR 0 5
41802: PUSH
41803: LD_INT 0
41805: EQUAL
41806: IFFALSE 41816
// btype := b_warehouse ;
41808: LD_ADDR_VAR 0 5
41812: PUSH
41813: LD_INT 1
41815: ST_TO_ADDR
// if btype = b_workshop then
41816: LD_VAR 0 5
41820: PUSH
41821: LD_INT 2
41823: EQUAL
41824: IFFALSE 41834
// btype := b_factory ;
41826: LD_ADDR_VAR 0 5
41830: PUSH
41831: LD_INT 3
41833: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41834: LD_ADDR_VAR 0 4
41838: PUSH
41839: LD_VAR 0 5
41843: PPUSH
41844: LD_VAR 0 1
41848: PPUSH
41849: CALL_OW 248
41853: PPUSH
41854: CALL_OW 450
41858: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41859: LD_ADDR_VAR 0 2
41863: PUSH
41864: LD_VAR 0 3
41868: PPUSH
41869: LD_INT 1
41871: PPUSH
41872: CALL_OW 275
41876: PUSH
41877: LD_VAR 0 4
41881: PUSH
41882: LD_INT 1
41884: ARRAY
41885: GREATEREQUAL
41886: PUSH
41887: LD_VAR 0 3
41891: PPUSH
41892: LD_INT 2
41894: PPUSH
41895: CALL_OW 275
41899: PUSH
41900: LD_VAR 0 4
41904: PUSH
41905: LD_INT 2
41907: ARRAY
41908: GREATEREQUAL
41909: AND
41910: PUSH
41911: LD_VAR 0 3
41915: PPUSH
41916: LD_INT 3
41918: PPUSH
41919: CALL_OW 275
41923: PUSH
41924: LD_VAR 0 4
41928: PUSH
41929: LD_INT 3
41931: ARRAY
41932: GREATEREQUAL
41933: AND
41934: ST_TO_ADDR
// end ;
41935: LD_VAR 0 2
41939: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41940: LD_INT 0
41942: PPUSH
41943: PPUSH
41944: PPUSH
// pom := GetBase ( building ) ;
41945: LD_ADDR_VAR 0 4
41949: PUSH
41950: LD_VAR 0 1
41954: PPUSH
41955: CALL_OW 274
41959: ST_TO_ADDR
// if not pom then
41960: LD_VAR 0 4
41964: NOT
41965: IFFALSE 41969
// exit ;
41967: GO 42070
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41969: LD_ADDR_VAR 0 5
41973: PUSH
41974: LD_VAR 0 2
41978: PPUSH
41979: LD_VAR 0 1
41983: PPUSH
41984: CALL_OW 248
41988: PPUSH
41989: CALL_OW 450
41993: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41994: LD_ADDR_VAR 0 3
41998: PUSH
41999: LD_VAR 0 4
42003: PPUSH
42004: LD_INT 1
42006: PPUSH
42007: CALL_OW 275
42011: PUSH
42012: LD_VAR 0 5
42016: PUSH
42017: LD_INT 1
42019: ARRAY
42020: GREATEREQUAL
42021: PUSH
42022: LD_VAR 0 4
42026: PPUSH
42027: LD_INT 2
42029: PPUSH
42030: CALL_OW 275
42034: PUSH
42035: LD_VAR 0 5
42039: PUSH
42040: LD_INT 2
42042: ARRAY
42043: GREATEREQUAL
42044: AND
42045: PUSH
42046: LD_VAR 0 4
42050: PPUSH
42051: LD_INT 3
42053: PPUSH
42054: CALL_OW 275
42058: PUSH
42059: LD_VAR 0 5
42063: PUSH
42064: LD_INT 3
42066: ARRAY
42067: GREATEREQUAL
42068: AND
42069: ST_TO_ADDR
// end ;
42070: LD_VAR 0 3
42074: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
42075: LD_INT 0
42077: PPUSH
42078: PPUSH
42079: PPUSH
42080: PPUSH
42081: PPUSH
42082: PPUSH
42083: PPUSH
42084: PPUSH
42085: PPUSH
42086: PPUSH
// result := false ;
42087: LD_ADDR_VAR 0 6
42091: PUSH
42092: LD_INT 0
42094: ST_TO_ADDR
// if not base or not btype or not x or not y then
42095: LD_VAR 0 1
42099: NOT
42100: PUSH
42101: LD_VAR 0 2
42105: NOT
42106: OR
42107: PUSH
42108: LD_VAR 0 3
42112: NOT
42113: OR
42114: PUSH
42115: LD_VAR 0 4
42119: NOT
42120: OR
42121: IFFALSE 42125
// exit ;
42123: GO 42734
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
42125: LD_ADDR_VAR 0 12
42129: PUSH
42130: LD_VAR 0 2
42134: PPUSH
42135: LD_VAR 0 3
42139: PPUSH
42140: LD_VAR 0 4
42144: PPUSH
42145: LD_VAR 0 5
42149: PPUSH
42150: LD_VAR 0 1
42154: PUSH
42155: LD_INT 1
42157: ARRAY
42158: PPUSH
42159: CALL_OW 248
42163: PPUSH
42164: LD_INT 0
42166: PPUSH
42167: CALL 43571 0 6
42171: ST_TO_ADDR
// if not hexes then
42172: LD_VAR 0 12
42176: NOT
42177: IFFALSE 42181
// exit ;
42179: GO 42734
// for i = 1 to hexes do
42181: LD_ADDR_VAR 0 7
42185: PUSH
42186: DOUBLE
42187: LD_INT 1
42189: DEC
42190: ST_TO_ADDR
42191: LD_VAR 0 12
42195: PUSH
42196: FOR_TO
42197: IFFALSE 42732
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42199: LD_ADDR_VAR 0 11
42203: PUSH
42204: LD_VAR 0 12
42208: PUSH
42209: LD_VAR 0 7
42213: ARRAY
42214: PUSH
42215: LD_INT 1
42217: ARRAY
42218: PPUSH
42219: LD_VAR 0 12
42223: PUSH
42224: LD_VAR 0 7
42228: ARRAY
42229: PUSH
42230: LD_INT 2
42232: ARRAY
42233: PPUSH
42234: CALL_OW 428
42238: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42239: LD_VAR 0 12
42243: PUSH
42244: LD_VAR 0 7
42248: ARRAY
42249: PUSH
42250: LD_INT 1
42252: ARRAY
42253: PPUSH
42254: LD_VAR 0 12
42258: PUSH
42259: LD_VAR 0 7
42263: ARRAY
42264: PUSH
42265: LD_INT 2
42267: ARRAY
42268: PPUSH
42269: CALL_OW 351
42273: PUSH
42274: LD_VAR 0 12
42278: PUSH
42279: LD_VAR 0 7
42283: ARRAY
42284: PUSH
42285: LD_INT 1
42287: ARRAY
42288: PPUSH
42289: LD_VAR 0 12
42293: PUSH
42294: LD_VAR 0 7
42298: ARRAY
42299: PUSH
42300: LD_INT 2
42302: ARRAY
42303: PPUSH
42304: CALL_OW 488
42308: NOT
42309: OR
42310: PUSH
42311: LD_VAR 0 11
42315: PPUSH
42316: CALL_OW 247
42320: PUSH
42321: LD_INT 3
42323: EQUAL
42324: OR
42325: IFFALSE 42331
// exit ;
42327: POP
42328: POP
42329: GO 42734
// if not tmp or not tmp in base then
42331: LD_VAR 0 11
42335: NOT
42336: PUSH
42337: LD_VAR 0 11
42341: PUSH
42342: LD_VAR 0 1
42346: IN
42347: NOT
42348: OR
42349: IFFALSE 42353
// continue ;
42351: GO 42196
// result := true ;
42353: LD_ADDR_VAR 0 6
42357: PUSH
42358: LD_INT 1
42360: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42361: LD_ADDR_VAR 0 15
42365: PUSH
42366: LD_VAR 0 1
42370: PPUSH
42371: LD_INT 22
42373: PUSH
42374: LD_VAR 0 11
42378: PPUSH
42379: CALL_OW 255
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 2
42390: PUSH
42391: LD_INT 30
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 30
42403: PUSH
42404: LD_INT 1
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: LIST
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PPUSH
42420: CALL_OW 72
42424: ST_TO_ADDR
// if dep then
42425: LD_VAR 0 15
42429: IFFALSE 42565
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42431: LD_ADDR_VAR 0 14
42435: PUSH
42436: LD_VAR 0 15
42440: PUSH
42441: LD_INT 1
42443: ARRAY
42444: PPUSH
42445: CALL_OW 250
42449: PPUSH
42450: LD_VAR 0 15
42454: PUSH
42455: LD_INT 1
42457: ARRAY
42458: PPUSH
42459: CALL_OW 254
42463: PPUSH
42464: LD_INT 5
42466: PPUSH
42467: CALL_OW 272
42471: PUSH
42472: LD_VAR 0 15
42476: PUSH
42477: LD_INT 1
42479: ARRAY
42480: PPUSH
42481: CALL_OW 251
42485: PPUSH
42486: LD_VAR 0 15
42490: PUSH
42491: LD_INT 1
42493: ARRAY
42494: PPUSH
42495: CALL_OW 254
42499: PPUSH
42500: LD_INT 5
42502: PPUSH
42503: CALL_OW 273
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42512: LD_VAR 0 14
42516: PUSH
42517: LD_INT 1
42519: ARRAY
42520: PPUSH
42521: LD_VAR 0 14
42525: PUSH
42526: LD_INT 2
42528: ARRAY
42529: PPUSH
42530: CALL_OW 488
42534: IFFALSE 42565
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42536: LD_VAR 0 11
42540: PPUSH
42541: LD_VAR 0 14
42545: PUSH
42546: LD_INT 1
42548: ARRAY
42549: PPUSH
42550: LD_VAR 0 14
42554: PUSH
42555: LD_INT 2
42557: ARRAY
42558: PPUSH
42559: CALL_OW 111
// continue ;
42563: GO 42196
// end ; end ; r := GetDir ( tmp ) ;
42565: LD_ADDR_VAR 0 13
42569: PUSH
42570: LD_VAR 0 11
42574: PPUSH
42575: CALL_OW 254
42579: ST_TO_ADDR
// if r = 5 then
42580: LD_VAR 0 13
42584: PUSH
42585: LD_INT 5
42587: EQUAL
42588: IFFALSE 42598
// r := 0 ;
42590: LD_ADDR_VAR 0 13
42594: PUSH
42595: LD_INT 0
42597: ST_TO_ADDR
// for j = r to 5 do
42598: LD_ADDR_VAR 0 8
42602: PUSH
42603: DOUBLE
42604: LD_VAR 0 13
42608: DEC
42609: ST_TO_ADDR
42610: LD_INT 5
42612: PUSH
42613: FOR_TO
42614: IFFALSE 42728
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42616: LD_ADDR_VAR 0 9
42620: PUSH
42621: LD_VAR 0 11
42625: PPUSH
42626: CALL_OW 250
42630: PPUSH
42631: LD_VAR 0 8
42635: PPUSH
42636: LD_INT 2
42638: PPUSH
42639: CALL_OW 272
42643: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42644: LD_ADDR_VAR 0 10
42648: PUSH
42649: LD_VAR 0 11
42653: PPUSH
42654: CALL_OW 251
42658: PPUSH
42659: LD_VAR 0 8
42663: PPUSH
42664: LD_INT 2
42666: PPUSH
42667: CALL_OW 273
42671: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42672: LD_VAR 0 9
42676: PPUSH
42677: LD_VAR 0 10
42681: PPUSH
42682: CALL_OW 488
42686: PUSH
42687: LD_VAR 0 9
42691: PPUSH
42692: LD_VAR 0 10
42696: PPUSH
42697: CALL_OW 428
42701: NOT
42702: AND
42703: IFFALSE 42726
// begin ComMoveXY ( tmp , _x , _y ) ;
42705: LD_VAR 0 11
42709: PPUSH
42710: LD_VAR 0 9
42714: PPUSH
42715: LD_VAR 0 10
42719: PPUSH
42720: CALL_OW 111
// break ;
42724: GO 42728
// end ; end ;
42726: GO 42613
42728: POP
42729: POP
// end ;
42730: GO 42196
42732: POP
42733: POP
// end ;
42734: LD_VAR 0 6
42738: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
42739: LD_INT 0
42741: PPUSH
42742: PPUSH
42743: PPUSH
42744: PPUSH
42745: PPUSH
42746: PPUSH
42747: PPUSH
42748: PPUSH
42749: PPUSH
42750: PPUSH
// result := false ;
42751: LD_ADDR_VAR 0 6
42755: PUSH
42756: LD_INT 0
42758: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42759: LD_VAR 0 1
42763: NOT
42764: PUSH
42765: LD_VAR 0 1
42769: PPUSH
42770: CALL_OW 266
42774: PUSH
42775: LD_INT 0
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: IN
42785: NOT
42786: OR
42787: PUSH
42788: LD_VAR 0 2
42792: NOT
42793: OR
42794: PUSH
42795: LD_VAR 0 5
42799: PUSH
42800: LD_INT 0
42802: PUSH
42803: LD_INT 1
42805: PUSH
42806: LD_INT 2
42808: PUSH
42809: LD_INT 3
42811: PUSH
42812: LD_INT 4
42814: PUSH
42815: LD_INT 5
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: IN
42826: NOT
42827: OR
42828: PUSH
42829: LD_VAR 0 3
42833: PPUSH
42834: LD_VAR 0 4
42838: PPUSH
42839: CALL_OW 488
42843: NOT
42844: OR
42845: IFFALSE 42849
// exit ;
42847: GO 43566
// pom := GetBase ( depot ) ;
42849: LD_ADDR_VAR 0 10
42853: PUSH
42854: LD_VAR 0 1
42858: PPUSH
42859: CALL_OW 274
42863: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42864: LD_ADDR_VAR 0 11
42868: PUSH
42869: LD_VAR 0 2
42873: PPUSH
42874: LD_VAR 0 1
42878: PPUSH
42879: CALL_OW 248
42883: PPUSH
42884: CALL_OW 450
42888: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42889: LD_VAR 0 10
42893: PPUSH
42894: LD_INT 1
42896: PPUSH
42897: CALL_OW 275
42901: PUSH
42902: LD_VAR 0 11
42906: PUSH
42907: LD_INT 1
42909: ARRAY
42910: GREATEREQUAL
42911: PUSH
42912: LD_VAR 0 10
42916: PPUSH
42917: LD_INT 2
42919: PPUSH
42920: CALL_OW 275
42924: PUSH
42925: LD_VAR 0 11
42929: PUSH
42930: LD_INT 2
42932: ARRAY
42933: GREATEREQUAL
42934: AND
42935: PUSH
42936: LD_VAR 0 10
42940: PPUSH
42941: LD_INT 3
42943: PPUSH
42944: CALL_OW 275
42948: PUSH
42949: LD_VAR 0 11
42953: PUSH
42954: LD_INT 3
42956: ARRAY
42957: GREATEREQUAL
42958: AND
42959: NOT
42960: IFFALSE 42964
// exit ;
42962: GO 43566
// if GetBType ( depot ) = b_depot then
42964: LD_VAR 0 1
42968: PPUSH
42969: CALL_OW 266
42973: PUSH
42974: LD_INT 0
42976: EQUAL
42977: IFFALSE 42989
// dist := 28 else
42979: LD_ADDR_VAR 0 14
42983: PUSH
42984: LD_INT 28
42986: ST_TO_ADDR
42987: GO 42997
// dist := 36 ;
42989: LD_ADDR_VAR 0 14
42993: PUSH
42994: LD_INT 36
42996: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42997: LD_VAR 0 1
43001: PPUSH
43002: LD_VAR 0 3
43006: PPUSH
43007: LD_VAR 0 4
43011: PPUSH
43012: CALL_OW 297
43016: PUSH
43017: LD_VAR 0 14
43021: GREATER
43022: IFFALSE 43026
// exit ;
43024: GO 43566
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43026: LD_ADDR_VAR 0 12
43030: PUSH
43031: LD_VAR 0 2
43035: PPUSH
43036: LD_VAR 0 3
43040: PPUSH
43041: LD_VAR 0 4
43045: PPUSH
43046: LD_VAR 0 5
43050: PPUSH
43051: LD_VAR 0 1
43055: PPUSH
43056: CALL_OW 248
43060: PPUSH
43061: LD_INT 0
43063: PPUSH
43064: CALL 43571 0 6
43068: ST_TO_ADDR
// if not hexes then
43069: LD_VAR 0 12
43073: NOT
43074: IFFALSE 43078
// exit ;
43076: GO 43566
// hex := GetHexInfo ( x , y ) ;
43078: LD_ADDR_VAR 0 15
43082: PUSH
43083: LD_VAR 0 3
43087: PPUSH
43088: LD_VAR 0 4
43092: PPUSH
43093: CALL_OW 546
43097: ST_TO_ADDR
// if hex [ 1 ] then
43098: LD_VAR 0 15
43102: PUSH
43103: LD_INT 1
43105: ARRAY
43106: IFFALSE 43110
// exit ;
43108: GO 43566
// height := hex [ 2 ] ;
43110: LD_ADDR_VAR 0 13
43114: PUSH
43115: LD_VAR 0 15
43119: PUSH
43120: LD_INT 2
43122: ARRAY
43123: ST_TO_ADDR
// for i = 1 to hexes do
43124: LD_ADDR_VAR 0 7
43128: PUSH
43129: DOUBLE
43130: LD_INT 1
43132: DEC
43133: ST_TO_ADDR
43134: LD_VAR 0 12
43138: PUSH
43139: FOR_TO
43140: IFFALSE 43470
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43142: LD_VAR 0 12
43146: PUSH
43147: LD_VAR 0 7
43151: ARRAY
43152: PUSH
43153: LD_INT 1
43155: ARRAY
43156: PPUSH
43157: LD_VAR 0 12
43161: PUSH
43162: LD_VAR 0 7
43166: ARRAY
43167: PUSH
43168: LD_INT 2
43170: ARRAY
43171: PPUSH
43172: CALL_OW 488
43176: NOT
43177: PUSH
43178: LD_VAR 0 12
43182: PUSH
43183: LD_VAR 0 7
43187: ARRAY
43188: PUSH
43189: LD_INT 1
43191: ARRAY
43192: PPUSH
43193: LD_VAR 0 12
43197: PUSH
43198: LD_VAR 0 7
43202: ARRAY
43203: PUSH
43204: LD_INT 2
43206: ARRAY
43207: PPUSH
43208: CALL_OW 428
43212: PUSH
43213: LD_INT 0
43215: GREATER
43216: OR
43217: PUSH
43218: LD_VAR 0 12
43222: PUSH
43223: LD_VAR 0 7
43227: ARRAY
43228: PUSH
43229: LD_INT 1
43231: ARRAY
43232: PPUSH
43233: LD_VAR 0 12
43237: PUSH
43238: LD_VAR 0 7
43242: ARRAY
43243: PUSH
43244: LD_INT 2
43246: ARRAY
43247: PPUSH
43248: CALL_OW 351
43252: OR
43253: IFFALSE 43259
// exit ;
43255: POP
43256: POP
43257: GO 43566
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43259: LD_ADDR_VAR 0 8
43263: PUSH
43264: LD_VAR 0 12
43268: PUSH
43269: LD_VAR 0 7
43273: ARRAY
43274: PUSH
43275: LD_INT 1
43277: ARRAY
43278: PPUSH
43279: LD_VAR 0 12
43283: PUSH
43284: LD_VAR 0 7
43288: ARRAY
43289: PUSH
43290: LD_INT 2
43292: ARRAY
43293: PPUSH
43294: CALL_OW 546
43298: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43299: LD_VAR 0 8
43303: PUSH
43304: LD_INT 1
43306: ARRAY
43307: PUSH
43308: LD_VAR 0 8
43312: PUSH
43313: LD_INT 2
43315: ARRAY
43316: PUSH
43317: LD_VAR 0 13
43321: PUSH
43322: LD_INT 2
43324: PLUS
43325: GREATER
43326: OR
43327: PUSH
43328: LD_VAR 0 8
43332: PUSH
43333: LD_INT 2
43335: ARRAY
43336: PUSH
43337: LD_VAR 0 13
43341: PUSH
43342: LD_INT 2
43344: MINUS
43345: LESS
43346: OR
43347: PUSH
43348: LD_VAR 0 8
43352: PUSH
43353: LD_INT 3
43355: ARRAY
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: LD_INT 8
43362: PUSH
43363: LD_INT 9
43365: PUSH
43366: LD_INT 10
43368: PUSH
43369: LD_INT 11
43371: PUSH
43372: LD_INT 12
43374: PUSH
43375: LD_INT 13
43377: PUSH
43378: LD_INT 16
43380: PUSH
43381: LD_INT 17
43383: PUSH
43384: LD_INT 18
43386: PUSH
43387: LD_INT 19
43389: PUSH
43390: LD_INT 20
43392: PUSH
43393: LD_INT 21
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: IN
43411: NOT
43412: OR
43413: PUSH
43414: LD_VAR 0 8
43418: PUSH
43419: LD_INT 5
43421: ARRAY
43422: NOT
43423: OR
43424: PUSH
43425: LD_VAR 0 8
43429: PUSH
43430: LD_INT 6
43432: ARRAY
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: LD_INT 2
43439: PUSH
43440: LD_INT 7
43442: PUSH
43443: LD_INT 9
43445: PUSH
43446: LD_INT 10
43448: PUSH
43449: LD_INT 11
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: IN
43460: NOT
43461: OR
43462: IFFALSE 43468
// exit ;
43464: POP
43465: POP
43466: GO 43566
// end ;
43468: GO 43139
43470: POP
43471: POP
// side := GetSide ( depot ) ;
43472: LD_ADDR_VAR 0 9
43476: PUSH
43477: LD_VAR 0 1
43481: PPUSH
43482: CALL_OW 255
43486: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43487: LD_VAR 0 9
43491: PPUSH
43492: LD_VAR 0 3
43496: PPUSH
43497: LD_VAR 0 4
43501: PPUSH
43502: LD_INT 20
43504: PPUSH
43505: CALL 36220 0 4
43509: PUSH
43510: LD_INT 4
43512: ARRAY
43513: IFFALSE 43517
// exit ;
43515: GO 43566
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43517: LD_VAR 0 2
43521: PUSH
43522: LD_INT 29
43524: PUSH
43525: LD_INT 30
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: IN
43532: PUSH
43533: LD_VAR 0 3
43537: PPUSH
43538: LD_VAR 0 4
43542: PPUSH
43543: LD_VAR 0 9
43547: PPUSH
43548: CALL_OW 440
43552: NOT
43553: AND
43554: IFFALSE 43558
// exit ;
43556: GO 43566
// result := true ;
43558: LD_ADDR_VAR 0 6
43562: PUSH
43563: LD_INT 1
43565: ST_TO_ADDR
// end ;
43566: LD_VAR 0 6
43570: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43571: LD_INT 0
43573: PPUSH
43574: PPUSH
43575: PPUSH
43576: PPUSH
43577: PPUSH
43578: PPUSH
43579: PPUSH
43580: PPUSH
43581: PPUSH
43582: PPUSH
43583: PPUSH
43584: PPUSH
43585: PPUSH
43586: PPUSH
43587: PPUSH
43588: PPUSH
43589: PPUSH
43590: PPUSH
43591: PPUSH
43592: PPUSH
43593: PPUSH
43594: PPUSH
43595: PPUSH
43596: PPUSH
43597: PPUSH
43598: PPUSH
43599: PPUSH
43600: PPUSH
43601: PPUSH
43602: PPUSH
43603: PPUSH
43604: PPUSH
43605: PPUSH
43606: PPUSH
43607: PPUSH
43608: PPUSH
43609: PPUSH
43610: PPUSH
43611: PPUSH
43612: PPUSH
43613: PPUSH
43614: PPUSH
43615: PPUSH
43616: PPUSH
43617: PPUSH
43618: PPUSH
43619: PPUSH
43620: PPUSH
43621: PPUSH
43622: PPUSH
43623: PPUSH
43624: PPUSH
43625: PPUSH
43626: PPUSH
43627: PPUSH
43628: PPUSH
43629: PPUSH
43630: PPUSH
// result = [ ] ;
43631: LD_ADDR_VAR 0 7
43635: PUSH
43636: EMPTY
43637: ST_TO_ADDR
// temp_list = [ ] ;
43638: LD_ADDR_VAR 0 9
43642: PUSH
43643: EMPTY
43644: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43645: LD_VAR 0 4
43649: PUSH
43650: LD_INT 0
43652: PUSH
43653: LD_INT 1
43655: PUSH
43656: LD_INT 2
43658: PUSH
43659: LD_INT 3
43661: PUSH
43662: LD_INT 4
43664: PUSH
43665: LD_INT 5
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: IN
43676: NOT
43677: PUSH
43678: LD_VAR 0 1
43682: PUSH
43683: LD_INT 0
43685: PUSH
43686: LD_INT 1
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: IN
43693: PUSH
43694: LD_VAR 0 5
43698: PUSH
43699: LD_INT 1
43701: PUSH
43702: LD_INT 2
43704: PUSH
43705: LD_INT 3
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: LIST
43712: IN
43713: NOT
43714: AND
43715: OR
43716: IFFALSE 43720
// exit ;
43718: GO 62111
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43720: LD_VAR 0 1
43724: PUSH
43725: LD_INT 6
43727: PUSH
43728: LD_INT 7
43730: PUSH
43731: LD_INT 8
43733: PUSH
43734: LD_INT 13
43736: PUSH
43737: LD_INT 12
43739: PUSH
43740: LD_INT 15
43742: PUSH
43743: LD_INT 11
43745: PUSH
43746: LD_INT 14
43748: PUSH
43749: LD_INT 10
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: IN
43763: IFFALSE 43773
// btype = b_lab ;
43765: LD_ADDR_VAR 0 1
43769: PUSH
43770: LD_INT 6
43772: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43773: LD_VAR 0 6
43777: PUSH
43778: LD_INT 0
43780: PUSH
43781: LD_INT 1
43783: PUSH
43784: LD_INT 2
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: LIST
43791: IN
43792: NOT
43793: PUSH
43794: LD_VAR 0 1
43798: PUSH
43799: LD_INT 0
43801: PUSH
43802: LD_INT 1
43804: PUSH
43805: LD_INT 2
43807: PUSH
43808: LD_INT 3
43810: PUSH
43811: LD_INT 6
43813: PUSH
43814: LD_INT 36
43816: PUSH
43817: LD_INT 4
43819: PUSH
43820: LD_INT 5
43822: PUSH
43823: LD_INT 31
43825: PUSH
43826: LD_INT 32
43828: PUSH
43829: LD_INT 33
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: IN
43845: NOT
43846: PUSH
43847: LD_VAR 0 6
43851: PUSH
43852: LD_INT 1
43854: EQUAL
43855: AND
43856: OR
43857: PUSH
43858: LD_VAR 0 1
43862: PUSH
43863: LD_INT 2
43865: PUSH
43866: LD_INT 3
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: IN
43873: NOT
43874: PUSH
43875: LD_VAR 0 6
43879: PUSH
43880: LD_INT 2
43882: EQUAL
43883: AND
43884: OR
43885: IFFALSE 43895
// mode = 0 ;
43887: LD_ADDR_VAR 0 6
43891: PUSH
43892: LD_INT 0
43894: ST_TO_ADDR
// case mode of 0 :
43895: LD_VAR 0 6
43899: PUSH
43900: LD_INT 0
43902: DOUBLE
43903: EQUAL
43904: IFTRUE 43908
43906: GO 55361
43908: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43909: LD_ADDR_VAR 0 11
43913: PUSH
43914: LD_INT 0
43916: PUSH
43917: LD_INT 0
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 0
43926: PUSH
43927: LD_INT 1
43929: NEG
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 1
43937: PUSH
43938: LD_INT 0
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 1
43947: PUSH
43948: LD_INT 1
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 0
43957: PUSH
43958: LD_INT 1
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 1
43967: NEG
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 1
43978: NEG
43979: PUSH
43980: LD_INT 1
43982: NEG
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 1
43990: NEG
43991: PUSH
43992: LD_INT 2
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: LD_INT 2
44005: NEG
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: LD_INT 1
44016: NEG
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 1
44024: PUSH
44025: LD_INT 2
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: LD_INT 2
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 1
44044: NEG
44045: PUSH
44046: LD_INT 1
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: LD_INT 3
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 0
44065: PUSH
44066: LD_INT 3
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 1
44075: NEG
44076: PUSH
44077: LD_INT 2
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44102: LD_ADDR_VAR 0 12
44106: PUSH
44107: LD_INT 0
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: LD_INT 1
44122: NEG
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 1
44130: PUSH
44131: LD_INT 0
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 1
44140: PUSH
44141: LD_INT 1
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: LD_INT 1
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 1
44160: NEG
44161: PUSH
44162: LD_INT 0
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 1
44171: NEG
44172: PUSH
44173: LD_INT 1
44175: NEG
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 1
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 2
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 2
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 1
44214: NEG
44215: PUSH
44216: LD_INT 1
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 2
44225: NEG
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 2
44236: NEG
44237: PUSH
44238: LD_INT 1
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 2
44248: NEG
44249: PUSH
44250: LD_INT 1
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 3
44259: NEG
44260: PUSH
44261: LD_INT 0
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 3
44270: NEG
44271: PUSH
44272: LD_INT 1
44274: NEG
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44298: LD_ADDR_VAR 0 13
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: LD_INT 0
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: LD_INT 1
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: LD_INT 0
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 1
44336: PUSH
44337: LD_INT 1
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: LD_INT 1
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 1
44356: NEG
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 1
44367: NEG
44368: PUSH
44369: LD_INT 1
44371: NEG
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: LD_INT 2
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 2
44391: PUSH
44392: LD_INT 1
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 2
44401: PUSH
44402: LD_INT 2
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: LD_INT 2
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 2
44421: NEG
44422: PUSH
44423: LD_INT 1
44425: NEG
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 2
44433: NEG
44434: PUSH
44435: LD_INT 2
44437: NEG
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 2
44445: NEG
44446: PUSH
44447: LD_INT 3
44449: NEG
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 3
44457: NEG
44458: PUSH
44459: LD_INT 2
44461: NEG
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 3
44469: NEG
44470: PUSH
44471: LD_INT 3
44473: NEG
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44497: LD_ADDR_VAR 0 14
44501: PUSH
44502: LD_INT 0
44504: PUSH
44505: LD_INT 0
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: LD_INT 1
44517: NEG
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 1
44535: PUSH
44536: LD_INT 1
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: LD_INT 1
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 1
44555: NEG
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 1
44566: NEG
44567: PUSH
44568: LD_INT 1
44570: NEG
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: LD_INT 2
44582: NEG
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: LD_INT 2
44593: NEG
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 1
44601: PUSH
44602: LD_INT 1
44604: NEG
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 1
44612: PUSH
44613: LD_INT 2
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: LD_INT 2
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 1
44632: NEG
44633: PUSH
44634: LD_INT 1
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 1
44643: NEG
44644: PUSH
44645: LD_INT 3
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 0
44655: PUSH
44656: LD_INT 3
44658: NEG
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: PUSH
44667: LD_INT 2
44669: NEG
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44693: LD_ADDR_VAR 0 15
44697: PUSH
44698: LD_INT 0
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 1
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: LD_INT 1
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: LD_INT 1
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 1
44751: NEG
44752: PUSH
44753: LD_INT 0
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 1
44762: NEG
44763: PUSH
44764: LD_INT 1
44766: NEG
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 1
44774: PUSH
44775: LD_INT 1
44777: NEG
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 2
44785: PUSH
44786: LD_INT 0
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 2
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 1
44805: NEG
44806: PUSH
44807: LD_INT 1
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 2
44816: NEG
44817: PUSH
44818: LD_INT 0
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 2
44827: NEG
44828: PUSH
44829: LD_INT 1
44831: NEG
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 2
44839: PUSH
44840: LD_INT 1
44842: NEG
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 3
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 3
44860: PUSH
44861: LD_INT 1
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44886: LD_ADDR_VAR 0 16
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: LD_INT 0
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 0
44903: PUSH
44904: LD_INT 1
44906: NEG
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 1
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: LD_INT 1
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 1
44955: NEG
44956: PUSH
44957: LD_INT 1
44959: NEG
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: LD_INT 2
44971: NEG
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 2
44979: PUSH
44980: LD_INT 1
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 2
44989: PUSH
44990: LD_INT 2
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 1
44999: PUSH
45000: LD_INT 2
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 2
45009: NEG
45010: PUSH
45011: LD_INT 1
45013: NEG
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 2
45021: NEG
45022: PUSH
45023: LD_INT 2
45025: NEG
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 3
45033: PUSH
45034: LD_INT 2
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 3
45043: PUSH
45044: LD_INT 3
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 2
45053: PUSH
45054: LD_INT 3
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45079: LD_ADDR_VAR 0 17
45083: PUSH
45084: LD_INT 0
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: LD_INT 1
45099: NEG
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: PUSH
45108: LD_INT 0
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 1
45117: PUSH
45118: LD_INT 1
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 1
45137: NEG
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 1
45148: NEG
45149: PUSH
45150: LD_INT 1
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: LD_INT 2
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 0
45172: PUSH
45173: LD_INT 2
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: LD_INT 1
45186: NEG
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 2
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 2
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 2
45214: PUSH
45215: LD_INT 2
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 1
45224: PUSH
45225: LD_INT 2
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 0
45234: PUSH
45235: LD_INT 2
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: LD_INT 1
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 2
45255: NEG
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 2
45266: NEG
45267: PUSH
45268: LD_INT 1
45270: NEG
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 2
45278: NEG
45279: PUSH
45280: LD_INT 2
45282: NEG
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45309: LD_ADDR_VAR 0 18
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: LD_INT 0
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: LD_INT 1
45329: NEG
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 1
45337: PUSH
45338: LD_INT 0
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 1
45347: PUSH
45348: LD_INT 1
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 0
45357: PUSH
45358: LD_INT 1
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: NEG
45368: PUSH
45369: LD_INT 0
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 1
45378: NEG
45379: PUSH
45380: LD_INT 1
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: LD_INT 2
45394: NEG
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 0
45402: PUSH
45403: LD_INT 2
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 2
45424: PUSH
45425: LD_INT 0
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 2
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 2
45444: PUSH
45445: LD_INT 2
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 1
45454: PUSH
45455: LD_INT 2
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 0
45464: PUSH
45465: LD_INT 2
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 2
45485: NEG
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 2
45496: NEG
45497: PUSH
45498: LD_INT 1
45500: NEG
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 2
45508: NEG
45509: PUSH
45510: LD_INT 2
45512: NEG
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45539: LD_ADDR_VAR 0 19
45543: PUSH
45544: LD_INT 0
45546: PUSH
45547: LD_INT 0
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: LD_INT 1
45559: NEG
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 1
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 1
45577: PUSH
45578: LD_INT 1
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 1
45597: NEG
45598: PUSH
45599: LD_INT 0
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: NEG
45609: PUSH
45610: LD_INT 1
45612: NEG
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: LD_INT 2
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: LD_INT 2
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 1
45643: PUSH
45644: LD_INT 1
45646: NEG
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 2
45654: PUSH
45655: LD_INT 0
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 2
45664: PUSH
45665: LD_INT 1
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 2
45674: PUSH
45675: LD_INT 2
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: LD_INT 2
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 0
45694: PUSH
45695: LD_INT 2
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: LD_INT 1
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 2
45715: NEG
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 2
45726: NEG
45727: PUSH
45728: LD_INT 1
45730: NEG
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 2
45738: NEG
45739: PUSH
45740: LD_INT 2
45742: NEG
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45769: LD_ADDR_VAR 0 20
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: LD_INT 0
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: LD_INT 1
45789: NEG
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: LD_INT 0
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: LD_INT 1
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: LD_INT 1
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: LD_INT 0
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: NEG
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 1
45850: NEG
45851: PUSH
45852: LD_INT 2
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: LD_INT 2
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 2
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 2
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 2
45904: PUSH
45905: LD_INT 2
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: PUSH
45915: LD_INT 2
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 0
45924: PUSH
45925: LD_INT 2
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 1
45934: NEG
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 2
45945: NEG
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 2
45956: NEG
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 2
45968: NEG
45969: PUSH
45970: LD_INT 2
45972: NEG
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45999: LD_ADDR_VAR 0 21
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: LD_INT 1
46019: NEG
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: LD_INT 0
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: LD_INT 1
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: NEG
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 1
46080: NEG
46081: PUSH
46082: LD_INT 2
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 0
46092: PUSH
46093: LD_INT 2
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: LD_INT 1
46106: NEG
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 2
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 2
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 2
46134: PUSH
46135: LD_INT 2
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: LD_INT 2
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: LD_INT 2
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 2
46175: NEG
46176: PUSH
46177: LD_INT 0
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 2
46186: NEG
46187: PUSH
46188: LD_INT 1
46190: NEG
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 2
46198: NEG
46199: PUSH
46200: LD_INT 2
46202: NEG
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46229: LD_ADDR_VAR 0 22
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: LD_INT 1
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 1
46287: NEG
46288: PUSH
46289: LD_INT 0
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: NEG
46299: PUSH
46300: LD_INT 1
46302: NEG
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 1
46310: NEG
46311: PUSH
46312: LD_INT 2
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 0
46322: PUSH
46323: LD_INT 2
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 1
46333: PUSH
46334: LD_INT 1
46336: NEG
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 2
46344: PUSH
46345: LD_INT 0
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 2
46354: PUSH
46355: LD_INT 1
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 2
46364: PUSH
46365: LD_INT 2
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: LD_INT 2
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 0
46384: PUSH
46385: LD_INT 2
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 1
46394: NEG
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 2
46405: NEG
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 2
46416: NEG
46417: PUSH
46418: LD_INT 1
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 2
46428: NEG
46429: PUSH
46430: LD_INT 2
46432: NEG
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46459: LD_ADDR_VAR 0 23
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: LD_INT 1
46479: NEG
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 1
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: LD_INT 1
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: NEG
46529: PUSH
46530: LD_INT 1
46532: NEG
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: LD_INT 2
46544: NEG
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: LD_INT 2
46555: NEG
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: PUSH
46564: LD_INT 1
46566: NEG
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 2
46574: PUSH
46575: LD_INT 0
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 2
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 2
46594: PUSH
46595: LD_INT 2
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: LD_INT 2
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: LD_INT 2
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: LD_INT 1
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 2
46635: NEG
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 2
46646: NEG
46647: PUSH
46648: LD_INT 1
46650: NEG
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 2
46658: NEG
46659: PUSH
46660: LD_INT 2
46662: NEG
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 2
46670: NEG
46671: PUSH
46672: LD_INT 3
46674: NEG
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 1
46682: NEG
46683: PUSH
46684: LD_INT 3
46686: NEG
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 1
46694: PUSH
46695: LD_INT 2
46697: NEG
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 2
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46739: LD_ADDR_VAR 0 24
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 0
46756: PUSH
46757: LD_INT 1
46759: NEG
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: LD_INT 0
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 1
46777: PUSH
46778: LD_INT 1
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: LD_INT 1
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 1
46797: NEG
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: LD_INT 1
46812: NEG
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: LD_INT 2
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 0
46832: PUSH
46833: LD_INT 2
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 2
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 2
46864: PUSH
46865: LD_INT 1
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 2
46874: PUSH
46875: LD_INT 2
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 1
46884: PUSH
46885: LD_INT 2
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 0
46894: PUSH
46895: LD_INT 2
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 1
46904: NEG
46905: PUSH
46906: LD_INT 1
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 2
46915: NEG
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 2
46926: NEG
46927: PUSH
46928: LD_INT 1
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 2
46938: NEG
46939: PUSH
46940: LD_INT 2
46942: NEG
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 1
46950: PUSH
46951: LD_INT 2
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 2
46961: PUSH
46962: LD_INT 1
46964: NEG
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 3
46972: PUSH
46973: LD_INT 1
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 3
46982: PUSH
46983: LD_INT 2
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47015: LD_ADDR_VAR 0 25
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: LD_INT 1
47035: NEG
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 1
47043: PUSH
47044: LD_INT 0
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: LD_INT 1
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: LD_INT 1
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: LD_INT 0
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: LD_INT 1
47088: NEG
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: LD_INT 2
47100: NEG
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: LD_INT 2
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: LD_INT 1
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 2
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 2
47140: PUSH
47141: LD_INT 1
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 2
47150: PUSH
47151: LD_INT 2
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 1
47160: PUSH
47161: LD_INT 2
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: LD_INT 2
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 1
47180: NEG
47181: PUSH
47182: LD_INT 1
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 2
47191: NEG
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 2
47202: NEG
47203: PUSH
47204: LD_INT 1
47206: NEG
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 2
47214: NEG
47215: PUSH
47216: LD_INT 2
47218: NEG
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 3
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 3
47236: PUSH
47237: LD_INT 2
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 2
47246: PUSH
47247: LD_INT 3
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: LD_INT 3
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47289: LD_ADDR_VAR 0 26
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: LD_INT 1
47309: NEG
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 1
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: LD_INT 1
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: LD_INT 1
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: LD_INT 2
47374: NEG
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: LD_INT 2
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 2
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 2
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 2
47424: PUSH
47425: LD_INT 2
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 1
47434: PUSH
47435: LD_INT 2
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: LD_INT 2
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: NEG
47455: PUSH
47456: LD_INT 1
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 2
47465: NEG
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 2
47476: NEG
47477: PUSH
47478: LD_INT 1
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 2
47488: NEG
47489: PUSH
47490: LD_INT 2
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 2
47500: PUSH
47501: LD_INT 3
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: PUSH
47511: LD_INT 3
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 1
47520: NEG
47521: PUSH
47522: LD_INT 2
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 2
47531: NEG
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47565: LD_ADDR_VAR 0 27
47569: PUSH
47570: LD_INT 0
47572: PUSH
47573: LD_INT 0
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: LD_INT 1
47585: NEG
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 1
47593: PUSH
47594: LD_INT 0
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 1
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 0
47613: PUSH
47614: LD_INT 1
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 1
47623: NEG
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: PUSH
47636: LD_INT 1
47638: NEG
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 1
47646: NEG
47647: PUSH
47648: LD_INT 2
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 0
47658: PUSH
47659: LD_INT 2
47661: NEG
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 1
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 2
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 2
47690: PUSH
47691: LD_INT 1
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 2
47700: PUSH
47701: LD_INT 2
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 1
47710: PUSH
47711: LD_INT 2
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: LD_INT 2
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: LD_INT 1
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 2
47741: NEG
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 2
47752: NEG
47753: PUSH
47754: LD_INT 1
47756: NEG
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 2
47764: NEG
47765: PUSH
47766: LD_INT 2
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: LD_INT 2
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 2
47787: NEG
47788: PUSH
47789: LD_INT 1
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 3
47798: NEG
47799: PUSH
47800: LD_INT 1
47802: NEG
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 3
47810: NEG
47811: PUSH
47812: LD_INT 2
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47845: LD_ADDR_VAR 0 28
47849: PUSH
47850: LD_INT 0
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 0
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 1
47873: PUSH
47874: LD_INT 0
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 1
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: LD_INT 1
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 1
47903: NEG
47904: PUSH
47905: LD_INT 0
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: LD_INT 1
47918: NEG
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 1
47926: NEG
47927: PUSH
47928: LD_INT 2
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: LD_INT 2
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: PUSH
47950: LD_INT 1
47952: NEG
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 2
47960: PUSH
47961: LD_INT 0
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 2
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 2
47980: PUSH
47981: LD_INT 2
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 1
47990: PUSH
47991: LD_INT 2
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: LD_INT 2
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 1
48010: NEG
48011: PUSH
48012: LD_INT 1
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 2
48021: NEG
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 2
48032: NEG
48033: PUSH
48034: LD_INT 1
48036: NEG
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 2
48044: NEG
48045: PUSH
48046: LD_INT 2
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 2
48056: NEG
48057: PUSH
48058: LD_INT 3
48060: NEG
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: LD_INT 3
48072: NEG
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 3
48080: NEG
48081: PUSH
48082: LD_INT 1
48084: NEG
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 3
48092: NEG
48093: PUSH
48094: LD_INT 2
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48127: LD_ADDR_VAR 0 29
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: LD_INT 0
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: LD_INT 1
48147: NEG
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 1
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: LD_INT 1
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: NEG
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 1
48208: NEG
48209: PUSH
48210: LD_INT 2
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: LD_INT 2
48223: NEG
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 1
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 2
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 2
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: LD_INT 2
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: LD_INT 2
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 1
48282: NEG
48283: PUSH
48284: LD_INT 1
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 2
48293: NEG
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 2
48305: NEG
48306: PUSH
48307: LD_INT 2
48309: NEG
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 2
48317: NEG
48318: PUSH
48319: LD_INT 3
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 2
48329: PUSH
48330: LD_INT 1
48332: NEG
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 3
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: LD_INT 3
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: LD_INT 2
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 3
48371: NEG
48372: PUSH
48373: LD_INT 2
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48406: LD_ADDR_VAR 0 30
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: LD_INT 1
48426: NEG
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 1
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 1
48444: PUSH
48445: LD_INT 1
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 1
48475: NEG
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: LD_INT 2
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: LD_INT 2
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 1
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 2
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 2
48531: PUSH
48532: LD_INT 1
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 2
48541: PUSH
48542: LD_INT 2
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 1
48551: PUSH
48552: LD_INT 2
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 1
48561: NEG
48562: PUSH
48563: LD_INT 1
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 2
48572: NEG
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 2
48583: NEG
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: LD_INT 3
48599: NEG
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: LD_INT 2
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 3
48618: PUSH
48619: LD_INT 2
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 2
48628: PUSH
48629: LD_INT 3
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 2
48638: NEG
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 3
48649: NEG
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48684: LD_ADDR_VAR 0 31
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 0
48701: PUSH
48702: LD_INT 1
48704: NEG
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: LD_INT 0
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 1
48722: PUSH
48723: LD_INT 1
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 0
48732: PUSH
48733: LD_INT 1
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 1
48742: NEG
48743: PUSH
48744: LD_INT 0
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: LD_INT 2
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: LD_INT 1
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 2
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 2
48798: PUSH
48799: LD_INT 1
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 2
48808: PUSH
48809: LD_INT 2
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 1
48818: PUSH
48819: LD_INT 2
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: LD_INT 2
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 1
48838: NEG
48839: PUSH
48840: LD_INT 1
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 2
48849: NEG
48850: PUSH
48851: LD_INT 1
48853: NEG
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 2
48861: NEG
48862: PUSH
48863: LD_INT 2
48865: NEG
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 2
48873: NEG
48874: PUSH
48875: LD_INT 3
48877: NEG
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 2
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 3
48896: PUSH
48897: LD_INT 1
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: PUSH
48907: LD_INT 3
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 1
48916: NEG
48917: PUSH
48918: LD_INT 2
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 3
48927: NEG
48928: PUSH
48929: LD_INT 2
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48962: LD_ADDR_VAR 0 32
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 0
48979: PUSH
48980: LD_INT 1
48982: NEG
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: LD_INT 1
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 0
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 1
49031: NEG
49032: PUSH
49033: LD_INT 1
49035: NEG
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: LD_INT 2
49047: NEG
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: LD_INT 2
49058: NEG
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 1
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 2
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 2
49087: PUSH
49088: LD_INT 2
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: LD_INT 2
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: LD_INT 2
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 2
49128: NEG
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 2
49139: NEG
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: LD_INT 3
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 1
49163: PUSH
49164: LD_INT 2
49166: NEG
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 3
49174: PUSH
49175: LD_INT 2
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 2
49184: PUSH
49185: LD_INT 3
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 2
49194: NEG
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 3
49205: NEG
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49240: LD_ADDR_VAR 0 33
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: LD_INT 0
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 0
49257: PUSH
49258: LD_INT 1
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: LD_INT 0
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: LD_INT 1
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 1
49298: NEG
49299: PUSH
49300: LD_INT 0
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 1
49309: NEG
49310: PUSH
49311: LD_INT 1
49313: NEG
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: LD_INT 2
49325: NEG
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 1
49333: PUSH
49334: LD_INT 1
49336: NEG
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 2
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 2
49354: PUSH
49355: LD_INT 1
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: LD_INT 2
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: LD_INT 2
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 1
49384: NEG
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 2
49395: NEG
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 2
49406: NEG
49407: PUSH
49408: LD_INT 1
49410: NEG
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 2
49418: NEG
49419: PUSH
49420: LD_INT 2
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 2
49430: NEG
49431: PUSH
49432: LD_INT 3
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 2
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 3
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 1
49463: PUSH
49464: LD_INT 3
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 1
49473: NEG
49474: PUSH
49475: LD_INT 2
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 3
49484: NEG
49485: PUSH
49486: LD_INT 2
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49519: LD_ADDR_VAR 0 34
49523: PUSH
49524: LD_INT 0
49526: PUSH
49527: LD_INT 0
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 0
49536: PUSH
49537: LD_INT 1
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 1
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: LD_INT 1
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 0
49567: PUSH
49568: LD_INT 1
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: LD_INT 0
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: LD_INT 1
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: LD_INT 2
49604: NEG
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: LD_INT 2
49615: NEG
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 1
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 2
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 2
49644: PUSH
49645: LD_INT 2
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: LD_INT 2
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: NEG
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 2
49675: NEG
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 2
49686: NEG
49687: PUSH
49688: LD_INT 1
49690: NEG
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 2
49698: NEG
49699: PUSH
49700: LD_INT 2
49702: NEG
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: LD_INT 3
49714: NEG
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: PUSH
49723: LD_INT 2
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 3
49733: PUSH
49734: LD_INT 2
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 2
49743: PUSH
49744: LD_INT 3
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 2
49753: NEG
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 3
49764: NEG
49765: PUSH
49766: LD_INT 1
49768: NEG
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49799: LD_ADDR_VAR 0 35
49803: PUSH
49804: LD_INT 0
49806: PUSH
49807: LD_INT 0
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 0
49816: PUSH
49817: LD_INT 1
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 1
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: LD_INT 1
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 1
49857: NEG
49858: PUSH
49859: LD_INT 0
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 1
49868: NEG
49869: PUSH
49870: LD_INT 1
49872: NEG
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 2
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 2
49890: NEG
49891: PUSH
49892: LD_INT 1
49894: NEG
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49911: LD_ADDR_VAR 0 36
49915: PUSH
49916: LD_INT 0
49918: PUSH
49919: LD_INT 0
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: LD_INT 1
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: PUSH
49950: LD_INT 1
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: LD_INT 1
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 1
49969: NEG
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 1
49980: NEG
49981: PUSH
49982: LD_INT 1
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: LD_INT 2
49996: NEG
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: LD_INT 2
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50023: LD_ADDR_VAR 0 37
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 0
50040: PUSH
50041: LD_INT 1
50043: NEG
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 1
50051: PUSH
50052: LD_INT 0
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: PUSH
50062: LD_INT 1
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: NEG
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: LD_INT 1
50096: NEG
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: LD_INT 1
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 1
50115: NEG
50116: PUSH
50117: LD_INT 1
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50135: LD_ADDR_VAR 0 38
50139: PUSH
50140: LD_INT 0
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: LD_INT 1
50155: NEG
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: PUSH
50164: LD_INT 0
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 1
50173: PUSH
50174: LD_INT 1
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 1
50193: NEG
50194: PUSH
50195: LD_INT 0
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 1
50204: NEG
50205: PUSH
50206: LD_INT 1
50208: NEG
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 2
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 2
50226: NEG
50227: PUSH
50228: LD_INT 1
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50247: LD_ADDR_VAR 0 39
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: LD_INT 1
50267: NEG
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: LD_INT 1
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: LD_INT 1
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: LD_INT 2
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: LD_INT 2
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50359: LD_ADDR_VAR 0 40
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: LD_INT 0
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 0
50376: PUSH
50377: LD_INT 1
50379: NEG
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 1
50387: PUSH
50388: LD_INT 0
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 1
50397: PUSH
50398: LD_INT 1
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: LD_INT 1
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 1
50417: NEG
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 1
50428: NEG
50429: PUSH
50430: LD_INT 1
50432: NEG
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 1
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50471: LD_ADDR_VAR 0 41
50475: PUSH
50476: LD_INT 0
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 1
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 1
50509: PUSH
50510: LD_INT 1
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: LD_INT 1
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 1
50529: NEG
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 1
50540: NEG
50541: PUSH
50542: LD_INT 1
50544: NEG
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: LD_INT 2
50556: NEG
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: LD_INT 1
50567: NEG
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 2
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 2
50585: PUSH
50586: LD_INT 1
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 2
50595: PUSH
50596: LD_INT 2
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: LD_INT 2
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 1
50615: NEG
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 2
50626: NEG
50627: PUSH
50628: LD_INT 0
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 2
50637: NEG
50638: PUSH
50639: LD_INT 1
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 2
50649: NEG
50650: PUSH
50651: LD_INT 2
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 2
50661: NEG
50662: PUSH
50663: LD_INT 3
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 2
50673: PUSH
50674: LD_INT 1
50676: NEG
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 3
50684: PUSH
50685: LD_INT 0
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 3
50694: PUSH
50695: LD_INT 1
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 3
50704: PUSH
50705: LD_INT 2
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 3
50714: PUSH
50715: LD_INT 3
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 2
50724: PUSH
50725: LD_INT 3
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 2
50734: NEG
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 3
50745: NEG
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 3
50756: NEG
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 3
50768: NEG
50769: PUSH
50770: LD_INT 2
50772: NEG
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 3
50780: NEG
50781: PUSH
50782: LD_INT 3
50784: NEG
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50821: LD_ADDR_VAR 0 42
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 0
50838: PUSH
50839: LD_INT 1
50841: NEG
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: NEG
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 1
50902: NEG
50903: PUSH
50904: LD_INT 2
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: LD_INT 2
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 1
50925: PUSH
50926: LD_INT 1
50928: NEG
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 2
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 2
50946: PUSH
50947: LD_INT 2
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: LD_INT 2
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: LD_INT 2
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: NEG
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 2
50987: NEG
50988: PUSH
50989: LD_INT 1
50991: NEG
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 2
50999: NEG
51000: PUSH
51001: LD_INT 2
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 2
51011: NEG
51012: PUSH
51013: LD_INT 3
51015: NEG
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 1
51023: NEG
51024: PUSH
51025: LD_INT 3
51027: NEG
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: LD_INT 3
51038: NEG
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: LD_INT 2
51049: NEG
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 3
51057: PUSH
51058: LD_INT 2
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 3
51067: PUSH
51068: LD_INT 3
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 2
51077: PUSH
51078: LD_INT 3
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: LD_INT 3
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: LD_INT 3
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 1
51107: NEG
51108: PUSH
51109: LD_INT 2
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 3
51118: NEG
51119: PUSH
51120: LD_INT 2
51122: NEG
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 3
51130: NEG
51131: PUSH
51132: LD_INT 3
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51171: LD_ADDR_VAR 0 43
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: LD_INT 1
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 1
51199: PUSH
51200: LD_INT 0
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: PUSH
51210: LD_INT 1
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 0
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 1
51229: NEG
51230: PUSH
51231: LD_INT 0
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 1
51240: NEG
51241: PUSH
51242: LD_INT 1
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: LD_INT 2
51256: NEG
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: LD_INT 2
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 2
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 2
51296: PUSH
51297: LD_INT 1
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 1
51306: PUSH
51307: LD_INT 2
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: LD_INT 2
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 1
51326: NEG
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 2
51337: NEG
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 2
51348: NEG
51349: PUSH
51350: LD_INT 1
51352: NEG
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: LD_INT 3
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: LD_INT 3
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: LD_INT 2
51386: NEG
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 2
51394: PUSH
51395: LD_INT 1
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 3
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 3
51415: PUSH
51416: LD_INT 1
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: LD_INT 3
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 0
51435: PUSH
51436: LD_INT 3
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: NEG
51446: PUSH
51447: LD_INT 2
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 2
51456: NEG
51457: PUSH
51458: LD_INT 1
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 3
51467: NEG
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 3
51478: NEG
51479: PUSH
51480: LD_INT 1
51482: NEG
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51519: LD_ADDR_VAR 0 44
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 1
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 1
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: LD_INT 1
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: NEG
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: NEG
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 1
51600: NEG
51601: PUSH
51602: LD_INT 2
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 1
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 2
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 2
51633: PUSH
51634: LD_INT 1
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 2
51643: PUSH
51644: LD_INT 2
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 1
51653: PUSH
51654: LD_INT 2
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: LD_INT 1
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 2
51674: NEG
51675: PUSH
51676: LD_INT 0
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 2
51685: NEG
51686: PUSH
51687: LD_INT 1
51689: NEG
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 2
51697: NEG
51698: PUSH
51699: LD_INT 2
51701: NEG
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 2
51709: NEG
51710: PUSH
51711: LD_INT 3
51713: NEG
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 2
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 3
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 3
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 3
51752: PUSH
51753: LD_INT 2
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 3
51762: PUSH
51763: LD_INT 3
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 2
51772: PUSH
51773: LD_INT 3
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 2
51782: NEG
51783: PUSH
51784: LD_INT 1
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 3
51793: NEG
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 3
51804: NEG
51805: PUSH
51806: LD_INT 1
51808: NEG
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 3
51816: NEG
51817: PUSH
51818: LD_INT 2
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 3
51828: NEG
51829: PUSH
51830: LD_INT 3
51832: NEG
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51869: LD_ADDR_VAR 0 45
51873: PUSH
51874: LD_INT 0
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 0
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: LD_INT 1
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 0
51917: PUSH
51918: LD_INT 1
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 1
51927: NEG
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 1
51938: NEG
51939: PUSH
51940: LD_INT 1
51942: NEG
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: LD_INT 2
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 0
51962: PUSH
51963: LD_INT 2
51965: NEG
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 2
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 2
51994: PUSH
51995: LD_INT 2
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: LD_INT 2
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: LD_INT 2
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 1
52024: NEG
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 2
52035: NEG
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 2
52047: NEG
52048: PUSH
52049: LD_INT 2
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 2
52059: NEG
52060: PUSH
52061: LD_INT 3
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: NEG
52072: PUSH
52073: LD_INT 3
52075: NEG
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 0
52083: PUSH
52084: LD_INT 3
52086: NEG
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: LD_INT 2
52097: NEG
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 3
52105: PUSH
52106: LD_INT 2
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 3
52115: PUSH
52116: LD_INT 3
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 2
52125: PUSH
52126: LD_INT 3
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: LD_INT 3
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: LD_INT 3
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: LD_INT 2
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 3
52166: NEG
52167: PUSH
52168: LD_INT 2
52170: NEG
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 3
52178: NEG
52179: PUSH
52180: LD_INT 3
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52219: LD_ADDR_VAR 0 46
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: LD_INT 1
52239: NEG
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 1
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: NEG
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 1
52288: NEG
52289: PUSH
52290: LD_INT 1
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: LD_INT 2
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: LD_INT 2
52315: NEG
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 1
52323: PUSH
52324: LD_INT 1
52326: NEG
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 2
52334: PUSH
52335: LD_INT 0
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 2
52344: PUSH
52345: LD_INT 1
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 1
52354: PUSH
52355: LD_INT 2
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: LD_INT 2
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 2
52385: NEG
52386: PUSH
52387: LD_INT 0
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 2
52396: NEG
52397: PUSH
52398: LD_INT 1
52400: NEG
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: LD_INT 3
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: LD_INT 3
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: LD_INT 2
52434: NEG
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 2
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 3
52453: PUSH
52454: LD_INT 0
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 3
52463: PUSH
52464: LD_INT 1
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 1
52473: PUSH
52474: LD_INT 3
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: LD_INT 3
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 1
52493: NEG
52494: PUSH
52495: LD_INT 2
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 2
52504: NEG
52505: PUSH
52506: LD_INT 1
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 3
52515: NEG
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 3
52526: NEG
52527: PUSH
52528: LD_INT 1
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52567: LD_ADDR_VAR 0 47
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 1
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: LD_INT 1
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 0
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 1
52625: NEG
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: LD_INT 2
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: LD_INT 2
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: LD_INT 1
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 2
52682: NEG
52683: PUSH
52684: LD_INT 1
52686: NEG
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 2
52694: NEG
52695: PUSH
52696: LD_INT 2
52698: NEG
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52718: LD_ADDR_VAR 0 48
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: LD_INT 0
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 0
52735: PUSH
52736: LD_INT 1
52738: NEG
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 1
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 1
52756: PUSH
52757: LD_INT 1
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: LD_INT 1
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: NEG
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: LD_INT 1
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 1
52799: NEG
52800: PUSH
52801: LD_INT 2
52803: NEG
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: LD_INT 2
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 2
52833: PUSH
52834: LD_INT 0
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 2
52843: PUSH
52844: LD_INT 1
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52865: LD_ADDR_VAR 0 49
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: LD_INT 0
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 0
52882: PUSH
52883: LD_INT 1
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: LD_INT 0
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 1
52903: PUSH
52904: LD_INT 1
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: LD_INT 1
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 1
52923: NEG
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 1
52934: NEG
52935: PUSH
52936: LD_INT 1
52938: NEG
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 1
52946: PUSH
52947: LD_INT 1
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 2
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 2
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 2
52977: PUSH
52978: LD_INT 2
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 1
52987: PUSH
52988: LD_INT 2
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53009: LD_ADDR_VAR 0 50
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 0
53026: PUSH
53027: LD_INT 1
53029: NEG
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 1
53047: PUSH
53048: LD_INT 1
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: LD_INT 1
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 1
53067: NEG
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: NEG
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 2
53090: PUSH
53091: LD_INT 1
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 2
53100: PUSH
53101: LD_INT 2
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: PUSH
53111: LD_INT 2
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: LD_INT 2
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 1
53130: NEG
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53153: LD_ADDR_VAR 0 51
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: LD_INT 0
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: LD_INT 0
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: LD_INT 1
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 1
53222: NEG
53223: PUSH
53224: LD_INT 1
53226: NEG
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: LD_INT 2
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: LD_INT 2
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 2
53265: NEG
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 2
53276: NEG
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53300: LD_ADDR_VAR 0 52
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: LD_INT 0
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: LD_INT 1
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 1
53358: NEG
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: LD_INT 1
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: LD_INT 2
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 2
53404: NEG
53405: PUSH
53406: LD_INT 0
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 2
53415: NEG
53416: PUSH
53417: LD_INT 1
53419: NEG
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 2
53427: NEG
53428: PUSH
53429: LD_INT 2
53431: NEG
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53451: LD_ADDR_VAR 0 53
53455: PUSH
53456: LD_INT 0
53458: PUSH
53459: LD_INT 0
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 0
53468: PUSH
53469: LD_INT 1
53471: NEG
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 1
53479: PUSH
53480: LD_INT 0
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 1
53489: PUSH
53490: LD_INT 1
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 0
53499: PUSH
53500: LD_INT 1
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 1
53509: NEG
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: LD_INT 1
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: LD_INT 2
53536: NEG
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 0
53544: PUSH
53545: LD_INT 2
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 2
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 2
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 2
53586: PUSH
53587: LD_INT 2
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 1
53596: PUSH
53597: LD_INT 2
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 0
53606: PUSH
53607: LD_INT 2
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 1
53616: NEG
53617: PUSH
53618: LD_INT 1
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 2
53627: NEG
53628: PUSH
53629: LD_INT 0
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 2
53638: NEG
53639: PUSH
53640: LD_INT 1
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 2
53650: NEG
53651: PUSH
53652: LD_INT 2
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53681: LD_ADDR_VAR 0 54
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: LD_INT 0
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 0
53698: PUSH
53699: LD_INT 1
53701: NEG
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 1
53709: PUSH
53710: LD_INT 0
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 1
53719: PUSH
53720: LD_INT 1
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: LD_INT 1
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: LD_INT 1
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: NEG
53763: PUSH
53764: LD_INT 2
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: LD_INT 2
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 1
53785: PUSH
53786: LD_INT 1
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 2
53796: PUSH
53797: LD_INT 0
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 2
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 2
53816: PUSH
53817: LD_INT 2
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 1
53826: PUSH
53827: LD_INT 2
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 0
53836: PUSH
53837: LD_INT 2
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 1
53846: NEG
53847: PUSH
53848: LD_INT 1
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 2
53857: NEG
53858: PUSH
53859: LD_INT 0
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 2
53868: NEG
53869: PUSH
53870: LD_INT 1
53872: NEG
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 2
53880: NEG
53881: PUSH
53882: LD_INT 2
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53911: LD_ADDR_VAR 0 55
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: LD_INT 0
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 0
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: PUSH
53940: LD_INT 0
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 1
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 0
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 1
53969: NEG
53970: PUSH
53971: LD_INT 0
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: LD_INT 1
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: LD_INT 2
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: LD_INT 2
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 2
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 2
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 2
54046: PUSH
54047: LD_INT 2
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: LD_INT 2
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: LD_INT 2
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: LD_INT 1
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 2
54087: NEG
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 2
54098: NEG
54099: PUSH
54100: LD_INT 1
54102: NEG
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 2
54110: NEG
54111: PUSH
54112: LD_INT 2
54114: NEG
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54141: LD_ADDR_VAR 0 56
54145: PUSH
54146: LD_INT 0
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 0
54158: PUSH
54159: LD_INT 1
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 1
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 1
54179: PUSH
54180: LD_INT 1
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 0
54189: PUSH
54190: LD_INT 1
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 1
54199: NEG
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 1
54210: NEG
54211: PUSH
54212: LD_INT 1
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: LD_INT 2
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: LD_INT 2
54237: NEG
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 1
54245: PUSH
54246: LD_INT 1
54248: NEG
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 2
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 2
54266: PUSH
54267: LD_INT 1
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 2
54276: PUSH
54277: LD_INT 2
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 1
54286: PUSH
54287: LD_INT 2
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: LD_INT 2
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 2
54317: NEG
54318: PUSH
54319: LD_INT 0
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 2
54328: NEG
54329: PUSH
54330: LD_INT 1
54332: NEG
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 2
54340: NEG
54341: PUSH
54342: LD_INT 2
54344: NEG
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54371: LD_ADDR_VAR 0 57
54375: PUSH
54376: LD_INT 0
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: LD_INT 1
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 1
54440: NEG
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 1
54452: NEG
54453: PUSH
54454: LD_INT 2
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: LD_INT 2
54467: NEG
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 1
54475: PUSH
54476: LD_INT 1
54478: NEG
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 2
54486: PUSH
54487: LD_INT 0
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 2
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 2
54506: PUSH
54507: LD_INT 2
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: LD_INT 2
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 0
54526: PUSH
54527: LD_INT 2
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 1
54536: NEG
54537: PUSH
54538: LD_INT 1
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 2
54547: NEG
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 2
54558: NEG
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 2
54570: NEG
54571: PUSH
54572: LD_INT 2
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54601: LD_ADDR_VAR 0 58
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 0
54618: PUSH
54619: LD_INT 1
54621: NEG
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: LD_INT 1
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 0
54649: PUSH
54650: LD_INT 1
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 1
54659: NEG
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: LD_INT 1
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 1
54682: NEG
54683: PUSH
54684: LD_INT 2
54686: NEG
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: LD_INT 2
54697: NEG
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 1
54705: PUSH
54706: LD_INT 1
54708: NEG
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 2
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 2
54726: PUSH
54727: LD_INT 1
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 2
54736: PUSH
54737: LD_INT 2
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: LD_INT 2
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 0
54756: PUSH
54757: LD_INT 2
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 1
54766: NEG
54767: PUSH
54768: LD_INT 1
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 2
54777: NEG
54778: PUSH
54779: LD_INT 0
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 2
54788: NEG
54789: PUSH
54790: LD_INT 1
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 2
54800: NEG
54801: PUSH
54802: LD_INT 2
54804: NEG
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54831: LD_ADDR_VAR 0 59
54835: PUSH
54836: LD_INT 0
54838: PUSH
54839: LD_INT 0
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: LD_INT 1
54851: NEG
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 1
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: LD_INT 1
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: LD_INT 1
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 1
54889: NEG
54890: PUSH
54891: LD_INT 0
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 1
54900: NEG
54901: PUSH
54902: LD_INT 1
54904: NEG
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54919: LD_ADDR_VAR 0 60
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: LD_INT 0
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: LD_INT 1
54939: NEG
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 1
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: LD_INT 1
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: LD_INT 1
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 1
54977: NEG
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 1
54988: NEG
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55007: LD_ADDR_VAR 0 61
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: LD_INT 0
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 0
55024: PUSH
55025: LD_INT 1
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 1
55035: PUSH
55036: LD_INT 0
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 1
55045: PUSH
55046: LD_INT 1
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 0
55055: PUSH
55056: LD_INT 1
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 1
55065: NEG
55066: PUSH
55067: LD_INT 0
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55095: LD_ADDR_VAR 0 62
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: LD_INT 1
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: LD_INT 1
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 1
55153: NEG
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 1
55164: NEG
55165: PUSH
55166: LD_INT 1
55168: NEG
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55183: LD_ADDR_VAR 0 63
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: LD_INT 0
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: LD_INT 1
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: LD_INT 1
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 1
55241: NEG
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: LD_INT 1
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55271: LD_ADDR_VAR 0 64
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: LD_INT 1
55291: NEG
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: LD_INT 1
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: ST_TO_ADDR
// end ; 1 :
55359: GO 61256
55361: LD_INT 1
55363: DOUBLE
55364: EQUAL
55365: IFTRUE 55369
55367: GO 57992
55369: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55370: LD_ADDR_VAR 0 11
55374: PUSH
55375: LD_INT 1
55377: NEG
55378: PUSH
55379: LD_INT 3
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: LD_INT 3
55392: NEG
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 1
55400: PUSH
55401: LD_INT 2
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: LIST
55413: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55414: LD_ADDR_VAR 0 12
55418: PUSH
55419: LD_INT 2
55421: PUSH
55422: LD_INT 1
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 3
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 3
55442: PUSH
55443: LD_INT 1
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: LIST
55454: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55455: LD_ADDR_VAR 0 13
55459: PUSH
55460: LD_INT 3
55462: PUSH
55463: LD_INT 2
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 3
55472: PUSH
55473: LD_INT 3
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 2
55482: PUSH
55483: LD_INT 3
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: LIST
55494: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55495: LD_ADDR_VAR 0 14
55499: PUSH
55500: LD_INT 1
55502: PUSH
55503: LD_INT 3
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 0
55512: PUSH
55513: LD_INT 3
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 1
55522: NEG
55523: PUSH
55524: LD_INT 2
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: LIST
55535: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55536: LD_ADDR_VAR 0 15
55540: PUSH
55541: LD_INT 2
55543: NEG
55544: PUSH
55545: LD_INT 1
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 3
55554: NEG
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 3
55565: NEG
55566: PUSH
55567: LD_INT 1
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: LIST
55579: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55580: LD_ADDR_VAR 0 16
55584: PUSH
55585: LD_INT 2
55587: NEG
55588: PUSH
55589: LD_INT 3
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 3
55599: NEG
55600: PUSH
55601: LD_INT 2
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 3
55611: NEG
55612: PUSH
55613: LD_INT 3
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: LIST
55625: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55626: LD_ADDR_VAR 0 17
55630: PUSH
55631: LD_INT 1
55633: NEG
55634: PUSH
55635: LD_INT 3
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 0
55645: PUSH
55646: LD_INT 3
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: LD_INT 2
55659: NEG
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: LIST
55669: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55670: LD_ADDR_VAR 0 18
55674: PUSH
55675: LD_INT 2
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 3
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 3
55698: PUSH
55699: LD_INT 1
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: LIST
55710: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55711: LD_ADDR_VAR 0 19
55715: PUSH
55716: LD_INT 3
55718: PUSH
55719: LD_INT 2
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 3
55728: PUSH
55729: LD_INT 3
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 2
55738: PUSH
55739: LD_INT 3
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: LIST
55750: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55751: LD_ADDR_VAR 0 20
55755: PUSH
55756: LD_INT 1
55758: PUSH
55759: LD_INT 3
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: LD_INT 3
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 1
55778: NEG
55779: PUSH
55780: LD_INT 2
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: LIST
55791: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55792: LD_ADDR_VAR 0 21
55796: PUSH
55797: LD_INT 2
55799: NEG
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 3
55810: NEG
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 3
55821: NEG
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: LIST
55835: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55836: LD_ADDR_VAR 0 22
55840: PUSH
55841: LD_INT 2
55843: NEG
55844: PUSH
55845: LD_INT 3
55847: NEG
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 3
55855: NEG
55856: PUSH
55857: LD_INT 2
55859: NEG
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 3
55867: NEG
55868: PUSH
55869: LD_INT 3
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: LIST
55881: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55882: LD_ADDR_VAR 0 23
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: LD_INT 3
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: LD_INT 4
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: PUSH
55913: LD_INT 3
55915: NEG
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: LIST
55925: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55926: LD_ADDR_VAR 0 24
55930: PUSH
55931: LD_INT 3
55933: PUSH
55934: LD_INT 0
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 3
55943: PUSH
55944: LD_INT 1
55946: NEG
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 4
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: LIST
55966: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55967: LD_ADDR_VAR 0 25
55971: PUSH
55972: LD_INT 3
55974: PUSH
55975: LD_INT 3
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 4
55984: PUSH
55985: LD_INT 3
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 3
55994: PUSH
55995: LD_INT 4
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: LIST
56006: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56007: LD_ADDR_VAR 0 26
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: LD_INT 3
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: LD_INT 4
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 1
56034: NEG
56035: PUSH
56036: LD_INT 3
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: LIST
56047: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56048: LD_ADDR_VAR 0 27
56052: PUSH
56053: LD_INT 3
56055: NEG
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 3
56066: NEG
56067: PUSH
56068: LD_INT 1
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 4
56077: NEG
56078: PUSH
56079: LD_INT 1
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: LIST
56091: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56092: LD_ADDR_VAR 0 28
56096: PUSH
56097: LD_INT 3
56099: NEG
56100: PUSH
56101: LD_INT 3
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 3
56111: NEG
56112: PUSH
56113: LD_INT 4
56115: NEG
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 4
56123: NEG
56124: PUSH
56125: LD_INT 3
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: LIST
56137: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56138: LD_ADDR_VAR 0 29
56142: PUSH
56143: LD_INT 1
56145: NEG
56146: PUSH
56147: LD_INT 3
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: LD_INT 3
56160: NEG
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: LD_INT 2
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: LD_INT 4
56183: NEG
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: LD_INT 4
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: LD_INT 3
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 1
56213: NEG
56214: PUSH
56215: LD_INT 5
56217: NEG
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: LD_INT 5
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: LD_INT 4
56239: NEG
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 1
56247: NEG
56248: PUSH
56249: LD_INT 6
56251: NEG
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: LD_INT 6
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 1
56270: PUSH
56271: LD_INT 5
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56293: LD_ADDR_VAR 0 30
56297: PUSH
56298: LD_INT 2
56300: PUSH
56301: LD_INT 1
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 3
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 3
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 3
56331: PUSH
56332: LD_INT 1
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 4
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 4
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 4
56362: PUSH
56363: LD_INT 1
56365: NEG
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 5
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 5
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 5
56393: PUSH
56394: LD_INT 1
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 6
56404: PUSH
56405: LD_INT 0
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 6
56414: PUSH
56415: LD_INT 1
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56436: LD_ADDR_VAR 0 31
56440: PUSH
56441: LD_INT 3
56443: PUSH
56444: LD_INT 2
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 3
56453: PUSH
56454: LD_INT 3
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 2
56463: PUSH
56464: LD_INT 3
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 4
56473: PUSH
56474: LD_INT 3
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 4
56483: PUSH
56484: LD_INT 4
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 3
56493: PUSH
56494: LD_INT 4
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 5
56503: PUSH
56504: LD_INT 4
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 5
56513: PUSH
56514: LD_INT 5
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 4
56523: PUSH
56524: LD_INT 5
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 6
56533: PUSH
56534: LD_INT 5
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 6
56543: PUSH
56544: LD_INT 6
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 5
56553: PUSH
56554: LD_INT 6
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56575: LD_ADDR_VAR 0 32
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: LD_INT 3
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: LD_INT 3
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: LD_INT 2
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 1
56613: PUSH
56614: LD_INT 4
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: LD_INT 4
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 1
56633: NEG
56634: PUSH
56635: LD_INT 3
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: LD_INT 5
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: LD_INT 5
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: LD_INT 4
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 1
56675: PUSH
56676: LD_INT 6
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 0
56685: PUSH
56686: LD_INT 6
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 1
56695: NEG
56696: PUSH
56697: LD_INT 5
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56718: LD_ADDR_VAR 0 33
56722: PUSH
56723: LD_INT 2
56725: NEG
56726: PUSH
56727: LD_INT 1
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 3
56736: NEG
56737: PUSH
56738: LD_INT 0
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 3
56747: NEG
56748: PUSH
56749: LD_INT 1
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 3
56759: NEG
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 4
56770: NEG
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 4
56781: NEG
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 4
56793: NEG
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 5
56804: NEG
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 5
56815: NEG
56816: PUSH
56817: LD_INT 1
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 5
56827: NEG
56828: PUSH
56829: LD_INT 1
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 6
56838: NEG
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 6
56849: NEG
56850: PUSH
56851: LD_INT 1
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56873: LD_ADDR_VAR 0 34
56877: PUSH
56878: LD_INT 2
56880: NEG
56881: PUSH
56882: LD_INT 3
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 3
56892: NEG
56893: PUSH
56894: LD_INT 2
56896: NEG
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 3
56904: NEG
56905: PUSH
56906: LD_INT 3
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 3
56916: NEG
56917: PUSH
56918: LD_INT 4
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 4
56928: NEG
56929: PUSH
56930: LD_INT 3
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 4
56940: NEG
56941: PUSH
56942: LD_INT 4
56944: NEG
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 4
56952: NEG
56953: PUSH
56954: LD_INT 5
56956: NEG
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 5
56964: NEG
56965: PUSH
56966: LD_INT 4
56968: NEG
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 5
56976: NEG
56977: PUSH
56978: LD_INT 5
56980: NEG
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 5
56988: NEG
56989: PUSH
56990: LD_INT 6
56992: NEG
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 6
57000: NEG
57001: PUSH
57002: LD_INT 5
57004: NEG
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 6
57012: NEG
57013: PUSH
57014: LD_INT 6
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57036: LD_ADDR_VAR 0 41
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: LD_INT 2
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 1
57054: NEG
57055: PUSH
57056: LD_INT 3
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: LD_INT 2
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: LIST
57079: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57080: LD_ADDR_VAR 0 42
57084: PUSH
57085: LD_INT 2
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 2
57097: PUSH
57098: LD_INT 1
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 3
57108: PUSH
57109: LD_INT 1
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: LIST
57120: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57121: LD_ADDR_VAR 0 43
57125: PUSH
57126: LD_INT 2
57128: PUSH
57129: LD_INT 2
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 3
57138: PUSH
57139: LD_INT 2
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 2
57148: PUSH
57149: LD_INT 3
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: LIST
57160: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57161: LD_ADDR_VAR 0 44
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: LD_INT 2
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 1
57178: PUSH
57179: LD_INT 3
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 1
57188: NEG
57189: PUSH
57190: LD_INT 2
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: LIST
57201: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57202: LD_ADDR_VAR 0 45
57206: PUSH
57207: LD_INT 2
57209: NEG
57210: PUSH
57211: LD_INT 0
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 2
57220: NEG
57221: PUSH
57222: LD_INT 1
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 3
57231: NEG
57232: PUSH
57233: LD_INT 1
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: LIST
57245: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57246: LD_ADDR_VAR 0 46
57250: PUSH
57251: LD_INT 2
57253: NEG
57254: PUSH
57255: LD_INT 2
57257: NEG
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 2
57265: NEG
57266: PUSH
57267: LD_INT 3
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 3
57277: NEG
57278: PUSH
57279: LD_INT 2
57281: NEG
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: LIST
57291: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57292: LD_ADDR_VAR 0 47
57296: PUSH
57297: LD_INT 2
57299: NEG
57300: PUSH
57301: LD_INT 3
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 1
57311: NEG
57312: PUSH
57313: LD_INT 3
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57325: LD_ADDR_VAR 0 48
57329: PUSH
57330: LD_INT 1
57332: PUSH
57333: LD_INT 2
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 2
57343: PUSH
57344: LD_INT 1
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57356: LD_ADDR_VAR 0 49
57360: PUSH
57361: LD_INT 3
57363: PUSH
57364: LD_INT 1
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 3
57373: PUSH
57374: LD_INT 2
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57385: LD_ADDR_VAR 0 50
57389: PUSH
57390: LD_INT 2
57392: PUSH
57393: LD_INT 3
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 1
57402: PUSH
57403: LD_INT 3
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57414: LD_ADDR_VAR 0 51
57418: PUSH
57419: LD_INT 1
57421: NEG
57422: PUSH
57423: LD_INT 2
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 2
57432: NEG
57433: PUSH
57434: LD_INT 1
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57445: LD_ADDR_VAR 0 52
57449: PUSH
57450: LD_INT 3
57452: NEG
57453: PUSH
57454: LD_INT 1
57456: NEG
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 3
57464: NEG
57465: PUSH
57466: LD_INT 2
57468: NEG
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57478: LD_ADDR_VAR 0 53
57482: PUSH
57483: LD_INT 1
57485: NEG
57486: PUSH
57487: LD_INT 3
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 0
57497: PUSH
57498: LD_INT 3
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 1
57508: PUSH
57509: LD_INT 2
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: LIST
57521: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57522: LD_ADDR_VAR 0 54
57526: PUSH
57527: LD_INT 2
57529: PUSH
57530: LD_INT 1
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 3
57540: PUSH
57541: LD_INT 0
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 3
57550: PUSH
57551: LD_INT 1
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: LIST
57562: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57563: LD_ADDR_VAR 0 55
57567: PUSH
57568: LD_INT 3
57570: PUSH
57571: LD_INT 2
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 3
57580: PUSH
57581: LD_INT 3
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 2
57590: PUSH
57591: LD_INT 3
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: LIST
57602: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57603: LD_ADDR_VAR 0 56
57607: PUSH
57608: LD_INT 1
57610: PUSH
57611: LD_INT 3
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 0
57620: PUSH
57621: LD_INT 3
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 1
57630: NEG
57631: PUSH
57632: LD_INT 2
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: LIST
57643: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57644: LD_ADDR_VAR 0 57
57648: PUSH
57649: LD_INT 2
57651: NEG
57652: PUSH
57653: LD_INT 1
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 3
57662: NEG
57663: PUSH
57664: LD_INT 0
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 3
57673: NEG
57674: PUSH
57675: LD_INT 1
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: LIST
57687: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57688: LD_ADDR_VAR 0 58
57692: PUSH
57693: LD_INT 2
57695: NEG
57696: PUSH
57697: LD_INT 3
57699: NEG
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 3
57707: NEG
57708: PUSH
57709: LD_INT 2
57711: NEG
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 3
57719: NEG
57720: PUSH
57721: LD_INT 3
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: LIST
57733: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57734: LD_ADDR_VAR 0 59
57738: PUSH
57739: LD_INT 1
57741: NEG
57742: PUSH
57743: LD_INT 2
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 0
57753: PUSH
57754: LD_INT 2
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 1
57764: PUSH
57765: LD_INT 1
57767: NEG
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: LIST
57777: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57778: LD_ADDR_VAR 0 60
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: LD_INT 1
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 2
57796: PUSH
57797: LD_INT 0
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 2
57806: PUSH
57807: LD_INT 1
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: LIST
57818: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57819: LD_ADDR_VAR 0 61
57823: PUSH
57824: LD_INT 2
57826: PUSH
57827: LD_INT 1
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 2
57836: PUSH
57837: LD_INT 2
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: LD_INT 2
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: LIST
57858: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57859: LD_ADDR_VAR 0 62
57863: PUSH
57864: LD_INT 1
57866: PUSH
57867: LD_INT 2
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: LD_INT 2
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 1
57886: NEG
57887: PUSH
57888: LD_INT 1
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: LIST
57899: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57900: LD_ADDR_VAR 0 63
57904: PUSH
57905: LD_INT 1
57907: NEG
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 2
57918: NEG
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 2
57929: NEG
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: LIST
57943: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57944: LD_ADDR_VAR 0 64
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: LD_INT 2
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 2
57963: NEG
57964: PUSH
57965: LD_INT 1
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 2
57975: NEG
57976: PUSH
57977: LD_INT 2
57979: NEG
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: LIST
57989: ST_TO_ADDR
// end ; 2 :
57990: GO 61256
57992: LD_INT 2
57994: DOUBLE
57995: EQUAL
57996: IFTRUE 58000
57998: GO 61255
58000: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58001: LD_ADDR_VAR 0 29
58005: PUSH
58006: LD_INT 4
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 4
58018: PUSH
58019: LD_INT 1
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 5
58029: PUSH
58030: LD_INT 0
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 5
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 4
58049: PUSH
58050: LD_INT 1
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 3
58059: PUSH
58060: LD_INT 0
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 3
58069: PUSH
58070: LD_INT 1
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 3
58080: PUSH
58081: LD_INT 2
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 5
58091: PUSH
58092: LD_INT 2
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 3
58101: PUSH
58102: LD_INT 3
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 3
58111: PUSH
58112: LD_INT 2
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 4
58121: PUSH
58122: LD_INT 3
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 4
58131: PUSH
58132: LD_INT 4
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 3
58141: PUSH
58142: LD_INT 4
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 2
58151: PUSH
58152: LD_INT 3
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 2
58161: PUSH
58162: LD_INT 2
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 4
58171: PUSH
58172: LD_INT 2
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 2
58181: PUSH
58182: LD_INT 4
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 0
58191: PUSH
58192: LD_INT 4
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 0
58201: PUSH
58202: LD_INT 3
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 1
58211: PUSH
58212: LD_INT 4
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 1
58221: PUSH
58222: LD_INT 5
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: LD_INT 5
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 1
58241: NEG
58242: PUSH
58243: LD_INT 4
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 1
58252: NEG
58253: PUSH
58254: LD_INT 3
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 2
58263: PUSH
58264: LD_INT 5
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 2
58273: NEG
58274: PUSH
58275: LD_INT 3
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 3
58284: NEG
58285: PUSH
58286: LD_INT 0
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 3
58295: NEG
58296: PUSH
58297: LD_INT 1
58299: NEG
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 2
58307: NEG
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 2
58318: NEG
58319: PUSH
58320: LD_INT 1
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 3
58329: NEG
58330: PUSH
58331: LD_INT 1
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 4
58340: NEG
58341: PUSH
58342: LD_INT 0
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 4
58351: NEG
58352: PUSH
58353: LD_INT 1
58355: NEG
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 4
58363: NEG
58364: PUSH
58365: LD_INT 2
58367: NEG
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 2
58375: NEG
58376: PUSH
58377: LD_INT 2
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 4
58386: NEG
58387: PUSH
58388: LD_INT 4
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 4
58398: NEG
58399: PUSH
58400: LD_INT 5
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 3
58410: NEG
58411: PUSH
58412: LD_INT 4
58414: NEG
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 3
58422: NEG
58423: PUSH
58424: LD_INT 3
58426: NEG
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 4
58434: NEG
58435: PUSH
58436: LD_INT 3
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 5
58446: NEG
58447: PUSH
58448: LD_INT 4
58450: NEG
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 5
58458: NEG
58459: PUSH
58460: LD_INT 5
58462: NEG
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 3
58470: NEG
58471: PUSH
58472: LD_INT 5
58474: NEG
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 5
58482: NEG
58483: PUSH
58484: LD_INT 3
58486: NEG
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58539: LD_ADDR_VAR 0 30
58543: PUSH
58544: LD_INT 4
58546: PUSH
58547: LD_INT 4
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 4
58556: PUSH
58557: LD_INT 3
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 5
58566: PUSH
58567: LD_INT 4
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 5
58576: PUSH
58577: LD_INT 5
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 4
58586: PUSH
58587: LD_INT 5
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 3
58596: PUSH
58597: LD_INT 4
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 3
58606: PUSH
58607: LD_INT 3
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 5
58616: PUSH
58617: LD_INT 3
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 3
58626: PUSH
58627: LD_INT 5
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 0
58636: PUSH
58637: LD_INT 3
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: LD_INT 2
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 1
58656: PUSH
58657: LD_INT 3
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 1
58666: PUSH
58667: LD_INT 4
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 0
58676: PUSH
58677: LD_INT 4
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 1
58686: NEG
58687: PUSH
58688: LD_INT 3
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: NEG
58698: PUSH
58699: LD_INT 2
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 2
58708: PUSH
58709: LD_INT 4
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 2
58718: NEG
58719: PUSH
58720: LD_INT 2
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 4
58729: NEG
58730: PUSH
58731: LD_INT 0
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 4
58740: NEG
58741: PUSH
58742: LD_INT 1
58744: NEG
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 3
58752: NEG
58753: PUSH
58754: LD_INT 0
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 3
58763: NEG
58764: PUSH
58765: LD_INT 1
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 4
58774: NEG
58775: PUSH
58776: LD_INT 1
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 5
58785: NEG
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 5
58796: NEG
58797: PUSH
58798: LD_INT 1
58800: NEG
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 5
58808: NEG
58809: PUSH
58810: LD_INT 2
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 3
58820: NEG
58821: PUSH
58822: LD_INT 2
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 3
58831: NEG
58832: PUSH
58833: LD_INT 3
58835: NEG
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 3
58843: NEG
58844: PUSH
58845: LD_INT 4
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 2
58855: NEG
58856: PUSH
58857: LD_INT 3
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 2
58867: NEG
58868: PUSH
58869: LD_INT 2
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 3
58879: NEG
58880: PUSH
58881: LD_INT 2
58883: NEG
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 4
58891: NEG
58892: PUSH
58893: LD_INT 3
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 4
58903: NEG
58904: PUSH
58905: LD_INT 4
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 2
58915: NEG
58916: PUSH
58917: LD_INT 4
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 4
58927: NEG
58928: PUSH
58929: LD_INT 2
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: LD_INT 4
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 0
58950: PUSH
58951: LD_INT 5
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 1
58961: PUSH
58962: LD_INT 4
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 1
58972: PUSH
58973: LD_INT 3
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 0
58983: PUSH
58984: LD_INT 3
58986: NEG
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 1
58994: NEG
58995: PUSH
58996: LD_INT 4
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 1
59006: NEG
59007: PUSH
59008: LD_INT 5
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 2
59018: PUSH
59019: LD_INT 3
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 2
59029: NEG
59030: PUSH
59031: LD_INT 5
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59086: LD_ADDR_VAR 0 31
59090: PUSH
59091: LD_INT 0
59093: PUSH
59094: LD_INT 4
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 0
59103: PUSH
59104: LD_INT 3
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 1
59113: PUSH
59114: LD_INT 4
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 1
59123: PUSH
59124: LD_INT 5
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: LD_INT 5
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 1
59143: NEG
59144: PUSH
59145: LD_INT 4
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 1
59154: NEG
59155: PUSH
59156: LD_INT 3
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 2
59165: PUSH
59166: LD_INT 5
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 2
59175: NEG
59176: PUSH
59177: LD_INT 3
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 3
59186: NEG
59187: PUSH
59188: LD_INT 0
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 3
59197: NEG
59198: PUSH
59199: LD_INT 1
59201: NEG
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 2
59209: NEG
59210: PUSH
59211: LD_INT 0
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 2
59220: NEG
59221: PUSH
59222: LD_INT 1
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 3
59231: NEG
59232: PUSH
59233: LD_INT 1
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 4
59242: NEG
59243: PUSH
59244: LD_INT 0
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 4
59253: NEG
59254: PUSH
59255: LD_INT 1
59257: NEG
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 4
59265: NEG
59266: PUSH
59267: LD_INT 2
59269: NEG
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 2
59277: NEG
59278: PUSH
59279: LD_INT 2
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 4
59288: NEG
59289: PUSH
59290: LD_INT 4
59292: NEG
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 4
59300: NEG
59301: PUSH
59302: LD_INT 5
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 3
59312: NEG
59313: PUSH
59314: LD_INT 4
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 3
59324: NEG
59325: PUSH
59326: LD_INT 3
59328: NEG
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 4
59336: NEG
59337: PUSH
59338: LD_INT 3
59340: NEG
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 5
59348: NEG
59349: PUSH
59350: LD_INT 4
59352: NEG
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 5
59360: NEG
59361: PUSH
59362: LD_INT 5
59364: NEG
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 3
59372: NEG
59373: PUSH
59374: LD_INT 5
59376: NEG
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 5
59384: NEG
59385: PUSH
59386: LD_INT 3
59388: NEG
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 0
59396: PUSH
59397: LD_INT 3
59399: NEG
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: LD_INT 4
59410: NEG
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 1
59418: PUSH
59419: LD_INT 3
59421: NEG
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 1
59429: PUSH
59430: LD_INT 2
59432: NEG
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 0
59440: PUSH
59441: LD_INT 2
59443: NEG
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 1
59451: NEG
59452: PUSH
59453: LD_INT 3
59455: NEG
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 1
59463: NEG
59464: PUSH
59465: LD_INT 4
59467: NEG
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 2
59475: PUSH
59476: LD_INT 2
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 2
59486: NEG
59487: PUSH
59488: LD_INT 4
59490: NEG
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 4
59498: PUSH
59499: LD_INT 0
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 4
59508: PUSH
59509: LD_INT 1
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 5
59519: PUSH
59520: LD_INT 0
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 5
59529: PUSH
59530: LD_INT 1
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 4
59539: PUSH
59540: LD_INT 1
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 3
59549: PUSH
59550: LD_INT 0
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 3
59559: PUSH
59560: LD_INT 1
59562: NEG
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 3
59570: PUSH
59571: LD_INT 2
59573: NEG
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 5
59581: PUSH
59582: LD_INT 2
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59636: LD_ADDR_VAR 0 32
59640: PUSH
59641: LD_INT 4
59643: NEG
59644: PUSH
59645: LD_INT 0
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 4
59654: NEG
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 3
59666: NEG
59667: PUSH
59668: LD_INT 0
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 3
59677: NEG
59678: PUSH
59679: LD_INT 1
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 4
59688: NEG
59689: PUSH
59690: LD_INT 1
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 5
59699: NEG
59700: PUSH
59701: LD_INT 0
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 5
59710: NEG
59711: PUSH
59712: LD_INT 1
59714: NEG
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 5
59722: NEG
59723: PUSH
59724: LD_INT 2
59726: NEG
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 3
59734: NEG
59735: PUSH
59736: LD_INT 2
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 3
59745: NEG
59746: PUSH
59747: LD_INT 3
59749: NEG
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 3
59757: NEG
59758: PUSH
59759: LD_INT 4
59761: NEG
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 2
59769: NEG
59770: PUSH
59771: LD_INT 3
59773: NEG
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 2
59781: NEG
59782: PUSH
59783: LD_INT 2
59785: NEG
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 3
59793: NEG
59794: PUSH
59795: LD_INT 2
59797: NEG
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 4
59805: NEG
59806: PUSH
59807: LD_INT 3
59809: NEG
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 4
59817: NEG
59818: PUSH
59819: LD_INT 4
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 2
59829: NEG
59830: PUSH
59831: LD_INT 4
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 4
59841: NEG
59842: PUSH
59843: LD_INT 2
59845: NEG
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 0
59853: PUSH
59854: LD_INT 4
59856: NEG
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 0
59864: PUSH
59865: LD_INT 5
59867: NEG
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 1
59875: PUSH
59876: LD_INT 4
59878: NEG
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 1
59886: PUSH
59887: LD_INT 3
59889: NEG
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: LD_INT 3
59900: NEG
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 1
59908: NEG
59909: PUSH
59910: LD_INT 4
59912: NEG
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 1
59920: NEG
59921: PUSH
59922: LD_INT 5
59924: NEG
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 2
59932: PUSH
59933: LD_INT 3
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 2
59943: NEG
59944: PUSH
59945: LD_INT 5
59947: NEG
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 3
59955: PUSH
59956: LD_INT 0
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 3
59965: PUSH
59966: LD_INT 1
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 4
59976: PUSH
59977: LD_INT 0
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 4
59986: PUSH
59987: LD_INT 1
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 3
59996: PUSH
59997: LD_INT 1
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 2
60006: PUSH
60007: LD_INT 0
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 2
60016: PUSH
60017: LD_INT 1
60019: NEG
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 2
60027: PUSH
60028: LD_INT 2
60030: NEG
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 4
60038: PUSH
60039: LD_INT 2
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 4
60048: PUSH
60049: LD_INT 4
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 4
60058: PUSH
60059: LD_INT 3
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 5
60068: PUSH
60069: LD_INT 4
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 5
60078: PUSH
60079: LD_INT 5
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 4
60088: PUSH
60089: LD_INT 5
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 3
60098: PUSH
60099: LD_INT 4
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 3
60108: PUSH
60109: LD_INT 3
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 5
60118: PUSH
60119: LD_INT 3
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 3
60128: PUSH
60129: LD_INT 5
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60183: LD_ADDR_VAR 0 33
60187: PUSH
60188: LD_INT 4
60190: NEG
60191: PUSH
60192: LD_INT 4
60194: NEG
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 4
60202: NEG
60203: PUSH
60204: LD_INT 5
60206: NEG
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 3
60214: NEG
60215: PUSH
60216: LD_INT 4
60218: NEG
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 3
60226: NEG
60227: PUSH
60228: LD_INT 3
60230: NEG
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 4
60238: NEG
60239: PUSH
60240: LD_INT 3
60242: NEG
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 5
60250: NEG
60251: PUSH
60252: LD_INT 4
60254: NEG
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 5
60262: NEG
60263: PUSH
60264: LD_INT 5
60266: NEG
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 3
60274: NEG
60275: PUSH
60276: LD_INT 5
60278: NEG
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 5
60286: NEG
60287: PUSH
60288: LD_INT 3
60290: NEG
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 0
60298: PUSH
60299: LD_INT 3
60301: NEG
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 0
60309: PUSH
60310: LD_INT 4
60312: NEG
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 1
60320: PUSH
60321: LD_INT 3
60323: NEG
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 1
60331: PUSH
60332: LD_INT 2
60334: NEG
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 0
60342: PUSH
60343: LD_INT 2
60345: NEG
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 1
60353: NEG
60354: PUSH
60355: LD_INT 3
60357: NEG
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 1
60365: NEG
60366: PUSH
60367: LD_INT 4
60369: NEG
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 2
60377: PUSH
60378: LD_INT 2
60380: NEG
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 2
60388: NEG
60389: PUSH
60390: LD_INT 4
60392: NEG
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 4
60400: PUSH
60401: LD_INT 0
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 4
60410: PUSH
60411: LD_INT 1
60413: NEG
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 5
60421: PUSH
60422: LD_INT 0
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 5
60431: PUSH
60432: LD_INT 1
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 4
60441: PUSH
60442: LD_INT 1
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 3
60451: PUSH
60452: LD_INT 0
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 3
60461: PUSH
60462: LD_INT 1
60464: NEG
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 3
60472: PUSH
60473: LD_INT 2
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 5
60483: PUSH
60484: LD_INT 2
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 3
60493: PUSH
60494: LD_INT 3
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 3
60503: PUSH
60504: LD_INT 2
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 4
60513: PUSH
60514: LD_INT 3
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 4
60523: PUSH
60524: LD_INT 4
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 3
60533: PUSH
60534: LD_INT 4
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 2
60543: PUSH
60544: LD_INT 3
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 2
60553: PUSH
60554: LD_INT 2
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 4
60563: PUSH
60564: LD_INT 2
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 2
60573: PUSH
60574: LD_INT 4
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 0
60583: PUSH
60584: LD_INT 4
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 0
60593: PUSH
60594: LD_INT 3
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 1
60603: PUSH
60604: LD_INT 4
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 1
60613: PUSH
60614: LD_INT 5
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 0
60623: PUSH
60624: LD_INT 5
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 1
60633: NEG
60634: PUSH
60635: LD_INT 4
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 1
60644: NEG
60645: PUSH
60646: LD_INT 3
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 2
60655: PUSH
60656: LD_INT 5
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 2
60665: NEG
60666: PUSH
60667: LD_INT 3
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60721: LD_ADDR_VAR 0 34
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: LD_INT 4
60731: NEG
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 0
60739: PUSH
60740: LD_INT 5
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 1
60750: PUSH
60751: LD_INT 4
60753: NEG
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 1
60761: PUSH
60762: LD_INT 3
60764: NEG
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 0
60772: PUSH
60773: LD_INT 3
60775: NEG
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 1
60783: NEG
60784: PUSH
60785: LD_INT 4
60787: NEG
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 1
60795: NEG
60796: PUSH
60797: LD_INT 5
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 2
60807: PUSH
60808: LD_INT 3
60810: NEG
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 2
60818: NEG
60819: PUSH
60820: LD_INT 5
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 3
60830: PUSH
60831: LD_INT 0
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 3
60840: PUSH
60841: LD_INT 1
60843: NEG
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 4
60851: PUSH
60852: LD_INT 0
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 4
60861: PUSH
60862: LD_INT 1
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 3
60871: PUSH
60872: LD_INT 1
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 2
60881: PUSH
60882: LD_INT 0
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 2
60891: PUSH
60892: LD_INT 1
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 2
60902: PUSH
60903: LD_INT 2
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 4
60913: PUSH
60914: LD_INT 2
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 4
60923: PUSH
60924: LD_INT 4
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 4
60933: PUSH
60934: LD_INT 3
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 5
60943: PUSH
60944: LD_INT 4
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 5
60953: PUSH
60954: LD_INT 5
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 4
60963: PUSH
60964: LD_INT 5
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 3
60973: PUSH
60974: LD_INT 4
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 3
60983: PUSH
60984: LD_INT 3
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 5
60993: PUSH
60994: LD_INT 3
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 3
61003: PUSH
61004: LD_INT 5
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 0
61013: PUSH
61014: LD_INT 3
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 0
61023: PUSH
61024: LD_INT 2
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 1
61033: PUSH
61034: LD_INT 3
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 1
61043: PUSH
61044: LD_INT 4
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 0
61053: PUSH
61054: LD_INT 4
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 1
61063: NEG
61064: PUSH
61065: LD_INT 3
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 1
61074: NEG
61075: PUSH
61076: LD_INT 2
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 2
61085: PUSH
61086: LD_INT 4
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 2
61095: NEG
61096: PUSH
61097: LD_INT 2
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 4
61106: NEG
61107: PUSH
61108: LD_INT 0
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 4
61117: NEG
61118: PUSH
61119: LD_INT 1
61121: NEG
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 3
61129: NEG
61130: PUSH
61131: LD_INT 0
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 3
61140: NEG
61141: PUSH
61142: LD_INT 1
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 4
61151: NEG
61152: PUSH
61153: LD_INT 1
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 5
61162: NEG
61163: PUSH
61164: LD_INT 0
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 5
61173: NEG
61174: PUSH
61175: LD_INT 1
61177: NEG
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 5
61185: NEG
61186: PUSH
61187: LD_INT 2
61189: NEG
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 3
61197: NEG
61198: PUSH
61199: LD_INT 2
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: ST_TO_ADDR
// end ; end ;
61253: GO 61256
61255: POP
// case btype of b_depot , b_warehouse :
61256: LD_VAR 0 1
61260: PUSH
61261: LD_INT 0
61263: DOUBLE
61264: EQUAL
61265: IFTRUE 61275
61267: LD_INT 1
61269: DOUBLE
61270: EQUAL
61271: IFTRUE 61275
61273: GO 61476
61275: POP
// case nation of nation_american :
61276: LD_VAR 0 5
61280: PUSH
61281: LD_INT 1
61283: DOUBLE
61284: EQUAL
61285: IFTRUE 61289
61287: GO 61345
61289: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61290: LD_ADDR_VAR 0 9
61294: PUSH
61295: LD_VAR 0 11
61299: PUSH
61300: LD_VAR 0 12
61304: PUSH
61305: LD_VAR 0 13
61309: PUSH
61310: LD_VAR 0 14
61314: PUSH
61315: LD_VAR 0 15
61319: PUSH
61320: LD_VAR 0 16
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: PUSH
61333: LD_VAR 0 4
61337: PUSH
61338: LD_INT 1
61340: PLUS
61341: ARRAY
61342: ST_TO_ADDR
61343: GO 61474
61345: LD_INT 2
61347: DOUBLE
61348: EQUAL
61349: IFTRUE 61353
61351: GO 61409
61353: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61354: LD_ADDR_VAR 0 9
61358: PUSH
61359: LD_VAR 0 17
61363: PUSH
61364: LD_VAR 0 18
61368: PUSH
61369: LD_VAR 0 19
61373: PUSH
61374: LD_VAR 0 20
61378: PUSH
61379: LD_VAR 0 21
61383: PUSH
61384: LD_VAR 0 22
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: PUSH
61397: LD_VAR 0 4
61401: PUSH
61402: LD_INT 1
61404: PLUS
61405: ARRAY
61406: ST_TO_ADDR
61407: GO 61474
61409: LD_INT 3
61411: DOUBLE
61412: EQUAL
61413: IFTRUE 61417
61415: GO 61473
61417: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61418: LD_ADDR_VAR 0 9
61422: PUSH
61423: LD_VAR 0 23
61427: PUSH
61428: LD_VAR 0 24
61432: PUSH
61433: LD_VAR 0 25
61437: PUSH
61438: LD_VAR 0 26
61442: PUSH
61443: LD_VAR 0 27
61447: PUSH
61448: LD_VAR 0 28
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: PUSH
61461: LD_VAR 0 4
61465: PUSH
61466: LD_INT 1
61468: PLUS
61469: ARRAY
61470: ST_TO_ADDR
61471: GO 61474
61473: POP
61474: GO 62029
61476: LD_INT 2
61478: DOUBLE
61479: EQUAL
61480: IFTRUE 61490
61482: LD_INT 3
61484: DOUBLE
61485: EQUAL
61486: IFTRUE 61490
61488: GO 61546
61490: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61491: LD_ADDR_VAR 0 9
61495: PUSH
61496: LD_VAR 0 29
61500: PUSH
61501: LD_VAR 0 30
61505: PUSH
61506: LD_VAR 0 31
61510: PUSH
61511: LD_VAR 0 32
61515: PUSH
61516: LD_VAR 0 33
61520: PUSH
61521: LD_VAR 0 34
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: PUSH
61534: LD_VAR 0 4
61538: PUSH
61539: LD_INT 1
61541: PLUS
61542: ARRAY
61543: ST_TO_ADDR
61544: GO 62029
61546: LD_INT 16
61548: DOUBLE
61549: EQUAL
61550: IFTRUE 61608
61552: LD_INT 17
61554: DOUBLE
61555: EQUAL
61556: IFTRUE 61608
61558: LD_INT 18
61560: DOUBLE
61561: EQUAL
61562: IFTRUE 61608
61564: LD_INT 19
61566: DOUBLE
61567: EQUAL
61568: IFTRUE 61608
61570: LD_INT 22
61572: DOUBLE
61573: EQUAL
61574: IFTRUE 61608
61576: LD_INT 20
61578: DOUBLE
61579: EQUAL
61580: IFTRUE 61608
61582: LD_INT 21
61584: DOUBLE
61585: EQUAL
61586: IFTRUE 61608
61588: LD_INT 23
61590: DOUBLE
61591: EQUAL
61592: IFTRUE 61608
61594: LD_INT 24
61596: DOUBLE
61597: EQUAL
61598: IFTRUE 61608
61600: LD_INT 25
61602: DOUBLE
61603: EQUAL
61604: IFTRUE 61608
61606: GO 61664
61608: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61609: LD_ADDR_VAR 0 9
61613: PUSH
61614: LD_VAR 0 35
61618: PUSH
61619: LD_VAR 0 36
61623: PUSH
61624: LD_VAR 0 37
61628: PUSH
61629: LD_VAR 0 38
61633: PUSH
61634: LD_VAR 0 39
61638: PUSH
61639: LD_VAR 0 40
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: PUSH
61652: LD_VAR 0 4
61656: PUSH
61657: LD_INT 1
61659: PLUS
61660: ARRAY
61661: ST_TO_ADDR
61662: GO 62029
61664: LD_INT 6
61666: DOUBLE
61667: EQUAL
61668: IFTRUE 61720
61670: LD_INT 7
61672: DOUBLE
61673: EQUAL
61674: IFTRUE 61720
61676: LD_INT 8
61678: DOUBLE
61679: EQUAL
61680: IFTRUE 61720
61682: LD_INT 13
61684: DOUBLE
61685: EQUAL
61686: IFTRUE 61720
61688: LD_INT 12
61690: DOUBLE
61691: EQUAL
61692: IFTRUE 61720
61694: LD_INT 15
61696: DOUBLE
61697: EQUAL
61698: IFTRUE 61720
61700: LD_INT 11
61702: DOUBLE
61703: EQUAL
61704: IFTRUE 61720
61706: LD_INT 14
61708: DOUBLE
61709: EQUAL
61710: IFTRUE 61720
61712: LD_INT 10
61714: DOUBLE
61715: EQUAL
61716: IFTRUE 61720
61718: GO 61776
61720: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61721: LD_ADDR_VAR 0 9
61725: PUSH
61726: LD_VAR 0 41
61730: PUSH
61731: LD_VAR 0 42
61735: PUSH
61736: LD_VAR 0 43
61740: PUSH
61741: LD_VAR 0 44
61745: PUSH
61746: LD_VAR 0 45
61750: PUSH
61751: LD_VAR 0 46
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: PUSH
61764: LD_VAR 0 4
61768: PUSH
61769: LD_INT 1
61771: PLUS
61772: ARRAY
61773: ST_TO_ADDR
61774: GO 62029
61776: LD_INT 36
61778: DOUBLE
61779: EQUAL
61780: IFTRUE 61784
61782: GO 61840
61784: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61785: LD_ADDR_VAR 0 9
61789: PUSH
61790: LD_VAR 0 47
61794: PUSH
61795: LD_VAR 0 48
61799: PUSH
61800: LD_VAR 0 49
61804: PUSH
61805: LD_VAR 0 50
61809: PUSH
61810: LD_VAR 0 51
61814: PUSH
61815: LD_VAR 0 52
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: PUSH
61828: LD_VAR 0 4
61832: PUSH
61833: LD_INT 1
61835: PLUS
61836: ARRAY
61837: ST_TO_ADDR
61838: GO 62029
61840: LD_INT 4
61842: DOUBLE
61843: EQUAL
61844: IFTRUE 61866
61846: LD_INT 5
61848: DOUBLE
61849: EQUAL
61850: IFTRUE 61866
61852: LD_INT 34
61854: DOUBLE
61855: EQUAL
61856: IFTRUE 61866
61858: LD_INT 37
61860: DOUBLE
61861: EQUAL
61862: IFTRUE 61866
61864: GO 61922
61866: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61867: LD_ADDR_VAR 0 9
61871: PUSH
61872: LD_VAR 0 53
61876: PUSH
61877: LD_VAR 0 54
61881: PUSH
61882: LD_VAR 0 55
61886: PUSH
61887: LD_VAR 0 56
61891: PUSH
61892: LD_VAR 0 57
61896: PUSH
61897: LD_VAR 0 58
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: PUSH
61910: LD_VAR 0 4
61914: PUSH
61915: LD_INT 1
61917: PLUS
61918: ARRAY
61919: ST_TO_ADDR
61920: GO 62029
61922: LD_INT 31
61924: DOUBLE
61925: EQUAL
61926: IFTRUE 61972
61928: LD_INT 32
61930: DOUBLE
61931: EQUAL
61932: IFTRUE 61972
61934: LD_INT 33
61936: DOUBLE
61937: EQUAL
61938: IFTRUE 61972
61940: LD_INT 27
61942: DOUBLE
61943: EQUAL
61944: IFTRUE 61972
61946: LD_INT 26
61948: DOUBLE
61949: EQUAL
61950: IFTRUE 61972
61952: LD_INT 28
61954: DOUBLE
61955: EQUAL
61956: IFTRUE 61972
61958: LD_INT 29
61960: DOUBLE
61961: EQUAL
61962: IFTRUE 61972
61964: LD_INT 30
61966: DOUBLE
61967: EQUAL
61968: IFTRUE 61972
61970: GO 62028
61972: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61973: LD_ADDR_VAR 0 9
61977: PUSH
61978: LD_VAR 0 59
61982: PUSH
61983: LD_VAR 0 60
61987: PUSH
61988: LD_VAR 0 61
61992: PUSH
61993: LD_VAR 0 62
61997: PUSH
61998: LD_VAR 0 63
62002: PUSH
62003: LD_VAR 0 64
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: PUSH
62016: LD_VAR 0 4
62020: PUSH
62021: LD_INT 1
62023: PLUS
62024: ARRAY
62025: ST_TO_ADDR
62026: GO 62029
62028: POP
// temp_list2 = [ ] ;
62029: LD_ADDR_VAR 0 10
62033: PUSH
62034: EMPTY
62035: ST_TO_ADDR
// for i in temp_list do
62036: LD_ADDR_VAR 0 8
62040: PUSH
62041: LD_VAR 0 9
62045: PUSH
62046: FOR_IN
62047: IFFALSE 62099
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62049: LD_ADDR_VAR 0 10
62053: PUSH
62054: LD_VAR 0 10
62058: PUSH
62059: LD_VAR 0 8
62063: PUSH
62064: LD_INT 1
62066: ARRAY
62067: PUSH
62068: LD_VAR 0 2
62072: PLUS
62073: PUSH
62074: LD_VAR 0 8
62078: PUSH
62079: LD_INT 2
62081: ARRAY
62082: PUSH
62083: LD_VAR 0 3
62087: PLUS
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: EMPTY
62094: LIST
62095: ADD
62096: ST_TO_ADDR
62097: GO 62046
62099: POP
62100: POP
// result = temp_list2 ;
62101: LD_ADDR_VAR 0 7
62105: PUSH
62106: LD_VAR 0 10
62110: ST_TO_ADDR
// end ;
62111: LD_VAR 0 7
62115: RET
// export function EnemyInRange ( unit , dist ) ; begin
62116: LD_INT 0
62118: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62119: LD_ADDR_VAR 0 3
62123: PUSH
62124: LD_VAR 0 1
62128: PPUSH
62129: CALL_OW 255
62133: PPUSH
62134: LD_VAR 0 1
62138: PPUSH
62139: CALL_OW 250
62143: PPUSH
62144: LD_VAR 0 1
62148: PPUSH
62149: CALL_OW 251
62153: PPUSH
62154: LD_VAR 0 2
62158: PPUSH
62159: CALL 36220 0 4
62163: PUSH
62164: LD_INT 4
62166: ARRAY
62167: ST_TO_ADDR
// end ;
62168: LD_VAR 0 3
62172: RET
// export function PlayerSeeMe ( unit ) ; begin
62173: LD_INT 0
62175: PPUSH
// result := See ( your_side , unit ) ;
62176: LD_ADDR_VAR 0 2
62180: PUSH
62181: LD_OWVAR 2
62185: PPUSH
62186: LD_VAR 0 1
62190: PPUSH
62191: CALL_OW 292
62195: ST_TO_ADDR
// end ;
62196: LD_VAR 0 2
62200: RET
// export function ReverseDir ( unit ) ; begin
62201: LD_INT 0
62203: PPUSH
// if not unit then
62204: LD_VAR 0 1
62208: NOT
62209: IFFALSE 62213
// exit ;
62211: GO 62236
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62213: LD_ADDR_VAR 0 2
62217: PUSH
62218: LD_VAR 0 1
62222: PPUSH
62223: CALL_OW 254
62227: PUSH
62228: LD_INT 3
62230: PLUS
62231: PUSH
62232: LD_INT 6
62234: MOD
62235: ST_TO_ADDR
// end ;
62236: LD_VAR 0 2
62240: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62241: LD_INT 0
62243: PPUSH
62244: PPUSH
62245: PPUSH
62246: PPUSH
62247: PPUSH
// if not hexes then
62248: LD_VAR 0 2
62252: NOT
62253: IFFALSE 62257
// exit ;
62255: GO 62405
// dist := 9999 ;
62257: LD_ADDR_VAR 0 5
62261: PUSH
62262: LD_INT 9999
62264: ST_TO_ADDR
// for i = 1 to hexes do
62265: LD_ADDR_VAR 0 4
62269: PUSH
62270: DOUBLE
62271: LD_INT 1
62273: DEC
62274: ST_TO_ADDR
62275: LD_VAR 0 2
62279: PUSH
62280: FOR_TO
62281: IFFALSE 62393
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62283: LD_VAR 0 1
62287: PPUSH
62288: LD_VAR 0 2
62292: PUSH
62293: LD_VAR 0 4
62297: ARRAY
62298: PUSH
62299: LD_INT 1
62301: ARRAY
62302: PPUSH
62303: LD_VAR 0 2
62307: PUSH
62308: LD_VAR 0 4
62312: ARRAY
62313: PUSH
62314: LD_INT 2
62316: ARRAY
62317: PPUSH
62318: CALL_OW 297
62322: PUSH
62323: LD_VAR 0 5
62327: LESS
62328: IFFALSE 62391
// begin hex := hexes [ i ] ;
62330: LD_ADDR_VAR 0 7
62334: PUSH
62335: LD_VAR 0 2
62339: PUSH
62340: LD_VAR 0 4
62344: ARRAY
62345: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62346: LD_ADDR_VAR 0 5
62350: PUSH
62351: LD_VAR 0 1
62355: PPUSH
62356: LD_VAR 0 2
62360: PUSH
62361: LD_VAR 0 4
62365: ARRAY
62366: PUSH
62367: LD_INT 1
62369: ARRAY
62370: PPUSH
62371: LD_VAR 0 2
62375: PUSH
62376: LD_VAR 0 4
62380: ARRAY
62381: PUSH
62382: LD_INT 2
62384: ARRAY
62385: PPUSH
62386: CALL_OW 297
62390: ST_TO_ADDR
// end ; end ;
62391: GO 62280
62393: POP
62394: POP
// result := hex ;
62395: LD_ADDR_VAR 0 3
62399: PUSH
62400: LD_VAR 0 7
62404: ST_TO_ADDR
// end ;
62405: LD_VAR 0 3
62409: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62410: LD_INT 0
62412: PPUSH
62413: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62414: LD_VAR 0 1
62418: NOT
62419: PUSH
62420: LD_VAR 0 1
62424: PUSH
62425: LD_INT 21
62427: PUSH
62428: LD_INT 2
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 23
62437: PUSH
62438: LD_INT 2
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PPUSH
62449: CALL_OW 69
62453: IN
62454: NOT
62455: OR
62456: IFFALSE 62460
// exit ;
62458: GO 62507
// for i = 1 to 3 do
62460: LD_ADDR_VAR 0 3
62464: PUSH
62465: DOUBLE
62466: LD_INT 1
62468: DEC
62469: ST_TO_ADDR
62470: LD_INT 3
62472: PUSH
62473: FOR_TO
62474: IFFALSE 62505
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62476: LD_VAR 0 1
62480: PPUSH
62481: CALL_OW 250
62485: PPUSH
62486: LD_VAR 0 1
62490: PPUSH
62491: CALL_OW 251
62495: PPUSH
62496: LD_INT 1
62498: PPUSH
62499: CALL_OW 453
62503: GO 62473
62505: POP
62506: POP
// end ;
62507: LD_VAR 0 2
62511: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62512: LD_INT 0
62514: PPUSH
62515: PPUSH
62516: PPUSH
62517: PPUSH
62518: PPUSH
62519: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62520: LD_VAR 0 1
62524: NOT
62525: PUSH
62526: LD_VAR 0 2
62530: NOT
62531: OR
62532: PUSH
62533: LD_VAR 0 1
62537: PPUSH
62538: CALL_OW 314
62542: OR
62543: IFFALSE 62547
// exit ;
62545: GO 62988
// x := GetX ( enemy_unit ) ;
62547: LD_ADDR_VAR 0 7
62551: PUSH
62552: LD_VAR 0 2
62556: PPUSH
62557: CALL_OW 250
62561: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62562: LD_ADDR_VAR 0 8
62566: PUSH
62567: LD_VAR 0 2
62571: PPUSH
62572: CALL_OW 251
62576: ST_TO_ADDR
// if not x or not y then
62577: LD_VAR 0 7
62581: NOT
62582: PUSH
62583: LD_VAR 0 8
62587: NOT
62588: OR
62589: IFFALSE 62593
// exit ;
62591: GO 62988
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62593: LD_ADDR_VAR 0 6
62597: PUSH
62598: LD_VAR 0 7
62602: PPUSH
62603: LD_INT 0
62605: PPUSH
62606: LD_INT 4
62608: PPUSH
62609: CALL_OW 272
62613: PUSH
62614: LD_VAR 0 8
62618: PPUSH
62619: LD_INT 0
62621: PPUSH
62622: LD_INT 4
62624: PPUSH
62625: CALL_OW 273
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_VAR 0 7
62638: PPUSH
62639: LD_INT 1
62641: PPUSH
62642: LD_INT 4
62644: PPUSH
62645: CALL_OW 272
62649: PUSH
62650: LD_VAR 0 8
62654: PPUSH
62655: LD_INT 1
62657: PPUSH
62658: LD_INT 4
62660: PPUSH
62661: CALL_OW 273
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_VAR 0 7
62674: PPUSH
62675: LD_INT 2
62677: PPUSH
62678: LD_INT 4
62680: PPUSH
62681: CALL_OW 272
62685: PUSH
62686: LD_VAR 0 8
62690: PPUSH
62691: LD_INT 2
62693: PPUSH
62694: LD_INT 4
62696: PPUSH
62697: CALL_OW 273
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_VAR 0 7
62710: PPUSH
62711: LD_INT 3
62713: PPUSH
62714: LD_INT 4
62716: PPUSH
62717: CALL_OW 272
62721: PUSH
62722: LD_VAR 0 8
62726: PPUSH
62727: LD_INT 3
62729: PPUSH
62730: LD_INT 4
62732: PPUSH
62733: CALL_OW 273
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_VAR 0 7
62746: PPUSH
62747: LD_INT 4
62749: PPUSH
62750: LD_INT 4
62752: PPUSH
62753: CALL_OW 272
62757: PUSH
62758: LD_VAR 0 8
62762: PPUSH
62763: LD_INT 4
62765: PPUSH
62766: LD_INT 4
62768: PPUSH
62769: CALL_OW 273
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_VAR 0 7
62782: PPUSH
62783: LD_INT 5
62785: PPUSH
62786: LD_INT 4
62788: PPUSH
62789: CALL_OW 272
62793: PUSH
62794: LD_VAR 0 8
62798: PPUSH
62799: LD_INT 5
62801: PPUSH
62802: LD_INT 4
62804: PPUSH
62805: CALL_OW 273
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: ST_TO_ADDR
// for i = tmp downto 1 do
62822: LD_ADDR_VAR 0 4
62826: PUSH
62827: DOUBLE
62828: LD_VAR 0 6
62832: INC
62833: ST_TO_ADDR
62834: LD_INT 1
62836: PUSH
62837: FOR_DOWNTO
62838: IFFALSE 62939
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62840: LD_VAR 0 6
62844: PUSH
62845: LD_VAR 0 4
62849: ARRAY
62850: PUSH
62851: LD_INT 1
62853: ARRAY
62854: PPUSH
62855: LD_VAR 0 6
62859: PUSH
62860: LD_VAR 0 4
62864: ARRAY
62865: PUSH
62866: LD_INT 2
62868: ARRAY
62869: PPUSH
62870: CALL_OW 488
62874: NOT
62875: PUSH
62876: LD_VAR 0 6
62880: PUSH
62881: LD_VAR 0 4
62885: ARRAY
62886: PUSH
62887: LD_INT 1
62889: ARRAY
62890: PPUSH
62891: LD_VAR 0 6
62895: PUSH
62896: LD_VAR 0 4
62900: ARRAY
62901: PUSH
62902: LD_INT 2
62904: ARRAY
62905: PPUSH
62906: CALL_OW 428
62910: PUSH
62911: LD_INT 0
62913: NONEQUAL
62914: OR
62915: IFFALSE 62937
// tmp := Delete ( tmp , i ) ;
62917: LD_ADDR_VAR 0 6
62921: PUSH
62922: LD_VAR 0 6
62926: PPUSH
62927: LD_VAR 0 4
62931: PPUSH
62932: CALL_OW 3
62936: ST_TO_ADDR
62937: GO 62837
62939: POP
62940: POP
// j := GetClosestHex ( unit , tmp ) ;
62941: LD_ADDR_VAR 0 5
62945: PUSH
62946: LD_VAR 0 1
62950: PPUSH
62951: LD_VAR 0 6
62955: PPUSH
62956: CALL 62241 0 2
62960: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62961: LD_VAR 0 1
62965: PPUSH
62966: LD_VAR 0 5
62970: PUSH
62971: LD_INT 1
62973: ARRAY
62974: PPUSH
62975: LD_VAR 0 5
62979: PUSH
62980: LD_INT 2
62982: ARRAY
62983: PPUSH
62984: CALL_OW 111
// end ;
62988: LD_VAR 0 3
62992: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62993: LD_INT 0
62995: PPUSH
62996: PPUSH
62997: PPUSH
// uc_side = 0 ;
62998: LD_ADDR_OWVAR 20
63002: PUSH
63003: LD_INT 0
63005: ST_TO_ADDR
// uc_nation = 0 ;
63006: LD_ADDR_OWVAR 21
63010: PUSH
63011: LD_INT 0
63013: ST_TO_ADDR
// InitHc ;
63014: CALL_OW 19
// InitVc ;
63018: CALL_OW 20
// if mastodonts then
63022: LD_VAR 0 6
63026: IFFALSE 63093
// for i = 1 to mastodonts do
63028: LD_ADDR_VAR 0 11
63032: PUSH
63033: DOUBLE
63034: LD_INT 1
63036: DEC
63037: ST_TO_ADDR
63038: LD_VAR 0 6
63042: PUSH
63043: FOR_TO
63044: IFFALSE 63091
// begin vc_chassis := 31 ;
63046: LD_ADDR_OWVAR 37
63050: PUSH
63051: LD_INT 31
63053: ST_TO_ADDR
// vc_control := control_rider ;
63054: LD_ADDR_OWVAR 38
63058: PUSH
63059: LD_INT 4
63061: ST_TO_ADDR
// animal := CreateVehicle ;
63062: LD_ADDR_VAR 0 12
63066: PUSH
63067: CALL_OW 45
63071: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63072: LD_VAR 0 12
63076: PPUSH
63077: LD_VAR 0 8
63081: PPUSH
63082: LD_INT 0
63084: PPUSH
63085: CALL 65162 0 3
// end ;
63089: GO 63043
63091: POP
63092: POP
// if horses then
63093: LD_VAR 0 5
63097: IFFALSE 63164
// for i = 1 to horses do
63099: LD_ADDR_VAR 0 11
63103: PUSH
63104: DOUBLE
63105: LD_INT 1
63107: DEC
63108: ST_TO_ADDR
63109: LD_VAR 0 5
63113: PUSH
63114: FOR_TO
63115: IFFALSE 63162
// begin hc_class := 21 ;
63117: LD_ADDR_OWVAR 28
63121: PUSH
63122: LD_INT 21
63124: ST_TO_ADDR
// hc_gallery :=  ;
63125: LD_ADDR_OWVAR 33
63129: PUSH
63130: LD_STRING 
63132: ST_TO_ADDR
// animal := CreateHuman ;
63133: LD_ADDR_VAR 0 12
63137: PUSH
63138: CALL_OW 44
63142: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63143: LD_VAR 0 12
63147: PPUSH
63148: LD_VAR 0 8
63152: PPUSH
63153: LD_INT 0
63155: PPUSH
63156: CALL 65162 0 3
// end ;
63160: GO 63114
63162: POP
63163: POP
// if birds then
63164: LD_VAR 0 1
63168: IFFALSE 63235
// for i = 1 to birds do
63170: LD_ADDR_VAR 0 11
63174: PUSH
63175: DOUBLE
63176: LD_INT 1
63178: DEC
63179: ST_TO_ADDR
63180: LD_VAR 0 1
63184: PUSH
63185: FOR_TO
63186: IFFALSE 63233
// begin hc_class = 18 ;
63188: LD_ADDR_OWVAR 28
63192: PUSH
63193: LD_INT 18
63195: ST_TO_ADDR
// hc_gallery =  ;
63196: LD_ADDR_OWVAR 33
63200: PUSH
63201: LD_STRING 
63203: ST_TO_ADDR
// animal := CreateHuman ;
63204: LD_ADDR_VAR 0 12
63208: PUSH
63209: CALL_OW 44
63213: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63214: LD_VAR 0 12
63218: PPUSH
63219: LD_VAR 0 8
63223: PPUSH
63224: LD_INT 0
63226: PPUSH
63227: CALL 65162 0 3
// end ;
63231: GO 63185
63233: POP
63234: POP
// if tigers then
63235: LD_VAR 0 2
63239: IFFALSE 63323
// for i = 1 to tigers do
63241: LD_ADDR_VAR 0 11
63245: PUSH
63246: DOUBLE
63247: LD_INT 1
63249: DEC
63250: ST_TO_ADDR
63251: LD_VAR 0 2
63255: PUSH
63256: FOR_TO
63257: IFFALSE 63321
// begin hc_class = class_tiger ;
63259: LD_ADDR_OWVAR 28
63263: PUSH
63264: LD_INT 14
63266: ST_TO_ADDR
// hc_gallery =  ;
63267: LD_ADDR_OWVAR 33
63271: PUSH
63272: LD_STRING 
63274: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63275: LD_ADDR_OWVAR 35
63279: PUSH
63280: LD_INT 7
63282: NEG
63283: PPUSH
63284: LD_INT 7
63286: PPUSH
63287: CALL_OW 12
63291: ST_TO_ADDR
// animal := CreateHuman ;
63292: LD_ADDR_VAR 0 12
63296: PUSH
63297: CALL_OW 44
63301: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63302: LD_VAR 0 12
63306: PPUSH
63307: LD_VAR 0 8
63311: PPUSH
63312: LD_INT 0
63314: PPUSH
63315: CALL 65162 0 3
// end ;
63319: GO 63256
63321: POP
63322: POP
// if apemans then
63323: LD_VAR 0 3
63327: IFFALSE 63450
// for i = 1 to apemans do
63329: LD_ADDR_VAR 0 11
63333: PUSH
63334: DOUBLE
63335: LD_INT 1
63337: DEC
63338: ST_TO_ADDR
63339: LD_VAR 0 3
63343: PUSH
63344: FOR_TO
63345: IFFALSE 63448
// begin hc_class = class_apeman ;
63347: LD_ADDR_OWVAR 28
63351: PUSH
63352: LD_INT 12
63354: ST_TO_ADDR
// hc_gallery =  ;
63355: LD_ADDR_OWVAR 33
63359: PUSH
63360: LD_STRING 
63362: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
63363: LD_ADDR_OWVAR 35
63367: PUSH
63368: LD_INT 5
63370: NEG
63371: PPUSH
63372: LD_INT 5
63374: PPUSH
63375: CALL_OW 12
63379: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63380: LD_ADDR_OWVAR 31
63384: PUSH
63385: LD_INT 1
63387: PPUSH
63388: LD_INT 3
63390: PPUSH
63391: CALL_OW 12
63395: PUSH
63396: LD_INT 1
63398: PPUSH
63399: LD_INT 3
63401: PPUSH
63402: CALL_OW 12
63406: PUSH
63407: LD_INT 0
63409: PUSH
63410: LD_INT 0
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: ST_TO_ADDR
// animal := CreateHuman ;
63419: LD_ADDR_VAR 0 12
63423: PUSH
63424: CALL_OW 44
63428: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63429: LD_VAR 0 12
63433: PPUSH
63434: LD_VAR 0 8
63438: PPUSH
63439: LD_INT 0
63441: PPUSH
63442: CALL 65162 0 3
// end ;
63446: GO 63344
63448: POP
63449: POP
// if enchidnas then
63450: LD_VAR 0 4
63454: IFFALSE 63521
// for i = 1 to enchidnas do
63456: LD_ADDR_VAR 0 11
63460: PUSH
63461: DOUBLE
63462: LD_INT 1
63464: DEC
63465: ST_TO_ADDR
63466: LD_VAR 0 4
63470: PUSH
63471: FOR_TO
63472: IFFALSE 63519
// begin hc_class = 13 ;
63474: LD_ADDR_OWVAR 28
63478: PUSH
63479: LD_INT 13
63481: ST_TO_ADDR
// hc_gallery =  ;
63482: LD_ADDR_OWVAR 33
63486: PUSH
63487: LD_STRING 
63489: ST_TO_ADDR
// animal := CreateHuman ;
63490: LD_ADDR_VAR 0 12
63494: PUSH
63495: CALL_OW 44
63499: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63500: LD_VAR 0 12
63504: PPUSH
63505: LD_VAR 0 8
63509: PPUSH
63510: LD_INT 0
63512: PPUSH
63513: CALL 65162 0 3
// end ;
63517: GO 63471
63519: POP
63520: POP
// if fishes then
63521: LD_VAR 0 7
63525: IFFALSE 63592
// for i = 1 to fishes do
63527: LD_ADDR_VAR 0 11
63531: PUSH
63532: DOUBLE
63533: LD_INT 1
63535: DEC
63536: ST_TO_ADDR
63537: LD_VAR 0 7
63541: PUSH
63542: FOR_TO
63543: IFFALSE 63590
// begin hc_class = 20 ;
63545: LD_ADDR_OWVAR 28
63549: PUSH
63550: LD_INT 20
63552: ST_TO_ADDR
// hc_gallery =  ;
63553: LD_ADDR_OWVAR 33
63557: PUSH
63558: LD_STRING 
63560: ST_TO_ADDR
// animal := CreateHuman ;
63561: LD_ADDR_VAR 0 12
63565: PUSH
63566: CALL_OW 44
63570: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63571: LD_VAR 0 12
63575: PPUSH
63576: LD_VAR 0 9
63580: PPUSH
63581: LD_INT 0
63583: PPUSH
63584: CALL 65162 0 3
// end ;
63588: GO 63542
63590: POP
63591: POP
// end ;
63592: LD_VAR 0 10
63596: RET
// export function WantHeal ( sci , unit ) ; begin
63597: LD_INT 0
63599: PPUSH
// if GetTaskList ( sci ) > 0 then
63600: LD_VAR 0 1
63604: PPUSH
63605: CALL_OW 437
63609: PUSH
63610: LD_INT 0
63612: GREATER
63613: IFFALSE 63683
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63615: LD_VAR 0 1
63619: PPUSH
63620: CALL_OW 437
63624: PUSH
63625: LD_INT 1
63627: ARRAY
63628: PUSH
63629: LD_INT 1
63631: ARRAY
63632: PUSH
63633: LD_STRING l
63635: EQUAL
63636: PUSH
63637: LD_VAR 0 1
63641: PPUSH
63642: CALL_OW 437
63646: PUSH
63647: LD_INT 1
63649: ARRAY
63650: PUSH
63651: LD_INT 4
63653: ARRAY
63654: PUSH
63655: LD_VAR 0 2
63659: EQUAL
63660: AND
63661: IFFALSE 63673
// result := true else
63663: LD_ADDR_VAR 0 3
63667: PUSH
63668: LD_INT 1
63670: ST_TO_ADDR
63671: GO 63681
// result := false ;
63673: LD_ADDR_VAR 0 3
63677: PUSH
63678: LD_INT 0
63680: ST_TO_ADDR
// end else
63681: GO 63691
// result := false ;
63683: LD_ADDR_VAR 0 3
63687: PUSH
63688: LD_INT 0
63690: ST_TO_ADDR
// end ;
63691: LD_VAR 0 3
63695: RET
// export function HealTarget ( sci ) ; begin
63696: LD_INT 0
63698: PPUSH
// if not sci then
63699: LD_VAR 0 1
63703: NOT
63704: IFFALSE 63708
// exit ;
63706: GO 63773
// result := 0 ;
63708: LD_ADDR_VAR 0 2
63712: PUSH
63713: LD_INT 0
63715: ST_TO_ADDR
// if GetTaskList ( sci ) then
63716: LD_VAR 0 1
63720: PPUSH
63721: CALL_OW 437
63725: IFFALSE 63773
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63727: LD_VAR 0 1
63731: PPUSH
63732: CALL_OW 437
63736: PUSH
63737: LD_INT 1
63739: ARRAY
63740: PUSH
63741: LD_INT 1
63743: ARRAY
63744: PUSH
63745: LD_STRING l
63747: EQUAL
63748: IFFALSE 63773
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63750: LD_ADDR_VAR 0 2
63754: PUSH
63755: LD_VAR 0 1
63759: PPUSH
63760: CALL_OW 437
63764: PUSH
63765: LD_INT 1
63767: ARRAY
63768: PUSH
63769: LD_INT 4
63771: ARRAY
63772: ST_TO_ADDR
// end ;
63773: LD_VAR 0 2
63777: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63778: LD_INT 0
63780: PPUSH
63781: PPUSH
63782: PPUSH
63783: PPUSH
// if not base_units then
63784: LD_VAR 0 1
63788: NOT
63789: IFFALSE 63793
// exit ;
63791: GO 63880
// result := false ;
63793: LD_ADDR_VAR 0 2
63797: PUSH
63798: LD_INT 0
63800: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63801: LD_ADDR_VAR 0 5
63805: PUSH
63806: LD_VAR 0 1
63810: PPUSH
63811: LD_INT 21
63813: PUSH
63814: LD_INT 3
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PPUSH
63821: CALL_OW 72
63825: ST_TO_ADDR
// if not tmp then
63826: LD_VAR 0 5
63830: NOT
63831: IFFALSE 63835
// exit ;
63833: GO 63880
// for i in tmp do
63835: LD_ADDR_VAR 0 3
63839: PUSH
63840: LD_VAR 0 5
63844: PUSH
63845: FOR_IN
63846: IFFALSE 63878
// begin result := EnemyInRange ( i , 22 ) ;
63848: LD_ADDR_VAR 0 2
63852: PUSH
63853: LD_VAR 0 3
63857: PPUSH
63858: LD_INT 22
63860: PPUSH
63861: CALL 62116 0 2
63865: ST_TO_ADDR
// if result then
63866: LD_VAR 0 2
63870: IFFALSE 63876
// exit ;
63872: POP
63873: POP
63874: GO 63880
// end ;
63876: GO 63845
63878: POP
63879: POP
// end ;
63880: LD_VAR 0 2
63884: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
63885: LD_INT 0
63887: PPUSH
63888: PPUSH
// if not units then
63889: LD_VAR 0 1
63893: NOT
63894: IFFALSE 63898
// exit ;
63896: GO 63968
// result := [ ] ;
63898: LD_ADDR_VAR 0 3
63902: PUSH
63903: EMPTY
63904: ST_TO_ADDR
// for i in units do
63905: LD_ADDR_VAR 0 4
63909: PUSH
63910: LD_VAR 0 1
63914: PUSH
63915: FOR_IN
63916: IFFALSE 63966
// if GetTag ( i ) = tag then
63918: LD_VAR 0 4
63922: PPUSH
63923: CALL_OW 110
63927: PUSH
63928: LD_VAR 0 2
63932: EQUAL
63933: IFFALSE 63964
// result := Insert ( result , result + 1 , i ) ;
63935: LD_ADDR_VAR 0 3
63939: PUSH
63940: LD_VAR 0 3
63944: PPUSH
63945: LD_VAR 0 3
63949: PUSH
63950: LD_INT 1
63952: PLUS
63953: PPUSH
63954: LD_VAR 0 4
63958: PPUSH
63959: CALL_OW 2
63963: ST_TO_ADDR
63964: GO 63915
63966: POP
63967: POP
// end ;
63968: LD_VAR 0 3
63972: RET
// export function IsDriver ( un ) ; begin
63973: LD_INT 0
63975: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63976: LD_ADDR_VAR 0 2
63980: PUSH
63981: LD_VAR 0 1
63985: PUSH
63986: LD_INT 55
63988: PUSH
63989: EMPTY
63990: LIST
63991: PPUSH
63992: CALL_OW 69
63996: IN
63997: ST_TO_ADDR
// end ;
63998: LD_VAR 0 2
64002: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64003: LD_INT 0
64005: PPUSH
64006: PPUSH
// list := [ ] ;
64007: LD_ADDR_VAR 0 5
64011: PUSH
64012: EMPTY
64013: ST_TO_ADDR
// case d of 0 :
64014: LD_VAR 0 3
64018: PUSH
64019: LD_INT 0
64021: DOUBLE
64022: EQUAL
64023: IFTRUE 64027
64025: GO 64160
64027: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64028: LD_ADDR_VAR 0 5
64032: PUSH
64033: LD_VAR 0 1
64037: PUSH
64038: LD_INT 4
64040: MINUS
64041: PUSH
64042: LD_VAR 0 2
64046: PUSH
64047: LD_INT 4
64049: MINUS
64050: PUSH
64051: LD_INT 2
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: LIST
64058: PUSH
64059: LD_VAR 0 1
64063: PUSH
64064: LD_INT 3
64066: MINUS
64067: PUSH
64068: LD_VAR 0 2
64072: PUSH
64073: LD_INT 1
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: LIST
64080: PUSH
64081: LD_VAR 0 1
64085: PUSH
64086: LD_INT 4
64088: PLUS
64089: PUSH
64090: LD_VAR 0 2
64094: PUSH
64095: LD_INT 4
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: LIST
64102: PUSH
64103: LD_VAR 0 1
64107: PUSH
64108: LD_INT 3
64110: PLUS
64111: PUSH
64112: LD_VAR 0 2
64116: PUSH
64117: LD_INT 3
64119: PLUS
64120: PUSH
64121: LD_INT 5
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: LIST
64128: PUSH
64129: LD_VAR 0 1
64133: PUSH
64134: LD_VAR 0 2
64138: PUSH
64139: LD_INT 4
64141: PLUS
64142: PUSH
64143: LD_INT 0
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: LIST
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: ST_TO_ADDR
// end ; 1 :
64158: GO 64858
64160: LD_INT 1
64162: DOUBLE
64163: EQUAL
64164: IFTRUE 64168
64166: GO 64301
64168: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64169: LD_ADDR_VAR 0 5
64173: PUSH
64174: LD_VAR 0 1
64178: PUSH
64179: LD_VAR 0 2
64183: PUSH
64184: LD_INT 4
64186: MINUS
64187: PUSH
64188: LD_INT 3
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: LIST
64195: PUSH
64196: LD_VAR 0 1
64200: PUSH
64201: LD_INT 3
64203: MINUS
64204: PUSH
64205: LD_VAR 0 2
64209: PUSH
64210: LD_INT 3
64212: MINUS
64213: PUSH
64214: LD_INT 2
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: LIST
64221: PUSH
64222: LD_VAR 0 1
64226: PUSH
64227: LD_INT 4
64229: MINUS
64230: PUSH
64231: LD_VAR 0 2
64235: PUSH
64236: LD_INT 1
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: LIST
64243: PUSH
64244: LD_VAR 0 1
64248: PUSH
64249: LD_VAR 0 2
64253: PUSH
64254: LD_INT 3
64256: PLUS
64257: PUSH
64258: LD_INT 0
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: LIST
64265: PUSH
64266: LD_VAR 0 1
64270: PUSH
64271: LD_INT 4
64273: PLUS
64274: PUSH
64275: LD_VAR 0 2
64279: PUSH
64280: LD_INT 4
64282: PLUS
64283: PUSH
64284: LD_INT 5
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: LIST
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: ST_TO_ADDR
// end ; 2 :
64299: GO 64858
64301: LD_INT 2
64303: DOUBLE
64304: EQUAL
64305: IFTRUE 64309
64307: GO 64438
64309: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64310: LD_ADDR_VAR 0 5
64314: PUSH
64315: LD_VAR 0 1
64319: PUSH
64320: LD_VAR 0 2
64324: PUSH
64325: LD_INT 3
64327: MINUS
64328: PUSH
64329: LD_INT 3
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: LIST
64336: PUSH
64337: LD_VAR 0 1
64341: PUSH
64342: LD_INT 4
64344: PLUS
64345: PUSH
64346: LD_VAR 0 2
64350: PUSH
64351: LD_INT 4
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: LIST
64358: PUSH
64359: LD_VAR 0 1
64363: PUSH
64364: LD_VAR 0 2
64368: PUSH
64369: LD_INT 4
64371: PLUS
64372: PUSH
64373: LD_INT 0
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: LIST
64380: PUSH
64381: LD_VAR 0 1
64385: PUSH
64386: LD_INT 3
64388: MINUS
64389: PUSH
64390: LD_VAR 0 2
64394: PUSH
64395: LD_INT 1
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: LIST
64402: PUSH
64403: LD_VAR 0 1
64407: PUSH
64408: LD_INT 4
64410: MINUS
64411: PUSH
64412: LD_VAR 0 2
64416: PUSH
64417: LD_INT 4
64419: MINUS
64420: PUSH
64421: LD_INT 2
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: LIST
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: ST_TO_ADDR
// end ; 3 :
64436: GO 64858
64438: LD_INT 3
64440: DOUBLE
64441: EQUAL
64442: IFTRUE 64446
64444: GO 64579
64446: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64447: LD_ADDR_VAR 0 5
64451: PUSH
64452: LD_VAR 0 1
64456: PUSH
64457: LD_INT 3
64459: PLUS
64460: PUSH
64461: LD_VAR 0 2
64465: PUSH
64466: LD_INT 4
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: LIST
64473: PUSH
64474: LD_VAR 0 1
64478: PUSH
64479: LD_INT 4
64481: PLUS
64482: PUSH
64483: LD_VAR 0 2
64487: PUSH
64488: LD_INT 4
64490: PLUS
64491: PUSH
64492: LD_INT 5
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: LIST
64499: PUSH
64500: LD_VAR 0 1
64504: PUSH
64505: LD_INT 4
64507: MINUS
64508: PUSH
64509: LD_VAR 0 2
64513: PUSH
64514: LD_INT 1
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: LIST
64521: PUSH
64522: LD_VAR 0 1
64526: PUSH
64527: LD_VAR 0 2
64531: PUSH
64532: LD_INT 4
64534: MINUS
64535: PUSH
64536: LD_INT 3
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: LIST
64543: PUSH
64544: LD_VAR 0 1
64548: PUSH
64549: LD_INT 3
64551: MINUS
64552: PUSH
64553: LD_VAR 0 2
64557: PUSH
64558: LD_INT 3
64560: MINUS
64561: PUSH
64562: LD_INT 2
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: LIST
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: ST_TO_ADDR
// end ; 4 :
64577: GO 64858
64579: LD_INT 4
64581: DOUBLE
64582: EQUAL
64583: IFTRUE 64587
64585: GO 64720
64587: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64588: LD_ADDR_VAR 0 5
64592: PUSH
64593: LD_VAR 0 1
64597: PUSH
64598: LD_VAR 0 2
64602: PUSH
64603: LD_INT 4
64605: PLUS
64606: PUSH
64607: LD_INT 0
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: LIST
64614: PUSH
64615: LD_VAR 0 1
64619: PUSH
64620: LD_INT 3
64622: PLUS
64623: PUSH
64624: LD_VAR 0 2
64628: PUSH
64629: LD_INT 3
64631: PLUS
64632: PUSH
64633: LD_INT 5
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: LIST
64640: PUSH
64641: LD_VAR 0 1
64645: PUSH
64646: LD_INT 4
64648: PLUS
64649: PUSH
64650: LD_VAR 0 2
64654: PUSH
64655: LD_INT 4
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: LIST
64662: PUSH
64663: LD_VAR 0 1
64667: PUSH
64668: LD_VAR 0 2
64672: PUSH
64673: LD_INT 3
64675: MINUS
64676: PUSH
64677: LD_INT 3
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: LIST
64684: PUSH
64685: LD_VAR 0 1
64689: PUSH
64690: LD_INT 4
64692: MINUS
64693: PUSH
64694: LD_VAR 0 2
64698: PUSH
64699: LD_INT 4
64701: MINUS
64702: PUSH
64703: LD_INT 2
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: LIST
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: ST_TO_ADDR
// end ; 5 :
64718: GO 64858
64720: LD_INT 5
64722: DOUBLE
64723: EQUAL
64724: IFTRUE 64728
64726: GO 64857
64728: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64729: LD_ADDR_VAR 0 5
64733: PUSH
64734: LD_VAR 0 1
64738: PUSH
64739: LD_INT 4
64741: MINUS
64742: PUSH
64743: LD_VAR 0 2
64747: PUSH
64748: LD_INT 1
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: LIST
64755: PUSH
64756: LD_VAR 0 1
64760: PUSH
64761: LD_VAR 0 2
64765: PUSH
64766: LD_INT 4
64768: MINUS
64769: PUSH
64770: LD_INT 3
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: LIST
64777: PUSH
64778: LD_VAR 0 1
64782: PUSH
64783: LD_INT 4
64785: PLUS
64786: PUSH
64787: LD_VAR 0 2
64791: PUSH
64792: LD_INT 4
64794: PLUS
64795: PUSH
64796: LD_INT 5
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: LIST
64803: PUSH
64804: LD_VAR 0 1
64808: PUSH
64809: LD_INT 3
64811: PLUS
64812: PUSH
64813: LD_VAR 0 2
64817: PUSH
64818: LD_INT 4
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: LIST
64825: PUSH
64826: LD_VAR 0 1
64830: PUSH
64831: LD_VAR 0 2
64835: PUSH
64836: LD_INT 3
64838: PLUS
64839: PUSH
64840: LD_INT 0
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: LIST
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: ST_TO_ADDR
// end ; end ;
64855: GO 64858
64857: POP
// result := list ;
64858: LD_ADDR_VAR 0 4
64862: PUSH
64863: LD_VAR 0 5
64867: ST_TO_ADDR
// end ;
64868: LD_VAR 0 4
64872: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64873: LD_INT 0
64875: PPUSH
64876: PPUSH
64877: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64878: LD_VAR 0 1
64882: NOT
64883: PUSH
64884: LD_VAR 0 2
64888: PUSH
64889: LD_INT 1
64891: PUSH
64892: LD_INT 2
64894: PUSH
64895: LD_INT 3
64897: PUSH
64898: LD_INT 4
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: IN
64907: NOT
64908: OR
64909: IFFALSE 64913
// exit ;
64911: GO 65005
// tmp := [ ] ;
64913: LD_ADDR_VAR 0 5
64917: PUSH
64918: EMPTY
64919: ST_TO_ADDR
// for i in units do
64920: LD_ADDR_VAR 0 4
64924: PUSH
64925: LD_VAR 0 1
64929: PUSH
64930: FOR_IN
64931: IFFALSE 64974
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64933: LD_ADDR_VAR 0 5
64937: PUSH
64938: LD_VAR 0 5
64942: PPUSH
64943: LD_VAR 0 5
64947: PUSH
64948: LD_INT 1
64950: PLUS
64951: PPUSH
64952: LD_VAR 0 4
64956: PPUSH
64957: LD_VAR 0 2
64961: PPUSH
64962: CALL_OW 259
64966: PPUSH
64967: CALL_OW 2
64971: ST_TO_ADDR
64972: GO 64930
64974: POP
64975: POP
// if not tmp then
64976: LD_VAR 0 5
64980: NOT
64981: IFFALSE 64985
// exit ;
64983: GO 65005
// result := SortListByListDesc ( units , tmp ) ;
64985: LD_ADDR_VAR 0 3
64989: PUSH
64990: LD_VAR 0 1
64994: PPUSH
64995: LD_VAR 0 5
64999: PPUSH
65000: CALL_OW 77
65004: ST_TO_ADDR
// end ;
65005: LD_VAR 0 3
65009: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65010: LD_INT 0
65012: PPUSH
65013: PPUSH
65014: PPUSH
// x := GetX ( building ) ;
65015: LD_ADDR_VAR 0 4
65019: PUSH
65020: LD_VAR 0 2
65024: PPUSH
65025: CALL_OW 250
65029: ST_TO_ADDR
// y := GetY ( building ) ;
65030: LD_ADDR_VAR 0 5
65034: PUSH
65035: LD_VAR 0 2
65039: PPUSH
65040: CALL_OW 251
65044: ST_TO_ADDR
// if GetTaskList ( unit ) then
65045: LD_VAR 0 1
65049: PPUSH
65050: CALL_OW 437
65054: IFFALSE 65149
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65056: LD_STRING e
65058: PUSH
65059: LD_VAR 0 1
65063: PPUSH
65064: CALL_OW 437
65068: PUSH
65069: LD_INT 1
65071: ARRAY
65072: PUSH
65073: LD_INT 1
65075: ARRAY
65076: EQUAL
65077: PUSH
65078: LD_VAR 0 4
65082: PUSH
65083: LD_VAR 0 1
65087: PPUSH
65088: CALL_OW 437
65092: PUSH
65093: LD_INT 1
65095: ARRAY
65096: PUSH
65097: LD_INT 2
65099: ARRAY
65100: EQUAL
65101: AND
65102: PUSH
65103: LD_VAR 0 5
65107: PUSH
65108: LD_VAR 0 1
65112: PPUSH
65113: CALL_OW 437
65117: PUSH
65118: LD_INT 1
65120: ARRAY
65121: PUSH
65122: LD_INT 3
65124: ARRAY
65125: EQUAL
65126: AND
65127: IFFALSE 65139
// result := true else
65129: LD_ADDR_VAR 0 3
65133: PUSH
65134: LD_INT 1
65136: ST_TO_ADDR
65137: GO 65147
// result := false ;
65139: LD_ADDR_VAR 0 3
65143: PUSH
65144: LD_INT 0
65146: ST_TO_ADDR
// end else
65147: GO 65157
// result := false ;
65149: LD_ADDR_VAR 0 3
65153: PUSH
65154: LD_INT 0
65156: ST_TO_ADDR
// end ;
65157: LD_VAR 0 3
65161: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65162: LD_INT 0
65164: PPUSH
65165: PPUSH
65166: PPUSH
65167: PPUSH
// if not unit or not area then
65168: LD_VAR 0 1
65172: NOT
65173: PUSH
65174: LD_VAR 0 2
65178: NOT
65179: OR
65180: IFFALSE 65184
// exit ;
65182: GO 65348
// tmp := AreaToList ( area , i ) ;
65184: LD_ADDR_VAR 0 6
65188: PUSH
65189: LD_VAR 0 2
65193: PPUSH
65194: LD_VAR 0 5
65198: PPUSH
65199: CALL_OW 517
65203: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65204: LD_ADDR_VAR 0 5
65208: PUSH
65209: DOUBLE
65210: LD_INT 1
65212: DEC
65213: ST_TO_ADDR
65214: LD_VAR 0 6
65218: PUSH
65219: LD_INT 1
65221: ARRAY
65222: PUSH
65223: FOR_TO
65224: IFFALSE 65346
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65226: LD_ADDR_VAR 0 7
65230: PUSH
65231: LD_VAR 0 6
65235: PUSH
65236: LD_INT 1
65238: ARRAY
65239: PUSH
65240: LD_VAR 0 5
65244: ARRAY
65245: PUSH
65246: LD_VAR 0 6
65250: PUSH
65251: LD_INT 2
65253: ARRAY
65254: PUSH
65255: LD_VAR 0 5
65259: ARRAY
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65265: LD_VAR 0 7
65269: PUSH
65270: LD_INT 1
65272: ARRAY
65273: PPUSH
65274: LD_VAR 0 7
65278: PUSH
65279: LD_INT 2
65281: ARRAY
65282: PPUSH
65283: CALL_OW 428
65287: PUSH
65288: LD_INT 0
65290: EQUAL
65291: IFFALSE 65344
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65293: LD_VAR 0 1
65297: PPUSH
65298: LD_VAR 0 7
65302: PUSH
65303: LD_INT 1
65305: ARRAY
65306: PPUSH
65307: LD_VAR 0 7
65311: PUSH
65312: LD_INT 2
65314: ARRAY
65315: PPUSH
65316: LD_VAR 0 3
65320: PPUSH
65321: CALL_OW 48
// result := IsPlaced ( unit ) ;
65325: LD_ADDR_VAR 0 4
65329: PUSH
65330: LD_VAR 0 1
65334: PPUSH
65335: CALL_OW 305
65339: ST_TO_ADDR
// exit ;
65340: POP
65341: POP
65342: GO 65348
// end ; end ;
65344: GO 65223
65346: POP
65347: POP
// end ;
65348: LD_VAR 0 4
65352: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65353: LD_INT 0
65355: PPUSH
65356: PPUSH
65357: PPUSH
// if not side or side > 8 then
65358: LD_VAR 0 1
65362: NOT
65363: PUSH
65364: LD_VAR 0 1
65368: PUSH
65369: LD_INT 8
65371: GREATER
65372: OR
65373: IFFALSE 65377
// exit ;
65375: GO 65564
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65377: LD_ADDR_VAR 0 4
65381: PUSH
65382: LD_INT 22
65384: PUSH
65385: LD_VAR 0 1
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: PUSH
65394: LD_INT 21
65396: PUSH
65397: LD_INT 3
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PPUSH
65408: CALL_OW 69
65412: ST_TO_ADDR
// if not tmp then
65413: LD_VAR 0 4
65417: NOT
65418: IFFALSE 65422
// exit ;
65420: GO 65564
// enable_addtolog := true ;
65422: LD_ADDR_OWVAR 81
65426: PUSH
65427: LD_INT 1
65429: ST_TO_ADDR
// AddToLog ( [ ) ;
65430: LD_STRING [
65432: PPUSH
65433: CALL_OW 561
// for i in tmp do
65437: LD_ADDR_VAR 0 3
65441: PUSH
65442: LD_VAR 0 4
65446: PUSH
65447: FOR_IN
65448: IFFALSE 65555
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65450: LD_STRING [
65452: PUSH
65453: LD_VAR 0 3
65457: PPUSH
65458: CALL_OW 266
65462: STR
65463: PUSH
65464: LD_STRING , 
65466: STR
65467: PUSH
65468: LD_VAR 0 3
65472: PPUSH
65473: CALL_OW 250
65477: STR
65478: PUSH
65479: LD_STRING , 
65481: STR
65482: PUSH
65483: LD_VAR 0 3
65487: PPUSH
65488: CALL_OW 251
65492: STR
65493: PUSH
65494: LD_STRING , 
65496: STR
65497: PUSH
65498: LD_VAR 0 3
65502: PPUSH
65503: CALL_OW 254
65507: STR
65508: PUSH
65509: LD_STRING , 
65511: STR
65512: PUSH
65513: LD_VAR 0 3
65517: PPUSH
65518: LD_INT 1
65520: PPUSH
65521: CALL_OW 268
65525: STR
65526: PUSH
65527: LD_STRING , 
65529: STR
65530: PUSH
65531: LD_VAR 0 3
65535: PPUSH
65536: LD_INT 2
65538: PPUSH
65539: CALL_OW 268
65543: STR
65544: PUSH
65545: LD_STRING ],
65547: STR
65548: PPUSH
65549: CALL_OW 561
// end ;
65553: GO 65447
65555: POP
65556: POP
// AddToLog ( ]; ) ;
65557: LD_STRING ];
65559: PPUSH
65560: CALL_OW 561
// end ;
65564: LD_VAR 0 2
65568: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65569: LD_INT 0
65571: PPUSH
65572: PPUSH
65573: PPUSH
65574: PPUSH
65575: PPUSH
// if not area or not rate or not max then
65576: LD_VAR 0 1
65580: NOT
65581: PUSH
65582: LD_VAR 0 2
65586: NOT
65587: OR
65588: PUSH
65589: LD_VAR 0 4
65593: NOT
65594: OR
65595: IFFALSE 65599
// exit ;
65597: GO 65791
// while 1 do
65599: LD_INT 1
65601: IFFALSE 65791
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65603: LD_ADDR_VAR 0 9
65607: PUSH
65608: LD_VAR 0 1
65612: PPUSH
65613: LD_INT 1
65615: PPUSH
65616: CALL_OW 287
65620: PUSH
65621: LD_INT 10
65623: MUL
65624: ST_TO_ADDR
// r := rate / 10 ;
65625: LD_ADDR_VAR 0 7
65629: PUSH
65630: LD_VAR 0 2
65634: PUSH
65635: LD_INT 10
65637: DIVREAL
65638: ST_TO_ADDR
// time := 1 1$00 ;
65639: LD_ADDR_VAR 0 8
65643: PUSH
65644: LD_INT 2100
65646: ST_TO_ADDR
// if amount < min then
65647: LD_VAR 0 9
65651: PUSH
65652: LD_VAR 0 3
65656: LESS
65657: IFFALSE 65675
// r := r * 2 else
65659: LD_ADDR_VAR 0 7
65663: PUSH
65664: LD_VAR 0 7
65668: PUSH
65669: LD_INT 2
65671: MUL
65672: ST_TO_ADDR
65673: GO 65701
// if amount > max then
65675: LD_VAR 0 9
65679: PUSH
65680: LD_VAR 0 4
65684: GREATER
65685: IFFALSE 65701
// r := r / 2 ;
65687: LD_ADDR_VAR 0 7
65691: PUSH
65692: LD_VAR 0 7
65696: PUSH
65697: LD_INT 2
65699: DIVREAL
65700: ST_TO_ADDR
// time := time / r ;
65701: LD_ADDR_VAR 0 8
65705: PUSH
65706: LD_VAR 0 8
65710: PUSH
65711: LD_VAR 0 7
65715: DIVREAL
65716: ST_TO_ADDR
// if time < 0 then
65717: LD_VAR 0 8
65721: PUSH
65722: LD_INT 0
65724: LESS
65725: IFFALSE 65742
// time := time * - 1 ;
65727: LD_ADDR_VAR 0 8
65731: PUSH
65732: LD_VAR 0 8
65736: PUSH
65737: LD_INT 1
65739: NEG
65740: MUL
65741: ST_TO_ADDR
// wait ( time ) ;
65742: LD_VAR 0 8
65746: PPUSH
65747: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
65751: LD_INT 35
65753: PPUSH
65754: LD_INT 875
65756: PPUSH
65757: CALL_OW 12
65761: PPUSH
65762: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65766: LD_INT 1
65768: PPUSH
65769: LD_INT 5
65771: PPUSH
65772: CALL_OW 12
65776: PPUSH
65777: LD_VAR 0 1
65781: PPUSH
65782: LD_INT 1
65784: PPUSH
65785: CALL_OW 55
// end ;
65789: GO 65599
// end ;
65791: LD_VAR 0 5
65795: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65796: LD_INT 0
65798: PPUSH
65799: PPUSH
65800: PPUSH
65801: PPUSH
65802: PPUSH
65803: PPUSH
65804: PPUSH
65805: PPUSH
// if not turrets or not factories then
65806: LD_VAR 0 1
65810: NOT
65811: PUSH
65812: LD_VAR 0 2
65816: NOT
65817: OR
65818: IFFALSE 65822
// exit ;
65820: GO 66129
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65822: LD_ADDR_VAR 0 10
65826: PUSH
65827: LD_INT 5
65829: PUSH
65830: LD_INT 6
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 2
65839: PUSH
65840: LD_INT 4
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 3
65849: PUSH
65850: LD_INT 5
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 24
65864: PUSH
65865: LD_INT 25
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 23
65874: PUSH
65875: LD_INT 27
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: LD_INT 42
65888: PUSH
65889: LD_INT 43
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 44
65898: PUSH
65899: LD_INT 46
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: LD_INT 45
65908: PUSH
65909: LD_INT 47
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: LIST
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: LIST
65925: ST_TO_ADDR
// result := [ ] ;
65926: LD_ADDR_VAR 0 3
65930: PUSH
65931: EMPTY
65932: ST_TO_ADDR
// for i in turrets do
65933: LD_ADDR_VAR 0 4
65937: PUSH
65938: LD_VAR 0 1
65942: PUSH
65943: FOR_IN
65944: IFFALSE 66127
// begin nat := GetNation ( i ) ;
65946: LD_ADDR_VAR 0 7
65950: PUSH
65951: LD_VAR 0 4
65955: PPUSH
65956: CALL_OW 248
65960: ST_TO_ADDR
// weapon := 0 ;
65961: LD_ADDR_VAR 0 8
65965: PUSH
65966: LD_INT 0
65968: ST_TO_ADDR
// if not nat then
65969: LD_VAR 0 7
65973: NOT
65974: IFFALSE 65978
// continue ;
65976: GO 65943
// for j in list [ nat ] do
65978: LD_ADDR_VAR 0 5
65982: PUSH
65983: LD_VAR 0 10
65987: PUSH
65988: LD_VAR 0 7
65992: ARRAY
65993: PUSH
65994: FOR_IN
65995: IFFALSE 66036
// if GetBWeapon ( i ) = j [ 1 ] then
65997: LD_VAR 0 4
66001: PPUSH
66002: CALL_OW 269
66006: PUSH
66007: LD_VAR 0 5
66011: PUSH
66012: LD_INT 1
66014: ARRAY
66015: EQUAL
66016: IFFALSE 66034
// begin weapon := j [ 2 ] ;
66018: LD_ADDR_VAR 0 8
66022: PUSH
66023: LD_VAR 0 5
66027: PUSH
66028: LD_INT 2
66030: ARRAY
66031: ST_TO_ADDR
// break ;
66032: GO 66036
// end ;
66034: GO 65994
66036: POP
66037: POP
// if not weapon then
66038: LD_VAR 0 8
66042: NOT
66043: IFFALSE 66047
// continue ;
66045: GO 65943
// for k in factories do
66047: LD_ADDR_VAR 0 6
66051: PUSH
66052: LD_VAR 0 2
66056: PUSH
66057: FOR_IN
66058: IFFALSE 66123
// begin weapons := AvailableWeaponList ( k ) ;
66060: LD_ADDR_VAR 0 9
66064: PUSH
66065: LD_VAR 0 6
66069: PPUSH
66070: CALL_OW 478
66074: ST_TO_ADDR
// if not weapons then
66075: LD_VAR 0 9
66079: NOT
66080: IFFALSE 66084
// continue ;
66082: GO 66057
// if weapon in weapons then
66084: LD_VAR 0 8
66088: PUSH
66089: LD_VAR 0 9
66093: IN
66094: IFFALSE 66121
// begin result := [ i , weapon ] ;
66096: LD_ADDR_VAR 0 3
66100: PUSH
66101: LD_VAR 0 4
66105: PUSH
66106: LD_VAR 0 8
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: ST_TO_ADDR
// exit ;
66115: POP
66116: POP
66117: POP
66118: POP
66119: GO 66129
// end ; end ;
66121: GO 66057
66123: POP
66124: POP
// end ;
66125: GO 65943
66127: POP
66128: POP
// end ;
66129: LD_VAR 0 3
66133: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66134: LD_INT 0
66136: PPUSH
// if not side or side > 8 then
66137: LD_VAR 0 3
66141: NOT
66142: PUSH
66143: LD_VAR 0 3
66147: PUSH
66148: LD_INT 8
66150: GREATER
66151: OR
66152: IFFALSE 66156
// exit ;
66154: GO 66215
// if not range then
66156: LD_VAR 0 4
66160: NOT
66161: IFFALSE 66172
// range := - 12 ;
66163: LD_ADDR_VAR 0 4
66167: PUSH
66168: LD_INT 12
66170: NEG
66171: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66172: LD_VAR 0 1
66176: PPUSH
66177: LD_VAR 0 2
66181: PPUSH
66182: LD_VAR 0 3
66186: PPUSH
66187: LD_VAR 0 4
66191: PPUSH
66192: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66196: LD_VAR 0 1
66200: PPUSH
66201: LD_VAR 0 2
66205: PPUSH
66206: LD_VAR 0 3
66210: PPUSH
66211: CALL_OW 331
// end ;
66215: LD_VAR 0 5
66219: RET
// export function Video ( mode ) ; begin
66220: LD_INT 0
66222: PPUSH
// ingame_video = mode ;
66223: LD_ADDR_OWVAR 52
66227: PUSH
66228: LD_VAR 0 1
66232: ST_TO_ADDR
// interface_hidden = mode ;
66233: LD_ADDR_OWVAR 54
66237: PUSH
66238: LD_VAR 0 1
66242: ST_TO_ADDR
// end ;
66243: LD_VAR 0 2
66247: RET
// export function Join ( array , element ) ; begin
66248: LD_INT 0
66250: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66251: LD_ADDR_VAR 0 3
66255: PUSH
66256: LD_VAR 0 1
66260: PPUSH
66261: LD_VAR 0 1
66265: PUSH
66266: LD_INT 1
66268: PLUS
66269: PPUSH
66270: LD_VAR 0 2
66274: PPUSH
66275: CALL_OW 1
66279: ST_TO_ADDR
// end ;
66280: LD_VAR 0 3
66284: RET
// export function JoinUnion ( array , element ) ; begin
66285: LD_INT 0
66287: PPUSH
// result := array union element ;
66288: LD_ADDR_VAR 0 3
66292: PUSH
66293: LD_VAR 0 1
66297: PUSH
66298: LD_VAR 0 2
66302: UNION
66303: ST_TO_ADDR
// end ;
66304: LD_VAR 0 3
66308: RET
// export function GetBehemoths ( side ) ; begin
66309: LD_INT 0
66311: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66312: LD_ADDR_VAR 0 2
66316: PUSH
66317: LD_INT 22
66319: PUSH
66320: LD_VAR 0 1
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 31
66331: PUSH
66332: LD_INT 25
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: PPUSH
66343: CALL_OW 69
66347: ST_TO_ADDR
// end ;
66348: LD_VAR 0 2
66352: RET
// export function Shuffle ( array ) ; var i , index ; begin
66353: LD_INT 0
66355: PPUSH
66356: PPUSH
66357: PPUSH
// result := [ ] ;
66358: LD_ADDR_VAR 0 2
66362: PUSH
66363: EMPTY
66364: ST_TO_ADDR
// if not array then
66365: LD_VAR 0 1
66369: NOT
66370: IFFALSE 66374
// exit ;
66372: GO 66473
// Randomize ;
66374: CALL_OW 10
// for i = array downto 1 do
66378: LD_ADDR_VAR 0 3
66382: PUSH
66383: DOUBLE
66384: LD_VAR 0 1
66388: INC
66389: ST_TO_ADDR
66390: LD_INT 1
66392: PUSH
66393: FOR_DOWNTO
66394: IFFALSE 66471
// begin index := rand ( 1 , array ) ;
66396: LD_ADDR_VAR 0 4
66400: PUSH
66401: LD_INT 1
66403: PPUSH
66404: LD_VAR 0 1
66408: PPUSH
66409: CALL_OW 12
66413: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66414: LD_ADDR_VAR 0 2
66418: PUSH
66419: LD_VAR 0 2
66423: PPUSH
66424: LD_VAR 0 2
66428: PUSH
66429: LD_INT 1
66431: PLUS
66432: PPUSH
66433: LD_VAR 0 1
66437: PUSH
66438: LD_VAR 0 4
66442: ARRAY
66443: PPUSH
66444: CALL_OW 2
66448: ST_TO_ADDR
// array := Delete ( array , index ) ;
66449: LD_ADDR_VAR 0 1
66453: PUSH
66454: LD_VAR 0 1
66458: PPUSH
66459: LD_VAR 0 4
66463: PPUSH
66464: CALL_OW 3
66468: ST_TO_ADDR
// end ;
66469: GO 66393
66471: POP
66472: POP
// end ;
66473: LD_VAR 0 2
66477: RET
// export function GetBaseMaterials ( base ) ; begin
66478: LD_INT 0
66480: PPUSH
// result := [ 0 , 0 , 0 ] ;
66481: LD_ADDR_VAR 0 2
66485: PUSH
66486: LD_INT 0
66488: PUSH
66489: LD_INT 0
66491: PUSH
66492: LD_INT 0
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: LIST
66499: ST_TO_ADDR
// if not base then
66500: LD_VAR 0 1
66504: NOT
66505: IFFALSE 66509
// exit ;
66507: GO 66558
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66509: LD_ADDR_VAR 0 2
66513: PUSH
66514: LD_VAR 0 1
66518: PPUSH
66519: LD_INT 1
66521: PPUSH
66522: CALL_OW 275
66526: PUSH
66527: LD_VAR 0 1
66531: PPUSH
66532: LD_INT 2
66534: PPUSH
66535: CALL_OW 275
66539: PUSH
66540: LD_VAR 0 1
66544: PPUSH
66545: LD_INT 3
66547: PPUSH
66548: CALL_OW 275
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: LIST
66557: ST_TO_ADDR
// end ;
66558: LD_VAR 0 2
66562: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66563: LD_INT 0
66565: PPUSH
66566: PPUSH
// result := array ;
66567: LD_ADDR_VAR 0 3
66571: PUSH
66572: LD_VAR 0 1
66576: ST_TO_ADDR
// if size > 0 then
66577: LD_VAR 0 2
66581: PUSH
66582: LD_INT 0
66584: GREATER
66585: IFFALSE 66631
// for i := array downto size do
66587: LD_ADDR_VAR 0 4
66591: PUSH
66592: DOUBLE
66593: LD_VAR 0 1
66597: INC
66598: ST_TO_ADDR
66599: LD_VAR 0 2
66603: PUSH
66604: FOR_DOWNTO
66605: IFFALSE 66629
// result := Delete ( result , result ) ;
66607: LD_ADDR_VAR 0 3
66611: PUSH
66612: LD_VAR 0 3
66616: PPUSH
66617: LD_VAR 0 3
66621: PPUSH
66622: CALL_OW 3
66626: ST_TO_ADDR
66627: GO 66604
66629: POP
66630: POP
// end ;
66631: LD_VAR 0 3
66635: RET
// export function ComExit ( unit ) ; var tmp ; begin
66636: LD_INT 0
66638: PPUSH
66639: PPUSH
// if not IsInUnit ( unit ) then
66640: LD_VAR 0 1
66644: PPUSH
66645: CALL_OW 310
66649: NOT
66650: IFFALSE 66654
// exit ;
66652: GO 66714
// tmp := IsInUnit ( unit ) ;
66654: LD_ADDR_VAR 0 3
66658: PUSH
66659: LD_VAR 0 1
66663: PPUSH
66664: CALL_OW 310
66668: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66669: LD_VAR 0 3
66673: PPUSH
66674: CALL_OW 247
66678: PUSH
66679: LD_INT 2
66681: EQUAL
66682: IFFALSE 66695
// ComExitVehicle ( unit ) else
66684: LD_VAR 0 1
66688: PPUSH
66689: CALL_OW 121
66693: GO 66704
// ComExitBuilding ( unit ) ;
66695: LD_VAR 0 1
66699: PPUSH
66700: CALL_OW 122
// result := tmp ;
66704: LD_ADDR_VAR 0 2
66708: PUSH
66709: LD_VAR 0 3
66713: ST_TO_ADDR
// end ;
66714: LD_VAR 0 2
66718: RET
// export function ResetHc ; begin
66719: LD_INT 0
66721: PPUSH
// InitHc ;
66722: CALL_OW 19
// hc_importance := 0 ;
66726: LD_ADDR_OWVAR 32
66730: PUSH
66731: LD_INT 0
66733: ST_TO_ADDR
// end ;
66734: LD_VAR 0 1
66738: RET
