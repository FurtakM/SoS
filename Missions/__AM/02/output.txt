// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses , traitor ; export mission_prefix , debug ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 77 0 0
// if debug then
  19: LD_EXP 35
  23: IFFALSE 40
// begin Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// end ; PrepareDifficulty ;
  40: CALL 10811 0 0
// PrepareRussianCommander ;
  44: CALL 12347 0 0
// PrepareSouthBase ;
  48: CALL 12443 0 0
// PrepareNorthBase ;
  52: CALL 12781 0 0
// PrepareOtherRussians ;
  56: CALL 13176 0 0
// PrepareHeroes ;
  60: CALL 11132 0 0
// PrepareLisSquad ;
  64: CALL 11502 0 0
// PrepareOtherAmericans ;
  68: CALL 11817 0 0
// Action ;
  72: CALL 337 0 0
// end ;
  76: END
// function Init ; begin
  77: LD_INT 0
  79: PPUSH
// debug := false ;
  80: LD_ADDR_EXP 35
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// mission_prefix := 02_ ;
  88: LD_ADDR_EXP 34
  92: PUSH
  93: LD_STRING 02_
  95: ST_TO_ADDR
// RuSoldMinLevel := 0 ;
  96: LD_ADDR_EXP 13
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// RuSoldMaxLevel := 0 ;
 104: LD_ADDR_EXP 14
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// hpJMM := 0 ;
 112: LD_ADDR_EXP 10
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// hpBobby := 0 ;
 120: LD_ADDR_EXP 11
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// hpCyrus := 0 ;
 128: LD_ADDR_EXP 12
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// cargoEscape := 0 ;
 136: LD_ADDR_EXP 20
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// mikhailStatus := 0 ;
 144: LD_ADDR_EXP 21
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// mikhailInBase := 0 ;
 152: LD_ADDR_EXP 22
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// mikhailDepot := 0 ;
 160: LD_ADDR_EXP 23
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// tigersRespawn := 0 ;
 168: LD_ADDR_EXP 30
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// cargoRespawn := 0 ;
 176: LD_ADDR_EXP 28
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cargoSee := 0 ;
 184: LD_ADDR_EXP 29
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// lastBattle := 0 ;
 192: LD_ADDR_EXP 27
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// deadsCounter := 0 ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// spotCorpses := 0 ;
 208: LD_ADDR_EXP 32
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// southBaseDefenders := [ ] ;
 216: LD_ADDR_EXP 25
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// northBaseDefenders := [ ] ;
 223: LD_ADDR_EXP 24
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// attackGroup := [ ] ;
 230: LD_ADDR_EXP 26
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// traitor := false ;
 237: LD_ADDR_EXP 33
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// end ;
 245: LD_VAR 0 1
 249: RET
// every 0 0$1 trigger debug do var i ;
 250: LD_EXP 35
 254: IFFALSE 334
 256: GO 258
 258: DISABLE
 259: LD_INT 0
 261: PPUSH
// begin enable ;
 262: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
 263: LD_ADDR_VAR 0 1
 267: PUSH
 268: LD_INT 22
 270: PUSH
 271: LD_INT 1
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: PUSH
 278: LD_INT 21
 280: PUSH
 281: LD_INT 1
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: PUSH
 288: LD_INT 3
 290: PUSH
 291: LD_INT 24
 293: PUSH
 294: LD_INT 1000
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: PUSH
 301: EMPTY
 302: LIST
 303: LIST
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: LIST
 309: PPUSH
 310: CALL_OW 69
 314: PUSH
 315: FOR_IN
 316: IFFALSE 332
// SetLives ( i , 1000 ) ;
 318: LD_VAR 0 1
 322: PPUSH
 323: LD_INT 1000
 325: PPUSH
 326: CALL_OW 234
 330: GO 315
 332: POP
 333: POP
// end ; end_of_file
 334: PPOPN 1
 336: END
// export function Action ; var tmp ; begin
 337: LD_INT 0
 339: PPUSH
 340: PPUSH
// InGameOn ;
 341: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
 345: LD_EXP 1
 349: PPUSH
 350: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 354: LD_ADDR_VAR 0 2
 358: PUSH
 359: LD_INT 22
 361: PUSH
 362: LD_INT 4
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: PUSH
 369: LD_INT 21
 371: PUSH
 372: LD_INT 1
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PPUSH
 383: CALL_OW 69
 387: PUSH
 388: LD_EXP 4
 392: PUSH
 393: EMPTY
 394: LIST
 395: DIFF
 396: ST_TO_ADDR
// if Cyrus and Bobby then
 397: LD_EXP 3
 401: IFFALSE 409
 403: PUSH
 404: LD_EXP 2
 408: AND
 409: IFFALSE 739
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 411: LD_EXP 3
 415: PPUSH
 416: LD_INT 43
 418: PPUSH
 419: LD_INT 72
 421: PPUSH
 422: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 426: LD_EXP 2
 430: PPUSH
 431: LD_INT 44
 433: PPUSH
 434: LD_INT 70
 436: PPUSH
 437: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 441: LD_EXP 1
 445: PPUSH
 446: LD_INT 46
 448: PPUSH
 449: LD_INT 73
 451: PPUSH
 452: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 456: LD_EXP 3
 460: PPUSH
 461: LD_STRING D1a-Cyrus-1
 463: PPUSH
 464: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 468: LD_EXP 1
 472: PPUSH
 473: LD_STRING D1a-JMM-1
 475: PPUSH
 476: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 480: LD_EXP 3
 484: PPUSH
 485: LD_INT 37
 487: PPUSH
 488: LD_INT 66
 490: PPUSH
 491: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 495: LD_EXP 2
 499: PPUSH
 500: LD_INT 41
 502: PPUSH
 503: LD_INT 67
 505: PPUSH
 506: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 510: LD_EXP 1
 514: PPUSH
 515: LD_INT 38
 517: PPUSH
 518: LD_INT 64
 520: PPUSH
 521: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 525: LD_EXP 2
 529: PPUSH
 530: LD_STRING D1a-Bobby-2
 532: PPUSH
 533: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 537: LD_EXP 3
 541: PPUSH
 542: LD_INT 35
 544: PPUSH
 545: LD_INT 62
 547: PPUSH
 548: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 552: LD_EXP 2
 556: PPUSH
 557: LD_INT 32
 559: PPUSH
 560: LD_INT 60
 562: PPUSH
 563: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 567: LD_EXP 1
 571: PPUSH
 572: LD_INT 35
 574: PPUSH
 575: LD_INT 60
 577: PPUSH
 578: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 582: LD_EXP 1
 586: PPUSH
 587: LD_STRING D1a-JMM-2
 589: PPUSH
 590: CALL_OW 88
// ComWalk ( Lisa ) ;
 594: LD_EXP 4
 598: PPUSH
 599: CALL_OW 138
// wait ( 0 0$1 ) ;
 603: LD_INT 35
 605: PPUSH
 606: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 610: LD_EXP 4
 614: PPUSH
 615: LD_EXP 1
 619: PPUSH
 620: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 624: LD_EXP 1
 628: PUSH
 629: LD_EXP 3
 633: PUSH
 634: LD_EXP 2
 638: PUSH
 639: EMPTY
 640: LIST
 641: LIST
 642: LIST
 643: PPUSH
 644: LD_EXP 4
 648: PPUSH
 649: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 653: LD_VAR 0 2
 657: PUSH
 658: LD_INT 1
 660: ARRAY
 661: PPUSH
 662: LD_INT 33
 664: PPUSH
 665: LD_INT 55
 667: PPUSH
 668: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 672: LD_VAR 0 2
 676: PUSH
 677: LD_INT 2
 679: ARRAY
 680: PPUSH
 681: LD_INT 30
 683: PPUSH
 684: LD_INT 54
 686: PPUSH
 687: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 691: LD_VAR 0 2
 695: PUSH
 696: LD_INT 1
 698: ARRAY
 699: PPUSH
 700: LD_EXP 1
 704: PPUSH
 705: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 709: LD_VAR 0 2
 713: PUSH
 714: LD_INT 2
 716: ARRAY
 717: PPUSH
 718: LD_EXP 1
 722: PPUSH
 723: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 727: LD_EXP 4
 731: PPUSH
 732: LD_STRING D1a-Lisa-2
 734: PPUSH
 735: CALL_OW 88
// end ; if Cyrus and not Bobby then
 739: LD_EXP 3
 743: IFFALSE 752
 745: PUSH
 746: LD_EXP 2
 750: NOT
 751: AND
 752: IFFALSE 957
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 754: LD_EXP 3
 758: PPUSH
 759: LD_INT 43
 761: PPUSH
 762: LD_INT 72
 764: PPUSH
 765: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 769: LD_EXP 1
 773: PPUSH
 774: LD_INT 46
 776: PPUSH
 777: LD_INT 73
 779: PPUSH
 780: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 784: LD_EXP 3
 788: PPUSH
 789: LD_STRING D1a-Cyrus-1
 791: PPUSH
 792: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 796: LD_EXP 1
 800: PPUSH
 801: LD_STRING D1a-JMM-1
 803: PPUSH
 804: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 808: LD_EXP 3
 812: PPUSH
 813: LD_INT 37
 815: PPUSH
 816: LD_INT 66
 818: PPUSH
 819: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 823: LD_EXP 1
 827: PPUSH
 828: LD_INT 38
 830: PPUSH
 831: LD_INT 64
 833: PPUSH
 834: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 838: LD_EXP 3
 842: PPUSH
 843: LD_STRING D1a-Cyrus-2
 845: PPUSH
 846: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 850: LD_EXP 3
 854: PPUSH
 855: LD_INT 35
 857: PPUSH
 858: LD_INT 62
 860: PPUSH
 861: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 865: LD_EXP 1
 869: PPUSH
 870: LD_INT 35
 872: PPUSH
 873: LD_INT 60
 875: PPUSH
 876: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 880: LD_EXP 1
 884: PPUSH
 885: LD_STRING D1a-JMM-2
 887: PPUSH
 888: CALL_OW 88
// ComWalk ( Lisa ) ;
 892: LD_EXP 4
 896: PPUSH
 897: CALL_OW 138
// wait ( 0 0$1 ) ;
 901: LD_INT 35
 903: PPUSH
 904: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 908: LD_EXP 4
 912: PPUSH
 913: LD_EXP 1
 917: PPUSH
 918: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 922: LD_EXP 4
 926: PPUSH
 927: LD_STRING D1a-Lisa-2
 929: PPUSH
 930: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 934: LD_EXP 1
 938: PUSH
 939: LD_EXP 3
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PPUSH
 948: LD_EXP 4
 952: PPUSH
 953: CALL_OW 119
// end ; if not Cyrus and Bobby then
 957: LD_EXP 3
 961: NOT
 962: IFFALSE 970
 964: PUSH
 965: LD_EXP 2
 969: AND
 970: IFFALSE 1249
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 972: LD_EXP 2
 976: PPUSH
 977: LD_INT 44
 979: PPUSH
 980: LD_INT 70
 982: PPUSH
 983: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 987: LD_EXP 1
 991: PPUSH
 992: LD_INT 46
 994: PPUSH
 995: LD_INT 73
 997: PPUSH
 998: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
1002: LD_EXP 2
1006: PPUSH
1007: LD_STRING D1a-Bobby-1
1009: PPUSH
1010: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
1014: LD_EXP 1
1018: PPUSH
1019: LD_STRING D1a-JMM-1
1021: PPUSH
1022: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
1026: LD_EXP 2
1030: PPUSH
1031: LD_INT 37
1033: PPUSH
1034: LD_INT 66
1036: PPUSH
1037: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
1041: LD_EXP 1
1045: PPUSH
1046: LD_INT 38
1048: PPUSH
1049: LD_INT 64
1051: PPUSH
1052: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
1056: LD_EXP 2
1060: PPUSH
1061: LD_STRING D1a-Bobby-2
1063: PPUSH
1064: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
1068: LD_EXP 2
1072: PPUSH
1073: LD_INT 35
1075: PPUSH
1076: LD_INT 62
1078: PPUSH
1079: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
1083: LD_EXP 1
1087: PPUSH
1088: LD_INT 35
1090: PPUSH
1091: LD_INT 60
1093: PPUSH
1094: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
1098: LD_EXP 1
1102: PPUSH
1103: LD_STRING D1a-JMM-2
1105: PPUSH
1106: CALL_OW 88
// ComWalk ( Lisa ) ;
1110: LD_EXP 4
1114: PPUSH
1115: CALL_OW 138
// wait ( 0 0$1 ) ;
1119: LD_INT 35
1121: PPUSH
1122: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1126: LD_EXP 4
1130: PPUSH
1131: LD_EXP 1
1135: PPUSH
1136: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
1140: LD_EXP 1
1144: PUSH
1145: LD_EXP 3
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: PPUSH
1154: LD_EXP 4
1158: PPUSH
1159: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1163: LD_VAR 0 2
1167: PUSH
1168: LD_INT 1
1170: ARRAY
1171: PPUSH
1172: LD_INT 33
1174: PPUSH
1175: LD_INT 55
1177: PPUSH
1178: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1182: LD_VAR 0 2
1186: PUSH
1187: LD_INT 2
1189: ARRAY
1190: PPUSH
1191: LD_INT 30
1193: PPUSH
1194: LD_INT 54
1196: PPUSH
1197: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1201: LD_VAR 0 2
1205: PUSH
1206: LD_INT 1
1208: ARRAY
1209: PPUSH
1210: LD_EXP 1
1214: PPUSH
1215: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1219: LD_VAR 0 2
1223: PUSH
1224: LD_INT 2
1226: ARRAY
1227: PPUSH
1228: LD_EXP 1
1232: PPUSH
1233: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1237: LD_EXP 4
1241: PPUSH
1242: LD_STRING D1a-Lisa-2
1244: PPUSH
1245: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1249: LD_EXP 3
1253: NOT
1254: IFFALSE 1263
1256: PUSH
1257: LD_EXP 2
1261: NOT
1262: AND
1263: IFFALSE 1477
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1265: LD_EXP 1
1269: PPUSH
1270: LD_INT 37
1272: PPUSH
1273: LD_INT 66
1275: PPUSH
1276: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1280: LD_EXP 1
1284: PPUSH
1285: LD_STRING D1b-JMM-1
1287: PPUSH
1288: CALL_OW 88
// ComCrawl ( JMM ) ;
1292: LD_EXP 1
1296: PPUSH
1297: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1301: LD_EXP 1
1305: PPUSH
1306: LD_INT 35
1308: PPUSH
1309: LD_INT 60
1311: PPUSH
1312: CALL_OW 171
// wait ( 0 0$8 ) ;
1316: LD_INT 280
1318: PPUSH
1319: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1323: LD_EXP 1
1327: PPUSH
1328: LD_STRING D1b-JMM-1a
1330: PPUSH
1331: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1335: LD_EXP 1
1339: PUSH
1340: LD_EXP 4
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PPUSH
1349: CALL_OW 138
// wait ( 0 0$1 ) ;
1353: LD_INT 35
1355: PPUSH
1356: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1360: LD_EXP 4
1364: PPUSH
1365: LD_EXP 1
1369: PPUSH
1370: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1374: LD_EXP 1
1378: PUSH
1379: EMPTY
1380: LIST
1381: PPUSH
1382: LD_EXP 4
1386: PPUSH
1387: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1391: LD_VAR 0 2
1395: PUSH
1396: LD_INT 1
1398: ARRAY
1399: PPUSH
1400: LD_INT 33
1402: PPUSH
1403: LD_INT 55
1405: PPUSH
1406: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1410: LD_VAR 0 2
1414: PUSH
1415: LD_INT 2
1417: ARRAY
1418: PPUSH
1419: LD_INT 30
1421: PPUSH
1422: LD_INT 54
1424: PPUSH
1425: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1429: LD_VAR 0 2
1433: PUSH
1434: LD_INT 1
1436: ARRAY
1437: PPUSH
1438: LD_EXP 1
1442: PPUSH
1443: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1447: LD_VAR 0 2
1451: PUSH
1452: LD_INT 2
1454: ARRAY
1455: PPUSH
1456: LD_EXP 1
1460: PPUSH
1461: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1465: LD_EXP 4
1469: PPUSH
1470: LD_STRING D1b-Lisa-1
1472: PPUSH
1473: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1477: LD_EXP 1
1481: PPUSH
1482: LD_STRING D1-JMM-1
1484: PPUSH
1485: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1489: LD_EXP 4
1493: PPUSH
1494: LD_STRING D1-Lisa-1
1496: PPUSH
1497: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1501: LD_EXP 1
1505: PPUSH
1506: LD_STRING D1-JMM-2
1508: PPUSH
1509: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
1513: LD_EXP 9
1517: PPUSH
1518: LD_STRING D1-Pow-2
1520: PPUSH
1521: CALL_OW 586
// if Cyrus then
1525: LD_EXP 3
1529: IFFALSE 1555
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1531: LD_EXP 3
1535: PPUSH
1536: LD_STRING D1-Cyrus-2
1538: PPUSH
1539: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1543: LD_EXP 1
1547: PPUSH
1548: LD_STRING D1-JMM-3
1550: PPUSH
1551: CALL_OW 88
// end ; SayRadioNoFace ( Powell , D1-Pow-3 ) ;
1555: LD_EXP 9
1559: PPUSH
1560: LD_STRING D1-Pow-3
1562: PPUSH
1563: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
1567: LD_EXP 1
1571: PPUSH
1572: LD_STRING D1-JMM-4
1574: PPUSH
1575: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-4 ) ;
1579: LD_EXP 9
1583: PPUSH
1584: LD_STRING D1-Pow-4
1586: PPUSH
1587: CALL_OW 586
// SayRadioNoFace ( Powell , D1-Pow-4a ) ;
1591: LD_EXP 9
1595: PPUSH
1596: LD_STRING D1-Pow-4a
1598: PPUSH
1599: CALL_OW 586
// if Cyrus then
1603: LD_EXP 3
1607: IFFALSE 1621
// Say ( Cyrus , D1-Cyrus-4 ) ;
1609: LD_EXP 3
1613: PPUSH
1614: LD_STRING D1-Cyrus-4
1616: PPUSH
1617: CALL_OW 88
// if Bobby then
1621: LD_EXP 2
1625: IFFALSE 1663
// begin Say ( Bobby , D1-Bobby-4 ) ;
1627: LD_EXP 2
1631: PPUSH
1632: LD_STRING D1-Bobby-4
1634: PPUSH
1635: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1639: LD_EXP 4
1643: PPUSH
1644: LD_STRING D1-Lisa-4
1646: PPUSH
1647: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1651: LD_EXP 1
1655: PPUSH
1656: LD_STRING D1-JMM-5
1658: PPUSH
1659: CALL_OW 88
// end ; InGameOff ;
1663: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1667: LD_INT 22
1669: PUSH
1670: LD_INT 4
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PPUSH
1677: CALL_OW 69
1681: PUSH
1682: LD_EXP 6
1686: PUSH
1687: LD_EXP 7
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: DIFF
1696: PPUSH
1697: LD_INT 1
1699: PPUSH
1700: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1704: LD_STRING M1
1706: PPUSH
1707: CALL_OW 337
// SaveForQuickRestart ;
1711: CALL_OW 22
// end ;
1715: LD_VAR 0 1
1719: RET
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1720: LD_INT 7
1722: PPUSH
1723: LD_INT 22
1725: PUSH
1726: LD_INT 1
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: PPUSH
1733: CALL_OW 70
1737: PUSH
1738: LD_INT 0
1740: GREATER
1741: IFFALSE 2154
1743: GO 1745
1745: DISABLE
// begin InGameOn ;
1746: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1750: LD_INT 22
1752: PUSH
1753: LD_INT 1
1755: PUSH
1756: EMPTY
1757: LIST
1758: LIST
1759: PUSH
1760: LD_INT 21
1762: PUSH
1763: LD_INT 1
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: PPUSH
1774: CALL_OW 69
1778: PPUSH
1779: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1783: LD_INT 24
1785: PPUSH
1786: LD_INT 32
1788: PPUSH
1789: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1793: LD_EXP 5
1797: PPUSH
1798: LD_INT 4
1800: PPUSH
1801: LD_INT 1
1803: PPUSH
1804: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1808: LD_EXP 5
1812: PPUSH
1813: LD_INT 4
1815: PPUSH
1816: CALL_OW 336
// wait ( 0 0$1 ) ;
1820: LD_INT 35
1822: PPUSH
1823: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1827: LD_EXP 5
1831: PPUSH
1832: LD_INT 27
1834: PPUSH
1835: LD_INT 38
1837: PPUSH
1838: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1842: LD_EXP 5
1846: PPUSH
1847: LD_EXP 1
1851: PPUSH
1852: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1856: LD_INT 22
1858: PUSH
1859: LD_INT 1
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: PUSH
1866: LD_INT 21
1868: PUSH
1869: LD_INT 1
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: PPUSH
1880: CALL_OW 69
1884: PUSH
1885: LD_EXP 5
1889: PUSH
1890: EMPTY
1891: LIST
1892: DIFF
1893: PPUSH
1894: LD_EXP 5
1898: PPUSH
1899: CALL_OW 119
// wait ( 0 0$1 ) ;
1903: LD_INT 35
1905: PPUSH
1906: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1910: LD_EXP 5
1914: PPUSH
1915: LD_STRING D2a-Khat-1
1917: PPUSH
1918: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1922: LD_EXP 1
1926: PPUSH
1927: LD_STRING D2a-JMM-1
1929: PPUSH
1930: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1934: LD_EXP 5
1938: PPUSH
1939: LD_STRING D2a-Khat-2
1941: PPUSH
1942: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1946: LD_EXP 1
1950: PPUSH
1951: LD_STRING D2a-JMM-2
1953: PPUSH
1954: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1958: LD_EXP 5
1962: PPUSH
1963: LD_STRING D2a-Khat-3
1965: PPUSH
1966: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1970: LD_EXP 1
1974: PPUSH
1975: LD_STRING D2a-JMM-3
1977: PPUSH
1978: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1982: LD_EXP 5
1986: PPUSH
1987: LD_STRING D2a-Khat-4
1989: PPUSH
1990: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1994: LD_EXP 1
1998: PPUSH
1999: LD_STRING D2a-JMM-4
2001: PPUSH
2002: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
2006: LD_EXP 5
2010: PPUSH
2011: LD_STRING D2a-Khat-5
2013: PPUSH
2014: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
2018: LD_EXP 1
2022: PPUSH
2023: LD_STRING D2a-JMM-5
2025: PPUSH
2026: CALL_OW 88
// InGameOff ;
2030: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) then
2034: LD_INT 22
2036: PUSH
2037: LD_INT 1
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PUSH
2044: LD_INT 21
2046: PUSH
2047: LD_INT 1
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 3
2056: PUSH
2057: LD_INT 24
2059: PUSH
2060: LD_INT 800
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: PUSH
2067: EMPTY
2068: LIST
2069: LIST
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: LIST
2075: PPUSH
2076: CALL_OW 69
2080: IFFALSE 2154
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
2082: LD_EXP 5
2086: PPUSH
2087: LD_INT 22
2089: PUSH
2090: LD_INT 1
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 21
2099: PUSH
2100: LD_INT 1
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: LD_INT 3
2109: PUSH
2110: LD_INT 24
2112: PUSH
2113: LD_INT 1000
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: LIST
2128: PPUSH
2129: CALL_OW 69
2133: PUSH
2134: LD_INT 1
2136: ARRAY
2137: PPUSH
2138: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
2142: LD_EXP 5
2146: PPUSH
2147: LD_STRING D2b-Khat-1
2149: PPUSH
2150: CALL_OW 88
// end ; end ;
2154: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) do var i , distanceTab , min , tmp , p ;
2155: LD_INT 15
2157: PPUSH
2158: LD_INT 22
2160: PUSH
2161: LD_INT 1
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: PPUSH
2168: CALL_OW 70
2172: IFFALSE 3379
2174: GO 2176
2176: DISABLE
2177: LD_INT 0
2179: PPUSH
2180: PPUSH
2181: PPUSH
2182: PPUSH
2183: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2184: LD_ADDR_VAR 0 2
2188: PUSH
2189: LD_INT 999
2191: PUSH
2192: LD_INT 999
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: PUSH
2199: EMPTY
2200: LIST
2201: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2202: LD_ADDR_VAR 0 4
2206: PUSH
2207: LD_INT 22
2209: PUSH
2210: LD_INT 1
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: PUSH
2217: LD_INT 21
2219: PUSH
2220: LD_INT 1
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: PPUSH
2231: CALL_OW 69
2235: PUSH
2236: LD_EXP 1
2240: PUSH
2241: LD_EXP 2
2245: PUSH
2246: LD_EXP 3
2250: PUSH
2251: LD_EXP 4
2255: PUSH
2256: LD_EXP 5
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: DIFF
2268: ST_TO_ADDR
// PrepareDeadSoldiers ;
2269: CALL 11959 0 0
// spotCorpses = 1 ;
2273: LD_ADDR_EXP 32
2277: PUSH
2278: LD_INT 1
2280: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2281: LD_INT 70
2283: PPUSH
2284: CALL_OW 67
// InGameOn ;
2288: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2292: LD_INT 23
2294: PPUSH
2295: LD_INT 12
2297: PPUSH
2298: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2302: LD_ADDR_VAR 0 3
2306: PUSH
2307: LD_VAR 0 2
2311: PUSH
2312: LD_INT 1
2314: ARRAY
2315: PUSH
2316: LD_INT 2
2318: ARRAY
2319: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2320: LD_ADDR_VAR 0 1
2324: PUSH
2325: LD_INT 22
2327: PUSH
2328: LD_INT 1
2330: PUSH
2331: EMPTY
2332: LIST
2333: LIST
2334: PUSH
2335: LD_INT 21
2337: PUSH
2338: LD_INT 1
2340: PUSH
2341: EMPTY
2342: LIST
2343: LIST
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: PPUSH
2349: CALL_OW 69
2353: PUSH
2354: LD_EXP 1
2358: PUSH
2359: LD_EXP 5
2363: PUSH
2364: EMPTY
2365: LIST
2366: LIST
2367: DIFF
2368: PUSH
2369: FOR_IN
2370: IFFALSE 2421
// if IsOK ( i ) then
2372: LD_VAR 0 1
2376: PPUSH
2377: CALL_OW 302
2381: IFFALSE 2419
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2383: LD_ADDR_VAR 0 2
2387: PUSH
2388: LD_VAR 0 2
2392: PUSH
2393: LD_VAR 0 1
2397: PUSH
2398: LD_VAR 0 1
2402: PPUSH
2403: LD_INT 16
2405: PPUSH
2406: CALL_OW 299
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: PUSH
2415: EMPTY
2416: LIST
2417: ADD
2418: ST_TO_ADDR
2419: GO 2369
2421: POP
2422: POP
// for i = 2 to distanceTab do
2423: LD_ADDR_VAR 0 1
2427: PUSH
2428: DOUBLE
2429: LD_INT 2
2431: DEC
2432: ST_TO_ADDR
2433: LD_VAR 0 2
2437: PUSH
2438: FOR_TO
2439: IFFALSE 2485
// if distanceTab [ i ] [ 2 ] < min then
2441: LD_VAR 0 2
2445: PUSH
2446: LD_VAR 0 1
2450: ARRAY
2451: PUSH
2452: LD_INT 2
2454: ARRAY
2455: PUSH
2456: LD_VAR 0 3
2460: LESS
2461: IFFALSE 2483
// min = distanceTab [ i ] [ 2 ] ;
2463: LD_ADDR_VAR 0 3
2467: PUSH
2468: LD_VAR 0 2
2472: PUSH
2473: LD_VAR 0 1
2477: ARRAY
2478: PUSH
2479: LD_INT 2
2481: ARRAY
2482: ST_TO_ADDR
2483: GO 2438
2485: POP
2486: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2487: LD_ADDR_VAR 0 1
2491: PUSH
2492: LD_INT 22
2494: PUSH
2495: LD_INT 1
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 21
2504: PUSH
2505: LD_INT 1
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: EMPTY
2513: LIST
2514: LIST
2515: PPUSH
2516: CALL_OW 69
2520: PUSH
2521: LD_EXP 1
2525: PUSH
2526: EMPTY
2527: LIST
2528: DIFF
2529: PUSH
2530: FOR_IN
2531: IFFALSE 2601
// begin ComMoveToArea ( i , DeadCutscene ) ;
2533: LD_VAR 0 1
2537: PPUSH
2538: LD_INT 28
2540: PPUSH
2541: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2545: LD_EXP 1
2549: PPUSH
2550: LD_INT 30
2552: PPUSH
2553: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2557: LD_VAR 0 1
2561: PPUSH
2562: LD_INT 23
2564: PPUSH
2565: LD_INT 11
2567: PPUSH
2568: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2572: LD_EXP 1
2576: PPUSH
2577: LD_INT 23
2579: PPUSH
2580: LD_INT 11
2582: PPUSH
2583: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2587: LD_EXP 36
2591: PPUSH
2592: LD_INT 250
2594: PPUSH
2595: CALL_OW 234
// end ;
2599: GO 2530
2601: POP
2602: POP
// for i = 2 to distanceTab do
2603: LD_ADDR_VAR 0 1
2607: PUSH
2608: DOUBLE
2609: LD_INT 2
2611: DEC
2612: ST_TO_ADDR
2613: LD_VAR 0 2
2617: PUSH
2618: FOR_TO
2619: IFFALSE 3013
// begin if distanceTab [ i ] [ 2 ] = min then
2621: LD_VAR 0 2
2625: PUSH
2626: LD_VAR 0 1
2630: ARRAY
2631: PUSH
2632: LD_INT 2
2634: ARRAY
2635: PUSH
2636: LD_VAR 0 3
2640: EQUAL
2641: IFFALSE 3011
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2643: LD_VAR 0 2
2647: PUSH
2648: LD_VAR 0 1
2652: ARRAY
2653: PUSH
2654: LD_INT 1
2656: ARRAY
2657: PUSH
2658: LD_EXP 2
2662: EQUAL
2663: IFFALSE 2677
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2665: LD_EXP 2
2669: PPUSH
2670: LD_STRING DCorpses-Bobby-1
2672: PPUSH
2673: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2677: LD_VAR 0 2
2681: PUSH
2682: LD_VAR 0 1
2686: ARRAY
2687: PUSH
2688: LD_INT 1
2690: ARRAY
2691: PUSH
2692: LD_EXP 3
2696: EQUAL
2697: IFFALSE 2711
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2699: LD_EXP 3
2703: PPUSH
2704: LD_STRING DCorpses-Cyrus-1
2706: PPUSH
2707: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2711: LD_VAR 0 2
2715: PUSH
2716: LD_VAR 0 1
2720: ARRAY
2721: PUSH
2722: LD_INT 1
2724: ARRAY
2725: PUSH
2726: LD_EXP 4
2730: EQUAL
2731: IFFALSE 2745
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2733: LD_EXP 4
2737: PPUSH
2738: LD_STRING DCorpses-Lisa-1
2740: PPUSH
2741: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2745: LD_VAR 0 2
2749: PUSH
2750: LD_VAR 0 1
2754: ARRAY
2755: PUSH
2756: LD_INT 1
2758: ARRAY
2759: PUSH
2760: LD_VAR 0 4
2764: PUSH
2765: LD_INT 1
2767: ARRAY
2768: EQUAL
2769: IFFALSE 2790
2771: PUSH
2772: LD_VAR 0 4
2776: PUSH
2777: LD_INT 1
2779: ARRAY
2780: PPUSH
2781: CALL_OW 258
2785: PUSH
2786: LD_INT 1
2788: EQUAL
2789: AND
2790: IFFALSE 2808
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2792: LD_VAR 0 4
2796: PUSH
2797: LD_INT 1
2799: ARRAY
2800: PPUSH
2801: LD_STRING DCorpses-Sol1-1
2803: PPUSH
2804: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2808: LD_VAR 0 2
2812: PUSH
2813: LD_VAR 0 1
2817: ARRAY
2818: PUSH
2819: LD_INT 1
2821: ARRAY
2822: PUSH
2823: LD_VAR 0 4
2827: PUSH
2828: LD_INT 1
2830: ARRAY
2831: EQUAL
2832: IFFALSE 2853
2834: PUSH
2835: LD_VAR 0 4
2839: PUSH
2840: LD_INT 1
2842: ARRAY
2843: PPUSH
2844: CALL_OW 258
2848: PUSH
2849: LD_INT 2
2851: EQUAL
2852: AND
2853: IFFALSE 2871
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2855: LD_VAR 0 4
2859: PUSH
2860: LD_INT 1
2862: ARRAY
2863: PPUSH
2864: LD_STRING DCorpses-FSol1-1
2866: PPUSH
2867: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2871: LD_VAR 0 2
2875: PUSH
2876: LD_VAR 0 1
2880: ARRAY
2881: PUSH
2882: LD_INT 1
2884: ARRAY
2885: PUSH
2886: LD_VAR 0 4
2890: PUSH
2891: LD_INT 2
2893: ARRAY
2894: EQUAL
2895: IFFALSE 2916
2897: PUSH
2898: LD_VAR 0 4
2902: PUSH
2903: LD_INT 2
2905: ARRAY
2906: PPUSH
2907: CALL_OW 258
2911: PUSH
2912: LD_INT 1
2914: EQUAL
2915: AND
2916: IFFALSE 2934
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2918: LD_VAR 0 4
2922: PUSH
2923: LD_INT 2
2925: ARRAY
2926: PPUSH
2927: LD_STRING DCorpses-Sol1-1
2929: PPUSH
2930: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2934: LD_VAR 0 2
2938: PUSH
2939: LD_VAR 0 1
2943: ARRAY
2944: PUSH
2945: LD_INT 1
2947: ARRAY
2948: PUSH
2949: LD_VAR 0 4
2953: PUSH
2954: LD_INT 2
2956: ARRAY
2957: EQUAL
2958: IFFALSE 2979
2960: PUSH
2961: LD_VAR 0 4
2965: PUSH
2966: LD_INT 2
2968: ARRAY
2969: PPUSH
2970: CALL_OW 258
2974: PUSH
2975: LD_INT 2
2977: EQUAL
2978: AND
2979: IFFALSE 2997
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2981: LD_VAR 0 4
2985: PUSH
2986: LD_INT 2
2988: ARRAY
2989: PPUSH
2990: LD_STRING DCorpses-FSol1-1
2992: PPUSH
2993: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2997: LD_EXP 36
3001: PPUSH
3002: LD_INT 150
3004: PPUSH
3005: CALL_OW 234
// break ;
3009: GO 3013
// end ; end ;
3011: GO 2618
3013: POP
3014: POP
// p := 0 ;
3015: LD_ADDR_VAR 0 5
3019: PUSH
3020: LD_INT 0
3022: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3023: LD_INT 35
3025: PPUSH
3026: CALL_OW 67
// p := p + 1 ;
3030: LD_ADDR_VAR 0 5
3034: PUSH
3035: LD_VAR 0 5
3039: PUSH
3040: LD_INT 1
3042: PLUS
3043: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
3044: LD_ADDR_VAR 0 1
3048: PUSH
3049: LD_INT 22
3051: PUSH
3052: LD_INT 1
3054: PUSH
3055: EMPTY
3056: LIST
3057: LIST
3058: PUSH
3059: LD_INT 21
3061: PUSH
3062: LD_INT 1
3064: PUSH
3065: EMPTY
3066: LIST
3067: LIST
3068: PUSH
3069: EMPTY
3070: LIST
3071: LIST
3072: PPUSH
3073: CALL_OW 69
3077: PUSH
3078: LD_EXP 1
3082: PUSH
3083: EMPTY
3084: LIST
3085: DIFF
3086: PUSH
3087: FOR_IN
3088: IFFALSE 3158
// begin ComMoveToArea ( i , DeadCutscene ) ;
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_INT 28
3097: PPUSH
3098: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
3102: LD_EXP 1
3106: PPUSH
3107: LD_INT 30
3109: PPUSH
3110: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
3114: LD_VAR 0 1
3118: PPUSH
3119: LD_INT 23
3121: PPUSH
3122: LD_INT 11
3124: PPUSH
3125: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
3129: LD_EXP 1
3133: PPUSH
3134: LD_INT 23
3136: PPUSH
3137: LD_INT 11
3139: PPUSH
3140: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
3144: LD_EXP 36
3148: PPUSH
3149: LD_INT 250
3151: PPUSH
3152: CALL_OW 234
// end ;
3156: GO 3087
3158: POP
3159: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3160: LD_EXP 1
3164: PPUSH
3165: LD_INT 30
3167: PPUSH
3168: CALL_OW 308
3172: IFTRUE 3184
3174: PUSH
3175: LD_VAR 0 5
3179: PUSH
3180: LD_INT 16
3182: GREATEREQUAL
3183: OR
3184: IFFALSE 3023
// wait ( 0 0$1 ) ;
3186: LD_INT 35
3188: PPUSH
3189: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3193: LD_EXP 1
3197: PPUSH
3198: LD_STRING DCorpses-JMM-1
3200: PPUSH
3201: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3205: LD_EXP 36
3209: PPUSH
3210: LD_INT 100
3212: PPUSH
3213: CALL_OW 234
// if IsOK ( Khatam ) then
3217: LD_EXP 5
3221: PPUSH
3222: CALL_OW 302
3226: IFFALSE 3363
// begin repeat wait ( 0 0$1 ) ;
3228: LD_INT 35
3230: PPUSH
3231: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3235: LD_EXP 5
3239: PPUSH
3240: LD_EXP 36
3244: PPUSH
3245: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3249: LD_EXP 5
3253: PPUSH
3254: LD_EXP 36
3258: PPUSH
3259: CALL_OW 296
3263: PUSH
3264: LD_INT 2
3266: LESS
3267: IFFALSE 3228
// spotCorpses = 0 ;
3269: LD_ADDR_EXP 32
3273: PUSH
3274: LD_INT 0
3276: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3277: LD_EXP 36
3281: PPUSH
3282: LD_INT 10
3284: PPUSH
3285: CALL_OW 234
// wait ( 0 0$3 ) ;
3289: LD_INT 105
3291: PPUSH
3292: CALL_OW 67
// KillUnit ( DyingSold ) ;
3296: LD_EXP 36
3300: PPUSH
3301: CALL_OW 66
// wait ( 0 0$1 ) ;
3305: LD_INT 35
3307: PPUSH
3308: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3312: LD_EXP 1
3316: PUSH
3317: LD_EXP 5
3321: PUSH
3322: EMPTY
3323: LIST
3324: LIST
3325: PPUSH
3326: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3330: LD_EXP 5
3334: PPUSH
3335: LD_EXP 1
3339: PPUSH
3340: CALL_OW 119
// wait ( 0 0$1 ) ;
3344: LD_INT 35
3346: PPUSH
3347: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3351: LD_EXP 5
3355: PPUSH
3356: LD_STRING DCorpses-Khat-1
3358: PPUSH
3359: CALL_OW 88
// end ; InGameOff ;
3363: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3367: LD_EXP 1
3371: PPUSH
3372: LD_STRING DCorpses-JMM-2
3374: PPUSH
3375: CALL_OW 88
// end ;
3379: PPOPN 5
3381: END
// every 0 0$1 trigger spotCorpses = 1 do
3382: LD_EXP 32
3386: PUSH
3387: LD_INT 1
3389: EQUAL
3390: IFFALSE 3408
3392: GO 3394
3394: DISABLE
// begin enable ;
3395: ENABLE
// SetLives ( DyingSold , 10 ) ;
3396: LD_EXP 36
3400: PPUSH
3401: LD_INT 10
3403: PPUSH
3404: CALL_OW 234
// end ;
3408: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3409: LD_INT 8
3411: PPUSH
3412: LD_INT 22
3414: PUSH
3415: LD_INT 1
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: PPUSH
3422: CALL_OW 70
3426: IFTRUE 3468
3428: PUSH
3429: LD_INT 22
3431: PUSH
3432: LD_INT 1
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: PPUSH
3439: CALL_OW 69
3443: PPUSH
3444: LD_EXP 7
3448: PPUSH
3449: CALL_OW 74
3453: PPUSH
3454: LD_EXP 7
3458: PPUSH
3459: CALL_OW 296
3463: PUSH
3464: LD_INT 13
3466: LESS
3467: OR
3468: IFFALSE 3649
3470: GO 3472
3472: DISABLE
3473: LD_INT 0
3475: PPUSH
// begin InGameOn ;
3476: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3480: LD_EXP 7
3484: PPUSH
3485: LD_INT 250
3487: PPUSH
3488: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 , 700 ] [ Difficulty ] ) ;
3492: LD_EXP 6
3496: PPUSH
3497: LD_INT 1000
3499: PUSH
3500: LD_INT 800
3502: PUSH
3503: LD_INT 750
3505: PUSH
3506: LD_INT 700
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: PUSH
3515: LD_OWVAR 67
3519: ARRAY
3520: PPUSH
3521: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3525: LD_INT 3
3527: PPUSH
3528: LD_INT 4
3530: PPUSH
3531: LD_INT 2
3533: PPUSH
3534: LD_INT 1
3536: PPUSH
3537: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3541: LD_EXP 6
3545: PUSH
3546: LD_EXP 7
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: PPUSH
3555: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) union FilterAllUnits ( [ f_side , 4 ] ) do
3559: LD_ADDR_VAR 0 1
3563: PUSH
3564: LD_INT 9
3566: PPUSH
3567: LD_INT 22
3569: PUSH
3570: LD_INT 3
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: PPUSH
3577: CALL_OW 70
3581: PUSH
3582: LD_INT 22
3584: PUSH
3585: LD_INT 4
3587: PUSH
3588: EMPTY
3589: LIST
3590: LIST
3591: PPUSH
3592: CALL_OW 69
3596: UNION
3597: PUSH
3598: FOR_IN
3599: IFFALSE 3612
// ComFree ( i ) ;
3601: LD_VAR 0 1
3605: PPUSH
3606: CALL_OW 139
3610: GO 3598
3612: POP
3613: POP
// wait ( 0 0$1 ) ;
3614: LD_INT 35
3616: PPUSH
3617: CALL_OW 67
// InGameOff ;
3621: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3625: LD_EXP 6
3629: PPUSH
3630: LD_STRING DF-Sol1-1
3632: PPUSH
3633: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3637: LD_EXP 1
3641: PPUSH
3642: LD_STRING DF-JMM-1
3644: PPUSH
3645: CALL_OW 88
// end ;
3649: PPOPN 1
3651: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3652: LD_INT 19
3654: PPUSH
3655: LD_INT 22
3657: PUSH
3658: LD_INT 3
3660: PUSH
3661: EMPTY
3662: LIST
3663: LIST
3664: PPUSH
3665: CALL_OW 70
3669: PUSH
3670: LD_INT 0
3672: EQUAL
3673: IFFALSE 3782
3675: GO 3677
3677: DISABLE
// begin if not IsDead ( Brian ) then
3678: LD_EXP 6
3682: PPUSH
3683: CALL_OW 301
3687: NOT
3688: IFFALSE 3702
// SetSide ( Brian , 1 ) ;
3690: LD_EXP 6
3694: PPUSH
3695: LD_INT 1
3697: PPUSH
3698: CALL_OW 235
// if not IsDead ( Jerry ) then
3702: LD_EXP 7
3706: PPUSH
3707: CALL_OW 301
3711: NOT
3712: IFFALSE 3726
// SetSide ( Jerry , 1 ) ;
3714: LD_EXP 7
3718: PPUSH
3719: LD_INT 1
3721: PPUSH
3722: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3726: LD_INT 22
3728: PUSH
3729: LD_INT 1
3731: PUSH
3732: EMPTY
3733: LIST
3734: LIST
3735: PUSH
3736: LD_INT 25
3738: PUSH
3739: LD_INT 4
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PPUSH
3750: CALL_OW 69
3754: IFFALSE 3770
// Say ( JMM , DFa-JMM-1 ) else
3756: LD_EXP 1
3760: PPUSH
3761: LD_STRING DFa-JMM-1
3763: PPUSH
3764: CALL_OW 88
3768: GO 3782
// Say ( JMM , DFa-JMM-1a ) ;
3770: LD_EXP 1
3774: PPUSH
3775: LD_STRING DFa-JMM-1a
3777: PPUSH
3778: CALL_OW 88
// end ;
3782: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3783: LD_INT 19
3785: PPUSH
3786: LD_INT 22
3788: PUSH
3789: LD_INT 3
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: PPUSH
3796: CALL_OW 70
3800: PUSH
3801: LD_INT 0
3803: EQUAL
3804: IFFALSE 3818
3806: PUSH
3807: LD_EXP 6
3811: PPUSH
3812: CALL_OW 302
3816: NOT
3817: AND
3818: IFFALSE 3904
3820: GO 3822
3822: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3823: LD_INT 35
3825: PPUSH
3826: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3830: LD_EXP 6
3834: PPUSH
3835: CALL_OW 256
3839: PUSH
3840: LD_INT 250
3842: GREATER
3843: IFFALSE 3823
// Say ( Brian , DFb-Sol1-1 ) ;
3845: LD_EXP 6
3849: PPUSH
3850: LD_STRING DFb-Sol1-1
3852: PPUSH
3853: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3857: LD_EXP 6
3861: PPUSH
3862: LD_INT 78
3864: PPUSH
3865: LD_INT 74
3867: PPUSH
3868: CALL_OW 111
// if IsDead ( Jerry ) then
3872: LD_EXP 7
3876: PPUSH
3877: CALL_OW 301
3881: IFFALSE 3897
// Say ( Brian , DFb-Sol1-1a ) else
3883: LD_EXP 6
3887: PPUSH
3888: LD_STRING DFb-Sol1-1a
3890: PPUSH
3891: CALL_OW 88
3895: GO 3904
// SetAchievement ( ACH_JERRY ) ;
3897: LD_STRING ACH_JERRY
3899: PPUSH
3900: CALL_OW 543
// end ;
3904: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3905: LD_INT 22
3907: PUSH
3908: LD_INT 1
3910: PUSH
3911: EMPTY
3912: LIST
3913: LIST
3914: PUSH
3915: LD_INT 21
3917: PUSH
3918: LD_INT 2
3920: PUSH
3921: EMPTY
3922: LIST
3923: LIST
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: PPUSH
3929: CALL_OW 69
3933: PUSH
3934: LD_INT 0
3936: EQUAL
3937: IFFALSE 4029
3939: GO 3941
3941: DISABLE
3942: LD_INT 0
3944: PPUSH
// begin enable ;
3945: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3946: LD_ADDR_VAR 0 1
3950: PUSH
3951: LD_INT 22
3953: PUSH
3954: LD_INT 3
3956: PUSH
3957: EMPTY
3958: LIST
3959: LIST
3960: PUSH
3961: LD_INT 21
3963: PUSH
3964: LD_INT 3
3966: PUSH
3967: EMPTY
3968: LIST
3969: LIST
3970: PUSH
3971: LD_INT 30
3973: PUSH
3974: LD_INT 31
3976: PUSH
3977: EMPTY
3978: LIST
3979: LIST
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: LIST
3985: PPUSH
3986: CALL_OW 69
3990: PUSH
3991: FOR_IN
3992: IFFALSE 4027
// begin if See ( 1 , i ) then
3994: LD_INT 1
3996: PPUSH
3997: LD_VAR 0 1
4001: PPUSH
4002: CALL_OW 292
4006: IFFALSE 4025
// begin disable ;
4008: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
4009: LD_EXP 1
4013: PPUSH
4014: LD_STRING DX1-JMM-1
4016: PPUSH
4017: CALL_OW 88
// exit ;
4021: POP
4022: POP
4023: GO 4029
// end ; end ;
4025: GO 3991
4027: POP
4028: POP
// end ;
4029: PPOPN 1
4031: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
4032: LD_INT 1
4034: PPUSH
4035: LD_INT 11
4037: PPUSH
4038: CALL_OW 294
4042: IFFALSE 4305
4044: GO 4046
4046: DISABLE
4047: LD_INT 0
4049: PPUSH
4050: PPUSH
4051: PPUSH
// begin DialogueOn ;
4052: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
4056: LD_INT 11
4058: PPUSH
4059: LD_INT 22
4061: PUSH
4062: LD_INT 3
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: PUSH
4069: LD_INT 21
4071: PUSH
4072: LD_INT 1
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: PPUSH
4083: CALL_OW 70
4087: PUSH
4088: LD_INT 1
4090: ARRAY
4091: PPUSH
4092: LD_STRING DX3-Rus1-1
4094: PPUSH
4095: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
4099: LD_EXP 1
4103: PPUSH
4104: LD_STRING DX3-JMM-1
4106: PPUSH
4107: CALL_OW 88
// DialogueOff ;
4111: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
4115: LD_ADDR_VAR 0 1
4119: PUSH
4120: LD_INT 11
4122: PPUSH
4123: LD_INT 22
4125: PUSH
4126: LD_INT 3
4128: PUSH
4129: EMPTY
4130: LIST
4131: LIST
4132: PUSH
4133: LD_INT 25
4135: PUSH
4136: LD_INT 1
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: PPUSH
4147: CALL_OW 70
4151: PUSH
4152: FOR_IN
4153: IFFALSE 4173
// southBaseDefenders = southBaseDefenders ^ i ;
4155: LD_ADDR_EXP 25
4159: PUSH
4160: LD_EXP 25
4164: PUSH
4165: LD_VAR 0 1
4169: ADD
4170: ST_TO_ADDR
4171: GO 4152
4173: POP
4174: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$2 , 0 0$1 ] [ Difficulty ] ) ;
4175: LD_INT 175
4177: PUSH
4178: LD_INT 140
4180: PUSH
4181: LD_INT 70
4183: PUSH
4184: LD_INT 35
4186: PUSH
4187: EMPTY
4188: LIST
4189: LIST
4190: LIST
4191: LIST
4192: PUSH
4193: LD_OWVAR 67
4197: ARRAY
4198: PPUSH
4199: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4203: LD_ADDR_VAR 0 3
4207: PUSH
4208: LD_INT 22
4210: PUSH
4211: LD_INT 3
4213: PUSH
4214: EMPTY
4215: LIST
4216: LIST
4217: PUSH
4218: LD_INT 21
4220: PUSH
4221: LD_INT 1
4223: PUSH
4224: EMPTY
4225: LIST
4226: LIST
4227: PUSH
4228: LD_INT 25
4230: PUSH
4231: LD_INT 3
4233: PUSH
4234: EMPTY
4235: LIST
4236: LIST
4237: PUSH
4238: EMPTY
4239: LIST
4240: LIST
4241: LIST
4242: PPUSH
4243: CALL_OW 69
4247: ST_TO_ADDR
// if not mech then
4248: LD_VAR 0 3
4252: NOT
4253: IFFALSE 4257
// exit ;
4255: GO 4305
// ComExitBuilding ( mech ) ;
4257: LD_VAR 0 3
4261: PPUSH
4262: CALL_OW 122
// wait ( 0 0$1 ) ;
4266: LD_INT 35
4268: PPUSH
4269: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4273: LD_VAR 0 3
4277: PUSH
4278: LD_INT 1
4280: ARRAY
4281: PPUSH
4282: LD_INT 5
4284: PPUSH
4285: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4289: LD_VAR 0 3
4293: PUSH
4294: LD_INT 2
4296: ARRAY
4297: PPUSH
4298: LD_INT 4
4300: PPUSH
4301: CALL_OW 180
// end ;
4305: PPOPN 3
4307: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4308: LD_INT 1
4310: PPUSH
4311: LD_INT 5
4313: PPUSH
4314: CALL_OW 292
4318: IFTRUE 4332
4320: PUSH
4321: LD_INT 1
4323: PPUSH
4324: LD_INT 4
4326: PPUSH
4327: CALL_OW 292
4331: OR
4332: IFFALSE 4416
4334: GO 4336
4336: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4337: LD_INT 5
4339: PUSH
4340: LD_INT 4
4342: PUSH
4343: EMPTY
4344: LIST
4345: LIST
4346: PPUSH
4347: CALL_OW 85
// if IsOK ( Bobby ) then
4351: LD_EXP 2
4355: PPUSH
4356: CALL_OW 302
4360: IFFALSE 4396
// begin DialogueOn ;
4362: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4366: LD_EXP 2
4370: PPUSH
4371: LD_STRING DX2-Bobby-1
4373: PPUSH
4374: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4378: LD_EXP 1
4382: PPUSH
4383: LD_STRING DX2-JMM-1a
4385: PPUSH
4386: CALL_OW 88
// DialogueOff ;
4390: CALL_OW 7
// end else
4394: GO 4416
// begin DialogueOn ;
4396: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4400: LD_EXP 1
4404: PPUSH
4405: LD_STRING DX2-JMM-1
4407: PPUSH
4408: CALL_OW 88
// DialogueOff ;
4412: CALL_OW 7
// end ; end ;
4416: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4417: LD_INT 22
4419: PUSH
4420: LD_INT 1
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PUSH
4427: LD_INT 23
4429: PUSH
4430: LD_INT 3
4432: PUSH
4433: EMPTY
4434: LIST
4435: LIST
4436: PUSH
4437: LD_INT 21
4439: PUSH
4440: LD_INT 2
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: PUSH
4447: LD_INT 34
4449: PUSH
4450: LD_INT 42
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: LIST
4461: LIST
4462: PPUSH
4463: CALL_OW 69
4467: IFFALSE 4888
4469: GO 4471
4471: DISABLE
4472: LD_INT 0
4474: PPUSH
4475: PPUSH
4476: PPUSH
4477: PPUSH
4478: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4479: LD_ADDR_VAR 0 1
4483: PUSH
4484: LD_INT 22
4486: PUSH
4487: LD_INT 1
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: PUSH
4494: LD_INT 23
4496: PUSH
4497: LD_INT 3
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: PUSH
4504: LD_INT 21
4506: PUSH
4507: LD_INT 2
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PUSH
4514: LD_INT 34
4516: PUSH
4517: LD_INT 42
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: PPUSH
4530: CALL_OW 69
4534: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4535: LD_ADDR_VAR 0 3
4539: PUSH
4540: LD_INT 22
4542: PUSH
4543: LD_INT 1
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: PUSH
4550: LD_INT 21
4552: PUSH
4553: LD_INT 1
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: PUSH
4560: LD_INT 26
4562: PUSH
4563: LD_INT 1
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: LIST
4574: PPUSH
4575: CALL_OW 69
4579: PUSH
4580: LD_EXP 1
4584: PUSH
4585: LD_EXP 3
4589: PUSH
4590: LD_EXP 2
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: LIST
4599: DIFF
4600: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4601: LD_ADDR_VAR 0 4
4605: PUSH
4606: LD_INT 22
4608: PUSH
4609: LD_INT 1
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: PUSH
4616: LD_INT 21
4618: PUSH
4619: LD_INT 1
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PUSH
4626: LD_INT 26
4628: PUSH
4629: LD_INT 2
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: LIST
4640: PPUSH
4641: CALL_OW 69
4645: PUSH
4646: LD_EXP 4
4650: PUSH
4651: EMPTY
4652: LIST
4653: DIFF
4654: ST_TO_ADDR
// if not tmp then
4655: LD_VAR 0 1
4659: NOT
4660: IFFALSE 4664
// exit ;
4662: GO 4888
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4664: LD_ADDR_VAR 0 2
4668: PUSH
4669: LD_VAR 0 1
4673: PUSH
4674: LD_INT 1
4676: ARRAY
4677: PPUSH
4678: CALL_OW 311
4682: ST_TO_ADDR
// if not speaker then
4683: LD_VAR 0 2
4687: NOT
4688: IFFALSE 4692
// exit ;
4690: GO 4888
// DialogueOn ;
4692: CALL_OW 6
// if speaker = JMM then
4696: LD_VAR 0 2
4700: PUSH
4701: LD_EXP 1
4705: EQUAL
4706: IFFALSE 4740
// begin if Lisa then
4708: LD_EXP 4
4712: IFFALSE 4726
// Say ( Lisa , DX2b-Lisa-1 ) ;
4714: LD_EXP 4
4718: PPUSH
4719: LD_STRING DX2b-Lisa-1
4721: PPUSH
4722: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4726: LD_EXP 1
4730: PPUSH
4731: LD_STRING DX2b-JMM-1
4733: PPUSH
4734: CALL_OW 88
// end else
4738: GO 4884
// begin Say ( JMM , DX2a-JMM-1 ) ;
4740: LD_EXP 1
4744: PPUSH
4745: LD_STRING DX2a-JMM-1
4747: PPUSH
4748: CALL_OW 88
// if speaker = Bobby then
4752: LD_VAR 0 2
4756: PUSH
4757: LD_EXP 2
4761: EQUAL
4762: IFFALSE 4776
// Say ( Bobby , DX2a-Bobby-1 ) ;
4764: LD_EXP 2
4768: PPUSH
4769: LD_STRING DX2a-Bobby-1
4771: PPUSH
4772: CALL_OW 88
// if speaker = Cyrus then
4776: LD_VAR 0 2
4780: PUSH
4781: LD_EXP 3
4785: EQUAL
4786: IFFALSE 4800
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4788: LD_EXP 3
4792: PPUSH
4793: LD_STRING DX2a-Cyrus-1
4795: PPUSH
4796: CALL_OW 88
// if speaker = Lisa then
4800: LD_VAR 0 2
4804: PUSH
4805: LD_EXP 4
4809: EQUAL
4810: IFFALSE 4824
// Say ( Lisa , DX2a-Lisa-1 ) ;
4812: LD_EXP 4
4816: PPUSH
4817: LD_STRING DX2a-Lisa-1
4819: PPUSH
4820: CALL_OW 88
// if speaker in temp1 then
4824: LD_VAR 0 2
4828: PUSH
4829: LD_VAR 0 3
4833: IN
4834: IFFALSE 4848
// Say ( speaker , DX2a-Sol1-1 ) ;
4836: LD_VAR 0 2
4840: PPUSH
4841: LD_STRING DX2a-Sol1-1
4843: PPUSH
4844: CALL_OW 88
// if speaker in temp2 then
4848: LD_VAR 0 2
4852: PUSH
4853: LD_VAR 0 4
4857: IN
4858: IFFALSE 4872
// Say ( speaker , DX2a-FSol1-1 ) ;
4860: LD_VAR 0 2
4864: PPUSH
4865: LD_STRING DX2a-FSol1-1
4867: PPUSH
4868: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4872: LD_EXP 1
4876: PPUSH
4877: LD_STRING DX2a-JMM-2
4879: PPUSH
4880: CALL_OW 88
// end ; DialogueOff ;
4884: CALL_OW 7
// end ;
4888: PPOPN 5
4890: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4891: LD_INT 1
4893: PPUSH
4894: CALL_OW 255
4898: PUSH
4899: LD_INT 1
4901: EQUAL
4902: IFTRUE 4917
4904: PUSH
4905: LD_INT 10
4907: PPUSH
4908: CALL_OW 255
4912: PUSH
4913: LD_INT 1
4915: EQUAL
4916: OR
4917: IFFALSE 4977
4919: GO 4921
4921: DISABLE
// begin DialogueOn ;
4922: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4926: LD_EXP 1
4930: PPUSH
4931: LD_STRING D3-JMM-1
4933: PPUSH
4934: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4938: LD_EXP 9
4942: PPUSH
4943: LD_STRING D3-Pow-1
4945: PPUSH
4946: CALL_OW 586
// if IsOK ( Cyrus ) then
4950: LD_EXP 3
4954: PPUSH
4955: CALL_OW 302
4959: IFFALSE 4973
// Say ( Cyrus , D3-Cyrus-1 ) ;
4961: LD_EXP 3
4965: PPUSH
4966: LD_STRING D3-Cyrus-1
4968: PPUSH
4969: CALL_OW 88
// DialogueOff ;
4973: CALL_OW 7
// end ;
4977: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and IsOk ( dep1 ) and IsOk ( dep2 ) do var temp , tmp , i ;
4978: LD_INT 1
4980: PPUSH
4981: CALL_OW 255
4985: PUSH
4986: LD_INT 1
4988: EQUAL
4989: IFFALSE 5004
4991: PUSH
4992: LD_INT 10
4994: PPUSH
4995: CALL_OW 255
4999: PUSH
5000: LD_INT 1
5002: EQUAL
5003: AND
5004: IFFALSE 5015
5006: PUSH
5007: LD_INT 1
5009: PPUSH
5010: CALL_OW 302
5014: AND
5015: IFFALSE 5026
5017: PUSH
5018: LD_INT 10
5020: PPUSH
5021: CALL_OW 302
5025: AND
5026: IFFALSE 6418
5028: GO 5030
5030: DISABLE
5031: LD_INT 0
5033: PPUSH
5034: PPUSH
5035: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5036: LD_ADDR_VAR 0 2
5040: PUSH
5041: LD_INT 22
5043: PUSH
5044: LD_INT 3
5046: PUSH
5047: EMPTY
5048: LIST
5049: LIST
5050: PUSH
5051: LD_INT 21
5053: PUSH
5054: LD_INT 1
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: EMPTY
5062: LIST
5063: LIST
5064: PPUSH
5065: CALL_OW 69
5069: ST_TO_ADDR
// if tmp then
5070: LD_VAR 0 2
5074: IFFALSE 5135
// begin for i in tmp do
5076: LD_ADDR_VAR 0 3
5080: PUSH
5081: LD_VAR 0 2
5085: PUSH
5086: FOR_IN
5087: IFFALSE 5133
// begin if IsInUnit ( i ) then
5089: LD_VAR 0 3
5093: PPUSH
5094: CALL_OW 310
5098: IFFALSE 5109
// ComExitBuilding ( i ) ;
5100: LD_VAR 0 3
5104: PPUSH
5105: CALL_OW 122
// wait ( 0 0$1 ) ;
5109: LD_INT 35
5111: PPUSH
5112: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
5116: LD_VAR 0 3
5120: PPUSH
5121: LD_INT 54
5123: PPUSH
5124: LD_INT 17
5126: PPUSH
5127: CALL_OW 174
// end ;
5131: GO 5086
5133: POP
5134: POP
// end ; wait ( 0 0$03 ) ;
5135: LD_INT 105
5137: PPUSH
5138: CALL_OW 67
// DialogueOn ;
5142: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5146: LD_EXP 1
5150: PPUSH
5151: LD_STRING D3a-JMM-1
5153: PPUSH
5154: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-1 ) ;
5158: LD_EXP 9
5162: PPUSH
5163: LD_STRING D3a-Pow-1
5165: PPUSH
5166: CALL_OW 586
// Say ( JMM , D3a-JMM-2 ) ;
5170: LD_EXP 1
5174: PPUSH
5175: LD_STRING D3a-JMM-2
5177: PPUSH
5178: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-2 ) ;
5182: LD_EXP 9
5186: PPUSH
5187: LD_STRING D3a-Pow-2
5189: PPUSH
5190: CALL_OW 586
// Say ( JMM , D3a-JMM-3 ) ;
5194: LD_EXP 1
5198: PPUSH
5199: LD_STRING D3a-JMM-3
5201: PPUSH
5202: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-3 ) ;
5206: LD_EXP 9
5210: PPUSH
5211: LD_STRING D3a-Pow-3
5213: PPUSH
5214: CALL_OW 586
// Say ( JMM , D3a-JMM-4 ) ;
5218: LD_EXP 1
5222: PPUSH
5223: LD_STRING D3a-JMM-4
5225: PPUSH
5226: CALL_OW 88
// DialogueOff ;
5230: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5234: LD_STRING M2
5236: PPUSH
5237: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5241: LD_EXP 1
5245: PPUSH
5246: LD_STRING D3b-JMM-1
5248: PPUSH
5249: CALL_OW 88
// Hint ( Depot2 ) ;
5253: LD_STRING Depot2
5255: PPUSH
5256: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5260: LD_INT 35
5262: PPUSH
5263: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5267: LD_INT 22
5269: PPUSH
5270: LD_INT 22
5272: PUSH
5273: LD_INT 1
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: PUSH
5280: LD_INT 25
5282: PUSH
5283: LD_INT 2
5285: PUSH
5286: EMPTY
5287: LIST
5288: LIST
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: PPUSH
5294: CALL_OW 70
5298: IFFALSE 5331
5300: PUSH
5301: LD_INT 22
5303: PUSH
5304: LD_INT 3
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: PUSH
5311: LD_INT 21
5313: PUSH
5314: LD_INT 1
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PUSH
5321: EMPTY
5322: LIST
5323: LIST
5324: PPUSH
5325: CALL_OW 69
5329: NOT
5330: AND
5331: IFFALSE 5260
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5333: LD_ADDR_VAR 0 1
5337: PUSH
5338: LD_INT 22
5340: PUSH
5341: LD_INT 1
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: PUSH
5348: LD_INT 23
5350: PUSH
5351: LD_INT 1
5353: PUSH
5354: EMPTY
5355: LIST
5356: LIST
5357: PUSH
5358: LD_INT 25
5360: PUSH
5361: LD_INT 2
5363: PUSH
5364: EMPTY
5365: LIST
5366: LIST
5367: PUSH
5368: LD_INT 50
5370: PUSH
5371: EMPTY
5372: LIST
5373: PUSH
5374: LD_INT 56
5376: PUSH
5377: EMPTY
5378: LIST
5379: PUSH
5380: EMPTY
5381: LIST
5382: LIST
5383: LIST
5384: LIST
5385: LIST
5386: PPUSH
5387: CALL_OW 69
5391: PUSH
5392: LD_EXP 1
5396: PUSH
5397: LD_EXP 5
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: DIFF
5406: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5407: LD_INT 35
5409: PPUSH
5410: CALL_OW 67
// until temp > 0 ;
5414: LD_VAR 0 1
5418: PUSH
5419: LD_INT 0
5421: GREATER
5422: IFFALSE 5333
// wait ( 0 0$5 ) ;
5424: LD_INT 175
5426: PPUSH
5427: CALL_OW 67
// PrepareRussianHeroes ;
5431: CALL 12185 0 0
// InGameOn ;
5435: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5439: LD_EXP 8
5443: PPUSH
5444: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5448: LD_EXP 1
5452: PUSH
5453: LD_VAR 0 1
5457: PUSH
5458: LD_INT 1
5460: ARRAY
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: PPUSH
5466: LD_EXP 8
5470: PPUSH
5471: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5475: LD_EXP 8
5479: PPUSH
5480: LD_VAR 0 1
5484: PUSH
5485: LD_INT 1
5487: ARRAY
5488: PPUSH
5489: CALL_OW 119
// wait ( 0 0$02 ) ;
5493: LD_INT 70
5495: PPUSH
5496: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5500: LD_EXP 8
5504: PPUSH
5505: LD_STRING D4-Mikh-1
5507: PPUSH
5508: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5512: LD_VAR 0 1
5516: PUSH
5517: LD_INT 1
5519: ARRAY
5520: PPUSH
5521: CALL_OW 258
5525: PUSH
5526: LD_INT 1
5528: EQUAL
5529: IFFALSE 5547
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5531: LD_VAR 0 1
5535: PUSH
5536: LD_INT 1
5538: ARRAY
5539: PPUSH
5540: LD_STRING D4-Sol1-1
5542: PPUSH
5543: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5547: LD_VAR 0 1
5551: PUSH
5552: LD_INT 1
5554: ARRAY
5555: PPUSH
5556: CALL_OW 258
5560: PUSH
5561: LD_INT 2
5563: EQUAL
5564: IFFALSE 5582
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5566: LD_VAR 0 1
5570: PUSH
5571: LD_INT 1
5573: ARRAY
5574: PPUSH
5575: LD_STRING D4-FSol1-1
5577: PPUSH
5578: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5582: LD_EXP 8
5586: PPUSH
5587: LD_STRING D4-Mikh-2
5589: PPUSH
5590: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5594: LD_VAR 0 1
5598: PUSH
5599: LD_INT 1
5601: ARRAY
5602: PPUSH
5603: CALL_OW 258
5607: PUSH
5608: LD_INT 1
5610: EQUAL
5611: IFFALSE 5629
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5613: LD_VAR 0 1
5617: PUSH
5618: LD_INT 1
5620: ARRAY
5621: PPUSH
5622: LD_STRING D4-Sol1-2
5624: PPUSH
5625: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5629: LD_VAR 0 1
5633: PUSH
5634: LD_INT 1
5636: ARRAY
5637: PPUSH
5638: CALL_OW 258
5642: PUSH
5643: LD_INT 2
5645: EQUAL
5646: IFFALSE 5664
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5648: LD_VAR 0 1
5652: PUSH
5653: LD_INT 1
5655: ARRAY
5656: PPUSH
5657: LD_STRING D4-FSol1-2
5659: PPUSH
5660: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5664: LD_EXP 8
5668: PPUSH
5669: LD_STRING D4-Mikh-3
5671: PPUSH
5672: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5676: LD_VAR 0 1
5680: PUSH
5681: LD_INT 1
5683: ARRAY
5684: PPUSH
5685: CALL_OW 258
5689: PUSH
5690: LD_INT 1
5692: EQUAL
5693: IFFALSE 5711
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5695: LD_VAR 0 1
5699: PUSH
5700: LD_INT 1
5702: ARRAY
5703: PPUSH
5704: LD_STRING D4-Sol1-3
5706: PPUSH
5707: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5711: LD_VAR 0 1
5715: PUSH
5716: LD_INT 1
5718: ARRAY
5719: PPUSH
5720: CALL_OW 258
5724: PUSH
5725: LD_INT 2
5727: EQUAL
5728: IFFALSE 5746
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5730: LD_VAR 0 1
5734: PUSH
5735: LD_INT 1
5737: ARRAY
5738: PPUSH
5739: LD_STRING D4-FSol1-3
5741: PPUSH
5742: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5746: LD_EXP 8
5750: PPUSH
5751: LD_STRING D4-Mikh-4
5753: PPUSH
5754: CALL_OW 88
// case Query ( Qs1 ) of 1 :
5758: LD_STRING Qs1
5760: PPUSH
5761: CALL_OW 97
5765: PUSH
5766: LD_INT 1
5768: DOUBLE
5769: EQUAL
5770: IFTRUE 5774
5772: GO 5809
5774: POP
// begin InGameOff ;
5775: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5779: LD_INT 1
5781: PPUSH
5782: LD_INT 6
5784: PPUSH
5785: LD_INT 2
5787: PPUSH
5788: LD_INT 1
5790: PPUSH
5791: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5795: LD_EXP 8
5799: PPUSH
5800: LD_INT 17
5802: PPUSH
5803: CALL_OW 113
// end ; 2 :
5807: GO 6402
5809: LD_INT 2
5811: DOUBLE
5812: EQUAL
5813: IFTRUE 5817
5815: GO 6367
5817: POP
// begin repeat wait ( 0 0$1 ) ;
5818: LD_INT 35
5820: PPUSH
5821: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5825: LD_VAR 0 1
5829: PUSH
5830: LD_INT 1
5832: ARRAY
5833: PPUSH
5834: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5838: LD_VAR 0 1
5842: PUSH
5843: LD_INT 1
5845: ARRAY
5846: PPUSH
5847: LD_EXP 1
5851: PPUSH
5852: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5856: LD_EXP 8
5860: PPUSH
5861: LD_EXP 1
5865: PPUSH
5866: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5870: LD_EXP 1
5874: PPUSH
5875: LD_EXP 8
5879: PPUSH
5880: CALL_OW 296
5884: PUSH
5885: LD_INT 5
5887: LESS
5888: IFFALSE 5818
// ComTurnUnit ( Mikhail , JMM ) ;
5890: LD_EXP 8
5894: PPUSH
5895: LD_EXP 1
5899: PPUSH
5900: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5904: LD_EXP 1
5908: PPUSH
5909: LD_STRING D4b-JMM-1
5911: PPUSH
5912: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5916: LD_EXP 8
5920: PPUSH
5921: LD_STRING D4b-Mikh-1
5923: PPUSH
5924: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5928: LD_EXP 1
5932: PPUSH
5933: LD_STRING D4b-JMM-2
5935: PPUSH
5936: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5940: LD_EXP 8
5944: PPUSH
5945: LD_STRING D4b-Mikh-2
5947: PPUSH
5948: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5952: LD_EXP 1
5956: PPUSH
5957: LD_STRING D4b-JMM-3
5959: PPUSH
5960: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5964: LD_EXP 8
5968: PPUSH
5969: LD_STRING D4b-Mikh-3
5971: PPUSH
5972: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5976: LD_EXP 1
5980: PPUSH
5981: LD_STRING D4b-JMM-4
5983: PPUSH
5984: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5988: LD_EXP 8
5992: PPUSH
5993: LD_STRING D4b-Mikh-4
5995: PPUSH
5996: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
6000: LD_EXP 1
6004: PPUSH
6005: LD_STRING D4b-JMM-5
6007: PPUSH
6008: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
6012: LD_EXP 8
6016: PPUSH
6017: LD_STRING D4b-Mikh-5
6019: PPUSH
6020: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
6024: LD_EXP 1
6028: PPUSH
6029: LD_STRING D4b-JMM-6
6031: PPUSH
6032: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
6036: LD_EXP 8
6040: PPUSH
6041: LD_STRING D4b-Mikh-6
6043: PPUSH
6044: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
6048: LD_EXP 1
6052: PPUSH
6053: LD_STRING D4b-JMM-7
6055: PPUSH
6056: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
6060: LD_EXP 8
6064: PPUSH
6065: LD_STRING D4b-Mikh-7
6067: PPUSH
6068: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6072: LD_VAR 0 1
6076: PUSH
6077: LD_INT 1
6079: ARRAY
6080: PPUSH
6081: CALL_OW 258
6085: PUSH
6086: LD_INT 1
6088: EQUAL
6089: IFFALSE 6107
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6091: LD_VAR 0 1
6095: PUSH
6096: LD_INT 1
6098: ARRAY
6099: PPUSH
6100: LD_STRING D4b-Sol1-7
6102: PPUSH
6103: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6107: LD_VAR 0 1
6111: PUSH
6112: LD_INT 1
6114: ARRAY
6115: PPUSH
6116: CALL_OW 258
6120: PUSH
6121: LD_INT 2
6123: EQUAL
6124: IFFALSE 6142
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6126: LD_VAR 0 1
6130: PUSH
6131: LD_INT 1
6133: ARRAY
6134: PPUSH
6135: LD_STRING D4b-FSol1-7
6137: PPUSH
6138: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6142: LD_EXP 1
6146: PPUSH
6147: LD_STRING D4b-JMM-8
6149: PPUSH
6150: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6154: LD_VAR 0 1
6158: PUSH
6159: LD_INT 1
6161: ARRAY
6162: PPUSH
6163: CALL_OW 258
6167: PUSH
6168: LD_INT 1
6170: EQUAL
6171: IFFALSE 6189
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6173: LD_VAR 0 1
6177: PUSH
6178: LD_INT 1
6180: ARRAY
6181: PPUSH
6182: LD_STRING D4b-Sol1-8
6184: PPUSH
6185: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6189: LD_VAR 0 1
6193: PUSH
6194: LD_INT 1
6196: ARRAY
6197: PPUSH
6198: CALL_OW 258
6202: PUSH
6203: LD_INT 2
6205: EQUAL
6206: IFFALSE 6224
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6208: LD_VAR 0 1
6212: PUSH
6213: LD_INT 1
6215: ARRAY
6216: PPUSH
6217: LD_STRING D4b-FSol1-8
6219: PPUSH
6220: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6224: LD_EXP 1
6228: PPUSH
6229: LD_STRING D4b-JMM-9
6231: PPUSH
6232: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6236: LD_EXP 8
6240: PPUSH
6241: LD_INT 1
6243: PPUSH
6244: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6248: LD_ADDR_VAR 0 3
6252: PUSH
6253: LD_INT 22
6255: PUSH
6256: LD_INT 1
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PUSH
6263: EMPTY
6264: LIST
6265: PPUSH
6266: CALL_OW 69
6270: PUSH
6271: FOR_IN
6272: IFFALSE 6285
// ComFree ( i ) ;
6274: LD_VAR 0 3
6278: PPUSH
6279: CALL_OW 139
6283: GO 6271
6285: POP
6286: POP
// repeat wait ( 0 0$1 ) ;
6287: LD_INT 35
6289: PPUSH
6290: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6294: LD_EXP 8
6298: PPUSH
6299: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6303: LD_EXP 8
6307: PUSH
6308: LD_VAR 0 1
6312: PUSH
6313: LD_INT 1
6315: ARRAY
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PPUSH
6321: LD_INT 1
6323: PPUSH
6324: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6328: LD_EXP 8
6332: PPUSH
6333: CALL_OW 310
6337: IFFALSE 6287
// mikhailDepot = IsInUnit ( Mikhail ) ;
6339: LD_ADDR_EXP 23
6343: PUSH
6344: LD_EXP 8
6348: PPUSH
6349: CALL_OW 310
6353: ST_TO_ADDR
// InGameOff ;
6354: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6358: LD_STRING M3
6360: PPUSH
6361: CALL_OW 337
// end ; 3 :
6365: GO 6402
6367: LD_INT 3
6369: DOUBLE
6370: EQUAL
6371: IFTRUE 6375
6373: GO 6401
6375: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6376: LD_EXP 8
6380: PPUSH
6381: LD_INT 17
6383: PPUSH
6384: CALL_OW 113
// wait ( 0 0$3 ) ;
6388: LD_INT 105
6390: PPUSH
6391: CALL_OW 67
// InGameOff ;
6395: CALL_OW 9
// end ; end ;
6399: GO 6402
6401: POP
// PrepareTigers ;
6402: CALL 16114 0 0
// RussianTrap ;
6406: CALL 10508 0 0
// tigersRespawn := true ;
6410: LD_ADDR_EXP 30
6414: PUSH
6415: LD_INT 1
6417: ST_TO_ADDR
// end ;
6418: PPOPN 3
6420: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6421: LD_INT 1
6423: PPUSH
6424: CALL_OW 255
6428: PUSH
6429: LD_INT 1
6431: EQUAL
6432: IFFALSE 6447
6434: PUSH
6435: LD_INT 10
6437: PPUSH
6438: CALL_OW 255
6442: PUSH
6443: LD_INT 1
6445: EQUAL
6446: AND
6447: IFFALSE 6470
6449: PUSH
6450: LD_INT 1
6452: PPUSH
6453: CALL_OW 274
6457: PPUSH
6458: LD_INT 1
6460: PPUSH
6461: CALL_OW 275
6465: PUSH
6466: LD_INT 100
6468: GREATEREQUAL
6469: AND
6470: IFFALSE 6619
6472: GO 6474
6474: DISABLE
6475: LD_INT 0
6477: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6478: LD_INT 2100
6480: PPUSH
6481: LD_INT 4200
6483: PPUSH
6484: CALL_OW 12
6488: PUSH
6489: LD_INT 1050
6491: PLUS
6492: PPUSH
6493: CALL_OW 67
// PrepareCargoBays ;
6497: CALL 13445 0 0
// cargoRespawn = 1 ;
6501: LD_ADDR_EXP 28
6505: PUSH
6506: LD_INT 1
6508: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6509: LD_ADDR_VAR 0 1
6513: PUSH
6514: LD_EXP 15
6518: PUSH
6519: LD_EXP 16
6523: PUSH
6524: LD_EXP 17
6528: PUSH
6529: LD_EXP 18
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6540: LD_VAR 0 1
6544: PPUSH
6545: LD_INT 17
6547: PPUSH
6548: LD_INT 10
6550: PPUSH
6551: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6555: LD_VAR 0 1
6559: PPUSH
6560: LD_INT 36
6562: PPUSH
6563: LD_INT 13
6565: PPUSH
6566: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6570: LD_VAR 0 1
6574: PPUSH
6575: LD_INT 40
6577: PPUSH
6578: LD_INT 20
6580: PPUSH
6581: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6585: LD_VAR 0 1
6589: PPUSH
6590: LD_INT 53
6592: PPUSH
6593: LD_INT 16
6595: PPUSH
6596: CALL_OW 171
// wait ( 0 0$5 ) ;
6600: LD_INT 175
6602: PPUSH
6603: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6607: LD_EXP 17
6611: PPUSH
6612: LD_STRING D5-Rus2-1
6614: PPUSH
6615: CALL_OW 88
// end ;
6619: PPOPN 1
6621: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6622: LD_EXP 28
6626: PUSH
6627: LD_INT 1
6629: EQUAL
6630: IFFALSE 6787
6632: GO 6634
6634: DISABLE
6635: LD_INT 0
6637: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6638: LD_ADDR_VAR 0 1
6642: PUSH
6643: LD_INT 22
6645: PUSH
6646: LD_INT 3
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PUSH
6653: LD_INT 21
6655: PUSH
6656: LD_INT 2
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PUSH
6663: LD_INT 34
6665: PUSH
6666: LD_INT 51
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: LIST
6677: PPUSH
6678: CALL_OW 69
6682: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6683: LD_INT 105
6685: PPUSH
6686: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6690: LD_VAR 0 1
6694: PPUSH
6695: LD_INT 3
6697: PUSH
6698: LD_INT 60
6700: PUSH
6701: EMPTY
6702: LIST
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: PPUSH
6708: CALL_OW 72
6712: IFTRUE 6742
6714: PUSH
6715: LD_VAR 0 1
6719: PPUSH
6720: LD_INT 3
6722: PUSH
6723: LD_INT 24
6725: PUSH
6726: LD_INT 980
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PPUSH
6737: CALL_OW 72
6741: OR
6742: IFFALSE 6683
// ComMoveXY ( cargos , 7 , 9 ) ;
6744: LD_VAR 0 1
6748: PPUSH
6749: LD_INT 7
6751: PPUSH
6752: LD_INT 9
6754: PPUSH
6755: CALL_OW 111
// cargoSee = 1 ;
6759: LD_ADDR_EXP 29
6763: PUSH
6764: LD_INT 1
6766: ST_TO_ADDR
// cargoEscape = 1 ;
6767: LD_ADDR_EXP 20
6771: PUSH
6772: LD_INT 1
6774: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6775: LD_EXP 17
6779: PPUSH
6780: LD_STRING D5-Rus2-1a
6782: PPUSH
6783: CALL_OW 88
// end ;
6787: PPOPN 1
6789: END
// every 0 0$1 trigger cargoEscape and UnitFilter ( [ cargo1 , cargo2 ] , [ [ f_ok ] , [ f_side , 3 ] , [ f_placed ] ] ) do var cr , i , x , y ;
6790: LD_EXP 20
6794: IFFALSE 6843
6796: PUSH
6797: LD_EXP 15
6801: PUSH
6802: LD_EXP 16
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: PPUSH
6811: LD_INT 50
6813: PUSH
6814: EMPTY
6815: LIST
6816: PUSH
6817: LD_INT 22
6819: PUSH
6820: LD_INT 3
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PUSH
6827: LD_INT 52
6829: PUSH
6830: EMPTY
6831: LIST
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: LIST
6837: PPUSH
6838: CALL_OW 72
6842: AND
6843: IFFALSE 7180
6845: GO 6847
6847: DISABLE
6848: LD_INT 0
6850: PPUSH
6851: PPUSH
6852: PPUSH
6853: PPUSH
// begin enable ;
6854: ENABLE
// for i in [ cargo1 , cargo2 ] do
6855: LD_ADDR_VAR 0 2
6859: PUSH
6860: LD_EXP 15
6864: PUSH
6865: LD_EXP 16
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: FOR_IN
6875: IFFALSE 7178
// begin cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
6877: LD_ADDR_VAR 0 1
6881: PUSH
6882: LD_VAR 0 2
6886: PPUSH
6887: CALL_OW 250
6891: PPUSH
6892: LD_VAR 0 2
6896: PPUSH
6897: CALL_OW 251
6901: PPUSH
6902: LD_INT 6
6904: PPUSH
6905: CALL 80859 0 3
6909: ST_TO_ADDR
// if cr and GetMultiCargo ( i ) [ 4 ] < 60 then
6910: LD_VAR 0 1
6914: IFFALSE 6935
6916: PUSH
6917: LD_VAR 0 2
6921: PPUSH
6922: CALL 82090 0 1
6926: PUSH
6927: LD_INT 4
6929: ARRAY
6930: PUSH
6931: LD_INT 60
6933: LESS
6934: AND
6935: IFFALSE 6974
// ComCollect ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
6937: LD_VAR 0 2
6941: PPUSH
6942: LD_VAR 0 1
6946: PUSH
6947: LD_INT 1
6949: ARRAY
6950: PUSH
6951: LD_INT 1
6953: ARRAY
6954: PPUSH
6955: LD_VAR 0 1
6959: PUSH
6960: LD_INT 1
6962: ARRAY
6963: PUSH
6964: LD_INT 2
6966: ARRAY
6967: PPUSH
6968: CALL_OW 117
6972: GO 7176
// if not IsInArea ( i , RemoveArea ) then
6974: LD_VAR 0 2
6978: PPUSH
6979: LD_INT 32
6981: PPUSH
6982: CALL_OW 308
6986: NOT
6987: IFFALSE 7137
// begin x := ShiftX ( GetX ( i ) , 4 , 3 ) ;
6989: LD_ADDR_VAR 0 3
6993: PUSH
6994: LD_VAR 0 2
6998: PPUSH
6999: CALL_OW 250
7003: PPUSH
7004: LD_INT 4
7006: PPUSH
7007: LD_INT 3
7009: PPUSH
7010: CALL_OW 272
7014: ST_TO_ADDR
// y := GetY ( i ) ;
7015: LD_ADDR_VAR 0 4
7019: PUSH
7020: LD_VAR 0 2
7024: PPUSH
7025: CALL_OW 251
7029: ST_TO_ADDR
// if HexInfo ( x , y ) then
7030: LD_VAR 0 3
7034: PPUSH
7035: LD_VAR 0 4
7039: PPUSH
7040: CALL_OW 428
7044: IFFALSE 7067
// x := ShiftX ( x , 4 , 3 ) ;
7046: LD_ADDR_VAR 0 3
7050: PUSH
7051: LD_VAR 0 3
7055: PPUSH
7056: LD_INT 4
7058: PPUSH
7059: LD_INT 3
7061: PPUSH
7062: CALL_OW 272
7066: ST_TO_ADDR
// if HexInfo ( x , y ) or not ValidHex ( x , y ) then
7067: LD_VAR 0 3
7071: PPUSH
7072: LD_VAR 0 4
7076: PPUSH
7077: CALL_OW 428
7081: IFTRUE 7100
7083: PUSH
7084: LD_VAR 0 3
7088: PPUSH
7089: LD_VAR 0 4
7093: PPUSH
7094: CALL_OW 488
7098: NOT
7099: OR
7100: IFFALSE 7116
// ComMoveToArea ( i , RemoveArea ) else
7102: LD_VAR 0 2
7106: PPUSH
7107: LD_INT 32
7109: PPUSH
7110: CALL_OW 113
7114: GO 7135
// ComMoveXY ( i , x , y ) ;
7116: LD_VAR 0 2
7120: PPUSH
7121: LD_VAR 0 3
7125: PPUSH
7126: LD_VAR 0 4
7130: PPUSH
7131: CALL_OW 111
// end else
7135: GO 7176
// begin RemoveUnit ( IsDrivenBy ( i ) ) ;
7137: LD_VAR 0 2
7141: PPUSH
7142: CALL_OW 311
7146: PPUSH
7147: CALL_OW 64
// RemoveUnit ( i ) ;
7151: LD_VAR 0 2
7155: PPUSH
7156: CALL_OW 64
// cargoEscape := cargoEscape + 1 ;
7160: LD_ADDR_EXP 20
7164: PUSH
7165: LD_EXP 20
7169: PUSH
7170: LD_INT 1
7172: PLUS
7173: ST_TO_ADDR
// continue ;
7174: GO 6874
// end ; end ;
7176: GO 6874
7178: POP
7179: POP
// end ;
7180: PPOPN 4
7182: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
7183: LD_EXP 20
7187: PUSH
7188: LD_INT 1
7190: GREATER
7191: IFFALSE 7440
7193: GO 7195
7195: DISABLE
7196: LD_INT 0
7198: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
7199: LD_INT 4
7201: PPUSH
7202: LD_INT 1
7204: PPUSH
7205: LD_INT 1
7207: PPUSH
7208: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
7212: LD_INT 31
7214: PPUSH
7215: LD_INT 1
7217: PPUSH
7218: LD_INT 1
7220: PPUSH
7221: CALL_OW 324
// Hint ( Bunker ) ;
7225: LD_STRING Bunker
7227: PPUSH
7228: CALL_OW 339
// if IsOK ( Jerry ) then
7232: LD_EXP 7
7236: PPUSH
7237: CALL_OW 302
7241: IFFALSE 7257
// Say ( Jerry , D5a-Sol1-1 ) else
7243: LD_EXP 7
7247: PPUSH
7248: LD_STRING D5a-Sol1-1
7250: PPUSH
7251: CALL_OW 88
7255: GO 7343
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
7257: LD_ADDR_VAR 0 1
7261: PUSH
7262: LD_INT 22
7264: PUSH
7265: LD_INT 1
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: LD_INT 26
7274: PUSH
7275: LD_INT 1
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: PPUSH
7286: CALL_OW 69
7290: PUSH
7291: LD_EXP 1
7295: PUSH
7296: LD_EXP 2
7300: PUSH
7301: LD_EXP 3
7305: PUSH
7306: LD_EXP 5
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: DIFF
7317: ST_TO_ADDR
// if not speaker then
7318: LD_VAR 0 1
7322: NOT
7323: IFFALSE 7327
// exit ;
7325: GO 7440
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7327: LD_VAR 0 1
7331: PUSH
7332: LD_INT 1
7334: ARRAY
7335: PPUSH
7336: LD_STRING D5a-Sol1-1
7338: PPUSH
7339: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7343: LD_EXP 1
7347: PPUSH
7348: LD_STRING D5a-JMM-1
7350: PPUSH
7351: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
7355: LD_INT 22
7357: PPUSH
7358: LD_INT 22
7360: PUSH
7361: LD_INT 1
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: PUSH
7368: LD_INT 25
7370: PUSH
7371: LD_INT 2
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PPUSH
7382: CALL_OW 70
7386: IFFALSE 7440
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
7388: LD_INT 22
7390: PPUSH
7391: LD_INT 22
7393: PUSH
7394: LD_INT 1
7396: PUSH
7397: EMPTY
7398: LIST
7399: LIST
7400: PUSH
7401: LD_INT 25
7403: PUSH
7404: LD_INT 2
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: PPUSH
7415: CALL_OW 70
7419: PUSH
7420: LD_INT 1
7422: ARRAY
7423: PPUSH
7424: LD_INT 31
7426: PPUSH
7427: LD_INT 44
7429: PPUSH
7430: LD_INT 13
7432: PPUSH
7433: LD_INT 1
7435: PPUSH
7436: CALL_OW 145
// end ;
7440: PPOPN 1
7442: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7443: LD_INT 1
7445: PPUSH
7446: CALL_OW 255
7450: PUSH
7451: LD_INT 3
7453: EQUAL
7454: IFFALSE 7469
7456: PUSH
7457: LD_INT 1
7459: PPUSH
7460: CALL_OW 256
7464: PUSH
7465: LD_INT 1000
7467: LESS
7468: AND
7469: IFTRUE 7499
7471: PUSH
7472: LD_INT 10
7474: PPUSH
7475: CALL_OW 255
7479: PUSH
7480: LD_INT 3
7482: EQUAL
7483: IFFALSE 7498
7485: PUSH
7486: LD_INT 10
7488: PPUSH
7489: CALL_OW 256
7493: PUSH
7494: LD_INT 1000
7496: LESS
7497: AND
7498: OR
7499: IFFALSE 7516
7501: GO 7503
7503: DISABLE
// Say ( JMM , D8-JMM-1 ) ;
7504: LD_EXP 1
7508: PPUSH
7509: LD_STRING D8-JMM-1
7511: PPUSH
7512: CALL_OW 88
7516: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7517: LD_EXP 8
7521: PPUSH
7522: CALL_OW 310
7526: PUSH
7527: LD_INT 1
7529: EQUAL
7530: IFFALSE 7543
7532: PUSH
7533: LD_EXP 22
7537: PUSH
7538: LD_INT 3
7540: EQUAL
7541: NOT
7542: AND
7543: IFFALSE 7565
7545: GO 7547
7547: DISABLE
// begin enable ;
7548: ENABLE
// mikhailInBase = 1 ;
7549: LD_ADDR_EXP 22
7553: PUSH
7554: LD_INT 1
7556: ST_TO_ADDR
// mikhailStatus = 1 ;
7557: LD_ADDR_EXP 21
7561: PUSH
7562: LD_INT 1
7564: ST_TO_ADDR
// end ;
7565: END
// export function AskMikhail ; begin
7566: LD_INT 0
7568: PPUSH
// case Query ( QMikh2 ) of 1 :
7569: LD_STRING QMikh2
7571: PPUSH
7572: CALL_OW 97
7576: PUSH
7577: LD_INT 1
7579: DOUBLE
7580: EQUAL
7581: IFTRUE 7585
7583: GO 7652
7585: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7586: LD_INT 1
7588: PPUSH
7589: LD_INT 6
7591: PPUSH
7592: LD_INT 2
7594: PPUSH
7595: LD_INT 1
7597: PPUSH
7598: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7602: LD_EXP 8
7606: PPUSH
7607: LD_INT 6
7609: PPUSH
7610: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7614: LD_EXP 8
7618: PPUSH
7619: CALL_OW 122
// wait ( 0 0$1 ) ;
7623: LD_INT 35
7625: PPUSH
7626: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7630: LD_EXP 8
7634: PPUSH
7635: LD_INT 17
7637: PPUSH
7638: CALL_OW 113
// mikhailInbase = 0 ;
7642: LD_ADDR_EXP 22
7646: PUSH
7647: LD_INT 0
7649: ST_TO_ADDR
// end ; 2 :
7650: GO 7893
7652: LD_INT 2
7654: DOUBLE
7655: EQUAL
7656: IFTRUE 7660
7658: GO 7833
7660: POP
// begin mikhailInBase = 2 ;
7661: LD_ADDR_EXP 22
7665: PUSH
7666: LD_INT 2
7668: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7669: LD_EXP 8
7673: PPUSH
7674: LD_INT 6
7676: PPUSH
7677: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7681: LD_EXP 8
7685: PPUSH
7686: CALL_OW 122
// wait ( 0 0$1 ) ;
7690: LD_INT 35
7692: PPUSH
7693: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7697: LD_EXP 8
7701: PPUSH
7702: LD_EXP 8
7706: PPUSH
7707: CALL_OW 250
7711: PUSH
7712: LD_INT 2
7714: PLUS
7715: PPUSH
7716: LD_EXP 8
7720: PPUSH
7721: CALL_OW 251
7725: PUSH
7726: LD_INT 2
7728: PLUS
7729: PPUSH
7730: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7734: LD_EXP 8
7738: PPUSH
7739: LD_EXP 8
7743: PPUSH
7744: CALL_OW 250
7748: PUSH
7749: LD_INT 1
7751: PLUS
7752: PPUSH
7753: LD_EXP 8
7757: PPUSH
7758: CALL_OW 251
7762: PUSH
7763: LD_INT 2
7765: PLUS
7766: PPUSH
7767: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7771: LD_EXP 8
7775: PPUSH
7776: LD_EXP 8
7780: PPUSH
7781: CALL_OW 250
7785: PUSH
7786: LD_INT 2
7788: PLUS
7789: PPUSH
7790: LD_EXP 8
7794: PPUSH
7795: CALL_OW 251
7799: PPUSH
7800: CALL_OW 171
// wait ( 0 0$5 ) ;
7804: LD_INT 175
7806: PPUSH
7807: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7811: LD_EXP 8
7815: PPUSH
7816: LD_INT 25
7818: PPUSH
7819: CALL_OW 113
// mikhailInBase = 4 ;
7823: LD_ADDR_EXP 22
7827: PUSH
7828: LD_INT 4
7830: ST_TO_ADDR
// end ; 3 :
7831: GO 7893
7833: LD_INT 3
7835: DOUBLE
7836: EQUAL
7837: IFTRUE 7841
7839: GO 7892
7841: POP
// begin SetSide ( Mikhail , 6 ) ;
7842: LD_EXP 8
7846: PPUSH
7847: LD_INT 6
7849: PPUSH
7850: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7854: LD_EXP 8
7858: PPUSH
7859: CALL_OW 122
// wait ( 0 0$1 ) ;
7863: LD_INT 35
7865: PPUSH
7866: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7870: LD_EXP 8
7874: PPUSH
7875: LD_INT 17
7877: PPUSH
7878: CALL_OW 113
// mikhailInbase = 3 ;
7882: LD_ADDR_EXP 22
7886: PUSH
7887: LD_INT 3
7889: ST_TO_ADDR
// end ; end ;
7890: GO 7893
7892: POP
// end ;
7893: LD_VAR 0 1
7897: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7898: LD_EXP 8
7902: PPUSH
7903: LD_INT 25
7905: PPUSH
7906: CALL_OW 308
7910: IFFALSE 7922
7912: PUSH
7913: LD_EXP 22
7917: PUSH
7918: LD_INT 4
7920: EQUAL
7921: AND
7922: IFFALSE 8026
7924: GO 7926
7926: DISABLE
// begin enable ;
7927: ENABLE
// mikhailInBase = 1 ;
7928: LD_ADDR_EXP 22
7932: PUSH
7933: LD_INT 1
7935: ST_TO_ADDR
// InGameOn ;
7936: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7940: LD_INT 1
7942: PPUSH
7943: LD_INT 6
7945: PPUSH
7946: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7950: LD_INT 35
7952: PPUSH
7953: CALL_OW 67
// if Carry ( Mikhail ) then
7957: LD_EXP 8
7961: PPUSH
7962: CALL_OW 281
7966: IFFALSE 7977
// ComUnload ( Mikhail ) ;
7968: LD_EXP 8
7972: PPUSH
7973: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7977: LD_EXP 8
7981: PPUSH
7982: LD_INT 1
7984: PPUSH
7985: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7989: LD_EXP 8
7993: PPUSH
7994: CALL_OW 310
7998: IFFALSE 7950
// SetSide ( dep1 , 1 ) ;
8000: LD_INT 1
8002: PPUSH
8003: LD_INT 1
8005: PPUSH
8006: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
8010: LD_EXP 8
8014: PPUSH
8015: LD_INT 1
8017: PPUSH
8018: CALL_OW 235
// InGameOff ;
8022: CALL_OW 9
// end ;
8026: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
8027: LD_EXP 8
8031: PPUSH
8032: CALL_OW 310
8036: IFFALSE 8049
8038: PUSH
8039: LD_EXP 22
8043: PUSH
8044: LD_INT 3
8046: EQUAL
8047: NOT
8048: AND
8049: IFFALSE 8184
8051: GO 8053
8053: DISABLE
// begin enable ;
8054: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
8055: LD_INT 22
8057: PUSH
8058: LD_INT 1
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: PUSH
8065: LD_INT 21
8067: PUSH
8068: LD_INT 1
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: PUSH
8075: LD_INT 91
8077: PUSH
8078: LD_EXP 8
8082: PPUSH
8083: CALL_OW 310
8087: PUSH
8088: LD_INT 10
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: LIST
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: LIST
8100: PPUSH
8101: CALL_OW 69
8105: PUSH
8106: LD_INT 1
8108: EQUAL
8109: IFFALSE 8184
// begin mikhailStatus = 4 ;
8111: LD_ADDR_EXP 21
8115: PUSH
8116: LD_INT 4
8118: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
8119: LD_INT 1
8121: PPUSH
8122: LD_INT 6
8124: PPUSH
8125: LD_INT 2
8127: PPUSH
8128: LD_INT 1
8130: PPUSH
8131: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
8135: LD_EXP 8
8139: PPUSH
8140: LD_INT 6
8142: PPUSH
8143: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
8147: LD_EXP 8
8151: PPUSH
8152: CALL_OW 122
// wait ( 0 0$1 ) ;
8156: LD_INT 35
8158: PPUSH
8159: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
8163: LD_EXP 8
8167: PPUSH
8168: LD_INT 17
8170: PPUSH
8171: CALL_OW 113
// mikhailStatus = 3 ;
8175: LD_ADDR_EXP 21
8179: PUSH
8180: LD_INT 3
8182: ST_TO_ADDR
// disable ;
8183: DISABLE
// end ; end ;
8184: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
8185: LD_EXP 1
8189: PPUSH
8190: LD_EXP 23
8194: PPUSH
8195: CALL_OW 296
8199: PUSH
8200: LD_INT 5
8202: LESS
8203: IFFALSE 8215
8205: PUSH
8206: LD_EXP 21
8210: PUSH
8211: LD_INT 3
8213: EQUAL
8214: AND
8215: IFFALSE 8228
8217: PUSH
8218: LD_EXP 22
8222: PUSH
8223: LD_INT 3
8225: EQUAL
8226: NOT
8227: AND
8228: IFFALSE 8461
8230: GO 8232
8232: DISABLE
8233: LD_INT 0
8235: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
8236: LD_ADDR_VAR 0 1
8240: PUSH
8241: LD_INT 22
8243: PUSH
8244: LD_INT 1
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: PUSH
8251: LD_INT 21
8253: PUSH
8254: LD_INT 1
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: PUSH
8261: LD_INT 26
8263: PUSH
8264: LD_INT 1
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: LIST
8275: PPUSH
8276: CALL_OW 69
8280: PUSH
8281: LD_EXP 1
8285: PUSH
8286: LD_EXP 5
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: DIFF
8295: ST_TO_ADDR
// if not tmp then
8296: LD_VAR 0 1
8300: NOT
8301: IFFALSE 8305
// exit ;
8303: GO 8461
// DialogueOn ;
8305: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
8309: LD_EXP 1
8313: PPUSH
8314: LD_STRING D7-JMM-1
8316: PPUSH
8317: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
8321: LD_VAR 0 1
8325: PUSH
8326: LD_INT 1
8328: ARRAY
8329: PPUSH
8330: LD_STRING D7-Sol1-1
8332: PPUSH
8333: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8337: LD_EXP 1
8341: PPUSH
8342: LD_STRING D7-JMM-2
8344: PPUSH
8345: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8349: LD_VAR 0 1
8353: PUSH
8354: LD_INT 1
8356: ARRAY
8357: PPUSH
8358: LD_STRING D7-Sol1-2
8360: PPUSH
8361: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8365: LD_EXP 1
8369: PPUSH
8370: LD_STRING D7-JMM-3
8372: PPUSH
8373: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8377: LD_VAR 0 1
8381: PUSH
8382: LD_INT 1
8384: ARRAY
8385: PPUSH
8386: LD_STRING D7-Sol1-3
8388: PPUSH
8389: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8393: LD_EXP 3
8397: PPUSH
8398: CALL_OW 302
8402: IFFALSE 8415
8404: PUSH
8405: LD_EXP 4
8409: PPUSH
8410: CALL_OW 302
8414: AND
8415: IFFALSE 8457
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8417: LD_EXP 3
8421: PPUSH
8422: LD_STRING D7-Cyrus-3
8424: PPUSH
8425: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8429: LD_VAR 0 1
8433: PUSH
8434: LD_INT 1
8436: ARRAY
8437: PPUSH
8438: LD_STRING D7-Sol1-4
8440: PPUSH
8441: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8445: LD_EXP 4
8449: PPUSH
8450: LD_STRING D7-Lisa-4
8452: PPUSH
8453: CALL_OW 88
// end ; DialogueOff ;
8457: CALL_OW 7
// end ;
8461: PPOPN 1
8463: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8464: LD_EXP 8
8468: PPUSH
8469: CALL_OW 303
8473: IFFALSE 8485
8475: PUSH
8476: LD_EXP 21
8480: PUSH
8481: LD_INT 3
8483: EQUAL
8484: AND
8485: IFFALSE 8499
8487: GO 8489
8489: DISABLE
// begin enable ;
8490: ENABLE
// mikhailStatus = 2 ;
8491: LD_ADDR_EXP 21
8495: PUSH
8496: LD_INT 2
8498: ST_TO_ADDR
// end ;
8499: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8500: LD_EXP 8
8504: PPUSH
8505: LD_INT 17
8507: PPUSH
8508: CALL_OW 308
8512: IFFALSE 8529
8514: PUSH
8515: LD_EXP 8
8519: PPUSH
8520: CALL_OW 255
8524: PUSH
8525: LD_INT 6
8527: EQUAL
8528: AND
8529: IFFALSE 8562
8531: GO 8533
8533: DISABLE
// begin if not mikhailInBase = 3 then
8534: LD_EXP 22
8538: PUSH
8539: LD_INT 3
8541: EQUAL
8542: NOT
8543: IFFALSE 8553
// mikhailStatus = 3 ;
8545: LD_ADDR_EXP 21
8549: PUSH
8550: LD_INT 3
8552: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8553: LD_EXP 8
8557: PPUSH
8558: CALL_OW 64
// end ;
8562: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8563: LD_EXP 21
8567: PUSH
8568: LD_INT 3
8570: EQUAL
8571: IFFALSE 8588
8573: PUSH
8574: LD_EXP 8
8578: PPUSH
8579: CALL_OW 255
8583: PUSH
8584: LD_INT 6
8586: EQUAL
8587: AND
8588: IFFALSE 8781
8590: GO 8592
8592: DISABLE
8593: LD_INT 0
8595: PPUSH
8596: PPUSH
// begin enable ;
8597: ENABLE
// if IsOk ( Mikhail ) then
8598: LD_EXP 8
8602: PPUSH
8603: CALL_OW 302
8607: IFFALSE 8781
// begin attacker := Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) diff [ JMM , Bobby , Cyrus , Lisa ] ;
8609: LD_ADDR_VAR 0 2
8613: PUSH
8614: LD_EXP 8
8618: PPUSH
8619: LD_INT 22
8621: PUSH
8622: LD_INT 1
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: PUSH
8629: LD_INT 21
8631: PUSH
8632: LD_INT 1
8634: PUSH
8635: EMPTY
8636: LIST
8637: LIST
8638: PUSH
8639: EMPTY
8640: LIST
8641: LIST
8642: PPUSH
8643: CALL_OW 69
8647: PPUSH
8648: CALL 10702 0 2
8652: PUSH
8653: LD_EXP 1
8657: PUSH
8658: LD_EXP 2
8662: PUSH
8663: LD_EXP 3
8667: PUSH
8668: LD_EXP 4
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: DIFF
8679: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 10 then
8680: LD_VAR 0 2
8684: PPUSH
8685: LD_EXP 8
8689: PPUSH
8690: CALL_OW 296
8694: PUSH
8695: LD_INT 10
8697: LESS
8698: IFFALSE 8781
// begin if GetSex ( attacker ) = sex_male then
8700: LD_VAR 0 2
8704: PPUSH
8705: CALL_OW 258
8709: PUSH
8710: LD_INT 1
8712: EQUAL
8713: IFFALSE 8749
// begin disable ;
8715: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8716: LD_VAR 0 2
8720: PPUSH
8721: LD_STRING D7a-Sol1-1
8723: PPUSH
8724: CALL_OW 88
// wait ( 0 0$2 ) ;
8728: LD_INT 70
8730: PPUSH
8731: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8735: LD_VAR 0 2
8739: PPUSH
8740: LD_STRING D7a-Sol1-1a
8742: PPUSH
8743: CALL_OW 88
// end else
8747: GO 8781
// begin disable ;
8749: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8750: LD_VAR 0 2
8754: PPUSH
8755: LD_STRING D7a-FSol1-1
8757: PPUSH
8758: CALL_OW 88
// wait ( 0 0$2 ) ;
8762: LD_INT 70
8764: PPUSH
8765: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8769: LD_VAR 0 2
8773: PPUSH
8774: LD_STRING D7a-FSol1-1a
8776: PPUSH
8777: CALL_OW 88
// end ; end ; end ; end ;
8781: PPOPN 2
8783: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8784: LD_EXP 27
8788: PUSH
8789: LD_INT 1
8791: EQUAL
8792: IFFALSE 8831
8794: PUSH
8795: LD_INT 22
8797: PPUSH
8798: LD_INT 22
8800: PUSH
8801: LD_INT 3
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: PUSH
8808: LD_INT 21
8810: PUSH
8811: LD_INT 1
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: PPUSH
8822: CALL_OW 70
8826: PUSH
8827: LD_INT 2
8829: GREATER
8830: AND
8831: IFFALSE 8884
8833: PUSH
8834: LD_INT 22
8836: PPUSH
8837: LD_INT 22
8839: PUSH
8840: LD_INT 1
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: PUSH
8847: LD_INT 2
8849: PUSH
8850: LD_INT 21
8852: PUSH
8853: LD_INT 1
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: PUSH
8860: LD_INT 59
8862: PUSH
8863: EMPTY
8864: LIST
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: LIST
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PPUSH
8875: CALL_OW 70
8879: PUSH
8880: LD_INT 0
8882: EQUAL
8883: AND
8884: IFFALSE 8899
8886: GO 8888
8888: DISABLE
// SetSide ( dep1 , 3 ) ;
8889: LD_INT 1
8891: PPUSH
8892: LD_INT 3
8894: PPUSH
8895: CALL_OW 235
8899: END
// export function JMMTraitor ; var i ; begin
8900: LD_INT 0
8902: PPUSH
8903: PPUSH
// if traitor then
8904: LD_EXP 33
8908: IFFALSE 8912
// exit ;
8910: GO 9049
// traitor := true ;
8912: LD_ADDR_EXP 33
8916: PUSH
8917: LD_INT 1
8919: ST_TO_ADDR
// if IsOk ( Lisa ) then
8920: LD_EXP 4
8924: PPUSH
8925: CALL_OW 302
8929: IFFALSE 8951
// begin DialogueOn ;
8931: CALL_OW 6
// Say ( Lisa , D10-Lisa-Traitor ) ;
8935: LD_EXP 4
8939: PPUSH
8940: LD_STRING D10-Lisa-Traitor
8942: PPUSH
8943: CALL_OW 88
// DialogueOff ;
8947: CALL_OW 7
// end ; ComExit ( JMM ) ;
8951: LD_EXP 1
8955: PPUSH
8956: CALL 78749 0 1
// SetAttitude ( 1 , 4 , att_enemy , true ) ;
8960: LD_INT 1
8962: PPUSH
8963: LD_INT 4
8965: PPUSH
8966: LD_INT 2
8968: PPUSH
8969: LD_INT 1
8971: PPUSH
8972: CALL_OW 80
// for i in FilterAllUnits ( [ f_side , 1 ] ) diff JMM do
8976: LD_ADDR_VAR 0 2
8980: PUSH
8981: LD_INT 22
8983: PUSH
8984: LD_INT 1
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: PPUSH
8991: CALL_OW 69
8995: PUSH
8996: LD_EXP 1
9000: DIFF
9001: PUSH
9002: FOR_IN
9003: IFFALSE 9033
// begin SetSide ( i , 4 ) ;
9005: LD_VAR 0 2
9009: PPUSH
9010: LD_INT 4
9012: PPUSH
9013: CALL_OW 235
// ComAttackUnit ( i , JMM ) ;
9017: LD_VAR 0 2
9021: PPUSH
9022: LD_EXP 1
9026: PPUSH
9027: CALL_OW 115
// end ;
9031: GO 9002
9033: POP
9034: POP
// wait ( 0 0$30 ) ;
9035: LD_INT 1050
9037: PPUSH
9038: CALL_OW 67
// YouLost ( Traitor ) ;
9042: LD_STRING Traitor
9044: PPUSH
9045: CALL_OW 104
// end ;
9049: LD_VAR 0 1
9053: RET
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
9054: LD_EXP 30
9058: PUSH
9059: LD_INT 1
9061: EQUAL
9062: IFFALSE 9098
9064: PUSH
9065: LD_INT 22
9067: PUSH
9068: LD_INT 0
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: PUSH
9075: LD_INT 25
9077: PUSH
9078: LD_INT 14
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PPUSH
9089: CALL_OW 69
9093: PUSH
9094: LD_INT 0
9096: EQUAL
9097: AND
9098: IFFALSE 9199
9100: GO 9102
9102: DISABLE
9103: LD_INT 0
9105: PPUSH
9106: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
9107: LD_ADDR_VAR 0 2
9111: PUSH
9112: LD_INT 22
9114: PUSH
9115: LD_INT 1
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: PUSH
9122: LD_INT 21
9124: PUSH
9125: LD_INT 1
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PUSH
9132: LD_INT 23
9134: PUSH
9135: LD_INT 1
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: LIST
9146: PPUSH
9147: CALL_OW 69
9151: ST_TO_ADDR
// for i in tmp do
9152: LD_ADDR_VAR 0 1
9156: PUSH
9157: LD_VAR 0 2
9161: PUSH
9162: FOR_IN
9163: IFFALSE 9190
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
9165: LD_VAR 0 1
9169: PPUSH
9170: LD_INT 1
9172: PPUSH
9173: LD_INT 4
9175: PPUSH
9176: CALL_OW 12
9180: PPUSH
9181: LD_INT 300
9183: PPUSH
9184: CALL_OW 492
9188: GO 9162
9190: POP
9191: POP
// SetAchievement ( ACH_TIGER ) ;
9192: LD_STRING ACH_TIGER
9194: PPUSH
9195: CALL_OW 543
// end ;
9199: PPOPN 2
9201: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
9202: LD_INT 22
9204: PUSH
9205: LD_INT 1
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: PUSH
9212: LD_INT 34
9214: PUSH
9215: LD_INT 51
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PPUSH
9226: CALL_OW 69
9230: PUSH
9231: LD_INT 2
9233: GREATEREQUAL
9234: IFFALSE 9246
9236: GO 9238
9238: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
9239: LD_STRING ACH_CARGO
9241: PPUSH
9242: CALL_OW 543
9246: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , un ; begin
9247: LD_INT 0
9249: PPUSH
9250: PPUSH
9251: PPUSH
// for i = 1 to count do
9252: LD_ADDR_VAR 0 8
9256: PUSH
9257: DOUBLE
9258: LD_INT 1
9260: DEC
9261: ST_TO_ADDR
9262: LD_VAR 0 6
9266: PUSH
9267: FOR_TO
9268: IFFALSE 9349
// begin uc_side = side ;
9270: LD_ADDR_OWVAR 20
9274: PUSH
9275: LD_VAR 0 1
9279: ST_TO_ADDR
// uc_nation = nation ;
9280: LD_ADDR_OWVAR 21
9284: PUSH
9285: LD_VAR 0 2
9289: ST_TO_ADDR
// hc_gallery =  ;
9290: LD_ADDR_OWVAR 33
9294: PUSH
9295: LD_STRING 
9297: ST_TO_ADDR
// hc_name =  ;
9298: LD_ADDR_OWVAR 26
9302: PUSH
9303: LD_STRING 
9305: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
9306: LD_INT 0
9308: PPUSH
9309: LD_VAR 0 5
9313: PPUSH
9314: LD_VAR 0 4
9318: PPUSH
9319: CALL_OW 380
// un = CreateHuman ;
9323: LD_ADDR_VAR 0 9
9327: PUSH
9328: CALL_OW 44
9332: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
9333: LD_VAR 0 9
9337: PPUSH
9338: LD_VAR 0 3
9342: PPUSH
9343: CALL_OW 52
// end ;
9347: GO 9267
9349: POP
9350: POP
// end ;
9351: LD_VAR 0 7
9355: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
9356: LD_INT 0
9358: PPUSH
9359: PPUSH
9360: PPUSH
// uc_side := GetSide ( b ) ;
9361: LD_ADDR_OWVAR 20
9365: PUSH
9366: LD_VAR 0 2
9370: PPUSH
9371: CALL_OW 255
9375: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
9376: LD_ADDR_OWVAR 21
9380: PUSH
9381: LD_VAR 0 2
9385: PPUSH
9386: CALL_OW 248
9390: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
9391: LD_INT 0
9393: PPUSH
9394: LD_INT 1
9396: PPUSH
9397: LD_VAR 0 1
9401: PPUSH
9402: CALL_OW 380
// un = CreateHuman ;
9406: LD_ADDR_VAR 0 4
9410: PUSH
9411: CALL_OW 44
9415: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
9416: LD_ADDR_VAR 0 5
9420: PUSH
9421: LD_VAR 0 2
9425: PPUSH
9426: CALL_OW 254
9430: PUSH
9431: LD_INT 3
9433: MINUS
9434: ST_TO_ADDR
// if dir < 0 then
9435: LD_VAR 0 5
9439: PUSH
9440: LD_INT 0
9442: LESS
9443: IFFALSE 9459
// dir := 6 + dir ;
9445: LD_ADDR_VAR 0 5
9449: PUSH
9450: LD_INT 6
9452: PUSH
9453: LD_VAR 0 5
9457: PLUS
9458: ST_TO_ADDR
// SetDir ( un , dir ) ;
9459: LD_VAR 0 4
9463: PPUSH
9464: LD_VAR 0 5
9468: PPUSH
9469: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
9473: LD_VAR 0 4
9477: PPUSH
9478: LD_VAR 0 2
9482: PPUSH
9483: CALL_OW 52
// end ;
9487: LD_VAR 0 3
9491: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkList ; begin
9492: LD_INT 0
9494: PPUSH
9495: PPUSH
9496: PPUSH
9497: PPUSH
// engineerOkList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
9498: LD_ADDR_VAR 0 7
9502: PUSH
9503: LD_INT 22
9505: PUSH
9506: LD_VAR 0 1
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: PUSH
9515: LD_INT 25
9517: PUSH
9518: LD_INT 2
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: PUSH
9525: LD_INT 24
9527: PUSH
9528: LD_INT 1000
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: LIST
9539: PPUSH
9540: CALL_OW 69
9544: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9545: LD_ADDR_VAR 0 5
9549: PUSH
9550: LD_VAR 0 3
9554: PPUSH
9555: LD_INT 22
9557: PUSH
9558: LD_VAR 0 1
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: PUSH
9567: LD_INT 21
9569: PUSH
9570: LD_INT 3
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 3
9579: PUSH
9580: LD_INT 24
9582: PUSH
9583: LD_INT 1000
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: LIST
9598: PUSH
9599: EMPTY
9600: LIST
9601: PPUSH
9602: CALL_OW 70
9606: ST_TO_ADDR
// if not buildingsList and not engineerOkList then
9607: LD_VAR 0 5
9611: NOT
9612: IFFALSE 9621
9614: PUSH
9615: LD_VAR 0 7
9619: NOT
9620: AND
9621: IFFALSE 9625
// exit ;
9623: GO 9825
// if not buildingsList and UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) and IsOk ( building ) then
9625: LD_VAR 0 5
9629: NOT
9630: IFFALSE 9656
9632: PUSH
9633: LD_VAR 0 7
9637: PPUSH
9638: LD_INT 3
9640: PUSH
9641: LD_INT 54
9643: PUSH
9644: EMPTY
9645: LIST
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: PPUSH
9651: CALL_OW 72
9655: AND
9656: IFFALSE 9669
9658: PUSH
9659: LD_VAR 0 2
9663: PPUSH
9664: CALL_OW 302
9668: AND
9669: IFFALSE 9703
// ComEnterUnit ( UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) , building ) ;
9671: LD_VAR 0 7
9675: PPUSH
9676: LD_INT 3
9678: PUSH
9679: LD_INT 54
9681: PUSH
9682: EMPTY
9683: LIST
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: PPUSH
9689: CALL_OW 72
9693: PPUSH
9694: LD_VAR 0 2
9698: PPUSH
9699: CALL_OW 120
// if buildingsList then
9703: LD_VAR 0 5
9707: IFFALSE 9825
// begin for i in engineerOkList do
9709: LD_ADDR_VAR 0 6
9713: PUSH
9714: LD_VAR 0 7
9718: PUSH
9719: FOR_IN
9720: IFFALSE 9823
// if IsInUnit ( i ) then
9722: LD_VAR 0 6
9726: PPUSH
9727: CALL_OW 310
9731: IFFALSE 9744
// ComExitBuilding ( i ) else
9733: LD_VAR 0 6
9737: PPUSH
9738: CALL_OW 122
9742: GO 9821
// if GetLives ( i ) > 650 then
9744: LD_VAR 0 6
9748: PPUSH
9749: CALL_OW 256
9753: PUSH
9754: LD_INT 650
9756: GREATER
9757: IFFALSE 9785
// ComRepairBuilding ( i , NearestUnitToUnit ( buildingsList , i ) ) else
9759: LD_VAR 0 6
9763: PPUSH
9764: LD_VAR 0 5
9768: PPUSH
9769: LD_VAR 0 6
9773: PPUSH
9774: CALL_OW 74
9778: PPUSH
9779: CALL_OW 130
9783: GO 9821
// if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9785: LD_VAR 0 6
9789: PPUSH
9790: LD_INT 56
9792: PPUSH
9793: LD_INT 10
9795: PPUSH
9796: CALL_OW 297
9800: PUSH
9801: LD_INT 8
9803: GREATER
9804: IFFALSE 9821
// ComMoveXY ( i , 56 , 10 ) ;
9806: LD_VAR 0 6
9810: PPUSH
9811: LD_INT 56
9813: PPUSH
9814: LD_INT 10
9816: PPUSH
9817: CALL_OW 111
9821: GO 9719
9823: POP
9824: POP
// end ; end ;
9825: LD_VAR 0 4
9829: RET
// export function HealUnitInBase ( side , healArea , baseArea , building ) ; var sciList , i , damageUnits ; begin
9830: LD_INT 0
9832: PPUSH
9833: PPUSH
9834: PPUSH
9835: PPUSH
// sciList := FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9836: LD_ADDR_VAR 0 6
9840: PUSH
9841: LD_INT 22
9843: PUSH
9844: LD_VAR 0 1
9848: PUSH
9849: EMPTY
9850: LIST
9851: LIST
9852: PUSH
9853: LD_INT 25
9855: PUSH
9856: LD_INT 4
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PUSH
9863: LD_INT 24
9865: PUSH
9866: LD_INT 250
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: LIST
9877: PPUSH
9878: CALL_OW 69
9882: ST_TO_ADDR
// damageUnits := FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9883: LD_ADDR_VAR 0 8
9887: PUSH
9888: LD_VAR 0 3
9892: PPUSH
9893: LD_INT 22
9895: PUSH
9896: LD_VAR 0 1
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: PUSH
9905: LD_INT 21
9907: PUSH
9908: LD_INT 1
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: PUSH
9915: LD_INT 3
9917: PUSH
9918: LD_INT 24
9920: PUSH
9921: LD_INT 650
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: LIST
9936: PPUSH
9937: CALL_OW 70
9941: ST_TO_ADDR
// if not damageUnits and not sciList then
9942: LD_VAR 0 8
9946: NOT
9947: IFFALSE 9956
9949: PUSH
9950: LD_VAR 0 6
9954: NOT
9955: AND
9956: IFFALSE 9960
// exit ;
9958: GO 10099
// if damageUnits then
9960: LD_VAR 0 8
9964: IFFALSE 10043
// begin for i in sciList do
9966: LD_ADDR_VAR 0 7
9970: PUSH
9971: LD_VAR 0 6
9975: PUSH
9976: FOR_IN
9977: IFFALSE 10039
// if IsInUnit ( i ) then
9979: LD_VAR 0 7
9983: PPUSH
9984: CALL_OW 310
9988: IFFALSE 10001
// ComExitBuilding ( i ) else
9990: LD_VAR 0 7
9994: PPUSH
9995: CALL_OW 122
9999: GO 10037
// if not HasTask ( i ) then
10001: LD_VAR 0 7
10005: PPUSH
10006: CALL_OW 314
10010: NOT
10011: IFFALSE 10037
// ComHeal ( i , NearestUnitToUnit ( damageUnits , i ) ) ;
10013: LD_VAR 0 7
10017: PPUSH
10018: LD_VAR 0 8
10022: PPUSH
10023: LD_VAR 0 7
10027: PPUSH
10028: CALL_OW 74
10032: PPUSH
10033: CALL_OW 128
10037: GO 9976
10039: POP
10040: POP
// end else
10041: GO 10099
// if UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) then
10043: LD_VAR 0 6
10047: PPUSH
10048: LD_INT 3
10050: PUSH
10051: LD_INT 54
10053: PUSH
10054: EMPTY
10055: LIST
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: PPUSH
10061: CALL_OW 72
10065: IFFALSE 10099
// ComEnterUnit ( UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) , building ) ;
10067: LD_VAR 0 6
10071: PPUSH
10072: LD_INT 3
10074: PUSH
10075: LD_INT 54
10077: PUSH
10078: EMPTY
10079: LIST
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PPUSH
10085: CALL_OW 72
10089: PPUSH
10090: LD_VAR 0 4
10094: PPUSH
10095: CALL_OW 120
// end ;
10099: LD_VAR 0 5
10103: RET
// export function DefendBases ( area , enemySide , defendersList , building ) ; var i , enemy , nearestUnit ; begin
10104: LD_INT 0
10106: PPUSH
10107: PPUSH
10108: PPUSH
10109: PPUSH
// if not defendersList then
10110: LD_VAR 0 3
10114: NOT
10115: IFFALSE 10119
// exit ;
10117: GO 10503
// enemy := FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
10119: LD_ADDR_VAR 0 7
10123: PUSH
10124: LD_VAR 0 1
10128: PPUSH
10129: LD_INT 22
10131: PUSH
10132: LD_VAR 0 2
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: PUSH
10141: LD_INT 2
10143: PUSH
10144: LD_INT 21
10146: PUSH
10147: LD_INT 2
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: PUSH
10154: LD_INT 21
10156: PUSH
10157: LD_INT 1
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: LIST
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: PPUSH
10173: CALL_OW 70
10177: ST_TO_ADDR
// if enemy then
10178: LD_VAR 0 7
10182: IFFALSE 10405
// begin for i in defendersList do
10184: LD_ADDR_VAR 0 6
10188: PUSH
10189: LD_VAR 0 3
10193: PUSH
10194: FOR_IN
10195: IFFALSE 10401
// begin if IsInUnit ( i ) and GetLives ( i ) > 500 then
10197: LD_VAR 0 6
10201: PPUSH
10202: CALL_OW 310
10206: IFFALSE 10223
10208: PUSH
10209: LD_VAR 0 6
10213: PPUSH
10214: CALL_OW 256
10218: PUSH
10219: LD_INT 500
10221: GREATER
10222: AND
10223: IFFALSE 10236
// ComExitBuilding ( i ) else
10225: LD_VAR 0 6
10229: PPUSH
10230: CALL_OW 122
10234: GO 10399
// if GetLives ( i ) > 650 then
10236: LD_VAR 0 6
10240: PPUSH
10241: CALL_OW 256
10245: PUSH
10246: LD_INT 650
10248: GREATER
10249: IFFALSE 10302
// begin nearestUnit := NearestUnitToUnit ( enemy , i ) ;
10251: LD_ADDR_VAR 0 8
10255: PUSH
10256: LD_VAR 0 7
10260: PPUSH
10261: LD_VAR 0 6
10265: PPUSH
10266: CALL_OW 74
10270: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearestUnit ) , GetY ( nearestUnit ) ) ;
10271: LD_VAR 0 6
10275: PPUSH
10276: LD_VAR 0 8
10280: PPUSH
10281: CALL_OW 250
10285: PPUSH
10286: LD_VAR 0 8
10290: PPUSH
10291: CALL_OW 251
10295: PPUSH
10296: CALL_OW 114
// end else
10300: GO 10399
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
10302: LD_INT 22
10304: PUSH
10305: LD_INT 3
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PUSH
10312: LD_INT 25
10314: PUSH
10315: LD_INT 4
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PPUSH
10326: CALL_OW 69
10330: IFFALSE 10370
// begin if GetDistUnitXY ( i , 56 , 10 ) > 8 then
10332: LD_VAR 0 6
10336: PPUSH
10337: LD_INT 56
10339: PPUSH
10340: LD_INT 10
10342: PPUSH
10343: CALL_OW 297
10347: PUSH
10348: LD_INT 8
10350: GREATER
10351: IFFALSE 10368
// ComMoveXY ( i , 56 , 10 ) ;
10353: LD_VAR 0 6
10357: PPUSH
10358: LD_INT 56
10360: PPUSH
10361: LD_INT 10
10363: PPUSH
10364: CALL_OW 111
// end else
10368: GO 10399
// if GetLives ( i ) <= 500 then
10370: LD_VAR 0 6
10374: PPUSH
10375: CALL_OW 256
10379: PUSH
10380: LD_INT 500
10382: LESSEQUAL
10383: IFFALSE 10399
// ComEnterUnit ( i , building ) ;
10385: LD_VAR 0 6
10389: PPUSH
10390: LD_VAR 0 4
10394: PPUSH
10395: CALL_OW 120
// end ;
10399: GO 10194
10401: POP
10402: POP
// end else
10403: GO 10503
// if UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) then
10405: LD_VAR 0 3
10409: PPUSH
10410: LD_INT 56
10412: PUSH
10413: EMPTY
10414: LIST
10415: PUSH
10416: LD_INT 3
10418: PUSH
10419: LD_INT 60
10421: PUSH
10422: EMPTY
10423: LIST
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: LD_INT 24
10431: PUSH
10432: LD_INT 1000
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: LIST
10443: PPUSH
10444: CALL_OW 72
10448: IFFALSE 10503
// ComEnterUnit ( UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) , building ) ;
10450: LD_VAR 0 3
10454: PPUSH
10455: LD_INT 56
10457: PUSH
10458: EMPTY
10459: LIST
10460: PUSH
10461: LD_INT 3
10463: PUSH
10464: LD_INT 60
10466: PUSH
10467: EMPTY
10468: LIST
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PUSH
10474: LD_INT 24
10476: PUSH
10477: LD_INT 1000
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: PUSH
10484: EMPTY
10485: LIST
10486: LIST
10487: LIST
10488: PPUSH
10489: CALL_OW 72
10493: PPUSH
10494: LD_VAR 0 4
10498: PPUSH
10499: CALL_OW 120
// end ;
10503: LD_VAR 0 5
10507: RET
// export function RussianTrap ; var i ; begin
10508: LD_INT 0
10510: PPUSH
10511: PPUSH
// if GetSide ( Brian ) = 4 then
10512: LD_EXP 6
10516: PPUSH
10517: CALL_OW 255
10521: PUSH
10522: LD_INT 4
10524: EQUAL
10525: IFFALSE 10548
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10527: LD_EXP 6
10531: PUSH
10532: LD_EXP 7
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PPUSH
10541: LD_INT 0
10543: PPUSH
10544: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10548: LD_ADDR_VAR 0 2
10552: PUSH
10553: LD_INT 22
10555: PUSH
10556: LD_INT 3
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: LD_INT 21
10565: PUSH
10566: LD_INT 1
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: PPUSH
10577: CALL_OW 69
10581: PUSH
10582: FOR_IN
10583: IFFALSE 10695
// begin ComExitBuilding ( i ) ;
10585: LD_VAR 0 2
10589: PPUSH
10590: CALL_OW 122
// wait ( 0 0$1 ) ;
10594: LD_INT 35
10596: PPUSH
10597: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10601: LD_VAR 0 2
10605: PPUSH
10606: LD_INT 120
10608: PPUSH
10609: LD_INT 56
10611: PPUSH
10612: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10616: LD_VAR 0 2
10620: PPUSH
10621: LD_INT 111
10623: PPUSH
10624: LD_INT 37
10626: PPUSH
10627: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10631: LD_INT 33
10633: PPUSH
10634: CALL_OW 255
10638: PUSH
10639: LD_INT 3
10641: EQUAL
10642: IFFALSE 10653
10644: PUSH
10645: LD_INT 33
10647: PPUSH
10648: CALL_OW 302
10652: AND
10653: IFFALSE 10669
// AddComEnterUnit ( i , arm2 ) else
10655: LD_VAR 0 2
10659: PPUSH
10660: LD_INT 33
10662: PPUSH
10663: CALL_OW 180
10667: GO 10693
// begin AddComCrawl ( i ) ;
10669: LD_VAR 0 2
10673: PPUSH
10674: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10678: LD_VAR 0 2
10682: PPUSH
10683: LD_INT 109
10685: PPUSH
10686: LD_INT 30
10688: PPUSH
10689: CALL_OW 174
// end ; end ;
10693: GO 10582
10695: POP
10696: POP
// end ;
10697: LD_VAR 0 1
10701: RET
// export function Nearest ( un , units ) ; var nearestDist , nearestUn , sold , dist ; begin
10702: LD_INT 0
10704: PPUSH
10705: PPUSH
10706: PPUSH
10707: PPUSH
10708: PPUSH
// nearestDist := 1000 ;
10709: LD_ADDR_VAR 0 4
10713: PUSH
10714: LD_INT 1000
10716: ST_TO_ADDR
// nearestUn := un ;
10717: LD_ADDR_VAR 0 5
10721: PUSH
10722: LD_VAR 0 1
10726: ST_TO_ADDR
// for sold in units do
10727: LD_ADDR_VAR 0 6
10731: PUSH
10732: LD_VAR 0 2
10736: PUSH
10737: FOR_IN
10738: IFFALSE 10794
// begin dist := GetDistUnits ( un , sold ) ;
10740: LD_ADDR_VAR 0 7
10744: PUSH
10745: LD_VAR 0 1
10749: PPUSH
10750: LD_VAR 0 6
10754: PPUSH
10755: CALL_OW 296
10759: ST_TO_ADDR
// if dist < nearestDist then
10760: LD_VAR 0 7
10764: PUSH
10765: LD_VAR 0 4
10769: LESS
10770: IFFALSE 10792
// begin nearestUn := sold ;
10772: LD_ADDR_VAR 0 5
10776: PUSH
10777: LD_VAR 0 6
10781: ST_TO_ADDR
// nearestDist := dist ;
10782: LD_ADDR_VAR 0 4
10786: PUSH
10787: LD_VAR 0 7
10791: ST_TO_ADDR
// end ; end ;
10792: GO 10737
10794: POP
10795: POP
// result := NearestUn ;
10796: LD_ADDR_VAR 0 3
10800: PUSH
10801: LD_VAR 0 5
10805: ST_TO_ADDR
// end ;
10806: LD_VAR 0 3
10810: RET
// export function PrepareDifficulty ; begin
10811: LD_INT 0
10813: PPUSH
// if Difficulty = 1 then
10814: LD_OWVAR 67
10818: PUSH
10819: LD_INT 1
10821: EQUAL
10822: IFFALSE 10885
// begin RemoveUnit ( brw2 ) ;
10824: LD_INT 9
10826: PPUSH
10827: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10831: LD_INT 30
10833: PPUSH
10834: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10838: LD_INT 52
10840: PPUSH
10841: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10845: LD_INT 63
10847: PPUSH
10848: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10852: LD_INT 5
10854: PUSH
10855: LD_INT 4
10857: PUSH
10858: EMPTY
10859: LIST
10860: LIST
10861: PPUSH
10862: LD_INT 60
10864: PPUSH
10865: CALL_OW 240
// RuSoldMinLevel = 0 ;
10869: LD_ADDR_EXP 13
10873: PUSH
10874: LD_INT 0
10876: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10877: LD_ADDR_EXP 14
10881: PUSH
10882: LD_INT 1
10884: ST_TO_ADDR
// end ; if Difficulty = 2 then
10885: LD_OWVAR 67
10889: PUSH
10890: LD_INT 2
10892: EQUAL
10893: IFFALSE 10935
// begin RemoveUnit ( brw4 ) ;
10895: LD_INT 52
10897: PPUSH
10898: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10902: LD_INT 5
10904: PUSH
10905: LD_INT 4
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: PPUSH
10912: LD_INT 50
10914: PPUSH
10915: CALL_OW 240
// RuSoldMinLevel = 1 ;
10919: LD_ADDR_EXP 13
10923: PUSH
10924: LD_INT 1
10926: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10927: LD_ADDR_EXP 14
10931: PUSH
10932: LD_INT 2
10934: ST_TO_ADDR
// end ; if Difficulty >= 3 then
10935: LD_OWVAR 67
10939: PUSH
10940: LD_INT 3
10942: GREATEREQUAL
10943: IFFALSE 10978
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10945: LD_INT 5
10947: PUSH
10948: LD_INT 4
10950: PUSH
10951: EMPTY
10952: LIST
10953: LIST
10954: PPUSH
10955: LD_INT 40
10957: PPUSH
10958: CALL_OW 240
// RuSoldMinLevel = 2 ;
10962: LD_ADDR_EXP 13
10966: PUSH
10967: LD_INT 2
10969: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10970: LD_ADDR_EXP 14
10974: PUSH
10975: LD_INT 3
10977: ST_TO_ADDR
// end ; end ;
10978: LD_VAR 0 1
10982: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10983: LD_INT 0
10985: PPUSH
10986: PPUSH
10987: PPUSH
// if not vehicles then
10988: LD_VAR 0 1
10992: NOT
10993: IFFALSE 10997
// exit ;
10995: GO 11127
// tmp := [ ] ;
10997: LD_ADDR_VAR 0 5
11001: PUSH
11002: EMPTY
11003: ST_TO_ADDR
// for i in vehicles do
11004: LD_ADDR_VAR 0 4
11008: PUSH
11009: LD_VAR 0 1
11013: PUSH
11014: FOR_IN
11015: IFFALSE 11111
// tmp := Replace ( tmp , tmp + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
11017: LD_ADDR_VAR 0 5
11021: PUSH
11022: LD_VAR 0 5
11026: PPUSH
11027: LD_VAR 0 5
11031: PUSH
11032: LD_INT 1
11034: PLUS
11035: PPUSH
11036: LD_VAR 0 4
11040: PPUSH
11041: CALL_OW 265
11045: PUSH
11046: LD_VAR 0 4
11050: PPUSH
11051: CALL_OW 262
11055: PUSH
11056: LD_VAR 0 4
11060: PPUSH
11061: CALL_OW 263
11065: PUSH
11066: LD_VAR 0 4
11070: PPUSH
11071: CALL_OW 264
11075: PUSH
11076: LD_VAR 0 4
11080: PPUSH
11081: CALL_OW 261
11085: PUSH
11086: LD_VAR 0 4
11090: PPUSH
11091: CALL_OW 256
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: PPUSH
11104: CALL_OW 1
11108: ST_TO_ADDR
11109: GO 11014
11111: POP
11112: POP
// SaveVariable ( tmp , ident ) ;
11113: LD_VAR 0 5
11117: PPUSH
11118: LD_VAR 0 2
11122: PPUSH
11123: CALL_OW 39
// end ; end_of_file
11127: LD_VAR 0 3
11131: RET
// export function PrepareHeroes ; var plive , prefix ; begin
11132: LD_INT 0
11134: PPUSH
11135: PPUSH
11136: PPUSH
// prefix := 01_ ;
11137: LD_ADDR_VAR 0 3
11141: PUSH
11142: LD_STRING 01_
11144: ST_TO_ADDR
// uc_side := 1 ;
11145: LD_ADDR_OWVAR 20
11149: PUSH
11150: LD_INT 1
11152: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debug ) , prefix ) ;
11153: LD_ADDR_EXP 1
11157: PUSH
11158: LD_STRING JMM
11160: PPUSH
11161: LD_EXP 35
11165: NOT
11166: PPUSH
11167: LD_VAR 0 3
11171: PPUSH
11172: CALL 40151 0 3
11176: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
11177: LD_ADDR_VAR 0 2
11181: PUSH
11182: LD_STRING 01_JMMLifePoints_1
11184: PPUSH
11185: LD_INT 1000
11187: PPUSH
11188: CALL_OW 30
11192: ST_TO_ADDR
// if plive < 250 then
11193: LD_VAR 0 2
11197: PUSH
11198: LD_INT 250
11200: LESS
11201: IFFALSE 11211
// plive := 300 ;
11203: LD_ADDR_VAR 0 2
11207: PUSH
11208: LD_INT 300
11210: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
11211: LD_EXP 1
11215: PPUSH
11216: LD_VAR 0 2
11220: PPUSH
11221: CALL_OW 234
// Powell := NewCharacter ( Powell ) ;
11225: LD_ADDR_EXP 9
11229: PUSH
11230: LD_STRING Powell
11232: PPUSH
11233: CALL_OW 25
11237: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , prefix ) ;
11238: LD_ADDR_EXP 2
11242: PUSH
11243: LD_STRING Bobby
11245: PPUSH
11246: LD_EXP 35
11250: NOT
11251: PPUSH
11252: LD_VAR 0 3
11256: PPUSH
11257: CALL 40151 0 3
11261: ST_TO_ADDR
// if Bobby then
11262: LD_EXP 2
11266: IFFALSE 11316
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
11268: LD_ADDR_VAR 0 2
11272: PUSH
11273: LD_STRING 01_BobbyLifePoints_1
11275: PPUSH
11276: LD_INT 1000
11278: PPUSH
11279: CALL_OW 30
11283: ST_TO_ADDR
// if plive < 250 then
11284: LD_VAR 0 2
11288: PUSH
11289: LD_INT 250
11291: LESS
11292: IFFALSE 11302
// plive := 300 ;
11294: LD_ADDR_VAR 0 2
11298: PUSH
11299: LD_INT 300
11301: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
11302: LD_EXP 2
11306: PPUSH
11307: LD_VAR 0 2
11311: PPUSH
11312: CALL_OW 234
// end ; Cyrus := PrepareUnit ( Cyrus , ( not debug ) , prefix ) ;
11316: LD_ADDR_EXP 3
11320: PUSH
11321: LD_STRING Cyrus
11323: PPUSH
11324: LD_EXP 35
11328: NOT
11329: PPUSH
11330: LD_VAR 0 3
11334: PPUSH
11335: CALL 40151 0 3
11339: ST_TO_ADDR
// if Cyrus then
11340: LD_EXP 3
11344: IFFALSE 11394
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
11346: LD_ADDR_VAR 0 2
11350: PUSH
11351: LD_STRING 01_CyrusLifePoints_1
11353: PPUSH
11354: LD_INT 1000
11356: PPUSH
11357: CALL_OW 30
11361: ST_TO_ADDR
// if plive < 250 then
11362: LD_VAR 0 2
11366: PUSH
11367: LD_INT 250
11369: LESS
11370: IFFALSE 11380
// plive := 300 ;
11372: LD_ADDR_VAR 0 2
11376: PUSH
11377: LD_INT 300
11379: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
11380: LD_EXP 3
11384: PPUSH
11385: LD_VAR 0 2
11389: PPUSH
11390: CALL_OW 234
// end ; Khatam := NewCharacter ( Khatam ) ;
11394: LD_ADDR_EXP 5
11398: PUSH
11399: LD_STRING Khatam
11401: PPUSH
11402: CALL_OW 25
11406: ST_TO_ADDR
// uc_side := 4 ;
11407: LD_ADDR_OWVAR 20
11411: PUSH
11412: LD_INT 4
11414: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
11415: LD_ADDR_EXP 4
11419: PUSH
11420: LD_STRING Lisa
11422: PPUSH
11423: CALL_OW 25
11427: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
11428: LD_EXP 1
11432: PPUSH
11433: LD_INT 3
11435: PPUSH
11436: LD_INT 0
11438: PPUSH
11439: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
11443: LD_EXP 2
11447: PPUSH
11448: LD_INT 3
11450: PPUSH
11451: LD_INT 0
11453: PPUSH
11454: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
11458: LD_EXP 3
11462: PPUSH
11463: LD_INT 3
11465: PPUSH
11466: LD_INT 0
11468: PPUSH
11469: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
11473: LD_EXP 4
11477: PPUSH
11478: LD_INT 5
11480: PPUSH
11481: LD_INT 0
11483: PPUSH
11484: CALL_OW 49
// ComCrawl ( Lisa ) ;
11488: LD_EXP 4
11492: PPUSH
11493: CALL_OW 137
// end ;
11497: LD_VAR 0 1
11501: RET
// export function PrepareLisSquad ; var i , un ; begin
11502: LD_INT 0
11504: PPUSH
11505: PPUSH
11506: PPUSH
// uc_side := 4 ;
11507: LD_ADDR_OWVAR 20
11511: PUSH
11512: LD_INT 4
11514: ST_TO_ADDR
// uc_nation := 1 ;
11515: LD_ADDR_OWVAR 21
11519: PUSH
11520: LD_INT 1
11522: ST_TO_ADDR
// hc_class := 2 ;
11523: LD_ADDR_OWVAR 28
11527: PUSH
11528: LD_INT 2
11530: ST_TO_ADDR
// hc_sex := sex_male ;
11531: LD_ADDR_OWVAR 27
11535: PUSH
11536: LD_INT 1
11538: ST_TO_ADDR
// hc_gallery :=  ;
11539: LD_ADDR_OWVAR 33
11543: PUSH
11544: LD_STRING 
11546: ST_TO_ADDR
// hc_name :=  ;
11547: LD_ADDR_OWVAR 26
11551: PUSH
11552: LD_STRING 
11554: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11555: LD_ADDR_OWVAR 30
11559: PUSH
11560: LD_INT 0
11562: PUSH
11563: LD_INT 1
11565: PUSH
11566: LD_INT 0
11568: PUSH
11569: LD_INT 0
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11578: LD_ADDR_OWVAR 31
11582: PUSH
11583: LD_INT 1
11585: PUSH
11586: LD_INT 2
11588: PUSH
11589: LD_INT 0
11591: PUSH
11592: LD_INT 0
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: ST_TO_ADDR
// un := CreateHuman ;
11601: LD_ADDR_VAR 0 3
11605: PUSH
11606: CALL_OW 44
11610: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11611: LD_VAR 0 3
11615: PPUSH
11616: LD_INT 6
11618: PPUSH
11619: LD_INT 0
11621: PPUSH
11622: CALL_OW 49
// hc_sex := sex_female ;
11626: LD_ADDR_OWVAR 27
11630: PUSH
11631: LD_INT 2
11633: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11634: LD_ADDR_OWVAR 30
11638: PUSH
11639: LD_INT 0
11641: PUSH
11642: LD_INT 0
11644: PUSH
11645: LD_INT 0
11647: PUSH
11648: LD_INT 1
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11657: LD_ADDR_OWVAR 31
11661: PUSH
11662: LD_INT 0
11664: PUSH
11665: LD_INT 1
11667: PUSH
11668: LD_INT 0
11670: PUSH
11671: LD_INT 1
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: ST_TO_ADDR
// un := CreateHuman ;
11680: LD_ADDR_VAR 0 3
11684: PUSH
11685: CALL_OW 44
11689: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11690: LD_VAR 0 3
11694: PPUSH
11695: LD_INT 6
11697: PPUSH
11698: LD_INT 0
11700: PPUSH
11701: CALL_OW 49
// if not Bobby and not Cyrus then
11705: LD_EXP 2
11709: NOT
11710: IFFALSE 11719
11712: PUSH
11713: LD_EXP 3
11717: NOT
11718: AND
11719: IFFALSE 11808
// begin hc_class := 1 ;
11721: LD_ADDR_OWVAR 28
11725: PUSH
11726: LD_INT 1
11728: ST_TO_ADDR
// hc_sex := sex_male ;
11729: LD_ADDR_OWVAR 27
11733: PUSH
11734: LD_INT 1
11736: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11737: LD_ADDR_OWVAR 30
11741: PUSH
11742: LD_INT 2
11744: PUSH
11745: LD_INT 3
11747: PUSH
11748: LD_INT 1
11750: PUSH
11751: LD_INT 0
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11760: LD_ADDR_OWVAR 31
11764: PUSH
11765: LD_INT 2
11767: PUSH
11768: LD_INT 3
11770: PUSH
11771: LD_INT 1
11773: PUSH
11774: LD_INT 0
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: ST_TO_ADDR
// un := CreateHuman ;
11783: LD_ADDR_VAR 0 3
11787: PUSH
11788: CALL_OW 44
11792: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11793: LD_VAR 0 3
11797: PPUSH
11798: LD_INT 31
11800: PPUSH
11801: LD_INT 0
11803: PPUSH
11804: CALL_OW 49
// end ; InitHc ;
11808: CALL_OW 19
// end ;
11812: LD_VAR 0 1
11816: RET
// export function PrepareOtherAmericans ; begin
11817: LD_INT 0
11819: PPUSH
// uc_side := 4 ;
11820: LD_ADDR_OWVAR 20
11824: PUSH
11825: LD_INT 4
11827: ST_TO_ADDR
// uc_nation := 1 ;
11828: LD_ADDR_OWVAR 21
11832: PUSH
11833: LD_INT 1
11835: ST_TO_ADDR
// hc_gallery :=  ;
11836: LD_ADDR_OWVAR 33
11840: PUSH
11841: LD_STRING 
11843: ST_TO_ADDR
// hc_name := Tom Garvin ;
11844: LD_ADDR_OWVAR 26
11848: PUSH
11849: LD_STRING Tom Garvin
11851: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 2 ) ;
11852: LD_INT 1
11854: PPUSH
11855: LD_INT 1
11857: PPUSH
11858: LD_INT 2
11860: PPUSH
11861: CALL_OW 380
// Brian := CreateHuman ;
11865: LD_ADDR_EXP 6
11869: PUSH
11870: CALL_OW 44
11874: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11875: LD_EXP 6
11879: PPUSH
11880: LD_INT 10
11882: PPUSH
11883: LD_INT 0
11885: PPUSH
11886: CALL_OW 49
// hc_name := Jerry White ;
11890: LD_ADDR_OWVAR 26
11894: PUSH
11895: LD_STRING Jerry White
11897: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , 2 ) ;
11898: LD_INT 1
11900: PPUSH
11901: LD_INT 3
11903: PPUSH
11904: LD_INT 2
11906: PPUSH
11907: CALL_OW 380
// Jerry := CreateHuman ;
11911: LD_ADDR_EXP 7
11915: PUSH
11916: CALL_OW 44
11920: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11921: LD_EXP 7
11925: PPUSH
11926: LD_INT 10
11928: PPUSH
11929: LD_INT 0
11931: PPUSH
11932: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11936: LD_EXP 6
11940: PUSH
11941: LD_EXP 7
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PPUSH
11950: CALL_OW 140
// end ;
11954: LD_VAR 0 1
11958: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un , hexes ; begin
11959: LD_INT 0
11961: PPUSH
11962: PPUSH
11963: PPUSH
11964: PPUSH
// hexes := AreaToList ( DeadsSpawn , 0 ) ;
11965: LD_ADDR_VAR 0 4
11969: PUSH
11970: LD_INT 16
11972: PPUSH
11973: LD_INT 0
11975: PPUSH
11976: CALL_OW 517
11980: ST_TO_ADDR
// for i = 1 to 6 do
11981: LD_ADDR_VAR 0 2
11985: PUSH
11986: DOUBLE
11987: LD_INT 1
11989: DEC
11990: ST_TO_ADDR
11991: LD_INT 6
11993: PUSH
11994: FOR_TO
11995: IFFALSE 12141
// begin uc_side := 4 ;
11997: LD_ADDR_OWVAR 20
12001: PUSH
12002: LD_INT 4
12004: ST_TO_ADDR
// uc_nation := 1 ;
12005: LD_ADDR_OWVAR 21
12009: PUSH
12010: LD_INT 1
12012: ST_TO_ADDR
// hc_gallery :=  ;
12013: LD_ADDR_OWVAR 33
12017: PUSH
12018: LD_STRING 
12020: ST_TO_ADDR
// hc_name :=  ;
12021: LD_ADDR_OWVAR 26
12025: PUSH
12026: LD_STRING 
12028: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 1 ) ;
12029: LD_INT 0
12031: PPUSH
12032: LD_INT 1
12034: PUSH
12035: LD_INT 1
12037: PUSH
12038: LD_INT 4
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: LIST
12045: PUSH
12046: LD_VAR 0 2
12050: PUSH
12051: LD_INT 3
12053: MOD
12054: PUSH
12055: LD_INT 1
12057: PLUS
12058: ARRAY
12059: PPUSH
12060: LD_INT 1
12062: PPUSH
12063: CALL_OW 380
// un := CreateHuman ;
12067: LD_ADDR_VAR 0 3
12071: PUSH
12072: CALL_OW 44
12076: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
12077: LD_VAR 0 3
12081: PPUSH
12082: LD_INT 0
12084: PPUSH
12085: LD_INT 5
12087: PPUSH
12088: CALL_OW 12
12092: PPUSH
12093: CALL_OW 233
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
12097: LD_VAR 0 3
12101: PPUSH
12102: LD_VAR 0 4
12106: PUSH
12107: LD_INT 1
12109: ARRAY
12110: PUSH
12111: LD_VAR 0 2
12115: ARRAY
12116: PPUSH
12117: LD_VAR 0 4
12121: PUSH
12122: LD_INT 2
12124: ARRAY
12125: PUSH
12126: LD_VAR 0 2
12130: ARRAY
12131: PPUSH
12132: LD_INT 1
12134: PPUSH
12135: CALL_OW 601
// end ;
12139: GO 11994
12141: POP
12142: POP
// DyingSold := CreateHuman ;
12143: LD_ADDR_EXP 36
12147: PUSH
12148: CALL_OW 44
12152: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
12153: LD_EXP 36
12157: PPUSH
12158: LD_INT 16
12160: PPUSH
12161: LD_INT 0
12163: PPUSH
12164: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
12168: LD_EXP 36
12172: PPUSH
12173: LD_INT 250
12175: PPUSH
12176: CALL_OW 234
// end ; end_of_file
12180: LD_VAR 0 1
12184: RET
// export ruPatrol ; export function PrepareRussianHeroes ; var tmp ; begin
12185: LD_INT 0
12187: PPUSH
12188: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
12189: LD_ADDR_VAR 0 2
12193: PUSH
12194: LD_INT 22
12196: PUSH
12197: LD_INT 1
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: PUSH
12204: LD_INT 23
12206: PUSH
12207: LD_INT 1
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PUSH
12214: LD_INT 25
12216: PUSH
12217: LD_INT 2
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: PUSH
12224: LD_INT 50
12226: PUSH
12227: EMPTY
12228: LIST
12229: PUSH
12230: LD_INT 56
12232: PUSH
12233: EMPTY
12234: LIST
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: PPUSH
12243: CALL_OW 69
12247: PUSH
12248: LD_EXP 1
12252: PUSH
12253: EMPTY
12254: LIST
12255: DIFF
12256: ST_TO_ADDR
// if not tmp then
12257: LD_VAR 0 2
12261: NOT
12262: IFFALSE 12266
// exit ;
12264: GO 12342
// uc_side = 6 ;
12266: LD_ADDR_OWVAR 20
12270: PUSH
12271: LD_INT 6
12273: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
12274: LD_ADDR_EXP 8
12278: PUSH
12279: LD_STRING Mikhail
12281: PPUSH
12282: CALL_OW 25
12286: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
12287: LD_EXP 8
12291: PPUSH
12292: LD_INT 3
12294: PPUSH
12295: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
12299: LD_EXP 8
12303: PPUSH
12304: LD_VAR 0 2
12308: PUSH
12309: LD_INT 1
12311: ARRAY
12312: PPUSH
12313: CALL_OW 250
12317: PPUSH
12318: LD_VAR 0 2
12322: PUSH
12323: LD_INT 1
12325: ARRAY
12326: PPUSH
12327: CALL_OW 251
12331: PPUSH
12332: LD_INT 5
12334: PPUSH
12335: LD_INT 1
12337: PPUSH
12338: CALL_OW 50
// end ;
12342: LD_VAR 0 1
12346: RET
// export function PrepareRussianCommander ; begin
12347: LD_INT 0
12349: PPUSH
// uc_side = 3 ;
12350: LD_ADDR_OWVAR 20
12354: PUSH
12355: LD_INT 3
12357: ST_TO_ADDR
// uc_nation = 3 ;
12358: LD_ADDR_OWVAR 21
12362: PUSH
12363: LD_INT 3
12365: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
12366: LD_ADDR_EXP 19
12370: PUSH
12371: LD_STRING Natasza
12373: PPUSH
12374: CALL_OW 25
12378: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
12379: LD_EXP 19
12383: PPUSH
12384: LD_INT 24
12386: PPUSH
12387: LD_INT 0
12389: PPUSH
12390: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
12394: LD_EXP 19
12398: PPUSH
12399: LD_INT 56
12401: PPUSH
12402: LD_INT 16
12404: PPUSH
12405: CALL_OW 118
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , Natasza ) ;
12409: LD_ADDR_EXP 24
12413: PUSH
12414: LD_EXP 24
12418: PPUSH
12419: LD_EXP 24
12423: PUSH
12424: LD_INT 1
12426: PLUS
12427: PPUSH
12428: LD_EXP 19
12432: PPUSH
12433: CALL_OW 1
12437: ST_TO_ADDR
// end ;
12438: LD_VAR 0 1
12442: RET
// export function PrepareSouthBase ; var i , un ; begin
12443: LD_INT 0
12445: PPUSH
12446: PPUSH
12447: PPUSH
// for i = 1 to 2 do
12448: LD_ADDR_VAR 0 2
12452: PUSH
12453: DOUBLE
12454: LD_INT 1
12456: DEC
12457: ST_TO_ADDR
12458: LD_INT 2
12460: PUSH
12461: FOR_TO
12462: IFFALSE 12571
// begin uc_side = 3 ;
12464: LD_ADDR_OWVAR 20
12468: PUSH
12469: LD_INT 3
12471: ST_TO_ADDR
// uc_nation = 3 ;
12472: LD_ADDR_OWVAR 21
12476: PUSH
12477: LD_INT 3
12479: ST_TO_ADDR
// hc_gallery =  ;
12480: LD_ADDR_OWVAR 33
12484: PUSH
12485: LD_STRING 
12487: ST_TO_ADDR
// hc_name =  ;
12488: LD_ADDR_OWVAR 26
12492: PUSH
12493: LD_STRING 
12495: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12496: LD_INT 1
12498: PPUSH
12499: LD_INT 1
12501: PPUSH
12502: LD_EXP 13
12506: PPUSH
12507: LD_EXP 14
12511: PPUSH
12512: CALL_OW 12
12516: PPUSH
12517: CALL_OW 380
// hc_importance = 0 ;
12521: LD_ADDR_OWVAR 32
12525: PUSH
12526: LD_INT 0
12528: ST_TO_ADDR
// un = CreateHuman ;
12529: LD_ADDR_VAR 0 3
12533: PUSH
12534: CALL_OW 44
12538: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12539: LD_VAR 0 3
12543: PPUSH
12544: LD_INT 11
12546: PPUSH
12547: LD_INT 0
12549: PPUSH
12550: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12554: LD_VAR 0 3
12558: PPUSH
12559: LD_INT 111
12561: PPUSH
12562: LD_INT 38
12564: PPUSH
12565: CALL_OW 118
// end ;
12569: GO 12461
12571: POP
12572: POP
// for i = 1 to 2 do
12573: LD_ADDR_VAR 0 2
12577: PUSH
12578: DOUBLE
12579: LD_INT 1
12581: DEC
12582: ST_TO_ADDR
12583: LD_INT 2
12585: PUSH
12586: FOR_TO
12587: IFFALSE 12670
// begin uc_side = 3 ;
12589: LD_ADDR_OWVAR 20
12593: PUSH
12594: LD_INT 3
12596: ST_TO_ADDR
// uc_nation = 3 ;
12597: LD_ADDR_OWVAR 21
12601: PUSH
12602: LD_INT 3
12604: ST_TO_ADDR
// hc_gallery =  ;
12605: LD_ADDR_OWVAR 33
12609: PUSH
12610: LD_STRING 
12612: ST_TO_ADDR
// hc_name =  ;
12613: LD_ADDR_OWVAR 26
12617: PUSH
12618: LD_STRING 
12620: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12621: LD_INT 0
12623: PPUSH
12624: LD_INT 3
12626: PPUSH
12627: LD_EXP 13
12631: PPUSH
12632: LD_EXP 14
12636: PPUSH
12637: CALL_OW 12
12641: PPUSH
12642: CALL_OW 380
// un = CreateHuman ;
12646: LD_ADDR_VAR 0 3
12650: PUSH
12651: CALL_OW 44
12655: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12656: LD_VAR 0 3
12660: PPUSH
12661: LD_INT 10
12663: PPUSH
12664: CALL_OW 52
// end ;
12668: GO 12586
12670: POP
12671: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12672: LD_INT 3
12674: PPUSH
12675: LD_INT 3
12677: PPUSH
12678: LD_INT 33
12680: PPUSH
12681: LD_EXP 13
12685: PPUSH
12686: LD_EXP 14
12690: PPUSH
12691: CALL_OW 12
12695: PPUSH
12696: LD_INT 1
12698: PPUSH
12699: LD_INT 1
12701: PUSH
12702: LD_INT 2
12704: PUSH
12705: LD_INT 2
12707: PUSH
12708: LD_INT 3
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: PUSH
12717: LD_OWVAR 67
12721: ARRAY
12722: PPUSH
12723: CALL 9247 0 6
// for i in UnitsInside ( arm2 ) do
12727: LD_ADDR_VAR 0 2
12731: PUSH
12732: LD_INT 33
12734: PPUSH
12735: CALL_OW 313
12739: PUSH
12740: FOR_IN
12741: IFFALSE 12774
// southBaseDefenders = Replace ( southBaseDefenders , southBaseDefenders + 1 , i ) ;
12743: LD_ADDR_EXP 25
12747: PUSH
12748: LD_EXP 25
12752: PPUSH
12753: LD_EXP 25
12757: PUSH
12758: LD_INT 1
12760: PLUS
12761: PPUSH
12762: LD_VAR 0 2
12766: PPUSH
12767: CALL_OW 1
12771: ST_TO_ADDR
12772: GO 12740
12774: POP
12775: POP
// end ;
12776: LD_VAR 0 1
12780: RET
// export function PrepareNorthBase ; var i , un ; begin
12781: LD_INT 0
12783: PPUSH
12784: PPUSH
12785: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) , 4 ] [ Difficulty ] do
12786: LD_ADDR_VAR 0 2
12790: PUSH
12791: DOUBLE
12792: LD_INT 1
12794: DEC
12795: ST_TO_ADDR
12796: LD_INT 1
12798: PPUSH
12799: LD_INT 2
12801: PPUSH
12802: CALL_OW 12
12806: PUSH
12807: LD_INT 2
12809: PPUSH
12810: LD_INT 3
12812: PPUSH
12813: CALL_OW 12
12817: PUSH
12818: LD_INT 3
12820: PPUSH
12821: LD_INT 4
12823: PPUSH
12824: CALL_OW 12
12828: PUSH
12829: LD_INT 4
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: PUSH
12838: LD_OWVAR 67
12842: ARRAY
12843: PUSH
12844: FOR_TO
12845: IFFALSE 12931
// begin uc_side = 3 ;
12847: LD_ADDR_OWVAR 20
12851: PUSH
12852: LD_INT 3
12854: ST_TO_ADDR
// uc_nation = 3 ;
12855: LD_ADDR_OWVAR 21
12859: PUSH
12860: LD_INT 3
12862: ST_TO_ADDR
// hc_gallery =  ;
12863: LD_ADDR_OWVAR 33
12867: PUSH
12868: LD_STRING 
12870: ST_TO_ADDR
// hc_name =  ;
12871: LD_ADDR_OWVAR 26
12875: PUSH
12876: LD_STRING 
12878: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12879: LD_INT 0
12881: PPUSH
12882: LD_INT 1
12884: PPUSH
12885: LD_EXP 13
12889: PPUSH
12890: LD_EXP 14
12894: PPUSH
12895: CALL_OW 12
12899: PPUSH
12900: CALL_OW 380
// un = CreateHuman ;
12904: LD_ADDR_VAR 0 3
12908: PUSH
12909: CALL_OW 44
12913: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12914: LD_VAR 0 3
12918: PPUSH
12919: LD_INT 14
12921: PPUSH
12922: LD_INT 0
12924: PPUSH
12925: CALL_OW 49
// end ;
12929: GO 12844
12931: POP
12932: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) , 4 ] [ Difficulty ] ) ;
12933: LD_INT 3
12935: PPUSH
12936: LD_INT 3
12938: PPUSH
12939: LD_INT 2
12941: PPUSH
12942: LD_EXP 13
12946: PPUSH
12947: LD_EXP 14
12951: PPUSH
12952: CALL_OW 12
12956: PPUSH
12957: LD_INT 1
12959: PPUSH
12960: LD_INT 1
12962: PPUSH
12963: LD_INT 2
12965: PPUSH
12966: CALL_OW 12
12970: PUSH
12971: LD_INT 1
12973: PPUSH
12974: LD_INT 3
12976: PPUSH
12977: CALL_OW 12
12981: PUSH
12982: LD_INT 1
12984: PPUSH
12985: LD_INT 3
12987: PPUSH
12988: CALL_OW 12
12992: PUSH
12993: LD_INT 4
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: PUSH
13002: LD_OWVAR 67
13006: ARRAY
13007: PPUSH
13008: CALL 9247 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 , 2 ] [ Difficulty ] ) ;
13012: LD_INT 3
13014: PPUSH
13015: LD_INT 3
13017: PPUSH
13018: LD_INT 23
13020: PPUSH
13021: LD_EXP 13
13025: PPUSH
13026: LD_EXP 14
13030: PPUSH
13031: CALL_OW 12
13035: PPUSH
13036: LD_INT 4
13038: PPUSH
13039: LD_INT 0
13041: PUSH
13042: LD_INT 1
13044: PUSH
13045: LD_INT 2
13047: PUSH
13048: LD_INT 2
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: PUSH
13057: LD_OWVAR 67
13061: ARRAY
13062: PPUSH
13063: CALL 9247 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
13067: LD_INT 3
13069: PPUSH
13070: LD_INT 3
13072: PPUSH
13073: LD_INT 1
13075: PPUSH
13076: LD_EXP 13
13080: PPUSH
13081: LD_EXP 14
13085: PPUSH
13086: CALL_OW 12
13090: PPUSH
13091: LD_INT 2
13093: PPUSH
13094: LD_INT 1
13096: PUSH
13097: LD_INT 2
13099: PUSH
13100: LD_INT 2
13102: PUSH
13103: LD_INT 3
13105: PUSH
13106: EMPTY
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: PUSH
13112: LD_OWVAR 67
13116: ARRAY
13117: PPUSH
13118: CALL 9247 0 6
// for i in UnitsInside ( arm1 ) do
13122: LD_ADDR_VAR 0 2
13126: PUSH
13127: LD_INT 2
13129: PPUSH
13130: CALL_OW 313
13134: PUSH
13135: FOR_IN
13136: IFFALSE 13169
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , i ) ;
13138: LD_ADDR_EXP 24
13142: PUSH
13143: LD_EXP 24
13147: PPUSH
13148: LD_EXP 24
13152: PUSH
13153: LD_INT 1
13155: PLUS
13156: PPUSH
13157: LD_VAR 0 2
13161: PPUSH
13162: CALL_OW 1
13166: ST_TO_ADDR
13167: GO 13135
13169: POP
13170: POP
// end ;
13171: LD_VAR 0 1
13175: RET
// export function PrepareOtherRussians ; var i , un ; begin
13176: LD_INT 0
13178: PPUSH
13179: PPUSH
13180: PPUSH
// for i := 1 to 2 do
13181: LD_ADDR_VAR 0 2
13185: PUSH
13186: DOUBLE
13187: LD_INT 1
13189: DEC
13190: ST_TO_ADDR
13191: LD_INT 2
13193: PUSH
13194: FOR_TO
13195: IFFALSE 13296
// begin uc_side := 3 ;
13197: LD_ADDR_OWVAR 20
13201: PUSH
13202: LD_INT 3
13204: ST_TO_ADDR
// uc_nation := 3 ;
13205: LD_ADDR_OWVAR 21
13209: PUSH
13210: LD_INT 3
13212: ST_TO_ADDR
// hc_gallery =  ;
13213: LD_ADDR_OWVAR 33
13217: PUSH
13218: LD_STRING 
13220: ST_TO_ADDR
// hc_name =  ;
13221: LD_ADDR_OWVAR 26
13225: PUSH
13226: LD_STRING 
13228: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13229: LD_INT 0
13231: PPUSH
13232: LD_INT 1
13234: PPUSH
13235: LD_EXP 13
13239: PPUSH
13240: LD_EXP 14
13244: PPUSH
13245: CALL_OW 12
13249: PPUSH
13250: CALL_OW 380
// un := CreateHuman ;
13254: LD_ADDR_VAR 0 3
13258: PUSH
13259: CALL_OW 44
13263: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
13264: LD_VAR 0 3
13268: PPUSH
13269: LD_INT 9
13271: PPUSH
13272: LD_INT 0
13274: PPUSH
13275: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
13279: LD_VAR 0 3
13283: PPUSH
13284: LD_INT 80
13286: PPUSH
13287: LD_INT 73
13289: PPUSH
13290: CALL_OW 118
// end ;
13294: GO 13194
13296: POP
13297: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
13298: LD_ADDR_VAR 0 2
13302: PUSH
13303: LD_INT 22
13305: PUSH
13306: LD_INT 3
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: PUSH
13313: LD_INT 30
13315: PUSH
13316: LD_INT 31
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: PPUSH
13327: CALL_OW 69
13331: PUSH
13332: FOR_IN
13333: IFFALSE 13361
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
13335: LD_EXP 13
13339: PPUSH
13340: LD_EXP 14
13344: PPUSH
13345: CALL_OW 12
13349: PPUSH
13350: LD_VAR 0 2
13354: PPUSH
13355: CALL 9356 0 2
13359: GO 13332
13361: POP
13362: POP
// if Difficulty < 4 then
13363: LD_OWVAR 67
13367: PUSH
13368: LD_INT 4
13370: LESS
13371: IFFALSE 13375
// exit ;
13373: GO 13440
// ruPatrol := [ ] ;
13375: LD_ADDR_EXP 37
13379: PUSH
13380: EMPTY
13381: ST_TO_ADDR
// PrepareSoldier ( false , 4 ) ;
13382: LD_INT 0
13384: PPUSH
13385: LD_INT 4
13387: PPUSH
13388: CALL_OW 381
// un := CreateHuman ;
13392: LD_ADDR_VAR 0 3
13396: PUSH
13397: CALL_OW 44
13401: ST_TO_ADDR
// ruPatrol := Join ( ruPatrol , un ) ;
13402: LD_ADDR_EXP 37
13406: PUSH
13407: LD_EXP 37
13411: PPUSH
13412: LD_VAR 0 3
13416: PPUSH
13417: CALL 78351 0 2
13421: ST_TO_ADDR
// PlaceUnitXY ( un , 92 , 44 , false ) ;
13422: LD_VAR 0 3
13426: PPUSH
13427: LD_INT 92
13429: PPUSH
13430: LD_INT 44
13432: PPUSH
13433: LD_INT 0
13435: PPUSH
13436: CALL_OW 48
// end ;
13440: LD_VAR 0 1
13444: RET
// export function PrepareCargoBays ; begin
13445: LD_INT 0
13447: PPUSH
// uc_side = 3 ;
13448: LD_ADDR_OWVAR 20
13452: PUSH
13453: LD_INT 3
13455: ST_TO_ADDR
// uc_nation = 3 ;
13456: LD_ADDR_OWVAR 21
13460: PUSH
13461: LD_INT 3
13463: ST_TO_ADDR
// vc_engine = 1 ;
13464: LD_ADDR_OWVAR 39
13468: PUSH
13469: LD_INT 1
13471: ST_TO_ADDR
// vc_control = 1 ;
13472: LD_ADDR_OWVAR 38
13476: PUSH
13477: LD_INT 1
13479: ST_TO_ADDR
// vc_weapon = 51 ;
13480: LD_ADDR_OWVAR 40
13484: PUSH
13485: LD_INT 51
13487: ST_TO_ADDR
// vc_chassis = 22 ;
13488: LD_ADDR_OWVAR 37
13492: PUSH
13493: LD_INT 22
13495: ST_TO_ADDR
// cargo1 = CreateVehicle ;
13496: LD_ADDR_EXP 15
13500: PUSH
13501: CALL_OW 45
13505: ST_TO_ADDR
// cargo2 = CreateVehicle ;
13506: LD_ADDR_EXP 16
13510: PUSH
13511: CALL_OW 45
13515: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
13516: LD_EXP 15
13520: PPUSH
13521: LD_INT 13
13523: PPUSH
13524: LD_INT 0
13526: PPUSH
13527: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
13531: LD_EXP 16
13535: PPUSH
13536: LD_INT 13
13538: PPUSH
13539: LD_INT 0
13541: PPUSH
13542: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13546: LD_EXP 15
13550: PPUSH
13551: LD_INT 2
13553: PPUSH
13554: LD_INT 70
13556: PUSH
13557: LD_INT 50
13559: PUSH
13560: LD_INT 30
13562: PUSH
13563: LD_INT 20
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: PUSH
13572: LD_OWVAR 67
13576: ARRAY
13577: PPUSH
13578: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13582: LD_EXP 16
13586: PPUSH
13587: LD_INT 2
13589: PPUSH
13590: LD_INT 70
13592: PUSH
13593: LD_INT 50
13595: PUSH
13596: LD_INT 30
13598: PUSH
13599: LD_INT 20
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: PUSH
13608: LD_OWVAR 67
13612: ARRAY
13613: PPUSH
13614: CALL_OW 291
// hc_gallery =  ;
13618: LD_ADDR_OWVAR 33
13622: PUSH
13623: LD_STRING 
13625: ST_TO_ADDR
// hc_name =  ;
13626: LD_ADDR_OWVAR 26
13630: PUSH
13631: LD_STRING 
13633: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13634: LD_INT 1
13636: PPUSH
13637: LD_INT 3
13639: PPUSH
13640: LD_INT 1
13642: PPUSH
13643: LD_INT 2
13645: PPUSH
13646: CALL_OW 12
13650: PPUSH
13651: CALL_OW 380
// driver1 = CreateHuman ;
13655: LD_ADDR_EXP 17
13659: PUSH
13660: CALL_OW 44
13664: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13665: LD_EXP 17
13669: PPUSH
13670: LD_EXP 15
13674: PPUSH
13675: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13679: LD_ADDR_OWVAR 26
13683: PUSH
13684: LD_STRING Nikolai Andreyev
13686: ST_TO_ADDR
// driver2 = CreateHuman ;
13687: LD_ADDR_EXP 18
13691: PUSH
13692: CALL_OW 44
13696: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13697: LD_EXP 18
13701: PPUSH
13702: LD_EXP 16
13706: PPUSH
13707: CALL_OW 52
// end ;
13711: LD_VAR 0 1
13715: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , mech , mechs ; begin
13716: LD_INT 0
13718: PPUSH
13719: PPUSH
13720: PPUSH
13721: PPUSH
13722: PPUSH
13723: PPUSH
13724: PPUSH
// uc_side = 3 ;
13725: LD_ADDR_OWVAR 20
13729: PUSH
13730: LD_INT 3
13732: ST_TO_ADDR
// uc_nation = 3 ;
13733: LD_ADDR_OWVAR 21
13737: PUSH
13738: LD_INT 3
13740: ST_TO_ADDR
// for i := 1 to count do
13741: LD_ADDR_VAR 0 4
13745: PUSH
13746: DOUBLE
13747: LD_INT 1
13749: DEC
13750: ST_TO_ADDR
13751: LD_VAR 0 1
13755: PUSH
13756: FOR_TO
13757: IFFALSE 14019
// begin vc_engine = 1 ;
13759: LD_ADDR_OWVAR 39
13763: PUSH
13764: LD_INT 1
13766: ST_TO_ADDR
// vc_control = 1 ;
13767: LD_ADDR_OWVAR 38
13771: PUSH
13772: LD_INT 1
13774: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
13775: LD_ADDR_OWVAR 40
13779: PUSH
13780: LD_INT 42
13782: ST_TO_ADDR
// if Difficulty = 3 then
13783: LD_OWVAR 67
13787: PUSH
13788: LD_INT 3
13790: EQUAL
13791: IFFALSE 13820
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13793: LD_ADDR_OWVAR 40
13797: PUSH
13798: LD_INT 42
13800: PUSH
13801: LD_INT 43
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: PUSH
13808: LD_INT 1
13810: PPUSH
13811: LD_INT 2
13813: PPUSH
13814: CALL_OW 12
13818: ARRAY
13819: ST_TO_ADDR
// if Difficulty = 4 then
13820: LD_OWVAR 67
13824: PUSH
13825: LD_INT 4
13827: EQUAL
13828: IFFALSE 13865
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 4 ) ] ;
13830: LD_ADDR_OWVAR 40
13834: PUSH
13835: LD_INT 42
13837: PUSH
13838: LD_INT 43
13840: PUSH
13841: LD_INT 43
13843: PUSH
13844: LD_INT 44
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: PUSH
13853: LD_INT 1
13855: PPUSH
13856: LD_INT 4
13858: PPUSH
13859: CALL_OW 12
13863: ARRAY
13864: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
13865: LD_ADDR_OWVAR 37
13869: PUSH
13870: LD_INT 21
13872: PUSH
13873: LD_INT 22
13875: PUSH
13876: LD_INT 22
13878: PUSH
13879: LD_INT 22
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: PUSH
13888: LD_OWVAR 67
13892: ARRAY
13893: ST_TO_ADDR
// veh = CreateVehicle ;
13894: LD_ADDR_VAR 0 5
13898: PUSH
13899: CALL_OW 45
13903: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13904: LD_VAR 0 5
13908: PPUSH
13909: LD_VAR 0 2
13913: PPUSH
13914: LD_INT 0
13916: PPUSH
13917: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13921: LD_ADDR_EXP 26
13925: PUSH
13926: LD_EXP 26
13930: PUSH
13931: LD_VAR 0 5
13935: ADD
13936: ST_TO_ADDR
// hc_gallery =  ;
13937: LD_ADDR_OWVAR 33
13941: PUSH
13942: LD_STRING 
13944: ST_TO_ADDR
// hc_name =  ;
13945: LD_ADDR_OWVAR 26
13949: PUSH
13950: LD_STRING 
13952: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13953: LD_INT 0
13955: PPUSH
13956: LD_INT 3
13958: PPUSH
13959: LD_EXP 13
13963: PPUSH
13964: LD_EXP 14
13968: PPUSH
13969: CALL_OW 12
13973: PPUSH
13974: CALL_OW 380
// un = CreateHuman ;
13978: LD_ADDR_VAR 0 6
13982: PUSH
13983: CALL_OW 44
13987: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13988: LD_VAR 0 6
13992: PPUSH
13993: LD_VAR 0 5
13997: PPUSH
13998: CALL_OW 52
// ComMoveXY ( un , 14 , 9 ) ;
14002: LD_VAR 0 6
14006: PPUSH
14007: LD_INT 14
14009: PPUSH
14010: LD_INT 9
14012: PPUSH
14013: CALL_OW 111
// end ;
14017: GO 13756
14019: POP
14020: POP
// wait ( 0 0$1 ) ;
14021: LD_INT 35
14023: PPUSH
14024: CALL_OW 67
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
14028: LD_INT 0
14030: PPUSH
14031: LD_INT 2
14033: PPUSH
14034: LD_EXP 13
14038: PPUSH
14039: LD_EXP 14
14043: PPUSH
14044: CALL_OW 12
14048: PPUSH
14049: CALL_OW 380
// un = CreateHuman ;
14053: LD_ADDR_VAR 0 6
14057: PUSH
14058: CALL_OW 44
14062: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
14063: LD_ADDR_VAR 0 4
14067: PUSH
14068: DOUBLE
14069: LD_INT 1
14071: DEC
14072: ST_TO_ADDR
14073: LD_VAR 0 1
14077: PUSH
14078: LD_INT 2
14080: PUSH
14081: LD_INT 2
14083: MUL
14084: PLUS
14085: PUSH
14086: FOR_TO
14087: IFFALSE 14179
// begin hc_gallery =  ;
14089: LD_ADDR_OWVAR 33
14093: PUSH
14094: LD_STRING 
14096: ST_TO_ADDR
// hc_name =  ;
14097: LD_ADDR_OWVAR 26
14101: PUSH
14102: LD_STRING 
14104: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
14105: LD_INT 1
14107: PPUSH
14108: LD_INT 1
14110: PPUSH
14111: LD_EXP 13
14115: PPUSH
14116: LD_EXP 14
14120: PPUSH
14121: CALL_OW 12
14125: PPUSH
14126: CALL_OW 380
// un = CreateHuman ;
14130: LD_ADDR_VAR 0 6
14134: PUSH
14135: CALL_OW 44
14139: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 13 , 4 , false ) ;
14140: LD_VAR 0 6
14144: PPUSH
14145: LD_INT 9
14147: PPUSH
14148: LD_INT 13
14150: PPUSH
14151: LD_INT 4
14153: PPUSH
14154: LD_INT 0
14156: PPUSH
14157: CALL_OW 50
// attackGroup = attackGroup ^ un ;
14161: LD_ADDR_EXP 26
14165: PUSH
14166: LD_EXP 26
14170: PUSH
14171: LD_VAR 0 6
14175: ADD
14176: ST_TO_ADDR
// end ;
14177: GO 14086
14179: POP
14180: POP
// tmp := FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
14181: LD_ADDR_VAR 0 7
14185: PUSH
14186: LD_INT 26
14188: PPUSH
14189: LD_INT 22
14191: PUSH
14192: LD_INT 3
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: PUSH
14199: LD_INT 21
14201: PUSH
14202: LD_INT 1
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: PUSH
14209: LD_INT 26
14211: PUSH
14212: LD_INT 1
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: LIST
14223: PPUSH
14224: CALL_OW 70
14228: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
14229: LD_VAR 0 7
14233: PUSH
14234: LD_INT 1
14236: ARRAY
14237: PPUSH
14238: LD_STRING D9-Rus3-1
14240: PPUSH
14241: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
14245: LD_VAR 0 7
14249: PUSH
14250: LD_INT 2
14252: ARRAY
14253: PPUSH
14254: LD_STRING D9-Russ-1
14256: PPUSH
14257: CALL_OW 88
// ComAgressiveMove ( attackGroup , 31 , 13 ) ;
14261: LD_EXP 26
14265: PPUSH
14266: LD_INT 31
14268: PPUSH
14269: LD_INT 13
14271: PPUSH
14272: CALL_OW 114
// wait ( 0 0$3 ) ;
14276: LD_INT 105
14278: PPUSH
14279: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14283: LD_INT 35
14285: PPUSH
14286: CALL_OW 67
// for i in attackGroup do
14290: LD_ADDR_VAR 0 4
14294: PUSH
14295: LD_EXP 26
14299: PUSH
14300: FOR_IN
14301: IFFALSE 14874
// begin if IsDead ( i ) then
14303: LD_VAR 0 4
14307: PPUSH
14308: CALL_OW 301
14312: IFFALSE 14332
// begin attackGroup := attackGroup diff i ;
14314: LD_ADDR_EXP 26
14318: PUSH
14319: LD_EXP 26
14323: PUSH
14324: LD_VAR 0 4
14328: DIFF
14329: ST_TO_ADDR
// continue ;
14330: GO 14300
// end ; if not HasTask ( i ) and not GetTag ( i ) then
14332: LD_VAR 0 4
14336: PPUSH
14337: CALL_OW 314
14341: NOT
14342: IFFALSE 14356
14344: PUSH
14345: LD_VAR 0 4
14349: PPUSH
14350: CALL_OW 110
14354: NOT
14355: AND
14356: IFFALSE 14392
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
14358: LD_VAR 0 4
14362: PPUSH
14363: LD_INT 22
14365: PUSH
14366: LD_INT 1
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PPUSH
14373: CALL_OW 69
14377: PPUSH
14378: LD_VAR 0 4
14382: PPUSH
14383: CALL_OW 74
14387: PPUSH
14388: CALL_OW 115
// if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
14392: LD_VAR 0 4
14396: PPUSH
14397: CALL_OW 110
14401: NOT
14402: IFFALSE 14419
14404: PUSH
14405: LD_VAR 0 4
14409: PPUSH
14410: CALL_OW 256
14414: PUSH
14415: LD_INT 650
14417: LESS
14418: AND
14419: IFFALSE 14436
14421: PUSH
14422: LD_VAR 0 4
14426: PPUSH
14427: CALL_OW 247
14431: PUSH
14432: LD_INT 2
14434: EQUAL
14435: AND
14436: IFFALSE 14465
// begin SetTag ( i , 1 ) ;
14438: LD_VAR 0 4
14442: PPUSH
14443: LD_INT 1
14445: PPUSH
14446: CALL_OW 109
// ComMoveXY ( i , 10 , 10 ) ;
14450: LD_VAR 0 4
14454: PPUSH
14455: LD_INT 10
14457: PPUSH
14458: LD_INT 10
14460: PPUSH
14461: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 10 , 10 ) < 6 and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , i , 8 ] ] ) then
14465: LD_VAR 0 4
14469: PPUSH
14470: CALL_OW 110
14474: PUSH
14475: LD_INT 1
14477: EQUAL
14478: IFFALSE 14501
14480: PUSH
14481: LD_VAR 0 4
14485: PPUSH
14486: LD_INT 10
14488: PPUSH
14489: LD_INT 10
14491: PPUSH
14492: CALL_OW 297
14496: PUSH
14497: LD_INT 6
14499: LESS
14500: AND
14501: IFFALSE 14540
14503: PUSH
14504: LD_INT 22
14506: PUSH
14507: LD_INT 1
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: PUSH
14514: LD_INT 91
14516: PUSH
14517: LD_VAR 0 4
14521: PUSH
14522: LD_INT 8
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: LIST
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PPUSH
14534: CALL_OW 69
14538: NOT
14539: AND
14540: IFFALSE 14554
// SetTag ( i , 2 ) ;
14542: LD_VAR 0 4
14546: PPUSH
14547: LD_INT 2
14549: PPUSH
14550: CALL_OW 109
// if GetTag ( i ) = 2 then
14554: LD_VAR 0 4
14558: PPUSH
14559: CALL_OW 110
14563: PUSH
14564: LD_INT 2
14566: EQUAL
14567: IFFALSE 14815
// begin if GetLives ( i ) = 1000 then
14569: LD_VAR 0 4
14573: PPUSH
14574: CALL_OW 256
14578: PUSH
14579: LD_INT 1000
14581: EQUAL
14582: IFFALSE 14598
// SetTag ( i , 3 ) else
14584: LD_VAR 0 4
14588: PPUSH
14589: LD_INT 3
14591: PPUSH
14592: CALL_OW 109
14596: GO 14815
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , i , 8 ] ] ) and not IsDrivenBy ( i ) then
14598: LD_INT 22
14600: PUSH
14601: LD_INT 1
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PUSH
14608: LD_INT 91
14610: PUSH
14611: LD_VAR 0 4
14615: PUSH
14616: LD_INT 8
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: LIST
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PPUSH
14628: CALL_OW 69
14632: IFFALSE 14646
14634: PUSH
14635: LD_VAR 0 4
14639: PPUSH
14640: CALL_OW 311
14644: NOT
14645: AND
14646: IFFALSE 14722
// begin SetTag ( i , 3 ) ;
14648: LD_VAR 0 4
14652: PPUSH
14653: LD_INT 3
14655: PPUSH
14656: CALL_OW 109
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_tag , i ] ] ) ;
14660: LD_ADDR_VAR 0 8
14664: PUSH
14665: LD_INT 22
14667: PUSH
14668: LD_INT 3
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: PUSH
14675: LD_INT 120
14677: PUSH
14678: LD_VAR 0 4
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: PPUSH
14691: CALL_OW 69
14695: ST_TO_ADDR
// if mech then
14696: LD_VAR 0 8
14700: IFFALSE 14720
// ComEnterUnit ( mech [ 1 ] , i ) ;
14702: LD_VAR 0 8
14706: PUSH
14707: LD_INT 1
14709: ARRAY
14710: PPUSH
14711: LD_VAR 0 4
14715: PPUSH
14716: CALL_OW 120
// end else
14720: GO 14815
// if IsDrivenBy ( i ) then
14722: LD_VAR 0 4
14726: PPUSH
14727: CALL_OW 311
14731: IFFALSE 14815
// begin mech := IsDrivenBy ( i ) ;
14733: LD_ADDR_VAR 0 8
14737: PUSH
14738: LD_VAR 0 4
14742: PPUSH
14743: CALL_OW 311
14747: ST_TO_ADDR
// SetTag ( mech , i ) ;
14748: LD_VAR 0 8
14752: PPUSH
14753: LD_VAR 0 4
14757: PPUSH
14758: CALL_OW 109
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
14762: LD_INT 1
14764: PPUSH
14765: LD_VAR 0 8
14769: PPUSH
14770: CALL_OW 292
14774: NOT
14775: IFFALSE 14792
14777: PUSH
14778: LD_VAR 0 8
14782: PPUSH
14783: CALL_OW 256
14787: PUSH
14788: LD_INT 1000
14790: LESS
14791: AND
14792: IFFALSE 14806
// SetLives ( mech , 1000 ) ;
14794: LD_VAR 0 8
14798: PPUSH
14799: LD_INT 1000
14801: PPUSH
14802: CALL_OW 234
// ComRepairVehicleAndReturn ( mech ) ;
14806: LD_VAR 0 8
14810: PPUSH
14811: CALL 80065 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
14815: LD_VAR 0 4
14819: PPUSH
14820: CALL_OW 110
14824: PUSH
14825: LD_INT 3
14827: EQUAL
14828: IFFALSE 14841
14830: PUSH
14831: LD_VAR 0 4
14835: PPUSH
14836: CALL_OW 311
14840: AND
14841: IFFALSE 14872
// begin SetTag ( IsDrivenBy ( i ) , 0 ) ;
14843: LD_VAR 0 4
14847: PPUSH
14848: CALL_OW 311
14852: PPUSH
14853: LD_INT 0
14855: PPUSH
14856: CALL_OW 109
// SetTag ( i , 0 ) end ;
14860: LD_VAR 0 4
14864: PPUSH
14865: LD_INT 0
14867: PPUSH
14868: CALL_OW 109
// end ;
14872: GO 14300
14874: POP
14875: POP
// until not attackGroup ;
14876: LD_EXP 26
14880: NOT
14881: IFFALSE 14283
// end ;
14883: LD_VAR 0 3
14887: RET
// every 0 0$1 trigger UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do var i ;
14888: LD_EXP 26
14892: PPUSH
14893: LD_INT 21
14895: PUSH
14896: LD_INT 2
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: PPUSH
14903: CALL_OW 72
14907: IFFALSE 14975
14909: GO 14911
14911: DISABLE
14912: LD_INT 0
14914: PPUSH
// begin enable ;
14915: ENABLE
// for i in UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do
14916: LD_ADDR_VAR 0 1
14920: PUSH
14921: LD_EXP 26
14925: PPUSH
14926: LD_INT 21
14928: PUSH
14929: LD_INT 2
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: PPUSH
14936: CALL_OW 72
14940: PUSH
14941: FOR_IN
14942: IFFALSE 14973
// if GetFuel ( i ) < 3 then
14944: LD_VAR 0 1
14948: PPUSH
14949: CALL_OW 261
14953: PUSH
14954: LD_INT 3
14956: LESS
14957: IFFALSE 14971
// SetFuel ( i , 3 ) ;
14959: LD_VAR 0 1
14963: PPUSH
14964: LD_INT 3
14966: PPUSH
14967: CALL_OW 240
14971: GO 14941
14973: POP
14974: POP
// end ;
14975: PPOPN 1
14977: END
// every 0 0$2 trigger ruPatrol do
14978: LD_EXP 37
14982: IFFALSE 15121
14984: GO 14986
14986: DISABLE
// begin if not UnitFilter ( ruPatrol , [ f_ok ] ) then
14987: LD_EXP 37
14991: PPUSH
14992: LD_INT 50
14994: PUSH
14995: EMPTY
14996: LIST
14997: PPUSH
14998: CALL_OW 72
15002: NOT
15003: IFFALSE 15007
// exit ;
15005: GO 15121
// if GetDistUnitXY ( ruPatrol [ 1 ] , 92 , 44 ) < 3 and not HasTask ( ruPatrol [ 1 ] ) then
15007: LD_EXP 37
15011: PUSH
15012: LD_INT 1
15014: ARRAY
15015: PPUSH
15016: LD_INT 92
15018: PPUSH
15019: LD_INT 44
15021: PPUSH
15022: CALL_OW 297
15026: PUSH
15027: LD_INT 3
15029: LESS
15030: IFFALSE 15048
15032: PUSH
15033: LD_EXP 37
15037: PUSH
15038: LD_INT 1
15040: ARRAY
15041: PPUSH
15042: CALL_OW 314
15046: NOT
15047: AND
15048: IFFALSE 15078
// begin wait ( 0 0$5 ) ;
15050: LD_INT 175
15052: PPUSH
15053: CALL_OW 67
// ComAgressiveMove ( ruPatrol [ 1 ] , 122 , 68 ) ;
15057: LD_EXP 37
15061: PUSH
15062: LD_INT 1
15064: ARRAY
15065: PPUSH
15066: LD_INT 122
15068: PPUSH
15069: LD_INT 68
15071: PPUSH
15072: CALL_OW 114
// end else
15076: GO 15120
// if not HasTask ( ruPatrol [ 1 ] ) then
15078: LD_EXP 37
15082: PUSH
15083: LD_INT 1
15085: ARRAY
15086: PPUSH
15087: CALL_OW 314
15091: NOT
15092: IFFALSE 15120
// begin wait ( 0 0$5 ) ;
15094: LD_INT 175
15096: PPUSH
15097: CALL_OW 67
// ComAgressiveMove ( ruPatrol [ 1 ] , 92 , 44 ) ;
15101: LD_EXP 37
15105: PUSH
15106: LD_INT 1
15108: ARRAY
15109: PPUSH
15110: LD_INT 92
15112: PPUSH
15113: LD_INT 44
15115: PPUSH
15116: CALL_OW 114
// end ; enable ;
15120: ENABLE
// end ; end_of_file
15121: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do
15122: LD_INT 22
15124: PUSH
15125: LD_INT 3
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: PUSH
15132: LD_INT 25
15134: PUSH
15135: LD_INT 2
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: PPUSH
15146: CALL_OW 69
15150: IFFALSE 15169
15152: GO 15154
15154: DISABLE
// begin enable ;
15155: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
15156: LD_INT 3
15158: PPUSH
15159: LD_INT 1
15161: PPUSH
15162: LD_INT 22
15164: PPUSH
15165: CALL 9492 0 3
// end ;
15169: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
15170: LD_INT 22
15172: PUSH
15173: LD_INT 3
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: PUSH
15180: LD_INT 25
15182: PUSH
15183: LD_INT 4
15185: PUSH
15186: EMPTY
15187: LIST
15188: LIST
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PPUSH
15194: CALL_OW 69
15198: IFFALSE 15220
15200: GO 15202
15202: DISABLE
// begin enable ;
15203: ENABLE
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
15204: LD_INT 3
15206: PPUSH
15207: LD_INT 20
15209: PPUSH
15210: LD_INT 22
15212: PPUSH
15213: LD_INT 23
15215: PPUSH
15216: CALL 9830 0 4
// end ;
15220: END
// every 0 0$1 trigger northBaseDefenders do
15221: LD_EXP 24
15225: IFFALSE 15249
15227: GO 15229
15229: DISABLE
// begin enable ;
15230: ENABLE
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
15231: LD_INT 22
15233: PPUSH
15234: LD_INT 1
15236: PPUSH
15237: LD_EXP 24
15241: PPUSH
15242: LD_INT 2
15244: PPUSH
15245: CALL 10104 0 4
// end ;
15249: END
// every 0 0$1 trigger southBaseDefenders do
15250: LD_EXP 25
15254: IFFALSE 15278
15256: GO 15258
15258: DISABLE
// begin enable ;
15259: ENABLE
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
15260: LD_INT 23
15262: PPUSH
15263: LD_INT 1
15265: PPUSH
15266: LD_EXP 25
15270: PPUSH
15271: LD_INT 33
15273: PPUSH
15274: CALL 10104 0 4
// end ; end_of_file
15278: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
15279: LD_VAR 0 1
15283: PPUSH
15284: CALL 33677 0 1
// if unit = JMM then
15288: LD_VAR 0 1
15292: PUSH
15293: LD_EXP 1
15297: EQUAL
15298: IFFALSE 15307
// YouLost ( JMM ) ;
15300: LD_STRING JMM
15302: PPUSH
15303: CALL_OW 104
// if GetBType ( unit ) = b_depot then
15307: LD_VAR 0 1
15311: PPUSH
15312: CALL_OW 266
15316: PUSH
15317: LD_INT 0
15319: EQUAL
15320: IFFALSE 15329
// YouLost ( DepotDestroyed ) ;
15322: LD_STRING DepotDestroyed
15324: PPUSH
15325: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
15329: LD_VAR 0 1
15333: PPUSH
15334: CALL_OW 255
15338: PUSH
15339: LD_INT 1
15341: EQUAL
15342: IFFALSE 15359
15344: PUSH
15345: LD_VAR 0 1
15349: PPUSH
15350: CALL_OW 247
15354: PUSH
15355: LD_INT 1
15357: EQUAL
15358: AND
15359: IFFALSE 15375
// deadsCounter = deadsCounter + 1 ;
15361: LD_ADDR_EXP 31
15365: PUSH
15366: LD_EXP 31
15370: PUSH
15371: LD_INT 1
15373: PLUS
15374: ST_TO_ADDR
// end ;
15375: PPOPN 1
15377: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
15378: LD_VAR 0 1
15382: PUSH
15383: LD_INT 22
15385: PUSH
15386: LD_INT 1
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: PUSH
15393: LD_INT 23
15395: PUSH
15396: LD_INT 1
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: PUSH
15403: LD_INT 21
15405: PUSH
15406: LD_INT 1
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: LIST
15417: PPUSH
15418: CALL_OW 69
15422: IN
15423: IFFALSE 15435
15425: PUSH
15426: LD_VAR 0 2
15430: PUSH
15431: LD_INT 1
15433: EQUAL
15434: AND
15435: IFFALSE 15441
// JMMTraitor ;
15437: CALL 8900 0 0
// end ;
15441: PPOPN 3
15443: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
15444: LD_VAR 0 1
15448: PPUSH
15449: CALL_OW 255
15453: PUSH
15454: LD_INT 3
15456: EQUAL
15457: IFFALSE 15535
// begin ComMoveXY ( driver , 6 , 10 ) ;
15459: LD_VAR 0 1
15463: PPUSH
15464: LD_INT 6
15466: PPUSH
15467: LD_INT 10
15469: PPUSH
15470: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
15474: LD_INT 35
15476: PPUSH
15477: CALL_OW 67
// ComMoveXY ( driver , 6 , 10 ) ;
15481: LD_VAR 0 1
15485: PPUSH
15486: LD_INT 6
15488: PPUSH
15489: LD_INT 10
15491: PPUSH
15492: CALL_OW 111
// if IsDead ( driver ) then
15496: LD_VAR 0 1
15500: PPUSH
15501: CALL_OW 301
15505: IFFALSE 15509
// exit ;
15507: GO 15535
// until IsAt ( driver , 6 , 10 ) ;
15509: LD_VAR 0 1
15513: PPUSH
15514: LD_INT 6
15516: PPUSH
15517: LD_INT 10
15519: PPUSH
15520: CALL_OW 307
15524: IFFALSE 15474
// RemoveUnit ( driver ) ;
15526: LD_VAR 0 1
15530: PPUSH
15531: CALL_OW 64
// end ; end ;
15535: PPOPN 4
15537: END
// on Command ( cmd ) do var i , j , tmp ;
15538: LD_INT 0
15540: PPUSH
15541: PPUSH
15542: PPUSH
// begin SOS_Command ( cmd ) ;
15543: LD_VAR 0 1
15547: PPUSH
15548: CALL 33719 0 1
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
15552: LD_ADDR_VAR 0 2
15556: PUSH
15557: LD_INT 22
15559: PUSH
15560: LD_INT 1
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: PUSH
15567: LD_INT 21
15569: PUSH
15570: LD_INT 2
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: PPUSH
15581: CALL_OW 69
15585: PUSH
15586: FOR_IN
15587: IFFALSE 15712
// begin if GetTaskList ( i ) then
15589: LD_VAR 0 2
15593: PPUSH
15594: CALL_OW 437
15598: IFFALSE 15710
// begin for j = 1 to GetTaskList ( i ) do
15600: LD_ADDR_VAR 0 3
15604: PUSH
15605: DOUBLE
15606: LD_INT 1
15608: DEC
15609: ST_TO_ADDR
15610: LD_VAR 0 2
15614: PPUSH
15615: CALL_OW 437
15619: PUSH
15620: FOR_TO
15621: IFFALSE 15708
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
15623: LD_ADDR_VAR 0 4
15627: PUSH
15628: LD_VAR 0 2
15632: PPUSH
15633: CALL_OW 437
15637: PUSH
15638: LD_VAR 0 3
15642: ARRAY
15643: PUSH
15644: LD_INT 4
15646: ARRAY
15647: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
15648: LD_VAR 0 4
15652: PPUSH
15653: CALL_OW 255
15657: PUSH
15658: LD_INT 3
15660: EQUAL
15661: IFFALSE 15678
15663: PUSH
15664: LD_VAR 0 4
15668: PPUSH
15669: CALL_OW 247
15673: PUSH
15674: LD_INT 2
15676: EQUAL
15677: AND
15678: IFFALSE 15695
15680: PUSH
15681: LD_VAR 0 4
15685: PPUSH
15686: CALL_OW 264
15690: PUSH
15691: LD_INT 51
15693: EQUAL
15694: AND
15695: IFFALSE 15706
// ComStop ( i ) ;
15697: LD_VAR 0 2
15701: PPUSH
15702: CALL_OW 141
// end ;
15706: GO 15620
15708: POP
15709: POP
// end ; end ;
15710: GO 15586
15712: POP
15713: POP
// end ;
15714: PPOPN 4
15716: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
15717: LD_VAR 0 2
15721: PUSH
15722: LD_EXP 8
15726: EQUAL
15727: IFFALSE 15739
15729: PUSH
15730: LD_EXP 21
15734: PUSH
15735: LD_INT 4
15737: NONEQUAL
15738: AND
15739: IFFALSE 15893
// begin if IsOk ( Mikhail ) then
15741: LD_EXP 8
15745: PPUSH
15746: CALL_OW 302
15750: IFFALSE 15758
// AskMikhail else
15752: CALL 7566 0 0
15756: GO 15893
// if IsOk ( llab1 ) then
15758: LD_INT 23
15760: PPUSH
15761: CALL_OW 302
15765: IFFALSE 15856
// begin InGameOn ;
15767: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
15771: LD_EXP 8
15775: PPUSH
15776: LD_INT 6
15778: PPUSH
15779: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
15783: LD_INT 23
15785: PPUSH
15786: LD_INT 6
15788: PPUSH
15789: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
15793: LD_EXP 8
15797: PPUSH
15798: LD_INT 23
15800: PPUSH
15801: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15805: LD_INT 35
15807: PPUSH
15808: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
15812: LD_EXP 8
15816: PPUSH
15817: CALL_OW 310
15821: PUSH
15822: LD_INT 23
15824: EQUAL
15825: IFTRUE 15838
15827: PUSH
15828: LD_EXP 8
15832: PPUSH
15833: CALL_OW 301
15837: OR
15838: IFFALSE 15805
// SetSide ( llab1 , 1 ) ;
15840: LD_INT 23
15842: PPUSH
15843: LD_INT 1
15845: PPUSH
15846: CALL_OW 235
// InGameOff ;
15850: CALL_OW 9
// end else
15854: GO 15893
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
15856: LD_INT 3
15858: PPUSH
15859: LD_INT 6
15861: PPUSH
15862: LD_INT 2
15864: PPUSH
15865: LD_INT 1
15867: PPUSH
15868: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
15872: LD_EXP 8
15876: PPUSH
15877: LD_INT 6
15879: PPUSH
15880: CALL_OW 235
// ComHold ( Mikhail ) ;
15884: LD_EXP 8
15888: PPUSH
15889: CALL_OW 140
// end ; end ; end ;
15893: PPOPN 2
15895: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15896: LD_VAR 0 1
15900: PPUSH
15901: LD_VAR 0 2
15905: PPUSH
15906: CALL 33735 0 2
// end ;
15910: PPOPN 2
15912: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
15913: LD_EXP 8
15917: PPUSH
15918: CALL_OW 257
15922: PUSH
15923: LD_INT 3
15925: NONEQUAL
15926: IFFALSE 15944
15928: GO 15930
15930: DISABLE
// begin enable ;
15931: ENABLE
// SetClass ( Mikhail , 3 ) ;
15932: LD_EXP 8
15936: PPUSH
15937: LD_INT 3
15939: PPUSH
15940: CALL_OW 336
// end ; end_of_file
15944: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
15945: LD_INT 22
15947: PUSH
15948: LD_INT 1
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PUSH
15955: LD_INT 21
15957: PUSH
15958: LD_INT 1
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: PUSH
15965: LD_INT 25
15967: PUSH
15968: LD_INT 2
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: LIST
15979: PPUSH
15980: CALL_OW 69
15984: PUSH
15985: LD_INT 0
15987: EQUAL
15988: IFFALSE 16035
15990: PUSH
15991: LD_INT 22
15993: PUSH
15994: LD_INT 4
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: PUSH
16001: LD_INT 21
16003: PUSH
16004: LD_INT 1
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 25
16013: PUSH
16014: LD_INT 2
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: LIST
16025: PPUSH
16026: CALL_OW 69
16030: PUSH
16031: LD_INT 0
16033: EQUAL
16034: AND
16035: IFFALSE 16050
16037: PUSH
16038: LD_INT 1
16040: PPUSH
16041: CALL_OW 255
16045: PUSH
16046: LD_INT 3
16048: EQUAL
16049: AND
16050: IFFALSE 16065
16052: PUSH
16053: LD_INT 10
16055: PPUSH
16056: CALL_OW 255
16060: PUSH
16061: LD_INT 3
16063: EQUAL
16064: AND
16065: IFFALSE 16077
16067: GO 16069
16069: DISABLE
// YouLost ( Engineer ) ;
16070: LD_STRING Engineer
16072: PPUSH
16073: CALL_OW 104
16077: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
16078: LD_INT 1
16080: PPUSH
16081: CALL_OW 255
16085: PUSH
16086: LD_INT 3
16088: EQUAL
16089: IFFALSE 16101
16091: PUSH
16092: LD_EXP 27
16096: PUSH
16097: LD_INT 1
16099: EQUAL
16100: AND
16101: IFFALSE 16113
16103: GO 16105
16105: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
16106: LD_STRING DepotCaptured
16108: PPUSH
16109: CALL_OW 104
16113: END
// export function PrepareTigers ; var i , un ; begin
16114: LD_INT 0
16116: PPUSH
16117: PPUSH
16118: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
16119: LD_ADDR_VAR 0 2
16123: PUSH
16124: DOUBLE
16125: LD_INT 1
16127: DEC
16128: ST_TO_ADDR
16129: LD_INT 2
16131: PUSH
16132: LD_INT 3
16134: PUSH
16135: LD_INT 4
16137: PUSH
16138: LD_INT 5
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: PUSH
16147: LD_OWVAR 67
16151: ARRAY
16152: PUSH
16153: FOR_TO
16154: IFFALSE 16269
// begin uc_side := 0 ;
16156: LD_ADDR_OWVAR 20
16160: PUSH
16161: LD_INT 0
16163: ST_TO_ADDR
// uc_nation := nation_nature ;
16164: LD_ADDR_OWVAR 21
16168: PUSH
16169: LD_INT 0
16171: ST_TO_ADDR
// hc_sex := sex_male ;
16172: LD_ADDR_OWVAR 27
16176: PUSH
16177: LD_INT 1
16179: ST_TO_ADDR
// hc_class := class_tiger ;
16180: LD_ADDR_OWVAR 28
16184: PUSH
16185: LD_INT 14
16187: ST_TO_ADDR
// hc_skills := [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
16188: LD_ADDR_OWVAR 31
16192: PUSH
16193: LD_EXP 14
16197: PUSH
16198: LD_INT 0
16200: PUSH
16201: LD_INT 0
16203: PUSH
16204: LD_INT 0
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: ST_TO_ADDR
// hc_agressivity := [ 30 , 40 , 45 , 50 ] [ Difficulty ] ;
16213: LD_ADDR_OWVAR 35
16217: PUSH
16218: LD_INT 30
16220: PUSH
16221: LD_INT 40
16223: PUSH
16224: LD_INT 45
16226: PUSH
16227: LD_INT 50
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: PUSH
16236: LD_OWVAR 67
16240: ARRAY
16241: ST_TO_ADDR
// un = CreateHuman ;
16242: LD_ADDR_VAR 0 3
16246: PUSH
16247: CALL_OW 44
16251: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16252: LD_VAR 0 3
16256: PPUSH
16257: LD_INT 27
16259: PPUSH
16260: LD_INT 0
16262: PPUSH
16263: CALL_OW 49
// end ;
16267: GO 16153
16269: POP
16270: POP
// end ; end_of_file
16271: LD_VAR 0 1
16275: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
16276: LD_INT 1
16278: PPUSH
16279: CALL_OW 255
16283: PUSH
16284: LD_INT 1
16286: EQUAL
16287: IFFALSE 16302
16289: PUSH
16290: LD_INT 10
16292: PPUSH
16293: CALL_OW 255
16297: PUSH
16298: LD_INT 1
16300: EQUAL
16301: AND
16302: IFFALSE 16314
16304: PUSH
16305: LD_EXP 20
16309: PUSH
16310: LD_INT 1
16312: EQUAL
16313: AND
16314: IFFALSE 16375
16316: PUSH
16317: LD_INT 22
16319: PUSH
16320: LD_INT 3
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: PUSH
16327: LD_INT 21
16329: PUSH
16330: LD_INT 2
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PUSH
16337: LD_INT 34
16339: PUSH
16340: LD_INT 51
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PUSH
16347: LD_INT 3
16349: PUSH
16350: LD_INT 58
16352: PUSH
16353: EMPTY
16354: LIST
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: PUSH
16360: EMPTY
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: PPUSH
16366: CALL_OW 69
16370: PUSH
16371: LD_INT 0
16373: EQUAL
16374: AND
16375: IFFALSE 16466
16377: GO 16379
16379: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ) ;
16380: LD_INT 9450
16382: PUSH
16383: LD_INT 8400
16385: PUSH
16386: LD_INT 6300
16388: PUSH
16389: LD_INT 6300
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: PUSH
16398: LD_OWVAR 67
16402: ARRAY
16403: PPUSH
16404: CALL_OW 67
// if cargoEscape then
16408: LD_EXP 20
16412: IFFALSE 16466
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
16414: LD_EXP 9
16418: PPUSH
16419: LD_STRING D6-Pow-1
16421: PPUSH
16422: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
16426: LD_EXP 1
16430: PPUSH
16431: LD_STRING D6-JMM-1
16433: PPUSH
16434: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
16438: LD_EXP 9
16442: PPUSH
16443: LD_STRING D6-Pow-2
16445: PPUSH
16446: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
16450: LD_EXP 1
16454: PPUSH
16455: LD_STRING D6-JMM-2
16457: PPUSH
16458: CALL_OW 88
// FinishMission ;
16462: CALL 16688 0 0
// end ; end ;
16466: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
16467: LD_INT 1
16469: PPUSH
16470: CALL_OW 255
16474: PUSH
16475: LD_INT 1
16477: EQUAL
16478: IFFALSE 16493
16480: PUSH
16481: LD_INT 10
16483: PPUSH
16484: CALL_OW 255
16488: PUSH
16489: LD_INT 1
16491: EQUAL
16492: AND
16493: IFFALSE 16505
16495: PUSH
16496: LD_EXP 20
16500: PUSH
16501: LD_INT 1
16503: GREATER
16504: AND
16505: IFFALSE 16580
16507: GO 16509
16509: DISABLE
16510: LD_INT 0
16512: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
16513: LD_INT 11550
16515: PUSH
16516: LD_INT 10500
16518: PUSH
16519: LD_INT 9450
16521: PUSH
16522: LD_INT 8400
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: PUSH
16531: LD_OWVAR 67
16535: ARRAY
16536: PPUSH
16537: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 , 4 ] [ Difficulty ] , RussianAttack ) ;
16541: LD_INT 1
16543: PUSH
16544: LD_INT 2
16546: PUSH
16547: LD_INT 3
16549: PUSH
16550: LD_INT 4
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: PUSH
16559: LD_OWVAR 67
16563: ARRAY
16564: PPUSH
16565: LD_INT 13
16567: PPUSH
16568: CALL 13716 0 2
// lastBattle = 1 ;
16572: LD_ADDR_EXP 27
16576: PUSH
16577: LD_INT 1
16579: ST_TO_ADDR
// end ;
16580: PPOPN 1
16582: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
16583: LD_EXP 27
16587: PUSH
16588: LD_INT 1
16590: EQUAL
16591: IFFALSE 16630
16593: PUSH
16594: LD_INT 26
16596: PPUSH
16597: LD_INT 22
16599: PUSH
16600: LD_INT 3
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: LD_INT 21
16609: PUSH
16610: LD_INT 1
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: PPUSH
16621: CALL_OW 70
16625: PUSH
16626: LD_INT 0
16628: EQUAL
16629: AND
16630: IFFALSE 16687
16632: GO 16634
16634: DISABLE
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
16635: LD_EXP 9
16639: PPUSH
16640: LD_STRING D6-Pow-1
16642: PPUSH
16643: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
16647: LD_EXP 1
16651: PPUSH
16652: LD_STRING D6-JMM-1
16654: PPUSH
16655: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
16659: LD_EXP 9
16663: PPUSH
16664: LD_STRING D6-Pow-2
16666: PPUSH
16667: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
16671: LD_EXP 1
16675: PPUSH
16676: LD_STRING D6-JMM-2
16678: PPUSH
16679: CALL_OW 88
// FinishMission ;
16683: CALL 16688 0 0
// end ;
16687: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
16688: LD_INT 0
16690: PPUSH
16691: PPUSH
16692: PPUSH
16693: PPUSH
16694: PPUSH
// if traitor then
16695: LD_EXP 33
16699: IFFALSE 16703
// exit ;
16701: GO 17586
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] , [ f_ok ] ] ) ) < 2 then
16703: LD_INT 22
16705: PUSH
16706: LD_INT 1
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: PUSH
16713: LD_INT 21
16715: PUSH
16716: LD_INT 1
16718: PUSH
16719: EMPTY
16720: LIST
16721: LIST
16722: PUSH
16723: LD_INT 23
16725: PUSH
16726: LD_INT 1
16728: PUSH
16729: EMPTY
16730: LIST
16731: LIST
16732: PUSH
16733: LD_INT 50
16735: PUSH
16736: EMPTY
16737: LIST
16738: PUSH
16739: EMPTY
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: PPUSH
16745: CALL_OW 69
16749: PPUSH
16750: CALL 42375 0 1
16754: PUSH
16755: LD_INT 2
16757: LESS
16758: IFFALSE 16769
// begin YouLost ( Troops ) ;
16760: LD_STRING Troops
16762: PPUSH
16763: CALL_OW 104
// exit ;
16767: GO 17586
// end ; if tick <= 18 18$00 then
16769: LD_OWVAR 1
16773: PUSH
16774: LD_INT 37800
16776: LESSEQUAL
16777: IFFALSE 16786
// SetAchievement ( ACH_ASPEED_2 ) ;
16779: LD_STRING ACH_ASPEED_2
16781: PPUSH
16782: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
16786: LD_ADDR_VAR 0 2
16790: PUSH
16791: LD_INT 22
16793: PUSH
16794: LD_INT 1
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 21
16803: PUSH
16804: LD_INT 2
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: LD_INT 24
16813: PUSH
16814: LD_INT 251
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: LIST
16825: PPUSH
16826: CALL_OW 69
16830: ST_TO_ADDR
// if tmp then
16831: LD_VAR 0 2
16835: IFFALSE 16849
// SaveVehicles ( tmp , 02_tanks_1 ) ;
16837: LD_VAR 0 2
16841: PPUSH
16842: LD_STRING 02_tanks_1
16844: PPUSH
16845: CALL 10983 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
16849: LD_EXP 21
16853: PUSH
16854: LD_INT 1
16856: EQUAL
16857: IFFALSE 16870
16859: PUSH
16860: LD_EXP 8
16864: PPUSH
16865: CALL_OW 300
16869: AND
16870: IFFALSE 16884
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
16872: LD_EXP 21
16876: PPUSH
16877: LD_STRING 02_mikhailStatus_1
16879: PPUSH
16880: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
16884: LD_INT 1
16886: PPUSH
16887: CALL_OW 274
16891: PPUSH
16892: LD_INT 1
16894: PPUSH
16895: CALL_OW 275
16899: PPUSH
16900: LD_STRING 02_resources_4
16902: PPUSH
16903: CALL_OW 39
// m1 := false ;
16907: LD_ADDR_VAR 0 3
16911: PUSH
16912: LD_INT 0
16914: ST_TO_ADDR
// m2 := false ;
16915: LD_ADDR_VAR 0 4
16919: PUSH
16920: LD_INT 0
16922: ST_TO_ADDR
// m3 := false ;
16923: LD_ADDR_VAR 0 5
16927: PUSH
16928: LD_INT 0
16930: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
16931: LD_INT 1
16933: PPUSH
16934: CALL_OW 274
16938: PPUSH
16939: LD_INT 1
16941: PPUSH
16942: CALL_OW 275
16946: PUSH
16947: LD_INT 200
16949: GREATEREQUAL
16950: IFFALSE 16972
// begin AddMedal ( Cans , 1 ) ;
16952: LD_STRING Cans
16954: PPUSH
16955: LD_INT 1
16957: PPUSH
16958: CALL_OW 101
// m1 := true ;
16962: LD_ADDR_VAR 0 3
16966: PUSH
16967: LD_INT 1
16969: ST_TO_ADDR
// end else
16970: GO 16983
// begin AddMedal ( Cans , - 1 ) ;
16972: LD_STRING Cans
16974: PPUSH
16975: LD_INT 1
16977: NEG
16978: PPUSH
16979: CALL_OW 101
// end ; if deadsCounter < 2 then
16983: LD_EXP 31
16987: PUSH
16988: LD_INT 2
16990: LESS
16991: IFFALSE 17013
// begin AddMedal ( Deaths , 1 ) ;
16993: LD_STRING Deaths
16995: PPUSH
16996: LD_INT 1
16998: PPUSH
16999: CALL_OW 101
// m2 := true ;
17003: LD_ADDR_VAR 0 4
17007: PUSH
17008: LD_INT 1
17010: ST_TO_ADDR
// end else
17011: GO 17024
// begin AddMedal ( Deaths , - 1 ) ;
17013: LD_STRING Deaths
17015: PPUSH
17016: LD_INT 1
17018: NEG
17019: PPUSH
17020: CALL_OW 101
// end ; if mikhailStatus = 0 then
17024: LD_EXP 21
17028: PUSH
17029: LD_INT 0
17031: EQUAL
17032: IFFALSE 17045
// AddMedal ( Prisoner , - 1 ) ;
17034: LD_STRING Prisoner
17036: PPUSH
17037: LD_INT 1
17039: NEG
17040: PPUSH
17041: CALL_OW 101
// if mikhailStatus = 1 then
17045: LD_EXP 21
17049: PUSH
17050: LD_INT 1
17052: EQUAL
17053: IFFALSE 17073
// begin AddMedal ( Prisoner , 1 ) ;
17055: LD_STRING Prisoner
17057: PPUSH
17058: LD_INT 1
17060: PPUSH
17061: CALL_OW 101
// m3 := true ;
17065: LD_ADDR_VAR 0 5
17069: PUSH
17070: LD_INT 1
17072: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
17073: LD_EXP 21
17077: PUSH
17078: LD_INT 2
17080: EQUAL
17081: IFFALSE 17101
// begin AddMedal ( Prisoner , 2 ) ;
17083: LD_STRING Prisoner
17085: PPUSH
17086: LD_INT 2
17088: PPUSH
17089: CALL_OW 101
// m3 := true ;
17093: LD_ADDR_VAR 0 5
17097: PUSH
17098: LD_INT 1
17100: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
17101: LD_EXP 21
17105: PUSH
17106: LD_INT 3
17108: EQUAL
17109: IFFALSE 17122
// AddMedal ( Prisoner , - 2 ) ;
17111: LD_STRING Prisoner
17113: PPUSH
17114: LD_INT 2
17116: NEG
17117: PPUSH
17118: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
17122: LD_OWVAR 67
17126: PUSH
17127: LD_INT 3
17129: GREATEREQUAL
17130: IFFALSE 17138
17132: PUSH
17133: LD_VAR 0 3
17137: AND
17138: IFFALSE 17146
17140: PUSH
17141: LD_VAR 0 4
17145: AND
17146: IFFALSE 17154
17148: PUSH
17149: LD_VAR 0 5
17153: AND
17154: IFFALSE 17166
// SetAchievementEX ( ACH_AMER , 2 ) ;
17156: LD_STRING ACH_AMER
17158: PPUSH
17159: LD_INT 2
17161: PPUSH
17162: CALL_OW 564
// GiveMedals ( MAIN ) ;
17166: LD_STRING MAIN
17168: PPUSH
17169: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
17173: LD_INT 22
17175: PUSH
17176: LD_INT 1
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PUSH
17183: LD_INT 23
17185: PUSH
17186: LD_INT 1
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: PUSH
17193: LD_INT 21
17195: PUSH
17196: LD_INT 1
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: LIST
17207: PPUSH
17208: CALL_OW 69
17212: PPUSH
17213: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
17217: LD_EXP 1
17221: PPUSH
17222: LD_EXP 34
17226: PUSH
17227: LD_STRING JMM
17229: STR
17230: PPUSH
17231: CALL_OW 38
// if IsOK ( Bobby ) then
17235: LD_EXP 2
17239: PPUSH
17240: CALL_OW 302
17244: IFFALSE 17264
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
17246: LD_EXP 2
17250: PPUSH
17251: LD_EXP 34
17255: PUSH
17256: LD_STRING Bobby
17258: STR
17259: PPUSH
17260: CALL_OW 38
// if IsOK ( Cyrus ) then
17264: LD_EXP 3
17268: PPUSH
17269: CALL_OW 302
17273: IFFALSE 17293
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
17275: LD_EXP 3
17279: PPUSH
17280: LD_EXP 34
17284: PUSH
17285: LD_STRING Cyrus
17287: STR
17288: PPUSH
17289: CALL_OW 38
// if IsOK ( Lisa ) then
17293: LD_EXP 4
17297: PPUSH
17298: CALL_OW 302
17302: IFFALSE 17329
// begin ToLua ( enableBioCharacter(BIO_LISA) ) ;
17304: LD_STRING enableBioCharacter(BIO_LISA)
17306: PPUSH
17307: CALL_OW 559
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
17311: LD_EXP 4
17315: PPUSH
17316: LD_EXP 34
17320: PUSH
17321: LD_STRING Lisa
17323: STR
17324: PPUSH
17325: CALL_OW 38
// end ; if IsOK ( Khatam ) then
17329: LD_EXP 5
17333: PPUSH
17334: CALL_OW 302
17338: IFFALSE 17365
// begin ToLua ( enableBioCharacter(BIO_KHAT) ) ;
17340: LD_STRING enableBioCharacter(BIO_KHAT)
17342: PPUSH
17343: CALL_OW 559
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
17347: LD_EXP 5
17351: PPUSH
17352: LD_EXP 34
17356: PUSH
17357: LD_STRING Khatam
17359: STR
17360: PPUSH
17361: CALL_OW 38
// end ; if IsOK ( Brian ) then
17365: LD_EXP 6
17369: PPUSH
17370: CALL_OW 302
17374: IFFALSE 17394
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
17376: LD_EXP 6
17380: PPUSH
17381: LD_EXP 34
17385: PUSH
17386: LD_STRING Brian
17388: STR
17389: PPUSH
17390: CALL_OW 38
// if IsOk ( Jerry ) then
17394: LD_EXP 7
17398: PPUSH
17399: CALL_OW 302
17403: IFFALSE 17423
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
17405: LD_EXP 7
17409: PPUSH
17410: LD_EXP 34
17414: PUSH
17415: LD_STRING Jerry
17417: STR
17418: PPUSH
17419: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
17423: LD_EXP 21
17427: PUSH
17428: LD_INT 1
17430: EQUAL
17431: IFFALSE 17448
17433: PUSH
17434: LD_EXP 8
17438: PPUSH
17439: CALL_OW 255
17443: PUSH
17444: LD_INT 1
17446: EQUAL
17447: AND
17448: IFFALSE 17461
17450: PUSH
17451: LD_EXP 8
17455: PPUSH
17456: CALL_OW 302
17460: AND
17461: IFFALSE 17488
// begin ToLua ( enableBioCharacter(BIO_MICH) ) ;
17463: LD_STRING enableBioCharacter(BIO_MICH)
17465: PPUSH
17466: CALL_OW 559
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
17470: LD_EXP 8
17474: PPUSH
17475: LD_EXP 34
17479: PUSH
17480: LD_STRING Mikhail
17482: STR
17483: PPUSH
17484: CALL_OW 38
// end ; SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
17488: LD_INT 50
17490: PUSH
17491: EMPTY
17492: LIST
17493: PUSH
17494: LD_INT 22
17496: PUSH
17497: LD_INT 1
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: LD_INT 21
17506: PUSH
17507: LD_INT 1
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: LIST
17518: PPUSH
17519: CALL_OW 69
17523: PUSH
17524: LD_EXP 1
17528: PUSH
17529: LD_EXP 2
17533: PUSH
17534: LD_EXP 3
17538: PUSH
17539: LD_EXP 4
17543: PUSH
17544: LD_EXP 5
17548: PUSH
17549: LD_EXP 6
17553: PUSH
17554: LD_EXP 7
17558: PUSH
17559: LD_EXP 8
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: DIFF
17574: PPUSH
17575: LD_STRING 02_other_survivors
17577: PPUSH
17578: CALL_OW 38
// YouWin ;
17582: CALL_OW 103
// end ; end_of_file end_of_file
17586: LD_VAR 0 1
17590: RET
// export globalGameSaveCounter ; every 0 0$1 do
17591: GO 17593
17593: DISABLE
// begin enable ;
17594: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
17595: LD_STRING updateTimer(
17597: PUSH
17598: LD_OWVAR 1
17602: STR
17603: PUSH
17604: LD_STRING );
17606: STR
17607: PPUSH
17608: CALL_OW 559
// end ;
17612: END
// every 0 0$1 do
17613: GO 17615
17615: DISABLE
// begin globalGameSaveCounter := 0 ;
17616: LD_ADDR_EXP 38
17620: PUSH
17621: LD_INT 0
17623: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
17624: LD_STRING setGameSaveCounter(0)
17626: PPUSH
17627: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
17631: LD_STRING initStreamRollete();
17633: PPUSH
17634: CALL_OW 559
// InitStreamMode ;
17638: CALL 18990 0 0
// DefineStreamItems ( false ) ;
17642: LD_INT 0
17644: PPUSH
17645: CALL 19454 0 1
// end ;
17649: END
// export function SOS_MapStart ( ) ; begin
17650: LD_INT 0
17652: PPUSH
// if streamModeActive then
17653: LD_EXP 39
17657: IFFALSE 17666
// DefineStreamItems ( true ) ;
17659: LD_INT 1
17661: PPUSH
17662: CALL 19454 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
17666: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
17668: PPUSH
17669: CALL_OW 559
// UpdateLuaVariables ( ) ;
17673: CALL 17690 0 0
// UpdateFactoryWaypoints ( ) ;
17677: CALL 32576 0 0
// UpdateWarehouseGatheringPoints ( ) ;
17681: CALL 32828 0 0
// end ;
17685: LD_VAR 0 1
17689: RET
// function UpdateLuaVariables ( ) ; begin
17690: LD_INT 0
17692: PPUSH
// if globalGameSaveCounter then
17693: LD_EXP 38
17697: IFFALSE 17731
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
17699: LD_ADDR_EXP 38
17703: PUSH
17704: LD_EXP 38
17708: PPUSH
17709: CALL 79724 0 1
17713: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17714: LD_STRING setGameSaveCounter(
17716: PUSH
17717: LD_EXP 38
17721: STR
17722: PUSH
17723: LD_STRING )
17725: STR
17726: PPUSH
17727: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
17731: LD_STRING setGameDifficulty(
17733: PUSH
17734: LD_OWVAR 67
17738: STR
17739: PUSH
17740: LD_STRING )
17742: STR
17743: PPUSH
17744: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
17748: LD_STRING displayDifficulty(
17750: PUSH
17751: LD_OWVAR 67
17755: STR
17756: PUSH
17757: LD_STRING )
17759: STR
17760: PPUSH
17761: CALL_OW 559
// end ;
17765: LD_VAR 0 1
17769: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17770: LD_INT 0
17772: PPUSH
// if p2 = stream_mode then
17773: LD_VAR 0 2
17777: PUSH
17778: LD_INT 100
17780: EQUAL
17781: IFFALSE 18784
// begin if not StreamModeActive then
17783: LD_EXP 39
17787: NOT
17788: IFFALSE 17798
// StreamModeActive := true ;
17790: LD_ADDR_EXP 39
17794: PUSH
17795: LD_INT 1
17797: ST_TO_ADDR
// if p3 = 0 then
17798: LD_VAR 0 3
17802: PUSH
17803: LD_INT 0
17805: EQUAL
17806: IFFALSE 17812
// InitStreamMode ;
17808: CALL 18990 0 0
// if p3 = 1 then
17812: LD_VAR 0 3
17816: PUSH
17817: LD_INT 1
17819: EQUAL
17820: IFFALSE 17830
// sRocket := true ;
17822: LD_ADDR_EXP 44
17826: PUSH
17827: LD_INT 1
17829: ST_TO_ADDR
// if p3 = 2 then
17830: LD_VAR 0 3
17834: PUSH
17835: LD_INT 2
17837: EQUAL
17838: IFFALSE 17848
// sSpeed := true ;
17840: LD_ADDR_EXP 43
17844: PUSH
17845: LD_INT 1
17847: ST_TO_ADDR
// if p3 = 3 then
17848: LD_VAR 0 3
17852: PUSH
17853: LD_INT 3
17855: EQUAL
17856: IFFALSE 17866
// sEngine := true ;
17858: LD_ADDR_EXP 45
17862: PUSH
17863: LD_INT 1
17865: ST_TO_ADDR
// if p3 = 4 then
17866: LD_VAR 0 3
17870: PUSH
17871: LD_INT 4
17873: EQUAL
17874: IFFALSE 17884
// sSpec := true ;
17876: LD_ADDR_EXP 42
17880: PUSH
17881: LD_INT 1
17883: ST_TO_ADDR
// if p3 = 5 then
17884: LD_VAR 0 3
17888: PUSH
17889: LD_INT 5
17891: EQUAL
17892: IFFALSE 17902
// sLevel := true ;
17894: LD_ADDR_EXP 46
17898: PUSH
17899: LD_INT 1
17901: ST_TO_ADDR
// if p3 = 6 then
17902: LD_VAR 0 3
17906: PUSH
17907: LD_INT 6
17909: EQUAL
17910: IFFALSE 17920
// sArmoury := true ;
17912: LD_ADDR_EXP 47
17916: PUSH
17917: LD_INT 1
17919: ST_TO_ADDR
// if p3 = 7 then
17920: LD_VAR 0 3
17924: PUSH
17925: LD_INT 7
17927: EQUAL
17928: IFFALSE 17938
// sRadar := true ;
17930: LD_ADDR_EXP 48
17934: PUSH
17935: LD_INT 1
17937: ST_TO_ADDR
// if p3 = 8 then
17938: LD_VAR 0 3
17942: PUSH
17943: LD_INT 8
17945: EQUAL
17946: IFFALSE 17956
// sBunker := true ;
17948: LD_ADDR_EXP 49
17952: PUSH
17953: LD_INT 1
17955: ST_TO_ADDR
// if p3 = 9 then
17956: LD_VAR 0 3
17960: PUSH
17961: LD_INT 9
17963: EQUAL
17964: IFFALSE 17974
// sHack := true ;
17966: LD_ADDR_EXP 50
17970: PUSH
17971: LD_INT 1
17973: ST_TO_ADDR
// if p3 = 10 then
17974: LD_VAR 0 3
17978: PUSH
17979: LD_INT 10
17981: EQUAL
17982: IFFALSE 17992
// sFire := true ;
17984: LD_ADDR_EXP 51
17988: PUSH
17989: LD_INT 1
17991: ST_TO_ADDR
// if p3 = 11 then
17992: LD_VAR 0 3
17996: PUSH
17997: LD_INT 11
17999: EQUAL
18000: IFFALSE 18010
// sRefresh := true ;
18002: LD_ADDR_EXP 52
18006: PUSH
18007: LD_INT 1
18009: ST_TO_ADDR
// if p3 = 12 then
18010: LD_VAR 0 3
18014: PUSH
18015: LD_INT 12
18017: EQUAL
18018: IFFALSE 18028
// sExp := true ;
18020: LD_ADDR_EXP 53
18024: PUSH
18025: LD_INT 1
18027: ST_TO_ADDR
// if p3 = 13 then
18028: LD_VAR 0 3
18032: PUSH
18033: LD_INT 13
18035: EQUAL
18036: IFFALSE 18046
// sDepot := true ;
18038: LD_ADDR_EXP 54
18042: PUSH
18043: LD_INT 1
18045: ST_TO_ADDR
// if p3 = 14 then
18046: LD_VAR 0 3
18050: PUSH
18051: LD_INT 14
18053: EQUAL
18054: IFFALSE 18064
// sFlag := true ;
18056: LD_ADDR_EXP 55
18060: PUSH
18061: LD_INT 1
18063: ST_TO_ADDR
// if p3 = 15 then
18064: LD_VAR 0 3
18068: PUSH
18069: LD_INT 15
18071: EQUAL
18072: IFFALSE 18082
// sKamikadze := true ;
18074: LD_ADDR_EXP 63
18078: PUSH
18079: LD_INT 1
18081: ST_TO_ADDR
// if p3 = 16 then
18082: LD_VAR 0 3
18086: PUSH
18087: LD_INT 16
18089: EQUAL
18090: IFFALSE 18100
// sTroll := true ;
18092: LD_ADDR_EXP 64
18096: PUSH
18097: LD_INT 1
18099: ST_TO_ADDR
// if p3 = 17 then
18100: LD_VAR 0 3
18104: PUSH
18105: LD_INT 17
18107: EQUAL
18108: IFFALSE 18118
// sSlow := true ;
18110: LD_ADDR_EXP 65
18114: PUSH
18115: LD_INT 1
18117: ST_TO_ADDR
// if p3 = 18 then
18118: LD_VAR 0 3
18122: PUSH
18123: LD_INT 18
18125: EQUAL
18126: IFFALSE 18136
// sLack := true ;
18128: LD_ADDR_EXP 66
18132: PUSH
18133: LD_INT 1
18135: ST_TO_ADDR
// if p3 = 19 then
18136: LD_VAR 0 3
18140: PUSH
18141: LD_INT 19
18143: EQUAL
18144: IFFALSE 18154
// sTank := true ;
18146: LD_ADDR_EXP 68
18150: PUSH
18151: LD_INT 1
18153: ST_TO_ADDR
// if p3 = 20 then
18154: LD_VAR 0 3
18158: PUSH
18159: LD_INT 20
18161: EQUAL
18162: IFFALSE 18172
// sRemote := true ;
18164: LD_ADDR_EXP 69
18168: PUSH
18169: LD_INT 1
18171: ST_TO_ADDR
// if p3 = 21 then
18172: LD_VAR 0 3
18176: PUSH
18177: LD_INT 21
18179: EQUAL
18180: IFFALSE 18190
// sPowell := true ;
18182: LD_ADDR_EXP 70
18186: PUSH
18187: LD_INT 1
18189: ST_TO_ADDR
// if p3 = 22 then
18190: LD_VAR 0 3
18194: PUSH
18195: LD_INT 22
18197: EQUAL
18198: IFFALSE 18208
// sTeleport := true ;
18200: LD_ADDR_EXP 73
18204: PUSH
18205: LD_INT 1
18207: ST_TO_ADDR
// if p3 = 23 then
18208: LD_VAR 0 3
18212: PUSH
18213: LD_INT 23
18215: EQUAL
18216: IFFALSE 18226
// sOilTower := true ;
18218: LD_ADDR_EXP 75
18222: PUSH
18223: LD_INT 1
18225: ST_TO_ADDR
// if p3 = 24 then
18226: LD_VAR 0 3
18230: PUSH
18231: LD_INT 24
18233: EQUAL
18234: IFFALSE 18244
// sShovel := true ;
18236: LD_ADDR_EXP 76
18240: PUSH
18241: LD_INT 1
18243: ST_TO_ADDR
// if p3 = 25 then
18244: LD_VAR 0 3
18248: PUSH
18249: LD_INT 25
18251: EQUAL
18252: IFFALSE 18262
// sSheik := true ;
18254: LD_ADDR_EXP 77
18258: PUSH
18259: LD_INT 1
18261: ST_TO_ADDR
// if p3 = 26 then
18262: LD_VAR 0 3
18266: PUSH
18267: LD_INT 26
18269: EQUAL
18270: IFFALSE 18280
// sEarthquake := true ;
18272: LD_ADDR_EXP 79
18276: PUSH
18277: LD_INT 1
18279: ST_TO_ADDR
// if p3 = 27 then
18280: LD_VAR 0 3
18284: PUSH
18285: LD_INT 27
18287: EQUAL
18288: IFFALSE 18298
// sAI := true ;
18290: LD_ADDR_EXP 80
18294: PUSH
18295: LD_INT 1
18297: ST_TO_ADDR
// if p3 = 28 then
18298: LD_VAR 0 3
18302: PUSH
18303: LD_INT 28
18305: EQUAL
18306: IFFALSE 18316
// sCargo := true ;
18308: LD_ADDR_EXP 83
18312: PUSH
18313: LD_INT 1
18315: ST_TO_ADDR
// if p3 = 29 then
18316: LD_VAR 0 3
18320: PUSH
18321: LD_INT 29
18323: EQUAL
18324: IFFALSE 18334
// sDLaser := true ;
18326: LD_ADDR_EXP 84
18330: PUSH
18331: LD_INT 1
18333: ST_TO_ADDR
// if p3 = 30 then
18334: LD_VAR 0 3
18338: PUSH
18339: LD_INT 30
18341: EQUAL
18342: IFFALSE 18352
// sExchange := true ;
18344: LD_ADDR_EXP 85
18348: PUSH
18349: LD_INT 1
18351: ST_TO_ADDR
// if p3 = 31 then
18352: LD_VAR 0 3
18356: PUSH
18357: LD_INT 31
18359: EQUAL
18360: IFFALSE 18370
// sFac := true ;
18362: LD_ADDR_EXP 86
18366: PUSH
18367: LD_INT 1
18369: ST_TO_ADDR
// if p3 = 32 then
18370: LD_VAR 0 3
18374: PUSH
18375: LD_INT 32
18377: EQUAL
18378: IFFALSE 18388
// sPower := true ;
18380: LD_ADDR_EXP 87
18384: PUSH
18385: LD_INT 1
18387: ST_TO_ADDR
// if p3 = 33 then
18388: LD_VAR 0 3
18392: PUSH
18393: LD_INT 33
18395: EQUAL
18396: IFFALSE 18406
// sRandom := true ;
18398: LD_ADDR_EXP 88
18402: PUSH
18403: LD_INT 1
18405: ST_TO_ADDR
// if p3 = 34 then
18406: LD_VAR 0 3
18410: PUSH
18411: LD_INT 34
18413: EQUAL
18414: IFFALSE 18424
// sShield := true ;
18416: LD_ADDR_EXP 89
18420: PUSH
18421: LD_INT 1
18423: ST_TO_ADDR
// if p3 = 35 then
18424: LD_VAR 0 3
18428: PUSH
18429: LD_INT 35
18431: EQUAL
18432: IFFALSE 18442
// sTime := true ;
18434: LD_ADDR_EXP 90
18438: PUSH
18439: LD_INT 1
18441: ST_TO_ADDR
// if p3 = 36 then
18442: LD_VAR 0 3
18446: PUSH
18447: LD_INT 36
18449: EQUAL
18450: IFFALSE 18460
// sTools := true ;
18452: LD_ADDR_EXP 91
18456: PUSH
18457: LD_INT 1
18459: ST_TO_ADDR
// if p3 = 101 then
18460: LD_VAR 0 3
18464: PUSH
18465: LD_INT 101
18467: EQUAL
18468: IFFALSE 18478
// sSold := true ;
18470: LD_ADDR_EXP 56
18474: PUSH
18475: LD_INT 1
18477: ST_TO_ADDR
// if p3 = 102 then
18478: LD_VAR 0 3
18482: PUSH
18483: LD_INT 102
18485: EQUAL
18486: IFFALSE 18496
// sDiff := true ;
18488: LD_ADDR_EXP 57
18492: PUSH
18493: LD_INT 1
18495: ST_TO_ADDR
// if p3 = 103 then
18496: LD_VAR 0 3
18500: PUSH
18501: LD_INT 103
18503: EQUAL
18504: IFFALSE 18514
// sFog := true ;
18506: LD_ADDR_EXP 60
18510: PUSH
18511: LD_INT 1
18513: ST_TO_ADDR
// if p3 = 104 then
18514: LD_VAR 0 3
18518: PUSH
18519: LD_INT 104
18521: EQUAL
18522: IFFALSE 18532
// sReset := true ;
18524: LD_ADDR_EXP 61
18528: PUSH
18529: LD_INT 1
18531: ST_TO_ADDR
// if p3 = 105 then
18532: LD_VAR 0 3
18536: PUSH
18537: LD_INT 105
18539: EQUAL
18540: IFFALSE 18550
// sSun := true ;
18542: LD_ADDR_EXP 62
18546: PUSH
18547: LD_INT 1
18549: ST_TO_ADDR
// if p3 = 106 then
18550: LD_VAR 0 3
18554: PUSH
18555: LD_INT 106
18557: EQUAL
18558: IFFALSE 18568
// sTiger := true ;
18560: LD_ADDR_EXP 58
18564: PUSH
18565: LD_INT 1
18567: ST_TO_ADDR
// if p3 = 107 then
18568: LD_VAR 0 3
18572: PUSH
18573: LD_INT 107
18575: EQUAL
18576: IFFALSE 18586
// sBomb := true ;
18578: LD_ADDR_EXP 59
18582: PUSH
18583: LD_INT 1
18585: ST_TO_ADDR
// if p3 = 108 then
18586: LD_VAR 0 3
18590: PUSH
18591: LD_INT 108
18593: EQUAL
18594: IFFALSE 18604
// sWound := true ;
18596: LD_ADDR_EXP 67
18600: PUSH
18601: LD_INT 1
18603: ST_TO_ADDR
// if p3 = 109 then
18604: LD_VAR 0 3
18608: PUSH
18609: LD_INT 109
18611: EQUAL
18612: IFFALSE 18622
// sBetray := true ;
18614: LD_ADDR_EXP 71
18618: PUSH
18619: LD_INT 1
18621: ST_TO_ADDR
// if p3 = 110 then
18622: LD_VAR 0 3
18626: PUSH
18627: LD_INT 110
18629: EQUAL
18630: IFFALSE 18640
// sContamin := true ;
18632: LD_ADDR_EXP 72
18636: PUSH
18637: LD_INT 1
18639: ST_TO_ADDR
// if p3 = 111 then
18640: LD_VAR 0 3
18644: PUSH
18645: LD_INT 111
18647: EQUAL
18648: IFFALSE 18658
// sOil := true ;
18650: LD_ADDR_EXP 74
18654: PUSH
18655: LD_INT 1
18657: ST_TO_ADDR
// if p3 = 112 then
18658: LD_VAR 0 3
18662: PUSH
18663: LD_INT 112
18665: EQUAL
18666: IFFALSE 18676
// sStu := true ;
18668: LD_ADDR_EXP 78
18672: PUSH
18673: LD_INT 1
18675: ST_TO_ADDR
// if p3 = 113 then
18676: LD_VAR 0 3
18680: PUSH
18681: LD_INT 113
18683: EQUAL
18684: IFFALSE 18694
// sBazooka := true ;
18686: LD_ADDR_EXP 81
18690: PUSH
18691: LD_INT 1
18693: ST_TO_ADDR
// if p3 = 114 then
18694: LD_VAR 0 3
18698: PUSH
18699: LD_INT 114
18701: EQUAL
18702: IFFALSE 18712
// sMortar := true ;
18704: LD_ADDR_EXP 82
18708: PUSH
18709: LD_INT 1
18711: ST_TO_ADDR
// if p3 = 115 then
18712: LD_VAR 0 3
18716: PUSH
18717: LD_INT 115
18719: EQUAL
18720: IFFALSE 18730
// sRanger := true ;
18722: LD_ADDR_EXP 92
18726: PUSH
18727: LD_INT 1
18729: ST_TO_ADDR
// if p3 = 116 then
18730: LD_VAR 0 3
18734: PUSH
18735: LD_INT 116
18737: EQUAL
18738: IFFALSE 18748
// sComputer := true ;
18740: LD_ADDR_EXP 93
18744: PUSH
18745: LD_INT 1
18747: ST_TO_ADDR
// if p3 = 117 then
18748: LD_VAR 0 3
18752: PUSH
18753: LD_INT 117
18755: EQUAL
18756: IFFALSE 18766
// s30 := true ;
18758: LD_ADDR_EXP 94
18762: PUSH
18763: LD_INT 1
18765: ST_TO_ADDR
// if p3 = 118 then
18766: LD_VAR 0 3
18770: PUSH
18771: LD_INT 118
18773: EQUAL
18774: IFFALSE 18784
// s60 := true ;
18776: LD_ADDR_EXP 95
18780: PUSH
18781: LD_INT 1
18783: ST_TO_ADDR
// end ; if p2 = hack_mode then
18784: LD_VAR 0 2
18788: PUSH
18789: LD_INT 101
18791: EQUAL
18792: IFFALSE 18920
// begin case p3 of 1 :
18794: LD_VAR 0 3
18798: PUSH
18799: LD_INT 1
18801: DOUBLE
18802: EQUAL
18803: IFTRUE 18807
18805: GO 18814
18807: POP
// hHackUnlimitedResources ; 2 :
18808: CALL 31183 0 0
18812: GO 18920
18814: LD_INT 2
18816: DOUBLE
18817: EQUAL
18818: IFTRUE 18822
18820: GO 18829
18822: POP
// hHackSetLevel10 ; 3 :
18823: CALL 31316 0 0
18827: GO 18920
18829: LD_INT 3
18831: DOUBLE
18832: EQUAL
18833: IFTRUE 18837
18835: GO 18844
18837: POP
// hHackSetLevel10YourUnits ; 4 :
18838: CALL 31401 0 0
18842: GO 18920
18844: LD_INT 4
18846: DOUBLE
18847: EQUAL
18848: IFTRUE 18852
18850: GO 18859
18852: POP
// hHackInvincible ; 5 :
18853: CALL 31849 0 0
18857: GO 18920
18859: LD_INT 5
18861: DOUBLE
18862: EQUAL
18863: IFTRUE 18867
18865: GO 18874
18867: POP
// hHackInvisible ; 6 :
18868: CALL 31960 0 0
18872: GO 18920
18874: LD_INT 6
18876: DOUBLE
18877: EQUAL
18878: IFTRUE 18882
18880: GO 18889
18882: POP
// hHackChangeYourSide ; 7 :
18883: CALL 32017 0 0
18887: GO 18920
18889: LD_INT 7
18891: DOUBLE
18892: EQUAL
18893: IFTRUE 18897
18895: GO 18904
18897: POP
// hHackChangeUnitSide ; 8 :
18898: CALL 32059 0 0
18902: GO 18920
18904: LD_INT 8
18906: DOUBLE
18907: EQUAL
18908: IFTRUE 18912
18910: GO 18919
18912: POP
// hHackFog ; end ;
18913: CALL 32160 0 0
18917: GO 18920
18919: POP
// end ; if p2 = game_save_mode then
18920: LD_VAR 0 2
18924: PUSH
18925: LD_INT 102
18927: EQUAL
18928: IFFALSE 18985
// begin if p3 = 1 then
18930: LD_VAR 0 3
18934: PUSH
18935: LD_INT 1
18937: EQUAL
18938: IFFALSE 18950
// globalGameSaveCounter := p4 ;
18940: LD_ADDR_EXP 38
18944: PUSH
18945: LD_VAR 0 4
18949: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
18950: LD_VAR 0 3
18954: PUSH
18955: LD_INT 2
18957: EQUAL
18958: IFFALSE 18966
18960: PUSH
18961: LD_EXP 38
18965: AND
18966: IFFALSE 18985
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18968: LD_STRING setGameSaveCounter(
18970: PUSH
18971: LD_EXP 38
18975: STR
18976: PUSH
18977: LD_STRING )
18979: STR
18980: PPUSH
18981: CALL_OW 559
// end ; end ;
18985: LD_VAR 0 7
18989: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
18990: LD_INT 0
18992: PPUSH
// streamModeActive := false ;
18993: LD_ADDR_EXP 39
18997: PUSH
18998: LD_INT 0
19000: ST_TO_ADDR
// normalCounter := 36 ;
19001: LD_ADDR_EXP 40
19005: PUSH
19006: LD_INT 36
19008: ST_TO_ADDR
// hardcoreCounter := 18 ;
19009: LD_ADDR_EXP 41
19013: PUSH
19014: LD_INT 18
19016: ST_TO_ADDR
// sRocket := false ;
19017: LD_ADDR_EXP 44
19021: PUSH
19022: LD_INT 0
19024: ST_TO_ADDR
// sSpeed := false ;
19025: LD_ADDR_EXP 43
19029: PUSH
19030: LD_INT 0
19032: ST_TO_ADDR
// sEngine := false ;
19033: LD_ADDR_EXP 45
19037: PUSH
19038: LD_INT 0
19040: ST_TO_ADDR
// sSpec := false ;
19041: LD_ADDR_EXP 42
19045: PUSH
19046: LD_INT 0
19048: ST_TO_ADDR
// sLevel := false ;
19049: LD_ADDR_EXP 46
19053: PUSH
19054: LD_INT 0
19056: ST_TO_ADDR
// sArmoury := false ;
19057: LD_ADDR_EXP 47
19061: PUSH
19062: LD_INT 0
19064: ST_TO_ADDR
// sRadar := false ;
19065: LD_ADDR_EXP 48
19069: PUSH
19070: LD_INT 0
19072: ST_TO_ADDR
// sBunker := false ;
19073: LD_ADDR_EXP 49
19077: PUSH
19078: LD_INT 0
19080: ST_TO_ADDR
// sHack := false ;
19081: LD_ADDR_EXP 50
19085: PUSH
19086: LD_INT 0
19088: ST_TO_ADDR
// sFire := false ;
19089: LD_ADDR_EXP 51
19093: PUSH
19094: LD_INT 0
19096: ST_TO_ADDR
// sRefresh := false ;
19097: LD_ADDR_EXP 52
19101: PUSH
19102: LD_INT 0
19104: ST_TO_ADDR
// sExp := false ;
19105: LD_ADDR_EXP 53
19109: PUSH
19110: LD_INT 0
19112: ST_TO_ADDR
// sDepot := false ;
19113: LD_ADDR_EXP 54
19117: PUSH
19118: LD_INT 0
19120: ST_TO_ADDR
// sFlag := false ;
19121: LD_ADDR_EXP 55
19125: PUSH
19126: LD_INT 0
19128: ST_TO_ADDR
// sKamikadze := false ;
19129: LD_ADDR_EXP 63
19133: PUSH
19134: LD_INT 0
19136: ST_TO_ADDR
// sTroll := false ;
19137: LD_ADDR_EXP 64
19141: PUSH
19142: LD_INT 0
19144: ST_TO_ADDR
// sSlow := false ;
19145: LD_ADDR_EXP 65
19149: PUSH
19150: LD_INT 0
19152: ST_TO_ADDR
// sLack := false ;
19153: LD_ADDR_EXP 66
19157: PUSH
19158: LD_INT 0
19160: ST_TO_ADDR
// sTank := false ;
19161: LD_ADDR_EXP 68
19165: PUSH
19166: LD_INT 0
19168: ST_TO_ADDR
// sRemote := false ;
19169: LD_ADDR_EXP 69
19173: PUSH
19174: LD_INT 0
19176: ST_TO_ADDR
// sPowell := false ;
19177: LD_ADDR_EXP 70
19181: PUSH
19182: LD_INT 0
19184: ST_TO_ADDR
// sTeleport := false ;
19185: LD_ADDR_EXP 73
19189: PUSH
19190: LD_INT 0
19192: ST_TO_ADDR
// sOilTower := false ;
19193: LD_ADDR_EXP 75
19197: PUSH
19198: LD_INT 0
19200: ST_TO_ADDR
// sShovel := false ;
19201: LD_ADDR_EXP 76
19205: PUSH
19206: LD_INT 0
19208: ST_TO_ADDR
// sSheik := false ;
19209: LD_ADDR_EXP 77
19213: PUSH
19214: LD_INT 0
19216: ST_TO_ADDR
// sEarthquake := false ;
19217: LD_ADDR_EXP 79
19221: PUSH
19222: LD_INT 0
19224: ST_TO_ADDR
// sAI := false ;
19225: LD_ADDR_EXP 80
19229: PUSH
19230: LD_INT 0
19232: ST_TO_ADDR
// sCargo := false ;
19233: LD_ADDR_EXP 83
19237: PUSH
19238: LD_INT 0
19240: ST_TO_ADDR
// sDLaser := false ;
19241: LD_ADDR_EXP 84
19245: PUSH
19246: LD_INT 0
19248: ST_TO_ADDR
// sExchange := false ;
19249: LD_ADDR_EXP 85
19253: PUSH
19254: LD_INT 0
19256: ST_TO_ADDR
// sFac := false ;
19257: LD_ADDR_EXP 86
19261: PUSH
19262: LD_INT 0
19264: ST_TO_ADDR
// sPower := false ;
19265: LD_ADDR_EXP 87
19269: PUSH
19270: LD_INT 0
19272: ST_TO_ADDR
// sRandom := false ;
19273: LD_ADDR_EXP 88
19277: PUSH
19278: LD_INT 0
19280: ST_TO_ADDR
// sShield := false ;
19281: LD_ADDR_EXP 89
19285: PUSH
19286: LD_INT 0
19288: ST_TO_ADDR
// sTime := false ;
19289: LD_ADDR_EXP 90
19293: PUSH
19294: LD_INT 0
19296: ST_TO_ADDR
// sTools := false ;
19297: LD_ADDR_EXP 91
19301: PUSH
19302: LD_INT 0
19304: ST_TO_ADDR
// sSold := false ;
19305: LD_ADDR_EXP 56
19309: PUSH
19310: LD_INT 0
19312: ST_TO_ADDR
// sDiff := false ;
19313: LD_ADDR_EXP 57
19317: PUSH
19318: LD_INT 0
19320: ST_TO_ADDR
// sFog := false ;
19321: LD_ADDR_EXP 60
19325: PUSH
19326: LD_INT 0
19328: ST_TO_ADDR
// sReset := false ;
19329: LD_ADDR_EXP 61
19333: PUSH
19334: LD_INT 0
19336: ST_TO_ADDR
// sSun := false ;
19337: LD_ADDR_EXP 62
19341: PUSH
19342: LD_INT 0
19344: ST_TO_ADDR
// sTiger := false ;
19345: LD_ADDR_EXP 58
19349: PUSH
19350: LD_INT 0
19352: ST_TO_ADDR
// sBomb := false ;
19353: LD_ADDR_EXP 59
19357: PUSH
19358: LD_INT 0
19360: ST_TO_ADDR
// sWound := false ;
19361: LD_ADDR_EXP 67
19365: PUSH
19366: LD_INT 0
19368: ST_TO_ADDR
// sBetray := false ;
19369: LD_ADDR_EXP 71
19373: PUSH
19374: LD_INT 0
19376: ST_TO_ADDR
// sContamin := false ;
19377: LD_ADDR_EXP 72
19381: PUSH
19382: LD_INT 0
19384: ST_TO_ADDR
// sOil := false ;
19385: LD_ADDR_EXP 74
19389: PUSH
19390: LD_INT 0
19392: ST_TO_ADDR
// sStu := false ;
19393: LD_ADDR_EXP 78
19397: PUSH
19398: LD_INT 0
19400: ST_TO_ADDR
// sBazooka := false ;
19401: LD_ADDR_EXP 81
19405: PUSH
19406: LD_INT 0
19408: ST_TO_ADDR
// sMortar := false ;
19409: LD_ADDR_EXP 82
19413: PUSH
19414: LD_INT 0
19416: ST_TO_ADDR
// sRanger := false ;
19417: LD_ADDR_EXP 92
19421: PUSH
19422: LD_INT 0
19424: ST_TO_ADDR
// sComputer := false ;
19425: LD_ADDR_EXP 93
19429: PUSH
19430: LD_INT 0
19432: ST_TO_ADDR
// s30 := false ;
19433: LD_ADDR_EXP 94
19437: PUSH
19438: LD_INT 0
19440: ST_TO_ADDR
// s60 := false ;
19441: LD_ADDR_EXP 95
19445: PUSH
19446: LD_INT 0
19448: ST_TO_ADDR
// end ;
19449: LD_VAR 0 1
19453: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
19454: LD_INT 0
19456: PPUSH
19457: PPUSH
19458: PPUSH
19459: PPUSH
19460: PPUSH
19461: PPUSH
19462: PPUSH
// result := [ ] ;
19463: LD_ADDR_VAR 0 2
19467: PUSH
19468: EMPTY
19469: ST_TO_ADDR
// if campaign_id = 1 then
19470: LD_OWVAR 69
19474: PUSH
19475: LD_INT 1
19477: EQUAL
19478: IFFALSE 22644
// begin case mission_number of 1 :
19480: LD_OWVAR 70
19484: PUSH
19485: LD_INT 1
19487: DOUBLE
19488: EQUAL
19489: IFTRUE 19493
19491: GO 19569
19493: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
19494: LD_ADDR_VAR 0 2
19498: PUSH
19499: LD_INT 2
19501: PUSH
19502: LD_INT 4
19504: PUSH
19505: LD_INT 11
19507: PUSH
19508: LD_INT 12
19510: PUSH
19511: LD_INT 15
19513: PUSH
19514: LD_INT 16
19516: PUSH
19517: LD_INT 22
19519: PUSH
19520: LD_INT 23
19522: PUSH
19523: LD_INT 26
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: PUSH
19537: LD_INT 101
19539: PUSH
19540: LD_INT 102
19542: PUSH
19543: LD_INT 106
19545: PUSH
19546: LD_INT 116
19548: PUSH
19549: LD_INT 117
19551: PUSH
19552: LD_INT 118
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: ST_TO_ADDR
19567: GO 22642
19569: LD_INT 2
19571: DOUBLE
19572: EQUAL
19573: IFTRUE 19577
19575: GO 19661
19577: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
19578: LD_ADDR_VAR 0 2
19582: PUSH
19583: LD_INT 2
19585: PUSH
19586: LD_INT 4
19588: PUSH
19589: LD_INT 11
19591: PUSH
19592: LD_INT 12
19594: PUSH
19595: LD_INT 15
19597: PUSH
19598: LD_INT 16
19600: PUSH
19601: LD_INT 22
19603: PUSH
19604: LD_INT 23
19606: PUSH
19607: LD_INT 26
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: PUSH
19621: LD_INT 101
19623: PUSH
19624: LD_INT 102
19626: PUSH
19627: LD_INT 105
19629: PUSH
19630: LD_INT 106
19632: PUSH
19633: LD_INT 108
19635: PUSH
19636: LD_INT 116
19638: PUSH
19639: LD_INT 117
19641: PUSH
19642: LD_INT 118
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: ST_TO_ADDR
19659: GO 22642
19661: LD_INT 3
19663: DOUBLE
19664: EQUAL
19665: IFTRUE 19669
19667: GO 19757
19669: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
19670: LD_ADDR_VAR 0 2
19674: PUSH
19675: LD_INT 2
19677: PUSH
19678: LD_INT 4
19680: PUSH
19681: LD_INT 5
19683: PUSH
19684: LD_INT 11
19686: PUSH
19687: LD_INT 12
19689: PUSH
19690: LD_INT 15
19692: PUSH
19693: LD_INT 16
19695: PUSH
19696: LD_INT 22
19698: PUSH
19699: LD_INT 26
19701: PUSH
19702: LD_INT 36
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: PUSH
19717: LD_INT 101
19719: PUSH
19720: LD_INT 102
19722: PUSH
19723: LD_INT 105
19725: PUSH
19726: LD_INT 106
19728: PUSH
19729: LD_INT 108
19731: PUSH
19732: LD_INT 116
19734: PUSH
19735: LD_INT 117
19737: PUSH
19738: LD_INT 118
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: ST_TO_ADDR
19755: GO 22642
19757: LD_INT 4
19759: DOUBLE
19760: EQUAL
19761: IFTRUE 19765
19763: GO 19861
19765: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
19766: LD_ADDR_VAR 0 2
19770: PUSH
19771: LD_INT 2
19773: PUSH
19774: LD_INT 4
19776: PUSH
19777: LD_INT 5
19779: PUSH
19780: LD_INT 8
19782: PUSH
19783: LD_INT 11
19785: PUSH
19786: LD_INT 12
19788: PUSH
19789: LD_INT 15
19791: PUSH
19792: LD_INT 16
19794: PUSH
19795: LD_INT 22
19797: PUSH
19798: LD_INT 23
19800: PUSH
19801: LD_INT 26
19803: PUSH
19804: LD_INT 36
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: PUSH
19821: LD_INT 101
19823: PUSH
19824: LD_INT 102
19826: PUSH
19827: LD_INT 105
19829: PUSH
19830: LD_INT 106
19832: PUSH
19833: LD_INT 108
19835: PUSH
19836: LD_INT 116
19838: PUSH
19839: LD_INT 117
19841: PUSH
19842: LD_INT 118
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: ST_TO_ADDR
19859: GO 22642
19861: LD_INT 5
19863: DOUBLE
19864: EQUAL
19865: IFTRUE 19869
19867: GO 19981
19869: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
19870: LD_ADDR_VAR 0 2
19874: PUSH
19875: LD_INT 2
19877: PUSH
19878: LD_INT 4
19880: PUSH
19881: LD_INT 5
19883: PUSH
19884: LD_INT 6
19886: PUSH
19887: LD_INT 8
19889: PUSH
19890: LD_INT 11
19892: PUSH
19893: LD_INT 12
19895: PUSH
19896: LD_INT 15
19898: PUSH
19899: LD_INT 16
19901: PUSH
19902: LD_INT 22
19904: PUSH
19905: LD_INT 23
19907: PUSH
19908: LD_INT 25
19910: PUSH
19911: LD_INT 26
19913: PUSH
19914: LD_INT 36
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 101
19935: PUSH
19936: LD_INT 102
19938: PUSH
19939: LD_INT 105
19941: PUSH
19942: LD_INT 106
19944: PUSH
19945: LD_INT 108
19947: PUSH
19948: LD_INT 109
19950: PUSH
19951: LD_INT 112
19953: PUSH
19954: LD_INT 116
19956: PUSH
19957: LD_INT 117
19959: PUSH
19960: LD_INT 118
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: ST_TO_ADDR
19979: GO 22642
19981: LD_INT 6
19983: DOUBLE
19984: EQUAL
19985: IFTRUE 19989
19987: GO 20121
19989: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
19990: LD_ADDR_VAR 0 2
19994: PUSH
19995: LD_INT 2
19997: PUSH
19998: LD_INT 4
20000: PUSH
20001: LD_INT 5
20003: PUSH
20004: LD_INT 6
20006: PUSH
20007: LD_INT 8
20009: PUSH
20010: LD_INT 11
20012: PUSH
20013: LD_INT 12
20015: PUSH
20016: LD_INT 15
20018: PUSH
20019: LD_INT 16
20021: PUSH
20022: LD_INT 20
20024: PUSH
20025: LD_INT 21
20027: PUSH
20028: LD_INT 22
20030: PUSH
20031: LD_INT 23
20033: PUSH
20034: LD_INT 25
20036: PUSH
20037: LD_INT 26
20039: PUSH
20040: LD_INT 30
20042: PUSH
20043: LD_INT 31
20045: PUSH
20046: LD_INT 32
20048: PUSH
20049: LD_INT 36
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: PUSH
20073: LD_INT 101
20075: PUSH
20076: LD_INT 102
20078: PUSH
20079: LD_INT 105
20081: PUSH
20082: LD_INT 106
20084: PUSH
20085: LD_INT 108
20087: PUSH
20088: LD_INT 109
20090: PUSH
20091: LD_INT 112
20093: PUSH
20094: LD_INT 116
20096: PUSH
20097: LD_INT 117
20099: PUSH
20100: LD_INT 118
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: ST_TO_ADDR
20119: GO 22642
20121: LD_INT 7
20123: DOUBLE
20124: EQUAL
20125: IFTRUE 20129
20127: GO 20241
20129: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20130: LD_ADDR_VAR 0 2
20134: PUSH
20135: LD_INT 2
20137: PUSH
20138: LD_INT 4
20140: PUSH
20141: LD_INT 5
20143: PUSH
20144: LD_INT 7
20146: PUSH
20147: LD_INT 11
20149: PUSH
20150: LD_INT 12
20152: PUSH
20153: LD_INT 15
20155: PUSH
20156: LD_INT 16
20158: PUSH
20159: LD_INT 20
20161: PUSH
20162: LD_INT 21
20164: PUSH
20165: LD_INT 22
20167: PUSH
20168: LD_INT 23
20170: PUSH
20171: LD_INT 25
20173: PUSH
20174: LD_INT 26
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 101
20195: PUSH
20196: LD_INT 102
20198: PUSH
20199: LD_INT 103
20201: PUSH
20202: LD_INT 105
20204: PUSH
20205: LD_INT 106
20207: PUSH
20208: LD_INT 108
20210: PUSH
20211: LD_INT 112
20213: PUSH
20214: LD_INT 116
20216: PUSH
20217: LD_INT 117
20219: PUSH
20220: LD_INT 118
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: ST_TO_ADDR
20239: GO 22642
20241: LD_INT 8
20243: DOUBLE
20244: EQUAL
20245: IFTRUE 20249
20247: GO 20389
20249: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
20250: LD_ADDR_VAR 0 2
20254: PUSH
20255: LD_INT 2
20257: PUSH
20258: LD_INT 4
20260: PUSH
20261: LD_INT 5
20263: PUSH
20264: LD_INT 6
20266: PUSH
20267: LD_INT 7
20269: PUSH
20270: LD_INT 8
20272: PUSH
20273: LD_INT 11
20275: PUSH
20276: LD_INT 12
20278: PUSH
20279: LD_INT 15
20281: PUSH
20282: LD_INT 16
20284: PUSH
20285: LD_INT 20
20287: PUSH
20288: LD_INT 21
20290: PUSH
20291: LD_INT 22
20293: PUSH
20294: LD_INT 23
20296: PUSH
20297: LD_INT 25
20299: PUSH
20300: LD_INT 26
20302: PUSH
20303: LD_INT 30
20305: PUSH
20306: LD_INT 31
20308: PUSH
20309: LD_INT 32
20311: PUSH
20312: LD_INT 36
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 101
20339: PUSH
20340: LD_INT 102
20342: PUSH
20343: LD_INT 103
20345: PUSH
20346: LD_INT 105
20348: PUSH
20349: LD_INT 106
20351: PUSH
20352: LD_INT 108
20354: PUSH
20355: LD_INT 109
20357: PUSH
20358: LD_INT 112
20360: PUSH
20361: LD_INT 116
20363: PUSH
20364: LD_INT 117
20366: PUSH
20367: LD_INT 118
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: ST_TO_ADDR
20387: GO 22642
20389: LD_INT 9
20391: DOUBLE
20392: EQUAL
20393: IFTRUE 20397
20395: GO 20545
20397: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
20398: LD_ADDR_VAR 0 2
20402: PUSH
20403: LD_INT 2
20405: PUSH
20406: LD_INT 4
20408: PUSH
20409: LD_INT 5
20411: PUSH
20412: LD_INT 6
20414: PUSH
20415: LD_INT 7
20417: PUSH
20418: LD_INT 8
20420: PUSH
20421: LD_INT 11
20423: PUSH
20424: LD_INT 12
20426: PUSH
20427: LD_INT 15
20429: PUSH
20430: LD_INT 16
20432: PUSH
20433: LD_INT 20
20435: PUSH
20436: LD_INT 21
20438: PUSH
20439: LD_INT 22
20441: PUSH
20442: LD_INT 23
20444: PUSH
20445: LD_INT 25
20447: PUSH
20448: LD_INT 26
20450: PUSH
20451: LD_INT 28
20453: PUSH
20454: LD_INT 30
20456: PUSH
20457: LD_INT 31
20459: PUSH
20460: LD_INT 32
20462: PUSH
20463: LD_INT 36
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: PUSH
20489: LD_INT 101
20491: PUSH
20492: LD_INT 102
20494: PUSH
20495: LD_INT 103
20497: PUSH
20498: LD_INT 105
20500: PUSH
20501: LD_INT 106
20503: PUSH
20504: LD_INT 108
20506: PUSH
20507: LD_INT 109
20509: PUSH
20510: LD_INT 112
20512: PUSH
20513: LD_INT 114
20515: PUSH
20516: LD_INT 116
20518: PUSH
20519: LD_INT 117
20521: PUSH
20522: LD_INT 118
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: ST_TO_ADDR
20543: GO 22642
20545: LD_INT 10
20547: DOUBLE
20548: EQUAL
20549: IFTRUE 20553
20551: GO 20749
20553: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
20554: LD_ADDR_VAR 0 2
20558: PUSH
20559: LD_INT 2
20561: PUSH
20562: LD_INT 4
20564: PUSH
20565: LD_INT 5
20567: PUSH
20568: LD_INT 6
20570: PUSH
20571: LD_INT 7
20573: PUSH
20574: LD_INT 8
20576: PUSH
20577: LD_INT 9
20579: PUSH
20580: LD_INT 10
20582: PUSH
20583: LD_INT 11
20585: PUSH
20586: LD_INT 12
20588: PUSH
20589: LD_INT 13
20591: PUSH
20592: LD_INT 14
20594: PUSH
20595: LD_INT 15
20597: PUSH
20598: LD_INT 16
20600: PUSH
20601: LD_INT 17
20603: PUSH
20604: LD_INT 18
20606: PUSH
20607: LD_INT 19
20609: PUSH
20610: LD_INT 20
20612: PUSH
20613: LD_INT 21
20615: PUSH
20616: LD_INT 22
20618: PUSH
20619: LD_INT 23
20621: PUSH
20622: LD_INT 24
20624: PUSH
20625: LD_INT 25
20627: PUSH
20628: LD_INT 26
20630: PUSH
20631: LD_INT 28
20633: PUSH
20634: LD_INT 30
20636: PUSH
20637: LD_INT 31
20639: PUSH
20640: LD_INT 32
20642: PUSH
20643: LD_INT 36
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 101
20679: PUSH
20680: LD_INT 102
20682: PUSH
20683: LD_INT 103
20685: PUSH
20686: LD_INT 104
20688: PUSH
20689: LD_INT 105
20691: PUSH
20692: LD_INT 106
20694: PUSH
20695: LD_INT 107
20697: PUSH
20698: LD_INT 108
20700: PUSH
20701: LD_INT 109
20703: PUSH
20704: LD_INT 110
20706: PUSH
20707: LD_INT 111
20709: PUSH
20710: LD_INT 112
20712: PUSH
20713: LD_INT 114
20715: PUSH
20716: LD_INT 116
20718: PUSH
20719: LD_INT 117
20721: PUSH
20722: LD_INT 118
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: ST_TO_ADDR
20747: GO 22642
20749: LD_INT 11
20751: DOUBLE
20752: EQUAL
20753: IFTRUE 20757
20755: GO 20961
20757: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
20758: LD_ADDR_VAR 0 2
20762: PUSH
20763: LD_INT 2
20765: PUSH
20766: LD_INT 3
20768: PUSH
20769: LD_INT 4
20771: PUSH
20772: LD_INT 5
20774: PUSH
20775: LD_INT 6
20777: PUSH
20778: LD_INT 7
20780: PUSH
20781: LD_INT 8
20783: PUSH
20784: LD_INT 9
20786: PUSH
20787: LD_INT 10
20789: PUSH
20790: LD_INT 11
20792: PUSH
20793: LD_INT 12
20795: PUSH
20796: LD_INT 13
20798: PUSH
20799: LD_INT 14
20801: PUSH
20802: LD_INT 15
20804: PUSH
20805: LD_INT 16
20807: PUSH
20808: LD_INT 17
20810: PUSH
20811: LD_INT 18
20813: PUSH
20814: LD_INT 19
20816: PUSH
20817: LD_INT 20
20819: PUSH
20820: LD_INT 21
20822: PUSH
20823: LD_INT 22
20825: PUSH
20826: LD_INT 23
20828: PUSH
20829: LD_INT 24
20831: PUSH
20832: LD_INT 25
20834: PUSH
20835: LD_INT 26
20837: PUSH
20838: LD_INT 28
20840: PUSH
20841: LD_INT 30
20843: PUSH
20844: LD_INT 31
20846: PUSH
20847: LD_INT 32
20849: PUSH
20850: LD_INT 34
20852: PUSH
20853: LD_INT 36
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: PUSH
20889: LD_INT 101
20891: PUSH
20892: LD_INT 102
20894: PUSH
20895: LD_INT 103
20897: PUSH
20898: LD_INT 104
20900: PUSH
20901: LD_INT 105
20903: PUSH
20904: LD_INT 106
20906: PUSH
20907: LD_INT 107
20909: PUSH
20910: LD_INT 108
20912: PUSH
20913: LD_INT 109
20915: PUSH
20916: LD_INT 110
20918: PUSH
20919: LD_INT 111
20921: PUSH
20922: LD_INT 112
20924: PUSH
20925: LD_INT 114
20927: PUSH
20928: LD_INT 116
20930: PUSH
20931: LD_INT 117
20933: PUSH
20934: LD_INT 118
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: ST_TO_ADDR
20959: GO 22642
20961: LD_INT 12
20963: DOUBLE
20964: EQUAL
20965: IFTRUE 20969
20967: GO 21189
20969: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
20970: LD_ADDR_VAR 0 2
20974: PUSH
20975: LD_INT 1
20977: PUSH
20978: LD_INT 2
20980: PUSH
20981: LD_INT 3
20983: PUSH
20984: LD_INT 4
20986: PUSH
20987: LD_INT 5
20989: PUSH
20990: LD_INT 6
20992: PUSH
20993: LD_INT 7
20995: PUSH
20996: LD_INT 8
20998: PUSH
20999: LD_INT 9
21001: PUSH
21002: LD_INT 10
21004: PUSH
21005: LD_INT 11
21007: PUSH
21008: LD_INT 12
21010: PUSH
21011: LD_INT 13
21013: PUSH
21014: LD_INT 14
21016: PUSH
21017: LD_INT 15
21019: PUSH
21020: LD_INT 16
21022: PUSH
21023: LD_INT 17
21025: PUSH
21026: LD_INT 18
21028: PUSH
21029: LD_INT 19
21031: PUSH
21032: LD_INT 20
21034: PUSH
21035: LD_INT 21
21037: PUSH
21038: LD_INT 22
21040: PUSH
21041: LD_INT 23
21043: PUSH
21044: LD_INT 24
21046: PUSH
21047: LD_INT 25
21049: PUSH
21050: LD_INT 26
21052: PUSH
21053: LD_INT 27
21055: PUSH
21056: LD_INT 28
21058: PUSH
21059: LD_INT 30
21061: PUSH
21062: LD_INT 31
21064: PUSH
21065: LD_INT 32
21067: PUSH
21068: LD_INT 33
21070: PUSH
21071: LD_INT 34
21073: PUSH
21074: LD_INT 36
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: PUSH
21113: LD_INT 101
21115: PUSH
21116: LD_INT 102
21118: PUSH
21119: LD_INT 103
21121: PUSH
21122: LD_INT 104
21124: PUSH
21125: LD_INT 105
21127: PUSH
21128: LD_INT 106
21130: PUSH
21131: LD_INT 107
21133: PUSH
21134: LD_INT 108
21136: PUSH
21137: LD_INT 109
21139: PUSH
21140: LD_INT 110
21142: PUSH
21143: LD_INT 111
21145: PUSH
21146: LD_INT 112
21148: PUSH
21149: LD_INT 113
21151: PUSH
21152: LD_INT 114
21154: PUSH
21155: LD_INT 116
21157: PUSH
21158: LD_INT 117
21160: PUSH
21161: LD_INT 118
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: ST_TO_ADDR
21187: GO 22642
21189: LD_INT 13
21191: DOUBLE
21192: EQUAL
21193: IFTRUE 21197
21195: GO 21405
21197: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21198: LD_ADDR_VAR 0 2
21202: PUSH
21203: LD_INT 1
21205: PUSH
21206: LD_INT 2
21208: PUSH
21209: LD_INT 3
21211: PUSH
21212: LD_INT 4
21214: PUSH
21215: LD_INT 5
21217: PUSH
21218: LD_INT 8
21220: PUSH
21221: LD_INT 9
21223: PUSH
21224: LD_INT 10
21226: PUSH
21227: LD_INT 11
21229: PUSH
21230: LD_INT 12
21232: PUSH
21233: LD_INT 14
21235: PUSH
21236: LD_INT 15
21238: PUSH
21239: LD_INT 16
21241: PUSH
21242: LD_INT 17
21244: PUSH
21245: LD_INT 18
21247: PUSH
21248: LD_INT 19
21250: PUSH
21251: LD_INT 20
21253: PUSH
21254: LD_INT 21
21256: PUSH
21257: LD_INT 22
21259: PUSH
21260: LD_INT 23
21262: PUSH
21263: LD_INT 24
21265: PUSH
21266: LD_INT 25
21268: PUSH
21269: LD_INT 26
21271: PUSH
21272: LD_INT 27
21274: PUSH
21275: LD_INT 28
21277: PUSH
21278: LD_INT 30
21280: PUSH
21281: LD_INT 31
21283: PUSH
21284: LD_INT 32
21286: PUSH
21287: LD_INT 33
21289: PUSH
21290: LD_INT 34
21292: PUSH
21293: LD_INT 36
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: PUSH
21329: LD_INT 101
21331: PUSH
21332: LD_INT 102
21334: PUSH
21335: LD_INT 103
21337: PUSH
21338: LD_INT 104
21340: PUSH
21341: LD_INT 105
21343: PUSH
21344: LD_INT 106
21346: PUSH
21347: LD_INT 107
21349: PUSH
21350: LD_INT 108
21352: PUSH
21353: LD_INT 109
21355: PUSH
21356: LD_INT 110
21358: PUSH
21359: LD_INT 111
21361: PUSH
21362: LD_INT 112
21364: PUSH
21365: LD_INT 113
21367: PUSH
21368: LD_INT 114
21370: PUSH
21371: LD_INT 116
21373: PUSH
21374: LD_INT 117
21376: PUSH
21377: LD_INT 118
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: ST_TO_ADDR
21403: GO 22642
21405: LD_INT 14
21407: DOUBLE
21408: EQUAL
21409: IFTRUE 21413
21411: GO 21637
21413: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
21414: LD_ADDR_VAR 0 2
21418: PUSH
21419: LD_INT 1
21421: PUSH
21422: LD_INT 2
21424: PUSH
21425: LD_INT 3
21427: PUSH
21428: LD_INT 4
21430: PUSH
21431: LD_INT 5
21433: PUSH
21434: LD_INT 6
21436: PUSH
21437: LD_INT 7
21439: PUSH
21440: LD_INT 8
21442: PUSH
21443: LD_INT 9
21445: PUSH
21446: LD_INT 10
21448: PUSH
21449: LD_INT 11
21451: PUSH
21452: LD_INT 12
21454: PUSH
21455: LD_INT 13
21457: PUSH
21458: LD_INT 14
21460: PUSH
21461: LD_INT 15
21463: PUSH
21464: LD_INT 16
21466: PUSH
21467: LD_INT 17
21469: PUSH
21470: LD_INT 18
21472: PUSH
21473: LD_INT 19
21475: PUSH
21476: LD_INT 20
21478: PUSH
21479: LD_INT 21
21481: PUSH
21482: LD_INT 22
21484: PUSH
21485: LD_INT 23
21487: PUSH
21488: LD_INT 24
21490: PUSH
21491: LD_INT 25
21493: PUSH
21494: LD_INT 26
21496: PUSH
21497: LD_INT 27
21499: PUSH
21500: LD_INT 28
21502: PUSH
21503: LD_INT 29
21505: PUSH
21506: LD_INT 30
21508: PUSH
21509: LD_INT 31
21511: PUSH
21512: LD_INT 32
21514: PUSH
21515: LD_INT 33
21517: PUSH
21518: LD_INT 34
21520: PUSH
21521: LD_INT 36
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: PUSH
21561: LD_INT 101
21563: PUSH
21564: LD_INT 102
21566: PUSH
21567: LD_INT 103
21569: PUSH
21570: LD_INT 104
21572: PUSH
21573: LD_INT 105
21575: PUSH
21576: LD_INT 106
21578: PUSH
21579: LD_INT 107
21581: PUSH
21582: LD_INT 108
21584: PUSH
21585: LD_INT 109
21587: PUSH
21588: LD_INT 110
21590: PUSH
21591: LD_INT 111
21593: PUSH
21594: LD_INT 112
21596: PUSH
21597: LD_INT 113
21599: PUSH
21600: LD_INT 114
21602: PUSH
21603: LD_INT 116
21605: PUSH
21606: LD_INT 117
21608: PUSH
21609: LD_INT 118
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: ST_TO_ADDR
21635: GO 22642
21637: LD_INT 15
21639: DOUBLE
21640: EQUAL
21641: IFTRUE 21645
21643: GO 21869
21645: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
21646: LD_ADDR_VAR 0 2
21650: PUSH
21651: LD_INT 1
21653: PUSH
21654: LD_INT 2
21656: PUSH
21657: LD_INT 3
21659: PUSH
21660: LD_INT 4
21662: PUSH
21663: LD_INT 5
21665: PUSH
21666: LD_INT 6
21668: PUSH
21669: LD_INT 7
21671: PUSH
21672: LD_INT 8
21674: PUSH
21675: LD_INT 9
21677: PUSH
21678: LD_INT 10
21680: PUSH
21681: LD_INT 11
21683: PUSH
21684: LD_INT 12
21686: PUSH
21687: LD_INT 13
21689: PUSH
21690: LD_INT 14
21692: PUSH
21693: LD_INT 15
21695: PUSH
21696: LD_INT 16
21698: PUSH
21699: LD_INT 17
21701: PUSH
21702: LD_INT 18
21704: PUSH
21705: LD_INT 19
21707: PUSH
21708: LD_INT 20
21710: PUSH
21711: LD_INT 21
21713: PUSH
21714: LD_INT 22
21716: PUSH
21717: LD_INT 23
21719: PUSH
21720: LD_INT 24
21722: PUSH
21723: LD_INT 25
21725: PUSH
21726: LD_INT 26
21728: PUSH
21729: LD_INT 27
21731: PUSH
21732: LD_INT 28
21734: PUSH
21735: LD_INT 29
21737: PUSH
21738: LD_INT 30
21740: PUSH
21741: LD_INT 31
21743: PUSH
21744: LD_INT 32
21746: PUSH
21747: LD_INT 33
21749: PUSH
21750: LD_INT 34
21752: PUSH
21753: LD_INT 36
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 101
21795: PUSH
21796: LD_INT 102
21798: PUSH
21799: LD_INT 103
21801: PUSH
21802: LD_INT 104
21804: PUSH
21805: LD_INT 105
21807: PUSH
21808: LD_INT 106
21810: PUSH
21811: LD_INT 107
21813: PUSH
21814: LD_INT 108
21816: PUSH
21817: LD_INT 109
21819: PUSH
21820: LD_INT 110
21822: PUSH
21823: LD_INT 111
21825: PUSH
21826: LD_INT 112
21828: PUSH
21829: LD_INT 113
21831: PUSH
21832: LD_INT 114
21834: PUSH
21835: LD_INT 116
21837: PUSH
21838: LD_INT 117
21840: PUSH
21841: LD_INT 118
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: ST_TO_ADDR
21867: GO 22642
21869: LD_INT 16
21871: DOUBLE
21872: EQUAL
21873: IFTRUE 21877
21875: GO 22013
21877: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
21878: LD_ADDR_VAR 0 2
21882: PUSH
21883: LD_INT 2
21885: PUSH
21886: LD_INT 4
21888: PUSH
21889: LD_INT 5
21891: PUSH
21892: LD_INT 7
21894: PUSH
21895: LD_INT 11
21897: PUSH
21898: LD_INT 12
21900: PUSH
21901: LD_INT 15
21903: PUSH
21904: LD_INT 16
21906: PUSH
21907: LD_INT 20
21909: PUSH
21910: LD_INT 21
21912: PUSH
21913: LD_INT 22
21915: PUSH
21916: LD_INT 23
21918: PUSH
21919: LD_INT 25
21921: PUSH
21922: LD_INT 26
21924: PUSH
21925: LD_INT 30
21927: PUSH
21928: LD_INT 31
21930: PUSH
21931: LD_INT 32
21933: PUSH
21934: LD_INT 33
21936: PUSH
21937: LD_INT 34
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 101
21963: PUSH
21964: LD_INT 102
21966: PUSH
21967: LD_INT 103
21969: PUSH
21970: LD_INT 106
21972: PUSH
21973: LD_INT 108
21975: PUSH
21976: LD_INT 112
21978: PUSH
21979: LD_INT 113
21981: PUSH
21982: LD_INT 114
21984: PUSH
21985: LD_INT 116
21987: PUSH
21988: LD_INT 117
21990: PUSH
21991: LD_INT 118
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: ST_TO_ADDR
22011: GO 22642
22013: LD_INT 17
22015: DOUBLE
22016: EQUAL
22017: IFTRUE 22021
22019: GO 22245
22021: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22022: LD_ADDR_VAR 0 2
22026: PUSH
22027: LD_INT 1
22029: PUSH
22030: LD_INT 2
22032: PUSH
22033: LD_INT 3
22035: PUSH
22036: LD_INT 4
22038: PUSH
22039: LD_INT 5
22041: PUSH
22042: LD_INT 6
22044: PUSH
22045: LD_INT 7
22047: PUSH
22048: LD_INT 8
22050: PUSH
22051: LD_INT 9
22053: PUSH
22054: LD_INT 10
22056: PUSH
22057: LD_INT 11
22059: PUSH
22060: LD_INT 12
22062: PUSH
22063: LD_INT 13
22065: PUSH
22066: LD_INT 14
22068: PUSH
22069: LD_INT 15
22071: PUSH
22072: LD_INT 16
22074: PUSH
22075: LD_INT 17
22077: PUSH
22078: LD_INT 18
22080: PUSH
22081: LD_INT 19
22083: PUSH
22084: LD_INT 20
22086: PUSH
22087: LD_INT 21
22089: PUSH
22090: LD_INT 22
22092: PUSH
22093: LD_INT 23
22095: PUSH
22096: LD_INT 24
22098: PUSH
22099: LD_INT 25
22101: PUSH
22102: LD_INT 26
22104: PUSH
22105: LD_INT 27
22107: PUSH
22108: LD_INT 28
22110: PUSH
22111: LD_INT 29
22113: PUSH
22114: LD_INT 30
22116: PUSH
22117: LD_INT 31
22119: PUSH
22120: LD_INT 32
22122: PUSH
22123: LD_INT 33
22125: PUSH
22126: LD_INT 34
22128: PUSH
22129: LD_INT 36
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 101
22171: PUSH
22172: LD_INT 102
22174: PUSH
22175: LD_INT 103
22177: PUSH
22178: LD_INT 104
22180: PUSH
22181: LD_INT 105
22183: PUSH
22184: LD_INT 106
22186: PUSH
22187: LD_INT 107
22189: PUSH
22190: LD_INT 108
22192: PUSH
22193: LD_INT 109
22195: PUSH
22196: LD_INT 110
22198: PUSH
22199: LD_INT 111
22201: PUSH
22202: LD_INT 112
22204: PUSH
22205: LD_INT 113
22207: PUSH
22208: LD_INT 114
22210: PUSH
22211: LD_INT 116
22213: PUSH
22214: LD_INT 117
22216: PUSH
22217: LD_INT 118
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: ST_TO_ADDR
22243: GO 22642
22245: LD_INT 18
22247: DOUBLE
22248: EQUAL
22249: IFTRUE 22253
22251: GO 22401
22253: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
22254: LD_ADDR_VAR 0 2
22258: PUSH
22259: LD_INT 2
22261: PUSH
22262: LD_INT 4
22264: PUSH
22265: LD_INT 5
22267: PUSH
22268: LD_INT 7
22270: PUSH
22271: LD_INT 11
22273: PUSH
22274: LD_INT 12
22276: PUSH
22277: LD_INT 15
22279: PUSH
22280: LD_INT 16
22282: PUSH
22283: LD_INT 20
22285: PUSH
22286: LD_INT 21
22288: PUSH
22289: LD_INT 22
22291: PUSH
22292: LD_INT 23
22294: PUSH
22295: LD_INT 25
22297: PUSH
22298: LD_INT 26
22300: PUSH
22301: LD_INT 30
22303: PUSH
22304: LD_INT 31
22306: PUSH
22307: LD_INT 32
22309: PUSH
22310: LD_INT 33
22312: PUSH
22313: LD_INT 34
22315: PUSH
22316: LD_INT 35
22318: PUSH
22319: LD_INT 36
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 101
22347: PUSH
22348: LD_INT 102
22350: PUSH
22351: LD_INT 103
22353: PUSH
22354: LD_INT 106
22356: PUSH
22357: LD_INT 108
22359: PUSH
22360: LD_INT 112
22362: PUSH
22363: LD_INT 113
22365: PUSH
22366: LD_INT 114
22368: PUSH
22369: LD_INT 115
22371: PUSH
22372: LD_INT 116
22374: PUSH
22375: LD_INT 117
22377: PUSH
22378: LD_INT 118
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: ST_TO_ADDR
22399: GO 22642
22401: LD_INT 19
22403: DOUBLE
22404: EQUAL
22405: IFTRUE 22409
22407: GO 22641
22409: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
22410: LD_ADDR_VAR 0 2
22414: PUSH
22415: LD_INT 1
22417: PUSH
22418: LD_INT 2
22420: PUSH
22421: LD_INT 3
22423: PUSH
22424: LD_INT 4
22426: PUSH
22427: LD_INT 5
22429: PUSH
22430: LD_INT 6
22432: PUSH
22433: LD_INT 7
22435: PUSH
22436: LD_INT 8
22438: PUSH
22439: LD_INT 9
22441: PUSH
22442: LD_INT 10
22444: PUSH
22445: LD_INT 11
22447: PUSH
22448: LD_INT 12
22450: PUSH
22451: LD_INT 13
22453: PUSH
22454: LD_INT 14
22456: PUSH
22457: LD_INT 15
22459: PUSH
22460: LD_INT 16
22462: PUSH
22463: LD_INT 17
22465: PUSH
22466: LD_INT 18
22468: PUSH
22469: LD_INT 19
22471: PUSH
22472: LD_INT 20
22474: PUSH
22475: LD_INT 21
22477: PUSH
22478: LD_INT 22
22480: PUSH
22481: LD_INT 23
22483: PUSH
22484: LD_INT 24
22486: PUSH
22487: LD_INT 25
22489: PUSH
22490: LD_INT 26
22492: PUSH
22493: LD_INT 27
22495: PUSH
22496: LD_INT 28
22498: PUSH
22499: LD_INT 29
22501: PUSH
22502: LD_INT 30
22504: PUSH
22505: LD_INT 31
22507: PUSH
22508: LD_INT 32
22510: PUSH
22511: LD_INT 33
22513: PUSH
22514: LD_INT 34
22516: PUSH
22517: LD_INT 35
22519: PUSH
22520: LD_INT 36
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 101
22563: PUSH
22564: LD_INT 102
22566: PUSH
22567: LD_INT 103
22569: PUSH
22570: LD_INT 104
22572: PUSH
22573: LD_INT 105
22575: PUSH
22576: LD_INT 106
22578: PUSH
22579: LD_INT 107
22581: PUSH
22582: LD_INT 108
22584: PUSH
22585: LD_INT 109
22587: PUSH
22588: LD_INT 110
22590: PUSH
22591: LD_INT 111
22593: PUSH
22594: LD_INT 112
22596: PUSH
22597: LD_INT 113
22599: PUSH
22600: LD_INT 114
22602: PUSH
22603: LD_INT 115
22605: PUSH
22606: LD_INT 116
22608: PUSH
22609: LD_INT 117
22611: PUSH
22612: LD_INT 118
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: ST_TO_ADDR
22639: GO 22642
22641: POP
// end else
22642: GO 22873
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
22644: LD_ADDR_VAR 0 2
22648: PUSH
22649: LD_INT 1
22651: PUSH
22652: LD_INT 2
22654: PUSH
22655: LD_INT 3
22657: PUSH
22658: LD_INT 4
22660: PUSH
22661: LD_INT 5
22663: PUSH
22664: LD_INT 6
22666: PUSH
22667: LD_INT 7
22669: PUSH
22670: LD_INT 8
22672: PUSH
22673: LD_INT 9
22675: PUSH
22676: LD_INT 10
22678: PUSH
22679: LD_INT 11
22681: PUSH
22682: LD_INT 12
22684: PUSH
22685: LD_INT 13
22687: PUSH
22688: LD_INT 14
22690: PUSH
22691: LD_INT 15
22693: PUSH
22694: LD_INT 16
22696: PUSH
22697: LD_INT 17
22699: PUSH
22700: LD_INT 18
22702: PUSH
22703: LD_INT 19
22705: PUSH
22706: LD_INT 20
22708: PUSH
22709: LD_INT 21
22711: PUSH
22712: LD_INT 22
22714: PUSH
22715: LD_INT 23
22717: PUSH
22718: LD_INT 24
22720: PUSH
22721: LD_INT 25
22723: PUSH
22724: LD_INT 26
22726: PUSH
22727: LD_INT 27
22729: PUSH
22730: LD_INT 28
22732: PUSH
22733: LD_INT 29
22735: PUSH
22736: LD_INT 30
22738: PUSH
22739: LD_INT 31
22741: PUSH
22742: LD_INT 32
22744: PUSH
22745: LD_INT 33
22747: PUSH
22748: LD_INT 34
22750: PUSH
22751: LD_INT 35
22753: PUSH
22754: LD_INT 36
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: PUSH
22795: LD_INT 101
22797: PUSH
22798: LD_INT 102
22800: PUSH
22801: LD_INT 103
22803: PUSH
22804: LD_INT 104
22806: PUSH
22807: LD_INT 105
22809: PUSH
22810: LD_INT 106
22812: PUSH
22813: LD_INT 107
22815: PUSH
22816: LD_INT 108
22818: PUSH
22819: LD_INT 109
22821: PUSH
22822: LD_INT 110
22824: PUSH
22825: LD_INT 111
22827: PUSH
22828: LD_INT 112
22830: PUSH
22831: LD_INT 113
22833: PUSH
22834: LD_INT 114
22836: PUSH
22837: LD_INT 115
22839: PUSH
22840: LD_INT 116
22842: PUSH
22843: LD_INT 117
22845: PUSH
22846: LD_INT 118
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: ST_TO_ADDR
// if result then
22873: LD_VAR 0 2
22877: IFFALSE 23663
// begin normal :=  ;
22879: LD_ADDR_VAR 0 5
22883: PUSH
22884: LD_STRING 
22886: ST_TO_ADDR
// hardcore :=  ;
22887: LD_ADDR_VAR 0 6
22891: PUSH
22892: LD_STRING 
22894: ST_TO_ADDR
// active :=  ;
22895: LD_ADDR_VAR 0 7
22899: PUSH
22900: LD_STRING 
22902: ST_TO_ADDR
// for i = 1 to normalCounter do
22903: LD_ADDR_VAR 0 8
22907: PUSH
22908: DOUBLE
22909: LD_INT 1
22911: DEC
22912: ST_TO_ADDR
22913: LD_EXP 40
22917: PUSH
22918: FOR_TO
22919: IFFALSE 23020
// begin tmp := 0 ;
22921: LD_ADDR_VAR 0 3
22925: PUSH
22926: LD_STRING 0
22928: ST_TO_ADDR
// if result [ 1 ] then
22929: LD_VAR 0 2
22933: PUSH
22934: LD_INT 1
22936: ARRAY
22937: IFFALSE 23002
// if result [ 1 ] [ 1 ] = i then
22939: LD_VAR 0 2
22943: PUSH
22944: LD_INT 1
22946: ARRAY
22947: PUSH
22948: LD_INT 1
22950: ARRAY
22951: PUSH
22952: LD_VAR 0 8
22956: EQUAL
22957: IFFALSE 23002
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22959: LD_ADDR_VAR 0 2
22963: PUSH
22964: LD_VAR 0 2
22968: PPUSH
22969: LD_INT 1
22971: PPUSH
22972: LD_VAR 0 2
22976: PUSH
22977: LD_INT 1
22979: ARRAY
22980: PPUSH
22981: LD_INT 1
22983: PPUSH
22984: CALL_OW 3
22988: PPUSH
22989: CALL_OW 1
22993: ST_TO_ADDR
// tmp := 1 ;
22994: LD_ADDR_VAR 0 3
22998: PUSH
22999: LD_STRING 1
23001: ST_TO_ADDR
// end ; normal := normal & tmp ;
23002: LD_ADDR_VAR 0 5
23006: PUSH
23007: LD_VAR 0 5
23011: PUSH
23012: LD_VAR 0 3
23016: STR
23017: ST_TO_ADDR
// end ;
23018: GO 22918
23020: POP
23021: POP
// for i = 1 to hardcoreCounter do
23022: LD_ADDR_VAR 0 8
23026: PUSH
23027: DOUBLE
23028: LD_INT 1
23030: DEC
23031: ST_TO_ADDR
23032: LD_EXP 41
23036: PUSH
23037: FOR_TO
23038: IFFALSE 23143
// begin tmp := 0 ;
23040: LD_ADDR_VAR 0 3
23044: PUSH
23045: LD_STRING 0
23047: ST_TO_ADDR
// if result [ 2 ] then
23048: LD_VAR 0 2
23052: PUSH
23053: LD_INT 2
23055: ARRAY
23056: IFFALSE 23125
// if result [ 2 ] [ 1 ] = 100 + i then
23058: LD_VAR 0 2
23062: PUSH
23063: LD_INT 2
23065: ARRAY
23066: PUSH
23067: LD_INT 1
23069: ARRAY
23070: PUSH
23071: LD_INT 100
23073: PUSH
23074: LD_VAR 0 8
23078: PLUS
23079: EQUAL
23080: IFFALSE 23125
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23082: LD_ADDR_VAR 0 2
23086: PUSH
23087: LD_VAR 0 2
23091: PPUSH
23092: LD_INT 2
23094: PPUSH
23095: LD_VAR 0 2
23099: PUSH
23100: LD_INT 2
23102: ARRAY
23103: PPUSH
23104: LD_INT 1
23106: PPUSH
23107: CALL_OW 3
23111: PPUSH
23112: CALL_OW 1
23116: ST_TO_ADDR
// tmp := 1 ;
23117: LD_ADDR_VAR 0 3
23121: PUSH
23122: LD_STRING 1
23124: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23125: LD_ADDR_VAR 0 6
23129: PUSH
23130: LD_VAR 0 6
23134: PUSH
23135: LD_VAR 0 3
23139: STR
23140: ST_TO_ADDR
// end ;
23141: GO 23037
23143: POP
23144: POP
// if isGameLoad then
23145: LD_VAR 0 1
23149: IFFALSE 23624
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
23151: LD_ADDR_VAR 0 4
23155: PUSH
23156: LD_EXP 44
23160: PUSH
23161: LD_EXP 43
23165: PUSH
23166: LD_EXP 45
23170: PUSH
23171: LD_EXP 42
23175: PUSH
23176: LD_EXP 46
23180: PUSH
23181: LD_EXP 47
23185: PUSH
23186: LD_EXP 48
23190: PUSH
23191: LD_EXP 49
23195: PUSH
23196: LD_EXP 50
23200: PUSH
23201: LD_EXP 51
23205: PUSH
23206: LD_EXP 52
23210: PUSH
23211: LD_EXP 53
23215: PUSH
23216: LD_EXP 54
23220: PUSH
23221: LD_EXP 55
23225: PUSH
23226: LD_EXP 63
23230: PUSH
23231: LD_EXP 64
23235: PUSH
23236: LD_EXP 65
23240: PUSH
23241: LD_EXP 66
23245: PUSH
23246: LD_EXP 68
23250: PUSH
23251: LD_EXP 69
23255: PUSH
23256: LD_EXP 70
23260: PUSH
23261: LD_EXP 73
23265: PUSH
23266: LD_EXP 75
23270: PUSH
23271: LD_EXP 76
23275: PUSH
23276: LD_EXP 77
23280: PUSH
23281: LD_EXP 79
23285: PUSH
23286: LD_EXP 80
23290: PUSH
23291: LD_EXP 83
23295: PUSH
23296: LD_EXP 84
23300: PUSH
23301: LD_EXP 85
23305: PUSH
23306: LD_EXP 86
23310: PUSH
23311: LD_EXP 87
23315: PUSH
23316: LD_EXP 88
23320: PUSH
23321: LD_EXP 89
23325: PUSH
23326: LD_EXP 90
23330: PUSH
23331: LD_EXP 91
23335: PUSH
23336: LD_EXP 56
23340: PUSH
23341: LD_EXP 57
23345: PUSH
23346: LD_EXP 60
23350: PUSH
23351: LD_EXP 61
23355: PUSH
23356: LD_EXP 62
23360: PUSH
23361: LD_EXP 58
23365: PUSH
23366: LD_EXP 59
23370: PUSH
23371: LD_EXP 67
23375: PUSH
23376: LD_EXP 71
23380: PUSH
23381: LD_EXP 72
23385: PUSH
23386: LD_EXP 74
23390: PUSH
23391: LD_EXP 78
23395: PUSH
23396: LD_EXP 81
23400: PUSH
23401: LD_EXP 82
23405: PUSH
23406: LD_EXP 92
23410: PUSH
23411: LD_EXP 93
23415: PUSH
23416: LD_EXP 94
23420: PUSH
23421: LD_EXP 95
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: ST_TO_ADDR
// tmp :=  ;
23482: LD_ADDR_VAR 0 3
23486: PUSH
23487: LD_STRING 
23489: ST_TO_ADDR
// for i = 1 to normalCounter do
23490: LD_ADDR_VAR 0 8
23494: PUSH
23495: DOUBLE
23496: LD_INT 1
23498: DEC
23499: ST_TO_ADDR
23500: LD_EXP 40
23504: PUSH
23505: FOR_TO
23506: IFFALSE 23542
// begin if flags [ i ] then
23508: LD_VAR 0 4
23512: PUSH
23513: LD_VAR 0 8
23517: ARRAY
23518: IFFALSE 23540
// tmp := tmp & i & ; ;
23520: LD_ADDR_VAR 0 3
23524: PUSH
23525: LD_VAR 0 3
23529: PUSH
23530: LD_VAR 0 8
23534: STR
23535: PUSH
23536: LD_STRING ;
23538: STR
23539: ST_TO_ADDR
// end ;
23540: GO 23505
23542: POP
23543: POP
// for i = 1 to hardcoreCounter do
23544: LD_ADDR_VAR 0 8
23548: PUSH
23549: DOUBLE
23550: LD_INT 1
23552: DEC
23553: ST_TO_ADDR
23554: LD_EXP 41
23558: PUSH
23559: FOR_TO
23560: IFFALSE 23606
// begin if flags [ normalCounter + i ] then
23562: LD_VAR 0 4
23566: PUSH
23567: LD_EXP 40
23571: PUSH
23572: LD_VAR 0 8
23576: PLUS
23577: ARRAY
23578: IFFALSE 23604
// tmp := tmp & ( 100 + i ) & ; ;
23580: LD_ADDR_VAR 0 3
23584: PUSH
23585: LD_VAR 0 3
23589: PUSH
23590: LD_INT 100
23592: PUSH
23593: LD_VAR 0 8
23597: PLUS
23598: STR
23599: PUSH
23600: LD_STRING ;
23602: STR
23603: ST_TO_ADDR
// end ;
23604: GO 23559
23606: POP
23607: POP
// if tmp then
23608: LD_VAR 0 3
23612: IFFALSE 23624
// active := tmp ;
23614: LD_ADDR_VAR 0 7
23618: PUSH
23619: LD_VAR 0 3
23623: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
23624: LD_STRING getStreamItemsFromMission("
23626: PUSH
23627: LD_VAR 0 5
23631: STR
23632: PUSH
23633: LD_STRING ","
23635: STR
23636: PUSH
23637: LD_VAR 0 6
23641: STR
23642: PUSH
23643: LD_STRING ","
23645: STR
23646: PUSH
23647: LD_VAR 0 7
23651: STR
23652: PUSH
23653: LD_STRING ")
23655: STR
23656: PPUSH
23657: CALL_OW 559
// end else
23661: GO 23670
// ToLua ( getStreamItemsFromMission("","","") ) ;
23663: LD_STRING getStreamItemsFromMission("","","")
23665: PPUSH
23666: CALL_OW 559
// end ;
23670: LD_VAR 0 2
23674: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23675: LD_EXP 39
23679: IFFALSE 23687
23681: PUSH
23682: LD_EXP 44
23686: AND
23687: IFFALSE 23811
23689: GO 23691
23691: DISABLE
23692: LD_INT 0
23694: PPUSH
23695: PPUSH
// begin enable ;
23696: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23697: LD_ADDR_VAR 0 2
23701: PUSH
23702: LD_INT 22
23704: PUSH
23705: LD_OWVAR 2
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: LD_INT 2
23716: PUSH
23717: LD_INT 34
23719: PUSH
23720: LD_INT 7
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PUSH
23727: LD_INT 34
23729: PUSH
23730: LD_INT 45
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 34
23739: PUSH
23740: LD_INT 28
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 34
23749: PUSH
23750: LD_INT 47
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PPUSH
23768: CALL_OW 69
23772: ST_TO_ADDR
// if not tmp then
23773: LD_VAR 0 2
23777: NOT
23778: IFFALSE 23782
// exit ;
23780: GO 23811
// for i in tmp do
23782: LD_ADDR_VAR 0 1
23786: PUSH
23787: LD_VAR 0 2
23791: PUSH
23792: FOR_IN
23793: IFFALSE 23809
// begin SetLives ( i , 0 ) ;
23795: LD_VAR 0 1
23799: PPUSH
23800: LD_INT 0
23802: PPUSH
23803: CALL_OW 234
// end ;
23807: GO 23792
23809: POP
23810: POP
// end ;
23811: PPOPN 2
23813: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23814: LD_EXP 39
23818: IFFALSE 23826
23820: PUSH
23821: LD_EXP 45
23825: AND
23826: IFFALSE 23910
23828: GO 23830
23830: DISABLE
23831: LD_INT 0
23833: PPUSH
23834: PPUSH
// begin enable ;
23835: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23836: LD_ADDR_VAR 0 2
23840: PUSH
23841: LD_INT 22
23843: PUSH
23844: LD_OWVAR 2
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 32
23855: PUSH
23856: LD_INT 3
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: PPUSH
23867: CALL_OW 69
23871: ST_TO_ADDR
// if not tmp then
23872: LD_VAR 0 2
23876: NOT
23877: IFFALSE 23881
// exit ;
23879: GO 23910
// for i in tmp do
23881: LD_ADDR_VAR 0 1
23885: PUSH
23886: LD_VAR 0 2
23890: PUSH
23891: FOR_IN
23892: IFFALSE 23908
// begin SetLives ( i , 0 ) ;
23894: LD_VAR 0 1
23898: PPUSH
23899: LD_INT 0
23901: PPUSH
23902: CALL_OW 234
// end ;
23906: GO 23891
23908: POP
23909: POP
// end ;
23910: PPOPN 2
23912: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23913: LD_EXP 39
23917: IFFALSE 23925
23919: PUSH
23920: LD_EXP 42
23924: AND
23925: IFFALSE 24018
23927: GO 23929
23929: DISABLE
23930: LD_INT 0
23932: PPUSH
// begin enable ;
23933: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23934: LD_ADDR_VAR 0 1
23938: PUSH
23939: LD_INT 22
23941: PUSH
23942: LD_OWVAR 2
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 2
23953: PUSH
23954: LD_INT 25
23956: PUSH
23957: LD_INT 5
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 25
23966: PUSH
23967: LD_INT 9
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 25
23976: PUSH
23977: LD_INT 8
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PPUSH
23994: CALL_OW 69
23998: PUSH
23999: FOR_IN
24000: IFFALSE 24016
// begin SetClass ( i , 1 ) ;
24002: LD_VAR 0 1
24006: PPUSH
24007: LD_INT 1
24009: PPUSH
24010: CALL_OW 336
// end ;
24014: GO 23999
24016: POP
24017: POP
// end ;
24018: PPOPN 1
24020: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24021: LD_EXP 39
24025: IFFALSE 24033
24027: PUSH
24028: LD_EXP 43
24032: AND
24033: IFFALSE 24045
24035: PUSH
24036: LD_OWVAR 65
24040: PUSH
24041: LD_INT 7
24043: LESS
24044: AND
24045: IFFALSE 24059
24047: GO 24049
24049: DISABLE
// begin enable ;
24050: ENABLE
// game_speed := 7 ;
24051: LD_ADDR_OWVAR 65
24055: PUSH
24056: LD_INT 7
24058: ST_TO_ADDR
// end ;
24059: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24060: LD_EXP 39
24064: IFFALSE 24072
24066: PUSH
24067: LD_EXP 46
24071: AND
24072: IFFALSE 24274
24074: GO 24076
24076: DISABLE
24077: LD_INT 0
24079: PPUSH
24080: PPUSH
24081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24082: LD_ADDR_VAR 0 3
24086: PUSH
24087: LD_INT 81
24089: PUSH
24090: LD_OWVAR 2
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 21
24101: PUSH
24102: LD_INT 1
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PPUSH
24113: CALL_OW 69
24117: ST_TO_ADDR
// if not tmp then
24118: LD_VAR 0 3
24122: NOT
24123: IFFALSE 24127
// exit ;
24125: GO 24274
// if tmp > 5 then
24127: LD_VAR 0 3
24131: PUSH
24132: LD_INT 5
24134: GREATER
24135: IFFALSE 24147
// k := 5 else
24137: LD_ADDR_VAR 0 2
24141: PUSH
24142: LD_INT 5
24144: ST_TO_ADDR
24145: GO 24157
// k := tmp ;
24147: LD_ADDR_VAR 0 2
24151: PUSH
24152: LD_VAR 0 3
24156: ST_TO_ADDR
// for i := 1 to k do
24157: LD_ADDR_VAR 0 1
24161: PUSH
24162: DOUBLE
24163: LD_INT 1
24165: DEC
24166: ST_TO_ADDR
24167: LD_VAR 0 2
24171: PUSH
24172: FOR_TO
24173: IFFALSE 24272
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24175: LD_VAR 0 3
24179: PUSH
24180: LD_VAR 0 1
24184: ARRAY
24185: PPUSH
24186: LD_VAR 0 1
24190: PUSH
24191: LD_INT 4
24193: MOD
24194: PUSH
24195: LD_INT 1
24197: PLUS
24198: PPUSH
24199: CALL_OW 259
24203: PUSH
24204: LD_INT 10
24206: LESS
24207: IFFALSE 24270
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24209: LD_VAR 0 3
24213: PUSH
24214: LD_VAR 0 1
24218: ARRAY
24219: PPUSH
24220: LD_VAR 0 1
24224: PUSH
24225: LD_INT 4
24227: MOD
24228: PUSH
24229: LD_INT 1
24231: PLUS
24232: PPUSH
24233: LD_VAR 0 3
24237: PUSH
24238: LD_VAR 0 1
24242: ARRAY
24243: PPUSH
24244: LD_VAR 0 1
24248: PUSH
24249: LD_INT 4
24251: MOD
24252: PUSH
24253: LD_INT 1
24255: PLUS
24256: PPUSH
24257: CALL_OW 259
24261: PUSH
24262: LD_INT 1
24264: PLUS
24265: PPUSH
24266: CALL_OW 237
24270: GO 24172
24272: POP
24273: POP
// end ;
24274: PPOPN 3
24276: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24277: LD_EXP 39
24281: IFFALSE 24289
24283: PUSH
24284: LD_EXP 47
24288: AND
24289: IFFALSE 24309
24291: GO 24293
24293: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24294: LD_INT 4
24296: PPUSH
24297: LD_OWVAR 2
24301: PPUSH
24302: LD_INT 0
24304: PPUSH
24305: CALL_OW 324
24309: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24310: LD_EXP 39
24314: IFFALSE 24322
24316: PUSH
24317: LD_EXP 76
24321: AND
24322: IFFALSE 24342
24324: GO 24326
24326: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24327: LD_INT 19
24329: PPUSH
24330: LD_OWVAR 2
24334: PPUSH
24335: LD_INT 0
24337: PPUSH
24338: CALL_OW 324
24342: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24343: LD_EXP 39
24347: IFFALSE 24355
24349: PUSH
24350: LD_EXP 48
24354: AND
24355: IFFALSE 24457
24357: GO 24359
24359: DISABLE
24360: LD_INT 0
24362: PPUSH
24363: PPUSH
// begin enable ;
24364: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24365: LD_ADDR_VAR 0 2
24369: PUSH
24370: LD_INT 22
24372: PUSH
24373: LD_OWVAR 2
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 2
24384: PUSH
24385: LD_INT 34
24387: PUSH
24388: LD_INT 11
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 34
24397: PUSH
24398: LD_INT 30
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: LIST
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PPUSH
24414: CALL_OW 69
24418: ST_TO_ADDR
// if not tmp then
24419: LD_VAR 0 2
24423: NOT
24424: IFFALSE 24428
// exit ;
24426: GO 24457
// for i in tmp do
24428: LD_ADDR_VAR 0 1
24432: PUSH
24433: LD_VAR 0 2
24437: PUSH
24438: FOR_IN
24439: IFFALSE 24455
// begin SetLives ( i , 0 ) ;
24441: LD_VAR 0 1
24445: PPUSH
24446: LD_INT 0
24448: PPUSH
24449: CALL_OW 234
// end ;
24453: GO 24438
24455: POP
24456: POP
// end ;
24457: PPOPN 2
24459: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24460: LD_EXP 39
24464: IFFALSE 24472
24466: PUSH
24467: LD_EXP 49
24471: AND
24472: IFFALSE 24492
24474: GO 24476
24476: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24477: LD_INT 32
24479: PPUSH
24480: LD_OWVAR 2
24484: PPUSH
24485: LD_INT 0
24487: PPUSH
24488: CALL_OW 324
24492: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24493: LD_EXP 39
24497: IFFALSE 24505
24499: PUSH
24500: LD_EXP 50
24504: AND
24505: IFFALSE 24688
24507: GO 24509
24509: DISABLE
24510: LD_INT 0
24512: PPUSH
24513: PPUSH
24514: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24515: LD_ADDR_VAR 0 2
24519: PUSH
24520: LD_INT 22
24522: PUSH
24523: LD_OWVAR 2
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: LD_INT 33
24534: PUSH
24535: LD_INT 3
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PPUSH
24546: CALL_OW 69
24550: ST_TO_ADDR
// if not tmp then
24551: LD_VAR 0 2
24555: NOT
24556: IFFALSE 24560
// exit ;
24558: GO 24688
// side := 0 ;
24560: LD_ADDR_VAR 0 3
24564: PUSH
24565: LD_INT 0
24567: ST_TO_ADDR
// for i := 1 to 8 do
24568: LD_ADDR_VAR 0 1
24572: PUSH
24573: DOUBLE
24574: LD_INT 1
24576: DEC
24577: ST_TO_ADDR
24578: LD_INT 8
24580: PUSH
24581: FOR_TO
24582: IFFALSE 24632
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24584: LD_OWVAR 2
24588: PUSH
24589: LD_VAR 0 1
24593: NONEQUAL
24594: IFFALSE 24616
24596: PUSH
24597: LD_OWVAR 2
24601: PPUSH
24602: LD_VAR 0 1
24606: PPUSH
24607: CALL_OW 81
24611: PUSH
24612: LD_INT 2
24614: EQUAL
24615: AND
24616: IFFALSE 24630
// begin side := i ;
24618: LD_ADDR_VAR 0 3
24622: PUSH
24623: LD_VAR 0 1
24627: ST_TO_ADDR
// break ;
24628: GO 24632
// end ;
24630: GO 24581
24632: POP
24633: POP
// if not side then
24634: LD_VAR 0 3
24638: NOT
24639: IFFALSE 24643
// exit ;
24641: GO 24688
// for i := 1 to tmp do
24643: LD_ADDR_VAR 0 1
24647: PUSH
24648: DOUBLE
24649: LD_INT 1
24651: DEC
24652: ST_TO_ADDR
24653: LD_VAR 0 2
24657: PUSH
24658: FOR_TO
24659: IFFALSE 24686
// if Prob ( 60 ) then
24661: LD_INT 60
24663: PPUSH
24664: CALL_OW 13
24668: IFFALSE 24684
// SetSide ( i , side ) ;
24670: LD_VAR 0 1
24674: PPUSH
24675: LD_VAR 0 3
24679: PPUSH
24680: CALL_OW 235
24684: GO 24658
24686: POP
24687: POP
// end ;
24688: PPOPN 3
24690: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24691: LD_EXP 39
24695: IFFALSE 24703
24697: PUSH
24698: LD_EXP 52
24702: AND
24703: IFFALSE 24822
24705: GO 24707
24707: DISABLE
24708: LD_INT 0
24710: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24711: LD_ADDR_VAR 0 1
24715: PUSH
24716: LD_INT 22
24718: PUSH
24719: LD_OWVAR 2
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 21
24730: PUSH
24731: LD_INT 1
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PUSH
24738: LD_INT 3
24740: PUSH
24741: LD_INT 23
24743: PUSH
24744: LD_INT 0
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: LIST
24759: PPUSH
24760: CALL_OW 69
24764: PUSH
24765: FOR_IN
24766: IFFALSE 24820
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24768: LD_VAR 0 1
24772: PPUSH
24773: CALL_OW 257
24777: PUSH
24778: LD_INT 1
24780: PUSH
24781: LD_INT 2
24783: PUSH
24784: LD_INT 3
24786: PUSH
24787: LD_INT 4
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: IN
24796: IFFALSE 24818
// SetClass ( un , rand ( 1 , 4 ) ) ;
24798: LD_VAR 0 1
24802: PPUSH
24803: LD_INT 1
24805: PPUSH
24806: LD_INT 4
24808: PPUSH
24809: CALL_OW 12
24813: PPUSH
24814: CALL_OW 336
24818: GO 24765
24820: POP
24821: POP
// end ;
24822: PPOPN 1
24824: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24825: LD_EXP 39
24829: IFFALSE 24837
24831: PUSH
24832: LD_EXP 51
24836: AND
24837: IFFALSE 24916
24839: GO 24841
24841: DISABLE
24842: LD_INT 0
24844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24845: LD_ADDR_VAR 0 1
24849: PUSH
24850: LD_INT 22
24852: PUSH
24853: LD_OWVAR 2
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: LD_INT 21
24864: PUSH
24865: LD_INT 3
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PPUSH
24876: CALL_OW 69
24880: ST_TO_ADDR
// if not tmp then
24881: LD_VAR 0 1
24885: NOT
24886: IFFALSE 24890
// exit ;
24888: GO 24916
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24890: LD_VAR 0 1
24894: PUSH
24895: LD_INT 1
24897: PPUSH
24898: LD_VAR 0 1
24902: PPUSH
24903: CALL_OW 12
24907: ARRAY
24908: PPUSH
24909: LD_INT 100
24911: PPUSH
24912: CALL_OW 234
// end ;
24916: PPOPN 1
24918: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24919: LD_EXP 39
24923: IFFALSE 24931
24925: PUSH
24926: LD_EXP 53
24930: AND
24931: IFFALSE 25029
24933: GO 24935
24935: DISABLE
24936: LD_INT 0
24938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24939: LD_ADDR_VAR 0 1
24943: PUSH
24944: LD_INT 22
24946: PUSH
24947: LD_OWVAR 2
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: LD_INT 21
24958: PUSH
24959: LD_INT 1
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PPUSH
24970: CALL_OW 69
24974: ST_TO_ADDR
// if not tmp then
24975: LD_VAR 0 1
24979: NOT
24980: IFFALSE 24984
// exit ;
24982: GO 25029
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24984: LD_VAR 0 1
24988: PUSH
24989: LD_INT 1
24991: PPUSH
24992: LD_VAR 0 1
24996: PPUSH
24997: CALL_OW 12
25001: ARRAY
25002: PPUSH
25003: LD_INT 1
25005: PPUSH
25006: LD_INT 4
25008: PPUSH
25009: CALL_OW 12
25013: PPUSH
25014: LD_INT 3000
25016: PPUSH
25017: LD_INT 9000
25019: PPUSH
25020: CALL_OW 12
25024: PPUSH
25025: CALL_OW 492
// end ;
25029: PPOPN 1
25031: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25032: LD_EXP 39
25036: IFFALSE 25044
25038: PUSH
25039: LD_EXP 54
25043: AND
25044: IFFALSE 25064
25046: GO 25048
25048: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25049: LD_INT 1
25051: PPUSH
25052: LD_OWVAR 2
25056: PPUSH
25057: LD_INT 0
25059: PPUSH
25060: CALL_OW 324
25064: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25065: LD_EXP 39
25069: IFFALSE 25077
25071: PUSH
25072: LD_EXP 55
25076: AND
25077: IFFALSE 25160
25079: GO 25081
25081: DISABLE
25082: LD_INT 0
25084: PPUSH
25085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25086: LD_ADDR_VAR 0 2
25090: PUSH
25091: LD_INT 22
25093: PUSH
25094: LD_OWVAR 2
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 21
25105: PUSH
25106: LD_INT 3
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PPUSH
25117: CALL_OW 69
25121: ST_TO_ADDR
// if not tmp then
25122: LD_VAR 0 2
25126: NOT
25127: IFFALSE 25131
// exit ;
25129: GO 25160
// for i in tmp do
25131: LD_ADDR_VAR 0 1
25135: PUSH
25136: LD_VAR 0 2
25140: PUSH
25141: FOR_IN
25142: IFFALSE 25158
// SetBLevel ( i , 10 ) ;
25144: LD_VAR 0 1
25148: PPUSH
25149: LD_INT 10
25151: PPUSH
25152: CALL_OW 241
25156: GO 25141
25158: POP
25159: POP
// end ;
25160: PPOPN 2
25162: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25163: LD_EXP 39
25167: IFFALSE 25175
25169: PUSH
25170: LD_EXP 56
25174: AND
25175: IFFALSE 25286
25177: GO 25179
25179: DISABLE
25180: LD_INT 0
25182: PPUSH
25183: PPUSH
25184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25185: LD_ADDR_VAR 0 3
25189: PUSH
25190: LD_INT 22
25192: PUSH
25193: LD_OWVAR 2
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: LD_INT 25
25204: PUSH
25205: LD_INT 1
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PPUSH
25216: CALL_OW 69
25220: ST_TO_ADDR
// if not tmp then
25221: LD_VAR 0 3
25225: NOT
25226: IFFALSE 25230
// exit ;
25228: GO 25286
// un := tmp [ rand ( 1 , tmp ) ] ;
25230: LD_ADDR_VAR 0 2
25234: PUSH
25235: LD_VAR 0 3
25239: PUSH
25240: LD_INT 1
25242: PPUSH
25243: LD_VAR 0 3
25247: PPUSH
25248: CALL_OW 12
25252: ARRAY
25253: ST_TO_ADDR
// if Crawls ( un ) then
25254: LD_VAR 0 2
25258: PPUSH
25259: CALL_OW 318
25263: IFFALSE 25274
// ComWalk ( un ) ;
25265: LD_VAR 0 2
25269: PPUSH
25270: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25274: LD_VAR 0 2
25278: PPUSH
25279: LD_INT 5
25281: PPUSH
25282: CALL_OW 336
// end ;
25286: PPOPN 3
25288: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25289: LD_EXP 39
25293: IFFALSE 25301
25295: PUSH
25296: LD_EXP 57
25300: AND
25301: IFFALSE 25313
25303: PUSH
25304: LD_OWVAR 67
25308: PUSH
25309: LD_INT 4
25311: LESS
25312: AND
25313: IFFALSE 25332
25315: GO 25317
25317: DISABLE
// begin Difficulty := Difficulty + 1 ;
25318: LD_ADDR_OWVAR 67
25322: PUSH
25323: LD_OWVAR 67
25327: PUSH
25328: LD_INT 1
25330: PLUS
25331: ST_TO_ADDR
// end ;
25332: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25333: LD_EXP 39
25337: IFFALSE 25345
25339: PUSH
25340: LD_EXP 58
25344: AND
25345: IFFALSE 25448
25347: GO 25349
25349: DISABLE
25350: LD_INT 0
25352: PPUSH
// begin for i := 1 to 5 do
25353: LD_ADDR_VAR 0 1
25357: PUSH
25358: DOUBLE
25359: LD_INT 1
25361: DEC
25362: ST_TO_ADDR
25363: LD_INT 5
25365: PUSH
25366: FOR_TO
25367: IFFALSE 25446
// begin uc_nation := nation_nature ;
25369: LD_ADDR_OWVAR 21
25373: PUSH
25374: LD_INT 0
25376: ST_TO_ADDR
// uc_side := 0 ;
25377: LD_ADDR_OWVAR 20
25381: PUSH
25382: LD_INT 0
25384: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25385: LD_ADDR_OWVAR 29
25389: PUSH
25390: LD_INT 12
25392: PUSH
25393: LD_INT 12
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: ST_TO_ADDR
// hc_agressivity := 20 ;
25400: LD_ADDR_OWVAR 35
25404: PUSH
25405: LD_INT 20
25407: ST_TO_ADDR
// hc_class := class_tiger ;
25408: LD_ADDR_OWVAR 28
25412: PUSH
25413: LD_INT 14
25415: ST_TO_ADDR
// hc_gallery :=  ;
25416: LD_ADDR_OWVAR 33
25420: PUSH
25421: LD_STRING 
25423: ST_TO_ADDR
// hc_name :=  ;
25424: LD_ADDR_OWVAR 26
25428: PUSH
25429: LD_STRING 
25431: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25432: CALL_OW 44
25436: PPUSH
25437: LD_INT 0
25439: PPUSH
25440: CALL_OW 51
// end ;
25444: GO 25366
25446: POP
25447: POP
// end ;
25448: PPOPN 1
25450: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25451: LD_EXP 39
25455: IFFALSE 25463
25457: PUSH
25458: LD_EXP 59
25462: AND
25463: IFFALSE 25472
25465: GO 25467
25467: DISABLE
// StreamSibBomb ;
25468: CALL 25473 0 0
25472: END
// export function StreamSibBomb ; var i , x , y ; begin
25473: LD_INT 0
25475: PPUSH
25476: PPUSH
25477: PPUSH
25478: PPUSH
// result := false ;
25479: LD_ADDR_VAR 0 1
25483: PUSH
25484: LD_INT 0
25486: ST_TO_ADDR
// for i := 1 to 16 do
25487: LD_ADDR_VAR 0 2
25491: PUSH
25492: DOUBLE
25493: LD_INT 1
25495: DEC
25496: ST_TO_ADDR
25497: LD_INT 16
25499: PUSH
25500: FOR_TO
25501: IFFALSE 25700
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25503: LD_ADDR_VAR 0 3
25507: PUSH
25508: LD_INT 10
25510: PUSH
25511: LD_INT 20
25513: PUSH
25514: LD_INT 30
25516: PUSH
25517: LD_INT 40
25519: PUSH
25520: LD_INT 50
25522: PUSH
25523: LD_INT 60
25525: PUSH
25526: LD_INT 70
25528: PUSH
25529: LD_INT 80
25531: PUSH
25532: LD_INT 90
25534: PUSH
25535: LD_INT 100
25537: PUSH
25538: LD_INT 110
25540: PUSH
25541: LD_INT 120
25543: PUSH
25544: LD_INT 130
25546: PUSH
25547: LD_INT 140
25549: PUSH
25550: LD_INT 150
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: PUSH
25570: LD_INT 1
25572: PPUSH
25573: LD_INT 15
25575: PPUSH
25576: CALL_OW 12
25580: ARRAY
25581: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25582: LD_ADDR_VAR 0 4
25586: PUSH
25587: LD_INT 10
25589: PUSH
25590: LD_INT 20
25592: PUSH
25593: LD_INT 30
25595: PUSH
25596: LD_INT 40
25598: PUSH
25599: LD_INT 50
25601: PUSH
25602: LD_INT 60
25604: PUSH
25605: LD_INT 70
25607: PUSH
25608: LD_INT 80
25610: PUSH
25611: LD_INT 90
25613: PUSH
25614: LD_INT 100
25616: PUSH
25617: LD_INT 110
25619: PUSH
25620: LD_INT 120
25622: PUSH
25623: LD_INT 130
25625: PUSH
25626: LD_INT 140
25628: PUSH
25629: LD_INT 150
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 1
25651: PPUSH
25652: LD_INT 15
25654: PPUSH
25655: CALL_OW 12
25659: ARRAY
25660: ST_TO_ADDR
// if ValidHex ( x , y ) then
25661: LD_VAR 0 3
25665: PPUSH
25666: LD_VAR 0 4
25670: PPUSH
25671: CALL_OW 488
25675: IFFALSE 25698
// begin result := [ x , y ] ;
25677: LD_ADDR_VAR 0 1
25681: PUSH
25682: LD_VAR 0 3
25686: PUSH
25687: LD_VAR 0 4
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: ST_TO_ADDR
// break ;
25696: GO 25700
// end ; end ;
25698: GO 25500
25700: POP
25701: POP
// if result then
25702: LD_VAR 0 1
25706: IFFALSE 25766
// begin ToLua ( playSibBomb() ) ;
25708: LD_STRING playSibBomb()
25710: PPUSH
25711: CALL_OW 559
// wait ( 0 0$14 ) ;
25715: LD_INT 490
25717: PPUSH
25718: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25722: LD_VAR 0 1
25726: PUSH
25727: LD_INT 1
25729: ARRAY
25730: PPUSH
25731: LD_VAR 0 1
25735: PUSH
25736: LD_INT 2
25738: ARRAY
25739: PPUSH
25740: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25744: LD_VAR 0 1
25748: PUSH
25749: LD_INT 1
25751: ARRAY
25752: PPUSH
25753: LD_VAR 0 1
25757: PUSH
25758: LD_INT 2
25760: ARRAY
25761: PPUSH
25762: CALL_OW 429
// end ; end ;
25766: LD_VAR 0 1
25770: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25771: LD_EXP 39
25775: IFFALSE 25783
25777: PUSH
25778: LD_EXP 61
25782: AND
25783: IFFALSE 25795
25785: GO 25787
25787: DISABLE
// YouLost (  ) ;
25788: LD_STRING 
25790: PPUSH
25791: CALL_OW 104
25795: END
// every 0 0$1 trigger StreamModeActive and sFog do
25796: LD_EXP 39
25800: IFFALSE 25808
25802: PUSH
25803: LD_EXP 60
25807: AND
25808: IFFALSE 25822
25810: GO 25812
25812: DISABLE
// FogOff ( your_side ) ;
25813: LD_OWVAR 2
25817: PPUSH
25818: CALL_OW 344
25822: END
// every 0 0$1 trigger StreamModeActive and sSun do
25823: LD_EXP 39
25827: IFFALSE 25835
25829: PUSH
25830: LD_EXP 62
25834: AND
25835: IFFALSE 25863
25837: GO 25839
25839: DISABLE
// begin solar_recharge_percent := 0 ;
25840: LD_ADDR_OWVAR 79
25844: PUSH
25845: LD_INT 0
25847: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25848: LD_INT 10500
25850: PPUSH
25851: CALL_OW 67
// solar_recharge_percent := 100 ;
25855: LD_ADDR_OWVAR 79
25859: PUSH
25860: LD_INT 100
25862: ST_TO_ADDR
// end ;
25863: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25864: LD_EXP 39
25868: IFFALSE 25876
25870: PUSH
25871: LD_EXP 63
25875: AND
25876: IFFALSE 26115
25878: GO 25880
25880: DISABLE
25881: LD_INT 0
25883: PPUSH
25884: PPUSH
25885: PPUSH
// begin tmp := [ ] ;
25886: LD_ADDR_VAR 0 3
25890: PUSH
25891: EMPTY
25892: ST_TO_ADDR
// for i := 1 to 6 do
25893: LD_ADDR_VAR 0 1
25897: PUSH
25898: DOUBLE
25899: LD_INT 1
25901: DEC
25902: ST_TO_ADDR
25903: LD_INT 6
25905: PUSH
25906: FOR_TO
25907: IFFALSE 26012
// begin uc_nation := nation_nature ;
25909: LD_ADDR_OWVAR 21
25913: PUSH
25914: LD_INT 0
25916: ST_TO_ADDR
// uc_side := 0 ;
25917: LD_ADDR_OWVAR 20
25921: PUSH
25922: LD_INT 0
25924: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25925: LD_ADDR_OWVAR 29
25929: PUSH
25930: LD_INT 12
25932: PUSH
25933: LD_INT 12
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: ST_TO_ADDR
// hc_agressivity := 20 ;
25940: LD_ADDR_OWVAR 35
25944: PUSH
25945: LD_INT 20
25947: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25948: LD_ADDR_OWVAR 28
25952: PUSH
25953: LD_INT 17
25955: ST_TO_ADDR
// hc_gallery :=  ;
25956: LD_ADDR_OWVAR 33
25960: PUSH
25961: LD_STRING 
25963: ST_TO_ADDR
// hc_name :=  ;
25964: LD_ADDR_OWVAR 26
25968: PUSH
25969: LD_STRING 
25971: ST_TO_ADDR
// un := CreateHuman ;
25972: LD_ADDR_VAR 0 2
25976: PUSH
25977: CALL_OW 44
25981: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25982: LD_VAR 0 2
25986: PPUSH
25987: LD_INT 1
25989: PPUSH
25990: CALL_OW 51
// tmp := tmp ^ un ;
25994: LD_ADDR_VAR 0 3
25998: PUSH
25999: LD_VAR 0 3
26003: PUSH
26004: LD_VAR 0 2
26008: ADD
26009: ST_TO_ADDR
// end ;
26010: GO 25906
26012: POP
26013: POP
// repeat wait ( 0 0$1 ) ;
26014: LD_INT 35
26016: PPUSH
26017: CALL_OW 67
// for un in tmp do
26021: LD_ADDR_VAR 0 2
26025: PUSH
26026: LD_VAR 0 3
26030: PUSH
26031: FOR_IN
26032: IFFALSE 26106
// begin if IsDead ( un ) then
26034: LD_VAR 0 2
26038: PPUSH
26039: CALL_OW 301
26043: IFFALSE 26063
// begin tmp := tmp diff un ;
26045: LD_ADDR_VAR 0 3
26049: PUSH
26050: LD_VAR 0 3
26054: PUSH
26055: LD_VAR 0 2
26059: DIFF
26060: ST_TO_ADDR
// continue ;
26061: GO 26031
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26063: LD_VAR 0 2
26067: PPUSH
26068: LD_INT 3
26070: PUSH
26071: LD_INT 22
26073: PUSH
26074: LD_INT 0
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PPUSH
26085: CALL_OW 69
26089: PPUSH
26090: LD_VAR 0 2
26094: PPUSH
26095: CALL_OW 74
26099: PPUSH
26100: CALL_OW 115
// end ;
26104: GO 26031
26106: POP
26107: POP
// until not tmp ;
26108: LD_VAR 0 3
26112: NOT
26113: IFFALSE 26014
// end ;
26115: PPOPN 3
26117: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26118: LD_EXP 39
26122: IFFALSE 26130
26124: PUSH
26125: LD_EXP 64
26129: AND
26130: IFFALSE 26184
26132: GO 26134
26134: DISABLE
// begin ToLua ( displayTroll(); ) ;
26135: LD_STRING displayTroll();
26137: PPUSH
26138: CALL_OW 559
// wait ( 3 3$00 ) ;
26142: LD_INT 6300
26144: PPUSH
26145: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26149: LD_STRING hideTroll();
26151: PPUSH
26152: CALL_OW 559
// wait ( 1 1$00 ) ;
26156: LD_INT 2100
26158: PPUSH
26159: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26163: LD_STRING displayTroll();
26165: PPUSH
26166: CALL_OW 559
// wait ( 1 1$00 ) ;
26170: LD_INT 2100
26172: PPUSH
26173: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26177: LD_STRING hideTroll();
26179: PPUSH
26180: CALL_OW 559
// end ;
26184: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26185: LD_EXP 39
26189: IFFALSE 26197
26191: PUSH
26192: LD_EXP 65
26196: AND
26197: IFFALSE 26260
26199: GO 26201
26201: DISABLE
26202: LD_INT 0
26204: PPUSH
// begin p := 0 ;
26205: LD_ADDR_VAR 0 1
26209: PUSH
26210: LD_INT 0
26212: ST_TO_ADDR
// repeat game_speed := 1 ;
26213: LD_ADDR_OWVAR 65
26217: PUSH
26218: LD_INT 1
26220: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26221: LD_INT 35
26223: PPUSH
26224: CALL_OW 67
// p := p + 1 ;
26228: LD_ADDR_VAR 0 1
26232: PUSH
26233: LD_VAR 0 1
26237: PUSH
26238: LD_INT 1
26240: PLUS
26241: ST_TO_ADDR
// until p >= 60 ;
26242: LD_VAR 0 1
26246: PUSH
26247: LD_INT 60
26249: GREATEREQUAL
26250: IFFALSE 26213
// game_speed := 4 ;
26252: LD_ADDR_OWVAR 65
26256: PUSH
26257: LD_INT 4
26259: ST_TO_ADDR
// end ;
26260: PPOPN 1
26262: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26263: LD_EXP 39
26267: IFFALSE 26275
26269: PUSH
26270: LD_EXP 66
26274: AND
26275: IFFALSE 26421
26277: GO 26279
26279: DISABLE
26280: LD_INT 0
26282: PPUSH
26283: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26284: LD_ADDR_VAR 0 1
26288: PUSH
26289: LD_INT 22
26291: PUSH
26292: LD_OWVAR 2
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 2
26303: PUSH
26304: LD_INT 30
26306: PUSH
26307: LD_INT 0
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 30
26316: PUSH
26317: LD_INT 1
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: LIST
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PPUSH
26333: CALL_OW 69
26337: ST_TO_ADDR
// if not depot then
26338: LD_VAR 0 1
26342: NOT
26343: IFFALSE 26347
// exit ;
26345: GO 26421
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26347: LD_ADDR_VAR 0 2
26351: PUSH
26352: LD_VAR 0 1
26356: PUSH
26357: LD_INT 1
26359: PPUSH
26360: LD_VAR 0 1
26364: PPUSH
26365: CALL_OW 12
26369: ARRAY
26370: PPUSH
26371: CALL_OW 274
26375: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26376: LD_VAR 0 2
26380: PPUSH
26381: LD_INT 1
26383: PPUSH
26384: LD_INT 0
26386: PPUSH
26387: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26391: LD_VAR 0 2
26395: PPUSH
26396: LD_INT 2
26398: PPUSH
26399: LD_INT 0
26401: PPUSH
26402: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26406: LD_VAR 0 2
26410: PPUSH
26411: LD_INT 3
26413: PPUSH
26414: LD_INT 0
26416: PPUSH
26417: CALL_OW 277
// end ;
26421: PPOPN 2
26423: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26424: LD_EXP 39
26428: IFFALSE 26436
26430: PUSH
26431: LD_EXP 67
26435: AND
26436: IFFALSE 26533
26438: GO 26440
26440: DISABLE
26441: LD_INT 0
26443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26444: LD_ADDR_VAR 0 1
26448: PUSH
26449: LD_INT 22
26451: PUSH
26452: LD_OWVAR 2
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 21
26463: PUSH
26464: LD_INT 1
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: LD_INT 3
26473: PUSH
26474: LD_INT 23
26476: PUSH
26477: LD_INT 0
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: LIST
26492: PPUSH
26493: CALL_OW 69
26497: ST_TO_ADDR
// if not tmp then
26498: LD_VAR 0 1
26502: NOT
26503: IFFALSE 26507
// exit ;
26505: GO 26533
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26507: LD_VAR 0 1
26511: PUSH
26512: LD_INT 1
26514: PPUSH
26515: LD_VAR 0 1
26519: PPUSH
26520: CALL_OW 12
26524: ARRAY
26525: PPUSH
26526: LD_INT 200
26528: PPUSH
26529: CALL_OW 234
// end ;
26533: PPOPN 1
26535: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26536: LD_EXP 39
26540: IFFALSE 26548
26542: PUSH
26543: LD_EXP 68
26547: AND
26548: IFFALSE 26627
26550: GO 26552
26552: DISABLE
26553: LD_INT 0
26555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26556: LD_ADDR_VAR 0 1
26560: PUSH
26561: LD_INT 22
26563: PUSH
26564: LD_OWVAR 2
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 21
26575: PUSH
26576: LD_INT 2
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PPUSH
26587: CALL_OW 69
26591: ST_TO_ADDR
// if not tmp then
26592: LD_VAR 0 1
26596: NOT
26597: IFFALSE 26601
// exit ;
26599: GO 26627
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26601: LD_VAR 0 1
26605: PUSH
26606: LD_INT 1
26608: PPUSH
26609: LD_VAR 0 1
26613: PPUSH
26614: CALL_OW 12
26618: ARRAY
26619: PPUSH
26620: LD_INT 60
26622: PPUSH
26623: CALL_OW 234
// end ;
26627: PPOPN 1
26629: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26630: LD_EXP 39
26634: IFFALSE 26642
26636: PUSH
26637: LD_EXP 69
26641: AND
26642: IFFALSE 26741
26644: GO 26646
26646: DISABLE
26647: LD_INT 0
26649: PPUSH
26650: PPUSH
// begin enable ;
26651: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26652: LD_ADDR_VAR 0 1
26656: PUSH
26657: LD_INT 22
26659: PUSH
26660: LD_OWVAR 2
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 61
26671: PUSH
26672: EMPTY
26673: LIST
26674: PUSH
26675: LD_INT 33
26677: PUSH
26678: LD_INT 2
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: LIST
26689: PPUSH
26690: CALL_OW 69
26694: ST_TO_ADDR
// if not tmp then
26695: LD_VAR 0 1
26699: NOT
26700: IFFALSE 26704
// exit ;
26702: GO 26741
// for i in tmp do
26704: LD_ADDR_VAR 0 2
26708: PUSH
26709: LD_VAR 0 1
26713: PUSH
26714: FOR_IN
26715: IFFALSE 26739
// if IsControledBy ( i ) then
26717: LD_VAR 0 2
26721: PPUSH
26722: CALL_OW 312
26726: IFFALSE 26737
// ComUnlink ( i ) ;
26728: LD_VAR 0 2
26732: PPUSH
26733: CALL_OW 136
26737: GO 26714
26739: POP
26740: POP
// end ;
26741: PPOPN 2
26743: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26744: LD_EXP 39
26748: IFFALSE 26756
26750: PUSH
26751: LD_EXP 70
26755: AND
26756: IFFALSE 26896
26758: GO 26760
26760: DISABLE
26761: LD_INT 0
26763: PPUSH
26764: PPUSH
// begin ToLua ( displayPowell(); ) ;
26765: LD_STRING displayPowell();
26767: PPUSH
26768: CALL_OW 559
// uc_side := 0 ;
26772: LD_ADDR_OWVAR 20
26776: PUSH
26777: LD_INT 0
26779: ST_TO_ADDR
// uc_nation := 2 ;
26780: LD_ADDR_OWVAR 21
26784: PUSH
26785: LD_INT 2
26787: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26788: LD_ADDR_OWVAR 37
26792: PUSH
26793: LD_INT 14
26795: ST_TO_ADDR
// vc_engine := engine_siberite ;
26796: LD_ADDR_OWVAR 39
26800: PUSH
26801: LD_INT 3
26803: ST_TO_ADDR
// vc_control := control_apeman ;
26804: LD_ADDR_OWVAR 38
26808: PUSH
26809: LD_INT 5
26811: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26812: LD_ADDR_OWVAR 40
26816: PUSH
26817: LD_INT 29
26819: ST_TO_ADDR
// un := CreateVehicle ;
26820: LD_ADDR_VAR 0 2
26824: PUSH
26825: CALL_OW 45
26829: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26830: LD_VAR 0 2
26834: PPUSH
26835: LD_INT 1
26837: PPUSH
26838: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26842: LD_INT 35
26844: PPUSH
26845: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26849: LD_VAR 0 2
26853: PPUSH
26854: LD_INT 22
26856: PUSH
26857: LD_OWVAR 2
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PPUSH
26866: CALL_OW 69
26870: PPUSH
26871: LD_VAR 0 2
26875: PPUSH
26876: CALL_OW 74
26880: PPUSH
26881: CALL_OW 115
// until IsDead ( un ) ;
26885: LD_VAR 0 2
26889: PPUSH
26890: CALL_OW 301
26894: IFFALSE 26842
// end ;
26896: PPOPN 2
26898: END
// every 0 0$1 trigger StreamModeActive and sStu do
26899: LD_EXP 39
26903: IFFALSE 26911
26905: PUSH
26906: LD_EXP 78
26910: AND
26911: IFFALSE 26927
26913: GO 26915
26915: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26916: LD_STRING displayStucuk();
26918: PPUSH
26919: CALL_OW 559
// ResetFog ;
26923: CALL_OW 335
// end ;
26927: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26928: LD_EXP 39
26932: IFFALSE 26940
26934: PUSH
26935: LD_EXP 71
26939: AND
26940: IFFALSE 27081
26942: GO 26944
26944: DISABLE
26945: LD_INT 0
26947: PPUSH
26948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26949: LD_ADDR_VAR 0 2
26953: PUSH
26954: LD_INT 22
26956: PUSH
26957: LD_OWVAR 2
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 21
26968: PUSH
26969: LD_INT 1
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PPUSH
26980: CALL_OW 69
26984: ST_TO_ADDR
// if not tmp then
26985: LD_VAR 0 2
26989: NOT
26990: IFFALSE 26994
// exit ;
26992: GO 27081
// un := tmp [ rand ( 1 , tmp ) ] ;
26994: LD_ADDR_VAR 0 1
26998: PUSH
26999: LD_VAR 0 2
27003: PUSH
27004: LD_INT 1
27006: PPUSH
27007: LD_VAR 0 2
27011: PPUSH
27012: CALL_OW 12
27016: ARRAY
27017: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27018: LD_VAR 0 1
27022: PPUSH
27023: LD_INT 0
27025: PPUSH
27026: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27030: LD_VAR 0 1
27034: PPUSH
27035: LD_OWVAR 3
27039: PUSH
27040: LD_VAR 0 1
27044: DIFF
27045: PPUSH
27046: LD_VAR 0 1
27050: PPUSH
27051: CALL_OW 74
27055: PPUSH
27056: CALL_OW 115
// wait ( 0 0$20 ) ;
27060: LD_INT 700
27062: PPUSH
27063: CALL_OW 67
// SetSide ( un , your_side ) ;
27067: LD_VAR 0 1
27071: PPUSH
27072: LD_OWVAR 2
27076: PPUSH
27077: CALL_OW 235
// end ;
27081: PPOPN 2
27083: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27084: LD_EXP 39
27088: IFFALSE 27096
27090: PUSH
27091: LD_EXP 72
27095: AND
27096: IFFALSE 27202
27098: GO 27100
27100: DISABLE
27101: LD_INT 0
27103: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27104: LD_ADDR_VAR 0 1
27108: PUSH
27109: LD_INT 22
27111: PUSH
27112: LD_OWVAR 2
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 2
27123: PUSH
27124: LD_INT 30
27126: PUSH
27127: LD_INT 0
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 30
27136: PUSH
27137: LD_INT 1
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: LIST
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PPUSH
27153: CALL_OW 69
27157: ST_TO_ADDR
// if not depot then
27158: LD_VAR 0 1
27162: NOT
27163: IFFALSE 27167
// exit ;
27165: GO 27202
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27167: LD_VAR 0 1
27171: PUSH
27172: LD_INT 1
27174: ARRAY
27175: PPUSH
27176: CALL_OW 250
27180: PPUSH
27181: LD_VAR 0 1
27185: PUSH
27186: LD_INT 1
27188: ARRAY
27189: PPUSH
27190: CALL_OW 251
27194: PPUSH
27195: LD_INT 70
27197: PPUSH
27198: CALL_OW 495
// end ;
27202: PPOPN 1
27204: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27205: LD_EXP 39
27209: IFFALSE 27217
27211: PUSH
27212: LD_EXP 73
27216: AND
27217: IFFALSE 27428
27219: GO 27221
27221: DISABLE
27222: LD_INT 0
27224: PPUSH
27225: PPUSH
27226: PPUSH
27227: PPUSH
27228: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27229: LD_ADDR_VAR 0 5
27233: PUSH
27234: LD_INT 22
27236: PUSH
27237: LD_OWVAR 2
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: LD_INT 21
27248: PUSH
27249: LD_INT 1
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PPUSH
27260: CALL_OW 69
27264: ST_TO_ADDR
// if not tmp then
27265: LD_VAR 0 5
27269: NOT
27270: IFFALSE 27274
// exit ;
27272: GO 27428
// for i in tmp do
27274: LD_ADDR_VAR 0 1
27278: PUSH
27279: LD_VAR 0 5
27283: PUSH
27284: FOR_IN
27285: IFFALSE 27426
// begin d := rand ( 0 , 5 ) ;
27287: LD_ADDR_VAR 0 4
27291: PUSH
27292: LD_INT 0
27294: PPUSH
27295: LD_INT 5
27297: PPUSH
27298: CALL_OW 12
27302: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27303: LD_ADDR_VAR 0 2
27307: PUSH
27308: LD_VAR 0 1
27312: PPUSH
27313: CALL_OW 250
27317: PPUSH
27318: LD_VAR 0 4
27322: PPUSH
27323: LD_INT 3
27325: PPUSH
27326: LD_INT 12
27328: PPUSH
27329: CALL_OW 12
27333: PPUSH
27334: CALL_OW 272
27338: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27339: LD_ADDR_VAR 0 3
27343: PUSH
27344: LD_VAR 0 1
27348: PPUSH
27349: CALL_OW 251
27353: PPUSH
27354: LD_VAR 0 4
27358: PPUSH
27359: LD_INT 3
27361: PPUSH
27362: LD_INT 12
27364: PPUSH
27365: CALL_OW 12
27369: PPUSH
27370: CALL_OW 273
27374: ST_TO_ADDR
// if ValidHex ( x , y ) then
27375: LD_VAR 0 2
27379: PPUSH
27380: LD_VAR 0 3
27384: PPUSH
27385: CALL_OW 488
27389: IFFALSE 27424
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27391: LD_VAR 0 1
27395: PPUSH
27396: LD_VAR 0 2
27400: PPUSH
27401: LD_VAR 0 3
27405: PPUSH
27406: LD_INT 3
27408: PPUSH
27409: LD_INT 6
27411: PPUSH
27412: CALL_OW 12
27416: PPUSH
27417: LD_INT 1
27419: PPUSH
27420: CALL_OW 483
// end ;
27424: GO 27284
27426: POP
27427: POP
// end ;
27428: PPOPN 5
27430: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27431: LD_EXP 39
27435: IFFALSE 27443
27437: PUSH
27438: LD_EXP 74
27442: AND
27443: IFFALSE 27537
27445: GO 27447
27447: DISABLE
27448: LD_INT 0
27450: PPUSH
27451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27452: LD_ADDR_VAR 0 2
27456: PUSH
27457: LD_INT 22
27459: PUSH
27460: LD_OWVAR 2
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 32
27471: PUSH
27472: LD_INT 1
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 21
27481: PUSH
27482: LD_INT 2
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: LIST
27493: PPUSH
27494: CALL_OW 69
27498: ST_TO_ADDR
// if not tmp then
27499: LD_VAR 0 2
27503: NOT
27504: IFFALSE 27508
// exit ;
27506: GO 27537
// for i in tmp do
27508: LD_ADDR_VAR 0 1
27512: PUSH
27513: LD_VAR 0 2
27517: PUSH
27518: FOR_IN
27519: IFFALSE 27535
// SetFuel ( i , 0 ) ;
27521: LD_VAR 0 1
27525: PPUSH
27526: LD_INT 0
27528: PPUSH
27529: CALL_OW 240
27533: GO 27518
27535: POP
27536: POP
// end ;
27537: PPOPN 2
27539: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27540: LD_EXP 39
27544: IFFALSE 27552
27546: PUSH
27547: LD_EXP 75
27551: AND
27552: IFFALSE 27618
27554: GO 27556
27556: DISABLE
27557: LD_INT 0
27559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27560: LD_ADDR_VAR 0 1
27564: PUSH
27565: LD_INT 22
27567: PUSH
27568: LD_OWVAR 2
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 30
27579: PUSH
27580: LD_INT 29
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PPUSH
27591: CALL_OW 69
27595: ST_TO_ADDR
// if not tmp then
27596: LD_VAR 0 1
27600: NOT
27601: IFFALSE 27605
// exit ;
27603: GO 27618
// DestroyUnit ( tmp [ 1 ] ) ;
27605: LD_VAR 0 1
27609: PUSH
27610: LD_INT 1
27612: ARRAY
27613: PPUSH
27614: CALL_OW 65
// end ;
27618: PPOPN 1
27620: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27621: LD_EXP 39
27625: IFFALSE 27633
27627: PUSH
27628: LD_EXP 77
27632: AND
27633: IFFALSE 27762
27635: GO 27637
27637: DISABLE
27638: LD_INT 0
27640: PPUSH
// begin uc_side := 0 ;
27641: LD_ADDR_OWVAR 20
27645: PUSH
27646: LD_INT 0
27648: ST_TO_ADDR
// uc_nation := nation_arabian ;
27649: LD_ADDR_OWVAR 21
27653: PUSH
27654: LD_INT 2
27656: ST_TO_ADDR
// hc_gallery :=  ;
27657: LD_ADDR_OWVAR 33
27661: PUSH
27662: LD_STRING 
27664: ST_TO_ADDR
// hc_name :=  ;
27665: LD_ADDR_OWVAR 26
27669: PUSH
27670: LD_STRING 
27672: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27673: LD_INT 1
27675: PPUSH
27676: LD_INT 11
27678: PPUSH
27679: LD_INT 10
27681: PPUSH
27682: CALL_OW 380
// un := CreateHuman ;
27686: LD_ADDR_VAR 0 1
27690: PUSH
27691: CALL_OW 44
27695: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27696: LD_VAR 0 1
27700: PPUSH
27701: LD_INT 1
27703: PPUSH
27704: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27708: LD_INT 35
27710: PPUSH
27711: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27715: LD_VAR 0 1
27719: PPUSH
27720: LD_INT 22
27722: PUSH
27723: LD_OWVAR 2
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PPUSH
27732: CALL_OW 69
27736: PPUSH
27737: LD_VAR 0 1
27741: PPUSH
27742: CALL_OW 74
27746: PPUSH
27747: CALL_OW 115
// until IsDead ( un ) ;
27751: LD_VAR 0 1
27755: PPUSH
27756: CALL_OW 301
27760: IFFALSE 27708
// end ;
27762: PPOPN 1
27764: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27765: LD_EXP 39
27769: IFFALSE 27777
27771: PUSH
27772: LD_EXP 79
27776: AND
27777: IFFALSE 27789
27779: GO 27781
27781: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27782: LD_STRING earthquake(getX(game), 0, 32)
27784: PPUSH
27785: CALL_OW 559
27789: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27790: LD_EXP 39
27794: IFFALSE 27802
27796: PUSH
27797: LD_EXP 80
27801: AND
27802: IFFALSE 27893
27804: GO 27806
27806: DISABLE
27807: LD_INT 0
27809: PPUSH
// begin enable ;
27810: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27811: LD_ADDR_VAR 0 1
27815: PUSH
27816: LD_INT 22
27818: PUSH
27819: LD_OWVAR 2
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 21
27830: PUSH
27831: LD_INT 2
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 33
27840: PUSH
27841: LD_INT 3
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: LIST
27852: PPUSH
27853: CALL_OW 69
27857: ST_TO_ADDR
// if not tmp then
27858: LD_VAR 0 1
27862: NOT
27863: IFFALSE 27867
// exit ;
27865: GO 27893
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27867: LD_VAR 0 1
27871: PUSH
27872: LD_INT 1
27874: PPUSH
27875: LD_VAR 0 1
27879: PPUSH
27880: CALL_OW 12
27884: ARRAY
27885: PPUSH
27886: LD_INT 1
27888: PPUSH
27889: CALL_OW 234
// end ;
27893: PPOPN 1
27895: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27896: LD_EXP 39
27900: IFFALSE 27908
27902: PUSH
27903: LD_EXP 81
27907: AND
27908: IFFALSE 28049
27910: GO 27912
27912: DISABLE
27913: LD_INT 0
27915: PPUSH
27916: PPUSH
27917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27918: LD_ADDR_VAR 0 3
27922: PUSH
27923: LD_INT 22
27925: PUSH
27926: LD_OWVAR 2
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: LD_INT 25
27937: PUSH
27938: LD_INT 1
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PPUSH
27949: CALL_OW 69
27953: ST_TO_ADDR
// if not tmp then
27954: LD_VAR 0 3
27958: NOT
27959: IFFALSE 27963
// exit ;
27961: GO 28049
// un := tmp [ rand ( 1 , tmp ) ] ;
27963: LD_ADDR_VAR 0 2
27967: PUSH
27968: LD_VAR 0 3
27972: PUSH
27973: LD_INT 1
27975: PPUSH
27976: LD_VAR 0 3
27980: PPUSH
27981: CALL_OW 12
27985: ARRAY
27986: ST_TO_ADDR
// if Crawls ( un ) then
27987: LD_VAR 0 2
27991: PPUSH
27992: CALL_OW 318
27996: IFFALSE 28007
// ComWalk ( un ) ;
27998: LD_VAR 0 2
28002: PPUSH
28003: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28007: LD_VAR 0 2
28011: PPUSH
28012: LD_INT 9
28014: PPUSH
28015: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28019: LD_INT 28
28021: PPUSH
28022: LD_OWVAR 2
28026: PPUSH
28027: LD_INT 2
28029: PPUSH
28030: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28034: LD_INT 29
28036: PPUSH
28037: LD_OWVAR 2
28041: PPUSH
28042: LD_INT 2
28044: PPUSH
28045: CALL_OW 322
// end ;
28049: PPOPN 3
28051: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28052: LD_EXP 39
28056: IFFALSE 28064
28058: PUSH
28059: LD_EXP 82
28063: AND
28064: IFFALSE 28175
28066: GO 28068
28068: DISABLE
28069: LD_INT 0
28071: PPUSH
28072: PPUSH
28073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28074: LD_ADDR_VAR 0 3
28078: PUSH
28079: LD_INT 22
28081: PUSH
28082: LD_OWVAR 2
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 25
28093: PUSH
28094: LD_INT 1
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PPUSH
28105: CALL_OW 69
28109: ST_TO_ADDR
// if not tmp then
28110: LD_VAR 0 3
28114: NOT
28115: IFFALSE 28119
// exit ;
28117: GO 28175
// un := tmp [ rand ( 1 , tmp ) ] ;
28119: LD_ADDR_VAR 0 2
28123: PUSH
28124: LD_VAR 0 3
28128: PUSH
28129: LD_INT 1
28131: PPUSH
28132: LD_VAR 0 3
28136: PPUSH
28137: CALL_OW 12
28141: ARRAY
28142: ST_TO_ADDR
// if Crawls ( un ) then
28143: LD_VAR 0 2
28147: PPUSH
28148: CALL_OW 318
28152: IFFALSE 28163
// ComWalk ( un ) ;
28154: LD_VAR 0 2
28158: PPUSH
28159: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28163: LD_VAR 0 2
28167: PPUSH
28168: LD_INT 8
28170: PPUSH
28171: CALL_OW 336
// end ;
28175: PPOPN 3
28177: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28178: LD_EXP 39
28182: IFFALSE 28190
28184: PUSH
28185: LD_EXP 83
28189: AND
28190: IFFALSE 28334
28192: GO 28194
28194: DISABLE
28195: LD_INT 0
28197: PPUSH
28198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28199: LD_ADDR_VAR 0 2
28203: PUSH
28204: LD_INT 22
28206: PUSH
28207: LD_OWVAR 2
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 21
28218: PUSH
28219: LD_INT 2
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 2
28228: PUSH
28229: LD_INT 34
28231: PUSH
28232: LD_INT 12
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 34
28241: PUSH
28242: LD_INT 51
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 34
28251: PUSH
28252: LD_INT 32
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: LIST
28269: PPUSH
28270: CALL_OW 69
28274: ST_TO_ADDR
// if not tmp then
28275: LD_VAR 0 2
28279: NOT
28280: IFFALSE 28284
// exit ;
28282: GO 28334
// for i in tmp do
28284: LD_ADDR_VAR 0 1
28288: PUSH
28289: LD_VAR 0 2
28293: PUSH
28294: FOR_IN
28295: IFFALSE 28332
// if GetCargo ( i , mat_artifact ) = 0 then
28297: LD_VAR 0 1
28301: PPUSH
28302: LD_INT 4
28304: PPUSH
28305: CALL_OW 289
28309: PUSH
28310: LD_INT 0
28312: EQUAL
28313: IFFALSE 28330
// SetCargo ( i , mat_siberit , 100 ) ;
28315: LD_VAR 0 1
28319: PPUSH
28320: LD_INT 3
28322: PPUSH
28323: LD_INT 100
28325: PPUSH
28326: CALL_OW 290
28330: GO 28294
28332: POP
28333: POP
// end ;
28334: PPOPN 2
28336: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28337: LD_EXP 39
28341: IFFALSE 28349
28343: PUSH
28344: LD_EXP 84
28348: AND
28349: IFFALSE 28532
28351: GO 28353
28353: DISABLE
28354: LD_INT 0
28356: PPUSH
28357: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28358: LD_ADDR_VAR 0 2
28362: PUSH
28363: LD_INT 22
28365: PUSH
28366: LD_OWVAR 2
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PPUSH
28375: CALL_OW 69
28379: ST_TO_ADDR
// if not tmp then
28380: LD_VAR 0 2
28384: NOT
28385: IFFALSE 28389
// exit ;
28387: GO 28532
// for i := 1 to 2 do
28389: LD_ADDR_VAR 0 1
28393: PUSH
28394: DOUBLE
28395: LD_INT 1
28397: DEC
28398: ST_TO_ADDR
28399: LD_INT 2
28401: PUSH
28402: FOR_TO
28403: IFFALSE 28530
// begin uc_side := your_side ;
28405: LD_ADDR_OWVAR 20
28409: PUSH
28410: LD_OWVAR 2
28414: ST_TO_ADDR
// uc_nation := nation_american ;
28415: LD_ADDR_OWVAR 21
28419: PUSH
28420: LD_INT 1
28422: ST_TO_ADDR
// vc_chassis := us_morphling ;
28423: LD_ADDR_OWVAR 37
28427: PUSH
28428: LD_INT 5
28430: ST_TO_ADDR
// vc_engine := engine_siberite ;
28431: LD_ADDR_OWVAR 39
28435: PUSH
28436: LD_INT 3
28438: ST_TO_ADDR
// vc_control := control_computer ;
28439: LD_ADDR_OWVAR 38
28443: PUSH
28444: LD_INT 3
28446: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28447: LD_ADDR_OWVAR 40
28451: PUSH
28452: LD_INT 10
28454: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28455: LD_VAR 0 2
28459: PUSH
28460: LD_INT 1
28462: ARRAY
28463: PPUSH
28464: CALL_OW 310
28468: NOT
28469: IFFALSE 28516
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28471: CALL_OW 45
28475: PPUSH
28476: LD_VAR 0 2
28480: PUSH
28481: LD_INT 1
28483: ARRAY
28484: PPUSH
28485: CALL_OW 250
28489: PPUSH
28490: LD_VAR 0 2
28494: PUSH
28495: LD_INT 1
28497: ARRAY
28498: PPUSH
28499: CALL_OW 251
28503: PPUSH
28504: LD_INT 12
28506: PPUSH
28507: LD_INT 1
28509: PPUSH
28510: CALL_OW 50
28514: GO 28528
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28516: CALL_OW 45
28520: PPUSH
28521: LD_INT 1
28523: PPUSH
28524: CALL_OW 51
// end ;
28528: GO 28402
28530: POP
28531: POP
// end ;
28532: PPOPN 2
28534: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28535: LD_EXP 39
28539: IFFALSE 28547
28541: PUSH
28542: LD_EXP 85
28546: AND
28547: IFFALSE 28769
28549: GO 28551
28551: DISABLE
28552: LD_INT 0
28554: PPUSH
28555: PPUSH
28556: PPUSH
28557: PPUSH
28558: PPUSH
28559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28560: LD_ADDR_VAR 0 6
28564: PUSH
28565: LD_INT 22
28567: PUSH
28568: LD_OWVAR 2
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 21
28579: PUSH
28580: LD_INT 1
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 3
28589: PUSH
28590: LD_INT 23
28592: PUSH
28593: LD_INT 0
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: LIST
28608: PPUSH
28609: CALL_OW 69
28613: ST_TO_ADDR
// if not tmp then
28614: LD_VAR 0 6
28618: NOT
28619: IFFALSE 28623
// exit ;
28621: GO 28769
// s1 := rand ( 1 , 4 ) ;
28623: LD_ADDR_VAR 0 2
28627: PUSH
28628: LD_INT 1
28630: PPUSH
28631: LD_INT 4
28633: PPUSH
28634: CALL_OW 12
28638: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28639: LD_ADDR_VAR 0 4
28643: PUSH
28644: LD_VAR 0 6
28648: PUSH
28649: LD_INT 1
28651: ARRAY
28652: PPUSH
28653: LD_VAR 0 2
28657: PPUSH
28658: CALL_OW 259
28662: ST_TO_ADDR
// if s1 = 1 then
28663: LD_VAR 0 2
28667: PUSH
28668: LD_INT 1
28670: EQUAL
28671: IFFALSE 28691
// s2 := rand ( 2 , 4 ) else
28673: LD_ADDR_VAR 0 3
28677: PUSH
28678: LD_INT 2
28680: PPUSH
28681: LD_INT 4
28683: PPUSH
28684: CALL_OW 12
28688: ST_TO_ADDR
28689: GO 28699
// s2 := 1 ;
28691: LD_ADDR_VAR 0 3
28695: PUSH
28696: LD_INT 1
28698: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28699: LD_ADDR_VAR 0 5
28703: PUSH
28704: LD_VAR 0 6
28708: PUSH
28709: LD_INT 1
28711: ARRAY
28712: PPUSH
28713: LD_VAR 0 3
28717: PPUSH
28718: CALL_OW 259
28722: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28723: LD_VAR 0 6
28727: PUSH
28728: LD_INT 1
28730: ARRAY
28731: PPUSH
28732: LD_VAR 0 2
28736: PPUSH
28737: LD_VAR 0 5
28741: PPUSH
28742: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28746: LD_VAR 0 6
28750: PUSH
28751: LD_INT 1
28753: ARRAY
28754: PPUSH
28755: LD_VAR 0 3
28759: PPUSH
28760: LD_VAR 0 4
28764: PPUSH
28765: CALL_OW 237
// end ;
28769: PPOPN 6
28771: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28772: LD_EXP 39
28776: IFFALSE 28784
28778: PUSH
28779: LD_EXP 86
28783: AND
28784: IFFALSE 28863
28786: GO 28788
28788: DISABLE
28789: LD_INT 0
28791: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28792: LD_ADDR_VAR 0 1
28796: PUSH
28797: LD_INT 22
28799: PUSH
28800: LD_OWVAR 2
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 30
28811: PUSH
28812: LD_INT 3
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PPUSH
28823: CALL_OW 69
28827: ST_TO_ADDR
// if not tmp then
28828: LD_VAR 0 1
28832: NOT
28833: IFFALSE 28837
// exit ;
28835: GO 28863
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28837: LD_VAR 0 1
28841: PUSH
28842: LD_INT 1
28844: PPUSH
28845: LD_VAR 0 1
28849: PPUSH
28850: CALL_OW 12
28854: ARRAY
28855: PPUSH
28856: LD_INT 1
28858: PPUSH
28859: CALL_OW 234
// end ;
28863: PPOPN 1
28865: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28866: LD_EXP 39
28870: IFFALSE 28878
28872: PUSH
28873: LD_EXP 87
28877: AND
28878: IFFALSE 28990
28880: GO 28882
28882: DISABLE
28883: LD_INT 0
28885: PPUSH
28886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28887: LD_ADDR_VAR 0 2
28891: PUSH
28892: LD_INT 22
28894: PUSH
28895: LD_OWVAR 2
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: LD_INT 2
28906: PUSH
28907: LD_INT 30
28909: PUSH
28910: LD_INT 27
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 30
28919: PUSH
28920: LD_INT 26
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 30
28929: PUSH
28930: LD_INT 28
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PPUSH
28947: CALL_OW 69
28951: ST_TO_ADDR
// if not tmp then
28952: LD_VAR 0 2
28956: NOT
28957: IFFALSE 28961
// exit ;
28959: GO 28990
// for i in tmp do
28961: LD_ADDR_VAR 0 1
28965: PUSH
28966: LD_VAR 0 2
28970: PUSH
28971: FOR_IN
28972: IFFALSE 28988
// SetLives ( i , 1 ) ;
28974: LD_VAR 0 1
28978: PPUSH
28979: LD_INT 1
28981: PPUSH
28982: CALL_OW 234
28986: GO 28971
28988: POP
28989: POP
// end ;
28990: PPOPN 2
28992: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28993: LD_EXP 39
28997: IFFALSE 29005
28999: PUSH
29000: LD_EXP 88
29004: AND
29005: IFFALSE 29292
29007: GO 29009
29009: DISABLE
29010: LD_INT 0
29012: PPUSH
29013: PPUSH
29014: PPUSH
// begin i := rand ( 1 , 7 ) ;
29015: LD_ADDR_VAR 0 1
29019: PUSH
29020: LD_INT 1
29022: PPUSH
29023: LD_INT 7
29025: PPUSH
29026: CALL_OW 12
29030: ST_TO_ADDR
// case i of 1 :
29031: LD_VAR 0 1
29035: PUSH
29036: LD_INT 1
29038: DOUBLE
29039: EQUAL
29040: IFTRUE 29044
29042: GO 29054
29044: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29045: LD_STRING earthquake(getX(game), 0, 32)
29047: PPUSH
29048: CALL_OW 559
29052: GO 29292
29054: LD_INT 2
29056: DOUBLE
29057: EQUAL
29058: IFTRUE 29062
29060: GO 29076
29062: POP
// begin ToLua ( displayStucuk(); ) ;
29063: LD_STRING displayStucuk();
29065: PPUSH
29066: CALL_OW 559
// ResetFog ;
29070: CALL_OW 335
// end ; 3 :
29074: GO 29292
29076: LD_INT 3
29078: DOUBLE
29079: EQUAL
29080: IFTRUE 29084
29082: GO 29188
29084: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29085: LD_ADDR_VAR 0 2
29089: PUSH
29090: LD_INT 22
29092: PUSH
29093: LD_OWVAR 2
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 25
29104: PUSH
29105: LD_INT 1
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PPUSH
29116: CALL_OW 69
29120: ST_TO_ADDR
// if not tmp then
29121: LD_VAR 0 2
29125: NOT
29126: IFFALSE 29130
// exit ;
29128: GO 29292
// un := tmp [ rand ( 1 , tmp ) ] ;
29130: LD_ADDR_VAR 0 3
29134: PUSH
29135: LD_VAR 0 2
29139: PUSH
29140: LD_INT 1
29142: PPUSH
29143: LD_VAR 0 2
29147: PPUSH
29148: CALL_OW 12
29152: ARRAY
29153: ST_TO_ADDR
// if Crawls ( un ) then
29154: LD_VAR 0 3
29158: PPUSH
29159: CALL_OW 318
29163: IFFALSE 29174
// ComWalk ( un ) ;
29165: LD_VAR 0 3
29169: PPUSH
29170: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29174: LD_VAR 0 3
29178: PPUSH
29179: LD_INT 8
29181: PPUSH
29182: CALL_OW 336
// end ; 4 :
29186: GO 29292
29188: LD_INT 4
29190: DOUBLE
29191: EQUAL
29192: IFTRUE 29196
29194: GO 29270
29196: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29197: LD_ADDR_VAR 0 2
29201: PUSH
29202: LD_INT 22
29204: PUSH
29205: LD_OWVAR 2
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 30
29216: PUSH
29217: LD_INT 29
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PPUSH
29228: CALL_OW 69
29232: ST_TO_ADDR
// if not tmp then
29233: LD_VAR 0 2
29237: NOT
29238: IFFALSE 29242
// exit ;
29240: GO 29292
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29242: LD_VAR 0 2
29246: PUSH
29247: LD_INT 1
29249: ARRAY
29250: PPUSH
29251: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29255: LD_VAR 0 2
29259: PUSH
29260: LD_INT 1
29262: ARRAY
29263: PPUSH
29264: CALL_OW 65
// end ; 5 .. 7 :
29268: GO 29292
29270: LD_INT 5
29272: DOUBLE
29273: GREATEREQUAL
29274: IFFALSE 29282
29276: LD_INT 7
29278: DOUBLE
29279: LESSEQUAL
29280: IFTRUE 29284
29282: GO 29291
29284: POP
// StreamSibBomb ; end ;
29285: CALL 25473 0 0
29289: GO 29292
29291: POP
// end ;
29292: PPOPN 3
29294: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29295: LD_EXP 39
29299: IFFALSE 29307
29301: PUSH
29302: LD_EXP 89
29306: AND
29307: IFFALSE 29463
29309: GO 29311
29311: DISABLE
29312: LD_INT 0
29314: PPUSH
29315: PPUSH
29316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29317: LD_ADDR_VAR 0 2
29321: PUSH
29322: LD_INT 81
29324: PUSH
29325: LD_OWVAR 2
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: LD_INT 2
29336: PUSH
29337: LD_INT 21
29339: PUSH
29340: LD_INT 1
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: LD_INT 21
29349: PUSH
29350: LD_INT 2
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: LIST
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PPUSH
29366: CALL_OW 69
29370: ST_TO_ADDR
// if not tmp then
29371: LD_VAR 0 2
29375: NOT
29376: IFFALSE 29380
// exit ;
29378: GO 29463
// p := 0 ;
29380: LD_ADDR_VAR 0 3
29384: PUSH
29385: LD_INT 0
29387: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29388: LD_INT 35
29390: PPUSH
29391: CALL_OW 67
// p := p + 1 ;
29395: LD_ADDR_VAR 0 3
29399: PUSH
29400: LD_VAR 0 3
29404: PUSH
29405: LD_INT 1
29407: PLUS
29408: ST_TO_ADDR
// for i in tmp do
29409: LD_ADDR_VAR 0 1
29413: PUSH
29414: LD_VAR 0 2
29418: PUSH
29419: FOR_IN
29420: IFFALSE 29451
// if GetLives ( i ) < 1000 then
29422: LD_VAR 0 1
29426: PPUSH
29427: CALL_OW 256
29431: PUSH
29432: LD_INT 1000
29434: LESS
29435: IFFALSE 29449
// SetLives ( i , 1000 ) ;
29437: LD_VAR 0 1
29441: PPUSH
29442: LD_INT 1000
29444: PPUSH
29445: CALL_OW 234
29449: GO 29419
29451: POP
29452: POP
// until p > 20 ;
29453: LD_VAR 0 3
29457: PUSH
29458: LD_INT 20
29460: GREATER
29461: IFFALSE 29388
// end ;
29463: PPOPN 3
29465: END
// every 0 0$1 trigger StreamModeActive and sTime do
29466: LD_EXP 39
29470: IFFALSE 29478
29472: PUSH
29473: LD_EXP 90
29477: AND
29478: IFFALSE 29513
29480: GO 29482
29482: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29483: LD_INT 28
29485: PPUSH
29486: LD_OWVAR 2
29490: PPUSH
29491: LD_INT 2
29493: PPUSH
29494: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29498: LD_INT 30
29500: PPUSH
29501: LD_OWVAR 2
29505: PPUSH
29506: LD_INT 2
29508: PPUSH
29509: CALL_OW 322
// end ;
29513: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29514: LD_EXP 39
29518: IFFALSE 29526
29520: PUSH
29521: LD_EXP 91
29525: AND
29526: IFFALSE 29647
29528: GO 29530
29530: DISABLE
29531: LD_INT 0
29533: PPUSH
29534: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29535: LD_ADDR_VAR 0 2
29539: PUSH
29540: LD_INT 22
29542: PUSH
29543: LD_OWVAR 2
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 21
29554: PUSH
29555: LD_INT 1
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 3
29564: PUSH
29565: LD_INT 23
29567: PUSH
29568: LD_INT 0
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: LIST
29583: PPUSH
29584: CALL_OW 69
29588: ST_TO_ADDR
// if not tmp then
29589: LD_VAR 0 2
29593: NOT
29594: IFFALSE 29598
// exit ;
29596: GO 29647
// for i in tmp do
29598: LD_ADDR_VAR 0 1
29602: PUSH
29603: LD_VAR 0 2
29607: PUSH
29608: FOR_IN
29609: IFFALSE 29645
// begin if Crawls ( i ) then
29611: LD_VAR 0 1
29615: PPUSH
29616: CALL_OW 318
29620: IFFALSE 29631
// ComWalk ( i ) ;
29622: LD_VAR 0 1
29626: PPUSH
29627: CALL_OW 138
// SetClass ( i , 2 ) ;
29631: LD_VAR 0 1
29635: PPUSH
29636: LD_INT 2
29638: PPUSH
29639: CALL_OW 336
// end ;
29643: GO 29608
29645: POP
29646: POP
// end ;
29647: PPOPN 2
29649: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29650: LD_EXP 39
29654: IFFALSE 29662
29656: PUSH
29657: LD_EXP 92
29661: AND
29662: IFFALSE 29952
29664: GO 29666
29666: DISABLE
29667: LD_INT 0
29669: PPUSH
29670: PPUSH
29671: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29672: LD_OWVAR 2
29676: PPUSH
29677: LD_INT 9
29679: PPUSH
29680: LD_INT 1
29682: PPUSH
29683: LD_INT 1
29685: PPUSH
29686: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29690: LD_INT 9
29692: PPUSH
29693: LD_OWVAR 2
29697: PPUSH
29698: CALL_OW 343
// uc_side := 9 ;
29702: LD_ADDR_OWVAR 20
29706: PUSH
29707: LD_INT 9
29709: ST_TO_ADDR
// uc_nation := 2 ;
29710: LD_ADDR_OWVAR 21
29714: PUSH
29715: LD_INT 2
29717: ST_TO_ADDR
// hc_name := Dark Warrior ;
29718: LD_ADDR_OWVAR 26
29722: PUSH
29723: LD_STRING Dark Warrior
29725: ST_TO_ADDR
// hc_gallery :=  ;
29726: LD_ADDR_OWVAR 33
29730: PUSH
29731: LD_STRING 
29733: ST_TO_ADDR
// hc_noskilllimit := true ;
29734: LD_ADDR_OWVAR 76
29738: PUSH
29739: LD_INT 1
29741: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29742: LD_ADDR_OWVAR 31
29746: PUSH
29747: LD_INT 30
29749: PUSH
29750: LD_INT 30
29752: PUSH
29753: LD_INT 30
29755: PUSH
29756: LD_INT 30
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: ST_TO_ADDR
// un := CreateHuman ;
29765: LD_ADDR_VAR 0 3
29769: PUSH
29770: CALL_OW 44
29774: ST_TO_ADDR
// hc_noskilllimit := false ;
29775: LD_ADDR_OWVAR 76
29779: PUSH
29780: LD_INT 0
29782: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29783: LD_VAR 0 3
29787: PPUSH
29788: LD_INT 1
29790: PPUSH
29791: CALL_OW 51
// ToLua ( playRanger() ) ;
29795: LD_STRING playRanger()
29797: PPUSH
29798: CALL_OW 559
// p := 0 ;
29802: LD_ADDR_VAR 0 2
29806: PUSH
29807: LD_INT 0
29809: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29810: LD_INT 35
29812: PPUSH
29813: CALL_OW 67
// p := p + 1 ;
29817: LD_ADDR_VAR 0 2
29821: PUSH
29822: LD_VAR 0 2
29826: PUSH
29827: LD_INT 1
29829: PLUS
29830: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29831: LD_VAR 0 3
29835: PPUSH
29836: CALL_OW 256
29840: PUSH
29841: LD_INT 1000
29843: LESS
29844: IFFALSE 29858
// SetLives ( un , 1000 ) ;
29846: LD_VAR 0 3
29850: PPUSH
29851: LD_INT 1000
29853: PPUSH
29854: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29858: LD_VAR 0 3
29862: PPUSH
29863: LD_INT 81
29865: PUSH
29866: LD_OWVAR 2
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 91
29877: PUSH
29878: LD_VAR 0 3
29882: PUSH
29883: LD_INT 30
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: LIST
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PPUSH
29895: CALL_OW 69
29899: PPUSH
29900: LD_VAR 0 3
29904: PPUSH
29905: CALL_OW 74
29909: PPUSH
29910: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29914: LD_VAR 0 2
29918: PUSH
29919: LD_INT 80
29921: GREATER
29922: IFTRUE 29935
29924: PUSH
29925: LD_VAR 0 3
29929: PPUSH
29930: CALL_OW 301
29934: OR
29935: IFFALSE 29810
// if un then
29937: LD_VAR 0 3
29941: IFFALSE 29952
// RemoveUnit ( un ) ;
29943: LD_VAR 0 3
29947: PPUSH
29948: CALL_OW 64
// end ;
29952: PPOPN 3
29954: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
29955: LD_EXP 93
29959: IFFALSE 30075
29961: GO 29963
29963: DISABLE
29964: LD_INT 0
29966: PPUSH
29967: PPUSH
29968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29969: LD_ADDR_VAR 0 2
29973: PUSH
29974: LD_INT 81
29976: PUSH
29977: LD_OWVAR 2
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 21
29988: PUSH
29989: LD_INT 1
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PPUSH
30000: CALL_OW 69
30004: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30005: LD_STRING playComputer()
30007: PPUSH
30008: CALL_OW 559
// if not tmp then
30012: LD_VAR 0 2
30016: NOT
30017: IFFALSE 30021
// exit ;
30019: GO 30075
// for i in tmp do
30021: LD_ADDR_VAR 0 1
30025: PUSH
30026: LD_VAR 0 2
30030: PUSH
30031: FOR_IN
30032: IFFALSE 30073
// for j := 1 to 4 do
30034: LD_ADDR_VAR 0 3
30038: PUSH
30039: DOUBLE
30040: LD_INT 1
30042: DEC
30043: ST_TO_ADDR
30044: LD_INT 4
30046: PUSH
30047: FOR_TO
30048: IFFALSE 30069
// SetSkill ( i , j , 10 ) ;
30050: LD_VAR 0 1
30054: PPUSH
30055: LD_VAR 0 3
30059: PPUSH
30060: LD_INT 10
30062: PPUSH
30063: CALL_OW 237
30067: GO 30047
30069: POP
30070: POP
30071: GO 30031
30073: POP
30074: POP
// end ;
30075: PPOPN 3
30077: END
// every 0 0$1 trigger s30 do var i , tmp ;
30078: LD_EXP 94
30082: IFFALSE 30151
30084: GO 30086
30086: DISABLE
30087: LD_INT 0
30089: PPUSH
30090: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30091: LD_ADDR_VAR 0 2
30095: PUSH
30096: LD_INT 22
30098: PUSH
30099: LD_OWVAR 2
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PPUSH
30108: CALL_OW 69
30112: ST_TO_ADDR
// if not tmp then
30113: LD_VAR 0 2
30117: NOT
30118: IFFALSE 30122
// exit ;
30120: GO 30151
// for i in tmp do
30122: LD_ADDR_VAR 0 1
30126: PUSH
30127: LD_VAR 0 2
30131: PUSH
30132: FOR_IN
30133: IFFALSE 30149
// SetLives ( i , 300 ) ;
30135: LD_VAR 0 1
30139: PPUSH
30140: LD_INT 300
30142: PPUSH
30143: CALL_OW 234
30147: GO 30132
30149: POP
30150: POP
// end ;
30151: PPOPN 2
30153: END
// every 0 0$1 trigger s60 do var i , tmp ;
30154: LD_EXP 95
30158: IFFALSE 30227
30160: GO 30162
30162: DISABLE
30163: LD_INT 0
30165: PPUSH
30166: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30167: LD_ADDR_VAR 0 2
30171: PUSH
30172: LD_INT 22
30174: PUSH
30175: LD_OWVAR 2
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PPUSH
30184: CALL_OW 69
30188: ST_TO_ADDR
// if not tmp then
30189: LD_VAR 0 2
30193: NOT
30194: IFFALSE 30198
// exit ;
30196: GO 30227
// for i in tmp do
30198: LD_ADDR_VAR 0 1
30202: PUSH
30203: LD_VAR 0 2
30207: PUSH
30208: FOR_IN
30209: IFFALSE 30225
// SetLives ( i , 600 ) ;
30211: LD_VAR 0 1
30215: PPUSH
30216: LD_INT 600
30218: PPUSH
30219: CALL_OW 234
30223: GO 30208
30225: POP
30226: POP
// end ;
30227: PPOPN 2
30229: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30230: LD_INT 0
30232: PPUSH
// case cmd of 301 :
30233: LD_VAR 0 1
30237: PUSH
30238: LD_INT 301
30240: DOUBLE
30241: EQUAL
30242: IFTRUE 30246
30244: GO 30278
30246: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30247: LD_VAR 0 6
30251: PPUSH
30252: LD_VAR 0 7
30256: PPUSH
30257: LD_VAR 0 8
30261: PPUSH
30262: LD_VAR 0 4
30266: PPUSH
30267: LD_VAR 0 5
30271: PPUSH
30272: CALL 31491 0 5
30276: GO 30399
30278: LD_INT 302
30280: DOUBLE
30281: EQUAL
30282: IFTRUE 30286
30284: GO 30323
30286: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30287: LD_VAR 0 6
30291: PPUSH
30292: LD_VAR 0 7
30296: PPUSH
30297: LD_VAR 0 8
30301: PPUSH
30302: LD_VAR 0 9
30306: PPUSH
30307: LD_VAR 0 4
30311: PPUSH
30312: LD_VAR 0 5
30316: PPUSH
30317: CALL 31582 0 6
30321: GO 30399
30323: LD_INT 303
30325: DOUBLE
30326: EQUAL
30327: IFTRUE 30331
30329: GO 30368
30331: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30332: LD_VAR 0 6
30336: PPUSH
30337: LD_VAR 0 7
30341: PPUSH
30342: LD_VAR 0 8
30346: PPUSH
30347: LD_VAR 0 9
30351: PPUSH
30352: LD_VAR 0 4
30356: PPUSH
30357: LD_VAR 0 5
30361: PPUSH
30362: CALL 30404 0 6
30366: GO 30399
30368: LD_INT 304
30370: DOUBLE
30371: EQUAL
30372: IFTRUE 30376
30374: GO 30398
30376: POP
// hHackTeleport ( unit , x , y ) ; end ;
30377: LD_VAR 0 2
30381: PPUSH
30382: LD_VAR 0 4
30386: PPUSH
30387: LD_VAR 0 5
30391: PPUSH
30392: CALL 32175 0 3
30396: GO 30399
30398: POP
// end ;
30399: LD_VAR 0 12
30403: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30404: LD_INT 0
30406: PPUSH
30407: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30408: LD_VAR 0 1
30412: PUSH
30413: LD_INT 1
30415: LESS
30416: IFTRUE 30428
30418: PUSH
30419: LD_VAR 0 1
30423: PUSH
30424: LD_INT 3
30426: GREATER
30427: OR
30428: IFTRUE 30446
30430: PUSH
30431: LD_VAR 0 5
30435: PPUSH
30436: LD_VAR 0 6
30440: PPUSH
30441: CALL_OW 428
30445: OR
30446: IFFALSE 30450
// exit ;
30448: GO 31178
// uc_side := your_side ;
30450: LD_ADDR_OWVAR 20
30454: PUSH
30455: LD_OWVAR 2
30459: ST_TO_ADDR
// uc_nation := nation ;
30460: LD_ADDR_OWVAR 21
30464: PUSH
30465: LD_VAR 0 1
30469: ST_TO_ADDR
// bc_level = 1 ;
30470: LD_ADDR_OWVAR 43
30474: PUSH
30475: LD_INT 1
30477: ST_TO_ADDR
// case btype of 1 :
30478: LD_VAR 0 2
30482: PUSH
30483: LD_INT 1
30485: DOUBLE
30486: EQUAL
30487: IFTRUE 30491
30489: GO 30502
30491: POP
// bc_type := b_depot ; 2 :
30492: LD_ADDR_OWVAR 42
30496: PUSH
30497: LD_INT 0
30499: ST_TO_ADDR
30500: GO 31122
30502: LD_INT 2
30504: DOUBLE
30505: EQUAL
30506: IFTRUE 30510
30508: GO 30521
30510: POP
// bc_type := b_warehouse ; 3 :
30511: LD_ADDR_OWVAR 42
30515: PUSH
30516: LD_INT 1
30518: ST_TO_ADDR
30519: GO 31122
30521: LD_INT 3
30523: DOUBLE
30524: EQUAL
30525: IFTRUE 30529
30527: GO 30540
30529: POP
// bc_type := b_lab ; 4 .. 9 :
30530: LD_ADDR_OWVAR 42
30534: PUSH
30535: LD_INT 6
30537: ST_TO_ADDR
30538: GO 31122
30540: LD_INT 4
30542: DOUBLE
30543: GREATEREQUAL
30544: IFFALSE 30552
30546: LD_INT 9
30548: DOUBLE
30549: LESSEQUAL
30550: IFTRUE 30554
30552: GO 30614
30554: POP
// begin bc_type := b_lab_half ;
30555: LD_ADDR_OWVAR 42
30559: PUSH
30560: LD_INT 7
30562: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30563: LD_ADDR_OWVAR 44
30567: PUSH
30568: LD_INT 10
30570: PUSH
30571: LD_INT 11
30573: PUSH
30574: LD_INT 12
30576: PUSH
30577: LD_INT 15
30579: PUSH
30580: LD_INT 14
30582: PUSH
30583: LD_INT 13
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: PUSH
30594: LD_VAR 0 2
30598: PUSH
30599: LD_INT 3
30601: MINUS
30602: ARRAY
30603: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
30604: LD_ADDR_OWVAR 45
30608: PUSH
30609: LD_INT 9
30611: ST_TO_ADDR
// end ; 10 .. 13 :
30612: GO 31122
30614: LD_INT 10
30616: DOUBLE
30617: GREATEREQUAL
30618: IFFALSE 30626
30620: LD_INT 13
30622: DOUBLE
30623: LESSEQUAL
30624: IFTRUE 30628
30626: GO 30705
30628: POP
// begin bc_type := b_lab_full ;
30629: LD_ADDR_OWVAR 42
30633: PUSH
30634: LD_INT 8
30636: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30637: LD_ADDR_OWVAR 44
30641: PUSH
30642: LD_INT 10
30644: PUSH
30645: LD_INT 12
30647: PUSH
30648: LD_INT 14
30650: PUSH
30651: LD_INT 13
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: PUSH
30660: LD_VAR 0 2
30664: PUSH
30665: LD_INT 9
30667: MINUS
30668: ARRAY
30669: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30670: LD_ADDR_OWVAR 45
30674: PUSH
30675: LD_INT 11
30677: PUSH
30678: LD_INT 15
30680: PUSH
30681: LD_INT 12
30683: PUSH
30684: LD_INT 15
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: PUSH
30693: LD_VAR 0 2
30697: PUSH
30698: LD_INT 9
30700: MINUS
30701: ARRAY
30702: ST_TO_ADDR
// end ; 14 :
30703: GO 31122
30705: LD_INT 14
30707: DOUBLE
30708: EQUAL
30709: IFTRUE 30713
30711: GO 30724
30713: POP
// bc_type := b_workshop ; 15 :
30714: LD_ADDR_OWVAR 42
30718: PUSH
30719: LD_INT 2
30721: ST_TO_ADDR
30722: GO 31122
30724: LD_INT 15
30726: DOUBLE
30727: EQUAL
30728: IFTRUE 30732
30730: GO 30743
30732: POP
// bc_type := b_factory ; 16 :
30733: LD_ADDR_OWVAR 42
30737: PUSH
30738: LD_INT 3
30740: ST_TO_ADDR
30741: GO 31122
30743: LD_INT 16
30745: DOUBLE
30746: EQUAL
30747: IFTRUE 30751
30749: GO 30762
30751: POP
// bc_type := b_ext_gun ; 17 :
30752: LD_ADDR_OWVAR 42
30756: PUSH
30757: LD_INT 17
30759: ST_TO_ADDR
30760: GO 31122
30762: LD_INT 17
30764: DOUBLE
30765: EQUAL
30766: IFTRUE 30770
30768: GO 30798
30770: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30771: LD_ADDR_OWVAR 42
30775: PUSH
30776: LD_INT 19
30778: PUSH
30779: LD_INT 23
30781: PUSH
30782: LD_INT 19
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: LIST
30789: PUSH
30790: LD_VAR 0 1
30794: ARRAY
30795: ST_TO_ADDR
30796: GO 31122
30798: LD_INT 18
30800: DOUBLE
30801: EQUAL
30802: IFTRUE 30806
30804: GO 30817
30806: POP
// bc_type := b_ext_radar ; 19 :
30807: LD_ADDR_OWVAR 42
30811: PUSH
30812: LD_INT 20
30814: ST_TO_ADDR
30815: GO 31122
30817: LD_INT 19
30819: DOUBLE
30820: EQUAL
30821: IFTRUE 30825
30823: GO 30836
30825: POP
// bc_type := b_ext_radio ; 20 :
30826: LD_ADDR_OWVAR 42
30830: PUSH
30831: LD_INT 22
30833: ST_TO_ADDR
30834: GO 31122
30836: LD_INT 20
30838: DOUBLE
30839: EQUAL
30840: IFTRUE 30844
30842: GO 30855
30844: POP
// bc_type := b_ext_siberium ; 21 :
30845: LD_ADDR_OWVAR 42
30849: PUSH
30850: LD_INT 21
30852: ST_TO_ADDR
30853: GO 31122
30855: LD_INT 21
30857: DOUBLE
30858: EQUAL
30859: IFTRUE 30863
30861: GO 30874
30863: POP
// bc_type := b_ext_computer ; 22 :
30864: LD_ADDR_OWVAR 42
30868: PUSH
30869: LD_INT 24
30871: ST_TO_ADDR
30872: GO 31122
30874: LD_INT 22
30876: DOUBLE
30877: EQUAL
30878: IFTRUE 30882
30880: GO 30893
30882: POP
// bc_type := b_ext_track ; 23 :
30883: LD_ADDR_OWVAR 42
30887: PUSH
30888: LD_INT 16
30890: ST_TO_ADDR
30891: GO 31122
30893: LD_INT 23
30895: DOUBLE
30896: EQUAL
30897: IFTRUE 30901
30899: GO 30912
30901: POP
// bc_type := b_ext_laser ; 24 :
30902: LD_ADDR_OWVAR 42
30906: PUSH
30907: LD_INT 25
30909: ST_TO_ADDR
30910: GO 31122
30912: LD_INT 24
30914: DOUBLE
30915: EQUAL
30916: IFTRUE 30920
30918: GO 30931
30920: POP
// bc_type := b_control_tower ; 25 :
30921: LD_ADDR_OWVAR 42
30925: PUSH
30926: LD_INT 36
30928: ST_TO_ADDR
30929: GO 31122
30931: LD_INT 25
30933: DOUBLE
30934: EQUAL
30935: IFTRUE 30939
30937: GO 30950
30939: POP
// bc_type := b_breastwork ; 26 :
30940: LD_ADDR_OWVAR 42
30944: PUSH
30945: LD_INT 31
30947: ST_TO_ADDR
30948: GO 31122
30950: LD_INT 26
30952: DOUBLE
30953: EQUAL
30954: IFTRUE 30958
30956: GO 30969
30958: POP
// bc_type := b_bunker ; 27 :
30959: LD_ADDR_OWVAR 42
30963: PUSH
30964: LD_INT 32
30966: ST_TO_ADDR
30967: GO 31122
30969: LD_INT 27
30971: DOUBLE
30972: EQUAL
30973: IFTRUE 30977
30975: GO 30988
30977: POP
// bc_type := b_turret ; 28 :
30978: LD_ADDR_OWVAR 42
30982: PUSH
30983: LD_INT 33
30985: ST_TO_ADDR
30986: GO 31122
30988: LD_INT 28
30990: DOUBLE
30991: EQUAL
30992: IFTRUE 30996
30994: GO 31007
30996: POP
// bc_type := b_armoury ; 29 :
30997: LD_ADDR_OWVAR 42
31001: PUSH
31002: LD_INT 4
31004: ST_TO_ADDR
31005: GO 31122
31007: LD_INT 29
31009: DOUBLE
31010: EQUAL
31011: IFTRUE 31015
31013: GO 31026
31015: POP
// bc_type := b_barracks ; 30 :
31016: LD_ADDR_OWVAR 42
31020: PUSH
31021: LD_INT 5
31023: ST_TO_ADDR
31024: GO 31122
31026: LD_INT 30
31028: DOUBLE
31029: EQUAL
31030: IFTRUE 31034
31032: GO 31045
31034: POP
// bc_type := b_solar_power ; 31 :
31035: LD_ADDR_OWVAR 42
31039: PUSH
31040: LD_INT 27
31042: ST_TO_ADDR
31043: GO 31122
31045: LD_INT 31
31047: DOUBLE
31048: EQUAL
31049: IFTRUE 31053
31051: GO 31064
31053: POP
// bc_type := b_oil_power ; 32 :
31054: LD_ADDR_OWVAR 42
31058: PUSH
31059: LD_INT 26
31061: ST_TO_ADDR
31062: GO 31122
31064: LD_INT 32
31066: DOUBLE
31067: EQUAL
31068: IFTRUE 31072
31070: GO 31083
31072: POP
// bc_type := b_siberite_power ; 33 :
31073: LD_ADDR_OWVAR 42
31077: PUSH
31078: LD_INT 28
31080: ST_TO_ADDR
31081: GO 31122
31083: LD_INT 33
31085: DOUBLE
31086: EQUAL
31087: IFTRUE 31091
31089: GO 31102
31091: POP
// bc_type := b_oil_mine ; 34 :
31092: LD_ADDR_OWVAR 42
31096: PUSH
31097: LD_INT 29
31099: ST_TO_ADDR
31100: GO 31122
31102: LD_INT 34
31104: DOUBLE
31105: EQUAL
31106: IFTRUE 31110
31108: GO 31121
31110: POP
// bc_type := b_siberite_mine ; end ;
31111: LD_ADDR_OWVAR 42
31115: PUSH
31116: LD_INT 30
31118: ST_TO_ADDR
31119: GO 31122
31121: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31122: LD_ADDR_VAR 0 8
31126: PUSH
31127: LD_VAR 0 5
31131: PPUSH
31132: LD_VAR 0 6
31136: PPUSH
31137: LD_VAR 0 3
31141: PPUSH
31142: CALL_OW 47
31146: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31147: LD_OWVAR 42
31151: PUSH
31152: LD_INT 32
31154: PUSH
31155: LD_INT 33
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: IN
31162: IFFALSE 31178
// PlaceWeaponTurret ( b , weapon ) ;
31164: LD_VAR 0 8
31168: PPUSH
31169: LD_VAR 0 4
31173: PPUSH
31174: CALL_OW 431
// end ;
31178: LD_VAR 0 7
31182: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31183: LD_INT 0
31185: PPUSH
31186: PPUSH
31187: PPUSH
31188: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31189: LD_ADDR_VAR 0 4
31193: PUSH
31194: LD_INT 22
31196: PUSH
31197: LD_OWVAR 2
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 2
31208: PUSH
31209: LD_INT 30
31211: PUSH
31212: LD_INT 0
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 30
31221: PUSH
31222: LD_INT 1
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: LIST
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PPUSH
31238: CALL_OW 69
31242: ST_TO_ADDR
// if not tmp then
31243: LD_VAR 0 4
31247: NOT
31248: IFFALSE 31252
// exit ;
31250: GO 31311
// for i in tmp do
31252: LD_ADDR_VAR 0 2
31256: PUSH
31257: LD_VAR 0 4
31261: PUSH
31262: FOR_IN
31263: IFFALSE 31309
// for j = 1 to 3 do
31265: LD_ADDR_VAR 0 3
31269: PUSH
31270: DOUBLE
31271: LD_INT 1
31273: DEC
31274: ST_TO_ADDR
31275: LD_INT 3
31277: PUSH
31278: FOR_TO
31279: IFFALSE 31305
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31281: LD_VAR 0 2
31285: PPUSH
31286: CALL_OW 274
31290: PPUSH
31291: LD_VAR 0 3
31295: PPUSH
31296: LD_INT 99999
31298: PPUSH
31299: CALL_OW 277
31303: GO 31278
31305: POP
31306: POP
31307: GO 31262
31309: POP
31310: POP
// end ;
31311: LD_VAR 0 1
31315: RET
// export function hHackSetLevel10 ; var i , j ; begin
31316: LD_INT 0
31318: PPUSH
31319: PPUSH
31320: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31321: LD_ADDR_VAR 0 2
31325: PUSH
31326: LD_INT 21
31328: PUSH
31329: LD_INT 1
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PPUSH
31336: CALL_OW 69
31340: PUSH
31341: FOR_IN
31342: IFFALSE 31394
// if IsSelected ( i ) then
31344: LD_VAR 0 2
31348: PPUSH
31349: CALL_OW 306
31353: IFFALSE 31392
// begin for j := 1 to 4 do
31355: LD_ADDR_VAR 0 3
31359: PUSH
31360: DOUBLE
31361: LD_INT 1
31363: DEC
31364: ST_TO_ADDR
31365: LD_INT 4
31367: PUSH
31368: FOR_TO
31369: IFFALSE 31390
// SetSkill ( i , j , 10 ) ;
31371: LD_VAR 0 2
31375: PPUSH
31376: LD_VAR 0 3
31380: PPUSH
31381: LD_INT 10
31383: PPUSH
31384: CALL_OW 237
31388: GO 31368
31390: POP
31391: POP
// end ;
31392: GO 31341
31394: POP
31395: POP
// end ;
31396: LD_VAR 0 1
31400: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31401: LD_INT 0
31403: PPUSH
31404: PPUSH
31405: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31406: LD_ADDR_VAR 0 2
31410: PUSH
31411: LD_INT 22
31413: PUSH
31414: LD_OWVAR 2
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 21
31425: PUSH
31426: LD_INT 1
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PPUSH
31437: CALL_OW 69
31441: PUSH
31442: FOR_IN
31443: IFFALSE 31484
// begin for j := 1 to 4 do
31445: LD_ADDR_VAR 0 3
31449: PUSH
31450: DOUBLE
31451: LD_INT 1
31453: DEC
31454: ST_TO_ADDR
31455: LD_INT 4
31457: PUSH
31458: FOR_TO
31459: IFFALSE 31480
// SetSkill ( i , j , 10 ) ;
31461: LD_VAR 0 2
31465: PPUSH
31466: LD_VAR 0 3
31470: PPUSH
31471: LD_INT 10
31473: PPUSH
31474: CALL_OW 237
31478: GO 31458
31480: POP
31481: POP
// end ;
31482: GO 31442
31484: POP
31485: POP
// end ;
31486: LD_VAR 0 1
31490: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31491: LD_INT 0
31493: PPUSH
// uc_side := your_side ;
31494: LD_ADDR_OWVAR 20
31498: PUSH
31499: LD_OWVAR 2
31503: ST_TO_ADDR
// uc_nation := nation ;
31504: LD_ADDR_OWVAR 21
31508: PUSH
31509: LD_VAR 0 1
31513: ST_TO_ADDR
// InitHc ;
31514: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31518: LD_INT 0
31520: PPUSH
31521: LD_VAR 0 2
31525: PPUSH
31526: LD_VAR 0 3
31530: PPUSH
31531: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31535: LD_VAR 0 4
31539: PPUSH
31540: LD_VAR 0 5
31544: PPUSH
31545: CALL_OW 428
31549: PUSH
31550: LD_INT 0
31552: EQUAL
31553: IFFALSE 31577
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31555: CALL_OW 44
31559: PPUSH
31560: LD_VAR 0 4
31564: PPUSH
31565: LD_VAR 0 5
31569: PPUSH
31570: LD_INT 1
31572: PPUSH
31573: CALL_OW 48
// end ;
31577: LD_VAR 0 6
31581: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31582: LD_INT 0
31584: PPUSH
31585: PPUSH
// uc_side := your_side ;
31586: LD_ADDR_OWVAR 20
31590: PUSH
31591: LD_OWVAR 2
31595: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31596: LD_VAR 0 1
31600: PUSH
31601: LD_INT 1
31603: PUSH
31604: LD_INT 2
31606: PUSH
31607: LD_INT 3
31609: PUSH
31610: LD_INT 4
31612: PUSH
31613: LD_INT 5
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: IN
31623: IFFALSE 31635
// uc_nation := nation_american else
31625: LD_ADDR_OWVAR 21
31629: PUSH
31630: LD_INT 1
31632: ST_TO_ADDR
31633: GO 31678
// if chassis in [ 11 , 12 , 13 , 14 ] then
31635: LD_VAR 0 1
31639: PUSH
31640: LD_INT 11
31642: PUSH
31643: LD_INT 12
31645: PUSH
31646: LD_INT 13
31648: PUSH
31649: LD_INT 14
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: IN
31658: IFFALSE 31670
// uc_nation := nation_arabian else
31660: LD_ADDR_OWVAR 21
31664: PUSH
31665: LD_INT 2
31667: ST_TO_ADDR
31668: GO 31678
// uc_nation := nation_russian ;
31670: LD_ADDR_OWVAR 21
31674: PUSH
31675: LD_INT 3
31677: ST_TO_ADDR
// vc_chassis := chassis ;
31678: LD_ADDR_OWVAR 37
31682: PUSH
31683: LD_VAR 0 1
31687: ST_TO_ADDR
// vc_engine := engine ;
31688: LD_ADDR_OWVAR 39
31692: PUSH
31693: LD_VAR 0 2
31697: ST_TO_ADDR
// vc_control := control ;
31698: LD_ADDR_OWVAR 38
31702: PUSH
31703: LD_VAR 0 3
31707: ST_TO_ADDR
// vc_weapon := weapon ;
31708: LD_ADDR_OWVAR 40
31712: PUSH
31713: LD_VAR 0 4
31717: ST_TO_ADDR
// un := CreateVehicle ;
31718: LD_ADDR_VAR 0 8
31722: PUSH
31723: CALL_OW 45
31727: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31728: LD_VAR 0 8
31732: PPUSH
31733: LD_INT 0
31735: PPUSH
31736: LD_INT 5
31738: PPUSH
31739: CALL_OW 12
31743: PPUSH
31744: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31748: LD_VAR 0 8
31752: PPUSH
31753: LD_VAR 0 5
31757: PPUSH
31758: LD_VAR 0 6
31762: PPUSH
31763: LD_INT 1
31765: PPUSH
31766: CALL_OW 48
// end ;
31770: LD_VAR 0 7
31774: RET
// export hInvincible ; every 1 do
31775: GO 31777
31777: DISABLE
// hInvincible := [ ] ;
31778: LD_ADDR_EXP 96
31782: PUSH
31783: EMPTY
31784: ST_TO_ADDR
31785: END
// every 10 do var i ;
31786: GO 31788
31788: DISABLE
31789: LD_INT 0
31791: PPUSH
// begin enable ;
31792: ENABLE
// if not hInvincible then
31793: LD_EXP 96
31797: NOT
31798: IFFALSE 31802
// exit ;
31800: GO 31846
// for i in hInvincible do
31802: LD_ADDR_VAR 0 1
31806: PUSH
31807: LD_EXP 96
31811: PUSH
31812: FOR_IN
31813: IFFALSE 31844
// if GetLives ( i ) < 1000 then
31815: LD_VAR 0 1
31819: PPUSH
31820: CALL_OW 256
31824: PUSH
31825: LD_INT 1000
31827: LESS
31828: IFFALSE 31842
// SetLives ( i , 1000 ) ;
31830: LD_VAR 0 1
31834: PPUSH
31835: LD_INT 1000
31837: PPUSH
31838: CALL_OW 234
31842: GO 31812
31844: POP
31845: POP
// end ;
31846: PPOPN 1
31848: END
// export function hHackInvincible ; var i ; begin
31849: LD_INT 0
31851: PPUSH
31852: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31853: LD_ADDR_VAR 0 2
31857: PUSH
31858: LD_INT 2
31860: PUSH
31861: LD_INT 21
31863: PUSH
31864: LD_INT 1
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 21
31873: PUSH
31874: LD_INT 2
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: LIST
31885: PPUSH
31886: CALL_OW 69
31890: PUSH
31891: FOR_IN
31892: IFFALSE 31953
// if IsSelected ( i ) then
31894: LD_VAR 0 2
31898: PPUSH
31899: CALL_OW 306
31903: IFFALSE 31951
// begin if i in hInvincible then
31905: LD_VAR 0 2
31909: PUSH
31910: LD_EXP 96
31914: IN
31915: IFFALSE 31935
// hInvincible := hInvincible diff i else
31917: LD_ADDR_EXP 96
31921: PUSH
31922: LD_EXP 96
31926: PUSH
31927: LD_VAR 0 2
31931: DIFF
31932: ST_TO_ADDR
31933: GO 31951
// hInvincible := hInvincible union i ;
31935: LD_ADDR_EXP 96
31939: PUSH
31940: LD_EXP 96
31944: PUSH
31945: LD_VAR 0 2
31949: UNION
31950: ST_TO_ADDR
// end ;
31951: GO 31891
31953: POP
31954: POP
// end ;
31955: LD_VAR 0 1
31959: RET
// export function hHackInvisible ; var i , j ; begin
31960: LD_INT 0
31962: PPUSH
31963: PPUSH
31964: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31965: LD_ADDR_VAR 0 2
31969: PUSH
31970: LD_INT 21
31972: PUSH
31973: LD_INT 1
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PPUSH
31980: CALL_OW 69
31984: PUSH
31985: FOR_IN
31986: IFFALSE 32010
// if IsSelected ( i ) then
31988: LD_VAR 0 2
31992: PPUSH
31993: CALL_OW 306
31997: IFFALSE 32008
// ComForceInvisible ( i ) ;
31999: LD_VAR 0 2
32003: PPUSH
32004: CALL_OW 496
32008: GO 31985
32010: POP
32011: POP
// end ;
32012: LD_VAR 0 1
32016: RET
// export function hHackChangeYourSide ; begin
32017: LD_INT 0
32019: PPUSH
// if your_side = 8 then
32020: LD_OWVAR 2
32024: PUSH
32025: LD_INT 8
32027: EQUAL
32028: IFFALSE 32040
// your_side := 0 else
32030: LD_ADDR_OWVAR 2
32034: PUSH
32035: LD_INT 0
32037: ST_TO_ADDR
32038: GO 32054
// your_side := your_side + 1 ;
32040: LD_ADDR_OWVAR 2
32044: PUSH
32045: LD_OWVAR 2
32049: PUSH
32050: LD_INT 1
32052: PLUS
32053: ST_TO_ADDR
// end ;
32054: LD_VAR 0 1
32058: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32059: LD_INT 0
32061: PPUSH
32062: PPUSH
32063: PPUSH
// for i in all_units do
32064: LD_ADDR_VAR 0 2
32068: PUSH
32069: LD_OWVAR 3
32073: PUSH
32074: FOR_IN
32075: IFFALSE 32153
// if IsSelected ( i ) then
32077: LD_VAR 0 2
32081: PPUSH
32082: CALL_OW 306
32086: IFFALSE 32151
// begin j := GetSide ( i ) ;
32088: LD_ADDR_VAR 0 3
32092: PUSH
32093: LD_VAR 0 2
32097: PPUSH
32098: CALL_OW 255
32102: ST_TO_ADDR
// if j = 8 then
32103: LD_VAR 0 3
32107: PUSH
32108: LD_INT 8
32110: EQUAL
32111: IFFALSE 32123
// j := 0 else
32113: LD_ADDR_VAR 0 3
32117: PUSH
32118: LD_INT 0
32120: ST_TO_ADDR
32121: GO 32137
// j := j + 1 ;
32123: LD_ADDR_VAR 0 3
32127: PUSH
32128: LD_VAR 0 3
32132: PUSH
32133: LD_INT 1
32135: PLUS
32136: ST_TO_ADDR
// SetSide ( i , j ) ;
32137: LD_VAR 0 2
32141: PPUSH
32142: LD_VAR 0 3
32146: PPUSH
32147: CALL_OW 235
// end ;
32151: GO 32074
32153: POP
32154: POP
// end ;
32155: LD_VAR 0 1
32159: RET
// export function hHackFog ; begin
32160: LD_INT 0
32162: PPUSH
// FogOff ( true ) ;
32163: LD_INT 1
32165: PPUSH
32166: CALL_OW 344
// end ;
32170: LD_VAR 0 1
32174: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32175: LD_INT 0
32177: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32178: LD_VAR 0 1
32182: PPUSH
32183: LD_VAR 0 2
32187: PPUSH
32188: LD_VAR 0 3
32192: PPUSH
32193: LD_INT 1
32195: PPUSH
32196: LD_INT 1
32198: PPUSH
32199: CALL_OW 483
// CenterOnXY ( x , y ) ;
32203: LD_VAR 0 2
32207: PPUSH
32208: LD_VAR 0 3
32212: PPUSH
32213: CALL_OW 84
// end ;
32217: LD_VAR 0 4
32221: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
32222: LD_INT 0
32224: PPUSH
32225: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
32226: LD_VAR 0 1
32230: NOT
32231: IFTRUE 32250
32233: PUSH
32234: LD_VAR 0 2
32238: PPUSH
32239: LD_VAR 0 3
32243: PPUSH
32244: CALL_OW 488
32248: NOT
32249: OR
32250: IFTRUE 32285
32252: PUSH
32253: LD_VAR 0 1
32257: PPUSH
32258: CALL_OW 266
32262: PUSH
32263: LD_INT 3
32265: NONEQUAL
32266: IFFALSE 32284
32268: PUSH
32269: LD_VAR 0 1
32273: PPUSH
32274: CALL_OW 247
32278: PUSH
32279: LD_INT 1
32281: EQUAL
32282: NOT
32283: AND
32284: OR
32285: IFFALSE 32289
// exit ;
32287: GO 32571
// if GetType ( factory ) = unit_human then
32289: LD_VAR 0 1
32293: PPUSH
32294: CALL_OW 247
32298: PUSH
32299: LD_INT 1
32301: EQUAL
32302: IFFALSE 32319
// factory := IsInUnit ( factory ) ;
32304: LD_ADDR_VAR 0 1
32308: PUSH
32309: LD_VAR 0 1
32313: PPUSH
32314: CALL_OW 310
32318: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
32319: LD_VAR 0 1
32323: PPUSH
32324: CALL_OW 266
32328: PUSH
32329: LD_INT 3
32331: NONEQUAL
32332: IFFALSE 32336
// exit ;
32334: GO 32571
// for i := 1 to Count ( factoryWaypoints ) do
32336: LD_ADDR_VAR 0 5
32340: PUSH
32341: DOUBLE
32342: LD_INT 1
32344: DEC
32345: ST_TO_ADDR
32346: LD_EXP 97
32350: PPUSH
32351: CALL 42375 0 1
32355: PUSH
32356: FOR_TO
32357: IFFALSE 32519
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
32359: LD_VAR 0 2
32363: PPUSH
32364: LD_VAR 0 3
32368: PPUSH
32369: CALL_OW 428
32373: PUSH
32374: LD_EXP 97
32378: PUSH
32379: LD_VAR 0 5
32383: ARRAY
32384: PUSH
32385: LD_INT 2
32387: ARRAY
32388: EQUAL
32389: IFFALSE 32421
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
32391: LD_ADDR_EXP 97
32395: PUSH
32396: LD_EXP 97
32400: PPUSH
32401: LD_VAR 0 5
32405: PPUSH
32406: CALL_OW 3
32410: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32411: CALL 32576 0 0
// exit ;
32415: POP
32416: POP
32417: GO 32571
// end else
32419: GO 32517
// if factory = factoryWaypoints [ i ] [ 2 ] then
32421: LD_VAR 0 1
32425: PUSH
32426: LD_EXP 97
32430: PUSH
32431: LD_VAR 0 5
32435: ARRAY
32436: PUSH
32437: LD_INT 2
32439: ARRAY
32440: EQUAL
32441: IFFALSE 32517
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
32443: LD_ADDR_EXP 97
32447: PUSH
32448: LD_EXP 97
32452: PPUSH
32453: LD_VAR 0 5
32457: PPUSH
32458: CALL_OW 3
32462: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
32463: LD_ADDR_EXP 97
32467: PUSH
32468: LD_EXP 97
32472: PPUSH
32473: LD_VAR 0 1
32477: PPUSH
32478: CALL_OW 255
32482: PUSH
32483: LD_VAR 0 1
32487: PUSH
32488: LD_VAR 0 2
32492: PUSH
32493: LD_VAR 0 3
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: PPUSH
32504: CALL 78351 0 2
32508: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32509: CALL 32576 0 0
// exit ;
32513: POP
32514: POP
32515: GO 32571
// end ; end ;
32517: GO 32356
32519: POP
32520: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
32521: LD_ADDR_EXP 97
32525: PUSH
32526: LD_EXP 97
32530: PPUSH
32531: LD_VAR 0 1
32535: PPUSH
32536: CALL_OW 255
32540: PUSH
32541: LD_VAR 0 1
32545: PUSH
32546: LD_VAR 0 2
32550: PUSH
32551: LD_VAR 0 3
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: PPUSH
32562: CALL 78351 0 2
32566: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32567: CALL 32576 0 0
// end ;
32571: LD_VAR 0 4
32575: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
32576: LD_INT 0
32578: PPUSH
32579: PPUSH
32580: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
32581: LD_STRING resetFactoryWaypoint();
32583: PPUSH
32584: CALL_OW 559
// if factoryWaypoints then
32588: LD_EXP 97
32592: IFFALSE 32713
// begin list := factoryWaypoints ;
32594: LD_ADDR_VAR 0 3
32598: PUSH
32599: LD_EXP 97
32603: ST_TO_ADDR
// for i := 1 to list do
32604: LD_ADDR_VAR 0 2
32608: PUSH
32609: DOUBLE
32610: LD_INT 1
32612: DEC
32613: ST_TO_ADDR
32614: LD_VAR 0 3
32618: PUSH
32619: FOR_TO
32620: IFFALSE 32711
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32622: LD_STRING setFactoryWaypointXY(
32624: PUSH
32625: LD_VAR 0 3
32629: PUSH
32630: LD_VAR 0 2
32634: ARRAY
32635: PUSH
32636: LD_INT 1
32638: ARRAY
32639: STR
32640: PUSH
32641: LD_STRING ,
32643: STR
32644: PUSH
32645: LD_VAR 0 3
32649: PUSH
32650: LD_VAR 0 2
32654: ARRAY
32655: PUSH
32656: LD_INT 2
32658: ARRAY
32659: STR
32660: PUSH
32661: LD_STRING ,
32663: STR
32664: PUSH
32665: LD_VAR 0 3
32669: PUSH
32670: LD_VAR 0 2
32674: ARRAY
32675: PUSH
32676: LD_INT 3
32678: ARRAY
32679: STR
32680: PUSH
32681: LD_STRING ,
32683: STR
32684: PUSH
32685: LD_VAR 0 3
32689: PUSH
32690: LD_VAR 0 2
32694: ARRAY
32695: PUSH
32696: LD_INT 4
32698: ARRAY
32699: STR
32700: PUSH
32701: LD_STRING )
32703: STR
32704: PPUSH
32705: CALL_OW 559
32709: GO 32619
32711: POP
32712: POP
// end ; end ;
32713: LD_VAR 0 1
32717: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
32718: LD_INT 0
32720: PPUSH
// if HexInfo ( x , y ) = warehouse then
32721: LD_VAR 0 2
32725: PPUSH
32726: LD_VAR 0 3
32730: PPUSH
32731: CALL_OW 428
32735: PUSH
32736: LD_VAR 0 1
32740: EQUAL
32741: IFFALSE 32768
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
32743: LD_ADDR_EXP 99
32747: PUSH
32748: LD_EXP 99
32752: PPUSH
32753: LD_VAR 0 1
32757: PPUSH
32758: LD_INT 0
32760: PPUSH
32761: CALL_OW 1
32765: ST_TO_ADDR
32766: GO 32819
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
32768: LD_ADDR_EXP 99
32772: PUSH
32773: LD_EXP 99
32777: PPUSH
32778: LD_VAR 0 1
32782: PPUSH
32783: LD_VAR 0 1
32787: PPUSH
32788: CALL_OW 255
32792: PUSH
32793: LD_VAR 0 1
32797: PUSH
32798: LD_VAR 0 2
32802: PUSH
32803: LD_VAR 0 3
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: PPUSH
32814: CALL_OW 1
32818: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
32819: CALL 32828 0 0
// end ;
32823: LD_VAR 0 4
32827: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
32828: LD_INT 0
32830: PPUSH
32831: PPUSH
32832: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
32833: LD_STRING resetWarehouseGatheringPoints();
32835: PPUSH
32836: CALL_OW 559
// if warehouseGatheringPoints then
32840: LD_EXP 99
32844: IFFALSE 32970
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
32846: LD_ADDR_VAR 0 3
32850: PUSH
32851: LD_EXP 99
32855: PPUSH
32856: CALL 82285 0 1
32860: ST_TO_ADDR
// for i := 1 to list do
32861: LD_ADDR_VAR 0 2
32865: PUSH
32866: DOUBLE
32867: LD_INT 1
32869: DEC
32870: ST_TO_ADDR
32871: LD_VAR 0 3
32875: PUSH
32876: FOR_TO
32877: IFFALSE 32968
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32879: LD_STRING setWarehouseGatheringPointXY(
32881: PUSH
32882: LD_VAR 0 3
32886: PUSH
32887: LD_VAR 0 2
32891: ARRAY
32892: PUSH
32893: LD_INT 1
32895: ARRAY
32896: STR
32897: PUSH
32898: LD_STRING ,
32900: STR
32901: PUSH
32902: LD_VAR 0 3
32906: PUSH
32907: LD_VAR 0 2
32911: ARRAY
32912: PUSH
32913: LD_INT 2
32915: ARRAY
32916: STR
32917: PUSH
32918: LD_STRING ,
32920: STR
32921: PUSH
32922: LD_VAR 0 3
32926: PUSH
32927: LD_VAR 0 2
32931: ARRAY
32932: PUSH
32933: LD_INT 3
32935: ARRAY
32936: STR
32937: PUSH
32938: LD_STRING ,
32940: STR
32941: PUSH
32942: LD_VAR 0 3
32946: PUSH
32947: LD_VAR 0 2
32951: ARRAY
32952: PUSH
32953: LD_INT 4
32955: ARRAY
32956: STR
32957: PUSH
32958: LD_STRING )
32960: STR
32961: PPUSH
32962: CALL_OW 559
32966: GO 32876
32968: POP
32969: POP
// end ; end ;
32970: LD_VAR 0 1
32974: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
32975: LD_EXP 99
32979: IFFALSE 33674
32981: GO 32983
32983: DISABLE
32984: LD_INT 0
32986: PPUSH
32987: PPUSH
32988: PPUSH
32989: PPUSH
32990: PPUSH
32991: PPUSH
32992: PPUSH
32993: PPUSH
32994: PPUSH
// begin enable ;
32995: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
32996: LD_ADDR_VAR 0 3
33000: PUSH
33001: LD_EXP 99
33005: PPUSH
33006: CALL 82285 0 1
33010: ST_TO_ADDR
// if not list then
33011: LD_VAR 0 3
33015: NOT
33016: IFFALSE 33020
// exit ;
33018: GO 33674
// for i := 1 to list do
33020: LD_ADDR_VAR 0 1
33024: PUSH
33025: DOUBLE
33026: LD_INT 1
33028: DEC
33029: ST_TO_ADDR
33030: LD_VAR 0 3
33034: PUSH
33035: FOR_TO
33036: IFFALSE 33672
// begin depot := list [ i ] [ 2 ] ;
33038: LD_ADDR_VAR 0 8
33042: PUSH
33043: LD_VAR 0 3
33047: PUSH
33048: LD_VAR 0 1
33052: ARRAY
33053: PUSH
33054: LD_INT 2
33056: ARRAY
33057: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33058: LD_ADDR_VAR 0 5
33062: PUSH
33063: LD_VAR 0 3
33067: PUSH
33068: LD_VAR 0 1
33072: ARRAY
33073: PUSH
33074: LD_INT 1
33076: ARRAY
33077: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33078: LD_VAR 0 8
33082: PPUSH
33083: CALL_OW 301
33087: IFTRUE 33106
33089: PUSH
33090: LD_VAR 0 5
33094: PUSH
33095: LD_VAR 0 8
33099: PPUSH
33100: CALL_OW 255
33104: NONEQUAL
33105: OR
33106: IFFALSE 33135
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33108: LD_ADDR_EXP 99
33112: PUSH
33113: LD_EXP 99
33117: PPUSH
33118: LD_VAR 0 8
33122: PPUSH
33123: LD_INT 0
33125: PPUSH
33126: CALL_OW 1
33130: ST_TO_ADDR
// exit ;
33131: POP
33132: POP
33133: GO 33674
// end ; x := list [ i ] [ 3 ] ;
33135: LD_ADDR_VAR 0 6
33139: PUSH
33140: LD_VAR 0 3
33144: PUSH
33145: LD_VAR 0 1
33149: ARRAY
33150: PUSH
33151: LD_INT 3
33153: ARRAY
33154: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
33155: LD_ADDR_VAR 0 7
33159: PUSH
33160: LD_VAR 0 3
33164: PUSH
33165: LD_VAR 0 1
33169: ARRAY
33170: PUSH
33171: LD_INT 4
33173: ARRAY
33174: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
33175: LD_ADDR_VAR 0 9
33179: PUSH
33180: LD_VAR 0 6
33184: PPUSH
33185: LD_VAR 0 7
33189: PPUSH
33190: LD_INT 16
33192: PPUSH
33193: CALL 80859 0 3
33197: ST_TO_ADDR
// if not cratesNearbyPoint then
33198: LD_VAR 0 9
33202: NOT
33203: IFFALSE 33209
// exit ;
33205: POP
33206: POP
33207: GO 33674
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
33209: LD_ADDR_VAR 0 4
33213: PUSH
33214: LD_INT 22
33216: PUSH
33217: LD_VAR 0 5
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 3
33228: PUSH
33229: LD_INT 60
33231: PUSH
33232: EMPTY
33233: LIST
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 91
33241: PUSH
33242: LD_VAR 0 8
33246: PUSH
33247: LD_INT 6
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 2
33257: PUSH
33258: LD_INT 25
33260: PUSH
33261: LD_INT 2
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 25
33270: PUSH
33271: LD_INT 16
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: LIST
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: PPUSH
33289: CALL_OW 69
33293: PUSH
33294: LD_VAR 0 8
33298: PPUSH
33299: CALL_OW 313
33303: PPUSH
33304: LD_INT 3
33306: PUSH
33307: LD_INT 60
33309: PUSH
33310: EMPTY
33311: LIST
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 2
33319: PUSH
33320: LD_INT 25
33322: PUSH
33323: LD_INT 2
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 25
33332: PUSH
33333: LD_INT 16
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: LIST
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PPUSH
33349: CALL_OW 72
33353: UNION
33354: ST_TO_ADDR
// if tmp then
33355: LD_VAR 0 4
33359: IFFALSE 33439
// begin tmp := ShrinkArray ( tmp , 3 ) ;
33361: LD_ADDR_VAR 0 4
33365: PUSH
33366: LD_VAR 0 4
33370: PPUSH
33371: LD_INT 3
33373: PPUSH
33374: CALL 78666 0 2
33378: ST_TO_ADDR
// for j in tmp do
33379: LD_ADDR_VAR 0 2
33383: PUSH
33384: LD_VAR 0 4
33388: PUSH
33389: FOR_IN
33390: IFFALSE 33433
// begin if IsInUnit ( j ) then
33392: LD_VAR 0 2
33396: PPUSH
33397: CALL_OW 310
33401: IFFALSE 33412
// ComExit ( j ) ;
33403: LD_VAR 0 2
33407: PPUSH
33408: CALL 78749 0 1
// AddComCollect ( j , x , y ) ;
33412: LD_VAR 0 2
33416: PPUSH
33417: LD_VAR 0 6
33421: PPUSH
33422: LD_VAR 0 7
33426: PPUSH
33427: CALL_OW 177
// end ;
33431: GO 33389
33433: POP
33434: POP
// exit ;
33435: POP
33436: POP
33437: GO 33674
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
33439: LD_ADDR_VAR 0 4
33443: PUSH
33444: LD_INT 22
33446: PUSH
33447: LD_VAR 0 5
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 91
33458: PUSH
33459: LD_VAR 0 8
33463: PUSH
33464: LD_INT 8
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 2
33474: PUSH
33475: LD_INT 34
33477: PUSH
33478: LD_INT 12
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 34
33487: PUSH
33488: LD_INT 51
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 34
33497: PUSH
33498: LD_INT 32
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 34
33507: PUSH
33508: LD_INT 89
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: LIST
33526: PPUSH
33527: CALL_OW 69
33531: ST_TO_ADDR
// if tmp then
33532: LD_VAR 0 4
33536: IFFALSE 33670
// begin for j in tmp do
33538: LD_ADDR_VAR 0 2
33542: PUSH
33543: LD_VAR 0 4
33547: PUSH
33548: FOR_IN
33549: IFFALSE 33668
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
33551: LD_VAR 0 2
33555: PPUSH
33556: CALL_OW 262
33560: PUSH
33561: LD_INT 3
33563: EQUAL
33564: IFTRUE 33581
33566: PUSH
33567: LD_VAR 0 2
33571: PPUSH
33572: CALL_OW 261
33576: PUSH
33577: LD_INT 20
33579: GREATER
33580: OR
33581: IFFALSE 33595
33583: PUSH
33584: LD_VAR 0 2
33588: PPUSH
33589: CALL_OW 314
33593: NOT
33594: AND
33595: IFFALSE 33625
33597: PUSH
33598: LD_VAR 0 2
33602: PPUSH
33603: CALL_OW 263
33607: PUSH
33608: LD_INT 1
33610: NONEQUAL
33611: IFTRUE 33624
33613: PUSH
33614: LD_VAR 0 2
33618: PPUSH
33619: CALL_OW 311
33623: OR
33624: AND
33625: IFFALSE 33666
// begin ComCollect ( j , x , y ) ;
33627: LD_VAR 0 2
33631: PPUSH
33632: LD_VAR 0 6
33636: PPUSH
33637: LD_VAR 0 7
33641: PPUSH
33642: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
33646: LD_VAR 0 2
33650: PPUSH
33651: LD_VAR 0 8
33655: PPUSH
33656: CALL_OW 172
// exit ;
33660: POP
33661: POP
33662: POP
33663: POP
33664: GO 33674
// end ;
33666: GO 33548
33668: POP
33669: POP
// end ; end ;
33670: GO 33035
33672: POP
33673: POP
// end ; end_of_file
33674: PPOPN 9
33676: END
// export function SOS_UnitDestroyed ( un ) ; begin
33677: LD_INT 0
33679: PPUSH
// ComRadiation ( un ) ;
33680: LD_VAR 0 1
33684: PPUSH
33685: CALL 34847 0 1
// end ;
33689: LD_VAR 0 2
33693: RET
// export function SOS_UnitKamikazed ( un ) ; begin
33694: LD_INT 0
33696: PPUSH
// ComRadiation ( un ) ;
33697: LD_VAR 0 1
33701: PPUSH
33702: CALL 34847 0 1
// end ;
33706: LD_VAR 0 2
33710: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33711: LD_INT 0
33713: PPUSH
// end ;
33714: LD_VAR 0 4
33718: RET
// export function SOS_Command ( cmd ) ; begin
33719: LD_INT 0
33721: PPUSH
// end ;
33722: LD_VAR 0 2
33726: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33727: LD_INT 0
33729: PPUSH
// end ;
33730: LD_VAR 0 6
33734: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
33735: LD_INT 0
33737: PPUSH
33738: PPUSH
33739: PPUSH
33740: PPUSH
33741: PPUSH
// if not vehicle or not factory then
33742: LD_VAR 0 1
33746: NOT
33747: IFTRUE 33756
33749: PUSH
33750: LD_VAR 0 2
33754: NOT
33755: OR
33756: IFFALSE 33760
// exit ;
33758: GO 34422
// weapon := GetWeapon ( vehicle ) ;
33760: LD_ADDR_VAR 0 7
33764: PUSH
33765: LD_VAR 0 1
33769: PPUSH
33770: CALL_OW 264
33774: ST_TO_ADDR
// if weapon = ar_miner then
33775: LD_VAR 0 7
33779: PUSH
33780: LD_INT 81
33782: EQUAL
33783: IFFALSE 33840
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
33785: LD_ADDR_EXP 108
33789: PUSH
33790: LD_EXP 108
33794: PPUSH
33795: LD_EXP 108
33799: PUSH
33800: LD_INT 1
33802: PLUS
33803: PPUSH
33804: LD_VAR 0 1
33808: PPUSH
33809: CALL_OW 1
33813: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
33814: LD_ADDR_EXP 109
33818: PUSH
33819: LD_EXP 109
33823: PPUSH
33824: LD_EXP 109
33828: PUSH
33829: LD_INT 1
33831: PLUS
33832: PPUSH
33833: EMPTY
33834: PPUSH
33835: CALL_OW 1
33839: ST_TO_ADDR
// end ; if not factoryWaypoints then
33840: LD_EXP 97
33844: NOT
33845: IFFALSE 33849
// exit ;
33847: GO 34422
// for i := 1 to Count ( factoryWaypoints ) do
33849: LD_ADDR_VAR 0 4
33853: PUSH
33854: DOUBLE
33855: LD_INT 1
33857: DEC
33858: ST_TO_ADDR
33859: LD_EXP 97
33863: PPUSH
33864: CALL 42375 0 1
33868: PUSH
33869: FOR_TO
33870: IFFALSE 34420
// if factoryWaypoints [ i ] [ 2 ] = factory then
33872: LD_EXP 97
33876: PUSH
33877: LD_VAR 0 4
33881: ARRAY
33882: PUSH
33883: LD_INT 2
33885: ARRAY
33886: PUSH
33887: LD_VAR 0 2
33891: EQUAL
33892: IFFALSE 34418
// begin if GetControl ( vehicle ) = control_manual then
33894: LD_VAR 0 1
33898: PPUSH
33899: CALL_OW 263
33903: PUSH
33904: LD_INT 1
33906: EQUAL
33907: IFFALSE 34271
// begin driver := IsDrivenBy ( vehicle ) ;
33909: LD_ADDR_VAR 0 5
33913: PUSH
33914: LD_VAR 0 1
33918: PPUSH
33919: CALL_OW 311
33923: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
33924: LD_VAR 0 5
33928: PUSH
33929: LD_EXP 98
33933: IN
33934: IFTRUE 33948
33936: PUSH
33937: LD_VAR 0 1
33941: PUSH
33942: LD_EXP 98
33946: IN
33947: OR
33948: IFFALSE 33954
// exit ;
33950: POP
33951: POP
33952: GO 34422
// if not HasTask ( driver ) then
33954: LD_VAR 0 5
33958: PPUSH
33959: CALL_OW 314
33963: NOT
33964: IFFALSE 34269
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
33966: LD_ADDR_EXP 98
33970: PUSH
33971: LD_EXP 98
33975: PPUSH
33976: LD_VAR 0 5
33980: PPUSH
33981: CALL 78351 0 2
33985: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
33986: LD_ADDR_EXP 98
33990: PUSH
33991: LD_EXP 98
33995: PPUSH
33996: LD_VAR 0 1
34000: PPUSH
34001: CALL 78351 0 2
34005: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
34006: LD_ADDR_VAR 0 6
34010: PUSH
34011: LD_EXP 97
34015: PUSH
34016: LD_VAR 0 4
34020: ARRAY
34021: PUSH
34022: LD_INT 3
34024: ARRAY
34025: PPUSH
34026: LD_EXP 97
34030: PUSH
34031: LD_VAR 0 4
34035: ARRAY
34036: PUSH
34037: LD_INT 4
34039: ARRAY
34040: PPUSH
34041: CALL_OW 428
34045: ST_TO_ADDR
// if hex then
34046: LD_VAR 0 6
34050: IFFALSE 34068
// ComMoveUnit ( driver , hex ) else
34052: LD_VAR 0 5
34056: PPUSH
34057: LD_VAR 0 6
34061: PPUSH
34062: CALL_OW 112
34066: GO 34152
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
34068: LD_VAR 0 1
34072: PPUSH
34073: LD_EXP 97
34077: PUSH
34078: LD_VAR 0 4
34082: ARRAY
34083: PUSH
34084: LD_INT 3
34086: ARRAY
34087: PPUSH
34088: LD_EXP 97
34092: PUSH
34093: LD_VAR 0 4
34097: ARRAY
34098: PUSH
34099: LD_INT 4
34101: ARRAY
34102: PPUSH
34103: CALL_OW 297
34107: PUSH
34108: LD_INT 0
34110: GREATER
34111: IFFALSE 34152
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
34113: LD_VAR 0 5
34117: PPUSH
34118: LD_EXP 97
34122: PUSH
34123: LD_VAR 0 4
34127: ARRAY
34128: PUSH
34129: LD_INT 3
34131: ARRAY
34132: PPUSH
34133: LD_EXP 97
34137: PUSH
34138: LD_VAR 0 4
34142: ARRAY
34143: PUSH
34144: LD_INT 4
34146: ARRAY
34147: PPUSH
34148: CALL_OW 111
// AddComExitVehicle ( driver ) ;
34152: LD_VAR 0 5
34156: PPUSH
34157: CALL_OW 181
// if Multiplayer then
34161: LD_OWVAR 4
34165: IFFALSE 34214
// begin repeat wait ( 10 ) ;
34167: LD_INT 10
34169: PPUSH
34170: CALL_OW 67
// until not IsInUnit ( driver ) ;
34174: LD_VAR 0 5
34178: PPUSH
34179: CALL_OW 310
34183: NOT
34184: IFFALSE 34167
// if not HasTask ( driver ) then
34186: LD_VAR 0 5
34190: PPUSH
34191: CALL_OW 314
34195: NOT
34196: IFFALSE 34212
// ComEnterUnit ( driver , factory ) ;
34198: LD_VAR 0 5
34202: PPUSH
34203: LD_VAR 0 2
34207: PPUSH
34208: CALL_OW 120
// end else
34212: GO 34228
// AddComEnterUnit ( driver , factory ) ;
34214: LD_VAR 0 5
34218: PPUSH
34219: LD_VAR 0 2
34223: PPUSH
34224: CALL_OW 180
// wait ( 0 0$1 ) ;
34228: LD_INT 35
34230: PPUSH
34231: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
34235: LD_ADDR_EXP 98
34239: PUSH
34240: LD_EXP 98
34244: PUSH
34245: LD_VAR 0 5
34249: DIFF
34250: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
34251: LD_ADDR_EXP 98
34255: PUSH
34256: LD_EXP 98
34260: PUSH
34261: LD_VAR 0 1
34265: DIFF
34266: ST_TO_ADDR
// break ;
34267: GO 34420
// end ; end else
34269: GO 34418
// if GetControl ( vehicle ) = control_remote then
34271: LD_VAR 0 1
34275: PPUSH
34276: CALL_OW 263
34280: PUSH
34281: LD_INT 2
34283: EQUAL
34284: IFFALSE 34370
// begin wait ( 0 0$2 ) ;
34286: LD_INT 70
34288: PPUSH
34289: CALL_OW 67
// repeat wait ( 10 ) ;
34293: LD_INT 10
34295: PPUSH
34296: CALL_OW 67
// Connect ( vehicle ) ;
34300: LD_VAR 0 1
34304: PPUSH
34305: CALL 48653 0 1
// until IsControledBy ( vehicle ) ;
34309: LD_VAR 0 1
34313: PPUSH
34314: CALL_OW 312
34318: IFFALSE 34293
// wait ( 10 ) ;
34320: LD_INT 10
34322: PPUSH
34323: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
34327: LD_VAR 0 1
34331: PPUSH
34332: LD_EXP 97
34336: PUSH
34337: LD_VAR 0 4
34341: ARRAY
34342: PUSH
34343: LD_INT 3
34345: ARRAY
34346: PPUSH
34347: LD_EXP 97
34351: PUSH
34352: LD_VAR 0 4
34356: ARRAY
34357: PUSH
34358: LD_INT 4
34360: ARRAY
34361: PPUSH
34362: CALL_OW 111
// break ;
34366: GO 34420
// end else
34368: GO 34418
// begin wait ( 0 0$3 ) ;
34370: LD_INT 105
34372: PPUSH
34373: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
34377: LD_VAR 0 1
34381: PPUSH
34382: LD_EXP 97
34386: PUSH
34387: LD_VAR 0 4
34391: ARRAY
34392: PUSH
34393: LD_INT 3
34395: ARRAY
34396: PPUSH
34397: LD_EXP 97
34401: PUSH
34402: LD_VAR 0 4
34406: ARRAY
34407: PUSH
34408: LD_INT 4
34410: ARRAY
34411: PPUSH
34412: CALL_OW 111
// break ;
34416: GO 34420
// end ; end ;
34418: GO 33869
34420: POP
34421: POP
// end ;
34422: LD_VAR 0 3
34426: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34427: LD_INT 0
34429: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34430: LD_VAR 0 1
34434: PUSH
34435: LD_INT 250
34437: EQUAL
34438: IFFALSE 34455
34440: PUSH
34441: LD_VAR 0 2
34445: PPUSH
34446: CALL_OW 264
34450: PUSH
34451: LD_INT 81
34453: EQUAL
34454: AND
34455: IFFALSE 34476
// MinerPlaceMine ( unit , x , y ) ;
34457: LD_VAR 0 2
34461: PPUSH
34462: LD_VAR 0 4
34466: PPUSH
34467: LD_VAR 0 5
34471: PPUSH
34472: CALL 37822 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34476: LD_VAR 0 1
34480: PUSH
34481: LD_INT 251
34483: EQUAL
34484: IFFALSE 34501
34486: PUSH
34487: LD_VAR 0 2
34491: PPUSH
34492: CALL_OW 264
34496: PUSH
34497: LD_INT 81
34499: EQUAL
34500: AND
34501: IFFALSE 34522
// MinerDetonateMine ( unit , x , y ) ;
34503: LD_VAR 0 2
34507: PPUSH
34508: LD_VAR 0 4
34512: PPUSH
34513: LD_VAR 0 5
34517: PPUSH
34518: CALL 38229 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34522: LD_VAR 0 1
34526: PUSH
34527: LD_INT 252
34529: EQUAL
34530: IFFALSE 34547
34532: PUSH
34533: LD_VAR 0 2
34537: PPUSH
34538: CALL_OW 264
34542: PUSH
34543: LD_INT 81
34545: EQUAL
34546: AND
34547: IFFALSE 34568
// MinerCreateMinefield ( unit , x , y ) ;
34549: LD_VAR 0 2
34553: PPUSH
34554: LD_VAR 0 4
34558: PPUSH
34559: LD_VAR 0 5
34563: PPUSH
34564: CALL 38461 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34568: LD_VAR 0 1
34572: PUSH
34573: LD_INT 253
34575: EQUAL
34576: IFFALSE 34593
34578: PUSH
34579: LD_VAR 0 2
34583: PPUSH
34584: CALL_OW 257
34588: PUSH
34589: LD_INT 5
34591: EQUAL
34592: AND
34593: IFFALSE 34614
// ComBinocular ( unit , x , y ) ;
34595: LD_VAR 0 2
34599: PPUSH
34600: LD_VAR 0 4
34604: PPUSH
34605: LD_VAR 0 5
34609: PPUSH
34610: CALL 38836 0 3
// if selectedUnit then
34614: LD_VAR 0 3
34618: IFFALSE 34678
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34620: LD_VAR 0 1
34624: PUSH
34625: LD_INT 254
34627: EQUAL
34628: IFFALSE 34645
34630: PUSH
34631: LD_VAR 0 2
34635: PPUSH
34636: CALL_OW 264
34640: PUSH
34641: LD_INT 99
34643: EQUAL
34644: AND
34645: IFFALSE 34662
34647: PUSH
34648: LD_VAR 0 3
34652: PPUSH
34653: CALL_OW 263
34657: PUSH
34658: LD_INT 3
34660: EQUAL
34661: AND
34662: IFFALSE 34678
// HackDestroyVehicle ( unit , selectedUnit ) ;
34664: LD_VAR 0 2
34668: PPUSH
34669: LD_VAR 0 3
34673: PPUSH
34674: CALL 37012 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34678: LD_VAR 0 1
34682: PUSH
34683: LD_INT 255
34685: EQUAL
34686: IFFALSE 34710
34688: PUSH
34689: LD_VAR 0 2
34693: PPUSH
34694: CALL_OW 264
34698: PUSH
34699: LD_INT 14
34701: PUSH
34702: LD_INT 53
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: IN
34709: AND
34710: IFFALSE 34728
34712: PUSH
34713: LD_VAR 0 4
34717: PPUSH
34718: LD_VAR 0 5
34722: PPUSH
34723: CALL_OW 488
34727: AND
34728: IFFALSE 34752
// CutTreeXYR ( unit , x , y , 12 ) ;
34730: LD_VAR 0 2
34734: PPUSH
34735: LD_VAR 0 4
34739: PPUSH
34740: LD_VAR 0 5
34744: PPUSH
34745: LD_INT 12
34747: PPUSH
34748: CALL 34943 0 4
// if cmd = 256 then
34752: LD_VAR 0 1
34756: PUSH
34757: LD_INT 256
34759: EQUAL
34760: IFFALSE 34781
// SetFactoryWaypoint ( unit , x , y ) ;
34762: LD_VAR 0 2
34766: PPUSH
34767: LD_VAR 0 4
34771: PPUSH
34772: LD_VAR 0 5
34776: PPUSH
34777: CALL 32222 0 3
// if cmd = 257 then
34781: LD_VAR 0 1
34785: PUSH
34786: LD_INT 257
34788: EQUAL
34789: IFFALSE 34810
// SetWarehouseGatheringPoint ( unit , x , y ) ;
34791: LD_VAR 0 2
34795: PPUSH
34796: LD_VAR 0 4
34800: PPUSH
34801: LD_VAR 0 5
34805: PPUSH
34806: CALL 32718 0 3
// if cmd = 258 then
34810: LD_VAR 0 1
34814: PUSH
34815: LD_INT 258
34817: EQUAL
34818: IFFALSE 34842
// BurnTreeXYR ( unit , x , y , 8 ) ;
34820: LD_VAR 0 2
34824: PPUSH
34825: LD_VAR 0 4
34829: PPUSH
34830: LD_VAR 0 5
34834: PPUSH
34835: LD_INT 8
34837: PPUSH
34838: CALL 35365 0 4
// end ;
34842: LD_VAR 0 6
34846: RET
// export function ComRadiation ( un ) ; var eff ; begin
34847: LD_INT 0
34849: PPUSH
34850: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
34851: LD_VAR 0 1
34855: PPUSH
34856: CALL_OW 264
34860: PUSH
34861: LD_INT 91
34863: NONEQUAL
34864: IFFALSE 34868
// exit ;
34866: GO 34938
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34868: LD_INT 68
34870: PPUSH
34871: LD_VAR 0 1
34875: PPUSH
34876: CALL_OW 255
34880: PPUSH
34881: CALL_OW 321
34885: PUSH
34886: LD_INT 2
34888: EQUAL
34889: IFFALSE 34901
// eff := 50 else
34891: LD_ADDR_VAR 0 3
34895: PUSH
34896: LD_INT 50
34898: ST_TO_ADDR
34899: GO 34909
// eff := 25 ;
34901: LD_ADDR_VAR 0 3
34905: PUSH
34906: LD_INT 25
34908: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34909: LD_VAR 0 1
34913: PPUSH
34914: CALL_OW 250
34918: PPUSH
34919: LD_VAR 0 1
34923: PPUSH
34924: CALL_OW 251
34928: PPUSH
34929: LD_VAR 0 3
34933: PPUSH
34934: CALL_OW 495
// end ;
34938: LD_VAR 0 2
34942: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34943: LD_INT 0
34945: PPUSH
34946: PPUSH
34947: PPUSH
34948: PPUSH
34949: PPUSH
34950: PPUSH
34951: PPUSH
34952: PPUSH
34953: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
34954: LD_VAR 0 1
34958: PPUSH
34959: CALL_OW 302
34963: NOT
34964: IFTRUE 34983
34966: PUSH
34967: LD_VAR 0 2
34971: PPUSH
34972: LD_VAR 0 3
34976: PPUSH
34977: CALL_OW 488
34981: NOT
34982: OR
34983: IFTRUE 34992
34985: PUSH
34986: LD_VAR 0 4
34990: NOT
34991: OR
34992: IFFALSE 34996
// exit ;
34994: GO 35360
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
34996: LD_VAR 0 1
35000: PPUSH
35001: CALL_OW 437
35005: PPUSH
35006: CALL 42375 0 1
35010: PUSH
35011: LD_INT 10
35013: GREATER
35014: IFFALSE 35018
// exit ;
35016: GO 35360
// list := [ ] ;
35018: LD_ADDR_VAR 0 13
35022: PUSH
35023: EMPTY
35024: ST_TO_ADDR
// if x - r < 0 then
35025: LD_VAR 0 2
35029: PUSH
35030: LD_VAR 0 4
35034: MINUS
35035: PUSH
35036: LD_INT 0
35038: LESS
35039: IFFALSE 35051
// min_x := 0 else
35041: LD_ADDR_VAR 0 7
35045: PUSH
35046: LD_INT 0
35048: ST_TO_ADDR
35049: GO 35067
// min_x := x - r ;
35051: LD_ADDR_VAR 0 7
35055: PUSH
35056: LD_VAR 0 2
35060: PUSH
35061: LD_VAR 0 4
35065: MINUS
35066: ST_TO_ADDR
// if y - r < 0 then
35067: LD_VAR 0 3
35071: PUSH
35072: LD_VAR 0 4
35076: MINUS
35077: PUSH
35078: LD_INT 0
35080: LESS
35081: IFFALSE 35093
// min_y := 0 else
35083: LD_ADDR_VAR 0 8
35087: PUSH
35088: LD_INT 0
35090: ST_TO_ADDR
35091: GO 35109
// min_y := y - r ;
35093: LD_ADDR_VAR 0 8
35097: PUSH
35098: LD_VAR 0 3
35102: PUSH
35103: LD_VAR 0 4
35107: MINUS
35108: ST_TO_ADDR
// max_x := x + r ;
35109: LD_ADDR_VAR 0 9
35113: PUSH
35114: LD_VAR 0 2
35118: PUSH
35119: LD_VAR 0 4
35123: PLUS
35124: ST_TO_ADDR
// max_y := y + r ;
35125: LD_ADDR_VAR 0 10
35129: PUSH
35130: LD_VAR 0 3
35134: PUSH
35135: LD_VAR 0 4
35139: PLUS
35140: ST_TO_ADDR
// for _x = min_x to max_x do
35141: LD_ADDR_VAR 0 11
35145: PUSH
35146: DOUBLE
35147: LD_VAR 0 7
35151: DEC
35152: ST_TO_ADDR
35153: LD_VAR 0 9
35157: PUSH
35158: FOR_TO
35159: IFFALSE 35278
// for _y = min_y to max_y do
35161: LD_ADDR_VAR 0 12
35165: PUSH
35166: DOUBLE
35167: LD_VAR 0 8
35171: DEC
35172: ST_TO_ADDR
35173: LD_VAR 0 10
35177: PUSH
35178: FOR_TO
35179: IFFALSE 35274
// begin if not ValidHex ( _x , _y ) then
35181: LD_VAR 0 11
35185: PPUSH
35186: LD_VAR 0 12
35190: PPUSH
35191: CALL_OW 488
35195: NOT
35196: IFFALSE 35200
// continue ;
35198: GO 35178
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35200: LD_VAR 0 11
35204: PPUSH
35205: LD_VAR 0 12
35209: PPUSH
35210: CALL_OW 351
35214: IFFALSE 35232
35216: PUSH
35217: LD_VAR 0 11
35221: PPUSH
35222: LD_VAR 0 12
35226: PPUSH
35227: CALL_OW 554
35231: AND
35232: IFFALSE 35272
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35234: LD_ADDR_VAR 0 13
35238: PUSH
35239: LD_VAR 0 13
35243: PPUSH
35244: LD_VAR 0 13
35248: PUSH
35249: LD_INT 1
35251: PLUS
35252: PPUSH
35253: LD_VAR 0 11
35257: PUSH
35258: LD_VAR 0 12
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PPUSH
35267: CALL_OW 2
35271: ST_TO_ADDR
// end ;
35272: GO 35178
35274: POP
35275: POP
35276: GO 35158
35278: POP
35279: POP
// if not list then
35280: LD_VAR 0 13
35284: NOT
35285: IFFALSE 35289
// exit ;
35287: GO 35360
// for i in list do
35289: LD_ADDR_VAR 0 6
35293: PUSH
35294: LD_VAR 0 13
35298: PUSH
35299: FOR_IN
35300: IFFALSE 35358
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35302: LD_VAR 0 1
35306: PPUSH
35307: LD_STRING M
35309: PUSH
35310: LD_VAR 0 6
35314: PUSH
35315: LD_INT 1
35317: ARRAY
35318: PUSH
35319: LD_VAR 0 6
35323: PUSH
35324: LD_INT 2
35326: ARRAY
35327: PUSH
35328: LD_INT 0
35330: PUSH
35331: LD_INT 0
35333: PUSH
35334: LD_INT 0
35336: PUSH
35337: LD_INT 0
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: PUSH
35349: EMPTY
35350: LIST
35351: PPUSH
35352: CALL_OW 447
35356: GO 35299
35358: POP
35359: POP
// end ;
35360: LD_VAR 0 5
35364: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
35365: LD_INT 0
35367: PPUSH
35368: PPUSH
35369: PPUSH
35370: PPUSH
35371: PPUSH
35372: PPUSH
35373: PPUSH
35374: PPUSH
35375: PPUSH
35376: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
35377: LD_VAR 0 1
35381: PPUSH
35382: CALL_OW 302
35386: NOT
35387: IFTRUE 35406
35389: PUSH
35390: LD_VAR 0 2
35394: PPUSH
35395: LD_VAR 0 3
35399: PPUSH
35400: CALL_OW 488
35404: NOT
35405: OR
35406: IFTRUE 35415
35408: PUSH
35409: LD_VAR 0 4
35413: NOT
35414: OR
35415: IFFALSE 35419
// exit ;
35417: GO 35958
// if Count ( GetTaskList ( flame ) ) > 10 then
35419: LD_VAR 0 1
35423: PPUSH
35424: CALL_OW 437
35428: PPUSH
35429: CALL 42375 0 1
35433: PUSH
35434: LD_INT 10
35436: GREATER
35437: IFFALSE 35441
// exit ;
35439: GO 35958
// list := [ ] ;
35441: LD_ADDR_VAR 0 13
35445: PUSH
35446: EMPTY
35447: ST_TO_ADDR
// if x - r < 0 then
35448: LD_VAR 0 2
35452: PUSH
35453: LD_VAR 0 4
35457: MINUS
35458: PUSH
35459: LD_INT 0
35461: LESS
35462: IFFALSE 35474
// min_x := 0 else
35464: LD_ADDR_VAR 0 7
35468: PUSH
35469: LD_INT 0
35471: ST_TO_ADDR
35472: GO 35490
// min_x := x - r ;
35474: LD_ADDR_VAR 0 7
35478: PUSH
35479: LD_VAR 0 2
35483: PUSH
35484: LD_VAR 0 4
35488: MINUS
35489: ST_TO_ADDR
// if y - r < 0 then
35490: LD_VAR 0 3
35494: PUSH
35495: LD_VAR 0 4
35499: MINUS
35500: PUSH
35501: LD_INT 0
35503: LESS
35504: IFFALSE 35516
// min_y := 0 else
35506: LD_ADDR_VAR 0 8
35510: PUSH
35511: LD_INT 0
35513: ST_TO_ADDR
35514: GO 35532
// min_y := y - r ;
35516: LD_ADDR_VAR 0 8
35520: PUSH
35521: LD_VAR 0 3
35525: PUSH
35526: LD_VAR 0 4
35530: MINUS
35531: ST_TO_ADDR
// max_x := x + r ;
35532: LD_ADDR_VAR 0 9
35536: PUSH
35537: LD_VAR 0 2
35541: PUSH
35542: LD_VAR 0 4
35546: PLUS
35547: ST_TO_ADDR
// max_y := y + r ;
35548: LD_ADDR_VAR 0 10
35552: PUSH
35553: LD_VAR 0 3
35557: PUSH
35558: LD_VAR 0 4
35562: PLUS
35563: ST_TO_ADDR
// for _x = min_x to max_x do
35564: LD_ADDR_VAR 0 11
35568: PUSH
35569: DOUBLE
35570: LD_VAR 0 7
35574: DEC
35575: ST_TO_ADDR
35576: LD_VAR 0 9
35580: PUSH
35581: FOR_TO
35582: IFFALSE 35701
// for _y = min_y to max_y do
35584: LD_ADDR_VAR 0 12
35588: PUSH
35589: DOUBLE
35590: LD_VAR 0 8
35594: DEC
35595: ST_TO_ADDR
35596: LD_VAR 0 10
35600: PUSH
35601: FOR_TO
35602: IFFALSE 35697
// begin if not ValidHex ( _x , _y ) then
35604: LD_VAR 0 11
35608: PPUSH
35609: LD_VAR 0 12
35613: PPUSH
35614: CALL_OW 488
35618: NOT
35619: IFFALSE 35623
// continue ;
35621: GO 35601
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35623: LD_VAR 0 11
35627: PPUSH
35628: LD_VAR 0 12
35632: PPUSH
35633: CALL_OW 351
35637: IFFALSE 35655
35639: PUSH
35640: LD_VAR 0 11
35644: PPUSH
35645: LD_VAR 0 12
35649: PPUSH
35650: CALL_OW 554
35654: AND
35655: IFFALSE 35695
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35657: LD_ADDR_VAR 0 13
35661: PUSH
35662: LD_VAR 0 13
35666: PPUSH
35667: LD_VAR 0 13
35671: PUSH
35672: LD_INT 1
35674: PLUS
35675: PPUSH
35676: LD_VAR 0 11
35680: PUSH
35681: LD_VAR 0 12
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PPUSH
35690: CALL_OW 2
35694: ST_TO_ADDR
// end ;
35695: GO 35601
35697: POP
35698: POP
35699: GO 35581
35701: POP
35702: POP
// if not list then
35703: LD_VAR 0 13
35707: NOT
35708: IFFALSE 35712
// exit ;
35710: GO 35958
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
35712: LD_ADDR_VAR 0 13
35716: PUSH
35717: LD_VAR 0 1
35721: PPUSH
35722: LD_VAR 0 13
35726: PPUSH
35727: LD_INT 1
35729: PPUSH
35730: LD_INT 1
35732: PPUSH
35733: CALL 45781 0 4
35737: ST_TO_ADDR
// ComStop ( flame ) ;
35738: LD_VAR 0 1
35742: PPUSH
35743: CALL_OW 141
// for i in list do
35747: LD_ADDR_VAR 0 6
35751: PUSH
35752: LD_VAR 0 13
35756: PUSH
35757: FOR_IN
35758: IFFALSE 35789
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
35760: LD_VAR 0 1
35764: PPUSH
35765: LD_VAR 0 6
35769: PUSH
35770: LD_INT 1
35772: ARRAY
35773: PPUSH
35774: LD_VAR 0 6
35778: PUSH
35779: LD_INT 2
35781: ARRAY
35782: PPUSH
35783: CALL_OW 176
35787: GO 35757
35789: POP
35790: POP
// repeat wait ( 0 0$1 ) ;
35791: LD_INT 35
35793: PPUSH
35794: CALL_OW 67
// task := GetTaskList ( flame ) ;
35798: LD_ADDR_VAR 0 14
35802: PUSH
35803: LD_VAR 0 1
35807: PPUSH
35808: CALL_OW 437
35812: ST_TO_ADDR
// if not task then
35813: LD_VAR 0 14
35817: NOT
35818: IFFALSE 35822
// exit ;
35820: GO 35958
// if task [ 1 ] [ 1 ] <> | then
35822: LD_VAR 0 14
35826: PUSH
35827: LD_INT 1
35829: ARRAY
35830: PUSH
35831: LD_INT 1
35833: ARRAY
35834: PUSH
35835: LD_STRING |
35837: NONEQUAL
35838: IFFALSE 35842
// exit ;
35840: GO 35958
// _x := task [ 1 ] [ 2 ] ;
35842: LD_ADDR_VAR 0 11
35846: PUSH
35847: LD_VAR 0 14
35851: PUSH
35852: LD_INT 1
35854: ARRAY
35855: PUSH
35856: LD_INT 2
35858: ARRAY
35859: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
35860: LD_ADDR_VAR 0 12
35864: PUSH
35865: LD_VAR 0 14
35869: PUSH
35870: LD_INT 1
35872: ARRAY
35873: PUSH
35874: LD_INT 3
35876: ARRAY
35877: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
35878: LD_VAR 0 11
35882: PPUSH
35883: LD_VAR 0 12
35887: PPUSH
35888: CALL_OW 351
35892: NOT
35893: IFTRUE 35912
35895: PUSH
35896: LD_VAR 0 11
35900: PPUSH
35901: LD_VAR 0 12
35905: PPUSH
35906: CALL_OW 554
35910: NOT
35911: OR
35912: IFFALSE 35946
// begin task := Delete ( task , 1 ) ;
35914: LD_ADDR_VAR 0 14
35918: PUSH
35919: LD_VAR 0 14
35923: PPUSH
35924: LD_INT 1
35926: PPUSH
35927: CALL_OW 3
35931: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
35932: LD_VAR 0 1
35936: PPUSH
35937: LD_VAR 0 14
35941: PPUSH
35942: CALL_OW 446
// end ; until not HasTask ( flame ) ;
35946: LD_VAR 0 1
35950: PPUSH
35951: CALL_OW 314
35955: NOT
35956: IFFALSE 35791
// end ;
35958: LD_VAR 0 5
35962: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35963: LD_EXP 101
35967: NOT
35968: IFFALSE 36018
35970: GO 35972
35972: DISABLE
// begin initHack := true ;
35973: LD_ADDR_EXP 101
35977: PUSH
35978: LD_INT 1
35980: ST_TO_ADDR
// hackTanks := [ ] ;
35981: LD_ADDR_EXP 102
35985: PUSH
35986: EMPTY
35987: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35988: LD_ADDR_EXP 103
35992: PUSH
35993: EMPTY
35994: ST_TO_ADDR
// hackLimit := 3 ;
35995: LD_ADDR_EXP 104
35999: PUSH
36000: LD_INT 3
36002: ST_TO_ADDR
// hackDist := 12 ;
36003: LD_ADDR_EXP 105
36007: PUSH
36008: LD_INT 12
36010: ST_TO_ADDR
// hackCounter := [ ] ;
36011: LD_ADDR_EXP 106
36015: PUSH
36016: EMPTY
36017: ST_TO_ADDR
// end ;
36018: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36019: LD_EXP 101
36023: IFFALSE 36041
36025: PUSH
36026: LD_INT 34
36028: PUSH
36029: LD_INT 99
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PPUSH
36036: CALL_OW 69
36040: AND
36041: IFFALSE 36294
36043: GO 36045
36045: DISABLE
36046: LD_INT 0
36048: PPUSH
36049: PPUSH
// begin enable ;
36050: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36051: LD_ADDR_VAR 0 1
36055: PUSH
36056: LD_INT 34
36058: PUSH
36059: LD_INT 99
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PPUSH
36066: CALL_OW 69
36070: PUSH
36071: FOR_IN
36072: IFFALSE 36292
// begin if not i in hackTanks then
36074: LD_VAR 0 1
36078: PUSH
36079: LD_EXP 102
36083: IN
36084: NOT
36085: IFFALSE 36168
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36087: LD_ADDR_EXP 102
36091: PUSH
36092: LD_EXP 102
36096: PPUSH
36097: LD_EXP 102
36101: PUSH
36102: LD_INT 1
36104: PLUS
36105: PPUSH
36106: LD_VAR 0 1
36110: PPUSH
36111: CALL_OW 1
36115: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36116: LD_ADDR_EXP 103
36120: PUSH
36121: LD_EXP 103
36125: PPUSH
36126: LD_EXP 103
36130: PUSH
36131: LD_INT 1
36133: PLUS
36134: PPUSH
36135: EMPTY
36136: PPUSH
36137: CALL_OW 1
36141: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36142: LD_ADDR_EXP 106
36146: PUSH
36147: LD_EXP 106
36151: PPUSH
36152: LD_EXP 106
36156: PUSH
36157: LD_INT 1
36159: PLUS
36160: PPUSH
36161: EMPTY
36162: PPUSH
36163: CALL_OW 1
36167: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36168: LD_VAR 0 1
36172: PPUSH
36173: CALL_OW 302
36177: NOT
36178: IFFALSE 36191
// begin HackUnlinkAll ( i ) ;
36180: LD_VAR 0 1
36184: PPUSH
36185: CALL 36297 0 1
// continue ;
36189: GO 36071
// end ; HackCheckCapturedStatus ( i ) ;
36191: LD_VAR 0 1
36195: PPUSH
36196: CALL 36742 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36200: LD_ADDR_VAR 0 2
36204: PUSH
36205: LD_INT 81
36207: PUSH
36208: LD_VAR 0 1
36212: PPUSH
36213: CALL_OW 255
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 33
36224: PUSH
36225: LD_INT 3
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 91
36234: PUSH
36235: LD_VAR 0 1
36239: PUSH
36240: LD_EXP 105
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 50
36252: PUSH
36253: EMPTY
36254: LIST
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: PPUSH
36262: CALL_OW 69
36266: ST_TO_ADDR
// if not tmp then
36267: LD_VAR 0 2
36271: NOT
36272: IFFALSE 36276
// continue ;
36274: GO 36071
// HackLink ( i , tmp ) ;
36276: LD_VAR 0 1
36280: PPUSH
36281: LD_VAR 0 2
36285: PPUSH
36286: CALL 36433 0 2
// end ;
36290: GO 36071
36292: POP
36293: POP
// end ;
36294: PPOPN 2
36296: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36297: LD_INT 0
36299: PPUSH
36300: PPUSH
36301: PPUSH
// if not hack in hackTanks then
36302: LD_VAR 0 1
36306: PUSH
36307: LD_EXP 102
36311: IN
36312: NOT
36313: IFFALSE 36317
// exit ;
36315: GO 36428
// index := GetElementIndex ( hackTanks , hack ) ;
36317: LD_ADDR_VAR 0 4
36321: PUSH
36322: LD_EXP 102
36326: PPUSH
36327: LD_VAR 0 1
36331: PPUSH
36332: CALL 45076 0 2
36336: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36337: LD_EXP 103
36341: PUSH
36342: LD_VAR 0 4
36346: ARRAY
36347: IFFALSE 36428
// begin for i in hackTanksCaptured [ index ] do
36349: LD_ADDR_VAR 0 3
36353: PUSH
36354: LD_EXP 103
36358: PUSH
36359: LD_VAR 0 4
36363: ARRAY
36364: PUSH
36365: FOR_IN
36366: IFFALSE 36392
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36368: LD_VAR 0 3
36372: PUSH
36373: LD_INT 1
36375: ARRAY
36376: PPUSH
36377: LD_VAR 0 3
36381: PUSH
36382: LD_INT 2
36384: ARRAY
36385: PPUSH
36386: CALL_OW 235
36390: GO 36365
36392: POP
36393: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36394: LD_ADDR_EXP 103
36398: PUSH
36399: LD_EXP 103
36403: PPUSH
36404: LD_VAR 0 4
36408: PPUSH
36409: EMPTY
36410: PPUSH
36411: CALL_OW 1
36415: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36416: LD_VAR 0 1
36420: PPUSH
36421: LD_INT 0
36423: PPUSH
36424: CALL_OW 505
// end ; end ;
36428: LD_VAR 0 2
36432: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36433: LD_INT 0
36435: PPUSH
36436: PPUSH
36437: PPUSH
// if not hack in hackTanks or not vehicles then
36438: LD_VAR 0 1
36442: PUSH
36443: LD_EXP 102
36447: IN
36448: NOT
36449: IFTRUE 36458
36451: PUSH
36452: LD_VAR 0 2
36456: NOT
36457: OR
36458: IFFALSE 36462
// exit ;
36460: GO 36737
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36462: LD_ADDR_VAR 0 2
36466: PUSH
36467: LD_VAR 0 1
36471: PPUSH
36472: LD_VAR 0 2
36476: PPUSH
36477: LD_INT 1
36479: PPUSH
36480: LD_INT 1
36482: PPUSH
36483: CALL 45728 0 4
36487: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36488: LD_ADDR_VAR 0 5
36492: PUSH
36493: LD_EXP 102
36497: PPUSH
36498: LD_VAR 0 1
36502: PPUSH
36503: CALL 45076 0 2
36507: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36508: LD_EXP 103
36512: PUSH
36513: LD_VAR 0 5
36517: ARRAY
36518: PUSH
36519: LD_EXP 104
36523: LESS
36524: IFFALSE 36713
// begin for i := 1 to vehicles do
36526: LD_ADDR_VAR 0 4
36530: PUSH
36531: DOUBLE
36532: LD_INT 1
36534: DEC
36535: ST_TO_ADDR
36536: LD_VAR 0 2
36540: PUSH
36541: FOR_TO
36542: IFFALSE 36711
// begin if hackTanksCaptured [ index ] = hackLimit then
36544: LD_EXP 103
36548: PUSH
36549: LD_VAR 0 5
36553: ARRAY
36554: PUSH
36555: LD_EXP 104
36559: EQUAL
36560: IFFALSE 36564
// break ;
36562: GO 36711
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36564: LD_ADDR_EXP 106
36568: PUSH
36569: LD_EXP 106
36573: PPUSH
36574: LD_VAR 0 5
36578: PPUSH
36579: LD_EXP 106
36583: PUSH
36584: LD_VAR 0 5
36588: ARRAY
36589: PUSH
36590: LD_INT 1
36592: PLUS
36593: PPUSH
36594: CALL_OW 1
36598: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36599: LD_ADDR_EXP 103
36603: PUSH
36604: LD_EXP 103
36608: PPUSH
36609: LD_VAR 0 5
36613: PUSH
36614: LD_EXP 103
36618: PUSH
36619: LD_VAR 0 5
36623: ARRAY
36624: PUSH
36625: LD_INT 1
36627: PLUS
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PPUSH
36633: LD_VAR 0 2
36637: PUSH
36638: LD_VAR 0 4
36642: ARRAY
36643: PUSH
36644: LD_VAR 0 2
36648: PUSH
36649: LD_VAR 0 4
36653: ARRAY
36654: PPUSH
36655: CALL_OW 255
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PPUSH
36664: CALL 45293 0 3
36668: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36669: LD_VAR 0 2
36673: PUSH
36674: LD_VAR 0 4
36678: ARRAY
36679: PPUSH
36680: LD_VAR 0 1
36684: PPUSH
36685: CALL_OW 255
36689: PPUSH
36690: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36694: LD_VAR 0 2
36698: PUSH
36699: LD_VAR 0 4
36703: ARRAY
36704: PPUSH
36705: CALL_OW 141
// end ;
36709: GO 36541
36711: POP
36712: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36713: LD_VAR 0 1
36717: PPUSH
36718: LD_EXP 103
36722: PUSH
36723: LD_VAR 0 5
36727: ARRAY
36728: PUSH
36729: LD_INT 0
36731: PLUS
36732: PPUSH
36733: CALL_OW 505
// end ;
36737: LD_VAR 0 3
36741: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36742: LD_INT 0
36744: PPUSH
36745: PPUSH
36746: PPUSH
36747: PPUSH
// if not hack in hackTanks then
36748: LD_VAR 0 1
36752: PUSH
36753: LD_EXP 102
36757: IN
36758: NOT
36759: IFFALSE 36763
// exit ;
36761: GO 37007
// index := GetElementIndex ( hackTanks , hack ) ;
36763: LD_ADDR_VAR 0 4
36767: PUSH
36768: LD_EXP 102
36772: PPUSH
36773: LD_VAR 0 1
36777: PPUSH
36778: CALL 45076 0 2
36782: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36783: LD_ADDR_VAR 0 3
36787: PUSH
36788: DOUBLE
36789: LD_EXP 103
36793: PUSH
36794: LD_VAR 0 4
36798: ARRAY
36799: INC
36800: ST_TO_ADDR
36801: LD_INT 1
36803: PUSH
36804: FOR_DOWNTO
36805: IFFALSE 36981
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36807: LD_ADDR_VAR 0 5
36811: PUSH
36812: LD_EXP 103
36816: PUSH
36817: LD_VAR 0 4
36821: ARRAY
36822: PUSH
36823: LD_VAR 0 3
36827: ARRAY
36828: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36829: LD_VAR 0 5
36833: PUSH
36834: LD_INT 1
36836: ARRAY
36837: PPUSH
36838: CALL_OW 302
36842: NOT
36843: IFTRUE 36871
36845: PUSH
36846: LD_VAR 0 5
36850: PUSH
36851: LD_INT 1
36853: ARRAY
36854: PPUSH
36855: CALL_OW 255
36859: PUSH
36860: LD_VAR 0 1
36864: PPUSH
36865: CALL_OW 255
36869: NONEQUAL
36870: OR
36871: IFFALSE 36979
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36873: LD_VAR 0 5
36877: PUSH
36878: LD_INT 1
36880: ARRAY
36881: PPUSH
36882: CALL_OW 305
36886: IFFALSE 36914
36888: PUSH
36889: LD_VAR 0 5
36893: PUSH
36894: LD_INT 1
36896: ARRAY
36897: PPUSH
36898: CALL_OW 255
36902: PUSH
36903: LD_VAR 0 1
36907: PPUSH
36908: CALL_OW 255
36912: EQUAL
36913: AND
36914: IFFALSE 36938
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36916: LD_VAR 0 5
36920: PUSH
36921: LD_INT 1
36923: ARRAY
36924: PPUSH
36925: LD_VAR 0 5
36929: PUSH
36930: LD_INT 2
36932: ARRAY
36933: PPUSH
36934: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36938: LD_ADDR_EXP 103
36942: PUSH
36943: LD_EXP 103
36947: PPUSH
36948: LD_VAR 0 4
36952: PPUSH
36953: LD_EXP 103
36957: PUSH
36958: LD_VAR 0 4
36962: ARRAY
36963: PPUSH
36964: LD_VAR 0 3
36968: PPUSH
36969: CALL_OW 3
36973: PPUSH
36974: CALL_OW 1
36978: ST_TO_ADDR
// end ; end ;
36979: GO 36804
36981: POP
36982: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36983: LD_VAR 0 1
36987: PPUSH
36988: LD_EXP 103
36992: PUSH
36993: LD_VAR 0 4
36997: ARRAY
36998: PUSH
36999: LD_INT 0
37001: PLUS
37002: PPUSH
37003: CALL_OW 505
// end ;
37007: LD_VAR 0 2
37011: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37012: LD_INT 0
37014: PPUSH
37015: PPUSH
37016: PPUSH
37017: PPUSH
// if not hack in hackTanks then
37018: LD_VAR 0 1
37022: PUSH
37023: LD_EXP 102
37027: IN
37028: NOT
37029: IFFALSE 37033
// exit ;
37031: GO 37118
// index := GetElementIndex ( hackTanks , hack ) ;
37033: LD_ADDR_VAR 0 5
37037: PUSH
37038: LD_EXP 102
37042: PPUSH
37043: LD_VAR 0 1
37047: PPUSH
37048: CALL 45076 0 2
37052: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37053: LD_ADDR_VAR 0 4
37057: PUSH
37058: DOUBLE
37059: LD_INT 1
37061: DEC
37062: ST_TO_ADDR
37063: LD_EXP 103
37067: PUSH
37068: LD_VAR 0 5
37072: ARRAY
37073: PUSH
37074: FOR_TO
37075: IFFALSE 37116
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37077: LD_EXP 103
37081: PUSH
37082: LD_VAR 0 5
37086: ARRAY
37087: PUSH
37088: LD_VAR 0 4
37092: ARRAY
37093: PUSH
37094: LD_INT 1
37096: ARRAY
37097: PUSH
37098: LD_VAR 0 2
37102: EQUAL
37103: IFFALSE 37114
// KillUnit ( vehicle ) ;
37105: LD_VAR 0 2
37109: PPUSH
37110: CALL_OW 66
37114: GO 37074
37116: POP
37117: POP
// end ;
37118: LD_VAR 0 3
37122: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
37123: LD_EXP 107
37127: NOT
37128: IFFALSE 37261
37130: GO 37132
37132: DISABLE
37133: LD_INT 0
37135: PPUSH
// begin initMiner := true ;
37136: LD_ADDR_EXP 107
37140: PUSH
37141: LD_INT 1
37143: ST_TO_ADDR
// minersList := [ ] ;
37144: LD_ADDR_EXP 108
37148: PUSH
37149: EMPTY
37150: ST_TO_ADDR
// minerMinesList := [ ] ;
37151: LD_ADDR_EXP 109
37155: PUSH
37156: EMPTY
37157: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
37158: LD_ADDR_EXP 110
37162: PUSH
37163: LD_INT 10
37165: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37166: LD_ADDR_VAR 0 1
37170: PUSH
37171: LD_INT 34
37173: PUSH
37174: LD_INT 81
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PPUSH
37181: CALL_OW 69
37185: PUSH
37186: FOR_IN
37187: IFFALSE 37259
// begin if not i in minersList then
37189: LD_VAR 0 1
37193: PUSH
37194: LD_EXP 108
37198: IN
37199: NOT
37200: IFFALSE 37257
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37202: LD_ADDR_EXP 108
37206: PUSH
37207: LD_EXP 108
37211: PPUSH
37212: LD_EXP 108
37216: PUSH
37217: LD_INT 1
37219: PLUS
37220: PPUSH
37221: LD_VAR 0 1
37225: PPUSH
37226: CALL_OW 1
37230: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37231: LD_ADDR_EXP 109
37235: PUSH
37236: LD_EXP 109
37240: PPUSH
37241: LD_EXP 109
37245: PUSH
37246: LD_INT 1
37248: PLUS
37249: PPUSH
37250: EMPTY
37251: PPUSH
37252: CALL_OW 1
37256: ST_TO_ADDR
// end end ;
37257: GO 37186
37259: POP
37260: POP
// end ;
37261: PPOPN 1
37263: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
37264: LD_EXP 107
37268: IFFALSE 37299
37270: PUSH
37271: LD_EXP 109
37275: PPUSH
37276: CALL 42375 0 1
37280: IFTRUE 37298
37282: PUSH
37283: LD_INT 34
37285: PUSH
37286: LD_INT 81
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PPUSH
37293: CALL_OW 69
37297: OR
37298: AND
37299: IFFALSE 37819
37301: GO 37303
37303: DISABLE
37304: LD_INT 0
37306: PPUSH
37307: PPUSH
37308: PPUSH
37309: PPUSH
// begin enable ;
37310: ENABLE
// for i := minerMinesList downto 1 do
37311: LD_ADDR_VAR 0 1
37315: PUSH
37316: DOUBLE
37317: LD_EXP 109
37321: INC
37322: ST_TO_ADDR
37323: LD_INT 1
37325: PUSH
37326: FOR_DOWNTO
37327: IFFALSE 37817
// begin side := GetSide ( minersList [ i ] ) ;
37329: LD_ADDR_VAR 0 3
37333: PUSH
37334: LD_EXP 108
37338: PUSH
37339: LD_VAR 0 1
37343: ARRAY
37344: PPUSH
37345: CALL_OW 255
37349: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
37350: LD_EXP 108
37354: PUSH
37355: LD_VAR 0 1
37359: ARRAY
37360: PPUSH
37361: CALL_OW 300
37365: IFFALSE 37386
37367: PUSH
37368: LD_VAR 0 3
37372: PUSH
37373: LD_OWVAR 2
37377: PUSH
37378: LD_INT 9
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: IN
37385: AND
37386: IFFALSE 37419
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
37388: LD_EXP 108
37392: PUSH
37393: LD_VAR 0 1
37397: ARRAY
37398: PPUSH
37399: LD_EXP 109
37403: PUSH
37404: LD_VAR 0 1
37408: ARRAY
37409: PPUSH
37410: CALL 42375 0 1
37414: PPUSH
37415: CALL_OW 505
// if not minerMinesList [ i ] then
37419: LD_EXP 109
37423: PUSH
37424: LD_VAR 0 1
37428: ARRAY
37429: NOT
37430: IFFALSE 37434
// continue ;
37432: GO 37326
// for j := minerMinesList [ i ] downto 1 do
37434: LD_ADDR_VAR 0 2
37438: PUSH
37439: DOUBLE
37440: LD_EXP 109
37444: PUSH
37445: LD_VAR 0 1
37449: ARRAY
37450: INC
37451: ST_TO_ADDR
37452: LD_INT 1
37454: PUSH
37455: FOR_DOWNTO
37456: IFFALSE 37813
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
37458: LD_EXP 108
37462: PUSH
37463: LD_VAR 0 1
37467: ARRAY
37468: PPUSH
37469: CALL_OW 301
37473: IFTRUE 37493
37475: PUSH
37476: LD_EXP 108
37480: PUSH
37481: LD_VAR 0 1
37485: ARRAY
37486: PPUSH
37487: CALL_OW 305
37491: NOT
37492: OR
37493: IFFALSE 37584
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37495: LD_EXP 109
37499: PUSH
37500: LD_VAR 0 1
37504: ARRAY
37505: PUSH
37506: LD_VAR 0 2
37510: ARRAY
37511: PUSH
37512: LD_INT 1
37514: ARRAY
37515: PPUSH
37516: LD_EXP 109
37520: PUSH
37521: LD_VAR 0 1
37525: ARRAY
37526: PUSH
37527: LD_VAR 0 2
37531: ARRAY
37532: PUSH
37533: LD_INT 2
37535: ARRAY
37536: PPUSH
37537: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37541: LD_ADDR_EXP 109
37545: PUSH
37546: LD_EXP 109
37550: PPUSH
37551: LD_VAR 0 1
37555: PPUSH
37556: LD_EXP 109
37560: PUSH
37561: LD_VAR 0 1
37565: ARRAY
37566: PPUSH
37567: LD_VAR 0 2
37571: PPUSH
37572: CALL_OW 3
37576: PPUSH
37577: CALL_OW 1
37581: ST_TO_ADDR
// continue ;
37582: GO 37455
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37584: LD_ADDR_VAR 0 4
37588: PUSH
37589: LD_EXP 109
37593: PUSH
37594: LD_VAR 0 1
37598: ARRAY
37599: PUSH
37600: LD_VAR 0 2
37604: ARRAY
37605: PUSH
37606: LD_INT 1
37608: ARRAY
37609: PPUSH
37610: LD_EXP 109
37614: PUSH
37615: LD_VAR 0 1
37619: ARRAY
37620: PUSH
37621: LD_VAR 0 2
37625: ARRAY
37626: PUSH
37627: LD_INT 2
37629: ARRAY
37630: PPUSH
37631: CALL_OW 428
37635: ST_TO_ADDR
// if not tmp then
37636: LD_VAR 0 4
37640: NOT
37641: IFFALSE 37645
// continue ;
37643: GO 37455
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37645: LD_VAR 0 4
37649: PUSH
37650: LD_INT 81
37652: PUSH
37653: LD_VAR 0 3
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PPUSH
37662: CALL_OW 69
37666: IN
37667: IFFALSE 37717
37669: PUSH
37670: LD_EXP 109
37674: PUSH
37675: LD_VAR 0 1
37679: ARRAY
37680: PUSH
37681: LD_VAR 0 2
37685: ARRAY
37686: PUSH
37687: LD_INT 1
37689: ARRAY
37690: PPUSH
37691: LD_EXP 109
37695: PUSH
37696: LD_VAR 0 1
37700: ARRAY
37701: PUSH
37702: LD_VAR 0 2
37706: ARRAY
37707: PUSH
37708: LD_INT 2
37710: ARRAY
37711: PPUSH
37712: CALL_OW 458
37716: AND
37717: IFFALSE 37811
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37719: LD_EXP 109
37723: PUSH
37724: LD_VAR 0 1
37728: ARRAY
37729: PUSH
37730: LD_VAR 0 2
37734: ARRAY
37735: PUSH
37736: LD_INT 1
37738: ARRAY
37739: PPUSH
37740: LD_EXP 109
37744: PUSH
37745: LD_VAR 0 1
37749: ARRAY
37750: PUSH
37751: LD_VAR 0 2
37755: ARRAY
37756: PUSH
37757: LD_INT 2
37759: ARRAY
37760: PPUSH
37761: LD_VAR 0 3
37765: PPUSH
37766: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37770: LD_ADDR_EXP 109
37774: PUSH
37775: LD_EXP 109
37779: PPUSH
37780: LD_VAR 0 1
37784: PPUSH
37785: LD_EXP 109
37789: PUSH
37790: LD_VAR 0 1
37794: ARRAY
37795: PPUSH
37796: LD_VAR 0 2
37800: PPUSH
37801: CALL_OW 3
37805: PPUSH
37806: CALL_OW 1
37810: ST_TO_ADDR
// end ; end ;
37811: GO 37455
37813: POP
37814: POP
// end ;
37815: GO 37326
37817: POP
37818: POP
// end ;
37819: PPOPN 4
37821: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
37822: LD_INT 0
37824: PPUSH
37825: PPUSH
37826: PPUSH
37827: PPUSH
// result := false ;
37828: LD_ADDR_VAR 0 4
37832: PUSH
37833: LD_INT 0
37835: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37836: LD_VAR 0 1
37840: PPUSH
37841: CALL_OW 264
37845: PUSH
37846: LD_INT 81
37848: EQUAL
37849: NOT
37850: IFFALSE 37854
// exit ;
37852: GO 38224
// side := GetSide ( unit ) ;
37854: LD_ADDR_VAR 0 6
37858: PUSH
37859: LD_VAR 0 1
37863: PPUSH
37864: CALL_OW 255
37868: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
37869: LD_ADDR_VAR 0 5
37873: PUSH
37874: LD_EXP 108
37878: PPUSH
37879: LD_VAR 0 1
37883: PPUSH
37884: CALL 45076 0 2
37888: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37889: LD_EXP 109
37893: PUSH
37894: LD_VAR 0 5
37898: ARRAY
37899: PUSH
37900: LD_EXP 110
37904: GREATEREQUAL
37905: IFFALSE 37909
// exit ;
37907: GO 38224
// ComMoveXY ( unit , x , y ) ;
37909: LD_VAR 0 1
37913: PPUSH
37914: LD_VAR 0 2
37918: PPUSH
37919: LD_VAR 0 3
37923: PPUSH
37924: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37928: LD_INT 35
37930: PPUSH
37931: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37935: LD_VAR 0 1
37939: PPUSH
37940: LD_VAR 0 2
37944: PPUSH
37945: LD_VAR 0 3
37949: PPUSH
37950: CALL 77132 0 3
37954: NOT
37955: IFFALSE 37968
37957: PUSH
37958: LD_VAR 0 1
37962: PPUSH
37963: CALL_OW 314
37967: AND
37968: IFFALSE 37972
// exit ;
37970: GO 38224
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37972: LD_VAR 0 2
37976: PPUSH
37977: LD_VAR 0 3
37981: PPUSH
37982: CALL_OW 428
37986: PUSH
37987: LD_VAR 0 1
37991: EQUAL
37992: IFFALSE 38006
37994: PUSH
37995: LD_VAR 0 1
37999: PPUSH
38000: CALL_OW 314
38004: NOT
38005: AND
38006: IFFALSE 37928
// if MineAtPos ( x , y ) then
38008: LD_VAR 0 2
38012: PPUSH
38013: LD_VAR 0 3
38017: PPUSH
38018: CALL_OW 458
38022: IFFALSE 38026
// exit ;
38024: GO 38224
// if your_side = side then
38026: LD_OWVAR 2
38030: PUSH
38031: LD_VAR 0 6
38035: EQUAL
38036: IFFALSE 38055
// PlaySoundXY ( x , y , PlantMine ) ;
38038: LD_VAR 0 2
38042: PPUSH
38043: LD_VAR 0 3
38047: PPUSH
38048: LD_STRING PlantMine
38050: PPUSH
38051: CALL_OW 366
// repeat wait ( 1 ) ;
38055: LD_INT 1
38057: PPUSH
38058: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
38062: LD_VAR 0 2
38066: PPUSH
38067: LD_VAR 0 3
38071: PPUSH
38072: LD_VAR 0 6
38076: PPUSH
38077: LD_INT 0
38079: PPUSH
38080: CALL_OW 454
38084: IFFALSE 38055
// if MineAtPos ( x , y ) then
38086: LD_VAR 0 2
38090: PPUSH
38091: LD_VAR 0 3
38095: PPUSH
38096: CALL_OW 458
38100: IFFALSE 38216
// begin for i in minerMinesList [ index ] do
38102: LD_ADDR_VAR 0 7
38106: PUSH
38107: LD_EXP 109
38111: PUSH
38112: LD_VAR 0 5
38116: ARRAY
38117: PUSH
38118: FOR_IN
38119: IFFALSE 38161
// if i [ 1 ] = x and i [ 2 ] = y then
38121: LD_VAR 0 7
38125: PUSH
38126: LD_INT 1
38128: ARRAY
38129: PUSH
38130: LD_VAR 0 2
38134: EQUAL
38135: IFFALSE 38153
38137: PUSH
38138: LD_VAR 0 7
38142: PUSH
38143: LD_INT 2
38145: ARRAY
38146: PUSH
38147: LD_VAR 0 3
38151: EQUAL
38152: AND
38153: IFFALSE 38159
// exit ;
38155: POP
38156: POP
38157: GO 38224
38159: GO 38118
38161: POP
38162: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38163: LD_ADDR_EXP 109
38167: PUSH
38168: LD_EXP 109
38172: PPUSH
38173: LD_VAR 0 5
38177: PUSH
38178: LD_EXP 109
38182: PUSH
38183: LD_VAR 0 5
38187: ARRAY
38188: PUSH
38189: LD_INT 1
38191: PLUS
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PPUSH
38197: LD_VAR 0 2
38201: PUSH
38202: LD_VAR 0 3
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PPUSH
38211: CALL 45293 0 3
38215: ST_TO_ADDR
// end ; result := true ;
38216: LD_ADDR_VAR 0 4
38220: PUSH
38221: LD_INT 1
38223: ST_TO_ADDR
// end ;
38224: LD_VAR 0 4
38228: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38229: LD_INT 0
38231: PPUSH
38232: PPUSH
38233: PPUSH
// if not unit in minersList then
38234: LD_VAR 0 1
38238: PUSH
38239: LD_EXP 108
38243: IN
38244: NOT
38245: IFFALSE 38249
// exit ;
38247: GO 38456
// index := GetElementIndex ( minersList , unit ) ;
38249: LD_ADDR_VAR 0 6
38253: PUSH
38254: LD_EXP 108
38258: PPUSH
38259: LD_VAR 0 1
38263: PPUSH
38264: CALL 45076 0 2
38268: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38269: LD_ADDR_VAR 0 5
38273: PUSH
38274: DOUBLE
38275: LD_EXP 109
38279: PUSH
38280: LD_VAR 0 6
38284: ARRAY
38285: INC
38286: ST_TO_ADDR
38287: LD_INT 1
38289: PUSH
38290: FOR_DOWNTO
38291: IFFALSE 38454
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38293: LD_EXP 109
38297: PUSH
38298: LD_VAR 0 6
38302: ARRAY
38303: PUSH
38304: LD_VAR 0 5
38308: ARRAY
38309: PUSH
38310: LD_INT 1
38312: ARRAY
38313: PPUSH
38314: LD_EXP 109
38318: PUSH
38319: LD_VAR 0 6
38323: ARRAY
38324: PUSH
38325: LD_VAR 0 5
38329: ARRAY
38330: PUSH
38331: LD_INT 2
38333: ARRAY
38334: PPUSH
38335: LD_VAR 0 2
38339: PPUSH
38340: LD_VAR 0 3
38344: PPUSH
38345: CALL_OW 298
38349: PUSH
38350: LD_INT 6
38352: LESS
38353: IFFALSE 38452
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38355: LD_EXP 109
38359: PUSH
38360: LD_VAR 0 6
38364: ARRAY
38365: PUSH
38366: LD_VAR 0 5
38370: ARRAY
38371: PUSH
38372: LD_INT 1
38374: ARRAY
38375: PPUSH
38376: LD_EXP 109
38380: PUSH
38381: LD_VAR 0 6
38385: ARRAY
38386: PUSH
38387: LD_VAR 0 5
38391: ARRAY
38392: PUSH
38393: LD_INT 2
38395: ARRAY
38396: PPUSH
38397: LD_VAR 0 1
38401: PPUSH
38402: CALL_OW 255
38406: PPUSH
38407: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38411: LD_ADDR_EXP 109
38415: PUSH
38416: LD_EXP 109
38420: PPUSH
38421: LD_VAR 0 6
38425: PPUSH
38426: LD_EXP 109
38430: PUSH
38431: LD_VAR 0 6
38435: ARRAY
38436: PPUSH
38437: LD_VAR 0 5
38441: PPUSH
38442: CALL_OW 3
38446: PPUSH
38447: CALL_OW 1
38451: ST_TO_ADDR
// end ; end ;
38452: GO 38290
38454: POP
38455: POP
// end ;
38456: LD_VAR 0 4
38460: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38461: LD_INT 0
38463: PPUSH
38464: PPUSH
38465: PPUSH
38466: PPUSH
38467: PPUSH
38468: PPUSH
38469: PPUSH
38470: PPUSH
38471: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38472: LD_VAR 0 1
38476: PPUSH
38477: CALL_OW 264
38481: PUSH
38482: LD_INT 81
38484: EQUAL
38485: NOT
38486: IFTRUE 38501
38488: PUSH
38489: LD_VAR 0 1
38493: PUSH
38494: LD_EXP 108
38498: IN
38499: NOT
38500: OR
38501: IFFALSE 38505
// exit ;
38503: GO 38831
// index := GetElementIndex ( minersList , unit ) ;
38505: LD_ADDR_VAR 0 6
38509: PUSH
38510: LD_EXP 108
38514: PPUSH
38515: LD_VAR 0 1
38519: PPUSH
38520: CALL 45076 0 2
38524: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38525: LD_ADDR_VAR 0 8
38529: PUSH
38530: LD_EXP 110
38534: PUSH
38535: LD_EXP 109
38539: PUSH
38540: LD_VAR 0 6
38544: ARRAY
38545: MINUS
38546: ST_TO_ADDR
// if not minesFreeAmount then
38547: LD_VAR 0 8
38551: NOT
38552: IFFALSE 38556
// exit ;
38554: GO 38831
// tmp := [ ] ;
38556: LD_ADDR_VAR 0 7
38560: PUSH
38561: EMPTY
38562: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38563: LD_ADDR_VAR 0 5
38567: PUSH
38568: DOUBLE
38569: LD_INT 1
38571: DEC
38572: ST_TO_ADDR
38573: LD_VAR 0 8
38577: PUSH
38578: FOR_TO
38579: IFFALSE 38778
// begin _d := rand ( 0 , 5 ) ;
38581: LD_ADDR_VAR 0 11
38585: PUSH
38586: LD_INT 0
38588: PPUSH
38589: LD_INT 5
38591: PPUSH
38592: CALL_OW 12
38596: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38597: LD_ADDR_VAR 0 12
38601: PUSH
38602: LD_INT 2
38604: PPUSH
38605: LD_INT 6
38607: PPUSH
38608: CALL_OW 12
38612: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38613: LD_ADDR_VAR 0 9
38617: PUSH
38618: LD_VAR 0 2
38622: PPUSH
38623: LD_VAR 0 11
38627: PPUSH
38628: LD_VAR 0 12
38632: PPUSH
38633: CALL_OW 272
38637: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38638: LD_ADDR_VAR 0 10
38642: PUSH
38643: LD_VAR 0 3
38647: PPUSH
38648: LD_VAR 0 11
38652: PPUSH
38653: LD_VAR 0 12
38657: PPUSH
38658: CALL_OW 273
38662: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38663: LD_VAR 0 9
38667: PPUSH
38668: LD_VAR 0 10
38672: PPUSH
38673: CALL_OW 488
38677: IFFALSE 38701
38679: PUSH
38680: LD_VAR 0 9
38684: PUSH
38685: LD_VAR 0 10
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_VAR 0 7
38698: IN
38699: NOT
38700: AND
38701: IFFALSE 38720
38703: PUSH
38704: LD_VAR 0 9
38708: PPUSH
38709: LD_VAR 0 10
38713: PPUSH
38714: CALL_OW 458
38718: NOT
38719: AND
38720: IFFALSE 38762
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38722: LD_ADDR_VAR 0 7
38726: PUSH
38727: LD_VAR 0 7
38731: PPUSH
38732: LD_VAR 0 7
38736: PUSH
38737: LD_INT 1
38739: PLUS
38740: PPUSH
38741: LD_VAR 0 9
38745: PUSH
38746: LD_VAR 0 10
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PPUSH
38755: CALL_OW 1
38759: ST_TO_ADDR
38760: GO 38776
// i := i - 1 ;
38762: LD_ADDR_VAR 0 5
38766: PUSH
38767: LD_VAR 0 5
38771: PUSH
38772: LD_INT 1
38774: MINUS
38775: ST_TO_ADDR
// end ;
38776: GO 38578
38778: POP
38779: POP
// for i in tmp do
38780: LD_ADDR_VAR 0 5
38784: PUSH
38785: LD_VAR 0 7
38789: PUSH
38790: FOR_IN
38791: IFFALSE 38829
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38793: LD_VAR 0 1
38797: PPUSH
38798: LD_VAR 0 5
38802: PUSH
38803: LD_INT 1
38805: ARRAY
38806: PPUSH
38807: LD_VAR 0 5
38811: PUSH
38812: LD_INT 2
38814: ARRAY
38815: PPUSH
38816: CALL 37822 0 3
38820: NOT
38821: IFFALSE 38827
// exit ;
38823: POP
38824: POP
38825: GO 38831
38827: GO 38790
38829: POP
38830: POP
// end ;
38831: LD_VAR 0 4
38835: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
38836: LD_INT 0
38838: PPUSH
38839: PPUSH
38840: PPUSH
38841: PPUSH
38842: PPUSH
38843: PPUSH
38844: PPUSH
38845: PPUSH
38846: PPUSH
// if GetClass ( unit ) <> class_sniper then
38847: LD_VAR 0 1
38851: PPUSH
38852: CALL_OW 257
38856: PUSH
38857: LD_INT 5
38859: NONEQUAL
38860: IFFALSE 38864
// exit ;
38862: GO 39334
// dist := 8 ;
38864: LD_ADDR_VAR 0 5
38868: PUSH
38869: LD_INT 8
38871: ST_TO_ADDR
// viewRange := 12 ;
38872: LD_ADDR_VAR 0 8
38876: PUSH
38877: LD_INT 12
38879: ST_TO_ADDR
// side := GetSide ( unit ) ;
38880: LD_ADDR_VAR 0 6
38884: PUSH
38885: LD_VAR 0 1
38889: PPUSH
38890: CALL_OW 255
38894: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38895: LD_INT 61
38897: PPUSH
38898: LD_VAR 0 6
38902: PPUSH
38903: CALL_OW 321
38907: PUSH
38908: LD_INT 2
38910: EQUAL
38911: IFFALSE 38921
// viewRange := 16 ;
38913: LD_ADDR_VAR 0 8
38917: PUSH
38918: LD_INT 16
38920: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38921: LD_VAR 0 1
38925: PPUSH
38926: LD_VAR 0 2
38930: PPUSH
38931: LD_VAR 0 3
38935: PPUSH
38936: CALL_OW 297
38940: PUSH
38941: LD_VAR 0 5
38945: GREATER
38946: IFFALSE 39025
// begin ComMoveXY ( unit , x , y ) ;
38948: LD_VAR 0 1
38952: PPUSH
38953: LD_VAR 0 2
38957: PPUSH
38958: LD_VAR 0 3
38962: PPUSH
38963: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38967: LD_INT 35
38969: PPUSH
38970: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38974: LD_VAR 0 1
38978: PPUSH
38979: LD_VAR 0 2
38983: PPUSH
38984: LD_VAR 0 3
38988: PPUSH
38989: CALL 77132 0 3
38993: NOT
38994: IFFALSE 38998
// exit ;
38996: GO 39334
// until GetDistUnitXY ( unit , x , y ) < dist ;
38998: LD_VAR 0 1
39002: PPUSH
39003: LD_VAR 0 2
39007: PPUSH
39008: LD_VAR 0 3
39012: PPUSH
39013: CALL_OW 297
39017: PUSH
39018: LD_VAR 0 5
39022: LESS
39023: IFFALSE 38967
// end ; ComTurnXY ( unit , x , y ) ;
39025: LD_VAR 0 1
39029: PPUSH
39030: LD_VAR 0 2
39034: PPUSH
39035: LD_VAR 0 3
39039: PPUSH
39040: CALL_OW 118
// repeat if Multiplayer then
39044: LD_OWVAR 4
39048: IFFALSE 39059
// wait ( 35 ) else
39050: LD_INT 35
39052: PPUSH
39053: CALL_OW 67
39057: GO 39066
// wait ( 5 ) ;
39059: LD_INT 5
39061: PPUSH
39062: CALL_OW 67
// _d := GetDir ( unit ) ;
39066: LD_ADDR_VAR 0 11
39070: PUSH
39071: LD_VAR 0 1
39075: PPUSH
39076: CALL_OW 254
39080: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
39081: LD_ADDR_VAR 0 7
39085: PUSH
39086: LD_VAR 0 1
39090: PPUSH
39091: CALL_OW 250
39095: PPUSH
39096: LD_VAR 0 1
39100: PPUSH
39101: CALL_OW 251
39105: PPUSH
39106: LD_VAR 0 2
39110: PPUSH
39111: LD_VAR 0 3
39115: PPUSH
39116: CALL 79768 0 4
39120: ST_TO_ADDR
// until dir = _d ;
39121: LD_VAR 0 7
39125: PUSH
39126: LD_VAR 0 11
39130: EQUAL
39131: IFFALSE 39044
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
39133: LD_ADDR_VAR 0 9
39137: PUSH
39138: LD_VAR 0 1
39142: PPUSH
39143: CALL_OW 250
39147: PPUSH
39148: LD_VAR 0 7
39152: PPUSH
39153: LD_VAR 0 5
39157: PPUSH
39158: CALL_OW 272
39162: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
39163: LD_ADDR_VAR 0 10
39167: PUSH
39168: LD_VAR 0 1
39172: PPUSH
39173: CALL_OW 251
39177: PPUSH
39178: LD_VAR 0 7
39182: PPUSH
39183: LD_VAR 0 5
39187: PPUSH
39188: CALL_OW 273
39192: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39193: LD_VAR 0 9
39197: PPUSH
39198: LD_VAR 0 10
39202: PPUSH
39203: CALL_OW 488
39207: NOT
39208: IFFALSE 39212
// exit ;
39210: GO 39334
// ComAnimCustom ( unit , 1 ) ;
39212: LD_VAR 0 1
39216: PPUSH
39217: LD_INT 1
39219: PPUSH
39220: CALL_OW 592
// p := 0 ;
39224: LD_ADDR_VAR 0 12
39228: PUSH
39229: LD_INT 0
39231: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39232: LD_VAR 0 9
39236: PPUSH
39237: LD_VAR 0 10
39241: PPUSH
39242: LD_VAR 0 6
39246: PPUSH
39247: LD_VAR 0 8
39251: PPUSH
39252: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
39256: LD_INT 35
39258: PPUSH
39259: CALL_OW 67
// p := Inc ( p ) ;
39263: LD_ADDR_VAR 0 12
39267: PUSH
39268: LD_VAR 0 12
39272: PPUSH
39273: CALL 79724 0 1
39277: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
39278: LD_VAR 0 12
39282: PUSH
39283: LD_INT 3
39285: EQUAL
39286: IFTRUE 39300
39288: PUSH
39289: LD_VAR 0 1
39293: PPUSH
39294: CALL_OW 302
39298: NOT
39299: OR
39300: IFTRUE 39313
39302: PUSH
39303: LD_VAR 0 1
39307: PPUSH
39308: CALL_OW 301
39312: OR
39313: IFFALSE 39256
// RemoveSeeing ( _x , _y , side ) ;
39315: LD_VAR 0 9
39319: PPUSH
39320: LD_VAR 0 10
39324: PPUSH
39325: LD_VAR 0 6
39329: PPUSH
39330: CALL_OW 331
// end ;
39334: LD_VAR 0 4
39338: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
39339: LD_INT 0
39341: PPUSH
39342: PPUSH
39343: PPUSH
39344: PPUSH
39345: PPUSH
39346: PPUSH
39347: PPUSH
39348: PPUSH
39349: PPUSH
39350: PPUSH
39351: PPUSH
// if not unit then
39352: LD_VAR 0 1
39356: NOT
39357: IFFALSE 39361
// exit ;
39359: GO 39632
// side := GetSide ( unit ) ;
39361: LD_ADDR_VAR 0 3
39365: PUSH
39366: LD_VAR 0 1
39370: PPUSH
39371: CALL_OW 255
39375: ST_TO_ADDR
// x := GetX ( unit ) ;
39376: LD_ADDR_VAR 0 5
39380: PUSH
39381: LD_VAR 0 1
39385: PPUSH
39386: CALL_OW 250
39390: ST_TO_ADDR
// y := GetY ( unit ) ;
39391: LD_ADDR_VAR 0 6
39395: PUSH
39396: LD_VAR 0 1
39400: PPUSH
39401: CALL_OW 251
39405: ST_TO_ADDR
// r := 8 ;
39406: LD_ADDR_VAR 0 4
39410: PUSH
39411: LD_INT 8
39413: ST_TO_ADDR
// if x - r < 0 then
39414: LD_VAR 0 5
39418: PUSH
39419: LD_VAR 0 4
39423: MINUS
39424: PUSH
39425: LD_INT 0
39427: LESS
39428: IFFALSE 39440
// min_x := 0 else
39430: LD_ADDR_VAR 0 7
39434: PUSH
39435: LD_INT 0
39437: ST_TO_ADDR
39438: GO 39456
// min_x := x - r ;
39440: LD_ADDR_VAR 0 7
39444: PUSH
39445: LD_VAR 0 5
39449: PUSH
39450: LD_VAR 0 4
39454: MINUS
39455: ST_TO_ADDR
// if y - r < 0 then
39456: LD_VAR 0 6
39460: PUSH
39461: LD_VAR 0 4
39465: MINUS
39466: PUSH
39467: LD_INT 0
39469: LESS
39470: IFFALSE 39482
// min_y := 0 else
39472: LD_ADDR_VAR 0 8
39476: PUSH
39477: LD_INT 0
39479: ST_TO_ADDR
39480: GO 39498
// min_y := y - r ;
39482: LD_ADDR_VAR 0 8
39486: PUSH
39487: LD_VAR 0 6
39491: PUSH
39492: LD_VAR 0 4
39496: MINUS
39497: ST_TO_ADDR
// max_x := x + r ;
39498: LD_ADDR_VAR 0 9
39502: PUSH
39503: LD_VAR 0 5
39507: PUSH
39508: LD_VAR 0 4
39512: PLUS
39513: ST_TO_ADDR
// max_y := y + r ;
39514: LD_ADDR_VAR 0 10
39518: PUSH
39519: LD_VAR 0 6
39523: PUSH
39524: LD_VAR 0 4
39528: PLUS
39529: ST_TO_ADDR
// for _x = min_x to max_x do
39530: LD_ADDR_VAR 0 11
39534: PUSH
39535: DOUBLE
39536: LD_VAR 0 7
39540: DEC
39541: ST_TO_ADDR
39542: LD_VAR 0 9
39546: PUSH
39547: FOR_TO
39548: IFFALSE 39630
// for _y = min_y to max_y do
39550: LD_ADDR_VAR 0 12
39554: PUSH
39555: DOUBLE
39556: LD_VAR 0 8
39560: DEC
39561: ST_TO_ADDR
39562: LD_VAR 0 10
39566: PUSH
39567: FOR_TO
39568: IFFALSE 39626
// begin if not ValidHex ( _x , _y ) then
39570: LD_VAR 0 11
39574: PPUSH
39575: LD_VAR 0 12
39579: PPUSH
39580: CALL_OW 488
39584: NOT
39585: IFFALSE 39589
// continue ;
39587: GO 39567
// if MineAtPos ( _x , _y ) then
39589: LD_VAR 0 11
39593: PPUSH
39594: LD_VAR 0 12
39598: PPUSH
39599: CALL_OW 458
39603: IFFALSE 39624
// ViewMineAtPos ( _x , _y , side ) ;
39605: LD_VAR 0 11
39609: PPUSH
39610: LD_VAR 0 12
39614: PPUSH
39615: LD_VAR 0 3
39619: PPUSH
39620: CALL_OW 457
// end ;
39624: GO 39567
39626: POP
39627: POP
39628: GO 39547
39630: POP
39631: POP
// end ;
39632: LD_VAR 0 2
39636: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
39637: LD_INT 0
39639: PPUSH
39640: PPUSH
39641: PPUSH
39642: PPUSH
39643: PPUSH
39644: PPUSH
39645: PPUSH
// if not units then
39646: LD_VAR 0 1
39650: NOT
39651: IFFALSE 39655
// exit ;
39653: GO 40119
// scaners := [ ] ;
39655: LD_ADDR_VAR 0 6
39659: PUSH
39660: EMPTY
39661: ST_TO_ADDR
// for i in units do
39662: LD_ADDR_VAR 0 3
39666: PUSH
39667: LD_VAR 0 1
39671: PUSH
39672: FOR_IN
39673: IFFALSE 39830
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
39675: LD_VAR 0 3
39679: PPUSH
39680: CALL_OW 264
39684: PUSH
39685: LD_INT 11
39687: NONEQUAL
39688: IFTRUE 39702
39690: PUSH
39691: LD_VAR 0 3
39695: PPUSH
39696: CALL_OW 302
39700: NOT
39701: OR
39702: IFTRUE 39719
39704: PUSH
39705: LD_VAR 0 3
39709: PPUSH
39710: CALL_OW 110
39714: PUSH
39715: LD_INT 502
39717: EQUAL
39718: OR
39719: IFFALSE 39723
// continue ;
39721: GO 39672
// ComStop ( i ) ;
39723: LD_VAR 0 3
39727: PPUSH
39728: CALL_OW 141
// x := GetX ( i ) ;
39732: LD_ADDR_VAR 0 4
39736: PUSH
39737: LD_VAR 0 3
39741: PPUSH
39742: CALL_OW 250
39746: ST_TO_ADDR
// y := GetY ( i ) ;
39747: LD_ADDR_VAR 0 5
39751: PUSH
39752: LD_VAR 0 3
39756: PPUSH
39757: CALL_OW 251
39761: ST_TO_ADDR
// if GetSide ( i ) = your_side then
39762: LD_VAR 0 3
39766: PPUSH
39767: CALL_OW 255
39771: PUSH
39772: LD_OWVAR 2
39776: EQUAL
39777: IFFALSE 39796
// PlaySoundXY ( x , y , mineDetector ) ;
39779: LD_VAR 0 4
39783: PPUSH
39784: LD_VAR 0 5
39788: PPUSH
39789: LD_STRING mineDetector
39791: PPUSH
39792: CALL_OW 366
// scaners := Join ( scaners , i ) ;
39796: LD_ADDR_VAR 0 6
39800: PUSH
39801: LD_VAR 0 6
39805: PPUSH
39806: LD_VAR 0 3
39810: PPUSH
39811: CALL 78351 0 2
39815: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
39816: LD_VAR 0 3
39820: PPUSH
39821: LD_INT 502
39823: PPUSH
39824: CALL_OW 109
// end ;
39828: GO 39672
39830: POP
39831: POP
// if not scaners then
39832: LD_VAR 0 6
39836: NOT
39837: IFFALSE 39841
// exit ;
39839: GO 40119
// wait ( 3 ) ;
39841: LD_INT 3
39843: PPUSH
39844: CALL_OW 67
// timer := 6 ;
39848: LD_ADDR_VAR 0 7
39852: PUSH
39853: LD_INT 6
39855: ST_TO_ADDR
// repeat for i in scaners do
39856: LD_ADDR_VAR 0 3
39860: PUSH
39861: LD_VAR 0 6
39865: PUSH
39866: FOR_IN
39867: IFFALSE 40017
// begin side := GetSide ( i ) ;
39869: LD_ADDR_VAR 0 8
39873: PUSH
39874: LD_VAR 0 3
39878: PPUSH
39879: CALL_OW 255
39883: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
39884: LD_VAR 0 3
39888: PPUSH
39889: CALL_OW 302
39893: NOT
39894: IFTRUE 39907
39896: PUSH
39897: LD_VAR 0 3
39901: PPUSH
39902: CALL_OW 314
39906: OR
39907: IFTRUE 39938
39909: PUSH
39910: LD_VAR 0 3
39914: PPUSH
39915: CALL_OW 263
39919: PUSH
39920: LD_INT 1
39922: EQUAL
39923: IFFALSE 39937
39925: PUSH
39926: LD_VAR 0 3
39930: PPUSH
39931: CALL_OW 311
39935: NOT
39936: AND
39937: OR
39938: IFFALSE 39982
// begin SetUnitDisplayNumber ( i , 0 ) ;
39940: LD_VAR 0 3
39944: PPUSH
39945: LD_INT 0
39947: PPUSH
39948: CALL_OW 505
// SetTag ( i , 0 ) ;
39952: LD_VAR 0 3
39956: PPUSH
39957: LD_INT 0
39959: PPUSH
39960: CALL_OW 109
// scaners := scaners diff i ;
39964: LD_ADDR_VAR 0 6
39968: PUSH
39969: LD_VAR 0 6
39973: PUSH
39974: LD_VAR 0 3
39978: DIFF
39979: ST_TO_ADDR
// continue ;
39980: GO 39866
// end ; if side in [ your_side , 9 ] then
39982: LD_VAR 0 8
39986: PUSH
39987: LD_OWVAR 2
39991: PUSH
39992: LD_INT 9
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: IN
39999: IFFALSE 40015
// SetUnitDisplayNumber ( i , timer ) ;
40001: LD_VAR 0 3
40005: PPUSH
40006: LD_VAR 0 7
40010: PPUSH
40011: CALL_OW 505
// end ;
40015: GO 39866
40017: POP
40018: POP
// if not scaners then
40019: LD_VAR 0 6
40023: NOT
40024: IFFALSE 40028
// exit ;
40026: GO 40119
// timer := Dec ( timer ) ;
40028: LD_ADDR_VAR 0 7
40032: PUSH
40033: LD_VAR 0 7
40037: PPUSH
40038: CALL 79746 0 1
40042: ST_TO_ADDR
// wait ( 0 0$1 ) ;
40043: LD_INT 35
40045: PPUSH
40046: CALL_OW 67
// until timer = 0 ;
40050: LD_VAR 0 7
40054: PUSH
40055: LD_INT 0
40057: EQUAL
40058: IFFALSE 39856
// if not scaners then
40060: LD_VAR 0 6
40064: NOT
40065: IFFALSE 40069
// exit ;
40067: GO 40119
// for i in scaners do
40069: LD_ADDR_VAR 0 3
40073: PUSH
40074: LD_VAR 0 6
40078: PUSH
40079: FOR_IN
40080: IFFALSE 40117
// begin SetUnitDisplayNumber ( i , 0 ) ;
40082: LD_VAR 0 3
40086: PPUSH
40087: LD_INT 0
40089: PPUSH
40090: CALL_OW 505
// SetTag ( i , 0 ) ;
40094: LD_VAR 0 3
40098: PPUSH
40099: LD_INT 0
40101: PPUSH
40102: CALL_OW 109
// RevealDetectorMine ( i ) ;
40106: LD_VAR 0 3
40110: PPUSH
40111: CALL 39339 0 1
// end ;
40115: GO 40079
40117: POP
40118: POP
// end ;
40119: LD_VAR 0 2
40123: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
40124: LD_INT 0
40126: PPUSH
// if p1 = mine_detector_mode then
40127: LD_VAR 0 2
40131: PUSH
40132: LD_INT 103
40134: EQUAL
40135: IFFALSE 40146
// DetectMine ( units ) ;
40137: LD_VAR 0 1
40141: PPUSH
40142: CALL 39637 0 1
// end ; end_of_file
40146: LD_VAR 0 7
40150: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40151: LD_INT 0
40153: PPUSH
40154: PPUSH
// if exist_mode then
40155: LD_VAR 0 2
40159: IFFALSE 40205
// begin unit := CreateCharacter ( prefix & ident ) ;
40161: LD_ADDR_VAR 0 5
40165: PUSH
40166: LD_VAR 0 3
40170: PUSH
40171: LD_VAR 0 1
40175: STR
40176: PPUSH
40177: CALL_OW 34
40181: ST_TO_ADDR
// if unit then
40182: LD_VAR 0 5
40186: IFFALSE 40203
// DeleteCharacters ( prefix & ident ) ;
40188: LD_VAR 0 3
40192: PUSH
40193: LD_VAR 0 1
40197: STR
40198: PPUSH
40199: CALL_OW 40
// end else
40203: GO 40220
// unit := NewCharacter ( ident ) ;
40205: LD_ADDR_VAR 0 5
40209: PUSH
40210: LD_VAR 0 1
40214: PPUSH
40215: CALL_OW 25
40219: ST_TO_ADDR
// result := unit ;
40220: LD_ADDR_VAR 0 4
40224: PUSH
40225: LD_VAR 0 5
40229: ST_TO_ADDR
// end ;
40230: LD_VAR 0 4
40234: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
40235: LD_INT 0
40237: PPUSH
40238: PPUSH
// if exist_mode then
40239: LD_VAR 0 2
40243: IFFALSE 40268
// unit := CreateCharacter ( prefix & ident ) else
40245: LD_ADDR_VAR 0 5
40249: PUSH
40250: LD_VAR 0 3
40254: PUSH
40255: LD_VAR 0 1
40259: STR
40260: PPUSH
40261: CALL_OW 34
40265: ST_TO_ADDR
40266: GO 40283
// unit := NewCharacter ( ident ) ;
40268: LD_ADDR_VAR 0 5
40272: PUSH
40273: LD_VAR 0 1
40277: PPUSH
40278: CALL_OW 25
40282: ST_TO_ADDR
// result := unit ;
40283: LD_ADDR_VAR 0 4
40287: PUSH
40288: LD_VAR 0 5
40292: ST_TO_ADDR
// end ;
40293: LD_VAR 0 4
40297: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40298: LD_INT 0
40300: PPUSH
40301: PPUSH
// if not side or not nation then
40302: LD_VAR 0 1
40306: NOT
40307: IFTRUE 40316
40309: PUSH
40310: LD_VAR 0 2
40314: NOT
40315: OR
40316: IFFALSE 40320
// exit ;
40318: GO 41114
// case nation of nation_american :
40320: LD_VAR 0 2
40324: PUSH
40325: LD_INT 1
40327: DOUBLE
40328: EQUAL
40329: IFTRUE 40333
40331: GO 40555
40333: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
40334: LD_ADDR_VAR 0 4
40338: PUSH
40339: LD_INT 35
40341: PUSH
40342: LD_INT 45
40344: PUSH
40345: LD_INT 46
40347: PUSH
40348: LD_INT 47
40350: PUSH
40351: LD_INT 82
40353: PUSH
40354: LD_INT 83
40356: PUSH
40357: LD_INT 84
40359: PUSH
40360: LD_INT 85
40362: PUSH
40363: LD_INT 86
40365: PUSH
40366: LD_INT 1
40368: PUSH
40369: LD_INT 2
40371: PUSH
40372: LD_INT 6
40374: PUSH
40375: LD_INT 15
40377: PUSH
40378: LD_INT 16
40380: PUSH
40381: LD_INT 7
40383: PUSH
40384: LD_INT 12
40386: PUSH
40387: LD_INT 13
40389: PUSH
40390: LD_INT 10
40392: PUSH
40393: LD_INT 14
40395: PUSH
40396: LD_INT 20
40398: PUSH
40399: LD_INT 21
40401: PUSH
40402: LD_INT 22
40404: PUSH
40405: LD_INT 25
40407: PUSH
40408: LD_INT 32
40410: PUSH
40411: LD_INT 27
40413: PUSH
40414: LD_INT 36
40416: PUSH
40417: LD_INT 69
40419: PUSH
40420: LD_INT 39
40422: PUSH
40423: LD_INT 34
40425: PUSH
40426: LD_INT 40
40428: PUSH
40429: LD_INT 48
40431: PUSH
40432: LD_INT 49
40434: PUSH
40435: LD_INT 50
40437: PUSH
40438: LD_INT 51
40440: PUSH
40441: LD_INT 52
40443: PUSH
40444: LD_INT 53
40446: PUSH
40447: LD_INT 54
40449: PUSH
40450: LD_INT 55
40452: PUSH
40453: LD_INT 56
40455: PUSH
40456: LD_INT 57
40458: PUSH
40459: LD_INT 58
40461: PUSH
40462: LD_INT 59
40464: PUSH
40465: LD_INT 60
40467: PUSH
40468: LD_INT 61
40470: PUSH
40471: LD_INT 62
40473: PUSH
40474: LD_INT 80
40476: PUSH
40477: LD_INT 82
40479: PUSH
40480: LD_INT 83
40482: PUSH
40483: LD_INT 84
40485: PUSH
40486: LD_INT 85
40488: PUSH
40489: LD_INT 86
40491: PUSH
40492: LD_INT 90
40494: PUSH
40495: LD_INT 93
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: ST_TO_ADDR
40553: GO 41036
40555: LD_INT 2
40557: DOUBLE
40558: EQUAL
40559: IFTRUE 40563
40561: GO 40797
40563: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
40564: LD_ADDR_VAR 0 4
40568: PUSH
40569: LD_INT 35
40571: PUSH
40572: LD_INT 45
40574: PUSH
40575: LD_INT 46
40577: PUSH
40578: LD_INT 47
40580: PUSH
40581: LD_INT 82
40583: PUSH
40584: LD_INT 83
40586: PUSH
40587: LD_INT 84
40589: PUSH
40590: LD_INT 85
40592: PUSH
40593: LD_INT 87
40595: PUSH
40596: LD_INT 70
40598: PUSH
40599: LD_INT 1
40601: PUSH
40602: LD_INT 11
40604: PUSH
40605: LD_INT 3
40607: PUSH
40608: LD_INT 4
40610: PUSH
40611: LD_INT 5
40613: PUSH
40614: LD_INT 6
40616: PUSH
40617: LD_INT 15
40619: PUSH
40620: LD_INT 18
40622: PUSH
40623: LD_INT 7
40625: PUSH
40626: LD_INT 17
40628: PUSH
40629: LD_INT 8
40631: PUSH
40632: LD_INT 20
40634: PUSH
40635: LD_INT 21
40637: PUSH
40638: LD_INT 22
40640: PUSH
40641: LD_INT 72
40643: PUSH
40644: LD_INT 26
40646: PUSH
40647: LD_INT 69
40649: PUSH
40650: LD_INT 39
40652: PUSH
40653: LD_INT 40
40655: PUSH
40656: LD_INT 41
40658: PUSH
40659: LD_INT 42
40661: PUSH
40662: LD_INT 43
40664: PUSH
40665: LD_INT 48
40667: PUSH
40668: LD_INT 49
40670: PUSH
40671: LD_INT 50
40673: PUSH
40674: LD_INT 51
40676: PUSH
40677: LD_INT 52
40679: PUSH
40680: LD_INT 53
40682: PUSH
40683: LD_INT 54
40685: PUSH
40686: LD_INT 55
40688: PUSH
40689: LD_INT 56
40691: PUSH
40692: LD_INT 60
40694: PUSH
40695: LD_INT 61
40697: PUSH
40698: LD_INT 62
40700: PUSH
40701: LD_INT 66
40703: PUSH
40704: LD_INT 67
40706: PUSH
40707: LD_INT 68
40709: PUSH
40710: LD_INT 81
40712: PUSH
40713: LD_INT 82
40715: PUSH
40716: LD_INT 83
40718: PUSH
40719: LD_INT 84
40721: PUSH
40722: LD_INT 85
40724: PUSH
40725: LD_INT 87
40727: PUSH
40728: LD_INT 88
40730: PUSH
40731: LD_INT 92
40733: PUSH
40734: LD_INT 94
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: ST_TO_ADDR
40795: GO 41036
40797: LD_INT 3
40799: DOUBLE
40800: EQUAL
40801: IFTRUE 40805
40803: GO 41035
40805: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
40806: LD_ADDR_VAR 0 4
40810: PUSH
40811: LD_INT 46
40813: PUSH
40814: LD_INT 47
40816: PUSH
40817: LD_INT 1
40819: PUSH
40820: LD_INT 2
40822: PUSH
40823: LD_INT 82
40825: PUSH
40826: LD_INT 83
40828: PUSH
40829: LD_INT 84
40831: PUSH
40832: LD_INT 85
40834: PUSH
40835: LD_INT 86
40837: PUSH
40838: LD_INT 11
40840: PUSH
40841: LD_INT 9
40843: PUSH
40844: LD_INT 20
40846: PUSH
40847: LD_INT 19
40849: PUSH
40850: LD_INT 21
40852: PUSH
40853: LD_INT 24
40855: PUSH
40856: LD_INT 22
40858: PUSH
40859: LD_INT 25
40861: PUSH
40862: LD_INT 28
40864: PUSH
40865: LD_INT 29
40867: PUSH
40868: LD_INT 30
40870: PUSH
40871: LD_INT 31
40873: PUSH
40874: LD_INT 37
40876: PUSH
40877: LD_INT 38
40879: PUSH
40880: LD_INT 32
40882: PUSH
40883: LD_INT 27
40885: PUSH
40886: LD_INT 33
40888: PUSH
40889: LD_INT 69
40891: PUSH
40892: LD_INT 39
40894: PUSH
40895: LD_INT 34
40897: PUSH
40898: LD_INT 40
40900: PUSH
40901: LD_INT 71
40903: PUSH
40904: LD_INT 23
40906: PUSH
40907: LD_INT 44
40909: PUSH
40910: LD_INT 48
40912: PUSH
40913: LD_INT 49
40915: PUSH
40916: LD_INT 50
40918: PUSH
40919: LD_INT 51
40921: PUSH
40922: LD_INT 52
40924: PUSH
40925: LD_INT 53
40927: PUSH
40928: LD_INT 54
40930: PUSH
40931: LD_INT 55
40933: PUSH
40934: LD_INT 56
40936: PUSH
40937: LD_INT 57
40939: PUSH
40940: LD_INT 58
40942: PUSH
40943: LD_INT 59
40945: PUSH
40946: LD_INT 63
40948: PUSH
40949: LD_INT 64
40951: PUSH
40952: LD_INT 65
40954: PUSH
40955: LD_INT 82
40957: PUSH
40958: LD_INT 83
40960: PUSH
40961: LD_INT 84
40963: PUSH
40964: LD_INT 85
40966: PUSH
40967: LD_INT 86
40969: PUSH
40970: LD_INT 89
40972: PUSH
40973: LD_INT 91
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: ST_TO_ADDR
41033: GO 41036
41035: POP
// if state > - 1 and state < 3 then
41036: LD_VAR 0 3
41040: PUSH
41041: LD_INT 1
41043: NEG
41044: GREATER
41045: IFFALSE 41057
41047: PUSH
41048: LD_VAR 0 3
41052: PUSH
41053: LD_INT 3
41055: LESS
41056: AND
41057: IFFALSE 41114
// for i in result do
41059: LD_ADDR_VAR 0 5
41063: PUSH
41064: LD_VAR 0 4
41068: PUSH
41069: FOR_IN
41070: IFFALSE 41112
// if GetTech ( i , side ) <> state then
41072: LD_VAR 0 5
41076: PPUSH
41077: LD_VAR 0 1
41081: PPUSH
41082: CALL_OW 321
41086: PUSH
41087: LD_VAR 0 3
41091: NONEQUAL
41092: IFFALSE 41110
// result := result diff i ;
41094: LD_ADDR_VAR 0 4
41098: PUSH
41099: LD_VAR 0 4
41103: PUSH
41104: LD_VAR 0 5
41108: DIFF
41109: ST_TO_ADDR
41110: GO 41069
41112: POP
41113: POP
// end ;
41114: LD_VAR 0 4
41118: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41119: LD_INT 0
41121: PPUSH
41122: PPUSH
41123: PPUSH
// result := true ;
41124: LD_ADDR_VAR 0 3
41128: PUSH
41129: LD_INT 1
41131: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41132: LD_ADDR_VAR 0 5
41136: PUSH
41137: LD_VAR 0 2
41141: PPUSH
41142: CALL_OW 480
41146: ST_TO_ADDR
// if not tmp then
41147: LD_VAR 0 5
41151: NOT
41152: IFFALSE 41156
// exit ;
41154: GO 41205
// for i in tmp do
41156: LD_ADDR_VAR 0 4
41160: PUSH
41161: LD_VAR 0 5
41165: PUSH
41166: FOR_IN
41167: IFFALSE 41203
// if GetTech ( i , side ) <> state_researched then
41169: LD_VAR 0 4
41173: PPUSH
41174: LD_VAR 0 1
41178: PPUSH
41179: CALL_OW 321
41183: PUSH
41184: LD_INT 2
41186: NONEQUAL
41187: IFFALSE 41201
// begin result := false ;
41189: LD_ADDR_VAR 0 3
41193: PUSH
41194: LD_INT 0
41196: ST_TO_ADDR
// exit ;
41197: POP
41198: POP
41199: GO 41205
// end ;
41201: GO 41166
41203: POP
41204: POP
// end ;
41205: LD_VAR 0 3
41209: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41210: LD_INT 0
41212: PPUSH
41213: PPUSH
41214: PPUSH
41215: PPUSH
41216: PPUSH
41217: PPUSH
41218: PPUSH
41219: PPUSH
41220: PPUSH
41221: PPUSH
41222: PPUSH
41223: PPUSH
41224: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41225: LD_VAR 0 1
41229: NOT
41230: IFTRUE 41247
41232: PUSH
41233: LD_VAR 0 1
41237: PPUSH
41238: CALL_OW 257
41242: PUSH
41243: LD_INT 9
41245: NONEQUAL
41246: OR
41247: IFFALSE 41251
// exit ;
41249: GO 41830
// side := GetSide ( unit ) ;
41251: LD_ADDR_VAR 0 9
41255: PUSH
41256: LD_VAR 0 1
41260: PPUSH
41261: CALL_OW 255
41265: ST_TO_ADDR
// tech_space := tech_spacanom ;
41266: LD_ADDR_VAR 0 12
41270: PUSH
41271: LD_INT 29
41273: ST_TO_ADDR
// tech_time := tech_taurad ;
41274: LD_ADDR_VAR 0 13
41278: PUSH
41279: LD_INT 28
41281: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41282: LD_ADDR_VAR 0 11
41286: PUSH
41287: LD_VAR 0 1
41291: PPUSH
41292: CALL_OW 310
41296: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41297: LD_VAR 0 11
41301: PPUSH
41302: CALL_OW 247
41306: PUSH
41307: LD_INT 2
41309: EQUAL
41310: IFFALSE 41314
// exit ;
41312: GO 41830
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41314: LD_ADDR_VAR 0 8
41318: PUSH
41319: LD_INT 81
41321: PUSH
41322: LD_VAR 0 9
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 3
41333: PUSH
41334: LD_INT 21
41336: PUSH
41337: LD_INT 3
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PPUSH
41352: CALL_OW 69
41356: ST_TO_ADDR
// if not tmp then
41357: LD_VAR 0 8
41361: NOT
41362: IFFALSE 41366
// exit ;
41364: GO 41830
// if in_unit then
41366: LD_VAR 0 11
41370: IFFALSE 41394
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41372: LD_ADDR_VAR 0 10
41376: PUSH
41377: LD_VAR 0 8
41381: PPUSH
41382: LD_VAR 0 11
41386: PPUSH
41387: CALL_OW 74
41391: ST_TO_ADDR
41392: GO 41414
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41394: LD_ADDR_VAR 0 10
41398: PUSH
41399: LD_VAR 0 8
41403: PPUSH
41404: LD_VAR 0 1
41408: PPUSH
41409: CALL_OW 74
41413: ST_TO_ADDR
// if not enemy then
41414: LD_VAR 0 10
41418: NOT
41419: IFFALSE 41423
// exit ;
41421: GO 41830
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41423: LD_VAR 0 11
41427: IFFALSE 41449
41429: PUSH
41430: LD_VAR 0 11
41434: PPUSH
41435: LD_VAR 0 10
41439: PPUSH
41440: CALL_OW 296
41444: PUSH
41445: LD_INT 13
41447: GREATER
41448: AND
41449: IFTRUE 41471
41451: PUSH
41452: LD_VAR 0 1
41456: PPUSH
41457: LD_VAR 0 10
41461: PPUSH
41462: CALL_OW 296
41466: PUSH
41467: LD_INT 12
41469: GREATER
41470: OR
41471: IFFALSE 41475
// exit ;
41473: GO 41830
// missile := [ 1 ] ;
41475: LD_ADDR_VAR 0 14
41479: PUSH
41480: LD_INT 1
41482: PUSH
41483: EMPTY
41484: LIST
41485: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41486: LD_VAR 0 9
41490: PPUSH
41491: LD_VAR 0 12
41495: PPUSH
41496: CALL_OW 325
41500: IFFALSE 41529
// missile := Replace ( missile , missile + 1 , 2 ) ;
41502: LD_ADDR_VAR 0 14
41506: PUSH
41507: LD_VAR 0 14
41511: PPUSH
41512: LD_VAR 0 14
41516: PUSH
41517: LD_INT 1
41519: PLUS
41520: PPUSH
41521: LD_INT 2
41523: PPUSH
41524: CALL_OW 1
41528: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41529: LD_VAR 0 9
41533: PPUSH
41534: LD_VAR 0 13
41538: PPUSH
41539: CALL_OW 325
41543: IFFALSE 41567
41545: PUSH
41546: LD_VAR 0 10
41550: PPUSH
41551: CALL_OW 255
41555: PPUSH
41556: LD_VAR 0 13
41560: PPUSH
41561: CALL_OW 325
41565: NOT
41566: AND
41567: IFFALSE 41596
// missile := Replace ( missile , missile + 1 , 3 ) ;
41569: LD_ADDR_VAR 0 14
41573: PUSH
41574: LD_VAR 0 14
41578: PPUSH
41579: LD_VAR 0 14
41583: PUSH
41584: LD_INT 1
41586: PLUS
41587: PPUSH
41588: LD_INT 3
41590: PPUSH
41591: CALL_OW 1
41595: ST_TO_ADDR
// if missile < 2 then
41596: LD_VAR 0 14
41600: PUSH
41601: LD_INT 2
41603: LESS
41604: IFFALSE 41608
// exit ;
41606: GO 41830
// x := GetX ( enemy ) ;
41608: LD_ADDR_VAR 0 4
41612: PUSH
41613: LD_VAR 0 10
41617: PPUSH
41618: CALL_OW 250
41622: ST_TO_ADDR
// y := GetY ( enemy ) ;
41623: LD_ADDR_VAR 0 5
41627: PUSH
41628: LD_VAR 0 10
41632: PPUSH
41633: CALL_OW 251
41637: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41638: LD_ADDR_VAR 0 6
41642: PUSH
41643: LD_VAR 0 4
41647: PUSH
41648: LD_INT 1
41650: NEG
41651: PPUSH
41652: LD_INT 1
41654: PPUSH
41655: CALL_OW 12
41659: PLUS
41660: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41661: LD_ADDR_VAR 0 7
41665: PUSH
41666: LD_VAR 0 5
41670: PUSH
41671: LD_INT 1
41673: NEG
41674: PPUSH
41675: LD_INT 1
41677: PPUSH
41678: CALL_OW 12
41682: PLUS
41683: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41684: LD_VAR 0 6
41688: PPUSH
41689: LD_VAR 0 7
41693: PPUSH
41694: CALL_OW 488
41698: NOT
41699: IFFALSE 41721
// begin _x := x ;
41701: LD_ADDR_VAR 0 6
41705: PUSH
41706: LD_VAR 0 4
41710: ST_TO_ADDR
// _y := y ;
41711: LD_ADDR_VAR 0 7
41715: PUSH
41716: LD_VAR 0 5
41720: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41721: LD_ADDR_VAR 0 3
41725: PUSH
41726: LD_INT 1
41728: PPUSH
41729: LD_VAR 0 14
41733: PPUSH
41734: CALL_OW 12
41738: ST_TO_ADDR
// case i of 1 :
41739: LD_VAR 0 3
41743: PUSH
41744: LD_INT 1
41746: DOUBLE
41747: EQUAL
41748: IFTRUE 41752
41750: GO 41769
41752: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41753: LD_VAR 0 1
41757: PPUSH
41758: LD_VAR 0 10
41762: PPUSH
41763: CALL_OW 115
41767: GO 41830
41769: LD_INT 2
41771: DOUBLE
41772: EQUAL
41773: IFTRUE 41777
41775: GO 41799
41777: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41778: LD_VAR 0 1
41782: PPUSH
41783: LD_VAR 0 6
41787: PPUSH
41788: LD_VAR 0 7
41792: PPUSH
41793: CALL_OW 153
41797: GO 41830
41799: LD_INT 3
41801: DOUBLE
41802: EQUAL
41803: IFTRUE 41807
41805: GO 41829
41807: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41808: LD_VAR 0 1
41812: PPUSH
41813: LD_VAR 0 6
41817: PPUSH
41818: LD_VAR 0 7
41822: PPUSH
41823: CALL_OW 154
41827: GO 41830
41829: POP
// end ;
41830: LD_VAR 0 2
41834: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41835: LD_INT 0
41837: PPUSH
41838: PPUSH
41839: PPUSH
41840: PPUSH
41841: PPUSH
41842: PPUSH
// if not unit or not building then
41843: LD_VAR 0 1
41847: NOT
41848: IFTRUE 41857
41850: PUSH
41851: LD_VAR 0 2
41855: NOT
41856: OR
41857: IFFALSE 41861
// exit ;
41859: GO 42019
// x := GetX ( building ) ;
41861: LD_ADDR_VAR 0 5
41865: PUSH
41866: LD_VAR 0 2
41870: PPUSH
41871: CALL_OW 250
41875: ST_TO_ADDR
// y := GetY ( building ) ;
41876: LD_ADDR_VAR 0 6
41880: PUSH
41881: LD_VAR 0 2
41885: PPUSH
41886: CALL_OW 251
41890: ST_TO_ADDR
// for i := 0 to 5 do
41891: LD_ADDR_VAR 0 4
41895: PUSH
41896: DOUBLE
41897: LD_INT 0
41899: DEC
41900: ST_TO_ADDR
41901: LD_INT 5
41903: PUSH
41904: FOR_TO
41905: IFFALSE 42017
// begin _x := ShiftX ( x , i , 3 ) ;
41907: LD_ADDR_VAR 0 7
41911: PUSH
41912: LD_VAR 0 5
41916: PPUSH
41917: LD_VAR 0 4
41921: PPUSH
41922: LD_INT 3
41924: PPUSH
41925: CALL_OW 272
41929: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41930: LD_ADDR_VAR 0 8
41934: PUSH
41935: LD_VAR 0 6
41939: PPUSH
41940: LD_VAR 0 4
41944: PPUSH
41945: LD_INT 3
41947: PPUSH
41948: CALL_OW 273
41952: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41953: LD_VAR 0 7
41957: PPUSH
41958: LD_VAR 0 8
41962: PPUSH
41963: CALL_OW 488
41967: NOT
41968: IFFALSE 41972
// continue ;
41970: GO 41904
// if HexInfo ( _x , _y ) = 0 then
41972: LD_VAR 0 7
41976: PPUSH
41977: LD_VAR 0 8
41981: PPUSH
41982: CALL_OW 428
41986: PUSH
41987: LD_INT 0
41989: EQUAL
41990: IFFALSE 42015
// begin ComMoveXY ( unit , _x , _y ) ;
41992: LD_VAR 0 1
41996: PPUSH
41997: LD_VAR 0 7
42001: PPUSH
42002: LD_VAR 0 8
42006: PPUSH
42007: CALL_OW 111
// exit ;
42011: POP
42012: POP
42013: GO 42019
// end ; end ;
42015: GO 41904
42017: POP
42018: POP
// end ;
42019: LD_VAR 0 3
42023: RET
// export function ScanBase ( side , base_area ) ; begin
42024: LD_INT 0
42026: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42027: LD_ADDR_VAR 0 3
42031: PUSH
42032: LD_VAR 0 2
42036: PPUSH
42037: LD_INT 81
42039: PUSH
42040: LD_VAR 0 1
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PPUSH
42049: CALL_OW 70
42053: ST_TO_ADDR
// end ;
42054: LD_VAR 0 3
42058: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42059: LD_INT 0
42061: PPUSH
42062: PPUSH
42063: PPUSH
42064: PPUSH
// result := false ;
42065: LD_ADDR_VAR 0 2
42069: PUSH
42070: LD_INT 0
42072: ST_TO_ADDR
// side := GetSide ( unit ) ;
42073: LD_ADDR_VAR 0 3
42077: PUSH
42078: LD_VAR 0 1
42082: PPUSH
42083: CALL_OW 255
42087: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42088: LD_ADDR_VAR 0 4
42092: PUSH
42093: LD_VAR 0 1
42097: PPUSH
42098: CALL_OW 248
42102: ST_TO_ADDR
// case nat of 1 :
42103: LD_VAR 0 4
42107: PUSH
42108: LD_INT 1
42110: DOUBLE
42111: EQUAL
42112: IFTRUE 42116
42114: GO 42127
42116: POP
// tech := tech_lassight ; 2 :
42117: LD_ADDR_VAR 0 5
42121: PUSH
42122: LD_INT 12
42124: ST_TO_ADDR
42125: GO 42166
42127: LD_INT 2
42129: DOUBLE
42130: EQUAL
42131: IFTRUE 42135
42133: GO 42146
42135: POP
// tech := tech_mortar ; 3 :
42136: LD_ADDR_VAR 0 5
42140: PUSH
42141: LD_INT 41
42143: ST_TO_ADDR
42144: GO 42166
42146: LD_INT 3
42148: DOUBLE
42149: EQUAL
42150: IFTRUE 42154
42152: GO 42165
42154: POP
// tech := tech_bazooka ; end ;
42155: LD_ADDR_VAR 0 5
42159: PUSH
42160: LD_INT 44
42162: ST_TO_ADDR
42163: GO 42166
42165: POP
// if Researched ( side , tech ) then
42166: LD_VAR 0 3
42170: PPUSH
42171: LD_VAR 0 5
42175: PPUSH
42176: CALL_OW 325
42180: IFFALSE 42207
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42182: LD_ADDR_VAR 0 2
42186: PUSH
42187: LD_INT 5
42189: PUSH
42190: LD_INT 8
42192: PUSH
42193: LD_INT 9
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: LIST
42200: PUSH
42201: LD_VAR 0 4
42205: ARRAY
42206: ST_TO_ADDR
// end ;
42207: LD_VAR 0 2
42211: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42212: LD_INT 0
42214: PPUSH
42215: PPUSH
42216: PPUSH
// if not mines then
42217: LD_VAR 0 2
42221: NOT
42222: IFFALSE 42226
// exit ;
42224: GO 42370
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42226: LD_ADDR_VAR 0 5
42230: PUSH
42231: LD_INT 81
42233: PUSH
42234: LD_VAR 0 1
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 3
42245: PUSH
42246: LD_INT 21
42248: PUSH
42249: LD_INT 3
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PPUSH
42264: CALL_OW 69
42268: ST_TO_ADDR
// for i in mines do
42269: LD_ADDR_VAR 0 4
42273: PUSH
42274: LD_VAR 0 2
42278: PUSH
42279: FOR_IN
42280: IFFALSE 42368
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42282: LD_VAR 0 4
42286: PUSH
42287: LD_INT 1
42289: ARRAY
42290: PPUSH
42291: LD_VAR 0 4
42295: PUSH
42296: LD_INT 2
42298: ARRAY
42299: PPUSH
42300: CALL_OW 458
42304: NOT
42305: IFFALSE 42309
// continue ;
42307: GO 42279
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42309: LD_VAR 0 4
42313: PUSH
42314: LD_INT 1
42316: ARRAY
42317: PPUSH
42318: LD_VAR 0 4
42322: PUSH
42323: LD_INT 2
42325: ARRAY
42326: PPUSH
42327: CALL_OW 428
42331: PUSH
42332: LD_VAR 0 5
42336: IN
42337: IFFALSE 42366
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42339: LD_VAR 0 4
42343: PUSH
42344: LD_INT 1
42346: ARRAY
42347: PPUSH
42348: LD_VAR 0 4
42352: PUSH
42353: LD_INT 2
42355: ARRAY
42356: PPUSH
42357: LD_VAR 0 1
42361: PPUSH
42362: CALL_OW 456
// end ;
42366: GO 42279
42368: POP
42369: POP
// end ;
42370: LD_VAR 0 3
42374: RET
// export function Count ( array ) ; begin
42375: LD_INT 0
42377: PPUSH
// result := array + 0 ;
42378: LD_ADDR_VAR 0 2
42382: PUSH
42383: LD_VAR 0 1
42387: PUSH
42388: LD_INT 0
42390: PLUS
42391: ST_TO_ADDR
// end ;
42392: LD_VAR 0 2
42396: RET
// export function IsEmpty ( building ) ; begin
42397: LD_INT 0
42399: PPUSH
// if not building then
42400: LD_VAR 0 1
42404: NOT
42405: IFFALSE 42409
// exit ;
42407: GO 42452
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42409: LD_ADDR_VAR 0 2
42413: PUSH
42414: LD_VAR 0 1
42418: PUSH
42419: LD_INT 22
42421: PUSH
42422: LD_VAR 0 1
42426: PPUSH
42427: CALL_OW 255
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 58
42438: PUSH
42439: EMPTY
42440: LIST
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PPUSH
42446: CALL_OW 69
42450: IN
42451: ST_TO_ADDR
// end ;
42452: LD_VAR 0 2
42456: RET
// export function IsNotFull ( building ) ; var places ; begin
42457: LD_INT 0
42459: PPUSH
42460: PPUSH
// if not building then
42461: LD_VAR 0 1
42465: NOT
42466: IFFALSE 42470
// exit ;
42468: GO 42498
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
42470: LD_ADDR_VAR 0 2
42474: PUSH
42475: LD_VAR 0 1
42479: PPUSH
42480: LD_INT 3
42482: PUSH
42483: LD_INT 62
42485: PUSH
42486: EMPTY
42487: LIST
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PPUSH
42493: CALL_OW 72
42497: ST_TO_ADDR
// end ;
42498: LD_VAR 0 2
42502: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42503: LD_INT 0
42505: PPUSH
42506: PPUSH
42507: PPUSH
42508: PPUSH
// tmp := [ ] ;
42509: LD_ADDR_VAR 0 3
42513: PUSH
42514: EMPTY
42515: ST_TO_ADDR
// list := [ ] ;
42516: LD_ADDR_VAR 0 5
42520: PUSH
42521: EMPTY
42522: ST_TO_ADDR
// for i = 16 to 25 do
42523: LD_ADDR_VAR 0 4
42527: PUSH
42528: DOUBLE
42529: LD_INT 16
42531: DEC
42532: ST_TO_ADDR
42533: LD_INT 25
42535: PUSH
42536: FOR_TO
42537: IFFALSE 42610
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42539: LD_ADDR_VAR 0 3
42543: PUSH
42544: LD_VAR 0 3
42548: PUSH
42549: LD_INT 22
42551: PUSH
42552: LD_VAR 0 1
42556: PPUSH
42557: CALL_OW 255
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 91
42568: PUSH
42569: LD_VAR 0 1
42573: PUSH
42574: LD_INT 6
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 30
42584: PUSH
42585: LD_VAR 0 4
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: LIST
42598: PUSH
42599: EMPTY
42600: LIST
42601: PPUSH
42602: CALL_OW 69
42606: ADD
42607: ST_TO_ADDR
42608: GO 42536
42610: POP
42611: POP
// for i = 1 to tmp do
42612: LD_ADDR_VAR 0 4
42616: PUSH
42617: DOUBLE
42618: LD_INT 1
42620: DEC
42621: ST_TO_ADDR
42622: LD_VAR 0 3
42626: PUSH
42627: FOR_TO
42628: IFFALSE 42716
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42630: LD_ADDR_VAR 0 5
42634: PUSH
42635: LD_VAR 0 5
42639: PUSH
42640: LD_VAR 0 3
42644: PUSH
42645: LD_VAR 0 4
42649: ARRAY
42650: PPUSH
42651: CALL_OW 266
42655: PUSH
42656: LD_VAR 0 3
42660: PUSH
42661: LD_VAR 0 4
42665: ARRAY
42666: PPUSH
42667: CALL_OW 250
42671: PUSH
42672: LD_VAR 0 3
42676: PUSH
42677: LD_VAR 0 4
42681: ARRAY
42682: PPUSH
42683: CALL_OW 251
42687: PUSH
42688: LD_VAR 0 3
42692: PUSH
42693: LD_VAR 0 4
42697: ARRAY
42698: PPUSH
42699: CALL_OW 254
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: PUSH
42710: EMPTY
42711: LIST
42712: ADD
42713: ST_TO_ADDR
42714: GO 42627
42716: POP
42717: POP
// result := list ;
42718: LD_ADDR_VAR 0 2
42722: PUSH
42723: LD_VAR 0 5
42727: ST_TO_ADDR
// end ;
42728: LD_VAR 0 2
42732: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42733: LD_INT 0
42735: PPUSH
42736: PPUSH
42737: PPUSH
42738: PPUSH
42739: PPUSH
42740: PPUSH
42741: PPUSH
// if not factory then
42742: LD_VAR 0 1
42746: NOT
42747: IFFALSE 42751
// exit ;
42749: GO 43354
// if control = control_apeman then
42751: LD_VAR 0 4
42755: PUSH
42756: LD_INT 5
42758: EQUAL
42759: IFFALSE 42868
// begin tmp := UnitsInside ( factory ) ;
42761: LD_ADDR_VAR 0 8
42765: PUSH
42766: LD_VAR 0 1
42770: PPUSH
42771: CALL_OW 313
42775: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42776: LD_VAR 0 8
42780: PPUSH
42781: LD_INT 25
42783: PUSH
42784: LD_INT 12
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PPUSH
42791: CALL_OW 72
42795: NOT
42796: IFFALSE 42806
// control := control_manual ;
42798: LD_ADDR_VAR 0 4
42802: PUSH
42803: LD_INT 1
42805: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42806: LD_ADDR_VAR 0 8
42810: PUSH
42811: LD_VAR 0 1
42815: PPUSH
42816: CALL 42503 0 1
42820: ST_TO_ADDR
// if tmp then
42821: LD_VAR 0 8
42825: IFFALSE 42868
// begin for i in tmp do
42827: LD_ADDR_VAR 0 7
42831: PUSH
42832: LD_VAR 0 8
42836: PUSH
42837: FOR_IN
42838: IFFALSE 42866
// if i [ 1 ] = b_ext_radio then
42840: LD_VAR 0 7
42844: PUSH
42845: LD_INT 1
42847: ARRAY
42848: PUSH
42849: LD_INT 22
42851: EQUAL
42852: IFFALSE 42864
// begin control := control_remote ;
42854: LD_ADDR_VAR 0 4
42858: PUSH
42859: LD_INT 2
42861: ST_TO_ADDR
// break ;
42862: GO 42866
// end ;
42864: GO 42837
42866: POP
42867: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42868: LD_VAR 0 1
42872: PPUSH
42873: LD_VAR 0 2
42877: PPUSH
42878: LD_VAR 0 3
42882: PPUSH
42883: LD_VAR 0 4
42887: PPUSH
42888: LD_VAR 0 5
42892: PPUSH
42893: CALL_OW 448
42897: IFFALSE 42932
// begin result := [ chassis , engine , control , weapon ] ;
42899: LD_ADDR_VAR 0 6
42903: PUSH
42904: LD_VAR 0 2
42908: PUSH
42909: LD_VAR 0 3
42913: PUSH
42914: LD_VAR 0 4
42918: PUSH
42919: LD_VAR 0 5
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: ST_TO_ADDR
// exit ;
42930: GO 43354
// end ; _chassis := AvailableChassisList ( factory ) ;
42932: LD_ADDR_VAR 0 9
42936: PUSH
42937: LD_VAR 0 1
42941: PPUSH
42942: CALL_OW 475
42946: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42947: LD_ADDR_VAR 0 11
42951: PUSH
42952: LD_VAR 0 1
42956: PPUSH
42957: CALL_OW 476
42961: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42962: LD_ADDR_VAR 0 12
42966: PUSH
42967: LD_VAR 0 1
42971: PPUSH
42972: CALL_OW 477
42976: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42977: LD_ADDR_VAR 0 10
42981: PUSH
42982: LD_VAR 0 1
42986: PPUSH
42987: CALL_OW 478
42991: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42992: LD_VAR 0 9
42996: NOT
42997: IFTRUE 43006
42999: PUSH
43000: LD_VAR 0 11
43004: NOT
43005: OR
43006: IFTRUE 43015
43008: PUSH
43009: LD_VAR 0 12
43013: NOT
43014: OR
43015: IFTRUE 43024
43017: PUSH
43018: LD_VAR 0 10
43022: NOT
43023: OR
43024: IFFALSE 43059
// begin result := [ chassis , engine , control , weapon ] ;
43026: LD_ADDR_VAR 0 6
43030: PUSH
43031: LD_VAR 0 2
43035: PUSH
43036: LD_VAR 0 3
43040: PUSH
43041: LD_VAR 0 4
43045: PUSH
43046: LD_VAR 0 5
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: ST_TO_ADDR
// exit ;
43057: GO 43354
// end ; if not chassis in _chassis then
43059: LD_VAR 0 2
43063: PUSH
43064: LD_VAR 0 9
43068: IN
43069: NOT
43070: IFFALSE 43096
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43072: LD_ADDR_VAR 0 2
43076: PUSH
43077: LD_VAR 0 9
43081: PUSH
43082: LD_INT 1
43084: PPUSH
43085: LD_VAR 0 9
43089: PPUSH
43090: CALL_OW 12
43094: ARRAY
43095: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43096: LD_VAR 0 2
43100: PPUSH
43101: LD_VAR 0 3
43105: PPUSH
43106: CALL 43359 0 2
43110: NOT
43111: IFFALSE 43172
// repeat engine := _engine [ 1 ] ;
43113: LD_ADDR_VAR 0 3
43117: PUSH
43118: LD_VAR 0 11
43122: PUSH
43123: LD_INT 1
43125: ARRAY
43126: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43127: LD_ADDR_VAR 0 11
43131: PUSH
43132: LD_VAR 0 11
43136: PPUSH
43137: LD_INT 1
43139: PPUSH
43140: CALL_OW 3
43144: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43145: LD_VAR 0 2
43149: PPUSH
43150: LD_VAR 0 3
43154: PPUSH
43155: CALL 43359 0 2
43159: IFTRUE 43170
43161: PUSH
43162: LD_VAR 0 11
43166: PUSH
43167: EMPTY
43168: EQUAL
43169: OR
43170: IFFALSE 43113
// if not control in _control then
43172: LD_VAR 0 4
43176: PUSH
43177: LD_VAR 0 12
43181: IN
43182: NOT
43183: IFFALSE 43209
// control := _control [ rand ( 1 , _control ) ] ;
43185: LD_ADDR_VAR 0 4
43189: PUSH
43190: LD_VAR 0 12
43194: PUSH
43195: LD_INT 1
43197: PPUSH
43198: LD_VAR 0 12
43202: PPUSH
43203: CALL_OW 12
43207: ARRAY
43208: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43209: LD_VAR 0 2
43213: PPUSH
43214: LD_VAR 0 5
43218: PPUSH
43219: CALL 43581 0 2
43223: NOT
43224: IFFALSE 43285
// repeat weapon := _weapon [ 1 ] ;
43226: LD_ADDR_VAR 0 5
43230: PUSH
43231: LD_VAR 0 10
43235: PUSH
43236: LD_INT 1
43238: ARRAY
43239: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43240: LD_ADDR_VAR 0 10
43244: PUSH
43245: LD_VAR 0 10
43249: PPUSH
43250: LD_INT 1
43252: PPUSH
43253: CALL_OW 3
43257: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43258: LD_VAR 0 2
43262: PPUSH
43263: LD_VAR 0 5
43267: PPUSH
43268: CALL 43581 0 2
43272: IFTRUE 43283
43274: PUSH
43275: LD_VAR 0 10
43279: PUSH
43280: EMPTY
43281: EQUAL
43282: OR
43283: IFFALSE 43226
// result := [ ] ;
43285: LD_ADDR_VAR 0 6
43289: PUSH
43290: EMPTY
43291: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43292: LD_VAR 0 1
43296: PPUSH
43297: LD_VAR 0 2
43301: PPUSH
43302: LD_VAR 0 3
43306: PPUSH
43307: LD_VAR 0 4
43311: PPUSH
43312: LD_VAR 0 5
43316: PPUSH
43317: CALL_OW 448
43321: IFFALSE 43354
// result := [ chassis , engine , control , weapon ] ;
43323: LD_ADDR_VAR 0 6
43327: PUSH
43328: LD_VAR 0 2
43332: PUSH
43333: LD_VAR 0 3
43337: PUSH
43338: LD_VAR 0 4
43342: PUSH
43343: LD_VAR 0 5
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: ST_TO_ADDR
// end ;
43354: LD_VAR 0 6
43358: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43359: LD_INT 0
43361: PPUSH
// if not chassis or not engine then
43362: LD_VAR 0 1
43366: NOT
43367: IFTRUE 43376
43369: PUSH
43370: LD_VAR 0 2
43374: NOT
43375: OR
43376: IFFALSE 43380
// exit ;
43378: GO 43576
// case engine of engine_solar :
43380: LD_VAR 0 2
43384: PUSH
43385: LD_INT 2
43387: DOUBLE
43388: EQUAL
43389: IFTRUE 43393
43391: GO 43431
43393: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43394: LD_ADDR_VAR 0 3
43398: PUSH
43399: LD_INT 11
43401: PUSH
43402: LD_INT 12
43404: PUSH
43405: LD_INT 13
43407: PUSH
43408: LD_INT 14
43410: PUSH
43411: LD_INT 1
43413: PUSH
43414: LD_INT 2
43416: PUSH
43417: LD_INT 3
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: ST_TO_ADDR
43429: GO 43560
43431: LD_INT 1
43433: DOUBLE
43434: EQUAL
43435: IFTRUE 43439
43437: GO 43501
43439: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43440: LD_ADDR_VAR 0 3
43444: PUSH
43445: LD_INT 11
43447: PUSH
43448: LD_INT 12
43450: PUSH
43451: LD_INT 13
43453: PUSH
43454: LD_INT 14
43456: PUSH
43457: LD_INT 1
43459: PUSH
43460: LD_INT 2
43462: PUSH
43463: LD_INT 3
43465: PUSH
43466: LD_INT 4
43468: PUSH
43469: LD_INT 5
43471: PUSH
43472: LD_INT 21
43474: PUSH
43475: LD_INT 23
43477: PUSH
43478: LD_INT 22
43480: PUSH
43481: LD_INT 24
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: ST_TO_ADDR
43499: GO 43560
43501: LD_INT 3
43503: DOUBLE
43504: EQUAL
43505: IFTRUE 43509
43507: GO 43559
43509: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43510: LD_ADDR_VAR 0 3
43514: PUSH
43515: LD_INT 13
43517: PUSH
43518: LD_INT 14
43520: PUSH
43521: LD_INT 2
43523: PUSH
43524: LD_INT 3
43526: PUSH
43527: LD_INT 4
43529: PUSH
43530: LD_INT 5
43532: PUSH
43533: LD_INT 21
43535: PUSH
43536: LD_INT 22
43538: PUSH
43539: LD_INT 23
43541: PUSH
43542: LD_INT 24
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: ST_TO_ADDR
43557: GO 43560
43559: POP
// result := ( chassis in result ) ;
43560: LD_ADDR_VAR 0 3
43564: PUSH
43565: LD_VAR 0 1
43569: PUSH
43570: LD_VAR 0 3
43574: IN
43575: ST_TO_ADDR
// end ;
43576: LD_VAR 0 3
43580: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43581: LD_INT 0
43583: PPUSH
// if not chassis or not weapon then
43584: LD_VAR 0 1
43588: NOT
43589: IFTRUE 43598
43591: PUSH
43592: LD_VAR 0 2
43596: NOT
43597: OR
43598: IFFALSE 43602
// exit ;
43600: GO 44696
// case weapon of us_machine_gun :
43602: LD_VAR 0 2
43606: PUSH
43607: LD_INT 2
43609: DOUBLE
43610: EQUAL
43611: IFTRUE 43615
43613: GO 43645
43615: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43616: LD_ADDR_VAR 0 3
43620: PUSH
43621: LD_INT 1
43623: PUSH
43624: LD_INT 2
43626: PUSH
43627: LD_INT 3
43629: PUSH
43630: LD_INT 4
43632: PUSH
43633: LD_INT 5
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: ST_TO_ADDR
43643: GO 44680
43645: LD_INT 3
43647: DOUBLE
43648: EQUAL
43649: IFTRUE 43653
43651: GO 43683
43653: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43654: LD_ADDR_VAR 0 3
43658: PUSH
43659: LD_INT 1
43661: PUSH
43662: LD_INT 2
43664: PUSH
43665: LD_INT 3
43667: PUSH
43668: LD_INT 4
43670: PUSH
43671: LD_INT 5
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: ST_TO_ADDR
43681: GO 44680
43683: LD_INT 11
43685: DOUBLE
43686: EQUAL
43687: IFTRUE 43691
43689: GO 43721
43691: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43692: LD_ADDR_VAR 0 3
43696: PUSH
43697: LD_INT 1
43699: PUSH
43700: LD_INT 2
43702: PUSH
43703: LD_INT 3
43705: PUSH
43706: LD_INT 4
43708: PUSH
43709: LD_INT 5
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: ST_TO_ADDR
43719: GO 44680
43721: LD_INT 4
43723: DOUBLE
43724: EQUAL
43725: IFTRUE 43729
43727: GO 43755
43729: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43730: LD_ADDR_VAR 0 3
43734: PUSH
43735: LD_INT 2
43737: PUSH
43738: LD_INT 3
43740: PUSH
43741: LD_INT 4
43743: PUSH
43744: LD_INT 5
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: ST_TO_ADDR
43753: GO 44680
43755: LD_INT 5
43757: DOUBLE
43758: EQUAL
43759: IFTRUE 43763
43761: GO 43789
43763: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43764: LD_ADDR_VAR 0 3
43768: PUSH
43769: LD_INT 2
43771: PUSH
43772: LD_INT 3
43774: PUSH
43775: LD_INT 4
43777: PUSH
43778: LD_INT 5
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: ST_TO_ADDR
43787: GO 44680
43789: LD_INT 9
43791: DOUBLE
43792: EQUAL
43793: IFTRUE 43797
43795: GO 43823
43797: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43798: LD_ADDR_VAR 0 3
43802: PUSH
43803: LD_INT 2
43805: PUSH
43806: LD_INT 3
43808: PUSH
43809: LD_INT 4
43811: PUSH
43812: LD_INT 5
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: ST_TO_ADDR
43821: GO 44680
43823: LD_INT 7
43825: DOUBLE
43826: EQUAL
43827: IFTRUE 43831
43829: GO 43857
43831: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43832: LD_ADDR_VAR 0 3
43836: PUSH
43837: LD_INT 2
43839: PUSH
43840: LD_INT 3
43842: PUSH
43843: LD_INT 4
43845: PUSH
43846: LD_INT 5
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: ST_TO_ADDR
43855: GO 44680
43857: LD_INT 12
43859: DOUBLE
43860: EQUAL
43861: IFTRUE 43865
43863: GO 43891
43865: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43866: LD_ADDR_VAR 0 3
43870: PUSH
43871: LD_INT 2
43873: PUSH
43874: LD_INT 3
43876: PUSH
43877: LD_INT 4
43879: PUSH
43880: LD_INT 5
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: ST_TO_ADDR
43889: GO 44680
43891: LD_INT 13
43893: DOUBLE
43894: EQUAL
43895: IFTRUE 43899
43897: GO 43925
43899: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43900: LD_ADDR_VAR 0 3
43904: PUSH
43905: LD_INT 2
43907: PUSH
43908: LD_INT 3
43910: PUSH
43911: LD_INT 4
43913: PUSH
43914: LD_INT 5
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: ST_TO_ADDR
43923: GO 44680
43925: LD_INT 14
43927: DOUBLE
43928: EQUAL
43929: IFTRUE 43933
43931: GO 43951
43933: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43934: LD_ADDR_VAR 0 3
43938: PUSH
43939: LD_INT 4
43941: PUSH
43942: LD_INT 5
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: ST_TO_ADDR
43949: GO 44680
43951: LD_INT 6
43953: DOUBLE
43954: EQUAL
43955: IFTRUE 43959
43957: GO 43977
43959: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43960: LD_ADDR_VAR 0 3
43964: PUSH
43965: LD_INT 4
43967: PUSH
43968: LD_INT 5
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: ST_TO_ADDR
43975: GO 44680
43977: LD_INT 10
43979: DOUBLE
43980: EQUAL
43981: IFTRUE 43985
43983: GO 44003
43985: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43986: LD_ADDR_VAR 0 3
43990: PUSH
43991: LD_INT 4
43993: PUSH
43994: LD_INT 5
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: ST_TO_ADDR
44001: GO 44680
44003: LD_INT 22
44005: DOUBLE
44006: EQUAL
44007: IFTRUE 44011
44009: GO 44037
44011: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44012: LD_ADDR_VAR 0 3
44016: PUSH
44017: LD_INT 11
44019: PUSH
44020: LD_INT 12
44022: PUSH
44023: LD_INT 13
44025: PUSH
44026: LD_INT 14
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: ST_TO_ADDR
44035: GO 44680
44037: LD_INT 23
44039: DOUBLE
44040: EQUAL
44041: IFTRUE 44045
44043: GO 44071
44045: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44046: LD_ADDR_VAR 0 3
44050: PUSH
44051: LD_INT 11
44053: PUSH
44054: LD_INT 12
44056: PUSH
44057: LD_INT 13
44059: PUSH
44060: LD_INT 14
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: ST_TO_ADDR
44069: GO 44680
44071: LD_INT 24
44073: DOUBLE
44074: EQUAL
44075: IFTRUE 44079
44077: GO 44105
44079: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44080: LD_ADDR_VAR 0 3
44084: PUSH
44085: LD_INT 11
44087: PUSH
44088: LD_INT 12
44090: PUSH
44091: LD_INT 13
44093: PUSH
44094: LD_INT 14
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: ST_TO_ADDR
44103: GO 44680
44105: LD_INT 30
44107: DOUBLE
44108: EQUAL
44109: IFTRUE 44113
44111: GO 44139
44113: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44114: LD_ADDR_VAR 0 3
44118: PUSH
44119: LD_INT 11
44121: PUSH
44122: LD_INT 12
44124: PUSH
44125: LD_INT 13
44127: PUSH
44128: LD_INT 14
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: ST_TO_ADDR
44137: GO 44680
44139: LD_INT 25
44141: DOUBLE
44142: EQUAL
44143: IFTRUE 44147
44145: GO 44165
44147: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44148: LD_ADDR_VAR 0 3
44152: PUSH
44153: LD_INT 13
44155: PUSH
44156: LD_INT 14
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: ST_TO_ADDR
44163: GO 44680
44165: LD_INT 27
44167: DOUBLE
44168: EQUAL
44169: IFTRUE 44173
44171: GO 44191
44173: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44174: LD_ADDR_VAR 0 3
44178: PUSH
44179: LD_INT 13
44181: PUSH
44182: LD_INT 14
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: ST_TO_ADDR
44189: GO 44680
44191: LD_INT 92
44193: DOUBLE
44194: EQUAL
44195: IFTRUE 44199
44197: GO 44225
44199: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44200: LD_ADDR_VAR 0 3
44204: PUSH
44205: LD_INT 11
44207: PUSH
44208: LD_INT 12
44210: PUSH
44211: LD_INT 13
44213: PUSH
44214: LD_INT 14
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: ST_TO_ADDR
44223: GO 44680
44225: LD_INT 28
44227: DOUBLE
44228: EQUAL
44229: IFTRUE 44233
44231: GO 44251
44233: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44234: LD_ADDR_VAR 0 3
44238: PUSH
44239: LD_INT 13
44241: PUSH
44242: LD_INT 14
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: ST_TO_ADDR
44249: GO 44680
44251: LD_INT 29
44253: DOUBLE
44254: EQUAL
44255: IFTRUE 44259
44257: GO 44277
44259: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44260: LD_ADDR_VAR 0 3
44264: PUSH
44265: LD_INT 13
44267: PUSH
44268: LD_INT 14
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: ST_TO_ADDR
44275: GO 44680
44277: LD_INT 31
44279: DOUBLE
44280: EQUAL
44281: IFTRUE 44285
44283: GO 44303
44285: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44286: LD_ADDR_VAR 0 3
44290: PUSH
44291: LD_INT 13
44293: PUSH
44294: LD_INT 14
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: ST_TO_ADDR
44301: GO 44680
44303: LD_INT 26
44305: DOUBLE
44306: EQUAL
44307: IFTRUE 44311
44309: GO 44329
44311: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44312: LD_ADDR_VAR 0 3
44316: PUSH
44317: LD_INT 13
44319: PUSH
44320: LD_INT 14
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: ST_TO_ADDR
44327: GO 44680
44329: LD_INT 42
44331: DOUBLE
44332: EQUAL
44333: IFTRUE 44337
44335: GO 44363
44337: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44338: LD_ADDR_VAR 0 3
44342: PUSH
44343: LD_INT 21
44345: PUSH
44346: LD_INT 22
44348: PUSH
44349: LD_INT 23
44351: PUSH
44352: LD_INT 24
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: ST_TO_ADDR
44361: GO 44680
44363: LD_INT 43
44365: DOUBLE
44366: EQUAL
44367: IFTRUE 44371
44369: GO 44397
44371: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44372: LD_ADDR_VAR 0 3
44376: PUSH
44377: LD_INT 21
44379: PUSH
44380: LD_INT 22
44382: PUSH
44383: LD_INT 23
44385: PUSH
44386: LD_INT 24
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: ST_TO_ADDR
44395: GO 44680
44397: LD_INT 44
44399: DOUBLE
44400: EQUAL
44401: IFTRUE 44405
44403: GO 44431
44405: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44406: LD_ADDR_VAR 0 3
44410: PUSH
44411: LD_INT 21
44413: PUSH
44414: LD_INT 22
44416: PUSH
44417: LD_INT 23
44419: PUSH
44420: LD_INT 24
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: ST_TO_ADDR
44429: GO 44680
44431: LD_INT 45
44433: DOUBLE
44434: EQUAL
44435: IFTRUE 44439
44437: GO 44465
44439: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44440: LD_ADDR_VAR 0 3
44444: PUSH
44445: LD_INT 21
44447: PUSH
44448: LD_INT 22
44450: PUSH
44451: LD_INT 23
44453: PUSH
44454: LD_INT 24
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: ST_TO_ADDR
44463: GO 44680
44465: LD_INT 49
44467: DOUBLE
44468: EQUAL
44469: IFTRUE 44473
44471: GO 44499
44473: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44474: LD_ADDR_VAR 0 3
44478: PUSH
44479: LD_INT 21
44481: PUSH
44482: LD_INT 22
44484: PUSH
44485: LD_INT 23
44487: PUSH
44488: LD_INT 24
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: ST_TO_ADDR
44497: GO 44680
44499: LD_INT 51
44501: DOUBLE
44502: EQUAL
44503: IFTRUE 44507
44505: GO 44533
44507: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44508: LD_ADDR_VAR 0 3
44512: PUSH
44513: LD_INT 21
44515: PUSH
44516: LD_INT 22
44518: PUSH
44519: LD_INT 23
44521: PUSH
44522: LD_INT 24
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: ST_TO_ADDR
44531: GO 44680
44533: LD_INT 52
44535: DOUBLE
44536: EQUAL
44537: IFTRUE 44541
44539: GO 44567
44541: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44542: LD_ADDR_VAR 0 3
44546: PUSH
44547: LD_INT 21
44549: PUSH
44550: LD_INT 22
44552: PUSH
44553: LD_INT 23
44555: PUSH
44556: LD_INT 24
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: ST_TO_ADDR
44565: GO 44680
44567: LD_INT 53
44569: DOUBLE
44570: EQUAL
44571: IFTRUE 44575
44573: GO 44593
44575: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44576: LD_ADDR_VAR 0 3
44580: PUSH
44581: LD_INT 23
44583: PUSH
44584: LD_INT 24
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: ST_TO_ADDR
44591: GO 44680
44593: LD_INT 46
44595: DOUBLE
44596: EQUAL
44597: IFTRUE 44601
44599: GO 44619
44601: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44602: LD_ADDR_VAR 0 3
44606: PUSH
44607: LD_INT 23
44609: PUSH
44610: LD_INT 24
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: ST_TO_ADDR
44617: GO 44680
44619: LD_INT 47
44621: DOUBLE
44622: EQUAL
44623: IFTRUE 44627
44625: GO 44645
44627: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
44628: LD_ADDR_VAR 0 3
44632: PUSH
44633: LD_INT 23
44635: PUSH
44636: LD_INT 24
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: ST_TO_ADDR
44643: GO 44680
44645: LD_INT 98
44647: DOUBLE
44648: EQUAL
44649: IFTRUE 44653
44651: GO 44679
44653: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44654: LD_ADDR_VAR 0 3
44658: PUSH
44659: LD_INT 21
44661: PUSH
44662: LD_INT 22
44664: PUSH
44665: LD_INT 23
44667: PUSH
44668: LD_INT 24
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: ST_TO_ADDR
44677: GO 44680
44679: POP
// result := ( chassis in result ) ;
44680: LD_ADDR_VAR 0 3
44684: PUSH
44685: LD_VAR 0 1
44689: PUSH
44690: LD_VAR 0 3
44694: IN
44695: ST_TO_ADDR
// end ;
44696: LD_VAR 0 3
44700: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44701: LD_INT 0
44703: PPUSH
44704: PPUSH
44705: PPUSH
44706: PPUSH
44707: PPUSH
44708: PPUSH
44709: PPUSH
// result := array ;
44710: LD_ADDR_VAR 0 5
44714: PUSH
44715: LD_VAR 0 1
44719: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44720: LD_VAR 0 1
44724: NOT
44725: IFTRUE 44734
44727: PUSH
44728: LD_VAR 0 2
44732: NOT
44733: OR
44734: IFTRUE 44743
44736: PUSH
44737: LD_VAR 0 3
44741: NOT
44742: OR
44743: IFTRUE 44757
44745: PUSH
44746: LD_VAR 0 2
44750: PUSH
44751: LD_VAR 0 1
44755: GREATER
44756: OR
44757: IFTRUE 44771
44759: PUSH
44760: LD_VAR 0 3
44764: PUSH
44765: LD_VAR 0 1
44769: GREATER
44770: OR
44771: IFFALSE 44775
// exit ;
44773: GO 45071
// if direction then
44775: LD_VAR 0 4
44779: IFFALSE 44843
// begin d := 1 ;
44781: LD_ADDR_VAR 0 9
44785: PUSH
44786: LD_INT 1
44788: ST_TO_ADDR
// if i_from > i_to then
44789: LD_VAR 0 2
44793: PUSH
44794: LD_VAR 0 3
44798: GREATER
44799: IFFALSE 44825
// length := ( array - i_from ) + i_to else
44801: LD_ADDR_VAR 0 11
44805: PUSH
44806: LD_VAR 0 1
44810: PUSH
44811: LD_VAR 0 2
44815: MINUS
44816: PUSH
44817: LD_VAR 0 3
44821: PLUS
44822: ST_TO_ADDR
44823: GO 44841
// length := i_to - i_from ;
44825: LD_ADDR_VAR 0 11
44829: PUSH
44830: LD_VAR 0 3
44834: PUSH
44835: LD_VAR 0 2
44839: MINUS
44840: ST_TO_ADDR
// end else
44841: GO 44904
// begin d := - 1 ;
44843: LD_ADDR_VAR 0 9
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: ST_TO_ADDR
// if i_from > i_to then
44852: LD_VAR 0 2
44856: PUSH
44857: LD_VAR 0 3
44861: GREATER
44862: IFFALSE 44882
// length := i_from - i_to else
44864: LD_ADDR_VAR 0 11
44868: PUSH
44869: LD_VAR 0 2
44873: PUSH
44874: LD_VAR 0 3
44878: MINUS
44879: ST_TO_ADDR
44880: GO 44904
// length := ( array - i_to ) + i_from ;
44882: LD_ADDR_VAR 0 11
44886: PUSH
44887: LD_VAR 0 1
44891: PUSH
44892: LD_VAR 0 3
44896: MINUS
44897: PUSH
44898: LD_VAR 0 2
44902: PLUS
44903: ST_TO_ADDR
// end ; if not length then
44904: LD_VAR 0 11
44908: NOT
44909: IFFALSE 44913
// exit ;
44911: GO 45071
// tmp := array ;
44913: LD_ADDR_VAR 0 10
44917: PUSH
44918: LD_VAR 0 1
44922: ST_TO_ADDR
// for i = 1 to length do
44923: LD_ADDR_VAR 0 6
44927: PUSH
44928: DOUBLE
44929: LD_INT 1
44931: DEC
44932: ST_TO_ADDR
44933: LD_VAR 0 11
44937: PUSH
44938: FOR_TO
44939: IFFALSE 45059
// begin for j = 1 to array do
44941: LD_ADDR_VAR 0 7
44945: PUSH
44946: DOUBLE
44947: LD_INT 1
44949: DEC
44950: ST_TO_ADDR
44951: LD_VAR 0 1
44955: PUSH
44956: FOR_TO
44957: IFFALSE 45045
// begin k := j + d ;
44959: LD_ADDR_VAR 0 8
44963: PUSH
44964: LD_VAR 0 7
44968: PUSH
44969: LD_VAR 0 9
44973: PLUS
44974: ST_TO_ADDR
// if k > array then
44975: LD_VAR 0 8
44979: PUSH
44980: LD_VAR 0 1
44984: GREATER
44985: IFFALSE 44995
// k := 1 ;
44987: LD_ADDR_VAR 0 8
44991: PUSH
44992: LD_INT 1
44994: ST_TO_ADDR
// if not k then
44995: LD_VAR 0 8
44999: NOT
45000: IFFALSE 45012
// k := array ;
45002: LD_ADDR_VAR 0 8
45006: PUSH
45007: LD_VAR 0 1
45011: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45012: LD_ADDR_VAR 0 10
45016: PUSH
45017: LD_VAR 0 10
45021: PPUSH
45022: LD_VAR 0 8
45026: PPUSH
45027: LD_VAR 0 1
45031: PUSH
45032: LD_VAR 0 7
45036: ARRAY
45037: PPUSH
45038: CALL_OW 1
45042: ST_TO_ADDR
// end ;
45043: GO 44956
45045: POP
45046: POP
// array := tmp ;
45047: LD_ADDR_VAR 0 1
45051: PUSH
45052: LD_VAR 0 10
45056: ST_TO_ADDR
// end ;
45057: GO 44938
45059: POP
45060: POP
// result := array ;
45061: LD_ADDR_VAR 0 5
45065: PUSH
45066: LD_VAR 0 1
45070: ST_TO_ADDR
// end ;
45071: LD_VAR 0 5
45075: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45076: LD_INT 0
45078: PPUSH
45079: PPUSH
// result := 0 ;
45080: LD_ADDR_VAR 0 3
45084: PUSH
45085: LD_INT 0
45087: ST_TO_ADDR
// if not array or not value in array then
45088: LD_VAR 0 1
45092: NOT
45093: IFTRUE 45108
45095: PUSH
45096: LD_VAR 0 2
45100: PUSH
45101: LD_VAR 0 1
45105: IN
45106: NOT
45107: OR
45108: IFFALSE 45112
// exit ;
45110: GO 45166
// for i = 1 to array do
45112: LD_ADDR_VAR 0 4
45116: PUSH
45117: DOUBLE
45118: LD_INT 1
45120: DEC
45121: ST_TO_ADDR
45122: LD_VAR 0 1
45126: PUSH
45127: FOR_TO
45128: IFFALSE 45164
// if value = array [ i ] then
45130: LD_VAR 0 2
45134: PUSH
45135: LD_VAR 0 1
45139: PUSH
45140: LD_VAR 0 4
45144: ARRAY
45145: EQUAL
45146: IFFALSE 45162
// begin result := i ;
45148: LD_ADDR_VAR 0 3
45152: PUSH
45153: LD_VAR 0 4
45157: ST_TO_ADDR
// exit ;
45158: POP
45159: POP
45160: GO 45166
// end ;
45162: GO 45127
45164: POP
45165: POP
// end ;
45166: LD_VAR 0 3
45170: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45171: LD_INT 0
45173: PPUSH
// vc_chassis := chassis ;
45174: LD_ADDR_OWVAR 37
45178: PUSH
45179: LD_VAR 0 1
45183: ST_TO_ADDR
// vc_engine := engine ;
45184: LD_ADDR_OWVAR 39
45188: PUSH
45189: LD_VAR 0 2
45193: ST_TO_ADDR
// vc_control := control ;
45194: LD_ADDR_OWVAR 38
45198: PUSH
45199: LD_VAR 0 3
45203: ST_TO_ADDR
// vc_weapon := weapon ;
45204: LD_ADDR_OWVAR 40
45208: PUSH
45209: LD_VAR 0 4
45213: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45214: LD_ADDR_OWVAR 41
45218: PUSH
45219: LD_VAR 0 5
45223: ST_TO_ADDR
// end ;
45224: LD_VAR 0 6
45228: RET
// export function WantPlant ( unit ) ; var task ; begin
45229: LD_INT 0
45231: PPUSH
45232: PPUSH
// result := false ;
45233: LD_ADDR_VAR 0 2
45237: PUSH
45238: LD_INT 0
45240: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45241: LD_ADDR_VAR 0 3
45245: PUSH
45246: LD_VAR 0 1
45250: PPUSH
45251: CALL_OW 437
45255: ST_TO_ADDR
// if task then
45256: LD_VAR 0 3
45260: IFFALSE 45288
// if task [ 1 ] [ 1 ] = p then
45262: LD_VAR 0 3
45266: PUSH
45267: LD_INT 1
45269: ARRAY
45270: PUSH
45271: LD_INT 1
45273: ARRAY
45274: PUSH
45275: LD_STRING p
45277: EQUAL
45278: IFFALSE 45288
// result := true ;
45280: LD_ADDR_VAR 0 2
45284: PUSH
45285: LD_INT 1
45287: ST_TO_ADDR
// end ;
45288: LD_VAR 0 2
45292: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45293: LD_INT 0
45295: PPUSH
45296: PPUSH
45297: PPUSH
45298: PPUSH
// if pos < 1 then
45299: LD_VAR 0 2
45303: PUSH
45304: LD_INT 1
45306: LESS
45307: IFFALSE 45311
// exit ;
45309: GO 45614
// if pos = 1 then
45311: LD_VAR 0 2
45315: PUSH
45316: LD_INT 1
45318: EQUAL
45319: IFFALSE 45352
// result := Replace ( arr , pos [ 1 ] , value ) else
45321: LD_ADDR_VAR 0 4
45325: PUSH
45326: LD_VAR 0 1
45330: PPUSH
45331: LD_VAR 0 2
45335: PUSH
45336: LD_INT 1
45338: ARRAY
45339: PPUSH
45340: LD_VAR 0 3
45344: PPUSH
45345: CALL_OW 1
45349: ST_TO_ADDR
45350: GO 45614
// begin tmp := arr ;
45352: LD_ADDR_VAR 0 6
45356: PUSH
45357: LD_VAR 0 1
45361: ST_TO_ADDR
// s_arr := [ tmp ] ;
45362: LD_ADDR_VAR 0 7
45366: PUSH
45367: LD_VAR 0 6
45371: PUSH
45372: EMPTY
45373: LIST
45374: ST_TO_ADDR
// for i = 1 to pos - 1 do
45375: LD_ADDR_VAR 0 5
45379: PUSH
45380: DOUBLE
45381: LD_INT 1
45383: DEC
45384: ST_TO_ADDR
45385: LD_VAR 0 2
45389: PUSH
45390: LD_INT 1
45392: MINUS
45393: PUSH
45394: FOR_TO
45395: IFFALSE 45440
// begin tmp := tmp [ pos [ i ] ] ;
45397: LD_ADDR_VAR 0 6
45401: PUSH
45402: LD_VAR 0 6
45406: PUSH
45407: LD_VAR 0 2
45411: PUSH
45412: LD_VAR 0 5
45416: ARRAY
45417: ARRAY
45418: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45419: LD_ADDR_VAR 0 7
45423: PUSH
45424: LD_VAR 0 7
45428: PUSH
45429: LD_VAR 0 6
45433: PUSH
45434: EMPTY
45435: LIST
45436: ADD
45437: ST_TO_ADDR
// end ;
45438: GO 45394
45440: POP
45441: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45442: LD_ADDR_VAR 0 6
45446: PUSH
45447: LD_VAR 0 6
45451: PPUSH
45452: LD_VAR 0 2
45456: PUSH
45457: LD_VAR 0 2
45461: ARRAY
45462: PPUSH
45463: LD_VAR 0 3
45467: PPUSH
45468: CALL_OW 1
45472: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45473: LD_ADDR_VAR 0 7
45477: PUSH
45478: LD_VAR 0 7
45482: PPUSH
45483: LD_VAR 0 7
45487: PPUSH
45488: LD_VAR 0 6
45492: PPUSH
45493: CALL_OW 1
45497: ST_TO_ADDR
// for i = s_arr downto 2 do
45498: LD_ADDR_VAR 0 5
45502: PUSH
45503: DOUBLE
45504: LD_VAR 0 7
45508: INC
45509: ST_TO_ADDR
45510: LD_INT 2
45512: PUSH
45513: FOR_DOWNTO
45514: IFFALSE 45598
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45516: LD_ADDR_VAR 0 6
45520: PUSH
45521: LD_VAR 0 7
45525: PUSH
45526: LD_VAR 0 5
45530: PUSH
45531: LD_INT 1
45533: MINUS
45534: ARRAY
45535: PPUSH
45536: LD_VAR 0 2
45540: PUSH
45541: LD_VAR 0 5
45545: PUSH
45546: LD_INT 1
45548: MINUS
45549: ARRAY
45550: PPUSH
45551: LD_VAR 0 7
45555: PUSH
45556: LD_VAR 0 5
45560: ARRAY
45561: PPUSH
45562: CALL_OW 1
45566: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45567: LD_ADDR_VAR 0 7
45571: PUSH
45572: LD_VAR 0 7
45576: PPUSH
45577: LD_VAR 0 5
45581: PUSH
45582: LD_INT 1
45584: MINUS
45585: PPUSH
45586: LD_VAR 0 6
45590: PPUSH
45591: CALL_OW 1
45595: ST_TO_ADDR
// end ;
45596: GO 45513
45598: POP
45599: POP
// result := s_arr [ 1 ] ;
45600: LD_ADDR_VAR 0 4
45604: PUSH
45605: LD_VAR 0 7
45609: PUSH
45610: LD_INT 1
45612: ARRAY
45613: ST_TO_ADDR
// end ; end ;
45614: LD_VAR 0 4
45618: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45619: LD_INT 0
45621: PPUSH
45622: PPUSH
// if not list then
45623: LD_VAR 0 1
45627: NOT
45628: IFFALSE 45632
// exit ;
45630: GO 45723
// i := list [ pos1 ] ;
45632: LD_ADDR_VAR 0 5
45636: PUSH
45637: LD_VAR 0 1
45641: PUSH
45642: LD_VAR 0 2
45646: ARRAY
45647: ST_TO_ADDR
// if not i then
45648: LD_VAR 0 5
45652: NOT
45653: IFFALSE 45657
// exit ;
45655: GO 45723
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45657: LD_ADDR_VAR 0 1
45661: PUSH
45662: LD_VAR 0 1
45666: PPUSH
45667: LD_VAR 0 2
45671: PPUSH
45672: LD_VAR 0 1
45676: PUSH
45677: LD_VAR 0 3
45681: ARRAY
45682: PPUSH
45683: CALL_OW 1
45687: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45688: LD_ADDR_VAR 0 1
45692: PUSH
45693: LD_VAR 0 1
45697: PPUSH
45698: LD_VAR 0 3
45702: PPUSH
45703: LD_VAR 0 5
45707: PPUSH
45708: CALL_OW 1
45712: ST_TO_ADDR
// result := list ;
45713: LD_ADDR_VAR 0 4
45717: PUSH
45718: LD_VAR 0 1
45722: ST_TO_ADDR
// end ;
45723: LD_VAR 0 4
45727: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45728: LD_INT 0
45730: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45731: LD_ADDR_VAR 0 5
45735: PUSH
45736: LD_VAR 0 1
45740: PPUSH
45741: CALL_OW 250
45745: PPUSH
45746: LD_VAR 0 1
45750: PPUSH
45751: CALL_OW 251
45755: PPUSH
45756: LD_VAR 0 2
45760: PPUSH
45761: LD_VAR 0 3
45765: PPUSH
45766: LD_VAR 0 4
45770: PPUSH
45771: CALL 46153 0 5
45775: ST_TO_ADDR
// end ;
45776: LD_VAR 0 5
45780: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
45781: LD_INT 0
45783: PPUSH
45784: PPUSH
45785: PPUSH
45786: PPUSH
// if not list or not unit then
45787: LD_VAR 0 2
45791: NOT
45792: IFTRUE 45801
45794: PUSH
45795: LD_VAR 0 1
45799: NOT
45800: OR
45801: IFFALSE 45805
// exit ;
45803: GO 46148
// result := [ ] ;
45805: LD_ADDR_VAR 0 5
45809: PUSH
45810: EMPTY
45811: ST_TO_ADDR
// for i in list do
45812: LD_ADDR_VAR 0 6
45816: PUSH
45817: LD_VAR 0 2
45821: PUSH
45822: FOR_IN
45823: IFFALSE 46041
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45825: LD_ADDR_VAR 0 8
45829: PUSH
45830: LD_VAR 0 1
45834: PPUSH
45835: LD_VAR 0 6
45839: PUSH
45840: LD_INT 1
45842: ARRAY
45843: PPUSH
45844: LD_VAR 0 6
45848: PUSH
45849: LD_INT 2
45851: ARRAY
45852: PPUSH
45853: CALL_OW 297
45857: ST_TO_ADDR
// if not Count ( result ) then
45858: LD_VAR 0 5
45862: PPUSH
45863: CALL 42375 0 1
45867: NOT
45868: IFFALSE 45901
// begin result := Join ( result , [ i , tmp ] ) ;
45870: LD_ADDR_VAR 0 5
45874: PUSH
45875: LD_VAR 0 5
45879: PPUSH
45880: LD_VAR 0 6
45884: PUSH
45885: LD_VAR 0 8
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PPUSH
45894: CALL 78351 0 2
45898: ST_TO_ADDR
// continue ;
45899: GO 45822
// end ; if result [ result ] [ 2 ] <= tmp then
45901: LD_VAR 0 5
45905: PUSH
45906: LD_VAR 0 5
45910: ARRAY
45911: PUSH
45912: LD_INT 2
45914: ARRAY
45915: PUSH
45916: LD_VAR 0 8
45920: LESSEQUAL
45921: IFFALSE 45954
// result := Join ( result , [ i , tmp ] ) else
45923: LD_ADDR_VAR 0 5
45927: PUSH
45928: LD_VAR 0 5
45932: PPUSH
45933: LD_VAR 0 6
45937: PUSH
45938: LD_VAR 0 8
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PPUSH
45947: CALL 78351 0 2
45951: ST_TO_ADDR
45952: GO 46039
// begin for j := 1 to Count ( result ) do
45954: LD_ADDR_VAR 0 7
45958: PUSH
45959: DOUBLE
45960: LD_INT 1
45962: DEC
45963: ST_TO_ADDR
45964: LD_VAR 0 5
45968: PPUSH
45969: CALL 42375 0 1
45973: PUSH
45974: FOR_TO
45975: IFFALSE 46037
// begin if tmp < result [ j ] [ 2 ] then
45977: LD_VAR 0 8
45981: PUSH
45982: LD_VAR 0 5
45986: PUSH
45987: LD_VAR 0 7
45991: ARRAY
45992: PUSH
45993: LD_INT 2
45995: ARRAY
45996: LESS
45997: IFFALSE 46035
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45999: LD_ADDR_VAR 0 5
46003: PUSH
46004: LD_VAR 0 5
46008: PPUSH
46009: LD_VAR 0 7
46013: PPUSH
46014: LD_VAR 0 6
46018: PUSH
46019: LD_VAR 0 8
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PPUSH
46028: CALL_OW 2
46032: ST_TO_ADDR
// break ;
46033: GO 46037
// end ; end ;
46035: GO 45974
46037: POP
46038: POP
// end ; end ;
46039: GO 45822
46041: POP
46042: POP
// if result and not asc then
46043: LD_VAR 0 5
46047: IFFALSE 46056
46049: PUSH
46050: LD_VAR 0 3
46054: NOT
46055: AND
46056: IFFALSE 46073
// result := ReverseArray ( result ) ;
46058: LD_ADDR_VAR 0 5
46062: PUSH
46063: LD_VAR 0 5
46067: PPUSH
46068: CALL 73431 0 1
46072: ST_TO_ADDR
// tmp := [ ] ;
46073: LD_ADDR_VAR 0 8
46077: PUSH
46078: EMPTY
46079: ST_TO_ADDR
// if mode then
46080: LD_VAR 0 4
46084: IFFALSE 46148
// begin for i := 1 to result do
46086: LD_ADDR_VAR 0 6
46090: PUSH
46091: DOUBLE
46092: LD_INT 1
46094: DEC
46095: ST_TO_ADDR
46096: LD_VAR 0 5
46100: PUSH
46101: FOR_TO
46102: IFFALSE 46136
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
46104: LD_ADDR_VAR 0 8
46108: PUSH
46109: LD_VAR 0 8
46113: PPUSH
46114: LD_VAR 0 5
46118: PUSH
46119: LD_VAR 0 6
46123: ARRAY
46124: PUSH
46125: LD_INT 1
46127: ARRAY
46128: PPUSH
46129: CALL 78351 0 2
46133: ST_TO_ADDR
46134: GO 46101
46136: POP
46137: POP
// result := tmp ;
46138: LD_ADDR_VAR 0 5
46142: PUSH
46143: LD_VAR 0 8
46147: ST_TO_ADDR
// end ; end ;
46148: LD_VAR 0 5
46152: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46153: LD_INT 0
46155: PPUSH
46156: PPUSH
46157: PPUSH
46158: PPUSH
// if not list then
46159: LD_VAR 0 3
46163: NOT
46164: IFFALSE 46168
// exit ;
46166: GO 46558
// result := [ ] ;
46168: LD_ADDR_VAR 0 6
46172: PUSH
46173: EMPTY
46174: ST_TO_ADDR
// for i in list do
46175: LD_ADDR_VAR 0 7
46179: PUSH
46180: LD_VAR 0 3
46184: PUSH
46185: FOR_IN
46186: IFFALSE 46388
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46188: LD_ADDR_VAR 0 9
46192: PUSH
46193: LD_VAR 0 7
46197: PPUSH
46198: LD_VAR 0 1
46202: PPUSH
46203: LD_VAR 0 2
46207: PPUSH
46208: CALL_OW 297
46212: ST_TO_ADDR
// if not result then
46213: LD_VAR 0 6
46217: NOT
46218: IFFALSE 46244
// result := [ [ i , tmp ] ] else
46220: LD_ADDR_VAR 0 6
46224: PUSH
46225: LD_VAR 0 7
46229: PUSH
46230: LD_VAR 0 9
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: EMPTY
46240: LIST
46241: ST_TO_ADDR
46242: GO 46386
// begin if result [ result ] [ 2 ] <= tmp then
46244: LD_VAR 0 6
46248: PUSH
46249: LD_VAR 0 6
46253: ARRAY
46254: PUSH
46255: LD_INT 2
46257: ARRAY
46258: PUSH
46259: LD_VAR 0 9
46263: LESSEQUAL
46264: IFFALSE 46306
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46266: LD_ADDR_VAR 0 6
46270: PUSH
46271: LD_VAR 0 6
46275: PPUSH
46276: LD_VAR 0 6
46280: PUSH
46281: LD_INT 1
46283: PLUS
46284: PPUSH
46285: LD_VAR 0 7
46289: PUSH
46290: LD_VAR 0 9
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PPUSH
46299: CALL_OW 2
46303: ST_TO_ADDR
46304: GO 46386
// for j := 1 to result do
46306: LD_ADDR_VAR 0 8
46310: PUSH
46311: DOUBLE
46312: LD_INT 1
46314: DEC
46315: ST_TO_ADDR
46316: LD_VAR 0 6
46320: PUSH
46321: FOR_TO
46322: IFFALSE 46384
// begin if tmp < result [ j ] [ 2 ] then
46324: LD_VAR 0 9
46328: PUSH
46329: LD_VAR 0 6
46333: PUSH
46334: LD_VAR 0 8
46338: ARRAY
46339: PUSH
46340: LD_INT 2
46342: ARRAY
46343: LESS
46344: IFFALSE 46382
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46346: LD_ADDR_VAR 0 6
46350: PUSH
46351: LD_VAR 0 6
46355: PPUSH
46356: LD_VAR 0 8
46360: PPUSH
46361: LD_VAR 0 7
46365: PUSH
46366: LD_VAR 0 9
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PPUSH
46375: CALL_OW 2
46379: ST_TO_ADDR
// break ;
46380: GO 46384
// end ; end ;
46382: GO 46321
46384: POP
46385: POP
// end ; end ;
46386: GO 46185
46388: POP
46389: POP
// if result and not asc then
46390: LD_VAR 0 6
46394: IFFALSE 46403
46396: PUSH
46397: LD_VAR 0 4
46401: NOT
46402: AND
46403: IFFALSE 46478
// begin tmp := result ;
46405: LD_ADDR_VAR 0 9
46409: PUSH
46410: LD_VAR 0 6
46414: ST_TO_ADDR
// for i = tmp downto 1 do
46415: LD_ADDR_VAR 0 7
46419: PUSH
46420: DOUBLE
46421: LD_VAR 0 9
46425: INC
46426: ST_TO_ADDR
46427: LD_INT 1
46429: PUSH
46430: FOR_DOWNTO
46431: IFFALSE 46476
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46433: LD_ADDR_VAR 0 6
46437: PUSH
46438: LD_VAR 0 6
46442: PPUSH
46443: LD_VAR 0 9
46447: PUSH
46448: LD_VAR 0 7
46452: MINUS
46453: PUSH
46454: LD_INT 1
46456: PLUS
46457: PPUSH
46458: LD_VAR 0 9
46462: PUSH
46463: LD_VAR 0 7
46467: ARRAY
46468: PPUSH
46469: CALL_OW 1
46473: ST_TO_ADDR
46474: GO 46430
46476: POP
46477: POP
// end ; tmp := [ ] ;
46478: LD_ADDR_VAR 0 9
46482: PUSH
46483: EMPTY
46484: ST_TO_ADDR
// if mode then
46485: LD_VAR 0 5
46489: IFFALSE 46558
// begin for i = 1 to result do
46491: LD_ADDR_VAR 0 7
46495: PUSH
46496: DOUBLE
46497: LD_INT 1
46499: DEC
46500: ST_TO_ADDR
46501: LD_VAR 0 6
46505: PUSH
46506: FOR_TO
46507: IFFALSE 46546
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46509: LD_ADDR_VAR 0 9
46513: PUSH
46514: LD_VAR 0 9
46518: PPUSH
46519: LD_VAR 0 7
46523: PPUSH
46524: LD_VAR 0 6
46528: PUSH
46529: LD_VAR 0 7
46533: ARRAY
46534: PUSH
46535: LD_INT 1
46537: ARRAY
46538: PPUSH
46539: CALL_OW 1
46543: ST_TO_ADDR
46544: GO 46506
46546: POP
46547: POP
// result := tmp ;
46548: LD_ADDR_VAR 0 6
46552: PUSH
46553: LD_VAR 0 9
46557: ST_TO_ADDR
// end ; end ;
46558: LD_VAR 0 6
46562: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46563: LD_INT 0
46565: PPUSH
46566: PPUSH
46567: PPUSH
46568: PPUSH
46569: PPUSH
46570: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46571: LD_ADDR_VAR 0 5
46575: PUSH
46576: LD_INT 0
46578: PUSH
46579: LD_INT 0
46581: PUSH
46582: LD_INT 0
46584: PUSH
46585: EMPTY
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: ST_TO_ADDR
// if not x or not y then
46593: LD_VAR 0 2
46597: NOT
46598: IFTRUE 46607
46600: PUSH
46601: LD_VAR 0 3
46605: NOT
46606: OR
46607: IFFALSE 46611
// exit ;
46609: GO 48267
// if not range then
46611: LD_VAR 0 4
46615: NOT
46616: IFFALSE 46626
// range := 10 ;
46618: LD_ADDR_VAR 0 4
46622: PUSH
46623: LD_INT 10
46625: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46626: LD_ADDR_VAR 0 8
46630: PUSH
46631: LD_INT 81
46633: PUSH
46634: LD_VAR 0 1
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 92
46645: PUSH
46646: LD_VAR 0 2
46650: PUSH
46651: LD_VAR 0 3
46655: PUSH
46656: LD_VAR 0 4
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 3
46669: PUSH
46670: LD_INT 21
46672: PUSH
46673: LD_INT 3
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: LIST
46688: PPUSH
46689: CALL_OW 69
46693: ST_TO_ADDR
// if not tmp then
46694: LD_VAR 0 8
46698: NOT
46699: IFFALSE 46703
// exit ;
46701: GO 48267
// for i in tmp do
46703: LD_ADDR_VAR 0 6
46707: PUSH
46708: LD_VAR 0 8
46712: PUSH
46713: FOR_IN
46714: IFFALSE 48242
// begin points := [ 0 , 0 , 0 ] ;
46716: LD_ADDR_VAR 0 9
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: LIST
46734: ST_TO_ADDR
// bpoints := 1 ;
46735: LD_ADDR_VAR 0 10
46739: PUSH
46740: LD_INT 1
46742: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46743: LD_VAR 0 6
46747: PPUSH
46748: CALL_OW 247
46752: PUSH
46753: LD_INT 1
46755: DOUBLE
46756: EQUAL
46757: IFTRUE 46761
46759: GO 47343
46761: POP
// begin if GetClass ( i ) = 1 then
46762: LD_VAR 0 6
46766: PPUSH
46767: CALL_OW 257
46771: PUSH
46772: LD_INT 1
46774: EQUAL
46775: IFFALSE 46796
// points := [ 10 , 5 , 3 ] ;
46777: LD_ADDR_VAR 0 9
46781: PUSH
46782: LD_INT 10
46784: PUSH
46785: LD_INT 5
46787: PUSH
46788: LD_INT 3
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: LIST
46795: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46796: LD_VAR 0 6
46800: PPUSH
46801: CALL_OW 257
46805: PUSH
46806: LD_INT 2
46808: PUSH
46809: LD_INT 3
46811: PUSH
46812: LD_INT 4
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: LIST
46819: IN
46820: IFFALSE 46841
// points := [ 3 , 2 , 1 ] ;
46822: LD_ADDR_VAR 0 9
46826: PUSH
46827: LD_INT 3
46829: PUSH
46830: LD_INT 2
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: LIST
46840: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46841: LD_VAR 0 6
46845: PPUSH
46846: CALL_OW 257
46850: PUSH
46851: LD_INT 5
46853: EQUAL
46854: IFFALSE 46875
// points := [ 130 , 5 , 2 ] ;
46856: LD_ADDR_VAR 0 9
46860: PUSH
46861: LD_INT 130
46863: PUSH
46864: LD_INT 5
46866: PUSH
46867: LD_INT 2
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: LIST
46874: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46875: LD_VAR 0 6
46879: PPUSH
46880: CALL_OW 257
46884: PUSH
46885: LD_INT 8
46887: EQUAL
46888: IFFALSE 46909
// points := [ 35 , 35 , 30 ] ;
46890: LD_ADDR_VAR 0 9
46894: PUSH
46895: LD_INT 35
46897: PUSH
46898: LD_INT 35
46900: PUSH
46901: LD_INT 30
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: LIST
46908: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46909: LD_VAR 0 6
46913: PPUSH
46914: CALL_OW 257
46918: PUSH
46919: LD_INT 9
46921: EQUAL
46922: IFFALSE 46943
// points := [ 20 , 55 , 40 ] ;
46924: LD_ADDR_VAR 0 9
46928: PUSH
46929: LD_INT 20
46931: PUSH
46932: LD_INT 55
46934: PUSH
46935: LD_INT 40
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: LIST
46942: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46943: LD_VAR 0 6
46947: PPUSH
46948: CALL_OW 257
46952: PUSH
46953: LD_INT 12
46955: PUSH
46956: LD_INT 16
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: IN
46963: IFFALSE 46984
// points := [ 5 , 3 , 2 ] ;
46965: LD_ADDR_VAR 0 9
46969: PUSH
46970: LD_INT 5
46972: PUSH
46973: LD_INT 3
46975: PUSH
46976: LD_INT 2
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: LIST
46983: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46984: LD_VAR 0 6
46988: PPUSH
46989: CALL_OW 257
46993: PUSH
46994: LD_INT 17
46996: EQUAL
46997: IFFALSE 47018
// points := [ 100 , 50 , 75 ] ;
46999: LD_ADDR_VAR 0 9
47003: PUSH
47004: LD_INT 100
47006: PUSH
47007: LD_INT 50
47009: PUSH
47010: LD_INT 75
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: LIST
47017: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47018: LD_VAR 0 6
47022: PPUSH
47023: CALL_OW 257
47027: PUSH
47028: LD_INT 15
47030: EQUAL
47031: IFFALSE 47052
// points := [ 10 , 5 , 3 ] ;
47033: LD_ADDR_VAR 0 9
47037: PUSH
47038: LD_INT 10
47040: PUSH
47041: LD_INT 5
47043: PUSH
47044: LD_INT 3
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: LIST
47051: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47052: LD_VAR 0 6
47056: PPUSH
47057: CALL_OW 257
47061: PUSH
47062: LD_INT 14
47064: EQUAL
47065: IFFALSE 47086
// points := [ 10 , 0 , 0 ] ;
47067: LD_ADDR_VAR 0 9
47071: PUSH
47072: LD_INT 10
47074: PUSH
47075: LD_INT 0
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: LIST
47085: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47086: LD_VAR 0 6
47090: PPUSH
47091: CALL_OW 257
47095: PUSH
47096: LD_INT 11
47098: EQUAL
47099: IFFALSE 47120
// points := [ 30 , 10 , 5 ] ;
47101: LD_ADDR_VAR 0 9
47105: PUSH
47106: LD_INT 30
47108: PUSH
47109: LD_INT 10
47111: PUSH
47112: LD_INT 5
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: LIST
47119: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47120: LD_VAR 0 1
47124: PPUSH
47125: LD_INT 5
47127: PPUSH
47128: CALL_OW 321
47132: PUSH
47133: LD_INT 2
47135: EQUAL
47136: IFFALSE 47153
// bpoints := bpoints * 1.8 ;
47138: LD_ADDR_VAR 0 10
47142: PUSH
47143: LD_VAR 0 10
47147: PUSH
47148: LD_REAL  1.80000000000000E+0000
47151: MUL
47152: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47153: LD_VAR 0 6
47157: PPUSH
47158: CALL_OW 257
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: LD_INT 2
47168: PUSH
47169: LD_INT 3
47171: PUSH
47172: LD_INT 4
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: IN
47181: IFFALSE 47201
47183: PUSH
47184: LD_VAR 0 1
47188: PPUSH
47189: LD_INT 51
47191: PPUSH
47192: CALL_OW 321
47196: PUSH
47197: LD_INT 2
47199: EQUAL
47200: AND
47201: IFFALSE 47218
// bpoints := bpoints * 1.2 ;
47203: LD_ADDR_VAR 0 10
47207: PUSH
47208: LD_VAR 0 10
47212: PUSH
47213: LD_REAL  1.20000000000000E+0000
47216: MUL
47217: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47218: LD_VAR 0 6
47222: PPUSH
47223: CALL_OW 257
47227: PUSH
47228: LD_INT 5
47230: PUSH
47231: LD_INT 7
47233: PUSH
47234: LD_INT 9
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: LIST
47241: IN
47242: IFFALSE 47262
47244: PUSH
47245: LD_VAR 0 1
47249: PPUSH
47250: LD_INT 52
47252: PPUSH
47253: CALL_OW 321
47257: PUSH
47258: LD_INT 2
47260: EQUAL
47261: AND
47262: IFFALSE 47279
// bpoints := bpoints * 1.5 ;
47264: LD_ADDR_VAR 0 10
47268: PUSH
47269: LD_VAR 0 10
47273: PUSH
47274: LD_REAL  1.50000000000000E+0000
47277: MUL
47278: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47279: LD_VAR 0 1
47283: PPUSH
47284: LD_INT 66
47286: PPUSH
47287: CALL_OW 321
47291: PUSH
47292: LD_INT 2
47294: EQUAL
47295: IFFALSE 47312
// bpoints := bpoints * 1.1 ;
47297: LD_ADDR_VAR 0 10
47301: PUSH
47302: LD_VAR 0 10
47306: PUSH
47307: LD_REAL  1.10000000000000E+0000
47310: MUL
47311: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47312: LD_ADDR_VAR 0 10
47316: PUSH
47317: LD_VAR 0 10
47321: PUSH
47322: LD_VAR 0 6
47326: PPUSH
47327: LD_INT 1
47329: PPUSH
47330: CALL_OW 259
47334: PUSH
47335: LD_REAL  1.15000000000000E+0000
47338: MUL
47339: MUL
47340: ST_TO_ADDR
// end ; unit_vehicle :
47341: GO 48171
47343: LD_INT 2
47345: DOUBLE
47346: EQUAL
47347: IFTRUE 47351
47349: GO 48159
47351: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47352: LD_VAR 0 6
47356: PPUSH
47357: CALL_OW 264
47361: PUSH
47362: LD_INT 2
47364: PUSH
47365: LD_INT 42
47367: PUSH
47368: LD_INT 24
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: LIST
47375: IN
47376: IFFALSE 47397
// points := [ 25 , 5 , 3 ] ;
47378: LD_ADDR_VAR 0 9
47382: PUSH
47383: LD_INT 25
47385: PUSH
47386: LD_INT 5
47388: PUSH
47389: LD_INT 3
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: LIST
47396: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47397: LD_VAR 0 6
47401: PPUSH
47402: CALL_OW 264
47406: PUSH
47407: LD_INT 4
47409: PUSH
47410: LD_INT 43
47412: PUSH
47413: LD_INT 25
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: LIST
47420: IN
47421: IFFALSE 47442
// points := [ 40 , 15 , 5 ] ;
47423: LD_ADDR_VAR 0 9
47427: PUSH
47428: LD_INT 40
47430: PUSH
47431: LD_INT 15
47433: PUSH
47434: LD_INT 5
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: LIST
47441: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47442: LD_VAR 0 6
47446: PPUSH
47447: CALL_OW 264
47451: PUSH
47452: LD_INT 3
47454: PUSH
47455: LD_INT 23
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: IN
47462: IFFALSE 47483
// points := [ 7 , 25 , 8 ] ;
47464: LD_ADDR_VAR 0 9
47468: PUSH
47469: LD_INT 7
47471: PUSH
47472: LD_INT 25
47474: PUSH
47475: LD_INT 8
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: LIST
47482: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47483: LD_VAR 0 6
47487: PPUSH
47488: CALL_OW 264
47492: PUSH
47493: LD_INT 5
47495: PUSH
47496: LD_INT 27
47498: PUSH
47499: LD_INT 44
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: LIST
47506: IN
47507: IFFALSE 47528
// points := [ 14 , 50 , 16 ] ;
47509: LD_ADDR_VAR 0 9
47513: PUSH
47514: LD_INT 14
47516: PUSH
47517: LD_INT 50
47519: PUSH
47520: LD_INT 16
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: LIST
47527: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47528: LD_VAR 0 6
47532: PPUSH
47533: CALL_OW 264
47537: PUSH
47538: LD_INT 6
47540: PUSH
47541: LD_INT 46
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: IN
47548: IFFALSE 47569
// points := [ 32 , 120 , 70 ] ;
47550: LD_ADDR_VAR 0 9
47554: PUSH
47555: LD_INT 32
47557: PUSH
47558: LD_INT 120
47560: PUSH
47561: LD_INT 70
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: LIST
47568: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47569: LD_VAR 0 6
47573: PPUSH
47574: CALL_OW 264
47578: PUSH
47579: LD_INT 7
47581: PUSH
47582: LD_INT 28
47584: PUSH
47585: LD_INT 45
47587: PUSH
47588: LD_INT 92
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: IN
47597: IFFALSE 47618
// points := [ 35 , 20 , 45 ] ;
47599: LD_ADDR_VAR 0 9
47603: PUSH
47604: LD_INT 35
47606: PUSH
47607: LD_INT 20
47609: PUSH
47610: LD_INT 45
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: LIST
47617: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47618: LD_VAR 0 6
47622: PPUSH
47623: CALL_OW 264
47627: PUSH
47628: LD_INT 47
47630: PUSH
47631: EMPTY
47632: LIST
47633: IN
47634: IFFALSE 47655
// points := [ 67 , 45 , 75 ] ;
47636: LD_ADDR_VAR 0 9
47640: PUSH
47641: LD_INT 67
47643: PUSH
47644: LD_INT 45
47646: PUSH
47647: LD_INT 75
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: LIST
47654: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47655: LD_VAR 0 6
47659: PPUSH
47660: CALL_OW 264
47664: PUSH
47665: LD_INT 26
47667: PUSH
47668: EMPTY
47669: LIST
47670: IN
47671: IFFALSE 47692
// points := [ 120 , 30 , 80 ] ;
47673: LD_ADDR_VAR 0 9
47677: PUSH
47678: LD_INT 120
47680: PUSH
47681: LD_INT 30
47683: PUSH
47684: LD_INT 80
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: LIST
47691: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47692: LD_VAR 0 6
47696: PPUSH
47697: CALL_OW 264
47701: PUSH
47702: LD_INT 22
47704: PUSH
47705: EMPTY
47706: LIST
47707: IN
47708: IFFALSE 47729
// points := [ 40 , 1 , 1 ] ;
47710: LD_ADDR_VAR 0 9
47714: PUSH
47715: LD_INT 40
47717: PUSH
47718: LD_INT 1
47720: PUSH
47721: LD_INT 1
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: LIST
47728: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47729: LD_VAR 0 6
47733: PPUSH
47734: CALL_OW 264
47738: PUSH
47739: LD_INT 29
47741: PUSH
47742: EMPTY
47743: LIST
47744: IN
47745: IFFALSE 47766
// points := [ 70 , 200 , 400 ] ;
47747: LD_ADDR_VAR 0 9
47751: PUSH
47752: LD_INT 70
47754: PUSH
47755: LD_INT 200
47757: PUSH
47758: LD_INT 400
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: LIST
47765: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47766: LD_VAR 0 6
47770: PPUSH
47771: CALL_OW 264
47775: PUSH
47776: LD_INT 14
47778: PUSH
47779: LD_INT 53
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: IN
47786: IFFALSE 47807
// points := [ 40 , 10 , 20 ] ;
47788: LD_ADDR_VAR 0 9
47792: PUSH
47793: LD_INT 40
47795: PUSH
47796: LD_INT 10
47798: PUSH
47799: LD_INT 20
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: LIST
47806: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47807: LD_VAR 0 6
47811: PPUSH
47812: CALL_OW 264
47816: PUSH
47817: LD_INT 9
47819: PUSH
47820: EMPTY
47821: LIST
47822: IN
47823: IFFALSE 47844
// points := [ 5 , 70 , 20 ] ;
47825: LD_ADDR_VAR 0 9
47829: PUSH
47830: LD_INT 5
47832: PUSH
47833: LD_INT 70
47835: PUSH
47836: LD_INT 20
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: LIST
47843: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47844: LD_VAR 0 6
47848: PPUSH
47849: CALL_OW 264
47853: PUSH
47854: LD_INT 10
47856: PUSH
47857: EMPTY
47858: LIST
47859: IN
47860: IFFALSE 47881
// points := [ 35 , 110 , 70 ] ;
47862: LD_ADDR_VAR 0 9
47866: PUSH
47867: LD_INT 35
47869: PUSH
47870: LD_INT 110
47872: PUSH
47873: LD_INT 70
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: LIST
47880: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47881: LD_VAR 0 6
47885: PPUSH
47886: CALL_OW 265
47890: PUSH
47891: LD_INT 25
47893: EQUAL
47894: IFFALSE 47915
// points := [ 80 , 65 , 100 ] ;
47896: LD_ADDR_VAR 0 9
47900: PUSH
47901: LD_INT 80
47903: PUSH
47904: LD_INT 65
47906: PUSH
47907: LD_INT 100
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: LIST
47914: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47915: LD_VAR 0 6
47919: PPUSH
47920: CALL_OW 263
47924: PUSH
47925: LD_INT 1
47927: EQUAL
47928: IFFALSE 47963
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47930: LD_ADDR_VAR 0 10
47934: PUSH
47935: LD_VAR 0 10
47939: PUSH
47940: LD_VAR 0 6
47944: PPUSH
47945: CALL_OW 311
47949: PPUSH
47950: LD_INT 3
47952: PPUSH
47953: CALL_OW 259
47957: PUSH
47958: LD_INT 4
47960: MUL
47961: MUL
47962: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47963: LD_VAR 0 6
47967: PPUSH
47968: CALL_OW 263
47972: PUSH
47973: LD_INT 2
47975: EQUAL
47976: IFFALSE 48027
// begin j := IsControledBy ( i ) ;
47978: LD_ADDR_VAR 0 7
47982: PUSH
47983: LD_VAR 0 6
47987: PPUSH
47988: CALL_OW 312
47992: ST_TO_ADDR
// if j then
47993: LD_VAR 0 7
47997: IFFALSE 48027
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47999: LD_ADDR_VAR 0 10
48003: PUSH
48004: LD_VAR 0 10
48008: PUSH
48009: LD_VAR 0 7
48013: PPUSH
48014: LD_INT 3
48016: PPUSH
48017: CALL_OW 259
48021: PUSH
48022: LD_INT 3
48024: MUL
48025: MUL
48026: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48027: LD_VAR 0 6
48031: PPUSH
48032: CALL_OW 264
48036: PUSH
48037: LD_INT 5
48039: PUSH
48040: LD_INT 6
48042: PUSH
48043: LD_INT 46
48045: PUSH
48046: LD_INT 44
48048: PUSH
48049: LD_INT 47
48051: PUSH
48052: LD_INT 45
48054: PUSH
48055: LD_INT 28
48057: PUSH
48058: LD_INT 7
48060: PUSH
48061: LD_INT 27
48063: PUSH
48064: LD_INT 29
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: IN
48079: IFFALSE 48099
48081: PUSH
48082: LD_VAR 0 1
48086: PPUSH
48087: LD_INT 52
48089: PPUSH
48090: CALL_OW 321
48094: PUSH
48095: LD_INT 2
48097: EQUAL
48098: AND
48099: IFFALSE 48116
// bpoints := bpoints * 1.2 ;
48101: LD_ADDR_VAR 0 10
48105: PUSH
48106: LD_VAR 0 10
48110: PUSH
48111: LD_REAL  1.20000000000000E+0000
48114: MUL
48115: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48116: LD_VAR 0 6
48120: PPUSH
48121: CALL_OW 264
48125: PUSH
48126: LD_INT 6
48128: PUSH
48129: LD_INT 46
48131: PUSH
48132: LD_INT 47
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: LIST
48139: IN
48140: IFFALSE 48157
// bpoints := bpoints * 1.2 ;
48142: LD_ADDR_VAR 0 10
48146: PUSH
48147: LD_VAR 0 10
48151: PUSH
48152: LD_REAL  1.20000000000000E+0000
48155: MUL
48156: ST_TO_ADDR
// end ; unit_building :
48157: GO 48171
48159: LD_INT 3
48161: DOUBLE
48162: EQUAL
48163: IFTRUE 48167
48165: GO 48170
48167: POP
// ; end ;
48168: GO 48171
48170: POP
// for j = 1 to 3 do
48171: LD_ADDR_VAR 0 7
48175: PUSH
48176: DOUBLE
48177: LD_INT 1
48179: DEC
48180: ST_TO_ADDR
48181: LD_INT 3
48183: PUSH
48184: FOR_TO
48185: IFFALSE 48238
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48187: LD_ADDR_VAR 0 5
48191: PUSH
48192: LD_VAR 0 5
48196: PPUSH
48197: LD_VAR 0 7
48201: PPUSH
48202: LD_VAR 0 5
48206: PUSH
48207: LD_VAR 0 7
48211: ARRAY
48212: PUSH
48213: LD_VAR 0 9
48217: PUSH
48218: LD_VAR 0 7
48222: ARRAY
48223: PUSH
48224: LD_VAR 0 10
48228: MUL
48229: PLUS
48230: PPUSH
48231: CALL_OW 1
48235: ST_TO_ADDR
48236: GO 48184
48238: POP
48239: POP
// end ;
48240: GO 46713
48242: POP
48243: POP
// result := Replace ( result , 4 , tmp ) ;
48244: LD_ADDR_VAR 0 5
48248: PUSH
48249: LD_VAR 0 5
48253: PPUSH
48254: LD_INT 4
48256: PPUSH
48257: LD_VAR 0 8
48261: PPUSH
48262: CALL_OW 1
48266: ST_TO_ADDR
// end ;
48267: LD_VAR 0 5
48271: RET
// export function DangerAtRange ( unit , range ) ; begin
48272: LD_INT 0
48274: PPUSH
// if not unit then
48275: LD_VAR 0 1
48279: NOT
48280: IFFALSE 48284
// exit ;
48282: GO 48329
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48284: LD_ADDR_VAR 0 3
48288: PUSH
48289: LD_VAR 0 1
48293: PPUSH
48294: CALL_OW 255
48298: PPUSH
48299: LD_VAR 0 1
48303: PPUSH
48304: CALL_OW 250
48308: PPUSH
48309: LD_VAR 0 1
48313: PPUSH
48314: CALL_OW 251
48318: PPUSH
48319: LD_VAR 0 2
48323: PPUSH
48324: CALL 46563 0 4
48328: ST_TO_ADDR
// end ;
48329: LD_VAR 0 3
48333: RET
// export function DangerInArea ( side , area ) ; begin
48334: LD_INT 0
48336: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48337: LD_ADDR_VAR 0 3
48341: PUSH
48342: LD_VAR 0 2
48346: PPUSH
48347: LD_INT 81
48349: PUSH
48350: LD_VAR 0 1
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PPUSH
48359: CALL_OW 70
48363: ST_TO_ADDR
// end ;
48364: LD_VAR 0 3
48368: RET
// export function IsExtension ( b ) ; begin
48369: LD_INT 0
48371: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48372: LD_ADDR_VAR 0 2
48376: PUSH
48377: LD_VAR 0 1
48381: PUSH
48382: LD_INT 23
48384: PUSH
48385: LD_INT 20
48387: PUSH
48388: LD_INT 22
48390: PUSH
48391: LD_INT 17
48393: PUSH
48394: LD_INT 24
48396: PUSH
48397: LD_INT 21
48399: PUSH
48400: LD_INT 19
48402: PUSH
48403: LD_INT 16
48405: PUSH
48406: LD_INT 25
48408: PUSH
48409: LD_INT 18
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: IN
48424: ST_TO_ADDR
// end ;
48425: LD_VAR 0 2
48429: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48430: LD_INT 0
48432: PPUSH
48433: PPUSH
48434: PPUSH
// result := [ ] ;
48435: LD_ADDR_VAR 0 4
48439: PUSH
48440: EMPTY
48441: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48442: LD_ADDR_VAR 0 5
48446: PUSH
48447: LD_VAR 0 2
48451: PPUSH
48452: LD_INT 21
48454: PUSH
48455: LD_INT 3
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PPUSH
48462: CALL_OW 70
48466: ST_TO_ADDR
// if not tmp then
48467: LD_VAR 0 5
48471: NOT
48472: IFFALSE 48476
// exit ;
48474: GO 48540
// if checkLink then
48476: LD_VAR 0 3
48480: IFFALSE 48530
// begin for i in tmp do
48482: LD_ADDR_VAR 0 6
48486: PUSH
48487: LD_VAR 0 5
48491: PUSH
48492: FOR_IN
48493: IFFALSE 48528
// if GetBase ( i ) <> base then
48495: LD_VAR 0 6
48499: PPUSH
48500: CALL_OW 274
48504: PUSH
48505: LD_VAR 0 1
48509: NONEQUAL
48510: IFFALSE 48526
// ComLinkToBase ( base , i ) ;
48512: LD_VAR 0 1
48516: PPUSH
48517: LD_VAR 0 6
48521: PPUSH
48522: CALL_OW 169
48526: GO 48492
48528: POP
48529: POP
// end ; result := tmp ;
48530: LD_ADDR_VAR 0 4
48534: PUSH
48535: LD_VAR 0 5
48539: ST_TO_ADDR
// end ;
48540: LD_VAR 0 4
48544: RET
// export function ComComplete ( units , b ) ; var i ; begin
48545: LD_INT 0
48547: PPUSH
48548: PPUSH
// if not units then
48549: LD_VAR 0 1
48553: NOT
48554: IFFALSE 48558
// exit ;
48556: GO 48648
// for i in units do
48558: LD_ADDR_VAR 0 4
48562: PUSH
48563: LD_VAR 0 1
48567: PUSH
48568: FOR_IN
48569: IFFALSE 48646
// if BuildingStatus ( b ) = bs_build then
48571: LD_VAR 0 2
48575: PPUSH
48576: CALL_OW 461
48580: PUSH
48581: LD_INT 1
48583: EQUAL
48584: IFFALSE 48644
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48586: LD_VAR 0 4
48590: PPUSH
48591: LD_STRING h
48593: PUSH
48594: LD_VAR 0 2
48598: PPUSH
48599: CALL_OW 250
48603: PUSH
48604: LD_VAR 0 2
48608: PPUSH
48609: CALL_OW 251
48613: PUSH
48614: LD_VAR 0 2
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: PUSH
48637: EMPTY
48638: LIST
48639: PPUSH
48640: CALL_OW 446
48644: GO 48568
48646: POP
48647: POP
// end ;
48648: LD_VAR 0 3
48652: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48653: LD_INT 0
48655: PPUSH
48656: PPUSH
48657: PPUSH
48658: PPUSH
48659: PPUSH
48660: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48661: LD_VAR 0 1
48665: NOT
48666: IFTRUE 48683
48668: PUSH
48669: LD_VAR 0 1
48673: PPUSH
48674: CALL_OW 263
48678: PUSH
48679: LD_INT 2
48681: NONEQUAL
48682: OR
48683: IFFALSE 48687
// exit ;
48685: GO 49003
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48687: LD_ADDR_VAR 0 6
48691: PUSH
48692: LD_INT 22
48694: PUSH
48695: LD_VAR 0 1
48699: PPUSH
48700: CALL_OW 255
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 2
48711: PUSH
48712: LD_INT 30
48714: PUSH
48715: LD_INT 36
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 34
48724: PUSH
48725: LD_INT 31
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: LIST
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PPUSH
48741: CALL_OW 69
48745: ST_TO_ADDR
// if not tmp then
48746: LD_VAR 0 6
48750: NOT
48751: IFFALSE 48755
// exit ;
48753: GO 49003
// result := [ ] ;
48755: LD_ADDR_VAR 0 2
48759: PUSH
48760: EMPTY
48761: ST_TO_ADDR
// for i in tmp do
48762: LD_ADDR_VAR 0 3
48766: PUSH
48767: LD_VAR 0 6
48771: PUSH
48772: FOR_IN
48773: IFFALSE 48844
// begin t := UnitsInside ( i ) ;
48775: LD_ADDR_VAR 0 4
48779: PUSH
48780: LD_VAR 0 3
48784: PPUSH
48785: CALL_OW 313
48789: ST_TO_ADDR
// if t then
48790: LD_VAR 0 4
48794: IFFALSE 48842
// for j in t do
48796: LD_ADDR_VAR 0 7
48800: PUSH
48801: LD_VAR 0 4
48805: PUSH
48806: FOR_IN
48807: IFFALSE 48840
// result := Replace ( result , result + 1 , j ) ;
48809: LD_ADDR_VAR 0 2
48813: PUSH
48814: LD_VAR 0 2
48818: PPUSH
48819: LD_VAR 0 2
48823: PUSH
48824: LD_INT 1
48826: PLUS
48827: PPUSH
48828: LD_VAR 0 7
48832: PPUSH
48833: CALL_OW 1
48837: ST_TO_ADDR
48838: GO 48806
48840: POP
48841: POP
// end ;
48842: GO 48772
48844: POP
48845: POP
// if not result then
48846: LD_VAR 0 2
48850: NOT
48851: IFFALSE 48855
// exit ;
48853: GO 49003
// mech := result [ 1 ] ;
48855: LD_ADDR_VAR 0 5
48859: PUSH
48860: LD_VAR 0 2
48864: PUSH
48865: LD_INT 1
48867: ARRAY
48868: ST_TO_ADDR
// if result > 1 then
48869: LD_VAR 0 2
48873: PUSH
48874: LD_INT 1
48876: GREATER
48877: IFFALSE 48989
// begin for i = 2 to result do
48879: LD_ADDR_VAR 0 3
48883: PUSH
48884: DOUBLE
48885: LD_INT 2
48887: DEC
48888: ST_TO_ADDR
48889: LD_VAR 0 2
48893: PUSH
48894: FOR_TO
48895: IFFALSE 48987
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48897: LD_ADDR_VAR 0 4
48901: PUSH
48902: LD_VAR 0 2
48906: PUSH
48907: LD_VAR 0 3
48911: ARRAY
48912: PPUSH
48913: LD_INT 3
48915: PPUSH
48916: CALL_OW 259
48920: PUSH
48921: LD_VAR 0 2
48925: PUSH
48926: LD_VAR 0 3
48930: ARRAY
48931: PPUSH
48932: CALL_OW 432
48936: MINUS
48937: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48938: LD_VAR 0 4
48942: PUSH
48943: LD_VAR 0 5
48947: PPUSH
48948: LD_INT 3
48950: PPUSH
48951: CALL_OW 259
48955: PUSH
48956: LD_VAR 0 5
48960: PPUSH
48961: CALL_OW 432
48965: MINUS
48966: GREATEREQUAL
48967: IFFALSE 48985
// mech := result [ i ] ;
48969: LD_ADDR_VAR 0 5
48973: PUSH
48974: LD_VAR 0 2
48978: PUSH
48979: LD_VAR 0 3
48983: ARRAY
48984: ST_TO_ADDR
// end ;
48985: GO 48894
48987: POP
48988: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48989: LD_VAR 0 1
48993: PPUSH
48994: LD_VAR 0 5
48998: PPUSH
48999: CALL_OW 135
// end ;
49003: LD_VAR 0 2
49007: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49008: LD_INT 0
49010: PPUSH
49011: PPUSH
49012: PPUSH
49013: PPUSH
49014: PPUSH
49015: PPUSH
49016: PPUSH
49017: PPUSH
49018: PPUSH
49019: PPUSH
49020: PPUSH
49021: PPUSH
49022: PPUSH
// result := [ ] ;
49023: LD_ADDR_VAR 0 7
49027: PUSH
49028: EMPTY
49029: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49030: LD_VAR 0 1
49034: PPUSH
49035: CALL_OW 266
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: IN
49050: NOT
49051: IFFALSE 49055
// exit ;
49053: GO 50695
// if name then
49055: LD_VAR 0 3
49059: IFFALSE 49075
// SetBName ( base_dep , name ) ;
49061: LD_VAR 0 1
49065: PPUSH
49066: LD_VAR 0 3
49070: PPUSH
49071: CALL_OW 500
// base := GetBase ( base_dep ) ;
49075: LD_ADDR_VAR 0 15
49079: PUSH
49080: LD_VAR 0 1
49084: PPUSH
49085: CALL_OW 274
49089: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49090: LD_ADDR_VAR 0 16
49094: PUSH
49095: LD_VAR 0 1
49099: PPUSH
49100: CALL_OW 255
49104: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49105: LD_ADDR_VAR 0 17
49109: PUSH
49110: LD_VAR 0 1
49114: PPUSH
49115: CALL_OW 248
49119: ST_TO_ADDR
// if sources then
49120: LD_VAR 0 5
49124: IFFALSE 49171
// for i = 1 to 3 do
49126: LD_ADDR_VAR 0 8
49130: PUSH
49131: DOUBLE
49132: LD_INT 1
49134: DEC
49135: ST_TO_ADDR
49136: LD_INT 3
49138: PUSH
49139: FOR_TO
49140: IFFALSE 49169
// AddResourceType ( base , i , sources [ i ] ) ;
49142: LD_VAR 0 15
49146: PPUSH
49147: LD_VAR 0 8
49151: PPUSH
49152: LD_VAR 0 5
49156: PUSH
49157: LD_VAR 0 8
49161: ARRAY
49162: PPUSH
49163: CALL_OW 276
49167: GO 49139
49169: POP
49170: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49171: LD_ADDR_VAR 0 18
49175: PUSH
49176: LD_VAR 0 15
49180: PPUSH
49181: LD_VAR 0 2
49185: PPUSH
49186: LD_INT 1
49188: PPUSH
49189: CALL 48430 0 3
49193: ST_TO_ADDR
// InitHc ;
49194: CALL_OW 19
// InitUc ;
49198: CALL_OW 18
// uc_side := side ;
49202: LD_ADDR_OWVAR 20
49206: PUSH
49207: LD_VAR 0 16
49211: ST_TO_ADDR
// uc_nation := nation ;
49212: LD_ADDR_OWVAR 21
49216: PUSH
49217: LD_VAR 0 17
49221: ST_TO_ADDR
// if buildings then
49222: LD_VAR 0 18
49226: IFFALSE 50554
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49228: LD_ADDR_VAR 0 19
49232: PUSH
49233: LD_VAR 0 18
49237: PPUSH
49238: LD_INT 2
49240: PUSH
49241: LD_INT 30
49243: PUSH
49244: LD_INT 29
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 30
49253: PUSH
49254: LD_INT 30
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: LIST
49265: PPUSH
49266: CALL_OW 72
49270: ST_TO_ADDR
// if tmp then
49271: LD_VAR 0 19
49275: IFFALSE 49323
// for i in tmp do
49277: LD_ADDR_VAR 0 8
49281: PUSH
49282: LD_VAR 0 19
49286: PUSH
49287: FOR_IN
49288: IFFALSE 49321
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49290: LD_VAR 0 8
49294: PPUSH
49295: CALL_OW 250
49299: PPUSH
49300: LD_VAR 0 8
49304: PPUSH
49305: CALL_OW 251
49309: PPUSH
49310: LD_VAR 0 16
49314: PPUSH
49315: CALL_OW 441
49319: GO 49287
49321: POP
49322: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49323: LD_VAR 0 18
49327: PPUSH
49328: LD_INT 2
49330: PUSH
49331: LD_INT 30
49333: PUSH
49334: LD_INT 32
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 30
49343: PUSH
49344: LD_INT 33
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: LIST
49355: PPUSH
49356: CALL_OW 72
49360: IFFALSE 49448
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49362: LD_ADDR_VAR 0 8
49366: PUSH
49367: LD_VAR 0 18
49371: PPUSH
49372: LD_INT 2
49374: PUSH
49375: LD_INT 30
49377: PUSH
49378: LD_INT 32
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 30
49387: PUSH
49388: LD_INT 33
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: LIST
49399: PPUSH
49400: CALL_OW 72
49404: PUSH
49405: FOR_IN
49406: IFFALSE 49446
// begin if not GetBWeapon ( i ) then
49408: LD_VAR 0 8
49412: PPUSH
49413: CALL_OW 269
49417: NOT
49418: IFFALSE 49444
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49420: LD_VAR 0 8
49424: PPUSH
49425: LD_VAR 0 8
49429: PPUSH
49430: LD_VAR 0 2
49434: PPUSH
49435: CALL 50700 0 2
49439: PPUSH
49440: CALL_OW 431
// end ;
49444: GO 49405
49446: POP
49447: POP
// end ; for i = 1 to personel do
49448: LD_ADDR_VAR 0 8
49452: PUSH
49453: DOUBLE
49454: LD_INT 1
49456: DEC
49457: ST_TO_ADDR
49458: LD_VAR 0 6
49462: PUSH
49463: FOR_TO
49464: IFFALSE 50534
// begin if i > 4 then
49466: LD_VAR 0 8
49470: PUSH
49471: LD_INT 4
49473: GREATER
49474: IFFALSE 49478
// break ;
49476: GO 50534
// case i of 1 :
49478: LD_VAR 0 8
49482: PUSH
49483: LD_INT 1
49485: DOUBLE
49486: EQUAL
49487: IFTRUE 49491
49489: GO 49571
49491: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49492: LD_ADDR_VAR 0 12
49496: PUSH
49497: LD_VAR 0 18
49501: PPUSH
49502: LD_INT 22
49504: PUSH
49505: LD_VAR 0 16
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 58
49516: PUSH
49517: EMPTY
49518: LIST
49519: PUSH
49520: LD_INT 2
49522: PUSH
49523: LD_INT 30
49525: PUSH
49526: LD_INT 32
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 30
49535: PUSH
49536: LD_INT 4
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 30
49545: PUSH
49546: LD_INT 5
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: LIST
49563: PPUSH
49564: CALL_OW 72
49568: ST_TO_ADDR
49569: GO 49793
49571: LD_INT 2
49573: DOUBLE
49574: EQUAL
49575: IFTRUE 49579
49577: GO 49641
49579: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49580: LD_ADDR_VAR 0 12
49584: PUSH
49585: LD_VAR 0 18
49589: PPUSH
49590: LD_INT 22
49592: PUSH
49593: LD_VAR 0 16
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 2
49604: PUSH
49605: LD_INT 30
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 30
49617: PUSH
49618: LD_INT 1
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: LIST
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PPUSH
49634: CALL_OW 72
49638: ST_TO_ADDR
49639: GO 49793
49641: LD_INT 3
49643: DOUBLE
49644: EQUAL
49645: IFTRUE 49649
49647: GO 49711
49649: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49650: LD_ADDR_VAR 0 12
49654: PUSH
49655: LD_VAR 0 18
49659: PPUSH
49660: LD_INT 22
49662: PUSH
49663: LD_VAR 0 16
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 2
49674: PUSH
49675: LD_INT 30
49677: PUSH
49678: LD_INT 2
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 30
49687: PUSH
49688: LD_INT 3
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: LIST
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PPUSH
49704: CALL_OW 72
49708: ST_TO_ADDR
49709: GO 49793
49711: LD_INT 4
49713: DOUBLE
49714: EQUAL
49715: IFTRUE 49719
49717: GO 49792
49719: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49720: LD_ADDR_VAR 0 12
49724: PUSH
49725: LD_VAR 0 18
49729: PPUSH
49730: LD_INT 22
49732: PUSH
49733: LD_VAR 0 16
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: LD_INT 30
49747: PUSH
49748: LD_INT 6
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 30
49757: PUSH
49758: LD_INT 7
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 30
49767: PUSH
49768: LD_INT 8
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PPUSH
49785: CALL_OW 72
49789: ST_TO_ADDR
49790: GO 49793
49792: POP
// if i = 1 then
49793: LD_VAR 0 8
49797: PUSH
49798: LD_INT 1
49800: EQUAL
49801: IFFALSE 49912
// begin tmp := [ ] ;
49803: LD_ADDR_VAR 0 19
49807: PUSH
49808: EMPTY
49809: ST_TO_ADDR
// for j in f do
49810: LD_ADDR_VAR 0 9
49814: PUSH
49815: LD_VAR 0 12
49819: PUSH
49820: FOR_IN
49821: IFFALSE 49894
// if GetBType ( j ) = b_bunker then
49823: LD_VAR 0 9
49827: PPUSH
49828: CALL_OW 266
49832: PUSH
49833: LD_INT 32
49835: EQUAL
49836: IFFALSE 49863
// tmp := Insert ( tmp , 1 , j ) else
49838: LD_ADDR_VAR 0 19
49842: PUSH
49843: LD_VAR 0 19
49847: PPUSH
49848: LD_INT 1
49850: PPUSH
49851: LD_VAR 0 9
49855: PPUSH
49856: CALL_OW 2
49860: ST_TO_ADDR
49861: GO 49892
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49863: LD_ADDR_VAR 0 19
49867: PUSH
49868: LD_VAR 0 19
49872: PPUSH
49873: LD_VAR 0 19
49877: PUSH
49878: LD_INT 1
49880: PLUS
49881: PPUSH
49882: LD_VAR 0 9
49886: PPUSH
49887: CALL_OW 2
49891: ST_TO_ADDR
49892: GO 49820
49894: POP
49895: POP
// if tmp then
49896: LD_VAR 0 19
49900: IFFALSE 49912
// f := tmp ;
49902: LD_ADDR_VAR 0 12
49906: PUSH
49907: LD_VAR 0 19
49911: ST_TO_ADDR
// end ; x := personel [ i ] ;
49912: LD_ADDR_VAR 0 13
49916: PUSH
49917: LD_VAR 0 6
49921: PUSH
49922: LD_VAR 0 8
49926: ARRAY
49927: ST_TO_ADDR
// if x = - 1 then
49928: LD_VAR 0 13
49932: PUSH
49933: LD_INT 1
49935: NEG
49936: EQUAL
49937: IFFALSE 50148
// begin for j in f do
49939: LD_ADDR_VAR 0 9
49943: PUSH
49944: LD_VAR 0 12
49948: PUSH
49949: FOR_IN
49950: IFFALSE 50144
// repeat InitHc ;
49952: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49956: LD_VAR 0 9
49960: PPUSH
49961: CALL_OW 266
49965: PUSH
49966: LD_INT 5
49968: EQUAL
49969: IFFALSE 50039
// begin if UnitsInside ( j ) < 3 then
49971: LD_VAR 0 9
49975: PPUSH
49976: CALL_OW 313
49980: PUSH
49981: LD_INT 3
49983: LESS
49984: IFFALSE 50020
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49986: LD_INT 0
49988: PPUSH
49989: LD_INT 5
49991: PUSH
49992: LD_INT 8
49994: PUSH
49995: LD_INT 9
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: LIST
50002: PUSH
50003: LD_VAR 0 17
50007: ARRAY
50008: PPUSH
50009: LD_VAR 0 4
50013: PPUSH
50014: CALL_OW 380
50018: GO 50037
// PrepareHuman ( false , i , skill ) ;
50020: LD_INT 0
50022: PPUSH
50023: LD_VAR 0 8
50027: PPUSH
50028: LD_VAR 0 4
50032: PPUSH
50033: CALL_OW 380
// end else
50037: GO 50056
// PrepareHuman ( false , i , skill ) ;
50039: LD_INT 0
50041: PPUSH
50042: LD_VAR 0 8
50046: PPUSH
50047: LD_VAR 0 4
50051: PPUSH
50052: CALL_OW 380
// un := CreateHuman ;
50056: LD_ADDR_VAR 0 14
50060: PUSH
50061: CALL_OW 44
50065: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50066: LD_ADDR_VAR 0 7
50070: PUSH
50071: LD_VAR 0 7
50075: PPUSH
50076: LD_INT 1
50078: PPUSH
50079: LD_VAR 0 14
50083: PPUSH
50084: CALL_OW 2
50088: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50089: LD_VAR 0 14
50093: PPUSH
50094: LD_VAR 0 9
50098: PPUSH
50099: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50103: LD_VAR 0 9
50107: PPUSH
50108: CALL_OW 313
50112: PUSH
50113: LD_INT 6
50115: EQUAL
50116: IFTRUE 50140
50118: PUSH
50119: LD_VAR 0 9
50123: PPUSH
50124: CALL_OW 266
50128: PUSH
50129: LD_INT 32
50131: PUSH
50132: LD_INT 31
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: IN
50139: OR
50140: IFFALSE 49952
50142: GO 49949
50144: POP
50145: POP
// end else
50146: GO 50532
// for j = 1 to x do
50148: LD_ADDR_VAR 0 9
50152: PUSH
50153: DOUBLE
50154: LD_INT 1
50156: DEC
50157: ST_TO_ADDR
50158: LD_VAR 0 13
50162: PUSH
50163: FOR_TO
50164: IFFALSE 50530
// begin InitHc ;
50166: CALL_OW 19
// if not f then
50170: LD_VAR 0 12
50174: NOT
50175: IFFALSE 50264
// begin PrepareHuman ( false , i , skill ) ;
50177: LD_INT 0
50179: PPUSH
50180: LD_VAR 0 8
50184: PPUSH
50185: LD_VAR 0 4
50189: PPUSH
50190: CALL_OW 380
// un := CreateHuman ;
50194: LD_ADDR_VAR 0 14
50198: PUSH
50199: CALL_OW 44
50203: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50204: LD_ADDR_VAR 0 7
50208: PUSH
50209: LD_VAR 0 7
50213: PPUSH
50214: LD_INT 1
50216: PPUSH
50217: LD_VAR 0 14
50221: PPUSH
50222: CALL_OW 2
50226: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50227: LD_VAR 0 14
50231: PPUSH
50232: LD_VAR 0 1
50236: PPUSH
50237: CALL_OW 250
50241: PPUSH
50242: LD_VAR 0 1
50246: PPUSH
50247: CALL_OW 251
50251: PPUSH
50252: LD_INT 10
50254: PPUSH
50255: LD_INT 0
50257: PPUSH
50258: CALL_OW 50
// continue ;
50262: GO 50163
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50264: LD_VAR 0 12
50268: PUSH
50269: LD_INT 1
50271: ARRAY
50272: PPUSH
50273: CALL_OW 313
50277: IFFALSE 50305
50279: PUSH
50280: LD_VAR 0 12
50284: PUSH
50285: LD_INT 1
50287: ARRAY
50288: PPUSH
50289: CALL_OW 266
50293: PUSH
50294: LD_INT 32
50296: PUSH
50297: LD_INT 31
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: IN
50304: AND
50305: IFTRUE 50326
50307: PUSH
50308: LD_VAR 0 12
50312: PUSH
50313: LD_INT 1
50315: ARRAY
50316: PPUSH
50317: CALL_OW 313
50321: PUSH
50322: LD_INT 6
50324: EQUAL
50325: OR
50326: IFFALSE 50346
// f := Delete ( f , 1 ) ;
50328: LD_ADDR_VAR 0 12
50332: PUSH
50333: LD_VAR 0 12
50337: PPUSH
50338: LD_INT 1
50340: PPUSH
50341: CALL_OW 3
50345: ST_TO_ADDR
// if not f then
50346: LD_VAR 0 12
50350: NOT
50351: IFFALSE 50369
// begin x := x + 2 ;
50353: LD_ADDR_VAR 0 13
50357: PUSH
50358: LD_VAR 0 13
50362: PUSH
50363: LD_INT 2
50365: PLUS
50366: ST_TO_ADDR
// continue ;
50367: GO 50163
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50369: LD_VAR 0 12
50373: PUSH
50374: LD_INT 1
50376: ARRAY
50377: PPUSH
50378: CALL_OW 266
50382: PUSH
50383: LD_INT 5
50385: EQUAL
50386: IFFALSE 50460
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50388: LD_VAR 0 12
50392: PUSH
50393: LD_INT 1
50395: ARRAY
50396: PPUSH
50397: CALL_OW 313
50401: PUSH
50402: LD_INT 3
50404: LESS
50405: IFFALSE 50441
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50407: LD_INT 0
50409: PPUSH
50410: LD_INT 5
50412: PUSH
50413: LD_INT 8
50415: PUSH
50416: LD_INT 9
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: LIST
50423: PUSH
50424: LD_VAR 0 17
50428: ARRAY
50429: PPUSH
50430: LD_VAR 0 4
50434: PPUSH
50435: CALL_OW 380
50439: GO 50458
// PrepareHuman ( false , i , skill ) ;
50441: LD_INT 0
50443: PPUSH
50444: LD_VAR 0 8
50448: PPUSH
50449: LD_VAR 0 4
50453: PPUSH
50454: CALL_OW 380
// end else
50458: GO 50477
// PrepareHuman ( false , i , skill ) ;
50460: LD_INT 0
50462: PPUSH
50463: LD_VAR 0 8
50467: PPUSH
50468: LD_VAR 0 4
50472: PPUSH
50473: CALL_OW 380
// un := CreateHuman ;
50477: LD_ADDR_VAR 0 14
50481: PUSH
50482: CALL_OW 44
50486: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50487: LD_ADDR_VAR 0 7
50491: PUSH
50492: LD_VAR 0 7
50496: PPUSH
50497: LD_INT 1
50499: PPUSH
50500: LD_VAR 0 14
50504: PPUSH
50505: CALL_OW 2
50509: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50510: LD_VAR 0 14
50514: PPUSH
50515: LD_VAR 0 12
50519: PUSH
50520: LD_INT 1
50522: ARRAY
50523: PPUSH
50524: CALL_OW 52
// end ;
50528: GO 50163
50530: POP
50531: POP
// end ;
50532: GO 49463
50534: POP
50535: POP
// result := result ^ buildings ;
50536: LD_ADDR_VAR 0 7
50540: PUSH
50541: LD_VAR 0 7
50545: PUSH
50546: LD_VAR 0 18
50550: ADD
50551: ST_TO_ADDR
// end else
50552: GO 50695
// begin for i = 1 to personel do
50554: LD_ADDR_VAR 0 8
50558: PUSH
50559: DOUBLE
50560: LD_INT 1
50562: DEC
50563: ST_TO_ADDR
50564: LD_VAR 0 6
50568: PUSH
50569: FOR_TO
50570: IFFALSE 50693
// begin if i > 4 then
50572: LD_VAR 0 8
50576: PUSH
50577: LD_INT 4
50579: GREATER
50580: IFFALSE 50584
// break ;
50582: GO 50693
// x := personel [ i ] ;
50584: LD_ADDR_VAR 0 13
50588: PUSH
50589: LD_VAR 0 6
50593: PUSH
50594: LD_VAR 0 8
50598: ARRAY
50599: ST_TO_ADDR
// if x = - 1 then
50600: LD_VAR 0 13
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: EQUAL
50609: IFFALSE 50613
// continue ;
50611: GO 50569
// PrepareHuman ( false , i , skill ) ;
50613: LD_INT 0
50615: PPUSH
50616: LD_VAR 0 8
50620: PPUSH
50621: LD_VAR 0 4
50625: PPUSH
50626: CALL_OW 380
// un := CreateHuman ;
50630: LD_ADDR_VAR 0 14
50634: PUSH
50635: CALL_OW 44
50639: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50640: LD_VAR 0 14
50644: PPUSH
50645: LD_VAR 0 1
50649: PPUSH
50650: CALL_OW 250
50654: PPUSH
50655: LD_VAR 0 1
50659: PPUSH
50660: CALL_OW 251
50664: PPUSH
50665: LD_INT 10
50667: PPUSH
50668: LD_INT 0
50670: PPUSH
50671: CALL_OW 50
// result := result ^ un ;
50675: LD_ADDR_VAR 0 7
50679: PUSH
50680: LD_VAR 0 7
50684: PUSH
50685: LD_VAR 0 14
50689: ADD
50690: ST_TO_ADDR
// end ;
50691: GO 50569
50693: POP
50694: POP
// end ; end ;
50695: LD_VAR 0 7
50699: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50700: LD_INT 0
50702: PPUSH
50703: PPUSH
50704: PPUSH
50705: PPUSH
50706: PPUSH
50707: PPUSH
50708: PPUSH
50709: PPUSH
50710: PPUSH
50711: PPUSH
50712: PPUSH
50713: PPUSH
50714: PPUSH
50715: PPUSH
50716: PPUSH
50717: PPUSH
// result := false ;
50718: LD_ADDR_VAR 0 3
50722: PUSH
50723: LD_INT 0
50725: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50726: LD_VAR 0 1
50730: NOT
50731: IFTRUE 50756
50733: PUSH
50734: LD_VAR 0 1
50738: PPUSH
50739: CALL_OW 266
50743: PUSH
50744: LD_INT 32
50746: PUSH
50747: LD_INT 33
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: IN
50754: NOT
50755: OR
50756: IFFALSE 50760
// exit ;
50758: GO 51895
// nat := GetNation ( tower ) ;
50760: LD_ADDR_VAR 0 12
50764: PUSH
50765: LD_VAR 0 1
50769: PPUSH
50770: CALL_OW 248
50774: ST_TO_ADDR
// side := GetSide ( tower ) ;
50775: LD_ADDR_VAR 0 16
50779: PUSH
50780: LD_VAR 0 1
50784: PPUSH
50785: CALL_OW 255
50789: ST_TO_ADDR
// x := GetX ( tower ) ;
50790: LD_ADDR_VAR 0 10
50794: PUSH
50795: LD_VAR 0 1
50799: PPUSH
50800: CALL_OW 250
50804: ST_TO_ADDR
// y := GetY ( tower ) ;
50805: LD_ADDR_VAR 0 11
50809: PUSH
50810: LD_VAR 0 1
50814: PPUSH
50815: CALL_OW 251
50819: ST_TO_ADDR
// if not x or not y then
50820: LD_VAR 0 10
50824: NOT
50825: IFTRUE 50834
50827: PUSH
50828: LD_VAR 0 11
50832: NOT
50833: OR
50834: IFFALSE 50838
// exit ;
50836: GO 51895
// weapon := 0 ;
50838: LD_ADDR_VAR 0 18
50842: PUSH
50843: LD_INT 0
50845: ST_TO_ADDR
// fac_list := [ ] ;
50846: LD_ADDR_VAR 0 17
50850: PUSH
50851: EMPTY
50852: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50853: LD_ADDR_VAR 0 6
50857: PUSH
50858: LD_VAR 0 1
50862: PPUSH
50863: CALL_OW 274
50867: PPUSH
50868: LD_VAR 0 2
50872: PPUSH
50873: LD_INT 0
50875: PPUSH
50876: CALL 48430 0 3
50880: PPUSH
50881: LD_INT 30
50883: PUSH
50884: LD_INT 3
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PPUSH
50891: CALL_OW 72
50895: ST_TO_ADDR
// if not factories then
50896: LD_VAR 0 6
50900: NOT
50901: IFFALSE 50905
// exit ;
50903: GO 51895
// for i in factories do
50905: LD_ADDR_VAR 0 8
50909: PUSH
50910: LD_VAR 0 6
50914: PUSH
50915: FOR_IN
50916: IFFALSE 50941
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50918: LD_ADDR_VAR 0 17
50922: PUSH
50923: LD_VAR 0 17
50927: PUSH
50928: LD_VAR 0 8
50932: PPUSH
50933: CALL_OW 478
50937: UNION
50938: ST_TO_ADDR
50939: GO 50915
50941: POP
50942: POP
// if not fac_list then
50943: LD_VAR 0 17
50947: NOT
50948: IFFALSE 50952
// exit ;
50950: GO 51895
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50952: LD_ADDR_VAR 0 5
50956: PUSH
50957: LD_INT 4
50959: PUSH
50960: LD_INT 5
50962: PUSH
50963: LD_INT 9
50965: PUSH
50966: LD_INT 10
50968: PUSH
50969: LD_INT 6
50971: PUSH
50972: LD_INT 7
50974: PUSH
50975: LD_INT 11
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 27
50989: PUSH
50990: LD_INT 28
50992: PUSH
50993: LD_INT 26
50995: PUSH
50996: LD_INT 30
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 43
51007: PUSH
51008: LD_INT 44
51010: PUSH
51011: LD_INT 46
51013: PUSH
51014: LD_INT 45
51016: PUSH
51017: LD_INT 47
51019: PUSH
51020: LD_INT 49
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: LIST
51035: PUSH
51036: LD_VAR 0 12
51040: ARRAY
51041: ST_TO_ADDR
// list := list isect fac_list ;
51042: LD_ADDR_VAR 0 5
51046: PUSH
51047: LD_VAR 0 5
51051: PUSH
51052: LD_VAR 0 17
51056: ISECT
51057: ST_TO_ADDR
// if not list then
51058: LD_VAR 0 5
51062: NOT
51063: IFFALSE 51067
// exit ;
51065: GO 51895
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51067: LD_VAR 0 12
51071: PUSH
51072: LD_INT 3
51074: EQUAL
51075: IFFALSE 51087
51077: PUSH
51078: LD_INT 49
51080: PUSH
51081: LD_VAR 0 5
51085: IN
51086: AND
51087: IFFALSE 51107
51089: PUSH
51090: LD_INT 31
51092: PPUSH
51093: LD_VAR 0 16
51097: PPUSH
51098: CALL_OW 321
51102: PUSH
51103: LD_INT 2
51105: EQUAL
51106: AND
51107: IFFALSE 51167
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51109: LD_INT 22
51111: PUSH
51112: LD_VAR 0 16
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 35
51123: PUSH
51124: LD_INT 49
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 91
51133: PUSH
51134: LD_VAR 0 1
51138: PUSH
51139: LD_INT 10
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: LIST
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: LIST
51151: PPUSH
51152: CALL_OW 69
51156: NOT
51157: IFFALSE 51167
// weapon := ru_time_lapser ;
51159: LD_ADDR_VAR 0 18
51163: PUSH
51164: LD_INT 49
51166: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51167: LD_VAR 0 12
51171: PUSH
51172: LD_INT 1
51174: PUSH
51175: LD_INT 2
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: IN
51182: IFFALSE 51206
51184: PUSH
51185: LD_INT 11
51187: PUSH
51188: LD_VAR 0 5
51192: IN
51193: IFTRUE 51205
51195: PUSH
51196: LD_INT 30
51198: PUSH
51199: LD_VAR 0 5
51203: IN
51204: OR
51205: AND
51206: IFFALSE 51226
51208: PUSH
51209: LD_INT 6
51211: PPUSH
51212: LD_VAR 0 16
51216: PPUSH
51217: CALL_OW 321
51221: PUSH
51222: LD_INT 2
51224: EQUAL
51225: AND
51226: IFFALSE 51393
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51228: LD_INT 22
51230: PUSH
51231: LD_VAR 0 16
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 2
51242: PUSH
51243: LD_INT 35
51245: PUSH
51246: LD_INT 11
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 35
51255: PUSH
51256: LD_INT 30
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 91
51270: PUSH
51271: LD_VAR 0 1
51275: PUSH
51276: LD_INT 18
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: LIST
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: LIST
51288: PPUSH
51289: CALL_OW 69
51293: NOT
51294: IFFALSE 51370
51296: PUSH
51297: LD_INT 22
51299: PUSH
51300: LD_VAR 0 16
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 2
51311: PUSH
51312: LD_INT 30
51314: PUSH
51315: LD_INT 32
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 30
51324: PUSH
51325: LD_INT 33
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 91
51339: PUSH
51340: LD_VAR 0 1
51344: PUSH
51345: LD_INT 12
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: LIST
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: LIST
51357: PUSH
51358: EMPTY
51359: LIST
51360: PPUSH
51361: CALL_OW 69
51365: PUSH
51366: LD_INT 2
51368: GREATER
51369: AND
51370: IFFALSE 51393
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51372: LD_ADDR_VAR 0 18
51376: PUSH
51377: LD_INT 11
51379: PUSH
51380: LD_INT 30
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_VAR 0 12
51391: ARRAY
51392: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51393: LD_VAR 0 18
51397: NOT
51398: IFFALSE 51418
51400: PUSH
51401: LD_INT 40
51403: PPUSH
51404: LD_VAR 0 16
51408: PPUSH
51409: CALL_OW 321
51413: PUSH
51414: LD_INT 2
51416: EQUAL
51417: AND
51418: IFFALSE 51454
51420: PUSH
51421: LD_INT 7
51423: PUSH
51424: LD_VAR 0 5
51428: IN
51429: IFTRUE 51441
51431: PUSH
51432: LD_INT 28
51434: PUSH
51435: LD_VAR 0 5
51439: IN
51440: OR
51441: IFTRUE 51453
51443: PUSH
51444: LD_INT 45
51446: PUSH
51447: LD_VAR 0 5
51451: IN
51452: OR
51453: AND
51454: IFFALSE 51708
// begin hex := GetHexInfo ( x , y ) ;
51456: LD_ADDR_VAR 0 4
51460: PUSH
51461: LD_VAR 0 10
51465: PPUSH
51466: LD_VAR 0 11
51470: PPUSH
51471: CALL_OW 546
51475: ST_TO_ADDR
// if hex [ 1 ] then
51476: LD_VAR 0 4
51480: PUSH
51481: LD_INT 1
51483: ARRAY
51484: IFFALSE 51488
// exit ;
51486: GO 51895
// height := hex [ 2 ] ;
51488: LD_ADDR_VAR 0 15
51492: PUSH
51493: LD_VAR 0 4
51497: PUSH
51498: LD_INT 2
51500: ARRAY
51501: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51502: LD_ADDR_VAR 0 14
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: LD_INT 2
51512: PUSH
51513: LD_INT 3
51515: PUSH
51516: LD_INT 5
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: ST_TO_ADDR
// for i in tmp do
51525: LD_ADDR_VAR 0 8
51529: PUSH
51530: LD_VAR 0 14
51534: PUSH
51535: FOR_IN
51536: IFFALSE 51706
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51538: LD_ADDR_VAR 0 9
51542: PUSH
51543: LD_VAR 0 10
51547: PPUSH
51548: LD_VAR 0 8
51552: PPUSH
51553: LD_INT 5
51555: PPUSH
51556: CALL_OW 272
51560: PUSH
51561: LD_VAR 0 11
51565: PPUSH
51566: LD_VAR 0 8
51570: PPUSH
51571: LD_INT 5
51573: PPUSH
51574: CALL_OW 273
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51583: LD_VAR 0 9
51587: PUSH
51588: LD_INT 1
51590: ARRAY
51591: PPUSH
51592: LD_VAR 0 9
51596: PUSH
51597: LD_INT 2
51599: ARRAY
51600: PPUSH
51601: CALL_OW 488
51605: IFFALSE 51704
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51607: LD_ADDR_VAR 0 4
51611: PUSH
51612: LD_VAR 0 9
51616: PUSH
51617: LD_INT 1
51619: ARRAY
51620: PPUSH
51621: LD_VAR 0 9
51625: PUSH
51626: LD_INT 2
51628: ARRAY
51629: PPUSH
51630: CALL_OW 546
51634: ST_TO_ADDR
// if hex [ 1 ] then
51635: LD_VAR 0 4
51639: PUSH
51640: LD_INT 1
51642: ARRAY
51643: IFFALSE 51647
// continue ;
51645: GO 51535
// h := hex [ 2 ] ;
51647: LD_ADDR_VAR 0 13
51651: PUSH
51652: LD_VAR 0 4
51656: PUSH
51657: LD_INT 2
51659: ARRAY
51660: ST_TO_ADDR
// if h + 7 < height then
51661: LD_VAR 0 13
51665: PUSH
51666: LD_INT 7
51668: PLUS
51669: PUSH
51670: LD_VAR 0 15
51674: LESS
51675: IFFALSE 51704
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51677: LD_ADDR_VAR 0 18
51681: PUSH
51682: LD_INT 7
51684: PUSH
51685: LD_INT 28
51687: PUSH
51688: LD_INT 45
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: LIST
51695: PUSH
51696: LD_VAR 0 12
51700: ARRAY
51701: ST_TO_ADDR
// break ;
51702: GO 51706
// end ; end ; end ;
51704: GO 51535
51706: POP
51707: POP
// end ; if not weapon then
51708: LD_VAR 0 18
51712: NOT
51713: IFFALSE 51773
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51715: LD_ADDR_VAR 0 5
51719: PUSH
51720: LD_VAR 0 5
51724: PUSH
51725: LD_INT 11
51727: PUSH
51728: LD_INT 30
51730: PUSH
51731: LD_INT 49
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: LIST
51738: DIFF
51739: ST_TO_ADDR
// if not list then
51740: LD_VAR 0 5
51744: NOT
51745: IFFALSE 51749
// exit ;
51747: GO 51895
// weapon := list [ rand ( 1 , list ) ] ;
51749: LD_ADDR_VAR 0 18
51753: PUSH
51754: LD_VAR 0 5
51758: PUSH
51759: LD_INT 1
51761: PPUSH
51762: LD_VAR 0 5
51766: PPUSH
51767: CALL_OW 12
51771: ARRAY
51772: ST_TO_ADDR
// end ; if weapon then
51773: LD_VAR 0 18
51777: IFFALSE 51895
// begin tmp := CostOfWeapon ( weapon ) ;
51779: LD_ADDR_VAR 0 14
51783: PUSH
51784: LD_VAR 0 18
51788: PPUSH
51789: CALL_OW 451
51793: ST_TO_ADDR
// j := GetBase ( tower ) ;
51794: LD_ADDR_VAR 0 9
51798: PUSH
51799: LD_VAR 0 1
51803: PPUSH
51804: CALL_OW 274
51808: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51809: LD_VAR 0 9
51813: PPUSH
51814: LD_INT 1
51816: PPUSH
51817: CALL_OW 275
51821: PUSH
51822: LD_VAR 0 14
51826: PUSH
51827: LD_INT 1
51829: ARRAY
51830: GREATEREQUAL
51831: IFFALSE 51857
51833: PUSH
51834: LD_VAR 0 9
51838: PPUSH
51839: LD_INT 2
51841: PPUSH
51842: CALL_OW 275
51846: PUSH
51847: LD_VAR 0 14
51851: PUSH
51852: LD_INT 2
51854: ARRAY
51855: GREATEREQUAL
51856: AND
51857: IFFALSE 51883
51859: PUSH
51860: LD_VAR 0 9
51864: PPUSH
51865: LD_INT 3
51867: PPUSH
51868: CALL_OW 275
51872: PUSH
51873: LD_VAR 0 14
51877: PUSH
51878: LD_INT 3
51880: ARRAY
51881: GREATEREQUAL
51882: AND
51883: IFFALSE 51895
// result := weapon ;
51885: LD_ADDR_VAR 0 3
51889: PUSH
51890: LD_VAR 0 18
51894: ST_TO_ADDR
// end ; end ;
51895: LD_VAR 0 3
51899: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51900: LD_INT 0
51902: PPUSH
51903: PPUSH
// result := true ;
51904: LD_ADDR_VAR 0 3
51908: PUSH
51909: LD_INT 1
51911: ST_TO_ADDR
// if array1 = array2 then
51912: LD_VAR 0 1
51916: PUSH
51917: LD_VAR 0 2
51921: EQUAL
51922: IFFALSE 51982
// begin for i = 1 to array1 do
51924: LD_ADDR_VAR 0 4
51928: PUSH
51929: DOUBLE
51930: LD_INT 1
51932: DEC
51933: ST_TO_ADDR
51934: LD_VAR 0 1
51938: PUSH
51939: FOR_TO
51940: IFFALSE 51978
// if array1 [ i ] <> array2 [ i ] then
51942: LD_VAR 0 1
51946: PUSH
51947: LD_VAR 0 4
51951: ARRAY
51952: PUSH
51953: LD_VAR 0 2
51957: PUSH
51958: LD_VAR 0 4
51962: ARRAY
51963: NONEQUAL
51964: IFFALSE 51976
// begin result := false ;
51966: LD_ADDR_VAR 0 3
51970: PUSH
51971: LD_INT 0
51973: ST_TO_ADDR
// break ;
51974: GO 51978
// end ;
51976: GO 51939
51978: POP
51979: POP
// end else
51980: GO 51990
// result := false ;
51982: LD_ADDR_VAR 0 3
51986: PUSH
51987: LD_INT 0
51989: ST_TO_ADDR
// end ;
51990: LD_VAR 0 3
51994: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51995: LD_INT 0
51997: PPUSH
51998: PPUSH
// if not array1 or not array2 then
51999: LD_VAR 0 1
52003: NOT
52004: IFTRUE 52013
52006: PUSH
52007: LD_VAR 0 2
52011: NOT
52012: OR
52013: IFFALSE 52017
// exit ;
52015: GO 52081
// result := true ;
52017: LD_ADDR_VAR 0 3
52021: PUSH
52022: LD_INT 1
52024: ST_TO_ADDR
// for i = 1 to array1 do
52025: LD_ADDR_VAR 0 4
52029: PUSH
52030: DOUBLE
52031: LD_INT 1
52033: DEC
52034: ST_TO_ADDR
52035: LD_VAR 0 1
52039: PUSH
52040: FOR_TO
52041: IFFALSE 52079
// if array1 [ i ] <> array2 [ i ] then
52043: LD_VAR 0 1
52047: PUSH
52048: LD_VAR 0 4
52052: ARRAY
52053: PUSH
52054: LD_VAR 0 2
52058: PUSH
52059: LD_VAR 0 4
52063: ARRAY
52064: NONEQUAL
52065: IFFALSE 52077
// begin result := false ;
52067: LD_ADDR_VAR 0 3
52071: PUSH
52072: LD_INT 0
52074: ST_TO_ADDR
// break ;
52075: GO 52079
// end ;
52077: GO 52040
52079: POP
52080: POP
// end ;
52081: LD_VAR 0 3
52085: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52086: LD_INT 0
52088: PPUSH
52089: PPUSH
52090: PPUSH
// pom := GetBase ( fac ) ;
52091: LD_ADDR_VAR 0 5
52095: PUSH
52096: LD_VAR 0 1
52100: PPUSH
52101: CALL_OW 274
52105: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52106: LD_ADDR_VAR 0 4
52110: PUSH
52111: LD_VAR 0 2
52115: PUSH
52116: LD_INT 1
52118: ARRAY
52119: PPUSH
52120: LD_VAR 0 2
52124: PUSH
52125: LD_INT 2
52127: ARRAY
52128: PPUSH
52129: LD_VAR 0 2
52133: PUSH
52134: LD_INT 3
52136: ARRAY
52137: PPUSH
52138: LD_VAR 0 2
52142: PUSH
52143: LD_INT 4
52145: ARRAY
52146: PPUSH
52147: CALL_OW 449
52151: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52152: LD_ADDR_VAR 0 3
52156: PUSH
52157: LD_VAR 0 5
52161: PPUSH
52162: LD_INT 1
52164: PPUSH
52165: CALL_OW 275
52169: PUSH
52170: LD_VAR 0 4
52174: PUSH
52175: LD_INT 1
52177: ARRAY
52178: GREATEREQUAL
52179: IFFALSE 52205
52181: PUSH
52182: LD_VAR 0 5
52186: PPUSH
52187: LD_INT 2
52189: PPUSH
52190: CALL_OW 275
52194: PUSH
52195: LD_VAR 0 4
52199: PUSH
52200: LD_INT 2
52202: ARRAY
52203: GREATEREQUAL
52204: AND
52205: IFFALSE 52231
52207: PUSH
52208: LD_VAR 0 5
52212: PPUSH
52213: LD_INT 3
52215: PPUSH
52216: CALL_OW 275
52220: PUSH
52221: LD_VAR 0 4
52225: PUSH
52226: LD_INT 3
52228: ARRAY
52229: GREATEREQUAL
52230: AND
52231: ST_TO_ADDR
// end ;
52232: LD_VAR 0 3
52236: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52237: LD_INT 0
52239: PPUSH
52240: PPUSH
52241: PPUSH
52242: PPUSH
// pom := GetBase ( building ) ;
52243: LD_ADDR_VAR 0 3
52247: PUSH
52248: LD_VAR 0 1
52252: PPUSH
52253: CALL_OW 274
52257: ST_TO_ADDR
// if not pom then
52258: LD_VAR 0 3
52262: NOT
52263: IFFALSE 52267
// exit ;
52265: GO 52441
// btype := GetBType ( building ) ;
52267: LD_ADDR_VAR 0 5
52271: PUSH
52272: LD_VAR 0 1
52276: PPUSH
52277: CALL_OW 266
52281: ST_TO_ADDR
// if btype = b_armoury then
52282: LD_VAR 0 5
52286: PUSH
52287: LD_INT 4
52289: EQUAL
52290: IFFALSE 52300
// btype := b_barracks ;
52292: LD_ADDR_VAR 0 5
52296: PUSH
52297: LD_INT 5
52299: ST_TO_ADDR
// if btype = b_depot then
52300: LD_VAR 0 5
52304: PUSH
52305: LD_INT 0
52307: EQUAL
52308: IFFALSE 52318
// btype := b_warehouse ;
52310: LD_ADDR_VAR 0 5
52314: PUSH
52315: LD_INT 1
52317: ST_TO_ADDR
// if btype = b_workshop then
52318: LD_VAR 0 5
52322: PUSH
52323: LD_INT 2
52325: EQUAL
52326: IFFALSE 52336
// btype := b_factory ;
52328: LD_ADDR_VAR 0 5
52332: PUSH
52333: LD_INT 3
52335: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52336: LD_ADDR_VAR 0 4
52340: PUSH
52341: LD_VAR 0 5
52345: PPUSH
52346: LD_VAR 0 1
52350: PPUSH
52351: CALL_OW 248
52355: PPUSH
52356: CALL_OW 450
52360: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52361: LD_ADDR_VAR 0 2
52365: PUSH
52366: LD_VAR 0 3
52370: PPUSH
52371: LD_INT 1
52373: PPUSH
52374: CALL_OW 275
52378: PUSH
52379: LD_VAR 0 4
52383: PUSH
52384: LD_INT 1
52386: ARRAY
52387: GREATEREQUAL
52388: IFFALSE 52414
52390: PUSH
52391: LD_VAR 0 3
52395: PPUSH
52396: LD_INT 2
52398: PPUSH
52399: CALL_OW 275
52403: PUSH
52404: LD_VAR 0 4
52408: PUSH
52409: LD_INT 2
52411: ARRAY
52412: GREATEREQUAL
52413: AND
52414: IFFALSE 52440
52416: PUSH
52417: LD_VAR 0 3
52421: PPUSH
52422: LD_INT 3
52424: PPUSH
52425: CALL_OW 275
52429: PUSH
52430: LD_VAR 0 4
52434: PUSH
52435: LD_INT 3
52437: ARRAY
52438: GREATEREQUAL
52439: AND
52440: ST_TO_ADDR
// end ;
52441: LD_VAR 0 2
52445: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52446: LD_INT 0
52448: PPUSH
52449: PPUSH
52450: PPUSH
// pom := GetBase ( building ) ;
52451: LD_ADDR_VAR 0 4
52455: PUSH
52456: LD_VAR 0 1
52460: PPUSH
52461: CALL_OW 274
52465: ST_TO_ADDR
// if not pom then
52466: LD_VAR 0 4
52470: NOT
52471: IFFALSE 52475
// exit ;
52473: GO 52580
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52475: LD_ADDR_VAR 0 5
52479: PUSH
52480: LD_VAR 0 2
52484: PPUSH
52485: LD_VAR 0 1
52489: PPUSH
52490: CALL_OW 248
52494: PPUSH
52495: CALL_OW 450
52499: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52500: LD_ADDR_VAR 0 3
52504: PUSH
52505: LD_VAR 0 4
52509: PPUSH
52510: LD_INT 1
52512: PPUSH
52513: CALL_OW 275
52517: PUSH
52518: LD_VAR 0 5
52522: PUSH
52523: LD_INT 1
52525: ARRAY
52526: GREATEREQUAL
52527: IFFALSE 52553
52529: PUSH
52530: LD_VAR 0 4
52534: PPUSH
52535: LD_INT 2
52537: PPUSH
52538: CALL_OW 275
52542: PUSH
52543: LD_VAR 0 5
52547: PUSH
52548: LD_INT 2
52550: ARRAY
52551: GREATEREQUAL
52552: AND
52553: IFFALSE 52579
52555: PUSH
52556: LD_VAR 0 4
52560: PPUSH
52561: LD_INT 3
52563: PPUSH
52564: CALL_OW 275
52568: PUSH
52569: LD_VAR 0 5
52573: PUSH
52574: LD_INT 3
52576: ARRAY
52577: GREATEREQUAL
52578: AND
52579: ST_TO_ADDR
// end ;
52580: LD_VAR 0 3
52584: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52585: LD_INT 0
52587: PPUSH
52588: PPUSH
52589: PPUSH
52590: PPUSH
52591: PPUSH
52592: PPUSH
52593: PPUSH
52594: PPUSH
52595: PPUSH
52596: PPUSH
52597: PPUSH
// result := false ;
52598: LD_ADDR_VAR 0 8
52602: PUSH
52603: LD_INT 0
52605: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52606: LD_VAR 0 5
52610: NOT
52611: IFTRUE 52620
52613: PUSH
52614: LD_VAR 0 1
52618: NOT
52619: OR
52620: IFTRUE 52629
52622: PUSH
52623: LD_VAR 0 2
52627: NOT
52628: OR
52629: IFTRUE 52638
52631: PUSH
52632: LD_VAR 0 3
52636: NOT
52637: OR
52638: IFFALSE 52642
// exit ;
52640: GO 53468
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52642: LD_ADDR_VAR 0 14
52646: PUSH
52647: LD_VAR 0 1
52651: PPUSH
52652: LD_VAR 0 2
52656: PPUSH
52657: LD_VAR 0 3
52661: PPUSH
52662: LD_VAR 0 4
52666: PPUSH
52667: LD_VAR 0 5
52671: PUSH
52672: LD_INT 1
52674: ARRAY
52675: PPUSH
52676: CALL_OW 248
52680: PPUSH
52681: LD_INT 0
52683: PPUSH
52684: CALL 54749 0 6
52688: ST_TO_ADDR
// if not hexes then
52689: LD_VAR 0 14
52693: NOT
52694: IFFALSE 52698
// exit ;
52696: GO 53468
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52698: LD_ADDR_VAR 0 17
52702: PUSH
52703: LD_VAR 0 5
52707: PPUSH
52708: LD_INT 22
52710: PUSH
52711: LD_VAR 0 13
52715: PPUSH
52716: CALL_OW 255
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 2
52727: PUSH
52728: LD_INT 30
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 30
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: LIST
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PPUSH
52757: CALL_OW 72
52761: ST_TO_ADDR
// for i = 1 to hexes do
52762: LD_ADDR_VAR 0 9
52766: PUSH
52767: DOUBLE
52768: LD_INT 1
52770: DEC
52771: ST_TO_ADDR
52772: LD_VAR 0 14
52776: PUSH
52777: FOR_TO
52778: IFFALSE 53466
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52780: LD_ADDR_VAR 0 13
52784: PUSH
52785: LD_VAR 0 14
52789: PUSH
52790: LD_VAR 0 9
52794: ARRAY
52795: PUSH
52796: LD_INT 1
52798: ARRAY
52799: PPUSH
52800: LD_VAR 0 14
52804: PUSH
52805: LD_VAR 0 9
52809: ARRAY
52810: PUSH
52811: LD_INT 2
52813: ARRAY
52814: PPUSH
52815: CALL_OW 428
52819: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52820: LD_VAR 0 14
52824: PUSH
52825: LD_VAR 0 9
52829: ARRAY
52830: PUSH
52831: LD_INT 1
52833: ARRAY
52834: PPUSH
52835: LD_VAR 0 14
52839: PUSH
52840: LD_VAR 0 9
52844: ARRAY
52845: PUSH
52846: LD_INT 2
52848: ARRAY
52849: PPUSH
52850: CALL_OW 351
52854: IFTRUE 52893
52856: PUSH
52857: LD_VAR 0 14
52861: PUSH
52862: LD_VAR 0 9
52866: ARRAY
52867: PUSH
52868: LD_INT 1
52870: ARRAY
52871: PPUSH
52872: LD_VAR 0 14
52876: PUSH
52877: LD_VAR 0 9
52881: ARRAY
52882: PUSH
52883: LD_INT 2
52885: ARRAY
52886: PPUSH
52887: CALL_OW 488
52891: NOT
52892: OR
52893: IFTRUE 52910
52895: PUSH
52896: LD_VAR 0 13
52900: PPUSH
52901: CALL_OW 247
52905: PUSH
52906: LD_INT 3
52908: EQUAL
52909: OR
52910: IFFALSE 52916
// exit ;
52912: POP
52913: POP
52914: GO 53468
// if not tmp then
52916: LD_VAR 0 13
52920: NOT
52921: IFFALSE 52925
// continue ;
52923: GO 52777
// result := true ;
52925: LD_ADDR_VAR 0 8
52929: PUSH
52930: LD_INT 1
52932: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52933: LD_VAR 0 6
52937: IFFALSE 52954
52939: PUSH
52940: LD_VAR 0 13
52944: PPUSH
52945: CALL_OW 247
52949: PUSH
52950: LD_INT 2
52952: EQUAL
52953: AND
52954: IFFALSE 52971
52956: PUSH
52957: LD_VAR 0 13
52961: PPUSH
52962: CALL_OW 263
52966: PUSH
52967: LD_INT 1
52969: EQUAL
52970: AND
52971: IFFALSE 53135
// begin if IsDrivenBy ( tmp ) then
52973: LD_VAR 0 13
52977: PPUSH
52978: CALL_OW 311
52982: IFFALSE 52986
// continue ;
52984: GO 52777
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52986: LD_VAR 0 6
52990: PPUSH
52991: LD_INT 3
52993: PUSH
52994: LD_INT 60
52996: PUSH
52997: EMPTY
52998: LIST
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 3
53006: PUSH
53007: LD_INT 55
53009: PUSH
53010: EMPTY
53011: LIST
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PPUSH
53021: CALL_OW 72
53025: IFFALSE 53133
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53027: LD_ADDR_VAR 0 18
53031: PUSH
53032: LD_VAR 0 6
53036: PPUSH
53037: LD_INT 3
53039: PUSH
53040: LD_INT 60
53042: PUSH
53043: EMPTY
53044: LIST
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 3
53052: PUSH
53053: LD_INT 55
53055: PUSH
53056: EMPTY
53057: LIST
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PPUSH
53067: CALL_OW 72
53071: PUSH
53072: LD_INT 1
53074: ARRAY
53075: ST_TO_ADDR
// if IsInUnit ( driver ) then
53076: LD_VAR 0 18
53080: PPUSH
53081: CALL_OW 310
53085: IFFALSE 53096
// ComExit ( driver ) ;
53087: LD_VAR 0 18
53091: PPUSH
53092: CALL 78749 0 1
// AddComEnterUnit ( driver , tmp ) ;
53096: LD_VAR 0 18
53100: PPUSH
53101: LD_VAR 0 13
53105: PPUSH
53106: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53110: LD_VAR 0 18
53114: PPUSH
53115: LD_VAR 0 7
53119: PPUSH
53120: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53124: LD_VAR 0 18
53128: PPUSH
53129: CALL_OW 181
// end ; continue ;
53133: GO 52777
// end ; if not cleaners or not tmp in cleaners then
53135: LD_VAR 0 6
53139: NOT
53140: IFTRUE 53155
53142: PUSH
53143: LD_VAR 0 13
53147: PUSH
53148: LD_VAR 0 6
53152: IN
53153: NOT
53154: OR
53155: IFFALSE 53464
// begin if dep then
53157: LD_VAR 0 17
53161: IFFALSE 53297
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53163: LD_ADDR_VAR 0 16
53167: PUSH
53168: LD_VAR 0 17
53172: PUSH
53173: LD_INT 1
53175: ARRAY
53176: PPUSH
53177: CALL_OW 250
53181: PPUSH
53182: LD_VAR 0 17
53186: PUSH
53187: LD_INT 1
53189: ARRAY
53190: PPUSH
53191: CALL_OW 254
53195: PPUSH
53196: LD_INT 5
53198: PPUSH
53199: CALL_OW 272
53203: PUSH
53204: LD_VAR 0 17
53208: PUSH
53209: LD_INT 1
53211: ARRAY
53212: PPUSH
53213: CALL_OW 251
53217: PPUSH
53218: LD_VAR 0 17
53222: PUSH
53223: LD_INT 1
53225: ARRAY
53226: PPUSH
53227: CALL_OW 254
53231: PPUSH
53232: LD_INT 5
53234: PPUSH
53235: CALL_OW 273
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53244: LD_VAR 0 16
53248: PUSH
53249: LD_INT 1
53251: ARRAY
53252: PPUSH
53253: LD_VAR 0 16
53257: PUSH
53258: LD_INT 2
53260: ARRAY
53261: PPUSH
53262: CALL_OW 488
53266: IFFALSE 53297
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53268: LD_VAR 0 13
53272: PPUSH
53273: LD_VAR 0 16
53277: PUSH
53278: LD_INT 1
53280: ARRAY
53281: PPUSH
53282: LD_VAR 0 16
53286: PUSH
53287: LD_INT 2
53289: ARRAY
53290: PPUSH
53291: CALL_OW 111
// continue ;
53295: GO 52777
// end ; end ; r := GetDir ( tmp ) ;
53297: LD_ADDR_VAR 0 15
53301: PUSH
53302: LD_VAR 0 13
53306: PPUSH
53307: CALL_OW 254
53311: ST_TO_ADDR
// if r = 5 then
53312: LD_VAR 0 15
53316: PUSH
53317: LD_INT 5
53319: EQUAL
53320: IFFALSE 53330
// r := 0 ;
53322: LD_ADDR_VAR 0 15
53326: PUSH
53327: LD_INT 0
53329: ST_TO_ADDR
// for j = r to 5 do
53330: LD_ADDR_VAR 0 10
53334: PUSH
53335: DOUBLE
53336: LD_VAR 0 15
53340: DEC
53341: ST_TO_ADDR
53342: LD_INT 5
53344: PUSH
53345: FOR_TO
53346: IFFALSE 53462
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53348: LD_ADDR_VAR 0 11
53352: PUSH
53353: LD_VAR 0 13
53357: PPUSH
53358: CALL_OW 250
53362: PPUSH
53363: LD_VAR 0 10
53367: PPUSH
53368: LD_INT 2
53370: PPUSH
53371: CALL_OW 272
53375: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53376: LD_ADDR_VAR 0 12
53380: PUSH
53381: LD_VAR 0 13
53385: PPUSH
53386: CALL_OW 251
53390: PPUSH
53391: LD_VAR 0 10
53395: PPUSH
53396: LD_INT 2
53398: PPUSH
53399: CALL_OW 273
53403: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53404: LD_VAR 0 11
53408: PPUSH
53409: LD_VAR 0 12
53413: PPUSH
53414: CALL_OW 488
53418: IFFALSE 53437
53420: PUSH
53421: LD_VAR 0 11
53425: PPUSH
53426: LD_VAR 0 12
53430: PPUSH
53431: CALL_OW 428
53435: NOT
53436: AND
53437: IFFALSE 53460
// begin ComMoveXY ( tmp , _x , _y ) ;
53439: LD_VAR 0 13
53443: PPUSH
53444: LD_VAR 0 11
53448: PPUSH
53449: LD_VAR 0 12
53453: PPUSH
53454: CALL_OW 111
// break ;
53458: GO 53462
// end ; end ;
53460: GO 53345
53462: POP
53463: POP
// end ; end ;
53464: GO 52777
53466: POP
53467: POP
// end ;
53468: LD_VAR 0 8
53472: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53473: LD_INT 0
53475: PPUSH
// result := true ;
53476: LD_ADDR_VAR 0 3
53480: PUSH
53481: LD_INT 1
53483: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
53484: LD_VAR 0 2
53488: PUSH
53489: LD_INT 24
53491: DOUBLE
53492: EQUAL
53493: IFTRUE 53503
53495: LD_INT 33
53497: DOUBLE
53498: EQUAL
53499: IFTRUE 53503
53501: GO 53528
53503: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
53504: LD_ADDR_VAR 0 3
53508: PUSH
53509: LD_INT 32
53511: PPUSH
53512: LD_VAR 0 1
53516: PPUSH
53517: CALL_OW 321
53521: PUSH
53522: LD_INT 2
53524: EQUAL
53525: ST_TO_ADDR
53526: GO 53844
53528: LD_INT 20
53530: DOUBLE
53531: EQUAL
53532: IFTRUE 53536
53534: GO 53561
53536: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53537: LD_ADDR_VAR 0 3
53541: PUSH
53542: LD_INT 6
53544: PPUSH
53545: LD_VAR 0 1
53549: PPUSH
53550: CALL_OW 321
53554: PUSH
53555: LD_INT 2
53557: EQUAL
53558: ST_TO_ADDR
53559: GO 53844
53561: LD_INT 22
53563: DOUBLE
53564: EQUAL
53565: IFTRUE 53575
53567: LD_INT 36
53569: DOUBLE
53570: EQUAL
53571: IFTRUE 53575
53573: GO 53600
53575: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53576: LD_ADDR_VAR 0 3
53580: PUSH
53581: LD_INT 15
53583: PPUSH
53584: LD_VAR 0 1
53588: PPUSH
53589: CALL_OW 321
53593: PUSH
53594: LD_INT 2
53596: EQUAL
53597: ST_TO_ADDR
53598: GO 53844
53600: LD_INT 30
53602: DOUBLE
53603: EQUAL
53604: IFTRUE 53608
53606: GO 53633
53608: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53609: LD_ADDR_VAR 0 3
53613: PUSH
53614: LD_INT 20
53616: PPUSH
53617: LD_VAR 0 1
53621: PPUSH
53622: CALL_OW 321
53626: PUSH
53627: LD_INT 2
53629: EQUAL
53630: ST_TO_ADDR
53631: GO 53844
53633: LD_INT 28
53635: DOUBLE
53636: EQUAL
53637: IFTRUE 53647
53639: LD_INT 21
53641: DOUBLE
53642: EQUAL
53643: IFTRUE 53647
53645: GO 53672
53647: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53648: LD_ADDR_VAR 0 3
53652: PUSH
53653: LD_INT 21
53655: PPUSH
53656: LD_VAR 0 1
53660: PPUSH
53661: CALL_OW 321
53665: PUSH
53666: LD_INT 2
53668: EQUAL
53669: ST_TO_ADDR
53670: GO 53844
53672: LD_INT 16
53674: DOUBLE
53675: EQUAL
53676: IFTRUE 53680
53678: GO 53705
53680: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53681: LD_ADDR_VAR 0 3
53685: PUSH
53686: LD_INT 84
53688: PPUSH
53689: LD_VAR 0 1
53693: PPUSH
53694: CALL_OW 321
53698: PUSH
53699: LD_INT 2
53701: EQUAL
53702: ST_TO_ADDR
53703: GO 53844
53705: LD_INT 19
53707: DOUBLE
53708: EQUAL
53709: IFTRUE 53719
53711: LD_INT 23
53713: DOUBLE
53714: EQUAL
53715: IFTRUE 53719
53717: GO 53744
53719: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53720: LD_ADDR_VAR 0 3
53724: PUSH
53725: LD_INT 83
53727: PPUSH
53728: LD_VAR 0 1
53732: PPUSH
53733: CALL_OW 321
53737: PUSH
53738: LD_INT 2
53740: EQUAL
53741: ST_TO_ADDR
53742: GO 53844
53744: LD_INT 17
53746: DOUBLE
53747: EQUAL
53748: IFTRUE 53752
53750: GO 53777
53752: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53753: LD_ADDR_VAR 0 3
53757: PUSH
53758: LD_INT 39
53760: PPUSH
53761: LD_VAR 0 1
53765: PPUSH
53766: CALL_OW 321
53770: PUSH
53771: LD_INT 2
53773: EQUAL
53774: ST_TO_ADDR
53775: GO 53844
53777: LD_INT 18
53779: DOUBLE
53780: EQUAL
53781: IFTRUE 53785
53783: GO 53810
53785: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53786: LD_ADDR_VAR 0 3
53790: PUSH
53791: LD_INT 40
53793: PPUSH
53794: LD_VAR 0 1
53798: PPUSH
53799: CALL_OW 321
53803: PUSH
53804: LD_INT 2
53806: EQUAL
53807: ST_TO_ADDR
53808: GO 53844
53810: LD_INT 27
53812: DOUBLE
53813: EQUAL
53814: IFTRUE 53818
53816: GO 53843
53818: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53819: LD_ADDR_VAR 0 3
53823: PUSH
53824: LD_INT 35
53826: PPUSH
53827: LD_VAR 0 1
53831: PPUSH
53832: CALL_OW 321
53836: PUSH
53837: LD_INT 2
53839: EQUAL
53840: ST_TO_ADDR
53841: GO 53844
53843: POP
// end ;
53844: LD_VAR 0 3
53848: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53849: LD_INT 0
53851: PPUSH
53852: PPUSH
53853: PPUSH
53854: PPUSH
53855: PPUSH
53856: PPUSH
53857: PPUSH
53858: PPUSH
53859: PPUSH
53860: PPUSH
53861: PPUSH
// result := false ;
53862: LD_ADDR_VAR 0 6
53866: PUSH
53867: LD_INT 0
53869: ST_TO_ADDR
// if btype = b_depot then
53870: LD_VAR 0 2
53874: PUSH
53875: LD_INT 0
53877: EQUAL
53878: IFFALSE 53890
// begin result := true ;
53880: LD_ADDR_VAR 0 6
53884: PUSH
53885: LD_INT 1
53887: ST_TO_ADDR
// exit ;
53888: GO 54744
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53890: LD_VAR 0 1
53894: NOT
53895: IFTRUE 53920
53897: PUSH
53898: LD_VAR 0 1
53902: PPUSH
53903: CALL_OW 266
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: IN
53918: NOT
53919: OR
53920: IFTRUE 53929
53922: PUSH
53923: LD_VAR 0 2
53927: NOT
53928: OR
53929: IFTRUE 53965
53931: PUSH
53932: LD_VAR 0 5
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: LD_INT 1
53942: PUSH
53943: LD_INT 2
53945: PUSH
53946: LD_INT 3
53948: PUSH
53949: LD_INT 4
53951: PUSH
53952: LD_INT 5
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: IN
53963: NOT
53964: OR
53965: IFTRUE 53984
53967: PUSH
53968: LD_VAR 0 3
53972: PPUSH
53973: LD_VAR 0 4
53977: PPUSH
53978: CALL_OW 488
53982: NOT
53983: OR
53984: IFFALSE 53988
// exit ;
53986: GO 54744
// side := GetSide ( depot ) ;
53988: LD_ADDR_VAR 0 9
53992: PUSH
53993: LD_VAR 0 1
53997: PPUSH
53998: CALL_OW 255
54002: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54003: LD_VAR 0 9
54007: PPUSH
54008: LD_VAR 0 2
54012: PPUSH
54013: CALL 53473 0 2
54017: NOT
54018: IFFALSE 54022
// exit ;
54020: GO 54744
// pom := GetBase ( depot ) ;
54022: LD_ADDR_VAR 0 10
54026: PUSH
54027: LD_VAR 0 1
54031: PPUSH
54032: CALL_OW 274
54036: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54037: LD_ADDR_VAR 0 11
54041: PUSH
54042: LD_VAR 0 2
54046: PPUSH
54047: LD_VAR 0 1
54051: PPUSH
54052: CALL_OW 248
54056: PPUSH
54057: CALL_OW 450
54061: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54062: LD_VAR 0 10
54066: PPUSH
54067: LD_INT 1
54069: PPUSH
54070: CALL_OW 275
54074: PUSH
54075: LD_VAR 0 11
54079: PUSH
54080: LD_INT 1
54082: ARRAY
54083: GREATEREQUAL
54084: IFFALSE 54110
54086: PUSH
54087: LD_VAR 0 10
54091: PPUSH
54092: LD_INT 2
54094: PPUSH
54095: CALL_OW 275
54099: PUSH
54100: LD_VAR 0 11
54104: PUSH
54105: LD_INT 2
54107: ARRAY
54108: GREATEREQUAL
54109: AND
54110: IFFALSE 54136
54112: PUSH
54113: LD_VAR 0 10
54117: PPUSH
54118: LD_INT 3
54120: PPUSH
54121: CALL_OW 275
54125: PUSH
54126: LD_VAR 0 11
54130: PUSH
54131: LD_INT 3
54133: ARRAY
54134: GREATEREQUAL
54135: AND
54136: NOT
54137: IFFALSE 54141
// exit ;
54139: GO 54744
// if GetBType ( depot ) = b_depot then
54141: LD_VAR 0 1
54145: PPUSH
54146: CALL_OW 266
54150: PUSH
54151: LD_INT 0
54153: EQUAL
54154: IFFALSE 54166
// dist := 28 else
54156: LD_ADDR_VAR 0 14
54160: PUSH
54161: LD_INT 28
54163: ST_TO_ADDR
54164: GO 54174
// dist := 36 ;
54166: LD_ADDR_VAR 0 14
54170: PUSH
54171: LD_INT 36
54173: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54174: LD_VAR 0 1
54178: PPUSH
54179: LD_VAR 0 3
54183: PPUSH
54184: LD_VAR 0 4
54188: PPUSH
54189: CALL_OW 297
54193: PUSH
54194: LD_VAR 0 14
54198: GREATER
54199: IFFALSE 54203
// exit ;
54201: GO 54744
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54203: LD_ADDR_VAR 0 12
54207: PUSH
54208: LD_VAR 0 2
54212: PPUSH
54213: LD_VAR 0 3
54217: PPUSH
54218: LD_VAR 0 4
54222: PPUSH
54223: LD_VAR 0 5
54227: PPUSH
54228: LD_VAR 0 1
54232: PPUSH
54233: CALL_OW 248
54237: PPUSH
54238: LD_INT 0
54240: PPUSH
54241: CALL 54749 0 6
54245: ST_TO_ADDR
// if not hexes then
54246: LD_VAR 0 12
54250: NOT
54251: IFFALSE 54255
// exit ;
54253: GO 54744
// hex := GetHexInfo ( x , y ) ;
54255: LD_ADDR_VAR 0 15
54259: PUSH
54260: LD_VAR 0 3
54264: PPUSH
54265: LD_VAR 0 4
54269: PPUSH
54270: CALL_OW 546
54274: ST_TO_ADDR
// if hex [ 1 ] then
54275: LD_VAR 0 15
54279: PUSH
54280: LD_INT 1
54282: ARRAY
54283: IFFALSE 54287
// exit ;
54285: GO 54744
// height := hex [ 2 ] ;
54287: LD_ADDR_VAR 0 13
54291: PUSH
54292: LD_VAR 0 15
54296: PUSH
54297: LD_INT 2
54299: ARRAY
54300: ST_TO_ADDR
// for i = 1 to hexes do
54301: LD_ADDR_VAR 0 7
54305: PUSH
54306: DOUBLE
54307: LD_INT 1
54309: DEC
54310: ST_TO_ADDR
54311: LD_VAR 0 12
54315: PUSH
54316: FOR_TO
54317: IFFALSE 54661
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54319: LD_VAR 0 12
54323: PUSH
54324: LD_VAR 0 7
54328: ARRAY
54329: PUSH
54330: LD_INT 1
54332: ARRAY
54333: PPUSH
54334: LD_VAR 0 12
54338: PUSH
54339: LD_VAR 0 7
54343: ARRAY
54344: PUSH
54345: LD_INT 2
54347: ARRAY
54348: PPUSH
54349: CALL_OW 488
54353: NOT
54354: IFTRUE 54396
54356: PUSH
54357: LD_VAR 0 12
54361: PUSH
54362: LD_VAR 0 7
54366: ARRAY
54367: PUSH
54368: LD_INT 1
54370: ARRAY
54371: PPUSH
54372: LD_VAR 0 12
54376: PUSH
54377: LD_VAR 0 7
54381: ARRAY
54382: PUSH
54383: LD_INT 2
54385: ARRAY
54386: PPUSH
54387: CALL_OW 428
54391: PUSH
54392: LD_INT 0
54394: GREATER
54395: OR
54396: IFTRUE 54434
54398: PUSH
54399: LD_VAR 0 12
54403: PUSH
54404: LD_VAR 0 7
54408: ARRAY
54409: PUSH
54410: LD_INT 1
54412: ARRAY
54413: PPUSH
54414: LD_VAR 0 12
54418: PUSH
54419: LD_VAR 0 7
54423: ARRAY
54424: PUSH
54425: LD_INT 2
54427: ARRAY
54428: PPUSH
54429: CALL_OW 351
54433: OR
54434: IFFALSE 54440
// exit ;
54436: POP
54437: POP
54438: GO 54744
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54440: LD_ADDR_VAR 0 8
54444: PUSH
54445: LD_VAR 0 12
54449: PUSH
54450: LD_VAR 0 7
54454: ARRAY
54455: PUSH
54456: LD_INT 1
54458: ARRAY
54459: PPUSH
54460: LD_VAR 0 12
54464: PUSH
54465: LD_VAR 0 7
54469: ARRAY
54470: PUSH
54471: LD_INT 2
54473: ARRAY
54474: PPUSH
54475: CALL_OW 546
54479: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54480: LD_VAR 0 8
54484: PUSH
54485: LD_INT 1
54487: ARRAY
54488: IFTRUE 54510
54490: PUSH
54491: LD_VAR 0 8
54495: PUSH
54496: LD_INT 2
54498: ARRAY
54499: PUSH
54500: LD_VAR 0 13
54504: PUSH
54505: LD_INT 2
54507: PLUS
54508: GREATER
54509: OR
54510: IFTRUE 54532
54512: PUSH
54513: LD_VAR 0 8
54517: PUSH
54518: LD_INT 2
54520: ARRAY
54521: PUSH
54522: LD_VAR 0 13
54526: PUSH
54527: LD_INT 2
54529: MINUS
54530: LESS
54531: OR
54532: IFTRUE 54600
54534: PUSH
54535: LD_VAR 0 8
54539: PUSH
54540: LD_INT 3
54542: ARRAY
54543: PUSH
54544: LD_INT 0
54546: PUSH
54547: LD_INT 8
54549: PUSH
54550: LD_INT 9
54552: PUSH
54553: LD_INT 10
54555: PUSH
54556: LD_INT 11
54558: PUSH
54559: LD_INT 12
54561: PUSH
54562: LD_INT 13
54564: PUSH
54565: LD_INT 16
54567: PUSH
54568: LD_INT 17
54570: PUSH
54571: LD_INT 18
54573: PUSH
54574: LD_INT 19
54576: PUSH
54577: LD_INT 20
54579: PUSH
54580: LD_INT 21
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: IN
54598: NOT
54599: OR
54600: IFTRUE 54613
54602: PUSH
54603: LD_VAR 0 8
54607: PUSH
54608: LD_INT 5
54610: ARRAY
54611: NOT
54612: OR
54613: IFTRUE 54653
54615: PUSH
54616: LD_VAR 0 8
54620: PUSH
54621: LD_INT 6
54623: ARRAY
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: LD_INT 2
54630: PUSH
54631: LD_INT 7
54633: PUSH
54634: LD_INT 9
54636: PUSH
54637: LD_INT 10
54639: PUSH
54640: LD_INT 11
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: IN
54651: NOT
54652: OR
54653: IFFALSE 54659
// exit ;
54655: POP
54656: POP
54657: GO 54744
// end ;
54659: GO 54316
54661: POP
54662: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54663: LD_VAR 0 9
54667: PPUSH
54668: LD_VAR 0 3
54672: PPUSH
54673: LD_VAR 0 4
54677: PPUSH
54678: LD_INT 20
54680: PPUSH
54681: CALL 46563 0 4
54685: PUSH
54686: LD_INT 4
54688: ARRAY
54689: IFFALSE 54693
// exit ;
54691: GO 54744
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54693: LD_VAR 0 2
54697: PUSH
54698: LD_INT 29
54700: PUSH
54701: LD_INT 30
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: IN
54708: IFFALSE 54732
54710: PUSH
54711: LD_VAR 0 3
54715: PPUSH
54716: LD_VAR 0 4
54720: PPUSH
54721: LD_VAR 0 9
54725: PPUSH
54726: CALL_OW 440
54730: NOT
54731: AND
54732: IFFALSE 54736
// exit ;
54734: GO 54744
// result := true ;
54736: LD_ADDR_VAR 0 6
54740: PUSH
54741: LD_INT 1
54743: ST_TO_ADDR
// end ;
54744: LD_VAR 0 6
54748: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54749: LD_INT 0
54751: PPUSH
54752: PPUSH
54753: PPUSH
54754: PPUSH
54755: PPUSH
54756: PPUSH
54757: PPUSH
54758: PPUSH
54759: PPUSH
54760: PPUSH
54761: PPUSH
54762: PPUSH
54763: PPUSH
54764: PPUSH
54765: PPUSH
54766: PPUSH
54767: PPUSH
54768: PPUSH
54769: PPUSH
54770: PPUSH
54771: PPUSH
54772: PPUSH
54773: PPUSH
54774: PPUSH
54775: PPUSH
54776: PPUSH
54777: PPUSH
54778: PPUSH
54779: PPUSH
54780: PPUSH
54781: PPUSH
54782: PPUSH
54783: PPUSH
54784: PPUSH
54785: PPUSH
54786: PPUSH
54787: PPUSH
54788: PPUSH
54789: PPUSH
54790: PPUSH
54791: PPUSH
54792: PPUSH
54793: PPUSH
54794: PPUSH
54795: PPUSH
54796: PPUSH
54797: PPUSH
54798: PPUSH
54799: PPUSH
54800: PPUSH
54801: PPUSH
54802: PPUSH
54803: PPUSH
54804: PPUSH
54805: PPUSH
54806: PPUSH
54807: PPUSH
54808: PPUSH
// result = [ ] ;
54809: LD_ADDR_VAR 0 7
54813: PUSH
54814: EMPTY
54815: ST_TO_ADDR
// temp_list = [ ] ;
54816: LD_ADDR_VAR 0 9
54820: PUSH
54821: EMPTY
54822: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54823: LD_VAR 0 4
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: LD_INT 1
54833: PUSH
54834: LD_INT 2
54836: PUSH
54837: LD_INT 3
54839: PUSH
54840: LD_INT 4
54842: PUSH
54843: LD_INT 5
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: IN
54854: NOT
54855: IFTRUE 54898
54857: PUSH
54858: LD_VAR 0 1
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: IN
54873: IFFALSE 54897
54875: PUSH
54876: LD_VAR 0 5
54880: PUSH
54881: LD_INT 1
54883: PUSH
54884: LD_INT 2
54886: PUSH
54887: LD_INT 3
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: LIST
54894: IN
54895: NOT
54896: AND
54897: OR
54898: IFFALSE 54902
// exit ;
54900: GO 73301
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54902: LD_VAR 0 1
54906: PUSH
54907: LD_INT 6
54909: PUSH
54910: LD_INT 7
54912: PUSH
54913: LD_INT 8
54915: PUSH
54916: LD_INT 13
54918: PUSH
54919: LD_INT 12
54921: PUSH
54922: LD_INT 15
54924: PUSH
54925: LD_INT 11
54927: PUSH
54928: LD_INT 14
54930: PUSH
54931: LD_INT 10
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: IN
54945: IFFALSE 54955
// btype = b_lab ;
54947: LD_ADDR_VAR 0 1
54951: PUSH
54952: LD_INT 6
54954: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54955: LD_VAR 0 6
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: LD_INT 2
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: LIST
54973: IN
54974: NOT
54975: IFTRUE 55043
54977: PUSH
54978: LD_VAR 0 1
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: LD_INT 2
54991: PUSH
54992: LD_INT 3
54994: PUSH
54995: LD_INT 6
54997: PUSH
54998: LD_INT 36
55000: PUSH
55001: LD_INT 4
55003: PUSH
55004: LD_INT 5
55006: PUSH
55007: LD_INT 31
55009: PUSH
55010: LD_INT 32
55012: PUSH
55013: LD_INT 33
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: IN
55029: NOT
55030: IFFALSE 55042
55032: PUSH
55033: LD_VAR 0 6
55037: PUSH
55038: LD_INT 1
55040: EQUAL
55041: AND
55042: OR
55043: IFTRUE 55075
55045: PUSH
55046: LD_VAR 0 1
55050: PUSH
55051: LD_INT 2
55053: PUSH
55054: LD_INT 3
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: IN
55061: NOT
55062: IFFALSE 55074
55064: PUSH
55065: LD_VAR 0 6
55069: PUSH
55070: LD_INT 2
55072: EQUAL
55073: AND
55074: OR
55075: IFFALSE 55085
// mode = 0 ;
55077: LD_ADDR_VAR 0 6
55081: PUSH
55082: LD_INT 0
55084: ST_TO_ADDR
// case mode of 0 :
55085: LD_VAR 0 6
55089: PUSH
55090: LD_INT 0
55092: DOUBLE
55093: EQUAL
55094: IFTRUE 55098
55096: GO 66551
55098: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55099: LD_ADDR_VAR 0 11
55103: PUSH
55104: LD_INT 0
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: LD_INT 1
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 1
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: LD_INT 1
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 1
55157: NEG
55158: PUSH
55159: LD_INT 0
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 1
55168: NEG
55169: PUSH
55170: LD_INT 1
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 1
55180: NEG
55181: PUSH
55182: LD_INT 2
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: LD_INT 2
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 1
55203: PUSH
55204: LD_INT 1
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 1
55214: PUSH
55215: LD_INT 2
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: LD_INT 2
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 1
55234: NEG
55235: PUSH
55236: LD_INT 1
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 1
55245: PUSH
55246: LD_INT 3
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: LD_INT 3
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 1
55265: NEG
55266: PUSH
55267: LD_INT 2
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55292: LD_ADDR_VAR 0 12
55296: PUSH
55297: LD_INT 0
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: LD_INT 1
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 1
55330: PUSH
55331: LD_INT 1
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: LD_INT 1
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 1
55350: NEG
55351: PUSH
55352: LD_INT 0
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 1
55361: NEG
55362: PUSH
55363: LD_INT 1
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 1
55373: PUSH
55374: LD_INT 1
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 2
55384: PUSH
55385: LD_INT 0
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 2
55394: PUSH
55395: LD_INT 1
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: LD_INT 1
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 2
55415: NEG
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 2
55426: NEG
55427: PUSH
55428: LD_INT 1
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 2
55438: NEG
55439: PUSH
55440: LD_INT 1
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 3
55449: NEG
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 3
55460: NEG
55461: PUSH
55462: LD_INT 1
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55488: LD_ADDR_VAR 0 13
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 0
55505: PUSH
55506: LD_INT 1
55508: NEG
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: LD_INT 0
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 1
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: LD_INT 1
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 1
55546: NEG
55547: PUSH
55548: LD_INT 0
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: LD_INT 1
55561: NEG
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 1
55569: NEG
55570: PUSH
55571: LD_INT 2
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 2
55581: PUSH
55582: LD_INT 1
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 2
55591: PUSH
55592: LD_INT 2
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: LD_INT 2
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 2
55611: NEG
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 2
55623: NEG
55624: PUSH
55625: LD_INT 2
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 2
55635: NEG
55636: PUSH
55637: LD_INT 3
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 3
55647: NEG
55648: PUSH
55649: LD_INT 2
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 3
55659: NEG
55660: PUSH
55661: LD_INT 3
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55687: LD_ADDR_VAR 0 14
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 0
55704: PUSH
55705: LD_INT 1
55707: NEG
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 1
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 0
55735: PUSH
55736: LD_INT 1
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 1
55745: NEG
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 1
55756: NEG
55757: PUSH
55758: LD_INT 1
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: LD_INT 2
55772: NEG
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 0
55780: PUSH
55781: LD_INT 2
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 1
55802: PUSH
55803: LD_INT 2
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: LD_INT 2
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 1
55833: NEG
55834: PUSH
55835: LD_INT 3
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 0
55845: PUSH
55846: LD_INT 3
55848: NEG
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 1
55856: PUSH
55857: LD_INT 2
55859: NEG
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55883: LD_ADDR_VAR 0 15
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 0
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 1
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 1
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: LD_INT 1
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 1
55941: NEG
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 1
55952: NEG
55953: PUSH
55954: LD_INT 1
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 1
55964: PUSH
55965: LD_INT 1
55967: NEG
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 2
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 2
55985: PUSH
55986: LD_INT 1
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 1
55995: NEG
55996: PUSH
55997: LD_INT 1
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 2
56006: NEG
56007: PUSH
56008: LD_INT 0
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 2
56017: NEG
56018: PUSH
56019: LD_INT 1
56021: NEG
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 2
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 3
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 3
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56076: LD_ADDR_VAR 0 16
56080: PUSH
56081: LD_INT 0
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: LD_INT 1
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 1
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 1
56114: PUSH
56115: LD_INT 1
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: LD_INT 1
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 1
56134: NEG
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 1
56145: NEG
56146: PUSH
56147: LD_INT 1
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 1
56157: NEG
56158: PUSH
56159: LD_INT 2
56161: NEG
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 2
56169: PUSH
56170: LD_INT 1
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 2
56179: PUSH
56180: LD_INT 2
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: LD_INT 2
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 2
56199: NEG
56200: PUSH
56201: LD_INT 1
56203: NEG
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 2
56211: NEG
56212: PUSH
56213: LD_INT 2
56215: NEG
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 3
56223: PUSH
56224: LD_INT 2
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 3
56233: PUSH
56234: LD_INT 3
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 2
56243: PUSH
56244: LD_INT 3
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56269: LD_ADDR_VAR 0 17
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: LD_INT 0
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: LD_INT 1
56289: NEG
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 1
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: LD_INT 1
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: LD_INT 1
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 1
56338: NEG
56339: PUSH
56340: LD_INT 1
56342: NEG
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 1
56350: NEG
56351: PUSH
56352: LD_INT 2
56354: NEG
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: LD_INT 2
56365: NEG
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 1
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 2
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 2
56394: PUSH
56395: LD_INT 1
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 2
56404: PUSH
56405: LD_INT 2
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 1
56414: PUSH
56415: LD_INT 2
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 0
56424: PUSH
56425: LD_INT 2
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 1
56434: NEG
56435: PUSH
56436: LD_INT 1
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 2
56445: NEG
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 2
56456: NEG
56457: PUSH
56458: LD_INT 1
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 2
56468: NEG
56469: PUSH
56470: LD_INT 2
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56499: LD_ADDR_VAR 0 18
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: LD_INT 1
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: NEG
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 1
56568: NEG
56569: PUSH
56570: LD_INT 1
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 1
56580: NEG
56581: PUSH
56582: LD_INT 2
56584: NEG
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: LD_INT 2
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: LD_INT 1
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 2
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 2
56624: PUSH
56625: LD_INT 1
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 2
56634: PUSH
56635: LD_INT 2
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: LD_INT 2
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: LD_INT 2
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: LD_INT 1
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 2
56675: NEG
56676: PUSH
56677: LD_INT 0
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 2
56686: NEG
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 2
56698: NEG
56699: PUSH
56700: LD_INT 2
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56729: LD_ADDR_VAR 0 19
56733: PUSH
56734: LD_INT 0
56736: PUSH
56737: LD_INT 0
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: LD_INT 1
56749: NEG
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 1
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 1
56767: PUSH
56768: LD_INT 1
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: LD_INT 1
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 1
56787: NEG
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: NEG
56799: PUSH
56800: LD_INT 1
56802: NEG
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 1
56810: NEG
56811: PUSH
56812: LD_INT 2
56814: NEG
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: LD_INT 2
56825: NEG
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 1
56833: PUSH
56834: LD_INT 1
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 2
56844: PUSH
56845: LD_INT 0
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 2
56854: PUSH
56855: LD_INT 1
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 2
56864: PUSH
56865: LD_INT 2
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 1
56874: PUSH
56875: LD_INT 2
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: LD_INT 2
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: NEG
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 2
56905: NEG
56906: PUSH
56907: LD_INT 0
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 2
56916: NEG
56917: PUSH
56918: LD_INT 1
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 2
56928: NEG
56929: PUSH
56930: LD_INT 2
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56959: LD_ADDR_VAR 0 20
56963: PUSH
56964: LD_INT 0
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: LD_INT 1
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 1
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 1
57017: NEG
57018: PUSH
57019: LD_INT 0
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: LD_INT 1
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 1
57040: NEG
57041: PUSH
57042: LD_INT 2
57044: NEG
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: LD_INT 2
57055: NEG
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 2
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 2
57084: PUSH
57085: LD_INT 1
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 2
57094: PUSH
57095: LD_INT 2
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 1
57104: PUSH
57105: LD_INT 2
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: LD_INT 2
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: NEG
57125: PUSH
57126: LD_INT 1
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 2
57135: NEG
57136: PUSH
57137: LD_INT 0
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 2
57146: NEG
57147: PUSH
57148: LD_INT 1
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 2
57158: NEG
57159: PUSH
57160: LD_INT 2
57162: NEG
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57189: LD_ADDR_VAR 0 21
57193: PUSH
57194: LD_INT 0
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 0
57206: PUSH
57207: LD_INT 1
57209: NEG
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 1
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 1
57227: PUSH
57228: LD_INT 1
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 0
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 1
57247: NEG
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 1
57258: NEG
57259: PUSH
57260: LD_INT 1
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 1
57270: NEG
57271: PUSH
57272: LD_INT 2
57274: NEG
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 0
57282: PUSH
57283: LD_INT 2
57285: NEG
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 1
57293: PUSH
57294: LD_INT 1
57296: NEG
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 2
57304: PUSH
57305: LD_INT 0
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 2
57314: PUSH
57315: LD_INT 1
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 2
57324: PUSH
57325: LD_INT 2
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 1
57334: PUSH
57335: LD_INT 2
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 0
57344: PUSH
57345: LD_INT 2
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 1
57354: NEG
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 2
57365: NEG
57366: PUSH
57367: LD_INT 0
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 2
57376: NEG
57377: PUSH
57378: LD_INT 1
57380: NEG
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 2
57388: NEG
57389: PUSH
57390: LD_INT 2
57392: NEG
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57419: LD_ADDR_VAR 0 22
57423: PUSH
57424: LD_INT 0
57426: PUSH
57427: LD_INT 0
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 0
57436: PUSH
57437: LD_INT 1
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 1
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 1
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 1
57477: NEG
57478: PUSH
57479: LD_INT 0
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 1
57488: NEG
57489: PUSH
57490: LD_INT 1
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: LD_INT 2
57504: NEG
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: LD_INT 2
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 1
57523: PUSH
57524: LD_INT 1
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 2
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 2
57544: PUSH
57545: LD_INT 1
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 2
57554: PUSH
57555: LD_INT 2
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 1
57564: PUSH
57565: LD_INT 2
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 0
57574: PUSH
57575: LD_INT 2
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: NEG
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 2
57595: NEG
57596: PUSH
57597: LD_INT 0
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 2
57606: NEG
57607: PUSH
57608: LD_INT 1
57610: NEG
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 2
57618: NEG
57619: PUSH
57620: LD_INT 2
57622: NEG
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57649: LD_ADDR_VAR 0 23
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 0
57666: PUSH
57667: LD_INT 1
57669: NEG
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 1
57677: PUSH
57678: LD_INT 0
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 1
57687: PUSH
57688: LD_INT 1
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 0
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 1
57707: NEG
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 1
57718: NEG
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: LD_INT 2
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: LD_INT 2
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: LD_INT 1
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 2
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 2
57774: PUSH
57775: LD_INT 1
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 2
57784: PUSH
57785: LD_INT 2
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 1
57794: PUSH
57795: LD_INT 2
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 0
57804: PUSH
57805: LD_INT 2
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 1
57814: NEG
57815: PUSH
57816: LD_INT 1
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 2
57825: NEG
57826: PUSH
57827: LD_INT 0
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 2
57836: NEG
57837: PUSH
57838: LD_INT 1
57840: NEG
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 2
57848: NEG
57849: PUSH
57850: LD_INT 2
57852: NEG
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 2
57860: NEG
57861: PUSH
57862: LD_INT 3
57864: NEG
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 1
57872: NEG
57873: PUSH
57874: LD_INT 3
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 1
57884: PUSH
57885: LD_INT 2
57887: NEG
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 2
57895: PUSH
57896: LD_INT 1
57898: NEG
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57929: LD_ADDR_VAR 0 24
57933: PUSH
57934: LD_INT 0
57936: PUSH
57937: LD_INT 0
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 0
57946: PUSH
57947: LD_INT 1
57949: NEG
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 1
57957: PUSH
57958: LD_INT 0
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 1
57967: PUSH
57968: LD_INT 1
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 0
57977: PUSH
57978: LD_INT 1
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 1
57987: NEG
57988: PUSH
57989: LD_INT 0
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: LD_INT 1
58002: NEG
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 1
58010: NEG
58011: PUSH
58012: LD_INT 2
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 0
58022: PUSH
58023: LD_INT 2
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 1
58033: PUSH
58034: LD_INT 1
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 2
58044: PUSH
58045: LD_INT 0
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 2
58054: PUSH
58055: LD_INT 1
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 2
58064: PUSH
58065: LD_INT 2
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 1
58074: PUSH
58075: LD_INT 2
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 0
58084: PUSH
58085: LD_INT 2
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 1
58094: NEG
58095: PUSH
58096: LD_INT 1
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 2
58105: NEG
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 2
58116: NEG
58117: PUSH
58118: LD_INT 1
58120: NEG
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 2
58128: NEG
58129: PUSH
58130: LD_INT 2
58132: NEG
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 1
58140: PUSH
58141: LD_INT 2
58143: NEG
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 2
58151: PUSH
58152: LD_INT 1
58154: NEG
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 3
58162: PUSH
58163: LD_INT 1
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 3
58172: PUSH
58173: LD_INT 2
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58205: LD_ADDR_VAR 0 25
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 1
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 1
58243: PUSH
58244: LD_INT 1
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: LD_INT 1
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: LD_INT 0
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: NEG
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 1
58286: NEG
58287: PUSH
58288: LD_INT 2
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: LD_INT 2
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: LD_INT 1
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 2
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 2
58330: PUSH
58331: LD_INT 1
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 2
58340: PUSH
58341: LD_INT 2
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 1
58350: PUSH
58351: LD_INT 2
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 0
58360: PUSH
58361: LD_INT 2
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 1
58370: NEG
58371: PUSH
58372: LD_INT 1
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 2
58381: NEG
58382: PUSH
58383: LD_INT 0
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 2
58392: NEG
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 2
58404: NEG
58405: PUSH
58406: LD_INT 2
58408: NEG
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 3
58416: PUSH
58417: LD_INT 1
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 3
58426: PUSH
58427: LD_INT 2
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 2
58436: PUSH
58437: LD_INT 3
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 1
58446: PUSH
58447: LD_INT 3
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58479: LD_ADDR_VAR 0 26
58483: PUSH
58484: LD_INT 0
58486: PUSH
58487: LD_INT 0
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: LD_INT 1
58499: NEG
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 1
58507: PUSH
58508: LD_INT 0
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 1
58517: PUSH
58518: LD_INT 1
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 0
58527: PUSH
58528: LD_INT 1
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 1
58537: NEG
58538: PUSH
58539: LD_INT 0
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: PUSH
58550: LD_INT 1
58552: NEG
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 1
58560: NEG
58561: PUSH
58562: LD_INT 2
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 0
58572: PUSH
58573: LD_INT 2
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 1
58583: PUSH
58584: LD_INT 1
58586: NEG
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 2
58594: PUSH
58595: LD_INT 0
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 2
58604: PUSH
58605: LD_INT 1
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 2
58614: PUSH
58615: LD_INT 2
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 1
58624: PUSH
58625: LD_INT 2
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 0
58634: PUSH
58635: LD_INT 2
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 1
58644: NEG
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 2
58655: NEG
58656: PUSH
58657: LD_INT 0
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 2
58666: NEG
58667: PUSH
58668: LD_INT 1
58670: NEG
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 2
58678: NEG
58679: PUSH
58680: LD_INT 2
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 2
58690: PUSH
58691: LD_INT 3
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 1
58700: PUSH
58701: LD_INT 3
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 1
58710: NEG
58711: PUSH
58712: LD_INT 2
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 2
58721: NEG
58722: PUSH
58723: LD_INT 1
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58755: LD_ADDR_VAR 0 27
58759: PUSH
58760: LD_INT 0
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 0
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 1
58783: PUSH
58784: LD_INT 0
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 1
58793: PUSH
58794: LD_INT 1
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 0
58803: PUSH
58804: LD_INT 1
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 1
58813: NEG
58814: PUSH
58815: LD_INT 0
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 1
58824: NEG
58825: PUSH
58826: LD_INT 1
58828: NEG
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 1
58836: NEG
58837: PUSH
58838: LD_INT 2
58840: NEG
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 0
58848: PUSH
58849: LD_INT 2
58851: NEG
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 1
58859: PUSH
58860: LD_INT 1
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 2
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 2
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 2
58890: PUSH
58891: LD_INT 2
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 1
58900: PUSH
58901: LD_INT 2
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 0
58910: PUSH
58911: LD_INT 2
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 1
58920: NEG
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 2
58931: NEG
58932: PUSH
58933: LD_INT 0
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 2
58942: NEG
58943: PUSH
58944: LD_INT 1
58946: NEG
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 2
58954: NEG
58955: PUSH
58956: LD_INT 2
58958: NEG
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 1
58966: NEG
58967: PUSH
58968: LD_INT 2
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 2
58977: NEG
58978: PUSH
58979: LD_INT 1
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 3
58988: NEG
58989: PUSH
58990: LD_INT 1
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 3
59000: NEG
59001: PUSH
59002: LD_INT 2
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59035: LD_ADDR_VAR 0 28
59039: PUSH
59040: LD_INT 0
59042: PUSH
59043: LD_INT 0
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 0
59052: PUSH
59053: LD_INT 1
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 1
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: PUSH
59074: LD_INT 1
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: LD_INT 1
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 1
59093: NEG
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 1
59104: NEG
59105: PUSH
59106: LD_INT 1
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 1
59116: NEG
59117: PUSH
59118: LD_INT 2
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 0
59128: PUSH
59129: LD_INT 2
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 1
59139: PUSH
59140: LD_INT 1
59142: NEG
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 2
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 2
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 2
59170: PUSH
59171: LD_INT 2
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: LD_INT 2
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 0
59190: PUSH
59191: LD_INT 2
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 1
59200: NEG
59201: PUSH
59202: LD_INT 1
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 2
59211: NEG
59212: PUSH
59213: LD_INT 0
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 2
59222: NEG
59223: PUSH
59224: LD_INT 1
59226: NEG
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 2
59234: NEG
59235: PUSH
59236: LD_INT 2
59238: NEG
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 2
59246: NEG
59247: PUSH
59248: LD_INT 3
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 1
59258: NEG
59259: PUSH
59260: LD_INT 3
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 3
59270: NEG
59271: PUSH
59272: LD_INT 1
59274: NEG
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 3
59282: NEG
59283: PUSH
59284: LD_INT 2
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59317: LD_ADDR_VAR 0 29
59321: PUSH
59322: LD_INT 0
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 0
59334: PUSH
59335: LD_INT 1
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 1
59345: PUSH
59346: LD_INT 0
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 1
59355: PUSH
59356: LD_INT 1
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 0
59365: PUSH
59366: LD_INT 1
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 1
59375: NEG
59376: PUSH
59377: LD_INT 0
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 1
59386: NEG
59387: PUSH
59388: LD_INT 1
59390: NEG
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 1
59398: NEG
59399: PUSH
59400: LD_INT 2
59402: NEG
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 0
59410: PUSH
59411: LD_INT 2
59413: NEG
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 1
59421: PUSH
59422: LD_INT 1
59424: NEG
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 2
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 2
59442: PUSH
59443: LD_INT 1
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 1
59452: PUSH
59453: LD_INT 2
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: LD_INT 2
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 1
59472: NEG
59473: PUSH
59474: LD_INT 1
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 2
59483: NEG
59484: PUSH
59485: LD_INT 1
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 2
59495: NEG
59496: PUSH
59497: LD_INT 2
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 2
59507: NEG
59508: PUSH
59509: LD_INT 3
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 2
59519: PUSH
59520: LD_INT 1
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 3
59530: PUSH
59531: LD_INT 1
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 1
59540: PUSH
59541: LD_INT 3
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 1
59550: NEG
59551: PUSH
59552: LD_INT 2
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 3
59561: NEG
59562: PUSH
59563: LD_INT 2
59565: NEG
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59596: LD_ADDR_VAR 0 30
59600: PUSH
59601: LD_INT 0
59603: PUSH
59604: LD_INT 0
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 0
59613: PUSH
59614: LD_INT 1
59616: NEG
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 1
59624: PUSH
59625: LD_INT 0
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 1
59634: PUSH
59635: LD_INT 1
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 0
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 1
59654: NEG
59655: PUSH
59656: LD_INT 0
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 1
59665: NEG
59666: PUSH
59667: LD_INT 1
59669: NEG
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 1
59677: NEG
59678: PUSH
59679: LD_INT 2
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 0
59689: PUSH
59690: LD_INT 2
59692: NEG
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 1
59700: PUSH
59701: LD_INT 1
59703: NEG
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 2
59711: PUSH
59712: LD_INT 0
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 2
59721: PUSH
59722: LD_INT 1
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 2
59731: PUSH
59732: LD_INT 2
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 1
59741: PUSH
59742: LD_INT 2
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 1
59751: NEG
59752: PUSH
59753: LD_INT 1
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 2
59762: NEG
59763: PUSH
59764: LD_INT 0
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 2
59773: NEG
59774: PUSH
59775: LD_INT 1
59777: NEG
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 1
59785: NEG
59786: PUSH
59787: LD_INT 3
59789: NEG
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 1
59797: PUSH
59798: LD_INT 2
59800: NEG
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 3
59808: PUSH
59809: LD_INT 2
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 2
59818: PUSH
59819: LD_INT 3
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 2
59828: NEG
59829: PUSH
59830: LD_INT 1
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 3
59839: NEG
59840: PUSH
59841: LD_INT 1
59843: NEG
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59874: LD_ADDR_VAR 0 31
59878: PUSH
59879: LD_INT 0
59881: PUSH
59882: LD_INT 0
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 0
59891: PUSH
59892: LD_INT 1
59894: NEG
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 1
59902: PUSH
59903: LD_INT 0
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 1
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 0
59922: PUSH
59923: LD_INT 1
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 1
59932: NEG
59933: PUSH
59934: LD_INT 0
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 1
59943: NEG
59944: PUSH
59945: LD_INT 1
59947: NEG
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 1
59955: NEG
59956: PUSH
59957: LD_INT 2
59959: NEG
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 1
59967: PUSH
59968: LD_INT 1
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 2
59978: PUSH
59979: LD_INT 0
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 2
59988: PUSH
59989: LD_INT 1
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 2
59998: PUSH
59999: LD_INT 2
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 1
60008: PUSH
60009: LD_INT 2
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 0
60018: PUSH
60019: LD_INT 2
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 1
60028: NEG
60029: PUSH
60030: LD_INT 1
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 2
60039: NEG
60040: PUSH
60041: LD_INT 1
60043: NEG
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 2
60051: NEG
60052: PUSH
60053: LD_INT 2
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 2
60063: NEG
60064: PUSH
60065: LD_INT 3
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 2
60075: PUSH
60076: LD_INT 1
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 3
60086: PUSH
60087: LD_INT 1
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 1
60096: PUSH
60097: LD_INT 3
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 1
60106: NEG
60107: PUSH
60108: LD_INT 2
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 3
60117: NEG
60118: PUSH
60119: LD_INT 2
60121: NEG
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60152: LD_ADDR_VAR 0 32
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: LD_INT 0
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 0
60169: PUSH
60170: LD_INT 1
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 1
60180: PUSH
60181: LD_INT 0
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 1
60190: PUSH
60191: LD_INT 1
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 0
60200: PUSH
60201: LD_INT 1
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 1
60210: NEG
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 1
60221: NEG
60222: PUSH
60223: LD_INT 1
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 1
60233: NEG
60234: PUSH
60235: LD_INT 2
60237: NEG
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 0
60245: PUSH
60246: LD_INT 2
60248: NEG
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 1
60256: PUSH
60257: LD_INT 1
60259: NEG
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 2
60267: PUSH
60268: LD_INT 1
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 2
60277: PUSH
60278: LD_INT 2
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 1
60287: PUSH
60288: LD_INT 2
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 0
60297: PUSH
60298: LD_INT 2
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 1
60307: NEG
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 2
60318: NEG
60319: PUSH
60320: LD_INT 0
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 2
60329: NEG
60330: PUSH
60331: LD_INT 1
60333: NEG
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 1
60341: NEG
60342: PUSH
60343: LD_INT 3
60345: NEG
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 1
60353: PUSH
60354: LD_INT 2
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 3
60364: PUSH
60365: LD_INT 2
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 2
60374: PUSH
60375: LD_INT 3
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 2
60384: NEG
60385: PUSH
60386: LD_INT 1
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 3
60395: NEG
60396: PUSH
60397: LD_INT 1
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60430: LD_ADDR_VAR 0 33
60434: PUSH
60435: LD_INT 0
60437: PUSH
60438: LD_INT 0
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 0
60447: PUSH
60448: LD_INT 1
60450: NEG
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 1
60458: PUSH
60459: LD_INT 0
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 1
60468: PUSH
60469: LD_INT 1
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 0
60478: PUSH
60479: LD_INT 1
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 1
60488: NEG
60489: PUSH
60490: LD_INT 0
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 1
60499: NEG
60500: PUSH
60501: LD_INT 1
60503: NEG
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: NEG
60512: PUSH
60513: LD_INT 2
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: PUSH
60524: LD_INT 1
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 2
60534: PUSH
60535: LD_INT 0
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 2
60544: PUSH
60545: LD_INT 1
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 1
60554: PUSH
60555: LD_INT 2
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 0
60564: PUSH
60565: LD_INT 2
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 1
60574: NEG
60575: PUSH
60576: LD_INT 1
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 2
60585: NEG
60586: PUSH
60587: LD_INT 0
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 2
60596: NEG
60597: PUSH
60598: LD_INT 1
60600: NEG
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 2
60608: NEG
60609: PUSH
60610: LD_INT 2
60612: NEG
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 2
60620: NEG
60621: PUSH
60622: LD_INT 3
60624: NEG
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 2
60632: PUSH
60633: LD_INT 1
60635: NEG
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 3
60643: PUSH
60644: LD_INT 1
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 1
60653: PUSH
60654: LD_INT 3
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 1
60663: NEG
60664: PUSH
60665: LD_INT 2
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 3
60674: NEG
60675: PUSH
60676: LD_INT 2
60678: NEG
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60709: LD_ADDR_VAR 0 34
60713: PUSH
60714: LD_INT 0
60716: PUSH
60717: LD_INT 0
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 0
60726: PUSH
60727: LD_INT 1
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 1
60737: PUSH
60738: LD_INT 0
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 1
60747: PUSH
60748: LD_INT 1
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: LD_INT 1
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 1
60767: NEG
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 1
60778: NEG
60779: PUSH
60780: LD_INT 1
60782: NEG
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 1
60790: NEG
60791: PUSH
60792: LD_INT 2
60794: NEG
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 0
60802: PUSH
60803: LD_INT 2
60805: NEG
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 1
60813: PUSH
60814: LD_INT 1
60816: NEG
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 2
60824: PUSH
60825: LD_INT 1
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 2
60834: PUSH
60835: LD_INT 2
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 1
60844: PUSH
60845: LD_INT 2
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 1
60854: NEG
60855: PUSH
60856: LD_INT 1
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 2
60865: NEG
60866: PUSH
60867: LD_INT 0
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 2
60876: NEG
60877: PUSH
60878: LD_INT 1
60880: NEG
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 2
60888: NEG
60889: PUSH
60890: LD_INT 2
60892: NEG
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 1
60900: NEG
60901: PUSH
60902: LD_INT 3
60904: NEG
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 1
60912: PUSH
60913: LD_INT 2
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 3
60923: PUSH
60924: LD_INT 2
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 2
60933: PUSH
60934: LD_INT 3
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 2
60943: NEG
60944: PUSH
60945: LD_INT 1
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 3
60954: NEG
60955: PUSH
60956: LD_INT 1
60958: NEG
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60989: LD_ADDR_VAR 0 35
60993: PUSH
60994: LD_INT 0
60996: PUSH
60997: LD_INT 0
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 0
61006: PUSH
61007: LD_INT 1
61009: NEG
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 1
61017: PUSH
61018: LD_INT 0
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 1
61027: PUSH
61028: LD_INT 1
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: LD_INT 1
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 1
61047: NEG
61048: PUSH
61049: LD_INT 0
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 1
61058: NEG
61059: PUSH
61060: LD_INT 1
61062: NEG
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 2
61070: PUSH
61071: LD_INT 1
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 2
61080: NEG
61081: PUSH
61082: LD_INT 1
61084: NEG
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61101: LD_ADDR_VAR 0 36
61105: PUSH
61106: LD_INT 0
61108: PUSH
61109: LD_INT 0
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 0
61118: PUSH
61119: LD_INT 1
61121: NEG
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 1
61129: PUSH
61130: LD_INT 0
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 1
61139: PUSH
61140: LD_INT 1
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 0
61149: PUSH
61150: LD_INT 1
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: LD_INT 0
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 1
61170: NEG
61171: PUSH
61172: LD_INT 1
61174: NEG
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 1
61182: NEG
61183: PUSH
61184: LD_INT 2
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 1
61194: PUSH
61195: LD_INT 2
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61213: LD_ADDR_VAR 0 37
61217: PUSH
61218: LD_INT 0
61220: PUSH
61221: LD_INT 0
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 0
61230: PUSH
61231: LD_INT 1
61233: NEG
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 1
61241: PUSH
61242: LD_INT 0
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 1
61251: PUSH
61252: LD_INT 1
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 0
61261: PUSH
61262: LD_INT 1
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 1
61271: NEG
61272: PUSH
61273: LD_INT 0
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 1
61282: NEG
61283: PUSH
61284: LD_INT 1
61286: NEG
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 1
61294: PUSH
61295: LD_INT 1
61297: NEG
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: LD_INT 1
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61325: LD_ADDR_VAR 0 38
61329: PUSH
61330: LD_INT 0
61332: PUSH
61333: LD_INT 0
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 0
61342: PUSH
61343: LD_INT 1
61345: NEG
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 1
61353: PUSH
61354: LD_INT 0
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 1
61363: PUSH
61364: LD_INT 1
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 0
61373: PUSH
61374: LD_INT 1
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 1
61383: NEG
61384: PUSH
61385: LD_INT 0
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 1
61394: NEG
61395: PUSH
61396: LD_INT 1
61398: NEG
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 2
61406: PUSH
61407: LD_INT 1
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 2
61416: NEG
61417: PUSH
61418: LD_INT 1
61420: NEG
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61437: LD_ADDR_VAR 0 39
61441: PUSH
61442: LD_INT 0
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 0
61454: PUSH
61455: LD_INT 1
61457: NEG
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 1
61465: PUSH
61466: LD_INT 0
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 1
61475: PUSH
61476: LD_INT 1
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 0
61485: PUSH
61486: LD_INT 1
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 1
61495: NEG
61496: PUSH
61497: LD_INT 0
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 1
61506: NEG
61507: PUSH
61508: LD_INT 1
61510: NEG
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 1
61518: NEG
61519: PUSH
61520: LD_INT 2
61522: NEG
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: LD_INT 2
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61549: LD_ADDR_VAR 0 40
61553: PUSH
61554: LD_INT 0
61556: PUSH
61557: LD_INT 0
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 0
61566: PUSH
61567: LD_INT 1
61569: NEG
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 1
61577: PUSH
61578: LD_INT 0
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 1
61587: PUSH
61588: LD_INT 1
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 0
61597: PUSH
61598: LD_INT 1
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 1
61607: NEG
61608: PUSH
61609: LD_INT 0
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 1
61618: NEG
61619: PUSH
61620: LD_INT 1
61622: NEG
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 1
61630: PUSH
61631: LD_INT 1
61633: NEG
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 1
61641: NEG
61642: PUSH
61643: LD_INT 1
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61661: LD_ADDR_VAR 0 41
61665: PUSH
61666: LD_INT 0
61668: PUSH
61669: LD_INT 0
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 0
61678: PUSH
61679: LD_INT 1
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 1
61689: PUSH
61690: LD_INT 0
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 1
61699: PUSH
61700: LD_INT 1
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 0
61709: PUSH
61710: LD_INT 1
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 1
61719: NEG
61720: PUSH
61721: LD_INT 0
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 1
61730: NEG
61731: PUSH
61732: LD_INT 1
61734: NEG
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 1
61742: NEG
61743: PUSH
61744: LD_INT 2
61746: NEG
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 1
61754: PUSH
61755: LD_INT 1
61757: NEG
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 2
61765: PUSH
61766: LD_INT 0
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 2
61775: PUSH
61776: LD_INT 1
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 2
61785: PUSH
61786: LD_INT 2
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 1
61795: PUSH
61796: LD_INT 2
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 1
61805: NEG
61806: PUSH
61807: LD_INT 1
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 2
61816: NEG
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 2
61827: NEG
61828: PUSH
61829: LD_INT 1
61831: NEG
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 2
61839: NEG
61840: PUSH
61841: LD_INT 2
61843: NEG
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 2
61851: NEG
61852: PUSH
61853: LD_INT 3
61855: NEG
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 2
61863: PUSH
61864: LD_INT 1
61866: NEG
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 3
61874: PUSH
61875: LD_INT 0
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 3
61884: PUSH
61885: LD_INT 1
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 3
61894: PUSH
61895: LD_INT 2
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 3
61904: PUSH
61905: LD_INT 3
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 2
61914: PUSH
61915: LD_INT 3
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 2
61924: NEG
61925: PUSH
61926: LD_INT 1
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 3
61935: NEG
61936: PUSH
61937: LD_INT 0
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 3
61946: NEG
61947: PUSH
61948: LD_INT 1
61950: NEG
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 3
61958: NEG
61959: PUSH
61960: LD_INT 2
61962: NEG
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 3
61970: NEG
61971: PUSH
61972: LD_INT 3
61974: NEG
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62011: LD_ADDR_VAR 0 42
62015: PUSH
62016: LD_INT 0
62018: PUSH
62019: LD_INT 0
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 0
62028: PUSH
62029: LD_INT 1
62031: NEG
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 1
62039: PUSH
62040: LD_INT 0
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 1
62049: PUSH
62050: LD_INT 1
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 0
62059: PUSH
62060: LD_INT 1
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 1
62069: NEG
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 1
62080: NEG
62081: PUSH
62082: LD_INT 1
62084: NEG
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 1
62092: NEG
62093: PUSH
62094: LD_INT 2
62096: NEG
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 0
62104: PUSH
62105: LD_INT 2
62107: NEG
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 1
62115: PUSH
62116: LD_INT 1
62118: NEG
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 2
62126: PUSH
62127: LD_INT 1
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 2
62136: PUSH
62137: LD_INT 2
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 1
62146: PUSH
62147: LD_INT 2
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: LD_INT 2
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 1
62166: NEG
62167: PUSH
62168: LD_INT 1
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 2
62177: NEG
62178: PUSH
62179: LD_INT 1
62181: NEG
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 2
62189: NEG
62190: PUSH
62191: LD_INT 2
62193: NEG
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 2
62201: NEG
62202: PUSH
62203: LD_INT 3
62205: NEG
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 1
62213: NEG
62214: PUSH
62215: LD_INT 3
62217: NEG
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 0
62225: PUSH
62226: LD_INT 3
62228: NEG
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 1
62236: PUSH
62237: LD_INT 2
62239: NEG
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 3
62247: PUSH
62248: LD_INT 2
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 3
62257: PUSH
62258: LD_INT 3
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 2
62267: PUSH
62268: LD_INT 3
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 1
62277: PUSH
62278: LD_INT 3
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: LD_INT 3
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 1
62297: NEG
62298: PUSH
62299: LD_INT 2
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 3
62308: NEG
62309: PUSH
62310: LD_INT 2
62312: NEG
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 3
62320: NEG
62321: PUSH
62322: LD_INT 3
62324: NEG
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62361: LD_ADDR_VAR 0 43
62365: PUSH
62366: LD_INT 0
62368: PUSH
62369: LD_INT 0
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 0
62378: PUSH
62379: LD_INT 1
62381: NEG
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 1
62389: PUSH
62390: LD_INT 0
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 1
62399: PUSH
62400: LD_INT 1
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 0
62409: PUSH
62410: LD_INT 1
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 1
62419: NEG
62420: PUSH
62421: LD_INT 0
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 1
62430: NEG
62431: PUSH
62432: LD_INT 1
62434: NEG
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 1
62442: NEG
62443: PUSH
62444: LD_INT 2
62446: NEG
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 0
62454: PUSH
62455: LD_INT 2
62457: NEG
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 1
62465: PUSH
62466: LD_INT 1
62468: NEG
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 2
62476: PUSH
62477: LD_INT 0
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 2
62486: PUSH
62487: LD_INT 1
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 1
62496: PUSH
62497: LD_INT 2
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 0
62506: PUSH
62507: LD_INT 2
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 1
62516: NEG
62517: PUSH
62518: LD_INT 1
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 2
62527: NEG
62528: PUSH
62529: LD_INT 0
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 2
62538: NEG
62539: PUSH
62540: LD_INT 1
62542: NEG
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 1
62550: NEG
62551: PUSH
62552: LD_INT 3
62554: NEG
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 0
62562: PUSH
62563: LD_INT 3
62565: NEG
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 1
62573: PUSH
62574: LD_INT 2
62576: NEG
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 2
62584: PUSH
62585: LD_INT 1
62587: NEG
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 3
62595: PUSH
62596: LD_INT 0
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 3
62605: PUSH
62606: LD_INT 1
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 1
62615: PUSH
62616: LD_INT 3
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 0
62625: PUSH
62626: LD_INT 3
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 1
62635: NEG
62636: PUSH
62637: LD_INT 2
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 2
62646: NEG
62647: PUSH
62648: LD_INT 1
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 3
62657: NEG
62658: PUSH
62659: LD_INT 0
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 3
62668: NEG
62669: PUSH
62670: LD_INT 1
62672: NEG
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62709: LD_ADDR_VAR 0 44
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: LD_INT 0
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 0
62726: PUSH
62727: LD_INT 1
62729: NEG
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 1
62737: PUSH
62738: LD_INT 0
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 1
62747: PUSH
62748: LD_INT 1
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 0
62757: PUSH
62758: LD_INT 1
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 1
62767: NEG
62768: PUSH
62769: LD_INT 0
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 1
62778: NEG
62779: PUSH
62780: LD_INT 1
62782: NEG
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 1
62790: NEG
62791: PUSH
62792: LD_INT 2
62794: NEG
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 1
62802: PUSH
62803: LD_INT 1
62805: NEG
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 2
62813: PUSH
62814: LD_INT 0
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 2
62823: PUSH
62824: LD_INT 1
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 2
62833: PUSH
62834: LD_INT 2
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 1
62843: PUSH
62844: LD_INT 2
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 1
62853: NEG
62854: PUSH
62855: LD_INT 1
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 2
62864: NEG
62865: PUSH
62866: LD_INT 0
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 2
62875: NEG
62876: PUSH
62877: LD_INT 1
62879: NEG
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 2
62887: NEG
62888: PUSH
62889: LD_INT 2
62891: NEG
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 2
62899: NEG
62900: PUSH
62901: LD_INT 3
62903: NEG
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 2
62911: PUSH
62912: LD_INT 1
62914: NEG
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 3
62922: PUSH
62923: LD_INT 0
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 3
62932: PUSH
62933: LD_INT 1
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 3
62942: PUSH
62943: LD_INT 2
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 3
62952: PUSH
62953: LD_INT 3
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 2
62962: PUSH
62963: LD_INT 3
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 2
62972: NEG
62973: PUSH
62974: LD_INT 1
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 3
62983: NEG
62984: PUSH
62985: LD_INT 0
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 3
62994: NEG
62995: PUSH
62996: LD_INT 1
62998: NEG
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 3
63006: NEG
63007: PUSH
63008: LD_INT 2
63010: NEG
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 3
63018: NEG
63019: PUSH
63020: LD_INT 3
63022: NEG
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63059: LD_ADDR_VAR 0 45
63063: PUSH
63064: LD_INT 0
63066: PUSH
63067: LD_INT 0
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 0
63076: PUSH
63077: LD_INT 1
63079: NEG
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 1
63087: PUSH
63088: LD_INT 0
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 1
63097: PUSH
63098: LD_INT 1
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 0
63107: PUSH
63108: LD_INT 1
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 1
63117: NEG
63118: PUSH
63119: LD_INT 0
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 1
63128: NEG
63129: PUSH
63130: LD_INT 1
63132: NEG
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 1
63140: NEG
63141: PUSH
63142: LD_INT 2
63144: NEG
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 0
63152: PUSH
63153: LD_INT 2
63155: NEG
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 1
63163: PUSH
63164: LD_INT 1
63166: NEG
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 2
63174: PUSH
63175: LD_INT 1
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 2
63184: PUSH
63185: LD_INT 2
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 1
63194: PUSH
63195: LD_INT 2
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 0
63204: PUSH
63205: LD_INT 2
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 1
63214: NEG
63215: PUSH
63216: LD_INT 1
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 2
63225: NEG
63226: PUSH
63227: LD_INT 1
63229: NEG
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 2
63237: NEG
63238: PUSH
63239: LD_INT 2
63241: NEG
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 2
63249: NEG
63250: PUSH
63251: LD_INT 3
63253: NEG
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 1
63261: NEG
63262: PUSH
63263: LD_INT 3
63265: NEG
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 0
63273: PUSH
63274: LD_INT 3
63276: NEG
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 1
63284: PUSH
63285: LD_INT 2
63287: NEG
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 3
63295: PUSH
63296: LD_INT 2
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 3
63305: PUSH
63306: LD_INT 3
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 2
63315: PUSH
63316: LD_INT 3
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 1
63325: PUSH
63326: LD_INT 3
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 0
63335: PUSH
63336: LD_INT 3
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 1
63345: NEG
63346: PUSH
63347: LD_INT 2
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 3
63356: NEG
63357: PUSH
63358: LD_INT 2
63360: NEG
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 3
63368: NEG
63369: PUSH
63370: LD_INT 3
63372: NEG
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63409: LD_ADDR_VAR 0 46
63413: PUSH
63414: LD_INT 0
63416: PUSH
63417: LD_INT 0
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 0
63426: PUSH
63427: LD_INT 1
63429: NEG
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 1
63437: PUSH
63438: LD_INT 0
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 1
63447: PUSH
63448: LD_INT 1
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 0
63457: PUSH
63458: LD_INT 1
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 1
63467: NEG
63468: PUSH
63469: LD_INT 0
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 1
63478: NEG
63479: PUSH
63480: LD_INT 1
63482: NEG
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 1
63490: NEG
63491: PUSH
63492: LD_INT 2
63494: NEG
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 0
63502: PUSH
63503: LD_INT 2
63505: NEG
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 1
63513: PUSH
63514: LD_INT 1
63516: NEG
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 2
63524: PUSH
63525: LD_INT 0
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 2
63534: PUSH
63535: LD_INT 1
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 1
63544: PUSH
63545: LD_INT 2
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 0
63554: PUSH
63555: LD_INT 2
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: LD_INT 1
63564: NEG
63565: PUSH
63566: LD_INT 1
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 2
63575: NEG
63576: PUSH
63577: LD_INT 0
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 2
63586: NEG
63587: PUSH
63588: LD_INT 1
63590: NEG
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_INT 1
63598: NEG
63599: PUSH
63600: LD_INT 3
63602: NEG
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 0
63610: PUSH
63611: LD_INT 3
63613: NEG
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 1
63621: PUSH
63622: LD_INT 2
63624: NEG
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 2
63632: PUSH
63633: LD_INT 1
63635: NEG
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 3
63643: PUSH
63644: LD_INT 0
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 3
63653: PUSH
63654: LD_INT 1
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 1
63663: PUSH
63664: LD_INT 3
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 0
63673: PUSH
63674: LD_INT 3
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 1
63683: NEG
63684: PUSH
63685: LD_INT 2
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 2
63694: NEG
63695: PUSH
63696: LD_INT 1
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 3
63705: NEG
63706: PUSH
63707: LD_INT 0
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 3
63716: NEG
63717: PUSH
63718: LD_INT 1
63720: NEG
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63757: LD_ADDR_VAR 0 47
63761: PUSH
63762: LD_INT 0
63764: PUSH
63765: LD_INT 0
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 0
63774: PUSH
63775: LD_INT 1
63777: NEG
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 1
63785: PUSH
63786: LD_INT 0
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 1
63795: PUSH
63796: LD_INT 1
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 0
63805: PUSH
63806: LD_INT 1
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 1
63815: NEG
63816: PUSH
63817: LD_INT 0
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 1
63826: NEG
63827: PUSH
63828: LD_INT 1
63830: NEG
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 1
63838: NEG
63839: PUSH
63840: LD_INT 2
63842: NEG
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 0
63850: PUSH
63851: LD_INT 2
63853: NEG
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 1
63861: PUSH
63862: LD_INT 1
63864: NEG
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 2
63872: NEG
63873: PUSH
63874: LD_INT 1
63876: NEG
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 2
63884: NEG
63885: PUSH
63886: LD_INT 2
63888: NEG
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63908: LD_ADDR_VAR 0 48
63912: PUSH
63913: LD_INT 0
63915: PUSH
63916: LD_INT 0
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 0
63925: PUSH
63926: LD_INT 1
63928: NEG
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 1
63936: PUSH
63937: LD_INT 0
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 1
63946: PUSH
63947: LD_INT 1
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: LD_INT 0
63956: PUSH
63957: LD_INT 1
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 1
63966: NEG
63967: PUSH
63968: LD_INT 0
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 1
63977: NEG
63978: PUSH
63979: LD_INT 1
63981: NEG
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 1
63989: NEG
63990: PUSH
63991: LD_INT 2
63993: NEG
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 0
64001: PUSH
64002: LD_INT 2
64004: NEG
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 1
64012: PUSH
64013: LD_INT 1
64015: NEG
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 2
64023: PUSH
64024: LD_INT 0
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 2
64033: PUSH
64034: LD_INT 1
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64055: LD_ADDR_VAR 0 49
64059: PUSH
64060: LD_INT 0
64062: PUSH
64063: LD_INT 0
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 0
64072: PUSH
64073: LD_INT 1
64075: NEG
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 1
64083: PUSH
64084: LD_INT 0
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 1
64093: PUSH
64094: LD_INT 1
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: LD_INT 0
64103: PUSH
64104: LD_INT 1
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 1
64113: NEG
64114: PUSH
64115: LD_INT 0
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 1
64124: NEG
64125: PUSH
64126: LD_INT 1
64128: NEG
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 1
64136: PUSH
64137: LD_INT 1
64139: NEG
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 2
64147: PUSH
64148: LD_INT 0
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 2
64157: PUSH
64158: LD_INT 1
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 2
64167: PUSH
64168: LD_INT 2
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 1
64177: PUSH
64178: LD_INT 2
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64199: LD_ADDR_VAR 0 50
64203: PUSH
64204: LD_INT 0
64206: PUSH
64207: LD_INT 0
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 0
64216: PUSH
64217: LD_INT 1
64219: NEG
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 1
64227: PUSH
64228: LD_INT 0
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 1
64237: PUSH
64238: LD_INT 1
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 0
64247: PUSH
64248: LD_INT 1
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 1
64257: NEG
64258: PUSH
64259: LD_INT 0
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 1
64268: NEG
64269: PUSH
64270: LD_INT 1
64272: NEG
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 2
64280: PUSH
64281: LD_INT 1
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 2
64290: PUSH
64291: LD_INT 2
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 1
64300: PUSH
64301: LD_INT 2
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 0
64310: PUSH
64311: LD_INT 2
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 1
64320: NEG
64321: PUSH
64322: LD_INT 1
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64343: LD_ADDR_VAR 0 51
64347: PUSH
64348: LD_INT 0
64350: PUSH
64351: LD_INT 0
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 0
64360: PUSH
64361: LD_INT 1
64363: NEG
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 1
64371: PUSH
64372: LD_INT 0
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 1
64381: PUSH
64382: LD_INT 1
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 0
64391: PUSH
64392: LD_INT 1
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 1
64401: NEG
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 1
64412: NEG
64413: PUSH
64414: LD_INT 1
64416: NEG
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 1
64424: PUSH
64425: LD_INT 2
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 0
64434: PUSH
64435: LD_INT 2
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 1
64444: NEG
64445: PUSH
64446: LD_INT 1
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 2
64455: NEG
64456: PUSH
64457: LD_INT 0
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 2
64466: NEG
64467: PUSH
64468: LD_INT 1
64470: NEG
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64490: LD_ADDR_VAR 0 52
64494: PUSH
64495: LD_INT 0
64497: PUSH
64498: LD_INT 0
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 0
64507: PUSH
64508: LD_INT 1
64510: NEG
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: PUSH
64516: LD_INT 1
64518: PUSH
64519: LD_INT 0
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 1
64528: PUSH
64529: LD_INT 1
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 0
64538: PUSH
64539: LD_INT 1
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 1
64548: NEG
64549: PUSH
64550: LD_INT 0
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 1
64559: NEG
64560: PUSH
64561: LD_INT 1
64563: NEG
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 1
64571: NEG
64572: PUSH
64573: LD_INT 2
64575: NEG
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 1
64583: NEG
64584: PUSH
64585: LD_INT 1
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 2
64594: NEG
64595: PUSH
64596: LD_INT 0
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 2
64605: NEG
64606: PUSH
64607: LD_INT 1
64609: NEG
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 2
64617: NEG
64618: PUSH
64619: LD_INT 2
64621: NEG
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64641: LD_ADDR_VAR 0 53
64645: PUSH
64646: LD_INT 0
64648: PUSH
64649: LD_INT 0
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 0
64658: PUSH
64659: LD_INT 1
64661: NEG
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 1
64669: PUSH
64670: LD_INT 0
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 1
64679: PUSH
64680: LD_INT 1
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 0
64689: PUSH
64690: LD_INT 1
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 1
64699: NEG
64700: PUSH
64701: LD_INT 0
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 1
64710: NEG
64711: PUSH
64712: LD_INT 1
64714: NEG
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 1
64722: NEG
64723: PUSH
64724: LD_INT 2
64726: NEG
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 0
64734: PUSH
64735: LD_INT 2
64737: NEG
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 1
64745: PUSH
64746: LD_INT 1
64748: NEG
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 2
64756: PUSH
64757: LD_INT 0
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 2
64766: PUSH
64767: LD_INT 1
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 2
64776: PUSH
64777: LD_INT 2
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 1
64786: PUSH
64787: LD_INT 2
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 0
64796: PUSH
64797: LD_INT 2
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 1
64806: NEG
64807: PUSH
64808: LD_INT 1
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 2
64817: NEG
64818: PUSH
64819: LD_INT 0
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 2
64828: NEG
64829: PUSH
64830: LD_INT 1
64832: NEG
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 2
64840: NEG
64841: PUSH
64842: LD_INT 2
64844: NEG
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: LIST
64865: LIST
64866: LIST
64867: LIST
64868: LIST
64869: LIST
64870: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64871: LD_ADDR_VAR 0 54
64875: PUSH
64876: LD_INT 0
64878: PUSH
64879: LD_INT 0
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 0
64888: PUSH
64889: LD_INT 1
64891: NEG
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 1
64899: PUSH
64900: LD_INT 0
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 1
64909: PUSH
64910: LD_INT 1
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 0
64919: PUSH
64920: LD_INT 1
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 1
64929: NEG
64930: PUSH
64931: LD_INT 0
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_INT 1
64940: NEG
64941: PUSH
64942: LD_INT 1
64944: NEG
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 1
64952: NEG
64953: PUSH
64954: LD_INT 2
64956: NEG
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 0
64964: PUSH
64965: LD_INT 2
64967: NEG
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 1
64975: PUSH
64976: LD_INT 1
64978: NEG
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 2
64986: PUSH
64987: LD_INT 0
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 2
64996: PUSH
64997: LD_INT 1
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 2
65006: PUSH
65007: LD_INT 2
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 1
65016: PUSH
65017: LD_INT 2
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 0
65026: PUSH
65027: LD_INT 2
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 1
65036: NEG
65037: PUSH
65038: LD_INT 1
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 2
65047: NEG
65048: PUSH
65049: LD_INT 0
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 2
65058: NEG
65059: PUSH
65060: LD_INT 1
65062: NEG
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 2
65070: NEG
65071: PUSH
65072: LD_INT 2
65074: NEG
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65101: LD_ADDR_VAR 0 55
65105: PUSH
65106: LD_INT 0
65108: PUSH
65109: LD_INT 0
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 0
65118: PUSH
65119: LD_INT 1
65121: NEG
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 1
65129: PUSH
65130: LD_INT 0
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 1
65139: PUSH
65140: LD_INT 1
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 0
65149: PUSH
65150: LD_INT 1
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 1
65159: NEG
65160: PUSH
65161: LD_INT 0
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 1
65170: NEG
65171: PUSH
65172: LD_INT 1
65174: NEG
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 1
65182: NEG
65183: PUSH
65184: LD_INT 2
65186: NEG
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: LD_INT 0
65194: PUSH
65195: LD_INT 2
65197: NEG
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 1
65205: PUSH
65206: LD_INT 1
65208: NEG
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 2
65216: PUSH
65217: LD_INT 0
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 2
65226: PUSH
65227: LD_INT 1
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 2
65236: PUSH
65237: LD_INT 2
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: LD_INT 1
65246: PUSH
65247: LD_INT 2
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 0
65256: PUSH
65257: LD_INT 2
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: LD_INT 1
65266: NEG
65267: PUSH
65268: LD_INT 1
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 2
65277: NEG
65278: PUSH
65279: LD_INT 0
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 2
65288: NEG
65289: PUSH
65290: LD_INT 1
65292: NEG
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 2
65300: NEG
65301: PUSH
65302: LD_INT 2
65304: NEG
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65331: LD_ADDR_VAR 0 56
65335: PUSH
65336: LD_INT 0
65338: PUSH
65339: LD_INT 0
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 0
65348: PUSH
65349: LD_INT 1
65351: NEG
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 1
65359: PUSH
65360: LD_INT 0
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 1
65369: PUSH
65370: LD_INT 1
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 0
65379: PUSH
65380: LD_INT 1
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 1
65389: NEG
65390: PUSH
65391: LD_INT 0
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 1
65400: NEG
65401: PUSH
65402: LD_INT 1
65404: NEG
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 1
65412: NEG
65413: PUSH
65414: LD_INT 2
65416: NEG
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 0
65424: PUSH
65425: LD_INT 2
65427: NEG
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 1
65435: PUSH
65436: LD_INT 1
65438: NEG
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 2
65446: PUSH
65447: LD_INT 0
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 2
65456: PUSH
65457: LD_INT 1
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 2
65466: PUSH
65467: LD_INT 2
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 1
65476: PUSH
65477: LD_INT 2
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 0
65486: PUSH
65487: LD_INT 2
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 1
65496: NEG
65497: PUSH
65498: LD_INT 1
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 2
65507: NEG
65508: PUSH
65509: LD_INT 0
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 2
65518: NEG
65519: PUSH
65520: LD_INT 1
65522: NEG
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 2
65530: NEG
65531: PUSH
65532: LD_INT 2
65534: NEG
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65561: LD_ADDR_VAR 0 57
65565: PUSH
65566: LD_INT 0
65568: PUSH
65569: LD_INT 0
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 0
65578: PUSH
65579: LD_INT 1
65581: NEG
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 1
65589: PUSH
65590: LD_INT 0
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 1
65599: PUSH
65600: LD_INT 1
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 0
65609: PUSH
65610: LD_INT 1
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 1
65619: NEG
65620: PUSH
65621: LD_INT 0
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 1
65630: NEG
65631: PUSH
65632: LD_INT 1
65634: NEG
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 1
65642: NEG
65643: PUSH
65644: LD_INT 2
65646: NEG
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 0
65654: PUSH
65655: LD_INT 2
65657: NEG
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 1
65665: PUSH
65666: LD_INT 1
65668: NEG
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 2
65676: PUSH
65677: LD_INT 0
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 2
65686: PUSH
65687: LD_INT 1
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 2
65696: PUSH
65697: LD_INT 2
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 1
65706: PUSH
65707: LD_INT 2
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 0
65716: PUSH
65717: LD_INT 2
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 1
65726: NEG
65727: PUSH
65728: LD_INT 1
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 2
65737: NEG
65738: PUSH
65739: LD_INT 0
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 2
65748: NEG
65749: PUSH
65750: LD_INT 1
65752: NEG
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 2
65760: NEG
65761: PUSH
65762: LD_INT 2
65764: NEG
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65791: LD_ADDR_VAR 0 58
65795: PUSH
65796: LD_INT 0
65798: PUSH
65799: LD_INT 0
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: LD_INT 0
65808: PUSH
65809: LD_INT 1
65811: NEG
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 1
65819: PUSH
65820: LD_INT 0
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 1
65829: PUSH
65830: LD_INT 1
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 0
65839: PUSH
65840: LD_INT 1
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 1
65849: NEG
65850: PUSH
65851: LD_INT 0
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PUSH
65858: LD_INT 1
65860: NEG
65861: PUSH
65862: LD_INT 1
65864: NEG
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 1
65872: NEG
65873: PUSH
65874: LD_INT 2
65876: NEG
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 0
65884: PUSH
65885: LD_INT 2
65887: NEG
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: LD_INT 1
65895: PUSH
65896: LD_INT 1
65898: NEG
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 2
65906: PUSH
65907: LD_INT 0
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 2
65916: PUSH
65917: LD_INT 1
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 2
65926: PUSH
65927: LD_INT 2
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: LD_INT 1
65936: PUSH
65937: LD_INT 2
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 0
65946: PUSH
65947: LD_INT 2
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 1
65956: NEG
65957: PUSH
65958: LD_INT 1
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: PUSH
65965: LD_INT 2
65967: NEG
65968: PUSH
65969: LD_INT 0
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: LD_INT 2
65978: NEG
65979: PUSH
65980: LD_INT 1
65982: NEG
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 2
65990: NEG
65991: PUSH
65992: LD_INT 2
65994: NEG
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66021: LD_ADDR_VAR 0 59
66025: PUSH
66026: LD_INT 0
66028: PUSH
66029: LD_INT 0
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 0
66038: PUSH
66039: LD_INT 1
66041: NEG
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 1
66049: PUSH
66050: LD_INT 0
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 1
66059: PUSH
66060: LD_INT 1
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 0
66069: PUSH
66070: LD_INT 1
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 1
66079: NEG
66080: PUSH
66081: LD_INT 0
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 1
66090: NEG
66091: PUSH
66092: LD_INT 1
66094: NEG
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66109: LD_ADDR_VAR 0 60
66113: PUSH
66114: LD_INT 0
66116: PUSH
66117: LD_INT 0
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 0
66126: PUSH
66127: LD_INT 1
66129: NEG
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PUSH
66135: LD_INT 1
66137: PUSH
66138: LD_INT 0
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: LD_INT 1
66147: PUSH
66148: LD_INT 1
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 0
66157: PUSH
66158: LD_INT 1
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 1
66167: NEG
66168: PUSH
66169: LD_INT 0
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: PUSH
66176: LD_INT 1
66178: NEG
66179: PUSH
66180: LD_INT 1
66182: NEG
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66197: LD_ADDR_VAR 0 61
66201: PUSH
66202: LD_INT 0
66204: PUSH
66205: LD_INT 0
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: LD_INT 0
66214: PUSH
66215: LD_INT 1
66217: NEG
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: LD_INT 1
66225: PUSH
66226: LD_INT 0
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 1
66235: PUSH
66236: LD_INT 1
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 0
66245: PUSH
66246: LD_INT 1
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 1
66255: NEG
66256: PUSH
66257: LD_INT 0
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: LD_INT 1
66266: NEG
66267: PUSH
66268: LD_INT 1
66270: NEG
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66285: LD_ADDR_VAR 0 62
66289: PUSH
66290: LD_INT 0
66292: PUSH
66293: LD_INT 0
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 0
66302: PUSH
66303: LD_INT 1
66305: NEG
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 1
66313: PUSH
66314: LD_INT 0
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 1
66323: PUSH
66324: LD_INT 1
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 0
66333: PUSH
66334: LD_INT 1
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 1
66343: NEG
66344: PUSH
66345: LD_INT 0
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 1
66354: NEG
66355: PUSH
66356: LD_INT 1
66358: NEG
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66373: LD_ADDR_VAR 0 63
66377: PUSH
66378: LD_INT 0
66380: PUSH
66381: LD_INT 0
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: LD_INT 0
66390: PUSH
66391: LD_INT 1
66393: NEG
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: LD_INT 1
66401: PUSH
66402: LD_INT 0
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 1
66411: PUSH
66412: LD_INT 1
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 0
66421: PUSH
66422: LD_INT 1
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 1
66431: NEG
66432: PUSH
66433: LD_INT 0
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 1
66442: NEG
66443: PUSH
66444: LD_INT 1
66446: NEG
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66461: LD_ADDR_VAR 0 64
66465: PUSH
66466: LD_INT 0
66468: PUSH
66469: LD_INT 0
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 0
66478: PUSH
66479: LD_INT 1
66481: NEG
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 1
66489: PUSH
66490: LD_INT 0
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 1
66499: PUSH
66500: LD_INT 1
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 0
66509: PUSH
66510: LD_INT 1
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 1
66519: NEG
66520: PUSH
66521: LD_INT 0
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 1
66530: NEG
66531: PUSH
66532: LD_INT 1
66534: NEG
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: ST_TO_ADDR
// end ; 1 :
66549: GO 72446
66551: LD_INT 1
66553: DOUBLE
66554: EQUAL
66555: IFTRUE 66559
66557: GO 69182
66559: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66560: LD_ADDR_VAR 0 11
66564: PUSH
66565: LD_INT 1
66567: NEG
66568: PUSH
66569: LD_INT 3
66571: NEG
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 0
66579: PUSH
66580: LD_INT 3
66582: NEG
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 1
66590: PUSH
66591: LD_INT 2
66593: NEG
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: LIST
66603: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66604: LD_ADDR_VAR 0 12
66608: PUSH
66609: LD_INT 2
66611: PUSH
66612: LD_INT 1
66614: NEG
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 3
66622: PUSH
66623: LD_INT 0
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 3
66632: PUSH
66633: LD_INT 1
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: LIST
66644: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66645: LD_ADDR_VAR 0 13
66649: PUSH
66650: LD_INT 3
66652: PUSH
66653: LD_INT 2
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 3
66662: PUSH
66663: LD_INT 3
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 2
66672: PUSH
66673: LD_INT 3
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: LIST
66684: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66685: LD_ADDR_VAR 0 14
66689: PUSH
66690: LD_INT 1
66692: PUSH
66693: LD_INT 3
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 0
66702: PUSH
66703: LD_INT 3
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: PUSH
66710: LD_INT 1
66712: NEG
66713: PUSH
66714: LD_INT 2
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: LIST
66725: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66726: LD_ADDR_VAR 0 15
66730: PUSH
66731: LD_INT 2
66733: NEG
66734: PUSH
66735: LD_INT 1
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 3
66744: NEG
66745: PUSH
66746: LD_INT 0
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 3
66755: NEG
66756: PUSH
66757: LD_INT 1
66759: NEG
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: LIST
66769: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66770: LD_ADDR_VAR 0 16
66774: PUSH
66775: LD_INT 2
66777: NEG
66778: PUSH
66779: LD_INT 3
66781: NEG
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 3
66789: NEG
66790: PUSH
66791: LD_INT 2
66793: NEG
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 3
66801: NEG
66802: PUSH
66803: LD_INT 3
66805: NEG
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: LIST
66815: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66816: LD_ADDR_VAR 0 17
66820: PUSH
66821: LD_INT 1
66823: NEG
66824: PUSH
66825: LD_INT 3
66827: NEG
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: LD_INT 0
66835: PUSH
66836: LD_INT 3
66838: NEG
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 1
66846: PUSH
66847: LD_INT 2
66849: NEG
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: LIST
66859: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66860: LD_ADDR_VAR 0 18
66864: PUSH
66865: LD_INT 2
66867: PUSH
66868: LD_INT 1
66870: NEG
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 3
66878: PUSH
66879: LD_INT 0
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 3
66888: PUSH
66889: LD_INT 1
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: LIST
66900: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66901: LD_ADDR_VAR 0 19
66905: PUSH
66906: LD_INT 3
66908: PUSH
66909: LD_INT 2
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: PUSH
66916: LD_INT 3
66918: PUSH
66919: LD_INT 3
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 2
66928: PUSH
66929: LD_INT 3
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: LIST
66940: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66941: LD_ADDR_VAR 0 20
66945: PUSH
66946: LD_INT 1
66948: PUSH
66949: LD_INT 3
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: PUSH
66956: LD_INT 0
66958: PUSH
66959: LD_INT 3
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: LD_INT 1
66968: NEG
66969: PUSH
66970: LD_INT 2
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: LIST
66981: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66982: LD_ADDR_VAR 0 21
66986: PUSH
66987: LD_INT 2
66989: NEG
66990: PUSH
66991: LD_INT 1
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 3
67000: NEG
67001: PUSH
67002: LD_INT 0
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 3
67011: NEG
67012: PUSH
67013: LD_INT 1
67015: NEG
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: LIST
67025: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67026: LD_ADDR_VAR 0 22
67030: PUSH
67031: LD_INT 2
67033: NEG
67034: PUSH
67035: LD_INT 3
67037: NEG
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 3
67045: NEG
67046: PUSH
67047: LD_INT 2
67049: NEG
67050: PUSH
67051: EMPTY
67052: LIST
67053: LIST
67054: PUSH
67055: LD_INT 3
67057: NEG
67058: PUSH
67059: LD_INT 3
67061: NEG
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: LIST
67071: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67072: LD_ADDR_VAR 0 23
67076: PUSH
67077: LD_INT 0
67079: PUSH
67080: LD_INT 3
67082: NEG
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 1
67090: NEG
67091: PUSH
67092: LD_INT 4
67094: NEG
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: LD_INT 1
67102: PUSH
67103: LD_INT 3
67105: NEG
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: LIST
67115: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67116: LD_ADDR_VAR 0 24
67120: PUSH
67121: LD_INT 3
67123: PUSH
67124: LD_INT 0
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: PUSH
67131: LD_INT 3
67133: PUSH
67134: LD_INT 1
67136: NEG
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: LD_INT 4
67144: PUSH
67145: LD_INT 1
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: LIST
67156: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67157: LD_ADDR_VAR 0 25
67161: PUSH
67162: LD_INT 3
67164: PUSH
67165: LD_INT 3
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PUSH
67172: LD_INT 4
67174: PUSH
67175: LD_INT 3
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 3
67184: PUSH
67185: LD_INT 4
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: EMPTY
67193: LIST
67194: LIST
67195: LIST
67196: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67197: LD_ADDR_VAR 0 26
67201: PUSH
67202: LD_INT 0
67204: PUSH
67205: LD_INT 3
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 1
67214: PUSH
67215: LD_INT 4
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 1
67224: NEG
67225: PUSH
67226: LD_INT 3
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: LIST
67237: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67238: LD_ADDR_VAR 0 27
67242: PUSH
67243: LD_INT 3
67245: NEG
67246: PUSH
67247: LD_INT 0
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 3
67256: NEG
67257: PUSH
67258: LD_INT 1
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 4
67267: NEG
67268: PUSH
67269: LD_INT 1
67271: NEG
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: LIST
67281: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67282: LD_ADDR_VAR 0 28
67286: PUSH
67287: LD_INT 3
67289: NEG
67290: PUSH
67291: LD_INT 3
67293: NEG
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 3
67301: NEG
67302: PUSH
67303: LD_INT 4
67305: NEG
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PUSH
67311: LD_INT 4
67313: NEG
67314: PUSH
67315: LD_INT 3
67317: NEG
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: LIST
67327: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67328: LD_ADDR_VAR 0 29
67332: PUSH
67333: LD_INT 1
67335: NEG
67336: PUSH
67337: LD_INT 3
67339: NEG
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 0
67347: PUSH
67348: LD_INT 3
67350: NEG
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 1
67358: PUSH
67359: LD_INT 2
67361: NEG
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 1
67369: NEG
67370: PUSH
67371: LD_INT 4
67373: NEG
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 0
67381: PUSH
67382: LD_INT 4
67384: NEG
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: LD_INT 1
67392: PUSH
67393: LD_INT 3
67395: NEG
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: PUSH
67401: LD_INT 1
67403: NEG
67404: PUSH
67405: LD_INT 5
67407: NEG
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: LD_INT 0
67415: PUSH
67416: LD_INT 5
67418: NEG
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 1
67426: PUSH
67427: LD_INT 4
67429: NEG
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: LD_INT 1
67437: NEG
67438: PUSH
67439: LD_INT 6
67441: NEG
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PUSH
67447: LD_INT 0
67449: PUSH
67450: LD_INT 6
67452: NEG
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 1
67460: PUSH
67461: LD_INT 5
67463: NEG
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67483: LD_ADDR_VAR 0 30
67487: PUSH
67488: LD_INT 2
67490: PUSH
67491: LD_INT 1
67493: NEG
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 3
67501: PUSH
67502: LD_INT 0
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 3
67511: PUSH
67512: LD_INT 1
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 3
67521: PUSH
67522: LD_INT 1
67524: NEG
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 4
67532: PUSH
67533: LD_INT 0
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 4
67542: PUSH
67543: LD_INT 1
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 4
67552: PUSH
67553: LD_INT 1
67555: NEG
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 5
67563: PUSH
67564: LD_INT 0
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 5
67573: PUSH
67574: LD_INT 1
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 5
67583: PUSH
67584: LD_INT 1
67586: NEG
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: LD_INT 6
67594: PUSH
67595: LD_INT 0
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 6
67604: PUSH
67605: LD_INT 1
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: LIST
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: LIST
67625: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67626: LD_ADDR_VAR 0 31
67630: PUSH
67631: LD_INT 3
67633: PUSH
67634: LD_INT 2
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 3
67643: PUSH
67644: LD_INT 3
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: LD_INT 2
67653: PUSH
67654: LD_INT 3
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: LD_INT 4
67663: PUSH
67664: LD_INT 3
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_INT 4
67673: PUSH
67674: LD_INT 4
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: LD_INT 3
67683: PUSH
67684: LD_INT 4
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 5
67693: PUSH
67694: LD_INT 4
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 5
67703: PUSH
67704: LD_INT 5
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: LD_INT 4
67713: PUSH
67714: LD_INT 5
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 6
67723: PUSH
67724: LD_INT 5
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 6
67733: PUSH
67734: LD_INT 6
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 5
67743: PUSH
67744: LD_INT 6
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: LIST
67755: LIST
67756: LIST
67757: LIST
67758: LIST
67759: LIST
67760: LIST
67761: LIST
67762: LIST
67763: LIST
67764: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67765: LD_ADDR_VAR 0 32
67769: PUSH
67770: LD_INT 1
67772: PUSH
67773: LD_INT 3
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: LD_INT 0
67782: PUSH
67783: LD_INT 3
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: LD_INT 1
67792: NEG
67793: PUSH
67794: LD_INT 2
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: LD_INT 1
67803: PUSH
67804: LD_INT 4
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: LD_INT 0
67813: PUSH
67814: LD_INT 4
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: LD_INT 1
67823: NEG
67824: PUSH
67825: LD_INT 3
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: PUSH
67832: LD_INT 1
67834: PUSH
67835: LD_INT 5
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: LD_INT 0
67844: PUSH
67845: LD_INT 5
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 1
67854: NEG
67855: PUSH
67856: LD_INT 4
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: LD_INT 1
67865: PUSH
67866: LD_INT 6
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 0
67875: PUSH
67876: LD_INT 6
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PUSH
67883: LD_INT 1
67885: NEG
67886: PUSH
67887: LD_INT 5
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: LIST
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67908: LD_ADDR_VAR 0 33
67912: PUSH
67913: LD_INT 2
67915: NEG
67916: PUSH
67917: LD_INT 1
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 3
67926: NEG
67927: PUSH
67928: LD_INT 0
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 3
67937: NEG
67938: PUSH
67939: LD_INT 1
67941: NEG
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: LD_INT 3
67949: NEG
67950: PUSH
67951: LD_INT 1
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PUSH
67958: LD_INT 4
67960: NEG
67961: PUSH
67962: LD_INT 0
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: PUSH
67969: LD_INT 4
67971: NEG
67972: PUSH
67973: LD_INT 1
67975: NEG
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 4
67983: NEG
67984: PUSH
67985: LD_INT 1
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PUSH
67992: LD_INT 5
67994: NEG
67995: PUSH
67996: LD_INT 0
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: LD_INT 5
68005: NEG
68006: PUSH
68007: LD_INT 1
68009: NEG
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PUSH
68015: LD_INT 5
68017: NEG
68018: PUSH
68019: LD_INT 1
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 6
68028: NEG
68029: PUSH
68030: LD_INT 0
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 6
68039: NEG
68040: PUSH
68041: LD_INT 1
68043: NEG
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68063: LD_ADDR_VAR 0 34
68067: PUSH
68068: LD_INT 2
68070: NEG
68071: PUSH
68072: LD_INT 3
68074: NEG
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 3
68082: NEG
68083: PUSH
68084: LD_INT 2
68086: NEG
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 3
68094: NEG
68095: PUSH
68096: LD_INT 3
68098: NEG
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: LD_INT 3
68106: NEG
68107: PUSH
68108: LD_INT 4
68110: NEG
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 4
68118: NEG
68119: PUSH
68120: LD_INT 3
68122: NEG
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 4
68130: NEG
68131: PUSH
68132: LD_INT 4
68134: NEG
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 4
68142: NEG
68143: PUSH
68144: LD_INT 5
68146: NEG
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 5
68154: NEG
68155: PUSH
68156: LD_INT 4
68158: NEG
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 5
68166: NEG
68167: PUSH
68168: LD_INT 5
68170: NEG
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 5
68178: NEG
68179: PUSH
68180: LD_INT 6
68182: NEG
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: LD_INT 6
68190: NEG
68191: PUSH
68192: LD_INT 5
68194: NEG
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: LD_INT 6
68202: NEG
68203: PUSH
68204: LD_INT 6
68206: NEG
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: LIST
68221: LIST
68222: LIST
68223: LIST
68224: LIST
68225: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68226: LD_ADDR_VAR 0 41
68230: PUSH
68231: LD_INT 0
68233: PUSH
68234: LD_INT 2
68236: NEG
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: LD_INT 1
68244: NEG
68245: PUSH
68246: LD_INT 3
68248: NEG
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 1
68256: PUSH
68257: LD_INT 2
68259: NEG
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: LIST
68269: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68270: LD_ADDR_VAR 0 42
68274: PUSH
68275: LD_INT 2
68277: PUSH
68278: LD_INT 0
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 2
68287: PUSH
68288: LD_INT 1
68290: NEG
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: PUSH
68296: LD_INT 3
68298: PUSH
68299: LD_INT 1
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: EMPTY
68307: LIST
68308: LIST
68309: LIST
68310: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68311: LD_ADDR_VAR 0 43
68315: PUSH
68316: LD_INT 2
68318: PUSH
68319: LD_INT 2
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 3
68328: PUSH
68329: LD_INT 2
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: LD_INT 2
68338: PUSH
68339: LD_INT 3
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: LIST
68350: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68351: LD_ADDR_VAR 0 44
68355: PUSH
68356: LD_INT 0
68358: PUSH
68359: LD_INT 2
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: PUSH
68366: LD_INT 1
68368: PUSH
68369: LD_INT 3
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 1
68378: NEG
68379: PUSH
68380: LD_INT 2
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: LIST
68391: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68392: LD_ADDR_VAR 0 45
68396: PUSH
68397: LD_INT 2
68399: NEG
68400: PUSH
68401: LD_INT 0
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 2
68410: NEG
68411: PUSH
68412: LD_INT 1
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: LD_INT 3
68421: NEG
68422: PUSH
68423: LD_INT 1
68425: NEG
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: EMPTY
68432: LIST
68433: LIST
68434: LIST
68435: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68436: LD_ADDR_VAR 0 46
68440: PUSH
68441: LD_INT 2
68443: NEG
68444: PUSH
68445: LD_INT 2
68447: NEG
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: PUSH
68453: LD_INT 2
68455: NEG
68456: PUSH
68457: LD_INT 3
68459: NEG
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 3
68467: NEG
68468: PUSH
68469: LD_INT 2
68471: NEG
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: LIST
68481: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68482: LD_ADDR_VAR 0 47
68486: PUSH
68487: LD_INT 2
68489: NEG
68490: PUSH
68491: LD_INT 3
68493: NEG
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PUSH
68499: LD_INT 1
68501: NEG
68502: PUSH
68503: LD_INT 3
68505: NEG
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68515: LD_ADDR_VAR 0 48
68519: PUSH
68520: LD_INT 1
68522: PUSH
68523: LD_INT 2
68525: NEG
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: PUSH
68531: LD_INT 2
68533: PUSH
68534: LD_INT 1
68536: NEG
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68546: LD_ADDR_VAR 0 49
68550: PUSH
68551: LD_INT 3
68553: PUSH
68554: LD_INT 1
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: PUSH
68561: LD_INT 3
68563: PUSH
68564: LD_INT 2
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68575: LD_ADDR_VAR 0 50
68579: PUSH
68580: LD_INT 2
68582: PUSH
68583: LD_INT 3
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 1
68592: PUSH
68593: LD_INT 3
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68604: LD_ADDR_VAR 0 51
68608: PUSH
68609: LD_INT 1
68611: NEG
68612: PUSH
68613: LD_INT 2
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 2
68622: NEG
68623: PUSH
68624: LD_INT 1
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68635: LD_ADDR_VAR 0 52
68639: PUSH
68640: LD_INT 3
68642: NEG
68643: PUSH
68644: LD_INT 1
68646: NEG
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 3
68654: NEG
68655: PUSH
68656: LD_INT 2
68658: NEG
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68668: LD_ADDR_VAR 0 53
68672: PUSH
68673: LD_INT 1
68675: NEG
68676: PUSH
68677: LD_INT 3
68679: NEG
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: LD_INT 0
68687: PUSH
68688: LD_INT 3
68690: NEG
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: PUSH
68696: LD_INT 1
68698: PUSH
68699: LD_INT 2
68701: NEG
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: LIST
68711: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68712: LD_ADDR_VAR 0 54
68716: PUSH
68717: LD_INT 2
68719: PUSH
68720: LD_INT 1
68722: NEG
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: PUSH
68728: LD_INT 3
68730: PUSH
68731: LD_INT 0
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: PUSH
68738: LD_INT 3
68740: PUSH
68741: LD_INT 1
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: LIST
68752: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68753: LD_ADDR_VAR 0 55
68757: PUSH
68758: LD_INT 3
68760: PUSH
68761: LD_INT 2
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_INT 3
68770: PUSH
68771: LD_INT 3
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: LD_INT 2
68780: PUSH
68781: LD_INT 3
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: LIST
68792: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68793: LD_ADDR_VAR 0 56
68797: PUSH
68798: LD_INT 1
68800: PUSH
68801: LD_INT 3
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: PUSH
68808: LD_INT 0
68810: PUSH
68811: LD_INT 3
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: PUSH
68818: LD_INT 1
68820: NEG
68821: PUSH
68822: LD_INT 2
68824: PUSH
68825: EMPTY
68826: LIST
68827: LIST
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: LIST
68833: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68834: LD_ADDR_VAR 0 57
68838: PUSH
68839: LD_INT 2
68841: NEG
68842: PUSH
68843: LD_INT 1
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 3
68852: NEG
68853: PUSH
68854: LD_INT 0
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: PUSH
68861: LD_INT 3
68863: NEG
68864: PUSH
68865: LD_INT 1
68867: NEG
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: LIST
68877: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68878: LD_ADDR_VAR 0 58
68882: PUSH
68883: LD_INT 2
68885: NEG
68886: PUSH
68887: LD_INT 3
68889: NEG
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PUSH
68895: LD_INT 3
68897: NEG
68898: PUSH
68899: LD_INT 2
68901: NEG
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PUSH
68907: LD_INT 3
68909: NEG
68910: PUSH
68911: LD_INT 3
68913: NEG
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: LIST
68923: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68924: LD_ADDR_VAR 0 59
68928: PUSH
68929: LD_INT 1
68931: NEG
68932: PUSH
68933: LD_INT 2
68935: NEG
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: PUSH
68941: LD_INT 0
68943: PUSH
68944: LD_INT 2
68946: NEG
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: LD_INT 1
68954: PUSH
68955: LD_INT 1
68957: NEG
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: LIST
68967: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68968: LD_ADDR_VAR 0 60
68972: PUSH
68973: LD_INT 1
68975: PUSH
68976: LD_INT 1
68978: NEG
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 2
68986: PUSH
68987: LD_INT 0
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 2
68996: PUSH
68997: LD_INT 1
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: LIST
69008: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69009: LD_ADDR_VAR 0 61
69013: PUSH
69014: LD_INT 2
69016: PUSH
69017: LD_INT 1
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: PUSH
69024: LD_INT 2
69026: PUSH
69027: LD_INT 2
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: PUSH
69034: LD_INT 1
69036: PUSH
69037: LD_INT 2
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: LIST
69048: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69049: LD_ADDR_VAR 0 62
69053: PUSH
69054: LD_INT 1
69056: PUSH
69057: LD_INT 2
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 0
69066: PUSH
69067: LD_INT 2
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 1
69076: NEG
69077: PUSH
69078: LD_INT 1
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: LIST
69089: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69090: LD_ADDR_VAR 0 63
69094: PUSH
69095: LD_INT 1
69097: NEG
69098: PUSH
69099: LD_INT 1
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: LD_INT 2
69108: NEG
69109: PUSH
69110: LD_INT 0
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PUSH
69117: LD_INT 2
69119: NEG
69120: PUSH
69121: LD_INT 1
69123: NEG
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: LIST
69133: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69134: LD_ADDR_VAR 0 64
69138: PUSH
69139: LD_INT 1
69141: NEG
69142: PUSH
69143: LD_INT 2
69145: NEG
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 2
69153: NEG
69154: PUSH
69155: LD_INT 1
69157: NEG
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: LD_INT 2
69165: NEG
69166: PUSH
69167: LD_INT 2
69169: NEG
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: LIST
69179: ST_TO_ADDR
// end ; 2 :
69180: GO 72446
69182: LD_INT 2
69184: DOUBLE
69185: EQUAL
69186: IFTRUE 69190
69188: GO 72445
69190: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69191: LD_ADDR_VAR 0 29
69195: PUSH
69196: LD_INT 4
69198: PUSH
69199: LD_INT 0
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: PUSH
69206: LD_INT 4
69208: PUSH
69209: LD_INT 1
69211: NEG
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 5
69219: PUSH
69220: LD_INT 0
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: LD_INT 5
69229: PUSH
69230: LD_INT 1
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: LD_INT 4
69239: PUSH
69240: LD_INT 1
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: PUSH
69247: LD_INT 3
69249: PUSH
69250: LD_INT 0
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 3
69259: PUSH
69260: LD_INT 1
69262: NEG
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: PUSH
69268: LD_INT 3
69270: PUSH
69271: LD_INT 2
69273: NEG
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: PUSH
69279: LD_INT 5
69281: PUSH
69282: LD_INT 2
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: PUSH
69289: LD_INT 3
69291: PUSH
69292: LD_INT 3
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 3
69301: PUSH
69302: LD_INT 2
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 4
69311: PUSH
69312: LD_INT 3
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: LD_INT 4
69321: PUSH
69322: LD_INT 4
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 3
69331: PUSH
69332: LD_INT 4
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: PUSH
69339: LD_INT 2
69341: PUSH
69342: LD_INT 3
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: LD_INT 2
69351: PUSH
69352: LD_INT 2
69354: PUSH
69355: EMPTY
69356: LIST
69357: LIST
69358: PUSH
69359: LD_INT 4
69361: PUSH
69362: LD_INT 2
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: PUSH
69369: LD_INT 2
69371: PUSH
69372: LD_INT 4
69374: PUSH
69375: EMPTY
69376: LIST
69377: LIST
69378: PUSH
69379: LD_INT 0
69381: PUSH
69382: LD_INT 4
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: PUSH
69389: LD_INT 0
69391: PUSH
69392: LD_INT 3
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: PUSH
69399: LD_INT 1
69401: PUSH
69402: LD_INT 4
69404: PUSH
69405: EMPTY
69406: LIST
69407: LIST
69408: PUSH
69409: LD_INT 1
69411: PUSH
69412: LD_INT 5
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: LD_INT 0
69421: PUSH
69422: LD_INT 5
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PUSH
69429: LD_INT 1
69431: NEG
69432: PUSH
69433: LD_INT 4
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: PUSH
69440: LD_INT 1
69442: NEG
69443: PUSH
69444: LD_INT 3
69446: PUSH
69447: EMPTY
69448: LIST
69449: LIST
69450: PUSH
69451: LD_INT 2
69453: PUSH
69454: LD_INT 5
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: LD_INT 2
69463: NEG
69464: PUSH
69465: LD_INT 3
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PUSH
69472: LD_INT 3
69474: NEG
69475: PUSH
69476: LD_INT 0
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PUSH
69483: LD_INT 3
69485: NEG
69486: PUSH
69487: LD_INT 1
69489: NEG
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: PUSH
69495: LD_INT 2
69497: NEG
69498: PUSH
69499: LD_INT 0
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 2
69508: NEG
69509: PUSH
69510: LD_INT 1
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: LD_INT 3
69519: NEG
69520: PUSH
69521: LD_INT 1
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: LD_INT 4
69530: NEG
69531: PUSH
69532: LD_INT 0
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: PUSH
69539: LD_INT 4
69541: NEG
69542: PUSH
69543: LD_INT 1
69545: NEG
69546: PUSH
69547: EMPTY
69548: LIST
69549: LIST
69550: PUSH
69551: LD_INT 4
69553: NEG
69554: PUSH
69555: LD_INT 2
69557: NEG
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PUSH
69563: LD_INT 2
69565: NEG
69566: PUSH
69567: LD_INT 2
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PUSH
69574: LD_INT 4
69576: NEG
69577: PUSH
69578: LD_INT 4
69580: NEG
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: PUSH
69586: LD_INT 4
69588: NEG
69589: PUSH
69590: LD_INT 5
69592: NEG
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: LD_INT 3
69600: NEG
69601: PUSH
69602: LD_INT 4
69604: NEG
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: LD_INT 3
69612: NEG
69613: PUSH
69614: LD_INT 3
69616: NEG
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: PUSH
69622: LD_INT 4
69624: NEG
69625: PUSH
69626: LD_INT 3
69628: NEG
69629: PUSH
69630: EMPTY
69631: LIST
69632: LIST
69633: PUSH
69634: LD_INT 5
69636: NEG
69637: PUSH
69638: LD_INT 4
69640: NEG
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: PUSH
69646: LD_INT 5
69648: NEG
69649: PUSH
69650: LD_INT 5
69652: NEG
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 3
69660: NEG
69661: PUSH
69662: LD_INT 5
69664: NEG
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: PUSH
69670: LD_INT 5
69672: NEG
69673: PUSH
69674: LD_INT 3
69676: NEG
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: LIST
69686: LIST
69687: LIST
69688: LIST
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: LIST
69694: LIST
69695: LIST
69696: LIST
69697: LIST
69698: LIST
69699: LIST
69700: LIST
69701: LIST
69702: LIST
69703: LIST
69704: LIST
69705: LIST
69706: LIST
69707: LIST
69708: LIST
69709: LIST
69710: LIST
69711: LIST
69712: LIST
69713: LIST
69714: LIST
69715: LIST
69716: LIST
69717: LIST
69718: LIST
69719: LIST
69720: LIST
69721: LIST
69722: LIST
69723: LIST
69724: LIST
69725: LIST
69726: LIST
69727: LIST
69728: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69729: LD_ADDR_VAR 0 30
69733: PUSH
69734: LD_INT 4
69736: PUSH
69737: LD_INT 4
69739: PUSH
69740: EMPTY
69741: LIST
69742: LIST
69743: PUSH
69744: LD_INT 4
69746: PUSH
69747: LD_INT 3
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: LD_INT 5
69756: PUSH
69757: LD_INT 4
69759: PUSH
69760: EMPTY
69761: LIST
69762: LIST
69763: PUSH
69764: LD_INT 5
69766: PUSH
69767: LD_INT 5
69769: PUSH
69770: EMPTY
69771: LIST
69772: LIST
69773: PUSH
69774: LD_INT 4
69776: PUSH
69777: LD_INT 5
69779: PUSH
69780: EMPTY
69781: LIST
69782: LIST
69783: PUSH
69784: LD_INT 3
69786: PUSH
69787: LD_INT 4
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: PUSH
69794: LD_INT 3
69796: PUSH
69797: LD_INT 3
69799: PUSH
69800: EMPTY
69801: LIST
69802: LIST
69803: PUSH
69804: LD_INT 5
69806: PUSH
69807: LD_INT 3
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: PUSH
69814: LD_INT 3
69816: PUSH
69817: LD_INT 5
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: LD_INT 0
69826: PUSH
69827: LD_INT 3
69829: PUSH
69830: EMPTY
69831: LIST
69832: LIST
69833: PUSH
69834: LD_INT 0
69836: PUSH
69837: LD_INT 2
69839: PUSH
69840: EMPTY
69841: LIST
69842: LIST
69843: PUSH
69844: LD_INT 1
69846: PUSH
69847: LD_INT 3
69849: PUSH
69850: EMPTY
69851: LIST
69852: LIST
69853: PUSH
69854: LD_INT 1
69856: PUSH
69857: LD_INT 4
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: PUSH
69864: LD_INT 0
69866: PUSH
69867: LD_INT 4
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PUSH
69874: LD_INT 1
69876: NEG
69877: PUSH
69878: LD_INT 3
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 1
69887: NEG
69888: PUSH
69889: LD_INT 2
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: PUSH
69896: LD_INT 2
69898: PUSH
69899: LD_INT 4
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: PUSH
69906: LD_INT 2
69908: NEG
69909: PUSH
69910: LD_INT 2
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_INT 4
69919: NEG
69920: PUSH
69921: LD_INT 0
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 4
69930: NEG
69931: PUSH
69932: LD_INT 1
69934: NEG
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 3
69942: NEG
69943: PUSH
69944: LD_INT 0
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: LD_INT 3
69953: NEG
69954: PUSH
69955: LD_INT 1
69957: PUSH
69958: EMPTY
69959: LIST
69960: LIST
69961: PUSH
69962: LD_INT 4
69964: NEG
69965: PUSH
69966: LD_INT 1
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: LD_INT 5
69975: NEG
69976: PUSH
69977: LD_INT 0
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: PUSH
69984: LD_INT 5
69986: NEG
69987: PUSH
69988: LD_INT 1
69990: NEG
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: PUSH
69996: LD_INT 5
69998: NEG
69999: PUSH
70000: LD_INT 2
70002: NEG
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: LD_INT 3
70010: NEG
70011: PUSH
70012: LD_INT 2
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: PUSH
70019: LD_INT 3
70021: NEG
70022: PUSH
70023: LD_INT 3
70025: NEG
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: PUSH
70031: LD_INT 3
70033: NEG
70034: PUSH
70035: LD_INT 4
70037: NEG
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: PUSH
70043: LD_INT 2
70045: NEG
70046: PUSH
70047: LD_INT 3
70049: NEG
70050: PUSH
70051: EMPTY
70052: LIST
70053: LIST
70054: PUSH
70055: LD_INT 2
70057: NEG
70058: PUSH
70059: LD_INT 2
70061: NEG
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: PUSH
70067: LD_INT 3
70069: NEG
70070: PUSH
70071: LD_INT 2
70073: NEG
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: LD_INT 4
70081: NEG
70082: PUSH
70083: LD_INT 3
70085: NEG
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: PUSH
70091: LD_INT 4
70093: NEG
70094: PUSH
70095: LD_INT 4
70097: NEG
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: PUSH
70103: LD_INT 2
70105: NEG
70106: PUSH
70107: LD_INT 4
70109: NEG
70110: PUSH
70111: EMPTY
70112: LIST
70113: LIST
70114: PUSH
70115: LD_INT 4
70117: NEG
70118: PUSH
70119: LD_INT 2
70121: NEG
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: PUSH
70127: LD_INT 0
70129: PUSH
70130: LD_INT 4
70132: NEG
70133: PUSH
70134: EMPTY
70135: LIST
70136: LIST
70137: PUSH
70138: LD_INT 0
70140: PUSH
70141: LD_INT 5
70143: NEG
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: PUSH
70149: LD_INT 1
70151: PUSH
70152: LD_INT 4
70154: NEG
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: LD_INT 1
70162: PUSH
70163: LD_INT 3
70165: NEG
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PUSH
70171: LD_INT 0
70173: PUSH
70174: LD_INT 3
70176: NEG
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: PUSH
70182: LD_INT 1
70184: NEG
70185: PUSH
70186: LD_INT 4
70188: NEG
70189: PUSH
70190: EMPTY
70191: LIST
70192: LIST
70193: PUSH
70194: LD_INT 1
70196: NEG
70197: PUSH
70198: LD_INT 5
70200: NEG
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: PUSH
70206: LD_INT 2
70208: PUSH
70209: LD_INT 3
70211: NEG
70212: PUSH
70213: EMPTY
70214: LIST
70215: LIST
70216: PUSH
70217: LD_INT 2
70219: NEG
70220: PUSH
70221: LD_INT 5
70223: NEG
70224: PUSH
70225: EMPTY
70226: LIST
70227: LIST
70228: PUSH
70229: EMPTY
70230: LIST
70231: LIST
70232: LIST
70233: LIST
70234: LIST
70235: LIST
70236: LIST
70237: LIST
70238: LIST
70239: LIST
70240: LIST
70241: LIST
70242: LIST
70243: LIST
70244: LIST
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: LIST
70253: LIST
70254: LIST
70255: LIST
70256: LIST
70257: LIST
70258: LIST
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: LIST
70265: LIST
70266: LIST
70267: LIST
70268: LIST
70269: LIST
70270: LIST
70271: LIST
70272: LIST
70273: LIST
70274: LIST
70275: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70276: LD_ADDR_VAR 0 31
70280: PUSH
70281: LD_INT 0
70283: PUSH
70284: LD_INT 4
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: PUSH
70291: LD_INT 0
70293: PUSH
70294: LD_INT 3
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: LD_INT 1
70303: PUSH
70304: LD_INT 4
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: LD_INT 1
70313: PUSH
70314: LD_INT 5
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PUSH
70321: LD_INT 0
70323: PUSH
70324: LD_INT 5
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: LD_INT 1
70333: NEG
70334: PUSH
70335: LD_INT 4
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: LD_INT 1
70344: NEG
70345: PUSH
70346: LD_INT 3
70348: PUSH
70349: EMPTY
70350: LIST
70351: LIST
70352: PUSH
70353: LD_INT 2
70355: PUSH
70356: LD_INT 5
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 2
70365: NEG
70366: PUSH
70367: LD_INT 3
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: PUSH
70374: LD_INT 3
70376: NEG
70377: PUSH
70378: LD_INT 0
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: LD_INT 3
70387: NEG
70388: PUSH
70389: LD_INT 1
70391: NEG
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: PUSH
70397: LD_INT 2
70399: NEG
70400: PUSH
70401: LD_INT 0
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: PUSH
70408: LD_INT 2
70410: NEG
70411: PUSH
70412: LD_INT 1
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PUSH
70419: LD_INT 3
70421: NEG
70422: PUSH
70423: LD_INT 1
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: PUSH
70430: LD_INT 4
70432: NEG
70433: PUSH
70434: LD_INT 0
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: PUSH
70441: LD_INT 4
70443: NEG
70444: PUSH
70445: LD_INT 1
70447: NEG
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PUSH
70453: LD_INT 4
70455: NEG
70456: PUSH
70457: LD_INT 2
70459: NEG
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: PUSH
70465: LD_INT 2
70467: NEG
70468: PUSH
70469: LD_INT 2
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: PUSH
70476: LD_INT 4
70478: NEG
70479: PUSH
70480: LD_INT 4
70482: NEG
70483: PUSH
70484: EMPTY
70485: LIST
70486: LIST
70487: PUSH
70488: LD_INT 4
70490: NEG
70491: PUSH
70492: LD_INT 5
70494: NEG
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: LD_INT 3
70502: NEG
70503: PUSH
70504: LD_INT 4
70506: NEG
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: PUSH
70512: LD_INT 3
70514: NEG
70515: PUSH
70516: LD_INT 3
70518: NEG
70519: PUSH
70520: EMPTY
70521: LIST
70522: LIST
70523: PUSH
70524: LD_INT 4
70526: NEG
70527: PUSH
70528: LD_INT 3
70530: NEG
70531: PUSH
70532: EMPTY
70533: LIST
70534: LIST
70535: PUSH
70536: LD_INT 5
70538: NEG
70539: PUSH
70540: LD_INT 4
70542: NEG
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: PUSH
70548: LD_INT 5
70550: NEG
70551: PUSH
70552: LD_INT 5
70554: NEG
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: PUSH
70560: LD_INT 3
70562: NEG
70563: PUSH
70564: LD_INT 5
70566: NEG
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: PUSH
70572: LD_INT 5
70574: NEG
70575: PUSH
70576: LD_INT 3
70578: NEG
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: PUSH
70584: LD_INT 0
70586: PUSH
70587: LD_INT 3
70589: NEG
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: PUSH
70595: LD_INT 0
70597: PUSH
70598: LD_INT 4
70600: NEG
70601: PUSH
70602: EMPTY
70603: LIST
70604: LIST
70605: PUSH
70606: LD_INT 1
70608: PUSH
70609: LD_INT 3
70611: NEG
70612: PUSH
70613: EMPTY
70614: LIST
70615: LIST
70616: PUSH
70617: LD_INT 1
70619: PUSH
70620: LD_INT 2
70622: NEG
70623: PUSH
70624: EMPTY
70625: LIST
70626: LIST
70627: PUSH
70628: LD_INT 0
70630: PUSH
70631: LD_INT 2
70633: NEG
70634: PUSH
70635: EMPTY
70636: LIST
70637: LIST
70638: PUSH
70639: LD_INT 1
70641: NEG
70642: PUSH
70643: LD_INT 3
70645: NEG
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 1
70653: NEG
70654: PUSH
70655: LD_INT 4
70657: NEG
70658: PUSH
70659: EMPTY
70660: LIST
70661: LIST
70662: PUSH
70663: LD_INT 2
70665: PUSH
70666: LD_INT 2
70668: NEG
70669: PUSH
70670: EMPTY
70671: LIST
70672: LIST
70673: PUSH
70674: LD_INT 2
70676: NEG
70677: PUSH
70678: LD_INT 4
70680: NEG
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: PUSH
70686: LD_INT 4
70688: PUSH
70689: LD_INT 0
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: PUSH
70696: LD_INT 4
70698: PUSH
70699: LD_INT 1
70701: NEG
70702: PUSH
70703: EMPTY
70704: LIST
70705: LIST
70706: PUSH
70707: LD_INT 5
70709: PUSH
70710: LD_INT 0
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: PUSH
70717: LD_INT 5
70719: PUSH
70720: LD_INT 1
70722: PUSH
70723: EMPTY
70724: LIST
70725: LIST
70726: PUSH
70727: LD_INT 4
70729: PUSH
70730: LD_INT 1
70732: PUSH
70733: EMPTY
70734: LIST
70735: LIST
70736: PUSH
70737: LD_INT 3
70739: PUSH
70740: LD_INT 0
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: PUSH
70747: LD_INT 3
70749: PUSH
70750: LD_INT 1
70752: NEG
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: PUSH
70758: LD_INT 3
70760: PUSH
70761: LD_INT 2
70763: NEG
70764: PUSH
70765: EMPTY
70766: LIST
70767: LIST
70768: PUSH
70769: LD_INT 5
70771: PUSH
70772: LD_INT 2
70774: PUSH
70775: EMPTY
70776: LIST
70777: LIST
70778: PUSH
70779: EMPTY
70780: LIST
70781: LIST
70782: LIST
70783: LIST
70784: LIST
70785: LIST
70786: LIST
70787: LIST
70788: LIST
70789: LIST
70790: LIST
70791: LIST
70792: LIST
70793: LIST
70794: LIST
70795: LIST
70796: LIST
70797: LIST
70798: LIST
70799: LIST
70800: LIST
70801: LIST
70802: LIST
70803: LIST
70804: LIST
70805: LIST
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: LIST
70820: LIST
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70826: LD_ADDR_VAR 0 32
70830: PUSH
70831: LD_INT 4
70833: NEG
70834: PUSH
70835: LD_INT 0
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: PUSH
70842: LD_INT 4
70844: NEG
70845: PUSH
70846: LD_INT 1
70848: NEG
70849: PUSH
70850: EMPTY
70851: LIST
70852: LIST
70853: PUSH
70854: LD_INT 3
70856: NEG
70857: PUSH
70858: LD_INT 0
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: PUSH
70865: LD_INT 3
70867: NEG
70868: PUSH
70869: LD_INT 1
70871: PUSH
70872: EMPTY
70873: LIST
70874: LIST
70875: PUSH
70876: LD_INT 4
70878: NEG
70879: PUSH
70880: LD_INT 1
70882: PUSH
70883: EMPTY
70884: LIST
70885: LIST
70886: PUSH
70887: LD_INT 5
70889: NEG
70890: PUSH
70891: LD_INT 0
70893: PUSH
70894: EMPTY
70895: LIST
70896: LIST
70897: PUSH
70898: LD_INT 5
70900: NEG
70901: PUSH
70902: LD_INT 1
70904: NEG
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: PUSH
70910: LD_INT 5
70912: NEG
70913: PUSH
70914: LD_INT 2
70916: NEG
70917: PUSH
70918: EMPTY
70919: LIST
70920: LIST
70921: PUSH
70922: LD_INT 3
70924: NEG
70925: PUSH
70926: LD_INT 2
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: PUSH
70933: LD_INT 3
70935: NEG
70936: PUSH
70937: LD_INT 3
70939: NEG
70940: PUSH
70941: EMPTY
70942: LIST
70943: LIST
70944: PUSH
70945: LD_INT 3
70947: NEG
70948: PUSH
70949: LD_INT 4
70951: NEG
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: PUSH
70957: LD_INT 2
70959: NEG
70960: PUSH
70961: LD_INT 3
70963: NEG
70964: PUSH
70965: EMPTY
70966: LIST
70967: LIST
70968: PUSH
70969: LD_INT 2
70971: NEG
70972: PUSH
70973: LD_INT 2
70975: NEG
70976: PUSH
70977: EMPTY
70978: LIST
70979: LIST
70980: PUSH
70981: LD_INT 3
70983: NEG
70984: PUSH
70985: LD_INT 2
70987: NEG
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: PUSH
70993: LD_INT 4
70995: NEG
70996: PUSH
70997: LD_INT 3
70999: NEG
71000: PUSH
71001: EMPTY
71002: LIST
71003: LIST
71004: PUSH
71005: LD_INT 4
71007: NEG
71008: PUSH
71009: LD_INT 4
71011: NEG
71012: PUSH
71013: EMPTY
71014: LIST
71015: LIST
71016: PUSH
71017: LD_INT 2
71019: NEG
71020: PUSH
71021: LD_INT 4
71023: NEG
71024: PUSH
71025: EMPTY
71026: LIST
71027: LIST
71028: PUSH
71029: LD_INT 4
71031: NEG
71032: PUSH
71033: LD_INT 2
71035: NEG
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: PUSH
71041: LD_INT 0
71043: PUSH
71044: LD_INT 4
71046: NEG
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: PUSH
71052: LD_INT 0
71054: PUSH
71055: LD_INT 5
71057: NEG
71058: PUSH
71059: EMPTY
71060: LIST
71061: LIST
71062: PUSH
71063: LD_INT 1
71065: PUSH
71066: LD_INT 4
71068: NEG
71069: PUSH
71070: EMPTY
71071: LIST
71072: LIST
71073: PUSH
71074: LD_INT 1
71076: PUSH
71077: LD_INT 3
71079: NEG
71080: PUSH
71081: EMPTY
71082: LIST
71083: LIST
71084: PUSH
71085: LD_INT 0
71087: PUSH
71088: LD_INT 3
71090: NEG
71091: PUSH
71092: EMPTY
71093: LIST
71094: LIST
71095: PUSH
71096: LD_INT 1
71098: NEG
71099: PUSH
71100: LD_INT 4
71102: NEG
71103: PUSH
71104: EMPTY
71105: LIST
71106: LIST
71107: PUSH
71108: LD_INT 1
71110: NEG
71111: PUSH
71112: LD_INT 5
71114: NEG
71115: PUSH
71116: EMPTY
71117: LIST
71118: LIST
71119: PUSH
71120: LD_INT 2
71122: PUSH
71123: LD_INT 3
71125: NEG
71126: PUSH
71127: EMPTY
71128: LIST
71129: LIST
71130: PUSH
71131: LD_INT 2
71133: NEG
71134: PUSH
71135: LD_INT 5
71137: NEG
71138: PUSH
71139: EMPTY
71140: LIST
71141: LIST
71142: PUSH
71143: LD_INT 3
71145: PUSH
71146: LD_INT 0
71148: PUSH
71149: EMPTY
71150: LIST
71151: LIST
71152: PUSH
71153: LD_INT 3
71155: PUSH
71156: LD_INT 1
71158: NEG
71159: PUSH
71160: EMPTY
71161: LIST
71162: LIST
71163: PUSH
71164: LD_INT 4
71166: PUSH
71167: LD_INT 0
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: PUSH
71174: LD_INT 4
71176: PUSH
71177: LD_INT 1
71179: PUSH
71180: EMPTY
71181: LIST
71182: LIST
71183: PUSH
71184: LD_INT 3
71186: PUSH
71187: LD_INT 1
71189: PUSH
71190: EMPTY
71191: LIST
71192: LIST
71193: PUSH
71194: LD_INT 2
71196: PUSH
71197: LD_INT 0
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: PUSH
71204: LD_INT 2
71206: PUSH
71207: LD_INT 1
71209: NEG
71210: PUSH
71211: EMPTY
71212: LIST
71213: LIST
71214: PUSH
71215: LD_INT 2
71217: PUSH
71218: LD_INT 2
71220: NEG
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: PUSH
71226: LD_INT 4
71228: PUSH
71229: LD_INT 2
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: LD_INT 4
71238: PUSH
71239: LD_INT 4
71241: PUSH
71242: EMPTY
71243: LIST
71244: LIST
71245: PUSH
71246: LD_INT 4
71248: PUSH
71249: LD_INT 3
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: LD_INT 5
71258: PUSH
71259: LD_INT 4
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: LD_INT 5
71268: PUSH
71269: LD_INT 5
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: PUSH
71276: LD_INT 4
71278: PUSH
71279: LD_INT 5
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: PUSH
71286: LD_INT 3
71288: PUSH
71289: LD_INT 4
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: PUSH
71296: LD_INT 3
71298: PUSH
71299: LD_INT 3
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: PUSH
71306: LD_INT 5
71308: PUSH
71309: LD_INT 3
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: PUSH
71316: LD_INT 3
71318: PUSH
71319: LD_INT 5
71321: PUSH
71322: EMPTY
71323: LIST
71324: LIST
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: LIST
71330: LIST
71331: LIST
71332: LIST
71333: LIST
71334: LIST
71335: LIST
71336: LIST
71337: LIST
71338: LIST
71339: LIST
71340: LIST
71341: LIST
71342: LIST
71343: LIST
71344: LIST
71345: LIST
71346: LIST
71347: LIST
71348: LIST
71349: LIST
71350: LIST
71351: LIST
71352: LIST
71353: LIST
71354: LIST
71355: LIST
71356: LIST
71357: LIST
71358: LIST
71359: LIST
71360: LIST
71361: LIST
71362: LIST
71363: LIST
71364: LIST
71365: LIST
71366: LIST
71367: LIST
71368: LIST
71369: LIST
71370: LIST
71371: LIST
71372: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71373: LD_ADDR_VAR 0 33
71377: PUSH
71378: LD_INT 4
71380: NEG
71381: PUSH
71382: LD_INT 4
71384: NEG
71385: PUSH
71386: EMPTY
71387: LIST
71388: LIST
71389: PUSH
71390: LD_INT 4
71392: NEG
71393: PUSH
71394: LD_INT 5
71396: NEG
71397: PUSH
71398: EMPTY
71399: LIST
71400: LIST
71401: PUSH
71402: LD_INT 3
71404: NEG
71405: PUSH
71406: LD_INT 4
71408: NEG
71409: PUSH
71410: EMPTY
71411: LIST
71412: LIST
71413: PUSH
71414: LD_INT 3
71416: NEG
71417: PUSH
71418: LD_INT 3
71420: NEG
71421: PUSH
71422: EMPTY
71423: LIST
71424: LIST
71425: PUSH
71426: LD_INT 4
71428: NEG
71429: PUSH
71430: LD_INT 3
71432: NEG
71433: PUSH
71434: EMPTY
71435: LIST
71436: LIST
71437: PUSH
71438: LD_INT 5
71440: NEG
71441: PUSH
71442: LD_INT 4
71444: NEG
71445: PUSH
71446: EMPTY
71447: LIST
71448: LIST
71449: PUSH
71450: LD_INT 5
71452: NEG
71453: PUSH
71454: LD_INT 5
71456: NEG
71457: PUSH
71458: EMPTY
71459: LIST
71460: LIST
71461: PUSH
71462: LD_INT 3
71464: NEG
71465: PUSH
71466: LD_INT 5
71468: NEG
71469: PUSH
71470: EMPTY
71471: LIST
71472: LIST
71473: PUSH
71474: LD_INT 5
71476: NEG
71477: PUSH
71478: LD_INT 3
71480: NEG
71481: PUSH
71482: EMPTY
71483: LIST
71484: LIST
71485: PUSH
71486: LD_INT 0
71488: PUSH
71489: LD_INT 3
71491: NEG
71492: PUSH
71493: EMPTY
71494: LIST
71495: LIST
71496: PUSH
71497: LD_INT 0
71499: PUSH
71500: LD_INT 4
71502: NEG
71503: PUSH
71504: EMPTY
71505: LIST
71506: LIST
71507: PUSH
71508: LD_INT 1
71510: PUSH
71511: LD_INT 3
71513: NEG
71514: PUSH
71515: EMPTY
71516: LIST
71517: LIST
71518: PUSH
71519: LD_INT 1
71521: PUSH
71522: LD_INT 2
71524: NEG
71525: PUSH
71526: EMPTY
71527: LIST
71528: LIST
71529: PUSH
71530: LD_INT 0
71532: PUSH
71533: LD_INT 2
71535: NEG
71536: PUSH
71537: EMPTY
71538: LIST
71539: LIST
71540: PUSH
71541: LD_INT 1
71543: NEG
71544: PUSH
71545: LD_INT 3
71547: NEG
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: PUSH
71553: LD_INT 1
71555: NEG
71556: PUSH
71557: LD_INT 4
71559: NEG
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: PUSH
71565: LD_INT 2
71567: PUSH
71568: LD_INT 2
71570: NEG
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: PUSH
71576: LD_INT 2
71578: NEG
71579: PUSH
71580: LD_INT 4
71582: NEG
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: PUSH
71588: LD_INT 4
71590: PUSH
71591: LD_INT 0
71593: PUSH
71594: EMPTY
71595: LIST
71596: LIST
71597: PUSH
71598: LD_INT 4
71600: PUSH
71601: LD_INT 1
71603: NEG
71604: PUSH
71605: EMPTY
71606: LIST
71607: LIST
71608: PUSH
71609: LD_INT 5
71611: PUSH
71612: LD_INT 0
71614: PUSH
71615: EMPTY
71616: LIST
71617: LIST
71618: PUSH
71619: LD_INT 5
71621: PUSH
71622: LD_INT 1
71624: PUSH
71625: EMPTY
71626: LIST
71627: LIST
71628: PUSH
71629: LD_INT 4
71631: PUSH
71632: LD_INT 1
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: PUSH
71639: LD_INT 3
71641: PUSH
71642: LD_INT 0
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: PUSH
71649: LD_INT 3
71651: PUSH
71652: LD_INT 1
71654: NEG
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: PUSH
71660: LD_INT 3
71662: PUSH
71663: LD_INT 2
71665: NEG
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: PUSH
71671: LD_INT 5
71673: PUSH
71674: LD_INT 2
71676: PUSH
71677: EMPTY
71678: LIST
71679: LIST
71680: PUSH
71681: LD_INT 3
71683: PUSH
71684: LD_INT 3
71686: PUSH
71687: EMPTY
71688: LIST
71689: LIST
71690: PUSH
71691: LD_INT 3
71693: PUSH
71694: LD_INT 2
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: PUSH
71701: LD_INT 4
71703: PUSH
71704: LD_INT 3
71706: PUSH
71707: EMPTY
71708: LIST
71709: LIST
71710: PUSH
71711: LD_INT 4
71713: PUSH
71714: LD_INT 4
71716: PUSH
71717: EMPTY
71718: LIST
71719: LIST
71720: PUSH
71721: LD_INT 3
71723: PUSH
71724: LD_INT 4
71726: PUSH
71727: EMPTY
71728: LIST
71729: LIST
71730: PUSH
71731: LD_INT 2
71733: PUSH
71734: LD_INT 3
71736: PUSH
71737: EMPTY
71738: LIST
71739: LIST
71740: PUSH
71741: LD_INT 2
71743: PUSH
71744: LD_INT 2
71746: PUSH
71747: EMPTY
71748: LIST
71749: LIST
71750: PUSH
71751: LD_INT 4
71753: PUSH
71754: LD_INT 2
71756: PUSH
71757: EMPTY
71758: LIST
71759: LIST
71760: PUSH
71761: LD_INT 2
71763: PUSH
71764: LD_INT 4
71766: PUSH
71767: EMPTY
71768: LIST
71769: LIST
71770: PUSH
71771: LD_INT 0
71773: PUSH
71774: LD_INT 4
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: PUSH
71781: LD_INT 0
71783: PUSH
71784: LD_INT 3
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: PUSH
71791: LD_INT 1
71793: PUSH
71794: LD_INT 4
71796: PUSH
71797: EMPTY
71798: LIST
71799: LIST
71800: PUSH
71801: LD_INT 1
71803: PUSH
71804: LD_INT 5
71806: PUSH
71807: EMPTY
71808: LIST
71809: LIST
71810: PUSH
71811: LD_INT 0
71813: PUSH
71814: LD_INT 5
71816: PUSH
71817: EMPTY
71818: LIST
71819: LIST
71820: PUSH
71821: LD_INT 1
71823: NEG
71824: PUSH
71825: LD_INT 4
71827: PUSH
71828: EMPTY
71829: LIST
71830: LIST
71831: PUSH
71832: LD_INT 1
71834: NEG
71835: PUSH
71836: LD_INT 3
71838: PUSH
71839: EMPTY
71840: LIST
71841: LIST
71842: PUSH
71843: LD_INT 2
71845: PUSH
71846: LD_INT 5
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: PUSH
71853: LD_INT 2
71855: NEG
71856: PUSH
71857: LD_INT 3
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: PUSH
71864: EMPTY
71865: LIST
71866: LIST
71867: LIST
71868: LIST
71869: LIST
71870: LIST
71871: LIST
71872: LIST
71873: LIST
71874: LIST
71875: LIST
71876: LIST
71877: LIST
71878: LIST
71879: LIST
71880: LIST
71881: LIST
71882: LIST
71883: LIST
71884: LIST
71885: LIST
71886: LIST
71887: LIST
71888: LIST
71889: LIST
71890: LIST
71891: LIST
71892: LIST
71893: LIST
71894: LIST
71895: LIST
71896: LIST
71897: LIST
71898: LIST
71899: LIST
71900: LIST
71901: LIST
71902: LIST
71903: LIST
71904: LIST
71905: LIST
71906: LIST
71907: LIST
71908: LIST
71909: LIST
71910: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71911: LD_ADDR_VAR 0 34
71915: PUSH
71916: LD_INT 0
71918: PUSH
71919: LD_INT 4
71921: NEG
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: PUSH
71927: LD_INT 0
71929: PUSH
71930: LD_INT 5
71932: NEG
71933: PUSH
71934: EMPTY
71935: LIST
71936: LIST
71937: PUSH
71938: LD_INT 1
71940: PUSH
71941: LD_INT 4
71943: NEG
71944: PUSH
71945: EMPTY
71946: LIST
71947: LIST
71948: PUSH
71949: LD_INT 1
71951: PUSH
71952: LD_INT 3
71954: NEG
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: PUSH
71960: LD_INT 0
71962: PUSH
71963: LD_INT 3
71965: NEG
71966: PUSH
71967: EMPTY
71968: LIST
71969: LIST
71970: PUSH
71971: LD_INT 1
71973: NEG
71974: PUSH
71975: LD_INT 4
71977: NEG
71978: PUSH
71979: EMPTY
71980: LIST
71981: LIST
71982: PUSH
71983: LD_INT 1
71985: NEG
71986: PUSH
71987: LD_INT 5
71989: NEG
71990: PUSH
71991: EMPTY
71992: LIST
71993: LIST
71994: PUSH
71995: LD_INT 2
71997: PUSH
71998: LD_INT 3
72000: NEG
72001: PUSH
72002: EMPTY
72003: LIST
72004: LIST
72005: PUSH
72006: LD_INT 2
72008: NEG
72009: PUSH
72010: LD_INT 5
72012: NEG
72013: PUSH
72014: EMPTY
72015: LIST
72016: LIST
72017: PUSH
72018: LD_INT 3
72020: PUSH
72021: LD_INT 0
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: PUSH
72028: LD_INT 3
72030: PUSH
72031: LD_INT 1
72033: NEG
72034: PUSH
72035: EMPTY
72036: LIST
72037: LIST
72038: PUSH
72039: LD_INT 4
72041: PUSH
72042: LD_INT 0
72044: PUSH
72045: EMPTY
72046: LIST
72047: LIST
72048: PUSH
72049: LD_INT 4
72051: PUSH
72052: LD_INT 1
72054: PUSH
72055: EMPTY
72056: LIST
72057: LIST
72058: PUSH
72059: LD_INT 3
72061: PUSH
72062: LD_INT 1
72064: PUSH
72065: EMPTY
72066: LIST
72067: LIST
72068: PUSH
72069: LD_INT 2
72071: PUSH
72072: LD_INT 0
72074: PUSH
72075: EMPTY
72076: LIST
72077: LIST
72078: PUSH
72079: LD_INT 2
72081: PUSH
72082: LD_INT 1
72084: NEG
72085: PUSH
72086: EMPTY
72087: LIST
72088: LIST
72089: PUSH
72090: LD_INT 2
72092: PUSH
72093: LD_INT 2
72095: NEG
72096: PUSH
72097: EMPTY
72098: LIST
72099: LIST
72100: PUSH
72101: LD_INT 4
72103: PUSH
72104: LD_INT 2
72106: PUSH
72107: EMPTY
72108: LIST
72109: LIST
72110: PUSH
72111: LD_INT 4
72113: PUSH
72114: LD_INT 4
72116: PUSH
72117: EMPTY
72118: LIST
72119: LIST
72120: PUSH
72121: LD_INT 4
72123: PUSH
72124: LD_INT 3
72126: PUSH
72127: EMPTY
72128: LIST
72129: LIST
72130: PUSH
72131: LD_INT 5
72133: PUSH
72134: LD_INT 4
72136: PUSH
72137: EMPTY
72138: LIST
72139: LIST
72140: PUSH
72141: LD_INT 5
72143: PUSH
72144: LD_INT 5
72146: PUSH
72147: EMPTY
72148: LIST
72149: LIST
72150: PUSH
72151: LD_INT 4
72153: PUSH
72154: LD_INT 5
72156: PUSH
72157: EMPTY
72158: LIST
72159: LIST
72160: PUSH
72161: LD_INT 3
72163: PUSH
72164: LD_INT 4
72166: PUSH
72167: EMPTY
72168: LIST
72169: LIST
72170: PUSH
72171: LD_INT 3
72173: PUSH
72174: LD_INT 3
72176: PUSH
72177: EMPTY
72178: LIST
72179: LIST
72180: PUSH
72181: LD_INT 5
72183: PUSH
72184: LD_INT 3
72186: PUSH
72187: EMPTY
72188: LIST
72189: LIST
72190: PUSH
72191: LD_INT 3
72193: PUSH
72194: LD_INT 5
72196: PUSH
72197: EMPTY
72198: LIST
72199: LIST
72200: PUSH
72201: LD_INT 0
72203: PUSH
72204: LD_INT 3
72206: PUSH
72207: EMPTY
72208: LIST
72209: LIST
72210: PUSH
72211: LD_INT 0
72213: PUSH
72214: LD_INT 2
72216: PUSH
72217: EMPTY
72218: LIST
72219: LIST
72220: PUSH
72221: LD_INT 1
72223: PUSH
72224: LD_INT 3
72226: PUSH
72227: EMPTY
72228: LIST
72229: LIST
72230: PUSH
72231: LD_INT 1
72233: PUSH
72234: LD_INT 4
72236: PUSH
72237: EMPTY
72238: LIST
72239: LIST
72240: PUSH
72241: LD_INT 0
72243: PUSH
72244: LD_INT 4
72246: PUSH
72247: EMPTY
72248: LIST
72249: LIST
72250: PUSH
72251: LD_INT 1
72253: NEG
72254: PUSH
72255: LD_INT 3
72257: PUSH
72258: EMPTY
72259: LIST
72260: LIST
72261: PUSH
72262: LD_INT 1
72264: NEG
72265: PUSH
72266: LD_INT 2
72268: PUSH
72269: EMPTY
72270: LIST
72271: LIST
72272: PUSH
72273: LD_INT 2
72275: PUSH
72276: LD_INT 4
72278: PUSH
72279: EMPTY
72280: LIST
72281: LIST
72282: PUSH
72283: LD_INT 2
72285: NEG
72286: PUSH
72287: LD_INT 2
72289: PUSH
72290: EMPTY
72291: LIST
72292: LIST
72293: PUSH
72294: LD_INT 4
72296: NEG
72297: PUSH
72298: LD_INT 0
72300: PUSH
72301: EMPTY
72302: LIST
72303: LIST
72304: PUSH
72305: LD_INT 4
72307: NEG
72308: PUSH
72309: LD_INT 1
72311: NEG
72312: PUSH
72313: EMPTY
72314: LIST
72315: LIST
72316: PUSH
72317: LD_INT 3
72319: NEG
72320: PUSH
72321: LD_INT 0
72323: PUSH
72324: EMPTY
72325: LIST
72326: LIST
72327: PUSH
72328: LD_INT 3
72330: NEG
72331: PUSH
72332: LD_INT 1
72334: PUSH
72335: EMPTY
72336: LIST
72337: LIST
72338: PUSH
72339: LD_INT 4
72341: NEG
72342: PUSH
72343: LD_INT 1
72345: PUSH
72346: EMPTY
72347: LIST
72348: LIST
72349: PUSH
72350: LD_INT 5
72352: NEG
72353: PUSH
72354: LD_INT 0
72356: PUSH
72357: EMPTY
72358: LIST
72359: LIST
72360: PUSH
72361: LD_INT 5
72363: NEG
72364: PUSH
72365: LD_INT 1
72367: NEG
72368: PUSH
72369: EMPTY
72370: LIST
72371: LIST
72372: PUSH
72373: LD_INT 5
72375: NEG
72376: PUSH
72377: LD_INT 2
72379: NEG
72380: PUSH
72381: EMPTY
72382: LIST
72383: LIST
72384: PUSH
72385: LD_INT 3
72387: NEG
72388: PUSH
72389: LD_INT 2
72391: PUSH
72392: EMPTY
72393: LIST
72394: LIST
72395: PUSH
72396: EMPTY
72397: LIST
72398: LIST
72399: LIST
72400: LIST
72401: LIST
72402: LIST
72403: LIST
72404: LIST
72405: LIST
72406: LIST
72407: LIST
72408: LIST
72409: LIST
72410: LIST
72411: LIST
72412: LIST
72413: LIST
72414: LIST
72415: LIST
72416: LIST
72417: LIST
72418: LIST
72419: LIST
72420: LIST
72421: LIST
72422: LIST
72423: LIST
72424: LIST
72425: LIST
72426: LIST
72427: LIST
72428: LIST
72429: LIST
72430: LIST
72431: LIST
72432: LIST
72433: LIST
72434: LIST
72435: LIST
72436: LIST
72437: LIST
72438: LIST
72439: LIST
72440: LIST
72441: LIST
72442: ST_TO_ADDR
// end ; end ;
72443: GO 72446
72445: POP
// case btype of b_depot , b_warehouse :
72446: LD_VAR 0 1
72450: PUSH
72451: LD_INT 0
72453: DOUBLE
72454: EQUAL
72455: IFTRUE 72465
72457: LD_INT 1
72459: DOUBLE
72460: EQUAL
72461: IFTRUE 72465
72463: GO 72666
72465: POP
// case nation of nation_american :
72466: LD_VAR 0 5
72470: PUSH
72471: LD_INT 1
72473: DOUBLE
72474: EQUAL
72475: IFTRUE 72479
72477: GO 72535
72479: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72480: LD_ADDR_VAR 0 9
72484: PUSH
72485: LD_VAR 0 11
72489: PUSH
72490: LD_VAR 0 12
72494: PUSH
72495: LD_VAR 0 13
72499: PUSH
72500: LD_VAR 0 14
72504: PUSH
72505: LD_VAR 0 15
72509: PUSH
72510: LD_VAR 0 16
72514: PUSH
72515: EMPTY
72516: LIST
72517: LIST
72518: LIST
72519: LIST
72520: LIST
72521: LIST
72522: PUSH
72523: LD_VAR 0 4
72527: PUSH
72528: LD_INT 1
72530: PLUS
72531: ARRAY
72532: ST_TO_ADDR
72533: GO 72664
72535: LD_INT 2
72537: DOUBLE
72538: EQUAL
72539: IFTRUE 72543
72541: GO 72599
72543: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72544: LD_ADDR_VAR 0 9
72548: PUSH
72549: LD_VAR 0 17
72553: PUSH
72554: LD_VAR 0 18
72558: PUSH
72559: LD_VAR 0 19
72563: PUSH
72564: LD_VAR 0 20
72568: PUSH
72569: LD_VAR 0 21
72573: PUSH
72574: LD_VAR 0 22
72578: PUSH
72579: EMPTY
72580: LIST
72581: LIST
72582: LIST
72583: LIST
72584: LIST
72585: LIST
72586: PUSH
72587: LD_VAR 0 4
72591: PUSH
72592: LD_INT 1
72594: PLUS
72595: ARRAY
72596: ST_TO_ADDR
72597: GO 72664
72599: LD_INT 3
72601: DOUBLE
72602: EQUAL
72603: IFTRUE 72607
72605: GO 72663
72607: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72608: LD_ADDR_VAR 0 9
72612: PUSH
72613: LD_VAR 0 23
72617: PUSH
72618: LD_VAR 0 24
72622: PUSH
72623: LD_VAR 0 25
72627: PUSH
72628: LD_VAR 0 26
72632: PUSH
72633: LD_VAR 0 27
72637: PUSH
72638: LD_VAR 0 28
72642: PUSH
72643: EMPTY
72644: LIST
72645: LIST
72646: LIST
72647: LIST
72648: LIST
72649: LIST
72650: PUSH
72651: LD_VAR 0 4
72655: PUSH
72656: LD_INT 1
72658: PLUS
72659: ARRAY
72660: ST_TO_ADDR
72661: GO 72664
72663: POP
72664: GO 73219
72666: LD_INT 2
72668: DOUBLE
72669: EQUAL
72670: IFTRUE 72680
72672: LD_INT 3
72674: DOUBLE
72675: EQUAL
72676: IFTRUE 72680
72678: GO 72736
72680: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72681: LD_ADDR_VAR 0 9
72685: PUSH
72686: LD_VAR 0 29
72690: PUSH
72691: LD_VAR 0 30
72695: PUSH
72696: LD_VAR 0 31
72700: PUSH
72701: LD_VAR 0 32
72705: PUSH
72706: LD_VAR 0 33
72710: PUSH
72711: LD_VAR 0 34
72715: PUSH
72716: EMPTY
72717: LIST
72718: LIST
72719: LIST
72720: LIST
72721: LIST
72722: LIST
72723: PUSH
72724: LD_VAR 0 4
72728: PUSH
72729: LD_INT 1
72731: PLUS
72732: ARRAY
72733: ST_TO_ADDR
72734: GO 73219
72736: LD_INT 16
72738: DOUBLE
72739: EQUAL
72740: IFTRUE 72798
72742: LD_INT 17
72744: DOUBLE
72745: EQUAL
72746: IFTRUE 72798
72748: LD_INT 18
72750: DOUBLE
72751: EQUAL
72752: IFTRUE 72798
72754: LD_INT 19
72756: DOUBLE
72757: EQUAL
72758: IFTRUE 72798
72760: LD_INT 22
72762: DOUBLE
72763: EQUAL
72764: IFTRUE 72798
72766: LD_INT 20
72768: DOUBLE
72769: EQUAL
72770: IFTRUE 72798
72772: LD_INT 21
72774: DOUBLE
72775: EQUAL
72776: IFTRUE 72798
72778: LD_INT 23
72780: DOUBLE
72781: EQUAL
72782: IFTRUE 72798
72784: LD_INT 24
72786: DOUBLE
72787: EQUAL
72788: IFTRUE 72798
72790: LD_INT 25
72792: DOUBLE
72793: EQUAL
72794: IFTRUE 72798
72796: GO 72854
72798: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72799: LD_ADDR_VAR 0 9
72803: PUSH
72804: LD_VAR 0 35
72808: PUSH
72809: LD_VAR 0 36
72813: PUSH
72814: LD_VAR 0 37
72818: PUSH
72819: LD_VAR 0 38
72823: PUSH
72824: LD_VAR 0 39
72828: PUSH
72829: LD_VAR 0 40
72833: PUSH
72834: EMPTY
72835: LIST
72836: LIST
72837: LIST
72838: LIST
72839: LIST
72840: LIST
72841: PUSH
72842: LD_VAR 0 4
72846: PUSH
72847: LD_INT 1
72849: PLUS
72850: ARRAY
72851: ST_TO_ADDR
72852: GO 73219
72854: LD_INT 6
72856: DOUBLE
72857: EQUAL
72858: IFTRUE 72910
72860: LD_INT 7
72862: DOUBLE
72863: EQUAL
72864: IFTRUE 72910
72866: LD_INT 8
72868: DOUBLE
72869: EQUAL
72870: IFTRUE 72910
72872: LD_INT 13
72874: DOUBLE
72875: EQUAL
72876: IFTRUE 72910
72878: LD_INT 12
72880: DOUBLE
72881: EQUAL
72882: IFTRUE 72910
72884: LD_INT 15
72886: DOUBLE
72887: EQUAL
72888: IFTRUE 72910
72890: LD_INT 11
72892: DOUBLE
72893: EQUAL
72894: IFTRUE 72910
72896: LD_INT 14
72898: DOUBLE
72899: EQUAL
72900: IFTRUE 72910
72902: LD_INT 10
72904: DOUBLE
72905: EQUAL
72906: IFTRUE 72910
72908: GO 72966
72910: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72911: LD_ADDR_VAR 0 9
72915: PUSH
72916: LD_VAR 0 41
72920: PUSH
72921: LD_VAR 0 42
72925: PUSH
72926: LD_VAR 0 43
72930: PUSH
72931: LD_VAR 0 44
72935: PUSH
72936: LD_VAR 0 45
72940: PUSH
72941: LD_VAR 0 46
72945: PUSH
72946: EMPTY
72947: LIST
72948: LIST
72949: LIST
72950: LIST
72951: LIST
72952: LIST
72953: PUSH
72954: LD_VAR 0 4
72958: PUSH
72959: LD_INT 1
72961: PLUS
72962: ARRAY
72963: ST_TO_ADDR
72964: GO 73219
72966: LD_INT 36
72968: DOUBLE
72969: EQUAL
72970: IFTRUE 72974
72972: GO 73030
72974: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72975: LD_ADDR_VAR 0 9
72979: PUSH
72980: LD_VAR 0 47
72984: PUSH
72985: LD_VAR 0 48
72989: PUSH
72990: LD_VAR 0 49
72994: PUSH
72995: LD_VAR 0 50
72999: PUSH
73000: LD_VAR 0 51
73004: PUSH
73005: LD_VAR 0 52
73009: PUSH
73010: EMPTY
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: PUSH
73018: LD_VAR 0 4
73022: PUSH
73023: LD_INT 1
73025: PLUS
73026: ARRAY
73027: ST_TO_ADDR
73028: GO 73219
73030: LD_INT 4
73032: DOUBLE
73033: EQUAL
73034: IFTRUE 73056
73036: LD_INT 5
73038: DOUBLE
73039: EQUAL
73040: IFTRUE 73056
73042: LD_INT 34
73044: DOUBLE
73045: EQUAL
73046: IFTRUE 73056
73048: LD_INT 37
73050: DOUBLE
73051: EQUAL
73052: IFTRUE 73056
73054: GO 73112
73056: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73057: LD_ADDR_VAR 0 9
73061: PUSH
73062: LD_VAR 0 53
73066: PUSH
73067: LD_VAR 0 54
73071: PUSH
73072: LD_VAR 0 55
73076: PUSH
73077: LD_VAR 0 56
73081: PUSH
73082: LD_VAR 0 57
73086: PUSH
73087: LD_VAR 0 58
73091: PUSH
73092: EMPTY
73093: LIST
73094: LIST
73095: LIST
73096: LIST
73097: LIST
73098: LIST
73099: PUSH
73100: LD_VAR 0 4
73104: PUSH
73105: LD_INT 1
73107: PLUS
73108: ARRAY
73109: ST_TO_ADDR
73110: GO 73219
73112: LD_INT 31
73114: DOUBLE
73115: EQUAL
73116: IFTRUE 73162
73118: LD_INT 32
73120: DOUBLE
73121: EQUAL
73122: IFTRUE 73162
73124: LD_INT 33
73126: DOUBLE
73127: EQUAL
73128: IFTRUE 73162
73130: LD_INT 27
73132: DOUBLE
73133: EQUAL
73134: IFTRUE 73162
73136: LD_INT 26
73138: DOUBLE
73139: EQUAL
73140: IFTRUE 73162
73142: LD_INT 28
73144: DOUBLE
73145: EQUAL
73146: IFTRUE 73162
73148: LD_INT 29
73150: DOUBLE
73151: EQUAL
73152: IFTRUE 73162
73154: LD_INT 30
73156: DOUBLE
73157: EQUAL
73158: IFTRUE 73162
73160: GO 73218
73162: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73163: LD_ADDR_VAR 0 9
73167: PUSH
73168: LD_VAR 0 59
73172: PUSH
73173: LD_VAR 0 60
73177: PUSH
73178: LD_VAR 0 61
73182: PUSH
73183: LD_VAR 0 62
73187: PUSH
73188: LD_VAR 0 63
73192: PUSH
73193: LD_VAR 0 64
73197: PUSH
73198: EMPTY
73199: LIST
73200: LIST
73201: LIST
73202: LIST
73203: LIST
73204: LIST
73205: PUSH
73206: LD_VAR 0 4
73210: PUSH
73211: LD_INT 1
73213: PLUS
73214: ARRAY
73215: ST_TO_ADDR
73216: GO 73219
73218: POP
// temp_list2 = [ ] ;
73219: LD_ADDR_VAR 0 10
73223: PUSH
73224: EMPTY
73225: ST_TO_ADDR
// for i in temp_list do
73226: LD_ADDR_VAR 0 8
73230: PUSH
73231: LD_VAR 0 9
73235: PUSH
73236: FOR_IN
73237: IFFALSE 73289
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73239: LD_ADDR_VAR 0 10
73243: PUSH
73244: LD_VAR 0 10
73248: PUSH
73249: LD_VAR 0 8
73253: PUSH
73254: LD_INT 1
73256: ARRAY
73257: PUSH
73258: LD_VAR 0 2
73262: PLUS
73263: PUSH
73264: LD_VAR 0 8
73268: PUSH
73269: LD_INT 2
73271: ARRAY
73272: PUSH
73273: LD_VAR 0 3
73277: PLUS
73278: PUSH
73279: EMPTY
73280: LIST
73281: LIST
73282: PUSH
73283: EMPTY
73284: LIST
73285: ADD
73286: ST_TO_ADDR
73287: GO 73236
73289: POP
73290: POP
// result = temp_list2 ;
73291: LD_ADDR_VAR 0 7
73295: PUSH
73296: LD_VAR 0 10
73300: ST_TO_ADDR
// end ;
73301: LD_VAR 0 7
73305: RET
// export function EnemyInRange ( unit , dist ) ; begin
73306: LD_INT 0
73308: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73309: LD_ADDR_VAR 0 3
73313: PUSH
73314: LD_VAR 0 1
73318: PPUSH
73319: CALL_OW 255
73323: PPUSH
73324: LD_VAR 0 1
73328: PPUSH
73329: CALL_OW 250
73333: PPUSH
73334: LD_VAR 0 1
73338: PPUSH
73339: CALL_OW 251
73343: PPUSH
73344: LD_VAR 0 2
73348: PPUSH
73349: CALL 46563 0 4
73353: PUSH
73354: LD_INT 4
73356: ARRAY
73357: ST_TO_ADDR
// end ;
73358: LD_VAR 0 3
73362: RET
// export function PlayerSeeMe ( unit ) ; begin
73363: LD_INT 0
73365: PPUSH
// result := See ( your_side , unit ) ;
73366: LD_ADDR_VAR 0 2
73370: PUSH
73371: LD_OWVAR 2
73375: PPUSH
73376: LD_VAR 0 1
73380: PPUSH
73381: CALL_OW 292
73385: ST_TO_ADDR
// end ;
73386: LD_VAR 0 2
73390: RET
// export function ReverseDir ( unit ) ; begin
73391: LD_INT 0
73393: PPUSH
// if not unit then
73394: LD_VAR 0 1
73398: NOT
73399: IFFALSE 73403
// exit ;
73401: GO 73426
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73403: LD_ADDR_VAR 0 2
73407: PUSH
73408: LD_VAR 0 1
73412: PPUSH
73413: CALL_OW 254
73417: PUSH
73418: LD_INT 3
73420: PLUS
73421: PUSH
73422: LD_INT 6
73424: MOD
73425: ST_TO_ADDR
// end ;
73426: LD_VAR 0 2
73430: RET
// export function ReverseArray ( array ) ; var i ; begin
73431: LD_INT 0
73433: PPUSH
73434: PPUSH
// if not array then
73435: LD_VAR 0 1
73439: NOT
73440: IFFALSE 73444
// exit ;
73442: GO 73499
// result := [ ] ;
73444: LD_ADDR_VAR 0 2
73448: PUSH
73449: EMPTY
73450: ST_TO_ADDR
// for i := array downto 1 do
73451: LD_ADDR_VAR 0 3
73455: PUSH
73456: DOUBLE
73457: LD_VAR 0 1
73461: INC
73462: ST_TO_ADDR
73463: LD_INT 1
73465: PUSH
73466: FOR_DOWNTO
73467: IFFALSE 73497
// result := Join ( result , array [ i ] ) ;
73469: LD_ADDR_VAR 0 2
73473: PUSH
73474: LD_VAR 0 2
73478: PPUSH
73479: LD_VAR 0 1
73483: PUSH
73484: LD_VAR 0 3
73488: ARRAY
73489: PPUSH
73490: CALL 78351 0 2
73494: ST_TO_ADDR
73495: GO 73466
73497: POP
73498: POP
// end ;
73499: LD_VAR 0 2
73503: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
73504: LD_INT 0
73506: PPUSH
73507: PPUSH
73508: PPUSH
73509: PPUSH
73510: PPUSH
73511: PPUSH
// if not unit or not hexes then
73512: LD_VAR 0 1
73516: NOT
73517: IFTRUE 73526
73519: PUSH
73520: LD_VAR 0 2
73524: NOT
73525: OR
73526: IFFALSE 73530
// exit ;
73528: GO 73653
// dist := 9999 ;
73530: LD_ADDR_VAR 0 5
73534: PUSH
73535: LD_INT 9999
73537: ST_TO_ADDR
// for i = 1 to hexes do
73538: LD_ADDR_VAR 0 4
73542: PUSH
73543: DOUBLE
73544: LD_INT 1
73546: DEC
73547: ST_TO_ADDR
73548: LD_VAR 0 2
73552: PUSH
73553: FOR_TO
73554: IFFALSE 73641
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73556: LD_ADDR_VAR 0 6
73560: PUSH
73561: LD_VAR 0 1
73565: PPUSH
73566: LD_VAR 0 2
73570: PUSH
73571: LD_VAR 0 4
73575: ARRAY
73576: PUSH
73577: LD_INT 1
73579: ARRAY
73580: PPUSH
73581: LD_VAR 0 2
73585: PUSH
73586: LD_VAR 0 4
73590: ARRAY
73591: PUSH
73592: LD_INT 2
73594: ARRAY
73595: PPUSH
73596: CALL_OW 297
73600: ST_TO_ADDR
// if tdist < dist then
73601: LD_VAR 0 6
73605: PUSH
73606: LD_VAR 0 5
73610: LESS
73611: IFFALSE 73639
// begin hex := hexes [ i ] ;
73613: LD_ADDR_VAR 0 8
73617: PUSH
73618: LD_VAR 0 2
73622: PUSH
73623: LD_VAR 0 4
73627: ARRAY
73628: ST_TO_ADDR
// dist := tdist ;
73629: LD_ADDR_VAR 0 5
73633: PUSH
73634: LD_VAR 0 6
73638: ST_TO_ADDR
// end ; end ;
73639: GO 73553
73641: POP
73642: POP
// result := hex ;
73643: LD_ADDR_VAR 0 3
73647: PUSH
73648: LD_VAR 0 8
73652: ST_TO_ADDR
// end ;
73653: LD_VAR 0 3
73657: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73658: LD_INT 0
73660: PPUSH
73661: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73662: LD_VAR 0 1
73666: NOT
73667: IFTRUE 73706
73669: PUSH
73670: LD_VAR 0 1
73674: PUSH
73675: LD_INT 21
73677: PUSH
73678: LD_INT 2
73680: PUSH
73681: EMPTY
73682: LIST
73683: LIST
73684: PUSH
73685: LD_INT 23
73687: PUSH
73688: LD_INT 2
73690: PUSH
73691: EMPTY
73692: LIST
73693: LIST
73694: PUSH
73695: EMPTY
73696: LIST
73697: LIST
73698: PPUSH
73699: CALL_OW 69
73703: IN
73704: NOT
73705: OR
73706: IFFALSE 73710
// exit ;
73708: GO 73757
// for i = 1 to 3 do
73710: LD_ADDR_VAR 0 3
73714: PUSH
73715: DOUBLE
73716: LD_INT 1
73718: DEC
73719: ST_TO_ADDR
73720: LD_INT 3
73722: PUSH
73723: FOR_TO
73724: IFFALSE 73755
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73726: LD_VAR 0 1
73730: PPUSH
73731: CALL_OW 250
73735: PPUSH
73736: LD_VAR 0 1
73740: PPUSH
73741: CALL_OW 251
73745: PPUSH
73746: LD_INT 1
73748: PPUSH
73749: CALL_OW 453
73753: GO 73723
73755: POP
73756: POP
// end ;
73757: LD_VAR 0 2
73761: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73762: LD_INT 0
73764: PPUSH
73765: PPUSH
73766: PPUSH
73767: PPUSH
73768: PPUSH
73769: PPUSH
// if not unit or not enemy_unit then
73770: LD_VAR 0 1
73774: NOT
73775: IFTRUE 73784
73777: PUSH
73778: LD_VAR 0 2
73782: NOT
73783: OR
73784: IFFALSE 73788
// exit ;
73786: GO 74269
// if GetLives ( i ) < 250 then
73788: LD_VAR 0 4
73792: PPUSH
73793: CALL_OW 256
73797: PUSH
73798: LD_INT 250
73800: LESS
73801: IFFALSE 73814
// begin ComAutodestruct ( i ) ;
73803: LD_VAR 0 4
73807: PPUSH
73808: CALL 73658 0 1
// exit ;
73812: GO 74269
// end ; x := GetX ( enemy_unit ) ;
73814: LD_ADDR_VAR 0 7
73818: PUSH
73819: LD_VAR 0 2
73823: PPUSH
73824: CALL_OW 250
73828: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73829: LD_ADDR_VAR 0 8
73833: PUSH
73834: LD_VAR 0 2
73838: PPUSH
73839: CALL_OW 251
73843: ST_TO_ADDR
// if not x or not y then
73844: LD_VAR 0 7
73848: NOT
73849: IFTRUE 73858
73851: PUSH
73852: LD_VAR 0 8
73856: NOT
73857: OR
73858: IFFALSE 73862
// exit ;
73860: GO 74269
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73862: LD_ADDR_VAR 0 6
73866: PUSH
73867: LD_VAR 0 7
73871: PPUSH
73872: LD_INT 0
73874: PPUSH
73875: LD_INT 4
73877: PPUSH
73878: CALL_OW 272
73882: PUSH
73883: LD_VAR 0 8
73887: PPUSH
73888: LD_INT 0
73890: PPUSH
73891: LD_INT 4
73893: PPUSH
73894: CALL_OW 273
73898: PUSH
73899: EMPTY
73900: LIST
73901: LIST
73902: PUSH
73903: LD_VAR 0 7
73907: PPUSH
73908: LD_INT 1
73910: PPUSH
73911: LD_INT 4
73913: PPUSH
73914: CALL_OW 272
73918: PUSH
73919: LD_VAR 0 8
73923: PPUSH
73924: LD_INT 1
73926: PPUSH
73927: LD_INT 4
73929: PPUSH
73930: CALL_OW 273
73934: PUSH
73935: EMPTY
73936: LIST
73937: LIST
73938: PUSH
73939: LD_VAR 0 7
73943: PPUSH
73944: LD_INT 2
73946: PPUSH
73947: LD_INT 4
73949: PPUSH
73950: CALL_OW 272
73954: PUSH
73955: LD_VAR 0 8
73959: PPUSH
73960: LD_INT 2
73962: PPUSH
73963: LD_INT 4
73965: PPUSH
73966: CALL_OW 273
73970: PUSH
73971: EMPTY
73972: LIST
73973: LIST
73974: PUSH
73975: LD_VAR 0 7
73979: PPUSH
73980: LD_INT 3
73982: PPUSH
73983: LD_INT 4
73985: PPUSH
73986: CALL_OW 272
73990: PUSH
73991: LD_VAR 0 8
73995: PPUSH
73996: LD_INT 3
73998: PPUSH
73999: LD_INT 4
74001: PPUSH
74002: CALL_OW 273
74006: PUSH
74007: EMPTY
74008: LIST
74009: LIST
74010: PUSH
74011: LD_VAR 0 7
74015: PPUSH
74016: LD_INT 4
74018: PPUSH
74019: LD_INT 4
74021: PPUSH
74022: CALL_OW 272
74026: PUSH
74027: LD_VAR 0 8
74031: PPUSH
74032: LD_INT 4
74034: PPUSH
74035: LD_INT 4
74037: PPUSH
74038: CALL_OW 273
74042: PUSH
74043: EMPTY
74044: LIST
74045: LIST
74046: PUSH
74047: LD_VAR 0 7
74051: PPUSH
74052: LD_INT 5
74054: PPUSH
74055: LD_INT 4
74057: PPUSH
74058: CALL_OW 272
74062: PUSH
74063: LD_VAR 0 8
74067: PPUSH
74068: LD_INT 5
74070: PPUSH
74071: LD_INT 4
74073: PPUSH
74074: CALL_OW 273
74078: PUSH
74079: EMPTY
74080: LIST
74081: LIST
74082: PUSH
74083: EMPTY
74084: LIST
74085: LIST
74086: LIST
74087: LIST
74088: LIST
74089: LIST
74090: ST_TO_ADDR
// for i = tmp downto 1 do
74091: LD_ADDR_VAR 0 4
74095: PUSH
74096: DOUBLE
74097: LD_VAR 0 6
74101: INC
74102: ST_TO_ADDR
74103: LD_INT 1
74105: PUSH
74106: FOR_DOWNTO
74107: IFFALSE 74210
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74109: LD_VAR 0 6
74113: PUSH
74114: LD_VAR 0 4
74118: ARRAY
74119: PUSH
74120: LD_INT 1
74122: ARRAY
74123: PPUSH
74124: LD_VAR 0 6
74128: PUSH
74129: LD_VAR 0 4
74133: ARRAY
74134: PUSH
74135: LD_INT 2
74137: ARRAY
74138: PPUSH
74139: CALL_OW 488
74143: NOT
74144: IFTRUE 74186
74146: PUSH
74147: LD_VAR 0 6
74151: PUSH
74152: LD_VAR 0 4
74156: ARRAY
74157: PUSH
74158: LD_INT 1
74160: ARRAY
74161: PPUSH
74162: LD_VAR 0 6
74166: PUSH
74167: LD_VAR 0 4
74171: ARRAY
74172: PUSH
74173: LD_INT 2
74175: ARRAY
74176: PPUSH
74177: CALL_OW 428
74181: PUSH
74182: LD_INT 0
74184: NONEQUAL
74185: OR
74186: IFFALSE 74208
// tmp := Delete ( tmp , i ) ;
74188: LD_ADDR_VAR 0 6
74192: PUSH
74193: LD_VAR 0 6
74197: PPUSH
74198: LD_VAR 0 4
74202: PPUSH
74203: CALL_OW 3
74207: ST_TO_ADDR
74208: GO 74106
74210: POP
74211: POP
// j := GetClosestHex ( unit , tmp ) ;
74212: LD_ADDR_VAR 0 5
74216: PUSH
74217: LD_VAR 0 1
74221: PPUSH
74222: LD_VAR 0 6
74226: PPUSH
74227: CALL 73504 0 2
74231: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74232: LD_VAR 0 1
74236: PPUSH
74237: LD_VAR 0 5
74241: PUSH
74242: LD_INT 1
74244: ARRAY
74245: PPUSH
74246: LD_VAR 0 5
74250: PUSH
74251: LD_INT 2
74253: ARRAY
74254: PPUSH
74255: CALL_OW 111
// result := j ;
74259: LD_ADDR_VAR 0 3
74263: PUSH
74264: LD_VAR 0 5
74268: ST_TO_ADDR
// end ;
74269: LD_VAR 0 3
74273: RET
// export function PrepareApemanSoldier ( ) ; begin
74274: LD_INT 0
74276: PPUSH
// uc_nation := 0 ;
74277: LD_ADDR_OWVAR 21
74281: PUSH
74282: LD_INT 0
74284: ST_TO_ADDR
// hc_sex := sex_male ;
74285: LD_ADDR_OWVAR 27
74289: PUSH
74290: LD_INT 1
74292: ST_TO_ADDR
// hc_name :=  ;
74293: LD_ADDR_OWVAR 26
74297: PUSH
74298: LD_STRING 
74300: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74301: LD_ADDR_OWVAR 28
74305: PUSH
74306: LD_INT 15
74308: ST_TO_ADDR
// hc_gallery :=  ;
74309: LD_ADDR_OWVAR 33
74313: PUSH
74314: LD_STRING 
74316: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74317: LD_ADDR_OWVAR 31
74321: PUSH
74322: LD_INT 0
74324: PPUSH
74325: LD_INT 3
74327: PPUSH
74328: CALL_OW 12
74332: PUSH
74333: LD_INT 0
74335: PPUSH
74336: LD_INT 3
74338: PPUSH
74339: CALL_OW 12
74343: PUSH
74344: LD_INT 0
74346: PUSH
74347: LD_INT 0
74349: PUSH
74350: EMPTY
74351: LIST
74352: LIST
74353: LIST
74354: LIST
74355: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
74356: LD_ADDR_OWVAR 29
74360: PUSH
74361: LD_INT 10
74363: PUSH
74364: LD_INT 12
74366: PUSH
74367: EMPTY
74368: LIST
74369: LIST
74370: ST_TO_ADDR
// end ;
74371: LD_VAR 0 1
74375: RET
// export function PrepareApemanEngineer ( ) ; begin
74376: LD_INT 0
74378: PPUSH
// uc_nation := 0 ;
74379: LD_ADDR_OWVAR 21
74383: PUSH
74384: LD_INT 0
74386: ST_TO_ADDR
// hc_sex := sex_male ;
74387: LD_ADDR_OWVAR 27
74391: PUSH
74392: LD_INT 1
74394: ST_TO_ADDR
// hc_name :=  ;
74395: LD_ADDR_OWVAR 26
74399: PUSH
74400: LD_STRING 
74402: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74403: LD_ADDR_OWVAR 28
74407: PUSH
74408: LD_INT 16
74410: ST_TO_ADDR
// hc_gallery :=  ;
74411: LD_ADDR_OWVAR 33
74415: PUSH
74416: LD_STRING 
74418: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74419: LD_ADDR_OWVAR 31
74423: PUSH
74424: LD_INT 0
74426: PPUSH
74427: LD_INT 3
74429: PPUSH
74430: CALL_OW 12
74434: PUSH
74435: LD_INT 0
74437: PPUSH
74438: LD_INT 3
74440: PPUSH
74441: CALL_OW 12
74445: PUSH
74446: LD_INT 0
74448: PUSH
74449: LD_INT 0
74451: PUSH
74452: EMPTY
74453: LIST
74454: LIST
74455: LIST
74456: LIST
74457: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
74458: LD_ADDR_OWVAR 29
74462: PUSH
74463: LD_INT 10
74465: PUSH
74466: LD_INT 12
74468: PUSH
74469: EMPTY
74470: LIST
74471: LIST
74472: ST_TO_ADDR
// end ;
74473: LD_VAR 0 1
74477: RET
// export function PrepareApeman ( agressivity ) ; begin
74478: LD_INT 0
74480: PPUSH
// uc_side := 0 ;
74481: LD_ADDR_OWVAR 20
74485: PUSH
74486: LD_INT 0
74488: ST_TO_ADDR
// uc_nation := 0 ;
74489: LD_ADDR_OWVAR 21
74493: PUSH
74494: LD_INT 0
74496: ST_TO_ADDR
// hc_sex := sex_male ;
74497: LD_ADDR_OWVAR 27
74501: PUSH
74502: LD_INT 1
74504: ST_TO_ADDR
// hc_class := class_apeman ;
74505: LD_ADDR_OWVAR 28
74509: PUSH
74510: LD_INT 12
74512: ST_TO_ADDR
// hc_gallery :=  ;
74513: LD_ADDR_OWVAR 33
74517: PUSH
74518: LD_STRING 
74520: ST_TO_ADDR
// hc_name :=  ;
74521: LD_ADDR_OWVAR 26
74525: PUSH
74526: LD_STRING 
74528: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
74529: LD_ADDR_OWVAR 29
74533: PUSH
74534: LD_INT 10
74536: PUSH
74537: LD_INT 12
74539: PUSH
74540: EMPTY
74541: LIST
74542: LIST
74543: ST_TO_ADDR
// if agressivity = 0 then
74544: LD_VAR 0 1
74548: PUSH
74549: LD_INT 0
74551: EQUAL
74552: IFFALSE 74564
// hc_agressivity := 0 else
74554: LD_ADDR_OWVAR 35
74558: PUSH
74559: LD_INT 0
74561: ST_TO_ADDR
74562: GO 74585
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74564: LD_ADDR_OWVAR 35
74568: PUSH
74569: LD_VAR 0 1
74573: NEG
74574: PPUSH
74575: LD_VAR 0 1
74579: PPUSH
74580: CALL_OW 12
74584: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74585: LD_ADDR_OWVAR 31
74589: PUSH
74590: LD_INT 0
74592: PPUSH
74593: LD_INT 3
74595: PPUSH
74596: CALL_OW 12
74600: PUSH
74601: LD_INT 0
74603: PPUSH
74604: LD_INT 3
74606: PPUSH
74607: CALL_OW 12
74611: PUSH
74612: LD_INT 0
74614: PUSH
74615: LD_INT 0
74617: PUSH
74618: EMPTY
74619: LIST
74620: LIST
74621: LIST
74622: LIST
74623: ST_TO_ADDR
// end ;
74624: LD_VAR 0 2
74628: RET
// export function PrepareTiger ( agressivity ) ; begin
74629: LD_INT 0
74631: PPUSH
// uc_side := 0 ;
74632: LD_ADDR_OWVAR 20
74636: PUSH
74637: LD_INT 0
74639: ST_TO_ADDR
// uc_nation := 0 ;
74640: LD_ADDR_OWVAR 21
74644: PUSH
74645: LD_INT 0
74647: ST_TO_ADDR
// InitHc ;
74648: CALL_OW 19
// hc_class := class_tiger ;
74652: LD_ADDR_OWVAR 28
74656: PUSH
74657: LD_INT 14
74659: ST_TO_ADDR
// hc_gallery :=  ;
74660: LD_ADDR_OWVAR 33
74664: PUSH
74665: LD_STRING 
74667: ST_TO_ADDR
// hc_name :=  ;
74668: LD_ADDR_OWVAR 26
74672: PUSH
74673: LD_STRING 
74675: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74676: LD_ADDR_OWVAR 35
74680: PUSH
74681: LD_VAR 0 1
74685: NEG
74686: PPUSH
74687: LD_VAR 0 1
74691: PPUSH
74692: CALL_OW 12
74696: ST_TO_ADDR
// end ;
74697: LD_VAR 0 2
74701: RET
// export function PrepareEnchidna ( ) ; begin
74702: LD_INT 0
74704: PPUSH
// uc_side := 0 ;
74705: LD_ADDR_OWVAR 20
74709: PUSH
74710: LD_INT 0
74712: ST_TO_ADDR
// uc_nation := 0 ;
74713: LD_ADDR_OWVAR 21
74717: PUSH
74718: LD_INT 0
74720: ST_TO_ADDR
// InitHc ;
74721: CALL_OW 19
// hc_class := class_baggie ;
74725: LD_ADDR_OWVAR 28
74729: PUSH
74730: LD_INT 13
74732: ST_TO_ADDR
// hc_gallery :=  ;
74733: LD_ADDR_OWVAR 33
74737: PUSH
74738: LD_STRING 
74740: ST_TO_ADDR
// hc_name :=  ;
74741: LD_ADDR_OWVAR 26
74745: PUSH
74746: LD_STRING 
74748: ST_TO_ADDR
// end ;
74749: LD_VAR 0 1
74753: RET
// export function PrepareFrog ( ) ; begin
74754: LD_INT 0
74756: PPUSH
// uc_side := 0 ;
74757: LD_ADDR_OWVAR 20
74761: PUSH
74762: LD_INT 0
74764: ST_TO_ADDR
// uc_nation := 0 ;
74765: LD_ADDR_OWVAR 21
74769: PUSH
74770: LD_INT 0
74772: ST_TO_ADDR
// InitHc ;
74773: CALL_OW 19
// hc_class := class_frog ;
74777: LD_ADDR_OWVAR 28
74781: PUSH
74782: LD_INT 19
74784: ST_TO_ADDR
// hc_gallery :=  ;
74785: LD_ADDR_OWVAR 33
74789: PUSH
74790: LD_STRING 
74792: ST_TO_ADDR
// hc_name :=  ;
74793: LD_ADDR_OWVAR 26
74797: PUSH
74798: LD_STRING 
74800: ST_TO_ADDR
// end ;
74801: LD_VAR 0 1
74805: RET
// export function PrepareFish ( ) ; begin
74806: LD_INT 0
74808: PPUSH
// uc_side := 0 ;
74809: LD_ADDR_OWVAR 20
74813: PUSH
74814: LD_INT 0
74816: ST_TO_ADDR
// uc_nation := 0 ;
74817: LD_ADDR_OWVAR 21
74821: PUSH
74822: LD_INT 0
74824: ST_TO_ADDR
// InitHc ;
74825: CALL_OW 19
// hc_class := class_fish ;
74829: LD_ADDR_OWVAR 28
74833: PUSH
74834: LD_INT 20
74836: ST_TO_ADDR
// hc_gallery :=  ;
74837: LD_ADDR_OWVAR 33
74841: PUSH
74842: LD_STRING 
74844: ST_TO_ADDR
// hc_name :=  ;
74845: LD_ADDR_OWVAR 26
74849: PUSH
74850: LD_STRING 
74852: ST_TO_ADDR
// end ;
74853: LD_VAR 0 1
74857: RET
// export function PrepareBird ( ) ; begin
74858: LD_INT 0
74860: PPUSH
// uc_side := 0 ;
74861: LD_ADDR_OWVAR 20
74865: PUSH
74866: LD_INT 0
74868: ST_TO_ADDR
// uc_nation := 0 ;
74869: LD_ADDR_OWVAR 21
74873: PUSH
74874: LD_INT 0
74876: ST_TO_ADDR
// InitHc ;
74877: CALL_OW 19
// hc_class := class_phororhacos ;
74881: LD_ADDR_OWVAR 28
74885: PUSH
74886: LD_INT 18
74888: ST_TO_ADDR
// hc_gallery :=  ;
74889: LD_ADDR_OWVAR 33
74893: PUSH
74894: LD_STRING 
74896: ST_TO_ADDR
// hc_name :=  ;
74897: LD_ADDR_OWVAR 26
74901: PUSH
74902: LD_STRING 
74904: ST_TO_ADDR
// end ;
74905: LD_VAR 0 1
74909: RET
// export function PrepareHorse ( ) ; begin
74910: LD_INT 0
74912: PPUSH
// uc_side := 0 ;
74913: LD_ADDR_OWVAR 20
74917: PUSH
74918: LD_INT 0
74920: ST_TO_ADDR
// uc_nation := 0 ;
74921: LD_ADDR_OWVAR 21
74925: PUSH
74926: LD_INT 0
74928: ST_TO_ADDR
// InitHc ;
74929: CALL_OW 19
// hc_class := class_horse ;
74933: LD_ADDR_OWVAR 28
74937: PUSH
74938: LD_INT 21
74940: ST_TO_ADDR
// hc_gallery :=  ;
74941: LD_ADDR_OWVAR 33
74945: PUSH
74946: LD_STRING 
74948: ST_TO_ADDR
// hc_name :=  ;
74949: LD_ADDR_OWVAR 26
74953: PUSH
74954: LD_STRING 
74956: ST_TO_ADDR
// end ;
74957: LD_VAR 0 1
74961: RET
// export function PrepareMastodont ( ) ; begin
74962: LD_INT 0
74964: PPUSH
// uc_side := 0 ;
74965: LD_ADDR_OWVAR 20
74969: PUSH
74970: LD_INT 0
74972: ST_TO_ADDR
// uc_nation := 0 ;
74973: LD_ADDR_OWVAR 21
74977: PUSH
74978: LD_INT 0
74980: ST_TO_ADDR
// vc_chassis := class_mastodont ;
74981: LD_ADDR_OWVAR 37
74985: PUSH
74986: LD_INT 31
74988: ST_TO_ADDR
// vc_control := control_rider ;
74989: LD_ADDR_OWVAR 38
74993: PUSH
74994: LD_INT 4
74996: ST_TO_ADDR
// end ;
74997: LD_VAR 0 1
75001: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75002: LD_INT 0
75004: PPUSH
75005: PPUSH
75006: PPUSH
// uc_side = 0 ;
75007: LD_ADDR_OWVAR 20
75011: PUSH
75012: LD_INT 0
75014: ST_TO_ADDR
// uc_nation = 0 ;
75015: LD_ADDR_OWVAR 21
75019: PUSH
75020: LD_INT 0
75022: ST_TO_ADDR
// InitHc_All ( ) ;
75023: CALL_OW 584
// InitVc ;
75027: CALL_OW 20
// if mastodonts then
75031: LD_VAR 0 6
75035: IFFALSE 75102
// for i = 1 to mastodonts do
75037: LD_ADDR_VAR 0 11
75041: PUSH
75042: DOUBLE
75043: LD_INT 1
75045: DEC
75046: ST_TO_ADDR
75047: LD_VAR 0 6
75051: PUSH
75052: FOR_TO
75053: IFFALSE 75100
// begin vc_chassis := 31 ;
75055: LD_ADDR_OWVAR 37
75059: PUSH
75060: LD_INT 31
75062: ST_TO_ADDR
// vc_control := control_rider ;
75063: LD_ADDR_OWVAR 38
75067: PUSH
75068: LD_INT 4
75070: ST_TO_ADDR
// animal := CreateVehicle ;
75071: LD_ADDR_VAR 0 12
75075: PUSH
75076: CALL_OW 45
75080: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75081: LD_VAR 0 12
75085: PPUSH
75086: LD_VAR 0 8
75090: PPUSH
75091: LD_INT 0
75093: PPUSH
75094: CALL 77244 0 3
// end ;
75098: GO 75052
75100: POP
75101: POP
// if horses then
75102: LD_VAR 0 5
75106: IFFALSE 75173
// for i = 1 to horses do
75108: LD_ADDR_VAR 0 11
75112: PUSH
75113: DOUBLE
75114: LD_INT 1
75116: DEC
75117: ST_TO_ADDR
75118: LD_VAR 0 5
75122: PUSH
75123: FOR_TO
75124: IFFALSE 75171
// begin hc_class := 21 ;
75126: LD_ADDR_OWVAR 28
75130: PUSH
75131: LD_INT 21
75133: ST_TO_ADDR
// hc_gallery :=  ;
75134: LD_ADDR_OWVAR 33
75138: PUSH
75139: LD_STRING 
75141: ST_TO_ADDR
// animal := CreateHuman ;
75142: LD_ADDR_VAR 0 12
75146: PUSH
75147: CALL_OW 44
75151: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75152: LD_VAR 0 12
75156: PPUSH
75157: LD_VAR 0 8
75161: PPUSH
75162: LD_INT 0
75164: PPUSH
75165: CALL 77244 0 3
// end ;
75169: GO 75123
75171: POP
75172: POP
// if birds then
75173: LD_VAR 0 1
75177: IFFALSE 75244
// for i = 1 to birds do
75179: LD_ADDR_VAR 0 11
75183: PUSH
75184: DOUBLE
75185: LD_INT 1
75187: DEC
75188: ST_TO_ADDR
75189: LD_VAR 0 1
75193: PUSH
75194: FOR_TO
75195: IFFALSE 75242
// begin hc_class := 18 ;
75197: LD_ADDR_OWVAR 28
75201: PUSH
75202: LD_INT 18
75204: ST_TO_ADDR
// hc_gallery =  ;
75205: LD_ADDR_OWVAR 33
75209: PUSH
75210: LD_STRING 
75212: ST_TO_ADDR
// animal := CreateHuman ;
75213: LD_ADDR_VAR 0 12
75217: PUSH
75218: CALL_OW 44
75222: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75223: LD_VAR 0 12
75227: PPUSH
75228: LD_VAR 0 8
75232: PPUSH
75233: LD_INT 0
75235: PPUSH
75236: CALL 77244 0 3
// end ;
75240: GO 75194
75242: POP
75243: POP
// if tigers then
75244: LD_VAR 0 2
75248: IFFALSE 75332
// for i = 1 to tigers do
75250: LD_ADDR_VAR 0 11
75254: PUSH
75255: DOUBLE
75256: LD_INT 1
75258: DEC
75259: ST_TO_ADDR
75260: LD_VAR 0 2
75264: PUSH
75265: FOR_TO
75266: IFFALSE 75330
// begin hc_class = class_tiger ;
75268: LD_ADDR_OWVAR 28
75272: PUSH
75273: LD_INT 14
75275: ST_TO_ADDR
// hc_gallery =  ;
75276: LD_ADDR_OWVAR 33
75280: PUSH
75281: LD_STRING 
75283: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75284: LD_ADDR_OWVAR 35
75288: PUSH
75289: LD_INT 7
75291: NEG
75292: PPUSH
75293: LD_INT 7
75295: PPUSH
75296: CALL_OW 12
75300: ST_TO_ADDR
// animal := CreateHuman ;
75301: LD_ADDR_VAR 0 12
75305: PUSH
75306: CALL_OW 44
75310: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75311: LD_VAR 0 12
75315: PPUSH
75316: LD_VAR 0 8
75320: PPUSH
75321: LD_INT 0
75323: PPUSH
75324: CALL 77244 0 3
// end ;
75328: GO 75265
75330: POP
75331: POP
// if apemans then
75332: LD_VAR 0 3
75336: IFFALSE 75459
// for i = 1 to apemans do
75338: LD_ADDR_VAR 0 11
75342: PUSH
75343: DOUBLE
75344: LD_INT 1
75346: DEC
75347: ST_TO_ADDR
75348: LD_VAR 0 3
75352: PUSH
75353: FOR_TO
75354: IFFALSE 75457
// begin hc_class = class_apeman ;
75356: LD_ADDR_OWVAR 28
75360: PUSH
75361: LD_INT 12
75363: ST_TO_ADDR
// hc_gallery =  ;
75364: LD_ADDR_OWVAR 33
75368: PUSH
75369: LD_STRING 
75371: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75372: LD_ADDR_OWVAR 35
75376: PUSH
75377: LD_INT 2
75379: NEG
75380: PPUSH
75381: LD_INT 2
75383: PPUSH
75384: CALL_OW 12
75388: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75389: LD_ADDR_OWVAR 31
75393: PUSH
75394: LD_INT 1
75396: PPUSH
75397: LD_INT 3
75399: PPUSH
75400: CALL_OW 12
75404: PUSH
75405: LD_INT 1
75407: PPUSH
75408: LD_INT 3
75410: PPUSH
75411: CALL_OW 12
75415: PUSH
75416: LD_INT 0
75418: PUSH
75419: LD_INT 0
75421: PUSH
75422: EMPTY
75423: LIST
75424: LIST
75425: LIST
75426: LIST
75427: ST_TO_ADDR
// animal := CreateHuman ;
75428: LD_ADDR_VAR 0 12
75432: PUSH
75433: CALL_OW 44
75437: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75438: LD_VAR 0 12
75442: PPUSH
75443: LD_VAR 0 8
75447: PPUSH
75448: LD_INT 0
75450: PPUSH
75451: CALL 77244 0 3
// end ;
75455: GO 75353
75457: POP
75458: POP
// if enchidnas then
75459: LD_VAR 0 4
75463: IFFALSE 75530
// for i = 1 to enchidnas do
75465: LD_ADDR_VAR 0 11
75469: PUSH
75470: DOUBLE
75471: LD_INT 1
75473: DEC
75474: ST_TO_ADDR
75475: LD_VAR 0 4
75479: PUSH
75480: FOR_TO
75481: IFFALSE 75528
// begin hc_class = 13 ;
75483: LD_ADDR_OWVAR 28
75487: PUSH
75488: LD_INT 13
75490: ST_TO_ADDR
// hc_gallery =  ;
75491: LD_ADDR_OWVAR 33
75495: PUSH
75496: LD_STRING 
75498: ST_TO_ADDR
// animal := CreateHuman ;
75499: LD_ADDR_VAR 0 12
75503: PUSH
75504: CALL_OW 44
75508: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75509: LD_VAR 0 12
75513: PPUSH
75514: LD_VAR 0 8
75518: PPUSH
75519: LD_INT 0
75521: PPUSH
75522: CALL 77244 0 3
// end ;
75526: GO 75480
75528: POP
75529: POP
// if fishes then
75530: LD_VAR 0 7
75534: IFFALSE 75601
// for i = 1 to fishes do
75536: LD_ADDR_VAR 0 11
75540: PUSH
75541: DOUBLE
75542: LD_INT 1
75544: DEC
75545: ST_TO_ADDR
75546: LD_VAR 0 7
75550: PUSH
75551: FOR_TO
75552: IFFALSE 75599
// begin hc_class = 20 ;
75554: LD_ADDR_OWVAR 28
75558: PUSH
75559: LD_INT 20
75561: ST_TO_ADDR
// hc_gallery =  ;
75562: LD_ADDR_OWVAR 33
75566: PUSH
75567: LD_STRING 
75569: ST_TO_ADDR
// animal := CreateHuman ;
75570: LD_ADDR_VAR 0 12
75574: PUSH
75575: CALL_OW 44
75579: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75580: LD_VAR 0 12
75584: PPUSH
75585: LD_VAR 0 9
75589: PPUSH
75590: LD_INT 0
75592: PPUSH
75593: CALL 77244 0 3
// end ;
75597: GO 75551
75599: POP
75600: POP
// end ;
75601: LD_VAR 0 10
75605: RET
// export function WantHeal ( sci , unit ) ; begin
75606: LD_INT 0
75608: PPUSH
// if GetTaskList ( sci ) > 0 then
75609: LD_VAR 0 1
75613: PPUSH
75614: CALL_OW 437
75618: PUSH
75619: LD_INT 0
75621: GREATER
75622: IFFALSE 75694
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75624: LD_VAR 0 1
75628: PPUSH
75629: CALL_OW 437
75633: PUSH
75634: LD_INT 1
75636: ARRAY
75637: PUSH
75638: LD_INT 1
75640: ARRAY
75641: PUSH
75642: LD_STRING l
75644: EQUAL
75645: IFFALSE 75672
75647: PUSH
75648: LD_VAR 0 1
75652: PPUSH
75653: CALL_OW 437
75657: PUSH
75658: LD_INT 1
75660: ARRAY
75661: PUSH
75662: LD_INT 4
75664: ARRAY
75665: PUSH
75666: LD_VAR 0 2
75670: EQUAL
75671: AND
75672: IFFALSE 75684
// result := true else
75674: LD_ADDR_VAR 0 3
75678: PUSH
75679: LD_INT 1
75681: ST_TO_ADDR
75682: GO 75692
// result := false ;
75684: LD_ADDR_VAR 0 3
75688: PUSH
75689: LD_INT 0
75691: ST_TO_ADDR
// end else
75692: GO 75702
// result := false ;
75694: LD_ADDR_VAR 0 3
75698: PUSH
75699: LD_INT 0
75701: ST_TO_ADDR
// end ;
75702: LD_VAR 0 3
75706: RET
// export function HealTarget ( sci ) ; begin
75707: LD_INT 0
75709: PPUSH
// if not sci then
75710: LD_VAR 0 1
75714: NOT
75715: IFFALSE 75719
// exit ;
75717: GO 75784
// result := 0 ;
75719: LD_ADDR_VAR 0 2
75723: PUSH
75724: LD_INT 0
75726: ST_TO_ADDR
// if GetTaskList ( sci ) then
75727: LD_VAR 0 1
75731: PPUSH
75732: CALL_OW 437
75736: IFFALSE 75784
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75738: LD_VAR 0 1
75742: PPUSH
75743: CALL_OW 437
75747: PUSH
75748: LD_INT 1
75750: ARRAY
75751: PUSH
75752: LD_INT 1
75754: ARRAY
75755: PUSH
75756: LD_STRING l
75758: EQUAL
75759: IFFALSE 75784
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75761: LD_ADDR_VAR 0 2
75765: PUSH
75766: LD_VAR 0 1
75770: PPUSH
75771: CALL_OW 437
75775: PUSH
75776: LD_INT 1
75778: ARRAY
75779: PUSH
75780: LD_INT 4
75782: ARRAY
75783: ST_TO_ADDR
// end ;
75784: LD_VAR 0 2
75788: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75789: LD_INT 0
75791: PPUSH
75792: PPUSH
75793: PPUSH
75794: PPUSH
// if not base_units then
75795: LD_VAR 0 1
75799: NOT
75800: IFFALSE 75804
// exit ;
75802: GO 75891
// result := false ;
75804: LD_ADDR_VAR 0 2
75808: PUSH
75809: LD_INT 0
75811: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75812: LD_ADDR_VAR 0 5
75816: PUSH
75817: LD_VAR 0 1
75821: PPUSH
75822: LD_INT 21
75824: PUSH
75825: LD_INT 3
75827: PUSH
75828: EMPTY
75829: LIST
75830: LIST
75831: PPUSH
75832: CALL_OW 72
75836: ST_TO_ADDR
// if not tmp then
75837: LD_VAR 0 5
75841: NOT
75842: IFFALSE 75846
// exit ;
75844: GO 75891
// for i in tmp do
75846: LD_ADDR_VAR 0 3
75850: PUSH
75851: LD_VAR 0 5
75855: PUSH
75856: FOR_IN
75857: IFFALSE 75889
// begin result := EnemyInRange ( i , 22 ) ;
75859: LD_ADDR_VAR 0 2
75863: PUSH
75864: LD_VAR 0 3
75868: PPUSH
75869: LD_INT 22
75871: PPUSH
75872: CALL 73306 0 2
75876: ST_TO_ADDR
// if result then
75877: LD_VAR 0 2
75881: IFFALSE 75887
// exit ;
75883: POP
75884: POP
75885: GO 75891
// end ;
75887: GO 75856
75889: POP
75890: POP
// end ;
75891: LD_VAR 0 2
75895: RET
// export function FilterByTag ( units , tag ) ; begin
75896: LD_INT 0
75898: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75899: LD_ADDR_VAR 0 3
75903: PUSH
75904: LD_VAR 0 1
75908: PPUSH
75909: LD_INT 120
75911: PUSH
75912: LD_VAR 0 2
75916: PUSH
75917: EMPTY
75918: LIST
75919: LIST
75920: PPUSH
75921: CALL_OW 72
75925: ST_TO_ADDR
// end ;
75926: LD_VAR 0 3
75930: RET
// export function IsDriver ( un ) ; begin
75931: LD_INT 0
75933: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75934: LD_ADDR_VAR 0 2
75938: PUSH
75939: LD_VAR 0 1
75943: PUSH
75944: LD_INT 55
75946: PUSH
75947: EMPTY
75948: LIST
75949: PPUSH
75950: CALL_OW 69
75954: IN
75955: ST_TO_ADDR
// end ;
75956: LD_VAR 0 2
75960: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75961: LD_INT 0
75963: PPUSH
75964: PPUSH
// list := [ ] ;
75965: LD_ADDR_VAR 0 5
75969: PUSH
75970: EMPTY
75971: ST_TO_ADDR
// case d of 0 :
75972: LD_VAR 0 3
75976: PUSH
75977: LD_INT 0
75979: DOUBLE
75980: EQUAL
75981: IFTRUE 75985
75983: GO 76118
75985: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75986: LD_ADDR_VAR 0 5
75990: PUSH
75991: LD_VAR 0 1
75995: PUSH
75996: LD_INT 4
75998: MINUS
75999: PUSH
76000: LD_VAR 0 2
76004: PUSH
76005: LD_INT 4
76007: MINUS
76008: PUSH
76009: LD_INT 2
76011: PUSH
76012: EMPTY
76013: LIST
76014: LIST
76015: LIST
76016: PUSH
76017: LD_VAR 0 1
76021: PUSH
76022: LD_INT 3
76024: MINUS
76025: PUSH
76026: LD_VAR 0 2
76030: PUSH
76031: LD_INT 1
76033: PUSH
76034: EMPTY
76035: LIST
76036: LIST
76037: LIST
76038: PUSH
76039: LD_VAR 0 1
76043: PUSH
76044: LD_INT 4
76046: PLUS
76047: PUSH
76048: LD_VAR 0 2
76052: PUSH
76053: LD_INT 4
76055: PUSH
76056: EMPTY
76057: LIST
76058: LIST
76059: LIST
76060: PUSH
76061: LD_VAR 0 1
76065: PUSH
76066: LD_INT 3
76068: PLUS
76069: PUSH
76070: LD_VAR 0 2
76074: PUSH
76075: LD_INT 3
76077: PLUS
76078: PUSH
76079: LD_INT 5
76081: PUSH
76082: EMPTY
76083: LIST
76084: LIST
76085: LIST
76086: PUSH
76087: LD_VAR 0 1
76091: PUSH
76092: LD_VAR 0 2
76096: PUSH
76097: LD_INT 4
76099: PLUS
76100: PUSH
76101: LD_INT 0
76103: PUSH
76104: EMPTY
76105: LIST
76106: LIST
76107: LIST
76108: PUSH
76109: EMPTY
76110: LIST
76111: LIST
76112: LIST
76113: LIST
76114: LIST
76115: ST_TO_ADDR
// end ; 1 :
76116: GO 76816
76118: LD_INT 1
76120: DOUBLE
76121: EQUAL
76122: IFTRUE 76126
76124: GO 76259
76126: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76127: LD_ADDR_VAR 0 5
76131: PUSH
76132: LD_VAR 0 1
76136: PUSH
76137: LD_VAR 0 2
76141: PUSH
76142: LD_INT 4
76144: MINUS
76145: PUSH
76146: LD_INT 3
76148: PUSH
76149: EMPTY
76150: LIST
76151: LIST
76152: LIST
76153: PUSH
76154: LD_VAR 0 1
76158: PUSH
76159: LD_INT 3
76161: MINUS
76162: PUSH
76163: LD_VAR 0 2
76167: PUSH
76168: LD_INT 3
76170: MINUS
76171: PUSH
76172: LD_INT 2
76174: PUSH
76175: EMPTY
76176: LIST
76177: LIST
76178: LIST
76179: PUSH
76180: LD_VAR 0 1
76184: PUSH
76185: LD_INT 4
76187: MINUS
76188: PUSH
76189: LD_VAR 0 2
76193: PUSH
76194: LD_INT 1
76196: PUSH
76197: EMPTY
76198: LIST
76199: LIST
76200: LIST
76201: PUSH
76202: LD_VAR 0 1
76206: PUSH
76207: LD_VAR 0 2
76211: PUSH
76212: LD_INT 3
76214: PLUS
76215: PUSH
76216: LD_INT 0
76218: PUSH
76219: EMPTY
76220: LIST
76221: LIST
76222: LIST
76223: PUSH
76224: LD_VAR 0 1
76228: PUSH
76229: LD_INT 4
76231: PLUS
76232: PUSH
76233: LD_VAR 0 2
76237: PUSH
76238: LD_INT 4
76240: PLUS
76241: PUSH
76242: LD_INT 5
76244: PUSH
76245: EMPTY
76246: LIST
76247: LIST
76248: LIST
76249: PUSH
76250: EMPTY
76251: LIST
76252: LIST
76253: LIST
76254: LIST
76255: LIST
76256: ST_TO_ADDR
// end ; 2 :
76257: GO 76816
76259: LD_INT 2
76261: DOUBLE
76262: EQUAL
76263: IFTRUE 76267
76265: GO 76396
76267: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76268: LD_ADDR_VAR 0 5
76272: PUSH
76273: LD_VAR 0 1
76277: PUSH
76278: LD_VAR 0 2
76282: PUSH
76283: LD_INT 3
76285: MINUS
76286: PUSH
76287: LD_INT 3
76289: PUSH
76290: EMPTY
76291: LIST
76292: LIST
76293: LIST
76294: PUSH
76295: LD_VAR 0 1
76299: PUSH
76300: LD_INT 4
76302: PLUS
76303: PUSH
76304: LD_VAR 0 2
76308: PUSH
76309: LD_INT 4
76311: PUSH
76312: EMPTY
76313: LIST
76314: LIST
76315: LIST
76316: PUSH
76317: LD_VAR 0 1
76321: PUSH
76322: LD_VAR 0 2
76326: PUSH
76327: LD_INT 4
76329: PLUS
76330: PUSH
76331: LD_INT 0
76333: PUSH
76334: EMPTY
76335: LIST
76336: LIST
76337: LIST
76338: PUSH
76339: LD_VAR 0 1
76343: PUSH
76344: LD_INT 3
76346: MINUS
76347: PUSH
76348: LD_VAR 0 2
76352: PUSH
76353: LD_INT 1
76355: PUSH
76356: EMPTY
76357: LIST
76358: LIST
76359: LIST
76360: PUSH
76361: LD_VAR 0 1
76365: PUSH
76366: LD_INT 4
76368: MINUS
76369: PUSH
76370: LD_VAR 0 2
76374: PUSH
76375: LD_INT 4
76377: MINUS
76378: PUSH
76379: LD_INT 2
76381: PUSH
76382: EMPTY
76383: LIST
76384: LIST
76385: LIST
76386: PUSH
76387: EMPTY
76388: LIST
76389: LIST
76390: LIST
76391: LIST
76392: LIST
76393: ST_TO_ADDR
// end ; 3 :
76394: GO 76816
76396: LD_INT 3
76398: DOUBLE
76399: EQUAL
76400: IFTRUE 76404
76402: GO 76537
76404: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76405: LD_ADDR_VAR 0 5
76409: PUSH
76410: LD_VAR 0 1
76414: PUSH
76415: LD_INT 3
76417: PLUS
76418: PUSH
76419: LD_VAR 0 2
76423: PUSH
76424: LD_INT 4
76426: PUSH
76427: EMPTY
76428: LIST
76429: LIST
76430: LIST
76431: PUSH
76432: LD_VAR 0 1
76436: PUSH
76437: LD_INT 4
76439: PLUS
76440: PUSH
76441: LD_VAR 0 2
76445: PUSH
76446: LD_INT 4
76448: PLUS
76449: PUSH
76450: LD_INT 5
76452: PUSH
76453: EMPTY
76454: LIST
76455: LIST
76456: LIST
76457: PUSH
76458: LD_VAR 0 1
76462: PUSH
76463: LD_INT 4
76465: MINUS
76466: PUSH
76467: LD_VAR 0 2
76471: PUSH
76472: LD_INT 1
76474: PUSH
76475: EMPTY
76476: LIST
76477: LIST
76478: LIST
76479: PUSH
76480: LD_VAR 0 1
76484: PUSH
76485: LD_VAR 0 2
76489: PUSH
76490: LD_INT 4
76492: MINUS
76493: PUSH
76494: LD_INT 3
76496: PUSH
76497: EMPTY
76498: LIST
76499: LIST
76500: LIST
76501: PUSH
76502: LD_VAR 0 1
76506: PUSH
76507: LD_INT 3
76509: MINUS
76510: PUSH
76511: LD_VAR 0 2
76515: PUSH
76516: LD_INT 3
76518: MINUS
76519: PUSH
76520: LD_INT 2
76522: PUSH
76523: EMPTY
76524: LIST
76525: LIST
76526: LIST
76527: PUSH
76528: EMPTY
76529: LIST
76530: LIST
76531: LIST
76532: LIST
76533: LIST
76534: ST_TO_ADDR
// end ; 4 :
76535: GO 76816
76537: LD_INT 4
76539: DOUBLE
76540: EQUAL
76541: IFTRUE 76545
76543: GO 76678
76545: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76546: LD_ADDR_VAR 0 5
76550: PUSH
76551: LD_VAR 0 1
76555: PUSH
76556: LD_VAR 0 2
76560: PUSH
76561: LD_INT 4
76563: PLUS
76564: PUSH
76565: LD_INT 0
76567: PUSH
76568: EMPTY
76569: LIST
76570: LIST
76571: LIST
76572: PUSH
76573: LD_VAR 0 1
76577: PUSH
76578: LD_INT 3
76580: PLUS
76581: PUSH
76582: LD_VAR 0 2
76586: PUSH
76587: LD_INT 3
76589: PLUS
76590: PUSH
76591: LD_INT 5
76593: PUSH
76594: EMPTY
76595: LIST
76596: LIST
76597: LIST
76598: PUSH
76599: LD_VAR 0 1
76603: PUSH
76604: LD_INT 4
76606: PLUS
76607: PUSH
76608: LD_VAR 0 2
76612: PUSH
76613: LD_INT 4
76615: PUSH
76616: EMPTY
76617: LIST
76618: LIST
76619: LIST
76620: PUSH
76621: LD_VAR 0 1
76625: PUSH
76626: LD_VAR 0 2
76630: PUSH
76631: LD_INT 3
76633: MINUS
76634: PUSH
76635: LD_INT 3
76637: PUSH
76638: EMPTY
76639: LIST
76640: LIST
76641: LIST
76642: PUSH
76643: LD_VAR 0 1
76647: PUSH
76648: LD_INT 4
76650: MINUS
76651: PUSH
76652: LD_VAR 0 2
76656: PUSH
76657: LD_INT 4
76659: MINUS
76660: PUSH
76661: LD_INT 2
76663: PUSH
76664: EMPTY
76665: LIST
76666: LIST
76667: LIST
76668: PUSH
76669: EMPTY
76670: LIST
76671: LIST
76672: LIST
76673: LIST
76674: LIST
76675: ST_TO_ADDR
// end ; 5 :
76676: GO 76816
76678: LD_INT 5
76680: DOUBLE
76681: EQUAL
76682: IFTRUE 76686
76684: GO 76815
76686: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76687: LD_ADDR_VAR 0 5
76691: PUSH
76692: LD_VAR 0 1
76696: PUSH
76697: LD_INT 4
76699: MINUS
76700: PUSH
76701: LD_VAR 0 2
76705: PUSH
76706: LD_INT 1
76708: PUSH
76709: EMPTY
76710: LIST
76711: LIST
76712: LIST
76713: PUSH
76714: LD_VAR 0 1
76718: PUSH
76719: LD_VAR 0 2
76723: PUSH
76724: LD_INT 4
76726: MINUS
76727: PUSH
76728: LD_INT 3
76730: PUSH
76731: EMPTY
76732: LIST
76733: LIST
76734: LIST
76735: PUSH
76736: LD_VAR 0 1
76740: PUSH
76741: LD_INT 4
76743: PLUS
76744: PUSH
76745: LD_VAR 0 2
76749: PUSH
76750: LD_INT 4
76752: PLUS
76753: PUSH
76754: LD_INT 5
76756: PUSH
76757: EMPTY
76758: LIST
76759: LIST
76760: LIST
76761: PUSH
76762: LD_VAR 0 1
76766: PUSH
76767: LD_INT 3
76769: PLUS
76770: PUSH
76771: LD_VAR 0 2
76775: PUSH
76776: LD_INT 4
76778: PUSH
76779: EMPTY
76780: LIST
76781: LIST
76782: LIST
76783: PUSH
76784: LD_VAR 0 1
76788: PUSH
76789: LD_VAR 0 2
76793: PUSH
76794: LD_INT 3
76796: PLUS
76797: PUSH
76798: LD_INT 0
76800: PUSH
76801: EMPTY
76802: LIST
76803: LIST
76804: LIST
76805: PUSH
76806: EMPTY
76807: LIST
76808: LIST
76809: LIST
76810: LIST
76811: LIST
76812: ST_TO_ADDR
// end ; end ;
76813: GO 76816
76815: POP
// result := list ;
76816: LD_ADDR_VAR 0 4
76820: PUSH
76821: LD_VAR 0 5
76825: ST_TO_ADDR
// end ;
76826: LD_VAR 0 4
76830: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76831: LD_INT 0
76833: PPUSH
76834: PPUSH
76835: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76836: LD_VAR 0 1
76840: NOT
76841: IFTRUE 76869
76843: PUSH
76844: LD_VAR 0 2
76848: PUSH
76849: LD_INT 1
76851: PUSH
76852: LD_INT 2
76854: PUSH
76855: LD_INT 3
76857: PUSH
76858: LD_INT 4
76860: PUSH
76861: EMPTY
76862: LIST
76863: LIST
76864: LIST
76865: LIST
76866: IN
76867: NOT
76868: OR
76869: IFFALSE 76873
// exit ;
76871: GO 76956
// tmp := [ ] ;
76873: LD_ADDR_VAR 0 5
76877: PUSH
76878: EMPTY
76879: ST_TO_ADDR
// for i in units do
76880: LD_ADDR_VAR 0 4
76884: PUSH
76885: LD_VAR 0 1
76889: PUSH
76890: FOR_IN
76891: IFFALSE 76925
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76893: LD_ADDR_VAR 0 5
76897: PUSH
76898: LD_VAR 0 5
76902: PPUSH
76903: LD_VAR 0 4
76907: PPUSH
76908: LD_VAR 0 2
76912: PPUSH
76913: CALL_OW 259
76917: PPUSH
76918: CALL 78351 0 2
76922: ST_TO_ADDR
76923: GO 76890
76925: POP
76926: POP
// if not tmp then
76927: LD_VAR 0 5
76931: NOT
76932: IFFALSE 76936
// exit ;
76934: GO 76956
// result := SortListByListDesc ( units , tmp ) ;
76936: LD_ADDR_VAR 0 3
76940: PUSH
76941: LD_VAR 0 1
76945: PPUSH
76946: LD_VAR 0 5
76950: PPUSH
76951: CALL_OW 77
76955: ST_TO_ADDR
// end ;
76956: LD_VAR 0 3
76960: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76961: LD_INT 0
76963: PPUSH
76964: PPUSH
76965: PPUSH
// result := false ;
76966: LD_ADDR_VAR 0 3
76970: PUSH
76971: LD_INT 0
76973: ST_TO_ADDR
// if not building then
76974: LD_VAR 0 2
76978: NOT
76979: IFFALSE 76983
// exit ;
76981: GO 77127
// x := GetX ( building ) ;
76983: LD_ADDR_VAR 0 4
76987: PUSH
76988: LD_VAR 0 2
76992: PPUSH
76993: CALL_OW 250
76997: ST_TO_ADDR
// y := GetY ( building ) ;
76998: LD_ADDR_VAR 0 5
77002: PUSH
77003: LD_VAR 0 2
77007: PPUSH
77008: CALL_OW 251
77012: ST_TO_ADDR
// if not x or not y then
77013: LD_VAR 0 4
77017: NOT
77018: IFTRUE 77027
77020: PUSH
77021: LD_VAR 0 5
77025: NOT
77026: OR
77027: IFFALSE 77031
// exit ;
77029: GO 77127
// if GetTaskList ( unit ) then
77031: LD_VAR 0 1
77035: PPUSH
77036: CALL_OW 437
77040: IFFALSE 77127
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77042: LD_STRING e
77044: PUSH
77045: LD_VAR 0 1
77049: PPUSH
77050: CALL_OW 437
77054: PUSH
77055: LD_INT 1
77057: ARRAY
77058: PUSH
77059: LD_INT 1
77061: ARRAY
77062: EQUAL
77063: IFFALSE 77090
77065: PUSH
77066: LD_VAR 0 4
77070: PUSH
77071: LD_VAR 0 1
77075: PPUSH
77076: CALL_OW 437
77080: PUSH
77081: LD_INT 1
77083: ARRAY
77084: PUSH
77085: LD_INT 2
77087: ARRAY
77088: EQUAL
77089: AND
77090: IFFALSE 77117
77092: PUSH
77093: LD_VAR 0 5
77097: PUSH
77098: LD_VAR 0 1
77102: PPUSH
77103: CALL_OW 437
77107: PUSH
77108: LD_INT 1
77110: ARRAY
77111: PUSH
77112: LD_INT 3
77114: ARRAY
77115: EQUAL
77116: AND
77117: IFFALSE 77127
// result := true end ;
77119: LD_ADDR_VAR 0 3
77123: PUSH
77124: LD_INT 1
77126: ST_TO_ADDR
// end ;
77127: LD_VAR 0 3
77131: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77132: LD_INT 0
77134: PPUSH
// result := false ;
77135: LD_ADDR_VAR 0 4
77139: PUSH
77140: LD_INT 0
77142: ST_TO_ADDR
// if GetTaskList ( unit ) then
77143: LD_VAR 0 1
77147: PPUSH
77148: CALL_OW 437
77152: IFFALSE 77239
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77154: LD_STRING M
77156: PUSH
77157: LD_VAR 0 1
77161: PPUSH
77162: CALL_OW 437
77166: PUSH
77167: LD_INT 1
77169: ARRAY
77170: PUSH
77171: LD_INT 1
77173: ARRAY
77174: EQUAL
77175: IFFALSE 77202
77177: PUSH
77178: LD_VAR 0 2
77182: PUSH
77183: LD_VAR 0 1
77187: PPUSH
77188: CALL_OW 437
77192: PUSH
77193: LD_INT 1
77195: ARRAY
77196: PUSH
77197: LD_INT 2
77199: ARRAY
77200: EQUAL
77201: AND
77202: IFFALSE 77229
77204: PUSH
77205: LD_VAR 0 3
77209: PUSH
77210: LD_VAR 0 1
77214: PPUSH
77215: CALL_OW 437
77219: PUSH
77220: LD_INT 1
77222: ARRAY
77223: PUSH
77224: LD_INT 3
77226: ARRAY
77227: EQUAL
77228: AND
77229: IFFALSE 77239
// result := true ;
77231: LD_ADDR_VAR 0 4
77235: PUSH
77236: LD_INT 1
77238: ST_TO_ADDR
// end ; end ;
77239: LD_VAR 0 4
77243: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77244: LD_INT 0
77246: PPUSH
77247: PPUSH
77248: PPUSH
77249: PPUSH
// if not unit or not area then
77250: LD_VAR 0 1
77254: NOT
77255: IFTRUE 77264
77257: PUSH
77258: LD_VAR 0 2
77262: NOT
77263: OR
77264: IFFALSE 77268
// exit ;
77266: GO 77444
// tmp := AreaToList ( area , i ) ;
77268: LD_ADDR_VAR 0 6
77272: PUSH
77273: LD_VAR 0 2
77277: PPUSH
77278: LD_VAR 0 5
77282: PPUSH
77283: CALL_OW 517
77287: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77288: LD_ADDR_VAR 0 5
77292: PUSH
77293: DOUBLE
77294: LD_INT 1
77296: DEC
77297: ST_TO_ADDR
77298: LD_VAR 0 6
77302: PUSH
77303: LD_INT 1
77305: ARRAY
77306: PUSH
77307: FOR_TO
77308: IFFALSE 77442
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77310: LD_ADDR_VAR 0 7
77314: PUSH
77315: LD_VAR 0 6
77319: PUSH
77320: LD_INT 1
77322: ARRAY
77323: PUSH
77324: LD_VAR 0 5
77328: ARRAY
77329: PUSH
77330: LD_VAR 0 6
77334: PUSH
77335: LD_INT 2
77337: ARRAY
77338: PUSH
77339: LD_VAR 0 5
77343: ARRAY
77344: PUSH
77345: EMPTY
77346: LIST
77347: LIST
77348: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
77349: LD_INT 92
77351: PUSH
77352: LD_VAR 0 7
77356: PUSH
77357: LD_INT 1
77359: ARRAY
77360: PUSH
77361: LD_VAR 0 7
77365: PUSH
77366: LD_INT 2
77368: ARRAY
77369: PUSH
77370: LD_INT 2
77372: PUSH
77373: EMPTY
77374: LIST
77375: LIST
77376: LIST
77377: LIST
77378: PPUSH
77379: CALL_OW 69
77383: PUSH
77384: LD_INT 0
77386: EQUAL
77387: IFFALSE 77440
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77389: LD_VAR 0 1
77393: PPUSH
77394: LD_VAR 0 7
77398: PUSH
77399: LD_INT 1
77401: ARRAY
77402: PPUSH
77403: LD_VAR 0 7
77407: PUSH
77408: LD_INT 2
77410: ARRAY
77411: PPUSH
77412: LD_VAR 0 3
77416: PPUSH
77417: CALL_OW 48
// result := IsPlaced ( unit ) ;
77421: LD_ADDR_VAR 0 4
77425: PUSH
77426: LD_VAR 0 1
77430: PPUSH
77431: CALL_OW 305
77435: ST_TO_ADDR
// exit ;
77436: POP
77437: POP
77438: GO 77444
// end ; end ;
77440: GO 77307
77442: POP
77443: POP
// end ;
77444: LD_VAR 0 4
77448: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77449: LD_INT 0
77451: PPUSH
77452: PPUSH
77453: PPUSH
// if not side or side > 8 then
77454: LD_VAR 0 1
77458: NOT
77459: IFTRUE 77471
77461: PUSH
77462: LD_VAR 0 1
77466: PUSH
77467: LD_INT 8
77469: GREATER
77470: OR
77471: IFFALSE 77475
// exit ;
77473: GO 77662
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77475: LD_ADDR_VAR 0 4
77479: PUSH
77480: LD_INT 22
77482: PUSH
77483: LD_VAR 0 1
77487: PUSH
77488: EMPTY
77489: LIST
77490: LIST
77491: PUSH
77492: LD_INT 21
77494: PUSH
77495: LD_INT 3
77497: PUSH
77498: EMPTY
77499: LIST
77500: LIST
77501: PUSH
77502: EMPTY
77503: LIST
77504: LIST
77505: PPUSH
77506: CALL_OW 69
77510: ST_TO_ADDR
// if not tmp then
77511: LD_VAR 0 4
77515: NOT
77516: IFFALSE 77520
// exit ;
77518: GO 77662
// enable_addtolog := true ;
77520: LD_ADDR_OWVAR 81
77524: PUSH
77525: LD_INT 1
77527: ST_TO_ADDR
// AddToLog ( [ ) ;
77528: LD_STRING [
77530: PPUSH
77531: CALL_OW 561
// for i in tmp do
77535: LD_ADDR_VAR 0 3
77539: PUSH
77540: LD_VAR 0 4
77544: PUSH
77545: FOR_IN
77546: IFFALSE 77653
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77548: LD_STRING [
77550: PUSH
77551: LD_VAR 0 3
77555: PPUSH
77556: CALL_OW 266
77560: STR
77561: PUSH
77562: LD_STRING , 
77564: STR
77565: PUSH
77566: LD_VAR 0 3
77570: PPUSH
77571: CALL_OW 250
77575: STR
77576: PUSH
77577: LD_STRING , 
77579: STR
77580: PUSH
77581: LD_VAR 0 3
77585: PPUSH
77586: CALL_OW 251
77590: STR
77591: PUSH
77592: LD_STRING , 
77594: STR
77595: PUSH
77596: LD_VAR 0 3
77600: PPUSH
77601: CALL_OW 254
77605: STR
77606: PUSH
77607: LD_STRING , 
77609: STR
77610: PUSH
77611: LD_VAR 0 3
77615: PPUSH
77616: LD_INT 1
77618: PPUSH
77619: CALL_OW 268
77623: STR
77624: PUSH
77625: LD_STRING , 
77627: STR
77628: PUSH
77629: LD_VAR 0 3
77633: PPUSH
77634: LD_INT 2
77636: PPUSH
77637: CALL_OW 268
77641: STR
77642: PUSH
77643: LD_STRING ],
77645: STR
77646: PPUSH
77647: CALL_OW 561
// end ;
77651: GO 77545
77653: POP
77654: POP
// AddToLog ( ]; ) ;
77655: LD_STRING ];
77657: PPUSH
77658: CALL_OW 561
// end ;
77662: LD_VAR 0 2
77666: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77667: LD_INT 0
77669: PPUSH
77670: PPUSH
77671: PPUSH
77672: PPUSH
77673: PPUSH
// if not area or not rate or not max then
77674: LD_VAR 0 1
77678: NOT
77679: IFTRUE 77688
77681: PUSH
77682: LD_VAR 0 2
77686: NOT
77687: OR
77688: IFTRUE 77697
77690: PUSH
77691: LD_VAR 0 4
77695: NOT
77696: OR
77697: IFFALSE 77701
// exit ;
77699: GO 77890
// while 1 do
77701: LD_INT 1
77703: IFFALSE 77890
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77705: LD_ADDR_VAR 0 9
77709: PUSH
77710: LD_VAR 0 1
77714: PPUSH
77715: LD_INT 1
77717: PPUSH
77718: CALL_OW 287
77722: PUSH
77723: LD_INT 10
77725: MUL
77726: ST_TO_ADDR
// r := rate / 10 ;
77727: LD_ADDR_VAR 0 7
77731: PUSH
77732: LD_VAR 0 2
77736: PUSH
77737: LD_INT 10
77739: DIVREAL
77740: ST_TO_ADDR
// time := 1 1$00 ;
77741: LD_ADDR_VAR 0 8
77745: PUSH
77746: LD_INT 2100
77748: ST_TO_ADDR
// if amount < min then
77749: LD_VAR 0 9
77753: PUSH
77754: LD_VAR 0 3
77758: LESS
77759: IFFALSE 77777
// r := r * 2 else
77761: LD_ADDR_VAR 0 7
77765: PUSH
77766: LD_VAR 0 7
77770: PUSH
77771: LD_INT 2
77773: MUL
77774: ST_TO_ADDR
77775: GO 77803
// if amount > max then
77777: LD_VAR 0 9
77781: PUSH
77782: LD_VAR 0 4
77786: GREATER
77787: IFFALSE 77803
// r := r / 2 ;
77789: LD_ADDR_VAR 0 7
77793: PUSH
77794: LD_VAR 0 7
77798: PUSH
77799: LD_INT 2
77801: DIVREAL
77802: ST_TO_ADDR
// time := time / r ;
77803: LD_ADDR_VAR 0 8
77807: PUSH
77808: LD_VAR 0 8
77812: PUSH
77813: LD_VAR 0 7
77817: DIVREAL
77818: ST_TO_ADDR
// if time < 0 then
77819: LD_VAR 0 8
77823: PUSH
77824: LD_INT 0
77826: LESS
77827: IFFALSE 77844
// time := time * - 1 ;
77829: LD_ADDR_VAR 0 8
77833: PUSH
77834: LD_VAR 0 8
77838: PUSH
77839: LD_INT 1
77841: NEG
77842: MUL
77843: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77844: LD_VAR 0 8
77848: PUSH
77849: LD_INT 35
77851: PPUSH
77852: LD_INT 875
77854: PPUSH
77855: CALL_OW 12
77859: PLUS
77860: PPUSH
77861: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77865: LD_INT 1
77867: PPUSH
77868: LD_INT 5
77870: PPUSH
77871: CALL_OW 12
77875: PPUSH
77876: LD_VAR 0 1
77880: PPUSH
77881: LD_INT 1
77883: PPUSH
77884: CALL_OW 55
// end ;
77888: GO 77701
// end ;
77890: LD_VAR 0 5
77894: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77895: LD_INT 0
77897: PPUSH
77898: PPUSH
77899: PPUSH
77900: PPUSH
77901: PPUSH
77902: PPUSH
77903: PPUSH
77904: PPUSH
// if not turrets or not factories then
77905: LD_VAR 0 1
77909: NOT
77910: IFTRUE 77919
77912: PUSH
77913: LD_VAR 0 2
77917: NOT
77918: OR
77919: IFFALSE 77923
// exit ;
77921: GO 78230
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77923: LD_ADDR_VAR 0 10
77927: PUSH
77928: LD_INT 5
77930: PUSH
77931: LD_INT 6
77933: PUSH
77934: EMPTY
77935: LIST
77936: LIST
77937: PUSH
77938: LD_INT 2
77940: PUSH
77941: LD_INT 4
77943: PUSH
77944: EMPTY
77945: LIST
77946: LIST
77947: PUSH
77948: LD_INT 3
77950: PUSH
77951: LD_INT 5
77953: PUSH
77954: EMPTY
77955: LIST
77956: LIST
77957: PUSH
77958: EMPTY
77959: LIST
77960: LIST
77961: LIST
77962: PUSH
77963: LD_INT 24
77965: PUSH
77966: LD_INT 25
77968: PUSH
77969: EMPTY
77970: LIST
77971: LIST
77972: PUSH
77973: LD_INT 23
77975: PUSH
77976: LD_INT 27
77978: PUSH
77979: EMPTY
77980: LIST
77981: LIST
77982: PUSH
77983: EMPTY
77984: LIST
77985: LIST
77986: PUSH
77987: LD_INT 42
77989: PUSH
77990: LD_INT 43
77992: PUSH
77993: EMPTY
77994: LIST
77995: LIST
77996: PUSH
77997: LD_INT 44
77999: PUSH
78000: LD_INT 46
78002: PUSH
78003: EMPTY
78004: LIST
78005: LIST
78006: PUSH
78007: LD_INT 45
78009: PUSH
78010: LD_INT 47
78012: PUSH
78013: EMPTY
78014: LIST
78015: LIST
78016: PUSH
78017: EMPTY
78018: LIST
78019: LIST
78020: LIST
78021: PUSH
78022: EMPTY
78023: LIST
78024: LIST
78025: LIST
78026: ST_TO_ADDR
// result := [ ] ;
78027: LD_ADDR_VAR 0 3
78031: PUSH
78032: EMPTY
78033: ST_TO_ADDR
// for i in turrets do
78034: LD_ADDR_VAR 0 4
78038: PUSH
78039: LD_VAR 0 1
78043: PUSH
78044: FOR_IN
78045: IFFALSE 78228
// begin nat := GetNation ( i ) ;
78047: LD_ADDR_VAR 0 7
78051: PUSH
78052: LD_VAR 0 4
78056: PPUSH
78057: CALL_OW 248
78061: ST_TO_ADDR
// weapon := 0 ;
78062: LD_ADDR_VAR 0 8
78066: PUSH
78067: LD_INT 0
78069: ST_TO_ADDR
// if not nat then
78070: LD_VAR 0 7
78074: NOT
78075: IFFALSE 78079
// continue ;
78077: GO 78044
// for j in list [ nat ] do
78079: LD_ADDR_VAR 0 5
78083: PUSH
78084: LD_VAR 0 10
78088: PUSH
78089: LD_VAR 0 7
78093: ARRAY
78094: PUSH
78095: FOR_IN
78096: IFFALSE 78137
// if GetBWeapon ( i ) = j [ 1 ] then
78098: LD_VAR 0 4
78102: PPUSH
78103: CALL_OW 269
78107: PUSH
78108: LD_VAR 0 5
78112: PUSH
78113: LD_INT 1
78115: ARRAY
78116: EQUAL
78117: IFFALSE 78135
// begin weapon := j [ 2 ] ;
78119: LD_ADDR_VAR 0 8
78123: PUSH
78124: LD_VAR 0 5
78128: PUSH
78129: LD_INT 2
78131: ARRAY
78132: ST_TO_ADDR
// break ;
78133: GO 78137
// end ;
78135: GO 78095
78137: POP
78138: POP
// if not weapon then
78139: LD_VAR 0 8
78143: NOT
78144: IFFALSE 78148
// continue ;
78146: GO 78044
// for k in factories do
78148: LD_ADDR_VAR 0 6
78152: PUSH
78153: LD_VAR 0 2
78157: PUSH
78158: FOR_IN
78159: IFFALSE 78224
// begin weapons := AvailableWeaponList ( k ) ;
78161: LD_ADDR_VAR 0 9
78165: PUSH
78166: LD_VAR 0 6
78170: PPUSH
78171: CALL_OW 478
78175: ST_TO_ADDR
// if not weapons then
78176: LD_VAR 0 9
78180: NOT
78181: IFFALSE 78185
// continue ;
78183: GO 78158
// if weapon in weapons then
78185: LD_VAR 0 8
78189: PUSH
78190: LD_VAR 0 9
78194: IN
78195: IFFALSE 78222
// begin result := [ i , weapon ] ;
78197: LD_ADDR_VAR 0 3
78201: PUSH
78202: LD_VAR 0 4
78206: PUSH
78207: LD_VAR 0 8
78211: PUSH
78212: EMPTY
78213: LIST
78214: LIST
78215: ST_TO_ADDR
// exit ;
78216: POP
78217: POP
78218: POP
78219: POP
78220: GO 78230
// end ; end ;
78222: GO 78158
78224: POP
78225: POP
// end ;
78226: GO 78044
78228: POP
78229: POP
// end ;
78230: LD_VAR 0 3
78234: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78235: LD_INT 0
78237: PPUSH
// if not side or side > 8 then
78238: LD_VAR 0 3
78242: NOT
78243: IFTRUE 78255
78245: PUSH
78246: LD_VAR 0 3
78250: PUSH
78251: LD_INT 8
78253: GREATER
78254: OR
78255: IFFALSE 78259
// exit ;
78257: GO 78318
// if not range then
78259: LD_VAR 0 4
78263: NOT
78264: IFFALSE 78275
// range := - 12 ;
78266: LD_ADDR_VAR 0 4
78270: PUSH
78271: LD_INT 12
78273: NEG
78274: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78275: LD_VAR 0 1
78279: PPUSH
78280: LD_VAR 0 2
78284: PPUSH
78285: LD_VAR 0 3
78289: PPUSH
78290: LD_VAR 0 4
78294: PPUSH
78295: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78299: LD_VAR 0 1
78303: PPUSH
78304: LD_VAR 0 2
78308: PPUSH
78309: LD_VAR 0 3
78313: PPUSH
78314: CALL_OW 331
// end ;
78318: LD_VAR 0 5
78322: RET
// export function Video ( mode ) ; begin
78323: LD_INT 0
78325: PPUSH
// ingame_video = mode ;
78326: LD_ADDR_OWVAR 52
78330: PUSH
78331: LD_VAR 0 1
78335: ST_TO_ADDR
// interface_hidden = mode ;
78336: LD_ADDR_OWVAR 54
78340: PUSH
78341: LD_VAR 0 1
78345: ST_TO_ADDR
// end ;
78346: LD_VAR 0 2
78350: RET
// export function Join ( array , element ) ; begin
78351: LD_INT 0
78353: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78354: LD_ADDR_VAR 0 3
78358: PUSH
78359: LD_VAR 0 1
78363: PPUSH
78364: LD_VAR 0 1
78368: PUSH
78369: LD_INT 1
78371: PLUS
78372: PPUSH
78373: LD_VAR 0 2
78377: PPUSH
78378: CALL_OW 1
78382: ST_TO_ADDR
// end ;
78383: LD_VAR 0 3
78387: RET
// export function JoinUnion ( array , element ) ; begin
78388: LD_INT 0
78390: PPUSH
// result := array union element ;
78391: LD_ADDR_VAR 0 3
78395: PUSH
78396: LD_VAR 0 1
78400: PUSH
78401: LD_VAR 0 2
78405: UNION
78406: ST_TO_ADDR
// end ;
78407: LD_VAR 0 3
78411: RET
// export function GetBehemoths ( side ) ; begin
78412: LD_INT 0
78414: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78415: LD_ADDR_VAR 0 2
78419: PUSH
78420: LD_INT 22
78422: PUSH
78423: LD_VAR 0 1
78427: PUSH
78428: EMPTY
78429: LIST
78430: LIST
78431: PUSH
78432: LD_INT 31
78434: PUSH
78435: LD_INT 25
78437: PUSH
78438: EMPTY
78439: LIST
78440: LIST
78441: PUSH
78442: EMPTY
78443: LIST
78444: LIST
78445: PPUSH
78446: CALL_OW 69
78450: ST_TO_ADDR
// end ;
78451: LD_VAR 0 2
78455: RET
// export function Shuffle ( array ) ; var i , index ; begin
78456: LD_INT 0
78458: PPUSH
78459: PPUSH
78460: PPUSH
// result := [ ] ;
78461: LD_ADDR_VAR 0 2
78465: PUSH
78466: EMPTY
78467: ST_TO_ADDR
// if not array then
78468: LD_VAR 0 1
78472: NOT
78473: IFFALSE 78477
// exit ;
78475: GO 78576
// Randomize ;
78477: CALL_OW 10
// for i = array downto 1 do
78481: LD_ADDR_VAR 0 3
78485: PUSH
78486: DOUBLE
78487: LD_VAR 0 1
78491: INC
78492: ST_TO_ADDR
78493: LD_INT 1
78495: PUSH
78496: FOR_DOWNTO
78497: IFFALSE 78574
// begin index := rand ( 1 , array ) ;
78499: LD_ADDR_VAR 0 4
78503: PUSH
78504: LD_INT 1
78506: PPUSH
78507: LD_VAR 0 1
78511: PPUSH
78512: CALL_OW 12
78516: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78517: LD_ADDR_VAR 0 2
78521: PUSH
78522: LD_VAR 0 2
78526: PPUSH
78527: LD_VAR 0 2
78531: PUSH
78532: LD_INT 1
78534: PLUS
78535: PPUSH
78536: LD_VAR 0 1
78540: PUSH
78541: LD_VAR 0 4
78545: ARRAY
78546: PPUSH
78547: CALL_OW 2
78551: ST_TO_ADDR
// array := Delete ( array , index ) ;
78552: LD_ADDR_VAR 0 1
78556: PUSH
78557: LD_VAR 0 1
78561: PPUSH
78562: LD_VAR 0 4
78566: PPUSH
78567: CALL_OW 3
78571: ST_TO_ADDR
// end ;
78572: GO 78496
78574: POP
78575: POP
// end ;
78576: LD_VAR 0 2
78580: RET
// export function GetBaseMaterials ( base ) ; begin
78581: LD_INT 0
78583: PPUSH
// result := [ 0 , 0 , 0 ] ;
78584: LD_ADDR_VAR 0 2
78588: PUSH
78589: LD_INT 0
78591: PUSH
78592: LD_INT 0
78594: PUSH
78595: LD_INT 0
78597: PUSH
78598: EMPTY
78599: LIST
78600: LIST
78601: LIST
78602: ST_TO_ADDR
// if not base then
78603: LD_VAR 0 1
78607: NOT
78608: IFFALSE 78612
// exit ;
78610: GO 78661
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78612: LD_ADDR_VAR 0 2
78616: PUSH
78617: LD_VAR 0 1
78621: PPUSH
78622: LD_INT 1
78624: PPUSH
78625: CALL_OW 275
78629: PUSH
78630: LD_VAR 0 1
78634: PPUSH
78635: LD_INT 2
78637: PPUSH
78638: CALL_OW 275
78642: PUSH
78643: LD_VAR 0 1
78647: PPUSH
78648: LD_INT 3
78650: PPUSH
78651: CALL_OW 275
78655: PUSH
78656: EMPTY
78657: LIST
78658: LIST
78659: LIST
78660: ST_TO_ADDR
// end ;
78661: LD_VAR 0 2
78665: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78666: LD_INT 0
78668: PPUSH
78669: PPUSH
// result := array ;
78670: LD_ADDR_VAR 0 3
78674: PUSH
78675: LD_VAR 0 1
78679: ST_TO_ADDR
// if size >= result then
78680: LD_VAR 0 2
78684: PUSH
78685: LD_VAR 0 3
78689: GREATEREQUAL
78690: IFFALSE 78694
// exit ;
78692: GO 78744
// if size then
78694: LD_VAR 0 2
78698: IFFALSE 78744
// for i := array downto size do
78700: LD_ADDR_VAR 0 4
78704: PUSH
78705: DOUBLE
78706: LD_VAR 0 1
78710: INC
78711: ST_TO_ADDR
78712: LD_VAR 0 2
78716: PUSH
78717: FOR_DOWNTO
78718: IFFALSE 78742
// result := Delete ( result , result ) ;
78720: LD_ADDR_VAR 0 3
78724: PUSH
78725: LD_VAR 0 3
78729: PPUSH
78730: LD_VAR 0 3
78734: PPUSH
78735: CALL_OW 3
78739: ST_TO_ADDR
78740: GO 78717
78742: POP
78743: POP
// end ;
78744: LD_VAR 0 3
78748: RET
// export function ComExit ( unit ) ; var tmp ; begin
78749: LD_INT 0
78751: PPUSH
78752: PPUSH
// if not IsInUnit ( unit ) then
78753: LD_VAR 0 1
78757: PPUSH
78758: CALL_OW 310
78762: NOT
78763: IFFALSE 78767
// exit ;
78765: GO 78827
// tmp := IsInUnit ( unit ) ;
78767: LD_ADDR_VAR 0 3
78771: PUSH
78772: LD_VAR 0 1
78776: PPUSH
78777: CALL_OW 310
78781: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78782: LD_VAR 0 3
78786: PPUSH
78787: CALL_OW 247
78791: PUSH
78792: LD_INT 2
78794: EQUAL
78795: IFFALSE 78808
// ComExitVehicle ( unit ) else
78797: LD_VAR 0 1
78801: PPUSH
78802: CALL_OW 121
78806: GO 78817
// ComExitBuilding ( unit ) ;
78808: LD_VAR 0 1
78812: PPUSH
78813: CALL_OW 122
// result := tmp ;
78817: LD_ADDR_VAR 0 2
78821: PUSH
78822: LD_VAR 0 3
78826: ST_TO_ADDR
// end ;
78827: LD_VAR 0 2
78831: RET
// export function ComExitAll ( units ) ; var i ; begin
78832: LD_INT 0
78834: PPUSH
78835: PPUSH
// if not units then
78836: LD_VAR 0 1
78840: NOT
78841: IFFALSE 78845
// exit ;
78843: GO 78871
// for i in units do
78845: LD_ADDR_VAR 0 3
78849: PUSH
78850: LD_VAR 0 1
78854: PUSH
78855: FOR_IN
78856: IFFALSE 78869
// ComExit ( i ) ;
78858: LD_VAR 0 3
78862: PPUSH
78863: CALL 78749 0 1
78867: GO 78855
78869: POP
78870: POP
// end ;
78871: LD_VAR 0 2
78875: RET
// export function ResetHc ; begin
78876: LD_INT 0
78878: PPUSH
// InitHc ;
78879: CALL_OW 19
// hc_importance := 0 ;
78883: LD_ADDR_OWVAR 32
78887: PUSH
78888: LD_INT 0
78890: ST_TO_ADDR
// end ;
78891: LD_VAR 0 1
78895: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78896: LD_INT 0
78898: PPUSH
78899: PPUSH
78900: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78901: LD_ADDR_VAR 0 6
78905: PUSH
78906: LD_VAR 0 1
78910: PUSH
78911: LD_VAR 0 3
78915: PLUS
78916: PUSH
78917: LD_INT 2
78919: DIV
78920: ST_TO_ADDR
// if _x < 0 then
78921: LD_VAR 0 6
78925: PUSH
78926: LD_INT 0
78928: LESS
78929: IFFALSE 78946
// _x := _x * - 1 ;
78931: LD_ADDR_VAR 0 6
78935: PUSH
78936: LD_VAR 0 6
78940: PUSH
78941: LD_INT 1
78943: NEG
78944: MUL
78945: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78946: LD_ADDR_VAR 0 7
78950: PUSH
78951: LD_VAR 0 2
78955: PUSH
78956: LD_VAR 0 4
78960: PLUS
78961: PUSH
78962: LD_INT 2
78964: DIV
78965: ST_TO_ADDR
// if _y < 0 then
78966: LD_VAR 0 7
78970: PUSH
78971: LD_INT 0
78973: LESS
78974: IFFALSE 78991
// _y := _y * - 1 ;
78976: LD_ADDR_VAR 0 7
78980: PUSH
78981: LD_VAR 0 7
78985: PUSH
78986: LD_INT 1
78988: NEG
78989: MUL
78990: ST_TO_ADDR
// result := [ _x , _y ] ;
78991: LD_ADDR_VAR 0 5
78995: PUSH
78996: LD_VAR 0 6
79000: PUSH
79001: LD_VAR 0 7
79005: PUSH
79006: EMPTY
79007: LIST
79008: LIST
79009: ST_TO_ADDR
// end ;
79010: LD_VAR 0 5
79014: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79015: LD_INT 0
79017: PPUSH
79018: PPUSH
79019: PPUSH
79020: PPUSH
// task := GetTaskList ( unit ) ;
79021: LD_ADDR_VAR 0 7
79025: PUSH
79026: LD_VAR 0 1
79030: PPUSH
79031: CALL_OW 437
79035: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79036: LD_VAR 0 7
79040: NOT
79041: IFFALSE 79060
79043: PUSH
79044: LD_VAR 0 1
79048: PPUSH
79049: LD_VAR 0 2
79053: PPUSH
79054: CALL_OW 308
79058: NOT
79059: AND
79060: IFFALSE 79064
// exit ;
79062: GO 79182
// if IsInArea ( unit , area ) then
79064: LD_VAR 0 1
79068: PPUSH
79069: LD_VAR 0 2
79073: PPUSH
79074: CALL_OW 308
79078: IFFALSE 79096
// begin ComMoveToArea ( unit , goAway ) ;
79080: LD_VAR 0 1
79084: PPUSH
79085: LD_VAR 0 3
79089: PPUSH
79090: CALL_OW 113
// exit ;
79094: GO 79182
// end ; if task [ 1 ] [ 1 ] <> M then
79096: LD_VAR 0 7
79100: PUSH
79101: LD_INT 1
79103: ARRAY
79104: PUSH
79105: LD_INT 1
79107: ARRAY
79108: PUSH
79109: LD_STRING M
79111: NONEQUAL
79112: IFFALSE 79116
// exit ;
79114: GO 79182
// x := task [ 1 ] [ 2 ] ;
79116: LD_ADDR_VAR 0 5
79120: PUSH
79121: LD_VAR 0 7
79125: PUSH
79126: LD_INT 1
79128: ARRAY
79129: PUSH
79130: LD_INT 2
79132: ARRAY
79133: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79134: LD_ADDR_VAR 0 6
79138: PUSH
79139: LD_VAR 0 7
79143: PUSH
79144: LD_INT 1
79146: ARRAY
79147: PUSH
79148: LD_INT 3
79150: ARRAY
79151: ST_TO_ADDR
// if InArea ( x , y , area ) then
79152: LD_VAR 0 5
79156: PPUSH
79157: LD_VAR 0 6
79161: PPUSH
79162: LD_VAR 0 2
79166: PPUSH
79167: CALL_OW 309
79171: IFFALSE 79182
// ComStop ( unit ) ;
79173: LD_VAR 0 1
79177: PPUSH
79178: CALL_OW 141
// end ;
79182: LD_VAR 0 4
79186: RET
// export function Abs ( value ) ; begin
79187: LD_INT 0
79189: PPUSH
// result := value ;
79190: LD_ADDR_VAR 0 2
79194: PUSH
79195: LD_VAR 0 1
79199: ST_TO_ADDR
// if value < 0 then
79200: LD_VAR 0 1
79204: PUSH
79205: LD_INT 0
79207: LESS
79208: IFFALSE 79225
// result := value * - 1 ;
79210: LD_ADDR_VAR 0 2
79214: PUSH
79215: LD_VAR 0 1
79219: PUSH
79220: LD_INT 1
79222: NEG
79223: MUL
79224: ST_TO_ADDR
// end ;
79225: LD_VAR 0 2
79229: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79230: LD_INT 0
79232: PPUSH
79233: PPUSH
79234: PPUSH
79235: PPUSH
79236: PPUSH
79237: PPUSH
79238: PPUSH
79239: PPUSH
// if not unit or not building then
79240: LD_VAR 0 1
79244: NOT
79245: IFTRUE 79254
79247: PUSH
79248: LD_VAR 0 2
79252: NOT
79253: OR
79254: IFFALSE 79258
// exit ;
79256: GO 79486
// x := GetX ( building ) ;
79258: LD_ADDR_VAR 0 4
79262: PUSH
79263: LD_VAR 0 2
79267: PPUSH
79268: CALL_OW 250
79272: ST_TO_ADDR
// y := GetY ( building ) ;
79273: LD_ADDR_VAR 0 6
79277: PUSH
79278: LD_VAR 0 2
79282: PPUSH
79283: CALL_OW 251
79287: ST_TO_ADDR
// d := GetDir ( building ) ;
79288: LD_ADDR_VAR 0 8
79292: PUSH
79293: LD_VAR 0 2
79297: PPUSH
79298: CALL_OW 254
79302: ST_TO_ADDR
// r := 4 ;
79303: LD_ADDR_VAR 0 9
79307: PUSH
79308: LD_INT 4
79310: ST_TO_ADDR
// for i := 1 to 5 do
79311: LD_ADDR_VAR 0 10
79315: PUSH
79316: DOUBLE
79317: LD_INT 1
79319: DEC
79320: ST_TO_ADDR
79321: LD_INT 5
79323: PUSH
79324: FOR_TO
79325: IFFALSE 79484
// begin _x := ShiftX ( x , d , r + i ) ;
79327: LD_ADDR_VAR 0 5
79331: PUSH
79332: LD_VAR 0 4
79336: PPUSH
79337: LD_VAR 0 8
79341: PPUSH
79342: LD_VAR 0 9
79346: PUSH
79347: LD_VAR 0 10
79351: PLUS
79352: PPUSH
79353: CALL_OW 272
79357: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79358: LD_ADDR_VAR 0 7
79362: PUSH
79363: LD_VAR 0 6
79367: PPUSH
79368: LD_VAR 0 8
79372: PPUSH
79373: LD_VAR 0 9
79377: PUSH
79378: LD_VAR 0 10
79382: PLUS
79383: PPUSH
79384: CALL_OW 273
79388: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79389: LD_VAR 0 5
79393: PPUSH
79394: LD_VAR 0 7
79398: PPUSH
79399: CALL_OW 488
79403: IFFALSE 79438
79405: PUSH
79406: LD_VAR 0 5
79410: PPUSH
79411: LD_VAR 0 7
79415: PPUSH
79416: CALL_OW 428
79420: PPUSH
79421: CALL_OW 247
79425: PUSH
79426: LD_INT 3
79428: PUSH
79429: LD_INT 2
79431: PUSH
79432: EMPTY
79433: LIST
79434: LIST
79435: IN
79436: NOT
79437: AND
79438: IFFALSE 79482
// begin ComMoveXY ( unit , _x , _y ) ;
79440: LD_VAR 0 1
79444: PPUSH
79445: LD_VAR 0 5
79449: PPUSH
79450: LD_VAR 0 7
79454: PPUSH
79455: CALL_OW 111
// result := [ _x , _y ] ;
79459: LD_ADDR_VAR 0 3
79463: PUSH
79464: LD_VAR 0 5
79468: PUSH
79469: LD_VAR 0 7
79473: PUSH
79474: EMPTY
79475: LIST
79476: LIST
79477: ST_TO_ADDR
// exit ;
79478: POP
79479: POP
79480: GO 79486
// end ; end ;
79482: GO 79324
79484: POP
79485: POP
// end ;
79486: LD_VAR 0 3
79490: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79491: LD_INT 0
79493: PPUSH
79494: PPUSH
79495: PPUSH
// result := 0 ;
79496: LD_ADDR_VAR 0 3
79500: PUSH
79501: LD_INT 0
79503: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79504: LD_VAR 0 1
79508: PUSH
79509: LD_INT 0
79511: LESS
79512: IFTRUE 79524
79514: PUSH
79515: LD_VAR 0 1
79519: PUSH
79520: LD_INT 8
79522: GREATER
79523: OR
79524: IFTRUE 79536
79526: PUSH
79527: LD_VAR 0 2
79531: PUSH
79532: LD_INT 0
79534: LESS
79535: OR
79536: IFTRUE 79548
79538: PUSH
79539: LD_VAR 0 2
79543: PUSH
79544: LD_INT 8
79546: GREATER
79547: OR
79548: IFFALSE 79552
// exit ;
79550: GO 79627
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79552: LD_ADDR_VAR 0 4
79556: PUSH
79557: LD_INT 22
79559: PUSH
79560: LD_VAR 0 2
79564: PUSH
79565: EMPTY
79566: LIST
79567: LIST
79568: PPUSH
79569: CALL_OW 69
79573: PUSH
79574: FOR_IN
79575: IFFALSE 79625
// begin un := UnitShoot ( i ) ;
79577: LD_ADDR_VAR 0 5
79581: PUSH
79582: LD_VAR 0 4
79586: PPUSH
79587: CALL_OW 504
79591: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79592: LD_VAR 0 5
79596: PPUSH
79597: CALL_OW 255
79601: PUSH
79602: LD_VAR 0 1
79606: EQUAL
79607: IFFALSE 79623
// begin result := un ;
79609: LD_ADDR_VAR 0 3
79613: PUSH
79614: LD_VAR 0 5
79618: ST_TO_ADDR
// exit ;
79619: POP
79620: POP
79621: GO 79627
// end ; end ;
79623: GO 79574
79625: POP
79626: POP
// end ;
79627: LD_VAR 0 3
79631: RET
// export function GetCargoBay ( units ) ; begin
79632: LD_INT 0
79634: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79635: LD_ADDR_VAR 0 2
79639: PUSH
79640: LD_VAR 0 1
79644: PPUSH
79645: LD_INT 2
79647: PUSH
79648: LD_INT 34
79650: PUSH
79651: LD_INT 12
79653: PUSH
79654: EMPTY
79655: LIST
79656: LIST
79657: PUSH
79658: LD_INT 34
79660: PUSH
79661: LD_INT 51
79663: PUSH
79664: EMPTY
79665: LIST
79666: LIST
79667: PUSH
79668: LD_INT 34
79670: PUSH
79671: LD_INT 32
79673: PUSH
79674: EMPTY
79675: LIST
79676: LIST
79677: PUSH
79678: LD_INT 34
79680: PUSH
79681: LD_INT 89
79683: PUSH
79684: EMPTY
79685: LIST
79686: LIST
79687: PUSH
79688: EMPTY
79689: LIST
79690: LIST
79691: LIST
79692: LIST
79693: LIST
79694: PPUSH
79695: CALL_OW 72
79699: ST_TO_ADDR
// end ;
79700: LD_VAR 0 2
79704: RET
// export function Negate ( value ) ; begin
79705: LD_INT 0
79707: PPUSH
// result := not value ;
79708: LD_ADDR_VAR 0 2
79712: PUSH
79713: LD_VAR 0 1
79717: NOT
79718: ST_TO_ADDR
// end ;
79719: LD_VAR 0 2
79723: RET
// export function Inc ( value ) ; begin
79724: LD_INT 0
79726: PPUSH
// result := value + 1 ;
79727: LD_ADDR_VAR 0 2
79731: PUSH
79732: LD_VAR 0 1
79736: PUSH
79737: LD_INT 1
79739: PLUS
79740: ST_TO_ADDR
// end ;
79741: LD_VAR 0 2
79745: RET
// export function Dec ( value ) ; begin
79746: LD_INT 0
79748: PPUSH
// result := value - 1 ;
79749: LD_ADDR_VAR 0 2
79753: PUSH
79754: LD_VAR 0 1
79758: PUSH
79759: LD_INT 1
79761: MINUS
79762: ST_TO_ADDR
// end ;
79763: LD_VAR 0 2
79767: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79768: LD_INT 0
79770: PPUSH
79771: PPUSH
79772: PPUSH
79773: PPUSH
79774: PPUSH
79775: PPUSH
79776: PPUSH
79777: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79778: LD_VAR 0 1
79782: PPUSH
79783: LD_VAR 0 2
79787: PPUSH
79788: CALL_OW 488
79792: NOT
79793: IFTRUE 79812
79795: PUSH
79796: LD_VAR 0 3
79800: PPUSH
79801: LD_VAR 0 4
79805: PPUSH
79806: CALL_OW 488
79810: NOT
79811: OR
79812: IFFALSE 79825
// begin result := - 1 ;
79814: LD_ADDR_VAR 0 5
79818: PUSH
79819: LD_INT 1
79821: NEG
79822: ST_TO_ADDR
// exit ;
79823: GO 80060
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79825: LD_ADDR_VAR 0 12
79829: PUSH
79830: LD_VAR 0 1
79834: PPUSH
79835: LD_VAR 0 2
79839: PPUSH
79840: LD_VAR 0 3
79844: PPUSH
79845: LD_VAR 0 4
79849: PPUSH
79850: CALL 78896 0 4
79854: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79855: LD_ADDR_VAR 0 11
79859: PUSH
79860: LD_VAR 0 1
79864: PPUSH
79865: LD_VAR 0 2
79869: PPUSH
79870: LD_VAR 0 12
79874: PUSH
79875: LD_INT 1
79877: ARRAY
79878: PPUSH
79879: LD_VAR 0 12
79883: PUSH
79884: LD_INT 2
79886: ARRAY
79887: PPUSH
79888: CALL_OW 298
79892: ST_TO_ADDR
// distance := 9999 ;
79893: LD_ADDR_VAR 0 10
79897: PUSH
79898: LD_INT 9999
79900: ST_TO_ADDR
// for i := 0 to 5 do
79901: LD_ADDR_VAR 0 6
79905: PUSH
79906: DOUBLE
79907: LD_INT 0
79909: DEC
79910: ST_TO_ADDR
79911: LD_INT 5
79913: PUSH
79914: FOR_TO
79915: IFFALSE 80058
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79917: LD_ADDR_VAR 0 7
79921: PUSH
79922: LD_VAR 0 1
79926: PPUSH
79927: LD_VAR 0 6
79931: PPUSH
79932: LD_VAR 0 11
79936: PPUSH
79937: CALL_OW 272
79941: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79942: LD_ADDR_VAR 0 8
79946: PUSH
79947: LD_VAR 0 2
79951: PPUSH
79952: LD_VAR 0 6
79956: PPUSH
79957: LD_VAR 0 11
79961: PPUSH
79962: CALL_OW 273
79966: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79967: LD_VAR 0 7
79971: PPUSH
79972: LD_VAR 0 8
79976: PPUSH
79977: CALL_OW 488
79981: NOT
79982: IFFALSE 79986
// continue ;
79984: GO 79914
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
79986: LD_ADDR_VAR 0 9
79990: PUSH
79991: LD_VAR 0 12
79995: PUSH
79996: LD_INT 1
79998: ARRAY
79999: PPUSH
80000: LD_VAR 0 12
80004: PUSH
80005: LD_INT 2
80007: ARRAY
80008: PPUSH
80009: LD_VAR 0 7
80013: PPUSH
80014: LD_VAR 0 8
80018: PPUSH
80019: CALL_OW 298
80023: ST_TO_ADDR
// if tmp < distance then
80024: LD_VAR 0 9
80028: PUSH
80029: LD_VAR 0 10
80033: LESS
80034: IFFALSE 80056
// begin result := i ;
80036: LD_ADDR_VAR 0 5
80040: PUSH
80041: LD_VAR 0 6
80045: ST_TO_ADDR
// distance := tmp ;
80046: LD_ADDR_VAR 0 10
80050: PUSH
80051: LD_VAR 0 9
80055: ST_TO_ADDR
// end ; end ;
80056: GO 79914
80058: POP
80059: POP
// end ;
80060: LD_VAR 0 5
80064: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80065: LD_INT 0
80067: PPUSH
80068: PPUSH
// if not driver or not IsInUnit ( driver ) then
80069: LD_VAR 0 1
80073: NOT
80074: IFTRUE 80088
80076: PUSH
80077: LD_VAR 0 1
80081: PPUSH
80082: CALL_OW 310
80086: NOT
80087: OR
80088: IFFALSE 80092
// exit ;
80090: GO 80182
// vehicle := IsInUnit ( driver ) ;
80092: LD_ADDR_VAR 0 3
80096: PUSH
80097: LD_VAR 0 1
80101: PPUSH
80102: CALL_OW 310
80106: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80107: LD_VAR 0 1
80111: PPUSH
80112: LD_STRING \
80114: PUSH
80115: LD_INT 0
80117: PUSH
80118: LD_INT 0
80120: PUSH
80121: LD_INT 0
80123: PUSH
80124: LD_INT 0
80126: PUSH
80127: LD_INT 0
80129: PUSH
80130: LD_INT 0
80132: PUSH
80133: EMPTY
80134: LIST
80135: LIST
80136: LIST
80137: LIST
80138: LIST
80139: LIST
80140: LIST
80141: PUSH
80142: LD_STRING E
80144: PUSH
80145: LD_INT 0
80147: PUSH
80148: LD_INT 0
80150: PUSH
80151: LD_VAR 0 3
80155: PUSH
80156: LD_INT 0
80158: PUSH
80159: LD_INT 0
80161: PUSH
80162: LD_INT 0
80164: PUSH
80165: EMPTY
80166: LIST
80167: LIST
80168: LIST
80169: LIST
80170: LIST
80171: LIST
80172: LIST
80173: PUSH
80174: EMPTY
80175: LIST
80176: LIST
80177: PPUSH
80178: CALL_OW 446
// end ;
80182: LD_VAR 0 2
80186: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80187: LD_INT 0
80189: PPUSH
80190: PPUSH
// if not driver or not IsInUnit ( driver ) then
80191: LD_VAR 0 1
80195: NOT
80196: IFTRUE 80210
80198: PUSH
80199: LD_VAR 0 1
80203: PPUSH
80204: CALL_OW 310
80208: NOT
80209: OR
80210: IFFALSE 80214
// exit ;
80212: GO 80304
// vehicle := IsInUnit ( driver ) ;
80214: LD_ADDR_VAR 0 3
80218: PUSH
80219: LD_VAR 0 1
80223: PPUSH
80224: CALL_OW 310
80228: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80229: LD_VAR 0 1
80233: PPUSH
80234: LD_STRING \
80236: PUSH
80237: LD_INT 0
80239: PUSH
80240: LD_INT 0
80242: PUSH
80243: LD_INT 0
80245: PUSH
80246: LD_INT 0
80248: PUSH
80249: LD_INT 0
80251: PUSH
80252: LD_INT 0
80254: PUSH
80255: EMPTY
80256: LIST
80257: LIST
80258: LIST
80259: LIST
80260: LIST
80261: LIST
80262: LIST
80263: PUSH
80264: LD_STRING E
80266: PUSH
80267: LD_INT 0
80269: PUSH
80270: LD_INT 0
80272: PUSH
80273: LD_VAR 0 3
80277: PUSH
80278: LD_INT 0
80280: PUSH
80281: LD_INT 0
80283: PUSH
80284: LD_INT 0
80286: PUSH
80287: EMPTY
80288: LIST
80289: LIST
80290: LIST
80291: LIST
80292: LIST
80293: LIST
80294: LIST
80295: PUSH
80296: EMPTY
80297: LIST
80298: LIST
80299: PPUSH
80300: CALL_OW 447
// end ;
80304: LD_VAR 0 2
80308: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80309: LD_INT 0
80311: PPUSH
80312: PPUSH
80313: PPUSH
// tmp := [ ] ;
80314: LD_ADDR_VAR 0 5
80318: PUSH
80319: EMPTY
80320: ST_TO_ADDR
// for i in units do
80321: LD_ADDR_VAR 0 4
80325: PUSH
80326: LD_VAR 0 1
80330: PUSH
80331: FOR_IN
80332: IFFALSE 80370
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80334: LD_ADDR_VAR 0 5
80338: PUSH
80339: LD_VAR 0 5
80343: PPUSH
80344: LD_VAR 0 5
80348: PUSH
80349: LD_INT 1
80351: PLUS
80352: PPUSH
80353: LD_VAR 0 4
80357: PPUSH
80358: CALL_OW 256
80362: PPUSH
80363: CALL_OW 2
80367: ST_TO_ADDR
80368: GO 80331
80370: POP
80371: POP
// if not tmp then
80372: LD_VAR 0 5
80376: NOT
80377: IFFALSE 80381
// exit ;
80379: GO 80429
// if asc then
80381: LD_VAR 0 2
80385: IFFALSE 80409
// result := SortListByListAsc ( units , tmp ) else
80387: LD_ADDR_VAR 0 3
80391: PUSH
80392: LD_VAR 0 1
80396: PPUSH
80397: LD_VAR 0 5
80401: PPUSH
80402: CALL_OW 76
80406: ST_TO_ADDR
80407: GO 80429
// result := SortListByListDesc ( units , tmp ) ;
80409: LD_ADDR_VAR 0 3
80413: PUSH
80414: LD_VAR 0 1
80418: PPUSH
80419: LD_VAR 0 5
80423: PPUSH
80424: CALL_OW 77
80428: ST_TO_ADDR
// end ;
80429: LD_VAR 0 3
80433: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80434: LD_INT 0
80436: PPUSH
80437: PPUSH
// task := GetTaskList ( mech ) ;
80438: LD_ADDR_VAR 0 4
80442: PUSH
80443: LD_VAR 0 1
80447: PPUSH
80448: CALL_OW 437
80452: ST_TO_ADDR
// if not task then
80453: LD_VAR 0 4
80457: NOT
80458: IFFALSE 80462
// exit ;
80460: GO 80506
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80462: LD_ADDR_VAR 0 3
80466: PUSH
80467: LD_VAR 0 4
80471: PUSH
80472: LD_INT 1
80474: ARRAY
80475: PUSH
80476: LD_INT 1
80478: ARRAY
80479: PUSH
80480: LD_STRING r
80482: EQUAL
80483: IFFALSE 80505
80485: PUSH
80486: LD_VAR 0 4
80490: PUSH
80491: LD_INT 1
80493: ARRAY
80494: PUSH
80495: LD_INT 4
80497: ARRAY
80498: PUSH
80499: LD_VAR 0 2
80503: EQUAL
80504: AND
80505: ST_TO_ADDR
// end ;
80506: LD_VAR 0 3
80510: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80511: LD_INT 0
80513: PPUSH
// SetDir ( unit , d ) ;
80514: LD_VAR 0 1
80518: PPUSH
80519: LD_VAR 0 4
80523: PPUSH
80524: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
80528: LD_ADDR_VAR 0 6
80532: PUSH
80533: LD_VAR 0 1
80537: PPUSH
80538: LD_VAR 0 2
80542: PPUSH
80543: LD_VAR 0 3
80547: PPUSH
80548: LD_VAR 0 5
80552: PPUSH
80553: CALL_OW 48
80557: ST_TO_ADDR
// end ;
80558: LD_VAR 0 6
80562: RET
// export function ToNaturalNumber ( number ) ; begin
80563: LD_INT 0
80565: PPUSH
// result := number div 1 ;
80566: LD_ADDR_VAR 0 2
80570: PUSH
80571: LD_VAR 0 1
80575: PUSH
80576: LD_INT 1
80578: DIV
80579: ST_TO_ADDR
// if number < 0 then
80580: LD_VAR 0 1
80584: PUSH
80585: LD_INT 0
80587: LESS
80588: IFFALSE 80598
// result := 0 ;
80590: LD_ADDR_VAR 0 2
80594: PUSH
80595: LD_INT 0
80597: ST_TO_ADDR
// end ;
80598: LD_VAR 0 2
80602: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
80603: LD_INT 0
80605: PPUSH
80606: PPUSH
80607: PPUSH
// if not buildings then
80608: LD_VAR 0 1
80612: NOT
80613: IFFALSE 80617
// exit ;
80615: GO 80732
// tmp := [ ] ;
80617: LD_ADDR_VAR 0 5
80621: PUSH
80622: EMPTY
80623: ST_TO_ADDR
// for b in buildings do
80624: LD_ADDR_VAR 0 4
80628: PUSH
80629: LD_VAR 0 1
80633: PUSH
80634: FOR_IN
80635: IFFALSE 80673
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
80637: LD_ADDR_VAR 0 5
80641: PUSH
80642: LD_VAR 0 5
80646: PPUSH
80647: LD_VAR 0 5
80651: PUSH
80652: LD_INT 1
80654: PLUS
80655: PPUSH
80656: LD_VAR 0 4
80660: PPUSH
80661: CALL_OW 266
80665: PPUSH
80666: CALL_OW 1
80670: ST_TO_ADDR
80671: GO 80634
80673: POP
80674: POP
// if not tmp then
80675: LD_VAR 0 5
80679: NOT
80680: IFFALSE 80684
// exit ;
80682: GO 80732
// if asc then
80684: LD_VAR 0 2
80688: IFFALSE 80712
// result := SortListByListAsc ( buildings , tmp ) else
80690: LD_ADDR_VAR 0 3
80694: PUSH
80695: LD_VAR 0 1
80699: PPUSH
80700: LD_VAR 0 5
80704: PPUSH
80705: CALL_OW 76
80709: ST_TO_ADDR
80710: GO 80732
// result := SortListByListDesc ( buildings , tmp ) ;
80712: LD_ADDR_VAR 0 3
80716: PUSH
80717: LD_VAR 0 1
80721: PPUSH
80722: LD_VAR 0 5
80726: PPUSH
80727: CALL_OW 77
80731: ST_TO_ADDR
// end ;
80732: LD_VAR 0 3
80736: RET
// export function SortByClass ( units , class ) ; var un ; begin
80737: LD_INT 0
80739: PPUSH
80740: PPUSH
// if not units or not class then
80741: LD_VAR 0 1
80745: NOT
80746: IFTRUE 80755
80748: PUSH
80749: LD_VAR 0 2
80753: NOT
80754: OR
80755: IFFALSE 80759
// exit ;
80757: GO 80854
// result := [ ] ;
80759: LD_ADDR_VAR 0 3
80763: PUSH
80764: EMPTY
80765: ST_TO_ADDR
// for un in units do
80766: LD_ADDR_VAR 0 4
80770: PUSH
80771: LD_VAR 0 1
80775: PUSH
80776: FOR_IN
80777: IFFALSE 80852
// if GetClass ( un ) = class then
80779: LD_VAR 0 4
80783: PPUSH
80784: CALL_OW 257
80788: PUSH
80789: LD_VAR 0 2
80793: EQUAL
80794: IFFALSE 80821
// result := Insert ( result , 1 , un ) else
80796: LD_ADDR_VAR 0 3
80800: PUSH
80801: LD_VAR 0 3
80805: PPUSH
80806: LD_INT 1
80808: PPUSH
80809: LD_VAR 0 4
80813: PPUSH
80814: CALL_OW 2
80818: ST_TO_ADDR
80819: GO 80850
// result := Replace ( result , result + 1 , un ) ;
80821: LD_ADDR_VAR 0 3
80825: PUSH
80826: LD_VAR 0 3
80830: PPUSH
80831: LD_VAR 0 3
80835: PUSH
80836: LD_INT 1
80838: PLUS
80839: PPUSH
80840: LD_VAR 0 4
80844: PPUSH
80845: CALL_OW 1
80849: ST_TO_ADDR
80850: GO 80776
80852: POP
80853: POP
// end ;
80854: LD_VAR 0 3
80858: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80859: LD_INT 0
80861: PPUSH
80862: PPUSH
80863: PPUSH
80864: PPUSH
80865: PPUSH
80866: PPUSH
80867: PPUSH
// result := [ ] ;
80868: LD_ADDR_VAR 0 4
80872: PUSH
80873: EMPTY
80874: ST_TO_ADDR
// if x - r < 0 then
80875: LD_VAR 0 1
80879: PUSH
80880: LD_VAR 0 3
80884: MINUS
80885: PUSH
80886: LD_INT 0
80888: LESS
80889: IFFALSE 80901
// min_x := 0 else
80891: LD_ADDR_VAR 0 8
80895: PUSH
80896: LD_INT 0
80898: ST_TO_ADDR
80899: GO 80917
// min_x := x - r ;
80901: LD_ADDR_VAR 0 8
80905: PUSH
80906: LD_VAR 0 1
80910: PUSH
80911: LD_VAR 0 3
80915: MINUS
80916: ST_TO_ADDR
// if y - r < 0 then
80917: LD_VAR 0 2
80921: PUSH
80922: LD_VAR 0 3
80926: MINUS
80927: PUSH
80928: LD_INT 0
80930: LESS
80931: IFFALSE 80943
// min_y := 0 else
80933: LD_ADDR_VAR 0 7
80937: PUSH
80938: LD_INT 0
80940: ST_TO_ADDR
80941: GO 80959
// min_y := y - r ;
80943: LD_ADDR_VAR 0 7
80947: PUSH
80948: LD_VAR 0 2
80952: PUSH
80953: LD_VAR 0 3
80957: MINUS
80958: ST_TO_ADDR
// max_x := x + r ;
80959: LD_ADDR_VAR 0 9
80963: PUSH
80964: LD_VAR 0 1
80968: PUSH
80969: LD_VAR 0 3
80973: PLUS
80974: ST_TO_ADDR
// max_y := y + r ;
80975: LD_ADDR_VAR 0 10
80979: PUSH
80980: LD_VAR 0 2
80984: PUSH
80985: LD_VAR 0 3
80989: PLUS
80990: ST_TO_ADDR
// for _x = min_x to max_x do
80991: LD_ADDR_VAR 0 5
80995: PUSH
80996: DOUBLE
80997: LD_VAR 0 8
81001: DEC
81002: ST_TO_ADDR
81003: LD_VAR 0 9
81007: PUSH
81008: FOR_TO
81009: IFFALSE 81110
// for _y = min_y to max_y do
81011: LD_ADDR_VAR 0 6
81015: PUSH
81016: DOUBLE
81017: LD_VAR 0 7
81021: DEC
81022: ST_TO_ADDR
81023: LD_VAR 0 10
81027: PUSH
81028: FOR_TO
81029: IFFALSE 81106
// begin if not ValidHex ( _x , _y ) then
81031: LD_VAR 0 5
81035: PPUSH
81036: LD_VAR 0 6
81040: PPUSH
81041: CALL_OW 488
81045: NOT
81046: IFFALSE 81050
// continue ;
81048: GO 81028
// if GetResourceTypeXY ( _x , _y ) then
81050: LD_VAR 0 5
81054: PPUSH
81055: LD_VAR 0 6
81059: PPUSH
81060: CALL_OW 283
81064: IFFALSE 81104
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81066: LD_ADDR_VAR 0 4
81070: PUSH
81071: LD_VAR 0 4
81075: PPUSH
81076: LD_VAR 0 4
81080: PUSH
81081: LD_INT 1
81083: PLUS
81084: PPUSH
81085: LD_VAR 0 5
81089: PUSH
81090: LD_VAR 0 6
81094: PUSH
81095: EMPTY
81096: LIST
81097: LIST
81098: PPUSH
81099: CALL_OW 1
81103: ST_TO_ADDR
// end ;
81104: GO 81028
81106: POP
81107: POP
81108: GO 81008
81110: POP
81111: POP
// end ;
81112: LD_VAR 0 4
81116: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81117: LD_INT 0
81119: PPUSH
81120: PPUSH
81121: PPUSH
81122: PPUSH
81123: PPUSH
81124: PPUSH
81125: PPUSH
81126: PPUSH
// if not units then
81127: LD_VAR 0 1
81131: NOT
81132: IFFALSE 81136
// exit ;
81134: GO 81668
// result := UnitFilter ( units , [ f_ok ] ) ;
81136: LD_ADDR_VAR 0 3
81140: PUSH
81141: LD_VAR 0 1
81145: PPUSH
81146: LD_INT 50
81148: PUSH
81149: EMPTY
81150: LIST
81151: PPUSH
81152: CALL_OW 72
81156: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81157: LD_ADDR_VAR 0 8
81161: PUSH
81162: LD_VAR 0 1
81166: PUSH
81167: LD_INT 1
81169: ARRAY
81170: PPUSH
81171: CALL_OW 255
81175: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81176: LD_ADDR_VAR 0 10
81180: PUSH
81181: LD_INT 29
81183: PUSH
81184: LD_INT 91
81186: PUSH
81187: LD_INT 49
81189: PUSH
81190: EMPTY
81191: LIST
81192: LIST
81193: LIST
81194: ST_TO_ADDR
// if not result then
81195: LD_VAR 0 3
81199: NOT
81200: IFFALSE 81204
// exit ;
81202: GO 81668
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81204: LD_ADDR_VAR 0 5
81208: PUSH
81209: LD_INT 81
81211: PUSH
81212: LD_VAR 0 8
81216: PUSH
81217: EMPTY
81218: LIST
81219: LIST
81220: PPUSH
81221: CALL_OW 69
81225: ST_TO_ADDR
// for i in result do
81226: LD_ADDR_VAR 0 4
81230: PUSH
81231: LD_VAR 0 3
81235: PUSH
81236: FOR_IN
81237: IFFALSE 81666
// begin tag := GetTag ( i ) + 1 ;
81239: LD_ADDR_VAR 0 9
81243: PUSH
81244: LD_VAR 0 4
81248: PPUSH
81249: CALL_OW 110
81253: PUSH
81254: LD_INT 1
81256: PLUS
81257: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
81258: LD_ADDR_VAR 0 7
81262: PUSH
81263: LD_VAR 0 4
81267: PPUSH
81268: CALL_OW 250
81272: PPUSH
81273: LD_VAR 0 4
81277: PPUSH
81278: CALL_OW 251
81282: PPUSH
81283: LD_INT 4
81285: PPUSH
81286: CALL 80859 0 3
81290: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
81291: LD_VAR 0 4
81295: PPUSH
81296: CALL_OW 247
81300: PUSH
81301: LD_INT 2
81303: EQUAL
81304: IFFALSE 81316
81306: PUSH
81307: LD_VAR 0 7
81311: PUSH
81312: LD_INT 2
81314: GREATER
81315: AND
81316: IFFALSE 81336
81318: PUSH
81319: LD_VAR 0 4
81323: PPUSH
81324: CALL_OW 264
81328: PUSH
81329: LD_VAR 0 10
81333: IN
81334: NOT
81335: AND
81336: IFFALSE 81375
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81338: LD_VAR 0 4
81342: PPUSH
81343: LD_VAR 0 7
81347: PUSH
81348: LD_INT 1
81350: ARRAY
81351: PUSH
81352: LD_INT 1
81354: ARRAY
81355: PPUSH
81356: LD_VAR 0 7
81360: PUSH
81361: LD_INT 1
81363: ARRAY
81364: PUSH
81365: LD_INT 2
81367: ARRAY
81368: PPUSH
81369: CALL_OW 116
81373: GO 81664
// if path > tag then
81375: LD_VAR 0 2
81379: PUSH
81380: LD_VAR 0 9
81384: GREATER
81385: IFFALSE 81593
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81387: LD_ADDR_VAR 0 6
81391: PUSH
81392: LD_VAR 0 5
81396: PPUSH
81397: LD_INT 91
81399: PUSH
81400: LD_VAR 0 4
81404: PUSH
81405: LD_INT 8
81407: PUSH
81408: EMPTY
81409: LIST
81410: LIST
81411: LIST
81412: PPUSH
81413: CALL_OW 72
81417: ST_TO_ADDR
// if nearEnemy then
81418: LD_VAR 0 6
81422: IFFALSE 81491
// begin if GetWeapon ( i ) = ru_time_lapser then
81424: LD_VAR 0 4
81428: PPUSH
81429: CALL_OW 264
81433: PUSH
81434: LD_INT 49
81436: EQUAL
81437: IFFALSE 81465
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81439: LD_VAR 0 4
81443: PPUSH
81444: LD_VAR 0 6
81448: PPUSH
81449: LD_VAR 0 4
81453: PPUSH
81454: CALL_OW 74
81458: PPUSH
81459: CALL_OW 112
81463: GO 81489
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81465: LD_VAR 0 4
81469: PPUSH
81470: LD_VAR 0 6
81474: PPUSH
81475: LD_VAR 0 4
81479: PPUSH
81480: CALL_OW 74
81484: PPUSH
81485: CALL 82749 0 2
// end else
81489: GO 81591
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81491: LD_VAR 0 4
81495: PPUSH
81496: LD_VAR 0 2
81500: PUSH
81501: LD_VAR 0 9
81505: ARRAY
81506: PUSH
81507: LD_INT 1
81509: ARRAY
81510: PPUSH
81511: LD_VAR 0 2
81515: PUSH
81516: LD_VAR 0 9
81520: ARRAY
81521: PUSH
81522: LD_INT 2
81524: ARRAY
81525: PPUSH
81526: CALL_OW 297
81530: PUSH
81531: LD_INT 6
81533: GREATER
81534: IFFALSE 81577
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81536: LD_VAR 0 4
81540: PPUSH
81541: LD_VAR 0 2
81545: PUSH
81546: LD_VAR 0 9
81550: ARRAY
81551: PUSH
81552: LD_INT 1
81554: ARRAY
81555: PPUSH
81556: LD_VAR 0 2
81560: PUSH
81561: LD_VAR 0 9
81565: ARRAY
81566: PUSH
81567: LD_INT 2
81569: ARRAY
81570: PPUSH
81571: CALL_OW 114
81575: GO 81591
// SetTag ( i , tag ) ;
81577: LD_VAR 0 4
81581: PPUSH
81582: LD_VAR 0 9
81586: PPUSH
81587: CALL_OW 109
// end else
81591: GO 81664
// if enemy then
81593: LD_VAR 0 5
81597: IFFALSE 81664
// begin if GetWeapon ( i ) = ru_time_lapser then
81599: LD_VAR 0 4
81603: PPUSH
81604: CALL_OW 264
81608: PUSH
81609: LD_INT 49
81611: EQUAL
81612: IFFALSE 81640
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81614: LD_VAR 0 4
81618: PPUSH
81619: LD_VAR 0 5
81623: PPUSH
81624: LD_VAR 0 4
81628: PPUSH
81629: CALL_OW 74
81633: PPUSH
81634: CALL_OW 112
81638: GO 81664
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81640: LD_VAR 0 4
81644: PPUSH
81645: LD_VAR 0 5
81649: PPUSH
81650: LD_VAR 0 4
81654: PPUSH
81655: CALL_OW 74
81659: PPUSH
81660: CALL 82749 0 2
// end ; end ;
81664: GO 81236
81666: POP
81667: POP
// end ;
81668: LD_VAR 0 3
81672: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81673: LD_INT 0
81675: PPUSH
81676: PPUSH
81677: PPUSH
// if not unit or IsInUnit ( unit ) then
81678: LD_VAR 0 1
81682: NOT
81683: IFTRUE 81696
81685: PUSH
81686: LD_VAR 0 1
81690: PPUSH
81691: CALL_OW 310
81695: OR
81696: IFFALSE 81700
// exit ;
81698: GO 81791
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81700: LD_ADDR_VAR 0 4
81704: PUSH
81705: LD_VAR 0 1
81709: PPUSH
81710: CALL_OW 250
81714: PPUSH
81715: LD_VAR 0 2
81719: PPUSH
81720: LD_INT 1
81722: PPUSH
81723: CALL_OW 272
81727: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81728: LD_ADDR_VAR 0 5
81732: PUSH
81733: LD_VAR 0 1
81737: PPUSH
81738: CALL_OW 251
81742: PPUSH
81743: LD_VAR 0 2
81747: PPUSH
81748: LD_INT 1
81750: PPUSH
81751: CALL_OW 273
81755: ST_TO_ADDR
// if ValidHex ( x , y ) then
81756: LD_VAR 0 4
81760: PPUSH
81761: LD_VAR 0 5
81765: PPUSH
81766: CALL_OW 488
81770: IFFALSE 81791
// ComTurnXY ( unit , x , y ) ;
81772: LD_VAR 0 1
81776: PPUSH
81777: LD_VAR 0 4
81781: PPUSH
81782: LD_VAR 0 5
81786: PPUSH
81787: CALL_OW 118
// end ;
81791: LD_VAR 0 3
81795: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81796: LD_INT 0
81798: PPUSH
81799: PPUSH
// result := false ;
81800: LD_ADDR_VAR 0 3
81804: PUSH
81805: LD_INT 0
81807: ST_TO_ADDR
// if not units then
81808: LD_VAR 0 2
81812: NOT
81813: IFFALSE 81817
// exit ;
81815: GO 81862
// for i in units do
81817: LD_ADDR_VAR 0 4
81821: PUSH
81822: LD_VAR 0 2
81826: PUSH
81827: FOR_IN
81828: IFFALSE 81860
// if See ( side , i ) then
81830: LD_VAR 0 1
81834: PPUSH
81835: LD_VAR 0 4
81839: PPUSH
81840: CALL_OW 292
81844: IFFALSE 81858
// begin result := true ;
81846: LD_ADDR_VAR 0 3
81850: PUSH
81851: LD_INT 1
81853: ST_TO_ADDR
// exit ;
81854: POP
81855: POP
81856: GO 81862
// end ;
81858: GO 81827
81860: POP
81861: POP
// end ;
81862: LD_VAR 0 3
81866: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81867: LD_INT 0
81869: PPUSH
81870: PPUSH
81871: PPUSH
81872: PPUSH
// if not unit or not points then
81873: LD_VAR 0 1
81877: NOT
81878: IFTRUE 81887
81880: PUSH
81881: LD_VAR 0 2
81885: NOT
81886: OR
81887: IFFALSE 81891
// exit ;
81889: GO 81981
// dist := 99999 ;
81891: LD_ADDR_VAR 0 5
81895: PUSH
81896: LD_INT 99999
81898: ST_TO_ADDR
// for i in points do
81899: LD_ADDR_VAR 0 4
81903: PUSH
81904: LD_VAR 0 2
81908: PUSH
81909: FOR_IN
81910: IFFALSE 81979
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81912: LD_ADDR_VAR 0 6
81916: PUSH
81917: LD_VAR 0 1
81921: PPUSH
81922: LD_VAR 0 4
81926: PUSH
81927: LD_INT 1
81929: ARRAY
81930: PPUSH
81931: LD_VAR 0 4
81935: PUSH
81936: LD_INT 2
81938: ARRAY
81939: PPUSH
81940: CALL_OW 297
81944: ST_TO_ADDR
// if tmpDist < dist then
81945: LD_VAR 0 6
81949: PUSH
81950: LD_VAR 0 5
81954: LESS
81955: IFFALSE 81977
// begin result := i ;
81957: LD_ADDR_VAR 0 3
81961: PUSH
81962: LD_VAR 0 4
81966: ST_TO_ADDR
// dist := tmpDist ;
81967: LD_ADDR_VAR 0 5
81971: PUSH
81972: LD_VAR 0 6
81976: ST_TO_ADDR
// end ; end ;
81977: GO 81909
81979: POP
81980: POP
// end ;
81981: LD_VAR 0 3
81985: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81986: LD_INT 0
81988: PPUSH
// uc_side := side ;
81989: LD_ADDR_OWVAR 20
81993: PUSH
81994: LD_VAR 0 1
81998: ST_TO_ADDR
// uc_nation := 3 ;
81999: LD_ADDR_OWVAR 21
82003: PUSH
82004: LD_INT 3
82006: ST_TO_ADDR
// vc_chassis := 25 ;
82007: LD_ADDR_OWVAR 37
82011: PUSH
82012: LD_INT 25
82014: ST_TO_ADDR
// vc_engine := engine_siberite ;
82015: LD_ADDR_OWVAR 39
82019: PUSH
82020: LD_INT 3
82022: ST_TO_ADDR
// vc_control := control_computer ;
82023: LD_ADDR_OWVAR 38
82027: PUSH
82028: LD_INT 3
82030: ST_TO_ADDR
// vc_weapon := 59 ;
82031: LD_ADDR_OWVAR 40
82035: PUSH
82036: LD_INT 59
82038: ST_TO_ADDR
// result := CreateVehicle ;
82039: LD_ADDR_VAR 0 5
82043: PUSH
82044: CALL_OW 45
82048: ST_TO_ADDR
// SetDir ( result , d ) ;
82049: LD_VAR 0 5
82053: PPUSH
82054: LD_VAR 0 4
82058: PPUSH
82059: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82063: LD_VAR 0 5
82067: PPUSH
82068: LD_VAR 0 2
82072: PPUSH
82073: LD_VAR 0 3
82077: PPUSH
82078: LD_INT 0
82080: PPUSH
82081: CALL_OW 48
// end ;
82085: LD_VAR 0 5
82089: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82090: LD_INT 0
82092: PPUSH
82093: PPUSH
82094: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82095: LD_ADDR_VAR 0 2
82099: PUSH
82100: LD_INT 0
82102: PUSH
82103: LD_INT 0
82105: PUSH
82106: LD_INT 0
82108: PUSH
82109: LD_INT 0
82111: PUSH
82112: EMPTY
82113: LIST
82114: LIST
82115: LIST
82116: LIST
82117: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82118: LD_VAR 0 1
82122: NOT
82123: IFTRUE 82156
82125: PUSH
82126: LD_VAR 0 1
82130: PPUSH
82131: CALL_OW 264
82135: PUSH
82136: LD_INT 12
82138: PUSH
82139: LD_INT 51
82141: PUSH
82142: LD_INT 32
82144: PUSH
82145: LD_INT 89
82147: PUSH
82148: EMPTY
82149: LIST
82150: LIST
82151: LIST
82152: LIST
82153: IN
82154: NOT
82155: OR
82156: IFFALSE 82160
// exit ;
82158: GO 82258
// for i := 1 to 3 do
82160: LD_ADDR_VAR 0 3
82164: PUSH
82165: DOUBLE
82166: LD_INT 1
82168: DEC
82169: ST_TO_ADDR
82170: LD_INT 3
82172: PUSH
82173: FOR_TO
82174: IFFALSE 82256
// begin tmp := GetCargo ( cargo , i ) ;
82176: LD_ADDR_VAR 0 4
82180: PUSH
82181: LD_VAR 0 1
82185: PPUSH
82186: LD_VAR 0 3
82190: PPUSH
82191: CALL_OW 289
82195: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82196: LD_ADDR_VAR 0 2
82200: PUSH
82201: LD_VAR 0 2
82205: PPUSH
82206: LD_VAR 0 3
82210: PPUSH
82211: LD_VAR 0 4
82215: PPUSH
82216: CALL_OW 1
82220: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82221: LD_ADDR_VAR 0 2
82225: PUSH
82226: LD_VAR 0 2
82230: PPUSH
82231: LD_INT 4
82233: PPUSH
82234: LD_VAR 0 2
82238: PUSH
82239: LD_INT 4
82241: ARRAY
82242: PUSH
82243: LD_VAR 0 4
82247: PLUS
82248: PPUSH
82249: CALL_OW 1
82253: ST_TO_ADDR
// end ;
82254: GO 82173
82256: POP
82257: POP
// end ;
82258: LD_VAR 0 2
82262: RET
// export function Length ( array ) ; begin
82263: LD_INT 0
82265: PPUSH
// result := array + 0 ;
82266: LD_ADDR_VAR 0 2
82270: PUSH
82271: LD_VAR 0 1
82275: PUSH
82276: LD_INT 0
82278: PLUS
82279: ST_TO_ADDR
// end ;
82280: LD_VAR 0 2
82284: RET
// export function PrepareArray ( array ) ; begin
82285: LD_INT 0
82287: PPUSH
// result := array diff 0 ;
82288: LD_ADDR_VAR 0 2
82292: PUSH
82293: LD_VAR 0 1
82297: PUSH
82298: LD_INT 0
82300: DIFF
82301: ST_TO_ADDR
// if not result [ 1 ] then
82302: LD_VAR 0 2
82306: PUSH
82307: LD_INT 1
82309: ARRAY
82310: NOT
82311: IFFALSE 82331
// result := Delete ( result , 1 ) ;
82313: LD_ADDR_VAR 0 2
82317: PUSH
82318: LD_VAR 0 2
82322: PPUSH
82323: LD_INT 1
82325: PPUSH
82326: CALL_OW 3
82330: ST_TO_ADDR
// end ;
82331: LD_VAR 0 2
82335: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82336: LD_INT 0
82338: PPUSH
82339: PPUSH
82340: PPUSH
82341: PPUSH
// sibRocketRange := 25 ;
82342: LD_ADDR_VAR 0 6
82346: PUSH
82347: LD_INT 25
82349: ST_TO_ADDR
// result := false ;
82350: LD_ADDR_VAR 0 4
82354: PUSH
82355: LD_INT 0
82357: ST_TO_ADDR
// for i := 0 to 5 do
82358: LD_ADDR_VAR 0 5
82362: PUSH
82363: DOUBLE
82364: LD_INT 0
82366: DEC
82367: ST_TO_ADDR
82368: LD_INT 5
82370: PUSH
82371: FOR_TO
82372: IFFALSE 82439
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82374: LD_VAR 0 1
82378: PPUSH
82379: LD_VAR 0 5
82383: PPUSH
82384: LD_VAR 0 6
82388: PPUSH
82389: CALL_OW 272
82393: PPUSH
82394: LD_VAR 0 2
82398: PPUSH
82399: LD_VAR 0 5
82403: PPUSH
82404: LD_VAR 0 6
82408: PPUSH
82409: CALL_OW 273
82413: PPUSH
82414: LD_VAR 0 3
82418: PPUSH
82419: CALL_OW 309
82423: IFFALSE 82437
// begin result := true ;
82425: LD_ADDR_VAR 0 4
82429: PUSH
82430: LD_INT 1
82432: ST_TO_ADDR
// exit ;
82433: POP
82434: POP
82435: GO 82441
// end ;
82437: GO 82371
82439: POP
82440: POP
// end ;
82441: LD_VAR 0 4
82445: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
82446: LD_INT 0
82448: PPUSH
82449: PPUSH
82450: PPUSH
// if btype = b_depot then
82451: LD_VAR 0 2
82455: PUSH
82456: LD_INT 0
82458: EQUAL
82459: IFFALSE 82471
// begin result := true ;
82461: LD_ADDR_VAR 0 3
82465: PUSH
82466: LD_INT 1
82468: ST_TO_ADDR
// exit ;
82469: GO 82591
// end ; pom := GetBase ( depot ) ;
82471: LD_ADDR_VAR 0 4
82475: PUSH
82476: LD_VAR 0 1
82480: PPUSH
82481: CALL_OW 274
82485: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
82486: LD_ADDR_VAR 0 5
82490: PUSH
82491: LD_VAR 0 2
82495: PPUSH
82496: LD_VAR 0 1
82500: PPUSH
82501: CALL_OW 248
82505: PPUSH
82506: CALL_OW 450
82510: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
82511: LD_ADDR_VAR 0 3
82515: PUSH
82516: LD_VAR 0 4
82520: PPUSH
82521: LD_INT 1
82523: PPUSH
82524: CALL_OW 275
82528: PUSH
82529: LD_VAR 0 5
82533: PUSH
82534: LD_INT 1
82536: ARRAY
82537: GREATEREQUAL
82538: IFFALSE 82564
82540: PUSH
82541: LD_VAR 0 4
82545: PPUSH
82546: LD_INT 2
82548: PPUSH
82549: CALL_OW 275
82553: PUSH
82554: LD_VAR 0 5
82558: PUSH
82559: LD_INT 2
82561: ARRAY
82562: GREATEREQUAL
82563: AND
82564: IFFALSE 82590
82566: PUSH
82567: LD_VAR 0 4
82571: PPUSH
82572: LD_INT 3
82574: PPUSH
82575: CALL_OW 275
82579: PUSH
82580: LD_VAR 0 5
82584: PUSH
82585: LD_INT 3
82587: ARRAY
82588: GREATEREQUAL
82589: AND
82590: ST_TO_ADDR
// end ;
82591: LD_VAR 0 3
82595: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82596: LD_INT 0
82598: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82599: LD_VAR 0 1
82603: PPUSH
82604: LD_VAR 0 2
82608: PPUSH
82609: LD_INT 0
82611: PPUSH
82612: LD_INT 0
82614: PPUSH
82615: LD_INT 1
82617: PPUSH
82618: LD_INT 0
82620: PPUSH
82621: CALL_OW 587
// end ;
82625: LD_VAR 0 3
82629: RET
// export function CenterOnNow ( unit ) ; begin
82630: LD_INT 0
82632: PPUSH
// result := IsInUnit ( unit ) ;
82633: LD_ADDR_VAR 0 2
82637: PUSH
82638: LD_VAR 0 1
82642: PPUSH
82643: CALL_OW 310
82647: ST_TO_ADDR
// if not result then
82648: LD_VAR 0 2
82652: NOT
82653: IFFALSE 82665
// result := unit ;
82655: LD_ADDR_VAR 0 2
82659: PUSH
82660: LD_VAR 0 1
82664: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
82665: LD_VAR 0 1
82669: PPUSH
82670: CALL_OW 87
// end ;
82674: LD_VAR 0 2
82678: RET
// export function ComMoveHex ( unit , hex ) ; begin
82679: LD_INT 0
82681: PPUSH
// if not hex then
82682: LD_VAR 0 2
82686: NOT
82687: IFFALSE 82691
// exit ;
82689: GO 82744
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
82691: LD_VAR 0 2
82695: PUSH
82696: LD_INT 1
82698: ARRAY
82699: PPUSH
82700: LD_VAR 0 2
82704: PUSH
82705: LD_INT 2
82707: ARRAY
82708: PPUSH
82709: CALL_OW 428
82713: IFFALSE 82717
// exit ;
82715: GO 82744
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
82717: LD_VAR 0 1
82721: PPUSH
82722: LD_VAR 0 2
82726: PUSH
82727: LD_INT 1
82729: ARRAY
82730: PPUSH
82731: LD_VAR 0 2
82735: PUSH
82736: LD_INT 2
82738: ARRAY
82739: PPUSH
82740: CALL_OW 111
// end ;
82744: LD_VAR 0 3
82748: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
82749: LD_INT 0
82751: PPUSH
82752: PPUSH
82753: PPUSH
// if not unit or not enemy then
82754: LD_VAR 0 1
82758: NOT
82759: IFTRUE 82768
82761: PUSH
82762: LD_VAR 0 2
82766: NOT
82767: OR
82768: IFFALSE 82772
// exit ;
82770: GO 82898
// x := GetX ( enemy ) ;
82772: LD_ADDR_VAR 0 4
82776: PUSH
82777: LD_VAR 0 2
82781: PPUSH
82782: CALL_OW 250
82786: ST_TO_ADDR
// y := GetY ( enemy ) ;
82787: LD_ADDR_VAR 0 5
82791: PUSH
82792: LD_VAR 0 2
82796: PPUSH
82797: CALL_OW 251
82801: ST_TO_ADDR
// if ValidHex ( x , y ) then
82802: LD_VAR 0 4
82806: PPUSH
82807: LD_VAR 0 5
82811: PPUSH
82812: CALL_OW 488
82816: IFFALSE 82898
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
82818: LD_VAR 0 2
82822: PPUSH
82823: CALL_OW 247
82827: PUSH
82828: LD_INT 3
82830: PUSH
82831: LD_INT 2
82833: PUSH
82834: EMPTY
82835: LIST
82836: LIST
82837: IN
82838: IFTRUE 82861
82840: PUSH
82841: LD_VAR 0 1
82845: PPUSH
82846: CALL_OW 255
82850: PPUSH
82851: LD_VAR 0 2
82855: PPUSH
82856: CALL_OW 292
82860: OR
82861: IFFALSE 82879
// ComAttackUnit ( unit , enemy ) else
82863: LD_VAR 0 1
82867: PPUSH
82868: LD_VAR 0 2
82872: PPUSH
82873: CALL_OW 115
82877: GO 82898
// ComAgressiveMove ( unit , x , y ) ;
82879: LD_VAR 0 1
82883: PPUSH
82884: LD_VAR 0 4
82888: PPUSH
82889: LD_VAR 0 5
82893: PPUSH
82894: CALL_OW 114
// end ;
82898: LD_VAR 0 3
82902: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
82903: LD_INT 0
82905: PPUSH
82906: PPUSH
82907: PPUSH
// list := AreaToList ( area , 0 ) ;
82908: LD_ADDR_VAR 0 5
82912: PUSH
82913: LD_VAR 0 1
82917: PPUSH
82918: LD_INT 0
82920: PPUSH
82921: CALL_OW 517
82925: ST_TO_ADDR
// if not list then
82926: LD_VAR 0 5
82930: NOT
82931: IFFALSE 82935
// exit ;
82933: GO 83065
// if all then
82935: LD_VAR 0 2
82939: IFFALSE 83027
// begin for i := 1 to list [ 1 ] do
82941: LD_ADDR_VAR 0 4
82945: PUSH
82946: DOUBLE
82947: LD_INT 1
82949: DEC
82950: ST_TO_ADDR
82951: LD_VAR 0 5
82955: PUSH
82956: LD_INT 1
82958: ARRAY
82959: PUSH
82960: FOR_TO
82961: IFFALSE 83023
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
82963: LD_ADDR_VAR 0 3
82967: PUSH
82968: LD_VAR 0 3
82972: PPUSH
82973: LD_VAR 0 3
82977: PUSH
82978: LD_INT 1
82980: PLUS
82981: PPUSH
82982: LD_VAR 0 5
82986: PUSH
82987: LD_INT 1
82989: ARRAY
82990: PUSH
82991: LD_VAR 0 4
82995: ARRAY
82996: PUSH
82997: LD_VAR 0 5
83001: PUSH
83002: LD_INT 2
83004: ARRAY
83005: PUSH
83006: LD_VAR 0 4
83010: ARRAY
83011: PUSH
83012: EMPTY
83013: LIST
83014: LIST
83015: PPUSH
83016: CALL_OW 1
83020: ST_TO_ADDR
83021: GO 82960
83023: POP
83024: POP
// exit ;
83025: GO 83065
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
83027: LD_ADDR_VAR 0 3
83031: PUSH
83032: LD_VAR 0 5
83036: PUSH
83037: LD_INT 1
83039: ARRAY
83040: PUSH
83041: LD_INT 1
83043: ARRAY
83044: PUSH
83045: LD_VAR 0 5
83049: PUSH
83050: LD_INT 2
83052: ARRAY
83053: PUSH
83054: LD_INT 1
83056: ARRAY
83057: PUSH
83058: EMPTY
83059: LIST
83060: LIST
83061: PUSH
83062: EMPTY
83063: LIST
83064: ST_TO_ADDR
// end ;
83065: LD_VAR 0 3
83069: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
83070: LD_INT 0
83072: PPUSH
83073: PPUSH
// list := AreaToList ( area , 0 ) ;
83074: LD_ADDR_VAR 0 4
83078: PUSH
83079: LD_VAR 0 1
83083: PPUSH
83084: LD_INT 0
83086: PPUSH
83087: CALL_OW 517
83091: ST_TO_ADDR
// if not list then
83092: LD_VAR 0 4
83096: NOT
83097: IFFALSE 83101
// exit ;
83099: GO 83142
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
83101: LD_ADDR_VAR 0 3
83105: PUSH
83106: LD_VAR 0 4
83110: PUSH
83111: LD_INT 1
83113: ARRAY
83114: PUSH
83115: LD_INT 1
83117: ARRAY
83118: PUSH
83119: LD_VAR 0 4
83123: PUSH
83124: LD_INT 2
83126: ARRAY
83127: PUSH
83128: LD_INT 1
83130: ARRAY
83131: PUSH
83132: LD_VAR 0 2
83136: PUSH
83137: EMPTY
83138: LIST
83139: LIST
83140: LIST
83141: ST_TO_ADDR
// end ;
83142: LD_VAR 0 3
83146: RET
// export function First ( array ) ; begin
83147: LD_INT 0
83149: PPUSH
// if not array then
83150: LD_VAR 0 1
83154: NOT
83155: IFFALSE 83159
// exit ;
83157: GO 83173
// result := array [ 1 ] ;
83159: LD_ADDR_VAR 0 2
83163: PUSH
83164: LD_VAR 0 1
83168: PUSH
83169: LD_INT 1
83171: ARRAY
83172: ST_TO_ADDR
// end ;
83173: LD_VAR 0 2
83177: RET
// export function Last ( array ) ; begin
83178: LD_INT 0
83180: PPUSH
// if not array then
83181: LD_VAR 0 1
83185: NOT
83186: IFFALSE 83190
// exit ;
83188: GO 83206
// result := array [ array ] ;
83190: LD_ADDR_VAR 0 2
83194: PUSH
83195: LD_VAR 0 1
83199: PUSH
83200: LD_VAR 0 1
83204: ARRAY
83205: ST_TO_ADDR
// end ;
83206: LD_VAR 0 2
83210: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
83211: LD_INT 0
83213: PPUSH
83214: PPUSH
// result := [ ] ;
83215: LD_ADDR_VAR 0 5
83219: PUSH
83220: EMPTY
83221: ST_TO_ADDR
// if not array then
83222: LD_VAR 0 1
83226: NOT
83227: IFFALSE 83231
// exit ;
83229: GO 83343
// for i := 1 to array do
83231: LD_ADDR_VAR 0 6
83235: PUSH
83236: DOUBLE
83237: LD_INT 1
83239: DEC
83240: ST_TO_ADDR
83241: LD_VAR 0 1
83245: PUSH
83246: FOR_TO
83247: IFFALSE 83341
// if array [ i ] [ index ] = value then
83249: LD_VAR 0 1
83253: PUSH
83254: LD_VAR 0 6
83258: ARRAY
83259: PUSH
83260: LD_VAR 0 2
83264: ARRAY
83265: PUSH
83266: LD_VAR 0 3
83270: EQUAL
83271: IFFALSE 83339
// begin if indexColumn then
83273: LD_VAR 0 4
83277: IFFALSE 83313
// result := Join ( result , array [ i ] [ indexColumn ] ) else
83279: LD_ADDR_VAR 0 5
83283: PUSH
83284: LD_VAR 0 5
83288: PPUSH
83289: LD_VAR 0 1
83293: PUSH
83294: LD_VAR 0 6
83298: ARRAY
83299: PUSH
83300: LD_VAR 0 4
83304: ARRAY
83305: PPUSH
83306: CALL 78351 0 2
83310: ST_TO_ADDR
83311: GO 83339
// result := Join ( result , array [ i ] ) ;
83313: LD_ADDR_VAR 0 5
83317: PUSH
83318: LD_VAR 0 5
83322: PPUSH
83323: LD_VAR 0 1
83327: PUSH
83328: LD_VAR 0 6
83332: ARRAY
83333: PPUSH
83334: CALL 78351 0 2
83338: ST_TO_ADDR
// end ;
83339: GO 83246
83341: POP
83342: POP
// end ;
83343: LD_VAR 0 5
83347: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
83348: LD_INT 0
83350: PPUSH
// if not vehicles or not parkingPoint then
83351: LD_VAR 0 1
83355: NOT
83356: IFTRUE 83365
83358: PUSH
83359: LD_VAR 0 2
83363: NOT
83364: OR
83365: IFFALSE 83369
// exit ;
83367: GO 83467
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
83369: LD_ADDR_VAR 0 1
83373: PUSH
83374: LD_VAR 0 1
83378: PPUSH
83379: LD_INT 50
83381: PUSH
83382: EMPTY
83383: LIST
83384: PUSH
83385: LD_INT 3
83387: PUSH
83388: LD_INT 92
83390: PUSH
83391: LD_VAR 0 2
83395: PUSH
83396: LD_INT 1
83398: ARRAY
83399: PUSH
83400: LD_VAR 0 2
83404: PUSH
83405: LD_INT 2
83407: ARRAY
83408: PUSH
83409: LD_INT 8
83411: PUSH
83412: EMPTY
83413: LIST
83414: LIST
83415: LIST
83416: LIST
83417: PUSH
83418: EMPTY
83419: LIST
83420: LIST
83421: PUSH
83422: EMPTY
83423: LIST
83424: LIST
83425: PPUSH
83426: CALL_OW 72
83430: ST_TO_ADDR
// if not vehicles then
83431: LD_VAR 0 1
83435: NOT
83436: IFFALSE 83440
// exit ;
83438: GO 83467
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
83440: LD_VAR 0 1
83444: PPUSH
83445: LD_VAR 0 2
83449: PUSH
83450: LD_INT 1
83452: ARRAY
83453: PPUSH
83454: LD_VAR 0 2
83458: PUSH
83459: LD_INT 2
83461: ARRAY
83462: PPUSH
83463: CALL_OW 111
// end ;
83467: LD_VAR 0 3
83471: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
83472: LD_INT 0
83474: PPUSH
83475: PPUSH
83476: PPUSH
// if not side or not area then
83477: LD_VAR 0 1
83481: NOT
83482: IFTRUE 83491
83484: PUSH
83485: LD_VAR 0 2
83489: NOT
83490: OR
83491: IFFALSE 83495
// exit ;
83493: GO 83614
// tmp := AreaToList ( area , 0 ) ;
83495: LD_ADDR_VAR 0 5
83499: PUSH
83500: LD_VAR 0 2
83504: PPUSH
83505: LD_INT 0
83507: PPUSH
83508: CALL_OW 517
83512: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
83513: LD_ADDR_VAR 0 4
83517: PUSH
83518: DOUBLE
83519: LD_INT 1
83521: DEC
83522: ST_TO_ADDR
83523: LD_VAR 0 5
83527: PUSH
83528: LD_INT 1
83530: ARRAY
83531: PUSH
83532: FOR_TO
83533: IFFALSE 83612
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
83535: LD_VAR 0 5
83539: PUSH
83540: LD_INT 1
83542: ARRAY
83543: PUSH
83544: LD_VAR 0 4
83548: ARRAY
83549: PPUSH
83550: LD_VAR 0 5
83554: PUSH
83555: LD_INT 2
83557: ARRAY
83558: PUSH
83559: LD_VAR 0 4
83563: ARRAY
83564: PPUSH
83565: CALL_OW 351
83569: IFFALSE 83610
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
83571: LD_VAR 0 5
83575: PUSH
83576: LD_INT 1
83578: ARRAY
83579: PUSH
83580: LD_VAR 0 4
83584: ARRAY
83585: PPUSH
83586: LD_VAR 0 5
83590: PUSH
83591: LD_INT 2
83593: ARRAY
83594: PUSH
83595: LD_VAR 0 4
83599: ARRAY
83600: PPUSH
83601: LD_VAR 0 1
83605: PPUSH
83606: CALL_OW 244
// end ;
83610: GO 83532
83612: POP
83613: POP
// end ;
83614: LD_VAR 0 3
83618: RET
// export function UniqueArray ( array ) ; var i ; begin
83619: LD_INT 0
83621: PPUSH
83622: PPUSH
// result := [ ] ;
83623: LD_ADDR_VAR 0 2
83627: PUSH
83628: EMPTY
83629: ST_TO_ADDR
// if not array then
83630: LD_VAR 0 1
83634: NOT
83635: IFFALSE 83639
// exit ;
83637: GO 83700
// for i := 1 to array do
83639: LD_ADDR_VAR 0 3
83643: PUSH
83644: DOUBLE
83645: LD_INT 1
83647: DEC
83648: ST_TO_ADDR
83649: LD_VAR 0 1
83653: PUSH
83654: FOR_TO
83655: IFFALSE 83698
// if not array [ i ] in result then
83657: LD_VAR 0 1
83661: PUSH
83662: LD_VAR 0 3
83666: ARRAY
83667: PUSH
83668: LD_VAR 0 2
83672: IN
83673: NOT
83674: IFFALSE 83696
// result := Join ( result , i ) ;
83676: LD_ADDR_VAR 0 2
83680: PUSH
83681: LD_VAR 0 2
83685: PPUSH
83686: LD_VAR 0 3
83690: PPUSH
83691: CALL 78351 0 2
83695: ST_TO_ADDR
83696: GO 83654
83698: POP
83699: POP
// end ; end_of_file
83700: LD_VAR 0 2
83704: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
83705: LD_VAR 0 1
83709: PUSH
83710: LD_INT 200
83712: DOUBLE
83713: GREATEREQUAL
83714: IFFALSE 83722
83716: LD_INT 299
83718: DOUBLE
83719: LESSEQUAL
83720: IFTRUE 83724
83722: GO 83756
83724: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
83725: LD_VAR 0 1
83729: PPUSH
83730: LD_VAR 0 2
83734: PPUSH
83735: LD_VAR 0 3
83739: PPUSH
83740: LD_VAR 0 4
83744: PPUSH
83745: LD_VAR 0 5
83749: PPUSH
83750: CALL 34427 0 5
83754: GO 83833
83756: LD_INT 300
83758: DOUBLE
83759: GREATEREQUAL
83760: IFFALSE 83768
83762: LD_INT 399
83764: DOUBLE
83765: LESSEQUAL
83766: IFTRUE 83770
83768: GO 83832
83770: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
83771: LD_VAR 0 1
83775: PPUSH
83776: LD_VAR 0 2
83780: PPUSH
83781: LD_VAR 0 3
83785: PPUSH
83786: LD_VAR 0 4
83790: PPUSH
83791: LD_VAR 0 5
83795: PPUSH
83796: LD_VAR 0 6
83800: PPUSH
83801: LD_VAR 0 7
83805: PPUSH
83806: LD_VAR 0 8
83810: PPUSH
83811: LD_VAR 0 9
83815: PPUSH
83816: LD_VAR 0 10
83820: PPUSH
83821: LD_VAR 0 11
83825: PPUSH
83826: CALL 30230 0 11
83830: GO 83833
83832: POP
// end ;
83833: PPOPN 11
83835: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
83836: LD_VAR 0 1
83840: PPUSH
83841: LD_VAR 0 2
83845: PPUSH
83846: LD_VAR 0 3
83850: PPUSH
83851: LD_VAR 0 4
83855: PPUSH
83856: LD_VAR 0 5
83860: PPUSH
83861: CALL 33727 0 5
// end ; end_of_file
83865: PPOPN 5
83867: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
83868: LD_VAR 0 1
83872: PPUSH
83873: LD_VAR 0 2
83877: PPUSH
83878: LD_VAR 0 3
83882: PPUSH
83883: LD_VAR 0 4
83887: PPUSH
83888: LD_VAR 0 5
83892: PPUSH
83893: LD_VAR 0 6
83897: PPUSH
83898: CALL 17770 0 6
// end ;
83902: PPOPN 6
83904: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
83905: LD_INT 0
83907: PPUSH
// begin if not units then
83908: LD_VAR 0 1
83912: NOT
83913: IFFALSE 83917
// exit ;
83915: GO 83951
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
83917: LD_VAR 0 1
83921: PPUSH
83922: LD_VAR 0 2
83926: PPUSH
83927: LD_VAR 0 3
83931: PPUSH
83932: LD_VAR 0 4
83936: PPUSH
83937: LD_VAR 0 5
83941: PPUSH
83942: LD_VAR 0 6
83946: PPUSH
83947: CALL 40124 0 6
// end ;
83951: PPOPN 7
83953: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
83954: CALL 17650 0 0
// end ;
83958: PPOPN 1
83960: END
