// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix , debug ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 77 0 0
// if debug then
  19: LD_EXP 34
  23: IFFALSE 40
// begin Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// end ; PrepareDifficulty ;
  40: CALL 10281 0 0
// PrepareRussianCommander ;
  44: CALL 11746 0 0
// PrepareSouthBase ;
  48: CALL 11842 0 0
// PrepareNorthBase ;
  52: CALL 12180 0 0
// PrepareOtherRussians ;
  56: CALL 12575 0 0
// PrepareHeroes ;
  60: CALL 10602 0 0
// PrepareLisSquad ;
  64: CALL 10972 0 0
// PrepareOtherAmericans ;
  68: CALL 11285 0 0
// Action ;
  72: CALL 329 0 0
// end ;
  76: END
// function Init ; begin
  77: LD_INT 0
  79: PPUSH
// debug := false ;
  80: LD_ADDR_EXP 34
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// mission_prefix := 02_ ;
  88: LD_ADDR_EXP 33
  92: PUSH
  93: LD_STRING 02_
  95: ST_TO_ADDR
// RuSoldMinLevel := 0 ;
  96: LD_ADDR_EXP 13
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// RuSoldMaxLevel := 0 ;
 104: LD_ADDR_EXP 14
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// hpJMM := 0 ;
 112: LD_ADDR_EXP 10
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// hpBobby := 0 ;
 120: LD_ADDR_EXP 11
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// hpCyrus := 0 ;
 128: LD_ADDR_EXP 12
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// cargoEscape := 0 ;
 136: LD_ADDR_EXP 20
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// mikhailStatus := 0 ;
 144: LD_ADDR_EXP 21
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// mikhailInBase := 0 ;
 152: LD_ADDR_EXP 22
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// mikhailDepot := 0 ;
 160: LD_ADDR_EXP 23
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// tigersRespawn := 0 ;
 168: LD_ADDR_EXP 30
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// cargoRespawn := 0 ;
 176: LD_ADDR_EXP 28
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cargoSee := 0 ;
 184: LD_ADDR_EXP 29
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// lastBattle := 0 ;
 192: LD_ADDR_EXP 27
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// deadsCounter := 0 ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// spotCorpses := 0 ;
 208: LD_ADDR_EXP 32
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// southBaseDefenders := [ ] ;
 216: LD_ADDR_EXP 25
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// northBaseDefenders := [ ] ;
 223: LD_ADDR_EXP 24
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// attackGroup := [ ] ;
 230: LD_ADDR_EXP 26
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// end ;
 237: LD_VAR 0 1
 241: RET
// every 0 0$1 trigger debug do var i ;
 242: LD_EXP 34
 246: IFFALSE 326
 248: GO 250
 250: DISABLE
 251: LD_INT 0
 253: PPUSH
// begin enable ;
 254: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
 255: LD_ADDR_VAR 0 1
 259: PUSH
 260: LD_INT 22
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 21
 272: PUSH
 273: LD_INT 1
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: LD_INT 3
 282: PUSH
 283: LD_INT 24
 285: PUSH
 286: LD_INT 1000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: PUSH
 307: FOR_IN
 308: IFFALSE 324
// SetLives ( i , 1000 ) ;
 310: LD_VAR 0 1
 314: PPUSH
 315: LD_INT 1000
 317: PPUSH
 318: CALL_OW 234
 322: GO 307
 324: POP
 325: POP
// end ; end_of_file
 326: PPOPN 1
 328: END
// export function Action ; var tmp ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// InGameOn ;
 333: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
 337: LD_EXP 1
 341: PPUSH
 342: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 346: LD_ADDR_VAR 0 2
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 4
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: LD_EXP 4
 384: PUSH
 385: EMPTY
 386: LIST
 387: DIFF
 388: ST_TO_ADDR
// if Cyrus and Bobby then
 389: LD_EXP 3
 393: PUSH
 394: LD_EXP 2
 398: AND
 399: IFFALSE 729
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 401: LD_EXP 3
 405: PPUSH
 406: LD_INT 43
 408: PPUSH
 409: LD_INT 72
 411: PPUSH
 412: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 416: LD_EXP 2
 420: PPUSH
 421: LD_INT 44
 423: PPUSH
 424: LD_INT 70
 426: PPUSH
 427: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 431: LD_EXP 1
 435: PPUSH
 436: LD_INT 46
 438: PPUSH
 439: LD_INT 73
 441: PPUSH
 442: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 446: LD_EXP 3
 450: PPUSH
 451: LD_STRING D1a-Cyrus-1
 453: PPUSH
 454: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 458: LD_EXP 1
 462: PPUSH
 463: LD_STRING D1a-JMM-1
 465: PPUSH
 466: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 470: LD_EXP 3
 474: PPUSH
 475: LD_INT 37
 477: PPUSH
 478: LD_INT 66
 480: PPUSH
 481: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 485: LD_EXP 2
 489: PPUSH
 490: LD_INT 41
 492: PPUSH
 493: LD_INT 67
 495: PPUSH
 496: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 500: LD_EXP 1
 504: PPUSH
 505: LD_INT 38
 507: PPUSH
 508: LD_INT 64
 510: PPUSH
 511: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 515: LD_EXP 2
 519: PPUSH
 520: LD_STRING D1a-Bobby-2
 522: PPUSH
 523: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 527: LD_EXP 3
 531: PPUSH
 532: LD_INT 35
 534: PPUSH
 535: LD_INT 62
 537: PPUSH
 538: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 542: LD_EXP 2
 546: PPUSH
 547: LD_INT 32
 549: PPUSH
 550: LD_INT 60
 552: PPUSH
 553: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_INT 35
 564: PPUSH
 565: LD_INT 60
 567: PPUSH
 568: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 572: LD_EXP 1
 576: PPUSH
 577: LD_STRING D1a-JMM-2
 579: PPUSH
 580: CALL_OW 88
// ComWalk ( Lisa ) ;
 584: LD_EXP 4
 588: PPUSH
 589: CALL_OW 138
// wait ( 0 0$1 ) ;
 593: LD_INT 35
 595: PPUSH
 596: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 600: LD_EXP 4
 604: PPUSH
 605: LD_EXP 1
 609: PPUSH
 610: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 614: LD_EXP 1
 618: PUSH
 619: LD_EXP 3
 623: PUSH
 624: LD_EXP 2
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: LIST
 633: PPUSH
 634: LD_EXP 4
 638: PPUSH
 639: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 643: LD_VAR 0 2
 647: PUSH
 648: LD_INT 1
 650: ARRAY
 651: PPUSH
 652: LD_INT 33
 654: PPUSH
 655: LD_INT 55
 657: PPUSH
 658: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 2
 669: ARRAY
 670: PPUSH
 671: LD_INT 30
 673: PPUSH
 674: LD_INT 54
 676: PPUSH
 677: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 1
 688: ARRAY
 689: PPUSH
 690: LD_EXP 1
 694: PPUSH
 695: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 699: LD_VAR 0 2
 703: PUSH
 704: LD_INT 2
 706: ARRAY
 707: PPUSH
 708: LD_EXP 1
 712: PPUSH
 713: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 717: LD_EXP 4
 721: PPUSH
 722: LD_STRING D1a-Lisa-2
 724: PPUSH
 725: CALL_OW 88
// end ; if Cyrus and not Bobby then
 729: LD_EXP 3
 733: PUSH
 734: LD_EXP 2
 738: NOT
 739: AND
 740: IFFALSE 945
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 742: LD_EXP 3
 746: PPUSH
 747: LD_INT 43
 749: PPUSH
 750: LD_INT 72
 752: PPUSH
 753: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 757: LD_EXP 1
 761: PPUSH
 762: LD_INT 46
 764: PPUSH
 765: LD_INT 73
 767: PPUSH
 768: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 772: LD_EXP 3
 776: PPUSH
 777: LD_STRING D1a-Cyrus-1
 779: PPUSH
 780: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 784: LD_EXP 1
 788: PPUSH
 789: LD_STRING D1a-JMM-1
 791: PPUSH
 792: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 796: LD_EXP 3
 800: PPUSH
 801: LD_INT 37
 803: PPUSH
 804: LD_INT 66
 806: PPUSH
 807: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 811: LD_EXP 1
 815: PPUSH
 816: LD_INT 38
 818: PPUSH
 819: LD_INT 64
 821: PPUSH
 822: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 826: LD_EXP 3
 830: PPUSH
 831: LD_STRING D1a-Cyrus-2
 833: PPUSH
 834: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 838: LD_EXP 3
 842: PPUSH
 843: LD_INT 35
 845: PPUSH
 846: LD_INT 62
 848: PPUSH
 849: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 853: LD_EXP 1
 857: PPUSH
 858: LD_INT 35
 860: PPUSH
 861: LD_INT 60
 863: PPUSH
 864: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 868: LD_EXP 1
 872: PPUSH
 873: LD_STRING D1a-JMM-2
 875: PPUSH
 876: CALL_OW 88
// ComWalk ( Lisa ) ;
 880: LD_EXP 4
 884: PPUSH
 885: CALL_OW 138
// wait ( 0 0$1 ) ;
 889: LD_INT 35
 891: PPUSH
 892: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 896: LD_EXP 4
 900: PPUSH
 901: LD_EXP 1
 905: PPUSH
 906: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 910: LD_EXP 4
 914: PPUSH
 915: LD_STRING D1a-Lisa-2
 917: PPUSH
 918: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 922: LD_EXP 1
 926: PUSH
 927: LD_EXP 3
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PPUSH
 936: LD_EXP 4
 940: PPUSH
 941: CALL_OW 119
// end ; if not Cyrus and Bobby then
 945: LD_EXP 3
 949: NOT
 950: PUSH
 951: LD_EXP 2
 955: AND
 956: IFFALSE 1235
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 958: LD_EXP 2
 962: PPUSH
 963: LD_INT 44
 965: PPUSH
 966: LD_INT 70
 968: PPUSH
 969: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 973: LD_EXP 1
 977: PPUSH
 978: LD_INT 46
 980: PPUSH
 981: LD_INT 73
 983: PPUSH
 984: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 988: LD_EXP 2
 992: PPUSH
 993: LD_STRING D1a-Bobby-1
 995: PPUSH
 996: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
1000: LD_EXP 1
1004: PPUSH
1005: LD_STRING D1a-JMM-1
1007: PPUSH
1008: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
1012: LD_EXP 2
1016: PPUSH
1017: LD_INT 37
1019: PPUSH
1020: LD_INT 66
1022: PPUSH
1023: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
1027: LD_EXP 1
1031: PPUSH
1032: LD_INT 38
1034: PPUSH
1035: LD_INT 64
1037: PPUSH
1038: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
1042: LD_EXP 2
1046: PPUSH
1047: LD_STRING D1a-Bobby-2
1049: PPUSH
1050: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
1054: LD_EXP 2
1058: PPUSH
1059: LD_INT 35
1061: PPUSH
1062: LD_INT 62
1064: PPUSH
1065: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
1069: LD_EXP 1
1073: PPUSH
1074: LD_INT 35
1076: PPUSH
1077: LD_INT 60
1079: PPUSH
1080: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
1084: LD_EXP 1
1088: PPUSH
1089: LD_STRING D1a-JMM-2
1091: PPUSH
1092: CALL_OW 88
// ComWalk ( Lisa ) ;
1096: LD_EXP 4
1100: PPUSH
1101: CALL_OW 138
// wait ( 0 0$1 ) ;
1105: LD_INT 35
1107: PPUSH
1108: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1112: LD_EXP 4
1116: PPUSH
1117: LD_EXP 1
1121: PPUSH
1122: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
1126: LD_EXP 1
1130: PUSH
1131: LD_EXP 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PPUSH
1140: LD_EXP 4
1144: PPUSH
1145: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1149: LD_VAR 0 2
1153: PUSH
1154: LD_INT 1
1156: ARRAY
1157: PPUSH
1158: LD_INT 33
1160: PPUSH
1161: LD_INT 55
1163: PPUSH
1164: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 2
1175: ARRAY
1176: PPUSH
1177: LD_INT 30
1179: PPUSH
1180: LD_INT 54
1182: PPUSH
1183: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PPUSH
1196: LD_EXP 1
1200: PPUSH
1201: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1205: LD_VAR 0 2
1209: PUSH
1210: LD_INT 2
1212: ARRAY
1213: PPUSH
1214: LD_EXP 1
1218: PPUSH
1219: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1223: LD_EXP 4
1227: PPUSH
1228: LD_STRING D1a-Lisa-2
1230: PPUSH
1231: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1235: LD_EXP 3
1239: NOT
1240: PUSH
1241: LD_EXP 2
1245: NOT
1246: AND
1247: IFFALSE 1461
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1249: LD_EXP 1
1253: PPUSH
1254: LD_INT 37
1256: PPUSH
1257: LD_INT 66
1259: PPUSH
1260: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1264: LD_EXP 1
1268: PPUSH
1269: LD_STRING D1b-JMM-1
1271: PPUSH
1272: CALL_OW 88
// ComCrawl ( JMM ) ;
1276: LD_EXP 1
1280: PPUSH
1281: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1285: LD_EXP 1
1289: PPUSH
1290: LD_INT 35
1292: PPUSH
1293: LD_INT 60
1295: PPUSH
1296: CALL_OW 171
// wait ( 0 0$8 ) ;
1300: LD_INT 280
1302: PPUSH
1303: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1307: LD_EXP 1
1311: PPUSH
1312: LD_STRING D1b-JMM-1a
1314: PPUSH
1315: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1319: LD_EXP 1
1323: PUSH
1324: LD_EXP 4
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: PPUSH
1333: CALL_OW 138
// wait ( 0 0$1 ) ;
1337: LD_INT 35
1339: PPUSH
1340: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1344: LD_EXP 4
1348: PPUSH
1349: LD_EXP 1
1353: PPUSH
1354: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1358: LD_EXP 1
1362: PUSH
1363: EMPTY
1364: LIST
1365: PPUSH
1366: LD_EXP 4
1370: PPUSH
1371: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1375: LD_VAR 0 2
1379: PUSH
1380: LD_INT 1
1382: ARRAY
1383: PPUSH
1384: LD_INT 33
1386: PPUSH
1387: LD_INT 55
1389: PPUSH
1390: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1394: LD_VAR 0 2
1398: PUSH
1399: LD_INT 2
1401: ARRAY
1402: PPUSH
1403: LD_INT 30
1405: PPUSH
1406: LD_INT 54
1408: PPUSH
1409: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1413: LD_VAR 0 2
1417: PUSH
1418: LD_INT 1
1420: ARRAY
1421: PPUSH
1422: LD_EXP 1
1426: PPUSH
1427: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1431: LD_VAR 0 2
1435: PUSH
1436: LD_INT 2
1438: ARRAY
1439: PPUSH
1440: LD_EXP 1
1444: PPUSH
1445: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1449: LD_EXP 4
1453: PPUSH
1454: LD_STRING D1b-Lisa-1
1456: PPUSH
1457: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1461: LD_EXP 1
1465: PPUSH
1466: LD_STRING D1-JMM-1
1468: PPUSH
1469: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1473: LD_EXP 4
1477: PPUSH
1478: LD_STRING D1-Lisa-1
1480: PPUSH
1481: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1485: LD_EXP 1
1489: PPUSH
1490: LD_STRING D1-JMM-2
1492: PPUSH
1493: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1497: LD_EXP 9
1501: PPUSH
1502: LD_STRING D1-Pow-2
1504: PPUSH
1505: CALL_OW 94
// if Cyrus then
1509: LD_EXP 3
1513: IFFALSE 1539
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1515: LD_EXP 3
1519: PPUSH
1520: LD_STRING D1-Cyrus-2
1522: PPUSH
1523: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1527: LD_EXP 1
1531: PPUSH
1532: LD_STRING D1-JMM-3
1534: PPUSH
1535: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1539: LD_EXP 9
1543: PPUSH
1544: LD_STRING D1-Pow-3
1546: PPUSH
1547: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1551: LD_EXP 1
1555: PPUSH
1556: LD_STRING D1-JMM-4
1558: PPUSH
1559: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1563: LD_EXP 9
1567: PPUSH
1568: LD_STRING D1-Pow-4
1570: PPUSH
1571: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1575: LD_EXP 9
1579: PPUSH
1580: LD_STRING D1-Pow-4a
1582: PPUSH
1583: CALL_OW 94
// if Cyrus then
1587: LD_EXP 3
1591: IFFALSE 1605
// Say ( Cyrus , D1-Cyrus-4 ) ;
1593: LD_EXP 3
1597: PPUSH
1598: LD_STRING D1-Cyrus-4
1600: PPUSH
1601: CALL_OW 88
// if Bobby then
1605: LD_EXP 2
1609: IFFALSE 1647
// begin Say ( Bobby , D1-Bobby-4 ) ;
1611: LD_EXP 2
1615: PPUSH
1616: LD_STRING D1-Bobby-4
1618: PPUSH
1619: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1623: LD_EXP 4
1627: PPUSH
1628: LD_STRING D1-Lisa-4
1630: PPUSH
1631: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1635: LD_EXP 1
1639: PPUSH
1640: LD_STRING D1-JMM-5
1642: PPUSH
1643: CALL_OW 88
// end ; InGameOff ;
1647: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1651: LD_INT 22
1653: PUSH
1654: LD_INT 4
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PPUSH
1661: CALL_OW 69
1665: PUSH
1666: LD_EXP 6
1670: PUSH
1671: LD_EXP 7
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: DIFF
1680: PPUSH
1681: LD_INT 1
1683: PPUSH
1684: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1688: LD_STRING M1
1690: PPUSH
1691: CALL_OW 337
// SaveForQuickRestart ;
1695: CALL_OW 22
// end ;
1699: LD_VAR 0 1
1703: RET
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1704: LD_INT 7
1706: PPUSH
1707: LD_INT 22
1709: PUSH
1710: LD_INT 1
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PPUSH
1717: CALL_OW 70
1721: PUSH
1722: LD_INT 0
1724: GREATER
1725: IFFALSE 2138
1727: GO 1729
1729: DISABLE
// begin InGameOn ;
1730: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1734: LD_INT 22
1736: PUSH
1737: LD_INT 1
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 21
1746: PUSH
1747: LD_INT 1
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PPUSH
1758: CALL_OW 69
1762: PPUSH
1763: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1767: LD_INT 24
1769: PPUSH
1770: LD_INT 32
1772: PPUSH
1773: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1777: LD_EXP 5
1781: PPUSH
1782: LD_INT 4
1784: PPUSH
1785: LD_INT 1
1787: PPUSH
1788: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1792: LD_EXP 5
1796: PPUSH
1797: LD_INT 4
1799: PPUSH
1800: CALL_OW 336
// wait ( 0 0$1 ) ;
1804: LD_INT 35
1806: PPUSH
1807: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1811: LD_EXP 5
1815: PPUSH
1816: LD_INT 27
1818: PPUSH
1819: LD_INT 38
1821: PPUSH
1822: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1826: LD_EXP 5
1830: PPUSH
1831: LD_EXP 1
1835: PPUSH
1836: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1840: LD_INT 22
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: LD_INT 21
1852: PUSH
1853: LD_INT 1
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PPUSH
1864: CALL_OW 69
1868: PUSH
1869: LD_EXP 5
1873: PUSH
1874: EMPTY
1875: LIST
1876: DIFF
1877: PPUSH
1878: LD_EXP 5
1882: PPUSH
1883: CALL_OW 119
// wait ( 0 0$1 ) ;
1887: LD_INT 35
1889: PPUSH
1890: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1894: LD_EXP 5
1898: PPUSH
1899: LD_STRING D2a-Khat-1
1901: PPUSH
1902: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1906: LD_EXP 1
1910: PPUSH
1911: LD_STRING D2a-JMM-1
1913: PPUSH
1914: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1918: LD_EXP 5
1922: PPUSH
1923: LD_STRING D2a-Khat-2
1925: PPUSH
1926: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1930: LD_EXP 1
1934: PPUSH
1935: LD_STRING D2a-JMM-2
1937: PPUSH
1938: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1942: LD_EXP 5
1946: PPUSH
1947: LD_STRING D2a-Khat-3
1949: PPUSH
1950: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1954: LD_EXP 1
1958: PPUSH
1959: LD_STRING D2a-JMM-3
1961: PPUSH
1962: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1966: LD_EXP 5
1970: PPUSH
1971: LD_STRING D2a-Khat-4
1973: PPUSH
1974: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1978: LD_EXP 1
1982: PPUSH
1983: LD_STRING D2a-JMM-4
1985: PPUSH
1986: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1990: LD_EXP 5
1994: PPUSH
1995: LD_STRING D2a-Khat-5
1997: PPUSH
1998: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
2002: LD_EXP 1
2006: PPUSH
2007: LD_STRING D2a-JMM-5
2009: PPUSH
2010: CALL_OW 88
// InGameOff ;
2014: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) then
2018: LD_INT 22
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PUSH
2028: LD_INT 21
2030: PUSH
2031: LD_INT 1
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PUSH
2038: LD_INT 3
2040: PUSH
2041: LD_INT 24
2043: PUSH
2044: LD_INT 800
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PPUSH
2060: CALL_OW 69
2064: IFFALSE 2138
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
2066: LD_EXP 5
2070: PPUSH
2071: LD_INT 22
2073: PUSH
2074: LD_INT 1
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PUSH
2081: LD_INT 21
2083: PUSH
2084: LD_INT 1
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 3
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 1000
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: PPUSH
2113: CALL_OW 69
2117: PUSH
2118: LD_INT 1
2120: ARRAY
2121: PPUSH
2122: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
2126: LD_EXP 5
2130: PPUSH
2131: LD_STRING D2b-Khat-1
2133: PPUSH
2134: CALL_OW 88
// end ; end ;
2138: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) do var i , distanceTab , min , tmp , p ;
2139: LD_INT 15
2141: PPUSH
2142: LD_INT 22
2144: PUSH
2145: LD_INT 1
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PPUSH
2152: CALL_OW 70
2156: IFFALSE 3353
2158: GO 2160
2160: DISABLE
2161: LD_INT 0
2163: PPUSH
2164: PPUSH
2165: PPUSH
2166: PPUSH
2167: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2168: LD_ADDR_VAR 0 2
2172: PUSH
2173: LD_INT 999
2175: PUSH
2176: LD_INT 999
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2186: LD_ADDR_VAR 0 4
2190: PUSH
2191: LD_INT 22
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 21
2203: PUSH
2204: LD_INT 1
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PPUSH
2215: CALL_OW 69
2219: PUSH
2220: LD_EXP 1
2224: PUSH
2225: LD_EXP 2
2229: PUSH
2230: LD_EXP 3
2234: PUSH
2235: LD_EXP 4
2239: PUSH
2240: LD_EXP 5
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: DIFF
2252: ST_TO_ADDR
// PrepareDeadSoldiers ;
2253: CALL 11427 0 0
// spotCorpses = 1 ;
2257: LD_ADDR_EXP 32
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2265: LD_INT 70
2267: PPUSH
2268: CALL_OW 67
// InGameOn ;
2272: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2276: LD_INT 23
2278: PPUSH
2279: LD_INT 12
2281: PPUSH
2282: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: LD_VAR 0 2
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: PUSH
2300: LD_INT 2
2302: ARRAY
2303: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2304: LD_ADDR_VAR 0 1
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 1
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 21
2321: PUSH
2322: LD_INT 1
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PPUSH
2333: CALL_OW 69
2337: PUSH
2338: LD_EXP 1
2342: PUSH
2343: LD_EXP 5
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: DIFF
2352: PUSH
2353: FOR_IN
2354: IFFALSE 2405
// if IsOK ( i ) then
2356: LD_VAR 0 1
2360: PPUSH
2361: CALL_OW 302
2365: IFFALSE 2403
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2367: LD_ADDR_VAR 0 2
2371: PUSH
2372: LD_VAR 0 2
2376: PUSH
2377: LD_VAR 0 1
2381: PUSH
2382: LD_VAR 0 1
2386: PPUSH
2387: LD_INT 16
2389: PPUSH
2390: CALL_OW 299
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PUSH
2399: EMPTY
2400: LIST
2401: ADD
2402: ST_TO_ADDR
2403: GO 2353
2405: POP
2406: POP
// for i = 2 to distanceTab do
2407: LD_ADDR_VAR 0 1
2411: PUSH
2412: DOUBLE
2413: LD_INT 2
2415: DEC
2416: ST_TO_ADDR
2417: LD_VAR 0 2
2421: PUSH
2422: FOR_TO
2423: IFFALSE 2469
// if distanceTab [ i ] [ 2 ] < min then
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PUSH
2436: LD_INT 2
2438: ARRAY
2439: PUSH
2440: LD_VAR 0 3
2444: LESS
2445: IFFALSE 2467
// min = distanceTab [ i ] [ 2 ] ;
2447: LD_ADDR_VAR 0 3
2451: PUSH
2452: LD_VAR 0 2
2456: PUSH
2457: LD_VAR 0 1
2461: ARRAY
2462: PUSH
2463: LD_INT 2
2465: ARRAY
2466: ST_TO_ADDR
2467: GO 2422
2469: POP
2470: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2471: LD_ADDR_VAR 0 1
2475: PUSH
2476: LD_INT 22
2478: PUSH
2479: LD_INT 1
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: LD_INT 21
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: PPUSH
2500: CALL_OW 69
2504: PUSH
2505: LD_EXP 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: DIFF
2513: PUSH
2514: FOR_IN
2515: IFFALSE 2585
// begin ComMoveToArea ( i , DeadCutscene ) ;
2517: LD_VAR 0 1
2521: PPUSH
2522: LD_INT 28
2524: PPUSH
2525: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2529: LD_EXP 1
2533: PPUSH
2534: LD_INT 30
2536: PPUSH
2537: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2541: LD_VAR 0 1
2545: PPUSH
2546: LD_INT 23
2548: PPUSH
2549: LD_INT 11
2551: PPUSH
2552: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2556: LD_EXP 1
2560: PPUSH
2561: LD_INT 23
2563: PPUSH
2564: LD_INT 11
2566: PPUSH
2567: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2571: LD_EXP 35
2575: PPUSH
2576: LD_INT 250
2578: PPUSH
2579: CALL_OW 234
// end ;
2583: GO 2514
2585: POP
2586: POP
// for i = 2 to distanceTab do
2587: LD_ADDR_VAR 0 1
2591: PUSH
2592: DOUBLE
2593: LD_INT 2
2595: DEC
2596: ST_TO_ADDR
2597: LD_VAR 0 2
2601: PUSH
2602: FOR_TO
2603: IFFALSE 2989
// begin if distanceTab [ i ] [ 2 ] = min then
2605: LD_VAR 0 2
2609: PUSH
2610: LD_VAR 0 1
2614: ARRAY
2615: PUSH
2616: LD_INT 2
2618: ARRAY
2619: PUSH
2620: LD_VAR 0 3
2624: EQUAL
2625: IFFALSE 2987
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2627: LD_VAR 0 2
2631: PUSH
2632: LD_VAR 0 1
2636: ARRAY
2637: PUSH
2638: LD_INT 1
2640: ARRAY
2641: PUSH
2642: LD_EXP 2
2646: EQUAL
2647: IFFALSE 2661
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2649: LD_EXP 2
2653: PPUSH
2654: LD_STRING DCorpses-Bobby-1
2656: PPUSH
2657: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2661: LD_VAR 0 2
2665: PUSH
2666: LD_VAR 0 1
2670: ARRAY
2671: PUSH
2672: LD_INT 1
2674: ARRAY
2675: PUSH
2676: LD_EXP 3
2680: EQUAL
2681: IFFALSE 2695
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2683: LD_EXP 3
2687: PPUSH
2688: LD_STRING DCorpses-Cyrus-1
2690: PPUSH
2691: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2695: LD_VAR 0 2
2699: PUSH
2700: LD_VAR 0 1
2704: ARRAY
2705: PUSH
2706: LD_INT 1
2708: ARRAY
2709: PUSH
2710: LD_EXP 4
2714: EQUAL
2715: IFFALSE 2729
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2717: LD_EXP 4
2721: PPUSH
2722: LD_STRING DCorpses-Lisa-1
2724: PPUSH
2725: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2729: LD_VAR 0 2
2733: PUSH
2734: LD_VAR 0 1
2738: ARRAY
2739: PUSH
2740: LD_INT 1
2742: ARRAY
2743: PUSH
2744: LD_VAR 0 4
2748: PUSH
2749: LD_INT 1
2751: ARRAY
2752: EQUAL
2753: PUSH
2754: LD_VAR 0 4
2758: PUSH
2759: LD_INT 1
2761: ARRAY
2762: PPUSH
2763: CALL_OW 258
2767: PUSH
2768: LD_INT 1
2770: EQUAL
2771: AND
2772: IFFALSE 2790
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2774: LD_VAR 0 4
2778: PUSH
2779: LD_INT 1
2781: ARRAY
2782: PPUSH
2783: LD_STRING DCorpses-Sol1-1
2785: PPUSH
2786: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2790: LD_VAR 0 2
2794: PUSH
2795: LD_VAR 0 1
2799: ARRAY
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PUSH
2805: LD_VAR 0 4
2809: PUSH
2810: LD_INT 1
2812: ARRAY
2813: EQUAL
2814: PUSH
2815: LD_VAR 0 4
2819: PUSH
2820: LD_INT 1
2822: ARRAY
2823: PPUSH
2824: CALL_OW 258
2828: PUSH
2829: LD_INT 2
2831: EQUAL
2832: AND
2833: IFFALSE 2851
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2835: LD_VAR 0 4
2839: PUSH
2840: LD_INT 1
2842: ARRAY
2843: PPUSH
2844: LD_STRING DCorpses-FSol1-1
2846: PPUSH
2847: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2851: LD_VAR 0 2
2855: PUSH
2856: LD_VAR 0 1
2860: ARRAY
2861: PUSH
2862: LD_INT 1
2864: ARRAY
2865: PUSH
2866: LD_VAR 0 4
2870: PUSH
2871: LD_INT 2
2873: ARRAY
2874: EQUAL
2875: PUSH
2876: LD_VAR 0 4
2880: PUSH
2881: LD_INT 2
2883: ARRAY
2884: PPUSH
2885: CALL_OW 258
2889: PUSH
2890: LD_INT 1
2892: EQUAL
2893: AND
2894: IFFALSE 2912
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2896: LD_VAR 0 4
2900: PUSH
2901: LD_INT 2
2903: ARRAY
2904: PPUSH
2905: LD_STRING DCorpses-Sol1-1
2907: PPUSH
2908: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2912: LD_VAR 0 2
2916: PUSH
2917: LD_VAR 0 1
2921: ARRAY
2922: PUSH
2923: LD_INT 1
2925: ARRAY
2926: PUSH
2927: LD_VAR 0 4
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: EQUAL
2936: PUSH
2937: LD_VAR 0 4
2941: PUSH
2942: LD_INT 2
2944: ARRAY
2945: PPUSH
2946: CALL_OW 258
2950: PUSH
2951: LD_INT 2
2953: EQUAL
2954: AND
2955: IFFALSE 2973
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2957: LD_VAR 0 4
2961: PUSH
2962: LD_INT 2
2964: ARRAY
2965: PPUSH
2966: LD_STRING DCorpses-FSol1-1
2968: PPUSH
2969: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2973: LD_EXP 35
2977: PPUSH
2978: LD_INT 150
2980: PPUSH
2981: CALL_OW 234
// break ;
2985: GO 2989
// end ; end ;
2987: GO 2602
2989: POP
2990: POP
// p := 0 ;
2991: LD_ADDR_VAR 0 5
2995: PUSH
2996: LD_INT 0
2998: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2999: LD_INT 35
3001: PPUSH
3002: CALL_OW 67
// p := p + 1 ;
3006: LD_ADDR_VAR 0 5
3010: PUSH
3011: LD_VAR 0 5
3015: PUSH
3016: LD_INT 1
3018: PLUS
3019: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
3020: LD_ADDR_VAR 0 1
3024: PUSH
3025: LD_INT 22
3027: PUSH
3028: LD_INT 1
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 21
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 69
3053: PUSH
3054: LD_EXP 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: DIFF
3062: PUSH
3063: FOR_IN
3064: IFFALSE 3134
// begin ComMoveToArea ( i , DeadCutscene ) ;
3066: LD_VAR 0 1
3070: PPUSH
3071: LD_INT 28
3073: PPUSH
3074: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
3078: LD_EXP 1
3082: PPUSH
3083: LD_INT 30
3085: PPUSH
3086: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_INT 23
3097: PPUSH
3098: LD_INT 11
3100: PPUSH
3101: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
3105: LD_EXP 1
3109: PPUSH
3110: LD_INT 23
3112: PPUSH
3113: LD_INT 11
3115: PPUSH
3116: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
3120: LD_EXP 35
3124: PPUSH
3125: LD_INT 250
3127: PPUSH
3128: CALL_OW 234
// end ;
3132: GO 3063
3134: POP
3135: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3136: LD_EXP 1
3140: PPUSH
3141: LD_INT 30
3143: PPUSH
3144: CALL_OW 308
3148: PUSH
3149: LD_VAR 0 5
3153: PUSH
3154: LD_INT 16
3156: GREATEREQUAL
3157: OR
3158: IFFALSE 2999
// wait ( 0 0$1 ) ;
3160: LD_INT 35
3162: PPUSH
3163: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING DCorpses-JMM-1
3174: PPUSH
3175: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3179: LD_EXP 35
3183: PPUSH
3184: LD_INT 100
3186: PPUSH
3187: CALL_OW 234
// if IsOK ( Khatam ) then
3191: LD_EXP 5
3195: PPUSH
3196: CALL_OW 302
3200: IFFALSE 3337
// begin repeat wait ( 0 0$1 ) ;
3202: LD_INT 35
3204: PPUSH
3205: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3209: LD_EXP 5
3213: PPUSH
3214: LD_EXP 35
3218: PPUSH
3219: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3223: LD_EXP 5
3227: PPUSH
3228: LD_EXP 35
3232: PPUSH
3233: CALL_OW 296
3237: PUSH
3238: LD_INT 2
3240: LESS
3241: IFFALSE 3202
// spotCorpses = 0 ;
3243: LD_ADDR_EXP 32
3247: PUSH
3248: LD_INT 0
3250: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3251: LD_EXP 35
3255: PPUSH
3256: LD_INT 10
3258: PPUSH
3259: CALL_OW 234
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// KillUnit ( DyingSold ) ;
3270: LD_EXP 35
3274: PPUSH
3275: CALL_OW 66
// wait ( 0 0$1 ) ;
3279: LD_INT 35
3281: PPUSH
3282: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3286: LD_EXP 1
3290: PUSH
3291: LD_EXP 5
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PPUSH
3300: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3304: LD_EXP 5
3308: PPUSH
3309: LD_EXP 1
3313: PPUSH
3314: CALL_OW 119
// wait ( 0 0$1 ) ;
3318: LD_INT 35
3320: PPUSH
3321: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3325: LD_EXP 5
3329: PPUSH
3330: LD_STRING DCorpses-Khat-1
3332: PPUSH
3333: CALL_OW 88
// end ; InGameOff ;
3337: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3341: LD_EXP 1
3345: PPUSH
3346: LD_STRING DCorpses-JMM-2
3348: PPUSH
3349: CALL_OW 88
// end ;
3353: PPOPN 5
3355: END
// every 0 0$1 trigger spotCorpses = 1 do
3356: LD_EXP 32
3360: PUSH
3361: LD_INT 1
3363: EQUAL
3364: IFFALSE 3382
3366: GO 3368
3368: DISABLE
// begin enable ;
3369: ENABLE
// SetLives ( DyingSold , 10 ) ;
3370: LD_EXP 35
3374: PPUSH
3375: LD_INT 10
3377: PPUSH
3378: CALL_OW 234
// end ;
3382: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3383: LD_INT 8
3385: PPUSH
3386: LD_INT 22
3388: PUSH
3389: LD_INT 1
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: PPUSH
3396: CALL_OW 70
3400: PUSH
3401: LD_INT 22
3403: PUSH
3404: LD_INT 1
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: PPUSH
3411: CALL_OW 69
3415: PPUSH
3416: LD_EXP 7
3420: PPUSH
3421: CALL_OW 74
3425: PPUSH
3426: LD_EXP 7
3430: PPUSH
3431: CALL_OW 296
3435: PUSH
3436: LD_INT 13
3438: LESS
3439: OR
3440: IFFALSE 3621
3442: GO 3444
3444: DISABLE
3445: LD_INT 0
3447: PPUSH
// begin InGameOn ;
3448: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3452: LD_EXP 7
3456: PPUSH
3457: LD_INT 250
3459: PPUSH
3460: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 , 700 ] [ Difficulty ] ) ;
3464: LD_EXP 6
3468: PPUSH
3469: LD_INT 1000
3471: PUSH
3472: LD_INT 800
3474: PUSH
3475: LD_INT 750
3477: PUSH
3478: LD_INT 700
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: PUSH
3487: LD_OWVAR 67
3491: ARRAY
3492: PPUSH
3493: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3497: LD_INT 3
3499: PPUSH
3500: LD_INT 4
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3513: LD_EXP 6
3517: PUSH
3518: LD_EXP 7
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PPUSH
3527: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) union FilterAllUnits ( [ f_side , 4 ] ) do
3531: LD_ADDR_VAR 0 1
3535: PUSH
3536: LD_INT 9
3538: PPUSH
3539: LD_INT 22
3541: PUSH
3542: LD_INT 3
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PPUSH
3549: CALL_OW 70
3553: PUSH
3554: LD_INT 22
3556: PUSH
3557: LD_INT 4
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PPUSH
3564: CALL_OW 69
3568: UNION
3569: PUSH
3570: FOR_IN
3571: IFFALSE 3584
// ComFree ( i ) ;
3573: LD_VAR 0 1
3577: PPUSH
3578: CALL_OW 139
3582: GO 3570
3584: POP
3585: POP
// wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// InGameOff ;
3593: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3597: LD_EXP 6
3601: PPUSH
3602: LD_STRING DF-Sol1-1
3604: PPUSH
3605: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3609: LD_EXP 1
3613: PPUSH
3614: LD_STRING DF-JMM-1
3616: PPUSH
3617: CALL_OW 88
// end ;
3621: PPOPN 1
3623: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3624: LD_INT 19
3626: PPUSH
3627: LD_INT 22
3629: PUSH
3630: LD_INT 3
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 70
3641: PUSH
3642: LD_INT 0
3644: EQUAL
3645: IFFALSE 3754
3647: GO 3649
3649: DISABLE
// begin if not IsDead ( Brian ) then
3650: LD_EXP 6
3654: PPUSH
3655: CALL_OW 301
3659: NOT
3660: IFFALSE 3674
// SetSide ( Brian , 1 ) ;
3662: LD_EXP 6
3666: PPUSH
3667: LD_INT 1
3669: PPUSH
3670: CALL_OW 235
// if not IsDead ( Jerry ) then
3674: LD_EXP 7
3678: PPUSH
3679: CALL_OW 301
3683: NOT
3684: IFFALSE 3698
// SetSide ( Jerry , 1 ) ;
3686: LD_EXP 7
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3698: LD_INT 22
3700: PUSH
3701: LD_INT 1
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PUSH
3708: LD_INT 25
3710: PUSH
3711: LD_INT 4
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PPUSH
3722: CALL_OW 69
3726: IFFALSE 3742
// Say ( JMM , DFa-JMM-1 ) else
3728: LD_EXP 1
3732: PPUSH
3733: LD_STRING DFa-JMM-1
3735: PPUSH
3736: CALL_OW 88
3740: GO 3754
// Say ( JMM , DFa-JMM-1a ) ;
3742: LD_EXP 1
3746: PPUSH
3747: LD_STRING DFa-JMM-1a
3749: PPUSH
3750: CALL_OW 88
// end ;
3754: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3755: LD_INT 19
3757: PPUSH
3758: LD_INT 22
3760: PUSH
3761: LD_INT 3
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PPUSH
3768: CALL_OW 70
3772: PUSH
3773: LD_INT 0
3775: EQUAL
3776: PUSH
3777: LD_EXP 6
3781: PPUSH
3782: CALL_OW 302
3786: NOT
3787: AND
3788: IFFALSE 3874
3790: GO 3792
3792: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3793: LD_INT 35
3795: PPUSH
3796: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3800: LD_EXP 6
3804: PPUSH
3805: CALL_OW 256
3809: PUSH
3810: LD_INT 250
3812: GREATER
3813: IFFALSE 3793
// Say ( Brian , DFb-Sol1-1 ) ;
3815: LD_EXP 6
3819: PPUSH
3820: LD_STRING DFb-Sol1-1
3822: PPUSH
3823: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3827: LD_EXP 6
3831: PPUSH
3832: LD_INT 78
3834: PPUSH
3835: LD_INT 74
3837: PPUSH
3838: CALL_OW 111
// if IsDead ( Jerry ) then
3842: LD_EXP 7
3846: PPUSH
3847: CALL_OW 301
3851: IFFALSE 3867
// Say ( Brian , DFb-Sol1-1a ) else
3853: LD_EXP 6
3857: PPUSH
3858: LD_STRING DFb-Sol1-1a
3860: PPUSH
3861: CALL_OW 88
3865: GO 3874
// SetAchievement ( ACH_JERRY ) ;
3867: LD_STRING ACH_JERRY
3869: PPUSH
3870: CALL_OW 543
// end ;
3874: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3875: LD_INT 22
3877: PUSH
3878: LD_INT 1
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PUSH
3885: LD_INT 21
3887: PUSH
3888: LD_INT 2
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PPUSH
3899: CALL_OW 69
3903: PUSH
3904: LD_INT 0
3906: EQUAL
3907: IFFALSE 3999
3909: GO 3911
3911: DISABLE
3912: LD_INT 0
3914: PPUSH
// begin enable ;
3915: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3916: LD_ADDR_VAR 0 1
3920: PUSH
3921: LD_INT 22
3923: PUSH
3924: LD_INT 3
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 21
3933: PUSH
3934: LD_INT 3
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: LD_INT 30
3943: PUSH
3944: LD_INT 31
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: PPUSH
3956: CALL_OW 69
3960: PUSH
3961: FOR_IN
3962: IFFALSE 3997
// begin if See ( 1 , i ) then
3964: LD_INT 1
3966: PPUSH
3967: LD_VAR 0 1
3971: PPUSH
3972: CALL_OW 292
3976: IFFALSE 3995
// begin disable ;
3978: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3979: LD_EXP 1
3983: PPUSH
3984: LD_STRING DX1-JMM-1
3986: PPUSH
3987: CALL_OW 88
// exit ;
3991: POP
3992: POP
3993: GO 3999
// end ; end ;
3995: GO 3961
3997: POP
3998: POP
// end ;
3999: PPOPN 1
4001: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 11
4007: PPUSH
4008: CALL_OW 294
4012: IFFALSE 4275
4014: GO 4016
4016: DISABLE
4017: LD_INT 0
4019: PPUSH
4020: PPUSH
4021: PPUSH
// begin DialogueOn ;
4022: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
4026: LD_INT 11
4028: PPUSH
4029: LD_INT 22
4031: PUSH
4032: LD_INT 3
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PUSH
4039: LD_INT 21
4041: PUSH
4042: LD_INT 1
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PPUSH
4053: CALL_OW 70
4057: PUSH
4058: LD_INT 1
4060: ARRAY
4061: PPUSH
4062: LD_STRING DX3-Rus1-1
4064: PPUSH
4065: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
4069: LD_EXP 1
4073: PPUSH
4074: LD_STRING DX3-JMM-1
4076: PPUSH
4077: CALL_OW 88
// DialogueOff ;
4081: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
4085: LD_ADDR_VAR 0 1
4089: PUSH
4090: LD_INT 11
4092: PPUSH
4093: LD_INT 22
4095: PUSH
4096: LD_INT 3
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: LD_INT 25
4105: PUSH
4106: LD_INT 1
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PPUSH
4117: CALL_OW 70
4121: PUSH
4122: FOR_IN
4123: IFFALSE 4143
// southBaseDefenders = southBaseDefenders ^ i ;
4125: LD_ADDR_EXP 25
4129: PUSH
4130: LD_EXP 25
4134: PUSH
4135: LD_VAR 0 1
4139: ADD
4140: ST_TO_ADDR
4141: GO 4122
4143: POP
4144: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 , 0 0$2 ] [ Difficulty ] ) ;
4145: LD_INT 175
4147: PUSH
4148: LD_INT 140
4150: PUSH
4151: LD_INT 105
4153: PUSH
4154: LD_INT 70
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_OWVAR 67
4167: ARRAY
4168: PPUSH
4169: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4173: LD_ADDR_VAR 0 3
4177: PUSH
4178: LD_INT 22
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 21
4190: PUSH
4191: LD_INT 1
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 25
4200: PUSH
4201: LD_INT 3
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: LIST
4212: PPUSH
4213: CALL_OW 69
4217: ST_TO_ADDR
// if not mech then
4218: LD_VAR 0 3
4222: NOT
4223: IFFALSE 4227
// exit ;
4225: GO 4275
// ComExitBuilding ( mech ) ;
4227: LD_VAR 0 3
4231: PPUSH
4232: CALL_OW 122
// wait ( 0 0$1 ) ;
4236: LD_INT 35
4238: PPUSH
4239: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4243: LD_VAR 0 3
4247: PUSH
4248: LD_INT 1
4250: ARRAY
4251: PPUSH
4252: LD_INT 5
4254: PPUSH
4255: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4259: LD_VAR 0 3
4263: PUSH
4264: LD_INT 2
4266: ARRAY
4267: PPUSH
4268: LD_INT 4
4270: PPUSH
4271: CALL_OW 180
// end ;
4275: PPOPN 3
4277: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4278: LD_INT 1
4280: PPUSH
4281: LD_INT 5
4283: PPUSH
4284: CALL_OW 292
4288: PUSH
4289: LD_INT 1
4291: PPUSH
4292: LD_INT 4
4294: PPUSH
4295: CALL_OW 292
4299: OR
4300: IFFALSE 4384
4302: GO 4304
4304: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4305: LD_INT 5
4307: PUSH
4308: LD_INT 4
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PPUSH
4315: CALL_OW 85
// if IsOK ( Bobby ) then
4319: LD_EXP 2
4323: PPUSH
4324: CALL_OW 302
4328: IFFALSE 4364
// begin DialogueOn ;
4330: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4334: LD_EXP 2
4338: PPUSH
4339: LD_STRING DX2-Bobby-1
4341: PPUSH
4342: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4346: LD_EXP 1
4350: PPUSH
4351: LD_STRING DX2-JMM-1a
4353: PPUSH
4354: CALL_OW 88
// DialogueOff ;
4358: CALL_OW 7
// end else
4362: GO 4384
// begin DialogueOn ;
4364: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4368: LD_EXP 1
4372: PPUSH
4373: LD_STRING DX2-JMM-1
4375: PPUSH
4376: CALL_OW 88
// DialogueOff ;
4380: CALL_OW 7
// end ; end ;
4384: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4385: LD_INT 22
4387: PUSH
4388: LD_INT 1
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PUSH
4395: LD_INT 23
4397: PUSH
4398: LD_INT 3
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PUSH
4405: LD_INT 21
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 34
4417: PUSH
4418: LD_INT 42
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: IFFALSE 4856
4437: GO 4439
4439: DISABLE
4440: LD_INT 0
4442: PPUSH
4443: PPUSH
4444: PPUSH
4445: PPUSH
4446: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4447: LD_ADDR_VAR 0 1
4451: PUSH
4452: LD_INT 22
4454: PUSH
4455: LD_INT 1
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PUSH
4462: LD_INT 23
4464: PUSH
4465: LD_INT 3
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 2
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 34
4484: PUSH
4485: LD_INT 42
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: PPUSH
4498: CALL_OW 69
4502: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4503: LD_ADDR_VAR 0 3
4507: PUSH
4508: LD_INT 22
4510: PUSH
4511: LD_INT 1
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: LD_INT 21
4520: PUSH
4521: LD_INT 1
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: LD_INT 26
4530: PUSH
4531: LD_INT 1
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: PPUSH
4543: CALL_OW 69
4547: PUSH
4548: LD_EXP 1
4552: PUSH
4553: LD_EXP 3
4557: PUSH
4558: LD_EXP 2
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: LIST
4567: DIFF
4568: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4569: LD_ADDR_VAR 0 4
4573: PUSH
4574: LD_INT 22
4576: PUSH
4577: LD_INT 1
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 21
4586: PUSH
4587: LD_INT 1
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 26
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 69
4613: PUSH
4614: LD_EXP 4
4618: PUSH
4619: EMPTY
4620: LIST
4621: DIFF
4622: ST_TO_ADDR
// if not tmp then
4623: LD_VAR 0 1
4627: NOT
4628: IFFALSE 4632
// exit ;
4630: GO 4856
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4632: LD_ADDR_VAR 0 2
4636: PUSH
4637: LD_VAR 0 1
4641: PUSH
4642: LD_INT 1
4644: ARRAY
4645: PPUSH
4646: CALL_OW 311
4650: ST_TO_ADDR
// if not speaker then
4651: LD_VAR 0 2
4655: NOT
4656: IFFALSE 4660
// exit ;
4658: GO 4856
// DialogueOn ;
4660: CALL_OW 6
// if speaker = JMM then
4664: LD_VAR 0 2
4668: PUSH
4669: LD_EXP 1
4673: EQUAL
4674: IFFALSE 4708
// begin if Lisa then
4676: LD_EXP 4
4680: IFFALSE 4694
// Say ( Lisa , DX2b-Lisa-1 ) ;
4682: LD_EXP 4
4686: PPUSH
4687: LD_STRING DX2b-Lisa-1
4689: PPUSH
4690: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4694: LD_EXP 1
4698: PPUSH
4699: LD_STRING DX2b-JMM-1
4701: PPUSH
4702: CALL_OW 88
// end else
4706: GO 4852
// begin Say ( JMM , DX2a-JMM-1 ) ;
4708: LD_EXP 1
4712: PPUSH
4713: LD_STRING DX2a-JMM-1
4715: PPUSH
4716: CALL_OW 88
// if speaker = Bobby then
4720: LD_VAR 0 2
4724: PUSH
4725: LD_EXP 2
4729: EQUAL
4730: IFFALSE 4744
// Say ( Bobby , DX2a-Bobby-1 ) ;
4732: LD_EXP 2
4736: PPUSH
4737: LD_STRING DX2a-Bobby-1
4739: PPUSH
4740: CALL_OW 88
// if speaker = Cyrus then
4744: LD_VAR 0 2
4748: PUSH
4749: LD_EXP 3
4753: EQUAL
4754: IFFALSE 4768
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4756: LD_EXP 3
4760: PPUSH
4761: LD_STRING DX2a-Cyrus-1
4763: PPUSH
4764: CALL_OW 88
// if speaker = Lisa then
4768: LD_VAR 0 2
4772: PUSH
4773: LD_EXP 4
4777: EQUAL
4778: IFFALSE 4792
// Say ( Lisa , DX2a-Lisa-1 ) ;
4780: LD_EXP 4
4784: PPUSH
4785: LD_STRING DX2a-Lisa-1
4787: PPUSH
4788: CALL_OW 88
// if speaker in temp1 then
4792: LD_VAR 0 2
4796: PUSH
4797: LD_VAR 0 3
4801: IN
4802: IFFALSE 4816
// Say ( speaker , DX2a-Sol1-1 ) ;
4804: LD_VAR 0 2
4808: PPUSH
4809: LD_STRING DX2a-Sol1-1
4811: PPUSH
4812: CALL_OW 88
// if speaker in temp2 then
4816: LD_VAR 0 2
4820: PUSH
4821: LD_VAR 0 4
4825: IN
4826: IFFALSE 4840
// Say ( speaker , DX2a-FSol1-1 ) ;
4828: LD_VAR 0 2
4832: PPUSH
4833: LD_STRING DX2a-FSol1-1
4835: PPUSH
4836: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4840: LD_EXP 1
4844: PPUSH
4845: LD_STRING DX2a-JMM-2
4847: PPUSH
4848: CALL_OW 88
// end ; DialogueOff ;
4852: CALL_OW 7
// end ;
4856: PPOPN 5
4858: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4859: LD_INT 1
4861: PPUSH
4862: CALL_OW 255
4866: PUSH
4867: LD_INT 1
4869: EQUAL
4870: PUSH
4871: LD_INT 10
4873: PPUSH
4874: CALL_OW 255
4878: PUSH
4879: LD_INT 1
4881: EQUAL
4882: OR
4883: IFFALSE 4943
4885: GO 4887
4887: DISABLE
// begin DialogueOn ;
4888: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4892: LD_EXP 1
4896: PPUSH
4897: LD_STRING D3-JMM-1
4899: PPUSH
4900: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4904: LD_EXP 9
4908: PPUSH
4909: LD_STRING D3-Pow-1
4911: PPUSH
4912: CALL_OW 94
// if IsOK ( Cyrus ) then
4916: LD_EXP 3
4920: PPUSH
4921: CALL_OW 302
4925: IFFALSE 4939
// Say ( Cyrus , D3-Cyrus-1 ) ;
4927: LD_EXP 3
4931: PPUSH
4932: LD_STRING D3-Cyrus-1
4934: PPUSH
4935: CALL_OW 88
// DialogueOff ;
4939: CALL_OW 7
// end ;
4943: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , tmp , i ;
4944: LD_INT 1
4946: PPUSH
4947: CALL_OW 255
4951: PUSH
4952: LD_INT 1
4954: EQUAL
4955: PUSH
4956: LD_INT 10
4958: PPUSH
4959: CALL_OW 255
4963: PUSH
4964: LD_INT 1
4966: EQUAL
4967: AND
4968: IFFALSE 6358
4970: GO 4972
4972: DISABLE
4973: LD_INT 0
4975: PPUSH
4976: PPUSH
4977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4978: LD_ADDR_VAR 0 2
4982: PUSH
4983: LD_INT 22
4985: PUSH
4986: LD_INT 3
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 21
4995: PUSH
4996: LD_INT 1
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PPUSH
5007: CALL_OW 69
5011: ST_TO_ADDR
// if tmp then
5012: LD_VAR 0 2
5016: IFFALSE 5077
// begin for i in tmp do
5018: LD_ADDR_VAR 0 3
5022: PUSH
5023: LD_VAR 0 2
5027: PUSH
5028: FOR_IN
5029: IFFALSE 5075
// begin if IsInUnit ( i ) then
5031: LD_VAR 0 3
5035: PPUSH
5036: CALL_OW 310
5040: IFFALSE 5051
// ComExitBuilding ( i ) ;
5042: LD_VAR 0 3
5046: PPUSH
5047: CALL_OW 122
// wait ( 0 0$1 ) ;
5051: LD_INT 35
5053: PPUSH
5054: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
5058: LD_VAR 0 3
5062: PPUSH
5063: LD_INT 54
5065: PPUSH
5066: LD_INT 17
5068: PPUSH
5069: CALL_OW 174
// end ;
5073: GO 5028
5075: POP
5076: POP
// end ; wait ( 0 0$03 ) ;
5077: LD_INT 105
5079: PPUSH
5080: CALL_OW 67
// DialogueOn ;
5084: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5088: LD_EXP 1
5092: PPUSH
5093: LD_STRING D3a-JMM-1
5095: PPUSH
5096: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5100: LD_EXP 9
5104: PPUSH
5105: LD_STRING D3a-Pow-1
5107: PPUSH
5108: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5112: LD_EXP 1
5116: PPUSH
5117: LD_STRING D3a-JMM-2
5119: PPUSH
5120: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5124: LD_EXP 9
5128: PPUSH
5129: LD_STRING D3a-Pow-2
5131: PPUSH
5132: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5136: LD_EXP 1
5140: PPUSH
5141: LD_STRING D3a-JMM-3
5143: PPUSH
5144: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5148: LD_EXP 9
5152: PPUSH
5153: LD_STRING D3a-Pow-3
5155: PPUSH
5156: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5160: LD_EXP 1
5164: PPUSH
5165: LD_STRING D3a-JMM-4
5167: PPUSH
5168: CALL_OW 88
// DialogueOff ;
5172: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5176: LD_STRING M2
5178: PPUSH
5179: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5183: LD_EXP 1
5187: PPUSH
5188: LD_STRING D3b-JMM-1
5190: PPUSH
5191: CALL_OW 88
// Hint ( Depot2 ) ;
5195: LD_STRING Depot2
5197: PPUSH
5198: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5202: LD_INT 35
5204: PPUSH
5205: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5209: LD_INT 22
5211: PPUSH
5212: LD_INT 22
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 25
5224: PUSH
5225: LD_INT 2
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PPUSH
5236: CALL_OW 70
5240: PUSH
5241: LD_INT 22
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 21
5253: PUSH
5254: LD_INT 1
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL_OW 69
5269: NOT
5270: AND
5271: IFFALSE 5202
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5273: LD_ADDR_VAR 0 1
5277: PUSH
5278: LD_INT 22
5280: PUSH
5281: LD_INT 1
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: LD_INT 23
5290: PUSH
5291: LD_INT 1
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PUSH
5298: LD_INT 25
5300: PUSH
5301: LD_INT 2
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: PUSH
5308: LD_INT 50
5310: PUSH
5311: EMPTY
5312: LIST
5313: PUSH
5314: LD_INT 56
5316: PUSH
5317: EMPTY
5318: LIST
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: PPUSH
5327: CALL_OW 69
5331: PUSH
5332: LD_EXP 1
5336: PUSH
5337: LD_EXP 5
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: DIFF
5346: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5347: LD_INT 35
5349: PPUSH
5350: CALL_OW 67
// until temp > 0 ;
5354: LD_VAR 0 1
5358: PUSH
5359: LD_INT 0
5361: GREATER
5362: IFFALSE 5273
// wait ( 0 0$5 ) ;
5364: LD_INT 175
5366: PPUSH
5367: CALL_OW 67
// PrepareRussianHeroes ;
5371: CALL 11584 0 0
// InGameOn ;
5375: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5379: LD_EXP 8
5383: PPUSH
5384: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5388: LD_EXP 1
5392: PUSH
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PPUSH
5406: LD_EXP 8
5410: PPUSH
5411: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5415: LD_EXP 8
5419: PPUSH
5420: LD_VAR 0 1
5424: PUSH
5425: LD_INT 1
5427: ARRAY
5428: PPUSH
5429: CALL_OW 119
// wait ( 0 0$02 ) ;
5433: LD_INT 70
5435: PPUSH
5436: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5440: LD_EXP 8
5444: PPUSH
5445: LD_STRING D4-Mikh-1
5447: PPUSH
5448: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5452: LD_VAR 0 1
5456: PUSH
5457: LD_INT 1
5459: ARRAY
5460: PPUSH
5461: CALL_OW 258
5465: PUSH
5466: LD_INT 1
5468: EQUAL
5469: IFFALSE 5487
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5471: LD_VAR 0 1
5475: PUSH
5476: LD_INT 1
5478: ARRAY
5479: PPUSH
5480: LD_STRING D4-Sol1-1
5482: PPUSH
5483: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5487: LD_VAR 0 1
5491: PUSH
5492: LD_INT 1
5494: ARRAY
5495: PPUSH
5496: CALL_OW 258
5500: PUSH
5501: LD_INT 2
5503: EQUAL
5504: IFFALSE 5522
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5506: LD_VAR 0 1
5510: PUSH
5511: LD_INT 1
5513: ARRAY
5514: PPUSH
5515: LD_STRING D4-FSol1-1
5517: PPUSH
5518: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5522: LD_EXP 8
5526: PPUSH
5527: LD_STRING D4-Mikh-2
5529: PPUSH
5530: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5534: LD_VAR 0 1
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PPUSH
5543: CALL_OW 258
5547: PUSH
5548: LD_INT 1
5550: EQUAL
5551: IFFALSE 5569
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5553: LD_VAR 0 1
5557: PUSH
5558: LD_INT 1
5560: ARRAY
5561: PPUSH
5562: LD_STRING D4-Sol1-2
5564: PPUSH
5565: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5569: LD_VAR 0 1
5573: PUSH
5574: LD_INT 1
5576: ARRAY
5577: PPUSH
5578: CALL_OW 258
5582: PUSH
5583: LD_INT 2
5585: EQUAL
5586: IFFALSE 5604
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5588: LD_VAR 0 1
5592: PUSH
5593: LD_INT 1
5595: ARRAY
5596: PPUSH
5597: LD_STRING D4-FSol1-2
5599: PPUSH
5600: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5604: LD_EXP 8
5608: PPUSH
5609: LD_STRING D4-Mikh-3
5611: PPUSH
5612: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5616: LD_VAR 0 1
5620: PUSH
5621: LD_INT 1
5623: ARRAY
5624: PPUSH
5625: CALL_OW 258
5629: PUSH
5630: LD_INT 1
5632: EQUAL
5633: IFFALSE 5651
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5635: LD_VAR 0 1
5639: PUSH
5640: LD_INT 1
5642: ARRAY
5643: PPUSH
5644: LD_STRING D4-Sol1-3
5646: PPUSH
5647: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5651: LD_VAR 0 1
5655: PUSH
5656: LD_INT 1
5658: ARRAY
5659: PPUSH
5660: CALL_OW 258
5664: PUSH
5665: LD_INT 2
5667: EQUAL
5668: IFFALSE 5686
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5670: LD_VAR 0 1
5674: PUSH
5675: LD_INT 1
5677: ARRAY
5678: PPUSH
5679: LD_STRING D4-FSol1-3
5681: PPUSH
5682: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5686: LD_EXP 8
5690: PPUSH
5691: LD_STRING D4-Mikh-4
5693: PPUSH
5694: CALL_OW 88
// case Query ( Qs1 ) of 1 :
5698: LD_STRING Qs1
5700: PPUSH
5701: CALL_OW 97
5705: PUSH
5706: LD_INT 1
5708: DOUBLE
5709: EQUAL
5710: IFTRUE 5714
5712: GO 5749
5714: POP
// begin InGameOff ;
5715: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5719: LD_INT 1
5721: PPUSH
5722: LD_INT 6
5724: PPUSH
5725: LD_INT 2
5727: PPUSH
5728: LD_INT 1
5730: PPUSH
5731: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5735: LD_EXP 8
5739: PPUSH
5740: LD_INT 17
5742: PPUSH
5743: CALL_OW 113
// end ; 2 :
5747: GO 6342
5749: LD_INT 2
5751: DOUBLE
5752: EQUAL
5753: IFTRUE 5757
5755: GO 6307
5757: POP
// begin repeat wait ( 0 0$1 ) ;
5758: LD_INT 35
5760: PPUSH
5761: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5765: LD_VAR 0 1
5769: PUSH
5770: LD_INT 1
5772: ARRAY
5773: PPUSH
5774: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5778: LD_VAR 0 1
5782: PUSH
5783: LD_INT 1
5785: ARRAY
5786: PPUSH
5787: LD_EXP 1
5791: PPUSH
5792: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5796: LD_EXP 8
5800: PPUSH
5801: LD_EXP 1
5805: PPUSH
5806: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5810: LD_EXP 1
5814: PPUSH
5815: LD_EXP 8
5819: PPUSH
5820: CALL_OW 296
5824: PUSH
5825: LD_INT 5
5827: LESS
5828: IFFALSE 5758
// ComTurnUnit ( Mikhail , JMM ) ;
5830: LD_EXP 8
5834: PPUSH
5835: LD_EXP 1
5839: PPUSH
5840: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5844: LD_EXP 1
5848: PPUSH
5849: LD_STRING D4b-JMM-1
5851: PPUSH
5852: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5856: LD_EXP 8
5860: PPUSH
5861: LD_STRING D4b-Mikh-1
5863: PPUSH
5864: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5868: LD_EXP 1
5872: PPUSH
5873: LD_STRING D4b-JMM-2
5875: PPUSH
5876: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5880: LD_EXP 8
5884: PPUSH
5885: LD_STRING D4b-Mikh-2
5887: PPUSH
5888: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5892: LD_EXP 1
5896: PPUSH
5897: LD_STRING D4b-JMM-3
5899: PPUSH
5900: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5904: LD_EXP 8
5908: PPUSH
5909: LD_STRING D4b-Mikh-3
5911: PPUSH
5912: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5916: LD_EXP 1
5920: PPUSH
5921: LD_STRING D4b-JMM-4
5923: PPUSH
5924: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5928: LD_EXP 8
5932: PPUSH
5933: LD_STRING D4b-Mikh-4
5935: PPUSH
5936: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5940: LD_EXP 1
5944: PPUSH
5945: LD_STRING D4b-JMM-5
5947: PPUSH
5948: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5952: LD_EXP 8
5956: PPUSH
5957: LD_STRING D4b-Mikh-5
5959: PPUSH
5960: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5964: LD_EXP 1
5968: PPUSH
5969: LD_STRING D4b-JMM-6
5971: PPUSH
5972: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5976: LD_EXP 8
5980: PPUSH
5981: LD_STRING D4b-Mikh-6
5983: PPUSH
5984: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5988: LD_EXP 1
5992: PPUSH
5993: LD_STRING D4b-JMM-7
5995: PPUSH
5996: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
6000: LD_EXP 8
6004: PPUSH
6005: LD_STRING D4b-Mikh-7
6007: PPUSH
6008: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6012: LD_VAR 0 1
6016: PUSH
6017: LD_INT 1
6019: ARRAY
6020: PPUSH
6021: CALL_OW 258
6025: PUSH
6026: LD_INT 1
6028: EQUAL
6029: IFFALSE 6047
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6031: LD_VAR 0 1
6035: PUSH
6036: LD_INT 1
6038: ARRAY
6039: PPUSH
6040: LD_STRING D4b-Sol1-7
6042: PPUSH
6043: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6047: LD_VAR 0 1
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PPUSH
6056: CALL_OW 258
6060: PUSH
6061: LD_INT 2
6063: EQUAL
6064: IFFALSE 6082
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6066: LD_VAR 0 1
6070: PUSH
6071: LD_INT 1
6073: ARRAY
6074: PPUSH
6075: LD_STRING D4b-FSol1-7
6077: PPUSH
6078: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6082: LD_EXP 1
6086: PPUSH
6087: LD_STRING D4b-JMM-8
6089: PPUSH
6090: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6094: LD_VAR 0 1
6098: PUSH
6099: LD_INT 1
6101: ARRAY
6102: PPUSH
6103: CALL_OW 258
6107: PUSH
6108: LD_INT 1
6110: EQUAL
6111: IFFALSE 6129
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6113: LD_VAR 0 1
6117: PUSH
6118: LD_INT 1
6120: ARRAY
6121: PPUSH
6122: LD_STRING D4b-Sol1-8
6124: PPUSH
6125: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6129: LD_VAR 0 1
6133: PUSH
6134: LD_INT 1
6136: ARRAY
6137: PPUSH
6138: CALL_OW 258
6142: PUSH
6143: LD_INT 2
6145: EQUAL
6146: IFFALSE 6164
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6148: LD_VAR 0 1
6152: PUSH
6153: LD_INT 1
6155: ARRAY
6156: PPUSH
6157: LD_STRING D4b-FSol1-8
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6164: LD_EXP 1
6168: PPUSH
6169: LD_STRING D4b-JMM-9
6171: PPUSH
6172: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6176: LD_EXP 8
6180: PPUSH
6181: LD_INT 1
6183: PPUSH
6184: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6188: LD_ADDR_VAR 0 3
6192: PUSH
6193: LD_INT 22
6195: PUSH
6196: LD_INT 1
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: PUSH
6203: EMPTY
6204: LIST
6205: PPUSH
6206: CALL_OW 69
6210: PUSH
6211: FOR_IN
6212: IFFALSE 6225
// ComFree ( i ) ;
6214: LD_VAR 0 3
6218: PPUSH
6219: CALL_OW 139
6223: GO 6211
6225: POP
6226: POP
// repeat wait ( 0 0$1 ) ;
6227: LD_INT 35
6229: PPUSH
6230: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6234: LD_EXP 8
6238: PPUSH
6239: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6243: LD_EXP 8
6247: PUSH
6248: LD_VAR 0 1
6252: PUSH
6253: LD_INT 1
6255: ARRAY
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PPUSH
6261: LD_INT 1
6263: PPUSH
6264: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6268: LD_EXP 8
6272: PPUSH
6273: CALL_OW 310
6277: IFFALSE 6227
// mikhailDepot = IsInUnit ( Mikhail ) ;
6279: LD_ADDR_EXP 23
6283: PUSH
6284: LD_EXP 8
6288: PPUSH
6289: CALL_OW 310
6293: ST_TO_ADDR
// InGameOff ;
6294: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6298: LD_STRING M3
6300: PPUSH
6301: CALL_OW 337
// end ; 3 :
6305: GO 6342
6307: LD_INT 3
6309: DOUBLE
6310: EQUAL
6311: IFTRUE 6315
6313: GO 6341
6315: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6316: LD_EXP 8
6320: PPUSH
6321: LD_INT 17
6323: PPUSH
6324: CALL_OW 113
// wait ( 0 0$3 ) ;
6328: LD_INT 105
6330: PPUSH
6331: CALL_OW 67
// InGameOff ;
6335: CALL_OW 9
// end ; end ;
6339: GO 6342
6341: POP
// PrepareTigers ;
6342: CALL 14881 0 0
// RussianTrap ;
6346: CALL 9980 0 0
// tigersRespawn = 1 ;
6350: LD_ADDR_EXP 30
6354: PUSH
6355: LD_INT 1
6357: ST_TO_ADDR
// end ;
6358: PPOPN 3
6360: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6361: LD_INT 1
6363: PPUSH
6364: CALL_OW 255
6368: PUSH
6369: LD_INT 1
6371: EQUAL
6372: PUSH
6373: LD_INT 10
6375: PPUSH
6376: CALL_OW 255
6380: PUSH
6381: LD_INT 1
6383: EQUAL
6384: AND
6385: PUSH
6386: LD_INT 1
6388: PPUSH
6389: CALL_OW 274
6393: PPUSH
6394: LD_INT 1
6396: PPUSH
6397: CALL_OW 275
6401: PUSH
6402: LD_INT 100
6404: GREATEREQUAL
6405: AND
6406: IFFALSE 6555
6408: GO 6410
6410: DISABLE
6411: LD_INT 0
6413: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6414: LD_INT 2100
6416: PPUSH
6417: LD_INT 4200
6419: PPUSH
6420: CALL_OW 12
6424: PUSH
6425: LD_INT 1050
6427: PLUS
6428: PPUSH
6429: CALL_OW 67
// PrepareCargoBays ;
6433: CALL 12767 0 0
// cargoRespawn = 1 ;
6437: LD_ADDR_EXP 28
6441: PUSH
6442: LD_INT 1
6444: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6445: LD_ADDR_VAR 0 1
6449: PUSH
6450: LD_EXP 15
6454: PUSH
6455: LD_EXP 16
6459: PUSH
6460: LD_EXP 17
6464: PUSH
6465: LD_EXP 18
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6476: LD_VAR 0 1
6480: PPUSH
6481: LD_INT 17
6483: PPUSH
6484: LD_INT 10
6486: PPUSH
6487: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6491: LD_VAR 0 1
6495: PPUSH
6496: LD_INT 36
6498: PPUSH
6499: LD_INT 13
6501: PPUSH
6502: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6506: LD_VAR 0 1
6510: PPUSH
6511: LD_INT 40
6513: PPUSH
6514: LD_INT 20
6516: PPUSH
6517: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6521: LD_VAR 0 1
6525: PPUSH
6526: LD_INT 53
6528: PPUSH
6529: LD_INT 16
6531: PPUSH
6532: CALL_OW 171
// wait ( 0 0$5 ) ;
6536: LD_INT 175
6538: PPUSH
6539: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6543: LD_EXP 17
6547: PPUSH
6548: LD_STRING D5-Rus2-1
6550: PPUSH
6551: CALL_OW 88
// end ;
6555: PPOPN 1
6557: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6558: LD_EXP 28
6562: PUSH
6563: LD_INT 1
6565: EQUAL
6566: IFFALSE 6721
6568: GO 6570
6570: DISABLE
6571: LD_INT 0
6573: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6574: LD_ADDR_VAR 0 1
6578: PUSH
6579: LD_INT 22
6581: PUSH
6582: LD_INT 3
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 21
6591: PUSH
6592: LD_INT 2
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 34
6601: PUSH
6602: LD_INT 51
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: PPUSH
6614: CALL_OW 69
6618: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6619: LD_INT 105
6621: PPUSH
6622: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6626: LD_VAR 0 1
6630: PPUSH
6631: LD_INT 3
6633: PUSH
6634: LD_INT 60
6636: PUSH
6637: EMPTY
6638: LIST
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PPUSH
6644: CALL_OW 72
6648: PUSH
6649: LD_VAR 0 1
6653: PPUSH
6654: LD_INT 3
6656: PUSH
6657: LD_INT 24
6659: PUSH
6660: LD_INT 980
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PPUSH
6671: CALL_OW 72
6675: OR
6676: IFFALSE 6619
// ComMoveXY ( cargos , 7 , 9 ) ;
6678: LD_VAR 0 1
6682: PPUSH
6683: LD_INT 7
6685: PPUSH
6686: LD_INT 9
6688: PPUSH
6689: CALL_OW 111
// cargoSee = 1 ;
6693: LD_ADDR_EXP 29
6697: PUSH
6698: LD_INT 1
6700: ST_TO_ADDR
// cargoEscape = 1 ;
6701: LD_ADDR_EXP 20
6705: PUSH
6706: LD_INT 1
6708: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6709: LD_EXP 17
6713: PPUSH
6714: LD_STRING D5-Rus2-1a
6716: PPUSH
6717: CALL_OW 88
// end ;
6721: PPOPN 1
6723: END
// every 0 0$1 trigger cargoEscape do
6724: LD_EXP 20
6728: IFFALSE 6875
6730: GO 6732
6732: DISABLE
// begin enable ;
6733: ENABLE
// ComMoveToArea ( [ cargo1 , cargo2 ] , RussianAttack ) ;
6734: LD_EXP 15
6738: PUSH
6739: LD_EXP 16
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: PPUSH
6748: LD_INT 13
6750: PPUSH
6751: CALL_OW 113
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6755: LD_EXP 15
6759: PPUSH
6760: LD_INT 13
6762: PPUSH
6763: CALL_OW 308
6767: PUSH
6768: LD_EXP 17
6772: PPUSH
6773: LD_INT 13
6775: PPUSH
6776: CALL_OW 308
6780: OR
6781: IFFALSE 6815
// begin RemoveUnit ( cargo1 ) ;
6783: LD_EXP 15
6787: PPUSH
6788: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6792: LD_EXP 17
6796: PPUSH
6797: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6801: LD_ADDR_EXP 20
6805: PUSH
6806: LD_EXP 20
6810: PUSH
6811: LD_INT 1
6813: PLUS
6814: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6815: LD_EXP 16
6819: PPUSH
6820: LD_INT 13
6822: PPUSH
6823: CALL_OW 308
6827: PUSH
6828: LD_EXP 18
6832: PPUSH
6833: LD_INT 13
6835: PPUSH
6836: CALL_OW 308
6840: OR
6841: IFFALSE 6875
// begin RemoveUnit ( cargo2 ) ;
6843: LD_EXP 16
6847: PPUSH
6848: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6852: LD_EXP 18
6856: PPUSH
6857: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6861: LD_ADDR_EXP 20
6865: PUSH
6866: LD_EXP 20
6870: PUSH
6871: LD_INT 1
6873: PLUS
6874: ST_TO_ADDR
// end ; end ;
6875: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
6876: LD_EXP 20
6880: PUSH
6881: LD_INT 1
6883: GREATER
6884: IFFALSE 7133
6886: GO 6888
6888: DISABLE
6889: LD_INT 0
6891: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
6892: LD_INT 4
6894: PPUSH
6895: LD_INT 1
6897: PPUSH
6898: LD_INT 1
6900: PPUSH
6901: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6905: LD_INT 31
6907: PPUSH
6908: LD_INT 1
6910: PPUSH
6911: LD_INT 1
6913: PPUSH
6914: CALL_OW 324
// Hint ( Bunker ) ;
6918: LD_STRING Bunker
6920: PPUSH
6921: CALL_OW 339
// if IsOK ( Jerry ) then
6925: LD_EXP 7
6929: PPUSH
6930: CALL_OW 302
6934: IFFALSE 6950
// Say ( Jerry , D5a-Sol1-1 ) else
6936: LD_EXP 7
6940: PPUSH
6941: LD_STRING D5a-Sol1-1
6943: PPUSH
6944: CALL_OW 88
6948: GO 7036
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
6950: LD_ADDR_VAR 0 1
6954: PUSH
6955: LD_INT 22
6957: PUSH
6958: LD_INT 1
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: LD_INT 26
6967: PUSH
6968: LD_INT 1
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PPUSH
6979: CALL_OW 69
6983: PUSH
6984: LD_EXP 1
6988: PUSH
6989: LD_EXP 2
6993: PUSH
6994: LD_EXP 3
6998: PUSH
6999: LD_EXP 5
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: DIFF
7010: ST_TO_ADDR
// if not speaker then
7011: LD_VAR 0 1
7015: NOT
7016: IFFALSE 7020
// exit ;
7018: GO 7133
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7020: LD_VAR 0 1
7024: PUSH
7025: LD_INT 1
7027: ARRAY
7028: PPUSH
7029: LD_STRING D5a-Sol1-1
7031: PPUSH
7032: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7036: LD_EXP 1
7040: PPUSH
7041: LD_STRING D5a-JMM-1
7043: PPUSH
7044: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
7048: LD_INT 22
7050: PPUSH
7051: LD_INT 22
7053: PUSH
7054: LD_INT 1
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 25
7063: PUSH
7064: LD_INT 2
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PPUSH
7075: CALL_OW 70
7079: IFFALSE 7133
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
7081: LD_INT 22
7083: PPUSH
7084: LD_INT 22
7086: PUSH
7087: LD_INT 1
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: PUSH
7094: LD_INT 25
7096: PUSH
7097: LD_INT 2
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: PPUSH
7108: CALL_OW 70
7112: PUSH
7113: LD_INT 1
7115: ARRAY
7116: PPUSH
7117: LD_INT 31
7119: PPUSH
7120: LD_INT 44
7122: PPUSH
7123: LD_INT 13
7125: PPUSH
7126: LD_INT 1
7128: PPUSH
7129: CALL_OW 145
// end ;
7133: PPOPN 1
7135: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7136: LD_INT 1
7138: PPUSH
7139: CALL_OW 255
7143: PUSH
7144: LD_INT 3
7146: EQUAL
7147: PUSH
7148: LD_INT 1
7150: PPUSH
7151: CALL_OW 256
7155: PUSH
7156: LD_INT 1000
7158: LESS
7159: AND
7160: PUSH
7161: LD_INT 10
7163: PPUSH
7164: CALL_OW 255
7168: PUSH
7169: LD_INT 3
7171: EQUAL
7172: PUSH
7173: LD_INT 10
7175: PPUSH
7176: CALL_OW 256
7180: PUSH
7181: LD_INT 1000
7183: LESS
7184: AND
7185: OR
7186: IFFALSE 7203
7188: GO 7190
7190: DISABLE
// Say ( JMM , D8-JMM-1 ) ;
7191: LD_EXP 1
7195: PPUSH
7196: LD_STRING D8-JMM-1
7198: PPUSH
7199: CALL_OW 88
7203: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7204: LD_EXP 8
7208: PPUSH
7209: CALL_OW 310
7213: PUSH
7214: LD_INT 1
7216: EQUAL
7217: PUSH
7218: LD_EXP 22
7222: PUSH
7223: LD_INT 3
7225: EQUAL
7226: NOT
7227: AND
7228: IFFALSE 7250
7230: GO 7232
7232: DISABLE
// begin enable ;
7233: ENABLE
// mikhailInBase = 1 ;
7234: LD_ADDR_EXP 22
7238: PUSH
7239: LD_INT 1
7241: ST_TO_ADDR
// mikhailStatus = 1 ;
7242: LD_ADDR_EXP 21
7246: PUSH
7247: LD_INT 1
7249: ST_TO_ADDR
// end ;
7250: END
// export function AskMikhail ; begin
7251: LD_INT 0
7253: PPUSH
// case Query ( QMikh2 ) of 1 :
7254: LD_STRING QMikh2
7256: PPUSH
7257: CALL_OW 97
7261: PUSH
7262: LD_INT 1
7264: DOUBLE
7265: EQUAL
7266: IFTRUE 7270
7268: GO 7337
7270: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7271: LD_INT 1
7273: PPUSH
7274: LD_INT 6
7276: PPUSH
7277: LD_INT 2
7279: PPUSH
7280: LD_INT 1
7282: PPUSH
7283: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7287: LD_EXP 8
7291: PPUSH
7292: LD_INT 6
7294: PPUSH
7295: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7299: LD_EXP 8
7303: PPUSH
7304: CALL_OW 122
// wait ( 0 0$1 ) ;
7308: LD_INT 35
7310: PPUSH
7311: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7315: LD_EXP 8
7319: PPUSH
7320: LD_INT 17
7322: PPUSH
7323: CALL_OW 113
// mikhailInbase = 0 ;
7327: LD_ADDR_EXP 22
7331: PUSH
7332: LD_INT 0
7334: ST_TO_ADDR
// end ; 2 :
7335: GO 7578
7337: LD_INT 2
7339: DOUBLE
7340: EQUAL
7341: IFTRUE 7345
7343: GO 7518
7345: POP
// begin mikhailInBase = 2 ;
7346: LD_ADDR_EXP 22
7350: PUSH
7351: LD_INT 2
7353: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7354: LD_EXP 8
7358: PPUSH
7359: LD_INT 6
7361: PPUSH
7362: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7366: LD_EXP 8
7370: PPUSH
7371: CALL_OW 122
// wait ( 0 0$1 ) ;
7375: LD_INT 35
7377: PPUSH
7378: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7382: LD_EXP 8
7386: PPUSH
7387: LD_EXP 8
7391: PPUSH
7392: CALL_OW 250
7396: PUSH
7397: LD_INT 2
7399: PLUS
7400: PPUSH
7401: LD_EXP 8
7405: PPUSH
7406: CALL_OW 251
7410: PUSH
7411: LD_INT 2
7413: PLUS
7414: PPUSH
7415: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7419: LD_EXP 8
7423: PPUSH
7424: LD_EXP 8
7428: PPUSH
7429: CALL_OW 250
7433: PUSH
7434: LD_INT 1
7436: PLUS
7437: PPUSH
7438: LD_EXP 8
7442: PPUSH
7443: CALL_OW 251
7447: PUSH
7448: LD_INT 2
7450: PLUS
7451: PPUSH
7452: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7456: LD_EXP 8
7460: PPUSH
7461: LD_EXP 8
7465: PPUSH
7466: CALL_OW 250
7470: PUSH
7471: LD_INT 2
7473: PLUS
7474: PPUSH
7475: LD_EXP 8
7479: PPUSH
7480: CALL_OW 251
7484: PPUSH
7485: CALL_OW 171
// wait ( 0 0$5 ) ;
7489: LD_INT 175
7491: PPUSH
7492: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7496: LD_EXP 8
7500: PPUSH
7501: LD_INT 25
7503: PPUSH
7504: CALL_OW 113
// mikhailInBase = 4 ;
7508: LD_ADDR_EXP 22
7512: PUSH
7513: LD_INT 4
7515: ST_TO_ADDR
// end ; 3 :
7516: GO 7578
7518: LD_INT 3
7520: DOUBLE
7521: EQUAL
7522: IFTRUE 7526
7524: GO 7577
7526: POP
// begin SetSide ( Mikhail , 6 ) ;
7527: LD_EXP 8
7531: PPUSH
7532: LD_INT 6
7534: PPUSH
7535: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7539: LD_EXP 8
7543: PPUSH
7544: CALL_OW 122
// wait ( 0 0$1 ) ;
7548: LD_INT 35
7550: PPUSH
7551: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7555: LD_EXP 8
7559: PPUSH
7560: LD_INT 17
7562: PPUSH
7563: CALL_OW 113
// mikhailInbase = 3 ;
7567: LD_ADDR_EXP 22
7571: PUSH
7572: LD_INT 3
7574: ST_TO_ADDR
// end ; end ;
7575: GO 7578
7577: POP
// end ;
7578: LD_VAR 0 1
7582: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7583: LD_EXP 8
7587: PPUSH
7588: LD_INT 25
7590: PPUSH
7591: CALL_OW 308
7595: PUSH
7596: LD_EXP 22
7600: PUSH
7601: LD_INT 4
7603: EQUAL
7604: AND
7605: IFFALSE 7709
7607: GO 7609
7609: DISABLE
// begin enable ;
7610: ENABLE
// mikhailInBase = 1 ;
7611: LD_ADDR_EXP 22
7615: PUSH
7616: LD_INT 1
7618: ST_TO_ADDR
// InGameOn ;
7619: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7623: LD_INT 1
7625: PPUSH
7626: LD_INT 6
7628: PPUSH
7629: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7633: LD_INT 35
7635: PPUSH
7636: CALL_OW 67
// if Carry ( Mikhail ) then
7640: LD_EXP 8
7644: PPUSH
7645: CALL_OW 281
7649: IFFALSE 7660
// ComUnload ( Mikhail ) ;
7651: LD_EXP 8
7655: PPUSH
7656: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7660: LD_EXP 8
7664: PPUSH
7665: LD_INT 1
7667: PPUSH
7668: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7672: LD_EXP 8
7676: PPUSH
7677: CALL_OW 310
7681: IFFALSE 7633
// SetSide ( dep1 , 1 ) ;
7683: LD_INT 1
7685: PPUSH
7686: LD_INT 1
7688: PPUSH
7689: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7693: LD_EXP 8
7697: PPUSH
7698: LD_INT 1
7700: PPUSH
7701: CALL_OW 235
// InGameOff ;
7705: CALL_OW 9
// end ;
7709: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7710: LD_EXP 8
7714: PPUSH
7715: CALL_OW 310
7719: PUSH
7720: LD_EXP 22
7724: PUSH
7725: LD_INT 3
7727: EQUAL
7728: NOT
7729: AND
7730: IFFALSE 7865
7732: GO 7734
7734: DISABLE
// begin enable ;
7735: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7736: LD_INT 22
7738: PUSH
7739: LD_INT 1
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: PUSH
7746: LD_INT 21
7748: PUSH
7749: LD_INT 1
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: PUSH
7756: LD_INT 91
7758: PUSH
7759: LD_EXP 8
7763: PPUSH
7764: CALL_OW 310
7768: PUSH
7769: LD_INT 10
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: LIST
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: LIST
7781: PPUSH
7782: CALL_OW 69
7786: PUSH
7787: LD_INT 1
7789: EQUAL
7790: IFFALSE 7865
// begin mikhailStatus = 4 ;
7792: LD_ADDR_EXP 21
7796: PUSH
7797: LD_INT 4
7799: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
7800: LD_INT 1
7802: PPUSH
7803: LD_INT 6
7805: PPUSH
7806: LD_INT 2
7808: PPUSH
7809: LD_INT 1
7811: PPUSH
7812: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7816: LD_EXP 8
7820: PPUSH
7821: LD_INT 6
7823: PPUSH
7824: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7828: LD_EXP 8
7832: PPUSH
7833: CALL_OW 122
// wait ( 0 0$1 ) ;
7837: LD_INT 35
7839: PPUSH
7840: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7844: LD_EXP 8
7848: PPUSH
7849: LD_INT 17
7851: PPUSH
7852: CALL_OW 113
// mikhailStatus = 3 ;
7856: LD_ADDR_EXP 21
7860: PUSH
7861: LD_INT 3
7863: ST_TO_ADDR
// disable ;
7864: DISABLE
// end ; end ;
7865: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7866: LD_EXP 1
7870: PPUSH
7871: LD_EXP 23
7875: PPUSH
7876: CALL_OW 296
7880: PUSH
7881: LD_INT 5
7883: LESS
7884: PUSH
7885: LD_EXP 21
7889: PUSH
7890: LD_INT 3
7892: EQUAL
7893: AND
7894: PUSH
7895: LD_EXP 22
7899: PUSH
7900: LD_INT 3
7902: EQUAL
7903: NOT
7904: AND
7905: IFFALSE 8136
7907: GO 7909
7909: DISABLE
7910: LD_INT 0
7912: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
7913: LD_ADDR_VAR 0 1
7917: PUSH
7918: LD_INT 22
7920: PUSH
7921: LD_INT 1
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 21
7930: PUSH
7931: LD_INT 1
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: LD_INT 26
7940: PUSH
7941: LD_INT 1
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: LIST
7952: PPUSH
7953: CALL_OW 69
7957: PUSH
7958: LD_EXP 1
7962: PUSH
7963: LD_EXP 5
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: DIFF
7972: ST_TO_ADDR
// if not tmp then
7973: LD_VAR 0 1
7977: NOT
7978: IFFALSE 7982
// exit ;
7980: GO 8136
// DialogueOn ;
7982: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7986: LD_EXP 1
7990: PPUSH
7991: LD_STRING D7-JMM-1
7993: PPUSH
7994: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7998: LD_VAR 0 1
8002: PUSH
8003: LD_INT 1
8005: ARRAY
8006: PPUSH
8007: LD_STRING D7-Sol1-1
8009: PPUSH
8010: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8014: LD_EXP 1
8018: PPUSH
8019: LD_STRING D7-JMM-2
8021: PPUSH
8022: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8026: LD_VAR 0 1
8030: PUSH
8031: LD_INT 1
8033: ARRAY
8034: PPUSH
8035: LD_STRING D7-Sol1-2
8037: PPUSH
8038: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8042: LD_EXP 1
8046: PPUSH
8047: LD_STRING D7-JMM-3
8049: PPUSH
8050: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8054: LD_VAR 0 1
8058: PUSH
8059: LD_INT 1
8061: ARRAY
8062: PPUSH
8063: LD_STRING D7-Sol1-3
8065: PPUSH
8066: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8070: LD_EXP 3
8074: PPUSH
8075: CALL_OW 302
8079: PUSH
8080: LD_EXP 4
8084: PPUSH
8085: CALL_OW 302
8089: AND
8090: IFFALSE 8132
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8092: LD_EXP 3
8096: PPUSH
8097: LD_STRING D7-Cyrus-3
8099: PPUSH
8100: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8104: LD_VAR 0 1
8108: PUSH
8109: LD_INT 1
8111: ARRAY
8112: PPUSH
8113: LD_STRING D7-Sol1-4
8115: PPUSH
8116: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8120: LD_EXP 4
8124: PPUSH
8125: LD_STRING D7-Lisa-4
8127: PPUSH
8128: CALL_OW 88
// end ; DialogueOff ;
8132: CALL_OW 7
// end ;
8136: PPOPN 1
8138: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8139: LD_EXP 8
8143: PPUSH
8144: CALL_OW 303
8148: PUSH
8149: LD_EXP 21
8153: PUSH
8154: LD_INT 3
8156: EQUAL
8157: AND
8158: IFFALSE 8172
8160: GO 8162
8162: DISABLE
// begin enable ;
8163: ENABLE
// mikhailStatus = 2 ;
8164: LD_ADDR_EXP 21
8168: PUSH
8169: LD_INT 2
8171: ST_TO_ADDR
// end ;
8172: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8173: LD_EXP 8
8177: PPUSH
8178: LD_INT 17
8180: PPUSH
8181: CALL_OW 308
8185: PUSH
8186: LD_EXP 8
8190: PPUSH
8191: CALL_OW 255
8195: PUSH
8196: LD_INT 6
8198: EQUAL
8199: AND
8200: IFFALSE 8233
8202: GO 8204
8204: DISABLE
// begin if not mikhailInBase = 3 then
8205: LD_EXP 22
8209: PUSH
8210: LD_INT 3
8212: EQUAL
8213: NOT
8214: IFFALSE 8224
// mikhailStatus = 3 ;
8216: LD_ADDR_EXP 21
8220: PUSH
8221: LD_INT 3
8223: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8224: LD_EXP 8
8228: PPUSH
8229: CALL_OW 64
// end ;
8233: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8234: LD_EXP 21
8238: PUSH
8239: LD_INT 3
8241: EQUAL
8242: PUSH
8243: LD_EXP 8
8247: PPUSH
8248: CALL_OW 255
8252: PUSH
8253: LD_INT 6
8255: EQUAL
8256: AND
8257: IFFALSE 8423
8259: GO 8261
8261: DISABLE
8262: LD_INT 0
8264: PPUSH
8265: PPUSH
// begin enable ;
8266: ENABLE
// if IsOk ( Mikhail ) then
8267: LD_EXP 8
8271: PPUSH
8272: CALL_OW 302
8276: IFFALSE 8423
// begin attacker := Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8278: LD_ADDR_VAR 0 2
8282: PUSH
8283: LD_EXP 8
8287: PPUSH
8288: LD_INT 22
8290: PUSH
8291: LD_INT 1
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PUSH
8298: LD_INT 21
8300: PUSH
8301: LD_INT 1
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: PPUSH
8312: CALL_OW 69
8316: PPUSH
8317: CALL 10172 0 2
8321: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8322: LD_VAR 0 2
8326: PPUSH
8327: LD_EXP 8
8331: PPUSH
8332: CALL_OW 296
8336: PUSH
8337: LD_INT 8
8339: LESS
8340: IFFALSE 8423
// begin if GetSex ( attacker ) = sex_male then
8342: LD_VAR 0 2
8346: PPUSH
8347: CALL_OW 258
8351: PUSH
8352: LD_INT 1
8354: EQUAL
8355: IFFALSE 8391
// begin disable ;
8357: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8358: LD_VAR 0 2
8362: PPUSH
8363: LD_STRING D7a-Sol1-1
8365: PPUSH
8366: CALL_OW 88
// wait ( 0 0$2 ) ;
8370: LD_INT 70
8372: PPUSH
8373: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8377: LD_VAR 0 2
8381: PPUSH
8382: LD_STRING D7a-Sol1-1a
8384: PPUSH
8385: CALL_OW 88
// end else
8389: GO 8423
// begin disable ;
8391: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8392: LD_VAR 0 2
8396: PPUSH
8397: LD_STRING D7a-FSol1-1
8399: PPUSH
8400: CALL_OW 88
// wait ( 0 0$2 ) ;
8404: LD_INT 70
8406: PPUSH
8407: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8411: LD_VAR 0 2
8415: PPUSH
8416: LD_STRING D7a-FSol1-1a
8418: PPUSH
8419: CALL_OW 88
// end ; end ; end ; end ;
8423: PPOPN 2
8425: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8426: LD_EXP 27
8430: PUSH
8431: LD_INT 1
8433: EQUAL
8434: PUSH
8435: LD_INT 22
8437: PPUSH
8438: LD_INT 22
8440: PUSH
8441: LD_INT 3
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PUSH
8448: LD_INT 21
8450: PUSH
8451: LD_INT 1
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: PPUSH
8462: CALL_OW 70
8466: PUSH
8467: LD_INT 2
8469: GREATER
8470: AND
8471: PUSH
8472: LD_INT 22
8474: PPUSH
8475: LD_INT 22
8477: PUSH
8478: LD_INT 1
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: PUSH
8485: LD_INT 2
8487: PUSH
8488: LD_INT 21
8490: PUSH
8491: LD_INT 1
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: PUSH
8498: LD_INT 59
8500: PUSH
8501: EMPTY
8502: LIST
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: LIST
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: PPUSH
8513: CALL_OW 70
8517: PUSH
8518: LD_INT 0
8520: EQUAL
8521: AND
8522: IFFALSE 8537
8524: GO 8526
8526: DISABLE
// SetSide ( dep1 , 3 ) ;
8527: LD_INT 1
8529: PPUSH
8530: LD_INT 3
8532: PPUSH
8533: CALL_OW 235
8537: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8538: LD_EXP 30
8542: PUSH
8543: LD_INT 1
8545: EQUAL
8546: PUSH
8547: LD_INT 22
8549: PUSH
8550: LD_INT 0
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PUSH
8557: LD_INT 25
8559: PUSH
8560: LD_INT 14
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PPUSH
8571: CALL_OW 69
8575: PUSH
8576: LD_INT 0
8578: EQUAL
8579: AND
8580: IFFALSE 8681
8582: GO 8584
8584: DISABLE
8585: LD_INT 0
8587: PPUSH
8588: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8589: LD_ADDR_VAR 0 2
8593: PUSH
8594: LD_INT 22
8596: PUSH
8597: LD_INT 1
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: PUSH
8604: LD_INT 21
8606: PUSH
8607: LD_INT 1
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: PUSH
8614: LD_INT 23
8616: PUSH
8617: LD_INT 1
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: LIST
8628: PPUSH
8629: CALL_OW 69
8633: ST_TO_ADDR
// for i in tmp do
8634: LD_ADDR_VAR 0 1
8638: PUSH
8639: LD_VAR 0 2
8643: PUSH
8644: FOR_IN
8645: IFFALSE 8672
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8647: LD_VAR 0 1
8651: PPUSH
8652: LD_INT 1
8654: PPUSH
8655: LD_INT 4
8657: PPUSH
8658: CALL_OW 12
8662: PPUSH
8663: LD_INT 300
8665: PPUSH
8666: CALL_OW 492
8670: GO 8644
8672: POP
8673: POP
// SetAchievement ( ACH_TIGER ) ;
8674: LD_STRING ACH_TIGER
8676: PPUSH
8677: CALL_OW 543
// end ;
8681: PPOPN 2
8683: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
8684: LD_INT 22
8686: PUSH
8687: LD_INT 1
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: PUSH
8694: LD_INT 34
8696: PUSH
8697: LD_INT 51
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PPUSH
8708: CALL_OW 69
8712: PUSH
8713: LD_INT 2
8715: GREATEREQUAL
8716: IFFALSE 8728
8718: GO 8720
8720: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
8721: LD_STRING ACH_CARGO
8723: PPUSH
8724: CALL_OW 543
8728: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , un ; begin
8729: LD_INT 0
8731: PPUSH
8732: PPUSH
8733: PPUSH
// for i = 1 to count do
8734: LD_ADDR_VAR 0 8
8738: PUSH
8739: DOUBLE
8740: LD_INT 1
8742: DEC
8743: ST_TO_ADDR
8744: LD_VAR 0 6
8748: PUSH
8749: FOR_TO
8750: IFFALSE 8831
// begin uc_side = side ;
8752: LD_ADDR_OWVAR 20
8756: PUSH
8757: LD_VAR 0 1
8761: ST_TO_ADDR
// uc_nation = nation ;
8762: LD_ADDR_OWVAR 21
8766: PUSH
8767: LD_VAR 0 2
8771: ST_TO_ADDR
// hc_gallery =  ;
8772: LD_ADDR_OWVAR 33
8776: PUSH
8777: LD_STRING 
8779: ST_TO_ADDR
// hc_name =  ;
8780: LD_ADDR_OWVAR 26
8784: PUSH
8785: LD_STRING 
8787: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8788: LD_INT 0
8790: PPUSH
8791: LD_VAR 0 5
8795: PPUSH
8796: LD_VAR 0 4
8800: PPUSH
8801: CALL_OW 380
// un = CreateHuman ;
8805: LD_ADDR_VAR 0 9
8809: PUSH
8810: CALL_OW 44
8814: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8815: LD_VAR 0 9
8819: PPUSH
8820: LD_VAR 0 3
8824: PPUSH
8825: CALL_OW 52
// end ;
8829: GO 8749
8831: POP
8832: POP
// end ;
8833: LD_VAR 0 7
8837: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8838: LD_INT 0
8840: PPUSH
8841: PPUSH
8842: PPUSH
// uc_side := GetSide ( b ) ;
8843: LD_ADDR_OWVAR 20
8847: PUSH
8848: LD_VAR 0 2
8852: PPUSH
8853: CALL_OW 255
8857: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8858: LD_ADDR_OWVAR 21
8862: PUSH
8863: LD_VAR 0 2
8867: PPUSH
8868: CALL_OW 248
8872: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8873: LD_INT 0
8875: PPUSH
8876: LD_INT 1
8878: PPUSH
8879: LD_VAR 0 1
8883: PPUSH
8884: CALL_OW 380
// un = CreateHuman ;
8888: LD_ADDR_VAR 0 4
8892: PUSH
8893: CALL_OW 44
8897: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8898: LD_ADDR_VAR 0 5
8902: PUSH
8903: LD_VAR 0 2
8907: PPUSH
8908: CALL_OW 254
8912: PUSH
8913: LD_INT 3
8915: MINUS
8916: ST_TO_ADDR
// if dir < 0 then
8917: LD_VAR 0 5
8921: PUSH
8922: LD_INT 0
8924: LESS
8925: IFFALSE 8941
// dir := 6 + dir ;
8927: LD_ADDR_VAR 0 5
8931: PUSH
8932: LD_INT 6
8934: PUSH
8935: LD_VAR 0 5
8939: PLUS
8940: ST_TO_ADDR
// SetDir ( un , dir ) ;
8941: LD_VAR 0 4
8945: PPUSH
8946: LD_VAR 0 5
8950: PPUSH
8951: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8955: LD_VAR 0 4
8959: PPUSH
8960: LD_VAR 0 2
8964: PPUSH
8965: CALL_OW 52
// end ;
8969: LD_VAR 0 3
8973: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkList ; begin
8974: LD_INT 0
8976: PPUSH
8977: PPUSH
8978: PPUSH
8979: PPUSH
// engineerOkList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8980: LD_ADDR_VAR 0 7
8984: PUSH
8985: LD_INT 22
8987: PUSH
8988: LD_VAR 0 1
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: PUSH
8997: LD_INT 25
8999: PUSH
9000: LD_INT 2
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: PUSH
9007: LD_INT 24
9009: PUSH
9010: LD_INT 1000
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: LIST
9021: PPUSH
9022: CALL_OW 69
9026: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9027: LD_ADDR_VAR 0 5
9031: PUSH
9032: LD_VAR 0 3
9036: PPUSH
9037: LD_INT 22
9039: PUSH
9040: LD_VAR 0 1
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 21
9051: PUSH
9052: LD_INT 3
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: LD_INT 3
9061: PUSH
9062: LD_INT 24
9064: PUSH
9065: LD_INT 1000
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: PUSH
9072: EMPTY
9073: LIST
9074: LIST
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: LIST
9080: PUSH
9081: EMPTY
9082: LIST
9083: PPUSH
9084: CALL_OW 70
9088: ST_TO_ADDR
// if not buildingsList and not engineerOkList then
9089: LD_VAR 0 5
9093: NOT
9094: PUSH
9095: LD_VAR 0 7
9099: NOT
9100: AND
9101: IFFALSE 9105
// exit ;
9103: GO 9301
// if not buildingsList and UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) and IsOk ( building ) then
9105: LD_VAR 0 5
9109: NOT
9110: PUSH
9111: LD_VAR 0 7
9115: PPUSH
9116: LD_INT 3
9118: PUSH
9119: LD_INT 54
9121: PUSH
9122: EMPTY
9123: LIST
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: PPUSH
9129: CALL_OW 72
9133: AND
9134: PUSH
9135: LD_VAR 0 2
9139: PPUSH
9140: CALL_OW 302
9144: AND
9145: IFFALSE 9179
// ComEnterUnit ( UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) , building ) ;
9147: LD_VAR 0 7
9151: PPUSH
9152: LD_INT 3
9154: PUSH
9155: LD_INT 54
9157: PUSH
9158: EMPTY
9159: LIST
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PPUSH
9165: CALL_OW 72
9169: PPUSH
9170: LD_VAR 0 2
9174: PPUSH
9175: CALL_OW 120
// if buildingsList then
9179: LD_VAR 0 5
9183: IFFALSE 9301
// begin for i in engineerOkList do
9185: LD_ADDR_VAR 0 6
9189: PUSH
9190: LD_VAR 0 7
9194: PUSH
9195: FOR_IN
9196: IFFALSE 9299
// if IsInUnit ( i ) then
9198: LD_VAR 0 6
9202: PPUSH
9203: CALL_OW 310
9207: IFFALSE 9220
// ComExitBuilding ( i ) else
9209: LD_VAR 0 6
9213: PPUSH
9214: CALL_OW 122
9218: GO 9297
// if GetLives ( i ) > 650 then
9220: LD_VAR 0 6
9224: PPUSH
9225: CALL_OW 256
9229: PUSH
9230: LD_INT 650
9232: GREATER
9233: IFFALSE 9261
// ComRepairBuilding ( i , NearestUnitToUnit ( buildingsList , i ) ) else
9235: LD_VAR 0 6
9239: PPUSH
9240: LD_VAR 0 5
9244: PPUSH
9245: LD_VAR 0 6
9249: PPUSH
9250: CALL_OW 74
9254: PPUSH
9255: CALL_OW 130
9259: GO 9297
// if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9261: LD_VAR 0 6
9265: PPUSH
9266: LD_INT 56
9268: PPUSH
9269: LD_INT 10
9271: PPUSH
9272: CALL_OW 297
9276: PUSH
9277: LD_INT 8
9279: GREATER
9280: IFFALSE 9297
// ComMoveXY ( i , 56 , 10 ) ;
9282: LD_VAR 0 6
9286: PPUSH
9287: LD_INT 56
9289: PPUSH
9290: LD_INT 10
9292: PPUSH
9293: CALL_OW 111
9297: GO 9195
9299: POP
9300: POP
// end ; end ;
9301: LD_VAR 0 4
9305: RET
// export function HealUnitInBase ( side , healArea , baseArea , building ) ; var sciList , i , damageUnits ; begin
9306: LD_INT 0
9308: PPUSH
9309: PPUSH
9310: PPUSH
9311: PPUSH
// sciList := FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9312: LD_ADDR_VAR 0 6
9316: PUSH
9317: LD_INT 22
9319: PUSH
9320: LD_VAR 0 1
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PUSH
9329: LD_INT 25
9331: PUSH
9332: LD_INT 4
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PUSH
9339: LD_INT 24
9341: PUSH
9342: LD_INT 250
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: LIST
9353: PPUSH
9354: CALL_OW 69
9358: ST_TO_ADDR
// damageUnits := FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9359: LD_ADDR_VAR 0 8
9363: PUSH
9364: LD_VAR 0 3
9368: PPUSH
9369: LD_INT 22
9371: PUSH
9372: LD_VAR 0 1
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PUSH
9381: LD_INT 21
9383: PUSH
9384: LD_INT 1
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: PUSH
9391: LD_INT 3
9393: PUSH
9394: LD_INT 24
9396: PUSH
9397: LD_INT 650
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: LIST
9412: PPUSH
9413: CALL_OW 70
9417: ST_TO_ADDR
// if not damageUnits and not sciList then
9418: LD_VAR 0 8
9422: NOT
9423: PUSH
9424: LD_VAR 0 6
9428: NOT
9429: AND
9430: IFFALSE 9434
// exit ;
9432: GO 9573
// if damageUnits then
9434: LD_VAR 0 8
9438: IFFALSE 9517
// begin for i in sciList do
9440: LD_ADDR_VAR 0 7
9444: PUSH
9445: LD_VAR 0 6
9449: PUSH
9450: FOR_IN
9451: IFFALSE 9513
// if IsInUnit ( i ) then
9453: LD_VAR 0 7
9457: PPUSH
9458: CALL_OW 310
9462: IFFALSE 9475
// ComExitBuilding ( i ) else
9464: LD_VAR 0 7
9468: PPUSH
9469: CALL_OW 122
9473: GO 9511
// if not HasTask ( i ) then
9475: LD_VAR 0 7
9479: PPUSH
9480: CALL_OW 314
9484: NOT
9485: IFFALSE 9511
// ComHeal ( i , NearestUnitToUnit ( damageUnits , i ) ) ;
9487: LD_VAR 0 7
9491: PPUSH
9492: LD_VAR 0 8
9496: PPUSH
9497: LD_VAR 0 7
9501: PPUSH
9502: CALL_OW 74
9506: PPUSH
9507: CALL_OW 128
9511: GO 9450
9513: POP
9514: POP
// end else
9515: GO 9573
// if UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) then
9517: LD_VAR 0 6
9521: PPUSH
9522: LD_INT 3
9524: PUSH
9525: LD_INT 54
9527: PUSH
9528: EMPTY
9529: LIST
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PPUSH
9535: CALL_OW 72
9539: IFFALSE 9573
// ComEnterUnit ( UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) , building ) ;
9541: LD_VAR 0 6
9545: PPUSH
9546: LD_INT 3
9548: PUSH
9549: LD_INT 54
9551: PUSH
9552: EMPTY
9553: LIST
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PPUSH
9559: CALL_OW 72
9563: PPUSH
9564: LD_VAR 0 4
9568: PPUSH
9569: CALL_OW 120
// end ;
9573: LD_VAR 0 5
9577: RET
// export function DefendBases ( area , enemySide , defendersList , building ) ; var i , enemy , nearestUnit ; begin
9578: LD_INT 0
9580: PPUSH
9581: PPUSH
9582: PPUSH
9583: PPUSH
// if not defendersList then
9584: LD_VAR 0 3
9588: NOT
9589: IFFALSE 9593
// exit ;
9591: GO 9975
// enemy := FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9593: LD_ADDR_VAR 0 7
9597: PUSH
9598: LD_VAR 0 1
9602: PPUSH
9603: LD_INT 22
9605: PUSH
9606: LD_VAR 0 2
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: PUSH
9615: LD_INT 2
9617: PUSH
9618: LD_INT 21
9620: PUSH
9621: LD_INT 2
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: PUSH
9628: LD_INT 21
9630: PUSH
9631: LD_INT 1
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: LIST
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PPUSH
9647: CALL_OW 70
9651: ST_TO_ADDR
// if enemy then
9652: LD_VAR 0 7
9656: IFFALSE 9877
// begin for i in defendersList do
9658: LD_ADDR_VAR 0 6
9662: PUSH
9663: LD_VAR 0 3
9667: PUSH
9668: FOR_IN
9669: IFFALSE 9873
// begin if IsInUnit ( i ) and GetLives ( i ) > 500 then
9671: LD_VAR 0 6
9675: PPUSH
9676: CALL_OW 310
9680: PUSH
9681: LD_VAR 0 6
9685: PPUSH
9686: CALL_OW 256
9690: PUSH
9691: LD_INT 500
9693: GREATER
9694: AND
9695: IFFALSE 9708
// ComExitBuilding ( i ) else
9697: LD_VAR 0 6
9701: PPUSH
9702: CALL_OW 122
9706: GO 9871
// if GetLives ( i ) > 650 then
9708: LD_VAR 0 6
9712: PPUSH
9713: CALL_OW 256
9717: PUSH
9718: LD_INT 650
9720: GREATER
9721: IFFALSE 9774
// begin nearestUnit := NearestUnitToUnit ( enemy , i ) ;
9723: LD_ADDR_VAR 0 8
9727: PUSH
9728: LD_VAR 0 7
9732: PPUSH
9733: LD_VAR 0 6
9737: PPUSH
9738: CALL_OW 74
9742: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearestUnit ) , GetY ( nearestUnit ) ) ;
9743: LD_VAR 0 6
9747: PPUSH
9748: LD_VAR 0 8
9752: PPUSH
9753: CALL_OW 250
9757: PPUSH
9758: LD_VAR 0 8
9762: PPUSH
9763: CALL_OW 251
9767: PPUSH
9768: CALL_OW 114
// end else
9772: GO 9871
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
9774: LD_INT 22
9776: PUSH
9777: LD_INT 3
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PUSH
9784: LD_INT 25
9786: PUSH
9787: LD_INT 4
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: PPUSH
9798: CALL_OW 69
9802: IFFALSE 9842
// begin if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9804: LD_VAR 0 6
9808: PPUSH
9809: LD_INT 56
9811: PPUSH
9812: LD_INT 10
9814: PPUSH
9815: CALL_OW 297
9819: PUSH
9820: LD_INT 8
9822: GREATER
9823: IFFALSE 9840
// ComMoveXY ( i , 56 , 10 ) ;
9825: LD_VAR 0 6
9829: PPUSH
9830: LD_INT 56
9832: PPUSH
9833: LD_INT 10
9835: PPUSH
9836: CALL_OW 111
// end else
9840: GO 9871
// if GetLives ( i ) <= 500 then
9842: LD_VAR 0 6
9846: PPUSH
9847: CALL_OW 256
9851: PUSH
9852: LD_INT 500
9854: LESSEQUAL
9855: IFFALSE 9871
// ComEnterUnit ( i , building ) ;
9857: LD_VAR 0 6
9861: PPUSH
9862: LD_VAR 0 4
9866: PPUSH
9867: CALL_OW 120
// end ;
9871: GO 9668
9873: POP
9874: POP
// end else
9875: GO 9975
// if UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) then
9877: LD_VAR 0 3
9881: PPUSH
9882: LD_INT 56
9884: PUSH
9885: EMPTY
9886: LIST
9887: PUSH
9888: LD_INT 3
9890: PUSH
9891: LD_INT 60
9893: PUSH
9894: EMPTY
9895: LIST
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: PUSH
9901: LD_INT 24
9903: PUSH
9904: LD_INT 1000
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: LIST
9915: PPUSH
9916: CALL_OW 72
9920: IFFALSE 9975
// ComEnterUnit ( UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) , building ) ;
9922: LD_VAR 0 3
9926: PPUSH
9927: LD_INT 56
9929: PUSH
9930: EMPTY
9931: LIST
9932: PUSH
9933: LD_INT 3
9935: PUSH
9936: LD_INT 60
9938: PUSH
9939: EMPTY
9940: LIST
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: PUSH
9946: LD_INT 24
9948: PUSH
9949: LD_INT 1000
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: LIST
9960: PPUSH
9961: CALL_OW 72
9965: PPUSH
9966: LD_VAR 0 4
9970: PPUSH
9971: CALL_OW 120
// end ;
9975: LD_VAR 0 5
9979: RET
// export function RussianTrap ; var i ; begin
9980: LD_INT 0
9982: PPUSH
9983: PPUSH
// if GetSide ( Brian ) = 4 then
9984: LD_EXP 6
9988: PPUSH
9989: CALL_OW 255
9993: PUSH
9994: LD_INT 4
9996: EQUAL
9997: IFFALSE 10020
// SetLives ( [ Brian , Jerry ] , 0 ) ;
9999: LD_EXP 6
10003: PUSH
10004: LD_EXP 7
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PPUSH
10013: LD_INT 0
10015: PPUSH
10016: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10020: LD_ADDR_VAR 0 2
10024: PUSH
10025: LD_INT 22
10027: PUSH
10028: LD_INT 3
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PUSH
10035: LD_INT 21
10037: PUSH
10038: LD_INT 1
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PPUSH
10049: CALL_OW 69
10053: PUSH
10054: FOR_IN
10055: IFFALSE 10165
// begin ComExitBuilding ( i ) ;
10057: LD_VAR 0 2
10061: PPUSH
10062: CALL_OW 122
// wait ( 0 0$1 ) ;
10066: LD_INT 35
10068: PPUSH
10069: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10073: LD_VAR 0 2
10077: PPUSH
10078: LD_INT 120
10080: PPUSH
10081: LD_INT 56
10083: PPUSH
10084: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10088: LD_VAR 0 2
10092: PPUSH
10093: LD_INT 111
10095: PPUSH
10096: LD_INT 37
10098: PPUSH
10099: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10103: LD_INT 33
10105: PPUSH
10106: CALL_OW 255
10110: PUSH
10111: LD_INT 3
10113: EQUAL
10114: PUSH
10115: LD_INT 33
10117: PPUSH
10118: CALL_OW 302
10122: AND
10123: IFFALSE 10139
// AddComEnterUnit ( i , arm2 ) else
10125: LD_VAR 0 2
10129: PPUSH
10130: LD_INT 33
10132: PPUSH
10133: CALL_OW 180
10137: GO 10163
// begin AddComCrawl ( i ) ;
10139: LD_VAR 0 2
10143: PPUSH
10144: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10148: LD_VAR 0 2
10152: PPUSH
10153: LD_INT 109
10155: PPUSH
10156: LD_INT 30
10158: PPUSH
10159: CALL_OW 174
// end ; end ;
10163: GO 10054
10165: POP
10166: POP
// end ;
10167: LD_VAR 0 1
10171: RET
// export function Nearest ( un , units ) ; var nearestDist , nearestUn , sold , dist ; begin
10172: LD_INT 0
10174: PPUSH
10175: PPUSH
10176: PPUSH
10177: PPUSH
10178: PPUSH
// nearestDist := 1000 ;
10179: LD_ADDR_VAR 0 4
10183: PUSH
10184: LD_INT 1000
10186: ST_TO_ADDR
// nearestUn := un ;
10187: LD_ADDR_VAR 0 5
10191: PUSH
10192: LD_VAR 0 1
10196: ST_TO_ADDR
// for sold in units do
10197: LD_ADDR_VAR 0 6
10201: PUSH
10202: LD_VAR 0 2
10206: PUSH
10207: FOR_IN
10208: IFFALSE 10264
// begin dist := GetDistUnits ( un , sold ) ;
10210: LD_ADDR_VAR 0 7
10214: PUSH
10215: LD_VAR 0 1
10219: PPUSH
10220: LD_VAR 0 6
10224: PPUSH
10225: CALL_OW 296
10229: ST_TO_ADDR
// if dist < nearestDist then
10230: LD_VAR 0 7
10234: PUSH
10235: LD_VAR 0 4
10239: LESS
10240: IFFALSE 10262
// begin nearestUn := sold ;
10242: LD_ADDR_VAR 0 5
10246: PUSH
10247: LD_VAR 0 6
10251: ST_TO_ADDR
// nearestDist := dist ;
10252: LD_ADDR_VAR 0 4
10256: PUSH
10257: LD_VAR 0 7
10261: ST_TO_ADDR
// end ; end ;
10262: GO 10207
10264: POP
10265: POP
// result := NearestUn ;
10266: LD_ADDR_VAR 0 3
10270: PUSH
10271: LD_VAR 0 5
10275: ST_TO_ADDR
// end ;
10276: LD_VAR 0 3
10280: RET
// export function PrepareDifficulty ; begin
10281: LD_INT 0
10283: PPUSH
// if Difficulty = 1 then
10284: LD_OWVAR 67
10288: PUSH
10289: LD_INT 1
10291: EQUAL
10292: IFFALSE 10355
// begin RemoveUnit ( brw2 ) ;
10294: LD_INT 9
10296: PPUSH
10297: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10301: LD_INT 30
10303: PPUSH
10304: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10308: LD_INT 52
10310: PPUSH
10311: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10315: LD_INT 63
10317: PPUSH
10318: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10322: LD_INT 5
10324: PUSH
10325: LD_INT 4
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PPUSH
10332: LD_INT 60
10334: PPUSH
10335: CALL_OW 240
// RuSoldMinLevel = 0 ;
10339: LD_ADDR_EXP 13
10343: PUSH
10344: LD_INT 0
10346: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10347: LD_ADDR_EXP 14
10351: PUSH
10352: LD_INT 1
10354: ST_TO_ADDR
// end ; if Difficulty = 2 then
10355: LD_OWVAR 67
10359: PUSH
10360: LD_INT 2
10362: EQUAL
10363: IFFALSE 10405
// begin RemoveUnit ( brw4 ) ;
10365: LD_INT 52
10367: PPUSH
10368: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10372: LD_INT 5
10374: PUSH
10375: LD_INT 4
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PPUSH
10382: LD_INT 50
10384: PPUSH
10385: CALL_OW 240
// RuSoldMinLevel = 1 ;
10389: LD_ADDR_EXP 13
10393: PUSH
10394: LD_INT 1
10396: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10397: LD_ADDR_EXP 14
10401: PUSH
10402: LD_INT 2
10404: ST_TO_ADDR
// end ; if Difficulty >= 3 then
10405: LD_OWVAR 67
10409: PUSH
10410: LD_INT 3
10412: GREATEREQUAL
10413: IFFALSE 10448
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10415: LD_INT 5
10417: PUSH
10418: LD_INT 4
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PPUSH
10425: LD_INT 40
10427: PPUSH
10428: CALL_OW 240
// RuSoldMinLevel = 2 ;
10432: LD_ADDR_EXP 13
10436: PUSH
10437: LD_INT 2
10439: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10440: LD_ADDR_EXP 14
10444: PUSH
10445: LD_INT 3
10447: ST_TO_ADDR
// end ; end ;
10448: LD_VAR 0 1
10452: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10453: LD_INT 0
10455: PPUSH
10456: PPUSH
10457: PPUSH
// if not vehicles then
10458: LD_VAR 0 1
10462: NOT
10463: IFFALSE 10467
// exit ;
10465: GO 10597
// tmp := [ ] ;
10467: LD_ADDR_VAR 0 5
10471: PUSH
10472: EMPTY
10473: ST_TO_ADDR
// for i in vehicles do
10474: LD_ADDR_VAR 0 4
10478: PUSH
10479: LD_VAR 0 1
10483: PUSH
10484: FOR_IN
10485: IFFALSE 10581
// tmp := Replace ( tmp , tmp + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10487: LD_ADDR_VAR 0 5
10491: PUSH
10492: LD_VAR 0 5
10496: PPUSH
10497: LD_VAR 0 5
10501: PUSH
10502: LD_INT 1
10504: PLUS
10505: PPUSH
10506: LD_VAR 0 4
10510: PPUSH
10511: CALL_OW 265
10515: PUSH
10516: LD_VAR 0 4
10520: PPUSH
10521: CALL_OW 262
10525: PUSH
10526: LD_VAR 0 4
10530: PPUSH
10531: CALL_OW 263
10535: PUSH
10536: LD_VAR 0 4
10540: PPUSH
10541: CALL_OW 264
10545: PUSH
10546: LD_VAR 0 4
10550: PPUSH
10551: CALL_OW 261
10555: PUSH
10556: LD_VAR 0 4
10560: PPUSH
10561: CALL_OW 256
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: PPUSH
10574: CALL_OW 1
10578: ST_TO_ADDR
10579: GO 10484
10581: POP
10582: POP
// SaveVariable ( tmp , ident ) ;
10583: LD_VAR 0 5
10587: PPUSH
10588: LD_VAR 0 2
10592: PPUSH
10593: CALL_OW 39
// end ; end_of_file
10597: LD_VAR 0 3
10601: RET
// export function PrepareHeroes ; var plive , prefix ; begin
10602: LD_INT 0
10604: PPUSH
10605: PPUSH
10606: PPUSH
// prefix := 01_ ;
10607: LD_ADDR_VAR 0 3
10611: PUSH
10612: LD_STRING 01_
10614: ST_TO_ADDR
// uc_side := 1 ;
10615: LD_ADDR_OWVAR 20
10619: PUSH
10620: LD_INT 1
10622: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debug ) , prefix ) ;
10623: LD_ADDR_EXP 1
10627: PUSH
10628: LD_STRING JMM
10630: PPUSH
10631: LD_EXP 34
10635: NOT
10636: PPUSH
10637: LD_VAR 0 3
10641: PPUSH
10642: CALL 35380 0 3
10646: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10647: LD_ADDR_VAR 0 2
10651: PUSH
10652: LD_STRING 01_JMMLifePoints_1
10654: PPUSH
10655: LD_INT 1000
10657: PPUSH
10658: CALL_OW 30
10662: ST_TO_ADDR
// if plive < 250 then
10663: LD_VAR 0 2
10667: PUSH
10668: LD_INT 250
10670: LESS
10671: IFFALSE 10681
// plive := 300 ;
10673: LD_ADDR_VAR 0 2
10677: PUSH
10678: LD_INT 300
10680: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10681: LD_EXP 1
10685: PPUSH
10686: LD_VAR 0 2
10690: PPUSH
10691: CALL_OW 234
// Powell := NewCharacter ( Powell ) ;
10695: LD_ADDR_EXP 9
10699: PUSH
10700: LD_STRING Powell
10702: PPUSH
10703: CALL_OW 25
10707: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , prefix ) ;
10708: LD_ADDR_EXP 2
10712: PUSH
10713: LD_STRING Bobby
10715: PPUSH
10716: LD_EXP 34
10720: NOT
10721: PPUSH
10722: LD_VAR 0 3
10726: PPUSH
10727: CALL 35380 0 3
10731: ST_TO_ADDR
// if Bobby then
10732: LD_EXP 2
10736: IFFALSE 10786
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10738: LD_ADDR_VAR 0 2
10742: PUSH
10743: LD_STRING 01_BobbyLifePoints_1
10745: PPUSH
10746: LD_INT 1000
10748: PPUSH
10749: CALL_OW 30
10753: ST_TO_ADDR
// if plive < 250 then
10754: LD_VAR 0 2
10758: PUSH
10759: LD_INT 250
10761: LESS
10762: IFFALSE 10772
// plive := 300 ;
10764: LD_ADDR_VAR 0 2
10768: PUSH
10769: LD_INT 300
10771: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
10772: LD_EXP 2
10776: PPUSH
10777: LD_VAR 0 2
10781: PPUSH
10782: CALL_OW 234
// end ; Cyrus := PrepareUnit ( Cyrus , ( not debug ) , prefix ) ;
10786: LD_ADDR_EXP 3
10790: PUSH
10791: LD_STRING Cyrus
10793: PPUSH
10794: LD_EXP 34
10798: NOT
10799: PPUSH
10800: LD_VAR 0 3
10804: PPUSH
10805: CALL 35380 0 3
10809: ST_TO_ADDR
// if Cyrus then
10810: LD_EXP 3
10814: IFFALSE 10864
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
10816: LD_ADDR_VAR 0 2
10820: PUSH
10821: LD_STRING 01_CyrusLifePoints_1
10823: PPUSH
10824: LD_INT 1000
10826: PPUSH
10827: CALL_OW 30
10831: ST_TO_ADDR
// if plive < 250 then
10832: LD_VAR 0 2
10836: PUSH
10837: LD_INT 250
10839: LESS
10840: IFFALSE 10850
// plive := 300 ;
10842: LD_ADDR_VAR 0 2
10846: PUSH
10847: LD_INT 300
10849: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
10850: LD_EXP 3
10854: PPUSH
10855: LD_VAR 0 2
10859: PPUSH
10860: CALL_OW 234
// end ; Khatam := NewCharacter ( Khatam ) ;
10864: LD_ADDR_EXP 5
10868: PUSH
10869: LD_STRING Khatam
10871: PPUSH
10872: CALL_OW 25
10876: ST_TO_ADDR
// uc_side := 4 ;
10877: LD_ADDR_OWVAR 20
10881: PUSH
10882: LD_INT 4
10884: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10885: LD_ADDR_EXP 4
10889: PUSH
10890: LD_STRING Lisa
10892: PPUSH
10893: CALL_OW 25
10897: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10898: LD_EXP 1
10902: PPUSH
10903: LD_INT 3
10905: PPUSH
10906: LD_INT 0
10908: PPUSH
10909: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10913: LD_EXP 2
10917: PPUSH
10918: LD_INT 3
10920: PPUSH
10921: LD_INT 0
10923: PPUSH
10924: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10928: LD_EXP 3
10932: PPUSH
10933: LD_INT 3
10935: PPUSH
10936: LD_INT 0
10938: PPUSH
10939: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10943: LD_EXP 4
10947: PPUSH
10948: LD_INT 5
10950: PPUSH
10951: LD_INT 0
10953: PPUSH
10954: CALL_OW 49
// ComCrawl ( Lisa ) ;
10958: LD_EXP 4
10962: PPUSH
10963: CALL_OW 137
// end ;
10967: LD_VAR 0 1
10971: RET
// export function PrepareLisSquad ; var i , un ; begin
10972: LD_INT 0
10974: PPUSH
10975: PPUSH
10976: PPUSH
// uc_side := 4 ;
10977: LD_ADDR_OWVAR 20
10981: PUSH
10982: LD_INT 4
10984: ST_TO_ADDR
// uc_nation := 1 ;
10985: LD_ADDR_OWVAR 21
10989: PUSH
10990: LD_INT 1
10992: ST_TO_ADDR
// hc_class := 2 ;
10993: LD_ADDR_OWVAR 28
10997: PUSH
10998: LD_INT 2
11000: ST_TO_ADDR
// hc_sex := sex_male ;
11001: LD_ADDR_OWVAR 27
11005: PUSH
11006: LD_INT 1
11008: ST_TO_ADDR
// hc_gallery :=  ;
11009: LD_ADDR_OWVAR 33
11013: PUSH
11014: LD_STRING 
11016: ST_TO_ADDR
// hc_name :=  ;
11017: LD_ADDR_OWVAR 26
11021: PUSH
11022: LD_STRING 
11024: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11025: LD_ADDR_OWVAR 30
11029: PUSH
11030: LD_INT 0
11032: PUSH
11033: LD_INT 1
11035: PUSH
11036: LD_INT 0
11038: PUSH
11039: LD_INT 0
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11048: LD_ADDR_OWVAR 31
11052: PUSH
11053: LD_INT 1
11055: PUSH
11056: LD_INT 2
11058: PUSH
11059: LD_INT 0
11061: PUSH
11062: LD_INT 0
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: ST_TO_ADDR
// un := CreateHuman ;
11071: LD_ADDR_VAR 0 3
11075: PUSH
11076: CALL_OW 44
11080: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11081: LD_VAR 0 3
11085: PPUSH
11086: LD_INT 6
11088: PPUSH
11089: LD_INT 0
11091: PPUSH
11092: CALL_OW 49
// hc_sex := sex_female ;
11096: LD_ADDR_OWVAR 27
11100: PUSH
11101: LD_INT 2
11103: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11104: LD_ADDR_OWVAR 30
11108: PUSH
11109: LD_INT 0
11111: PUSH
11112: LD_INT 0
11114: PUSH
11115: LD_INT 0
11117: PUSH
11118: LD_INT 1
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11127: LD_ADDR_OWVAR 31
11131: PUSH
11132: LD_INT 0
11134: PUSH
11135: LD_INT 1
11137: PUSH
11138: LD_INT 0
11140: PUSH
11141: LD_INT 1
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: ST_TO_ADDR
// un := CreateHuman ;
11150: LD_ADDR_VAR 0 3
11154: PUSH
11155: CALL_OW 44
11159: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11160: LD_VAR 0 3
11164: PPUSH
11165: LD_INT 6
11167: PPUSH
11168: LD_INT 0
11170: PPUSH
11171: CALL_OW 49
// if not Bobby and not Cyrus then
11175: LD_EXP 2
11179: NOT
11180: PUSH
11181: LD_EXP 3
11185: NOT
11186: AND
11187: IFFALSE 11276
// begin hc_class := 1 ;
11189: LD_ADDR_OWVAR 28
11193: PUSH
11194: LD_INT 1
11196: ST_TO_ADDR
// hc_sex := sex_male ;
11197: LD_ADDR_OWVAR 27
11201: PUSH
11202: LD_INT 1
11204: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11205: LD_ADDR_OWVAR 30
11209: PUSH
11210: LD_INT 2
11212: PUSH
11213: LD_INT 3
11215: PUSH
11216: LD_INT 1
11218: PUSH
11219: LD_INT 0
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11228: LD_ADDR_OWVAR 31
11232: PUSH
11233: LD_INT 2
11235: PUSH
11236: LD_INT 3
11238: PUSH
11239: LD_INT 1
11241: PUSH
11242: LD_INT 0
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: ST_TO_ADDR
// un := CreateHuman ;
11251: LD_ADDR_VAR 0 3
11255: PUSH
11256: CALL_OW 44
11260: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11261: LD_VAR 0 3
11265: PPUSH
11266: LD_INT 31
11268: PPUSH
11269: LD_INT 0
11271: PPUSH
11272: CALL_OW 49
// end ; InitHc ;
11276: CALL_OW 19
// end ;
11280: LD_VAR 0 1
11284: RET
// export function PrepareOtherAmericans ; begin
11285: LD_INT 0
11287: PPUSH
// uc_side := 4 ;
11288: LD_ADDR_OWVAR 20
11292: PUSH
11293: LD_INT 4
11295: ST_TO_ADDR
// uc_nation := 1 ;
11296: LD_ADDR_OWVAR 21
11300: PUSH
11301: LD_INT 1
11303: ST_TO_ADDR
// hc_gallery :=  ;
11304: LD_ADDR_OWVAR 33
11308: PUSH
11309: LD_STRING 
11311: ST_TO_ADDR
// hc_name := Tom Garvin ;
11312: LD_ADDR_OWVAR 26
11316: PUSH
11317: LD_STRING Tom Garvin
11319: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 2 ) ;
11320: LD_INT 1
11322: PPUSH
11323: LD_INT 1
11325: PPUSH
11326: LD_INT 2
11328: PPUSH
11329: CALL_OW 380
// Brian := CreateHuman ;
11333: LD_ADDR_EXP 6
11337: PUSH
11338: CALL_OW 44
11342: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11343: LD_EXP 6
11347: PPUSH
11348: LD_INT 10
11350: PPUSH
11351: LD_INT 0
11353: PPUSH
11354: CALL_OW 49
// hc_name := Jerry White ;
11358: LD_ADDR_OWVAR 26
11362: PUSH
11363: LD_STRING Jerry White
11365: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , 2 ) ;
11366: LD_INT 1
11368: PPUSH
11369: LD_INT 3
11371: PPUSH
11372: LD_INT 2
11374: PPUSH
11375: CALL_OW 380
// Jerry := CreateHuman ;
11379: LD_ADDR_EXP 7
11383: PUSH
11384: CALL_OW 44
11388: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11389: LD_EXP 7
11393: PPUSH
11394: LD_INT 10
11396: PPUSH
11397: LD_INT 0
11399: PPUSH
11400: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11404: LD_EXP 6
11408: PUSH
11409: LD_EXP 7
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: PPUSH
11418: CALL_OW 140
// end ;
11422: LD_VAR 0 1
11426: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11427: LD_INT 0
11429: PPUSH
11430: PPUSH
11431: PPUSH
// for i = 1 to 6 do
11432: LD_ADDR_VAR 0 2
11436: PUSH
11437: DOUBLE
11438: LD_INT 1
11440: DEC
11441: ST_TO_ADDR
11442: LD_INT 6
11444: PUSH
11445: FOR_TO
11446: IFFALSE 11540
// begin uc_side := 4 ;
11448: LD_ADDR_OWVAR 20
11452: PUSH
11453: LD_INT 4
11455: ST_TO_ADDR
// uc_nation := 1 ;
11456: LD_ADDR_OWVAR 21
11460: PUSH
11461: LD_INT 1
11463: ST_TO_ADDR
// hc_gallery :=  ;
11464: LD_ADDR_OWVAR 33
11468: PUSH
11469: LD_STRING 
11471: ST_TO_ADDR
// hc_name :=  ;
11472: LD_ADDR_OWVAR 26
11476: PUSH
11477: LD_STRING 
11479: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11480: LD_INT 0
11482: PPUSH
11483: LD_INT 1
11485: PPUSH
11486: LD_INT 4
11488: PPUSH
11489: CALL_OW 12
11493: PPUSH
11494: LD_INT 1
11496: PPUSH
11497: CALL_OW 380
// un := CreateHuman ;
11501: LD_ADDR_VAR 0 3
11505: PUSH
11506: CALL_OW 44
11510: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11511: LD_VAR 0 3
11515: PPUSH
11516: LD_INT 16
11518: PPUSH
11519: LD_INT 0
11521: PPUSH
11522: CALL_OW 49
// SetLives ( un , 1 ) ;
11526: LD_VAR 0 3
11530: PPUSH
11531: LD_INT 1
11533: PPUSH
11534: CALL_OW 234
// end ;
11538: GO 11445
11540: POP
11541: POP
// DyingSold := CreateHuman ;
11542: LD_ADDR_EXP 35
11546: PUSH
11547: CALL_OW 44
11551: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11552: LD_EXP 35
11556: PPUSH
11557: LD_INT 16
11559: PPUSH
11560: LD_INT 0
11562: PPUSH
11563: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11567: LD_EXP 35
11571: PPUSH
11572: LD_INT 250
11574: PPUSH
11575: CALL_OW 234
// end ; end_of_file
11579: LD_VAR 0 1
11583: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11584: LD_INT 0
11586: PPUSH
11587: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11588: LD_ADDR_VAR 0 2
11592: PUSH
11593: LD_INT 22
11595: PUSH
11596: LD_INT 1
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PUSH
11603: LD_INT 23
11605: PUSH
11606: LD_INT 1
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PUSH
11613: LD_INT 25
11615: PUSH
11616: LD_INT 2
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: PUSH
11623: LD_INT 50
11625: PUSH
11626: EMPTY
11627: LIST
11628: PUSH
11629: LD_INT 56
11631: PUSH
11632: EMPTY
11633: LIST
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: PPUSH
11642: CALL_OW 69
11646: PUSH
11647: LD_EXP 1
11651: PUSH
11652: EMPTY
11653: LIST
11654: DIFF
11655: ST_TO_ADDR
// if not tmp then
11656: LD_VAR 0 2
11660: NOT
11661: IFFALSE 11665
// exit ;
11663: GO 11741
// uc_side = 6 ;
11665: LD_ADDR_OWVAR 20
11669: PUSH
11670: LD_INT 6
11672: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11673: LD_ADDR_EXP 8
11677: PUSH
11678: LD_STRING Mikhail
11680: PPUSH
11681: CALL_OW 25
11685: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11686: LD_EXP 8
11690: PPUSH
11691: LD_INT 3
11693: PPUSH
11694: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
11698: LD_EXP 8
11702: PPUSH
11703: LD_VAR 0 2
11707: PUSH
11708: LD_INT 1
11710: ARRAY
11711: PPUSH
11712: CALL_OW 250
11716: PPUSH
11717: LD_VAR 0 2
11721: PUSH
11722: LD_INT 1
11724: ARRAY
11725: PPUSH
11726: CALL_OW 251
11730: PPUSH
11731: LD_INT 5
11733: PPUSH
11734: LD_INT 1
11736: PPUSH
11737: CALL_OW 50
// end ;
11741: LD_VAR 0 1
11745: RET
// export function PrepareRussianCommander ; begin
11746: LD_INT 0
11748: PPUSH
// uc_side = 3 ;
11749: LD_ADDR_OWVAR 20
11753: PUSH
11754: LD_INT 3
11756: ST_TO_ADDR
// uc_nation = 3 ;
11757: LD_ADDR_OWVAR 21
11761: PUSH
11762: LD_INT 3
11764: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11765: LD_ADDR_EXP 19
11769: PUSH
11770: LD_STRING Natasza
11772: PPUSH
11773: CALL_OW 25
11777: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11778: LD_EXP 19
11782: PPUSH
11783: LD_INT 24
11785: PPUSH
11786: LD_INT 0
11788: PPUSH
11789: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11793: LD_EXP 19
11797: PPUSH
11798: LD_INT 56
11800: PPUSH
11801: LD_INT 16
11803: PPUSH
11804: CALL_OW 118
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , Natasza ) ;
11808: LD_ADDR_EXP 24
11812: PUSH
11813: LD_EXP 24
11817: PPUSH
11818: LD_EXP 24
11822: PUSH
11823: LD_INT 1
11825: PLUS
11826: PPUSH
11827: LD_EXP 19
11831: PPUSH
11832: CALL_OW 1
11836: ST_TO_ADDR
// end ;
11837: LD_VAR 0 1
11841: RET
// export function PrepareSouthBase ; var i , un ; begin
11842: LD_INT 0
11844: PPUSH
11845: PPUSH
11846: PPUSH
// for i = 1 to 2 do
11847: LD_ADDR_VAR 0 2
11851: PUSH
11852: DOUBLE
11853: LD_INT 1
11855: DEC
11856: ST_TO_ADDR
11857: LD_INT 2
11859: PUSH
11860: FOR_TO
11861: IFFALSE 11970
// begin uc_side = 3 ;
11863: LD_ADDR_OWVAR 20
11867: PUSH
11868: LD_INT 3
11870: ST_TO_ADDR
// uc_nation = 3 ;
11871: LD_ADDR_OWVAR 21
11875: PUSH
11876: LD_INT 3
11878: ST_TO_ADDR
// hc_gallery =  ;
11879: LD_ADDR_OWVAR 33
11883: PUSH
11884: LD_STRING 
11886: ST_TO_ADDR
// hc_name =  ;
11887: LD_ADDR_OWVAR 26
11891: PUSH
11892: LD_STRING 
11894: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11895: LD_INT 1
11897: PPUSH
11898: LD_INT 1
11900: PPUSH
11901: LD_EXP 13
11905: PPUSH
11906: LD_EXP 14
11910: PPUSH
11911: CALL_OW 12
11915: PPUSH
11916: CALL_OW 380
// hc_importance = 0 ;
11920: LD_ADDR_OWVAR 32
11924: PUSH
11925: LD_INT 0
11927: ST_TO_ADDR
// un = CreateHuman ;
11928: LD_ADDR_VAR 0 3
11932: PUSH
11933: CALL_OW 44
11937: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11938: LD_VAR 0 3
11942: PPUSH
11943: LD_INT 11
11945: PPUSH
11946: LD_INT 0
11948: PPUSH
11949: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
11953: LD_VAR 0 3
11957: PPUSH
11958: LD_INT 111
11960: PPUSH
11961: LD_INT 38
11963: PPUSH
11964: CALL_OW 118
// end ;
11968: GO 11860
11970: POP
11971: POP
// for i = 1 to 2 do
11972: LD_ADDR_VAR 0 2
11976: PUSH
11977: DOUBLE
11978: LD_INT 1
11980: DEC
11981: ST_TO_ADDR
11982: LD_INT 2
11984: PUSH
11985: FOR_TO
11986: IFFALSE 12069
// begin uc_side = 3 ;
11988: LD_ADDR_OWVAR 20
11992: PUSH
11993: LD_INT 3
11995: ST_TO_ADDR
// uc_nation = 3 ;
11996: LD_ADDR_OWVAR 21
12000: PUSH
12001: LD_INT 3
12003: ST_TO_ADDR
// hc_gallery =  ;
12004: LD_ADDR_OWVAR 33
12008: PUSH
12009: LD_STRING 
12011: ST_TO_ADDR
// hc_name =  ;
12012: LD_ADDR_OWVAR 26
12016: PUSH
12017: LD_STRING 
12019: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12020: LD_INT 0
12022: PPUSH
12023: LD_INT 3
12025: PPUSH
12026: LD_EXP 13
12030: PPUSH
12031: LD_EXP 14
12035: PPUSH
12036: CALL_OW 12
12040: PPUSH
12041: CALL_OW 380
// un = CreateHuman ;
12045: LD_ADDR_VAR 0 3
12049: PUSH
12050: CALL_OW 44
12054: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12055: LD_VAR 0 3
12059: PPUSH
12060: LD_INT 10
12062: PPUSH
12063: CALL_OW 52
// end ;
12067: GO 11985
12069: POP
12070: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12071: LD_INT 3
12073: PPUSH
12074: LD_INT 3
12076: PPUSH
12077: LD_INT 33
12079: PPUSH
12080: LD_EXP 13
12084: PPUSH
12085: LD_EXP 14
12089: PPUSH
12090: CALL_OW 12
12094: PPUSH
12095: LD_INT 1
12097: PPUSH
12098: LD_INT 1
12100: PUSH
12101: LD_INT 2
12103: PUSH
12104: LD_INT 2
12106: PUSH
12107: LD_INT 3
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: PUSH
12116: LD_OWVAR 67
12120: ARRAY
12121: PPUSH
12122: CALL 8729 0 6
// for i in UnitsInside ( arm2 ) do
12126: LD_ADDR_VAR 0 2
12130: PUSH
12131: LD_INT 33
12133: PPUSH
12134: CALL_OW 313
12138: PUSH
12139: FOR_IN
12140: IFFALSE 12173
// southBaseDefenders = Replace ( southBaseDefenders , southBaseDefenders + 1 , i ) ;
12142: LD_ADDR_EXP 25
12146: PUSH
12147: LD_EXP 25
12151: PPUSH
12152: LD_EXP 25
12156: PUSH
12157: LD_INT 1
12159: PLUS
12160: PPUSH
12161: LD_VAR 0 2
12165: PPUSH
12166: CALL_OW 1
12170: ST_TO_ADDR
12171: GO 12139
12173: POP
12174: POP
// end ;
12175: LD_VAR 0 1
12179: RET
// export function PrepareNorthBase ; var i , un ; begin
12180: LD_INT 0
12182: PPUSH
12183: PPUSH
12184: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) , 4 ] [ Difficulty ] do
12185: LD_ADDR_VAR 0 2
12189: PUSH
12190: DOUBLE
12191: LD_INT 1
12193: DEC
12194: ST_TO_ADDR
12195: LD_INT 1
12197: PPUSH
12198: LD_INT 2
12200: PPUSH
12201: CALL_OW 12
12205: PUSH
12206: LD_INT 2
12208: PPUSH
12209: LD_INT 3
12211: PPUSH
12212: CALL_OW 12
12216: PUSH
12217: LD_INT 3
12219: PPUSH
12220: LD_INT 4
12222: PPUSH
12223: CALL_OW 12
12227: PUSH
12228: LD_INT 4
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: PUSH
12237: LD_OWVAR 67
12241: ARRAY
12242: PUSH
12243: FOR_TO
12244: IFFALSE 12330
// begin uc_side = 3 ;
12246: LD_ADDR_OWVAR 20
12250: PUSH
12251: LD_INT 3
12253: ST_TO_ADDR
// uc_nation = 3 ;
12254: LD_ADDR_OWVAR 21
12258: PUSH
12259: LD_INT 3
12261: ST_TO_ADDR
// hc_gallery =  ;
12262: LD_ADDR_OWVAR 33
12266: PUSH
12267: LD_STRING 
12269: ST_TO_ADDR
// hc_name =  ;
12270: LD_ADDR_OWVAR 26
12274: PUSH
12275: LD_STRING 
12277: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12278: LD_INT 0
12280: PPUSH
12281: LD_INT 1
12283: PPUSH
12284: LD_EXP 13
12288: PPUSH
12289: LD_EXP 14
12293: PPUSH
12294: CALL_OW 12
12298: PPUSH
12299: CALL_OW 380
// un = CreateHuman ;
12303: LD_ADDR_VAR 0 3
12307: PUSH
12308: CALL_OW 44
12312: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12313: LD_VAR 0 3
12317: PPUSH
12318: LD_INT 14
12320: PPUSH
12321: LD_INT 0
12323: PPUSH
12324: CALL_OW 49
// end ;
12328: GO 12243
12330: POP
12331: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) , 4 ] [ Difficulty ] ) ;
12332: LD_INT 3
12334: PPUSH
12335: LD_INT 3
12337: PPUSH
12338: LD_INT 2
12340: PPUSH
12341: LD_EXP 13
12345: PPUSH
12346: LD_EXP 14
12350: PPUSH
12351: CALL_OW 12
12355: PPUSH
12356: LD_INT 1
12358: PPUSH
12359: LD_INT 1
12361: PPUSH
12362: LD_INT 2
12364: PPUSH
12365: CALL_OW 12
12369: PUSH
12370: LD_INT 1
12372: PPUSH
12373: LD_INT 3
12375: PPUSH
12376: CALL_OW 12
12380: PUSH
12381: LD_INT 1
12383: PPUSH
12384: LD_INT 3
12386: PPUSH
12387: CALL_OW 12
12391: PUSH
12392: LD_INT 4
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: PUSH
12401: LD_OWVAR 67
12405: ARRAY
12406: PPUSH
12407: CALL 8729 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 , 2 ] [ Difficulty ] ) ;
12411: LD_INT 3
12413: PPUSH
12414: LD_INT 3
12416: PPUSH
12417: LD_INT 23
12419: PPUSH
12420: LD_EXP 13
12424: PPUSH
12425: LD_EXP 14
12429: PPUSH
12430: CALL_OW 12
12434: PPUSH
12435: LD_INT 4
12437: PPUSH
12438: LD_INT 0
12440: PUSH
12441: LD_INT 1
12443: PUSH
12444: LD_INT 2
12446: PUSH
12447: LD_INT 2
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: PUSH
12456: LD_OWVAR 67
12460: ARRAY
12461: PPUSH
12462: CALL 8729 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12466: LD_INT 3
12468: PPUSH
12469: LD_INT 3
12471: PPUSH
12472: LD_INT 1
12474: PPUSH
12475: LD_EXP 13
12479: PPUSH
12480: LD_EXP 14
12484: PPUSH
12485: CALL_OW 12
12489: PPUSH
12490: LD_INT 2
12492: PPUSH
12493: LD_INT 1
12495: PUSH
12496: LD_INT 2
12498: PUSH
12499: LD_INT 2
12501: PUSH
12502: LD_INT 3
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: PUSH
12511: LD_OWVAR 67
12515: ARRAY
12516: PPUSH
12517: CALL 8729 0 6
// for i in UnitsInside ( arm1 ) do
12521: LD_ADDR_VAR 0 2
12525: PUSH
12526: LD_INT 2
12528: PPUSH
12529: CALL_OW 313
12533: PUSH
12534: FOR_IN
12535: IFFALSE 12568
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , i ) ;
12537: LD_ADDR_EXP 24
12541: PUSH
12542: LD_EXP 24
12546: PPUSH
12547: LD_EXP 24
12551: PUSH
12552: LD_INT 1
12554: PLUS
12555: PPUSH
12556: LD_VAR 0 2
12560: PPUSH
12561: CALL_OW 1
12565: ST_TO_ADDR
12566: GO 12534
12568: POP
12569: POP
// end ;
12570: LD_VAR 0 1
12574: RET
// export function PrepareOtherRussians ; var i , un ; begin
12575: LD_INT 0
12577: PPUSH
12578: PPUSH
12579: PPUSH
// for i = 1 to 2 do
12580: LD_ADDR_VAR 0 2
12584: PUSH
12585: DOUBLE
12586: LD_INT 1
12588: DEC
12589: ST_TO_ADDR
12590: LD_INT 2
12592: PUSH
12593: FOR_TO
12594: IFFALSE 12695
// begin uc_side = 3 ;
12596: LD_ADDR_OWVAR 20
12600: PUSH
12601: LD_INT 3
12603: ST_TO_ADDR
// uc_nation = 3 ;
12604: LD_ADDR_OWVAR 21
12608: PUSH
12609: LD_INT 3
12611: ST_TO_ADDR
// hc_gallery =  ;
12612: LD_ADDR_OWVAR 33
12616: PUSH
12617: LD_STRING 
12619: ST_TO_ADDR
// hc_name =  ;
12620: LD_ADDR_OWVAR 26
12624: PUSH
12625: LD_STRING 
12627: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12628: LD_INT 0
12630: PPUSH
12631: LD_INT 1
12633: PPUSH
12634: LD_EXP 13
12638: PPUSH
12639: LD_EXP 14
12643: PPUSH
12644: CALL_OW 12
12648: PPUSH
12649: CALL_OW 380
// un = CreateHuman ;
12653: LD_ADDR_VAR 0 3
12657: PUSH
12658: CALL_OW 44
12662: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12663: LD_VAR 0 3
12667: PPUSH
12668: LD_INT 9
12670: PPUSH
12671: LD_INT 0
12673: PPUSH
12674: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12678: LD_VAR 0 3
12682: PPUSH
12683: LD_INT 80
12685: PPUSH
12686: LD_INT 73
12688: PPUSH
12689: CALL_OW 118
// end ;
12693: GO 12593
12695: POP
12696: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12697: LD_ADDR_VAR 0 2
12701: PUSH
12702: LD_INT 22
12704: PUSH
12705: LD_INT 3
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: PUSH
12712: LD_INT 30
12714: PUSH
12715: LD_INT 31
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PPUSH
12726: CALL_OW 69
12730: PUSH
12731: FOR_IN
12732: IFFALSE 12760
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12734: LD_EXP 13
12738: PPUSH
12739: LD_EXP 14
12743: PPUSH
12744: CALL_OW 12
12748: PPUSH
12749: LD_VAR 0 2
12753: PPUSH
12754: CALL 8838 0 2
12758: GO 12731
12760: POP
12761: POP
// end ;
12762: LD_VAR 0 1
12766: RET
// export function PrepareCargoBays ; begin
12767: LD_INT 0
12769: PPUSH
// uc_side = 3 ;
12770: LD_ADDR_OWVAR 20
12774: PUSH
12775: LD_INT 3
12777: ST_TO_ADDR
// uc_nation = 3 ;
12778: LD_ADDR_OWVAR 21
12782: PUSH
12783: LD_INT 3
12785: ST_TO_ADDR
// vc_engine = 1 ;
12786: LD_ADDR_OWVAR 39
12790: PUSH
12791: LD_INT 1
12793: ST_TO_ADDR
// vc_control = 1 ;
12794: LD_ADDR_OWVAR 38
12798: PUSH
12799: LD_INT 1
12801: ST_TO_ADDR
// vc_weapon = 51 ;
12802: LD_ADDR_OWVAR 40
12806: PUSH
12807: LD_INT 51
12809: ST_TO_ADDR
// vc_chassis = 22 ;
12810: LD_ADDR_OWVAR 37
12814: PUSH
12815: LD_INT 22
12817: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12818: LD_ADDR_EXP 15
12822: PUSH
12823: CALL_OW 45
12827: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12828: LD_ADDR_EXP 16
12832: PUSH
12833: CALL_OW 45
12837: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12838: LD_EXP 15
12842: PPUSH
12843: LD_INT 13
12845: PPUSH
12846: LD_INT 0
12848: PPUSH
12849: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12853: LD_EXP 16
12857: PPUSH
12858: LD_INT 13
12860: PPUSH
12861: LD_INT 0
12863: PPUSH
12864: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
12868: LD_EXP 15
12872: PPUSH
12873: LD_INT 2
12875: PPUSH
12876: LD_INT 70
12878: PUSH
12879: LD_INT 50
12881: PUSH
12882: LD_INT 30
12884: PUSH
12885: LD_INT 20
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: PUSH
12894: LD_OWVAR 67
12898: ARRAY
12899: PPUSH
12900: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
12904: LD_EXP 16
12908: PPUSH
12909: LD_INT 2
12911: PPUSH
12912: LD_INT 70
12914: PUSH
12915: LD_INT 50
12917: PUSH
12918: LD_INT 30
12920: PUSH
12921: LD_INT 20
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: PUSH
12930: LD_OWVAR 67
12934: ARRAY
12935: PPUSH
12936: CALL_OW 291
// hc_gallery =  ;
12940: LD_ADDR_OWVAR 33
12944: PUSH
12945: LD_STRING 
12947: ST_TO_ADDR
// hc_name =  ;
12948: LD_ADDR_OWVAR 26
12952: PUSH
12953: LD_STRING 
12955: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12956: LD_INT 1
12958: PPUSH
12959: LD_INT 3
12961: PPUSH
12962: LD_INT 1
12964: PPUSH
12965: LD_INT 2
12967: PPUSH
12968: CALL_OW 12
12972: PPUSH
12973: CALL_OW 380
// driver1 = CreateHuman ;
12977: LD_ADDR_EXP 17
12981: PUSH
12982: CALL_OW 44
12986: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
12987: LD_EXP 17
12991: PPUSH
12992: LD_EXP 15
12996: PPUSH
12997: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13001: LD_ADDR_OWVAR 26
13005: PUSH
13006: LD_STRING Nikolai Andreyev
13008: ST_TO_ADDR
// driver2 = CreateHuman ;
13009: LD_ADDR_EXP 18
13013: PUSH
13014: CALL_OW 44
13018: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13019: LD_EXP 18
13023: PPUSH
13024: LD_EXP 16
13028: PPUSH
13029: CALL_OW 52
// end ;
13033: LD_VAR 0 1
13037: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , mech ; begin
13038: LD_INT 0
13040: PPUSH
13041: PPUSH
13042: PPUSH
13043: PPUSH
13044: PPUSH
13045: PPUSH
// uc_side = 3 ;
13046: LD_ADDR_OWVAR 20
13050: PUSH
13051: LD_INT 3
13053: ST_TO_ADDR
// uc_nation = 3 ;
13054: LD_ADDR_OWVAR 21
13058: PUSH
13059: LD_INT 3
13061: ST_TO_ADDR
// for i := 1 to count do
13062: LD_ADDR_VAR 0 4
13066: PUSH
13067: DOUBLE
13068: LD_INT 1
13070: DEC
13071: ST_TO_ADDR
13072: LD_VAR 0 1
13076: PUSH
13077: FOR_TO
13078: IFFALSE 13340
// begin vc_engine = 1 ;
13080: LD_ADDR_OWVAR 39
13084: PUSH
13085: LD_INT 1
13087: ST_TO_ADDR
// vc_control = 1 ;
13088: LD_ADDR_OWVAR 38
13092: PUSH
13093: LD_INT 1
13095: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
13096: LD_ADDR_OWVAR 40
13100: PUSH
13101: LD_INT 42
13103: ST_TO_ADDR
// if Difficulty = 3 then
13104: LD_OWVAR 67
13108: PUSH
13109: LD_INT 3
13111: EQUAL
13112: IFFALSE 13141
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13114: LD_ADDR_OWVAR 40
13118: PUSH
13119: LD_INT 42
13121: PUSH
13122: LD_INT 43
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: PUSH
13129: LD_INT 1
13131: PPUSH
13132: LD_INT 2
13134: PPUSH
13135: CALL_OW 12
13139: ARRAY
13140: ST_TO_ADDR
// if Difficulty = 4 then
13141: LD_OWVAR 67
13145: PUSH
13146: LD_INT 4
13148: EQUAL
13149: IFFALSE 13186
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 4 ) ] ;
13151: LD_ADDR_OWVAR 40
13155: PUSH
13156: LD_INT 42
13158: PUSH
13159: LD_INT 43
13161: PUSH
13162: LD_INT 43
13164: PUSH
13165: LD_INT 44
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: PUSH
13174: LD_INT 1
13176: PPUSH
13177: LD_INT 4
13179: PPUSH
13180: CALL_OW 12
13184: ARRAY
13185: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
13186: LD_ADDR_OWVAR 37
13190: PUSH
13191: LD_INT 21
13193: PUSH
13194: LD_INT 22
13196: PUSH
13197: LD_INT 22
13199: PUSH
13200: LD_INT 22
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: PUSH
13209: LD_OWVAR 67
13213: ARRAY
13214: ST_TO_ADDR
// veh = CreateVehicle ;
13215: LD_ADDR_VAR 0 5
13219: PUSH
13220: CALL_OW 45
13224: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13225: LD_VAR 0 5
13229: PPUSH
13230: LD_VAR 0 2
13234: PPUSH
13235: LD_INT 0
13237: PPUSH
13238: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13242: LD_ADDR_EXP 26
13246: PUSH
13247: LD_EXP 26
13251: PUSH
13252: LD_VAR 0 5
13256: ADD
13257: ST_TO_ADDR
// hc_gallery =  ;
13258: LD_ADDR_OWVAR 33
13262: PUSH
13263: LD_STRING 
13265: ST_TO_ADDR
// hc_name =  ;
13266: LD_ADDR_OWVAR 26
13270: PUSH
13271: LD_STRING 
13273: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13274: LD_INT 0
13276: PPUSH
13277: LD_INT 3
13279: PPUSH
13280: LD_EXP 13
13284: PPUSH
13285: LD_EXP 14
13289: PPUSH
13290: CALL_OW 12
13294: PPUSH
13295: CALL_OW 380
// un = CreateHuman ;
13299: LD_ADDR_VAR 0 6
13303: PUSH
13304: CALL_OW 44
13308: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13309: LD_VAR 0 6
13313: PPUSH
13314: LD_VAR 0 5
13318: PPUSH
13319: CALL_OW 52
// ComMoveXY ( un , 14 , 9 ) ;
13323: LD_VAR 0 6
13327: PPUSH
13328: LD_INT 14
13330: PPUSH
13331: LD_INT 9
13333: PPUSH
13334: CALL_OW 111
// end ;
13338: GO 13077
13340: POP
13341: POP
// wait ( 0 0$1 ) ;
13342: LD_INT 35
13344: PPUSH
13345: CALL_OW 67
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13349: LD_INT 0
13351: PPUSH
13352: LD_INT 2
13354: PPUSH
13355: LD_EXP 13
13359: PPUSH
13360: LD_EXP 14
13364: PPUSH
13365: CALL_OW 12
13369: PPUSH
13370: CALL_OW 380
// un = CreateHuman ;
13374: LD_ADDR_VAR 0 6
13378: PUSH
13379: CALL_OW 44
13383: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13384: LD_ADDR_VAR 0 4
13388: PUSH
13389: DOUBLE
13390: LD_INT 1
13392: DEC
13393: ST_TO_ADDR
13394: LD_VAR 0 1
13398: PUSH
13399: LD_INT 2
13401: PUSH
13402: LD_INT 2
13404: MUL
13405: PLUS
13406: PUSH
13407: FOR_TO
13408: IFFALSE 13500
// begin hc_gallery =  ;
13410: LD_ADDR_OWVAR 33
13414: PUSH
13415: LD_STRING 
13417: ST_TO_ADDR
// hc_name =  ;
13418: LD_ADDR_OWVAR 26
13422: PUSH
13423: LD_STRING 
13425: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13426: LD_INT 1
13428: PPUSH
13429: LD_INT 1
13431: PPUSH
13432: LD_EXP 13
13436: PPUSH
13437: LD_EXP 14
13441: PPUSH
13442: CALL_OW 12
13446: PPUSH
13447: CALL_OW 380
// un = CreateHuman ;
13451: LD_ADDR_VAR 0 6
13455: PUSH
13456: CALL_OW 44
13460: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 13 , 4 , false ) ;
13461: LD_VAR 0 6
13465: PPUSH
13466: LD_INT 9
13468: PPUSH
13469: LD_INT 13
13471: PPUSH
13472: LD_INT 4
13474: PPUSH
13475: LD_INT 0
13477: PPUSH
13478: CALL_OW 50
// attackGroup = attackGroup ^ un ;
13482: LD_ADDR_EXP 26
13486: PUSH
13487: LD_EXP 26
13491: PUSH
13492: LD_VAR 0 6
13496: ADD
13497: ST_TO_ADDR
// end ;
13498: GO 13407
13500: POP
13501: POP
// tmp := FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13502: LD_ADDR_VAR 0 7
13506: PUSH
13507: LD_INT 26
13509: PPUSH
13510: LD_INT 22
13512: PUSH
13513: LD_INT 3
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 21
13522: PUSH
13523: LD_INT 1
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: LD_INT 26
13532: PUSH
13533: LD_INT 1
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: LIST
13544: PPUSH
13545: CALL_OW 70
13549: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13550: LD_VAR 0 7
13554: PUSH
13555: LD_INT 1
13557: ARRAY
13558: PPUSH
13559: LD_STRING D9-Rus3-1
13561: PPUSH
13562: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13566: LD_VAR 0 7
13570: PUSH
13571: LD_INT 2
13573: ARRAY
13574: PPUSH
13575: LD_STRING D9-Russ-1
13577: PPUSH
13578: CALL_OW 88
// ComAgressiveMove ( attackGroup , 31 , 13 ) ;
13582: LD_EXP 26
13586: PPUSH
13587: LD_INT 31
13589: PPUSH
13590: LD_INT 13
13592: PPUSH
13593: CALL_OW 114
// wait ( 0 0$3 ) ;
13597: LD_INT 105
13599: PPUSH
13600: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13604: LD_INT 35
13606: PPUSH
13607: CALL_OW 67
// for i in attackGroup do
13611: LD_ADDR_VAR 0 4
13615: PUSH
13616: LD_EXP 26
13620: PUSH
13621: FOR_IN
13622: IFFALSE 13989
// begin if IsDead ( i ) then
13624: LD_VAR 0 4
13628: PPUSH
13629: CALL_OW 301
13633: IFFALSE 13653
// begin attackGroup := attackGroup diff i ;
13635: LD_ADDR_EXP 26
13639: PUSH
13640: LD_EXP 26
13644: PUSH
13645: LD_VAR 0 4
13649: DIFF
13650: ST_TO_ADDR
// continue ;
13651: GO 13621
// end ; if not HasTask ( i ) and not GetTag ( i ) then
13653: LD_VAR 0 4
13657: PPUSH
13658: CALL_OW 314
13662: NOT
13663: PUSH
13664: LD_VAR 0 4
13668: PPUSH
13669: CALL_OW 110
13673: NOT
13674: AND
13675: IFFALSE 13711
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
13677: LD_VAR 0 4
13681: PPUSH
13682: LD_INT 22
13684: PUSH
13685: LD_INT 1
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: PPUSH
13692: CALL_OW 69
13696: PPUSH
13697: LD_VAR 0 4
13701: PPUSH
13702: CALL_OW 74
13706: PPUSH
13707: CALL_OW 115
// if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
13711: LD_VAR 0 4
13715: PPUSH
13716: CALL_OW 110
13720: NOT
13721: PUSH
13722: LD_VAR 0 4
13726: PPUSH
13727: CALL_OW 256
13731: PUSH
13732: LD_INT 650
13734: LESS
13735: AND
13736: PUSH
13737: LD_VAR 0 4
13741: PPUSH
13742: CALL_OW 247
13746: PUSH
13747: LD_INT 2
13749: EQUAL
13750: AND
13751: IFFALSE 13780
// begin SetTag ( i , 1 ) ;
13753: LD_VAR 0 4
13757: PPUSH
13758: LD_INT 1
13760: PPUSH
13761: CALL_OW 109
// ComMoveXY ( i , 20 , 8 ) ;
13765: LD_VAR 0 4
13769: PPUSH
13770: LD_INT 20
13772: PPUSH
13773: LD_INT 8
13775: PPUSH
13776: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 20 , 8 ) < 6 then
13780: LD_VAR 0 4
13784: PPUSH
13785: CALL_OW 110
13789: PUSH
13790: LD_INT 1
13792: EQUAL
13793: PUSH
13794: LD_VAR 0 4
13798: PPUSH
13799: LD_INT 20
13801: PPUSH
13802: LD_INT 8
13804: PPUSH
13805: CALL_OW 297
13809: PUSH
13810: LD_INT 6
13812: LESS
13813: AND
13814: IFFALSE 13828
// SetTag ( i , 2 ) ;
13816: LD_VAR 0 4
13820: PPUSH
13821: LD_INT 2
13823: PPUSH
13824: CALL_OW 109
// if GetTag ( i ) = 2 then
13828: LD_VAR 0 4
13832: PPUSH
13833: CALL_OW 110
13837: PUSH
13838: LD_INT 2
13840: EQUAL
13841: IFFALSE 13949
// begin if GetLives ( i ) = 1000 then
13843: LD_VAR 0 4
13847: PPUSH
13848: CALL_OW 256
13852: PUSH
13853: LD_INT 1000
13855: EQUAL
13856: IFFALSE 13872
// SetTag ( i , 3 ) else
13858: LD_VAR 0 4
13862: PPUSH
13863: LD_INT 3
13865: PPUSH
13866: CALL_OW 109
13870: GO 13949
// if IsDrivenBy ( i ) then
13872: LD_VAR 0 4
13876: PPUSH
13877: CALL_OW 311
13881: IFFALSE 13949
// begin mech := IsDrivenBy ( i ) ;
13883: LD_ADDR_VAR 0 8
13887: PUSH
13888: LD_VAR 0 4
13892: PPUSH
13893: CALL_OW 311
13897: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
13898: LD_INT 1
13900: PPUSH
13901: LD_VAR 0 8
13905: PPUSH
13906: CALL_OW 292
13910: NOT
13911: PUSH
13912: LD_VAR 0 8
13916: PPUSH
13917: CALL_OW 256
13921: PUSH
13922: LD_INT 1000
13924: LESS
13925: AND
13926: IFFALSE 13940
// SetLives ( mech , 1000 ) ;
13928: LD_VAR 0 8
13932: PPUSH
13933: LD_INT 1000
13935: PPUSH
13936: CALL_OW 234
// ComRepairVehicleAndReturn ( mech ) ;
13940: LD_VAR 0 8
13944: PPUSH
13945: CALL 73809 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
13949: LD_VAR 0 4
13953: PPUSH
13954: CALL_OW 110
13958: PUSH
13959: LD_INT 3
13961: EQUAL
13962: PUSH
13963: LD_VAR 0 4
13967: PPUSH
13968: CALL_OW 311
13972: AND
13973: IFFALSE 13987
// SetTag ( i , 0 ) ;
13975: LD_VAR 0 4
13979: PPUSH
13980: LD_INT 0
13982: PPUSH
13983: CALL_OW 109
// end ;
13987: GO 13621
13989: POP
13990: POP
// until not attackGroup ;
13991: LD_EXP 26
13995: NOT
13996: IFFALSE 13604
// end ;
13998: LD_VAR 0 3
14002: RET
// every 0 0$1 trigger UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do var i ;
14003: LD_EXP 26
14007: PPUSH
14008: LD_INT 21
14010: PUSH
14011: LD_INT 2
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: PPUSH
14018: CALL_OW 72
14022: IFFALSE 14090
14024: GO 14026
14026: DISABLE
14027: LD_INT 0
14029: PPUSH
// begin enable ;
14030: ENABLE
// for i in UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do
14031: LD_ADDR_VAR 0 1
14035: PUSH
14036: LD_EXP 26
14040: PPUSH
14041: LD_INT 21
14043: PUSH
14044: LD_INT 2
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: PPUSH
14051: CALL_OW 72
14055: PUSH
14056: FOR_IN
14057: IFFALSE 14088
// if GetFuel ( i ) < 3 then
14059: LD_VAR 0 1
14063: PPUSH
14064: CALL_OW 261
14068: PUSH
14069: LD_INT 3
14071: LESS
14072: IFFALSE 14086
// SetFuel ( i , 3 ) ;
14074: LD_VAR 0 1
14078: PPUSH
14079: LD_INT 3
14081: PPUSH
14082: CALL_OW 240
14086: GO 14056
14088: POP
14089: POP
// end ; end_of_file
14090: PPOPN 1
14092: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do
14093: LD_INT 22
14095: PUSH
14096: LD_INT 3
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: LD_INT 25
14105: PUSH
14106: LD_INT 2
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PPUSH
14117: CALL_OW 69
14121: IFFALSE 14140
14123: GO 14125
14125: DISABLE
// begin enable ;
14126: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
14127: LD_INT 3
14129: PPUSH
14130: LD_INT 1
14132: PPUSH
14133: LD_INT 22
14135: PPUSH
14136: CALL 8974 0 3
// end ;
14140: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
14141: LD_INT 22
14143: PUSH
14144: LD_INT 3
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PUSH
14151: LD_INT 25
14153: PUSH
14154: LD_INT 4
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: PPUSH
14165: CALL_OW 69
14169: IFFALSE 14191
14171: GO 14173
14173: DISABLE
// begin enable ;
14174: ENABLE
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
14175: LD_INT 3
14177: PPUSH
14178: LD_INT 20
14180: PPUSH
14181: LD_INT 22
14183: PPUSH
14184: LD_INT 23
14186: PPUSH
14187: CALL 9306 0 4
// end ;
14191: END
// every 0 0$1 trigger northBaseDefenders do
14192: LD_EXP 24
14196: IFFALSE 14220
14198: GO 14200
14200: DISABLE
// begin enable ;
14201: ENABLE
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
14202: LD_INT 22
14204: PPUSH
14205: LD_INT 1
14207: PPUSH
14208: LD_EXP 24
14212: PPUSH
14213: LD_INT 2
14215: PPUSH
14216: CALL 9578 0 4
// end ;
14220: END
// every 0 0$1 trigger southBaseDefenders do
14221: LD_EXP 25
14225: IFFALSE 14249
14227: GO 14229
14229: DISABLE
// begin enable ;
14230: ENABLE
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
14231: LD_INT 23
14233: PPUSH
14234: LD_INT 1
14236: PPUSH
14237: LD_EXP 25
14241: PPUSH
14242: LD_INT 33
14244: PPUSH
14245: CALL 9578 0 4
// end ; end_of_file
14249: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
14250: LD_VAR 0 1
14254: PUSH
14255: LD_EXP 1
14259: EQUAL
14260: IFFALSE 14269
// YouLost ( JMM ) ;
14262: LD_STRING JMM
14264: PPUSH
14265: CALL_OW 104
// if GetBType ( unit ) = b_depot then
14269: LD_VAR 0 1
14273: PPUSH
14274: CALL_OW 266
14278: PUSH
14279: LD_INT 0
14281: EQUAL
14282: IFFALSE 14291
// YouLost ( DepotDestroyed ) ;
14284: LD_STRING DepotDestroyed
14286: PPUSH
14287: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14291: LD_VAR 0 1
14295: PPUSH
14296: CALL_OW 255
14300: PUSH
14301: LD_INT 1
14303: EQUAL
14304: PUSH
14305: LD_VAR 0 1
14309: PPUSH
14310: CALL_OW 247
14314: PUSH
14315: LD_INT 1
14317: EQUAL
14318: AND
14319: IFFALSE 14335
// deadsCounter = deadsCounter + 1 ;
14321: LD_ADDR_EXP 31
14325: PUSH
14326: LD_EXP 31
14330: PUSH
14331: LD_INT 1
14333: PLUS
14334: ST_TO_ADDR
// end ;
14335: PPOPN 1
14337: END
// on Command ( cmd ) do var i , j , tmp ;
14338: LD_INT 0
14340: PPUSH
14341: PPUSH
14342: PPUSH
// begin SOS_Command ( cmd ) ;
14343: LD_VAR 0 1
14347: PPUSH
14348: CALL 30846 0 1
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
14352: LD_ADDR_VAR 0 2
14356: PUSH
14357: LD_INT 22
14359: PUSH
14360: LD_INT 1
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PUSH
14367: LD_INT 21
14369: PUSH
14370: LD_INT 2
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: PPUSH
14381: CALL_OW 69
14385: PUSH
14386: FOR_IN
14387: IFFALSE 14508
// begin if GetTaskList ( i ) then
14389: LD_VAR 0 2
14393: PPUSH
14394: CALL_OW 437
14398: IFFALSE 14506
// begin for j = 1 to GetTaskList ( i ) do
14400: LD_ADDR_VAR 0 3
14404: PUSH
14405: DOUBLE
14406: LD_INT 1
14408: DEC
14409: ST_TO_ADDR
14410: LD_VAR 0 2
14414: PPUSH
14415: CALL_OW 437
14419: PUSH
14420: FOR_TO
14421: IFFALSE 14504
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14423: LD_ADDR_VAR 0 4
14427: PUSH
14428: LD_VAR 0 2
14432: PPUSH
14433: CALL_OW 437
14437: PUSH
14438: LD_VAR 0 3
14442: ARRAY
14443: PUSH
14444: LD_INT 4
14446: ARRAY
14447: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14448: LD_VAR 0 4
14452: PPUSH
14453: CALL_OW 255
14457: PUSH
14458: LD_INT 3
14460: EQUAL
14461: PUSH
14462: LD_VAR 0 4
14466: PPUSH
14467: CALL_OW 247
14471: PUSH
14472: LD_INT 2
14474: EQUAL
14475: AND
14476: PUSH
14477: LD_VAR 0 4
14481: PPUSH
14482: CALL_OW 264
14486: PUSH
14487: LD_INT 51
14489: EQUAL
14490: AND
14491: IFFALSE 14502
// ComStop ( i ) ;
14493: LD_VAR 0 2
14497: PPUSH
14498: CALL_OW 141
// end ;
14502: GO 14420
14504: POP
14505: POP
// end ; end ;
14506: GO 14386
14508: POP
14509: POP
// end ;
14510: PPOPN 4
14512: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14513: LD_VAR 0 2
14517: PUSH
14518: LD_EXP 8
14522: EQUAL
14523: PUSH
14524: LD_EXP 21
14528: PUSH
14529: LD_INT 4
14531: NONEQUAL
14532: AND
14533: IFFALSE 14685
// begin if IsOk ( Mikhail ) then
14535: LD_EXP 8
14539: PPUSH
14540: CALL_OW 302
14544: IFFALSE 14552
// AskMikhail else
14546: CALL 7251 0 0
14550: GO 14685
// if IsOk ( llab1 ) then
14552: LD_INT 23
14554: PPUSH
14555: CALL_OW 302
14559: IFFALSE 14648
// begin InGameOn ;
14561: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14565: LD_EXP 8
14569: PPUSH
14570: LD_INT 6
14572: PPUSH
14573: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
14577: LD_INT 23
14579: PPUSH
14580: LD_INT 6
14582: PPUSH
14583: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
14587: LD_EXP 8
14591: PPUSH
14592: LD_INT 23
14594: PPUSH
14595: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14599: LD_INT 35
14601: PPUSH
14602: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
14606: LD_EXP 8
14610: PPUSH
14611: CALL_OW 310
14615: PUSH
14616: LD_INT 23
14618: EQUAL
14619: PUSH
14620: LD_EXP 8
14624: PPUSH
14625: CALL_OW 301
14629: OR
14630: IFFALSE 14599
// SetSide ( llab1 , 1 ) ;
14632: LD_INT 23
14634: PPUSH
14635: LD_INT 1
14637: PPUSH
14638: CALL_OW 235
// InGameOff ;
14642: CALL_OW 9
// end else
14646: GO 14685
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
14648: LD_INT 3
14650: PPUSH
14651: LD_INT 6
14653: PPUSH
14654: LD_INT 2
14656: PPUSH
14657: LD_INT 1
14659: PPUSH
14660: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
14664: LD_EXP 8
14668: PPUSH
14669: LD_INT 6
14671: PPUSH
14672: CALL_OW 235
// ComHold ( Mikhail ) ;
14676: LD_EXP 8
14680: PPUSH
14681: CALL_OW 140
// end ; end ; end ;
14685: PPOPN 2
14687: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
14688: LD_EXP 8
14692: PPUSH
14693: CALL_OW 257
14697: PUSH
14698: LD_INT 3
14700: NONEQUAL
14701: IFFALSE 14719
14703: GO 14705
14705: DISABLE
// begin enable ;
14706: ENABLE
// SetClass ( Mikhail , 3 ) ;
14707: LD_EXP 8
14711: PPUSH
14712: LD_INT 3
14714: PPUSH
14715: CALL_OW 336
// end ; end_of_file
14719: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
14720: LD_INT 22
14722: PUSH
14723: LD_INT 1
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: PUSH
14730: LD_INT 21
14732: PUSH
14733: LD_INT 1
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: PUSH
14740: LD_INT 25
14742: PUSH
14743: LD_INT 2
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: LIST
14754: PPUSH
14755: CALL_OW 69
14759: PUSH
14760: LD_INT 0
14762: EQUAL
14763: PUSH
14764: LD_INT 22
14766: PUSH
14767: LD_INT 4
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: LD_INT 21
14776: PUSH
14777: LD_INT 1
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PUSH
14784: LD_INT 25
14786: PUSH
14787: LD_INT 2
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: LIST
14798: PPUSH
14799: CALL_OW 69
14803: PUSH
14804: LD_INT 0
14806: EQUAL
14807: AND
14808: PUSH
14809: LD_INT 1
14811: PPUSH
14812: CALL_OW 255
14816: PUSH
14817: LD_INT 3
14819: EQUAL
14820: AND
14821: PUSH
14822: LD_INT 10
14824: PPUSH
14825: CALL_OW 255
14829: PUSH
14830: LD_INT 3
14832: EQUAL
14833: AND
14834: IFFALSE 14846
14836: GO 14838
14838: DISABLE
// YouLost ( Engineer ) ;
14839: LD_STRING Engineer
14841: PPUSH
14842: CALL_OW 104
14846: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14847: LD_INT 1
14849: PPUSH
14850: CALL_OW 255
14854: PUSH
14855: LD_INT 3
14857: EQUAL
14858: PUSH
14859: LD_EXP 27
14863: PUSH
14864: LD_INT 1
14866: EQUAL
14867: AND
14868: IFFALSE 14880
14870: GO 14872
14872: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14873: LD_STRING DepotCaptured
14875: PPUSH
14876: CALL_OW 104
14880: END
// export function PrepareTigers ; var i , un ; begin
14881: LD_INT 0
14883: PPUSH
14884: PPUSH
14885: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
14886: LD_ADDR_VAR 0 2
14890: PUSH
14891: DOUBLE
14892: LD_INT 1
14894: DEC
14895: ST_TO_ADDR
14896: LD_INT 2
14898: PUSH
14899: LD_INT 3
14901: PUSH
14902: LD_INT 4
14904: PUSH
14905: LD_INT 5
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: PUSH
14914: LD_OWVAR 67
14918: ARRAY
14919: PUSH
14920: FOR_TO
14921: IFFALSE 15036
// begin uc_side := 0 ;
14923: LD_ADDR_OWVAR 20
14927: PUSH
14928: LD_INT 0
14930: ST_TO_ADDR
// uc_nation := nation_nature ;
14931: LD_ADDR_OWVAR 21
14935: PUSH
14936: LD_INT 0
14938: ST_TO_ADDR
// hc_sex := sex_male ;
14939: LD_ADDR_OWVAR 27
14943: PUSH
14944: LD_INT 1
14946: ST_TO_ADDR
// hc_class := class_tiger ;
14947: LD_ADDR_OWVAR 28
14951: PUSH
14952: LD_INT 14
14954: ST_TO_ADDR
// hc_skills := [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14955: LD_ADDR_OWVAR 31
14959: PUSH
14960: LD_EXP 14
14964: PUSH
14965: LD_INT 0
14967: PUSH
14968: LD_INT 0
14970: PUSH
14971: LD_INT 0
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: ST_TO_ADDR
// hc_agressivity := [ 30 , 40 , 45 , 50 ] [ Difficulty ] ;
14980: LD_ADDR_OWVAR 35
14984: PUSH
14985: LD_INT 30
14987: PUSH
14988: LD_INT 40
14990: PUSH
14991: LD_INT 45
14993: PUSH
14994: LD_INT 50
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: PUSH
15003: LD_OWVAR 67
15007: ARRAY
15008: ST_TO_ADDR
// un = CreateHuman ;
15009: LD_ADDR_VAR 0 3
15013: PUSH
15014: CALL_OW 44
15018: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15019: LD_VAR 0 3
15023: PPUSH
15024: LD_INT 27
15026: PPUSH
15027: LD_INT 0
15029: PPUSH
15030: CALL_OW 49
// end ;
15034: GO 14920
15036: POP
15037: POP
// end ; end_of_file
15038: LD_VAR 0 1
15042: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
15043: LD_INT 1
15045: PPUSH
15046: CALL_OW 255
15050: PUSH
15051: LD_INT 1
15053: EQUAL
15054: PUSH
15055: LD_INT 10
15057: PPUSH
15058: CALL_OW 255
15062: PUSH
15063: LD_INT 1
15065: EQUAL
15066: AND
15067: PUSH
15068: LD_EXP 20
15072: PUSH
15073: LD_INT 1
15075: EQUAL
15076: AND
15077: PUSH
15078: LD_INT 22
15080: PUSH
15081: LD_INT 3
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: PUSH
15088: LD_INT 21
15090: PUSH
15091: LD_INT 2
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: PUSH
15098: LD_INT 34
15100: PUSH
15101: LD_INT 51
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: PUSH
15108: LD_INT 3
15110: PUSH
15111: LD_INT 58
15113: PUSH
15114: EMPTY
15115: LIST
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: PPUSH
15127: CALL_OW 69
15131: PUSH
15132: LD_INT 0
15134: EQUAL
15135: AND
15136: IFFALSE 15231
15138: GO 15140
15140: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ) ;
15141: LD_INT 9450
15143: PUSH
15144: LD_INT 8400
15146: PUSH
15147: LD_INT 6300
15149: PUSH
15150: LD_INT 6300
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: PUSH
15159: LD_OWVAR 67
15163: ARRAY
15164: PPUSH
15165: CALL_OW 67
// if cargoEscape = 1 then
15169: LD_EXP 20
15173: PUSH
15174: LD_INT 1
15176: EQUAL
15177: IFFALSE 15231
// begin SayRadio ( Powell , D6-Pow-1 ) ;
15179: LD_EXP 9
15183: PPUSH
15184: LD_STRING D6-Pow-1
15186: PPUSH
15187: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
15191: LD_EXP 1
15195: PPUSH
15196: LD_STRING D6-JMM-1
15198: PPUSH
15199: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
15203: LD_EXP 9
15207: PPUSH
15208: LD_STRING D6-Pow-2
15210: PPUSH
15211: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
15215: LD_EXP 1
15219: PPUSH
15220: LD_STRING D6-JMM-2
15222: PPUSH
15223: CALL_OW 88
// FinishMission ;
15227: CALL 15447 0 0
// end ; end ;
15231: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
15232: LD_INT 1
15234: PPUSH
15235: CALL_OW 255
15239: PUSH
15240: LD_INT 1
15242: EQUAL
15243: PUSH
15244: LD_INT 10
15246: PPUSH
15247: CALL_OW 255
15251: PUSH
15252: LD_INT 1
15254: EQUAL
15255: AND
15256: PUSH
15257: LD_EXP 20
15261: PUSH
15262: LD_INT 1
15264: GREATER
15265: AND
15266: IFFALSE 15341
15268: GO 15270
15270: DISABLE
15271: LD_INT 0
15273: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
15274: LD_INT 11550
15276: PUSH
15277: LD_INT 10500
15279: PUSH
15280: LD_INT 9450
15282: PUSH
15283: LD_INT 8400
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: PUSH
15292: LD_OWVAR 67
15296: ARRAY
15297: PPUSH
15298: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 , 4 ] [ Difficulty ] , RussianAttack ) ;
15302: LD_INT 1
15304: PUSH
15305: LD_INT 2
15307: PUSH
15308: LD_INT 3
15310: PUSH
15311: LD_INT 4
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: PUSH
15320: LD_OWVAR 67
15324: ARRAY
15325: PPUSH
15326: LD_INT 13
15328: PPUSH
15329: CALL 13038 0 2
// lastBattle = 1 ;
15333: LD_ADDR_EXP 27
15337: PUSH
15338: LD_INT 1
15340: ST_TO_ADDR
// end ;
15341: PPOPN 1
15343: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
15344: LD_EXP 27
15348: PUSH
15349: LD_INT 1
15351: EQUAL
15352: PUSH
15353: LD_INT 26
15355: PPUSH
15356: LD_INT 22
15358: PUSH
15359: LD_INT 3
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PUSH
15366: LD_INT 21
15368: PUSH
15369: LD_INT 1
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PPUSH
15380: CALL_OW 70
15384: PUSH
15385: LD_INT 0
15387: EQUAL
15388: AND
15389: IFFALSE 15446
15391: GO 15393
15393: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
15394: LD_EXP 9
15398: PPUSH
15399: LD_STRING D6-Pow-1
15401: PPUSH
15402: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
15406: LD_EXP 1
15410: PPUSH
15411: LD_STRING D6-JMM-1
15413: PPUSH
15414: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
15418: LD_EXP 9
15422: PPUSH
15423: LD_STRING D6-Pow-2
15425: PPUSH
15426: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
15430: LD_EXP 1
15434: PPUSH
15435: LD_STRING D6-JMM-2
15437: PPUSH
15438: CALL_OW 88
// FinishMission ;
15442: CALL 15447 0 0
// end ;
15446: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
15447: LD_INT 0
15449: PPUSH
15450: PPUSH
15451: PPUSH
15452: PPUSH
15453: PPUSH
// if tick <= 18 18$00 then
15454: LD_OWVAR 1
15458: PUSH
15459: LD_INT 37800
15461: LESSEQUAL
15462: IFFALSE 15471
// SetAchievement ( ACH_ASPEED_2 ) ;
15464: LD_STRING ACH_ASPEED_2
15466: PPUSH
15467: CALL_OW 543
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15471: LD_ADDR_VAR 0 2
15475: PUSH
15476: LD_INT 22
15478: PUSH
15479: LD_INT 1
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: PUSH
15486: LD_INT 21
15488: PUSH
15489: LD_INT 2
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: LD_INT 24
15498: PUSH
15499: LD_INT 251
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: LIST
15510: PPUSH
15511: CALL_OW 69
15515: ST_TO_ADDR
// if tmp then
15516: LD_VAR 0 2
15520: IFFALSE 15534
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15522: LD_VAR 0 2
15526: PPUSH
15527: LD_STRING 02_tanks_1
15529: PPUSH
15530: CALL 10453 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
15534: LD_EXP 21
15538: PUSH
15539: LD_INT 1
15541: EQUAL
15542: PUSH
15543: LD_EXP 8
15547: PPUSH
15548: CALL_OW 300
15552: AND
15553: IFFALSE 15567
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15555: LD_EXP 21
15559: PPUSH
15560: LD_STRING 02_mikhailStatus_1
15562: PPUSH
15563: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15567: LD_INT 1
15569: PPUSH
15570: CALL_OW 274
15574: PPUSH
15575: LD_INT 1
15577: PPUSH
15578: CALL_OW 275
15582: PPUSH
15583: LD_STRING 02_resources_4
15585: PPUSH
15586: CALL_OW 39
// m1 := false ;
15590: LD_ADDR_VAR 0 3
15594: PUSH
15595: LD_INT 0
15597: ST_TO_ADDR
// m2 := false ;
15598: LD_ADDR_VAR 0 4
15602: PUSH
15603: LD_INT 0
15605: ST_TO_ADDR
// m3 := false ;
15606: LD_ADDR_VAR 0 5
15610: PUSH
15611: LD_INT 0
15613: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15614: LD_INT 1
15616: PPUSH
15617: CALL_OW 274
15621: PPUSH
15622: LD_INT 1
15624: PPUSH
15625: CALL_OW 275
15629: PUSH
15630: LD_INT 200
15632: GREATEREQUAL
15633: IFFALSE 15655
// begin AddMedal ( Cans , 1 ) ;
15635: LD_STRING Cans
15637: PPUSH
15638: LD_INT 1
15640: PPUSH
15641: CALL_OW 101
// m1 := true ;
15645: LD_ADDR_VAR 0 3
15649: PUSH
15650: LD_INT 1
15652: ST_TO_ADDR
// end else
15653: GO 15666
// begin AddMedal ( Cans , - 1 ) ;
15655: LD_STRING Cans
15657: PPUSH
15658: LD_INT 1
15660: NEG
15661: PPUSH
15662: CALL_OW 101
// end ; if deadsCounter < 2 then
15666: LD_EXP 31
15670: PUSH
15671: LD_INT 2
15673: LESS
15674: IFFALSE 15696
// begin AddMedal ( Deaths , 1 ) ;
15676: LD_STRING Deaths
15678: PPUSH
15679: LD_INT 1
15681: PPUSH
15682: CALL_OW 101
// m2 := true ;
15686: LD_ADDR_VAR 0 4
15690: PUSH
15691: LD_INT 1
15693: ST_TO_ADDR
// end else
15694: GO 15707
// begin AddMedal ( Deaths , - 1 ) ;
15696: LD_STRING Deaths
15698: PPUSH
15699: LD_INT 1
15701: NEG
15702: PPUSH
15703: CALL_OW 101
// end ; if mikhailStatus = 0 then
15707: LD_EXP 21
15711: PUSH
15712: LD_INT 0
15714: EQUAL
15715: IFFALSE 15728
// AddMedal ( Prisoner , - 1 ) ;
15717: LD_STRING Prisoner
15719: PPUSH
15720: LD_INT 1
15722: NEG
15723: PPUSH
15724: CALL_OW 101
// if mikhailStatus = 1 then
15728: LD_EXP 21
15732: PUSH
15733: LD_INT 1
15735: EQUAL
15736: IFFALSE 15756
// begin AddMedal ( Prisoner , 1 ) ;
15738: LD_STRING Prisoner
15740: PPUSH
15741: LD_INT 1
15743: PPUSH
15744: CALL_OW 101
// m3 := true ;
15748: LD_ADDR_VAR 0 5
15752: PUSH
15753: LD_INT 1
15755: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
15756: LD_EXP 21
15760: PUSH
15761: LD_INT 2
15763: EQUAL
15764: IFFALSE 15784
// begin AddMedal ( Prisoner , 2 ) ;
15766: LD_STRING Prisoner
15768: PPUSH
15769: LD_INT 2
15771: PPUSH
15772: CALL_OW 101
// m3 := true ;
15776: LD_ADDR_VAR 0 5
15780: PUSH
15781: LD_INT 1
15783: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
15784: LD_EXP 21
15788: PUSH
15789: LD_INT 3
15791: EQUAL
15792: IFFALSE 15805
// AddMedal ( Prisoner , - 2 ) ;
15794: LD_STRING Prisoner
15796: PPUSH
15797: LD_INT 2
15799: NEG
15800: PPUSH
15801: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
15805: LD_OWVAR 67
15809: PUSH
15810: LD_INT 3
15812: GREATEREQUAL
15813: PUSH
15814: LD_VAR 0 3
15818: AND
15819: PUSH
15820: LD_VAR 0 4
15824: AND
15825: PUSH
15826: LD_VAR 0 5
15830: AND
15831: IFFALSE 15843
// SetAchievementEX ( ACH_AMER , 2 ) ;
15833: LD_STRING ACH_AMER
15835: PPUSH
15836: LD_INT 2
15838: PPUSH
15839: CALL_OW 564
// GiveMedals ( MAIN ) ;
15843: LD_STRING MAIN
15845: PPUSH
15846: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
15850: LD_INT 22
15852: PUSH
15853: LD_INT 1
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: LD_INT 23
15862: PUSH
15863: LD_INT 1
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PUSH
15870: LD_INT 21
15872: PUSH
15873: LD_INT 1
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: LIST
15884: PPUSH
15885: CALL_OW 69
15889: PPUSH
15890: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15894: LD_EXP 1
15898: PPUSH
15899: LD_EXP 33
15903: PUSH
15904: LD_STRING JMM
15906: STR
15907: PPUSH
15908: CALL_OW 38
// if IsOK ( Bobby ) then
15912: LD_EXP 2
15916: PPUSH
15917: CALL_OW 302
15921: IFFALSE 15941
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15923: LD_EXP 2
15927: PPUSH
15928: LD_EXP 33
15932: PUSH
15933: LD_STRING Bobby
15935: STR
15936: PPUSH
15937: CALL_OW 38
// if IsOK ( Cyrus ) then
15941: LD_EXP 3
15945: PPUSH
15946: CALL_OW 302
15950: IFFALSE 15970
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15952: LD_EXP 3
15956: PPUSH
15957: LD_EXP 33
15961: PUSH
15962: LD_STRING Cyrus
15964: STR
15965: PPUSH
15966: CALL_OW 38
// if IsOK ( Lisa ) then
15970: LD_EXP 4
15974: PPUSH
15975: CALL_OW 302
15979: IFFALSE 15999
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15981: LD_EXP 4
15985: PPUSH
15986: LD_EXP 33
15990: PUSH
15991: LD_STRING Lisa
15993: STR
15994: PPUSH
15995: CALL_OW 38
// if IsOK ( Khatam ) then
15999: LD_EXP 5
16003: PPUSH
16004: CALL_OW 302
16008: IFFALSE 16028
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
16010: LD_EXP 5
16014: PPUSH
16015: LD_EXP 33
16019: PUSH
16020: LD_STRING Khatam
16022: STR
16023: PPUSH
16024: CALL_OW 38
// if IsOK ( Brian ) then
16028: LD_EXP 6
16032: PPUSH
16033: CALL_OW 302
16037: IFFALSE 16057
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
16039: LD_EXP 6
16043: PPUSH
16044: LD_EXP 33
16048: PUSH
16049: LD_STRING Brian
16051: STR
16052: PPUSH
16053: CALL_OW 38
// if IsOk ( Jerry ) then
16057: LD_EXP 7
16061: PPUSH
16062: CALL_OW 302
16066: IFFALSE 16086
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
16068: LD_EXP 7
16072: PPUSH
16073: LD_EXP 33
16077: PUSH
16078: LD_STRING Jerry
16080: STR
16081: PPUSH
16082: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
16086: LD_EXP 21
16090: PUSH
16091: LD_INT 1
16093: EQUAL
16094: PUSH
16095: LD_EXP 8
16099: PPUSH
16100: CALL_OW 255
16104: PUSH
16105: LD_INT 1
16107: EQUAL
16108: AND
16109: PUSH
16110: LD_EXP 8
16114: PPUSH
16115: CALL_OW 302
16119: AND
16120: IFFALSE 16140
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
16122: LD_EXP 8
16126: PPUSH
16127: LD_EXP 33
16131: PUSH
16132: LD_STRING Mikhail
16134: STR
16135: PPUSH
16136: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
16140: LD_INT 50
16142: PUSH
16143: EMPTY
16144: LIST
16145: PUSH
16146: LD_INT 22
16148: PUSH
16149: LD_INT 1
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 21
16158: PUSH
16159: LD_INT 1
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: LIST
16170: PPUSH
16171: CALL_OW 69
16175: PUSH
16176: LD_EXP 1
16180: PUSH
16181: LD_EXP 2
16185: PUSH
16186: LD_EXP 3
16190: PUSH
16191: LD_EXP 4
16195: PUSH
16196: LD_EXP 5
16200: PUSH
16201: LD_EXP 6
16205: PUSH
16206: LD_EXP 7
16210: PUSH
16211: LD_EXP 8
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: DIFF
16226: PPUSH
16227: LD_STRING 02_other_survivors
16229: PPUSH
16230: CALL_OW 38
// YouWin ;
16234: CALL_OW 103
// end ; end_of_file
16238: LD_VAR 0 1
16242: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
16243: LD_INT 0
16245: PPUSH
// ar_miner := 81 ;
16246: LD_ADDR_EXP 43
16250: PUSH
16251: LD_INT 81
16253: ST_TO_ADDR
// ar_crane := 88 ;
16254: LD_ADDR_EXP 42
16258: PUSH
16259: LD_INT 88
16261: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
16262: LD_ADDR_EXP 37
16266: PUSH
16267: LD_INT 89
16269: ST_TO_ADDR
// us_hack := 99 ;
16270: LD_ADDR_EXP 38
16274: PUSH
16275: LD_INT 99
16277: ST_TO_ADDR
// us_artillery := 97 ;
16278: LD_ADDR_EXP 39
16282: PUSH
16283: LD_INT 97
16285: ST_TO_ADDR
// ar_bio_bomb := 91 ;
16286: LD_ADDR_EXP 40
16290: PUSH
16291: LD_INT 91
16293: ST_TO_ADDR
// ar_mortar := 92 ;
16294: LD_ADDR_EXP 41
16298: PUSH
16299: LD_INT 92
16301: ST_TO_ADDR
// ru_radar := 98 ;
16302: LD_ADDR_EXP 36
16306: PUSH
16307: LD_INT 98
16309: ST_TO_ADDR
// tech_Artillery := 80 ;
16310: LD_ADDR_EXP 44
16314: PUSH
16315: LD_INT 80
16317: ST_TO_ADDR
// tech_RadMat := 81 ;
16318: LD_ADDR_EXP 45
16322: PUSH
16323: LD_INT 81
16325: ST_TO_ADDR
// tech_BasicTools := 82 ;
16326: LD_ADDR_EXP 46
16330: PUSH
16331: LD_INT 82
16333: ST_TO_ADDR
// tech_Cargo := 83 ;
16334: LD_ADDR_EXP 47
16338: PUSH
16339: LD_INT 83
16341: ST_TO_ADDR
// tech_Track := 84 ;
16342: LD_ADDR_EXP 48
16346: PUSH
16347: LD_INT 84
16349: ST_TO_ADDR
// tech_Crane := 85 ;
16350: LD_ADDR_EXP 49
16354: PUSH
16355: LD_INT 85
16357: ST_TO_ADDR
// tech_Bulldozer := 86 ;
16358: LD_ADDR_EXP 50
16362: PUSH
16363: LD_INT 86
16365: ST_TO_ADDR
// tech_Hovercraft := 87 ;
16366: LD_ADDR_EXP 51
16370: PUSH
16371: LD_INT 87
16373: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
16374: LD_ADDR_EXP 52
16378: PUSH
16379: LD_INT 88
16381: ST_TO_ADDR
// class_mastodont := 31 ;
16382: LD_ADDR_EXP 53
16386: PUSH
16387: LD_INT 31
16389: ST_TO_ADDR
// class_horse := 21 ;
16390: LD_ADDR_EXP 54
16394: PUSH
16395: LD_INT 21
16397: ST_TO_ADDR
// end ;
16398: LD_VAR 0 1
16402: RET
// every 1 do
16403: GO 16405
16405: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
16406: CALL 16243 0 0
16410: END
// every 0 0$1 do
16411: GO 16413
16413: DISABLE
// begin enable ;
16414: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
16415: LD_STRING updateTimer(
16417: PUSH
16418: LD_OWVAR 1
16422: STR
16423: PUSH
16424: LD_STRING );
16426: STR
16427: PPUSH
16428: CALL_OW 559
// end ;
16432: END
// on MapStart ( p ) do begin if streamModeActive then
16433: LD_EXP 55
16437: IFFALSE 16446
// DefineStreamItems ( true ) ;
16439: LD_INT 1
16441: PPUSH
16442: CALL 18094 0 1
// UpdateFactoryWaypoints ( ) ;
16446: CALL 31678 0 0
// end ;
16450: PPOPN 1
16452: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16453: LD_INT 0
16455: PPUSH
// if p2 = 100 then
16456: LD_VAR 0 2
16460: PUSH
16461: LD_INT 100
16463: EQUAL
16464: IFFALSE 17467
// begin if not StreamModeActive then
16466: LD_EXP 55
16470: NOT
16471: IFFALSE 16481
// StreamModeActive := true ;
16473: LD_ADDR_EXP 55
16477: PUSH
16478: LD_INT 1
16480: ST_TO_ADDR
// if p3 = 0 then
16481: LD_VAR 0 3
16485: PUSH
16486: LD_INT 0
16488: EQUAL
16489: IFFALSE 16495
// InitStreamMode ;
16491: CALL 17630 0 0
// if p3 = 1 then
16495: LD_VAR 0 3
16499: PUSH
16500: LD_INT 1
16502: EQUAL
16503: IFFALSE 16513
// sRocket := true ;
16505: LD_ADDR_EXP 60
16509: PUSH
16510: LD_INT 1
16512: ST_TO_ADDR
// if p3 = 2 then
16513: LD_VAR 0 3
16517: PUSH
16518: LD_INT 2
16520: EQUAL
16521: IFFALSE 16531
// sSpeed := true ;
16523: LD_ADDR_EXP 59
16527: PUSH
16528: LD_INT 1
16530: ST_TO_ADDR
// if p3 = 3 then
16531: LD_VAR 0 3
16535: PUSH
16536: LD_INT 3
16538: EQUAL
16539: IFFALSE 16549
// sEngine := true ;
16541: LD_ADDR_EXP 61
16545: PUSH
16546: LD_INT 1
16548: ST_TO_ADDR
// if p3 = 4 then
16549: LD_VAR 0 3
16553: PUSH
16554: LD_INT 4
16556: EQUAL
16557: IFFALSE 16567
// sSpec := true ;
16559: LD_ADDR_EXP 58
16563: PUSH
16564: LD_INT 1
16566: ST_TO_ADDR
// if p3 = 5 then
16567: LD_VAR 0 3
16571: PUSH
16572: LD_INT 5
16574: EQUAL
16575: IFFALSE 16585
// sLevel := true ;
16577: LD_ADDR_EXP 62
16581: PUSH
16582: LD_INT 1
16584: ST_TO_ADDR
// if p3 = 6 then
16585: LD_VAR 0 3
16589: PUSH
16590: LD_INT 6
16592: EQUAL
16593: IFFALSE 16603
// sArmoury := true ;
16595: LD_ADDR_EXP 63
16599: PUSH
16600: LD_INT 1
16602: ST_TO_ADDR
// if p3 = 7 then
16603: LD_VAR 0 3
16607: PUSH
16608: LD_INT 7
16610: EQUAL
16611: IFFALSE 16621
// sRadar := true ;
16613: LD_ADDR_EXP 64
16617: PUSH
16618: LD_INT 1
16620: ST_TO_ADDR
// if p3 = 8 then
16621: LD_VAR 0 3
16625: PUSH
16626: LD_INT 8
16628: EQUAL
16629: IFFALSE 16639
// sBunker := true ;
16631: LD_ADDR_EXP 65
16635: PUSH
16636: LD_INT 1
16638: ST_TO_ADDR
// if p3 = 9 then
16639: LD_VAR 0 3
16643: PUSH
16644: LD_INT 9
16646: EQUAL
16647: IFFALSE 16657
// sHack := true ;
16649: LD_ADDR_EXP 66
16653: PUSH
16654: LD_INT 1
16656: ST_TO_ADDR
// if p3 = 10 then
16657: LD_VAR 0 3
16661: PUSH
16662: LD_INT 10
16664: EQUAL
16665: IFFALSE 16675
// sFire := true ;
16667: LD_ADDR_EXP 67
16671: PUSH
16672: LD_INT 1
16674: ST_TO_ADDR
// if p3 = 11 then
16675: LD_VAR 0 3
16679: PUSH
16680: LD_INT 11
16682: EQUAL
16683: IFFALSE 16693
// sRefresh := true ;
16685: LD_ADDR_EXP 68
16689: PUSH
16690: LD_INT 1
16692: ST_TO_ADDR
// if p3 = 12 then
16693: LD_VAR 0 3
16697: PUSH
16698: LD_INT 12
16700: EQUAL
16701: IFFALSE 16711
// sExp := true ;
16703: LD_ADDR_EXP 69
16707: PUSH
16708: LD_INT 1
16710: ST_TO_ADDR
// if p3 = 13 then
16711: LD_VAR 0 3
16715: PUSH
16716: LD_INT 13
16718: EQUAL
16719: IFFALSE 16729
// sDepot := true ;
16721: LD_ADDR_EXP 70
16725: PUSH
16726: LD_INT 1
16728: ST_TO_ADDR
// if p3 = 14 then
16729: LD_VAR 0 3
16733: PUSH
16734: LD_INT 14
16736: EQUAL
16737: IFFALSE 16747
// sFlag := true ;
16739: LD_ADDR_EXP 71
16743: PUSH
16744: LD_INT 1
16746: ST_TO_ADDR
// if p3 = 15 then
16747: LD_VAR 0 3
16751: PUSH
16752: LD_INT 15
16754: EQUAL
16755: IFFALSE 16765
// sKamikadze := true ;
16757: LD_ADDR_EXP 79
16761: PUSH
16762: LD_INT 1
16764: ST_TO_ADDR
// if p3 = 16 then
16765: LD_VAR 0 3
16769: PUSH
16770: LD_INT 16
16772: EQUAL
16773: IFFALSE 16783
// sTroll := true ;
16775: LD_ADDR_EXP 80
16779: PUSH
16780: LD_INT 1
16782: ST_TO_ADDR
// if p3 = 17 then
16783: LD_VAR 0 3
16787: PUSH
16788: LD_INT 17
16790: EQUAL
16791: IFFALSE 16801
// sSlow := true ;
16793: LD_ADDR_EXP 81
16797: PUSH
16798: LD_INT 1
16800: ST_TO_ADDR
// if p3 = 18 then
16801: LD_VAR 0 3
16805: PUSH
16806: LD_INT 18
16808: EQUAL
16809: IFFALSE 16819
// sLack := true ;
16811: LD_ADDR_EXP 82
16815: PUSH
16816: LD_INT 1
16818: ST_TO_ADDR
// if p3 = 19 then
16819: LD_VAR 0 3
16823: PUSH
16824: LD_INT 19
16826: EQUAL
16827: IFFALSE 16837
// sTank := true ;
16829: LD_ADDR_EXP 84
16833: PUSH
16834: LD_INT 1
16836: ST_TO_ADDR
// if p3 = 20 then
16837: LD_VAR 0 3
16841: PUSH
16842: LD_INT 20
16844: EQUAL
16845: IFFALSE 16855
// sRemote := true ;
16847: LD_ADDR_EXP 85
16851: PUSH
16852: LD_INT 1
16854: ST_TO_ADDR
// if p3 = 21 then
16855: LD_VAR 0 3
16859: PUSH
16860: LD_INT 21
16862: EQUAL
16863: IFFALSE 16873
// sPowell := true ;
16865: LD_ADDR_EXP 86
16869: PUSH
16870: LD_INT 1
16872: ST_TO_ADDR
// if p3 = 22 then
16873: LD_VAR 0 3
16877: PUSH
16878: LD_INT 22
16880: EQUAL
16881: IFFALSE 16891
// sTeleport := true ;
16883: LD_ADDR_EXP 89
16887: PUSH
16888: LD_INT 1
16890: ST_TO_ADDR
// if p3 = 23 then
16891: LD_VAR 0 3
16895: PUSH
16896: LD_INT 23
16898: EQUAL
16899: IFFALSE 16909
// sOilTower := true ;
16901: LD_ADDR_EXP 91
16905: PUSH
16906: LD_INT 1
16908: ST_TO_ADDR
// if p3 = 24 then
16909: LD_VAR 0 3
16913: PUSH
16914: LD_INT 24
16916: EQUAL
16917: IFFALSE 16927
// sShovel := true ;
16919: LD_ADDR_EXP 92
16923: PUSH
16924: LD_INT 1
16926: ST_TO_ADDR
// if p3 = 25 then
16927: LD_VAR 0 3
16931: PUSH
16932: LD_INT 25
16934: EQUAL
16935: IFFALSE 16945
// sSheik := true ;
16937: LD_ADDR_EXP 93
16941: PUSH
16942: LD_INT 1
16944: ST_TO_ADDR
// if p3 = 26 then
16945: LD_VAR 0 3
16949: PUSH
16950: LD_INT 26
16952: EQUAL
16953: IFFALSE 16963
// sEarthquake := true ;
16955: LD_ADDR_EXP 95
16959: PUSH
16960: LD_INT 1
16962: ST_TO_ADDR
// if p3 = 27 then
16963: LD_VAR 0 3
16967: PUSH
16968: LD_INT 27
16970: EQUAL
16971: IFFALSE 16981
// sAI := true ;
16973: LD_ADDR_EXP 96
16977: PUSH
16978: LD_INT 1
16980: ST_TO_ADDR
// if p3 = 28 then
16981: LD_VAR 0 3
16985: PUSH
16986: LD_INT 28
16988: EQUAL
16989: IFFALSE 16999
// sCargo := true ;
16991: LD_ADDR_EXP 99
16995: PUSH
16996: LD_INT 1
16998: ST_TO_ADDR
// if p3 = 29 then
16999: LD_VAR 0 3
17003: PUSH
17004: LD_INT 29
17006: EQUAL
17007: IFFALSE 17017
// sDLaser := true ;
17009: LD_ADDR_EXP 100
17013: PUSH
17014: LD_INT 1
17016: ST_TO_ADDR
// if p3 = 30 then
17017: LD_VAR 0 3
17021: PUSH
17022: LD_INT 30
17024: EQUAL
17025: IFFALSE 17035
// sExchange := true ;
17027: LD_ADDR_EXP 101
17031: PUSH
17032: LD_INT 1
17034: ST_TO_ADDR
// if p3 = 31 then
17035: LD_VAR 0 3
17039: PUSH
17040: LD_INT 31
17042: EQUAL
17043: IFFALSE 17053
// sFac := true ;
17045: LD_ADDR_EXP 102
17049: PUSH
17050: LD_INT 1
17052: ST_TO_ADDR
// if p3 = 32 then
17053: LD_VAR 0 3
17057: PUSH
17058: LD_INT 32
17060: EQUAL
17061: IFFALSE 17071
// sPower := true ;
17063: LD_ADDR_EXP 103
17067: PUSH
17068: LD_INT 1
17070: ST_TO_ADDR
// if p3 = 33 then
17071: LD_VAR 0 3
17075: PUSH
17076: LD_INT 33
17078: EQUAL
17079: IFFALSE 17089
// sRandom := true ;
17081: LD_ADDR_EXP 104
17085: PUSH
17086: LD_INT 1
17088: ST_TO_ADDR
// if p3 = 34 then
17089: LD_VAR 0 3
17093: PUSH
17094: LD_INT 34
17096: EQUAL
17097: IFFALSE 17107
// sShield := true ;
17099: LD_ADDR_EXP 105
17103: PUSH
17104: LD_INT 1
17106: ST_TO_ADDR
// if p3 = 35 then
17107: LD_VAR 0 3
17111: PUSH
17112: LD_INT 35
17114: EQUAL
17115: IFFALSE 17125
// sTime := true ;
17117: LD_ADDR_EXP 106
17121: PUSH
17122: LD_INT 1
17124: ST_TO_ADDR
// if p3 = 36 then
17125: LD_VAR 0 3
17129: PUSH
17130: LD_INT 36
17132: EQUAL
17133: IFFALSE 17143
// sTools := true ;
17135: LD_ADDR_EXP 107
17139: PUSH
17140: LD_INT 1
17142: ST_TO_ADDR
// if p3 = 101 then
17143: LD_VAR 0 3
17147: PUSH
17148: LD_INT 101
17150: EQUAL
17151: IFFALSE 17161
// sSold := true ;
17153: LD_ADDR_EXP 72
17157: PUSH
17158: LD_INT 1
17160: ST_TO_ADDR
// if p3 = 102 then
17161: LD_VAR 0 3
17165: PUSH
17166: LD_INT 102
17168: EQUAL
17169: IFFALSE 17179
// sDiff := true ;
17171: LD_ADDR_EXP 73
17175: PUSH
17176: LD_INT 1
17178: ST_TO_ADDR
// if p3 = 103 then
17179: LD_VAR 0 3
17183: PUSH
17184: LD_INT 103
17186: EQUAL
17187: IFFALSE 17197
// sFog := true ;
17189: LD_ADDR_EXP 76
17193: PUSH
17194: LD_INT 1
17196: ST_TO_ADDR
// if p3 = 104 then
17197: LD_VAR 0 3
17201: PUSH
17202: LD_INT 104
17204: EQUAL
17205: IFFALSE 17215
// sReset := true ;
17207: LD_ADDR_EXP 77
17211: PUSH
17212: LD_INT 1
17214: ST_TO_ADDR
// if p3 = 105 then
17215: LD_VAR 0 3
17219: PUSH
17220: LD_INT 105
17222: EQUAL
17223: IFFALSE 17233
// sSun := true ;
17225: LD_ADDR_EXP 78
17229: PUSH
17230: LD_INT 1
17232: ST_TO_ADDR
// if p3 = 106 then
17233: LD_VAR 0 3
17237: PUSH
17238: LD_INT 106
17240: EQUAL
17241: IFFALSE 17251
// sTiger := true ;
17243: LD_ADDR_EXP 74
17247: PUSH
17248: LD_INT 1
17250: ST_TO_ADDR
// if p3 = 107 then
17251: LD_VAR 0 3
17255: PUSH
17256: LD_INT 107
17258: EQUAL
17259: IFFALSE 17269
// sBomb := true ;
17261: LD_ADDR_EXP 75
17265: PUSH
17266: LD_INT 1
17268: ST_TO_ADDR
// if p3 = 108 then
17269: LD_VAR 0 3
17273: PUSH
17274: LD_INT 108
17276: EQUAL
17277: IFFALSE 17287
// sWound := true ;
17279: LD_ADDR_EXP 83
17283: PUSH
17284: LD_INT 1
17286: ST_TO_ADDR
// if p3 = 109 then
17287: LD_VAR 0 3
17291: PUSH
17292: LD_INT 109
17294: EQUAL
17295: IFFALSE 17305
// sBetray := true ;
17297: LD_ADDR_EXP 87
17301: PUSH
17302: LD_INT 1
17304: ST_TO_ADDR
// if p3 = 110 then
17305: LD_VAR 0 3
17309: PUSH
17310: LD_INT 110
17312: EQUAL
17313: IFFALSE 17323
// sContamin := true ;
17315: LD_ADDR_EXP 88
17319: PUSH
17320: LD_INT 1
17322: ST_TO_ADDR
// if p3 = 111 then
17323: LD_VAR 0 3
17327: PUSH
17328: LD_INT 111
17330: EQUAL
17331: IFFALSE 17341
// sOil := true ;
17333: LD_ADDR_EXP 90
17337: PUSH
17338: LD_INT 1
17340: ST_TO_ADDR
// if p3 = 112 then
17341: LD_VAR 0 3
17345: PUSH
17346: LD_INT 112
17348: EQUAL
17349: IFFALSE 17359
// sStu := true ;
17351: LD_ADDR_EXP 94
17355: PUSH
17356: LD_INT 1
17358: ST_TO_ADDR
// if p3 = 113 then
17359: LD_VAR 0 3
17363: PUSH
17364: LD_INT 113
17366: EQUAL
17367: IFFALSE 17377
// sBazooka := true ;
17369: LD_ADDR_EXP 97
17373: PUSH
17374: LD_INT 1
17376: ST_TO_ADDR
// if p3 = 114 then
17377: LD_VAR 0 3
17381: PUSH
17382: LD_INT 114
17384: EQUAL
17385: IFFALSE 17395
// sMortar := true ;
17387: LD_ADDR_EXP 98
17391: PUSH
17392: LD_INT 1
17394: ST_TO_ADDR
// if p3 = 115 then
17395: LD_VAR 0 3
17399: PUSH
17400: LD_INT 115
17402: EQUAL
17403: IFFALSE 17413
// sRanger := true ;
17405: LD_ADDR_EXP 108
17409: PUSH
17410: LD_INT 1
17412: ST_TO_ADDR
// if p3 = 116 then
17413: LD_VAR 0 3
17417: PUSH
17418: LD_INT 116
17420: EQUAL
17421: IFFALSE 17431
// sComputer := true ;
17423: LD_ADDR_EXP 109
17427: PUSH
17428: LD_INT 1
17430: ST_TO_ADDR
// if p3 = 117 then
17431: LD_VAR 0 3
17435: PUSH
17436: LD_INT 117
17438: EQUAL
17439: IFFALSE 17449
// s30 := true ;
17441: LD_ADDR_EXP 110
17445: PUSH
17446: LD_INT 1
17448: ST_TO_ADDR
// if p3 = 118 then
17449: LD_VAR 0 3
17453: PUSH
17454: LD_INT 118
17456: EQUAL
17457: IFFALSE 17467
// s60 := true ;
17459: LD_ADDR_EXP 111
17463: PUSH
17464: LD_INT 1
17466: ST_TO_ADDR
// end ; if p2 = 101 then
17467: LD_VAR 0 2
17471: PUSH
17472: LD_INT 101
17474: EQUAL
17475: IFFALSE 17603
// begin case p3 of 1 :
17477: LD_VAR 0 3
17481: PUSH
17482: LD_INT 1
17484: DOUBLE
17485: EQUAL
17486: IFTRUE 17490
17488: GO 17497
17490: POP
// hHackUnlimitedResources ; 2 :
17491: CALL 29701 0 0
17495: GO 17603
17497: LD_INT 2
17499: DOUBLE
17500: EQUAL
17501: IFTRUE 17505
17503: GO 17512
17505: POP
// hHackSetLevel10 ; 3 :
17506: CALL 29834 0 0
17510: GO 17603
17512: LD_INT 3
17514: DOUBLE
17515: EQUAL
17516: IFTRUE 17520
17518: GO 17527
17520: POP
// hHackSetLevel10YourUnits ; 4 :
17521: CALL 29919 0 0
17525: GO 17603
17527: LD_INT 4
17529: DOUBLE
17530: EQUAL
17531: IFTRUE 17535
17533: GO 17542
17535: POP
// hHackInvincible ; 5 :
17536: CALL 30367 0 0
17540: GO 17603
17542: LD_INT 5
17544: DOUBLE
17545: EQUAL
17546: IFTRUE 17550
17548: GO 17557
17550: POP
// hHackInvisible ; 6 :
17551: CALL 30478 0 0
17555: GO 17603
17557: LD_INT 6
17559: DOUBLE
17560: EQUAL
17561: IFTRUE 17565
17563: GO 17572
17565: POP
// hHackChangeYourSide ; 7 :
17566: CALL 30535 0 0
17570: GO 17603
17572: LD_INT 7
17574: DOUBLE
17575: EQUAL
17576: IFTRUE 17580
17578: GO 17587
17580: POP
// hHackChangeUnitSide ; 8 :
17581: CALL 30577 0 0
17585: GO 17603
17587: LD_INT 8
17589: DOUBLE
17590: EQUAL
17591: IFTRUE 17595
17593: GO 17602
17595: POP
// hHackFog ; end ;
17596: CALL 30678 0 0
17600: GO 17603
17602: POP
// end ; end ;
17603: LD_VAR 0 7
17607: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
17608: GO 17610
17610: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
17611: LD_STRING initStreamRollete();
17613: PPUSH
17614: CALL_OW 559
// InitStreamMode ;
17618: CALL 17630 0 0
// DefineStreamItems ( false ) ;
17622: LD_INT 0
17624: PPUSH
17625: CALL 18094 0 1
// end ;
17629: END
// function InitStreamMode ; begin
17630: LD_INT 0
17632: PPUSH
// streamModeActive := false ;
17633: LD_ADDR_EXP 55
17637: PUSH
17638: LD_INT 0
17640: ST_TO_ADDR
// normalCounter := 36 ;
17641: LD_ADDR_EXP 56
17645: PUSH
17646: LD_INT 36
17648: ST_TO_ADDR
// hardcoreCounter := 18 ;
17649: LD_ADDR_EXP 57
17653: PUSH
17654: LD_INT 18
17656: ST_TO_ADDR
// sRocket := false ;
17657: LD_ADDR_EXP 60
17661: PUSH
17662: LD_INT 0
17664: ST_TO_ADDR
// sSpeed := false ;
17665: LD_ADDR_EXP 59
17669: PUSH
17670: LD_INT 0
17672: ST_TO_ADDR
// sEngine := false ;
17673: LD_ADDR_EXP 61
17677: PUSH
17678: LD_INT 0
17680: ST_TO_ADDR
// sSpec := false ;
17681: LD_ADDR_EXP 58
17685: PUSH
17686: LD_INT 0
17688: ST_TO_ADDR
// sLevel := false ;
17689: LD_ADDR_EXP 62
17693: PUSH
17694: LD_INT 0
17696: ST_TO_ADDR
// sArmoury := false ;
17697: LD_ADDR_EXP 63
17701: PUSH
17702: LD_INT 0
17704: ST_TO_ADDR
// sRadar := false ;
17705: LD_ADDR_EXP 64
17709: PUSH
17710: LD_INT 0
17712: ST_TO_ADDR
// sBunker := false ;
17713: LD_ADDR_EXP 65
17717: PUSH
17718: LD_INT 0
17720: ST_TO_ADDR
// sHack := false ;
17721: LD_ADDR_EXP 66
17725: PUSH
17726: LD_INT 0
17728: ST_TO_ADDR
// sFire := false ;
17729: LD_ADDR_EXP 67
17733: PUSH
17734: LD_INT 0
17736: ST_TO_ADDR
// sRefresh := false ;
17737: LD_ADDR_EXP 68
17741: PUSH
17742: LD_INT 0
17744: ST_TO_ADDR
// sExp := false ;
17745: LD_ADDR_EXP 69
17749: PUSH
17750: LD_INT 0
17752: ST_TO_ADDR
// sDepot := false ;
17753: LD_ADDR_EXP 70
17757: PUSH
17758: LD_INT 0
17760: ST_TO_ADDR
// sFlag := false ;
17761: LD_ADDR_EXP 71
17765: PUSH
17766: LD_INT 0
17768: ST_TO_ADDR
// sKamikadze := false ;
17769: LD_ADDR_EXP 79
17773: PUSH
17774: LD_INT 0
17776: ST_TO_ADDR
// sTroll := false ;
17777: LD_ADDR_EXP 80
17781: PUSH
17782: LD_INT 0
17784: ST_TO_ADDR
// sSlow := false ;
17785: LD_ADDR_EXP 81
17789: PUSH
17790: LD_INT 0
17792: ST_TO_ADDR
// sLack := false ;
17793: LD_ADDR_EXP 82
17797: PUSH
17798: LD_INT 0
17800: ST_TO_ADDR
// sTank := false ;
17801: LD_ADDR_EXP 84
17805: PUSH
17806: LD_INT 0
17808: ST_TO_ADDR
// sRemote := false ;
17809: LD_ADDR_EXP 85
17813: PUSH
17814: LD_INT 0
17816: ST_TO_ADDR
// sPowell := false ;
17817: LD_ADDR_EXP 86
17821: PUSH
17822: LD_INT 0
17824: ST_TO_ADDR
// sTeleport := false ;
17825: LD_ADDR_EXP 89
17829: PUSH
17830: LD_INT 0
17832: ST_TO_ADDR
// sOilTower := false ;
17833: LD_ADDR_EXP 91
17837: PUSH
17838: LD_INT 0
17840: ST_TO_ADDR
// sShovel := false ;
17841: LD_ADDR_EXP 92
17845: PUSH
17846: LD_INT 0
17848: ST_TO_ADDR
// sSheik := false ;
17849: LD_ADDR_EXP 93
17853: PUSH
17854: LD_INT 0
17856: ST_TO_ADDR
// sEarthquake := false ;
17857: LD_ADDR_EXP 95
17861: PUSH
17862: LD_INT 0
17864: ST_TO_ADDR
// sAI := false ;
17865: LD_ADDR_EXP 96
17869: PUSH
17870: LD_INT 0
17872: ST_TO_ADDR
// sCargo := false ;
17873: LD_ADDR_EXP 99
17877: PUSH
17878: LD_INT 0
17880: ST_TO_ADDR
// sDLaser := false ;
17881: LD_ADDR_EXP 100
17885: PUSH
17886: LD_INT 0
17888: ST_TO_ADDR
// sExchange := false ;
17889: LD_ADDR_EXP 101
17893: PUSH
17894: LD_INT 0
17896: ST_TO_ADDR
// sFac := false ;
17897: LD_ADDR_EXP 102
17901: PUSH
17902: LD_INT 0
17904: ST_TO_ADDR
// sPower := false ;
17905: LD_ADDR_EXP 103
17909: PUSH
17910: LD_INT 0
17912: ST_TO_ADDR
// sRandom := false ;
17913: LD_ADDR_EXP 104
17917: PUSH
17918: LD_INT 0
17920: ST_TO_ADDR
// sShield := false ;
17921: LD_ADDR_EXP 105
17925: PUSH
17926: LD_INT 0
17928: ST_TO_ADDR
// sTime := false ;
17929: LD_ADDR_EXP 106
17933: PUSH
17934: LD_INT 0
17936: ST_TO_ADDR
// sTools := false ;
17937: LD_ADDR_EXP 107
17941: PUSH
17942: LD_INT 0
17944: ST_TO_ADDR
// sSold := false ;
17945: LD_ADDR_EXP 72
17949: PUSH
17950: LD_INT 0
17952: ST_TO_ADDR
// sDiff := false ;
17953: LD_ADDR_EXP 73
17957: PUSH
17958: LD_INT 0
17960: ST_TO_ADDR
// sFog := false ;
17961: LD_ADDR_EXP 76
17965: PUSH
17966: LD_INT 0
17968: ST_TO_ADDR
// sReset := false ;
17969: LD_ADDR_EXP 77
17973: PUSH
17974: LD_INT 0
17976: ST_TO_ADDR
// sSun := false ;
17977: LD_ADDR_EXP 78
17981: PUSH
17982: LD_INT 0
17984: ST_TO_ADDR
// sTiger := false ;
17985: LD_ADDR_EXP 74
17989: PUSH
17990: LD_INT 0
17992: ST_TO_ADDR
// sBomb := false ;
17993: LD_ADDR_EXP 75
17997: PUSH
17998: LD_INT 0
18000: ST_TO_ADDR
// sWound := false ;
18001: LD_ADDR_EXP 83
18005: PUSH
18006: LD_INT 0
18008: ST_TO_ADDR
// sBetray := false ;
18009: LD_ADDR_EXP 87
18013: PUSH
18014: LD_INT 0
18016: ST_TO_ADDR
// sContamin := false ;
18017: LD_ADDR_EXP 88
18021: PUSH
18022: LD_INT 0
18024: ST_TO_ADDR
// sOil := false ;
18025: LD_ADDR_EXP 90
18029: PUSH
18030: LD_INT 0
18032: ST_TO_ADDR
// sStu := false ;
18033: LD_ADDR_EXP 94
18037: PUSH
18038: LD_INT 0
18040: ST_TO_ADDR
// sBazooka := false ;
18041: LD_ADDR_EXP 97
18045: PUSH
18046: LD_INT 0
18048: ST_TO_ADDR
// sMortar := false ;
18049: LD_ADDR_EXP 98
18053: PUSH
18054: LD_INT 0
18056: ST_TO_ADDR
// sRanger := false ;
18057: LD_ADDR_EXP 108
18061: PUSH
18062: LD_INT 0
18064: ST_TO_ADDR
// sComputer := false ;
18065: LD_ADDR_EXP 109
18069: PUSH
18070: LD_INT 0
18072: ST_TO_ADDR
// s30 := false ;
18073: LD_ADDR_EXP 110
18077: PUSH
18078: LD_INT 0
18080: ST_TO_ADDR
// s60 := false ;
18081: LD_ADDR_EXP 111
18085: PUSH
18086: LD_INT 0
18088: ST_TO_ADDR
// end ;
18089: LD_VAR 0 1
18093: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
18094: LD_INT 0
18096: PPUSH
18097: PPUSH
18098: PPUSH
18099: PPUSH
18100: PPUSH
18101: PPUSH
18102: PPUSH
// result := [ ] ;
18103: LD_ADDR_VAR 0 2
18107: PUSH
18108: EMPTY
18109: ST_TO_ADDR
// if campaign_id = 1 then
18110: LD_OWVAR 69
18114: PUSH
18115: LD_INT 1
18117: EQUAL
18118: IFFALSE 21284
// begin case mission_number of 1 :
18120: LD_OWVAR 70
18124: PUSH
18125: LD_INT 1
18127: DOUBLE
18128: EQUAL
18129: IFTRUE 18133
18131: GO 18209
18133: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18134: LD_ADDR_VAR 0 2
18138: PUSH
18139: LD_INT 2
18141: PUSH
18142: LD_INT 4
18144: PUSH
18145: LD_INT 11
18147: PUSH
18148: LD_INT 12
18150: PUSH
18151: LD_INT 15
18153: PUSH
18154: LD_INT 16
18156: PUSH
18157: LD_INT 22
18159: PUSH
18160: LD_INT 23
18162: PUSH
18163: LD_INT 26
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 101
18179: PUSH
18180: LD_INT 102
18182: PUSH
18183: LD_INT 106
18185: PUSH
18186: LD_INT 116
18188: PUSH
18189: LD_INT 117
18191: PUSH
18192: LD_INT 118
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: ST_TO_ADDR
18207: GO 21282
18209: LD_INT 2
18211: DOUBLE
18212: EQUAL
18213: IFTRUE 18217
18215: GO 18301
18217: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18218: LD_ADDR_VAR 0 2
18222: PUSH
18223: LD_INT 2
18225: PUSH
18226: LD_INT 4
18228: PUSH
18229: LD_INT 11
18231: PUSH
18232: LD_INT 12
18234: PUSH
18235: LD_INT 15
18237: PUSH
18238: LD_INT 16
18240: PUSH
18241: LD_INT 22
18243: PUSH
18244: LD_INT 23
18246: PUSH
18247: LD_INT 26
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 101
18263: PUSH
18264: LD_INT 102
18266: PUSH
18267: LD_INT 105
18269: PUSH
18270: LD_INT 106
18272: PUSH
18273: LD_INT 108
18275: PUSH
18276: LD_INT 116
18278: PUSH
18279: LD_INT 117
18281: PUSH
18282: LD_INT 118
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: ST_TO_ADDR
18299: GO 21282
18301: LD_INT 3
18303: DOUBLE
18304: EQUAL
18305: IFTRUE 18309
18307: GO 18397
18309: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
18310: LD_ADDR_VAR 0 2
18314: PUSH
18315: LD_INT 2
18317: PUSH
18318: LD_INT 4
18320: PUSH
18321: LD_INT 5
18323: PUSH
18324: LD_INT 11
18326: PUSH
18327: LD_INT 12
18329: PUSH
18330: LD_INT 15
18332: PUSH
18333: LD_INT 16
18335: PUSH
18336: LD_INT 22
18338: PUSH
18339: LD_INT 26
18341: PUSH
18342: LD_INT 36
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 101
18359: PUSH
18360: LD_INT 102
18362: PUSH
18363: LD_INT 105
18365: PUSH
18366: LD_INT 106
18368: PUSH
18369: LD_INT 108
18371: PUSH
18372: LD_INT 116
18374: PUSH
18375: LD_INT 117
18377: PUSH
18378: LD_INT 118
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: ST_TO_ADDR
18395: GO 21282
18397: LD_INT 4
18399: DOUBLE
18400: EQUAL
18401: IFTRUE 18405
18403: GO 18501
18405: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
18406: LD_ADDR_VAR 0 2
18410: PUSH
18411: LD_INT 2
18413: PUSH
18414: LD_INT 4
18416: PUSH
18417: LD_INT 5
18419: PUSH
18420: LD_INT 8
18422: PUSH
18423: LD_INT 11
18425: PUSH
18426: LD_INT 12
18428: PUSH
18429: LD_INT 15
18431: PUSH
18432: LD_INT 16
18434: PUSH
18435: LD_INT 22
18437: PUSH
18438: LD_INT 23
18440: PUSH
18441: LD_INT 26
18443: PUSH
18444: LD_INT 36
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 101
18463: PUSH
18464: LD_INT 102
18466: PUSH
18467: LD_INT 105
18469: PUSH
18470: LD_INT 106
18472: PUSH
18473: LD_INT 108
18475: PUSH
18476: LD_INT 116
18478: PUSH
18479: LD_INT 117
18481: PUSH
18482: LD_INT 118
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: ST_TO_ADDR
18499: GO 21282
18501: LD_INT 5
18503: DOUBLE
18504: EQUAL
18505: IFTRUE 18509
18507: GO 18621
18509: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
18510: LD_ADDR_VAR 0 2
18514: PUSH
18515: LD_INT 2
18517: PUSH
18518: LD_INT 4
18520: PUSH
18521: LD_INT 5
18523: PUSH
18524: LD_INT 6
18526: PUSH
18527: LD_INT 8
18529: PUSH
18530: LD_INT 11
18532: PUSH
18533: LD_INT 12
18535: PUSH
18536: LD_INT 15
18538: PUSH
18539: LD_INT 16
18541: PUSH
18542: LD_INT 22
18544: PUSH
18545: LD_INT 23
18547: PUSH
18548: LD_INT 25
18550: PUSH
18551: LD_INT 26
18553: PUSH
18554: LD_INT 36
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 101
18575: PUSH
18576: LD_INT 102
18578: PUSH
18579: LD_INT 105
18581: PUSH
18582: LD_INT 106
18584: PUSH
18585: LD_INT 108
18587: PUSH
18588: LD_INT 109
18590: PUSH
18591: LD_INT 112
18593: PUSH
18594: LD_INT 116
18596: PUSH
18597: LD_INT 117
18599: PUSH
18600: LD_INT 118
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: ST_TO_ADDR
18619: GO 21282
18621: LD_INT 6
18623: DOUBLE
18624: EQUAL
18625: IFTRUE 18629
18627: GO 18761
18629: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
18630: LD_ADDR_VAR 0 2
18634: PUSH
18635: LD_INT 2
18637: PUSH
18638: LD_INT 4
18640: PUSH
18641: LD_INT 5
18643: PUSH
18644: LD_INT 6
18646: PUSH
18647: LD_INT 8
18649: PUSH
18650: LD_INT 11
18652: PUSH
18653: LD_INT 12
18655: PUSH
18656: LD_INT 15
18658: PUSH
18659: LD_INT 16
18661: PUSH
18662: LD_INT 20
18664: PUSH
18665: LD_INT 21
18667: PUSH
18668: LD_INT 22
18670: PUSH
18671: LD_INT 23
18673: PUSH
18674: LD_INT 25
18676: PUSH
18677: LD_INT 26
18679: PUSH
18680: LD_INT 30
18682: PUSH
18683: LD_INT 31
18685: PUSH
18686: LD_INT 32
18688: PUSH
18689: LD_INT 36
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: PUSH
18713: LD_INT 101
18715: PUSH
18716: LD_INT 102
18718: PUSH
18719: LD_INT 105
18721: PUSH
18722: LD_INT 106
18724: PUSH
18725: LD_INT 108
18727: PUSH
18728: LD_INT 109
18730: PUSH
18731: LD_INT 112
18733: PUSH
18734: LD_INT 116
18736: PUSH
18737: LD_INT 117
18739: PUSH
18740: LD_INT 118
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: ST_TO_ADDR
18759: GO 21282
18761: LD_INT 7
18763: DOUBLE
18764: EQUAL
18765: IFTRUE 18769
18767: GO 18881
18769: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
18770: LD_ADDR_VAR 0 2
18774: PUSH
18775: LD_INT 2
18777: PUSH
18778: LD_INT 4
18780: PUSH
18781: LD_INT 5
18783: PUSH
18784: LD_INT 7
18786: PUSH
18787: LD_INT 11
18789: PUSH
18790: LD_INT 12
18792: PUSH
18793: LD_INT 15
18795: PUSH
18796: LD_INT 16
18798: PUSH
18799: LD_INT 20
18801: PUSH
18802: LD_INT 21
18804: PUSH
18805: LD_INT 22
18807: PUSH
18808: LD_INT 23
18810: PUSH
18811: LD_INT 25
18813: PUSH
18814: LD_INT 26
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: PUSH
18833: LD_INT 101
18835: PUSH
18836: LD_INT 102
18838: PUSH
18839: LD_INT 103
18841: PUSH
18842: LD_INT 105
18844: PUSH
18845: LD_INT 106
18847: PUSH
18848: LD_INT 108
18850: PUSH
18851: LD_INT 112
18853: PUSH
18854: LD_INT 116
18856: PUSH
18857: LD_INT 117
18859: PUSH
18860: LD_INT 118
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: ST_TO_ADDR
18879: GO 21282
18881: LD_INT 8
18883: DOUBLE
18884: EQUAL
18885: IFTRUE 18889
18887: GO 19029
18889: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
18890: LD_ADDR_VAR 0 2
18894: PUSH
18895: LD_INT 2
18897: PUSH
18898: LD_INT 4
18900: PUSH
18901: LD_INT 5
18903: PUSH
18904: LD_INT 6
18906: PUSH
18907: LD_INT 7
18909: PUSH
18910: LD_INT 8
18912: PUSH
18913: LD_INT 11
18915: PUSH
18916: LD_INT 12
18918: PUSH
18919: LD_INT 15
18921: PUSH
18922: LD_INT 16
18924: PUSH
18925: LD_INT 20
18927: PUSH
18928: LD_INT 21
18930: PUSH
18931: LD_INT 22
18933: PUSH
18934: LD_INT 23
18936: PUSH
18937: LD_INT 25
18939: PUSH
18940: LD_INT 26
18942: PUSH
18943: LD_INT 30
18945: PUSH
18946: LD_INT 31
18948: PUSH
18949: LD_INT 32
18951: PUSH
18952: LD_INT 36
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 101
18979: PUSH
18980: LD_INT 102
18982: PUSH
18983: LD_INT 103
18985: PUSH
18986: LD_INT 105
18988: PUSH
18989: LD_INT 106
18991: PUSH
18992: LD_INT 108
18994: PUSH
18995: LD_INT 109
18997: PUSH
18998: LD_INT 112
19000: PUSH
19001: LD_INT 116
19003: PUSH
19004: LD_INT 117
19006: PUSH
19007: LD_INT 118
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: ST_TO_ADDR
19027: GO 21282
19029: LD_INT 9
19031: DOUBLE
19032: EQUAL
19033: IFTRUE 19037
19035: GO 19185
19037: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
19038: LD_ADDR_VAR 0 2
19042: PUSH
19043: LD_INT 2
19045: PUSH
19046: LD_INT 4
19048: PUSH
19049: LD_INT 5
19051: PUSH
19052: LD_INT 6
19054: PUSH
19055: LD_INT 7
19057: PUSH
19058: LD_INT 8
19060: PUSH
19061: LD_INT 11
19063: PUSH
19064: LD_INT 12
19066: PUSH
19067: LD_INT 15
19069: PUSH
19070: LD_INT 16
19072: PUSH
19073: LD_INT 20
19075: PUSH
19076: LD_INT 21
19078: PUSH
19079: LD_INT 22
19081: PUSH
19082: LD_INT 23
19084: PUSH
19085: LD_INT 25
19087: PUSH
19088: LD_INT 26
19090: PUSH
19091: LD_INT 28
19093: PUSH
19094: LD_INT 30
19096: PUSH
19097: LD_INT 31
19099: PUSH
19100: LD_INT 32
19102: PUSH
19103: LD_INT 36
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 101
19131: PUSH
19132: LD_INT 102
19134: PUSH
19135: LD_INT 103
19137: PUSH
19138: LD_INT 105
19140: PUSH
19141: LD_INT 106
19143: PUSH
19144: LD_INT 108
19146: PUSH
19147: LD_INT 109
19149: PUSH
19150: LD_INT 112
19152: PUSH
19153: LD_INT 114
19155: PUSH
19156: LD_INT 116
19158: PUSH
19159: LD_INT 117
19161: PUSH
19162: LD_INT 118
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: ST_TO_ADDR
19183: GO 21282
19185: LD_INT 10
19187: DOUBLE
19188: EQUAL
19189: IFTRUE 19193
19191: GO 19389
19193: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
19194: LD_ADDR_VAR 0 2
19198: PUSH
19199: LD_INT 2
19201: PUSH
19202: LD_INT 4
19204: PUSH
19205: LD_INT 5
19207: PUSH
19208: LD_INT 6
19210: PUSH
19211: LD_INT 7
19213: PUSH
19214: LD_INT 8
19216: PUSH
19217: LD_INT 9
19219: PUSH
19220: LD_INT 10
19222: PUSH
19223: LD_INT 11
19225: PUSH
19226: LD_INT 12
19228: PUSH
19229: LD_INT 13
19231: PUSH
19232: LD_INT 14
19234: PUSH
19235: LD_INT 15
19237: PUSH
19238: LD_INT 16
19240: PUSH
19241: LD_INT 17
19243: PUSH
19244: LD_INT 18
19246: PUSH
19247: LD_INT 19
19249: PUSH
19250: LD_INT 20
19252: PUSH
19253: LD_INT 21
19255: PUSH
19256: LD_INT 22
19258: PUSH
19259: LD_INT 23
19261: PUSH
19262: LD_INT 24
19264: PUSH
19265: LD_INT 25
19267: PUSH
19268: LD_INT 26
19270: PUSH
19271: LD_INT 28
19273: PUSH
19274: LD_INT 30
19276: PUSH
19277: LD_INT 31
19279: PUSH
19280: LD_INT 32
19282: PUSH
19283: LD_INT 36
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 101
19319: PUSH
19320: LD_INT 102
19322: PUSH
19323: LD_INT 103
19325: PUSH
19326: LD_INT 104
19328: PUSH
19329: LD_INT 105
19331: PUSH
19332: LD_INT 106
19334: PUSH
19335: LD_INT 107
19337: PUSH
19338: LD_INT 108
19340: PUSH
19341: LD_INT 109
19343: PUSH
19344: LD_INT 110
19346: PUSH
19347: LD_INT 111
19349: PUSH
19350: LD_INT 112
19352: PUSH
19353: LD_INT 114
19355: PUSH
19356: LD_INT 116
19358: PUSH
19359: LD_INT 117
19361: PUSH
19362: LD_INT 118
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: ST_TO_ADDR
19387: GO 21282
19389: LD_INT 11
19391: DOUBLE
19392: EQUAL
19393: IFTRUE 19397
19395: GO 19601
19397: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
19398: LD_ADDR_VAR 0 2
19402: PUSH
19403: LD_INT 2
19405: PUSH
19406: LD_INT 3
19408: PUSH
19409: LD_INT 4
19411: PUSH
19412: LD_INT 5
19414: PUSH
19415: LD_INT 6
19417: PUSH
19418: LD_INT 7
19420: PUSH
19421: LD_INT 8
19423: PUSH
19424: LD_INT 9
19426: PUSH
19427: LD_INT 10
19429: PUSH
19430: LD_INT 11
19432: PUSH
19433: LD_INT 12
19435: PUSH
19436: LD_INT 13
19438: PUSH
19439: LD_INT 14
19441: PUSH
19442: LD_INT 15
19444: PUSH
19445: LD_INT 16
19447: PUSH
19448: LD_INT 17
19450: PUSH
19451: LD_INT 18
19453: PUSH
19454: LD_INT 19
19456: PUSH
19457: LD_INT 20
19459: PUSH
19460: LD_INT 21
19462: PUSH
19463: LD_INT 22
19465: PUSH
19466: LD_INT 23
19468: PUSH
19469: LD_INT 24
19471: PUSH
19472: LD_INT 25
19474: PUSH
19475: LD_INT 26
19477: PUSH
19478: LD_INT 28
19480: PUSH
19481: LD_INT 30
19483: PUSH
19484: LD_INT 31
19486: PUSH
19487: LD_INT 32
19489: PUSH
19490: LD_INT 34
19492: PUSH
19493: LD_INT 36
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 101
19531: PUSH
19532: LD_INT 102
19534: PUSH
19535: LD_INT 103
19537: PUSH
19538: LD_INT 104
19540: PUSH
19541: LD_INT 105
19543: PUSH
19544: LD_INT 106
19546: PUSH
19547: LD_INT 107
19549: PUSH
19550: LD_INT 108
19552: PUSH
19553: LD_INT 109
19555: PUSH
19556: LD_INT 110
19558: PUSH
19559: LD_INT 111
19561: PUSH
19562: LD_INT 112
19564: PUSH
19565: LD_INT 114
19567: PUSH
19568: LD_INT 116
19570: PUSH
19571: LD_INT 117
19573: PUSH
19574: LD_INT 118
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: ST_TO_ADDR
19599: GO 21282
19601: LD_INT 12
19603: DOUBLE
19604: EQUAL
19605: IFTRUE 19609
19607: GO 19829
19609: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
19610: LD_ADDR_VAR 0 2
19614: PUSH
19615: LD_INT 1
19617: PUSH
19618: LD_INT 2
19620: PUSH
19621: LD_INT 3
19623: PUSH
19624: LD_INT 4
19626: PUSH
19627: LD_INT 5
19629: PUSH
19630: LD_INT 6
19632: PUSH
19633: LD_INT 7
19635: PUSH
19636: LD_INT 8
19638: PUSH
19639: LD_INT 9
19641: PUSH
19642: LD_INT 10
19644: PUSH
19645: LD_INT 11
19647: PUSH
19648: LD_INT 12
19650: PUSH
19651: LD_INT 13
19653: PUSH
19654: LD_INT 14
19656: PUSH
19657: LD_INT 15
19659: PUSH
19660: LD_INT 16
19662: PUSH
19663: LD_INT 17
19665: PUSH
19666: LD_INT 18
19668: PUSH
19669: LD_INT 19
19671: PUSH
19672: LD_INT 20
19674: PUSH
19675: LD_INT 21
19677: PUSH
19678: LD_INT 22
19680: PUSH
19681: LD_INT 23
19683: PUSH
19684: LD_INT 24
19686: PUSH
19687: LD_INT 25
19689: PUSH
19690: LD_INT 26
19692: PUSH
19693: LD_INT 27
19695: PUSH
19696: LD_INT 28
19698: PUSH
19699: LD_INT 30
19701: PUSH
19702: LD_INT 31
19704: PUSH
19705: LD_INT 32
19707: PUSH
19708: LD_INT 33
19710: PUSH
19711: LD_INT 34
19713: PUSH
19714: LD_INT 36
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 101
19755: PUSH
19756: LD_INT 102
19758: PUSH
19759: LD_INT 103
19761: PUSH
19762: LD_INT 104
19764: PUSH
19765: LD_INT 105
19767: PUSH
19768: LD_INT 106
19770: PUSH
19771: LD_INT 107
19773: PUSH
19774: LD_INT 108
19776: PUSH
19777: LD_INT 109
19779: PUSH
19780: LD_INT 110
19782: PUSH
19783: LD_INT 111
19785: PUSH
19786: LD_INT 112
19788: PUSH
19789: LD_INT 113
19791: PUSH
19792: LD_INT 114
19794: PUSH
19795: LD_INT 116
19797: PUSH
19798: LD_INT 117
19800: PUSH
19801: LD_INT 118
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: ST_TO_ADDR
19827: GO 21282
19829: LD_INT 13
19831: DOUBLE
19832: EQUAL
19833: IFTRUE 19837
19835: GO 20045
19837: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
19838: LD_ADDR_VAR 0 2
19842: PUSH
19843: LD_INT 1
19845: PUSH
19846: LD_INT 2
19848: PUSH
19849: LD_INT 3
19851: PUSH
19852: LD_INT 4
19854: PUSH
19855: LD_INT 5
19857: PUSH
19858: LD_INT 8
19860: PUSH
19861: LD_INT 9
19863: PUSH
19864: LD_INT 10
19866: PUSH
19867: LD_INT 11
19869: PUSH
19870: LD_INT 12
19872: PUSH
19873: LD_INT 14
19875: PUSH
19876: LD_INT 15
19878: PUSH
19879: LD_INT 16
19881: PUSH
19882: LD_INT 17
19884: PUSH
19885: LD_INT 18
19887: PUSH
19888: LD_INT 19
19890: PUSH
19891: LD_INT 20
19893: PUSH
19894: LD_INT 21
19896: PUSH
19897: LD_INT 22
19899: PUSH
19900: LD_INT 23
19902: PUSH
19903: LD_INT 24
19905: PUSH
19906: LD_INT 25
19908: PUSH
19909: LD_INT 26
19911: PUSH
19912: LD_INT 27
19914: PUSH
19915: LD_INT 28
19917: PUSH
19918: LD_INT 30
19920: PUSH
19921: LD_INT 31
19923: PUSH
19924: LD_INT 32
19926: PUSH
19927: LD_INT 33
19929: PUSH
19930: LD_INT 34
19932: PUSH
19933: LD_INT 36
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 101
19971: PUSH
19972: LD_INT 102
19974: PUSH
19975: LD_INT 103
19977: PUSH
19978: LD_INT 104
19980: PUSH
19981: LD_INT 105
19983: PUSH
19984: LD_INT 106
19986: PUSH
19987: LD_INT 107
19989: PUSH
19990: LD_INT 108
19992: PUSH
19993: LD_INT 109
19995: PUSH
19996: LD_INT 110
19998: PUSH
19999: LD_INT 111
20001: PUSH
20002: LD_INT 112
20004: PUSH
20005: LD_INT 113
20007: PUSH
20008: LD_INT 114
20010: PUSH
20011: LD_INT 116
20013: PUSH
20014: LD_INT 117
20016: PUSH
20017: LD_INT 118
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: ST_TO_ADDR
20043: GO 21282
20045: LD_INT 14
20047: DOUBLE
20048: EQUAL
20049: IFTRUE 20053
20051: GO 20277
20053: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20054: LD_ADDR_VAR 0 2
20058: PUSH
20059: LD_INT 1
20061: PUSH
20062: LD_INT 2
20064: PUSH
20065: LD_INT 3
20067: PUSH
20068: LD_INT 4
20070: PUSH
20071: LD_INT 5
20073: PUSH
20074: LD_INT 6
20076: PUSH
20077: LD_INT 7
20079: PUSH
20080: LD_INT 8
20082: PUSH
20083: LD_INT 9
20085: PUSH
20086: LD_INT 10
20088: PUSH
20089: LD_INT 11
20091: PUSH
20092: LD_INT 12
20094: PUSH
20095: LD_INT 13
20097: PUSH
20098: LD_INT 14
20100: PUSH
20101: LD_INT 15
20103: PUSH
20104: LD_INT 16
20106: PUSH
20107: LD_INT 17
20109: PUSH
20110: LD_INT 18
20112: PUSH
20113: LD_INT 19
20115: PUSH
20116: LD_INT 20
20118: PUSH
20119: LD_INT 21
20121: PUSH
20122: LD_INT 22
20124: PUSH
20125: LD_INT 23
20127: PUSH
20128: LD_INT 24
20130: PUSH
20131: LD_INT 25
20133: PUSH
20134: LD_INT 26
20136: PUSH
20137: LD_INT 27
20139: PUSH
20140: LD_INT 28
20142: PUSH
20143: LD_INT 29
20145: PUSH
20146: LD_INT 30
20148: PUSH
20149: LD_INT 31
20151: PUSH
20152: LD_INT 32
20154: PUSH
20155: LD_INT 33
20157: PUSH
20158: LD_INT 34
20160: PUSH
20161: LD_INT 36
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: PUSH
20201: LD_INT 101
20203: PUSH
20204: LD_INT 102
20206: PUSH
20207: LD_INT 103
20209: PUSH
20210: LD_INT 104
20212: PUSH
20213: LD_INT 105
20215: PUSH
20216: LD_INT 106
20218: PUSH
20219: LD_INT 107
20221: PUSH
20222: LD_INT 108
20224: PUSH
20225: LD_INT 109
20227: PUSH
20228: LD_INT 110
20230: PUSH
20231: LD_INT 111
20233: PUSH
20234: LD_INT 112
20236: PUSH
20237: LD_INT 113
20239: PUSH
20240: LD_INT 114
20242: PUSH
20243: LD_INT 116
20245: PUSH
20246: LD_INT 117
20248: PUSH
20249: LD_INT 118
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: ST_TO_ADDR
20275: GO 21282
20277: LD_INT 15
20279: DOUBLE
20280: EQUAL
20281: IFTRUE 20285
20283: GO 20509
20285: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
20286: LD_ADDR_VAR 0 2
20290: PUSH
20291: LD_INT 1
20293: PUSH
20294: LD_INT 2
20296: PUSH
20297: LD_INT 3
20299: PUSH
20300: LD_INT 4
20302: PUSH
20303: LD_INT 5
20305: PUSH
20306: LD_INT 6
20308: PUSH
20309: LD_INT 7
20311: PUSH
20312: LD_INT 8
20314: PUSH
20315: LD_INT 9
20317: PUSH
20318: LD_INT 10
20320: PUSH
20321: LD_INT 11
20323: PUSH
20324: LD_INT 12
20326: PUSH
20327: LD_INT 13
20329: PUSH
20330: LD_INT 14
20332: PUSH
20333: LD_INT 15
20335: PUSH
20336: LD_INT 16
20338: PUSH
20339: LD_INT 17
20341: PUSH
20342: LD_INT 18
20344: PUSH
20345: LD_INT 19
20347: PUSH
20348: LD_INT 20
20350: PUSH
20351: LD_INT 21
20353: PUSH
20354: LD_INT 22
20356: PUSH
20357: LD_INT 23
20359: PUSH
20360: LD_INT 24
20362: PUSH
20363: LD_INT 25
20365: PUSH
20366: LD_INT 26
20368: PUSH
20369: LD_INT 27
20371: PUSH
20372: LD_INT 28
20374: PUSH
20375: LD_INT 29
20377: PUSH
20378: LD_INT 30
20380: PUSH
20381: LD_INT 31
20383: PUSH
20384: LD_INT 32
20386: PUSH
20387: LD_INT 33
20389: PUSH
20390: LD_INT 34
20392: PUSH
20393: LD_INT 36
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 101
20435: PUSH
20436: LD_INT 102
20438: PUSH
20439: LD_INT 103
20441: PUSH
20442: LD_INT 104
20444: PUSH
20445: LD_INT 105
20447: PUSH
20448: LD_INT 106
20450: PUSH
20451: LD_INT 107
20453: PUSH
20454: LD_INT 108
20456: PUSH
20457: LD_INT 109
20459: PUSH
20460: LD_INT 110
20462: PUSH
20463: LD_INT 111
20465: PUSH
20466: LD_INT 112
20468: PUSH
20469: LD_INT 113
20471: PUSH
20472: LD_INT 114
20474: PUSH
20475: LD_INT 116
20477: PUSH
20478: LD_INT 117
20480: PUSH
20481: LD_INT 118
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: ST_TO_ADDR
20507: GO 21282
20509: LD_INT 16
20511: DOUBLE
20512: EQUAL
20513: IFTRUE 20517
20515: GO 20653
20517: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
20518: LD_ADDR_VAR 0 2
20522: PUSH
20523: LD_INT 2
20525: PUSH
20526: LD_INT 4
20528: PUSH
20529: LD_INT 5
20531: PUSH
20532: LD_INT 7
20534: PUSH
20535: LD_INT 11
20537: PUSH
20538: LD_INT 12
20540: PUSH
20541: LD_INT 15
20543: PUSH
20544: LD_INT 16
20546: PUSH
20547: LD_INT 20
20549: PUSH
20550: LD_INT 21
20552: PUSH
20553: LD_INT 22
20555: PUSH
20556: LD_INT 23
20558: PUSH
20559: LD_INT 25
20561: PUSH
20562: LD_INT 26
20564: PUSH
20565: LD_INT 30
20567: PUSH
20568: LD_INT 31
20570: PUSH
20571: LD_INT 32
20573: PUSH
20574: LD_INT 33
20576: PUSH
20577: LD_INT 34
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 101
20603: PUSH
20604: LD_INT 102
20606: PUSH
20607: LD_INT 103
20609: PUSH
20610: LD_INT 106
20612: PUSH
20613: LD_INT 108
20615: PUSH
20616: LD_INT 112
20618: PUSH
20619: LD_INT 113
20621: PUSH
20622: LD_INT 114
20624: PUSH
20625: LD_INT 116
20627: PUSH
20628: LD_INT 117
20630: PUSH
20631: LD_INT 118
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: ST_TO_ADDR
20651: GO 21282
20653: LD_INT 17
20655: DOUBLE
20656: EQUAL
20657: IFTRUE 20661
20659: GO 20885
20661: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
20662: LD_ADDR_VAR 0 2
20666: PUSH
20667: LD_INT 1
20669: PUSH
20670: LD_INT 2
20672: PUSH
20673: LD_INT 3
20675: PUSH
20676: LD_INT 4
20678: PUSH
20679: LD_INT 5
20681: PUSH
20682: LD_INT 6
20684: PUSH
20685: LD_INT 7
20687: PUSH
20688: LD_INT 8
20690: PUSH
20691: LD_INT 9
20693: PUSH
20694: LD_INT 10
20696: PUSH
20697: LD_INT 11
20699: PUSH
20700: LD_INT 12
20702: PUSH
20703: LD_INT 13
20705: PUSH
20706: LD_INT 14
20708: PUSH
20709: LD_INT 15
20711: PUSH
20712: LD_INT 16
20714: PUSH
20715: LD_INT 17
20717: PUSH
20718: LD_INT 18
20720: PUSH
20721: LD_INT 19
20723: PUSH
20724: LD_INT 20
20726: PUSH
20727: LD_INT 21
20729: PUSH
20730: LD_INT 22
20732: PUSH
20733: LD_INT 23
20735: PUSH
20736: LD_INT 24
20738: PUSH
20739: LD_INT 25
20741: PUSH
20742: LD_INT 26
20744: PUSH
20745: LD_INT 27
20747: PUSH
20748: LD_INT 28
20750: PUSH
20751: LD_INT 29
20753: PUSH
20754: LD_INT 30
20756: PUSH
20757: LD_INT 31
20759: PUSH
20760: LD_INT 32
20762: PUSH
20763: LD_INT 33
20765: PUSH
20766: LD_INT 34
20768: PUSH
20769: LD_INT 36
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: PUSH
20809: LD_INT 101
20811: PUSH
20812: LD_INT 102
20814: PUSH
20815: LD_INT 103
20817: PUSH
20818: LD_INT 104
20820: PUSH
20821: LD_INT 105
20823: PUSH
20824: LD_INT 106
20826: PUSH
20827: LD_INT 107
20829: PUSH
20830: LD_INT 108
20832: PUSH
20833: LD_INT 109
20835: PUSH
20836: LD_INT 110
20838: PUSH
20839: LD_INT 111
20841: PUSH
20842: LD_INT 112
20844: PUSH
20845: LD_INT 113
20847: PUSH
20848: LD_INT 114
20850: PUSH
20851: LD_INT 116
20853: PUSH
20854: LD_INT 117
20856: PUSH
20857: LD_INT 118
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: ST_TO_ADDR
20883: GO 21282
20885: LD_INT 18
20887: DOUBLE
20888: EQUAL
20889: IFTRUE 20893
20891: GO 21041
20893: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
20894: LD_ADDR_VAR 0 2
20898: PUSH
20899: LD_INT 2
20901: PUSH
20902: LD_INT 4
20904: PUSH
20905: LD_INT 5
20907: PUSH
20908: LD_INT 7
20910: PUSH
20911: LD_INT 11
20913: PUSH
20914: LD_INT 12
20916: PUSH
20917: LD_INT 15
20919: PUSH
20920: LD_INT 16
20922: PUSH
20923: LD_INT 20
20925: PUSH
20926: LD_INT 21
20928: PUSH
20929: LD_INT 22
20931: PUSH
20932: LD_INT 23
20934: PUSH
20935: LD_INT 25
20937: PUSH
20938: LD_INT 26
20940: PUSH
20941: LD_INT 30
20943: PUSH
20944: LD_INT 31
20946: PUSH
20947: LD_INT 32
20949: PUSH
20950: LD_INT 33
20952: PUSH
20953: LD_INT 34
20955: PUSH
20956: LD_INT 35
20958: PUSH
20959: LD_INT 36
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 101
20987: PUSH
20988: LD_INT 102
20990: PUSH
20991: LD_INT 103
20993: PUSH
20994: LD_INT 106
20996: PUSH
20997: LD_INT 108
20999: PUSH
21000: LD_INT 112
21002: PUSH
21003: LD_INT 113
21005: PUSH
21006: LD_INT 114
21008: PUSH
21009: LD_INT 115
21011: PUSH
21012: LD_INT 116
21014: PUSH
21015: LD_INT 117
21017: PUSH
21018: LD_INT 118
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: ST_TO_ADDR
21039: GO 21282
21041: LD_INT 19
21043: DOUBLE
21044: EQUAL
21045: IFTRUE 21049
21047: GO 21281
21049: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21050: LD_ADDR_VAR 0 2
21054: PUSH
21055: LD_INT 1
21057: PUSH
21058: LD_INT 2
21060: PUSH
21061: LD_INT 3
21063: PUSH
21064: LD_INT 4
21066: PUSH
21067: LD_INT 5
21069: PUSH
21070: LD_INT 6
21072: PUSH
21073: LD_INT 7
21075: PUSH
21076: LD_INT 8
21078: PUSH
21079: LD_INT 9
21081: PUSH
21082: LD_INT 10
21084: PUSH
21085: LD_INT 11
21087: PUSH
21088: LD_INT 12
21090: PUSH
21091: LD_INT 13
21093: PUSH
21094: LD_INT 14
21096: PUSH
21097: LD_INT 15
21099: PUSH
21100: LD_INT 16
21102: PUSH
21103: LD_INT 17
21105: PUSH
21106: LD_INT 18
21108: PUSH
21109: LD_INT 19
21111: PUSH
21112: LD_INT 20
21114: PUSH
21115: LD_INT 21
21117: PUSH
21118: LD_INT 22
21120: PUSH
21121: LD_INT 23
21123: PUSH
21124: LD_INT 24
21126: PUSH
21127: LD_INT 25
21129: PUSH
21130: LD_INT 26
21132: PUSH
21133: LD_INT 27
21135: PUSH
21136: LD_INT 28
21138: PUSH
21139: LD_INT 29
21141: PUSH
21142: LD_INT 30
21144: PUSH
21145: LD_INT 31
21147: PUSH
21148: LD_INT 32
21150: PUSH
21151: LD_INT 33
21153: PUSH
21154: LD_INT 34
21156: PUSH
21157: LD_INT 35
21159: PUSH
21160: LD_INT 36
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: PUSH
21201: LD_INT 101
21203: PUSH
21204: LD_INT 102
21206: PUSH
21207: LD_INT 103
21209: PUSH
21210: LD_INT 104
21212: PUSH
21213: LD_INT 105
21215: PUSH
21216: LD_INT 106
21218: PUSH
21219: LD_INT 107
21221: PUSH
21222: LD_INT 108
21224: PUSH
21225: LD_INT 109
21227: PUSH
21228: LD_INT 110
21230: PUSH
21231: LD_INT 111
21233: PUSH
21234: LD_INT 112
21236: PUSH
21237: LD_INT 113
21239: PUSH
21240: LD_INT 114
21242: PUSH
21243: LD_INT 115
21245: PUSH
21246: LD_INT 116
21248: PUSH
21249: LD_INT 117
21251: PUSH
21252: LD_INT 118
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: ST_TO_ADDR
21279: GO 21282
21281: POP
// end else
21282: GO 21513
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
21284: LD_ADDR_VAR 0 2
21288: PUSH
21289: LD_INT 1
21291: PUSH
21292: LD_INT 2
21294: PUSH
21295: LD_INT 3
21297: PUSH
21298: LD_INT 4
21300: PUSH
21301: LD_INT 5
21303: PUSH
21304: LD_INT 6
21306: PUSH
21307: LD_INT 7
21309: PUSH
21310: LD_INT 8
21312: PUSH
21313: LD_INT 9
21315: PUSH
21316: LD_INT 10
21318: PUSH
21319: LD_INT 11
21321: PUSH
21322: LD_INT 12
21324: PUSH
21325: LD_INT 13
21327: PUSH
21328: LD_INT 14
21330: PUSH
21331: LD_INT 15
21333: PUSH
21334: LD_INT 16
21336: PUSH
21337: LD_INT 17
21339: PUSH
21340: LD_INT 18
21342: PUSH
21343: LD_INT 19
21345: PUSH
21346: LD_INT 20
21348: PUSH
21349: LD_INT 21
21351: PUSH
21352: LD_INT 22
21354: PUSH
21355: LD_INT 23
21357: PUSH
21358: LD_INT 24
21360: PUSH
21361: LD_INT 25
21363: PUSH
21364: LD_INT 26
21366: PUSH
21367: LD_INT 27
21369: PUSH
21370: LD_INT 28
21372: PUSH
21373: LD_INT 29
21375: PUSH
21376: LD_INT 30
21378: PUSH
21379: LD_INT 31
21381: PUSH
21382: LD_INT 32
21384: PUSH
21385: LD_INT 33
21387: PUSH
21388: LD_INT 34
21390: PUSH
21391: LD_INT 35
21393: PUSH
21394: LD_INT 36
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: PUSH
21435: LD_INT 101
21437: PUSH
21438: LD_INT 102
21440: PUSH
21441: LD_INT 103
21443: PUSH
21444: LD_INT 104
21446: PUSH
21447: LD_INT 105
21449: PUSH
21450: LD_INT 106
21452: PUSH
21453: LD_INT 107
21455: PUSH
21456: LD_INT 108
21458: PUSH
21459: LD_INT 109
21461: PUSH
21462: LD_INT 110
21464: PUSH
21465: LD_INT 111
21467: PUSH
21468: LD_INT 112
21470: PUSH
21471: LD_INT 113
21473: PUSH
21474: LD_INT 114
21476: PUSH
21477: LD_INT 115
21479: PUSH
21480: LD_INT 116
21482: PUSH
21483: LD_INT 117
21485: PUSH
21486: LD_INT 118
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: ST_TO_ADDR
// if result then
21513: LD_VAR 0 2
21517: IFFALSE 22303
// begin normal :=  ;
21519: LD_ADDR_VAR 0 5
21523: PUSH
21524: LD_STRING 
21526: ST_TO_ADDR
// hardcore :=  ;
21527: LD_ADDR_VAR 0 6
21531: PUSH
21532: LD_STRING 
21534: ST_TO_ADDR
// active :=  ;
21535: LD_ADDR_VAR 0 7
21539: PUSH
21540: LD_STRING 
21542: ST_TO_ADDR
// for i = 1 to normalCounter do
21543: LD_ADDR_VAR 0 8
21547: PUSH
21548: DOUBLE
21549: LD_INT 1
21551: DEC
21552: ST_TO_ADDR
21553: LD_EXP 56
21557: PUSH
21558: FOR_TO
21559: IFFALSE 21660
// begin tmp := 0 ;
21561: LD_ADDR_VAR 0 3
21565: PUSH
21566: LD_STRING 0
21568: ST_TO_ADDR
// if result [ 1 ] then
21569: LD_VAR 0 2
21573: PUSH
21574: LD_INT 1
21576: ARRAY
21577: IFFALSE 21642
// if result [ 1 ] [ 1 ] = i then
21579: LD_VAR 0 2
21583: PUSH
21584: LD_INT 1
21586: ARRAY
21587: PUSH
21588: LD_INT 1
21590: ARRAY
21591: PUSH
21592: LD_VAR 0 8
21596: EQUAL
21597: IFFALSE 21642
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21599: LD_ADDR_VAR 0 2
21603: PUSH
21604: LD_VAR 0 2
21608: PPUSH
21609: LD_INT 1
21611: PPUSH
21612: LD_VAR 0 2
21616: PUSH
21617: LD_INT 1
21619: ARRAY
21620: PPUSH
21621: LD_INT 1
21623: PPUSH
21624: CALL_OW 3
21628: PPUSH
21629: CALL_OW 1
21633: ST_TO_ADDR
// tmp := 1 ;
21634: LD_ADDR_VAR 0 3
21638: PUSH
21639: LD_STRING 1
21641: ST_TO_ADDR
// end ; normal := normal & tmp ;
21642: LD_ADDR_VAR 0 5
21646: PUSH
21647: LD_VAR 0 5
21651: PUSH
21652: LD_VAR 0 3
21656: STR
21657: ST_TO_ADDR
// end ;
21658: GO 21558
21660: POP
21661: POP
// for i = 1 to hardcoreCounter do
21662: LD_ADDR_VAR 0 8
21666: PUSH
21667: DOUBLE
21668: LD_INT 1
21670: DEC
21671: ST_TO_ADDR
21672: LD_EXP 57
21676: PUSH
21677: FOR_TO
21678: IFFALSE 21783
// begin tmp := 0 ;
21680: LD_ADDR_VAR 0 3
21684: PUSH
21685: LD_STRING 0
21687: ST_TO_ADDR
// if result [ 2 ] then
21688: LD_VAR 0 2
21692: PUSH
21693: LD_INT 2
21695: ARRAY
21696: IFFALSE 21765
// if result [ 2 ] [ 1 ] = 100 + i then
21698: LD_VAR 0 2
21702: PUSH
21703: LD_INT 2
21705: ARRAY
21706: PUSH
21707: LD_INT 1
21709: ARRAY
21710: PUSH
21711: LD_INT 100
21713: PUSH
21714: LD_VAR 0 8
21718: PLUS
21719: EQUAL
21720: IFFALSE 21765
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21722: LD_ADDR_VAR 0 2
21726: PUSH
21727: LD_VAR 0 2
21731: PPUSH
21732: LD_INT 2
21734: PPUSH
21735: LD_VAR 0 2
21739: PUSH
21740: LD_INT 2
21742: ARRAY
21743: PPUSH
21744: LD_INT 1
21746: PPUSH
21747: CALL_OW 3
21751: PPUSH
21752: CALL_OW 1
21756: ST_TO_ADDR
// tmp := 1 ;
21757: LD_ADDR_VAR 0 3
21761: PUSH
21762: LD_STRING 1
21764: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21765: LD_ADDR_VAR 0 6
21769: PUSH
21770: LD_VAR 0 6
21774: PUSH
21775: LD_VAR 0 3
21779: STR
21780: ST_TO_ADDR
// end ;
21781: GO 21677
21783: POP
21784: POP
// if isGameLoad then
21785: LD_VAR 0 1
21789: IFFALSE 22264
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
21791: LD_ADDR_VAR 0 4
21795: PUSH
21796: LD_EXP 60
21800: PUSH
21801: LD_EXP 59
21805: PUSH
21806: LD_EXP 61
21810: PUSH
21811: LD_EXP 58
21815: PUSH
21816: LD_EXP 62
21820: PUSH
21821: LD_EXP 63
21825: PUSH
21826: LD_EXP 64
21830: PUSH
21831: LD_EXP 65
21835: PUSH
21836: LD_EXP 66
21840: PUSH
21841: LD_EXP 67
21845: PUSH
21846: LD_EXP 68
21850: PUSH
21851: LD_EXP 69
21855: PUSH
21856: LD_EXP 70
21860: PUSH
21861: LD_EXP 71
21865: PUSH
21866: LD_EXP 79
21870: PUSH
21871: LD_EXP 80
21875: PUSH
21876: LD_EXP 81
21880: PUSH
21881: LD_EXP 82
21885: PUSH
21886: LD_EXP 84
21890: PUSH
21891: LD_EXP 85
21895: PUSH
21896: LD_EXP 86
21900: PUSH
21901: LD_EXP 89
21905: PUSH
21906: LD_EXP 91
21910: PUSH
21911: LD_EXP 92
21915: PUSH
21916: LD_EXP 93
21920: PUSH
21921: LD_EXP 95
21925: PUSH
21926: LD_EXP 96
21930: PUSH
21931: LD_EXP 99
21935: PUSH
21936: LD_EXP 100
21940: PUSH
21941: LD_EXP 101
21945: PUSH
21946: LD_EXP 102
21950: PUSH
21951: LD_EXP 103
21955: PUSH
21956: LD_EXP 104
21960: PUSH
21961: LD_EXP 105
21965: PUSH
21966: LD_EXP 106
21970: PUSH
21971: LD_EXP 107
21975: PUSH
21976: LD_EXP 72
21980: PUSH
21981: LD_EXP 73
21985: PUSH
21986: LD_EXP 76
21990: PUSH
21991: LD_EXP 77
21995: PUSH
21996: LD_EXP 78
22000: PUSH
22001: LD_EXP 74
22005: PUSH
22006: LD_EXP 75
22010: PUSH
22011: LD_EXP 83
22015: PUSH
22016: LD_EXP 87
22020: PUSH
22021: LD_EXP 88
22025: PUSH
22026: LD_EXP 90
22030: PUSH
22031: LD_EXP 94
22035: PUSH
22036: LD_EXP 97
22040: PUSH
22041: LD_EXP 98
22045: PUSH
22046: LD_EXP 108
22050: PUSH
22051: LD_EXP 109
22055: PUSH
22056: LD_EXP 110
22060: PUSH
22061: LD_EXP 111
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: ST_TO_ADDR
// tmp :=  ;
22122: LD_ADDR_VAR 0 3
22126: PUSH
22127: LD_STRING 
22129: ST_TO_ADDR
// for i = 1 to normalCounter do
22130: LD_ADDR_VAR 0 8
22134: PUSH
22135: DOUBLE
22136: LD_INT 1
22138: DEC
22139: ST_TO_ADDR
22140: LD_EXP 56
22144: PUSH
22145: FOR_TO
22146: IFFALSE 22182
// begin if flags [ i ] then
22148: LD_VAR 0 4
22152: PUSH
22153: LD_VAR 0 8
22157: ARRAY
22158: IFFALSE 22180
// tmp := tmp & i & ; ;
22160: LD_ADDR_VAR 0 3
22164: PUSH
22165: LD_VAR 0 3
22169: PUSH
22170: LD_VAR 0 8
22174: STR
22175: PUSH
22176: LD_STRING ;
22178: STR
22179: ST_TO_ADDR
// end ;
22180: GO 22145
22182: POP
22183: POP
// for i = 1 to hardcoreCounter do
22184: LD_ADDR_VAR 0 8
22188: PUSH
22189: DOUBLE
22190: LD_INT 1
22192: DEC
22193: ST_TO_ADDR
22194: LD_EXP 57
22198: PUSH
22199: FOR_TO
22200: IFFALSE 22246
// begin if flags [ normalCounter + i ] then
22202: LD_VAR 0 4
22206: PUSH
22207: LD_EXP 56
22211: PUSH
22212: LD_VAR 0 8
22216: PLUS
22217: ARRAY
22218: IFFALSE 22244
// tmp := tmp & ( 100 + i ) & ; ;
22220: LD_ADDR_VAR 0 3
22224: PUSH
22225: LD_VAR 0 3
22229: PUSH
22230: LD_INT 100
22232: PUSH
22233: LD_VAR 0 8
22237: PLUS
22238: STR
22239: PUSH
22240: LD_STRING ;
22242: STR
22243: ST_TO_ADDR
// end ;
22244: GO 22199
22246: POP
22247: POP
// if tmp then
22248: LD_VAR 0 3
22252: IFFALSE 22264
// active := tmp ;
22254: LD_ADDR_VAR 0 7
22258: PUSH
22259: LD_VAR 0 3
22263: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
22264: LD_STRING getStreamItemsFromMission("
22266: PUSH
22267: LD_VAR 0 5
22271: STR
22272: PUSH
22273: LD_STRING ","
22275: STR
22276: PUSH
22277: LD_VAR 0 6
22281: STR
22282: PUSH
22283: LD_STRING ","
22285: STR
22286: PUSH
22287: LD_VAR 0 7
22291: STR
22292: PUSH
22293: LD_STRING ")
22295: STR
22296: PPUSH
22297: CALL_OW 559
// end else
22301: GO 22310
// ToLua ( getStreamItemsFromMission("","","") ) ;
22303: LD_STRING getStreamItemsFromMission("","","")
22305: PPUSH
22306: CALL_OW 559
// end ;
22310: LD_VAR 0 2
22314: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22315: LD_EXP 55
22319: PUSH
22320: LD_EXP 60
22324: AND
22325: IFFALSE 22449
22327: GO 22329
22329: DISABLE
22330: LD_INT 0
22332: PPUSH
22333: PPUSH
// begin enable ;
22334: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
22335: LD_ADDR_VAR 0 2
22339: PUSH
22340: LD_INT 22
22342: PUSH
22343: LD_OWVAR 2
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 2
22354: PUSH
22355: LD_INT 34
22357: PUSH
22358: LD_INT 7
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PUSH
22365: LD_INT 34
22367: PUSH
22368: LD_INT 45
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: LD_INT 34
22377: PUSH
22378: LD_INT 28
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 34
22387: PUSH
22388: LD_INT 47
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PPUSH
22406: CALL_OW 69
22410: ST_TO_ADDR
// if not tmp then
22411: LD_VAR 0 2
22415: NOT
22416: IFFALSE 22420
// exit ;
22418: GO 22449
// for i in tmp do
22420: LD_ADDR_VAR 0 1
22424: PUSH
22425: LD_VAR 0 2
22429: PUSH
22430: FOR_IN
22431: IFFALSE 22447
// begin SetLives ( i , 0 ) ;
22433: LD_VAR 0 1
22437: PPUSH
22438: LD_INT 0
22440: PPUSH
22441: CALL_OW 234
// end ;
22445: GO 22430
22447: POP
22448: POP
// end ;
22449: PPOPN 2
22451: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22452: LD_EXP 55
22456: PUSH
22457: LD_EXP 61
22461: AND
22462: IFFALSE 22546
22464: GO 22466
22466: DISABLE
22467: LD_INT 0
22469: PPUSH
22470: PPUSH
// begin enable ;
22471: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22472: LD_ADDR_VAR 0 2
22476: PUSH
22477: LD_INT 22
22479: PUSH
22480: LD_OWVAR 2
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: LD_INT 32
22491: PUSH
22492: LD_INT 3
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PPUSH
22503: CALL_OW 69
22507: ST_TO_ADDR
// if not tmp then
22508: LD_VAR 0 2
22512: NOT
22513: IFFALSE 22517
// exit ;
22515: GO 22546
// for i in tmp do
22517: LD_ADDR_VAR 0 1
22521: PUSH
22522: LD_VAR 0 2
22526: PUSH
22527: FOR_IN
22528: IFFALSE 22544
// begin SetLives ( i , 0 ) ;
22530: LD_VAR 0 1
22534: PPUSH
22535: LD_INT 0
22537: PPUSH
22538: CALL_OW 234
// end ;
22542: GO 22527
22544: POP
22545: POP
// end ;
22546: PPOPN 2
22548: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22549: LD_EXP 55
22553: PUSH
22554: LD_EXP 58
22558: AND
22559: IFFALSE 22652
22561: GO 22563
22563: DISABLE
22564: LD_INT 0
22566: PPUSH
// begin enable ;
22567: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22568: LD_ADDR_VAR 0 1
22572: PUSH
22573: LD_INT 22
22575: PUSH
22576: LD_OWVAR 2
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 2
22587: PUSH
22588: LD_INT 25
22590: PUSH
22591: LD_INT 5
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 25
22600: PUSH
22601: LD_INT 9
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 25
22610: PUSH
22611: LD_INT 8
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: PPUSH
22628: CALL_OW 69
22632: PUSH
22633: FOR_IN
22634: IFFALSE 22650
// begin SetClass ( i , 1 ) ;
22636: LD_VAR 0 1
22640: PPUSH
22641: LD_INT 1
22643: PPUSH
22644: CALL_OW 336
// end ;
22648: GO 22633
22650: POP
22651: POP
// end ;
22652: PPOPN 1
22654: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22655: LD_EXP 55
22659: PUSH
22660: LD_EXP 59
22664: AND
22665: PUSH
22666: LD_OWVAR 65
22670: PUSH
22671: LD_INT 7
22673: LESS
22674: AND
22675: IFFALSE 22689
22677: GO 22679
22679: DISABLE
// begin enable ;
22680: ENABLE
// game_speed := 7 ;
22681: LD_ADDR_OWVAR 65
22685: PUSH
22686: LD_INT 7
22688: ST_TO_ADDR
// end ;
22689: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22690: LD_EXP 55
22694: PUSH
22695: LD_EXP 62
22699: AND
22700: IFFALSE 22902
22702: GO 22704
22704: DISABLE
22705: LD_INT 0
22707: PPUSH
22708: PPUSH
22709: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22710: LD_ADDR_VAR 0 3
22714: PUSH
22715: LD_INT 81
22717: PUSH
22718: LD_OWVAR 2
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 21
22729: PUSH
22730: LD_INT 1
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PPUSH
22741: CALL_OW 69
22745: ST_TO_ADDR
// if not tmp then
22746: LD_VAR 0 3
22750: NOT
22751: IFFALSE 22755
// exit ;
22753: GO 22902
// if tmp > 5 then
22755: LD_VAR 0 3
22759: PUSH
22760: LD_INT 5
22762: GREATER
22763: IFFALSE 22775
// k := 5 else
22765: LD_ADDR_VAR 0 2
22769: PUSH
22770: LD_INT 5
22772: ST_TO_ADDR
22773: GO 22785
// k := tmp ;
22775: LD_ADDR_VAR 0 2
22779: PUSH
22780: LD_VAR 0 3
22784: ST_TO_ADDR
// for i := 1 to k do
22785: LD_ADDR_VAR 0 1
22789: PUSH
22790: DOUBLE
22791: LD_INT 1
22793: DEC
22794: ST_TO_ADDR
22795: LD_VAR 0 2
22799: PUSH
22800: FOR_TO
22801: IFFALSE 22900
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22803: LD_VAR 0 3
22807: PUSH
22808: LD_VAR 0 1
22812: ARRAY
22813: PPUSH
22814: LD_VAR 0 1
22818: PUSH
22819: LD_INT 4
22821: MOD
22822: PUSH
22823: LD_INT 1
22825: PLUS
22826: PPUSH
22827: CALL_OW 259
22831: PUSH
22832: LD_INT 10
22834: LESS
22835: IFFALSE 22898
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22837: LD_VAR 0 3
22841: PUSH
22842: LD_VAR 0 1
22846: ARRAY
22847: PPUSH
22848: LD_VAR 0 1
22852: PUSH
22853: LD_INT 4
22855: MOD
22856: PUSH
22857: LD_INT 1
22859: PLUS
22860: PPUSH
22861: LD_VAR 0 3
22865: PUSH
22866: LD_VAR 0 1
22870: ARRAY
22871: PPUSH
22872: LD_VAR 0 1
22876: PUSH
22877: LD_INT 4
22879: MOD
22880: PUSH
22881: LD_INT 1
22883: PLUS
22884: PPUSH
22885: CALL_OW 259
22889: PUSH
22890: LD_INT 1
22892: PLUS
22893: PPUSH
22894: CALL_OW 237
22898: GO 22800
22900: POP
22901: POP
// end ;
22902: PPOPN 3
22904: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22905: LD_EXP 55
22909: PUSH
22910: LD_EXP 63
22914: AND
22915: IFFALSE 22935
22917: GO 22919
22919: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22920: LD_INT 4
22922: PPUSH
22923: LD_OWVAR 2
22927: PPUSH
22928: LD_INT 0
22930: PPUSH
22931: CALL_OW 324
22935: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22936: LD_EXP 55
22940: PUSH
22941: LD_EXP 92
22945: AND
22946: IFFALSE 22966
22948: GO 22950
22950: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22951: LD_INT 19
22953: PPUSH
22954: LD_OWVAR 2
22958: PPUSH
22959: LD_INT 0
22961: PPUSH
22962: CALL_OW 324
22966: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22967: LD_EXP 55
22971: PUSH
22972: LD_EXP 64
22976: AND
22977: IFFALSE 23079
22979: GO 22981
22981: DISABLE
22982: LD_INT 0
22984: PPUSH
22985: PPUSH
// begin enable ;
22986: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22987: LD_ADDR_VAR 0 2
22991: PUSH
22992: LD_INT 22
22994: PUSH
22995: LD_OWVAR 2
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: PUSH
23004: LD_INT 2
23006: PUSH
23007: LD_INT 34
23009: PUSH
23010: LD_INT 11
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: LD_INT 34
23019: PUSH
23020: LD_INT 30
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: LIST
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PPUSH
23036: CALL_OW 69
23040: ST_TO_ADDR
// if not tmp then
23041: LD_VAR 0 2
23045: NOT
23046: IFFALSE 23050
// exit ;
23048: GO 23079
// for i in tmp do
23050: LD_ADDR_VAR 0 1
23054: PUSH
23055: LD_VAR 0 2
23059: PUSH
23060: FOR_IN
23061: IFFALSE 23077
// begin SetLives ( i , 0 ) ;
23063: LD_VAR 0 1
23067: PPUSH
23068: LD_INT 0
23070: PPUSH
23071: CALL_OW 234
// end ;
23075: GO 23060
23077: POP
23078: POP
// end ;
23079: PPOPN 2
23081: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23082: LD_EXP 55
23086: PUSH
23087: LD_EXP 65
23091: AND
23092: IFFALSE 23112
23094: GO 23096
23096: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23097: LD_INT 32
23099: PPUSH
23100: LD_OWVAR 2
23104: PPUSH
23105: LD_INT 0
23107: PPUSH
23108: CALL_OW 324
23112: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23113: LD_EXP 55
23117: PUSH
23118: LD_EXP 66
23122: AND
23123: IFFALSE 23304
23125: GO 23127
23127: DISABLE
23128: LD_INT 0
23130: PPUSH
23131: PPUSH
23132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23133: LD_ADDR_VAR 0 2
23137: PUSH
23138: LD_INT 22
23140: PUSH
23141: LD_OWVAR 2
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 33
23152: PUSH
23153: LD_INT 3
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PPUSH
23164: CALL_OW 69
23168: ST_TO_ADDR
// if not tmp then
23169: LD_VAR 0 2
23173: NOT
23174: IFFALSE 23178
// exit ;
23176: GO 23304
// side := 0 ;
23178: LD_ADDR_VAR 0 3
23182: PUSH
23183: LD_INT 0
23185: ST_TO_ADDR
// for i := 1 to 8 do
23186: LD_ADDR_VAR 0 1
23190: PUSH
23191: DOUBLE
23192: LD_INT 1
23194: DEC
23195: ST_TO_ADDR
23196: LD_INT 8
23198: PUSH
23199: FOR_TO
23200: IFFALSE 23248
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23202: LD_OWVAR 2
23206: PUSH
23207: LD_VAR 0 1
23211: NONEQUAL
23212: PUSH
23213: LD_OWVAR 2
23217: PPUSH
23218: LD_VAR 0 1
23222: PPUSH
23223: CALL_OW 81
23227: PUSH
23228: LD_INT 2
23230: EQUAL
23231: AND
23232: IFFALSE 23246
// begin side := i ;
23234: LD_ADDR_VAR 0 3
23238: PUSH
23239: LD_VAR 0 1
23243: ST_TO_ADDR
// break ;
23244: GO 23248
// end ;
23246: GO 23199
23248: POP
23249: POP
// if not side then
23250: LD_VAR 0 3
23254: NOT
23255: IFFALSE 23259
// exit ;
23257: GO 23304
// for i := 1 to tmp do
23259: LD_ADDR_VAR 0 1
23263: PUSH
23264: DOUBLE
23265: LD_INT 1
23267: DEC
23268: ST_TO_ADDR
23269: LD_VAR 0 2
23273: PUSH
23274: FOR_TO
23275: IFFALSE 23302
// if Prob ( 60 ) then
23277: LD_INT 60
23279: PPUSH
23280: CALL_OW 13
23284: IFFALSE 23300
// SetSide ( i , side ) ;
23286: LD_VAR 0 1
23290: PPUSH
23291: LD_VAR 0 3
23295: PPUSH
23296: CALL_OW 235
23300: GO 23274
23302: POP
23303: POP
// end ;
23304: PPOPN 3
23306: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23307: LD_EXP 55
23311: PUSH
23312: LD_EXP 68
23316: AND
23317: IFFALSE 23436
23319: GO 23321
23321: DISABLE
23322: LD_INT 0
23324: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23325: LD_ADDR_VAR 0 1
23329: PUSH
23330: LD_INT 22
23332: PUSH
23333: LD_OWVAR 2
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 21
23344: PUSH
23345: LD_INT 1
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: PUSH
23352: LD_INT 3
23354: PUSH
23355: LD_INT 23
23357: PUSH
23358: LD_INT 0
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: LIST
23373: PPUSH
23374: CALL_OW 69
23378: PUSH
23379: FOR_IN
23380: IFFALSE 23434
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23382: LD_VAR 0 1
23386: PPUSH
23387: CALL_OW 257
23391: PUSH
23392: LD_INT 1
23394: PUSH
23395: LD_INT 2
23397: PUSH
23398: LD_INT 3
23400: PUSH
23401: LD_INT 4
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: IN
23410: IFFALSE 23432
// SetClass ( un , rand ( 1 , 4 ) ) ;
23412: LD_VAR 0 1
23416: PPUSH
23417: LD_INT 1
23419: PPUSH
23420: LD_INT 4
23422: PPUSH
23423: CALL_OW 12
23427: PPUSH
23428: CALL_OW 336
23432: GO 23379
23434: POP
23435: POP
// end ;
23436: PPOPN 1
23438: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23439: LD_EXP 55
23443: PUSH
23444: LD_EXP 67
23448: AND
23449: IFFALSE 23528
23451: GO 23453
23453: DISABLE
23454: LD_INT 0
23456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23457: LD_ADDR_VAR 0 1
23461: PUSH
23462: LD_INT 22
23464: PUSH
23465: LD_OWVAR 2
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 21
23476: PUSH
23477: LD_INT 3
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PPUSH
23488: CALL_OW 69
23492: ST_TO_ADDR
// if not tmp then
23493: LD_VAR 0 1
23497: NOT
23498: IFFALSE 23502
// exit ;
23500: GO 23528
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23502: LD_VAR 0 1
23506: PUSH
23507: LD_INT 1
23509: PPUSH
23510: LD_VAR 0 1
23514: PPUSH
23515: CALL_OW 12
23519: ARRAY
23520: PPUSH
23521: LD_INT 100
23523: PPUSH
23524: CALL_OW 234
// end ;
23528: PPOPN 1
23530: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23531: LD_EXP 55
23535: PUSH
23536: LD_EXP 69
23540: AND
23541: IFFALSE 23639
23543: GO 23545
23545: DISABLE
23546: LD_INT 0
23548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23549: LD_ADDR_VAR 0 1
23553: PUSH
23554: LD_INT 22
23556: PUSH
23557: LD_OWVAR 2
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 21
23568: PUSH
23569: LD_INT 1
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: PPUSH
23580: CALL_OW 69
23584: ST_TO_ADDR
// if not tmp then
23585: LD_VAR 0 1
23589: NOT
23590: IFFALSE 23594
// exit ;
23592: GO 23639
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23594: LD_VAR 0 1
23598: PUSH
23599: LD_INT 1
23601: PPUSH
23602: LD_VAR 0 1
23606: PPUSH
23607: CALL_OW 12
23611: ARRAY
23612: PPUSH
23613: LD_INT 1
23615: PPUSH
23616: LD_INT 4
23618: PPUSH
23619: CALL_OW 12
23623: PPUSH
23624: LD_INT 3000
23626: PPUSH
23627: LD_INT 9000
23629: PPUSH
23630: CALL_OW 12
23634: PPUSH
23635: CALL_OW 492
// end ;
23639: PPOPN 1
23641: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23642: LD_EXP 55
23646: PUSH
23647: LD_EXP 70
23651: AND
23652: IFFALSE 23672
23654: GO 23656
23656: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23657: LD_INT 1
23659: PPUSH
23660: LD_OWVAR 2
23664: PPUSH
23665: LD_INT 0
23667: PPUSH
23668: CALL_OW 324
23672: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23673: LD_EXP 55
23677: PUSH
23678: LD_EXP 71
23682: AND
23683: IFFALSE 23766
23685: GO 23687
23687: DISABLE
23688: LD_INT 0
23690: PPUSH
23691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23692: LD_ADDR_VAR 0 2
23696: PUSH
23697: LD_INT 22
23699: PUSH
23700: LD_OWVAR 2
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 21
23711: PUSH
23712: LD_INT 3
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: PPUSH
23723: CALL_OW 69
23727: ST_TO_ADDR
// if not tmp then
23728: LD_VAR 0 2
23732: NOT
23733: IFFALSE 23737
// exit ;
23735: GO 23766
// for i in tmp do
23737: LD_ADDR_VAR 0 1
23741: PUSH
23742: LD_VAR 0 2
23746: PUSH
23747: FOR_IN
23748: IFFALSE 23764
// SetBLevel ( i , 10 ) ;
23750: LD_VAR 0 1
23754: PPUSH
23755: LD_INT 10
23757: PPUSH
23758: CALL_OW 241
23762: GO 23747
23764: POP
23765: POP
// end ;
23766: PPOPN 2
23768: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23769: LD_EXP 55
23773: PUSH
23774: LD_EXP 72
23778: AND
23779: IFFALSE 23890
23781: GO 23783
23783: DISABLE
23784: LD_INT 0
23786: PPUSH
23787: PPUSH
23788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23789: LD_ADDR_VAR 0 3
23793: PUSH
23794: LD_INT 22
23796: PUSH
23797: LD_OWVAR 2
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: LD_INT 25
23808: PUSH
23809: LD_INT 1
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PPUSH
23820: CALL_OW 69
23824: ST_TO_ADDR
// if not tmp then
23825: LD_VAR 0 3
23829: NOT
23830: IFFALSE 23834
// exit ;
23832: GO 23890
// un := tmp [ rand ( 1 , tmp ) ] ;
23834: LD_ADDR_VAR 0 2
23838: PUSH
23839: LD_VAR 0 3
23843: PUSH
23844: LD_INT 1
23846: PPUSH
23847: LD_VAR 0 3
23851: PPUSH
23852: CALL_OW 12
23856: ARRAY
23857: ST_TO_ADDR
// if Crawls ( un ) then
23858: LD_VAR 0 2
23862: PPUSH
23863: CALL_OW 318
23867: IFFALSE 23878
// ComWalk ( un ) ;
23869: LD_VAR 0 2
23873: PPUSH
23874: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23878: LD_VAR 0 2
23882: PPUSH
23883: LD_INT 5
23885: PPUSH
23886: CALL_OW 336
// end ;
23890: PPOPN 3
23892: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
23893: LD_EXP 55
23897: PUSH
23898: LD_EXP 73
23902: AND
23903: PUSH
23904: LD_OWVAR 67
23908: PUSH
23909: LD_INT 4
23911: LESS
23912: AND
23913: IFFALSE 23932
23915: GO 23917
23917: DISABLE
// begin Difficulty := Difficulty + 1 ;
23918: LD_ADDR_OWVAR 67
23922: PUSH
23923: LD_OWVAR 67
23927: PUSH
23928: LD_INT 1
23930: PLUS
23931: ST_TO_ADDR
// end ;
23932: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23933: LD_EXP 55
23937: PUSH
23938: LD_EXP 74
23942: AND
23943: IFFALSE 24046
23945: GO 23947
23947: DISABLE
23948: LD_INT 0
23950: PPUSH
// begin for i := 1 to 5 do
23951: LD_ADDR_VAR 0 1
23955: PUSH
23956: DOUBLE
23957: LD_INT 1
23959: DEC
23960: ST_TO_ADDR
23961: LD_INT 5
23963: PUSH
23964: FOR_TO
23965: IFFALSE 24044
// begin uc_nation := nation_nature ;
23967: LD_ADDR_OWVAR 21
23971: PUSH
23972: LD_INT 0
23974: ST_TO_ADDR
// uc_side := 0 ;
23975: LD_ADDR_OWVAR 20
23979: PUSH
23980: LD_INT 0
23982: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23983: LD_ADDR_OWVAR 29
23987: PUSH
23988: LD_INT 12
23990: PUSH
23991: LD_INT 12
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: ST_TO_ADDR
// hc_agressivity := 20 ;
23998: LD_ADDR_OWVAR 35
24002: PUSH
24003: LD_INT 20
24005: ST_TO_ADDR
// hc_class := class_tiger ;
24006: LD_ADDR_OWVAR 28
24010: PUSH
24011: LD_INT 14
24013: ST_TO_ADDR
// hc_gallery :=  ;
24014: LD_ADDR_OWVAR 33
24018: PUSH
24019: LD_STRING 
24021: ST_TO_ADDR
// hc_name :=  ;
24022: LD_ADDR_OWVAR 26
24026: PUSH
24027: LD_STRING 
24029: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24030: CALL_OW 44
24034: PPUSH
24035: LD_INT 0
24037: PPUSH
24038: CALL_OW 51
// end ;
24042: GO 23964
24044: POP
24045: POP
// end ;
24046: PPOPN 1
24048: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24049: LD_EXP 55
24053: PUSH
24054: LD_EXP 75
24058: AND
24059: IFFALSE 24068
24061: GO 24063
24063: DISABLE
// StreamSibBomb ;
24064: CALL 24069 0 0
24068: END
// export function StreamSibBomb ; var i , x , y ; begin
24069: LD_INT 0
24071: PPUSH
24072: PPUSH
24073: PPUSH
24074: PPUSH
// result := false ;
24075: LD_ADDR_VAR 0 1
24079: PUSH
24080: LD_INT 0
24082: ST_TO_ADDR
// for i := 1 to 16 do
24083: LD_ADDR_VAR 0 2
24087: PUSH
24088: DOUBLE
24089: LD_INT 1
24091: DEC
24092: ST_TO_ADDR
24093: LD_INT 16
24095: PUSH
24096: FOR_TO
24097: IFFALSE 24296
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24099: LD_ADDR_VAR 0 3
24103: PUSH
24104: LD_INT 10
24106: PUSH
24107: LD_INT 20
24109: PUSH
24110: LD_INT 30
24112: PUSH
24113: LD_INT 40
24115: PUSH
24116: LD_INT 50
24118: PUSH
24119: LD_INT 60
24121: PUSH
24122: LD_INT 70
24124: PUSH
24125: LD_INT 80
24127: PUSH
24128: LD_INT 90
24130: PUSH
24131: LD_INT 100
24133: PUSH
24134: LD_INT 110
24136: PUSH
24137: LD_INT 120
24139: PUSH
24140: LD_INT 130
24142: PUSH
24143: LD_INT 140
24145: PUSH
24146: LD_INT 150
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 1
24168: PPUSH
24169: LD_INT 15
24171: PPUSH
24172: CALL_OW 12
24176: ARRAY
24177: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24178: LD_ADDR_VAR 0 4
24182: PUSH
24183: LD_INT 10
24185: PUSH
24186: LD_INT 20
24188: PUSH
24189: LD_INT 30
24191: PUSH
24192: LD_INT 40
24194: PUSH
24195: LD_INT 50
24197: PUSH
24198: LD_INT 60
24200: PUSH
24201: LD_INT 70
24203: PUSH
24204: LD_INT 80
24206: PUSH
24207: LD_INT 90
24209: PUSH
24210: LD_INT 100
24212: PUSH
24213: LD_INT 110
24215: PUSH
24216: LD_INT 120
24218: PUSH
24219: LD_INT 130
24221: PUSH
24222: LD_INT 140
24224: PUSH
24225: LD_INT 150
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 1
24247: PPUSH
24248: LD_INT 15
24250: PPUSH
24251: CALL_OW 12
24255: ARRAY
24256: ST_TO_ADDR
// if ValidHex ( x , y ) then
24257: LD_VAR 0 3
24261: PPUSH
24262: LD_VAR 0 4
24266: PPUSH
24267: CALL_OW 488
24271: IFFALSE 24294
// begin result := [ x , y ] ;
24273: LD_ADDR_VAR 0 1
24277: PUSH
24278: LD_VAR 0 3
24282: PUSH
24283: LD_VAR 0 4
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: ST_TO_ADDR
// break ;
24292: GO 24296
// end ; end ;
24294: GO 24096
24296: POP
24297: POP
// if result then
24298: LD_VAR 0 1
24302: IFFALSE 24362
// begin ToLua ( playSibBomb() ) ;
24304: LD_STRING playSibBomb()
24306: PPUSH
24307: CALL_OW 559
// wait ( 0 0$14 ) ;
24311: LD_INT 490
24313: PPUSH
24314: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24318: LD_VAR 0 1
24322: PUSH
24323: LD_INT 1
24325: ARRAY
24326: PPUSH
24327: LD_VAR 0 1
24331: PUSH
24332: LD_INT 2
24334: ARRAY
24335: PPUSH
24336: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24340: LD_VAR 0 1
24344: PUSH
24345: LD_INT 1
24347: ARRAY
24348: PPUSH
24349: LD_VAR 0 1
24353: PUSH
24354: LD_INT 2
24356: ARRAY
24357: PPUSH
24358: CALL_OW 429
// end ; end ;
24362: LD_VAR 0 1
24366: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24367: LD_EXP 55
24371: PUSH
24372: LD_EXP 77
24376: AND
24377: IFFALSE 24389
24379: GO 24381
24381: DISABLE
// YouLost (  ) ;
24382: LD_STRING 
24384: PPUSH
24385: CALL_OW 104
24389: END
// every 0 0$1 trigger StreamModeActive and sFog do
24390: LD_EXP 55
24394: PUSH
24395: LD_EXP 76
24399: AND
24400: IFFALSE 24414
24402: GO 24404
24404: DISABLE
// FogOff ( your_side ) ;
24405: LD_OWVAR 2
24409: PPUSH
24410: CALL_OW 344
24414: END
// every 0 0$1 trigger StreamModeActive and sSun do
24415: LD_EXP 55
24419: PUSH
24420: LD_EXP 78
24424: AND
24425: IFFALSE 24453
24427: GO 24429
24429: DISABLE
// begin solar_recharge_percent := 0 ;
24430: LD_ADDR_OWVAR 79
24434: PUSH
24435: LD_INT 0
24437: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24438: LD_INT 10500
24440: PPUSH
24441: CALL_OW 67
// solar_recharge_percent := 100 ;
24445: LD_ADDR_OWVAR 79
24449: PUSH
24450: LD_INT 100
24452: ST_TO_ADDR
// end ;
24453: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24454: LD_EXP 55
24458: PUSH
24459: LD_EXP 79
24463: AND
24464: IFFALSE 24703
24466: GO 24468
24468: DISABLE
24469: LD_INT 0
24471: PPUSH
24472: PPUSH
24473: PPUSH
// begin tmp := [ ] ;
24474: LD_ADDR_VAR 0 3
24478: PUSH
24479: EMPTY
24480: ST_TO_ADDR
// for i := 1 to 6 do
24481: LD_ADDR_VAR 0 1
24485: PUSH
24486: DOUBLE
24487: LD_INT 1
24489: DEC
24490: ST_TO_ADDR
24491: LD_INT 6
24493: PUSH
24494: FOR_TO
24495: IFFALSE 24600
// begin uc_nation := nation_nature ;
24497: LD_ADDR_OWVAR 21
24501: PUSH
24502: LD_INT 0
24504: ST_TO_ADDR
// uc_side := 0 ;
24505: LD_ADDR_OWVAR 20
24509: PUSH
24510: LD_INT 0
24512: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24513: LD_ADDR_OWVAR 29
24517: PUSH
24518: LD_INT 12
24520: PUSH
24521: LD_INT 12
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: ST_TO_ADDR
// hc_agressivity := 20 ;
24528: LD_ADDR_OWVAR 35
24532: PUSH
24533: LD_INT 20
24535: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24536: LD_ADDR_OWVAR 28
24540: PUSH
24541: LD_INT 17
24543: ST_TO_ADDR
// hc_gallery :=  ;
24544: LD_ADDR_OWVAR 33
24548: PUSH
24549: LD_STRING 
24551: ST_TO_ADDR
// hc_name :=  ;
24552: LD_ADDR_OWVAR 26
24556: PUSH
24557: LD_STRING 
24559: ST_TO_ADDR
// un := CreateHuman ;
24560: LD_ADDR_VAR 0 2
24564: PUSH
24565: CALL_OW 44
24569: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24570: LD_VAR 0 2
24574: PPUSH
24575: LD_INT 1
24577: PPUSH
24578: CALL_OW 51
// tmp := tmp ^ un ;
24582: LD_ADDR_VAR 0 3
24586: PUSH
24587: LD_VAR 0 3
24591: PUSH
24592: LD_VAR 0 2
24596: ADD
24597: ST_TO_ADDR
// end ;
24598: GO 24494
24600: POP
24601: POP
// repeat wait ( 0 0$1 ) ;
24602: LD_INT 35
24604: PPUSH
24605: CALL_OW 67
// for un in tmp do
24609: LD_ADDR_VAR 0 2
24613: PUSH
24614: LD_VAR 0 3
24618: PUSH
24619: FOR_IN
24620: IFFALSE 24694
// begin if IsDead ( un ) then
24622: LD_VAR 0 2
24626: PPUSH
24627: CALL_OW 301
24631: IFFALSE 24651
// begin tmp := tmp diff un ;
24633: LD_ADDR_VAR 0 3
24637: PUSH
24638: LD_VAR 0 3
24642: PUSH
24643: LD_VAR 0 2
24647: DIFF
24648: ST_TO_ADDR
// continue ;
24649: GO 24619
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24651: LD_VAR 0 2
24655: PPUSH
24656: LD_INT 3
24658: PUSH
24659: LD_INT 22
24661: PUSH
24662: LD_INT 0
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PPUSH
24673: CALL_OW 69
24677: PPUSH
24678: LD_VAR 0 2
24682: PPUSH
24683: CALL_OW 74
24687: PPUSH
24688: CALL_OW 115
// end ;
24692: GO 24619
24694: POP
24695: POP
// until not tmp ;
24696: LD_VAR 0 3
24700: NOT
24701: IFFALSE 24602
// end ;
24703: PPOPN 3
24705: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24706: LD_EXP 55
24710: PUSH
24711: LD_EXP 80
24715: AND
24716: IFFALSE 24770
24718: GO 24720
24720: DISABLE
// begin ToLua ( displayTroll(); ) ;
24721: LD_STRING displayTroll();
24723: PPUSH
24724: CALL_OW 559
// wait ( 3 3$00 ) ;
24728: LD_INT 6300
24730: PPUSH
24731: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24735: LD_STRING hideTroll();
24737: PPUSH
24738: CALL_OW 559
// wait ( 1 1$00 ) ;
24742: LD_INT 2100
24744: PPUSH
24745: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24749: LD_STRING displayTroll();
24751: PPUSH
24752: CALL_OW 559
// wait ( 1 1$00 ) ;
24756: LD_INT 2100
24758: PPUSH
24759: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24763: LD_STRING hideTroll();
24765: PPUSH
24766: CALL_OW 559
// end ;
24770: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24771: LD_EXP 55
24775: PUSH
24776: LD_EXP 81
24780: AND
24781: IFFALSE 24844
24783: GO 24785
24785: DISABLE
24786: LD_INT 0
24788: PPUSH
// begin p := 0 ;
24789: LD_ADDR_VAR 0 1
24793: PUSH
24794: LD_INT 0
24796: ST_TO_ADDR
// repeat game_speed := 1 ;
24797: LD_ADDR_OWVAR 65
24801: PUSH
24802: LD_INT 1
24804: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24805: LD_INT 35
24807: PPUSH
24808: CALL_OW 67
// p := p + 1 ;
24812: LD_ADDR_VAR 0 1
24816: PUSH
24817: LD_VAR 0 1
24821: PUSH
24822: LD_INT 1
24824: PLUS
24825: ST_TO_ADDR
// until p >= 60 ;
24826: LD_VAR 0 1
24830: PUSH
24831: LD_INT 60
24833: GREATEREQUAL
24834: IFFALSE 24797
// game_speed := 4 ;
24836: LD_ADDR_OWVAR 65
24840: PUSH
24841: LD_INT 4
24843: ST_TO_ADDR
// end ;
24844: PPOPN 1
24846: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24847: LD_EXP 55
24851: PUSH
24852: LD_EXP 82
24856: AND
24857: IFFALSE 25003
24859: GO 24861
24861: DISABLE
24862: LD_INT 0
24864: PPUSH
24865: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24866: LD_ADDR_VAR 0 1
24870: PUSH
24871: LD_INT 22
24873: PUSH
24874: LD_OWVAR 2
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 2
24885: PUSH
24886: LD_INT 30
24888: PUSH
24889: LD_INT 0
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 30
24898: PUSH
24899: LD_INT 1
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: LIST
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PPUSH
24915: CALL_OW 69
24919: ST_TO_ADDR
// if not depot then
24920: LD_VAR 0 1
24924: NOT
24925: IFFALSE 24929
// exit ;
24927: GO 25003
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24929: LD_ADDR_VAR 0 2
24933: PUSH
24934: LD_VAR 0 1
24938: PUSH
24939: LD_INT 1
24941: PPUSH
24942: LD_VAR 0 1
24946: PPUSH
24947: CALL_OW 12
24951: ARRAY
24952: PPUSH
24953: CALL_OW 274
24957: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24958: LD_VAR 0 2
24962: PPUSH
24963: LD_INT 1
24965: PPUSH
24966: LD_INT 0
24968: PPUSH
24969: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24973: LD_VAR 0 2
24977: PPUSH
24978: LD_INT 2
24980: PPUSH
24981: LD_INT 0
24983: PPUSH
24984: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24988: LD_VAR 0 2
24992: PPUSH
24993: LD_INT 3
24995: PPUSH
24996: LD_INT 0
24998: PPUSH
24999: CALL_OW 277
// end ;
25003: PPOPN 2
25005: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25006: LD_EXP 55
25010: PUSH
25011: LD_EXP 83
25015: AND
25016: IFFALSE 25113
25018: GO 25020
25020: DISABLE
25021: LD_INT 0
25023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25024: LD_ADDR_VAR 0 1
25028: PUSH
25029: LD_INT 22
25031: PUSH
25032: LD_OWVAR 2
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 21
25043: PUSH
25044: LD_INT 1
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 3
25053: PUSH
25054: LD_INT 23
25056: PUSH
25057: LD_INT 0
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: LIST
25072: PPUSH
25073: CALL_OW 69
25077: ST_TO_ADDR
// if not tmp then
25078: LD_VAR 0 1
25082: NOT
25083: IFFALSE 25087
// exit ;
25085: GO 25113
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25087: LD_VAR 0 1
25091: PUSH
25092: LD_INT 1
25094: PPUSH
25095: LD_VAR 0 1
25099: PPUSH
25100: CALL_OW 12
25104: ARRAY
25105: PPUSH
25106: LD_INT 200
25108: PPUSH
25109: CALL_OW 234
// end ;
25113: PPOPN 1
25115: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25116: LD_EXP 55
25120: PUSH
25121: LD_EXP 84
25125: AND
25126: IFFALSE 25205
25128: GO 25130
25130: DISABLE
25131: LD_INT 0
25133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25134: LD_ADDR_VAR 0 1
25138: PUSH
25139: LD_INT 22
25141: PUSH
25142: LD_OWVAR 2
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 21
25153: PUSH
25154: LD_INT 2
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PPUSH
25165: CALL_OW 69
25169: ST_TO_ADDR
// if not tmp then
25170: LD_VAR 0 1
25174: NOT
25175: IFFALSE 25179
// exit ;
25177: GO 25205
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25179: LD_VAR 0 1
25183: PUSH
25184: LD_INT 1
25186: PPUSH
25187: LD_VAR 0 1
25191: PPUSH
25192: CALL_OW 12
25196: ARRAY
25197: PPUSH
25198: LD_INT 60
25200: PPUSH
25201: CALL_OW 234
// end ;
25205: PPOPN 1
25207: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25208: LD_EXP 55
25212: PUSH
25213: LD_EXP 85
25217: AND
25218: IFFALSE 25317
25220: GO 25222
25222: DISABLE
25223: LD_INT 0
25225: PPUSH
25226: PPUSH
// begin enable ;
25227: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25228: LD_ADDR_VAR 0 1
25232: PUSH
25233: LD_INT 22
25235: PUSH
25236: LD_OWVAR 2
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 61
25247: PUSH
25248: EMPTY
25249: LIST
25250: PUSH
25251: LD_INT 33
25253: PUSH
25254: LD_INT 2
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: LIST
25265: PPUSH
25266: CALL_OW 69
25270: ST_TO_ADDR
// if not tmp then
25271: LD_VAR 0 1
25275: NOT
25276: IFFALSE 25280
// exit ;
25278: GO 25317
// for i in tmp do
25280: LD_ADDR_VAR 0 2
25284: PUSH
25285: LD_VAR 0 1
25289: PUSH
25290: FOR_IN
25291: IFFALSE 25315
// if IsControledBy ( i ) then
25293: LD_VAR 0 2
25297: PPUSH
25298: CALL_OW 312
25302: IFFALSE 25313
// ComUnlink ( i ) ;
25304: LD_VAR 0 2
25308: PPUSH
25309: CALL_OW 136
25313: GO 25290
25315: POP
25316: POP
// end ;
25317: PPOPN 2
25319: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25320: LD_EXP 55
25324: PUSH
25325: LD_EXP 86
25329: AND
25330: IFFALSE 25470
25332: GO 25334
25334: DISABLE
25335: LD_INT 0
25337: PPUSH
25338: PPUSH
// begin ToLua ( displayPowell(); ) ;
25339: LD_STRING displayPowell();
25341: PPUSH
25342: CALL_OW 559
// uc_side := 0 ;
25346: LD_ADDR_OWVAR 20
25350: PUSH
25351: LD_INT 0
25353: ST_TO_ADDR
// uc_nation := 2 ;
25354: LD_ADDR_OWVAR 21
25358: PUSH
25359: LD_INT 2
25361: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25362: LD_ADDR_OWVAR 37
25366: PUSH
25367: LD_INT 14
25369: ST_TO_ADDR
// vc_engine := engine_siberite ;
25370: LD_ADDR_OWVAR 39
25374: PUSH
25375: LD_INT 3
25377: ST_TO_ADDR
// vc_control := control_apeman ;
25378: LD_ADDR_OWVAR 38
25382: PUSH
25383: LD_INT 5
25385: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25386: LD_ADDR_OWVAR 40
25390: PUSH
25391: LD_INT 29
25393: ST_TO_ADDR
// un := CreateVehicle ;
25394: LD_ADDR_VAR 0 2
25398: PUSH
25399: CALL_OW 45
25403: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25404: LD_VAR 0 2
25408: PPUSH
25409: LD_INT 1
25411: PPUSH
25412: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25416: LD_INT 35
25418: PPUSH
25419: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25423: LD_VAR 0 2
25427: PPUSH
25428: LD_INT 22
25430: PUSH
25431: LD_OWVAR 2
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PPUSH
25440: CALL_OW 69
25444: PPUSH
25445: LD_VAR 0 2
25449: PPUSH
25450: CALL_OW 74
25454: PPUSH
25455: CALL_OW 115
// until IsDead ( un ) ;
25459: LD_VAR 0 2
25463: PPUSH
25464: CALL_OW 301
25468: IFFALSE 25416
// end ;
25470: PPOPN 2
25472: END
// every 0 0$1 trigger StreamModeActive and sStu do
25473: LD_EXP 55
25477: PUSH
25478: LD_EXP 94
25482: AND
25483: IFFALSE 25499
25485: GO 25487
25487: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25488: LD_STRING displayStucuk();
25490: PPUSH
25491: CALL_OW 559
// ResetFog ;
25495: CALL_OW 335
// end ;
25499: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25500: LD_EXP 55
25504: PUSH
25505: LD_EXP 87
25509: AND
25510: IFFALSE 25651
25512: GO 25514
25514: DISABLE
25515: LD_INT 0
25517: PPUSH
25518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25519: LD_ADDR_VAR 0 2
25523: PUSH
25524: LD_INT 22
25526: PUSH
25527: LD_OWVAR 2
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 21
25538: PUSH
25539: LD_INT 1
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PPUSH
25550: CALL_OW 69
25554: ST_TO_ADDR
// if not tmp then
25555: LD_VAR 0 2
25559: NOT
25560: IFFALSE 25564
// exit ;
25562: GO 25651
// un := tmp [ rand ( 1 , tmp ) ] ;
25564: LD_ADDR_VAR 0 1
25568: PUSH
25569: LD_VAR 0 2
25573: PUSH
25574: LD_INT 1
25576: PPUSH
25577: LD_VAR 0 2
25581: PPUSH
25582: CALL_OW 12
25586: ARRAY
25587: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25588: LD_VAR 0 1
25592: PPUSH
25593: LD_INT 0
25595: PPUSH
25596: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25600: LD_VAR 0 1
25604: PPUSH
25605: LD_OWVAR 3
25609: PUSH
25610: LD_VAR 0 1
25614: DIFF
25615: PPUSH
25616: LD_VAR 0 1
25620: PPUSH
25621: CALL_OW 74
25625: PPUSH
25626: CALL_OW 115
// wait ( 0 0$20 ) ;
25630: LD_INT 700
25632: PPUSH
25633: CALL_OW 67
// SetSide ( un , your_side ) ;
25637: LD_VAR 0 1
25641: PPUSH
25642: LD_OWVAR 2
25646: PPUSH
25647: CALL_OW 235
// end ;
25651: PPOPN 2
25653: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25654: LD_EXP 55
25658: PUSH
25659: LD_EXP 88
25663: AND
25664: IFFALSE 25770
25666: GO 25668
25668: DISABLE
25669: LD_INT 0
25671: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25672: LD_ADDR_VAR 0 1
25676: PUSH
25677: LD_INT 22
25679: PUSH
25680: LD_OWVAR 2
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 2
25691: PUSH
25692: LD_INT 30
25694: PUSH
25695: LD_INT 0
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 30
25704: PUSH
25705: LD_INT 1
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: LIST
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PPUSH
25721: CALL_OW 69
25725: ST_TO_ADDR
// if not depot then
25726: LD_VAR 0 1
25730: NOT
25731: IFFALSE 25735
// exit ;
25733: GO 25770
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25735: LD_VAR 0 1
25739: PUSH
25740: LD_INT 1
25742: ARRAY
25743: PPUSH
25744: CALL_OW 250
25748: PPUSH
25749: LD_VAR 0 1
25753: PUSH
25754: LD_INT 1
25756: ARRAY
25757: PPUSH
25758: CALL_OW 251
25762: PPUSH
25763: LD_INT 70
25765: PPUSH
25766: CALL_OW 495
// end ;
25770: PPOPN 1
25772: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25773: LD_EXP 55
25777: PUSH
25778: LD_EXP 89
25782: AND
25783: IFFALSE 25994
25785: GO 25787
25787: DISABLE
25788: LD_INT 0
25790: PPUSH
25791: PPUSH
25792: PPUSH
25793: PPUSH
25794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25795: LD_ADDR_VAR 0 5
25799: PUSH
25800: LD_INT 22
25802: PUSH
25803: LD_OWVAR 2
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 21
25814: PUSH
25815: LD_INT 1
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PPUSH
25826: CALL_OW 69
25830: ST_TO_ADDR
// if not tmp then
25831: LD_VAR 0 5
25835: NOT
25836: IFFALSE 25840
// exit ;
25838: GO 25994
// for i in tmp do
25840: LD_ADDR_VAR 0 1
25844: PUSH
25845: LD_VAR 0 5
25849: PUSH
25850: FOR_IN
25851: IFFALSE 25992
// begin d := rand ( 0 , 5 ) ;
25853: LD_ADDR_VAR 0 4
25857: PUSH
25858: LD_INT 0
25860: PPUSH
25861: LD_INT 5
25863: PPUSH
25864: CALL_OW 12
25868: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25869: LD_ADDR_VAR 0 2
25873: PUSH
25874: LD_VAR 0 1
25878: PPUSH
25879: CALL_OW 250
25883: PPUSH
25884: LD_VAR 0 4
25888: PPUSH
25889: LD_INT 3
25891: PPUSH
25892: LD_INT 12
25894: PPUSH
25895: CALL_OW 12
25899: PPUSH
25900: CALL_OW 272
25904: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25905: LD_ADDR_VAR 0 3
25909: PUSH
25910: LD_VAR 0 1
25914: PPUSH
25915: CALL_OW 251
25919: PPUSH
25920: LD_VAR 0 4
25924: PPUSH
25925: LD_INT 3
25927: PPUSH
25928: LD_INT 12
25930: PPUSH
25931: CALL_OW 12
25935: PPUSH
25936: CALL_OW 273
25940: ST_TO_ADDR
// if ValidHex ( x , y ) then
25941: LD_VAR 0 2
25945: PPUSH
25946: LD_VAR 0 3
25950: PPUSH
25951: CALL_OW 488
25955: IFFALSE 25990
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25957: LD_VAR 0 1
25961: PPUSH
25962: LD_VAR 0 2
25966: PPUSH
25967: LD_VAR 0 3
25971: PPUSH
25972: LD_INT 3
25974: PPUSH
25975: LD_INT 6
25977: PPUSH
25978: CALL_OW 12
25982: PPUSH
25983: LD_INT 1
25985: PPUSH
25986: CALL_OW 483
// end ;
25990: GO 25850
25992: POP
25993: POP
// end ;
25994: PPOPN 5
25996: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25997: LD_EXP 55
26001: PUSH
26002: LD_EXP 90
26006: AND
26007: IFFALSE 26101
26009: GO 26011
26011: DISABLE
26012: LD_INT 0
26014: PPUSH
26015: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26016: LD_ADDR_VAR 0 2
26020: PUSH
26021: LD_INT 22
26023: PUSH
26024: LD_OWVAR 2
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 32
26035: PUSH
26036: LD_INT 1
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 21
26045: PUSH
26046: LD_INT 2
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: LIST
26057: PPUSH
26058: CALL_OW 69
26062: ST_TO_ADDR
// if not tmp then
26063: LD_VAR 0 2
26067: NOT
26068: IFFALSE 26072
// exit ;
26070: GO 26101
// for i in tmp do
26072: LD_ADDR_VAR 0 1
26076: PUSH
26077: LD_VAR 0 2
26081: PUSH
26082: FOR_IN
26083: IFFALSE 26099
// SetFuel ( i , 0 ) ;
26085: LD_VAR 0 1
26089: PPUSH
26090: LD_INT 0
26092: PPUSH
26093: CALL_OW 240
26097: GO 26082
26099: POP
26100: POP
// end ;
26101: PPOPN 2
26103: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26104: LD_EXP 55
26108: PUSH
26109: LD_EXP 91
26113: AND
26114: IFFALSE 26180
26116: GO 26118
26118: DISABLE
26119: LD_INT 0
26121: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26122: LD_ADDR_VAR 0 1
26126: PUSH
26127: LD_INT 22
26129: PUSH
26130: LD_OWVAR 2
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 30
26141: PUSH
26142: LD_INT 29
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PPUSH
26153: CALL_OW 69
26157: ST_TO_ADDR
// if not tmp then
26158: LD_VAR 0 1
26162: NOT
26163: IFFALSE 26167
// exit ;
26165: GO 26180
// DestroyUnit ( tmp [ 1 ] ) ;
26167: LD_VAR 0 1
26171: PUSH
26172: LD_INT 1
26174: ARRAY
26175: PPUSH
26176: CALL_OW 65
// end ;
26180: PPOPN 1
26182: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26183: LD_EXP 55
26187: PUSH
26188: LD_EXP 93
26192: AND
26193: IFFALSE 26322
26195: GO 26197
26197: DISABLE
26198: LD_INT 0
26200: PPUSH
// begin uc_side := 0 ;
26201: LD_ADDR_OWVAR 20
26205: PUSH
26206: LD_INT 0
26208: ST_TO_ADDR
// uc_nation := nation_arabian ;
26209: LD_ADDR_OWVAR 21
26213: PUSH
26214: LD_INT 2
26216: ST_TO_ADDR
// hc_gallery :=  ;
26217: LD_ADDR_OWVAR 33
26221: PUSH
26222: LD_STRING 
26224: ST_TO_ADDR
// hc_name :=  ;
26225: LD_ADDR_OWVAR 26
26229: PUSH
26230: LD_STRING 
26232: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26233: LD_INT 1
26235: PPUSH
26236: LD_INT 11
26238: PPUSH
26239: LD_INT 10
26241: PPUSH
26242: CALL_OW 380
// un := CreateHuman ;
26246: LD_ADDR_VAR 0 1
26250: PUSH
26251: CALL_OW 44
26255: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26256: LD_VAR 0 1
26260: PPUSH
26261: LD_INT 1
26263: PPUSH
26264: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26268: LD_INT 35
26270: PPUSH
26271: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26275: LD_VAR 0 1
26279: PPUSH
26280: LD_INT 22
26282: PUSH
26283: LD_OWVAR 2
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PPUSH
26292: CALL_OW 69
26296: PPUSH
26297: LD_VAR 0 1
26301: PPUSH
26302: CALL_OW 74
26306: PPUSH
26307: CALL_OW 115
// until IsDead ( un ) ;
26311: LD_VAR 0 1
26315: PPUSH
26316: CALL_OW 301
26320: IFFALSE 26268
// end ;
26322: PPOPN 1
26324: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26325: LD_EXP 55
26329: PUSH
26330: LD_EXP 95
26334: AND
26335: IFFALSE 26347
26337: GO 26339
26339: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26340: LD_STRING earthquake(getX(game), 0, 32)
26342: PPUSH
26343: CALL_OW 559
26347: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26348: LD_EXP 55
26352: PUSH
26353: LD_EXP 96
26357: AND
26358: IFFALSE 26449
26360: GO 26362
26362: DISABLE
26363: LD_INT 0
26365: PPUSH
// begin enable ;
26366: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26367: LD_ADDR_VAR 0 1
26371: PUSH
26372: LD_INT 22
26374: PUSH
26375: LD_OWVAR 2
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 21
26386: PUSH
26387: LD_INT 2
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 33
26396: PUSH
26397: LD_INT 3
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: LIST
26408: PPUSH
26409: CALL_OW 69
26413: ST_TO_ADDR
// if not tmp then
26414: LD_VAR 0 1
26418: NOT
26419: IFFALSE 26423
// exit ;
26421: GO 26449
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26423: LD_VAR 0 1
26427: PUSH
26428: LD_INT 1
26430: PPUSH
26431: LD_VAR 0 1
26435: PPUSH
26436: CALL_OW 12
26440: ARRAY
26441: PPUSH
26442: LD_INT 1
26444: PPUSH
26445: CALL_OW 234
// end ;
26449: PPOPN 1
26451: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26452: LD_EXP 55
26456: PUSH
26457: LD_EXP 97
26461: AND
26462: IFFALSE 26603
26464: GO 26466
26466: DISABLE
26467: LD_INT 0
26469: PPUSH
26470: PPUSH
26471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26472: LD_ADDR_VAR 0 3
26476: PUSH
26477: LD_INT 22
26479: PUSH
26480: LD_OWVAR 2
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 25
26491: PUSH
26492: LD_INT 1
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PPUSH
26503: CALL_OW 69
26507: ST_TO_ADDR
// if not tmp then
26508: LD_VAR 0 3
26512: NOT
26513: IFFALSE 26517
// exit ;
26515: GO 26603
// un := tmp [ rand ( 1 , tmp ) ] ;
26517: LD_ADDR_VAR 0 2
26521: PUSH
26522: LD_VAR 0 3
26526: PUSH
26527: LD_INT 1
26529: PPUSH
26530: LD_VAR 0 3
26534: PPUSH
26535: CALL_OW 12
26539: ARRAY
26540: ST_TO_ADDR
// if Crawls ( un ) then
26541: LD_VAR 0 2
26545: PPUSH
26546: CALL_OW 318
26550: IFFALSE 26561
// ComWalk ( un ) ;
26552: LD_VAR 0 2
26556: PPUSH
26557: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26561: LD_VAR 0 2
26565: PPUSH
26566: LD_INT 9
26568: PPUSH
26569: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26573: LD_INT 28
26575: PPUSH
26576: LD_OWVAR 2
26580: PPUSH
26581: LD_INT 2
26583: PPUSH
26584: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26588: LD_INT 29
26590: PPUSH
26591: LD_OWVAR 2
26595: PPUSH
26596: LD_INT 2
26598: PPUSH
26599: CALL_OW 322
// end ;
26603: PPOPN 3
26605: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26606: LD_EXP 55
26610: PUSH
26611: LD_EXP 98
26615: AND
26616: IFFALSE 26727
26618: GO 26620
26620: DISABLE
26621: LD_INT 0
26623: PPUSH
26624: PPUSH
26625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26626: LD_ADDR_VAR 0 3
26630: PUSH
26631: LD_INT 22
26633: PUSH
26634: LD_OWVAR 2
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 25
26645: PUSH
26646: LD_INT 1
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PPUSH
26657: CALL_OW 69
26661: ST_TO_ADDR
// if not tmp then
26662: LD_VAR 0 3
26666: NOT
26667: IFFALSE 26671
// exit ;
26669: GO 26727
// un := tmp [ rand ( 1 , tmp ) ] ;
26671: LD_ADDR_VAR 0 2
26675: PUSH
26676: LD_VAR 0 3
26680: PUSH
26681: LD_INT 1
26683: PPUSH
26684: LD_VAR 0 3
26688: PPUSH
26689: CALL_OW 12
26693: ARRAY
26694: ST_TO_ADDR
// if Crawls ( un ) then
26695: LD_VAR 0 2
26699: PPUSH
26700: CALL_OW 318
26704: IFFALSE 26715
// ComWalk ( un ) ;
26706: LD_VAR 0 2
26710: PPUSH
26711: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26715: LD_VAR 0 2
26719: PPUSH
26720: LD_INT 8
26722: PPUSH
26723: CALL_OW 336
// end ;
26727: PPOPN 3
26729: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26730: LD_EXP 55
26734: PUSH
26735: LD_EXP 99
26739: AND
26740: IFFALSE 26884
26742: GO 26744
26744: DISABLE
26745: LD_INT 0
26747: PPUSH
26748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26749: LD_ADDR_VAR 0 2
26753: PUSH
26754: LD_INT 22
26756: PUSH
26757: LD_OWVAR 2
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PUSH
26766: LD_INT 21
26768: PUSH
26769: LD_INT 2
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 2
26778: PUSH
26779: LD_INT 34
26781: PUSH
26782: LD_INT 12
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 34
26791: PUSH
26792: LD_INT 51
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: LD_INT 34
26801: PUSH
26802: LD_INT 32
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: LIST
26819: PPUSH
26820: CALL_OW 69
26824: ST_TO_ADDR
// if not tmp then
26825: LD_VAR 0 2
26829: NOT
26830: IFFALSE 26834
// exit ;
26832: GO 26884
// for i in tmp do
26834: LD_ADDR_VAR 0 1
26838: PUSH
26839: LD_VAR 0 2
26843: PUSH
26844: FOR_IN
26845: IFFALSE 26882
// if GetCargo ( i , mat_artifact ) = 0 then
26847: LD_VAR 0 1
26851: PPUSH
26852: LD_INT 4
26854: PPUSH
26855: CALL_OW 289
26859: PUSH
26860: LD_INT 0
26862: EQUAL
26863: IFFALSE 26880
// SetCargo ( i , mat_siberit , 100 ) ;
26865: LD_VAR 0 1
26869: PPUSH
26870: LD_INT 3
26872: PPUSH
26873: LD_INT 100
26875: PPUSH
26876: CALL_OW 290
26880: GO 26844
26882: POP
26883: POP
// end ;
26884: PPOPN 2
26886: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26887: LD_EXP 55
26891: PUSH
26892: LD_EXP 100
26896: AND
26897: IFFALSE 27080
26899: GO 26901
26901: DISABLE
26902: LD_INT 0
26904: PPUSH
26905: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26906: LD_ADDR_VAR 0 2
26910: PUSH
26911: LD_INT 22
26913: PUSH
26914: LD_OWVAR 2
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PPUSH
26923: CALL_OW 69
26927: ST_TO_ADDR
// if not tmp then
26928: LD_VAR 0 2
26932: NOT
26933: IFFALSE 26937
// exit ;
26935: GO 27080
// for i := 1 to 2 do
26937: LD_ADDR_VAR 0 1
26941: PUSH
26942: DOUBLE
26943: LD_INT 1
26945: DEC
26946: ST_TO_ADDR
26947: LD_INT 2
26949: PUSH
26950: FOR_TO
26951: IFFALSE 27078
// begin uc_side := your_side ;
26953: LD_ADDR_OWVAR 20
26957: PUSH
26958: LD_OWVAR 2
26962: ST_TO_ADDR
// uc_nation := nation_american ;
26963: LD_ADDR_OWVAR 21
26967: PUSH
26968: LD_INT 1
26970: ST_TO_ADDR
// vc_chassis := us_morphling ;
26971: LD_ADDR_OWVAR 37
26975: PUSH
26976: LD_INT 5
26978: ST_TO_ADDR
// vc_engine := engine_siberite ;
26979: LD_ADDR_OWVAR 39
26983: PUSH
26984: LD_INT 3
26986: ST_TO_ADDR
// vc_control := control_computer ;
26987: LD_ADDR_OWVAR 38
26991: PUSH
26992: LD_INT 3
26994: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26995: LD_ADDR_OWVAR 40
26999: PUSH
27000: LD_INT 10
27002: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27003: LD_VAR 0 2
27007: PUSH
27008: LD_INT 1
27010: ARRAY
27011: PPUSH
27012: CALL_OW 310
27016: NOT
27017: IFFALSE 27064
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27019: CALL_OW 45
27023: PPUSH
27024: LD_VAR 0 2
27028: PUSH
27029: LD_INT 1
27031: ARRAY
27032: PPUSH
27033: CALL_OW 250
27037: PPUSH
27038: LD_VAR 0 2
27042: PUSH
27043: LD_INT 1
27045: ARRAY
27046: PPUSH
27047: CALL_OW 251
27051: PPUSH
27052: LD_INT 12
27054: PPUSH
27055: LD_INT 1
27057: PPUSH
27058: CALL_OW 50
27062: GO 27076
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27064: CALL_OW 45
27068: PPUSH
27069: LD_INT 1
27071: PPUSH
27072: CALL_OW 51
// end ;
27076: GO 26950
27078: POP
27079: POP
// end ;
27080: PPOPN 2
27082: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27083: LD_EXP 55
27087: PUSH
27088: LD_EXP 101
27092: AND
27093: IFFALSE 27315
27095: GO 27097
27097: DISABLE
27098: LD_INT 0
27100: PPUSH
27101: PPUSH
27102: PPUSH
27103: PPUSH
27104: PPUSH
27105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27106: LD_ADDR_VAR 0 6
27110: PUSH
27111: LD_INT 22
27113: PUSH
27114: LD_OWVAR 2
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 21
27125: PUSH
27126: LD_INT 1
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 3
27135: PUSH
27136: LD_INT 23
27138: PUSH
27139: LD_INT 0
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: LIST
27154: PPUSH
27155: CALL_OW 69
27159: ST_TO_ADDR
// if not tmp then
27160: LD_VAR 0 6
27164: NOT
27165: IFFALSE 27169
// exit ;
27167: GO 27315
// s1 := rand ( 1 , 4 ) ;
27169: LD_ADDR_VAR 0 2
27173: PUSH
27174: LD_INT 1
27176: PPUSH
27177: LD_INT 4
27179: PPUSH
27180: CALL_OW 12
27184: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27185: LD_ADDR_VAR 0 4
27189: PUSH
27190: LD_VAR 0 6
27194: PUSH
27195: LD_INT 1
27197: ARRAY
27198: PPUSH
27199: LD_VAR 0 2
27203: PPUSH
27204: CALL_OW 259
27208: ST_TO_ADDR
// if s1 = 1 then
27209: LD_VAR 0 2
27213: PUSH
27214: LD_INT 1
27216: EQUAL
27217: IFFALSE 27237
// s2 := rand ( 2 , 4 ) else
27219: LD_ADDR_VAR 0 3
27223: PUSH
27224: LD_INT 2
27226: PPUSH
27227: LD_INT 4
27229: PPUSH
27230: CALL_OW 12
27234: ST_TO_ADDR
27235: GO 27245
// s2 := 1 ;
27237: LD_ADDR_VAR 0 3
27241: PUSH
27242: LD_INT 1
27244: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27245: LD_ADDR_VAR 0 5
27249: PUSH
27250: LD_VAR 0 6
27254: PUSH
27255: LD_INT 1
27257: ARRAY
27258: PPUSH
27259: LD_VAR 0 3
27263: PPUSH
27264: CALL_OW 259
27268: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27269: LD_VAR 0 6
27273: PUSH
27274: LD_INT 1
27276: ARRAY
27277: PPUSH
27278: LD_VAR 0 2
27282: PPUSH
27283: LD_VAR 0 5
27287: PPUSH
27288: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27292: LD_VAR 0 6
27296: PUSH
27297: LD_INT 1
27299: ARRAY
27300: PPUSH
27301: LD_VAR 0 3
27305: PPUSH
27306: LD_VAR 0 4
27310: PPUSH
27311: CALL_OW 237
// end ;
27315: PPOPN 6
27317: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27318: LD_EXP 55
27322: PUSH
27323: LD_EXP 102
27327: AND
27328: IFFALSE 27407
27330: GO 27332
27332: DISABLE
27333: LD_INT 0
27335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27336: LD_ADDR_VAR 0 1
27340: PUSH
27341: LD_INT 22
27343: PUSH
27344: LD_OWVAR 2
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 30
27355: PUSH
27356: LD_INT 3
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PPUSH
27367: CALL_OW 69
27371: ST_TO_ADDR
// if not tmp then
27372: LD_VAR 0 1
27376: NOT
27377: IFFALSE 27381
// exit ;
27379: GO 27407
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27381: LD_VAR 0 1
27385: PUSH
27386: LD_INT 1
27388: PPUSH
27389: LD_VAR 0 1
27393: PPUSH
27394: CALL_OW 12
27398: ARRAY
27399: PPUSH
27400: LD_INT 1
27402: PPUSH
27403: CALL_OW 234
// end ;
27407: PPOPN 1
27409: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27410: LD_EXP 55
27414: PUSH
27415: LD_EXP 103
27419: AND
27420: IFFALSE 27532
27422: GO 27424
27424: DISABLE
27425: LD_INT 0
27427: PPUSH
27428: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27429: LD_ADDR_VAR 0 2
27433: PUSH
27434: LD_INT 22
27436: PUSH
27437: LD_OWVAR 2
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: LD_INT 2
27448: PUSH
27449: LD_INT 30
27451: PUSH
27452: LD_INT 27
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 30
27461: PUSH
27462: LD_INT 26
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 30
27471: PUSH
27472: LD_INT 28
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PPUSH
27489: CALL_OW 69
27493: ST_TO_ADDR
// if not tmp then
27494: LD_VAR 0 2
27498: NOT
27499: IFFALSE 27503
// exit ;
27501: GO 27532
// for i in tmp do
27503: LD_ADDR_VAR 0 1
27507: PUSH
27508: LD_VAR 0 2
27512: PUSH
27513: FOR_IN
27514: IFFALSE 27530
// SetLives ( i , 1 ) ;
27516: LD_VAR 0 1
27520: PPUSH
27521: LD_INT 1
27523: PPUSH
27524: CALL_OW 234
27528: GO 27513
27530: POP
27531: POP
// end ;
27532: PPOPN 2
27534: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27535: LD_EXP 55
27539: PUSH
27540: LD_EXP 104
27544: AND
27545: IFFALSE 27832
27547: GO 27549
27549: DISABLE
27550: LD_INT 0
27552: PPUSH
27553: PPUSH
27554: PPUSH
// begin i := rand ( 1 , 7 ) ;
27555: LD_ADDR_VAR 0 1
27559: PUSH
27560: LD_INT 1
27562: PPUSH
27563: LD_INT 7
27565: PPUSH
27566: CALL_OW 12
27570: ST_TO_ADDR
// case i of 1 :
27571: LD_VAR 0 1
27575: PUSH
27576: LD_INT 1
27578: DOUBLE
27579: EQUAL
27580: IFTRUE 27584
27582: GO 27594
27584: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27585: LD_STRING earthquake(getX(game), 0, 32)
27587: PPUSH
27588: CALL_OW 559
27592: GO 27832
27594: LD_INT 2
27596: DOUBLE
27597: EQUAL
27598: IFTRUE 27602
27600: GO 27616
27602: POP
// begin ToLua ( displayStucuk(); ) ;
27603: LD_STRING displayStucuk();
27605: PPUSH
27606: CALL_OW 559
// ResetFog ;
27610: CALL_OW 335
// end ; 3 :
27614: GO 27832
27616: LD_INT 3
27618: DOUBLE
27619: EQUAL
27620: IFTRUE 27624
27622: GO 27728
27624: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27625: LD_ADDR_VAR 0 2
27629: PUSH
27630: LD_INT 22
27632: PUSH
27633: LD_OWVAR 2
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 25
27644: PUSH
27645: LD_INT 1
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PPUSH
27656: CALL_OW 69
27660: ST_TO_ADDR
// if not tmp then
27661: LD_VAR 0 2
27665: NOT
27666: IFFALSE 27670
// exit ;
27668: GO 27832
// un := tmp [ rand ( 1 , tmp ) ] ;
27670: LD_ADDR_VAR 0 3
27674: PUSH
27675: LD_VAR 0 2
27679: PUSH
27680: LD_INT 1
27682: PPUSH
27683: LD_VAR 0 2
27687: PPUSH
27688: CALL_OW 12
27692: ARRAY
27693: ST_TO_ADDR
// if Crawls ( un ) then
27694: LD_VAR 0 3
27698: PPUSH
27699: CALL_OW 318
27703: IFFALSE 27714
// ComWalk ( un ) ;
27705: LD_VAR 0 3
27709: PPUSH
27710: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27714: LD_VAR 0 3
27718: PPUSH
27719: LD_INT 8
27721: PPUSH
27722: CALL_OW 336
// end ; 4 :
27726: GO 27832
27728: LD_INT 4
27730: DOUBLE
27731: EQUAL
27732: IFTRUE 27736
27734: GO 27810
27736: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27737: LD_ADDR_VAR 0 2
27741: PUSH
27742: LD_INT 22
27744: PUSH
27745: LD_OWVAR 2
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 30
27756: PUSH
27757: LD_INT 29
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PPUSH
27768: CALL_OW 69
27772: ST_TO_ADDR
// if not tmp then
27773: LD_VAR 0 2
27777: NOT
27778: IFFALSE 27782
// exit ;
27780: GO 27832
// CenterNowOnUnits ( tmp [ 1 ] ) ;
27782: LD_VAR 0 2
27786: PUSH
27787: LD_INT 1
27789: ARRAY
27790: PPUSH
27791: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
27795: LD_VAR 0 2
27799: PUSH
27800: LD_INT 1
27802: ARRAY
27803: PPUSH
27804: CALL_OW 65
// end ; 5 .. 7 :
27808: GO 27832
27810: LD_INT 5
27812: DOUBLE
27813: GREATEREQUAL
27814: IFFALSE 27822
27816: LD_INT 7
27818: DOUBLE
27819: LESSEQUAL
27820: IFTRUE 27824
27822: GO 27831
27824: POP
// StreamSibBomb ; end ;
27825: CALL 24069 0 0
27829: GO 27832
27831: POP
// end ;
27832: PPOPN 3
27834: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27835: LD_EXP 55
27839: PUSH
27840: LD_EXP 105
27844: AND
27845: IFFALSE 28001
27847: GO 27849
27849: DISABLE
27850: LD_INT 0
27852: PPUSH
27853: PPUSH
27854: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27855: LD_ADDR_VAR 0 2
27859: PUSH
27860: LD_INT 81
27862: PUSH
27863: LD_OWVAR 2
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 2
27874: PUSH
27875: LD_INT 21
27877: PUSH
27878: LD_INT 1
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 21
27887: PUSH
27888: LD_INT 2
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: LIST
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PPUSH
27904: CALL_OW 69
27908: ST_TO_ADDR
// if not tmp then
27909: LD_VAR 0 2
27913: NOT
27914: IFFALSE 27918
// exit ;
27916: GO 28001
// p := 0 ;
27918: LD_ADDR_VAR 0 3
27922: PUSH
27923: LD_INT 0
27925: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27926: LD_INT 35
27928: PPUSH
27929: CALL_OW 67
// p := p + 1 ;
27933: LD_ADDR_VAR 0 3
27937: PUSH
27938: LD_VAR 0 3
27942: PUSH
27943: LD_INT 1
27945: PLUS
27946: ST_TO_ADDR
// for i in tmp do
27947: LD_ADDR_VAR 0 1
27951: PUSH
27952: LD_VAR 0 2
27956: PUSH
27957: FOR_IN
27958: IFFALSE 27989
// if GetLives ( i ) < 1000 then
27960: LD_VAR 0 1
27964: PPUSH
27965: CALL_OW 256
27969: PUSH
27970: LD_INT 1000
27972: LESS
27973: IFFALSE 27987
// SetLives ( i , 1000 ) ;
27975: LD_VAR 0 1
27979: PPUSH
27980: LD_INT 1000
27982: PPUSH
27983: CALL_OW 234
27987: GO 27957
27989: POP
27990: POP
// until p > 20 ;
27991: LD_VAR 0 3
27995: PUSH
27996: LD_INT 20
27998: GREATER
27999: IFFALSE 27926
// end ;
28001: PPOPN 3
28003: END
// every 0 0$1 trigger StreamModeActive and sTime do
28004: LD_EXP 55
28008: PUSH
28009: LD_EXP 106
28013: AND
28014: IFFALSE 28049
28016: GO 28018
28018: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28019: LD_INT 28
28021: PPUSH
28022: LD_OWVAR 2
28026: PPUSH
28027: LD_INT 2
28029: PPUSH
28030: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28034: LD_INT 30
28036: PPUSH
28037: LD_OWVAR 2
28041: PPUSH
28042: LD_INT 2
28044: PPUSH
28045: CALL_OW 322
// end ;
28049: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28050: LD_EXP 55
28054: PUSH
28055: LD_EXP 107
28059: AND
28060: IFFALSE 28181
28062: GO 28064
28064: DISABLE
28065: LD_INT 0
28067: PPUSH
28068: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28069: LD_ADDR_VAR 0 2
28073: PUSH
28074: LD_INT 22
28076: PUSH
28077: LD_OWVAR 2
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 21
28088: PUSH
28089: LD_INT 1
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 3
28098: PUSH
28099: LD_INT 23
28101: PUSH
28102: LD_INT 0
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: LIST
28117: PPUSH
28118: CALL_OW 69
28122: ST_TO_ADDR
// if not tmp then
28123: LD_VAR 0 2
28127: NOT
28128: IFFALSE 28132
// exit ;
28130: GO 28181
// for i in tmp do
28132: LD_ADDR_VAR 0 1
28136: PUSH
28137: LD_VAR 0 2
28141: PUSH
28142: FOR_IN
28143: IFFALSE 28179
// begin if Crawls ( i ) then
28145: LD_VAR 0 1
28149: PPUSH
28150: CALL_OW 318
28154: IFFALSE 28165
// ComWalk ( i ) ;
28156: LD_VAR 0 1
28160: PPUSH
28161: CALL_OW 138
// SetClass ( i , 2 ) ;
28165: LD_VAR 0 1
28169: PPUSH
28170: LD_INT 2
28172: PPUSH
28173: CALL_OW 336
// end ;
28177: GO 28142
28179: POP
28180: POP
// end ;
28181: PPOPN 2
28183: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28184: LD_EXP 55
28188: PUSH
28189: LD_EXP 108
28193: AND
28194: IFFALSE 28482
28196: GO 28198
28198: DISABLE
28199: LD_INT 0
28201: PPUSH
28202: PPUSH
28203: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28204: LD_OWVAR 2
28208: PPUSH
28209: LD_INT 9
28211: PPUSH
28212: LD_INT 1
28214: PPUSH
28215: LD_INT 1
28217: PPUSH
28218: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28222: LD_INT 9
28224: PPUSH
28225: LD_OWVAR 2
28229: PPUSH
28230: CALL_OW 343
// uc_side := 9 ;
28234: LD_ADDR_OWVAR 20
28238: PUSH
28239: LD_INT 9
28241: ST_TO_ADDR
// uc_nation := 2 ;
28242: LD_ADDR_OWVAR 21
28246: PUSH
28247: LD_INT 2
28249: ST_TO_ADDR
// hc_name := Dark Warrior ;
28250: LD_ADDR_OWVAR 26
28254: PUSH
28255: LD_STRING Dark Warrior
28257: ST_TO_ADDR
// hc_gallery :=  ;
28258: LD_ADDR_OWVAR 33
28262: PUSH
28263: LD_STRING 
28265: ST_TO_ADDR
// hc_noskilllimit := true ;
28266: LD_ADDR_OWVAR 76
28270: PUSH
28271: LD_INT 1
28273: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28274: LD_ADDR_OWVAR 31
28278: PUSH
28279: LD_INT 30
28281: PUSH
28282: LD_INT 30
28284: PUSH
28285: LD_INT 30
28287: PUSH
28288: LD_INT 30
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: ST_TO_ADDR
// un := CreateHuman ;
28297: LD_ADDR_VAR 0 3
28301: PUSH
28302: CALL_OW 44
28306: ST_TO_ADDR
// hc_noskilllimit := false ;
28307: LD_ADDR_OWVAR 76
28311: PUSH
28312: LD_INT 0
28314: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28315: LD_VAR 0 3
28319: PPUSH
28320: LD_INT 1
28322: PPUSH
28323: CALL_OW 51
// ToLua ( playRanger() ) ;
28327: LD_STRING playRanger()
28329: PPUSH
28330: CALL_OW 559
// p := 0 ;
28334: LD_ADDR_VAR 0 2
28338: PUSH
28339: LD_INT 0
28341: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28342: LD_INT 35
28344: PPUSH
28345: CALL_OW 67
// p := p + 1 ;
28349: LD_ADDR_VAR 0 2
28353: PUSH
28354: LD_VAR 0 2
28358: PUSH
28359: LD_INT 1
28361: PLUS
28362: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28363: LD_VAR 0 3
28367: PPUSH
28368: CALL_OW 256
28372: PUSH
28373: LD_INT 1000
28375: LESS
28376: IFFALSE 28390
// SetLives ( un , 1000 ) ;
28378: LD_VAR 0 3
28382: PPUSH
28383: LD_INT 1000
28385: PPUSH
28386: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28390: LD_VAR 0 3
28394: PPUSH
28395: LD_INT 81
28397: PUSH
28398: LD_OWVAR 2
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 91
28409: PUSH
28410: LD_VAR 0 3
28414: PUSH
28415: LD_INT 30
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: LIST
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PPUSH
28427: CALL_OW 69
28431: PPUSH
28432: LD_VAR 0 3
28436: PPUSH
28437: CALL_OW 74
28441: PPUSH
28442: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
28446: LD_VAR 0 2
28450: PUSH
28451: LD_INT 80
28453: GREATER
28454: PUSH
28455: LD_VAR 0 3
28459: PPUSH
28460: CALL_OW 301
28464: OR
28465: IFFALSE 28342
// if un then
28467: LD_VAR 0 3
28471: IFFALSE 28482
// RemoveUnit ( un ) ;
28473: LD_VAR 0 3
28477: PPUSH
28478: CALL_OW 64
// end ;
28482: PPOPN 3
28484: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
28485: LD_EXP 109
28489: IFFALSE 28605
28491: GO 28493
28493: DISABLE
28494: LD_INT 0
28496: PPUSH
28497: PPUSH
28498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28499: LD_ADDR_VAR 0 2
28503: PUSH
28504: LD_INT 81
28506: PUSH
28507: LD_OWVAR 2
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: LD_INT 21
28518: PUSH
28519: LD_INT 1
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PPUSH
28530: CALL_OW 69
28534: ST_TO_ADDR
// ToLua ( playComputer() ) ;
28535: LD_STRING playComputer()
28537: PPUSH
28538: CALL_OW 559
// if not tmp then
28542: LD_VAR 0 2
28546: NOT
28547: IFFALSE 28551
// exit ;
28549: GO 28605
// for i in tmp do
28551: LD_ADDR_VAR 0 1
28555: PUSH
28556: LD_VAR 0 2
28560: PUSH
28561: FOR_IN
28562: IFFALSE 28603
// for j := 1 to 4 do
28564: LD_ADDR_VAR 0 3
28568: PUSH
28569: DOUBLE
28570: LD_INT 1
28572: DEC
28573: ST_TO_ADDR
28574: LD_INT 4
28576: PUSH
28577: FOR_TO
28578: IFFALSE 28599
// SetSkill ( i , j , 10 ) ;
28580: LD_VAR 0 1
28584: PPUSH
28585: LD_VAR 0 3
28589: PPUSH
28590: LD_INT 10
28592: PPUSH
28593: CALL_OW 237
28597: GO 28577
28599: POP
28600: POP
28601: GO 28561
28603: POP
28604: POP
// end ;
28605: PPOPN 3
28607: END
// every 0 0$1 trigger s30 do var i , tmp ;
28608: LD_EXP 110
28612: IFFALSE 28681
28614: GO 28616
28616: DISABLE
28617: LD_INT 0
28619: PPUSH
28620: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28621: LD_ADDR_VAR 0 2
28625: PUSH
28626: LD_INT 22
28628: PUSH
28629: LD_OWVAR 2
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PPUSH
28638: CALL_OW 69
28642: ST_TO_ADDR
// if not tmp then
28643: LD_VAR 0 2
28647: NOT
28648: IFFALSE 28652
// exit ;
28650: GO 28681
// for i in tmp do
28652: LD_ADDR_VAR 0 1
28656: PUSH
28657: LD_VAR 0 2
28661: PUSH
28662: FOR_IN
28663: IFFALSE 28679
// SetLives ( i , 300 ) ;
28665: LD_VAR 0 1
28669: PPUSH
28670: LD_INT 300
28672: PPUSH
28673: CALL_OW 234
28677: GO 28662
28679: POP
28680: POP
// end ;
28681: PPOPN 2
28683: END
// every 0 0$1 trigger s60 do var i , tmp ;
28684: LD_EXP 111
28688: IFFALSE 28757
28690: GO 28692
28692: DISABLE
28693: LD_INT 0
28695: PPUSH
28696: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28697: LD_ADDR_VAR 0 2
28701: PUSH
28702: LD_INT 22
28704: PUSH
28705: LD_OWVAR 2
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PPUSH
28714: CALL_OW 69
28718: ST_TO_ADDR
// if not tmp then
28719: LD_VAR 0 2
28723: NOT
28724: IFFALSE 28728
// exit ;
28726: GO 28757
// for i in tmp do
28728: LD_ADDR_VAR 0 1
28732: PUSH
28733: LD_VAR 0 2
28737: PUSH
28738: FOR_IN
28739: IFFALSE 28755
// SetLives ( i , 600 ) ;
28741: LD_VAR 0 1
28745: PPUSH
28746: LD_INT 600
28748: PPUSH
28749: CALL_OW 234
28753: GO 28738
28755: POP
28756: POP
// end ;
28757: PPOPN 2
28759: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28760: LD_INT 0
28762: PPUSH
// case cmd of 301 :
28763: LD_VAR 0 1
28767: PUSH
28768: LD_INT 301
28770: DOUBLE
28771: EQUAL
28772: IFTRUE 28776
28774: GO 28808
28776: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28777: LD_VAR 0 6
28781: PPUSH
28782: LD_VAR 0 7
28786: PPUSH
28787: LD_VAR 0 8
28791: PPUSH
28792: LD_VAR 0 4
28796: PPUSH
28797: LD_VAR 0 5
28801: PPUSH
28802: CALL 30009 0 5
28806: GO 28929
28808: LD_INT 302
28810: DOUBLE
28811: EQUAL
28812: IFTRUE 28816
28814: GO 28853
28816: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28817: LD_VAR 0 6
28821: PPUSH
28822: LD_VAR 0 7
28826: PPUSH
28827: LD_VAR 0 8
28831: PPUSH
28832: LD_VAR 0 9
28836: PPUSH
28837: LD_VAR 0 4
28841: PPUSH
28842: LD_VAR 0 5
28846: PPUSH
28847: CALL 30100 0 6
28851: GO 28929
28853: LD_INT 303
28855: DOUBLE
28856: EQUAL
28857: IFTRUE 28861
28859: GO 28898
28861: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28862: LD_VAR 0 6
28866: PPUSH
28867: LD_VAR 0 7
28871: PPUSH
28872: LD_VAR 0 8
28876: PPUSH
28877: LD_VAR 0 9
28881: PPUSH
28882: LD_VAR 0 4
28886: PPUSH
28887: LD_VAR 0 5
28891: PPUSH
28892: CALL 28934 0 6
28896: GO 28929
28898: LD_INT 304
28900: DOUBLE
28901: EQUAL
28902: IFTRUE 28906
28904: GO 28928
28906: POP
// hHackTeleport ( unit , x , y ) ; end ;
28907: LD_VAR 0 2
28911: PPUSH
28912: LD_VAR 0 4
28916: PPUSH
28917: LD_VAR 0 5
28921: PPUSH
28922: CALL 30693 0 3
28926: GO 28929
28928: POP
// end ;
28929: LD_VAR 0 12
28933: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28934: LD_INT 0
28936: PPUSH
28937: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28938: LD_VAR 0 1
28942: PUSH
28943: LD_INT 1
28945: LESS
28946: PUSH
28947: LD_VAR 0 1
28951: PUSH
28952: LD_INT 3
28954: GREATER
28955: OR
28956: PUSH
28957: LD_VAR 0 5
28961: PPUSH
28962: LD_VAR 0 6
28966: PPUSH
28967: CALL_OW 428
28971: OR
28972: IFFALSE 28976
// exit ;
28974: GO 29696
// uc_side := your_side ;
28976: LD_ADDR_OWVAR 20
28980: PUSH
28981: LD_OWVAR 2
28985: ST_TO_ADDR
// uc_nation := nation ;
28986: LD_ADDR_OWVAR 21
28990: PUSH
28991: LD_VAR 0 1
28995: ST_TO_ADDR
// bc_level = 1 ;
28996: LD_ADDR_OWVAR 43
29000: PUSH
29001: LD_INT 1
29003: ST_TO_ADDR
// case btype of 1 :
29004: LD_VAR 0 2
29008: PUSH
29009: LD_INT 1
29011: DOUBLE
29012: EQUAL
29013: IFTRUE 29017
29015: GO 29028
29017: POP
// bc_type := b_depot ; 2 :
29018: LD_ADDR_OWVAR 42
29022: PUSH
29023: LD_INT 0
29025: ST_TO_ADDR
29026: GO 29640
29028: LD_INT 2
29030: DOUBLE
29031: EQUAL
29032: IFTRUE 29036
29034: GO 29047
29036: POP
// bc_type := b_warehouse ; 3 :
29037: LD_ADDR_OWVAR 42
29041: PUSH
29042: LD_INT 1
29044: ST_TO_ADDR
29045: GO 29640
29047: LD_INT 3
29049: DOUBLE
29050: EQUAL
29051: IFTRUE 29055
29053: GO 29066
29055: POP
// bc_type := b_lab ; 4 .. 9 :
29056: LD_ADDR_OWVAR 42
29060: PUSH
29061: LD_INT 6
29063: ST_TO_ADDR
29064: GO 29640
29066: LD_INT 4
29068: DOUBLE
29069: GREATEREQUAL
29070: IFFALSE 29078
29072: LD_INT 9
29074: DOUBLE
29075: LESSEQUAL
29076: IFTRUE 29080
29078: GO 29132
29080: POP
// begin bc_type := b_lab_half ;
29081: LD_ADDR_OWVAR 42
29085: PUSH
29086: LD_INT 7
29088: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29089: LD_ADDR_OWVAR 44
29093: PUSH
29094: LD_INT 10
29096: PUSH
29097: LD_INT 11
29099: PUSH
29100: LD_INT 12
29102: PUSH
29103: LD_INT 15
29105: PUSH
29106: LD_INT 14
29108: PUSH
29109: LD_INT 13
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: PUSH
29120: LD_VAR 0 2
29124: PUSH
29125: LD_INT 3
29127: MINUS
29128: ARRAY
29129: ST_TO_ADDR
// end ; 10 .. 13 :
29130: GO 29640
29132: LD_INT 10
29134: DOUBLE
29135: GREATEREQUAL
29136: IFFALSE 29144
29138: LD_INT 13
29140: DOUBLE
29141: LESSEQUAL
29142: IFTRUE 29146
29144: GO 29223
29146: POP
// begin bc_type := b_lab_full ;
29147: LD_ADDR_OWVAR 42
29151: PUSH
29152: LD_INT 8
29154: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29155: LD_ADDR_OWVAR 44
29159: PUSH
29160: LD_INT 10
29162: PUSH
29163: LD_INT 12
29165: PUSH
29166: LD_INT 14
29168: PUSH
29169: LD_INT 13
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: PUSH
29178: LD_VAR 0 2
29182: PUSH
29183: LD_INT 9
29185: MINUS
29186: ARRAY
29187: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29188: LD_ADDR_OWVAR 45
29192: PUSH
29193: LD_INT 11
29195: PUSH
29196: LD_INT 15
29198: PUSH
29199: LD_INT 12
29201: PUSH
29202: LD_INT 15
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: PUSH
29211: LD_VAR 0 2
29215: PUSH
29216: LD_INT 9
29218: MINUS
29219: ARRAY
29220: ST_TO_ADDR
// end ; 14 :
29221: GO 29640
29223: LD_INT 14
29225: DOUBLE
29226: EQUAL
29227: IFTRUE 29231
29229: GO 29242
29231: POP
// bc_type := b_workshop ; 15 :
29232: LD_ADDR_OWVAR 42
29236: PUSH
29237: LD_INT 2
29239: ST_TO_ADDR
29240: GO 29640
29242: LD_INT 15
29244: DOUBLE
29245: EQUAL
29246: IFTRUE 29250
29248: GO 29261
29250: POP
// bc_type := b_factory ; 16 :
29251: LD_ADDR_OWVAR 42
29255: PUSH
29256: LD_INT 3
29258: ST_TO_ADDR
29259: GO 29640
29261: LD_INT 16
29263: DOUBLE
29264: EQUAL
29265: IFTRUE 29269
29267: GO 29280
29269: POP
// bc_type := b_ext_gun ; 17 :
29270: LD_ADDR_OWVAR 42
29274: PUSH
29275: LD_INT 17
29277: ST_TO_ADDR
29278: GO 29640
29280: LD_INT 17
29282: DOUBLE
29283: EQUAL
29284: IFTRUE 29288
29286: GO 29316
29288: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29289: LD_ADDR_OWVAR 42
29293: PUSH
29294: LD_INT 19
29296: PUSH
29297: LD_INT 23
29299: PUSH
29300: LD_INT 19
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: LIST
29307: PUSH
29308: LD_VAR 0 1
29312: ARRAY
29313: ST_TO_ADDR
29314: GO 29640
29316: LD_INT 18
29318: DOUBLE
29319: EQUAL
29320: IFTRUE 29324
29322: GO 29335
29324: POP
// bc_type := b_ext_radar ; 19 :
29325: LD_ADDR_OWVAR 42
29329: PUSH
29330: LD_INT 20
29332: ST_TO_ADDR
29333: GO 29640
29335: LD_INT 19
29337: DOUBLE
29338: EQUAL
29339: IFTRUE 29343
29341: GO 29354
29343: POP
// bc_type := b_ext_radio ; 20 :
29344: LD_ADDR_OWVAR 42
29348: PUSH
29349: LD_INT 22
29351: ST_TO_ADDR
29352: GO 29640
29354: LD_INT 20
29356: DOUBLE
29357: EQUAL
29358: IFTRUE 29362
29360: GO 29373
29362: POP
// bc_type := b_ext_siberium ; 21 :
29363: LD_ADDR_OWVAR 42
29367: PUSH
29368: LD_INT 21
29370: ST_TO_ADDR
29371: GO 29640
29373: LD_INT 21
29375: DOUBLE
29376: EQUAL
29377: IFTRUE 29381
29379: GO 29392
29381: POP
// bc_type := b_ext_computer ; 22 :
29382: LD_ADDR_OWVAR 42
29386: PUSH
29387: LD_INT 24
29389: ST_TO_ADDR
29390: GO 29640
29392: LD_INT 22
29394: DOUBLE
29395: EQUAL
29396: IFTRUE 29400
29398: GO 29411
29400: POP
// bc_type := b_ext_track ; 23 :
29401: LD_ADDR_OWVAR 42
29405: PUSH
29406: LD_INT 16
29408: ST_TO_ADDR
29409: GO 29640
29411: LD_INT 23
29413: DOUBLE
29414: EQUAL
29415: IFTRUE 29419
29417: GO 29430
29419: POP
// bc_type := b_ext_laser ; 24 :
29420: LD_ADDR_OWVAR 42
29424: PUSH
29425: LD_INT 25
29427: ST_TO_ADDR
29428: GO 29640
29430: LD_INT 24
29432: DOUBLE
29433: EQUAL
29434: IFTRUE 29438
29436: GO 29449
29438: POP
// bc_type := b_control_tower ; 25 :
29439: LD_ADDR_OWVAR 42
29443: PUSH
29444: LD_INT 36
29446: ST_TO_ADDR
29447: GO 29640
29449: LD_INT 25
29451: DOUBLE
29452: EQUAL
29453: IFTRUE 29457
29455: GO 29468
29457: POP
// bc_type := b_breastwork ; 26 :
29458: LD_ADDR_OWVAR 42
29462: PUSH
29463: LD_INT 31
29465: ST_TO_ADDR
29466: GO 29640
29468: LD_INT 26
29470: DOUBLE
29471: EQUAL
29472: IFTRUE 29476
29474: GO 29487
29476: POP
// bc_type := b_bunker ; 27 :
29477: LD_ADDR_OWVAR 42
29481: PUSH
29482: LD_INT 32
29484: ST_TO_ADDR
29485: GO 29640
29487: LD_INT 27
29489: DOUBLE
29490: EQUAL
29491: IFTRUE 29495
29493: GO 29506
29495: POP
// bc_type := b_turret ; 28 :
29496: LD_ADDR_OWVAR 42
29500: PUSH
29501: LD_INT 33
29503: ST_TO_ADDR
29504: GO 29640
29506: LD_INT 28
29508: DOUBLE
29509: EQUAL
29510: IFTRUE 29514
29512: GO 29525
29514: POP
// bc_type := b_armoury ; 29 :
29515: LD_ADDR_OWVAR 42
29519: PUSH
29520: LD_INT 4
29522: ST_TO_ADDR
29523: GO 29640
29525: LD_INT 29
29527: DOUBLE
29528: EQUAL
29529: IFTRUE 29533
29531: GO 29544
29533: POP
// bc_type := b_barracks ; 30 :
29534: LD_ADDR_OWVAR 42
29538: PUSH
29539: LD_INT 5
29541: ST_TO_ADDR
29542: GO 29640
29544: LD_INT 30
29546: DOUBLE
29547: EQUAL
29548: IFTRUE 29552
29550: GO 29563
29552: POP
// bc_type := b_solar_power ; 31 :
29553: LD_ADDR_OWVAR 42
29557: PUSH
29558: LD_INT 27
29560: ST_TO_ADDR
29561: GO 29640
29563: LD_INT 31
29565: DOUBLE
29566: EQUAL
29567: IFTRUE 29571
29569: GO 29582
29571: POP
// bc_type := b_oil_power ; 32 :
29572: LD_ADDR_OWVAR 42
29576: PUSH
29577: LD_INT 26
29579: ST_TO_ADDR
29580: GO 29640
29582: LD_INT 32
29584: DOUBLE
29585: EQUAL
29586: IFTRUE 29590
29588: GO 29601
29590: POP
// bc_type := b_siberite_power ; 33 :
29591: LD_ADDR_OWVAR 42
29595: PUSH
29596: LD_INT 28
29598: ST_TO_ADDR
29599: GO 29640
29601: LD_INT 33
29603: DOUBLE
29604: EQUAL
29605: IFTRUE 29609
29607: GO 29620
29609: POP
// bc_type := b_oil_mine ; 34 :
29610: LD_ADDR_OWVAR 42
29614: PUSH
29615: LD_INT 29
29617: ST_TO_ADDR
29618: GO 29640
29620: LD_INT 34
29622: DOUBLE
29623: EQUAL
29624: IFTRUE 29628
29626: GO 29639
29628: POP
// bc_type := b_siberite_mine ; end ;
29629: LD_ADDR_OWVAR 42
29633: PUSH
29634: LD_INT 30
29636: ST_TO_ADDR
29637: GO 29640
29639: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29640: LD_ADDR_VAR 0 8
29644: PUSH
29645: LD_VAR 0 5
29649: PPUSH
29650: LD_VAR 0 6
29654: PPUSH
29655: LD_VAR 0 3
29659: PPUSH
29660: CALL_OW 47
29664: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29665: LD_OWVAR 42
29669: PUSH
29670: LD_INT 32
29672: PUSH
29673: LD_INT 33
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: IN
29680: IFFALSE 29696
// PlaceWeaponTurret ( b , weapon ) ;
29682: LD_VAR 0 8
29686: PPUSH
29687: LD_VAR 0 4
29691: PPUSH
29692: CALL_OW 431
// end ;
29696: LD_VAR 0 7
29700: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29701: LD_INT 0
29703: PPUSH
29704: PPUSH
29705: PPUSH
29706: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29707: LD_ADDR_VAR 0 4
29711: PUSH
29712: LD_INT 22
29714: PUSH
29715: LD_OWVAR 2
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 2
29726: PUSH
29727: LD_INT 30
29729: PUSH
29730: LD_INT 0
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: LD_INT 30
29739: PUSH
29740: LD_INT 1
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: LIST
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PPUSH
29756: CALL_OW 69
29760: ST_TO_ADDR
// if not tmp then
29761: LD_VAR 0 4
29765: NOT
29766: IFFALSE 29770
// exit ;
29768: GO 29829
// for i in tmp do
29770: LD_ADDR_VAR 0 2
29774: PUSH
29775: LD_VAR 0 4
29779: PUSH
29780: FOR_IN
29781: IFFALSE 29827
// for j = 1 to 3 do
29783: LD_ADDR_VAR 0 3
29787: PUSH
29788: DOUBLE
29789: LD_INT 1
29791: DEC
29792: ST_TO_ADDR
29793: LD_INT 3
29795: PUSH
29796: FOR_TO
29797: IFFALSE 29823
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29799: LD_VAR 0 2
29803: PPUSH
29804: CALL_OW 274
29808: PPUSH
29809: LD_VAR 0 3
29813: PPUSH
29814: LD_INT 99999
29816: PPUSH
29817: CALL_OW 277
29821: GO 29796
29823: POP
29824: POP
29825: GO 29780
29827: POP
29828: POP
// end ;
29829: LD_VAR 0 1
29833: RET
// export function hHackSetLevel10 ; var i , j ; begin
29834: LD_INT 0
29836: PPUSH
29837: PPUSH
29838: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29839: LD_ADDR_VAR 0 2
29843: PUSH
29844: LD_INT 21
29846: PUSH
29847: LD_INT 1
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PPUSH
29854: CALL_OW 69
29858: PUSH
29859: FOR_IN
29860: IFFALSE 29912
// if IsSelected ( i ) then
29862: LD_VAR 0 2
29866: PPUSH
29867: CALL_OW 306
29871: IFFALSE 29910
// begin for j := 1 to 4 do
29873: LD_ADDR_VAR 0 3
29877: PUSH
29878: DOUBLE
29879: LD_INT 1
29881: DEC
29882: ST_TO_ADDR
29883: LD_INT 4
29885: PUSH
29886: FOR_TO
29887: IFFALSE 29908
// SetSkill ( i , j , 10 ) ;
29889: LD_VAR 0 2
29893: PPUSH
29894: LD_VAR 0 3
29898: PPUSH
29899: LD_INT 10
29901: PPUSH
29902: CALL_OW 237
29906: GO 29886
29908: POP
29909: POP
// end ;
29910: GO 29859
29912: POP
29913: POP
// end ;
29914: LD_VAR 0 1
29918: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29919: LD_INT 0
29921: PPUSH
29922: PPUSH
29923: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29924: LD_ADDR_VAR 0 2
29928: PUSH
29929: LD_INT 22
29931: PUSH
29932: LD_OWVAR 2
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 21
29943: PUSH
29944: LD_INT 1
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PPUSH
29955: CALL_OW 69
29959: PUSH
29960: FOR_IN
29961: IFFALSE 30002
// begin for j := 1 to 4 do
29963: LD_ADDR_VAR 0 3
29967: PUSH
29968: DOUBLE
29969: LD_INT 1
29971: DEC
29972: ST_TO_ADDR
29973: LD_INT 4
29975: PUSH
29976: FOR_TO
29977: IFFALSE 29998
// SetSkill ( i , j , 10 ) ;
29979: LD_VAR 0 2
29983: PPUSH
29984: LD_VAR 0 3
29988: PPUSH
29989: LD_INT 10
29991: PPUSH
29992: CALL_OW 237
29996: GO 29976
29998: POP
29999: POP
// end ;
30000: GO 29960
30002: POP
30003: POP
// end ;
30004: LD_VAR 0 1
30008: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30009: LD_INT 0
30011: PPUSH
// uc_side := your_side ;
30012: LD_ADDR_OWVAR 20
30016: PUSH
30017: LD_OWVAR 2
30021: ST_TO_ADDR
// uc_nation := nation ;
30022: LD_ADDR_OWVAR 21
30026: PUSH
30027: LD_VAR 0 1
30031: ST_TO_ADDR
// InitHc ;
30032: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30036: LD_INT 0
30038: PPUSH
30039: LD_VAR 0 2
30043: PPUSH
30044: LD_VAR 0 3
30048: PPUSH
30049: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30053: LD_VAR 0 4
30057: PPUSH
30058: LD_VAR 0 5
30062: PPUSH
30063: CALL_OW 428
30067: PUSH
30068: LD_INT 0
30070: EQUAL
30071: IFFALSE 30095
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30073: CALL_OW 44
30077: PPUSH
30078: LD_VAR 0 4
30082: PPUSH
30083: LD_VAR 0 5
30087: PPUSH
30088: LD_INT 1
30090: PPUSH
30091: CALL_OW 48
// end ;
30095: LD_VAR 0 6
30099: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30100: LD_INT 0
30102: PPUSH
30103: PPUSH
// uc_side := your_side ;
30104: LD_ADDR_OWVAR 20
30108: PUSH
30109: LD_OWVAR 2
30113: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30114: LD_VAR 0 1
30118: PUSH
30119: LD_INT 1
30121: PUSH
30122: LD_INT 2
30124: PUSH
30125: LD_INT 3
30127: PUSH
30128: LD_INT 4
30130: PUSH
30131: LD_INT 5
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: IN
30141: IFFALSE 30153
// uc_nation := nation_american else
30143: LD_ADDR_OWVAR 21
30147: PUSH
30148: LD_INT 1
30150: ST_TO_ADDR
30151: GO 30196
// if chassis in [ 11 , 12 , 13 , 14 ] then
30153: LD_VAR 0 1
30157: PUSH
30158: LD_INT 11
30160: PUSH
30161: LD_INT 12
30163: PUSH
30164: LD_INT 13
30166: PUSH
30167: LD_INT 14
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: IN
30176: IFFALSE 30188
// uc_nation := nation_arabian else
30178: LD_ADDR_OWVAR 21
30182: PUSH
30183: LD_INT 2
30185: ST_TO_ADDR
30186: GO 30196
// uc_nation := nation_russian ;
30188: LD_ADDR_OWVAR 21
30192: PUSH
30193: LD_INT 3
30195: ST_TO_ADDR
// vc_chassis := chassis ;
30196: LD_ADDR_OWVAR 37
30200: PUSH
30201: LD_VAR 0 1
30205: ST_TO_ADDR
// vc_engine := engine ;
30206: LD_ADDR_OWVAR 39
30210: PUSH
30211: LD_VAR 0 2
30215: ST_TO_ADDR
// vc_control := control ;
30216: LD_ADDR_OWVAR 38
30220: PUSH
30221: LD_VAR 0 3
30225: ST_TO_ADDR
// vc_weapon := weapon ;
30226: LD_ADDR_OWVAR 40
30230: PUSH
30231: LD_VAR 0 4
30235: ST_TO_ADDR
// un := CreateVehicle ;
30236: LD_ADDR_VAR 0 8
30240: PUSH
30241: CALL_OW 45
30245: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30246: LD_VAR 0 8
30250: PPUSH
30251: LD_INT 0
30253: PPUSH
30254: LD_INT 5
30256: PPUSH
30257: CALL_OW 12
30261: PPUSH
30262: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30266: LD_VAR 0 8
30270: PPUSH
30271: LD_VAR 0 5
30275: PPUSH
30276: LD_VAR 0 6
30280: PPUSH
30281: LD_INT 1
30283: PPUSH
30284: CALL_OW 48
// end ;
30288: LD_VAR 0 7
30292: RET
// export hInvincible ; every 1 do
30293: GO 30295
30295: DISABLE
// hInvincible := [ ] ;
30296: LD_ADDR_EXP 112
30300: PUSH
30301: EMPTY
30302: ST_TO_ADDR
30303: END
// every 10 do var i ;
30304: GO 30306
30306: DISABLE
30307: LD_INT 0
30309: PPUSH
// begin enable ;
30310: ENABLE
// if not hInvincible then
30311: LD_EXP 112
30315: NOT
30316: IFFALSE 30320
// exit ;
30318: GO 30364
// for i in hInvincible do
30320: LD_ADDR_VAR 0 1
30324: PUSH
30325: LD_EXP 112
30329: PUSH
30330: FOR_IN
30331: IFFALSE 30362
// if GetLives ( i ) < 1000 then
30333: LD_VAR 0 1
30337: PPUSH
30338: CALL_OW 256
30342: PUSH
30343: LD_INT 1000
30345: LESS
30346: IFFALSE 30360
// SetLives ( i , 1000 ) ;
30348: LD_VAR 0 1
30352: PPUSH
30353: LD_INT 1000
30355: PPUSH
30356: CALL_OW 234
30360: GO 30330
30362: POP
30363: POP
// end ;
30364: PPOPN 1
30366: END
// export function hHackInvincible ; var i ; begin
30367: LD_INT 0
30369: PPUSH
30370: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30371: LD_ADDR_VAR 0 2
30375: PUSH
30376: LD_INT 2
30378: PUSH
30379: LD_INT 21
30381: PUSH
30382: LD_INT 1
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 21
30391: PUSH
30392: LD_INT 2
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: LIST
30403: PPUSH
30404: CALL_OW 69
30408: PUSH
30409: FOR_IN
30410: IFFALSE 30471
// if IsSelected ( i ) then
30412: LD_VAR 0 2
30416: PPUSH
30417: CALL_OW 306
30421: IFFALSE 30469
// begin if i in hInvincible then
30423: LD_VAR 0 2
30427: PUSH
30428: LD_EXP 112
30432: IN
30433: IFFALSE 30453
// hInvincible := hInvincible diff i else
30435: LD_ADDR_EXP 112
30439: PUSH
30440: LD_EXP 112
30444: PUSH
30445: LD_VAR 0 2
30449: DIFF
30450: ST_TO_ADDR
30451: GO 30469
// hInvincible := hInvincible union i ;
30453: LD_ADDR_EXP 112
30457: PUSH
30458: LD_EXP 112
30462: PUSH
30463: LD_VAR 0 2
30467: UNION
30468: ST_TO_ADDR
// end ;
30469: GO 30409
30471: POP
30472: POP
// end ;
30473: LD_VAR 0 1
30477: RET
// export function hHackInvisible ; var i , j ; begin
30478: LD_INT 0
30480: PPUSH
30481: PPUSH
30482: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30483: LD_ADDR_VAR 0 2
30487: PUSH
30488: LD_INT 21
30490: PUSH
30491: LD_INT 1
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PPUSH
30498: CALL_OW 69
30502: PUSH
30503: FOR_IN
30504: IFFALSE 30528
// if IsSelected ( i ) then
30506: LD_VAR 0 2
30510: PPUSH
30511: CALL_OW 306
30515: IFFALSE 30526
// ComForceInvisible ( i ) ;
30517: LD_VAR 0 2
30521: PPUSH
30522: CALL_OW 496
30526: GO 30503
30528: POP
30529: POP
// end ;
30530: LD_VAR 0 1
30534: RET
// export function hHackChangeYourSide ; begin
30535: LD_INT 0
30537: PPUSH
// if your_side = 8 then
30538: LD_OWVAR 2
30542: PUSH
30543: LD_INT 8
30545: EQUAL
30546: IFFALSE 30558
// your_side := 0 else
30548: LD_ADDR_OWVAR 2
30552: PUSH
30553: LD_INT 0
30555: ST_TO_ADDR
30556: GO 30572
// your_side := your_side + 1 ;
30558: LD_ADDR_OWVAR 2
30562: PUSH
30563: LD_OWVAR 2
30567: PUSH
30568: LD_INT 1
30570: PLUS
30571: ST_TO_ADDR
// end ;
30572: LD_VAR 0 1
30576: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30577: LD_INT 0
30579: PPUSH
30580: PPUSH
30581: PPUSH
// for i in all_units do
30582: LD_ADDR_VAR 0 2
30586: PUSH
30587: LD_OWVAR 3
30591: PUSH
30592: FOR_IN
30593: IFFALSE 30671
// if IsSelected ( i ) then
30595: LD_VAR 0 2
30599: PPUSH
30600: CALL_OW 306
30604: IFFALSE 30669
// begin j := GetSide ( i ) ;
30606: LD_ADDR_VAR 0 3
30610: PUSH
30611: LD_VAR 0 2
30615: PPUSH
30616: CALL_OW 255
30620: ST_TO_ADDR
// if j = 8 then
30621: LD_VAR 0 3
30625: PUSH
30626: LD_INT 8
30628: EQUAL
30629: IFFALSE 30641
// j := 0 else
30631: LD_ADDR_VAR 0 3
30635: PUSH
30636: LD_INT 0
30638: ST_TO_ADDR
30639: GO 30655
// j := j + 1 ;
30641: LD_ADDR_VAR 0 3
30645: PUSH
30646: LD_VAR 0 3
30650: PUSH
30651: LD_INT 1
30653: PLUS
30654: ST_TO_ADDR
// SetSide ( i , j ) ;
30655: LD_VAR 0 2
30659: PPUSH
30660: LD_VAR 0 3
30664: PPUSH
30665: CALL_OW 235
// end ;
30669: GO 30592
30671: POP
30672: POP
// end ;
30673: LD_VAR 0 1
30677: RET
// export function hHackFog ; begin
30678: LD_INT 0
30680: PPUSH
// FogOff ( true ) ;
30681: LD_INT 1
30683: PPUSH
30684: CALL_OW 344
// end ;
30688: LD_VAR 0 1
30692: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30693: LD_INT 0
30695: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30696: LD_VAR 0 1
30700: PPUSH
30701: LD_VAR 0 2
30705: PPUSH
30706: LD_VAR 0 3
30710: PPUSH
30711: LD_INT 1
30713: PPUSH
30714: LD_INT 1
30716: PPUSH
30717: CALL_OW 483
// CenterOnXY ( x , y ) ;
30721: LD_VAR 0 2
30725: PPUSH
30726: LD_VAR 0 3
30730: PPUSH
30731: CALL_OW 84
// end ; end_of_file
30735: LD_VAR 0 4
30739: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
30740: LD_INT 0
30742: PPUSH
30743: PPUSH
30744: PPUSH
30745: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
30746: LD_VAR 0 1
30750: PPUSH
30751: CALL_OW 264
30755: PUSH
30756: LD_EXP 40
30760: EQUAL
30761: IFFALSE 30833
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
30763: LD_INT 68
30765: PPUSH
30766: LD_VAR 0 1
30770: PPUSH
30771: CALL_OW 255
30775: PPUSH
30776: CALL_OW 321
30780: PUSH
30781: LD_INT 2
30783: EQUAL
30784: IFFALSE 30796
// eff := 70 else
30786: LD_ADDR_VAR 0 4
30790: PUSH
30791: LD_INT 70
30793: ST_TO_ADDR
30794: GO 30804
// eff := 30 ;
30796: LD_ADDR_VAR 0 4
30800: PUSH
30801: LD_INT 30
30803: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
30804: LD_VAR 0 1
30808: PPUSH
30809: CALL_OW 250
30813: PPUSH
30814: LD_VAR 0 1
30818: PPUSH
30819: CALL_OW 251
30823: PPUSH
30824: LD_VAR 0 4
30828: PPUSH
30829: CALL_OW 495
// end ; end ;
30833: LD_VAR 0 2
30837: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
30838: LD_INT 0
30840: PPUSH
// end ;
30841: LD_VAR 0 4
30845: RET
// export function SOS_Command ( cmd ) ; begin
30846: LD_INT 0
30848: PPUSH
// end ;
30849: LD_VAR 0 2
30853: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
30854: LD_INT 0
30856: PPUSH
// end ;
30857: LD_VAR 0 6
30861: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
30862: LD_INT 0
30864: PPUSH
30865: PPUSH
// if not vehicle or not factory then
30866: LD_VAR 0 1
30870: NOT
30871: PUSH
30872: LD_VAR 0 2
30876: NOT
30877: OR
30878: IFFALSE 30882
// exit ;
30880: GO 31113
// if factoryWaypoints >= factory then
30882: LD_EXP 113
30886: PUSH
30887: LD_VAR 0 2
30891: GREATEREQUAL
30892: IFFALSE 31113
// if factoryWaypoints [ factory ] then
30894: LD_EXP 113
30898: PUSH
30899: LD_VAR 0 2
30903: ARRAY
30904: IFFALSE 31113
// begin if GetControl ( vehicle ) = control_manual then
30906: LD_VAR 0 1
30910: PPUSH
30911: CALL_OW 263
30915: PUSH
30916: LD_INT 1
30918: EQUAL
30919: IFFALSE 31000
// begin driver := IsDrivenBy ( vehicle ) ;
30921: LD_ADDR_VAR 0 4
30925: PUSH
30926: LD_VAR 0 1
30930: PPUSH
30931: CALL_OW 311
30935: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
30936: LD_VAR 0 4
30940: PPUSH
30941: LD_EXP 113
30945: PUSH
30946: LD_VAR 0 2
30950: ARRAY
30951: PUSH
30952: LD_INT 1
30954: ARRAY
30955: PPUSH
30956: LD_EXP 113
30960: PUSH
30961: LD_VAR 0 2
30965: ARRAY
30966: PUSH
30967: LD_INT 2
30969: ARRAY
30970: PPUSH
30971: CALL_OW 171
// AddComExitVehicle ( driver ) ;
30975: LD_VAR 0 4
30979: PPUSH
30980: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
30984: LD_VAR 0 4
30988: PPUSH
30989: LD_VAR 0 2
30993: PPUSH
30994: CALL_OW 180
// end else
30998: GO 31113
// if GetControl ( vehicle ) = control_remote then
31000: LD_VAR 0 1
31004: PPUSH
31005: CALL_OW 263
31009: PUSH
31010: LD_INT 2
31012: EQUAL
31013: IFFALSE 31074
// begin wait ( 0 0$2 ) ;
31015: LD_INT 70
31017: PPUSH
31018: CALL_OW 67
// if Connect ( vehicle ) then
31022: LD_VAR 0 1
31026: PPUSH
31027: CALL 43337 0 1
31031: IFFALSE 31072
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
31033: LD_VAR 0 1
31037: PPUSH
31038: LD_EXP 113
31042: PUSH
31043: LD_VAR 0 2
31047: ARRAY
31048: PUSH
31049: LD_INT 1
31051: ARRAY
31052: PPUSH
31053: LD_EXP 113
31057: PUSH
31058: LD_VAR 0 2
31062: ARRAY
31063: PUSH
31064: LD_INT 2
31066: ARRAY
31067: PPUSH
31068: CALL_OW 171
// end else
31072: GO 31113
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
31074: LD_VAR 0 1
31078: PPUSH
31079: LD_EXP 113
31083: PUSH
31084: LD_VAR 0 2
31088: ARRAY
31089: PUSH
31090: LD_INT 1
31092: ARRAY
31093: PPUSH
31094: LD_EXP 113
31098: PUSH
31099: LD_VAR 0 2
31103: ARRAY
31104: PUSH
31105: LD_INT 2
31107: ARRAY
31108: PPUSH
31109: CALL_OW 171
// end ; end ;
31113: LD_VAR 0 3
31117: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
31118: LD_INT 0
31120: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
31121: LD_VAR 0 1
31125: PUSH
31126: LD_INT 250
31128: EQUAL
31129: PUSH
31130: LD_VAR 0 2
31134: PPUSH
31135: CALL_OW 264
31139: PUSH
31140: LD_EXP 43
31144: EQUAL
31145: AND
31146: IFFALSE 31167
// MinerPlaceMine ( unit , x , y ) ;
31148: LD_VAR 0 2
31152: PPUSH
31153: LD_VAR 0 4
31157: PPUSH
31158: LD_VAR 0 5
31162: PPUSH
31163: CALL 33895 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
31167: LD_VAR 0 1
31171: PUSH
31172: LD_INT 251
31174: EQUAL
31175: PUSH
31176: LD_VAR 0 2
31180: PPUSH
31181: CALL_OW 264
31185: PUSH
31186: LD_EXP 43
31190: EQUAL
31191: AND
31192: IFFALSE 31213
// MinerDetonateMine ( unit , x , y ) ;
31194: LD_VAR 0 2
31198: PPUSH
31199: LD_VAR 0 4
31203: PPUSH
31204: LD_VAR 0 5
31208: PPUSH
31209: CALL 34172 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
31213: LD_VAR 0 1
31217: PUSH
31218: LD_INT 252
31220: EQUAL
31221: PUSH
31222: LD_VAR 0 2
31226: PPUSH
31227: CALL_OW 264
31231: PUSH
31232: LD_EXP 43
31236: EQUAL
31237: AND
31238: IFFALSE 31259
// MinerCreateMinefield ( unit , x , y ) ;
31240: LD_VAR 0 2
31244: PPUSH
31245: LD_VAR 0 4
31249: PPUSH
31250: LD_VAR 0 5
31254: PPUSH
31255: CALL 34589 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
31259: LD_VAR 0 1
31263: PUSH
31264: LD_INT 253
31266: EQUAL
31267: PUSH
31268: LD_VAR 0 2
31272: PPUSH
31273: CALL_OW 257
31277: PUSH
31278: LD_INT 5
31280: EQUAL
31281: AND
31282: IFFALSE 31303
// ComBinocular ( unit , x , y ) ;
31284: LD_VAR 0 2
31288: PPUSH
31289: LD_VAR 0 4
31293: PPUSH
31294: LD_VAR 0 5
31298: PPUSH
31299: CALL 34960 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
31303: LD_VAR 0 1
31307: PUSH
31308: LD_INT 254
31310: EQUAL
31311: PUSH
31312: LD_VAR 0 2
31316: PPUSH
31317: CALL_OW 264
31321: PUSH
31322: LD_EXP 38
31326: EQUAL
31327: AND
31328: PUSH
31329: LD_VAR 0 3
31333: PPUSH
31334: CALL_OW 263
31338: PUSH
31339: LD_INT 3
31341: EQUAL
31342: AND
31343: IFFALSE 31359
// HackDestroyVehicle ( unit , selectedUnit ) ;
31345: LD_VAR 0 2
31349: PPUSH
31350: LD_VAR 0 3
31354: PPUSH
31355: CALL 33255 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
31359: LD_VAR 0 1
31363: PUSH
31364: LD_INT 255
31366: EQUAL
31367: PUSH
31368: LD_VAR 0 2
31372: PPUSH
31373: CALL_OW 264
31377: PUSH
31378: LD_INT 14
31380: PUSH
31381: LD_INT 53
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: IN
31388: AND
31389: PUSH
31390: LD_VAR 0 4
31394: PPUSH
31395: LD_VAR 0 5
31399: PPUSH
31400: CALL_OW 488
31404: AND
31405: IFFALSE 31429
// CutTreeXYR ( unit , x , y , 12 ) ;
31407: LD_VAR 0 2
31411: PPUSH
31412: LD_VAR 0 4
31416: PPUSH
31417: LD_VAR 0 5
31421: PPUSH
31422: LD_INT 12
31424: PPUSH
31425: CALL 31821 0 4
// if cmd = 256 then
31429: LD_VAR 0 1
31433: PUSH
31434: LD_INT 256
31436: EQUAL
31437: IFFALSE 31458
// SetFactoryWaypoint ( unit , x , y ) ;
31439: LD_VAR 0 2
31443: PPUSH
31444: LD_VAR 0 4
31448: PPUSH
31449: LD_VAR 0 5
31453: PPUSH
31454: CALL 31463 0 3
// end ;
31458: LD_VAR 0 6
31462: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
31463: LD_INT 0
31465: PPUSH
31466: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
31467: LD_VAR 0 1
31471: NOT
31472: PUSH
31473: LD_VAR 0 2
31477: PPUSH
31478: LD_VAR 0 3
31482: PPUSH
31483: CALL_OW 488
31487: NOT
31488: OR
31489: PUSH
31490: LD_VAR 0 1
31494: PPUSH
31495: CALL_OW 266
31499: PUSH
31500: LD_INT 3
31502: NONEQUAL
31503: PUSH
31504: LD_VAR 0 1
31508: PPUSH
31509: CALL_OW 247
31513: PUSH
31514: LD_INT 1
31516: EQUAL
31517: NOT
31518: AND
31519: OR
31520: IFFALSE 31524
// exit ;
31522: GO 31673
// if GetType ( factory ) = unit_human then
31524: LD_VAR 0 1
31528: PPUSH
31529: CALL_OW 247
31533: PUSH
31534: LD_INT 1
31536: EQUAL
31537: IFFALSE 31554
// factory := IsInUnit ( factory ) ;
31539: LD_ADDR_VAR 0 1
31543: PUSH
31544: LD_VAR 0 1
31548: PPUSH
31549: CALL_OW 310
31553: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
31554: LD_VAR 0 1
31558: PPUSH
31559: CALL_OW 266
31563: PUSH
31564: LD_INT 3
31566: NONEQUAL
31567: IFFALSE 31571
// exit ;
31569: GO 31673
// if HexInfo ( x , y ) = factory then
31571: LD_VAR 0 2
31575: PPUSH
31576: LD_VAR 0 3
31580: PPUSH
31581: CALL_OW 428
31585: PUSH
31586: LD_VAR 0 1
31590: EQUAL
31591: IFFALSE 31618
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
31593: LD_ADDR_EXP 113
31597: PUSH
31598: LD_EXP 113
31602: PPUSH
31603: LD_VAR 0 1
31607: PPUSH
31608: LD_INT 0
31610: PPUSH
31611: CALL_OW 1
31615: ST_TO_ADDR
31616: GO 31669
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
31618: LD_ADDR_EXP 113
31622: PUSH
31623: LD_EXP 113
31627: PPUSH
31628: LD_VAR 0 1
31632: PPUSH
31633: LD_VAR 0 1
31637: PPUSH
31638: CALL_OW 255
31642: PUSH
31643: LD_VAR 0 1
31647: PUSH
31648: LD_VAR 0 2
31652: PUSH
31653: LD_VAR 0 3
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: PPUSH
31664: CALL_OW 1
31668: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31669: CALL 31678 0 0
// end ;
31673: LD_VAR 0 4
31677: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
31678: LD_INT 0
31680: PPUSH
31681: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
31682: LD_STRING resetFactoryWaypoint();
31684: PPUSH
31685: CALL_OW 559
// if factoryWaypoints then
31689: LD_EXP 113
31693: IFFALSE 31816
// begin for i := 1 to factoryWaypoints do
31695: LD_ADDR_VAR 0 2
31699: PUSH
31700: DOUBLE
31701: LD_INT 1
31703: DEC
31704: ST_TO_ADDR
31705: LD_EXP 113
31709: PUSH
31710: FOR_TO
31711: IFFALSE 31814
// if factoryWaypoints [ i ] then
31713: LD_EXP 113
31717: PUSH
31718: LD_VAR 0 2
31722: ARRAY
31723: IFFALSE 31812
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
31725: LD_STRING setFactoryWaypointXY(
31727: PUSH
31728: LD_EXP 113
31732: PUSH
31733: LD_VAR 0 2
31737: ARRAY
31738: PUSH
31739: LD_INT 1
31741: ARRAY
31742: STR
31743: PUSH
31744: LD_STRING ,
31746: STR
31747: PUSH
31748: LD_EXP 113
31752: PUSH
31753: LD_VAR 0 2
31757: ARRAY
31758: PUSH
31759: LD_INT 2
31761: ARRAY
31762: STR
31763: PUSH
31764: LD_STRING ,
31766: STR
31767: PUSH
31768: LD_EXP 113
31772: PUSH
31773: LD_VAR 0 2
31777: ARRAY
31778: PUSH
31779: LD_INT 3
31781: ARRAY
31782: STR
31783: PUSH
31784: LD_STRING ,
31786: STR
31787: PUSH
31788: LD_EXP 113
31792: PUSH
31793: LD_VAR 0 2
31797: ARRAY
31798: PUSH
31799: LD_INT 4
31801: ARRAY
31802: STR
31803: PUSH
31804: LD_STRING )
31806: STR
31807: PPUSH
31808: CALL_OW 559
31812: GO 31710
31814: POP
31815: POP
// end ; end ;
31816: LD_VAR 0 1
31820: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
31821: LD_INT 0
31823: PPUSH
31824: PPUSH
31825: PPUSH
31826: PPUSH
31827: PPUSH
31828: PPUSH
31829: PPUSH
31830: PPUSH
31831: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
31832: LD_VAR 0 1
31836: NOT
31837: PUSH
31838: LD_VAR 0 2
31842: PPUSH
31843: LD_VAR 0 3
31847: PPUSH
31848: CALL_OW 488
31852: NOT
31853: OR
31854: PUSH
31855: LD_VAR 0 4
31859: NOT
31860: OR
31861: IFFALSE 31865
// exit ;
31863: GO 32205
// list := [ ] ;
31865: LD_ADDR_VAR 0 13
31869: PUSH
31870: EMPTY
31871: ST_TO_ADDR
// if x - r < 0 then
31872: LD_VAR 0 2
31876: PUSH
31877: LD_VAR 0 4
31881: MINUS
31882: PUSH
31883: LD_INT 0
31885: LESS
31886: IFFALSE 31898
// min_x := 0 else
31888: LD_ADDR_VAR 0 7
31892: PUSH
31893: LD_INT 0
31895: ST_TO_ADDR
31896: GO 31914
// min_x := x - r ;
31898: LD_ADDR_VAR 0 7
31902: PUSH
31903: LD_VAR 0 2
31907: PUSH
31908: LD_VAR 0 4
31912: MINUS
31913: ST_TO_ADDR
// if y - r < 0 then
31914: LD_VAR 0 3
31918: PUSH
31919: LD_VAR 0 4
31923: MINUS
31924: PUSH
31925: LD_INT 0
31927: LESS
31928: IFFALSE 31940
// min_y := 0 else
31930: LD_ADDR_VAR 0 8
31934: PUSH
31935: LD_INT 0
31937: ST_TO_ADDR
31938: GO 31956
// min_y := y - r ;
31940: LD_ADDR_VAR 0 8
31944: PUSH
31945: LD_VAR 0 3
31949: PUSH
31950: LD_VAR 0 4
31954: MINUS
31955: ST_TO_ADDR
// max_x := x + r ;
31956: LD_ADDR_VAR 0 9
31960: PUSH
31961: LD_VAR 0 2
31965: PUSH
31966: LD_VAR 0 4
31970: PLUS
31971: ST_TO_ADDR
// max_y := y + r ;
31972: LD_ADDR_VAR 0 10
31976: PUSH
31977: LD_VAR 0 3
31981: PUSH
31982: LD_VAR 0 4
31986: PLUS
31987: ST_TO_ADDR
// for _x = min_x to max_x do
31988: LD_ADDR_VAR 0 11
31992: PUSH
31993: DOUBLE
31994: LD_VAR 0 7
31998: DEC
31999: ST_TO_ADDR
32000: LD_VAR 0 9
32004: PUSH
32005: FOR_TO
32006: IFFALSE 32123
// for _y = min_y to max_y do
32008: LD_ADDR_VAR 0 12
32012: PUSH
32013: DOUBLE
32014: LD_VAR 0 8
32018: DEC
32019: ST_TO_ADDR
32020: LD_VAR 0 10
32024: PUSH
32025: FOR_TO
32026: IFFALSE 32119
// begin if not ValidHex ( _x , _y ) then
32028: LD_VAR 0 11
32032: PPUSH
32033: LD_VAR 0 12
32037: PPUSH
32038: CALL_OW 488
32042: NOT
32043: IFFALSE 32047
// continue ;
32045: GO 32025
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32047: LD_VAR 0 11
32051: PPUSH
32052: LD_VAR 0 12
32056: PPUSH
32057: CALL_OW 351
32061: PUSH
32062: LD_VAR 0 11
32066: PPUSH
32067: LD_VAR 0 12
32071: PPUSH
32072: CALL_OW 554
32076: AND
32077: IFFALSE 32117
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32079: LD_ADDR_VAR 0 13
32083: PUSH
32084: LD_VAR 0 13
32088: PPUSH
32089: LD_VAR 0 13
32093: PUSH
32094: LD_INT 1
32096: PLUS
32097: PPUSH
32098: LD_VAR 0 11
32102: PUSH
32103: LD_VAR 0 12
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PPUSH
32112: CALL_OW 2
32116: ST_TO_ADDR
// end ;
32117: GO 32025
32119: POP
32120: POP
32121: GO 32005
32123: POP
32124: POP
// if not list then
32125: LD_VAR 0 13
32129: NOT
32130: IFFALSE 32134
// exit ;
32132: GO 32205
// for i in list do
32134: LD_ADDR_VAR 0 6
32138: PUSH
32139: LD_VAR 0 13
32143: PUSH
32144: FOR_IN
32145: IFFALSE 32203
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32147: LD_VAR 0 1
32151: PPUSH
32152: LD_STRING M
32154: PUSH
32155: LD_VAR 0 6
32159: PUSH
32160: LD_INT 1
32162: ARRAY
32163: PUSH
32164: LD_VAR 0 6
32168: PUSH
32169: LD_INT 2
32171: ARRAY
32172: PUSH
32173: LD_INT 0
32175: PUSH
32176: LD_INT 0
32178: PUSH
32179: LD_INT 0
32181: PUSH
32182: LD_INT 0
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: PUSH
32194: EMPTY
32195: LIST
32196: PPUSH
32197: CALL_OW 447
32201: GO 32144
32203: POP
32204: POP
// end ;
32205: LD_VAR 0 5
32209: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32210: LD_EXP 114
32214: NOT
32215: IFFALSE 32265
32217: GO 32219
32219: DISABLE
// begin initHack := true ;
32220: LD_ADDR_EXP 114
32224: PUSH
32225: LD_INT 1
32227: ST_TO_ADDR
// hackTanks := [ ] ;
32228: LD_ADDR_EXP 115
32232: PUSH
32233: EMPTY
32234: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32235: LD_ADDR_EXP 116
32239: PUSH
32240: EMPTY
32241: ST_TO_ADDR
// hackLimit := 3 ;
32242: LD_ADDR_EXP 117
32246: PUSH
32247: LD_INT 3
32249: ST_TO_ADDR
// hackDist := 12 ;
32250: LD_ADDR_EXP 118
32254: PUSH
32255: LD_INT 12
32257: ST_TO_ADDR
// hackCounter := [ ] ;
32258: LD_ADDR_EXP 119
32262: PUSH
32263: EMPTY
32264: ST_TO_ADDR
// end ;
32265: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32266: LD_EXP 114
32270: PUSH
32271: LD_INT 34
32273: PUSH
32274: LD_EXP 38
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PPUSH
32283: CALL_OW 69
32287: AND
32288: IFFALSE 32543
32290: GO 32292
32292: DISABLE
32293: LD_INT 0
32295: PPUSH
32296: PPUSH
// begin enable ;
32297: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
32298: LD_ADDR_VAR 0 1
32302: PUSH
32303: LD_INT 34
32305: PUSH
32306: LD_EXP 38
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PPUSH
32315: CALL_OW 69
32319: PUSH
32320: FOR_IN
32321: IFFALSE 32541
// begin if not i in hackTanks then
32323: LD_VAR 0 1
32327: PUSH
32328: LD_EXP 115
32332: IN
32333: NOT
32334: IFFALSE 32417
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
32336: LD_ADDR_EXP 115
32340: PUSH
32341: LD_EXP 115
32345: PPUSH
32346: LD_EXP 115
32350: PUSH
32351: LD_INT 1
32353: PLUS
32354: PPUSH
32355: LD_VAR 0 1
32359: PPUSH
32360: CALL_OW 1
32364: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
32365: LD_ADDR_EXP 116
32369: PUSH
32370: LD_EXP 116
32374: PPUSH
32375: LD_EXP 116
32379: PUSH
32380: LD_INT 1
32382: PLUS
32383: PPUSH
32384: EMPTY
32385: PPUSH
32386: CALL_OW 1
32390: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
32391: LD_ADDR_EXP 119
32395: PUSH
32396: LD_EXP 119
32400: PPUSH
32401: LD_EXP 119
32405: PUSH
32406: LD_INT 1
32408: PLUS
32409: PPUSH
32410: EMPTY
32411: PPUSH
32412: CALL_OW 1
32416: ST_TO_ADDR
// end ; if not IsOk ( i ) then
32417: LD_VAR 0 1
32421: PPUSH
32422: CALL_OW 302
32426: NOT
32427: IFFALSE 32440
// begin HackUnlinkAll ( i ) ;
32429: LD_VAR 0 1
32433: PPUSH
32434: CALL 32546 0 1
// continue ;
32438: GO 32320
// end ; HackCheckCapturedStatus ( i ) ;
32440: LD_VAR 0 1
32444: PPUSH
32445: CALL 32989 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
32449: LD_ADDR_VAR 0 2
32453: PUSH
32454: LD_INT 81
32456: PUSH
32457: LD_VAR 0 1
32461: PPUSH
32462: CALL_OW 255
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 33
32473: PUSH
32474: LD_INT 3
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 91
32483: PUSH
32484: LD_VAR 0 1
32488: PUSH
32489: LD_EXP 118
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 50
32501: PUSH
32502: EMPTY
32503: LIST
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: PPUSH
32511: CALL_OW 69
32515: ST_TO_ADDR
// if not tmp then
32516: LD_VAR 0 2
32520: NOT
32521: IFFALSE 32525
// continue ;
32523: GO 32320
// HackLink ( i , tmp ) ;
32525: LD_VAR 0 1
32529: PPUSH
32530: LD_VAR 0 2
32534: PPUSH
32535: CALL 32682 0 2
// end ;
32539: GO 32320
32541: POP
32542: POP
// end ;
32543: PPOPN 2
32545: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
32546: LD_INT 0
32548: PPUSH
32549: PPUSH
32550: PPUSH
// if not hack in hackTanks then
32551: LD_VAR 0 1
32555: PUSH
32556: LD_EXP 115
32560: IN
32561: NOT
32562: IFFALSE 32566
// exit ;
32564: GO 32677
// index := GetElementIndex ( hackTanks , hack ) ;
32566: LD_ADDR_VAR 0 4
32570: PUSH
32571: LD_EXP 115
32575: PPUSH
32576: LD_VAR 0 1
32580: PPUSH
32581: CALL 40151 0 2
32585: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
32586: LD_EXP 116
32590: PUSH
32591: LD_VAR 0 4
32595: ARRAY
32596: IFFALSE 32677
// begin for i in hackTanksCaptured [ index ] do
32598: LD_ADDR_VAR 0 3
32602: PUSH
32603: LD_EXP 116
32607: PUSH
32608: LD_VAR 0 4
32612: ARRAY
32613: PUSH
32614: FOR_IN
32615: IFFALSE 32641
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
32617: LD_VAR 0 3
32621: PUSH
32622: LD_INT 1
32624: ARRAY
32625: PPUSH
32626: LD_VAR 0 3
32630: PUSH
32631: LD_INT 2
32633: ARRAY
32634: PPUSH
32635: CALL_OW 235
32639: GO 32614
32641: POP
32642: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
32643: LD_ADDR_EXP 116
32647: PUSH
32648: LD_EXP 116
32652: PPUSH
32653: LD_VAR 0 4
32657: PPUSH
32658: EMPTY
32659: PPUSH
32660: CALL_OW 1
32664: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
32665: LD_VAR 0 1
32669: PPUSH
32670: LD_INT 0
32672: PPUSH
32673: CALL_OW 505
// end ; end ;
32677: LD_VAR 0 2
32681: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
32682: LD_INT 0
32684: PPUSH
32685: PPUSH
32686: PPUSH
// if not hack in hackTanks or not vehicles then
32687: LD_VAR 0 1
32691: PUSH
32692: LD_EXP 115
32696: IN
32697: NOT
32698: PUSH
32699: LD_VAR 0 2
32703: NOT
32704: OR
32705: IFFALSE 32709
// exit ;
32707: GO 32984
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
32709: LD_ADDR_VAR 0 2
32713: PUSH
32714: LD_VAR 0 1
32718: PPUSH
32719: LD_VAR 0 2
32723: PPUSH
32724: LD_INT 1
32726: PPUSH
32727: LD_INT 1
32729: PPUSH
32730: CALL 40801 0 4
32734: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
32735: LD_ADDR_VAR 0 5
32739: PUSH
32740: LD_EXP 115
32744: PPUSH
32745: LD_VAR 0 1
32749: PPUSH
32750: CALL 40151 0 2
32754: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
32755: LD_EXP 116
32759: PUSH
32760: LD_VAR 0 5
32764: ARRAY
32765: PUSH
32766: LD_EXP 117
32770: LESS
32771: IFFALSE 32960
// begin for i := 1 to vehicles do
32773: LD_ADDR_VAR 0 4
32777: PUSH
32778: DOUBLE
32779: LD_INT 1
32781: DEC
32782: ST_TO_ADDR
32783: LD_VAR 0 2
32787: PUSH
32788: FOR_TO
32789: IFFALSE 32958
// begin if hackTanksCaptured [ index ] = hackLimit then
32791: LD_EXP 116
32795: PUSH
32796: LD_VAR 0 5
32800: ARRAY
32801: PUSH
32802: LD_EXP 117
32806: EQUAL
32807: IFFALSE 32811
// break ;
32809: GO 32958
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
32811: LD_ADDR_EXP 119
32815: PUSH
32816: LD_EXP 119
32820: PPUSH
32821: LD_VAR 0 5
32825: PPUSH
32826: LD_EXP 119
32830: PUSH
32831: LD_VAR 0 5
32835: ARRAY
32836: PUSH
32837: LD_INT 1
32839: PLUS
32840: PPUSH
32841: CALL_OW 1
32845: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
32846: LD_ADDR_EXP 116
32850: PUSH
32851: LD_EXP 116
32855: PPUSH
32856: LD_VAR 0 5
32860: PUSH
32861: LD_EXP 116
32865: PUSH
32866: LD_VAR 0 5
32870: ARRAY
32871: PUSH
32872: LD_INT 1
32874: PLUS
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PPUSH
32880: LD_VAR 0 2
32884: PUSH
32885: LD_VAR 0 4
32889: ARRAY
32890: PUSH
32891: LD_VAR 0 2
32895: PUSH
32896: LD_VAR 0 4
32900: ARRAY
32901: PPUSH
32902: CALL_OW 255
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PPUSH
32911: CALL 40366 0 3
32915: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
32916: LD_VAR 0 2
32920: PUSH
32921: LD_VAR 0 4
32925: ARRAY
32926: PPUSH
32927: LD_VAR 0 1
32931: PPUSH
32932: CALL_OW 255
32936: PPUSH
32937: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
32941: LD_VAR 0 2
32945: PUSH
32946: LD_VAR 0 4
32950: ARRAY
32951: PPUSH
32952: CALL_OW 141
// end ;
32956: GO 32788
32958: POP
32959: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32960: LD_VAR 0 1
32964: PPUSH
32965: LD_EXP 116
32969: PUSH
32970: LD_VAR 0 5
32974: ARRAY
32975: PUSH
32976: LD_INT 0
32978: PLUS
32979: PPUSH
32980: CALL_OW 505
// end ;
32984: LD_VAR 0 3
32988: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
32989: LD_INT 0
32991: PPUSH
32992: PPUSH
32993: PPUSH
32994: PPUSH
// if not hack in hackTanks then
32995: LD_VAR 0 1
32999: PUSH
33000: LD_EXP 115
33004: IN
33005: NOT
33006: IFFALSE 33010
// exit ;
33008: GO 33250
// index := GetElementIndex ( hackTanks , hack ) ;
33010: LD_ADDR_VAR 0 4
33014: PUSH
33015: LD_EXP 115
33019: PPUSH
33020: LD_VAR 0 1
33024: PPUSH
33025: CALL 40151 0 2
33029: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33030: LD_ADDR_VAR 0 3
33034: PUSH
33035: DOUBLE
33036: LD_EXP 116
33040: PUSH
33041: LD_VAR 0 4
33045: ARRAY
33046: INC
33047: ST_TO_ADDR
33048: LD_INT 1
33050: PUSH
33051: FOR_DOWNTO
33052: IFFALSE 33224
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33054: LD_ADDR_VAR 0 5
33058: PUSH
33059: LD_EXP 116
33063: PUSH
33064: LD_VAR 0 4
33068: ARRAY
33069: PUSH
33070: LD_VAR 0 3
33074: ARRAY
33075: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33076: LD_VAR 0 5
33080: PUSH
33081: LD_INT 1
33083: ARRAY
33084: PPUSH
33085: CALL_OW 302
33089: NOT
33090: PUSH
33091: LD_VAR 0 5
33095: PUSH
33096: LD_INT 1
33098: ARRAY
33099: PPUSH
33100: CALL_OW 255
33104: PUSH
33105: LD_VAR 0 1
33109: PPUSH
33110: CALL_OW 255
33114: NONEQUAL
33115: OR
33116: IFFALSE 33222
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33118: LD_VAR 0 5
33122: PUSH
33123: LD_INT 1
33125: ARRAY
33126: PPUSH
33127: CALL_OW 305
33131: PUSH
33132: LD_VAR 0 5
33136: PUSH
33137: LD_INT 1
33139: ARRAY
33140: PPUSH
33141: CALL_OW 255
33145: PUSH
33146: LD_VAR 0 1
33150: PPUSH
33151: CALL_OW 255
33155: EQUAL
33156: AND
33157: IFFALSE 33181
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33159: LD_VAR 0 5
33163: PUSH
33164: LD_INT 1
33166: ARRAY
33167: PPUSH
33168: LD_VAR 0 5
33172: PUSH
33173: LD_INT 2
33175: ARRAY
33176: PPUSH
33177: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33181: LD_ADDR_EXP 116
33185: PUSH
33186: LD_EXP 116
33190: PPUSH
33191: LD_VAR 0 4
33195: PPUSH
33196: LD_EXP 116
33200: PUSH
33201: LD_VAR 0 4
33205: ARRAY
33206: PPUSH
33207: LD_VAR 0 3
33211: PPUSH
33212: CALL_OW 3
33216: PPUSH
33217: CALL_OW 1
33221: ST_TO_ADDR
// end ; end ;
33222: GO 33051
33224: POP
33225: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33226: LD_VAR 0 1
33230: PPUSH
33231: LD_EXP 116
33235: PUSH
33236: LD_VAR 0 4
33240: ARRAY
33241: PUSH
33242: LD_INT 0
33244: PLUS
33245: PPUSH
33246: CALL_OW 505
// end ;
33250: LD_VAR 0 2
33254: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33255: LD_INT 0
33257: PPUSH
33258: PPUSH
33259: PPUSH
33260: PPUSH
// if not hack in hackTanks then
33261: LD_VAR 0 1
33265: PUSH
33266: LD_EXP 115
33270: IN
33271: NOT
33272: IFFALSE 33276
// exit ;
33274: GO 33361
// index := GetElementIndex ( hackTanks , hack ) ;
33276: LD_ADDR_VAR 0 5
33280: PUSH
33281: LD_EXP 115
33285: PPUSH
33286: LD_VAR 0 1
33290: PPUSH
33291: CALL 40151 0 2
33295: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
33296: LD_ADDR_VAR 0 4
33300: PUSH
33301: DOUBLE
33302: LD_INT 1
33304: DEC
33305: ST_TO_ADDR
33306: LD_EXP 116
33310: PUSH
33311: LD_VAR 0 5
33315: ARRAY
33316: PUSH
33317: FOR_TO
33318: IFFALSE 33359
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
33320: LD_EXP 116
33324: PUSH
33325: LD_VAR 0 5
33329: ARRAY
33330: PUSH
33331: LD_VAR 0 4
33335: ARRAY
33336: PUSH
33337: LD_INT 1
33339: ARRAY
33340: PUSH
33341: LD_VAR 0 2
33345: EQUAL
33346: IFFALSE 33357
// KillUnit ( vehicle ) ;
33348: LD_VAR 0 2
33352: PPUSH
33353: CALL_OW 66
33357: GO 33317
33359: POP
33360: POP
// end ;
33361: LD_VAR 0 3
33365: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
33366: LD_EXP 120
33370: NOT
33371: IFFALSE 33406
33373: GO 33375
33375: DISABLE
// begin initMiner := true ;
33376: LD_ADDR_EXP 120
33380: PUSH
33381: LD_INT 1
33383: ST_TO_ADDR
// minersList := [ ] ;
33384: LD_ADDR_EXP 121
33388: PUSH
33389: EMPTY
33390: ST_TO_ADDR
// minerMinesList := [ ] ;
33391: LD_ADDR_EXP 122
33395: PUSH
33396: EMPTY
33397: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
33398: LD_ADDR_EXP 123
33402: PUSH
33403: LD_INT 5
33405: ST_TO_ADDR
// end ;
33406: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
33407: LD_EXP 120
33411: PUSH
33412: LD_INT 34
33414: PUSH
33415: LD_EXP 43
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PPUSH
33424: CALL_OW 69
33428: AND
33429: IFFALSE 33892
33431: GO 33433
33433: DISABLE
33434: LD_INT 0
33436: PPUSH
33437: PPUSH
33438: PPUSH
33439: PPUSH
// begin enable ;
33440: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
33441: LD_ADDR_VAR 0 1
33445: PUSH
33446: LD_INT 34
33448: PUSH
33449: LD_EXP 43
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PPUSH
33458: CALL_OW 69
33462: PUSH
33463: FOR_IN
33464: IFFALSE 33536
// begin if not i in minersList then
33466: LD_VAR 0 1
33470: PUSH
33471: LD_EXP 121
33475: IN
33476: NOT
33477: IFFALSE 33534
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
33479: LD_ADDR_EXP 121
33483: PUSH
33484: LD_EXP 121
33488: PPUSH
33489: LD_EXP 121
33493: PUSH
33494: LD_INT 1
33496: PLUS
33497: PPUSH
33498: LD_VAR 0 1
33502: PPUSH
33503: CALL_OW 1
33507: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
33508: LD_ADDR_EXP 122
33512: PUSH
33513: LD_EXP 122
33517: PPUSH
33518: LD_EXP 122
33522: PUSH
33523: LD_INT 1
33525: PLUS
33526: PPUSH
33527: EMPTY
33528: PPUSH
33529: CALL_OW 1
33533: ST_TO_ADDR
// end end ;
33534: GO 33463
33536: POP
33537: POP
// for i := minerMinesList downto 1 do
33538: LD_ADDR_VAR 0 1
33542: PUSH
33543: DOUBLE
33544: LD_EXP 122
33548: INC
33549: ST_TO_ADDR
33550: LD_INT 1
33552: PUSH
33553: FOR_DOWNTO
33554: IFFALSE 33890
// begin if IsLive ( minersList [ i ] ) then
33556: LD_EXP 121
33560: PUSH
33561: LD_VAR 0 1
33565: ARRAY
33566: PPUSH
33567: CALL_OW 300
33571: IFFALSE 33599
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
33573: LD_EXP 121
33577: PUSH
33578: LD_VAR 0 1
33582: ARRAY
33583: PPUSH
33584: LD_EXP 122
33588: PUSH
33589: LD_VAR 0 1
33593: ARRAY
33594: PPUSH
33595: CALL_OW 505
// if not minerMinesList [ i ] then
33599: LD_EXP 122
33603: PUSH
33604: LD_VAR 0 1
33608: ARRAY
33609: NOT
33610: IFFALSE 33614
// continue ;
33612: GO 33553
// for j := minerMinesList [ i ] downto 1 do
33614: LD_ADDR_VAR 0 2
33618: PUSH
33619: DOUBLE
33620: LD_EXP 122
33624: PUSH
33625: LD_VAR 0 1
33629: ARRAY
33630: INC
33631: ST_TO_ADDR
33632: LD_INT 1
33634: PUSH
33635: FOR_DOWNTO
33636: IFFALSE 33886
// begin side := GetSide ( minersList [ i ] ) ;
33638: LD_ADDR_VAR 0 3
33642: PUSH
33643: LD_EXP 121
33647: PUSH
33648: LD_VAR 0 1
33652: ARRAY
33653: PPUSH
33654: CALL_OW 255
33658: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
33659: LD_ADDR_VAR 0 4
33663: PUSH
33664: LD_EXP 122
33668: PUSH
33669: LD_VAR 0 1
33673: ARRAY
33674: PUSH
33675: LD_VAR 0 2
33679: ARRAY
33680: PUSH
33681: LD_INT 1
33683: ARRAY
33684: PPUSH
33685: LD_EXP 122
33689: PUSH
33690: LD_VAR 0 1
33694: ARRAY
33695: PUSH
33696: LD_VAR 0 2
33700: ARRAY
33701: PUSH
33702: LD_INT 2
33704: ARRAY
33705: PPUSH
33706: CALL_OW 428
33710: ST_TO_ADDR
// if not tmp then
33711: LD_VAR 0 4
33715: NOT
33716: IFFALSE 33720
// continue ;
33718: GO 33635
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
33720: LD_VAR 0 4
33724: PUSH
33725: LD_INT 81
33727: PUSH
33728: LD_VAR 0 3
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PPUSH
33737: CALL_OW 69
33741: IN
33742: PUSH
33743: LD_EXP 122
33747: PUSH
33748: LD_VAR 0 1
33752: ARRAY
33753: PUSH
33754: LD_VAR 0 2
33758: ARRAY
33759: PUSH
33760: LD_INT 1
33762: ARRAY
33763: PPUSH
33764: LD_EXP 122
33768: PUSH
33769: LD_VAR 0 1
33773: ARRAY
33774: PUSH
33775: LD_VAR 0 2
33779: ARRAY
33780: PUSH
33781: LD_INT 2
33783: ARRAY
33784: PPUSH
33785: CALL_OW 458
33789: AND
33790: IFFALSE 33884
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
33792: LD_EXP 122
33796: PUSH
33797: LD_VAR 0 1
33801: ARRAY
33802: PUSH
33803: LD_VAR 0 2
33807: ARRAY
33808: PUSH
33809: LD_INT 1
33811: ARRAY
33812: PPUSH
33813: LD_EXP 122
33817: PUSH
33818: LD_VAR 0 1
33822: ARRAY
33823: PUSH
33824: LD_VAR 0 2
33828: ARRAY
33829: PUSH
33830: LD_INT 2
33832: ARRAY
33833: PPUSH
33834: LD_VAR 0 3
33838: PPUSH
33839: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
33843: LD_ADDR_EXP 122
33847: PUSH
33848: LD_EXP 122
33852: PPUSH
33853: LD_VAR 0 1
33857: PPUSH
33858: LD_EXP 122
33862: PUSH
33863: LD_VAR 0 1
33867: ARRAY
33868: PPUSH
33869: LD_VAR 0 2
33873: PPUSH
33874: CALL_OW 3
33878: PPUSH
33879: CALL_OW 1
33883: ST_TO_ADDR
// end ; end ;
33884: GO 33635
33886: POP
33887: POP
// end ;
33888: GO 33553
33890: POP
33891: POP
// end ;
33892: PPOPN 4
33894: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
33895: LD_INT 0
33897: PPUSH
33898: PPUSH
// result := false ;
33899: LD_ADDR_VAR 0 4
33903: PUSH
33904: LD_INT 0
33906: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
33907: LD_VAR 0 1
33911: PPUSH
33912: CALL_OW 264
33916: PUSH
33917: LD_EXP 43
33921: EQUAL
33922: NOT
33923: IFFALSE 33927
// exit ;
33925: GO 34167
// index := GetElementIndex ( minersList , unit ) ;
33927: LD_ADDR_VAR 0 5
33931: PUSH
33932: LD_EXP 121
33936: PPUSH
33937: LD_VAR 0 1
33941: PPUSH
33942: CALL 40151 0 2
33946: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
33947: LD_EXP 122
33951: PUSH
33952: LD_VAR 0 5
33956: ARRAY
33957: PUSH
33958: LD_EXP 123
33962: GREATEREQUAL
33963: IFFALSE 33967
// exit ;
33965: GO 34167
// ComMoveXY ( unit , x , y ) ;
33967: LD_VAR 0 1
33971: PPUSH
33972: LD_VAR 0 2
33976: PPUSH
33977: LD_VAR 0 3
33981: PPUSH
33982: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33986: LD_INT 35
33988: PPUSH
33989: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
33993: LD_VAR 0 1
33997: PPUSH
33998: LD_VAR 0 2
34002: PPUSH
34003: LD_VAR 0 3
34007: PPUSH
34008: CALL 70923 0 3
34012: NOT
34013: PUSH
34014: LD_VAR 0 1
34018: PPUSH
34019: CALL_OW 314
34023: AND
34024: IFFALSE 34028
// exit ;
34026: GO 34167
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34028: LD_VAR 0 2
34032: PPUSH
34033: LD_VAR 0 3
34037: PPUSH
34038: CALL_OW 428
34042: PUSH
34043: LD_VAR 0 1
34047: EQUAL
34048: PUSH
34049: LD_VAR 0 1
34053: PPUSH
34054: CALL_OW 314
34058: NOT
34059: AND
34060: IFFALSE 33986
// PlaySoundXY ( x , y , PlantMine ) ;
34062: LD_VAR 0 2
34066: PPUSH
34067: LD_VAR 0 3
34071: PPUSH
34072: LD_STRING PlantMine
34074: PPUSH
34075: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
34079: LD_VAR 0 2
34083: PPUSH
34084: LD_VAR 0 3
34088: PPUSH
34089: LD_VAR 0 1
34093: PPUSH
34094: CALL_OW 255
34098: PPUSH
34099: LD_INT 0
34101: PPUSH
34102: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
34106: LD_ADDR_EXP 122
34110: PUSH
34111: LD_EXP 122
34115: PPUSH
34116: LD_VAR 0 5
34120: PUSH
34121: LD_EXP 122
34125: PUSH
34126: LD_VAR 0 5
34130: ARRAY
34131: PUSH
34132: LD_INT 1
34134: PLUS
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PPUSH
34140: LD_VAR 0 2
34144: PUSH
34145: LD_VAR 0 3
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PPUSH
34154: CALL 40366 0 3
34158: ST_TO_ADDR
// result := true ;
34159: LD_ADDR_VAR 0 4
34163: PUSH
34164: LD_INT 1
34166: ST_TO_ADDR
// end ;
34167: LD_VAR 0 4
34171: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
34172: LD_INT 0
34174: PPUSH
34175: PPUSH
34176: PPUSH
// if not unit in minersList then
34177: LD_VAR 0 1
34181: PUSH
34182: LD_EXP 121
34186: IN
34187: NOT
34188: IFFALSE 34192
// exit ;
34190: GO 34584
// index := GetElementIndex ( minersList , unit ) ;
34192: LD_ADDR_VAR 0 6
34196: PUSH
34197: LD_EXP 121
34201: PPUSH
34202: LD_VAR 0 1
34206: PPUSH
34207: CALL 40151 0 2
34211: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
34212: LD_ADDR_VAR 0 5
34216: PUSH
34217: DOUBLE
34218: LD_EXP 122
34222: PUSH
34223: LD_VAR 0 6
34227: ARRAY
34228: INC
34229: ST_TO_ADDR
34230: LD_INT 1
34232: PUSH
34233: FOR_DOWNTO
34234: IFFALSE 34395
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
34236: LD_EXP 122
34240: PUSH
34241: LD_VAR 0 6
34245: ARRAY
34246: PUSH
34247: LD_VAR 0 5
34251: ARRAY
34252: PUSH
34253: LD_INT 1
34255: ARRAY
34256: PUSH
34257: LD_VAR 0 2
34261: EQUAL
34262: PUSH
34263: LD_EXP 122
34267: PUSH
34268: LD_VAR 0 6
34272: ARRAY
34273: PUSH
34274: LD_VAR 0 5
34278: ARRAY
34279: PUSH
34280: LD_INT 2
34282: ARRAY
34283: PUSH
34284: LD_VAR 0 3
34288: EQUAL
34289: AND
34290: IFFALSE 34393
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34292: LD_EXP 122
34296: PUSH
34297: LD_VAR 0 6
34301: ARRAY
34302: PUSH
34303: LD_VAR 0 5
34307: ARRAY
34308: PUSH
34309: LD_INT 1
34311: ARRAY
34312: PPUSH
34313: LD_EXP 122
34317: PUSH
34318: LD_VAR 0 6
34322: ARRAY
34323: PUSH
34324: LD_VAR 0 5
34328: ARRAY
34329: PUSH
34330: LD_INT 2
34332: ARRAY
34333: PPUSH
34334: LD_VAR 0 1
34338: PPUSH
34339: CALL_OW 255
34343: PPUSH
34344: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34348: LD_ADDR_EXP 122
34352: PUSH
34353: LD_EXP 122
34357: PPUSH
34358: LD_VAR 0 6
34362: PPUSH
34363: LD_EXP 122
34367: PUSH
34368: LD_VAR 0 6
34372: ARRAY
34373: PPUSH
34374: LD_VAR 0 5
34378: PPUSH
34379: CALL_OW 3
34383: PPUSH
34384: CALL_OW 1
34388: ST_TO_ADDR
// exit ;
34389: POP
34390: POP
34391: GO 34584
// end ; end ;
34393: GO 34233
34395: POP
34396: POP
// for i := minerMinesList [ index ] downto 1 do
34397: LD_ADDR_VAR 0 5
34401: PUSH
34402: DOUBLE
34403: LD_EXP 122
34407: PUSH
34408: LD_VAR 0 6
34412: ARRAY
34413: INC
34414: ST_TO_ADDR
34415: LD_INT 1
34417: PUSH
34418: FOR_DOWNTO
34419: IFFALSE 34582
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
34421: LD_EXP 122
34425: PUSH
34426: LD_VAR 0 6
34430: ARRAY
34431: PUSH
34432: LD_VAR 0 5
34436: ARRAY
34437: PUSH
34438: LD_INT 1
34440: ARRAY
34441: PPUSH
34442: LD_EXP 122
34446: PUSH
34447: LD_VAR 0 6
34451: ARRAY
34452: PUSH
34453: LD_VAR 0 5
34457: ARRAY
34458: PUSH
34459: LD_INT 2
34461: ARRAY
34462: PPUSH
34463: LD_VAR 0 2
34467: PPUSH
34468: LD_VAR 0 3
34472: PPUSH
34473: CALL_OW 298
34477: PUSH
34478: LD_INT 6
34480: LESS
34481: IFFALSE 34580
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34483: LD_EXP 122
34487: PUSH
34488: LD_VAR 0 6
34492: ARRAY
34493: PUSH
34494: LD_VAR 0 5
34498: ARRAY
34499: PUSH
34500: LD_INT 1
34502: ARRAY
34503: PPUSH
34504: LD_EXP 122
34508: PUSH
34509: LD_VAR 0 6
34513: ARRAY
34514: PUSH
34515: LD_VAR 0 5
34519: ARRAY
34520: PUSH
34521: LD_INT 2
34523: ARRAY
34524: PPUSH
34525: LD_VAR 0 1
34529: PPUSH
34530: CALL_OW 255
34534: PPUSH
34535: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34539: LD_ADDR_EXP 122
34543: PUSH
34544: LD_EXP 122
34548: PPUSH
34549: LD_VAR 0 6
34553: PPUSH
34554: LD_EXP 122
34558: PUSH
34559: LD_VAR 0 6
34563: ARRAY
34564: PPUSH
34565: LD_VAR 0 5
34569: PPUSH
34570: CALL_OW 3
34574: PPUSH
34575: CALL_OW 1
34579: ST_TO_ADDR
// end ; end ;
34580: GO 34418
34582: POP
34583: POP
// end ;
34584: LD_VAR 0 4
34588: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
34589: LD_INT 0
34591: PPUSH
34592: PPUSH
34593: PPUSH
34594: PPUSH
34595: PPUSH
34596: PPUSH
34597: PPUSH
34598: PPUSH
34599: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
34600: LD_VAR 0 1
34604: PPUSH
34605: CALL_OW 264
34609: PUSH
34610: LD_EXP 43
34614: EQUAL
34615: NOT
34616: PUSH
34617: LD_VAR 0 1
34621: PUSH
34622: LD_EXP 121
34626: IN
34627: NOT
34628: OR
34629: IFFALSE 34633
// exit ;
34631: GO 34955
// index := GetElementIndex ( minersList , unit ) ;
34633: LD_ADDR_VAR 0 6
34637: PUSH
34638: LD_EXP 121
34642: PPUSH
34643: LD_VAR 0 1
34647: PPUSH
34648: CALL 40151 0 2
34652: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
34653: LD_ADDR_VAR 0 8
34657: PUSH
34658: LD_EXP 123
34662: PUSH
34663: LD_EXP 122
34667: PUSH
34668: LD_VAR 0 6
34672: ARRAY
34673: MINUS
34674: ST_TO_ADDR
// if not minesFreeAmount then
34675: LD_VAR 0 8
34679: NOT
34680: IFFALSE 34684
// exit ;
34682: GO 34955
// tmp := [ ] ;
34684: LD_ADDR_VAR 0 7
34688: PUSH
34689: EMPTY
34690: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
34691: LD_ADDR_VAR 0 5
34695: PUSH
34696: DOUBLE
34697: LD_INT 1
34699: DEC
34700: ST_TO_ADDR
34701: LD_VAR 0 8
34705: PUSH
34706: FOR_TO
34707: IFFALSE 34902
// begin _d := rand ( 0 , 5 ) ;
34709: LD_ADDR_VAR 0 11
34713: PUSH
34714: LD_INT 0
34716: PPUSH
34717: LD_INT 5
34719: PPUSH
34720: CALL_OW 12
34724: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
34725: LD_ADDR_VAR 0 12
34729: PUSH
34730: LD_INT 2
34732: PPUSH
34733: LD_INT 6
34735: PPUSH
34736: CALL_OW 12
34740: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
34741: LD_ADDR_VAR 0 9
34745: PUSH
34746: LD_VAR 0 2
34750: PPUSH
34751: LD_VAR 0 11
34755: PPUSH
34756: LD_VAR 0 12
34760: PPUSH
34761: CALL_OW 272
34765: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
34766: LD_ADDR_VAR 0 10
34770: PUSH
34771: LD_VAR 0 3
34775: PPUSH
34776: LD_VAR 0 11
34780: PPUSH
34781: LD_VAR 0 12
34785: PPUSH
34786: CALL_OW 273
34790: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
34791: LD_VAR 0 9
34795: PPUSH
34796: LD_VAR 0 10
34800: PPUSH
34801: CALL_OW 488
34805: PUSH
34806: LD_VAR 0 9
34810: PUSH
34811: LD_VAR 0 10
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_VAR 0 7
34824: IN
34825: NOT
34826: AND
34827: PUSH
34828: LD_VAR 0 9
34832: PPUSH
34833: LD_VAR 0 10
34837: PPUSH
34838: CALL_OW 458
34842: NOT
34843: AND
34844: IFFALSE 34886
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
34846: LD_ADDR_VAR 0 7
34850: PUSH
34851: LD_VAR 0 7
34855: PPUSH
34856: LD_VAR 0 7
34860: PUSH
34861: LD_INT 1
34863: PLUS
34864: PPUSH
34865: LD_VAR 0 9
34869: PUSH
34870: LD_VAR 0 10
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PPUSH
34879: CALL_OW 1
34883: ST_TO_ADDR
34884: GO 34900
// i := i - 1 ;
34886: LD_ADDR_VAR 0 5
34890: PUSH
34891: LD_VAR 0 5
34895: PUSH
34896: LD_INT 1
34898: MINUS
34899: ST_TO_ADDR
// end ;
34900: GO 34706
34902: POP
34903: POP
// for i in tmp do
34904: LD_ADDR_VAR 0 5
34908: PUSH
34909: LD_VAR 0 7
34913: PUSH
34914: FOR_IN
34915: IFFALSE 34953
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
34917: LD_VAR 0 1
34921: PPUSH
34922: LD_VAR 0 5
34926: PUSH
34927: LD_INT 1
34929: ARRAY
34930: PPUSH
34931: LD_VAR 0 5
34935: PUSH
34936: LD_INT 2
34938: ARRAY
34939: PPUSH
34940: CALL 33895 0 3
34944: NOT
34945: IFFALSE 34951
// exit ;
34947: POP
34948: POP
34949: GO 34955
34951: GO 34914
34953: POP
34954: POP
// end ;
34955: LD_VAR 0 4
34959: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
34960: LD_INT 0
34962: PPUSH
34963: PPUSH
34964: PPUSH
34965: PPUSH
34966: PPUSH
34967: PPUSH
34968: PPUSH
// if not GetClass ( unit ) = class_sniper then
34969: LD_VAR 0 1
34973: PPUSH
34974: CALL_OW 257
34978: PUSH
34979: LD_INT 5
34981: EQUAL
34982: NOT
34983: IFFALSE 34987
// exit ;
34985: GO 35375
// dist := 8 ;
34987: LD_ADDR_VAR 0 5
34991: PUSH
34992: LD_INT 8
34994: ST_TO_ADDR
// viewRange := 12 ;
34995: LD_ADDR_VAR 0 7
34999: PUSH
35000: LD_INT 12
35002: ST_TO_ADDR
// side := GetSide ( unit ) ;
35003: LD_ADDR_VAR 0 6
35007: PUSH
35008: LD_VAR 0 1
35012: PPUSH
35013: CALL_OW 255
35017: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35018: LD_INT 61
35020: PPUSH
35021: LD_VAR 0 6
35025: PPUSH
35026: CALL_OW 321
35030: PUSH
35031: LD_INT 2
35033: EQUAL
35034: IFFALSE 35044
// viewRange := 16 ;
35036: LD_ADDR_VAR 0 7
35040: PUSH
35041: LD_INT 16
35043: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35044: LD_VAR 0 1
35048: PPUSH
35049: LD_VAR 0 2
35053: PPUSH
35054: LD_VAR 0 3
35058: PPUSH
35059: CALL_OW 297
35063: PUSH
35064: LD_VAR 0 5
35068: GREATER
35069: IFFALSE 35148
// begin ComMoveXY ( unit , x , y ) ;
35071: LD_VAR 0 1
35075: PPUSH
35076: LD_VAR 0 2
35080: PPUSH
35081: LD_VAR 0 3
35085: PPUSH
35086: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35090: LD_INT 35
35092: PPUSH
35093: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
35097: LD_VAR 0 1
35101: PPUSH
35102: LD_VAR 0 2
35106: PPUSH
35107: LD_VAR 0 3
35111: PPUSH
35112: CALL 70923 0 3
35116: NOT
35117: IFFALSE 35121
// exit ;
35119: GO 35375
// until GetDistUnitXY ( unit , x , y ) < dist ;
35121: LD_VAR 0 1
35125: PPUSH
35126: LD_VAR 0 2
35130: PPUSH
35131: LD_VAR 0 3
35135: PPUSH
35136: CALL_OW 297
35140: PUSH
35141: LD_VAR 0 5
35145: LESS
35146: IFFALSE 35090
// end ; ComTurnXY ( unit , x , y ) ;
35148: LD_VAR 0 1
35152: PPUSH
35153: LD_VAR 0 2
35157: PPUSH
35158: LD_VAR 0 3
35162: PPUSH
35163: CALL_OW 118
// wait ( 5 ) ;
35167: LD_INT 5
35169: PPUSH
35170: CALL_OW 67
// _d := GetDir ( unit ) ;
35174: LD_ADDR_VAR 0 10
35178: PUSH
35179: LD_VAR 0 1
35183: PPUSH
35184: CALL_OW 254
35188: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
35189: LD_ADDR_VAR 0 8
35193: PUSH
35194: LD_VAR 0 1
35198: PPUSH
35199: CALL_OW 250
35203: PPUSH
35204: LD_VAR 0 10
35208: PPUSH
35209: LD_VAR 0 5
35213: PPUSH
35214: CALL_OW 272
35218: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
35219: LD_ADDR_VAR 0 9
35223: PUSH
35224: LD_VAR 0 1
35228: PPUSH
35229: CALL_OW 251
35233: PPUSH
35234: LD_VAR 0 10
35238: PPUSH
35239: LD_VAR 0 5
35243: PPUSH
35244: CALL_OW 273
35248: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35249: LD_VAR 0 8
35253: PPUSH
35254: LD_VAR 0 9
35258: PPUSH
35259: CALL_OW 488
35263: NOT
35264: IFFALSE 35268
// exit ;
35266: GO 35375
// ComAnimCustom ( unit , 1 ) ;
35268: LD_VAR 0 1
35272: PPUSH
35273: LD_INT 1
35275: PPUSH
35276: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
35280: LD_VAR 0 8
35284: PPUSH
35285: LD_VAR 0 9
35289: PPUSH
35290: LD_VAR 0 6
35294: PPUSH
35295: LD_VAR 0 7
35299: PPUSH
35300: CALL_OW 330
// repeat wait ( 1 ) ;
35304: LD_INT 1
35306: PPUSH
35307: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
35311: LD_VAR 0 1
35315: PPUSH
35316: CALL_OW 316
35320: PUSH
35321: LD_VAR 0 1
35325: PPUSH
35326: CALL_OW 314
35330: OR
35331: PUSH
35332: LD_VAR 0 1
35336: PPUSH
35337: CALL_OW 302
35341: NOT
35342: OR
35343: PUSH
35344: LD_VAR 0 1
35348: PPUSH
35349: CALL_OW 301
35353: OR
35354: IFFALSE 35304
// RemoveSeeing ( _x , _y , side ) ;
35356: LD_VAR 0 8
35360: PPUSH
35361: LD_VAR 0 9
35365: PPUSH
35366: LD_VAR 0 6
35370: PPUSH
35371: CALL_OW 331
// end ; end_of_file
35375: LD_VAR 0 4
35379: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35380: LD_INT 0
35382: PPUSH
35383: PPUSH
// if exist_mode then
35384: LD_VAR 0 2
35388: IFFALSE 35413
// unit := CreateCharacter ( prefix & ident ) else
35390: LD_ADDR_VAR 0 5
35394: PUSH
35395: LD_VAR 0 3
35399: PUSH
35400: LD_VAR 0 1
35404: STR
35405: PPUSH
35406: CALL_OW 34
35410: ST_TO_ADDR
35411: GO 35428
// unit := NewCharacter ( ident ) ;
35413: LD_ADDR_VAR 0 5
35417: PUSH
35418: LD_VAR 0 1
35422: PPUSH
35423: CALL_OW 25
35427: ST_TO_ADDR
// result := unit ;
35428: LD_ADDR_VAR 0 4
35432: PUSH
35433: LD_VAR 0 5
35437: ST_TO_ADDR
// end ;
35438: LD_VAR 0 4
35442: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35443: LD_INT 0
35445: PPUSH
35446: PPUSH
// if not side or not nation then
35447: LD_VAR 0 1
35451: NOT
35452: PUSH
35453: LD_VAR 0 2
35457: NOT
35458: OR
35459: IFFALSE 35463
// exit ;
35461: GO 36231
// case nation of nation_american :
35463: LD_VAR 0 2
35467: PUSH
35468: LD_INT 1
35470: DOUBLE
35471: EQUAL
35472: IFTRUE 35476
35474: GO 35690
35476: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
35477: LD_ADDR_VAR 0 4
35481: PUSH
35482: LD_INT 35
35484: PUSH
35485: LD_INT 45
35487: PUSH
35488: LD_INT 46
35490: PUSH
35491: LD_INT 47
35493: PUSH
35494: LD_INT 82
35496: PUSH
35497: LD_INT 83
35499: PUSH
35500: LD_INT 84
35502: PUSH
35503: LD_INT 85
35505: PUSH
35506: LD_INT 86
35508: PUSH
35509: LD_INT 1
35511: PUSH
35512: LD_INT 2
35514: PUSH
35515: LD_INT 6
35517: PUSH
35518: LD_INT 15
35520: PUSH
35521: LD_INT 16
35523: PUSH
35524: LD_INT 7
35526: PUSH
35527: LD_INT 12
35529: PUSH
35530: LD_INT 13
35532: PUSH
35533: LD_INT 10
35535: PUSH
35536: LD_INT 14
35538: PUSH
35539: LD_INT 20
35541: PUSH
35542: LD_INT 21
35544: PUSH
35545: LD_INT 22
35547: PUSH
35548: LD_INT 25
35550: PUSH
35551: LD_INT 32
35553: PUSH
35554: LD_INT 27
35556: PUSH
35557: LD_INT 36
35559: PUSH
35560: LD_INT 69
35562: PUSH
35563: LD_INT 39
35565: PUSH
35566: LD_INT 34
35568: PUSH
35569: LD_INT 40
35571: PUSH
35572: LD_INT 48
35574: PUSH
35575: LD_INT 49
35577: PUSH
35578: LD_INT 50
35580: PUSH
35581: LD_INT 51
35583: PUSH
35584: LD_INT 52
35586: PUSH
35587: LD_INT 53
35589: PUSH
35590: LD_INT 54
35592: PUSH
35593: LD_INT 55
35595: PUSH
35596: LD_INT 56
35598: PUSH
35599: LD_INT 57
35601: PUSH
35602: LD_INT 58
35604: PUSH
35605: LD_INT 59
35607: PUSH
35608: LD_INT 60
35610: PUSH
35611: LD_INT 61
35613: PUSH
35614: LD_INT 62
35616: PUSH
35617: LD_INT 80
35619: PUSH
35620: LD_INT 82
35622: PUSH
35623: LD_INT 83
35625: PUSH
35626: LD_INT 84
35628: PUSH
35629: LD_INT 85
35631: PUSH
35632: LD_INT 86
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: ST_TO_ADDR
35688: GO 36155
35690: LD_INT 2
35692: DOUBLE
35693: EQUAL
35694: IFTRUE 35698
35696: GO 35924
35698: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
35699: LD_ADDR_VAR 0 4
35703: PUSH
35704: LD_INT 35
35706: PUSH
35707: LD_INT 45
35709: PUSH
35710: LD_INT 46
35712: PUSH
35713: LD_INT 47
35715: PUSH
35716: LD_INT 82
35718: PUSH
35719: LD_INT 83
35721: PUSH
35722: LD_INT 84
35724: PUSH
35725: LD_INT 85
35727: PUSH
35728: LD_INT 87
35730: PUSH
35731: LD_INT 70
35733: PUSH
35734: LD_INT 1
35736: PUSH
35737: LD_INT 11
35739: PUSH
35740: LD_INT 3
35742: PUSH
35743: LD_INT 4
35745: PUSH
35746: LD_INT 5
35748: PUSH
35749: LD_INT 6
35751: PUSH
35752: LD_INT 15
35754: PUSH
35755: LD_INT 18
35757: PUSH
35758: LD_INT 7
35760: PUSH
35761: LD_INT 17
35763: PUSH
35764: LD_INT 8
35766: PUSH
35767: LD_INT 20
35769: PUSH
35770: LD_INT 21
35772: PUSH
35773: LD_INT 22
35775: PUSH
35776: LD_INT 72
35778: PUSH
35779: LD_INT 26
35781: PUSH
35782: LD_INT 69
35784: PUSH
35785: LD_INT 39
35787: PUSH
35788: LD_INT 40
35790: PUSH
35791: LD_INT 41
35793: PUSH
35794: LD_INT 42
35796: PUSH
35797: LD_INT 43
35799: PUSH
35800: LD_INT 48
35802: PUSH
35803: LD_INT 49
35805: PUSH
35806: LD_INT 50
35808: PUSH
35809: LD_INT 51
35811: PUSH
35812: LD_INT 52
35814: PUSH
35815: LD_INT 53
35817: PUSH
35818: LD_INT 54
35820: PUSH
35821: LD_INT 55
35823: PUSH
35824: LD_INT 56
35826: PUSH
35827: LD_INT 60
35829: PUSH
35830: LD_INT 61
35832: PUSH
35833: LD_INT 62
35835: PUSH
35836: LD_INT 66
35838: PUSH
35839: LD_INT 67
35841: PUSH
35842: LD_INT 68
35844: PUSH
35845: LD_INT 81
35847: PUSH
35848: LD_INT 82
35850: PUSH
35851: LD_INT 83
35853: PUSH
35854: LD_INT 84
35856: PUSH
35857: LD_INT 85
35859: PUSH
35860: LD_INT 87
35862: PUSH
35863: LD_INT 88
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: ST_TO_ADDR
35922: GO 36155
35924: LD_INT 3
35926: DOUBLE
35927: EQUAL
35928: IFTRUE 35932
35930: GO 36154
35932: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
35933: LD_ADDR_VAR 0 4
35937: PUSH
35938: LD_INT 46
35940: PUSH
35941: LD_INT 47
35943: PUSH
35944: LD_INT 1
35946: PUSH
35947: LD_INT 2
35949: PUSH
35950: LD_INT 82
35952: PUSH
35953: LD_INT 83
35955: PUSH
35956: LD_INT 84
35958: PUSH
35959: LD_INT 85
35961: PUSH
35962: LD_INT 86
35964: PUSH
35965: LD_INT 11
35967: PUSH
35968: LD_INT 9
35970: PUSH
35971: LD_INT 20
35973: PUSH
35974: LD_INT 19
35976: PUSH
35977: LD_INT 21
35979: PUSH
35980: LD_INT 24
35982: PUSH
35983: LD_INT 22
35985: PUSH
35986: LD_INT 25
35988: PUSH
35989: LD_INT 28
35991: PUSH
35992: LD_INT 29
35994: PUSH
35995: LD_INT 30
35997: PUSH
35998: LD_INT 31
36000: PUSH
36001: LD_INT 37
36003: PUSH
36004: LD_INT 38
36006: PUSH
36007: LD_INT 32
36009: PUSH
36010: LD_INT 27
36012: PUSH
36013: LD_INT 33
36015: PUSH
36016: LD_INT 69
36018: PUSH
36019: LD_INT 39
36021: PUSH
36022: LD_INT 34
36024: PUSH
36025: LD_INT 40
36027: PUSH
36028: LD_INT 71
36030: PUSH
36031: LD_INT 23
36033: PUSH
36034: LD_INT 44
36036: PUSH
36037: LD_INT 48
36039: PUSH
36040: LD_INT 49
36042: PUSH
36043: LD_INT 50
36045: PUSH
36046: LD_INT 51
36048: PUSH
36049: LD_INT 52
36051: PUSH
36052: LD_INT 53
36054: PUSH
36055: LD_INT 54
36057: PUSH
36058: LD_INT 55
36060: PUSH
36061: LD_INT 56
36063: PUSH
36064: LD_INT 57
36066: PUSH
36067: LD_INT 58
36069: PUSH
36070: LD_INT 59
36072: PUSH
36073: LD_INT 63
36075: PUSH
36076: LD_INT 64
36078: PUSH
36079: LD_INT 65
36081: PUSH
36082: LD_INT 82
36084: PUSH
36085: LD_INT 83
36087: PUSH
36088: LD_INT 84
36090: PUSH
36091: LD_INT 85
36093: PUSH
36094: LD_INT 86
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: ST_TO_ADDR
36152: GO 36155
36154: POP
// if state > - 1 and state < 3 then
36155: LD_VAR 0 3
36159: PUSH
36160: LD_INT 1
36162: NEG
36163: GREATER
36164: PUSH
36165: LD_VAR 0 3
36169: PUSH
36170: LD_INT 3
36172: LESS
36173: AND
36174: IFFALSE 36231
// for i in result do
36176: LD_ADDR_VAR 0 5
36180: PUSH
36181: LD_VAR 0 4
36185: PUSH
36186: FOR_IN
36187: IFFALSE 36229
// if GetTech ( i , side ) <> state then
36189: LD_VAR 0 5
36193: PPUSH
36194: LD_VAR 0 1
36198: PPUSH
36199: CALL_OW 321
36203: PUSH
36204: LD_VAR 0 3
36208: NONEQUAL
36209: IFFALSE 36227
// result := result diff i ;
36211: LD_ADDR_VAR 0 4
36215: PUSH
36216: LD_VAR 0 4
36220: PUSH
36221: LD_VAR 0 5
36225: DIFF
36226: ST_TO_ADDR
36227: GO 36186
36229: POP
36230: POP
// end ;
36231: LD_VAR 0 4
36235: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36236: LD_INT 0
36238: PPUSH
36239: PPUSH
36240: PPUSH
// result := true ;
36241: LD_ADDR_VAR 0 3
36245: PUSH
36246: LD_INT 1
36248: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36249: LD_ADDR_VAR 0 5
36253: PUSH
36254: LD_VAR 0 2
36258: PPUSH
36259: CALL_OW 480
36263: ST_TO_ADDR
// if not tmp then
36264: LD_VAR 0 5
36268: NOT
36269: IFFALSE 36273
// exit ;
36271: GO 36322
// for i in tmp do
36273: LD_ADDR_VAR 0 4
36277: PUSH
36278: LD_VAR 0 5
36282: PUSH
36283: FOR_IN
36284: IFFALSE 36320
// if GetTech ( i , side ) <> state_researched then
36286: LD_VAR 0 4
36290: PPUSH
36291: LD_VAR 0 1
36295: PPUSH
36296: CALL_OW 321
36300: PUSH
36301: LD_INT 2
36303: NONEQUAL
36304: IFFALSE 36318
// begin result := false ;
36306: LD_ADDR_VAR 0 3
36310: PUSH
36311: LD_INT 0
36313: ST_TO_ADDR
// exit ;
36314: POP
36315: POP
36316: GO 36322
// end ;
36318: GO 36283
36320: POP
36321: POP
// end ;
36322: LD_VAR 0 3
36326: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36327: LD_INT 0
36329: PPUSH
36330: PPUSH
36331: PPUSH
36332: PPUSH
36333: PPUSH
36334: PPUSH
36335: PPUSH
36336: PPUSH
36337: PPUSH
36338: PPUSH
36339: PPUSH
36340: PPUSH
36341: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36342: LD_VAR 0 1
36346: NOT
36347: PUSH
36348: LD_VAR 0 1
36352: PPUSH
36353: CALL_OW 257
36357: PUSH
36358: LD_INT 9
36360: NONEQUAL
36361: OR
36362: IFFALSE 36366
// exit ;
36364: GO 36939
// side := GetSide ( unit ) ;
36366: LD_ADDR_VAR 0 9
36370: PUSH
36371: LD_VAR 0 1
36375: PPUSH
36376: CALL_OW 255
36380: ST_TO_ADDR
// tech_space := tech_spacanom ;
36381: LD_ADDR_VAR 0 12
36385: PUSH
36386: LD_INT 29
36388: ST_TO_ADDR
// tech_time := tech_taurad ;
36389: LD_ADDR_VAR 0 13
36393: PUSH
36394: LD_INT 28
36396: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36397: LD_ADDR_VAR 0 11
36401: PUSH
36402: LD_VAR 0 1
36406: PPUSH
36407: CALL_OW 310
36411: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36412: LD_VAR 0 11
36416: PPUSH
36417: CALL_OW 247
36421: PUSH
36422: LD_INT 2
36424: EQUAL
36425: IFFALSE 36429
// exit ;
36427: GO 36939
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36429: LD_ADDR_VAR 0 8
36433: PUSH
36434: LD_INT 81
36436: PUSH
36437: LD_VAR 0 9
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 3
36448: PUSH
36449: LD_INT 21
36451: PUSH
36452: LD_INT 3
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PPUSH
36467: CALL_OW 69
36471: ST_TO_ADDR
// if not tmp then
36472: LD_VAR 0 8
36476: NOT
36477: IFFALSE 36481
// exit ;
36479: GO 36939
// if in_unit then
36481: LD_VAR 0 11
36485: IFFALSE 36509
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36487: LD_ADDR_VAR 0 10
36491: PUSH
36492: LD_VAR 0 8
36496: PPUSH
36497: LD_VAR 0 11
36501: PPUSH
36502: CALL_OW 74
36506: ST_TO_ADDR
36507: GO 36529
// enemy := NearestUnitToUnit ( tmp , unit ) ;
36509: LD_ADDR_VAR 0 10
36513: PUSH
36514: LD_VAR 0 8
36518: PPUSH
36519: LD_VAR 0 1
36523: PPUSH
36524: CALL_OW 74
36528: ST_TO_ADDR
// if not enemy then
36529: LD_VAR 0 10
36533: NOT
36534: IFFALSE 36538
// exit ;
36536: GO 36939
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
36538: LD_VAR 0 11
36542: PUSH
36543: LD_VAR 0 11
36547: PPUSH
36548: LD_VAR 0 10
36552: PPUSH
36553: CALL_OW 296
36557: PUSH
36558: LD_INT 13
36560: GREATER
36561: AND
36562: PUSH
36563: LD_VAR 0 1
36567: PPUSH
36568: LD_VAR 0 10
36572: PPUSH
36573: CALL_OW 296
36577: PUSH
36578: LD_INT 12
36580: GREATER
36581: OR
36582: IFFALSE 36586
// exit ;
36584: GO 36939
// missile := [ 1 ] ;
36586: LD_ADDR_VAR 0 14
36590: PUSH
36591: LD_INT 1
36593: PUSH
36594: EMPTY
36595: LIST
36596: ST_TO_ADDR
// if Researched ( side , tech_space ) then
36597: LD_VAR 0 9
36601: PPUSH
36602: LD_VAR 0 12
36606: PPUSH
36607: CALL_OW 325
36611: IFFALSE 36640
// missile := Insert ( missile , missile + 1 , 2 ) ;
36613: LD_ADDR_VAR 0 14
36617: PUSH
36618: LD_VAR 0 14
36622: PPUSH
36623: LD_VAR 0 14
36627: PUSH
36628: LD_INT 1
36630: PLUS
36631: PPUSH
36632: LD_INT 2
36634: PPUSH
36635: CALL_OW 2
36639: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
36640: LD_VAR 0 9
36644: PPUSH
36645: LD_VAR 0 13
36649: PPUSH
36650: CALL_OW 325
36654: PUSH
36655: LD_VAR 0 10
36659: PPUSH
36660: CALL_OW 255
36664: PPUSH
36665: LD_VAR 0 13
36669: PPUSH
36670: CALL_OW 325
36674: NOT
36675: AND
36676: IFFALSE 36705
// missile := Insert ( missile , missile + 1 , 3 ) ;
36678: LD_ADDR_VAR 0 14
36682: PUSH
36683: LD_VAR 0 14
36687: PPUSH
36688: LD_VAR 0 14
36692: PUSH
36693: LD_INT 1
36695: PLUS
36696: PPUSH
36697: LD_INT 3
36699: PPUSH
36700: CALL_OW 2
36704: ST_TO_ADDR
// if missile < 2 then
36705: LD_VAR 0 14
36709: PUSH
36710: LD_INT 2
36712: LESS
36713: IFFALSE 36717
// exit ;
36715: GO 36939
// x := GetX ( enemy ) ;
36717: LD_ADDR_VAR 0 4
36721: PUSH
36722: LD_VAR 0 10
36726: PPUSH
36727: CALL_OW 250
36731: ST_TO_ADDR
// y := GetY ( enemy ) ;
36732: LD_ADDR_VAR 0 5
36736: PUSH
36737: LD_VAR 0 10
36741: PPUSH
36742: CALL_OW 251
36746: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
36747: LD_ADDR_VAR 0 6
36751: PUSH
36752: LD_VAR 0 4
36756: PUSH
36757: LD_INT 1
36759: NEG
36760: PPUSH
36761: LD_INT 1
36763: PPUSH
36764: CALL_OW 12
36768: PLUS
36769: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
36770: LD_ADDR_VAR 0 7
36774: PUSH
36775: LD_VAR 0 5
36779: PUSH
36780: LD_INT 1
36782: NEG
36783: PPUSH
36784: LD_INT 1
36786: PPUSH
36787: CALL_OW 12
36791: PLUS
36792: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36793: LD_VAR 0 6
36797: PPUSH
36798: LD_VAR 0 7
36802: PPUSH
36803: CALL_OW 488
36807: NOT
36808: IFFALSE 36830
// begin _x := x ;
36810: LD_ADDR_VAR 0 6
36814: PUSH
36815: LD_VAR 0 4
36819: ST_TO_ADDR
// _y := y ;
36820: LD_ADDR_VAR 0 7
36824: PUSH
36825: LD_VAR 0 5
36829: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
36830: LD_ADDR_VAR 0 3
36834: PUSH
36835: LD_INT 1
36837: PPUSH
36838: LD_VAR 0 14
36842: PPUSH
36843: CALL_OW 12
36847: ST_TO_ADDR
// case i of 1 :
36848: LD_VAR 0 3
36852: PUSH
36853: LD_INT 1
36855: DOUBLE
36856: EQUAL
36857: IFTRUE 36861
36859: GO 36878
36861: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
36862: LD_VAR 0 1
36866: PPUSH
36867: LD_VAR 0 10
36871: PPUSH
36872: CALL_OW 115
36876: GO 36939
36878: LD_INT 2
36880: DOUBLE
36881: EQUAL
36882: IFTRUE 36886
36884: GO 36908
36886: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
36887: LD_VAR 0 1
36891: PPUSH
36892: LD_VAR 0 6
36896: PPUSH
36897: LD_VAR 0 7
36901: PPUSH
36902: CALL_OW 153
36906: GO 36939
36908: LD_INT 3
36910: DOUBLE
36911: EQUAL
36912: IFTRUE 36916
36914: GO 36938
36916: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
36917: LD_VAR 0 1
36921: PPUSH
36922: LD_VAR 0 6
36926: PPUSH
36927: LD_VAR 0 7
36931: PPUSH
36932: CALL_OW 154
36936: GO 36939
36938: POP
// end ;
36939: LD_VAR 0 2
36943: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
36944: LD_INT 0
36946: PPUSH
36947: PPUSH
36948: PPUSH
36949: PPUSH
36950: PPUSH
36951: PPUSH
// if not unit or not building then
36952: LD_VAR 0 1
36956: NOT
36957: PUSH
36958: LD_VAR 0 2
36962: NOT
36963: OR
36964: IFFALSE 36968
// exit ;
36966: GO 37126
// x := GetX ( building ) ;
36968: LD_ADDR_VAR 0 5
36972: PUSH
36973: LD_VAR 0 2
36977: PPUSH
36978: CALL_OW 250
36982: ST_TO_ADDR
// y := GetY ( building ) ;
36983: LD_ADDR_VAR 0 6
36987: PUSH
36988: LD_VAR 0 2
36992: PPUSH
36993: CALL_OW 251
36997: ST_TO_ADDR
// for i = 0 to 5 do
36998: LD_ADDR_VAR 0 4
37002: PUSH
37003: DOUBLE
37004: LD_INT 0
37006: DEC
37007: ST_TO_ADDR
37008: LD_INT 5
37010: PUSH
37011: FOR_TO
37012: IFFALSE 37124
// begin _x := ShiftX ( x , i , 3 ) ;
37014: LD_ADDR_VAR 0 7
37018: PUSH
37019: LD_VAR 0 5
37023: PPUSH
37024: LD_VAR 0 4
37028: PPUSH
37029: LD_INT 3
37031: PPUSH
37032: CALL_OW 272
37036: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37037: LD_ADDR_VAR 0 8
37041: PUSH
37042: LD_VAR 0 6
37046: PPUSH
37047: LD_VAR 0 4
37051: PPUSH
37052: LD_INT 3
37054: PPUSH
37055: CALL_OW 273
37059: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37060: LD_VAR 0 7
37064: PPUSH
37065: LD_VAR 0 8
37069: PPUSH
37070: CALL_OW 488
37074: NOT
37075: IFFALSE 37079
// continue ;
37077: GO 37011
// if HexInfo ( _x , _y ) = 0 then
37079: LD_VAR 0 7
37083: PPUSH
37084: LD_VAR 0 8
37088: PPUSH
37089: CALL_OW 428
37093: PUSH
37094: LD_INT 0
37096: EQUAL
37097: IFFALSE 37122
// begin ComMoveXY ( unit , _x , _y ) ;
37099: LD_VAR 0 1
37103: PPUSH
37104: LD_VAR 0 7
37108: PPUSH
37109: LD_VAR 0 8
37113: PPUSH
37114: CALL_OW 111
// exit ;
37118: POP
37119: POP
37120: GO 37126
// end ; end ;
37122: GO 37011
37124: POP
37125: POP
// end ;
37126: LD_VAR 0 3
37130: RET
// export function ScanBase ( side , base_area ) ; begin
37131: LD_INT 0
37133: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37134: LD_ADDR_VAR 0 3
37138: PUSH
37139: LD_VAR 0 2
37143: PPUSH
37144: LD_INT 81
37146: PUSH
37147: LD_VAR 0 1
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PPUSH
37156: CALL_OW 70
37160: ST_TO_ADDR
// end ;
37161: LD_VAR 0 3
37165: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37166: LD_INT 0
37168: PPUSH
37169: PPUSH
37170: PPUSH
37171: PPUSH
// result := false ;
37172: LD_ADDR_VAR 0 2
37176: PUSH
37177: LD_INT 0
37179: ST_TO_ADDR
// side := GetSide ( unit ) ;
37180: LD_ADDR_VAR 0 3
37184: PUSH
37185: LD_VAR 0 1
37189: PPUSH
37190: CALL_OW 255
37194: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37195: LD_ADDR_VAR 0 4
37199: PUSH
37200: LD_VAR 0 1
37204: PPUSH
37205: CALL_OW 248
37209: ST_TO_ADDR
// case nat of 1 :
37210: LD_VAR 0 4
37214: PUSH
37215: LD_INT 1
37217: DOUBLE
37218: EQUAL
37219: IFTRUE 37223
37221: GO 37234
37223: POP
// tech := tech_lassight ; 2 :
37224: LD_ADDR_VAR 0 5
37228: PUSH
37229: LD_INT 12
37231: ST_TO_ADDR
37232: GO 37273
37234: LD_INT 2
37236: DOUBLE
37237: EQUAL
37238: IFTRUE 37242
37240: GO 37253
37242: POP
// tech := tech_mortar ; 3 :
37243: LD_ADDR_VAR 0 5
37247: PUSH
37248: LD_INT 41
37250: ST_TO_ADDR
37251: GO 37273
37253: LD_INT 3
37255: DOUBLE
37256: EQUAL
37257: IFTRUE 37261
37259: GO 37272
37261: POP
// tech := tech_bazooka ; end ;
37262: LD_ADDR_VAR 0 5
37266: PUSH
37267: LD_INT 44
37269: ST_TO_ADDR
37270: GO 37273
37272: POP
// if Researched ( side , tech ) then
37273: LD_VAR 0 3
37277: PPUSH
37278: LD_VAR 0 5
37282: PPUSH
37283: CALL_OW 325
37287: IFFALSE 37314
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37289: LD_ADDR_VAR 0 2
37293: PUSH
37294: LD_INT 5
37296: PUSH
37297: LD_INT 8
37299: PUSH
37300: LD_INT 9
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: LIST
37307: PUSH
37308: LD_VAR 0 4
37312: ARRAY
37313: ST_TO_ADDR
// end ;
37314: LD_VAR 0 2
37318: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37319: LD_INT 0
37321: PPUSH
37322: PPUSH
37323: PPUSH
// if not mines then
37324: LD_VAR 0 2
37328: NOT
37329: IFFALSE 37333
// exit ;
37331: GO 37477
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37333: LD_ADDR_VAR 0 5
37337: PUSH
37338: LD_INT 81
37340: PUSH
37341: LD_VAR 0 1
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 3
37352: PUSH
37353: LD_INT 21
37355: PUSH
37356: LD_INT 3
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PPUSH
37371: CALL_OW 69
37375: ST_TO_ADDR
// for i in mines do
37376: LD_ADDR_VAR 0 4
37380: PUSH
37381: LD_VAR 0 2
37385: PUSH
37386: FOR_IN
37387: IFFALSE 37475
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37389: LD_VAR 0 4
37393: PUSH
37394: LD_INT 1
37396: ARRAY
37397: PPUSH
37398: LD_VAR 0 4
37402: PUSH
37403: LD_INT 2
37405: ARRAY
37406: PPUSH
37407: CALL_OW 458
37411: NOT
37412: IFFALSE 37416
// continue ;
37414: GO 37386
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37416: LD_VAR 0 4
37420: PUSH
37421: LD_INT 1
37423: ARRAY
37424: PPUSH
37425: LD_VAR 0 4
37429: PUSH
37430: LD_INT 2
37432: ARRAY
37433: PPUSH
37434: CALL_OW 428
37438: PUSH
37439: LD_VAR 0 5
37443: IN
37444: IFFALSE 37473
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37446: LD_VAR 0 4
37450: PUSH
37451: LD_INT 1
37453: ARRAY
37454: PPUSH
37455: LD_VAR 0 4
37459: PUSH
37460: LD_INT 2
37462: ARRAY
37463: PPUSH
37464: LD_VAR 0 1
37468: PPUSH
37469: CALL_OW 456
// end ;
37473: GO 37386
37475: POP
37476: POP
// end ;
37477: LD_VAR 0 3
37481: RET
// export function Count ( array ) ; var i ; begin
37482: LD_INT 0
37484: PPUSH
37485: PPUSH
// result := 0 ;
37486: LD_ADDR_VAR 0 2
37490: PUSH
37491: LD_INT 0
37493: ST_TO_ADDR
// for i in array do
37494: LD_ADDR_VAR 0 3
37498: PUSH
37499: LD_VAR 0 1
37503: PUSH
37504: FOR_IN
37505: IFFALSE 37529
// if i then
37507: LD_VAR 0 3
37511: IFFALSE 37527
// result := result + 1 ;
37513: LD_ADDR_VAR 0 2
37517: PUSH
37518: LD_VAR 0 2
37522: PUSH
37523: LD_INT 1
37525: PLUS
37526: ST_TO_ADDR
37527: GO 37504
37529: POP
37530: POP
// end ;
37531: LD_VAR 0 2
37535: RET
// export function IsEmpty ( building ) ; begin
37536: LD_INT 0
37538: PPUSH
// if not building then
37539: LD_VAR 0 1
37543: NOT
37544: IFFALSE 37548
// exit ;
37546: GO 37591
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
37548: LD_ADDR_VAR 0 2
37552: PUSH
37553: LD_VAR 0 1
37557: PUSH
37558: LD_INT 22
37560: PUSH
37561: LD_VAR 0 1
37565: PPUSH
37566: CALL_OW 255
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 58
37577: PUSH
37578: EMPTY
37579: LIST
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PPUSH
37585: CALL_OW 69
37589: IN
37590: ST_TO_ADDR
// end ;
37591: LD_VAR 0 2
37595: RET
// export function IsNotFull ( building ) ; begin
37596: LD_INT 0
37598: PPUSH
// if not building then
37599: LD_VAR 0 1
37603: NOT
37604: IFFALSE 37608
// exit ;
37606: GO 37627
// result := UnitsInside ( building ) < 6 ;
37608: LD_ADDR_VAR 0 2
37612: PUSH
37613: LD_VAR 0 1
37617: PPUSH
37618: CALL_OW 313
37622: PUSH
37623: LD_INT 6
37625: LESS
37626: ST_TO_ADDR
// end ;
37627: LD_VAR 0 2
37631: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37632: LD_INT 0
37634: PPUSH
37635: PPUSH
37636: PPUSH
37637: PPUSH
// tmp := [ ] ;
37638: LD_ADDR_VAR 0 3
37642: PUSH
37643: EMPTY
37644: ST_TO_ADDR
// list := [ ] ;
37645: LD_ADDR_VAR 0 5
37649: PUSH
37650: EMPTY
37651: ST_TO_ADDR
// for i = 16 to 25 do
37652: LD_ADDR_VAR 0 4
37656: PUSH
37657: DOUBLE
37658: LD_INT 16
37660: DEC
37661: ST_TO_ADDR
37662: LD_INT 25
37664: PUSH
37665: FOR_TO
37666: IFFALSE 37739
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
37668: LD_ADDR_VAR 0 3
37672: PUSH
37673: LD_VAR 0 3
37677: PUSH
37678: LD_INT 22
37680: PUSH
37681: LD_VAR 0 1
37685: PPUSH
37686: CALL_OW 255
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 91
37697: PUSH
37698: LD_VAR 0 1
37702: PUSH
37703: LD_INT 6
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 30
37713: PUSH
37714: LD_VAR 0 4
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: LIST
37727: PUSH
37728: EMPTY
37729: LIST
37730: PPUSH
37731: CALL_OW 69
37735: ADD
37736: ST_TO_ADDR
37737: GO 37665
37739: POP
37740: POP
// for i = 1 to tmp do
37741: LD_ADDR_VAR 0 4
37745: PUSH
37746: DOUBLE
37747: LD_INT 1
37749: DEC
37750: ST_TO_ADDR
37751: LD_VAR 0 3
37755: PUSH
37756: FOR_TO
37757: IFFALSE 37845
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
37759: LD_ADDR_VAR 0 5
37763: PUSH
37764: LD_VAR 0 5
37768: PUSH
37769: LD_VAR 0 3
37773: PUSH
37774: LD_VAR 0 4
37778: ARRAY
37779: PPUSH
37780: CALL_OW 266
37784: PUSH
37785: LD_VAR 0 3
37789: PUSH
37790: LD_VAR 0 4
37794: ARRAY
37795: PPUSH
37796: CALL_OW 250
37800: PUSH
37801: LD_VAR 0 3
37805: PUSH
37806: LD_VAR 0 4
37810: ARRAY
37811: PPUSH
37812: CALL_OW 251
37816: PUSH
37817: LD_VAR 0 3
37821: PUSH
37822: LD_VAR 0 4
37826: ARRAY
37827: PPUSH
37828: CALL_OW 254
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: PUSH
37839: EMPTY
37840: LIST
37841: ADD
37842: ST_TO_ADDR
37843: GO 37756
37845: POP
37846: POP
// result := list ;
37847: LD_ADDR_VAR 0 2
37851: PUSH
37852: LD_VAR 0 5
37856: ST_TO_ADDR
// end ;
37857: LD_VAR 0 2
37861: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
37862: LD_INT 0
37864: PPUSH
37865: PPUSH
37866: PPUSH
37867: PPUSH
37868: PPUSH
37869: PPUSH
37870: PPUSH
// if not factory then
37871: LD_VAR 0 1
37875: NOT
37876: IFFALSE 37880
// exit ;
37878: GO 38473
// if control = control_apeman then
37880: LD_VAR 0 4
37884: PUSH
37885: LD_INT 5
37887: EQUAL
37888: IFFALSE 37997
// begin tmp := UnitsInside ( factory ) ;
37890: LD_ADDR_VAR 0 8
37894: PUSH
37895: LD_VAR 0 1
37899: PPUSH
37900: CALL_OW 313
37904: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
37905: LD_VAR 0 8
37909: PPUSH
37910: LD_INT 25
37912: PUSH
37913: LD_INT 12
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PPUSH
37920: CALL_OW 72
37924: NOT
37925: IFFALSE 37935
// control := control_manual ;
37927: LD_ADDR_VAR 0 4
37931: PUSH
37932: LD_INT 1
37934: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
37935: LD_ADDR_VAR 0 8
37939: PUSH
37940: LD_VAR 0 1
37944: PPUSH
37945: CALL 37632 0 1
37949: ST_TO_ADDR
// if tmp then
37950: LD_VAR 0 8
37954: IFFALSE 37997
// begin for i in tmp do
37956: LD_ADDR_VAR 0 7
37960: PUSH
37961: LD_VAR 0 8
37965: PUSH
37966: FOR_IN
37967: IFFALSE 37995
// if i [ 1 ] = b_ext_radio then
37969: LD_VAR 0 7
37973: PUSH
37974: LD_INT 1
37976: ARRAY
37977: PUSH
37978: LD_INT 22
37980: EQUAL
37981: IFFALSE 37993
// begin control := control_remote ;
37983: LD_ADDR_VAR 0 4
37987: PUSH
37988: LD_INT 2
37990: ST_TO_ADDR
// break ;
37991: GO 37995
// end ;
37993: GO 37966
37995: POP
37996: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37997: LD_VAR 0 1
38001: PPUSH
38002: LD_VAR 0 2
38006: PPUSH
38007: LD_VAR 0 3
38011: PPUSH
38012: LD_VAR 0 4
38016: PPUSH
38017: LD_VAR 0 5
38021: PPUSH
38022: CALL_OW 448
38026: IFFALSE 38061
// begin result := [ chassis , engine , control , weapon ] ;
38028: LD_ADDR_VAR 0 6
38032: PUSH
38033: LD_VAR 0 2
38037: PUSH
38038: LD_VAR 0 3
38042: PUSH
38043: LD_VAR 0 4
38047: PUSH
38048: LD_VAR 0 5
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: ST_TO_ADDR
// exit ;
38059: GO 38473
// end ; _chassis := AvailableChassisList ( factory ) ;
38061: LD_ADDR_VAR 0 9
38065: PUSH
38066: LD_VAR 0 1
38070: PPUSH
38071: CALL_OW 475
38075: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38076: LD_ADDR_VAR 0 11
38080: PUSH
38081: LD_VAR 0 1
38085: PPUSH
38086: CALL_OW 476
38090: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38091: LD_ADDR_VAR 0 12
38095: PUSH
38096: LD_VAR 0 1
38100: PPUSH
38101: CALL_OW 477
38105: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38106: LD_ADDR_VAR 0 10
38110: PUSH
38111: LD_VAR 0 1
38115: PPUSH
38116: CALL_OW 478
38120: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38121: LD_VAR 0 9
38125: NOT
38126: PUSH
38127: LD_VAR 0 11
38131: NOT
38132: OR
38133: PUSH
38134: LD_VAR 0 12
38138: NOT
38139: OR
38140: PUSH
38141: LD_VAR 0 10
38145: NOT
38146: OR
38147: IFFALSE 38182
// begin result := [ chassis , engine , control , weapon ] ;
38149: LD_ADDR_VAR 0 6
38153: PUSH
38154: LD_VAR 0 2
38158: PUSH
38159: LD_VAR 0 3
38163: PUSH
38164: LD_VAR 0 4
38168: PUSH
38169: LD_VAR 0 5
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: ST_TO_ADDR
// exit ;
38180: GO 38473
// end ; if not chassis in _chassis then
38182: LD_VAR 0 2
38186: PUSH
38187: LD_VAR 0 9
38191: IN
38192: NOT
38193: IFFALSE 38219
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38195: LD_ADDR_VAR 0 2
38199: PUSH
38200: LD_VAR 0 9
38204: PUSH
38205: LD_INT 1
38207: PPUSH
38208: LD_VAR 0 9
38212: PPUSH
38213: CALL_OW 12
38217: ARRAY
38218: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38219: LD_VAR 0 2
38223: PPUSH
38224: LD_VAR 0 3
38228: PPUSH
38229: CALL 38478 0 2
38233: NOT
38234: IFFALSE 38293
// repeat engine := _engine [ 1 ] ;
38236: LD_ADDR_VAR 0 3
38240: PUSH
38241: LD_VAR 0 11
38245: PUSH
38246: LD_INT 1
38248: ARRAY
38249: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38250: LD_ADDR_VAR 0 11
38254: PUSH
38255: LD_VAR 0 11
38259: PPUSH
38260: LD_INT 1
38262: PPUSH
38263: CALL_OW 3
38267: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38268: LD_VAR 0 2
38272: PPUSH
38273: LD_VAR 0 3
38277: PPUSH
38278: CALL 38478 0 2
38282: PUSH
38283: LD_VAR 0 11
38287: PUSH
38288: EMPTY
38289: EQUAL
38290: OR
38291: IFFALSE 38236
// if not control in _control then
38293: LD_VAR 0 4
38297: PUSH
38298: LD_VAR 0 12
38302: IN
38303: NOT
38304: IFFALSE 38330
// control := _control [ rand ( 1 , _control ) ] ;
38306: LD_ADDR_VAR 0 4
38310: PUSH
38311: LD_VAR 0 12
38315: PUSH
38316: LD_INT 1
38318: PPUSH
38319: LD_VAR 0 12
38323: PPUSH
38324: CALL_OW 12
38328: ARRAY
38329: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38330: LD_VAR 0 2
38334: PPUSH
38335: LD_VAR 0 5
38339: PPUSH
38340: CALL 38698 0 2
38344: NOT
38345: IFFALSE 38404
// repeat weapon := _weapon [ 1 ] ;
38347: LD_ADDR_VAR 0 5
38351: PUSH
38352: LD_VAR 0 10
38356: PUSH
38357: LD_INT 1
38359: ARRAY
38360: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38361: LD_ADDR_VAR 0 10
38365: PUSH
38366: LD_VAR 0 10
38370: PPUSH
38371: LD_INT 1
38373: PPUSH
38374: CALL_OW 3
38378: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38379: LD_VAR 0 2
38383: PPUSH
38384: LD_VAR 0 5
38388: PPUSH
38389: CALL 38698 0 2
38393: PUSH
38394: LD_VAR 0 10
38398: PUSH
38399: EMPTY
38400: EQUAL
38401: OR
38402: IFFALSE 38347
// result := [ ] ;
38404: LD_ADDR_VAR 0 6
38408: PUSH
38409: EMPTY
38410: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38411: LD_VAR 0 1
38415: PPUSH
38416: LD_VAR 0 2
38420: PPUSH
38421: LD_VAR 0 3
38425: PPUSH
38426: LD_VAR 0 4
38430: PPUSH
38431: LD_VAR 0 5
38435: PPUSH
38436: CALL_OW 448
38440: IFFALSE 38473
// result := [ chassis , engine , control , weapon ] ;
38442: LD_ADDR_VAR 0 6
38446: PUSH
38447: LD_VAR 0 2
38451: PUSH
38452: LD_VAR 0 3
38456: PUSH
38457: LD_VAR 0 4
38461: PUSH
38462: LD_VAR 0 5
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: ST_TO_ADDR
// end ;
38473: LD_VAR 0 6
38477: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38478: LD_INT 0
38480: PPUSH
// if not chassis or not engine then
38481: LD_VAR 0 1
38485: NOT
38486: PUSH
38487: LD_VAR 0 2
38491: NOT
38492: OR
38493: IFFALSE 38497
// exit ;
38495: GO 38693
// case engine of engine_solar :
38497: LD_VAR 0 2
38501: PUSH
38502: LD_INT 2
38504: DOUBLE
38505: EQUAL
38506: IFTRUE 38510
38508: GO 38548
38510: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38511: LD_ADDR_VAR 0 3
38515: PUSH
38516: LD_INT 11
38518: PUSH
38519: LD_INT 12
38521: PUSH
38522: LD_INT 13
38524: PUSH
38525: LD_INT 14
38527: PUSH
38528: LD_INT 1
38530: PUSH
38531: LD_INT 2
38533: PUSH
38534: LD_INT 3
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: ST_TO_ADDR
38546: GO 38677
38548: LD_INT 1
38550: DOUBLE
38551: EQUAL
38552: IFTRUE 38556
38554: GO 38618
38556: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38557: LD_ADDR_VAR 0 3
38561: PUSH
38562: LD_INT 11
38564: PUSH
38565: LD_INT 12
38567: PUSH
38568: LD_INT 13
38570: PUSH
38571: LD_INT 14
38573: PUSH
38574: LD_INT 1
38576: PUSH
38577: LD_INT 2
38579: PUSH
38580: LD_INT 3
38582: PUSH
38583: LD_INT 4
38585: PUSH
38586: LD_INT 5
38588: PUSH
38589: LD_INT 21
38591: PUSH
38592: LD_INT 23
38594: PUSH
38595: LD_INT 22
38597: PUSH
38598: LD_INT 24
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: ST_TO_ADDR
38616: GO 38677
38618: LD_INT 3
38620: DOUBLE
38621: EQUAL
38622: IFTRUE 38626
38624: GO 38676
38626: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38627: LD_ADDR_VAR 0 3
38631: PUSH
38632: LD_INT 13
38634: PUSH
38635: LD_INT 14
38637: PUSH
38638: LD_INT 2
38640: PUSH
38641: LD_INT 3
38643: PUSH
38644: LD_INT 4
38646: PUSH
38647: LD_INT 5
38649: PUSH
38650: LD_INT 21
38652: PUSH
38653: LD_INT 22
38655: PUSH
38656: LD_INT 23
38658: PUSH
38659: LD_INT 24
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: ST_TO_ADDR
38674: GO 38677
38676: POP
// result := ( chassis in result ) ;
38677: LD_ADDR_VAR 0 3
38681: PUSH
38682: LD_VAR 0 1
38686: PUSH
38687: LD_VAR 0 3
38691: IN
38692: ST_TO_ADDR
// end ;
38693: LD_VAR 0 3
38697: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
38698: LD_INT 0
38700: PPUSH
// if not chassis or not weapon then
38701: LD_VAR 0 1
38705: NOT
38706: PUSH
38707: LD_VAR 0 2
38711: NOT
38712: OR
38713: IFFALSE 38717
// exit ;
38715: GO 39779
// case weapon of us_machine_gun :
38717: LD_VAR 0 2
38721: PUSH
38722: LD_INT 2
38724: DOUBLE
38725: EQUAL
38726: IFTRUE 38730
38728: GO 38760
38730: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
38731: LD_ADDR_VAR 0 3
38735: PUSH
38736: LD_INT 1
38738: PUSH
38739: LD_INT 2
38741: PUSH
38742: LD_INT 3
38744: PUSH
38745: LD_INT 4
38747: PUSH
38748: LD_INT 5
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: ST_TO_ADDR
38758: GO 39763
38760: LD_INT 3
38762: DOUBLE
38763: EQUAL
38764: IFTRUE 38768
38766: GO 38798
38768: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38769: LD_ADDR_VAR 0 3
38773: PUSH
38774: LD_INT 1
38776: PUSH
38777: LD_INT 2
38779: PUSH
38780: LD_INT 3
38782: PUSH
38783: LD_INT 4
38785: PUSH
38786: LD_INT 5
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: ST_TO_ADDR
38796: GO 39763
38798: LD_INT 11
38800: DOUBLE
38801: EQUAL
38802: IFTRUE 38806
38804: GO 38836
38806: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
38807: LD_ADDR_VAR 0 3
38811: PUSH
38812: LD_INT 1
38814: PUSH
38815: LD_INT 2
38817: PUSH
38818: LD_INT 3
38820: PUSH
38821: LD_INT 4
38823: PUSH
38824: LD_INT 5
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: ST_TO_ADDR
38834: GO 39763
38836: LD_INT 4
38838: DOUBLE
38839: EQUAL
38840: IFTRUE 38844
38842: GO 38870
38844: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
38845: LD_ADDR_VAR 0 3
38849: PUSH
38850: LD_INT 2
38852: PUSH
38853: LD_INT 3
38855: PUSH
38856: LD_INT 4
38858: PUSH
38859: LD_INT 5
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: ST_TO_ADDR
38868: GO 39763
38870: LD_INT 5
38872: DOUBLE
38873: EQUAL
38874: IFTRUE 38878
38876: GO 38904
38878: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
38879: LD_ADDR_VAR 0 3
38883: PUSH
38884: LD_INT 2
38886: PUSH
38887: LD_INT 3
38889: PUSH
38890: LD_INT 4
38892: PUSH
38893: LD_INT 5
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: ST_TO_ADDR
38902: GO 39763
38904: LD_INT 9
38906: DOUBLE
38907: EQUAL
38908: IFTRUE 38912
38910: GO 38938
38912: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
38913: LD_ADDR_VAR 0 3
38917: PUSH
38918: LD_INT 2
38920: PUSH
38921: LD_INT 3
38923: PUSH
38924: LD_INT 4
38926: PUSH
38927: LD_INT 5
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: ST_TO_ADDR
38936: GO 39763
38938: LD_INT 7
38940: DOUBLE
38941: EQUAL
38942: IFTRUE 38946
38944: GO 38972
38946: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
38947: LD_ADDR_VAR 0 3
38951: PUSH
38952: LD_INT 2
38954: PUSH
38955: LD_INT 3
38957: PUSH
38958: LD_INT 4
38960: PUSH
38961: LD_INT 5
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: ST_TO_ADDR
38970: GO 39763
38972: LD_INT 12
38974: DOUBLE
38975: EQUAL
38976: IFTRUE 38980
38978: GO 39006
38980: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
38981: LD_ADDR_VAR 0 3
38985: PUSH
38986: LD_INT 2
38988: PUSH
38989: LD_INT 3
38991: PUSH
38992: LD_INT 4
38994: PUSH
38995: LD_INT 5
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: ST_TO_ADDR
39004: GO 39763
39006: LD_INT 13
39008: DOUBLE
39009: EQUAL
39010: IFTRUE 39014
39012: GO 39040
39014: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39015: LD_ADDR_VAR 0 3
39019: PUSH
39020: LD_INT 2
39022: PUSH
39023: LD_INT 3
39025: PUSH
39026: LD_INT 4
39028: PUSH
39029: LD_INT 5
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: ST_TO_ADDR
39038: GO 39763
39040: LD_INT 14
39042: DOUBLE
39043: EQUAL
39044: IFTRUE 39048
39046: GO 39066
39048: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39049: LD_ADDR_VAR 0 3
39053: PUSH
39054: LD_INT 4
39056: PUSH
39057: LD_INT 5
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: ST_TO_ADDR
39064: GO 39763
39066: LD_INT 6
39068: DOUBLE
39069: EQUAL
39070: IFTRUE 39074
39072: GO 39092
39074: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39075: LD_ADDR_VAR 0 3
39079: PUSH
39080: LD_INT 4
39082: PUSH
39083: LD_INT 5
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: ST_TO_ADDR
39090: GO 39763
39092: LD_INT 10
39094: DOUBLE
39095: EQUAL
39096: IFTRUE 39100
39098: GO 39118
39100: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39101: LD_ADDR_VAR 0 3
39105: PUSH
39106: LD_INT 4
39108: PUSH
39109: LD_INT 5
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: ST_TO_ADDR
39116: GO 39763
39118: LD_INT 22
39120: DOUBLE
39121: EQUAL
39122: IFTRUE 39126
39124: GO 39152
39126: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39127: LD_ADDR_VAR 0 3
39131: PUSH
39132: LD_INT 11
39134: PUSH
39135: LD_INT 12
39137: PUSH
39138: LD_INT 13
39140: PUSH
39141: LD_INT 14
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: ST_TO_ADDR
39150: GO 39763
39152: LD_INT 23
39154: DOUBLE
39155: EQUAL
39156: IFTRUE 39160
39158: GO 39186
39160: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39161: LD_ADDR_VAR 0 3
39165: PUSH
39166: LD_INT 11
39168: PUSH
39169: LD_INT 12
39171: PUSH
39172: LD_INT 13
39174: PUSH
39175: LD_INT 14
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: ST_TO_ADDR
39184: GO 39763
39186: LD_INT 24
39188: DOUBLE
39189: EQUAL
39190: IFTRUE 39194
39192: GO 39220
39194: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39195: LD_ADDR_VAR 0 3
39199: PUSH
39200: LD_INT 11
39202: PUSH
39203: LD_INT 12
39205: PUSH
39206: LD_INT 13
39208: PUSH
39209: LD_INT 14
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: ST_TO_ADDR
39218: GO 39763
39220: LD_INT 30
39222: DOUBLE
39223: EQUAL
39224: IFTRUE 39228
39226: GO 39254
39228: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39229: LD_ADDR_VAR 0 3
39233: PUSH
39234: LD_INT 11
39236: PUSH
39237: LD_INT 12
39239: PUSH
39240: LD_INT 13
39242: PUSH
39243: LD_INT 14
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: ST_TO_ADDR
39252: GO 39763
39254: LD_INT 25
39256: DOUBLE
39257: EQUAL
39258: IFTRUE 39262
39260: GO 39280
39262: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39263: LD_ADDR_VAR 0 3
39267: PUSH
39268: LD_INT 13
39270: PUSH
39271: LD_INT 14
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: ST_TO_ADDR
39278: GO 39763
39280: LD_INT 27
39282: DOUBLE
39283: EQUAL
39284: IFTRUE 39288
39286: GO 39306
39288: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
39289: LD_ADDR_VAR 0 3
39293: PUSH
39294: LD_INT 13
39296: PUSH
39297: LD_INT 14
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: ST_TO_ADDR
39304: GO 39763
39306: LD_EXP 41
39310: DOUBLE
39311: EQUAL
39312: IFTRUE 39316
39314: GO 39342
39316: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39317: LD_ADDR_VAR 0 3
39321: PUSH
39322: LD_INT 11
39324: PUSH
39325: LD_INT 12
39327: PUSH
39328: LD_INT 13
39330: PUSH
39331: LD_INT 14
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: ST_TO_ADDR
39340: GO 39763
39342: LD_INT 28
39344: DOUBLE
39345: EQUAL
39346: IFTRUE 39350
39348: GO 39368
39350: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39351: LD_ADDR_VAR 0 3
39355: PUSH
39356: LD_INT 13
39358: PUSH
39359: LD_INT 14
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: ST_TO_ADDR
39366: GO 39763
39368: LD_INT 29
39370: DOUBLE
39371: EQUAL
39372: IFTRUE 39376
39374: GO 39394
39376: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39377: LD_ADDR_VAR 0 3
39381: PUSH
39382: LD_INT 13
39384: PUSH
39385: LD_INT 14
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: ST_TO_ADDR
39392: GO 39763
39394: LD_INT 31
39396: DOUBLE
39397: EQUAL
39398: IFTRUE 39402
39400: GO 39420
39402: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39403: LD_ADDR_VAR 0 3
39407: PUSH
39408: LD_INT 13
39410: PUSH
39411: LD_INT 14
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: ST_TO_ADDR
39418: GO 39763
39420: LD_INT 26
39422: DOUBLE
39423: EQUAL
39424: IFTRUE 39428
39426: GO 39446
39428: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39429: LD_ADDR_VAR 0 3
39433: PUSH
39434: LD_INT 13
39436: PUSH
39437: LD_INT 14
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: ST_TO_ADDR
39444: GO 39763
39446: LD_INT 42
39448: DOUBLE
39449: EQUAL
39450: IFTRUE 39454
39452: GO 39480
39454: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39455: LD_ADDR_VAR 0 3
39459: PUSH
39460: LD_INT 21
39462: PUSH
39463: LD_INT 22
39465: PUSH
39466: LD_INT 23
39468: PUSH
39469: LD_INT 24
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: ST_TO_ADDR
39478: GO 39763
39480: LD_INT 43
39482: DOUBLE
39483: EQUAL
39484: IFTRUE 39488
39486: GO 39514
39488: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39489: LD_ADDR_VAR 0 3
39493: PUSH
39494: LD_INT 21
39496: PUSH
39497: LD_INT 22
39499: PUSH
39500: LD_INT 23
39502: PUSH
39503: LD_INT 24
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: ST_TO_ADDR
39512: GO 39763
39514: LD_INT 44
39516: DOUBLE
39517: EQUAL
39518: IFTRUE 39522
39520: GO 39548
39522: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39523: LD_ADDR_VAR 0 3
39527: PUSH
39528: LD_INT 21
39530: PUSH
39531: LD_INT 22
39533: PUSH
39534: LD_INT 23
39536: PUSH
39537: LD_INT 24
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: ST_TO_ADDR
39546: GO 39763
39548: LD_INT 45
39550: DOUBLE
39551: EQUAL
39552: IFTRUE 39556
39554: GO 39582
39556: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39557: LD_ADDR_VAR 0 3
39561: PUSH
39562: LD_INT 21
39564: PUSH
39565: LD_INT 22
39567: PUSH
39568: LD_INT 23
39570: PUSH
39571: LD_INT 24
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: ST_TO_ADDR
39580: GO 39763
39582: LD_INT 49
39584: DOUBLE
39585: EQUAL
39586: IFTRUE 39590
39588: GO 39616
39590: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39591: LD_ADDR_VAR 0 3
39595: PUSH
39596: LD_INT 21
39598: PUSH
39599: LD_INT 22
39601: PUSH
39602: LD_INT 23
39604: PUSH
39605: LD_INT 24
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: ST_TO_ADDR
39614: GO 39763
39616: LD_INT 51
39618: DOUBLE
39619: EQUAL
39620: IFTRUE 39624
39622: GO 39650
39624: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39625: LD_ADDR_VAR 0 3
39629: PUSH
39630: LD_INT 21
39632: PUSH
39633: LD_INT 22
39635: PUSH
39636: LD_INT 23
39638: PUSH
39639: LD_INT 24
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: ST_TO_ADDR
39648: GO 39763
39650: LD_INT 52
39652: DOUBLE
39653: EQUAL
39654: IFTRUE 39658
39656: GO 39684
39658: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
39659: LD_ADDR_VAR 0 3
39663: PUSH
39664: LD_INT 21
39666: PUSH
39667: LD_INT 22
39669: PUSH
39670: LD_INT 23
39672: PUSH
39673: LD_INT 24
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: ST_TO_ADDR
39682: GO 39763
39684: LD_INT 53
39686: DOUBLE
39687: EQUAL
39688: IFTRUE 39692
39690: GO 39710
39692: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
39693: LD_ADDR_VAR 0 3
39697: PUSH
39698: LD_INT 23
39700: PUSH
39701: LD_INT 24
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: ST_TO_ADDR
39708: GO 39763
39710: LD_INT 46
39712: DOUBLE
39713: EQUAL
39714: IFTRUE 39718
39716: GO 39736
39718: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
39719: LD_ADDR_VAR 0 3
39723: PUSH
39724: LD_INT 23
39726: PUSH
39727: LD_INT 24
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: ST_TO_ADDR
39734: GO 39763
39736: LD_INT 47
39738: DOUBLE
39739: EQUAL
39740: IFTRUE 39744
39742: GO 39762
39744: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39745: LD_ADDR_VAR 0 3
39749: PUSH
39750: LD_INT 23
39752: PUSH
39753: LD_INT 24
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: ST_TO_ADDR
39760: GO 39763
39762: POP
// result := ( chassis in result ) ;
39763: LD_ADDR_VAR 0 3
39767: PUSH
39768: LD_VAR 0 1
39772: PUSH
39773: LD_VAR 0 3
39777: IN
39778: ST_TO_ADDR
// end ;
39779: LD_VAR 0 3
39783: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39784: LD_INT 0
39786: PPUSH
39787: PPUSH
39788: PPUSH
39789: PPUSH
39790: PPUSH
39791: PPUSH
39792: PPUSH
// result := array ;
39793: LD_ADDR_VAR 0 5
39797: PUSH
39798: LD_VAR 0 1
39802: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
39803: LD_VAR 0 1
39807: NOT
39808: PUSH
39809: LD_VAR 0 2
39813: NOT
39814: OR
39815: PUSH
39816: LD_VAR 0 3
39820: NOT
39821: OR
39822: PUSH
39823: LD_VAR 0 2
39827: PUSH
39828: LD_VAR 0 1
39832: GREATER
39833: OR
39834: PUSH
39835: LD_VAR 0 3
39839: PUSH
39840: LD_VAR 0 1
39844: GREATER
39845: OR
39846: IFFALSE 39850
// exit ;
39848: GO 40146
// if direction then
39850: LD_VAR 0 4
39854: IFFALSE 39918
// begin d := 1 ;
39856: LD_ADDR_VAR 0 9
39860: PUSH
39861: LD_INT 1
39863: ST_TO_ADDR
// if i_from > i_to then
39864: LD_VAR 0 2
39868: PUSH
39869: LD_VAR 0 3
39873: GREATER
39874: IFFALSE 39900
// length := ( array - i_from ) + i_to else
39876: LD_ADDR_VAR 0 11
39880: PUSH
39881: LD_VAR 0 1
39885: PUSH
39886: LD_VAR 0 2
39890: MINUS
39891: PUSH
39892: LD_VAR 0 3
39896: PLUS
39897: ST_TO_ADDR
39898: GO 39916
// length := i_to - i_from ;
39900: LD_ADDR_VAR 0 11
39904: PUSH
39905: LD_VAR 0 3
39909: PUSH
39910: LD_VAR 0 2
39914: MINUS
39915: ST_TO_ADDR
// end else
39916: GO 39979
// begin d := - 1 ;
39918: LD_ADDR_VAR 0 9
39922: PUSH
39923: LD_INT 1
39925: NEG
39926: ST_TO_ADDR
// if i_from > i_to then
39927: LD_VAR 0 2
39931: PUSH
39932: LD_VAR 0 3
39936: GREATER
39937: IFFALSE 39957
// length := i_from - i_to else
39939: LD_ADDR_VAR 0 11
39943: PUSH
39944: LD_VAR 0 2
39948: PUSH
39949: LD_VAR 0 3
39953: MINUS
39954: ST_TO_ADDR
39955: GO 39979
// length := ( array - i_to ) + i_from ;
39957: LD_ADDR_VAR 0 11
39961: PUSH
39962: LD_VAR 0 1
39966: PUSH
39967: LD_VAR 0 3
39971: MINUS
39972: PUSH
39973: LD_VAR 0 2
39977: PLUS
39978: ST_TO_ADDR
// end ; if not length then
39979: LD_VAR 0 11
39983: NOT
39984: IFFALSE 39988
// exit ;
39986: GO 40146
// tmp := array ;
39988: LD_ADDR_VAR 0 10
39992: PUSH
39993: LD_VAR 0 1
39997: ST_TO_ADDR
// for i = 1 to length do
39998: LD_ADDR_VAR 0 6
40002: PUSH
40003: DOUBLE
40004: LD_INT 1
40006: DEC
40007: ST_TO_ADDR
40008: LD_VAR 0 11
40012: PUSH
40013: FOR_TO
40014: IFFALSE 40134
// begin for j = 1 to array do
40016: LD_ADDR_VAR 0 7
40020: PUSH
40021: DOUBLE
40022: LD_INT 1
40024: DEC
40025: ST_TO_ADDR
40026: LD_VAR 0 1
40030: PUSH
40031: FOR_TO
40032: IFFALSE 40120
// begin k := j + d ;
40034: LD_ADDR_VAR 0 8
40038: PUSH
40039: LD_VAR 0 7
40043: PUSH
40044: LD_VAR 0 9
40048: PLUS
40049: ST_TO_ADDR
// if k > array then
40050: LD_VAR 0 8
40054: PUSH
40055: LD_VAR 0 1
40059: GREATER
40060: IFFALSE 40070
// k := 1 ;
40062: LD_ADDR_VAR 0 8
40066: PUSH
40067: LD_INT 1
40069: ST_TO_ADDR
// if not k then
40070: LD_VAR 0 8
40074: NOT
40075: IFFALSE 40087
// k := array ;
40077: LD_ADDR_VAR 0 8
40081: PUSH
40082: LD_VAR 0 1
40086: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40087: LD_ADDR_VAR 0 10
40091: PUSH
40092: LD_VAR 0 10
40096: PPUSH
40097: LD_VAR 0 8
40101: PPUSH
40102: LD_VAR 0 1
40106: PUSH
40107: LD_VAR 0 7
40111: ARRAY
40112: PPUSH
40113: CALL_OW 1
40117: ST_TO_ADDR
// end ;
40118: GO 40031
40120: POP
40121: POP
// array := tmp ;
40122: LD_ADDR_VAR 0 1
40126: PUSH
40127: LD_VAR 0 10
40131: ST_TO_ADDR
// end ;
40132: GO 40013
40134: POP
40135: POP
// result := array ;
40136: LD_ADDR_VAR 0 5
40140: PUSH
40141: LD_VAR 0 1
40145: ST_TO_ADDR
// end ;
40146: LD_VAR 0 5
40150: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40151: LD_INT 0
40153: PPUSH
40154: PPUSH
// result := 0 ;
40155: LD_ADDR_VAR 0 3
40159: PUSH
40160: LD_INT 0
40162: ST_TO_ADDR
// if not array or not value in array then
40163: LD_VAR 0 1
40167: NOT
40168: PUSH
40169: LD_VAR 0 2
40173: PUSH
40174: LD_VAR 0 1
40178: IN
40179: NOT
40180: OR
40181: IFFALSE 40185
// exit ;
40183: GO 40239
// for i = 1 to array do
40185: LD_ADDR_VAR 0 4
40189: PUSH
40190: DOUBLE
40191: LD_INT 1
40193: DEC
40194: ST_TO_ADDR
40195: LD_VAR 0 1
40199: PUSH
40200: FOR_TO
40201: IFFALSE 40237
// if value = array [ i ] then
40203: LD_VAR 0 2
40207: PUSH
40208: LD_VAR 0 1
40212: PUSH
40213: LD_VAR 0 4
40217: ARRAY
40218: EQUAL
40219: IFFALSE 40235
// begin result := i ;
40221: LD_ADDR_VAR 0 3
40225: PUSH
40226: LD_VAR 0 4
40230: ST_TO_ADDR
// exit ;
40231: POP
40232: POP
40233: GO 40239
// end ;
40235: GO 40200
40237: POP
40238: POP
// end ;
40239: LD_VAR 0 3
40243: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40244: LD_INT 0
40246: PPUSH
// vc_chassis := chassis ;
40247: LD_ADDR_OWVAR 37
40251: PUSH
40252: LD_VAR 0 1
40256: ST_TO_ADDR
// vc_engine := engine ;
40257: LD_ADDR_OWVAR 39
40261: PUSH
40262: LD_VAR 0 2
40266: ST_TO_ADDR
// vc_control := control ;
40267: LD_ADDR_OWVAR 38
40271: PUSH
40272: LD_VAR 0 3
40276: ST_TO_ADDR
// vc_weapon := weapon ;
40277: LD_ADDR_OWVAR 40
40281: PUSH
40282: LD_VAR 0 4
40286: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40287: LD_ADDR_OWVAR 41
40291: PUSH
40292: LD_VAR 0 5
40296: ST_TO_ADDR
// end ;
40297: LD_VAR 0 6
40301: RET
// export function WantPlant ( unit ) ; var task ; begin
40302: LD_INT 0
40304: PPUSH
40305: PPUSH
// result := false ;
40306: LD_ADDR_VAR 0 2
40310: PUSH
40311: LD_INT 0
40313: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40314: LD_ADDR_VAR 0 3
40318: PUSH
40319: LD_VAR 0 1
40323: PPUSH
40324: CALL_OW 437
40328: ST_TO_ADDR
// if task then
40329: LD_VAR 0 3
40333: IFFALSE 40361
// if task [ 1 ] [ 1 ] = p then
40335: LD_VAR 0 3
40339: PUSH
40340: LD_INT 1
40342: ARRAY
40343: PUSH
40344: LD_INT 1
40346: ARRAY
40347: PUSH
40348: LD_STRING p
40350: EQUAL
40351: IFFALSE 40361
// result := true ;
40353: LD_ADDR_VAR 0 2
40357: PUSH
40358: LD_INT 1
40360: ST_TO_ADDR
// end ;
40361: LD_VAR 0 2
40365: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40366: LD_INT 0
40368: PPUSH
40369: PPUSH
40370: PPUSH
40371: PPUSH
// if pos < 1 then
40372: LD_VAR 0 2
40376: PUSH
40377: LD_INT 1
40379: LESS
40380: IFFALSE 40384
// exit ;
40382: GO 40687
// if pos = 1 then
40384: LD_VAR 0 2
40388: PUSH
40389: LD_INT 1
40391: EQUAL
40392: IFFALSE 40425
// result := Replace ( arr , pos [ 1 ] , value ) else
40394: LD_ADDR_VAR 0 4
40398: PUSH
40399: LD_VAR 0 1
40403: PPUSH
40404: LD_VAR 0 2
40408: PUSH
40409: LD_INT 1
40411: ARRAY
40412: PPUSH
40413: LD_VAR 0 3
40417: PPUSH
40418: CALL_OW 1
40422: ST_TO_ADDR
40423: GO 40687
// begin tmp := arr ;
40425: LD_ADDR_VAR 0 6
40429: PUSH
40430: LD_VAR 0 1
40434: ST_TO_ADDR
// s_arr := [ tmp ] ;
40435: LD_ADDR_VAR 0 7
40439: PUSH
40440: LD_VAR 0 6
40444: PUSH
40445: EMPTY
40446: LIST
40447: ST_TO_ADDR
// for i = 1 to pos - 1 do
40448: LD_ADDR_VAR 0 5
40452: PUSH
40453: DOUBLE
40454: LD_INT 1
40456: DEC
40457: ST_TO_ADDR
40458: LD_VAR 0 2
40462: PUSH
40463: LD_INT 1
40465: MINUS
40466: PUSH
40467: FOR_TO
40468: IFFALSE 40513
// begin tmp := tmp [ pos [ i ] ] ;
40470: LD_ADDR_VAR 0 6
40474: PUSH
40475: LD_VAR 0 6
40479: PUSH
40480: LD_VAR 0 2
40484: PUSH
40485: LD_VAR 0 5
40489: ARRAY
40490: ARRAY
40491: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40492: LD_ADDR_VAR 0 7
40496: PUSH
40497: LD_VAR 0 7
40501: PUSH
40502: LD_VAR 0 6
40506: PUSH
40507: EMPTY
40508: LIST
40509: ADD
40510: ST_TO_ADDR
// end ;
40511: GO 40467
40513: POP
40514: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40515: LD_ADDR_VAR 0 6
40519: PUSH
40520: LD_VAR 0 6
40524: PPUSH
40525: LD_VAR 0 2
40529: PUSH
40530: LD_VAR 0 2
40534: ARRAY
40535: PPUSH
40536: LD_VAR 0 3
40540: PPUSH
40541: CALL_OW 1
40545: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40546: LD_ADDR_VAR 0 7
40550: PUSH
40551: LD_VAR 0 7
40555: PPUSH
40556: LD_VAR 0 7
40560: PPUSH
40561: LD_VAR 0 6
40565: PPUSH
40566: CALL_OW 1
40570: ST_TO_ADDR
// for i = s_arr downto 2 do
40571: LD_ADDR_VAR 0 5
40575: PUSH
40576: DOUBLE
40577: LD_VAR 0 7
40581: INC
40582: ST_TO_ADDR
40583: LD_INT 2
40585: PUSH
40586: FOR_DOWNTO
40587: IFFALSE 40671
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40589: LD_ADDR_VAR 0 6
40593: PUSH
40594: LD_VAR 0 7
40598: PUSH
40599: LD_VAR 0 5
40603: PUSH
40604: LD_INT 1
40606: MINUS
40607: ARRAY
40608: PPUSH
40609: LD_VAR 0 2
40613: PUSH
40614: LD_VAR 0 5
40618: PUSH
40619: LD_INT 1
40621: MINUS
40622: ARRAY
40623: PPUSH
40624: LD_VAR 0 7
40628: PUSH
40629: LD_VAR 0 5
40633: ARRAY
40634: PPUSH
40635: CALL_OW 1
40639: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40640: LD_ADDR_VAR 0 7
40644: PUSH
40645: LD_VAR 0 7
40649: PPUSH
40650: LD_VAR 0 5
40654: PUSH
40655: LD_INT 1
40657: MINUS
40658: PPUSH
40659: LD_VAR 0 6
40663: PPUSH
40664: CALL_OW 1
40668: ST_TO_ADDR
// end ;
40669: GO 40586
40671: POP
40672: POP
// result := s_arr [ 1 ] ;
40673: LD_ADDR_VAR 0 4
40677: PUSH
40678: LD_VAR 0 7
40682: PUSH
40683: LD_INT 1
40685: ARRAY
40686: ST_TO_ADDR
// end ; end ;
40687: LD_VAR 0 4
40691: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
40692: LD_INT 0
40694: PPUSH
40695: PPUSH
// if not list then
40696: LD_VAR 0 1
40700: NOT
40701: IFFALSE 40705
// exit ;
40703: GO 40796
// i := list [ pos1 ] ;
40705: LD_ADDR_VAR 0 5
40709: PUSH
40710: LD_VAR 0 1
40714: PUSH
40715: LD_VAR 0 2
40719: ARRAY
40720: ST_TO_ADDR
// if not i then
40721: LD_VAR 0 5
40725: NOT
40726: IFFALSE 40730
// exit ;
40728: GO 40796
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
40730: LD_ADDR_VAR 0 1
40734: PUSH
40735: LD_VAR 0 1
40739: PPUSH
40740: LD_VAR 0 2
40744: PPUSH
40745: LD_VAR 0 1
40749: PUSH
40750: LD_VAR 0 3
40754: ARRAY
40755: PPUSH
40756: CALL_OW 1
40760: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
40761: LD_ADDR_VAR 0 1
40765: PUSH
40766: LD_VAR 0 1
40770: PPUSH
40771: LD_VAR 0 3
40775: PPUSH
40776: LD_VAR 0 5
40780: PPUSH
40781: CALL_OW 1
40785: ST_TO_ADDR
// result := list ;
40786: LD_ADDR_VAR 0 4
40790: PUSH
40791: LD_VAR 0 1
40795: ST_TO_ADDR
// end ;
40796: LD_VAR 0 4
40800: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
40801: LD_INT 0
40803: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
40804: LD_ADDR_VAR 0 5
40808: PUSH
40809: LD_VAR 0 1
40813: PPUSH
40814: CALL_OW 250
40818: PPUSH
40819: LD_VAR 0 1
40823: PPUSH
40824: CALL_OW 251
40828: PPUSH
40829: LD_VAR 0 2
40833: PPUSH
40834: LD_VAR 0 3
40838: PPUSH
40839: LD_VAR 0 4
40843: PPUSH
40844: CALL 40854 0 5
40848: ST_TO_ADDR
// end ;
40849: LD_VAR 0 5
40853: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
40854: LD_INT 0
40856: PPUSH
40857: PPUSH
40858: PPUSH
40859: PPUSH
// if not list then
40860: LD_VAR 0 3
40864: NOT
40865: IFFALSE 40869
// exit ;
40867: GO 41257
// result := [ ] ;
40869: LD_ADDR_VAR 0 6
40873: PUSH
40874: EMPTY
40875: ST_TO_ADDR
// for i in list do
40876: LD_ADDR_VAR 0 7
40880: PUSH
40881: LD_VAR 0 3
40885: PUSH
40886: FOR_IN
40887: IFFALSE 41089
// begin tmp := GetDistUnitXY ( i , x , y ) ;
40889: LD_ADDR_VAR 0 9
40893: PUSH
40894: LD_VAR 0 7
40898: PPUSH
40899: LD_VAR 0 1
40903: PPUSH
40904: LD_VAR 0 2
40908: PPUSH
40909: CALL_OW 297
40913: ST_TO_ADDR
// if not result then
40914: LD_VAR 0 6
40918: NOT
40919: IFFALSE 40945
// result := [ [ i , tmp ] ] else
40921: LD_ADDR_VAR 0 6
40925: PUSH
40926: LD_VAR 0 7
40930: PUSH
40931: LD_VAR 0 9
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: EMPTY
40941: LIST
40942: ST_TO_ADDR
40943: GO 41087
// begin if result [ result ] [ 2 ] < tmp then
40945: LD_VAR 0 6
40949: PUSH
40950: LD_VAR 0 6
40954: ARRAY
40955: PUSH
40956: LD_INT 2
40958: ARRAY
40959: PUSH
40960: LD_VAR 0 9
40964: LESS
40965: IFFALSE 41007
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
40967: LD_ADDR_VAR 0 6
40971: PUSH
40972: LD_VAR 0 6
40976: PPUSH
40977: LD_VAR 0 6
40981: PUSH
40982: LD_INT 1
40984: PLUS
40985: PPUSH
40986: LD_VAR 0 7
40990: PUSH
40991: LD_VAR 0 9
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PPUSH
41000: CALL_OW 2
41004: ST_TO_ADDR
41005: GO 41087
// for j = 1 to result do
41007: LD_ADDR_VAR 0 8
41011: PUSH
41012: DOUBLE
41013: LD_INT 1
41015: DEC
41016: ST_TO_ADDR
41017: LD_VAR 0 6
41021: PUSH
41022: FOR_TO
41023: IFFALSE 41085
// begin if tmp < result [ j ] [ 2 ] then
41025: LD_VAR 0 9
41029: PUSH
41030: LD_VAR 0 6
41034: PUSH
41035: LD_VAR 0 8
41039: ARRAY
41040: PUSH
41041: LD_INT 2
41043: ARRAY
41044: LESS
41045: IFFALSE 41083
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41047: LD_ADDR_VAR 0 6
41051: PUSH
41052: LD_VAR 0 6
41056: PPUSH
41057: LD_VAR 0 8
41061: PPUSH
41062: LD_VAR 0 7
41066: PUSH
41067: LD_VAR 0 9
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PPUSH
41076: CALL_OW 2
41080: ST_TO_ADDR
// break ;
41081: GO 41085
// end ; end ;
41083: GO 41022
41085: POP
41086: POP
// end ; end ;
41087: GO 40886
41089: POP
41090: POP
// if result and not asc then
41091: LD_VAR 0 6
41095: PUSH
41096: LD_VAR 0 4
41100: NOT
41101: AND
41102: IFFALSE 41177
// begin tmp := result ;
41104: LD_ADDR_VAR 0 9
41108: PUSH
41109: LD_VAR 0 6
41113: ST_TO_ADDR
// for i = tmp downto 1 do
41114: LD_ADDR_VAR 0 7
41118: PUSH
41119: DOUBLE
41120: LD_VAR 0 9
41124: INC
41125: ST_TO_ADDR
41126: LD_INT 1
41128: PUSH
41129: FOR_DOWNTO
41130: IFFALSE 41175
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41132: LD_ADDR_VAR 0 6
41136: PUSH
41137: LD_VAR 0 6
41141: PPUSH
41142: LD_VAR 0 9
41146: PUSH
41147: LD_VAR 0 7
41151: MINUS
41152: PUSH
41153: LD_INT 1
41155: PLUS
41156: PPUSH
41157: LD_VAR 0 9
41161: PUSH
41162: LD_VAR 0 7
41166: ARRAY
41167: PPUSH
41168: CALL_OW 1
41172: ST_TO_ADDR
41173: GO 41129
41175: POP
41176: POP
// end ; tmp := [ ] ;
41177: LD_ADDR_VAR 0 9
41181: PUSH
41182: EMPTY
41183: ST_TO_ADDR
// if mode then
41184: LD_VAR 0 5
41188: IFFALSE 41257
// begin for i = 1 to result do
41190: LD_ADDR_VAR 0 7
41194: PUSH
41195: DOUBLE
41196: LD_INT 1
41198: DEC
41199: ST_TO_ADDR
41200: LD_VAR 0 6
41204: PUSH
41205: FOR_TO
41206: IFFALSE 41245
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41208: LD_ADDR_VAR 0 9
41212: PUSH
41213: LD_VAR 0 9
41217: PPUSH
41218: LD_VAR 0 7
41222: PPUSH
41223: LD_VAR 0 6
41227: PUSH
41228: LD_VAR 0 7
41232: ARRAY
41233: PUSH
41234: LD_INT 1
41236: ARRAY
41237: PPUSH
41238: CALL_OW 1
41242: ST_TO_ADDR
41243: GO 41205
41245: POP
41246: POP
// result := tmp ;
41247: LD_ADDR_VAR 0 6
41251: PUSH
41252: LD_VAR 0 9
41256: ST_TO_ADDR
// end ; end ;
41257: LD_VAR 0 6
41261: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41262: LD_INT 0
41264: PPUSH
41265: PPUSH
41266: PPUSH
41267: PPUSH
41268: PPUSH
41269: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41270: LD_ADDR_VAR 0 5
41274: PUSH
41275: LD_INT 0
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: LD_INT 0
41283: PUSH
41284: EMPTY
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: ST_TO_ADDR
// if not x or not y then
41292: LD_VAR 0 2
41296: NOT
41297: PUSH
41298: LD_VAR 0 3
41302: NOT
41303: OR
41304: IFFALSE 41308
// exit ;
41306: GO 42960
// if not range then
41308: LD_VAR 0 4
41312: NOT
41313: IFFALSE 41323
// range := 10 ;
41315: LD_ADDR_VAR 0 4
41319: PUSH
41320: LD_INT 10
41322: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41323: LD_ADDR_VAR 0 8
41327: PUSH
41328: LD_INT 81
41330: PUSH
41331: LD_VAR 0 1
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 92
41342: PUSH
41343: LD_VAR 0 2
41347: PUSH
41348: LD_VAR 0 3
41352: PUSH
41353: LD_VAR 0 4
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 3
41366: PUSH
41367: LD_INT 21
41369: PUSH
41370: LD_INT 3
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: LIST
41385: PPUSH
41386: CALL_OW 69
41390: ST_TO_ADDR
// if not tmp then
41391: LD_VAR 0 8
41395: NOT
41396: IFFALSE 41400
// exit ;
41398: GO 42960
// for i in tmp do
41400: LD_ADDR_VAR 0 6
41404: PUSH
41405: LD_VAR 0 8
41409: PUSH
41410: FOR_IN
41411: IFFALSE 42935
// begin points := [ 0 , 0 , 0 ] ;
41413: LD_ADDR_VAR 0 9
41417: PUSH
41418: LD_INT 0
41420: PUSH
41421: LD_INT 0
41423: PUSH
41424: LD_INT 0
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: LIST
41431: ST_TO_ADDR
// bpoints := 1 ;
41432: LD_ADDR_VAR 0 10
41436: PUSH
41437: LD_INT 1
41439: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41440: LD_VAR 0 6
41444: PPUSH
41445: CALL_OW 247
41449: PUSH
41450: LD_INT 1
41452: DOUBLE
41453: EQUAL
41454: IFTRUE 41458
41456: GO 42036
41458: POP
// begin if GetClass ( i ) = 1 then
41459: LD_VAR 0 6
41463: PPUSH
41464: CALL_OW 257
41468: PUSH
41469: LD_INT 1
41471: EQUAL
41472: IFFALSE 41493
// points := [ 10 , 5 , 3 ] ;
41474: LD_ADDR_VAR 0 9
41478: PUSH
41479: LD_INT 10
41481: PUSH
41482: LD_INT 5
41484: PUSH
41485: LD_INT 3
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: LIST
41492: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41493: LD_VAR 0 6
41497: PPUSH
41498: CALL_OW 257
41502: PUSH
41503: LD_INT 2
41505: PUSH
41506: LD_INT 3
41508: PUSH
41509: LD_INT 4
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: LIST
41516: IN
41517: IFFALSE 41538
// points := [ 3 , 2 , 1 ] ;
41519: LD_ADDR_VAR 0 9
41523: PUSH
41524: LD_INT 3
41526: PUSH
41527: LD_INT 2
41529: PUSH
41530: LD_INT 1
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: LIST
41537: ST_TO_ADDR
// if GetClass ( i ) = 5 then
41538: LD_VAR 0 6
41542: PPUSH
41543: CALL_OW 257
41547: PUSH
41548: LD_INT 5
41550: EQUAL
41551: IFFALSE 41572
// points := [ 130 , 5 , 2 ] ;
41553: LD_ADDR_VAR 0 9
41557: PUSH
41558: LD_INT 130
41560: PUSH
41561: LD_INT 5
41563: PUSH
41564: LD_INT 2
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: LIST
41571: ST_TO_ADDR
// if GetClass ( i ) = 8 then
41572: LD_VAR 0 6
41576: PPUSH
41577: CALL_OW 257
41581: PUSH
41582: LD_INT 8
41584: EQUAL
41585: IFFALSE 41606
// points := [ 35 , 35 , 30 ] ;
41587: LD_ADDR_VAR 0 9
41591: PUSH
41592: LD_INT 35
41594: PUSH
41595: LD_INT 35
41597: PUSH
41598: LD_INT 30
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: LIST
41605: ST_TO_ADDR
// if GetClass ( i ) = 9 then
41606: LD_VAR 0 6
41610: PPUSH
41611: CALL_OW 257
41615: PUSH
41616: LD_INT 9
41618: EQUAL
41619: IFFALSE 41640
// points := [ 20 , 55 , 40 ] ;
41621: LD_ADDR_VAR 0 9
41625: PUSH
41626: LD_INT 20
41628: PUSH
41629: LD_INT 55
41631: PUSH
41632: LD_INT 40
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: LIST
41639: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
41640: LD_VAR 0 6
41644: PPUSH
41645: CALL_OW 257
41649: PUSH
41650: LD_INT 12
41652: PUSH
41653: LD_INT 16
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: IN
41660: IFFALSE 41681
// points := [ 5 , 3 , 2 ] ;
41662: LD_ADDR_VAR 0 9
41666: PUSH
41667: LD_INT 5
41669: PUSH
41670: LD_INT 3
41672: PUSH
41673: LD_INT 2
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: LIST
41680: ST_TO_ADDR
// if GetClass ( i ) = 17 then
41681: LD_VAR 0 6
41685: PPUSH
41686: CALL_OW 257
41690: PUSH
41691: LD_INT 17
41693: EQUAL
41694: IFFALSE 41715
// points := [ 100 , 50 , 75 ] ;
41696: LD_ADDR_VAR 0 9
41700: PUSH
41701: LD_INT 100
41703: PUSH
41704: LD_INT 50
41706: PUSH
41707: LD_INT 75
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: LIST
41714: ST_TO_ADDR
// if GetClass ( i ) = 15 then
41715: LD_VAR 0 6
41719: PPUSH
41720: CALL_OW 257
41724: PUSH
41725: LD_INT 15
41727: EQUAL
41728: IFFALSE 41749
// points := [ 10 , 5 , 3 ] ;
41730: LD_ADDR_VAR 0 9
41734: PUSH
41735: LD_INT 10
41737: PUSH
41738: LD_INT 5
41740: PUSH
41741: LD_INT 3
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: LIST
41748: ST_TO_ADDR
// if GetClass ( i ) = 14 then
41749: LD_VAR 0 6
41753: PPUSH
41754: CALL_OW 257
41758: PUSH
41759: LD_INT 14
41761: EQUAL
41762: IFFALSE 41783
// points := [ 10 , 0 , 0 ] ;
41764: LD_ADDR_VAR 0 9
41768: PUSH
41769: LD_INT 10
41771: PUSH
41772: LD_INT 0
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: LIST
41782: ST_TO_ADDR
// if GetClass ( i ) = 11 then
41783: LD_VAR 0 6
41787: PPUSH
41788: CALL_OW 257
41792: PUSH
41793: LD_INT 11
41795: EQUAL
41796: IFFALSE 41817
// points := [ 30 , 10 , 5 ] ;
41798: LD_ADDR_VAR 0 9
41802: PUSH
41803: LD_INT 30
41805: PUSH
41806: LD_INT 10
41808: PUSH
41809: LD_INT 5
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: LIST
41816: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
41817: LD_VAR 0 1
41821: PPUSH
41822: LD_INT 5
41824: PPUSH
41825: CALL_OW 321
41829: PUSH
41830: LD_INT 2
41832: EQUAL
41833: IFFALSE 41850
// bpoints := bpoints * 1.8 ;
41835: LD_ADDR_VAR 0 10
41839: PUSH
41840: LD_VAR 0 10
41844: PUSH
41845: LD_REAL  1.80000000000000E+0000
41848: MUL
41849: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
41850: LD_VAR 0 6
41854: PPUSH
41855: CALL_OW 257
41859: PUSH
41860: LD_INT 1
41862: PUSH
41863: LD_INT 2
41865: PUSH
41866: LD_INT 3
41868: PUSH
41869: LD_INT 4
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: IN
41878: PUSH
41879: LD_VAR 0 1
41883: PPUSH
41884: LD_INT 51
41886: PPUSH
41887: CALL_OW 321
41891: PUSH
41892: LD_INT 2
41894: EQUAL
41895: AND
41896: IFFALSE 41913
// bpoints := bpoints * 1.2 ;
41898: LD_ADDR_VAR 0 10
41902: PUSH
41903: LD_VAR 0 10
41907: PUSH
41908: LD_REAL  1.20000000000000E+0000
41911: MUL
41912: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
41913: LD_VAR 0 6
41917: PPUSH
41918: CALL_OW 257
41922: PUSH
41923: LD_INT 5
41925: PUSH
41926: LD_INT 7
41928: PUSH
41929: LD_INT 9
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: LIST
41936: IN
41937: PUSH
41938: LD_VAR 0 1
41942: PPUSH
41943: LD_INT 52
41945: PPUSH
41946: CALL_OW 321
41950: PUSH
41951: LD_INT 2
41953: EQUAL
41954: AND
41955: IFFALSE 41972
// bpoints := bpoints * 1.5 ;
41957: LD_ADDR_VAR 0 10
41961: PUSH
41962: LD_VAR 0 10
41966: PUSH
41967: LD_REAL  1.50000000000000E+0000
41970: MUL
41971: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
41972: LD_VAR 0 1
41976: PPUSH
41977: LD_INT 66
41979: PPUSH
41980: CALL_OW 321
41984: PUSH
41985: LD_INT 2
41987: EQUAL
41988: IFFALSE 42005
// bpoints := bpoints * 1.1 ;
41990: LD_ADDR_VAR 0 10
41994: PUSH
41995: LD_VAR 0 10
41999: PUSH
42000: LD_REAL  1.10000000000000E+0000
42003: MUL
42004: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42005: LD_ADDR_VAR 0 10
42009: PUSH
42010: LD_VAR 0 10
42014: PUSH
42015: LD_VAR 0 6
42019: PPUSH
42020: LD_INT 1
42022: PPUSH
42023: CALL_OW 259
42027: PUSH
42028: LD_REAL  1.15000000000000E+0000
42031: MUL
42032: MUL
42033: ST_TO_ADDR
// end ; unit_vehicle :
42034: GO 42864
42036: LD_INT 2
42038: DOUBLE
42039: EQUAL
42040: IFTRUE 42044
42042: GO 42852
42044: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42045: LD_VAR 0 6
42049: PPUSH
42050: CALL_OW 264
42054: PUSH
42055: LD_INT 2
42057: PUSH
42058: LD_INT 42
42060: PUSH
42061: LD_INT 24
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: LIST
42068: IN
42069: IFFALSE 42090
// points := [ 25 , 5 , 3 ] ;
42071: LD_ADDR_VAR 0 9
42075: PUSH
42076: LD_INT 25
42078: PUSH
42079: LD_INT 5
42081: PUSH
42082: LD_INT 3
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: LIST
42089: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42090: LD_VAR 0 6
42094: PPUSH
42095: CALL_OW 264
42099: PUSH
42100: LD_INT 4
42102: PUSH
42103: LD_INT 43
42105: PUSH
42106: LD_INT 25
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: LIST
42113: IN
42114: IFFALSE 42135
// points := [ 40 , 15 , 5 ] ;
42116: LD_ADDR_VAR 0 9
42120: PUSH
42121: LD_INT 40
42123: PUSH
42124: LD_INT 15
42126: PUSH
42127: LD_INT 5
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: LIST
42134: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42135: LD_VAR 0 6
42139: PPUSH
42140: CALL_OW 264
42144: PUSH
42145: LD_INT 3
42147: PUSH
42148: LD_INT 23
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: IN
42155: IFFALSE 42176
// points := [ 7 , 25 , 8 ] ;
42157: LD_ADDR_VAR 0 9
42161: PUSH
42162: LD_INT 7
42164: PUSH
42165: LD_INT 25
42167: PUSH
42168: LD_INT 8
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: LIST
42175: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42176: LD_VAR 0 6
42180: PPUSH
42181: CALL_OW 264
42185: PUSH
42186: LD_INT 5
42188: PUSH
42189: LD_INT 27
42191: PUSH
42192: LD_INT 44
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: LIST
42199: IN
42200: IFFALSE 42221
// points := [ 14 , 50 , 16 ] ;
42202: LD_ADDR_VAR 0 9
42206: PUSH
42207: LD_INT 14
42209: PUSH
42210: LD_INT 50
42212: PUSH
42213: LD_INT 16
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: LIST
42220: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42221: LD_VAR 0 6
42225: PPUSH
42226: CALL_OW 264
42230: PUSH
42231: LD_INT 6
42233: PUSH
42234: LD_INT 46
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: IN
42241: IFFALSE 42262
// points := [ 32 , 120 , 70 ] ;
42243: LD_ADDR_VAR 0 9
42247: PUSH
42248: LD_INT 32
42250: PUSH
42251: LD_INT 120
42253: PUSH
42254: LD_INT 70
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: LIST
42261: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
42262: LD_VAR 0 6
42266: PPUSH
42267: CALL_OW 264
42271: PUSH
42272: LD_INT 7
42274: PUSH
42275: LD_INT 28
42277: PUSH
42278: LD_INT 45
42280: PUSH
42281: LD_EXP 41
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: IN
42292: IFFALSE 42313
// points := [ 35 , 20 , 45 ] ;
42294: LD_ADDR_VAR 0 9
42298: PUSH
42299: LD_INT 35
42301: PUSH
42302: LD_INT 20
42304: PUSH
42305: LD_INT 45
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: LIST
42312: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42313: LD_VAR 0 6
42317: PPUSH
42318: CALL_OW 264
42322: PUSH
42323: LD_INT 47
42325: PUSH
42326: EMPTY
42327: LIST
42328: IN
42329: IFFALSE 42350
// points := [ 67 , 45 , 75 ] ;
42331: LD_ADDR_VAR 0 9
42335: PUSH
42336: LD_INT 67
42338: PUSH
42339: LD_INT 45
42341: PUSH
42342: LD_INT 75
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: LIST
42349: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42350: LD_VAR 0 6
42354: PPUSH
42355: CALL_OW 264
42359: PUSH
42360: LD_INT 26
42362: PUSH
42363: EMPTY
42364: LIST
42365: IN
42366: IFFALSE 42387
// points := [ 120 , 30 , 80 ] ;
42368: LD_ADDR_VAR 0 9
42372: PUSH
42373: LD_INT 120
42375: PUSH
42376: LD_INT 30
42378: PUSH
42379: LD_INT 80
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: LIST
42386: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42387: LD_VAR 0 6
42391: PPUSH
42392: CALL_OW 264
42396: PUSH
42397: LD_INT 22
42399: PUSH
42400: EMPTY
42401: LIST
42402: IN
42403: IFFALSE 42424
// points := [ 40 , 1 , 1 ] ;
42405: LD_ADDR_VAR 0 9
42409: PUSH
42410: LD_INT 40
42412: PUSH
42413: LD_INT 1
42415: PUSH
42416: LD_INT 1
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: LIST
42423: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42424: LD_VAR 0 6
42428: PPUSH
42429: CALL_OW 264
42433: PUSH
42434: LD_INT 29
42436: PUSH
42437: EMPTY
42438: LIST
42439: IN
42440: IFFALSE 42461
// points := [ 70 , 200 , 400 ] ;
42442: LD_ADDR_VAR 0 9
42446: PUSH
42447: LD_INT 70
42449: PUSH
42450: LD_INT 200
42452: PUSH
42453: LD_INT 400
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: LIST
42460: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42461: LD_VAR 0 6
42465: PPUSH
42466: CALL_OW 264
42470: PUSH
42471: LD_INT 14
42473: PUSH
42474: LD_INT 53
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: IN
42481: IFFALSE 42502
// points := [ 40 , 10 , 20 ] ;
42483: LD_ADDR_VAR 0 9
42487: PUSH
42488: LD_INT 40
42490: PUSH
42491: LD_INT 10
42493: PUSH
42494: LD_INT 20
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: LIST
42501: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42502: LD_VAR 0 6
42506: PPUSH
42507: CALL_OW 264
42511: PUSH
42512: LD_INT 9
42514: PUSH
42515: EMPTY
42516: LIST
42517: IN
42518: IFFALSE 42539
// points := [ 5 , 70 , 20 ] ;
42520: LD_ADDR_VAR 0 9
42524: PUSH
42525: LD_INT 5
42527: PUSH
42528: LD_INT 70
42530: PUSH
42531: LD_INT 20
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: LIST
42538: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
42539: LD_VAR 0 6
42543: PPUSH
42544: CALL_OW 264
42548: PUSH
42549: LD_INT 10
42551: PUSH
42552: EMPTY
42553: LIST
42554: IN
42555: IFFALSE 42576
// points := [ 35 , 110 , 70 ] ;
42557: LD_ADDR_VAR 0 9
42561: PUSH
42562: LD_INT 35
42564: PUSH
42565: LD_INT 110
42567: PUSH
42568: LD_INT 70
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: LIST
42575: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
42576: LD_VAR 0 6
42580: PPUSH
42581: CALL_OW 265
42585: PUSH
42586: LD_INT 25
42588: EQUAL
42589: IFFALSE 42610
// points := [ 80 , 65 , 100 ] ;
42591: LD_ADDR_VAR 0 9
42595: PUSH
42596: LD_INT 80
42598: PUSH
42599: LD_INT 65
42601: PUSH
42602: LD_INT 100
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: LIST
42609: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
42610: LD_VAR 0 6
42614: PPUSH
42615: CALL_OW 263
42619: PUSH
42620: LD_INT 1
42622: EQUAL
42623: IFFALSE 42658
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
42625: LD_ADDR_VAR 0 10
42629: PUSH
42630: LD_VAR 0 10
42634: PUSH
42635: LD_VAR 0 6
42639: PPUSH
42640: CALL_OW 311
42644: PPUSH
42645: LD_INT 3
42647: PPUSH
42648: CALL_OW 259
42652: PUSH
42653: LD_INT 4
42655: MUL
42656: MUL
42657: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
42658: LD_VAR 0 6
42662: PPUSH
42663: CALL_OW 263
42667: PUSH
42668: LD_INT 2
42670: EQUAL
42671: IFFALSE 42722
// begin j := IsControledBy ( i ) ;
42673: LD_ADDR_VAR 0 7
42677: PUSH
42678: LD_VAR 0 6
42682: PPUSH
42683: CALL_OW 312
42687: ST_TO_ADDR
// if j then
42688: LD_VAR 0 7
42692: IFFALSE 42722
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
42694: LD_ADDR_VAR 0 10
42698: PUSH
42699: LD_VAR 0 10
42703: PUSH
42704: LD_VAR 0 7
42708: PPUSH
42709: LD_INT 3
42711: PPUSH
42712: CALL_OW 259
42716: PUSH
42717: LD_INT 3
42719: MUL
42720: MUL
42721: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
42722: LD_VAR 0 6
42726: PPUSH
42727: CALL_OW 264
42731: PUSH
42732: LD_INT 5
42734: PUSH
42735: LD_INT 6
42737: PUSH
42738: LD_INT 46
42740: PUSH
42741: LD_INT 44
42743: PUSH
42744: LD_INT 47
42746: PUSH
42747: LD_INT 45
42749: PUSH
42750: LD_INT 28
42752: PUSH
42753: LD_INT 7
42755: PUSH
42756: LD_INT 27
42758: PUSH
42759: LD_INT 29
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: IN
42774: PUSH
42775: LD_VAR 0 1
42779: PPUSH
42780: LD_INT 52
42782: PPUSH
42783: CALL_OW 321
42787: PUSH
42788: LD_INT 2
42790: EQUAL
42791: AND
42792: IFFALSE 42809
// bpoints := bpoints * 1.2 ;
42794: LD_ADDR_VAR 0 10
42798: PUSH
42799: LD_VAR 0 10
42803: PUSH
42804: LD_REAL  1.20000000000000E+0000
42807: MUL
42808: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
42809: LD_VAR 0 6
42813: PPUSH
42814: CALL_OW 264
42818: PUSH
42819: LD_INT 6
42821: PUSH
42822: LD_INT 46
42824: PUSH
42825: LD_INT 47
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: LIST
42832: IN
42833: IFFALSE 42850
// bpoints := bpoints * 1.2 ;
42835: LD_ADDR_VAR 0 10
42839: PUSH
42840: LD_VAR 0 10
42844: PUSH
42845: LD_REAL  1.20000000000000E+0000
42848: MUL
42849: ST_TO_ADDR
// end ; unit_building :
42850: GO 42864
42852: LD_INT 3
42854: DOUBLE
42855: EQUAL
42856: IFTRUE 42860
42858: GO 42863
42860: POP
// ; end ;
42861: GO 42864
42863: POP
// for j = 1 to 3 do
42864: LD_ADDR_VAR 0 7
42868: PUSH
42869: DOUBLE
42870: LD_INT 1
42872: DEC
42873: ST_TO_ADDR
42874: LD_INT 3
42876: PUSH
42877: FOR_TO
42878: IFFALSE 42931
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
42880: LD_ADDR_VAR 0 5
42884: PUSH
42885: LD_VAR 0 5
42889: PPUSH
42890: LD_VAR 0 7
42894: PPUSH
42895: LD_VAR 0 5
42899: PUSH
42900: LD_VAR 0 7
42904: ARRAY
42905: PUSH
42906: LD_VAR 0 9
42910: PUSH
42911: LD_VAR 0 7
42915: ARRAY
42916: PUSH
42917: LD_VAR 0 10
42921: MUL
42922: PLUS
42923: PPUSH
42924: CALL_OW 1
42928: ST_TO_ADDR
42929: GO 42877
42931: POP
42932: POP
// end ;
42933: GO 41410
42935: POP
42936: POP
// result := Replace ( result , 4 , tmp ) ;
42937: LD_ADDR_VAR 0 5
42941: PUSH
42942: LD_VAR 0 5
42946: PPUSH
42947: LD_INT 4
42949: PPUSH
42950: LD_VAR 0 8
42954: PPUSH
42955: CALL_OW 1
42959: ST_TO_ADDR
// end ;
42960: LD_VAR 0 5
42964: RET
// export function DangerAtRange ( unit , range ) ; begin
42965: LD_INT 0
42967: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
42968: LD_ADDR_VAR 0 3
42972: PUSH
42973: LD_VAR 0 1
42977: PPUSH
42978: CALL_OW 255
42982: PPUSH
42983: LD_VAR 0 1
42987: PPUSH
42988: CALL_OW 250
42992: PPUSH
42993: LD_VAR 0 1
42997: PPUSH
42998: CALL_OW 251
43002: PPUSH
43003: LD_VAR 0 2
43007: PPUSH
43008: CALL 41262 0 4
43012: ST_TO_ADDR
// end ;
43013: LD_VAR 0 3
43017: RET
// export function DangerInArea ( side , area ) ; begin
43018: LD_INT 0
43020: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43021: LD_ADDR_VAR 0 3
43025: PUSH
43026: LD_VAR 0 2
43030: PPUSH
43031: LD_INT 81
43033: PUSH
43034: LD_VAR 0 1
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PPUSH
43043: CALL_OW 70
43047: ST_TO_ADDR
// end ;
43048: LD_VAR 0 3
43052: RET
// export function IsExtension ( b ) ; begin
43053: LD_INT 0
43055: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43056: LD_ADDR_VAR 0 2
43060: PUSH
43061: LD_VAR 0 1
43065: PUSH
43066: LD_INT 23
43068: PUSH
43069: LD_INT 20
43071: PUSH
43072: LD_INT 22
43074: PUSH
43075: LD_INT 17
43077: PUSH
43078: LD_INT 24
43080: PUSH
43081: LD_INT 21
43083: PUSH
43084: LD_INT 19
43086: PUSH
43087: LD_INT 16
43089: PUSH
43090: LD_INT 25
43092: PUSH
43093: LD_INT 18
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: IN
43108: ST_TO_ADDR
// end ;
43109: LD_VAR 0 2
43113: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
43114: LD_INT 0
43116: PPUSH
43117: PPUSH
43118: PPUSH
// result := [ ] ;
43119: LD_ADDR_VAR 0 4
43123: PUSH
43124: EMPTY
43125: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43126: LD_ADDR_VAR 0 5
43130: PUSH
43131: LD_VAR 0 2
43135: PPUSH
43136: LD_INT 21
43138: PUSH
43139: LD_INT 3
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PPUSH
43146: CALL_OW 70
43150: ST_TO_ADDR
// if not tmp then
43151: LD_VAR 0 5
43155: NOT
43156: IFFALSE 43160
// exit ;
43158: GO 43224
// if checkLink then
43160: LD_VAR 0 3
43164: IFFALSE 43214
// begin for i in tmp do
43166: LD_ADDR_VAR 0 6
43170: PUSH
43171: LD_VAR 0 5
43175: PUSH
43176: FOR_IN
43177: IFFALSE 43212
// if GetBase ( i ) <> base then
43179: LD_VAR 0 6
43183: PPUSH
43184: CALL_OW 274
43188: PUSH
43189: LD_VAR 0 1
43193: NONEQUAL
43194: IFFALSE 43210
// ComLinkToBase ( base , i ) ;
43196: LD_VAR 0 1
43200: PPUSH
43201: LD_VAR 0 6
43205: PPUSH
43206: CALL_OW 169
43210: GO 43176
43212: POP
43213: POP
// end ; result := tmp ;
43214: LD_ADDR_VAR 0 4
43218: PUSH
43219: LD_VAR 0 5
43223: ST_TO_ADDR
// end ;
43224: LD_VAR 0 4
43228: RET
// export function ComComplete ( units , b ) ; var i ; begin
43229: LD_INT 0
43231: PPUSH
43232: PPUSH
// if not units then
43233: LD_VAR 0 1
43237: NOT
43238: IFFALSE 43242
// exit ;
43240: GO 43332
// for i in units do
43242: LD_ADDR_VAR 0 4
43246: PUSH
43247: LD_VAR 0 1
43251: PUSH
43252: FOR_IN
43253: IFFALSE 43330
// if BuildingStatus ( b ) = bs_build then
43255: LD_VAR 0 2
43259: PPUSH
43260: CALL_OW 461
43264: PUSH
43265: LD_INT 1
43267: EQUAL
43268: IFFALSE 43328
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43270: LD_VAR 0 4
43274: PPUSH
43275: LD_STRING h
43277: PUSH
43278: LD_VAR 0 2
43282: PPUSH
43283: CALL_OW 250
43287: PUSH
43288: LD_VAR 0 2
43292: PPUSH
43293: CALL_OW 251
43297: PUSH
43298: LD_VAR 0 2
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: LD_INT 0
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: PUSH
43321: EMPTY
43322: LIST
43323: PPUSH
43324: CALL_OW 446
43328: GO 43252
43330: POP
43331: POP
// end ;
43332: LD_VAR 0 3
43336: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43337: LD_INT 0
43339: PPUSH
43340: PPUSH
43341: PPUSH
43342: PPUSH
43343: PPUSH
43344: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
43345: LD_VAR 0 1
43349: NOT
43350: PUSH
43351: LD_VAR 0 1
43355: PPUSH
43356: CALL_OW 263
43360: PUSH
43361: LD_INT 2
43363: NONEQUAL
43364: OR
43365: IFFALSE 43369
// exit ;
43367: GO 43685
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43369: LD_ADDR_VAR 0 6
43373: PUSH
43374: LD_INT 22
43376: PUSH
43377: LD_VAR 0 1
43381: PPUSH
43382: CALL_OW 255
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 2
43393: PUSH
43394: LD_INT 30
43396: PUSH
43397: LD_INT 36
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 34
43406: PUSH
43407: LD_INT 31
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: LIST
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PPUSH
43423: CALL_OW 69
43427: ST_TO_ADDR
// if not tmp then
43428: LD_VAR 0 6
43432: NOT
43433: IFFALSE 43437
// exit ;
43435: GO 43685
// result := [ ] ;
43437: LD_ADDR_VAR 0 2
43441: PUSH
43442: EMPTY
43443: ST_TO_ADDR
// for i in tmp do
43444: LD_ADDR_VAR 0 3
43448: PUSH
43449: LD_VAR 0 6
43453: PUSH
43454: FOR_IN
43455: IFFALSE 43526
// begin t := UnitsInside ( i ) ;
43457: LD_ADDR_VAR 0 4
43461: PUSH
43462: LD_VAR 0 3
43466: PPUSH
43467: CALL_OW 313
43471: ST_TO_ADDR
// if t then
43472: LD_VAR 0 4
43476: IFFALSE 43524
// for j in t do
43478: LD_ADDR_VAR 0 7
43482: PUSH
43483: LD_VAR 0 4
43487: PUSH
43488: FOR_IN
43489: IFFALSE 43522
// result := Replace ( result , result + 1 , j ) ;
43491: LD_ADDR_VAR 0 2
43495: PUSH
43496: LD_VAR 0 2
43500: PPUSH
43501: LD_VAR 0 2
43505: PUSH
43506: LD_INT 1
43508: PLUS
43509: PPUSH
43510: LD_VAR 0 7
43514: PPUSH
43515: CALL_OW 1
43519: ST_TO_ADDR
43520: GO 43488
43522: POP
43523: POP
// end ;
43524: GO 43454
43526: POP
43527: POP
// if not result then
43528: LD_VAR 0 2
43532: NOT
43533: IFFALSE 43537
// exit ;
43535: GO 43685
// mech := result [ 1 ] ;
43537: LD_ADDR_VAR 0 5
43541: PUSH
43542: LD_VAR 0 2
43546: PUSH
43547: LD_INT 1
43549: ARRAY
43550: ST_TO_ADDR
// if result > 1 then
43551: LD_VAR 0 2
43555: PUSH
43556: LD_INT 1
43558: GREATER
43559: IFFALSE 43671
// begin for i = 2 to result do
43561: LD_ADDR_VAR 0 3
43565: PUSH
43566: DOUBLE
43567: LD_INT 2
43569: DEC
43570: ST_TO_ADDR
43571: LD_VAR 0 2
43575: PUSH
43576: FOR_TO
43577: IFFALSE 43669
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
43579: LD_ADDR_VAR 0 4
43583: PUSH
43584: LD_VAR 0 2
43588: PUSH
43589: LD_VAR 0 3
43593: ARRAY
43594: PPUSH
43595: LD_INT 3
43597: PPUSH
43598: CALL_OW 259
43602: PUSH
43603: LD_VAR 0 2
43607: PUSH
43608: LD_VAR 0 3
43612: ARRAY
43613: PPUSH
43614: CALL_OW 432
43618: MINUS
43619: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
43620: LD_VAR 0 4
43624: PUSH
43625: LD_VAR 0 5
43629: PPUSH
43630: LD_INT 3
43632: PPUSH
43633: CALL_OW 259
43637: PUSH
43638: LD_VAR 0 5
43642: PPUSH
43643: CALL_OW 432
43647: MINUS
43648: GREATEREQUAL
43649: IFFALSE 43667
// mech := result [ i ] ;
43651: LD_ADDR_VAR 0 5
43655: PUSH
43656: LD_VAR 0 2
43660: PUSH
43661: LD_VAR 0 3
43665: ARRAY
43666: ST_TO_ADDR
// end ;
43667: GO 43576
43669: POP
43670: POP
// end ; ComLinkTo ( vehicle , mech ) ;
43671: LD_VAR 0 1
43675: PPUSH
43676: LD_VAR 0 5
43680: PPUSH
43681: CALL_OW 135
// end ;
43685: LD_VAR 0 2
43689: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
43690: LD_INT 0
43692: PPUSH
43693: PPUSH
43694: PPUSH
43695: PPUSH
43696: PPUSH
43697: PPUSH
43698: PPUSH
43699: PPUSH
43700: PPUSH
43701: PPUSH
43702: PPUSH
43703: PPUSH
43704: PPUSH
// result := [ ] ;
43705: LD_ADDR_VAR 0 7
43709: PUSH
43710: EMPTY
43711: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
43712: LD_VAR 0 1
43716: PPUSH
43717: CALL_OW 266
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: LD_INT 1
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: IN
43732: NOT
43733: IFFALSE 43737
// exit ;
43735: GO 45371
// if name then
43737: LD_VAR 0 3
43741: IFFALSE 43757
// SetBName ( base_dep , name ) ;
43743: LD_VAR 0 1
43747: PPUSH
43748: LD_VAR 0 3
43752: PPUSH
43753: CALL_OW 500
// base := GetBase ( base_dep ) ;
43757: LD_ADDR_VAR 0 15
43761: PUSH
43762: LD_VAR 0 1
43766: PPUSH
43767: CALL_OW 274
43771: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
43772: LD_ADDR_VAR 0 16
43776: PUSH
43777: LD_VAR 0 1
43781: PPUSH
43782: CALL_OW 255
43786: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
43787: LD_ADDR_VAR 0 17
43791: PUSH
43792: LD_VAR 0 1
43796: PPUSH
43797: CALL_OW 248
43801: ST_TO_ADDR
// if sources then
43802: LD_VAR 0 5
43806: IFFALSE 43853
// for i = 1 to 3 do
43808: LD_ADDR_VAR 0 8
43812: PUSH
43813: DOUBLE
43814: LD_INT 1
43816: DEC
43817: ST_TO_ADDR
43818: LD_INT 3
43820: PUSH
43821: FOR_TO
43822: IFFALSE 43851
// AddResourceType ( base , i , sources [ i ] ) ;
43824: LD_VAR 0 15
43828: PPUSH
43829: LD_VAR 0 8
43833: PPUSH
43834: LD_VAR 0 5
43838: PUSH
43839: LD_VAR 0 8
43843: ARRAY
43844: PPUSH
43845: CALL_OW 276
43849: GO 43821
43851: POP
43852: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
43853: LD_ADDR_VAR 0 18
43857: PUSH
43858: LD_VAR 0 15
43862: PPUSH
43863: LD_VAR 0 2
43867: PPUSH
43868: LD_INT 1
43870: PPUSH
43871: CALL 43114 0 3
43875: ST_TO_ADDR
// InitHc ;
43876: CALL_OW 19
// InitUc ;
43880: CALL_OW 18
// uc_side := side ;
43884: LD_ADDR_OWVAR 20
43888: PUSH
43889: LD_VAR 0 16
43893: ST_TO_ADDR
// uc_nation := nation ;
43894: LD_ADDR_OWVAR 21
43898: PUSH
43899: LD_VAR 0 17
43903: ST_TO_ADDR
// if buildings then
43904: LD_VAR 0 18
43908: IFFALSE 45230
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
43910: LD_ADDR_VAR 0 19
43914: PUSH
43915: LD_VAR 0 18
43919: PPUSH
43920: LD_INT 2
43922: PUSH
43923: LD_INT 30
43925: PUSH
43926: LD_INT 29
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 30
43935: PUSH
43936: LD_INT 30
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: LIST
43947: PPUSH
43948: CALL_OW 72
43952: ST_TO_ADDR
// if tmp then
43953: LD_VAR 0 19
43957: IFFALSE 44005
// for i in tmp do
43959: LD_ADDR_VAR 0 8
43963: PUSH
43964: LD_VAR 0 19
43968: PUSH
43969: FOR_IN
43970: IFFALSE 44003
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
43972: LD_VAR 0 8
43976: PPUSH
43977: CALL_OW 250
43981: PPUSH
43982: LD_VAR 0 8
43986: PPUSH
43987: CALL_OW 251
43991: PPUSH
43992: LD_VAR 0 16
43996: PPUSH
43997: CALL_OW 441
44001: GO 43969
44003: POP
44004: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44005: LD_VAR 0 18
44009: PPUSH
44010: LD_INT 2
44012: PUSH
44013: LD_INT 30
44015: PUSH
44016: LD_INT 32
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 30
44025: PUSH
44026: LD_INT 33
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: LIST
44037: PPUSH
44038: CALL_OW 72
44042: IFFALSE 44130
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44044: LD_ADDR_VAR 0 8
44048: PUSH
44049: LD_VAR 0 18
44053: PPUSH
44054: LD_INT 2
44056: PUSH
44057: LD_INT 30
44059: PUSH
44060: LD_INT 32
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 30
44069: PUSH
44070: LD_INT 33
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: LIST
44081: PPUSH
44082: CALL_OW 72
44086: PUSH
44087: FOR_IN
44088: IFFALSE 44128
// begin if not GetBWeapon ( i ) then
44090: LD_VAR 0 8
44094: PPUSH
44095: CALL_OW 269
44099: NOT
44100: IFFALSE 44126
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44102: LD_VAR 0 8
44106: PPUSH
44107: LD_VAR 0 8
44111: PPUSH
44112: LD_VAR 0 2
44116: PPUSH
44117: CALL 45376 0 2
44121: PPUSH
44122: CALL_OW 431
// end ;
44126: GO 44087
44128: POP
44129: POP
// end ; for i = 1 to personel do
44130: LD_ADDR_VAR 0 8
44134: PUSH
44135: DOUBLE
44136: LD_INT 1
44138: DEC
44139: ST_TO_ADDR
44140: LD_VAR 0 6
44144: PUSH
44145: FOR_TO
44146: IFFALSE 45210
// begin if i > 4 then
44148: LD_VAR 0 8
44152: PUSH
44153: LD_INT 4
44155: GREATER
44156: IFFALSE 44160
// break ;
44158: GO 45210
// case i of 1 :
44160: LD_VAR 0 8
44164: PUSH
44165: LD_INT 1
44167: DOUBLE
44168: EQUAL
44169: IFTRUE 44173
44171: GO 44253
44173: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44174: LD_ADDR_VAR 0 12
44178: PUSH
44179: LD_VAR 0 18
44183: PPUSH
44184: LD_INT 22
44186: PUSH
44187: LD_VAR 0 16
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 58
44198: PUSH
44199: EMPTY
44200: LIST
44201: PUSH
44202: LD_INT 2
44204: PUSH
44205: LD_INT 30
44207: PUSH
44208: LD_INT 32
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 30
44217: PUSH
44218: LD_INT 4
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 30
44227: PUSH
44228: LD_INT 5
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: LIST
44245: PPUSH
44246: CALL_OW 72
44250: ST_TO_ADDR
44251: GO 44475
44253: LD_INT 2
44255: DOUBLE
44256: EQUAL
44257: IFTRUE 44261
44259: GO 44323
44261: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44262: LD_ADDR_VAR 0 12
44266: PUSH
44267: LD_VAR 0 18
44271: PPUSH
44272: LD_INT 22
44274: PUSH
44275: LD_VAR 0 16
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 2
44286: PUSH
44287: LD_INT 30
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 30
44299: PUSH
44300: LD_INT 1
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: LIST
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PPUSH
44316: CALL_OW 72
44320: ST_TO_ADDR
44321: GO 44475
44323: LD_INT 3
44325: DOUBLE
44326: EQUAL
44327: IFTRUE 44331
44329: GO 44393
44331: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44332: LD_ADDR_VAR 0 12
44336: PUSH
44337: LD_VAR 0 18
44341: PPUSH
44342: LD_INT 22
44344: PUSH
44345: LD_VAR 0 16
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 2
44356: PUSH
44357: LD_INT 30
44359: PUSH
44360: LD_INT 2
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 30
44369: PUSH
44370: LD_INT 3
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: LIST
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PPUSH
44386: CALL_OW 72
44390: ST_TO_ADDR
44391: GO 44475
44393: LD_INT 4
44395: DOUBLE
44396: EQUAL
44397: IFTRUE 44401
44399: GO 44474
44401: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44402: LD_ADDR_VAR 0 12
44406: PUSH
44407: LD_VAR 0 18
44411: PPUSH
44412: LD_INT 22
44414: PUSH
44415: LD_VAR 0 16
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 2
44426: PUSH
44427: LD_INT 30
44429: PUSH
44430: LD_INT 6
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 30
44439: PUSH
44440: LD_INT 7
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 30
44449: PUSH
44450: LD_INT 8
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PPUSH
44467: CALL_OW 72
44471: ST_TO_ADDR
44472: GO 44475
44474: POP
// if i = 1 then
44475: LD_VAR 0 8
44479: PUSH
44480: LD_INT 1
44482: EQUAL
44483: IFFALSE 44594
// begin tmp := [ ] ;
44485: LD_ADDR_VAR 0 19
44489: PUSH
44490: EMPTY
44491: ST_TO_ADDR
// for j in f do
44492: LD_ADDR_VAR 0 9
44496: PUSH
44497: LD_VAR 0 12
44501: PUSH
44502: FOR_IN
44503: IFFALSE 44576
// if GetBType ( j ) = b_bunker then
44505: LD_VAR 0 9
44509: PPUSH
44510: CALL_OW 266
44514: PUSH
44515: LD_INT 32
44517: EQUAL
44518: IFFALSE 44545
// tmp := Insert ( tmp , 1 , j ) else
44520: LD_ADDR_VAR 0 19
44524: PUSH
44525: LD_VAR 0 19
44529: PPUSH
44530: LD_INT 1
44532: PPUSH
44533: LD_VAR 0 9
44537: PPUSH
44538: CALL_OW 2
44542: ST_TO_ADDR
44543: GO 44574
// tmp := Insert ( tmp , tmp + 1 , j ) ;
44545: LD_ADDR_VAR 0 19
44549: PUSH
44550: LD_VAR 0 19
44554: PPUSH
44555: LD_VAR 0 19
44559: PUSH
44560: LD_INT 1
44562: PLUS
44563: PPUSH
44564: LD_VAR 0 9
44568: PPUSH
44569: CALL_OW 2
44573: ST_TO_ADDR
44574: GO 44502
44576: POP
44577: POP
// if tmp then
44578: LD_VAR 0 19
44582: IFFALSE 44594
// f := tmp ;
44584: LD_ADDR_VAR 0 12
44588: PUSH
44589: LD_VAR 0 19
44593: ST_TO_ADDR
// end ; x := personel [ i ] ;
44594: LD_ADDR_VAR 0 13
44598: PUSH
44599: LD_VAR 0 6
44603: PUSH
44604: LD_VAR 0 8
44608: ARRAY
44609: ST_TO_ADDR
// if x = - 1 then
44610: LD_VAR 0 13
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: EQUAL
44619: IFFALSE 44828
// begin for j in f do
44621: LD_ADDR_VAR 0 9
44625: PUSH
44626: LD_VAR 0 12
44630: PUSH
44631: FOR_IN
44632: IFFALSE 44824
// repeat InitHc ;
44634: CALL_OW 19
// if GetBType ( j ) = b_barracks then
44638: LD_VAR 0 9
44642: PPUSH
44643: CALL_OW 266
44647: PUSH
44648: LD_INT 5
44650: EQUAL
44651: IFFALSE 44721
// begin if UnitsInside ( j ) < 3 then
44653: LD_VAR 0 9
44657: PPUSH
44658: CALL_OW 313
44662: PUSH
44663: LD_INT 3
44665: LESS
44666: IFFALSE 44702
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44668: LD_INT 0
44670: PPUSH
44671: LD_INT 5
44673: PUSH
44674: LD_INT 8
44676: PUSH
44677: LD_INT 9
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: LIST
44684: PUSH
44685: LD_VAR 0 17
44689: ARRAY
44690: PPUSH
44691: LD_VAR 0 4
44695: PPUSH
44696: CALL_OW 380
44700: GO 44719
// PrepareHuman ( false , i , skill ) ;
44702: LD_INT 0
44704: PPUSH
44705: LD_VAR 0 8
44709: PPUSH
44710: LD_VAR 0 4
44714: PPUSH
44715: CALL_OW 380
// end else
44719: GO 44738
// PrepareHuman ( false , i , skill ) ;
44721: LD_INT 0
44723: PPUSH
44724: LD_VAR 0 8
44728: PPUSH
44729: LD_VAR 0 4
44733: PPUSH
44734: CALL_OW 380
// un := CreateHuman ;
44738: LD_ADDR_VAR 0 14
44742: PUSH
44743: CALL_OW 44
44747: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44748: LD_ADDR_VAR 0 7
44752: PUSH
44753: LD_VAR 0 7
44757: PPUSH
44758: LD_INT 1
44760: PPUSH
44761: LD_VAR 0 14
44765: PPUSH
44766: CALL_OW 2
44770: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
44771: LD_VAR 0 14
44775: PPUSH
44776: LD_VAR 0 9
44780: PPUSH
44781: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
44785: LD_VAR 0 9
44789: PPUSH
44790: CALL_OW 313
44794: PUSH
44795: LD_INT 6
44797: EQUAL
44798: PUSH
44799: LD_VAR 0 9
44803: PPUSH
44804: CALL_OW 266
44808: PUSH
44809: LD_INT 32
44811: PUSH
44812: LD_INT 31
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: IN
44819: OR
44820: IFFALSE 44634
44822: GO 44631
44824: POP
44825: POP
// end else
44826: GO 45208
// for j = 1 to x do
44828: LD_ADDR_VAR 0 9
44832: PUSH
44833: DOUBLE
44834: LD_INT 1
44836: DEC
44837: ST_TO_ADDR
44838: LD_VAR 0 13
44842: PUSH
44843: FOR_TO
44844: IFFALSE 45206
// begin InitHc ;
44846: CALL_OW 19
// if not f then
44850: LD_VAR 0 12
44854: NOT
44855: IFFALSE 44944
// begin PrepareHuman ( false , i , skill ) ;
44857: LD_INT 0
44859: PPUSH
44860: LD_VAR 0 8
44864: PPUSH
44865: LD_VAR 0 4
44869: PPUSH
44870: CALL_OW 380
// un := CreateHuman ;
44874: LD_ADDR_VAR 0 14
44878: PUSH
44879: CALL_OW 44
44883: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44884: LD_ADDR_VAR 0 7
44888: PUSH
44889: LD_VAR 0 7
44893: PPUSH
44894: LD_INT 1
44896: PPUSH
44897: LD_VAR 0 14
44901: PPUSH
44902: CALL_OW 2
44906: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44907: LD_VAR 0 14
44911: PPUSH
44912: LD_VAR 0 1
44916: PPUSH
44917: CALL_OW 250
44921: PPUSH
44922: LD_VAR 0 1
44926: PPUSH
44927: CALL_OW 251
44931: PPUSH
44932: LD_INT 10
44934: PPUSH
44935: LD_INT 0
44937: PPUSH
44938: CALL_OW 50
// continue ;
44942: GO 44843
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
44944: LD_VAR 0 12
44948: PUSH
44949: LD_INT 1
44951: ARRAY
44952: PPUSH
44953: CALL_OW 313
44957: PUSH
44958: LD_VAR 0 12
44962: PUSH
44963: LD_INT 1
44965: ARRAY
44966: PPUSH
44967: CALL_OW 266
44971: PUSH
44972: LD_INT 32
44974: PUSH
44975: LD_INT 31
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: IN
44982: AND
44983: PUSH
44984: LD_VAR 0 12
44988: PUSH
44989: LD_INT 1
44991: ARRAY
44992: PPUSH
44993: CALL_OW 313
44997: PUSH
44998: LD_INT 6
45000: EQUAL
45001: OR
45002: IFFALSE 45022
// f := Delete ( f , 1 ) ;
45004: LD_ADDR_VAR 0 12
45008: PUSH
45009: LD_VAR 0 12
45013: PPUSH
45014: LD_INT 1
45016: PPUSH
45017: CALL_OW 3
45021: ST_TO_ADDR
// if not f then
45022: LD_VAR 0 12
45026: NOT
45027: IFFALSE 45045
// begin x := x + 2 ;
45029: LD_ADDR_VAR 0 13
45033: PUSH
45034: LD_VAR 0 13
45038: PUSH
45039: LD_INT 2
45041: PLUS
45042: ST_TO_ADDR
// continue ;
45043: GO 44843
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45045: LD_VAR 0 12
45049: PUSH
45050: LD_INT 1
45052: ARRAY
45053: PPUSH
45054: CALL_OW 266
45058: PUSH
45059: LD_INT 5
45061: EQUAL
45062: IFFALSE 45136
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45064: LD_VAR 0 12
45068: PUSH
45069: LD_INT 1
45071: ARRAY
45072: PPUSH
45073: CALL_OW 313
45077: PUSH
45078: LD_INT 3
45080: LESS
45081: IFFALSE 45117
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45083: LD_INT 0
45085: PPUSH
45086: LD_INT 5
45088: PUSH
45089: LD_INT 8
45091: PUSH
45092: LD_INT 9
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: LIST
45099: PUSH
45100: LD_VAR 0 17
45104: ARRAY
45105: PPUSH
45106: LD_VAR 0 4
45110: PPUSH
45111: CALL_OW 380
45115: GO 45134
// PrepareHuman ( false , i , skill ) ;
45117: LD_INT 0
45119: PPUSH
45120: LD_VAR 0 8
45124: PPUSH
45125: LD_VAR 0 4
45129: PPUSH
45130: CALL_OW 380
// end else
45134: GO 45153
// PrepareHuman ( false , i , skill ) ;
45136: LD_INT 0
45138: PPUSH
45139: LD_VAR 0 8
45143: PPUSH
45144: LD_VAR 0 4
45148: PPUSH
45149: CALL_OW 380
// un := CreateHuman ;
45153: LD_ADDR_VAR 0 14
45157: PUSH
45158: CALL_OW 44
45162: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45163: LD_ADDR_VAR 0 7
45167: PUSH
45168: LD_VAR 0 7
45172: PPUSH
45173: LD_INT 1
45175: PPUSH
45176: LD_VAR 0 14
45180: PPUSH
45181: CALL_OW 2
45185: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45186: LD_VAR 0 14
45190: PPUSH
45191: LD_VAR 0 12
45195: PUSH
45196: LD_INT 1
45198: ARRAY
45199: PPUSH
45200: CALL_OW 52
// end ;
45204: GO 44843
45206: POP
45207: POP
// end ;
45208: GO 44145
45210: POP
45211: POP
// result := result ^ buildings ;
45212: LD_ADDR_VAR 0 7
45216: PUSH
45217: LD_VAR 0 7
45221: PUSH
45222: LD_VAR 0 18
45226: ADD
45227: ST_TO_ADDR
// end else
45228: GO 45371
// begin for i = 1 to personel do
45230: LD_ADDR_VAR 0 8
45234: PUSH
45235: DOUBLE
45236: LD_INT 1
45238: DEC
45239: ST_TO_ADDR
45240: LD_VAR 0 6
45244: PUSH
45245: FOR_TO
45246: IFFALSE 45369
// begin if i > 4 then
45248: LD_VAR 0 8
45252: PUSH
45253: LD_INT 4
45255: GREATER
45256: IFFALSE 45260
// break ;
45258: GO 45369
// x := personel [ i ] ;
45260: LD_ADDR_VAR 0 13
45264: PUSH
45265: LD_VAR 0 6
45269: PUSH
45270: LD_VAR 0 8
45274: ARRAY
45275: ST_TO_ADDR
// if x = - 1 then
45276: LD_VAR 0 13
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: EQUAL
45285: IFFALSE 45289
// continue ;
45287: GO 45245
// PrepareHuman ( false , i , skill ) ;
45289: LD_INT 0
45291: PPUSH
45292: LD_VAR 0 8
45296: PPUSH
45297: LD_VAR 0 4
45301: PPUSH
45302: CALL_OW 380
// un := CreateHuman ;
45306: LD_ADDR_VAR 0 14
45310: PUSH
45311: CALL_OW 44
45315: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45316: LD_VAR 0 14
45320: PPUSH
45321: LD_VAR 0 1
45325: PPUSH
45326: CALL_OW 250
45330: PPUSH
45331: LD_VAR 0 1
45335: PPUSH
45336: CALL_OW 251
45340: PPUSH
45341: LD_INT 10
45343: PPUSH
45344: LD_INT 0
45346: PPUSH
45347: CALL_OW 50
// result := result ^ un ;
45351: LD_ADDR_VAR 0 7
45355: PUSH
45356: LD_VAR 0 7
45360: PUSH
45361: LD_VAR 0 14
45365: ADD
45366: ST_TO_ADDR
// end ;
45367: GO 45245
45369: POP
45370: POP
// end ; end ;
45371: LD_VAR 0 7
45375: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45376: LD_INT 0
45378: PPUSH
45379: PPUSH
45380: PPUSH
45381: PPUSH
45382: PPUSH
45383: PPUSH
45384: PPUSH
45385: PPUSH
45386: PPUSH
45387: PPUSH
45388: PPUSH
45389: PPUSH
45390: PPUSH
45391: PPUSH
45392: PPUSH
45393: PPUSH
// result := false ;
45394: LD_ADDR_VAR 0 3
45398: PUSH
45399: LD_INT 0
45401: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45402: LD_VAR 0 1
45406: NOT
45407: PUSH
45408: LD_VAR 0 1
45412: PPUSH
45413: CALL_OW 266
45417: PUSH
45418: LD_INT 32
45420: PUSH
45421: LD_INT 33
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: IN
45428: NOT
45429: OR
45430: IFFALSE 45434
// exit ;
45432: GO 46543
// nat := GetNation ( tower ) ;
45434: LD_ADDR_VAR 0 12
45438: PUSH
45439: LD_VAR 0 1
45443: PPUSH
45444: CALL_OW 248
45448: ST_TO_ADDR
// side := GetSide ( tower ) ;
45449: LD_ADDR_VAR 0 16
45453: PUSH
45454: LD_VAR 0 1
45458: PPUSH
45459: CALL_OW 255
45463: ST_TO_ADDR
// x := GetX ( tower ) ;
45464: LD_ADDR_VAR 0 10
45468: PUSH
45469: LD_VAR 0 1
45473: PPUSH
45474: CALL_OW 250
45478: ST_TO_ADDR
// y := GetY ( tower ) ;
45479: LD_ADDR_VAR 0 11
45483: PUSH
45484: LD_VAR 0 1
45488: PPUSH
45489: CALL_OW 251
45493: ST_TO_ADDR
// if not x or not y then
45494: LD_VAR 0 10
45498: NOT
45499: PUSH
45500: LD_VAR 0 11
45504: NOT
45505: OR
45506: IFFALSE 45510
// exit ;
45508: GO 46543
// weapon := 0 ;
45510: LD_ADDR_VAR 0 18
45514: PUSH
45515: LD_INT 0
45517: ST_TO_ADDR
// fac_list := [ ] ;
45518: LD_ADDR_VAR 0 17
45522: PUSH
45523: EMPTY
45524: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
45525: LD_ADDR_VAR 0 6
45529: PUSH
45530: LD_VAR 0 1
45534: PPUSH
45535: CALL_OW 274
45539: PPUSH
45540: LD_VAR 0 2
45544: PPUSH
45545: LD_INT 0
45547: PPUSH
45548: CALL 43114 0 3
45552: PPUSH
45553: LD_INT 30
45555: PUSH
45556: LD_INT 3
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PPUSH
45563: CALL_OW 72
45567: ST_TO_ADDR
// if not factories then
45568: LD_VAR 0 6
45572: NOT
45573: IFFALSE 45577
// exit ;
45575: GO 46543
// for i in factories do
45577: LD_ADDR_VAR 0 8
45581: PUSH
45582: LD_VAR 0 6
45586: PUSH
45587: FOR_IN
45588: IFFALSE 45613
// fac_list := fac_list union AvailableWeaponList ( i ) ;
45590: LD_ADDR_VAR 0 17
45594: PUSH
45595: LD_VAR 0 17
45599: PUSH
45600: LD_VAR 0 8
45604: PPUSH
45605: CALL_OW 478
45609: UNION
45610: ST_TO_ADDR
45611: GO 45587
45613: POP
45614: POP
// if not fac_list then
45615: LD_VAR 0 17
45619: NOT
45620: IFFALSE 45624
// exit ;
45622: GO 46543
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
45624: LD_ADDR_VAR 0 5
45628: PUSH
45629: LD_INT 4
45631: PUSH
45632: LD_INT 5
45634: PUSH
45635: LD_INT 9
45637: PUSH
45638: LD_INT 10
45640: PUSH
45641: LD_INT 6
45643: PUSH
45644: LD_INT 7
45646: PUSH
45647: LD_INT 11
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 27
45661: PUSH
45662: LD_INT 28
45664: PUSH
45665: LD_INT 26
45667: PUSH
45668: LD_INT 30
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 43
45679: PUSH
45680: LD_INT 44
45682: PUSH
45683: LD_INT 46
45685: PUSH
45686: LD_INT 45
45688: PUSH
45689: LD_INT 47
45691: PUSH
45692: LD_INT 49
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: LIST
45707: PUSH
45708: LD_VAR 0 12
45712: ARRAY
45713: ST_TO_ADDR
// list := list isect fac_list ;
45714: LD_ADDR_VAR 0 5
45718: PUSH
45719: LD_VAR 0 5
45723: PUSH
45724: LD_VAR 0 17
45728: ISECT
45729: ST_TO_ADDR
// if not list then
45730: LD_VAR 0 5
45734: NOT
45735: IFFALSE 45739
// exit ;
45737: GO 46543
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
45739: LD_VAR 0 12
45743: PUSH
45744: LD_INT 3
45746: EQUAL
45747: PUSH
45748: LD_INT 49
45750: PUSH
45751: LD_VAR 0 5
45755: IN
45756: AND
45757: PUSH
45758: LD_INT 31
45760: PPUSH
45761: LD_VAR 0 16
45765: PPUSH
45766: CALL_OW 321
45770: PUSH
45771: LD_INT 2
45773: EQUAL
45774: AND
45775: IFFALSE 45835
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
45777: LD_INT 22
45779: PUSH
45780: LD_VAR 0 16
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 35
45791: PUSH
45792: LD_INT 49
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 91
45801: PUSH
45802: LD_VAR 0 1
45806: PUSH
45807: LD_INT 10
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: LIST
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: LIST
45819: PPUSH
45820: CALL_OW 69
45824: NOT
45825: IFFALSE 45835
// weapon := ru_time_lapser ;
45827: LD_ADDR_VAR 0 18
45831: PUSH
45832: LD_INT 49
45834: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
45835: LD_VAR 0 12
45839: PUSH
45840: LD_INT 1
45842: PUSH
45843: LD_INT 2
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: IN
45850: PUSH
45851: LD_INT 11
45853: PUSH
45854: LD_VAR 0 5
45858: IN
45859: PUSH
45860: LD_INT 30
45862: PUSH
45863: LD_VAR 0 5
45867: IN
45868: OR
45869: AND
45870: PUSH
45871: LD_INT 6
45873: PPUSH
45874: LD_VAR 0 16
45878: PPUSH
45879: CALL_OW 321
45883: PUSH
45884: LD_INT 2
45886: EQUAL
45887: AND
45888: IFFALSE 46053
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
45890: LD_INT 22
45892: PUSH
45893: LD_VAR 0 16
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 2
45904: PUSH
45905: LD_INT 35
45907: PUSH
45908: LD_INT 11
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 35
45917: PUSH
45918: LD_INT 30
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 91
45932: PUSH
45933: LD_VAR 0 1
45937: PUSH
45938: LD_INT 18
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: LIST
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: LIST
45950: PPUSH
45951: CALL_OW 69
45955: NOT
45956: PUSH
45957: LD_INT 22
45959: PUSH
45960: LD_VAR 0 16
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 2
45971: PUSH
45972: LD_INT 30
45974: PUSH
45975: LD_INT 32
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 30
45984: PUSH
45985: LD_INT 33
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 91
45999: PUSH
46000: LD_VAR 0 1
46004: PUSH
46005: LD_INT 12
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: LIST
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: LIST
46017: PUSH
46018: EMPTY
46019: LIST
46020: PPUSH
46021: CALL_OW 69
46025: PUSH
46026: LD_INT 2
46028: GREATER
46029: AND
46030: IFFALSE 46053
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46032: LD_ADDR_VAR 0 18
46036: PUSH
46037: LD_INT 11
46039: PUSH
46040: LD_INT 30
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_VAR 0 12
46051: ARRAY
46052: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46053: LD_VAR 0 18
46057: NOT
46058: PUSH
46059: LD_INT 40
46061: PPUSH
46062: LD_VAR 0 16
46066: PPUSH
46067: CALL_OW 321
46071: PUSH
46072: LD_INT 2
46074: EQUAL
46075: AND
46076: PUSH
46077: LD_INT 7
46079: PUSH
46080: LD_VAR 0 5
46084: IN
46085: PUSH
46086: LD_INT 28
46088: PUSH
46089: LD_VAR 0 5
46093: IN
46094: OR
46095: PUSH
46096: LD_INT 45
46098: PUSH
46099: LD_VAR 0 5
46103: IN
46104: OR
46105: AND
46106: IFFALSE 46360
// begin hex := GetHexInfo ( x , y ) ;
46108: LD_ADDR_VAR 0 4
46112: PUSH
46113: LD_VAR 0 10
46117: PPUSH
46118: LD_VAR 0 11
46122: PPUSH
46123: CALL_OW 546
46127: ST_TO_ADDR
// if hex [ 1 ] then
46128: LD_VAR 0 4
46132: PUSH
46133: LD_INT 1
46135: ARRAY
46136: IFFALSE 46140
// exit ;
46138: GO 46543
// height := hex [ 2 ] ;
46140: LD_ADDR_VAR 0 15
46144: PUSH
46145: LD_VAR 0 4
46149: PUSH
46150: LD_INT 2
46152: ARRAY
46153: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46154: LD_ADDR_VAR 0 14
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: LD_INT 2
46164: PUSH
46165: LD_INT 3
46167: PUSH
46168: LD_INT 5
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: ST_TO_ADDR
// for i in tmp do
46177: LD_ADDR_VAR 0 8
46181: PUSH
46182: LD_VAR 0 14
46186: PUSH
46187: FOR_IN
46188: IFFALSE 46358
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46190: LD_ADDR_VAR 0 9
46194: PUSH
46195: LD_VAR 0 10
46199: PPUSH
46200: LD_VAR 0 8
46204: PPUSH
46205: LD_INT 5
46207: PPUSH
46208: CALL_OW 272
46212: PUSH
46213: LD_VAR 0 11
46217: PPUSH
46218: LD_VAR 0 8
46222: PPUSH
46223: LD_INT 5
46225: PPUSH
46226: CALL_OW 273
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46235: LD_VAR 0 9
46239: PUSH
46240: LD_INT 1
46242: ARRAY
46243: PPUSH
46244: LD_VAR 0 9
46248: PUSH
46249: LD_INT 2
46251: ARRAY
46252: PPUSH
46253: CALL_OW 488
46257: IFFALSE 46356
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46259: LD_ADDR_VAR 0 4
46263: PUSH
46264: LD_VAR 0 9
46268: PUSH
46269: LD_INT 1
46271: ARRAY
46272: PPUSH
46273: LD_VAR 0 9
46277: PUSH
46278: LD_INT 2
46280: ARRAY
46281: PPUSH
46282: CALL_OW 546
46286: ST_TO_ADDR
// if hex [ 1 ] then
46287: LD_VAR 0 4
46291: PUSH
46292: LD_INT 1
46294: ARRAY
46295: IFFALSE 46299
// continue ;
46297: GO 46187
// h := hex [ 2 ] ;
46299: LD_ADDR_VAR 0 13
46303: PUSH
46304: LD_VAR 0 4
46308: PUSH
46309: LD_INT 2
46311: ARRAY
46312: ST_TO_ADDR
// if h + 7 < height then
46313: LD_VAR 0 13
46317: PUSH
46318: LD_INT 7
46320: PLUS
46321: PUSH
46322: LD_VAR 0 15
46326: LESS
46327: IFFALSE 46356
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46329: LD_ADDR_VAR 0 18
46333: PUSH
46334: LD_INT 7
46336: PUSH
46337: LD_INT 28
46339: PUSH
46340: LD_INT 45
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: LIST
46347: PUSH
46348: LD_VAR 0 12
46352: ARRAY
46353: ST_TO_ADDR
// break ;
46354: GO 46358
// end ; end ; end ;
46356: GO 46187
46358: POP
46359: POP
// end ; if not weapon then
46360: LD_VAR 0 18
46364: NOT
46365: IFFALSE 46425
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46367: LD_ADDR_VAR 0 5
46371: PUSH
46372: LD_VAR 0 5
46376: PUSH
46377: LD_INT 11
46379: PUSH
46380: LD_INT 30
46382: PUSH
46383: LD_INT 49
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: LIST
46390: DIFF
46391: ST_TO_ADDR
// if not list then
46392: LD_VAR 0 5
46396: NOT
46397: IFFALSE 46401
// exit ;
46399: GO 46543
// weapon := list [ rand ( 1 , list ) ] ;
46401: LD_ADDR_VAR 0 18
46405: PUSH
46406: LD_VAR 0 5
46410: PUSH
46411: LD_INT 1
46413: PPUSH
46414: LD_VAR 0 5
46418: PPUSH
46419: CALL_OW 12
46423: ARRAY
46424: ST_TO_ADDR
// end ; if weapon then
46425: LD_VAR 0 18
46429: IFFALSE 46543
// begin tmp := CostOfWeapon ( weapon ) ;
46431: LD_ADDR_VAR 0 14
46435: PUSH
46436: LD_VAR 0 18
46440: PPUSH
46441: CALL_OW 451
46445: ST_TO_ADDR
// j := GetBase ( tower ) ;
46446: LD_ADDR_VAR 0 9
46450: PUSH
46451: LD_VAR 0 1
46455: PPUSH
46456: CALL_OW 274
46460: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46461: LD_VAR 0 9
46465: PPUSH
46466: LD_INT 1
46468: PPUSH
46469: CALL_OW 275
46473: PUSH
46474: LD_VAR 0 14
46478: PUSH
46479: LD_INT 1
46481: ARRAY
46482: GREATEREQUAL
46483: PUSH
46484: LD_VAR 0 9
46488: PPUSH
46489: LD_INT 2
46491: PPUSH
46492: CALL_OW 275
46496: PUSH
46497: LD_VAR 0 14
46501: PUSH
46502: LD_INT 2
46504: ARRAY
46505: GREATEREQUAL
46506: AND
46507: PUSH
46508: LD_VAR 0 9
46512: PPUSH
46513: LD_INT 3
46515: PPUSH
46516: CALL_OW 275
46520: PUSH
46521: LD_VAR 0 14
46525: PUSH
46526: LD_INT 3
46528: ARRAY
46529: GREATEREQUAL
46530: AND
46531: IFFALSE 46543
// result := weapon ;
46533: LD_ADDR_VAR 0 3
46537: PUSH
46538: LD_VAR 0 18
46542: ST_TO_ADDR
// end ; end ;
46543: LD_VAR 0 3
46547: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
46548: LD_INT 0
46550: PPUSH
46551: PPUSH
// result := true ;
46552: LD_ADDR_VAR 0 3
46556: PUSH
46557: LD_INT 1
46559: ST_TO_ADDR
// if array1 = array2 then
46560: LD_VAR 0 1
46564: PUSH
46565: LD_VAR 0 2
46569: EQUAL
46570: IFFALSE 46630
// begin for i = 1 to array1 do
46572: LD_ADDR_VAR 0 4
46576: PUSH
46577: DOUBLE
46578: LD_INT 1
46580: DEC
46581: ST_TO_ADDR
46582: LD_VAR 0 1
46586: PUSH
46587: FOR_TO
46588: IFFALSE 46626
// if array1 [ i ] <> array2 [ i ] then
46590: LD_VAR 0 1
46594: PUSH
46595: LD_VAR 0 4
46599: ARRAY
46600: PUSH
46601: LD_VAR 0 2
46605: PUSH
46606: LD_VAR 0 4
46610: ARRAY
46611: NONEQUAL
46612: IFFALSE 46624
// begin result := false ;
46614: LD_ADDR_VAR 0 3
46618: PUSH
46619: LD_INT 0
46621: ST_TO_ADDR
// break ;
46622: GO 46626
// end ;
46624: GO 46587
46626: POP
46627: POP
// end else
46628: GO 46638
// result := false ;
46630: LD_ADDR_VAR 0 3
46634: PUSH
46635: LD_INT 0
46637: ST_TO_ADDR
// end ;
46638: LD_VAR 0 3
46642: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
46643: LD_INT 0
46645: PPUSH
46646: PPUSH
// if not array1 or not array2 then
46647: LD_VAR 0 1
46651: NOT
46652: PUSH
46653: LD_VAR 0 2
46657: NOT
46658: OR
46659: IFFALSE 46663
// exit ;
46661: GO 46727
// result := true ;
46663: LD_ADDR_VAR 0 3
46667: PUSH
46668: LD_INT 1
46670: ST_TO_ADDR
// for i = 1 to array1 do
46671: LD_ADDR_VAR 0 4
46675: PUSH
46676: DOUBLE
46677: LD_INT 1
46679: DEC
46680: ST_TO_ADDR
46681: LD_VAR 0 1
46685: PUSH
46686: FOR_TO
46687: IFFALSE 46725
// if array1 [ i ] <> array2 [ i ] then
46689: LD_VAR 0 1
46693: PUSH
46694: LD_VAR 0 4
46698: ARRAY
46699: PUSH
46700: LD_VAR 0 2
46704: PUSH
46705: LD_VAR 0 4
46709: ARRAY
46710: NONEQUAL
46711: IFFALSE 46723
// begin result := false ;
46713: LD_ADDR_VAR 0 3
46717: PUSH
46718: LD_INT 0
46720: ST_TO_ADDR
// break ;
46721: GO 46725
// end ;
46723: GO 46686
46725: POP
46726: POP
// end ;
46727: LD_VAR 0 3
46731: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
46732: LD_INT 0
46734: PPUSH
46735: PPUSH
46736: PPUSH
// pom := GetBase ( fac ) ;
46737: LD_ADDR_VAR 0 5
46741: PUSH
46742: LD_VAR 0 1
46746: PPUSH
46747: CALL_OW 274
46751: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
46752: LD_ADDR_VAR 0 4
46756: PUSH
46757: LD_VAR 0 2
46761: PUSH
46762: LD_INT 1
46764: ARRAY
46765: PPUSH
46766: LD_VAR 0 2
46770: PUSH
46771: LD_INT 2
46773: ARRAY
46774: PPUSH
46775: LD_VAR 0 2
46779: PUSH
46780: LD_INT 3
46782: ARRAY
46783: PPUSH
46784: LD_VAR 0 2
46788: PUSH
46789: LD_INT 4
46791: ARRAY
46792: PPUSH
46793: CALL_OW 449
46797: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46798: LD_ADDR_VAR 0 3
46802: PUSH
46803: LD_VAR 0 5
46807: PPUSH
46808: LD_INT 1
46810: PPUSH
46811: CALL_OW 275
46815: PUSH
46816: LD_VAR 0 4
46820: PUSH
46821: LD_INT 1
46823: ARRAY
46824: GREATEREQUAL
46825: PUSH
46826: LD_VAR 0 5
46830: PPUSH
46831: LD_INT 2
46833: PPUSH
46834: CALL_OW 275
46838: PUSH
46839: LD_VAR 0 4
46843: PUSH
46844: LD_INT 2
46846: ARRAY
46847: GREATEREQUAL
46848: AND
46849: PUSH
46850: LD_VAR 0 5
46854: PPUSH
46855: LD_INT 3
46857: PPUSH
46858: CALL_OW 275
46862: PUSH
46863: LD_VAR 0 4
46867: PUSH
46868: LD_INT 3
46870: ARRAY
46871: GREATEREQUAL
46872: AND
46873: ST_TO_ADDR
// end ;
46874: LD_VAR 0 3
46878: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
46879: LD_INT 0
46881: PPUSH
46882: PPUSH
46883: PPUSH
46884: PPUSH
// pom := GetBase ( building ) ;
46885: LD_ADDR_VAR 0 3
46889: PUSH
46890: LD_VAR 0 1
46894: PPUSH
46895: CALL_OW 274
46899: ST_TO_ADDR
// if not pom then
46900: LD_VAR 0 3
46904: NOT
46905: IFFALSE 46909
// exit ;
46907: GO 47079
// btype := GetBType ( building ) ;
46909: LD_ADDR_VAR 0 5
46913: PUSH
46914: LD_VAR 0 1
46918: PPUSH
46919: CALL_OW 266
46923: ST_TO_ADDR
// if btype = b_armoury then
46924: LD_VAR 0 5
46928: PUSH
46929: LD_INT 4
46931: EQUAL
46932: IFFALSE 46942
// btype := b_barracks ;
46934: LD_ADDR_VAR 0 5
46938: PUSH
46939: LD_INT 5
46941: ST_TO_ADDR
// if btype = b_depot then
46942: LD_VAR 0 5
46946: PUSH
46947: LD_INT 0
46949: EQUAL
46950: IFFALSE 46960
// btype := b_warehouse ;
46952: LD_ADDR_VAR 0 5
46956: PUSH
46957: LD_INT 1
46959: ST_TO_ADDR
// if btype = b_workshop then
46960: LD_VAR 0 5
46964: PUSH
46965: LD_INT 2
46967: EQUAL
46968: IFFALSE 46978
// btype := b_factory ;
46970: LD_ADDR_VAR 0 5
46974: PUSH
46975: LD_INT 3
46977: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46978: LD_ADDR_VAR 0 4
46982: PUSH
46983: LD_VAR 0 5
46987: PPUSH
46988: LD_VAR 0 1
46992: PPUSH
46993: CALL_OW 248
46997: PPUSH
46998: CALL_OW 450
47002: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47003: LD_ADDR_VAR 0 2
47007: PUSH
47008: LD_VAR 0 3
47012: PPUSH
47013: LD_INT 1
47015: PPUSH
47016: CALL_OW 275
47020: PUSH
47021: LD_VAR 0 4
47025: PUSH
47026: LD_INT 1
47028: ARRAY
47029: GREATEREQUAL
47030: PUSH
47031: LD_VAR 0 3
47035: PPUSH
47036: LD_INT 2
47038: PPUSH
47039: CALL_OW 275
47043: PUSH
47044: LD_VAR 0 4
47048: PUSH
47049: LD_INT 2
47051: ARRAY
47052: GREATEREQUAL
47053: AND
47054: PUSH
47055: LD_VAR 0 3
47059: PPUSH
47060: LD_INT 3
47062: PPUSH
47063: CALL_OW 275
47067: PUSH
47068: LD_VAR 0 4
47072: PUSH
47073: LD_INT 3
47075: ARRAY
47076: GREATEREQUAL
47077: AND
47078: ST_TO_ADDR
// end ;
47079: LD_VAR 0 2
47083: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47084: LD_INT 0
47086: PPUSH
47087: PPUSH
47088: PPUSH
// pom := GetBase ( building ) ;
47089: LD_ADDR_VAR 0 4
47093: PUSH
47094: LD_VAR 0 1
47098: PPUSH
47099: CALL_OW 274
47103: ST_TO_ADDR
// if not pom then
47104: LD_VAR 0 4
47108: NOT
47109: IFFALSE 47113
// exit ;
47111: GO 47214
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47113: LD_ADDR_VAR 0 5
47117: PUSH
47118: LD_VAR 0 2
47122: PPUSH
47123: LD_VAR 0 1
47127: PPUSH
47128: CALL_OW 248
47132: PPUSH
47133: CALL_OW 450
47137: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47138: LD_ADDR_VAR 0 3
47142: PUSH
47143: LD_VAR 0 4
47147: PPUSH
47148: LD_INT 1
47150: PPUSH
47151: CALL_OW 275
47155: PUSH
47156: LD_VAR 0 5
47160: PUSH
47161: LD_INT 1
47163: ARRAY
47164: GREATEREQUAL
47165: PUSH
47166: LD_VAR 0 4
47170: PPUSH
47171: LD_INT 2
47173: PPUSH
47174: CALL_OW 275
47178: PUSH
47179: LD_VAR 0 5
47183: PUSH
47184: LD_INT 2
47186: ARRAY
47187: GREATEREQUAL
47188: AND
47189: PUSH
47190: LD_VAR 0 4
47194: PPUSH
47195: LD_INT 3
47197: PPUSH
47198: CALL_OW 275
47202: PUSH
47203: LD_VAR 0 5
47207: PUSH
47208: LD_INT 3
47210: ARRAY
47211: GREATEREQUAL
47212: AND
47213: ST_TO_ADDR
// end ;
47214: LD_VAR 0 3
47218: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47219: LD_INT 0
47221: PPUSH
47222: PPUSH
47223: PPUSH
47224: PPUSH
47225: PPUSH
47226: PPUSH
47227: PPUSH
47228: PPUSH
47229: PPUSH
47230: PPUSH
47231: PPUSH
// result := false ;
47232: LD_ADDR_VAR 0 8
47236: PUSH
47237: LD_INT 0
47239: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47240: LD_VAR 0 5
47244: NOT
47245: PUSH
47246: LD_VAR 0 1
47250: NOT
47251: OR
47252: PUSH
47253: LD_VAR 0 2
47257: NOT
47258: OR
47259: PUSH
47260: LD_VAR 0 3
47264: NOT
47265: OR
47266: IFFALSE 47270
// exit ;
47268: GO 48084
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
47270: LD_ADDR_VAR 0 14
47274: PUSH
47275: LD_VAR 0 1
47279: PPUSH
47280: LD_VAR 0 2
47284: PPUSH
47285: LD_VAR 0 3
47289: PPUSH
47290: LD_VAR 0 4
47294: PPUSH
47295: LD_VAR 0 5
47299: PUSH
47300: LD_INT 1
47302: ARRAY
47303: PPUSH
47304: CALL_OW 248
47308: PPUSH
47309: LD_INT 0
47311: PPUSH
47312: CALL 49321 0 6
47316: ST_TO_ADDR
// if not hexes then
47317: LD_VAR 0 14
47321: NOT
47322: IFFALSE 47326
// exit ;
47324: GO 48084
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47326: LD_ADDR_VAR 0 17
47330: PUSH
47331: LD_VAR 0 5
47335: PPUSH
47336: LD_INT 22
47338: PUSH
47339: LD_VAR 0 13
47343: PPUSH
47344: CALL_OW 255
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 2
47355: PUSH
47356: LD_INT 30
47358: PUSH
47359: LD_INT 0
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 30
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: LIST
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PPUSH
47385: CALL_OW 72
47389: ST_TO_ADDR
// for i = 1 to hexes do
47390: LD_ADDR_VAR 0 9
47394: PUSH
47395: DOUBLE
47396: LD_INT 1
47398: DEC
47399: ST_TO_ADDR
47400: LD_VAR 0 14
47404: PUSH
47405: FOR_TO
47406: IFFALSE 48082
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47408: LD_ADDR_VAR 0 13
47412: PUSH
47413: LD_VAR 0 14
47417: PUSH
47418: LD_VAR 0 9
47422: ARRAY
47423: PUSH
47424: LD_INT 1
47426: ARRAY
47427: PPUSH
47428: LD_VAR 0 14
47432: PUSH
47433: LD_VAR 0 9
47437: ARRAY
47438: PUSH
47439: LD_INT 2
47441: ARRAY
47442: PPUSH
47443: CALL_OW 428
47447: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47448: LD_VAR 0 14
47452: PUSH
47453: LD_VAR 0 9
47457: ARRAY
47458: PUSH
47459: LD_INT 1
47461: ARRAY
47462: PPUSH
47463: LD_VAR 0 14
47467: PUSH
47468: LD_VAR 0 9
47472: ARRAY
47473: PUSH
47474: LD_INT 2
47476: ARRAY
47477: PPUSH
47478: CALL_OW 351
47482: PUSH
47483: LD_VAR 0 14
47487: PUSH
47488: LD_VAR 0 9
47492: ARRAY
47493: PUSH
47494: LD_INT 1
47496: ARRAY
47497: PPUSH
47498: LD_VAR 0 14
47502: PUSH
47503: LD_VAR 0 9
47507: ARRAY
47508: PUSH
47509: LD_INT 2
47511: ARRAY
47512: PPUSH
47513: CALL_OW 488
47517: NOT
47518: OR
47519: PUSH
47520: LD_VAR 0 13
47524: PPUSH
47525: CALL_OW 247
47529: PUSH
47530: LD_INT 3
47532: EQUAL
47533: OR
47534: IFFALSE 47540
// exit ;
47536: POP
47537: POP
47538: GO 48084
// if not tmp then
47540: LD_VAR 0 13
47544: NOT
47545: IFFALSE 47549
// continue ;
47547: GO 47405
// result := true ;
47549: LD_ADDR_VAR 0 8
47553: PUSH
47554: LD_INT 1
47556: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
47557: LD_VAR 0 6
47561: PUSH
47562: LD_VAR 0 13
47566: PPUSH
47567: CALL_OW 247
47571: PUSH
47572: LD_INT 2
47574: EQUAL
47575: AND
47576: PUSH
47577: LD_VAR 0 13
47581: PPUSH
47582: CALL_OW 263
47586: PUSH
47587: LD_INT 1
47589: EQUAL
47590: AND
47591: IFFALSE 47755
// begin if IsDrivenBy ( tmp ) then
47593: LD_VAR 0 13
47597: PPUSH
47598: CALL_OW 311
47602: IFFALSE 47606
// continue ;
47604: GO 47405
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
47606: LD_VAR 0 6
47610: PPUSH
47611: LD_INT 3
47613: PUSH
47614: LD_INT 60
47616: PUSH
47617: EMPTY
47618: LIST
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 3
47626: PUSH
47627: LD_INT 55
47629: PUSH
47630: EMPTY
47631: LIST
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PPUSH
47641: CALL_OW 72
47645: IFFALSE 47753
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
47647: LD_ADDR_VAR 0 18
47651: PUSH
47652: LD_VAR 0 6
47656: PPUSH
47657: LD_INT 3
47659: PUSH
47660: LD_INT 60
47662: PUSH
47663: EMPTY
47664: LIST
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 3
47672: PUSH
47673: LD_INT 55
47675: PUSH
47676: EMPTY
47677: LIST
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PPUSH
47687: CALL_OW 72
47691: PUSH
47692: LD_INT 1
47694: ARRAY
47695: ST_TO_ADDR
// if IsInUnit ( driver ) then
47696: LD_VAR 0 18
47700: PPUSH
47701: CALL_OW 310
47705: IFFALSE 47716
// ComExit ( driver ) ;
47707: LD_VAR 0 18
47711: PPUSH
47712: CALL 72505 0 1
// AddComEnterUnit ( driver , tmp ) ;
47716: LD_VAR 0 18
47720: PPUSH
47721: LD_VAR 0 13
47725: PPUSH
47726: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
47730: LD_VAR 0 18
47734: PPUSH
47735: LD_VAR 0 7
47739: PPUSH
47740: CALL_OW 173
// AddComExitVehicle ( driver ) ;
47744: LD_VAR 0 18
47748: PPUSH
47749: CALL_OW 181
// end ; continue ;
47753: GO 47405
// end ; if not cleaners or not tmp in cleaners then
47755: LD_VAR 0 6
47759: NOT
47760: PUSH
47761: LD_VAR 0 13
47765: PUSH
47766: LD_VAR 0 6
47770: IN
47771: NOT
47772: OR
47773: IFFALSE 48080
// begin if dep then
47775: LD_VAR 0 17
47779: IFFALSE 47915
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47781: LD_ADDR_VAR 0 16
47785: PUSH
47786: LD_VAR 0 17
47790: PUSH
47791: LD_INT 1
47793: ARRAY
47794: PPUSH
47795: CALL_OW 250
47799: PPUSH
47800: LD_VAR 0 17
47804: PUSH
47805: LD_INT 1
47807: ARRAY
47808: PPUSH
47809: CALL_OW 254
47813: PPUSH
47814: LD_INT 5
47816: PPUSH
47817: CALL_OW 272
47821: PUSH
47822: LD_VAR 0 17
47826: PUSH
47827: LD_INT 1
47829: ARRAY
47830: PPUSH
47831: CALL_OW 251
47835: PPUSH
47836: LD_VAR 0 17
47840: PUSH
47841: LD_INT 1
47843: ARRAY
47844: PPUSH
47845: CALL_OW 254
47849: PPUSH
47850: LD_INT 5
47852: PPUSH
47853: CALL_OW 273
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
47862: LD_VAR 0 16
47866: PUSH
47867: LD_INT 1
47869: ARRAY
47870: PPUSH
47871: LD_VAR 0 16
47875: PUSH
47876: LD_INT 2
47878: ARRAY
47879: PPUSH
47880: CALL_OW 488
47884: IFFALSE 47915
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
47886: LD_VAR 0 13
47890: PPUSH
47891: LD_VAR 0 16
47895: PUSH
47896: LD_INT 1
47898: ARRAY
47899: PPUSH
47900: LD_VAR 0 16
47904: PUSH
47905: LD_INT 2
47907: ARRAY
47908: PPUSH
47909: CALL_OW 111
// continue ;
47913: GO 47405
// end ; end ; r := GetDir ( tmp ) ;
47915: LD_ADDR_VAR 0 15
47919: PUSH
47920: LD_VAR 0 13
47924: PPUSH
47925: CALL_OW 254
47929: ST_TO_ADDR
// if r = 5 then
47930: LD_VAR 0 15
47934: PUSH
47935: LD_INT 5
47937: EQUAL
47938: IFFALSE 47948
// r := 0 ;
47940: LD_ADDR_VAR 0 15
47944: PUSH
47945: LD_INT 0
47947: ST_TO_ADDR
// for j = r to 5 do
47948: LD_ADDR_VAR 0 10
47952: PUSH
47953: DOUBLE
47954: LD_VAR 0 15
47958: DEC
47959: ST_TO_ADDR
47960: LD_INT 5
47962: PUSH
47963: FOR_TO
47964: IFFALSE 48078
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47966: LD_ADDR_VAR 0 11
47970: PUSH
47971: LD_VAR 0 13
47975: PPUSH
47976: CALL_OW 250
47980: PPUSH
47981: LD_VAR 0 10
47985: PPUSH
47986: LD_INT 2
47988: PPUSH
47989: CALL_OW 272
47993: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47994: LD_ADDR_VAR 0 12
47998: PUSH
47999: LD_VAR 0 13
48003: PPUSH
48004: CALL_OW 251
48008: PPUSH
48009: LD_VAR 0 10
48013: PPUSH
48014: LD_INT 2
48016: PPUSH
48017: CALL_OW 273
48021: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48022: LD_VAR 0 11
48026: PPUSH
48027: LD_VAR 0 12
48031: PPUSH
48032: CALL_OW 488
48036: PUSH
48037: LD_VAR 0 11
48041: PPUSH
48042: LD_VAR 0 12
48046: PPUSH
48047: CALL_OW 428
48051: NOT
48052: AND
48053: IFFALSE 48076
// begin ComMoveXY ( tmp , _x , _y ) ;
48055: LD_VAR 0 13
48059: PPUSH
48060: LD_VAR 0 11
48064: PPUSH
48065: LD_VAR 0 12
48069: PPUSH
48070: CALL_OW 111
// break ;
48074: GO 48078
// end ; end ;
48076: GO 47963
48078: POP
48079: POP
// end ; end ;
48080: GO 47405
48082: POP
48083: POP
// end ;
48084: LD_VAR 0 8
48088: RET
// export function BuildingTechInvented ( side , btype ) ; begin
48089: LD_INT 0
48091: PPUSH
// result := true ;
48092: LD_ADDR_VAR 0 3
48096: PUSH
48097: LD_INT 1
48099: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
48100: LD_VAR 0 2
48104: PUSH
48105: LD_INT 24
48107: DOUBLE
48108: EQUAL
48109: IFTRUE 48119
48111: LD_INT 33
48113: DOUBLE
48114: EQUAL
48115: IFTRUE 48119
48117: GO 48144
48119: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
48120: LD_ADDR_VAR 0 3
48124: PUSH
48125: LD_INT 32
48127: PPUSH
48128: LD_VAR 0 1
48132: PPUSH
48133: CALL_OW 321
48137: PUSH
48138: LD_INT 2
48140: EQUAL
48141: ST_TO_ADDR
48142: GO 48464
48144: LD_INT 20
48146: DOUBLE
48147: EQUAL
48148: IFTRUE 48152
48150: GO 48177
48152: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
48153: LD_ADDR_VAR 0 3
48157: PUSH
48158: LD_INT 6
48160: PPUSH
48161: LD_VAR 0 1
48165: PPUSH
48166: CALL_OW 321
48170: PUSH
48171: LD_INT 2
48173: EQUAL
48174: ST_TO_ADDR
48175: GO 48464
48177: LD_INT 22
48179: DOUBLE
48180: EQUAL
48181: IFTRUE 48191
48183: LD_INT 36
48185: DOUBLE
48186: EQUAL
48187: IFTRUE 48191
48189: GO 48216
48191: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
48192: LD_ADDR_VAR 0 3
48196: PUSH
48197: LD_INT 15
48199: PPUSH
48200: LD_VAR 0 1
48204: PPUSH
48205: CALL_OW 321
48209: PUSH
48210: LD_INT 2
48212: EQUAL
48213: ST_TO_ADDR
48214: GO 48464
48216: LD_INT 30
48218: DOUBLE
48219: EQUAL
48220: IFTRUE 48224
48222: GO 48249
48224: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
48225: LD_ADDR_VAR 0 3
48229: PUSH
48230: LD_INT 20
48232: PPUSH
48233: LD_VAR 0 1
48237: PPUSH
48238: CALL_OW 321
48242: PUSH
48243: LD_INT 2
48245: EQUAL
48246: ST_TO_ADDR
48247: GO 48464
48249: LD_INT 28
48251: DOUBLE
48252: EQUAL
48253: IFTRUE 48263
48255: LD_INT 21
48257: DOUBLE
48258: EQUAL
48259: IFTRUE 48263
48261: GO 48288
48263: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
48264: LD_ADDR_VAR 0 3
48268: PUSH
48269: LD_INT 21
48271: PPUSH
48272: LD_VAR 0 1
48276: PPUSH
48277: CALL_OW 321
48281: PUSH
48282: LD_INT 2
48284: EQUAL
48285: ST_TO_ADDR
48286: GO 48464
48288: LD_INT 16
48290: DOUBLE
48291: EQUAL
48292: IFTRUE 48296
48294: GO 48323
48296: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
48297: LD_ADDR_VAR 0 3
48301: PUSH
48302: LD_EXP 48
48306: PPUSH
48307: LD_VAR 0 1
48311: PPUSH
48312: CALL_OW 321
48316: PUSH
48317: LD_INT 2
48319: EQUAL
48320: ST_TO_ADDR
48321: GO 48464
48323: LD_INT 19
48325: DOUBLE
48326: EQUAL
48327: IFTRUE 48337
48329: LD_INT 23
48331: DOUBLE
48332: EQUAL
48333: IFTRUE 48337
48335: GO 48364
48337: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
48338: LD_ADDR_VAR 0 3
48342: PUSH
48343: LD_EXP 47
48347: PPUSH
48348: LD_VAR 0 1
48352: PPUSH
48353: CALL_OW 321
48357: PUSH
48358: LD_INT 2
48360: EQUAL
48361: ST_TO_ADDR
48362: GO 48464
48364: LD_INT 17
48366: DOUBLE
48367: EQUAL
48368: IFTRUE 48372
48370: GO 48397
48372: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
48373: LD_ADDR_VAR 0 3
48377: PUSH
48378: LD_INT 39
48380: PPUSH
48381: LD_VAR 0 1
48385: PPUSH
48386: CALL_OW 321
48390: PUSH
48391: LD_INT 2
48393: EQUAL
48394: ST_TO_ADDR
48395: GO 48464
48397: LD_INT 18
48399: DOUBLE
48400: EQUAL
48401: IFTRUE 48405
48403: GO 48430
48405: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
48406: LD_ADDR_VAR 0 3
48410: PUSH
48411: LD_INT 40
48413: PPUSH
48414: LD_VAR 0 1
48418: PPUSH
48419: CALL_OW 321
48423: PUSH
48424: LD_INT 2
48426: EQUAL
48427: ST_TO_ADDR
48428: GO 48464
48430: LD_INT 27
48432: DOUBLE
48433: EQUAL
48434: IFTRUE 48438
48436: GO 48463
48438: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
48439: LD_ADDR_VAR 0 3
48443: PUSH
48444: LD_INT 35
48446: PPUSH
48447: LD_VAR 0 1
48451: PPUSH
48452: CALL_OW 321
48456: PUSH
48457: LD_INT 2
48459: EQUAL
48460: ST_TO_ADDR
48461: GO 48464
48463: POP
// end ;
48464: LD_VAR 0 3
48468: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
48469: LD_INT 0
48471: PPUSH
48472: PPUSH
48473: PPUSH
48474: PPUSH
48475: PPUSH
48476: PPUSH
48477: PPUSH
48478: PPUSH
48479: PPUSH
48480: PPUSH
48481: PPUSH
// result := false ;
48482: LD_ADDR_VAR 0 6
48486: PUSH
48487: LD_INT 0
48489: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48490: LD_VAR 0 1
48494: NOT
48495: PUSH
48496: LD_VAR 0 1
48500: PPUSH
48501: CALL_OW 266
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: LD_INT 1
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: IN
48516: NOT
48517: OR
48518: PUSH
48519: LD_VAR 0 2
48523: NOT
48524: OR
48525: PUSH
48526: LD_VAR 0 5
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: LD_INT 2
48539: PUSH
48540: LD_INT 3
48542: PUSH
48543: LD_INT 4
48545: PUSH
48546: LD_INT 5
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: IN
48557: NOT
48558: OR
48559: PUSH
48560: LD_VAR 0 3
48564: PPUSH
48565: LD_VAR 0 4
48569: PPUSH
48570: CALL_OW 488
48574: NOT
48575: OR
48576: IFFALSE 48580
// exit ;
48578: GO 49316
// side := GetSide ( depot ) ;
48580: LD_ADDR_VAR 0 9
48584: PUSH
48585: LD_VAR 0 1
48589: PPUSH
48590: CALL_OW 255
48594: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
48595: LD_VAR 0 9
48599: PPUSH
48600: LD_VAR 0 2
48604: PPUSH
48605: CALL 48089 0 2
48609: NOT
48610: IFFALSE 48614
// exit ;
48612: GO 49316
// pom := GetBase ( depot ) ;
48614: LD_ADDR_VAR 0 10
48618: PUSH
48619: LD_VAR 0 1
48623: PPUSH
48624: CALL_OW 274
48628: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48629: LD_ADDR_VAR 0 11
48633: PUSH
48634: LD_VAR 0 2
48638: PPUSH
48639: LD_VAR 0 1
48643: PPUSH
48644: CALL_OW 248
48648: PPUSH
48649: CALL_OW 450
48653: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48654: LD_VAR 0 10
48658: PPUSH
48659: LD_INT 1
48661: PPUSH
48662: CALL_OW 275
48666: PUSH
48667: LD_VAR 0 11
48671: PUSH
48672: LD_INT 1
48674: ARRAY
48675: GREATEREQUAL
48676: PUSH
48677: LD_VAR 0 10
48681: PPUSH
48682: LD_INT 2
48684: PPUSH
48685: CALL_OW 275
48689: PUSH
48690: LD_VAR 0 11
48694: PUSH
48695: LD_INT 2
48697: ARRAY
48698: GREATEREQUAL
48699: AND
48700: PUSH
48701: LD_VAR 0 10
48705: PPUSH
48706: LD_INT 3
48708: PPUSH
48709: CALL_OW 275
48713: PUSH
48714: LD_VAR 0 11
48718: PUSH
48719: LD_INT 3
48721: ARRAY
48722: GREATEREQUAL
48723: AND
48724: NOT
48725: IFFALSE 48729
// exit ;
48727: GO 49316
// if GetBType ( depot ) = b_depot then
48729: LD_VAR 0 1
48733: PPUSH
48734: CALL_OW 266
48738: PUSH
48739: LD_INT 0
48741: EQUAL
48742: IFFALSE 48754
// dist := 28 else
48744: LD_ADDR_VAR 0 14
48748: PUSH
48749: LD_INT 28
48751: ST_TO_ADDR
48752: GO 48762
// dist := 36 ;
48754: LD_ADDR_VAR 0 14
48758: PUSH
48759: LD_INT 36
48761: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48762: LD_VAR 0 1
48766: PPUSH
48767: LD_VAR 0 3
48771: PPUSH
48772: LD_VAR 0 4
48776: PPUSH
48777: CALL_OW 297
48781: PUSH
48782: LD_VAR 0 14
48786: GREATER
48787: IFFALSE 48791
// exit ;
48789: GO 49316
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48791: LD_ADDR_VAR 0 12
48795: PUSH
48796: LD_VAR 0 2
48800: PPUSH
48801: LD_VAR 0 3
48805: PPUSH
48806: LD_VAR 0 4
48810: PPUSH
48811: LD_VAR 0 5
48815: PPUSH
48816: LD_VAR 0 1
48820: PPUSH
48821: CALL_OW 248
48825: PPUSH
48826: LD_INT 0
48828: PPUSH
48829: CALL 49321 0 6
48833: ST_TO_ADDR
// if not hexes then
48834: LD_VAR 0 12
48838: NOT
48839: IFFALSE 48843
// exit ;
48841: GO 49316
// hex := GetHexInfo ( x , y ) ;
48843: LD_ADDR_VAR 0 15
48847: PUSH
48848: LD_VAR 0 3
48852: PPUSH
48853: LD_VAR 0 4
48857: PPUSH
48858: CALL_OW 546
48862: ST_TO_ADDR
// if hex [ 1 ] then
48863: LD_VAR 0 15
48867: PUSH
48868: LD_INT 1
48870: ARRAY
48871: IFFALSE 48875
// exit ;
48873: GO 49316
// height := hex [ 2 ] ;
48875: LD_ADDR_VAR 0 13
48879: PUSH
48880: LD_VAR 0 15
48884: PUSH
48885: LD_INT 2
48887: ARRAY
48888: ST_TO_ADDR
// for i = 1 to hexes do
48889: LD_ADDR_VAR 0 7
48893: PUSH
48894: DOUBLE
48895: LD_INT 1
48897: DEC
48898: ST_TO_ADDR
48899: LD_VAR 0 12
48903: PUSH
48904: FOR_TO
48905: IFFALSE 49235
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48907: LD_VAR 0 12
48911: PUSH
48912: LD_VAR 0 7
48916: ARRAY
48917: PUSH
48918: LD_INT 1
48920: ARRAY
48921: PPUSH
48922: LD_VAR 0 12
48926: PUSH
48927: LD_VAR 0 7
48931: ARRAY
48932: PUSH
48933: LD_INT 2
48935: ARRAY
48936: PPUSH
48937: CALL_OW 488
48941: NOT
48942: PUSH
48943: LD_VAR 0 12
48947: PUSH
48948: LD_VAR 0 7
48952: ARRAY
48953: PUSH
48954: LD_INT 1
48956: ARRAY
48957: PPUSH
48958: LD_VAR 0 12
48962: PUSH
48963: LD_VAR 0 7
48967: ARRAY
48968: PUSH
48969: LD_INT 2
48971: ARRAY
48972: PPUSH
48973: CALL_OW 428
48977: PUSH
48978: LD_INT 0
48980: GREATER
48981: OR
48982: PUSH
48983: LD_VAR 0 12
48987: PUSH
48988: LD_VAR 0 7
48992: ARRAY
48993: PUSH
48994: LD_INT 1
48996: ARRAY
48997: PPUSH
48998: LD_VAR 0 12
49002: PUSH
49003: LD_VAR 0 7
49007: ARRAY
49008: PUSH
49009: LD_INT 2
49011: ARRAY
49012: PPUSH
49013: CALL_OW 351
49017: OR
49018: IFFALSE 49024
// exit ;
49020: POP
49021: POP
49022: GO 49316
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49024: LD_ADDR_VAR 0 8
49028: PUSH
49029: LD_VAR 0 12
49033: PUSH
49034: LD_VAR 0 7
49038: ARRAY
49039: PUSH
49040: LD_INT 1
49042: ARRAY
49043: PPUSH
49044: LD_VAR 0 12
49048: PUSH
49049: LD_VAR 0 7
49053: ARRAY
49054: PUSH
49055: LD_INT 2
49057: ARRAY
49058: PPUSH
49059: CALL_OW 546
49063: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49064: LD_VAR 0 8
49068: PUSH
49069: LD_INT 1
49071: ARRAY
49072: PUSH
49073: LD_VAR 0 8
49077: PUSH
49078: LD_INT 2
49080: ARRAY
49081: PUSH
49082: LD_VAR 0 13
49086: PUSH
49087: LD_INT 2
49089: PLUS
49090: GREATER
49091: OR
49092: PUSH
49093: LD_VAR 0 8
49097: PUSH
49098: LD_INT 2
49100: ARRAY
49101: PUSH
49102: LD_VAR 0 13
49106: PUSH
49107: LD_INT 2
49109: MINUS
49110: LESS
49111: OR
49112: PUSH
49113: LD_VAR 0 8
49117: PUSH
49118: LD_INT 3
49120: ARRAY
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: LD_INT 8
49127: PUSH
49128: LD_INT 9
49130: PUSH
49131: LD_INT 10
49133: PUSH
49134: LD_INT 11
49136: PUSH
49137: LD_INT 12
49139: PUSH
49140: LD_INT 13
49142: PUSH
49143: LD_INT 16
49145: PUSH
49146: LD_INT 17
49148: PUSH
49149: LD_INT 18
49151: PUSH
49152: LD_INT 19
49154: PUSH
49155: LD_INT 20
49157: PUSH
49158: LD_INT 21
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: IN
49176: NOT
49177: OR
49178: PUSH
49179: LD_VAR 0 8
49183: PUSH
49184: LD_INT 5
49186: ARRAY
49187: NOT
49188: OR
49189: PUSH
49190: LD_VAR 0 8
49194: PUSH
49195: LD_INT 6
49197: ARRAY
49198: PUSH
49199: LD_INT 1
49201: PUSH
49202: LD_INT 2
49204: PUSH
49205: LD_INT 7
49207: PUSH
49208: LD_INT 9
49210: PUSH
49211: LD_INT 10
49213: PUSH
49214: LD_INT 11
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: IN
49225: NOT
49226: OR
49227: IFFALSE 49233
// exit ;
49229: POP
49230: POP
49231: GO 49316
// end ;
49233: GO 48904
49235: POP
49236: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49237: LD_VAR 0 9
49241: PPUSH
49242: LD_VAR 0 3
49246: PPUSH
49247: LD_VAR 0 4
49251: PPUSH
49252: LD_INT 20
49254: PPUSH
49255: CALL 41262 0 4
49259: PUSH
49260: LD_INT 4
49262: ARRAY
49263: IFFALSE 49267
// exit ;
49265: GO 49316
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49267: LD_VAR 0 2
49271: PUSH
49272: LD_INT 29
49274: PUSH
49275: LD_INT 30
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: IN
49282: PUSH
49283: LD_VAR 0 3
49287: PPUSH
49288: LD_VAR 0 4
49292: PPUSH
49293: LD_VAR 0 9
49297: PPUSH
49298: CALL_OW 440
49302: NOT
49303: AND
49304: IFFALSE 49308
// exit ;
49306: GO 49316
// result := true ;
49308: LD_ADDR_VAR 0 6
49312: PUSH
49313: LD_INT 1
49315: ST_TO_ADDR
// end ;
49316: LD_VAR 0 6
49320: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49321: LD_INT 0
49323: PPUSH
49324: PPUSH
49325: PPUSH
49326: PPUSH
49327: PPUSH
49328: PPUSH
49329: PPUSH
49330: PPUSH
49331: PPUSH
49332: PPUSH
49333: PPUSH
49334: PPUSH
49335: PPUSH
49336: PPUSH
49337: PPUSH
49338: PPUSH
49339: PPUSH
49340: PPUSH
49341: PPUSH
49342: PPUSH
49343: PPUSH
49344: PPUSH
49345: PPUSH
49346: PPUSH
49347: PPUSH
49348: PPUSH
49349: PPUSH
49350: PPUSH
49351: PPUSH
49352: PPUSH
49353: PPUSH
49354: PPUSH
49355: PPUSH
49356: PPUSH
49357: PPUSH
49358: PPUSH
49359: PPUSH
49360: PPUSH
49361: PPUSH
49362: PPUSH
49363: PPUSH
49364: PPUSH
49365: PPUSH
49366: PPUSH
49367: PPUSH
49368: PPUSH
49369: PPUSH
49370: PPUSH
49371: PPUSH
49372: PPUSH
49373: PPUSH
49374: PPUSH
49375: PPUSH
49376: PPUSH
49377: PPUSH
49378: PPUSH
49379: PPUSH
49380: PPUSH
// result = [ ] ;
49381: LD_ADDR_VAR 0 7
49385: PUSH
49386: EMPTY
49387: ST_TO_ADDR
// temp_list = [ ] ;
49388: LD_ADDR_VAR 0 9
49392: PUSH
49393: EMPTY
49394: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49395: LD_VAR 0 4
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: LD_INT 1
49405: PUSH
49406: LD_INT 2
49408: PUSH
49409: LD_INT 3
49411: PUSH
49412: LD_INT 4
49414: PUSH
49415: LD_INT 5
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: IN
49426: NOT
49427: PUSH
49428: LD_VAR 0 1
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: LD_INT 1
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: IN
49443: PUSH
49444: LD_VAR 0 5
49448: PUSH
49449: LD_INT 1
49451: PUSH
49452: LD_INT 2
49454: PUSH
49455: LD_INT 3
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: LIST
49462: IN
49463: NOT
49464: AND
49465: OR
49466: IFFALSE 49470
// exit ;
49468: GO 67861
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49470: LD_VAR 0 1
49474: PUSH
49475: LD_INT 6
49477: PUSH
49478: LD_INT 7
49480: PUSH
49481: LD_INT 8
49483: PUSH
49484: LD_INT 13
49486: PUSH
49487: LD_INT 12
49489: PUSH
49490: LD_INT 15
49492: PUSH
49493: LD_INT 11
49495: PUSH
49496: LD_INT 14
49498: PUSH
49499: LD_INT 10
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: IN
49513: IFFALSE 49523
// btype = b_lab ;
49515: LD_ADDR_VAR 0 1
49519: PUSH
49520: LD_INT 6
49522: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49523: LD_VAR 0 6
49527: PUSH
49528: LD_INT 0
49530: PUSH
49531: LD_INT 1
49533: PUSH
49534: LD_INT 2
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: LIST
49541: IN
49542: NOT
49543: PUSH
49544: LD_VAR 0 1
49548: PUSH
49549: LD_INT 0
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: LD_INT 2
49557: PUSH
49558: LD_INT 3
49560: PUSH
49561: LD_INT 6
49563: PUSH
49564: LD_INT 36
49566: PUSH
49567: LD_INT 4
49569: PUSH
49570: LD_INT 5
49572: PUSH
49573: LD_INT 31
49575: PUSH
49576: LD_INT 32
49578: PUSH
49579: LD_INT 33
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: IN
49595: NOT
49596: PUSH
49597: LD_VAR 0 6
49601: PUSH
49602: LD_INT 1
49604: EQUAL
49605: AND
49606: OR
49607: PUSH
49608: LD_VAR 0 1
49612: PUSH
49613: LD_INT 2
49615: PUSH
49616: LD_INT 3
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: IN
49623: NOT
49624: PUSH
49625: LD_VAR 0 6
49629: PUSH
49630: LD_INT 2
49632: EQUAL
49633: AND
49634: OR
49635: IFFALSE 49645
// mode = 0 ;
49637: LD_ADDR_VAR 0 6
49641: PUSH
49642: LD_INT 0
49644: ST_TO_ADDR
// case mode of 0 :
49645: LD_VAR 0 6
49649: PUSH
49650: LD_INT 0
49652: DOUBLE
49653: EQUAL
49654: IFTRUE 49658
49656: GO 61111
49658: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49659: LD_ADDR_VAR 0 11
49663: PUSH
49664: LD_INT 0
49666: PUSH
49667: LD_INT 0
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 0
49676: PUSH
49677: LD_INT 1
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 1
49687: PUSH
49688: LD_INT 0
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 1
49697: PUSH
49698: LD_INT 1
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 0
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 1
49717: NEG
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 1
49728: NEG
49729: PUSH
49730: LD_INT 1
49732: NEG
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: LD_INT 2
49744: NEG
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: LD_INT 2
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 1
49763: PUSH
49764: LD_INT 1
49766: NEG
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: LD_INT 2
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: LD_INT 2
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: LD_INT 1
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 1
49805: PUSH
49806: LD_INT 3
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: LD_INT 3
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 1
49825: NEG
49826: PUSH
49827: LD_INT 2
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49852: LD_ADDR_VAR 0 12
49856: PUSH
49857: LD_INT 0
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 0
49869: PUSH
49870: LD_INT 1
49872: NEG
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 1
49880: PUSH
49881: LD_INT 0
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 1
49890: PUSH
49891: LD_INT 1
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 0
49900: PUSH
49901: LD_INT 1
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 1
49910: NEG
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: LD_INT 1
49925: NEG
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 1
49933: PUSH
49934: LD_INT 1
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 2
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 2
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: LD_INT 1
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 2
49975: NEG
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 2
49986: NEG
49987: PUSH
49988: LD_INT 1
49990: NEG
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 2
49998: NEG
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 3
50009: NEG
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 3
50020: NEG
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50048: LD_ADDR_VAR 0 13
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: LD_INT 1
50068: NEG
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 1
50106: NEG
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: LD_INT 1
50121: NEG
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 1
50129: NEG
50130: PUSH
50131: LD_INT 2
50133: NEG
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 2
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 2
50151: PUSH
50152: LD_INT 2
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 1
50161: PUSH
50162: LD_INT 2
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 2
50171: NEG
50172: PUSH
50173: LD_INT 1
50175: NEG
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 2
50183: NEG
50184: PUSH
50185: LD_INT 2
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 2
50195: NEG
50196: PUSH
50197: LD_INT 3
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 3
50207: NEG
50208: PUSH
50209: LD_INT 2
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 3
50219: NEG
50220: PUSH
50221: LD_INT 3
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50247: LD_ADDR_VAR 0 14
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: LD_INT 1
50267: NEG
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: LD_INT 1
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: LD_INT 1
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: LD_INT 2
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: LD_INT 2
50343: NEG
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 1
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: LD_INT 2
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: LD_INT 2
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: LD_INT 3
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: LD_INT 3
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 1
50416: PUSH
50417: LD_INT 2
50419: NEG
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50443: LD_ADDR_VAR 0 15
50447: PUSH
50448: LD_INT 0
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 0
50460: PUSH
50461: LD_INT 1
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 1
50471: PUSH
50472: LD_INT 0
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 1
50481: PUSH
50482: LD_INT 1
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 1
50501: NEG
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 1
50512: NEG
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 1
50524: PUSH
50525: LD_INT 1
50527: NEG
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 2
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 2
50545: PUSH
50546: LD_INT 1
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 1
50555: NEG
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 2
50566: NEG
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 2
50577: NEG
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 2
50589: PUSH
50590: LD_INT 1
50592: NEG
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 3
50600: PUSH
50601: LD_INT 0
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 3
50610: PUSH
50611: LD_INT 1
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50636: LD_ADDR_VAR 0 16
50640: PUSH
50641: LD_INT 0
50643: PUSH
50644: LD_INT 0
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 0
50653: PUSH
50654: LD_INT 1
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: LD_INT 0
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 1
50674: PUSH
50675: LD_INT 1
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: LD_INT 1
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 1
50694: NEG
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: NEG
50706: PUSH
50707: LD_INT 1
50709: NEG
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 1
50717: NEG
50718: PUSH
50719: LD_INT 2
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 2
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 2
50739: PUSH
50740: LD_INT 2
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: PUSH
50750: LD_INT 2
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 2
50759: NEG
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 2
50771: NEG
50772: PUSH
50773: LD_INT 2
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 3
50783: PUSH
50784: LD_INT 2
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 3
50793: PUSH
50794: LD_INT 3
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 2
50803: PUSH
50804: LD_INT 3
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50829: LD_ADDR_VAR 0 17
50833: PUSH
50834: LD_INT 0
50836: PUSH
50837: LD_INT 0
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: LD_INT 1
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: LD_INT 1
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 1
50887: NEG
50888: PUSH
50889: LD_INT 0
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: LD_INT 1
50902: NEG
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: LD_INT 2
50914: NEG
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: LD_INT 2
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: LD_INT 1
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 2
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 2
50954: PUSH
50955: LD_INT 1
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 2
50964: PUSH
50965: LD_INT 2
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: PUSH
50975: LD_INT 2
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: LD_INT 2
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 1
50994: NEG
50995: PUSH
50996: LD_INT 1
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 2
51005: NEG
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 2
51016: NEG
51017: PUSH
51018: LD_INT 1
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 2
51028: NEG
51029: PUSH
51030: LD_INT 2
51032: NEG
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51059: LD_ADDR_VAR 0 18
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: LD_INT 1
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: LD_INT 1
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 1
51117: NEG
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: NEG
51129: PUSH
51130: LD_INT 1
51132: NEG
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: LD_INT 2
51144: NEG
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 0
51152: PUSH
51153: LD_INT 2
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 1
51163: PUSH
51164: LD_INT 1
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 2
51174: PUSH
51175: LD_INT 0
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 2
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 2
51194: PUSH
51195: LD_INT 2
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 1
51204: PUSH
51205: LD_INT 2
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: LD_INT 2
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 2
51235: NEG
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 2
51246: NEG
51247: PUSH
51248: LD_INT 1
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 2
51258: NEG
51259: PUSH
51260: LD_INT 2
51262: NEG
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51289: LD_ADDR_VAR 0 19
51293: PUSH
51294: LD_INT 0
51296: PUSH
51297: LD_INT 0
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: LD_INT 1
51309: NEG
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 1
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 1
51347: NEG
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: NEG
51359: PUSH
51360: LD_INT 1
51362: NEG
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: LD_INT 2
51374: NEG
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: LD_INT 2
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 1
51393: PUSH
51394: LD_INT 1
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 2
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 2
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 2
51424: PUSH
51425: LD_INT 2
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: LD_INT 2
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: LD_INT 2
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 1
51454: NEG
51455: PUSH
51456: LD_INT 1
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 2
51465: NEG
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 2
51476: NEG
51477: PUSH
51478: LD_INT 1
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 2
51488: NEG
51489: PUSH
51490: LD_INT 2
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51519: LD_ADDR_VAR 0 20
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 1
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 1
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: LD_INT 1
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: NEG
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: NEG
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 1
51600: NEG
51601: PUSH
51602: LD_INT 2
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: LD_INT 2
51615: NEG
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 1
51623: PUSH
51624: LD_INT 1
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 2
51634: PUSH
51635: LD_INT 0
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 2
51644: PUSH
51645: LD_INT 1
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 2
51654: PUSH
51655: LD_INT 2
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 1
51664: PUSH
51665: LD_INT 2
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: LD_INT 2
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 1
51684: NEG
51685: PUSH
51686: LD_INT 1
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 2
51695: NEG
51696: PUSH
51697: LD_INT 0
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 2
51706: NEG
51707: PUSH
51708: LD_INT 1
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 2
51718: NEG
51719: PUSH
51720: LD_INT 2
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51749: LD_ADDR_VAR 0 21
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: LD_INT 0
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: LD_INT 1
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 1
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 1
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: LD_INT 1
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 1
51807: NEG
51808: PUSH
51809: LD_INT 0
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: NEG
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: LD_INT 2
51834: NEG
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: LD_INT 2
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: LD_INT 1
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 2
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 2
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 2
51884: PUSH
51885: LD_INT 2
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 1
51894: PUSH
51895: LD_INT 2
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 0
51904: PUSH
51905: LD_INT 2
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 1
51914: NEG
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 2
51925: NEG
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 2
51936: NEG
51937: PUSH
51938: LD_INT 1
51940: NEG
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 2
51948: NEG
51949: PUSH
51950: LD_INT 2
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51979: LD_ADDR_VAR 0 22
51983: PUSH
51984: LD_INT 0
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 0
51996: PUSH
51997: LD_INT 1
51999: NEG
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 1
52017: PUSH
52018: LD_INT 1
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: LD_INT 1
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 1
52037: NEG
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 1
52048: NEG
52049: PUSH
52050: LD_INT 1
52052: NEG
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: LD_INT 2
52064: NEG
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 0
52072: PUSH
52073: LD_INT 2
52075: NEG
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 1
52083: PUSH
52084: LD_INT 1
52086: NEG
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 2
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 2
52104: PUSH
52105: LD_INT 1
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 2
52114: PUSH
52115: LD_INT 2
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 1
52124: PUSH
52125: LD_INT 2
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 0
52134: PUSH
52135: LD_INT 2
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 1
52144: NEG
52145: PUSH
52146: LD_INT 1
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 2
52155: NEG
52156: PUSH
52157: LD_INT 0
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 2
52166: NEG
52167: PUSH
52168: LD_INT 1
52170: NEG
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 2
52178: NEG
52179: PUSH
52180: LD_INT 2
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52209: LD_ADDR_VAR 0 23
52213: PUSH
52214: LD_INT 0
52216: PUSH
52217: LD_INT 0
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: LD_INT 1
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 1
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 1
52267: NEG
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 1
52278: NEG
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: LD_INT 2
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: LD_INT 2
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 1
52313: PUSH
52314: LD_INT 1
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 2
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 2
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 2
52344: PUSH
52345: LD_INT 2
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 1
52354: PUSH
52355: LD_INT 2
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: LD_INT 2
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 2
52385: NEG
52386: PUSH
52387: LD_INT 0
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 2
52396: NEG
52397: PUSH
52398: LD_INT 1
52400: NEG
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 2
52408: NEG
52409: PUSH
52410: LD_INT 2
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 2
52420: NEG
52421: PUSH
52422: LD_INT 3
52424: NEG
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 1
52432: NEG
52433: PUSH
52434: LD_INT 3
52436: NEG
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: LD_INT 2
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 2
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52489: LD_ADDR_VAR 0 24
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: LD_INT 1
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: LD_INT 1
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: LD_INT 1
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 1
52570: NEG
52571: PUSH
52572: LD_INT 2
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: LD_INT 2
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 1
52593: PUSH
52594: LD_INT 1
52596: NEG
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 2
52604: PUSH
52605: LD_INT 0
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: LD_INT 1
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 2
52624: PUSH
52625: LD_INT 2
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 1
52634: PUSH
52635: LD_INT 2
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: LD_INT 2
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 1
52654: NEG
52655: PUSH
52656: LD_INT 1
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 2
52665: NEG
52666: PUSH
52667: LD_INT 0
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 2
52676: NEG
52677: PUSH
52678: LD_INT 1
52680: NEG
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 2
52688: NEG
52689: PUSH
52690: LD_INT 2
52692: NEG
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 1
52700: PUSH
52701: LD_INT 2
52703: NEG
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 2
52711: PUSH
52712: LD_INT 1
52714: NEG
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 3
52722: PUSH
52723: LD_INT 1
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 3
52732: PUSH
52733: LD_INT 2
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52765: LD_ADDR_VAR 0 25
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 0
52782: PUSH
52783: LD_INT 1
52785: NEG
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 1
52803: PUSH
52804: LD_INT 1
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 0
52813: PUSH
52814: LD_INT 1
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 1
52823: NEG
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 1
52834: NEG
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 1
52846: NEG
52847: PUSH
52848: LD_INT 2
52850: NEG
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: LD_INT 2
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 2
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 2
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 2
52900: PUSH
52901: LD_INT 2
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 1
52910: PUSH
52911: LD_INT 2
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: LD_INT 2
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 1
52930: NEG
52931: PUSH
52932: LD_INT 1
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 2
52941: NEG
52942: PUSH
52943: LD_INT 0
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 2
52952: NEG
52953: PUSH
52954: LD_INT 1
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 2
52964: NEG
52965: PUSH
52966: LD_INT 2
52968: NEG
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 3
52976: PUSH
52977: LD_INT 1
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 3
52986: PUSH
52987: LD_INT 2
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 2
52996: PUSH
52997: LD_INT 3
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: LD_INT 3
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53039: LD_ADDR_VAR 0 26
53043: PUSH
53044: LD_INT 0
53046: PUSH
53047: LD_INT 0
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 0
53056: PUSH
53057: LD_INT 1
53059: NEG
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 1
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 1
53077: PUSH
53078: LD_INT 1
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 1
53097: NEG
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 1
53108: NEG
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: LD_INT 2
53124: NEG
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 0
53132: PUSH
53133: LD_INT 2
53135: NEG
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 1
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 2
53154: PUSH
53155: LD_INT 0
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 2
53164: PUSH
53165: LD_INT 1
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 2
53174: PUSH
53175: LD_INT 2
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 1
53184: PUSH
53185: LD_INT 2
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: LD_INT 2
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 1
53204: NEG
53205: PUSH
53206: LD_INT 1
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 2
53215: NEG
53216: PUSH
53217: LD_INT 0
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 2
53226: NEG
53227: PUSH
53228: LD_INT 1
53230: NEG
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 2
53238: NEG
53239: PUSH
53240: LD_INT 2
53242: NEG
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 2
53250: PUSH
53251: LD_INT 3
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: LD_INT 3
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 1
53270: NEG
53271: PUSH
53272: LD_INT 2
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 2
53281: NEG
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53315: LD_ADDR_VAR 0 27
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 1
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: LD_INT 1
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 1
53373: NEG
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 1
53384: NEG
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: PUSH
53398: LD_INT 2
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 0
53408: PUSH
53409: LD_INT 2
53411: NEG
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 1
53419: PUSH
53420: LD_INT 1
53422: NEG
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 2
53430: PUSH
53431: LD_INT 0
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 2
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 2
53450: PUSH
53451: LD_INT 2
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: PUSH
53461: LD_INT 2
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: LD_INT 2
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: LD_INT 1
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 2
53491: NEG
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 2
53502: NEG
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 2
53514: NEG
53515: PUSH
53516: LD_INT 2
53518: NEG
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 1
53526: NEG
53527: PUSH
53528: LD_INT 2
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 2
53537: NEG
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 3
53548: NEG
53549: PUSH
53550: LD_INT 1
53552: NEG
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 3
53560: NEG
53561: PUSH
53562: LD_INT 2
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53595: LD_ADDR_VAR 0 28
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: LD_INT 0
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: LD_INT 1
53615: NEG
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 1
53623: PUSH
53624: LD_INT 0
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 1
53633: PUSH
53634: LD_INT 1
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 1
53653: NEG
53654: PUSH
53655: LD_INT 0
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: LD_INT 1
53668: NEG
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: LD_INT 2
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: LD_INT 2
53691: NEG
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 1
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 2
53710: PUSH
53711: LD_INT 0
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 2
53720: PUSH
53721: LD_INT 1
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 2
53730: PUSH
53731: LD_INT 2
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 1
53740: PUSH
53741: LD_INT 2
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: LD_INT 2
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 1
53760: NEG
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 2
53771: NEG
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 2
53782: NEG
53783: PUSH
53784: LD_INT 1
53786: NEG
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 2
53794: NEG
53795: PUSH
53796: LD_INT 2
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 2
53806: NEG
53807: PUSH
53808: LD_INT 3
53810: NEG
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: LD_INT 3
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 3
53830: NEG
53831: PUSH
53832: LD_INT 1
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 3
53842: NEG
53843: PUSH
53844: LD_INT 2
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53877: LD_ADDR_VAR 0 29
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: LD_INT 1
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: PUSH
53916: LD_INT 1
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 0
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 1
53935: NEG
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: NEG
53947: PUSH
53948: LD_INT 1
53950: NEG
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: LD_INT 2
53962: NEG
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: LD_INT 2
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: PUSH
53982: LD_INT 1
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 2
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 2
54002: PUSH
54003: LD_INT 1
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: LD_INT 2
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: LD_INT 2
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: LD_INT 1
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 2
54043: NEG
54044: PUSH
54045: LD_INT 1
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 2
54055: NEG
54056: PUSH
54057: LD_INT 2
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 2
54067: NEG
54068: PUSH
54069: LD_INT 3
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 2
54079: PUSH
54080: LD_INT 1
54082: NEG
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 3
54090: PUSH
54091: LD_INT 1
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 1
54100: PUSH
54101: LD_INT 3
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 1
54110: NEG
54111: PUSH
54112: LD_INT 2
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 3
54121: NEG
54122: PUSH
54123: LD_INT 2
54125: NEG
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54156: LD_ADDR_VAR 0 30
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 0
54173: PUSH
54174: LD_INT 1
54176: NEG
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 1
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: LD_INT 1
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: LD_INT 1
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 1
54214: NEG
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 1
54225: NEG
54226: PUSH
54227: LD_INT 1
54229: NEG
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 1
54237: NEG
54238: PUSH
54239: LD_INT 2
54241: NEG
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: LD_INT 2
54252: NEG
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 1
54260: PUSH
54261: LD_INT 1
54263: NEG
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 2
54271: PUSH
54272: LD_INT 0
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 2
54281: PUSH
54282: LD_INT 1
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 2
54291: PUSH
54292: LD_INT 2
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: LD_INT 2
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 1
54311: NEG
54312: PUSH
54313: LD_INT 1
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 2
54322: NEG
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 2
54333: NEG
54334: PUSH
54335: LD_INT 1
54337: NEG
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 1
54345: NEG
54346: PUSH
54347: LD_INT 3
54349: NEG
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 1
54357: PUSH
54358: LD_INT 2
54360: NEG
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 3
54368: PUSH
54369: LD_INT 2
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 2
54378: PUSH
54379: LD_INT 3
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 2
54388: NEG
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 3
54399: NEG
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54434: LD_ADDR_VAR 0 31
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: LD_INT 0
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 0
54451: PUSH
54452: LD_INT 1
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 1
54472: PUSH
54473: LD_INT 1
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 1
54492: NEG
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 1
54503: NEG
54504: PUSH
54505: LD_INT 1
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: NEG
54516: PUSH
54517: LD_INT 2
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 1
54527: PUSH
54528: LD_INT 1
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 2
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 2
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 2
54558: PUSH
54559: LD_INT 2
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 1
54568: PUSH
54569: LD_INT 2
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: LD_INT 2
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: NEG
54589: PUSH
54590: LD_INT 1
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 2
54599: NEG
54600: PUSH
54601: LD_INT 1
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 2
54611: NEG
54612: PUSH
54613: LD_INT 2
54615: NEG
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 2
54623: NEG
54624: PUSH
54625: LD_INT 3
54627: NEG
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 2
54635: PUSH
54636: LD_INT 1
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 3
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: LD_INT 3
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: LD_INT 2
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 3
54677: NEG
54678: PUSH
54679: LD_INT 2
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54712: LD_ADDR_VAR 0 32
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: LD_INT 1
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 1
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 1
54750: PUSH
54751: LD_INT 1
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 1
54770: NEG
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 1
54781: NEG
54782: PUSH
54783: LD_INT 1
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 1
54793: NEG
54794: PUSH
54795: LD_INT 2
54797: NEG
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 0
54805: PUSH
54806: LD_INT 2
54808: NEG
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 1
54816: PUSH
54817: LD_INT 1
54819: NEG
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 2
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 2
54837: PUSH
54838: LD_INT 2
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: LD_INT 2
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 0
54857: PUSH
54858: LD_INT 2
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: LD_INT 1
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 2
54878: NEG
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 2
54889: NEG
54890: PUSH
54891: LD_INT 1
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 1
54901: NEG
54902: PUSH
54903: LD_INT 3
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: LD_INT 2
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 3
54924: PUSH
54925: LD_INT 2
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 2
54934: PUSH
54935: LD_INT 3
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 2
54944: NEG
54945: PUSH
54946: LD_INT 1
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 3
54955: NEG
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54990: LD_ADDR_VAR 0 33
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: LD_INT 1
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 0
55038: PUSH
55039: LD_INT 1
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 1
55048: NEG
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 1
55059: NEG
55060: PUSH
55061: LD_INT 1
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: LD_INT 2
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 1
55083: PUSH
55084: LD_INT 1
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 2
55094: PUSH
55095: LD_INT 0
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 2
55104: PUSH
55105: LD_INT 1
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 1
55114: PUSH
55115: LD_INT 2
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 0
55124: PUSH
55125: LD_INT 2
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 1
55134: NEG
55135: PUSH
55136: LD_INT 1
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 2
55145: NEG
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 2
55156: NEG
55157: PUSH
55158: LD_INT 1
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 2
55168: NEG
55169: PUSH
55170: LD_INT 2
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 2
55180: NEG
55181: PUSH
55182: LD_INT 3
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 2
55192: PUSH
55193: LD_INT 1
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 3
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 1
55213: PUSH
55214: LD_INT 3
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: LD_INT 2
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 3
55234: NEG
55235: PUSH
55236: LD_INT 2
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55269: LD_ADDR_VAR 0 34
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 0
55286: PUSH
55287: LD_INT 1
55289: NEG
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 1
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: LD_INT 1
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 0
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 1
55338: NEG
55339: PUSH
55340: LD_INT 1
55342: NEG
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 1
55350: NEG
55351: PUSH
55352: LD_INT 2
55354: NEG
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: LD_INT 2
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 1
55373: PUSH
55374: LD_INT 1
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 2
55384: PUSH
55385: LD_INT 1
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 2
55394: PUSH
55395: LD_INT 2
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: LD_INT 2
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 1
55414: NEG
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 2
55425: NEG
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 2
55436: NEG
55437: PUSH
55438: LD_INT 1
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 2
55448: NEG
55449: PUSH
55450: LD_INT 2
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 1
55460: NEG
55461: PUSH
55462: LD_INT 3
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 1
55472: PUSH
55473: LD_INT 2
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 3
55483: PUSH
55484: LD_INT 2
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 2
55493: PUSH
55494: LD_INT 3
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 2
55503: NEG
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 3
55514: NEG
55515: PUSH
55516: LD_INT 1
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55549: LD_ADDR_VAR 0 35
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: LD_INT 1
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 1
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: LD_INT 1
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 0
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: NEG
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 2
55630: PUSH
55631: LD_INT 1
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 2
55640: NEG
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55661: LD_ADDR_VAR 0 36
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: LD_INT 1
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 1
55699: PUSH
55700: LD_INT 1
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 0
55709: PUSH
55710: LD_INT 1
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 1
55719: NEG
55720: PUSH
55721: LD_INT 0
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: LD_INT 1
55734: NEG
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 1
55742: NEG
55743: PUSH
55744: LD_INT 2
55746: NEG
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: LD_INT 2
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55773: LD_ADDR_VAR 0 37
55777: PUSH
55778: LD_INT 0
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 0
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 1
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 0
55821: PUSH
55822: LD_INT 1
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 1
55831: NEG
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 1
55842: NEG
55843: PUSH
55844: LD_INT 1
55846: NEG
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 1
55854: PUSH
55855: LD_INT 1
55857: NEG
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 1
55865: NEG
55866: PUSH
55867: LD_INT 1
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55885: LD_ADDR_VAR 0 38
55889: PUSH
55890: LD_INT 0
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 1
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 1
55923: PUSH
55924: LD_INT 1
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 0
55933: PUSH
55934: LD_INT 1
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 1
55943: NEG
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 1
55954: NEG
55955: PUSH
55956: LD_INT 1
55958: NEG
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 2
55966: PUSH
55967: LD_INT 1
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 2
55976: NEG
55977: PUSH
55978: LD_INT 1
55980: NEG
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55997: LD_ADDR_VAR 0 39
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 1
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: LD_INT 1
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 1
56055: NEG
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 1
56066: NEG
56067: PUSH
56068: LD_INT 1
56070: NEG
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 1
56078: NEG
56079: PUSH
56080: LD_INT 2
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 1
56090: PUSH
56091: LD_INT 2
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56109: LD_ADDR_VAR 0 40
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: LD_INT 1
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 1
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: LD_INT 1
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 1
56167: NEG
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 1
56178: NEG
56179: PUSH
56180: LD_INT 1
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 1
56190: PUSH
56191: LD_INT 1
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: LD_INT 1
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56221: LD_ADDR_VAR 0 41
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: LD_INT 0
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: LD_INT 1
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: LD_INT 0
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: LD_INT 1
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 0
56269: PUSH
56270: LD_INT 1
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 1
56279: NEG
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 1
56290: NEG
56291: PUSH
56292: LD_INT 1
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 1
56302: NEG
56303: PUSH
56304: LD_INT 2
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: LD_INT 1
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 2
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 2
56335: PUSH
56336: LD_INT 1
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 2
56345: PUSH
56346: LD_INT 2
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: LD_INT 2
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 1
56365: NEG
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 2
56376: NEG
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 2
56387: NEG
56388: PUSH
56389: LD_INT 1
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 2
56399: NEG
56400: PUSH
56401: LD_INT 2
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 2
56411: NEG
56412: PUSH
56413: LD_INT 3
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 2
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 3
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 3
56444: PUSH
56445: LD_INT 1
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 3
56454: PUSH
56455: LD_INT 2
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 3
56464: PUSH
56465: LD_INT 3
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 2
56474: PUSH
56475: LD_INT 3
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 2
56484: NEG
56485: PUSH
56486: LD_INT 1
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 3
56495: NEG
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 3
56506: NEG
56507: PUSH
56508: LD_INT 1
56510: NEG
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 3
56518: NEG
56519: PUSH
56520: LD_INT 2
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 3
56530: NEG
56531: PUSH
56532: LD_INT 3
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56571: LD_ADDR_VAR 0 42
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: LD_INT 0
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 1
56599: PUSH
56600: LD_INT 0
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 1
56609: PUSH
56610: LD_INT 1
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: LD_INT 1
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 1
56629: NEG
56630: PUSH
56631: LD_INT 0
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 1
56640: NEG
56641: PUSH
56642: LD_INT 1
56644: NEG
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 1
56652: NEG
56653: PUSH
56654: LD_INT 2
56656: NEG
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 0
56664: PUSH
56665: LD_INT 2
56667: NEG
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 1
56675: PUSH
56676: LD_INT 1
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 2
56686: PUSH
56687: LD_INT 1
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 2
56696: PUSH
56697: LD_INT 2
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: LD_INT 2
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: LD_INT 2
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 1
56726: NEG
56727: PUSH
56728: LD_INT 1
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 2
56737: NEG
56738: PUSH
56739: LD_INT 1
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 2
56749: NEG
56750: PUSH
56751: LD_INT 2
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 2
56761: NEG
56762: PUSH
56763: LD_INT 3
56765: NEG
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 1
56773: NEG
56774: PUSH
56775: LD_INT 3
56777: NEG
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: LD_INT 3
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: LD_INT 2
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 3
56807: PUSH
56808: LD_INT 2
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 3
56817: PUSH
56818: LD_INT 3
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 2
56827: PUSH
56828: LD_INT 3
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: PUSH
56838: LD_INT 3
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 0
56847: PUSH
56848: LD_INT 3
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 1
56857: NEG
56858: PUSH
56859: LD_INT 2
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 3
56868: NEG
56869: PUSH
56870: LD_INT 2
56872: NEG
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 3
56880: NEG
56881: PUSH
56882: LD_INT 3
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56921: LD_ADDR_VAR 0 43
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: LD_INT 1
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: LD_INT 0
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: LD_INT 1
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: LD_INT 1
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 1
56979: NEG
56980: PUSH
56981: LD_INT 0
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 1
56990: NEG
56991: PUSH
56992: LD_INT 1
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: LD_INT 2
57006: NEG
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 0
57014: PUSH
57015: LD_INT 2
57017: NEG
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 1
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 2
57036: PUSH
57037: LD_INT 0
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 2
57046: PUSH
57047: LD_INT 1
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: LD_INT 2
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: LD_INT 2
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: NEG
57077: PUSH
57078: LD_INT 1
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 2
57087: NEG
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 2
57098: NEG
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 1
57110: NEG
57111: PUSH
57112: LD_INT 3
57114: NEG
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: LD_INT 3
57125: NEG
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: LD_INT 2
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 2
57144: PUSH
57145: LD_INT 1
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 3
57155: PUSH
57156: LD_INT 0
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 3
57165: PUSH
57166: LD_INT 1
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 1
57175: PUSH
57176: LD_INT 3
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 0
57185: PUSH
57186: LD_INT 3
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 1
57195: NEG
57196: PUSH
57197: LD_INT 2
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 2
57206: NEG
57207: PUSH
57208: LD_INT 1
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 3
57217: NEG
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 3
57228: NEG
57229: PUSH
57230: LD_INT 1
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57269: LD_ADDR_VAR 0 44
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: LD_INT 0
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 0
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: LD_INT 0
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: LD_INT 1
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: LD_INT 1
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 1
57327: NEG
57328: PUSH
57329: LD_INT 0
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 1
57338: NEG
57339: PUSH
57340: LD_INT 1
57342: NEG
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: LD_INT 2
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: LD_INT 1
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 2
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 2
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 2
57393: PUSH
57394: LD_INT 2
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 1
57403: PUSH
57404: LD_INT 2
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 1
57413: NEG
57414: PUSH
57415: LD_INT 1
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 2
57424: NEG
57425: PUSH
57426: LD_INT 0
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 2
57435: NEG
57436: PUSH
57437: LD_INT 1
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 2
57447: NEG
57448: PUSH
57449: LD_INT 2
57451: NEG
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 2
57459: NEG
57460: PUSH
57461: LD_INT 3
57463: NEG
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 2
57471: PUSH
57472: LD_INT 1
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 3
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 3
57492: PUSH
57493: LD_INT 1
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 3
57502: PUSH
57503: LD_INT 2
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 3
57512: PUSH
57513: LD_INT 3
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 2
57522: PUSH
57523: LD_INT 3
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 2
57532: NEG
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 3
57543: NEG
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 3
57554: NEG
57555: PUSH
57556: LD_INT 1
57558: NEG
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 3
57566: NEG
57567: PUSH
57568: LD_INT 2
57570: NEG
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 3
57578: NEG
57579: PUSH
57580: LD_INT 3
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57619: LD_ADDR_VAR 0 45
57623: PUSH
57624: LD_INT 0
57626: PUSH
57627: LD_INT 0
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 0
57636: PUSH
57637: LD_INT 1
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 1
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 1
57657: PUSH
57658: LD_INT 1
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 0
57667: PUSH
57668: LD_INT 1
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 1
57677: NEG
57678: PUSH
57679: LD_INT 0
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 1
57688: NEG
57689: PUSH
57690: LD_INT 1
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 1
57700: NEG
57701: PUSH
57702: LD_INT 2
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: LD_INT 2
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 1
57723: PUSH
57724: LD_INT 1
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 2
57734: PUSH
57735: LD_INT 1
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 2
57744: PUSH
57745: LD_INT 2
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 1
57754: PUSH
57755: LD_INT 2
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 0
57764: PUSH
57765: LD_INT 2
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 1
57774: NEG
57775: PUSH
57776: LD_INT 1
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 2
57785: NEG
57786: PUSH
57787: LD_INT 1
57789: NEG
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 2
57797: NEG
57798: PUSH
57799: LD_INT 2
57801: NEG
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 2
57809: NEG
57810: PUSH
57811: LD_INT 3
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: LD_INT 3
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 0
57833: PUSH
57834: LD_INT 3
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 1
57844: PUSH
57845: LD_INT 2
57847: NEG
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 3
57855: PUSH
57856: LD_INT 2
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 3
57865: PUSH
57866: LD_INT 3
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 2
57875: PUSH
57876: LD_INT 3
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: LD_INT 3
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: LD_INT 3
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 1
57905: NEG
57906: PUSH
57907: LD_INT 2
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 3
57916: NEG
57917: PUSH
57918: LD_INT 2
57920: NEG
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 3
57928: NEG
57929: PUSH
57930: LD_INT 3
57932: NEG
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57969: LD_ADDR_VAR 0 46
57973: PUSH
57974: LD_INT 0
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 0
57986: PUSH
57987: LD_INT 1
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 1
57997: PUSH
57998: LD_INT 0
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 1
58007: PUSH
58008: LD_INT 1
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 0
58017: PUSH
58018: LD_INT 1
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: NEG
58028: PUSH
58029: LD_INT 0
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 1
58038: NEG
58039: PUSH
58040: LD_INT 1
58042: NEG
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 1
58050: NEG
58051: PUSH
58052: LD_INT 2
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 0
58062: PUSH
58063: LD_INT 2
58065: NEG
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 1
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 2
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 2
58094: PUSH
58095: LD_INT 1
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 1
58104: PUSH
58105: LD_INT 2
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 0
58114: PUSH
58115: LD_INT 2
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 1
58124: NEG
58125: PUSH
58126: LD_INT 1
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 2
58135: NEG
58136: PUSH
58137: LD_INT 0
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 2
58146: NEG
58147: PUSH
58148: LD_INT 1
58150: NEG
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 1
58158: NEG
58159: PUSH
58160: LD_INT 3
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: LD_INT 3
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: PUSH
58182: LD_INT 2
58184: NEG
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 2
58192: PUSH
58193: LD_INT 1
58195: NEG
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 3
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 3
58213: PUSH
58214: LD_INT 1
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 1
58223: PUSH
58224: LD_INT 3
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: LD_INT 3
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 1
58243: NEG
58244: PUSH
58245: LD_INT 2
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 2
58254: NEG
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 3
58265: NEG
58266: PUSH
58267: LD_INT 0
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 3
58276: NEG
58277: PUSH
58278: LD_INT 1
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58317: LD_ADDR_VAR 0 47
58321: PUSH
58322: LD_INT 0
58324: PUSH
58325: LD_INT 0
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 0
58334: PUSH
58335: LD_INT 1
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 1
58355: PUSH
58356: LD_INT 1
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 0
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 1
58375: NEG
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 1
58386: NEG
58387: PUSH
58388: LD_INT 1
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 1
58398: NEG
58399: PUSH
58400: LD_INT 2
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 0
58410: PUSH
58411: LD_INT 2
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: PUSH
58422: LD_INT 1
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 2
58432: NEG
58433: PUSH
58434: LD_INT 1
58436: NEG
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 2
58444: NEG
58445: PUSH
58446: LD_INT 2
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58468: LD_ADDR_VAR 0 48
58472: PUSH
58473: LD_INT 0
58475: PUSH
58476: LD_INT 0
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: LD_INT 1
58488: NEG
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 1
58496: PUSH
58497: LD_INT 0
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: LD_INT 1
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 0
58516: PUSH
58517: LD_INT 1
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 1
58526: NEG
58527: PUSH
58528: LD_INT 0
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 1
58537: NEG
58538: PUSH
58539: LD_INT 1
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: LD_INT 2
58553: NEG
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 0
58561: PUSH
58562: LD_INT 2
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 1
58572: PUSH
58573: LD_INT 1
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 2
58583: PUSH
58584: LD_INT 0
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 2
58593: PUSH
58594: LD_INT 1
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58615: LD_ADDR_VAR 0 49
58619: PUSH
58620: LD_INT 0
58622: PUSH
58623: LD_INT 0
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 0
58632: PUSH
58633: LD_INT 1
58635: NEG
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 1
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 1
58653: PUSH
58654: LD_INT 1
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 0
58663: PUSH
58664: LD_INT 1
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 1
58673: NEG
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 1
58684: NEG
58685: PUSH
58686: LD_INT 1
58688: NEG
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 1
58696: PUSH
58697: LD_INT 1
58699: NEG
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 2
58707: PUSH
58708: LD_INT 0
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 2
58717: PUSH
58718: LD_INT 1
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 2
58727: PUSH
58728: LD_INT 2
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 1
58737: PUSH
58738: LD_INT 2
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58759: LD_ADDR_VAR 0 50
58763: PUSH
58764: LD_INT 0
58766: PUSH
58767: LD_INT 0
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 0
58776: PUSH
58777: LD_INT 1
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 1
58787: PUSH
58788: LD_INT 0
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 1
58797: PUSH
58798: LD_INT 1
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 0
58807: PUSH
58808: LD_INT 1
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 1
58817: NEG
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 1
58828: NEG
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 2
58840: PUSH
58841: LD_INT 1
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 2
58850: PUSH
58851: LD_INT 2
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 1
58860: PUSH
58861: LD_INT 2
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 0
58870: PUSH
58871: LD_INT 2
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: NEG
58881: PUSH
58882: LD_INT 1
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58903: LD_ADDR_VAR 0 51
58907: PUSH
58908: LD_INT 0
58910: PUSH
58911: LD_INT 0
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 0
58920: PUSH
58921: LD_INT 1
58923: NEG
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 1
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 1
58941: PUSH
58942: LD_INT 1
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 0
58951: PUSH
58952: LD_INT 1
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 1
58961: NEG
58962: PUSH
58963: LD_INT 0
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: LD_INT 1
58976: NEG
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 1
58984: PUSH
58985: LD_INT 2
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 0
58994: PUSH
58995: LD_INT 2
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 1
59004: NEG
59005: PUSH
59006: LD_INT 1
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 2
59015: NEG
59016: PUSH
59017: LD_INT 0
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 2
59026: NEG
59027: PUSH
59028: LD_INT 1
59030: NEG
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59050: LD_ADDR_VAR 0 52
59054: PUSH
59055: LD_INT 0
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 0
59067: PUSH
59068: LD_INT 1
59070: NEG
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 1
59078: PUSH
59079: LD_INT 0
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: LD_INT 1
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 0
59098: PUSH
59099: LD_INT 1
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 1
59108: NEG
59109: PUSH
59110: LD_INT 0
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 1
59119: NEG
59120: PUSH
59121: LD_INT 1
59123: NEG
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 1
59131: NEG
59132: PUSH
59133: LD_INT 2
59135: NEG
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 1
59143: NEG
59144: PUSH
59145: LD_INT 1
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 2
59154: NEG
59155: PUSH
59156: LD_INT 0
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 2
59165: NEG
59166: PUSH
59167: LD_INT 1
59169: NEG
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 2
59177: NEG
59178: PUSH
59179: LD_INT 2
59181: NEG
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59201: LD_ADDR_VAR 0 53
59205: PUSH
59206: LD_INT 0
59208: PUSH
59209: LD_INT 0
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 0
59218: PUSH
59219: LD_INT 1
59221: NEG
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 1
59229: PUSH
59230: LD_INT 0
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 1
59239: PUSH
59240: LD_INT 1
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 0
59249: PUSH
59250: LD_INT 1
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 1
59259: NEG
59260: PUSH
59261: LD_INT 0
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 1
59270: NEG
59271: PUSH
59272: LD_INT 1
59274: NEG
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 1
59282: NEG
59283: PUSH
59284: LD_INT 2
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 0
59294: PUSH
59295: LD_INT 2
59297: NEG
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 1
59305: PUSH
59306: LD_INT 1
59308: NEG
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 2
59316: PUSH
59317: LD_INT 0
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 2
59326: PUSH
59327: LD_INT 1
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 2
59336: PUSH
59337: LD_INT 2
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 1
59346: PUSH
59347: LD_INT 2
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 0
59356: PUSH
59357: LD_INT 2
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 1
59366: NEG
59367: PUSH
59368: LD_INT 1
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 2
59377: NEG
59378: PUSH
59379: LD_INT 0
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 2
59388: NEG
59389: PUSH
59390: LD_INT 1
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 2
59400: NEG
59401: PUSH
59402: LD_INT 2
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59431: LD_ADDR_VAR 0 54
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: LD_INT 0
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: LD_INT 1
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 1
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 1
59469: PUSH
59470: LD_INT 1
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: LD_INT 1
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 1
59489: NEG
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 1
59500: NEG
59501: PUSH
59502: LD_INT 1
59504: NEG
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 1
59512: NEG
59513: PUSH
59514: LD_INT 2
59516: NEG
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 0
59524: PUSH
59525: LD_INT 2
59527: NEG
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 1
59535: PUSH
59536: LD_INT 1
59538: NEG
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 2
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 2
59556: PUSH
59557: LD_INT 1
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 2
59566: PUSH
59567: LD_INT 2
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 1
59576: PUSH
59577: LD_INT 2
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 0
59586: PUSH
59587: LD_INT 2
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 1
59596: NEG
59597: PUSH
59598: LD_INT 1
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 2
59607: NEG
59608: PUSH
59609: LD_INT 0
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 2
59618: NEG
59619: PUSH
59620: LD_INT 1
59622: NEG
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 2
59630: NEG
59631: PUSH
59632: LD_INT 2
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59661: LD_ADDR_VAR 0 55
59665: PUSH
59666: LD_INT 0
59668: PUSH
59669: LD_INT 0
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: LD_INT 1
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 1
59699: PUSH
59700: LD_INT 1
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: LD_INT 1
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 1
59719: NEG
59720: PUSH
59721: LD_INT 0
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 1
59730: NEG
59731: PUSH
59732: LD_INT 1
59734: NEG
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 1
59742: NEG
59743: PUSH
59744: LD_INT 2
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: LD_INT 2
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 1
59765: PUSH
59766: LD_INT 1
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 2
59776: PUSH
59777: LD_INT 0
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 2
59786: PUSH
59787: LD_INT 1
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 2
59796: PUSH
59797: LD_INT 2
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 1
59806: PUSH
59807: LD_INT 2
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 0
59816: PUSH
59817: LD_INT 2
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: LD_INT 1
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 2
59837: NEG
59838: PUSH
59839: LD_INT 0
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 2
59848: NEG
59849: PUSH
59850: LD_INT 1
59852: NEG
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 2
59860: NEG
59861: PUSH
59862: LD_INT 2
59864: NEG
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59891: LD_ADDR_VAR 0 56
59895: PUSH
59896: LD_INT 0
59898: PUSH
59899: LD_INT 0
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 0
59908: PUSH
59909: LD_INT 1
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 1
59919: PUSH
59920: LD_INT 0
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 1
59929: PUSH
59930: LD_INT 1
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 0
59939: PUSH
59940: LD_INT 1
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 1
59949: NEG
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 1
59960: NEG
59961: PUSH
59962: LD_INT 1
59964: NEG
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 1
59972: NEG
59973: PUSH
59974: LD_INT 2
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 0
59984: PUSH
59985: LD_INT 2
59987: NEG
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 1
59995: PUSH
59996: LD_INT 1
59998: NEG
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 2
60006: PUSH
60007: LD_INT 0
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 2
60016: PUSH
60017: LD_INT 1
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 2
60026: PUSH
60027: LD_INT 2
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 1
60036: PUSH
60037: LD_INT 2
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 0
60046: PUSH
60047: LD_INT 2
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 1
60056: NEG
60057: PUSH
60058: LD_INT 1
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 2
60067: NEG
60068: PUSH
60069: LD_INT 0
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 2
60078: NEG
60079: PUSH
60080: LD_INT 1
60082: NEG
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 2
60090: NEG
60091: PUSH
60092: LD_INT 2
60094: NEG
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60121: LD_ADDR_VAR 0 57
60125: PUSH
60126: LD_INT 0
60128: PUSH
60129: LD_INT 0
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 0
60138: PUSH
60139: LD_INT 1
60141: NEG
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 1
60149: PUSH
60150: LD_INT 0
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 1
60159: PUSH
60160: LD_INT 1
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 0
60169: PUSH
60170: LD_INT 1
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 1
60179: NEG
60180: PUSH
60181: LD_INT 0
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 1
60190: NEG
60191: PUSH
60192: LD_INT 1
60194: NEG
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 1
60202: NEG
60203: PUSH
60204: LD_INT 2
60206: NEG
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: LD_INT 2
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 1
60225: PUSH
60226: LD_INT 1
60228: NEG
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 2
60236: PUSH
60237: LD_INT 0
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 2
60246: PUSH
60247: LD_INT 1
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 2
60256: PUSH
60257: LD_INT 2
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 1
60266: PUSH
60267: LD_INT 2
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 0
60276: PUSH
60277: LD_INT 2
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 1
60286: NEG
60287: PUSH
60288: LD_INT 1
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 2
60297: NEG
60298: PUSH
60299: LD_INT 0
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 2
60308: NEG
60309: PUSH
60310: LD_INT 1
60312: NEG
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 2
60320: NEG
60321: PUSH
60322: LD_INT 2
60324: NEG
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60351: LD_ADDR_VAR 0 58
60355: PUSH
60356: LD_INT 0
60358: PUSH
60359: LD_INT 0
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 0
60368: PUSH
60369: LD_INT 1
60371: NEG
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 1
60379: PUSH
60380: LD_INT 0
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 1
60389: PUSH
60390: LD_INT 1
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 0
60399: PUSH
60400: LD_INT 1
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 1
60409: NEG
60410: PUSH
60411: LD_INT 0
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 1
60420: NEG
60421: PUSH
60422: LD_INT 1
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 1
60432: NEG
60433: PUSH
60434: LD_INT 2
60436: NEG
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 0
60444: PUSH
60445: LD_INT 2
60447: NEG
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 1
60455: PUSH
60456: LD_INT 1
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 2
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 2
60476: PUSH
60477: LD_INT 1
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 2
60486: PUSH
60487: LD_INT 2
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 1
60496: PUSH
60497: LD_INT 2
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 0
60506: PUSH
60507: LD_INT 2
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 1
60516: NEG
60517: PUSH
60518: LD_INT 1
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 2
60527: NEG
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 2
60538: NEG
60539: PUSH
60540: LD_INT 1
60542: NEG
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 2
60550: NEG
60551: PUSH
60552: LD_INT 2
60554: NEG
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60581: LD_ADDR_VAR 0 59
60585: PUSH
60586: LD_INT 0
60588: PUSH
60589: LD_INT 0
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 0
60598: PUSH
60599: LD_INT 1
60601: NEG
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 1
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 1
60619: PUSH
60620: LD_INT 1
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 0
60629: PUSH
60630: LD_INT 1
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 1
60639: NEG
60640: PUSH
60641: LD_INT 0
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 1
60650: NEG
60651: PUSH
60652: LD_INT 1
60654: NEG
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60669: LD_ADDR_VAR 0 60
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: LD_INT 0
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 0
60686: PUSH
60687: LD_INT 1
60689: NEG
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 1
60697: PUSH
60698: LD_INT 0
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 1
60707: PUSH
60708: LD_INT 1
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 0
60717: PUSH
60718: LD_INT 1
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 1
60727: NEG
60728: PUSH
60729: LD_INT 0
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 1
60738: NEG
60739: PUSH
60740: LD_INT 1
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60757: LD_ADDR_VAR 0 61
60761: PUSH
60762: LD_INT 0
60764: PUSH
60765: LD_INT 0
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 0
60774: PUSH
60775: LD_INT 1
60777: NEG
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 1
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 1
60795: PUSH
60796: LD_INT 1
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 0
60805: PUSH
60806: LD_INT 1
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 1
60815: NEG
60816: PUSH
60817: LD_INT 0
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 1
60826: NEG
60827: PUSH
60828: LD_INT 1
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60845: LD_ADDR_VAR 0 62
60849: PUSH
60850: LD_INT 0
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 0
60862: PUSH
60863: LD_INT 1
60865: NEG
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 1
60873: PUSH
60874: LD_INT 0
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 1
60883: PUSH
60884: LD_INT 1
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 0
60893: PUSH
60894: LD_INT 1
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 1
60903: NEG
60904: PUSH
60905: LD_INT 0
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 1
60914: NEG
60915: PUSH
60916: LD_INT 1
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60933: LD_ADDR_VAR 0 63
60937: PUSH
60938: LD_INT 0
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 0
60950: PUSH
60951: LD_INT 1
60953: NEG
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 1
60961: PUSH
60962: LD_INT 0
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 1
60971: PUSH
60972: LD_INT 1
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 0
60981: PUSH
60982: LD_INT 1
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 1
60991: NEG
60992: PUSH
60993: LD_INT 0
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 1
61002: NEG
61003: PUSH
61004: LD_INT 1
61006: NEG
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61021: LD_ADDR_VAR 0 64
61025: PUSH
61026: LD_INT 0
61028: PUSH
61029: LD_INT 0
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 0
61038: PUSH
61039: LD_INT 1
61041: NEG
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 1
61049: PUSH
61050: LD_INT 0
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 1
61059: PUSH
61060: LD_INT 1
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 0
61069: PUSH
61070: LD_INT 1
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 1
61079: NEG
61080: PUSH
61081: LD_INT 0
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 1
61090: NEG
61091: PUSH
61092: LD_INT 1
61094: NEG
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: ST_TO_ADDR
// end ; 1 :
61109: GO 67006
61111: LD_INT 1
61113: DOUBLE
61114: EQUAL
61115: IFTRUE 61119
61117: GO 63742
61119: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61120: LD_ADDR_VAR 0 11
61124: PUSH
61125: LD_INT 1
61127: NEG
61128: PUSH
61129: LD_INT 3
61131: NEG
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 0
61139: PUSH
61140: LD_INT 3
61142: NEG
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 1
61150: PUSH
61151: LD_INT 2
61153: NEG
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: LIST
61163: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61164: LD_ADDR_VAR 0 12
61168: PUSH
61169: LD_INT 2
61171: PUSH
61172: LD_INT 1
61174: NEG
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 3
61182: PUSH
61183: LD_INT 0
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 3
61192: PUSH
61193: LD_INT 1
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: LIST
61204: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61205: LD_ADDR_VAR 0 13
61209: PUSH
61210: LD_INT 3
61212: PUSH
61213: LD_INT 2
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 3
61222: PUSH
61223: LD_INT 3
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 2
61232: PUSH
61233: LD_INT 3
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: LIST
61244: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61245: LD_ADDR_VAR 0 14
61249: PUSH
61250: LD_INT 1
61252: PUSH
61253: LD_INT 3
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 0
61262: PUSH
61263: LD_INT 3
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 1
61272: NEG
61273: PUSH
61274: LD_INT 2
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: LIST
61285: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61286: LD_ADDR_VAR 0 15
61290: PUSH
61291: LD_INT 2
61293: NEG
61294: PUSH
61295: LD_INT 1
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 3
61304: NEG
61305: PUSH
61306: LD_INT 0
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 3
61315: NEG
61316: PUSH
61317: LD_INT 1
61319: NEG
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: LIST
61329: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61330: LD_ADDR_VAR 0 16
61334: PUSH
61335: LD_INT 2
61337: NEG
61338: PUSH
61339: LD_INT 3
61341: NEG
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 3
61349: NEG
61350: PUSH
61351: LD_INT 2
61353: NEG
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 3
61361: NEG
61362: PUSH
61363: LD_INT 3
61365: NEG
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: LIST
61375: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61376: LD_ADDR_VAR 0 17
61380: PUSH
61381: LD_INT 1
61383: NEG
61384: PUSH
61385: LD_INT 3
61387: NEG
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 0
61395: PUSH
61396: LD_INT 3
61398: NEG
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 1
61406: PUSH
61407: LD_INT 2
61409: NEG
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: LIST
61419: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61420: LD_ADDR_VAR 0 18
61424: PUSH
61425: LD_INT 2
61427: PUSH
61428: LD_INT 1
61430: NEG
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 3
61438: PUSH
61439: LD_INT 0
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 3
61448: PUSH
61449: LD_INT 1
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: LIST
61460: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61461: LD_ADDR_VAR 0 19
61465: PUSH
61466: LD_INT 3
61468: PUSH
61469: LD_INT 2
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 3
61478: PUSH
61479: LD_INT 3
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 2
61488: PUSH
61489: LD_INT 3
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: LIST
61500: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61501: LD_ADDR_VAR 0 20
61505: PUSH
61506: LD_INT 1
61508: PUSH
61509: LD_INT 3
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 0
61518: PUSH
61519: LD_INT 3
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 1
61528: NEG
61529: PUSH
61530: LD_INT 2
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: LIST
61541: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61542: LD_ADDR_VAR 0 21
61546: PUSH
61547: LD_INT 2
61549: NEG
61550: PUSH
61551: LD_INT 1
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 3
61560: NEG
61561: PUSH
61562: LD_INT 0
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 3
61571: NEG
61572: PUSH
61573: LD_INT 1
61575: NEG
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: LIST
61585: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61586: LD_ADDR_VAR 0 22
61590: PUSH
61591: LD_INT 2
61593: NEG
61594: PUSH
61595: LD_INT 3
61597: NEG
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 3
61605: NEG
61606: PUSH
61607: LD_INT 2
61609: NEG
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 3
61617: NEG
61618: PUSH
61619: LD_INT 3
61621: NEG
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: LIST
61631: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61632: LD_ADDR_VAR 0 23
61636: PUSH
61637: LD_INT 0
61639: PUSH
61640: LD_INT 3
61642: NEG
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 1
61650: NEG
61651: PUSH
61652: LD_INT 4
61654: NEG
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 1
61662: PUSH
61663: LD_INT 3
61665: NEG
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: LIST
61675: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61676: LD_ADDR_VAR 0 24
61680: PUSH
61681: LD_INT 3
61683: PUSH
61684: LD_INT 0
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 3
61693: PUSH
61694: LD_INT 1
61696: NEG
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 4
61704: PUSH
61705: LD_INT 1
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: LIST
61716: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61717: LD_ADDR_VAR 0 25
61721: PUSH
61722: LD_INT 3
61724: PUSH
61725: LD_INT 3
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 4
61734: PUSH
61735: LD_INT 3
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 3
61744: PUSH
61745: LD_INT 4
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: LIST
61756: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61757: LD_ADDR_VAR 0 26
61761: PUSH
61762: LD_INT 0
61764: PUSH
61765: LD_INT 3
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 1
61774: PUSH
61775: LD_INT 4
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 1
61784: NEG
61785: PUSH
61786: LD_INT 3
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: LIST
61797: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61798: LD_ADDR_VAR 0 27
61802: PUSH
61803: LD_INT 3
61805: NEG
61806: PUSH
61807: LD_INT 0
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 3
61816: NEG
61817: PUSH
61818: LD_INT 1
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 4
61827: NEG
61828: PUSH
61829: LD_INT 1
61831: NEG
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: LIST
61841: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61842: LD_ADDR_VAR 0 28
61846: PUSH
61847: LD_INT 3
61849: NEG
61850: PUSH
61851: LD_INT 3
61853: NEG
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 3
61861: NEG
61862: PUSH
61863: LD_INT 4
61865: NEG
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 4
61873: NEG
61874: PUSH
61875: LD_INT 3
61877: NEG
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: LIST
61887: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61888: LD_ADDR_VAR 0 29
61892: PUSH
61893: LD_INT 1
61895: NEG
61896: PUSH
61897: LD_INT 3
61899: NEG
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: LD_INT 3
61910: NEG
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 1
61918: PUSH
61919: LD_INT 2
61921: NEG
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 1
61929: NEG
61930: PUSH
61931: LD_INT 4
61933: NEG
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 0
61941: PUSH
61942: LD_INT 4
61944: NEG
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 1
61952: PUSH
61953: LD_INT 3
61955: NEG
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 1
61963: NEG
61964: PUSH
61965: LD_INT 5
61967: NEG
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 0
61975: PUSH
61976: LD_INT 5
61978: NEG
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 1
61986: PUSH
61987: LD_INT 4
61989: NEG
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 1
61997: NEG
61998: PUSH
61999: LD_INT 6
62001: NEG
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 0
62009: PUSH
62010: LD_INT 6
62012: NEG
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 1
62020: PUSH
62021: LD_INT 5
62023: NEG
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62043: LD_ADDR_VAR 0 30
62047: PUSH
62048: LD_INT 2
62050: PUSH
62051: LD_INT 1
62053: NEG
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 3
62061: PUSH
62062: LD_INT 0
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 3
62071: PUSH
62072: LD_INT 1
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 3
62081: PUSH
62082: LD_INT 1
62084: NEG
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 4
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 4
62102: PUSH
62103: LD_INT 1
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 4
62112: PUSH
62113: LD_INT 1
62115: NEG
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 5
62123: PUSH
62124: LD_INT 0
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 5
62133: PUSH
62134: LD_INT 1
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 5
62143: PUSH
62144: LD_INT 1
62146: NEG
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 6
62154: PUSH
62155: LD_INT 0
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 6
62164: PUSH
62165: LD_INT 1
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62186: LD_ADDR_VAR 0 31
62190: PUSH
62191: LD_INT 3
62193: PUSH
62194: LD_INT 2
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 3
62203: PUSH
62204: LD_INT 3
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 2
62213: PUSH
62214: LD_INT 3
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 4
62223: PUSH
62224: LD_INT 3
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 4
62233: PUSH
62234: LD_INT 4
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 3
62243: PUSH
62244: LD_INT 4
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 5
62253: PUSH
62254: LD_INT 4
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 5
62263: PUSH
62264: LD_INT 5
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 4
62273: PUSH
62274: LD_INT 5
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 6
62283: PUSH
62284: LD_INT 5
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 6
62293: PUSH
62294: LD_INT 6
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 5
62303: PUSH
62304: LD_INT 6
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62325: LD_ADDR_VAR 0 32
62329: PUSH
62330: LD_INT 1
62332: PUSH
62333: LD_INT 3
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 0
62342: PUSH
62343: LD_INT 3
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 1
62352: NEG
62353: PUSH
62354: LD_INT 2
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 1
62363: PUSH
62364: LD_INT 4
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 0
62373: PUSH
62374: LD_INT 4
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 1
62383: NEG
62384: PUSH
62385: LD_INT 3
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 1
62394: PUSH
62395: LD_INT 5
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 0
62404: PUSH
62405: LD_INT 5
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 1
62414: NEG
62415: PUSH
62416: LD_INT 4
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 1
62425: PUSH
62426: LD_INT 6
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 0
62435: PUSH
62436: LD_INT 6
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 1
62445: NEG
62446: PUSH
62447: LD_INT 5
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62468: LD_ADDR_VAR 0 33
62472: PUSH
62473: LD_INT 2
62475: NEG
62476: PUSH
62477: LD_INT 1
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 3
62486: NEG
62487: PUSH
62488: LD_INT 0
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 3
62497: NEG
62498: PUSH
62499: LD_INT 1
62501: NEG
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 3
62509: NEG
62510: PUSH
62511: LD_INT 1
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 4
62520: NEG
62521: PUSH
62522: LD_INT 0
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 4
62531: NEG
62532: PUSH
62533: LD_INT 1
62535: NEG
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 4
62543: NEG
62544: PUSH
62545: LD_INT 1
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 5
62554: NEG
62555: PUSH
62556: LD_INT 0
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 5
62565: NEG
62566: PUSH
62567: LD_INT 1
62569: NEG
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 5
62577: NEG
62578: PUSH
62579: LD_INT 1
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 6
62588: NEG
62589: PUSH
62590: LD_INT 0
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 6
62599: NEG
62600: PUSH
62601: LD_INT 1
62603: NEG
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62623: LD_ADDR_VAR 0 34
62627: PUSH
62628: LD_INT 2
62630: NEG
62631: PUSH
62632: LD_INT 3
62634: NEG
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 3
62642: NEG
62643: PUSH
62644: LD_INT 2
62646: NEG
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 3
62654: NEG
62655: PUSH
62656: LD_INT 3
62658: NEG
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 3
62666: NEG
62667: PUSH
62668: LD_INT 4
62670: NEG
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 4
62678: NEG
62679: PUSH
62680: LD_INT 3
62682: NEG
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 4
62690: NEG
62691: PUSH
62692: LD_INT 4
62694: NEG
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 4
62702: NEG
62703: PUSH
62704: LD_INT 5
62706: NEG
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 5
62714: NEG
62715: PUSH
62716: LD_INT 4
62718: NEG
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 5
62726: NEG
62727: PUSH
62728: LD_INT 5
62730: NEG
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 5
62738: NEG
62739: PUSH
62740: LD_INT 6
62742: NEG
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 6
62750: NEG
62751: PUSH
62752: LD_INT 5
62754: NEG
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 6
62762: NEG
62763: PUSH
62764: LD_INT 6
62766: NEG
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62786: LD_ADDR_VAR 0 41
62790: PUSH
62791: LD_INT 0
62793: PUSH
62794: LD_INT 2
62796: NEG
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 1
62804: NEG
62805: PUSH
62806: LD_INT 3
62808: NEG
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 1
62816: PUSH
62817: LD_INT 2
62819: NEG
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: LIST
62829: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62830: LD_ADDR_VAR 0 42
62834: PUSH
62835: LD_INT 2
62837: PUSH
62838: LD_INT 0
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 2
62847: PUSH
62848: LD_INT 1
62850: NEG
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PUSH
62856: LD_INT 3
62858: PUSH
62859: LD_INT 1
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: LIST
62870: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62871: LD_ADDR_VAR 0 43
62875: PUSH
62876: LD_INT 2
62878: PUSH
62879: LD_INT 2
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 3
62888: PUSH
62889: LD_INT 2
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 2
62898: PUSH
62899: LD_INT 3
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: LIST
62910: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62911: LD_ADDR_VAR 0 44
62915: PUSH
62916: LD_INT 0
62918: PUSH
62919: LD_INT 2
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 1
62928: PUSH
62929: LD_INT 3
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 1
62938: NEG
62939: PUSH
62940: LD_INT 2
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: LIST
62951: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62952: LD_ADDR_VAR 0 45
62956: PUSH
62957: LD_INT 2
62959: NEG
62960: PUSH
62961: LD_INT 0
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 2
62970: NEG
62971: PUSH
62972: LD_INT 1
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 3
62981: NEG
62982: PUSH
62983: LD_INT 1
62985: NEG
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: LIST
62995: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62996: LD_ADDR_VAR 0 46
63000: PUSH
63001: LD_INT 2
63003: NEG
63004: PUSH
63005: LD_INT 2
63007: NEG
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 2
63015: NEG
63016: PUSH
63017: LD_INT 3
63019: NEG
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 3
63027: NEG
63028: PUSH
63029: LD_INT 2
63031: NEG
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: LIST
63041: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63042: LD_ADDR_VAR 0 47
63046: PUSH
63047: LD_INT 2
63049: NEG
63050: PUSH
63051: LD_INT 3
63053: NEG
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 1
63061: NEG
63062: PUSH
63063: LD_INT 3
63065: NEG
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63075: LD_ADDR_VAR 0 48
63079: PUSH
63080: LD_INT 1
63082: PUSH
63083: LD_INT 2
63085: NEG
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 2
63093: PUSH
63094: LD_INT 1
63096: NEG
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63106: LD_ADDR_VAR 0 49
63110: PUSH
63111: LD_INT 3
63113: PUSH
63114: LD_INT 1
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 3
63123: PUSH
63124: LD_INT 2
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63135: LD_ADDR_VAR 0 50
63139: PUSH
63140: LD_INT 2
63142: PUSH
63143: LD_INT 3
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 1
63152: PUSH
63153: LD_INT 3
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63164: LD_ADDR_VAR 0 51
63168: PUSH
63169: LD_INT 1
63171: NEG
63172: PUSH
63173: LD_INT 2
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 2
63182: NEG
63183: PUSH
63184: LD_INT 1
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63195: LD_ADDR_VAR 0 52
63199: PUSH
63200: LD_INT 3
63202: NEG
63203: PUSH
63204: LD_INT 1
63206: NEG
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 3
63214: NEG
63215: PUSH
63216: LD_INT 2
63218: NEG
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63228: LD_ADDR_VAR 0 53
63232: PUSH
63233: LD_INT 1
63235: NEG
63236: PUSH
63237: LD_INT 3
63239: NEG
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 0
63247: PUSH
63248: LD_INT 3
63250: NEG
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 1
63258: PUSH
63259: LD_INT 2
63261: NEG
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: LIST
63271: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63272: LD_ADDR_VAR 0 54
63276: PUSH
63277: LD_INT 2
63279: PUSH
63280: LD_INT 1
63282: NEG
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 3
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 3
63300: PUSH
63301: LD_INT 1
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: LIST
63312: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63313: LD_ADDR_VAR 0 55
63317: PUSH
63318: LD_INT 3
63320: PUSH
63321: LD_INT 2
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 3
63330: PUSH
63331: LD_INT 3
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 2
63340: PUSH
63341: LD_INT 3
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: LIST
63352: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63353: LD_ADDR_VAR 0 56
63357: PUSH
63358: LD_INT 1
63360: PUSH
63361: LD_INT 3
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 0
63370: PUSH
63371: LD_INT 3
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 1
63380: NEG
63381: PUSH
63382: LD_INT 2
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: LIST
63393: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63394: LD_ADDR_VAR 0 57
63398: PUSH
63399: LD_INT 2
63401: NEG
63402: PUSH
63403: LD_INT 1
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 3
63412: NEG
63413: PUSH
63414: LD_INT 0
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 3
63423: NEG
63424: PUSH
63425: LD_INT 1
63427: NEG
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: LIST
63437: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63438: LD_ADDR_VAR 0 58
63442: PUSH
63443: LD_INT 2
63445: NEG
63446: PUSH
63447: LD_INT 3
63449: NEG
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 3
63457: NEG
63458: PUSH
63459: LD_INT 2
63461: NEG
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 3
63469: NEG
63470: PUSH
63471: LD_INT 3
63473: NEG
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: LIST
63483: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63484: LD_ADDR_VAR 0 59
63488: PUSH
63489: LD_INT 1
63491: NEG
63492: PUSH
63493: LD_INT 2
63495: NEG
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 0
63503: PUSH
63504: LD_INT 2
63506: NEG
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 1
63514: PUSH
63515: LD_INT 1
63517: NEG
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: LIST
63527: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63528: LD_ADDR_VAR 0 60
63532: PUSH
63533: LD_INT 1
63535: PUSH
63536: LD_INT 1
63538: NEG
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 2
63546: PUSH
63547: LD_INT 0
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 2
63556: PUSH
63557: LD_INT 1
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: LIST
63568: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63569: LD_ADDR_VAR 0 61
63573: PUSH
63574: LD_INT 2
63576: PUSH
63577: LD_INT 1
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 2
63586: PUSH
63587: LD_INT 2
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 1
63596: PUSH
63597: LD_INT 2
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: LIST
63608: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63609: LD_ADDR_VAR 0 62
63613: PUSH
63614: LD_INT 1
63616: PUSH
63617: LD_INT 2
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 0
63626: PUSH
63627: LD_INT 2
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 1
63636: NEG
63637: PUSH
63638: LD_INT 1
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: LIST
63649: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63650: LD_ADDR_VAR 0 63
63654: PUSH
63655: LD_INT 1
63657: NEG
63658: PUSH
63659: LD_INT 1
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 2
63668: NEG
63669: PUSH
63670: LD_INT 0
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 2
63679: NEG
63680: PUSH
63681: LD_INT 1
63683: NEG
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: LIST
63693: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63694: LD_ADDR_VAR 0 64
63698: PUSH
63699: LD_INT 1
63701: NEG
63702: PUSH
63703: LD_INT 2
63705: NEG
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 2
63713: NEG
63714: PUSH
63715: LD_INT 1
63717: NEG
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 2
63725: NEG
63726: PUSH
63727: LD_INT 2
63729: NEG
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: LIST
63739: ST_TO_ADDR
// end ; 2 :
63740: GO 67006
63742: LD_INT 2
63744: DOUBLE
63745: EQUAL
63746: IFTRUE 63750
63748: GO 67005
63750: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63751: LD_ADDR_VAR 0 29
63755: PUSH
63756: LD_INT 4
63758: PUSH
63759: LD_INT 0
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 4
63768: PUSH
63769: LD_INT 1
63771: NEG
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 5
63779: PUSH
63780: LD_INT 0
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 5
63789: PUSH
63790: LD_INT 1
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 4
63799: PUSH
63800: LD_INT 1
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 3
63809: PUSH
63810: LD_INT 0
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 3
63819: PUSH
63820: LD_INT 1
63822: NEG
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 3
63830: PUSH
63831: LD_INT 2
63833: NEG
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 5
63841: PUSH
63842: LD_INT 2
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 3
63851: PUSH
63852: LD_INT 3
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 3
63861: PUSH
63862: LD_INT 2
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 4
63871: PUSH
63872: LD_INT 3
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 4
63881: PUSH
63882: LD_INT 4
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 3
63891: PUSH
63892: LD_INT 4
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 2
63901: PUSH
63902: LD_INT 3
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 2
63911: PUSH
63912: LD_INT 2
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 4
63921: PUSH
63922: LD_INT 2
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 2
63931: PUSH
63932: LD_INT 4
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 0
63941: PUSH
63942: LD_INT 4
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 0
63951: PUSH
63952: LD_INT 3
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 1
63961: PUSH
63962: LD_INT 4
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 1
63971: PUSH
63972: LD_INT 5
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: LD_INT 0
63981: PUSH
63982: LD_INT 5
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 1
63991: NEG
63992: PUSH
63993: LD_INT 4
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 1
64002: NEG
64003: PUSH
64004: LD_INT 3
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 2
64013: PUSH
64014: LD_INT 5
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 2
64023: NEG
64024: PUSH
64025: LD_INT 3
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 3
64034: NEG
64035: PUSH
64036: LD_INT 0
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 3
64045: NEG
64046: PUSH
64047: LD_INT 1
64049: NEG
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 2
64057: NEG
64058: PUSH
64059: LD_INT 0
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 2
64068: NEG
64069: PUSH
64070: LD_INT 1
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 3
64079: NEG
64080: PUSH
64081: LD_INT 1
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 4
64090: NEG
64091: PUSH
64092: LD_INT 0
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 4
64101: NEG
64102: PUSH
64103: LD_INT 1
64105: NEG
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 4
64113: NEG
64114: PUSH
64115: LD_INT 2
64117: NEG
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 2
64125: NEG
64126: PUSH
64127: LD_INT 2
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 4
64136: NEG
64137: PUSH
64138: LD_INT 4
64140: NEG
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 4
64148: NEG
64149: PUSH
64150: LD_INT 5
64152: NEG
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 3
64160: NEG
64161: PUSH
64162: LD_INT 4
64164: NEG
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 3
64172: NEG
64173: PUSH
64174: LD_INT 3
64176: NEG
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 4
64184: NEG
64185: PUSH
64186: LD_INT 3
64188: NEG
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 5
64196: NEG
64197: PUSH
64198: LD_INT 4
64200: NEG
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: PUSH
64206: LD_INT 5
64208: NEG
64209: PUSH
64210: LD_INT 5
64212: NEG
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 3
64220: NEG
64221: PUSH
64222: LD_INT 5
64224: NEG
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 5
64232: NEG
64233: PUSH
64234: LD_INT 3
64236: NEG
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64289: LD_ADDR_VAR 0 30
64293: PUSH
64294: LD_INT 4
64296: PUSH
64297: LD_INT 4
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 4
64306: PUSH
64307: LD_INT 3
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 5
64316: PUSH
64317: LD_INT 4
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 5
64326: PUSH
64327: LD_INT 5
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 4
64336: PUSH
64337: LD_INT 5
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 3
64346: PUSH
64347: LD_INT 4
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 3
64356: PUSH
64357: LD_INT 3
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 5
64366: PUSH
64367: LD_INT 3
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 3
64376: PUSH
64377: LD_INT 5
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 0
64386: PUSH
64387: LD_INT 3
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 0
64396: PUSH
64397: LD_INT 2
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 1
64406: PUSH
64407: LD_INT 3
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 1
64416: PUSH
64417: LD_INT 4
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 0
64426: PUSH
64427: LD_INT 4
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 1
64436: NEG
64437: PUSH
64438: LD_INT 3
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: LD_INT 1
64447: NEG
64448: PUSH
64449: LD_INT 2
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 2
64458: PUSH
64459: LD_INT 4
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 2
64468: NEG
64469: PUSH
64470: LD_INT 2
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 4
64479: NEG
64480: PUSH
64481: LD_INT 0
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 4
64490: NEG
64491: PUSH
64492: LD_INT 1
64494: NEG
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 3
64502: NEG
64503: PUSH
64504: LD_INT 0
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 3
64513: NEG
64514: PUSH
64515: LD_INT 1
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 4
64524: NEG
64525: PUSH
64526: LD_INT 1
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 5
64535: NEG
64536: PUSH
64537: LD_INT 0
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 5
64546: NEG
64547: PUSH
64548: LD_INT 1
64550: NEG
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 5
64558: NEG
64559: PUSH
64560: LD_INT 2
64562: NEG
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 3
64570: NEG
64571: PUSH
64572: LD_INT 2
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: LD_INT 3
64581: NEG
64582: PUSH
64583: LD_INT 3
64585: NEG
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 3
64593: NEG
64594: PUSH
64595: LD_INT 4
64597: NEG
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 2
64605: NEG
64606: PUSH
64607: LD_INT 3
64609: NEG
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 2
64617: NEG
64618: PUSH
64619: LD_INT 2
64621: NEG
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 3
64629: NEG
64630: PUSH
64631: LD_INT 2
64633: NEG
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 4
64641: NEG
64642: PUSH
64643: LD_INT 3
64645: NEG
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 4
64653: NEG
64654: PUSH
64655: LD_INT 4
64657: NEG
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: PUSH
64663: LD_INT 2
64665: NEG
64666: PUSH
64667: LD_INT 4
64669: NEG
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 4
64677: NEG
64678: PUSH
64679: LD_INT 2
64681: NEG
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 0
64689: PUSH
64690: LD_INT 4
64692: NEG
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 0
64700: PUSH
64701: LD_INT 5
64703: NEG
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 1
64711: PUSH
64712: LD_INT 4
64714: NEG
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 1
64722: PUSH
64723: LD_INT 3
64725: NEG
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 0
64733: PUSH
64734: LD_INT 3
64736: NEG
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 1
64744: NEG
64745: PUSH
64746: LD_INT 4
64748: NEG
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 1
64756: NEG
64757: PUSH
64758: LD_INT 5
64760: NEG
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 2
64768: PUSH
64769: LD_INT 3
64771: NEG
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 2
64779: NEG
64780: PUSH
64781: LD_INT 5
64783: NEG
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: LIST
64793: LIST
64794: LIST
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64836: LD_ADDR_VAR 0 31
64840: PUSH
64841: LD_INT 0
64843: PUSH
64844: LD_INT 4
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 0
64853: PUSH
64854: LD_INT 3
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 1
64863: PUSH
64864: LD_INT 4
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 1
64873: PUSH
64874: LD_INT 5
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 0
64883: PUSH
64884: LD_INT 5
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 1
64893: NEG
64894: PUSH
64895: LD_INT 4
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_INT 1
64904: NEG
64905: PUSH
64906: LD_INT 3
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 2
64915: PUSH
64916: LD_INT 5
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 2
64925: NEG
64926: PUSH
64927: LD_INT 3
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 3
64936: NEG
64937: PUSH
64938: LD_INT 0
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 3
64947: NEG
64948: PUSH
64949: LD_INT 1
64951: NEG
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 2
64959: NEG
64960: PUSH
64961: LD_INT 0
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: LD_INT 2
64970: NEG
64971: PUSH
64972: LD_INT 1
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 3
64981: NEG
64982: PUSH
64983: LD_INT 1
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 4
64992: NEG
64993: PUSH
64994: LD_INT 0
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 4
65003: NEG
65004: PUSH
65005: LD_INT 1
65007: NEG
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 4
65015: NEG
65016: PUSH
65017: LD_INT 2
65019: NEG
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 2
65027: NEG
65028: PUSH
65029: LD_INT 2
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 4
65038: NEG
65039: PUSH
65040: LD_INT 4
65042: NEG
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 4
65050: NEG
65051: PUSH
65052: LD_INT 5
65054: NEG
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 3
65062: NEG
65063: PUSH
65064: LD_INT 4
65066: NEG
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 3
65074: NEG
65075: PUSH
65076: LD_INT 3
65078: NEG
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 4
65086: NEG
65087: PUSH
65088: LD_INT 3
65090: NEG
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 5
65098: NEG
65099: PUSH
65100: LD_INT 4
65102: NEG
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 5
65110: NEG
65111: PUSH
65112: LD_INT 5
65114: NEG
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 3
65122: NEG
65123: PUSH
65124: LD_INT 5
65126: NEG
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 5
65134: NEG
65135: PUSH
65136: LD_INT 3
65138: NEG
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 0
65146: PUSH
65147: LD_INT 3
65149: NEG
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 0
65157: PUSH
65158: LD_INT 4
65160: NEG
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 1
65168: PUSH
65169: LD_INT 3
65171: NEG
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 1
65179: PUSH
65180: LD_INT 2
65182: NEG
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 0
65190: PUSH
65191: LD_INT 2
65193: NEG
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 1
65201: NEG
65202: PUSH
65203: LD_INT 3
65205: NEG
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 1
65213: NEG
65214: PUSH
65215: LD_INT 4
65217: NEG
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 2
65225: PUSH
65226: LD_INT 2
65228: NEG
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 2
65236: NEG
65237: PUSH
65238: LD_INT 4
65240: NEG
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 4
65248: PUSH
65249: LD_INT 0
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 4
65258: PUSH
65259: LD_INT 1
65261: NEG
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 5
65269: PUSH
65270: LD_INT 0
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 5
65279: PUSH
65280: LD_INT 1
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: LD_INT 4
65289: PUSH
65290: LD_INT 1
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: LD_INT 3
65299: PUSH
65300: LD_INT 0
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: LD_INT 3
65309: PUSH
65310: LD_INT 1
65312: NEG
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 3
65320: PUSH
65321: LD_INT 2
65323: NEG
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 5
65331: PUSH
65332: LD_INT 2
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: LIST
65379: LIST
65380: LIST
65381: LIST
65382: LIST
65383: LIST
65384: LIST
65385: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65386: LD_ADDR_VAR 0 32
65390: PUSH
65391: LD_INT 4
65393: NEG
65394: PUSH
65395: LD_INT 0
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 4
65404: NEG
65405: PUSH
65406: LD_INT 1
65408: NEG
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 3
65416: NEG
65417: PUSH
65418: LD_INT 0
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: LD_INT 3
65427: NEG
65428: PUSH
65429: LD_INT 1
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 4
65438: NEG
65439: PUSH
65440: LD_INT 1
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: LD_INT 5
65449: NEG
65450: PUSH
65451: LD_INT 0
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 5
65460: NEG
65461: PUSH
65462: LD_INT 1
65464: NEG
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 5
65472: NEG
65473: PUSH
65474: LD_INT 2
65476: NEG
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 3
65484: NEG
65485: PUSH
65486: LD_INT 2
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 3
65495: NEG
65496: PUSH
65497: LD_INT 3
65499: NEG
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 3
65507: NEG
65508: PUSH
65509: LD_INT 4
65511: NEG
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: LD_INT 2
65519: NEG
65520: PUSH
65521: LD_INT 3
65523: NEG
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 2
65531: NEG
65532: PUSH
65533: LD_INT 2
65535: NEG
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 3
65543: NEG
65544: PUSH
65545: LD_INT 2
65547: NEG
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 4
65555: NEG
65556: PUSH
65557: LD_INT 3
65559: NEG
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 4
65567: NEG
65568: PUSH
65569: LD_INT 4
65571: NEG
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 2
65579: NEG
65580: PUSH
65581: LD_INT 4
65583: NEG
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 4
65591: NEG
65592: PUSH
65593: LD_INT 2
65595: NEG
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 0
65603: PUSH
65604: LD_INT 4
65606: NEG
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PUSH
65612: LD_INT 0
65614: PUSH
65615: LD_INT 5
65617: NEG
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 1
65625: PUSH
65626: LD_INT 4
65628: NEG
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: LD_INT 1
65636: PUSH
65637: LD_INT 3
65639: NEG
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 0
65647: PUSH
65648: LD_INT 3
65650: NEG
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 1
65658: NEG
65659: PUSH
65660: LD_INT 4
65662: NEG
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 1
65670: NEG
65671: PUSH
65672: LD_INT 5
65674: NEG
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 2
65682: PUSH
65683: LD_INT 3
65685: NEG
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 2
65693: NEG
65694: PUSH
65695: LD_INT 5
65697: NEG
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 3
65705: PUSH
65706: LD_INT 0
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 3
65715: PUSH
65716: LD_INT 1
65718: NEG
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 4
65726: PUSH
65727: LD_INT 0
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 4
65736: PUSH
65737: LD_INT 1
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 3
65746: PUSH
65747: LD_INT 1
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 2
65756: PUSH
65757: LD_INT 0
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 2
65766: PUSH
65767: LD_INT 1
65769: NEG
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 2
65777: PUSH
65778: LD_INT 2
65780: NEG
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 4
65788: PUSH
65789: LD_INT 2
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 4
65798: PUSH
65799: LD_INT 4
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: LD_INT 4
65808: PUSH
65809: LD_INT 3
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 5
65818: PUSH
65819: LD_INT 4
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_INT 5
65828: PUSH
65829: LD_INT 5
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: LD_INT 4
65838: PUSH
65839: LD_INT 5
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: LD_INT 3
65848: PUSH
65849: LD_INT 4
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 3
65858: PUSH
65859: LD_INT 3
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 5
65868: PUSH
65869: LD_INT 3
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 3
65878: PUSH
65879: LD_INT 5
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: LIST
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: LIST
65932: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65933: LD_ADDR_VAR 0 33
65937: PUSH
65938: LD_INT 4
65940: NEG
65941: PUSH
65942: LD_INT 4
65944: NEG
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 4
65952: NEG
65953: PUSH
65954: LD_INT 5
65956: NEG
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 3
65964: NEG
65965: PUSH
65966: LD_INT 4
65968: NEG
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 3
65976: NEG
65977: PUSH
65978: LD_INT 3
65980: NEG
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 4
65988: NEG
65989: PUSH
65990: LD_INT 3
65992: NEG
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 5
66000: NEG
66001: PUSH
66002: LD_INT 4
66004: NEG
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 5
66012: NEG
66013: PUSH
66014: LD_INT 5
66016: NEG
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 3
66024: NEG
66025: PUSH
66026: LD_INT 5
66028: NEG
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 5
66036: NEG
66037: PUSH
66038: LD_INT 3
66040: NEG
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 0
66048: PUSH
66049: LD_INT 3
66051: NEG
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 0
66059: PUSH
66060: LD_INT 4
66062: NEG
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: PUSH
66068: LD_INT 1
66070: PUSH
66071: LD_INT 3
66073: NEG
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: PUSH
66079: LD_INT 1
66081: PUSH
66082: LD_INT 2
66084: NEG
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: LD_INT 0
66092: PUSH
66093: LD_INT 2
66095: NEG
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: LD_INT 1
66103: NEG
66104: PUSH
66105: LD_INT 3
66107: NEG
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 1
66115: NEG
66116: PUSH
66117: LD_INT 4
66119: NEG
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: LD_INT 2
66127: PUSH
66128: LD_INT 2
66130: NEG
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 2
66138: NEG
66139: PUSH
66140: LD_INT 4
66142: NEG
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 4
66150: PUSH
66151: LD_INT 0
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 4
66160: PUSH
66161: LD_INT 1
66163: NEG
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 5
66171: PUSH
66172: LD_INT 0
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 5
66181: PUSH
66182: LD_INT 1
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 4
66191: PUSH
66192: LD_INT 1
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 3
66201: PUSH
66202: LD_INT 0
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 3
66211: PUSH
66212: LD_INT 1
66214: NEG
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 3
66222: PUSH
66223: LD_INT 2
66225: NEG
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: LD_INT 5
66233: PUSH
66234: LD_INT 2
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: LD_INT 3
66243: PUSH
66244: LD_INT 3
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: LD_INT 3
66253: PUSH
66254: LD_INT 2
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 4
66263: PUSH
66264: LD_INT 3
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 4
66273: PUSH
66274: LD_INT 4
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 3
66283: PUSH
66284: LD_INT 4
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 2
66293: PUSH
66294: LD_INT 3
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 2
66303: PUSH
66304: LD_INT 2
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 4
66313: PUSH
66314: LD_INT 2
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 2
66323: PUSH
66324: LD_INT 4
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 0
66333: PUSH
66334: LD_INT 4
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 0
66343: PUSH
66344: LD_INT 3
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 1
66353: PUSH
66354: LD_INT 4
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 1
66363: PUSH
66364: LD_INT 5
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: PUSH
66371: LD_INT 0
66373: PUSH
66374: LD_INT 5
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: PUSH
66381: LD_INT 1
66383: NEG
66384: PUSH
66385: LD_INT 4
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: LD_INT 1
66394: NEG
66395: PUSH
66396: LD_INT 3
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 2
66405: PUSH
66406: LD_INT 5
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 2
66415: NEG
66416: PUSH
66417: LD_INT 3
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: LIST
66428: LIST
66429: LIST
66430: LIST
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: LIST
66462: LIST
66463: LIST
66464: LIST
66465: LIST
66466: LIST
66467: LIST
66468: LIST
66469: LIST
66470: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66471: LD_ADDR_VAR 0 34
66475: PUSH
66476: LD_INT 0
66478: PUSH
66479: LD_INT 4
66481: NEG
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 0
66489: PUSH
66490: LD_INT 5
66492: NEG
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: LD_INT 1
66500: PUSH
66501: LD_INT 4
66503: NEG
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 1
66511: PUSH
66512: LD_INT 3
66514: NEG
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 0
66522: PUSH
66523: LD_INT 3
66525: NEG
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: LD_INT 1
66533: NEG
66534: PUSH
66535: LD_INT 4
66537: NEG
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 1
66545: NEG
66546: PUSH
66547: LD_INT 5
66549: NEG
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 2
66557: PUSH
66558: LD_INT 3
66560: NEG
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 2
66568: NEG
66569: PUSH
66570: LD_INT 5
66572: NEG
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 3
66580: PUSH
66581: LD_INT 0
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 3
66590: PUSH
66591: LD_INT 1
66593: NEG
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 4
66601: PUSH
66602: LD_INT 0
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: LD_INT 4
66611: PUSH
66612: LD_INT 1
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 3
66621: PUSH
66622: LD_INT 1
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: LD_INT 2
66631: PUSH
66632: LD_INT 0
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PUSH
66639: LD_INT 2
66641: PUSH
66642: LD_INT 1
66644: NEG
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 2
66652: PUSH
66653: LD_INT 2
66655: NEG
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 4
66663: PUSH
66664: LD_INT 2
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: PUSH
66671: LD_INT 4
66673: PUSH
66674: LD_INT 4
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: LD_INT 4
66683: PUSH
66684: LD_INT 3
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 5
66693: PUSH
66694: LD_INT 4
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 5
66703: PUSH
66704: LD_INT 5
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 4
66713: PUSH
66714: LD_INT 5
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 3
66723: PUSH
66724: LD_INT 4
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 3
66733: PUSH
66734: LD_INT 3
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 5
66743: PUSH
66744: LD_INT 3
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 3
66753: PUSH
66754: LD_INT 5
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: LD_INT 0
66763: PUSH
66764: LD_INT 3
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 0
66773: PUSH
66774: LD_INT 2
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: LD_INT 1
66783: PUSH
66784: LD_INT 3
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: LD_INT 1
66793: PUSH
66794: LD_INT 4
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: LD_INT 0
66803: PUSH
66804: LD_INT 4
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PUSH
66811: LD_INT 1
66813: NEG
66814: PUSH
66815: LD_INT 3
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: LD_INT 1
66824: NEG
66825: PUSH
66826: LD_INT 2
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: LD_INT 2
66835: PUSH
66836: LD_INT 4
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 2
66845: NEG
66846: PUSH
66847: LD_INT 2
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 4
66856: NEG
66857: PUSH
66858: LD_INT 0
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 4
66867: NEG
66868: PUSH
66869: LD_INT 1
66871: NEG
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 3
66879: NEG
66880: PUSH
66881: LD_INT 0
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 3
66890: NEG
66891: PUSH
66892: LD_INT 1
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 4
66901: NEG
66902: PUSH
66903: LD_INT 1
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 5
66912: NEG
66913: PUSH
66914: LD_INT 0
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 5
66923: NEG
66924: PUSH
66925: LD_INT 1
66927: NEG
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 5
66935: NEG
66936: PUSH
66937: LD_INT 2
66939: NEG
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 3
66947: NEG
66948: PUSH
66949: LD_INT 2
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: LIST
66974: LIST
66975: LIST
66976: LIST
66977: LIST
66978: LIST
66979: LIST
66980: LIST
66981: LIST
66982: LIST
66983: LIST
66984: LIST
66985: LIST
66986: LIST
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: LIST
66994: LIST
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: ST_TO_ADDR
// end ; end ;
67003: GO 67006
67005: POP
// case btype of b_depot , b_warehouse :
67006: LD_VAR 0 1
67010: PUSH
67011: LD_INT 0
67013: DOUBLE
67014: EQUAL
67015: IFTRUE 67025
67017: LD_INT 1
67019: DOUBLE
67020: EQUAL
67021: IFTRUE 67025
67023: GO 67226
67025: POP
// case nation of nation_american :
67026: LD_VAR 0 5
67030: PUSH
67031: LD_INT 1
67033: DOUBLE
67034: EQUAL
67035: IFTRUE 67039
67037: GO 67095
67039: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67040: LD_ADDR_VAR 0 9
67044: PUSH
67045: LD_VAR 0 11
67049: PUSH
67050: LD_VAR 0 12
67054: PUSH
67055: LD_VAR 0 13
67059: PUSH
67060: LD_VAR 0 14
67064: PUSH
67065: LD_VAR 0 15
67069: PUSH
67070: LD_VAR 0 16
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: PUSH
67083: LD_VAR 0 4
67087: PUSH
67088: LD_INT 1
67090: PLUS
67091: ARRAY
67092: ST_TO_ADDR
67093: GO 67224
67095: LD_INT 2
67097: DOUBLE
67098: EQUAL
67099: IFTRUE 67103
67101: GO 67159
67103: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67104: LD_ADDR_VAR 0 9
67108: PUSH
67109: LD_VAR 0 17
67113: PUSH
67114: LD_VAR 0 18
67118: PUSH
67119: LD_VAR 0 19
67123: PUSH
67124: LD_VAR 0 20
67128: PUSH
67129: LD_VAR 0 21
67133: PUSH
67134: LD_VAR 0 22
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: LIST
67143: LIST
67144: LIST
67145: LIST
67146: PUSH
67147: LD_VAR 0 4
67151: PUSH
67152: LD_INT 1
67154: PLUS
67155: ARRAY
67156: ST_TO_ADDR
67157: GO 67224
67159: LD_INT 3
67161: DOUBLE
67162: EQUAL
67163: IFTRUE 67167
67165: GO 67223
67167: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67168: LD_ADDR_VAR 0 9
67172: PUSH
67173: LD_VAR 0 23
67177: PUSH
67178: LD_VAR 0 24
67182: PUSH
67183: LD_VAR 0 25
67187: PUSH
67188: LD_VAR 0 26
67192: PUSH
67193: LD_VAR 0 27
67197: PUSH
67198: LD_VAR 0 28
67202: PUSH
67203: EMPTY
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: PUSH
67211: LD_VAR 0 4
67215: PUSH
67216: LD_INT 1
67218: PLUS
67219: ARRAY
67220: ST_TO_ADDR
67221: GO 67224
67223: POP
67224: GO 67779
67226: LD_INT 2
67228: DOUBLE
67229: EQUAL
67230: IFTRUE 67240
67232: LD_INT 3
67234: DOUBLE
67235: EQUAL
67236: IFTRUE 67240
67238: GO 67296
67240: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67241: LD_ADDR_VAR 0 9
67245: PUSH
67246: LD_VAR 0 29
67250: PUSH
67251: LD_VAR 0 30
67255: PUSH
67256: LD_VAR 0 31
67260: PUSH
67261: LD_VAR 0 32
67265: PUSH
67266: LD_VAR 0 33
67270: PUSH
67271: LD_VAR 0 34
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: PUSH
67284: LD_VAR 0 4
67288: PUSH
67289: LD_INT 1
67291: PLUS
67292: ARRAY
67293: ST_TO_ADDR
67294: GO 67779
67296: LD_INT 16
67298: DOUBLE
67299: EQUAL
67300: IFTRUE 67358
67302: LD_INT 17
67304: DOUBLE
67305: EQUAL
67306: IFTRUE 67358
67308: LD_INT 18
67310: DOUBLE
67311: EQUAL
67312: IFTRUE 67358
67314: LD_INT 19
67316: DOUBLE
67317: EQUAL
67318: IFTRUE 67358
67320: LD_INT 22
67322: DOUBLE
67323: EQUAL
67324: IFTRUE 67358
67326: LD_INT 20
67328: DOUBLE
67329: EQUAL
67330: IFTRUE 67358
67332: LD_INT 21
67334: DOUBLE
67335: EQUAL
67336: IFTRUE 67358
67338: LD_INT 23
67340: DOUBLE
67341: EQUAL
67342: IFTRUE 67358
67344: LD_INT 24
67346: DOUBLE
67347: EQUAL
67348: IFTRUE 67358
67350: LD_INT 25
67352: DOUBLE
67353: EQUAL
67354: IFTRUE 67358
67356: GO 67414
67358: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67359: LD_ADDR_VAR 0 9
67363: PUSH
67364: LD_VAR 0 35
67368: PUSH
67369: LD_VAR 0 36
67373: PUSH
67374: LD_VAR 0 37
67378: PUSH
67379: LD_VAR 0 38
67383: PUSH
67384: LD_VAR 0 39
67388: PUSH
67389: LD_VAR 0 40
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: PUSH
67402: LD_VAR 0 4
67406: PUSH
67407: LD_INT 1
67409: PLUS
67410: ARRAY
67411: ST_TO_ADDR
67412: GO 67779
67414: LD_INT 6
67416: DOUBLE
67417: EQUAL
67418: IFTRUE 67470
67420: LD_INT 7
67422: DOUBLE
67423: EQUAL
67424: IFTRUE 67470
67426: LD_INT 8
67428: DOUBLE
67429: EQUAL
67430: IFTRUE 67470
67432: LD_INT 13
67434: DOUBLE
67435: EQUAL
67436: IFTRUE 67470
67438: LD_INT 12
67440: DOUBLE
67441: EQUAL
67442: IFTRUE 67470
67444: LD_INT 15
67446: DOUBLE
67447: EQUAL
67448: IFTRUE 67470
67450: LD_INT 11
67452: DOUBLE
67453: EQUAL
67454: IFTRUE 67470
67456: LD_INT 14
67458: DOUBLE
67459: EQUAL
67460: IFTRUE 67470
67462: LD_INT 10
67464: DOUBLE
67465: EQUAL
67466: IFTRUE 67470
67468: GO 67526
67470: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67471: LD_ADDR_VAR 0 9
67475: PUSH
67476: LD_VAR 0 41
67480: PUSH
67481: LD_VAR 0 42
67485: PUSH
67486: LD_VAR 0 43
67490: PUSH
67491: LD_VAR 0 44
67495: PUSH
67496: LD_VAR 0 45
67500: PUSH
67501: LD_VAR 0 46
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: LIST
67510: LIST
67511: LIST
67512: LIST
67513: PUSH
67514: LD_VAR 0 4
67518: PUSH
67519: LD_INT 1
67521: PLUS
67522: ARRAY
67523: ST_TO_ADDR
67524: GO 67779
67526: LD_INT 36
67528: DOUBLE
67529: EQUAL
67530: IFTRUE 67534
67532: GO 67590
67534: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67535: LD_ADDR_VAR 0 9
67539: PUSH
67540: LD_VAR 0 47
67544: PUSH
67545: LD_VAR 0 48
67549: PUSH
67550: LD_VAR 0 49
67554: PUSH
67555: LD_VAR 0 50
67559: PUSH
67560: LD_VAR 0 51
67564: PUSH
67565: LD_VAR 0 52
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: LIST
67574: LIST
67575: LIST
67576: LIST
67577: PUSH
67578: LD_VAR 0 4
67582: PUSH
67583: LD_INT 1
67585: PLUS
67586: ARRAY
67587: ST_TO_ADDR
67588: GO 67779
67590: LD_INT 4
67592: DOUBLE
67593: EQUAL
67594: IFTRUE 67616
67596: LD_INT 5
67598: DOUBLE
67599: EQUAL
67600: IFTRUE 67616
67602: LD_INT 34
67604: DOUBLE
67605: EQUAL
67606: IFTRUE 67616
67608: LD_INT 37
67610: DOUBLE
67611: EQUAL
67612: IFTRUE 67616
67614: GO 67672
67616: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67617: LD_ADDR_VAR 0 9
67621: PUSH
67622: LD_VAR 0 53
67626: PUSH
67627: LD_VAR 0 54
67631: PUSH
67632: LD_VAR 0 55
67636: PUSH
67637: LD_VAR 0 56
67641: PUSH
67642: LD_VAR 0 57
67646: PUSH
67647: LD_VAR 0 58
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: LIST
67656: LIST
67657: LIST
67658: LIST
67659: PUSH
67660: LD_VAR 0 4
67664: PUSH
67665: LD_INT 1
67667: PLUS
67668: ARRAY
67669: ST_TO_ADDR
67670: GO 67779
67672: LD_INT 31
67674: DOUBLE
67675: EQUAL
67676: IFTRUE 67722
67678: LD_INT 32
67680: DOUBLE
67681: EQUAL
67682: IFTRUE 67722
67684: LD_INT 33
67686: DOUBLE
67687: EQUAL
67688: IFTRUE 67722
67690: LD_INT 27
67692: DOUBLE
67693: EQUAL
67694: IFTRUE 67722
67696: LD_INT 26
67698: DOUBLE
67699: EQUAL
67700: IFTRUE 67722
67702: LD_INT 28
67704: DOUBLE
67705: EQUAL
67706: IFTRUE 67722
67708: LD_INT 29
67710: DOUBLE
67711: EQUAL
67712: IFTRUE 67722
67714: LD_INT 30
67716: DOUBLE
67717: EQUAL
67718: IFTRUE 67722
67720: GO 67778
67722: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67723: LD_ADDR_VAR 0 9
67727: PUSH
67728: LD_VAR 0 59
67732: PUSH
67733: LD_VAR 0 60
67737: PUSH
67738: LD_VAR 0 61
67742: PUSH
67743: LD_VAR 0 62
67747: PUSH
67748: LD_VAR 0 63
67752: PUSH
67753: LD_VAR 0 64
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: LIST
67762: LIST
67763: LIST
67764: LIST
67765: PUSH
67766: LD_VAR 0 4
67770: PUSH
67771: LD_INT 1
67773: PLUS
67774: ARRAY
67775: ST_TO_ADDR
67776: GO 67779
67778: POP
// temp_list2 = [ ] ;
67779: LD_ADDR_VAR 0 10
67783: PUSH
67784: EMPTY
67785: ST_TO_ADDR
// for i in temp_list do
67786: LD_ADDR_VAR 0 8
67790: PUSH
67791: LD_VAR 0 9
67795: PUSH
67796: FOR_IN
67797: IFFALSE 67849
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67799: LD_ADDR_VAR 0 10
67803: PUSH
67804: LD_VAR 0 10
67808: PUSH
67809: LD_VAR 0 8
67813: PUSH
67814: LD_INT 1
67816: ARRAY
67817: PUSH
67818: LD_VAR 0 2
67822: PLUS
67823: PUSH
67824: LD_VAR 0 8
67828: PUSH
67829: LD_INT 2
67831: ARRAY
67832: PUSH
67833: LD_VAR 0 3
67837: PLUS
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: PUSH
67843: EMPTY
67844: LIST
67845: ADD
67846: ST_TO_ADDR
67847: GO 67796
67849: POP
67850: POP
// result = temp_list2 ;
67851: LD_ADDR_VAR 0 7
67855: PUSH
67856: LD_VAR 0 10
67860: ST_TO_ADDR
// end ;
67861: LD_VAR 0 7
67865: RET
// export function EnemyInRange ( unit , dist ) ; begin
67866: LD_INT 0
67868: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67869: LD_ADDR_VAR 0 3
67873: PUSH
67874: LD_VAR 0 1
67878: PPUSH
67879: CALL_OW 255
67883: PPUSH
67884: LD_VAR 0 1
67888: PPUSH
67889: CALL_OW 250
67893: PPUSH
67894: LD_VAR 0 1
67898: PPUSH
67899: CALL_OW 251
67903: PPUSH
67904: LD_VAR 0 2
67908: PPUSH
67909: CALL 41262 0 4
67913: PUSH
67914: LD_INT 4
67916: ARRAY
67917: ST_TO_ADDR
// end ;
67918: LD_VAR 0 3
67922: RET
// export function PlayerSeeMe ( unit ) ; begin
67923: LD_INT 0
67925: PPUSH
// result := See ( your_side , unit ) ;
67926: LD_ADDR_VAR 0 2
67930: PUSH
67931: LD_OWVAR 2
67935: PPUSH
67936: LD_VAR 0 1
67940: PPUSH
67941: CALL_OW 292
67945: ST_TO_ADDR
// end ;
67946: LD_VAR 0 2
67950: RET
// export function ReverseDir ( unit ) ; begin
67951: LD_INT 0
67953: PPUSH
// if not unit then
67954: LD_VAR 0 1
67958: NOT
67959: IFFALSE 67963
// exit ;
67961: GO 67986
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67963: LD_ADDR_VAR 0 2
67967: PUSH
67968: LD_VAR 0 1
67972: PPUSH
67973: CALL_OW 254
67977: PUSH
67978: LD_INT 3
67980: PLUS
67981: PUSH
67982: LD_INT 6
67984: MOD
67985: ST_TO_ADDR
// end ;
67986: LD_VAR 0 2
67990: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
67991: LD_INT 0
67993: PPUSH
67994: PPUSH
67995: PPUSH
67996: PPUSH
67997: PPUSH
// if not hexes then
67998: LD_VAR 0 2
68002: NOT
68003: IFFALSE 68007
// exit ;
68005: GO 68155
// dist := 9999 ;
68007: LD_ADDR_VAR 0 5
68011: PUSH
68012: LD_INT 9999
68014: ST_TO_ADDR
// for i = 1 to hexes do
68015: LD_ADDR_VAR 0 4
68019: PUSH
68020: DOUBLE
68021: LD_INT 1
68023: DEC
68024: ST_TO_ADDR
68025: LD_VAR 0 2
68029: PUSH
68030: FOR_TO
68031: IFFALSE 68143
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
68033: LD_VAR 0 1
68037: PPUSH
68038: LD_VAR 0 2
68042: PUSH
68043: LD_VAR 0 4
68047: ARRAY
68048: PUSH
68049: LD_INT 1
68051: ARRAY
68052: PPUSH
68053: LD_VAR 0 2
68057: PUSH
68058: LD_VAR 0 4
68062: ARRAY
68063: PUSH
68064: LD_INT 2
68066: ARRAY
68067: PPUSH
68068: CALL_OW 297
68072: PUSH
68073: LD_VAR 0 5
68077: LESS
68078: IFFALSE 68141
// begin hex := hexes [ i ] ;
68080: LD_ADDR_VAR 0 7
68084: PUSH
68085: LD_VAR 0 2
68089: PUSH
68090: LD_VAR 0 4
68094: ARRAY
68095: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68096: LD_ADDR_VAR 0 5
68100: PUSH
68101: LD_VAR 0 1
68105: PPUSH
68106: LD_VAR 0 2
68110: PUSH
68111: LD_VAR 0 4
68115: ARRAY
68116: PUSH
68117: LD_INT 1
68119: ARRAY
68120: PPUSH
68121: LD_VAR 0 2
68125: PUSH
68126: LD_VAR 0 4
68130: ARRAY
68131: PUSH
68132: LD_INT 2
68134: ARRAY
68135: PPUSH
68136: CALL_OW 297
68140: ST_TO_ADDR
// end ; end ;
68141: GO 68030
68143: POP
68144: POP
// result := hex ;
68145: LD_ADDR_VAR 0 3
68149: PUSH
68150: LD_VAR 0 7
68154: ST_TO_ADDR
// end ;
68155: LD_VAR 0 3
68159: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68160: LD_INT 0
68162: PPUSH
68163: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68164: LD_VAR 0 1
68168: NOT
68169: PUSH
68170: LD_VAR 0 1
68174: PUSH
68175: LD_INT 21
68177: PUSH
68178: LD_INT 2
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 23
68187: PUSH
68188: LD_INT 2
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PPUSH
68199: CALL_OW 69
68203: IN
68204: NOT
68205: OR
68206: IFFALSE 68210
// exit ;
68208: GO 68257
// for i = 1 to 3 do
68210: LD_ADDR_VAR 0 3
68214: PUSH
68215: DOUBLE
68216: LD_INT 1
68218: DEC
68219: ST_TO_ADDR
68220: LD_INT 3
68222: PUSH
68223: FOR_TO
68224: IFFALSE 68255
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68226: LD_VAR 0 1
68230: PPUSH
68231: CALL_OW 250
68235: PPUSH
68236: LD_VAR 0 1
68240: PPUSH
68241: CALL_OW 251
68245: PPUSH
68246: LD_INT 1
68248: PPUSH
68249: CALL_OW 453
68253: GO 68223
68255: POP
68256: POP
// end ;
68257: LD_VAR 0 2
68261: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68262: LD_INT 0
68264: PPUSH
68265: PPUSH
68266: PPUSH
68267: PPUSH
68268: PPUSH
68269: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68270: LD_VAR 0 1
68274: NOT
68275: PUSH
68276: LD_VAR 0 2
68280: NOT
68281: OR
68282: PUSH
68283: LD_VAR 0 1
68287: PPUSH
68288: CALL_OW 314
68292: OR
68293: IFFALSE 68297
// exit ;
68295: GO 68738
// x := GetX ( enemy_unit ) ;
68297: LD_ADDR_VAR 0 7
68301: PUSH
68302: LD_VAR 0 2
68306: PPUSH
68307: CALL_OW 250
68311: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68312: LD_ADDR_VAR 0 8
68316: PUSH
68317: LD_VAR 0 2
68321: PPUSH
68322: CALL_OW 251
68326: ST_TO_ADDR
// if not x or not y then
68327: LD_VAR 0 7
68331: NOT
68332: PUSH
68333: LD_VAR 0 8
68337: NOT
68338: OR
68339: IFFALSE 68343
// exit ;
68341: GO 68738
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68343: LD_ADDR_VAR 0 6
68347: PUSH
68348: LD_VAR 0 7
68352: PPUSH
68353: LD_INT 0
68355: PPUSH
68356: LD_INT 4
68358: PPUSH
68359: CALL_OW 272
68363: PUSH
68364: LD_VAR 0 8
68368: PPUSH
68369: LD_INT 0
68371: PPUSH
68372: LD_INT 4
68374: PPUSH
68375: CALL_OW 273
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: LD_VAR 0 7
68388: PPUSH
68389: LD_INT 1
68391: PPUSH
68392: LD_INT 4
68394: PPUSH
68395: CALL_OW 272
68399: PUSH
68400: LD_VAR 0 8
68404: PPUSH
68405: LD_INT 1
68407: PPUSH
68408: LD_INT 4
68410: PPUSH
68411: CALL_OW 273
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: LD_VAR 0 7
68424: PPUSH
68425: LD_INT 2
68427: PPUSH
68428: LD_INT 4
68430: PPUSH
68431: CALL_OW 272
68435: PUSH
68436: LD_VAR 0 8
68440: PPUSH
68441: LD_INT 2
68443: PPUSH
68444: LD_INT 4
68446: PPUSH
68447: CALL_OW 273
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: LD_VAR 0 7
68460: PPUSH
68461: LD_INT 3
68463: PPUSH
68464: LD_INT 4
68466: PPUSH
68467: CALL_OW 272
68471: PUSH
68472: LD_VAR 0 8
68476: PPUSH
68477: LD_INT 3
68479: PPUSH
68480: LD_INT 4
68482: PPUSH
68483: CALL_OW 273
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_VAR 0 7
68496: PPUSH
68497: LD_INT 4
68499: PPUSH
68500: LD_INT 4
68502: PPUSH
68503: CALL_OW 272
68507: PUSH
68508: LD_VAR 0 8
68512: PPUSH
68513: LD_INT 4
68515: PPUSH
68516: LD_INT 4
68518: PPUSH
68519: CALL_OW 273
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_VAR 0 7
68532: PPUSH
68533: LD_INT 5
68535: PPUSH
68536: LD_INT 4
68538: PPUSH
68539: CALL_OW 272
68543: PUSH
68544: LD_VAR 0 8
68548: PPUSH
68549: LD_INT 5
68551: PPUSH
68552: LD_INT 4
68554: PPUSH
68555: CALL_OW 273
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: ST_TO_ADDR
// for i = tmp downto 1 do
68572: LD_ADDR_VAR 0 4
68576: PUSH
68577: DOUBLE
68578: LD_VAR 0 6
68582: INC
68583: ST_TO_ADDR
68584: LD_INT 1
68586: PUSH
68587: FOR_DOWNTO
68588: IFFALSE 68689
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68590: LD_VAR 0 6
68594: PUSH
68595: LD_VAR 0 4
68599: ARRAY
68600: PUSH
68601: LD_INT 1
68603: ARRAY
68604: PPUSH
68605: LD_VAR 0 6
68609: PUSH
68610: LD_VAR 0 4
68614: ARRAY
68615: PUSH
68616: LD_INT 2
68618: ARRAY
68619: PPUSH
68620: CALL_OW 488
68624: NOT
68625: PUSH
68626: LD_VAR 0 6
68630: PUSH
68631: LD_VAR 0 4
68635: ARRAY
68636: PUSH
68637: LD_INT 1
68639: ARRAY
68640: PPUSH
68641: LD_VAR 0 6
68645: PUSH
68646: LD_VAR 0 4
68650: ARRAY
68651: PUSH
68652: LD_INT 2
68654: ARRAY
68655: PPUSH
68656: CALL_OW 428
68660: PUSH
68661: LD_INT 0
68663: NONEQUAL
68664: OR
68665: IFFALSE 68687
// tmp := Delete ( tmp , i ) ;
68667: LD_ADDR_VAR 0 6
68671: PUSH
68672: LD_VAR 0 6
68676: PPUSH
68677: LD_VAR 0 4
68681: PPUSH
68682: CALL_OW 3
68686: ST_TO_ADDR
68687: GO 68587
68689: POP
68690: POP
// j := GetClosestHex ( unit , tmp ) ;
68691: LD_ADDR_VAR 0 5
68695: PUSH
68696: LD_VAR 0 1
68700: PPUSH
68701: LD_VAR 0 6
68705: PPUSH
68706: CALL 67991 0 2
68710: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68711: LD_VAR 0 1
68715: PPUSH
68716: LD_VAR 0 5
68720: PUSH
68721: LD_INT 1
68723: ARRAY
68724: PPUSH
68725: LD_VAR 0 5
68729: PUSH
68730: LD_INT 2
68732: ARRAY
68733: PPUSH
68734: CALL_OW 111
// end ;
68738: LD_VAR 0 3
68742: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68743: LD_INT 0
68745: PPUSH
68746: PPUSH
68747: PPUSH
// uc_side = 0 ;
68748: LD_ADDR_OWVAR 20
68752: PUSH
68753: LD_INT 0
68755: ST_TO_ADDR
// uc_nation = 0 ;
68756: LD_ADDR_OWVAR 21
68760: PUSH
68761: LD_INT 0
68763: ST_TO_ADDR
// InitHc_All ( ) ;
68764: CALL_OW 584
// InitVc ;
68768: CALL_OW 20
// if mastodonts then
68772: LD_VAR 0 6
68776: IFFALSE 68843
// for i = 1 to mastodonts do
68778: LD_ADDR_VAR 0 11
68782: PUSH
68783: DOUBLE
68784: LD_INT 1
68786: DEC
68787: ST_TO_ADDR
68788: LD_VAR 0 6
68792: PUSH
68793: FOR_TO
68794: IFFALSE 68841
// begin vc_chassis := 31 ;
68796: LD_ADDR_OWVAR 37
68800: PUSH
68801: LD_INT 31
68803: ST_TO_ADDR
// vc_control := control_rider ;
68804: LD_ADDR_OWVAR 38
68808: PUSH
68809: LD_INT 4
68811: ST_TO_ADDR
// animal := CreateVehicle ;
68812: LD_ADDR_VAR 0 12
68816: PUSH
68817: CALL_OW 45
68821: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68822: LD_VAR 0 12
68826: PPUSH
68827: LD_VAR 0 8
68831: PPUSH
68832: LD_INT 0
68834: PPUSH
68835: CALL 71031 0 3
// end ;
68839: GO 68793
68841: POP
68842: POP
// if horses then
68843: LD_VAR 0 5
68847: IFFALSE 68914
// for i = 1 to horses do
68849: LD_ADDR_VAR 0 11
68853: PUSH
68854: DOUBLE
68855: LD_INT 1
68857: DEC
68858: ST_TO_ADDR
68859: LD_VAR 0 5
68863: PUSH
68864: FOR_TO
68865: IFFALSE 68912
// begin hc_class := 21 ;
68867: LD_ADDR_OWVAR 28
68871: PUSH
68872: LD_INT 21
68874: ST_TO_ADDR
// hc_gallery :=  ;
68875: LD_ADDR_OWVAR 33
68879: PUSH
68880: LD_STRING 
68882: ST_TO_ADDR
// animal := CreateHuman ;
68883: LD_ADDR_VAR 0 12
68887: PUSH
68888: CALL_OW 44
68892: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68893: LD_VAR 0 12
68897: PPUSH
68898: LD_VAR 0 8
68902: PPUSH
68903: LD_INT 0
68905: PPUSH
68906: CALL 71031 0 3
// end ;
68910: GO 68864
68912: POP
68913: POP
// if birds then
68914: LD_VAR 0 1
68918: IFFALSE 68985
// for i = 1 to birds do
68920: LD_ADDR_VAR 0 11
68924: PUSH
68925: DOUBLE
68926: LD_INT 1
68928: DEC
68929: ST_TO_ADDR
68930: LD_VAR 0 1
68934: PUSH
68935: FOR_TO
68936: IFFALSE 68983
// begin hc_class = 18 ;
68938: LD_ADDR_OWVAR 28
68942: PUSH
68943: LD_INT 18
68945: ST_TO_ADDR
// hc_gallery =  ;
68946: LD_ADDR_OWVAR 33
68950: PUSH
68951: LD_STRING 
68953: ST_TO_ADDR
// animal := CreateHuman ;
68954: LD_ADDR_VAR 0 12
68958: PUSH
68959: CALL_OW 44
68963: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68964: LD_VAR 0 12
68968: PPUSH
68969: LD_VAR 0 8
68973: PPUSH
68974: LD_INT 0
68976: PPUSH
68977: CALL 71031 0 3
// end ;
68981: GO 68935
68983: POP
68984: POP
// if tigers then
68985: LD_VAR 0 2
68989: IFFALSE 69073
// for i = 1 to tigers do
68991: LD_ADDR_VAR 0 11
68995: PUSH
68996: DOUBLE
68997: LD_INT 1
68999: DEC
69000: ST_TO_ADDR
69001: LD_VAR 0 2
69005: PUSH
69006: FOR_TO
69007: IFFALSE 69071
// begin hc_class = class_tiger ;
69009: LD_ADDR_OWVAR 28
69013: PUSH
69014: LD_INT 14
69016: ST_TO_ADDR
// hc_gallery =  ;
69017: LD_ADDR_OWVAR 33
69021: PUSH
69022: LD_STRING 
69024: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69025: LD_ADDR_OWVAR 35
69029: PUSH
69030: LD_INT 7
69032: NEG
69033: PPUSH
69034: LD_INT 7
69036: PPUSH
69037: CALL_OW 12
69041: ST_TO_ADDR
// animal := CreateHuman ;
69042: LD_ADDR_VAR 0 12
69046: PUSH
69047: CALL_OW 44
69051: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69052: LD_VAR 0 12
69056: PPUSH
69057: LD_VAR 0 8
69061: PPUSH
69062: LD_INT 0
69064: PPUSH
69065: CALL 71031 0 3
// end ;
69069: GO 69006
69071: POP
69072: POP
// if apemans then
69073: LD_VAR 0 3
69077: IFFALSE 69200
// for i = 1 to apemans do
69079: LD_ADDR_VAR 0 11
69083: PUSH
69084: DOUBLE
69085: LD_INT 1
69087: DEC
69088: ST_TO_ADDR
69089: LD_VAR 0 3
69093: PUSH
69094: FOR_TO
69095: IFFALSE 69198
// begin hc_class = class_apeman ;
69097: LD_ADDR_OWVAR 28
69101: PUSH
69102: LD_INT 12
69104: ST_TO_ADDR
// hc_gallery =  ;
69105: LD_ADDR_OWVAR 33
69109: PUSH
69110: LD_STRING 
69112: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69113: LD_ADDR_OWVAR 35
69117: PUSH
69118: LD_INT 2
69120: NEG
69121: PPUSH
69122: LD_INT 2
69124: PPUSH
69125: CALL_OW 12
69129: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69130: LD_ADDR_OWVAR 31
69134: PUSH
69135: LD_INT 1
69137: PPUSH
69138: LD_INT 3
69140: PPUSH
69141: CALL_OW 12
69145: PUSH
69146: LD_INT 1
69148: PPUSH
69149: LD_INT 3
69151: PPUSH
69152: CALL_OW 12
69156: PUSH
69157: LD_INT 0
69159: PUSH
69160: LD_INT 0
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: LIST
69167: LIST
69168: ST_TO_ADDR
// animal := CreateHuman ;
69169: LD_ADDR_VAR 0 12
69173: PUSH
69174: CALL_OW 44
69178: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69179: LD_VAR 0 12
69183: PPUSH
69184: LD_VAR 0 8
69188: PPUSH
69189: LD_INT 0
69191: PPUSH
69192: CALL 71031 0 3
// end ;
69196: GO 69094
69198: POP
69199: POP
// if enchidnas then
69200: LD_VAR 0 4
69204: IFFALSE 69271
// for i = 1 to enchidnas do
69206: LD_ADDR_VAR 0 11
69210: PUSH
69211: DOUBLE
69212: LD_INT 1
69214: DEC
69215: ST_TO_ADDR
69216: LD_VAR 0 4
69220: PUSH
69221: FOR_TO
69222: IFFALSE 69269
// begin hc_class = 13 ;
69224: LD_ADDR_OWVAR 28
69228: PUSH
69229: LD_INT 13
69231: ST_TO_ADDR
// hc_gallery =  ;
69232: LD_ADDR_OWVAR 33
69236: PUSH
69237: LD_STRING 
69239: ST_TO_ADDR
// animal := CreateHuman ;
69240: LD_ADDR_VAR 0 12
69244: PUSH
69245: CALL_OW 44
69249: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69250: LD_VAR 0 12
69254: PPUSH
69255: LD_VAR 0 8
69259: PPUSH
69260: LD_INT 0
69262: PPUSH
69263: CALL 71031 0 3
// end ;
69267: GO 69221
69269: POP
69270: POP
// if fishes then
69271: LD_VAR 0 7
69275: IFFALSE 69342
// for i = 1 to fishes do
69277: LD_ADDR_VAR 0 11
69281: PUSH
69282: DOUBLE
69283: LD_INT 1
69285: DEC
69286: ST_TO_ADDR
69287: LD_VAR 0 7
69291: PUSH
69292: FOR_TO
69293: IFFALSE 69340
// begin hc_class = 20 ;
69295: LD_ADDR_OWVAR 28
69299: PUSH
69300: LD_INT 20
69302: ST_TO_ADDR
// hc_gallery =  ;
69303: LD_ADDR_OWVAR 33
69307: PUSH
69308: LD_STRING 
69310: ST_TO_ADDR
// animal := CreateHuman ;
69311: LD_ADDR_VAR 0 12
69315: PUSH
69316: CALL_OW 44
69320: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69321: LD_VAR 0 12
69325: PPUSH
69326: LD_VAR 0 9
69330: PPUSH
69331: LD_INT 0
69333: PPUSH
69334: CALL 71031 0 3
// end ;
69338: GO 69292
69340: POP
69341: POP
// end ;
69342: LD_VAR 0 10
69346: RET
// export function WantHeal ( sci , unit ) ; begin
69347: LD_INT 0
69349: PPUSH
// if GetTaskList ( sci ) > 0 then
69350: LD_VAR 0 1
69354: PPUSH
69355: CALL_OW 437
69359: PUSH
69360: LD_INT 0
69362: GREATER
69363: IFFALSE 69433
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69365: LD_VAR 0 1
69369: PPUSH
69370: CALL_OW 437
69374: PUSH
69375: LD_INT 1
69377: ARRAY
69378: PUSH
69379: LD_INT 1
69381: ARRAY
69382: PUSH
69383: LD_STRING l
69385: EQUAL
69386: PUSH
69387: LD_VAR 0 1
69391: PPUSH
69392: CALL_OW 437
69396: PUSH
69397: LD_INT 1
69399: ARRAY
69400: PUSH
69401: LD_INT 4
69403: ARRAY
69404: PUSH
69405: LD_VAR 0 2
69409: EQUAL
69410: AND
69411: IFFALSE 69423
// result := true else
69413: LD_ADDR_VAR 0 3
69417: PUSH
69418: LD_INT 1
69420: ST_TO_ADDR
69421: GO 69431
// result := false ;
69423: LD_ADDR_VAR 0 3
69427: PUSH
69428: LD_INT 0
69430: ST_TO_ADDR
// end else
69431: GO 69441
// result := false ;
69433: LD_ADDR_VAR 0 3
69437: PUSH
69438: LD_INT 0
69440: ST_TO_ADDR
// end ;
69441: LD_VAR 0 3
69445: RET
// export function HealTarget ( sci ) ; begin
69446: LD_INT 0
69448: PPUSH
// if not sci then
69449: LD_VAR 0 1
69453: NOT
69454: IFFALSE 69458
// exit ;
69456: GO 69523
// result := 0 ;
69458: LD_ADDR_VAR 0 2
69462: PUSH
69463: LD_INT 0
69465: ST_TO_ADDR
// if GetTaskList ( sci ) then
69466: LD_VAR 0 1
69470: PPUSH
69471: CALL_OW 437
69475: IFFALSE 69523
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69477: LD_VAR 0 1
69481: PPUSH
69482: CALL_OW 437
69486: PUSH
69487: LD_INT 1
69489: ARRAY
69490: PUSH
69491: LD_INT 1
69493: ARRAY
69494: PUSH
69495: LD_STRING l
69497: EQUAL
69498: IFFALSE 69523
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69500: LD_ADDR_VAR 0 2
69504: PUSH
69505: LD_VAR 0 1
69509: PPUSH
69510: CALL_OW 437
69514: PUSH
69515: LD_INT 1
69517: ARRAY
69518: PUSH
69519: LD_INT 4
69521: ARRAY
69522: ST_TO_ADDR
// end ;
69523: LD_VAR 0 2
69527: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69528: LD_INT 0
69530: PPUSH
69531: PPUSH
69532: PPUSH
69533: PPUSH
// if not base_units then
69534: LD_VAR 0 1
69538: NOT
69539: IFFALSE 69543
// exit ;
69541: GO 69630
// result := false ;
69543: LD_ADDR_VAR 0 2
69547: PUSH
69548: LD_INT 0
69550: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69551: LD_ADDR_VAR 0 5
69555: PUSH
69556: LD_VAR 0 1
69560: PPUSH
69561: LD_INT 21
69563: PUSH
69564: LD_INT 3
69566: PUSH
69567: EMPTY
69568: LIST
69569: LIST
69570: PPUSH
69571: CALL_OW 72
69575: ST_TO_ADDR
// if not tmp then
69576: LD_VAR 0 5
69580: NOT
69581: IFFALSE 69585
// exit ;
69583: GO 69630
// for i in tmp do
69585: LD_ADDR_VAR 0 3
69589: PUSH
69590: LD_VAR 0 5
69594: PUSH
69595: FOR_IN
69596: IFFALSE 69628
// begin result := EnemyInRange ( i , 22 ) ;
69598: LD_ADDR_VAR 0 2
69602: PUSH
69603: LD_VAR 0 3
69607: PPUSH
69608: LD_INT 22
69610: PPUSH
69611: CALL 67866 0 2
69615: ST_TO_ADDR
// if result then
69616: LD_VAR 0 2
69620: IFFALSE 69626
// exit ;
69622: POP
69623: POP
69624: GO 69630
// end ;
69626: GO 69595
69628: POP
69629: POP
// end ;
69630: LD_VAR 0 2
69634: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
69635: LD_INT 0
69637: PPUSH
69638: PPUSH
// if not units then
69639: LD_VAR 0 1
69643: NOT
69644: IFFALSE 69648
// exit ;
69646: GO 69718
// result := [ ] ;
69648: LD_ADDR_VAR 0 3
69652: PUSH
69653: EMPTY
69654: ST_TO_ADDR
// for i in units do
69655: LD_ADDR_VAR 0 4
69659: PUSH
69660: LD_VAR 0 1
69664: PUSH
69665: FOR_IN
69666: IFFALSE 69716
// if GetTag ( i ) = tag then
69668: LD_VAR 0 4
69672: PPUSH
69673: CALL_OW 110
69677: PUSH
69678: LD_VAR 0 2
69682: EQUAL
69683: IFFALSE 69714
// result := Replace ( result , result + 1 , i ) ;
69685: LD_ADDR_VAR 0 3
69689: PUSH
69690: LD_VAR 0 3
69694: PPUSH
69695: LD_VAR 0 3
69699: PUSH
69700: LD_INT 1
69702: PLUS
69703: PPUSH
69704: LD_VAR 0 4
69708: PPUSH
69709: CALL_OW 1
69713: ST_TO_ADDR
69714: GO 69665
69716: POP
69717: POP
// end ;
69718: LD_VAR 0 3
69722: RET
// export function IsDriver ( un ) ; begin
69723: LD_INT 0
69725: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69726: LD_ADDR_VAR 0 2
69730: PUSH
69731: LD_VAR 0 1
69735: PUSH
69736: LD_INT 55
69738: PUSH
69739: EMPTY
69740: LIST
69741: PPUSH
69742: CALL_OW 69
69746: IN
69747: ST_TO_ADDR
// end ;
69748: LD_VAR 0 2
69752: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69753: LD_INT 0
69755: PPUSH
69756: PPUSH
// list := [ ] ;
69757: LD_ADDR_VAR 0 5
69761: PUSH
69762: EMPTY
69763: ST_TO_ADDR
// case d of 0 :
69764: LD_VAR 0 3
69768: PUSH
69769: LD_INT 0
69771: DOUBLE
69772: EQUAL
69773: IFTRUE 69777
69775: GO 69910
69777: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69778: LD_ADDR_VAR 0 5
69782: PUSH
69783: LD_VAR 0 1
69787: PUSH
69788: LD_INT 4
69790: MINUS
69791: PUSH
69792: LD_VAR 0 2
69796: PUSH
69797: LD_INT 4
69799: MINUS
69800: PUSH
69801: LD_INT 2
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: LIST
69808: PUSH
69809: LD_VAR 0 1
69813: PUSH
69814: LD_INT 3
69816: MINUS
69817: PUSH
69818: LD_VAR 0 2
69822: PUSH
69823: LD_INT 1
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: LIST
69830: PUSH
69831: LD_VAR 0 1
69835: PUSH
69836: LD_INT 4
69838: PLUS
69839: PUSH
69840: LD_VAR 0 2
69844: PUSH
69845: LD_INT 4
69847: PUSH
69848: EMPTY
69849: LIST
69850: LIST
69851: LIST
69852: PUSH
69853: LD_VAR 0 1
69857: PUSH
69858: LD_INT 3
69860: PLUS
69861: PUSH
69862: LD_VAR 0 2
69866: PUSH
69867: LD_INT 3
69869: PLUS
69870: PUSH
69871: LD_INT 5
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: LIST
69878: PUSH
69879: LD_VAR 0 1
69883: PUSH
69884: LD_VAR 0 2
69888: PUSH
69889: LD_INT 4
69891: PLUS
69892: PUSH
69893: LD_INT 0
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: LIST
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: LIST
69905: LIST
69906: LIST
69907: ST_TO_ADDR
// end ; 1 :
69908: GO 70608
69910: LD_INT 1
69912: DOUBLE
69913: EQUAL
69914: IFTRUE 69918
69916: GO 70051
69918: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69919: LD_ADDR_VAR 0 5
69923: PUSH
69924: LD_VAR 0 1
69928: PUSH
69929: LD_VAR 0 2
69933: PUSH
69934: LD_INT 4
69936: MINUS
69937: PUSH
69938: LD_INT 3
69940: PUSH
69941: EMPTY
69942: LIST
69943: LIST
69944: LIST
69945: PUSH
69946: LD_VAR 0 1
69950: PUSH
69951: LD_INT 3
69953: MINUS
69954: PUSH
69955: LD_VAR 0 2
69959: PUSH
69960: LD_INT 3
69962: MINUS
69963: PUSH
69964: LD_INT 2
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: LIST
69971: PUSH
69972: LD_VAR 0 1
69976: PUSH
69977: LD_INT 4
69979: MINUS
69980: PUSH
69981: LD_VAR 0 2
69985: PUSH
69986: LD_INT 1
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: LIST
69993: PUSH
69994: LD_VAR 0 1
69998: PUSH
69999: LD_VAR 0 2
70003: PUSH
70004: LD_INT 3
70006: PLUS
70007: PUSH
70008: LD_INT 0
70010: PUSH
70011: EMPTY
70012: LIST
70013: LIST
70014: LIST
70015: PUSH
70016: LD_VAR 0 1
70020: PUSH
70021: LD_INT 4
70023: PLUS
70024: PUSH
70025: LD_VAR 0 2
70029: PUSH
70030: LD_INT 4
70032: PLUS
70033: PUSH
70034: LD_INT 5
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: LIST
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: ST_TO_ADDR
// end ; 2 :
70049: GO 70608
70051: LD_INT 2
70053: DOUBLE
70054: EQUAL
70055: IFTRUE 70059
70057: GO 70188
70059: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70060: LD_ADDR_VAR 0 5
70064: PUSH
70065: LD_VAR 0 1
70069: PUSH
70070: LD_VAR 0 2
70074: PUSH
70075: LD_INT 3
70077: MINUS
70078: PUSH
70079: LD_INT 3
70081: PUSH
70082: EMPTY
70083: LIST
70084: LIST
70085: LIST
70086: PUSH
70087: LD_VAR 0 1
70091: PUSH
70092: LD_INT 4
70094: PLUS
70095: PUSH
70096: LD_VAR 0 2
70100: PUSH
70101: LD_INT 4
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: LIST
70108: PUSH
70109: LD_VAR 0 1
70113: PUSH
70114: LD_VAR 0 2
70118: PUSH
70119: LD_INT 4
70121: PLUS
70122: PUSH
70123: LD_INT 0
70125: PUSH
70126: EMPTY
70127: LIST
70128: LIST
70129: LIST
70130: PUSH
70131: LD_VAR 0 1
70135: PUSH
70136: LD_INT 3
70138: MINUS
70139: PUSH
70140: LD_VAR 0 2
70144: PUSH
70145: LD_INT 1
70147: PUSH
70148: EMPTY
70149: LIST
70150: LIST
70151: LIST
70152: PUSH
70153: LD_VAR 0 1
70157: PUSH
70158: LD_INT 4
70160: MINUS
70161: PUSH
70162: LD_VAR 0 2
70166: PUSH
70167: LD_INT 4
70169: MINUS
70170: PUSH
70171: LD_INT 2
70173: PUSH
70174: EMPTY
70175: LIST
70176: LIST
70177: LIST
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: LIST
70183: LIST
70184: LIST
70185: ST_TO_ADDR
// end ; 3 :
70186: GO 70608
70188: LD_INT 3
70190: DOUBLE
70191: EQUAL
70192: IFTRUE 70196
70194: GO 70329
70196: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70197: LD_ADDR_VAR 0 5
70201: PUSH
70202: LD_VAR 0 1
70206: PUSH
70207: LD_INT 3
70209: PLUS
70210: PUSH
70211: LD_VAR 0 2
70215: PUSH
70216: LD_INT 4
70218: PUSH
70219: EMPTY
70220: LIST
70221: LIST
70222: LIST
70223: PUSH
70224: LD_VAR 0 1
70228: PUSH
70229: LD_INT 4
70231: PLUS
70232: PUSH
70233: LD_VAR 0 2
70237: PUSH
70238: LD_INT 4
70240: PLUS
70241: PUSH
70242: LD_INT 5
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: LIST
70249: PUSH
70250: LD_VAR 0 1
70254: PUSH
70255: LD_INT 4
70257: MINUS
70258: PUSH
70259: LD_VAR 0 2
70263: PUSH
70264: LD_INT 1
70266: PUSH
70267: EMPTY
70268: LIST
70269: LIST
70270: LIST
70271: PUSH
70272: LD_VAR 0 1
70276: PUSH
70277: LD_VAR 0 2
70281: PUSH
70282: LD_INT 4
70284: MINUS
70285: PUSH
70286: LD_INT 3
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: LIST
70293: PUSH
70294: LD_VAR 0 1
70298: PUSH
70299: LD_INT 3
70301: MINUS
70302: PUSH
70303: LD_VAR 0 2
70307: PUSH
70308: LD_INT 3
70310: MINUS
70311: PUSH
70312: LD_INT 2
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: LIST
70319: PUSH
70320: EMPTY
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: ST_TO_ADDR
// end ; 4 :
70327: GO 70608
70329: LD_INT 4
70331: DOUBLE
70332: EQUAL
70333: IFTRUE 70337
70335: GO 70470
70337: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70338: LD_ADDR_VAR 0 5
70342: PUSH
70343: LD_VAR 0 1
70347: PUSH
70348: LD_VAR 0 2
70352: PUSH
70353: LD_INT 4
70355: PLUS
70356: PUSH
70357: LD_INT 0
70359: PUSH
70360: EMPTY
70361: LIST
70362: LIST
70363: LIST
70364: PUSH
70365: LD_VAR 0 1
70369: PUSH
70370: LD_INT 3
70372: PLUS
70373: PUSH
70374: LD_VAR 0 2
70378: PUSH
70379: LD_INT 3
70381: PLUS
70382: PUSH
70383: LD_INT 5
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: LIST
70390: PUSH
70391: LD_VAR 0 1
70395: PUSH
70396: LD_INT 4
70398: PLUS
70399: PUSH
70400: LD_VAR 0 2
70404: PUSH
70405: LD_INT 4
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: LIST
70412: PUSH
70413: LD_VAR 0 1
70417: PUSH
70418: LD_VAR 0 2
70422: PUSH
70423: LD_INT 3
70425: MINUS
70426: PUSH
70427: LD_INT 3
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: LIST
70434: PUSH
70435: LD_VAR 0 1
70439: PUSH
70440: LD_INT 4
70442: MINUS
70443: PUSH
70444: LD_VAR 0 2
70448: PUSH
70449: LD_INT 4
70451: MINUS
70452: PUSH
70453: LD_INT 2
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: LIST
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: LIST
70467: ST_TO_ADDR
// end ; 5 :
70468: GO 70608
70470: LD_INT 5
70472: DOUBLE
70473: EQUAL
70474: IFTRUE 70478
70476: GO 70607
70478: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70479: LD_ADDR_VAR 0 5
70483: PUSH
70484: LD_VAR 0 1
70488: PUSH
70489: LD_INT 4
70491: MINUS
70492: PUSH
70493: LD_VAR 0 2
70497: PUSH
70498: LD_INT 1
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: LIST
70505: PUSH
70506: LD_VAR 0 1
70510: PUSH
70511: LD_VAR 0 2
70515: PUSH
70516: LD_INT 4
70518: MINUS
70519: PUSH
70520: LD_INT 3
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: LIST
70527: PUSH
70528: LD_VAR 0 1
70532: PUSH
70533: LD_INT 4
70535: PLUS
70536: PUSH
70537: LD_VAR 0 2
70541: PUSH
70542: LD_INT 4
70544: PLUS
70545: PUSH
70546: LD_INT 5
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: LIST
70553: PUSH
70554: LD_VAR 0 1
70558: PUSH
70559: LD_INT 3
70561: PLUS
70562: PUSH
70563: LD_VAR 0 2
70567: PUSH
70568: LD_INT 4
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: LIST
70575: PUSH
70576: LD_VAR 0 1
70580: PUSH
70581: LD_VAR 0 2
70585: PUSH
70586: LD_INT 3
70588: PLUS
70589: PUSH
70590: LD_INT 0
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: LIST
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: ST_TO_ADDR
// end ; end ;
70605: GO 70608
70607: POP
// result := list ;
70608: LD_ADDR_VAR 0 4
70612: PUSH
70613: LD_VAR 0 5
70617: ST_TO_ADDR
// end ;
70618: LD_VAR 0 4
70622: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70623: LD_INT 0
70625: PPUSH
70626: PPUSH
70627: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70628: LD_VAR 0 1
70632: NOT
70633: PUSH
70634: LD_VAR 0 2
70638: PUSH
70639: LD_INT 1
70641: PUSH
70642: LD_INT 2
70644: PUSH
70645: LD_INT 3
70647: PUSH
70648: LD_INT 4
70650: PUSH
70651: EMPTY
70652: LIST
70653: LIST
70654: LIST
70655: LIST
70656: IN
70657: NOT
70658: OR
70659: IFFALSE 70663
// exit ;
70661: GO 70755
// tmp := [ ] ;
70663: LD_ADDR_VAR 0 5
70667: PUSH
70668: EMPTY
70669: ST_TO_ADDR
// for i in units do
70670: LD_ADDR_VAR 0 4
70674: PUSH
70675: LD_VAR 0 1
70679: PUSH
70680: FOR_IN
70681: IFFALSE 70724
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
70683: LD_ADDR_VAR 0 5
70687: PUSH
70688: LD_VAR 0 5
70692: PPUSH
70693: LD_VAR 0 5
70697: PUSH
70698: LD_INT 1
70700: PLUS
70701: PPUSH
70702: LD_VAR 0 4
70706: PPUSH
70707: LD_VAR 0 2
70711: PPUSH
70712: CALL_OW 259
70716: PPUSH
70717: CALL_OW 2
70721: ST_TO_ADDR
70722: GO 70680
70724: POP
70725: POP
// if not tmp then
70726: LD_VAR 0 5
70730: NOT
70731: IFFALSE 70735
// exit ;
70733: GO 70755
// result := SortListByListDesc ( units , tmp ) ;
70735: LD_ADDR_VAR 0 3
70739: PUSH
70740: LD_VAR 0 1
70744: PPUSH
70745: LD_VAR 0 5
70749: PPUSH
70750: CALL_OW 77
70754: ST_TO_ADDR
// end ;
70755: LD_VAR 0 3
70759: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70760: LD_INT 0
70762: PPUSH
70763: PPUSH
70764: PPUSH
// result := false ;
70765: LD_ADDR_VAR 0 3
70769: PUSH
70770: LD_INT 0
70772: ST_TO_ADDR
// x := GetX ( building ) ;
70773: LD_ADDR_VAR 0 4
70777: PUSH
70778: LD_VAR 0 2
70782: PPUSH
70783: CALL_OW 250
70787: ST_TO_ADDR
// y := GetY ( building ) ;
70788: LD_ADDR_VAR 0 5
70792: PUSH
70793: LD_VAR 0 2
70797: PPUSH
70798: CALL_OW 251
70802: ST_TO_ADDR
// if not building or not x or not y then
70803: LD_VAR 0 2
70807: NOT
70808: PUSH
70809: LD_VAR 0 4
70813: NOT
70814: OR
70815: PUSH
70816: LD_VAR 0 5
70820: NOT
70821: OR
70822: IFFALSE 70826
// exit ;
70824: GO 70918
// if GetTaskList ( unit ) then
70826: LD_VAR 0 1
70830: PPUSH
70831: CALL_OW 437
70835: IFFALSE 70918
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70837: LD_STRING e
70839: PUSH
70840: LD_VAR 0 1
70844: PPUSH
70845: CALL_OW 437
70849: PUSH
70850: LD_INT 1
70852: ARRAY
70853: PUSH
70854: LD_INT 1
70856: ARRAY
70857: EQUAL
70858: PUSH
70859: LD_VAR 0 4
70863: PUSH
70864: LD_VAR 0 1
70868: PPUSH
70869: CALL_OW 437
70873: PUSH
70874: LD_INT 1
70876: ARRAY
70877: PUSH
70878: LD_INT 2
70880: ARRAY
70881: EQUAL
70882: AND
70883: PUSH
70884: LD_VAR 0 5
70888: PUSH
70889: LD_VAR 0 1
70893: PPUSH
70894: CALL_OW 437
70898: PUSH
70899: LD_INT 1
70901: ARRAY
70902: PUSH
70903: LD_INT 3
70905: ARRAY
70906: EQUAL
70907: AND
70908: IFFALSE 70918
// result := true end ;
70910: LD_ADDR_VAR 0 3
70914: PUSH
70915: LD_INT 1
70917: ST_TO_ADDR
// end ;
70918: LD_VAR 0 3
70922: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70923: LD_INT 0
70925: PPUSH
// result := false ;
70926: LD_ADDR_VAR 0 4
70930: PUSH
70931: LD_INT 0
70933: ST_TO_ADDR
// if GetTaskList ( unit ) then
70934: LD_VAR 0 1
70938: PPUSH
70939: CALL_OW 437
70943: IFFALSE 71026
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70945: LD_STRING M
70947: PUSH
70948: LD_VAR 0 1
70952: PPUSH
70953: CALL_OW 437
70957: PUSH
70958: LD_INT 1
70960: ARRAY
70961: PUSH
70962: LD_INT 1
70964: ARRAY
70965: EQUAL
70966: PUSH
70967: LD_VAR 0 2
70971: PUSH
70972: LD_VAR 0 1
70976: PPUSH
70977: CALL_OW 437
70981: PUSH
70982: LD_INT 1
70984: ARRAY
70985: PUSH
70986: LD_INT 2
70988: ARRAY
70989: EQUAL
70990: AND
70991: PUSH
70992: LD_VAR 0 3
70996: PUSH
70997: LD_VAR 0 1
71001: PPUSH
71002: CALL_OW 437
71006: PUSH
71007: LD_INT 1
71009: ARRAY
71010: PUSH
71011: LD_INT 3
71013: ARRAY
71014: EQUAL
71015: AND
71016: IFFALSE 71026
// result := true ;
71018: LD_ADDR_VAR 0 4
71022: PUSH
71023: LD_INT 1
71025: ST_TO_ADDR
// end ; end ;
71026: LD_VAR 0 4
71030: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71031: LD_INT 0
71033: PPUSH
71034: PPUSH
71035: PPUSH
71036: PPUSH
// if not unit or not area then
71037: LD_VAR 0 1
71041: NOT
71042: PUSH
71043: LD_VAR 0 2
71047: NOT
71048: OR
71049: IFFALSE 71053
// exit ;
71051: GO 71217
// tmp := AreaToList ( area , i ) ;
71053: LD_ADDR_VAR 0 6
71057: PUSH
71058: LD_VAR 0 2
71062: PPUSH
71063: LD_VAR 0 5
71067: PPUSH
71068: CALL_OW 517
71072: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71073: LD_ADDR_VAR 0 5
71077: PUSH
71078: DOUBLE
71079: LD_INT 1
71081: DEC
71082: ST_TO_ADDR
71083: LD_VAR 0 6
71087: PUSH
71088: LD_INT 1
71090: ARRAY
71091: PUSH
71092: FOR_TO
71093: IFFALSE 71215
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71095: LD_ADDR_VAR 0 7
71099: PUSH
71100: LD_VAR 0 6
71104: PUSH
71105: LD_INT 1
71107: ARRAY
71108: PUSH
71109: LD_VAR 0 5
71113: ARRAY
71114: PUSH
71115: LD_VAR 0 6
71119: PUSH
71120: LD_INT 2
71122: ARRAY
71123: PUSH
71124: LD_VAR 0 5
71128: ARRAY
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71134: LD_VAR 0 7
71138: PUSH
71139: LD_INT 1
71141: ARRAY
71142: PPUSH
71143: LD_VAR 0 7
71147: PUSH
71148: LD_INT 2
71150: ARRAY
71151: PPUSH
71152: CALL_OW 428
71156: PUSH
71157: LD_INT 0
71159: EQUAL
71160: IFFALSE 71213
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71162: LD_VAR 0 1
71166: PPUSH
71167: LD_VAR 0 7
71171: PUSH
71172: LD_INT 1
71174: ARRAY
71175: PPUSH
71176: LD_VAR 0 7
71180: PUSH
71181: LD_INT 2
71183: ARRAY
71184: PPUSH
71185: LD_VAR 0 3
71189: PPUSH
71190: CALL_OW 48
// result := IsPlaced ( unit ) ;
71194: LD_ADDR_VAR 0 4
71198: PUSH
71199: LD_VAR 0 1
71203: PPUSH
71204: CALL_OW 305
71208: ST_TO_ADDR
// exit ;
71209: POP
71210: POP
71211: GO 71217
// end ; end ;
71213: GO 71092
71215: POP
71216: POP
// end ;
71217: LD_VAR 0 4
71221: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71222: LD_INT 0
71224: PPUSH
71225: PPUSH
71226: PPUSH
// if not side or side > 8 then
71227: LD_VAR 0 1
71231: NOT
71232: PUSH
71233: LD_VAR 0 1
71237: PUSH
71238: LD_INT 8
71240: GREATER
71241: OR
71242: IFFALSE 71246
// exit ;
71244: GO 71433
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71246: LD_ADDR_VAR 0 4
71250: PUSH
71251: LD_INT 22
71253: PUSH
71254: LD_VAR 0 1
71258: PUSH
71259: EMPTY
71260: LIST
71261: LIST
71262: PUSH
71263: LD_INT 21
71265: PUSH
71266: LD_INT 3
71268: PUSH
71269: EMPTY
71270: LIST
71271: LIST
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: PPUSH
71277: CALL_OW 69
71281: ST_TO_ADDR
// if not tmp then
71282: LD_VAR 0 4
71286: NOT
71287: IFFALSE 71291
// exit ;
71289: GO 71433
// enable_addtolog := true ;
71291: LD_ADDR_OWVAR 81
71295: PUSH
71296: LD_INT 1
71298: ST_TO_ADDR
// AddToLog ( [ ) ;
71299: LD_STRING [
71301: PPUSH
71302: CALL_OW 561
// for i in tmp do
71306: LD_ADDR_VAR 0 3
71310: PUSH
71311: LD_VAR 0 4
71315: PUSH
71316: FOR_IN
71317: IFFALSE 71424
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71319: LD_STRING [
71321: PUSH
71322: LD_VAR 0 3
71326: PPUSH
71327: CALL_OW 266
71331: STR
71332: PUSH
71333: LD_STRING , 
71335: STR
71336: PUSH
71337: LD_VAR 0 3
71341: PPUSH
71342: CALL_OW 250
71346: STR
71347: PUSH
71348: LD_STRING , 
71350: STR
71351: PUSH
71352: LD_VAR 0 3
71356: PPUSH
71357: CALL_OW 251
71361: STR
71362: PUSH
71363: LD_STRING , 
71365: STR
71366: PUSH
71367: LD_VAR 0 3
71371: PPUSH
71372: CALL_OW 254
71376: STR
71377: PUSH
71378: LD_STRING , 
71380: STR
71381: PUSH
71382: LD_VAR 0 3
71386: PPUSH
71387: LD_INT 1
71389: PPUSH
71390: CALL_OW 268
71394: STR
71395: PUSH
71396: LD_STRING , 
71398: STR
71399: PUSH
71400: LD_VAR 0 3
71404: PPUSH
71405: LD_INT 2
71407: PPUSH
71408: CALL_OW 268
71412: STR
71413: PUSH
71414: LD_STRING ],
71416: STR
71417: PPUSH
71418: CALL_OW 561
// end ;
71422: GO 71316
71424: POP
71425: POP
// AddToLog ( ]; ) ;
71426: LD_STRING ];
71428: PPUSH
71429: CALL_OW 561
// end ;
71433: LD_VAR 0 2
71437: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71438: LD_INT 0
71440: PPUSH
71441: PPUSH
71442: PPUSH
71443: PPUSH
71444: PPUSH
// if not area or not rate or not max then
71445: LD_VAR 0 1
71449: NOT
71450: PUSH
71451: LD_VAR 0 2
71455: NOT
71456: OR
71457: PUSH
71458: LD_VAR 0 4
71462: NOT
71463: OR
71464: IFFALSE 71468
// exit ;
71466: GO 71660
// while 1 do
71468: LD_INT 1
71470: IFFALSE 71660
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71472: LD_ADDR_VAR 0 9
71476: PUSH
71477: LD_VAR 0 1
71481: PPUSH
71482: LD_INT 1
71484: PPUSH
71485: CALL_OW 287
71489: PUSH
71490: LD_INT 10
71492: MUL
71493: ST_TO_ADDR
// r := rate / 10 ;
71494: LD_ADDR_VAR 0 7
71498: PUSH
71499: LD_VAR 0 2
71503: PUSH
71504: LD_INT 10
71506: DIVREAL
71507: ST_TO_ADDR
// time := 1 1$00 ;
71508: LD_ADDR_VAR 0 8
71512: PUSH
71513: LD_INT 2100
71515: ST_TO_ADDR
// if amount < min then
71516: LD_VAR 0 9
71520: PUSH
71521: LD_VAR 0 3
71525: LESS
71526: IFFALSE 71544
// r := r * 2 else
71528: LD_ADDR_VAR 0 7
71532: PUSH
71533: LD_VAR 0 7
71537: PUSH
71538: LD_INT 2
71540: MUL
71541: ST_TO_ADDR
71542: GO 71570
// if amount > max then
71544: LD_VAR 0 9
71548: PUSH
71549: LD_VAR 0 4
71553: GREATER
71554: IFFALSE 71570
// r := r / 2 ;
71556: LD_ADDR_VAR 0 7
71560: PUSH
71561: LD_VAR 0 7
71565: PUSH
71566: LD_INT 2
71568: DIVREAL
71569: ST_TO_ADDR
// time := time / r ;
71570: LD_ADDR_VAR 0 8
71574: PUSH
71575: LD_VAR 0 8
71579: PUSH
71580: LD_VAR 0 7
71584: DIVREAL
71585: ST_TO_ADDR
// if time < 0 then
71586: LD_VAR 0 8
71590: PUSH
71591: LD_INT 0
71593: LESS
71594: IFFALSE 71611
// time := time * - 1 ;
71596: LD_ADDR_VAR 0 8
71600: PUSH
71601: LD_VAR 0 8
71605: PUSH
71606: LD_INT 1
71608: NEG
71609: MUL
71610: ST_TO_ADDR
// wait ( time ) ;
71611: LD_VAR 0 8
71615: PPUSH
71616: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
71620: LD_INT 35
71622: PPUSH
71623: LD_INT 875
71625: PPUSH
71626: CALL_OW 12
71630: PPUSH
71631: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71635: LD_INT 1
71637: PPUSH
71638: LD_INT 5
71640: PPUSH
71641: CALL_OW 12
71645: PPUSH
71646: LD_VAR 0 1
71650: PPUSH
71651: LD_INT 1
71653: PPUSH
71654: CALL_OW 55
// end ;
71658: GO 71468
// end ;
71660: LD_VAR 0 5
71664: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71665: LD_INT 0
71667: PPUSH
71668: PPUSH
71669: PPUSH
71670: PPUSH
71671: PPUSH
71672: PPUSH
71673: PPUSH
71674: PPUSH
// if not turrets or not factories then
71675: LD_VAR 0 1
71679: NOT
71680: PUSH
71681: LD_VAR 0 2
71685: NOT
71686: OR
71687: IFFALSE 71691
// exit ;
71689: GO 71998
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71691: LD_ADDR_VAR 0 10
71695: PUSH
71696: LD_INT 5
71698: PUSH
71699: LD_INT 6
71701: PUSH
71702: EMPTY
71703: LIST
71704: LIST
71705: PUSH
71706: LD_INT 2
71708: PUSH
71709: LD_INT 4
71711: PUSH
71712: EMPTY
71713: LIST
71714: LIST
71715: PUSH
71716: LD_INT 3
71718: PUSH
71719: LD_INT 5
71721: PUSH
71722: EMPTY
71723: LIST
71724: LIST
71725: PUSH
71726: EMPTY
71727: LIST
71728: LIST
71729: LIST
71730: PUSH
71731: LD_INT 24
71733: PUSH
71734: LD_INT 25
71736: PUSH
71737: EMPTY
71738: LIST
71739: LIST
71740: PUSH
71741: LD_INT 23
71743: PUSH
71744: LD_INT 27
71746: PUSH
71747: EMPTY
71748: LIST
71749: LIST
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: PUSH
71755: LD_INT 42
71757: PUSH
71758: LD_INT 43
71760: PUSH
71761: EMPTY
71762: LIST
71763: LIST
71764: PUSH
71765: LD_INT 44
71767: PUSH
71768: LD_INT 46
71770: PUSH
71771: EMPTY
71772: LIST
71773: LIST
71774: PUSH
71775: LD_INT 45
71777: PUSH
71778: LD_INT 47
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: PUSH
71785: EMPTY
71786: LIST
71787: LIST
71788: LIST
71789: PUSH
71790: EMPTY
71791: LIST
71792: LIST
71793: LIST
71794: ST_TO_ADDR
// result := [ ] ;
71795: LD_ADDR_VAR 0 3
71799: PUSH
71800: EMPTY
71801: ST_TO_ADDR
// for i in turrets do
71802: LD_ADDR_VAR 0 4
71806: PUSH
71807: LD_VAR 0 1
71811: PUSH
71812: FOR_IN
71813: IFFALSE 71996
// begin nat := GetNation ( i ) ;
71815: LD_ADDR_VAR 0 7
71819: PUSH
71820: LD_VAR 0 4
71824: PPUSH
71825: CALL_OW 248
71829: ST_TO_ADDR
// weapon := 0 ;
71830: LD_ADDR_VAR 0 8
71834: PUSH
71835: LD_INT 0
71837: ST_TO_ADDR
// if not nat then
71838: LD_VAR 0 7
71842: NOT
71843: IFFALSE 71847
// continue ;
71845: GO 71812
// for j in list [ nat ] do
71847: LD_ADDR_VAR 0 5
71851: PUSH
71852: LD_VAR 0 10
71856: PUSH
71857: LD_VAR 0 7
71861: ARRAY
71862: PUSH
71863: FOR_IN
71864: IFFALSE 71905
// if GetBWeapon ( i ) = j [ 1 ] then
71866: LD_VAR 0 4
71870: PPUSH
71871: CALL_OW 269
71875: PUSH
71876: LD_VAR 0 5
71880: PUSH
71881: LD_INT 1
71883: ARRAY
71884: EQUAL
71885: IFFALSE 71903
// begin weapon := j [ 2 ] ;
71887: LD_ADDR_VAR 0 8
71891: PUSH
71892: LD_VAR 0 5
71896: PUSH
71897: LD_INT 2
71899: ARRAY
71900: ST_TO_ADDR
// break ;
71901: GO 71905
// end ;
71903: GO 71863
71905: POP
71906: POP
// if not weapon then
71907: LD_VAR 0 8
71911: NOT
71912: IFFALSE 71916
// continue ;
71914: GO 71812
// for k in factories do
71916: LD_ADDR_VAR 0 6
71920: PUSH
71921: LD_VAR 0 2
71925: PUSH
71926: FOR_IN
71927: IFFALSE 71992
// begin weapons := AvailableWeaponList ( k ) ;
71929: LD_ADDR_VAR 0 9
71933: PUSH
71934: LD_VAR 0 6
71938: PPUSH
71939: CALL_OW 478
71943: ST_TO_ADDR
// if not weapons then
71944: LD_VAR 0 9
71948: NOT
71949: IFFALSE 71953
// continue ;
71951: GO 71926
// if weapon in weapons then
71953: LD_VAR 0 8
71957: PUSH
71958: LD_VAR 0 9
71962: IN
71963: IFFALSE 71990
// begin result := [ i , weapon ] ;
71965: LD_ADDR_VAR 0 3
71969: PUSH
71970: LD_VAR 0 4
71974: PUSH
71975: LD_VAR 0 8
71979: PUSH
71980: EMPTY
71981: LIST
71982: LIST
71983: ST_TO_ADDR
// exit ;
71984: POP
71985: POP
71986: POP
71987: POP
71988: GO 71998
// end ; end ;
71990: GO 71926
71992: POP
71993: POP
// end ;
71994: GO 71812
71996: POP
71997: POP
// end ;
71998: LD_VAR 0 3
72002: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72003: LD_INT 0
72005: PPUSH
// if not side or side > 8 then
72006: LD_VAR 0 3
72010: NOT
72011: PUSH
72012: LD_VAR 0 3
72016: PUSH
72017: LD_INT 8
72019: GREATER
72020: OR
72021: IFFALSE 72025
// exit ;
72023: GO 72084
// if not range then
72025: LD_VAR 0 4
72029: NOT
72030: IFFALSE 72041
// range := - 12 ;
72032: LD_ADDR_VAR 0 4
72036: PUSH
72037: LD_INT 12
72039: NEG
72040: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72041: LD_VAR 0 1
72045: PPUSH
72046: LD_VAR 0 2
72050: PPUSH
72051: LD_VAR 0 3
72055: PPUSH
72056: LD_VAR 0 4
72060: PPUSH
72061: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72065: LD_VAR 0 1
72069: PPUSH
72070: LD_VAR 0 2
72074: PPUSH
72075: LD_VAR 0 3
72079: PPUSH
72080: CALL_OW 331
// end ;
72084: LD_VAR 0 5
72088: RET
// export function Video ( mode ) ; begin
72089: LD_INT 0
72091: PPUSH
// ingame_video = mode ;
72092: LD_ADDR_OWVAR 52
72096: PUSH
72097: LD_VAR 0 1
72101: ST_TO_ADDR
// interface_hidden = mode ;
72102: LD_ADDR_OWVAR 54
72106: PUSH
72107: LD_VAR 0 1
72111: ST_TO_ADDR
// end ;
72112: LD_VAR 0 2
72116: RET
// export function Join ( array , element ) ; begin
72117: LD_INT 0
72119: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72120: LD_ADDR_VAR 0 3
72124: PUSH
72125: LD_VAR 0 1
72129: PPUSH
72130: LD_VAR 0 1
72134: PUSH
72135: LD_INT 1
72137: PLUS
72138: PPUSH
72139: LD_VAR 0 2
72143: PPUSH
72144: CALL_OW 1
72148: ST_TO_ADDR
// end ;
72149: LD_VAR 0 3
72153: RET
// export function JoinUnion ( array , element ) ; begin
72154: LD_INT 0
72156: PPUSH
// result := array union element ;
72157: LD_ADDR_VAR 0 3
72161: PUSH
72162: LD_VAR 0 1
72166: PUSH
72167: LD_VAR 0 2
72171: UNION
72172: ST_TO_ADDR
// end ;
72173: LD_VAR 0 3
72177: RET
// export function GetBehemoths ( side ) ; begin
72178: LD_INT 0
72180: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
72181: LD_ADDR_VAR 0 2
72185: PUSH
72186: LD_INT 22
72188: PUSH
72189: LD_VAR 0 1
72193: PUSH
72194: EMPTY
72195: LIST
72196: LIST
72197: PUSH
72198: LD_INT 31
72200: PUSH
72201: LD_INT 25
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: PUSH
72208: EMPTY
72209: LIST
72210: LIST
72211: PPUSH
72212: CALL_OW 69
72216: ST_TO_ADDR
// end ;
72217: LD_VAR 0 2
72221: RET
// export function Shuffle ( array ) ; var i , index ; begin
72222: LD_INT 0
72224: PPUSH
72225: PPUSH
72226: PPUSH
// result := [ ] ;
72227: LD_ADDR_VAR 0 2
72231: PUSH
72232: EMPTY
72233: ST_TO_ADDR
// if not array then
72234: LD_VAR 0 1
72238: NOT
72239: IFFALSE 72243
// exit ;
72241: GO 72342
// Randomize ;
72243: CALL_OW 10
// for i = array downto 1 do
72247: LD_ADDR_VAR 0 3
72251: PUSH
72252: DOUBLE
72253: LD_VAR 0 1
72257: INC
72258: ST_TO_ADDR
72259: LD_INT 1
72261: PUSH
72262: FOR_DOWNTO
72263: IFFALSE 72340
// begin index := rand ( 1 , array ) ;
72265: LD_ADDR_VAR 0 4
72269: PUSH
72270: LD_INT 1
72272: PPUSH
72273: LD_VAR 0 1
72277: PPUSH
72278: CALL_OW 12
72282: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72283: LD_ADDR_VAR 0 2
72287: PUSH
72288: LD_VAR 0 2
72292: PPUSH
72293: LD_VAR 0 2
72297: PUSH
72298: LD_INT 1
72300: PLUS
72301: PPUSH
72302: LD_VAR 0 1
72306: PUSH
72307: LD_VAR 0 4
72311: ARRAY
72312: PPUSH
72313: CALL_OW 2
72317: ST_TO_ADDR
// array := Delete ( array , index ) ;
72318: LD_ADDR_VAR 0 1
72322: PUSH
72323: LD_VAR 0 1
72327: PPUSH
72328: LD_VAR 0 4
72332: PPUSH
72333: CALL_OW 3
72337: ST_TO_ADDR
// end ;
72338: GO 72262
72340: POP
72341: POP
// end ;
72342: LD_VAR 0 2
72346: RET
// export function GetBaseMaterials ( base ) ; begin
72347: LD_INT 0
72349: PPUSH
// result := [ 0 , 0 , 0 ] ;
72350: LD_ADDR_VAR 0 2
72354: PUSH
72355: LD_INT 0
72357: PUSH
72358: LD_INT 0
72360: PUSH
72361: LD_INT 0
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: LIST
72368: ST_TO_ADDR
// if not base then
72369: LD_VAR 0 1
72373: NOT
72374: IFFALSE 72378
// exit ;
72376: GO 72427
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72378: LD_ADDR_VAR 0 2
72382: PUSH
72383: LD_VAR 0 1
72387: PPUSH
72388: LD_INT 1
72390: PPUSH
72391: CALL_OW 275
72395: PUSH
72396: LD_VAR 0 1
72400: PPUSH
72401: LD_INT 2
72403: PPUSH
72404: CALL_OW 275
72408: PUSH
72409: LD_VAR 0 1
72413: PPUSH
72414: LD_INT 3
72416: PPUSH
72417: CALL_OW 275
72421: PUSH
72422: EMPTY
72423: LIST
72424: LIST
72425: LIST
72426: ST_TO_ADDR
// end ;
72427: LD_VAR 0 2
72431: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72432: LD_INT 0
72434: PPUSH
72435: PPUSH
// result := array ;
72436: LD_ADDR_VAR 0 3
72440: PUSH
72441: LD_VAR 0 1
72445: ST_TO_ADDR
// if size > 0 then
72446: LD_VAR 0 2
72450: PUSH
72451: LD_INT 0
72453: GREATER
72454: IFFALSE 72500
// for i := array downto size do
72456: LD_ADDR_VAR 0 4
72460: PUSH
72461: DOUBLE
72462: LD_VAR 0 1
72466: INC
72467: ST_TO_ADDR
72468: LD_VAR 0 2
72472: PUSH
72473: FOR_DOWNTO
72474: IFFALSE 72498
// result := Delete ( result , result ) ;
72476: LD_ADDR_VAR 0 3
72480: PUSH
72481: LD_VAR 0 3
72485: PPUSH
72486: LD_VAR 0 3
72490: PPUSH
72491: CALL_OW 3
72495: ST_TO_ADDR
72496: GO 72473
72498: POP
72499: POP
// end ;
72500: LD_VAR 0 3
72504: RET
// export function ComExit ( unit ) ; var tmp ; begin
72505: LD_INT 0
72507: PPUSH
72508: PPUSH
// if not IsInUnit ( unit ) then
72509: LD_VAR 0 1
72513: PPUSH
72514: CALL_OW 310
72518: NOT
72519: IFFALSE 72523
// exit ;
72521: GO 72583
// tmp := IsInUnit ( unit ) ;
72523: LD_ADDR_VAR 0 3
72527: PUSH
72528: LD_VAR 0 1
72532: PPUSH
72533: CALL_OW 310
72537: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72538: LD_VAR 0 3
72542: PPUSH
72543: CALL_OW 247
72547: PUSH
72548: LD_INT 2
72550: EQUAL
72551: IFFALSE 72564
// ComExitVehicle ( unit ) else
72553: LD_VAR 0 1
72557: PPUSH
72558: CALL_OW 121
72562: GO 72573
// ComExitBuilding ( unit ) ;
72564: LD_VAR 0 1
72568: PPUSH
72569: CALL_OW 122
// result := tmp ;
72573: LD_ADDR_VAR 0 2
72577: PUSH
72578: LD_VAR 0 3
72582: ST_TO_ADDR
// end ;
72583: LD_VAR 0 2
72587: RET
// export function ComExitAll ( units ) ; var i ; begin
72588: LD_INT 0
72590: PPUSH
72591: PPUSH
// if not units then
72592: LD_VAR 0 1
72596: NOT
72597: IFFALSE 72601
// exit ;
72599: GO 72627
// for i in units do
72601: LD_ADDR_VAR 0 3
72605: PUSH
72606: LD_VAR 0 1
72610: PUSH
72611: FOR_IN
72612: IFFALSE 72625
// ComExit ( i ) ;
72614: LD_VAR 0 3
72618: PPUSH
72619: CALL 72505 0 1
72623: GO 72611
72625: POP
72626: POP
// end ;
72627: LD_VAR 0 2
72631: RET
// export function ResetHc ; begin
72632: LD_INT 0
72634: PPUSH
// InitHc ;
72635: CALL_OW 19
// hc_importance := 0 ;
72639: LD_ADDR_OWVAR 32
72643: PUSH
72644: LD_INT 0
72646: ST_TO_ADDR
// end ;
72647: LD_VAR 0 1
72651: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72652: LD_INT 0
72654: PPUSH
72655: PPUSH
72656: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72657: LD_ADDR_VAR 0 6
72661: PUSH
72662: LD_VAR 0 1
72666: PUSH
72667: LD_VAR 0 3
72671: PLUS
72672: PUSH
72673: LD_INT 2
72675: DIV
72676: ST_TO_ADDR
// if _x < 0 then
72677: LD_VAR 0 6
72681: PUSH
72682: LD_INT 0
72684: LESS
72685: IFFALSE 72702
// _x := _x * - 1 ;
72687: LD_ADDR_VAR 0 6
72691: PUSH
72692: LD_VAR 0 6
72696: PUSH
72697: LD_INT 1
72699: NEG
72700: MUL
72701: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72702: LD_ADDR_VAR 0 7
72706: PUSH
72707: LD_VAR 0 2
72711: PUSH
72712: LD_VAR 0 4
72716: PLUS
72717: PUSH
72718: LD_INT 2
72720: DIV
72721: ST_TO_ADDR
// if _y < 0 then
72722: LD_VAR 0 7
72726: PUSH
72727: LD_INT 0
72729: LESS
72730: IFFALSE 72747
// _y := _y * - 1 ;
72732: LD_ADDR_VAR 0 7
72736: PUSH
72737: LD_VAR 0 7
72741: PUSH
72742: LD_INT 1
72744: NEG
72745: MUL
72746: ST_TO_ADDR
// result := [ _x , _y ] ;
72747: LD_ADDR_VAR 0 5
72751: PUSH
72752: LD_VAR 0 6
72756: PUSH
72757: LD_VAR 0 7
72761: PUSH
72762: EMPTY
72763: LIST
72764: LIST
72765: ST_TO_ADDR
// end ;
72766: LD_VAR 0 5
72770: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72771: LD_INT 0
72773: PPUSH
72774: PPUSH
72775: PPUSH
72776: PPUSH
// task := GetTaskList ( unit ) ;
72777: LD_ADDR_VAR 0 7
72781: PUSH
72782: LD_VAR 0 1
72786: PPUSH
72787: CALL_OW 437
72791: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72792: LD_VAR 0 7
72796: NOT
72797: PUSH
72798: LD_VAR 0 1
72802: PPUSH
72803: LD_VAR 0 2
72807: PPUSH
72808: CALL_OW 308
72812: NOT
72813: AND
72814: IFFALSE 72818
// exit ;
72816: GO 72936
// if IsInArea ( unit , area ) then
72818: LD_VAR 0 1
72822: PPUSH
72823: LD_VAR 0 2
72827: PPUSH
72828: CALL_OW 308
72832: IFFALSE 72850
// begin ComMoveToArea ( unit , goAway ) ;
72834: LD_VAR 0 1
72838: PPUSH
72839: LD_VAR 0 3
72843: PPUSH
72844: CALL_OW 113
// exit ;
72848: GO 72936
// end ; if task [ 1 ] [ 1 ] <> M then
72850: LD_VAR 0 7
72854: PUSH
72855: LD_INT 1
72857: ARRAY
72858: PUSH
72859: LD_INT 1
72861: ARRAY
72862: PUSH
72863: LD_STRING M
72865: NONEQUAL
72866: IFFALSE 72870
// exit ;
72868: GO 72936
// x := task [ 1 ] [ 2 ] ;
72870: LD_ADDR_VAR 0 5
72874: PUSH
72875: LD_VAR 0 7
72879: PUSH
72880: LD_INT 1
72882: ARRAY
72883: PUSH
72884: LD_INT 2
72886: ARRAY
72887: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72888: LD_ADDR_VAR 0 6
72892: PUSH
72893: LD_VAR 0 7
72897: PUSH
72898: LD_INT 1
72900: ARRAY
72901: PUSH
72902: LD_INT 3
72904: ARRAY
72905: ST_TO_ADDR
// if InArea ( x , y , area ) then
72906: LD_VAR 0 5
72910: PPUSH
72911: LD_VAR 0 6
72915: PPUSH
72916: LD_VAR 0 2
72920: PPUSH
72921: CALL_OW 309
72925: IFFALSE 72936
// ComStop ( unit ) ;
72927: LD_VAR 0 1
72931: PPUSH
72932: CALL_OW 141
// end ;
72936: LD_VAR 0 4
72940: RET
// export function Abs ( value ) ; begin
72941: LD_INT 0
72943: PPUSH
// result := value ;
72944: LD_ADDR_VAR 0 2
72948: PUSH
72949: LD_VAR 0 1
72953: ST_TO_ADDR
// if value < 0 then
72954: LD_VAR 0 1
72958: PUSH
72959: LD_INT 0
72961: LESS
72962: IFFALSE 72979
// result := value * - 1 ;
72964: LD_ADDR_VAR 0 2
72968: PUSH
72969: LD_VAR 0 1
72973: PUSH
72974: LD_INT 1
72976: NEG
72977: MUL
72978: ST_TO_ADDR
// end ;
72979: LD_VAR 0 2
72983: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72984: LD_INT 0
72986: PPUSH
72987: PPUSH
72988: PPUSH
72989: PPUSH
72990: PPUSH
72991: PPUSH
72992: PPUSH
72993: PPUSH
// if not unit or not building then
72994: LD_VAR 0 1
72998: NOT
72999: PUSH
73000: LD_VAR 0 2
73004: NOT
73005: OR
73006: IFFALSE 73010
// exit ;
73008: GO 73236
// x := GetX ( building ) ;
73010: LD_ADDR_VAR 0 4
73014: PUSH
73015: LD_VAR 0 2
73019: PPUSH
73020: CALL_OW 250
73024: ST_TO_ADDR
// y := GetY ( building ) ;
73025: LD_ADDR_VAR 0 6
73029: PUSH
73030: LD_VAR 0 2
73034: PPUSH
73035: CALL_OW 251
73039: ST_TO_ADDR
// d := GetDir ( building ) ;
73040: LD_ADDR_VAR 0 8
73044: PUSH
73045: LD_VAR 0 2
73049: PPUSH
73050: CALL_OW 254
73054: ST_TO_ADDR
// r := 4 ;
73055: LD_ADDR_VAR 0 9
73059: PUSH
73060: LD_INT 4
73062: ST_TO_ADDR
// for i := 1 to 5 do
73063: LD_ADDR_VAR 0 10
73067: PUSH
73068: DOUBLE
73069: LD_INT 1
73071: DEC
73072: ST_TO_ADDR
73073: LD_INT 5
73075: PUSH
73076: FOR_TO
73077: IFFALSE 73234
// begin _x := ShiftX ( x , d , r + i ) ;
73079: LD_ADDR_VAR 0 5
73083: PUSH
73084: LD_VAR 0 4
73088: PPUSH
73089: LD_VAR 0 8
73093: PPUSH
73094: LD_VAR 0 9
73098: PUSH
73099: LD_VAR 0 10
73103: PLUS
73104: PPUSH
73105: CALL_OW 272
73109: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73110: LD_ADDR_VAR 0 7
73114: PUSH
73115: LD_VAR 0 6
73119: PPUSH
73120: LD_VAR 0 8
73124: PPUSH
73125: LD_VAR 0 9
73129: PUSH
73130: LD_VAR 0 10
73134: PLUS
73135: PPUSH
73136: CALL_OW 273
73140: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73141: LD_VAR 0 5
73145: PPUSH
73146: LD_VAR 0 7
73150: PPUSH
73151: CALL_OW 488
73155: PUSH
73156: LD_VAR 0 5
73160: PPUSH
73161: LD_VAR 0 7
73165: PPUSH
73166: CALL_OW 428
73170: PPUSH
73171: CALL_OW 247
73175: PUSH
73176: LD_INT 3
73178: PUSH
73179: LD_INT 2
73181: PUSH
73182: EMPTY
73183: LIST
73184: LIST
73185: IN
73186: NOT
73187: AND
73188: IFFALSE 73232
// begin ComMoveXY ( unit , _x , _y ) ;
73190: LD_VAR 0 1
73194: PPUSH
73195: LD_VAR 0 5
73199: PPUSH
73200: LD_VAR 0 7
73204: PPUSH
73205: CALL_OW 111
// result := [ _x , _y ] ;
73209: LD_ADDR_VAR 0 3
73213: PUSH
73214: LD_VAR 0 5
73218: PUSH
73219: LD_VAR 0 7
73223: PUSH
73224: EMPTY
73225: LIST
73226: LIST
73227: ST_TO_ADDR
// exit ;
73228: POP
73229: POP
73230: GO 73236
// end ; end ;
73232: GO 73076
73234: POP
73235: POP
// end ;
73236: LD_VAR 0 3
73240: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73241: LD_INT 0
73243: PPUSH
73244: PPUSH
73245: PPUSH
// result := 0 ;
73246: LD_ADDR_VAR 0 3
73250: PUSH
73251: LD_INT 0
73253: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73254: LD_VAR 0 1
73258: PUSH
73259: LD_INT 0
73261: LESS
73262: PUSH
73263: LD_VAR 0 1
73267: PUSH
73268: LD_INT 8
73270: GREATER
73271: OR
73272: PUSH
73273: LD_VAR 0 2
73277: PUSH
73278: LD_INT 0
73280: LESS
73281: OR
73282: PUSH
73283: LD_VAR 0 2
73287: PUSH
73288: LD_INT 8
73290: GREATER
73291: OR
73292: IFFALSE 73296
// exit ;
73294: GO 73371
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73296: LD_ADDR_VAR 0 4
73300: PUSH
73301: LD_INT 22
73303: PUSH
73304: LD_VAR 0 2
73308: PUSH
73309: EMPTY
73310: LIST
73311: LIST
73312: PPUSH
73313: CALL_OW 69
73317: PUSH
73318: FOR_IN
73319: IFFALSE 73369
// begin un := UnitShoot ( i ) ;
73321: LD_ADDR_VAR 0 5
73325: PUSH
73326: LD_VAR 0 4
73330: PPUSH
73331: CALL_OW 504
73335: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73336: LD_VAR 0 5
73340: PPUSH
73341: CALL_OW 255
73345: PUSH
73346: LD_VAR 0 1
73350: EQUAL
73351: IFFALSE 73367
// begin result := un ;
73353: LD_ADDR_VAR 0 3
73357: PUSH
73358: LD_VAR 0 5
73362: ST_TO_ADDR
// exit ;
73363: POP
73364: POP
73365: GO 73371
// end ; end ;
73367: GO 73318
73369: POP
73370: POP
// end ;
73371: LD_VAR 0 3
73375: RET
// export function GetCargoBay ( units ) ; begin
73376: LD_INT 0
73378: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73379: LD_ADDR_VAR 0 2
73383: PUSH
73384: LD_VAR 0 1
73388: PPUSH
73389: LD_INT 2
73391: PUSH
73392: LD_INT 34
73394: PUSH
73395: LD_INT 12
73397: PUSH
73398: EMPTY
73399: LIST
73400: LIST
73401: PUSH
73402: LD_INT 34
73404: PUSH
73405: LD_INT 51
73407: PUSH
73408: EMPTY
73409: LIST
73410: LIST
73411: PUSH
73412: LD_INT 34
73414: PUSH
73415: LD_INT 32
73417: PUSH
73418: EMPTY
73419: LIST
73420: LIST
73421: PUSH
73422: LD_INT 34
73424: PUSH
73425: LD_EXP 37
73429: PUSH
73430: EMPTY
73431: LIST
73432: LIST
73433: PUSH
73434: EMPTY
73435: LIST
73436: LIST
73437: LIST
73438: LIST
73439: LIST
73440: PPUSH
73441: CALL_OW 72
73445: ST_TO_ADDR
// end ;
73446: LD_VAR 0 2
73450: RET
// export function Negate ( value ) ; begin
73451: LD_INT 0
73453: PPUSH
// result := not value ;
73454: LD_ADDR_VAR 0 2
73458: PUSH
73459: LD_VAR 0 1
73463: NOT
73464: ST_TO_ADDR
// end ;
73465: LD_VAR 0 2
73469: RET
// export function Inc ( value ) ; begin
73470: LD_INT 0
73472: PPUSH
// result := value + 1 ;
73473: LD_ADDR_VAR 0 2
73477: PUSH
73478: LD_VAR 0 1
73482: PUSH
73483: LD_INT 1
73485: PLUS
73486: ST_TO_ADDR
// end ;
73487: LD_VAR 0 2
73491: RET
// export function Dec ( value ) ; begin
73492: LD_INT 0
73494: PPUSH
// result := value - 1 ;
73495: LD_ADDR_VAR 0 2
73499: PUSH
73500: LD_VAR 0 1
73504: PUSH
73505: LD_INT 1
73507: MINUS
73508: ST_TO_ADDR
// end ;
73509: LD_VAR 0 2
73513: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73514: LD_INT 0
73516: PPUSH
73517: PPUSH
73518: PPUSH
73519: PPUSH
73520: PPUSH
73521: PPUSH
73522: PPUSH
73523: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73524: LD_VAR 0 1
73528: PPUSH
73529: LD_VAR 0 2
73533: PPUSH
73534: CALL_OW 488
73538: NOT
73539: PUSH
73540: LD_VAR 0 3
73544: PPUSH
73545: LD_VAR 0 4
73549: PPUSH
73550: CALL_OW 488
73554: NOT
73555: OR
73556: IFFALSE 73569
// begin result := - 1 ;
73558: LD_ADDR_VAR 0 5
73562: PUSH
73563: LD_INT 1
73565: NEG
73566: ST_TO_ADDR
// exit ;
73567: GO 73804
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73569: LD_ADDR_VAR 0 12
73573: PUSH
73574: LD_VAR 0 1
73578: PPUSH
73579: LD_VAR 0 2
73583: PPUSH
73584: LD_VAR 0 3
73588: PPUSH
73589: LD_VAR 0 4
73593: PPUSH
73594: CALL 72652 0 4
73598: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
73599: LD_ADDR_VAR 0 11
73603: PUSH
73604: LD_VAR 0 1
73608: PPUSH
73609: LD_VAR 0 2
73613: PPUSH
73614: LD_VAR 0 12
73618: PUSH
73619: LD_INT 1
73621: ARRAY
73622: PPUSH
73623: LD_VAR 0 12
73627: PUSH
73628: LD_INT 2
73630: ARRAY
73631: PPUSH
73632: CALL_OW 298
73636: ST_TO_ADDR
// distance := 9999 ;
73637: LD_ADDR_VAR 0 10
73641: PUSH
73642: LD_INT 9999
73644: ST_TO_ADDR
// for i := 0 to 5 do
73645: LD_ADDR_VAR 0 6
73649: PUSH
73650: DOUBLE
73651: LD_INT 0
73653: DEC
73654: ST_TO_ADDR
73655: LD_INT 5
73657: PUSH
73658: FOR_TO
73659: IFFALSE 73802
// begin _x := ShiftX ( x1 , i , centerDist ) ;
73661: LD_ADDR_VAR 0 7
73665: PUSH
73666: LD_VAR 0 1
73670: PPUSH
73671: LD_VAR 0 6
73675: PPUSH
73676: LD_VAR 0 11
73680: PPUSH
73681: CALL_OW 272
73685: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73686: LD_ADDR_VAR 0 8
73690: PUSH
73691: LD_VAR 0 2
73695: PPUSH
73696: LD_VAR 0 6
73700: PPUSH
73701: LD_VAR 0 11
73705: PPUSH
73706: CALL_OW 273
73710: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73711: LD_VAR 0 7
73715: PPUSH
73716: LD_VAR 0 8
73720: PPUSH
73721: CALL_OW 488
73725: NOT
73726: IFFALSE 73730
// continue ;
73728: GO 73658
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
73730: LD_ADDR_VAR 0 9
73734: PUSH
73735: LD_VAR 0 12
73739: PUSH
73740: LD_INT 1
73742: ARRAY
73743: PPUSH
73744: LD_VAR 0 12
73748: PUSH
73749: LD_INT 2
73751: ARRAY
73752: PPUSH
73753: LD_VAR 0 7
73757: PPUSH
73758: LD_VAR 0 8
73762: PPUSH
73763: CALL_OW 298
73767: ST_TO_ADDR
// if tmp < distance then
73768: LD_VAR 0 9
73772: PUSH
73773: LD_VAR 0 10
73777: LESS
73778: IFFALSE 73800
// begin result := i ;
73780: LD_ADDR_VAR 0 5
73784: PUSH
73785: LD_VAR 0 6
73789: ST_TO_ADDR
// distance := tmp ;
73790: LD_ADDR_VAR 0 10
73794: PUSH
73795: LD_VAR 0 9
73799: ST_TO_ADDR
// end ; end ;
73800: GO 73658
73802: POP
73803: POP
// end ;
73804: LD_VAR 0 5
73808: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73809: LD_INT 0
73811: PPUSH
73812: PPUSH
// if not driver or not IsInUnit ( driver ) then
73813: LD_VAR 0 1
73817: NOT
73818: PUSH
73819: LD_VAR 0 1
73823: PPUSH
73824: CALL_OW 310
73828: NOT
73829: OR
73830: IFFALSE 73834
// exit ;
73832: GO 73924
// vehicle := IsInUnit ( driver ) ;
73834: LD_ADDR_VAR 0 3
73838: PUSH
73839: LD_VAR 0 1
73843: PPUSH
73844: CALL_OW 310
73848: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73849: LD_VAR 0 1
73853: PPUSH
73854: LD_STRING \
73856: PUSH
73857: LD_INT 0
73859: PUSH
73860: LD_INT 0
73862: PUSH
73863: LD_INT 0
73865: PUSH
73866: LD_INT 0
73868: PUSH
73869: LD_INT 0
73871: PUSH
73872: LD_INT 0
73874: PUSH
73875: EMPTY
73876: LIST
73877: LIST
73878: LIST
73879: LIST
73880: LIST
73881: LIST
73882: LIST
73883: PUSH
73884: LD_STRING E
73886: PUSH
73887: LD_INT 0
73889: PUSH
73890: LD_INT 0
73892: PUSH
73893: LD_VAR 0 3
73897: PUSH
73898: LD_INT 0
73900: PUSH
73901: LD_INT 0
73903: PUSH
73904: LD_INT 0
73906: PUSH
73907: EMPTY
73908: LIST
73909: LIST
73910: LIST
73911: LIST
73912: LIST
73913: LIST
73914: LIST
73915: PUSH
73916: EMPTY
73917: LIST
73918: LIST
73919: PPUSH
73920: CALL_OW 446
// end ;
73924: LD_VAR 0 2
73928: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73929: LD_INT 0
73931: PPUSH
73932: PPUSH
// if not driver or not IsInUnit ( driver ) then
73933: LD_VAR 0 1
73937: NOT
73938: PUSH
73939: LD_VAR 0 1
73943: PPUSH
73944: CALL_OW 310
73948: NOT
73949: OR
73950: IFFALSE 73954
// exit ;
73952: GO 74044
// vehicle := IsInUnit ( driver ) ;
73954: LD_ADDR_VAR 0 3
73958: PUSH
73959: LD_VAR 0 1
73963: PPUSH
73964: CALL_OW 310
73968: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73969: LD_VAR 0 1
73973: PPUSH
73974: LD_STRING \
73976: PUSH
73977: LD_INT 0
73979: PUSH
73980: LD_INT 0
73982: PUSH
73983: LD_INT 0
73985: PUSH
73986: LD_INT 0
73988: PUSH
73989: LD_INT 0
73991: PUSH
73992: LD_INT 0
73994: PUSH
73995: EMPTY
73996: LIST
73997: LIST
73998: LIST
73999: LIST
74000: LIST
74001: LIST
74002: LIST
74003: PUSH
74004: LD_STRING E
74006: PUSH
74007: LD_INT 0
74009: PUSH
74010: LD_INT 0
74012: PUSH
74013: LD_VAR 0 3
74017: PUSH
74018: LD_INT 0
74020: PUSH
74021: LD_INT 0
74023: PUSH
74024: LD_INT 0
74026: PUSH
74027: EMPTY
74028: LIST
74029: LIST
74030: LIST
74031: LIST
74032: LIST
74033: LIST
74034: LIST
74035: PUSH
74036: EMPTY
74037: LIST
74038: LIST
74039: PPUSH
74040: CALL_OW 447
// end ;
74044: LD_VAR 0 2
74048: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74049: LD_INT 0
74051: PPUSH
74052: PPUSH
74053: PPUSH
// tmp := [ ] ;
74054: LD_ADDR_VAR 0 5
74058: PUSH
74059: EMPTY
74060: ST_TO_ADDR
// for i in units do
74061: LD_ADDR_VAR 0 4
74065: PUSH
74066: LD_VAR 0 1
74070: PUSH
74071: FOR_IN
74072: IFFALSE 74110
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74074: LD_ADDR_VAR 0 5
74078: PUSH
74079: LD_VAR 0 5
74083: PPUSH
74084: LD_VAR 0 5
74088: PUSH
74089: LD_INT 1
74091: PLUS
74092: PPUSH
74093: LD_VAR 0 4
74097: PPUSH
74098: CALL_OW 256
74102: PPUSH
74103: CALL_OW 2
74107: ST_TO_ADDR
74108: GO 74071
74110: POP
74111: POP
// if not tmp then
74112: LD_VAR 0 5
74116: NOT
74117: IFFALSE 74121
// exit ;
74119: GO 74169
// if asc then
74121: LD_VAR 0 2
74125: IFFALSE 74149
// result := SortListByListAsc ( units , tmp ) else
74127: LD_ADDR_VAR 0 3
74131: PUSH
74132: LD_VAR 0 1
74136: PPUSH
74137: LD_VAR 0 5
74141: PPUSH
74142: CALL_OW 76
74146: ST_TO_ADDR
74147: GO 74169
// result := SortListByListDesc ( units , tmp ) ;
74149: LD_ADDR_VAR 0 3
74153: PUSH
74154: LD_VAR 0 1
74158: PPUSH
74159: LD_VAR 0 5
74163: PPUSH
74164: CALL_OW 77
74168: ST_TO_ADDR
// end ;
74169: LD_VAR 0 3
74173: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74174: LD_INT 0
74176: PPUSH
74177: PPUSH
// task := GetTaskList ( mech ) ;
74178: LD_ADDR_VAR 0 4
74182: PUSH
74183: LD_VAR 0 1
74187: PPUSH
74188: CALL_OW 437
74192: ST_TO_ADDR
// if not task then
74193: LD_VAR 0 4
74197: NOT
74198: IFFALSE 74202
// exit ;
74200: GO 74244
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74202: LD_ADDR_VAR 0 3
74206: PUSH
74207: LD_VAR 0 4
74211: PUSH
74212: LD_INT 1
74214: ARRAY
74215: PUSH
74216: LD_INT 1
74218: ARRAY
74219: PUSH
74220: LD_STRING r
74222: EQUAL
74223: PUSH
74224: LD_VAR 0 4
74228: PUSH
74229: LD_INT 1
74231: ARRAY
74232: PUSH
74233: LD_INT 4
74235: ARRAY
74236: PUSH
74237: LD_VAR 0 2
74241: EQUAL
74242: AND
74243: ST_TO_ADDR
// end ;
74244: LD_VAR 0 3
74248: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
74249: LD_INT 0
74251: PPUSH
// SetDir ( unit , d ) ;
74252: LD_VAR 0 1
74256: PPUSH
74257: LD_VAR 0 4
74261: PPUSH
74262: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
74266: LD_VAR 0 1
74270: PPUSH
74271: LD_VAR 0 2
74275: PPUSH
74276: LD_VAR 0 3
74280: PPUSH
74281: LD_VAR 0 5
74285: PPUSH
74286: CALL_OW 48
// end ;
74290: LD_VAR 0 6
74294: RET
// export function ToNaturalNumber ( number ) ; begin
74295: LD_INT 0
74297: PPUSH
// result := number div 1 ;
74298: LD_ADDR_VAR 0 2
74302: PUSH
74303: LD_VAR 0 1
74307: PUSH
74308: LD_INT 1
74310: DIV
74311: ST_TO_ADDR
// if number < 0 then
74312: LD_VAR 0 1
74316: PUSH
74317: LD_INT 0
74319: LESS
74320: IFFALSE 74330
// result := 0 ;
74322: LD_ADDR_VAR 0 2
74326: PUSH
74327: LD_INT 0
74329: ST_TO_ADDR
// end ;
74330: LD_VAR 0 2
74334: RET
// export function SortByClass ( units , class ) ; var un ; begin
74335: LD_INT 0
74337: PPUSH
74338: PPUSH
// if not units or not class then
74339: LD_VAR 0 1
74343: NOT
74344: PUSH
74345: LD_VAR 0 2
74349: NOT
74350: OR
74351: IFFALSE 74355
// exit ;
74353: GO 74450
// result := [ ] ;
74355: LD_ADDR_VAR 0 3
74359: PUSH
74360: EMPTY
74361: ST_TO_ADDR
// for un in units do
74362: LD_ADDR_VAR 0 4
74366: PUSH
74367: LD_VAR 0 1
74371: PUSH
74372: FOR_IN
74373: IFFALSE 74448
// if GetClass ( un ) = class then
74375: LD_VAR 0 4
74379: PPUSH
74380: CALL_OW 257
74384: PUSH
74385: LD_VAR 0 2
74389: EQUAL
74390: IFFALSE 74417
// result := Insert ( result , 1 , un ) else
74392: LD_ADDR_VAR 0 3
74396: PUSH
74397: LD_VAR 0 3
74401: PPUSH
74402: LD_INT 1
74404: PPUSH
74405: LD_VAR 0 4
74409: PPUSH
74410: CALL_OW 2
74414: ST_TO_ADDR
74415: GO 74446
// result := Replace ( result , result + 1 , un ) ;
74417: LD_ADDR_VAR 0 3
74421: PUSH
74422: LD_VAR 0 3
74426: PPUSH
74427: LD_VAR 0 3
74431: PUSH
74432: LD_INT 1
74434: PLUS
74435: PPUSH
74436: LD_VAR 0 4
74440: PPUSH
74441: CALL_OW 1
74445: ST_TO_ADDR
74446: GO 74372
74448: POP
74449: POP
// end ;
74450: LD_VAR 0 3
74454: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74455: LD_INT 0
74457: PPUSH
74458: PPUSH
74459: PPUSH
74460: PPUSH
74461: PPUSH
74462: PPUSH
74463: PPUSH
// result := [ ] ;
74464: LD_ADDR_VAR 0 4
74468: PUSH
74469: EMPTY
74470: ST_TO_ADDR
// if x - r < 0 then
74471: LD_VAR 0 1
74475: PUSH
74476: LD_VAR 0 3
74480: MINUS
74481: PUSH
74482: LD_INT 0
74484: LESS
74485: IFFALSE 74497
// min_x := 0 else
74487: LD_ADDR_VAR 0 8
74491: PUSH
74492: LD_INT 0
74494: ST_TO_ADDR
74495: GO 74513
// min_x := x - r ;
74497: LD_ADDR_VAR 0 8
74501: PUSH
74502: LD_VAR 0 1
74506: PUSH
74507: LD_VAR 0 3
74511: MINUS
74512: ST_TO_ADDR
// if y - r < 0 then
74513: LD_VAR 0 2
74517: PUSH
74518: LD_VAR 0 3
74522: MINUS
74523: PUSH
74524: LD_INT 0
74526: LESS
74527: IFFALSE 74539
// min_y := 0 else
74529: LD_ADDR_VAR 0 7
74533: PUSH
74534: LD_INT 0
74536: ST_TO_ADDR
74537: GO 74555
// min_y := y - r ;
74539: LD_ADDR_VAR 0 7
74543: PUSH
74544: LD_VAR 0 2
74548: PUSH
74549: LD_VAR 0 3
74553: MINUS
74554: ST_TO_ADDR
// max_x := x + r ;
74555: LD_ADDR_VAR 0 9
74559: PUSH
74560: LD_VAR 0 1
74564: PUSH
74565: LD_VAR 0 3
74569: PLUS
74570: ST_TO_ADDR
// max_y := y + r ;
74571: LD_ADDR_VAR 0 10
74575: PUSH
74576: LD_VAR 0 2
74580: PUSH
74581: LD_VAR 0 3
74585: PLUS
74586: ST_TO_ADDR
// for _x = min_x to max_x do
74587: LD_ADDR_VAR 0 5
74591: PUSH
74592: DOUBLE
74593: LD_VAR 0 8
74597: DEC
74598: ST_TO_ADDR
74599: LD_VAR 0 9
74603: PUSH
74604: FOR_TO
74605: IFFALSE 74706
// for _y = min_y to max_y do
74607: LD_ADDR_VAR 0 6
74611: PUSH
74612: DOUBLE
74613: LD_VAR 0 7
74617: DEC
74618: ST_TO_ADDR
74619: LD_VAR 0 10
74623: PUSH
74624: FOR_TO
74625: IFFALSE 74702
// begin if not ValidHex ( _x , _y ) then
74627: LD_VAR 0 5
74631: PPUSH
74632: LD_VAR 0 6
74636: PPUSH
74637: CALL_OW 488
74641: NOT
74642: IFFALSE 74646
// continue ;
74644: GO 74624
// if GetResourceTypeXY ( _x , _y ) then
74646: LD_VAR 0 5
74650: PPUSH
74651: LD_VAR 0 6
74655: PPUSH
74656: CALL_OW 283
74660: IFFALSE 74700
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74662: LD_ADDR_VAR 0 4
74666: PUSH
74667: LD_VAR 0 4
74671: PPUSH
74672: LD_VAR 0 4
74676: PUSH
74677: LD_INT 1
74679: PLUS
74680: PPUSH
74681: LD_VAR 0 5
74685: PUSH
74686: LD_VAR 0 6
74690: PUSH
74691: EMPTY
74692: LIST
74693: LIST
74694: PPUSH
74695: CALL_OW 1
74699: ST_TO_ADDR
// end ;
74700: GO 74624
74702: POP
74703: POP
74704: GO 74604
74706: POP
74707: POP
// end ;
74708: LD_VAR 0 4
74712: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74713: LD_INT 0
74715: PPUSH
74716: PPUSH
74717: PPUSH
74718: PPUSH
74719: PPUSH
74720: PPUSH
74721: PPUSH
74722: PPUSH
// if not units then
74723: LD_VAR 0 1
74727: NOT
74728: IFFALSE 74732
// exit ;
74730: GO 75157
// result := UnitFilter ( units , [ f_ok ] ) ;
74732: LD_ADDR_VAR 0 3
74736: PUSH
74737: LD_VAR 0 1
74741: PPUSH
74742: LD_INT 50
74744: PUSH
74745: EMPTY
74746: LIST
74747: PPUSH
74748: CALL_OW 72
74752: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74753: LD_ADDR_VAR 0 8
74757: PUSH
74758: LD_VAR 0 1
74762: PUSH
74763: LD_INT 1
74765: ARRAY
74766: PPUSH
74767: CALL_OW 255
74771: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
74772: LD_ADDR_VAR 0 10
74776: PUSH
74777: LD_INT 29
74779: PUSH
74780: LD_EXP 40
74784: PUSH
74785: EMPTY
74786: LIST
74787: LIST
74788: ST_TO_ADDR
// if not result then
74789: LD_VAR 0 3
74793: NOT
74794: IFFALSE 74798
// exit ;
74796: GO 75157
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74798: LD_ADDR_VAR 0 5
74802: PUSH
74803: LD_INT 81
74805: PUSH
74806: LD_VAR 0 8
74810: PUSH
74811: EMPTY
74812: LIST
74813: LIST
74814: PPUSH
74815: CALL_OW 69
74819: ST_TO_ADDR
// for i in result do
74820: LD_ADDR_VAR 0 4
74824: PUSH
74825: LD_VAR 0 3
74829: PUSH
74830: FOR_IN
74831: IFFALSE 75155
// begin tag := GetTag ( i ) + 1 ;
74833: LD_ADDR_VAR 0 9
74837: PUSH
74838: LD_VAR 0 4
74842: PPUSH
74843: CALL_OW 110
74847: PUSH
74848: LD_INT 1
74850: PLUS
74851: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
74852: LD_ADDR_VAR 0 7
74856: PUSH
74857: LD_VAR 0 4
74861: PPUSH
74862: CALL_OW 250
74866: PPUSH
74867: LD_VAR 0 4
74871: PPUSH
74872: CALL_OW 251
74876: PPUSH
74877: LD_INT 6
74879: PPUSH
74880: CALL 74455 0 3
74884: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
74885: LD_VAR 0 7
74889: PUSH
74890: LD_VAR 0 4
74894: PPUSH
74895: CALL_OW 264
74899: PUSH
74900: LD_VAR 0 10
74904: IN
74905: NOT
74906: AND
74907: IFFALSE 74946
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74909: LD_VAR 0 4
74913: PPUSH
74914: LD_VAR 0 7
74918: PUSH
74919: LD_INT 1
74921: ARRAY
74922: PUSH
74923: LD_INT 1
74925: ARRAY
74926: PPUSH
74927: LD_VAR 0 7
74931: PUSH
74932: LD_INT 1
74934: ARRAY
74935: PUSH
74936: LD_INT 2
74938: ARRAY
74939: PPUSH
74940: CALL_OW 116
74944: GO 75153
// if path > tag then
74946: LD_VAR 0 2
74950: PUSH
74951: LD_VAR 0 9
74955: GREATER
74956: IFFALSE 75123
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
74958: LD_ADDR_VAR 0 6
74962: PUSH
74963: LD_VAR 0 5
74967: PPUSH
74968: LD_INT 91
74970: PUSH
74971: LD_VAR 0 4
74975: PUSH
74976: LD_INT 12
74978: PUSH
74979: EMPTY
74980: LIST
74981: LIST
74982: LIST
74983: PPUSH
74984: CALL_OW 72
74988: ST_TO_ADDR
// if nearEnemy then
74989: LD_VAR 0 6
74993: IFFALSE 75021
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
74995: LD_VAR 0 4
74999: PPUSH
75000: LD_VAR 0 6
75004: PPUSH
75005: LD_VAR 0 4
75009: PPUSH
75010: CALL_OW 74
75014: PPUSH
75015: CALL_OW 115
75019: GO 75121
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75021: LD_VAR 0 4
75025: PPUSH
75026: LD_VAR 0 2
75030: PUSH
75031: LD_VAR 0 9
75035: ARRAY
75036: PUSH
75037: LD_INT 1
75039: ARRAY
75040: PPUSH
75041: LD_VAR 0 2
75045: PUSH
75046: LD_VAR 0 9
75050: ARRAY
75051: PUSH
75052: LD_INT 2
75054: ARRAY
75055: PPUSH
75056: CALL_OW 297
75060: PUSH
75061: LD_INT 6
75063: GREATER
75064: IFFALSE 75107
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75066: LD_VAR 0 4
75070: PPUSH
75071: LD_VAR 0 2
75075: PUSH
75076: LD_VAR 0 9
75080: ARRAY
75081: PUSH
75082: LD_INT 1
75084: ARRAY
75085: PPUSH
75086: LD_VAR 0 2
75090: PUSH
75091: LD_VAR 0 9
75095: ARRAY
75096: PUSH
75097: LD_INT 2
75099: ARRAY
75100: PPUSH
75101: CALL_OW 114
75105: GO 75121
// SetTag ( i , tag ) ;
75107: LD_VAR 0 4
75111: PPUSH
75112: LD_VAR 0 9
75116: PPUSH
75117: CALL_OW 109
// end else
75121: GO 75153
// if enemy then
75123: LD_VAR 0 5
75127: IFFALSE 75153
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75129: LD_VAR 0 4
75133: PPUSH
75134: LD_VAR 0 5
75138: PPUSH
75139: LD_VAR 0 4
75143: PPUSH
75144: CALL_OW 74
75148: PPUSH
75149: CALL_OW 115
// end ;
75153: GO 74830
75155: POP
75156: POP
// end ;
75157: LD_VAR 0 3
75161: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
75162: LD_INT 0
75164: PPUSH
75165: PPUSH
75166: PPUSH
// if not unit or IsInUnit ( unit ) then
75167: LD_VAR 0 1
75171: NOT
75172: PUSH
75173: LD_VAR 0 1
75177: PPUSH
75178: CALL_OW 310
75182: OR
75183: IFFALSE 75187
// exit ;
75185: GO 75278
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
75187: LD_ADDR_VAR 0 4
75191: PUSH
75192: LD_VAR 0 1
75196: PPUSH
75197: CALL_OW 250
75201: PPUSH
75202: LD_VAR 0 2
75206: PPUSH
75207: LD_INT 1
75209: PPUSH
75210: CALL_OW 272
75214: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
75215: LD_ADDR_VAR 0 5
75219: PUSH
75220: LD_VAR 0 1
75224: PPUSH
75225: CALL_OW 251
75229: PPUSH
75230: LD_VAR 0 2
75234: PPUSH
75235: LD_INT 1
75237: PPUSH
75238: CALL_OW 273
75242: ST_TO_ADDR
// if ValidHex ( x , y ) then
75243: LD_VAR 0 4
75247: PPUSH
75248: LD_VAR 0 5
75252: PPUSH
75253: CALL_OW 488
75257: IFFALSE 75278
// ComTurnXY ( unit , x , y ) ;
75259: LD_VAR 0 1
75263: PPUSH
75264: LD_VAR 0 4
75268: PPUSH
75269: LD_VAR 0 5
75273: PPUSH
75274: CALL_OW 118
// end ;
75278: LD_VAR 0 3
75282: RET
// export function SeeUnits ( side , units ) ; var i ; begin
75283: LD_INT 0
75285: PPUSH
75286: PPUSH
// result := false ;
75287: LD_ADDR_VAR 0 3
75291: PUSH
75292: LD_INT 0
75294: ST_TO_ADDR
// if not units then
75295: LD_VAR 0 2
75299: NOT
75300: IFFALSE 75304
// exit ;
75302: GO 75349
// for i in units do
75304: LD_ADDR_VAR 0 4
75308: PUSH
75309: LD_VAR 0 2
75313: PUSH
75314: FOR_IN
75315: IFFALSE 75347
// if See ( side , i ) then
75317: LD_VAR 0 1
75321: PPUSH
75322: LD_VAR 0 4
75326: PPUSH
75327: CALL_OW 292
75331: IFFALSE 75345
// begin result := true ;
75333: LD_ADDR_VAR 0 3
75337: PUSH
75338: LD_INT 1
75340: ST_TO_ADDR
// exit ;
75341: POP
75342: POP
75343: GO 75349
// end ;
75345: GO 75314
75347: POP
75348: POP
// end ;
75349: LD_VAR 0 3
75353: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75354: LD_INT 0
75356: PPUSH
75357: PPUSH
75358: PPUSH
75359: PPUSH
// if not unit or not points then
75360: LD_VAR 0 1
75364: NOT
75365: PUSH
75366: LD_VAR 0 2
75370: NOT
75371: OR
75372: IFFALSE 75376
// exit ;
75374: GO 75466
// dist := 99999 ;
75376: LD_ADDR_VAR 0 5
75380: PUSH
75381: LD_INT 99999
75383: ST_TO_ADDR
// for i in points do
75384: LD_ADDR_VAR 0 4
75388: PUSH
75389: LD_VAR 0 2
75393: PUSH
75394: FOR_IN
75395: IFFALSE 75464
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75397: LD_ADDR_VAR 0 6
75401: PUSH
75402: LD_VAR 0 1
75406: PPUSH
75407: LD_VAR 0 4
75411: PUSH
75412: LD_INT 1
75414: ARRAY
75415: PPUSH
75416: LD_VAR 0 4
75420: PUSH
75421: LD_INT 2
75423: ARRAY
75424: PPUSH
75425: CALL_OW 297
75429: ST_TO_ADDR
// if tmpDist < dist then
75430: LD_VAR 0 6
75434: PUSH
75435: LD_VAR 0 5
75439: LESS
75440: IFFALSE 75462
// begin result := i ;
75442: LD_ADDR_VAR 0 3
75446: PUSH
75447: LD_VAR 0 4
75451: ST_TO_ADDR
// dist := tmpDist ;
75452: LD_ADDR_VAR 0 5
75456: PUSH
75457: LD_VAR 0 6
75461: ST_TO_ADDR
// end ; end ;
75462: GO 75394
75464: POP
75465: POP
// end ; end_of_file
75466: LD_VAR 0 3
75470: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75471: LD_VAR 0 1
75475: PUSH
75476: LD_INT 200
75478: DOUBLE
75479: GREATEREQUAL
75480: IFFALSE 75488
75482: LD_INT 299
75484: DOUBLE
75485: LESSEQUAL
75486: IFTRUE 75490
75488: GO 75522
75490: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75491: LD_VAR 0 1
75495: PPUSH
75496: LD_VAR 0 2
75500: PPUSH
75501: LD_VAR 0 3
75505: PPUSH
75506: LD_VAR 0 4
75510: PPUSH
75511: LD_VAR 0 5
75515: PPUSH
75516: CALL 31118 0 5
75520: GO 75599
75522: LD_INT 300
75524: DOUBLE
75525: GREATEREQUAL
75526: IFFALSE 75534
75528: LD_INT 399
75530: DOUBLE
75531: LESSEQUAL
75532: IFTRUE 75536
75534: GO 75598
75536: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75537: LD_VAR 0 1
75541: PPUSH
75542: LD_VAR 0 2
75546: PPUSH
75547: LD_VAR 0 3
75551: PPUSH
75552: LD_VAR 0 4
75556: PPUSH
75557: LD_VAR 0 5
75561: PPUSH
75562: LD_VAR 0 6
75566: PPUSH
75567: LD_VAR 0 7
75571: PPUSH
75572: LD_VAR 0 8
75576: PPUSH
75577: LD_VAR 0 9
75581: PPUSH
75582: LD_VAR 0 10
75586: PPUSH
75587: LD_VAR 0 11
75591: PPUSH
75592: CALL 28760 0 11
75596: GO 75599
75598: POP
// end ;
75599: PPOPN 11
75601: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75602: LD_VAR 0 1
75606: PPUSH
75607: LD_VAR 0 2
75611: PPUSH
75612: LD_VAR 0 3
75616: PPUSH
75617: LD_VAR 0 4
75621: PPUSH
75622: LD_VAR 0 5
75626: PPUSH
75627: CALL 30854 0 5
// end ; end_of_file
75631: PPOPN 5
75633: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75634: LD_VAR 0 1
75638: PPUSH
75639: LD_VAR 0 2
75643: PPUSH
75644: LD_VAR 0 3
75648: PPUSH
75649: LD_VAR 0 4
75653: PPUSH
75654: LD_VAR 0 5
75658: PPUSH
75659: LD_VAR 0 6
75663: PPUSH
75664: CALL 16453 0 6
// end ;
75668: PPOPN 6
75670: END
