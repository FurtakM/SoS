// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix , debug ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 77 0 0
// if debug then
  19: LD_EXP 34
  23: IFFALSE 40
// begin Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// end ; PrepareDifficulty ;
  40: CALL 10281 0 0
// PrepareRussianCommander ;
  44: CALL 11737 0 0
// PrepareSouthBase ;
  48: CALL 11833 0 0
// PrepareNorthBase ;
  52: CALL 12171 0 0
// PrepareOtherRussians ;
  56: CALL 12566 0 0
// PrepareHeroes ;
  60: CALL 10602 0 0
// PrepareLisSquad ;
  64: CALL 10963 0 0
// PrepareOtherAmericans ;
  68: CALL 11276 0 0
// Action ;
  72: CALL 329 0 0
// end ;
  76: END
// function Init ; begin
  77: LD_INT 0
  79: PPUSH
// debug := false ;
  80: LD_ADDR_EXP 34
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// mission_prefix := 02_ ;
  88: LD_ADDR_EXP 33
  92: PUSH
  93: LD_STRING 02_
  95: ST_TO_ADDR
// RuSoldMinLevel := 0 ;
  96: LD_ADDR_EXP 13
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// RuSoldMaxLevel := 0 ;
 104: LD_ADDR_EXP 14
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// hpJMM := 0 ;
 112: LD_ADDR_EXP 10
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// hpBobby := 0 ;
 120: LD_ADDR_EXP 11
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// hpCyrus := 0 ;
 128: LD_ADDR_EXP 12
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// cargoEscape := 0 ;
 136: LD_ADDR_EXP 20
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// mikhailStatus := 0 ;
 144: LD_ADDR_EXP 21
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// mikhailInBase := 0 ;
 152: LD_ADDR_EXP 22
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// mikhailDepot := 0 ;
 160: LD_ADDR_EXP 23
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// tigersRespawn := 0 ;
 168: LD_ADDR_EXP 30
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// cargoRespawn := 0 ;
 176: LD_ADDR_EXP 28
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cargoSee := 0 ;
 184: LD_ADDR_EXP 29
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// lastBattle := 0 ;
 192: LD_ADDR_EXP 27
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// deadsCounter := 0 ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// spotCorpses := 0 ;
 208: LD_ADDR_EXP 32
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// southBaseDefenders := [ ] ;
 216: LD_ADDR_EXP 25
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// northBaseDefenders := [ ] ;
 223: LD_ADDR_EXP 24
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// attackGroup := [ ] ;
 230: LD_ADDR_EXP 26
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// end ;
 237: LD_VAR 0 1
 241: RET
// every 0 0$1 trigger debug do var i ;
 242: LD_EXP 34
 246: IFFALSE 326
 248: GO 250
 250: DISABLE
 251: LD_INT 0
 253: PPUSH
// begin enable ;
 254: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
 255: LD_ADDR_VAR 0 1
 259: PUSH
 260: LD_INT 22
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 21
 272: PUSH
 273: LD_INT 1
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: LD_INT 3
 282: PUSH
 283: LD_INT 24
 285: PUSH
 286: LD_INT 1000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: PUSH
 307: FOR_IN
 308: IFFALSE 324
// SetLives ( i , 1000 ) ;
 310: LD_VAR 0 1
 314: PPUSH
 315: LD_INT 1000
 317: PPUSH
 318: CALL_OW 234
 322: GO 307
 324: POP
 325: POP
// end ; end_of_file
 326: PPOPN 1
 328: END
// export function Action ; var tmp ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// InGameOn ;
 333: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
 337: LD_EXP 1
 341: PPUSH
 342: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 346: LD_ADDR_VAR 0 2
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 4
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: LD_EXP 4
 384: PUSH
 385: EMPTY
 386: LIST
 387: DIFF
 388: ST_TO_ADDR
// if Cyrus and Bobby then
 389: LD_EXP 3
 393: PUSH
 394: LD_EXP 2
 398: AND
 399: IFFALSE 729
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 401: LD_EXP 3
 405: PPUSH
 406: LD_INT 43
 408: PPUSH
 409: LD_INT 72
 411: PPUSH
 412: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 416: LD_EXP 2
 420: PPUSH
 421: LD_INT 44
 423: PPUSH
 424: LD_INT 70
 426: PPUSH
 427: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 431: LD_EXP 1
 435: PPUSH
 436: LD_INT 46
 438: PPUSH
 439: LD_INT 73
 441: PPUSH
 442: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 446: LD_EXP 3
 450: PPUSH
 451: LD_STRING D1a-Cyrus-1
 453: PPUSH
 454: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 458: LD_EXP 1
 462: PPUSH
 463: LD_STRING D1a-JMM-1
 465: PPUSH
 466: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 470: LD_EXP 3
 474: PPUSH
 475: LD_INT 37
 477: PPUSH
 478: LD_INT 66
 480: PPUSH
 481: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 485: LD_EXP 2
 489: PPUSH
 490: LD_INT 41
 492: PPUSH
 493: LD_INT 67
 495: PPUSH
 496: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 500: LD_EXP 1
 504: PPUSH
 505: LD_INT 38
 507: PPUSH
 508: LD_INT 64
 510: PPUSH
 511: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 515: LD_EXP 2
 519: PPUSH
 520: LD_STRING D1a-Bobby-2
 522: PPUSH
 523: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 527: LD_EXP 3
 531: PPUSH
 532: LD_INT 35
 534: PPUSH
 535: LD_INT 62
 537: PPUSH
 538: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 542: LD_EXP 2
 546: PPUSH
 547: LD_INT 32
 549: PPUSH
 550: LD_INT 60
 552: PPUSH
 553: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_INT 35
 564: PPUSH
 565: LD_INT 60
 567: PPUSH
 568: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 572: LD_EXP 1
 576: PPUSH
 577: LD_STRING D1a-JMM-2
 579: PPUSH
 580: CALL_OW 88
// ComWalk ( Lisa ) ;
 584: LD_EXP 4
 588: PPUSH
 589: CALL_OW 138
// wait ( 0 0$1 ) ;
 593: LD_INT 35
 595: PPUSH
 596: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 600: LD_EXP 4
 604: PPUSH
 605: LD_EXP 1
 609: PPUSH
 610: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 614: LD_EXP 1
 618: PUSH
 619: LD_EXP 3
 623: PUSH
 624: LD_EXP 2
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: LIST
 633: PPUSH
 634: LD_EXP 4
 638: PPUSH
 639: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 643: LD_VAR 0 2
 647: PUSH
 648: LD_INT 1
 650: ARRAY
 651: PPUSH
 652: LD_INT 33
 654: PPUSH
 655: LD_INT 55
 657: PPUSH
 658: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 2
 669: ARRAY
 670: PPUSH
 671: LD_INT 30
 673: PPUSH
 674: LD_INT 54
 676: PPUSH
 677: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 1
 688: ARRAY
 689: PPUSH
 690: LD_EXP 1
 694: PPUSH
 695: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 699: LD_VAR 0 2
 703: PUSH
 704: LD_INT 2
 706: ARRAY
 707: PPUSH
 708: LD_EXP 1
 712: PPUSH
 713: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 717: LD_EXP 4
 721: PPUSH
 722: LD_STRING D1a-Lisa-2
 724: PPUSH
 725: CALL_OW 88
// end ; if Cyrus and not Bobby then
 729: LD_EXP 3
 733: PUSH
 734: LD_EXP 2
 738: NOT
 739: AND
 740: IFFALSE 945
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 742: LD_EXP 3
 746: PPUSH
 747: LD_INT 43
 749: PPUSH
 750: LD_INT 72
 752: PPUSH
 753: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 757: LD_EXP 1
 761: PPUSH
 762: LD_INT 46
 764: PPUSH
 765: LD_INT 73
 767: PPUSH
 768: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 772: LD_EXP 3
 776: PPUSH
 777: LD_STRING D1a-Cyrus-1
 779: PPUSH
 780: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 784: LD_EXP 1
 788: PPUSH
 789: LD_STRING D1a-JMM-1
 791: PPUSH
 792: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 796: LD_EXP 3
 800: PPUSH
 801: LD_INT 37
 803: PPUSH
 804: LD_INT 66
 806: PPUSH
 807: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 811: LD_EXP 1
 815: PPUSH
 816: LD_INT 38
 818: PPUSH
 819: LD_INT 64
 821: PPUSH
 822: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 826: LD_EXP 3
 830: PPUSH
 831: LD_STRING D1a-Cyrus-2
 833: PPUSH
 834: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 838: LD_EXP 3
 842: PPUSH
 843: LD_INT 35
 845: PPUSH
 846: LD_INT 62
 848: PPUSH
 849: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 853: LD_EXP 1
 857: PPUSH
 858: LD_INT 35
 860: PPUSH
 861: LD_INT 60
 863: PPUSH
 864: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 868: LD_EXP 1
 872: PPUSH
 873: LD_STRING D1a-JMM-2
 875: PPUSH
 876: CALL_OW 88
// ComWalk ( Lisa ) ;
 880: LD_EXP 4
 884: PPUSH
 885: CALL_OW 138
// wait ( 0 0$1 ) ;
 889: LD_INT 35
 891: PPUSH
 892: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 896: LD_EXP 4
 900: PPUSH
 901: LD_EXP 1
 905: PPUSH
 906: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 910: LD_EXP 4
 914: PPUSH
 915: LD_STRING D1a-Lisa-2
 917: PPUSH
 918: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 922: LD_EXP 1
 926: PUSH
 927: LD_EXP 3
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PPUSH
 936: LD_EXP 4
 940: PPUSH
 941: CALL_OW 119
// end ; if not Cyrus and Bobby then
 945: LD_EXP 3
 949: NOT
 950: PUSH
 951: LD_EXP 2
 955: AND
 956: IFFALSE 1235
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 958: LD_EXP 2
 962: PPUSH
 963: LD_INT 44
 965: PPUSH
 966: LD_INT 70
 968: PPUSH
 969: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 973: LD_EXP 1
 977: PPUSH
 978: LD_INT 46
 980: PPUSH
 981: LD_INT 73
 983: PPUSH
 984: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 988: LD_EXP 2
 992: PPUSH
 993: LD_STRING D1a-Bobby-1
 995: PPUSH
 996: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
1000: LD_EXP 1
1004: PPUSH
1005: LD_STRING D1a-JMM-1
1007: PPUSH
1008: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
1012: LD_EXP 2
1016: PPUSH
1017: LD_INT 37
1019: PPUSH
1020: LD_INT 66
1022: PPUSH
1023: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
1027: LD_EXP 1
1031: PPUSH
1032: LD_INT 38
1034: PPUSH
1035: LD_INT 64
1037: PPUSH
1038: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
1042: LD_EXP 2
1046: PPUSH
1047: LD_STRING D1a-Bobby-2
1049: PPUSH
1050: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
1054: LD_EXP 2
1058: PPUSH
1059: LD_INT 35
1061: PPUSH
1062: LD_INT 62
1064: PPUSH
1065: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
1069: LD_EXP 1
1073: PPUSH
1074: LD_INT 35
1076: PPUSH
1077: LD_INT 60
1079: PPUSH
1080: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
1084: LD_EXP 1
1088: PPUSH
1089: LD_STRING D1a-JMM-2
1091: PPUSH
1092: CALL_OW 88
// ComWalk ( Lisa ) ;
1096: LD_EXP 4
1100: PPUSH
1101: CALL_OW 138
// wait ( 0 0$1 ) ;
1105: LD_INT 35
1107: PPUSH
1108: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1112: LD_EXP 4
1116: PPUSH
1117: LD_EXP 1
1121: PPUSH
1122: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
1126: LD_EXP 1
1130: PUSH
1131: LD_EXP 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PPUSH
1140: LD_EXP 4
1144: PPUSH
1145: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1149: LD_VAR 0 2
1153: PUSH
1154: LD_INT 1
1156: ARRAY
1157: PPUSH
1158: LD_INT 33
1160: PPUSH
1161: LD_INT 55
1163: PPUSH
1164: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 2
1175: ARRAY
1176: PPUSH
1177: LD_INT 30
1179: PPUSH
1180: LD_INT 54
1182: PPUSH
1183: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PPUSH
1196: LD_EXP 1
1200: PPUSH
1201: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1205: LD_VAR 0 2
1209: PUSH
1210: LD_INT 2
1212: ARRAY
1213: PPUSH
1214: LD_EXP 1
1218: PPUSH
1219: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1223: LD_EXP 4
1227: PPUSH
1228: LD_STRING D1a-Lisa-2
1230: PPUSH
1231: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1235: LD_EXP 3
1239: NOT
1240: PUSH
1241: LD_EXP 2
1245: NOT
1246: AND
1247: IFFALSE 1461
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1249: LD_EXP 1
1253: PPUSH
1254: LD_INT 37
1256: PPUSH
1257: LD_INT 66
1259: PPUSH
1260: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1264: LD_EXP 1
1268: PPUSH
1269: LD_STRING D1b-JMM-1
1271: PPUSH
1272: CALL_OW 88
// ComCrawl ( JMM ) ;
1276: LD_EXP 1
1280: PPUSH
1281: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1285: LD_EXP 1
1289: PPUSH
1290: LD_INT 35
1292: PPUSH
1293: LD_INT 60
1295: PPUSH
1296: CALL_OW 171
// wait ( 0 0$8 ) ;
1300: LD_INT 280
1302: PPUSH
1303: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1307: LD_EXP 1
1311: PPUSH
1312: LD_STRING D1b-JMM-1a
1314: PPUSH
1315: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1319: LD_EXP 1
1323: PUSH
1324: LD_EXP 4
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: PPUSH
1333: CALL_OW 138
// wait ( 0 0$1 ) ;
1337: LD_INT 35
1339: PPUSH
1340: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1344: LD_EXP 4
1348: PPUSH
1349: LD_EXP 1
1353: PPUSH
1354: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1358: LD_EXP 1
1362: PUSH
1363: EMPTY
1364: LIST
1365: PPUSH
1366: LD_EXP 4
1370: PPUSH
1371: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1375: LD_VAR 0 2
1379: PUSH
1380: LD_INT 1
1382: ARRAY
1383: PPUSH
1384: LD_INT 33
1386: PPUSH
1387: LD_INT 55
1389: PPUSH
1390: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1394: LD_VAR 0 2
1398: PUSH
1399: LD_INT 2
1401: ARRAY
1402: PPUSH
1403: LD_INT 30
1405: PPUSH
1406: LD_INT 54
1408: PPUSH
1409: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1413: LD_VAR 0 2
1417: PUSH
1418: LD_INT 1
1420: ARRAY
1421: PPUSH
1422: LD_EXP 1
1426: PPUSH
1427: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1431: LD_VAR 0 2
1435: PUSH
1436: LD_INT 2
1438: ARRAY
1439: PPUSH
1440: LD_EXP 1
1444: PPUSH
1445: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1449: LD_EXP 4
1453: PPUSH
1454: LD_STRING D1b-Lisa-1
1456: PPUSH
1457: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1461: LD_EXP 1
1465: PPUSH
1466: LD_STRING D1-JMM-1
1468: PPUSH
1469: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1473: LD_EXP 4
1477: PPUSH
1478: LD_STRING D1-Lisa-1
1480: PPUSH
1481: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1485: LD_EXP 1
1489: PPUSH
1490: LD_STRING D1-JMM-2
1492: PPUSH
1493: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1497: LD_EXP 9
1501: PPUSH
1502: LD_STRING D1-Pow-2
1504: PPUSH
1505: CALL_OW 94
// if Cyrus then
1509: LD_EXP 3
1513: IFFALSE 1539
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1515: LD_EXP 3
1519: PPUSH
1520: LD_STRING D1-Cyrus-2
1522: PPUSH
1523: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1527: LD_EXP 1
1531: PPUSH
1532: LD_STRING D1-JMM-3
1534: PPUSH
1535: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1539: LD_EXP 9
1543: PPUSH
1544: LD_STRING D1-Pow-3
1546: PPUSH
1547: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1551: LD_EXP 1
1555: PPUSH
1556: LD_STRING D1-JMM-4
1558: PPUSH
1559: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1563: LD_EXP 9
1567: PPUSH
1568: LD_STRING D1-Pow-4
1570: PPUSH
1571: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1575: LD_EXP 9
1579: PPUSH
1580: LD_STRING D1-Pow-4a
1582: PPUSH
1583: CALL_OW 94
// if Cyrus then
1587: LD_EXP 3
1591: IFFALSE 1605
// Say ( Cyrus , D1-Cyrus-4 ) ;
1593: LD_EXP 3
1597: PPUSH
1598: LD_STRING D1-Cyrus-4
1600: PPUSH
1601: CALL_OW 88
// if Bobby then
1605: LD_EXP 2
1609: IFFALSE 1647
// begin Say ( Bobby , D1-Bobby-4 ) ;
1611: LD_EXP 2
1615: PPUSH
1616: LD_STRING D1-Bobby-4
1618: PPUSH
1619: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1623: LD_EXP 4
1627: PPUSH
1628: LD_STRING D1-Lisa-4
1630: PPUSH
1631: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1635: LD_EXP 1
1639: PPUSH
1640: LD_STRING D1-JMM-5
1642: PPUSH
1643: CALL_OW 88
// end ; InGameOff ;
1647: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1651: LD_INT 22
1653: PUSH
1654: LD_INT 4
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PPUSH
1661: CALL_OW 69
1665: PUSH
1666: LD_EXP 6
1670: PUSH
1671: LD_EXP 7
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: DIFF
1680: PPUSH
1681: LD_INT 1
1683: PPUSH
1684: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1688: LD_STRING M1
1690: PPUSH
1691: CALL_OW 337
// SaveForQuickRestart ;
1695: CALL_OW 22
// end ;
1699: LD_VAR 0 1
1703: RET
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1704: LD_INT 7
1706: PPUSH
1707: LD_INT 22
1709: PUSH
1710: LD_INT 1
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PPUSH
1717: CALL_OW 70
1721: PUSH
1722: LD_INT 0
1724: GREATER
1725: IFFALSE 2138
1727: GO 1729
1729: DISABLE
// begin InGameOn ;
1730: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1734: LD_INT 22
1736: PUSH
1737: LD_INT 1
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 21
1746: PUSH
1747: LD_INT 1
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PPUSH
1758: CALL_OW 69
1762: PPUSH
1763: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1767: LD_INT 24
1769: PPUSH
1770: LD_INT 32
1772: PPUSH
1773: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1777: LD_EXP 5
1781: PPUSH
1782: LD_INT 4
1784: PPUSH
1785: LD_INT 1
1787: PPUSH
1788: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1792: LD_EXP 5
1796: PPUSH
1797: LD_INT 4
1799: PPUSH
1800: CALL_OW 336
// wait ( 0 0$1 ) ;
1804: LD_INT 35
1806: PPUSH
1807: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1811: LD_EXP 5
1815: PPUSH
1816: LD_INT 27
1818: PPUSH
1819: LD_INT 38
1821: PPUSH
1822: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1826: LD_EXP 5
1830: PPUSH
1831: LD_EXP 1
1835: PPUSH
1836: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1840: LD_INT 22
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: LD_INT 21
1852: PUSH
1853: LD_INT 1
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PPUSH
1864: CALL_OW 69
1868: PUSH
1869: LD_EXP 5
1873: PUSH
1874: EMPTY
1875: LIST
1876: DIFF
1877: PPUSH
1878: LD_EXP 5
1882: PPUSH
1883: CALL_OW 119
// wait ( 0 0$1 ) ;
1887: LD_INT 35
1889: PPUSH
1890: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1894: LD_EXP 5
1898: PPUSH
1899: LD_STRING D2a-Khat-1
1901: PPUSH
1902: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1906: LD_EXP 1
1910: PPUSH
1911: LD_STRING D2a-JMM-1
1913: PPUSH
1914: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1918: LD_EXP 5
1922: PPUSH
1923: LD_STRING D2a-Khat-2
1925: PPUSH
1926: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1930: LD_EXP 1
1934: PPUSH
1935: LD_STRING D2a-JMM-2
1937: PPUSH
1938: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1942: LD_EXP 5
1946: PPUSH
1947: LD_STRING D2a-Khat-3
1949: PPUSH
1950: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1954: LD_EXP 1
1958: PPUSH
1959: LD_STRING D2a-JMM-3
1961: PPUSH
1962: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1966: LD_EXP 5
1970: PPUSH
1971: LD_STRING D2a-Khat-4
1973: PPUSH
1974: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1978: LD_EXP 1
1982: PPUSH
1983: LD_STRING D2a-JMM-4
1985: PPUSH
1986: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1990: LD_EXP 5
1994: PPUSH
1995: LD_STRING D2a-Khat-5
1997: PPUSH
1998: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
2002: LD_EXP 1
2006: PPUSH
2007: LD_STRING D2a-JMM-5
2009: PPUSH
2010: CALL_OW 88
// InGameOff ;
2014: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) then
2018: LD_INT 22
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PUSH
2028: LD_INT 21
2030: PUSH
2031: LD_INT 1
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PUSH
2038: LD_INT 3
2040: PUSH
2041: LD_INT 24
2043: PUSH
2044: LD_INT 800
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PPUSH
2060: CALL_OW 69
2064: IFFALSE 2138
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
2066: LD_EXP 5
2070: PPUSH
2071: LD_INT 22
2073: PUSH
2074: LD_INT 1
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PUSH
2081: LD_INT 21
2083: PUSH
2084: LD_INT 1
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 3
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 1000
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: PPUSH
2113: CALL_OW 69
2117: PUSH
2118: LD_INT 1
2120: ARRAY
2121: PPUSH
2122: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
2126: LD_EXP 5
2130: PPUSH
2131: LD_STRING D2b-Khat-1
2133: PPUSH
2134: CALL_OW 88
// end ; end ;
2138: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) do var i , distanceTab , min , tmp , p ;
2139: LD_INT 15
2141: PPUSH
2142: LD_INT 22
2144: PUSH
2145: LD_INT 1
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PPUSH
2152: CALL_OW 70
2156: IFFALSE 3353
2158: GO 2160
2160: DISABLE
2161: LD_INT 0
2163: PPUSH
2164: PPUSH
2165: PPUSH
2166: PPUSH
2167: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2168: LD_ADDR_VAR 0 2
2172: PUSH
2173: LD_INT 999
2175: PUSH
2176: LD_INT 999
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2186: LD_ADDR_VAR 0 4
2190: PUSH
2191: LD_INT 22
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 21
2203: PUSH
2204: LD_INT 1
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PPUSH
2215: CALL_OW 69
2219: PUSH
2220: LD_EXP 1
2224: PUSH
2225: LD_EXP 2
2229: PUSH
2230: LD_EXP 3
2234: PUSH
2235: LD_EXP 4
2239: PUSH
2240: LD_EXP 5
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: DIFF
2252: ST_TO_ADDR
// PrepareDeadSoldiers ;
2253: CALL 11418 0 0
// spotCorpses = 1 ;
2257: LD_ADDR_EXP 32
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2265: LD_INT 70
2267: PPUSH
2268: CALL_OW 67
// InGameOn ;
2272: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2276: LD_INT 23
2278: PPUSH
2279: LD_INT 12
2281: PPUSH
2282: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: LD_VAR 0 2
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: PUSH
2300: LD_INT 2
2302: ARRAY
2303: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2304: LD_ADDR_VAR 0 1
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 1
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 21
2321: PUSH
2322: LD_INT 1
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PPUSH
2333: CALL_OW 69
2337: PUSH
2338: LD_EXP 1
2342: PUSH
2343: LD_EXP 5
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: DIFF
2352: PUSH
2353: FOR_IN
2354: IFFALSE 2405
// if IsOK ( i ) then
2356: LD_VAR 0 1
2360: PPUSH
2361: CALL_OW 302
2365: IFFALSE 2403
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2367: LD_ADDR_VAR 0 2
2371: PUSH
2372: LD_VAR 0 2
2376: PUSH
2377: LD_VAR 0 1
2381: PUSH
2382: LD_VAR 0 1
2386: PPUSH
2387: LD_INT 16
2389: PPUSH
2390: CALL_OW 299
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PUSH
2399: EMPTY
2400: LIST
2401: ADD
2402: ST_TO_ADDR
2403: GO 2353
2405: POP
2406: POP
// for i = 2 to distanceTab do
2407: LD_ADDR_VAR 0 1
2411: PUSH
2412: DOUBLE
2413: LD_INT 2
2415: DEC
2416: ST_TO_ADDR
2417: LD_VAR 0 2
2421: PUSH
2422: FOR_TO
2423: IFFALSE 2469
// if distanceTab [ i ] [ 2 ] < min then
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PUSH
2436: LD_INT 2
2438: ARRAY
2439: PUSH
2440: LD_VAR 0 3
2444: LESS
2445: IFFALSE 2467
// min = distanceTab [ i ] [ 2 ] ;
2447: LD_ADDR_VAR 0 3
2451: PUSH
2452: LD_VAR 0 2
2456: PUSH
2457: LD_VAR 0 1
2461: ARRAY
2462: PUSH
2463: LD_INT 2
2465: ARRAY
2466: ST_TO_ADDR
2467: GO 2422
2469: POP
2470: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2471: LD_ADDR_VAR 0 1
2475: PUSH
2476: LD_INT 22
2478: PUSH
2479: LD_INT 1
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: LD_INT 21
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: PPUSH
2500: CALL_OW 69
2504: PUSH
2505: LD_EXP 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: DIFF
2513: PUSH
2514: FOR_IN
2515: IFFALSE 2585
// begin ComMoveToArea ( i , DeadCutscene ) ;
2517: LD_VAR 0 1
2521: PPUSH
2522: LD_INT 28
2524: PPUSH
2525: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2529: LD_EXP 1
2533: PPUSH
2534: LD_INT 30
2536: PPUSH
2537: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2541: LD_VAR 0 1
2545: PPUSH
2546: LD_INT 23
2548: PPUSH
2549: LD_INT 11
2551: PPUSH
2552: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2556: LD_EXP 1
2560: PPUSH
2561: LD_INT 23
2563: PPUSH
2564: LD_INT 11
2566: PPUSH
2567: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2571: LD_EXP 35
2575: PPUSH
2576: LD_INT 250
2578: PPUSH
2579: CALL_OW 234
// end ;
2583: GO 2514
2585: POP
2586: POP
// for i = 2 to distanceTab do
2587: LD_ADDR_VAR 0 1
2591: PUSH
2592: DOUBLE
2593: LD_INT 2
2595: DEC
2596: ST_TO_ADDR
2597: LD_VAR 0 2
2601: PUSH
2602: FOR_TO
2603: IFFALSE 2989
// begin if distanceTab [ i ] [ 2 ] = min then
2605: LD_VAR 0 2
2609: PUSH
2610: LD_VAR 0 1
2614: ARRAY
2615: PUSH
2616: LD_INT 2
2618: ARRAY
2619: PUSH
2620: LD_VAR 0 3
2624: EQUAL
2625: IFFALSE 2987
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2627: LD_VAR 0 2
2631: PUSH
2632: LD_VAR 0 1
2636: ARRAY
2637: PUSH
2638: LD_INT 1
2640: ARRAY
2641: PUSH
2642: LD_EXP 2
2646: EQUAL
2647: IFFALSE 2661
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2649: LD_EXP 2
2653: PPUSH
2654: LD_STRING DCorpses-Bobby-1
2656: PPUSH
2657: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2661: LD_VAR 0 2
2665: PUSH
2666: LD_VAR 0 1
2670: ARRAY
2671: PUSH
2672: LD_INT 1
2674: ARRAY
2675: PUSH
2676: LD_EXP 3
2680: EQUAL
2681: IFFALSE 2695
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2683: LD_EXP 3
2687: PPUSH
2688: LD_STRING DCorpses-Cyrus-1
2690: PPUSH
2691: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2695: LD_VAR 0 2
2699: PUSH
2700: LD_VAR 0 1
2704: ARRAY
2705: PUSH
2706: LD_INT 1
2708: ARRAY
2709: PUSH
2710: LD_EXP 4
2714: EQUAL
2715: IFFALSE 2729
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2717: LD_EXP 4
2721: PPUSH
2722: LD_STRING DCorpses-Lisa-1
2724: PPUSH
2725: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2729: LD_VAR 0 2
2733: PUSH
2734: LD_VAR 0 1
2738: ARRAY
2739: PUSH
2740: LD_INT 1
2742: ARRAY
2743: PUSH
2744: LD_VAR 0 4
2748: PUSH
2749: LD_INT 1
2751: ARRAY
2752: EQUAL
2753: PUSH
2754: LD_VAR 0 4
2758: PUSH
2759: LD_INT 1
2761: ARRAY
2762: PPUSH
2763: CALL_OW 258
2767: PUSH
2768: LD_INT 1
2770: EQUAL
2771: AND
2772: IFFALSE 2790
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2774: LD_VAR 0 4
2778: PUSH
2779: LD_INT 1
2781: ARRAY
2782: PPUSH
2783: LD_STRING DCorpses-Sol1-1
2785: PPUSH
2786: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2790: LD_VAR 0 2
2794: PUSH
2795: LD_VAR 0 1
2799: ARRAY
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PUSH
2805: LD_VAR 0 4
2809: PUSH
2810: LD_INT 1
2812: ARRAY
2813: EQUAL
2814: PUSH
2815: LD_VAR 0 4
2819: PUSH
2820: LD_INT 1
2822: ARRAY
2823: PPUSH
2824: CALL_OW 258
2828: PUSH
2829: LD_INT 2
2831: EQUAL
2832: AND
2833: IFFALSE 2851
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2835: LD_VAR 0 4
2839: PUSH
2840: LD_INT 1
2842: ARRAY
2843: PPUSH
2844: LD_STRING DCorpses-FSol1-1
2846: PPUSH
2847: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2851: LD_VAR 0 2
2855: PUSH
2856: LD_VAR 0 1
2860: ARRAY
2861: PUSH
2862: LD_INT 1
2864: ARRAY
2865: PUSH
2866: LD_VAR 0 4
2870: PUSH
2871: LD_INT 2
2873: ARRAY
2874: EQUAL
2875: PUSH
2876: LD_VAR 0 4
2880: PUSH
2881: LD_INT 2
2883: ARRAY
2884: PPUSH
2885: CALL_OW 258
2889: PUSH
2890: LD_INT 1
2892: EQUAL
2893: AND
2894: IFFALSE 2912
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2896: LD_VAR 0 4
2900: PUSH
2901: LD_INT 2
2903: ARRAY
2904: PPUSH
2905: LD_STRING DCorpses-Sol1-1
2907: PPUSH
2908: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2912: LD_VAR 0 2
2916: PUSH
2917: LD_VAR 0 1
2921: ARRAY
2922: PUSH
2923: LD_INT 1
2925: ARRAY
2926: PUSH
2927: LD_VAR 0 4
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: EQUAL
2936: PUSH
2937: LD_VAR 0 4
2941: PUSH
2942: LD_INT 2
2944: ARRAY
2945: PPUSH
2946: CALL_OW 258
2950: PUSH
2951: LD_INT 2
2953: EQUAL
2954: AND
2955: IFFALSE 2973
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2957: LD_VAR 0 4
2961: PUSH
2962: LD_INT 2
2964: ARRAY
2965: PPUSH
2966: LD_STRING DCorpses-FSol1-1
2968: PPUSH
2969: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2973: LD_EXP 35
2977: PPUSH
2978: LD_INT 150
2980: PPUSH
2981: CALL_OW 234
// break ;
2985: GO 2989
// end ; end ;
2987: GO 2602
2989: POP
2990: POP
// p := 0 ;
2991: LD_ADDR_VAR 0 5
2995: PUSH
2996: LD_INT 0
2998: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2999: LD_INT 35
3001: PPUSH
3002: CALL_OW 67
// p := p + 1 ;
3006: LD_ADDR_VAR 0 5
3010: PUSH
3011: LD_VAR 0 5
3015: PUSH
3016: LD_INT 1
3018: PLUS
3019: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
3020: LD_ADDR_VAR 0 1
3024: PUSH
3025: LD_INT 22
3027: PUSH
3028: LD_INT 1
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 21
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 69
3053: PUSH
3054: LD_EXP 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: DIFF
3062: PUSH
3063: FOR_IN
3064: IFFALSE 3134
// begin ComMoveToArea ( i , DeadCutscene ) ;
3066: LD_VAR 0 1
3070: PPUSH
3071: LD_INT 28
3073: PPUSH
3074: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
3078: LD_EXP 1
3082: PPUSH
3083: LD_INT 30
3085: PPUSH
3086: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_INT 23
3097: PPUSH
3098: LD_INT 11
3100: PPUSH
3101: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
3105: LD_EXP 1
3109: PPUSH
3110: LD_INT 23
3112: PPUSH
3113: LD_INT 11
3115: PPUSH
3116: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
3120: LD_EXP 35
3124: PPUSH
3125: LD_INT 250
3127: PPUSH
3128: CALL_OW 234
// end ;
3132: GO 3063
3134: POP
3135: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3136: LD_EXP 1
3140: PPUSH
3141: LD_INT 30
3143: PPUSH
3144: CALL_OW 308
3148: PUSH
3149: LD_VAR 0 5
3153: PUSH
3154: LD_INT 16
3156: GREATEREQUAL
3157: OR
3158: IFFALSE 2999
// wait ( 0 0$1 ) ;
3160: LD_INT 35
3162: PPUSH
3163: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING DCorpses-JMM-1
3174: PPUSH
3175: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3179: LD_EXP 35
3183: PPUSH
3184: LD_INT 100
3186: PPUSH
3187: CALL_OW 234
// if IsOK ( Khatam ) then
3191: LD_EXP 5
3195: PPUSH
3196: CALL_OW 302
3200: IFFALSE 3337
// begin repeat wait ( 0 0$1 ) ;
3202: LD_INT 35
3204: PPUSH
3205: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3209: LD_EXP 5
3213: PPUSH
3214: LD_EXP 35
3218: PPUSH
3219: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3223: LD_EXP 5
3227: PPUSH
3228: LD_EXP 35
3232: PPUSH
3233: CALL_OW 296
3237: PUSH
3238: LD_INT 2
3240: LESS
3241: IFFALSE 3202
// spotCorpses = 0 ;
3243: LD_ADDR_EXP 32
3247: PUSH
3248: LD_INT 0
3250: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3251: LD_EXP 35
3255: PPUSH
3256: LD_INT 10
3258: PPUSH
3259: CALL_OW 234
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// KillUnit ( DyingSold ) ;
3270: LD_EXP 35
3274: PPUSH
3275: CALL_OW 66
// wait ( 0 0$1 ) ;
3279: LD_INT 35
3281: PPUSH
3282: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3286: LD_EXP 1
3290: PUSH
3291: LD_EXP 5
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PPUSH
3300: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3304: LD_EXP 5
3308: PPUSH
3309: LD_EXP 1
3313: PPUSH
3314: CALL_OW 119
// wait ( 0 0$1 ) ;
3318: LD_INT 35
3320: PPUSH
3321: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3325: LD_EXP 5
3329: PPUSH
3330: LD_STRING DCorpses-Khat-1
3332: PPUSH
3333: CALL_OW 88
// end ; InGameOff ;
3337: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3341: LD_EXP 1
3345: PPUSH
3346: LD_STRING DCorpses-JMM-2
3348: PPUSH
3349: CALL_OW 88
// end ;
3353: PPOPN 5
3355: END
// every 0 0$1 trigger spotCorpses = 1 do
3356: LD_EXP 32
3360: PUSH
3361: LD_INT 1
3363: EQUAL
3364: IFFALSE 3382
3366: GO 3368
3368: DISABLE
// begin enable ;
3369: ENABLE
// SetLives ( DyingSold , 10 ) ;
3370: LD_EXP 35
3374: PPUSH
3375: LD_INT 10
3377: PPUSH
3378: CALL_OW 234
// end ;
3382: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3383: LD_INT 8
3385: PPUSH
3386: LD_INT 22
3388: PUSH
3389: LD_INT 1
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: PPUSH
3396: CALL_OW 70
3400: PUSH
3401: LD_INT 22
3403: PUSH
3404: LD_INT 1
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: PPUSH
3411: CALL_OW 69
3415: PPUSH
3416: LD_EXP 7
3420: PPUSH
3421: CALL_OW 74
3425: PPUSH
3426: LD_EXP 7
3430: PPUSH
3431: CALL_OW 296
3435: PUSH
3436: LD_INT 13
3438: LESS
3439: OR
3440: IFFALSE 3621
3442: GO 3444
3444: DISABLE
3445: LD_INT 0
3447: PPUSH
// begin InGameOn ;
3448: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3452: LD_EXP 7
3456: PPUSH
3457: LD_INT 250
3459: PPUSH
3460: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 , 700 ] [ Difficulty ] ) ;
3464: LD_EXP 6
3468: PPUSH
3469: LD_INT 1000
3471: PUSH
3472: LD_INT 800
3474: PUSH
3475: LD_INT 750
3477: PUSH
3478: LD_INT 700
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: PUSH
3487: LD_OWVAR 67
3491: ARRAY
3492: PPUSH
3493: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3497: LD_INT 3
3499: PPUSH
3500: LD_INT 4
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3513: LD_EXP 6
3517: PUSH
3518: LD_EXP 7
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PPUSH
3527: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) union FilterAllUnits ( [ f_side , 4 ] ) do
3531: LD_ADDR_VAR 0 1
3535: PUSH
3536: LD_INT 9
3538: PPUSH
3539: LD_INT 22
3541: PUSH
3542: LD_INT 3
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PPUSH
3549: CALL_OW 70
3553: PUSH
3554: LD_INT 22
3556: PUSH
3557: LD_INT 4
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PPUSH
3564: CALL_OW 69
3568: UNION
3569: PUSH
3570: FOR_IN
3571: IFFALSE 3584
// ComFree ( i ) ;
3573: LD_VAR 0 1
3577: PPUSH
3578: CALL_OW 139
3582: GO 3570
3584: POP
3585: POP
// wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// InGameOff ;
3593: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3597: LD_EXP 6
3601: PPUSH
3602: LD_STRING DF-Sol1-1
3604: PPUSH
3605: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3609: LD_EXP 1
3613: PPUSH
3614: LD_STRING DF-JMM-1
3616: PPUSH
3617: CALL_OW 88
// end ;
3621: PPOPN 1
3623: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3624: LD_INT 19
3626: PPUSH
3627: LD_INT 22
3629: PUSH
3630: LD_INT 3
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 70
3641: PUSH
3642: LD_INT 0
3644: EQUAL
3645: IFFALSE 3754
3647: GO 3649
3649: DISABLE
// begin if not IsDead ( Brian ) then
3650: LD_EXP 6
3654: PPUSH
3655: CALL_OW 301
3659: NOT
3660: IFFALSE 3674
// SetSide ( Brian , 1 ) ;
3662: LD_EXP 6
3666: PPUSH
3667: LD_INT 1
3669: PPUSH
3670: CALL_OW 235
// if not IsDead ( Jerry ) then
3674: LD_EXP 7
3678: PPUSH
3679: CALL_OW 301
3683: NOT
3684: IFFALSE 3698
// SetSide ( Jerry , 1 ) ;
3686: LD_EXP 7
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3698: LD_INT 22
3700: PUSH
3701: LD_INT 1
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PUSH
3708: LD_INT 25
3710: PUSH
3711: LD_INT 4
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PPUSH
3722: CALL_OW 69
3726: IFFALSE 3742
// Say ( JMM , DFa-JMM-1 ) else
3728: LD_EXP 1
3732: PPUSH
3733: LD_STRING DFa-JMM-1
3735: PPUSH
3736: CALL_OW 88
3740: GO 3754
// Say ( JMM , DFa-JMM-1a ) ;
3742: LD_EXP 1
3746: PPUSH
3747: LD_STRING DFa-JMM-1a
3749: PPUSH
3750: CALL_OW 88
// end ;
3754: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3755: LD_INT 19
3757: PPUSH
3758: LD_INT 22
3760: PUSH
3761: LD_INT 3
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PPUSH
3768: CALL_OW 70
3772: PUSH
3773: LD_INT 0
3775: EQUAL
3776: PUSH
3777: LD_EXP 6
3781: PPUSH
3782: CALL_OW 302
3786: NOT
3787: AND
3788: IFFALSE 3874
3790: GO 3792
3792: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3793: LD_INT 35
3795: PPUSH
3796: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3800: LD_EXP 6
3804: PPUSH
3805: CALL_OW 256
3809: PUSH
3810: LD_INT 250
3812: GREATER
3813: IFFALSE 3793
// Say ( Brian , DFb-Sol1-1 ) ;
3815: LD_EXP 6
3819: PPUSH
3820: LD_STRING DFb-Sol1-1
3822: PPUSH
3823: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3827: LD_EXP 6
3831: PPUSH
3832: LD_INT 78
3834: PPUSH
3835: LD_INT 74
3837: PPUSH
3838: CALL_OW 111
// if IsDead ( Jerry ) then
3842: LD_EXP 7
3846: PPUSH
3847: CALL_OW 301
3851: IFFALSE 3867
// Say ( Brian , DFb-Sol1-1a ) else
3853: LD_EXP 6
3857: PPUSH
3858: LD_STRING DFb-Sol1-1a
3860: PPUSH
3861: CALL_OW 88
3865: GO 3874
// SetAchievement ( ACH_JERRY ) ;
3867: LD_STRING ACH_JERRY
3869: PPUSH
3870: CALL_OW 543
// end ;
3874: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3875: LD_INT 22
3877: PUSH
3878: LD_INT 1
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PUSH
3885: LD_INT 21
3887: PUSH
3888: LD_INT 2
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PPUSH
3899: CALL_OW 69
3903: PUSH
3904: LD_INT 0
3906: EQUAL
3907: IFFALSE 3999
3909: GO 3911
3911: DISABLE
3912: LD_INT 0
3914: PPUSH
// begin enable ;
3915: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3916: LD_ADDR_VAR 0 1
3920: PUSH
3921: LD_INT 22
3923: PUSH
3924: LD_INT 3
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 21
3933: PUSH
3934: LD_INT 3
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: LD_INT 30
3943: PUSH
3944: LD_INT 31
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: PPUSH
3956: CALL_OW 69
3960: PUSH
3961: FOR_IN
3962: IFFALSE 3997
// begin if See ( 1 , i ) then
3964: LD_INT 1
3966: PPUSH
3967: LD_VAR 0 1
3971: PPUSH
3972: CALL_OW 292
3976: IFFALSE 3995
// begin disable ;
3978: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3979: LD_EXP 1
3983: PPUSH
3984: LD_STRING DX1-JMM-1
3986: PPUSH
3987: CALL_OW 88
// exit ;
3991: POP
3992: POP
3993: GO 3999
// end ; end ;
3995: GO 3961
3997: POP
3998: POP
// end ;
3999: PPOPN 1
4001: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 11
4007: PPUSH
4008: CALL_OW 294
4012: IFFALSE 4275
4014: GO 4016
4016: DISABLE
4017: LD_INT 0
4019: PPUSH
4020: PPUSH
4021: PPUSH
// begin DialogueOn ;
4022: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
4026: LD_INT 11
4028: PPUSH
4029: LD_INT 22
4031: PUSH
4032: LD_INT 3
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PUSH
4039: LD_INT 21
4041: PUSH
4042: LD_INT 1
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PPUSH
4053: CALL_OW 70
4057: PUSH
4058: LD_INT 1
4060: ARRAY
4061: PPUSH
4062: LD_STRING DX3-Rus1-1
4064: PPUSH
4065: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
4069: LD_EXP 1
4073: PPUSH
4074: LD_STRING DX3-JMM-1
4076: PPUSH
4077: CALL_OW 88
// DialogueOff ;
4081: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
4085: LD_ADDR_VAR 0 1
4089: PUSH
4090: LD_INT 11
4092: PPUSH
4093: LD_INT 22
4095: PUSH
4096: LD_INT 3
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: LD_INT 25
4105: PUSH
4106: LD_INT 1
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PPUSH
4117: CALL_OW 70
4121: PUSH
4122: FOR_IN
4123: IFFALSE 4143
// southBaseDefenders = southBaseDefenders ^ i ;
4125: LD_ADDR_EXP 25
4129: PUSH
4130: LD_EXP 25
4134: PUSH
4135: LD_VAR 0 1
4139: ADD
4140: ST_TO_ADDR
4141: GO 4122
4143: POP
4144: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 , 0 0$2 ] [ Difficulty ] ) ;
4145: LD_INT 175
4147: PUSH
4148: LD_INT 140
4150: PUSH
4151: LD_INT 105
4153: PUSH
4154: LD_INT 70
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_OWVAR 67
4167: ARRAY
4168: PPUSH
4169: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4173: LD_ADDR_VAR 0 3
4177: PUSH
4178: LD_INT 22
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 21
4190: PUSH
4191: LD_INT 1
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 25
4200: PUSH
4201: LD_INT 3
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: LIST
4212: PPUSH
4213: CALL_OW 69
4217: ST_TO_ADDR
// if not mech then
4218: LD_VAR 0 3
4222: NOT
4223: IFFALSE 4227
// exit ;
4225: GO 4275
// ComExitBuilding ( mech ) ;
4227: LD_VAR 0 3
4231: PPUSH
4232: CALL_OW 122
// wait ( 0 0$1 ) ;
4236: LD_INT 35
4238: PPUSH
4239: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4243: LD_VAR 0 3
4247: PUSH
4248: LD_INT 1
4250: ARRAY
4251: PPUSH
4252: LD_INT 5
4254: PPUSH
4255: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4259: LD_VAR 0 3
4263: PUSH
4264: LD_INT 2
4266: ARRAY
4267: PPUSH
4268: LD_INT 4
4270: PPUSH
4271: CALL_OW 180
// end ;
4275: PPOPN 3
4277: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4278: LD_INT 1
4280: PPUSH
4281: LD_INT 5
4283: PPUSH
4284: CALL_OW 292
4288: PUSH
4289: LD_INT 1
4291: PPUSH
4292: LD_INT 4
4294: PPUSH
4295: CALL_OW 292
4299: OR
4300: IFFALSE 4384
4302: GO 4304
4304: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4305: LD_INT 5
4307: PUSH
4308: LD_INT 4
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PPUSH
4315: CALL_OW 85
// if IsOK ( Bobby ) then
4319: LD_EXP 2
4323: PPUSH
4324: CALL_OW 302
4328: IFFALSE 4364
// begin DialogueOn ;
4330: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4334: LD_EXP 2
4338: PPUSH
4339: LD_STRING DX2-Bobby-1
4341: PPUSH
4342: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4346: LD_EXP 1
4350: PPUSH
4351: LD_STRING DX2-JMM-1a
4353: PPUSH
4354: CALL_OW 88
// DialogueOff ;
4358: CALL_OW 7
// end else
4362: GO 4384
// begin DialogueOn ;
4364: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4368: LD_EXP 1
4372: PPUSH
4373: LD_STRING DX2-JMM-1
4375: PPUSH
4376: CALL_OW 88
// DialogueOff ;
4380: CALL_OW 7
// end ; end ;
4384: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4385: LD_INT 22
4387: PUSH
4388: LD_INT 1
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PUSH
4395: LD_INT 23
4397: PUSH
4398: LD_INT 3
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PUSH
4405: LD_INT 21
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 34
4417: PUSH
4418: LD_INT 42
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: IFFALSE 4856
4437: GO 4439
4439: DISABLE
4440: LD_INT 0
4442: PPUSH
4443: PPUSH
4444: PPUSH
4445: PPUSH
4446: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4447: LD_ADDR_VAR 0 1
4451: PUSH
4452: LD_INT 22
4454: PUSH
4455: LD_INT 1
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PUSH
4462: LD_INT 23
4464: PUSH
4465: LD_INT 3
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 2
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 34
4484: PUSH
4485: LD_INT 42
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: PPUSH
4498: CALL_OW 69
4502: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4503: LD_ADDR_VAR 0 3
4507: PUSH
4508: LD_INT 22
4510: PUSH
4511: LD_INT 1
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: LD_INT 21
4520: PUSH
4521: LD_INT 1
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: LD_INT 26
4530: PUSH
4531: LD_INT 1
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: PPUSH
4543: CALL_OW 69
4547: PUSH
4548: LD_EXP 1
4552: PUSH
4553: LD_EXP 3
4557: PUSH
4558: LD_EXP 2
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: LIST
4567: DIFF
4568: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4569: LD_ADDR_VAR 0 4
4573: PUSH
4574: LD_INT 22
4576: PUSH
4577: LD_INT 1
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 21
4586: PUSH
4587: LD_INT 1
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 26
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 69
4613: PUSH
4614: LD_EXP 4
4618: PUSH
4619: EMPTY
4620: LIST
4621: DIFF
4622: ST_TO_ADDR
// if not tmp then
4623: LD_VAR 0 1
4627: NOT
4628: IFFALSE 4632
// exit ;
4630: GO 4856
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4632: LD_ADDR_VAR 0 2
4636: PUSH
4637: LD_VAR 0 1
4641: PUSH
4642: LD_INT 1
4644: ARRAY
4645: PPUSH
4646: CALL_OW 311
4650: ST_TO_ADDR
// if not speaker then
4651: LD_VAR 0 2
4655: NOT
4656: IFFALSE 4660
// exit ;
4658: GO 4856
// DialogueOn ;
4660: CALL_OW 6
// if speaker = JMM then
4664: LD_VAR 0 2
4668: PUSH
4669: LD_EXP 1
4673: EQUAL
4674: IFFALSE 4708
// begin if Lisa then
4676: LD_EXP 4
4680: IFFALSE 4694
// Say ( Lisa , DX2b-Lisa-1 ) ;
4682: LD_EXP 4
4686: PPUSH
4687: LD_STRING DX2b-Lisa-1
4689: PPUSH
4690: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4694: LD_EXP 1
4698: PPUSH
4699: LD_STRING DX2b-JMM-1
4701: PPUSH
4702: CALL_OW 88
// end else
4706: GO 4852
// begin Say ( JMM , DX2a-JMM-1 ) ;
4708: LD_EXP 1
4712: PPUSH
4713: LD_STRING DX2a-JMM-1
4715: PPUSH
4716: CALL_OW 88
// if speaker = Bobby then
4720: LD_VAR 0 2
4724: PUSH
4725: LD_EXP 2
4729: EQUAL
4730: IFFALSE 4744
// Say ( Bobby , DX2a-Bobby-1 ) ;
4732: LD_EXP 2
4736: PPUSH
4737: LD_STRING DX2a-Bobby-1
4739: PPUSH
4740: CALL_OW 88
// if speaker = Cyrus then
4744: LD_VAR 0 2
4748: PUSH
4749: LD_EXP 3
4753: EQUAL
4754: IFFALSE 4768
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4756: LD_EXP 3
4760: PPUSH
4761: LD_STRING DX2a-Cyrus-1
4763: PPUSH
4764: CALL_OW 88
// if speaker = Lisa then
4768: LD_VAR 0 2
4772: PUSH
4773: LD_EXP 4
4777: EQUAL
4778: IFFALSE 4792
// Say ( Lisa , DX2a-Lisa-1 ) ;
4780: LD_EXP 4
4784: PPUSH
4785: LD_STRING DX2a-Lisa-1
4787: PPUSH
4788: CALL_OW 88
// if speaker in temp1 then
4792: LD_VAR 0 2
4796: PUSH
4797: LD_VAR 0 3
4801: IN
4802: IFFALSE 4816
// Say ( speaker , DX2a-Sol1-1 ) ;
4804: LD_VAR 0 2
4808: PPUSH
4809: LD_STRING DX2a-Sol1-1
4811: PPUSH
4812: CALL_OW 88
// if speaker in temp2 then
4816: LD_VAR 0 2
4820: PUSH
4821: LD_VAR 0 4
4825: IN
4826: IFFALSE 4840
// Say ( speaker , DX2a-FSol1-1 ) ;
4828: LD_VAR 0 2
4832: PPUSH
4833: LD_STRING DX2a-FSol1-1
4835: PPUSH
4836: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4840: LD_EXP 1
4844: PPUSH
4845: LD_STRING DX2a-JMM-2
4847: PPUSH
4848: CALL_OW 88
// end ; DialogueOff ;
4852: CALL_OW 7
// end ;
4856: PPOPN 5
4858: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4859: LD_INT 1
4861: PPUSH
4862: CALL_OW 255
4866: PUSH
4867: LD_INT 1
4869: EQUAL
4870: PUSH
4871: LD_INT 10
4873: PPUSH
4874: CALL_OW 255
4878: PUSH
4879: LD_INT 1
4881: EQUAL
4882: OR
4883: IFFALSE 4943
4885: GO 4887
4887: DISABLE
// begin DialogueOn ;
4888: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4892: LD_EXP 1
4896: PPUSH
4897: LD_STRING D3-JMM-1
4899: PPUSH
4900: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4904: LD_EXP 9
4908: PPUSH
4909: LD_STRING D3-Pow-1
4911: PPUSH
4912: CALL_OW 94
// if IsOK ( Cyrus ) then
4916: LD_EXP 3
4920: PPUSH
4921: CALL_OW 302
4925: IFFALSE 4939
// Say ( Cyrus , D3-Cyrus-1 ) ;
4927: LD_EXP 3
4931: PPUSH
4932: LD_STRING D3-Cyrus-1
4934: PPUSH
4935: CALL_OW 88
// DialogueOff ;
4939: CALL_OW 7
// end ;
4943: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , tmp , i ;
4944: LD_INT 1
4946: PPUSH
4947: CALL_OW 255
4951: PUSH
4952: LD_INT 1
4954: EQUAL
4955: PUSH
4956: LD_INT 10
4958: PPUSH
4959: CALL_OW 255
4963: PUSH
4964: LD_INT 1
4966: EQUAL
4967: AND
4968: IFFALSE 6358
4970: GO 4972
4972: DISABLE
4973: LD_INT 0
4975: PPUSH
4976: PPUSH
4977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4978: LD_ADDR_VAR 0 2
4982: PUSH
4983: LD_INT 22
4985: PUSH
4986: LD_INT 3
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 21
4995: PUSH
4996: LD_INT 1
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PPUSH
5007: CALL_OW 69
5011: ST_TO_ADDR
// if tmp then
5012: LD_VAR 0 2
5016: IFFALSE 5077
// begin for i in tmp do
5018: LD_ADDR_VAR 0 3
5022: PUSH
5023: LD_VAR 0 2
5027: PUSH
5028: FOR_IN
5029: IFFALSE 5075
// begin if IsInUnit ( i ) then
5031: LD_VAR 0 3
5035: PPUSH
5036: CALL_OW 310
5040: IFFALSE 5051
// ComExitBuilding ( i ) ;
5042: LD_VAR 0 3
5046: PPUSH
5047: CALL_OW 122
// wait ( 0 0$1 ) ;
5051: LD_INT 35
5053: PPUSH
5054: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
5058: LD_VAR 0 3
5062: PPUSH
5063: LD_INT 54
5065: PPUSH
5066: LD_INT 17
5068: PPUSH
5069: CALL_OW 174
// end ;
5073: GO 5028
5075: POP
5076: POP
// end ; wait ( 0 0$03 ) ;
5077: LD_INT 105
5079: PPUSH
5080: CALL_OW 67
// DialogueOn ;
5084: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5088: LD_EXP 1
5092: PPUSH
5093: LD_STRING D3a-JMM-1
5095: PPUSH
5096: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5100: LD_EXP 9
5104: PPUSH
5105: LD_STRING D3a-Pow-1
5107: PPUSH
5108: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5112: LD_EXP 1
5116: PPUSH
5117: LD_STRING D3a-JMM-2
5119: PPUSH
5120: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5124: LD_EXP 9
5128: PPUSH
5129: LD_STRING D3a-Pow-2
5131: PPUSH
5132: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5136: LD_EXP 1
5140: PPUSH
5141: LD_STRING D3a-JMM-3
5143: PPUSH
5144: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5148: LD_EXP 9
5152: PPUSH
5153: LD_STRING D3a-Pow-3
5155: PPUSH
5156: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5160: LD_EXP 1
5164: PPUSH
5165: LD_STRING D3a-JMM-4
5167: PPUSH
5168: CALL_OW 88
// DialogueOff ;
5172: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5176: LD_STRING M2
5178: PPUSH
5179: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5183: LD_EXP 1
5187: PPUSH
5188: LD_STRING D3b-JMM-1
5190: PPUSH
5191: CALL_OW 88
// Hint ( Depot2 ) ;
5195: LD_STRING Depot2
5197: PPUSH
5198: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5202: LD_INT 35
5204: PPUSH
5205: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5209: LD_INT 22
5211: PPUSH
5212: LD_INT 22
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 25
5224: PUSH
5225: LD_INT 2
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PPUSH
5236: CALL_OW 70
5240: PUSH
5241: LD_INT 22
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 21
5253: PUSH
5254: LD_INT 1
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL_OW 69
5269: NOT
5270: AND
5271: IFFALSE 5202
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5273: LD_ADDR_VAR 0 1
5277: PUSH
5278: LD_INT 22
5280: PUSH
5281: LD_INT 1
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: LD_INT 23
5290: PUSH
5291: LD_INT 1
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PUSH
5298: LD_INT 25
5300: PUSH
5301: LD_INT 2
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: PUSH
5308: LD_INT 50
5310: PUSH
5311: EMPTY
5312: LIST
5313: PUSH
5314: LD_INT 56
5316: PUSH
5317: EMPTY
5318: LIST
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: PPUSH
5327: CALL_OW 69
5331: PUSH
5332: LD_EXP 1
5336: PUSH
5337: LD_EXP 5
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: DIFF
5346: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5347: LD_INT 35
5349: PPUSH
5350: CALL_OW 67
// until temp > 0 ;
5354: LD_VAR 0 1
5358: PUSH
5359: LD_INT 0
5361: GREATER
5362: IFFALSE 5273
// wait ( 0 0$5 ) ;
5364: LD_INT 175
5366: PPUSH
5367: CALL_OW 67
// PrepareRussianHeroes ;
5371: CALL 11575 0 0
// InGameOn ;
5375: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5379: LD_EXP 8
5383: PPUSH
5384: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5388: LD_EXP 1
5392: PUSH
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PPUSH
5406: LD_EXP 8
5410: PPUSH
5411: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5415: LD_EXP 8
5419: PPUSH
5420: LD_VAR 0 1
5424: PUSH
5425: LD_INT 1
5427: ARRAY
5428: PPUSH
5429: CALL_OW 119
// wait ( 0 0$02 ) ;
5433: LD_INT 70
5435: PPUSH
5436: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5440: LD_EXP 8
5444: PPUSH
5445: LD_STRING D4-Mikh-1
5447: PPUSH
5448: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5452: LD_VAR 0 1
5456: PUSH
5457: LD_INT 1
5459: ARRAY
5460: PPUSH
5461: CALL_OW 258
5465: PUSH
5466: LD_INT 1
5468: EQUAL
5469: IFFALSE 5487
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5471: LD_VAR 0 1
5475: PUSH
5476: LD_INT 1
5478: ARRAY
5479: PPUSH
5480: LD_STRING D4-Sol1-1
5482: PPUSH
5483: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5487: LD_VAR 0 1
5491: PUSH
5492: LD_INT 1
5494: ARRAY
5495: PPUSH
5496: CALL_OW 258
5500: PUSH
5501: LD_INT 2
5503: EQUAL
5504: IFFALSE 5522
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5506: LD_VAR 0 1
5510: PUSH
5511: LD_INT 1
5513: ARRAY
5514: PPUSH
5515: LD_STRING D4-FSol1-1
5517: PPUSH
5518: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5522: LD_EXP 8
5526: PPUSH
5527: LD_STRING D4-Mikh-2
5529: PPUSH
5530: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5534: LD_VAR 0 1
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PPUSH
5543: CALL_OW 258
5547: PUSH
5548: LD_INT 1
5550: EQUAL
5551: IFFALSE 5569
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5553: LD_VAR 0 1
5557: PUSH
5558: LD_INT 1
5560: ARRAY
5561: PPUSH
5562: LD_STRING D4-Sol1-2
5564: PPUSH
5565: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5569: LD_VAR 0 1
5573: PUSH
5574: LD_INT 1
5576: ARRAY
5577: PPUSH
5578: CALL_OW 258
5582: PUSH
5583: LD_INT 2
5585: EQUAL
5586: IFFALSE 5604
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5588: LD_VAR 0 1
5592: PUSH
5593: LD_INT 1
5595: ARRAY
5596: PPUSH
5597: LD_STRING D4-FSol1-2
5599: PPUSH
5600: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5604: LD_EXP 8
5608: PPUSH
5609: LD_STRING D4-Mikh-3
5611: PPUSH
5612: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5616: LD_VAR 0 1
5620: PUSH
5621: LD_INT 1
5623: ARRAY
5624: PPUSH
5625: CALL_OW 258
5629: PUSH
5630: LD_INT 1
5632: EQUAL
5633: IFFALSE 5651
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5635: LD_VAR 0 1
5639: PUSH
5640: LD_INT 1
5642: ARRAY
5643: PPUSH
5644: LD_STRING D4-Sol1-3
5646: PPUSH
5647: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5651: LD_VAR 0 1
5655: PUSH
5656: LD_INT 1
5658: ARRAY
5659: PPUSH
5660: CALL_OW 258
5664: PUSH
5665: LD_INT 2
5667: EQUAL
5668: IFFALSE 5686
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5670: LD_VAR 0 1
5674: PUSH
5675: LD_INT 1
5677: ARRAY
5678: PPUSH
5679: LD_STRING D4-FSol1-3
5681: PPUSH
5682: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5686: LD_EXP 8
5690: PPUSH
5691: LD_STRING D4-Mikh-4
5693: PPUSH
5694: CALL_OW 88
// case Query ( Qs1 ) of 1 :
5698: LD_STRING Qs1
5700: PPUSH
5701: CALL_OW 97
5705: PUSH
5706: LD_INT 1
5708: DOUBLE
5709: EQUAL
5710: IFTRUE 5714
5712: GO 5749
5714: POP
// begin InGameOff ;
5715: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5719: LD_INT 1
5721: PPUSH
5722: LD_INT 6
5724: PPUSH
5725: LD_INT 2
5727: PPUSH
5728: LD_INT 1
5730: PPUSH
5731: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5735: LD_EXP 8
5739: PPUSH
5740: LD_INT 17
5742: PPUSH
5743: CALL_OW 113
// end ; 2 :
5747: GO 6342
5749: LD_INT 2
5751: DOUBLE
5752: EQUAL
5753: IFTRUE 5757
5755: GO 6307
5757: POP
// begin repeat wait ( 0 0$1 ) ;
5758: LD_INT 35
5760: PPUSH
5761: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5765: LD_VAR 0 1
5769: PUSH
5770: LD_INT 1
5772: ARRAY
5773: PPUSH
5774: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5778: LD_VAR 0 1
5782: PUSH
5783: LD_INT 1
5785: ARRAY
5786: PPUSH
5787: LD_EXP 1
5791: PPUSH
5792: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5796: LD_EXP 8
5800: PPUSH
5801: LD_EXP 1
5805: PPUSH
5806: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5810: LD_EXP 1
5814: PPUSH
5815: LD_EXP 8
5819: PPUSH
5820: CALL_OW 296
5824: PUSH
5825: LD_INT 5
5827: LESS
5828: IFFALSE 5758
// ComTurnUnit ( Mikhail , JMM ) ;
5830: LD_EXP 8
5834: PPUSH
5835: LD_EXP 1
5839: PPUSH
5840: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5844: LD_EXP 1
5848: PPUSH
5849: LD_STRING D4b-JMM-1
5851: PPUSH
5852: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5856: LD_EXP 8
5860: PPUSH
5861: LD_STRING D4b-Mikh-1
5863: PPUSH
5864: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5868: LD_EXP 1
5872: PPUSH
5873: LD_STRING D4b-JMM-2
5875: PPUSH
5876: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5880: LD_EXP 8
5884: PPUSH
5885: LD_STRING D4b-Mikh-2
5887: PPUSH
5888: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5892: LD_EXP 1
5896: PPUSH
5897: LD_STRING D4b-JMM-3
5899: PPUSH
5900: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5904: LD_EXP 8
5908: PPUSH
5909: LD_STRING D4b-Mikh-3
5911: PPUSH
5912: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5916: LD_EXP 1
5920: PPUSH
5921: LD_STRING D4b-JMM-4
5923: PPUSH
5924: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5928: LD_EXP 8
5932: PPUSH
5933: LD_STRING D4b-Mikh-4
5935: PPUSH
5936: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5940: LD_EXP 1
5944: PPUSH
5945: LD_STRING D4b-JMM-5
5947: PPUSH
5948: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5952: LD_EXP 8
5956: PPUSH
5957: LD_STRING D4b-Mikh-5
5959: PPUSH
5960: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5964: LD_EXP 1
5968: PPUSH
5969: LD_STRING D4b-JMM-6
5971: PPUSH
5972: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5976: LD_EXP 8
5980: PPUSH
5981: LD_STRING D4b-Mikh-6
5983: PPUSH
5984: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5988: LD_EXP 1
5992: PPUSH
5993: LD_STRING D4b-JMM-7
5995: PPUSH
5996: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
6000: LD_EXP 8
6004: PPUSH
6005: LD_STRING D4b-Mikh-7
6007: PPUSH
6008: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6012: LD_VAR 0 1
6016: PUSH
6017: LD_INT 1
6019: ARRAY
6020: PPUSH
6021: CALL_OW 258
6025: PUSH
6026: LD_INT 1
6028: EQUAL
6029: IFFALSE 6047
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6031: LD_VAR 0 1
6035: PUSH
6036: LD_INT 1
6038: ARRAY
6039: PPUSH
6040: LD_STRING D4b-Sol1-7
6042: PPUSH
6043: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6047: LD_VAR 0 1
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PPUSH
6056: CALL_OW 258
6060: PUSH
6061: LD_INT 2
6063: EQUAL
6064: IFFALSE 6082
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6066: LD_VAR 0 1
6070: PUSH
6071: LD_INT 1
6073: ARRAY
6074: PPUSH
6075: LD_STRING D4b-FSol1-7
6077: PPUSH
6078: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6082: LD_EXP 1
6086: PPUSH
6087: LD_STRING D4b-JMM-8
6089: PPUSH
6090: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6094: LD_VAR 0 1
6098: PUSH
6099: LD_INT 1
6101: ARRAY
6102: PPUSH
6103: CALL_OW 258
6107: PUSH
6108: LD_INT 1
6110: EQUAL
6111: IFFALSE 6129
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6113: LD_VAR 0 1
6117: PUSH
6118: LD_INT 1
6120: ARRAY
6121: PPUSH
6122: LD_STRING D4b-Sol1-8
6124: PPUSH
6125: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6129: LD_VAR 0 1
6133: PUSH
6134: LD_INT 1
6136: ARRAY
6137: PPUSH
6138: CALL_OW 258
6142: PUSH
6143: LD_INT 2
6145: EQUAL
6146: IFFALSE 6164
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6148: LD_VAR 0 1
6152: PUSH
6153: LD_INT 1
6155: ARRAY
6156: PPUSH
6157: LD_STRING D4b-FSol1-8
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6164: LD_EXP 1
6168: PPUSH
6169: LD_STRING D4b-JMM-9
6171: PPUSH
6172: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6176: LD_EXP 8
6180: PPUSH
6181: LD_INT 1
6183: PPUSH
6184: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6188: LD_ADDR_VAR 0 3
6192: PUSH
6193: LD_INT 22
6195: PUSH
6196: LD_INT 1
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: PUSH
6203: EMPTY
6204: LIST
6205: PPUSH
6206: CALL_OW 69
6210: PUSH
6211: FOR_IN
6212: IFFALSE 6225
// ComFree ( i ) ;
6214: LD_VAR 0 3
6218: PPUSH
6219: CALL_OW 139
6223: GO 6211
6225: POP
6226: POP
// repeat wait ( 0 0$1 ) ;
6227: LD_INT 35
6229: PPUSH
6230: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6234: LD_EXP 8
6238: PPUSH
6239: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6243: LD_EXP 8
6247: PUSH
6248: LD_VAR 0 1
6252: PUSH
6253: LD_INT 1
6255: ARRAY
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PPUSH
6261: LD_INT 1
6263: PPUSH
6264: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6268: LD_EXP 8
6272: PPUSH
6273: CALL_OW 310
6277: IFFALSE 6227
// mikhailDepot = IsInUnit ( Mikhail ) ;
6279: LD_ADDR_EXP 23
6283: PUSH
6284: LD_EXP 8
6288: PPUSH
6289: CALL_OW 310
6293: ST_TO_ADDR
// InGameOff ;
6294: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6298: LD_STRING M3
6300: PPUSH
6301: CALL_OW 337
// end ; 3 :
6305: GO 6342
6307: LD_INT 3
6309: DOUBLE
6310: EQUAL
6311: IFTRUE 6315
6313: GO 6341
6315: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6316: LD_EXP 8
6320: PPUSH
6321: LD_INT 17
6323: PPUSH
6324: CALL_OW 113
// wait ( 0 0$3 ) ;
6328: LD_INT 105
6330: PPUSH
6331: CALL_OW 67
// InGameOff ;
6335: CALL_OW 9
// end ; end ;
6339: GO 6342
6341: POP
// PrepareTigers ;
6342: CALL 14863 0 0
// RussianTrap ;
6346: CALL 9980 0 0
// tigersRespawn = 1 ;
6350: LD_ADDR_EXP 30
6354: PUSH
6355: LD_INT 1
6357: ST_TO_ADDR
// end ;
6358: PPOPN 3
6360: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6361: LD_INT 1
6363: PPUSH
6364: CALL_OW 255
6368: PUSH
6369: LD_INT 1
6371: EQUAL
6372: PUSH
6373: LD_INT 10
6375: PPUSH
6376: CALL_OW 255
6380: PUSH
6381: LD_INT 1
6383: EQUAL
6384: AND
6385: PUSH
6386: LD_INT 1
6388: PPUSH
6389: CALL_OW 274
6393: PPUSH
6394: LD_INT 1
6396: PPUSH
6397: CALL_OW 275
6401: PUSH
6402: LD_INT 100
6404: GREATEREQUAL
6405: AND
6406: IFFALSE 6555
6408: GO 6410
6410: DISABLE
6411: LD_INT 0
6413: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6414: LD_INT 2100
6416: PPUSH
6417: LD_INT 4200
6419: PPUSH
6420: CALL_OW 12
6424: PUSH
6425: LD_INT 1050
6427: PLUS
6428: PPUSH
6429: CALL_OW 67
// PrepareCargoBays ;
6433: CALL 12758 0 0
// cargoRespawn = 1 ;
6437: LD_ADDR_EXP 28
6441: PUSH
6442: LD_INT 1
6444: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6445: LD_ADDR_VAR 0 1
6449: PUSH
6450: LD_EXP 15
6454: PUSH
6455: LD_EXP 16
6459: PUSH
6460: LD_EXP 17
6464: PUSH
6465: LD_EXP 18
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6476: LD_VAR 0 1
6480: PPUSH
6481: LD_INT 17
6483: PPUSH
6484: LD_INT 10
6486: PPUSH
6487: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6491: LD_VAR 0 1
6495: PPUSH
6496: LD_INT 36
6498: PPUSH
6499: LD_INT 13
6501: PPUSH
6502: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6506: LD_VAR 0 1
6510: PPUSH
6511: LD_INT 40
6513: PPUSH
6514: LD_INT 20
6516: PPUSH
6517: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6521: LD_VAR 0 1
6525: PPUSH
6526: LD_INT 53
6528: PPUSH
6529: LD_INT 16
6531: PPUSH
6532: CALL_OW 171
// wait ( 0 0$5 ) ;
6536: LD_INT 175
6538: PPUSH
6539: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6543: LD_EXP 17
6547: PPUSH
6548: LD_STRING D5-Rus2-1
6550: PPUSH
6551: CALL_OW 88
// end ;
6555: PPOPN 1
6557: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6558: LD_EXP 28
6562: PUSH
6563: LD_INT 1
6565: EQUAL
6566: IFFALSE 6721
6568: GO 6570
6570: DISABLE
6571: LD_INT 0
6573: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6574: LD_ADDR_VAR 0 1
6578: PUSH
6579: LD_INT 22
6581: PUSH
6582: LD_INT 3
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 21
6591: PUSH
6592: LD_INT 2
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 34
6601: PUSH
6602: LD_INT 51
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: PPUSH
6614: CALL_OW 69
6618: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6619: LD_INT 105
6621: PPUSH
6622: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6626: LD_VAR 0 1
6630: PPUSH
6631: LD_INT 3
6633: PUSH
6634: LD_INT 60
6636: PUSH
6637: EMPTY
6638: LIST
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PPUSH
6644: CALL_OW 72
6648: PUSH
6649: LD_VAR 0 1
6653: PPUSH
6654: LD_INT 3
6656: PUSH
6657: LD_INT 24
6659: PUSH
6660: LD_INT 980
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PPUSH
6671: CALL_OW 72
6675: OR
6676: IFFALSE 6619
// ComMoveXY ( cargos , 7 , 9 ) ;
6678: LD_VAR 0 1
6682: PPUSH
6683: LD_INT 7
6685: PPUSH
6686: LD_INT 9
6688: PPUSH
6689: CALL_OW 111
// cargoSee = 1 ;
6693: LD_ADDR_EXP 29
6697: PUSH
6698: LD_INT 1
6700: ST_TO_ADDR
// cargoEscape = 1 ;
6701: LD_ADDR_EXP 20
6705: PUSH
6706: LD_INT 1
6708: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6709: LD_EXP 17
6713: PPUSH
6714: LD_STRING D5-Rus2-1a
6716: PPUSH
6717: CALL_OW 88
// end ;
6721: PPOPN 1
6723: END
// every 0 0$1 trigger cargoEscape do
6724: LD_EXP 20
6728: IFFALSE 6875
6730: GO 6732
6732: DISABLE
// begin enable ;
6733: ENABLE
// ComMoveToArea ( [ cargo1 , cargo2 ] , RussianAttack ) ;
6734: LD_EXP 15
6738: PUSH
6739: LD_EXP 16
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: PPUSH
6748: LD_INT 13
6750: PPUSH
6751: CALL_OW 113
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6755: LD_EXP 15
6759: PPUSH
6760: LD_INT 13
6762: PPUSH
6763: CALL_OW 308
6767: PUSH
6768: LD_EXP 17
6772: PPUSH
6773: LD_INT 13
6775: PPUSH
6776: CALL_OW 308
6780: OR
6781: IFFALSE 6815
// begin RemoveUnit ( cargo1 ) ;
6783: LD_EXP 15
6787: PPUSH
6788: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6792: LD_EXP 17
6796: PPUSH
6797: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6801: LD_ADDR_EXP 20
6805: PUSH
6806: LD_EXP 20
6810: PUSH
6811: LD_INT 1
6813: PLUS
6814: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6815: LD_EXP 16
6819: PPUSH
6820: LD_INT 13
6822: PPUSH
6823: CALL_OW 308
6827: PUSH
6828: LD_EXP 18
6832: PPUSH
6833: LD_INT 13
6835: PPUSH
6836: CALL_OW 308
6840: OR
6841: IFFALSE 6875
// begin RemoveUnit ( cargo2 ) ;
6843: LD_EXP 16
6847: PPUSH
6848: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6852: LD_EXP 18
6856: PPUSH
6857: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6861: LD_ADDR_EXP 20
6865: PUSH
6866: LD_EXP 20
6870: PUSH
6871: LD_INT 1
6873: PLUS
6874: ST_TO_ADDR
// end ; end ;
6875: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
6876: LD_EXP 20
6880: PUSH
6881: LD_INT 1
6883: GREATER
6884: IFFALSE 7133
6886: GO 6888
6888: DISABLE
6889: LD_INT 0
6891: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
6892: LD_INT 4
6894: PPUSH
6895: LD_INT 1
6897: PPUSH
6898: LD_INT 1
6900: PPUSH
6901: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6905: LD_INT 31
6907: PPUSH
6908: LD_INT 1
6910: PPUSH
6911: LD_INT 1
6913: PPUSH
6914: CALL_OW 324
// Hint ( Bunker ) ;
6918: LD_STRING Bunker
6920: PPUSH
6921: CALL_OW 339
// if IsOK ( Jerry ) then
6925: LD_EXP 7
6929: PPUSH
6930: CALL_OW 302
6934: IFFALSE 6950
// Say ( Jerry , D5a-Sol1-1 ) else
6936: LD_EXP 7
6940: PPUSH
6941: LD_STRING D5a-Sol1-1
6943: PPUSH
6944: CALL_OW 88
6948: GO 7036
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
6950: LD_ADDR_VAR 0 1
6954: PUSH
6955: LD_INT 22
6957: PUSH
6958: LD_INT 1
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: LD_INT 26
6967: PUSH
6968: LD_INT 1
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PPUSH
6979: CALL_OW 69
6983: PUSH
6984: LD_EXP 1
6988: PUSH
6989: LD_EXP 2
6993: PUSH
6994: LD_EXP 3
6998: PUSH
6999: LD_EXP 5
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: DIFF
7010: ST_TO_ADDR
// if not speaker then
7011: LD_VAR 0 1
7015: NOT
7016: IFFALSE 7020
// exit ;
7018: GO 7133
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7020: LD_VAR 0 1
7024: PUSH
7025: LD_INT 1
7027: ARRAY
7028: PPUSH
7029: LD_STRING D5a-Sol1-1
7031: PPUSH
7032: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7036: LD_EXP 1
7040: PPUSH
7041: LD_STRING D5a-JMM-1
7043: PPUSH
7044: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
7048: LD_INT 22
7050: PPUSH
7051: LD_INT 22
7053: PUSH
7054: LD_INT 1
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 25
7063: PUSH
7064: LD_INT 2
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PPUSH
7075: CALL_OW 70
7079: IFFALSE 7133
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
7081: LD_INT 22
7083: PPUSH
7084: LD_INT 22
7086: PUSH
7087: LD_INT 1
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: PUSH
7094: LD_INT 25
7096: PUSH
7097: LD_INT 2
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: PPUSH
7108: CALL_OW 70
7112: PUSH
7113: LD_INT 1
7115: ARRAY
7116: PPUSH
7117: LD_INT 31
7119: PPUSH
7120: LD_INT 44
7122: PPUSH
7123: LD_INT 13
7125: PPUSH
7126: LD_INT 1
7128: PPUSH
7129: CALL_OW 145
// end ;
7133: PPOPN 1
7135: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7136: LD_INT 1
7138: PPUSH
7139: CALL_OW 255
7143: PUSH
7144: LD_INT 3
7146: EQUAL
7147: PUSH
7148: LD_INT 1
7150: PPUSH
7151: CALL_OW 256
7155: PUSH
7156: LD_INT 1000
7158: LESS
7159: AND
7160: PUSH
7161: LD_INT 10
7163: PPUSH
7164: CALL_OW 255
7168: PUSH
7169: LD_INT 3
7171: EQUAL
7172: PUSH
7173: LD_INT 10
7175: PPUSH
7176: CALL_OW 256
7180: PUSH
7181: LD_INT 1000
7183: LESS
7184: AND
7185: OR
7186: IFFALSE 7203
7188: GO 7190
7190: DISABLE
// Say ( JMM , D8-JMM-1 ) ;
7191: LD_EXP 1
7195: PPUSH
7196: LD_STRING D8-JMM-1
7198: PPUSH
7199: CALL_OW 88
7203: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7204: LD_EXP 8
7208: PPUSH
7209: CALL_OW 310
7213: PUSH
7214: LD_INT 1
7216: EQUAL
7217: PUSH
7218: LD_EXP 22
7222: PUSH
7223: LD_INT 3
7225: EQUAL
7226: NOT
7227: AND
7228: IFFALSE 7250
7230: GO 7232
7232: DISABLE
// begin enable ;
7233: ENABLE
// mikhailInBase = 1 ;
7234: LD_ADDR_EXP 22
7238: PUSH
7239: LD_INT 1
7241: ST_TO_ADDR
// mikhailStatus = 1 ;
7242: LD_ADDR_EXP 21
7246: PUSH
7247: LD_INT 1
7249: ST_TO_ADDR
// end ;
7250: END
// export function AskMikhail ; begin
7251: LD_INT 0
7253: PPUSH
// case Query ( QMikh2 ) of 1 :
7254: LD_STRING QMikh2
7256: PPUSH
7257: CALL_OW 97
7261: PUSH
7262: LD_INT 1
7264: DOUBLE
7265: EQUAL
7266: IFTRUE 7270
7268: GO 7337
7270: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7271: LD_INT 1
7273: PPUSH
7274: LD_INT 6
7276: PPUSH
7277: LD_INT 2
7279: PPUSH
7280: LD_INT 1
7282: PPUSH
7283: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7287: LD_EXP 8
7291: PPUSH
7292: LD_INT 6
7294: PPUSH
7295: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7299: LD_EXP 8
7303: PPUSH
7304: CALL_OW 122
// wait ( 0 0$1 ) ;
7308: LD_INT 35
7310: PPUSH
7311: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7315: LD_EXP 8
7319: PPUSH
7320: LD_INT 17
7322: PPUSH
7323: CALL_OW 113
// mikhailInbase = 0 ;
7327: LD_ADDR_EXP 22
7331: PUSH
7332: LD_INT 0
7334: ST_TO_ADDR
// end ; 2 :
7335: GO 7578
7337: LD_INT 2
7339: DOUBLE
7340: EQUAL
7341: IFTRUE 7345
7343: GO 7518
7345: POP
// begin mikhailInBase = 2 ;
7346: LD_ADDR_EXP 22
7350: PUSH
7351: LD_INT 2
7353: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7354: LD_EXP 8
7358: PPUSH
7359: LD_INT 6
7361: PPUSH
7362: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7366: LD_EXP 8
7370: PPUSH
7371: CALL_OW 122
// wait ( 0 0$1 ) ;
7375: LD_INT 35
7377: PPUSH
7378: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7382: LD_EXP 8
7386: PPUSH
7387: LD_EXP 8
7391: PPUSH
7392: CALL_OW 250
7396: PUSH
7397: LD_INT 2
7399: PLUS
7400: PPUSH
7401: LD_EXP 8
7405: PPUSH
7406: CALL_OW 251
7410: PUSH
7411: LD_INT 2
7413: PLUS
7414: PPUSH
7415: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7419: LD_EXP 8
7423: PPUSH
7424: LD_EXP 8
7428: PPUSH
7429: CALL_OW 250
7433: PUSH
7434: LD_INT 1
7436: PLUS
7437: PPUSH
7438: LD_EXP 8
7442: PPUSH
7443: CALL_OW 251
7447: PUSH
7448: LD_INT 2
7450: PLUS
7451: PPUSH
7452: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7456: LD_EXP 8
7460: PPUSH
7461: LD_EXP 8
7465: PPUSH
7466: CALL_OW 250
7470: PUSH
7471: LD_INT 2
7473: PLUS
7474: PPUSH
7475: LD_EXP 8
7479: PPUSH
7480: CALL_OW 251
7484: PPUSH
7485: CALL_OW 171
// wait ( 0 0$5 ) ;
7489: LD_INT 175
7491: PPUSH
7492: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7496: LD_EXP 8
7500: PPUSH
7501: LD_INT 25
7503: PPUSH
7504: CALL_OW 113
// mikhailInBase = 4 ;
7508: LD_ADDR_EXP 22
7512: PUSH
7513: LD_INT 4
7515: ST_TO_ADDR
// end ; 3 :
7516: GO 7578
7518: LD_INT 3
7520: DOUBLE
7521: EQUAL
7522: IFTRUE 7526
7524: GO 7577
7526: POP
// begin SetSide ( Mikhail , 6 ) ;
7527: LD_EXP 8
7531: PPUSH
7532: LD_INT 6
7534: PPUSH
7535: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7539: LD_EXP 8
7543: PPUSH
7544: CALL_OW 122
// wait ( 0 0$1 ) ;
7548: LD_INT 35
7550: PPUSH
7551: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7555: LD_EXP 8
7559: PPUSH
7560: LD_INT 17
7562: PPUSH
7563: CALL_OW 113
// mikhailInbase = 3 ;
7567: LD_ADDR_EXP 22
7571: PUSH
7572: LD_INT 3
7574: ST_TO_ADDR
// end ; end ;
7575: GO 7578
7577: POP
// end ;
7578: LD_VAR 0 1
7582: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7583: LD_EXP 8
7587: PPUSH
7588: LD_INT 25
7590: PPUSH
7591: CALL_OW 308
7595: PUSH
7596: LD_EXP 22
7600: PUSH
7601: LD_INT 4
7603: EQUAL
7604: AND
7605: IFFALSE 7709
7607: GO 7609
7609: DISABLE
// begin enable ;
7610: ENABLE
// mikhailInBase = 1 ;
7611: LD_ADDR_EXP 22
7615: PUSH
7616: LD_INT 1
7618: ST_TO_ADDR
// InGameOn ;
7619: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7623: LD_INT 1
7625: PPUSH
7626: LD_INT 6
7628: PPUSH
7629: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7633: LD_INT 35
7635: PPUSH
7636: CALL_OW 67
// if Carry ( Mikhail ) then
7640: LD_EXP 8
7644: PPUSH
7645: CALL_OW 281
7649: IFFALSE 7660
// ComUnload ( Mikhail ) ;
7651: LD_EXP 8
7655: PPUSH
7656: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7660: LD_EXP 8
7664: PPUSH
7665: LD_INT 1
7667: PPUSH
7668: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7672: LD_EXP 8
7676: PPUSH
7677: CALL_OW 310
7681: IFFALSE 7633
// SetSide ( dep1 , 1 ) ;
7683: LD_INT 1
7685: PPUSH
7686: LD_INT 1
7688: PPUSH
7689: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7693: LD_EXP 8
7697: PPUSH
7698: LD_INT 1
7700: PPUSH
7701: CALL_OW 235
// InGameOff ;
7705: CALL_OW 9
// end ;
7709: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7710: LD_EXP 8
7714: PPUSH
7715: CALL_OW 310
7719: PUSH
7720: LD_EXP 22
7724: PUSH
7725: LD_INT 3
7727: EQUAL
7728: NOT
7729: AND
7730: IFFALSE 7865
7732: GO 7734
7734: DISABLE
// begin enable ;
7735: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7736: LD_INT 22
7738: PUSH
7739: LD_INT 1
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: PUSH
7746: LD_INT 21
7748: PUSH
7749: LD_INT 1
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: PUSH
7756: LD_INT 91
7758: PUSH
7759: LD_EXP 8
7763: PPUSH
7764: CALL_OW 310
7768: PUSH
7769: LD_INT 10
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: LIST
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: LIST
7781: PPUSH
7782: CALL_OW 69
7786: PUSH
7787: LD_INT 1
7789: EQUAL
7790: IFFALSE 7865
// begin mikhailStatus = 4 ;
7792: LD_ADDR_EXP 21
7796: PUSH
7797: LD_INT 4
7799: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
7800: LD_INT 1
7802: PPUSH
7803: LD_INT 6
7805: PPUSH
7806: LD_INT 2
7808: PPUSH
7809: LD_INT 1
7811: PPUSH
7812: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7816: LD_EXP 8
7820: PPUSH
7821: LD_INT 6
7823: PPUSH
7824: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7828: LD_EXP 8
7832: PPUSH
7833: CALL_OW 122
// wait ( 0 0$1 ) ;
7837: LD_INT 35
7839: PPUSH
7840: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7844: LD_EXP 8
7848: PPUSH
7849: LD_INT 17
7851: PPUSH
7852: CALL_OW 113
// mikhailStatus = 3 ;
7856: LD_ADDR_EXP 21
7860: PUSH
7861: LD_INT 3
7863: ST_TO_ADDR
// disable ;
7864: DISABLE
// end ; end ;
7865: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7866: LD_EXP 1
7870: PPUSH
7871: LD_EXP 23
7875: PPUSH
7876: CALL_OW 296
7880: PUSH
7881: LD_INT 5
7883: LESS
7884: PUSH
7885: LD_EXP 21
7889: PUSH
7890: LD_INT 3
7892: EQUAL
7893: AND
7894: PUSH
7895: LD_EXP 22
7899: PUSH
7900: LD_INT 3
7902: EQUAL
7903: NOT
7904: AND
7905: IFFALSE 8136
7907: GO 7909
7909: DISABLE
7910: LD_INT 0
7912: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
7913: LD_ADDR_VAR 0 1
7917: PUSH
7918: LD_INT 22
7920: PUSH
7921: LD_INT 1
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 21
7930: PUSH
7931: LD_INT 1
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: LD_INT 26
7940: PUSH
7941: LD_INT 1
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: LIST
7952: PPUSH
7953: CALL_OW 69
7957: PUSH
7958: LD_EXP 1
7962: PUSH
7963: LD_EXP 5
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: DIFF
7972: ST_TO_ADDR
// if not tmp then
7973: LD_VAR 0 1
7977: NOT
7978: IFFALSE 7982
// exit ;
7980: GO 8136
// DialogueOn ;
7982: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7986: LD_EXP 1
7990: PPUSH
7991: LD_STRING D7-JMM-1
7993: PPUSH
7994: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7998: LD_VAR 0 1
8002: PUSH
8003: LD_INT 1
8005: ARRAY
8006: PPUSH
8007: LD_STRING D7-Sol1-1
8009: PPUSH
8010: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8014: LD_EXP 1
8018: PPUSH
8019: LD_STRING D7-JMM-2
8021: PPUSH
8022: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8026: LD_VAR 0 1
8030: PUSH
8031: LD_INT 1
8033: ARRAY
8034: PPUSH
8035: LD_STRING D7-Sol1-2
8037: PPUSH
8038: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8042: LD_EXP 1
8046: PPUSH
8047: LD_STRING D7-JMM-3
8049: PPUSH
8050: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8054: LD_VAR 0 1
8058: PUSH
8059: LD_INT 1
8061: ARRAY
8062: PPUSH
8063: LD_STRING D7-Sol1-3
8065: PPUSH
8066: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8070: LD_EXP 3
8074: PPUSH
8075: CALL_OW 302
8079: PUSH
8080: LD_EXP 4
8084: PPUSH
8085: CALL_OW 302
8089: AND
8090: IFFALSE 8132
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8092: LD_EXP 3
8096: PPUSH
8097: LD_STRING D7-Cyrus-3
8099: PPUSH
8100: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8104: LD_VAR 0 1
8108: PUSH
8109: LD_INT 1
8111: ARRAY
8112: PPUSH
8113: LD_STRING D7-Sol1-4
8115: PPUSH
8116: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8120: LD_EXP 4
8124: PPUSH
8125: LD_STRING D7-Lisa-4
8127: PPUSH
8128: CALL_OW 88
// end ; DialogueOff ;
8132: CALL_OW 7
// end ;
8136: PPOPN 1
8138: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8139: LD_EXP 8
8143: PPUSH
8144: CALL_OW 303
8148: PUSH
8149: LD_EXP 21
8153: PUSH
8154: LD_INT 3
8156: EQUAL
8157: AND
8158: IFFALSE 8172
8160: GO 8162
8162: DISABLE
// begin enable ;
8163: ENABLE
// mikhailStatus = 2 ;
8164: LD_ADDR_EXP 21
8168: PUSH
8169: LD_INT 2
8171: ST_TO_ADDR
// end ;
8172: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8173: LD_EXP 8
8177: PPUSH
8178: LD_INT 17
8180: PPUSH
8181: CALL_OW 308
8185: PUSH
8186: LD_EXP 8
8190: PPUSH
8191: CALL_OW 255
8195: PUSH
8196: LD_INT 6
8198: EQUAL
8199: AND
8200: IFFALSE 8233
8202: GO 8204
8204: DISABLE
// begin if not mikhailInBase = 3 then
8205: LD_EXP 22
8209: PUSH
8210: LD_INT 3
8212: EQUAL
8213: NOT
8214: IFFALSE 8224
// mikhailStatus = 3 ;
8216: LD_ADDR_EXP 21
8220: PUSH
8221: LD_INT 3
8223: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8224: LD_EXP 8
8228: PPUSH
8229: CALL_OW 64
// end ;
8233: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8234: LD_EXP 21
8238: PUSH
8239: LD_INT 3
8241: EQUAL
8242: PUSH
8243: LD_EXP 8
8247: PPUSH
8248: CALL_OW 255
8252: PUSH
8253: LD_INT 6
8255: EQUAL
8256: AND
8257: IFFALSE 8423
8259: GO 8261
8261: DISABLE
8262: LD_INT 0
8264: PPUSH
8265: PPUSH
// begin enable ;
8266: ENABLE
// if IsOk ( Mikhail ) then
8267: LD_EXP 8
8271: PPUSH
8272: CALL_OW 302
8276: IFFALSE 8423
// begin attacker := Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8278: LD_ADDR_VAR 0 2
8282: PUSH
8283: LD_EXP 8
8287: PPUSH
8288: LD_INT 22
8290: PUSH
8291: LD_INT 1
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PUSH
8298: LD_INT 21
8300: PUSH
8301: LD_INT 1
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: PPUSH
8312: CALL_OW 69
8316: PPUSH
8317: CALL 10172 0 2
8321: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8322: LD_VAR 0 2
8326: PPUSH
8327: LD_EXP 8
8331: PPUSH
8332: CALL_OW 296
8336: PUSH
8337: LD_INT 8
8339: LESS
8340: IFFALSE 8423
// begin if GetSex ( attacker ) = sex_male then
8342: LD_VAR 0 2
8346: PPUSH
8347: CALL_OW 258
8351: PUSH
8352: LD_INT 1
8354: EQUAL
8355: IFFALSE 8391
// begin disable ;
8357: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8358: LD_VAR 0 2
8362: PPUSH
8363: LD_STRING D7a-Sol1-1
8365: PPUSH
8366: CALL_OW 88
// wait ( 0 0$2 ) ;
8370: LD_INT 70
8372: PPUSH
8373: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8377: LD_VAR 0 2
8381: PPUSH
8382: LD_STRING D7a-Sol1-1a
8384: PPUSH
8385: CALL_OW 88
// end else
8389: GO 8423
// begin disable ;
8391: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8392: LD_VAR 0 2
8396: PPUSH
8397: LD_STRING D7a-FSol1-1
8399: PPUSH
8400: CALL_OW 88
// wait ( 0 0$2 ) ;
8404: LD_INT 70
8406: PPUSH
8407: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8411: LD_VAR 0 2
8415: PPUSH
8416: LD_STRING D7a-FSol1-1a
8418: PPUSH
8419: CALL_OW 88
// end ; end ; end ; end ;
8423: PPOPN 2
8425: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8426: LD_EXP 27
8430: PUSH
8431: LD_INT 1
8433: EQUAL
8434: PUSH
8435: LD_INT 22
8437: PPUSH
8438: LD_INT 22
8440: PUSH
8441: LD_INT 3
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PUSH
8448: LD_INT 21
8450: PUSH
8451: LD_INT 1
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: PPUSH
8462: CALL_OW 70
8466: PUSH
8467: LD_INT 2
8469: GREATER
8470: AND
8471: PUSH
8472: LD_INT 22
8474: PPUSH
8475: LD_INT 22
8477: PUSH
8478: LD_INT 1
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: PUSH
8485: LD_INT 2
8487: PUSH
8488: LD_INT 21
8490: PUSH
8491: LD_INT 1
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: PUSH
8498: LD_INT 59
8500: PUSH
8501: EMPTY
8502: LIST
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: LIST
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: PPUSH
8513: CALL_OW 70
8517: PUSH
8518: LD_INT 0
8520: EQUAL
8521: AND
8522: IFFALSE 8537
8524: GO 8526
8526: DISABLE
// SetSide ( dep1 , 3 ) ;
8527: LD_INT 1
8529: PPUSH
8530: LD_INT 3
8532: PPUSH
8533: CALL_OW 235
8537: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8538: LD_EXP 30
8542: PUSH
8543: LD_INT 1
8545: EQUAL
8546: PUSH
8547: LD_INT 22
8549: PUSH
8550: LD_INT 0
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PUSH
8557: LD_INT 25
8559: PUSH
8560: LD_INT 14
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PPUSH
8571: CALL_OW 69
8575: PUSH
8576: LD_INT 0
8578: EQUAL
8579: AND
8580: IFFALSE 8681
8582: GO 8584
8584: DISABLE
8585: LD_INT 0
8587: PPUSH
8588: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8589: LD_ADDR_VAR 0 2
8593: PUSH
8594: LD_INT 22
8596: PUSH
8597: LD_INT 1
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: PUSH
8604: LD_INT 21
8606: PUSH
8607: LD_INT 1
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: PUSH
8614: LD_INT 23
8616: PUSH
8617: LD_INT 1
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: LIST
8628: PPUSH
8629: CALL_OW 69
8633: ST_TO_ADDR
// for i in tmp do
8634: LD_ADDR_VAR 0 1
8638: PUSH
8639: LD_VAR 0 2
8643: PUSH
8644: FOR_IN
8645: IFFALSE 8672
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8647: LD_VAR 0 1
8651: PPUSH
8652: LD_INT 1
8654: PPUSH
8655: LD_INT 4
8657: PPUSH
8658: CALL_OW 12
8662: PPUSH
8663: LD_INT 300
8665: PPUSH
8666: CALL_OW 492
8670: GO 8644
8672: POP
8673: POP
// SetAchievement ( ACH_TIGER ) ;
8674: LD_STRING ACH_TIGER
8676: PPUSH
8677: CALL_OW 543
// end ;
8681: PPOPN 2
8683: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
8684: LD_INT 22
8686: PUSH
8687: LD_INT 1
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: PUSH
8694: LD_INT 34
8696: PUSH
8697: LD_INT 51
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PPUSH
8708: CALL_OW 69
8712: PUSH
8713: LD_INT 2
8715: GREATEREQUAL
8716: IFFALSE 8728
8718: GO 8720
8720: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
8721: LD_STRING ACH_CARGO
8723: PPUSH
8724: CALL_OW 543
8728: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , un ; begin
8729: LD_INT 0
8731: PPUSH
8732: PPUSH
8733: PPUSH
// for i = 1 to count do
8734: LD_ADDR_VAR 0 8
8738: PUSH
8739: DOUBLE
8740: LD_INT 1
8742: DEC
8743: ST_TO_ADDR
8744: LD_VAR 0 6
8748: PUSH
8749: FOR_TO
8750: IFFALSE 8831
// begin uc_side = side ;
8752: LD_ADDR_OWVAR 20
8756: PUSH
8757: LD_VAR 0 1
8761: ST_TO_ADDR
// uc_nation = nation ;
8762: LD_ADDR_OWVAR 21
8766: PUSH
8767: LD_VAR 0 2
8771: ST_TO_ADDR
// hc_gallery =  ;
8772: LD_ADDR_OWVAR 33
8776: PUSH
8777: LD_STRING 
8779: ST_TO_ADDR
// hc_name =  ;
8780: LD_ADDR_OWVAR 26
8784: PUSH
8785: LD_STRING 
8787: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8788: LD_INT 0
8790: PPUSH
8791: LD_VAR 0 5
8795: PPUSH
8796: LD_VAR 0 4
8800: PPUSH
8801: CALL_OW 380
// un = CreateHuman ;
8805: LD_ADDR_VAR 0 9
8809: PUSH
8810: CALL_OW 44
8814: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8815: LD_VAR 0 9
8819: PPUSH
8820: LD_VAR 0 3
8824: PPUSH
8825: CALL_OW 52
// end ;
8829: GO 8749
8831: POP
8832: POP
// end ;
8833: LD_VAR 0 7
8837: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8838: LD_INT 0
8840: PPUSH
8841: PPUSH
8842: PPUSH
// uc_side := GetSide ( b ) ;
8843: LD_ADDR_OWVAR 20
8847: PUSH
8848: LD_VAR 0 2
8852: PPUSH
8853: CALL_OW 255
8857: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8858: LD_ADDR_OWVAR 21
8862: PUSH
8863: LD_VAR 0 2
8867: PPUSH
8868: CALL_OW 248
8872: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8873: LD_INT 0
8875: PPUSH
8876: LD_INT 1
8878: PPUSH
8879: LD_VAR 0 1
8883: PPUSH
8884: CALL_OW 380
// un = CreateHuman ;
8888: LD_ADDR_VAR 0 4
8892: PUSH
8893: CALL_OW 44
8897: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8898: LD_ADDR_VAR 0 5
8902: PUSH
8903: LD_VAR 0 2
8907: PPUSH
8908: CALL_OW 254
8912: PUSH
8913: LD_INT 3
8915: MINUS
8916: ST_TO_ADDR
// if dir < 0 then
8917: LD_VAR 0 5
8921: PUSH
8922: LD_INT 0
8924: LESS
8925: IFFALSE 8941
// dir := 6 + dir ;
8927: LD_ADDR_VAR 0 5
8931: PUSH
8932: LD_INT 6
8934: PUSH
8935: LD_VAR 0 5
8939: PLUS
8940: ST_TO_ADDR
// SetDir ( un , dir ) ;
8941: LD_VAR 0 4
8945: PPUSH
8946: LD_VAR 0 5
8950: PPUSH
8951: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8955: LD_VAR 0 4
8959: PPUSH
8960: LD_VAR 0 2
8964: PPUSH
8965: CALL_OW 52
// end ;
8969: LD_VAR 0 3
8973: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkList ; begin
8974: LD_INT 0
8976: PPUSH
8977: PPUSH
8978: PPUSH
8979: PPUSH
// engineerOkList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8980: LD_ADDR_VAR 0 7
8984: PUSH
8985: LD_INT 22
8987: PUSH
8988: LD_VAR 0 1
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: PUSH
8997: LD_INT 25
8999: PUSH
9000: LD_INT 2
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: PUSH
9007: LD_INT 24
9009: PUSH
9010: LD_INT 1000
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: LIST
9021: PPUSH
9022: CALL_OW 69
9026: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9027: LD_ADDR_VAR 0 5
9031: PUSH
9032: LD_VAR 0 3
9036: PPUSH
9037: LD_INT 22
9039: PUSH
9040: LD_VAR 0 1
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 21
9051: PUSH
9052: LD_INT 3
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: LD_INT 3
9061: PUSH
9062: LD_INT 24
9064: PUSH
9065: LD_INT 1000
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: PUSH
9072: EMPTY
9073: LIST
9074: LIST
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: LIST
9080: PUSH
9081: EMPTY
9082: LIST
9083: PPUSH
9084: CALL_OW 70
9088: ST_TO_ADDR
// if not buildingsList and not engineerOkList then
9089: LD_VAR 0 5
9093: NOT
9094: PUSH
9095: LD_VAR 0 7
9099: NOT
9100: AND
9101: IFFALSE 9105
// exit ;
9103: GO 9301
// if not buildingsList and UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) and IsOk ( building ) then
9105: LD_VAR 0 5
9109: NOT
9110: PUSH
9111: LD_VAR 0 7
9115: PPUSH
9116: LD_INT 3
9118: PUSH
9119: LD_INT 54
9121: PUSH
9122: EMPTY
9123: LIST
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: PPUSH
9129: CALL_OW 72
9133: AND
9134: PUSH
9135: LD_VAR 0 2
9139: PPUSH
9140: CALL_OW 302
9144: AND
9145: IFFALSE 9179
// ComEnterUnit ( UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) , building ) ;
9147: LD_VAR 0 7
9151: PPUSH
9152: LD_INT 3
9154: PUSH
9155: LD_INT 54
9157: PUSH
9158: EMPTY
9159: LIST
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PPUSH
9165: CALL_OW 72
9169: PPUSH
9170: LD_VAR 0 2
9174: PPUSH
9175: CALL_OW 120
// if buildingsList then
9179: LD_VAR 0 5
9183: IFFALSE 9301
// begin for i in engineerOkList do
9185: LD_ADDR_VAR 0 6
9189: PUSH
9190: LD_VAR 0 7
9194: PUSH
9195: FOR_IN
9196: IFFALSE 9299
// if IsInUnit ( i ) then
9198: LD_VAR 0 6
9202: PPUSH
9203: CALL_OW 310
9207: IFFALSE 9220
// ComExitBuilding ( i ) else
9209: LD_VAR 0 6
9213: PPUSH
9214: CALL_OW 122
9218: GO 9297
// if GetLives ( i ) > 650 then
9220: LD_VAR 0 6
9224: PPUSH
9225: CALL_OW 256
9229: PUSH
9230: LD_INT 650
9232: GREATER
9233: IFFALSE 9261
// ComRepairBuilding ( i , NearestUnitToUnit ( buildingsList , i ) ) else
9235: LD_VAR 0 6
9239: PPUSH
9240: LD_VAR 0 5
9244: PPUSH
9245: LD_VAR 0 6
9249: PPUSH
9250: CALL_OW 74
9254: PPUSH
9255: CALL_OW 130
9259: GO 9297
// if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9261: LD_VAR 0 6
9265: PPUSH
9266: LD_INT 56
9268: PPUSH
9269: LD_INT 10
9271: PPUSH
9272: CALL_OW 297
9276: PUSH
9277: LD_INT 8
9279: GREATER
9280: IFFALSE 9297
// ComMoveXY ( i , 56 , 10 ) ;
9282: LD_VAR 0 6
9286: PPUSH
9287: LD_INT 56
9289: PPUSH
9290: LD_INT 10
9292: PPUSH
9293: CALL_OW 111
9297: GO 9195
9299: POP
9300: POP
// end ; end ;
9301: LD_VAR 0 4
9305: RET
// export function HealUnitInBase ( side , healArea , baseArea , building ) ; var sciList , i , damageUnits ; begin
9306: LD_INT 0
9308: PPUSH
9309: PPUSH
9310: PPUSH
9311: PPUSH
// sciList := FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9312: LD_ADDR_VAR 0 6
9316: PUSH
9317: LD_INT 22
9319: PUSH
9320: LD_VAR 0 1
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PUSH
9329: LD_INT 25
9331: PUSH
9332: LD_INT 4
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PUSH
9339: LD_INT 24
9341: PUSH
9342: LD_INT 250
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: LIST
9353: PPUSH
9354: CALL_OW 69
9358: ST_TO_ADDR
// damageUnits := FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9359: LD_ADDR_VAR 0 8
9363: PUSH
9364: LD_VAR 0 3
9368: PPUSH
9369: LD_INT 22
9371: PUSH
9372: LD_VAR 0 1
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PUSH
9381: LD_INT 21
9383: PUSH
9384: LD_INT 1
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: PUSH
9391: LD_INT 3
9393: PUSH
9394: LD_INT 24
9396: PUSH
9397: LD_INT 650
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: LIST
9412: PPUSH
9413: CALL_OW 70
9417: ST_TO_ADDR
// if not damageUnits and not sciList then
9418: LD_VAR 0 8
9422: NOT
9423: PUSH
9424: LD_VAR 0 6
9428: NOT
9429: AND
9430: IFFALSE 9434
// exit ;
9432: GO 9573
// if damageUnits then
9434: LD_VAR 0 8
9438: IFFALSE 9517
// begin for i in sciList do
9440: LD_ADDR_VAR 0 7
9444: PUSH
9445: LD_VAR 0 6
9449: PUSH
9450: FOR_IN
9451: IFFALSE 9513
// if IsInUnit ( i ) then
9453: LD_VAR 0 7
9457: PPUSH
9458: CALL_OW 310
9462: IFFALSE 9475
// ComExitBuilding ( i ) else
9464: LD_VAR 0 7
9468: PPUSH
9469: CALL_OW 122
9473: GO 9511
// if not HasTask ( i ) then
9475: LD_VAR 0 7
9479: PPUSH
9480: CALL_OW 314
9484: NOT
9485: IFFALSE 9511
// ComHeal ( i , NearestUnitToUnit ( damageUnits , i ) ) ;
9487: LD_VAR 0 7
9491: PPUSH
9492: LD_VAR 0 8
9496: PPUSH
9497: LD_VAR 0 7
9501: PPUSH
9502: CALL_OW 74
9506: PPUSH
9507: CALL_OW 128
9511: GO 9450
9513: POP
9514: POP
// end else
9515: GO 9573
// if UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) then
9517: LD_VAR 0 6
9521: PPUSH
9522: LD_INT 3
9524: PUSH
9525: LD_INT 54
9527: PUSH
9528: EMPTY
9529: LIST
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PPUSH
9535: CALL_OW 72
9539: IFFALSE 9573
// ComEnterUnit ( UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) , building ) ;
9541: LD_VAR 0 6
9545: PPUSH
9546: LD_INT 3
9548: PUSH
9549: LD_INT 54
9551: PUSH
9552: EMPTY
9553: LIST
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PPUSH
9559: CALL_OW 72
9563: PPUSH
9564: LD_VAR 0 4
9568: PPUSH
9569: CALL_OW 120
// end ;
9573: LD_VAR 0 5
9577: RET
// export function DefendBases ( area , enemySide , defendersList , building ) ; var i , enemy , nearestUnit ; begin
9578: LD_INT 0
9580: PPUSH
9581: PPUSH
9582: PPUSH
9583: PPUSH
// if not defendersList then
9584: LD_VAR 0 3
9588: NOT
9589: IFFALSE 9593
// exit ;
9591: GO 9975
// enemy := FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9593: LD_ADDR_VAR 0 7
9597: PUSH
9598: LD_VAR 0 1
9602: PPUSH
9603: LD_INT 22
9605: PUSH
9606: LD_VAR 0 2
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: PUSH
9615: LD_INT 2
9617: PUSH
9618: LD_INT 21
9620: PUSH
9621: LD_INT 2
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: PUSH
9628: LD_INT 21
9630: PUSH
9631: LD_INT 1
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: LIST
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PPUSH
9647: CALL_OW 70
9651: ST_TO_ADDR
// if enemy then
9652: LD_VAR 0 7
9656: IFFALSE 9877
// begin for i in defendersList do
9658: LD_ADDR_VAR 0 6
9662: PUSH
9663: LD_VAR 0 3
9667: PUSH
9668: FOR_IN
9669: IFFALSE 9873
// begin if IsInUnit ( i ) and GetLives ( i ) > 500 then
9671: LD_VAR 0 6
9675: PPUSH
9676: CALL_OW 310
9680: PUSH
9681: LD_VAR 0 6
9685: PPUSH
9686: CALL_OW 256
9690: PUSH
9691: LD_INT 500
9693: GREATER
9694: AND
9695: IFFALSE 9708
// ComExitBuilding ( i ) else
9697: LD_VAR 0 6
9701: PPUSH
9702: CALL_OW 122
9706: GO 9871
// if GetLives ( i ) > 650 then
9708: LD_VAR 0 6
9712: PPUSH
9713: CALL_OW 256
9717: PUSH
9718: LD_INT 650
9720: GREATER
9721: IFFALSE 9774
// begin nearestUnit := NearestUnitToUnit ( enemy , i ) ;
9723: LD_ADDR_VAR 0 8
9727: PUSH
9728: LD_VAR 0 7
9732: PPUSH
9733: LD_VAR 0 6
9737: PPUSH
9738: CALL_OW 74
9742: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearestUnit ) , GetY ( nearestUnit ) ) ;
9743: LD_VAR 0 6
9747: PPUSH
9748: LD_VAR 0 8
9752: PPUSH
9753: CALL_OW 250
9757: PPUSH
9758: LD_VAR 0 8
9762: PPUSH
9763: CALL_OW 251
9767: PPUSH
9768: CALL_OW 114
// end else
9772: GO 9871
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
9774: LD_INT 22
9776: PUSH
9777: LD_INT 3
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PUSH
9784: LD_INT 25
9786: PUSH
9787: LD_INT 4
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: PPUSH
9798: CALL_OW 69
9802: IFFALSE 9842
// begin if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9804: LD_VAR 0 6
9808: PPUSH
9809: LD_INT 56
9811: PPUSH
9812: LD_INT 10
9814: PPUSH
9815: CALL_OW 297
9819: PUSH
9820: LD_INT 8
9822: GREATER
9823: IFFALSE 9840
// ComMoveXY ( i , 56 , 10 ) ;
9825: LD_VAR 0 6
9829: PPUSH
9830: LD_INT 56
9832: PPUSH
9833: LD_INT 10
9835: PPUSH
9836: CALL_OW 111
// end else
9840: GO 9871
// if GetLives ( i ) <= 500 then
9842: LD_VAR 0 6
9846: PPUSH
9847: CALL_OW 256
9851: PUSH
9852: LD_INT 500
9854: LESSEQUAL
9855: IFFALSE 9871
// ComEnterUnit ( i , building ) ;
9857: LD_VAR 0 6
9861: PPUSH
9862: LD_VAR 0 4
9866: PPUSH
9867: CALL_OW 120
// end ;
9871: GO 9668
9873: POP
9874: POP
// end else
9875: GO 9975
// if UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) then
9877: LD_VAR 0 3
9881: PPUSH
9882: LD_INT 56
9884: PUSH
9885: EMPTY
9886: LIST
9887: PUSH
9888: LD_INT 3
9890: PUSH
9891: LD_INT 60
9893: PUSH
9894: EMPTY
9895: LIST
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: PUSH
9901: LD_INT 24
9903: PUSH
9904: LD_INT 1000
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: LIST
9915: PPUSH
9916: CALL_OW 72
9920: IFFALSE 9975
// ComEnterUnit ( UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) , building ) ;
9922: LD_VAR 0 3
9926: PPUSH
9927: LD_INT 56
9929: PUSH
9930: EMPTY
9931: LIST
9932: PUSH
9933: LD_INT 3
9935: PUSH
9936: LD_INT 60
9938: PUSH
9939: EMPTY
9940: LIST
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: PUSH
9946: LD_INT 24
9948: PUSH
9949: LD_INT 1000
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: LIST
9960: PPUSH
9961: CALL_OW 72
9965: PPUSH
9966: LD_VAR 0 4
9970: PPUSH
9971: CALL_OW 120
// end ;
9975: LD_VAR 0 5
9979: RET
// export function RussianTrap ; var i ; begin
9980: LD_INT 0
9982: PPUSH
9983: PPUSH
// if GetSide ( Brian ) = 4 then
9984: LD_EXP 6
9988: PPUSH
9989: CALL_OW 255
9993: PUSH
9994: LD_INT 4
9996: EQUAL
9997: IFFALSE 10020
// SetLives ( [ Brian , Jerry ] , 0 ) ;
9999: LD_EXP 6
10003: PUSH
10004: LD_EXP 7
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PPUSH
10013: LD_INT 0
10015: PPUSH
10016: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10020: LD_ADDR_VAR 0 2
10024: PUSH
10025: LD_INT 22
10027: PUSH
10028: LD_INT 3
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PUSH
10035: LD_INT 21
10037: PUSH
10038: LD_INT 1
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PPUSH
10049: CALL_OW 69
10053: PUSH
10054: FOR_IN
10055: IFFALSE 10165
// begin ComExitBuilding ( i ) ;
10057: LD_VAR 0 2
10061: PPUSH
10062: CALL_OW 122
// wait ( 0 0$1 ) ;
10066: LD_INT 35
10068: PPUSH
10069: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10073: LD_VAR 0 2
10077: PPUSH
10078: LD_INT 120
10080: PPUSH
10081: LD_INT 56
10083: PPUSH
10084: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10088: LD_VAR 0 2
10092: PPUSH
10093: LD_INT 111
10095: PPUSH
10096: LD_INT 37
10098: PPUSH
10099: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10103: LD_INT 33
10105: PPUSH
10106: CALL_OW 255
10110: PUSH
10111: LD_INT 3
10113: EQUAL
10114: PUSH
10115: LD_INT 33
10117: PPUSH
10118: CALL_OW 302
10122: AND
10123: IFFALSE 10139
// AddComEnterUnit ( i , arm2 ) else
10125: LD_VAR 0 2
10129: PPUSH
10130: LD_INT 33
10132: PPUSH
10133: CALL_OW 180
10137: GO 10163
// begin AddComCrawl ( i ) ;
10139: LD_VAR 0 2
10143: PPUSH
10144: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10148: LD_VAR 0 2
10152: PPUSH
10153: LD_INT 109
10155: PPUSH
10156: LD_INT 30
10158: PPUSH
10159: CALL_OW 174
// end ; end ;
10163: GO 10054
10165: POP
10166: POP
// end ;
10167: LD_VAR 0 1
10171: RET
// export function Nearest ( un , units ) ; var nearestDist , nearestUn , sold , dist ; begin
10172: LD_INT 0
10174: PPUSH
10175: PPUSH
10176: PPUSH
10177: PPUSH
10178: PPUSH
// nearestDist := 1000 ;
10179: LD_ADDR_VAR 0 4
10183: PUSH
10184: LD_INT 1000
10186: ST_TO_ADDR
// nearestUn := un ;
10187: LD_ADDR_VAR 0 5
10191: PUSH
10192: LD_VAR 0 1
10196: ST_TO_ADDR
// for sold in units do
10197: LD_ADDR_VAR 0 6
10201: PUSH
10202: LD_VAR 0 2
10206: PUSH
10207: FOR_IN
10208: IFFALSE 10264
// begin dist := GetDistUnits ( un , sold ) ;
10210: LD_ADDR_VAR 0 7
10214: PUSH
10215: LD_VAR 0 1
10219: PPUSH
10220: LD_VAR 0 6
10224: PPUSH
10225: CALL_OW 296
10229: ST_TO_ADDR
// if dist < nearestDist then
10230: LD_VAR 0 7
10234: PUSH
10235: LD_VAR 0 4
10239: LESS
10240: IFFALSE 10262
// begin nearestUn := sold ;
10242: LD_ADDR_VAR 0 5
10246: PUSH
10247: LD_VAR 0 6
10251: ST_TO_ADDR
// nearestDist := dist ;
10252: LD_ADDR_VAR 0 4
10256: PUSH
10257: LD_VAR 0 7
10261: ST_TO_ADDR
// end ; end ;
10262: GO 10207
10264: POP
10265: POP
// result := NearestUn ;
10266: LD_ADDR_VAR 0 3
10270: PUSH
10271: LD_VAR 0 5
10275: ST_TO_ADDR
// end ;
10276: LD_VAR 0 3
10280: RET
// export function PrepareDifficulty ; begin
10281: LD_INT 0
10283: PPUSH
// if Difficulty = 1 then
10284: LD_OWVAR 67
10288: PUSH
10289: LD_INT 1
10291: EQUAL
10292: IFFALSE 10355
// begin RemoveUnit ( brw2 ) ;
10294: LD_INT 9
10296: PPUSH
10297: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10301: LD_INT 30
10303: PPUSH
10304: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10308: LD_INT 52
10310: PPUSH
10311: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10315: LD_INT 63
10317: PPUSH
10318: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10322: LD_INT 5
10324: PUSH
10325: LD_INT 4
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PPUSH
10332: LD_INT 60
10334: PPUSH
10335: CALL_OW 240
// RuSoldMinLevel = 0 ;
10339: LD_ADDR_EXP 13
10343: PUSH
10344: LD_INT 0
10346: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10347: LD_ADDR_EXP 14
10351: PUSH
10352: LD_INT 1
10354: ST_TO_ADDR
// end ; if Difficulty = 2 then
10355: LD_OWVAR 67
10359: PUSH
10360: LD_INT 2
10362: EQUAL
10363: IFFALSE 10405
// begin RemoveUnit ( brw4 ) ;
10365: LD_INT 52
10367: PPUSH
10368: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10372: LD_INT 5
10374: PUSH
10375: LD_INT 4
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PPUSH
10382: LD_INT 50
10384: PPUSH
10385: CALL_OW 240
// RuSoldMinLevel = 1 ;
10389: LD_ADDR_EXP 13
10393: PUSH
10394: LD_INT 1
10396: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10397: LD_ADDR_EXP 14
10401: PUSH
10402: LD_INT 2
10404: ST_TO_ADDR
// end ; if Difficulty >= 3 then
10405: LD_OWVAR 67
10409: PUSH
10410: LD_INT 3
10412: GREATEREQUAL
10413: IFFALSE 10448
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10415: LD_INT 5
10417: PUSH
10418: LD_INT 4
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PPUSH
10425: LD_INT 40
10427: PPUSH
10428: CALL_OW 240
// RuSoldMinLevel = 2 ;
10432: LD_ADDR_EXP 13
10436: PUSH
10437: LD_INT 2
10439: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10440: LD_ADDR_EXP 14
10444: PUSH
10445: LD_INT 3
10447: ST_TO_ADDR
// end ; end ;
10448: LD_VAR 0 1
10452: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10453: LD_INT 0
10455: PPUSH
10456: PPUSH
10457: PPUSH
// if not vehicles then
10458: LD_VAR 0 1
10462: NOT
10463: IFFALSE 10467
// exit ;
10465: GO 10597
// tmp := [ ] ;
10467: LD_ADDR_VAR 0 5
10471: PUSH
10472: EMPTY
10473: ST_TO_ADDR
// for i in vehicles do
10474: LD_ADDR_VAR 0 4
10478: PUSH
10479: LD_VAR 0 1
10483: PUSH
10484: FOR_IN
10485: IFFALSE 10581
// tmp := Replace ( tmp , tmp + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10487: LD_ADDR_VAR 0 5
10491: PUSH
10492: LD_VAR 0 5
10496: PPUSH
10497: LD_VAR 0 5
10501: PUSH
10502: LD_INT 1
10504: PLUS
10505: PPUSH
10506: LD_VAR 0 4
10510: PPUSH
10511: CALL_OW 265
10515: PUSH
10516: LD_VAR 0 4
10520: PPUSH
10521: CALL_OW 262
10525: PUSH
10526: LD_VAR 0 4
10530: PPUSH
10531: CALL_OW 263
10535: PUSH
10536: LD_VAR 0 4
10540: PPUSH
10541: CALL_OW 264
10545: PUSH
10546: LD_VAR 0 4
10550: PPUSH
10551: CALL_OW 261
10555: PUSH
10556: LD_VAR 0 4
10560: PPUSH
10561: CALL_OW 256
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: PPUSH
10574: CALL_OW 1
10578: ST_TO_ADDR
10579: GO 10484
10581: POP
10582: POP
// SaveVariable ( tmp , ident ) ;
10583: LD_VAR 0 5
10587: PPUSH
10588: LD_VAR 0 2
10592: PPUSH
10593: CALL_OW 39
// end ; end_of_file
10597: LD_VAR 0 3
10601: RET
// export function PrepareHeroes ; var plive ; begin
10602: LD_INT 0
10604: PPUSH
10605: PPUSH
// uc_side := 1 ;
10606: LD_ADDR_OWVAR 20
10610: PUSH
10611: LD_INT 1
10613: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debug ) , mission_prefix ) ;
10614: LD_ADDR_EXP 1
10618: PUSH
10619: LD_STRING JMM
10621: PPUSH
10622: LD_EXP 34
10626: NOT
10627: PPUSH
10628: LD_EXP 33
10632: PPUSH
10633: CALL 33580 0 3
10637: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10638: LD_ADDR_VAR 0 2
10642: PUSH
10643: LD_STRING 01_JMMLifePoints_1
10645: PPUSH
10646: LD_INT 1000
10648: PPUSH
10649: CALL_OW 30
10653: ST_TO_ADDR
// if plive < 250 then
10654: LD_VAR 0 2
10658: PUSH
10659: LD_INT 250
10661: LESS
10662: IFFALSE 10672
// plive := 300 ;
10664: LD_ADDR_VAR 0 2
10668: PUSH
10669: LD_INT 300
10671: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10672: LD_EXP 1
10676: PPUSH
10677: LD_VAR 0 2
10681: PPUSH
10682: CALL_OW 234
// Powell := NewCharacter ( Powell ) ;
10686: LD_ADDR_EXP 9
10690: PUSH
10691: LD_STRING Powell
10693: PPUSH
10694: CALL_OW 25
10698: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix ) ;
10699: LD_ADDR_EXP 2
10703: PUSH
10704: LD_STRING Bobby
10706: PPUSH
10707: LD_EXP 34
10711: NOT
10712: PPUSH
10713: LD_EXP 33
10717: PPUSH
10718: CALL 33580 0 3
10722: ST_TO_ADDR
// if Bobby then
10723: LD_EXP 2
10727: IFFALSE 10777
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10729: LD_ADDR_VAR 0 2
10733: PUSH
10734: LD_STRING 01_BobbyLifePoints_1
10736: PPUSH
10737: LD_INT 1000
10739: PPUSH
10740: CALL_OW 30
10744: ST_TO_ADDR
// if plive < 250 then
10745: LD_VAR 0 2
10749: PUSH
10750: LD_INT 250
10752: LESS
10753: IFFALSE 10763
// plive := 300 ;
10755: LD_ADDR_VAR 0 2
10759: PUSH
10760: LD_INT 300
10762: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
10763: LD_EXP 2
10767: PPUSH
10768: LD_VAR 0 2
10772: PPUSH
10773: CALL_OW 234
// end ; Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix ) ;
10777: LD_ADDR_EXP 3
10781: PUSH
10782: LD_STRING Cyrus
10784: PPUSH
10785: LD_EXP 34
10789: NOT
10790: PPUSH
10791: LD_EXP 33
10795: PPUSH
10796: CALL 33580 0 3
10800: ST_TO_ADDR
// if Cyrus then
10801: LD_EXP 3
10805: IFFALSE 10855
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
10807: LD_ADDR_VAR 0 2
10811: PUSH
10812: LD_STRING 01_CyrusLifePoints_1
10814: PPUSH
10815: LD_INT 1000
10817: PPUSH
10818: CALL_OW 30
10822: ST_TO_ADDR
// if plive < 250 then
10823: LD_VAR 0 2
10827: PUSH
10828: LD_INT 250
10830: LESS
10831: IFFALSE 10841
// plive := 300 ;
10833: LD_ADDR_VAR 0 2
10837: PUSH
10838: LD_INT 300
10840: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
10841: LD_EXP 3
10845: PPUSH
10846: LD_VAR 0 2
10850: PPUSH
10851: CALL_OW 234
// end ; Khatam := NewCharacter ( Khatam ) ;
10855: LD_ADDR_EXP 5
10859: PUSH
10860: LD_STRING Khatam
10862: PPUSH
10863: CALL_OW 25
10867: ST_TO_ADDR
// uc_side := 4 ;
10868: LD_ADDR_OWVAR 20
10872: PUSH
10873: LD_INT 4
10875: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10876: LD_ADDR_EXP 4
10880: PUSH
10881: LD_STRING Lisa
10883: PPUSH
10884: CALL_OW 25
10888: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10889: LD_EXP 1
10893: PPUSH
10894: LD_INT 3
10896: PPUSH
10897: LD_INT 0
10899: PPUSH
10900: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10904: LD_EXP 2
10908: PPUSH
10909: LD_INT 3
10911: PPUSH
10912: LD_INT 0
10914: PPUSH
10915: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10919: LD_EXP 3
10923: PPUSH
10924: LD_INT 3
10926: PPUSH
10927: LD_INT 0
10929: PPUSH
10930: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10934: LD_EXP 4
10938: PPUSH
10939: LD_INT 5
10941: PPUSH
10942: LD_INT 0
10944: PPUSH
10945: CALL_OW 49
// ComCrawl ( Lisa ) ;
10949: LD_EXP 4
10953: PPUSH
10954: CALL_OW 137
// end ;
10958: LD_VAR 0 1
10962: RET
// export function PrepareLisSquad ; var i , un ; begin
10963: LD_INT 0
10965: PPUSH
10966: PPUSH
10967: PPUSH
// uc_side := 4 ;
10968: LD_ADDR_OWVAR 20
10972: PUSH
10973: LD_INT 4
10975: ST_TO_ADDR
// uc_nation := 1 ;
10976: LD_ADDR_OWVAR 21
10980: PUSH
10981: LD_INT 1
10983: ST_TO_ADDR
// hc_class := 2 ;
10984: LD_ADDR_OWVAR 28
10988: PUSH
10989: LD_INT 2
10991: ST_TO_ADDR
// hc_sex := sex_male ;
10992: LD_ADDR_OWVAR 27
10996: PUSH
10997: LD_INT 1
10999: ST_TO_ADDR
// hc_gallery :=  ;
11000: LD_ADDR_OWVAR 33
11004: PUSH
11005: LD_STRING 
11007: ST_TO_ADDR
// hc_name :=  ;
11008: LD_ADDR_OWVAR 26
11012: PUSH
11013: LD_STRING 
11015: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11016: LD_ADDR_OWVAR 30
11020: PUSH
11021: LD_INT 0
11023: PUSH
11024: LD_INT 1
11026: PUSH
11027: LD_INT 0
11029: PUSH
11030: LD_INT 0
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11039: LD_ADDR_OWVAR 31
11043: PUSH
11044: LD_INT 1
11046: PUSH
11047: LD_INT 2
11049: PUSH
11050: LD_INT 0
11052: PUSH
11053: LD_INT 0
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: ST_TO_ADDR
// un := CreateHuman ;
11062: LD_ADDR_VAR 0 3
11066: PUSH
11067: CALL_OW 44
11071: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11072: LD_VAR 0 3
11076: PPUSH
11077: LD_INT 6
11079: PPUSH
11080: LD_INT 0
11082: PPUSH
11083: CALL_OW 49
// hc_sex := sex_female ;
11087: LD_ADDR_OWVAR 27
11091: PUSH
11092: LD_INT 2
11094: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11095: LD_ADDR_OWVAR 30
11099: PUSH
11100: LD_INT 0
11102: PUSH
11103: LD_INT 0
11105: PUSH
11106: LD_INT 0
11108: PUSH
11109: LD_INT 1
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11118: LD_ADDR_OWVAR 31
11122: PUSH
11123: LD_INT 0
11125: PUSH
11126: LD_INT 1
11128: PUSH
11129: LD_INT 0
11131: PUSH
11132: LD_INT 1
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: ST_TO_ADDR
// un := CreateHuman ;
11141: LD_ADDR_VAR 0 3
11145: PUSH
11146: CALL_OW 44
11150: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11151: LD_VAR 0 3
11155: PPUSH
11156: LD_INT 6
11158: PPUSH
11159: LD_INT 0
11161: PPUSH
11162: CALL_OW 49
// if not Bobby and not Cyrus then
11166: LD_EXP 2
11170: NOT
11171: PUSH
11172: LD_EXP 3
11176: NOT
11177: AND
11178: IFFALSE 11267
// begin hc_class := 1 ;
11180: LD_ADDR_OWVAR 28
11184: PUSH
11185: LD_INT 1
11187: ST_TO_ADDR
// hc_sex := sex_male ;
11188: LD_ADDR_OWVAR 27
11192: PUSH
11193: LD_INT 1
11195: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11196: LD_ADDR_OWVAR 30
11200: PUSH
11201: LD_INT 2
11203: PUSH
11204: LD_INT 3
11206: PUSH
11207: LD_INT 1
11209: PUSH
11210: LD_INT 0
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11219: LD_ADDR_OWVAR 31
11223: PUSH
11224: LD_INT 2
11226: PUSH
11227: LD_INT 3
11229: PUSH
11230: LD_INT 1
11232: PUSH
11233: LD_INT 0
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: ST_TO_ADDR
// un := CreateHuman ;
11242: LD_ADDR_VAR 0 3
11246: PUSH
11247: CALL_OW 44
11251: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11252: LD_VAR 0 3
11256: PPUSH
11257: LD_INT 31
11259: PPUSH
11260: LD_INT 0
11262: PPUSH
11263: CALL_OW 49
// end ; InitHc ;
11267: CALL_OW 19
// end ;
11271: LD_VAR 0 1
11275: RET
// export function PrepareOtherAmericans ; begin
11276: LD_INT 0
11278: PPUSH
// uc_side := 4 ;
11279: LD_ADDR_OWVAR 20
11283: PUSH
11284: LD_INT 4
11286: ST_TO_ADDR
// uc_nation := 1 ;
11287: LD_ADDR_OWVAR 21
11291: PUSH
11292: LD_INT 1
11294: ST_TO_ADDR
// hc_gallery :=  ;
11295: LD_ADDR_OWVAR 33
11299: PUSH
11300: LD_STRING 
11302: ST_TO_ADDR
// hc_name := Tom Garvin ;
11303: LD_ADDR_OWVAR 26
11307: PUSH
11308: LD_STRING Tom Garvin
11310: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 2 ) ;
11311: LD_INT 1
11313: PPUSH
11314: LD_INT 1
11316: PPUSH
11317: LD_INT 2
11319: PPUSH
11320: CALL_OW 380
// Brian := CreateHuman ;
11324: LD_ADDR_EXP 6
11328: PUSH
11329: CALL_OW 44
11333: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11334: LD_EXP 6
11338: PPUSH
11339: LD_INT 10
11341: PPUSH
11342: LD_INT 0
11344: PPUSH
11345: CALL_OW 49
// hc_name := Jerry White ;
11349: LD_ADDR_OWVAR 26
11353: PUSH
11354: LD_STRING Jerry White
11356: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , 2 ) ;
11357: LD_INT 1
11359: PPUSH
11360: LD_INT 3
11362: PPUSH
11363: LD_INT 2
11365: PPUSH
11366: CALL_OW 380
// Jerry := CreateHuman ;
11370: LD_ADDR_EXP 7
11374: PUSH
11375: CALL_OW 44
11379: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11380: LD_EXP 7
11384: PPUSH
11385: LD_INT 10
11387: PPUSH
11388: LD_INT 0
11390: PPUSH
11391: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11395: LD_EXP 6
11399: PUSH
11400: LD_EXP 7
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: PPUSH
11409: CALL_OW 140
// end ;
11413: LD_VAR 0 1
11417: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11418: LD_INT 0
11420: PPUSH
11421: PPUSH
11422: PPUSH
// for i = 1 to 6 do
11423: LD_ADDR_VAR 0 2
11427: PUSH
11428: DOUBLE
11429: LD_INT 1
11431: DEC
11432: ST_TO_ADDR
11433: LD_INT 6
11435: PUSH
11436: FOR_TO
11437: IFFALSE 11531
// begin uc_side := 4 ;
11439: LD_ADDR_OWVAR 20
11443: PUSH
11444: LD_INT 4
11446: ST_TO_ADDR
// uc_nation := 1 ;
11447: LD_ADDR_OWVAR 21
11451: PUSH
11452: LD_INT 1
11454: ST_TO_ADDR
// hc_gallery :=  ;
11455: LD_ADDR_OWVAR 33
11459: PUSH
11460: LD_STRING 
11462: ST_TO_ADDR
// hc_name :=  ;
11463: LD_ADDR_OWVAR 26
11467: PUSH
11468: LD_STRING 
11470: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11471: LD_INT 0
11473: PPUSH
11474: LD_INT 1
11476: PPUSH
11477: LD_INT 4
11479: PPUSH
11480: CALL_OW 12
11484: PPUSH
11485: LD_INT 1
11487: PPUSH
11488: CALL_OW 380
// un := CreateHuman ;
11492: LD_ADDR_VAR 0 3
11496: PUSH
11497: CALL_OW 44
11501: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11502: LD_VAR 0 3
11506: PPUSH
11507: LD_INT 16
11509: PPUSH
11510: LD_INT 0
11512: PPUSH
11513: CALL_OW 49
// SetLives ( un , 1 ) ;
11517: LD_VAR 0 3
11521: PPUSH
11522: LD_INT 1
11524: PPUSH
11525: CALL_OW 234
// end ;
11529: GO 11436
11531: POP
11532: POP
// DyingSold := CreateHuman ;
11533: LD_ADDR_EXP 35
11537: PUSH
11538: CALL_OW 44
11542: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11543: LD_EXP 35
11547: PPUSH
11548: LD_INT 16
11550: PPUSH
11551: LD_INT 0
11553: PPUSH
11554: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11558: LD_EXP 35
11562: PPUSH
11563: LD_INT 250
11565: PPUSH
11566: CALL_OW 234
// end ; end_of_file
11570: LD_VAR 0 1
11574: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11575: LD_INT 0
11577: PPUSH
11578: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11579: LD_ADDR_VAR 0 2
11583: PUSH
11584: LD_INT 22
11586: PUSH
11587: LD_INT 1
11589: PUSH
11590: EMPTY
11591: LIST
11592: LIST
11593: PUSH
11594: LD_INT 23
11596: PUSH
11597: LD_INT 1
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: PUSH
11604: LD_INT 25
11606: PUSH
11607: LD_INT 2
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: PUSH
11614: LD_INT 50
11616: PUSH
11617: EMPTY
11618: LIST
11619: PUSH
11620: LD_INT 56
11622: PUSH
11623: EMPTY
11624: LIST
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: PPUSH
11633: CALL_OW 69
11637: PUSH
11638: LD_EXP 1
11642: PUSH
11643: EMPTY
11644: LIST
11645: DIFF
11646: ST_TO_ADDR
// if not tmp then
11647: LD_VAR 0 2
11651: NOT
11652: IFFALSE 11656
// exit ;
11654: GO 11732
// uc_side = 6 ;
11656: LD_ADDR_OWVAR 20
11660: PUSH
11661: LD_INT 6
11663: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11664: LD_ADDR_EXP 8
11668: PUSH
11669: LD_STRING Mikhail
11671: PPUSH
11672: CALL_OW 25
11676: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11677: LD_EXP 8
11681: PPUSH
11682: LD_INT 3
11684: PPUSH
11685: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
11689: LD_EXP 8
11693: PPUSH
11694: LD_VAR 0 2
11698: PUSH
11699: LD_INT 1
11701: ARRAY
11702: PPUSH
11703: CALL_OW 250
11707: PPUSH
11708: LD_VAR 0 2
11712: PUSH
11713: LD_INT 1
11715: ARRAY
11716: PPUSH
11717: CALL_OW 251
11721: PPUSH
11722: LD_INT 5
11724: PPUSH
11725: LD_INT 1
11727: PPUSH
11728: CALL_OW 50
// end ;
11732: LD_VAR 0 1
11736: RET
// export function PrepareRussianCommander ; begin
11737: LD_INT 0
11739: PPUSH
// uc_side = 3 ;
11740: LD_ADDR_OWVAR 20
11744: PUSH
11745: LD_INT 3
11747: ST_TO_ADDR
// uc_nation = 3 ;
11748: LD_ADDR_OWVAR 21
11752: PUSH
11753: LD_INT 3
11755: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11756: LD_ADDR_EXP 19
11760: PUSH
11761: LD_STRING Natasza
11763: PPUSH
11764: CALL_OW 25
11768: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11769: LD_EXP 19
11773: PPUSH
11774: LD_INT 24
11776: PPUSH
11777: LD_INT 0
11779: PPUSH
11780: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11784: LD_EXP 19
11788: PPUSH
11789: LD_INT 56
11791: PPUSH
11792: LD_INT 16
11794: PPUSH
11795: CALL_OW 118
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , Natasza ) ;
11799: LD_ADDR_EXP 24
11803: PUSH
11804: LD_EXP 24
11808: PPUSH
11809: LD_EXP 24
11813: PUSH
11814: LD_INT 1
11816: PLUS
11817: PPUSH
11818: LD_EXP 19
11822: PPUSH
11823: CALL_OW 1
11827: ST_TO_ADDR
// end ;
11828: LD_VAR 0 1
11832: RET
// export function PrepareSouthBase ; var i , un ; begin
11833: LD_INT 0
11835: PPUSH
11836: PPUSH
11837: PPUSH
// for i = 1 to 2 do
11838: LD_ADDR_VAR 0 2
11842: PUSH
11843: DOUBLE
11844: LD_INT 1
11846: DEC
11847: ST_TO_ADDR
11848: LD_INT 2
11850: PUSH
11851: FOR_TO
11852: IFFALSE 11961
// begin uc_side = 3 ;
11854: LD_ADDR_OWVAR 20
11858: PUSH
11859: LD_INT 3
11861: ST_TO_ADDR
// uc_nation = 3 ;
11862: LD_ADDR_OWVAR 21
11866: PUSH
11867: LD_INT 3
11869: ST_TO_ADDR
// hc_gallery =  ;
11870: LD_ADDR_OWVAR 33
11874: PUSH
11875: LD_STRING 
11877: ST_TO_ADDR
// hc_name =  ;
11878: LD_ADDR_OWVAR 26
11882: PUSH
11883: LD_STRING 
11885: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11886: LD_INT 1
11888: PPUSH
11889: LD_INT 1
11891: PPUSH
11892: LD_EXP 13
11896: PPUSH
11897: LD_EXP 14
11901: PPUSH
11902: CALL_OW 12
11906: PPUSH
11907: CALL_OW 380
// hc_importance = 0 ;
11911: LD_ADDR_OWVAR 32
11915: PUSH
11916: LD_INT 0
11918: ST_TO_ADDR
// un = CreateHuman ;
11919: LD_ADDR_VAR 0 3
11923: PUSH
11924: CALL_OW 44
11928: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11929: LD_VAR 0 3
11933: PPUSH
11934: LD_INT 11
11936: PPUSH
11937: LD_INT 0
11939: PPUSH
11940: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
11944: LD_VAR 0 3
11948: PPUSH
11949: LD_INT 111
11951: PPUSH
11952: LD_INT 38
11954: PPUSH
11955: CALL_OW 118
// end ;
11959: GO 11851
11961: POP
11962: POP
// for i = 1 to 2 do
11963: LD_ADDR_VAR 0 2
11967: PUSH
11968: DOUBLE
11969: LD_INT 1
11971: DEC
11972: ST_TO_ADDR
11973: LD_INT 2
11975: PUSH
11976: FOR_TO
11977: IFFALSE 12060
// begin uc_side = 3 ;
11979: LD_ADDR_OWVAR 20
11983: PUSH
11984: LD_INT 3
11986: ST_TO_ADDR
// uc_nation = 3 ;
11987: LD_ADDR_OWVAR 21
11991: PUSH
11992: LD_INT 3
11994: ST_TO_ADDR
// hc_gallery =  ;
11995: LD_ADDR_OWVAR 33
11999: PUSH
12000: LD_STRING 
12002: ST_TO_ADDR
// hc_name =  ;
12003: LD_ADDR_OWVAR 26
12007: PUSH
12008: LD_STRING 
12010: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12011: LD_INT 0
12013: PPUSH
12014: LD_INT 3
12016: PPUSH
12017: LD_EXP 13
12021: PPUSH
12022: LD_EXP 14
12026: PPUSH
12027: CALL_OW 12
12031: PPUSH
12032: CALL_OW 380
// un = CreateHuman ;
12036: LD_ADDR_VAR 0 3
12040: PUSH
12041: CALL_OW 44
12045: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12046: LD_VAR 0 3
12050: PPUSH
12051: LD_INT 10
12053: PPUSH
12054: CALL_OW 52
// end ;
12058: GO 11976
12060: POP
12061: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12062: LD_INT 3
12064: PPUSH
12065: LD_INT 3
12067: PPUSH
12068: LD_INT 33
12070: PPUSH
12071: LD_EXP 13
12075: PPUSH
12076: LD_EXP 14
12080: PPUSH
12081: CALL_OW 12
12085: PPUSH
12086: LD_INT 1
12088: PPUSH
12089: LD_INT 1
12091: PUSH
12092: LD_INT 2
12094: PUSH
12095: LD_INT 2
12097: PUSH
12098: LD_INT 3
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: PUSH
12107: LD_OWVAR 67
12111: ARRAY
12112: PPUSH
12113: CALL 8729 0 6
// for i in UnitsInside ( arm2 ) do
12117: LD_ADDR_VAR 0 2
12121: PUSH
12122: LD_INT 33
12124: PPUSH
12125: CALL_OW 313
12129: PUSH
12130: FOR_IN
12131: IFFALSE 12164
// southBaseDefenders = Replace ( southBaseDefenders , southBaseDefenders + 1 , i ) ;
12133: LD_ADDR_EXP 25
12137: PUSH
12138: LD_EXP 25
12142: PPUSH
12143: LD_EXP 25
12147: PUSH
12148: LD_INT 1
12150: PLUS
12151: PPUSH
12152: LD_VAR 0 2
12156: PPUSH
12157: CALL_OW 1
12161: ST_TO_ADDR
12162: GO 12130
12164: POP
12165: POP
// end ;
12166: LD_VAR 0 1
12170: RET
// export function PrepareNorthBase ; var i , un ; begin
12171: LD_INT 0
12173: PPUSH
12174: PPUSH
12175: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) , 4 ] [ Difficulty ] do
12176: LD_ADDR_VAR 0 2
12180: PUSH
12181: DOUBLE
12182: LD_INT 1
12184: DEC
12185: ST_TO_ADDR
12186: LD_INT 1
12188: PPUSH
12189: LD_INT 2
12191: PPUSH
12192: CALL_OW 12
12196: PUSH
12197: LD_INT 2
12199: PPUSH
12200: LD_INT 3
12202: PPUSH
12203: CALL_OW 12
12207: PUSH
12208: LD_INT 3
12210: PPUSH
12211: LD_INT 4
12213: PPUSH
12214: CALL_OW 12
12218: PUSH
12219: LD_INT 4
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: PUSH
12228: LD_OWVAR 67
12232: ARRAY
12233: PUSH
12234: FOR_TO
12235: IFFALSE 12321
// begin uc_side = 3 ;
12237: LD_ADDR_OWVAR 20
12241: PUSH
12242: LD_INT 3
12244: ST_TO_ADDR
// uc_nation = 3 ;
12245: LD_ADDR_OWVAR 21
12249: PUSH
12250: LD_INT 3
12252: ST_TO_ADDR
// hc_gallery =  ;
12253: LD_ADDR_OWVAR 33
12257: PUSH
12258: LD_STRING 
12260: ST_TO_ADDR
// hc_name =  ;
12261: LD_ADDR_OWVAR 26
12265: PUSH
12266: LD_STRING 
12268: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12269: LD_INT 0
12271: PPUSH
12272: LD_INT 1
12274: PPUSH
12275: LD_EXP 13
12279: PPUSH
12280: LD_EXP 14
12284: PPUSH
12285: CALL_OW 12
12289: PPUSH
12290: CALL_OW 380
// un = CreateHuman ;
12294: LD_ADDR_VAR 0 3
12298: PUSH
12299: CALL_OW 44
12303: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12304: LD_VAR 0 3
12308: PPUSH
12309: LD_INT 14
12311: PPUSH
12312: LD_INT 0
12314: PPUSH
12315: CALL_OW 49
// end ;
12319: GO 12234
12321: POP
12322: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) , 4 ] [ Difficulty ] ) ;
12323: LD_INT 3
12325: PPUSH
12326: LD_INT 3
12328: PPUSH
12329: LD_INT 2
12331: PPUSH
12332: LD_EXP 13
12336: PPUSH
12337: LD_EXP 14
12341: PPUSH
12342: CALL_OW 12
12346: PPUSH
12347: LD_INT 1
12349: PPUSH
12350: LD_INT 1
12352: PPUSH
12353: LD_INT 2
12355: PPUSH
12356: CALL_OW 12
12360: PUSH
12361: LD_INT 1
12363: PPUSH
12364: LD_INT 3
12366: PPUSH
12367: CALL_OW 12
12371: PUSH
12372: LD_INT 1
12374: PPUSH
12375: LD_INT 3
12377: PPUSH
12378: CALL_OW 12
12382: PUSH
12383: LD_INT 4
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: PUSH
12392: LD_OWVAR 67
12396: ARRAY
12397: PPUSH
12398: CALL 8729 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 , 2 ] [ Difficulty ] ) ;
12402: LD_INT 3
12404: PPUSH
12405: LD_INT 3
12407: PPUSH
12408: LD_INT 23
12410: PPUSH
12411: LD_EXP 13
12415: PPUSH
12416: LD_EXP 14
12420: PPUSH
12421: CALL_OW 12
12425: PPUSH
12426: LD_INT 4
12428: PPUSH
12429: LD_INT 0
12431: PUSH
12432: LD_INT 1
12434: PUSH
12435: LD_INT 2
12437: PUSH
12438: LD_INT 2
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: PUSH
12447: LD_OWVAR 67
12451: ARRAY
12452: PPUSH
12453: CALL 8729 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12457: LD_INT 3
12459: PPUSH
12460: LD_INT 3
12462: PPUSH
12463: LD_INT 1
12465: PPUSH
12466: LD_EXP 13
12470: PPUSH
12471: LD_EXP 14
12475: PPUSH
12476: CALL_OW 12
12480: PPUSH
12481: LD_INT 2
12483: PPUSH
12484: LD_INT 1
12486: PUSH
12487: LD_INT 2
12489: PUSH
12490: LD_INT 2
12492: PUSH
12493: LD_INT 3
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: PUSH
12502: LD_OWVAR 67
12506: ARRAY
12507: PPUSH
12508: CALL 8729 0 6
// for i in UnitsInside ( arm1 ) do
12512: LD_ADDR_VAR 0 2
12516: PUSH
12517: LD_INT 2
12519: PPUSH
12520: CALL_OW 313
12524: PUSH
12525: FOR_IN
12526: IFFALSE 12559
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , i ) ;
12528: LD_ADDR_EXP 24
12532: PUSH
12533: LD_EXP 24
12537: PPUSH
12538: LD_EXP 24
12542: PUSH
12543: LD_INT 1
12545: PLUS
12546: PPUSH
12547: LD_VAR 0 2
12551: PPUSH
12552: CALL_OW 1
12556: ST_TO_ADDR
12557: GO 12525
12559: POP
12560: POP
// end ;
12561: LD_VAR 0 1
12565: RET
// export function PrepareOtherRussians ; var i , un ; begin
12566: LD_INT 0
12568: PPUSH
12569: PPUSH
12570: PPUSH
// for i = 1 to 2 do
12571: LD_ADDR_VAR 0 2
12575: PUSH
12576: DOUBLE
12577: LD_INT 1
12579: DEC
12580: ST_TO_ADDR
12581: LD_INT 2
12583: PUSH
12584: FOR_TO
12585: IFFALSE 12686
// begin uc_side = 3 ;
12587: LD_ADDR_OWVAR 20
12591: PUSH
12592: LD_INT 3
12594: ST_TO_ADDR
// uc_nation = 3 ;
12595: LD_ADDR_OWVAR 21
12599: PUSH
12600: LD_INT 3
12602: ST_TO_ADDR
// hc_gallery =  ;
12603: LD_ADDR_OWVAR 33
12607: PUSH
12608: LD_STRING 
12610: ST_TO_ADDR
// hc_name =  ;
12611: LD_ADDR_OWVAR 26
12615: PUSH
12616: LD_STRING 
12618: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12619: LD_INT 0
12621: PPUSH
12622: LD_INT 1
12624: PPUSH
12625: LD_EXP 13
12629: PPUSH
12630: LD_EXP 14
12634: PPUSH
12635: CALL_OW 12
12639: PPUSH
12640: CALL_OW 380
// un = CreateHuman ;
12644: LD_ADDR_VAR 0 3
12648: PUSH
12649: CALL_OW 44
12653: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12654: LD_VAR 0 3
12658: PPUSH
12659: LD_INT 9
12661: PPUSH
12662: LD_INT 0
12664: PPUSH
12665: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12669: LD_VAR 0 3
12673: PPUSH
12674: LD_INT 80
12676: PPUSH
12677: LD_INT 73
12679: PPUSH
12680: CALL_OW 118
// end ;
12684: GO 12584
12686: POP
12687: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12688: LD_ADDR_VAR 0 2
12692: PUSH
12693: LD_INT 22
12695: PUSH
12696: LD_INT 3
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: PUSH
12703: LD_INT 30
12705: PUSH
12706: LD_INT 31
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: PPUSH
12717: CALL_OW 69
12721: PUSH
12722: FOR_IN
12723: IFFALSE 12751
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12725: LD_EXP 13
12729: PPUSH
12730: LD_EXP 14
12734: PPUSH
12735: CALL_OW 12
12739: PPUSH
12740: LD_VAR 0 2
12744: PPUSH
12745: CALL 8838 0 2
12749: GO 12722
12751: POP
12752: POP
// end ;
12753: LD_VAR 0 1
12757: RET
// export function PrepareCargoBays ; begin
12758: LD_INT 0
12760: PPUSH
// uc_side = 3 ;
12761: LD_ADDR_OWVAR 20
12765: PUSH
12766: LD_INT 3
12768: ST_TO_ADDR
// uc_nation = 3 ;
12769: LD_ADDR_OWVAR 21
12773: PUSH
12774: LD_INT 3
12776: ST_TO_ADDR
// vc_engine = 1 ;
12777: LD_ADDR_OWVAR 39
12781: PUSH
12782: LD_INT 1
12784: ST_TO_ADDR
// vc_control = 1 ;
12785: LD_ADDR_OWVAR 38
12789: PUSH
12790: LD_INT 1
12792: ST_TO_ADDR
// vc_weapon = 51 ;
12793: LD_ADDR_OWVAR 40
12797: PUSH
12798: LD_INT 51
12800: ST_TO_ADDR
// vc_chassis = 22 ;
12801: LD_ADDR_OWVAR 37
12805: PUSH
12806: LD_INT 22
12808: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12809: LD_ADDR_EXP 15
12813: PUSH
12814: CALL_OW 45
12818: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12819: LD_ADDR_EXP 16
12823: PUSH
12824: CALL_OW 45
12828: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12829: LD_EXP 15
12833: PPUSH
12834: LD_INT 13
12836: PPUSH
12837: LD_INT 0
12839: PPUSH
12840: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12844: LD_EXP 16
12848: PPUSH
12849: LD_INT 13
12851: PPUSH
12852: LD_INT 0
12854: PPUSH
12855: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
12859: LD_EXP 15
12863: PPUSH
12864: LD_INT 2
12866: PPUSH
12867: LD_INT 70
12869: PUSH
12870: LD_INT 50
12872: PUSH
12873: LD_INT 30
12875: PUSH
12876: LD_INT 20
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: PUSH
12885: LD_OWVAR 67
12889: ARRAY
12890: PPUSH
12891: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
12895: LD_EXP 16
12899: PPUSH
12900: LD_INT 2
12902: PPUSH
12903: LD_INT 70
12905: PUSH
12906: LD_INT 50
12908: PUSH
12909: LD_INT 30
12911: PUSH
12912: LD_INT 20
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: PUSH
12921: LD_OWVAR 67
12925: ARRAY
12926: PPUSH
12927: CALL_OW 291
// hc_gallery =  ;
12931: LD_ADDR_OWVAR 33
12935: PUSH
12936: LD_STRING 
12938: ST_TO_ADDR
// hc_name =  ;
12939: LD_ADDR_OWVAR 26
12943: PUSH
12944: LD_STRING 
12946: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12947: LD_INT 1
12949: PPUSH
12950: LD_INT 3
12952: PPUSH
12953: LD_INT 1
12955: PPUSH
12956: LD_INT 2
12958: PPUSH
12959: CALL_OW 12
12963: PPUSH
12964: CALL_OW 380
// driver1 = CreateHuman ;
12968: LD_ADDR_EXP 17
12972: PUSH
12973: CALL_OW 44
12977: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
12978: LD_EXP 17
12982: PPUSH
12983: LD_EXP 15
12987: PPUSH
12988: CALL_OW 52
// hc_name = Nikolai Andreyev ;
12992: LD_ADDR_OWVAR 26
12996: PUSH
12997: LD_STRING Nikolai Andreyev
12999: ST_TO_ADDR
// driver2 = CreateHuman ;
13000: LD_ADDR_EXP 18
13004: PUSH
13005: CALL_OW 44
13009: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13010: LD_EXP 18
13014: PPUSH
13015: LD_EXP 16
13019: PPUSH
13020: CALL_OW 52
// end ;
13024: LD_VAR 0 1
13028: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , mech ; begin
13029: LD_INT 0
13031: PPUSH
13032: PPUSH
13033: PPUSH
13034: PPUSH
13035: PPUSH
13036: PPUSH
// uc_side = 3 ;
13037: LD_ADDR_OWVAR 20
13041: PUSH
13042: LD_INT 3
13044: ST_TO_ADDR
// uc_nation = 3 ;
13045: LD_ADDR_OWVAR 21
13049: PUSH
13050: LD_INT 3
13052: ST_TO_ADDR
// for i := 1 to count do
13053: LD_ADDR_VAR 0 4
13057: PUSH
13058: DOUBLE
13059: LD_INT 1
13061: DEC
13062: ST_TO_ADDR
13063: LD_VAR 0 1
13067: PUSH
13068: FOR_TO
13069: IFFALSE 13331
// begin vc_engine = 1 ;
13071: LD_ADDR_OWVAR 39
13075: PUSH
13076: LD_INT 1
13078: ST_TO_ADDR
// vc_control = 1 ;
13079: LD_ADDR_OWVAR 38
13083: PUSH
13084: LD_INT 1
13086: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
13087: LD_ADDR_OWVAR 40
13091: PUSH
13092: LD_INT 42
13094: ST_TO_ADDR
// if Difficulty = 3 then
13095: LD_OWVAR 67
13099: PUSH
13100: LD_INT 3
13102: EQUAL
13103: IFFALSE 13132
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13105: LD_ADDR_OWVAR 40
13109: PUSH
13110: LD_INT 42
13112: PUSH
13113: LD_INT 43
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: PUSH
13120: LD_INT 1
13122: PPUSH
13123: LD_INT 2
13125: PPUSH
13126: CALL_OW 12
13130: ARRAY
13131: ST_TO_ADDR
// if Difficulty = 4 then
13132: LD_OWVAR 67
13136: PUSH
13137: LD_INT 4
13139: EQUAL
13140: IFFALSE 13177
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 4 ) ] ;
13142: LD_ADDR_OWVAR 40
13146: PUSH
13147: LD_INT 42
13149: PUSH
13150: LD_INT 43
13152: PUSH
13153: LD_INT 43
13155: PUSH
13156: LD_INT 44
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: PUSH
13165: LD_INT 1
13167: PPUSH
13168: LD_INT 4
13170: PPUSH
13171: CALL_OW 12
13175: ARRAY
13176: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
13177: LD_ADDR_OWVAR 37
13181: PUSH
13182: LD_INT 21
13184: PUSH
13185: LD_INT 22
13187: PUSH
13188: LD_INT 22
13190: PUSH
13191: LD_INT 22
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: PUSH
13200: LD_OWVAR 67
13204: ARRAY
13205: ST_TO_ADDR
// veh = CreateVehicle ;
13206: LD_ADDR_VAR 0 5
13210: PUSH
13211: CALL_OW 45
13215: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13216: LD_VAR 0 5
13220: PPUSH
13221: LD_VAR 0 2
13225: PPUSH
13226: LD_INT 0
13228: PPUSH
13229: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13233: LD_ADDR_EXP 26
13237: PUSH
13238: LD_EXP 26
13242: PUSH
13243: LD_VAR 0 5
13247: ADD
13248: ST_TO_ADDR
// hc_gallery =  ;
13249: LD_ADDR_OWVAR 33
13253: PUSH
13254: LD_STRING 
13256: ST_TO_ADDR
// hc_name =  ;
13257: LD_ADDR_OWVAR 26
13261: PUSH
13262: LD_STRING 
13264: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13265: LD_INT 0
13267: PPUSH
13268: LD_INT 3
13270: PPUSH
13271: LD_EXP 13
13275: PPUSH
13276: LD_EXP 14
13280: PPUSH
13281: CALL_OW 12
13285: PPUSH
13286: CALL_OW 380
// un = CreateHuman ;
13290: LD_ADDR_VAR 0 6
13294: PUSH
13295: CALL_OW 44
13299: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13300: LD_VAR 0 6
13304: PPUSH
13305: LD_VAR 0 5
13309: PPUSH
13310: CALL_OW 52
// ComMoveXY ( un , 14 , 9 ) ;
13314: LD_VAR 0 6
13318: PPUSH
13319: LD_INT 14
13321: PPUSH
13322: LD_INT 9
13324: PPUSH
13325: CALL_OW 111
// end ;
13329: GO 13068
13331: POP
13332: POP
// wait ( 0 0$1 ) ;
13333: LD_INT 35
13335: PPUSH
13336: CALL_OW 67
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13340: LD_INT 0
13342: PPUSH
13343: LD_INT 2
13345: PPUSH
13346: LD_EXP 13
13350: PPUSH
13351: LD_EXP 14
13355: PPUSH
13356: CALL_OW 12
13360: PPUSH
13361: CALL_OW 380
// un = CreateHuman ;
13365: LD_ADDR_VAR 0 6
13369: PUSH
13370: CALL_OW 44
13374: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13375: LD_ADDR_VAR 0 4
13379: PUSH
13380: DOUBLE
13381: LD_INT 1
13383: DEC
13384: ST_TO_ADDR
13385: LD_VAR 0 1
13389: PUSH
13390: LD_INT 2
13392: PUSH
13393: LD_INT 2
13395: MUL
13396: PLUS
13397: PUSH
13398: FOR_TO
13399: IFFALSE 13491
// begin hc_gallery =  ;
13401: LD_ADDR_OWVAR 33
13405: PUSH
13406: LD_STRING 
13408: ST_TO_ADDR
// hc_name =  ;
13409: LD_ADDR_OWVAR 26
13413: PUSH
13414: LD_STRING 
13416: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13417: LD_INT 1
13419: PPUSH
13420: LD_INT 1
13422: PPUSH
13423: LD_EXP 13
13427: PPUSH
13428: LD_EXP 14
13432: PPUSH
13433: CALL_OW 12
13437: PPUSH
13438: CALL_OW 380
// un = CreateHuman ;
13442: LD_ADDR_VAR 0 6
13446: PUSH
13447: CALL_OW 44
13451: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 13 , 4 , false ) ;
13452: LD_VAR 0 6
13456: PPUSH
13457: LD_INT 9
13459: PPUSH
13460: LD_INT 13
13462: PPUSH
13463: LD_INT 4
13465: PPUSH
13466: LD_INT 0
13468: PPUSH
13469: CALL_OW 50
// attackGroup = attackGroup ^ un ;
13473: LD_ADDR_EXP 26
13477: PUSH
13478: LD_EXP 26
13482: PUSH
13483: LD_VAR 0 6
13487: ADD
13488: ST_TO_ADDR
// end ;
13489: GO 13398
13491: POP
13492: POP
// tmp := FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13493: LD_ADDR_VAR 0 7
13497: PUSH
13498: LD_INT 26
13500: PPUSH
13501: LD_INT 22
13503: PUSH
13504: LD_INT 3
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: PUSH
13511: LD_INT 21
13513: PUSH
13514: LD_INT 1
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: LD_INT 26
13523: PUSH
13524: LD_INT 1
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: LIST
13535: PPUSH
13536: CALL_OW 70
13540: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13541: LD_VAR 0 7
13545: PUSH
13546: LD_INT 1
13548: ARRAY
13549: PPUSH
13550: LD_STRING D9-Rus3-1
13552: PPUSH
13553: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13557: LD_VAR 0 7
13561: PUSH
13562: LD_INT 2
13564: ARRAY
13565: PPUSH
13566: LD_STRING D9-Russ-1
13568: PPUSH
13569: CALL_OW 88
// ComAgressiveMove ( attackGroup , 31 , 13 ) ;
13573: LD_EXP 26
13577: PPUSH
13578: LD_INT 31
13580: PPUSH
13581: LD_INT 13
13583: PPUSH
13584: CALL_OW 114
// wait ( 0 0$3 ) ;
13588: LD_INT 105
13590: PPUSH
13591: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13595: LD_INT 35
13597: PPUSH
13598: CALL_OW 67
// for i in attackGroup do
13602: LD_ADDR_VAR 0 4
13606: PUSH
13607: LD_EXP 26
13611: PUSH
13612: FOR_IN
13613: IFFALSE 13980
// begin if IsDead ( i ) then
13615: LD_VAR 0 4
13619: PPUSH
13620: CALL_OW 301
13624: IFFALSE 13644
// begin attackGroup := attackGroup diff i ;
13626: LD_ADDR_EXP 26
13630: PUSH
13631: LD_EXP 26
13635: PUSH
13636: LD_VAR 0 4
13640: DIFF
13641: ST_TO_ADDR
// continue ;
13642: GO 13612
// end ; if not HasTask ( i ) and not GetTag ( i ) then
13644: LD_VAR 0 4
13648: PPUSH
13649: CALL_OW 314
13653: NOT
13654: PUSH
13655: LD_VAR 0 4
13659: PPUSH
13660: CALL_OW 110
13664: NOT
13665: AND
13666: IFFALSE 13702
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
13668: LD_VAR 0 4
13672: PPUSH
13673: LD_INT 22
13675: PUSH
13676: LD_INT 1
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PPUSH
13683: CALL_OW 69
13687: PPUSH
13688: LD_VAR 0 4
13692: PPUSH
13693: CALL_OW 74
13697: PPUSH
13698: CALL_OW 115
// if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
13702: LD_VAR 0 4
13706: PPUSH
13707: CALL_OW 110
13711: NOT
13712: PUSH
13713: LD_VAR 0 4
13717: PPUSH
13718: CALL_OW 256
13722: PUSH
13723: LD_INT 650
13725: LESS
13726: AND
13727: PUSH
13728: LD_VAR 0 4
13732: PPUSH
13733: CALL_OW 247
13737: PUSH
13738: LD_INT 2
13740: EQUAL
13741: AND
13742: IFFALSE 13771
// begin SetTag ( i , 1 ) ;
13744: LD_VAR 0 4
13748: PPUSH
13749: LD_INT 1
13751: PPUSH
13752: CALL_OW 109
// ComMoveXY ( i , 20 , 8 ) ;
13756: LD_VAR 0 4
13760: PPUSH
13761: LD_INT 20
13763: PPUSH
13764: LD_INT 8
13766: PPUSH
13767: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 20 , 8 ) < 6 then
13771: LD_VAR 0 4
13775: PPUSH
13776: CALL_OW 110
13780: PUSH
13781: LD_INT 1
13783: EQUAL
13784: PUSH
13785: LD_VAR 0 4
13789: PPUSH
13790: LD_INT 20
13792: PPUSH
13793: LD_INT 8
13795: PPUSH
13796: CALL_OW 297
13800: PUSH
13801: LD_INT 6
13803: LESS
13804: AND
13805: IFFALSE 13819
// SetTag ( i , 2 ) ;
13807: LD_VAR 0 4
13811: PPUSH
13812: LD_INT 2
13814: PPUSH
13815: CALL_OW 109
// if GetTag ( i ) = 2 then
13819: LD_VAR 0 4
13823: PPUSH
13824: CALL_OW 110
13828: PUSH
13829: LD_INT 2
13831: EQUAL
13832: IFFALSE 13940
// begin if GetLives ( i ) = 1000 then
13834: LD_VAR 0 4
13838: PPUSH
13839: CALL_OW 256
13843: PUSH
13844: LD_INT 1000
13846: EQUAL
13847: IFFALSE 13863
// SetTag ( i , 3 ) else
13849: LD_VAR 0 4
13853: PPUSH
13854: LD_INT 3
13856: PPUSH
13857: CALL_OW 109
13861: GO 13940
// if IsDrivenBy ( i ) then
13863: LD_VAR 0 4
13867: PPUSH
13868: CALL_OW 311
13872: IFFALSE 13940
// begin mech := IsDrivenBy ( i ) ;
13874: LD_ADDR_VAR 0 8
13878: PUSH
13879: LD_VAR 0 4
13883: PPUSH
13884: CALL_OW 311
13888: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
13889: LD_INT 1
13891: PPUSH
13892: LD_VAR 0 8
13896: PPUSH
13897: CALL_OW 292
13901: NOT
13902: PUSH
13903: LD_VAR 0 8
13907: PPUSH
13908: CALL_OW 256
13912: PUSH
13913: LD_INT 1000
13915: LESS
13916: AND
13917: IFFALSE 13931
// SetLives ( mech , 1000 ) ;
13919: LD_VAR 0 8
13923: PPUSH
13924: LD_INT 1000
13926: PPUSH
13927: CALL_OW 234
// ComRepairVehicleAndReturn ( mech ) ;
13931: LD_VAR 0 8
13935: PPUSH
13936: CALL 71808 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
13940: LD_VAR 0 4
13944: PPUSH
13945: CALL_OW 110
13949: PUSH
13950: LD_INT 3
13952: EQUAL
13953: PUSH
13954: LD_VAR 0 4
13958: PPUSH
13959: CALL_OW 311
13963: AND
13964: IFFALSE 13978
// SetTag ( i , 0 ) ;
13966: LD_VAR 0 4
13970: PPUSH
13971: LD_INT 0
13973: PPUSH
13974: CALL_OW 109
// end ;
13978: GO 13612
13980: POP
13981: POP
// until not attackGroup ;
13982: LD_EXP 26
13986: NOT
13987: IFFALSE 13595
// end ;
13989: LD_VAR 0 3
13993: RET
// every 0 0$1 trigger UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do var i ;
13994: LD_EXP 26
13998: PPUSH
13999: LD_INT 21
14001: PUSH
14002: LD_INT 2
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PPUSH
14009: CALL_OW 72
14013: IFFALSE 14081
14015: GO 14017
14017: DISABLE
14018: LD_INT 0
14020: PPUSH
// begin enable ;
14021: ENABLE
// for i in UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do
14022: LD_ADDR_VAR 0 1
14026: PUSH
14027: LD_EXP 26
14031: PPUSH
14032: LD_INT 21
14034: PUSH
14035: LD_INT 2
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: PPUSH
14042: CALL_OW 72
14046: PUSH
14047: FOR_IN
14048: IFFALSE 14079
// if GetFuel ( i ) < 3 then
14050: LD_VAR 0 1
14054: PPUSH
14055: CALL_OW 261
14059: PUSH
14060: LD_INT 3
14062: LESS
14063: IFFALSE 14077
// SetFuel ( i , 3 ) ;
14065: LD_VAR 0 1
14069: PPUSH
14070: LD_INT 3
14072: PPUSH
14073: CALL_OW 240
14077: GO 14047
14079: POP
14080: POP
// end ; end_of_file
14081: PPOPN 1
14083: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do
14084: LD_INT 22
14086: PUSH
14087: LD_INT 3
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PUSH
14094: LD_INT 25
14096: PUSH
14097: LD_INT 2
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: PPUSH
14108: CALL_OW 69
14112: IFFALSE 14131
14114: GO 14116
14116: DISABLE
// begin enable ;
14117: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
14118: LD_INT 3
14120: PPUSH
14121: LD_INT 1
14123: PPUSH
14124: LD_INT 22
14126: PPUSH
14127: CALL 8974 0 3
// end ;
14131: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
14132: LD_INT 22
14134: PUSH
14135: LD_INT 3
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: PUSH
14142: LD_INT 25
14144: PUSH
14145: LD_INT 4
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PPUSH
14156: CALL_OW 69
14160: IFFALSE 14182
14162: GO 14164
14164: DISABLE
// begin enable ;
14165: ENABLE
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
14166: LD_INT 3
14168: PPUSH
14169: LD_INT 20
14171: PPUSH
14172: LD_INT 22
14174: PPUSH
14175: LD_INT 23
14177: PPUSH
14178: CALL 9306 0 4
// end ;
14182: END
// every 0 0$1 trigger northBaseDefenders do
14183: LD_EXP 24
14187: IFFALSE 14211
14189: GO 14191
14191: DISABLE
// begin enable ;
14192: ENABLE
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
14193: LD_INT 22
14195: PPUSH
14196: LD_INT 1
14198: PPUSH
14199: LD_EXP 24
14203: PPUSH
14204: LD_INT 2
14206: PPUSH
14207: CALL 9578 0 4
// end ;
14211: END
// every 0 0$1 trigger southBaseDefenders do
14212: LD_EXP 25
14216: IFFALSE 14240
14218: GO 14220
14220: DISABLE
// begin enable ;
14221: ENABLE
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
14222: LD_INT 23
14224: PPUSH
14225: LD_INT 1
14227: PPUSH
14228: LD_EXP 25
14232: PPUSH
14233: LD_INT 33
14235: PPUSH
14236: CALL 9578 0 4
// end ; end_of_file
14240: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
14241: LD_VAR 0 1
14245: PUSH
14246: LD_EXP 1
14250: EQUAL
14251: IFFALSE 14260
// YouLost ( JMM ) ;
14253: LD_STRING JMM
14255: PPUSH
14256: CALL_OW 104
// if GetBType ( unit ) = b_depot then
14260: LD_VAR 0 1
14264: PPUSH
14265: CALL_OW 266
14269: PUSH
14270: LD_INT 0
14272: EQUAL
14273: IFFALSE 14282
// YouLost ( DepotDestroyed ) ;
14275: LD_STRING DepotDestroyed
14277: PPUSH
14278: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14282: LD_VAR 0 1
14286: PPUSH
14287: CALL_OW 255
14291: PUSH
14292: LD_INT 1
14294: EQUAL
14295: PUSH
14296: LD_VAR 0 1
14300: PPUSH
14301: CALL_OW 247
14305: PUSH
14306: LD_INT 1
14308: EQUAL
14309: AND
14310: IFFALSE 14326
// deadsCounter = deadsCounter + 1 ;
14312: LD_ADDR_EXP 31
14316: PUSH
14317: LD_EXP 31
14321: PUSH
14322: LD_INT 1
14324: PLUS
14325: ST_TO_ADDR
// end ;
14326: PPOPN 1
14328: END
// on Command ( comandid ) do var i , j , tmp ;
14329: LD_INT 0
14331: PPUSH
14332: PPUSH
14333: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
14334: LD_ADDR_VAR 0 2
14338: PUSH
14339: LD_INT 22
14341: PUSH
14342: LD_INT 1
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: PUSH
14349: LD_INT 21
14351: PUSH
14352: LD_INT 2
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PPUSH
14363: CALL_OW 69
14367: PUSH
14368: FOR_IN
14369: IFFALSE 14490
// begin if GetTaskList ( i ) then
14371: LD_VAR 0 2
14375: PPUSH
14376: CALL_OW 437
14380: IFFALSE 14488
// begin for j = 1 to GetTaskList ( i ) do
14382: LD_ADDR_VAR 0 3
14386: PUSH
14387: DOUBLE
14388: LD_INT 1
14390: DEC
14391: ST_TO_ADDR
14392: LD_VAR 0 2
14396: PPUSH
14397: CALL_OW 437
14401: PUSH
14402: FOR_TO
14403: IFFALSE 14486
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14405: LD_ADDR_VAR 0 4
14409: PUSH
14410: LD_VAR 0 2
14414: PPUSH
14415: CALL_OW 437
14419: PUSH
14420: LD_VAR 0 3
14424: ARRAY
14425: PUSH
14426: LD_INT 4
14428: ARRAY
14429: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14430: LD_VAR 0 4
14434: PPUSH
14435: CALL_OW 255
14439: PUSH
14440: LD_INT 3
14442: EQUAL
14443: PUSH
14444: LD_VAR 0 4
14448: PPUSH
14449: CALL_OW 247
14453: PUSH
14454: LD_INT 2
14456: EQUAL
14457: AND
14458: PUSH
14459: LD_VAR 0 4
14463: PPUSH
14464: CALL_OW 264
14468: PUSH
14469: LD_INT 51
14471: EQUAL
14472: AND
14473: IFFALSE 14484
// ComStop ( i ) ;
14475: LD_VAR 0 2
14479: PPUSH
14480: CALL_OW 141
// end ;
14484: GO 14402
14486: POP
14487: POP
// end ; end ;
14488: GO 14368
14490: POP
14491: POP
// end ;
14492: PPOPN 4
14494: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14495: LD_VAR 0 2
14499: PUSH
14500: LD_EXP 8
14504: EQUAL
14505: PUSH
14506: LD_EXP 21
14510: PUSH
14511: LD_INT 4
14513: NONEQUAL
14514: AND
14515: IFFALSE 14667
// begin if IsOk ( Mikhail ) then
14517: LD_EXP 8
14521: PPUSH
14522: CALL_OW 302
14526: IFFALSE 14534
// AskMikhail else
14528: CALL 7251 0 0
14532: GO 14667
// if IsOk ( llab1 ) then
14534: LD_INT 23
14536: PPUSH
14537: CALL_OW 302
14541: IFFALSE 14630
// begin InGameOn ;
14543: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14547: LD_EXP 8
14551: PPUSH
14552: LD_INT 6
14554: PPUSH
14555: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
14559: LD_INT 23
14561: PPUSH
14562: LD_INT 6
14564: PPUSH
14565: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
14569: LD_EXP 8
14573: PPUSH
14574: LD_INT 23
14576: PPUSH
14577: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14581: LD_INT 35
14583: PPUSH
14584: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
14588: LD_EXP 8
14592: PPUSH
14593: CALL_OW 310
14597: PUSH
14598: LD_INT 23
14600: EQUAL
14601: PUSH
14602: LD_EXP 8
14606: PPUSH
14607: CALL_OW 301
14611: OR
14612: IFFALSE 14581
// SetSide ( llab1 , 1 ) ;
14614: LD_INT 23
14616: PPUSH
14617: LD_INT 1
14619: PPUSH
14620: CALL_OW 235
// InGameOff ;
14624: CALL_OW 9
// end else
14628: GO 14667
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
14630: LD_INT 3
14632: PPUSH
14633: LD_INT 6
14635: PPUSH
14636: LD_INT 2
14638: PPUSH
14639: LD_INT 1
14641: PPUSH
14642: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
14646: LD_EXP 8
14650: PPUSH
14651: LD_INT 6
14653: PPUSH
14654: CALL_OW 235
// ComHold ( Mikhail ) ;
14658: LD_EXP 8
14662: PPUSH
14663: CALL_OW 140
// end ; end ; end ;
14667: PPOPN 2
14669: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
14670: LD_EXP 8
14674: PPUSH
14675: CALL_OW 257
14679: PUSH
14680: LD_INT 3
14682: NONEQUAL
14683: IFFALSE 14701
14685: GO 14687
14687: DISABLE
// begin enable ;
14688: ENABLE
// SetClass ( Mikhail , 3 ) ;
14689: LD_EXP 8
14693: PPUSH
14694: LD_INT 3
14696: PPUSH
14697: CALL_OW 336
// end ; end_of_file
14701: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
14702: LD_INT 22
14704: PUSH
14705: LD_INT 1
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: PUSH
14712: LD_INT 21
14714: PUSH
14715: LD_INT 1
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: PUSH
14722: LD_INT 25
14724: PUSH
14725: LD_INT 2
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: LIST
14736: PPUSH
14737: CALL_OW 69
14741: PUSH
14742: LD_INT 0
14744: EQUAL
14745: PUSH
14746: LD_INT 22
14748: PUSH
14749: LD_INT 4
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PUSH
14756: LD_INT 21
14758: PUSH
14759: LD_INT 1
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PUSH
14766: LD_INT 25
14768: PUSH
14769: LD_INT 2
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: LIST
14780: PPUSH
14781: CALL_OW 69
14785: PUSH
14786: LD_INT 0
14788: EQUAL
14789: AND
14790: PUSH
14791: LD_INT 1
14793: PPUSH
14794: CALL_OW 255
14798: PUSH
14799: LD_INT 3
14801: EQUAL
14802: AND
14803: PUSH
14804: LD_INT 10
14806: PPUSH
14807: CALL_OW 255
14811: PUSH
14812: LD_INT 3
14814: EQUAL
14815: AND
14816: IFFALSE 14828
14818: GO 14820
14820: DISABLE
// YouLost ( Engineer ) ;
14821: LD_STRING Engineer
14823: PPUSH
14824: CALL_OW 104
14828: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14829: LD_INT 1
14831: PPUSH
14832: CALL_OW 255
14836: PUSH
14837: LD_INT 3
14839: EQUAL
14840: PUSH
14841: LD_EXP 27
14845: PUSH
14846: LD_INT 1
14848: EQUAL
14849: AND
14850: IFFALSE 14862
14852: GO 14854
14854: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14855: LD_STRING DepotCaptured
14857: PPUSH
14858: CALL_OW 104
14862: END
// export function PrepareTigers ; var i , un ; begin
14863: LD_INT 0
14865: PPUSH
14866: PPUSH
14867: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
14868: LD_ADDR_VAR 0 2
14872: PUSH
14873: DOUBLE
14874: LD_INT 1
14876: DEC
14877: ST_TO_ADDR
14878: LD_INT 2
14880: PUSH
14881: LD_INT 3
14883: PUSH
14884: LD_INT 4
14886: PUSH
14887: LD_INT 5
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: PUSH
14896: LD_OWVAR 67
14900: ARRAY
14901: PUSH
14902: FOR_TO
14903: IFFALSE 15018
// begin uc_side := 0 ;
14905: LD_ADDR_OWVAR 20
14909: PUSH
14910: LD_INT 0
14912: ST_TO_ADDR
// uc_nation := nation_nature ;
14913: LD_ADDR_OWVAR 21
14917: PUSH
14918: LD_INT 0
14920: ST_TO_ADDR
// hc_sex := sex_male ;
14921: LD_ADDR_OWVAR 27
14925: PUSH
14926: LD_INT 1
14928: ST_TO_ADDR
// hc_class := class_tiger ;
14929: LD_ADDR_OWVAR 28
14933: PUSH
14934: LD_INT 14
14936: ST_TO_ADDR
// hc_skills := [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14937: LD_ADDR_OWVAR 31
14941: PUSH
14942: LD_EXP 14
14946: PUSH
14947: LD_INT 0
14949: PUSH
14950: LD_INT 0
14952: PUSH
14953: LD_INT 0
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: ST_TO_ADDR
// hc_agressivity := [ 30 , 40 , 45 , 50 ] [ Difficulty ] ;
14962: LD_ADDR_OWVAR 35
14966: PUSH
14967: LD_INT 30
14969: PUSH
14970: LD_INT 40
14972: PUSH
14973: LD_INT 45
14975: PUSH
14976: LD_INT 50
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: PUSH
14985: LD_OWVAR 67
14989: ARRAY
14990: ST_TO_ADDR
// un = CreateHuman ;
14991: LD_ADDR_VAR 0 3
14995: PUSH
14996: CALL_OW 44
15000: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15001: LD_VAR 0 3
15005: PPUSH
15006: LD_INT 27
15008: PPUSH
15009: LD_INT 0
15011: PPUSH
15012: CALL_OW 49
// end ;
15016: GO 14902
15018: POP
15019: POP
// end ; end_of_file
15020: LD_VAR 0 1
15024: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
15025: LD_INT 1
15027: PPUSH
15028: CALL_OW 255
15032: PUSH
15033: LD_INT 1
15035: EQUAL
15036: PUSH
15037: LD_INT 10
15039: PPUSH
15040: CALL_OW 255
15044: PUSH
15045: LD_INT 1
15047: EQUAL
15048: AND
15049: PUSH
15050: LD_EXP 20
15054: PUSH
15055: LD_INT 1
15057: EQUAL
15058: AND
15059: PUSH
15060: LD_INT 22
15062: PUSH
15063: LD_INT 3
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: PUSH
15070: LD_INT 21
15072: PUSH
15073: LD_INT 2
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: PUSH
15080: LD_INT 34
15082: PUSH
15083: LD_INT 51
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PUSH
15090: LD_INT 3
15092: PUSH
15093: LD_INT 58
15095: PUSH
15096: EMPTY
15097: LIST
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: PPUSH
15109: CALL_OW 69
15113: PUSH
15114: LD_INT 0
15116: EQUAL
15117: AND
15118: IFFALSE 15213
15120: GO 15122
15122: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ) ;
15123: LD_INT 9450
15125: PUSH
15126: LD_INT 8400
15128: PUSH
15129: LD_INT 6300
15131: PUSH
15132: LD_INT 6300
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: PUSH
15141: LD_OWVAR 67
15145: ARRAY
15146: PPUSH
15147: CALL_OW 67
// if cargoEscape = 1 then
15151: LD_EXP 20
15155: PUSH
15156: LD_INT 1
15158: EQUAL
15159: IFFALSE 15213
// begin SayRadio ( Powell , D6-Pow-1 ) ;
15161: LD_EXP 9
15165: PPUSH
15166: LD_STRING D6-Pow-1
15168: PPUSH
15169: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
15173: LD_EXP 1
15177: PPUSH
15178: LD_STRING D6-JMM-1
15180: PPUSH
15181: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
15185: LD_EXP 9
15189: PPUSH
15190: LD_STRING D6-Pow-2
15192: PPUSH
15193: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
15197: LD_EXP 1
15201: PPUSH
15202: LD_STRING D6-JMM-2
15204: PPUSH
15205: CALL_OW 88
// FinishMission ;
15209: CALL 15429 0 0
// end ; end ;
15213: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
15214: LD_INT 1
15216: PPUSH
15217: CALL_OW 255
15221: PUSH
15222: LD_INT 1
15224: EQUAL
15225: PUSH
15226: LD_INT 10
15228: PPUSH
15229: CALL_OW 255
15233: PUSH
15234: LD_INT 1
15236: EQUAL
15237: AND
15238: PUSH
15239: LD_EXP 20
15243: PUSH
15244: LD_INT 1
15246: GREATER
15247: AND
15248: IFFALSE 15323
15250: GO 15252
15252: DISABLE
15253: LD_INT 0
15255: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
15256: LD_INT 11550
15258: PUSH
15259: LD_INT 10500
15261: PUSH
15262: LD_INT 9450
15264: PUSH
15265: LD_INT 8400
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: PUSH
15274: LD_OWVAR 67
15278: ARRAY
15279: PPUSH
15280: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 , 4 ] [ Difficulty ] , RussianAttack ) ;
15284: LD_INT 1
15286: PUSH
15287: LD_INT 2
15289: PUSH
15290: LD_INT 3
15292: PUSH
15293: LD_INT 4
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: PUSH
15302: LD_OWVAR 67
15306: ARRAY
15307: PPUSH
15308: LD_INT 13
15310: PPUSH
15311: CALL 13029 0 2
// lastBattle = 1 ;
15315: LD_ADDR_EXP 27
15319: PUSH
15320: LD_INT 1
15322: ST_TO_ADDR
// end ;
15323: PPOPN 1
15325: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
15326: LD_EXP 27
15330: PUSH
15331: LD_INT 1
15333: EQUAL
15334: PUSH
15335: LD_INT 26
15337: PPUSH
15338: LD_INT 22
15340: PUSH
15341: LD_INT 3
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: LD_INT 21
15350: PUSH
15351: LD_INT 1
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: PPUSH
15362: CALL_OW 70
15366: PUSH
15367: LD_INT 0
15369: EQUAL
15370: AND
15371: IFFALSE 15428
15373: GO 15375
15375: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
15376: LD_EXP 9
15380: PPUSH
15381: LD_STRING D6-Pow-1
15383: PPUSH
15384: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
15388: LD_EXP 1
15392: PPUSH
15393: LD_STRING D6-JMM-1
15395: PPUSH
15396: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
15400: LD_EXP 9
15404: PPUSH
15405: LD_STRING D6-Pow-2
15407: PPUSH
15408: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
15412: LD_EXP 1
15416: PPUSH
15417: LD_STRING D6-JMM-2
15419: PPUSH
15420: CALL_OW 88
// FinishMission ;
15424: CALL 15429 0 0
// end ;
15428: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
15429: LD_INT 0
15431: PPUSH
15432: PPUSH
15433: PPUSH
15434: PPUSH
15435: PPUSH
// if tick <= 18 18$00 then
15436: LD_OWVAR 1
15440: PUSH
15441: LD_INT 37800
15443: LESSEQUAL
15444: IFFALSE 15453
// SetAchievement ( ACH_ASPEED_2 ) ;
15446: LD_STRING ACH_ASPEED_2
15448: PPUSH
15449: CALL_OW 543
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15453: LD_ADDR_VAR 0 2
15457: PUSH
15458: LD_INT 22
15460: PUSH
15461: LD_INT 1
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PUSH
15468: LD_INT 21
15470: PUSH
15471: LD_INT 2
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: PUSH
15478: LD_INT 24
15480: PUSH
15481: LD_INT 251
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: LIST
15492: PPUSH
15493: CALL_OW 69
15497: ST_TO_ADDR
// if tmp then
15498: LD_VAR 0 2
15502: IFFALSE 15516
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15504: LD_VAR 0 2
15508: PPUSH
15509: LD_STRING 02_tanks_1
15511: PPUSH
15512: CALL 10453 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
15516: LD_EXP 21
15520: PUSH
15521: LD_INT 1
15523: EQUAL
15524: PUSH
15525: LD_EXP 8
15529: PPUSH
15530: CALL_OW 300
15534: AND
15535: IFFALSE 15549
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15537: LD_EXP 21
15541: PPUSH
15542: LD_STRING 02_mikhailStatus_1
15544: PPUSH
15545: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15549: LD_INT 1
15551: PPUSH
15552: CALL_OW 274
15556: PPUSH
15557: LD_INT 1
15559: PPUSH
15560: CALL_OW 275
15564: PPUSH
15565: LD_STRING 02_resources_4
15567: PPUSH
15568: CALL_OW 39
// m1 := false ;
15572: LD_ADDR_VAR 0 3
15576: PUSH
15577: LD_INT 0
15579: ST_TO_ADDR
// m2 := false ;
15580: LD_ADDR_VAR 0 4
15584: PUSH
15585: LD_INT 0
15587: ST_TO_ADDR
// m3 := false ;
15588: LD_ADDR_VAR 0 5
15592: PUSH
15593: LD_INT 0
15595: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15596: LD_INT 1
15598: PPUSH
15599: CALL_OW 274
15603: PPUSH
15604: LD_INT 1
15606: PPUSH
15607: CALL_OW 275
15611: PUSH
15612: LD_INT 200
15614: GREATEREQUAL
15615: IFFALSE 15637
// begin AddMedal ( Cans , 1 ) ;
15617: LD_STRING Cans
15619: PPUSH
15620: LD_INT 1
15622: PPUSH
15623: CALL_OW 101
// m1 := true ;
15627: LD_ADDR_VAR 0 3
15631: PUSH
15632: LD_INT 1
15634: ST_TO_ADDR
// end else
15635: GO 15648
// begin AddMedal ( Cans , - 1 ) ;
15637: LD_STRING Cans
15639: PPUSH
15640: LD_INT 1
15642: NEG
15643: PPUSH
15644: CALL_OW 101
// end ; if deadsCounter < 2 then
15648: LD_EXP 31
15652: PUSH
15653: LD_INT 2
15655: LESS
15656: IFFALSE 15678
// begin AddMedal ( Deaths , 1 ) ;
15658: LD_STRING Deaths
15660: PPUSH
15661: LD_INT 1
15663: PPUSH
15664: CALL_OW 101
// m2 := true ;
15668: LD_ADDR_VAR 0 4
15672: PUSH
15673: LD_INT 1
15675: ST_TO_ADDR
// end else
15676: GO 15689
// begin AddMedal ( Deaths , - 1 ) ;
15678: LD_STRING Deaths
15680: PPUSH
15681: LD_INT 1
15683: NEG
15684: PPUSH
15685: CALL_OW 101
// end ; if mikhailStatus = 0 then
15689: LD_EXP 21
15693: PUSH
15694: LD_INT 0
15696: EQUAL
15697: IFFALSE 15710
// AddMedal ( Prisoner , - 1 ) ;
15699: LD_STRING Prisoner
15701: PPUSH
15702: LD_INT 1
15704: NEG
15705: PPUSH
15706: CALL_OW 101
// if mikhailStatus = 1 then
15710: LD_EXP 21
15714: PUSH
15715: LD_INT 1
15717: EQUAL
15718: IFFALSE 15738
// begin AddMedal ( Prisoner , 1 ) ;
15720: LD_STRING Prisoner
15722: PPUSH
15723: LD_INT 1
15725: PPUSH
15726: CALL_OW 101
// m3 := true ;
15730: LD_ADDR_VAR 0 5
15734: PUSH
15735: LD_INT 1
15737: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
15738: LD_EXP 21
15742: PUSH
15743: LD_INT 2
15745: EQUAL
15746: IFFALSE 15766
// begin AddMedal ( Prisoner , 2 ) ;
15748: LD_STRING Prisoner
15750: PPUSH
15751: LD_INT 2
15753: PPUSH
15754: CALL_OW 101
// m3 := true ;
15758: LD_ADDR_VAR 0 5
15762: PUSH
15763: LD_INT 1
15765: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
15766: LD_EXP 21
15770: PUSH
15771: LD_INT 3
15773: EQUAL
15774: IFFALSE 15787
// AddMedal ( Prisoner , - 2 ) ;
15776: LD_STRING Prisoner
15778: PPUSH
15779: LD_INT 2
15781: NEG
15782: PPUSH
15783: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
15787: LD_OWVAR 67
15791: PUSH
15792: LD_INT 3
15794: GREATEREQUAL
15795: PUSH
15796: LD_VAR 0 3
15800: AND
15801: PUSH
15802: LD_VAR 0 4
15806: AND
15807: PUSH
15808: LD_VAR 0 5
15812: AND
15813: IFFALSE 15825
// SetAchievementEX ( ACH_AMER , 2 ) ;
15815: LD_STRING ACH_AMER
15817: PPUSH
15818: LD_INT 2
15820: PPUSH
15821: CALL_OW 564
// GiveMedals ( MAIN ) ;
15825: LD_STRING MAIN
15827: PPUSH
15828: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
15832: LD_INT 22
15834: PUSH
15835: LD_INT 1
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PUSH
15842: LD_INT 23
15844: PUSH
15845: LD_INT 1
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PUSH
15852: LD_INT 21
15854: PUSH
15855: LD_INT 1
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: LIST
15866: PPUSH
15867: CALL_OW 69
15871: PPUSH
15872: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15876: LD_EXP 1
15880: PPUSH
15881: LD_EXP 33
15885: PUSH
15886: LD_STRING JMM
15888: STR
15889: PPUSH
15890: CALL_OW 38
// if IsOK ( Bobby ) then
15894: LD_EXP 2
15898: PPUSH
15899: CALL_OW 302
15903: IFFALSE 15923
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15905: LD_EXP 2
15909: PPUSH
15910: LD_EXP 33
15914: PUSH
15915: LD_STRING Bobby
15917: STR
15918: PPUSH
15919: CALL_OW 38
// if IsOK ( Cyrus ) then
15923: LD_EXP 3
15927: PPUSH
15928: CALL_OW 302
15932: IFFALSE 15952
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15934: LD_EXP 3
15938: PPUSH
15939: LD_EXP 33
15943: PUSH
15944: LD_STRING Cyrus
15946: STR
15947: PPUSH
15948: CALL_OW 38
// if IsOK ( Lisa ) then
15952: LD_EXP 4
15956: PPUSH
15957: CALL_OW 302
15961: IFFALSE 15981
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15963: LD_EXP 4
15967: PPUSH
15968: LD_EXP 33
15972: PUSH
15973: LD_STRING Lisa
15975: STR
15976: PPUSH
15977: CALL_OW 38
// if IsOK ( Khatam ) then
15981: LD_EXP 5
15985: PPUSH
15986: CALL_OW 302
15990: IFFALSE 16010
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
15992: LD_EXP 5
15996: PPUSH
15997: LD_EXP 33
16001: PUSH
16002: LD_STRING Khatam
16004: STR
16005: PPUSH
16006: CALL_OW 38
// if IsOK ( Brian ) then
16010: LD_EXP 6
16014: PPUSH
16015: CALL_OW 302
16019: IFFALSE 16039
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
16021: LD_EXP 6
16025: PPUSH
16026: LD_EXP 33
16030: PUSH
16031: LD_STRING Brian
16033: STR
16034: PPUSH
16035: CALL_OW 38
// if IsOk ( Jerry ) then
16039: LD_EXP 7
16043: PPUSH
16044: CALL_OW 302
16048: IFFALSE 16068
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
16050: LD_EXP 7
16054: PPUSH
16055: LD_EXP 33
16059: PUSH
16060: LD_STRING Jerry
16062: STR
16063: PPUSH
16064: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
16068: LD_EXP 21
16072: PUSH
16073: LD_INT 1
16075: EQUAL
16076: PUSH
16077: LD_EXP 8
16081: PPUSH
16082: CALL_OW 255
16086: PUSH
16087: LD_INT 1
16089: EQUAL
16090: AND
16091: PUSH
16092: LD_EXP 8
16096: PPUSH
16097: CALL_OW 302
16101: AND
16102: IFFALSE 16122
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
16104: LD_EXP 8
16108: PPUSH
16109: LD_EXP 33
16113: PUSH
16114: LD_STRING Mikhail
16116: STR
16117: PPUSH
16118: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
16122: LD_INT 50
16124: PUSH
16125: EMPTY
16126: LIST
16127: PUSH
16128: LD_INT 22
16130: PUSH
16131: LD_INT 1
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 21
16140: PUSH
16141: LD_INT 1
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: LIST
16152: PPUSH
16153: CALL_OW 69
16157: PUSH
16158: LD_EXP 1
16162: PUSH
16163: LD_EXP 2
16167: PUSH
16168: LD_EXP 3
16172: PUSH
16173: LD_EXP 4
16177: PUSH
16178: LD_EXP 5
16182: PUSH
16183: LD_EXP 6
16187: PUSH
16188: LD_EXP 7
16192: PUSH
16193: LD_EXP 8
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: DIFF
16208: PPUSH
16209: LD_STRING 02_other_survivors
16211: PPUSH
16212: CALL_OW 38
// YouWin ;
16216: CALL_OW 103
// end ; end_of_file
16220: LD_VAR 0 1
16224: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
16225: LD_INT 0
16227: PPUSH
// ar_miner := 81 ;
16228: LD_ADDR_EXP 43
16232: PUSH
16233: LD_INT 81
16235: ST_TO_ADDR
// ar_crane := 88 ;
16236: LD_ADDR_EXP 42
16240: PUSH
16241: LD_INT 88
16243: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
16244: LD_ADDR_EXP 37
16248: PUSH
16249: LD_INT 89
16251: ST_TO_ADDR
// us_hack := 99 ;
16252: LD_ADDR_EXP 38
16256: PUSH
16257: LD_INT 99
16259: ST_TO_ADDR
// us_artillery := 97 ;
16260: LD_ADDR_EXP 39
16264: PUSH
16265: LD_INT 97
16267: ST_TO_ADDR
// ar_bio_bomb := 91 ;
16268: LD_ADDR_EXP 40
16272: PUSH
16273: LD_INT 91
16275: ST_TO_ADDR
// ar_mortar := 92 ;
16276: LD_ADDR_EXP 41
16280: PUSH
16281: LD_INT 92
16283: ST_TO_ADDR
// ru_radar := 98 ;
16284: LD_ADDR_EXP 36
16288: PUSH
16289: LD_INT 98
16291: ST_TO_ADDR
// tech_Artillery := 80 ;
16292: LD_ADDR_EXP 44
16296: PUSH
16297: LD_INT 80
16299: ST_TO_ADDR
// tech_RadMat := 81 ;
16300: LD_ADDR_EXP 45
16304: PUSH
16305: LD_INT 81
16307: ST_TO_ADDR
// tech_BasicTools := 82 ;
16308: LD_ADDR_EXP 46
16312: PUSH
16313: LD_INT 82
16315: ST_TO_ADDR
// tech_Cargo := 83 ;
16316: LD_ADDR_EXP 47
16320: PUSH
16321: LD_INT 83
16323: ST_TO_ADDR
// tech_Track := 84 ;
16324: LD_ADDR_EXP 48
16328: PUSH
16329: LD_INT 84
16331: ST_TO_ADDR
// tech_Crane := 85 ;
16332: LD_ADDR_EXP 49
16336: PUSH
16337: LD_INT 85
16339: ST_TO_ADDR
// tech_Bulldozer := 86 ;
16340: LD_ADDR_EXP 50
16344: PUSH
16345: LD_INT 86
16347: ST_TO_ADDR
// tech_Hovercraft := 87 ;
16348: LD_ADDR_EXP 51
16352: PUSH
16353: LD_INT 87
16355: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
16356: LD_ADDR_EXP 52
16360: PUSH
16361: LD_INT 88
16363: ST_TO_ADDR
// class_mastodont := 31 ;
16364: LD_ADDR_EXP 53
16368: PUSH
16369: LD_INT 31
16371: ST_TO_ADDR
// class_horse := 21 ;
16372: LD_ADDR_EXP 54
16376: PUSH
16377: LD_INT 21
16379: ST_TO_ADDR
// end ;
16380: LD_VAR 0 1
16384: RET
// every 1 do
16385: GO 16387
16387: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
16388: CALL 16225 0 0
16392: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16393: LD_INT 0
16395: PPUSH
// if p2 = 100 then
16396: LD_VAR 0 2
16400: PUSH
16401: LD_INT 100
16403: EQUAL
16404: IFFALSE 17353
// begin if not StreamModeActive then
16406: LD_EXP 55
16410: NOT
16411: IFFALSE 16421
// StreamModeActive := true ;
16413: LD_ADDR_EXP 55
16417: PUSH
16418: LD_INT 1
16420: ST_TO_ADDR
// if p3 = 0 then
16421: LD_VAR 0 3
16425: PUSH
16426: LD_INT 0
16428: EQUAL
16429: IFFALSE 16435
// InitStreamMode ;
16431: CALL 17513 0 0
// if p3 = 1 then
16435: LD_VAR 0 3
16439: PUSH
16440: LD_INT 1
16442: EQUAL
16443: IFFALSE 16453
// sRocket := true ;
16445: LD_ADDR_EXP 60
16449: PUSH
16450: LD_INT 1
16452: ST_TO_ADDR
// if p3 = 2 then
16453: LD_VAR 0 3
16457: PUSH
16458: LD_INT 2
16460: EQUAL
16461: IFFALSE 16471
// sSpeed := true ;
16463: LD_ADDR_EXP 59
16467: PUSH
16468: LD_INT 1
16470: ST_TO_ADDR
// if p3 = 3 then
16471: LD_VAR 0 3
16475: PUSH
16476: LD_INT 3
16478: EQUAL
16479: IFFALSE 16489
// sEngine := true ;
16481: LD_ADDR_EXP 61
16485: PUSH
16486: LD_INT 1
16488: ST_TO_ADDR
// if p3 = 4 then
16489: LD_VAR 0 3
16493: PUSH
16494: LD_INT 4
16496: EQUAL
16497: IFFALSE 16507
// sSpec := true ;
16499: LD_ADDR_EXP 58
16503: PUSH
16504: LD_INT 1
16506: ST_TO_ADDR
// if p3 = 5 then
16507: LD_VAR 0 3
16511: PUSH
16512: LD_INT 5
16514: EQUAL
16515: IFFALSE 16525
// sLevel := true ;
16517: LD_ADDR_EXP 62
16521: PUSH
16522: LD_INT 1
16524: ST_TO_ADDR
// if p3 = 6 then
16525: LD_VAR 0 3
16529: PUSH
16530: LD_INT 6
16532: EQUAL
16533: IFFALSE 16543
// sArmoury := true ;
16535: LD_ADDR_EXP 63
16539: PUSH
16540: LD_INT 1
16542: ST_TO_ADDR
// if p3 = 7 then
16543: LD_VAR 0 3
16547: PUSH
16548: LD_INT 7
16550: EQUAL
16551: IFFALSE 16561
// sRadar := true ;
16553: LD_ADDR_EXP 64
16557: PUSH
16558: LD_INT 1
16560: ST_TO_ADDR
// if p3 = 8 then
16561: LD_VAR 0 3
16565: PUSH
16566: LD_INT 8
16568: EQUAL
16569: IFFALSE 16579
// sBunker := true ;
16571: LD_ADDR_EXP 65
16575: PUSH
16576: LD_INT 1
16578: ST_TO_ADDR
// if p3 = 9 then
16579: LD_VAR 0 3
16583: PUSH
16584: LD_INT 9
16586: EQUAL
16587: IFFALSE 16597
// sHack := true ;
16589: LD_ADDR_EXP 66
16593: PUSH
16594: LD_INT 1
16596: ST_TO_ADDR
// if p3 = 10 then
16597: LD_VAR 0 3
16601: PUSH
16602: LD_INT 10
16604: EQUAL
16605: IFFALSE 16615
// sFire := true ;
16607: LD_ADDR_EXP 67
16611: PUSH
16612: LD_INT 1
16614: ST_TO_ADDR
// if p3 = 11 then
16615: LD_VAR 0 3
16619: PUSH
16620: LD_INT 11
16622: EQUAL
16623: IFFALSE 16633
// sRefresh := true ;
16625: LD_ADDR_EXP 68
16629: PUSH
16630: LD_INT 1
16632: ST_TO_ADDR
// if p3 = 12 then
16633: LD_VAR 0 3
16637: PUSH
16638: LD_INT 12
16640: EQUAL
16641: IFFALSE 16651
// sExp := true ;
16643: LD_ADDR_EXP 69
16647: PUSH
16648: LD_INT 1
16650: ST_TO_ADDR
// if p3 = 13 then
16651: LD_VAR 0 3
16655: PUSH
16656: LD_INT 13
16658: EQUAL
16659: IFFALSE 16669
// sDepot := true ;
16661: LD_ADDR_EXP 70
16665: PUSH
16666: LD_INT 1
16668: ST_TO_ADDR
// if p3 = 14 then
16669: LD_VAR 0 3
16673: PUSH
16674: LD_INT 14
16676: EQUAL
16677: IFFALSE 16687
// sFlag := true ;
16679: LD_ADDR_EXP 71
16683: PUSH
16684: LD_INT 1
16686: ST_TO_ADDR
// if p3 = 15 then
16687: LD_VAR 0 3
16691: PUSH
16692: LD_INT 15
16694: EQUAL
16695: IFFALSE 16705
// sKamikadze := true ;
16697: LD_ADDR_EXP 79
16701: PUSH
16702: LD_INT 1
16704: ST_TO_ADDR
// if p3 = 16 then
16705: LD_VAR 0 3
16709: PUSH
16710: LD_INT 16
16712: EQUAL
16713: IFFALSE 16723
// sTroll := true ;
16715: LD_ADDR_EXP 80
16719: PUSH
16720: LD_INT 1
16722: ST_TO_ADDR
// if p3 = 17 then
16723: LD_VAR 0 3
16727: PUSH
16728: LD_INT 17
16730: EQUAL
16731: IFFALSE 16741
// sSlow := true ;
16733: LD_ADDR_EXP 81
16737: PUSH
16738: LD_INT 1
16740: ST_TO_ADDR
// if p3 = 18 then
16741: LD_VAR 0 3
16745: PUSH
16746: LD_INT 18
16748: EQUAL
16749: IFFALSE 16759
// sLack := true ;
16751: LD_ADDR_EXP 82
16755: PUSH
16756: LD_INT 1
16758: ST_TO_ADDR
// if p3 = 19 then
16759: LD_VAR 0 3
16763: PUSH
16764: LD_INT 19
16766: EQUAL
16767: IFFALSE 16777
// sTank := true ;
16769: LD_ADDR_EXP 84
16773: PUSH
16774: LD_INT 1
16776: ST_TO_ADDR
// if p3 = 20 then
16777: LD_VAR 0 3
16781: PUSH
16782: LD_INT 20
16784: EQUAL
16785: IFFALSE 16795
// sRemote := true ;
16787: LD_ADDR_EXP 85
16791: PUSH
16792: LD_INT 1
16794: ST_TO_ADDR
// if p3 = 21 then
16795: LD_VAR 0 3
16799: PUSH
16800: LD_INT 21
16802: EQUAL
16803: IFFALSE 16813
// sPowell := true ;
16805: LD_ADDR_EXP 86
16809: PUSH
16810: LD_INT 1
16812: ST_TO_ADDR
// if p3 = 22 then
16813: LD_VAR 0 3
16817: PUSH
16818: LD_INT 22
16820: EQUAL
16821: IFFALSE 16831
// sTeleport := true ;
16823: LD_ADDR_EXP 89
16827: PUSH
16828: LD_INT 1
16830: ST_TO_ADDR
// if p3 = 23 then
16831: LD_VAR 0 3
16835: PUSH
16836: LD_INT 23
16838: EQUAL
16839: IFFALSE 16849
// sOilTower := true ;
16841: LD_ADDR_EXP 91
16845: PUSH
16846: LD_INT 1
16848: ST_TO_ADDR
// if p3 = 24 then
16849: LD_VAR 0 3
16853: PUSH
16854: LD_INT 24
16856: EQUAL
16857: IFFALSE 16867
// sShovel := true ;
16859: LD_ADDR_EXP 92
16863: PUSH
16864: LD_INT 1
16866: ST_TO_ADDR
// if p3 = 25 then
16867: LD_VAR 0 3
16871: PUSH
16872: LD_INT 25
16874: EQUAL
16875: IFFALSE 16885
// sSheik := true ;
16877: LD_ADDR_EXP 93
16881: PUSH
16882: LD_INT 1
16884: ST_TO_ADDR
// if p3 = 26 then
16885: LD_VAR 0 3
16889: PUSH
16890: LD_INT 26
16892: EQUAL
16893: IFFALSE 16903
// sEarthquake := true ;
16895: LD_ADDR_EXP 95
16899: PUSH
16900: LD_INT 1
16902: ST_TO_ADDR
// if p3 = 27 then
16903: LD_VAR 0 3
16907: PUSH
16908: LD_INT 27
16910: EQUAL
16911: IFFALSE 16921
// sAI := true ;
16913: LD_ADDR_EXP 96
16917: PUSH
16918: LD_INT 1
16920: ST_TO_ADDR
// if p3 = 28 then
16921: LD_VAR 0 3
16925: PUSH
16926: LD_INT 28
16928: EQUAL
16929: IFFALSE 16939
// sCargo := true ;
16931: LD_ADDR_EXP 99
16935: PUSH
16936: LD_INT 1
16938: ST_TO_ADDR
// if p3 = 29 then
16939: LD_VAR 0 3
16943: PUSH
16944: LD_INT 29
16946: EQUAL
16947: IFFALSE 16957
// sDLaser := true ;
16949: LD_ADDR_EXP 100
16953: PUSH
16954: LD_INT 1
16956: ST_TO_ADDR
// if p3 = 30 then
16957: LD_VAR 0 3
16961: PUSH
16962: LD_INT 30
16964: EQUAL
16965: IFFALSE 16975
// sExchange := true ;
16967: LD_ADDR_EXP 101
16971: PUSH
16972: LD_INT 1
16974: ST_TO_ADDR
// if p3 = 31 then
16975: LD_VAR 0 3
16979: PUSH
16980: LD_INT 31
16982: EQUAL
16983: IFFALSE 16993
// sFac := true ;
16985: LD_ADDR_EXP 102
16989: PUSH
16990: LD_INT 1
16992: ST_TO_ADDR
// if p3 = 32 then
16993: LD_VAR 0 3
16997: PUSH
16998: LD_INT 32
17000: EQUAL
17001: IFFALSE 17011
// sPower := true ;
17003: LD_ADDR_EXP 103
17007: PUSH
17008: LD_INT 1
17010: ST_TO_ADDR
// if p3 = 33 then
17011: LD_VAR 0 3
17015: PUSH
17016: LD_INT 33
17018: EQUAL
17019: IFFALSE 17029
// sRandom := true ;
17021: LD_ADDR_EXP 104
17025: PUSH
17026: LD_INT 1
17028: ST_TO_ADDR
// if p3 = 34 then
17029: LD_VAR 0 3
17033: PUSH
17034: LD_INT 34
17036: EQUAL
17037: IFFALSE 17047
// sShield := true ;
17039: LD_ADDR_EXP 105
17043: PUSH
17044: LD_INT 1
17046: ST_TO_ADDR
// if p3 = 35 then
17047: LD_VAR 0 3
17051: PUSH
17052: LD_INT 35
17054: EQUAL
17055: IFFALSE 17065
// sTime := true ;
17057: LD_ADDR_EXP 106
17061: PUSH
17062: LD_INT 1
17064: ST_TO_ADDR
// if p3 = 36 then
17065: LD_VAR 0 3
17069: PUSH
17070: LD_INT 36
17072: EQUAL
17073: IFFALSE 17083
// sTools := true ;
17075: LD_ADDR_EXP 107
17079: PUSH
17080: LD_INT 1
17082: ST_TO_ADDR
// if p3 = 101 then
17083: LD_VAR 0 3
17087: PUSH
17088: LD_INT 101
17090: EQUAL
17091: IFFALSE 17101
// sSold := true ;
17093: LD_ADDR_EXP 72
17097: PUSH
17098: LD_INT 1
17100: ST_TO_ADDR
// if p3 = 102 then
17101: LD_VAR 0 3
17105: PUSH
17106: LD_INT 102
17108: EQUAL
17109: IFFALSE 17119
// sDiff := true ;
17111: LD_ADDR_EXP 73
17115: PUSH
17116: LD_INT 1
17118: ST_TO_ADDR
// if p3 = 103 then
17119: LD_VAR 0 3
17123: PUSH
17124: LD_INT 103
17126: EQUAL
17127: IFFALSE 17137
// sFog := true ;
17129: LD_ADDR_EXP 76
17133: PUSH
17134: LD_INT 1
17136: ST_TO_ADDR
// if p3 = 104 then
17137: LD_VAR 0 3
17141: PUSH
17142: LD_INT 104
17144: EQUAL
17145: IFFALSE 17155
// sReset := true ;
17147: LD_ADDR_EXP 77
17151: PUSH
17152: LD_INT 1
17154: ST_TO_ADDR
// if p3 = 105 then
17155: LD_VAR 0 3
17159: PUSH
17160: LD_INT 105
17162: EQUAL
17163: IFFALSE 17173
// sSun := true ;
17165: LD_ADDR_EXP 78
17169: PUSH
17170: LD_INT 1
17172: ST_TO_ADDR
// if p3 = 106 then
17173: LD_VAR 0 3
17177: PUSH
17178: LD_INT 106
17180: EQUAL
17181: IFFALSE 17191
// sTiger := true ;
17183: LD_ADDR_EXP 74
17187: PUSH
17188: LD_INT 1
17190: ST_TO_ADDR
// if p3 = 107 then
17191: LD_VAR 0 3
17195: PUSH
17196: LD_INT 107
17198: EQUAL
17199: IFFALSE 17209
// sBomb := true ;
17201: LD_ADDR_EXP 75
17205: PUSH
17206: LD_INT 1
17208: ST_TO_ADDR
// if p3 = 108 then
17209: LD_VAR 0 3
17213: PUSH
17214: LD_INT 108
17216: EQUAL
17217: IFFALSE 17227
// sWound := true ;
17219: LD_ADDR_EXP 83
17223: PUSH
17224: LD_INT 1
17226: ST_TO_ADDR
// if p3 = 109 then
17227: LD_VAR 0 3
17231: PUSH
17232: LD_INT 109
17234: EQUAL
17235: IFFALSE 17245
// sBetray := true ;
17237: LD_ADDR_EXP 87
17241: PUSH
17242: LD_INT 1
17244: ST_TO_ADDR
// if p3 = 110 then
17245: LD_VAR 0 3
17249: PUSH
17250: LD_INT 110
17252: EQUAL
17253: IFFALSE 17263
// sContamin := true ;
17255: LD_ADDR_EXP 88
17259: PUSH
17260: LD_INT 1
17262: ST_TO_ADDR
// if p3 = 111 then
17263: LD_VAR 0 3
17267: PUSH
17268: LD_INT 111
17270: EQUAL
17271: IFFALSE 17281
// sOil := true ;
17273: LD_ADDR_EXP 90
17277: PUSH
17278: LD_INT 1
17280: ST_TO_ADDR
// if p3 = 112 then
17281: LD_VAR 0 3
17285: PUSH
17286: LD_INT 112
17288: EQUAL
17289: IFFALSE 17299
// sStu := true ;
17291: LD_ADDR_EXP 94
17295: PUSH
17296: LD_INT 1
17298: ST_TO_ADDR
// if p3 = 113 then
17299: LD_VAR 0 3
17303: PUSH
17304: LD_INT 113
17306: EQUAL
17307: IFFALSE 17317
// sBazooka := true ;
17309: LD_ADDR_EXP 97
17313: PUSH
17314: LD_INT 1
17316: ST_TO_ADDR
// if p3 = 114 then
17317: LD_VAR 0 3
17321: PUSH
17322: LD_INT 114
17324: EQUAL
17325: IFFALSE 17335
// sMortar := true ;
17327: LD_ADDR_EXP 98
17331: PUSH
17332: LD_INT 1
17334: ST_TO_ADDR
// if p3 = 115 then
17335: LD_VAR 0 3
17339: PUSH
17340: LD_INT 115
17342: EQUAL
17343: IFFALSE 17353
// sRanger := true ;
17345: LD_ADDR_EXP 108
17349: PUSH
17350: LD_INT 1
17352: ST_TO_ADDR
// end ; if p2 = 101 then
17353: LD_VAR 0 2
17357: PUSH
17358: LD_INT 101
17360: EQUAL
17361: IFFALSE 17489
// begin case p3 of 1 :
17363: LD_VAR 0 3
17367: PUSH
17368: LD_INT 1
17370: DOUBLE
17371: EQUAL
17372: IFTRUE 17376
17374: GO 17383
17376: POP
// hHackUnlimitedResources ; 2 :
17377: CALL 28526 0 0
17381: GO 17489
17383: LD_INT 2
17385: DOUBLE
17386: EQUAL
17387: IFTRUE 17391
17389: GO 17398
17391: POP
// hHackSetLevel10 ; 3 :
17392: CALL 28659 0 0
17396: GO 17489
17398: LD_INT 3
17400: DOUBLE
17401: EQUAL
17402: IFTRUE 17406
17404: GO 17413
17406: POP
// hHackSetLevel10YourUnits ; 4 :
17407: CALL 28744 0 0
17411: GO 17489
17413: LD_INT 4
17415: DOUBLE
17416: EQUAL
17417: IFTRUE 17421
17419: GO 17428
17421: POP
// hHackInvincible ; 5 :
17422: CALL 29192 0 0
17426: GO 17489
17428: LD_INT 5
17430: DOUBLE
17431: EQUAL
17432: IFTRUE 17436
17434: GO 17443
17436: POP
// hHackInvisible ; 6 :
17437: CALL 29303 0 0
17441: GO 17489
17443: LD_INT 6
17445: DOUBLE
17446: EQUAL
17447: IFTRUE 17451
17449: GO 17458
17451: POP
// hHackChangeYourSide ; 7 :
17452: CALL 29360 0 0
17456: GO 17489
17458: LD_INT 7
17460: DOUBLE
17461: EQUAL
17462: IFTRUE 17466
17464: GO 17473
17466: POP
// hHackChangeUnitSide ; 8 :
17467: CALL 29402 0 0
17471: GO 17489
17473: LD_INT 8
17475: DOUBLE
17476: EQUAL
17477: IFTRUE 17481
17479: GO 17488
17481: POP
// hHackFog ; end ;
17482: CALL 29503 0 0
17486: GO 17489
17488: POP
// end ; end ;
17489: LD_VAR 0 7
17493: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
17494: GO 17496
17496: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
17497: LD_STRING initStreamRollete();
17499: PPUSH
17500: CALL_OW 559
// InitStreamMode ;
17504: CALL 17513 0 0
// DefineStreamItems ( ) ;
17508: CALL 17953 0 0
// end ;
17512: END
// function InitStreamMode ; begin
17513: LD_INT 0
17515: PPUSH
// streamModeActive := false ;
17516: LD_ADDR_EXP 55
17520: PUSH
17521: LD_INT 0
17523: ST_TO_ADDR
// normalCounter := 36 ;
17524: LD_ADDR_EXP 56
17528: PUSH
17529: LD_INT 36
17531: ST_TO_ADDR
// hardcoreCounter := 16 ;
17532: LD_ADDR_EXP 57
17536: PUSH
17537: LD_INT 16
17539: ST_TO_ADDR
// sRocket := false ;
17540: LD_ADDR_EXP 60
17544: PUSH
17545: LD_INT 0
17547: ST_TO_ADDR
// sSpeed := false ;
17548: LD_ADDR_EXP 59
17552: PUSH
17553: LD_INT 0
17555: ST_TO_ADDR
// sEngine := false ;
17556: LD_ADDR_EXP 61
17560: PUSH
17561: LD_INT 0
17563: ST_TO_ADDR
// sSpec := false ;
17564: LD_ADDR_EXP 58
17568: PUSH
17569: LD_INT 0
17571: ST_TO_ADDR
// sLevel := false ;
17572: LD_ADDR_EXP 62
17576: PUSH
17577: LD_INT 0
17579: ST_TO_ADDR
// sArmoury := false ;
17580: LD_ADDR_EXP 63
17584: PUSH
17585: LD_INT 0
17587: ST_TO_ADDR
// sRadar := false ;
17588: LD_ADDR_EXP 64
17592: PUSH
17593: LD_INT 0
17595: ST_TO_ADDR
// sBunker := false ;
17596: LD_ADDR_EXP 65
17600: PUSH
17601: LD_INT 0
17603: ST_TO_ADDR
// sHack := false ;
17604: LD_ADDR_EXP 66
17608: PUSH
17609: LD_INT 0
17611: ST_TO_ADDR
// sFire := false ;
17612: LD_ADDR_EXP 67
17616: PUSH
17617: LD_INT 0
17619: ST_TO_ADDR
// sRefresh := false ;
17620: LD_ADDR_EXP 68
17624: PUSH
17625: LD_INT 0
17627: ST_TO_ADDR
// sExp := false ;
17628: LD_ADDR_EXP 69
17632: PUSH
17633: LD_INT 0
17635: ST_TO_ADDR
// sDepot := false ;
17636: LD_ADDR_EXP 70
17640: PUSH
17641: LD_INT 0
17643: ST_TO_ADDR
// sFlag := false ;
17644: LD_ADDR_EXP 71
17648: PUSH
17649: LD_INT 0
17651: ST_TO_ADDR
// sKamikadze := false ;
17652: LD_ADDR_EXP 79
17656: PUSH
17657: LD_INT 0
17659: ST_TO_ADDR
// sTroll := false ;
17660: LD_ADDR_EXP 80
17664: PUSH
17665: LD_INT 0
17667: ST_TO_ADDR
// sSlow := false ;
17668: LD_ADDR_EXP 81
17672: PUSH
17673: LD_INT 0
17675: ST_TO_ADDR
// sLack := false ;
17676: LD_ADDR_EXP 82
17680: PUSH
17681: LD_INT 0
17683: ST_TO_ADDR
// sTank := false ;
17684: LD_ADDR_EXP 84
17688: PUSH
17689: LD_INT 0
17691: ST_TO_ADDR
// sRemote := false ;
17692: LD_ADDR_EXP 85
17696: PUSH
17697: LD_INT 0
17699: ST_TO_ADDR
// sPowell := false ;
17700: LD_ADDR_EXP 86
17704: PUSH
17705: LD_INT 0
17707: ST_TO_ADDR
// sTeleport := false ;
17708: LD_ADDR_EXP 89
17712: PUSH
17713: LD_INT 0
17715: ST_TO_ADDR
// sOilTower := false ;
17716: LD_ADDR_EXP 91
17720: PUSH
17721: LD_INT 0
17723: ST_TO_ADDR
// sShovel := false ;
17724: LD_ADDR_EXP 92
17728: PUSH
17729: LD_INT 0
17731: ST_TO_ADDR
// sSheik := false ;
17732: LD_ADDR_EXP 93
17736: PUSH
17737: LD_INT 0
17739: ST_TO_ADDR
// sEarthquake := false ;
17740: LD_ADDR_EXP 95
17744: PUSH
17745: LD_INT 0
17747: ST_TO_ADDR
// sAI := false ;
17748: LD_ADDR_EXP 96
17752: PUSH
17753: LD_INT 0
17755: ST_TO_ADDR
// sCargo := false ;
17756: LD_ADDR_EXP 99
17760: PUSH
17761: LD_INT 0
17763: ST_TO_ADDR
// sDLaser := false ;
17764: LD_ADDR_EXP 100
17768: PUSH
17769: LD_INT 0
17771: ST_TO_ADDR
// sExchange := false ;
17772: LD_ADDR_EXP 101
17776: PUSH
17777: LD_INT 0
17779: ST_TO_ADDR
// sFac := false ;
17780: LD_ADDR_EXP 102
17784: PUSH
17785: LD_INT 0
17787: ST_TO_ADDR
// sPower := false ;
17788: LD_ADDR_EXP 103
17792: PUSH
17793: LD_INT 0
17795: ST_TO_ADDR
// sRandom := false ;
17796: LD_ADDR_EXP 104
17800: PUSH
17801: LD_INT 0
17803: ST_TO_ADDR
// sShield := false ;
17804: LD_ADDR_EXP 105
17808: PUSH
17809: LD_INT 0
17811: ST_TO_ADDR
// sTime := false ;
17812: LD_ADDR_EXP 106
17816: PUSH
17817: LD_INT 0
17819: ST_TO_ADDR
// sTools := false ;
17820: LD_ADDR_EXP 107
17824: PUSH
17825: LD_INT 0
17827: ST_TO_ADDR
// sSold := false ;
17828: LD_ADDR_EXP 72
17832: PUSH
17833: LD_INT 0
17835: ST_TO_ADDR
// sDiff := false ;
17836: LD_ADDR_EXP 73
17840: PUSH
17841: LD_INT 0
17843: ST_TO_ADDR
// sFog := false ;
17844: LD_ADDR_EXP 76
17848: PUSH
17849: LD_INT 0
17851: ST_TO_ADDR
// sReset := false ;
17852: LD_ADDR_EXP 77
17856: PUSH
17857: LD_INT 0
17859: ST_TO_ADDR
// sSun := false ;
17860: LD_ADDR_EXP 78
17864: PUSH
17865: LD_INT 0
17867: ST_TO_ADDR
// sTiger := false ;
17868: LD_ADDR_EXP 74
17872: PUSH
17873: LD_INT 0
17875: ST_TO_ADDR
// sBomb := false ;
17876: LD_ADDR_EXP 75
17880: PUSH
17881: LD_INT 0
17883: ST_TO_ADDR
// sWound := false ;
17884: LD_ADDR_EXP 83
17888: PUSH
17889: LD_INT 0
17891: ST_TO_ADDR
// sBetray := false ;
17892: LD_ADDR_EXP 87
17896: PUSH
17897: LD_INT 0
17899: ST_TO_ADDR
// sContamin := false ;
17900: LD_ADDR_EXP 88
17904: PUSH
17905: LD_INT 0
17907: ST_TO_ADDR
// sOil := false ;
17908: LD_ADDR_EXP 90
17912: PUSH
17913: LD_INT 0
17915: ST_TO_ADDR
// sStu := false ;
17916: LD_ADDR_EXP 94
17920: PUSH
17921: LD_INT 0
17923: ST_TO_ADDR
// sBazooka := false ;
17924: LD_ADDR_EXP 97
17928: PUSH
17929: LD_INT 0
17931: ST_TO_ADDR
// sMortar := false ;
17932: LD_ADDR_EXP 98
17936: PUSH
17937: LD_INT 0
17939: ST_TO_ADDR
// sRanger := false ;
17940: LD_ADDR_EXP 108
17944: PUSH
17945: LD_INT 0
17947: ST_TO_ADDR
// end ;
17948: LD_VAR 0 1
17952: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
17953: LD_INT 0
17955: PPUSH
17956: PPUSH
17957: PPUSH
17958: PPUSH
17959: PPUSH
// result := [ ] ;
17960: LD_ADDR_VAR 0 1
17964: PUSH
17965: EMPTY
17966: ST_TO_ADDR
// if campaign_id = 1 then
17967: LD_OWVAR 69
17971: PUSH
17972: LD_INT 1
17974: EQUAL
17975: IFFALSE 20913
// begin case mission_number of 1 :
17977: LD_OWVAR 70
17981: PUSH
17982: LD_INT 1
17984: DOUBLE
17985: EQUAL
17986: IFTRUE 17990
17988: GO 18054
17990: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
17991: LD_ADDR_VAR 0 1
17995: PUSH
17996: LD_INT 2
17998: PUSH
17999: LD_INT 4
18001: PUSH
18002: LD_INT 11
18004: PUSH
18005: LD_INT 12
18007: PUSH
18008: LD_INT 15
18010: PUSH
18011: LD_INT 16
18013: PUSH
18014: LD_INT 22
18016: PUSH
18017: LD_INT 23
18019: PUSH
18020: LD_INT 26
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: PUSH
18034: LD_INT 101
18036: PUSH
18037: LD_INT 102
18039: PUSH
18040: LD_INT 106
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: LIST
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: ST_TO_ADDR
18052: GO 20911
18054: LD_INT 2
18056: DOUBLE
18057: EQUAL
18058: IFTRUE 18062
18060: GO 18134
18062: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
18063: LD_ADDR_VAR 0 1
18067: PUSH
18068: LD_INT 2
18070: PUSH
18071: LD_INT 4
18073: PUSH
18074: LD_INT 11
18076: PUSH
18077: LD_INT 12
18079: PUSH
18080: LD_INT 15
18082: PUSH
18083: LD_INT 16
18085: PUSH
18086: LD_INT 22
18088: PUSH
18089: LD_INT 23
18091: PUSH
18092: LD_INT 26
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 101
18108: PUSH
18109: LD_INT 102
18111: PUSH
18112: LD_INT 105
18114: PUSH
18115: LD_INT 106
18117: PUSH
18118: LD_INT 108
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: ST_TO_ADDR
18132: GO 20911
18134: LD_INT 3
18136: DOUBLE
18137: EQUAL
18138: IFTRUE 18142
18140: GO 18218
18142: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
18143: LD_ADDR_VAR 0 1
18147: PUSH
18148: LD_INT 2
18150: PUSH
18151: LD_INT 4
18153: PUSH
18154: LD_INT 5
18156: PUSH
18157: LD_INT 11
18159: PUSH
18160: LD_INT 12
18162: PUSH
18163: LD_INT 15
18165: PUSH
18166: LD_INT 16
18168: PUSH
18169: LD_INT 22
18171: PUSH
18172: LD_INT 26
18174: PUSH
18175: LD_INT 36
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: PUSH
18190: LD_INT 101
18192: PUSH
18193: LD_INT 102
18195: PUSH
18196: LD_INT 105
18198: PUSH
18199: LD_INT 106
18201: PUSH
18202: LD_INT 108
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: ST_TO_ADDR
18216: GO 20911
18218: LD_INT 4
18220: DOUBLE
18221: EQUAL
18222: IFTRUE 18226
18224: GO 18310
18226: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
18227: LD_ADDR_VAR 0 1
18231: PUSH
18232: LD_INT 2
18234: PUSH
18235: LD_INT 4
18237: PUSH
18238: LD_INT 5
18240: PUSH
18241: LD_INT 8
18243: PUSH
18244: LD_INT 11
18246: PUSH
18247: LD_INT 12
18249: PUSH
18250: LD_INT 15
18252: PUSH
18253: LD_INT 16
18255: PUSH
18256: LD_INT 22
18258: PUSH
18259: LD_INT 23
18261: PUSH
18262: LD_INT 26
18264: PUSH
18265: LD_INT 36
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 101
18284: PUSH
18285: LD_INT 102
18287: PUSH
18288: LD_INT 105
18290: PUSH
18291: LD_INT 106
18293: PUSH
18294: LD_INT 108
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: ST_TO_ADDR
18308: GO 20911
18310: LD_INT 5
18312: DOUBLE
18313: EQUAL
18314: IFTRUE 18318
18316: GO 18418
18318: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
18319: LD_ADDR_VAR 0 1
18323: PUSH
18324: LD_INT 2
18326: PUSH
18327: LD_INT 4
18329: PUSH
18330: LD_INT 5
18332: PUSH
18333: LD_INT 6
18335: PUSH
18336: LD_INT 8
18338: PUSH
18339: LD_INT 11
18341: PUSH
18342: LD_INT 12
18344: PUSH
18345: LD_INT 15
18347: PUSH
18348: LD_INT 16
18350: PUSH
18351: LD_INT 22
18353: PUSH
18354: LD_INT 23
18356: PUSH
18357: LD_INT 25
18359: PUSH
18360: LD_INT 26
18362: PUSH
18363: LD_INT 36
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 101
18384: PUSH
18385: LD_INT 102
18387: PUSH
18388: LD_INT 105
18390: PUSH
18391: LD_INT 106
18393: PUSH
18394: LD_INT 108
18396: PUSH
18397: LD_INT 109
18399: PUSH
18400: LD_INT 112
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: ST_TO_ADDR
18416: GO 20911
18418: LD_INT 6
18420: DOUBLE
18421: EQUAL
18422: IFTRUE 18426
18424: GO 18546
18426: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
18427: LD_ADDR_VAR 0 1
18431: PUSH
18432: LD_INT 2
18434: PUSH
18435: LD_INT 4
18437: PUSH
18438: LD_INT 5
18440: PUSH
18441: LD_INT 6
18443: PUSH
18444: LD_INT 8
18446: PUSH
18447: LD_INT 11
18449: PUSH
18450: LD_INT 12
18452: PUSH
18453: LD_INT 15
18455: PUSH
18456: LD_INT 16
18458: PUSH
18459: LD_INT 20
18461: PUSH
18462: LD_INT 21
18464: PUSH
18465: LD_INT 22
18467: PUSH
18468: LD_INT 23
18470: PUSH
18471: LD_INT 25
18473: PUSH
18474: LD_INT 26
18476: PUSH
18477: LD_INT 30
18479: PUSH
18480: LD_INT 31
18482: PUSH
18483: LD_INT 32
18485: PUSH
18486: LD_INT 36
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: PUSH
18510: LD_INT 101
18512: PUSH
18513: LD_INT 102
18515: PUSH
18516: LD_INT 105
18518: PUSH
18519: LD_INT 106
18521: PUSH
18522: LD_INT 108
18524: PUSH
18525: LD_INT 109
18527: PUSH
18528: LD_INT 112
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: ST_TO_ADDR
18544: GO 20911
18546: LD_INT 7
18548: DOUBLE
18549: EQUAL
18550: IFTRUE 18554
18552: GO 18654
18554: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
18555: LD_ADDR_VAR 0 1
18559: PUSH
18560: LD_INT 2
18562: PUSH
18563: LD_INT 4
18565: PUSH
18566: LD_INT 5
18568: PUSH
18569: LD_INT 7
18571: PUSH
18572: LD_INT 11
18574: PUSH
18575: LD_INT 12
18577: PUSH
18578: LD_INT 15
18580: PUSH
18581: LD_INT 16
18583: PUSH
18584: LD_INT 20
18586: PUSH
18587: LD_INT 21
18589: PUSH
18590: LD_INT 22
18592: PUSH
18593: LD_INT 23
18595: PUSH
18596: LD_INT 25
18598: PUSH
18599: LD_INT 26
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: PUSH
18618: LD_INT 101
18620: PUSH
18621: LD_INT 102
18623: PUSH
18624: LD_INT 103
18626: PUSH
18627: LD_INT 105
18629: PUSH
18630: LD_INT 106
18632: PUSH
18633: LD_INT 108
18635: PUSH
18636: LD_INT 112
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: ST_TO_ADDR
18652: GO 20911
18654: LD_INT 8
18656: DOUBLE
18657: EQUAL
18658: IFTRUE 18662
18660: GO 18790
18662: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
18663: LD_ADDR_VAR 0 1
18667: PUSH
18668: LD_INT 2
18670: PUSH
18671: LD_INT 4
18673: PUSH
18674: LD_INT 5
18676: PUSH
18677: LD_INT 6
18679: PUSH
18680: LD_INT 7
18682: PUSH
18683: LD_INT 8
18685: PUSH
18686: LD_INT 11
18688: PUSH
18689: LD_INT 12
18691: PUSH
18692: LD_INT 15
18694: PUSH
18695: LD_INT 16
18697: PUSH
18698: LD_INT 20
18700: PUSH
18701: LD_INT 21
18703: PUSH
18704: LD_INT 22
18706: PUSH
18707: LD_INT 23
18709: PUSH
18710: LD_INT 25
18712: PUSH
18713: LD_INT 26
18715: PUSH
18716: LD_INT 30
18718: PUSH
18719: LD_INT 31
18721: PUSH
18722: LD_INT 32
18724: PUSH
18725: LD_INT 36
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 101
18752: PUSH
18753: LD_INT 102
18755: PUSH
18756: LD_INT 103
18758: PUSH
18759: LD_INT 105
18761: PUSH
18762: LD_INT 106
18764: PUSH
18765: LD_INT 108
18767: PUSH
18768: LD_INT 109
18770: PUSH
18771: LD_INT 112
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: ST_TO_ADDR
18788: GO 20911
18790: LD_INT 9
18792: DOUBLE
18793: EQUAL
18794: IFTRUE 18798
18796: GO 18934
18798: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
18799: LD_ADDR_VAR 0 1
18803: PUSH
18804: LD_INT 2
18806: PUSH
18807: LD_INT 4
18809: PUSH
18810: LD_INT 5
18812: PUSH
18813: LD_INT 6
18815: PUSH
18816: LD_INT 7
18818: PUSH
18819: LD_INT 8
18821: PUSH
18822: LD_INT 11
18824: PUSH
18825: LD_INT 12
18827: PUSH
18828: LD_INT 15
18830: PUSH
18831: LD_INT 16
18833: PUSH
18834: LD_INT 20
18836: PUSH
18837: LD_INT 21
18839: PUSH
18840: LD_INT 22
18842: PUSH
18843: LD_INT 23
18845: PUSH
18846: LD_INT 25
18848: PUSH
18849: LD_INT 26
18851: PUSH
18852: LD_INT 28
18854: PUSH
18855: LD_INT 30
18857: PUSH
18858: LD_INT 31
18860: PUSH
18861: LD_INT 32
18863: PUSH
18864: LD_INT 36
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: PUSH
18890: LD_INT 101
18892: PUSH
18893: LD_INT 102
18895: PUSH
18896: LD_INT 103
18898: PUSH
18899: LD_INT 105
18901: PUSH
18902: LD_INT 106
18904: PUSH
18905: LD_INT 108
18907: PUSH
18908: LD_INT 109
18910: PUSH
18911: LD_INT 112
18913: PUSH
18914: LD_INT 114
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: ST_TO_ADDR
18932: GO 20911
18934: LD_INT 10
18936: DOUBLE
18937: EQUAL
18938: IFTRUE 18942
18940: GO 19126
18942: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
18943: LD_ADDR_VAR 0 1
18947: PUSH
18948: LD_INT 2
18950: PUSH
18951: LD_INT 4
18953: PUSH
18954: LD_INT 5
18956: PUSH
18957: LD_INT 6
18959: PUSH
18960: LD_INT 7
18962: PUSH
18963: LD_INT 8
18965: PUSH
18966: LD_INT 9
18968: PUSH
18969: LD_INT 10
18971: PUSH
18972: LD_INT 11
18974: PUSH
18975: LD_INT 12
18977: PUSH
18978: LD_INT 13
18980: PUSH
18981: LD_INT 14
18983: PUSH
18984: LD_INT 15
18986: PUSH
18987: LD_INT 16
18989: PUSH
18990: LD_INT 17
18992: PUSH
18993: LD_INT 18
18995: PUSH
18996: LD_INT 19
18998: PUSH
18999: LD_INT 20
19001: PUSH
19002: LD_INT 21
19004: PUSH
19005: LD_INT 22
19007: PUSH
19008: LD_INT 23
19010: PUSH
19011: LD_INT 24
19013: PUSH
19014: LD_INT 25
19016: PUSH
19017: LD_INT 26
19019: PUSH
19020: LD_INT 28
19022: PUSH
19023: LD_INT 30
19025: PUSH
19026: LD_INT 31
19028: PUSH
19029: LD_INT 32
19031: PUSH
19032: LD_INT 36
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 101
19068: PUSH
19069: LD_INT 102
19071: PUSH
19072: LD_INT 103
19074: PUSH
19075: LD_INT 104
19077: PUSH
19078: LD_INT 105
19080: PUSH
19081: LD_INT 106
19083: PUSH
19084: LD_INT 107
19086: PUSH
19087: LD_INT 108
19089: PUSH
19090: LD_INT 109
19092: PUSH
19093: LD_INT 110
19095: PUSH
19096: LD_INT 111
19098: PUSH
19099: LD_INT 112
19101: PUSH
19102: LD_INT 114
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: ST_TO_ADDR
19124: GO 20911
19126: LD_INT 11
19128: DOUBLE
19129: EQUAL
19130: IFTRUE 19134
19132: GO 19326
19134: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
19135: LD_ADDR_VAR 0 1
19139: PUSH
19140: LD_INT 2
19142: PUSH
19143: LD_INT 3
19145: PUSH
19146: LD_INT 4
19148: PUSH
19149: LD_INT 5
19151: PUSH
19152: LD_INT 6
19154: PUSH
19155: LD_INT 7
19157: PUSH
19158: LD_INT 8
19160: PUSH
19161: LD_INT 9
19163: PUSH
19164: LD_INT 10
19166: PUSH
19167: LD_INT 11
19169: PUSH
19170: LD_INT 12
19172: PUSH
19173: LD_INT 13
19175: PUSH
19176: LD_INT 14
19178: PUSH
19179: LD_INT 15
19181: PUSH
19182: LD_INT 16
19184: PUSH
19185: LD_INT 17
19187: PUSH
19188: LD_INT 18
19190: PUSH
19191: LD_INT 19
19193: PUSH
19194: LD_INT 20
19196: PUSH
19197: LD_INT 21
19199: PUSH
19200: LD_INT 22
19202: PUSH
19203: LD_INT 23
19205: PUSH
19206: LD_INT 24
19208: PUSH
19209: LD_INT 25
19211: PUSH
19212: LD_INT 26
19214: PUSH
19215: LD_INT 28
19217: PUSH
19218: LD_INT 30
19220: PUSH
19221: LD_INT 31
19223: PUSH
19224: LD_INT 32
19226: PUSH
19227: LD_INT 34
19229: PUSH
19230: LD_INT 36
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 101
19268: PUSH
19269: LD_INT 102
19271: PUSH
19272: LD_INT 103
19274: PUSH
19275: LD_INT 104
19277: PUSH
19278: LD_INT 105
19280: PUSH
19281: LD_INT 106
19283: PUSH
19284: LD_INT 107
19286: PUSH
19287: LD_INT 108
19289: PUSH
19290: LD_INT 109
19292: PUSH
19293: LD_INT 110
19295: PUSH
19296: LD_INT 111
19298: PUSH
19299: LD_INT 112
19301: PUSH
19302: LD_INT 114
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: ST_TO_ADDR
19324: GO 20911
19326: LD_INT 12
19328: DOUBLE
19329: EQUAL
19330: IFTRUE 19334
19332: GO 19542
19334: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
19335: LD_ADDR_VAR 0 1
19339: PUSH
19340: LD_INT 1
19342: PUSH
19343: LD_INT 2
19345: PUSH
19346: LD_INT 3
19348: PUSH
19349: LD_INT 4
19351: PUSH
19352: LD_INT 5
19354: PUSH
19355: LD_INT 6
19357: PUSH
19358: LD_INT 7
19360: PUSH
19361: LD_INT 8
19363: PUSH
19364: LD_INT 9
19366: PUSH
19367: LD_INT 10
19369: PUSH
19370: LD_INT 11
19372: PUSH
19373: LD_INT 12
19375: PUSH
19376: LD_INT 13
19378: PUSH
19379: LD_INT 14
19381: PUSH
19382: LD_INT 15
19384: PUSH
19385: LD_INT 16
19387: PUSH
19388: LD_INT 17
19390: PUSH
19391: LD_INT 18
19393: PUSH
19394: LD_INT 19
19396: PUSH
19397: LD_INT 20
19399: PUSH
19400: LD_INT 21
19402: PUSH
19403: LD_INT 22
19405: PUSH
19406: LD_INT 23
19408: PUSH
19409: LD_INT 24
19411: PUSH
19412: LD_INT 25
19414: PUSH
19415: LD_INT 26
19417: PUSH
19418: LD_INT 27
19420: PUSH
19421: LD_INT 28
19423: PUSH
19424: LD_INT 30
19426: PUSH
19427: LD_INT 31
19429: PUSH
19430: LD_INT 32
19432: PUSH
19433: LD_INT 33
19435: PUSH
19436: LD_INT 34
19438: PUSH
19439: LD_INT 36
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 101
19480: PUSH
19481: LD_INT 102
19483: PUSH
19484: LD_INT 103
19486: PUSH
19487: LD_INT 104
19489: PUSH
19490: LD_INT 105
19492: PUSH
19493: LD_INT 106
19495: PUSH
19496: LD_INT 107
19498: PUSH
19499: LD_INT 108
19501: PUSH
19502: LD_INT 109
19504: PUSH
19505: LD_INT 110
19507: PUSH
19508: LD_INT 111
19510: PUSH
19511: LD_INT 112
19513: PUSH
19514: LD_INT 113
19516: PUSH
19517: LD_INT 114
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: ST_TO_ADDR
19540: GO 20911
19542: LD_INT 13
19544: DOUBLE
19545: EQUAL
19546: IFTRUE 19550
19548: GO 19746
19550: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
19551: LD_ADDR_VAR 0 1
19555: PUSH
19556: LD_INT 1
19558: PUSH
19559: LD_INT 2
19561: PUSH
19562: LD_INT 3
19564: PUSH
19565: LD_INT 4
19567: PUSH
19568: LD_INT 5
19570: PUSH
19571: LD_INT 8
19573: PUSH
19574: LD_INT 9
19576: PUSH
19577: LD_INT 10
19579: PUSH
19580: LD_INT 11
19582: PUSH
19583: LD_INT 12
19585: PUSH
19586: LD_INT 14
19588: PUSH
19589: LD_INT 15
19591: PUSH
19592: LD_INT 16
19594: PUSH
19595: LD_INT 17
19597: PUSH
19598: LD_INT 18
19600: PUSH
19601: LD_INT 19
19603: PUSH
19604: LD_INT 20
19606: PUSH
19607: LD_INT 21
19609: PUSH
19610: LD_INT 22
19612: PUSH
19613: LD_INT 23
19615: PUSH
19616: LD_INT 24
19618: PUSH
19619: LD_INT 25
19621: PUSH
19622: LD_INT 26
19624: PUSH
19625: LD_INT 27
19627: PUSH
19628: LD_INT 28
19630: PUSH
19631: LD_INT 30
19633: PUSH
19634: LD_INT 31
19636: PUSH
19637: LD_INT 32
19639: PUSH
19640: LD_INT 33
19642: PUSH
19643: LD_INT 34
19645: PUSH
19646: LD_INT 36
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 101
19684: PUSH
19685: LD_INT 102
19687: PUSH
19688: LD_INT 103
19690: PUSH
19691: LD_INT 104
19693: PUSH
19694: LD_INT 105
19696: PUSH
19697: LD_INT 106
19699: PUSH
19700: LD_INT 107
19702: PUSH
19703: LD_INT 108
19705: PUSH
19706: LD_INT 109
19708: PUSH
19709: LD_INT 110
19711: PUSH
19712: LD_INT 111
19714: PUSH
19715: LD_INT 112
19717: PUSH
19718: LD_INT 113
19720: PUSH
19721: LD_INT 114
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: ST_TO_ADDR
19744: GO 20911
19746: LD_INT 14
19748: DOUBLE
19749: EQUAL
19750: IFTRUE 19754
19752: GO 19966
19754: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
19755: LD_ADDR_VAR 0 1
19759: PUSH
19760: LD_INT 1
19762: PUSH
19763: LD_INT 2
19765: PUSH
19766: LD_INT 3
19768: PUSH
19769: LD_INT 4
19771: PUSH
19772: LD_INT 5
19774: PUSH
19775: LD_INT 6
19777: PUSH
19778: LD_INT 7
19780: PUSH
19781: LD_INT 8
19783: PUSH
19784: LD_INT 9
19786: PUSH
19787: LD_INT 10
19789: PUSH
19790: LD_INT 11
19792: PUSH
19793: LD_INT 12
19795: PUSH
19796: LD_INT 13
19798: PUSH
19799: LD_INT 14
19801: PUSH
19802: LD_INT 15
19804: PUSH
19805: LD_INT 16
19807: PUSH
19808: LD_INT 17
19810: PUSH
19811: LD_INT 18
19813: PUSH
19814: LD_INT 19
19816: PUSH
19817: LD_INT 20
19819: PUSH
19820: LD_INT 21
19822: PUSH
19823: LD_INT 22
19825: PUSH
19826: LD_INT 23
19828: PUSH
19829: LD_INT 24
19831: PUSH
19832: LD_INT 25
19834: PUSH
19835: LD_INT 26
19837: PUSH
19838: LD_INT 27
19840: PUSH
19841: LD_INT 28
19843: PUSH
19844: LD_INT 29
19846: PUSH
19847: LD_INT 30
19849: PUSH
19850: LD_INT 31
19852: PUSH
19853: LD_INT 32
19855: PUSH
19856: LD_INT 33
19858: PUSH
19859: LD_INT 34
19861: PUSH
19862: LD_INT 36
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: PUSH
19902: LD_INT 101
19904: PUSH
19905: LD_INT 102
19907: PUSH
19908: LD_INT 103
19910: PUSH
19911: LD_INT 104
19913: PUSH
19914: LD_INT 105
19916: PUSH
19917: LD_INT 106
19919: PUSH
19920: LD_INT 107
19922: PUSH
19923: LD_INT 108
19925: PUSH
19926: LD_INT 109
19928: PUSH
19929: LD_INT 110
19931: PUSH
19932: LD_INT 111
19934: PUSH
19935: LD_INT 112
19937: PUSH
19938: LD_INT 113
19940: PUSH
19941: LD_INT 114
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: ST_TO_ADDR
19964: GO 20911
19966: LD_INT 15
19968: DOUBLE
19969: EQUAL
19970: IFTRUE 19974
19972: GO 20186
19974: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
19975: LD_ADDR_VAR 0 1
19979: PUSH
19980: LD_INT 1
19982: PUSH
19983: LD_INT 2
19985: PUSH
19986: LD_INT 3
19988: PUSH
19989: LD_INT 4
19991: PUSH
19992: LD_INT 5
19994: PUSH
19995: LD_INT 6
19997: PUSH
19998: LD_INT 7
20000: PUSH
20001: LD_INT 8
20003: PUSH
20004: LD_INT 9
20006: PUSH
20007: LD_INT 10
20009: PUSH
20010: LD_INT 11
20012: PUSH
20013: LD_INT 12
20015: PUSH
20016: LD_INT 13
20018: PUSH
20019: LD_INT 14
20021: PUSH
20022: LD_INT 15
20024: PUSH
20025: LD_INT 16
20027: PUSH
20028: LD_INT 17
20030: PUSH
20031: LD_INT 18
20033: PUSH
20034: LD_INT 19
20036: PUSH
20037: LD_INT 20
20039: PUSH
20040: LD_INT 21
20042: PUSH
20043: LD_INT 22
20045: PUSH
20046: LD_INT 23
20048: PUSH
20049: LD_INT 24
20051: PUSH
20052: LD_INT 25
20054: PUSH
20055: LD_INT 26
20057: PUSH
20058: LD_INT 27
20060: PUSH
20061: LD_INT 28
20063: PUSH
20064: LD_INT 29
20066: PUSH
20067: LD_INT 30
20069: PUSH
20070: LD_INT 31
20072: PUSH
20073: LD_INT 32
20075: PUSH
20076: LD_INT 33
20078: PUSH
20079: LD_INT 34
20081: PUSH
20082: LD_INT 36
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: PUSH
20122: LD_INT 101
20124: PUSH
20125: LD_INT 102
20127: PUSH
20128: LD_INT 103
20130: PUSH
20131: LD_INT 104
20133: PUSH
20134: LD_INT 105
20136: PUSH
20137: LD_INT 106
20139: PUSH
20140: LD_INT 107
20142: PUSH
20143: LD_INT 108
20145: PUSH
20146: LD_INT 109
20148: PUSH
20149: LD_INT 110
20151: PUSH
20152: LD_INT 111
20154: PUSH
20155: LD_INT 112
20157: PUSH
20158: LD_INT 113
20160: PUSH
20161: LD_INT 114
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: ST_TO_ADDR
20184: GO 20911
20186: LD_INT 16
20188: DOUBLE
20189: EQUAL
20190: IFTRUE 20194
20192: GO 20318
20194: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
20195: LD_ADDR_VAR 0 1
20199: PUSH
20200: LD_INT 2
20202: PUSH
20203: LD_INT 4
20205: PUSH
20206: LD_INT 5
20208: PUSH
20209: LD_INT 7
20211: PUSH
20212: LD_INT 11
20214: PUSH
20215: LD_INT 12
20217: PUSH
20218: LD_INT 15
20220: PUSH
20221: LD_INT 16
20223: PUSH
20224: LD_INT 20
20226: PUSH
20227: LD_INT 21
20229: PUSH
20230: LD_INT 22
20232: PUSH
20233: LD_INT 23
20235: PUSH
20236: LD_INT 25
20238: PUSH
20239: LD_INT 26
20241: PUSH
20242: LD_INT 30
20244: PUSH
20245: LD_INT 31
20247: PUSH
20248: LD_INT 32
20250: PUSH
20251: LD_INT 33
20253: PUSH
20254: LD_INT 34
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 101
20280: PUSH
20281: LD_INT 102
20283: PUSH
20284: LD_INT 103
20286: PUSH
20287: LD_INT 106
20289: PUSH
20290: LD_INT 108
20292: PUSH
20293: LD_INT 112
20295: PUSH
20296: LD_INT 113
20298: PUSH
20299: LD_INT 114
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: ST_TO_ADDR
20316: GO 20911
20318: LD_INT 17
20320: DOUBLE
20321: EQUAL
20322: IFTRUE 20326
20324: GO 20538
20326: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
20327: LD_ADDR_VAR 0 1
20331: PUSH
20332: LD_INT 1
20334: PUSH
20335: LD_INT 2
20337: PUSH
20338: LD_INT 3
20340: PUSH
20341: LD_INT 4
20343: PUSH
20344: LD_INT 5
20346: PUSH
20347: LD_INT 6
20349: PUSH
20350: LD_INT 7
20352: PUSH
20353: LD_INT 8
20355: PUSH
20356: LD_INT 9
20358: PUSH
20359: LD_INT 10
20361: PUSH
20362: LD_INT 11
20364: PUSH
20365: LD_INT 12
20367: PUSH
20368: LD_INT 13
20370: PUSH
20371: LD_INT 14
20373: PUSH
20374: LD_INT 15
20376: PUSH
20377: LD_INT 16
20379: PUSH
20380: LD_INT 17
20382: PUSH
20383: LD_INT 18
20385: PUSH
20386: LD_INT 19
20388: PUSH
20389: LD_INT 20
20391: PUSH
20392: LD_INT 21
20394: PUSH
20395: LD_INT 22
20397: PUSH
20398: LD_INT 23
20400: PUSH
20401: LD_INT 24
20403: PUSH
20404: LD_INT 25
20406: PUSH
20407: LD_INT 26
20409: PUSH
20410: LD_INT 27
20412: PUSH
20413: LD_INT 28
20415: PUSH
20416: LD_INT 29
20418: PUSH
20419: LD_INT 30
20421: PUSH
20422: LD_INT 31
20424: PUSH
20425: LD_INT 32
20427: PUSH
20428: LD_INT 33
20430: PUSH
20431: LD_INT 34
20433: PUSH
20434: LD_INT 36
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: PUSH
20474: LD_INT 101
20476: PUSH
20477: LD_INT 102
20479: PUSH
20480: LD_INT 103
20482: PUSH
20483: LD_INT 104
20485: PUSH
20486: LD_INT 105
20488: PUSH
20489: LD_INT 106
20491: PUSH
20492: LD_INT 107
20494: PUSH
20495: LD_INT 108
20497: PUSH
20498: LD_INT 109
20500: PUSH
20501: LD_INT 110
20503: PUSH
20504: LD_INT 111
20506: PUSH
20507: LD_INT 112
20509: PUSH
20510: LD_INT 113
20512: PUSH
20513: LD_INT 114
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: ST_TO_ADDR
20536: GO 20911
20538: LD_INT 18
20540: DOUBLE
20541: EQUAL
20542: IFTRUE 20546
20544: GO 20682
20546: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
20547: LD_ADDR_VAR 0 1
20551: PUSH
20552: LD_INT 2
20554: PUSH
20555: LD_INT 4
20557: PUSH
20558: LD_INT 5
20560: PUSH
20561: LD_INT 7
20563: PUSH
20564: LD_INT 11
20566: PUSH
20567: LD_INT 12
20569: PUSH
20570: LD_INT 15
20572: PUSH
20573: LD_INT 16
20575: PUSH
20576: LD_INT 20
20578: PUSH
20579: LD_INT 21
20581: PUSH
20582: LD_INT 22
20584: PUSH
20585: LD_INT 23
20587: PUSH
20588: LD_INT 25
20590: PUSH
20591: LD_INT 26
20593: PUSH
20594: LD_INT 30
20596: PUSH
20597: LD_INT 31
20599: PUSH
20600: LD_INT 32
20602: PUSH
20603: LD_INT 33
20605: PUSH
20606: LD_INT 34
20608: PUSH
20609: LD_INT 35
20611: PUSH
20612: LD_INT 36
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: PUSH
20638: LD_INT 101
20640: PUSH
20641: LD_INT 102
20643: PUSH
20644: LD_INT 103
20646: PUSH
20647: LD_INT 106
20649: PUSH
20650: LD_INT 108
20652: PUSH
20653: LD_INT 112
20655: PUSH
20656: LD_INT 113
20658: PUSH
20659: LD_INT 114
20661: PUSH
20662: LD_INT 115
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: ST_TO_ADDR
20680: GO 20911
20682: LD_INT 19
20684: DOUBLE
20685: EQUAL
20686: IFTRUE 20690
20688: GO 20910
20690: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
20691: LD_ADDR_VAR 0 1
20695: PUSH
20696: LD_INT 1
20698: PUSH
20699: LD_INT 2
20701: PUSH
20702: LD_INT 3
20704: PUSH
20705: LD_INT 4
20707: PUSH
20708: LD_INT 5
20710: PUSH
20711: LD_INT 6
20713: PUSH
20714: LD_INT 7
20716: PUSH
20717: LD_INT 8
20719: PUSH
20720: LD_INT 9
20722: PUSH
20723: LD_INT 10
20725: PUSH
20726: LD_INT 11
20728: PUSH
20729: LD_INT 12
20731: PUSH
20732: LD_INT 13
20734: PUSH
20735: LD_INT 14
20737: PUSH
20738: LD_INT 15
20740: PUSH
20741: LD_INT 16
20743: PUSH
20744: LD_INT 17
20746: PUSH
20747: LD_INT 18
20749: PUSH
20750: LD_INT 19
20752: PUSH
20753: LD_INT 20
20755: PUSH
20756: LD_INT 21
20758: PUSH
20759: LD_INT 22
20761: PUSH
20762: LD_INT 23
20764: PUSH
20765: LD_INT 24
20767: PUSH
20768: LD_INT 25
20770: PUSH
20771: LD_INT 26
20773: PUSH
20774: LD_INT 27
20776: PUSH
20777: LD_INT 28
20779: PUSH
20780: LD_INT 29
20782: PUSH
20783: LD_INT 30
20785: PUSH
20786: LD_INT 31
20788: PUSH
20789: LD_INT 32
20791: PUSH
20792: LD_INT 33
20794: PUSH
20795: LD_INT 34
20797: PUSH
20798: LD_INT 35
20800: PUSH
20801: LD_INT 36
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 101
20844: PUSH
20845: LD_INT 102
20847: PUSH
20848: LD_INT 103
20850: PUSH
20851: LD_INT 104
20853: PUSH
20854: LD_INT 105
20856: PUSH
20857: LD_INT 106
20859: PUSH
20860: LD_INT 107
20862: PUSH
20863: LD_INT 108
20865: PUSH
20866: LD_INT 109
20868: PUSH
20869: LD_INT 110
20871: PUSH
20872: LD_INT 111
20874: PUSH
20875: LD_INT 112
20877: PUSH
20878: LD_INT 113
20880: PUSH
20881: LD_INT 114
20883: PUSH
20884: LD_INT 115
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: ST_TO_ADDR
20908: GO 20911
20910: POP
// end else
20911: GO 21130
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
20913: LD_ADDR_VAR 0 1
20917: PUSH
20918: LD_INT 1
20920: PUSH
20921: LD_INT 2
20923: PUSH
20924: LD_INT 3
20926: PUSH
20927: LD_INT 4
20929: PUSH
20930: LD_INT 5
20932: PUSH
20933: LD_INT 6
20935: PUSH
20936: LD_INT 7
20938: PUSH
20939: LD_INT 8
20941: PUSH
20942: LD_INT 9
20944: PUSH
20945: LD_INT 10
20947: PUSH
20948: LD_INT 11
20950: PUSH
20951: LD_INT 12
20953: PUSH
20954: LD_INT 13
20956: PUSH
20957: LD_INT 14
20959: PUSH
20960: LD_INT 15
20962: PUSH
20963: LD_INT 16
20965: PUSH
20966: LD_INT 17
20968: PUSH
20969: LD_INT 18
20971: PUSH
20972: LD_INT 19
20974: PUSH
20975: LD_INT 20
20977: PUSH
20978: LD_INT 21
20980: PUSH
20981: LD_INT 22
20983: PUSH
20984: LD_INT 23
20986: PUSH
20987: LD_INT 24
20989: PUSH
20990: LD_INT 25
20992: PUSH
20993: LD_INT 26
20995: PUSH
20996: LD_INT 27
20998: PUSH
20999: LD_INT 28
21001: PUSH
21002: LD_INT 29
21004: PUSH
21005: LD_INT 30
21007: PUSH
21008: LD_INT 31
21010: PUSH
21011: LD_INT 32
21013: PUSH
21014: LD_INT 33
21016: PUSH
21017: LD_INT 34
21019: PUSH
21020: LD_INT 35
21022: PUSH
21023: LD_INT 36
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 101
21066: PUSH
21067: LD_INT 102
21069: PUSH
21070: LD_INT 103
21072: PUSH
21073: LD_INT 104
21075: PUSH
21076: LD_INT 105
21078: PUSH
21079: LD_INT 106
21081: PUSH
21082: LD_INT 107
21084: PUSH
21085: LD_INT 108
21087: PUSH
21088: LD_INT 109
21090: PUSH
21091: LD_INT 110
21093: PUSH
21094: LD_INT 111
21096: PUSH
21097: LD_INT 112
21099: PUSH
21100: LD_INT 113
21102: PUSH
21103: LD_INT 114
21105: PUSH
21106: LD_INT 115
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: ST_TO_ADDR
// if result then
21130: LD_VAR 0 1
21134: IFFALSE 21423
// begin normal :=  ;
21136: LD_ADDR_VAR 0 3
21140: PUSH
21141: LD_STRING 
21143: ST_TO_ADDR
// hardcore :=  ;
21144: LD_ADDR_VAR 0 4
21148: PUSH
21149: LD_STRING 
21151: ST_TO_ADDR
// for i = 1 to normalCounter do
21152: LD_ADDR_VAR 0 5
21156: PUSH
21157: DOUBLE
21158: LD_INT 1
21160: DEC
21161: ST_TO_ADDR
21162: LD_EXP 56
21166: PUSH
21167: FOR_TO
21168: IFFALSE 21269
// begin tmp := 0 ;
21170: LD_ADDR_VAR 0 2
21174: PUSH
21175: LD_STRING 0
21177: ST_TO_ADDR
// if result [ 1 ] then
21178: LD_VAR 0 1
21182: PUSH
21183: LD_INT 1
21185: ARRAY
21186: IFFALSE 21251
// if result [ 1 ] [ 1 ] = i then
21188: LD_VAR 0 1
21192: PUSH
21193: LD_INT 1
21195: ARRAY
21196: PUSH
21197: LD_INT 1
21199: ARRAY
21200: PUSH
21201: LD_VAR 0 5
21205: EQUAL
21206: IFFALSE 21251
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21208: LD_ADDR_VAR 0 1
21212: PUSH
21213: LD_VAR 0 1
21217: PPUSH
21218: LD_INT 1
21220: PPUSH
21221: LD_VAR 0 1
21225: PUSH
21226: LD_INT 1
21228: ARRAY
21229: PPUSH
21230: LD_INT 1
21232: PPUSH
21233: CALL_OW 3
21237: PPUSH
21238: CALL_OW 1
21242: ST_TO_ADDR
// tmp := 1 ;
21243: LD_ADDR_VAR 0 2
21247: PUSH
21248: LD_STRING 1
21250: ST_TO_ADDR
// end ; normal := normal & tmp ;
21251: LD_ADDR_VAR 0 3
21255: PUSH
21256: LD_VAR 0 3
21260: PUSH
21261: LD_VAR 0 2
21265: STR
21266: ST_TO_ADDR
// end ;
21267: GO 21167
21269: POP
21270: POP
// for i = 1 to hardcoreCounter do
21271: LD_ADDR_VAR 0 5
21275: PUSH
21276: DOUBLE
21277: LD_INT 1
21279: DEC
21280: ST_TO_ADDR
21281: LD_EXP 57
21285: PUSH
21286: FOR_TO
21287: IFFALSE 21392
// begin tmp := 0 ;
21289: LD_ADDR_VAR 0 2
21293: PUSH
21294: LD_STRING 0
21296: ST_TO_ADDR
// if result [ 2 ] then
21297: LD_VAR 0 1
21301: PUSH
21302: LD_INT 2
21304: ARRAY
21305: IFFALSE 21374
// if result [ 2 ] [ 1 ] = 100 + i then
21307: LD_VAR 0 1
21311: PUSH
21312: LD_INT 2
21314: ARRAY
21315: PUSH
21316: LD_INT 1
21318: ARRAY
21319: PUSH
21320: LD_INT 100
21322: PUSH
21323: LD_VAR 0 5
21327: PLUS
21328: EQUAL
21329: IFFALSE 21374
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21331: LD_ADDR_VAR 0 1
21335: PUSH
21336: LD_VAR 0 1
21340: PPUSH
21341: LD_INT 2
21343: PPUSH
21344: LD_VAR 0 1
21348: PUSH
21349: LD_INT 2
21351: ARRAY
21352: PPUSH
21353: LD_INT 1
21355: PPUSH
21356: CALL_OW 3
21360: PPUSH
21361: CALL_OW 1
21365: ST_TO_ADDR
// tmp := 1 ;
21366: LD_ADDR_VAR 0 2
21370: PUSH
21371: LD_STRING 1
21373: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21374: LD_ADDR_VAR 0 4
21378: PUSH
21379: LD_VAR 0 4
21383: PUSH
21384: LD_VAR 0 2
21388: STR
21389: ST_TO_ADDR
// end ;
21390: GO 21286
21392: POP
21393: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
21394: LD_STRING getStreamItemsFromMission("
21396: PUSH
21397: LD_VAR 0 3
21401: STR
21402: PUSH
21403: LD_STRING ","
21405: STR
21406: PUSH
21407: LD_VAR 0 4
21411: STR
21412: PUSH
21413: LD_STRING ")
21415: STR
21416: PPUSH
21417: CALL_OW 559
// end else
21421: GO 21430
// ToLua ( getStreamItemsFromMission("","") ) ;
21423: LD_STRING getStreamItemsFromMission("","")
21425: PPUSH
21426: CALL_OW 559
// end ;
21430: LD_VAR 0 1
21434: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21435: LD_EXP 55
21439: PUSH
21440: LD_EXP 60
21444: AND
21445: IFFALSE 21569
21447: GO 21449
21449: DISABLE
21450: LD_INT 0
21452: PPUSH
21453: PPUSH
// begin enable ;
21454: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21455: LD_ADDR_VAR 0 2
21459: PUSH
21460: LD_INT 22
21462: PUSH
21463: LD_OWVAR 2
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 2
21474: PUSH
21475: LD_INT 34
21477: PUSH
21478: LD_INT 7
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 34
21487: PUSH
21488: LD_INT 45
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 34
21497: PUSH
21498: LD_INT 28
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: LD_INT 34
21507: PUSH
21508: LD_INT 47
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PPUSH
21526: CALL_OW 69
21530: ST_TO_ADDR
// if not tmp then
21531: LD_VAR 0 2
21535: NOT
21536: IFFALSE 21540
// exit ;
21538: GO 21569
// for i in tmp do
21540: LD_ADDR_VAR 0 1
21544: PUSH
21545: LD_VAR 0 2
21549: PUSH
21550: FOR_IN
21551: IFFALSE 21567
// begin SetLives ( i , 0 ) ;
21553: LD_VAR 0 1
21557: PPUSH
21558: LD_INT 0
21560: PPUSH
21561: CALL_OW 234
// end ;
21565: GO 21550
21567: POP
21568: POP
// end ;
21569: PPOPN 2
21571: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21572: LD_EXP 55
21576: PUSH
21577: LD_EXP 61
21581: AND
21582: IFFALSE 21666
21584: GO 21586
21586: DISABLE
21587: LD_INT 0
21589: PPUSH
21590: PPUSH
// begin enable ;
21591: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21592: LD_ADDR_VAR 0 2
21596: PUSH
21597: LD_INT 22
21599: PUSH
21600: LD_OWVAR 2
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: LD_INT 32
21611: PUSH
21612: LD_INT 3
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PPUSH
21623: CALL_OW 69
21627: ST_TO_ADDR
// if not tmp then
21628: LD_VAR 0 2
21632: NOT
21633: IFFALSE 21637
// exit ;
21635: GO 21666
// for i in tmp do
21637: LD_ADDR_VAR 0 1
21641: PUSH
21642: LD_VAR 0 2
21646: PUSH
21647: FOR_IN
21648: IFFALSE 21664
// begin SetLives ( i , 0 ) ;
21650: LD_VAR 0 1
21654: PPUSH
21655: LD_INT 0
21657: PPUSH
21658: CALL_OW 234
// end ;
21662: GO 21647
21664: POP
21665: POP
// end ;
21666: PPOPN 2
21668: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21669: LD_EXP 55
21673: PUSH
21674: LD_EXP 58
21678: AND
21679: IFFALSE 21772
21681: GO 21683
21683: DISABLE
21684: LD_INT 0
21686: PPUSH
// begin enable ;
21687: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21688: LD_ADDR_VAR 0 1
21692: PUSH
21693: LD_INT 22
21695: PUSH
21696: LD_OWVAR 2
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 2
21707: PUSH
21708: LD_INT 25
21710: PUSH
21711: LD_INT 5
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 25
21720: PUSH
21721: LD_INT 9
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 25
21730: PUSH
21731: LD_INT 8
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: PPUSH
21748: CALL_OW 69
21752: PUSH
21753: FOR_IN
21754: IFFALSE 21770
// begin SetClass ( i , 1 ) ;
21756: LD_VAR 0 1
21760: PPUSH
21761: LD_INT 1
21763: PPUSH
21764: CALL_OW 336
// end ;
21768: GO 21753
21770: POP
21771: POP
// end ;
21772: PPOPN 1
21774: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21775: LD_EXP 55
21779: PUSH
21780: LD_EXP 59
21784: AND
21785: PUSH
21786: LD_OWVAR 65
21790: PUSH
21791: LD_INT 7
21793: LESS
21794: AND
21795: IFFALSE 21809
21797: GO 21799
21799: DISABLE
// begin enable ;
21800: ENABLE
// game_speed := 7 ;
21801: LD_ADDR_OWVAR 65
21805: PUSH
21806: LD_INT 7
21808: ST_TO_ADDR
// end ;
21809: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21810: LD_EXP 55
21814: PUSH
21815: LD_EXP 62
21819: AND
21820: IFFALSE 22022
21822: GO 21824
21824: DISABLE
21825: LD_INT 0
21827: PPUSH
21828: PPUSH
21829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21830: LD_ADDR_VAR 0 3
21834: PUSH
21835: LD_INT 81
21837: PUSH
21838: LD_OWVAR 2
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 21
21849: PUSH
21850: LD_INT 1
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PPUSH
21861: CALL_OW 69
21865: ST_TO_ADDR
// if not tmp then
21866: LD_VAR 0 3
21870: NOT
21871: IFFALSE 21875
// exit ;
21873: GO 22022
// if tmp > 5 then
21875: LD_VAR 0 3
21879: PUSH
21880: LD_INT 5
21882: GREATER
21883: IFFALSE 21895
// k := 5 else
21885: LD_ADDR_VAR 0 2
21889: PUSH
21890: LD_INT 5
21892: ST_TO_ADDR
21893: GO 21905
// k := tmp ;
21895: LD_ADDR_VAR 0 2
21899: PUSH
21900: LD_VAR 0 3
21904: ST_TO_ADDR
// for i := 1 to k do
21905: LD_ADDR_VAR 0 1
21909: PUSH
21910: DOUBLE
21911: LD_INT 1
21913: DEC
21914: ST_TO_ADDR
21915: LD_VAR 0 2
21919: PUSH
21920: FOR_TO
21921: IFFALSE 22020
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21923: LD_VAR 0 3
21927: PUSH
21928: LD_VAR 0 1
21932: ARRAY
21933: PPUSH
21934: LD_VAR 0 1
21938: PUSH
21939: LD_INT 4
21941: MOD
21942: PUSH
21943: LD_INT 1
21945: PLUS
21946: PPUSH
21947: CALL_OW 259
21951: PUSH
21952: LD_INT 10
21954: LESS
21955: IFFALSE 22018
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21957: LD_VAR 0 3
21961: PUSH
21962: LD_VAR 0 1
21966: ARRAY
21967: PPUSH
21968: LD_VAR 0 1
21972: PUSH
21973: LD_INT 4
21975: MOD
21976: PUSH
21977: LD_INT 1
21979: PLUS
21980: PPUSH
21981: LD_VAR 0 3
21985: PUSH
21986: LD_VAR 0 1
21990: ARRAY
21991: PPUSH
21992: LD_VAR 0 1
21996: PUSH
21997: LD_INT 4
21999: MOD
22000: PUSH
22001: LD_INT 1
22003: PLUS
22004: PPUSH
22005: CALL_OW 259
22009: PUSH
22010: LD_INT 1
22012: PLUS
22013: PPUSH
22014: CALL_OW 237
22018: GO 21920
22020: POP
22021: POP
// end ;
22022: PPOPN 3
22024: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22025: LD_EXP 55
22029: PUSH
22030: LD_EXP 63
22034: AND
22035: IFFALSE 22055
22037: GO 22039
22039: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22040: LD_INT 4
22042: PPUSH
22043: LD_OWVAR 2
22047: PPUSH
22048: LD_INT 0
22050: PPUSH
22051: CALL_OW 324
22055: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22056: LD_EXP 55
22060: PUSH
22061: LD_EXP 92
22065: AND
22066: IFFALSE 22086
22068: GO 22070
22070: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22071: LD_INT 19
22073: PPUSH
22074: LD_OWVAR 2
22078: PPUSH
22079: LD_INT 0
22081: PPUSH
22082: CALL_OW 324
22086: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22087: LD_EXP 55
22091: PUSH
22092: LD_EXP 64
22096: AND
22097: IFFALSE 22199
22099: GO 22101
22101: DISABLE
22102: LD_INT 0
22104: PPUSH
22105: PPUSH
// begin enable ;
22106: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22107: LD_ADDR_VAR 0 2
22111: PUSH
22112: LD_INT 22
22114: PUSH
22115: LD_OWVAR 2
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: LD_INT 2
22126: PUSH
22127: LD_INT 34
22129: PUSH
22130: LD_INT 11
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PUSH
22137: LD_INT 34
22139: PUSH
22140: LD_INT 30
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: LIST
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PPUSH
22156: CALL_OW 69
22160: ST_TO_ADDR
// if not tmp then
22161: LD_VAR 0 2
22165: NOT
22166: IFFALSE 22170
// exit ;
22168: GO 22199
// for i in tmp do
22170: LD_ADDR_VAR 0 1
22174: PUSH
22175: LD_VAR 0 2
22179: PUSH
22180: FOR_IN
22181: IFFALSE 22197
// begin SetLives ( i , 0 ) ;
22183: LD_VAR 0 1
22187: PPUSH
22188: LD_INT 0
22190: PPUSH
22191: CALL_OW 234
// end ;
22195: GO 22180
22197: POP
22198: POP
// end ;
22199: PPOPN 2
22201: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22202: LD_EXP 55
22206: PUSH
22207: LD_EXP 65
22211: AND
22212: IFFALSE 22232
22214: GO 22216
22216: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22217: LD_INT 32
22219: PPUSH
22220: LD_OWVAR 2
22224: PPUSH
22225: LD_INT 0
22227: PPUSH
22228: CALL_OW 324
22232: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22233: LD_EXP 55
22237: PUSH
22238: LD_EXP 66
22242: AND
22243: IFFALSE 22424
22245: GO 22247
22247: DISABLE
22248: LD_INT 0
22250: PPUSH
22251: PPUSH
22252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22253: LD_ADDR_VAR 0 2
22257: PUSH
22258: LD_INT 22
22260: PUSH
22261: LD_OWVAR 2
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: LD_INT 33
22272: PUSH
22273: LD_INT 3
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PPUSH
22284: CALL_OW 69
22288: ST_TO_ADDR
// if not tmp then
22289: LD_VAR 0 2
22293: NOT
22294: IFFALSE 22298
// exit ;
22296: GO 22424
// side := 0 ;
22298: LD_ADDR_VAR 0 3
22302: PUSH
22303: LD_INT 0
22305: ST_TO_ADDR
// for i := 1 to 8 do
22306: LD_ADDR_VAR 0 1
22310: PUSH
22311: DOUBLE
22312: LD_INT 1
22314: DEC
22315: ST_TO_ADDR
22316: LD_INT 8
22318: PUSH
22319: FOR_TO
22320: IFFALSE 22368
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22322: LD_OWVAR 2
22326: PUSH
22327: LD_VAR 0 1
22331: NONEQUAL
22332: PUSH
22333: LD_OWVAR 2
22337: PPUSH
22338: LD_VAR 0 1
22342: PPUSH
22343: CALL_OW 81
22347: PUSH
22348: LD_INT 2
22350: EQUAL
22351: AND
22352: IFFALSE 22366
// begin side := i ;
22354: LD_ADDR_VAR 0 3
22358: PUSH
22359: LD_VAR 0 1
22363: ST_TO_ADDR
// break ;
22364: GO 22368
// end ;
22366: GO 22319
22368: POP
22369: POP
// if not side then
22370: LD_VAR 0 3
22374: NOT
22375: IFFALSE 22379
// exit ;
22377: GO 22424
// for i := 1 to tmp do
22379: LD_ADDR_VAR 0 1
22383: PUSH
22384: DOUBLE
22385: LD_INT 1
22387: DEC
22388: ST_TO_ADDR
22389: LD_VAR 0 2
22393: PUSH
22394: FOR_TO
22395: IFFALSE 22422
// if Prob ( 60 ) then
22397: LD_INT 60
22399: PPUSH
22400: CALL_OW 13
22404: IFFALSE 22420
// SetSide ( i , side ) ;
22406: LD_VAR 0 1
22410: PPUSH
22411: LD_VAR 0 3
22415: PPUSH
22416: CALL_OW 235
22420: GO 22394
22422: POP
22423: POP
// end ;
22424: PPOPN 3
22426: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22427: LD_EXP 55
22431: PUSH
22432: LD_EXP 68
22436: AND
22437: IFFALSE 22556
22439: GO 22441
22441: DISABLE
22442: LD_INT 0
22444: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22445: LD_ADDR_VAR 0 1
22449: PUSH
22450: LD_INT 22
22452: PUSH
22453: LD_OWVAR 2
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 21
22464: PUSH
22465: LD_INT 1
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: PUSH
22472: LD_INT 3
22474: PUSH
22475: LD_INT 23
22477: PUSH
22478: LD_INT 0
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: LIST
22493: PPUSH
22494: CALL_OW 69
22498: PUSH
22499: FOR_IN
22500: IFFALSE 22554
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22502: LD_VAR 0 1
22506: PPUSH
22507: CALL_OW 257
22511: PUSH
22512: LD_INT 1
22514: PUSH
22515: LD_INT 2
22517: PUSH
22518: LD_INT 3
22520: PUSH
22521: LD_INT 4
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: IN
22530: IFFALSE 22552
// SetClass ( un , rand ( 1 , 4 ) ) ;
22532: LD_VAR 0 1
22536: PPUSH
22537: LD_INT 1
22539: PPUSH
22540: LD_INT 4
22542: PPUSH
22543: CALL_OW 12
22547: PPUSH
22548: CALL_OW 336
22552: GO 22499
22554: POP
22555: POP
// end ;
22556: PPOPN 1
22558: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22559: LD_EXP 55
22563: PUSH
22564: LD_EXP 67
22568: AND
22569: IFFALSE 22648
22571: GO 22573
22573: DISABLE
22574: LD_INT 0
22576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22577: LD_ADDR_VAR 0 1
22581: PUSH
22582: LD_INT 22
22584: PUSH
22585: LD_OWVAR 2
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 21
22596: PUSH
22597: LD_INT 3
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PPUSH
22608: CALL_OW 69
22612: ST_TO_ADDR
// if not tmp then
22613: LD_VAR 0 1
22617: NOT
22618: IFFALSE 22622
// exit ;
22620: GO 22648
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22622: LD_VAR 0 1
22626: PUSH
22627: LD_INT 1
22629: PPUSH
22630: LD_VAR 0 1
22634: PPUSH
22635: CALL_OW 12
22639: ARRAY
22640: PPUSH
22641: LD_INT 100
22643: PPUSH
22644: CALL_OW 234
// end ;
22648: PPOPN 1
22650: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22651: LD_EXP 55
22655: PUSH
22656: LD_EXP 69
22660: AND
22661: IFFALSE 22759
22663: GO 22665
22665: DISABLE
22666: LD_INT 0
22668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22669: LD_ADDR_VAR 0 1
22673: PUSH
22674: LD_INT 22
22676: PUSH
22677: LD_OWVAR 2
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PUSH
22686: LD_INT 21
22688: PUSH
22689: LD_INT 1
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PPUSH
22700: CALL_OW 69
22704: ST_TO_ADDR
// if not tmp then
22705: LD_VAR 0 1
22709: NOT
22710: IFFALSE 22714
// exit ;
22712: GO 22759
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22714: LD_VAR 0 1
22718: PUSH
22719: LD_INT 1
22721: PPUSH
22722: LD_VAR 0 1
22726: PPUSH
22727: CALL_OW 12
22731: ARRAY
22732: PPUSH
22733: LD_INT 1
22735: PPUSH
22736: LD_INT 4
22738: PPUSH
22739: CALL_OW 12
22743: PPUSH
22744: LD_INT 3000
22746: PPUSH
22747: LD_INT 9000
22749: PPUSH
22750: CALL_OW 12
22754: PPUSH
22755: CALL_OW 492
// end ;
22759: PPOPN 1
22761: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22762: LD_EXP 55
22766: PUSH
22767: LD_EXP 70
22771: AND
22772: IFFALSE 22792
22774: GO 22776
22776: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22777: LD_INT 1
22779: PPUSH
22780: LD_OWVAR 2
22784: PPUSH
22785: LD_INT 0
22787: PPUSH
22788: CALL_OW 324
22792: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22793: LD_EXP 55
22797: PUSH
22798: LD_EXP 71
22802: AND
22803: IFFALSE 22886
22805: GO 22807
22807: DISABLE
22808: LD_INT 0
22810: PPUSH
22811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22812: LD_ADDR_VAR 0 2
22816: PUSH
22817: LD_INT 22
22819: PUSH
22820: LD_OWVAR 2
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 21
22831: PUSH
22832: LD_INT 3
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PPUSH
22843: CALL_OW 69
22847: ST_TO_ADDR
// if not tmp then
22848: LD_VAR 0 2
22852: NOT
22853: IFFALSE 22857
// exit ;
22855: GO 22886
// for i in tmp do
22857: LD_ADDR_VAR 0 1
22861: PUSH
22862: LD_VAR 0 2
22866: PUSH
22867: FOR_IN
22868: IFFALSE 22884
// SetBLevel ( i , 10 ) ;
22870: LD_VAR 0 1
22874: PPUSH
22875: LD_INT 10
22877: PPUSH
22878: CALL_OW 241
22882: GO 22867
22884: POP
22885: POP
// end ;
22886: PPOPN 2
22888: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22889: LD_EXP 55
22893: PUSH
22894: LD_EXP 72
22898: AND
22899: IFFALSE 23010
22901: GO 22903
22903: DISABLE
22904: LD_INT 0
22906: PPUSH
22907: PPUSH
22908: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22909: LD_ADDR_VAR 0 3
22913: PUSH
22914: LD_INT 22
22916: PUSH
22917: LD_OWVAR 2
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 25
22928: PUSH
22929: LD_INT 1
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: PPUSH
22940: CALL_OW 69
22944: ST_TO_ADDR
// if not tmp then
22945: LD_VAR 0 3
22949: NOT
22950: IFFALSE 22954
// exit ;
22952: GO 23010
// un := tmp [ rand ( 1 , tmp ) ] ;
22954: LD_ADDR_VAR 0 2
22958: PUSH
22959: LD_VAR 0 3
22963: PUSH
22964: LD_INT 1
22966: PPUSH
22967: LD_VAR 0 3
22971: PPUSH
22972: CALL_OW 12
22976: ARRAY
22977: ST_TO_ADDR
// if Crawls ( un ) then
22978: LD_VAR 0 2
22982: PPUSH
22983: CALL_OW 318
22987: IFFALSE 22998
// ComWalk ( un ) ;
22989: LD_VAR 0 2
22993: PPUSH
22994: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22998: LD_VAR 0 2
23002: PPUSH
23003: LD_INT 5
23005: PPUSH
23006: CALL_OW 336
// end ;
23010: PPOPN 3
23012: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
23013: LD_EXP 55
23017: PUSH
23018: LD_EXP 73
23022: AND
23023: PUSH
23024: LD_OWVAR 67
23028: PUSH
23029: LD_INT 3
23031: LESS
23032: AND
23033: IFFALSE 23052
23035: GO 23037
23037: DISABLE
// Difficulty := Difficulty + 1 ;
23038: LD_ADDR_OWVAR 67
23042: PUSH
23043: LD_OWVAR 67
23047: PUSH
23048: LD_INT 1
23050: PLUS
23051: ST_TO_ADDR
23052: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23053: LD_EXP 55
23057: PUSH
23058: LD_EXP 74
23062: AND
23063: IFFALSE 23166
23065: GO 23067
23067: DISABLE
23068: LD_INT 0
23070: PPUSH
// begin for i := 1 to 5 do
23071: LD_ADDR_VAR 0 1
23075: PUSH
23076: DOUBLE
23077: LD_INT 1
23079: DEC
23080: ST_TO_ADDR
23081: LD_INT 5
23083: PUSH
23084: FOR_TO
23085: IFFALSE 23164
// begin uc_nation := nation_nature ;
23087: LD_ADDR_OWVAR 21
23091: PUSH
23092: LD_INT 0
23094: ST_TO_ADDR
// uc_side := 0 ;
23095: LD_ADDR_OWVAR 20
23099: PUSH
23100: LD_INT 0
23102: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23103: LD_ADDR_OWVAR 29
23107: PUSH
23108: LD_INT 12
23110: PUSH
23111: LD_INT 12
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: ST_TO_ADDR
// hc_agressivity := 20 ;
23118: LD_ADDR_OWVAR 35
23122: PUSH
23123: LD_INT 20
23125: ST_TO_ADDR
// hc_class := class_tiger ;
23126: LD_ADDR_OWVAR 28
23130: PUSH
23131: LD_INT 14
23133: ST_TO_ADDR
// hc_gallery :=  ;
23134: LD_ADDR_OWVAR 33
23138: PUSH
23139: LD_STRING 
23141: ST_TO_ADDR
// hc_name :=  ;
23142: LD_ADDR_OWVAR 26
23146: PUSH
23147: LD_STRING 
23149: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23150: CALL_OW 44
23154: PPUSH
23155: LD_INT 0
23157: PPUSH
23158: CALL_OW 51
// end ;
23162: GO 23084
23164: POP
23165: POP
// end ;
23166: PPOPN 1
23168: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23169: LD_EXP 55
23173: PUSH
23174: LD_EXP 75
23178: AND
23179: IFFALSE 23188
23181: GO 23183
23183: DISABLE
// StreamSibBomb ;
23184: CALL 23189 0 0
23188: END
// export function StreamSibBomb ; var i , x , y ; begin
23189: LD_INT 0
23191: PPUSH
23192: PPUSH
23193: PPUSH
23194: PPUSH
// result := false ;
23195: LD_ADDR_VAR 0 1
23199: PUSH
23200: LD_INT 0
23202: ST_TO_ADDR
// for i := 1 to 16 do
23203: LD_ADDR_VAR 0 2
23207: PUSH
23208: DOUBLE
23209: LD_INT 1
23211: DEC
23212: ST_TO_ADDR
23213: LD_INT 16
23215: PUSH
23216: FOR_TO
23217: IFFALSE 23416
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23219: LD_ADDR_VAR 0 3
23223: PUSH
23224: LD_INT 10
23226: PUSH
23227: LD_INT 20
23229: PUSH
23230: LD_INT 30
23232: PUSH
23233: LD_INT 40
23235: PUSH
23236: LD_INT 50
23238: PUSH
23239: LD_INT 60
23241: PUSH
23242: LD_INT 70
23244: PUSH
23245: LD_INT 80
23247: PUSH
23248: LD_INT 90
23250: PUSH
23251: LD_INT 100
23253: PUSH
23254: LD_INT 110
23256: PUSH
23257: LD_INT 120
23259: PUSH
23260: LD_INT 130
23262: PUSH
23263: LD_INT 140
23265: PUSH
23266: LD_INT 150
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 1
23288: PPUSH
23289: LD_INT 15
23291: PPUSH
23292: CALL_OW 12
23296: ARRAY
23297: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23298: LD_ADDR_VAR 0 4
23302: PUSH
23303: LD_INT 10
23305: PUSH
23306: LD_INT 20
23308: PUSH
23309: LD_INT 30
23311: PUSH
23312: LD_INT 40
23314: PUSH
23315: LD_INT 50
23317: PUSH
23318: LD_INT 60
23320: PUSH
23321: LD_INT 70
23323: PUSH
23324: LD_INT 80
23326: PUSH
23327: LD_INT 90
23329: PUSH
23330: LD_INT 100
23332: PUSH
23333: LD_INT 110
23335: PUSH
23336: LD_INT 120
23338: PUSH
23339: LD_INT 130
23341: PUSH
23342: LD_INT 140
23344: PUSH
23345: LD_INT 150
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: PUSH
23365: LD_INT 1
23367: PPUSH
23368: LD_INT 15
23370: PPUSH
23371: CALL_OW 12
23375: ARRAY
23376: ST_TO_ADDR
// if ValidHex ( x , y ) then
23377: LD_VAR 0 3
23381: PPUSH
23382: LD_VAR 0 4
23386: PPUSH
23387: CALL_OW 488
23391: IFFALSE 23414
// begin result := [ x , y ] ;
23393: LD_ADDR_VAR 0 1
23397: PUSH
23398: LD_VAR 0 3
23402: PUSH
23403: LD_VAR 0 4
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: ST_TO_ADDR
// break ;
23412: GO 23416
// end ; end ;
23414: GO 23216
23416: POP
23417: POP
// if result then
23418: LD_VAR 0 1
23422: IFFALSE 23482
// begin ToLua ( playSibBomb() ) ;
23424: LD_STRING playSibBomb()
23426: PPUSH
23427: CALL_OW 559
// wait ( 0 0$14 ) ;
23431: LD_INT 490
23433: PPUSH
23434: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23438: LD_VAR 0 1
23442: PUSH
23443: LD_INT 1
23445: ARRAY
23446: PPUSH
23447: LD_VAR 0 1
23451: PUSH
23452: LD_INT 2
23454: ARRAY
23455: PPUSH
23456: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23460: LD_VAR 0 1
23464: PUSH
23465: LD_INT 1
23467: ARRAY
23468: PPUSH
23469: LD_VAR 0 1
23473: PUSH
23474: LD_INT 2
23476: ARRAY
23477: PPUSH
23478: CALL_OW 429
// end ; end ;
23482: LD_VAR 0 1
23486: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23487: LD_EXP 55
23491: PUSH
23492: LD_EXP 77
23496: AND
23497: IFFALSE 23509
23499: GO 23501
23501: DISABLE
// YouLost (  ) ;
23502: LD_STRING 
23504: PPUSH
23505: CALL_OW 104
23509: END
// every 0 0$1 trigger StreamModeActive and sFog do
23510: LD_EXP 55
23514: PUSH
23515: LD_EXP 76
23519: AND
23520: IFFALSE 23534
23522: GO 23524
23524: DISABLE
// FogOff ( your_side ) ;
23525: LD_OWVAR 2
23529: PPUSH
23530: CALL_OW 344
23534: END
// every 0 0$1 trigger StreamModeActive and sSun do
23535: LD_EXP 55
23539: PUSH
23540: LD_EXP 78
23544: AND
23545: IFFALSE 23573
23547: GO 23549
23549: DISABLE
// begin solar_recharge_percent := 0 ;
23550: LD_ADDR_OWVAR 79
23554: PUSH
23555: LD_INT 0
23557: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23558: LD_INT 10500
23560: PPUSH
23561: CALL_OW 67
// solar_recharge_percent := 100 ;
23565: LD_ADDR_OWVAR 79
23569: PUSH
23570: LD_INT 100
23572: ST_TO_ADDR
// end ;
23573: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23574: LD_EXP 55
23578: PUSH
23579: LD_EXP 79
23583: AND
23584: IFFALSE 23823
23586: GO 23588
23588: DISABLE
23589: LD_INT 0
23591: PPUSH
23592: PPUSH
23593: PPUSH
// begin tmp := [ ] ;
23594: LD_ADDR_VAR 0 3
23598: PUSH
23599: EMPTY
23600: ST_TO_ADDR
// for i := 1 to 6 do
23601: LD_ADDR_VAR 0 1
23605: PUSH
23606: DOUBLE
23607: LD_INT 1
23609: DEC
23610: ST_TO_ADDR
23611: LD_INT 6
23613: PUSH
23614: FOR_TO
23615: IFFALSE 23720
// begin uc_nation := nation_nature ;
23617: LD_ADDR_OWVAR 21
23621: PUSH
23622: LD_INT 0
23624: ST_TO_ADDR
// uc_side := 0 ;
23625: LD_ADDR_OWVAR 20
23629: PUSH
23630: LD_INT 0
23632: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23633: LD_ADDR_OWVAR 29
23637: PUSH
23638: LD_INT 12
23640: PUSH
23641: LD_INT 12
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: ST_TO_ADDR
// hc_agressivity := 20 ;
23648: LD_ADDR_OWVAR 35
23652: PUSH
23653: LD_INT 20
23655: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23656: LD_ADDR_OWVAR 28
23660: PUSH
23661: LD_INT 17
23663: ST_TO_ADDR
// hc_gallery :=  ;
23664: LD_ADDR_OWVAR 33
23668: PUSH
23669: LD_STRING 
23671: ST_TO_ADDR
// hc_name :=  ;
23672: LD_ADDR_OWVAR 26
23676: PUSH
23677: LD_STRING 
23679: ST_TO_ADDR
// un := CreateHuman ;
23680: LD_ADDR_VAR 0 2
23684: PUSH
23685: CALL_OW 44
23689: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23690: LD_VAR 0 2
23694: PPUSH
23695: LD_INT 1
23697: PPUSH
23698: CALL_OW 51
// tmp := tmp ^ un ;
23702: LD_ADDR_VAR 0 3
23706: PUSH
23707: LD_VAR 0 3
23711: PUSH
23712: LD_VAR 0 2
23716: ADD
23717: ST_TO_ADDR
// end ;
23718: GO 23614
23720: POP
23721: POP
// repeat wait ( 0 0$1 ) ;
23722: LD_INT 35
23724: PPUSH
23725: CALL_OW 67
// for un in tmp do
23729: LD_ADDR_VAR 0 2
23733: PUSH
23734: LD_VAR 0 3
23738: PUSH
23739: FOR_IN
23740: IFFALSE 23814
// begin if IsDead ( un ) then
23742: LD_VAR 0 2
23746: PPUSH
23747: CALL_OW 301
23751: IFFALSE 23771
// begin tmp := tmp diff un ;
23753: LD_ADDR_VAR 0 3
23757: PUSH
23758: LD_VAR 0 3
23762: PUSH
23763: LD_VAR 0 2
23767: DIFF
23768: ST_TO_ADDR
// continue ;
23769: GO 23739
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23771: LD_VAR 0 2
23775: PPUSH
23776: LD_INT 3
23778: PUSH
23779: LD_INT 22
23781: PUSH
23782: LD_INT 0
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PPUSH
23793: CALL_OW 69
23797: PPUSH
23798: LD_VAR 0 2
23802: PPUSH
23803: CALL_OW 74
23807: PPUSH
23808: CALL_OW 115
// end ;
23812: GO 23739
23814: POP
23815: POP
// until not tmp ;
23816: LD_VAR 0 3
23820: NOT
23821: IFFALSE 23722
// end ;
23823: PPOPN 3
23825: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23826: LD_EXP 55
23830: PUSH
23831: LD_EXP 80
23835: AND
23836: IFFALSE 23890
23838: GO 23840
23840: DISABLE
// begin ToLua ( displayTroll(); ) ;
23841: LD_STRING displayTroll();
23843: PPUSH
23844: CALL_OW 559
// wait ( 3 3$00 ) ;
23848: LD_INT 6300
23850: PPUSH
23851: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23855: LD_STRING hideTroll();
23857: PPUSH
23858: CALL_OW 559
// wait ( 1 1$00 ) ;
23862: LD_INT 2100
23864: PPUSH
23865: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23869: LD_STRING displayTroll();
23871: PPUSH
23872: CALL_OW 559
// wait ( 1 1$00 ) ;
23876: LD_INT 2100
23878: PPUSH
23879: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23883: LD_STRING hideTroll();
23885: PPUSH
23886: CALL_OW 559
// end ;
23890: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23891: LD_EXP 55
23895: PUSH
23896: LD_EXP 81
23900: AND
23901: IFFALSE 23964
23903: GO 23905
23905: DISABLE
23906: LD_INT 0
23908: PPUSH
// begin p := 0 ;
23909: LD_ADDR_VAR 0 1
23913: PUSH
23914: LD_INT 0
23916: ST_TO_ADDR
// repeat game_speed := 1 ;
23917: LD_ADDR_OWVAR 65
23921: PUSH
23922: LD_INT 1
23924: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23925: LD_INT 35
23927: PPUSH
23928: CALL_OW 67
// p := p + 1 ;
23932: LD_ADDR_VAR 0 1
23936: PUSH
23937: LD_VAR 0 1
23941: PUSH
23942: LD_INT 1
23944: PLUS
23945: ST_TO_ADDR
// until p >= 60 ;
23946: LD_VAR 0 1
23950: PUSH
23951: LD_INT 60
23953: GREATEREQUAL
23954: IFFALSE 23917
// game_speed := 4 ;
23956: LD_ADDR_OWVAR 65
23960: PUSH
23961: LD_INT 4
23963: ST_TO_ADDR
// end ;
23964: PPOPN 1
23966: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23967: LD_EXP 55
23971: PUSH
23972: LD_EXP 82
23976: AND
23977: IFFALSE 24123
23979: GO 23981
23981: DISABLE
23982: LD_INT 0
23984: PPUSH
23985: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23986: LD_ADDR_VAR 0 1
23990: PUSH
23991: LD_INT 22
23993: PUSH
23994: LD_OWVAR 2
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: LD_INT 2
24005: PUSH
24006: LD_INT 30
24008: PUSH
24009: LD_INT 0
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PUSH
24016: LD_INT 30
24018: PUSH
24019: LD_INT 1
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: LIST
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PPUSH
24035: CALL_OW 69
24039: ST_TO_ADDR
// if not depot then
24040: LD_VAR 0 1
24044: NOT
24045: IFFALSE 24049
// exit ;
24047: GO 24123
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24049: LD_ADDR_VAR 0 2
24053: PUSH
24054: LD_VAR 0 1
24058: PUSH
24059: LD_INT 1
24061: PPUSH
24062: LD_VAR 0 1
24066: PPUSH
24067: CALL_OW 12
24071: ARRAY
24072: PPUSH
24073: CALL_OW 274
24077: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24078: LD_VAR 0 2
24082: PPUSH
24083: LD_INT 1
24085: PPUSH
24086: LD_INT 0
24088: PPUSH
24089: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24093: LD_VAR 0 2
24097: PPUSH
24098: LD_INT 2
24100: PPUSH
24101: LD_INT 0
24103: PPUSH
24104: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24108: LD_VAR 0 2
24112: PPUSH
24113: LD_INT 3
24115: PPUSH
24116: LD_INT 0
24118: PPUSH
24119: CALL_OW 277
// end ;
24123: PPOPN 2
24125: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24126: LD_EXP 55
24130: PUSH
24131: LD_EXP 83
24135: AND
24136: IFFALSE 24233
24138: GO 24140
24140: DISABLE
24141: LD_INT 0
24143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24144: LD_ADDR_VAR 0 1
24148: PUSH
24149: LD_INT 22
24151: PUSH
24152: LD_OWVAR 2
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 21
24163: PUSH
24164: LD_INT 1
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 3
24173: PUSH
24174: LD_INT 23
24176: PUSH
24177: LD_INT 0
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: LIST
24192: PPUSH
24193: CALL_OW 69
24197: ST_TO_ADDR
// if not tmp then
24198: LD_VAR 0 1
24202: NOT
24203: IFFALSE 24207
// exit ;
24205: GO 24233
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24207: LD_VAR 0 1
24211: PUSH
24212: LD_INT 1
24214: PPUSH
24215: LD_VAR 0 1
24219: PPUSH
24220: CALL_OW 12
24224: ARRAY
24225: PPUSH
24226: LD_INT 200
24228: PPUSH
24229: CALL_OW 234
// end ;
24233: PPOPN 1
24235: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24236: LD_EXP 55
24240: PUSH
24241: LD_EXP 84
24245: AND
24246: IFFALSE 24325
24248: GO 24250
24250: DISABLE
24251: LD_INT 0
24253: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24254: LD_ADDR_VAR 0 1
24258: PUSH
24259: LD_INT 22
24261: PUSH
24262: LD_OWVAR 2
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 21
24273: PUSH
24274: LD_INT 2
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PPUSH
24285: CALL_OW 69
24289: ST_TO_ADDR
// if not tmp then
24290: LD_VAR 0 1
24294: NOT
24295: IFFALSE 24299
// exit ;
24297: GO 24325
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24299: LD_VAR 0 1
24303: PUSH
24304: LD_INT 1
24306: PPUSH
24307: LD_VAR 0 1
24311: PPUSH
24312: CALL_OW 12
24316: ARRAY
24317: PPUSH
24318: LD_INT 60
24320: PPUSH
24321: CALL_OW 234
// end ;
24325: PPOPN 1
24327: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24328: LD_EXP 55
24332: PUSH
24333: LD_EXP 85
24337: AND
24338: IFFALSE 24437
24340: GO 24342
24342: DISABLE
24343: LD_INT 0
24345: PPUSH
24346: PPUSH
// begin enable ;
24347: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24348: LD_ADDR_VAR 0 1
24352: PUSH
24353: LD_INT 22
24355: PUSH
24356: LD_OWVAR 2
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 61
24367: PUSH
24368: EMPTY
24369: LIST
24370: PUSH
24371: LD_INT 33
24373: PUSH
24374: LD_INT 2
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: LIST
24385: PPUSH
24386: CALL_OW 69
24390: ST_TO_ADDR
// if not tmp then
24391: LD_VAR 0 1
24395: NOT
24396: IFFALSE 24400
// exit ;
24398: GO 24437
// for i in tmp do
24400: LD_ADDR_VAR 0 2
24404: PUSH
24405: LD_VAR 0 1
24409: PUSH
24410: FOR_IN
24411: IFFALSE 24435
// if IsControledBy ( i ) then
24413: LD_VAR 0 2
24417: PPUSH
24418: CALL_OW 312
24422: IFFALSE 24433
// ComUnlink ( i ) ;
24424: LD_VAR 0 2
24428: PPUSH
24429: CALL_OW 136
24433: GO 24410
24435: POP
24436: POP
// end ;
24437: PPOPN 2
24439: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24440: LD_EXP 55
24444: PUSH
24445: LD_EXP 86
24449: AND
24450: IFFALSE 24590
24452: GO 24454
24454: DISABLE
24455: LD_INT 0
24457: PPUSH
24458: PPUSH
// begin ToLua ( displayPowell(); ) ;
24459: LD_STRING displayPowell();
24461: PPUSH
24462: CALL_OW 559
// uc_side := 0 ;
24466: LD_ADDR_OWVAR 20
24470: PUSH
24471: LD_INT 0
24473: ST_TO_ADDR
// uc_nation := 2 ;
24474: LD_ADDR_OWVAR 21
24478: PUSH
24479: LD_INT 2
24481: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24482: LD_ADDR_OWVAR 37
24486: PUSH
24487: LD_INT 14
24489: ST_TO_ADDR
// vc_engine := engine_siberite ;
24490: LD_ADDR_OWVAR 39
24494: PUSH
24495: LD_INT 3
24497: ST_TO_ADDR
// vc_control := control_apeman ;
24498: LD_ADDR_OWVAR 38
24502: PUSH
24503: LD_INT 5
24505: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24506: LD_ADDR_OWVAR 40
24510: PUSH
24511: LD_INT 29
24513: ST_TO_ADDR
// un := CreateVehicle ;
24514: LD_ADDR_VAR 0 2
24518: PUSH
24519: CALL_OW 45
24523: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24524: LD_VAR 0 2
24528: PPUSH
24529: LD_INT 1
24531: PPUSH
24532: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24536: LD_INT 35
24538: PPUSH
24539: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24543: LD_VAR 0 2
24547: PPUSH
24548: LD_INT 22
24550: PUSH
24551: LD_OWVAR 2
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PPUSH
24560: CALL_OW 69
24564: PPUSH
24565: LD_VAR 0 2
24569: PPUSH
24570: CALL_OW 74
24574: PPUSH
24575: CALL_OW 115
// until IsDead ( un ) ;
24579: LD_VAR 0 2
24583: PPUSH
24584: CALL_OW 301
24588: IFFALSE 24536
// end ;
24590: PPOPN 2
24592: END
// every 0 0$1 trigger StreamModeActive and sStu do
24593: LD_EXP 55
24597: PUSH
24598: LD_EXP 94
24602: AND
24603: IFFALSE 24619
24605: GO 24607
24607: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24608: LD_STRING displayStucuk();
24610: PPUSH
24611: CALL_OW 559
// ResetFog ;
24615: CALL_OW 335
// end ;
24619: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24620: LD_EXP 55
24624: PUSH
24625: LD_EXP 87
24629: AND
24630: IFFALSE 24771
24632: GO 24634
24634: DISABLE
24635: LD_INT 0
24637: PPUSH
24638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24639: LD_ADDR_VAR 0 2
24643: PUSH
24644: LD_INT 22
24646: PUSH
24647: LD_OWVAR 2
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 21
24658: PUSH
24659: LD_INT 1
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PPUSH
24670: CALL_OW 69
24674: ST_TO_ADDR
// if not tmp then
24675: LD_VAR 0 2
24679: NOT
24680: IFFALSE 24684
// exit ;
24682: GO 24771
// un := tmp [ rand ( 1 , tmp ) ] ;
24684: LD_ADDR_VAR 0 1
24688: PUSH
24689: LD_VAR 0 2
24693: PUSH
24694: LD_INT 1
24696: PPUSH
24697: LD_VAR 0 2
24701: PPUSH
24702: CALL_OW 12
24706: ARRAY
24707: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24708: LD_VAR 0 1
24712: PPUSH
24713: LD_INT 0
24715: PPUSH
24716: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24720: LD_VAR 0 1
24724: PPUSH
24725: LD_OWVAR 3
24729: PUSH
24730: LD_VAR 0 1
24734: DIFF
24735: PPUSH
24736: LD_VAR 0 1
24740: PPUSH
24741: CALL_OW 74
24745: PPUSH
24746: CALL_OW 115
// wait ( 0 0$20 ) ;
24750: LD_INT 700
24752: PPUSH
24753: CALL_OW 67
// SetSide ( un , your_side ) ;
24757: LD_VAR 0 1
24761: PPUSH
24762: LD_OWVAR 2
24766: PPUSH
24767: CALL_OW 235
// end ;
24771: PPOPN 2
24773: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24774: LD_EXP 55
24778: PUSH
24779: LD_EXP 88
24783: AND
24784: IFFALSE 24890
24786: GO 24788
24788: DISABLE
24789: LD_INT 0
24791: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24792: LD_ADDR_VAR 0 1
24796: PUSH
24797: LD_INT 22
24799: PUSH
24800: LD_OWVAR 2
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: PUSH
24809: LD_INT 2
24811: PUSH
24812: LD_INT 30
24814: PUSH
24815: LD_INT 0
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 30
24824: PUSH
24825: LD_INT 1
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: LIST
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PPUSH
24841: CALL_OW 69
24845: ST_TO_ADDR
// if not depot then
24846: LD_VAR 0 1
24850: NOT
24851: IFFALSE 24855
// exit ;
24853: GO 24890
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24855: LD_VAR 0 1
24859: PUSH
24860: LD_INT 1
24862: ARRAY
24863: PPUSH
24864: CALL_OW 250
24868: PPUSH
24869: LD_VAR 0 1
24873: PUSH
24874: LD_INT 1
24876: ARRAY
24877: PPUSH
24878: CALL_OW 251
24882: PPUSH
24883: LD_INT 70
24885: PPUSH
24886: CALL_OW 495
// end ;
24890: PPOPN 1
24892: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24893: LD_EXP 55
24897: PUSH
24898: LD_EXP 89
24902: AND
24903: IFFALSE 25114
24905: GO 24907
24907: DISABLE
24908: LD_INT 0
24910: PPUSH
24911: PPUSH
24912: PPUSH
24913: PPUSH
24914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24915: LD_ADDR_VAR 0 5
24919: PUSH
24920: LD_INT 22
24922: PUSH
24923: LD_OWVAR 2
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 21
24934: PUSH
24935: LD_INT 1
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PPUSH
24946: CALL_OW 69
24950: ST_TO_ADDR
// if not tmp then
24951: LD_VAR 0 5
24955: NOT
24956: IFFALSE 24960
// exit ;
24958: GO 25114
// for i in tmp do
24960: LD_ADDR_VAR 0 1
24964: PUSH
24965: LD_VAR 0 5
24969: PUSH
24970: FOR_IN
24971: IFFALSE 25112
// begin d := rand ( 0 , 5 ) ;
24973: LD_ADDR_VAR 0 4
24977: PUSH
24978: LD_INT 0
24980: PPUSH
24981: LD_INT 5
24983: PPUSH
24984: CALL_OW 12
24988: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24989: LD_ADDR_VAR 0 2
24993: PUSH
24994: LD_VAR 0 1
24998: PPUSH
24999: CALL_OW 250
25003: PPUSH
25004: LD_VAR 0 4
25008: PPUSH
25009: LD_INT 3
25011: PPUSH
25012: LD_INT 12
25014: PPUSH
25015: CALL_OW 12
25019: PPUSH
25020: CALL_OW 272
25024: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25025: LD_ADDR_VAR 0 3
25029: PUSH
25030: LD_VAR 0 1
25034: PPUSH
25035: CALL_OW 251
25039: PPUSH
25040: LD_VAR 0 4
25044: PPUSH
25045: LD_INT 3
25047: PPUSH
25048: LD_INT 12
25050: PPUSH
25051: CALL_OW 12
25055: PPUSH
25056: CALL_OW 273
25060: ST_TO_ADDR
// if ValidHex ( x , y ) then
25061: LD_VAR 0 2
25065: PPUSH
25066: LD_VAR 0 3
25070: PPUSH
25071: CALL_OW 488
25075: IFFALSE 25110
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25077: LD_VAR 0 1
25081: PPUSH
25082: LD_VAR 0 2
25086: PPUSH
25087: LD_VAR 0 3
25091: PPUSH
25092: LD_INT 3
25094: PPUSH
25095: LD_INT 6
25097: PPUSH
25098: CALL_OW 12
25102: PPUSH
25103: LD_INT 1
25105: PPUSH
25106: CALL_OW 483
// end ;
25110: GO 24970
25112: POP
25113: POP
// end ;
25114: PPOPN 5
25116: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25117: LD_EXP 55
25121: PUSH
25122: LD_EXP 90
25126: AND
25127: IFFALSE 25221
25129: GO 25131
25131: DISABLE
25132: LD_INT 0
25134: PPUSH
25135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25136: LD_ADDR_VAR 0 2
25140: PUSH
25141: LD_INT 22
25143: PUSH
25144: LD_OWVAR 2
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 32
25155: PUSH
25156: LD_INT 1
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 21
25165: PUSH
25166: LD_INT 2
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: LIST
25177: PPUSH
25178: CALL_OW 69
25182: ST_TO_ADDR
// if not tmp then
25183: LD_VAR 0 2
25187: NOT
25188: IFFALSE 25192
// exit ;
25190: GO 25221
// for i in tmp do
25192: LD_ADDR_VAR 0 1
25196: PUSH
25197: LD_VAR 0 2
25201: PUSH
25202: FOR_IN
25203: IFFALSE 25219
// SetFuel ( i , 0 ) ;
25205: LD_VAR 0 1
25209: PPUSH
25210: LD_INT 0
25212: PPUSH
25213: CALL_OW 240
25217: GO 25202
25219: POP
25220: POP
// end ;
25221: PPOPN 2
25223: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25224: LD_EXP 55
25228: PUSH
25229: LD_EXP 91
25233: AND
25234: IFFALSE 25300
25236: GO 25238
25238: DISABLE
25239: LD_INT 0
25241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25242: LD_ADDR_VAR 0 1
25246: PUSH
25247: LD_INT 22
25249: PUSH
25250: LD_OWVAR 2
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 30
25261: PUSH
25262: LD_INT 29
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PPUSH
25273: CALL_OW 69
25277: ST_TO_ADDR
// if not tmp then
25278: LD_VAR 0 1
25282: NOT
25283: IFFALSE 25287
// exit ;
25285: GO 25300
// DestroyUnit ( tmp [ 1 ] ) ;
25287: LD_VAR 0 1
25291: PUSH
25292: LD_INT 1
25294: ARRAY
25295: PPUSH
25296: CALL_OW 65
// end ;
25300: PPOPN 1
25302: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25303: LD_EXP 55
25307: PUSH
25308: LD_EXP 93
25312: AND
25313: IFFALSE 25442
25315: GO 25317
25317: DISABLE
25318: LD_INT 0
25320: PPUSH
// begin uc_side := 0 ;
25321: LD_ADDR_OWVAR 20
25325: PUSH
25326: LD_INT 0
25328: ST_TO_ADDR
// uc_nation := nation_arabian ;
25329: LD_ADDR_OWVAR 21
25333: PUSH
25334: LD_INT 2
25336: ST_TO_ADDR
// hc_gallery :=  ;
25337: LD_ADDR_OWVAR 33
25341: PUSH
25342: LD_STRING 
25344: ST_TO_ADDR
// hc_name :=  ;
25345: LD_ADDR_OWVAR 26
25349: PUSH
25350: LD_STRING 
25352: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25353: LD_INT 1
25355: PPUSH
25356: LD_INT 11
25358: PPUSH
25359: LD_INT 10
25361: PPUSH
25362: CALL_OW 380
// un := CreateHuman ;
25366: LD_ADDR_VAR 0 1
25370: PUSH
25371: CALL_OW 44
25375: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25376: LD_VAR 0 1
25380: PPUSH
25381: LD_INT 1
25383: PPUSH
25384: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25388: LD_INT 35
25390: PPUSH
25391: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25395: LD_VAR 0 1
25399: PPUSH
25400: LD_INT 22
25402: PUSH
25403: LD_OWVAR 2
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PPUSH
25412: CALL_OW 69
25416: PPUSH
25417: LD_VAR 0 1
25421: PPUSH
25422: CALL_OW 74
25426: PPUSH
25427: CALL_OW 115
// until IsDead ( un ) ;
25431: LD_VAR 0 1
25435: PPUSH
25436: CALL_OW 301
25440: IFFALSE 25388
// end ;
25442: PPOPN 1
25444: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25445: LD_EXP 55
25449: PUSH
25450: LD_EXP 95
25454: AND
25455: IFFALSE 25467
25457: GO 25459
25459: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25460: LD_STRING earthquake(getX(game), 0, 32)
25462: PPUSH
25463: CALL_OW 559
25467: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25468: LD_EXP 55
25472: PUSH
25473: LD_EXP 96
25477: AND
25478: IFFALSE 25569
25480: GO 25482
25482: DISABLE
25483: LD_INT 0
25485: PPUSH
// begin enable ;
25486: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25487: LD_ADDR_VAR 0 1
25491: PUSH
25492: LD_INT 22
25494: PUSH
25495: LD_OWVAR 2
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 21
25506: PUSH
25507: LD_INT 2
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 33
25516: PUSH
25517: LD_INT 3
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: LIST
25528: PPUSH
25529: CALL_OW 69
25533: ST_TO_ADDR
// if not tmp then
25534: LD_VAR 0 1
25538: NOT
25539: IFFALSE 25543
// exit ;
25541: GO 25569
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25543: LD_VAR 0 1
25547: PUSH
25548: LD_INT 1
25550: PPUSH
25551: LD_VAR 0 1
25555: PPUSH
25556: CALL_OW 12
25560: ARRAY
25561: PPUSH
25562: LD_INT 1
25564: PPUSH
25565: CALL_OW 234
// end ;
25569: PPOPN 1
25571: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25572: LD_EXP 55
25576: PUSH
25577: LD_EXP 97
25581: AND
25582: IFFALSE 25723
25584: GO 25586
25586: DISABLE
25587: LD_INT 0
25589: PPUSH
25590: PPUSH
25591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25592: LD_ADDR_VAR 0 3
25596: PUSH
25597: LD_INT 22
25599: PUSH
25600: LD_OWVAR 2
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 25
25611: PUSH
25612: LD_INT 1
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PPUSH
25623: CALL_OW 69
25627: ST_TO_ADDR
// if not tmp then
25628: LD_VAR 0 3
25632: NOT
25633: IFFALSE 25637
// exit ;
25635: GO 25723
// un := tmp [ rand ( 1 , tmp ) ] ;
25637: LD_ADDR_VAR 0 2
25641: PUSH
25642: LD_VAR 0 3
25646: PUSH
25647: LD_INT 1
25649: PPUSH
25650: LD_VAR 0 3
25654: PPUSH
25655: CALL_OW 12
25659: ARRAY
25660: ST_TO_ADDR
// if Crawls ( un ) then
25661: LD_VAR 0 2
25665: PPUSH
25666: CALL_OW 318
25670: IFFALSE 25681
// ComWalk ( un ) ;
25672: LD_VAR 0 2
25676: PPUSH
25677: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25681: LD_VAR 0 2
25685: PPUSH
25686: LD_INT 9
25688: PPUSH
25689: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25693: LD_INT 28
25695: PPUSH
25696: LD_OWVAR 2
25700: PPUSH
25701: LD_INT 2
25703: PPUSH
25704: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25708: LD_INT 29
25710: PPUSH
25711: LD_OWVAR 2
25715: PPUSH
25716: LD_INT 2
25718: PPUSH
25719: CALL_OW 322
// end ;
25723: PPOPN 3
25725: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25726: LD_EXP 55
25730: PUSH
25731: LD_EXP 98
25735: AND
25736: IFFALSE 25847
25738: GO 25740
25740: DISABLE
25741: LD_INT 0
25743: PPUSH
25744: PPUSH
25745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25746: LD_ADDR_VAR 0 3
25750: PUSH
25751: LD_INT 22
25753: PUSH
25754: LD_OWVAR 2
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 25
25765: PUSH
25766: LD_INT 1
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PPUSH
25777: CALL_OW 69
25781: ST_TO_ADDR
// if not tmp then
25782: LD_VAR 0 3
25786: NOT
25787: IFFALSE 25791
// exit ;
25789: GO 25847
// un := tmp [ rand ( 1 , tmp ) ] ;
25791: LD_ADDR_VAR 0 2
25795: PUSH
25796: LD_VAR 0 3
25800: PUSH
25801: LD_INT 1
25803: PPUSH
25804: LD_VAR 0 3
25808: PPUSH
25809: CALL_OW 12
25813: ARRAY
25814: ST_TO_ADDR
// if Crawls ( un ) then
25815: LD_VAR 0 2
25819: PPUSH
25820: CALL_OW 318
25824: IFFALSE 25835
// ComWalk ( un ) ;
25826: LD_VAR 0 2
25830: PPUSH
25831: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25835: LD_VAR 0 2
25839: PPUSH
25840: LD_INT 8
25842: PPUSH
25843: CALL_OW 336
// end ;
25847: PPOPN 3
25849: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25850: LD_EXP 55
25854: PUSH
25855: LD_EXP 99
25859: AND
25860: IFFALSE 26004
25862: GO 25864
25864: DISABLE
25865: LD_INT 0
25867: PPUSH
25868: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25869: LD_ADDR_VAR 0 2
25873: PUSH
25874: LD_INT 22
25876: PUSH
25877: LD_OWVAR 2
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 21
25888: PUSH
25889: LD_INT 2
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 2
25898: PUSH
25899: LD_INT 34
25901: PUSH
25902: LD_INT 12
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 34
25911: PUSH
25912: LD_INT 51
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 34
25921: PUSH
25922: LD_INT 32
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: LIST
25939: PPUSH
25940: CALL_OW 69
25944: ST_TO_ADDR
// if not tmp then
25945: LD_VAR 0 2
25949: NOT
25950: IFFALSE 25954
// exit ;
25952: GO 26004
// for i in tmp do
25954: LD_ADDR_VAR 0 1
25958: PUSH
25959: LD_VAR 0 2
25963: PUSH
25964: FOR_IN
25965: IFFALSE 26002
// if GetCargo ( i , mat_artifact ) = 0 then
25967: LD_VAR 0 1
25971: PPUSH
25972: LD_INT 4
25974: PPUSH
25975: CALL_OW 289
25979: PUSH
25980: LD_INT 0
25982: EQUAL
25983: IFFALSE 26000
// SetCargo ( i , mat_siberit , 100 ) ;
25985: LD_VAR 0 1
25989: PPUSH
25990: LD_INT 3
25992: PPUSH
25993: LD_INT 100
25995: PPUSH
25996: CALL_OW 290
26000: GO 25964
26002: POP
26003: POP
// end ;
26004: PPOPN 2
26006: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26007: LD_EXP 55
26011: PUSH
26012: LD_EXP 100
26016: AND
26017: IFFALSE 26200
26019: GO 26021
26021: DISABLE
26022: LD_INT 0
26024: PPUSH
26025: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26026: LD_ADDR_VAR 0 2
26030: PUSH
26031: LD_INT 22
26033: PUSH
26034: LD_OWVAR 2
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PPUSH
26043: CALL_OW 69
26047: ST_TO_ADDR
// if not tmp then
26048: LD_VAR 0 2
26052: NOT
26053: IFFALSE 26057
// exit ;
26055: GO 26200
// for i := 1 to 2 do
26057: LD_ADDR_VAR 0 1
26061: PUSH
26062: DOUBLE
26063: LD_INT 1
26065: DEC
26066: ST_TO_ADDR
26067: LD_INT 2
26069: PUSH
26070: FOR_TO
26071: IFFALSE 26198
// begin uc_side := your_side ;
26073: LD_ADDR_OWVAR 20
26077: PUSH
26078: LD_OWVAR 2
26082: ST_TO_ADDR
// uc_nation := nation_american ;
26083: LD_ADDR_OWVAR 21
26087: PUSH
26088: LD_INT 1
26090: ST_TO_ADDR
// vc_chassis := us_morphling ;
26091: LD_ADDR_OWVAR 37
26095: PUSH
26096: LD_INT 5
26098: ST_TO_ADDR
// vc_engine := engine_siberite ;
26099: LD_ADDR_OWVAR 39
26103: PUSH
26104: LD_INT 3
26106: ST_TO_ADDR
// vc_control := control_computer ;
26107: LD_ADDR_OWVAR 38
26111: PUSH
26112: LD_INT 3
26114: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26115: LD_ADDR_OWVAR 40
26119: PUSH
26120: LD_INT 10
26122: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26123: LD_VAR 0 2
26127: PUSH
26128: LD_INT 1
26130: ARRAY
26131: PPUSH
26132: CALL_OW 310
26136: NOT
26137: IFFALSE 26184
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26139: CALL_OW 45
26143: PPUSH
26144: LD_VAR 0 2
26148: PUSH
26149: LD_INT 1
26151: ARRAY
26152: PPUSH
26153: CALL_OW 250
26157: PPUSH
26158: LD_VAR 0 2
26162: PUSH
26163: LD_INT 1
26165: ARRAY
26166: PPUSH
26167: CALL_OW 251
26171: PPUSH
26172: LD_INT 12
26174: PPUSH
26175: LD_INT 1
26177: PPUSH
26178: CALL_OW 50
26182: GO 26196
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26184: CALL_OW 45
26188: PPUSH
26189: LD_INT 1
26191: PPUSH
26192: CALL_OW 51
// end ;
26196: GO 26070
26198: POP
26199: POP
// end ;
26200: PPOPN 2
26202: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26203: LD_EXP 55
26207: PUSH
26208: LD_EXP 101
26212: AND
26213: IFFALSE 26435
26215: GO 26217
26217: DISABLE
26218: LD_INT 0
26220: PPUSH
26221: PPUSH
26222: PPUSH
26223: PPUSH
26224: PPUSH
26225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26226: LD_ADDR_VAR 0 6
26230: PUSH
26231: LD_INT 22
26233: PUSH
26234: LD_OWVAR 2
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 21
26245: PUSH
26246: LD_INT 1
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 3
26255: PUSH
26256: LD_INT 23
26258: PUSH
26259: LD_INT 0
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: LIST
26274: PPUSH
26275: CALL_OW 69
26279: ST_TO_ADDR
// if not tmp then
26280: LD_VAR 0 6
26284: NOT
26285: IFFALSE 26289
// exit ;
26287: GO 26435
// s1 := rand ( 1 , 4 ) ;
26289: LD_ADDR_VAR 0 2
26293: PUSH
26294: LD_INT 1
26296: PPUSH
26297: LD_INT 4
26299: PPUSH
26300: CALL_OW 12
26304: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26305: LD_ADDR_VAR 0 4
26309: PUSH
26310: LD_VAR 0 6
26314: PUSH
26315: LD_INT 1
26317: ARRAY
26318: PPUSH
26319: LD_VAR 0 2
26323: PPUSH
26324: CALL_OW 259
26328: ST_TO_ADDR
// if s1 = 1 then
26329: LD_VAR 0 2
26333: PUSH
26334: LD_INT 1
26336: EQUAL
26337: IFFALSE 26357
// s2 := rand ( 2 , 4 ) else
26339: LD_ADDR_VAR 0 3
26343: PUSH
26344: LD_INT 2
26346: PPUSH
26347: LD_INT 4
26349: PPUSH
26350: CALL_OW 12
26354: ST_TO_ADDR
26355: GO 26365
// s2 := 1 ;
26357: LD_ADDR_VAR 0 3
26361: PUSH
26362: LD_INT 1
26364: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26365: LD_ADDR_VAR 0 5
26369: PUSH
26370: LD_VAR 0 6
26374: PUSH
26375: LD_INT 1
26377: ARRAY
26378: PPUSH
26379: LD_VAR 0 3
26383: PPUSH
26384: CALL_OW 259
26388: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26389: LD_VAR 0 6
26393: PUSH
26394: LD_INT 1
26396: ARRAY
26397: PPUSH
26398: LD_VAR 0 2
26402: PPUSH
26403: LD_VAR 0 5
26407: PPUSH
26408: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26412: LD_VAR 0 6
26416: PUSH
26417: LD_INT 1
26419: ARRAY
26420: PPUSH
26421: LD_VAR 0 3
26425: PPUSH
26426: LD_VAR 0 4
26430: PPUSH
26431: CALL_OW 237
// end ;
26435: PPOPN 6
26437: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26438: LD_EXP 55
26442: PUSH
26443: LD_EXP 102
26447: AND
26448: IFFALSE 26527
26450: GO 26452
26452: DISABLE
26453: LD_INT 0
26455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26456: LD_ADDR_VAR 0 1
26460: PUSH
26461: LD_INT 22
26463: PUSH
26464: LD_OWVAR 2
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 30
26475: PUSH
26476: LD_INT 3
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PPUSH
26487: CALL_OW 69
26491: ST_TO_ADDR
// if not tmp then
26492: LD_VAR 0 1
26496: NOT
26497: IFFALSE 26501
// exit ;
26499: GO 26527
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26501: LD_VAR 0 1
26505: PUSH
26506: LD_INT 1
26508: PPUSH
26509: LD_VAR 0 1
26513: PPUSH
26514: CALL_OW 12
26518: ARRAY
26519: PPUSH
26520: LD_INT 1
26522: PPUSH
26523: CALL_OW 234
// end ;
26527: PPOPN 1
26529: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26530: LD_EXP 55
26534: PUSH
26535: LD_EXP 103
26539: AND
26540: IFFALSE 26652
26542: GO 26544
26544: DISABLE
26545: LD_INT 0
26547: PPUSH
26548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26549: LD_ADDR_VAR 0 2
26553: PUSH
26554: LD_INT 22
26556: PUSH
26557: LD_OWVAR 2
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 2
26568: PUSH
26569: LD_INT 30
26571: PUSH
26572: LD_INT 27
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 30
26581: PUSH
26582: LD_INT 26
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 30
26591: PUSH
26592: LD_INT 28
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PPUSH
26609: CALL_OW 69
26613: ST_TO_ADDR
// if not tmp then
26614: LD_VAR 0 2
26618: NOT
26619: IFFALSE 26623
// exit ;
26621: GO 26652
// for i in tmp do
26623: LD_ADDR_VAR 0 1
26627: PUSH
26628: LD_VAR 0 2
26632: PUSH
26633: FOR_IN
26634: IFFALSE 26650
// SetLives ( i , 1 ) ;
26636: LD_VAR 0 1
26640: PPUSH
26641: LD_INT 1
26643: PPUSH
26644: CALL_OW 234
26648: GO 26633
26650: POP
26651: POP
// end ;
26652: PPOPN 2
26654: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26655: LD_EXP 55
26659: PUSH
26660: LD_EXP 104
26664: AND
26665: IFFALSE 26939
26667: GO 26669
26669: DISABLE
26670: LD_INT 0
26672: PPUSH
26673: PPUSH
26674: PPUSH
// begin i := rand ( 1 , 7 ) ;
26675: LD_ADDR_VAR 0 1
26679: PUSH
26680: LD_INT 1
26682: PPUSH
26683: LD_INT 7
26685: PPUSH
26686: CALL_OW 12
26690: ST_TO_ADDR
// case i of 1 :
26691: LD_VAR 0 1
26695: PUSH
26696: LD_INT 1
26698: DOUBLE
26699: EQUAL
26700: IFTRUE 26704
26702: GO 26714
26704: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26705: LD_STRING earthquake(getX(game), 0, 32)
26707: PPUSH
26708: CALL_OW 559
26712: GO 26939
26714: LD_INT 2
26716: DOUBLE
26717: EQUAL
26718: IFTRUE 26722
26720: GO 26736
26722: POP
// begin ToLua ( displayStucuk(); ) ;
26723: LD_STRING displayStucuk();
26725: PPUSH
26726: CALL_OW 559
// ResetFog ;
26730: CALL_OW 335
// end ; 3 :
26734: GO 26939
26736: LD_INT 3
26738: DOUBLE
26739: EQUAL
26740: IFTRUE 26744
26742: GO 26848
26744: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26745: LD_ADDR_VAR 0 2
26749: PUSH
26750: LD_INT 22
26752: PUSH
26753: LD_OWVAR 2
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 25
26764: PUSH
26765: LD_INT 1
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PPUSH
26776: CALL_OW 69
26780: ST_TO_ADDR
// if not tmp then
26781: LD_VAR 0 2
26785: NOT
26786: IFFALSE 26790
// exit ;
26788: GO 26939
// un := tmp [ rand ( 1 , tmp ) ] ;
26790: LD_ADDR_VAR 0 3
26794: PUSH
26795: LD_VAR 0 2
26799: PUSH
26800: LD_INT 1
26802: PPUSH
26803: LD_VAR 0 2
26807: PPUSH
26808: CALL_OW 12
26812: ARRAY
26813: ST_TO_ADDR
// if Crawls ( un ) then
26814: LD_VAR 0 3
26818: PPUSH
26819: CALL_OW 318
26823: IFFALSE 26834
// ComWalk ( un ) ;
26825: LD_VAR 0 3
26829: PPUSH
26830: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26834: LD_VAR 0 3
26838: PPUSH
26839: LD_INT 8
26841: PPUSH
26842: CALL_OW 336
// end ; 4 :
26846: GO 26939
26848: LD_INT 4
26850: DOUBLE
26851: EQUAL
26852: IFTRUE 26856
26854: GO 26917
26856: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26857: LD_ADDR_VAR 0 2
26861: PUSH
26862: LD_INT 22
26864: PUSH
26865: LD_OWVAR 2
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 30
26876: PUSH
26877: LD_INT 29
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PPUSH
26888: CALL_OW 69
26892: ST_TO_ADDR
// if not tmp then
26893: LD_VAR 0 2
26897: NOT
26898: IFFALSE 26902
// exit ;
26900: GO 26939
// DestroyUnit ( tmp [ 1 ] ) ;
26902: LD_VAR 0 2
26906: PUSH
26907: LD_INT 1
26909: ARRAY
26910: PPUSH
26911: CALL_OW 65
// end ; 5 .. 7 :
26915: GO 26939
26917: LD_INT 5
26919: DOUBLE
26920: GREATEREQUAL
26921: IFFALSE 26929
26923: LD_INT 7
26925: DOUBLE
26926: LESSEQUAL
26927: IFTRUE 26931
26929: GO 26938
26931: POP
// StreamSibBomb ; end ;
26932: CALL 23189 0 0
26936: GO 26939
26938: POP
// end ;
26939: PPOPN 3
26941: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26942: LD_EXP 55
26946: PUSH
26947: LD_EXP 105
26951: AND
26952: IFFALSE 27108
26954: GO 26956
26956: DISABLE
26957: LD_INT 0
26959: PPUSH
26960: PPUSH
26961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26962: LD_ADDR_VAR 0 2
26966: PUSH
26967: LD_INT 81
26969: PUSH
26970: LD_OWVAR 2
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 2
26981: PUSH
26982: LD_INT 21
26984: PUSH
26985: LD_INT 1
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 21
26994: PUSH
26995: LD_INT 2
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: LIST
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PPUSH
27011: CALL_OW 69
27015: ST_TO_ADDR
// if not tmp then
27016: LD_VAR 0 2
27020: NOT
27021: IFFALSE 27025
// exit ;
27023: GO 27108
// p := 0 ;
27025: LD_ADDR_VAR 0 3
27029: PUSH
27030: LD_INT 0
27032: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27033: LD_INT 35
27035: PPUSH
27036: CALL_OW 67
// p := p + 1 ;
27040: LD_ADDR_VAR 0 3
27044: PUSH
27045: LD_VAR 0 3
27049: PUSH
27050: LD_INT 1
27052: PLUS
27053: ST_TO_ADDR
// for i in tmp do
27054: LD_ADDR_VAR 0 1
27058: PUSH
27059: LD_VAR 0 2
27063: PUSH
27064: FOR_IN
27065: IFFALSE 27096
// if GetLives ( i ) < 1000 then
27067: LD_VAR 0 1
27071: PPUSH
27072: CALL_OW 256
27076: PUSH
27077: LD_INT 1000
27079: LESS
27080: IFFALSE 27094
// SetLives ( i , 1000 ) ;
27082: LD_VAR 0 1
27086: PPUSH
27087: LD_INT 1000
27089: PPUSH
27090: CALL_OW 234
27094: GO 27064
27096: POP
27097: POP
// until p > 20 ;
27098: LD_VAR 0 3
27102: PUSH
27103: LD_INT 20
27105: GREATER
27106: IFFALSE 27033
// end ;
27108: PPOPN 3
27110: END
// every 0 0$1 trigger StreamModeActive and sTime do
27111: LD_EXP 55
27115: PUSH
27116: LD_EXP 106
27120: AND
27121: IFFALSE 27156
27123: GO 27125
27125: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27126: LD_INT 28
27128: PPUSH
27129: LD_OWVAR 2
27133: PPUSH
27134: LD_INT 2
27136: PPUSH
27137: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27141: LD_INT 30
27143: PPUSH
27144: LD_OWVAR 2
27148: PPUSH
27149: LD_INT 2
27151: PPUSH
27152: CALL_OW 322
// end ;
27156: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27157: LD_EXP 55
27161: PUSH
27162: LD_EXP 107
27166: AND
27167: IFFALSE 27288
27169: GO 27171
27171: DISABLE
27172: LD_INT 0
27174: PPUSH
27175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27176: LD_ADDR_VAR 0 2
27180: PUSH
27181: LD_INT 22
27183: PUSH
27184: LD_OWVAR 2
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 21
27195: PUSH
27196: LD_INT 1
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 3
27205: PUSH
27206: LD_INT 23
27208: PUSH
27209: LD_INT 0
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: LIST
27224: PPUSH
27225: CALL_OW 69
27229: ST_TO_ADDR
// if not tmp then
27230: LD_VAR 0 2
27234: NOT
27235: IFFALSE 27239
// exit ;
27237: GO 27288
// for i in tmp do
27239: LD_ADDR_VAR 0 1
27243: PUSH
27244: LD_VAR 0 2
27248: PUSH
27249: FOR_IN
27250: IFFALSE 27286
// begin if Crawls ( i ) then
27252: LD_VAR 0 1
27256: PPUSH
27257: CALL_OW 318
27261: IFFALSE 27272
// ComWalk ( i ) ;
27263: LD_VAR 0 1
27267: PPUSH
27268: CALL_OW 138
// SetClass ( i , 2 ) ;
27272: LD_VAR 0 1
27276: PPUSH
27277: LD_INT 2
27279: PPUSH
27280: CALL_OW 336
// end ;
27284: GO 27249
27286: POP
27287: POP
// end ;
27288: PPOPN 2
27290: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27291: LD_EXP 55
27295: PUSH
27296: LD_EXP 108
27300: AND
27301: IFFALSE 27582
27303: GO 27305
27305: DISABLE
27306: LD_INT 0
27308: PPUSH
27309: PPUSH
27310: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27311: LD_OWVAR 2
27315: PPUSH
27316: LD_INT 9
27318: PPUSH
27319: LD_INT 1
27321: PPUSH
27322: LD_INT 1
27324: PPUSH
27325: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27329: LD_INT 9
27331: PPUSH
27332: LD_OWVAR 2
27336: PPUSH
27337: CALL_OW 343
// uc_side := 9 ;
27341: LD_ADDR_OWVAR 20
27345: PUSH
27346: LD_INT 9
27348: ST_TO_ADDR
// uc_nation := 2 ;
27349: LD_ADDR_OWVAR 21
27353: PUSH
27354: LD_INT 2
27356: ST_TO_ADDR
// hc_name := Dark Warrior ;
27357: LD_ADDR_OWVAR 26
27361: PUSH
27362: LD_STRING Dark Warrior
27364: ST_TO_ADDR
// hc_gallery :=  ;
27365: LD_ADDR_OWVAR 33
27369: PUSH
27370: LD_STRING 
27372: ST_TO_ADDR
// hc_noskilllimit := true ;
27373: LD_ADDR_OWVAR 76
27377: PUSH
27378: LD_INT 1
27380: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27381: LD_ADDR_OWVAR 31
27385: PUSH
27386: LD_INT 30
27388: PUSH
27389: LD_INT 30
27391: PUSH
27392: LD_INT 30
27394: PUSH
27395: LD_INT 30
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: ST_TO_ADDR
// un := CreateHuman ;
27404: LD_ADDR_VAR 0 3
27408: PUSH
27409: CALL_OW 44
27413: ST_TO_ADDR
// hc_noskilllimit := false ;
27414: LD_ADDR_OWVAR 76
27418: PUSH
27419: LD_INT 0
27421: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27422: LD_VAR 0 3
27426: PPUSH
27427: LD_INT 1
27429: PPUSH
27430: CALL_OW 51
// p := 0 ;
27434: LD_ADDR_VAR 0 2
27438: PUSH
27439: LD_INT 0
27441: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27442: LD_INT 35
27444: PPUSH
27445: CALL_OW 67
// p := p + 1 ;
27449: LD_ADDR_VAR 0 2
27453: PUSH
27454: LD_VAR 0 2
27458: PUSH
27459: LD_INT 1
27461: PLUS
27462: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27463: LD_VAR 0 3
27467: PPUSH
27468: CALL_OW 256
27472: PUSH
27473: LD_INT 1000
27475: LESS
27476: IFFALSE 27490
// SetLives ( un , 1000 ) ;
27478: LD_VAR 0 3
27482: PPUSH
27483: LD_INT 1000
27485: PPUSH
27486: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27490: LD_VAR 0 3
27494: PPUSH
27495: LD_INT 81
27497: PUSH
27498: LD_OWVAR 2
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 91
27509: PUSH
27510: LD_VAR 0 3
27514: PUSH
27515: LD_INT 30
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: LIST
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PPUSH
27527: CALL_OW 69
27531: PPUSH
27532: LD_VAR 0 3
27536: PPUSH
27537: CALL_OW 74
27541: PPUSH
27542: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
27546: LD_VAR 0 2
27550: PUSH
27551: LD_INT 60
27553: GREATER
27554: PUSH
27555: LD_VAR 0 3
27559: PPUSH
27560: CALL_OW 301
27564: OR
27565: IFFALSE 27442
// if un then
27567: LD_VAR 0 3
27571: IFFALSE 27582
// RemoveUnit ( un ) ;
27573: LD_VAR 0 3
27577: PPUSH
27578: CALL_OW 64
// end ;
27582: PPOPN 3
27584: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27585: LD_INT 0
27587: PPUSH
// case cmd of 301 :
27588: LD_VAR 0 1
27592: PUSH
27593: LD_INT 301
27595: DOUBLE
27596: EQUAL
27597: IFTRUE 27601
27599: GO 27633
27601: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27602: LD_VAR 0 6
27606: PPUSH
27607: LD_VAR 0 7
27611: PPUSH
27612: LD_VAR 0 8
27616: PPUSH
27617: LD_VAR 0 4
27621: PPUSH
27622: LD_VAR 0 5
27626: PPUSH
27627: CALL 28834 0 5
27631: GO 27754
27633: LD_INT 302
27635: DOUBLE
27636: EQUAL
27637: IFTRUE 27641
27639: GO 27678
27641: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27642: LD_VAR 0 6
27646: PPUSH
27647: LD_VAR 0 7
27651: PPUSH
27652: LD_VAR 0 8
27656: PPUSH
27657: LD_VAR 0 9
27661: PPUSH
27662: LD_VAR 0 4
27666: PPUSH
27667: LD_VAR 0 5
27671: PPUSH
27672: CALL 28925 0 6
27676: GO 27754
27678: LD_INT 303
27680: DOUBLE
27681: EQUAL
27682: IFTRUE 27686
27684: GO 27723
27686: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27687: LD_VAR 0 6
27691: PPUSH
27692: LD_VAR 0 7
27696: PPUSH
27697: LD_VAR 0 8
27701: PPUSH
27702: LD_VAR 0 9
27706: PPUSH
27707: LD_VAR 0 4
27711: PPUSH
27712: LD_VAR 0 5
27716: PPUSH
27717: CALL 27759 0 6
27721: GO 27754
27723: LD_INT 304
27725: DOUBLE
27726: EQUAL
27727: IFTRUE 27731
27729: GO 27753
27731: POP
// hHackTeleport ( unit , x , y ) ; end ;
27732: LD_VAR 0 2
27736: PPUSH
27737: LD_VAR 0 4
27741: PPUSH
27742: LD_VAR 0 5
27746: PPUSH
27747: CALL 29518 0 3
27751: GO 27754
27753: POP
// end ;
27754: LD_VAR 0 12
27758: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27759: LD_INT 0
27761: PPUSH
27762: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27763: LD_VAR 0 1
27767: PUSH
27768: LD_INT 1
27770: LESS
27771: PUSH
27772: LD_VAR 0 1
27776: PUSH
27777: LD_INT 3
27779: GREATER
27780: OR
27781: PUSH
27782: LD_VAR 0 5
27786: PPUSH
27787: LD_VAR 0 6
27791: PPUSH
27792: CALL_OW 428
27796: OR
27797: IFFALSE 27801
// exit ;
27799: GO 28521
// uc_side := your_side ;
27801: LD_ADDR_OWVAR 20
27805: PUSH
27806: LD_OWVAR 2
27810: ST_TO_ADDR
// uc_nation := nation ;
27811: LD_ADDR_OWVAR 21
27815: PUSH
27816: LD_VAR 0 1
27820: ST_TO_ADDR
// bc_level = 1 ;
27821: LD_ADDR_OWVAR 43
27825: PUSH
27826: LD_INT 1
27828: ST_TO_ADDR
// case btype of 1 :
27829: LD_VAR 0 2
27833: PUSH
27834: LD_INT 1
27836: DOUBLE
27837: EQUAL
27838: IFTRUE 27842
27840: GO 27853
27842: POP
// bc_type := b_depot ; 2 :
27843: LD_ADDR_OWVAR 42
27847: PUSH
27848: LD_INT 0
27850: ST_TO_ADDR
27851: GO 28465
27853: LD_INT 2
27855: DOUBLE
27856: EQUAL
27857: IFTRUE 27861
27859: GO 27872
27861: POP
// bc_type := b_warehouse ; 3 :
27862: LD_ADDR_OWVAR 42
27866: PUSH
27867: LD_INT 1
27869: ST_TO_ADDR
27870: GO 28465
27872: LD_INT 3
27874: DOUBLE
27875: EQUAL
27876: IFTRUE 27880
27878: GO 27891
27880: POP
// bc_type := b_lab ; 4 .. 9 :
27881: LD_ADDR_OWVAR 42
27885: PUSH
27886: LD_INT 6
27888: ST_TO_ADDR
27889: GO 28465
27891: LD_INT 4
27893: DOUBLE
27894: GREATEREQUAL
27895: IFFALSE 27903
27897: LD_INT 9
27899: DOUBLE
27900: LESSEQUAL
27901: IFTRUE 27905
27903: GO 27957
27905: POP
// begin bc_type := b_lab_half ;
27906: LD_ADDR_OWVAR 42
27910: PUSH
27911: LD_INT 7
27913: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27914: LD_ADDR_OWVAR 44
27918: PUSH
27919: LD_INT 10
27921: PUSH
27922: LD_INT 11
27924: PUSH
27925: LD_INT 12
27927: PUSH
27928: LD_INT 15
27930: PUSH
27931: LD_INT 14
27933: PUSH
27934: LD_INT 13
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: PUSH
27945: LD_VAR 0 2
27949: PUSH
27950: LD_INT 3
27952: MINUS
27953: ARRAY
27954: ST_TO_ADDR
// end ; 10 .. 13 :
27955: GO 28465
27957: LD_INT 10
27959: DOUBLE
27960: GREATEREQUAL
27961: IFFALSE 27969
27963: LD_INT 13
27965: DOUBLE
27966: LESSEQUAL
27967: IFTRUE 27971
27969: GO 28048
27971: POP
// begin bc_type := b_lab_full ;
27972: LD_ADDR_OWVAR 42
27976: PUSH
27977: LD_INT 8
27979: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27980: LD_ADDR_OWVAR 44
27984: PUSH
27985: LD_INT 10
27987: PUSH
27988: LD_INT 12
27990: PUSH
27991: LD_INT 14
27993: PUSH
27994: LD_INT 13
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: PUSH
28003: LD_VAR 0 2
28007: PUSH
28008: LD_INT 9
28010: MINUS
28011: ARRAY
28012: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28013: LD_ADDR_OWVAR 45
28017: PUSH
28018: LD_INT 11
28020: PUSH
28021: LD_INT 15
28023: PUSH
28024: LD_INT 12
28026: PUSH
28027: LD_INT 15
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: PUSH
28036: LD_VAR 0 2
28040: PUSH
28041: LD_INT 9
28043: MINUS
28044: ARRAY
28045: ST_TO_ADDR
// end ; 14 :
28046: GO 28465
28048: LD_INT 14
28050: DOUBLE
28051: EQUAL
28052: IFTRUE 28056
28054: GO 28067
28056: POP
// bc_type := b_workshop ; 15 :
28057: LD_ADDR_OWVAR 42
28061: PUSH
28062: LD_INT 2
28064: ST_TO_ADDR
28065: GO 28465
28067: LD_INT 15
28069: DOUBLE
28070: EQUAL
28071: IFTRUE 28075
28073: GO 28086
28075: POP
// bc_type := b_factory ; 16 :
28076: LD_ADDR_OWVAR 42
28080: PUSH
28081: LD_INT 3
28083: ST_TO_ADDR
28084: GO 28465
28086: LD_INT 16
28088: DOUBLE
28089: EQUAL
28090: IFTRUE 28094
28092: GO 28105
28094: POP
// bc_type := b_ext_gun ; 17 :
28095: LD_ADDR_OWVAR 42
28099: PUSH
28100: LD_INT 17
28102: ST_TO_ADDR
28103: GO 28465
28105: LD_INT 17
28107: DOUBLE
28108: EQUAL
28109: IFTRUE 28113
28111: GO 28141
28113: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28114: LD_ADDR_OWVAR 42
28118: PUSH
28119: LD_INT 19
28121: PUSH
28122: LD_INT 23
28124: PUSH
28125: LD_INT 19
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: LIST
28132: PUSH
28133: LD_VAR 0 1
28137: ARRAY
28138: ST_TO_ADDR
28139: GO 28465
28141: LD_INT 18
28143: DOUBLE
28144: EQUAL
28145: IFTRUE 28149
28147: GO 28160
28149: POP
// bc_type := b_ext_radar ; 19 :
28150: LD_ADDR_OWVAR 42
28154: PUSH
28155: LD_INT 20
28157: ST_TO_ADDR
28158: GO 28465
28160: LD_INT 19
28162: DOUBLE
28163: EQUAL
28164: IFTRUE 28168
28166: GO 28179
28168: POP
// bc_type := b_ext_radio ; 20 :
28169: LD_ADDR_OWVAR 42
28173: PUSH
28174: LD_INT 22
28176: ST_TO_ADDR
28177: GO 28465
28179: LD_INT 20
28181: DOUBLE
28182: EQUAL
28183: IFTRUE 28187
28185: GO 28198
28187: POP
// bc_type := b_ext_siberium ; 21 :
28188: LD_ADDR_OWVAR 42
28192: PUSH
28193: LD_INT 21
28195: ST_TO_ADDR
28196: GO 28465
28198: LD_INT 21
28200: DOUBLE
28201: EQUAL
28202: IFTRUE 28206
28204: GO 28217
28206: POP
// bc_type := b_ext_computer ; 22 :
28207: LD_ADDR_OWVAR 42
28211: PUSH
28212: LD_INT 24
28214: ST_TO_ADDR
28215: GO 28465
28217: LD_INT 22
28219: DOUBLE
28220: EQUAL
28221: IFTRUE 28225
28223: GO 28236
28225: POP
// bc_type := b_ext_track ; 23 :
28226: LD_ADDR_OWVAR 42
28230: PUSH
28231: LD_INT 16
28233: ST_TO_ADDR
28234: GO 28465
28236: LD_INT 23
28238: DOUBLE
28239: EQUAL
28240: IFTRUE 28244
28242: GO 28255
28244: POP
// bc_type := b_ext_laser ; 24 :
28245: LD_ADDR_OWVAR 42
28249: PUSH
28250: LD_INT 25
28252: ST_TO_ADDR
28253: GO 28465
28255: LD_INT 24
28257: DOUBLE
28258: EQUAL
28259: IFTRUE 28263
28261: GO 28274
28263: POP
// bc_type := b_control_tower ; 25 :
28264: LD_ADDR_OWVAR 42
28268: PUSH
28269: LD_INT 36
28271: ST_TO_ADDR
28272: GO 28465
28274: LD_INT 25
28276: DOUBLE
28277: EQUAL
28278: IFTRUE 28282
28280: GO 28293
28282: POP
// bc_type := b_breastwork ; 26 :
28283: LD_ADDR_OWVAR 42
28287: PUSH
28288: LD_INT 31
28290: ST_TO_ADDR
28291: GO 28465
28293: LD_INT 26
28295: DOUBLE
28296: EQUAL
28297: IFTRUE 28301
28299: GO 28312
28301: POP
// bc_type := b_bunker ; 27 :
28302: LD_ADDR_OWVAR 42
28306: PUSH
28307: LD_INT 32
28309: ST_TO_ADDR
28310: GO 28465
28312: LD_INT 27
28314: DOUBLE
28315: EQUAL
28316: IFTRUE 28320
28318: GO 28331
28320: POP
// bc_type := b_turret ; 28 :
28321: LD_ADDR_OWVAR 42
28325: PUSH
28326: LD_INT 33
28328: ST_TO_ADDR
28329: GO 28465
28331: LD_INT 28
28333: DOUBLE
28334: EQUAL
28335: IFTRUE 28339
28337: GO 28350
28339: POP
// bc_type := b_armoury ; 29 :
28340: LD_ADDR_OWVAR 42
28344: PUSH
28345: LD_INT 4
28347: ST_TO_ADDR
28348: GO 28465
28350: LD_INT 29
28352: DOUBLE
28353: EQUAL
28354: IFTRUE 28358
28356: GO 28369
28358: POP
// bc_type := b_barracks ; 30 :
28359: LD_ADDR_OWVAR 42
28363: PUSH
28364: LD_INT 5
28366: ST_TO_ADDR
28367: GO 28465
28369: LD_INT 30
28371: DOUBLE
28372: EQUAL
28373: IFTRUE 28377
28375: GO 28388
28377: POP
// bc_type := b_solar_power ; 31 :
28378: LD_ADDR_OWVAR 42
28382: PUSH
28383: LD_INT 27
28385: ST_TO_ADDR
28386: GO 28465
28388: LD_INT 31
28390: DOUBLE
28391: EQUAL
28392: IFTRUE 28396
28394: GO 28407
28396: POP
// bc_type := b_oil_power ; 32 :
28397: LD_ADDR_OWVAR 42
28401: PUSH
28402: LD_INT 26
28404: ST_TO_ADDR
28405: GO 28465
28407: LD_INT 32
28409: DOUBLE
28410: EQUAL
28411: IFTRUE 28415
28413: GO 28426
28415: POP
// bc_type := b_siberite_power ; 33 :
28416: LD_ADDR_OWVAR 42
28420: PUSH
28421: LD_INT 28
28423: ST_TO_ADDR
28424: GO 28465
28426: LD_INT 33
28428: DOUBLE
28429: EQUAL
28430: IFTRUE 28434
28432: GO 28445
28434: POP
// bc_type := b_oil_mine ; 34 :
28435: LD_ADDR_OWVAR 42
28439: PUSH
28440: LD_INT 29
28442: ST_TO_ADDR
28443: GO 28465
28445: LD_INT 34
28447: DOUBLE
28448: EQUAL
28449: IFTRUE 28453
28451: GO 28464
28453: POP
// bc_type := b_siberite_mine ; end ;
28454: LD_ADDR_OWVAR 42
28458: PUSH
28459: LD_INT 30
28461: ST_TO_ADDR
28462: GO 28465
28464: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28465: LD_ADDR_VAR 0 8
28469: PUSH
28470: LD_VAR 0 5
28474: PPUSH
28475: LD_VAR 0 6
28479: PPUSH
28480: LD_VAR 0 3
28484: PPUSH
28485: CALL_OW 47
28489: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28490: LD_OWVAR 42
28494: PUSH
28495: LD_INT 32
28497: PUSH
28498: LD_INT 33
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: IN
28505: IFFALSE 28521
// PlaceWeaponTurret ( b , weapon ) ;
28507: LD_VAR 0 8
28511: PPUSH
28512: LD_VAR 0 4
28516: PPUSH
28517: CALL_OW 431
// end ;
28521: LD_VAR 0 7
28525: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28526: LD_INT 0
28528: PPUSH
28529: PPUSH
28530: PPUSH
28531: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28532: LD_ADDR_VAR 0 4
28536: PUSH
28537: LD_INT 22
28539: PUSH
28540: LD_OWVAR 2
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 2
28551: PUSH
28552: LD_INT 30
28554: PUSH
28555: LD_INT 0
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 30
28564: PUSH
28565: LD_INT 1
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: LIST
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PPUSH
28581: CALL_OW 69
28585: ST_TO_ADDR
// if not tmp then
28586: LD_VAR 0 4
28590: NOT
28591: IFFALSE 28595
// exit ;
28593: GO 28654
// for i in tmp do
28595: LD_ADDR_VAR 0 2
28599: PUSH
28600: LD_VAR 0 4
28604: PUSH
28605: FOR_IN
28606: IFFALSE 28652
// for j = 1 to 3 do
28608: LD_ADDR_VAR 0 3
28612: PUSH
28613: DOUBLE
28614: LD_INT 1
28616: DEC
28617: ST_TO_ADDR
28618: LD_INT 3
28620: PUSH
28621: FOR_TO
28622: IFFALSE 28648
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28624: LD_VAR 0 2
28628: PPUSH
28629: CALL_OW 274
28633: PPUSH
28634: LD_VAR 0 3
28638: PPUSH
28639: LD_INT 99999
28641: PPUSH
28642: CALL_OW 277
28646: GO 28621
28648: POP
28649: POP
28650: GO 28605
28652: POP
28653: POP
// end ;
28654: LD_VAR 0 1
28658: RET
// export function hHackSetLevel10 ; var i , j ; begin
28659: LD_INT 0
28661: PPUSH
28662: PPUSH
28663: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28664: LD_ADDR_VAR 0 2
28668: PUSH
28669: LD_INT 21
28671: PUSH
28672: LD_INT 1
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PPUSH
28679: CALL_OW 69
28683: PUSH
28684: FOR_IN
28685: IFFALSE 28737
// if IsSelected ( i ) then
28687: LD_VAR 0 2
28691: PPUSH
28692: CALL_OW 306
28696: IFFALSE 28735
// begin for j := 1 to 4 do
28698: LD_ADDR_VAR 0 3
28702: PUSH
28703: DOUBLE
28704: LD_INT 1
28706: DEC
28707: ST_TO_ADDR
28708: LD_INT 4
28710: PUSH
28711: FOR_TO
28712: IFFALSE 28733
// SetSkill ( i , j , 10 ) ;
28714: LD_VAR 0 2
28718: PPUSH
28719: LD_VAR 0 3
28723: PPUSH
28724: LD_INT 10
28726: PPUSH
28727: CALL_OW 237
28731: GO 28711
28733: POP
28734: POP
// end ;
28735: GO 28684
28737: POP
28738: POP
// end ;
28739: LD_VAR 0 1
28743: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28744: LD_INT 0
28746: PPUSH
28747: PPUSH
28748: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28749: LD_ADDR_VAR 0 2
28753: PUSH
28754: LD_INT 22
28756: PUSH
28757: LD_OWVAR 2
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 21
28768: PUSH
28769: LD_INT 1
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PPUSH
28780: CALL_OW 69
28784: PUSH
28785: FOR_IN
28786: IFFALSE 28827
// begin for j := 1 to 4 do
28788: LD_ADDR_VAR 0 3
28792: PUSH
28793: DOUBLE
28794: LD_INT 1
28796: DEC
28797: ST_TO_ADDR
28798: LD_INT 4
28800: PUSH
28801: FOR_TO
28802: IFFALSE 28823
// SetSkill ( i , j , 10 ) ;
28804: LD_VAR 0 2
28808: PPUSH
28809: LD_VAR 0 3
28813: PPUSH
28814: LD_INT 10
28816: PPUSH
28817: CALL_OW 237
28821: GO 28801
28823: POP
28824: POP
// end ;
28825: GO 28785
28827: POP
28828: POP
// end ;
28829: LD_VAR 0 1
28833: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28834: LD_INT 0
28836: PPUSH
// uc_side := your_side ;
28837: LD_ADDR_OWVAR 20
28841: PUSH
28842: LD_OWVAR 2
28846: ST_TO_ADDR
// uc_nation := nation ;
28847: LD_ADDR_OWVAR 21
28851: PUSH
28852: LD_VAR 0 1
28856: ST_TO_ADDR
// InitHc ;
28857: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28861: LD_INT 0
28863: PPUSH
28864: LD_VAR 0 2
28868: PPUSH
28869: LD_VAR 0 3
28873: PPUSH
28874: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28878: LD_VAR 0 4
28882: PPUSH
28883: LD_VAR 0 5
28887: PPUSH
28888: CALL_OW 428
28892: PUSH
28893: LD_INT 0
28895: EQUAL
28896: IFFALSE 28920
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28898: CALL_OW 44
28902: PPUSH
28903: LD_VAR 0 4
28907: PPUSH
28908: LD_VAR 0 5
28912: PPUSH
28913: LD_INT 1
28915: PPUSH
28916: CALL_OW 48
// end ;
28920: LD_VAR 0 6
28924: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28925: LD_INT 0
28927: PPUSH
28928: PPUSH
// uc_side := your_side ;
28929: LD_ADDR_OWVAR 20
28933: PUSH
28934: LD_OWVAR 2
28938: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28939: LD_VAR 0 1
28943: PUSH
28944: LD_INT 1
28946: PUSH
28947: LD_INT 2
28949: PUSH
28950: LD_INT 3
28952: PUSH
28953: LD_INT 4
28955: PUSH
28956: LD_INT 5
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: IN
28966: IFFALSE 28978
// uc_nation := nation_american else
28968: LD_ADDR_OWVAR 21
28972: PUSH
28973: LD_INT 1
28975: ST_TO_ADDR
28976: GO 29021
// if chassis in [ 11 , 12 , 13 , 14 ] then
28978: LD_VAR 0 1
28982: PUSH
28983: LD_INT 11
28985: PUSH
28986: LD_INT 12
28988: PUSH
28989: LD_INT 13
28991: PUSH
28992: LD_INT 14
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: IN
29001: IFFALSE 29013
// uc_nation := nation_arabian else
29003: LD_ADDR_OWVAR 21
29007: PUSH
29008: LD_INT 2
29010: ST_TO_ADDR
29011: GO 29021
// uc_nation := nation_russian ;
29013: LD_ADDR_OWVAR 21
29017: PUSH
29018: LD_INT 3
29020: ST_TO_ADDR
// vc_chassis := chassis ;
29021: LD_ADDR_OWVAR 37
29025: PUSH
29026: LD_VAR 0 1
29030: ST_TO_ADDR
// vc_engine := engine ;
29031: LD_ADDR_OWVAR 39
29035: PUSH
29036: LD_VAR 0 2
29040: ST_TO_ADDR
// vc_control := control ;
29041: LD_ADDR_OWVAR 38
29045: PUSH
29046: LD_VAR 0 3
29050: ST_TO_ADDR
// vc_weapon := weapon ;
29051: LD_ADDR_OWVAR 40
29055: PUSH
29056: LD_VAR 0 4
29060: ST_TO_ADDR
// un := CreateVehicle ;
29061: LD_ADDR_VAR 0 8
29065: PUSH
29066: CALL_OW 45
29070: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29071: LD_VAR 0 8
29075: PPUSH
29076: LD_INT 0
29078: PPUSH
29079: LD_INT 5
29081: PPUSH
29082: CALL_OW 12
29086: PPUSH
29087: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29091: LD_VAR 0 8
29095: PPUSH
29096: LD_VAR 0 5
29100: PPUSH
29101: LD_VAR 0 6
29105: PPUSH
29106: LD_INT 1
29108: PPUSH
29109: CALL_OW 48
// end ;
29113: LD_VAR 0 7
29117: RET
// export hInvincible ; every 1 do
29118: GO 29120
29120: DISABLE
// hInvincible := [ ] ;
29121: LD_ADDR_EXP 109
29125: PUSH
29126: EMPTY
29127: ST_TO_ADDR
29128: END
// every 10 do var i ;
29129: GO 29131
29131: DISABLE
29132: LD_INT 0
29134: PPUSH
// begin enable ;
29135: ENABLE
// if not hInvincible then
29136: LD_EXP 109
29140: NOT
29141: IFFALSE 29145
// exit ;
29143: GO 29189
// for i in hInvincible do
29145: LD_ADDR_VAR 0 1
29149: PUSH
29150: LD_EXP 109
29154: PUSH
29155: FOR_IN
29156: IFFALSE 29187
// if GetLives ( i ) < 1000 then
29158: LD_VAR 0 1
29162: PPUSH
29163: CALL_OW 256
29167: PUSH
29168: LD_INT 1000
29170: LESS
29171: IFFALSE 29185
// SetLives ( i , 1000 ) ;
29173: LD_VAR 0 1
29177: PPUSH
29178: LD_INT 1000
29180: PPUSH
29181: CALL_OW 234
29185: GO 29155
29187: POP
29188: POP
// end ;
29189: PPOPN 1
29191: END
// export function hHackInvincible ; var i ; begin
29192: LD_INT 0
29194: PPUSH
29195: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29196: LD_ADDR_VAR 0 2
29200: PUSH
29201: LD_INT 2
29203: PUSH
29204: LD_INT 21
29206: PUSH
29207: LD_INT 1
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 21
29216: PUSH
29217: LD_INT 2
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: LIST
29228: PPUSH
29229: CALL_OW 69
29233: PUSH
29234: FOR_IN
29235: IFFALSE 29296
// if IsSelected ( i ) then
29237: LD_VAR 0 2
29241: PPUSH
29242: CALL_OW 306
29246: IFFALSE 29294
// begin if i in hInvincible then
29248: LD_VAR 0 2
29252: PUSH
29253: LD_EXP 109
29257: IN
29258: IFFALSE 29278
// hInvincible := hInvincible diff i else
29260: LD_ADDR_EXP 109
29264: PUSH
29265: LD_EXP 109
29269: PUSH
29270: LD_VAR 0 2
29274: DIFF
29275: ST_TO_ADDR
29276: GO 29294
// hInvincible := hInvincible union i ;
29278: LD_ADDR_EXP 109
29282: PUSH
29283: LD_EXP 109
29287: PUSH
29288: LD_VAR 0 2
29292: UNION
29293: ST_TO_ADDR
// end ;
29294: GO 29234
29296: POP
29297: POP
// end ;
29298: LD_VAR 0 1
29302: RET
// export function hHackInvisible ; var i , j ; begin
29303: LD_INT 0
29305: PPUSH
29306: PPUSH
29307: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29308: LD_ADDR_VAR 0 2
29312: PUSH
29313: LD_INT 21
29315: PUSH
29316: LD_INT 1
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PPUSH
29323: CALL_OW 69
29327: PUSH
29328: FOR_IN
29329: IFFALSE 29353
// if IsSelected ( i ) then
29331: LD_VAR 0 2
29335: PPUSH
29336: CALL_OW 306
29340: IFFALSE 29351
// ComForceInvisible ( i ) ;
29342: LD_VAR 0 2
29346: PPUSH
29347: CALL_OW 496
29351: GO 29328
29353: POP
29354: POP
// end ;
29355: LD_VAR 0 1
29359: RET
// export function hHackChangeYourSide ; begin
29360: LD_INT 0
29362: PPUSH
// if your_side = 8 then
29363: LD_OWVAR 2
29367: PUSH
29368: LD_INT 8
29370: EQUAL
29371: IFFALSE 29383
// your_side := 0 else
29373: LD_ADDR_OWVAR 2
29377: PUSH
29378: LD_INT 0
29380: ST_TO_ADDR
29381: GO 29397
// your_side := your_side + 1 ;
29383: LD_ADDR_OWVAR 2
29387: PUSH
29388: LD_OWVAR 2
29392: PUSH
29393: LD_INT 1
29395: PLUS
29396: ST_TO_ADDR
// end ;
29397: LD_VAR 0 1
29401: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29402: LD_INT 0
29404: PPUSH
29405: PPUSH
29406: PPUSH
// for i in all_units do
29407: LD_ADDR_VAR 0 2
29411: PUSH
29412: LD_OWVAR 3
29416: PUSH
29417: FOR_IN
29418: IFFALSE 29496
// if IsSelected ( i ) then
29420: LD_VAR 0 2
29424: PPUSH
29425: CALL_OW 306
29429: IFFALSE 29494
// begin j := GetSide ( i ) ;
29431: LD_ADDR_VAR 0 3
29435: PUSH
29436: LD_VAR 0 2
29440: PPUSH
29441: CALL_OW 255
29445: ST_TO_ADDR
// if j = 8 then
29446: LD_VAR 0 3
29450: PUSH
29451: LD_INT 8
29453: EQUAL
29454: IFFALSE 29466
// j := 0 else
29456: LD_ADDR_VAR 0 3
29460: PUSH
29461: LD_INT 0
29463: ST_TO_ADDR
29464: GO 29480
// j := j + 1 ;
29466: LD_ADDR_VAR 0 3
29470: PUSH
29471: LD_VAR 0 3
29475: PUSH
29476: LD_INT 1
29478: PLUS
29479: ST_TO_ADDR
// SetSide ( i , j ) ;
29480: LD_VAR 0 2
29484: PPUSH
29485: LD_VAR 0 3
29489: PPUSH
29490: CALL_OW 235
// end ;
29494: GO 29417
29496: POP
29497: POP
// end ;
29498: LD_VAR 0 1
29502: RET
// export function hHackFog ; begin
29503: LD_INT 0
29505: PPUSH
// FogOff ( true ) ;
29506: LD_INT 1
29508: PPUSH
29509: CALL_OW 344
// end ;
29513: LD_VAR 0 1
29517: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29518: LD_INT 0
29520: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29521: LD_VAR 0 1
29525: PPUSH
29526: LD_VAR 0 2
29530: PPUSH
29531: LD_VAR 0 3
29535: PPUSH
29536: LD_INT 1
29538: PPUSH
29539: LD_INT 1
29541: PPUSH
29542: CALL_OW 483
// CenterOnXY ( x , y ) ;
29546: LD_VAR 0 2
29550: PPUSH
29551: LD_VAR 0 3
29555: PPUSH
29556: CALL_OW 84
// end ; end_of_file
29560: LD_VAR 0 4
29564: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
29565: LD_INT 0
29567: PPUSH
29568: PPUSH
29569: PPUSH
29570: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
29571: LD_VAR 0 1
29575: PPUSH
29576: CALL_OW 264
29580: PUSH
29581: LD_EXP 40
29585: EQUAL
29586: IFFALSE 29658
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
29588: LD_INT 68
29590: PPUSH
29591: LD_VAR 0 1
29595: PPUSH
29596: CALL_OW 255
29600: PPUSH
29601: CALL_OW 321
29605: PUSH
29606: LD_INT 2
29608: EQUAL
29609: IFFALSE 29621
// eff := 70 else
29611: LD_ADDR_VAR 0 4
29615: PUSH
29616: LD_INT 70
29618: ST_TO_ADDR
29619: GO 29629
// eff := 30 ;
29621: LD_ADDR_VAR 0 4
29625: PUSH
29626: LD_INT 30
29628: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
29629: LD_VAR 0 1
29633: PPUSH
29634: CALL_OW 250
29638: PPUSH
29639: LD_VAR 0 1
29643: PPUSH
29644: CALL_OW 251
29648: PPUSH
29649: LD_VAR 0 4
29653: PPUSH
29654: CALL_OW 495
// end ; end ;
29658: LD_VAR 0 2
29662: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
29663: LD_INT 0
29665: PPUSH
// end ;
29666: LD_VAR 0 4
29670: RET
// export function SOS_Command ( cmd ) ; begin
29671: LD_INT 0
29673: PPUSH
// end ;
29674: LD_VAR 0 2
29678: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
29679: LD_INT 0
29681: PPUSH
// if cmd = 121 then
29682: LD_VAR 0 1
29686: PUSH
29687: LD_INT 121
29689: EQUAL
29690: IFFALSE 29692
// end ;
29692: LD_VAR 0 6
29696: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
29697: LD_INT 0
29699: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
29700: LD_VAR 0 1
29704: PUSH
29705: LD_INT 250
29707: EQUAL
29708: PUSH
29709: LD_VAR 0 2
29713: PPUSH
29714: CALL_OW 264
29718: PUSH
29719: LD_EXP 43
29723: EQUAL
29724: AND
29725: IFFALSE 29746
// MinerPlaceMine ( unit , x , y ) ;
29727: LD_VAR 0 2
29731: PPUSH
29732: LD_VAR 0 4
29736: PPUSH
29737: LD_VAR 0 5
29741: PPUSH
29742: CALL 32095 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
29746: LD_VAR 0 1
29750: PUSH
29751: LD_INT 251
29753: EQUAL
29754: PUSH
29755: LD_VAR 0 2
29759: PPUSH
29760: CALL_OW 264
29764: PUSH
29765: LD_EXP 43
29769: EQUAL
29770: AND
29771: IFFALSE 29792
// MinerDetonateMine ( unit , x , y ) ;
29773: LD_VAR 0 2
29777: PPUSH
29778: LD_VAR 0 4
29782: PPUSH
29783: LD_VAR 0 5
29787: PPUSH
29788: CALL 32372 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
29792: LD_VAR 0 1
29796: PUSH
29797: LD_INT 252
29799: EQUAL
29800: PUSH
29801: LD_VAR 0 2
29805: PPUSH
29806: CALL_OW 264
29810: PUSH
29811: LD_EXP 43
29815: EQUAL
29816: AND
29817: IFFALSE 29838
// MinerCreateMinefield ( unit , x , y ) ;
29819: LD_VAR 0 2
29823: PPUSH
29824: LD_VAR 0 4
29828: PPUSH
29829: LD_VAR 0 5
29833: PPUSH
29834: CALL 32789 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
29838: LD_VAR 0 1
29842: PUSH
29843: LD_INT 253
29845: EQUAL
29846: PUSH
29847: LD_VAR 0 2
29851: PPUSH
29852: CALL_OW 257
29856: PUSH
29857: LD_INT 5
29859: EQUAL
29860: AND
29861: IFFALSE 29882
// ComBinocular ( unit , x , y ) ;
29863: LD_VAR 0 2
29867: PPUSH
29868: LD_VAR 0 4
29872: PPUSH
29873: LD_VAR 0 5
29877: PPUSH
29878: CALL 33160 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
29882: LD_VAR 0 1
29886: PUSH
29887: LD_INT 254
29889: EQUAL
29890: PUSH
29891: LD_VAR 0 2
29895: PPUSH
29896: CALL_OW 264
29900: PUSH
29901: LD_EXP 38
29905: EQUAL
29906: AND
29907: PUSH
29908: LD_VAR 0 3
29912: PPUSH
29913: CALL_OW 263
29917: PUSH
29918: LD_INT 3
29920: EQUAL
29921: AND
29922: IFFALSE 29938
// HackDestroyVehicle ( unit , selectedUnit ) ;
29924: LD_VAR 0 2
29928: PPUSH
29929: LD_VAR 0 3
29933: PPUSH
29934: CALL 31455 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
29938: LD_VAR 0 1
29942: PUSH
29943: LD_INT 255
29945: EQUAL
29946: PUSH
29947: LD_VAR 0 2
29951: PPUSH
29952: CALL_OW 264
29956: PUSH
29957: LD_INT 14
29959: PUSH
29960: LD_INT 53
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: IN
29967: AND
29968: PUSH
29969: LD_VAR 0 4
29973: PPUSH
29974: LD_VAR 0 5
29978: PPUSH
29979: CALL_OW 488
29983: AND
29984: IFFALSE 30008
// CutTreeXYR ( unit , x , y , 12 ) ;
29986: LD_VAR 0 2
29990: PPUSH
29991: LD_VAR 0 4
29995: PPUSH
29996: LD_VAR 0 5
30000: PPUSH
30001: LD_INT 12
30003: PPUSH
30004: CALL 30021 0 4
// end ;
30008: LD_VAR 0 6
30012: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
30013: LD_INT 0
30015: PPUSH
// end ;
30016: LD_VAR 0 4
30020: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
30021: LD_INT 0
30023: PPUSH
30024: PPUSH
30025: PPUSH
30026: PPUSH
30027: PPUSH
30028: PPUSH
30029: PPUSH
30030: PPUSH
30031: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
30032: LD_VAR 0 1
30036: NOT
30037: PUSH
30038: LD_VAR 0 2
30042: PPUSH
30043: LD_VAR 0 3
30047: PPUSH
30048: CALL_OW 488
30052: NOT
30053: OR
30054: PUSH
30055: LD_VAR 0 4
30059: NOT
30060: OR
30061: IFFALSE 30065
// exit ;
30063: GO 30405
// list := [ ] ;
30065: LD_ADDR_VAR 0 13
30069: PUSH
30070: EMPTY
30071: ST_TO_ADDR
// if x - r < 0 then
30072: LD_VAR 0 2
30076: PUSH
30077: LD_VAR 0 4
30081: MINUS
30082: PUSH
30083: LD_INT 0
30085: LESS
30086: IFFALSE 30098
// min_x := 0 else
30088: LD_ADDR_VAR 0 7
30092: PUSH
30093: LD_INT 0
30095: ST_TO_ADDR
30096: GO 30114
// min_x := x - r ;
30098: LD_ADDR_VAR 0 7
30102: PUSH
30103: LD_VAR 0 2
30107: PUSH
30108: LD_VAR 0 4
30112: MINUS
30113: ST_TO_ADDR
// if y - r < 0 then
30114: LD_VAR 0 3
30118: PUSH
30119: LD_VAR 0 4
30123: MINUS
30124: PUSH
30125: LD_INT 0
30127: LESS
30128: IFFALSE 30140
// min_y := 0 else
30130: LD_ADDR_VAR 0 8
30134: PUSH
30135: LD_INT 0
30137: ST_TO_ADDR
30138: GO 30156
// min_y := y - r ;
30140: LD_ADDR_VAR 0 8
30144: PUSH
30145: LD_VAR 0 3
30149: PUSH
30150: LD_VAR 0 4
30154: MINUS
30155: ST_TO_ADDR
// max_x := x + r ;
30156: LD_ADDR_VAR 0 9
30160: PUSH
30161: LD_VAR 0 2
30165: PUSH
30166: LD_VAR 0 4
30170: PLUS
30171: ST_TO_ADDR
// max_y := y + r ;
30172: LD_ADDR_VAR 0 10
30176: PUSH
30177: LD_VAR 0 3
30181: PUSH
30182: LD_VAR 0 4
30186: PLUS
30187: ST_TO_ADDR
// for _x = min_x to max_x do
30188: LD_ADDR_VAR 0 11
30192: PUSH
30193: DOUBLE
30194: LD_VAR 0 7
30198: DEC
30199: ST_TO_ADDR
30200: LD_VAR 0 9
30204: PUSH
30205: FOR_TO
30206: IFFALSE 30323
// for _y = min_y to max_y do
30208: LD_ADDR_VAR 0 12
30212: PUSH
30213: DOUBLE
30214: LD_VAR 0 8
30218: DEC
30219: ST_TO_ADDR
30220: LD_VAR 0 10
30224: PUSH
30225: FOR_TO
30226: IFFALSE 30319
// begin if not ValidHex ( _x , _y ) then
30228: LD_VAR 0 11
30232: PPUSH
30233: LD_VAR 0 12
30237: PPUSH
30238: CALL_OW 488
30242: NOT
30243: IFFALSE 30247
// continue ;
30245: GO 30225
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
30247: LD_VAR 0 11
30251: PPUSH
30252: LD_VAR 0 12
30256: PPUSH
30257: CALL_OW 351
30261: PUSH
30262: LD_VAR 0 11
30266: PPUSH
30267: LD_VAR 0 12
30271: PPUSH
30272: CALL_OW 554
30276: AND
30277: IFFALSE 30317
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
30279: LD_ADDR_VAR 0 13
30283: PUSH
30284: LD_VAR 0 13
30288: PPUSH
30289: LD_VAR 0 13
30293: PUSH
30294: LD_INT 1
30296: PLUS
30297: PPUSH
30298: LD_VAR 0 11
30302: PUSH
30303: LD_VAR 0 12
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PPUSH
30312: CALL_OW 2
30316: ST_TO_ADDR
// end ;
30317: GO 30225
30319: POP
30320: POP
30321: GO 30205
30323: POP
30324: POP
// if not list then
30325: LD_VAR 0 13
30329: NOT
30330: IFFALSE 30334
// exit ;
30332: GO 30405
// for i in list do
30334: LD_ADDR_VAR 0 6
30338: PUSH
30339: LD_VAR 0 13
30343: PUSH
30344: FOR_IN
30345: IFFALSE 30403
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
30347: LD_VAR 0 1
30351: PPUSH
30352: LD_STRING M
30354: PUSH
30355: LD_VAR 0 6
30359: PUSH
30360: LD_INT 1
30362: ARRAY
30363: PUSH
30364: LD_VAR 0 6
30368: PUSH
30369: LD_INT 2
30371: ARRAY
30372: PUSH
30373: LD_INT 0
30375: PUSH
30376: LD_INT 0
30378: PUSH
30379: LD_INT 0
30381: PUSH
30382: LD_INT 0
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: PUSH
30394: EMPTY
30395: LIST
30396: PPUSH
30397: CALL_OW 447
30401: GO 30344
30403: POP
30404: POP
// end ;
30405: LD_VAR 0 5
30409: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
30410: LD_EXP 112
30414: NOT
30415: IFFALSE 30465
30417: GO 30419
30419: DISABLE
// begin initHack := true ;
30420: LD_ADDR_EXP 112
30424: PUSH
30425: LD_INT 1
30427: ST_TO_ADDR
// hackTanks := [ ] ;
30428: LD_ADDR_EXP 113
30432: PUSH
30433: EMPTY
30434: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
30435: LD_ADDR_EXP 114
30439: PUSH
30440: EMPTY
30441: ST_TO_ADDR
// hackLimit := 3 ;
30442: LD_ADDR_EXP 115
30446: PUSH
30447: LD_INT 3
30449: ST_TO_ADDR
// hackDist := 12 ;
30450: LD_ADDR_EXP 116
30454: PUSH
30455: LD_INT 12
30457: ST_TO_ADDR
// hackCounter := [ ] ;
30458: LD_ADDR_EXP 117
30462: PUSH
30463: EMPTY
30464: ST_TO_ADDR
// end ;
30465: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
30466: LD_EXP 112
30470: PUSH
30471: LD_INT 34
30473: PUSH
30474: LD_EXP 38
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PPUSH
30483: CALL_OW 69
30487: AND
30488: IFFALSE 30743
30490: GO 30492
30492: DISABLE
30493: LD_INT 0
30495: PPUSH
30496: PPUSH
// begin enable ;
30497: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
30498: LD_ADDR_VAR 0 1
30502: PUSH
30503: LD_INT 34
30505: PUSH
30506: LD_EXP 38
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PPUSH
30515: CALL_OW 69
30519: PUSH
30520: FOR_IN
30521: IFFALSE 30741
// begin if not i in hackTanks then
30523: LD_VAR 0 1
30527: PUSH
30528: LD_EXP 113
30532: IN
30533: NOT
30534: IFFALSE 30617
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
30536: LD_ADDR_EXP 113
30540: PUSH
30541: LD_EXP 113
30545: PPUSH
30546: LD_EXP 113
30550: PUSH
30551: LD_INT 1
30553: PLUS
30554: PPUSH
30555: LD_VAR 0 1
30559: PPUSH
30560: CALL_OW 1
30564: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
30565: LD_ADDR_EXP 114
30569: PUSH
30570: LD_EXP 114
30574: PPUSH
30575: LD_EXP 114
30579: PUSH
30580: LD_INT 1
30582: PLUS
30583: PPUSH
30584: EMPTY
30585: PPUSH
30586: CALL_OW 1
30590: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
30591: LD_ADDR_EXP 117
30595: PUSH
30596: LD_EXP 117
30600: PPUSH
30601: LD_EXP 117
30605: PUSH
30606: LD_INT 1
30608: PLUS
30609: PPUSH
30610: EMPTY
30611: PPUSH
30612: CALL_OW 1
30616: ST_TO_ADDR
// end ; if not IsOk ( i ) then
30617: LD_VAR 0 1
30621: PPUSH
30622: CALL_OW 302
30626: NOT
30627: IFFALSE 30640
// begin HackUnlinkAll ( i ) ;
30629: LD_VAR 0 1
30633: PPUSH
30634: CALL 30746 0 1
// continue ;
30638: GO 30520
// end ; HackCheckCapturedStatus ( i ) ;
30640: LD_VAR 0 1
30644: PPUSH
30645: CALL 31189 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
30649: LD_ADDR_VAR 0 2
30653: PUSH
30654: LD_INT 81
30656: PUSH
30657: LD_VAR 0 1
30661: PPUSH
30662: CALL_OW 255
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 33
30673: PUSH
30674: LD_INT 3
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 91
30683: PUSH
30684: LD_VAR 0 1
30688: PUSH
30689: LD_EXP 116
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 50
30701: PUSH
30702: EMPTY
30703: LIST
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: PPUSH
30711: CALL_OW 69
30715: ST_TO_ADDR
// if not tmp then
30716: LD_VAR 0 2
30720: NOT
30721: IFFALSE 30725
// continue ;
30723: GO 30520
// HackLink ( i , tmp ) ;
30725: LD_VAR 0 1
30729: PPUSH
30730: LD_VAR 0 2
30734: PPUSH
30735: CALL 30882 0 2
// end ;
30739: GO 30520
30741: POP
30742: POP
// end ;
30743: PPOPN 2
30745: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30746: LD_INT 0
30748: PPUSH
30749: PPUSH
30750: PPUSH
// if not hack in hackTanks then
30751: LD_VAR 0 1
30755: PUSH
30756: LD_EXP 113
30760: IN
30761: NOT
30762: IFFALSE 30766
// exit ;
30764: GO 30877
// index := GetElementIndex ( hackTanks , hack ) ;
30766: LD_ADDR_VAR 0 4
30770: PUSH
30771: LD_EXP 113
30775: PPUSH
30776: LD_VAR 0 1
30780: PPUSH
30781: CALL 38351 0 2
30785: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30786: LD_EXP 114
30790: PUSH
30791: LD_VAR 0 4
30795: ARRAY
30796: IFFALSE 30877
// begin for i in hackTanksCaptured [ index ] do
30798: LD_ADDR_VAR 0 3
30802: PUSH
30803: LD_EXP 114
30807: PUSH
30808: LD_VAR 0 4
30812: ARRAY
30813: PUSH
30814: FOR_IN
30815: IFFALSE 30841
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30817: LD_VAR 0 3
30821: PUSH
30822: LD_INT 1
30824: ARRAY
30825: PPUSH
30826: LD_VAR 0 3
30830: PUSH
30831: LD_INT 2
30833: ARRAY
30834: PPUSH
30835: CALL_OW 235
30839: GO 30814
30841: POP
30842: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30843: LD_ADDR_EXP 114
30847: PUSH
30848: LD_EXP 114
30852: PPUSH
30853: LD_VAR 0 4
30857: PPUSH
30858: EMPTY
30859: PPUSH
30860: CALL_OW 1
30864: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30865: LD_VAR 0 1
30869: PPUSH
30870: LD_INT 0
30872: PPUSH
30873: CALL_OW 505
// end ; end ;
30877: LD_VAR 0 2
30881: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30882: LD_INT 0
30884: PPUSH
30885: PPUSH
30886: PPUSH
// if not hack in hackTanks or not vehicles then
30887: LD_VAR 0 1
30891: PUSH
30892: LD_EXP 113
30896: IN
30897: NOT
30898: PUSH
30899: LD_VAR 0 2
30903: NOT
30904: OR
30905: IFFALSE 30909
// exit ;
30907: GO 31184
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30909: LD_ADDR_VAR 0 2
30913: PUSH
30914: LD_VAR 0 1
30918: PPUSH
30919: LD_VAR 0 2
30923: PPUSH
30924: LD_INT 1
30926: PPUSH
30927: LD_INT 1
30929: PPUSH
30930: CALL 39001 0 4
30934: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30935: LD_ADDR_VAR 0 5
30939: PUSH
30940: LD_EXP 113
30944: PPUSH
30945: LD_VAR 0 1
30949: PPUSH
30950: CALL 38351 0 2
30954: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30955: LD_EXP 114
30959: PUSH
30960: LD_VAR 0 5
30964: ARRAY
30965: PUSH
30966: LD_EXP 115
30970: LESS
30971: IFFALSE 31160
// begin for i := 1 to vehicles do
30973: LD_ADDR_VAR 0 4
30977: PUSH
30978: DOUBLE
30979: LD_INT 1
30981: DEC
30982: ST_TO_ADDR
30983: LD_VAR 0 2
30987: PUSH
30988: FOR_TO
30989: IFFALSE 31158
// begin if hackTanksCaptured [ index ] = hackLimit then
30991: LD_EXP 114
30995: PUSH
30996: LD_VAR 0 5
31000: ARRAY
31001: PUSH
31002: LD_EXP 115
31006: EQUAL
31007: IFFALSE 31011
// break ;
31009: GO 31158
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
31011: LD_ADDR_EXP 117
31015: PUSH
31016: LD_EXP 117
31020: PPUSH
31021: LD_VAR 0 5
31025: PPUSH
31026: LD_EXP 117
31030: PUSH
31031: LD_VAR 0 5
31035: ARRAY
31036: PUSH
31037: LD_INT 1
31039: PLUS
31040: PPUSH
31041: CALL_OW 1
31045: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
31046: LD_ADDR_EXP 114
31050: PUSH
31051: LD_EXP 114
31055: PPUSH
31056: LD_VAR 0 5
31060: PUSH
31061: LD_EXP 114
31065: PUSH
31066: LD_VAR 0 5
31070: ARRAY
31071: PUSH
31072: LD_INT 1
31074: PLUS
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PPUSH
31080: LD_VAR 0 2
31084: PUSH
31085: LD_VAR 0 4
31089: ARRAY
31090: PUSH
31091: LD_VAR 0 2
31095: PUSH
31096: LD_VAR 0 4
31100: ARRAY
31101: PPUSH
31102: CALL_OW 255
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PPUSH
31111: CALL 38566 0 3
31115: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
31116: LD_VAR 0 2
31120: PUSH
31121: LD_VAR 0 4
31125: ARRAY
31126: PPUSH
31127: LD_VAR 0 1
31131: PPUSH
31132: CALL_OW 255
31136: PPUSH
31137: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
31141: LD_VAR 0 2
31145: PUSH
31146: LD_VAR 0 4
31150: ARRAY
31151: PPUSH
31152: CALL_OW 141
// end ;
31156: GO 30988
31158: POP
31159: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31160: LD_VAR 0 1
31164: PPUSH
31165: LD_EXP 114
31169: PUSH
31170: LD_VAR 0 5
31174: ARRAY
31175: PUSH
31176: LD_INT 0
31178: PLUS
31179: PPUSH
31180: CALL_OW 505
// end ;
31184: LD_VAR 0 3
31188: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
31189: LD_INT 0
31191: PPUSH
31192: PPUSH
31193: PPUSH
31194: PPUSH
// if not hack in hackTanks then
31195: LD_VAR 0 1
31199: PUSH
31200: LD_EXP 113
31204: IN
31205: NOT
31206: IFFALSE 31210
// exit ;
31208: GO 31450
// index := GetElementIndex ( hackTanks , hack ) ;
31210: LD_ADDR_VAR 0 4
31214: PUSH
31215: LD_EXP 113
31219: PPUSH
31220: LD_VAR 0 1
31224: PPUSH
31225: CALL 38351 0 2
31229: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
31230: LD_ADDR_VAR 0 3
31234: PUSH
31235: DOUBLE
31236: LD_EXP 114
31240: PUSH
31241: LD_VAR 0 4
31245: ARRAY
31246: INC
31247: ST_TO_ADDR
31248: LD_INT 1
31250: PUSH
31251: FOR_DOWNTO
31252: IFFALSE 31424
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
31254: LD_ADDR_VAR 0 5
31258: PUSH
31259: LD_EXP 114
31263: PUSH
31264: LD_VAR 0 4
31268: ARRAY
31269: PUSH
31270: LD_VAR 0 3
31274: ARRAY
31275: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
31276: LD_VAR 0 5
31280: PUSH
31281: LD_INT 1
31283: ARRAY
31284: PPUSH
31285: CALL_OW 302
31289: NOT
31290: PUSH
31291: LD_VAR 0 5
31295: PUSH
31296: LD_INT 1
31298: ARRAY
31299: PPUSH
31300: CALL_OW 255
31304: PUSH
31305: LD_VAR 0 1
31309: PPUSH
31310: CALL_OW 255
31314: NONEQUAL
31315: OR
31316: IFFALSE 31422
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
31318: LD_VAR 0 5
31322: PUSH
31323: LD_INT 1
31325: ARRAY
31326: PPUSH
31327: CALL_OW 305
31331: PUSH
31332: LD_VAR 0 5
31336: PUSH
31337: LD_INT 1
31339: ARRAY
31340: PPUSH
31341: CALL_OW 255
31345: PUSH
31346: LD_VAR 0 1
31350: PPUSH
31351: CALL_OW 255
31355: EQUAL
31356: AND
31357: IFFALSE 31381
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
31359: LD_VAR 0 5
31363: PUSH
31364: LD_INT 1
31366: ARRAY
31367: PPUSH
31368: LD_VAR 0 5
31372: PUSH
31373: LD_INT 2
31375: ARRAY
31376: PPUSH
31377: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
31381: LD_ADDR_EXP 114
31385: PUSH
31386: LD_EXP 114
31390: PPUSH
31391: LD_VAR 0 4
31395: PPUSH
31396: LD_EXP 114
31400: PUSH
31401: LD_VAR 0 4
31405: ARRAY
31406: PPUSH
31407: LD_VAR 0 3
31411: PPUSH
31412: CALL_OW 3
31416: PPUSH
31417: CALL_OW 1
31421: ST_TO_ADDR
// end ; end ;
31422: GO 31251
31424: POP
31425: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31426: LD_VAR 0 1
31430: PPUSH
31431: LD_EXP 114
31435: PUSH
31436: LD_VAR 0 4
31440: ARRAY
31441: PUSH
31442: LD_INT 0
31444: PLUS
31445: PPUSH
31446: CALL_OW 505
// end ;
31450: LD_VAR 0 2
31454: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
31455: LD_INT 0
31457: PPUSH
31458: PPUSH
31459: PPUSH
31460: PPUSH
// if not hack in hackTanks then
31461: LD_VAR 0 1
31465: PUSH
31466: LD_EXP 113
31470: IN
31471: NOT
31472: IFFALSE 31476
// exit ;
31474: GO 31561
// index := GetElementIndex ( hackTanks , hack ) ;
31476: LD_ADDR_VAR 0 5
31480: PUSH
31481: LD_EXP 113
31485: PPUSH
31486: LD_VAR 0 1
31490: PPUSH
31491: CALL 38351 0 2
31495: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
31496: LD_ADDR_VAR 0 4
31500: PUSH
31501: DOUBLE
31502: LD_INT 1
31504: DEC
31505: ST_TO_ADDR
31506: LD_EXP 114
31510: PUSH
31511: LD_VAR 0 5
31515: ARRAY
31516: PUSH
31517: FOR_TO
31518: IFFALSE 31559
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
31520: LD_EXP 114
31524: PUSH
31525: LD_VAR 0 5
31529: ARRAY
31530: PUSH
31531: LD_VAR 0 4
31535: ARRAY
31536: PUSH
31537: LD_INT 1
31539: ARRAY
31540: PUSH
31541: LD_VAR 0 2
31545: EQUAL
31546: IFFALSE 31557
// KillUnit ( vehicle ) ;
31548: LD_VAR 0 2
31552: PPUSH
31553: CALL_OW 66
31557: GO 31517
31559: POP
31560: POP
// end ;
31561: LD_VAR 0 3
31565: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
31566: LD_EXP 118
31570: NOT
31571: IFFALSE 31606
31573: GO 31575
31575: DISABLE
// begin initMiner := true ;
31576: LD_ADDR_EXP 118
31580: PUSH
31581: LD_INT 1
31583: ST_TO_ADDR
// minersList := [ ] ;
31584: LD_ADDR_EXP 119
31588: PUSH
31589: EMPTY
31590: ST_TO_ADDR
// minerMinesList := [ ] ;
31591: LD_ADDR_EXP 120
31595: PUSH
31596: EMPTY
31597: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
31598: LD_ADDR_EXP 121
31602: PUSH
31603: LD_INT 5
31605: ST_TO_ADDR
// end ;
31606: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
31607: LD_EXP 118
31611: PUSH
31612: LD_INT 34
31614: PUSH
31615: LD_EXP 43
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PPUSH
31624: CALL_OW 69
31628: AND
31629: IFFALSE 32092
31631: GO 31633
31633: DISABLE
31634: LD_INT 0
31636: PPUSH
31637: PPUSH
31638: PPUSH
31639: PPUSH
// begin enable ;
31640: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
31641: LD_ADDR_VAR 0 1
31645: PUSH
31646: LD_INT 34
31648: PUSH
31649: LD_EXP 43
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PPUSH
31658: CALL_OW 69
31662: PUSH
31663: FOR_IN
31664: IFFALSE 31736
// begin if not i in minersList then
31666: LD_VAR 0 1
31670: PUSH
31671: LD_EXP 119
31675: IN
31676: NOT
31677: IFFALSE 31734
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
31679: LD_ADDR_EXP 119
31683: PUSH
31684: LD_EXP 119
31688: PPUSH
31689: LD_EXP 119
31693: PUSH
31694: LD_INT 1
31696: PLUS
31697: PPUSH
31698: LD_VAR 0 1
31702: PPUSH
31703: CALL_OW 1
31707: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31708: LD_ADDR_EXP 120
31712: PUSH
31713: LD_EXP 120
31717: PPUSH
31718: LD_EXP 120
31722: PUSH
31723: LD_INT 1
31725: PLUS
31726: PPUSH
31727: EMPTY
31728: PPUSH
31729: CALL_OW 1
31733: ST_TO_ADDR
// end end ;
31734: GO 31663
31736: POP
31737: POP
// for i := minerMinesList downto 1 do
31738: LD_ADDR_VAR 0 1
31742: PUSH
31743: DOUBLE
31744: LD_EXP 120
31748: INC
31749: ST_TO_ADDR
31750: LD_INT 1
31752: PUSH
31753: FOR_DOWNTO
31754: IFFALSE 32090
// begin if IsLive ( minersList [ i ] ) then
31756: LD_EXP 119
31760: PUSH
31761: LD_VAR 0 1
31765: ARRAY
31766: PPUSH
31767: CALL_OW 300
31771: IFFALSE 31799
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
31773: LD_EXP 119
31777: PUSH
31778: LD_VAR 0 1
31782: ARRAY
31783: PPUSH
31784: LD_EXP 120
31788: PUSH
31789: LD_VAR 0 1
31793: ARRAY
31794: PPUSH
31795: CALL_OW 505
// if not minerMinesList [ i ] then
31799: LD_EXP 120
31803: PUSH
31804: LD_VAR 0 1
31808: ARRAY
31809: NOT
31810: IFFALSE 31814
// continue ;
31812: GO 31753
// for j := minerMinesList [ i ] downto 1 do
31814: LD_ADDR_VAR 0 2
31818: PUSH
31819: DOUBLE
31820: LD_EXP 120
31824: PUSH
31825: LD_VAR 0 1
31829: ARRAY
31830: INC
31831: ST_TO_ADDR
31832: LD_INT 1
31834: PUSH
31835: FOR_DOWNTO
31836: IFFALSE 32086
// begin side := GetSide ( minersList [ i ] ) ;
31838: LD_ADDR_VAR 0 3
31842: PUSH
31843: LD_EXP 119
31847: PUSH
31848: LD_VAR 0 1
31852: ARRAY
31853: PPUSH
31854: CALL_OW 255
31858: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31859: LD_ADDR_VAR 0 4
31863: PUSH
31864: LD_EXP 120
31868: PUSH
31869: LD_VAR 0 1
31873: ARRAY
31874: PUSH
31875: LD_VAR 0 2
31879: ARRAY
31880: PUSH
31881: LD_INT 1
31883: ARRAY
31884: PPUSH
31885: LD_EXP 120
31889: PUSH
31890: LD_VAR 0 1
31894: ARRAY
31895: PUSH
31896: LD_VAR 0 2
31900: ARRAY
31901: PUSH
31902: LD_INT 2
31904: ARRAY
31905: PPUSH
31906: CALL_OW 428
31910: ST_TO_ADDR
// if not tmp then
31911: LD_VAR 0 4
31915: NOT
31916: IFFALSE 31920
// continue ;
31918: GO 31835
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31920: LD_VAR 0 4
31924: PUSH
31925: LD_INT 81
31927: PUSH
31928: LD_VAR 0 3
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PPUSH
31937: CALL_OW 69
31941: IN
31942: PUSH
31943: LD_EXP 120
31947: PUSH
31948: LD_VAR 0 1
31952: ARRAY
31953: PUSH
31954: LD_VAR 0 2
31958: ARRAY
31959: PUSH
31960: LD_INT 1
31962: ARRAY
31963: PPUSH
31964: LD_EXP 120
31968: PUSH
31969: LD_VAR 0 1
31973: ARRAY
31974: PUSH
31975: LD_VAR 0 2
31979: ARRAY
31980: PUSH
31981: LD_INT 2
31983: ARRAY
31984: PPUSH
31985: CALL_OW 458
31989: AND
31990: IFFALSE 32084
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31992: LD_EXP 120
31996: PUSH
31997: LD_VAR 0 1
32001: ARRAY
32002: PUSH
32003: LD_VAR 0 2
32007: ARRAY
32008: PUSH
32009: LD_INT 1
32011: ARRAY
32012: PPUSH
32013: LD_EXP 120
32017: PUSH
32018: LD_VAR 0 1
32022: ARRAY
32023: PUSH
32024: LD_VAR 0 2
32028: ARRAY
32029: PUSH
32030: LD_INT 2
32032: ARRAY
32033: PPUSH
32034: LD_VAR 0 3
32038: PPUSH
32039: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
32043: LD_ADDR_EXP 120
32047: PUSH
32048: LD_EXP 120
32052: PPUSH
32053: LD_VAR 0 1
32057: PPUSH
32058: LD_EXP 120
32062: PUSH
32063: LD_VAR 0 1
32067: ARRAY
32068: PPUSH
32069: LD_VAR 0 2
32073: PPUSH
32074: CALL_OW 3
32078: PPUSH
32079: CALL_OW 1
32083: ST_TO_ADDR
// end ; end ;
32084: GO 31835
32086: POP
32087: POP
// end ;
32088: GO 31753
32090: POP
32091: POP
// end ;
32092: PPOPN 4
32094: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
32095: LD_INT 0
32097: PPUSH
32098: PPUSH
// result := false ;
32099: LD_ADDR_VAR 0 4
32103: PUSH
32104: LD_INT 0
32106: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
32107: LD_VAR 0 1
32111: PPUSH
32112: CALL_OW 264
32116: PUSH
32117: LD_EXP 43
32121: EQUAL
32122: NOT
32123: IFFALSE 32127
// exit ;
32125: GO 32367
// index := GetElementIndex ( minersList , unit ) ;
32127: LD_ADDR_VAR 0 5
32131: PUSH
32132: LD_EXP 119
32136: PPUSH
32137: LD_VAR 0 1
32141: PPUSH
32142: CALL 38351 0 2
32146: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
32147: LD_EXP 120
32151: PUSH
32152: LD_VAR 0 5
32156: ARRAY
32157: PUSH
32158: LD_EXP 121
32162: GREATEREQUAL
32163: IFFALSE 32167
// exit ;
32165: GO 32367
// ComMoveXY ( unit , x , y ) ;
32167: LD_VAR 0 1
32171: PPUSH
32172: LD_VAR 0 2
32176: PPUSH
32177: LD_VAR 0 3
32181: PPUSH
32182: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32186: LD_INT 35
32188: PPUSH
32189: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
32193: LD_VAR 0 1
32197: PPUSH
32198: LD_VAR 0 2
32202: PPUSH
32203: LD_VAR 0 3
32207: PPUSH
32208: CALL 69123 0 3
32212: NOT
32213: PUSH
32214: LD_VAR 0 1
32218: PPUSH
32219: CALL_OW 314
32223: AND
32224: IFFALSE 32228
// exit ;
32226: GO 32367
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
32228: LD_VAR 0 2
32232: PPUSH
32233: LD_VAR 0 3
32237: PPUSH
32238: CALL_OW 428
32242: PUSH
32243: LD_VAR 0 1
32247: EQUAL
32248: PUSH
32249: LD_VAR 0 1
32253: PPUSH
32254: CALL_OW 314
32258: NOT
32259: AND
32260: IFFALSE 32186
// PlaySoundXY ( x , y , PlantMine ) ;
32262: LD_VAR 0 2
32266: PPUSH
32267: LD_VAR 0 3
32271: PPUSH
32272: LD_STRING PlantMine
32274: PPUSH
32275: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
32279: LD_VAR 0 2
32283: PPUSH
32284: LD_VAR 0 3
32288: PPUSH
32289: LD_VAR 0 1
32293: PPUSH
32294: CALL_OW 255
32298: PPUSH
32299: LD_INT 0
32301: PPUSH
32302: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
32306: LD_ADDR_EXP 120
32310: PUSH
32311: LD_EXP 120
32315: PPUSH
32316: LD_VAR 0 5
32320: PUSH
32321: LD_EXP 120
32325: PUSH
32326: LD_VAR 0 5
32330: ARRAY
32331: PUSH
32332: LD_INT 1
32334: PLUS
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PPUSH
32340: LD_VAR 0 2
32344: PUSH
32345: LD_VAR 0 3
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PPUSH
32354: CALL 38566 0 3
32358: ST_TO_ADDR
// result := true ;
32359: LD_ADDR_VAR 0 4
32363: PUSH
32364: LD_INT 1
32366: ST_TO_ADDR
// end ;
32367: LD_VAR 0 4
32371: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
32372: LD_INT 0
32374: PPUSH
32375: PPUSH
32376: PPUSH
// if not unit in minersList then
32377: LD_VAR 0 1
32381: PUSH
32382: LD_EXP 119
32386: IN
32387: NOT
32388: IFFALSE 32392
// exit ;
32390: GO 32784
// index := GetElementIndex ( minersList , unit ) ;
32392: LD_ADDR_VAR 0 6
32396: PUSH
32397: LD_EXP 119
32401: PPUSH
32402: LD_VAR 0 1
32406: PPUSH
32407: CALL 38351 0 2
32411: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
32412: LD_ADDR_VAR 0 5
32416: PUSH
32417: DOUBLE
32418: LD_EXP 120
32422: PUSH
32423: LD_VAR 0 6
32427: ARRAY
32428: INC
32429: ST_TO_ADDR
32430: LD_INT 1
32432: PUSH
32433: FOR_DOWNTO
32434: IFFALSE 32595
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
32436: LD_EXP 120
32440: PUSH
32441: LD_VAR 0 6
32445: ARRAY
32446: PUSH
32447: LD_VAR 0 5
32451: ARRAY
32452: PUSH
32453: LD_INT 1
32455: ARRAY
32456: PUSH
32457: LD_VAR 0 2
32461: EQUAL
32462: PUSH
32463: LD_EXP 120
32467: PUSH
32468: LD_VAR 0 6
32472: ARRAY
32473: PUSH
32474: LD_VAR 0 5
32478: ARRAY
32479: PUSH
32480: LD_INT 2
32482: ARRAY
32483: PUSH
32484: LD_VAR 0 3
32488: EQUAL
32489: AND
32490: IFFALSE 32593
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32492: LD_EXP 120
32496: PUSH
32497: LD_VAR 0 6
32501: ARRAY
32502: PUSH
32503: LD_VAR 0 5
32507: ARRAY
32508: PUSH
32509: LD_INT 1
32511: ARRAY
32512: PPUSH
32513: LD_EXP 120
32517: PUSH
32518: LD_VAR 0 6
32522: ARRAY
32523: PUSH
32524: LD_VAR 0 5
32528: ARRAY
32529: PUSH
32530: LD_INT 2
32532: ARRAY
32533: PPUSH
32534: LD_VAR 0 1
32538: PPUSH
32539: CALL_OW 255
32543: PPUSH
32544: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32548: LD_ADDR_EXP 120
32552: PUSH
32553: LD_EXP 120
32557: PPUSH
32558: LD_VAR 0 6
32562: PPUSH
32563: LD_EXP 120
32567: PUSH
32568: LD_VAR 0 6
32572: ARRAY
32573: PPUSH
32574: LD_VAR 0 5
32578: PPUSH
32579: CALL_OW 3
32583: PPUSH
32584: CALL_OW 1
32588: ST_TO_ADDR
// exit ;
32589: POP
32590: POP
32591: GO 32784
// end ; end ;
32593: GO 32433
32595: POP
32596: POP
// for i := minerMinesList [ index ] downto 1 do
32597: LD_ADDR_VAR 0 5
32601: PUSH
32602: DOUBLE
32603: LD_EXP 120
32607: PUSH
32608: LD_VAR 0 6
32612: ARRAY
32613: INC
32614: ST_TO_ADDR
32615: LD_INT 1
32617: PUSH
32618: FOR_DOWNTO
32619: IFFALSE 32782
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
32621: LD_EXP 120
32625: PUSH
32626: LD_VAR 0 6
32630: ARRAY
32631: PUSH
32632: LD_VAR 0 5
32636: ARRAY
32637: PUSH
32638: LD_INT 1
32640: ARRAY
32641: PPUSH
32642: LD_EXP 120
32646: PUSH
32647: LD_VAR 0 6
32651: ARRAY
32652: PUSH
32653: LD_VAR 0 5
32657: ARRAY
32658: PUSH
32659: LD_INT 2
32661: ARRAY
32662: PPUSH
32663: LD_VAR 0 2
32667: PPUSH
32668: LD_VAR 0 3
32672: PPUSH
32673: CALL_OW 298
32677: PUSH
32678: LD_INT 6
32680: LESS
32681: IFFALSE 32780
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32683: LD_EXP 120
32687: PUSH
32688: LD_VAR 0 6
32692: ARRAY
32693: PUSH
32694: LD_VAR 0 5
32698: ARRAY
32699: PUSH
32700: LD_INT 1
32702: ARRAY
32703: PPUSH
32704: LD_EXP 120
32708: PUSH
32709: LD_VAR 0 6
32713: ARRAY
32714: PUSH
32715: LD_VAR 0 5
32719: ARRAY
32720: PUSH
32721: LD_INT 2
32723: ARRAY
32724: PPUSH
32725: LD_VAR 0 1
32729: PPUSH
32730: CALL_OW 255
32734: PPUSH
32735: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32739: LD_ADDR_EXP 120
32743: PUSH
32744: LD_EXP 120
32748: PPUSH
32749: LD_VAR 0 6
32753: PPUSH
32754: LD_EXP 120
32758: PUSH
32759: LD_VAR 0 6
32763: ARRAY
32764: PPUSH
32765: LD_VAR 0 5
32769: PPUSH
32770: CALL_OW 3
32774: PPUSH
32775: CALL_OW 1
32779: ST_TO_ADDR
// end ; end ;
32780: GO 32618
32782: POP
32783: POP
// end ;
32784: LD_VAR 0 4
32788: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32789: LD_INT 0
32791: PPUSH
32792: PPUSH
32793: PPUSH
32794: PPUSH
32795: PPUSH
32796: PPUSH
32797: PPUSH
32798: PPUSH
32799: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32800: LD_VAR 0 1
32804: PPUSH
32805: CALL_OW 264
32809: PUSH
32810: LD_EXP 43
32814: EQUAL
32815: NOT
32816: PUSH
32817: LD_VAR 0 1
32821: PUSH
32822: LD_EXP 119
32826: IN
32827: NOT
32828: OR
32829: IFFALSE 32833
// exit ;
32831: GO 33155
// index := GetElementIndex ( minersList , unit ) ;
32833: LD_ADDR_VAR 0 6
32837: PUSH
32838: LD_EXP 119
32842: PPUSH
32843: LD_VAR 0 1
32847: PPUSH
32848: CALL 38351 0 2
32852: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32853: LD_ADDR_VAR 0 8
32857: PUSH
32858: LD_EXP 121
32862: PUSH
32863: LD_EXP 120
32867: PUSH
32868: LD_VAR 0 6
32872: ARRAY
32873: MINUS
32874: ST_TO_ADDR
// if not minesFreeAmount then
32875: LD_VAR 0 8
32879: NOT
32880: IFFALSE 32884
// exit ;
32882: GO 33155
// tmp := [ ] ;
32884: LD_ADDR_VAR 0 7
32888: PUSH
32889: EMPTY
32890: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32891: LD_ADDR_VAR 0 5
32895: PUSH
32896: DOUBLE
32897: LD_INT 1
32899: DEC
32900: ST_TO_ADDR
32901: LD_VAR 0 8
32905: PUSH
32906: FOR_TO
32907: IFFALSE 33102
// begin _d := rand ( 0 , 5 ) ;
32909: LD_ADDR_VAR 0 11
32913: PUSH
32914: LD_INT 0
32916: PPUSH
32917: LD_INT 5
32919: PPUSH
32920: CALL_OW 12
32924: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32925: LD_ADDR_VAR 0 12
32929: PUSH
32930: LD_INT 2
32932: PPUSH
32933: LD_INT 6
32935: PPUSH
32936: CALL_OW 12
32940: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32941: LD_ADDR_VAR 0 9
32945: PUSH
32946: LD_VAR 0 2
32950: PPUSH
32951: LD_VAR 0 11
32955: PPUSH
32956: LD_VAR 0 12
32960: PPUSH
32961: CALL_OW 272
32965: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32966: LD_ADDR_VAR 0 10
32970: PUSH
32971: LD_VAR 0 3
32975: PPUSH
32976: LD_VAR 0 11
32980: PPUSH
32981: LD_VAR 0 12
32985: PPUSH
32986: CALL_OW 273
32990: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32991: LD_VAR 0 9
32995: PPUSH
32996: LD_VAR 0 10
33000: PPUSH
33001: CALL_OW 488
33005: PUSH
33006: LD_VAR 0 9
33010: PUSH
33011: LD_VAR 0 10
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_VAR 0 7
33024: IN
33025: NOT
33026: AND
33027: PUSH
33028: LD_VAR 0 9
33032: PPUSH
33033: LD_VAR 0 10
33037: PPUSH
33038: CALL_OW 458
33042: NOT
33043: AND
33044: IFFALSE 33086
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
33046: LD_ADDR_VAR 0 7
33050: PUSH
33051: LD_VAR 0 7
33055: PPUSH
33056: LD_VAR 0 7
33060: PUSH
33061: LD_INT 1
33063: PLUS
33064: PPUSH
33065: LD_VAR 0 9
33069: PUSH
33070: LD_VAR 0 10
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PPUSH
33079: CALL_OW 1
33083: ST_TO_ADDR
33084: GO 33100
// i := i - 1 ;
33086: LD_ADDR_VAR 0 5
33090: PUSH
33091: LD_VAR 0 5
33095: PUSH
33096: LD_INT 1
33098: MINUS
33099: ST_TO_ADDR
// end ;
33100: GO 32906
33102: POP
33103: POP
// for i in tmp do
33104: LD_ADDR_VAR 0 5
33108: PUSH
33109: LD_VAR 0 7
33113: PUSH
33114: FOR_IN
33115: IFFALSE 33153
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
33117: LD_VAR 0 1
33121: PPUSH
33122: LD_VAR 0 5
33126: PUSH
33127: LD_INT 1
33129: ARRAY
33130: PPUSH
33131: LD_VAR 0 5
33135: PUSH
33136: LD_INT 2
33138: ARRAY
33139: PPUSH
33140: CALL 32095 0 3
33144: NOT
33145: IFFALSE 33151
// exit ;
33147: POP
33148: POP
33149: GO 33155
33151: GO 33114
33153: POP
33154: POP
// end ;
33155: LD_VAR 0 4
33159: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
33160: LD_INT 0
33162: PPUSH
33163: PPUSH
33164: PPUSH
33165: PPUSH
33166: PPUSH
33167: PPUSH
33168: PPUSH
// if not GetClass ( unit ) = class_sniper then
33169: LD_VAR 0 1
33173: PPUSH
33174: CALL_OW 257
33178: PUSH
33179: LD_INT 5
33181: EQUAL
33182: NOT
33183: IFFALSE 33187
// exit ;
33185: GO 33575
// dist := 8 ;
33187: LD_ADDR_VAR 0 5
33191: PUSH
33192: LD_INT 8
33194: ST_TO_ADDR
// viewRange := 12 ;
33195: LD_ADDR_VAR 0 7
33199: PUSH
33200: LD_INT 12
33202: ST_TO_ADDR
// side := GetSide ( unit ) ;
33203: LD_ADDR_VAR 0 6
33207: PUSH
33208: LD_VAR 0 1
33212: PPUSH
33213: CALL_OW 255
33217: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
33218: LD_INT 61
33220: PPUSH
33221: LD_VAR 0 6
33225: PPUSH
33226: CALL_OW 321
33230: PUSH
33231: LD_INT 2
33233: EQUAL
33234: IFFALSE 33244
// viewRange := 16 ;
33236: LD_ADDR_VAR 0 7
33240: PUSH
33241: LD_INT 16
33243: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
33244: LD_VAR 0 1
33248: PPUSH
33249: LD_VAR 0 2
33253: PPUSH
33254: LD_VAR 0 3
33258: PPUSH
33259: CALL_OW 297
33263: PUSH
33264: LD_VAR 0 5
33268: GREATER
33269: IFFALSE 33348
// begin ComMoveXY ( unit , x , y ) ;
33271: LD_VAR 0 1
33275: PPUSH
33276: LD_VAR 0 2
33280: PPUSH
33281: LD_VAR 0 3
33285: PPUSH
33286: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33290: LD_INT 35
33292: PPUSH
33293: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
33297: LD_VAR 0 1
33301: PPUSH
33302: LD_VAR 0 2
33306: PPUSH
33307: LD_VAR 0 3
33311: PPUSH
33312: CALL 69123 0 3
33316: NOT
33317: IFFALSE 33321
// exit ;
33319: GO 33575
// until GetDistUnitXY ( unit , x , y ) < dist ;
33321: LD_VAR 0 1
33325: PPUSH
33326: LD_VAR 0 2
33330: PPUSH
33331: LD_VAR 0 3
33335: PPUSH
33336: CALL_OW 297
33340: PUSH
33341: LD_VAR 0 5
33345: LESS
33346: IFFALSE 33290
// end ; ComTurnXY ( unit , x , y ) ;
33348: LD_VAR 0 1
33352: PPUSH
33353: LD_VAR 0 2
33357: PPUSH
33358: LD_VAR 0 3
33362: PPUSH
33363: CALL_OW 118
// wait ( 5 ) ;
33367: LD_INT 5
33369: PPUSH
33370: CALL_OW 67
// _d := GetDir ( unit ) ;
33374: LD_ADDR_VAR 0 10
33378: PUSH
33379: LD_VAR 0 1
33383: PPUSH
33384: CALL_OW 254
33388: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
33389: LD_ADDR_VAR 0 8
33393: PUSH
33394: LD_VAR 0 1
33398: PPUSH
33399: CALL_OW 250
33403: PPUSH
33404: LD_VAR 0 10
33408: PPUSH
33409: LD_VAR 0 5
33413: PPUSH
33414: CALL_OW 272
33418: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
33419: LD_ADDR_VAR 0 9
33423: PUSH
33424: LD_VAR 0 1
33428: PPUSH
33429: CALL_OW 251
33433: PPUSH
33434: LD_VAR 0 10
33438: PPUSH
33439: LD_VAR 0 5
33443: PPUSH
33444: CALL_OW 273
33448: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33449: LD_VAR 0 8
33453: PPUSH
33454: LD_VAR 0 9
33458: PPUSH
33459: CALL_OW 488
33463: NOT
33464: IFFALSE 33468
// exit ;
33466: GO 33575
// ComAnimCustom ( unit , 1 ) ;
33468: LD_VAR 0 1
33472: PPUSH
33473: LD_INT 1
33475: PPUSH
33476: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
33480: LD_VAR 0 8
33484: PPUSH
33485: LD_VAR 0 9
33489: PPUSH
33490: LD_VAR 0 6
33494: PPUSH
33495: LD_VAR 0 7
33499: PPUSH
33500: CALL_OW 330
// repeat wait ( 1 ) ;
33504: LD_INT 1
33506: PPUSH
33507: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
33511: LD_VAR 0 1
33515: PPUSH
33516: CALL_OW 316
33520: PUSH
33521: LD_VAR 0 1
33525: PPUSH
33526: CALL_OW 314
33530: OR
33531: PUSH
33532: LD_VAR 0 1
33536: PPUSH
33537: CALL_OW 302
33541: NOT
33542: OR
33543: PUSH
33544: LD_VAR 0 1
33548: PPUSH
33549: CALL_OW 301
33553: OR
33554: IFFALSE 33504
// RemoveSeeing ( _x , _y , side ) ;
33556: LD_VAR 0 8
33560: PPUSH
33561: LD_VAR 0 9
33565: PPUSH
33566: LD_VAR 0 6
33570: PPUSH
33571: CALL_OW 331
// end ; end_of_file
33575: LD_VAR 0 4
33579: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33580: LD_INT 0
33582: PPUSH
33583: PPUSH
// if exist_mode then
33584: LD_VAR 0 2
33588: IFFALSE 33613
// unit := CreateCharacter ( prefix & ident ) else
33590: LD_ADDR_VAR 0 5
33594: PUSH
33595: LD_VAR 0 3
33599: PUSH
33600: LD_VAR 0 1
33604: STR
33605: PPUSH
33606: CALL_OW 34
33610: ST_TO_ADDR
33611: GO 33628
// unit := NewCharacter ( ident ) ;
33613: LD_ADDR_VAR 0 5
33617: PUSH
33618: LD_VAR 0 1
33622: PPUSH
33623: CALL_OW 25
33627: ST_TO_ADDR
// result := unit ;
33628: LD_ADDR_VAR 0 4
33632: PUSH
33633: LD_VAR 0 5
33637: ST_TO_ADDR
// end ;
33638: LD_VAR 0 4
33642: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33643: LD_INT 0
33645: PPUSH
33646: PPUSH
// if not side or not nation then
33647: LD_VAR 0 1
33651: NOT
33652: PUSH
33653: LD_VAR 0 2
33657: NOT
33658: OR
33659: IFFALSE 33663
// exit ;
33661: GO 34431
// case nation of nation_american :
33663: LD_VAR 0 2
33667: PUSH
33668: LD_INT 1
33670: DOUBLE
33671: EQUAL
33672: IFTRUE 33676
33674: GO 33890
33676: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33677: LD_ADDR_VAR 0 4
33681: PUSH
33682: LD_INT 35
33684: PUSH
33685: LD_INT 45
33687: PUSH
33688: LD_INT 46
33690: PUSH
33691: LD_INT 47
33693: PUSH
33694: LD_INT 82
33696: PUSH
33697: LD_INT 83
33699: PUSH
33700: LD_INT 84
33702: PUSH
33703: LD_INT 85
33705: PUSH
33706: LD_INT 86
33708: PUSH
33709: LD_INT 1
33711: PUSH
33712: LD_INT 2
33714: PUSH
33715: LD_INT 6
33717: PUSH
33718: LD_INT 15
33720: PUSH
33721: LD_INT 16
33723: PUSH
33724: LD_INT 7
33726: PUSH
33727: LD_INT 12
33729: PUSH
33730: LD_INT 13
33732: PUSH
33733: LD_INT 10
33735: PUSH
33736: LD_INT 14
33738: PUSH
33739: LD_INT 20
33741: PUSH
33742: LD_INT 21
33744: PUSH
33745: LD_INT 22
33747: PUSH
33748: LD_INT 25
33750: PUSH
33751: LD_INT 32
33753: PUSH
33754: LD_INT 27
33756: PUSH
33757: LD_INT 36
33759: PUSH
33760: LD_INT 69
33762: PUSH
33763: LD_INT 39
33765: PUSH
33766: LD_INT 34
33768: PUSH
33769: LD_INT 40
33771: PUSH
33772: LD_INT 48
33774: PUSH
33775: LD_INT 49
33777: PUSH
33778: LD_INT 50
33780: PUSH
33781: LD_INT 51
33783: PUSH
33784: LD_INT 52
33786: PUSH
33787: LD_INT 53
33789: PUSH
33790: LD_INT 54
33792: PUSH
33793: LD_INT 55
33795: PUSH
33796: LD_INT 56
33798: PUSH
33799: LD_INT 57
33801: PUSH
33802: LD_INT 58
33804: PUSH
33805: LD_INT 59
33807: PUSH
33808: LD_INT 60
33810: PUSH
33811: LD_INT 61
33813: PUSH
33814: LD_INT 62
33816: PUSH
33817: LD_INT 80
33819: PUSH
33820: LD_INT 82
33822: PUSH
33823: LD_INT 83
33825: PUSH
33826: LD_INT 84
33828: PUSH
33829: LD_INT 85
33831: PUSH
33832: LD_INT 86
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: ST_TO_ADDR
33888: GO 34355
33890: LD_INT 2
33892: DOUBLE
33893: EQUAL
33894: IFTRUE 33898
33896: GO 34124
33898: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33899: LD_ADDR_VAR 0 4
33903: PUSH
33904: LD_INT 35
33906: PUSH
33907: LD_INT 45
33909: PUSH
33910: LD_INT 46
33912: PUSH
33913: LD_INT 47
33915: PUSH
33916: LD_INT 82
33918: PUSH
33919: LD_INT 83
33921: PUSH
33922: LD_INT 84
33924: PUSH
33925: LD_INT 85
33927: PUSH
33928: LD_INT 87
33930: PUSH
33931: LD_INT 70
33933: PUSH
33934: LD_INT 1
33936: PUSH
33937: LD_INT 11
33939: PUSH
33940: LD_INT 3
33942: PUSH
33943: LD_INT 4
33945: PUSH
33946: LD_INT 5
33948: PUSH
33949: LD_INT 6
33951: PUSH
33952: LD_INT 15
33954: PUSH
33955: LD_INT 18
33957: PUSH
33958: LD_INT 7
33960: PUSH
33961: LD_INT 17
33963: PUSH
33964: LD_INT 8
33966: PUSH
33967: LD_INT 20
33969: PUSH
33970: LD_INT 21
33972: PUSH
33973: LD_INT 22
33975: PUSH
33976: LD_INT 72
33978: PUSH
33979: LD_INT 26
33981: PUSH
33982: LD_INT 69
33984: PUSH
33985: LD_INT 39
33987: PUSH
33988: LD_INT 40
33990: PUSH
33991: LD_INT 41
33993: PUSH
33994: LD_INT 42
33996: PUSH
33997: LD_INT 43
33999: PUSH
34000: LD_INT 48
34002: PUSH
34003: LD_INT 49
34005: PUSH
34006: LD_INT 50
34008: PUSH
34009: LD_INT 51
34011: PUSH
34012: LD_INT 52
34014: PUSH
34015: LD_INT 53
34017: PUSH
34018: LD_INT 54
34020: PUSH
34021: LD_INT 55
34023: PUSH
34024: LD_INT 56
34026: PUSH
34027: LD_INT 60
34029: PUSH
34030: LD_INT 61
34032: PUSH
34033: LD_INT 62
34035: PUSH
34036: LD_INT 66
34038: PUSH
34039: LD_INT 67
34041: PUSH
34042: LD_INT 68
34044: PUSH
34045: LD_INT 81
34047: PUSH
34048: LD_INT 82
34050: PUSH
34051: LD_INT 83
34053: PUSH
34054: LD_INT 84
34056: PUSH
34057: LD_INT 85
34059: PUSH
34060: LD_INT 87
34062: PUSH
34063: LD_INT 88
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: ST_TO_ADDR
34122: GO 34355
34124: LD_INT 3
34126: DOUBLE
34127: EQUAL
34128: IFTRUE 34132
34130: GO 34354
34132: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
34133: LD_ADDR_VAR 0 4
34137: PUSH
34138: LD_INT 46
34140: PUSH
34141: LD_INT 47
34143: PUSH
34144: LD_INT 1
34146: PUSH
34147: LD_INT 2
34149: PUSH
34150: LD_INT 82
34152: PUSH
34153: LD_INT 83
34155: PUSH
34156: LD_INT 84
34158: PUSH
34159: LD_INT 85
34161: PUSH
34162: LD_INT 86
34164: PUSH
34165: LD_INT 11
34167: PUSH
34168: LD_INT 9
34170: PUSH
34171: LD_INT 20
34173: PUSH
34174: LD_INT 19
34176: PUSH
34177: LD_INT 21
34179: PUSH
34180: LD_INT 24
34182: PUSH
34183: LD_INT 22
34185: PUSH
34186: LD_INT 25
34188: PUSH
34189: LD_INT 28
34191: PUSH
34192: LD_INT 29
34194: PUSH
34195: LD_INT 30
34197: PUSH
34198: LD_INT 31
34200: PUSH
34201: LD_INT 37
34203: PUSH
34204: LD_INT 38
34206: PUSH
34207: LD_INT 32
34209: PUSH
34210: LD_INT 27
34212: PUSH
34213: LD_INT 33
34215: PUSH
34216: LD_INT 69
34218: PUSH
34219: LD_INT 39
34221: PUSH
34222: LD_INT 34
34224: PUSH
34225: LD_INT 40
34227: PUSH
34228: LD_INT 71
34230: PUSH
34231: LD_INT 23
34233: PUSH
34234: LD_INT 44
34236: PUSH
34237: LD_INT 48
34239: PUSH
34240: LD_INT 49
34242: PUSH
34243: LD_INT 50
34245: PUSH
34246: LD_INT 51
34248: PUSH
34249: LD_INT 52
34251: PUSH
34252: LD_INT 53
34254: PUSH
34255: LD_INT 54
34257: PUSH
34258: LD_INT 55
34260: PUSH
34261: LD_INT 56
34263: PUSH
34264: LD_INT 57
34266: PUSH
34267: LD_INT 58
34269: PUSH
34270: LD_INT 59
34272: PUSH
34273: LD_INT 63
34275: PUSH
34276: LD_INT 64
34278: PUSH
34279: LD_INT 65
34281: PUSH
34282: LD_INT 82
34284: PUSH
34285: LD_INT 83
34287: PUSH
34288: LD_INT 84
34290: PUSH
34291: LD_INT 85
34293: PUSH
34294: LD_INT 86
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: ST_TO_ADDR
34352: GO 34355
34354: POP
// if state > - 1 and state < 3 then
34355: LD_VAR 0 3
34359: PUSH
34360: LD_INT 1
34362: NEG
34363: GREATER
34364: PUSH
34365: LD_VAR 0 3
34369: PUSH
34370: LD_INT 3
34372: LESS
34373: AND
34374: IFFALSE 34431
// for i in result do
34376: LD_ADDR_VAR 0 5
34380: PUSH
34381: LD_VAR 0 4
34385: PUSH
34386: FOR_IN
34387: IFFALSE 34429
// if GetTech ( i , side ) <> state then
34389: LD_VAR 0 5
34393: PPUSH
34394: LD_VAR 0 1
34398: PPUSH
34399: CALL_OW 321
34403: PUSH
34404: LD_VAR 0 3
34408: NONEQUAL
34409: IFFALSE 34427
// result := result diff i ;
34411: LD_ADDR_VAR 0 4
34415: PUSH
34416: LD_VAR 0 4
34420: PUSH
34421: LD_VAR 0 5
34425: DIFF
34426: ST_TO_ADDR
34427: GO 34386
34429: POP
34430: POP
// end ;
34431: LD_VAR 0 4
34435: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34436: LD_INT 0
34438: PPUSH
34439: PPUSH
34440: PPUSH
// result := true ;
34441: LD_ADDR_VAR 0 3
34445: PUSH
34446: LD_INT 1
34448: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34449: LD_ADDR_VAR 0 5
34453: PUSH
34454: LD_VAR 0 2
34458: PPUSH
34459: CALL_OW 480
34463: ST_TO_ADDR
// if not tmp then
34464: LD_VAR 0 5
34468: NOT
34469: IFFALSE 34473
// exit ;
34471: GO 34522
// for i in tmp do
34473: LD_ADDR_VAR 0 4
34477: PUSH
34478: LD_VAR 0 5
34482: PUSH
34483: FOR_IN
34484: IFFALSE 34520
// if GetTech ( i , side ) <> state_researched then
34486: LD_VAR 0 4
34490: PPUSH
34491: LD_VAR 0 1
34495: PPUSH
34496: CALL_OW 321
34500: PUSH
34501: LD_INT 2
34503: NONEQUAL
34504: IFFALSE 34518
// begin result := false ;
34506: LD_ADDR_VAR 0 3
34510: PUSH
34511: LD_INT 0
34513: ST_TO_ADDR
// exit ;
34514: POP
34515: POP
34516: GO 34522
// end ;
34518: GO 34483
34520: POP
34521: POP
// end ;
34522: LD_VAR 0 3
34526: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34527: LD_INT 0
34529: PPUSH
34530: PPUSH
34531: PPUSH
34532: PPUSH
34533: PPUSH
34534: PPUSH
34535: PPUSH
34536: PPUSH
34537: PPUSH
34538: PPUSH
34539: PPUSH
34540: PPUSH
34541: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34542: LD_VAR 0 1
34546: NOT
34547: PUSH
34548: LD_VAR 0 1
34552: PPUSH
34553: CALL_OW 257
34557: PUSH
34558: LD_INT 9
34560: NONEQUAL
34561: OR
34562: IFFALSE 34566
// exit ;
34564: GO 35139
// side := GetSide ( unit ) ;
34566: LD_ADDR_VAR 0 9
34570: PUSH
34571: LD_VAR 0 1
34575: PPUSH
34576: CALL_OW 255
34580: ST_TO_ADDR
// tech_space := tech_spacanom ;
34581: LD_ADDR_VAR 0 12
34585: PUSH
34586: LD_INT 29
34588: ST_TO_ADDR
// tech_time := tech_taurad ;
34589: LD_ADDR_VAR 0 13
34593: PUSH
34594: LD_INT 28
34596: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34597: LD_ADDR_VAR 0 11
34601: PUSH
34602: LD_VAR 0 1
34606: PPUSH
34607: CALL_OW 310
34611: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34612: LD_VAR 0 11
34616: PPUSH
34617: CALL_OW 247
34621: PUSH
34622: LD_INT 2
34624: EQUAL
34625: IFFALSE 34629
// exit ;
34627: GO 35139
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34629: LD_ADDR_VAR 0 8
34633: PUSH
34634: LD_INT 81
34636: PUSH
34637: LD_VAR 0 9
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 3
34648: PUSH
34649: LD_INT 21
34651: PUSH
34652: LD_INT 3
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PPUSH
34667: CALL_OW 69
34671: ST_TO_ADDR
// if not tmp then
34672: LD_VAR 0 8
34676: NOT
34677: IFFALSE 34681
// exit ;
34679: GO 35139
// if in_unit then
34681: LD_VAR 0 11
34685: IFFALSE 34709
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34687: LD_ADDR_VAR 0 10
34691: PUSH
34692: LD_VAR 0 8
34696: PPUSH
34697: LD_VAR 0 11
34701: PPUSH
34702: CALL_OW 74
34706: ST_TO_ADDR
34707: GO 34729
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34709: LD_ADDR_VAR 0 10
34713: PUSH
34714: LD_VAR 0 8
34718: PPUSH
34719: LD_VAR 0 1
34723: PPUSH
34724: CALL_OW 74
34728: ST_TO_ADDR
// if not enemy then
34729: LD_VAR 0 10
34733: NOT
34734: IFFALSE 34738
// exit ;
34736: GO 35139
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34738: LD_VAR 0 11
34742: PUSH
34743: LD_VAR 0 11
34747: PPUSH
34748: LD_VAR 0 10
34752: PPUSH
34753: CALL_OW 296
34757: PUSH
34758: LD_INT 13
34760: GREATER
34761: AND
34762: PUSH
34763: LD_VAR 0 1
34767: PPUSH
34768: LD_VAR 0 10
34772: PPUSH
34773: CALL_OW 296
34777: PUSH
34778: LD_INT 12
34780: GREATER
34781: OR
34782: IFFALSE 34786
// exit ;
34784: GO 35139
// missile := [ 1 ] ;
34786: LD_ADDR_VAR 0 14
34790: PUSH
34791: LD_INT 1
34793: PUSH
34794: EMPTY
34795: LIST
34796: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34797: LD_VAR 0 9
34801: PPUSH
34802: LD_VAR 0 12
34806: PPUSH
34807: CALL_OW 325
34811: IFFALSE 34840
// missile := Insert ( missile , missile + 1 , 2 ) ;
34813: LD_ADDR_VAR 0 14
34817: PUSH
34818: LD_VAR 0 14
34822: PPUSH
34823: LD_VAR 0 14
34827: PUSH
34828: LD_INT 1
34830: PLUS
34831: PPUSH
34832: LD_INT 2
34834: PPUSH
34835: CALL_OW 2
34839: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34840: LD_VAR 0 9
34844: PPUSH
34845: LD_VAR 0 13
34849: PPUSH
34850: CALL_OW 325
34854: PUSH
34855: LD_VAR 0 10
34859: PPUSH
34860: CALL_OW 255
34864: PPUSH
34865: LD_VAR 0 13
34869: PPUSH
34870: CALL_OW 325
34874: NOT
34875: AND
34876: IFFALSE 34905
// missile := Insert ( missile , missile + 1 , 3 ) ;
34878: LD_ADDR_VAR 0 14
34882: PUSH
34883: LD_VAR 0 14
34887: PPUSH
34888: LD_VAR 0 14
34892: PUSH
34893: LD_INT 1
34895: PLUS
34896: PPUSH
34897: LD_INT 3
34899: PPUSH
34900: CALL_OW 2
34904: ST_TO_ADDR
// if missile < 2 then
34905: LD_VAR 0 14
34909: PUSH
34910: LD_INT 2
34912: LESS
34913: IFFALSE 34917
// exit ;
34915: GO 35139
// x := GetX ( enemy ) ;
34917: LD_ADDR_VAR 0 4
34921: PUSH
34922: LD_VAR 0 10
34926: PPUSH
34927: CALL_OW 250
34931: ST_TO_ADDR
// y := GetY ( enemy ) ;
34932: LD_ADDR_VAR 0 5
34936: PUSH
34937: LD_VAR 0 10
34941: PPUSH
34942: CALL_OW 251
34946: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34947: LD_ADDR_VAR 0 6
34951: PUSH
34952: LD_VAR 0 4
34956: PUSH
34957: LD_INT 1
34959: NEG
34960: PPUSH
34961: LD_INT 1
34963: PPUSH
34964: CALL_OW 12
34968: PLUS
34969: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34970: LD_ADDR_VAR 0 7
34974: PUSH
34975: LD_VAR 0 5
34979: PUSH
34980: LD_INT 1
34982: NEG
34983: PPUSH
34984: LD_INT 1
34986: PPUSH
34987: CALL_OW 12
34991: PLUS
34992: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34993: LD_VAR 0 6
34997: PPUSH
34998: LD_VAR 0 7
35002: PPUSH
35003: CALL_OW 488
35007: NOT
35008: IFFALSE 35030
// begin _x := x ;
35010: LD_ADDR_VAR 0 6
35014: PUSH
35015: LD_VAR 0 4
35019: ST_TO_ADDR
// _y := y ;
35020: LD_ADDR_VAR 0 7
35024: PUSH
35025: LD_VAR 0 5
35029: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35030: LD_ADDR_VAR 0 3
35034: PUSH
35035: LD_INT 1
35037: PPUSH
35038: LD_VAR 0 14
35042: PPUSH
35043: CALL_OW 12
35047: ST_TO_ADDR
// case i of 1 :
35048: LD_VAR 0 3
35052: PUSH
35053: LD_INT 1
35055: DOUBLE
35056: EQUAL
35057: IFTRUE 35061
35059: GO 35078
35061: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35062: LD_VAR 0 1
35066: PPUSH
35067: LD_VAR 0 10
35071: PPUSH
35072: CALL_OW 115
35076: GO 35139
35078: LD_INT 2
35080: DOUBLE
35081: EQUAL
35082: IFTRUE 35086
35084: GO 35108
35086: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35087: LD_VAR 0 1
35091: PPUSH
35092: LD_VAR 0 6
35096: PPUSH
35097: LD_VAR 0 7
35101: PPUSH
35102: CALL_OW 153
35106: GO 35139
35108: LD_INT 3
35110: DOUBLE
35111: EQUAL
35112: IFTRUE 35116
35114: GO 35138
35116: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35117: LD_VAR 0 1
35121: PPUSH
35122: LD_VAR 0 6
35126: PPUSH
35127: LD_VAR 0 7
35131: PPUSH
35132: CALL_OW 154
35136: GO 35139
35138: POP
// end ;
35139: LD_VAR 0 2
35143: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35144: LD_INT 0
35146: PPUSH
35147: PPUSH
35148: PPUSH
35149: PPUSH
35150: PPUSH
35151: PPUSH
// if not unit or not building then
35152: LD_VAR 0 1
35156: NOT
35157: PUSH
35158: LD_VAR 0 2
35162: NOT
35163: OR
35164: IFFALSE 35168
// exit ;
35166: GO 35326
// x := GetX ( building ) ;
35168: LD_ADDR_VAR 0 5
35172: PUSH
35173: LD_VAR 0 2
35177: PPUSH
35178: CALL_OW 250
35182: ST_TO_ADDR
// y := GetY ( building ) ;
35183: LD_ADDR_VAR 0 6
35187: PUSH
35188: LD_VAR 0 2
35192: PPUSH
35193: CALL_OW 251
35197: ST_TO_ADDR
// for i = 0 to 5 do
35198: LD_ADDR_VAR 0 4
35202: PUSH
35203: DOUBLE
35204: LD_INT 0
35206: DEC
35207: ST_TO_ADDR
35208: LD_INT 5
35210: PUSH
35211: FOR_TO
35212: IFFALSE 35324
// begin _x := ShiftX ( x , i , 3 ) ;
35214: LD_ADDR_VAR 0 7
35218: PUSH
35219: LD_VAR 0 5
35223: PPUSH
35224: LD_VAR 0 4
35228: PPUSH
35229: LD_INT 3
35231: PPUSH
35232: CALL_OW 272
35236: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35237: LD_ADDR_VAR 0 8
35241: PUSH
35242: LD_VAR 0 6
35246: PPUSH
35247: LD_VAR 0 4
35251: PPUSH
35252: LD_INT 3
35254: PPUSH
35255: CALL_OW 273
35259: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35260: LD_VAR 0 7
35264: PPUSH
35265: LD_VAR 0 8
35269: PPUSH
35270: CALL_OW 488
35274: NOT
35275: IFFALSE 35279
// continue ;
35277: GO 35211
// if HexInfo ( _x , _y ) = 0 then
35279: LD_VAR 0 7
35283: PPUSH
35284: LD_VAR 0 8
35288: PPUSH
35289: CALL_OW 428
35293: PUSH
35294: LD_INT 0
35296: EQUAL
35297: IFFALSE 35322
// begin ComMoveXY ( unit , _x , _y ) ;
35299: LD_VAR 0 1
35303: PPUSH
35304: LD_VAR 0 7
35308: PPUSH
35309: LD_VAR 0 8
35313: PPUSH
35314: CALL_OW 111
// exit ;
35318: POP
35319: POP
35320: GO 35326
// end ; end ;
35322: GO 35211
35324: POP
35325: POP
// end ;
35326: LD_VAR 0 3
35330: RET
// export function ScanBase ( side , base_area ) ; begin
35331: LD_INT 0
35333: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35334: LD_ADDR_VAR 0 3
35338: PUSH
35339: LD_VAR 0 2
35343: PPUSH
35344: LD_INT 81
35346: PUSH
35347: LD_VAR 0 1
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PPUSH
35356: CALL_OW 70
35360: ST_TO_ADDR
// end ;
35361: LD_VAR 0 3
35365: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35366: LD_INT 0
35368: PPUSH
35369: PPUSH
35370: PPUSH
35371: PPUSH
// result := false ;
35372: LD_ADDR_VAR 0 2
35376: PUSH
35377: LD_INT 0
35379: ST_TO_ADDR
// side := GetSide ( unit ) ;
35380: LD_ADDR_VAR 0 3
35384: PUSH
35385: LD_VAR 0 1
35389: PPUSH
35390: CALL_OW 255
35394: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35395: LD_ADDR_VAR 0 4
35399: PUSH
35400: LD_VAR 0 1
35404: PPUSH
35405: CALL_OW 248
35409: ST_TO_ADDR
// case nat of 1 :
35410: LD_VAR 0 4
35414: PUSH
35415: LD_INT 1
35417: DOUBLE
35418: EQUAL
35419: IFTRUE 35423
35421: GO 35434
35423: POP
// tech := tech_lassight ; 2 :
35424: LD_ADDR_VAR 0 5
35428: PUSH
35429: LD_INT 12
35431: ST_TO_ADDR
35432: GO 35473
35434: LD_INT 2
35436: DOUBLE
35437: EQUAL
35438: IFTRUE 35442
35440: GO 35453
35442: POP
// tech := tech_mortar ; 3 :
35443: LD_ADDR_VAR 0 5
35447: PUSH
35448: LD_INT 41
35450: ST_TO_ADDR
35451: GO 35473
35453: LD_INT 3
35455: DOUBLE
35456: EQUAL
35457: IFTRUE 35461
35459: GO 35472
35461: POP
// tech := tech_bazooka ; end ;
35462: LD_ADDR_VAR 0 5
35466: PUSH
35467: LD_INT 44
35469: ST_TO_ADDR
35470: GO 35473
35472: POP
// if Researched ( side , tech ) then
35473: LD_VAR 0 3
35477: PPUSH
35478: LD_VAR 0 5
35482: PPUSH
35483: CALL_OW 325
35487: IFFALSE 35514
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35489: LD_ADDR_VAR 0 2
35493: PUSH
35494: LD_INT 5
35496: PUSH
35497: LD_INT 8
35499: PUSH
35500: LD_INT 9
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: LIST
35507: PUSH
35508: LD_VAR 0 4
35512: ARRAY
35513: ST_TO_ADDR
// end ;
35514: LD_VAR 0 2
35518: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35519: LD_INT 0
35521: PPUSH
35522: PPUSH
35523: PPUSH
// if not mines then
35524: LD_VAR 0 2
35528: NOT
35529: IFFALSE 35533
// exit ;
35531: GO 35677
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35533: LD_ADDR_VAR 0 5
35537: PUSH
35538: LD_INT 81
35540: PUSH
35541: LD_VAR 0 1
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 3
35552: PUSH
35553: LD_INT 21
35555: PUSH
35556: LD_INT 3
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PPUSH
35571: CALL_OW 69
35575: ST_TO_ADDR
// for i in mines do
35576: LD_ADDR_VAR 0 4
35580: PUSH
35581: LD_VAR 0 2
35585: PUSH
35586: FOR_IN
35587: IFFALSE 35675
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35589: LD_VAR 0 4
35593: PUSH
35594: LD_INT 1
35596: ARRAY
35597: PPUSH
35598: LD_VAR 0 4
35602: PUSH
35603: LD_INT 2
35605: ARRAY
35606: PPUSH
35607: CALL_OW 458
35611: NOT
35612: IFFALSE 35616
// continue ;
35614: GO 35586
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35616: LD_VAR 0 4
35620: PUSH
35621: LD_INT 1
35623: ARRAY
35624: PPUSH
35625: LD_VAR 0 4
35629: PUSH
35630: LD_INT 2
35632: ARRAY
35633: PPUSH
35634: CALL_OW 428
35638: PUSH
35639: LD_VAR 0 5
35643: IN
35644: IFFALSE 35673
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35646: LD_VAR 0 4
35650: PUSH
35651: LD_INT 1
35653: ARRAY
35654: PPUSH
35655: LD_VAR 0 4
35659: PUSH
35660: LD_INT 2
35662: ARRAY
35663: PPUSH
35664: LD_VAR 0 1
35668: PPUSH
35669: CALL_OW 456
// end ;
35673: GO 35586
35675: POP
35676: POP
// end ;
35677: LD_VAR 0 3
35681: RET
// export function Count ( array ) ; var i ; begin
35682: LD_INT 0
35684: PPUSH
35685: PPUSH
// result := 0 ;
35686: LD_ADDR_VAR 0 2
35690: PUSH
35691: LD_INT 0
35693: ST_TO_ADDR
// for i in array do
35694: LD_ADDR_VAR 0 3
35698: PUSH
35699: LD_VAR 0 1
35703: PUSH
35704: FOR_IN
35705: IFFALSE 35729
// if i then
35707: LD_VAR 0 3
35711: IFFALSE 35727
// result := result + 1 ;
35713: LD_ADDR_VAR 0 2
35717: PUSH
35718: LD_VAR 0 2
35722: PUSH
35723: LD_INT 1
35725: PLUS
35726: ST_TO_ADDR
35727: GO 35704
35729: POP
35730: POP
// end ;
35731: LD_VAR 0 2
35735: RET
// export function IsEmpty ( building ) ; begin
35736: LD_INT 0
35738: PPUSH
// if not building then
35739: LD_VAR 0 1
35743: NOT
35744: IFFALSE 35748
// exit ;
35746: GO 35791
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35748: LD_ADDR_VAR 0 2
35752: PUSH
35753: LD_VAR 0 1
35757: PUSH
35758: LD_INT 22
35760: PUSH
35761: LD_VAR 0 1
35765: PPUSH
35766: CALL_OW 255
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 58
35777: PUSH
35778: EMPTY
35779: LIST
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PPUSH
35785: CALL_OW 69
35789: IN
35790: ST_TO_ADDR
// end ;
35791: LD_VAR 0 2
35795: RET
// export function IsNotFull ( building ) ; begin
35796: LD_INT 0
35798: PPUSH
// if not building then
35799: LD_VAR 0 1
35803: NOT
35804: IFFALSE 35808
// exit ;
35806: GO 35827
// result := UnitsInside ( building ) < 6 ;
35808: LD_ADDR_VAR 0 2
35812: PUSH
35813: LD_VAR 0 1
35817: PPUSH
35818: CALL_OW 313
35822: PUSH
35823: LD_INT 6
35825: LESS
35826: ST_TO_ADDR
// end ;
35827: LD_VAR 0 2
35831: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35832: LD_INT 0
35834: PPUSH
35835: PPUSH
35836: PPUSH
35837: PPUSH
// tmp := [ ] ;
35838: LD_ADDR_VAR 0 3
35842: PUSH
35843: EMPTY
35844: ST_TO_ADDR
// list := [ ] ;
35845: LD_ADDR_VAR 0 5
35849: PUSH
35850: EMPTY
35851: ST_TO_ADDR
// for i = 16 to 25 do
35852: LD_ADDR_VAR 0 4
35856: PUSH
35857: DOUBLE
35858: LD_INT 16
35860: DEC
35861: ST_TO_ADDR
35862: LD_INT 25
35864: PUSH
35865: FOR_TO
35866: IFFALSE 35939
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35868: LD_ADDR_VAR 0 3
35872: PUSH
35873: LD_VAR 0 3
35877: PUSH
35878: LD_INT 22
35880: PUSH
35881: LD_VAR 0 1
35885: PPUSH
35886: CALL_OW 255
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 91
35897: PUSH
35898: LD_VAR 0 1
35902: PUSH
35903: LD_INT 6
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 30
35913: PUSH
35914: LD_VAR 0 4
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: LIST
35927: PUSH
35928: EMPTY
35929: LIST
35930: PPUSH
35931: CALL_OW 69
35935: ADD
35936: ST_TO_ADDR
35937: GO 35865
35939: POP
35940: POP
// for i = 1 to tmp do
35941: LD_ADDR_VAR 0 4
35945: PUSH
35946: DOUBLE
35947: LD_INT 1
35949: DEC
35950: ST_TO_ADDR
35951: LD_VAR 0 3
35955: PUSH
35956: FOR_TO
35957: IFFALSE 36045
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35959: LD_ADDR_VAR 0 5
35963: PUSH
35964: LD_VAR 0 5
35968: PUSH
35969: LD_VAR 0 3
35973: PUSH
35974: LD_VAR 0 4
35978: ARRAY
35979: PPUSH
35980: CALL_OW 266
35984: PUSH
35985: LD_VAR 0 3
35989: PUSH
35990: LD_VAR 0 4
35994: ARRAY
35995: PPUSH
35996: CALL_OW 250
36000: PUSH
36001: LD_VAR 0 3
36005: PUSH
36006: LD_VAR 0 4
36010: ARRAY
36011: PPUSH
36012: CALL_OW 251
36016: PUSH
36017: LD_VAR 0 3
36021: PUSH
36022: LD_VAR 0 4
36026: ARRAY
36027: PPUSH
36028: CALL_OW 254
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: PUSH
36039: EMPTY
36040: LIST
36041: ADD
36042: ST_TO_ADDR
36043: GO 35956
36045: POP
36046: POP
// result := list ;
36047: LD_ADDR_VAR 0 2
36051: PUSH
36052: LD_VAR 0 5
36056: ST_TO_ADDR
// end ;
36057: LD_VAR 0 2
36061: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36062: LD_INT 0
36064: PPUSH
36065: PPUSH
36066: PPUSH
36067: PPUSH
36068: PPUSH
36069: PPUSH
36070: PPUSH
// if not factory then
36071: LD_VAR 0 1
36075: NOT
36076: IFFALSE 36080
// exit ;
36078: GO 36673
// if control = control_apeman then
36080: LD_VAR 0 4
36084: PUSH
36085: LD_INT 5
36087: EQUAL
36088: IFFALSE 36197
// begin tmp := UnitsInside ( factory ) ;
36090: LD_ADDR_VAR 0 8
36094: PUSH
36095: LD_VAR 0 1
36099: PPUSH
36100: CALL_OW 313
36104: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36105: LD_VAR 0 8
36109: PPUSH
36110: LD_INT 25
36112: PUSH
36113: LD_INT 12
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PPUSH
36120: CALL_OW 72
36124: NOT
36125: IFFALSE 36135
// control := control_manual ;
36127: LD_ADDR_VAR 0 4
36131: PUSH
36132: LD_INT 1
36134: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36135: LD_ADDR_VAR 0 8
36139: PUSH
36140: LD_VAR 0 1
36144: PPUSH
36145: CALL 35832 0 1
36149: ST_TO_ADDR
// if tmp then
36150: LD_VAR 0 8
36154: IFFALSE 36197
// begin for i in tmp do
36156: LD_ADDR_VAR 0 7
36160: PUSH
36161: LD_VAR 0 8
36165: PUSH
36166: FOR_IN
36167: IFFALSE 36195
// if i [ 1 ] = b_ext_radio then
36169: LD_VAR 0 7
36173: PUSH
36174: LD_INT 1
36176: ARRAY
36177: PUSH
36178: LD_INT 22
36180: EQUAL
36181: IFFALSE 36193
// begin control := control_remote ;
36183: LD_ADDR_VAR 0 4
36187: PUSH
36188: LD_INT 2
36190: ST_TO_ADDR
// break ;
36191: GO 36195
// end ;
36193: GO 36166
36195: POP
36196: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36197: LD_VAR 0 1
36201: PPUSH
36202: LD_VAR 0 2
36206: PPUSH
36207: LD_VAR 0 3
36211: PPUSH
36212: LD_VAR 0 4
36216: PPUSH
36217: LD_VAR 0 5
36221: PPUSH
36222: CALL_OW 448
36226: IFFALSE 36261
// begin result := [ chassis , engine , control , weapon ] ;
36228: LD_ADDR_VAR 0 6
36232: PUSH
36233: LD_VAR 0 2
36237: PUSH
36238: LD_VAR 0 3
36242: PUSH
36243: LD_VAR 0 4
36247: PUSH
36248: LD_VAR 0 5
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: ST_TO_ADDR
// exit ;
36259: GO 36673
// end ; _chassis := AvailableChassisList ( factory ) ;
36261: LD_ADDR_VAR 0 9
36265: PUSH
36266: LD_VAR 0 1
36270: PPUSH
36271: CALL_OW 475
36275: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36276: LD_ADDR_VAR 0 11
36280: PUSH
36281: LD_VAR 0 1
36285: PPUSH
36286: CALL_OW 476
36290: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36291: LD_ADDR_VAR 0 12
36295: PUSH
36296: LD_VAR 0 1
36300: PPUSH
36301: CALL_OW 477
36305: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36306: LD_ADDR_VAR 0 10
36310: PUSH
36311: LD_VAR 0 1
36315: PPUSH
36316: CALL_OW 478
36320: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36321: LD_VAR 0 9
36325: NOT
36326: PUSH
36327: LD_VAR 0 11
36331: NOT
36332: OR
36333: PUSH
36334: LD_VAR 0 12
36338: NOT
36339: OR
36340: PUSH
36341: LD_VAR 0 10
36345: NOT
36346: OR
36347: IFFALSE 36382
// begin result := [ chassis , engine , control , weapon ] ;
36349: LD_ADDR_VAR 0 6
36353: PUSH
36354: LD_VAR 0 2
36358: PUSH
36359: LD_VAR 0 3
36363: PUSH
36364: LD_VAR 0 4
36368: PUSH
36369: LD_VAR 0 5
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: ST_TO_ADDR
// exit ;
36380: GO 36673
// end ; if not chassis in _chassis then
36382: LD_VAR 0 2
36386: PUSH
36387: LD_VAR 0 9
36391: IN
36392: NOT
36393: IFFALSE 36419
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36395: LD_ADDR_VAR 0 2
36399: PUSH
36400: LD_VAR 0 9
36404: PUSH
36405: LD_INT 1
36407: PPUSH
36408: LD_VAR 0 9
36412: PPUSH
36413: CALL_OW 12
36417: ARRAY
36418: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36419: LD_VAR 0 2
36423: PPUSH
36424: LD_VAR 0 3
36428: PPUSH
36429: CALL 36678 0 2
36433: NOT
36434: IFFALSE 36493
// repeat engine := _engine [ 1 ] ;
36436: LD_ADDR_VAR 0 3
36440: PUSH
36441: LD_VAR 0 11
36445: PUSH
36446: LD_INT 1
36448: ARRAY
36449: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36450: LD_ADDR_VAR 0 11
36454: PUSH
36455: LD_VAR 0 11
36459: PPUSH
36460: LD_INT 1
36462: PPUSH
36463: CALL_OW 3
36467: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36468: LD_VAR 0 2
36472: PPUSH
36473: LD_VAR 0 3
36477: PPUSH
36478: CALL 36678 0 2
36482: PUSH
36483: LD_VAR 0 11
36487: PUSH
36488: EMPTY
36489: EQUAL
36490: OR
36491: IFFALSE 36436
// if not control in _control then
36493: LD_VAR 0 4
36497: PUSH
36498: LD_VAR 0 12
36502: IN
36503: NOT
36504: IFFALSE 36530
// control := _control [ rand ( 1 , _control ) ] ;
36506: LD_ADDR_VAR 0 4
36510: PUSH
36511: LD_VAR 0 12
36515: PUSH
36516: LD_INT 1
36518: PPUSH
36519: LD_VAR 0 12
36523: PPUSH
36524: CALL_OW 12
36528: ARRAY
36529: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36530: LD_VAR 0 2
36534: PPUSH
36535: LD_VAR 0 5
36539: PPUSH
36540: CALL 36898 0 2
36544: NOT
36545: IFFALSE 36604
// repeat weapon := _weapon [ 1 ] ;
36547: LD_ADDR_VAR 0 5
36551: PUSH
36552: LD_VAR 0 10
36556: PUSH
36557: LD_INT 1
36559: ARRAY
36560: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36561: LD_ADDR_VAR 0 10
36565: PUSH
36566: LD_VAR 0 10
36570: PPUSH
36571: LD_INT 1
36573: PPUSH
36574: CALL_OW 3
36578: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36579: LD_VAR 0 2
36583: PPUSH
36584: LD_VAR 0 5
36588: PPUSH
36589: CALL 36898 0 2
36593: PUSH
36594: LD_VAR 0 10
36598: PUSH
36599: EMPTY
36600: EQUAL
36601: OR
36602: IFFALSE 36547
// result := [ ] ;
36604: LD_ADDR_VAR 0 6
36608: PUSH
36609: EMPTY
36610: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36611: LD_VAR 0 1
36615: PPUSH
36616: LD_VAR 0 2
36620: PPUSH
36621: LD_VAR 0 3
36625: PPUSH
36626: LD_VAR 0 4
36630: PPUSH
36631: LD_VAR 0 5
36635: PPUSH
36636: CALL_OW 448
36640: IFFALSE 36673
// result := [ chassis , engine , control , weapon ] ;
36642: LD_ADDR_VAR 0 6
36646: PUSH
36647: LD_VAR 0 2
36651: PUSH
36652: LD_VAR 0 3
36656: PUSH
36657: LD_VAR 0 4
36661: PUSH
36662: LD_VAR 0 5
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: ST_TO_ADDR
// end ;
36673: LD_VAR 0 6
36677: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36678: LD_INT 0
36680: PPUSH
// if not chassis or not engine then
36681: LD_VAR 0 1
36685: NOT
36686: PUSH
36687: LD_VAR 0 2
36691: NOT
36692: OR
36693: IFFALSE 36697
// exit ;
36695: GO 36893
// case engine of engine_solar :
36697: LD_VAR 0 2
36701: PUSH
36702: LD_INT 2
36704: DOUBLE
36705: EQUAL
36706: IFTRUE 36710
36708: GO 36748
36710: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36711: LD_ADDR_VAR 0 3
36715: PUSH
36716: LD_INT 11
36718: PUSH
36719: LD_INT 12
36721: PUSH
36722: LD_INT 13
36724: PUSH
36725: LD_INT 14
36727: PUSH
36728: LD_INT 1
36730: PUSH
36731: LD_INT 2
36733: PUSH
36734: LD_INT 3
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: ST_TO_ADDR
36746: GO 36877
36748: LD_INT 1
36750: DOUBLE
36751: EQUAL
36752: IFTRUE 36756
36754: GO 36818
36756: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36757: LD_ADDR_VAR 0 3
36761: PUSH
36762: LD_INT 11
36764: PUSH
36765: LD_INT 12
36767: PUSH
36768: LD_INT 13
36770: PUSH
36771: LD_INT 14
36773: PUSH
36774: LD_INT 1
36776: PUSH
36777: LD_INT 2
36779: PUSH
36780: LD_INT 3
36782: PUSH
36783: LD_INT 4
36785: PUSH
36786: LD_INT 5
36788: PUSH
36789: LD_INT 21
36791: PUSH
36792: LD_INT 23
36794: PUSH
36795: LD_INT 22
36797: PUSH
36798: LD_INT 24
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: ST_TO_ADDR
36816: GO 36877
36818: LD_INT 3
36820: DOUBLE
36821: EQUAL
36822: IFTRUE 36826
36824: GO 36876
36826: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36827: LD_ADDR_VAR 0 3
36831: PUSH
36832: LD_INT 13
36834: PUSH
36835: LD_INT 14
36837: PUSH
36838: LD_INT 2
36840: PUSH
36841: LD_INT 3
36843: PUSH
36844: LD_INT 4
36846: PUSH
36847: LD_INT 5
36849: PUSH
36850: LD_INT 21
36852: PUSH
36853: LD_INT 22
36855: PUSH
36856: LD_INT 23
36858: PUSH
36859: LD_INT 24
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: ST_TO_ADDR
36874: GO 36877
36876: POP
// result := ( chassis in result ) ;
36877: LD_ADDR_VAR 0 3
36881: PUSH
36882: LD_VAR 0 1
36886: PUSH
36887: LD_VAR 0 3
36891: IN
36892: ST_TO_ADDR
// end ;
36893: LD_VAR 0 3
36897: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36898: LD_INT 0
36900: PPUSH
// if not chassis or not weapon then
36901: LD_VAR 0 1
36905: NOT
36906: PUSH
36907: LD_VAR 0 2
36911: NOT
36912: OR
36913: IFFALSE 36917
// exit ;
36915: GO 37979
// case weapon of us_machine_gun :
36917: LD_VAR 0 2
36921: PUSH
36922: LD_INT 2
36924: DOUBLE
36925: EQUAL
36926: IFTRUE 36930
36928: GO 36960
36930: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36931: LD_ADDR_VAR 0 3
36935: PUSH
36936: LD_INT 1
36938: PUSH
36939: LD_INT 2
36941: PUSH
36942: LD_INT 3
36944: PUSH
36945: LD_INT 4
36947: PUSH
36948: LD_INT 5
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: ST_TO_ADDR
36958: GO 37963
36960: LD_INT 3
36962: DOUBLE
36963: EQUAL
36964: IFTRUE 36968
36966: GO 36998
36968: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36969: LD_ADDR_VAR 0 3
36973: PUSH
36974: LD_INT 1
36976: PUSH
36977: LD_INT 2
36979: PUSH
36980: LD_INT 3
36982: PUSH
36983: LD_INT 4
36985: PUSH
36986: LD_INT 5
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: ST_TO_ADDR
36996: GO 37963
36998: LD_INT 11
37000: DOUBLE
37001: EQUAL
37002: IFTRUE 37006
37004: GO 37036
37006: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37007: LD_ADDR_VAR 0 3
37011: PUSH
37012: LD_INT 1
37014: PUSH
37015: LD_INT 2
37017: PUSH
37018: LD_INT 3
37020: PUSH
37021: LD_INT 4
37023: PUSH
37024: LD_INT 5
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: ST_TO_ADDR
37034: GO 37963
37036: LD_INT 4
37038: DOUBLE
37039: EQUAL
37040: IFTRUE 37044
37042: GO 37070
37044: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37045: LD_ADDR_VAR 0 3
37049: PUSH
37050: LD_INT 2
37052: PUSH
37053: LD_INT 3
37055: PUSH
37056: LD_INT 4
37058: PUSH
37059: LD_INT 5
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: ST_TO_ADDR
37068: GO 37963
37070: LD_INT 5
37072: DOUBLE
37073: EQUAL
37074: IFTRUE 37078
37076: GO 37104
37078: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37079: LD_ADDR_VAR 0 3
37083: PUSH
37084: LD_INT 2
37086: PUSH
37087: LD_INT 3
37089: PUSH
37090: LD_INT 4
37092: PUSH
37093: LD_INT 5
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: ST_TO_ADDR
37102: GO 37963
37104: LD_INT 9
37106: DOUBLE
37107: EQUAL
37108: IFTRUE 37112
37110: GO 37138
37112: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37113: LD_ADDR_VAR 0 3
37117: PUSH
37118: LD_INT 2
37120: PUSH
37121: LD_INT 3
37123: PUSH
37124: LD_INT 4
37126: PUSH
37127: LD_INT 5
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: ST_TO_ADDR
37136: GO 37963
37138: LD_INT 7
37140: DOUBLE
37141: EQUAL
37142: IFTRUE 37146
37144: GO 37172
37146: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37147: LD_ADDR_VAR 0 3
37151: PUSH
37152: LD_INT 2
37154: PUSH
37155: LD_INT 3
37157: PUSH
37158: LD_INT 4
37160: PUSH
37161: LD_INT 5
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: ST_TO_ADDR
37170: GO 37963
37172: LD_INT 12
37174: DOUBLE
37175: EQUAL
37176: IFTRUE 37180
37178: GO 37206
37180: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37181: LD_ADDR_VAR 0 3
37185: PUSH
37186: LD_INT 2
37188: PUSH
37189: LD_INT 3
37191: PUSH
37192: LD_INT 4
37194: PUSH
37195: LD_INT 5
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: ST_TO_ADDR
37204: GO 37963
37206: LD_INT 13
37208: DOUBLE
37209: EQUAL
37210: IFTRUE 37214
37212: GO 37240
37214: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37215: LD_ADDR_VAR 0 3
37219: PUSH
37220: LD_INT 2
37222: PUSH
37223: LD_INT 3
37225: PUSH
37226: LD_INT 4
37228: PUSH
37229: LD_INT 5
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: ST_TO_ADDR
37238: GO 37963
37240: LD_INT 14
37242: DOUBLE
37243: EQUAL
37244: IFTRUE 37248
37246: GO 37266
37248: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37249: LD_ADDR_VAR 0 3
37253: PUSH
37254: LD_INT 4
37256: PUSH
37257: LD_INT 5
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: ST_TO_ADDR
37264: GO 37963
37266: LD_INT 6
37268: DOUBLE
37269: EQUAL
37270: IFTRUE 37274
37272: GO 37292
37274: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37275: LD_ADDR_VAR 0 3
37279: PUSH
37280: LD_INT 4
37282: PUSH
37283: LD_INT 5
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: ST_TO_ADDR
37290: GO 37963
37292: LD_INT 10
37294: DOUBLE
37295: EQUAL
37296: IFTRUE 37300
37298: GO 37318
37300: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37301: LD_ADDR_VAR 0 3
37305: PUSH
37306: LD_INT 4
37308: PUSH
37309: LD_INT 5
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: ST_TO_ADDR
37316: GO 37963
37318: LD_INT 22
37320: DOUBLE
37321: EQUAL
37322: IFTRUE 37326
37324: GO 37352
37326: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37327: LD_ADDR_VAR 0 3
37331: PUSH
37332: LD_INT 11
37334: PUSH
37335: LD_INT 12
37337: PUSH
37338: LD_INT 13
37340: PUSH
37341: LD_INT 14
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: ST_TO_ADDR
37350: GO 37963
37352: LD_INT 23
37354: DOUBLE
37355: EQUAL
37356: IFTRUE 37360
37358: GO 37386
37360: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37361: LD_ADDR_VAR 0 3
37365: PUSH
37366: LD_INT 11
37368: PUSH
37369: LD_INT 12
37371: PUSH
37372: LD_INT 13
37374: PUSH
37375: LD_INT 14
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: ST_TO_ADDR
37384: GO 37963
37386: LD_INT 24
37388: DOUBLE
37389: EQUAL
37390: IFTRUE 37394
37392: GO 37420
37394: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37395: LD_ADDR_VAR 0 3
37399: PUSH
37400: LD_INT 11
37402: PUSH
37403: LD_INT 12
37405: PUSH
37406: LD_INT 13
37408: PUSH
37409: LD_INT 14
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: ST_TO_ADDR
37418: GO 37963
37420: LD_INT 30
37422: DOUBLE
37423: EQUAL
37424: IFTRUE 37428
37426: GO 37454
37428: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37429: LD_ADDR_VAR 0 3
37433: PUSH
37434: LD_INT 11
37436: PUSH
37437: LD_INT 12
37439: PUSH
37440: LD_INT 13
37442: PUSH
37443: LD_INT 14
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: ST_TO_ADDR
37452: GO 37963
37454: LD_INT 25
37456: DOUBLE
37457: EQUAL
37458: IFTRUE 37462
37460: GO 37480
37462: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37463: LD_ADDR_VAR 0 3
37467: PUSH
37468: LD_INT 13
37470: PUSH
37471: LD_INT 14
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: ST_TO_ADDR
37478: GO 37963
37480: LD_INT 27
37482: DOUBLE
37483: EQUAL
37484: IFTRUE 37488
37486: GO 37506
37488: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
37489: LD_ADDR_VAR 0 3
37493: PUSH
37494: LD_INT 13
37496: PUSH
37497: LD_INT 14
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: ST_TO_ADDR
37504: GO 37963
37506: LD_EXP 41
37510: DOUBLE
37511: EQUAL
37512: IFTRUE 37516
37514: GO 37542
37516: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37517: LD_ADDR_VAR 0 3
37521: PUSH
37522: LD_INT 11
37524: PUSH
37525: LD_INT 12
37527: PUSH
37528: LD_INT 13
37530: PUSH
37531: LD_INT 14
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: ST_TO_ADDR
37540: GO 37963
37542: LD_INT 28
37544: DOUBLE
37545: EQUAL
37546: IFTRUE 37550
37548: GO 37568
37550: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37551: LD_ADDR_VAR 0 3
37555: PUSH
37556: LD_INT 13
37558: PUSH
37559: LD_INT 14
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: ST_TO_ADDR
37566: GO 37963
37568: LD_INT 29
37570: DOUBLE
37571: EQUAL
37572: IFTRUE 37576
37574: GO 37594
37576: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37577: LD_ADDR_VAR 0 3
37581: PUSH
37582: LD_INT 13
37584: PUSH
37585: LD_INT 14
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: ST_TO_ADDR
37592: GO 37963
37594: LD_INT 31
37596: DOUBLE
37597: EQUAL
37598: IFTRUE 37602
37600: GO 37620
37602: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37603: LD_ADDR_VAR 0 3
37607: PUSH
37608: LD_INT 13
37610: PUSH
37611: LD_INT 14
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: ST_TO_ADDR
37618: GO 37963
37620: LD_INT 26
37622: DOUBLE
37623: EQUAL
37624: IFTRUE 37628
37626: GO 37646
37628: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37629: LD_ADDR_VAR 0 3
37633: PUSH
37634: LD_INT 13
37636: PUSH
37637: LD_INT 14
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: ST_TO_ADDR
37644: GO 37963
37646: LD_INT 42
37648: DOUBLE
37649: EQUAL
37650: IFTRUE 37654
37652: GO 37680
37654: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37655: LD_ADDR_VAR 0 3
37659: PUSH
37660: LD_INT 21
37662: PUSH
37663: LD_INT 22
37665: PUSH
37666: LD_INT 23
37668: PUSH
37669: LD_INT 24
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: ST_TO_ADDR
37678: GO 37963
37680: LD_INT 43
37682: DOUBLE
37683: EQUAL
37684: IFTRUE 37688
37686: GO 37714
37688: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37689: LD_ADDR_VAR 0 3
37693: PUSH
37694: LD_INT 21
37696: PUSH
37697: LD_INT 22
37699: PUSH
37700: LD_INT 23
37702: PUSH
37703: LD_INT 24
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: ST_TO_ADDR
37712: GO 37963
37714: LD_INT 44
37716: DOUBLE
37717: EQUAL
37718: IFTRUE 37722
37720: GO 37748
37722: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37723: LD_ADDR_VAR 0 3
37727: PUSH
37728: LD_INT 21
37730: PUSH
37731: LD_INT 22
37733: PUSH
37734: LD_INT 23
37736: PUSH
37737: LD_INT 24
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: ST_TO_ADDR
37746: GO 37963
37748: LD_INT 45
37750: DOUBLE
37751: EQUAL
37752: IFTRUE 37756
37754: GO 37782
37756: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37757: LD_ADDR_VAR 0 3
37761: PUSH
37762: LD_INT 21
37764: PUSH
37765: LD_INT 22
37767: PUSH
37768: LD_INT 23
37770: PUSH
37771: LD_INT 24
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: ST_TO_ADDR
37780: GO 37963
37782: LD_INT 49
37784: DOUBLE
37785: EQUAL
37786: IFTRUE 37790
37788: GO 37816
37790: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37791: LD_ADDR_VAR 0 3
37795: PUSH
37796: LD_INT 21
37798: PUSH
37799: LD_INT 22
37801: PUSH
37802: LD_INT 23
37804: PUSH
37805: LD_INT 24
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: ST_TO_ADDR
37814: GO 37963
37816: LD_INT 51
37818: DOUBLE
37819: EQUAL
37820: IFTRUE 37824
37822: GO 37850
37824: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37825: LD_ADDR_VAR 0 3
37829: PUSH
37830: LD_INT 21
37832: PUSH
37833: LD_INT 22
37835: PUSH
37836: LD_INT 23
37838: PUSH
37839: LD_INT 24
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: ST_TO_ADDR
37848: GO 37963
37850: LD_INT 52
37852: DOUBLE
37853: EQUAL
37854: IFTRUE 37858
37856: GO 37884
37858: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37859: LD_ADDR_VAR 0 3
37863: PUSH
37864: LD_INT 21
37866: PUSH
37867: LD_INT 22
37869: PUSH
37870: LD_INT 23
37872: PUSH
37873: LD_INT 24
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: ST_TO_ADDR
37882: GO 37963
37884: LD_INT 53
37886: DOUBLE
37887: EQUAL
37888: IFTRUE 37892
37890: GO 37910
37892: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37893: LD_ADDR_VAR 0 3
37897: PUSH
37898: LD_INT 23
37900: PUSH
37901: LD_INT 24
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: ST_TO_ADDR
37908: GO 37963
37910: LD_INT 46
37912: DOUBLE
37913: EQUAL
37914: IFTRUE 37918
37916: GO 37936
37918: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37919: LD_ADDR_VAR 0 3
37923: PUSH
37924: LD_INT 23
37926: PUSH
37927: LD_INT 24
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: ST_TO_ADDR
37934: GO 37963
37936: LD_INT 47
37938: DOUBLE
37939: EQUAL
37940: IFTRUE 37944
37942: GO 37962
37944: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37945: LD_ADDR_VAR 0 3
37949: PUSH
37950: LD_INT 23
37952: PUSH
37953: LD_INT 24
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: ST_TO_ADDR
37960: GO 37963
37962: POP
// result := ( chassis in result ) ;
37963: LD_ADDR_VAR 0 3
37967: PUSH
37968: LD_VAR 0 1
37972: PUSH
37973: LD_VAR 0 3
37977: IN
37978: ST_TO_ADDR
// end ;
37979: LD_VAR 0 3
37983: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37984: LD_INT 0
37986: PPUSH
37987: PPUSH
37988: PPUSH
37989: PPUSH
37990: PPUSH
37991: PPUSH
37992: PPUSH
// result := array ;
37993: LD_ADDR_VAR 0 5
37997: PUSH
37998: LD_VAR 0 1
38002: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38003: LD_VAR 0 1
38007: NOT
38008: PUSH
38009: LD_VAR 0 2
38013: NOT
38014: OR
38015: PUSH
38016: LD_VAR 0 3
38020: NOT
38021: OR
38022: PUSH
38023: LD_VAR 0 2
38027: PUSH
38028: LD_VAR 0 1
38032: GREATER
38033: OR
38034: PUSH
38035: LD_VAR 0 3
38039: PUSH
38040: LD_VAR 0 1
38044: GREATER
38045: OR
38046: IFFALSE 38050
// exit ;
38048: GO 38346
// if direction then
38050: LD_VAR 0 4
38054: IFFALSE 38118
// begin d := 1 ;
38056: LD_ADDR_VAR 0 9
38060: PUSH
38061: LD_INT 1
38063: ST_TO_ADDR
// if i_from > i_to then
38064: LD_VAR 0 2
38068: PUSH
38069: LD_VAR 0 3
38073: GREATER
38074: IFFALSE 38100
// length := ( array - i_from ) + i_to else
38076: LD_ADDR_VAR 0 11
38080: PUSH
38081: LD_VAR 0 1
38085: PUSH
38086: LD_VAR 0 2
38090: MINUS
38091: PUSH
38092: LD_VAR 0 3
38096: PLUS
38097: ST_TO_ADDR
38098: GO 38116
// length := i_to - i_from ;
38100: LD_ADDR_VAR 0 11
38104: PUSH
38105: LD_VAR 0 3
38109: PUSH
38110: LD_VAR 0 2
38114: MINUS
38115: ST_TO_ADDR
// end else
38116: GO 38179
// begin d := - 1 ;
38118: LD_ADDR_VAR 0 9
38122: PUSH
38123: LD_INT 1
38125: NEG
38126: ST_TO_ADDR
// if i_from > i_to then
38127: LD_VAR 0 2
38131: PUSH
38132: LD_VAR 0 3
38136: GREATER
38137: IFFALSE 38157
// length := i_from - i_to else
38139: LD_ADDR_VAR 0 11
38143: PUSH
38144: LD_VAR 0 2
38148: PUSH
38149: LD_VAR 0 3
38153: MINUS
38154: ST_TO_ADDR
38155: GO 38179
// length := ( array - i_to ) + i_from ;
38157: LD_ADDR_VAR 0 11
38161: PUSH
38162: LD_VAR 0 1
38166: PUSH
38167: LD_VAR 0 3
38171: MINUS
38172: PUSH
38173: LD_VAR 0 2
38177: PLUS
38178: ST_TO_ADDR
// end ; if not length then
38179: LD_VAR 0 11
38183: NOT
38184: IFFALSE 38188
// exit ;
38186: GO 38346
// tmp := array ;
38188: LD_ADDR_VAR 0 10
38192: PUSH
38193: LD_VAR 0 1
38197: ST_TO_ADDR
// for i = 1 to length do
38198: LD_ADDR_VAR 0 6
38202: PUSH
38203: DOUBLE
38204: LD_INT 1
38206: DEC
38207: ST_TO_ADDR
38208: LD_VAR 0 11
38212: PUSH
38213: FOR_TO
38214: IFFALSE 38334
// begin for j = 1 to array do
38216: LD_ADDR_VAR 0 7
38220: PUSH
38221: DOUBLE
38222: LD_INT 1
38224: DEC
38225: ST_TO_ADDR
38226: LD_VAR 0 1
38230: PUSH
38231: FOR_TO
38232: IFFALSE 38320
// begin k := j + d ;
38234: LD_ADDR_VAR 0 8
38238: PUSH
38239: LD_VAR 0 7
38243: PUSH
38244: LD_VAR 0 9
38248: PLUS
38249: ST_TO_ADDR
// if k > array then
38250: LD_VAR 0 8
38254: PUSH
38255: LD_VAR 0 1
38259: GREATER
38260: IFFALSE 38270
// k := 1 ;
38262: LD_ADDR_VAR 0 8
38266: PUSH
38267: LD_INT 1
38269: ST_TO_ADDR
// if not k then
38270: LD_VAR 0 8
38274: NOT
38275: IFFALSE 38287
// k := array ;
38277: LD_ADDR_VAR 0 8
38281: PUSH
38282: LD_VAR 0 1
38286: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38287: LD_ADDR_VAR 0 10
38291: PUSH
38292: LD_VAR 0 10
38296: PPUSH
38297: LD_VAR 0 8
38301: PPUSH
38302: LD_VAR 0 1
38306: PUSH
38307: LD_VAR 0 7
38311: ARRAY
38312: PPUSH
38313: CALL_OW 1
38317: ST_TO_ADDR
// end ;
38318: GO 38231
38320: POP
38321: POP
// array := tmp ;
38322: LD_ADDR_VAR 0 1
38326: PUSH
38327: LD_VAR 0 10
38331: ST_TO_ADDR
// end ;
38332: GO 38213
38334: POP
38335: POP
// result := array ;
38336: LD_ADDR_VAR 0 5
38340: PUSH
38341: LD_VAR 0 1
38345: ST_TO_ADDR
// end ;
38346: LD_VAR 0 5
38350: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38351: LD_INT 0
38353: PPUSH
38354: PPUSH
// result := 0 ;
38355: LD_ADDR_VAR 0 3
38359: PUSH
38360: LD_INT 0
38362: ST_TO_ADDR
// if not array or not value in array then
38363: LD_VAR 0 1
38367: NOT
38368: PUSH
38369: LD_VAR 0 2
38373: PUSH
38374: LD_VAR 0 1
38378: IN
38379: NOT
38380: OR
38381: IFFALSE 38385
// exit ;
38383: GO 38439
// for i = 1 to array do
38385: LD_ADDR_VAR 0 4
38389: PUSH
38390: DOUBLE
38391: LD_INT 1
38393: DEC
38394: ST_TO_ADDR
38395: LD_VAR 0 1
38399: PUSH
38400: FOR_TO
38401: IFFALSE 38437
// if value = array [ i ] then
38403: LD_VAR 0 2
38407: PUSH
38408: LD_VAR 0 1
38412: PUSH
38413: LD_VAR 0 4
38417: ARRAY
38418: EQUAL
38419: IFFALSE 38435
// begin result := i ;
38421: LD_ADDR_VAR 0 3
38425: PUSH
38426: LD_VAR 0 4
38430: ST_TO_ADDR
// exit ;
38431: POP
38432: POP
38433: GO 38439
// end ;
38435: GO 38400
38437: POP
38438: POP
// end ;
38439: LD_VAR 0 3
38443: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38444: LD_INT 0
38446: PPUSH
// vc_chassis := chassis ;
38447: LD_ADDR_OWVAR 37
38451: PUSH
38452: LD_VAR 0 1
38456: ST_TO_ADDR
// vc_engine := engine ;
38457: LD_ADDR_OWVAR 39
38461: PUSH
38462: LD_VAR 0 2
38466: ST_TO_ADDR
// vc_control := control ;
38467: LD_ADDR_OWVAR 38
38471: PUSH
38472: LD_VAR 0 3
38476: ST_TO_ADDR
// vc_weapon := weapon ;
38477: LD_ADDR_OWVAR 40
38481: PUSH
38482: LD_VAR 0 4
38486: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38487: LD_ADDR_OWVAR 41
38491: PUSH
38492: LD_VAR 0 5
38496: ST_TO_ADDR
// end ;
38497: LD_VAR 0 6
38501: RET
// export function WantPlant ( unit ) ; var task ; begin
38502: LD_INT 0
38504: PPUSH
38505: PPUSH
// result := false ;
38506: LD_ADDR_VAR 0 2
38510: PUSH
38511: LD_INT 0
38513: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38514: LD_ADDR_VAR 0 3
38518: PUSH
38519: LD_VAR 0 1
38523: PPUSH
38524: CALL_OW 437
38528: ST_TO_ADDR
// if task then
38529: LD_VAR 0 3
38533: IFFALSE 38561
// if task [ 1 ] [ 1 ] = p then
38535: LD_VAR 0 3
38539: PUSH
38540: LD_INT 1
38542: ARRAY
38543: PUSH
38544: LD_INT 1
38546: ARRAY
38547: PUSH
38548: LD_STRING p
38550: EQUAL
38551: IFFALSE 38561
// result := true ;
38553: LD_ADDR_VAR 0 2
38557: PUSH
38558: LD_INT 1
38560: ST_TO_ADDR
// end ;
38561: LD_VAR 0 2
38565: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38566: LD_INT 0
38568: PPUSH
38569: PPUSH
38570: PPUSH
38571: PPUSH
// if pos < 1 then
38572: LD_VAR 0 2
38576: PUSH
38577: LD_INT 1
38579: LESS
38580: IFFALSE 38584
// exit ;
38582: GO 38887
// if pos = 1 then
38584: LD_VAR 0 2
38588: PUSH
38589: LD_INT 1
38591: EQUAL
38592: IFFALSE 38625
// result := Replace ( arr , pos [ 1 ] , value ) else
38594: LD_ADDR_VAR 0 4
38598: PUSH
38599: LD_VAR 0 1
38603: PPUSH
38604: LD_VAR 0 2
38608: PUSH
38609: LD_INT 1
38611: ARRAY
38612: PPUSH
38613: LD_VAR 0 3
38617: PPUSH
38618: CALL_OW 1
38622: ST_TO_ADDR
38623: GO 38887
// begin tmp := arr ;
38625: LD_ADDR_VAR 0 6
38629: PUSH
38630: LD_VAR 0 1
38634: ST_TO_ADDR
// s_arr := [ tmp ] ;
38635: LD_ADDR_VAR 0 7
38639: PUSH
38640: LD_VAR 0 6
38644: PUSH
38645: EMPTY
38646: LIST
38647: ST_TO_ADDR
// for i = 1 to pos - 1 do
38648: LD_ADDR_VAR 0 5
38652: PUSH
38653: DOUBLE
38654: LD_INT 1
38656: DEC
38657: ST_TO_ADDR
38658: LD_VAR 0 2
38662: PUSH
38663: LD_INT 1
38665: MINUS
38666: PUSH
38667: FOR_TO
38668: IFFALSE 38713
// begin tmp := tmp [ pos [ i ] ] ;
38670: LD_ADDR_VAR 0 6
38674: PUSH
38675: LD_VAR 0 6
38679: PUSH
38680: LD_VAR 0 2
38684: PUSH
38685: LD_VAR 0 5
38689: ARRAY
38690: ARRAY
38691: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38692: LD_ADDR_VAR 0 7
38696: PUSH
38697: LD_VAR 0 7
38701: PUSH
38702: LD_VAR 0 6
38706: PUSH
38707: EMPTY
38708: LIST
38709: ADD
38710: ST_TO_ADDR
// end ;
38711: GO 38667
38713: POP
38714: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38715: LD_ADDR_VAR 0 6
38719: PUSH
38720: LD_VAR 0 6
38724: PPUSH
38725: LD_VAR 0 2
38729: PUSH
38730: LD_VAR 0 2
38734: ARRAY
38735: PPUSH
38736: LD_VAR 0 3
38740: PPUSH
38741: CALL_OW 1
38745: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38746: LD_ADDR_VAR 0 7
38750: PUSH
38751: LD_VAR 0 7
38755: PPUSH
38756: LD_VAR 0 7
38760: PPUSH
38761: LD_VAR 0 6
38765: PPUSH
38766: CALL_OW 1
38770: ST_TO_ADDR
// for i = s_arr downto 2 do
38771: LD_ADDR_VAR 0 5
38775: PUSH
38776: DOUBLE
38777: LD_VAR 0 7
38781: INC
38782: ST_TO_ADDR
38783: LD_INT 2
38785: PUSH
38786: FOR_DOWNTO
38787: IFFALSE 38871
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38789: LD_ADDR_VAR 0 6
38793: PUSH
38794: LD_VAR 0 7
38798: PUSH
38799: LD_VAR 0 5
38803: PUSH
38804: LD_INT 1
38806: MINUS
38807: ARRAY
38808: PPUSH
38809: LD_VAR 0 2
38813: PUSH
38814: LD_VAR 0 5
38818: PUSH
38819: LD_INT 1
38821: MINUS
38822: ARRAY
38823: PPUSH
38824: LD_VAR 0 7
38828: PUSH
38829: LD_VAR 0 5
38833: ARRAY
38834: PPUSH
38835: CALL_OW 1
38839: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38840: LD_ADDR_VAR 0 7
38844: PUSH
38845: LD_VAR 0 7
38849: PPUSH
38850: LD_VAR 0 5
38854: PUSH
38855: LD_INT 1
38857: MINUS
38858: PPUSH
38859: LD_VAR 0 6
38863: PPUSH
38864: CALL_OW 1
38868: ST_TO_ADDR
// end ;
38869: GO 38786
38871: POP
38872: POP
// result := s_arr [ 1 ] ;
38873: LD_ADDR_VAR 0 4
38877: PUSH
38878: LD_VAR 0 7
38882: PUSH
38883: LD_INT 1
38885: ARRAY
38886: ST_TO_ADDR
// end ; end ;
38887: LD_VAR 0 4
38891: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38892: LD_INT 0
38894: PPUSH
38895: PPUSH
// if not list then
38896: LD_VAR 0 1
38900: NOT
38901: IFFALSE 38905
// exit ;
38903: GO 38996
// i := list [ pos1 ] ;
38905: LD_ADDR_VAR 0 5
38909: PUSH
38910: LD_VAR 0 1
38914: PUSH
38915: LD_VAR 0 2
38919: ARRAY
38920: ST_TO_ADDR
// if not i then
38921: LD_VAR 0 5
38925: NOT
38926: IFFALSE 38930
// exit ;
38928: GO 38996
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38930: LD_ADDR_VAR 0 1
38934: PUSH
38935: LD_VAR 0 1
38939: PPUSH
38940: LD_VAR 0 2
38944: PPUSH
38945: LD_VAR 0 1
38949: PUSH
38950: LD_VAR 0 3
38954: ARRAY
38955: PPUSH
38956: CALL_OW 1
38960: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38961: LD_ADDR_VAR 0 1
38965: PUSH
38966: LD_VAR 0 1
38970: PPUSH
38971: LD_VAR 0 3
38975: PPUSH
38976: LD_VAR 0 5
38980: PPUSH
38981: CALL_OW 1
38985: ST_TO_ADDR
// result := list ;
38986: LD_ADDR_VAR 0 4
38990: PUSH
38991: LD_VAR 0 1
38995: ST_TO_ADDR
// end ;
38996: LD_VAR 0 4
39000: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39001: LD_INT 0
39003: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39004: LD_ADDR_VAR 0 5
39008: PUSH
39009: LD_VAR 0 1
39013: PPUSH
39014: CALL_OW 250
39018: PPUSH
39019: LD_VAR 0 1
39023: PPUSH
39024: CALL_OW 251
39028: PPUSH
39029: LD_VAR 0 2
39033: PPUSH
39034: LD_VAR 0 3
39038: PPUSH
39039: LD_VAR 0 4
39043: PPUSH
39044: CALL 39054 0 5
39048: ST_TO_ADDR
// end ;
39049: LD_VAR 0 5
39053: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39054: LD_INT 0
39056: PPUSH
39057: PPUSH
39058: PPUSH
39059: PPUSH
// if not list then
39060: LD_VAR 0 3
39064: NOT
39065: IFFALSE 39069
// exit ;
39067: GO 39457
// result := [ ] ;
39069: LD_ADDR_VAR 0 6
39073: PUSH
39074: EMPTY
39075: ST_TO_ADDR
// for i in list do
39076: LD_ADDR_VAR 0 7
39080: PUSH
39081: LD_VAR 0 3
39085: PUSH
39086: FOR_IN
39087: IFFALSE 39289
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39089: LD_ADDR_VAR 0 9
39093: PUSH
39094: LD_VAR 0 7
39098: PPUSH
39099: LD_VAR 0 1
39103: PPUSH
39104: LD_VAR 0 2
39108: PPUSH
39109: CALL_OW 297
39113: ST_TO_ADDR
// if not result then
39114: LD_VAR 0 6
39118: NOT
39119: IFFALSE 39145
// result := [ [ i , tmp ] ] else
39121: LD_ADDR_VAR 0 6
39125: PUSH
39126: LD_VAR 0 7
39130: PUSH
39131: LD_VAR 0 9
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: EMPTY
39141: LIST
39142: ST_TO_ADDR
39143: GO 39287
// begin if result [ result ] [ 2 ] < tmp then
39145: LD_VAR 0 6
39149: PUSH
39150: LD_VAR 0 6
39154: ARRAY
39155: PUSH
39156: LD_INT 2
39158: ARRAY
39159: PUSH
39160: LD_VAR 0 9
39164: LESS
39165: IFFALSE 39207
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39167: LD_ADDR_VAR 0 6
39171: PUSH
39172: LD_VAR 0 6
39176: PPUSH
39177: LD_VAR 0 6
39181: PUSH
39182: LD_INT 1
39184: PLUS
39185: PPUSH
39186: LD_VAR 0 7
39190: PUSH
39191: LD_VAR 0 9
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PPUSH
39200: CALL_OW 2
39204: ST_TO_ADDR
39205: GO 39287
// for j = 1 to result do
39207: LD_ADDR_VAR 0 8
39211: PUSH
39212: DOUBLE
39213: LD_INT 1
39215: DEC
39216: ST_TO_ADDR
39217: LD_VAR 0 6
39221: PUSH
39222: FOR_TO
39223: IFFALSE 39285
// begin if tmp < result [ j ] [ 2 ] then
39225: LD_VAR 0 9
39229: PUSH
39230: LD_VAR 0 6
39234: PUSH
39235: LD_VAR 0 8
39239: ARRAY
39240: PUSH
39241: LD_INT 2
39243: ARRAY
39244: LESS
39245: IFFALSE 39283
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39247: LD_ADDR_VAR 0 6
39251: PUSH
39252: LD_VAR 0 6
39256: PPUSH
39257: LD_VAR 0 8
39261: PPUSH
39262: LD_VAR 0 7
39266: PUSH
39267: LD_VAR 0 9
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PPUSH
39276: CALL_OW 2
39280: ST_TO_ADDR
// break ;
39281: GO 39285
// end ; end ;
39283: GO 39222
39285: POP
39286: POP
// end ; end ;
39287: GO 39086
39289: POP
39290: POP
// if result and not asc then
39291: LD_VAR 0 6
39295: PUSH
39296: LD_VAR 0 4
39300: NOT
39301: AND
39302: IFFALSE 39377
// begin tmp := result ;
39304: LD_ADDR_VAR 0 9
39308: PUSH
39309: LD_VAR 0 6
39313: ST_TO_ADDR
// for i = tmp downto 1 do
39314: LD_ADDR_VAR 0 7
39318: PUSH
39319: DOUBLE
39320: LD_VAR 0 9
39324: INC
39325: ST_TO_ADDR
39326: LD_INT 1
39328: PUSH
39329: FOR_DOWNTO
39330: IFFALSE 39375
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39332: LD_ADDR_VAR 0 6
39336: PUSH
39337: LD_VAR 0 6
39341: PPUSH
39342: LD_VAR 0 9
39346: PUSH
39347: LD_VAR 0 7
39351: MINUS
39352: PUSH
39353: LD_INT 1
39355: PLUS
39356: PPUSH
39357: LD_VAR 0 9
39361: PUSH
39362: LD_VAR 0 7
39366: ARRAY
39367: PPUSH
39368: CALL_OW 1
39372: ST_TO_ADDR
39373: GO 39329
39375: POP
39376: POP
// end ; tmp := [ ] ;
39377: LD_ADDR_VAR 0 9
39381: PUSH
39382: EMPTY
39383: ST_TO_ADDR
// if mode then
39384: LD_VAR 0 5
39388: IFFALSE 39457
// begin for i = 1 to result do
39390: LD_ADDR_VAR 0 7
39394: PUSH
39395: DOUBLE
39396: LD_INT 1
39398: DEC
39399: ST_TO_ADDR
39400: LD_VAR 0 6
39404: PUSH
39405: FOR_TO
39406: IFFALSE 39445
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39408: LD_ADDR_VAR 0 9
39412: PUSH
39413: LD_VAR 0 9
39417: PPUSH
39418: LD_VAR 0 7
39422: PPUSH
39423: LD_VAR 0 6
39427: PUSH
39428: LD_VAR 0 7
39432: ARRAY
39433: PUSH
39434: LD_INT 1
39436: ARRAY
39437: PPUSH
39438: CALL_OW 1
39442: ST_TO_ADDR
39443: GO 39405
39445: POP
39446: POP
// result := tmp ;
39447: LD_ADDR_VAR 0 6
39451: PUSH
39452: LD_VAR 0 9
39456: ST_TO_ADDR
// end ; end ;
39457: LD_VAR 0 6
39461: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39462: LD_INT 0
39464: PPUSH
39465: PPUSH
39466: PPUSH
39467: PPUSH
39468: PPUSH
39469: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39470: LD_ADDR_VAR 0 5
39474: PUSH
39475: LD_INT 0
39477: PUSH
39478: LD_INT 0
39480: PUSH
39481: LD_INT 0
39483: PUSH
39484: EMPTY
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: ST_TO_ADDR
// if not x or not y then
39492: LD_VAR 0 2
39496: NOT
39497: PUSH
39498: LD_VAR 0 3
39502: NOT
39503: OR
39504: IFFALSE 39508
// exit ;
39506: GO 41160
// if not range then
39508: LD_VAR 0 4
39512: NOT
39513: IFFALSE 39523
// range := 10 ;
39515: LD_ADDR_VAR 0 4
39519: PUSH
39520: LD_INT 10
39522: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39523: LD_ADDR_VAR 0 8
39527: PUSH
39528: LD_INT 81
39530: PUSH
39531: LD_VAR 0 1
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 92
39542: PUSH
39543: LD_VAR 0 2
39547: PUSH
39548: LD_VAR 0 3
39552: PUSH
39553: LD_VAR 0 4
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 3
39566: PUSH
39567: LD_INT 21
39569: PUSH
39570: LD_INT 3
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: LIST
39585: PPUSH
39586: CALL_OW 69
39590: ST_TO_ADDR
// if not tmp then
39591: LD_VAR 0 8
39595: NOT
39596: IFFALSE 39600
// exit ;
39598: GO 41160
// for i in tmp do
39600: LD_ADDR_VAR 0 6
39604: PUSH
39605: LD_VAR 0 8
39609: PUSH
39610: FOR_IN
39611: IFFALSE 41135
// begin points := [ 0 , 0 , 0 ] ;
39613: LD_ADDR_VAR 0 9
39617: PUSH
39618: LD_INT 0
39620: PUSH
39621: LD_INT 0
39623: PUSH
39624: LD_INT 0
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: LIST
39631: ST_TO_ADDR
// bpoints := 1 ;
39632: LD_ADDR_VAR 0 10
39636: PUSH
39637: LD_INT 1
39639: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39640: LD_VAR 0 6
39644: PPUSH
39645: CALL_OW 247
39649: PUSH
39650: LD_INT 1
39652: DOUBLE
39653: EQUAL
39654: IFTRUE 39658
39656: GO 40236
39658: POP
// begin if GetClass ( i ) = 1 then
39659: LD_VAR 0 6
39663: PPUSH
39664: CALL_OW 257
39668: PUSH
39669: LD_INT 1
39671: EQUAL
39672: IFFALSE 39693
// points := [ 10 , 5 , 3 ] ;
39674: LD_ADDR_VAR 0 9
39678: PUSH
39679: LD_INT 10
39681: PUSH
39682: LD_INT 5
39684: PUSH
39685: LD_INT 3
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: LIST
39692: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39693: LD_VAR 0 6
39697: PPUSH
39698: CALL_OW 257
39702: PUSH
39703: LD_INT 2
39705: PUSH
39706: LD_INT 3
39708: PUSH
39709: LD_INT 4
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: LIST
39716: IN
39717: IFFALSE 39738
// points := [ 3 , 2 , 1 ] ;
39719: LD_ADDR_VAR 0 9
39723: PUSH
39724: LD_INT 3
39726: PUSH
39727: LD_INT 2
39729: PUSH
39730: LD_INT 1
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: LIST
39737: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39738: LD_VAR 0 6
39742: PPUSH
39743: CALL_OW 257
39747: PUSH
39748: LD_INT 5
39750: EQUAL
39751: IFFALSE 39772
// points := [ 130 , 5 , 2 ] ;
39753: LD_ADDR_VAR 0 9
39757: PUSH
39758: LD_INT 130
39760: PUSH
39761: LD_INT 5
39763: PUSH
39764: LD_INT 2
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: LIST
39771: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39772: LD_VAR 0 6
39776: PPUSH
39777: CALL_OW 257
39781: PUSH
39782: LD_INT 8
39784: EQUAL
39785: IFFALSE 39806
// points := [ 35 , 35 , 30 ] ;
39787: LD_ADDR_VAR 0 9
39791: PUSH
39792: LD_INT 35
39794: PUSH
39795: LD_INT 35
39797: PUSH
39798: LD_INT 30
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: LIST
39805: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39806: LD_VAR 0 6
39810: PPUSH
39811: CALL_OW 257
39815: PUSH
39816: LD_INT 9
39818: EQUAL
39819: IFFALSE 39840
// points := [ 20 , 55 , 40 ] ;
39821: LD_ADDR_VAR 0 9
39825: PUSH
39826: LD_INT 20
39828: PUSH
39829: LD_INT 55
39831: PUSH
39832: LD_INT 40
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: LIST
39839: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39840: LD_VAR 0 6
39844: PPUSH
39845: CALL_OW 257
39849: PUSH
39850: LD_INT 12
39852: PUSH
39853: LD_INT 16
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: IN
39860: IFFALSE 39881
// points := [ 5 , 3 , 2 ] ;
39862: LD_ADDR_VAR 0 9
39866: PUSH
39867: LD_INT 5
39869: PUSH
39870: LD_INT 3
39872: PUSH
39873: LD_INT 2
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: LIST
39880: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39881: LD_VAR 0 6
39885: PPUSH
39886: CALL_OW 257
39890: PUSH
39891: LD_INT 17
39893: EQUAL
39894: IFFALSE 39915
// points := [ 100 , 50 , 75 ] ;
39896: LD_ADDR_VAR 0 9
39900: PUSH
39901: LD_INT 100
39903: PUSH
39904: LD_INT 50
39906: PUSH
39907: LD_INT 75
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: LIST
39914: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39915: LD_VAR 0 6
39919: PPUSH
39920: CALL_OW 257
39924: PUSH
39925: LD_INT 15
39927: EQUAL
39928: IFFALSE 39949
// points := [ 10 , 5 , 3 ] ;
39930: LD_ADDR_VAR 0 9
39934: PUSH
39935: LD_INT 10
39937: PUSH
39938: LD_INT 5
39940: PUSH
39941: LD_INT 3
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: LIST
39948: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39949: LD_VAR 0 6
39953: PPUSH
39954: CALL_OW 257
39958: PUSH
39959: LD_INT 14
39961: EQUAL
39962: IFFALSE 39983
// points := [ 10 , 0 , 0 ] ;
39964: LD_ADDR_VAR 0 9
39968: PUSH
39969: LD_INT 10
39971: PUSH
39972: LD_INT 0
39974: PUSH
39975: LD_INT 0
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: LIST
39982: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39983: LD_VAR 0 6
39987: PPUSH
39988: CALL_OW 257
39992: PUSH
39993: LD_INT 11
39995: EQUAL
39996: IFFALSE 40017
// points := [ 30 , 10 , 5 ] ;
39998: LD_ADDR_VAR 0 9
40002: PUSH
40003: LD_INT 30
40005: PUSH
40006: LD_INT 10
40008: PUSH
40009: LD_INT 5
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: LIST
40016: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40017: LD_VAR 0 1
40021: PPUSH
40022: LD_INT 5
40024: PPUSH
40025: CALL_OW 321
40029: PUSH
40030: LD_INT 2
40032: EQUAL
40033: IFFALSE 40050
// bpoints := bpoints * 1.8 ;
40035: LD_ADDR_VAR 0 10
40039: PUSH
40040: LD_VAR 0 10
40044: PUSH
40045: LD_REAL  1.80000000000000E+0000
40048: MUL
40049: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40050: LD_VAR 0 6
40054: PPUSH
40055: CALL_OW 257
40059: PUSH
40060: LD_INT 1
40062: PUSH
40063: LD_INT 2
40065: PUSH
40066: LD_INT 3
40068: PUSH
40069: LD_INT 4
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: IN
40078: PUSH
40079: LD_VAR 0 1
40083: PPUSH
40084: LD_INT 51
40086: PPUSH
40087: CALL_OW 321
40091: PUSH
40092: LD_INT 2
40094: EQUAL
40095: AND
40096: IFFALSE 40113
// bpoints := bpoints * 1.2 ;
40098: LD_ADDR_VAR 0 10
40102: PUSH
40103: LD_VAR 0 10
40107: PUSH
40108: LD_REAL  1.20000000000000E+0000
40111: MUL
40112: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40113: LD_VAR 0 6
40117: PPUSH
40118: CALL_OW 257
40122: PUSH
40123: LD_INT 5
40125: PUSH
40126: LD_INT 7
40128: PUSH
40129: LD_INT 9
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: LIST
40136: IN
40137: PUSH
40138: LD_VAR 0 1
40142: PPUSH
40143: LD_INT 52
40145: PPUSH
40146: CALL_OW 321
40150: PUSH
40151: LD_INT 2
40153: EQUAL
40154: AND
40155: IFFALSE 40172
// bpoints := bpoints * 1.5 ;
40157: LD_ADDR_VAR 0 10
40161: PUSH
40162: LD_VAR 0 10
40166: PUSH
40167: LD_REAL  1.50000000000000E+0000
40170: MUL
40171: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40172: LD_VAR 0 1
40176: PPUSH
40177: LD_INT 66
40179: PPUSH
40180: CALL_OW 321
40184: PUSH
40185: LD_INT 2
40187: EQUAL
40188: IFFALSE 40205
// bpoints := bpoints * 1.1 ;
40190: LD_ADDR_VAR 0 10
40194: PUSH
40195: LD_VAR 0 10
40199: PUSH
40200: LD_REAL  1.10000000000000E+0000
40203: MUL
40204: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40205: LD_ADDR_VAR 0 10
40209: PUSH
40210: LD_VAR 0 10
40214: PUSH
40215: LD_VAR 0 6
40219: PPUSH
40220: LD_INT 1
40222: PPUSH
40223: CALL_OW 259
40227: PUSH
40228: LD_REAL  1.15000000000000E+0000
40231: MUL
40232: MUL
40233: ST_TO_ADDR
// end ; unit_vehicle :
40234: GO 41064
40236: LD_INT 2
40238: DOUBLE
40239: EQUAL
40240: IFTRUE 40244
40242: GO 41052
40244: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40245: LD_VAR 0 6
40249: PPUSH
40250: CALL_OW 264
40254: PUSH
40255: LD_INT 2
40257: PUSH
40258: LD_INT 42
40260: PUSH
40261: LD_INT 24
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: LIST
40268: IN
40269: IFFALSE 40290
// points := [ 25 , 5 , 3 ] ;
40271: LD_ADDR_VAR 0 9
40275: PUSH
40276: LD_INT 25
40278: PUSH
40279: LD_INT 5
40281: PUSH
40282: LD_INT 3
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: LIST
40289: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40290: LD_VAR 0 6
40294: PPUSH
40295: CALL_OW 264
40299: PUSH
40300: LD_INT 4
40302: PUSH
40303: LD_INT 43
40305: PUSH
40306: LD_INT 25
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: LIST
40313: IN
40314: IFFALSE 40335
// points := [ 40 , 15 , 5 ] ;
40316: LD_ADDR_VAR 0 9
40320: PUSH
40321: LD_INT 40
40323: PUSH
40324: LD_INT 15
40326: PUSH
40327: LD_INT 5
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: LIST
40334: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40335: LD_VAR 0 6
40339: PPUSH
40340: CALL_OW 264
40344: PUSH
40345: LD_INT 3
40347: PUSH
40348: LD_INT 23
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: IN
40355: IFFALSE 40376
// points := [ 7 , 25 , 8 ] ;
40357: LD_ADDR_VAR 0 9
40361: PUSH
40362: LD_INT 7
40364: PUSH
40365: LD_INT 25
40367: PUSH
40368: LD_INT 8
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: LIST
40375: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40376: LD_VAR 0 6
40380: PPUSH
40381: CALL_OW 264
40385: PUSH
40386: LD_INT 5
40388: PUSH
40389: LD_INT 27
40391: PUSH
40392: LD_INT 44
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: LIST
40399: IN
40400: IFFALSE 40421
// points := [ 14 , 50 , 16 ] ;
40402: LD_ADDR_VAR 0 9
40406: PUSH
40407: LD_INT 14
40409: PUSH
40410: LD_INT 50
40412: PUSH
40413: LD_INT 16
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: LIST
40420: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40421: LD_VAR 0 6
40425: PPUSH
40426: CALL_OW 264
40430: PUSH
40431: LD_INT 6
40433: PUSH
40434: LD_INT 46
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: IN
40441: IFFALSE 40462
// points := [ 32 , 120 , 70 ] ;
40443: LD_ADDR_VAR 0 9
40447: PUSH
40448: LD_INT 32
40450: PUSH
40451: LD_INT 120
40453: PUSH
40454: LD_INT 70
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: LIST
40461: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40462: LD_VAR 0 6
40466: PPUSH
40467: CALL_OW 264
40471: PUSH
40472: LD_INT 7
40474: PUSH
40475: LD_INT 28
40477: PUSH
40478: LD_INT 45
40480: PUSH
40481: LD_EXP 41
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: IN
40492: IFFALSE 40513
// points := [ 35 , 20 , 45 ] ;
40494: LD_ADDR_VAR 0 9
40498: PUSH
40499: LD_INT 35
40501: PUSH
40502: LD_INT 20
40504: PUSH
40505: LD_INT 45
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: LIST
40512: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40513: LD_VAR 0 6
40517: PPUSH
40518: CALL_OW 264
40522: PUSH
40523: LD_INT 47
40525: PUSH
40526: EMPTY
40527: LIST
40528: IN
40529: IFFALSE 40550
// points := [ 67 , 45 , 75 ] ;
40531: LD_ADDR_VAR 0 9
40535: PUSH
40536: LD_INT 67
40538: PUSH
40539: LD_INT 45
40541: PUSH
40542: LD_INT 75
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: LIST
40549: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40550: LD_VAR 0 6
40554: PPUSH
40555: CALL_OW 264
40559: PUSH
40560: LD_INT 26
40562: PUSH
40563: EMPTY
40564: LIST
40565: IN
40566: IFFALSE 40587
// points := [ 120 , 30 , 80 ] ;
40568: LD_ADDR_VAR 0 9
40572: PUSH
40573: LD_INT 120
40575: PUSH
40576: LD_INT 30
40578: PUSH
40579: LD_INT 80
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: LIST
40586: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40587: LD_VAR 0 6
40591: PPUSH
40592: CALL_OW 264
40596: PUSH
40597: LD_INT 22
40599: PUSH
40600: EMPTY
40601: LIST
40602: IN
40603: IFFALSE 40624
// points := [ 40 , 1 , 1 ] ;
40605: LD_ADDR_VAR 0 9
40609: PUSH
40610: LD_INT 40
40612: PUSH
40613: LD_INT 1
40615: PUSH
40616: LD_INT 1
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: LIST
40623: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40624: LD_VAR 0 6
40628: PPUSH
40629: CALL_OW 264
40633: PUSH
40634: LD_INT 29
40636: PUSH
40637: EMPTY
40638: LIST
40639: IN
40640: IFFALSE 40661
// points := [ 70 , 200 , 400 ] ;
40642: LD_ADDR_VAR 0 9
40646: PUSH
40647: LD_INT 70
40649: PUSH
40650: LD_INT 200
40652: PUSH
40653: LD_INT 400
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: LIST
40660: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40661: LD_VAR 0 6
40665: PPUSH
40666: CALL_OW 264
40670: PUSH
40671: LD_INT 14
40673: PUSH
40674: LD_INT 53
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: IN
40681: IFFALSE 40702
// points := [ 40 , 10 , 20 ] ;
40683: LD_ADDR_VAR 0 9
40687: PUSH
40688: LD_INT 40
40690: PUSH
40691: LD_INT 10
40693: PUSH
40694: LD_INT 20
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: LIST
40701: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40702: LD_VAR 0 6
40706: PPUSH
40707: CALL_OW 264
40711: PUSH
40712: LD_INT 9
40714: PUSH
40715: EMPTY
40716: LIST
40717: IN
40718: IFFALSE 40739
// points := [ 5 , 70 , 20 ] ;
40720: LD_ADDR_VAR 0 9
40724: PUSH
40725: LD_INT 5
40727: PUSH
40728: LD_INT 70
40730: PUSH
40731: LD_INT 20
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: LIST
40738: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40739: LD_VAR 0 6
40743: PPUSH
40744: CALL_OW 264
40748: PUSH
40749: LD_INT 10
40751: PUSH
40752: EMPTY
40753: LIST
40754: IN
40755: IFFALSE 40776
// points := [ 35 , 110 , 70 ] ;
40757: LD_ADDR_VAR 0 9
40761: PUSH
40762: LD_INT 35
40764: PUSH
40765: LD_INT 110
40767: PUSH
40768: LD_INT 70
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: LIST
40775: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40776: LD_VAR 0 6
40780: PPUSH
40781: CALL_OW 265
40785: PUSH
40786: LD_INT 25
40788: EQUAL
40789: IFFALSE 40810
// points := [ 80 , 65 , 100 ] ;
40791: LD_ADDR_VAR 0 9
40795: PUSH
40796: LD_INT 80
40798: PUSH
40799: LD_INT 65
40801: PUSH
40802: LD_INT 100
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: LIST
40809: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40810: LD_VAR 0 6
40814: PPUSH
40815: CALL_OW 263
40819: PUSH
40820: LD_INT 1
40822: EQUAL
40823: IFFALSE 40858
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40825: LD_ADDR_VAR 0 10
40829: PUSH
40830: LD_VAR 0 10
40834: PUSH
40835: LD_VAR 0 6
40839: PPUSH
40840: CALL_OW 311
40844: PPUSH
40845: LD_INT 3
40847: PPUSH
40848: CALL_OW 259
40852: PUSH
40853: LD_INT 4
40855: MUL
40856: MUL
40857: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40858: LD_VAR 0 6
40862: PPUSH
40863: CALL_OW 263
40867: PUSH
40868: LD_INT 2
40870: EQUAL
40871: IFFALSE 40922
// begin j := IsControledBy ( i ) ;
40873: LD_ADDR_VAR 0 7
40877: PUSH
40878: LD_VAR 0 6
40882: PPUSH
40883: CALL_OW 312
40887: ST_TO_ADDR
// if j then
40888: LD_VAR 0 7
40892: IFFALSE 40922
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40894: LD_ADDR_VAR 0 10
40898: PUSH
40899: LD_VAR 0 10
40903: PUSH
40904: LD_VAR 0 7
40908: PPUSH
40909: LD_INT 3
40911: PPUSH
40912: CALL_OW 259
40916: PUSH
40917: LD_INT 3
40919: MUL
40920: MUL
40921: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40922: LD_VAR 0 6
40926: PPUSH
40927: CALL_OW 264
40931: PUSH
40932: LD_INT 5
40934: PUSH
40935: LD_INT 6
40937: PUSH
40938: LD_INT 46
40940: PUSH
40941: LD_INT 44
40943: PUSH
40944: LD_INT 47
40946: PUSH
40947: LD_INT 45
40949: PUSH
40950: LD_INT 28
40952: PUSH
40953: LD_INT 7
40955: PUSH
40956: LD_INT 27
40958: PUSH
40959: LD_INT 29
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: IN
40974: PUSH
40975: LD_VAR 0 1
40979: PPUSH
40980: LD_INT 52
40982: PPUSH
40983: CALL_OW 321
40987: PUSH
40988: LD_INT 2
40990: EQUAL
40991: AND
40992: IFFALSE 41009
// bpoints := bpoints * 1.2 ;
40994: LD_ADDR_VAR 0 10
40998: PUSH
40999: LD_VAR 0 10
41003: PUSH
41004: LD_REAL  1.20000000000000E+0000
41007: MUL
41008: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41009: LD_VAR 0 6
41013: PPUSH
41014: CALL_OW 264
41018: PUSH
41019: LD_INT 6
41021: PUSH
41022: LD_INT 46
41024: PUSH
41025: LD_INT 47
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: LIST
41032: IN
41033: IFFALSE 41050
// bpoints := bpoints * 1.2 ;
41035: LD_ADDR_VAR 0 10
41039: PUSH
41040: LD_VAR 0 10
41044: PUSH
41045: LD_REAL  1.20000000000000E+0000
41048: MUL
41049: ST_TO_ADDR
// end ; unit_building :
41050: GO 41064
41052: LD_INT 3
41054: DOUBLE
41055: EQUAL
41056: IFTRUE 41060
41058: GO 41063
41060: POP
// ; end ;
41061: GO 41064
41063: POP
// for j = 1 to 3 do
41064: LD_ADDR_VAR 0 7
41068: PUSH
41069: DOUBLE
41070: LD_INT 1
41072: DEC
41073: ST_TO_ADDR
41074: LD_INT 3
41076: PUSH
41077: FOR_TO
41078: IFFALSE 41131
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41080: LD_ADDR_VAR 0 5
41084: PUSH
41085: LD_VAR 0 5
41089: PPUSH
41090: LD_VAR 0 7
41094: PPUSH
41095: LD_VAR 0 5
41099: PUSH
41100: LD_VAR 0 7
41104: ARRAY
41105: PUSH
41106: LD_VAR 0 9
41110: PUSH
41111: LD_VAR 0 7
41115: ARRAY
41116: PUSH
41117: LD_VAR 0 10
41121: MUL
41122: PLUS
41123: PPUSH
41124: CALL_OW 1
41128: ST_TO_ADDR
41129: GO 41077
41131: POP
41132: POP
// end ;
41133: GO 39610
41135: POP
41136: POP
// result := Replace ( result , 4 , tmp ) ;
41137: LD_ADDR_VAR 0 5
41141: PUSH
41142: LD_VAR 0 5
41146: PPUSH
41147: LD_INT 4
41149: PPUSH
41150: LD_VAR 0 8
41154: PPUSH
41155: CALL_OW 1
41159: ST_TO_ADDR
// end ;
41160: LD_VAR 0 5
41164: RET
// export function DangerAtRange ( unit , range ) ; begin
41165: LD_INT 0
41167: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41168: LD_ADDR_VAR 0 3
41172: PUSH
41173: LD_VAR 0 1
41177: PPUSH
41178: CALL_OW 255
41182: PPUSH
41183: LD_VAR 0 1
41187: PPUSH
41188: CALL_OW 250
41192: PPUSH
41193: LD_VAR 0 1
41197: PPUSH
41198: CALL_OW 251
41202: PPUSH
41203: LD_VAR 0 2
41207: PPUSH
41208: CALL 39462 0 4
41212: ST_TO_ADDR
// end ;
41213: LD_VAR 0 3
41217: RET
// export function DangerInArea ( side , area ) ; begin
41218: LD_INT 0
41220: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41221: LD_ADDR_VAR 0 3
41225: PUSH
41226: LD_VAR 0 2
41230: PPUSH
41231: LD_INT 81
41233: PUSH
41234: LD_VAR 0 1
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PPUSH
41243: CALL_OW 70
41247: ST_TO_ADDR
// end ;
41248: LD_VAR 0 3
41252: RET
// export function IsExtension ( b ) ; begin
41253: LD_INT 0
41255: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41256: LD_ADDR_VAR 0 2
41260: PUSH
41261: LD_VAR 0 1
41265: PUSH
41266: LD_INT 23
41268: PUSH
41269: LD_INT 20
41271: PUSH
41272: LD_INT 22
41274: PUSH
41275: LD_INT 17
41277: PUSH
41278: LD_INT 24
41280: PUSH
41281: LD_INT 21
41283: PUSH
41284: LD_INT 19
41286: PUSH
41287: LD_INT 16
41289: PUSH
41290: LD_INT 25
41292: PUSH
41293: LD_INT 18
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: IN
41308: ST_TO_ADDR
// end ;
41309: LD_VAR 0 2
41313: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41314: LD_INT 0
41316: PPUSH
41317: PPUSH
41318: PPUSH
// result := [ ] ;
41319: LD_ADDR_VAR 0 4
41323: PUSH
41324: EMPTY
41325: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41326: LD_ADDR_VAR 0 5
41330: PUSH
41331: LD_VAR 0 2
41335: PPUSH
41336: LD_INT 21
41338: PUSH
41339: LD_INT 3
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PPUSH
41346: CALL_OW 70
41350: ST_TO_ADDR
// if not tmp then
41351: LD_VAR 0 5
41355: NOT
41356: IFFALSE 41360
// exit ;
41358: GO 41424
// if checkLink then
41360: LD_VAR 0 3
41364: IFFALSE 41414
// begin for i in tmp do
41366: LD_ADDR_VAR 0 6
41370: PUSH
41371: LD_VAR 0 5
41375: PUSH
41376: FOR_IN
41377: IFFALSE 41412
// if GetBase ( i ) <> base then
41379: LD_VAR 0 6
41383: PPUSH
41384: CALL_OW 274
41388: PUSH
41389: LD_VAR 0 1
41393: NONEQUAL
41394: IFFALSE 41410
// ComLinkToBase ( base , i ) ;
41396: LD_VAR 0 1
41400: PPUSH
41401: LD_VAR 0 6
41405: PPUSH
41406: CALL_OW 169
41410: GO 41376
41412: POP
41413: POP
// end ; result := tmp ;
41414: LD_ADDR_VAR 0 4
41418: PUSH
41419: LD_VAR 0 5
41423: ST_TO_ADDR
// end ;
41424: LD_VAR 0 4
41428: RET
// export function ComComplete ( units , b ) ; var i ; begin
41429: LD_INT 0
41431: PPUSH
41432: PPUSH
// if not units then
41433: LD_VAR 0 1
41437: NOT
41438: IFFALSE 41442
// exit ;
41440: GO 41532
// for i in units do
41442: LD_ADDR_VAR 0 4
41446: PUSH
41447: LD_VAR 0 1
41451: PUSH
41452: FOR_IN
41453: IFFALSE 41530
// if BuildingStatus ( b ) = bs_build then
41455: LD_VAR 0 2
41459: PPUSH
41460: CALL_OW 461
41464: PUSH
41465: LD_INT 1
41467: EQUAL
41468: IFFALSE 41528
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41470: LD_VAR 0 4
41474: PPUSH
41475: LD_STRING h
41477: PUSH
41478: LD_VAR 0 2
41482: PPUSH
41483: CALL_OW 250
41487: PUSH
41488: LD_VAR 0 2
41492: PPUSH
41493: CALL_OW 251
41497: PUSH
41498: LD_VAR 0 2
41502: PUSH
41503: LD_INT 0
41505: PUSH
41506: LD_INT 0
41508: PUSH
41509: LD_INT 0
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: PUSH
41521: EMPTY
41522: LIST
41523: PPUSH
41524: CALL_OW 446
41528: GO 41452
41530: POP
41531: POP
// end ;
41532: LD_VAR 0 3
41536: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41537: LD_INT 0
41539: PPUSH
41540: PPUSH
41541: PPUSH
41542: PPUSH
41543: PPUSH
41544: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
41545: LD_VAR 0 1
41549: NOT
41550: PUSH
41551: LD_VAR 0 1
41555: PPUSH
41556: CALL_OW 263
41560: PUSH
41561: LD_INT 2
41563: NONEQUAL
41564: OR
41565: IFFALSE 41569
// exit ;
41567: GO 41885
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41569: LD_ADDR_VAR 0 6
41573: PUSH
41574: LD_INT 22
41576: PUSH
41577: LD_VAR 0 1
41581: PPUSH
41582: CALL_OW 255
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 2
41593: PUSH
41594: LD_INT 30
41596: PUSH
41597: LD_INT 36
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 34
41606: PUSH
41607: LD_INT 31
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: LIST
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PPUSH
41623: CALL_OW 69
41627: ST_TO_ADDR
// if not tmp then
41628: LD_VAR 0 6
41632: NOT
41633: IFFALSE 41637
// exit ;
41635: GO 41885
// result := [ ] ;
41637: LD_ADDR_VAR 0 2
41641: PUSH
41642: EMPTY
41643: ST_TO_ADDR
// for i in tmp do
41644: LD_ADDR_VAR 0 3
41648: PUSH
41649: LD_VAR 0 6
41653: PUSH
41654: FOR_IN
41655: IFFALSE 41726
// begin t := UnitsInside ( i ) ;
41657: LD_ADDR_VAR 0 4
41661: PUSH
41662: LD_VAR 0 3
41666: PPUSH
41667: CALL_OW 313
41671: ST_TO_ADDR
// if t then
41672: LD_VAR 0 4
41676: IFFALSE 41724
// for j in t do
41678: LD_ADDR_VAR 0 7
41682: PUSH
41683: LD_VAR 0 4
41687: PUSH
41688: FOR_IN
41689: IFFALSE 41722
// result := Replace ( result , result + 1 , j ) ;
41691: LD_ADDR_VAR 0 2
41695: PUSH
41696: LD_VAR 0 2
41700: PPUSH
41701: LD_VAR 0 2
41705: PUSH
41706: LD_INT 1
41708: PLUS
41709: PPUSH
41710: LD_VAR 0 7
41714: PPUSH
41715: CALL_OW 1
41719: ST_TO_ADDR
41720: GO 41688
41722: POP
41723: POP
// end ;
41724: GO 41654
41726: POP
41727: POP
// if not result then
41728: LD_VAR 0 2
41732: NOT
41733: IFFALSE 41737
// exit ;
41735: GO 41885
// mech := result [ 1 ] ;
41737: LD_ADDR_VAR 0 5
41741: PUSH
41742: LD_VAR 0 2
41746: PUSH
41747: LD_INT 1
41749: ARRAY
41750: ST_TO_ADDR
// if result > 1 then
41751: LD_VAR 0 2
41755: PUSH
41756: LD_INT 1
41758: GREATER
41759: IFFALSE 41871
// begin for i = 2 to result do
41761: LD_ADDR_VAR 0 3
41765: PUSH
41766: DOUBLE
41767: LD_INT 2
41769: DEC
41770: ST_TO_ADDR
41771: LD_VAR 0 2
41775: PUSH
41776: FOR_TO
41777: IFFALSE 41869
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41779: LD_ADDR_VAR 0 4
41783: PUSH
41784: LD_VAR 0 2
41788: PUSH
41789: LD_VAR 0 3
41793: ARRAY
41794: PPUSH
41795: LD_INT 3
41797: PPUSH
41798: CALL_OW 259
41802: PUSH
41803: LD_VAR 0 2
41807: PUSH
41808: LD_VAR 0 3
41812: ARRAY
41813: PPUSH
41814: CALL_OW 432
41818: MINUS
41819: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41820: LD_VAR 0 4
41824: PUSH
41825: LD_VAR 0 5
41829: PPUSH
41830: LD_INT 3
41832: PPUSH
41833: CALL_OW 259
41837: PUSH
41838: LD_VAR 0 5
41842: PPUSH
41843: CALL_OW 432
41847: MINUS
41848: GREATEREQUAL
41849: IFFALSE 41867
// mech := result [ i ] ;
41851: LD_ADDR_VAR 0 5
41855: PUSH
41856: LD_VAR 0 2
41860: PUSH
41861: LD_VAR 0 3
41865: ARRAY
41866: ST_TO_ADDR
// end ;
41867: GO 41776
41869: POP
41870: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41871: LD_VAR 0 1
41875: PPUSH
41876: LD_VAR 0 5
41880: PPUSH
41881: CALL_OW 135
// end ;
41885: LD_VAR 0 2
41889: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41890: LD_INT 0
41892: PPUSH
41893: PPUSH
41894: PPUSH
41895: PPUSH
41896: PPUSH
41897: PPUSH
41898: PPUSH
41899: PPUSH
41900: PPUSH
41901: PPUSH
41902: PPUSH
41903: PPUSH
41904: PPUSH
// result := [ ] ;
41905: LD_ADDR_VAR 0 7
41909: PUSH
41910: EMPTY
41911: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41912: LD_VAR 0 1
41916: PPUSH
41917: CALL_OW 266
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: LD_INT 1
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: IN
41932: NOT
41933: IFFALSE 41937
// exit ;
41935: GO 43571
// if name then
41937: LD_VAR 0 3
41941: IFFALSE 41957
// SetBName ( base_dep , name ) ;
41943: LD_VAR 0 1
41947: PPUSH
41948: LD_VAR 0 3
41952: PPUSH
41953: CALL_OW 500
// base := GetBase ( base_dep ) ;
41957: LD_ADDR_VAR 0 15
41961: PUSH
41962: LD_VAR 0 1
41966: PPUSH
41967: CALL_OW 274
41971: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41972: LD_ADDR_VAR 0 16
41976: PUSH
41977: LD_VAR 0 1
41981: PPUSH
41982: CALL_OW 255
41986: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41987: LD_ADDR_VAR 0 17
41991: PUSH
41992: LD_VAR 0 1
41996: PPUSH
41997: CALL_OW 248
42001: ST_TO_ADDR
// if sources then
42002: LD_VAR 0 5
42006: IFFALSE 42053
// for i = 1 to 3 do
42008: LD_ADDR_VAR 0 8
42012: PUSH
42013: DOUBLE
42014: LD_INT 1
42016: DEC
42017: ST_TO_ADDR
42018: LD_INT 3
42020: PUSH
42021: FOR_TO
42022: IFFALSE 42051
// AddResourceType ( base , i , sources [ i ] ) ;
42024: LD_VAR 0 15
42028: PPUSH
42029: LD_VAR 0 8
42033: PPUSH
42034: LD_VAR 0 5
42038: PUSH
42039: LD_VAR 0 8
42043: ARRAY
42044: PPUSH
42045: CALL_OW 276
42049: GO 42021
42051: POP
42052: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42053: LD_ADDR_VAR 0 18
42057: PUSH
42058: LD_VAR 0 15
42062: PPUSH
42063: LD_VAR 0 2
42067: PPUSH
42068: LD_INT 1
42070: PPUSH
42071: CALL 41314 0 3
42075: ST_TO_ADDR
// InitHc ;
42076: CALL_OW 19
// InitUc ;
42080: CALL_OW 18
// uc_side := side ;
42084: LD_ADDR_OWVAR 20
42088: PUSH
42089: LD_VAR 0 16
42093: ST_TO_ADDR
// uc_nation := nation ;
42094: LD_ADDR_OWVAR 21
42098: PUSH
42099: LD_VAR 0 17
42103: ST_TO_ADDR
// if buildings then
42104: LD_VAR 0 18
42108: IFFALSE 43430
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42110: LD_ADDR_VAR 0 19
42114: PUSH
42115: LD_VAR 0 18
42119: PPUSH
42120: LD_INT 2
42122: PUSH
42123: LD_INT 30
42125: PUSH
42126: LD_INT 29
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 30
42135: PUSH
42136: LD_INT 30
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: LIST
42147: PPUSH
42148: CALL_OW 72
42152: ST_TO_ADDR
// if tmp then
42153: LD_VAR 0 19
42157: IFFALSE 42205
// for i in tmp do
42159: LD_ADDR_VAR 0 8
42163: PUSH
42164: LD_VAR 0 19
42168: PUSH
42169: FOR_IN
42170: IFFALSE 42203
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42172: LD_VAR 0 8
42176: PPUSH
42177: CALL_OW 250
42181: PPUSH
42182: LD_VAR 0 8
42186: PPUSH
42187: CALL_OW 251
42191: PPUSH
42192: LD_VAR 0 16
42196: PPUSH
42197: CALL_OW 441
42201: GO 42169
42203: POP
42204: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42205: LD_VAR 0 18
42209: PPUSH
42210: LD_INT 2
42212: PUSH
42213: LD_INT 30
42215: PUSH
42216: LD_INT 32
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 30
42225: PUSH
42226: LD_INT 33
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: LIST
42237: PPUSH
42238: CALL_OW 72
42242: IFFALSE 42330
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42244: LD_ADDR_VAR 0 8
42248: PUSH
42249: LD_VAR 0 18
42253: PPUSH
42254: LD_INT 2
42256: PUSH
42257: LD_INT 30
42259: PUSH
42260: LD_INT 32
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 30
42269: PUSH
42270: LD_INT 33
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: LIST
42281: PPUSH
42282: CALL_OW 72
42286: PUSH
42287: FOR_IN
42288: IFFALSE 42328
// begin if not GetBWeapon ( i ) then
42290: LD_VAR 0 8
42294: PPUSH
42295: CALL_OW 269
42299: NOT
42300: IFFALSE 42326
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42302: LD_VAR 0 8
42306: PPUSH
42307: LD_VAR 0 8
42311: PPUSH
42312: LD_VAR 0 2
42316: PPUSH
42317: CALL 43576 0 2
42321: PPUSH
42322: CALL_OW 431
// end ;
42326: GO 42287
42328: POP
42329: POP
// end ; for i = 1 to personel do
42330: LD_ADDR_VAR 0 8
42334: PUSH
42335: DOUBLE
42336: LD_INT 1
42338: DEC
42339: ST_TO_ADDR
42340: LD_VAR 0 6
42344: PUSH
42345: FOR_TO
42346: IFFALSE 43410
// begin if i > 4 then
42348: LD_VAR 0 8
42352: PUSH
42353: LD_INT 4
42355: GREATER
42356: IFFALSE 42360
// break ;
42358: GO 43410
// case i of 1 :
42360: LD_VAR 0 8
42364: PUSH
42365: LD_INT 1
42367: DOUBLE
42368: EQUAL
42369: IFTRUE 42373
42371: GO 42453
42373: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42374: LD_ADDR_VAR 0 12
42378: PUSH
42379: LD_VAR 0 18
42383: PPUSH
42384: LD_INT 22
42386: PUSH
42387: LD_VAR 0 16
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 58
42398: PUSH
42399: EMPTY
42400: LIST
42401: PUSH
42402: LD_INT 2
42404: PUSH
42405: LD_INT 30
42407: PUSH
42408: LD_INT 32
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 30
42417: PUSH
42418: LD_INT 4
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 30
42427: PUSH
42428: LD_INT 5
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: LIST
42445: PPUSH
42446: CALL_OW 72
42450: ST_TO_ADDR
42451: GO 42675
42453: LD_INT 2
42455: DOUBLE
42456: EQUAL
42457: IFTRUE 42461
42459: GO 42523
42461: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42462: LD_ADDR_VAR 0 12
42466: PUSH
42467: LD_VAR 0 18
42471: PPUSH
42472: LD_INT 22
42474: PUSH
42475: LD_VAR 0 16
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 2
42486: PUSH
42487: LD_INT 30
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 30
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: LIST
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PPUSH
42516: CALL_OW 72
42520: ST_TO_ADDR
42521: GO 42675
42523: LD_INT 3
42525: DOUBLE
42526: EQUAL
42527: IFTRUE 42531
42529: GO 42593
42531: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42532: LD_ADDR_VAR 0 12
42536: PUSH
42537: LD_VAR 0 18
42541: PPUSH
42542: LD_INT 22
42544: PUSH
42545: LD_VAR 0 16
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 2
42556: PUSH
42557: LD_INT 30
42559: PUSH
42560: LD_INT 2
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 30
42569: PUSH
42570: LD_INT 3
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: LIST
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PPUSH
42586: CALL_OW 72
42590: ST_TO_ADDR
42591: GO 42675
42593: LD_INT 4
42595: DOUBLE
42596: EQUAL
42597: IFTRUE 42601
42599: GO 42674
42601: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42602: LD_ADDR_VAR 0 12
42606: PUSH
42607: LD_VAR 0 18
42611: PPUSH
42612: LD_INT 22
42614: PUSH
42615: LD_VAR 0 16
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 2
42626: PUSH
42627: LD_INT 30
42629: PUSH
42630: LD_INT 6
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 30
42639: PUSH
42640: LD_INT 7
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 30
42649: PUSH
42650: LD_INT 8
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PPUSH
42667: CALL_OW 72
42671: ST_TO_ADDR
42672: GO 42675
42674: POP
// if i = 1 then
42675: LD_VAR 0 8
42679: PUSH
42680: LD_INT 1
42682: EQUAL
42683: IFFALSE 42794
// begin tmp := [ ] ;
42685: LD_ADDR_VAR 0 19
42689: PUSH
42690: EMPTY
42691: ST_TO_ADDR
// for j in f do
42692: LD_ADDR_VAR 0 9
42696: PUSH
42697: LD_VAR 0 12
42701: PUSH
42702: FOR_IN
42703: IFFALSE 42776
// if GetBType ( j ) = b_bunker then
42705: LD_VAR 0 9
42709: PPUSH
42710: CALL_OW 266
42714: PUSH
42715: LD_INT 32
42717: EQUAL
42718: IFFALSE 42745
// tmp := Insert ( tmp , 1 , j ) else
42720: LD_ADDR_VAR 0 19
42724: PUSH
42725: LD_VAR 0 19
42729: PPUSH
42730: LD_INT 1
42732: PPUSH
42733: LD_VAR 0 9
42737: PPUSH
42738: CALL_OW 2
42742: ST_TO_ADDR
42743: GO 42774
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42745: LD_ADDR_VAR 0 19
42749: PUSH
42750: LD_VAR 0 19
42754: PPUSH
42755: LD_VAR 0 19
42759: PUSH
42760: LD_INT 1
42762: PLUS
42763: PPUSH
42764: LD_VAR 0 9
42768: PPUSH
42769: CALL_OW 2
42773: ST_TO_ADDR
42774: GO 42702
42776: POP
42777: POP
// if tmp then
42778: LD_VAR 0 19
42782: IFFALSE 42794
// f := tmp ;
42784: LD_ADDR_VAR 0 12
42788: PUSH
42789: LD_VAR 0 19
42793: ST_TO_ADDR
// end ; x := personel [ i ] ;
42794: LD_ADDR_VAR 0 13
42798: PUSH
42799: LD_VAR 0 6
42803: PUSH
42804: LD_VAR 0 8
42808: ARRAY
42809: ST_TO_ADDR
// if x = - 1 then
42810: LD_VAR 0 13
42814: PUSH
42815: LD_INT 1
42817: NEG
42818: EQUAL
42819: IFFALSE 43028
// begin for j in f do
42821: LD_ADDR_VAR 0 9
42825: PUSH
42826: LD_VAR 0 12
42830: PUSH
42831: FOR_IN
42832: IFFALSE 43024
// repeat InitHc ;
42834: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42838: LD_VAR 0 9
42842: PPUSH
42843: CALL_OW 266
42847: PUSH
42848: LD_INT 5
42850: EQUAL
42851: IFFALSE 42921
// begin if UnitsInside ( j ) < 3 then
42853: LD_VAR 0 9
42857: PPUSH
42858: CALL_OW 313
42862: PUSH
42863: LD_INT 3
42865: LESS
42866: IFFALSE 42902
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42868: LD_INT 0
42870: PPUSH
42871: LD_INT 5
42873: PUSH
42874: LD_INT 8
42876: PUSH
42877: LD_INT 9
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: LIST
42884: PUSH
42885: LD_VAR 0 17
42889: ARRAY
42890: PPUSH
42891: LD_VAR 0 4
42895: PPUSH
42896: CALL_OW 380
42900: GO 42919
// PrepareHuman ( false , i , skill ) ;
42902: LD_INT 0
42904: PPUSH
42905: LD_VAR 0 8
42909: PPUSH
42910: LD_VAR 0 4
42914: PPUSH
42915: CALL_OW 380
// end else
42919: GO 42938
// PrepareHuman ( false , i , skill ) ;
42921: LD_INT 0
42923: PPUSH
42924: LD_VAR 0 8
42928: PPUSH
42929: LD_VAR 0 4
42933: PPUSH
42934: CALL_OW 380
// un := CreateHuman ;
42938: LD_ADDR_VAR 0 14
42942: PUSH
42943: CALL_OW 44
42947: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42948: LD_ADDR_VAR 0 7
42952: PUSH
42953: LD_VAR 0 7
42957: PPUSH
42958: LD_INT 1
42960: PPUSH
42961: LD_VAR 0 14
42965: PPUSH
42966: CALL_OW 2
42970: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42971: LD_VAR 0 14
42975: PPUSH
42976: LD_VAR 0 9
42980: PPUSH
42981: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42985: LD_VAR 0 9
42989: PPUSH
42990: CALL_OW 313
42994: PUSH
42995: LD_INT 6
42997: EQUAL
42998: PUSH
42999: LD_VAR 0 9
43003: PPUSH
43004: CALL_OW 266
43008: PUSH
43009: LD_INT 32
43011: PUSH
43012: LD_INT 31
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: IN
43019: OR
43020: IFFALSE 42834
43022: GO 42831
43024: POP
43025: POP
// end else
43026: GO 43408
// for j = 1 to x do
43028: LD_ADDR_VAR 0 9
43032: PUSH
43033: DOUBLE
43034: LD_INT 1
43036: DEC
43037: ST_TO_ADDR
43038: LD_VAR 0 13
43042: PUSH
43043: FOR_TO
43044: IFFALSE 43406
// begin InitHc ;
43046: CALL_OW 19
// if not f then
43050: LD_VAR 0 12
43054: NOT
43055: IFFALSE 43144
// begin PrepareHuman ( false , i , skill ) ;
43057: LD_INT 0
43059: PPUSH
43060: LD_VAR 0 8
43064: PPUSH
43065: LD_VAR 0 4
43069: PPUSH
43070: CALL_OW 380
// un := CreateHuman ;
43074: LD_ADDR_VAR 0 14
43078: PUSH
43079: CALL_OW 44
43083: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43084: LD_ADDR_VAR 0 7
43088: PUSH
43089: LD_VAR 0 7
43093: PPUSH
43094: LD_INT 1
43096: PPUSH
43097: LD_VAR 0 14
43101: PPUSH
43102: CALL_OW 2
43106: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43107: LD_VAR 0 14
43111: PPUSH
43112: LD_VAR 0 1
43116: PPUSH
43117: CALL_OW 250
43121: PPUSH
43122: LD_VAR 0 1
43126: PPUSH
43127: CALL_OW 251
43131: PPUSH
43132: LD_INT 10
43134: PPUSH
43135: LD_INT 0
43137: PPUSH
43138: CALL_OW 50
// continue ;
43142: GO 43043
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43144: LD_VAR 0 12
43148: PUSH
43149: LD_INT 1
43151: ARRAY
43152: PPUSH
43153: CALL_OW 313
43157: PUSH
43158: LD_VAR 0 12
43162: PUSH
43163: LD_INT 1
43165: ARRAY
43166: PPUSH
43167: CALL_OW 266
43171: PUSH
43172: LD_INT 32
43174: PUSH
43175: LD_INT 31
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: IN
43182: AND
43183: PUSH
43184: LD_VAR 0 12
43188: PUSH
43189: LD_INT 1
43191: ARRAY
43192: PPUSH
43193: CALL_OW 313
43197: PUSH
43198: LD_INT 6
43200: EQUAL
43201: OR
43202: IFFALSE 43222
// f := Delete ( f , 1 ) ;
43204: LD_ADDR_VAR 0 12
43208: PUSH
43209: LD_VAR 0 12
43213: PPUSH
43214: LD_INT 1
43216: PPUSH
43217: CALL_OW 3
43221: ST_TO_ADDR
// if not f then
43222: LD_VAR 0 12
43226: NOT
43227: IFFALSE 43245
// begin x := x + 2 ;
43229: LD_ADDR_VAR 0 13
43233: PUSH
43234: LD_VAR 0 13
43238: PUSH
43239: LD_INT 2
43241: PLUS
43242: ST_TO_ADDR
// continue ;
43243: GO 43043
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43245: LD_VAR 0 12
43249: PUSH
43250: LD_INT 1
43252: ARRAY
43253: PPUSH
43254: CALL_OW 266
43258: PUSH
43259: LD_INT 5
43261: EQUAL
43262: IFFALSE 43336
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43264: LD_VAR 0 12
43268: PUSH
43269: LD_INT 1
43271: ARRAY
43272: PPUSH
43273: CALL_OW 313
43277: PUSH
43278: LD_INT 3
43280: LESS
43281: IFFALSE 43317
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43283: LD_INT 0
43285: PPUSH
43286: LD_INT 5
43288: PUSH
43289: LD_INT 8
43291: PUSH
43292: LD_INT 9
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: LIST
43299: PUSH
43300: LD_VAR 0 17
43304: ARRAY
43305: PPUSH
43306: LD_VAR 0 4
43310: PPUSH
43311: CALL_OW 380
43315: GO 43334
// PrepareHuman ( false , i , skill ) ;
43317: LD_INT 0
43319: PPUSH
43320: LD_VAR 0 8
43324: PPUSH
43325: LD_VAR 0 4
43329: PPUSH
43330: CALL_OW 380
// end else
43334: GO 43353
// PrepareHuman ( false , i , skill ) ;
43336: LD_INT 0
43338: PPUSH
43339: LD_VAR 0 8
43343: PPUSH
43344: LD_VAR 0 4
43348: PPUSH
43349: CALL_OW 380
// un := CreateHuman ;
43353: LD_ADDR_VAR 0 14
43357: PUSH
43358: CALL_OW 44
43362: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43363: LD_ADDR_VAR 0 7
43367: PUSH
43368: LD_VAR 0 7
43372: PPUSH
43373: LD_INT 1
43375: PPUSH
43376: LD_VAR 0 14
43380: PPUSH
43381: CALL_OW 2
43385: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43386: LD_VAR 0 14
43390: PPUSH
43391: LD_VAR 0 12
43395: PUSH
43396: LD_INT 1
43398: ARRAY
43399: PPUSH
43400: CALL_OW 52
// end ;
43404: GO 43043
43406: POP
43407: POP
// end ;
43408: GO 42345
43410: POP
43411: POP
// result := result ^ buildings ;
43412: LD_ADDR_VAR 0 7
43416: PUSH
43417: LD_VAR 0 7
43421: PUSH
43422: LD_VAR 0 18
43426: ADD
43427: ST_TO_ADDR
// end else
43428: GO 43571
// begin for i = 1 to personel do
43430: LD_ADDR_VAR 0 8
43434: PUSH
43435: DOUBLE
43436: LD_INT 1
43438: DEC
43439: ST_TO_ADDR
43440: LD_VAR 0 6
43444: PUSH
43445: FOR_TO
43446: IFFALSE 43569
// begin if i > 4 then
43448: LD_VAR 0 8
43452: PUSH
43453: LD_INT 4
43455: GREATER
43456: IFFALSE 43460
// break ;
43458: GO 43569
// x := personel [ i ] ;
43460: LD_ADDR_VAR 0 13
43464: PUSH
43465: LD_VAR 0 6
43469: PUSH
43470: LD_VAR 0 8
43474: ARRAY
43475: ST_TO_ADDR
// if x = - 1 then
43476: LD_VAR 0 13
43480: PUSH
43481: LD_INT 1
43483: NEG
43484: EQUAL
43485: IFFALSE 43489
// continue ;
43487: GO 43445
// PrepareHuman ( false , i , skill ) ;
43489: LD_INT 0
43491: PPUSH
43492: LD_VAR 0 8
43496: PPUSH
43497: LD_VAR 0 4
43501: PPUSH
43502: CALL_OW 380
// un := CreateHuman ;
43506: LD_ADDR_VAR 0 14
43510: PUSH
43511: CALL_OW 44
43515: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43516: LD_VAR 0 14
43520: PPUSH
43521: LD_VAR 0 1
43525: PPUSH
43526: CALL_OW 250
43530: PPUSH
43531: LD_VAR 0 1
43535: PPUSH
43536: CALL_OW 251
43540: PPUSH
43541: LD_INT 10
43543: PPUSH
43544: LD_INT 0
43546: PPUSH
43547: CALL_OW 50
// result := result ^ un ;
43551: LD_ADDR_VAR 0 7
43555: PUSH
43556: LD_VAR 0 7
43560: PUSH
43561: LD_VAR 0 14
43565: ADD
43566: ST_TO_ADDR
// end ;
43567: GO 43445
43569: POP
43570: POP
// end ; end ;
43571: LD_VAR 0 7
43575: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43576: LD_INT 0
43578: PPUSH
43579: PPUSH
43580: PPUSH
43581: PPUSH
43582: PPUSH
43583: PPUSH
43584: PPUSH
43585: PPUSH
43586: PPUSH
43587: PPUSH
43588: PPUSH
43589: PPUSH
43590: PPUSH
43591: PPUSH
43592: PPUSH
43593: PPUSH
// result := false ;
43594: LD_ADDR_VAR 0 3
43598: PUSH
43599: LD_INT 0
43601: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43602: LD_VAR 0 1
43606: NOT
43607: PUSH
43608: LD_VAR 0 1
43612: PPUSH
43613: CALL_OW 266
43617: PUSH
43618: LD_INT 32
43620: PUSH
43621: LD_INT 33
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: IN
43628: NOT
43629: OR
43630: IFFALSE 43634
// exit ;
43632: GO 44743
// nat := GetNation ( tower ) ;
43634: LD_ADDR_VAR 0 12
43638: PUSH
43639: LD_VAR 0 1
43643: PPUSH
43644: CALL_OW 248
43648: ST_TO_ADDR
// side := GetSide ( tower ) ;
43649: LD_ADDR_VAR 0 16
43653: PUSH
43654: LD_VAR 0 1
43658: PPUSH
43659: CALL_OW 255
43663: ST_TO_ADDR
// x := GetX ( tower ) ;
43664: LD_ADDR_VAR 0 10
43668: PUSH
43669: LD_VAR 0 1
43673: PPUSH
43674: CALL_OW 250
43678: ST_TO_ADDR
// y := GetY ( tower ) ;
43679: LD_ADDR_VAR 0 11
43683: PUSH
43684: LD_VAR 0 1
43688: PPUSH
43689: CALL_OW 251
43693: ST_TO_ADDR
// if not x or not y then
43694: LD_VAR 0 10
43698: NOT
43699: PUSH
43700: LD_VAR 0 11
43704: NOT
43705: OR
43706: IFFALSE 43710
// exit ;
43708: GO 44743
// weapon := 0 ;
43710: LD_ADDR_VAR 0 18
43714: PUSH
43715: LD_INT 0
43717: ST_TO_ADDR
// fac_list := [ ] ;
43718: LD_ADDR_VAR 0 17
43722: PUSH
43723: EMPTY
43724: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43725: LD_ADDR_VAR 0 6
43729: PUSH
43730: LD_VAR 0 1
43734: PPUSH
43735: CALL_OW 274
43739: PPUSH
43740: LD_VAR 0 2
43744: PPUSH
43745: LD_INT 0
43747: PPUSH
43748: CALL 41314 0 3
43752: PPUSH
43753: LD_INT 30
43755: PUSH
43756: LD_INT 3
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PPUSH
43763: CALL_OW 72
43767: ST_TO_ADDR
// if not factories then
43768: LD_VAR 0 6
43772: NOT
43773: IFFALSE 43777
// exit ;
43775: GO 44743
// for i in factories do
43777: LD_ADDR_VAR 0 8
43781: PUSH
43782: LD_VAR 0 6
43786: PUSH
43787: FOR_IN
43788: IFFALSE 43813
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43790: LD_ADDR_VAR 0 17
43794: PUSH
43795: LD_VAR 0 17
43799: PUSH
43800: LD_VAR 0 8
43804: PPUSH
43805: CALL_OW 478
43809: UNION
43810: ST_TO_ADDR
43811: GO 43787
43813: POP
43814: POP
// if not fac_list then
43815: LD_VAR 0 17
43819: NOT
43820: IFFALSE 43824
// exit ;
43822: GO 44743
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43824: LD_ADDR_VAR 0 5
43828: PUSH
43829: LD_INT 4
43831: PUSH
43832: LD_INT 5
43834: PUSH
43835: LD_INT 9
43837: PUSH
43838: LD_INT 10
43840: PUSH
43841: LD_INT 6
43843: PUSH
43844: LD_INT 7
43846: PUSH
43847: LD_INT 11
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 27
43861: PUSH
43862: LD_INT 28
43864: PUSH
43865: LD_INT 26
43867: PUSH
43868: LD_INT 30
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 43
43879: PUSH
43880: LD_INT 44
43882: PUSH
43883: LD_INT 46
43885: PUSH
43886: LD_INT 45
43888: PUSH
43889: LD_INT 47
43891: PUSH
43892: LD_INT 49
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: LIST
43907: PUSH
43908: LD_VAR 0 12
43912: ARRAY
43913: ST_TO_ADDR
// list := list isect fac_list ;
43914: LD_ADDR_VAR 0 5
43918: PUSH
43919: LD_VAR 0 5
43923: PUSH
43924: LD_VAR 0 17
43928: ISECT
43929: ST_TO_ADDR
// if not list then
43930: LD_VAR 0 5
43934: NOT
43935: IFFALSE 43939
// exit ;
43937: GO 44743
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43939: LD_VAR 0 12
43943: PUSH
43944: LD_INT 3
43946: EQUAL
43947: PUSH
43948: LD_INT 49
43950: PUSH
43951: LD_VAR 0 5
43955: IN
43956: AND
43957: PUSH
43958: LD_INT 31
43960: PPUSH
43961: LD_VAR 0 16
43965: PPUSH
43966: CALL_OW 321
43970: PUSH
43971: LD_INT 2
43973: EQUAL
43974: AND
43975: IFFALSE 44035
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43977: LD_INT 22
43979: PUSH
43980: LD_VAR 0 16
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 35
43991: PUSH
43992: LD_INT 49
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 91
44001: PUSH
44002: LD_VAR 0 1
44006: PUSH
44007: LD_INT 10
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: LIST
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: LIST
44019: PPUSH
44020: CALL_OW 69
44024: NOT
44025: IFFALSE 44035
// weapon := ru_time_lapser ;
44027: LD_ADDR_VAR 0 18
44031: PUSH
44032: LD_INT 49
44034: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44035: LD_VAR 0 12
44039: PUSH
44040: LD_INT 1
44042: PUSH
44043: LD_INT 2
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: IN
44050: PUSH
44051: LD_INT 11
44053: PUSH
44054: LD_VAR 0 5
44058: IN
44059: PUSH
44060: LD_INT 30
44062: PUSH
44063: LD_VAR 0 5
44067: IN
44068: OR
44069: AND
44070: PUSH
44071: LD_INT 6
44073: PPUSH
44074: LD_VAR 0 16
44078: PPUSH
44079: CALL_OW 321
44083: PUSH
44084: LD_INT 2
44086: EQUAL
44087: AND
44088: IFFALSE 44253
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44090: LD_INT 22
44092: PUSH
44093: LD_VAR 0 16
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 2
44104: PUSH
44105: LD_INT 35
44107: PUSH
44108: LD_INT 11
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 35
44117: PUSH
44118: LD_INT 30
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 91
44132: PUSH
44133: LD_VAR 0 1
44137: PUSH
44138: LD_INT 18
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: LIST
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: LIST
44150: PPUSH
44151: CALL_OW 69
44155: NOT
44156: PUSH
44157: LD_INT 22
44159: PUSH
44160: LD_VAR 0 16
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 2
44171: PUSH
44172: LD_INT 30
44174: PUSH
44175: LD_INT 32
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 30
44184: PUSH
44185: LD_INT 33
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 91
44199: PUSH
44200: LD_VAR 0 1
44204: PUSH
44205: LD_INT 12
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: LIST
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: LIST
44217: PUSH
44218: EMPTY
44219: LIST
44220: PPUSH
44221: CALL_OW 69
44225: PUSH
44226: LD_INT 2
44228: GREATER
44229: AND
44230: IFFALSE 44253
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44232: LD_ADDR_VAR 0 18
44236: PUSH
44237: LD_INT 11
44239: PUSH
44240: LD_INT 30
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_VAR 0 12
44251: ARRAY
44252: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44253: LD_VAR 0 18
44257: NOT
44258: PUSH
44259: LD_INT 40
44261: PPUSH
44262: LD_VAR 0 16
44266: PPUSH
44267: CALL_OW 321
44271: PUSH
44272: LD_INT 2
44274: EQUAL
44275: AND
44276: PUSH
44277: LD_INT 7
44279: PUSH
44280: LD_VAR 0 5
44284: IN
44285: PUSH
44286: LD_INT 28
44288: PUSH
44289: LD_VAR 0 5
44293: IN
44294: OR
44295: PUSH
44296: LD_INT 45
44298: PUSH
44299: LD_VAR 0 5
44303: IN
44304: OR
44305: AND
44306: IFFALSE 44560
// begin hex := GetHexInfo ( x , y ) ;
44308: LD_ADDR_VAR 0 4
44312: PUSH
44313: LD_VAR 0 10
44317: PPUSH
44318: LD_VAR 0 11
44322: PPUSH
44323: CALL_OW 546
44327: ST_TO_ADDR
// if hex [ 1 ] then
44328: LD_VAR 0 4
44332: PUSH
44333: LD_INT 1
44335: ARRAY
44336: IFFALSE 44340
// exit ;
44338: GO 44743
// height := hex [ 2 ] ;
44340: LD_ADDR_VAR 0 15
44344: PUSH
44345: LD_VAR 0 4
44349: PUSH
44350: LD_INT 2
44352: ARRAY
44353: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44354: LD_ADDR_VAR 0 14
44358: PUSH
44359: LD_INT 0
44361: PUSH
44362: LD_INT 2
44364: PUSH
44365: LD_INT 3
44367: PUSH
44368: LD_INT 5
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: ST_TO_ADDR
// for i in tmp do
44377: LD_ADDR_VAR 0 8
44381: PUSH
44382: LD_VAR 0 14
44386: PUSH
44387: FOR_IN
44388: IFFALSE 44558
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44390: LD_ADDR_VAR 0 9
44394: PUSH
44395: LD_VAR 0 10
44399: PPUSH
44400: LD_VAR 0 8
44404: PPUSH
44405: LD_INT 5
44407: PPUSH
44408: CALL_OW 272
44412: PUSH
44413: LD_VAR 0 11
44417: PPUSH
44418: LD_VAR 0 8
44422: PPUSH
44423: LD_INT 5
44425: PPUSH
44426: CALL_OW 273
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44435: LD_VAR 0 9
44439: PUSH
44440: LD_INT 1
44442: ARRAY
44443: PPUSH
44444: LD_VAR 0 9
44448: PUSH
44449: LD_INT 2
44451: ARRAY
44452: PPUSH
44453: CALL_OW 488
44457: IFFALSE 44556
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44459: LD_ADDR_VAR 0 4
44463: PUSH
44464: LD_VAR 0 9
44468: PUSH
44469: LD_INT 1
44471: ARRAY
44472: PPUSH
44473: LD_VAR 0 9
44477: PUSH
44478: LD_INT 2
44480: ARRAY
44481: PPUSH
44482: CALL_OW 546
44486: ST_TO_ADDR
// if hex [ 1 ] then
44487: LD_VAR 0 4
44491: PUSH
44492: LD_INT 1
44494: ARRAY
44495: IFFALSE 44499
// continue ;
44497: GO 44387
// h := hex [ 2 ] ;
44499: LD_ADDR_VAR 0 13
44503: PUSH
44504: LD_VAR 0 4
44508: PUSH
44509: LD_INT 2
44511: ARRAY
44512: ST_TO_ADDR
// if h + 7 < height then
44513: LD_VAR 0 13
44517: PUSH
44518: LD_INT 7
44520: PLUS
44521: PUSH
44522: LD_VAR 0 15
44526: LESS
44527: IFFALSE 44556
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44529: LD_ADDR_VAR 0 18
44533: PUSH
44534: LD_INT 7
44536: PUSH
44537: LD_INT 28
44539: PUSH
44540: LD_INT 45
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: LIST
44547: PUSH
44548: LD_VAR 0 12
44552: ARRAY
44553: ST_TO_ADDR
// break ;
44554: GO 44558
// end ; end ; end ;
44556: GO 44387
44558: POP
44559: POP
// end ; if not weapon then
44560: LD_VAR 0 18
44564: NOT
44565: IFFALSE 44625
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44567: LD_ADDR_VAR 0 5
44571: PUSH
44572: LD_VAR 0 5
44576: PUSH
44577: LD_INT 11
44579: PUSH
44580: LD_INT 30
44582: PUSH
44583: LD_INT 49
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: LIST
44590: DIFF
44591: ST_TO_ADDR
// if not list then
44592: LD_VAR 0 5
44596: NOT
44597: IFFALSE 44601
// exit ;
44599: GO 44743
// weapon := list [ rand ( 1 , list ) ] ;
44601: LD_ADDR_VAR 0 18
44605: PUSH
44606: LD_VAR 0 5
44610: PUSH
44611: LD_INT 1
44613: PPUSH
44614: LD_VAR 0 5
44618: PPUSH
44619: CALL_OW 12
44623: ARRAY
44624: ST_TO_ADDR
// end ; if weapon then
44625: LD_VAR 0 18
44629: IFFALSE 44743
// begin tmp := CostOfWeapon ( weapon ) ;
44631: LD_ADDR_VAR 0 14
44635: PUSH
44636: LD_VAR 0 18
44640: PPUSH
44641: CALL_OW 451
44645: ST_TO_ADDR
// j := GetBase ( tower ) ;
44646: LD_ADDR_VAR 0 9
44650: PUSH
44651: LD_VAR 0 1
44655: PPUSH
44656: CALL_OW 274
44660: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44661: LD_VAR 0 9
44665: PPUSH
44666: LD_INT 1
44668: PPUSH
44669: CALL_OW 275
44673: PUSH
44674: LD_VAR 0 14
44678: PUSH
44679: LD_INT 1
44681: ARRAY
44682: GREATEREQUAL
44683: PUSH
44684: LD_VAR 0 9
44688: PPUSH
44689: LD_INT 2
44691: PPUSH
44692: CALL_OW 275
44696: PUSH
44697: LD_VAR 0 14
44701: PUSH
44702: LD_INT 2
44704: ARRAY
44705: GREATEREQUAL
44706: AND
44707: PUSH
44708: LD_VAR 0 9
44712: PPUSH
44713: LD_INT 3
44715: PPUSH
44716: CALL_OW 275
44720: PUSH
44721: LD_VAR 0 14
44725: PUSH
44726: LD_INT 3
44728: ARRAY
44729: GREATEREQUAL
44730: AND
44731: IFFALSE 44743
// result := weapon ;
44733: LD_ADDR_VAR 0 3
44737: PUSH
44738: LD_VAR 0 18
44742: ST_TO_ADDR
// end ; end ;
44743: LD_VAR 0 3
44747: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44748: LD_INT 0
44750: PPUSH
44751: PPUSH
// result := true ;
44752: LD_ADDR_VAR 0 3
44756: PUSH
44757: LD_INT 1
44759: ST_TO_ADDR
// if array1 = array2 then
44760: LD_VAR 0 1
44764: PUSH
44765: LD_VAR 0 2
44769: EQUAL
44770: IFFALSE 44830
// begin for i = 1 to array1 do
44772: LD_ADDR_VAR 0 4
44776: PUSH
44777: DOUBLE
44778: LD_INT 1
44780: DEC
44781: ST_TO_ADDR
44782: LD_VAR 0 1
44786: PUSH
44787: FOR_TO
44788: IFFALSE 44826
// if array1 [ i ] <> array2 [ i ] then
44790: LD_VAR 0 1
44794: PUSH
44795: LD_VAR 0 4
44799: ARRAY
44800: PUSH
44801: LD_VAR 0 2
44805: PUSH
44806: LD_VAR 0 4
44810: ARRAY
44811: NONEQUAL
44812: IFFALSE 44824
// begin result := false ;
44814: LD_ADDR_VAR 0 3
44818: PUSH
44819: LD_INT 0
44821: ST_TO_ADDR
// break ;
44822: GO 44826
// end ;
44824: GO 44787
44826: POP
44827: POP
// end else
44828: GO 44838
// result := false ;
44830: LD_ADDR_VAR 0 3
44834: PUSH
44835: LD_INT 0
44837: ST_TO_ADDR
// end ;
44838: LD_VAR 0 3
44842: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44843: LD_INT 0
44845: PPUSH
44846: PPUSH
// if not array1 or not array2 then
44847: LD_VAR 0 1
44851: NOT
44852: PUSH
44853: LD_VAR 0 2
44857: NOT
44858: OR
44859: IFFALSE 44863
// exit ;
44861: GO 44927
// result := true ;
44863: LD_ADDR_VAR 0 3
44867: PUSH
44868: LD_INT 1
44870: ST_TO_ADDR
// for i = 1 to array1 do
44871: LD_ADDR_VAR 0 4
44875: PUSH
44876: DOUBLE
44877: LD_INT 1
44879: DEC
44880: ST_TO_ADDR
44881: LD_VAR 0 1
44885: PUSH
44886: FOR_TO
44887: IFFALSE 44925
// if array1 [ i ] <> array2 [ i ] then
44889: LD_VAR 0 1
44893: PUSH
44894: LD_VAR 0 4
44898: ARRAY
44899: PUSH
44900: LD_VAR 0 2
44904: PUSH
44905: LD_VAR 0 4
44909: ARRAY
44910: NONEQUAL
44911: IFFALSE 44923
// begin result := false ;
44913: LD_ADDR_VAR 0 3
44917: PUSH
44918: LD_INT 0
44920: ST_TO_ADDR
// break ;
44921: GO 44925
// end ;
44923: GO 44886
44925: POP
44926: POP
// end ;
44927: LD_VAR 0 3
44931: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44932: LD_INT 0
44934: PPUSH
44935: PPUSH
44936: PPUSH
// pom := GetBase ( fac ) ;
44937: LD_ADDR_VAR 0 5
44941: PUSH
44942: LD_VAR 0 1
44946: PPUSH
44947: CALL_OW 274
44951: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44952: LD_ADDR_VAR 0 4
44956: PUSH
44957: LD_VAR 0 2
44961: PUSH
44962: LD_INT 1
44964: ARRAY
44965: PPUSH
44966: LD_VAR 0 2
44970: PUSH
44971: LD_INT 2
44973: ARRAY
44974: PPUSH
44975: LD_VAR 0 2
44979: PUSH
44980: LD_INT 3
44982: ARRAY
44983: PPUSH
44984: LD_VAR 0 2
44988: PUSH
44989: LD_INT 4
44991: ARRAY
44992: PPUSH
44993: CALL_OW 449
44997: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44998: LD_ADDR_VAR 0 3
45002: PUSH
45003: LD_VAR 0 5
45007: PPUSH
45008: LD_INT 1
45010: PPUSH
45011: CALL_OW 275
45015: PUSH
45016: LD_VAR 0 4
45020: PUSH
45021: LD_INT 1
45023: ARRAY
45024: GREATEREQUAL
45025: PUSH
45026: LD_VAR 0 5
45030: PPUSH
45031: LD_INT 2
45033: PPUSH
45034: CALL_OW 275
45038: PUSH
45039: LD_VAR 0 4
45043: PUSH
45044: LD_INT 2
45046: ARRAY
45047: GREATEREQUAL
45048: AND
45049: PUSH
45050: LD_VAR 0 5
45054: PPUSH
45055: LD_INT 3
45057: PPUSH
45058: CALL_OW 275
45062: PUSH
45063: LD_VAR 0 4
45067: PUSH
45068: LD_INT 3
45070: ARRAY
45071: GREATEREQUAL
45072: AND
45073: ST_TO_ADDR
// end ;
45074: LD_VAR 0 3
45078: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45079: LD_INT 0
45081: PPUSH
45082: PPUSH
45083: PPUSH
45084: PPUSH
// pom := GetBase ( building ) ;
45085: LD_ADDR_VAR 0 3
45089: PUSH
45090: LD_VAR 0 1
45094: PPUSH
45095: CALL_OW 274
45099: ST_TO_ADDR
// if not pom then
45100: LD_VAR 0 3
45104: NOT
45105: IFFALSE 45109
// exit ;
45107: GO 45279
// btype := GetBType ( building ) ;
45109: LD_ADDR_VAR 0 5
45113: PUSH
45114: LD_VAR 0 1
45118: PPUSH
45119: CALL_OW 266
45123: ST_TO_ADDR
// if btype = b_armoury then
45124: LD_VAR 0 5
45128: PUSH
45129: LD_INT 4
45131: EQUAL
45132: IFFALSE 45142
// btype := b_barracks ;
45134: LD_ADDR_VAR 0 5
45138: PUSH
45139: LD_INT 5
45141: ST_TO_ADDR
// if btype = b_depot then
45142: LD_VAR 0 5
45146: PUSH
45147: LD_INT 0
45149: EQUAL
45150: IFFALSE 45160
// btype := b_warehouse ;
45152: LD_ADDR_VAR 0 5
45156: PUSH
45157: LD_INT 1
45159: ST_TO_ADDR
// if btype = b_workshop then
45160: LD_VAR 0 5
45164: PUSH
45165: LD_INT 2
45167: EQUAL
45168: IFFALSE 45178
// btype := b_factory ;
45170: LD_ADDR_VAR 0 5
45174: PUSH
45175: LD_INT 3
45177: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45178: LD_ADDR_VAR 0 4
45182: PUSH
45183: LD_VAR 0 5
45187: PPUSH
45188: LD_VAR 0 1
45192: PPUSH
45193: CALL_OW 248
45197: PPUSH
45198: CALL_OW 450
45202: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45203: LD_ADDR_VAR 0 2
45207: PUSH
45208: LD_VAR 0 3
45212: PPUSH
45213: LD_INT 1
45215: PPUSH
45216: CALL_OW 275
45220: PUSH
45221: LD_VAR 0 4
45225: PUSH
45226: LD_INT 1
45228: ARRAY
45229: GREATEREQUAL
45230: PUSH
45231: LD_VAR 0 3
45235: PPUSH
45236: LD_INT 2
45238: PPUSH
45239: CALL_OW 275
45243: PUSH
45244: LD_VAR 0 4
45248: PUSH
45249: LD_INT 2
45251: ARRAY
45252: GREATEREQUAL
45253: AND
45254: PUSH
45255: LD_VAR 0 3
45259: PPUSH
45260: LD_INT 3
45262: PPUSH
45263: CALL_OW 275
45267: PUSH
45268: LD_VAR 0 4
45272: PUSH
45273: LD_INT 3
45275: ARRAY
45276: GREATEREQUAL
45277: AND
45278: ST_TO_ADDR
// end ;
45279: LD_VAR 0 2
45283: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45284: LD_INT 0
45286: PPUSH
45287: PPUSH
45288: PPUSH
// pom := GetBase ( building ) ;
45289: LD_ADDR_VAR 0 4
45293: PUSH
45294: LD_VAR 0 1
45298: PPUSH
45299: CALL_OW 274
45303: ST_TO_ADDR
// if not pom then
45304: LD_VAR 0 4
45308: NOT
45309: IFFALSE 45313
// exit ;
45311: GO 45414
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45313: LD_ADDR_VAR 0 5
45317: PUSH
45318: LD_VAR 0 2
45322: PPUSH
45323: LD_VAR 0 1
45327: PPUSH
45328: CALL_OW 248
45332: PPUSH
45333: CALL_OW 450
45337: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45338: LD_ADDR_VAR 0 3
45342: PUSH
45343: LD_VAR 0 4
45347: PPUSH
45348: LD_INT 1
45350: PPUSH
45351: CALL_OW 275
45355: PUSH
45356: LD_VAR 0 5
45360: PUSH
45361: LD_INT 1
45363: ARRAY
45364: GREATEREQUAL
45365: PUSH
45366: LD_VAR 0 4
45370: PPUSH
45371: LD_INT 2
45373: PPUSH
45374: CALL_OW 275
45378: PUSH
45379: LD_VAR 0 5
45383: PUSH
45384: LD_INT 2
45386: ARRAY
45387: GREATEREQUAL
45388: AND
45389: PUSH
45390: LD_VAR 0 4
45394: PPUSH
45395: LD_INT 3
45397: PPUSH
45398: CALL_OW 275
45402: PUSH
45403: LD_VAR 0 5
45407: PUSH
45408: LD_INT 3
45410: ARRAY
45411: GREATEREQUAL
45412: AND
45413: ST_TO_ADDR
// end ;
45414: LD_VAR 0 3
45418: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45419: LD_INT 0
45421: PPUSH
45422: PPUSH
45423: PPUSH
45424: PPUSH
45425: PPUSH
45426: PPUSH
45427: PPUSH
45428: PPUSH
45429: PPUSH
45430: PPUSH
45431: PPUSH
// result := false ;
45432: LD_ADDR_VAR 0 8
45436: PUSH
45437: LD_INT 0
45439: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45440: LD_VAR 0 5
45444: NOT
45445: PUSH
45446: LD_VAR 0 1
45450: NOT
45451: OR
45452: PUSH
45453: LD_VAR 0 2
45457: NOT
45458: OR
45459: PUSH
45460: LD_VAR 0 3
45464: NOT
45465: OR
45466: IFFALSE 45470
// exit ;
45468: GO 46284
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45470: LD_ADDR_VAR 0 14
45474: PUSH
45475: LD_VAR 0 1
45479: PPUSH
45480: LD_VAR 0 2
45484: PPUSH
45485: LD_VAR 0 3
45489: PPUSH
45490: LD_VAR 0 4
45494: PPUSH
45495: LD_VAR 0 5
45499: PUSH
45500: LD_INT 1
45502: ARRAY
45503: PPUSH
45504: CALL_OW 248
45508: PPUSH
45509: LD_INT 0
45511: PPUSH
45512: CALL 47521 0 6
45516: ST_TO_ADDR
// if not hexes then
45517: LD_VAR 0 14
45521: NOT
45522: IFFALSE 45526
// exit ;
45524: GO 46284
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45526: LD_ADDR_VAR 0 17
45530: PUSH
45531: LD_VAR 0 5
45535: PPUSH
45536: LD_INT 22
45538: PUSH
45539: LD_VAR 0 13
45543: PPUSH
45544: CALL_OW 255
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 2
45555: PUSH
45556: LD_INT 30
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 30
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: LIST
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PPUSH
45585: CALL_OW 72
45589: ST_TO_ADDR
// for i = 1 to hexes do
45590: LD_ADDR_VAR 0 9
45594: PUSH
45595: DOUBLE
45596: LD_INT 1
45598: DEC
45599: ST_TO_ADDR
45600: LD_VAR 0 14
45604: PUSH
45605: FOR_TO
45606: IFFALSE 46282
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45608: LD_ADDR_VAR 0 13
45612: PUSH
45613: LD_VAR 0 14
45617: PUSH
45618: LD_VAR 0 9
45622: ARRAY
45623: PUSH
45624: LD_INT 1
45626: ARRAY
45627: PPUSH
45628: LD_VAR 0 14
45632: PUSH
45633: LD_VAR 0 9
45637: ARRAY
45638: PUSH
45639: LD_INT 2
45641: ARRAY
45642: PPUSH
45643: CALL_OW 428
45647: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45648: LD_VAR 0 14
45652: PUSH
45653: LD_VAR 0 9
45657: ARRAY
45658: PUSH
45659: LD_INT 1
45661: ARRAY
45662: PPUSH
45663: LD_VAR 0 14
45667: PUSH
45668: LD_VAR 0 9
45672: ARRAY
45673: PUSH
45674: LD_INT 2
45676: ARRAY
45677: PPUSH
45678: CALL_OW 351
45682: PUSH
45683: LD_VAR 0 14
45687: PUSH
45688: LD_VAR 0 9
45692: ARRAY
45693: PUSH
45694: LD_INT 1
45696: ARRAY
45697: PPUSH
45698: LD_VAR 0 14
45702: PUSH
45703: LD_VAR 0 9
45707: ARRAY
45708: PUSH
45709: LD_INT 2
45711: ARRAY
45712: PPUSH
45713: CALL_OW 488
45717: NOT
45718: OR
45719: PUSH
45720: LD_VAR 0 13
45724: PPUSH
45725: CALL_OW 247
45729: PUSH
45730: LD_INT 3
45732: EQUAL
45733: OR
45734: IFFALSE 45740
// exit ;
45736: POP
45737: POP
45738: GO 46284
// if not tmp then
45740: LD_VAR 0 13
45744: NOT
45745: IFFALSE 45749
// continue ;
45747: GO 45605
// result := true ;
45749: LD_ADDR_VAR 0 8
45753: PUSH
45754: LD_INT 1
45756: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45757: LD_VAR 0 6
45761: PUSH
45762: LD_VAR 0 13
45766: PPUSH
45767: CALL_OW 247
45771: PUSH
45772: LD_INT 2
45774: EQUAL
45775: AND
45776: PUSH
45777: LD_VAR 0 13
45781: PPUSH
45782: CALL_OW 263
45786: PUSH
45787: LD_INT 1
45789: EQUAL
45790: AND
45791: IFFALSE 45955
// begin if IsDrivenBy ( tmp ) then
45793: LD_VAR 0 13
45797: PPUSH
45798: CALL_OW 311
45802: IFFALSE 45806
// continue ;
45804: GO 45605
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45806: LD_VAR 0 6
45810: PPUSH
45811: LD_INT 3
45813: PUSH
45814: LD_INT 60
45816: PUSH
45817: EMPTY
45818: LIST
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 3
45826: PUSH
45827: LD_INT 55
45829: PUSH
45830: EMPTY
45831: LIST
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PPUSH
45841: CALL_OW 72
45845: IFFALSE 45953
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45847: LD_ADDR_VAR 0 18
45851: PUSH
45852: LD_VAR 0 6
45856: PPUSH
45857: LD_INT 3
45859: PUSH
45860: LD_INT 60
45862: PUSH
45863: EMPTY
45864: LIST
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 3
45872: PUSH
45873: LD_INT 55
45875: PUSH
45876: EMPTY
45877: LIST
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PPUSH
45887: CALL_OW 72
45891: PUSH
45892: LD_INT 1
45894: ARRAY
45895: ST_TO_ADDR
// if IsInUnit ( driver ) then
45896: LD_VAR 0 18
45900: PPUSH
45901: CALL_OW 310
45905: IFFALSE 45916
// ComExit ( driver ) ;
45907: LD_VAR 0 18
45911: PPUSH
45912: CALL 70705 0 1
// AddComEnterUnit ( driver , tmp ) ;
45916: LD_VAR 0 18
45920: PPUSH
45921: LD_VAR 0 13
45925: PPUSH
45926: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45930: LD_VAR 0 18
45934: PPUSH
45935: LD_VAR 0 7
45939: PPUSH
45940: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45944: LD_VAR 0 18
45948: PPUSH
45949: CALL_OW 181
// end ; continue ;
45953: GO 45605
// end ; if not cleaners or not tmp in cleaners then
45955: LD_VAR 0 6
45959: NOT
45960: PUSH
45961: LD_VAR 0 13
45965: PUSH
45966: LD_VAR 0 6
45970: IN
45971: NOT
45972: OR
45973: IFFALSE 46280
// begin if dep then
45975: LD_VAR 0 17
45979: IFFALSE 46115
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45981: LD_ADDR_VAR 0 16
45985: PUSH
45986: LD_VAR 0 17
45990: PUSH
45991: LD_INT 1
45993: ARRAY
45994: PPUSH
45995: CALL_OW 250
45999: PPUSH
46000: LD_VAR 0 17
46004: PUSH
46005: LD_INT 1
46007: ARRAY
46008: PPUSH
46009: CALL_OW 254
46013: PPUSH
46014: LD_INT 5
46016: PPUSH
46017: CALL_OW 272
46021: PUSH
46022: LD_VAR 0 17
46026: PUSH
46027: LD_INT 1
46029: ARRAY
46030: PPUSH
46031: CALL_OW 251
46035: PPUSH
46036: LD_VAR 0 17
46040: PUSH
46041: LD_INT 1
46043: ARRAY
46044: PPUSH
46045: CALL_OW 254
46049: PPUSH
46050: LD_INT 5
46052: PPUSH
46053: CALL_OW 273
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46062: LD_VAR 0 16
46066: PUSH
46067: LD_INT 1
46069: ARRAY
46070: PPUSH
46071: LD_VAR 0 16
46075: PUSH
46076: LD_INT 2
46078: ARRAY
46079: PPUSH
46080: CALL_OW 488
46084: IFFALSE 46115
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46086: LD_VAR 0 13
46090: PPUSH
46091: LD_VAR 0 16
46095: PUSH
46096: LD_INT 1
46098: ARRAY
46099: PPUSH
46100: LD_VAR 0 16
46104: PUSH
46105: LD_INT 2
46107: ARRAY
46108: PPUSH
46109: CALL_OW 111
// continue ;
46113: GO 45605
// end ; end ; r := GetDir ( tmp ) ;
46115: LD_ADDR_VAR 0 15
46119: PUSH
46120: LD_VAR 0 13
46124: PPUSH
46125: CALL_OW 254
46129: ST_TO_ADDR
// if r = 5 then
46130: LD_VAR 0 15
46134: PUSH
46135: LD_INT 5
46137: EQUAL
46138: IFFALSE 46148
// r := 0 ;
46140: LD_ADDR_VAR 0 15
46144: PUSH
46145: LD_INT 0
46147: ST_TO_ADDR
// for j = r to 5 do
46148: LD_ADDR_VAR 0 10
46152: PUSH
46153: DOUBLE
46154: LD_VAR 0 15
46158: DEC
46159: ST_TO_ADDR
46160: LD_INT 5
46162: PUSH
46163: FOR_TO
46164: IFFALSE 46278
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46166: LD_ADDR_VAR 0 11
46170: PUSH
46171: LD_VAR 0 13
46175: PPUSH
46176: CALL_OW 250
46180: PPUSH
46181: LD_VAR 0 10
46185: PPUSH
46186: LD_INT 2
46188: PPUSH
46189: CALL_OW 272
46193: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46194: LD_ADDR_VAR 0 12
46198: PUSH
46199: LD_VAR 0 13
46203: PPUSH
46204: CALL_OW 251
46208: PPUSH
46209: LD_VAR 0 10
46213: PPUSH
46214: LD_INT 2
46216: PPUSH
46217: CALL_OW 273
46221: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46222: LD_VAR 0 11
46226: PPUSH
46227: LD_VAR 0 12
46231: PPUSH
46232: CALL_OW 488
46236: PUSH
46237: LD_VAR 0 11
46241: PPUSH
46242: LD_VAR 0 12
46246: PPUSH
46247: CALL_OW 428
46251: NOT
46252: AND
46253: IFFALSE 46276
// begin ComMoveXY ( tmp , _x , _y ) ;
46255: LD_VAR 0 13
46259: PPUSH
46260: LD_VAR 0 11
46264: PPUSH
46265: LD_VAR 0 12
46269: PPUSH
46270: CALL_OW 111
// break ;
46274: GO 46278
// end ; end ;
46276: GO 46163
46278: POP
46279: POP
// end ; end ;
46280: GO 45605
46282: POP
46283: POP
// end ;
46284: LD_VAR 0 8
46288: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46289: LD_INT 0
46291: PPUSH
// result := true ;
46292: LD_ADDR_VAR 0 3
46296: PUSH
46297: LD_INT 1
46299: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46300: LD_VAR 0 2
46304: PUSH
46305: LD_INT 24
46307: DOUBLE
46308: EQUAL
46309: IFTRUE 46319
46311: LD_INT 33
46313: DOUBLE
46314: EQUAL
46315: IFTRUE 46319
46317: GO 46344
46319: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46320: LD_ADDR_VAR 0 3
46324: PUSH
46325: LD_INT 32
46327: PPUSH
46328: LD_VAR 0 1
46332: PPUSH
46333: CALL_OW 321
46337: PUSH
46338: LD_INT 2
46340: EQUAL
46341: ST_TO_ADDR
46342: GO 46664
46344: LD_INT 20
46346: DOUBLE
46347: EQUAL
46348: IFTRUE 46352
46350: GO 46377
46352: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46353: LD_ADDR_VAR 0 3
46357: PUSH
46358: LD_INT 6
46360: PPUSH
46361: LD_VAR 0 1
46365: PPUSH
46366: CALL_OW 321
46370: PUSH
46371: LD_INT 2
46373: EQUAL
46374: ST_TO_ADDR
46375: GO 46664
46377: LD_INT 22
46379: DOUBLE
46380: EQUAL
46381: IFTRUE 46391
46383: LD_INT 36
46385: DOUBLE
46386: EQUAL
46387: IFTRUE 46391
46389: GO 46416
46391: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46392: LD_ADDR_VAR 0 3
46396: PUSH
46397: LD_INT 15
46399: PPUSH
46400: LD_VAR 0 1
46404: PPUSH
46405: CALL_OW 321
46409: PUSH
46410: LD_INT 2
46412: EQUAL
46413: ST_TO_ADDR
46414: GO 46664
46416: LD_INT 30
46418: DOUBLE
46419: EQUAL
46420: IFTRUE 46424
46422: GO 46449
46424: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46425: LD_ADDR_VAR 0 3
46429: PUSH
46430: LD_INT 20
46432: PPUSH
46433: LD_VAR 0 1
46437: PPUSH
46438: CALL_OW 321
46442: PUSH
46443: LD_INT 2
46445: EQUAL
46446: ST_TO_ADDR
46447: GO 46664
46449: LD_INT 28
46451: DOUBLE
46452: EQUAL
46453: IFTRUE 46463
46455: LD_INT 21
46457: DOUBLE
46458: EQUAL
46459: IFTRUE 46463
46461: GO 46488
46463: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
46464: LD_ADDR_VAR 0 3
46468: PUSH
46469: LD_INT 21
46471: PPUSH
46472: LD_VAR 0 1
46476: PPUSH
46477: CALL_OW 321
46481: PUSH
46482: LD_INT 2
46484: EQUAL
46485: ST_TO_ADDR
46486: GO 46664
46488: LD_INT 16
46490: DOUBLE
46491: EQUAL
46492: IFTRUE 46496
46494: GO 46523
46496: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
46497: LD_ADDR_VAR 0 3
46501: PUSH
46502: LD_EXP 48
46506: PPUSH
46507: LD_VAR 0 1
46511: PPUSH
46512: CALL_OW 321
46516: PUSH
46517: LD_INT 2
46519: EQUAL
46520: ST_TO_ADDR
46521: GO 46664
46523: LD_INT 19
46525: DOUBLE
46526: EQUAL
46527: IFTRUE 46537
46529: LD_INT 23
46531: DOUBLE
46532: EQUAL
46533: IFTRUE 46537
46535: GO 46564
46537: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
46538: LD_ADDR_VAR 0 3
46542: PUSH
46543: LD_EXP 47
46547: PPUSH
46548: LD_VAR 0 1
46552: PPUSH
46553: CALL_OW 321
46557: PUSH
46558: LD_INT 2
46560: EQUAL
46561: ST_TO_ADDR
46562: GO 46664
46564: LD_INT 17
46566: DOUBLE
46567: EQUAL
46568: IFTRUE 46572
46570: GO 46597
46572: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
46573: LD_ADDR_VAR 0 3
46577: PUSH
46578: LD_INT 39
46580: PPUSH
46581: LD_VAR 0 1
46585: PPUSH
46586: CALL_OW 321
46590: PUSH
46591: LD_INT 2
46593: EQUAL
46594: ST_TO_ADDR
46595: GO 46664
46597: LD_INT 18
46599: DOUBLE
46600: EQUAL
46601: IFTRUE 46605
46603: GO 46630
46605: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46606: LD_ADDR_VAR 0 3
46610: PUSH
46611: LD_INT 40
46613: PPUSH
46614: LD_VAR 0 1
46618: PPUSH
46619: CALL_OW 321
46623: PUSH
46624: LD_INT 2
46626: EQUAL
46627: ST_TO_ADDR
46628: GO 46664
46630: LD_INT 27
46632: DOUBLE
46633: EQUAL
46634: IFTRUE 46638
46636: GO 46663
46638: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46639: LD_ADDR_VAR 0 3
46643: PUSH
46644: LD_INT 35
46646: PPUSH
46647: LD_VAR 0 1
46651: PPUSH
46652: CALL_OW 321
46656: PUSH
46657: LD_INT 2
46659: EQUAL
46660: ST_TO_ADDR
46661: GO 46664
46663: POP
// end ;
46664: LD_VAR 0 3
46668: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46669: LD_INT 0
46671: PPUSH
46672: PPUSH
46673: PPUSH
46674: PPUSH
46675: PPUSH
46676: PPUSH
46677: PPUSH
46678: PPUSH
46679: PPUSH
46680: PPUSH
46681: PPUSH
// result := false ;
46682: LD_ADDR_VAR 0 6
46686: PUSH
46687: LD_INT 0
46689: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46690: LD_VAR 0 1
46694: NOT
46695: PUSH
46696: LD_VAR 0 1
46700: PPUSH
46701: CALL_OW 266
46705: PUSH
46706: LD_INT 0
46708: PUSH
46709: LD_INT 1
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: IN
46716: NOT
46717: OR
46718: PUSH
46719: LD_VAR 0 2
46723: NOT
46724: OR
46725: PUSH
46726: LD_VAR 0 5
46730: PUSH
46731: LD_INT 0
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: LD_INT 2
46739: PUSH
46740: LD_INT 3
46742: PUSH
46743: LD_INT 4
46745: PUSH
46746: LD_INT 5
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: IN
46757: NOT
46758: OR
46759: PUSH
46760: LD_VAR 0 3
46764: PPUSH
46765: LD_VAR 0 4
46769: PPUSH
46770: CALL_OW 488
46774: NOT
46775: OR
46776: IFFALSE 46780
// exit ;
46778: GO 47516
// side := GetSide ( depot ) ;
46780: LD_ADDR_VAR 0 9
46784: PUSH
46785: LD_VAR 0 1
46789: PPUSH
46790: CALL_OW 255
46794: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46795: LD_VAR 0 9
46799: PPUSH
46800: LD_VAR 0 2
46804: PPUSH
46805: CALL 46289 0 2
46809: NOT
46810: IFFALSE 46814
// exit ;
46812: GO 47516
// pom := GetBase ( depot ) ;
46814: LD_ADDR_VAR 0 10
46818: PUSH
46819: LD_VAR 0 1
46823: PPUSH
46824: CALL_OW 274
46828: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46829: LD_ADDR_VAR 0 11
46833: PUSH
46834: LD_VAR 0 2
46838: PPUSH
46839: LD_VAR 0 1
46843: PPUSH
46844: CALL_OW 248
46848: PPUSH
46849: CALL_OW 450
46853: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46854: LD_VAR 0 10
46858: PPUSH
46859: LD_INT 1
46861: PPUSH
46862: CALL_OW 275
46866: PUSH
46867: LD_VAR 0 11
46871: PUSH
46872: LD_INT 1
46874: ARRAY
46875: GREATEREQUAL
46876: PUSH
46877: LD_VAR 0 10
46881: PPUSH
46882: LD_INT 2
46884: PPUSH
46885: CALL_OW 275
46889: PUSH
46890: LD_VAR 0 11
46894: PUSH
46895: LD_INT 2
46897: ARRAY
46898: GREATEREQUAL
46899: AND
46900: PUSH
46901: LD_VAR 0 10
46905: PPUSH
46906: LD_INT 3
46908: PPUSH
46909: CALL_OW 275
46913: PUSH
46914: LD_VAR 0 11
46918: PUSH
46919: LD_INT 3
46921: ARRAY
46922: GREATEREQUAL
46923: AND
46924: NOT
46925: IFFALSE 46929
// exit ;
46927: GO 47516
// if GetBType ( depot ) = b_depot then
46929: LD_VAR 0 1
46933: PPUSH
46934: CALL_OW 266
46938: PUSH
46939: LD_INT 0
46941: EQUAL
46942: IFFALSE 46954
// dist := 28 else
46944: LD_ADDR_VAR 0 14
46948: PUSH
46949: LD_INT 28
46951: ST_TO_ADDR
46952: GO 46962
// dist := 36 ;
46954: LD_ADDR_VAR 0 14
46958: PUSH
46959: LD_INT 36
46961: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46962: LD_VAR 0 1
46966: PPUSH
46967: LD_VAR 0 3
46971: PPUSH
46972: LD_VAR 0 4
46976: PPUSH
46977: CALL_OW 297
46981: PUSH
46982: LD_VAR 0 14
46986: GREATER
46987: IFFALSE 46991
// exit ;
46989: GO 47516
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46991: LD_ADDR_VAR 0 12
46995: PUSH
46996: LD_VAR 0 2
47000: PPUSH
47001: LD_VAR 0 3
47005: PPUSH
47006: LD_VAR 0 4
47010: PPUSH
47011: LD_VAR 0 5
47015: PPUSH
47016: LD_VAR 0 1
47020: PPUSH
47021: CALL_OW 248
47025: PPUSH
47026: LD_INT 0
47028: PPUSH
47029: CALL 47521 0 6
47033: ST_TO_ADDR
// if not hexes then
47034: LD_VAR 0 12
47038: NOT
47039: IFFALSE 47043
// exit ;
47041: GO 47516
// hex := GetHexInfo ( x , y ) ;
47043: LD_ADDR_VAR 0 15
47047: PUSH
47048: LD_VAR 0 3
47052: PPUSH
47053: LD_VAR 0 4
47057: PPUSH
47058: CALL_OW 546
47062: ST_TO_ADDR
// if hex [ 1 ] then
47063: LD_VAR 0 15
47067: PUSH
47068: LD_INT 1
47070: ARRAY
47071: IFFALSE 47075
// exit ;
47073: GO 47516
// height := hex [ 2 ] ;
47075: LD_ADDR_VAR 0 13
47079: PUSH
47080: LD_VAR 0 15
47084: PUSH
47085: LD_INT 2
47087: ARRAY
47088: ST_TO_ADDR
// for i = 1 to hexes do
47089: LD_ADDR_VAR 0 7
47093: PUSH
47094: DOUBLE
47095: LD_INT 1
47097: DEC
47098: ST_TO_ADDR
47099: LD_VAR 0 12
47103: PUSH
47104: FOR_TO
47105: IFFALSE 47435
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47107: LD_VAR 0 12
47111: PUSH
47112: LD_VAR 0 7
47116: ARRAY
47117: PUSH
47118: LD_INT 1
47120: ARRAY
47121: PPUSH
47122: LD_VAR 0 12
47126: PUSH
47127: LD_VAR 0 7
47131: ARRAY
47132: PUSH
47133: LD_INT 2
47135: ARRAY
47136: PPUSH
47137: CALL_OW 488
47141: NOT
47142: PUSH
47143: LD_VAR 0 12
47147: PUSH
47148: LD_VAR 0 7
47152: ARRAY
47153: PUSH
47154: LD_INT 1
47156: ARRAY
47157: PPUSH
47158: LD_VAR 0 12
47162: PUSH
47163: LD_VAR 0 7
47167: ARRAY
47168: PUSH
47169: LD_INT 2
47171: ARRAY
47172: PPUSH
47173: CALL_OW 428
47177: PUSH
47178: LD_INT 0
47180: GREATER
47181: OR
47182: PUSH
47183: LD_VAR 0 12
47187: PUSH
47188: LD_VAR 0 7
47192: ARRAY
47193: PUSH
47194: LD_INT 1
47196: ARRAY
47197: PPUSH
47198: LD_VAR 0 12
47202: PUSH
47203: LD_VAR 0 7
47207: ARRAY
47208: PUSH
47209: LD_INT 2
47211: ARRAY
47212: PPUSH
47213: CALL_OW 351
47217: OR
47218: IFFALSE 47224
// exit ;
47220: POP
47221: POP
47222: GO 47516
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47224: LD_ADDR_VAR 0 8
47228: PUSH
47229: LD_VAR 0 12
47233: PUSH
47234: LD_VAR 0 7
47238: ARRAY
47239: PUSH
47240: LD_INT 1
47242: ARRAY
47243: PPUSH
47244: LD_VAR 0 12
47248: PUSH
47249: LD_VAR 0 7
47253: ARRAY
47254: PUSH
47255: LD_INT 2
47257: ARRAY
47258: PPUSH
47259: CALL_OW 546
47263: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47264: LD_VAR 0 8
47268: PUSH
47269: LD_INT 1
47271: ARRAY
47272: PUSH
47273: LD_VAR 0 8
47277: PUSH
47278: LD_INT 2
47280: ARRAY
47281: PUSH
47282: LD_VAR 0 13
47286: PUSH
47287: LD_INT 2
47289: PLUS
47290: GREATER
47291: OR
47292: PUSH
47293: LD_VAR 0 8
47297: PUSH
47298: LD_INT 2
47300: ARRAY
47301: PUSH
47302: LD_VAR 0 13
47306: PUSH
47307: LD_INT 2
47309: MINUS
47310: LESS
47311: OR
47312: PUSH
47313: LD_VAR 0 8
47317: PUSH
47318: LD_INT 3
47320: ARRAY
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: LD_INT 8
47327: PUSH
47328: LD_INT 9
47330: PUSH
47331: LD_INT 10
47333: PUSH
47334: LD_INT 11
47336: PUSH
47337: LD_INT 12
47339: PUSH
47340: LD_INT 13
47342: PUSH
47343: LD_INT 16
47345: PUSH
47346: LD_INT 17
47348: PUSH
47349: LD_INT 18
47351: PUSH
47352: LD_INT 19
47354: PUSH
47355: LD_INT 20
47357: PUSH
47358: LD_INT 21
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: IN
47376: NOT
47377: OR
47378: PUSH
47379: LD_VAR 0 8
47383: PUSH
47384: LD_INT 5
47386: ARRAY
47387: NOT
47388: OR
47389: PUSH
47390: LD_VAR 0 8
47394: PUSH
47395: LD_INT 6
47397: ARRAY
47398: PUSH
47399: LD_INT 1
47401: PUSH
47402: LD_INT 2
47404: PUSH
47405: LD_INT 7
47407: PUSH
47408: LD_INT 9
47410: PUSH
47411: LD_INT 10
47413: PUSH
47414: LD_INT 11
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: IN
47425: NOT
47426: OR
47427: IFFALSE 47433
// exit ;
47429: POP
47430: POP
47431: GO 47516
// end ;
47433: GO 47104
47435: POP
47436: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47437: LD_VAR 0 9
47441: PPUSH
47442: LD_VAR 0 3
47446: PPUSH
47447: LD_VAR 0 4
47451: PPUSH
47452: LD_INT 20
47454: PPUSH
47455: CALL 39462 0 4
47459: PUSH
47460: LD_INT 4
47462: ARRAY
47463: IFFALSE 47467
// exit ;
47465: GO 47516
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47467: LD_VAR 0 2
47471: PUSH
47472: LD_INT 29
47474: PUSH
47475: LD_INT 30
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: IN
47482: PUSH
47483: LD_VAR 0 3
47487: PPUSH
47488: LD_VAR 0 4
47492: PPUSH
47493: LD_VAR 0 9
47497: PPUSH
47498: CALL_OW 440
47502: NOT
47503: AND
47504: IFFALSE 47508
// exit ;
47506: GO 47516
// result := true ;
47508: LD_ADDR_VAR 0 6
47512: PUSH
47513: LD_INT 1
47515: ST_TO_ADDR
// end ;
47516: LD_VAR 0 6
47520: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
47521: LD_INT 0
47523: PPUSH
47524: PPUSH
47525: PPUSH
47526: PPUSH
47527: PPUSH
47528: PPUSH
47529: PPUSH
47530: PPUSH
47531: PPUSH
47532: PPUSH
47533: PPUSH
47534: PPUSH
47535: PPUSH
47536: PPUSH
47537: PPUSH
47538: PPUSH
47539: PPUSH
47540: PPUSH
47541: PPUSH
47542: PPUSH
47543: PPUSH
47544: PPUSH
47545: PPUSH
47546: PPUSH
47547: PPUSH
47548: PPUSH
47549: PPUSH
47550: PPUSH
47551: PPUSH
47552: PPUSH
47553: PPUSH
47554: PPUSH
47555: PPUSH
47556: PPUSH
47557: PPUSH
47558: PPUSH
47559: PPUSH
47560: PPUSH
47561: PPUSH
47562: PPUSH
47563: PPUSH
47564: PPUSH
47565: PPUSH
47566: PPUSH
47567: PPUSH
47568: PPUSH
47569: PPUSH
47570: PPUSH
47571: PPUSH
47572: PPUSH
47573: PPUSH
47574: PPUSH
47575: PPUSH
47576: PPUSH
47577: PPUSH
47578: PPUSH
47579: PPUSH
47580: PPUSH
// result = [ ] ;
47581: LD_ADDR_VAR 0 7
47585: PUSH
47586: EMPTY
47587: ST_TO_ADDR
// temp_list = [ ] ;
47588: LD_ADDR_VAR 0 9
47592: PUSH
47593: EMPTY
47594: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47595: LD_VAR 0 4
47599: PUSH
47600: LD_INT 0
47602: PUSH
47603: LD_INT 1
47605: PUSH
47606: LD_INT 2
47608: PUSH
47609: LD_INT 3
47611: PUSH
47612: LD_INT 4
47614: PUSH
47615: LD_INT 5
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: IN
47626: NOT
47627: PUSH
47628: LD_VAR 0 1
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: LD_INT 1
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: IN
47643: PUSH
47644: LD_VAR 0 5
47648: PUSH
47649: LD_INT 1
47651: PUSH
47652: LD_INT 2
47654: PUSH
47655: LD_INT 3
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: LIST
47662: IN
47663: NOT
47664: AND
47665: OR
47666: IFFALSE 47670
// exit ;
47668: GO 66061
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47670: LD_VAR 0 1
47674: PUSH
47675: LD_INT 6
47677: PUSH
47678: LD_INT 7
47680: PUSH
47681: LD_INT 8
47683: PUSH
47684: LD_INT 13
47686: PUSH
47687: LD_INT 12
47689: PUSH
47690: LD_INT 15
47692: PUSH
47693: LD_INT 11
47695: PUSH
47696: LD_INT 14
47698: PUSH
47699: LD_INT 10
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: IN
47713: IFFALSE 47723
// btype = b_lab ;
47715: LD_ADDR_VAR 0 1
47719: PUSH
47720: LD_INT 6
47722: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47723: LD_VAR 0 6
47727: PUSH
47728: LD_INT 0
47730: PUSH
47731: LD_INT 1
47733: PUSH
47734: LD_INT 2
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: LIST
47741: IN
47742: NOT
47743: PUSH
47744: LD_VAR 0 1
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: LD_INT 2
47757: PUSH
47758: LD_INT 3
47760: PUSH
47761: LD_INT 6
47763: PUSH
47764: LD_INT 36
47766: PUSH
47767: LD_INT 4
47769: PUSH
47770: LD_INT 5
47772: PUSH
47773: LD_INT 31
47775: PUSH
47776: LD_INT 32
47778: PUSH
47779: LD_INT 33
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: IN
47795: NOT
47796: PUSH
47797: LD_VAR 0 6
47801: PUSH
47802: LD_INT 1
47804: EQUAL
47805: AND
47806: OR
47807: PUSH
47808: LD_VAR 0 1
47812: PUSH
47813: LD_INT 2
47815: PUSH
47816: LD_INT 3
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: IN
47823: NOT
47824: PUSH
47825: LD_VAR 0 6
47829: PUSH
47830: LD_INT 2
47832: EQUAL
47833: AND
47834: OR
47835: IFFALSE 47845
// mode = 0 ;
47837: LD_ADDR_VAR 0 6
47841: PUSH
47842: LD_INT 0
47844: ST_TO_ADDR
// case mode of 0 :
47845: LD_VAR 0 6
47849: PUSH
47850: LD_INT 0
47852: DOUBLE
47853: EQUAL
47854: IFTRUE 47858
47856: GO 59311
47858: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47859: LD_ADDR_VAR 0 11
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 0
47876: PUSH
47877: LD_INT 1
47879: NEG
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: LD_INT 0
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 1
47897: PUSH
47898: LD_INT 1
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 0
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 1
47917: NEG
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 1
47928: NEG
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 1
47940: NEG
47941: PUSH
47942: LD_INT 2
47944: NEG
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: LD_INT 2
47955: NEG
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: LD_INT 1
47966: NEG
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: LD_INT 2
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: LD_INT 2
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: PUSH
47996: LD_INT 1
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: PUSH
48006: LD_INT 3
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 0
48015: PUSH
48016: LD_INT 3
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 1
48025: NEG
48026: PUSH
48027: LD_INT 2
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48052: LD_ADDR_VAR 0 12
48056: PUSH
48057: LD_INT 0
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 0
48069: PUSH
48070: LD_INT 1
48072: NEG
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: LD_INT 1
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 1
48110: NEG
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 1
48121: NEG
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 2
48144: PUSH
48145: LD_INT 0
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 2
48154: PUSH
48155: LD_INT 1
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 1
48164: NEG
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 2
48175: NEG
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 2
48186: NEG
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 2
48198: NEG
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 3
48209: NEG
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 3
48220: NEG
48221: PUSH
48222: LD_INT 1
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48248: LD_ADDR_VAR 0 13
48252: PUSH
48253: LD_INT 0
48255: PUSH
48256: LD_INT 0
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: LD_INT 1
48268: NEG
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 1
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 1
48286: PUSH
48287: LD_INT 1
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 0
48296: PUSH
48297: LD_INT 1
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 1
48306: NEG
48307: PUSH
48308: LD_INT 0
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: LD_INT 1
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 1
48329: NEG
48330: PUSH
48331: LD_INT 2
48333: NEG
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 2
48341: PUSH
48342: LD_INT 1
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 2
48351: PUSH
48352: LD_INT 2
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: PUSH
48362: LD_INT 2
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 2
48371: NEG
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 2
48383: NEG
48384: PUSH
48385: LD_INT 2
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 2
48395: NEG
48396: PUSH
48397: LD_INT 3
48399: NEG
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 3
48407: NEG
48408: PUSH
48409: LD_INT 2
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 3
48419: NEG
48420: PUSH
48421: LD_INT 3
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48447: LD_ADDR_VAR 0 14
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 0
48464: PUSH
48465: LD_INT 1
48467: NEG
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 1
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 1
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: LD_INT 1
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 1
48516: NEG
48517: PUSH
48518: LD_INT 1
48520: NEG
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 1
48528: NEG
48529: PUSH
48530: LD_INT 2
48532: NEG
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: LD_INT 2
48543: NEG
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 1
48551: PUSH
48552: LD_INT 1
48554: NEG
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 1
48562: PUSH
48563: LD_INT 2
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 0
48572: PUSH
48573: LD_INT 2
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: PUSH
48584: LD_INT 1
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: LD_INT 3
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: LD_INT 3
48608: NEG
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: LD_INT 2
48619: NEG
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48643: LD_ADDR_VAR 0 15
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 1
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: LD_INT 1
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 2
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 2
48745: PUSH
48746: LD_INT 1
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: NEG
48756: PUSH
48757: LD_INT 1
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 2
48766: NEG
48767: PUSH
48768: LD_INT 0
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 2
48777: NEG
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 2
48789: PUSH
48790: LD_INT 1
48792: NEG
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 3
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 3
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48836: LD_ADDR_VAR 0 16
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 0
48853: PUSH
48854: LD_INT 1
48856: NEG
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 1
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 1
48894: NEG
48895: PUSH
48896: LD_INT 0
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 1
48917: NEG
48918: PUSH
48919: LD_INT 2
48921: NEG
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 2
48929: PUSH
48930: LD_INT 1
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 2
48939: PUSH
48940: LD_INT 2
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 1
48949: PUSH
48950: LD_INT 2
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 2
48959: NEG
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 2
48971: NEG
48972: PUSH
48973: LD_INT 2
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 3
48983: PUSH
48984: LD_INT 2
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 3
48993: PUSH
48994: LD_INT 3
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 2
49003: PUSH
49004: LD_INT 3
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49029: LD_ADDR_VAR 0 17
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: LD_INT 0
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 0
49046: PUSH
49047: LD_INT 1
49049: NEG
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 1
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 1
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 1
49087: NEG
49088: PUSH
49089: LD_INT 0
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 1
49098: NEG
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: LD_INT 2
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 0
49122: PUSH
49123: LD_INT 2
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 2
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 2
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 2
49164: PUSH
49165: LD_INT 2
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: PUSH
49175: LD_INT 2
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: LD_INT 2
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 1
49194: NEG
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 2
49205: NEG
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 2
49216: NEG
49217: PUSH
49218: LD_INT 1
49220: NEG
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 2
49228: NEG
49229: PUSH
49230: LD_INT 2
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49259: LD_ADDR_VAR 0 18
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 1
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: NEG
49318: PUSH
49319: LD_INT 0
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 1
49328: NEG
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 1
49340: NEG
49341: PUSH
49342: LD_INT 2
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: LD_INT 2
49355: NEG
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: LD_INT 1
49366: NEG
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 2
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 2
49384: PUSH
49385: LD_INT 1
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 2
49394: PUSH
49395: LD_INT 2
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: LD_INT 2
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 0
49414: PUSH
49415: LD_INT 2
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: NEG
49425: PUSH
49426: LD_INT 1
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 2
49435: NEG
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 2
49446: NEG
49447: PUSH
49448: LD_INT 1
49450: NEG
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 2
49458: NEG
49459: PUSH
49460: LD_INT 2
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49489: LD_ADDR_VAR 0 19
49493: PUSH
49494: LD_INT 0
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 0
49506: PUSH
49507: LD_INT 1
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: LD_INT 0
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 1
49527: PUSH
49528: LD_INT 1
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 0
49537: PUSH
49538: LD_INT 1
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 1
49547: NEG
49548: PUSH
49549: LD_INT 0
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 1
49558: NEG
49559: PUSH
49560: LD_INT 1
49562: NEG
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 1
49570: NEG
49571: PUSH
49572: LD_INT 2
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: LD_INT 2
49585: NEG
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 2
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 2
49614: PUSH
49615: LD_INT 1
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 2
49624: PUSH
49625: LD_INT 2
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 1
49634: PUSH
49635: LD_INT 2
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: LD_INT 2
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 1
49654: NEG
49655: PUSH
49656: LD_INT 1
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 2
49665: NEG
49666: PUSH
49667: LD_INT 0
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 2
49676: NEG
49677: PUSH
49678: LD_INT 1
49680: NEG
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 2
49688: NEG
49689: PUSH
49690: LD_INT 2
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49719: LD_ADDR_VAR 0 20
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: LD_INT 0
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: LD_INT 1
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: LD_INT 1
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 1
49777: NEG
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: PUSH
49790: LD_INT 1
49792: NEG
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: LD_INT 2
49804: NEG
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 0
49812: PUSH
49813: LD_INT 2
49815: NEG
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 1
49823: PUSH
49824: LD_INT 1
49826: NEG
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 2
49834: PUSH
49835: LD_INT 0
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: LD_INT 1
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 2
49854: PUSH
49855: LD_INT 2
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 1
49864: PUSH
49865: LD_INT 2
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 0
49874: PUSH
49875: LD_INT 2
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 1
49884: NEG
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 2
49895: NEG
49896: PUSH
49897: LD_INT 0
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 2
49906: NEG
49907: PUSH
49908: LD_INT 1
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 2
49918: NEG
49919: PUSH
49920: LD_INT 2
49922: NEG
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49949: LD_ADDR_VAR 0 21
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: LD_INT 1
49969: NEG
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: LD_INT 0
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 1
49987: PUSH
49988: LD_INT 1
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 0
49997: PUSH
49998: LD_INT 1
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 1
50007: NEG
50008: PUSH
50009: LD_INT 0
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 1
50018: NEG
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 1
50030: NEG
50031: PUSH
50032: LD_INT 2
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 0
50042: PUSH
50043: LD_INT 2
50045: NEG
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 1
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 2
50064: PUSH
50065: LD_INT 0
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 2
50074: PUSH
50075: LD_INT 1
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 2
50084: PUSH
50085: LD_INT 2
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 1
50094: PUSH
50095: LD_INT 2
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 0
50104: PUSH
50105: LD_INT 2
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 1
50114: NEG
50115: PUSH
50116: LD_INT 1
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 2
50125: NEG
50126: PUSH
50127: LD_INT 0
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 2
50136: NEG
50137: PUSH
50138: LD_INT 1
50140: NEG
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 2
50148: NEG
50149: PUSH
50150: LD_INT 2
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50179: LD_ADDR_VAR 0 22
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: LD_INT 0
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 0
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: LD_INT 1
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: LD_INT 1
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 1
50237: NEG
50238: PUSH
50239: LD_INT 0
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: LD_INT 1
50252: NEG
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: LD_INT 2
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: LD_INT 2
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 2
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 2
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 2
50314: PUSH
50315: LD_INT 2
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: PUSH
50325: LD_INT 2
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 0
50334: PUSH
50335: LD_INT 2
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 1
50344: NEG
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 2
50355: NEG
50356: PUSH
50357: LD_INT 0
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 2
50366: NEG
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 2
50378: NEG
50379: PUSH
50380: LD_INT 2
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50409: LD_ADDR_VAR 0 23
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: LD_INT 0
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 1
50447: PUSH
50448: LD_INT 1
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 0
50457: PUSH
50458: LD_INT 1
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 1
50467: NEG
50468: PUSH
50469: LD_INT 0
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 1
50478: NEG
50479: PUSH
50480: LD_INT 1
50482: NEG
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 1
50490: NEG
50491: PUSH
50492: LD_INT 2
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: LD_INT 2
50505: NEG
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 1
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 2
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 2
50534: PUSH
50535: LD_INT 1
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 2
50544: PUSH
50545: LD_INT 2
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: LD_INT 2
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: LD_INT 2
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 2
50585: NEG
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 2
50596: NEG
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 2
50608: NEG
50609: PUSH
50610: LD_INT 2
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 2
50620: NEG
50621: PUSH
50622: LD_INT 3
50624: NEG
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: LD_INT 3
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: LD_INT 2
50647: NEG
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 2
50655: PUSH
50656: LD_INT 1
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50689: LD_ADDR_VAR 0 24
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: LD_INT 0
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 0
50706: PUSH
50707: LD_INT 1
50709: NEG
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 1
50717: PUSH
50718: LD_INT 0
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 1
50727: PUSH
50728: LD_INT 1
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 0
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: LD_INT 1
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: LD_INT 2
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 0
50782: PUSH
50783: LD_INT 2
50785: NEG
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: LD_INT 1
50796: NEG
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 2
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 2
50814: PUSH
50815: LD_INT 1
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 2
50824: PUSH
50825: LD_INT 2
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: LD_INT 2
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: LD_INT 2
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: NEG
50855: PUSH
50856: LD_INT 1
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 2
50865: NEG
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 2
50876: NEG
50877: PUSH
50878: LD_INT 1
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 2
50888: NEG
50889: PUSH
50890: LD_INT 2
50892: NEG
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: LD_INT 2
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 2
50911: PUSH
50912: LD_INT 1
50914: NEG
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 3
50922: PUSH
50923: LD_INT 1
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 3
50932: PUSH
50933: LD_INT 2
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50965: LD_ADDR_VAR 0 25
50969: PUSH
50970: LD_INT 0
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 0
50982: PUSH
50983: LD_INT 1
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 1
51003: PUSH
51004: LD_INT 1
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 0
51013: PUSH
51014: LD_INT 1
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 1
51023: NEG
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 1
51034: NEG
51035: PUSH
51036: LD_INT 1
51038: NEG
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 1
51046: NEG
51047: PUSH
51048: LD_INT 2
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: LD_INT 2
51061: NEG
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 1
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 2
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 2
51090: PUSH
51091: LD_INT 1
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 2
51100: PUSH
51101: LD_INT 2
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: LD_INT 2
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 0
51120: PUSH
51121: LD_INT 2
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 2
51141: NEG
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 2
51152: NEG
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 2
51164: NEG
51165: PUSH
51166: LD_INT 2
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 3
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 3
51186: PUSH
51187: LD_INT 2
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 2
51196: PUSH
51197: LD_INT 3
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: LD_INT 3
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51239: LD_ADDR_VAR 0 26
51243: PUSH
51244: LD_INT 0
51246: PUSH
51247: LD_INT 0
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 0
51256: PUSH
51257: LD_INT 1
51259: NEG
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 1
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 1
51277: PUSH
51278: LD_INT 1
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: LD_INT 1
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 1
51297: NEG
51298: PUSH
51299: LD_INT 0
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 1
51308: NEG
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 1
51320: NEG
51321: PUSH
51322: LD_INT 2
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 0
51332: PUSH
51333: LD_INT 2
51335: NEG
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 1
51343: PUSH
51344: LD_INT 1
51346: NEG
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 2
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 2
51364: PUSH
51365: LD_INT 1
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 2
51374: PUSH
51375: LD_INT 2
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: LD_INT 2
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: LD_INT 2
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: LD_INT 1
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 2
51415: NEG
51416: PUSH
51417: LD_INT 0
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 2
51426: NEG
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 2
51438: NEG
51439: PUSH
51440: LD_INT 2
51442: NEG
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 2
51450: PUSH
51451: LD_INT 3
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 1
51460: PUSH
51461: LD_INT 3
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: LD_INT 2
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 2
51481: NEG
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51515: LD_ADDR_VAR 0 27
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: LD_INT 0
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 1
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 1
51553: PUSH
51554: LD_INT 1
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: LD_INT 1
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 1
51573: NEG
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: LD_INT 1
51588: NEG
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: LD_INT 2
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 0
51608: PUSH
51609: LD_INT 2
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 2
51630: PUSH
51631: LD_INT 0
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 2
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 2
51650: PUSH
51651: LD_INT 2
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 1
51660: PUSH
51661: LD_INT 2
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: LD_INT 2
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 1
51680: NEG
51681: PUSH
51682: LD_INT 1
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 2
51691: NEG
51692: PUSH
51693: LD_INT 0
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 2
51702: NEG
51703: PUSH
51704: LD_INT 1
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 2
51714: NEG
51715: PUSH
51716: LD_INT 2
51718: NEG
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 1
51726: NEG
51727: PUSH
51728: LD_INT 2
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 2
51737: NEG
51738: PUSH
51739: LD_INT 1
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 3
51748: NEG
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 3
51760: NEG
51761: PUSH
51762: LD_INT 2
51764: NEG
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51795: LD_ADDR_VAR 0 28
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: LD_INT 1
51815: NEG
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 1
51853: NEG
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: LD_INT 2
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: LD_INT 2
51891: NEG
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 1
51899: PUSH
51900: LD_INT 1
51902: NEG
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 2
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 2
51920: PUSH
51921: LD_INT 1
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 2
51930: PUSH
51931: LD_INT 2
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: LD_INT 2
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: LD_INT 2
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: LD_INT 1
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 2
51971: NEG
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 2
51982: NEG
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 2
51994: NEG
51995: PUSH
51996: LD_INT 2
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 2
52006: NEG
52007: PUSH
52008: LD_INT 3
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 1
52018: NEG
52019: PUSH
52020: LD_INT 3
52022: NEG
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 3
52030: NEG
52031: PUSH
52032: LD_INT 1
52034: NEG
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 3
52042: NEG
52043: PUSH
52044: LD_INT 2
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52077: LD_ADDR_VAR 0 29
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 1
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 1
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 1
52135: NEG
52136: PUSH
52137: LD_INT 0
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 1
52146: NEG
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: LD_INT 2
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 0
52170: PUSH
52171: LD_INT 2
52173: NEG
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 1
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 2
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 2
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: LD_INT 2
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: LD_INT 2
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 2
52243: NEG
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 2
52255: NEG
52256: PUSH
52257: LD_INT 2
52259: NEG
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 2
52267: NEG
52268: PUSH
52269: LD_INT 3
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 2
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 3
52290: PUSH
52291: LD_INT 1
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: LD_INT 3
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 1
52310: NEG
52311: PUSH
52312: LD_INT 2
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 3
52321: NEG
52322: PUSH
52323: LD_INT 2
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52356: LD_ADDR_VAR 0 30
52360: PUSH
52361: LD_INT 0
52363: PUSH
52364: LD_INT 0
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: LD_INT 1
52376: NEG
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 1
52394: PUSH
52395: LD_INT 1
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: LD_INT 1
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 1
52425: NEG
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: NEG
52438: PUSH
52439: LD_INT 2
52441: NEG
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 0
52449: PUSH
52450: LD_INT 2
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 1
52460: PUSH
52461: LD_INT 1
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 2
52471: PUSH
52472: LD_INT 0
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 2
52481: PUSH
52482: LD_INT 1
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 2
52491: PUSH
52492: LD_INT 2
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 1
52501: PUSH
52502: LD_INT 2
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: LD_INT 1
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 2
52522: NEG
52523: PUSH
52524: LD_INT 0
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 2
52533: NEG
52534: PUSH
52535: LD_INT 1
52537: NEG
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 1
52545: NEG
52546: PUSH
52547: LD_INT 3
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: PUSH
52558: LD_INT 2
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 3
52568: PUSH
52569: LD_INT 2
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 2
52578: PUSH
52579: LD_INT 3
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 2
52588: NEG
52589: PUSH
52590: LD_INT 1
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 3
52599: NEG
52600: PUSH
52601: LD_INT 1
52603: NEG
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52634: LD_ADDR_VAR 0 31
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 0
52651: PUSH
52652: LD_INT 1
52654: NEG
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 1
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 1
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 1
52692: NEG
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: LD_INT 1
52707: NEG
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 1
52715: NEG
52716: PUSH
52717: LD_INT 2
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: LD_INT 1
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 2
52738: PUSH
52739: LD_INT 0
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 2
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 2
52758: PUSH
52759: LD_INT 2
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 1
52768: PUSH
52769: LD_INT 2
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: LD_INT 2
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 1
52788: NEG
52789: PUSH
52790: LD_INT 1
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 2
52799: NEG
52800: PUSH
52801: LD_INT 1
52803: NEG
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 2
52811: NEG
52812: PUSH
52813: LD_INT 2
52815: NEG
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 2
52823: NEG
52824: PUSH
52825: LD_INT 3
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 2
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 3
52846: PUSH
52847: LD_INT 1
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 1
52856: PUSH
52857: LD_INT 3
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: LD_INT 2
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 3
52877: NEG
52878: PUSH
52879: LD_INT 2
52881: NEG
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52912: LD_ADDR_VAR 0 32
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: LD_INT 0
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: LD_INT 1
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: LD_INT 1
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 1
52970: NEG
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: NEG
52982: PUSH
52983: LD_INT 1
52985: NEG
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: NEG
52994: PUSH
52995: LD_INT 2
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: LD_INT 2
53008: NEG
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 1
53016: PUSH
53017: LD_INT 1
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 2
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 2
53037: PUSH
53038: LD_INT 2
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 1
53047: PUSH
53048: LD_INT 2
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: LD_INT 2
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 1
53067: NEG
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 2
53078: NEG
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 2
53089: NEG
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 1
53101: NEG
53102: PUSH
53103: LD_INT 3
53105: NEG
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 1
53113: PUSH
53114: LD_INT 2
53116: NEG
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 3
53124: PUSH
53125: LD_INT 2
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 2
53134: PUSH
53135: LD_INT 3
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 2
53144: NEG
53145: PUSH
53146: LD_INT 1
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 3
53155: NEG
53156: PUSH
53157: LD_INT 1
53159: NEG
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53190: LD_ADDR_VAR 0 33
53194: PUSH
53195: LD_INT 0
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: LD_INT 1
53210: NEG
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 1
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 1
53228: PUSH
53229: LD_INT 1
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: LD_INT 1
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 1
53248: NEG
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 1
53259: NEG
53260: PUSH
53261: LD_INT 1
53263: NEG
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 1
53271: NEG
53272: PUSH
53273: LD_INT 2
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 1
53283: PUSH
53284: LD_INT 1
53286: NEG
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 2
53294: PUSH
53295: LD_INT 0
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 2
53304: PUSH
53305: LD_INT 1
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: LD_INT 2
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: LD_INT 2
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: NEG
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 2
53345: NEG
53346: PUSH
53347: LD_INT 0
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 2
53356: NEG
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 2
53368: NEG
53369: PUSH
53370: LD_INT 2
53372: NEG
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 2
53380: NEG
53381: PUSH
53382: LD_INT 3
53384: NEG
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 2
53392: PUSH
53393: LD_INT 1
53395: NEG
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 3
53403: PUSH
53404: LD_INT 1
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: LD_INT 3
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 1
53423: NEG
53424: PUSH
53425: LD_INT 2
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 3
53434: NEG
53435: PUSH
53436: LD_INT 2
53438: NEG
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53469: LD_ADDR_VAR 0 34
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: LD_INT 0
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: LD_INT 1
53489: NEG
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: LD_INT 1
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: LD_INT 1
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 1
53550: NEG
53551: PUSH
53552: LD_INT 2
53554: NEG
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 0
53562: PUSH
53563: LD_INT 2
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: LD_INT 1
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 2
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 2
53594: PUSH
53595: LD_INT 2
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: PUSH
53605: LD_INT 2
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 1
53614: NEG
53615: PUSH
53616: LD_INT 1
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 2
53625: NEG
53626: PUSH
53627: LD_INT 0
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 2
53636: NEG
53637: PUSH
53638: LD_INT 1
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 2
53648: NEG
53649: PUSH
53650: LD_INT 2
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 1
53660: NEG
53661: PUSH
53662: LD_INT 3
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: PUSH
53673: LD_INT 2
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 3
53683: PUSH
53684: LD_INT 2
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 2
53693: PUSH
53694: LD_INT 3
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 2
53703: NEG
53704: PUSH
53705: LD_INT 1
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 3
53714: NEG
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53749: LD_ADDR_VAR 0 35
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: LD_INT 0
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: LD_INT 1
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: LD_INT 1
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 0
53797: PUSH
53798: LD_INT 1
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 2
53830: PUSH
53831: LD_INT 1
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 2
53840: NEG
53841: PUSH
53842: LD_INT 1
53844: NEG
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53861: LD_ADDR_VAR 0 36
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: LD_INT 1
53881: NEG
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: LD_INT 1
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: LD_INT 2
53946: NEG
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 1
53954: PUSH
53955: LD_INT 2
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53973: LD_ADDR_VAR 0 37
53977: PUSH
53978: LD_INT 0
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 0
53990: PUSH
53991: LD_INT 1
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 1
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 1
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: LD_INT 1
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: LD_INT 0
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 1
54042: NEG
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54085: LD_ADDR_VAR 0 38
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: LD_INT 1
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 1
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 1
54123: PUSH
54124: LD_INT 1
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 0
54133: PUSH
54134: LD_INT 1
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: NEG
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 1
54154: NEG
54155: PUSH
54156: LD_INT 1
54158: NEG
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 2
54166: PUSH
54167: LD_INT 1
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 2
54176: NEG
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54197: LD_ADDR_VAR 0 39
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 0
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 1
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 1
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: LD_INT 1
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 1
54255: NEG
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: NEG
54267: PUSH
54268: LD_INT 1
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 1
54278: NEG
54279: PUSH
54280: LD_INT 2
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 1
54290: PUSH
54291: LD_INT 2
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54309: LD_ADDR_VAR 0 40
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: LD_INT 1
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 1
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: LD_INT 1
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: LD_INT 1
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 1
54367: NEG
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: LD_INT 1
54382: NEG
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 1
54390: PUSH
54391: LD_INT 1
54393: NEG
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 1
54401: NEG
54402: PUSH
54403: LD_INT 1
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54421: LD_ADDR_VAR 0 41
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: LD_INT 1
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: LD_INT 1
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 1
54479: NEG
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: NEG
54491: PUSH
54492: LD_INT 1
54494: NEG
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: LD_INT 2
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: LD_INT 1
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 2
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 2
54535: PUSH
54536: LD_INT 1
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 2
54545: PUSH
54546: LD_INT 2
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: LD_INT 2
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: LD_INT 1
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 2
54576: NEG
54577: PUSH
54578: LD_INT 0
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 2
54587: NEG
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 2
54599: NEG
54600: PUSH
54601: LD_INT 2
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 2
54611: NEG
54612: PUSH
54613: LD_INT 3
54615: NEG
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 2
54623: PUSH
54624: LD_INT 1
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 3
54634: PUSH
54635: LD_INT 0
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 3
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 3
54654: PUSH
54655: LD_INT 2
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 3
54664: PUSH
54665: LD_INT 3
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 2
54674: PUSH
54675: LD_INT 3
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 2
54684: NEG
54685: PUSH
54686: LD_INT 1
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 3
54695: NEG
54696: PUSH
54697: LD_INT 0
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 3
54706: NEG
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 3
54718: NEG
54719: PUSH
54720: LD_INT 2
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 3
54730: NEG
54731: PUSH
54732: LD_INT 3
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54771: LD_ADDR_VAR 0 42
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: LD_INT 0
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 0
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 1
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: LD_INT 1
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 0
54819: PUSH
54820: LD_INT 1
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 1
54829: NEG
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 1
54840: NEG
54841: PUSH
54842: LD_INT 1
54844: NEG
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 1
54852: NEG
54853: PUSH
54854: LD_INT 2
54856: NEG
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: LD_INT 2
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: PUSH
54876: LD_INT 1
54878: NEG
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 2
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 2
54896: PUSH
54897: LD_INT 2
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: LD_INT 2
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: LD_INT 2
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: LD_INT 1
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 2
54937: NEG
54938: PUSH
54939: LD_INT 1
54941: NEG
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 2
54949: NEG
54950: PUSH
54951: LD_INT 2
54953: NEG
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 2
54961: NEG
54962: PUSH
54963: LD_INT 3
54965: NEG
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 1
54973: NEG
54974: PUSH
54975: LD_INT 3
54977: NEG
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: LD_INT 3
54988: NEG
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 1
54996: PUSH
54997: LD_INT 2
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 3
55007: PUSH
55008: LD_INT 2
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 3
55017: PUSH
55018: LD_INT 3
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 2
55027: PUSH
55028: LD_INT 3
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: LD_INT 3
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: LD_INT 3
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: NEG
55058: PUSH
55059: LD_INT 2
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 3
55068: NEG
55069: PUSH
55070: LD_INT 2
55072: NEG
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 3
55080: NEG
55081: PUSH
55082: LD_INT 3
55084: NEG
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55121: LD_ADDR_VAR 0 43
55125: PUSH
55126: LD_INT 0
55128: PUSH
55129: LD_INT 0
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 1
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: LD_INT 1
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: LD_INT 1
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 1
55179: NEG
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 1
55190: NEG
55191: PUSH
55192: LD_INT 1
55194: NEG
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 1
55202: NEG
55203: PUSH
55204: LD_INT 2
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: LD_INT 2
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 1
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 2
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 2
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 1
55256: PUSH
55257: LD_INT 2
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 0
55266: PUSH
55267: LD_INT 2
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 1
55276: NEG
55277: PUSH
55278: LD_INT 1
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 2
55287: NEG
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 2
55298: NEG
55299: PUSH
55300: LD_INT 1
55302: NEG
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 1
55310: NEG
55311: PUSH
55312: LD_INT 3
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: LD_INT 3
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 1
55333: PUSH
55334: LD_INT 2
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 2
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 3
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 3
55365: PUSH
55366: LD_INT 1
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: LD_INT 3
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 0
55385: PUSH
55386: LD_INT 3
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: PUSH
55397: LD_INT 2
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 2
55406: NEG
55407: PUSH
55408: LD_INT 1
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 3
55417: NEG
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 3
55428: NEG
55429: PUSH
55430: LD_INT 1
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55469: LD_ADDR_VAR 0 44
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: LD_INT 0
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: LD_INT 1
55489: NEG
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 1
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: LD_INT 1
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 1
55538: NEG
55539: PUSH
55540: LD_INT 1
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 1
55550: NEG
55551: PUSH
55552: LD_INT 2
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 2
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 2
55583: PUSH
55584: LD_INT 1
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 2
55593: PUSH
55594: LD_INT 2
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: PUSH
55604: LD_INT 2
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 1
55613: NEG
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 2
55624: NEG
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 2
55635: NEG
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 2
55647: NEG
55648: PUSH
55649: LD_INT 2
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 2
55659: NEG
55660: PUSH
55661: LD_INT 3
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 2
55671: PUSH
55672: LD_INT 1
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 3
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 3
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 3
55702: PUSH
55703: LD_INT 2
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 3
55712: PUSH
55713: LD_INT 3
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 2
55722: PUSH
55723: LD_INT 3
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 2
55732: NEG
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 3
55743: NEG
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 3
55754: NEG
55755: PUSH
55756: LD_INT 1
55758: NEG
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 3
55766: NEG
55767: PUSH
55768: LD_INT 2
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 3
55778: NEG
55779: PUSH
55780: LD_INT 3
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55819: LD_ADDR_VAR 0 45
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 0
55836: PUSH
55837: LD_INT 1
55839: NEG
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 1
55847: PUSH
55848: LD_INT 0
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: LD_INT 1
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 0
55867: PUSH
55868: LD_INT 1
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 1
55877: NEG
55878: PUSH
55879: LD_INT 0
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: LD_INT 1
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: LD_INT 2
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 0
55912: PUSH
55913: LD_INT 2
55915: NEG
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 1
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 2
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: LD_INT 2
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 1
55954: PUSH
55955: LD_INT 2
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: LD_INT 2
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 1
55974: NEG
55975: PUSH
55976: LD_INT 1
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 2
55985: NEG
55986: PUSH
55987: LD_INT 1
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 2
55997: NEG
55998: PUSH
55999: LD_INT 2
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 2
56009: NEG
56010: PUSH
56011: LD_INT 3
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 1
56021: NEG
56022: PUSH
56023: LD_INT 3
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: LD_INT 3
56036: NEG
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 1
56044: PUSH
56045: LD_INT 2
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 3
56055: PUSH
56056: LD_INT 2
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 3
56065: PUSH
56066: LD_INT 3
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 2
56075: PUSH
56076: LD_INT 3
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 1
56085: PUSH
56086: LD_INT 3
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: LD_INT 3
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 1
56105: NEG
56106: PUSH
56107: LD_INT 2
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 3
56116: NEG
56117: PUSH
56118: LD_INT 2
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 3
56128: NEG
56129: PUSH
56130: LD_INT 3
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56169: LD_ADDR_VAR 0 46
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: LD_INT 1
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: LD_INT 1
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 0
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 1
56227: NEG
56228: PUSH
56229: LD_INT 0
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 1
56238: NEG
56239: PUSH
56240: LD_INT 1
56242: NEG
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 1
56250: NEG
56251: PUSH
56252: LD_INT 2
56254: NEG
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 0
56262: PUSH
56263: LD_INT 2
56265: NEG
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 1
56273: PUSH
56274: LD_INT 1
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 2
56284: PUSH
56285: LD_INT 0
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 2
56294: PUSH
56295: LD_INT 1
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 1
56304: PUSH
56305: LD_INT 2
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: LD_INT 2
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 1
56324: NEG
56325: PUSH
56326: LD_INT 1
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 2
56335: NEG
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 2
56346: NEG
56347: PUSH
56348: LD_INT 1
56350: NEG
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: NEG
56359: PUSH
56360: LD_INT 3
56362: NEG
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 0
56370: PUSH
56371: LD_INT 3
56373: NEG
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 1
56381: PUSH
56382: LD_INT 2
56384: NEG
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 2
56392: PUSH
56393: LD_INT 1
56395: NEG
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 3
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 3
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 1
56423: PUSH
56424: LD_INT 3
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 0
56433: PUSH
56434: LD_INT 3
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 1
56443: NEG
56444: PUSH
56445: LD_INT 2
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 2
56454: NEG
56455: PUSH
56456: LD_INT 1
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 3
56465: NEG
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 3
56476: NEG
56477: PUSH
56478: LD_INT 1
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56517: LD_ADDR_VAR 0 47
56521: PUSH
56522: LD_INT 0
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 0
56534: PUSH
56535: LD_INT 1
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 1
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 1
56555: PUSH
56556: LD_INT 1
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 0
56565: PUSH
56566: LD_INT 1
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 1
56575: NEG
56576: PUSH
56577: LD_INT 0
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 1
56586: NEG
56587: PUSH
56588: LD_INT 1
56590: NEG
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: NEG
56599: PUSH
56600: LD_INT 2
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 0
56610: PUSH
56611: LD_INT 2
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: LD_INT 1
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 2
56632: NEG
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 2
56644: NEG
56645: PUSH
56646: LD_INT 2
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56668: LD_ADDR_VAR 0 48
56672: PUSH
56673: LD_INT 0
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 0
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 1
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: LD_INT 1
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: LD_INT 1
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 1
56726: NEG
56727: PUSH
56728: LD_INT 0
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 1
56737: NEG
56738: PUSH
56739: LD_INT 1
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 1
56749: NEG
56750: PUSH
56751: LD_INT 2
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: LD_INT 2
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 1
56772: PUSH
56773: LD_INT 1
56775: NEG
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 2
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 2
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56815: LD_ADDR_VAR 0 49
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: LD_INT 0
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 0
56832: PUSH
56833: LD_INT 1
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: NEG
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 1
56884: NEG
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: PUSH
56897: LD_INT 1
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 2
56907: PUSH
56908: LD_INT 0
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 2
56917: PUSH
56918: LD_INT 1
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 2
56927: PUSH
56928: LD_INT 2
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 1
56937: PUSH
56938: LD_INT 2
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56959: LD_ADDR_VAR 0 50
56963: PUSH
56964: LD_INT 0
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: LD_INT 1
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 1
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 1
57017: NEG
57018: PUSH
57019: LD_INT 0
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: LD_INT 1
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 2
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 2
57050: PUSH
57051: LD_INT 2
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 1
57060: PUSH
57061: LD_INT 2
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 0
57070: PUSH
57071: LD_INT 2
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 1
57080: NEG
57081: PUSH
57082: LD_INT 1
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57103: LD_ADDR_VAR 0 51
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 0
57120: PUSH
57121: LD_INT 1
57123: NEG
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 1
57131: PUSH
57132: LD_INT 0
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: LD_INT 1
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: LD_INT 1
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 1
57161: NEG
57162: PUSH
57163: LD_INT 0
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 1
57172: NEG
57173: PUSH
57174: LD_INT 1
57176: NEG
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 1
57184: PUSH
57185: LD_INT 2
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 0
57194: PUSH
57195: LD_INT 2
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 1
57204: NEG
57205: PUSH
57206: LD_INT 1
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 2
57215: NEG
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 2
57226: NEG
57227: PUSH
57228: LD_INT 1
57230: NEG
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57250: LD_ADDR_VAR 0 52
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: LD_INT 1
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 1
57278: PUSH
57279: LD_INT 0
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 0
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 1
57308: NEG
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: LD_INT 1
57323: NEG
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 1
57331: NEG
57332: PUSH
57333: LD_INT 2
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: NEG
57344: PUSH
57345: LD_INT 1
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 2
57354: NEG
57355: PUSH
57356: LD_INT 0
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 2
57365: NEG
57366: PUSH
57367: LD_INT 1
57369: NEG
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 2
57377: NEG
57378: PUSH
57379: LD_INT 2
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57401: LD_ADDR_VAR 0 53
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: LD_INT 0
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 0
57418: PUSH
57419: LD_INT 1
57421: NEG
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 1
57429: PUSH
57430: LD_INT 0
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: LD_INT 1
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: LD_INT 1
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 1
57459: NEG
57460: PUSH
57461: LD_INT 0
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: NEG
57471: PUSH
57472: LD_INT 1
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 1
57482: NEG
57483: PUSH
57484: LD_INT 2
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 0
57494: PUSH
57495: LD_INT 2
57497: NEG
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 1
57505: PUSH
57506: LD_INT 1
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 2
57516: PUSH
57517: LD_INT 0
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 2
57526: PUSH
57527: LD_INT 1
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 2
57536: PUSH
57537: LD_INT 2
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: LD_INT 2
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: LD_INT 2
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: LD_INT 1
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 2
57577: NEG
57578: PUSH
57579: LD_INT 0
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 2
57588: NEG
57589: PUSH
57590: LD_INT 1
57592: NEG
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 2
57600: NEG
57601: PUSH
57602: LD_INT 2
57604: NEG
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57631: LD_ADDR_VAR 0 54
57635: PUSH
57636: LD_INT 0
57638: PUSH
57639: LD_INT 0
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 0
57648: PUSH
57649: LD_INT 1
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 1
57659: PUSH
57660: LD_INT 0
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: LD_INT 1
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 0
57679: PUSH
57680: LD_INT 1
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 1
57689: NEG
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 1
57700: NEG
57701: PUSH
57702: LD_INT 1
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 1
57712: NEG
57713: PUSH
57714: LD_INT 2
57716: NEG
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 0
57724: PUSH
57725: LD_INT 2
57727: NEG
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 1
57735: PUSH
57736: LD_INT 1
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 2
57746: PUSH
57747: LD_INT 0
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 2
57756: PUSH
57757: LD_INT 1
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 2
57766: PUSH
57767: LD_INT 2
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 1
57776: PUSH
57777: LD_INT 2
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: LD_INT 2
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 2
57807: NEG
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 2
57818: NEG
57819: PUSH
57820: LD_INT 1
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 2
57830: NEG
57831: PUSH
57832: LD_INT 2
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57861: LD_ADDR_VAR 0 55
57865: PUSH
57866: LD_INT 0
57868: PUSH
57869: LD_INT 0
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 0
57878: PUSH
57879: LD_INT 1
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 1
57889: PUSH
57890: LD_INT 0
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: LD_INT 1
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 0
57909: PUSH
57910: LD_INT 1
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 1
57919: NEG
57920: PUSH
57921: LD_INT 0
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 1
57930: NEG
57931: PUSH
57932: LD_INT 1
57934: NEG
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 1
57942: NEG
57943: PUSH
57944: LD_INT 2
57946: NEG
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 0
57954: PUSH
57955: LD_INT 2
57957: NEG
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 1
57965: PUSH
57966: LD_INT 1
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 2
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 2
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 2
57996: PUSH
57997: LD_INT 2
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: PUSH
58007: LD_INT 2
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: LD_INT 2
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 1
58026: NEG
58027: PUSH
58028: LD_INT 1
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 2
58037: NEG
58038: PUSH
58039: LD_INT 0
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 2
58048: NEG
58049: PUSH
58050: LD_INT 1
58052: NEG
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 2
58060: NEG
58061: PUSH
58062: LD_INT 2
58064: NEG
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58091: LD_ADDR_VAR 0 56
58095: PUSH
58096: LD_INT 0
58098: PUSH
58099: LD_INT 0
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 0
58108: PUSH
58109: LD_INT 1
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 1
58119: PUSH
58120: LD_INT 0
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 1
58129: PUSH
58130: LD_INT 1
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 0
58139: PUSH
58140: LD_INT 1
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 1
58149: NEG
58150: PUSH
58151: LD_INT 0
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 1
58160: NEG
58161: PUSH
58162: LD_INT 1
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 1
58172: NEG
58173: PUSH
58174: LD_INT 2
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 0
58184: PUSH
58185: LD_INT 2
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 1
58195: PUSH
58196: LD_INT 1
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 2
58206: PUSH
58207: LD_INT 0
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 2
58216: PUSH
58217: LD_INT 1
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 2
58226: PUSH
58227: LD_INT 2
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 1
58236: PUSH
58237: LD_INT 2
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: LD_INT 2
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 1
58256: NEG
58257: PUSH
58258: LD_INT 1
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 2
58267: NEG
58268: PUSH
58269: LD_INT 0
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 2
58278: NEG
58279: PUSH
58280: LD_INT 1
58282: NEG
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 2
58290: NEG
58291: PUSH
58292: LD_INT 2
58294: NEG
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58321: LD_ADDR_VAR 0 57
58325: PUSH
58326: LD_INT 0
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 0
58338: PUSH
58339: LD_INT 1
58341: NEG
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 1
58349: PUSH
58350: LD_INT 0
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: LD_INT 1
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: LD_INT 1
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 1
58379: NEG
58380: PUSH
58381: LD_INT 0
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 1
58390: NEG
58391: PUSH
58392: LD_INT 1
58394: NEG
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 1
58402: NEG
58403: PUSH
58404: LD_INT 2
58406: NEG
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 0
58414: PUSH
58415: LD_INT 2
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 1
58425: PUSH
58426: LD_INT 1
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 2
58436: PUSH
58437: LD_INT 0
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 2
58446: PUSH
58447: LD_INT 1
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 2
58456: PUSH
58457: LD_INT 2
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 1
58466: PUSH
58467: LD_INT 2
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: LD_INT 2
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 1
58486: NEG
58487: PUSH
58488: LD_INT 1
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 2
58497: NEG
58498: PUSH
58499: LD_INT 0
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 2
58508: NEG
58509: PUSH
58510: LD_INT 1
58512: NEG
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 2
58520: NEG
58521: PUSH
58522: LD_INT 2
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58551: LD_ADDR_VAR 0 58
58555: PUSH
58556: LD_INT 0
58558: PUSH
58559: LD_INT 0
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 0
58568: PUSH
58569: LD_INT 1
58571: NEG
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 1
58579: PUSH
58580: LD_INT 0
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 1
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 0
58599: PUSH
58600: LD_INT 1
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 1
58609: NEG
58610: PUSH
58611: LD_INT 0
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 1
58620: NEG
58621: PUSH
58622: LD_INT 1
58624: NEG
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 1
58632: NEG
58633: PUSH
58634: LD_INT 2
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 0
58644: PUSH
58645: LD_INT 2
58647: NEG
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 1
58655: PUSH
58656: LD_INT 1
58658: NEG
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 2
58666: PUSH
58667: LD_INT 0
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 2
58676: PUSH
58677: LD_INT 1
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 2
58686: PUSH
58687: LD_INT 2
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 1
58696: PUSH
58697: LD_INT 2
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 0
58706: PUSH
58707: LD_INT 2
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 1
58716: NEG
58717: PUSH
58718: LD_INT 1
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 2
58727: NEG
58728: PUSH
58729: LD_INT 0
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 2
58738: NEG
58739: PUSH
58740: LD_INT 1
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 2
58750: NEG
58751: PUSH
58752: LD_INT 2
58754: NEG
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58781: LD_ADDR_VAR 0 59
58785: PUSH
58786: LD_INT 0
58788: PUSH
58789: LD_INT 0
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 0
58798: PUSH
58799: LD_INT 1
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 1
58809: PUSH
58810: LD_INT 0
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 1
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 0
58829: PUSH
58830: LD_INT 1
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 1
58839: NEG
58840: PUSH
58841: LD_INT 0
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 1
58850: NEG
58851: PUSH
58852: LD_INT 1
58854: NEG
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58869: LD_ADDR_VAR 0 60
58873: PUSH
58874: LD_INT 0
58876: PUSH
58877: LD_INT 0
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 0
58886: PUSH
58887: LD_INT 1
58889: NEG
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 1
58897: PUSH
58898: LD_INT 0
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 1
58907: PUSH
58908: LD_INT 1
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: LD_INT 1
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 1
58927: NEG
58928: PUSH
58929: LD_INT 0
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 1
58938: NEG
58939: PUSH
58940: LD_INT 1
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58957: LD_ADDR_VAR 0 61
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 0
58974: PUSH
58975: LD_INT 1
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 1
58985: PUSH
58986: LD_INT 0
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: LD_INT 1
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: LD_INT 1
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: LD_INT 0
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 1
59026: NEG
59027: PUSH
59028: LD_INT 1
59030: NEG
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59045: LD_ADDR_VAR 0 62
59049: PUSH
59050: LD_INT 0
59052: PUSH
59053: LD_INT 0
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 0
59062: PUSH
59063: LD_INT 1
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: PUSH
59074: LD_INT 0
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 1
59083: PUSH
59084: LD_INT 1
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 0
59093: PUSH
59094: LD_INT 1
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 1
59103: NEG
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 1
59114: NEG
59115: PUSH
59116: LD_INT 1
59118: NEG
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59133: LD_ADDR_VAR 0 63
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: LD_INT 0
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: LD_INT 1
59153: NEG
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 1
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 1
59171: PUSH
59172: LD_INT 1
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: LD_INT 1
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 1
59191: NEG
59192: PUSH
59193: LD_INT 0
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: LD_INT 1
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59221: LD_ADDR_VAR 0 64
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: LD_INT 0
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 0
59238: PUSH
59239: LD_INT 1
59241: NEG
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 1
59249: PUSH
59250: LD_INT 0
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 1
59259: PUSH
59260: LD_INT 1
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 0
59269: PUSH
59270: LD_INT 1
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 1
59279: NEG
59280: PUSH
59281: LD_INT 0
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 1
59290: NEG
59291: PUSH
59292: LD_INT 1
59294: NEG
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: ST_TO_ADDR
// end ; 1 :
59309: GO 65206
59311: LD_INT 1
59313: DOUBLE
59314: EQUAL
59315: IFTRUE 59319
59317: GO 61942
59319: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59320: LD_ADDR_VAR 0 11
59324: PUSH
59325: LD_INT 1
59327: NEG
59328: PUSH
59329: LD_INT 3
59331: NEG
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 0
59339: PUSH
59340: LD_INT 3
59342: NEG
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 1
59350: PUSH
59351: LD_INT 2
59353: NEG
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: LIST
59363: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59364: LD_ADDR_VAR 0 12
59368: PUSH
59369: LD_INT 2
59371: PUSH
59372: LD_INT 1
59374: NEG
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 3
59382: PUSH
59383: LD_INT 0
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 3
59392: PUSH
59393: LD_INT 1
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: LIST
59404: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59405: LD_ADDR_VAR 0 13
59409: PUSH
59410: LD_INT 3
59412: PUSH
59413: LD_INT 2
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 3
59422: PUSH
59423: LD_INT 3
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 2
59432: PUSH
59433: LD_INT 3
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: LIST
59444: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59445: LD_ADDR_VAR 0 14
59449: PUSH
59450: LD_INT 1
59452: PUSH
59453: LD_INT 3
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: LD_INT 3
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 1
59472: NEG
59473: PUSH
59474: LD_INT 2
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: LIST
59485: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59486: LD_ADDR_VAR 0 15
59490: PUSH
59491: LD_INT 2
59493: NEG
59494: PUSH
59495: LD_INT 1
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 3
59504: NEG
59505: PUSH
59506: LD_INT 0
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 3
59515: NEG
59516: PUSH
59517: LD_INT 1
59519: NEG
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: LIST
59529: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59530: LD_ADDR_VAR 0 16
59534: PUSH
59535: LD_INT 2
59537: NEG
59538: PUSH
59539: LD_INT 3
59541: NEG
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 3
59549: NEG
59550: PUSH
59551: LD_INT 2
59553: NEG
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 3
59561: NEG
59562: PUSH
59563: LD_INT 3
59565: NEG
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: LIST
59575: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59576: LD_ADDR_VAR 0 17
59580: PUSH
59581: LD_INT 1
59583: NEG
59584: PUSH
59585: LD_INT 3
59587: NEG
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: LD_INT 3
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 1
59606: PUSH
59607: LD_INT 2
59609: NEG
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: LIST
59619: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59620: LD_ADDR_VAR 0 18
59624: PUSH
59625: LD_INT 2
59627: PUSH
59628: LD_INT 1
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 3
59638: PUSH
59639: LD_INT 0
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 3
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: LIST
59660: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59661: LD_ADDR_VAR 0 19
59665: PUSH
59666: LD_INT 3
59668: PUSH
59669: LD_INT 2
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 3
59678: PUSH
59679: LD_INT 3
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 2
59688: PUSH
59689: LD_INT 3
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: LIST
59700: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59701: LD_ADDR_VAR 0 20
59705: PUSH
59706: LD_INT 1
59708: PUSH
59709: LD_INT 3
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 0
59718: PUSH
59719: LD_INT 3
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 1
59728: NEG
59729: PUSH
59730: LD_INT 2
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: LIST
59741: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59742: LD_ADDR_VAR 0 21
59746: PUSH
59747: LD_INT 2
59749: NEG
59750: PUSH
59751: LD_INT 1
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 3
59760: NEG
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 3
59771: NEG
59772: PUSH
59773: LD_INT 1
59775: NEG
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: LIST
59785: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59786: LD_ADDR_VAR 0 22
59790: PUSH
59791: LD_INT 2
59793: NEG
59794: PUSH
59795: LD_INT 3
59797: NEG
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 3
59805: NEG
59806: PUSH
59807: LD_INT 2
59809: NEG
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 3
59817: NEG
59818: PUSH
59819: LD_INT 3
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: LIST
59831: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59832: LD_ADDR_VAR 0 23
59836: PUSH
59837: LD_INT 0
59839: PUSH
59840: LD_INT 3
59842: NEG
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 1
59850: NEG
59851: PUSH
59852: LD_INT 4
59854: NEG
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 1
59862: PUSH
59863: LD_INT 3
59865: NEG
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: LIST
59875: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59876: LD_ADDR_VAR 0 24
59880: PUSH
59881: LD_INT 3
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 3
59893: PUSH
59894: LD_INT 1
59896: NEG
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 4
59904: PUSH
59905: LD_INT 1
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: LIST
59916: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59917: LD_ADDR_VAR 0 25
59921: PUSH
59922: LD_INT 3
59924: PUSH
59925: LD_INT 3
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 4
59934: PUSH
59935: LD_INT 3
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 3
59944: PUSH
59945: LD_INT 4
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: LIST
59956: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59957: LD_ADDR_VAR 0 26
59961: PUSH
59962: LD_INT 0
59964: PUSH
59965: LD_INT 3
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: PUSH
59975: LD_INT 4
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 1
59984: NEG
59985: PUSH
59986: LD_INT 3
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: LIST
59997: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59998: LD_ADDR_VAR 0 27
60002: PUSH
60003: LD_INT 3
60005: NEG
60006: PUSH
60007: LD_INT 0
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 3
60016: NEG
60017: PUSH
60018: LD_INT 1
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 4
60027: NEG
60028: PUSH
60029: LD_INT 1
60031: NEG
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: LIST
60041: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60042: LD_ADDR_VAR 0 28
60046: PUSH
60047: LD_INT 3
60049: NEG
60050: PUSH
60051: LD_INT 3
60053: NEG
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 3
60061: NEG
60062: PUSH
60063: LD_INT 4
60065: NEG
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 4
60073: NEG
60074: PUSH
60075: LD_INT 3
60077: NEG
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: LIST
60087: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60088: LD_ADDR_VAR 0 29
60092: PUSH
60093: LD_INT 1
60095: NEG
60096: PUSH
60097: LD_INT 3
60099: NEG
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 0
60107: PUSH
60108: LD_INT 3
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 1
60118: PUSH
60119: LD_INT 2
60121: NEG
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 1
60129: NEG
60130: PUSH
60131: LD_INT 4
60133: NEG
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 0
60141: PUSH
60142: LD_INT 4
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 1
60152: PUSH
60153: LD_INT 3
60155: NEG
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 1
60163: NEG
60164: PUSH
60165: LD_INT 5
60167: NEG
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 0
60175: PUSH
60176: LD_INT 5
60178: NEG
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 1
60186: PUSH
60187: LD_INT 4
60189: NEG
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 1
60197: NEG
60198: PUSH
60199: LD_INT 6
60201: NEG
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: LD_INT 6
60212: NEG
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 1
60220: PUSH
60221: LD_INT 5
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60243: LD_ADDR_VAR 0 30
60247: PUSH
60248: LD_INT 2
60250: PUSH
60251: LD_INT 1
60253: NEG
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 3
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 3
60271: PUSH
60272: LD_INT 1
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 3
60281: PUSH
60282: LD_INT 1
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 4
60292: PUSH
60293: LD_INT 0
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 4
60302: PUSH
60303: LD_INT 1
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 4
60312: PUSH
60313: LD_INT 1
60315: NEG
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 5
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 5
60333: PUSH
60334: LD_INT 1
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 5
60343: PUSH
60344: LD_INT 1
60346: NEG
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 6
60354: PUSH
60355: LD_INT 0
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 6
60364: PUSH
60365: LD_INT 1
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60386: LD_ADDR_VAR 0 31
60390: PUSH
60391: LD_INT 3
60393: PUSH
60394: LD_INT 2
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 3
60403: PUSH
60404: LD_INT 3
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 2
60413: PUSH
60414: LD_INT 3
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 4
60423: PUSH
60424: LD_INT 3
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 4
60433: PUSH
60434: LD_INT 4
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 3
60443: PUSH
60444: LD_INT 4
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 5
60453: PUSH
60454: LD_INT 4
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 5
60463: PUSH
60464: LD_INT 5
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 4
60473: PUSH
60474: LD_INT 5
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 6
60483: PUSH
60484: LD_INT 5
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 6
60493: PUSH
60494: LD_INT 6
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 5
60503: PUSH
60504: LD_INT 6
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
60525: LD_ADDR_VAR 0 32
60529: PUSH
60530: LD_INT 1
60532: PUSH
60533: LD_INT 3
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 0
60542: PUSH
60543: LD_INT 3
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 1
60552: NEG
60553: PUSH
60554: LD_INT 2
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 1
60563: PUSH
60564: LD_INT 4
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 0
60573: PUSH
60574: LD_INT 4
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 1
60583: NEG
60584: PUSH
60585: LD_INT 3
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 1
60594: PUSH
60595: LD_INT 5
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 0
60604: PUSH
60605: LD_INT 5
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 1
60614: NEG
60615: PUSH
60616: LD_INT 4
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 1
60625: PUSH
60626: LD_INT 6
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 0
60635: PUSH
60636: LD_INT 6
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 1
60645: NEG
60646: PUSH
60647: LD_INT 5
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60668: LD_ADDR_VAR 0 33
60672: PUSH
60673: LD_INT 2
60675: NEG
60676: PUSH
60677: LD_INT 1
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 3
60686: NEG
60687: PUSH
60688: LD_INT 0
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 3
60697: NEG
60698: PUSH
60699: LD_INT 1
60701: NEG
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 3
60709: NEG
60710: PUSH
60711: LD_INT 1
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 4
60720: NEG
60721: PUSH
60722: LD_INT 0
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 4
60731: NEG
60732: PUSH
60733: LD_INT 1
60735: NEG
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 4
60743: NEG
60744: PUSH
60745: LD_INT 1
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 5
60754: NEG
60755: PUSH
60756: LD_INT 0
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 5
60765: NEG
60766: PUSH
60767: LD_INT 1
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 5
60777: NEG
60778: PUSH
60779: LD_INT 1
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 6
60788: NEG
60789: PUSH
60790: LD_INT 0
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 6
60799: NEG
60800: PUSH
60801: LD_INT 1
60803: NEG
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60823: LD_ADDR_VAR 0 34
60827: PUSH
60828: LD_INT 2
60830: NEG
60831: PUSH
60832: LD_INT 3
60834: NEG
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 3
60842: NEG
60843: PUSH
60844: LD_INT 2
60846: NEG
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 3
60854: NEG
60855: PUSH
60856: LD_INT 3
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 3
60866: NEG
60867: PUSH
60868: LD_INT 4
60870: NEG
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 4
60878: NEG
60879: PUSH
60880: LD_INT 3
60882: NEG
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 4
60890: NEG
60891: PUSH
60892: LD_INT 4
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 4
60902: NEG
60903: PUSH
60904: LD_INT 5
60906: NEG
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 5
60914: NEG
60915: PUSH
60916: LD_INT 4
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 5
60926: NEG
60927: PUSH
60928: LD_INT 5
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 5
60938: NEG
60939: PUSH
60940: LD_INT 6
60942: NEG
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 6
60950: NEG
60951: PUSH
60952: LD_INT 5
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 6
60962: NEG
60963: PUSH
60964: LD_INT 6
60966: NEG
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60986: LD_ADDR_VAR 0 41
60990: PUSH
60991: LD_INT 0
60993: PUSH
60994: LD_INT 2
60996: NEG
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 1
61004: NEG
61005: PUSH
61006: LD_INT 3
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 1
61016: PUSH
61017: LD_INT 2
61019: NEG
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: LIST
61029: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61030: LD_ADDR_VAR 0 42
61034: PUSH
61035: LD_INT 2
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 2
61047: PUSH
61048: LD_INT 1
61050: NEG
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 3
61058: PUSH
61059: LD_INT 1
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: LIST
61070: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61071: LD_ADDR_VAR 0 43
61075: PUSH
61076: LD_INT 2
61078: PUSH
61079: LD_INT 2
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 3
61088: PUSH
61089: LD_INT 2
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 2
61098: PUSH
61099: LD_INT 3
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: LIST
61110: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61111: LD_ADDR_VAR 0 44
61115: PUSH
61116: LD_INT 0
61118: PUSH
61119: LD_INT 2
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 1
61128: PUSH
61129: LD_INT 3
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 1
61138: NEG
61139: PUSH
61140: LD_INT 2
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: LIST
61151: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61152: LD_ADDR_VAR 0 45
61156: PUSH
61157: LD_INT 2
61159: NEG
61160: PUSH
61161: LD_INT 0
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 2
61170: NEG
61171: PUSH
61172: LD_INT 1
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 3
61181: NEG
61182: PUSH
61183: LD_INT 1
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: LIST
61195: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61196: LD_ADDR_VAR 0 46
61200: PUSH
61201: LD_INT 2
61203: NEG
61204: PUSH
61205: LD_INT 2
61207: NEG
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 2
61215: NEG
61216: PUSH
61217: LD_INT 3
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 3
61227: NEG
61228: PUSH
61229: LD_INT 2
61231: NEG
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: LIST
61241: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61242: LD_ADDR_VAR 0 47
61246: PUSH
61247: LD_INT 2
61249: NEG
61250: PUSH
61251: LD_INT 3
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 1
61261: NEG
61262: PUSH
61263: LD_INT 3
61265: NEG
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61275: LD_ADDR_VAR 0 48
61279: PUSH
61280: LD_INT 1
61282: PUSH
61283: LD_INT 2
61285: NEG
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 2
61293: PUSH
61294: LD_INT 1
61296: NEG
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61306: LD_ADDR_VAR 0 49
61310: PUSH
61311: LD_INT 3
61313: PUSH
61314: LD_INT 1
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 3
61323: PUSH
61324: LD_INT 2
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61335: LD_ADDR_VAR 0 50
61339: PUSH
61340: LD_INT 2
61342: PUSH
61343: LD_INT 3
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 1
61352: PUSH
61353: LD_INT 3
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61364: LD_ADDR_VAR 0 51
61368: PUSH
61369: LD_INT 1
61371: NEG
61372: PUSH
61373: LD_INT 2
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 2
61382: NEG
61383: PUSH
61384: LD_INT 1
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61395: LD_ADDR_VAR 0 52
61399: PUSH
61400: LD_INT 3
61402: NEG
61403: PUSH
61404: LD_INT 1
61406: NEG
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 3
61414: NEG
61415: PUSH
61416: LD_INT 2
61418: NEG
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61428: LD_ADDR_VAR 0 53
61432: PUSH
61433: LD_INT 1
61435: NEG
61436: PUSH
61437: LD_INT 3
61439: NEG
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: LD_INT 3
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 1
61458: PUSH
61459: LD_INT 2
61461: NEG
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: LIST
61471: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61472: LD_ADDR_VAR 0 54
61476: PUSH
61477: LD_INT 2
61479: PUSH
61480: LD_INT 1
61482: NEG
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 3
61490: PUSH
61491: LD_INT 0
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 3
61500: PUSH
61501: LD_INT 1
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: LIST
61512: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61513: LD_ADDR_VAR 0 55
61517: PUSH
61518: LD_INT 3
61520: PUSH
61521: LD_INT 2
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 3
61530: PUSH
61531: LD_INT 3
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 2
61540: PUSH
61541: LD_INT 3
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: LIST
61552: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61553: LD_ADDR_VAR 0 56
61557: PUSH
61558: LD_INT 1
61560: PUSH
61561: LD_INT 3
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 0
61570: PUSH
61571: LD_INT 3
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 1
61580: NEG
61581: PUSH
61582: LD_INT 2
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: LIST
61593: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61594: LD_ADDR_VAR 0 57
61598: PUSH
61599: LD_INT 2
61601: NEG
61602: PUSH
61603: LD_INT 1
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 3
61612: NEG
61613: PUSH
61614: LD_INT 0
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 3
61623: NEG
61624: PUSH
61625: LD_INT 1
61627: NEG
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: LIST
61637: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61638: LD_ADDR_VAR 0 58
61642: PUSH
61643: LD_INT 2
61645: NEG
61646: PUSH
61647: LD_INT 3
61649: NEG
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 3
61657: NEG
61658: PUSH
61659: LD_INT 2
61661: NEG
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 3
61669: NEG
61670: PUSH
61671: LD_INT 3
61673: NEG
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: LIST
61683: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61684: LD_ADDR_VAR 0 59
61688: PUSH
61689: LD_INT 1
61691: NEG
61692: PUSH
61693: LD_INT 2
61695: NEG
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 0
61703: PUSH
61704: LD_INT 2
61706: NEG
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 1
61714: PUSH
61715: LD_INT 1
61717: NEG
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: LIST
61727: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61728: LD_ADDR_VAR 0 60
61732: PUSH
61733: LD_INT 1
61735: PUSH
61736: LD_INT 1
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 2
61746: PUSH
61747: LD_INT 0
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 2
61756: PUSH
61757: LD_INT 1
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: LIST
61768: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61769: LD_ADDR_VAR 0 61
61773: PUSH
61774: LD_INT 2
61776: PUSH
61777: LD_INT 1
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 2
61786: PUSH
61787: LD_INT 2
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 1
61796: PUSH
61797: LD_INT 2
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: LIST
61808: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61809: LD_ADDR_VAR 0 62
61813: PUSH
61814: LD_INT 1
61816: PUSH
61817: LD_INT 2
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 0
61826: PUSH
61827: LD_INT 2
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 1
61836: NEG
61837: PUSH
61838: LD_INT 1
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: LIST
61849: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61850: LD_ADDR_VAR 0 63
61854: PUSH
61855: LD_INT 1
61857: NEG
61858: PUSH
61859: LD_INT 1
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 2
61868: NEG
61869: PUSH
61870: LD_INT 0
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 2
61879: NEG
61880: PUSH
61881: LD_INT 1
61883: NEG
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: LIST
61893: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61894: LD_ADDR_VAR 0 64
61898: PUSH
61899: LD_INT 1
61901: NEG
61902: PUSH
61903: LD_INT 2
61905: NEG
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 2
61913: NEG
61914: PUSH
61915: LD_INT 1
61917: NEG
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 2
61925: NEG
61926: PUSH
61927: LD_INT 2
61929: NEG
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: LIST
61939: ST_TO_ADDR
// end ; 2 :
61940: GO 65206
61942: LD_INT 2
61944: DOUBLE
61945: EQUAL
61946: IFTRUE 61950
61948: GO 65205
61950: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61951: LD_ADDR_VAR 0 29
61955: PUSH
61956: LD_INT 4
61958: PUSH
61959: LD_INT 0
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 4
61968: PUSH
61969: LD_INT 1
61971: NEG
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 5
61979: PUSH
61980: LD_INT 0
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 5
61989: PUSH
61990: LD_INT 1
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 4
61999: PUSH
62000: LD_INT 1
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 3
62009: PUSH
62010: LD_INT 0
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 3
62019: PUSH
62020: LD_INT 1
62022: NEG
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 3
62030: PUSH
62031: LD_INT 2
62033: NEG
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 5
62041: PUSH
62042: LD_INT 2
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 3
62051: PUSH
62052: LD_INT 3
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 3
62061: PUSH
62062: LD_INT 2
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 4
62071: PUSH
62072: LD_INT 3
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 4
62081: PUSH
62082: LD_INT 4
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 3
62091: PUSH
62092: LD_INT 4
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 2
62101: PUSH
62102: LD_INT 3
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 2
62111: PUSH
62112: LD_INT 2
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 4
62121: PUSH
62122: LD_INT 2
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 2
62131: PUSH
62132: LD_INT 4
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 0
62141: PUSH
62142: LD_INT 4
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 0
62151: PUSH
62152: LD_INT 3
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 1
62161: PUSH
62162: LD_INT 4
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 1
62171: PUSH
62172: LD_INT 5
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: LD_INT 5
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 1
62191: NEG
62192: PUSH
62193: LD_INT 4
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 1
62202: NEG
62203: PUSH
62204: LD_INT 3
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 2
62213: PUSH
62214: LD_INT 5
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 2
62223: NEG
62224: PUSH
62225: LD_INT 3
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 3
62234: NEG
62235: PUSH
62236: LD_INT 0
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 3
62245: NEG
62246: PUSH
62247: LD_INT 1
62249: NEG
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 2
62257: NEG
62258: PUSH
62259: LD_INT 0
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 2
62268: NEG
62269: PUSH
62270: LD_INT 1
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 3
62279: NEG
62280: PUSH
62281: LD_INT 1
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 4
62290: NEG
62291: PUSH
62292: LD_INT 0
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 4
62301: NEG
62302: PUSH
62303: LD_INT 1
62305: NEG
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 4
62313: NEG
62314: PUSH
62315: LD_INT 2
62317: NEG
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 2
62325: NEG
62326: PUSH
62327: LD_INT 2
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 4
62336: NEG
62337: PUSH
62338: LD_INT 4
62340: NEG
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 4
62348: NEG
62349: PUSH
62350: LD_INT 5
62352: NEG
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 3
62360: NEG
62361: PUSH
62362: LD_INT 4
62364: NEG
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 3
62372: NEG
62373: PUSH
62374: LD_INT 3
62376: NEG
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 4
62384: NEG
62385: PUSH
62386: LD_INT 3
62388: NEG
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 5
62396: NEG
62397: PUSH
62398: LD_INT 4
62400: NEG
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 5
62408: NEG
62409: PUSH
62410: LD_INT 5
62412: NEG
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 3
62420: NEG
62421: PUSH
62422: LD_INT 5
62424: NEG
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 5
62432: NEG
62433: PUSH
62434: LD_INT 3
62436: NEG
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62489: LD_ADDR_VAR 0 30
62493: PUSH
62494: LD_INT 4
62496: PUSH
62497: LD_INT 4
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 4
62506: PUSH
62507: LD_INT 3
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 5
62516: PUSH
62517: LD_INT 4
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 5
62526: PUSH
62527: LD_INT 5
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 4
62536: PUSH
62537: LD_INT 5
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 3
62546: PUSH
62547: LD_INT 4
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 3
62556: PUSH
62557: LD_INT 3
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 5
62566: PUSH
62567: LD_INT 3
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 3
62576: PUSH
62577: LD_INT 5
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 0
62586: PUSH
62587: LD_INT 3
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 0
62596: PUSH
62597: LD_INT 2
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 1
62606: PUSH
62607: LD_INT 3
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 1
62616: PUSH
62617: LD_INT 4
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 0
62626: PUSH
62627: LD_INT 4
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 1
62636: NEG
62637: PUSH
62638: LD_INT 3
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 1
62647: NEG
62648: PUSH
62649: LD_INT 2
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 2
62658: PUSH
62659: LD_INT 4
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 2
62668: NEG
62669: PUSH
62670: LD_INT 2
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 4
62679: NEG
62680: PUSH
62681: LD_INT 0
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 4
62690: NEG
62691: PUSH
62692: LD_INT 1
62694: NEG
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 3
62702: NEG
62703: PUSH
62704: LD_INT 0
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 3
62713: NEG
62714: PUSH
62715: LD_INT 1
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 4
62724: NEG
62725: PUSH
62726: LD_INT 1
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 5
62735: NEG
62736: PUSH
62737: LD_INT 0
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 5
62746: NEG
62747: PUSH
62748: LD_INT 1
62750: NEG
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 5
62758: NEG
62759: PUSH
62760: LD_INT 2
62762: NEG
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 3
62770: NEG
62771: PUSH
62772: LD_INT 2
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 3
62781: NEG
62782: PUSH
62783: LD_INT 3
62785: NEG
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 3
62793: NEG
62794: PUSH
62795: LD_INT 4
62797: NEG
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 2
62805: NEG
62806: PUSH
62807: LD_INT 3
62809: NEG
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 2
62817: NEG
62818: PUSH
62819: LD_INT 2
62821: NEG
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 3
62829: NEG
62830: PUSH
62831: LD_INT 2
62833: NEG
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 4
62841: NEG
62842: PUSH
62843: LD_INT 3
62845: NEG
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 4
62853: NEG
62854: PUSH
62855: LD_INT 4
62857: NEG
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 2
62865: NEG
62866: PUSH
62867: LD_INT 4
62869: NEG
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 4
62877: NEG
62878: PUSH
62879: LD_INT 2
62881: NEG
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 0
62889: PUSH
62890: LD_INT 4
62892: NEG
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 0
62900: PUSH
62901: LD_INT 5
62903: NEG
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 1
62911: PUSH
62912: LD_INT 4
62914: NEG
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 1
62922: PUSH
62923: LD_INT 3
62925: NEG
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 0
62933: PUSH
62934: LD_INT 3
62936: NEG
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 1
62944: NEG
62945: PUSH
62946: LD_INT 4
62948: NEG
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 1
62956: NEG
62957: PUSH
62958: LD_INT 5
62960: NEG
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 2
62968: PUSH
62969: LD_INT 3
62971: NEG
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 2
62979: NEG
62980: PUSH
62981: LD_INT 5
62983: NEG
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63036: LD_ADDR_VAR 0 31
63040: PUSH
63041: LD_INT 0
63043: PUSH
63044: LD_INT 4
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 0
63053: PUSH
63054: LD_INT 3
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 1
63063: PUSH
63064: LD_INT 4
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 1
63073: PUSH
63074: LD_INT 5
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 0
63083: PUSH
63084: LD_INT 5
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 1
63093: NEG
63094: PUSH
63095: LD_INT 4
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 1
63104: NEG
63105: PUSH
63106: LD_INT 3
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 2
63115: PUSH
63116: LD_INT 5
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 2
63125: NEG
63126: PUSH
63127: LD_INT 3
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 3
63136: NEG
63137: PUSH
63138: LD_INT 0
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 3
63147: NEG
63148: PUSH
63149: LD_INT 1
63151: NEG
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 2
63159: NEG
63160: PUSH
63161: LD_INT 0
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 2
63170: NEG
63171: PUSH
63172: LD_INT 1
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 3
63181: NEG
63182: PUSH
63183: LD_INT 1
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 4
63192: NEG
63193: PUSH
63194: LD_INT 0
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 4
63203: NEG
63204: PUSH
63205: LD_INT 1
63207: NEG
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 4
63215: NEG
63216: PUSH
63217: LD_INT 2
63219: NEG
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 2
63227: NEG
63228: PUSH
63229: LD_INT 2
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 4
63238: NEG
63239: PUSH
63240: LD_INT 4
63242: NEG
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 4
63250: NEG
63251: PUSH
63252: LD_INT 5
63254: NEG
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 3
63262: NEG
63263: PUSH
63264: LD_INT 4
63266: NEG
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 3
63274: NEG
63275: PUSH
63276: LD_INT 3
63278: NEG
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 4
63286: NEG
63287: PUSH
63288: LD_INT 3
63290: NEG
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 5
63298: NEG
63299: PUSH
63300: LD_INT 4
63302: NEG
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 5
63310: NEG
63311: PUSH
63312: LD_INT 5
63314: NEG
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 3
63322: NEG
63323: PUSH
63324: LD_INT 5
63326: NEG
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: LD_INT 5
63334: NEG
63335: PUSH
63336: LD_INT 3
63338: NEG
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 0
63346: PUSH
63347: LD_INT 3
63349: NEG
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 0
63357: PUSH
63358: LD_INT 4
63360: NEG
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 1
63368: PUSH
63369: LD_INT 3
63371: NEG
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 1
63379: PUSH
63380: LD_INT 2
63382: NEG
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 0
63390: PUSH
63391: LD_INT 2
63393: NEG
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 1
63401: NEG
63402: PUSH
63403: LD_INT 3
63405: NEG
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 1
63413: NEG
63414: PUSH
63415: LD_INT 4
63417: NEG
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 2
63425: PUSH
63426: LD_INT 2
63428: NEG
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 2
63436: NEG
63437: PUSH
63438: LD_INT 4
63440: NEG
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 4
63448: PUSH
63449: LD_INT 0
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 4
63458: PUSH
63459: LD_INT 1
63461: NEG
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 5
63469: PUSH
63470: LD_INT 0
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 5
63479: PUSH
63480: LD_INT 1
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 4
63489: PUSH
63490: LD_INT 1
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 3
63499: PUSH
63500: LD_INT 0
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 3
63509: PUSH
63510: LD_INT 1
63512: NEG
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 3
63520: PUSH
63521: LD_INT 2
63523: NEG
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 5
63531: PUSH
63532: LD_INT 2
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63586: LD_ADDR_VAR 0 32
63590: PUSH
63591: LD_INT 4
63593: NEG
63594: PUSH
63595: LD_INT 0
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 4
63604: NEG
63605: PUSH
63606: LD_INT 1
63608: NEG
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 3
63616: NEG
63617: PUSH
63618: LD_INT 0
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 3
63627: NEG
63628: PUSH
63629: LD_INT 1
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 4
63638: NEG
63639: PUSH
63640: LD_INT 1
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 5
63649: NEG
63650: PUSH
63651: LD_INT 0
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 5
63660: NEG
63661: PUSH
63662: LD_INT 1
63664: NEG
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 5
63672: NEG
63673: PUSH
63674: LD_INT 2
63676: NEG
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 3
63684: NEG
63685: PUSH
63686: LD_INT 2
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 3
63695: NEG
63696: PUSH
63697: LD_INT 3
63699: NEG
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 3
63707: NEG
63708: PUSH
63709: LD_INT 4
63711: NEG
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 2
63719: NEG
63720: PUSH
63721: LD_INT 3
63723: NEG
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 2
63731: NEG
63732: PUSH
63733: LD_INT 2
63735: NEG
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 3
63743: NEG
63744: PUSH
63745: LD_INT 2
63747: NEG
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 4
63755: NEG
63756: PUSH
63757: LD_INT 3
63759: NEG
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 4
63767: NEG
63768: PUSH
63769: LD_INT 4
63771: NEG
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 2
63779: NEG
63780: PUSH
63781: LD_INT 4
63783: NEG
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 4
63791: NEG
63792: PUSH
63793: LD_INT 2
63795: NEG
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 0
63803: PUSH
63804: LD_INT 4
63806: NEG
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 0
63814: PUSH
63815: LD_INT 5
63817: NEG
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 1
63825: PUSH
63826: LD_INT 4
63828: NEG
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 1
63836: PUSH
63837: LD_INT 3
63839: NEG
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 0
63847: PUSH
63848: LD_INT 3
63850: NEG
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 1
63858: NEG
63859: PUSH
63860: LD_INT 4
63862: NEG
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 1
63870: NEG
63871: PUSH
63872: LD_INT 5
63874: NEG
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 2
63882: PUSH
63883: LD_INT 3
63885: NEG
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 2
63893: NEG
63894: PUSH
63895: LD_INT 5
63897: NEG
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 3
63905: PUSH
63906: LD_INT 0
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: LD_INT 3
63915: PUSH
63916: LD_INT 1
63918: NEG
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 4
63926: PUSH
63927: LD_INT 0
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 4
63936: PUSH
63937: LD_INT 1
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 3
63946: PUSH
63947: LD_INT 1
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: LD_INT 2
63956: PUSH
63957: LD_INT 0
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 2
63966: PUSH
63967: LD_INT 1
63969: NEG
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 2
63977: PUSH
63978: LD_INT 2
63980: NEG
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 4
63988: PUSH
63989: LD_INT 2
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 4
63998: PUSH
63999: LD_INT 4
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 4
64008: PUSH
64009: LD_INT 3
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 5
64018: PUSH
64019: LD_INT 4
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 5
64028: PUSH
64029: LD_INT 5
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 4
64038: PUSH
64039: LD_INT 5
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 3
64048: PUSH
64049: LD_INT 4
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 3
64058: PUSH
64059: LD_INT 3
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 5
64068: PUSH
64069: LD_INT 3
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 3
64078: PUSH
64079: LD_INT 5
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64133: LD_ADDR_VAR 0 33
64137: PUSH
64138: LD_INT 4
64140: NEG
64141: PUSH
64142: LD_INT 4
64144: NEG
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 4
64152: NEG
64153: PUSH
64154: LD_INT 5
64156: NEG
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 3
64164: NEG
64165: PUSH
64166: LD_INT 4
64168: NEG
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 3
64176: NEG
64177: PUSH
64178: LD_INT 3
64180: NEG
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PUSH
64186: LD_INT 4
64188: NEG
64189: PUSH
64190: LD_INT 3
64192: NEG
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 5
64200: NEG
64201: PUSH
64202: LD_INT 4
64204: NEG
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 5
64212: NEG
64213: PUSH
64214: LD_INT 5
64216: NEG
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 3
64224: NEG
64225: PUSH
64226: LD_INT 5
64228: NEG
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: LD_INT 5
64236: NEG
64237: PUSH
64238: LD_INT 3
64240: NEG
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 0
64248: PUSH
64249: LD_INT 3
64251: NEG
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 0
64259: PUSH
64260: LD_INT 4
64262: NEG
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 1
64270: PUSH
64271: LD_INT 3
64273: NEG
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 1
64281: PUSH
64282: LD_INT 2
64284: NEG
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 0
64292: PUSH
64293: LD_INT 2
64295: NEG
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 1
64303: NEG
64304: PUSH
64305: LD_INT 3
64307: NEG
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 1
64315: NEG
64316: PUSH
64317: LD_INT 4
64319: NEG
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 2
64327: PUSH
64328: LD_INT 2
64330: NEG
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 2
64338: NEG
64339: PUSH
64340: LD_INT 4
64342: NEG
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 4
64350: PUSH
64351: LD_INT 0
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 4
64360: PUSH
64361: LD_INT 1
64363: NEG
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 5
64371: PUSH
64372: LD_INT 0
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 5
64381: PUSH
64382: LD_INT 1
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 4
64391: PUSH
64392: LD_INT 1
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 3
64401: PUSH
64402: LD_INT 0
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 3
64411: PUSH
64412: LD_INT 1
64414: NEG
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 3
64422: PUSH
64423: LD_INT 2
64425: NEG
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: LD_INT 5
64433: PUSH
64434: LD_INT 2
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 3
64443: PUSH
64444: LD_INT 3
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 3
64453: PUSH
64454: LD_INT 2
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 4
64463: PUSH
64464: LD_INT 3
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 4
64473: PUSH
64474: LD_INT 4
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 3
64483: PUSH
64484: LD_INT 4
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 2
64493: PUSH
64494: LD_INT 3
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 2
64503: PUSH
64504: LD_INT 2
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 4
64513: PUSH
64514: LD_INT 2
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 2
64523: PUSH
64524: LD_INT 4
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: LD_INT 0
64533: PUSH
64534: LD_INT 4
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 0
64543: PUSH
64544: LD_INT 3
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 1
64553: PUSH
64554: LD_INT 4
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 1
64563: PUSH
64564: LD_INT 5
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: LD_INT 0
64573: PUSH
64574: LD_INT 5
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 1
64583: NEG
64584: PUSH
64585: LD_INT 4
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 1
64594: NEG
64595: PUSH
64596: LD_INT 3
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 2
64605: PUSH
64606: LD_INT 5
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 2
64615: NEG
64616: PUSH
64617: LD_INT 3
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64671: LD_ADDR_VAR 0 34
64675: PUSH
64676: LD_INT 0
64678: PUSH
64679: LD_INT 4
64681: NEG
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 0
64689: PUSH
64690: LD_INT 5
64692: NEG
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 1
64700: PUSH
64701: LD_INT 4
64703: NEG
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 1
64711: PUSH
64712: LD_INT 3
64714: NEG
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 0
64722: PUSH
64723: LD_INT 3
64725: NEG
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 1
64733: NEG
64734: PUSH
64735: LD_INT 4
64737: NEG
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 1
64745: NEG
64746: PUSH
64747: LD_INT 5
64749: NEG
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 2
64757: PUSH
64758: LD_INT 3
64760: NEG
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 2
64768: NEG
64769: PUSH
64770: LD_INT 5
64772: NEG
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 3
64780: PUSH
64781: LD_INT 0
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 3
64790: PUSH
64791: LD_INT 1
64793: NEG
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 4
64801: PUSH
64802: LD_INT 0
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 4
64811: PUSH
64812: LD_INT 1
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 3
64821: PUSH
64822: LD_INT 1
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 2
64831: PUSH
64832: LD_INT 0
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 2
64841: PUSH
64842: LD_INT 1
64844: NEG
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 2
64852: PUSH
64853: LD_INT 2
64855: NEG
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 4
64863: PUSH
64864: LD_INT 2
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 4
64873: PUSH
64874: LD_INT 4
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 4
64883: PUSH
64884: LD_INT 3
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 5
64893: PUSH
64894: LD_INT 4
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 5
64903: PUSH
64904: LD_INT 5
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 4
64913: PUSH
64914: LD_INT 5
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: LD_INT 3
64923: PUSH
64924: LD_INT 4
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 3
64933: PUSH
64934: LD_INT 3
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 5
64943: PUSH
64944: LD_INT 3
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 3
64953: PUSH
64954: LD_INT 5
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 0
64963: PUSH
64964: LD_INT 3
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 0
64973: PUSH
64974: LD_INT 2
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 1
64983: PUSH
64984: LD_INT 3
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 1
64993: PUSH
64994: LD_INT 4
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 0
65003: PUSH
65004: LD_INT 4
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 1
65013: NEG
65014: PUSH
65015: LD_INT 3
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: LD_INT 1
65024: NEG
65025: PUSH
65026: LD_INT 2
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 2
65035: PUSH
65036: LD_INT 4
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 2
65045: NEG
65046: PUSH
65047: LD_INT 2
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 4
65056: NEG
65057: PUSH
65058: LD_INT 0
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 4
65067: NEG
65068: PUSH
65069: LD_INT 1
65071: NEG
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 3
65079: NEG
65080: PUSH
65081: LD_INT 0
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 3
65090: NEG
65091: PUSH
65092: LD_INT 1
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 4
65101: NEG
65102: PUSH
65103: LD_INT 1
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 5
65112: NEG
65113: PUSH
65114: LD_INT 0
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 5
65123: NEG
65124: PUSH
65125: LD_INT 1
65127: NEG
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 5
65135: NEG
65136: PUSH
65137: LD_INT 2
65139: NEG
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 3
65147: NEG
65148: PUSH
65149: LD_INT 2
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: LIST
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: ST_TO_ADDR
// end ; end ;
65203: GO 65206
65205: POP
// case btype of b_depot , b_warehouse :
65206: LD_VAR 0 1
65210: PUSH
65211: LD_INT 0
65213: DOUBLE
65214: EQUAL
65215: IFTRUE 65225
65217: LD_INT 1
65219: DOUBLE
65220: EQUAL
65221: IFTRUE 65225
65223: GO 65426
65225: POP
// case nation of nation_american :
65226: LD_VAR 0 5
65230: PUSH
65231: LD_INT 1
65233: DOUBLE
65234: EQUAL
65235: IFTRUE 65239
65237: GO 65295
65239: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65240: LD_ADDR_VAR 0 9
65244: PUSH
65245: LD_VAR 0 11
65249: PUSH
65250: LD_VAR 0 12
65254: PUSH
65255: LD_VAR 0 13
65259: PUSH
65260: LD_VAR 0 14
65264: PUSH
65265: LD_VAR 0 15
65269: PUSH
65270: LD_VAR 0 16
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: PUSH
65283: LD_VAR 0 4
65287: PUSH
65288: LD_INT 1
65290: PLUS
65291: ARRAY
65292: ST_TO_ADDR
65293: GO 65424
65295: LD_INT 2
65297: DOUBLE
65298: EQUAL
65299: IFTRUE 65303
65301: GO 65359
65303: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65304: LD_ADDR_VAR 0 9
65308: PUSH
65309: LD_VAR 0 17
65313: PUSH
65314: LD_VAR 0 18
65318: PUSH
65319: LD_VAR 0 19
65323: PUSH
65324: LD_VAR 0 20
65328: PUSH
65329: LD_VAR 0 21
65333: PUSH
65334: LD_VAR 0 22
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: PUSH
65347: LD_VAR 0 4
65351: PUSH
65352: LD_INT 1
65354: PLUS
65355: ARRAY
65356: ST_TO_ADDR
65357: GO 65424
65359: LD_INT 3
65361: DOUBLE
65362: EQUAL
65363: IFTRUE 65367
65365: GO 65423
65367: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65368: LD_ADDR_VAR 0 9
65372: PUSH
65373: LD_VAR 0 23
65377: PUSH
65378: LD_VAR 0 24
65382: PUSH
65383: LD_VAR 0 25
65387: PUSH
65388: LD_VAR 0 26
65392: PUSH
65393: LD_VAR 0 27
65397: PUSH
65398: LD_VAR 0 28
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: LIST
65407: LIST
65408: LIST
65409: LIST
65410: PUSH
65411: LD_VAR 0 4
65415: PUSH
65416: LD_INT 1
65418: PLUS
65419: ARRAY
65420: ST_TO_ADDR
65421: GO 65424
65423: POP
65424: GO 65979
65426: LD_INT 2
65428: DOUBLE
65429: EQUAL
65430: IFTRUE 65440
65432: LD_INT 3
65434: DOUBLE
65435: EQUAL
65436: IFTRUE 65440
65438: GO 65496
65440: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65441: LD_ADDR_VAR 0 9
65445: PUSH
65446: LD_VAR 0 29
65450: PUSH
65451: LD_VAR 0 30
65455: PUSH
65456: LD_VAR 0 31
65460: PUSH
65461: LD_VAR 0 32
65465: PUSH
65466: LD_VAR 0 33
65470: PUSH
65471: LD_VAR 0 34
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: LIST
65480: LIST
65481: LIST
65482: LIST
65483: PUSH
65484: LD_VAR 0 4
65488: PUSH
65489: LD_INT 1
65491: PLUS
65492: ARRAY
65493: ST_TO_ADDR
65494: GO 65979
65496: LD_INT 16
65498: DOUBLE
65499: EQUAL
65500: IFTRUE 65558
65502: LD_INT 17
65504: DOUBLE
65505: EQUAL
65506: IFTRUE 65558
65508: LD_INT 18
65510: DOUBLE
65511: EQUAL
65512: IFTRUE 65558
65514: LD_INT 19
65516: DOUBLE
65517: EQUAL
65518: IFTRUE 65558
65520: LD_INT 22
65522: DOUBLE
65523: EQUAL
65524: IFTRUE 65558
65526: LD_INT 20
65528: DOUBLE
65529: EQUAL
65530: IFTRUE 65558
65532: LD_INT 21
65534: DOUBLE
65535: EQUAL
65536: IFTRUE 65558
65538: LD_INT 23
65540: DOUBLE
65541: EQUAL
65542: IFTRUE 65558
65544: LD_INT 24
65546: DOUBLE
65547: EQUAL
65548: IFTRUE 65558
65550: LD_INT 25
65552: DOUBLE
65553: EQUAL
65554: IFTRUE 65558
65556: GO 65614
65558: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65559: LD_ADDR_VAR 0 9
65563: PUSH
65564: LD_VAR 0 35
65568: PUSH
65569: LD_VAR 0 36
65573: PUSH
65574: LD_VAR 0 37
65578: PUSH
65579: LD_VAR 0 38
65583: PUSH
65584: LD_VAR 0 39
65588: PUSH
65589: LD_VAR 0 40
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: PUSH
65602: LD_VAR 0 4
65606: PUSH
65607: LD_INT 1
65609: PLUS
65610: ARRAY
65611: ST_TO_ADDR
65612: GO 65979
65614: LD_INT 6
65616: DOUBLE
65617: EQUAL
65618: IFTRUE 65670
65620: LD_INT 7
65622: DOUBLE
65623: EQUAL
65624: IFTRUE 65670
65626: LD_INT 8
65628: DOUBLE
65629: EQUAL
65630: IFTRUE 65670
65632: LD_INT 13
65634: DOUBLE
65635: EQUAL
65636: IFTRUE 65670
65638: LD_INT 12
65640: DOUBLE
65641: EQUAL
65642: IFTRUE 65670
65644: LD_INT 15
65646: DOUBLE
65647: EQUAL
65648: IFTRUE 65670
65650: LD_INT 11
65652: DOUBLE
65653: EQUAL
65654: IFTRUE 65670
65656: LD_INT 14
65658: DOUBLE
65659: EQUAL
65660: IFTRUE 65670
65662: LD_INT 10
65664: DOUBLE
65665: EQUAL
65666: IFTRUE 65670
65668: GO 65726
65670: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65671: LD_ADDR_VAR 0 9
65675: PUSH
65676: LD_VAR 0 41
65680: PUSH
65681: LD_VAR 0 42
65685: PUSH
65686: LD_VAR 0 43
65690: PUSH
65691: LD_VAR 0 44
65695: PUSH
65696: LD_VAR 0 45
65700: PUSH
65701: LD_VAR 0 46
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: PUSH
65714: LD_VAR 0 4
65718: PUSH
65719: LD_INT 1
65721: PLUS
65722: ARRAY
65723: ST_TO_ADDR
65724: GO 65979
65726: LD_INT 36
65728: DOUBLE
65729: EQUAL
65730: IFTRUE 65734
65732: GO 65790
65734: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65735: LD_ADDR_VAR 0 9
65739: PUSH
65740: LD_VAR 0 47
65744: PUSH
65745: LD_VAR 0 48
65749: PUSH
65750: LD_VAR 0 49
65754: PUSH
65755: LD_VAR 0 50
65759: PUSH
65760: LD_VAR 0 51
65764: PUSH
65765: LD_VAR 0 52
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: PUSH
65778: LD_VAR 0 4
65782: PUSH
65783: LD_INT 1
65785: PLUS
65786: ARRAY
65787: ST_TO_ADDR
65788: GO 65979
65790: LD_INT 4
65792: DOUBLE
65793: EQUAL
65794: IFTRUE 65816
65796: LD_INT 5
65798: DOUBLE
65799: EQUAL
65800: IFTRUE 65816
65802: LD_INT 34
65804: DOUBLE
65805: EQUAL
65806: IFTRUE 65816
65808: LD_INT 37
65810: DOUBLE
65811: EQUAL
65812: IFTRUE 65816
65814: GO 65872
65816: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65817: LD_ADDR_VAR 0 9
65821: PUSH
65822: LD_VAR 0 53
65826: PUSH
65827: LD_VAR 0 54
65831: PUSH
65832: LD_VAR 0 55
65836: PUSH
65837: LD_VAR 0 56
65841: PUSH
65842: LD_VAR 0 57
65846: PUSH
65847: LD_VAR 0 58
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: PUSH
65860: LD_VAR 0 4
65864: PUSH
65865: LD_INT 1
65867: PLUS
65868: ARRAY
65869: ST_TO_ADDR
65870: GO 65979
65872: LD_INT 31
65874: DOUBLE
65875: EQUAL
65876: IFTRUE 65922
65878: LD_INT 32
65880: DOUBLE
65881: EQUAL
65882: IFTRUE 65922
65884: LD_INT 33
65886: DOUBLE
65887: EQUAL
65888: IFTRUE 65922
65890: LD_INT 27
65892: DOUBLE
65893: EQUAL
65894: IFTRUE 65922
65896: LD_INT 26
65898: DOUBLE
65899: EQUAL
65900: IFTRUE 65922
65902: LD_INT 28
65904: DOUBLE
65905: EQUAL
65906: IFTRUE 65922
65908: LD_INT 29
65910: DOUBLE
65911: EQUAL
65912: IFTRUE 65922
65914: LD_INT 30
65916: DOUBLE
65917: EQUAL
65918: IFTRUE 65922
65920: GO 65978
65922: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65923: LD_ADDR_VAR 0 9
65927: PUSH
65928: LD_VAR 0 59
65932: PUSH
65933: LD_VAR 0 60
65937: PUSH
65938: LD_VAR 0 61
65942: PUSH
65943: LD_VAR 0 62
65947: PUSH
65948: LD_VAR 0 63
65952: PUSH
65953: LD_VAR 0 64
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: PUSH
65966: LD_VAR 0 4
65970: PUSH
65971: LD_INT 1
65973: PLUS
65974: ARRAY
65975: ST_TO_ADDR
65976: GO 65979
65978: POP
// temp_list2 = [ ] ;
65979: LD_ADDR_VAR 0 10
65983: PUSH
65984: EMPTY
65985: ST_TO_ADDR
// for i in temp_list do
65986: LD_ADDR_VAR 0 8
65990: PUSH
65991: LD_VAR 0 9
65995: PUSH
65996: FOR_IN
65997: IFFALSE 66049
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65999: LD_ADDR_VAR 0 10
66003: PUSH
66004: LD_VAR 0 10
66008: PUSH
66009: LD_VAR 0 8
66013: PUSH
66014: LD_INT 1
66016: ARRAY
66017: PUSH
66018: LD_VAR 0 2
66022: PLUS
66023: PUSH
66024: LD_VAR 0 8
66028: PUSH
66029: LD_INT 2
66031: ARRAY
66032: PUSH
66033: LD_VAR 0 3
66037: PLUS
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: EMPTY
66044: LIST
66045: ADD
66046: ST_TO_ADDR
66047: GO 65996
66049: POP
66050: POP
// result = temp_list2 ;
66051: LD_ADDR_VAR 0 7
66055: PUSH
66056: LD_VAR 0 10
66060: ST_TO_ADDR
// end ;
66061: LD_VAR 0 7
66065: RET
// export function EnemyInRange ( unit , dist ) ; begin
66066: LD_INT 0
66068: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66069: LD_ADDR_VAR 0 3
66073: PUSH
66074: LD_VAR 0 1
66078: PPUSH
66079: CALL_OW 255
66083: PPUSH
66084: LD_VAR 0 1
66088: PPUSH
66089: CALL_OW 250
66093: PPUSH
66094: LD_VAR 0 1
66098: PPUSH
66099: CALL_OW 251
66103: PPUSH
66104: LD_VAR 0 2
66108: PPUSH
66109: CALL 39462 0 4
66113: PUSH
66114: LD_INT 4
66116: ARRAY
66117: ST_TO_ADDR
// end ;
66118: LD_VAR 0 3
66122: RET
// export function PlayerSeeMe ( unit ) ; begin
66123: LD_INT 0
66125: PPUSH
// result := See ( your_side , unit ) ;
66126: LD_ADDR_VAR 0 2
66130: PUSH
66131: LD_OWVAR 2
66135: PPUSH
66136: LD_VAR 0 1
66140: PPUSH
66141: CALL_OW 292
66145: ST_TO_ADDR
// end ;
66146: LD_VAR 0 2
66150: RET
// export function ReverseDir ( unit ) ; begin
66151: LD_INT 0
66153: PPUSH
// if not unit then
66154: LD_VAR 0 1
66158: NOT
66159: IFFALSE 66163
// exit ;
66161: GO 66186
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66163: LD_ADDR_VAR 0 2
66167: PUSH
66168: LD_VAR 0 1
66172: PPUSH
66173: CALL_OW 254
66177: PUSH
66178: LD_INT 3
66180: PLUS
66181: PUSH
66182: LD_INT 6
66184: MOD
66185: ST_TO_ADDR
// end ;
66186: LD_VAR 0 2
66190: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
66191: LD_INT 0
66193: PPUSH
66194: PPUSH
66195: PPUSH
66196: PPUSH
66197: PPUSH
// if not hexes then
66198: LD_VAR 0 2
66202: NOT
66203: IFFALSE 66207
// exit ;
66205: GO 66355
// dist := 9999 ;
66207: LD_ADDR_VAR 0 5
66211: PUSH
66212: LD_INT 9999
66214: ST_TO_ADDR
// for i = 1 to hexes do
66215: LD_ADDR_VAR 0 4
66219: PUSH
66220: DOUBLE
66221: LD_INT 1
66223: DEC
66224: ST_TO_ADDR
66225: LD_VAR 0 2
66229: PUSH
66230: FOR_TO
66231: IFFALSE 66343
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
66233: LD_VAR 0 1
66237: PPUSH
66238: LD_VAR 0 2
66242: PUSH
66243: LD_VAR 0 4
66247: ARRAY
66248: PUSH
66249: LD_INT 1
66251: ARRAY
66252: PPUSH
66253: LD_VAR 0 2
66257: PUSH
66258: LD_VAR 0 4
66262: ARRAY
66263: PUSH
66264: LD_INT 2
66266: ARRAY
66267: PPUSH
66268: CALL_OW 297
66272: PUSH
66273: LD_VAR 0 5
66277: LESS
66278: IFFALSE 66341
// begin hex := hexes [ i ] ;
66280: LD_ADDR_VAR 0 7
66284: PUSH
66285: LD_VAR 0 2
66289: PUSH
66290: LD_VAR 0 4
66294: ARRAY
66295: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66296: LD_ADDR_VAR 0 5
66300: PUSH
66301: LD_VAR 0 1
66305: PPUSH
66306: LD_VAR 0 2
66310: PUSH
66311: LD_VAR 0 4
66315: ARRAY
66316: PUSH
66317: LD_INT 1
66319: ARRAY
66320: PPUSH
66321: LD_VAR 0 2
66325: PUSH
66326: LD_VAR 0 4
66330: ARRAY
66331: PUSH
66332: LD_INT 2
66334: ARRAY
66335: PPUSH
66336: CALL_OW 297
66340: ST_TO_ADDR
// end ; end ;
66341: GO 66230
66343: POP
66344: POP
// result := hex ;
66345: LD_ADDR_VAR 0 3
66349: PUSH
66350: LD_VAR 0 7
66354: ST_TO_ADDR
// end ;
66355: LD_VAR 0 3
66359: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66360: LD_INT 0
66362: PPUSH
66363: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66364: LD_VAR 0 1
66368: NOT
66369: PUSH
66370: LD_VAR 0 1
66374: PUSH
66375: LD_INT 21
66377: PUSH
66378: LD_INT 2
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 23
66387: PUSH
66388: LD_INT 2
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PPUSH
66399: CALL_OW 69
66403: IN
66404: NOT
66405: OR
66406: IFFALSE 66410
// exit ;
66408: GO 66457
// for i = 1 to 3 do
66410: LD_ADDR_VAR 0 3
66414: PUSH
66415: DOUBLE
66416: LD_INT 1
66418: DEC
66419: ST_TO_ADDR
66420: LD_INT 3
66422: PUSH
66423: FOR_TO
66424: IFFALSE 66455
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66426: LD_VAR 0 1
66430: PPUSH
66431: CALL_OW 250
66435: PPUSH
66436: LD_VAR 0 1
66440: PPUSH
66441: CALL_OW 251
66445: PPUSH
66446: LD_INT 1
66448: PPUSH
66449: CALL_OW 453
66453: GO 66423
66455: POP
66456: POP
// end ;
66457: LD_VAR 0 2
66461: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
66462: LD_INT 0
66464: PPUSH
66465: PPUSH
66466: PPUSH
66467: PPUSH
66468: PPUSH
66469: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
66470: LD_VAR 0 1
66474: NOT
66475: PUSH
66476: LD_VAR 0 2
66480: NOT
66481: OR
66482: PUSH
66483: LD_VAR 0 1
66487: PPUSH
66488: CALL_OW 314
66492: OR
66493: IFFALSE 66497
// exit ;
66495: GO 66938
// x := GetX ( enemy_unit ) ;
66497: LD_ADDR_VAR 0 7
66501: PUSH
66502: LD_VAR 0 2
66506: PPUSH
66507: CALL_OW 250
66511: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66512: LD_ADDR_VAR 0 8
66516: PUSH
66517: LD_VAR 0 2
66521: PPUSH
66522: CALL_OW 251
66526: ST_TO_ADDR
// if not x or not y then
66527: LD_VAR 0 7
66531: NOT
66532: PUSH
66533: LD_VAR 0 8
66537: NOT
66538: OR
66539: IFFALSE 66543
// exit ;
66541: GO 66938
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66543: LD_ADDR_VAR 0 6
66547: PUSH
66548: LD_VAR 0 7
66552: PPUSH
66553: LD_INT 0
66555: PPUSH
66556: LD_INT 4
66558: PPUSH
66559: CALL_OW 272
66563: PUSH
66564: LD_VAR 0 8
66568: PPUSH
66569: LD_INT 0
66571: PPUSH
66572: LD_INT 4
66574: PPUSH
66575: CALL_OW 273
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_VAR 0 7
66588: PPUSH
66589: LD_INT 1
66591: PPUSH
66592: LD_INT 4
66594: PPUSH
66595: CALL_OW 272
66599: PUSH
66600: LD_VAR 0 8
66604: PPUSH
66605: LD_INT 1
66607: PPUSH
66608: LD_INT 4
66610: PPUSH
66611: CALL_OW 273
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_VAR 0 7
66624: PPUSH
66625: LD_INT 2
66627: PPUSH
66628: LD_INT 4
66630: PPUSH
66631: CALL_OW 272
66635: PUSH
66636: LD_VAR 0 8
66640: PPUSH
66641: LD_INT 2
66643: PPUSH
66644: LD_INT 4
66646: PPUSH
66647: CALL_OW 273
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_VAR 0 7
66660: PPUSH
66661: LD_INT 3
66663: PPUSH
66664: LD_INT 4
66666: PPUSH
66667: CALL_OW 272
66671: PUSH
66672: LD_VAR 0 8
66676: PPUSH
66677: LD_INT 3
66679: PPUSH
66680: LD_INT 4
66682: PPUSH
66683: CALL_OW 273
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: PUSH
66692: LD_VAR 0 7
66696: PPUSH
66697: LD_INT 4
66699: PPUSH
66700: LD_INT 4
66702: PPUSH
66703: CALL_OW 272
66707: PUSH
66708: LD_VAR 0 8
66712: PPUSH
66713: LD_INT 4
66715: PPUSH
66716: LD_INT 4
66718: PPUSH
66719: CALL_OW 273
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PUSH
66728: LD_VAR 0 7
66732: PPUSH
66733: LD_INT 5
66735: PPUSH
66736: LD_INT 4
66738: PPUSH
66739: CALL_OW 272
66743: PUSH
66744: LD_VAR 0 8
66748: PPUSH
66749: LD_INT 5
66751: PPUSH
66752: LD_INT 4
66754: PPUSH
66755: CALL_OW 273
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: ST_TO_ADDR
// for i = tmp downto 1 do
66772: LD_ADDR_VAR 0 4
66776: PUSH
66777: DOUBLE
66778: LD_VAR 0 6
66782: INC
66783: ST_TO_ADDR
66784: LD_INT 1
66786: PUSH
66787: FOR_DOWNTO
66788: IFFALSE 66889
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66790: LD_VAR 0 6
66794: PUSH
66795: LD_VAR 0 4
66799: ARRAY
66800: PUSH
66801: LD_INT 1
66803: ARRAY
66804: PPUSH
66805: LD_VAR 0 6
66809: PUSH
66810: LD_VAR 0 4
66814: ARRAY
66815: PUSH
66816: LD_INT 2
66818: ARRAY
66819: PPUSH
66820: CALL_OW 488
66824: NOT
66825: PUSH
66826: LD_VAR 0 6
66830: PUSH
66831: LD_VAR 0 4
66835: ARRAY
66836: PUSH
66837: LD_INT 1
66839: ARRAY
66840: PPUSH
66841: LD_VAR 0 6
66845: PUSH
66846: LD_VAR 0 4
66850: ARRAY
66851: PUSH
66852: LD_INT 2
66854: ARRAY
66855: PPUSH
66856: CALL_OW 428
66860: PUSH
66861: LD_INT 0
66863: NONEQUAL
66864: OR
66865: IFFALSE 66887
// tmp := Delete ( tmp , i ) ;
66867: LD_ADDR_VAR 0 6
66871: PUSH
66872: LD_VAR 0 6
66876: PPUSH
66877: LD_VAR 0 4
66881: PPUSH
66882: CALL_OW 3
66886: ST_TO_ADDR
66887: GO 66787
66889: POP
66890: POP
// j := GetClosestHex ( unit , tmp ) ;
66891: LD_ADDR_VAR 0 5
66895: PUSH
66896: LD_VAR 0 1
66900: PPUSH
66901: LD_VAR 0 6
66905: PPUSH
66906: CALL 66191 0 2
66910: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66911: LD_VAR 0 1
66915: PPUSH
66916: LD_VAR 0 5
66920: PUSH
66921: LD_INT 1
66923: ARRAY
66924: PPUSH
66925: LD_VAR 0 5
66929: PUSH
66930: LD_INT 2
66932: ARRAY
66933: PPUSH
66934: CALL_OW 111
// end ;
66938: LD_VAR 0 3
66942: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66943: LD_INT 0
66945: PPUSH
66946: PPUSH
66947: PPUSH
// uc_side = 0 ;
66948: LD_ADDR_OWVAR 20
66952: PUSH
66953: LD_INT 0
66955: ST_TO_ADDR
// uc_nation = 0 ;
66956: LD_ADDR_OWVAR 21
66960: PUSH
66961: LD_INT 0
66963: ST_TO_ADDR
// InitHc_All ( ) ;
66964: CALL_OW 584
// InitVc ;
66968: CALL_OW 20
// if mastodonts then
66972: LD_VAR 0 6
66976: IFFALSE 67043
// for i = 1 to mastodonts do
66978: LD_ADDR_VAR 0 11
66982: PUSH
66983: DOUBLE
66984: LD_INT 1
66986: DEC
66987: ST_TO_ADDR
66988: LD_VAR 0 6
66992: PUSH
66993: FOR_TO
66994: IFFALSE 67041
// begin vc_chassis := 31 ;
66996: LD_ADDR_OWVAR 37
67000: PUSH
67001: LD_INT 31
67003: ST_TO_ADDR
// vc_control := control_rider ;
67004: LD_ADDR_OWVAR 38
67008: PUSH
67009: LD_INT 4
67011: ST_TO_ADDR
// animal := CreateVehicle ;
67012: LD_ADDR_VAR 0 12
67016: PUSH
67017: CALL_OW 45
67021: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67022: LD_VAR 0 12
67026: PPUSH
67027: LD_VAR 0 8
67031: PPUSH
67032: LD_INT 0
67034: PPUSH
67035: CALL 69231 0 3
// end ;
67039: GO 66993
67041: POP
67042: POP
// if horses then
67043: LD_VAR 0 5
67047: IFFALSE 67114
// for i = 1 to horses do
67049: LD_ADDR_VAR 0 11
67053: PUSH
67054: DOUBLE
67055: LD_INT 1
67057: DEC
67058: ST_TO_ADDR
67059: LD_VAR 0 5
67063: PUSH
67064: FOR_TO
67065: IFFALSE 67112
// begin hc_class := 21 ;
67067: LD_ADDR_OWVAR 28
67071: PUSH
67072: LD_INT 21
67074: ST_TO_ADDR
// hc_gallery :=  ;
67075: LD_ADDR_OWVAR 33
67079: PUSH
67080: LD_STRING 
67082: ST_TO_ADDR
// animal := CreateHuman ;
67083: LD_ADDR_VAR 0 12
67087: PUSH
67088: CALL_OW 44
67092: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67093: LD_VAR 0 12
67097: PPUSH
67098: LD_VAR 0 8
67102: PPUSH
67103: LD_INT 0
67105: PPUSH
67106: CALL 69231 0 3
// end ;
67110: GO 67064
67112: POP
67113: POP
// if birds then
67114: LD_VAR 0 1
67118: IFFALSE 67185
// for i = 1 to birds do
67120: LD_ADDR_VAR 0 11
67124: PUSH
67125: DOUBLE
67126: LD_INT 1
67128: DEC
67129: ST_TO_ADDR
67130: LD_VAR 0 1
67134: PUSH
67135: FOR_TO
67136: IFFALSE 67183
// begin hc_class = 18 ;
67138: LD_ADDR_OWVAR 28
67142: PUSH
67143: LD_INT 18
67145: ST_TO_ADDR
// hc_gallery =  ;
67146: LD_ADDR_OWVAR 33
67150: PUSH
67151: LD_STRING 
67153: ST_TO_ADDR
// animal := CreateHuman ;
67154: LD_ADDR_VAR 0 12
67158: PUSH
67159: CALL_OW 44
67163: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67164: LD_VAR 0 12
67168: PPUSH
67169: LD_VAR 0 8
67173: PPUSH
67174: LD_INT 0
67176: PPUSH
67177: CALL 69231 0 3
// end ;
67181: GO 67135
67183: POP
67184: POP
// if tigers then
67185: LD_VAR 0 2
67189: IFFALSE 67273
// for i = 1 to tigers do
67191: LD_ADDR_VAR 0 11
67195: PUSH
67196: DOUBLE
67197: LD_INT 1
67199: DEC
67200: ST_TO_ADDR
67201: LD_VAR 0 2
67205: PUSH
67206: FOR_TO
67207: IFFALSE 67271
// begin hc_class = class_tiger ;
67209: LD_ADDR_OWVAR 28
67213: PUSH
67214: LD_INT 14
67216: ST_TO_ADDR
// hc_gallery =  ;
67217: LD_ADDR_OWVAR 33
67221: PUSH
67222: LD_STRING 
67224: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67225: LD_ADDR_OWVAR 35
67229: PUSH
67230: LD_INT 7
67232: NEG
67233: PPUSH
67234: LD_INT 7
67236: PPUSH
67237: CALL_OW 12
67241: ST_TO_ADDR
// animal := CreateHuman ;
67242: LD_ADDR_VAR 0 12
67246: PUSH
67247: CALL_OW 44
67251: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67252: LD_VAR 0 12
67256: PPUSH
67257: LD_VAR 0 8
67261: PPUSH
67262: LD_INT 0
67264: PPUSH
67265: CALL 69231 0 3
// end ;
67269: GO 67206
67271: POP
67272: POP
// if apemans then
67273: LD_VAR 0 3
67277: IFFALSE 67400
// for i = 1 to apemans do
67279: LD_ADDR_VAR 0 11
67283: PUSH
67284: DOUBLE
67285: LD_INT 1
67287: DEC
67288: ST_TO_ADDR
67289: LD_VAR 0 3
67293: PUSH
67294: FOR_TO
67295: IFFALSE 67398
// begin hc_class = class_apeman ;
67297: LD_ADDR_OWVAR 28
67301: PUSH
67302: LD_INT 12
67304: ST_TO_ADDR
// hc_gallery =  ;
67305: LD_ADDR_OWVAR 33
67309: PUSH
67310: LD_STRING 
67312: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67313: LD_ADDR_OWVAR 35
67317: PUSH
67318: LD_INT 2
67320: NEG
67321: PPUSH
67322: LD_INT 2
67324: PPUSH
67325: CALL_OW 12
67329: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67330: LD_ADDR_OWVAR 31
67334: PUSH
67335: LD_INT 1
67337: PPUSH
67338: LD_INT 3
67340: PPUSH
67341: CALL_OW 12
67345: PUSH
67346: LD_INT 1
67348: PPUSH
67349: LD_INT 3
67351: PPUSH
67352: CALL_OW 12
67356: PUSH
67357: LD_INT 0
67359: PUSH
67360: LD_INT 0
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: LIST
67367: LIST
67368: ST_TO_ADDR
// animal := CreateHuman ;
67369: LD_ADDR_VAR 0 12
67373: PUSH
67374: CALL_OW 44
67378: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67379: LD_VAR 0 12
67383: PPUSH
67384: LD_VAR 0 8
67388: PPUSH
67389: LD_INT 0
67391: PPUSH
67392: CALL 69231 0 3
// end ;
67396: GO 67294
67398: POP
67399: POP
// if enchidnas then
67400: LD_VAR 0 4
67404: IFFALSE 67471
// for i = 1 to enchidnas do
67406: LD_ADDR_VAR 0 11
67410: PUSH
67411: DOUBLE
67412: LD_INT 1
67414: DEC
67415: ST_TO_ADDR
67416: LD_VAR 0 4
67420: PUSH
67421: FOR_TO
67422: IFFALSE 67469
// begin hc_class = 13 ;
67424: LD_ADDR_OWVAR 28
67428: PUSH
67429: LD_INT 13
67431: ST_TO_ADDR
// hc_gallery =  ;
67432: LD_ADDR_OWVAR 33
67436: PUSH
67437: LD_STRING 
67439: ST_TO_ADDR
// animal := CreateHuman ;
67440: LD_ADDR_VAR 0 12
67444: PUSH
67445: CALL_OW 44
67449: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67450: LD_VAR 0 12
67454: PPUSH
67455: LD_VAR 0 8
67459: PPUSH
67460: LD_INT 0
67462: PPUSH
67463: CALL 69231 0 3
// end ;
67467: GO 67421
67469: POP
67470: POP
// if fishes then
67471: LD_VAR 0 7
67475: IFFALSE 67542
// for i = 1 to fishes do
67477: LD_ADDR_VAR 0 11
67481: PUSH
67482: DOUBLE
67483: LD_INT 1
67485: DEC
67486: ST_TO_ADDR
67487: LD_VAR 0 7
67491: PUSH
67492: FOR_TO
67493: IFFALSE 67540
// begin hc_class = 20 ;
67495: LD_ADDR_OWVAR 28
67499: PUSH
67500: LD_INT 20
67502: ST_TO_ADDR
// hc_gallery =  ;
67503: LD_ADDR_OWVAR 33
67507: PUSH
67508: LD_STRING 
67510: ST_TO_ADDR
// animal := CreateHuman ;
67511: LD_ADDR_VAR 0 12
67515: PUSH
67516: CALL_OW 44
67520: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67521: LD_VAR 0 12
67525: PPUSH
67526: LD_VAR 0 9
67530: PPUSH
67531: LD_INT 0
67533: PPUSH
67534: CALL 69231 0 3
// end ;
67538: GO 67492
67540: POP
67541: POP
// end ;
67542: LD_VAR 0 10
67546: RET
// export function WantHeal ( sci , unit ) ; begin
67547: LD_INT 0
67549: PPUSH
// if GetTaskList ( sci ) > 0 then
67550: LD_VAR 0 1
67554: PPUSH
67555: CALL_OW 437
67559: PUSH
67560: LD_INT 0
67562: GREATER
67563: IFFALSE 67633
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67565: LD_VAR 0 1
67569: PPUSH
67570: CALL_OW 437
67574: PUSH
67575: LD_INT 1
67577: ARRAY
67578: PUSH
67579: LD_INT 1
67581: ARRAY
67582: PUSH
67583: LD_STRING l
67585: EQUAL
67586: PUSH
67587: LD_VAR 0 1
67591: PPUSH
67592: CALL_OW 437
67596: PUSH
67597: LD_INT 1
67599: ARRAY
67600: PUSH
67601: LD_INT 4
67603: ARRAY
67604: PUSH
67605: LD_VAR 0 2
67609: EQUAL
67610: AND
67611: IFFALSE 67623
// result := true else
67613: LD_ADDR_VAR 0 3
67617: PUSH
67618: LD_INT 1
67620: ST_TO_ADDR
67621: GO 67631
// result := false ;
67623: LD_ADDR_VAR 0 3
67627: PUSH
67628: LD_INT 0
67630: ST_TO_ADDR
// end else
67631: GO 67641
// result := false ;
67633: LD_ADDR_VAR 0 3
67637: PUSH
67638: LD_INT 0
67640: ST_TO_ADDR
// end ;
67641: LD_VAR 0 3
67645: RET
// export function HealTarget ( sci ) ; begin
67646: LD_INT 0
67648: PPUSH
// if not sci then
67649: LD_VAR 0 1
67653: NOT
67654: IFFALSE 67658
// exit ;
67656: GO 67723
// result := 0 ;
67658: LD_ADDR_VAR 0 2
67662: PUSH
67663: LD_INT 0
67665: ST_TO_ADDR
// if GetTaskList ( sci ) then
67666: LD_VAR 0 1
67670: PPUSH
67671: CALL_OW 437
67675: IFFALSE 67723
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67677: LD_VAR 0 1
67681: PPUSH
67682: CALL_OW 437
67686: PUSH
67687: LD_INT 1
67689: ARRAY
67690: PUSH
67691: LD_INT 1
67693: ARRAY
67694: PUSH
67695: LD_STRING l
67697: EQUAL
67698: IFFALSE 67723
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67700: LD_ADDR_VAR 0 2
67704: PUSH
67705: LD_VAR 0 1
67709: PPUSH
67710: CALL_OW 437
67714: PUSH
67715: LD_INT 1
67717: ARRAY
67718: PUSH
67719: LD_INT 4
67721: ARRAY
67722: ST_TO_ADDR
// end ;
67723: LD_VAR 0 2
67727: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67728: LD_INT 0
67730: PPUSH
67731: PPUSH
67732: PPUSH
67733: PPUSH
// if not base_units then
67734: LD_VAR 0 1
67738: NOT
67739: IFFALSE 67743
// exit ;
67741: GO 67830
// result := false ;
67743: LD_ADDR_VAR 0 2
67747: PUSH
67748: LD_INT 0
67750: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67751: LD_ADDR_VAR 0 5
67755: PUSH
67756: LD_VAR 0 1
67760: PPUSH
67761: LD_INT 21
67763: PUSH
67764: LD_INT 3
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PPUSH
67771: CALL_OW 72
67775: ST_TO_ADDR
// if not tmp then
67776: LD_VAR 0 5
67780: NOT
67781: IFFALSE 67785
// exit ;
67783: GO 67830
// for i in tmp do
67785: LD_ADDR_VAR 0 3
67789: PUSH
67790: LD_VAR 0 5
67794: PUSH
67795: FOR_IN
67796: IFFALSE 67828
// begin result := EnemyInRange ( i , 22 ) ;
67798: LD_ADDR_VAR 0 2
67802: PUSH
67803: LD_VAR 0 3
67807: PPUSH
67808: LD_INT 22
67810: PPUSH
67811: CALL 66066 0 2
67815: ST_TO_ADDR
// if result then
67816: LD_VAR 0 2
67820: IFFALSE 67826
// exit ;
67822: POP
67823: POP
67824: GO 67830
// end ;
67826: GO 67795
67828: POP
67829: POP
// end ;
67830: LD_VAR 0 2
67834: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
67835: LD_INT 0
67837: PPUSH
67838: PPUSH
// if not units then
67839: LD_VAR 0 1
67843: NOT
67844: IFFALSE 67848
// exit ;
67846: GO 67918
// result := [ ] ;
67848: LD_ADDR_VAR 0 3
67852: PUSH
67853: EMPTY
67854: ST_TO_ADDR
// for i in units do
67855: LD_ADDR_VAR 0 4
67859: PUSH
67860: LD_VAR 0 1
67864: PUSH
67865: FOR_IN
67866: IFFALSE 67916
// if GetTag ( i ) = tag then
67868: LD_VAR 0 4
67872: PPUSH
67873: CALL_OW 110
67877: PUSH
67878: LD_VAR 0 2
67882: EQUAL
67883: IFFALSE 67914
// result := Insert ( result , result + 1 , i ) ;
67885: LD_ADDR_VAR 0 3
67889: PUSH
67890: LD_VAR 0 3
67894: PPUSH
67895: LD_VAR 0 3
67899: PUSH
67900: LD_INT 1
67902: PLUS
67903: PPUSH
67904: LD_VAR 0 4
67908: PPUSH
67909: CALL_OW 2
67913: ST_TO_ADDR
67914: GO 67865
67916: POP
67917: POP
// end ;
67918: LD_VAR 0 3
67922: RET
// export function IsDriver ( un ) ; begin
67923: LD_INT 0
67925: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67926: LD_ADDR_VAR 0 2
67930: PUSH
67931: LD_VAR 0 1
67935: PUSH
67936: LD_INT 55
67938: PUSH
67939: EMPTY
67940: LIST
67941: PPUSH
67942: CALL_OW 69
67946: IN
67947: ST_TO_ADDR
// end ;
67948: LD_VAR 0 2
67952: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67953: LD_INT 0
67955: PPUSH
67956: PPUSH
// list := [ ] ;
67957: LD_ADDR_VAR 0 5
67961: PUSH
67962: EMPTY
67963: ST_TO_ADDR
// case d of 0 :
67964: LD_VAR 0 3
67968: PUSH
67969: LD_INT 0
67971: DOUBLE
67972: EQUAL
67973: IFTRUE 67977
67975: GO 68110
67977: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67978: LD_ADDR_VAR 0 5
67982: PUSH
67983: LD_VAR 0 1
67987: PUSH
67988: LD_INT 4
67990: MINUS
67991: PUSH
67992: LD_VAR 0 2
67996: PUSH
67997: LD_INT 4
67999: MINUS
68000: PUSH
68001: LD_INT 2
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: LIST
68008: PUSH
68009: LD_VAR 0 1
68013: PUSH
68014: LD_INT 3
68016: MINUS
68017: PUSH
68018: LD_VAR 0 2
68022: PUSH
68023: LD_INT 1
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: LIST
68030: PUSH
68031: LD_VAR 0 1
68035: PUSH
68036: LD_INT 4
68038: PLUS
68039: PUSH
68040: LD_VAR 0 2
68044: PUSH
68045: LD_INT 4
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: LIST
68052: PUSH
68053: LD_VAR 0 1
68057: PUSH
68058: LD_INT 3
68060: PLUS
68061: PUSH
68062: LD_VAR 0 2
68066: PUSH
68067: LD_INT 3
68069: PLUS
68070: PUSH
68071: LD_INT 5
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: LIST
68078: PUSH
68079: LD_VAR 0 1
68083: PUSH
68084: LD_VAR 0 2
68088: PUSH
68089: LD_INT 4
68091: PLUS
68092: PUSH
68093: LD_INT 0
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: LIST
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: ST_TO_ADDR
// end ; 1 :
68108: GO 68808
68110: LD_INT 1
68112: DOUBLE
68113: EQUAL
68114: IFTRUE 68118
68116: GO 68251
68118: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68119: LD_ADDR_VAR 0 5
68123: PUSH
68124: LD_VAR 0 1
68128: PUSH
68129: LD_VAR 0 2
68133: PUSH
68134: LD_INT 4
68136: MINUS
68137: PUSH
68138: LD_INT 3
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: LIST
68145: PUSH
68146: LD_VAR 0 1
68150: PUSH
68151: LD_INT 3
68153: MINUS
68154: PUSH
68155: LD_VAR 0 2
68159: PUSH
68160: LD_INT 3
68162: MINUS
68163: PUSH
68164: LD_INT 2
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: LIST
68171: PUSH
68172: LD_VAR 0 1
68176: PUSH
68177: LD_INT 4
68179: MINUS
68180: PUSH
68181: LD_VAR 0 2
68185: PUSH
68186: LD_INT 1
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: LIST
68193: PUSH
68194: LD_VAR 0 1
68198: PUSH
68199: LD_VAR 0 2
68203: PUSH
68204: LD_INT 3
68206: PLUS
68207: PUSH
68208: LD_INT 0
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: LIST
68215: PUSH
68216: LD_VAR 0 1
68220: PUSH
68221: LD_INT 4
68223: PLUS
68224: PUSH
68225: LD_VAR 0 2
68229: PUSH
68230: LD_INT 4
68232: PLUS
68233: PUSH
68234: LD_INT 5
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: LIST
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: LIST
68248: ST_TO_ADDR
// end ; 2 :
68249: GO 68808
68251: LD_INT 2
68253: DOUBLE
68254: EQUAL
68255: IFTRUE 68259
68257: GO 68388
68259: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68260: LD_ADDR_VAR 0 5
68264: PUSH
68265: LD_VAR 0 1
68269: PUSH
68270: LD_VAR 0 2
68274: PUSH
68275: LD_INT 3
68277: MINUS
68278: PUSH
68279: LD_INT 3
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: LIST
68286: PUSH
68287: LD_VAR 0 1
68291: PUSH
68292: LD_INT 4
68294: PLUS
68295: PUSH
68296: LD_VAR 0 2
68300: PUSH
68301: LD_INT 4
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: LIST
68308: PUSH
68309: LD_VAR 0 1
68313: PUSH
68314: LD_VAR 0 2
68318: PUSH
68319: LD_INT 4
68321: PLUS
68322: PUSH
68323: LD_INT 0
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: LIST
68330: PUSH
68331: LD_VAR 0 1
68335: PUSH
68336: LD_INT 3
68338: MINUS
68339: PUSH
68340: LD_VAR 0 2
68344: PUSH
68345: LD_INT 1
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: LIST
68352: PUSH
68353: LD_VAR 0 1
68357: PUSH
68358: LD_INT 4
68360: MINUS
68361: PUSH
68362: LD_VAR 0 2
68366: PUSH
68367: LD_INT 4
68369: MINUS
68370: PUSH
68371: LD_INT 2
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: LIST
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: ST_TO_ADDR
// end ; 3 :
68386: GO 68808
68388: LD_INT 3
68390: DOUBLE
68391: EQUAL
68392: IFTRUE 68396
68394: GO 68529
68396: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68397: LD_ADDR_VAR 0 5
68401: PUSH
68402: LD_VAR 0 1
68406: PUSH
68407: LD_INT 3
68409: PLUS
68410: PUSH
68411: LD_VAR 0 2
68415: PUSH
68416: LD_INT 4
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: LIST
68423: PUSH
68424: LD_VAR 0 1
68428: PUSH
68429: LD_INT 4
68431: PLUS
68432: PUSH
68433: LD_VAR 0 2
68437: PUSH
68438: LD_INT 4
68440: PLUS
68441: PUSH
68442: LD_INT 5
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: LIST
68449: PUSH
68450: LD_VAR 0 1
68454: PUSH
68455: LD_INT 4
68457: MINUS
68458: PUSH
68459: LD_VAR 0 2
68463: PUSH
68464: LD_INT 1
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: LIST
68471: PUSH
68472: LD_VAR 0 1
68476: PUSH
68477: LD_VAR 0 2
68481: PUSH
68482: LD_INT 4
68484: MINUS
68485: PUSH
68486: LD_INT 3
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: LIST
68493: PUSH
68494: LD_VAR 0 1
68498: PUSH
68499: LD_INT 3
68501: MINUS
68502: PUSH
68503: LD_VAR 0 2
68507: PUSH
68508: LD_INT 3
68510: MINUS
68511: PUSH
68512: LD_INT 2
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: LIST
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: ST_TO_ADDR
// end ; 4 :
68527: GO 68808
68529: LD_INT 4
68531: DOUBLE
68532: EQUAL
68533: IFTRUE 68537
68535: GO 68670
68537: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68538: LD_ADDR_VAR 0 5
68542: PUSH
68543: LD_VAR 0 1
68547: PUSH
68548: LD_VAR 0 2
68552: PUSH
68553: LD_INT 4
68555: PLUS
68556: PUSH
68557: LD_INT 0
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: LIST
68564: PUSH
68565: LD_VAR 0 1
68569: PUSH
68570: LD_INT 3
68572: PLUS
68573: PUSH
68574: LD_VAR 0 2
68578: PUSH
68579: LD_INT 3
68581: PLUS
68582: PUSH
68583: LD_INT 5
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: LIST
68590: PUSH
68591: LD_VAR 0 1
68595: PUSH
68596: LD_INT 4
68598: PLUS
68599: PUSH
68600: LD_VAR 0 2
68604: PUSH
68605: LD_INT 4
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: LIST
68612: PUSH
68613: LD_VAR 0 1
68617: PUSH
68618: LD_VAR 0 2
68622: PUSH
68623: LD_INT 3
68625: MINUS
68626: PUSH
68627: LD_INT 3
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: LIST
68634: PUSH
68635: LD_VAR 0 1
68639: PUSH
68640: LD_INT 4
68642: MINUS
68643: PUSH
68644: LD_VAR 0 2
68648: PUSH
68649: LD_INT 4
68651: MINUS
68652: PUSH
68653: LD_INT 2
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: LIST
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: LIST
68665: LIST
68666: LIST
68667: ST_TO_ADDR
// end ; 5 :
68668: GO 68808
68670: LD_INT 5
68672: DOUBLE
68673: EQUAL
68674: IFTRUE 68678
68676: GO 68807
68678: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68679: LD_ADDR_VAR 0 5
68683: PUSH
68684: LD_VAR 0 1
68688: PUSH
68689: LD_INT 4
68691: MINUS
68692: PUSH
68693: LD_VAR 0 2
68697: PUSH
68698: LD_INT 1
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: LIST
68705: PUSH
68706: LD_VAR 0 1
68710: PUSH
68711: LD_VAR 0 2
68715: PUSH
68716: LD_INT 4
68718: MINUS
68719: PUSH
68720: LD_INT 3
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: LIST
68727: PUSH
68728: LD_VAR 0 1
68732: PUSH
68733: LD_INT 4
68735: PLUS
68736: PUSH
68737: LD_VAR 0 2
68741: PUSH
68742: LD_INT 4
68744: PLUS
68745: PUSH
68746: LD_INT 5
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: LIST
68753: PUSH
68754: LD_VAR 0 1
68758: PUSH
68759: LD_INT 3
68761: PLUS
68762: PUSH
68763: LD_VAR 0 2
68767: PUSH
68768: LD_INT 4
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: LIST
68775: PUSH
68776: LD_VAR 0 1
68780: PUSH
68781: LD_VAR 0 2
68785: PUSH
68786: LD_INT 3
68788: PLUS
68789: PUSH
68790: LD_INT 0
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: LIST
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: ST_TO_ADDR
// end ; end ;
68805: GO 68808
68807: POP
// result := list ;
68808: LD_ADDR_VAR 0 4
68812: PUSH
68813: LD_VAR 0 5
68817: ST_TO_ADDR
// end ;
68818: LD_VAR 0 4
68822: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68823: LD_INT 0
68825: PPUSH
68826: PPUSH
68827: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68828: LD_VAR 0 1
68832: NOT
68833: PUSH
68834: LD_VAR 0 2
68838: PUSH
68839: LD_INT 1
68841: PUSH
68842: LD_INT 2
68844: PUSH
68845: LD_INT 3
68847: PUSH
68848: LD_INT 4
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: LIST
68855: LIST
68856: IN
68857: NOT
68858: OR
68859: IFFALSE 68863
// exit ;
68861: GO 68955
// tmp := [ ] ;
68863: LD_ADDR_VAR 0 5
68867: PUSH
68868: EMPTY
68869: ST_TO_ADDR
// for i in units do
68870: LD_ADDR_VAR 0 4
68874: PUSH
68875: LD_VAR 0 1
68879: PUSH
68880: FOR_IN
68881: IFFALSE 68924
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
68883: LD_ADDR_VAR 0 5
68887: PUSH
68888: LD_VAR 0 5
68892: PPUSH
68893: LD_VAR 0 5
68897: PUSH
68898: LD_INT 1
68900: PLUS
68901: PPUSH
68902: LD_VAR 0 4
68906: PPUSH
68907: LD_VAR 0 2
68911: PPUSH
68912: CALL_OW 259
68916: PPUSH
68917: CALL_OW 2
68921: ST_TO_ADDR
68922: GO 68880
68924: POP
68925: POP
// if not tmp then
68926: LD_VAR 0 5
68930: NOT
68931: IFFALSE 68935
// exit ;
68933: GO 68955
// result := SortListByListDesc ( units , tmp ) ;
68935: LD_ADDR_VAR 0 3
68939: PUSH
68940: LD_VAR 0 1
68944: PPUSH
68945: LD_VAR 0 5
68949: PPUSH
68950: CALL_OW 77
68954: ST_TO_ADDR
// end ;
68955: LD_VAR 0 3
68959: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68960: LD_INT 0
68962: PPUSH
68963: PPUSH
68964: PPUSH
// result := false ;
68965: LD_ADDR_VAR 0 3
68969: PUSH
68970: LD_INT 0
68972: ST_TO_ADDR
// x := GetX ( building ) ;
68973: LD_ADDR_VAR 0 4
68977: PUSH
68978: LD_VAR 0 2
68982: PPUSH
68983: CALL_OW 250
68987: ST_TO_ADDR
// y := GetY ( building ) ;
68988: LD_ADDR_VAR 0 5
68992: PUSH
68993: LD_VAR 0 2
68997: PPUSH
68998: CALL_OW 251
69002: ST_TO_ADDR
// if not building or not x or not y then
69003: LD_VAR 0 2
69007: NOT
69008: PUSH
69009: LD_VAR 0 4
69013: NOT
69014: OR
69015: PUSH
69016: LD_VAR 0 5
69020: NOT
69021: OR
69022: IFFALSE 69026
// exit ;
69024: GO 69118
// if GetTaskList ( unit ) then
69026: LD_VAR 0 1
69030: PPUSH
69031: CALL_OW 437
69035: IFFALSE 69118
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69037: LD_STRING e
69039: PUSH
69040: LD_VAR 0 1
69044: PPUSH
69045: CALL_OW 437
69049: PUSH
69050: LD_INT 1
69052: ARRAY
69053: PUSH
69054: LD_INT 1
69056: ARRAY
69057: EQUAL
69058: PUSH
69059: LD_VAR 0 4
69063: PUSH
69064: LD_VAR 0 1
69068: PPUSH
69069: CALL_OW 437
69073: PUSH
69074: LD_INT 1
69076: ARRAY
69077: PUSH
69078: LD_INT 2
69080: ARRAY
69081: EQUAL
69082: AND
69083: PUSH
69084: LD_VAR 0 5
69088: PUSH
69089: LD_VAR 0 1
69093: PPUSH
69094: CALL_OW 437
69098: PUSH
69099: LD_INT 1
69101: ARRAY
69102: PUSH
69103: LD_INT 3
69105: ARRAY
69106: EQUAL
69107: AND
69108: IFFALSE 69118
// result := true end ;
69110: LD_ADDR_VAR 0 3
69114: PUSH
69115: LD_INT 1
69117: ST_TO_ADDR
// end ;
69118: LD_VAR 0 3
69122: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69123: LD_INT 0
69125: PPUSH
// result := false ;
69126: LD_ADDR_VAR 0 4
69130: PUSH
69131: LD_INT 0
69133: ST_TO_ADDR
// if GetTaskList ( unit ) then
69134: LD_VAR 0 1
69138: PPUSH
69139: CALL_OW 437
69143: IFFALSE 69226
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69145: LD_STRING M
69147: PUSH
69148: LD_VAR 0 1
69152: PPUSH
69153: CALL_OW 437
69157: PUSH
69158: LD_INT 1
69160: ARRAY
69161: PUSH
69162: LD_INT 1
69164: ARRAY
69165: EQUAL
69166: PUSH
69167: LD_VAR 0 2
69171: PUSH
69172: LD_VAR 0 1
69176: PPUSH
69177: CALL_OW 437
69181: PUSH
69182: LD_INT 1
69184: ARRAY
69185: PUSH
69186: LD_INT 2
69188: ARRAY
69189: EQUAL
69190: AND
69191: PUSH
69192: LD_VAR 0 3
69196: PUSH
69197: LD_VAR 0 1
69201: PPUSH
69202: CALL_OW 437
69206: PUSH
69207: LD_INT 1
69209: ARRAY
69210: PUSH
69211: LD_INT 3
69213: ARRAY
69214: EQUAL
69215: AND
69216: IFFALSE 69226
// result := true ;
69218: LD_ADDR_VAR 0 4
69222: PUSH
69223: LD_INT 1
69225: ST_TO_ADDR
// end ; end ;
69226: LD_VAR 0 4
69230: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69231: LD_INT 0
69233: PPUSH
69234: PPUSH
69235: PPUSH
69236: PPUSH
// if not unit or not area then
69237: LD_VAR 0 1
69241: NOT
69242: PUSH
69243: LD_VAR 0 2
69247: NOT
69248: OR
69249: IFFALSE 69253
// exit ;
69251: GO 69417
// tmp := AreaToList ( area , i ) ;
69253: LD_ADDR_VAR 0 6
69257: PUSH
69258: LD_VAR 0 2
69262: PPUSH
69263: LD_VAR 0 5
69267: PPUSH
69268: CALL_OW 517
69272: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69273: LD_ADDR_VAR 0 5
69277: PUSH
69278: DOUBLE
69279: LD_INT 1
69281: DEC
69282: ST_TO_ADDR
69283: LD_VAR 0 6
69287: PUSH
69288: LD_INT 1
69290: ARRAY
69291: PUSH
69292: FOR_TO
69293: IFFALSE 69415
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69295: LD_ADDR_VAR 0 7
69299: PUSH
69300: LD_VAR 0 6
69304: PUSH
69305: LD_INT 1
69307: ARRAY
69308: PUSH
69309: LD_VAR 0 5
69313: ARRAY
69314: PUSH
69315: LD_VAR 0 6
69319: PUSH
69320: LD_INT 2
69322: ARRAY
69323: PUSH
69324: LD_VAR 0 5
69328: ARRAY
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
69334: LD_VAR 0 7
69338: PUSH
69339: LD_INT 1
69341: ARRAY
69342: PPUSH
69343: LD_VAR 0 7
69347: PUSH
69348: LD_INT 2
69350: ARRAY
69351: PPUSH
69352: CALL_OW 428
69356: PUSH
69357: LD_INT 0
69359: EQUAL
69360: IFFALSE 69413
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69362: LD_VAR 0 1
69366: PPUSH
69367: LD_VAR 0 7
69371: PUSH
69372: LD_INT 1
69374: ARRAY
69375: PPUSH
69376: LD_VAR 0 7
69380: PUSH
69381: LD_INT 2
69383: ARRAY
69384: PPUSH
69385: LD_VAR 0 3
69389: PPUSH
69390: CALL_OW 48
// result := IsPlaced ( unit ) ;
69394: LD_ADDR_VAR 0 4
69398: PUSH
69399: LD_VAR 0 1
69403: PPUSH
69404: CALL_OW 305
69408: ST_TO_ADDR
// exit ;
69409: POP
69410: POP
69411: GO 69417
// end ; end ;
69413: GO 69292
69415: POP
69416: POP
// end ;
69417: LD_VAR 0 4
69421: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69422: LD_INT 0
69424: PPUSH
69425: PPUSH
69426: PPUSH
// if not side or side > 8 then
69427: LD_VAR 0 1
69431: NOT
69432: PUSH
69433: LD_VAR 0 1
69437: PUSH
69438: LD_INT 8
69440: GREATER
69441: OR
69442: IFFALSE 69446
// exit ;
69444: GO 69633
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69446: LD_ADDR_VAR 0 4
69450: PUSH
69451: LD_INT 22
69453: PUSH
69454: LD_VAR 0 1
69458: PUSH
69459: EMPTY
69460: LIST
69461: LIST
69462: PUSH
69463: LD_INT 21
69465: PUSH
69466: LD_INT 3
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PPUSH
69477: CALL_OW 69
69481: ST_TO_ADDR
// if not tmp then
69482: LD_VAR 0 4
69486: NOT
69487: IFFALSE 69491
// exit ;
69489: GO 69633
// enable_addtolog := true ;
69491: LD_ADDR_OWVAR 81
69495: PUSH
69496: LD_INT 1
69498: ST_TO_ADDR
// AddToLog ( [ ) ;
69499: LD_STRING [
69501: PPUSH
69502: CALL_OW 561
// for i in tmp do
69506: LD_ADDR_VAR 0 3
69510: PUSH
69511: LD_VAR 0 4
69515: PUSH
69516: FOR_IN
69517: IFFALSE 69624
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69519: LD_STRING [
69521: PUSH
69522: LD_VAR 0 3
69526: PPUSH
69527: CALL_OW 266
69531: STR
69532: PUSH
69533: LD_STRING , 
69535: STR
69536: PUSH
69537: LD_VAR 0 3
69541: PPUSH
69542: CALL_OW 250
69546: STR
69547: PUSH
69548: LD_STRING , 
69550: STR
69551: PUSH
69552: LD_VAR 0 3
69556: PPUSH
69557: CALL_OW 251
69561: STR
69562: PUSH
69563: LD_STRING , 
69565: STR
69566: PUSH
69567: LD_VAR 0 3
69571: PPUSH
69572: CALL_OW 254
69576: STR
69577: PUSH
69578: LD_STRING , 
69580: STR
69581: PUSH
69582: LD_VAR 0 3
69586: PPUSH
69587: LD_INT 1
69589: PPUSH
69590: CALL_OW 268
69594: STR
69595: PUSH
69596: LD_STRING , 
69598: STR
69599: PUSH
69600: LD_VAR 0 3
69604: PPUSH
69605: LD_INT 2
69607: PPUSH
69608: CALL_OW 268
69612: STR
69613: PUSH
69614: LD_STRING ],
69616: STR
69617: PPUSH
69618: CALL_OW 561
// end ;
69622: GO 69516
69624: POP
69625: POP
// AddToLog ( ]; ) ;
69626: LD_STRING ];
69628: PPUSH
69629: CALL_OW 561
// end ;
69633: LD_VAR 0 2
69637: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69638: LD_INT 0
69640: PPUSH
69641: PPUSH
69642: PPUSH
69643: PPUSH
69644: PPUSH
// if not area or not rate or not max then
69645: LD_VAR 0 1
69649: NOT
69650: PUSH
69651: LD_VAR 0 2
69655: NOT
69656: OR
69657: PUSH
69658: LD_VAR 0 4
69662: NOT
69663: OR
69664: IFFALSE 69668
// exit ;
69666: GO 69860
// while 1 do
69668: LD_INT 1
69670: IFFALSE 69860
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69672: LD_ADDR_VAR 0 9
69676: PUSH
69677: LD_VAR 0 1
69681: PPUSH
69682: LD_INT 1
69684: PPUSH
69685: CALL_OW 287
69689: PUSH
69690: LD_INT 10
69692: MUL
69693: ST_TO_ADDR
// r := rate / 10 ;
69694: LD_ADDR_VAR 0 7
69698: PUSH
69699: LD_VAR 0 2
69703: PUSH
69704: LD_INT 10
69706: DIVREAL
69707: ST_TO_ADDR
// time := 1 1$00 ;
69708: LD_ADDR_VAR 0 8
69712: PUSH
69713: LD_INT 2100
69715: ST_TO_ADDR
// if amount < min then
69716: LD_VAR 0 9
69720: PUSH
69721: LD_VAR 0 3
69725: LESS
69726: IFFALSE 69744
// r := r * 2 else
69728: LD_ADDR_VAR 0 7
69732: PUSH
69733: LD_VAR 0 7
69737: PUSH
69738: LD_INT 2
69740: MUL
69741: ST_TO_ADDR
69742: GO 69770
// if amount > max then
69744: LD_VAR 0 9
69748: PUSH
69749: LD_VAR 0 4
69753: GREATER
69754: IFFALSE 69770
// r := r / 2 ;
69756: LD_ADDR_VAR 0 7
69760: PUSH
69761: LD_VAR 0 7
69765: PUSH
69766: LD_INT 2
69768: DIVREAL
69769: ST_TO_ADDR
// time := time / r ;
69770: LD_ADDR_VAR 0 8
69774: PUSH
69775: LD_VAR 0 8
69779: PUSH
69780: LD_VAR 0 7
69784: DIVREAL
69785: ST_TO_ADDR
// if time < 0 then
69786: LD_VAR 0 8
69790: PUSH
69791: LD_INT 0
69793: LESS
69794: IFFALSE 69811
// time := time * - 1 ;
69796: LD_ADDR_VAR 0 8
69800: PUSH
69801: LD_VAR 0 8
69805: PUSH
69806: LD_INT 1
69808: NEG
69809: MUL
69810: ST_TO_ADDR
// wait ( time ) ;
69811: LD_VAR 0 8
69815: PPUSH
69816: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
69820: LD_INT 35
69822: PPUSH
69823: LD_INT 875
69825: PPUSH
69826: CALL_OW 12
69830: PPUSH
69831: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69835: LD_INT 1
69837: PPUSH
69838: LD_INT 5
69840: PPUSH
69841: CALL_OW 12
69845: PPUSH
69846: LD_VAR 0 1
69850: PPUSH
69851: LD_INT 1
69853: PPUSH
69854: CALL_OW 55
// end ;
69858: GO 69668
// end ;
69860: LD_VAR 0 5
69864: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69865: LD_INT 0
69867: PPUSH
69868: PPUSH
69869: PPUSH
69870: PPUSH
69871: PPUSH
69872: PPUSH
69873: PPUSH
69874: PPUSH
// if not turrets or not factories then
69875: LD_VAR 0 1
69879: NOT
69880: PUSH
69881: LD_VAR 0 2
69885: NOT
69886: OR
69887: IFFALSE 69891
// exit ;
69889: GO 70198
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69891: LD_ADDR_VAR 0 10
69895: PUSH
69896: LD_INT 5
69898: PUSH
69899: LD_INT 6
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: PUSH
69906: LD_INT 2
69908: PUSH
69909: LD_INT 4
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: PUSH
69916: LD_INT 3
69918: PUSH
69919: LD_INT 5
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: LIST
69930: PUSH
69931: LD_INT 24
69933: PUSH
69934: LD_INT 25
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: PUSH
69941: LD_INT 23
69943: PUSH
69944: LD_INT 27
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: PUSH
69955: LD_INT 42
69957: PUSH
69958: LD_INT 43
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 44
69967: PUSH
69968: LD_INT 46
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 45
69977: PUSH
69978: LD_INT 47
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: LIST
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: LIST
69994: ST_TO_ADDR
// result := [ ] ;
69995: LD_ADDR_VAR 0 3
69999: PUSH
70000: EMPTY
70001: ST_TO_ADDR
// for i in turrets do
70002: LD_ADDR_VAR 0 4
70006: PUSH
70007: LD_VAR 0 1
70011: PUSH
70012: FOR_IN
70013: IFFALSE 70196
// begin nat := GetNation ( i ) ;
70015: LD_ADDR_VAR 0 7
70019: PUSH
70020: LD_VAR 0 4
70024: PPUSH
70025: CALL_OW 248
70029: ST_TO_ADDR
// weapon := 0 ;
70030: LD_ADDR_VAR 0 8
70034: PUSH
70035: LD_INT 0
70037: ST_TO_ADDR
// if not nat then
70038: LD_VAR 0 7
70042: NOT
70043: IFFALSE 70047
// continue ;
70045: GO 70012
// for j in list [ nat ] do
70047: LD_ADDR_VAR 0 5
70051: PUSH
70052: LD_VAR 0 10
70056: PUSH
70057: LD_VAR 0 7
70061: ARRAY
70062: PUSH
70063: FOR_IN
70064: IFFALSE 70105
// if GetBWeapon ( i ) = j [ 1 ] then
70066: LD_VAR 0 4
70070: PPUSH
70071: CALL_OW 269
70075: PUSH
70076: LD_VAR 0 5
70080: PUSH
70081: LD_INT 1
70083: ARRAY
70084: EQUAL
70085: IFFALSE 70103
// begin weapon := j [ 2 ] ;
70087: LD_ADDR_VAR 0 8
70091: PUSH
70092: LD_VAR 0 5
70096: PUSH
70097: LD_INT 2
70099: ARRAY
70100: ST_TO_ADDR
// break ;
70101: GO 70105
// end ;
70103: GO 70063
70105: POP
70106: POP
// if not weapon then
70107: LD_VAR 0 8
70111: NOT
70112: IFFALSE 70116
// continue ;
70114: GO 70012
// for k in factories do
70116: LD_ADDR_VAR 0 6
70120: PUSH
70121: LD_VAR 0 2
70125: PUSH
70126: FOR_IN
70127: IFFALSE 70192
// begin weapons := AvailableWeaponList ( k ) ;
70129: LD_ADDR_VAR 0 9
70133: PUSH
70134: LD_VAR 0 6
70138: PPUSH
70139: CALL_OW 478
70143: ST_TO_ADDR
// if not weapons then
70144: LD_VAR 0 9
70148: NOT
70149: IFFALSE 70153
// continue ;
70151: GO 70126
// if weapon in weapons then
70153: LD_VAR 0 8
70157: PUSH
70158: LD_VAR 0 9
70162: IN
70163: IFFALSE 70190
// begin result := [ i , weapon ] ;
70165: LD_ADDR_VAR 0 3
70169: PUSH
70170: LD_VAR 0 4
70174: PUSH
70175: LD_VAR 0 8
70179: PUSH
70180: EMPTY
70181: LIST
70182: LIST
70183: ST_TO_ADDR
// exit ;
70184: POP
70185: POP
70186: POP
70187: POP
70188: GO 70198
// end ; end ;
70190: GO 70126
70192: POP
70193: POP
// end ;
70194: GO 70012
70196: POP
70197: POP
// end ;
70198: LD_VAR 0 3
70202: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70203: LD_INT 0
70205: PPUSH
// if not side or side > 8 then
70206: LD_VAR 0 3
70210: NOT
70211: PUSH
70212: LD_VAR 0 3
70216: PUSH
70217: LD_INT 8
70219: GREATER
70220: OR
70221: IFFALSE 70225
// exit ;
70223: GO 70284
// if not range then
70225: LD_VAR 0 4
70229: NOT
70230: IFFALSE 70241
// range := - 12 ;
70232: LD_ADDR_VAR 0 4
70236: PUSH
70237: LD_INT 12
70239: NEG
70240: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70241: LD_VAR 0 1
70245: PPUSH
70246: LD_VAR 0 2
70250: PPUSH
70251: LD_VAR 0 3
70255: PPUSH
70256: LD_VAR 0 4
70260: PPUSH
70261: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70265: LD_VAR 0 1
70269: PPUSH
70270: LD_VAR 0 2
70274: PPUSH
70275: LD_VAR 0 3
70279: PPUSH
70280: CALL_OW 331
// end ;
70284: LD_VAR 0 5
70288: RET
// export function Video ( mode ) ; begin
70289: LD_INT 0
70291: PPUSH
// ingame_video = mode ;
70292: LD_ADDR_OWVAR 52
70296: PUSH
70297: LD_VAR 0 1
70301: ST_TO_ADDR
// interface_hidden = mode ;
70302: LD_ADDR_OWVAR 54
70306: PUSH
70307: LD_VAR 0 1
70311: ST_TO_ADDR
// end ;
70312: LD_VAR 0 2
70316: RET
// export function Join ( array , element ) ; begin
70317: LD_INT 0
70319: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70320: LD_ADDR_VAR 0 3
70324: PUSH
70325: LD_VAR 0 1
70329: PPUSH
70330: LD_VAR 0 1
70334: PUSH
70335: LD_INT 1
70337: PLUS
70338: PPUSH
70339: LD_VAR 0 2
70343: PPUSH
70344: CALL_OW 1
70348: ST_TO_ADDR
// end ;
70349: LD_VAR 0 3
70353: RET
// export function JoinUnion ( array , element ) ; begin
70354: LD_INT 0
70356: PPUSH
// result := array union element ;
70357: LD_ADDR_VAR 0 3
70361: PUSH
70362: LD_VAR 0 1
70366: PUSH
70367: LD_VAR 0 2
70371: UNION
70372: ST_TO_ADDR
// end ;
70373: LD_VAR 0 3
70377: RET
// export function GetBehemoths ( side ) ; begin
70378: LD_INT 0
70380: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
70381: LD_ADDR_VAR 0 2
70385: PUSH
70386: LD_INT 22
70388: PUSH
70389: LD_VAR 0 1
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: LD_INT 31
70400: PUSH
70401: LD_INT 25
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: PPUSH
70412: CALL_OW 69
70416: ST_TO_ADDR
// end ;
70417: LD_VAR 0 2
70421: RET
// export function Shuffle ( array ) ; var i , index ; begin
70422: LD_INT 0
70424: PPUSH
70425: PPUSH
70426: PPUSH
// result := [ ] ;
70427: LD_ADDR_VAR 0 2
70431: PUSH
70432: EMPTY
70433: ST_TO_ADDR
// if not array then
70434: LD_VAR 0 1
70438: NOT
70439: IFFALSE 70443
// exit ;
70441: GO 70542
// Randomize ;
70443: CALL_OW 10
// for i = array downto 1 do
70447: LD_ADDR_VAR 0 3
70451: PUSH
70452: DOUBLE
70453: LD_VAR 0 1
70457: INC
70458: ST_TO_ADDR
70459: LD_INT 1
70461: PUSH
70462: FOR_DOWNTO
70463: IFFALSE 70540
// begin index := rand ( 1 , array ) ;
70465: LD_ADDR_VAR 0 4
70469: PUSH
70470: LD_INT 1
70472: PPUSH
70473: LD_VAR 0 1
70477: PPUSH
70478: CALL_OW 12
70482: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70483: LD_ADDR_VAR 0 2
70487: PUSH
70488: LD_VAR 0 2
70492: PPUSH
70493: LD_VAR 0 2
70497: PUSH
70498: LD_INT 1
70500: PLUS
70501: PPUSH
70502: LD_VAR 0 1
70506: PUSH
70507: LD_VAR 0 4
70511: ARRAY
70512: PPUSH
70513: CALL_OW 2
70517: ST_TO_ADDR
// array := Delete ( array , index ) ;
70518: LD_ADDR_VAR 0 1
70522: PUSH
70523: LD_VAR 0 1
70527: PPUSH
70528: LD_VAR 0 4
70532: PPUSH
70533: CALL_OW 3
70537: ST_TO_ADDR
// end ;
70538: GO 70462
70540: POP
70541: POP
// end ;
70542: LD_VAR 0 2
70546: RET
// export function GetBaseMaterials ( base ) ; begin
70547: LD_INT 0
70549: PPUSH
// result := [ 0 , 0 , 0 ] ;
70550: LD_ADDR_VAR 0 2
70554: PUSH
70555: LD_INT 0
70557: PUSH
70558: LD_INT 0
70560: PUSH
70561: LD_INT 0
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: LIST
70568: ST_TO_ADDR
// if not base then
70569: LD_VAR 0 1
70573: NOT
70574: IFFALSE 70578
// exit ;
70576: GO 70627
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70578: LD_ADDR_VAR 0 2
70582: PUSH
70583: LD_VAR 0 1
70587: PPUSH
70588: LD_INT 1
70590: PPUSH
70591: CALL_OW 275
70595: PUSH
70596: LD_VAR 0 1
70600: PPUSH
70601: LD_INT 2
70603: PPUSH
70604: CALL_OW 275
70608: PUSH
70609: LD_VAR 0 1
70613: PPUSH
70614: LD_INT 3
70616: PPUSH
70617: CALL_OW 275
70621: PUSH
70622: EMPTY
70623: LIST
70624: LIST
70625: LIST
70626: ST_TO_ADDR
// end ;
70627: LD_VAR 0 2
70631: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70632: LD_INT 0
70634: PPUSH
70635: PPUSH
// result := array ;
70636: LD_ADDR_VAR 0 3
70640: PUSH
70641: LD_VAR 0 1
70645: ST_TO_ADDR
// if size > 0 then
70646: LD_VAR 0 2
70650: PUSH
70651: LD_INT 0
70653: GREATER
70654: IFFALSE 70700
// for i := array downto size do
70656: LD_ADDR_VAR 0 4
70660: PUSH
70661: DOUBLE
70662: LD_VAR 0 1
70666: INC
70667: ST_TO_ADDR
70668: LD_VAR 0 2
70672: PUSH
70673: FOR_DOWNTO
70674: IFFALSE 70698
// result := Delete ( result , result ) ;
70676: LD_ADDR_VAR 0 3
70680: PUSH
70681: LD_VAR 0 3
70685: PPUSH
70686: LD_VAR 0 3
70690: PPUSH
70691: CALL_OW 3
70695: ST_TO_ADDR
70696: GO 70673
70698: POP
70699: POP
// end ;
70700: LD_VAR 0 3
70704: RET
// export function ComExit ( unit ) ; var tmp ; begin
70705: LD_INT 0
70707: PPUSH
70708: PPUSH
// if not IsInUnit ( unit ) then
70709: LD_VAR 0 1
70713: PPUSH
70714: CALL_OW 310
70718: NOT
70719: IFFALSE 70723
// exit ;
70721: GO 70783
// tmp := IsInUnit ( unit ) ;
70723: LD_ADDR_VAR 0 3
70727: PUSH
70728: LD_VAR 0 1
70732: PPUSH
70733: CALL_OW 310
70737: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70738: LD_VAR 0 3
70742: PPUSH
70743: CALL_OW 247
70747: PUSH
70748: LD_INT 2
70750: EQUAL
70751: IFFALSE 70764
// ComExitVehicle ( unit ) else
70753: LD_VAR 0 1
70757: PPUSH
70758: CALL_OW 121
70762: GO 70773
// ComExitBuilding ( unit ) ;
70764: LD_VAR 0 1
70768: PPUSH
70769: CALL_OW 122
// result := tmp ;
70773: LD_ADDR_VAR 0 2
70777: PUSH
70778: LD_VAR 0 3
70782: ST_TO_ADDR
// end ;
70783: LD_VAR 0 2
70787: RET
// export function ComExitAll ( units ) ; var i ; begin
70788: LD_INT 0
70790: PPUSH
70791: PPUSH
// if not units then
70792: LD_VAR 0 1
70796: NOT
70797: IFFALSE 70801
// exit ;
70799: GO 70827
// for i in units do
70801: LD_ADDR_VAR 0 3
70805: PUSH
70806: LD_VAR 0 1
70810: PUSH
70811: FOR_IN
70812: IFFALSE 70825
// ComExit ( i ) ;
70814: LD_VAR 0 3
70818: PPUSH
70819: CALL 70705 0 1
70823: GO 70811
70825: POP
70826: POP
// end ;
70827: LD_VAR 0 2
70831: RET
// export function ResetHc ; begin
70832: LD_INT 0
70834: PPUSH
// InitHc ;
70835: CALL_OW 19
// hc_importance := 0 ;
70839: LD_ADDR_OWVAR 32
70843: PUSH
70844: LD_INT 0
70846: ST_TO_ADDR
// end ;
70847: LD_VAR 0 1
70851: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70852: LD_INT 0
70854: PPUSH
70855: PPUSH
70856: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70857: LD_ADDR_VAR 0 6
70861: PUSH
70862: LD_VAR 0 1
70866: PUSH
70867: LD_VAR 0 3
70871: PLUS
70872: PUSH
70873: LD_INT 2
70875: DIV
70876: ST_TO_ADDR
// if _x < 0 then
70877: LD_VAR 0 6
70881: PUSH
70882: LD_INT 0
70884: LESS
70885: IFFALSE 70902
// _x := _x * - 1 ;
70887: LD_ADDR_VAR 0 6
70891: PUSH
70892: LD_VAR 0 6
70896: PUSH
70897: LD_INT 1
70899: NEG
70900: MUL
70901: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70902: LD_ADDR_VAR 0 7
70906: PUSH
70907: LD_VAR 0 2
70911: PUSH
70912: LD_VAR 0 4
70916: PLUS
70917: PUSH
70918: LD_INT 2
70920: DIV
70921: ST_TO_ADDR
// if _y < 0 then
70922: LD_VAR 0 7
70926: PUSH
70927: LD_INT 0
70929: LESS
70930: IFFALSE 70947
// _y := _y * - 1 ;
70932: LD_ADDR_VAR 0 7
70936: PUSH
70937: LD_VAR 0 7
70941: PUSH
70942: LD_INT 1
70944: NEG
70945: MUL
70946: ST_TO_ADDR
// result := [ _x , _y ] ;
70947: LD_ADDR_VAR 0 5
70951: PUSH
70952: LD_VAR 0 6
70956: PUSH
70957: LD_VAR 0 7
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: ST_TO_ADDR
// end ;
70966: LD_VAR 0 5
70970: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70971: LD_INT 0
70973: PPUSH
70974: PPUSH
70975: PPUSH
70976: PPUSH
// task := GetTaskList ( unit ) ;
70977: LD_ADDR_VAR 0 7
70981: PUSH
70982: LD_VAR 0 1
70986: PPUSH
70987: CALL_OW 437
70991: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70992: LD_VAR 0 7
70996: NOT
70997: PUSH
70998: LD_VAR 0 1
71002: PPUSH
71003: LD_VAR 0 2
71007: PPUSH
71008: CALL_OW 308
71012: NOT
71013: AND
71014: IFFALSE 71018
// exit ;
71016: GO 71136
// if IsInArea ( unit , area ) then
71018: LD_VAR 0 1
71022: PPUSH
71023: LD_VAR 0 2
71027: PPUSH
71028: CALL_OW 308
71032: IFFALSE 71050
// begin ComMoveToArea ( unit , goAway ) ;
71034: LD_VAR 0 1
71038: PPUSH
71039: LD_VAR 0 3
71043: PPUSH
71044: CALL_OW 113
// exit ;
71048: GO 71136
// end ; if task [ 1 ] [ 1 ] <> M then
71050: LD_VAR 0 7
71054: PUSH
71055: LD_INT 1
71057: ARRAY
71058: PUSH
71059: LD_INT 1
71061: ARRAY
71062: PUSH
71063: LD_STRING M
71065: NONEQUAL
71066: IFFALSE 71070
// exit ;
71068: GO 71136
// x := task [ 1 ] [ 2 ] ;
71070: LD_ADDR_VAR 0 5
71074: PUSH
71075: LD_VAR 0 7
71079: PUSH
71080: LD_INT 1
71082: ARRAY
71083: PUSH
71084: LD_INT 2
71086: ARRAY
71087: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71088: LD_ADDR_VAR 0 6
71092: PUSH
71093: LD_VAR 0 7
71097: PUSH
71098: LD_INT 1
71100: ARRAY
71101: PUSH
71102: LD_INT 3
71104: ARRAY
71105: ST_TO_ADDR
// if InArea ( x , y , area ) then
71106: LD_VAR 0 5
71110: PPUSH
71111: LD_VAR 0 6
71115: PPUSH
71116: LD_VAR 0 2
71120: PPUSH
71121: CALL_OW 309
71125: IFFALSE 71136
// ComStop ( unit ) ;
71127: LD_VAR 0 1
71131: PPUSH
71132: CALL_OW 141
// end ;
71136: LD_VAR 0 4
71140: RET
// export function Abs ( value ) ; begin
71141: LD_INT 0
71143: PPUSH
// result := value ;
71144: LD_ADDR_VAR 0 2
71148: PUSH
71149: LD_VAR 0 1
71153: ST_TO_ADDR
// if value < 0 then
71154: LD_VAR 0 1
71158: PUSH
71159: LD_INT 0
71161: LESS
71162: IFFALSE 71179
// result := value * - 1 ;
71164: LD_ADDR_VAR 0 2
71168: PUSH
71169: LD_VAR 0 1
71173: PUSH
71174: LD_INT 1
71176: NEG
71177: MUL
71178: ST_TO_ADDR
// end ;
71179: LD_VAR 0 2
71183: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71184: LD_INT 0
71186: PPUSH
71187: PPUSH
71188: PPUSH
71189: PPUSH
71190: PPUSH
71191: PPUSH
71192: PPUSH
71193: PPUSH
// if not unit or not building then
71194: LD_VAR 0 1
71198: NOT
71199: PUSH
71200: LD_VAR 0 2
71204: NOT
71205: OR
71206: IFFALSE 71210
// exit ;
71208: GO 71436
// x := GetX ( building ) ;
71210: LD_ADDR_VAR 0 4
71214: PUSH
71215: LD_VAR 0 2
71219: PPUSH
71220: CALL_OW 250
71224: ST_TO_ADDR
// y := GetY ( building ) ;
71225: LD_ADDR_VAR 0 6
71229: PUSH
71230: LD_VAR 0 2
71234: PPUSH
71235: CALL_OW 251
71239: ST_TO_ADDR
// d := GetDir ( building ) ;
71240: LD_ADDR_VAR 0 8
71244: PUSH
71245: LD_VAR 0 2
71249: PPUSH
71250: CALL_OW 254
71254: ST_TO_ADDR
// r := 4 ;
71255: LD_ADDR_VAR 0 9
71259: PUSH
71260: LD_INT 4
71262: ST_TO_ADDR
// for i := 1 to 5 do
71263: LD_ADDR_VAR 0 10
71267: PUSH
71268: DOUBLE
71269: LD_INT 1
71271: DEC
71272: ST_TO_ADDR
71273: LD_INT 5
71275: PUSH
71276: FOR_TO
71277: IFFALSE 71434
// begin _x := ShiftX ( x , d , r + i ) ;
71279: LD_ADDR_VAR 0 5
71283: PUSH
71284: LD_VAR 0 4
71288: PPUSH
71289: LD_VAR 0 8
71293: PPUSH
71294: LD_VAR 0 9
71298: PUSH
71299: LD_VAR 0 10
71303: PLUS
71304: PPUSH
71305: CALL_OW 272
71309: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71310: LD_ADDR_VAR 0 7
71314: PUSH
71315: LD_VAR 0 6
71319: PPUSH
71320: LD_VAR 0 8
71324: PPUSH
71325: LD_VAR 0 9
71329: PUSH
71330: LD_VAR 0 10
71334: PLUS
71335: PPUSH
71336: CALL_OW 273
71340: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71341: LD_VAR 0 5
71345: PPUSH
71346: LD_VAR 0 7
71350: PPUSH
71351: CALL_OW 488
71355: PUSH
71356: LD_VAR 0 5
71360: PPUSH
71361: LD_VAR 0 7
71365: PPUSH
71366: CALL_OW 428
71370: PPUSH
71371: CALL_OW 247
71375: PUSH
71376: LD_INT 3
71378: PUSH
71379: LD_INT 2
71381: PUSH
71382: EMPTY
71383: LIST
71384: LIST
71385: IN
71386: NOT
71387: AND
71388: IFFALSE 71432
// begin ComMoveXY ( unit , _x , _y ) ;
71390: LD_VAR 0 1
71394: PPUSH
71395: LD_VAR 0 5
71399: PPUSH
71400: LD_VAR 0 7
71404: PPUSH
71405: CALL_OW 111
// result := [ _x , _y ] ;
71409: LD_ADDR_VAR 0 3
71413: PUSH
71414: LD_VAR 0 5
71418: PUSH
71419: LD_VAR 0 7
71423: PUSH
71424: EMPTY
71425: LIST
71426: LIST
71427: ST_TO_ADDR
// exit ;
71428: POP
71429: POP
71430: GO 71436
// end ; end ;
71432: GO 71276
71434: POP
71435: POP
// end ;
71436: LD_VAR 0 3
71440: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71441: LD_INT 0
71443: PPUSH
71444: PPUSH
71445: PPUSH
// result := 0 ;
71446: LD_ADDR_VAR 0 3
71450: PUSH
71451: LD_INT 0
71453: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71454: LD_VAR 0 1
71458: PUSH
71459: LD_INT 0
71461: LESS
71462: PUSH
71463: LD_VAR 0 1
71467: PUSH
71468: LD_INT 8
71470: GREATER
71471: OR
71472: PUSH
71473: LD_VAR 0 2
71477: PUSH
71478: LD_INT 0
71480: LESS
71481: OR
71482: PUSH
71483: LD_VAR 0 2
71487: PUSH
71488: LD_INT 8
71490: GREATER
71491: OR
71492: IFFALSE 71496
// exit ;
71494: GO 71571
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71496: LD_ADDR_VAR 0 4
71500: PUSH
71501: LD_INT 22
71503: PUSH
71504: LD_VAR 0 2
71508: PUSH
71509: EMPTY
71510: LIST
71511: LIST
71512: PPUSH
71513: CALL_OW 69
71517: PUSH
71518: FOR_IN
71519: IFFALSE 71569
// begin un := UnitShoot ( i ) ;
71521: LD_ADDR_VAR 0 5
71525: PUSH
71526: LD_VAR 0 4
71530: PPUSH
71531: CALL_OW 504
71535: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71536: LD_VAR 0 5
71540: PPUSH
71541: CALL_OW 255
71545: PUSH
71546: LD_VAR 0 1
71550: EQUAL
71551: IFFALSE 71567
// begin result := un ;
71553: LD_ADDR_VAR 0 3
71557: PUSH
71558: LD_VAR 0 5
71562: ST_TO_ADDR
// exit ;
71563: POP
71564: POP
71565: GO 71571
// end ; end ;
71567: GO 71518
71569: POP
71570: POP
// end ;
71571: LD_VAR 0 3
71575: RET
// export function GetCargoBay ( units ) ; begin
71576: LD_INT 0
71578: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71579: LD_ADDR_VAR 0 2
71583: PUSH
71584: LD_VAR 0 1
71588: PPUSH
71589: LD_INT 2
71591: PUSH
71592: LD_INT 34
71594: PUSH
71595: LD_INT 12
71597: PUSH
71598: EMPTY
71599: LIST
71600: LIST
71601: PUSH
71602: LD_INT 34
71604: PUSH
71605: LD_INT 51
71607: PUSH
71608: EMPTY
71609: LIST
71610: LIST
71611: PUSH
71612: LD_INT 34
71614: PUSH
71615: LD_INT 32
71617: PUSH
71618: EMPTY
71619: LIST
71620: LIST
71621: PUSH
71622: LD_INT 34
71624: PUSH
71625: LD_EXP 37
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: PUSH
71634: EMPTY
71635: LIST
71636: LIST
71637: LIST
71638: LIST
71639: LIST
71640: PPUSH
71641: CALL_OW 72
71645: ST_TO_ADDR
// end ;
71646: LD_VAR 0 2
71650: RET
// export function Negate ( value ) ; begin
71651: LD_INT 0
71653: PPUSH
// result := not value ;
71654: LD_ADDR_VAR 0 2
71658: PUSH
71659: LD_VAR 0 1
71663: NOT
71664: ST_TO_ADDR
// end ;
71665: LD_VAR 0 2
71669: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
71670: LD_INT 0
71672: PPUSH
// if x1 = x2 then
71673: LD_VAR 0 1
71677: PUSH
71678: LD_VAR 0 3
71682: EQUAL
71683: IFFALSE 71717
// begin if y1 > y2 then
71685: LD_VAR 0 2
71689: PUSH
71690: LD_VAR 0 4
71694: GREATER
71695: IFFALSE 71707
// result := 0 else
71697: LD_ADDR_VAR 0 5
71701: PUSH
71702: LD_INT 0
71704: ST_TO_ADDR
71705: GO 71715
// result := 3 ;
71707: LD_ADDR_VAR 0 5
71711: PUSH
71712: LD_INT 3
71714: ST_TO_ADDR
// exit ;
71715: GO 71803
// end ; if y1 = y2 then
71717: LD_VAR 0 2
71721: PUSH
71722: LD_VAR 0 4
71726: EQUAL
71727: IFFALSE 71761
// begin if x1 > x2 then
71729: LD_VAR 0 1
71733: PUSH
71734: LD_VAR 0 3
71738: GREATER
71739: IFFALSE 71751
// result := 1 else
71741: LD_ADDR_VAR 0 5
71745: PUSH
71746: LD_INT 1
71748: ST_TO_ADDR
71749: GO 71759
// result := 4 ;
71751: LD_ADDR_VAR 0 5
71755: PUSH
71756: LD_INT 4
71758: ST_TO_ADDR
// exit ;
71759: GO 71803
// end ; if x1 > x2 and y1 > y2 then
71761: LD_VAR 0 1
71765: PUSH
71766: LD_VAR 0 3
71770: GREATER
71771: PUSH
71772: LD_VAR 0 2
71776: PUSH
71777: LD_VAR 0 4
71781: GREATER
71782: AND
71783: IFFALSE 71795
// result := 2 else
71785: LD_ADDR_VAR 0 5
71789: PUSH
71790: LD_INT 2
71792: ST_TO_ADDR
71793: GO 71803
// result := 5 ;
71795: LD_ADDR_VAR 0 5
71799: PUSH
71800: LD_INT 5
71802: ST_TO_ADDR
// end ;
71803: LD_VAR 0 5
71807: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71808: LD_INT 0
71810: PPUSH
71811: PPUSH
// if not driver or not IsInUnit ( driver ) then
71812: LD_VAR 0 1
71816: NOT
71817: PUSH
71818: LD_VAR 0 1
71822: PPUSH
71823: CALL_OW 310
71827: NOT
71828: OR
71829: IFFALSE 71833
// exit ;
71831: GO 71923
// vehicle := IsInUnit ( driver ) ;
71833: LD_ADDR_VAR 0 3
71837: PUSH
71838: LD_VAR 0 1
71842: PPUSH
71843: CALL_OW 310
71847: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71848: LD_VAR 0 1
71852: PPUSH
71853: LD_STRING \
71855: PUSH
71856: LD_INT 0
71858: PUSH
71859: LD_INT 0
71861: PUSH
71862: LD_INT 0
71864: PUSH
71865: LD_INT 0
71867: PUSH
71868: LD_INT 0
71870: PUSH
71871: LD_INT 0
71873: PUSH
71874: EMPTY
71875: LIST
71876: LIST
71877: LIST
71878: LIST
71879: LIST
71880: LIST
71881: LIST
71882: PUSH
71883: LD_STRING E
71885: PUSH
71886: LD_INT 0
71888: PUSH
71889: LD_INT 0
71891: PUSH
71892: LD_VAR 0 3
71896: PUSH
71897: LD_INT 0
71899: PUSH
71900: LD_INT 0
71902: PUSH
71903: LD_INT 0
71905: PUSH
71906: EMPTY
71907: LIST
71908: LIST
71909: LIST
71910: LIST
71911: LIST
71912: LIST
71913: LIST
71914: PUSH
71915: EMPTY
71916: LIST
71917: LIST
71918: PPUSH
71919: CALL_OW 446
// end ;
71923: LD_VAR 0 2
71927: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71928: LD_INT 0
71930: PPUSH
71931: PPUSH
// if not driver or not IsInUnit ( driver ) then
71932: LD_VAR 0 1
71936: NOT
71937: PUSH
71938: LD_VAR 0 1
71942: PPUSH
71943: CALL_OW 310
71947: NOT
71948: OR
71949: IFFALSE 71953
// exit ;
71951: GO 72067
// vehicle := IsInUnit ( driver ) ;
71953: LD_ADDR_VAR 0 3
71957: PUSH
71958: LD_VAR 0 1
71962: PPUSH
71963: CALL_OW 310
71967: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71968: LD_VAR 0 1
71972: PPUSH
71973: LD_STRING \
71975: PUSH
71976: LD_INT 0
71978: PUSH
71979: LD_INT 0
71981: PUSH
71982: LD_INT 0
71984: PUSH
71985: LD_INT 0
71987: PUSH
71988: LD_INT 0
71990: PUSH
71991: LD_INT 0
71993: PUSH
71994: EMPTY
71995: LIST
71996: LIST
71997: LIST
71998: LIST
71999: LIST
72000: LIST
72001: LIST
72002: PUSH
72003: LD_STRING E
72005: PUSH
72006: LD_INT 0
72008: PUSH
72009: LD_INT 0
72011: PUSH
72012: LD_VAR 0 3
72016: PUSH
72017: LD_INT 0
72019: PUSH
72020: LD_INT 0
72022: PUSH
72023: LD_INT 0
72025: PUSH
72026: EMPTY
72027: LIST
72028: LIST
72029: LIST
72030: LIST
72031: LIST
72032: LIST
72033: LIST
72034: PUSH
72035: EMPTY
72036: LIST
72037: LIST
72038: PPUSH
72039: CALL_OW 447
// display_strings := [ driver , GetTaskList ( driver ) ] ;
72043: LD_ADDR_OWVAR 47
72047: PUSH
72048: LD_VAR 0 1
72052: PUSH
72053: LD_VAR 0 1
72057: PPUSH
72058: CALL_OW 437
72062: PUSH
72063: EMPTY
72064: LIST
72065: LIST
72066: ST_TO_ADDR
// end ;
72067: LD_VAR 0 2
72071: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72072: LD_INT 0
72074: PPUSH
72075: PPUSH
72076: PPUSH
// tmp := [ ] ;
72077: LD_ADDR_VAR 0 5
72081: PUSH
72082: EMPTY
72083: ST_TO_ADDR
// for i in units do
72084: LD_ADDR_VAR 0 4
72088: PUSH
72089: LD_VAR 0 1
72093: PUSH
72094: FOR_IN
72095: IFFALSE 72133
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72097: LD_ADDR_VAR 0 5
72101: PUSH
72102: LD_VAR 0 5
72106: PPUSH
72107: LD_VAR 0 5
72111: PUSH
72112: LD_INT 1
72114: PLUS
72115: PPUSH
72116: LD_VAR 0 4
72120: PPUSH
72121: CALL_OW 256
72125: PPUSH
72126: CALL_OW 2
72130: ST_TO_ADDR
72131: GO 72094
72133: POP
72134: POP
// if not tmp then
72135: LD_VAR 0 5
72139: NOT
72140: IFFALSE 72144
// exit ;
72142: GO 72192
// if asc then
72144: LD_VAR 0 2
72148: IFFALSE 72172
// result := SortListByListAsc ( units , tmp ) else
72150: LD_ADDR_VAR 0 3
72154: PUSH
72155: LD_VAR 0 1
72159: PPUSH
72160: LD_VAR 0 5
72164: PPUSH
72165: CALL_OW 76
72169: ST_TO_ADDR
72170: GO 72192
// result := SortListByListDesc ( units , tmp ) ;
72172: LD_ADDR_VAR 0 3
72176: PUSH
72177: LD_VAR 0 1
72181: PPUSH
72182: LD_VAR 0 5
72186: PPUSH
72187: CALL_OW 77
72191: ST_TO_ADDR
// end ;
72192: LD_VAR 0 3
72196: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72197: LD_INT 0
72199: PPUSH
72200: PPUSH
// task := GetTaskList ( mech ) ;
72201: LD_ADDR_VAR 0 4
72205: PUSH
72206: LD_VAR 0 1
72210: PPUSH
72211: CALL_OW 437
72215: ST_TO_ADDR
// if not task then
72216: LD_VAR 0 4
72220: NOT
72221: IFFALSE 72225
// exit ;
72223: GO 72267
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72225: LD_ADDR_VAR 0 3
72229: PUSH
72230: LD_VAR 0 4
72234: PUSH
72235: LD_INT 1
72237: ARRAY
72238: PUSH
72239: LD_INT 1
72241: ARRAY
72242: PUSH
72243: LD_STRING r
72245: EQUAL
72246: PUSH
72247: LD_VAR 0 4
72251: PUSH
72252: LD_INT 1
72254: ARRAY
72255: PUSH
72256: LD_INT 4
72258: ARRAY
72259: PUSH
72260: LD_VAR 0 2
72264: EQUAL
72265: AND
72266: ST_TO_ADDR
// end ;
72267: LD_VAR 0 3
72271: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72272: LD_INT 0
72274: PPUSH
// SetDir ( unit , d ) ;
72275: LD_VAR 0 1
72279: PPUSH
72280: LD_VAR 0 4
72284: PPUSH
72285: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
72289: LD_VAR 0 1
72293: PPUSH
72294: LD_VAR 0 2
72298: PPUSH
72299: LD_VAR 0 3
72303: PPUSH
72304: LD_VAR 0 5
72308: PPUSH
72309: CALL_OW 48
// end ;
72313: LD_VAR 0 6
72317: RET
// export function ToNaturalNumber ( number ) ; begin
72318: LD_INT 0
72320: PPUSH
// result := number div 1 ;
72321: LD_ADDR_VAR 0 2
72325: PUSH
72326: LD_VAR 0 1
72330: PUSH
72331: LD_INT 1
72333: DIV
72334: ST_TO_ADDR
// if number < 0 then
72335: LD_VAR 0 1
72339: PUSH
72340: LD_INT 0
72342: LESS
72343: IFFALSE 72353
// result := 0 ;
72345: LD_ADDR_VAR 0 2
72349: PUSH
72350: LD_INT 0
72352: ST_TO_ADDR
// end ;
72353: LD_VAR 0 2
72357: RET
// export function SortByClass ( units , class ) ; var un ; begin
72358: LD_INT 0
72360: PPUSH
72361: PPUSH
// if not units or not class then
72362: LD_VAR 0 1
72366: NOT
72367: PUSH
72368: LD_VAR 0 2
72372: NOT
72373: OR
72374: IFFALSE 72378
// exit ;
72376: GO 72473
// result := [ ] ;
72378: LD_ADDR_VAR 0 3
72382: PUSH
72383: EMPTY
72384: ST_TO_ADDR
// for un in units do
72385: LD_ADDR_VAR 0 4
72389: PUSH
72390: LD_VAR 0 1
72394: PUSH
72395: FOR_IN
72396: IFFALSE 72471
// if GetClass ( un ) = class then
72398: LD_VAR 0 4
72402: PPUSH
72403: CALL_OW 257
72407: PUSH
72408: LD_VAR 0 2
72412: EQUAL
72413: IFFALSE 72440
// result := Insert ( result , 1 , un ) else
72415: LD_ADDR_VAR 0 3
72419: PUSH
72420: LD_VAR 0 3
72424: PPUSH
72425: LD_INT 1
72427: PPUSH
72428: LD_VAR 0 4
72432: PPUSH
72433: CALL_OW 2
72437: ST_TO_ADDR
72438: GO 72469
// result := Replace ( result , result + 1 , un ) ;
72440: LD_ADDR_VAR 0 3
72444: PUSH
72445: LD_VAR 0 3
72449: PPUSH
72450: LD_VAR 0 3
72454: PUSH
72455: LD_INT 1
72457: PLUS
72458: PPUSH
72459: LD_VAR 0 4
72463: PPUSH
72464: CALL_OW 1
72468: ST_TO_ADDR
72469: GO 72395
72471: POP
72472: POP
// end ; end_of_file
72473: LD_VAR 0 3
72477: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72478: LD_VAR 0 1
72482: PUSH
72483: LD_INT 200
72485: DOUBLE
72486: GREATEREQUAL
72487: IFFALSE 72495
72489: LD_INT 299
72491: DOUBLE
72492: LESSEQUAL
72493: IFTRUE 72497
72495: GO 72529
72497: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72498: LD_VAR 0 1
72502: PPUSH
72503: LD_VAR 0 2
72507: PPUSH
72508: LD_VAR 0 3
72512: PPUSH
72513: LD_VAR 0 4
72517: PPUSH
72518: LD_VAR 0 5
72522: PPUSH
72523: CALL 29697 0 5
72527: GO 72606
72529: LD_INT 300
72531: DOUBLE
72532: GREATEREQUAL
72533: IFFALSE 72541
72535: LD_INT 399
72537: DOUBLE
72538: LESSEQUAL
72539: IFTRUE 72543
72541: GO 72605
72543: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72544: LD_VAR 0 1
72548: PPUSH
72549: LD_VAR 0 2
72553: PPUSH
72554: LD_VAR 0 3
72558: PPUSH
72559: LD_VAR 0 4
72563: PPUSH
72564: LD_VAR 0 5
72568: PPUSH
72569: LD_VAR 0 6
72573: PPUSH
72574: LD_VAR 0 7
72578: PPUSH
72579: LD_VAR 0 8
72583: PPUSH
72584: LD_VAR 0 9
72588: PPUSH
72589: LD_VAR 0 10
72593: PPUSH
72594: LD_VAR 0 11
72598: PPUSH
72599: CALL 27585 0 11
72603: GO 72606
72605: POP
// end ;
72606: PPOPN 11
72608: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72609: LD_VAR 0 1
72613: PPUSH
72614: LD_VAR 0 2
72618: PPUSH
72619: LD_VAR 0 3
72623: PPUSH
72624: LD_VAR 0 4
72628: PPUSH
72629: LD_VAR 0 5
72633: PPUSH
72634: CALL 29679 0 5
// end ; end_of_file
72638: PPOPN 5
72640: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72641: LD_VAR 0 1
72645: PPUSH
72646: LD_VAR 0 2
72650: PPUSH
72651: LD_VAR 0 3
72655: PPUSH
72656: LD_VAR 0 4
72660: PPUSH
72661: LD_VAR 0 5
72665: PPUSH
72666: LD_VAR 0 6
72670: PPUSH
72671: CALL 16393 0 6
// end ;
72675: PPOPN 6
72677: END
