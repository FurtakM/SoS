// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix ; starting begin mission_prefix := 02_ ;
   0: LD_ADDR_EXP 33
   4: PUSH
   5: LD_STRING 02_
   7: ST_TO_ADDR
// RuSoldMinLevel = 0 ;
   8: LD_ADDR_EXP 13
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
  16: LD_ADDR_EXP 14
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpJMM = 0 ;
  24: LD_ADDR_EXP 10
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpBobby = 0 ;
  32: LD_ADDR_EXP 11
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// hpCyrus = 0 ;
  40: LD_ADDR_EXP 12
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// cargoEscape = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailInBase = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// mikhailDepot = 0 ;
  72: LD_ADDR_EXP 23
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// tigersRespawn = 0 ;
  80: LD_ADDR_EXP 30
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// cargoRespawn = 0 ;
  88: LD_ADDR_EXP 28
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// cargoSee = 0 ;
  96: LD_ADDR_EXP 29
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// lastBattle = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// deadsCounter = 0 ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// spotCorpses = 0 ;
 120: LD_ADDR_EXP 32
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 128: LD_ADDR_EXP 25
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 135: LD_ADDR_EXP 24
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// attackGroup = [ ] ;
 142: LD_ADDR_EXP 26
 146: PUSH
 147: EMPTY
 148: ST_TO_ADDR
// RandomizeAll ;
 149: CALL_OW 11
// InGameOn ;
 153: CALL_OW 8
// Resetfog ;
 157: CALL_OW 335
// AnimateTrees ( true ) ;
 161: LD_INT 1
 163: PPUSH
 164: CALL_OW 573
// PrepareDifficulty ;
 168: CALL 10348 0 0
// PrepareRussianCommander ;
 172: CALL 11804 0 0
// PrepareSouthBase ;
 176: CALL 11887 0 0
// PrepareNorthBase ;
 180: CALL 12226 0 0
// PrepareOtherRussians ;
 184: CALL 12592 0 0
// PrepareHeroes ;
 188: CALL 10663 0 0
// PrepareLisSquad ;
 192: CALL 10991 0 0
// PrepareOtherAmericans ;
 196: CALL 11336 0 0
// end ; end_of_file
 200: END
// every 1 do var tmp ;
 201: GO 203
 203: DISABLE
 204: LD_INT 0
 206: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 207: LD_EXP 1
 211: PPUSH
 212: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 216: LD_ADDR_VAR 0 1
 220: PUSH
 221: LD_INT 22
 223: PUSH
 224: LD_INT 4
 226: PUSH
 227: EMPTY
 228: LIST
 229: LIST
 230: PUSH
 231: LD_INT 21
 233: PUSH
 234: LD_INT 1
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: EMPTY
 242: LIST
 243: LIST
 244: PPUSH
 245: CALL_OW 69
 249: PUSH
 250: LD_EXP 4
 254: PUSH
 255: EMPTY
 256: LIST
 257: DIFF
 258: ST_TO_ADDR
// if Cyrus and Bobby then
 259: LD_EXP 3
 263: PUSH
 264: LD_EXP 2
 268: AND
 269: IFFALSE 599
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 271: LD_EXP 3
 275: PPUSH
 276: LD_INT 43
 278: PPUSH
 279: LD_INT 72
 281: PPUSH
 282: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 286: LD_EXP 2
 290: PPUSH
 291: LD_INT 44
 293: PPUSH
 294: LD_INT 70
 296: PPUSH
 297: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 301: LD_EXP 1
 305: PPUSH
 306: LD_INT 46
 308: PPUSH
 309: LD_INT 73
 311: PPUSH
 312: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 316: LD_EXP 3
 320: PPUSH
 321: LD_STRING D1a-Cyrus-1
 323: PPUSH
 324: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 328: LD_EXP 1
 332: PPUSH
 333: LD_STRING D1a-JMM-1
 335: PPUSH
 336: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 340: LD_EXP 3
 344: PPUSH
 345: LD_INT 37
 347: PPUSH
 348: LD_INT 66
 350: PPUSH
 351: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 355: LD_EXP 2
 359: PPUSH
 360: LD_INT 41
 362: PPUSH
 363: LD_INT 67
 365: PPUSH
 366: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 370: LD_EXP 1
 374: PPUSH
 375: LD_INT 38
 377: PPUSH
 378: LD_INT 64
 380: PPUSH
 381: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 385: LD_EXP 2
 389: PPUSH
 390: LD_STRING D1a-Bobby-2
 392: PPUSH
 393: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 397: LD_EXP 3
 401: PPUSH
 402: LD_INT 35
 404: PPUSH
 405: LD_INT 62
 407: PPUSH
 408: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 412: LD_EXP 2
 416: PPUSH
 417: LD_INT 32
 419: PPUSH
 420: LD_INT 60
 422: PPUSH
 423: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 427: LD_EXP 1
 431: PPUSH
 432: LD_INT 35
 434: PPUSH
 435: LD_INT 60
 437: PPUSH
 438: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 442: LD_EXP 1
 446: PPUSH
 447: LD_STRING D1a-JMM-2
 449: PPUSH
 450: CALL_OW 88
// ComWalk ( Lisa ) ;
 454: LD_EXP 4
 458: PPUSH
 459: CALL_OW 138
// wait ( 0 0$1 ) ;
 463: LD_INT 35
 465: PPUSH
 466: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 470: LD_EXP 4
 474: PPUSH
 475: LD_EXP 1
 479: PPUSH
 480: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 484: LD_EXP 1
 488: PUSH
 489: LD_EXP 3
 493: PUSH
 494: LD_EXP 2
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: PPUSH
 504: LD_EXP 4
 508: PPUSH
 509: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 513: LD_VAR 0 1
 517: PUSH
 518: LD_INT 1
 520: ARRAY
 521: PPUSH
 522: LD_INT 33
 524: PPUSH
 525: LD_INT 55
 527: PPUSH
 528: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 532: LD_VAR 0 1
 536: PUSH
 537: LD_INT 2
 539: ARRAY
 540: PPUSH
 541: LD_INT 30
 543: PPUSH
 544: LD_INT 54
 546: PPUSH
 547: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 551: LD_VAR 0 1
 555: PUSH
 556: LD_INT 1
 558: ARRAY
 559: PPUSH
 560: LD_EXP 1
 564: PPUSH
 565: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 569: LD_VAR 0 1
 573: PUSH
 574: LD_INT 2
 576: ARRAY
 577: PPUSH
 578: LD_EXP 1
 582: PPUSH
 583: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 587: LD_EXP 4
 591: PPUSH
 592: LD_STRING D1a-Lisa-2
 594: PPUSH
 595: CALL_OW 88
// end ; if Cyrus and not Bobby then
 599: LD_EXP 3
 603: PUSH
 604: LD_EXP 2
 608: NOT
 609: AND
 610: IFFALSE 815
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 612: LD_EXP 3
 616: PPUSH
 617: LD_INT 43
 619: PPUSH
 620: LD_INT 72
 622: PPUSH
 623: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 627: LD_EXP 1
 631: PPUSH
 632: LD_INT 46
 634: PPUSH
 635: LD_INT 73
 637: PPUSH
 638: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 642: LD_EXP 3
 646: PPUSH
 647: LD_STRING D1a-Cyrus-1
 649: PPUSH
 650: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 654: LD_EXP 1
 658: PPUSH
 659: LD_STRING D1a-JMM-1
 661: PPUSH
 662: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 666: LD_EXP 3
 670: PPUSH
 671: LD_INT 37
 673: PPUSH
 674: LD_INT 66
 676: PPUSH
 677: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 681: LD_EXP 1
 685: PPUSH
 686: LD_INT 38
 688: PPUSH
 689: LD_INT 64
 691: PPUSH
 692: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 696: LD_EXP 3
 700: PPUSH
 701: LD_STRING D1a-Cyrus-2
 703: PPUSH
 704: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 708: LD_EXP 3
 712: PPUSH
 713: LD_INT 35
 715: PPUSH
 716: LD_INT 62
 718: PPUSH
 719: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 723: LD_EXP 1
 727: PPUSH
 728: LD_INT 35
 730: PPUSH
 731: LD_INT 60
 733: PPUSH
 734: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 738: LD_EXP 1
 742: PPUSH
 743: LD_STRING D1a-JMM-2
 745: PPUSH
 746: CALL_OW 88
// ComWalk ( Lisa ) ;
 750: LD_EXP 4
 754: PPUSH
 755: CALL_OW 138
// wait ( 0 0$1 ) ;
 759: LD_INT 35
 761: PPUSH
 762: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 766: LD_EXP 4
 770: PPUSH
 771: LD_EXP 1
 775: PPUSH
 776: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 780: LD_EXP 4
 784: PPUSH
 785: LD_STRING D1a-Lisa-2
 787: PPUSH
 788: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 792: LD_EXP 1
 796: PUSH
 797: LD_EXP 3
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: PPUSH
 806: LD_EXP 4
 810: PPUSH
 811: CALL_OW 119
// end ; if not Cyrus and Bobby then
 815: LD_EXP 3
 819: NOT
 820: PUSH
 821: LD_EXP 2
 825: AND
 826: IFFALSE 1105
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 828: LD_EXP 2
 832: PPUSH
 833: LD_INT 44
 835: PPUSH
 836: LD_INT 70
 838: PPUSH
 839: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 843: LD_EXP 1
 847: PPUSH
 848: LD_INT 46
 850: PPUSH
 851: LD_INT 73
 853: PPUSH
 854: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 858: LD_EXP 2
 862: PPUSH
 863: LD_STRING D1a-Bobby-1
 865: PPUSH
 866: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 870: LD_EXP 1
 874: PPUSH
 875: LD_STRING D1a-JMM-1
 877: PPUSH
 878: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 882: LD_EXP 2
 886: PPUSH
 887: LD_INT 37
 889: PPUSH
 890: LD_INT 66
 892: PPUSH
 893: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 897: LD_EXP 1
 901: PPUSH
 902: LD_INT 38
 904: PPUSH
 905: LD_INT 64
 907: PPUSH
 908: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 912: LD_EXP 2
 916: PPUSH
 917: LD_STRING D1a-Bobby-2
 919: PPUSH
 920: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 924: LD_EXP 2
 928: PPUSH
 929: LD_INT 35
 931: PPUSH
 932: LD_INT 62
 934: PPUSH
 935: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 939: LD_EXP 1
 943: PPUSH
 944: LD_INT 35
 946: PPUSH
 947: LD_INT 60
 949: PPUSH
 950: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 954: LD_EXP 1
 958: PPUSH
 959: LD_STRING D1a-JMM-2
 961: PPUSH
 962: CALL_OW 88
// ComWalk ( Lisa ) ;
 966: LD_EXP 4
 970: PPUSH
 971: CALL_OW 138
// wait ( 0 0$1 ) ;
 975: LD_INT 35
 977: PPUSH
 978: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 982: LD_EXP 4
 986: PPUSH
 987: LD_EXP 1
 991: PPUSH
 992: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 996: LD_EXP 1
1000: PUSH
1001: LD_EXP 3
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PPUSH
1010: LD_EXP 4
1014: PPUSH
1015: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 1
1026: ARRAY
1027: PPUSH
1028: LD_INT 33
1030: PPUSH
1031: LD_INT 55
1033: PPUSH
1034: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1038: LD_VAR 0 1
1042: PUSH
1043: LD_INT 2
1045: ARRAY
1046: PPUSH
1047: LD_INT 30
1049: PPUSH
1050: LD_INT 54
1052: PPUSH
1053: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1057: LD_VAR 0 1
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: LD_EXP 1
1070: PPUSH
1071: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1075: LD_VAR 0 1
1079: PUSH
1080: LD_INT 2
1082: ARRAY
1083: PPUSH
1084: LD_EXP 1
1088: PPUSH
1089: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1093: LD_EXP 4
1097: PPUSH
1098: LD_STRING D1a-Lisa-2
1100: PPUSH
1101: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1105: LD_EXP 3
1109: NOT
1110: PUSH
1111: LD_EXP 2
1115: NOT
1116: AND
1117: IFFALSE 1331
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1119: LD_EXP 1
1123: PPUSH
1124: LD_INT 37
1126: PPUSH
1127: LD_INT 66
1129: PPUSH
1130: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1134: LD_EXP 1
1138: PPUSH
1139: LD_STRING D1b-JMM-1
1141: PPUSH
1142: CALL_OW 88
// ComCrawl ( JMM ) ;
1146: LD_EXP 1
1150: PPUSH
1151: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1155: LD_EXP 1
1159: PPUSH
1160: LD_INT 35
1162: PPUSH
1163: LD_INT 60
1165: PPUSH
1166: CALL_OW 171
// wait ( 0 0$8 ) ;
1170: LD_INT 280
1172: PPUSH
1173: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1177: LD_EXP 1
1181: PPUSH
1182: LD_STRING D1b-JMM-1a
1184: PPUSH
1185: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1189: LD_EXP 1
1193: PUSH
1194: LD_EXP 4
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PPUSH
1203: CALL_OW 138
// wait ( 0 0$1 ) ;
1207: LD_INT 35
1209: PPUSH
1210: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1214: LD_EXP 4
1218: PPUSH
1219: LD_EXP 1
1223: PPUSH
1224: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1228: LD_EXP 1
1232: PUSH
1233: EMPTY
1234: LIST
1235: PPUSH
1236: LD_EXP 4
1240: PPUSH
1241: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1245: LD_VAR 0 1
1249: PUSH
1250: LD_INT 1
1252: ARRAY
1253: PPUSH
1254: LD_INT 33
1256: PPUSH
1257: LD_INT 55
1259: PPUSH
1260: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: ARRAY
1272: PPUSH
1273: LD_INT 30
1275: PPUSH
1276: LD_INT 54
1278: PPUSH
1279: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1283: LD_VAR 0 1
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: LD_EXP 1
1296: PPUSH
1297: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1301: LD_VAR 0 1
1305: PUSH
1306: LD_INT 2
1308: ARRAY
1309: PPUSH
1310: LD_EXP 1
1314: PPUSH
1315: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1319: LD_EXP 4
1323: PPUSH
1324: LD_STRING D1b-Lisa-1
1326: PPUSH
1327: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1331: LD_EXP 1
1335: PPUSH
1336: LD_STRING D1-JMM-1
1338: PPUSH
1339: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1343: LD_EXP 4
1347: PPUSH
1348: LD_STRING D1-Lisa-1
1350: PPUSH
1351: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1355: LD_EXP 1
1359: PPUSH
1360: LD_STRING D1-JMM-2
1362: PPUSH
1363: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1367: LD_EXP 9
1371: PPUSH
1372: LD_STRING D1-Pow-2
1374: PPUSH
1375: CALL_OW 94
// if Cyrus then
1379: LD_EXP 3
1383: IFFALSE 1409
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1385: LD_EXP 3
1389: PPUSH
1390: LD_STRING D1-Cyrus-2
1392: PPUSH
1393: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1397: LD_EXP 1
1401: PPUSH
1402: LD_STRING D1-JMM-3
1404: PPUSH
1405: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1409: LD_EXP 9
1413: PPUSH
1414: LD_STRING D1-Pow-3
1416: PPUSH
1417: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1421: LD_EXP 1
1425: PPUSH
1426: LD_STRING D1-JMM-4
1428: PPUSH
1429: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1433: LD_EXP 9
1437: PPUSH
1438: LD_STRING D1-Pow-4
1440: PPUSH
1441: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1445: LD_EXP 9
1449: PPUSH
1450: LD_STRING D1-Pow-4a
1452: PPUSH
1453: CALL_OW 94
// if Cyrus then
1457: LD_EXP 3
1461: IFFALSE 1475
// Say ( Cyrus , D1-Cyrus-4 ) ;
1463: LD_EXP 3
1467: PPUSH
1468: LD_STRING D1-Cyrus-4
1470: PPUSH
1471: CALL_OW 88
// if Bobby then
1475: LD_EXP 2
1479: IFFALSE 1517
// begin Say ( Bobby , D1-Bobby-4 ) ;
1481: LD_EXP 2
1485: PPUSH
1486: LD_STRING D1-Bobby-4
1488: PPUSH
1489: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1493: LD_EXP 4
1497: PPUSH
1498: LD_STRING D1-Lisa-4
1500: PPUSH
1501: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1505: LD_EXP 1
1509: PPUSH
1510: LD_STRING D1-JMM-5
1512: PPUSH
1513: CALL_OW 88
// end ; InGameOff ;
1517: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1521: LD_INT 22
1523: PUSH
1524: LD_INT 4
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PPUSH
1531: CALL_OW 69
1535: PUSH
1536: LD_EXP 6
1540: PUSH
1541: LD_EXP 7
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: DIFF
1550: PPUSH
1551: LD_INT 1
1553: PPUSH
1554: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1558: LD_STRING M1
1560: PPUSH
1561: CALL_OW 337
// SaveForQuickRestart ;
1565: CALL_OW 22
// end ;
1569: PPOPN 1
1571: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1572: LD_INT 7
1574: PPUSH
1575: LD_INT 22
1577: PUSH
1578: LD_INT 1
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: PPUSH
1585: CALL_OW 70
1589: PUSH
1590: LD_INT 0
1592: GREATER
1593: IFFALSE 2010
1595: GO 1597
1597: DISABLE
// begin InGameOn ;
1598: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1602: LD_INT 22
1604: PUSH
1605: LD_INT 1
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 21
1614: PUSH
1615: LD_INT 1
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PPUSH
1626: CALL_OW 69
1630: PPUSH
1631: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1635: LD_INT 24
1637: PPUSH
1638: LD_INT 32
1640: PPUSH
1641: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1645: LD_EXP 5
1649: PPUSH
1650: LD_INT 4
1652: PPUSH
1653: LD_INT 1
1655: PPUSH
1656: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1660: LD_EXP 5
1664: PPUSH
1665: LD_INT 4
1667: PPUSH
1668: CALL_OW 336
// wait ( 0 0$1 ) ;
1672: LD_INT 35
1674: PPUSH
1675: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1679: LD_EXP 5
1683: PPUSH
1684: LD_INT 27
1686: PPUSH
1687: LD_INT 38
1689: PPUSH
1690: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1694: LD_EXP 5
1698: PPUSH
1699: LD_EXP 1
1703: PPUSH
1704: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1708: LD_INT 22
1710: PUSH
1711: LD_INT 1
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 21
1720: PUSH
1721: LD_INT 1
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: PPUSH
1732: CALL_OW 69
1736: PUSH
1737: LD_EXP 5
1741: PUSH
1742: EMPTY
1743: LIST
1744: DIFF
1745: PPUSH
1746: LD_EXP 5
1750: PPUSH
1751: CALL_OW 119
// wait ( 0 0$1 ) ;
1755: LD_INT 35
1757: PPUSH
1758: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1762: LD_EXP 5
1766: PPUSH
1767: LD_STRING D2a-Khat-1
1769: PPUSH
1770: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1774: LD_EXP 1
1778: PPUSH
1779: LD_STRING D2a-JMM-1
1781: PPUSH
1782: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1786: LD_EXP 5
1790: PPUSH
1791: LD_STRING D2a-Khat-2
1793: PPUSH
1794: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1798: LD_EXP 1
1802: PPUSH
1803: LD_STRING D2a-JMM-2
1805: PPUSH
1806: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1810: LD_EXP 5
1814: PPUSH
1815: LD_STRING D2a-Khat-3
1817: PPUSH
1818: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1822: LD_EXP 1
1826: PPUSH
1827: LD_STRING D2a-JMM-3
1829: PPUSH
1830: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1834: LD_EXP 5
1838: PPUSH
1839: LD_STRING D2a-Khat-4
1841: PPUSH
1842: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1846: LD_EXP 1
1850: PPUSH
1851: LD_STRING D2a-JMM-4
1853: PPUSH
1854: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1858: LD_EXP 5
1862: PPUSH
1863: LD_STRING D2a-Khat-5
1865: PPUSH
1866: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1870: LD_EXP 1
1874: PPUSH
1875: LD_STRING D2a-JMM-5
1877: PPUSH
1878: CALL_OW 88
// InGameOff ;
1882: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1886: LD_INT 22
1888: PUSH
1889: LD_INT 1
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: PUSH
1896: LD_INT 21
1898: PUSH
1899: LD_INT 1
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 3
1908: PUSH
1909: LD_INT 24
1911: PUSH
1912: LD_INT 800
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: PPUSH
1928: CALL_OW 69
1932: PUSH
1933: LD_INT 0
1935: GREATER
1936: IFFALSE 2010
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1938: LD_EXP 5
1942: PPUSH
1943: LD_INT 22
1945: PUSH
1946: LD_INT 1
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 21
1955: PUSH
1956: LD_INT 1
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: PUSH
1963: LD_INT 3
1965: PUSH
1966: LD_INT 24
1968: PUSH
1969: LD_INT 1000
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PPUSH
1985: CALL_OW 69
1989: PUSH
1990: LD_INT 1
1992: ARRAY
1993: PPUSH
1994: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1998: LD_EXP 5
2002: PPUSH
2003: LD_STRING D2b-Khat-1
2005: PPUSH
2006: CALL_OW 88
// end ; end ;
2010: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp ;
2011: LD_INT 15
2013: PPUSH
2014: LD_INT 22
2016: PUSH
2017: LD_INT 1
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PPUSH
2024: CALL_OW 70
2028: PUSH
2029: LD_INT 0
2031: GREATER
2032: IFFALSE 3189
2034: GO 2036
2036: DISABLE
2037: LD_INT 0
2039: PPUSH
2040: PPUSH
2041: PPUSH
2042: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2043: LD_ADDR_VAR 0 2
2047: PUSH
2048: LD_INT 999
2050: PUSH
2051: LD_INT 999
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: EMPTY
2059: LIST
2060: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2061: LD_ADDR_VAR 0 4
2065: PUSH
2066: LD_INT 22
2068: PUSH
2069: LD_INT 1
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: PUSH
2076: LD_INT 21
2078: PUSH
2079: LD_INT 1
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: PPUSH
2090: CALL_OW 69
2094: PUSH
2095: LD_EXP 1
2099: PUSH
2100: LD_EXP 2
2104: PUSH
2105: LD_EXP 3
2109: PUSH
2110: LD_EXP 4
2114: PUSH
2115: LD_EXP 5
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: DIFF
2127: ST_TO_ADDR
// PrepareDeadSoldiers ;
2128: CALL 11494 0 0
// spotCorpses = 1 ;
2132: LD_ADDR_EXP 32
2136: PUSH
2137: LD_INT 1
2139: ST_TO_ADDR
// InGameOn ;
2140: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2144: LD_INT 23
2146: PPUSH
2147: LD_INT 12
2149: PPUSH
2150: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2154: LD_ADDR_VAR 0 3
2158: PUSH
2159: LD_VAR 0 2
2163: PUSH
2164: LD_INT 1
2166: ARRAY
2167: PUSH
2168: LD_INT 2
2170: ARRAY
2171: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2172: LD_ADDR_VAR 0 1
2176: PUSH
2177: LD_INT 22
2179: PUSH
2180: LD_INT 1
2182: PUSH
2183: EMPTY
2184: LIST
2185: LIST
2186: PUSH
2187: LD_INT 21
2189: PUSH
2190: LD_INT 1
2192: PUSH
2193: EMPTY
2194: LIST
2195: LIST
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PPUSH
2201: CALL_OW 69
2205: PUSH
2206: LD_EXP 1
2210: PUSH
2211: LD_EXP 5
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: DIFF
2220: PUSH
2221: FOR_IN
2222: IFFALSE 2273
// if IsOK ( i ) then
2224: LD_VAR 0 1
2228: PPUSH
2229: CALL_OW 302
2233: IFFALSE 2271
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2235: LD_ADDR_VAR 0 2
2239: PUSH
2240: LD_VAR 0 2
2244: PUSH
2245: LD_VAR 0 1
2249: PUSH
2250: LD_VAR 0 1
2254: PPUSH
2255: LD_INT 16
2257: PPUSH
2258: CALL_OW 299
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: PUSH
2267: EMPTY
2268: LIST
2269: ADD
2270: ST_TO_ADDR
2271: GO 2221
2273: POP
2274: POP
// for i = 2 to distanceTab do
2275: LD_ADDR_VAR 0 1
2279: PUSH
2280: DOUBLE
2281: LD_INT 2
2283: DEC
2284: ST_TO_ADDR
2285: LD_VAR 0 2
2289: PUSH
2290: FOR_TO
2291: IFFALSE 2337
// if distanceTab [ i ] [ 2 ] < min then
2293: LD_VAR 0 2
2297: PUSH
2298: LD_VAR 0 1
2302: ARRAY
2303: PUSH
2304: LD_INT 2
2306: ARRAY
2307: PUSH
2308: LD_VAR 0 3
2312: LESS
2313: IFFALSE 2335
// min = distanceTab [ i ] [ 2 ] ;
2315: LD_ADDR_VAR 0 3
2319: PUSH
2320: LD_VAR 0 2
2324: PUSH
2325: LD_VAR 0 1
2329: ARRAY
2330: PUSH
2331: LD_INT 2
2333: ARRAY
2334: ST_TO_ADDR
2335: GO 2290
2337: POP
2338: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2339: LD_ADDR_VAR 0 1
2343: PUSH
2344: LD_INT 22
2346: PUSH
2347: LD_INT 1
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: PUSH
2354: LD_INT 21
2356: PUSH
2357: LD_INT 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: PUSH
2364: EMPTY
2365: LIST
2366: LIST
2367: PPUSH
2368: CALL_OW 69
2372: PUSH
2373: LD_EXP 1
2377: PUSH
2378: EMPTY
2379: LIST
2380: DIFF
2381: PUSH
2382: FOR_IN
2383: IFFALSE 2453
// begin ComMoveToArea ( i , DeadCutscene ) ;
2385: LD_VAR 0 1
2389: PPUSH
2390: LD_INT 28
2392: PPUSH
2393: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2397: LD_EXP 1
2401: PPUSH
2402: LD_INT 30
2404: PPUSH
2405: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2409: LD_VAR 0 1
2413: PPUSH
2414: LD_INT 23
2416: PPUSH
2417: LD_INT 11
2419: PPUSH
2420: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2424: LD_EXP 1
2428: PPUSH
2429: LD_INT 23
2431: PPUSH
2432: LD_INT 11
2434: PPUSH
2435: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2439: LD_EXP 34
2443: PPUSH
2444: LD_INT 250
2446: PPUSH
2447: CALL_OW 234
// end ;
2451: GO 2382
2453: POP
2454: POP
// for i = 2 to distanceTab do
2455: LD_ADDR_VAR 0 1
2459: PUSH
2460: DOUBLE
2461: LD_INT 2
2463: DEC
2464: ST_TO_ADDR
2465: LD_VAR 0 2
2469: PUSH
2470: FOR_TO
2471: IFFALSE 2857
// begin if distanceTab [ i ] [ 2 ] = min then
2473: LD_VAR 0 2
2477: PUSH
2478: LD_VAR 0 1
2482: ARRAY
2483: PUSH
2484: LD_INT 2
2486: ARRAY
2487: PUSH
2488: LD_VAR 0 3
2492: EQUAL
2493: IFFALSE 2855
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2495: LD_VAR 0 2
2499: PUSH
2500: LD_VAR 0 1
2504: ARRAY
2505: PUSH
2506: LD_INT 1
2508: ARRAY
2509: PUSH
2510: LD_EXP 2
2514: EQUAL
2515: IFFALSE 2529
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2517: LD_EXP 2
2521: PPUSH
2522: LD_STRING DCorpses-Bobby-1
2524: PPUSH
2525: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2529: LD_VAR 0 2
2533: PUSH
2534: LD_VAR 0 1
2538: ARRAY
2539: PUSH
2540: LD_INT 1
2542: ARRAY
2543: PUSH
2544: LD_EXP 3
2548: EQUAL
2549: IFFALSE 2563
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2551: LD_EXP 3
2555: PPUSH
2556: LD_STRING DCorpses-Cyrus-1
2558: PPUSH
2559: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2563: LD_VAR 0 2
2567: PUSH
2568: LD_VAR 0 1
2572: ARRAY
2573: PUSH
2574: LD_INT 1
2576: ARRAY
2577: PUSH
2578: LD_EXP 4
2582: EQUAL
2583: IFFALSE 2597
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2585: LD_EXP 4
2589: PPUSH
2590: LD_STRING DCorpses-Lisa-1
2592: PPUSH
2593: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2597: LD_VAR 0 2
2601: PUSH
2602: LD_VAR 0 1
2606: ARRAY
2607: PUSH
2608: LD_INT 1
2610: ARRAY
2611: PUSH
2612: LD_VAR 0 4
2616: PUSH
2617: LD_INT 1
2619: ARRAY
2620: EQUAL
2621: PUSH
2622: LD_VAR 0 4
2626: PUSH
2627: LD_INT 1
2629: ARRAY
2630: PPUSH
2631: CALL_OW 258
2635: PUSH
2636: LD_INT 1
2638: EQUAL
2639: AND
2640: IFFALSE 2658
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2642: LD_VAR 0 4
2646: PUSH
2647: LD_INT 1
2649: ARRAY
2650: PPUSH
2651: LD_STRING DCorpses-Sol1-1
2653: PPUSH
2654: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2658: LD_VAR 0 2
2662: PUSH
2663: LD_VAR 0 1
2667: ARRAY
2668: PUSH
2669: LD_INT 1
2671: ARRAY
2672: PUSH
2673: LD_VAR 0 4
2677: PUSH
2678: LD_INT 1
2680: ARRAY
2681: EQUAL
2682: PUSH
2683: LD_VAR 0 4
2687: PUSH
2688: LD_INT 1
2690: ARRAY
2691: PPUSH
2692: CALL_OW 258
2696: PUSH
2697: LD_INT 2
2699: EQUAL
2700: AND
2701: IFFALSE 2719
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2703: LD_VAR 0 4
2707: PUSH
2708: LD_INT 1
2710: ARRAY
2711: PPUSH
2712: LD_STRING DCorpses-FSol1-1
2714: PPUSH
2715: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2719: LD_VAR 0 2
2723: PUSH
2724: LD_VAR 0 1
2728: ARRAY
2729: PUSH
2730: LD_INT 1
2732: ARRAY
2733: PUSH
2734: LD_VAR 0 4
2738: PUSH
2739: LD_INT 2
2741: ARRAY
2742: EQUAL
2743: PUSH
2744: LD_VAR 0 4
2748: PUSH
2749: LD_INT 2
2751: ARRAY
2752: PPUSH
2753: CALL_OW 258
2757: PUSH
2758: LD_INT 1
2760: EQUAL
2761: AND
2762: IFFALSE 2780
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2764: LD_VAR 0 4
2768: PUSH
2769: LD_INT 2
2771: ARRAY
2772: PPUSH
2773: LD_STRING DCorpses-Sol1-1
2775: PPUSH
2776: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2780: LD_VAR 0 2
2784: PUSH
2785: LD_VAR 0 1
2789: ARRAY
2790: PUSH
2791: LD_INT 1
2793: ARRAY
2794: PUSH
2795: LD_VAR 0 4
2799: PUSH
2800: LD_INT 2
2802: ARRAY
2803: EQUAL
2804: PUSH
2805: LD_VAR 0 4
2809: PUSH
2810: LD_INT 2
2812: ARRAY
2813: PPUSH
2814: CALL_OW 258
2818: PUSH
2819: LD_INT 2
2821: EQUAL
2822: AND
2823: IFFALSE 2841
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2825: LD_VAR 0 4
2829: PUSH
2830: LD_INT 2
2832: ARRAY
2833: PPUSH
2834: LD_STRING DCorpses-FSol1-1
2836: PPUSH
2837: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2841: LD_EXP 34
2845: PPUSH
2846: LD_INT 150
2848: PPUSH
2849: CALL_OW 234
// break ;
2853: GO 2857
// end ; end ;
2855: GO 2470
2857: POP
2858: POP
// repeat wait ( 0 0$1 ) ;
2859: LD_INT 35
2861: PPUSH
2862: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2866: LD_ADDR_VAR 0 1
2870: PUSH
2871: LD_INT 22
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 21
2883: PUSH
2884: LD_INT 1
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: PPUSH
2895: CALL_OW 69
2899: PUSH
2900: LD_EXP 1
2904: PUSH
2905: EMPTY
2906: LIST
2907: DIFF
2908: PUSH
2909: FOR_IN
2910: IFFALSE 2980
// begin ComMoveToArea ( i , DeadCutscene ) ;
2912: LD_VAR 0 1
2916: PPUSH
2917: LD_INT 28
2919: PPUSH
2920: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2924: LD_EXP 1
2928: PPUSH
2929: LD_INT 30
2931: PPUSH
2932: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2936: LD_VAR 0 1
2940: PPUSH
2941: LD_INT 23
2943: PPUSH
2944: LD_INT 11
2946: PPUSH
2947: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2951: LD_EXP 1
2955: PPUSH
2956: LD_INT 23
2958: PPUSH
2959: LD_INT 11
2961: PPUSH
2962: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2966: LD_EXP 34
2970: PPUSH
2971: LD_INT 250
2973: PPUSH
2974: CALL_OW 234
// end ;
2978: GO 2909
2980: POP
2981: POP
// until IsInArea ( JMM , JMMAreaCutscene ) ;
2982: LD_EXP 1
2986: PPUSH
2987: LD_INT 30
2989: PPUSH
2990: CALL_OW 308
2994: IFFALSE 2859
// wait ( 0 0$3 ) ;
2996: LD_INT 105
2998: PPUSH
2999: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3003: LD_EXP 1
3007: PPUSH
3008: LD_STRING DCorpses-JMM-1
3010: PPUSH
3011: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3015: LD_EXP 34
3019: PPUSH
3020: LD_INT 100
3022: PPUSH
3023: CALL_OW 234
// if IsOK ( Khatam ) then
3027: LD_EXP 5
3031: PPUSH
3032: CALL_OW 302
3036: IFFALSE 3173
// begin repeat wait ( 0 0$1 ) ;
3038: LD_INT 35
3040: PPUSH
3041: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3045: LD_EXP 5
3049: PPUSH
3050: LD_EXP 34
3054: PPUSH
3055: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3059: LD_EXP 5
3063: PPUSH
3064: LD_EXP 34
3068: PPUSH
3069: CALL_OW 296
3073: PUSH
3074: LD_INT 2
3076: LESS
3077: IFFALSE 3038
// spotCorpses = 0 ;
3079: LD_ADDR_EXP 32
3083: PUSH
3084: LD_INT 0
3086: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3087: LD_EXP 34
3091: PPUSH
3092: LD_INT 10
3094: PPUSH
3095: CALL_OW 234
// wait ( 0 0$3 ) ;
3099: LD_INT 105
3101: PPUSH
3102: CALL_OW 67
// KillUnit ( DyingSold ) ;
3106: LD_EXP 34
3110: PPUSH
3111: CALL_OW 66
// wait ( 0 0$1 ) ;
3115: LD_INT 35
3117: PPUSH
3118: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3122: LD_EXP 1
3126: PUSH
3127: LD_EXP 5
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PPUSH
3136: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3140: LD_EXP 5
3144: PPUSH
3145: LD_EXP 1
3149: PPUSH
3150: CALL_OW 119
// wait ( 0 0$1 ) ;
3154: LD_INT 35
3156: PPUSH
3157: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3161: LD_EXP 5
3165: PPUSH
3166: LD_STRING DCorpses-Khat-1
3168: PPUSH
3169: CALL_OW 88
// end ; InGameOff ;
3173: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3177: LD_EXP 1
3181: PPUSH
3182: LD_STRING DCorpses-JMM-2
3184: PPUSH
3185: CALL_OW 88
// end ;
3189: PPOPN 4
3191: END
// every 0 0$1 trigger spotCorpses = 1 do
3192: LD_EXP 32
3196: PUSH
3197: LD_INT 1
3199: EQUAL
3200: IFFALSE 3218
3202: GO 3204
3204: DISABLE
// begin enable ;
3205: ENABLE
// SetLives ( DyingSold , 10 ) ;
3206: LD_EXP 34
3210: PPUSH
3211: LD_INT 10
3213: PPUSH
3214: CALL_OW 234
// end ;
3218: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 15 ) do var i ;
3219: LD_INT 8
3221: PPUSH
3222: LD_INT 22
3224: PUSH
3225: LD_INT 1
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: PPUSH
3232: CALL_OW 70
3236: PUSH
3237: LD_INT 0
3239: GREATER
3240: PUSH
3241: LD_INT 22
3243: PUSH
3244: LD_INT 1
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: PPUSH
3251: CALL_OW 69
3255: PPUSH
3256: LD_EXP 7
3260: PPUSH
3261: CALL_OW 74
3265: PPUSH
3266: LD_EXP 7
3270: PPUSH
3271: CALL_OW 296
3275: PUSH
3276: LD_INT 15
3278: LESS
3279: OR
3280: IFFALSE 3504
3282: GO 3284
3284: DISABLE
3285: LD_INT 0
3287: PPUSH
// begin InGameOn ;
3288: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3292: LD_EXP 7
3296: PPUSH
3297: LD_INT 250
3299: PPUSH
3300: CALL_OW 234
// SetLives ( Brian , 750 ) ;
3304: LD_EXP 6
3308: PPUSH
3309: LD_INT 750
3311: PPUSH
3312: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3316: LD_INT 3
3318: PPUSH
3319: LD_INT 4
3321: PPUSH
3322: LD_INT 2
3324: PPUSH
3325: LD_INT 1
3327: PPUSH
3328: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3332: LD_EXP 6
3336: PUSH
3337: LD_EXP 7
3341: PUSH
3342: EMPTY
3343: LIST
3344: LIST
3345: PPUSH
3346: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3350: LD_ADDR_VAR 0 1
3354: PUSH
3355: LD_INT 9
3357: PPUSH
3358: LD_INT 22
3360: PUSH
3361: LD_INT 3
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: PPUSH
3368: CALL_OW 70
3372: PUSH
3373: FOR_IN
3374: IFFALSE 3387
// ComFree ( i ) ;
3376: LD_VAR 0 1
3380: PPUSH
3381: CALL_OW 139
3385: GO 3373
3387: POP
3388: POP
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3389: LD_ADDR_VAR 0 1
3393: PUSH
3394: LD_INT 9
3396: PPUSH
3397: LD_INT 22
3399: PUSH
3400: LD_INT 3
3402: PUSH
3403: EMPTY
3404: LIST
3405: LIST
3406: PPUSH
3407: CALL_OW 70
3411: PUSH
3412: FOR_IN
3413: IFFALSE 3431
// AddComAttackUnit ( i , Brian ) ;
3415: LD_VAR 0 1
3419: PPUSH
3420: LD_EXP 6
3424: PPUSH
3425: CALL_OW 175
3429: GO 3412
3431: POP
3432: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3433: LD_ADDR_VAR 0 1
3437: PUSH
3438: LD_INT 22
3440: PUSH
3441: LD_INT 4
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PPUSH
3448: CALL_OW 69
3452: PUSH
3453: FOR_IN
3454: IFFALSE 3467
// ComFree ( i ) ;
3456: LD_VAR 0 1
3460: PPUSH
3461: CALL_OW 139
3465: GO 3453
3467: POP
3468: POP
// wait ( 0 0$1 ) ;
3469: LD_INT 35
3471: PPUSH
3472: CALL_OW 67
// InGameOff ;
3476: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3480: LD_EXP 6
3484: PPUSH
3485: LD_STRING DF-Sol1-1
3487: PPUSH
3488: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3492: LD_EXP 1
3496: PPUSH
3497: LD_STRING DF-JMM-1
3499: PPUSH
3500: CALL_OW 88
// end ;
3504: PPOPN 1
3506: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3507: LD_INT 19
3509: PPUSH
3510: LD_INT 22
3512: PUSH
3513: LD_INT 3
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PPUSH
3520: CALL_OW 70
3524: PUSH
3525: LD_INT 0
3527: EQUAL
3528: IFFALSE 3641
3530: GO 3532
3532: DISABLE
// begin if not IsDead ( Brian ) then
3533: LD_EXP 6
3537: PPUSH
3538: CALL_OW 301
3542: NOT
3543: IFFALSE 3557
// SetSide ( Brian , 1 ) ;
3545: LD_EXP 6
3549: PPUSH
3550: LD_INT 1
3552: PPUSH
3553: CALL_OW 235
// if not IsDead ( Jerry ) then
3557: LD_EXP 7
3561: PPUSH
3562: CALL_OW 301
3566: NOT
3567: IFFALSE 3581
// SetSide ( Jerry , 1 ) ;
3569: LD_EXP 7
3573: PPUSH
3574: LD_INT 1
3576: PPUSH
3577: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
3581: LD_INT 22
3583: PUSH
3584: LD_INT 1
3586: PUSH
3587: EMPTY
3588: LIST
3589: LIST
3590: PUSH
3591: LD_INT 25
3593: PUSH
3594: LD_INT 4
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PUSH
3601: EMPTY
3602: LIST
3603: LIST
3604: PPUSH
3605: CALL_OW 69
3609: PUSH
3610: LD_INT 0
3612: GREATER
3613: IFFALSE 3629
// begin Say ( JMM , DFa-JMM-1 ) ;
3615: LD_EXP 1
3619: PPUSH
3620: LD_STRING DFa-JMM-1
3622: PPUSH
3623: CALL_OW 88
// end else
3627: GO 3641
// begin Say ( JMM , DFa-JMM-1a ) ;
3629: LD_EXP 1
3633: PPUSH
3634: LD_STRING DFa-JMM-1a
3636: PPUSH
3637: CALL_OW 88
// end ; end ;
3641: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3642: LD_INT 19
3644: PPUSH
3645: LD_INT 22
3647: PUSH
3648: LD_INT 3
3650: PUSH
3651: EMPTY
3652: LIST
3653: LIST
3654: PPUSH
3655: CALL_OW 70
3659: PUSH
3660: LD_INT 0
3662: EQUAL
3663: PUSH
3664: LD_EXP 6
3668: PPUSH
3669: CALL_OW 302
3673: NOT
3674: AND
3675: IFFALSE 3752
3677: GO 3679
3679: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3680: LD_INT 35
3682: PPUSH
3683: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3687: LD_EXP 6
3691: PPUSH
3692: CALL_OW 256
3696: PUSH
3697: LD_INT 250
3699: GREATER
3700: IFFALSE 3680
// Say ( Brian , DFb-Sol1-1 ) ;
3702: LD_EXP 6
3706: PPUSH
3707: LD_STRING DFb-Sol1-1
3709: PPUSH
3710: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3714: LD_EXP 6
3718: PPUSH
3719: LD_INT 78
3721: PPUSH
3722: LD_INT 74
3724: PPUSH
3725: CALL_OW 111
// if IsDead ( Jerry ) then
3729: LD_EXP 7
3733: PPUSH
3734: CALL_OW 301
3738: IFFALSE 3752
// Say ( Brian , DFb-Sol1-1a ) end ;
3740: LD_EXP 6
3744: PPUSH
3745: LD_STRING DFb-Sol1-1a
3747: PPUSH
3748: CALL_OW 88
3752: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3753: LD_INT 22
3755: PUSH
3756: LD_INT 1
3758: PUSH
3759: EMPTY
3760: LIST
3761: LIST
3762: PUSH
3763: LD_INT 21
3765: PUSH
3766: LD_INT 2
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: PUSH
3773: EMPTY
3774: LIST
3775: LIST
3776: PPUSH
3777: CALL_OW 69
3781: PUSH
3782: LD_INT 0
3784: EQUAL
3785: IFFALSE 3873
3787: GO 3789
3789: DISABLE
3790: LD_INT 0
3792: PPUSH
// begin enable ;
3793: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3794: LD_ADDR_VAR 0 1
3798: PUSH
3799: LD_INT 22
3801: PUSH
3802: LD_INT 3
3804: PUSH
3805: EMPTY
3806: LIST
3807: LIST
3808: PUSH
3809: LD_INT 21
3811: PUSH
3812: LD_INT 3
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: PUSH
3819: LD_INT 30
3821: PUSH
3822: LD_INT 31
3824: PUSH
3825: EMPTY
3826: LIST
3827: LIST
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: LIST
3833: PPUSH
3834: CALL_OW 69
3838: PUSH
3839: FOR_IN
3840: IFFALSE 3871
// begin if See ( 1 , i ) then
3842: LD_INT 1
3844: PPUSH
3845: LD_VAR 0 1
3849: PPUSH
3850: CALL_OW 292
3854: IFFALSE 3869
// begin disable ;
3856: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3857: LD_EXP 1
3861: PPUSH
3862: LD_STRING DX1-JMM-1
3864: PPUSH
3865: CALL_OW 88
// end ; end ;
3869: GO 3839
3871: POP
3872: POP
// end ;
3873: PPOPN 1
3875: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j ;
3876: LD_INT 1
3878: PPUSH
3879: LD_INT 11
3881: PPUSH
3882: CALL_OW 294
3886: IFFALSE 4300
3888: GO 3890
3890: DISABLE
3891: LD_INT 0
3893: PPUSH
3894: PPUSH
// begin DialogueOn ;
3895: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3899: LD_INT 11
3901: PPUSH
3902: LD_INT 22
3904: PUSH
3905: LD_INT 3
3907: PUSH
3908: EMPTY
3909: LIST
3910: LIST
3911: PUSH
3912: LD_INT 21
3914: PUSH
3915: LD_INT 1
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: PPUSH
3926: CALL_OW 70
3930: PUSH
3931: LD_INT 1
3933: ARRAY
3934: PPUSH
3935: LD_STRING DX3-Rus1-1
3937: PPUSH
3938: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3942: LD_EXP 1
3946: PPUSH
3947: LD_STRING DX3-JMM-1
3949: PPUSH
3950: CALL_OW 88
// DialogueOff ;
3954: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3958: LD_ADDR_VAR 0 1
3962: PUSH
3963: LD_INT 11
3965: PPUSH
3966: LD_INT 22
3968: PUSH
3969: LD_INT 3
3971: PUSH
3972: EMPTY
3973: LIST
3974: LIST
3975: PUSH
3976: LD_INT 21
3978: PUSH
3979: LD_INT 1
3981: PUSH
3982: EMPTY
3983: LIST
3984: LIST
3985: PUSH
3986: EMPTY
3987: LIST
3988: LIST
3989: PPUSH
3990: CALL_OW 70
3994: PUSH
3995: FOR_IN
3996: IFFALSE 4016
// southBaseDefenders = southBaseDefenders ^ i ;
3998: LD_ADDR_EXP 25
4002: PUSH
4003: LD_EXP 25
4007: PUSH
4008: LD_VAR 0 1
4012: ADD
4013: ST_TO_ADDR
4014: GO 3995
4016: POP
4017: POP
// wait ( [ 0 0$13 , 0 0$12 , 0 0$9 ] [ Difficulty ] ) ;
4018: LD_INT 455
4020: PUSH
4021: LD_INT 420
4023: PUSH
4024: LD_INT 315
4026: PUSH
4027: EMPTY
4028: LIST
4029: LIST
4030: LIST
4031: PUSH
4032: LD_OWVAR 67
4036: ARRAY
4037: PPUSH
4038: CALL_OW 67
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ) ;
4042: LD_INT 22
4044: PUSH
4045: LD_INT 3
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: PUSH
4052: LD_INT 21
4054: PUSH
4055: LD_INT 1
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: PUSH
4062: LD_INT 25
4064: PUSH
4065: LD_INT 3
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: LIST
4076: PPUSH
4077: CALL_OW 69
4081: PPUSH
4082: CALL_OW 122
// wait ( 0 0$1 ) ;
4086: LD_INT 35
4088: PPUSH
4089: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
4093: LD_INT 35
4095: PPUSH
4096: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
4100: LD_ADDR_VAR 0 1
4104: PUSH
4105: LD_INT 22
4107: PUSH
4108: LD_INT 3
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: PUSH
4115: LD_INT 21
4117: PUSH
4118: LD_INT 2
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PUSH
4125: LD_INT 58
4127: PUSH
4128: EMPTY
4129: LIST
4130: PUSH
4131: EMPTY
4132: LIST
4133: LIST
4134: LIST
4135: PPUSH
4136: CALL_OW 69
4140: PUSH
4141: FOR_IN
4142: IFFALSE 4212
// begin for j in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) do
4144: LD_ADDR_VAR 0 2
4148: PUSH
4149: LD_INT 22
4151: PUSH
4152: LD_INT 3
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: PUSH
4159: LD_INT 21
4161: PUSH
4162: LD_INT 1
4164: PUSH
4165: EMPTY
4166: LIST
4167: LIST
4168: PUSH
4169: LD_INT 25
4171: PUSH
4172: LD_INT 3
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: LIST
4183: PPUSH
4184: CALL_OW 69
4188: PUSH
4189: FOR_IN
4190: IFFALSE 4208
// begin ComEnterUnit ( j , i ) ;
4192: LD_VAR 0 2
4196: PPUSH
4197: LD_VAR 0 1
4201: PPUSH
4202: CALL_OW 120
// end ;
4206: GO 4189
4208: POP
4209: POP
// end ;
4210: GO 4141
4212: POP
4213: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) = 0 or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 ;
4214: LD_INT 22
4216: PUSH
4217: LD_INT 3
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PUSH
4224: LD_INT 21
4226: PUSH
4227: LD_INT 2
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: PUSH
4234: LD_INT 58
4236: PUSH
4237: EMPTY
4238: LIST
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: LIST
4244: PPUSH
4245: CALL_OW 69
4249: PUSH
4250: LD_INT 0
4252: EQUAL
4253: PUSH
4254: LD_INT 22
4256: PUSH
4257: LD_INT 3
4259: PUSH
4260: EMPTY
4261: LIST
4262: LIST
4263: PUSH
4264: LD_INT 21
4266: PUSH
4267: LD_INT 1
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: PUSH
4274: LD_INT 25
4276: PUSH
4277: LD_INT 3
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: LIST
4288: PPUSH
4289: CALL_OW 69
4293: PUSH
4294: LD_INT 0
4296: EQUAL
4297: OR
4298: IFFALSE 4093
// end ;
4300: PPOPN 2
4302: END
// every 0 0$1 do var i , tmp ;
4303: GO 4305
4305: DISABLE
4306: LD_INT 0
4308: PPUSH
4309: PPUSH
// begin enable ;
4310: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
4311: LD_ADDR_VAR 0 2
4315: PUSH
4316: LD_INT 22
4318: PUSH
4319: LD_INT 1
4321: PUSH
4322: EMPTY
4323: LIST
4324: LIST
4325: PUSH
4326: LD_INT 21
4328: PUSH
4329: LD_INT 1
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: PUSH
4336: EMPTY
4337: LIST
4338: LIST
4339: PPUSH
4340: CALL_OW 69
4344: ST_TO_ADDR
// for i in tmp do
4345: LD_ADDR_VAR 0 1
4349: PUSH
4350: LD_VAR 0 2
4354: PUSH
4355: FOR_IN
4356: IFFALSE 4478
// begin if GetDistUnits ( i , vehicle1 ) < 4 or GetDistUnits ( i , vehicle2 ) < 4 then
4358: LD_VAR 0 1
4362: PPUSH
4363: LD_INT 5
4365: PPUSH
4366: CALL_OW 296
4370: PUSH
4371: LD_INT 4
4373: LESS
4374: PUSH
4375: LD_VAR 0 1
4379: PPUSH
4380: LD_INT 4
4382: PPUSH
4383: CALL_OW 296
4387: PUSH
4388: LD_INT 4
4390: LESS
4391: OR
4392: IFFALSE 4476
// begin disable ;
4394: DISABLE
// CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4395: LD_INT 5
4397: PUSH
4398: LD_INT 4
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PPUSH
4405: CALL_OW 85
// if IsOK ( Bobby ) then
4409: LD_EXP 2
4413: PPUSH
4414: CALL_OW 302
4418: IFFALSE 4455
// begin DialogueOn ;
4420: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4424: LD_EXP 2
4428: PPUSH
4429: LD_STRING DX2-Bobby-1
4431: PPUSH
4432: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4436: LD_EXP 1
4440: PPUSH
4441: LD_STRING DX2-JMM-1a
4443: PPUSH
4444: CALL_OW 88
// DialogueOff ;
4448: CALL_OW 7
// disable ;
4452: DISABLE
// end else
4453: GO 4476
// begin DialogueOn ;
4455: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4459: LD_EXP 1
4463: PPUSH
4464: LD_STRING DX2-JMM-1
4466: PPUSH
4467: CALL_OW 88
// DialogueOff ;
4471: CALL_OW 7
// disable ;
4475: DISABLE
// end ; end ; end ;
4476: GO 4355
4478: POP
4479: POP
// end ;
4480: PPOPN 2
4482: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4483: LD_INT 22
4485: PUSH
4486: LD_INT 1
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 23
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 21
4505: PUSH
4506: LD_INT 2
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 34
4515: PUSH
4516: LD_INT 42
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: PPUSH
4529: CALL_OW 69
4533: IFFALSE 4954
4535: GO 4537
4537: DISABLE
4538: LD_INT 0
4540: PPUSH
4541: PPUSH
4542: PPUSH
4543: PPUSH
4544: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4545: LD_ADDR_VAR 0 1
4549: PUSH
4550: LD_INT 22
4552: PUSH
4553: LD_INT 1
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: PUSH
4560: LD_INT 23
4562: PUSH
4563: LD_INT 3
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PUSH
4570: LD_INT 21
4572: PUSH
4573: LD_INT 2
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: PUSH
4580: LD_INT 34
4582: PUSH
4583: LD_INT 42
4585: PUSH
4586: EMPTY
4587: LIST
4588: LIST
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: PPUSH
4596: CALL_OW 69
4600: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4601: LD_ADDR_VAR 0 3
4605: PUSH
4606: LD_INT 22
4608: PUSH
4609: LD_INT 1
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: PUSH
4616: LD_INT 21
4618: PUSH
4619: LD_INT 1
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PUSH
4626: LD_INT 26
4628: PUSH
4629: LD_INT 1
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: LIST
4640: PPUSH
4641: CALL_OW 69
4645: PUSH
4646: LD_EXP 1
4650: PUSH
4651: LD_EXP 3
4655: PUSH
4656: LD_EXP 2
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: LIST
4665: DIFF
4666: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4667: LD_ADDR_VAR 0 4
4671: PUSH
4672: LD_INT 22
4674: PUSH
4675: LD_INT 1
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: PUSH
4682: LD_INT 21
4684: PUSH
4685: LD_INT 1
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: PUSH
4692: LD_INT 26
4694: PUSH
4695: LD_INT 2
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: PUSH
4702: EMPTY
4703: LIST
4704: LIST
4705: LIST
4706: PPUSH
4707: CALL_OW 69
4711: PUSH
4712: LD_EXP 4
4716: PUSH
4717: EMPTY
4718: LIST
4719: DIFF
4720: ST_TO_ADDR
// if not tmp then
4721: LD_VAR 0 1
4725: NOT
4726: IFFALSE 4730
// exit ;
4728: GO 4954
// DialogueOn ;
4730: CALL_OW 6
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4734: LD_ADDR_VAR 0 2
4738: PUSH
4739: LD_VAR 0 1
4743: PUSH
4744: LD_INT 1
4746: ARRAY
4747: PPUSH
4748: CALL_OW 311
4752: ST_TO_ADDR
// if not speaker then
4753: LD_VAR 0 2
4757: NOT
4758: IFFALSE 4762
// exit ;
4760: GO 4954
// if speaker = JMM then
4762: LD_VAR 0 2
4766: PUSH
4767: LD_EXP 1
4771: EQUAL
4772: IFFALSE 4806
// begin if Lisa then
4774: LD_EXP 4
4778: IFFALSE 4792
// Say ( Lisa , DX2b-Lisa-1 ) ;
4780: LD_EXP 4
4784: PPUSH
4785: LD_STRING DX2b-Lisa-1
4787: PPUSH
4788: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4792: LD_EXP 1
4796: PPUSH
4797: LD_STRING DX2b-JMM-1
4799: PPUSH
4800: CALL_OW 88
// end else
4804: GO 4950
// begin Say ( JMM , DX2a-JMM-1 ) ;
4806: LD_EXP 1
4810: PPUSH
4811: LD_STRING DX2a-JMM-1
4813: PPUSH
4814: CALL_OW 88
// if speaker = Bobby then
4818: LD_VAR 0 2
4822: PUSH
4823: LD_EXP 2
4827: EQUAL
4828: IFFALSE 4842
// Say ( Bobby , DX2a-Bobby-1 ) ;
4830: LD_EXP 2
4834: PPUSH
4835: LD_STRING DX2a-Bobby-1
4837: PPUSH
4838: CALL_OW 88
// if speaker = Cyrus then
4842: LD_VAR 0 2
4846: PUSH
4847: LD_EXP 3
4851: EQUAL
4852: IFFALSE 4866
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4854: LD_EXP 3
4858: PPUSH
4859: LD_STRING DX2a-Cyrus-1
4861: PPUSH
4862: CALL_OW 88
// if speaker = Lisa then
4866: LD_VAR 0 2
4870: PUSH
4871: LD_EXP 4
4875: EQUAL
4876: IFFALSE 4890
// Say ( Lisa , DX2a-Lisa-1 ) ;
4878: LD_EXP 4
4882: PPUSH
4883: LD_STRING DX2a-Lisa-1
4885: PPUSH
4886: CALL_OW 88
// if speaker in temp1 then
4890: LD_VAR 0 2
4894: PUSH
4895: LD_VAR 0 3
4899: IN
4900: IFFALSE 4914
// Say ( speaker , DX2a-Sol1-1 ) ;
4902: LD_VAR 0 2
4906: PPUSH
4907: LD_STRING DX2a-Sol1-1
4909: PPUSH
4910: CALL_OW 88
// if speaker in temp2 then
4914: LD_VAR 0 2
4918: PUSH
4919: LD_VAR 0 4
4923: IN
4924: IFFALSE 4938
// Say ( speaker , DX2a-FSol1-1 ) ;
4926: LD_VAR 0 2
4930: PPUSH
4931: LD_STRING DX2a-FSol1-1
4933: PPUSH
4934: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4938: LD_EXP 1
4942: PPUSH
4943: LD_STRING DX2a-JMM-2
4945: PPUSH
4946: CALL_OW 88
// end ; DialogueOff ;
4950: CALL_OW 7
// end ;
4954: PPOPN 5
4956: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4957: LD_INT 1
4959: PPUSH
4960: CALL_OW 255
4964: PUSH
4965: LD_INT 1
4967: EQUAL
4968: PUSH
4969: LD_INT 10
4971: PPUSH
4972: CALL_OW 255
4976: PUSH
4977: LD_INT 1
4979: EQUAL
4980: OR
4981: IFFALSE 5041
4983: GO 4985
4985: DISABLE
// begin DialogueOn ;
4986: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4990: LD_EXP 1
4994: PPUSH
4995: LD_STRING D3-JMM-1
4997: PPUSH
4998: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
5002: LD_EXP 9
5006: PPUSH
5007: LD_STRING D3-Pow-1
5009: PPUSH
5010: CALL_OW 94
// if IsOK ( Cyrus ) then
5014: LD_EXP 3
5018: PPUSH
5019: CALL_OW 302
5023: IFFALSE 5037
// Say ( Cyrus , D3-Cyrus-1 ) ;
5025: LD_EXP 3
5029: PPUSH
5030: LD_STRING D3-Cyrus-1
5032: PPUSH
5033: CALL_OW 88
// DialogueOff ;
5037: CALL_OW 7
// end ;
5041: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < 2 do var temp , i ;
5042: LD_INT 1
5044: PPUSH
5045: CALL_OW 255
5049: PUSH
5050: LD_INT 1
5052: EQUAL
5053: PUSH
5054: LD_INT 10
5056: PPUSH
5057: CALL_OW 255
5061: PUSH
5062: LD_INT 1
5064: EQUAL
5065: AND
5066: PUSH
5067: LD_INT 22
5069: PUSH
5070: LD_INT 3
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: PUSH
5077: LD_INT 21
5079: PUSH
5080: LD_INT 1
5082: PUSH
5083: EMPTY
5084: LIST
5085: LIST
5086: PUSH
5087: EMPTY
5088: LIST
5089: LIST
5090: PPUSH
5091: CALL_OW 69
5095: PUSH
5096: LD_INT 2
5098: LESS
5099: AND
5100: IFFALSE 6352
5102: GO 5104
5104: DISABLE
5105: LD_INT 0
5107: PPUSH
5108: PPUSH
// begin wait ( 0 0$03 ) ;
5109: LD_INT 105
5111: PPUSH
5112: CALL_OW 67
// DialogueOn ;
5116: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5120: LD_EXP 1
5124: PPUSH
5125: LD_STRING D3a-JMM-1
5127: PPUSH
5128: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5132: LD_EXP 9
5136: PPUSH
5137: LD_STRING D3a-Pow-1
5139: PPUSH
5140: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5144: LD_EXP 1
5148: PPUSH
5149: LD_STRING D3a-JMM-2
5151: PPUSH
5152: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5156: LD_EXP 9
5160: PPUSH
5161: LD_STRING D3a-Pow-2
5163: PPUSH
5164: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5168: LD_EXP 1
5172: PPUSH
5173: LD_STRING D3a-JMM-3
5175: PPUSH
5176: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5180: LD_EXP 9
5184: PPUSH
5185: LD_STRING D3a-Pow-3
5187: PPUSH
5188: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5192: LD_EXP 1
5196: PPUSH
5197: LD_STRING D3a-JMM-4
5199: PPUSH
5200: CALL_OW 88
// DialogueOff ;
5204: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5208: LD_STRING M2
5210: PPUSH
5211: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5215: LD_EXP 1
5219: PPUSH
5220: LD_STRING D3b-JMM-1
5222: PPUSH
5223: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5227: LD_INT 35
5229: PPUSH
5230: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
5234: LD_INT 22
5236: PPUSH
5237: LD_INT 22
5239: PUSH
5240: LD_INT 1
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: LD_INT 25
5249: PUSH
5250: LD_INT 2
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PPUSH
5261: CALL_OW 70
5265: IFFALSE 5227
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5267: LD_ADDR_VAR 0 1
5271: PUSH
5272: LD_INT 22
5274: PUSH
5275: LD_INT 1
5277: PUSH
5278: EMPTY
5279: LIST
5280: LIST
5281: PUSH
5282: LD_INT 23
5284: PUSH
5285: LD_INT 1
5287: PUSH
5288: EMPTY
5289: LIST
5290: LIST
5291: PUSH
5292: LD_INT 25
5294: PUSH
5295: LD_INT 2
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: PUSH
5302: LD_INT 50
5304: PUSH
5305: EMPTY
5306: LIST
5307: PUSH
5308: LD_INT 56
5310: PUSH
5311: EMPTY
5312: LIST
5313: PUSH
5314: EMPTY
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: PPUSH
5321: CALL_OW 69
5325: PUSH
5326: LD_EXP 1
5330: PUSH
5331: LD_EXP 5
5335: PUSH
5336: EMPTY
5337: LIST
5338: LIST
5339: DIFF
5340: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5341: LD_INT 35
5343: PPUSH
5344: CALL_OW 67
// until temp > 0 ;
5348: LD_VAR 0 1
5352: PUSH
5353: LD_INT 0
5355: GREATER
5356: IFFALSE 5267
// wait ( 0 0$5 ) ;
5358: LD_INT 175
5360: PPUSH
5361: CALL_OW 67
// PrepareRussianHeroes ;
5365: CALL 11651 0 0
// InGameOn ;
5369: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5373: LD_EXP 8
5377: PPUSH
5378: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5382: LD_EXP 1
5386: PUSH
5387: LD_VAR 0 1
5391: PUSH
5392: LD_INT 1
5394: ARRAY
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PPUSH
5400: LD_EXP 8
5404: PPUSH
5405: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5409: LD_EXP 8
5413: PPUSH
5414: LD_VAR 0 1
5418: PUSH
5419: LD_INT 1
5421: ARRAY
5422: PPUSH
5423: CALL_OW 119
// Wait ( 0 0$02 ) ;
5427: LD_INT 70
5429: PPUSH
5430: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5434: LD_EXP 8
5438: PPUSH
5439: LD_STRING D4-Mikh-1
5441: PPUSH
5442: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5446: LD_VAR 0 1
5450: PUSH
5451: LD_INT 1
5453: ARRAY
5454: PPUSH
5455: CALL_OW 258
5459: PUSH
5460: LD_INT 1
5462: EQUAL
5463: IFFALSE 5481
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5465: LD_VAR 0 1
5469: PUSH
5470: LD_INT 1
5472: ARRAY
5473: PPUSH
5474: LD_STRING D4-Sol1-1
5476: PPUSH
5477: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5481: LD_VAR 0 1
5485: PUSH
5486: LD_INT 1
5488: ARRAY
5489: PPUSH
5490: CALL_OW 258
5494: PUSH
5495: LD_INT 2
5497: EQUAL
5498: IFFALSE 5516
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5500: LD_VAR 0 1
5504: PUSH
5505: LD_INT 1
5507: ARRAY
5508: PPUSH
5509: LD_STRING D4-FSol1-1
5511: PPUSH
5512: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5516: LD_EXP 8
5520: PPUSH
5521: LD_STRING D4-Mikh-2
5523: PPUSH
5524: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5528: LD_VAR 0 1
5532: PUSH
5533: LD_INT 1
5535: ARRAY
5536: PPUSH
5537: CALL_OW 258
5541: PUSH
5542: LD_INT 1
5544: EQUAL
5545: IFFALSE 5563
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5547: LD_VAR 0 1
5551: PUSH
5552: LD_INT 1
5554: ARRAY
5555: PPUSH
5556: LD_STRING D4-Sol1-2
5558: PPUSH
5559: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5563: LD_VAR 0 1
5567: PUSH
5568: LD_INT 1
5570: ARRAY
5571: PPUSH
5572: CALL_OW 258
5576: PUSH
5577: LD_INT 2
5579: EQUAL
5580: IFFALSE 5598
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5582: LD_VAR 0 1
5586: PUSH
5587: LD_INT 1
5589: ARRAY
5590: PPUSH
5591: LD_STRING D4-FSol1-2
5593: PPUSH
5594: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5598: LD_EXP 8
5602: PPUSH
5603: LD_STRING D4-Mikh-3
5605: PPUSH
5606: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5610: LD_VAR 0 1
5614: PUSH
5615: LD_INT 1
5617: ARRAY
5618: PPUSH
5619: CALL_OW 258
5623: PUSH
5624: LD_INT 1
5626: EQUAL
5627: IFFALSE 5645
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5629: LD_VAR 0 1
5633: PUSH
5634: LD_INT 1
5636: ARRAY
5637: PPUSH
5638: LD_STRING D4-Sol1-3
5640: PPUSH
5641: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5645: LD_VAR 0 1
5649: PUSH
5650: LD_INT 1
5652: ARRAY
5653: PPUSH
5654: CALL_OW 258
5658: PUSH
5659: LD_INT 2
5661: EQUAL
5662: IFFALSE 5680
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5664: LD_VAR 0 1
5668: PUSH
5669: LD_INT 1
5671: ARRAY
5672: PPUSH
5673: LD_STRING D4-FSol1-3
5675: PPUSH
5676: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5680: LD_EXP 8
5684: PPUSH
5685: LD_STRING D4-Mikh-4
5687: PPUSH
5688: CALL_OW 88
// case query ( Qs1 ) of 1 :
5692: LD_STRING Qs1
5694: PPUSH
5695: CALL_OW 97
5699: PUSH
5700: LD_INT 1
5702: DOUBLE
5703: EQUAL
5704: IFTRUE 5708
5706: GO 5743
5708: POP
// begin InGameOff ;
5709: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5713: LD_INT 1
5715: PPUSH
5716: LD_INT 6
5718: PPUSH
5719: LD_INT 2
5721: PPUSH
5722: LD_INT 1
5724: PPUSH
5725: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5729: LD_EXP 8
5733: PPUSH
5734: LD_INT 17
5736: PPUSH
5737: CALL_OW 113
// end ; 2 :
5741: GO 6336
5743: LD_INT 2
5745: DOUBLE
5746: EQUAL
5747: IFTRUE 5751
5749: GO 6301
5751: POP
// begin repeat wait ( 0 0$1 ) ;
5752: LD_INT 35
5754: PPUSH
5755: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5759: LD_VAR 0 1
5763: PUSH
5764: LD_INT 1
5766: ARRAY
5767: PPUSH
5768: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5772: LD_VAR 0 1
5776: PUSH
5777: LD_INT 1
5779: ARRAY
5780: PPUSH
5781: LD_EXP 1
5785: PPUSH
5786: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5790: LD_EXP 8
5794: PPUSH
5795: LD_EXP 1
5799: PPUSH
5800: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5804: LD_EXP 1
5808: PPUSH
5809: LD_EXP 8
5813: PPUSH
5814: CALL_OW 296
5818: PUSH
5819: LD_INT 5
5821: LESS
5822: IFFALSE 5752
// ComTurnUnit ( Mikhail , JMM ) ;
5824: LD_EXP 8
5828: PPUSH
5829: LD_EXP 1
5833: PPUSH
5834: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5838: LD_EXP 1
5842: PPUSH
5843: LD_STRING D4b-JMM-1
5845: PPUSH
5846: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5850: LD_EXP 8
5854: PPUSH
5855: LD_STRING D4b-Mikh-1
5857: PPUSH
5858: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5862: LD_EXP 1
5866: PPUSH
5867: LD_STRING D4b-JMM-2
5869: PPUSH
5870: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5874: LD_EXP 8
5878: PPUSH
5879: LD_STRING D4b-Mikh-2
5881: PPUSH
5882: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5886: LD_EXP 1
5890: PPUSH
5891: LD_STRING D4b-JMM-3
5893: PPUSH
5894: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5898: LD_EXP 8
5902: PPUSH
5903: LD_STRING D4b-Mikh-3
5905: PPUSH
5906: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5910: LD_EXP 1
5914: PPUSH
5915: LD_STRING D4b-JMM-4
5917: PPUSH
5918: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5922: LD_EXP 8
5926: PPUSH
5927: LD_STRING D4b-Mikh-4
5929: PPUSH
5930: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5934: LD_EXP 1
5938: PPUSH
5939: LD_STRING D4b-JMM-5
5941: PPUSH
5942: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5946: LD_EXP 8
5950: PPUSH
5951: LD_STRING D4b-Mikh-5
5953: PPUSH
5954: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5958: LD_EXP 1
5962: PPUSH
5963: LD_STRING D4b-JMM-6
5965: PPUSH
5966: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5970: LD_EXP 8
5974: PPUSH
5975: LD_STRING D4b-Mikh-6
5977: PPUSH
5978: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5982: LD_EXP 1
5986: PPUSH
5987: LD_STRING D4b-JMM-7
5989: PPUSH
5990: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5994: LD_EXP 8
5998: PPUSH
5999: LD_STRING D4b-Mikh-7
6001: PPUSH
6002: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6006: LD_VAR 0 1
6010: PUSH
6011: LD_INT 1
6013: ARRAY
6014: PPUSH
6015: CALL_OW 258
6019: PUSH
6020: LD_INT 1
6022: EQUAL
6023: IFFALSE 6041
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6025: LD_VAR 0 1
6029: PUSH
6030: LD_INT 1
6032: ARRAY
6033: PPUSH
6034: LD_STRING D4b-Sol1-7
6036: PPUSH
6037: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6041: LD_VAR 0 1
6045: PUSH
6046: LD_INT 1
6048: ARRAY
6049: PPUSH
6050: CALL_OW 258
6054: PUSH
6055: LD_INT 2
6057: EQUAL
6058: IFFALSE 6076
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6060: LD_VAR 0 1
6064: PUSH
6065: LD_INT 1
6067: ARRAY
6068: PPUSH
6069: LD_STRING D4b-FSol1-7
6071: PPUSH
6072: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6076: LD_EXP 1
6080: PPUSH
6081: LD_STRING D4b-JMM-8
6083: PPUSH
6084: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6088: LD_VAR 0 1
6092: PUSH
6093: LD_INT 1
6095: ARRAY
6096: PPUSH
6097: CALL_OW 258
6101: PUSH
6102: LD_INT 1
6104: EQUAL
6105: IFFALSE 6123
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6107: LD_VAR 0 1
6111: PUSH
6112: LD_INT 1
6114: ARRAY
6115: PPUSH
6116: LD_STRING D4b-Sol1-8
6118: PPUSH
6119: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6123: LD_VAR 0 1
6127: PUSH
6128: LD_INT 1
6130: ARRAY
6131: PPUSH
6132: CALL_OW 258
6136: PUSH
6137: LD_INT 2
6139: EQUAL
6140: IFFALSE 6158
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6142: LD_VAR 0 1
6146: PUSH
6147: LD_INT 1
6149: ARRAY
6150: PPUSH
6151: LD_STRING D4b-FSol1-8
6153: PPUSH
6154: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6158: LD_EXP 1
6162: PPUSH
6163: LD_STRING D4b-JMM-9
6165: PPUSH
6166: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6170: LD_EXP 8
6174: PPUSH
6175: LD_INT 1
6177: PPUSH
6178: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6182: LD_ADDR_VAR 0 2
6186: PUSH
6187: LD_INT 22
6189: PUSH
6190: LD_INT 1
6192: PUSH
6193: EMPTY
6194: LIST
6195: LIST
6196: PUSH
6197: EMPTY
6198: LIST
6199: PPUSH
6200: CALL_OW 69
6204: PUSH
6205: FOR_IN
6206: IFFALSE 6219
// ComFree ( i ) ;
6208: LD_VAR 0 2
6212: PPUSH
6213: CALL_OW 139
6217: GO 6205
6219: POP
6220: POP
// repeat wait ( 0 0$1 ) ;
6221: LD_INT 35
6223: PPUSH
6224: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6228: LD_EXP 8
6232: PPUSH
6233: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6237: LD_EXP 8
6241: PUSH
6242: LD_VAR 0 1
6246: PUSH
6247: LD_INT 1
6249: ARRAY
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PPUSH
6255: LD_INT 1
6257: PPUSH
6258: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6262: LD_EXP 8
6266: PPUSH
6267: CALL_OW 310
6271: IFFALSE 6221
// mikhailDepot = IsInUnit ( Mikhail ) ;
6273: LD_ADDR_EXP 23
6277: PUSH
6278: LD_EXP 8
6282: PPUSH
6283: CALL_OW 310
6287: ST_TO_ADDR
// InGameOff ;
6288: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6292: LD_STRING M3
6294: PPUSH
6295: CALL_OW 337
// end ; 3 :
6299: GO 6336
6301: LD_INT 3
6303: DOUBLE
6304: EQUAL
6305: IFTRUE 6309
6307: GO 6335
6309: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6310: LD_EXP 8
6314: PPUSH
6315: LD_INT 17
6317: PPUSH
6318: CALL_OW 113
// wait ( 0 0$3 ) ;
6322: LD_INT 105
6324: PPUSH
6325: CALL_OW 67
// InGameOff ;
6329: CALL_OW 9
// end ; end ;
6333: GO 6336
6335: POP
// PrepareTigers ;
6336: CALL 14501 0 0
// RussianTrap ;
6340: CALL 10047 0 0
// tigersRespawn = 1 ;
6344: LD_ADDR_EXP 30
6348: PUSH
6349: LD_INT 1
6351: ST_TO_ADDR
// end ;
6352: PPOPN 2
6354: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6355: LD_INT 1
6357: PPUSH
6358: CALL_OW 255
6362: PUSH
6363: LD_INT 1
6365: EQUAL
6366: PUSH
6367: LD_INT 10
6369: PPUSH
6370: CALL_OW 255
6374: PUSH
6375: LD_INT 1
6377: EQUAL
6378: AND
6379: PUSH
6380: LD_INT 1
6382: PPUSH
6383: CALL_OW 274
6387: PPUSH
6388: LD_INT 1
6390: PPUSH
6391: CALL_OW 275
6395: PUSH
6396: LD_INT 100
6398: GREATEREQUAL
6399: AND
6400: IFFALSE 6549
6402: GO 6404
6404: DISABLE
6405: LD_INT 0
6407: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6408: LD_INT 2100
6410: PPUSH
6411: LD_INT 4200
6413: PPUSH
6414: CALL_OW 12
6418: PUSH
6419: LD_INT 1050
6421: PLUS
6422: PPUSH
6423: CALL_OW 67
// PrepareCargoBays ;
6427: CALL 12784 0 0
// cargoRespawn = 1 ;
6431: LD_ADDR_EXP 28
6435: PUSH
6436: LD_INT 1
6438: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6439: LD_ADDR_VAR 0 1
6443: PUSH
6444: LD_EXP 15
6448: PUSH
6449: LD_EXP 16
6453: PUSH
6454: LD_EXP 17
6458: PUSH
6459: LD_EXP 18
6463: PUSH
6464: EMPTY
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6470: LD_VAR 0 1
6474: PPUSH
6475: LD_INT 17
6477: PPUSH
6478: LD_INT 10
6480: PPUSH
6481: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6485: LD_VAR 0 1
6489: PPUSH
6490: LD_INT 36
6492: PPUSH
6493: LD_INT 13
6495: PPUSH
6496: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6500: LD_VAR 0 1
6504: PPUSH
6505: LD_INT 40
6507: PPUSH
6508: LD_INT 20
6510: PPUSH
6511: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6515: LD_VAR 0 1
6519: PPUSH
6520: LD_INT 53
6522: PPUSH
6523: LD_INT 16
6525: PPUSH
6526: CALL_OW 171
// wait ( 0 0$5 ) ;
6530: LD_INT 175
6532: PPUSH
6533: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6537: LD_EXP 17
6541: PPUSH
6542: LD_STRING D5-Rus2-1
6544: PPUSH
6545: CALL_OW 88
// end ;
6549: PPOPN 1
6551: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6552: LD_EXP 28
6556: PUSH
6557: LD_INT 1
6559: EQUAL
6560: IFFALSE 6715
6562: GO 6564
6564: DISABLE
6565: LD_INT 0
6567: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6568: LD_ADDR_VAR 0 1
6572: PUSH
6573: LD_INT 22
6575: PUSH
6576: LD_INT 3
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PUSH
6583: LD_INT 21
6585: PUSH
6586: LD_INT 2
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: PUSH
6593: LD_INT 34
6595: PUSH
6596: LD_INT 51
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: LIST
6607: PPUSH
6608: CALL_OW 69
6612: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6613: LD_INT 105
6615: PPUSH
6616: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6620: LD_VAR 0 1
6624: PPUSH
6625: LD_INT 3
6627: PUSH
6628: LD_INT 60
6630: PUSH
6631: EMPTY
6632: LIST
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: PPUSH
6638: CALL_OW 72
6642: PUSH
6643: LD_VAR 0 1
6647: PPUSH
6648: LD_INT 3
6650: PUSH
6651: LD_INT 24
6653: PUSH
6654: LD_INT 980
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: PUSH
6661: EMPTY
6662: LIST
6663: LIST
6664: PPUSH
6665: CALL_OW 72
6669: OR
6670: IFFALSE 6613
// ComMoveXY ( cargos , 7 , 9 ) ;
6672: LD_VAR 0 1
6676: PPUSH
6677: LD_INT 7
6679: PPUSH
6680: LD_INT 9
6682: PPUSH
6683: CALL_OW 111
// cargoSee = 1 ;
6687: LD_ADDR_EXP 29
6691: PUSH
6692: LD_INT 1
6694: ST_TO_ADDR
// cargoEscape = 1 ;
6695: LD_ADDR_EXP 20
6699: PUSH
6700: LD_INT 1
6702: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6703: LD_EXP 17
6707: PPUSH
6708: LD_STRING D5-Rus2-1a
6710: PPUSH
6711: CALL_OW 88
// end ;
6715: PPOPN 1
6717: END
// every 0 0$1 trigger cargoEscape > 0 do
6718: LD_EXP 20
6722: PUSH
6723: LD_INT 0
6725: GREATER
6726: IFFALSE 6873
6728: GO 6730
6730: DISABLE
// begin enable ;
6731: ENABLE
// ComMoveToArea ( [ cargo1 , cargo2 ] , RussianAttack ) ;
6732: LD_EXP 15
6736: PUSH
6737: LD_EXP 16
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: PPUSH
6746: LD_INT 13
6748: PPUSH
6749: CALL_OW 113
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6753: LD_EXP 15
6757: PPUSH
6758: LD_INT 13
6760: PPUSH
6761: CALL_OW 308
6765: PUSH
6766: LD_EXP 17
6770: PPUSH
6771: LD_INT 13
6773: PPUSH
6774: CALL_OW 308
6778: OR
6779: IFFALSE 6813
// begin RemoveUnit ( cargo1 ) ;
6781: LD_EXP 15
6785: PPUSH
6786: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6790: LD_EXP 17
6794: PPUSH
6795: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6799: LD_ADDR_EXP 20
6803: PUSH
6804: LD_EXP 20
6808: PUSH
6809: LD_INT 1
6811: PLUS
6812: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6813: LD_EXP 16
6817: PPUSH
6818: LD_INT 13
6820: PPUSH
6821: CALL_OW 308
6825: PUSH
6826: LD_EXP 18
6830: PPUSH
6831: LD_INT 13
6833: PPUSH
6834: CALL_OW 308
6838: OR
6839: IFFALSE 6873
// begin RemoveUnit ( cargo2 ) ;
6841: LD_EXP 16
6845: PPUSH
6846: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6850: LD_EXP 18
6854: PPUSH
6855: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6859: LD_ADDR_EXP 20
6863: PUSH
6864: LD_EXP 20
6868: PUSH
6869: LD_INT 1
6871: PLUS
6872: ST_TO_ADDR
// end ; end ;
6873: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
6874: LD_EXP 20
6878: PUSH
6879: LD_INT 1
6881: GREATER
6882: IFFALSE 7039
6884: GO 6886
6886: DISABLE
6887: LD_INT 0
6889: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
6890: LD_INT 4
6892: PPUSH
6893: LD_INT 1
6895: PPUSH
6896: LD_INT 1
6898: PPUSH
6899: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6903: LD_INT 31
6905: PPUSH
6906: LD_INT 1
6908: PPUSH
6909: LD_INT 1
6911: PPUSH
6912: CALL_OW 324
// if IsOK ( Jerry ) then
6916: LD_EXP 7
6920: PPUSH
6921: CALL_OW 302
6925: IFFALSE 6941
// Say ( Jerry , D5a-Sol1-1 ) else
6927: LD_EXP 7
6931: PPUSH
6932: LD_STRING D5a-Sol1-1
6934: PPUSH
6935: CALL_OW 88
6939: GO 7027
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
6941: LD_ADDR_VAR 0 1
6945: PUSH
6946: LD_INT 22
6948: PUSH
6949: LD_INT 1
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: LD_INT 26
6958: PUSH
6959: LD_INT 1
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PPUSH
6970: CALL_OW 69
6974: PUSH
6975: LD_EXP 1
6979: PUSH
6980: LD_EXP 2
6984: PUSH
6985: LD_EXP 3
6989: PUSH
6990: LD_EXP 5
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: DIFF
7001: ST_TO_ADDR
// if not speaker then
7002: LD_VAR 0 1
7006: NOT
7007: IFFALSE 7011
// exit ;
7009: GO 7039
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7011: LD_VAR 0 1
7015: PUSH
7016: LD_INT 1
7018: ARRAY
7019: PPUSH
7020: LD_STRING D5a-Sol1-1
7022: PPUSH
7023: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7027: LD_EXP 1
7031: PPUSH
7032: LD_STRING D5a-JMM-1
7034: PPUSH
7035: CALL_OW 88
// end ;
7039: PPOPN 1
7041: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7042: LD_INT 1
7044: PPUSH
7045: CALL_OW 255
7049: PUSH
7050: LD_INT 3
7052: EQUAL
7053: PUSH
7054: LD_INT 1
7056: PPUSH
7057: CALL_OW 256
7061: PUSH
7062: LD_INT 1000
7064: LESS
7065: AND
7066: PUSH
7067: LD_INT 10
7069: PPUSH
7070: CALL_OW 255
7074: PUSH
7075: LD_INT 3
7077: EQUAL
7078: PUSH
7079: LD_INT 10
7081: PPUSH
7082: CALL_OW 256
7086: PUSH
7087: LD_INT 1000
7089: LESS
7090: AND
7091: OR
7092: IFFALSE 7109
7094: GO 7096
7096: DISABLE
// begin Say ( JMM , D8-JMM-1 ) ;
7097: LD_EXP 1
7101: PPUSH
7102: LD_STRING D8-JMM-1
7104: PPUSH
7105: CALL_OW 88
// end ;
7109: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7110: LD_EXP 8
7114: PPUSH
7115: CALL_OW 310
7119: PUSH
7120: LD_INT 1
7122: EQUAL
7123: PUSH
7124: LD_EXP 22
7128: PUSH
7129: LD_INT 3
7131: EQUAL
7132: NOT
7133: AND
7134: IFFALSE 7156
7136: GO 7138
7138: DISABLE
// begin mikhailInBase = 1 ;
7139: LD_ADDR_EXP 22
7143: PUSH
7144: LD_INT 1
7146: ST_TO_ADDR
// mikhailStatus = 1 ;
7147: LD_ADDR_EXP 21
7151: PUSH
7152: LD_INT 1
7154: ST_TO_ADDR
// enable ;
7155: ENABLE
// end ;
7156: END
// export function AskMikhail ; begin
7157: LD_INT 0
7159: PPUSH
// case query ( QMikh2 ) of 1 :
7160: LD_STRING QMikh2
7162: PPUSH
7163: CALL_OW 97
7167: PUSH
7168: LD_INT 1
7170: DOUBLE
7171: EQUAL
7172: IFTRUE 7176
7174: GO 7243
7176: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7177: LD_INT 1
7179: PPUSH
7180: LD_INT 6
7182: PPUSH
7183: LD_INT 2
7185: PPUSH
7186: LD_INT 1
7188: PPUSH
7189: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7193: LD_EXP 8
7197: PPUSH
7198: LD_INT 6
7200: PPUSH
7201: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7205: LD_EXP 8
7209: PPUSH
7210: CALL_OW 122
// wait ( 0 0$1 ) ;
7214: LD_INT 35
7216: PPUSH
7217: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7221: LD_EXP 8
7225: PPUSH
7226: LD_INT 17
7228: PPUSH
7229: CALL_OW 113
// mikhailInbase = 0 ;
7233: LD_ADDR_EXP 22
7237: PUSH
7238: LD_INT 0
7240: ST_TO_ADDR
// end ; 2 :
7241: GO 7484
7243: LD_INT 2
7245: DOUBLE
7246: EQUAL
7247: IFTRUE 7251
7249: GO 7424
7251: POP
// begin mikhailInBase = 2 ;
7252: LD_ADDR_EXP 22
7256: PUSH
7257: LD_INT 2
7259: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7260: LD_EXP 8
7264: PPUSH
7265: LD_INT 6
7267: PPUSH
7268: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7272: LD_EXP 8
7276: PPUSH
7277: CALL_OW 122
// wait ( 0 0$1 ) ;
7281: LD_INT 35
7283: PPUSH
7284: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7288: LD_EXP 8
7292: PPUSH
7293: LD_EXP 8
7297: PPUSH
7298: CALL_OW 250
7302: PUSH
7303: LD_INT 2
7305: PLUS
7306: PPUSH
7307: LD_EXP 8
7311: PPUSH
7312: CALL_OW 251
7316: PUSH
7317: LD_INT 2
7319: PLUS
7320: PPUSH
7321: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7325: LD_EXP 8
7329: PPUSH
7330: LD_EXP 8
7334: PPUSH
7335: CALL_OW 250
7339: PUSH
7340: LD_INT 1
7342: PLUS
7343: PPUSH
7344: LD_EXP 8
7348: PPUSH
7349: CALL_OW 251
7353: PUSH
7354: LD_INT 2
7356: PLUS
7357: PPUSH
7358: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7362: LD_EXP 8
7366: PPUSH
7367: LD_EXP 8
7371: PPUSH
7372: CALL_OW 250
7376: PUSH
7377: LD_INT 2
7379: PLUS
7380: PPUSH
7381: LD_EXP 8
7385: PPUSH
7386: CALL_OW 251
7390: PPUSH
7391: CALL_OW 171
// wait ( 0 0$5 ) ;
7395: LD_INT 175
7397: PPUSH
7398: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7402: LD_EXP 8
7406: PPUSH
7407: LD_INT 25
7409: PPUSH
7410: CALL_OW 113
// mikhailInBase = 4 ;
7414: LD_ADDR_EXP 22
7418: PUSH
7419: LD_INT 4
7421: ST_TO_ADDR
// end ; 3 :
7422: GO 7484
7424: LD_INT 3
7426: DOUBLE
7427: EQUAL
7428: IFTRUE 7432
7430: GO 7483
7432: POP
// begin SetSide ( Mikhail , 6 ) ;
7433: LD_EXP 8
7437: PPUSH
7438: LD_INT 6
7440: PPUSH
7441: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7445: LD_EXP 8
7449: PPUSH
7450: CALL_OW 122
// wait ( 0 0$1 ) ;
7454: LD_INT 35
7456: PPUSH
7457: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7461: LD_EXP 8
7465: PPUSH
7466: LD_INT 17
7468: PPUSH
7469: CALL_OW 113
// mikhailInbase = 3 ;
7473: LD_ADDR_EXP 22
7477: PUSH
7478: LD_INT 3
7480: ST_TO_ADDR
// end ; end ;
7481: GO 7484
7483: POP
// end ;
7484: LD_VAR 0 1
7488: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7489: LD_EXP 8
7493: PPUSH
7494: LD_INT 25
7496: PPUSH
7497: CALL_OW 308
7501: PUSH
7502: LD_EXP 22
7506: PUSH
7507: LD_INT 4
7509: EQUAL
7510: AND
7511: IFFALSE 7615
7513: GO 7515
7515: DISABLE
// begin enable ;
7516: ENABLE
// mikhailInBase = 1 ;
7517: LD_ADDR_EXP 22
7521: PUSH
7522: LD_INT 1
7524: ST_TO_ADDR
// InGameOn ;
7525: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7529: LD_INT 1
7531: PPUSH
7532: LD_INT 6
7534: PPUSH
7535: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7539: LD_INT 35
7541: PPUSH
7542: CALL_OW 67
// if Carry ( Mikhail ) then
7546: LD_EXP 8
7550: PPUSH
7551: CALL_OW 281
7555: IFFALSE 7566
// ComUnload ( Mikhail ) ;
7557: LD_EXP 8
7561: PPUSH
7562: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7566: LD_EXP 8
7570: PPUSH
7571: LD_INT 1
7573: PPUSH
7574: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7578: LD_EXP 8
7582: PPUSH
7583: CALL_OW 310
7587: IFFALSE 7539
// SetSide ( dep1 , 1 ) ;
7589: LD_INT 1
7591: PPUSH
7592: LD_INT 1
7594: PPUSH
7595: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7599: LD_EXP 8
7603: PPUSH
7604: LD_INT 1
7606: PPUSH
7607: CALL_OW 235
// InGameOff ;
7611: CALL_OW 9
// end ;
7615: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7616: LD_EXP 8
7620: PPUSH
7621: CALL_OW 310
7625: PUSH
7626: LD_EXP 22
7630: PUSH
7631: LD_INT 3
7633: EQUAL
7634: NOT
7635: AND
7636: IFFALSE 7771
7638: GO 7640
7640: DISABLE
// begin enable ;
7641: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7642: LD_INT 22
7644: PUSH
7645: LD_INT 1
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: PUSH
7652: LD_INT 21
7654: PUSH
7655: LD_INT 1
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: PUSH
7662: LD_INT 91
7664: PUSH
7665: LD_EXP 8
7669: PPUSH
7670: CALL_OW 310
7674: PUSH
7675: LD_INT 10
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: LIST
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: LIST
7687: PPUSH
7688: CALL_OW 69
7692: PUSH
7693: LD_INT 1
7695: EQUAL
7696: IFFALSE 7771
// begin mikhailStatus = 4 ;
7698: LD_ADDR_EXP 21
7702: PUSH
7703: LD_INT 4
7705: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
7706: LD_INT 1
7708: PPUSH
7709: LD_INT 6
7711: PPUSH
7712: LD_INT 2
7714: PPUSH
7715: LD_INT 1
7717: PPUSH
7718: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7722: LD_EXP 8
7726: PPUSH
7727: LD_INT 6
7729: PPUSH
7730: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7734: LD_EXP 8
7738: PPUSH
7739: CALL_OW 122
// wait ( 0 0$1 ) ;
7743: LD_INT 35
7745: PPUSH
7746: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7750: LD_EXP 8
7754: PPUSH
7755: LD_INT 17
7757: PPUSH
7758: CALL_OW 113
// mikhailStatus = 3 ;
7762: LD_ADDR_EXP 21
7766: PUSH
7767: LD_INT 3
7769: ST_TO_ADDR
// disable ;
7770: DISABLE
// end ; end ;
7771: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7772: LD_EXP 1
7776: PPUSH
7777: LD_EXP 23
7781: PPUSH
7782: CALL_OW 296
7786: PUSH
7787: LD_INT 5
7789: LESS
7790: PUSH
7791: LD_EXP 21
7795: PUSH
7796: LD_INT 3
7798: EQUAL
7799: AND
7800: PUSH
7801: LD_EXP 22
7805: PUSH
7806: LD_INT 3
7808: EQUAL
7809: NOT
7810: AND
7811: IFFALSE 8033
7813: GO 7815
7815: DISABLE
7816: LD_INT 0
7818: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
7819: LD_ADDR_VAR 0 1
7823: PUSH
7824: LD_INT 22
7826: PUSH
7827: LD_INT 1
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: PUSH
7834: LD_INT 21
7836: PUSH
7837: LD_INT 1
7839: PUSH
7840: EMPTY
7841: LIST
7842: LIST
7843: PUSH
7844: LD_INT 26
7846: PUSH
7847: LD_INT 1
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: LIST
7858: PPUSH
7859: CALL_OW 69
7863: PUSH
7864: LD_EXP 1
7868: PUSH
7869: LD_EXP 5
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: DIFF
7878: ST_TO_ADDR
// DialogueOn ;
7879: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7883: LD_EXP 1
7887: PPUSH
7888: LD_STRING D7-JMM-1
7890: PPUSH
7891: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7895: LD_VAR 0 1
7899: PUSH
7900: LD_INT 1
7902: ARRAY
7903: PPUSH
7904: LD_STRING D7-Sol1-1
7906: PPUSH
7907: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7911: LD_EXP 1
7915: PPUSH
7916: LD_STRING D7-JMM-2
7918: PPUSH
7919: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
7923: LD_VAR 0 1
7927: PUSH
7928: LD_INT 1
7930: ARRAY
7931: PPUSH
7932: LD_STRING D7-Sol1-2
7934: PPUSH
7935: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
7939: LD_EXP 1
7943: PPUSH
7944: LD_STRING D7-JMM-3
7946: PPUSH
7947: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
7951: LD_VAR 0 1
7955: PUSH
7956: LD_INT 1
7958: ARRAY
7959: PPUSH
7960: LD_STRING D7-Sol1-3
7962: PPUSH
7963: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
7967: LD_EXP 3
7971: PPUSH
7972: CALL_OW 302
7976: PUSH
7977: LD_EXP 4
7981: PPUSH
7982: CALL_OW 302
7986: AND
7987: IFFALSE 8029
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
7989: LD_EXP 3
7993: PPUSH
7994: LD_STRING D7-Cyrus-3
7996: PPUSH
7997: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8001: LD_VAR 0 1
8005: PUSH
8006: LD_INT 1
8008: ARRAY
8009: PPUSH
8010: LD_STRING D7-Sol1-4
8012: PPUSH
8013: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8017: LD_EXP 4
8021: PPUSH
8022: LD_STRING D7-Lisa-4
8024: PPUSH
8025: CALL_OW 88
// end ; DialogueOff ;
8029: CALL_OW 7
// end ;
8033: PPOPN 1
8035: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8036: LD_EXP 8
8040: PPUSH
8041: CALL_OW 303
8045: PUSH
8046: LD_EXP 21
8050: PUSH
8051: LD_INT 3
8053: EQUAL
8054: AND
8055: IFFALSE 8069
8057: GO 8059
8059: DISABLE
// begin enable ;
8060: ENABLE
// mikhailStatus = 2 ;
8061: LD_ADDR_EXP 21
8065: PUSH
8066: LD_INT 2
8068: ST_TO_ADDR
// end ;
8069: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8070: LD_EXP 8
8074: PPUSH
8075: LD_INT 17
8077: PPUSH
8078: CALL_OW 308
8082: PUSH
8083: LD_EXP 8
8087: PPUSH
8088: CALL_OW 255
8092: PUSH
8093: LD_INT 6
8095: EQUAL
8096: AND
8097: IFFALSE 8130
8099: GO 8101
8101: DISABLE
// begin if not mikhailInBase = 3 then
8102: LD_EXP 22
8106: PUSH
8107: LD_INT 3
8109: EQUAL
8110: NOT
8111: IFFALSE 8121
// mikhailStatus = 3 ;
8113: LD_ADDR_EXP 21
8117: PUSH
8118: LD_INT 3
8120: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8121: LD_EXP 8
8125: PPUSH
8126: CALL_OW 64
// end ;
8130: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8131: LD_EXP 21
8135: PUSH
8136: LD_INT 3
8138: EQUAL
8139: PUSH
8140: LD_EXP 8
8144: PPUSH
8145: CALL_OW 255
8149: PUSH
8150: LD_INT 6
8152: EQUAL
8153: AND
8154: IFFALSE 8320
8156: GO 8158
8158: DISABLE
8159: LD_INT 0
8161: PPUSH
8162: PPUSH
// begin enable ;
8163: ENABLE
// if IsOk ( Mikhail ) then
8164: LD_EXP 8
8168: PPUSH
8169: CALL_OW 302
8173: IFFALSE 8320
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8175: LD_ADDR_VAR 0 2
8179: PUSH
8180: LD_EXP 8
8184: PPUSH
8185: LD_INT 22
8187: PUSH
8188: LD_INT 1
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: PUSH
8195: LD_INT 21
8197: PUSH
8198: LD_INT 1
8200: PUSH
8201: EMPTY
8202: LIST
8203: LIST
8204: PUSH
8205: EMPTY
8206: LIST
8207: LIST
8208: PPUSH
8209: CALL_OW 69
8213: PPUSH
8214: CALL 10239 0 2
8218: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8219: LD_VAR 0 2
8223: PPUSH
8224: LD_EXP 8
8228: PPUSH
8229: CALL_OW 296
8233: PUSH
8234: LD_INT 8
8236: LESS
8237: IFFALSE 8320
// begin if GetSex ( attacker ) = sex_male then
8239: LD_VAR 0 2
8243: PPUSH
8244: CALL_OW 258
8248: PUSH
8249: LD_INT 1
8251: EQUAL
8252: IFFALSE 8288
// begin disable ;
8254: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8255: LD_VAR 0 2
8259: PPUSH
8260: LD_STRING D7a-Sol1-1
8262: PPUSH
8263: CALL_OW 88
// wait ( 0 0$2 ) ;
8267: LD_INT 70
8269: PPUSH
8270: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8274: LD_VAR 0 2
8278: PPUSH
8279: LD_STRING D7a-Sol1-1a
8281: PPUSH
8282: CALL_OW 88
// end else
8286: GO 8320
// begin disable ;
8288: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8289: LD_VAR 0 2
8293: PPUSH
8294: LD_STRING D7a-FSol1-1
8296: PPUSH
8297: CALL_OW 88
// wait ( 0 0$2 ) ;
8301: LD_INT 70
8303: PPUSH
8304: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8308: LD_VAR 0 2
8312: PPUSH
8313: LD_STRING D7a-FSol1-1a
8315: PPUSH
8316: CALL_OW 88
// end ; end ; end ; end ;
8320: PPOPN 2
8322: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8323: LD_EXP 27
8327: PUSH
8328: LD_INT 1
8330: EQUAL
8331: PUSH
8332: LD_INT 22
8334: PPUSH
8335: LD_INT 22
8337: PUSH
8338: LD_INT 3
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: PUSH
8345: LD_INT 21
8347: PUSH
8348: LD_INT 1
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: PPUSH
8359: CALL_OW 70
8363: PUSH
8364: LD_INT 2
8366: GREATER
8367: AND
8368: PUSH
8369: LD_INT 22
8371: PPUSH
8372: LD_INT 22
8374: PUSH
8375: LD_INT 1
8377: PUSH
8378: EMPTY
8379: LIST
8380: LIST
8381: PUSH
8382: LD_INT 2
8384: PUSH
8385: LD_INT 21
8387: PUSH
8388: LD_INT 1
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: PUSH
8395: LD_INT 59
8397: PUSH
8398: EMPTY
8399: LIST
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: LIST
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: PPUSH
8410: CALL_OW 70
8414: PUSH
8415: LD_INT 0
8417: EQUAL
8418: AND
8419: IFFALSE 8434
8421: GO 8423
8423: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8424: LD_INT 1
8426: PPUSH
8427: LD_INT 3
8429: PPUSH
8430: CALL_OW 235
// end ;
8434: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8435: LD_EXP 30
8439: PUSH
8440: LD_INT 1
8442: EQUAL
8443: PUSH
8444: LD_INT 22
8446: PUSH
8447: LD_INT 0
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: PUSH
8454: LD_INT 25
8456: PUSH
8457: LD_INT 14
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: PUSH
8464: EMPTY
8465: LIST
8466: LIST
8467: PPUSH
8468: CALL_OW 69
8472: PUSH
8473: LD_INT 0
8475: EQUAL
8476: AND
8477: IFFALSE 8571
8479: GO 8481
8481: DISABLE
8482: LD_INT 0
8484: PPUSH
8485: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8486: LD_ADDR_VAR 0 2
8490: PUSH
8491: LD_INT 22
8493: PUSH
8494: LD_INT 1
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: LD_INT 21
8503: PUSH
8504: LD_INT 1
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: LD_INT 23
8513: PUSH
8514: LD_INT 1
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: LIST
8525: PPUSH
8526: CALL_OW 69
8530: ST_TO_ADDR
// for i in tmp do
8531: LD_ADDR_VAR 0 1
8535: PUSH
8536: LD_VAR 0 2
8540: PUSH
8541: FOR_IN
8542: IFFALSE 8569
// begin AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8544: LD_VAR 0 1
8548: PPUSH
8549: LD_INT 1
8551: PPUSH
8552: LD_INT 4
8554: PPUSH
8555: CALL_OW 12
8559: PPUSH
8560: LD_INT 300
8562: PPUSH
8563: CALL_OW 492
// end ;
8567: GO 8541
8569: POP
8570: POP
// end ; end_of_file
8571: PPOPN 2
8573: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8574: LD_INT 0
8576: PPUSH
8577: PPUSH
8578: PPUSH
8579: PPUSH
// for i = 1 to count do
8580: LD_ADDR_VAR 0 8
8584: PUSH
8585: DOUBLE
8586: LD_INT 1
8588: DEC
8589: ST_TO_ADDR
8590: LD_VAR 0 6
8594: PUSH
8595: FOR_TO
8596: IFFALSE 8677
// begin uc_side = side ;
8598: LD_ADDR_OWVAR 20
8602: PUSH
8603: LD_VAR 0 1
8607: ST_TO_ADDR
// uc_nation = nation ;
8608: LD_ADDR_OWVAR 21
8612: PUSH
8613: LD_VAR 0 2
8617: ST_TO_ADDR
// hc_gallery =  ;
8618: LD_ADDR_OWVAR 33
8622: PUSH
8623: LD_STRING 
8625: ST_TO_ADDR
// hc_name =  ;
8626: LD_ADDR_OWVAR 26
8630: PUSH
8631: LD_STRING 
8633: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8634: LD_INT 0
8636: PPUSH
8637: LD_VAR 0 5
8641: PPUSH
8642: LD_VAR 0 4
8646: PPUSH
8647: CALL_OW 380
// un = CreateHuman ;
8651: LD_ADDR_VAR 0 10
8655: PUSH
8656: CALL_OW 44
8660: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8661: LD_VAR 0 10
8665: PPUSH
8666: LD_VAR 0 3
8670: PPUSH
8671: CALL_OW 52
// end ;
8675: GO 8595
8677: POP
8678: POP
// end ;
8679: LD_VAR 0 7
8683: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8684: LD_INT 0
8686: PPUSH
8687: PPUSH
8688: PPUSH
// uc_side := GetSide ( b ) ;
8689: LD_ADDR_OWVAR 20
8693: PUSH
8694: LD_VAR 0 2
8698: PPUSH
8699: CALL_OW 255
8703: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8704: LD_ADDR_OWVAR 21
8708: PUSH
8709: LD_VAR 0 2
8713: PPUSH
8714: CALL_OW 248
8718: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8719: LD_INT 0
8721: PPUSH
8722: LD_INT 1
8724: PPUSH
8725: LD_VAR 0 1
8729: PPUSH
8730: CALL_OW 380
// un = CreateHuman ;
8734: LD_ADDR_VAR 0 4
8738: PUSH
8739: CALL_OW 44
8743: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8744: LD_ADDR_VAR 0 5
8748: PUSH
8749: LD_VAR 0 2
8753: PPUSH
8754: CALL_OW 254
8758: PUSH
8759: LD_INT 3
8761: MINUS
8762: ST_TO_ADDR
// if dir < 0 then
8763: LD_VAR 0 5
8767: PUSH
8768: LD_INT 0
8770: LESS
8771: IFFALSE 8787
// dir := 6 + dir ;
8773: LD_ADDR_VAR 0 5
8777: PUSH
8778: LD_INT 6
8780: PUSH
8781: LD_VAR 0 5
8785: PLUS
8786: ST_TO_ADDR
// SetDir ( un , dir ) ;
8787: LD_VAR 0 4
8791: PPUSH
8792: LD_VAR 0 5
8796: PPUSH
8797: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8801: LD_VAR 0 4
8805: PPUSH
8806: LD_VAR 0 2
8810: PPUSH
8811: CALL_OW 52
// end ;
8815: LD_VAR 0 3
8819: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8820: LD_INT 0
8822: PPUSH
8823: PPUSH
8824: PPUSH
8825: PPUSH
8826: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8827: LD_ADDR_VAR 0 7
8831: PUSH
8832: LD_INT 22
8834: PUSH
8835: LD_VAR 0 1
8839: PUSH
8840: EMPTY
8841: LIST
8842: LIST
8843: PUSH
8844: LD_INT 25
8846: PUSH
8847: LD_INT 2
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: PUSH
8854: LD_INT 24
8856: PUSH
8857: LD_INT 1000
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: LIST
8868: PPUSH
8869: CALL_OW 69
8873: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8874: LD_ADDR_VAR 0 5
8878: PUSH
8879: LD_VAR 0 3
8883: PPUSH
8884: LD_INT 22
8886: PUSH
8887: LD_VAR 0 1
8891: PUSH
8892: EMPTY
8893: LIST
8894: LIST
8895: PUSH
8896: LD_INT 21
8898: PUSH
8899: LD_INT 3
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: PUSH
8906: LD_INT 3
8908: PUSH
8909: LD_INT 24
8911: PUSH
8912: LD_INT 1000
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: LIST
8927: PUSH
8928: EMPTY
8929: LIST
8930: PPUSH
8931: CALL_OW 70
8935: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8936: LD_VAR 0 5
8940: PUSH
8941: LD_INT 0
8943: GREATER
8944: PUSH
8945: LD_VAR 0 7
8949: PUSH
8950: LD_INT 0
8952: GREATER
8953: AND
8954: IFFALSE 9020
// begin for i in engineerOk_list do
8956: LD_ADDR_VAR 0 6
8960: PUSH
8961: LD_VAR 0 7
8965: PUSH
8966: FOR_IN
8967: IFFALSE 9018
// begin for j in buildings_list do
8969: LD_ADDR_VAR 0 8
8973: PUSH
8974: LD_VAR 0 5
8978: PUSH
8979: FOR_IN
8980: IFFALSE 9014
// begin AddComExitBuilding ( i ) ;
8982: LD_VAR 0 6
8986: PPUSH
8987: CALL_OW 182
// wait ( 0 0$1 ) ;
8991: LD_INT 35
8993: PPUSH
8994: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8998: LD_VAR 0 6
9002: PPUSH
9003: LD_VAR 0 8
9007: PPUSH
9008: CALL_OW 190
// end ;
9012: GO 8979
9014: POP
9015: POP
// end ;
9016: GO 8966
9018: POP
9019: POP
// end ; if buildings_list = 0 then
9020: LD_VAR 0 5
9024: PUSH
9025: LD_INT 0
9027: EQUAL
9028: IFFALSE 9061
// begin for i in engineerOK_list do
9030: LD_ADDR_VAR 0 6
9034: PUSH
9035: LD_VAR 0 7
9039: PUSH
9040: FOR_IN
9041: IFFALSE 9059
// begin ComEnterUnit ( i , building ) ;
9043: LD_VAR 0 6
9047: PPUSH
9048: LD_VAR 0 2
9052: PPUSH
9053: CALL_OW 120
// end ;
9057: GO 9040
9059: POP
9060: POP
// end ; end ;
9061: LD_VAR 0 4
9065: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
9066: LD_INT 0
9068: PPUSH
9069: PPUSH
9070: PPUSH
9071: PPUSH
9072: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9073: LD_ADDR_VAR 0 6
9077: PUSH
9078: LD_INT 22
9080: PUSH
9081: LD_VAR 0 1
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: LD_INT 25
9092: PUSH
9093: LD_INT 4
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PUSH
9100: LD_INT 24
9102: PUSH
9103: LD_INT 250
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: LIST
9114: PPUSH
9115: CALL_OW 69
9119: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9120: LD_ADDR_VAR 0 9
9124: PUSH
9125: LD_VAR 0 3
9129: PPUSH
9130: LD_INT 22
9132: PUSH
9133: LD_VAR 0 1
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: LD_INT 21
9144: PUSH
9145: LD_INT 1
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: PUSH
9152: LD_INT 3
9154: PUSH
9155: LD_INT 24
9157: PUSH
9158: LD_INT 650
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: LIST
9173: PPUSH
9174: CALL_OW 70
9178: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
9179: LD_VAR 0 9
9183: PUSH
9184: LD_INT 0
9186: GREATER
9187: PUSH
9188: LD_VAR 0 6
9192: PUSH
9193: LD_INT 0
9195: GREATER
9196: AND
9197: IFFALSE 9324
// begin for i = 1 to damageUnits do
9199: LD_ADDR_VAR 0 7
9203: PUSH
9204: DOUBLE
9205: LD_INT 1
9207: DEC
9208: ST_TO_ADDR
9209: LD_VAR 0 9
9213: PUSH
9214: FOR_TO
9215: IFFALSE 9239
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9217: LD_VAR 0 9
9221: PUSH
9222: LD_VAR 0 7
9226: ARRAY
9227: PPUSH
9228: LD_VAR 0 2
9232: PPUSH
9233: CALL_OW 113
9237: GO 9214
9239: POP
9240: POP
// for i in sci_list do
9241: LD_ADDR_VAR 0 7
9245: PUSH
9246: LD_VAR 0 6
9250: PUSH
9251: FOR_IN
9252: IFFALSE 9320
// begin ComExitBuilding ( i ) ;
9254: LD_VAR 0 7
9258: PPUSH
9259: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9263: LD_ADDR_VAR 0 8
9267: PUSH
9268: LD_VAR 0 2
9272: PPUSH
9273: LD_INT 22
9275: PUSH
9276: LD_VAR 0 1
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: PPUSH
9285: CALL_OW 70
9289: PUSH
9290: FOR_IN
9291: IFFALSE 9316
// begin AddComHeal ( i , j ) ;
9293: LD_VAR 0 7
9297: PPUSH
9298: LD_VAR 0 8
9302: PPUSH
9303: CALL_OW 188
// wait ( 1 1$0 ) ;
9307: LD_INT 2100
9309: PPUSH
9310: CALL_OW 67
// end ;
9314: GO 9290
9316: POP
9317: POP
// end ;
9318: GO 9251
9320: POP
9321: POP
// end else
9322: GO 9338
// begin AddComEnterUnit ( sci_list , build ) ;
9324: LD_VAR 0 6
9328: PPUSH
9329: LD_VAR 0 4
9333: PPUSH
9334: CALL_OW 180
// end ; end ;
9338: LD_VAR 0 5
9342: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9343: LD_INT 0
9345: PPUSH
9346: PPUSH
9347: PPUSH
9348: PPUSH
9349: PPUSH
9350: PPUSH
9351: PPUSH
9352: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9353: LD_ADDR_VAR 0 7
9357: PUSH
9358: LD_VAR 0 3
9362: PPUSH
9363: LD_INT 22
9365: PUSH
9366: LD_VAR 0 1
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: PUSH
9375: LD_INT 21
9377: PUSH
9378: LD_INT 2
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PUSH
9385: LD_INT 24
9387: PUSH
9388: LD_INT 550
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: PUSH
9395: LD_INT 34
9397: PUSH
9398: LD_INT 46
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: PPUSH
9411: CALL_OW 70
9415: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9416: LD_ADDR_VAR 0 8
9420: PUSH
9421: LD_VAR 0 3
9425: PPUSH
9426: LD_INT 22
9428: PUSH
9429: LD_VAR 0 1
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: PUSH
9438: LD_INT 21
9440: PUSH
9441: LD_INT 2
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PUSH
9448: LD_INT 34
9450: PUSH
9451: LD_INT 46
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: PUSH
9458: LD_INT 3
9460: PUSH
9461: LD_INT 24
9463: PUSH
9464: LD_INT 550
9466: PUSH
9467: EMPTY
9468: LIST
9469: LIST
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: PPUSH
9481: CALL_OW 70
9485: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9486: LD_ADDR_VAR 0 9
9490: PUSH
9491: LD_VAR 0 2
9495: PPUSH
9496: LD_INT 22
9498: PUSH
9499: LD_VAR 0 1
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: PUSH
9508: LD_INT 21
9510: PUSH
9511: LD_INT 2
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: PUSH
9518: LD_INT 34
9520: PUSH
9521: LD_INT 46
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: PUSH
9528: LD_INT 24
9530: PUSH
9531: LD_INT 1000
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: PUSH
9538: LD_INT 58
9540: PUSH
9541: EMPTY
9542: LIST
9543: PUSH
9544: EMPTY
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: PPUSH
9551: CALL_OW 70
9555: ST_TO_ADDR
// for i in damageVehicle_list do
9556: LD_ADDR_VAR 0 5
9560: PUSH
9561: LD_VAR 0 8
9565: PUSH
9566: FOR_IN
9567: IFFALSE 9586
// mechanicInside_list = UnitsInside ( i ) ;
9569: LD_ADDR_VAR 0 10
9573: PUSH
9574: LD_VAR 0 5
9578: PPUSH
9579: CALL_OW 313
9583: ST_TO_ADDR
9584: GO 9566
9586: POP
9587: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9588: LD_ADDR_VAR 0 11
9592: PUSH
9593: LD_VAR 0 2
9597: PPUSH
9598: LD_INT 22
9600: PUSH
9601: LD_VAR 0 1
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 25
9612: PUSH
9613: LD_INT 3
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PPUSH
9624: CALL_OW 70
9628: ST_TO_ADDR
// if damageVehicle_list > 0 then
9629: LD_VAR 0 8
9633: PUSH
9634: LD_INT 0
9636: GREATER
9637: IFFALSE 9710
// begin for i in damageVehicle_list do
9639: LD_ADDR_VAR 0 5
9643: PUSH
9644: LD_VAR 0 8
9648: PUSH
9649: FOR_IN
9650: IFFALSE 9708
// begin for j in mechanicInside_list do
9652: LD_ADDR_VAR 0 6
9656: PUSH
9657: LD_VAR 0 10
9661: PUSH
9662: FOR_IN
9663: IFFALSE 9704
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9665: LD_VAR 0 8
9669: PPUSH
9670: LD_VAR 0 2
9674: PPUSH
9675: CALL_OW 113
// AddComExitVehicle ( j ) ;
9679: LD_VAR 0 6
9683: PPUSH
9684: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9688: LD_VAR 0 6
9692: PPUSH
9693: LD_VAR 0 5
9697: PPUSH
9698: CALL_OW 189
// end ;
9702: GO 9662
9704: POP
9705: POP
// end ;
9706: GO 9649
9708: POP
9709: POP
// end ; if emptyVehicle_list > 0 then
9710: LD_VAR 0 9
9714: PUSH
9715: LD_INT 0
9717: GREATER
9718: IFFALSE 9768
// begin for i in emptyVehicle_list do
9720: LD_ADDR_VAR 0 5
9724: PUSH
9725: LD_VAR 0 9
9729: PUSH
9730: FOR_IN
9731: IFFALSE 9766
// begin for j in mechanicOutside_list do
9733: LD_ADDR_VAR 0 6
9737: PUSH
9738: LD_VAR 0 11
9742: PUSH
9743: FOR_IN
9744: IFFALSE 9762
// begin AddComEnterUnit ( j , i ) ;
9746: LD_VAR 0 6
9750: PPUSH
9751: LD_VAR 0 5
9755: PPUSH
9756: CALL_OW 180
// end ;
9760: GO 9743
9762: POP
9763: POP
// end ;
9764: GO 9730
9766: POP
9767: POP
// end ; if VehicleOK_list > 0 then
9768: LD_VAR 0 7
9772: PUSH
9773: LD_INT 0
9775: GREATER
9776: IFFALSE 9810
// begin for i in VehicleOK_list do
9778: LD_ADDR_VAR 0 5
9782: PUSH
9783: LD_VAR 0 7
9787: PUSH
9788: FOR_IN
9789: IFFALSE 9808
// ComAgressiveMove ( i , 110 , 29 ) ;
9791: LD_VAR 0 5
9795: PPUSH
9796: LD_INT 110
9798: PPUSH
9799: LD_INT 29
9801: PPUSH
9802: CALL_OW 114
9806: GO 9788
9808: POP
9809: POP
// end ; end ;
9810: LD_VAR 0 4
9814: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9815: LD_INT 0
9817: PPUSH
9818: PPUSH
9819: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9820: LD_VAR 0 1
9824: PPUSH
9825: LD_INT 22
9827: PUSH
9828: LD_VAR 0 2
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PUSH
9837: LD_INT 2
9839: PUSH
9840: LD_INT 21
9842: PUSH
9843: LD_INT 2
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 21
9852: PUSH
9853: LD_INT 1
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: PUSH
9860: EMPTY
9861: LIST
9862: LIST
9863: LIST
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PPUSH
9869: CALL_OW 70
9873: PUSH
9874: LD_VAR 0 5
9878: GREATER
9879: IFFALSE 10011
// begin for i in defendersList do
9881: LD_ADDR_VAR 0 7
9885: PUSH
9886: LD_VAR 0 3
9890: PUSH
9891: FOR_IN
9892: IFFALSE 10007
// begin AddComExitBuilding ( i ) ;
9894: LD_VAR 0 7
9898: PPUSH
9899: CALL_OW 182
// wait ( 0 0$1 ) ;
9903: LD_INT 35
9905: PPUSH
9906: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
9910: LD_ADDR_VAR 0 8
9914: PUSH
9915: LD_VAR 0 1
9919: PPUSH
9920: LD_INT 22
9922: PUSH
9923: LD_VAR 0 2
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: PUSH
9932: LD_INT 2
9934: PUSH
9935: LD_INT 21
9937: PUSH
9938: LD_INT 2
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: PUSH
9945: LD_INT 21
9947: PUSH
9948: LD_INT 1
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: LIST
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: PPUSH
9964: CALL_OW 70
9968: PUSH
9969: FOR_IN
9970: IFFALSE 10003
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
9972: LD_VAR 0 7
9976: PPUSH
9977: LD_VAR 0 8
9981: PPUSH
9982: CALL_OW 250
9986: PPUSH
9987: LD_VAR 0 8
9991: PPUSH
9992: CALL_OW 251
9996: PPUSH
9997: CALL_OW 174
10001: GO 9969
10003: POP
10004: POP
// end ;
10005: GO 9891
10007: POP
10008: POP
// end else
10009: GO 10042
// begin for i in defendersList do
10011: LD_ADDR_VAR 0 7
10015: PUSH
10016: LD_VAR 0 3
10020: PUSH
10021: FOR_IN
10022: IFFALSE 10040
// ComEnterUnit ( i , build ) ;
10024: LD_VAR 0 7
10028: PPUSH
10029: LD_VAR 0 4
10033: PPUSH
10034: CALL_OW 120
10038: GO 10021
10040: POP
10041: POP
// end ; end ;
10042: LD_VAR 0 6
10046: RET
// export function RussianTrap ; var i ; begin
10047: LD_INT 0
10049: PPUSH
10050: PPUSH
// if GetSide ( Brian ) = 4 then
10051: LD_EXP 6
10055: PPUSH
10056: CALL_OW 255
10060: PUSH
10061: LD_INT 4
10063: EQUAL
10064: IFFALSE 10087
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10066: LD_EXP 6
10070: PUSH
10071: LD_EXP 7
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: PPUSH
10080: LD_INT 0
10082: PPUSH
10083: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10087: LD_ADDR_VAR 0 2
10091: PUSH
10092: LD_INT 22
10094: PUSH
10095: LD_INT 3
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: PUSH
10102: LD_INT 21
10104: PUSH
10105: LD_INT 1
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PPUSH
10116: CALL_OW 69
10120: PUSH
10121: FOR_IN
10122: IFFALSE 10232
// begin ComExitBuilding ( i ) ;
10124: LD_VAR 0 2
10128: PPUSH
10129: CALL_OW 122
// wait ( 0 0$1 ) ;
10133: LD_INT 35
10135: PPUSH
10136: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10140: LD_VAR 0 2
10144: PPUSH
10145: LD_INT 120
10147: PPUSH
10148: LD_INT 56
10150: PPUSH
10151: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10155: LD_VAR 0 2
10159: PPUSH
10160: LD_INT 111
10162: PPUSH
10163: LD_INT 37
10165: PPUSH
10166: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10170: LD_INT 33
10172: PPUSH
10173: CALL_OW 255
10177: PUSH
10178: LD_INT 3
10180: EQUAL
10181: PUSH
10182: LD_INT 33
10184: PPUSH
10185: CALL_OW 302
10189: AND
10190: IFFALSE 10206
// begin AddComEnterUnit ( i , arm2 ) ;
10192: LD_VAR 0 2
10196: PPUSH
10197: LD_INT 33
10199: PPUSH
10200: CALL_OW 180
// end else
10204: GO 10230
// begin AddComCrawl ( i ) ;
10206: LD_VAR 0 2
10210: PPUSH
10211: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10215: LD_VAR 0 2
10219: PPUSH
10220: LD_INT 109
10222: PPUSH
10223: LD_INT 30
10225: PPUSH
10226: CALL_OW 174
// end ; end ;
10230: GO 10121
10232: POP
10233: POP
// end ;
10234: LD_VAR 0 1
10238: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10239: LD_INT 0
10241: PPUSH
10242: PPUSH
10243: PPUSH
10244: PPUSH
10245: PPUSH
// nearest_dist = 1000 ;
10246: LD_ADDR_VAR 0 4
10250: PUSH
10251: LD_INT 1000
10253: ST_TO_ADDR
// nearest_un = un ;
10254: LD_ADDR_VAR 0 5
10258: PUSH
10259: LD_VAR 0 1
10263: ST_TO_ADDR
// for sold in units do
10264: LD_ADDR_VAR 0 6
10268: PUSH
10269: LD_VAR 0 2
10273: PUSH
10274: FOR_IN
10275: IFFALSE 10331
// begin dist = GetDistUnits ( un , sold ) ;
10277: LD_ADDR_VAR 0 7
10281: PUSH
10282: LD_VAR 0 1
10286: PPUSH
10287: LD_VAR 0 6
10291: PPUSH
10292: CALL_OW 296
10296: ST_TO_ADDR
// if dist < nearest_dist then
10297: LD_VAR 0 7
10301: PUSH
10302: LD_VAR 0 4
10306: LESS
10307: IFFALSE 10329
// begin nearest_un = sold ;
10309: LD_ADDR_VAR 0 5
10313: PUSH
10314: LD_VAR 0 6
10318: ST_TO_ADDR
// nearest_dist = dist ;
10319: LD_ADDR_VAR 0 4
10323: PUSH
10324: LD_VAR 0 7
10328: ST_TO_ADDR
// end ; end ;
10329: GO 10274
10331: POP
10332: POP
// result := nearest_un ;
10333: LD_ADDR_VAR 0 3
10337: PUSH
10338: LD_VAR 0 5
10342: ST_TO_ADDR
// end ;
10343: LD_VAR 0 3
10347: RET
// export function PrepareDifficulty ; begin
10348: LD_INT 0
10350: PPUSH
// if Difficulty = 1 then
10351: LD_OWVAR 67
10355: PUSH
10356: LD_INT 1
10358: EQUAL
10359: IFFALSE 10422
// begin RemoveUnit ( brw2 ) ;
10361: LD_INT 9
10363: PPUSH
10364: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10368: LD_INT 30
10370: PPUSH
10371: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10375: LD_INT 52
10377: PPUSH
10378: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10382: LD_INT 63
10384: PPUSH
10385: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10389: LD_INT 5
10391: PUSH
10392: LD_INT 4
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: PPUSH
10399: LD_INT 60
10401: PPUSH
10402: CALL_OW 240
// RuSoldMinLevel = 0 ;
10406: LD_ADDR_EXP 13
10410: PUSH
10411: LD_INT 0
10413: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10414: LD_ADDR_EXP 14
10418: PUSH
10419: LD_INT 1
10421: ST_TO_ADDR
// end ; if Difficulty = 2 then
10422: LD_OWVAR 67
10426: PUSH
10427: LD_INT 2
10429: EQUAL
10430: IFFALSE 10472
// begin RemoveUnit ( brw4 ) ;
10432: LD_INT 52
10434: PPUSH
10435: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10439: LD_INT 5
10441: PUSH
10442: LD_INT 4
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: PPUSH
10449: LD_INT 50
10451: PPUSH
10452: CALL_OW 240
// RuSoldMinLevel = 1 ;
10456: LD_ADDR_EXP 13
10460: PUSH
10461: LD_INT 1
10463: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10464: LD_ADDR_EXP 14
10468: PUSH
10469: LD_INT 2
10471: ST_TO_ADDR
// end ; if Difficulty = 3 then
10472: LD_OWVAR 67
10476: PUSH
10477: LD_INT 3
10479: EQUAL
10480: IFFALSE 10515
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10482: LD_INT 5
10484: PUSH
10485: LD_INT 4
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PPUSH
10492: LD_INT 40
10494: PPUSH
10495: CALL_OW 240
// RuSoldMinLevel = 2 ;
10499: LD_ADDR_EXP 13
10503: PUSH
10504: LD_INT 2
10506: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10507: LD_ADDR_EXP 14
10511: PUSH
10512: LD_INT 3
10514: ST_TO_ADDR
// end ; end ;
10515: LD_VAR 0 1
10519: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10520: LD_INT 0
10522: PPUSH
10523: PPUSH
10524: PPUSH
// tmp = [ ] ;
10525: LD_ADDR_VAR 0 5
10529: PUSH
10530: EMPTY
10531: ST_TO_ADDR
// if not vehicles then
10532: LD_VAR 0 1
10536: NOT
10537: IFFALSE 10541
// exit ;
10539: GO 10658
// for i in vehicles do
10541: LD_ADDR_VAR 0 4
10545: PUSH
10546: LD_VAR 0 1
10550: PUSH
10551: FOR_IN
10552: IFFALSE 10642
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10554: LD_ADDR_VAR 0 5
10558: PUSH
10559: LD_VAR 0 5
10563: PPUSH
10564: LD_INT 1
10566: PPUSH
10567: LD_VAR 0 4
10571: PPUSH
10572: CALL_OW 265
10576: PUSH
10577: LD_VAR 0 4
10581: PPUSH
10582: CALL_OW 262
10586: PUSH
10587: LD_VAR 0 4
10591: PPUSH
10592: CALL_OW 263
10596: PUSH
10597: LD_VAR 0 4
10601: PPUSH
10602: CALL_OW 264
10606: PUSH
10607: LD_VAR 0 4
10611: PPUSH
10612: CALL_OW 261
10616: PUSH
10617: LD_VAR 0 4
10621: PPUSH
10622: CALL_OW 256
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: PPUSH
10635: CALL_OW 2
10639: ST_TO_ADDR
// end ;
10640: GO 10551
10642: POP
10643: POP
// SaveVariable ( tmp , ident ) ;
10644: LD_VAR 0 5
10648: PPUSH
10649: LD_VAR 0 2
10653: PPUSH
10654: CALL_OW 39
// end ; end_of_file
10658: LD_VAR 0 3
10662: RET
// export function PrepareHeroes ; var plive ; begin
10663: LD_INT 0
10665: PPUSH
10666: PPUSH
// uc_side = 1 ;
10667: LD_ADDR_OWVAR 20
10671: PUSH
10672: LD_INT 1
10674: ST_TO_ADDR
// JMM = CreateCharacter ( 01_JMM ) ;
10675: LD_ADDR_EXP 1
10679: PUSH
10680: LD_STRING 01_JMM
10682: PPUSH
10683: CALL_OW 34
10687: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10688: LD_ADDR_VAR 0 2
10692: PUSH
10693: LD_STRING 01_JMMLifePoints_1
10695: PPUSH
10696: LD_INT 1000
10698: PPUSH
10699: CALL_OW 30
10703: ST_TO_ADDR
// if plive < 250 then
10704: LD_VAR 0 2
10708: PUSH
10709: LD_INT 250
10711: LESS
10712: IFFALSE 10722
// plive := 300 ;
10714: LD_ADDR_VAR 0 2
10718: PUSH
10719: LD_INT 300
10721: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10722: LD_EXP 1
10726: PPUSH
10727: LD_VAR 0 2
10731: PPUSH
10732: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10736: LD_ADDR_EXP 9
10740: PUSH
10741: LD_STRING Powell
10743: PPUSH
10744: CALL_OW 25
10748: ST_TO_ADDR
// Bobby = CreateCharacter ( 01_Bobby ) ;
10749: LD_ADDR_EXP 2
10753: PUSH
10754: LD_STRING 01_Bobby
10756: PPUSH
10757: CALL_OW 34
10761: ST_TO_ADDR
// if Bobby then
10762: LD_EXP 2
10766: IFFALSE 10816
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10768: LD_ADDR_VAR 0 2
10772: PUSH
10773: LD_STRING 01_BobbyLifePoints_1
10775: PPUSH
10776: LD_INT 1000
10778: PPUSH
10779: CALL_OW 30
10783: ST_TO_ADDR
// if plive < 250 then
10784: LD_VAR 0 2
10788: PUSH
10789: LD_INT 250
10791: LESS
10792: IFFALSE 10802
// plive := 300 ;
10794: LD_ADDR_VAR 0 2
10798: PUSH
10799: LD_INT 300
10801: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
10802: LD_EXP 2
10806: PPUSH
10807: LD_VAR 0 2
10811: PPUSH
10812: CALL_OW 234
// end ; Cyrus = CreateCharacter ( 01_Cyrus ) ;
10816: LD_ADDR_EXP 3
10820: PUSH
10821: LD_STRING 01_Cyrus
10823: PPUSH
10824: CALL_OW 34
10828: ST_TO_ADDR
// if Cyrus then
10829: LD_EXP 3
10833: IFFALSE 10883
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
10835: LD_ADDR_VAR 0 2
10839: PUSH
10840: LD_STRING 01_CyrusLifePoints_1
10842: PPUSH
10843: LD_INT 1000
10845: PPUSH
10846: CALL_OW 30
10850: ST_TO_ADDR
// if plive < 250 then
10851: LD_VAR 0 2
10855: PUSH
10856: LD_INT 250
10858: LESS
10859: IFFALSE 10869
// plive := 300 ;
10861: LD_ADDR_VAR 0 2
10865: PUSH
10866: LD_INT 300
10868: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
10869: LD_EXP 3
10873: PPUSH
10874: LD_VAR 0 2
10878: PPUSH
10879: CALL_OW 234
// end ; Khatam = NewCharacter ( Khatam ) ;
10883: LD_ADDR_EXP 5
10887: PUSH
10888: LD_STRING Khatam
10890: PPUSH
10891: CALL_OW 25
10895: ST_TO_ADDR
// uc_side = 4 ;
10896: LD_ADDR_OWVAR 20
10900: PUSH
10901: LD_INT 4
10903: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10904: LD_ADDR_EXP 4
10908: PUSH
10909: LD_STRING Lisa
10911: PPUSH
10912: CALL_OW 25
10916: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10917: LD_EXP 1
10921: PPUSH
10922: LD_INT 3
10924: PPUSH
10925: LD_INT 0
10927: PPUSH
10928: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10932: LD_EXP 2
10936: PPUSH
10937: LD_INT 3
10939: PPUSH
10940: LD_INT 0
10942: PPUSH
10943: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10947: LD_EXP 3
10951: PPUSH
10952: LD_INT 3
10954: PPUSH
10955: LD_INT 0
10957: PPUSH
10958: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10962: LD_EXP 4
10966: PPUSH
10967: LD_INT 5
10969: PPUSH
10970: LD_INT 0
10972: PPUSH
10973: CALL_OW 49
// ComCrawl ( Lisa ) ;
10977: LD_EXP 4
10981: PPUSH
10982: CALL_OW 137
// end ;
10986: LD_VAR 0 1
10990: RET
// export function PrepareLisSquad ; var i , un ; begin
10991: LD_INT 0
10993: PPUSH
10994: PPUSH
10995: PPUSH
// uc_side = 4 ;
10996: LD_ADDR_OWVAR 20
11000: PUSH
11001: LD_INT 4
11003: ST_TO_ADDR
// uc_nation = 1 ;
11004: LD_ADDR_OWVAR 21
11008: PUSH
11009: LD_INT 1
11011: ST_TO_ADDR
// hc_class := 2 ;
11012: LD_ADDR_OWVAR 28
11016: PUSH
11017: LD_INT 2
11019: ST_TO_ADDR
// hc_sex := sex_male ;
11020: LD_ADDR_OWVAR 27
11024: PUSH
11025: LD_INT 1
11027: ST_TO_ADDR
// hc_gallery :=  ;
11028: LD_ADDR_OWVAR 33
11032: PUSH
11033: LD_STRING 
11035: ST_TO_ADDR
// hc_name :=  ;
11036: LD_ADDR_OWVAR 26
11040: PUSH
11041: LD_STRING 
11043: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11044: LD_ADDR_OWVAR 30
11048: PUSH
11049: LD_INT 0
11051: PUSH
11052: LD_INT 1
11054: PUSH
11055: LD_INT 0
11057: PUSH
11058: LD_INT 0
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11067: LD_ADDR_OWVAR 31
11071: PUSH
11072: LD_INT 1
11074: PUSH
11075: LD_INT 2
11077: PUSH
11078: LD_INT 0
11080: PUSH
11081: LD_INT 0
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: ST_TO_ADDR
// un := CreateHuman ;
11090: LD_ADDR_VAR 0 3
11094: PUSH
11095: CALL_OW 44
11099: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11100: LD_VAR 0 3
11104: PPUSH
11105: LD_INT 6
11107: PPUSH
11108: LD_INT 0
11110: PPUSH
11111: CALL_OW 49
// hc_sex := sex_female ;
11115: LD_ADDR_OWVAR 27
11119: PUSH
11120: LD_INT 2
11122: ST_TO_ADDR
// hc_gallery :=  ;
11123: LD_ADDR_OWVAR 33
11127: PUSH
11128: LD_STRING 
11130: ST_TO_ADDR
// hc_name :=  ;
11131: LD_ADDR_OWVAR 26
11135: PUSH
11136: LD_STRING 
11138: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11139: LD_ADDR_OWVAR 30
11143: PUSH
11144: LD_INT 0
11146: PUSH
11147: LD_INT 0
11149: PUSH
11150: LD_INT 0
11152: PUSH
11153: LD_INT 1
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11162: LD_ADDR_OWVAR 31
11166: PUSH
11167: LD_INT 0
11169: PUSH
11170: LD_INT 1
11172: PUSH
11173: LD_INT 0
11175: PUSH
11176: LD_INT 1
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: ST_TO_ADDR
// un := CreateHuman ;
11185: LD_ADDR_VAR 0 3
11189: PUSH
11190: CALL_OW 44
11194: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11195: LD_VAR 0 3
11199: PPUSH
11200: LD_INT 6
11202: PPUSH
11203: LD_INT 0
11205: PPUSH
11206: CALL_OW 49
// if not Bobby and not Cyrus then
11210: LD_EXP 2
11214: NOT
11215: PUSH
11216: LD_EXP 3
11220: NOT
11221: AND
11222: IFFALSE 11327
// begin hc_class := 1 ;
11224: LD_ADDR_OWVAR 28
11228: PUSH
11229: LD_INT 1
11231: ST_TO_ADDR
// hc_sex := sex_male ;
11232: LD_ADDR_OWVAR 27
11236: PUSH
11237: LD_INT 1
11239: ST_TO_ADDR
// hc_gallery :=  ;
11240: LD_ADDR_OWVAR 33
11244: PUSH
11245: LD_STRING 
11247: ST_TO_ADDR
// hc_name :=  ;
11248: LD_ADDR_OWVAR 26
11252: PUSH
11253: LD_STRING 
11255: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11256: LD_ADDR_OWVAR 30
11260: PUSH
11261: LD_INT 2
11263: PUSH
11264: LD_INT 3
11266: PUSH
11267: LD_INT 1
11269: PUSH
11270: LD_INT 0
11272: PUSH
11273: EMPTY
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11279: LD_ADDR_OWVAR 31
11283: PUSH
11284: LD_INT 2
11286: PUSH
11287: LD_INT 3
11289: PUSH
11290: LD_INT 1
11292: PUSH
11293: LD_INT 0
11295: PUSH
11296: EMPTY
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: ST_TO_ADDR
// un := CreateHuman ;
11302: LD_ADDR_VAR 0 3
11306: PUSH
11307: CALL_OW 44
11311: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11312: LD_VAR 0 3
11316: PPUSH
11317: LD_INT 31
11319: PPUSH
11320: LD_INT 0
11322: PPUSH
11323: CALL_OW 49
// end ; InitHc ;
11327: CALL_OW 19
// end ;
11331: LD_VAR 0 1
11335: RET
// export function PrepareOtherAmericans ; begin
11336: LD_INT 0
11338: PPUSH
// uc_side = 4 ;
11339: LD_ADDR_OWVAR 20
11343: PUSH
11344: LD_INT 4
11346: ST_TO_ADDR
// uc_nation = 1 ;
11347: LD_ADDR_OWVAR 21
11351: PUSH
11352: LD_INT 1
11354: ST_TO_ADDR
// hc_gallery =  ;
11355: LD_ADDR_OWVAR 33
11359: PUSH
11360: LD_STRING 
11362: ST_TO_ADDR
// hc_name = Tom Garvin ;
11363: LD_ADDR_OWVAR 26
11367: PUSH
11368: LD_STRING Tom Garvin
11370: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
11371: LD_INT 1
11373: PPUSH
11374: LD_INT 1
11376: PPUSH
11377: LD_INT 1
11379: PPUSH
11380: LD_INT 2
11382: PPUSH
11383: CALL_OW 12
11387: PPUSH
11388: CALL_OW 380
// Brian = CreateHuman ;
11392: LD_ADDR_EXP 6
11396: PUSH
11397: CALL_OW 44
11401: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11402: LD_EXP 6
11406: PPUSH
11407: LD_INT 10
11409: PPUSH
11410: LD_INT 0
11412: PPUSH
11413: CALL_OW 49
// hc_name = Jerry White ;
11417: LD_ADDR_OWVAR 26
11421: PUSH
11422: LD_STRING Jerry White
11424: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11425: LD_INT 1
11427: PPUSH
11428: LD_INT 3
11430: PPUSH
11431: LD_INT 1
11433: PPUSH
11434: LD_INT 2
11436: PPUSH
11437: CALL_OW 12
11441: PPUSH
11442: CALL_OW 380
// Jerry = CreateHuman ;
11446: LD_ADDR_EXP 7
11450: PUSH
11451: CALL_OW 44
11455: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11456: LD_EXP 7
11460: PPUSH
11461: LD_INT 10
11463: PPUSH
11464: LD_INT 0
11466: PPUSH
11467: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11471: LD_EXP 6
11475: PUSH
11476: LD_EXP 7
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: PPUSH
11485: CALL_OW 140
// end ;
11489: LD_VAR 0 1
11493: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11494: LD_INT 0
11496: PPUSH
11497: PPUSH
11498: PPUSH
// for i = 1 to 6 do
11499: LD_ADDR_VAR 0 2
11503: PUSH
11504: DOUBLE
11505: LD_INT 1
11507: DEC
11508: ST_TO_ADDR
11509: LD_INT 6
11511: PUSH
11512: FOR_TO
11513: IFFALSE 11607
// begin uc_side = 4 ;
11515: LD_ADDR_OWVAR 20
11519: PUSH
11520: LD_INT 4
11522: ST_TO_ADDR
// uc_nation = 1 ;
11523: LD_ADDR_OWVAR 21
11527: PUSH
11528: LD_INT 1
11530: ST_TO_ADDR
// hc_gallery =  ;
11531: LD_ADDR_OWVAR 33
11535: PUSH
11536: LD_STRING 
11538: ST_TO_ADDR
// hc_name =  ;
11539: LD_ADDR_OWVAR 26
11543: PUSH
11544: LD_STRING 
11546: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11547: LD_INT 0
11549: PPUSH
11550: LD_INT 1
11552: PPUSH
11553: LD_INT 4
11555: PPUSH
11556: CALL_OW 12
11560: PPUSH
11561: LD_INT 1
11563: PPUSH
11564: CALL_OW 380
// un = CreateHuman ;
11568: LD_ADDR_VAR 0 3
11572: PUSH
11573: CALL_OW 44
11577: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11578: LD_VAR 0 3
11582: PPUSH
11583: LD_INT 16
11585: PPUSH
11586: LD_INT 0
11588: PPUSH
11589: CALL_OW 49
// SetLives ( un , 1 ) ;
11593: LD_VAR 0 3
11597: PPUSH
11598: LD_INT 1
11600: PPUSH
11601: CALL_OW 234
// end ;
11605: GO 11512
11607: POP
11608: POP
// DyingSold = CreateHuman ;
11609: LD_ADDR_EXP 34
11613: PUSH
11614: CALL_OW 44
11618: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11619: LD_EXP 34
11623: PPUSH
11624: LD_INT 16
11626: PPUSH
11627: LD_INT 0
11629: PPUSH
11630: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11634: LD_EXP 34
11638: PPUSH
11639: LD_INT 250
11641: PPUSH
11642: CALL_OW 234
// end ; end_of_file
11646: LD_VAR 0 1
11650: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11651: LD_INT 0
11653: PPUSH
11654: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11655: LD_ADDR_VAR 0 2
11659: PUSH
11660: LD_INT 22
11662: PUSH
11663: LD_INT 1
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: PUSH
11670: LD_INT 23
11672: PUSH
11673: LD_INT 1
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PUSH
11680: LD_INT 25
11682: PUSH
11683: LD_INT 2
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PUSH
11690: LD_INT 50
11692: PUSH
11693: EMPTY
11694: LIST
11695: PUSH
11696: LD_INT 56
11698: PUSH
11699: EMPTY
11700: LIST
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: PPUSH
11709: CALL_OW 69
11713: PUSH
11714: LD_EXP 1
11718: PUSH
11719: EMPTY
11720: LIST
11721: DIFF
11722: ST_TO_ADDR
// uc_side = 6 ;
11723: LD_ADDR_OWVAR 20
11727: PUSH
11728: LD_INT 6
11730: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11731: LD_ADDR_EXP 8
11735: PUSH
11736: LD_STRING Mikhail
11738: PPUSH
11739: CALL_OW 25
11743: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11744: LD_EXP 8
11748: PPUSH
11749: LD_INT 3
11751: PPUSH
11752: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
11756: LD_EXP 8
11760: PPUSH
11761: LD_VAR 0 2
11765: PUSH
11766: LD_INT 1
11768: ARRAY
11769: PPUSH
11770: CALL_OW 250
11774: PPUSH
11775: LD_VAR 0 2
11779: PUSH
11780: LD_INT 1
11782: ARRAY
11783: PPUSH
11784: CALL_OW 251
11788: PPUSH
11789: LD_INT 5
11791: PPUSH
11792: LD_INT 1
11794: PPUSH
11795: CALL_OW 50
// end ;
11799: LD_VAR 0 1
11803: RET
// export function PrepareRussianCommander ; begin
11804: LD_INT 0
11806: PPUSH
// uc_side = 3 ;
11807: LD_ADDR_OWVAR 20
11811: PUSH
11812: LD_INT 3
11814: ST_TO_ADDR
// uc_nation = 3 ;
11815: LD_ADDR_OWVAR 21
11819: PUSH
11820: LD_INT 3
11822: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11823: LD_ADDR_EXP 19
11827: PUSH
11828: LD_STRING Natasza
11830: PPUSH
11831: CALL_OW 25
11835: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11836: LD_EXP 19
11840: PPUSH
11841: LD_INT 24
11843: PPUSH
11844: LD_INT 0
11846: PPUSH
11847: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11851: LD_EXP 19
11855: PPUSH
11856: LD_INT 56
11858: PPUSH
11859: LD_INT 16
11861: PPUSH
11862: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11866: LD_ADDR_EXP 24
11870: PUSH
11871: LD_EXP 24
11875: PUSH
11876: LD_EXP 19
11880: ADD
11881: ST_TO_ADDR
// end ;
11882: LD_VAR 0 1
11886: RET
// export function PrepareSouthBase ; var i , un ; begin
11887: LD_INT 0
11889: PPUSH
11890: PPUSH
11891: PPUSH
// for i = 1 to 2 do
11892: LD_ADDR_VAR 0 2
11896: PUSH
11897: DOUBLE
11898: LD_INT 1
11900: DEC
11901: ST_TO_ADDR
11902: LD_INT 2
11904: PUSH
11905: FOR_TO
11906: IFFALSE 12015
// begin uc_side = 3 ;
11908: LD_ADDR_OWVAR 20
11912: PUSH
11913: LD_INT 3
11915: ST_TO_ADDR
// uc_nation = 3 ;
11916: LD_ADDR_OWVAR 21
11920: PUSH
11921: LD_INT 3
11923: ST_TO_ADDR
// hc_gallery =  ;
11924: LD_ADDR_OWVAR 33
11928: PUSH
11929: LD_STRING 
11931: ST_TO_ADDR
// hc_name =  ;
11932: LD_ADDR_OWVAR 26
11936: PUSH
11937: LD_STRING 
11939: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11940: LD_INT 1
11942: PPUSH
11943: LD_INT 1
11945: PPUSH
11946: LD_EXP 13
11950: PPUSH
11951: LD_EXP 14
11955: PPUSH
11956: CALL_OW 12
11960: PPUSH
11961: CALL_OW 380
// hc_importance = 0 ;
11965: LD_ADDR_OWVAR 32
11969: PUSH
11970: LD_INT 0
11972: ST_TO_ADDR
// un = CreateHuman ;
11973: LD_ADDR_VAR 0 3
11977: PUSH
11978: CALL_OW 44
11982: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11983: LD_VAR 0 3
11987: PPUSH
11988: LD_INT 11
11990: PPUSH
11991: LD_INT 0
11993: PPUSH
11994: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
11998: LD_VAR 0 3
12002: PPUSH
12003: LD_INT 111
12005: PPUSH
12006: LD_INT 38
12008: PPUSH
12009: CALL_OW 118
// end ;
12013: GO 11905
12015: POP
12016: POP
// for i = 1 to Difficulty do
12017: LD_ADDR_VAR 0 2
12021: PUSH
12022: DOUBLE
12023: LD_INT 1
12025: DEC
12026: ST_TO_ADDR
12027: LD_OWVAR 67
12031: PUSH
12032: FOR_TO
12033: IFFALSE 12116
// begin uc_side = 3 ;
12035: LD_ADDR_OWVAR 20
12039: PUSH
12040: LD_INT 3
12042: ST_TO_ADDR
// uc_nation = 3 ;
12043: LD_ADDR_OWVAR 21
12047: PUSH
12048: LD_INT 3
12050: ST_TO_ADDR
// hc_gallery =  ;
12051: LD_ADDR_OWVAR 33
12055: PUSH
12056: LD_STRING 
12058: ST_TO_ADDR
// hc_name =  ;
12059: LD_ADDR_OWVAR 26
12063: PUSH
12064: LD_STRING 
12066: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12067: LD_INT 0
12069: PPUSH
12070: LD_INT 3
12072: PPUSH
12073: LD_EXP 13
12077: PPUSH
12078: LD_EXP 14
12082: PPUSH
12083: CALL_OW 12
12087: PPUSH
12088: CALL_OW 380
// un = CreateHuman ;
12092: LD_ADDR_VAR 0 3
12096: PUSH
12097: CALL_OW 44
12101: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12102: LD_VAR 0 3
12106: PPUSH
12107: LD_INT 10
12109: PPUSH
12110: CALL_OW 52
// end ;
12114: GO 12032
12116: POP
12117: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
12118: LD_INT 3
12120: PPUSH
12121: LD_INT 3
12123: PPUSH
12124: LD_INT 33
12126: PPUSH
12127: LD_EXP 13
12131: PPUSH
12132: LD_EXP 14
12136: PPUSH
12137: CALL_OW 12
12141: PPUSH
12142: LD_INT 1
12144: PPUSH
12145: LD_INT 1
12147: PUSH
12148: LD_INT 1
12150: PPUSH
12151: LD_INT 2
12153: PPUSH
12154: CALL_OW 12
12158: PUSH
12159: LD_INT 1
12161: PPUSH
12162: LD_INT 2
12164: PPUSH
12165: CALL_OW 12
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: LIST
12174: PUSH
12175: LD_OWVAR 67
12179: ARRAY
12180: PPUSH
12181: CALL 8574 0 6
// for i in UnitsInside ( arm2 ) do
12185: LD_ADDR_VAR 0 2
12189: PUSH
12190: LD_INT 33
12192: PPUSH
12193: CALL_OW 313
12197: PUSH
12198: FOR_IN
12199: IFFALSE 12219
// southBaseDefenders = southBaseDefenders ^ i ;
12201: LD_ADDR_EXP 25
12205: PUSH
12206: LD_EXP 25
12210: PUSH
12211: LD_VAR 0 2
12215: ADD
12216: ST_TO_ADDR
12217: GO 12198
12219: POP
12220: POP
// end ;
12221: LD_VAR 0 1
12225: RET
// export function PrepareNorthBase ; var i , un ; begin
12226: LD_INT 0
12228: PPUSH
12229: PPUSH
12230: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
12231: LD_ADDR_VAR 0 2
12235: PUSH
12236: DOUBLE
12237: LD_INT 1
12239: DEC
12240: ST_TO_ADDR
12241: LD_INT 1
12243: PPUSH
12244: LD_INT 2
12246: PPUSH
12247: CALL_OW 12
12251: PUSH
12252: LD_INT 2
12254: PPUSH
12255: LD_INT 3
12257: PPUSH
12258: CALL_OW 12
12262: PUSH
12263: LD_INT 3
12265: PPUSH
12266: LD_INT 4
12268: PPUSH
12269: CALL_OW 12
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: LIST
12278: PUSH
12279: LD_OWVAR 67
12283: ARRAY
12284: PUSH
12285: FOR_TO
12286: IFFALSE 12372
// begin uc_side = 3 ;
12288: LD_ADDR_OWVAR 20
12292: PUSH
12293: LD_INT 3
12295: ST_TO_ADDR
// uc_nation = 3 ;
12296: LD_ADDR_OWVAR 21
12300: PUSH
12301: LD_INT 3
12303: ST_TO_ADDR
// hc_gallery =  ;
12304: LD_ADDR_OWVAR 33
12308: PUSH
12309: LD_STRING 
12311: ST_TO_ADDR
// hc_name =  ;
12312: LD_ADDR_OWVAR 26
12316: PUSH
12317: LD_STRING 
12319: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12320: LD_INT 0
12322: PPUSH
12323: LD_INT 1
12325: PPUSH
12326: LD_EXP 13
12330: PPUSH
12331: LD_EXP 14
12335: PPUSH
12336: CALL_OW 12
12340: PPUSH
12341: CALL_OW 380
// un = CreateHuman ;
12345: LD_ADDR_VAR 0 3
12349: PUSH
12350: CALL_OW 44
12354: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12355: LD_VAR 0 3
12359: PPUSH
12360: LD_INT 14
12362: PPUSH
12363: LD_INT 0
12365: PPUSH
12366: CALL_OW 49
// end ;
12370: GO 12285
12372: POP
12373: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
12374: LD_INT 3
12376: PPUSH
12377: LD_INT 3
12379: PPUSH
12380: LD_INT 2
12382: PPUSH
12383: LD_EXP 13
12387: PPUSH
12388: LD_EXP 14
12392: PPUSH
12393: CALL_OW 12
12397: PPUSH
12398: LD_INT 1
12400: PPUSH
12401: LD_INT 1
12403: PPUSH
12404: LD_INT 2
12406: PPUSH
12407: CALL_OW 12
12411: PUSH
12412: LD_INT 1
12414: PPUSH
12415: LD_INT 3
12417: PPUSH
12418: CALL_OW 12
12422: PUSH
12423: LD_INT 1
12425: PPUSH
12426: LD_INT 3
12428: PPUSH
12429: CALL_OW 12
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: LIST
12438: PUSH
12439: LD_OWVAR 67
12443: ARRAY
12444: PPUSH
12445: CALL 8574 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
12449: LD_INT 3
12451: PPUSH
12452: LD_INT 3
12454: PPUSH
12455: LD_INT 23
12457: PPUSH
12458: LD_EXP 13
12462: PPUSH
12463: LD_EXP 14
12467: PPUSH
12468: CALL_OW 12
12472: PPUSH
12473: LD_INT 4
12475: PPUSH
12476: LD_INT 0
12478: PUSH
12479: LD_INT 1
12481: PUSH
12482: LD_INT 2
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: LIST
12489: PUSH
12490: LD_OWVAR 67
12494: ARRAY
12495: PPUSH
12496: CALL 8574 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12500: LD_INT 3
12502: PPUSH
12503: LD_INT 3
12505: PPUSH
12506: LD_INT 1
12508: PPUSH
12509: LD_EXP 13
12513: PPUSH
12514: LD_EXP 14
12518: PPUSH
12519: CALL_OW 12
12523: PPUSH
12524: LD_INT 2
12526: PPUSH
12527: LD_INT 1
12529: PUSH
12530: LD_INT 2
12532: PUSH
12533: LD_INT 2
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: LIST
12540: PUSH
12541: LD_OWVAR 67
12545: ARRAY
12546: PPUSH
12547: CALL 8574 0 6
// for i in UnitsInside ( arm1 ) do
12551: LD_ADDR_VAR 0 2
12555: PUSH
12556: LD_INT 2
12558: PPUSH
12559: CALL_OW 313
12563: PUSH
12564: FOR_IN
12565: IFFALSE 12585
// northBaseDefenders = northBaseDefenders ^ i ;
12567: LD_ADDR_EXP 24
12571: PUSH
12572: LD_EXP 24
12576: PUSH
12577: LD_VAR 0 2
12581: ADD
12582: ST_TO_ADDR
12583: GO 12564
12585: POP
12586: POP
// end ;
12587: LD_VAR 0 1
12591: RET
// export function PrepareOtherRussians ; var i , un ; begin
12592: LD_INT 0
12594: PPUSH
12595: PPUSH
12596: PPUSH
// for i = 1 to 2 do
12597: LD_ADDR_VAR 0 2
12601: PUSH
12602: DOUBLE
12603: LD_INT 1
12605: DEC
12606: ST_TO_ADDR
12607: LD_INT 2
12609: PUSH
12610: FOR_TO
12611: IFFALSE 12712
// begin uc_side = 3 ;
12613: LD_ADDR_OWVAR 20
12617: PUSH
12618: LD_INT 3
12620: ST_TO_ADDR
// uc_nation = 3 ;
12621: LD_ADDR_OWVAR 21
12625: PUSH
12626: LD_INT 3
12628: ST_TO_ADDR
// hc_gallery =  ;
12629: LD_ADDR_OWVAR 33
12633: PUSH
12634: LD_STRING 
12636: ST_TO_ADDR
// hc_name =  ;
12637: LD_ADDR_OWVAR 26
12641: PUSH
12642: LD_STRING 
12644: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12645: LD_INT 0
12647: PPUSH
12648: LD_INT 1
12650: PPUSH
12651: LD_EXP 13
12655: PPUSH
12656: LD_EXP 14
12660: PPUSH
12661: CALL_OW 12
12665: PPUSH
12666: CALL_OW 380
// un = CreateHuman ;
12670: LD_ADDR_VAR 0 3
12674: PUSH
12675: CALL_OW 44
12679: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12680: LD_VAR 0 3
12684: PPUSH
12685: LD_INT 9
12687: PPUSH
12688: LD_INT 0
12690: PPUSH
12691: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12695: LD_VAR 0 3
12699: PPUSH
12700: LD_INT 80
12702: PPUSH
12703: LD_INT 73
12705: PPUSH
12706: CALL_OW 118
// end ;
12710: GO 12610
12712: POP
12713: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12714: LD_ADDR_VAR 0 2
12718: PUSH
12719: LD_INT 22
12721: PUSH
12722: LD_INT 3
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: LD_INT 30
12731: PUSH
12732: LD_INT 31
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PPUSH
12743: CALL_OW 69
12747: PUSH
12748: FOR_IN
12749: IFFALSE 12777
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12751: LD_EXP 13
12755: PPUSH
12756: LD_EXP 14
12760: PPUSH
12761: CALL_OW 12
12765: PPUSH
12766: LD_VAR 0 2
12770: PPUSH
12771: CALL 8684 0 2
12775: GO 12748
12777: POP
12778: POP
// end ;
12779: LD_VAR 0 1
12783: RET
// export function PrepareCargoBays ; begin
12784: LD_INT 0
12786: PPUSH
// uc_side = 3 ;
12787: LD_ADDR_OWVAR 20
12791: PUSH
12792: LD_INT 3
12794: ST_TO_ADDR
// uc_nation = 3 ;
12795: LD_ADDR_OWVAR 21
12799: PUSH
12800: LD_INT 3
12802: ST_TO_ADDR
// vc_engine = 1 ;
12803: LD_ADDR_OWVAR 39
12807: PUSH
12808: LD_INT 1
12810: ST_TO_ADDR
// vc_control = 1 ;
12811: LD_ADDR_OWVAR 38
12815: PUSH
12816: LD_INT 1
12818: ST_TO_ADDR
// vc_weapon = 51 ;
12819: LD_ADDR_OWVAR 40
12823: PUSH
12824: LD_INT 51
12826: ST_TO_ADDR
// vc_chassis = 22 ;
12827: LD_ADDR_OWVAR 37
12831: PUSH
12832: LD_INT 22
12834: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12835: LD_ADDR_EXP 15
12839: PUSH
12840: CALL_OW 45
12844: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12845: LD_ADDR_EXP 16
12849: PUSH
12850: CALL_OW 45
12854: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12855: LD_EXP 15
12859: PPUSH
12860: LD_INT 13
12862: PPUSH
12863: LD_INT 0
12865: PPUSH
12866: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12870: LD_EXP 16
12874: PPUSH
12875: LD_INT 13
12877: PPUSH
12878: LD_INT 0
12880: PPUSH
12881: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12885: LD_EXP 15
12889: PPUSH
12890: LD_INT 2
12892: PPUSH
12893: LD_INT 70
12895: PUSH
12896: LD_INT 50
12898: PUSH
12899: LD_INT 30
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: PUSH
12907: LD_OWVAR 67
12911: ARRAY
12912: PPUSH
12913: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12917: LD_EXP 16
12921: PPUSH
12922: LD_INT 2
12924: PPUSH
12925: LD_INT 70
12927: PUSH
12928: LD_INT 50
12930: PUSH
12931: LD_INT 30
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: LIST
12938: PUSH
12939: LD_OWVAR 67
12943: ARRAY
12944: PPUSH
12945: CALL_OW 291
// hc_gallery =  ;
12949: LD_ADDR_OWVAR 33
12953: PUSH
12954: LD_STRING 
12956: ST_TO_ADDR
// hc_name =  ;
12957: LD_ADDR_OWVAR 26
12961: PUSH
12962: LD_STRING 
12964: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12965: LD_INT 1
12967: PPUSH
12968: LD_INT 3
12970: PPUSH
12971: LD_INT 1
12973: PPUSH
12974: LD_INT 2
12976: PPUSH
12977: CALL_OW 12
12981: PPUSH
12982: CALL_OW 380
// driver1 = CreateHuman ;
12986: LD_ADDR_EXP 17
12990: PUSH
12991: CALL_OW 44
12995: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
12996: LD_EXP 17
13000: PPUSH
13001: LD_EXP 15
13005: PPUSH
13006: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13010: LD_ADDR_OWVAR 26
13014: PUSH
13015: LD_STRING Nikolai Andreyev
13017: ST_TO_ADDR
// driver2 = CreateHuman ;
13018: LD_ADDR_EXP 18
13022: PUSH
13023: CALL_OW 44
13027: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13028: LD_EXP 18
13032: PPUSH
13033: LD_EXP 16
13037: PPUSH
13038: CALL_OW 52
// end ;
13042: LD_VAR 0 1
13046: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
13047: LD_INT 0
13049: PPUSH
13050: PPUSH
13051: PPUSH
13052: PPUSH
13053: PPUSH
13054: PPUSH
13055: PPUSH
// uc_side = 3 ;
13056: LD_ADDR_OWVAR 20
13060: PUSH
13061: LD_INT 3
13063: ST_TO_ADDR
// uc_nation = 3 ;
13064: LD_ADDR_OWVAR 21
13068: PUSH
13069: LD_INT 3
13071: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
13072: LD_ADDR_VAR 0 4
13076: PUSH
13077: DOUBLE
13078: LD_INT 1
13080: DEC
13081: ST_TO_ADDR
13082: LD_VAR 0 1
13086: PUSH
13087: LD_INT 1
13089: PPUSH
13090: LD_INT 3
13092: PPUSH
13093: CALL_OW 12
13097: PLUS
13098: PUSH
13099: FOR_TO
13100: IFFALSE 13277
// begin vc_engine = 1 ;
13102: LD_ADDR_OWVAR 39
13106: PUSH
13107: LD_INT 1
13109: ST_TO_ADDR
// vc_control = 1 ;
13110: LD_ADDR_OWVAR 38
13114: PUSH
13115: LD_INT 1
13117: ST_TO_ADDR
// vc_weapon = 42 ;
13118: LD_ADDR_OWVAR 40
13122: PUSH
13123: LD_INT 42
13125: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
13126: LD_ADDR_OWVAR 37
13130: PUSH
13131: LD_INT 21
13133: PUSH
13134: LD_INT 22
13136: PUSH
13137: LD_INT 22
13139: PUSH
13140: EMPTY
13141: LIST
13142: LIST
13143: LIST
13144: PUSH
13145: LD_OWVAR 67
13149: ARRAY
13150: ST_TO_ADDR
// veh = CreateVehicle ;
13151: LD_ADDR_VAR 0 5
13155: PUSH
13156: CALL_OW 45
13160: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13161: LD_VAR 0 5
13165: PPUSH
13166: LD_VAR 0 2
13170: PPUSH
13171: LD_INT 0
13173: PPUSH
13174: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13178: LD_ADDR_EXP 26
13182: PUSH
13183: LD_EXP 26
13187: PUSH
13188: LD_VAR 0 5
13192: ADD
13193: ST_TO_ADDR
// hc_gallery =  ;
13194: LD_ADDR_OWVAR 33
13198: PUSH
13199: LD_STRING 
13201: ST_TO_ADDR
// hc_name =  ;
13202: LD_ADDR_OWVAR 26
13206: PUSH
13207: LD_STRING 
13209: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13210: LD_INT 0
13212: PPUSH
13213: LD_INT 3
13215: PPUSH
13216: LD_EXP 13
13220: PPUSH
13221: LD_EXP 14
13225: PPUSH
13226: CALL_OW 12
13230: PPUSH
13231: CALL_OW 380
// un = CreateHuman ;
13235: LD_ADDR_VAR 0 6
13239: PUSH
13240: CALL_OW 44
13244: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13245: LD_VAR 0 6
13249: PPUSH
13250: LD_VAR 0 5
13254: PPUSH
13255: CALL_OW 52
// attackGroup = attackGroup ^ un ;
13259: LD_ADDR_EXP 26
13263: PUSH
13264: LD_EXP 26
13268: PUSH
13269: LD_VAR 0 6
13273: ADD
13274: ST_TO_ADDR
// end ;
13275: GO 13099
13277: POP
13278: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13279: LD_INT 0
13281: PPUSH
13282: LD_INT 2
13284: PPUSH
13285: LD_EXP 13
13289: PPUSH
13290: LD_EXP 14
13294: PPUSH
13295: CALL_OW 12
13299: PPUSH
13300: CALL_OW 380
// un = CreateHuman ;
13304: LD_ADDR_VAR 0 6
13308: PUSH
13309: CALL_OW 44
13313: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13314: LD_ADDR_VAR 0 4
13318: PUSH
13319: DOUBLE
13320: LD_INT 1
13322: DEC
13323: ST_TO_ADDR
13324: LD_VAR 0 1
13328: PUSH
13329: LD_INT 2
13331: PUSH
13332: LD_INT 2
13334: MUL
13335: PLUS
13336: PUSH
13337: FOR_TO
13338: IFFALSE 13426
// begin hc_gallery =  ;
13340: LD_ADDR_OWVAR 33
13344: PUSH
13345: LD_STRING 
13347: ST_TO_ADDR
// hc_name =  ;
13348: LD_ADDR_OWVAR 26
13352: PUSH
13353: LD_STRING 
13355: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13356: LD_INT 1
13358: PPUSH
13359: LD_INT 1
13361: PPUSH
13362: LD_EXP 13
13366: PPUSH
13367: LD_EXP 14
13371: PPUSH
13372: CALL_OW 12
13376: PPUSH
13377: CALL_OW 380
// un = CreateHuman ;
13381: LD_ADDR_VAR 0 6
13385: PUSH
13386: CALL_OW 44
13390: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
13391: LD_VAR 0 6
13395: PPUSH
13396: LD_VAR 0 2
13400: PPUSH
13401: LD_INT 0
13403: PPUSH
13404: CALL_OW 49
// attackGroup = attackGroup ^ un ;
13408: LD_ADDR_EXP 26
13412: PUSH
13413: LD_EXP 26
13417: PUSH
13418: LD_VAR 0 6
13422: ADD
13423: ST_TO_ADDR
// end ;
13424: GO 13337
13426: POP
13427: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13428: LD_ADDR_VAR 0 7
13432: PUSH
13433: LD_INT 26
13435: PPUSH
13436: LD_INT 22
13438: PUSH
13439: LD_INT 3
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: LD_INT 21
13448: PUSH
13449: LD_INT 1
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: LD_INT 26
13458: PUSH
13459: LD_INT 1
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: LIST
13470: PPUSH
13471: CALL_OW 70
13475: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13476: LD_VAR 0 7
13480: PUSH
13481: LD_INT 1
13483: ARRAY
13484: PPUSH
13485: LD_STRING D9-Rus3-1
13487: PPUSH
13488: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13492: LD_VAR 0 7
13496: PUSH
13497: LD_INT 2
13499: ARRAY
13500: PPUSH
13501: LD_STRING D9-Russ-1
13503: PPUSH
13504: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13508: LD_INT 35
13510: PPUSH
13511: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13515: LD_ADDR_VAR 0 4
13519: PUSH
13520: LD_INT 26
13522: PPUSH
13523: LD_INT 22
13525: PUSH
13526: LD_INT 3
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: PUSH
13533: EMPTY
13534: LIST
13535: PPUSH
13536: CALL_OW 70
13540: PUSH
13541: FOR_IN
13542: IFFALSE 13714
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13544: LD_ADDR_VAR 0 8
13548: PUSH
13549: LD_INT 22
13551: PUSH
13552: LD_INT 1
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: PPUSH
13559: CALL_OW 69
13563: PPUSH
13564: LD_VAR 0 4
13568: PPUSH
13569: CALL_OW 74
13573: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13574: LD_ADDR_VAR 0 9
13578: PUSH
13579: LD_INT 22
13581: PUSH
13582: LD_INT 1
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: PUSH
13589: LD_INT 2
13591: PUSH
13592: LD_INT 59
13594: PUSH
13595: EMPTY
13596: LIST
13597: PUSH
13598: LD_INT 21
13600: PUSH
13601: LD_INT 1
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PUSH
13608: LD_INT 21
13610: PUSH
13611: LD_INT 2
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: PUSH
13628: EMPTY
13629: LIST
13630: PPUSH
13631: CALL_OW 69
13635: PPUSH
13636: LD_VAR 0 4
13640: PPUSH
13641: CALL_OW 74
13645: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13646: LD_VAR 0 4
13650: PPUSH
13651: LD_VAR 0 8
13655: PPUSH
13656: CALL_OW 296
13660: PUSH
13661: LD_INT 8
13663: PLUS
13664: PUSH
13665: LD_VAR 0 4
13669: PPUSH
13670: LD_VAR 0 9
13674: PPUSH
13675: CALL_OW 296
13679: LESS
13680: IFFALSE 13698
// begin ComAttackUnit ( i , target1 ) ;
13682: LD_VAR 0 4
13686: PPUSH
13687: LD_VAR 0 8
13691: PPUSH
13692: CALL_OW 115
// end else
13696: GO 13712
// begin ComAttackUnit ( i , target2 ) ;
13698: LD_VAR 0 4
13702: PPUSH
13703: LD_VAR 0 9
13707: PPUSH
13708: CALL_OW 115
// end ; end ;
13712: GO 13541
13714: POP
13715: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13716: LD_INT 26
13718: PPUSH
13719: LD_INT 22
13721: PUSH
13722: LD_INT 3
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: PUSH
13729: LD_INT 2
13731: PUSH
13732: LD_INT 21
13734: PUSH
13735: LD_INT 1
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: PUSH
13742: LD_INT 21
13744: PUSH
13745: LD_INT 2
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: PUSH
13752: LD_INT 59
13754: PUSH
13755: EMPTY
13756: LIST
13757: PUSH
13758: EMPTY
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: PPUSH
13768: CALL_OW 70
13772: PUSH
13773: LD_INT 0
13775: EQUAL
13776: IFFALSE 13508
// end ; end_of_file
13778: LD_VAR 0 3
13782: RET
// every 0 0$1 do
13783: GO 13785
13785: DISABLE
// begin enable ;
13786: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13787: LD_INT 3
13789: PPUSH
13790: LD_INT 1
13792: PPUSH
13793: LD_INT 22
13795: PPUSH
13796: CALL 8820 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
13800: LD_INT 3
13802: PPUSH
13803: LD_INT 20
13805: PPUSH
13806: LD_INT 22
13808: PPUSH
13809: LD_INT 23
13811: PPUSH
13812: CALL 9066 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13816: LD_INT 3
13818: PPUSH
13819: LD_INT 21
13821: PPUSH
13822: LD_INT 23
13824: PPUSH
13825: CALL 9343 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13829: LD_INT 22
13831: PPUSH
13832: LD_INT 1
13834: PPUSH
13835: LD_EXP 24
13839: PPUSH
13840: LD_INT 2
13842: PPUSH
13843: LD_INT 3
13845: PPUSH
13846: CALL 9815 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13850: LD_INT 23
13852: PPUSH
13853: LD_INT 1
13855: PPUSH
13856: LD_EXP 25
13860: PPUSH
13861: LD_INT 33
13863: PPUSH
13864: LD_INT 1
13866: PPUSH
13867: CALL 9815 0 5
// end ; end_of_file
13871: END
// on UnitDestroyed ( unit ) do begin if GetBType ( unit ) = b_depot then
13872: LD_VAR 0 1
13876: PPUSH
13877: CALL_OW 266
13881: PUSH
13882: LD_INT 0
13884: EQUAL
13885: IFFALSE 13894
// YouLost ( DepotDestroyed ) ;
13887: LD_STRING DepotDestroyed
13889: PPUSH
13890: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13894: LD_VAR 0 1
13898: PPUSH
13899: CALL_OW 255
13903: PUSH
13904: LD_INT 1
13906: EQUAL
13907: PUSH
13908: LD_VAR 0 1
13912: PPUSH
13913: CALL_OW 247
13917: PUSH
13918: LD_INT 1
13920: EQUAL
13921: AND
13922: IFFALSE 13938
// deadsCounter = deadsCounter + 1 ;
13924: LD_ADDR_EXP 31
13928: PUSH
13929: LD_EXP 31
13933: PUSH
13934: LD_INT 1
13936: PLUS
13937: ST_TO_ADDR
// end ;
13938: PPOPN 1
13940: END
// on Command ( comandid ) do var i , j , tmp ;
13941: LD_INT 0
13943: PPUSH
13944: PPUSH
13945: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
13946: LD_ADDR_VAR 0 2
13950: PUSH
13951: LD_INT 22
13953: PUSH
13954: LD_INT 1
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: PUSH
13961: LD_INT 21
13963: PUSH
13964: LD_INT 2
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: PUSH
13971: EMPTY
13972: LIST
13973: LIST
13974: PPUSH
13975: CALL_OW 69
13979: PUSH
13980: FOR_IN
13981: IFFALSE 14106
// begin if GetTaskList ( i ) > 0 then
13983: LD_VAR 0 2
13987: PPUSH
13988: CALL_OW 437
13992: PUSH
13993: LD_INT 0
13995: GREATER
13996: IFFALSE 14104
// begin for j = 1 to GetTaskList ( i ) do
13998: LD_ADDR_VAR 0 3
14002: PUSH
14003: DOUBLE
14004: LD_INT 1
14006: DEC
14007: ST_TO_ADDR
14008: LD_VAR 0 2
14012: PPUSH
14013: CALL_OW 437
14017: PUSH
14018: FOR_TO
14019: IFFALSE 14102
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14021: LD_ADDR_VAR 0 4
14025: PUSH
14026: LD_VAR 0 2
14030: PPUSH
14031: CALL_OW 437
14035: PUSH
14036: LD_VAR 0 3
14040: ARRAY
14041: PUSH
14042: LD_INT 4
14044: ARRAY
14045: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14046: LD_VAR 0 4
14050: PPUSH
14051: CALL_OW 255
14055: PUSH
14056: LD_INT 3
14058: EQUAL
14059: PUSH
14060: LD_VAR 0 4
14064: PPUSH
14065: CALL_OW 247
14069: PUSH
14070: LD_INT 2
14072: EQUAL
14073: AND
14074: PUSH
14075: LD_VAR 0 4
14079: PPUSH
14080: CALL_OW 264
14084: PUSH
14085: LD_INT 51
14087: EQUAL
14088: AND
14089: IFFALSE 14100
// ComStop ( i ) ;
14091: LD_VAR 0 2
14095: PPUSH
14096: CALL_OW 141
// end ;
14100: GO 14018
14102: POP
14103: POP
// end ; end ;
14104: GO 13980
14106: POP
14107: POP
// end ;
14108: PPOPN 4
14110: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14111: LD_VAR 0 2
14115: PUSH
14116: LD_EXP 8
14120: EQUAL
14121: PUSH
14122: LD_EXP 21
14126: PUSH
14127: LD_INT 4
14129: NONEQUAL
14130: AND
14131: IFFALSE 14283
// begin if IsOk ( Mikhail ) then
14133: LD_EXP 8
14137: PPUSH
14138: CALL_OW 302
14142: IFFALSE 14150
// AskMikhail else
14144: CALL 7157 0 0
14148: GO 14283
// if IsOk ( lab1 ) then
14150: LD_INT 23
14152: PPUSH
14153: CALL_OW 302
14157: IFFALSE 14246
// begin InGameOn ;
14159: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14163: LD_EXP 8
14167: PPUSH
14168: LD_INT 6
14170: PPUSH
14171: CALL_OW 235
// SetSide ( lab1 , 6 ) ;
14175: LD_INT 23
14177: PPUSH
14178: LD_INT 6
14180: PPUSH
14181: CALL_OW 235
// ComEnterUnit ( Mikhail , lab1 ) ;
14185: LD_EXP 8
14189: PPUSH
14190: LD_INT 23
14192: PPUSH
14193: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14197: LD_INT 35
14199: PPUSH
14200: CALL_OW 67
// until IsInUnit ( Mikhail ) = lab1 or IsDead ( Mikhail ) ;
14204: LD_EXP 8
14208: PPUSH
14209: CALL_OW 310
14213: PUSH
14214: LD_INT 23
14216: EQUAL
14217: PUSH
14218: LD_EXP 8
14222: PPUSH
14223: CALL_OW 301
14227: OR
14228: IFFALSE 14197
// SetSide ( lab1 , 1 ) ;
14230: LD_INT 23
14232: PPUSH
14233: LD_INT 1
14235: PPUSH
14236: CALL_OW 235
// InGameOff ;
14240: CALL_OW 9
// end else
14244: GO 14283
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
14246: LD_INT 3
14248: PPUSH
14249: LD_INT 6
14251: PPUSH
14252: LD_INT 2
14254: PPUSH
14255: LD_INT 1
14257: PPUSH
14258: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
14262: LD_EXP 8
14266: PPUSH
14267: LD_INT 6
14269: PPUSH
14270: CALL_OW 235
// ComHold ( Mikhail ) ;
14274: LD_EXP 8
14278: PPUSH
14279: CALL_OW 140
// end ; end ; end ;
14283: PPOPN 2
14285: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
14286: LD_EXP 8
14290: PPUSH
14291: CALL_OW 257
14295: PUSH
14296: LD_INT 3
14298: NONEQUAL
14299: IFFALSE 14317
14301: GO 14303
14303: DISABLE
// begin enable ;
14304: ENABLE
// SetClass ( Mikhail , 3 ) ;
14305: LD_EXP 8
14309: PPUSH
14310: LD_INT 3
14312: PPUSH
14313: CALL_OW 336
// end ; end_of_file
14317: END
// every 0 0$1 trigger IsDead ( JMM ) do
14318: LD_EXP 1
14322: PPUSH
14323: CALL_OW 301
14327: IFFALSE 14339
14329: GO 14331
14331: DISABLE
// YouLost ( JMM ) ;
14332: LD_STRING JMM
14334: PPUSH
14335: CALL_OW 104
14339: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
14340: LD_INT 22
14342: PUSH
14343: LD_INT 1
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: PUSH
14350: LD_INT 21
14352: PUSH
14353: LD_INT 1
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: PUSH
14360: LD_INT 25
14362: PUSH
14363: LD_INT 2
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: LIST
14374: PPUSH
14375: CALL_OW 69
14379: PUSH
14380: LD_INT 0
14382: EQUAL
14383: PUSH
14384: LD_INT 22
14386: PUSH
14387: LD_INT 4
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: PUSH
14394: LD_INT 21
14396: PUSH
14397: LD_INT 1
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: PUSH
14404: LD_INT 25
14406: PUSH
14407: LD_INT 2
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: LIST
14418: PPUSH
14419: CALL_OW 69
14423: PUSH
14424: LD_INT 0
14426: EQUAL
14427: AND
14428: PUSH
14429: LD_INT 1
14431: PPUSH
14432: CALL_OW 255
14436: PUSH
14437: LD_INT 3
14439: EQUAL
14440: AND
14441: PUSH
14442: LD_INT 10
14444: PPUSH
14445: CALL_OW 255
14449: PUSH
14450: LD_INT 3
14452: EQUAL
14453: AND
14454: IFFALSE 14466
14456: GO 14458
14458: DISABLE
// YouLost ( Engineer ) ;
14459: LD_STRING Engineer
14461: PPUSH
14462: CALL_OW 104
14466: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14467: LD_INT 1
14469: PPUSH
14470: CALL_OW 255
14474: PUSH
14475: LD_INT 3
14477: EQUAL
14478: PUSH
14479: LD_EXP 27
14483: PUSH
14484: LD_INT 1
14486: EQUAL
14487: AND
14488: IFFALSE 14500
14490: GO 14492
14492: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14493: LD_STRING DepotCaptured
14495: PPUSH
14496: CALL_OW 104
14500: END
// export function PrepareTigers ; var i , un ; begin
14501: LD_INT 0
14503: PPUSH
14504: PPUSH
14505: PPUSH
// for i = 1 to Difficulty do
14506: LD_ADDR_VAR 0 2
14510: PUSH
14511: DOUBLE
14512: LD_INT 1
14514: DEC
14515: ST_TO_ADDR
14516: LD_OWVAR 67
14520: PUSH
14521: FOR_TO
14522: IFFALSE 14657
// begin hc_sex = sex_male ;
14524: LD_ADDR_OWVAR 27
14528: PUSH
14529: LD_INT 1
14531: ST_TO_ADDR
// uc_side = 0 ;
14532: LD_ADDR_OWVAR 20
14536: PUSH
14537: LD_INT 0
14539: ST_TO_ADDR
// uc_nation = nation_nature ;
14540: LD_ADDR_OWVAR 21
14544: PUSH
14545: LD_INT 0
14547: ST_TO_ADDR
// hc_class = class_tiger ;
14548: LD_ADDR_OWVAR 28
14552: PUSH
14553: LD_INT 14
14555: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14556: LD_ADDR_OWVAR 31
14560: PUSH
14561: LD_EXP 14
14565: PUSH
14566: LD_INT 0
14568: PUSH
14569: LD_INT 0
14571: PUSH
14572: LD_INT 0
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
14581: LD_ADDR_OWVAR 35
14585: PUSH
14586: LD_INT 30
14588: PPUSH
14589: LD_INT 40
14591: PPUSH
14592: CALL_OW 12
14596: PUSH
14597: LD_INT 40
14599: PPUSH
14600: LD_INT 50
14602: PPUSH
14603: CALL_OW 12
14607: PUSH
14608: LD_INT 50
14610: PPUSH
14611: LD_INT 60
14613: PPUSH
14614: CALL_OW 12
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: LIST
14623: PUSH
14624: LD_OWVAR 67
14628: ARRAY
14629: ST_TO_ADDR
// un = CreateHuman ;
14630: LD_ADDR_VAR 0 3
14634: PUSH
14635: CALL_OW 44
14639: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14640: LD_VAR 0 3
14644: PPUSH
14645: LD_INT 27
14647: PPUSH
14648: LD_INT 0
14650: PPUSH
14651: CALL_OW 49
// end ;
14655: GO 14521
14657: POP
14658: POP
// end ; end_of_file
14659: LD_VAR 0 1
14663: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
14664: LD_INT 1
14666: PPUSH
14667: CALL_OW 255
14671: PUSH
14672: LD_INT 1
14674: EQUAL
14675: PUSH
14676: LD_INT 10
14678: PPUSH
14679: CALL_OW 255
14683: PUSH
14684: LD_INT 1
14686: EQUAL
14687: AND
14688: PUSH
14689: LD_EXP 20
14693: PUSH
14694: LD_INT 1
14696: EQUAL
14697: AND
14698: PUSH
14699: LD_INT 22
14701: PUSH
14702: LD_INT 3
14704: PUSH
14705: EMPTY
14706: LIST
14707: LIST
14708: PUSH
14709: LD_INT 21
14711: PUSH
14712: LD_INT 2
14714: PUSH
14715: EMPTY
14716: LIST
14717: LIST
14718: PUSH
14719: LD_INT 34
14721: PUSH
14722: LD_INT 51
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PUSH
14729: LD_INT 3
14731: PUSH
14732: LD_INT 58
14734: PUSH
14735: EMPTY
14736: LIST
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: PPUSH
14748: CALL_OW 69
14752: PUSH
14753: LD_INT 0
14755: EQUAL
14756: AND
14757: IFFALSE 14848
14759: GO 14761
14761: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
14762: LD_INT 9450
14764: PUSH
14765: LD_INT 8400
14767: PUSH
14768: LD_INT 6300
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: LIST
14775: PUSH
14776: LD_OWVAR 67
14780: ARRAY
14781: PPUSH
14782: CALL_OW 67
// if cargoEscape = 1 then
14786: LD_EXP 20
14790: PUSH
14791: LD_INT 1
14793: EQUAL
14794: IFFALSE 14848
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14796: LD_EXP 9
14800: PPUSH
14801: LD_STRING D6-Pow-1
14803: PPUSH
14804: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14808: LD_EXP 1
14812: PPUSH
14813: LD_STRING D6-JMM-1
14815: PPUSH
14816: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14820: LD_EXP 9
14824: PPUSH
14825: LD_STRING D6-Pow-2
14827: PPUSH
14828: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14832: LD_EXP 1
14836: PPUSH
14837: LD_STRING D6-JMM-2
14839: PPUSH
14840: CALL_OW 88
// FinishMission ;
14844: CALL 15056 0 0
// end ; end ;
14848: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
14849: LD_INT 1
14851: PPUSH
14852: CALL_OW 255
14856: PUSH
14857: LD_INT 1
14859: EQUAL
14860: PUSH
14861: LD_INT 10
14863: PPUSH
14864: CALL_OW 255
14868: PUSH
14869: LD_INT 1
14871: EQUAL
14872: AND
14873: PUSH
14874: LD_EXP 20
14878: PUSH
14879: LD_INT 1
14881: GREATER
14882: AND
14883: IFFALSE 14950
14885: GO 14887
14887: DISABLE
14888: LD_INT 0
14890: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
14891: LD_INT 11550
14893: PUSH
14894: LD_INT 10500
14896: PUSH
14897: LD_INT 9450
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: LIST
14904: PUSH
14905: LD_OWVAR 67
14909: ARRAY
14910: PPUSH
14911: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
14915: LD_INT 1
14917: PUSH
14918: LD_INT 2
14920: PUSH
14921: LD_INT 3
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: LIST
14928: PUSH
14929: LD_OWVAR 67
14933: ARRAY
14934: PPUSH
14935: LD_INT 13
14937: PPUSH
14938: CALL 13047 0 2
// lastBattle = 1 ;
14942: LD_ADDR_EXP 27
14946: PUSH
14947: LD_INT 1
14949: ST_TO_ADDR
// end ;
14950: PPOPN 1
14952: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14953: LD_EXP 27
14957: PUSH
14958: LD_INT 1
14960: EQUAL
14961: PUSH
14962: LD_INT 26
14964: PPUSH
14965: LD_INT 22
14967: PUSH
14968: LD_INT 3
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: PUSH
14975: LD_INT 21
14977: PUSH
14978: LD_INT 1
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PPUSH
14989: CALL_OW 70
14993: PUSH
14994: LD_INT 0
14996: EQUAL
14997: AND
14998: IFFALSE 15055
15000: GO 15002
15002: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
15003: LD_EXP 9
15007: PPUSH
15008: LD_STRING D6-Pow-1
15010: PPUSH
15011: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
15015: LD_EXP 1
15019: PPUSH
15020: LD_STRING D6-JMM-1
15022: PPUSH
15023: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
15027: LD_EXP 9
15031: PPUSH
15032: LD_STRING D6-Pow-2
15034: PPUSH
15035: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
15039: LD_EXP 1
15043: PPUSH
15044: LD_STRING D6-JMM-2
15046: PPUSH
15047: CALL_OW 88
// FinishMission ;
15051: CALL 15056 0 0
// end ;
15055: END
// export function FinishMission ; var tmp ; begin
15056: LD_INT 0
15058: PPUSH
15059: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15060: LD_ADDR_VAR 0 2
15064: PUSH
15065: LD_INT 22
15067: PUSH
15068: LD_INT 1
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: PUSH
15075: LD_INT 21
15077: PUSH
15078: LD_INT 2
15080: PUSH
15081: EMPTY
15082: LIST
15083: LIST
15084: PUSH
15085: LD_INT 24
15087: PUSH
15088: LD_INT 251
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: LIST
15099: PPUSH
15100: CALL_OW 69
15104: ST_TO_ADDR
// if tmp then
15105: LD_VAR 0 2
15109: IFFALSE 15123
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15111: LD_VAR 0 2
15115: PPUSH
15116: LD_STRING 02_tanks_1
15118: PPUSH
15119: CALL 10520 0 2
// if mikhailStatus = 1 then
15123: LD_EXP 21
15127: PUSH
15128: LD_INT 1
15130: EQUAL
15131: IFFALSE 15145
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15133: LD_EXP 21
15137: PPUSH
15138: LD_STRING 02_mikhailStatus_1
15140: PPUSH
15141: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15145: LD_INT 1
15147: PPUSH
15148: CALL_OW 274
15152: PPUSH
15153: LD_INT 1
15155: PPUSH
15156: CALL_OW 275
15160: PPUSH
15161: LD_STRING 02_resources_4
15163: PPUSH
15164: CALL_OW 39
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15168: LD_INT 1
15170: PPUSH
15171: CALL_OW 274
15175: PPUSH
15176: LD_INT 1
15178: PPUSH
15179: CALL_OW 275
15183: PUSH
15184: LD_INT 200
15186: GREATEREQUAL
15187: IFFALSE 15201
// begin AddMedal ( Cans , 1 ) ;
15189: LD_STRING Cans
15191: PPUSH
15192: LD_INT 1
15194: PPUSH
15195: CALL_OW 101
// end else
15199: GO 15212
// begin AddMedal ( Cans , - 1 ) ;
15201: LD_STRING Cans
15203: PPUSH
15204: LD_INT 1
15206: NEG
15207: PPUSH
15208: CALL_OW 101
// end ; if deadsCounter < 2 then
15212: LD_EXP 31
15216: PUSH
15217: LD_INT 2
15219: LESS
15220: IFFALSE 15234
// begin AddMedal ( Deaths , 1 ) ;
15222: LD_STRING Deaths
15224: PPUSH
15225: LD_INT 1
15227: PPUSH
15228: CALL_OW 101
// end else
15232: GO 15245
// begin AddMedal ( Deaths , - 1 ) ;
15234: LD_STRING Deaths
15236: PPUSH
15237: LD_INT 1
15239: NEG
15240: PPUSH
15241: CALL_OW 101
// end ; if mikhailStatus = 0 then
15245: LD_EXP 21
15249: PUSH
15250: LD_INT 0
15252: EQUAL
15253: IFFALSE 15266
// AddMedal ( Prisoner , - 1 ) ;
15255: LD_STRING Prisoner
15257: PPUSH
15258: LD_INT 1
15260: NEG
15261: PPUSH
15262: CALL_OW 101
// if mikhailStatus = 1 then
15266: LD_EXP 21
15270: PUSH
15271: LD_INT 1
15273: EQUAL
15274: IFFALSE 15286
// AddMedal ( Prisoner , 1 ) ;
15276: LD_STRING Prisoner
15278: PPUSH
15279: LD_INT 1
15281: PPUSH
15282: CALL_OW 101
// if mikhailStatus = 2 then
15286: LD_EXP 21
15290: PUSH
15291: LD_INT 2
15293: EQUAL
15294: IFFALSE 15306
// AddMedal ( Prisoner , 2 ) ;
15296: LD_STRING Prisoner
15298: PPUSH
15299: LD_INT 2
15301: PPUSH
15302: CALL_OW 101
// if mikhailStatus = 3 then
15306: LD_EXP 21
15310: PUSH
15311: LD_INT 3
15313: EQUAL
15314: IFFALSE 15327
// AddMedal ( Prisoner , - 2 ) ;
15316: LD_STRING Prisoner
15318: PPUSH
15319: LD_INT 2
15321: NEG
15322: PPUSH
15323: CALL_OW 101
// GiveMedals ( MAIN ) ;
15327: LD_STRING MAIN
15329: PPUSH
15330: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
15334: LD_INT 22
15336: PUSH
15337: LD_INT 1
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PUSH
15344: LD_INT 23
15346: PUSH
15347: LD_INT 1
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: PUSH
15354: LD_INT 21
15356: PUSH
15357: LD_INT 1
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: LIST
15368: PPUSH
15369: CALL_OW 69
15373: PPUSH
15374: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15378: LD_EXP 1
15382: PPUSH
15383: LD_EXP 33
15387: PUSH
15388: LD_STRING JMM
15390: STR
15391: PPUSH
15392: CALL_OW 38
// if IsOK ( Bobby ) then
15396: LD_EXP 2
15400: PPUSH
15401: CALL_OW 302
15405: IFFALSE 15425
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15407: LD_EXP 2
15411: PPUSH
15412: LD_EXP 33
15416: PUSH
15417: LD_STRING Bobby
15419: STR
15420: PPUSH
15421: CALL_OW 38
// if IsOK ( Cyrus ) then
15425: LD_EXP 3
15429: PPUSH
15430: CALL_OW 302
15434: IFFALSE 15454
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15436: LD_EXP 3
15440: PPUSH
15441: LD_EXP 33
15445: PUSH
15446: LD_STRING Cyrus
15448: STR
15449: PPUSH
15450: CALL_OW 38
// if IsOK ( Lisa ) then
15454: LD_EXP 4
15458: PPUSH
15459: CALL_OW 302
15463: IFFALSE 15483
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15465: LD_EXP 4
15469: PPUSH
15470: LD_EXP 33
15474: PUSH
15475: LD_STRING Lisa
15477: STR
15478: PPUSH
15479: CALL_OW 38
// if IsOK ( Khatam ) then
15483: LD_EXP 5
15487: PPUSH
15488: CALL_OW 302
15492: IFFALSE 15512
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
15494: LD_EXP 5
15498: PPUSH
15499: LD_EXP 33
15503: PUSH
15504: LD_STRING Khatam
15506: STR
15507: PPUSH
15508: CALL_OW 38
// if IsOK ( Brian ) then
15512: LD_EXP 6
15516: PPUSH
15517: CALL_OW 302
15521: IFFALSE 15541
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
15523: LD_EXP 6
15527: PPUSH
15528: LD_EXP 33
15532: PUSH
15533: LD_STRING Brian
15535: STR
15536: PPUSH
15537: CALL_OW 38
// if IsOk ( Jerry ) then
15541: LD_EXP 7
15545: PPUSH
15546: CALL_OW 302
15550: IFFALSE 15570
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
15552: LD_EXP 7
15556: PPUSH
15557: LD_EXP 33
15561: PUSH
15562: LD_STRING Jerry
15564: STR
15565: PPUSH
15566: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
15570: LD_EXP 21
15574: PUSH
15575: LD_INT 1
15577: EQUAL
15578: PUSH
15579: LD_EXP 8
15583: PPUSH
15584: CALL_OW 255
15588: PUSH
15589: LD_INT 1
15591: EQUAL
15592: AND
15593: PUSH
15594: LD_EXP 8
15598: PPUSH
15599: CALL_OW 302
15603: AND
15604: IFFALSE 15624
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
15606: LD_EXP 8
15610: PPUSH
15611: LD_EXP 33
15615: PUSH
15616: LD_STRING Mikhail
15618: STR
15619: PPUSH
15620: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
15624: LD_INT 50
15626: PUSH
15627: EMPTY
15628: LIST
15629: PUSH
15630: LD_INT 22
15632: PUSH
15633: LD_INT 1
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: LD_INT 21
15642: PUSH
15643: LD_INT 1
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: LIST
15654: PPUSH
15655: CALL_OW 69
15659: PUSH
15660: LD_EXP 1
15664: PUSH
15665: LD_EXP 2
15669: PUSH
15670: LD_EXP 3
15674: PUSH
15675: LD_EXP 4
15679: PUSH
15680: LD_EXP 5
15684: PUSH
15685: LD_EXP 6
15689: PUSH
15690: LD_EXP 7
15694: PUSH
15695: LD_EXP 8
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: DIFF
15710: PPUSH
15711: LD_STRING 02_other_survivors
15713: PPUSH
15714: CALL_OW 38
// YouWin ;
15718: CALL_OW 103
// end ;
15722: LD_VAR 0 1
15726: RET
