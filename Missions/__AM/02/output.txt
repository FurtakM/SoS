// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix ; starting begin mission_prefix := 02_ ;
   0: LD_ADDR_EXP 33
   4: PUSH
   5: LD_STRING 02_
   7: ST_TO_ADDR
// RuSoldMinLevel = 0 ;
   8: LD_ADDR_EXP 13
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
  16: LD_ADDR_EXP 14
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpJMM = 0 ;
  24: LD_ADDR_EXP 10
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpBobby = 0 ;
  32: LD_ADDR_EXP 11
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// hpCyrus = 0 ;
  40: LD_ADDR_EXP 12
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// cargoEscape = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailInBase = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// mikhailDepot = 0 ;
  72: LD_ADDR_EXP 23
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// tigersRespawn = 0 ;
  80: LD_ADDR_EXP 30
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// cargoRespawn = 0 ;
  88: LD_ADDR_EXP 28
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// cargoSee = 0 ;
  96: LD_ADDR_EXP 29
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// lastBattle = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// deadsCounter = 0 ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// spotCorpses = 0 ;
 120: LD_ADDR_EXP 32
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 128: LD_ADDR_EXP 25
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 135: LD_ADDR_EXP 24
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// attackGroup = [ ] ;
 142: LD_ADDR_EXP 26
 146: PUSH
 147: EMPTY
 148: ST_TO_ADDR
// RandomizeAll ;
 149: CALL_OW 11
// InGameOn ;
 153: CALL_OW 8
// Resetfog ;
 157: CALL_OW 335
// PrepareDifficulty ;
 161: CALL 10342 0 0
// PrepareRussianCommander ;
 165: CALL 11678 0 0
// PrepareSouthBase ;
 169: CALL 11761 0 0
// PrepareNorthBase ;
 173: CALL 12118 0 0
// PrepareOtherRussians ;
 177: CALL 12484 0 0
// PrepareHeroes ;
 181: CALL 10657 0 0
// PrepareLisSquad ;
 185: CALL 10900 0 0
// PrepareOtherAmericans ;
 189: CALL 11245 0 0
// end ; end_of_file
 193: END
// every 1 do var tmp ;
 194: GO 196
 196: DISABLE
 197: LD_INT 0
 199: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 200: LD_EXP 1
 204: PPUSH
 205: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 209: LD_ADDR_VAR 0 1
 213: PUSH
 214: LD_INT 22
 216: PUSH
 217: LD_INT 4
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 21
 226: PUSH
 227: LD_INT 1
 229: PUSH
 230: EMPTY
 231: LIST
 232: LIST
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: PPUSH
 238: CALL_OW 69
 242: PUSH
 243: LD_EXP 4
 247: PUSH
 248: EMPTY
 249: LIST
 250: DIFF
 251: ST_TO_ADDR
// if Cyrus and Bobby then
 252: LD_EXP 3
 256: PUSH
 257: LD_EXP 2
 261: AND
 262: IFFALSE 592
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 264: LD_EXP 3
 268: PPUSH
 269: LD_INT 43
 271: PPUSH
 272: LD_INT 72
 274: PPUSH
 275: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_INT 44
 286: PPUSH
 287: LD_INT 70
 289: PPUSH
 290: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 294: LD_EXP 1
 298: PPUSH
 299: LD_INT 46
 301: PPUSH
 302: LD_INT 73
 304: PPUSH
 305: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 309: LD_EXP 3
 313: PPUSH
 314: LD_STRING D1a-Cyrus-1
 316: PPUSH
 317: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 321: LD_EXP 1
 325: PPUSH
 326: LD_STRING D1a-JMM-1
 328: PPUSH
 329: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 333: LD_EXP 3
 337: PPUSH
 338: LD_INT 37
 340: PPUSH
 341: LD_INT 66
 343: PPUSH
 344: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 348: LD_EXP 2
 352: PPUSH
 353: LD_INT 41
 355: PPUSH
 356: LD_INT 67
 358: PPUSH
 359: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 363: LD_EXP 1
 367: PPUSH
 368: LD_INT 38
 370: PPUSH
 371: LD_INT 64
 373: PPUSH
 374: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 378: LD_EXP 2
 382: PPUSH
 383: LD_STRING D1a-Bobby-2
 385: PPUSH
 386: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 390: LD_EXP 3
 394: PPUSH
 395: LD_INT 35
 397: PPUSH
 398: LD_INT 62
 400: PPUSH
 401: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 405: LD_EXP 2
 409: PPUSH
 410: LD_INT 32
 412: PPUSH
 413: LD_INT 60
 415: PPUSH
 416: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 420: LD_EXP 1
 424: PPUSH
 425: LD_INT 35
 427: PPUSH
 428: LD_INT 60
 430: PPUSH
 431: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 435: LD_EXP 1
 439: PPUSH
 440: LD_STRING D1a-JMM-2
 442: PPUSH
 443: CALL_OW 88
// ComWalk ( Lisa ) ;
 447: LD_EXP 4
 451: PPUSH
 452: CALL_OW 138
// wait ( 0 0$1 ) ;
 456: LD_INT 35
 458: PPUSH
 459: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 463: LD_EXP 4
 467: PPUSH
 468: LD_EXP 1
 472: PPUSH
 473: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 477: LD_EXP 1
 481: PUSH
 482: LD_EXP 3
 486: PUSH
 487: LD_EXP 2
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: PPUSH
 497: LD_EXP 4
 501: PPUSH
 502: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 506: LD_VAR 0 1
 510: PUSH
 511: LD_INT 1
 513: ARRAY
 514: PPUSH
 515: LD_INT 33
 517: PPUSH
 518: LD_INT 55
 520: PPUSH
 521: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 525: LD_VAR 0 1
 529: PUSH
 530: LD_INT 2
 532: ARRAY
 533: PPUSH
 534: LD_INT 30
 536: PPUSH
 537: LD_INT 54
 539: PPUSH
 540: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 544: LD_VAR 0 1
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: PPUSH
 553: LD_EXP 1
 557: PPUSH
 558: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 562: LD_VAR 0 1
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 1
 575: PPUSH
 576: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 580: LD_EXP 4
 584: PPUSH
 585: LD_STRING D1a-Lisa-2
 587: PPUSH
 588: CALL_OW 88
// end ; if Cyrus and not Bobby then
 592: LD_EXP 3
 596: PUSH
 597: LD_EXP 2
 601: NOT
 602: AND
 603: IFFALSE 808
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 605: LD_EXP 3
 609: PPUSH
 610: LD_INT 43
 612: PPUSH
 613: LD_INT 72
 615: PPUSH
 616: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 620: LD_EXP 1
 624: PPUSH
 625: LD_INT 46
 627: PPUSH
 628: LD_INT 73
 630: PPUSH
 631: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 635: LD_EXP 3
 639: PPUSH
 640: LD_STRING D1a-Cyrus-1
 642: PPUSH
 643: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 647: LD_EXP 1
 651: PPUSH
 652: LD_STRING D1a-JMM-1
 654: PPUSH
 655: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 659: LD_EXP 3
 663: PPUSH
 664: LD_INT 37
 666: PPUSH
 667: LD_INT 66
 669: PPUSH
 670: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 674: LD_EXP 1
 678: PPUSH
 679: LD_INT 38
 681: PPUSH
 682: LD_INT 64
 684: PPUSH
 685: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 689: LD_EXP 3
 693: PPUSH
 694: LD_STRING D1a-Cyrus-2
 696: PPUSH
 697: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 701: LD_EXP 3
 705: PPUSH
 706: LD_INT 35
 708: PPUSH
 709: LD_INT 62
 711: PPUSH
 712: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 716: LD_EXP 1
 720: PPUSH
 721: LD_INT 35
 723: PPUSH
 724: LD_INT 60
 726: PPUSH
 727: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 731: LD_EXP 1
 735: PPUSH
 736: LD_STRING D1a-JMM-2
 738: PPUSH
 739: CALL_OW 88
// ComWalk ( Lisa ) ;
 743: LD_EXP 4
 747: PPUSH
 748: CALL_OW 138
// wait ( 0 0$1 ) ;
 752: LD_INT 35
 754: PPUSH
 755: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 759: LD_EXP 4
 763: PPUSH
 764: LD_EXP 1
 768: PPUSH
 769: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 773: LD_EXP 4
 777: PPUSH
 778: LD_STRING D1a-Lisa-2
 780: PPUSH
 781: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 785: LD_EXP 1
 789: PUSH
 790: LD_EXP 3
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PPUSH
 799: LD_EXP 4
 803: PPUSH
 804: CALL_OW 119
// end ; if not Cyrus and Bobby then
 808: LD_EXP 3
 812: NOT
 813: PUSH
 814: LD_EXP 2
 818: AND
 819: IFFALSE 1098
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 821: LD_EXP 2
 825: PPUSH
 826: LD_INT 44
 828: PPUSH
 829: LD_INT 70
 831: PPUSH
 832: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 836: LD_EXP 1
 840: PPUSH
 841: LD_INT 46
 843: PPUSH
 844: LD_INT 73
 846: PPUSH
 847: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 851: LD_EXP 2
 855: PPUSH
 856: LD_STRING D1a-Bobby-1
 858: PPUSH
 859: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 863: LD_EXP 1
 867: PPUSH
 868: LD_STRING D1a-JMM-1
 870: PPUSH
 871: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 875: LD_EXP 2
 879: PPUSH
 880: LD_INT 37
 882: PPUSH
 883: LD_INT 66
 885: PPUSH
 886: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 890: LD_EXP 1
 894: PPUSH
 895: LD_INT 38
 897: PPUSH
 898: LD_INT 64
 900: PPUSH
 901: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 905: LD_EXP 2
 909: PPUSH
 910: LD_STRING D1a-Bobby-2
 912: PPUSH
 913: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 917: LD_EXP 2
 921: PPUSH
 922: LD_INT 35
 924: PPUSH
 925: LD_INT 62
 927: PPUSH
 928: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 932: LD_EXP 1
 936: PPUSH
 937: LD_INT 35
 939: PPUSH
 940: LD_INT 60
 942: PPUSH
 943: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 947: LD_EXP 1
 951: PPUSH
 952: LD_STRING D1a-JMM-2
 954: PPUSH
 955: CALL_OW 88
// ComWalk ( Lisa ) ;
 959: LD_EXP 4
 963: PPUSH
 964: CALL_OW 138
// wait ( 0 0$1 ) ;
 968: LD_INT 35
 970: PPUSH
 971: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 975: LD_EXP 4
 979: PPUSH
 980: LD_EXP 1
 984: PPUSH
 985: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 989: LD_EXP 1
 993: PUSH
 994: LD_EXP 3
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: PPUSH
1003: LD_EXP 4
1007: PPUSH
1008: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1012: LD_VAR 0 1
1016: PUSH
1017: LD_INT 1
1019: ARRAY
1020: PPUSH
1021: LD_INT 33
1023: PPUSH
1024: LD_INT 55
1026: PPUSH
1027: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1031: LD_VAR 0 1
1035: PUSH
1036: LD_INT 2
1038: ARRAY
1039: PPUSH
1040: LD_INT 30
1042: PPUSH
1043: LD_INT 54
1045: PPUSH
1046: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1050: LD_VAR 0 1
1054: PUSH
1055: LD_INT 1
1057: ARRAY
1058: PPUSH
1059: LD_EXP 1
1063: PPUSH
1064: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1068: LD_VAR 0 1
1072: PUSH
1073: LD_INT 2
1075: ARRAY
1076: PPUSH
1077: LD_EXP 1
1081: PPUSH
1082: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1086: LD_EXP 4
1090: PPUSH
1091: LD_STRING D1a-Lisa-2
1093: PPUSH
1094: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1098: LD_EXP 3
1102: NOT
1103: PUSH
1104: LD_EXP 2
1108: NOT
1109: AND
1110: IFFALSE 1324
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1112: LD_EXP 1
1116: PPUSH
1117: LD_INT 37
1119: PPUSH
1120: LD_INT 66
1122: PPUSH
1123: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1127: LD_EXP 1
1131: PPUSH
1132: LD_STRING D1b-JMM-1
1134: PPUSH
1135: CALL_OW 88
// ComCrawl ( JMM ) ;
1139: LD_EXP 1
1143: PPUSH
1144: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1148: LD_EXP 1
1152: PPUSH
1153: LD_INT 35
1155: PPUSH
1156: LD_INT 60
1158: PPUSH
1159: CALL_OW 171
// wait ( 0 0$8 ) ;
1163: LD_INT 280
1165: PPUSH
1166: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1170: LD_EXP 1
1174: PPUSH
1175: LD_STRING D1b-JMM-1a
1177: PPUSH
1178: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1182: LD_EXP 1
1186: PUSH
1187: LD_EXP 4
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PPUSH
1196: CALL_OW 138
// wait ( 0 0$1 ) ;
1200: LD_INT 35
1202: PPUSH
1203: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1207: LD_EXP 4
1211: PPUSH
1212: LD_EXP 1
1216: PPUSH
1217: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1221: LD_EXP 1
1225: PUSH
1226: EMPTY
1227: LIST
1228: PPUSH
1229: LD_EXP 4
1233: PPUSH
1234: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1238: LD_VAR 0 1
1242: PUSH
1243: LD_INT 1
1245: ARRAY
1246: PPUSH
1247: LD_INT 33
1249: PPUSH
1250: LD_INT 55
1252: PPUSH
1253: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1257: LD_VAR 0 1
1261: PUSH
1262: LD_INT 2
1264: ARRAY
1265: PPUSH
1266: LD_INT 30
1268: PPUSH
1269: LD_INT 54
1271: PPUSH
1272: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1276: LD_VAR 0 1
1280: PUSH
1281: LD_INT 1
1283: ARRAY
1284: PPUSH
1285: LD_EXP 1
1289: PPUSH
1290: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1294: LD_VAR 0 1
1298: PUSH
1299: LD_INT 2
1301: ARRAY
1302: PPUSH
1303: LD_EXP 1
1307: PPUSH
1308: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1312: LD_EXP 4
1316: PPUSH
1317: LD_STRING D1b-Lisa-1
1319: PPUSH
1320: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1324: LD_EXP 1
1328: PPUSH
1329: LD_STRING D1-JMM-1
1331: PPUSH
1332: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1336: LD_EXP 4
1340: PPUSH
1341: LD_STRING D1-Lisa-1
1343: PPUSH
1344: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1348: LD_EXP 1
1352: PPUSH
1353: LD_STRING D1-JMM-2
1355: PPUSH
1356: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1360: LD_EXP 9
1364: PPUSH
1365: LD_STRING D1-Pow-2
1367: PPUSH
1368: CALL_OW 94
// if Cyrus then
1372: LD_EXP 3
1376: IFFALSE 1402
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1378: LD_EXP 3
1382: PPUSH
1383: LD_STRING D1-Cyrus-2
1385: PPUSH
1386: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1390: LD_EXP 1
1394: PPUSH
1395: LD_STRING D1-JMM-3
1397: PPUSH
1398: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1402: LD_EXP 9
1406: PPUSH
1407: LD_STRING D1-Pow-3
1409: PPUSH
1410: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1414: LD_EXP 1
1418: PPUSH
1419: LD_STRING D1-JMM-4
1421: PPUSH
1422: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1426: LD_EXP 9
1430: PPUSH
1431: LD_STRING D1-Pow-4
1433: PPUSH
1434: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1438: LD_EXP 9
1442: PPUSH
1443: LD_STRING D1-Pow-4a
1445: PPUSH
1446: CALL_OW 94
// if Cyrus then
1450: LD_EXP 3
1454: IFFALSE 1468
// Say ( Cyrus , D1-Cyrus-4 ) ;
1456: LD_EXP 3
1460: PPUSH
1461: LD_STRING D1-Cyrus-4
1463: PPUSH
1464: CALL_OW 88
// if Bobby then
1468: LD_EXP 2
1472: IFFALSE 1510
// begin Say ( Bobby , D1-Bobby-4 ) ;
1474: LD_EXP 2
1478: PPUSH
1479: LD_STRING D1-Bobby-4
1481: PPUSH
1482: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1486: LD_EXP 4
1490: PPUSH
1491: LD_STRING D1-Lisa-4
1493: PPUSH
1494: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1498: LD_EXP 1
1502: PPUSH
1503: LD_STRING D1-JMM-5
1505: PPUSH
1506: CALL_OW 88
// end ; InGameOff ;
1510: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1514: LD_INT 22
1516: PUSH
1517: LD_INT 4
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PPUSH
1524: CALL_OW 69
1528: PUSH
1529: LD_EXP 6
1533: PUSH
1534: LD_EXP 7
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: DIFF
1543: PPUSH
1544: LD_INT 1
1546: PPUSH
1547: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1551: LD_STRING M1
1553: PPUSH
1554: CALL_OW 337
// SaveForQuickRestart ;
1558: CALL_OW 22
// end ;
1562: PPOPN 1
1564: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1565: LD_INT 7
1567: PPUSH
1568: LD_INT 22
1570: PUSH
1571: LD_INT 1
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 70
1582: PUSH
1583: LD_INT 0
1585: GREATER
1586: IFFALSE 2003
1588: GO 1590
1590: DISABLE
// begin InGameOn ;
1591: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1595: LD_INT 22
1597: PUSH
1598: LD_INT 1
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: PUSH
1605: LD_INT 21
1607: PUSH
1608: LD_INT 1
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PPUSH
1619: CALL_OW 69
1623: PPUSH
1624: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1628: LD_INT 24
1630: PPUSH
1631: LD_INT 32
1633: PPUSH
1634: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1638: LD_EXP 5
1642: PPUSH
1643: LD_INT 4
1645: PPUSH
1646: LD_INT 1
1648: PPUSH
1649: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1653: LD_EXP 5
1657: PPUSH
1658: LD_INT 4
1660: PPUSH
1661: CALL_OW 336
// wait ( 0 0$1 ) ;
1665: LD_INT 35
1667: PPUSH
1668: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1672: LD_EXP 5
1676: PPUSH
1677: LD_INT 27
1679: PPUSH
1680: LD_INT 38
1682: PPUSH
1683: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1687: LD_EXP 5
1691: PPUSH
1692: LD_EXP 1
1696: PPUSH
1697: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1701: LD_INT 22
1703: PUSH
1704: LD_INT 1
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: LD_INT 21
1713: PUSH
1714: LD_INT 1
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PPUSH
1725: CALL_OW 69
1729: PUSH
1730: LD_EXP 5
1734: PUSH
1735: EMPTY
1736: LIST
1737: DIFF
1738: PPUSH
1739: LD_EXP 5
1743: PPUSH
1744: CALL_OW 119
// wait ( 0 0$1 ) ;
1748: LD_INT 35
1750: PPUSH
1751: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1755: LD_EXP 5
1759: PPUSH
1760: LD_STRING D2a-Khat-1
1762: PPUSH
1763: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1767: LD_EXP 1
1771: PPUSH
1772: LD_STRING D2a-JMM-1
1774: PPUSH
1775: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1779: LD_EXP 5
1783: PPUSH
1784: LD_STRING D2a-Khat-2
1786: PPUSH
1787: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1791: LD_EXP 1
1795: PPUSH
1796: LD_STRING D2a-JMM-2
1798: PPUSH
1799: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1803: LD_EXP 5
1807: PPUSH
1808: LD_STRING D2a-Khat-3
1810: PPUSH
1811: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1815: LD_EXP 1
1819: PPUSH
1820: LD_STRING D2a-JMM-3
1822: PPUSH
1823: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1827: LD_EXP 5
1831: PPUSH
1832: LD_STRING D2a-Khat-4
1834: PPUSH
1835: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1839: LD_EXP 1
1843: PPUSH
1844: LD_STRING D2a-JMM-4
1846: PPUSH
1847: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1851: LD_EXP 5
1855: PPUSH
1856: LD_STRING D2a-Khat-5
1858: PPUSH
1859: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1863: LD_EXP 1
1867: PPUSH
1868: LD_STRING D2a-JMM-5
1870: PPUSH
1871: CALL_OW 88
// InGameOff ;
1875: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1879: LD_INT 22
1881: PUSH
1882: LD_INT 1
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: LD_INT 21
1891: PUSH
1892: LD_INT 1
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 3
1901: PUSH
1902: LD_INT 24
1904: PUSH
1905: LD_INT 800
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: LIST
1920: PPUSH
1921: CALL_OW 69
1925: PUSH
1926: LD_INT 0
1928: GREATER
1929: IFFALSE 2003
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1931: LD_EXP 5
1935: PPUSH
1936: LD_INT 22
1938: PUSH
1939: LD_INT 1
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 21
1948: PUSH
1949: LD_INT 1
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: LD_INT 3
1958: PUSH
1959: LD_INT 24
1961: PUSH
1962: LD_INT 1000
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: LIST
1977: PPUSH
1978: CALL_OW 69
1982: PUSH
1983: LD_INT 1
1985: ARRAY
1986: PPUSH
1987: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1991: LD_EXP 5
1995: PPUSH
1996: LD_STRING D2b-Khat-1
1998: PPUSH
1999: CALL_OW 88
// end ; end ;
2003: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp ;
2004: LD_INT 15
2006: PPUSH
2007: LD_INT 22
2009: PUSH
2010: LD_INT 1
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: PPUSH
2017: CALL_OW 70
2021: PUSH
2022: LD_INT 0
2024: GREATER
2025: IFFALSE 3182
2027: GO 2029
2029: DISABLE
2030: LD_INT 0
2032: PPUSH
2033: PPUSH
2034: PPUSH
2035: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2036: LD_ADDR_VAR 0 2
2040: PUSH
2041: LD_INT 999
2043: PUSH
2044: LD_INT 999
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2054: LD_ADDR_VAR 0 4
2058: PUSH
2059: LD_INT 22
2061: PUSH
2062: LD_INT 1
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 21
2071: PUSH
2072: LD_INT 1
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: EMPTY
2080: LIST
2081: LIST
2082: PPUSH
2083: CALL_OW 69
2087: PUSH
2088: LD_EXP 1
2092: PUSH
2093: LD_EXP 2
2097: PUSH
2098: LD_EXP 3
2102: PUSH
2103: LD_EXP 4
2107: PUSH
2108: LD_EXP 5
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: DIFF
2120: ST_TO_ADDR
// PrepareDeadSoldiers ;
2121: CALL 11403 0 0
// spotCorpses = 1 ;
2125: LD_ADDR_EXP 32
2129: PUSH
2130: LD_INT 1
2132: ST_TO_ADDR
// InGameOn ;
2133: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2137: LD_INT 23
2139: PPUSH
2140: LD_INT 12
2142: PPUSH
2143: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2147: LD_ADDR_VAR 0 3
2151: PUSH
2152: LD_VAR 0 2
2156: PUSH
2157: LD_INT 1
2159: ARRAY
2160: PUSH
2161: LD_INT 2
2163: ARRAY
2164: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2165: LD_ADDR_VAR 0 1
2169: PUSH
2170: LD_INT 22
2172: PUSH
2173: LD_INT 1
2175: PUSH
2176: EMPTY
2177: LIST
2178: LIST
2179: PUSH
2180: LD_INT 21
2182: PUSH
2183: LD_INT 1
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PPUSH
2194: CALL_OW 69
2198: PUSH
2199: LD_EXP 1
2203: PUSH
2204: LD_EXP 5
2208: PUSH
2209: EMPTY
2210: LIST
2211: LIST
2212: DIFF
2213: PUSH
2214: FOR_IN
2215: IFFALSE 2266
// if IsOK ( i ) then
2217: LD_VAR 0 1
2221: PPUSH
2222: CALL_OW 302
2226: IFFALSE 2264
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2228: LD_ADDR_VAR 0 2
2232: PUSH
2233: LD_VAR 0 2
2237: PUSH
2238: LD_VAR 0 1
2242: PUSH
2243: LD_VAR 0 1
2247: PPUSH
2248: LD_INT 16
2250: PPUSH
2251: CALL_OW 299
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: EMPTY
2261: LIST
2262: ADD
2263: ST_TO_ADDR
2264: GO 2214
2266: POP
2267: POP
// for i = 2 to distanceTab do
2268: LD_ADDR_VAR 0 1
2272: PUSH
2273: DOUBLE
2274: LD_INT 2
2276: DEC
2277: ST_TO_ADDR
2278: LD_VAR 0 2
2282: PUSH
2283: FOR_TO
2284: IFFALSE 2330
// if distanceTab [ i ] [ 2 ] < min then
2286: LD_VAR 0 2
2290: PUSH
2291: LD_VAR 0 1
2295: ARRAY
2296: PUSH
2297: LD_INT 2
2299: ARRAY
2300: PUSH
2301: LD_VAR 0 3
2305: LESS
2306: IFFALSE 2328
// min = distanceTab [ i ] [ 2 ] ;
2308: LD_ADDR_VAR 0 3
2312: PUSH
2313: LD_VAR 0 2
2317: PUSH
2318: LD_VAR 0 1
2322: ARRAY
2323: PUSH
2324: LD_INT 2
2326: ARRAY
2327: ST_TO_ADDR
2328: GO 2283
2330: POP
2331: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2332: LD_ADDR_VAR 0 1
2336: PUSH
2337: LD_INT 22
2339: PUSH
2340: LD_INT 1
2342: PUSH
2343: EMPTY
2344: LIST
2345: LIST
2346: PUSH
2347: LD_INT 21
2349: PUSH
2350: LD_INT 1
2352: PUSH
2353: EMPTY
2354: LIST
2355: LIST
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: PPUSH
2361: CALL_OW 69
2365: PUSH
2366: LD_EXP 1
2370: PUSH
2371: EMPTY
2372: LIST
2373: DIFF
2374: PUSH
2375: FOR_IN
2376: IFFALSE 2446
// begin ComMoveToArea ( i , DeadCutscene ) ;
2378: LD_VAR 0 1
2382: PPUSH
2383: LD_INT 28
2385: PPUSH
2386: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2390: LD_EXP 1
2394: PPUSH
2395: LD_INT 30
2397: PPUSH
2398: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2402: LD_VAR 0 1
2406: PPUSH
2407: LD_INT 23
2409: PPUSH
2410: LD_INT 11
2412: PPUSH
2413: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2417: LD_EXP 1
2421: PPUSH
2422: LD_INT 23
2424: PPUSH
2425: LD_INT 11
2427: PPUSH
2428: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2432: LD_EXP 34
2436: PPUSH
2437: LD_INT 250
2439: PPUSH
2440: CALL_OW 234
// end ;
2444: GO 2375
2446: POP
2447: POP
// for i = 2 to distanceTab do
2448: LD_ADDR_VAR 0 1
2452: PUSH
2453: DOUBLE
2454: LD_INT 2
2456: DEC
2457: ST_TO_ADDR
2458: LD_VAR 0 2
2462: PUSH
2463: FOR_TO
2464: IFFALSE 2850
// begin if distanceTab [ i ] [ 2 ] = min then
2466: LD_VAR 0 2
2470: PUSH
2471: LD_VAR 0 1
2475: ARRAY
2476: PUSH
2477: LD_INT 2
2479: ARRAY
2480: PUSH
2481: LD_VAR 0 3
2485: EQUAL
2486: IFFALSE 2848
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2488: LD_VAR 0 2
2492: PUSH
2493: LD_VAR 0 1
2497: ARRAY
2498: PUSH
2499: LD_INT 1
2501: ARRAY
2502: PUSH
2503: LD_EXP 2
2507: EQUAL
2508: IFFALSE 2522
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2510: LD_EXP 2
2514: PPUSH
2515: LD_STRING DCorpses-Bobby-1
2517: PPUSH
2518: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2522: LD_VAR 0 2
2526: PUSH
2527: LD_VAR 0 1
2531: ARRAY
2532: PUSH
2533: LD_INT 1
2535: ARRAY
2536: PUSH
2537: LD_EXP 3
2541: EQUAL
2542: IFFALSE 2556
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2544: LD_EXP 3
2548: PPUSH
2549: LD_STRING DCorpses-Cyrus-1
2551: PPUSH
2552: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2556: LD_VAR 0 2
2560: PUSH
2561: LD_VAR 0 1
2565: ARRAY
2566: PUSH
2567: LD_INT 1
2569: ARRAY
2570: PUSH
2571: LD_EXP 4
2575: EQUAL
2576: IFFALSE 2590
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2578: LD_EXP 4
2582: PPUSH
2583: LD_STRING DCorpses-Lisa-1
2585: PPUSH
2586: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2590: LD_VAR 0 2
2594: PUSH
2595: LD_VAR 0 1
2599: ARRAY
2600: PUSH
2601: LD_INT 1
2603: ARRAY
2604: PUSH
2605: LD_VAR 0 4
2609: PUSH
2610: LD_INT 1
2612: ARRAY
2613: EQUAL
2614: PUSH
2615: LD_VAR 0 4
2619: PUSH
2620: LD_INT 1
2622: ARRAY
2623: PPUSH
2624: CALL_OW 258
2628: PUSH
2629: LD_INT 1
2631: EQUAL
2632: AND
2633: IFFALSE 2651
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2635: LD_VAR 0 4
2639: PUSH
2640: LD_INT 1
2642: ARRAY
2643: PPUSH
2644: LD_STRING DCorpses-Sol1-1
2646: PPUSH
2647: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2651: LD_VAR 0 2
2655: PUSH
2656: LD_VAR 0 1
2660: ARRAY
2661: PUSH
2662: LD_INT 1
2664: ARRAY
2665: PUSH
2666: LD_VAR 0 4
2670: PUSH
2671: LD_INT 1
2673: ARRAY
2674: EQUAL
2675: PUSH
2676: LD_VAR 0 4
2680: PUSH
2681: LD_INT 1
2683: ARRAY
2684: PPUSH
2685: CALL_OW 258
2689: PUSH
2690: LD_INT 2
2692: EQUAL
2693: AND
2694: IFFALSE 2712
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2696: LD_VAR 0 4
2700: PUSH
2701: LD_INT 1
2703: ARRAY
2704: PPUSH
2705: LD_STRING DCorpses-FSol1-1
2707: PPUSH
2708: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2712: LD_VAR 0 2
2716: PUSH
2717: LD_VAR 0 1
2721: ARRAY
2722: PUSH
2723: LD_INT 1
2725: ARRAY
2726: PUSH
2727: LD_VAR 0 4
2731: PUSH
2732: LD_INT 2
2734: ARRAY
2735: EQUAL
2736: PUSH
2737: LD_VAR 0 4
2741: PUSH
2742: LD_INT 2
2744: ARRAY
2745: PPUSH
2746: CALL_OW 258
2750: PUSH
2751: LD_INT 1
2753: EQUAL
2754: AND
2755: IFFALSE 2773
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2757: LD_VAR 0 4
2761: PUSH
2762: LD_INT 2
2764: ARRAY
2765: PPUSH
2766: LD_STRING DCorpses-Sol1-1
2768: PPUSH
2769: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2773: LD_VAR 0 2
2777: PUSH
2778: LD_VAR 0 1
2782: ARRAY
2783: PUSH
2784: LD_INT 1
2786: ARRAY
2787: PUSH
2788: LD_VAR 0 4
2792: PUSH
2793: LD_INT 2
2795: ARRAY
2796: EQUAL
2797: PUSH
2798: LD_VAR 0 4
2802: PUSH
2803: LD_INT 2
2805: ARRAY
2806: PPUSH
2807: CALL_OW 258
2811: PUSH
2812: LD_INT 2
2814: EQUAL
2815: AND
2816: IFFALSE 2834
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2818: LD_VAR 0 4
2822: PUSH
2823: LD_INT 2
2825: ARRAY
2826: PPUSH
2827: LD_STRING DCorpses-FSol1-1
2829: PPUSH
2830: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2834: LD_EXP 34
2838: PPUSH
2839: LD_INT 150
2841: PPUSH
2842: CALL_OW 234
// break ;
2846: GO 2850
// end ; end ;
2848: GO 2463
2850: POP
2851: POP
// repeat wait ( 0 0$1 ) ;
2852: LD_INT 35
2854: PPUSH
2855: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2859: LD_ADDR_VAR 0 1
2863: PUSH
2864: LD_INT 22
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: LD_INT 21
2876: PUSH
2877: LD_INT 1
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PPUSH
2888: CALL_OW 69
2892: PUSH
2893: LD_EXP 1
2897: PUSH
2898: EMPTY
2899: LIST
2900: DIFF
2901: PUSH
2902: FOR_IN
2903: IFFALSE 2973
// begin ComMoveToArea ( i , DeadCutscene ) ;
2905: LD_VAR 0 1
2909: PPUSH
2910: LD_INT 28
2912: PPUSH
2913: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2917: LD_EXP 1
2921: PPUSH
2922: LD_INT 30
2924: PPUSH
2925: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2929: LD_VAR 0 1
2933: PPUSH
2934: LD_INT 23
2936: PPUSH
2937: LD_INT 11
2939: PPUSH
2940: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2944: LD_EXP 1
2948: PPUSH
2949: LD_INT 23
2951: PPUSH
2952: LD_INT 11
2954: PPUSH
2955: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2959: LD_EXP 34
2963: PPUSH
2964: LD_INT 250
2966: PPUSH
2967: CALL_OW 234
// end ;
2971: GO 2902
2973: POP
2974: POP
// until IsInArea ( JMM , JMMAreaCutscene ) ;
2975: LD_EXP 1
2979: PPUSH
2980: LD_INT 30
2982: PPUSH
2983: CALL_OW 308
2987: IFFALSE 2852
// wait ( 0 0$3 ) ;
2989: LD_INT 105
2991: PPUSH
2992: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
2996: LD_EXP 1
3000: PPUSH
3001: LD_STRING DCorpses-JMM-1
3003: PPUSH
3004: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3008: LD_EXP 34
3012: PPUSH
3013: LD_INT 100
3015: PPUSH
3016: CALL_OW 234
// if IsOK ( Khatam ) then
3020: LD_EXP 5
3024: PPUSH
3025: CALL_OW 302
3029: IFFALSE 3166
// begin repeat wait ( 0 0$1 ) ;
3031: LD_INT 35
3033: PPUSH
3034: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3038: LD_EXP 5
3042: PPUSH
3043: LD_EXP 34
3047: PPUSH
3048: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3052: LD_EXP 5
3056: PPUSH
3057: LD_EXP 34
3061: PPUSH
3062: CALL_OW 296
3066: PUSH
3067: LD_INT 2
3069: LESS
3070: IFFALSE 3031
// spotCorpses = 0 ;
3072: LD_ADDR_EXP 32
3076: PUSH
3077: LD_INT 0
3079: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3080: LD_EXP 34
3084: PPUSH
3085: LD_INT 10
3087: PPUSH
3088: CALL_OW 234
// wait ( 0 0$3 ) ;
3092: LD_INT 105
3094: PPUSH
3095: CALL_OW 67
// KillUnit ( DyingSold ) ;
3099: LD_EXP 34
3103: PPUSH
3104: CALL_OW 66
// wait ( 0 0$1 ) ;
3108: LD_INT 35
3110: PPUSH
3111: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3115: LD_EXP 1
3119: PUSH
3120: LD_EXP 5
3124: PUSH
3125: EMPTY
3126: LIST
3127: LIST
3128: PPUSH
3129: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3133: LD_EXP 5
3137: PPUSH
3138: LD_EXP 1
3142: PPUSH
3143: CALL_OW 119
// wait ( 0 0$1 ) ;
3147: LD_INT 35
3149: PPUSH
3150: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3154: LD_EXP 5
3158: PPUSH
3159: LD_STRING DCorpses-Khat-1
3161: PPUSH
3162: CALL_OW 88
// end ; InGameOff ;
3166: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3170: LD_EXP 1
3174: PPUSH
3175: LD_STRING DCorpses-JMM-2
3177: PPUSH
3178: CALL_OW 88
// end ;
3182: PPOPN 4
3184: END
// every 0 0$1 trigger spotCorpses = 1 do
3185: LD_EXP 32
3189: PUSH
3190: LD_INT 1
3192: EQUAL
3193: IFFALSE 3211
3195: GO 3197
3197: DISABLE
// begin enable ;
3198: ENABLE
// SetLives ( DyingSold , 10 ) ;
3199: LD_EXP 34
3203: PPUSH
3204: LD_INT 10
3206: PPUSH
3207: CALL_OW 234
// end ;
3211: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 15 ) do var i ;
3212: LD_INT 8
3214: PPUSH
3215: LD_INT 22
3217: PUSH
3218: LD_INT 1
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PPUSH
3225: CALL_OW 70
3229: PUSH
3230: LD_INT 0
3232: GREATER
3233: PUSH
3234: LD_INT 22
3236: PUSH
3237: LD_INT 1
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PPUSH
3244: CALL_OW 69
3248: PPUSH
3249: LD_EXP 7
3253: PPUSH
3254: CALL_OW 74
3258: PPUSH
3259: LD_EXP 7
3263: PPUSH
3264: CALL_OW 296
3268: PUSH
3269: LD_INT 15
3271: LESS
3272: OR
3273: IFFALSE 3441
3275: GO 3277
3277: DISABLE
3278: LD_INT 0
3280: PPUSH
// begin InGameOn ;
3281: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3285: LD_EXP 7
3289: PPUSH
3290: LD_INT 250
3292: PPUSH
3293: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3297: LD_INT 3
3299: PPUSH
3300: LD_INT 4
3302: PPUSH
3303: LD_INT 2
3305: PPUSH
3306: LD_INT 1
3308: PPUSH
3309: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3313: LD_EXP 6
3317: PUSH
3318: LD_EXP 7
3322: PUSH
3323: EMPTY
3324: LIST
3325: LIST
3326: PPUSH
3327: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3331: LD_ADDR_VAR 0 1
3335: PUSH
3336: LD_INT 9
3338: PPUSH
3339: LD_INT 22
3341: PUSH
3342: LD_INT 3
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PPUSH
3349: CALL_OW 70
3353: PUSH
3354: FOR_IN
3355: IFFALSE 3368
// ComFree ( i ) ;
3357: LD_VAR 0 1
3361: PPUSH
3362: CALL_OW 139
3366: GO 3354
3368: POP
3369: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3370: LD_ADDR_VAR 0 1
3374: PUSH
3375: LD_INT 22
3377: PUSH
3378: LD_INT 4
3380: PUSH
3381: EMPTY
3382: LIST
3383: LIST
3384: PPUSH
3385: CALL_OW 69
3389: PUSH
3390: FOR_IN
3391: IFFALSE 3404
// ComFree ( i ) ;
3393: LD_VAR 0 1
3397: PPUSH
3398: CALL_OW 139
3402: GO 3390
3404: POP
3405: POP
// wait ( 0 0$1 ) ;
3406: LD_INT 35
3408: PPUSH
3409: CALL_OW 67
// InGameOff ;
3413: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3417: LD_EXP 6
3421: PPUSH
3422: LD_STRING DF-Sol1-1
3424: PPUSH
3425: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3429: LD_EXP 1
3433: PPUSH
3434: LD_STRING DF-JMM-1
3436: PPUSH
3437: CALL_OW 88
// end ;
3441: PPOPN 1
3443: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3444: LD_INT 19
3446: PPUSH
3447: LD_INT 22
3449: PUSH
3450: LD_INT 3
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: PPUSH
3457: CALL_OW 70
3461: PUSH
3462: LD_INT 0
3464: EQUAL
3465: IFFALSE 3578
3467: GO 3469
3469: DISABLE
// begin if not IsDead ( Brian ) then
3470: LD_EXP 6
3474: PPUSH
3475: CALL_OW 301
3479: NOT
3480: IFFALSE 3494
// SetSide ( Brian , 1 ) ;
3482: LD_EXP 6
3486: PPUSH
3487: LD_INT 1
3489: PPUSH
3490: CALL_OW 235
// if not IsDead ( Jerry ) then
3494: LD_EXP 7
3498: PPUSH
3499: CALL_OW 301
3503: NOT
3504: IFFALSE 3518
// SetSide ( Jerry , 1 ) ;
3506: LD_EXP 7
3510: PPUSH
3511: LD_INT 1
3513: PPUSH
3514: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 then
3518: LD_INT 22
3520: PUSH
3521: LD_INT 1
3523: PUSH
3524: EMPTY
3525: LIST
3526: LIST
3527: PUSH
3528: LD_INT 25
3530: PUSH
3531: LD_INT 4
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PPUSH
3542: CALL_OW 69
3546: PUSH
3547: LD_INT 0
3549: GREATER
3550: IFFALSE 3566
// begin Say ( JMM , DFa-JMM-1 ) ;
3552: LD_EXP 1
3556: PPUSH
3557: LD_STRING DFa-JMM-1
3559: PPUSH
3560: CALL_OW 88
// end else
3564: GO 3578
// begin Say ( JMM , DFa-JMM-1a ) ;
3566: LD_EXP 1
3570: PPUSH
3571: LD_STRING DFa-JMM-1a
3573: PPUSH
3574: CALL_OW 88
// end ; end ;
3578: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3579: LD_INT 19
3581: PPUSH
3582: LD_INT 22
3584: PUSH
3585: LD_INT 3
3587: PUSH
3588: EMPTY
3589: LIST
3590: LIST
3591: PPUSH
3592: CALL_OW 70
3596: PUSH
3597: LD_INT 0
3599: EQUAL
3600: PUSH
3601: LD_EXP 6
3605: PPUSH
3606: CALL_OW 302
3610: NOT
3611: AND
3612: IFFALSE 3689
3614: GO 3616
3616: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3617: LD_INT 35
3619: PPUSH
3620: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3624: LD_EXP 6
3628: PPUSH
3629: CALL_OW 256
3633: PUSH
3634: LD_INT 250
3636: GREATER
3637: IFFALSE 3617
// Say ( Brian , DFb-Sol1-1 ) ;
3639: LD_EXP 6
3643: PPUSH
3644: LD_STRING DFb-Sol1-1
3646: PPUSH
3647: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3651: LD_EXP 6
3655: PPUSH
3656: LD_INT 78
3658: PPUSH
3659: LD_INT 74
3661: PPUSH
3662: CALL_OW 111
// if IsDead ( Jerry ) then
3666: LD_EXP 7
3670: PPUSH
3671: CALL_OW 301
3675: IFFALSE 3689
// Say ( Brian , DFb-Sol1-1a ) end ;
3677: LD_EXP 6
3681: PPUSH
3682: LD_STRING DFb-Sol1-1a
3684: PPUSH
3685: CALL_OW 88
3689: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3690: LD_INT 22
3692: PUSH
3693: LD_INT 1
3695: PUSH
3696: EMPTY
3697: LIST
3698: LIST
3699: PUSH
3700: LD_INT 21
3702: PUSH
3703: LD_INT 2
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: PPUSH
3714: CALL_OW 69
3718: PUSH
3719: LD_INT 0
3721: EQUAL
3722: IFFALSE 3810
3724: GO 3726
3726: DISABLE
3727: LD_INT 0
3729: PPUSH
// begin enable ;
3730: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3731: LD_ADDR_VAR 0 1
3735: PUSH
3736: LD_INT 22
3738: PUSH
3739: LD_INT 3
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: PUSH
3746: LD_INT 21
3748: PUSH
3749: LD_INT 3
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: PUSH
3756: LD_INT 30
3758: PUSH
3759: LD_INT 31
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: PUSH
3766: EMPTY
3767: LIST
3768: LIST
3769: LIST
3770: PPUSH
3771: CALL_OW 69
3775: PUSH
3776: FOR_IN
3777: IFFALSE 3808
// begin if See ( 1 , i ) then
3779: LD_INT 1
3781: PPUSH
3782: LD_VAR 0 1
3786: PPUSH
3787: CALL_OW 292
3791: IFFALSE 3806
// begin disable ;
3793: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3794: LD_EXP 1
3798: PPUSH
3799: LD_STRING DX1-JMM-1
3801: PPUSH
3802: CALL_OW 88
// end ; end ;
3806: GO 3776
3808: POP
3809: POP
// end ;
3810: PPOPN 1
3812: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j ;
3813: LD_INT 1
3815: PPUSH
3816: LD_INT 11
3818: PPUSH
3819: CALL_OW 294
3823: IFFALSE 4186
3825: GO 3827
3827: DISABLE
3828: LD_INT 0
3830: PPUSH
3831: PPUSH
// begin DialogueOn ;
3832: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3836: LD_INT 11
3838: PPUSH
3839: LD_INT 22
3841: PUSH
3842: LD_INT 3
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: PUSH
3849: LD_INT 21
3851: PUSH
3852: LD_INT 1
3854: PUSH
3855: EMPTY
3856: LIST
3857: LIST
3858: PUSH
3859: EMPTY
3860: LIST
3861: LIST
3862: PPUSH
3863: CALL_OW 70
3867: PUSH
3868: LD_INT 1
3870: ARRAY
3871: PPUSH
3872: LD_STRING DX3-Rus1-1
3874: PPUSH
3875: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3879: LD_EXP 1
3883: PPUSH
3884: LD_STRING DX3-JMM-1
3886: PPUSH
3887: CALL_OW 88
// DialogueOff ;
3891: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3895: LD_ADDR_VAR 0 1
3899: PUSH
3900: LD_INT 11
3902: PPUSH
3903: LD_INT 22
3905: PUSH
3906: LD_INT 3
3908: PUSH
3909: EMPTY
3910: LIST
3911: LIST
3912: PUSH
3913: LD_INT 21
3915: PUSH
3916: LD_INT 1
3918: PUSH
3919: EMPTY
3920: LIST
3921: LIST
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: PPUSH
3927: CALL_OW 70
3931: PUSH
3932: FOR_IN
3933: IFFALSE 3953
// southBaseDefenders = southBaseDefenders ^ i ;
3935: LD_ADDR_EXP 25
3939: PUSH
3940: LD_EXP 25
3944: PUSH
3945: LD_VAR 0 1
3949: ADD
3950: ST_TO_ADDR
3951: GO 3932
3953: POP
3954: POP
// wait ( [ 0 0$13 , 0 0$12 , 0 0$9 ] [ Difficulty ] ) ;
3955: LD_INT 455
3957: PUSH
3958: LD_INT 420
3960: PUSH
3961: LD_INT 315
3963: PUSH
3964: EMPTY
3965: LIST
3966: LIST
3967: LIST
3968: PUSH
3969: LD_OWVAR 67
3973: ARRAY
3974: PPUSH
3975: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3979: LD_INT 35
3981: PPUSH
3982: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
3986: LD_ADDR_VAR 0 1
3990: PUSH
3991: LD_INT 22
3993: PUSH
3994: LD_INT 3
3996: PUSH
3997: EMPTY
3998: LIST
3999: LIST
4000: PUSH
4001: LD_INT 21
4003: PUSH
4004: LD_INT 2
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: PUSH
4011: LD_INT 58
4013: PUSH
4014: EMPTY
4015: LIST
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: LIST
4021: PPUSH
4022: CALL_OW 69
4026: PUSH
4027: FOR_IN
4028: IFFALSE 4098
// begin for j in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) do
4030: LD_ADDR_VAR 0 2
4034: PUSH
4035: LD_INT 22
4037: PUSH
4038: LD_INT 3
4040: PUSH
4041: EMPTY
4042: LIST
4043: LIST
4044: PUSH
4045: LD_INT 21
4047: PUSH
4048: LD_INT 1
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 25
4057: PUSH
4058: LD_INT 3
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: LIST
4069: PPUSH
4070: CALL_OW 69
4074: PUSH
4075: FOR_IN
4076: IFFALSE 4094
// begin ComEnterUnit ( j , i ) ;
4078: LD_VAR 0 2
4082: PPUSH
4083: LD_VAR 0 1
4087: PPUSH
4088: CALL_OW 120
// end ;
4092: GO 4075
4094: POP
4095: POP
// end ;
4096: GO 4027
4098: POP
4099: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) = 0 or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) = 0 ;
4100: LD_INT 22
4102: PUSH
4103: LD_INT 3
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: PUSH
4110: LD_INT 21
4112: PUSH
4113: LD_INT 2
4115: PUSH
4116: EMPTY
4117: LIST
4118: LIST
4119: PUSH
4120: LD_INT 58
4122: PUSH
4123: EMPTY
4124: LIST
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: LIST
4130: PPUSH
4131: CALL_OW 69
4135: PUSH
4136: LD_INT 0
4138: EQUAL
4139: PUSH
4140: LD_INT 22
4142: PUSH
4143: LD_INT 3
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: PUSH
4150: LD_INT 21
4152: PUSH
4153: LD_INT 1
4155: PUSH
4156: EMPTY
4157: LIST
4158: LIST
4159: PUSH
4160: LD_INT 25
4162: PUSH
4163: LD_INT 3
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: LIST
4174: PPUSH
4175: CALL_OW 69
4179: PUSH
4180: LD_INT 0
4182: EQUAL
4183: OR
4184: IFFALSE 3979
// end ;
4186: PPOPN 2
4188: END
// every 0 0$1 do var i , tmp ;
4189: GO 4191
4191: DISABLE
4192: LD_INT 0
4194: PPUSH
4195: PPUSH
// begin enable ;
4196: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
4197: LD_ADDR_VAR 0 2
4201: PUSH
4202: LD_INT 22
4204: PUSH
4205: LD_INT 1
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: PUSH
4212: LD_INT 21
4214: PUSH
4215: LD_INT 1
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: PPUSH
4226: CALL_OW 69
4230: ST_TO_ADDR
// for i in tmp do
4231: LD_ADDR_VAR 0 1
4235: PUSH
4236: LD_VAR 0 2
4240: PUSH
4241: FOR_IN
4242: IFFALSE 4364
// begin if GetDistUnits ( i , vehicle1 ) < 4 or GetDistUnits ( i , vehicle2 ) < 4 then
4244: LD_VAR 0 1
4248: PPUSH
4249: LD_INT 5
4251: PPUSH
4252: CALL_OW 296
4256: PUSH
4257: LD_INT 4
4259: LESS
4260: PUSH
4261: LD_VAR 0 1
4265: PPUSH
4266: LD_INT 4
4268: PPUSH
4269: CALL_OW 296
4273: PUSH
4274: LD_INT 4
4276: LESS
4277: OR
4278: IFFALSE 4362
// begin disable ;
4280: DISABLE
// CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4281: LD_INT 5
4283: PUSH
4284: LD_INT 4
4286: PUSH
4287: EMPTY
4288: LIST
4289: LIST
4290: PPUSH
4291: CALL_OW 85
// if IsOK ( Bobby ) then
4295: LD_EXP 2
4299: PPUSH
4300: CALL_OW 302
4304: IFFALSE 4341
// begin DialogueOn ;
4306: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4310: LD_EXP 2
4314: PPUSH
4315: LD_STRING DX2-Bobby-1
4317: PPUSH
4318: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4322: LD_EXP 1
4326: PPUSH
4327: LD_STRING DX2-JMM-1a
4329: PPUSH
4330: CALL_OW 88
// DialogueOff ;
4334: CALL_OW 7
// disable ;
4338: DISABLE
// end else
4339: GO 4362
// begin DialogueOn ;
4341: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4345: LD_EXP 1
4349: PPUSH
4350: LD_STRING DX2-JMM-1
4352: PPUSH
4353: CALL_OW 88
// DialogueOff ;
4357: CALL_OW 7
// disable ;
4361: DISABLE
// end ; end ; end ;
4362: GO 4241
4364: POP
4365: POP
// end ;
4366: PPOPN 2
4368: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) >= 1 do var tmp , temp1 , temp2 , i ;
4369: LD_INT 22
4371: PUSH
4372: LD_INT 1
4374: PUSH
4375: EMPTY
4376: LIST
4377: LIST
4378: PUSH
4379: LD_INT 23
4381: PUSH
4382: LD_INT 3
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: PUSH
4389: LD_INT 21
4391: PUSH
4392: LD_INT 2
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: PUSH
4399: LD_INT 34
4401: PUSH
4402: LD_INT 42
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: PPUSH
4415: CALL_OW 69
4419: PUSH
4420: LD_INT 1
4422: GREATEREQUAL
4423: IFFALSE 4890
4425: GO 4427
4427: DISABLE
4428: LD_INT 0
4430: PPUSH
4431: PPUSH
4432: PPUSH
4433: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4434: LD_ADDR_VAR 0 1
4438: PUSH
4439: LD_INT 22
4441: PUSH
4442: LD_INT 1
4444: PUSH
4445: EMPTY
4446: LIST
4447: LIST
4448: PUSH
4449: LD_INT 23
4451: PUSH
4452: LD_INT 3
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: PUSH
4459: LD_INT 21
4461: PUSH
4462: LD_INT 2
4464: PUSH
4465: EMPTY
4466: LIST
4467: LIST
4468: PUSH
4469: LD_INT 34
4471: PUSH
4472: LD_INT 42
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: PPUSH
4485: CALL_OW 69
4489: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4490: LD_ADDR_VAR 0 2
4494: PUSH
4495: LD_INT 22
4497: PUSH
4498: LD_INT 1
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: LD_INT 21
4507: PUSH
4508: LD_INT 1
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: PUSH
4515: LD_INT 26
4517: PUSH
4518: LD_INT 1
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: LIST
4529: PPUSH
4530: CALL_OW 69
4534: PUSH
4535: LD_EXP 1
4539: PUSH
4540: LD_EXP 3
4544: PUSH
4545: LD_EXP 2
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: LIST
4554: DIFF
4555: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4556: LD_ADDR_VAR 0 3
4560: PUSH
4561: LD_INT 22
4563: PUSH
4564: LD_INT 1
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 21
4573: PUSH
4574: LD_INT 1
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 26
4583: PUSH
4584: LD_INT 2
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: LIST
4595: PPUSH
4596: CALL_OW 69
4600: PUSH
4601: LD_EXP 4
4605: PUSH
4606: EMPTY
4607: LIST
4608: DIFF
4609: ST_TO_ADDR
// if not IsInUnit ( JMM ) then
4610: LD_EXP 1
4614: PPUSH
4615: CALL_OW 310
4619: NOT
4620: IFFALSE 4634
// Say ( JMM , DX2a-JMM-1 ) ;
4622: LD_EXP 1
4626: PPUSH
4627: LD_STRING DX2a-JMM-1
4629: PPUSH
4630: CALL_OW 88
// if IsInUnit ( Bobby ) = tmp [ 1 ] then
4634: LD_EXP 2
4638: PPUSH
4639: CALL_OW 310
4643: PUSH
4644: LD_VAR 0 1
4648: PUSH
4649: LD_INT 1
4651: ARRAY
4652: EQUAL
4653: IFFALSE 4667
// Say ( Bobby , DX2a-Bobby-1 ) ;
4655: LD_EXP 2
4659: PPUSH
4660: LD_STRING DX2a-Bobby-1
4662: PPUSH
4663: CALL_OW 88
// if IsInUnit ( Cyrus ) = tmp [ 1 ] then
4667: LD_EXP 3
4671: PPUSH
4672: CALL_OW 310
4676: PUSH
4677: LD_VAR 0 1
4681: PUSH
4682: LD_INT 1
4684: ARRAY
4685: EQUAL
4686: IFFALSE 4700
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4688: LD_EXP 3
4692: PPUSH
4693: LD_STRING DX2a-Cyrus-1
4695: PPUSH
4696: CALL_OW 88
// if IsInUnit ( Lisa ) = tmp [ 1 ] then
4700: LD_EXP 4
4704: PPUSH
4705: CALL_OW 310
4709: PUSH
4710: LD_VAR 0 1
4714: PUSH
4715: LD_INT 1
4717: ARRAY
4718: EQUAL
4719: IFFALSE 4733
// Say ( Lisa , DX2a-Lisa-1 ) ;
4721: LD_EXP 4
4725: PPUSH
4726: LD_STRING DX2a-Lisa-1
4728: PPUSH
4729: CALL_OW 88
// for i in temp1 do
4733: LD_ADDR_VAR 0 4
4737: PUSH
4738: LD_VAR 0 2
4742: PUSH
4743: FOR_IN
4744: IFFALSE 4781
// if IsInUnit ( i ) = tmp [ 1 ] then
4746: LD_VAR 0 4
4750: PPUSH
4751: CALL_OW 310
4755: PUSH
4756: LD_VAR 0 1
4760: PUSH
4761: LD_INT 1
4763: ARRAY
4764: EQUAL
4765: IFFALSE 4779
// Say ( i , DX2a-Sol1-1 ) ;
4767: LD_VAR 0 4
4771: PPUSH
4772: LD_STRING DX2a-Sol1-1
4774: PPUSH
4775: CALL_OW 88
4779: GO 4743
4781: POP
4782: POP
// for i in temp2 do
4783: LD_ADDR_VAR 0 4
4787: PUSH
4788: LD_VAR 0 3
4792: PUSH
4793: FOR_IN
4794: IFFALSE 4831
// if IsInUnit ( i ) = tmp [ 1 ] then
4796: LD_VAR 0 4
4800: PPUSH
4801: CALL_OW 310
4805: PUSH
4806: LD_VAR 0 1
4810: PUSH
4811: LD_INT 1
4813: ARRAY
4814: EQUAL
4815: IFFALSE 4829
// Say ( i , DX2a-FSol1-1 ) ;
4817: LD_VAR 0 4
4821: PPUSH
4822: LD_STRING DX2a-FSol1-1
4824: PPUSH
4825: CALL_OW 88
4829: GO 4793
4831: POP
4832: POP
// if IsInUnit ( JMM ) = tmp [ 1 ] then
4833: LD_EXP 1
4837: PPUSH
4838: CALL_OW 310
4842: PUSH
4843: LD_VAR 0 1
4847: PUSH
4848: LD_INT 1
4850: ARRAY
4851: EQUAL
4852: IFFALSE 4866
// Say ( JMM , DX2b-JMM-1 ) ;
4854: LD_EXP 1
4858: PPUSH
4859: LD_STRING DX2b-JMM-1
4861: PPUSH
4862: CALL_OW 88
// if not IsInUnit ( JMM ) then
4866: LD_EXP 1
4870: PPUSH
4871: CALL_OW 310
4875: NOT
4876: IFFALSE 4890
// Say ( JMM , DX2a-JMM-2 ) ;
4878: LD_EXP 1
4882: PPUSH
4883: LD_STRING DX2a-JMM-2
4885: PPUSH
4886: CALL_OW 88
// end ;
4890: PPOPN 4
4892: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4893: LD_INT 1
4895: PPUSH
4896: CALL_OW 255
4900: PUSH
4901: LD_INT 1
4903: EQUAL
4904: PUSH
4905: LD_INT 10
4907: PPUSH
4908: CALL_OW 255
4912: PUSH
4913: LD_INT 1
4915: EQUAL
4916: OR
4917: IFFALSE 4977
4919: GO 4921
4921: DISABLE
// begin DialogueOn ;
4922: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4926: LD_EXP 1
4930: PPUSH
4931: LD_STRING D3-JMM-1
4933: PPUSH
4934: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4938: LD_EXP 9
4942: PPUSH
4943: LD_STRING D3-Pow-1
4945: PPUSH
4946: CALL_OW 94
// if IsOK ( Cyrus ) then
4950: LD_EXP 3
4954: PPUSH
4955: CALL_OW 302
4959: IFFALSE 4973
// Say ( Cyrus , D3-Cyrus-1 ) ;
4961: LD_EXP 3
4965: PPUSH
4966: LD_STRING D3-Cyrus-1
4968: PPUSH
4969: CALL_OW 88
// DialogueOff ;
4973: CALL_OW 7
// end ;
4977: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var temp , i ;
4978: LD_INT 1
4980: PPUSH
4981: CALL_OW 255
4985: PUSH
4986: LD_INT 1
4988: EQUAL
4989: PUSH
4990: LD_INT 10
4992: PPUSH
4993: CALL_OW 255
4997: PUSH
4998: LD_INT 1
5000: EQUAL
5001: AND
5002: PUSH
5003: LD_INT 22
5005: PPUSH
5006: LD_INT 22
5008: PUSH
5009: LD_INT 3
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: PUSH
5016: LD_INT 21
5018: PUSH
5019: LD_INT 1
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PPUSH
5030: CALL_OW 70
5034: PUSH
5035: LD_INT 0
5037: EQUAL
5038: AND
5039: IFFALSE 6247
5041: GO 5043
5043: DISABLE
5044: LD_INT 0
5046: PPUSH
5047: PPUSH
// begin temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] ] ) diff [ JMM ] ;
5048: LD_ADDR_VAR 0 1
5052: PUSH
5053: LD_INT 22
5055: PUSH
5056: LD_INT 1
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: PUSH
5063: LD_INT 23
5065: PUSH
5066: LD_INT 1
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PUSH
5073: LD_INT 25
5075: PUSH
5076: LD_INT 2
5078: PUSH
5079: EMPTY
5080: LIST
5081: LIST
5082: PUSH
5083: EMPTY
5084: LIST
5085: LIST
5086: LIST
5087: PPUSH
5088: CALL_OW 69
5092: PUSH
5093: LD_EXP 1
5097: PUSH
5098: EMPTY
5099: LIST
5100: DIFF
5101: ST_TO_ADDR
// DialogueOn ;
5102: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5106: LD_EXP 1
5110: PPUSH
5111: LD_STRING D3a-JMM-1
5113: PPUSH
5114: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5118: LD_EXP 9
5122: PPUSH
5123: LD_STRING D3a-Pow-1
5125: PPUSH
5126: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5130: LD_EXP 1
5134: PPUSH
5135: LD_STRING D3a-JMM-2
5137: PPUSH
5138: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5142: LD_EXP 9
5146: PPUSH
5147: LD_STRING D3a-Pow-2
5149: PPUSH
5150: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5154: LD_EXP 1
5158: PPUSH
5159: LD_STRING D3a-JMM-3
5161: PPUSH
5162: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5166: LD_EXP 9
5170: PPUSH
5171: LD_STRING D3a-Pow-3
5173: PPUSH
5174: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5178: LD_EXP 1
5182: PPUSH
5183: LD_STRING D3a-JMM-4
5185: PPUSH
5186: CALL_OW 88
// DialogueOff ;
5190: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5194: LD_STRING M2
5196: PPUSH
5197: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5201: LD_EXP 1
5205: PPUSH
5206: LD_STRING D3b-JMM-1
5208: PPUSH
5209: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5213: LD_INT 35
5215: PPUSH
5216: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
5220: LD_INT 22
5222: PPUSH
5223: LD_INT 22
5225: PUSH
5226: LD_INT 1
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: PUSH
5233: LD_INT 25
5235: PUSH
5236: LD_INT 2
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PPUSH
5247: CALL_OW 70
5251: IFFALSE 5213
// wait ( 0 0$5 ) ;
5253: LD_INT 175
5255: PPUSH
5256: CALL_OW 67
// InGameOn ;
5260: CALL_OW 8
// PrepareRussianHeroes ;
5264: CALL 11560 0 0
// CenterNowOnUnits ( Mikhail ) ;
5268: LD_EXP 8
5272: PPUSH
5273: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5277: LD_EXP 1
5281: PUSH
5282: LD_VAR 0 1
5286: PUSH
5287: LD_INT 1
5289: ARRAY
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: PPUSH
5295: LD_EXP 8
5299: PPUSH
5300: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5304: LD_EXP 8
5308: PPUSH
5309: LD_VAR 0 1
5313: PUSH
5314: LD_INT 1
5316: ARRAY
5317: PPUSH
5318: CALL_OW 119
// Wait ( 0 0$02 ) ;
5322: LD_INT 70
5324: PPUSH
5325: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5329: LD_EXP 8
5333: PPUSH
5334: LD_STRING D4-Mikh-1
5336: PPUSH
5337: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5341: LD_VAR 0 1
5345: PUSH
5346: LD_INT 1
5348: ARRAY
5349: PPUSH
5350: CALL_OW 258
5354: PUSH
5355: LD_INT 1
5357: EQUAL
5358: IFFALSE 5376
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5360: LD_VAR 0 1
5364: PUSH
5365: LD_INT 1
5367: ARRAY
5368: PPUSH
5369: LD_STRING D4-Sol1-1
5371: PPUSH
5372: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5376: LD_VAR 0 1
5380: PUSH
5381: LD_INT 1
5383: ARRAY
5384: PPUSH
5385: CALL_OW 258
5389: PUSH
5390: LD_INT 2
5392: EQUAL
5393: IFFALSE 5411
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5395: LD_VAR 0 1
5399: PUSH
5400: LD_INT 1
5402: ARRAY
5403: PPUSH
5404: LD_STRING D4-FSol1-1
5406: PPUSH
5407: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5411: LD_EXP 8
5415: PPUSH
5416: LD_STRING D4-Mikh-2
5418: PPUSH
5419: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5423: LD_VAR 0 1
5427: PUSH
5428: LD_INT 1
5430: ARRAY
5431: PPUSH
5432: CALL_OW 258
5436: PUSH
5437: LD_INT 1
5439: EQUAL
5440: IFFALSE 5458
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5442: LD_VAR 0 1
5446: PUSH
5447: LD_INT 1
5449: ARRAY
5450: PPUSH
5451: LD_STRING D4-Sol1-2
5453: PPUSH
5454: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5458: LD_VAR 0 1
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: PPUSH
5467: CALL_OW 258
5471: PUSH
5472: LD_INT 2
5474: EQUAL
5475: IFFALSE 5493
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5477: LD_VAR 0 1
5481: PUSH
5482: LD_INT 1
5484: ARRAY
5485: PPUSH
5486: LD_STRING D4-FSol1-2
5488: PPUSH
5489: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5493: LD_EXP 8
5497: PPUSH
5498: LD_STRING D4-Mikh-3
5500: PPUSH
5501: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5505: LD_VAR 0 1
5509: PUSH
5510: LD_INT 1
5512: ARRAY
5513: PPUSH
5514: CALL_OW 258
5518: PUSH
5519: LD_INT 1
5521: EQUAL
5522: IFFALSE 5540
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5524: LD_VAR 0 1
5528: PUSH
5529: LD_INT 1
5531: ARRAY
5532: PPUSH
5533: LD_STRING D4-Sol1-3
5535: PPUSH
5536: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5540: LD_VAR 0 1
5544: PUSH
5545: LD_INT 1
5547: ARRAY
5548: PPUSH
5549: CALL_OW 258
5553: PUSH
5554: LD_INT 2
5556: EQUAL
5557: IFFALSE 5575
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5559: LD_VAR 0 1
5563: PUSH
5564: LD_INT 1
5566: ARRAY
5567: PPUSH
5568: LD_STRING D4-FSol1-3
5570: PPUSH
5571: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5575: LD_EXP 8
5579: PPUSH
5580: LD_STRING D4-Mikh-4
5582: PPUSH
5583: CALL_OW 88
// case query ( Qs1 ) of 1 :
5587: LD_STRING Qs1
5589: PPUSH
5590: CALL_OW 97
5594: PUSH
5595: LD_INT 1
5597: DOUBLE
5598: EQUAL
5599: IFTRUE 5603
5601: GO 5638
5603: POP
// begin InGameOff ;
5604: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5608: LD_INT 1
5610: PPUSH
5611: LD_INT 6
5613: PPUSH
5614: LD_INT 2
5616: PPUSH
5617: LD_INT 1
5619: PPUSH
5620: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5624: LD_EXP 8
5628: PPUSH
5629: LD_INT 17
5631: PPUSH
5632: CALL_OW 113
// end ; 2 :
5636: GO 6231
5638: LD_INT 2
5640: DOUBLE
5641: EQUAL
5642: IFTRUE 5646
5644: GO 6196
5646: POP
// begin repeat wait ( 0 0$1 ) ;
5647: LD_INT 35
5649: PPUSH
5650: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5654: LD_VAR 0 1
5658: PUSH
5659: LD_INT 1
5661: ARRAY
5662: PPUSH
5663: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5667: LD_VAR 0 1
5671: PUSH
5672: LD_INT 1
5674: ARRAY
5675: PPUSH
5676: LD_EXP 1
5680: PPUSH
5681: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5685: LD_EXP 8
5689: PPUSH
5690: LD_EXP 1
5694: PPUSH
5695: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5699: LD_EXP 1
5703: PPUSH
5704: LD_EXP 8
5708: PPUSH
5709: CALL_OW 296
5713: PUSH
5714: LD_INT 5
5716: LESS
5717: IFFALSE 5647
// ComTurnUnit ( Mikhail , JMM ) ;
5719: LD_EXP 8
5723: PPUSH
5724: LD_EXP 1
5728: PPUSH
5729: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5733: LD_EXP 1
5737: PPUSH
5738: LD_STRING D4b-JMM-1
5740: PPUSH
5741: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5745: LD_EXP 8
5749: PPUSH
5750: LD_STRING D4b-Mikh-1
5752: PPUSH
5753: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5757: LD_EXP 1
5761: PPUSH
5762: LD_STRING D4b-JMM-2
5764: PPUSH
5765: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5769: LD_EXP 8
5773: PPUSH
5774: LD_STRING D4b-Mikh-2
5776: PPUSH
5777: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5781: LD_EXP 1
5785: PPUSH
5786: LD_STRING D4b-JMM-3
5788: PPUSH
5789: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5793: LD_EXP 8
5797: PPUSH
5798: LD_STRING D4b-Mikh-3
5800: PPUSH
5801: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5805: LD_EXP 1
5809: PPUSH
5810: LD_STRING D4b-JMM-4
5812: PPUSH
5813: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5817: LD_EXP 8
5821: PPUSH
5822: LD_STRING D4b-Mikh-4
5824: PPUSH
5825: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5829: LD_EXP 1
5833: PPUSH
5834: LD_STRING D4b-JMM-5
5836: PPUSH
5837: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5841: LD_EXP 8
5845: PPUSH
5846: LD_STRING D4b-Mikh-5
5848: PPUSH
5849: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5853: LD_EXP 1
5857: PPUSH
5858: LD_STRING D4b-JMM-6
5860: PPUSH
5861: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5865: LD_EXP 8
5869: PPUSH
5870: LD_STRING D4b-Mikh-6
5872: PPUSH
5873: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5877: LD_EXP 1
5881: PPUSH
5882: LD_STRING D4b-JMM-7
5884: PPUSH
5885: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5889: LD_EXP 8
5893: PPUSH
5894: LD_STRING D4b-Mikh-7
5896: PPUSH
5897: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5901: LD_VAR 0 1
5905: PUSH
5906: LD_INT 1
5908: ARRAY
5909: PPUSH
5910: CALL_OW 258
5914: PUSH
5915: LD_INT 1
5917: EQUAL
5918: IFFALSE 5936
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
5920: LD_VAR 0 1
5924: PUSH
5925: LD_INT 1
5927: ARRAY
5928: PPUSH
5929: LD_STRING D4b-Sol1-7
5931: PPUSH
5932: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5936: LD_VAR 0 1
5940: PUSH
5941: LD_INT 1
5943: ARRAY
5944: PPUSH
5945: CALL_OW 258
5949: PUSH
5950: LD_INT 2
5952: EQUAL
5953: IFFALSE 5971
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
5955: LD_VAR 0 1
5959: PUSH
5960: LD_INT 1
5962: ARRAY
5963: PPUSH
5964: LD_STRING D4b-FSol1-7
5966: PPUSH
5967: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
5971: LD_EXP 1
5975: PPUSH
5976: LD_STRING D4b-JMM-8
5978: PPUSH
5979: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5983: LD_VAR 0 1
5987: PUSH
5988: LD_INT 1
5990: ARRAY
5991: PPUSH
5992: CALL_OW 258
5996: PUSH
5997: LD_INT 1
5999: EQUAL
6000: IFFALSE 6018
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6002: LD_VAR 0 1
6006: PUSH
6007: LD_INT 1
6009: ARRAY
6010: PPUSH
6011: LD_STRING D4b-Sol1-8
6013: PPUSH
6014: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6018: LD_VAR 0 1
6022: PUSH
6023: LD_INT 1
6025: ARRAY
6026: PPUSH
6027: CALL_OW 258
6031: PUSH
6032: LD_INT 2
6034: EQUAL
6035: IFFALSE 6053
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6037: LD_VAR 0 1
6041: PUSH
6042: LD_INT 1
6044: ARRAY
6045: PPUSH
6046: LD_STRING D4b-FSol1-8
6048: PPUSH
6049: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6053: LD_EXP 1
6057: PPUSH
6058: LD_STRING D4b-JMM-9
6060: PPUSH
6061: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6065: LD_EXP 8
6069: PPUSH
6070: LD_INT 1
6072: PPUSH
6073: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6077: LD_ADDR_VAR 0 2
6081: PUSH
6082: LD_INT 22
6084: PUSH
6085: LD_INT 1
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: PUSH
6092: EMPTY
6093: LIST
6094: PPUSH
6095: CALL_OW 69
6099: PUSH
6100: FOR_IN
6101: IFFALSE 6114
// ComFree ( i ) ;
6103: LD_VAR 0 2
6107: PPUSH
6108: CALL_OW 139
6112: GO 6100
6114: POP
6115: POP
// repeat wait ( 0 0$1 ) ;
6116: LD_INT 35
6118: PPUSH
6119: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6123: LD_EXP 8
6127: PPUSH
6128: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6132: LD_EXP 8
6136: PUSH
6137: LD_VAR 0 1
6141: PUSH
6142: LD_INT 1
6144: ARRAY
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PPUSH
6150: LD_INT 1
6152: PPUSH
6153: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6157: LD_EXP 8
6161: PPUSH
6162: CALL_OW 310
6166: IFFALSE 6116
// mikhailDepot = IsInUnit ( Mikhail ) ;
6168: LD_ADDR_EXP 23
6172: PUSH
6173: LD_EXP 8
6177: PPUSH
6178: CALL_OW 310
6182: ST_TO_ADDR
// InGameOff ;
6183: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6187: LD_STRING M3
6189: PPUSH
6190: CALL_OW 337
// end ; 3 :
6194: GO 6231
6196: LD_INT 3
6198: DOUBLE
6199: EQUAL
6200: IFTRUE 6204
6202: GO 6230
6204: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6205: LD_EXP 8
6209: PPUSH
6210: LD_INT 17
6212: PPUSH
6213: CALL_OW 113
// wait ( 0 0$3 ) ;
6217: LD_INT 105
6219: PPUSH
6220: CALL_OW 67
// InGameOff ;
6224: CALL_OW 9
// end ; end ;
6228: GO 6231
6230: POP
// PrepareTigers ;
6231: CALL 14193 0 0
// RussianTrap ;
6235: CALL 10041 0 0
// tigersRespawn = 1 ;
6239: LD_ADDR_EXP 30
6243: PUSH
6244: LD_INT 1
6246: ST_TO_ADDR
// end ;
6247: PPOPN 2
6249: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do
6250: LD_INT 1
6252: PPUSH
6253: CALL_OW 255
6257: PUSH
6258: LD_INT 1
6260: EQUAL
6261: PUSH
6262: LD_INT 10
6264: PPUSH
6265: CALL_OW 255
6269: PUSH
6270: LD_INT 1
6272: EQUAL
6273: AND
6274: PUSH
6275: LD_INT 1
6277: PPUSH
6278: CALL_OW 274
6282: PPUSH
6283: LD_INT 1
6285: PPUSH
6286: CALL_OW 275
6290: PUSH
6291: LD_INT 100
6293: GREATEREQUAL
6294: AND
6295: IFFALSE 6458
6297: GO 6299
6299: DISABLE
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6300: LD_INT 2100
6302: PPUSH
6303: LD_INT 4200
6305: PPUSH
6306: CALL_OW 12
6310: PUSH
6311: LD_INT 1050
6313: PLUS
6314: PPUSH
6315: CALL_OW 67
// PrepareCargoBays ;
6319: CALL 12676 0 0
// cargoRespawn = 1 ;
6323: LD_ADDR_EXP 28
6327: PUSH
6328: LD_INT 1
6330: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 36 , 13 ) ;
6331: LD_EXP 15
6335: PUSH
6336: LD_EXP 16
6340: PUSH
6341: LD_EXP 17
6345: PUSH
6346: LD_EXP 18
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: PPUSH
6357: LD_INT 36
6359: PPUSH
6360: LD_INT 13
6362: PPUSH
6363: CALL_OW 111
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 40 , 20 ) ;
6367: LD_EXP 15
6371: PUSH
6372: LD_EXP 16
6376: PUSH
6377: LD_EXP 17
6381: PUSH
6382: LD_EXP 18
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: PPUSH
6393: LD_INT 40
6395: PPUSH
6396: LD_INT 20
6398: PPUSH
6399: CALL_OW 171
// AddComMoveXY ( [ cargo1 , cargo2 , driver1 , driver2 ] , 53 , 16 ) ;
6403: LD_EXP 15
6407: PUSH
6408: LD_EXP 16
6412: PUSH
6413: LD_EXP 17
6417: PUSH
6418: LD_EXP 18
6422: PUSH
6423: EMPTY
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: PPUSH
6429: LD_INT 53
6431: PPUSH
6432: LD_INT 16
6434: PPUSH
6435: CALL_OW 171
// wait ( 0 0$5 ) ;
6439: LD_INT 175
6441: PPUSH
6442: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6446: LD_EXP 17
6450: PPUSH
6451: LD_STRING D5-Rus2-1
6453: PPUSH
6454: CALL_OW 88
// end ;
6458: END
// every 0 0$1 trigger cargoRespawn = 1 do var i , j , tmp1 , tmp2 ;
6459: LD_EXP 28
6463: PUSH
6464: LD_INT 1
6466: EQUAL
6467: IFFALSE 6681
6469: GO 6471
6471: DISABLE
6472: LD_INT 0
6474: PPUSH
6475: PPUSH
6476: PPUSH
6477: PPUSH
// begin enable ;
6478: ENABLE
// tmp1 = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6479: LD_ADDR_VAR 0 3
6483: PUSH
6484: LD_INT 22
6486: PUSH
6487: LD_INT 3
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: PUSH
6494: LD_INT 21
6496: PUSH
6497: LD_INT 2
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: PUSH
6504: LD_INT 34
6506: PUSH
6507: LD_INT 51
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: PUSH
6514: EMPTY
6515: LIST
6516: LIST
6517: LIST
6518: PPUSH
6519: CALL_OW 69
6523: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] ] ) ;
6524: LD_ADDR_VAR 0 4
6528: PUSH
6529: LD_INT 22
6531: PUSH
6532: LD_INT 1
6534: PUSH
6535: EMPTY
6536: LIST
6537: LIST
6538: PUSH
6539: LD_INT 23
6541: PUSH
6542: LD_INT 1
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: PPUSH
6553: CALL_OW 69
6557: ST_TO_ADDR
// for i in tmp1 do
6558: LD_ADDR_VAR 0 1
6562: PUSH
6563: LD_VAR 0 3
6567: PUSH
6568: FOR_IN
6569: IFFALSE 6679
// begin for j in tmp2 do
6571: LD_ADDR_VAR 0 2
6575: PUSH
6576: LD_VAR 0 4
6580: PUSH
6581: FOR_IN
6582: IFFALSE 6675
// begin if GetDistUnits ( i , j ) < 7 then
6584: LD_VAR 0 1
6588: PPUSH
6589: LD_VAR 0 2
6593: PPUSH
6594: CALL_OW 296
6598: PUSH
6599: LD_INT 7
6601: LESS
6602: IFFALSE 6673
// begin disable ;
6604: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 7 , 9 ) ;
6605: LD_EXP 15
6609: PUSH
6610: LD_EXP 16
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PPUSH
6619: LD_INT 7
6621: PPUSH
6622: LD_INT 9
6624: PPUSH
6625: CALL_OW 111
// if cargoSee = 0 then
6629: LD_EXP 29
6633: PUSH
6634: LD_INT 0
6636: EQUAL
6637: IFFALSE 6673
// begin cargoSee = 1 ;
6639: LD_ADDR_EXP 29
6643: PUSH
6644: LD_INT 1
6646: ST_TO_ADDR
// cargoEscape = 1 ;
6647: LD_ADDR_EXP 20
6651: PUSH
6652: LD_INT 1
6654: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6655: LD_EXP 17
6659: PPUSH
6660: LD_STRING D5-Rus2-1a
6662: PPUSH
6663: CALL_OW 88
// exit ;
6667: POP
6668: POP
6669: POP
6670: POP
6671: GO 6681
// end ; end ; end ;
6673: GO 6581
6675: POP
6676: POP
// end ;
6677: GO 6568
6679: POP
6680: POP
// end ;
6681: PPOPN 4
6683: END
// every 0 0$1 trigger cargoEscape > 0 do
6684: LD_EXP 20
6688: PUSH
6689: LD_INT 0
6691: GREATER
6692: IFFALSE 6839
6694: GO 6696
6696: DISABLE
// begin enable ;
6697: ENABLE
// ComMoveToArea ( [ cargo1 , cargo2 ] , RussianAttack ) ;
6698: LD_EXP 15
6702: PUSH
6703: LD_EXP 16
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: PPUSH
6712: LD_INT 13
6714: PPUSH
6715: CALL_OW 113
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6719: LD_EXP 15
6723: PPUSH
6724: LD_INT 13
6726: PPUSH
6727: CALL_OW 308
6731: PUSH
6732: LD_EXP 17
6736: PPUSH
6737: LD_INT 13
6739: PPUSH
6740: CALL_OW 308
6744: OR
6745: IFFALSE 6779
// begin RemoveUnit ( cargo1 ) ;
6747: LD_EXP 15
6751: PPUSH
6752: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6756: LD_EXP 17
6760: PPUSH
6761: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6765: LD_ADDR_EXP 20
6769: PUSH
6770: LD_EXP 20
6774: PUSH
6775: LD_INT 1
6777: PLUS
6778: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6779: LD_EXP 16
6783: PPUSH
6784: LD_INT 13
6786: PPUSH
6787: CALL_OW 308
6791: PUSH
6792: LD_EXP 18
6796: PPUSH
6797: LD_INT 13
6799: PPUSH
6800: CALL_OW 308
6804: OR
6805: IFFALSE 6839
// begin RemoveUnit ( cargo2 ) ;
6807: LD_EXP 16
6811: PPUSH
6812: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6816: LD_EXP 18
6820: PPUSH
6821: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6825: LD_ADDR_EXP 20
6829: PUSH
6830: LD_EXP 20
6834: PUSH
6835: LD_INT 1
6837: PLUS
6838: ST_TO_ADDR
// end ; end ;
6839: END
// every 0 0$1 trigger cargoEscape > 1 do
6840: LD_EXP 20
6844: PUSH
6845: LD_INT 1
6847: GREATER
6848: IFFALSE 7012
6850: GO 6852
6852: DISABLE
// begin SetRestrict ( b_armoury , 1 , true ) ;
6853: LD_INT 4
6855: PPUSH
6856: LD_INT 1
6858: PPUSH
6859: LD_INT 1
6861: PPUSH
6862: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6866: LD_INT 31
6868: PPUSH
6869: LD_INT 1
6871: PPUSH
6872: LD_INT 1
6874: PPUSH
6875: CALL_OW 324
// if IsOK ( Jerry ) then
6879: LD_EXP 7
6883: PPUSH
6884: CALL_OW 302
6888: IFFALSE 6904
// begin Say ( Jerry , D5a-Sol1-1 ) ;
6890: LD_EXP 7
6894: PPUSH
6895: LD_STRING D5a-Sol1-1
6897: PPUSH
6898: CALL_OW 88
// end else
6902: GO 7000
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) [ rand ( 2 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] ] ) ) ] , D5a-Sol1-1 ) ;
6904: LD_INT 22
6906: PUSH
6907: LD_INT 1
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: LD_INT 23
6916: PUSH
6917: LD_INT 1
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PUSH
6924: LD_INT 26
6926: PUSH
6927: LD_INT 1
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: LIST
6938: PPUSH
6939: CALL_OW 69
6943: PUSH
6944: LD_INT 2
6946: PPUSH
6947: LD_INT 22
6949: PUSH
6950: LD_INT 1
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: LD_INT 23
6959: PUSH
6960: LD_INT 1
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: PUSH
6967: LD_INT 26
6969: PUSH
6970: LD_INT 1
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: LIST
6981: PPUSH
6982: CALL_OW 69
6986: PPUSH
6987: CALL_OW 12
6991: ARRAY
6992: PPUSH
6993: LD_STRING D5a-Sol1-1
6995: PPUSH
6996: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7000: LD_EXP 1
7004: PPUSH
7005: LD_STRING D5a-JMM-1
7007: PPUSH
7008: CALL_OW 88
// end ;
7012: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7013: LD_INT 1
7015: PPUSH
7016: CALL_OW 255
7020: PUSH
7021: LD_INT 3
7023: EQUAL
7024: PUSH
7025: LD_INT 1
7027: PPUSH
7028: CALL_OW 256
7032: PUSH
7033: LD_INT 1000
7035: LESS
7036: AND
7037: PUSH
7038: LD_INT 10
7040: PPUSH
7041: CALL_OW 255
7045: PUSH
7046: LD_INT 3
7048: EQUAL
7049: PUSH
7050: LD_INT 10
7052: PPUSH
7053: CALL_OW 256
7057: PUSH
7058: LD_INT 1000
7060: LESS
7061: AND
7062: OR
7063: IFFALSE 7080
7065: GO 7067
7067: DISABLE
// begin Say ( JMM , D8-JMM-1 ) ;
7068: LD_EXP 1
7072: PPUSH
7073: LD_STRING D8-JMM-1
7075: PPUSH
7076: CALL_OW 88
// end ;
7080: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7081: LD_EXP 8
7085: PPUSH
7086: CALL_OW 310
7090: PUSH
7091: LD_INT 1
7093: EQUAL
7094: PUSH
7095: LD_EXP 22
7099: PUSH
7100: LD_INT 3
7102: EQUAL
7103: NOT
7104: AND
7105: IFFALSE 7127
7107: GO 7109
7109: DISABLE
// begin mikhailInBase = 1 ;
7110: LD_ADDR_EXP 22
7114: PUSH
7115: LD_INT 1
7117: ST_TO_ADDR
// mikhailStatus = 1 ;
7118: LD_ADDR_EXP 21
7122: PUSH
7123: LD_INT 1
7125: ST_TO_ADDR
// enable ;
7126: ENABLE
// end ;
7127: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 1 and GetSide ( Mikhail ) = 1 do
7128: LD_EXP 8
7132: PPUSH
7133: LD_INT 25
7135: PPUSH
7136: CALL_OW 308
7140: PUSH
7141: LD_EXP 22
7145: PUSH
7146: LD_INT 1
7148: EQUAL
7149: AND
7150: PUSH
7151: LD_EXP 8
7155: PPUSH
7156: CALL_OW 255
7160: PUSH
7161: LD_INT 1
7163: EQUAL
7164: AND
7165: IFFALSE 7495
7167: GO 7169
7169: DISABLE
// begin enable ;
7170: ENABLE
// case query ( QMikh2 ) of 1 :
7171: LD_STRING QMikh2
7173: PPUSH
7174: CALL_OW 97
7178: PUSH
7179: LD_INT 1
7181: DOUBLE
7182: EQUAL
7183: IFTRUE 7187
7185: GO 7254
7187: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7188: LD_INT 1
7190: PPUSH
7191: LD_INT 6
7193: PPUSH
7194: LD_INT 2
7196: PPUSH
7197: LD_INT 1
7199: PPUSH
7200: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7204: LD_EXP 8
7208: PPUSH
7209: LD_INT 6
7211: PPUSH
7212: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7216: LD_EXP 8
7220: PPUSH
7221: CALL_OW 122
// wait ( 0 0$1 ) ;
7225: LD_INT 35
7227: PPUSH
7228: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7232: LD_EXP 8
7236: PPUSH
7237: LD_INT 17
7239: PPUSH
7240: CALL_OW 113
// mikhailInbase = 0 ;
7244: LD_ADDR_EXP 22
7248: PUSH
7249: LD_INT 0
7251: ST_TO_ADDR
// end ; 2 :
7252: GO 7495
7254: LD_INT 2
7256: DOUBLE
7257: EQUAL
7258: IFTRUE 7262
7260: GO 7435
7262: POP
// begin mikhailInBase = 2 ;
7263: LD_ADDR_EXP 22
7267: PUSH
7268: LD_INT 2
7270: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7271: LD_EXP 8
7275: PPUSH
7276: LD_INT 6
7278: PPUSH
7279: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7283: LD_EXP 8
7287: PPUSH
7288: CALL_OW 122
// wait ( 0 0$1 ) ;
7292: LD_INT 35
7294: PPUSH
7295: CALL_OW 67
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7299: LD_EXP 8
7303: PPUSH
7304: LD_EXP 8
7308: PPUSH
7309: CALL_OW 250
7313: PUSH
7314: LD_INT 2
7316: PLUS
7317: PPUSH
7318: LD_EXP 8
7322: PPUSH
7323: CALL_OW 251
7327: PUSH
7328: LD_INT 2
7330: PLUS
7331: PPUSH
7332: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7336: LD_EXP 8
7340: PPUSH
7341: LD_EXP 8
7345: PPUSH
7346: CALL_OW 250
7350: PUSH
7351: LD_INT 1
7353: PLUS
7354: PPUSH
7355: LD_EXP 8
7359: PPUSH
7360: CALL_OW 251
7364: PUSH
7365: LD_INT 2
7367: PLUS
7368: PPUSH
7369: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7373: LD_EXP 8
7377: PPUSH
7378: LD_EXP 8
7382: PPUSH
7383: CALL_OW 250
7387: PUSH
7388: LD_INT 2
7390: PLUS
7391: PPUSH
7392: LD_EXP 8
7396: PPUSH
7397: CALL_OW 251
7401: PPUSH
7402: CALL_OW 171
// wait ( 0 0$5 ) ;
7406: LD_INT 175
7408: PPUSH
7409: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7413: LD_EXP 8
7417: PPUSH
7418: LD_INT 25
7420: PPUSH
7421: CALL_OW 113
// mikhailInBase = 4 ;
7425: LD_ADDR_EXP 22
7429: PUSH
7430: LD_INT 4
7432: ST_TO_ADDR
// end ; 3 :
7433: GO 7495
7435: LD_INT 3
7437: DOUBLE
7438: EQUAL
7439: IFTRUE 7443
7441: GO 7494
7443: POP
// begin SetSide ( Mikhail , 6 ) ;
7444: LD_EXP 8
7448: PPUSH
7449: LD_INT 6
7451: PPUSH
7452: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7456: LD_EXP 8
7460: PPUSH
7461: CALL_OW 122
// wait ( 0 0$1 ) ;
7465: LD_INT 35
7467: PPUSH
7468: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7472: LD_EXP 8
7476: PPUSH
7477: LD_INT 17
7479: PPUSH
7480: CALL_OW 113
// mikhailInbase = 3 ;
7484: LD_ADDR_EXP 22
7488: PUSH
7489: LD_INT 3
7491: ST_TO_ADDR
// end ; end ;
7492: GO 7495
7494: POP
// end ;
7495: END
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7496: LD_EXP 8
7500: PPUSH
7501: LD_INT 25
7503: PPUSH
7504: CALL_OW 308
7508: PUSH
7509: LD_EXP 22
7513: PUSH
7514: LD_INT 4
7516: EQUAL
7517: AND
7518: IFFALSE 7624
7520: GO 7522
7522: DISABLE
// begin enable ;
7523: ENABLE
// InGameOn ;
7524: CALL_OW 8
// SetSide ( Mikhail , 1 ) ;
7528: LD_EXP 8
7532: PPUSH
7533: LD_INT 1
7535: PPUSH
7536: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7540: LD_INT 35
7542: PPUSH
7543: CALL_OW 67
// if GetDistUnits ( Mikhail , dep1 ) < GetDistUnits ( Mikhail , dep2 ) then
7547: LD_EXP 8
7551: PPUSH
7552: LD_INT 1
7554: PPUSH
7555: CALL_OW 296
7559: PUSH
7560: LD_EXP 8
7564: PPUSH
7565: LD_INT 10
7567: PPUSH
7568: CALL_OW 296
7572: LESS
7573: IFFALSE 7589
// begin ComEnterUnit ( Mikhail , dep1 ) ;
7575: LD_EXP 8
7579: PPUSH
7580: LD_INT 1
7582: PPUSH
7583: CALL_OW 120
// end else
7587: GO 7601
// begin ComEnterUnit ( Mikhail , dep2 ) ;
7589: LD_EXP 8
7593: PPUSH
7594: LD_INT 10
7596: PPUSH
7597: CALL_OW 120
// end ; until IsInUnit ( Mikhail ) ;
7601: LD_EXP 8
7605: PPUSH
7606: CALL_OW 310
7610: IFFALSE 7540
// InGameOff ;
7612: CALL_OW 9
// mikhailInBase = 1 ;
7616: LD_ADDR_EXP 22
7620: PUSH
7621: LD_INT 1
7623: ST_TO_ADDR
// end ;
7624: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7625: LD_EXP 8
7629: PPUSH
7630: CALL_OW 310
7634: PUSH
7635: LD_EXP 22
7639: PUSH
7640: LD_INT 3
7642: EQUAL
7643: NOT
7644: AND
7645: IFFALSE 7771
7647: GO 7649
7649: DISABLE
// begin enable ;
7650: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7651: LD_INT 22
7653: PUSH
7654: LD_INT 1
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PUSH
7661: LD_INT 21
7663: PUSH
7664: LD_INT 1
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PUSH
7671: LD_INT 91
7673: PUSH
7674: LD_EXP 8
7678: PPUSH
7679: CALL_OW 310
7683: PUSH
7684: LD_INT 10
7686: PUSH
7687: EMPTY
7688: LIST
7689: LIST
7690: LIST
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: LIST
7696: PPUSH
7697: CALL_OW 69
7701: PUSH
7702: LD_INT 1
7704: EQUAL
7705: IFFALSE 7771
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7707: LD_INT 1
7709: PPUSH
7710: LD_INT 6
7712: PPUSH
7713: LD_INT 2
7715: PPUSH
7716: LD_INT 1
7718: PPUSH
7719: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7723: LD_EXP 8
7727: PPUSH
7728: LD_INT 6
7730: PPUSH
7731: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7735: LD_EXP 8
7739: PPUSH
7740: CALL_OW 122
// wait ( 0 0$1 ) ;
7744: LD_INT 35
7746: PPUSH
7747: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7751: LD_EXP 8
7755: PPUSH
7756: LD_INT 17
7758: PPUSH
7759: CALL_OW 113
// mikhailStatus = 3 ;
7763: LD_ADDR_EXP 21
7767: PUSH
7768: LD_INT 3
7770: ST_TO_ADDR
// end ; end ;
7771: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7772: LD_EXP 1
7776: PPUSH
7777: LD_EXP 23
7781: PPUSH
7782: CALL_OW 296
7786: PUSH
7787: LD_INT 5
7789: LESS
7790: PUSH
7791: LD_EXP 21
7795: PUSH
7796: LD_INT 3
7798: EQUAL
7799: AND
7800: PUSH
7801: LD_EXP 22
7805: PUSH
7806: LD_INT 3
7808: EQUAL
7809: NOT
7810: AND
7811: IFFALSE 8027
7813: GO 7815
7815: DISABLE
7816: LD_INT 0
7818: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM ] ;
7819: LD_ADDR_VAR 0 1
7823: PUSH
7824: LD_INT 22
7826: PUSH
7827: LD_INT 1
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: PUSH
7834: LD_INT 21
7836: PUSH
7837: LD_INT 1
7839: PUSH
7840: EMPTY
7841: LIST
7842: LIST
7843: PUSH
7844: LD_INT 26
7846: PUSH
7847: LD_INT 1
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: LIST
7858: PPUSH
7859: CALL_OW 69
7863: PUSH
7864: LD_EXP 1
7868: PUSH
7869: EMPTY
7870: LIST
7871: DIFF
7872: ST_TO_ADDR
// DialogueOn ;
7873: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7877: LD_EXP 1
7881: PPUSH
7882: LD_STRING D7-JMM-1
7884: PPUSH
7885: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7889: LD_VAR 0 1
7893: PUSH
7894: LD_INT 1
7896: ARRAY
7897: PPUSH
7898: LD_STRING D7-Sol1-1
7900: PPUSH
7901: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7905: LD_EXP 1
7909: PPUSH
7910: LD_STRING D7-JMM-2
7912: PPUSH
7913: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
7917: LD_VAR 0 1
7921: PUSH
7922: LD_INT 1
7924: ARRAY
7925: PPUSH
7926: LD_STRING D7-Sol1-2
7928: PPUSH
7929: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
7933: LD_EXP 1
7937: PPUSH
7938: LD_STRING D7-JMM-3
7940: PPUSH
7941: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
7945: LD_VAR 0 1
7949: PUSH
7950: LD_INT 1
7952: ARRAY
7953: PPUSH
7954: LD_STRING D7-Sol1-3
7956: PPUSH
7957: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
7961: LD_EXP 3
7965: PPUSH
7966: CALL_OW 302
7970: PUSH
7971: LD_EXP 4
7975: PPUSH
7976: CALL_OW 302
7980: AND
7981: IFFALSE 8023
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
7983: LD_EXP 3
7987: PPUSH
7988: LD_STRING D7-Cyrus-3
7990: PPUSH
7991: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
7995: LD_VAR 0 1
7999: PUSH
8000: LD_INT 1
8002: ARRAY
8003: PPUSH
8004: LD_STRING D7-Sol1-4
8006: PPUSH
8007: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8011: LD_EXP 4
8015: PPUSH
8016: LD_STRING D7-Lisa-4
8018: PPUSH
8019: CALL_OW 88
// end ; DialogueOff ;
8023: CALL_OW 7
// end ;
8027: PPOPN 1
8029: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8030: LD_EXP 8
8034: PPUSH
8035: CALL_OW 303
8039: PUSH
8040: LD_EXP 21
8044: PUSH
8045: LD_INT 3
8047: EQUAL
8048: AND
8049: IFFALSE 8063
8051: GO 8053
8053: DISABLE
// begin enable ;
8054: ENABLE
// mikhailStatus = 2 ;
8055: LD_ADDR_EXP 21
8059: PUSH
8060: LD_INT 2
8062: ST_TO_ADDR
// end ;
8063: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8064: LD_EXP 8
8068: PPUSH
8069: LD_INT 17
8071: PPUSH
8072: CALL_OW 308
8076: PUSH
8077: LD_EXP 8
8081: PPUSH
8082: CALL_OW 255
8086: PUSH
8087: LD_INT 6
8089: EQUAL
8090: AND
8091: IFFALSE 8124
8093: GO 8095
8095: DISABLE
// begin if not mikhailInBase = 3 then
8096: LD_EXP 22
8100: PUSH
8101: LD_INT 3
8103: EQUAL
8104: NOT
8105: IFFALSE 8115
// mikhailStatus = 3 ;
8107: LD_ADDR_EXP 21
8111: PUSH
8112: LD_INT 3
8114: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8115: LD_EXP 8
8119: PPUSH
8120: CALL_OW 64
// end ;
8124: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8125: LD_EXP 21
8129: PUSH
8130: LD_INT 3
8132: EQUAL
8133: PUSH
8134: LD_EXP 8
8138: PPUSH
8139: CALL_OW 255
8143: PUSH
8144: LD_INT 6
8146: EQUAL
8147: AND
8148: IFFALSE 8314
8150: GO 8152
8152: DISABLE
8153: LD_INT 0
8155: PPUSH
8156: PPUSH
// begin enable ;
8157: ENABLE
// if IsOk ( Mikhail ) then
8158: LD_EXP 8
8162: PPUSH
8163: CALL_OW 302
8167: IFFALSE 8314
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8169: LD_ADDR_VAR 0 2
8173: PUSH
8174: LD_EXP 8
8178: PPUSH
8179: LD_INT 22
8181: PUSH
8182: LD_INT 1
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: PUSH
8189: LD_INT 21
8191: PUSH
8192: LD_INT 1
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: PPUSH
8203: CALL_OW 69
8207: PPUSH
8208: CALL 10233 0 2
8212: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8213: LD_VAR 0 2
8217: PPUSH
8218: LD_EXP 8
8222: PPUSH
8223: CALL_OW 296
8227: PUSH
8228: LD_INT 8
8230: LESS
8231: IFFALSE 8314
// begin if GetSex ( attacker ) = sex_male then
8233: LD_VAR 0 2
8237: PPUSH
8238: CALL_OW 258
8242: PUSH
8243: LD_INT 1
8245: EQUAL
8246: IFFALSE 8282
// begin disable ;
8248: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8249: LD_VAR 0 2
8253: PPUSH
8254: LD_STRING D7a-Sol1-1
8256: PPUSH
8257: CALL_OW 88
// wait ( 0 0$2 ) ;
8261: LD_INT 70
8263: PPUSH
8264: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8268: LD_VAR 0 2
8272: PPUSH
8273: LD_STRING D7a-Sol1-1a
8275: PPUSH
8276: CALL_OW 88
// end else
8280: GO 8314
// begin disable ;
8282: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8283: LD_VAR 0 2
8287: PPUSH
8288: LD_STRING D7a-FSol1-1
8290: PPUSH
8291: CALL_OW 88
// wait ( 0 0$2 ) ;
8295: LD_INT 70
8297: PPUSH
8298: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8302: LD_VAR 0 2
8306: PPUSH
8307: LD_STRING D7a-FSol1-1a
8309: PPUSH
8310: CALL_OW 88
// end ; end ; end ; end ;
8314: PPOPN 2
8316: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8317: LD_EXP 27
8321: PUSH
8322: LD_INT 1
8324: EQUAL
8325: PUSH
8326: LD_INT 22
8328: PPUSH
8329: LD_INT 22
8331: PUSH
8332: LD_INT 3
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PUSH
8339: LD_INT 21
8341: PUSH
8342: LD_INT 1
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PPUSH
8353: CALL_OW 70
8357: PUSH
8358: LD_INT 2
8360: GREATER
8361: AND
8362: PUSH
8363: LD_INT 22
8365: PPUSH
8366: LD_INT 22
8368: PUSH
8369: LD_INT 1
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PUSH
8376: LD_INT 2
8378: PUSH
8379: LD_INT 21
8381: PUSH
8382: LD_INT 1
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: PUSH
8389: LD_INT 59
8391: PUSH
8392: EMPTY
8393: LIST
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: LIST
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: PPUSH
8404: CALL_OW 70
8408: PUSH
8409: LD_INT 0
8411: EQUAL
8412: AND
8413: IFFALSE 8428
8415: GO 8417
8417: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8418: LD_INT 1
8420: PPUSH
8421: LD_INT 3
8423: PPUSH
8424: CALL_OW 235
// end ;
8428: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8429: LD_EXP 30
8433: PUSH
8434: LD_INT 1
8436: EQUAL
8437: PUSH
8438: LD_INT 22
8440: PUSH
8441: LD_INT 0
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PUSH
8448: LD_INT 25
8450: PUSH
8451: LD_INT 14
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: PPUSH
8462: CALL_OW 69
8466: PUSH
8467: LD_INT 0
8469: EQUAL
8470: AND
8471: IFFALSE 8565
8473: GO 8475
8475: DISABLE
8476: LD_INT 0
8478: PPUSH
8479: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8480: LD_ADDR_VAR 0 2
8484: PUSH
8485: LD_INT 22
8487: PUSH
8488: LD_INT 1
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: PUSH
8495: LD_INT 21
8497: PUSH
8498: LD_INT 1
8500: PUSH
8501: EMPTY
8502: LIST
8503: LIST
8504: PUSH
8505: LD_INT 23
8507: PUSH
8508: LD_INT 1
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: PUSH
8515: EMPTY
8516: LIST
8517: LIST
8518: LIST
8519: PPUSH
8520: CALL_OW 69
8524: ST_TO_ADDR
// for i in tmp do
8525: LD_ADDR_VAR 0 1
8529: PUSH
8530: LD_VAR 0 2
8534: PUSH
8535: FOR_IN
8536: IFFALSE 8563
// begin AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8538: LD_VAR 0 1
8542: PPUSH
8543: LD_INT 1
8545: PPUSH
8546: LD_INT 4
8548: PPUSH
8549: CALL_OW 12
8553: PPUSH
8554: LD_INT 300
8556: PPUSH
8557: CALL_OW 492
// end ;
8561: GO 8535
8563: POP
8564: POP
// end ; end_of_file
8565: PPOPN 2
8567: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8568: LD_INT 0
8570: PPUSH
8571: PPUSH
8572: PPUSH
8573: PPUSH
// for i = 1 to count do
8574: LD_ADDR_VAR 0 8
8578: PUSH
8579: DOUBLE
8580: LD_INT 1
8582: DEC
8583: ST_TO_ADDR
8584: LD_VAR 0 6
8588: PUSH
8589: FOR_TO
8590: IFFALSE 8671
// begin uc_side = side ;
8592: LD_ADDR_OWVAR 20
8596: PUSH
8597: LD_VAR 0 1
8601: ST_TO_ADDR
// uc_nation = nation ;
8602: LD_ADDR_OWVAR 21
8606: PUSH
8607: LD_VAR 0 2
8611: ST_TO_ADDR
// hc_gallery =  ;
8612: LD_ADDR_OWVAR 33
8616: PUSH
8617: LD_STRING 
8619: ST_TO_ADDR
// hc_name =  ;
8620: LD_ADDR_OWVAR 26
8624: PUSH
8625: LD_STRING 
8627: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8628: LD_INT 0
8630: PPUSH
8631: LD_VAR 0 5
8635: PPUSH
8636: LD_VAR 0 4
8640: PPUSH
8641: CALL_OW 380
// un = CreateHuman ;
8645: LD_ADDR_VAR 0 10
8649: PUSH
8650: CALL_OW 44
8654: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8655: LD_VAR 0 10
8659: PPUSH
8660: LD_VAR 0 3
8664: PPUSH
8665: CALL_OW 52
// end ;
8669: GO 8589
8671: POP
8672: POP
// end ;
8673: LD_VAR 0 7
8677: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8678: LD_INT 0
8680: PPUSH
8681: PPUSH
8682: PPUSH
// uc_side := GetSide ( b ) ;
8683: LD_ADDR_OWVAR 20
8687: PUSH
8688: LD_VAR 0 2
8692: PPUSH
8693: CALL_OW 255
8697: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8698: LD_ADDR_OWVAR 21
8702: PUSH
8703: LD_VAR 0 2
8707: PPUSH
8708: CALL_OW 248
8712: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8713: LD_INT 0
8715: PPUSH
8716: LD_INT 1
8718: PPUSH
8719: LD_VAR 0 1
8723: PPUSH
8724: CALL_OW 380
// un = CreateHuman ;
8728: LD_ADDR_VAR 0 4
8732: PUSH
8733: CALL_OW 44
8737: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8738: LD_ADDR_VAR 0 5
8742: PUSH
8743: LD_VAR 0 2
8747: PPUSH
8748: CALL_OW 254
8752: PUSH
8753: LD_INT 3
8755: MINUS
8756: ST_TO_ADDR
// if dir < 0 then
8757: LD_VAR 0 5
8761: PUSH
8762: LD_INT 0
8764: LESS
8765: IFFALSE 8781
// dir := 6 + dir ;
8767: LD_ADDR_VAR 0 5
8771: PUSH
8772: LD_INT 6
8774: PUSH
8775: LD_VAR 0 5
8779: PLUS
8780: ST_TO_ADDR
// SetDir ( un , dir ) ;
8781: LD_VAR 0 4
8785: PPUSH
8786: LD_VAR 0 5
8790: PPUSH
8791: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8795: LD_VAR 0 4
8799: PPUSH
8800: LD_VAR 0 2
8804: PPUSH
8805: CALL_OW 52
// end ;
8809: LD_VAR 0 3
8813: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8814: LD_INT 0
8816: PPUSH
8817: PPUSH
8818: PPUSH
8819: PPUSH
8820: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8821: LD_ADDR_VAR 0 7
8825: PUSH
8826: LD_INT 22
8828: PUSH
8829: LD_VAR 0 1
8833: PUSH
8834: EMPTY
8835: LIST
8836: LIST
8837: PUSH
8838: LD_INT 25
8840: PUSH
8841: LD_INT 2
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: PUSH
8848: LD_INT 24
8850: PUSH
8851: LD_INT 1000
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: LIST
8862: PPUSH
8863: CALL_OW 69
8867: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8868: LD_ADDR_VAR 0 5
8872: PUSH
8873: LD_VAR 0 3
8877: PPUSH
8878: LD_INT 22
8880: PUSH
8881: LD_VAR 0 1
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: LD_INT 21
8892: PUSH
8893: LD_INT 3
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PUSH
8900: LD_INT 3
8902: PUSH
8903: LD_INT 24
8905: PUSH
8906: LD_INT 1000
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: PUSH
8913: EMPTY
8914: LIST
8915: LIST
8916: PUSH
8917: EMPTY
8918: LIST
8919: LIST
8920: LIST
8921: PUSH
8922: EMPTY
8923: LIST
8924: PPUSH
8925: CALL_OW 70
8929: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8930: LD_VAR 0 5
8934: PUSH
8935: LD_INT 0
8937: GREATER
8938: PUSH
8939: LD_VAR 0 7
8943: PUSH
8944: LD_INT 0
8946: GREATER
8947: AND
8948: IFFALSE 9014
// begin for i in engineerOk_list do
8950: LD_ADDR_VAR 0 6
8954: PUSH
8955: LD_VAR 0 7
8959: PUSH
8960: FOR_IN
8961: IFFALSE 9012
// begin for j in buildings_list do
8963: LD_ADDR_VAR 0 8
8967: PUSH
8968: LD_VAR 0 5
8972: PUSH
8973: FOR_IN
8974: IFFALSE 9008
// begin AddComExitBuilding ( i ) ;
8976: LD_VAR 0 6
8980: PPUSH
8981: CALL_OW 182
// wait ( 0 0$1 ) ;
8985: LD_INT 35
8987: PPUSH
8988: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8992: LD_VAR 0 6
8996: PPUSH
8997: LD_VAR 0 8
9001: PPUSH
9002: CALL_OW 190
// end ;
9006: GO 8973
9008: POP
9009: POP
// end ;
9010: GO 8960
9012: POP
9013: POP
// end ; if buildings_list = 0 then
9014: LD_VAR 0 5
9018: PUSH
9019: LD_INT 0
9021: EQUAL
9022: IFFALSE 9055
// begin for i in engineerOK_list do
9024: LD_ADDR_VAR 0 6
9028: PUSH
9029: LD_VAR 0 7
9033: PUSH
9034: FOR_IN
9035: IFFALSE 9053
// begin ComEnterUnit ( i , building ) ;
9037: LD_VAR 0 6
9041: PPUSH
9042: LD_VAR 0 2
9046: PPUSH
9047: CALL_OW 120
// end ;
9051: GO 9034
9053: POP
9054: POP
// end ; end ;
9055: LD_VAR 0 4
9059: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
9060: LD_INT 0
9062: PPUSH
9063: PPUSH
9064: PPUSH
9065: PPUSH
9066: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9067: LD_ADDR_VAR 0 6
9071: PUSH
9072: LD_INT 22
9074: PUSH
9075: LD_VAR 0 1
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: PUSH
9084: LD_INT 25
9086: PUSH
9087: LD_INT 4
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: PUSH
9094: LD_INT 24
9096: PUSH
9097: LD_INT 250
9099: PUSH
9100: EMPTY
9101: LIST
9102: LIST
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: LIST
9108: PPUSH
9109: CALL_OW 69
9113: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9114: LD_ADDR_VAR 0 9
9118: PUSH
9119: LD_VAR 0 3
9123: PPUSH
9124: LD_INT 22
9126: PUSH
9127: LD_VAR 0 1
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PUSH
9136: LD_INT 21
9138: PUSH
9139: LD_INT 1
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: PUSH
9146: LD_INT 3
9148: PUSH
9149: LD_INT 24
9151: PUSH
9152: LD_INT 650
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: LIST
9167: PPUSH
9168: CALL_OW 70
9172: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
9173: LD_VAR 0 9
9177: PUSH
9178: LD_INT 0
9180: GREATER
9181: PUSH
9182: LD_VAR 0 6
9186: PUSH
9187: LD_INT 0
9189: GREATER
9190: AND
9191: IFFALSE 9318
// begin for i = 1 to damageUnits do
9193: LD_ADDR_VAR 0 7
9197: PUSH
9198: DOUBLE
9199: LD_INT 1
9201: DEC
9202: ST_TO_ADDR
9203: LD_VAR 0 9
9207: PUSH
9208: FOR_TO
9209: IFFALSE 9233
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9211: LD_VAR 0 9
9215: PUSH
9216: LD_VAR 0 7
9220: ARRAY
9221: PPUSH
9222: LD_VAR 0 2
9226: PPUSH
9227: CALL_OW 113
9231: GO 9208
9233: POP
9234: POP
// for i in sci_list do
9235: LD_ADDR_VAR 0 7
9239: PUSH
9240: LD_VAR 0 6
9244: PUSH
9245: FOR_IN
9246: IFFALSE 9314
// begin ComExitBuilding ( i ) ;
9248: LD_VAR 0 7
9252: PPUSH
9253: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9257: LD_ADDR_VAR 0 8
9261: PUSH
9262: LD_VAR 0 2
9266: PPUSH
9267: LD_INT 22
9269: PUSH
9270: LD_VAR 0 1
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PPUSH
9279: CALL_OW 70
9283: PUSH
9284: FOR_IN
9285: IFFALSE 9310
// begin AddComHeal ( i , j ) ;
9287: LD_VAR 0 7
9291: PPUSH
9292: LD_VAR 0 8
9296: PPUSH
9297: CALL_OW 188
// wait ( 1 1$0 ) ;
9301: LD_INT 2100
9303: PPUSH
9304: CALL_OW 67
// end ;
9308: GO 9284
9310: POP
9311: POP
// end ;
9312: GO 9245
9314: POP
9315: POP
// end else
9316: GO 9332
// begin AddComEnterUnit ( sci_list , build ) ;
9318: LD_VAR 0 6
9322: PPUSH
9323: LD_VAR 0 4
9327: PPUSH
9328: CALL_OW 180
// end ; end ;
9332: LD_VAR 0 5
9336: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9337: LD_INT 0
9339: PPUSH
9340: PPUSH
9341: PPUSH
9342: PPUSH
9343: PPUSH
9344: PPUSH
9345: PPUSH
9346: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9347: LD_ADDR_VAR 0 7
9351: PUSH
9352: LD_VAR 0 3
9356: PPUSH
9357: LD_INT 22
9359: PUSH
9360: LD_VAR 0 1
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PUSH
9369: LD_INT 21
9371: PUSH
9372: LD_INT 2
9374: PUSH
9375: EMPTY
9376: LIST
9377: LIST
9378: PUSH
9379: LD_INT 24
9381: PUSH
9382: LD_INT 550
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 34
9391: PUSH
9392: LD_INT 46
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: PPUSH
9405: CALL_OW 70
9409: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9410: LD_ADDR_VAR 0 8
9414: PUSH
9415: LD_VAR 0 3
9419: PPUSH
9420: LD_INT 22
9422: PUSH
9423: LD_VAR 0 1
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PUSH
9432: LD_INT 21
9434: PUSH
9435: LD_INT 2
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: PUSH
9442: LD_INT 34
9444: PUSH
9445: LD_INT 46
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PUSH
9452: LD_INT 3
9454: PUSH
9455: LD_INT 24
9457: PUSH
9458: LD_INT 550
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: PPUSH
9475: CALL_OW 70
9479: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9480: LD_ADDR_VAR 0 9
9484: PUSH
9485: LD_VAR 0 2
9489: PPUSH
9490: LD_INT 22
9492: PUSH
9493: LD_VAR 0 1
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: PUSH
9502: LD_INT 21
9504: PUSH
9505: LD_INT 2
9507: PUSH
9508: EMPTY
9509: LIST
9510: LIST
9511: PUSH
9512: LD_INT 34
9514: PUSH
9515: LD_INT 46
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PUSH
9522: LD_INT 24
9524: PUSH
9525: LD_INT 1000
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: PUSH
9532: LD_INT 58
9534: PUSH
9535: EMPTY
9536: LIST
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: PPUSH
9545: CALL_OW 70
9549: ST_TO_ADDR
// for i in damageVehicle_list do
9550: LD_ADDR_VAR 0 5
9554: PUSH
9555: LD_VAR 0 8
9559: PUSH
9560: FOR_IN
9561: IFFALSE 9580
// mechanicInside_list = UnitsInside ( i ) ;
9563: LD_ADDR_VAR 0 10
9567: PUSH
9568: LD_VAR 0 5
9572: PPUSH
9573: CALL_OW 313
9577: ST_TO_ADDR
9578: GO 9560
9580: POP
9581: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9582: LD_ADDR_VAR 0 11
9586: PUSH
9587: LD_VAR 0 2
9591: PPUSH
9592: LD_INT 22
9594: PUSH
9595: LD_VAR 0 1
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PUSH
9604: LD_INT 25
9606: PUSH
9607: LD_INT 3
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: PPUSH
9618: CALL_OW 70
9622: ST_TO_ADDR
// if damageVehicle_list > 0 then
9623: LD_VAR 0 8
9627: PUSH
9628: LD_INT 0
9630: GREATER
9631: IFFALSE 9704
// begin for i in damageVehicle_list do
9633: LD_ADDR_VAR 0 5
9637: PUSH
9638: LD_VAR 0 8
9642: PUSH
9643: FOR_IN
9644: IFFALSE 9702
// begin for j in mechanicInside_list do
9646: LD_ADDR_VAR 0 6
9650: PUSH
9651: LD_VAR 0 10
9655: PUSH
9656: FOR_IN
9657: IFFALSE 9698
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9659: LD_VAR 0 8
9663: PPUSH
9664: LD_VAR 0 2
9668: PPUSH
9669: CALL_OW 113
// AddComExitVehicle ( j ) ;
9673: LD_VAR 0 6
9677: PPUSH
9678: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9682: LD_VAR 0 6
9686: PPUSH
9687: LD_VAR 0 5
9691: PPUSH
9692: CALL_OW 189
// end ;
9696: GO 9656
9698: POP
9699: POP
// end ;
9700: GO 9643
9702: POP
9703: POP
// end ; if emptyVehicle_list > 0 then
9704: LD_VAR 0 9
9708: PUSH
9709: LD_INT 0
9711: GREATER
9712: IFFALSE 9762
// begin for i in emptyVehicle_list do
9714: LD_ADDR_VAR 0 5
9718: PUSH
9719: LD_VAR 0 9
9723: PUSH
9724: FOR_IN
9725: IFFALSE 9760
// begin for j in mechanicOutside_list do
9727: LD_ADDR_VAR 0 6
9731: PUSH
9732: LD_VAR 0 11
9736: PUSH
9737: FOR_IN
9738: IFFALSE 9756
// begin AddComEnterUnit ( j , i ) ;
9740: LD_VAR 0 6
9744: PPUSH
9745: LD_VAR 0 5
9749: PPUSH
9750: CALL_OW 180
// end ;
9754: GO 9737
9756: POP
9757: POP
// end ;
9758: GO 9724
9760: POP
9761: POP
// end ; if VehicleOK_list > 0 then
9762: LD_VAR 0 7
9766: PUSH
9767: LD_INT 0
9769: GREATER
9770: IFFALSE 9804
// begin for i in VehicleOK_list do
9772: LD_ADDR_VAR 0 5
9776: PUSH
9777: LD_VAR 0 7
9781: PUSH
9782: FOR_IN
9783: IFFALSE 9802
// ComAgressiveMove ( i , 110 , 29 ) ;
9785: LD_VAR 0 5
9789: PPUSH
9790: LD_INT 110
9792: PPUSH
9793: LD_INT 29
9795: PPUSH
9796: CALL_OW 114
9800: GO 9782
9802: POP
9803: POP
// end ; end ;
9804: LD_VAR 0 4
9808: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9809: LD_INT 0
9811: PPUSH
9812: PPUSH
9813: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9814: LD_VAR 0 1
9818: PPUSH
9819: LD_INT 22
9821: PUSH
9822: LD_VAR 0 2
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: LD_INT 2
9833: PUSH
9834: LD_INT 21
9836: PUSH
9837: LD_INT 2
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: PUSH
9844: LD_INT 21
9846: PUSH
9847: LD_INT 1
9849: PUSH
9850: EMPTY
9851: LIST
9852: LIST
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: LIST
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PPUSH
9863: CALL_OW 70
9867: PUSH
9868: LD_VAR 0 5
9872: GREATER
9873: IFFALSE 10005
// begin for i in defendersList do
9875: LD_ADDR_VAR 0 7
9879: PUSH
9880: LD_VAR 0 3
9884: PUSH
9885: FOR_IN
9886: IFFALSE 10001
// begin AddComExitBuilding ( i ) ;
9888: LD_VAR 0 7
9892: PPUSH
9893: CALL_OW 182
// wait ( 0 0$1 ) ;
9897: LD_INT 35
9899: PPUSH
9900: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
9904: LD_ADDR_VAR 0 8
9908: PUSH
9909: LD_VAR 0 1
9913: PPUSH
9914: LD_INT 22
9916: PUSH
9917: LD_VAR 0 2
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: PUSH
9926: LD_INT 2
9928: PUSH
9929: LD_INT 21
9931: PUSH
9932: LD_INT 2
9934: PUSH
9935: EMPTY
9936: LIST
9937: LIST
9938: PUSH
9939: LD_INT 21
9941: PUSH
9942: LD_INT 1
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: LIST
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: PPUSH
9958: CALL_OW 70
9962: PUSH
9963: FOR_IN
9964: IFFALSE 9997
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
9966: LD_VAR 0 7
9970: PPUSH
9971: LD_VAR 0 8
9975: PPUSH
9976: CALL_OW 250
9980: PPUSH
9981: LD_VAR 0 8
9985: PPUSH
9986: CALL_OW 251
9990: PPUSH
9991: CALL_OW 174
9995: GO 9963
9997: POP
9998: POP
// end ;
9999: GO 9885
10001: POP
10002: POP
// end else
10003: GO 10036
// begin for i in defendersList do
10005: LD_ADDR_VAR 0 7
10009: PUSH
10010: LD_VAR 0 3
10014: PUSH
10015: FOR_IN
10016: IFFALSE 10034
// ComEnterUnit ( i , build ) ;
10018: LD_VAR 0 7
10022: PPUSH
10023: LD_VAR 0 4
10027: PPUSH
10028: CALL_OW 120
10032: GO 10015
10034: POP
10035: POP
// end ; end ;
10036: LD_VAR 0 6
10040: RET
// export function RussianTrap ; var i ; begin
10041: LD_INT 0
10043: PPUSH
10044: PPUSH
// if GetSide ( Brian ) = 4 then
10045: LD_EXP 6
10049: PPUSH
10050: CALL_OW 255
10054: PUSH
10055: LD_INT 4
10057: EQUAL
10058: IFFALSE 10081
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10060: LD_EXP 6
10064: PUSH
10065: LD_EXP 7
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: PPUSH
10074: LD_INT 0
10076: PPUSH
10077: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10081: LD_ADDR_VAR 0 2
10085: PUSH
10086: LD_INT 22
10088: PUSH
10089: LD_INT 3
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PUSH
10096: LD_INT 21
10098: PUSH
10099: LD_INT 1
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PPUSH
10110: CALL_OW 69
10114: PUSH
10115: FOR_IN
10116: IFFALSE 10226
// begin ComExitBuilding ( i ) ;
10118: LD_VAR 0 2
10122: PPUSH
10123: CALL_OW 122
// wait ( 0 0$1 ) ;
10127: LD_INT 35
10129: PPUSH
10130: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10134: LD_VAR 0 2
10138: PPUSH
10139: LD_INT 120
10141: PPUSH
10142: LD_INT 56
10144: PPUSH
10145: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10149: LD_VAR 0 2
10153: PPUSH
10154: LD_INT 111
10156: PPUSH
10157: LD_INT 37
10159: PPUSH
10160: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10164: LD_INT 33
10166: PPUSH
10167: CALL_OW 255
10171: PUSH
10172: LD_INT 3
10174: EQUAL
10175: PUSH
10176: LD_INT 33
10178: PPUSH
10179: CALL_OW 302
10183: AND
10184: IFFALSE 10200
// begin AddComEnterUnit ( i , arm2 ) ;
10186: LD_VAR 0 2
10190: PPUSH
10191: LD_INT 33
10193: PPUSH
10194: CALL_OW 180
// end else
10198: GO 10224
// begin AddComCrawl ( i ) ;
10200: LD_VAR 0 2
10204: PPUSH
10205: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10209: LD_VAR 0 2
10213: PPUSH
10214: LD_INT 109
10216: PPUSH
10217: LD_INT 30
10219: PPUSH
10220: CALL_OW 174
// end ; end ;
10224: GO 10115
10226: POP
10227: POP
// end ;
10228: LD_VAR 0 1
10232: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10233: LD_INT 0
10235: PPUSH
10236: PPUSH
10237: PPUSH
10238: PPUSH
10239: PPUSH
// nearest_dist = 1000 ;
10240: LD_ADDR_VAR 0 4
10244: PUSH
10245: LD_INT 1000
10247: ST_TO_ADDR
// nearest_un = un ;
10248: LD_ADDR_VAR 0 5
10252: PUSH
10253: LD_VAR 0 1
10257: ST_TO_ADDR
// for sold in units do
10258: LD_ADDR_VAR 0 6
10262: PUSH
10263: LD_VAR 0 2
10267: PUSH
10268: FOR_IN
10269: IFFALSE 10325
// begin dist = GetDistUnits ( un , sold ) ;
10271: LD_ADDR_VAR 0 7
10275: PUSH
10276: LD_VAR 0 1
10280: PPUSH
10281: LD_VAR 0 6
10285: PPUSH
10286: CALL_OW 296
10290: ST_TO_ADDR
// if dist < nearest_dist then
10291: LD_VAR 0 7
10295: PUSH
10296: LD_VAR 0 4
10300: LESS
10301: IFFALSE 10323
// begin nearest_un = sold ;
10303: LD_ADDR_VAR 0 5
10307: PUSH
10308: LD_VAR 0 6
10312: ST_TO_ADDR
// nearest_dist = dist ;
10313: LD_ADDR_VAR 0 4
10317: PUSH
10318: LD_VAR 0 7
10322: ST_TO_ADDR
// end ; end ;
10323: GO 10268
10325: POP
10326: POP
// result := nearest_un ;
10327: LD_ADDR_VAR 0 3
10331: PUSH
10332: LD_VAR 0 5
10336: ST_TO_ADDR
// end ;
10337: LD_VAR 0 3
10341: RET
// export function PrepareDifficulty ; begin
10342: LD_INT 0
10344: PPUSH
// if Difficulty = 1 then
10345: LD_OWVAR 67
10349: PUSH
10350: LD_INT 1
10352: EQUAL
10353: IFFALSE 10416
// begin RemoveUnit ( brw2 ) ;
10355: LD_INT 9
10357: PPUSH
10358: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10362: LD_INT 30
10364: PPUSH
10365: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10369: LD_INT 52
10371: PPUSH
10372: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10376: LD_INT 63
10378: PPUSH
10379: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10383: LD_INT 5
10385: PUSH
10386: LD_INT 4
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PPUSH
10393: LD_INT 60
10395: PPUSH
10396: CALL_OW 240
// RuSoldMinLevel = 0 ;
10400: LD_ADDR_EXP 13
10404: PUSH
10405: LD_INT 0
10407: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10408: LD_ADDR_EXP 14
10412: PUSH
10413: LD_INT 1
10415: ST_TO_ADDR
// end ; if Difficulty = 2 then
10416: LD_OWVAR 67
10420: PUSH
10421: LD_INT 2
10423: EQUAL
10424: IFFALSE 10466
// begin RemoveUnit ( brw4 ) ;
10426: LD_INT 52
10428: PPUSH
10429: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10433: LD_INT 5
10435: PUSH
10436: LD_INT 4
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: PPUSH
10443: LD_INT 50
10445: PPUSH
10446: CALL_OW 240
// RuSoldMinLevel = 1 ;
10450: LD_ADDR_EXP 13
10454: PUSH
10455: LD_INT 1
10457: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10458: LD_ADDR_EXP 14
10462: PUSH
10463: LD_INT 2
10465: ST_TO_ADDR
// end ; if Difficulty = 3 then
10466: LD_OWVAR 67
10470: PUSH
10471: LD_INT 3
10473: EQUAL
10474: IFFALSE 10509
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10476: LD_INT 5
10478: PUSH
10479: LD_INT 4
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PPUSH
10486: LD_INT 40
10488: PPUSH
10489: CALL_OW 240
// RuSoldMinLevel = 2 ;
10493: LD_ADDR_EXP 13
10497: PUSH
10498: LD_INT 2
10500: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10501: LD_ADDR_EXP 14
10505: PUSH
10506: LD_INT 3
10508: ST_TO_ADDR
// end ; end ;
10509: LD_VAR 0 1
10513: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10514: LD_INT 0
10516: PPUSH
10517: PPUSH
10518: PPUSH
// tmp = [ ] ;
10519: LD_ADDR_VAR 0 5
10523: PUSH
10524: EMPTY
10525: ST_TO_ADDR
// if not vehicles then
10526: LD_VAR 0 1
10530: NOT
10531: IFFALSE 10535
// exit ;
10533: GO 10652
// for i in vehicles do
10535: LD_ADDR_VAR 0 4
10539: PUSH
10540: LD_VAR 0 1
10544: PUSH
10545: FOR_IN
10546: IFFALSE 10636
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10548: LD_ADDR_VAR 0 5
10552: PUSH
10553: LD_VAR 0 5
10557: PPUSH
10558: LD_INT 1
10560: PPUSH
10561: LD_VAR 0 4
10565: PPUSH
10566: CALL_OW 265
10570: PUSH
10571: LD_VAR 0 4
10575: PPUSH
10576: CALL_OW 262
10580: PUSH
10581: LD_VAR 0 4
10585: PPUSH
10586: CALL_OW 263
10590: PUSH
10591: LD_VAR 0 4
10595: PPUSH
10596: CALL_OW 264
10600: PUSH
10601: LD_VAR 0 4
10605: PPUSH
10606: CALL_OW 261
10610: PUSH
10611: LD_VAR 0 4
10615: PPUSH
10616: CALL_OW 256
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: PPUSH
10629: CALL_OW 2
10633: ST_TO_ADDR
// end ;
10634: GO 10545
10636: POP
10637: POP
// SaveVariable ( tmp , ident ) ;
10638: LD_VAR 0 5
10642: PPUSH
10643: LD_VAR 0 2
10647: PPUSH
10648: CALL_OW 39
// end ; end_of_file
10652: LD_VAR 0 3
10656: RET
// export function PrepareHeroes ; begin
10657: LD_INT 0
10659: PPUSH
// uc_side = 1 ;
10660: LD_ADDR_OWVAR 20
10664: PUSH
10665: LD_INT 1
10667: ST_TO_ADDR
// JMM = CreateCharacter ( 01_JMM ) ;
10668: LD_ADDR_EXP 1
10672: PUSH
10673: LD_STRING 01_JMM
10675: PPUSH
10676: CALL_OW 34
10680: ST_TO_ADDR
// SetLives ( JMM , LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ) ;
10681: LD_EXP 1
10685: PPUSH
10686: LD_STRING 01_JMMLifePoints_1
10688: PPUSH
10689: LD_INT 1000
10691: PPUSH
10692: CALL_OW 30
10696: PPUSH
10697: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10701: LD_ADDR_EXP 9
10705: PUSH
10706: LD_STRING Powell
10708: PPUSH
10709: CALL_OW 25
10713: ST_TO_ADDR
// Bobby = CreateCharacter ( 01_Bobby ) ;
10714: LD_ADDR_EXP 2
10718: PUSH
10719: LD_STRING 01_Bobby
10721: PPUSH
10722: CALL_OW 34
10726: ST_TO_ADDR
// if Bobby then
10727: LD_EXP 2
10731: IFFALSE 10753
// SetLives ( Bobby , LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ) ;
10733: LD_EXP 2
10737: PPUSH
10738: LD_STRING 01_BobbyLifePoints_1
10740: PPUSH
10741: LD_INT 1000
10743: PPUSH
10744: CALL_OW 30
10748: PPUSH
10749: CALL_OW 234
// Cyrus = CreateCharacter ( 01_Cyrus ) ;
10753: LD_ADDR_EXP 3
10757: PUSH
10758: LD_STRING 01_Cyrus
10760: PPUSH
10761: CALL_OW 34
10765: ST_TO_ADDR
// if Cyrus then
10766: LD_EXP 3
10770: IFFALSE 10792
// SetLives ( Cyrus , LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ) ;
10772: LD_EXP 3
10776: PPUSH
10777: LD_STRING 01_CyrusLifePoints_1
10779: PPUSH
10780: LD_INT 1000
10782: PPUSH
10783: CALL_OW 30
10787: PPUSH
10788: CALL_OW 234
// Khatam = NewCharacter ( Khatam ) ;
10792: LD_ADDR_EXP 5
10796: PUSH
10797: LD_STRING Khatam
10799: PPUSH
10800: CALL_OW 25
10804: ST_TO_ADDR
// uc_side = 4 ;
10805: LD_ADDR_OWVAR 20
10809: PUSH
10810: LD_INT 4
10812: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10813: LD_ADDR_EXP 4
10817: PUSH
10818: LD_STRING Lisa
10820: PPUSH
10821: CALL_OW 25
10825: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10826: LD_EXP 1
10830: PPUSH
10831: LD_INT 3
10833: PPUSH
10834: LD_INT 0
10836: PPUSH
10837: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10841: LD_EXP 2
10845: PPUSH
10846: LD_INT 3
10848: PPUSH
10849: LD_INT 0
10851: PPUSH
10852: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10856: LD_EXP 3
10860: PPUSH
10861: LD_INT 3
10863: PPUSH
10864: LD_INT 0
10866: PPUSH
10867: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10871: LD_EXP 4
10875: PPUSH
10876: LD_INT 5
10878: PPUSH
10879: LD_INT 0
10881: PPUSH
10882: CALL_OW 49
// ComCrawl ( Lisa ) ;
10886: LD_EXP 4
10890: PPUSH
10891: CALL_OW 137
// end ;
10895: LD_VAR 0 1
10899: RET
// export function PrepareLisSquad ; var i , un ; begin
10900: LD_INT 0
10902: PPUSH
10903: PPUSH
10904: PPUSH
// uc_side = 4 ;
10905: LD_ADDR_OWVAR 20
10909: PUSH
10910: LD_INT 4
10912: ST_TO_ADDR
// uc_nation = 1 ;
10913: LD_ADDR_OWVAR 21
10917: PUSH
10918: LD_INT 1
10920: ST_TO_ADDR
// hc_class := 2 ;
10921: LD_ADDR_OWVAR 28
10925: PUSH
10926: LD_INT 2
10928: ST_TO_ADDR
// hc_sex := sex_male ;
10929: LD_ADDR_OWVAR 27
10933: PUSH
10934: LD_INT 1
10936: ST_TO_ADDR
// hc_gallery :=  ;
10937: LD_ADDR_OWVAR 33
10941: PUSH
10942: LD_STRING 
10944: ST_TO_ADDR
// hc_name :=  ;
10945: LD_ADDR_OWVAR 26
10949: PUSH
10950: LD_STRING 
10952: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
10953: LD_ADDR_OWVAR 30
10957: PUSH
10958: LD_INT 0
10960: PUSH
10961: LD_INT 1
10963: PUSH
10964: LD_INT 0
10966: PUSH
10967: LD_INT 0
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
10976: LD_ADDR_OWVAR 31
10980: PUSH
10981: LD_INT 1
10983: PUSH
10984: LD_INT 2
10986: PUSH
10987: LD_INT 0
10989: PUSH
10990: LD_INT 0
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: ST_TO_ADDR
// un := CreateHuman ;
10999: LD_ADDR_VAR 0 3
11003: PUSH
11004: CALL_OW 44
11008: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11009: LD_VAR 0 3
11013: PPUSH
11014: LD_INT 6
11016: PPUSH
11017: LD_INT 0
11019: PPUSH
11020: CALL_OW 49
// hc_sex := sex_female ;
11024: LD_ADDR_OWVAR 27
11028: PUSH
11029: LD_INT 2
11031: ST_TO_ADDR
// hc_gallery :=  ;
11032: LD_ADDR_OWVAR 33
11036: PUSH
11037: LD_STRING 
11039: ST_TO_ADDR
// hc_name :=  ;
11040: LD_ADDR_OWVAR 26
11044: PUSH
11045: LD_STRING 
11047: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11048: LD_ADDR_OWVAR 30
11052: PUSH
11053: LD_INT 0
11055: PUSH
11056: LD_INT 0
11058: PUSH
11059: LD_INT 0
11061: PUSH
11062: LD_INT 1
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11071: LD_ADDR_OWVAR 31
11075: PUSH
11076: LD_INT 0
11078: PUSH
11079: LD_INT 1
11081: PUSH
11082: LD_INT 0
11084: PUSH
11085: LD_INT 1
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: ST_TO_ADDR
// un := CreateHuman ;
11094: LD_ADDR_VAR 0 3
11098: PUSH
11099: CALL_OW 44
11103: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11104: LD_VAR 0 3
11108: PPUSH
11109: LD_INT 6
11111: PPUSH
11112: LD_INT 0
11114: PPUSH
11115: CALL_OW 49
// if not Bobby and not Cyrus then
11119: LD_EXP 2
11123: NOT
11124: PUSH
11125: LD_EXP 3
11129: NOT
11130: AND
11131: IFFALSE 11236
// begin hc_class := 1 ;
11133: LD_ADDR_OWVAR 28
11137: PUSH
11138: LD_INT 1
11140: ST_TO_ADDR
// hc_sex := sex_male ;
11141: LD_ADDR_OWVAR 27
11145: PUSH
11146: LD_INT 1
11148: ST_TO_ADDR
// hc_gallery :=  ;
11149: LD_ADDR_OWVAR 33
11153: PUSH
11154: LD_STRING 
11156: ST_TO_ADDR
// hc_name :=  ;
11157: LD_ADDR_OWVAR 26
11161: PUSH
11162: LD_STRING 
11164: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11165: LD_ADDR_OWVAR 30
11169: PUSH
11170: LD_INT 2
11172: PUSH
11173: LD_INT 3
11175: PUSH
11176: LD_INT 1
11178: PUSH
11179: LD_INT 0
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11188: LD_ADDR_OWVAR 31
11192: PUSH
11193: LD_INT 2
11195: PUSH
11196: LD_INT 3
11198: PUSH
11199: LD_INT 1
11201: PUSH
11202: LD_INT 0
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: ST_TO_ADDR
// un := CreateHuman ;
11211: LD_ADDR_VAR 0 3
11215: PUSH
11216: CALL_OW 44
11220: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11221: LD_VAR 0 3
11225: PPUSH
11226: LD_INT 31
11228: PPUSH
11229: LD_INT 0
11231: PPUSH
11232: CALL_OW 49
// end ; InitHc ;
11236: CALL_OW 19
// end ;
11240: LD_VAR 0 1
11244: RET
// export function PrepareOtherAmericans ; begin
11245: LD_INT 0
11247: PPUSH
// uc_side = 4 ;
11248: LD_ADDR_OWVAR 20
11252: PUSH
11253: LD_INT 4
11255: ST_TO_ADDR
// uc_nation = 1 ;
11256: LD_ADDR_OWVAR 21
11260: PUSH
11261: LD_INT 1
11263: ST_TO_ADDR
// hc_gallery =  ;
11264: LD_ADDR_OWVAR 33
11268: PUSH
11269: LD_STRING 
11271: ST_TO_ADDR
// hc_name = Brian Garvin ;
11272: LD_ADDR_OWVAR 26
11276: PUSH
11277: LD_STRING Brian Garvin
11279: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
11280: LD_INT 1
11282: PPUSH
11283: LD_INT 1
11285: PPUSH
11286: LD_INT 1
11288: PPUSH
11289: LD_INT 2
11291: PPUSH
11292: CALL_OW 12
11296: PPUSH
11297: CALL_OW 380
// Brian = CreateHuman ;
11301: LD_ADDR_EXP 6
11305: PUSH
11306: CALL_OW 44
11310: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11311: LD_EXP 6
11315: PPUSH
11316: LD_INT 10
11318: PPUSH
11319: LD_INT 0
11321: PPUSH
11322: CALL_OW 49
// hc_name = Jerry White ;
11326: LD_ADDR_OWVAR 26
11330: PUSH
11331: LD_STRING Jerry White
11333: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11334: LD_INT 1
11336: PPUSH
11337: LD_INT 3
11339: PPUSH
11340: LD_INT 1
11342: PPUSH
11343: LD_INT 2
11345: PPUSH
11346: CALL_OW 12
11350: PPUSH
11351: CALL_OW 380
// Jerry = CreateHuman ;
11355: LD_ADDR_EXP 7
11359: PUSH
11360: CALL_OW 44
11364: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11365: LD_EXP 7
11369: PPUSH
11370: LD_INT 10
11372: PPUSH
11373: LD_INT 0
11375: PPUSH
11376: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11380: LD_EXP 6
11384: PUSH
11385: LD_EXP 7
11389: PUSH
11390: EMPTY
11391: LIST
11392: LIST
11393: PPUSH
11394: CALL_OW 140
// end ;
11398: LD_VAR 0 1
11402: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11403: LD_INT 0
11405: PPUSH
11406: PPUSH
11407: PPUSH
// for i = 1 to 6 do
11408: LD_ADDR_VAR 0 2
11412: PUSH
11413: DOUBLE
11414: LD_INT 1
11416: DEC
11417: ST_TO_ADDR
11418: LD_INT 6
11420: PUSH
11421: FOR_TO
11422: IFFALSE 11516
// begin uc_side = 4 ;
11424: LD_ADDR_OWVAR 20
11428: PUSH
11429: LD_INT 4
11431: ST_TO_ADDR
// uc_nation = 1 ;
11432: LD_ADDR_OWVAR 21
11436: PUSH
11437: LD_INT 1
11439: ST_TO_ADDR
// hc_gallery =  ;
11440: LD_ADDR_OWVAR 33
11444: PUSH
11445: LD_STRING 
11447: ST_TO_ADDR
// hc_name =  ;
11448: LD_ADDR_OWVAR 26
11452: PUSH
11453: LD_STRING 
11455: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11456: LD_INT 0
11458: PPUSH
11459: LD_INT 1
11461: PPUSH
11462: LD_INT 4
11464: PPUSH
11465: CALL_OW 12
11469: PPUSH
11470: LD_INT 1
11472: PPUSH
11473: CALL_OW 380
// un = CreateHuman ;
11477: LD_ADDR_VAR 0 3
11481: PUSH
11482: CALL_OW 44
11486: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11487: LD_VAR 0 3
11491: PPUSH
11492: LD_INT 16
11494: PPUSH
11495: LD_INT 0
11497: PPUSH
11498: CALL_OW 49
// SetLives ( un , 1 ) ;
11502: LD_VAR 0 3
11506: PPUSH
11507: LD_INT 1
11509: PPUSH
11510: CALL_OW 234
// end ;
11514: GO 11421
11516: POP
11517: POP
// DyingSold = CreateHuman ;
11518: LD_ADDR_EXP 34
11522: PUSH
11523: CALL_OW 44
11527: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11528: LD_EXP 34
11532: PPUSH
11533: LD_INT 16
11535: PPUSH
11536: LD_INT 0
11538: PPUSH
11539: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11543: LD_EXP 34
11547: PPUSH
11548: LD_INT 250
11550: PPUSH
11551: CALL_OW 234
// end ; end_of_file
11555: LD_VAR 0 1
11559: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11560: LD_INT 0
11562: PPUSH
11563: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] ] ) ;
11564: LD_ADDR_VAR 0 2
11568: PUSH
11569: LD_INT 22
11571: PUSH
11572: LD_INT 1
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: LD_INT 23
11581: PUSH
11582: LD_INT 1
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PUSH
11589: LD_INT 25
11591: PUSH
11592: LD_INT 2
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: LIST
11603: PPUSH
11604: CALL_OW 69
11608: ST_TO_ADDR
// uc_side = 6 ;
11609: LD_ADDR_OWVAR 20
11613: PUSH
11614: LD_INT 6
11616: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11617: LD_ADDR_EXP 8
11621: PUSH
11622: LD_STRING Mikhail
11624: PPUSH
11625: CALL_OW 25
11629: ST_TO_ADDR
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 3 , true ) ;
11630: LD_EXP 8
11634: PPUSH
11635: LD_VAR 0 2
11639: PUSH
11640: LD_INT 1
11642: ARRAY
11643: PPUSH
11644: CALL_OW 250
11648: PPUSH
11649: LD_VAR 0 2
11653: PUSH
11654: LD_INT 1
11656: ARRAY
11657: PPUSH
11658: CALL_OW 251
11662: PPUSH
11663: LD_INT 3
11665: PPUSH
11666: LD_INT 1
11668: PPUSH
11669: CALL_OW 50
// end ;
11673: LD_VAR 0 1
11677: RET
// export function PrepareRussianCommander ; begin
11678: LD_INT 0
11680: PPUSH
// uc_side = 3 ;
11681: LD_ADDR_OWVAR 20
11685: PUSH
11686: LD_INT 3
11688: ST_TO_ADDR
// uc_nation = 3 ;
11689: LD_ADDR_OWVAR 21
11693: PUSH
11694: LD_INT 3
11696: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11697: LD_ADDR_EXP 19
11701: PUSH
11702: LD_STRING Natasza
11704: PPUSH
11705: CALL_OW 25
11709: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11710: LD_EXP 19
11714: PPUSH
11715: LD_INT 24
11717: PPUSH
11718: LD_INT 0
11720: PPUSH
11721: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11725: LD_EXP 19
11729: PPUSH
11730: LD_INT 56
11732: PPUSH
11733: LD_INT 16
11735: PPUSH
11736: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11740: LD_ADDR_EXP 24
11744: PUSH
11745: LD_EXP 24
11749: PUSH
11750: LD_EXP 19
11754: ADD
11755: ST_TO_ADDR
// end ;
11756: LD_VAR 0 1
11760: RET
// export function PrepareSouthBase ; var i , un ; begin
11761: LD_INT 0
11763: PPUSH
11764: PPUSH
11765: PPUSH
// for i = 1 to 2 do
11766: LD_ADDR_VAR 0 2
11770: PUSH
11771: DOUBLE
11772: LD_INT 1
11774: DEC
11775: ST_TO_ADDR
11776: LD_INT 2
11778: PUSH
11779: FOR_TO
11780: IFFALSE 11889
// begin uc_side = 3 ;
11782: LD_ADDR_OWVAR 20
11786: PUSH
11787: LD_INT 3
11789: ST_TO_ADDR
// uc_nation = 3 ;
11790: LD_ADDR_OWVAR 21
11794: PUSH
11795: LD_INT 3
11797: ST_TO_ADDR
// hc_gallery =  ;
11798: LD_ADDR_OWVAR 33
11802: PUSH
11803: LD_STRING 
11805: ST_TO_ADDR
// hc_name =  ;
11806: LD_ADDR_OWVAR 26
11810: PUSH
11811: LD_STRING 
11813: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11814: LD_INT 1
11816: PPUSH
11817: LD_INT 1
11819: PPUSH
11820: LD_EXP 13
11824: PPUSH
11825: LD_EXP 14
11829: PPUSH
11830: CALL_OW 12
11834: PPUSH
11835: CALL_OW 380
// hc_importance = 0 ;
11839: LD_ADDR_OWVAR 32
11843: PUSH
11844: LD_INT 0
11846: ST_TO_ADDR
// un = CreateHuman ;
11847: LD_ADDR_VAR 0 3
11851: PUSH
11852: CALL_OW 44
11856: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11857: LD_VAR 0 3
11861: PPUSH
11862: LD_INT 11
11864: PPUSH
11865: LD_INT 0
11867: PPUSH
11868: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
11872: LD_VAR 0 3
11876: PPUSH
11877: LD_INT 111
11879: PPUSH
11880: LD_INT 38
11882: PPUSH
11883: CALL_OW 118
// end ;
11887: GO 11779
11889: POP
11890: POP
// for i = 1 to Difficulty do
11891: LD_ADDR_VAR 0 2
11895: PUSH
11896: DOUBLE
11897: LD_INT 1
11899: DEC
11900: ST_TO_ADDR
11901: LD_OWVAR 67
11905: PUSH
11906: FOR_TO
11907: IFFALSE 12008
// begin uc_side = 3 ;
11909: LD_ADDR_OWVAR 20
11913: PUSH
11914: LD_INT 3
11916: ST_TO_ADDR
// uc_nation = 3 ;
11917: LD_ADDR_OWVAR 21
11921: PUSH
11922: LD_INT 3
11924: ST_TO_ADDR
// hc_gallery =  ;
11925: LD_ADDR_OWVAR 33
11929: PUSH
11930: LD_STRING 
11932: ST_TO_ADDR
// hc_name =  ;
11933: LD_ADDR_OWVAR 26
11937: PUSH
11938: LD_STRING 
11940: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11941: LD_INT 0
11943: PPUSH
11944: LD_INT 3
11946: PPUSH
11947: LD_EXP 13
11951: PPUSH
11952: LD_EXP 14
11956: PPUSH
11957: CALL_OW 12
11961: PPUSH
11962: CALL_OW 380
// un = CreateHuman ;
11966: LD_ADDR_VAR 0 3
11970: PUSH
11971: CALL_OW 44
11975: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn2 , false ) ;
11976: LD_VAR 0 3
11980: PPUSH
11981: LD_INT 12
11983: PPUSH
11984: LD_INT 0
11986: PPUSH
11987: CALL_OW 49
// ComTurnXY ( un , 111 , 28 ) ;
11991: LD_VAR 0 3
11995: PPUSH
11996: LD_INT 111
11998: PPUSH
11999: LD_INT 28
12001: PPUSH
12002: CALL_OW 118
// end ;
12006: GO 11906
12008: POP
12009: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
12010: LD_INT 3
12012: PPUSH
12013: LD_INT 3
12015: PPUSH
12016: LD_INT 33
12018: PPUSH
12019: LD_EXP 13
12023: PPUSH
12024: LD_EXP 14
12028: PPUSH
12029: CALL_OW 12
12033: PPUSH
12034: LD_INT 1
12036: PPUSH
12037: LD_INT 1
12039: PUSH
12040: LD_INT 1
12042: PPUSH
12043: LD_INT 2
12045: PPUSH
12046: CALL_OW 12
12050: PUSH
12051: LD_INT 1
12053: PPUSH
12054: LD_INT 2
12056: PPUSH
12057: CALL_OW 12
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: LIST
12066: PUSH
12067: LD_OWVAR 67
12071: ARRAY
12072: PPUSH
12073: CALL 8568 0 6
// for i in UnitsInside ( arm2 ) do
12077: LD_ADDR_VAR 0 2
12081: PUSH
12082: LD_INT 33
12084: PPUSH
12085: CALL_OW 313
12089: PUSH
12090: FOR_IN
12091: IFFALSE 12111
// southBaseDefenders = southBaseDefenders ^ i ;
12093: LD_ADDR_EXP 25
12097: PUSH
12098: LD_EXP 25
12102: PUSH
12103: LD_VAR 0 2
12107: ADD
12108: ST_TO_ADDR
12109: GO 12090
12111: POP
12112: POP
// end ;
12113: LD_VAR 0 1
12117: RET
// export function PrepareNorthBase ; var i , un ; begin
12118: LD_INT 0
12120: PPUSH
12121: PPUSH
12122: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
12123: LD_ADDR_VAR 0 2
12127: PUSH
12128: DOUBLE
12129: LD_INT 1
12131: DEC
12132: ST_TO_ADDR
12133: LD_INT 1
12135: PPUSH
12136: LD_INT 2
12138: PPUSH
12139: CALL_OW 12
12143: PUSH
12144: LD_INT 2
12146: PPUSH
12147: LD_INT 3
12149: PPUSH
12150: CALL_OW 12
12154: PUSH
12155: LD_INT 3
12157: PPUSH
12158: LD_INT 4
12160: PPUSH
12161: CALL_OW 12
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: LIST
12170: PUSH
12171: LD_OWVAR 67
12175: ARRAY
12176: PUSH
12177: FOR_TO
12178: IFFALSE 12264
// begin uc_side = 3 ;
12180: LD_ADDR_OWVAR 20
12184: PUSH
12185: LD_INT 3
12187: ST_TO_ADDR
// uc_nation = 3 ;
12188: LD_ADDR_OWVAR 21
12192: PUSH
12193: LD_INT 3
12195: ST_TO_ADDR
// hc_gallery =  ;
12196: LD_ADDR_OWVAR 33
12200: PUSH
12201: LD_STRING 
12203: ST_TO_ADDR
// hc_name =  ;
12204: LD_ADDR_OWVAR 26
12208: PUSH
12209: LD_STRING 
12211: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12212: LD_INT 0
12214: PPUSH
12215: LD_INT 1
12217: PPUSH
12218: LD_EXP 13
12222: PPUSH
12223: LD_EXP 14
12227: PPUSH
12228: CALL_OW 12
12232: PPUSH
12233: CALL_OW 380
// un = CreateHuman ;
12237: LD_ADDR_VAR 0 3
12241: PUSH
12242: CALL_OW 44
12246: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12247: LD_VAR 0 3
12251: PPUSH
12252: LD_INT 14
12254: PPUSH
12255: LD_INT 0
12257: PPUSH
12258: CALL_OW 49
// end ;
12262: GO 12177
12264: POP
12265: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
12266: LD_INT 3
12268: PPUSH
12269: LD_INT 3
12271: PPUSH
12272: LD_INT 2
12274: PPUSH
12275: LD_EXP 13
12279: PPUSH
12280: LD_EXP 14
12284: PPUSH
12285: CALL_OW 12
12289: PPUSH
12290: LD_INT 1
12292: PPUSH
12293: LD_INT 1
12295: PPUSH
12296: LD_INT 2
12298: PPUSH
12299: CALL_OW 12
12303: PUSH
12304: LD_INT 1
12306: PPUSH
12307: LD_INT 3
12309: PPUSH
12310: CALL_OW 12
12314: PUSH
12315: LD_INT 1
12317: PPUSH
12318: LD_INT 3
12320: PPUSH
12321: CALL_OW 12
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: LIST
12330: PUSH
12331: LD_OWVAR 67
12335: ARRAY
12336: PPUSH
12337: CALL 8568 0 6
// RespawnInside ( 3 , 3 , lab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
12341: LD_INT 3
12343: PPUSH
12344: LD_INT 3
12346: PPUSH
12347: LD_INT 23
12349: PPUSH
12350: LD_EXP 13
12354: PPUSH
12355: LD_EXP 14
12359: PPUSH
12360: CALL_OW 12
12364: PPUSH
12365: LD_INT 4
12367: PPUSH
12368: LD_INT 0
12370: PUSH
12371: LD_INT 1
12373: PUSH
12374: LD_INT 2
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: LIST
12381: PUSH
12382: LD_OWVAR 67
12386: ARRAY
12387: PPUSH
12388: CALL 8568 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12392: LD_INT 3
12394: PPUSH
12395: LD_INT 3
12397: PPUSH
12398: LD_INT 1
12400: PPUSH
12401: LD_EXP 13
12405: PPUSH
12406: LD_EXP 14
12410: PPUSH
12411: CALL_OW 12
12415: PPUSH
12416: LD_INT 2
12418: PPUSH
12419: LD_INT 1
12421: PUSH
12422: LD_INT 2
12424: PUSH
12425: LD_INT 2
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: LIST
12432: PUSH
12433: LD_OWVAR 67
12437: ARRAY
12438: PPUSH
12439: CALL 8568 0 6
// for i in UnitsInside ( arm1 ) do
12443: LD_ADDR_VAR 0 2
12447: PUSH
12448: LD_INT 2
12450: PPUSH
12451: CALL_OW 313
12455: PUSH
12456: FOR_IN
12457: IFFALSE 12477
// northBaseDefenders = northBaseDefenders ^ i ;
12459: LD_ADDR_EXP 24
12463: PUSH
12464: LD_EXP 24
12468: PUSH
12469: LD_VAR 0 2
12473: ADD
12474: ST_TO_ADDR
12475: GO 12456
12477: POP
12478: POP
// end ;
12479: LD_VAR 0 1
12483: RET
// export function PrepareOtherRussians ; var i , un ; begin
12484: LD_INT 0
12486: PPUSH
12487: PPUSH
12488: PPUSH
// for i = 1 to 2 do
12489: LD_ADDR_VAR 0 2
12493: PUSH
12494: DOUBLE
12495: LD_INT 1
12497: DEC
12498: ST_TO_ADDR
12499: LD_INT 2
12501: PUSH
12502: FOR_TO
12503: IFFALSE 12604
// begin uc_side = 3 ;
12505: LD_ADDR_OWVAR 20
12509: PUSH
12510: LD_INT 3
12512: ST_TO_ADDR
// uc_nation = 3 ;
12513: LD_ADDR_OWVAR 21
12517: PUSH
12518: LD_INT 3
12520: ST_TO_ADDR
// hc_gallery =  ;
12521: LD_ADDR_OWVAR 33
12525: PUSH
12526: LD_STRING 
12528: ST_TO_ADDR
// hc_name =  ;
12529: LD_ADDR_OWVAR 26
12533: PUSH
12534: LD_STRING 
12536: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12537: LD_INT 0
12539: PPUSH
12540: LD_INT 1
12542: PPUSH
12543: LD_EXP 13
12547: PPUSH
12548: LD_EXP 14
12552: PPUSH
12553: CALL_OW 12
12557: PPUSH
12558: CALL_OW 380
// un = CreateHuman ;
12562: LD_ADDR_VAR 0 3
12566: PUSH
12567: CALL_OW 44
12571: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12572: LD_VAR 0 3
12576: PPUSH
12577: LD_INT 9
12579: PPUSH
12580: LD_INT 0
12582: PPUSH
12583: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12587: LD_VAR 0 3
12591: PPUSH
12592: LD_INT 80
12594: PPUSH
12595: LD_INT 73
12597: PPUSH
12598: CALL_OW 118
// end ;
12602: GO 12502
12604: POP
12605: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12606: LD_ADDR_VAR 0 2
12610: PUSH
12611: LD_INT 22
12613: PUSH
12614: LD_INT 3
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PUSH
12621: LD_INT 30
12623: PUSH
12624: LD_INT 31
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: PUSH
12631: EMPTY
12632: LIST
12633: LIST
12634: PPUSH
12635: CALL_OW 69
12639: PUSH
12640: FOR_IN
12641: IFFALSE 12669
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12643: LD_EXP 13
12647: PPUSH
12648: LD_EXP 14
12652: PPUSH
12653: CALL_OW 12
12657: PPUSH
12658: LD_VAR 0 2
12662: PPUSH
12663: CALL 8678 0 2
12667: GO 12640
12669: POP
12670: POP
// end ;
12671: LD_VAR 0 1
12675: RET
// export function PrepareCargoBays ; begin
12676: LD_INT 0
12678: PPUSH
// uc_side = 3 ;
12679: LD_ADDR_OWVAR 20
12683: PUSH
12684: LD_INT 3
12686: ST_TO_ADDR
// uc_nation = 3 ;
12687: LD_ADDR_OWVAR 21
12691: PUSH
12692: LD_INT 3
12694: ST_TO_ADDR
// vc_engine = 1 ;
12695: LD_ADDR_OWVAR 39
12699: PUSH
12700: LD_INT 1
12702: ST_TO_ADDR
// vc_control = 1 ;
12703: LD_ADDR_OWVAR 38
12707: PUSH
12708: LD_INT 1
12710: ST_TO_ADDR
// vc_weapon = 51 ;
12711: LD_ADDR_OWVAR 40
12715: PUSH
12716: LD_INT 51
12718: ST_TO_ADDR
// vc_chassis = 22 ;
12719: LD_ADDR_OWVAR 37
12723: PUSH
12724: LD_INT 22
12726: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12727: LD_ADDR_EXP 15
12731: PUSH
12732: CALL_OW 45
12736: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12737: LD_ADDR_EXP 16
12741: PUSH
12742: CALL_OW 45
12746: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12747: LD_EXP 15
12751: PPUSH
12752: LD_INT 13
12754: PPUSH
12755: LD_INT 0
12757: PPUSH
12758: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12762: LD_EXP 16
12766: PPUSH
12767: LD_INT 13
12769: PPUSH
12770: LD_INT 0
12772: PPUSH
12773: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12777: LD_EXP 15
12781: PPUSH
12782: LD_INT 2
12784: PPUSH
12785: LD_INT 70
12787: PUSH
12788: LD_INT 50
12790: PUSH
12791: LD_INT 30
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: LIST
12798: PUSH
12799: LD_OWVAR 67
12803: ARRAY
12804: PPUSH
12805: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12809: LD_EXP 16
12813: PPUSH
12814: LD_INT 2
12816: PPUSH
12817: LD_INT 70
12819: PUSH
12820: LD_INT 50
12822: PUSH
12823: LD_INT 30
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: LIST
12830: PUSH
12831: LD_OWVAR 67
12835: ARRAY
12836: PPUSH
12837: CALL_OW 291
// hc_gallery =  ;
12841: LD_ADDR_OWVAR 33
12845: PUSH
12846: LD_STRING 
12848: ST_TO_ADDR
// hc_name =  ;
12849: LD_ADDR_OWVAR 26
12853: PUSH
12854: LD_STRING 
12856: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12857: LD_INT 1
12859: PPUSH
12860: LD_INT 3
12862: PPUSH
12863: LD_INT 1
12865: PPUSH
12866: LD_INT 2
12868: PPUSH
12869: CALL_OW 12
12873: PPUSH
12874: CALL_OW 380
// driver1 = CreateHuman ;
12878: LD_ADDR_EXP 17
12882: PUSH
12883: CALL_OW 44
12887: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
12888: LD_EXP 17
12892: PPUSH
12893: LD_EXP 15
12897: PPUSH
12898: CALL_OW 52
// hc_name = Nikolai Andreyev ;
12902: LD_ADDR_OWVAR 26
12906: PUSH
12907: LD_STRING Nikolai Andreyev
12909: ST_TO_ADDR
// driver2 = CreateHuman ;
12910: LD_ADDR_EXP 18
12914: PUSH
12915: CALL_OW 44
12919: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
12920: LD_EXP 18
12924: PPUSH
12925: LD_EXP 16
12929: PPUSH
12930: CALL_OW 52
// end ;
12934: LD_VAR 0 1
12938: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
12939: LD_INT 0
12941: PPUSH
12942: PPUSH
12943: PPUSH
12944: PPUSH
12945: PPUSH
12946: PPUSH
12947: PPUSH
// uc_side = 3 ;
12948: LD_ADDR_OWVAR 20
12952: PUSH
12953: LD_INT 3
12955: ST_TO_ADDR
// uc_nation = 3 ;
12956: LD_ADDR_OWVAR 21
12960: PUSH
12961: LD_INT 3
12963: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
12964: LD_ADDR_VAR 0 4
12968: PUSH
12969: DOUBLE
12970: LD_INT 1
12972: DEC
12973: ST_TO_ADDR
12974: LD_VAR 0 1
12978: PUSH
12979: LD_INT 1
12981: PPUSH
12982: LD_INT 3
12984: PPUSH
12985: CALL_OW 12
12989: PLUS
12990: PUSH
12991: FOR_TO
12992: IFFALSE 13169
// begin vc_engine = 1 ;
12994: LD_ADDR_OWVAR 39
12998: PUSH
12999: LD_INT 1
13001: ST_TO_ADDR
// vc_control = 1 ;
13002: LD_ADDR_OWVAR 38
13006: PUSH
13007: LD_INT 1
13009: ST_TO_ADDR
// vc_weapon = 42 ;
13010: LD_ADDR_OWVAR 40
13014: PUSH
13015: LD_INT 42
13017: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
13018: LD_ADDR_OWVAR 37
13022: PUSH
13023: LD_INT 21
13025: PUSH
13026: LD_INT 22
13028: PUSH
13029: LD_INT 22
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: LIST
13036: PUSH
13037: LD_OWVAR 67
13041: ARRAY
13042: ST_TO_ADDR
// veh = CreateVehicle ;
13043: LD_ADDR_VAR 0 5
13047: PUSH
13048: CALL_OW 45
13052: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13053: LD_VAR 0 5
13057: PPUSH
13058: LD_VAR 0 2
13062: PPUSH
13063: LD_INT 0
13065: PPUSH
13066: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13070: LD_ADDR_EXP 26
13074: PUSH
13075: LD_EXP 26
13079: PUSH
13080: LD_VAR 0 5
13084: ADD
13085: ST_TO_ADDR
// hc_gallery =  ;
13086: LD_ADDR_OWVAR 33
13090: PUSH
13091: LD_STRING 
13093: ST_TO_ADDR
// hc_name =  ;
13094: LD_ADDR_OWVAR 26
13098: PUSH
13099: LD_STRING 
13101: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13102: LD_INT 0
13104: PPUSH
13105: LD_INT 3
13107: PPUSH
13108: LD_EXP 13
13112: PPUSH
13113: LD_EXP 14
13117: PPUSH
13118: CALL_OW 12
13122: PPUSH
13123: CALL_OW 380
// un = CreateHuman ;
13127: LD_ADDR_VAR 0 6
13131: PUSH
13132: CALL_OW 44
13136: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13137: LD_VAR 0 6
13141: PPUSH
13142: LD_VAR 0 5
13146: PPUSH
13147: CALL_OW 52
// attackGroup = attackGroup ^ un ;
13151: LD_ADDR_EXP 26
13155: PUSH
13156: LD_EXP 26
13160: PUSH
13161: LD_VAR 0 6
13165: ADD
13166: ST_TO_ADDR
// end ;
13167: GO 12991
13169: POP
13170: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13171: LD_INT 0
13173: PPUSH
13174: LD_INT 2
13176: PPUSH
13177: LD_EXP 13
13181: PPUSH
13182: LD_EXP 14
13186: PPUSH
13187: CALL_OW 12
13191: PPUSH
13192: CALL_OW 380
// un = CreateHuman ;
13196: LD_ADDR_VAR 0 6
13200: PUSH
13201: CALL_OW 44
13205: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13206: LD_ADDR_VAR 0 4
13210: PUSH
13211: DOUBLE
13212: LD_INT 1
13214: DEC
13215: ST_TO_ADDR
13216: LD_VAR 0 1
13220: PUSH
13221: LD_INT 2
13223: PUSH
13224: LD_INT 2
13226: MUL
13227: PLUS
13228: PUSH
13229: FOR_TO
13230: IFFALSE 13318
// begin hc_gallery =  ;
13232: LD_ADDR_OWVAR 33
13236: PUSH
13237: LD_STRING 
13239: ST_TO_ADDR
// hc_name =  ;
13240: LD_ADDR_OWVAR 26
13244: PUSH
13245: LD_STRING 
13247: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13248: LD_INT 1
13250: PPUSH
13251: LD_INT 1
13253: PPUSH
13254: LD_EXP 13
13258: PPUSH
13259: LD_EXP 14
13263: PPUSH
13264: CALL_OW 12
13268: PPUSH
13269: CALL_OW 380
// un = CreateHuman ;
13273: LD_ADDR_VAR 0 6
13277: PUSH
13278: CALL_OW 44
13282: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
13283: LD_VAR 0 6
13287: PPUSH
13288: LD_VAR 0 2
13292: PPUSH
13293: LD_INT 0
13295: PPUSH
13296: CALL_OW 49
// attackGroup = attackGroup ^ un ;
13300: LD_ADDR_EXP 26
13304: PUSH
13305: LD_EXP 26
13309: PUSH
13310: LD_VAR 0 6
13314: ADD
13315: ST_TO_ADDR
// end ;
13316: GO 13229
13318: POP
13319: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13320: LD_ADDR_VAR 0 7
13324: PUSH
13325: LD_INT 26
13327: PPUSH
13328: LD_INT 22
13330: PUSH
13331: LD_INT 3
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PUSH
13338: LD_INT 21
13340: PUSH
13341: LD_INT 1
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: PUSH
13348: LD_INT 26
13350: PUSH
13351: LD_INT 1
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: LIST
13362: PPUSH
13363: CALL_OW 70
13367: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13368: LD_VAR 0 7
13372: PUSH
13373: LD_INT 1
13375: ARRAY
13376: PPUSH
13377: LD_STRING D9-Rus3-1
13379: PPUSH
13380: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13384: LD_VAR 0 7
13388: PUSH
13389: LD_INT 2
13391: ARRAY
13392: PPUSH
13393: LD_STRING D9-Russ-1
13395: PPUSH
13396: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13400: LD_INT 35
13402: PPUSH
13403: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13407: LD_ADDR_VAR 0 4
13411: PUSH
13412: LD_INT 26
13414: PPUSH
13415: LD_INT 22
13417: PUSH
13418: LD_INT 3
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: EMPTY
13426: LIST
13427: PPUSH
13428: CALL_OW 70
13432: PUSH
13433: FOR_IN
13434: IFFALSE 13606
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13436: LD_ADDR_VAR 0 8
13440: PUSH
13441: LD_INT 22
13443: PUSH
13444: LD_INT 1
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PPUSH
13451: CALL_OW 69
13455: PPUSH
13456: LD_VAR 0 4
13460: PPUSH
13461: CALL_OW 74
13465: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13466: LD_ADDR_VAR 0 9
13470: PUSH
13471: LD_INT 22
13473: PUSH
13474: LD_INT 1
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PUSH
13481: LD_INT 2
13483: PUSH
13484: LD_INT 59
13486: PUSH
13487: EMPTY
13488: LIST
13489: PUSH
13490: LD_INT 21
13492: PUSH
13493: LD_INT 1
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 21
13502: PUSH
13503: LD_INT 2
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: EMPTY
13521: LIST
13522: PPUSH
13523: CALL_OW 69
13527: PPUSH
13528: LD_VAR 0 4
13532: PPUSH
13533: CALL_OW 74
13537: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13538: LD_VAR 0 4
13542: PPUSH
13543: LD_VAR 0 8
13547: PPUSH
13548: CALL_OW 296
13552: PUSH
13553: LD_INT 8
13555: PLUS
13556: PUSH
13557: LD_VAR 0 4
13561: PPUSH
13562: LD_VAR 0 9
13566: PPUSH
13567: CALL_OW 296
13571: LESS
13572: IFFALSE 13590
// begin ComAttackUnit ( i , target1 ) ;
13574: LD_VAR 0 4
13578: PPUSH
13579: LD_VAR 0 8
13583: PPUSH
13584: CALL_OW 115
// end else
13588: GO 13604
// begin ComAttackUnit ( i , target2 ) ;
13590: LD_VAR 0 4
13594: PPUSH
13595: LD_VAR 0 9
13599: PPUSH
13600: CALL_OW 115
// end ; end ;
13604: GO 13433
13606: POP
13607: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13608: LD_INT 26
13610: PPUSH
13611: LD_INT 22
13613: PUSH
13614: LD_INT 3
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PUSH
13621: LD_INT 2
13623: PUSH
13624: LD_INT 21
13626: PUSH
13627: LD_INT 1
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PUSH
13634: LD_INT 21
13636: PUSH
13637: LD_INT 2
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: PUSH
13644: LD_INT 59
13646: PUSH
13647: EMPTY
13648: LIST
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: PPUSH
13660: CALL_OW 70
13664: PUSH
13665: LD_INT 0
13667: EQUAL
13668: IFFALSE 13400
// end ; end_of_file
13670: LD_VAR 0 3
13674: RET
// every 0 0$1 do
13675: GO 13677
13677: DISABLE
// begin enable ;
13678: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13679: LD_INT 3
13681: PPUSH
13682: LD_INT 1
13684: PPUSH
13685: LD_INT 22
13687: PPUSH
13688: CALL 8814 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , lab1 ) ;
13692: LD_INT 3
13694: PPUSH
13695: LD_INT 20
13697: PPUSH
13698: LD_INT 22
13700: PPUSH
13701: LD_INT 23
13703: PPUSH
13704: CALL 9060 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13708: LD_INT 3
13710: PPUSH
13711: LD_INT 21
13713: PPUSH
13714: LD_INT 23
13716: PPUSH
13717: CALL 9337 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13721: LD_INT 22
13723: PPUSH
13724: LD_INT 1
13726: PPUSH
13727: LD_EXP 24
13731: PPUSH
13732: LD_INT 2
13734: PPUSH
13735: LD_INT 3
13737: PPUSH
13738: CALL 9809 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13742: LD_INT 23
13744: PPUSH
13745: LD_INT 1
13747: PPUSH
13748: LD_EXP 25
13752: PPUSH
13753: LD_INT 33
13755: PPUSH
13756: LD_INT 1
13758: PPUSH
13759: CALL 9809 0 5
// end ; end_of_file
13763: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13764: LD_VAR 0 1
13768: PPUSH
13769: CALL_OW 255
13773: PUSH
13774: LD_INT 1
13776: EQUAL
13777: PUSH
13778: LD_VAR 0 1
13782: PPUSH
13783: CALL_OW 247
13787: PUSH
13788: LD_INT 1
13790: EQUAL
13791: AND
13792: IFFALSE 13808
// deadsCounter = deadsCounter + 1 ;
13794: LD_ADDR_EXP 31
13798: PUSH
13799: LD_EXP 31
13803: PUSH
13804: LD_INT 1
13806: PLUS
13807: ST_TO_ADDR
// end ;
13808: PPOPN 1
13810: END
// on Command ( comandid ) do var i , j , tmp ;
13811: LD_INT 0
13813: PPUSH
13814: PPUSH
13815: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
13816: LD_ADDR_VAR 0 2
13820: PUSH
13821: LD_INT 22
13823: PUSH
13824: LD_INT 1
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: PUSH
13831: LD_INT 21
13833: PUSH
13834: LD_INT 2
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: PPUSH
13845: CALL_OW 69
13849: PUSH
13850: FOR_IN
13851: IFFALSE 13976
// begin if GetTaskList ( i ) > 0 then
13853: LD_VAR 0 2
13857: PPUSH
13858: CALL_OW 437
13862: PUSH
13863: LD_INT 0
13865: GREATER
13866: IFFALSE 13974
// begin for j = 1 to GetTaskList ( i ) do
13868: LD_ADDR_VAR 0 3
13872: PUSH
13873: DOUBLE
13874: LD_INT 1
13876: DEC
13877: ST_TO_ADDR
13878: LD_VAR 0 2
13882: PPUSH
13883: CALL_OW 437
13887: PUSH
13888: FOR_TO
13889: IFFALSE 13972
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
13891: LD_ADDR_VAR 0 4
13895: PUSH
13896: LD_VAR 0 2
13900: PPUSH
13901: CALL_OW 437
13905: PUSH
13906: LD_VAR 0 3
13910: ARRAY
13911: PUSH
13912: LD_INT 4
13914: ARRAY
13915: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
13916: LD_VAR 0 4
13920: PPUSH
13921: CALL_OW 255
13925: PUSH
13926: LD_INT 3
13928: EQUAL
13929: PUSH
13930: LD_VAR 0 4
13934: PPUSH
13935: CALL_OW 247
13939: PUSH
13940: LD_INT 2
13942: EQUAL
13943: AND
13944: PUSH
13945: LD_VAR 0 4
13949: PPUSH
13950: CALL_OW 264
13954: PUSH
13955: LD_INT 51
13957: EQUAL
13958: AND
13959: IFFALSE 13970
// ComStop ( i ) ;
13961: LD_VAR 0 2
13965: PPUSH
13966: CALL_OW 141
// end ;
13970: GO 13888
13972: POP
13973: POP
// end ; end ;
13974: GO 13850
13976: POP
13977: POP
// end ; end_of_file
13978: PPOPN 4
13980: END
// every 0 0$1 trigger IsDead ( JMM ) do
13981: LD_EXP 1
13985: PPUSH
13986: CALL_OW 301
13990: IFFALSE 14002
13992: GO 13994
13994: DISABLE
// YouLost ( JMM ) ;
13995: LD_STRING JMM
13997: PPUSH
13998: CALL_OW 104
14002: END
// every 0 0$1 trigger IsDead ( dep1 ) or IsDead ( dep2 ) do
14003: LD_INT 1
14005: PPUSH
14006: CALL_OW 301
14010: PUSH
14011: LD_INT 10
14013: PPUSH
14014: CALL_OW 301
14018: OR
14019: IFFALSE 14031
14021: GO 14023
14023: DISABLE
// YouLost ( DepotDestroyed ) ;
14024: LD_STRING DepotDestroyed
14026: PPUSH
14027: CALL_OW 104
14031: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
14032: LD_INT 22
14034: PUSH
14035: LD_INT 1
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: PUSH
14042: LD_INT 21
14044: PUSH
14045: LD_INT 1
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PUSH
14052: LD_INT 25
14054: PUSH
14055: LD_INT 2
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: LIST
14066: PPUSH
14067: CALL_OW 69
14071: PUSH
14072: LD_INT 0
14074: EQUAL
14075: PUSH
14076: LD_INT 22
14078: PUSH
14079: LD_INT 4
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: PUSH
14086: LD_INT 21
14088: PUSH
14089: LD_INT 1
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: PUSH
14096: LD_INT 25
14098: PUSH
14099: LD_INT 2
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: LIST
14110: PPUSH
14111: CALL_OW 69
14115: PUSH
14116: LD_INT 0
14118: EQUAL
14119: AND
14120: PUSH
14121: LD_INT 1
14123: PPUSH
14124: CALL_OW 255
14128: PUSH
14129: LD_INT 3
14131: EQUAL
14132: AND
14133: PUSH
14134: LD_INT 10
14136: PPUSH
14137: CALL_OW 255
14141: PUSH
14142: LD_INT 3
14144: EQUAL
14145: AND
14146: IFFALSE 14158
14148: GO 14150
14150: DISABLE
// YouLost ( Engineer ) ;
14151: LD_STRING Engineer
14153: PPUSH
14154: CALL_OW 104
14158: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14159: LD_INT 1
14161: PPUSH
14162: CALL_OW 255
14166: PUSH
14167: LD_INT 3
14169: EQUAL
14170: PUSH
14171: LD_EXP 27
14175: PUSH
14176: LD_INT 1
14178: EQUAL
14179: AND
14180: IFFALSE 14192
14182: GO 14184
14184: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14185: LD_STRING DepotCaptured
14187: PPUSH
14188: CALL_OW 104
14192: END
// export function PrepareTigers ; var i , un ; begin
14193: LD_INT 0
14195: PPUSH
14196: PPUSH
14197: PPUSH
// for i = 1 to Difficulty do
14198: LD_ADDR_VAR 0 2
14202: PUSH
14203: DOUBLE
14204: LD_INT 1
14206: DEC
14207: ST_TO_ADDR
14208: LD_OWVAR 67
14212: PUSH
14213: FOR_TO
14214: IFFALSE 14349
// begin hc_sex = sex_male ;
14216: LD_ADDR_OWVAR 27
14220: PUSH
14221: LD_INT 1
14223: ST_TO_ADDR
// uc_side = 0 ;
14224: LD_ADDR_OWVAR 20
14228: PUSH
14229: LD_INT 0
14231: ST_TO_ADDR
// uc_nation = nation_nature ;
14232: LD_ADDR_OWVAR 21
14236: PUSH
14237: LD_INT 0
14239: ST_TO_ADDR
// hc_class = class_tiger ;
14240: LD_ADDR_OWVAR 28
14244: PUSH
14245: LD_INT 14
14247: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14248: LD_ADDR_OWVAR 31
14252: PUSH
14253: LD_EXP 14
14257: PUSH
14258: LD_INT 0
14260: PUSH
14261: LD_INT 0
14263: PUSH
14264: LD_INT 0
14266: PUSH
14267: EMPTY
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
14273: LD_ADDR_OWVAR 35
14277: PUSH
14278: LD_INT 30
14280: PPUSH
14281: LD_INT 40
14283: PPUSH
14284: CALL_OW 12
14288: PUSH
14289: LD_INT 40
14291: PPUSH
14292: LD_INT 50
14294: PPUSH
14295: CALL_OW 12
14299: PUSH
14300: LD_INT 50
14302: PPUSH
14303: LD_INT 60
14305: PPUSH
14306: CALL_OW 12
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: LIST
14315: PUSH
14316: LD_OWVAR 67
14320: ARRAY
14321: ST_TO_ADDR
// un = CreateHuman ;
14322: LD_ADDR_VAR 0 3
14326: PUSH
14327: CALL_OW 44
14331: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14332: LD_VAR 0 3
14336: PPUSH
14337: LD_INT 27
14339: PPUSH
14340: LD_INT 0
14342: PPUSH
14343: CALL_OW 49
// end ;
14347: GO 14213
14349: POP
14350: POP
// end ; end_of_file
14351: LD_VAR 0 1
14355: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
14356: LD_INT 1
14358: PPUSH
14359: CALL_OW 255
14363: PUSH
14364: LD_INT 1
14366: EQUAL
14367: PUSH
14368: LD_INT 10
14370: PPUSH
14371: CALL_OW 255
14375: PUSH
14376: LD_INT 1
14378: EQUAL
14379: AND
14380: PUSH
14381: LD_EXP 20
14385: PUSH
14386: LD_INT 1
14388: EQUAL
14389: AND
14390: PUSH
14391: LD_INT 22
14393: PUSH
14394: LD_INT 3
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: PUSH
14401: LD_INT 21
14403: PUSH
14404: LD_INT 2
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: PUSH
14411: LD_INT 34
14413: PUSH
14414: LD_INT 51
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PUSH
14421: LD_INT 3
14423: PUSH
14424: LD_INT 58
14426: PUSH
14427: EMPTY
14428: LIST
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: PPUSH
14440: CALL_OW 69
14444: PUSH
14445: LD_INT 0
14447: EQUAL
14448: AND
14449: IFFALSE 14540
14451: GO 14453
14453: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
14454: LD_INT 9450
14456: PUSH
14457: LD_INT 8400
14459: PUSH
14460: LD_INT 6300
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: LIST
14467: PUSH
14468: LD_OWVAR 67
14472: ARRAY
14473: PPUSH
14474: CALL_OW 67
// if cargoEscape = 1 then
14478: LD_EXP 20
14482: PUSH
14483: LD_INT 1
14485: EQUAL
14486: IFFALSE 14540
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14488: LD_EXP 9
14492: PPUSH
14493: LD_STRING D6-Pow-1
14495: PPUSH
14496: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14500: LD_EXP 1
14504: PPUSH
14505: LD_STRING D6-JMM-1
14507: PPUSH
14508: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14512: LD_EXP 9
14516: PPUSH
14517: LD_STRING D6-Pow-2
14519: PPUSH
14520: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14524: LD_EXP 1
14528: PPUSH
14529: LD_STRING D6-JMM-2
14531: PPUSH
14532: CALL_OW 88
// FinishMission ;
14536: CALL 14748 0 0
// end ; end ;
14540: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
14541: LD_INT 1
14543: PPUSH
14544: CALL_OW 255
14548: PUSH
14549: LD_INT 1
14551: EQUAL
14552: PUSH
14553: LD_INT 10
14555: PPUSH
14556: CALL_OW 255
14560: PUSH
14561: LD_INT 1
14563: EQUAL
14564: AND
14565: PUSH
14566: LD_EXP 20
14570: PUSH
14571: LD_INT 1
14573: GREATER
14574: AND
14575: IFFALSE 14642
14577: GO 14579
14579: DISABLE
14580: LD_INT 0
14582: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
14583: LD_INT 11550
14585: PUSH
14586: LD_INT 10500
14588: PUSH
14589: LD_INT 9450
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: LIST
14596: PUSH
14597: LD_OWVAR 67
14601: ARRAY
14602: PPUSH
14603: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
14607: LD_INT 1
14609: PUSH
14610: LD_INT 2
14612: PUSH
14613: LD_INT 3
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: LIST
14620: PUSH
14621: LD_OWVAR 67
14625: ARRAY
14626: PPUSH
14627: LD_INT 13
14629: PPUSH
14630: CALL 12939 0 2
// lastBattle = 1 ;
14634: LD_ADDR_EXP 27
14638: PUSH
14639: LD_INT 1
14641: ST_TO_ADDR
// end ;
14642: PPOPN 1
14644: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14645: LD_EXP 27
14649: PUSH
14650: LD_INT 1
14652: EQUAL
14653: PUSH
14654: LD_INT 26
14656: PPUSH
14657: LD_INT 22
14659: PUSH
14660: LD_INT 3
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: LD_INT 21
14669: PUSH
14670: LD_INT 1
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PPUSH
14681: CALL_OW 70
14685: PUSH
14686: LD_INT 0
14688: EQUAL
14689: AND
14690: IFFALSE 14747
14692: GO 14694
14694: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14695: LD_EXP 9
14699: PPUSH
14700: LD_STRING D6-Pow-1
14702: PPUSH
14703: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14707: LD_EXP 1
14711: PPUSH
14712: LD_STRING D6-JMM-1
14714: PPUSH
14715: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14719: LD_EXP 9
14723: PPUSH
14724: LD_STRING D6-Pow-2
14726: PPUSH
14727: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14731: LD_EXP 1
14735: PPUSH
14736: LD_STRING D6-JMM-2
14738: PPUSH
14739: CALL_OW 88
// FinishMission ;
14743: CALL 14748 0 0
// end ;
14747: END
// export function FinishMission ; var tmp ; begin
14748: LD_INT 0
14750: PPUSH
14751: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
14752: LD_ADDR_VAR 0 2
14756: PUSH
14757: LD_INT 22
14759: PUSH
14760: LD_INT 1
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: PUSH
14767: LD_INT 21
14769: PUSH
14770: LD_INT 2
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: PUSH
14777: LD_INT 24
14779: PUSH
14780: LD_INT 251
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: LIST
14791: PPUSH
14792: CALL_OW 69
14796: ST_TO_ADDR
// if tmp then
14797: LD_VAR 0 2
14801: IFFALSE 14815
// SaveVehicles ( tmp , 02_tanks_1 ) ;
14803: LD_VAR 0 2
14807: PPUSH
14808: LD_STRING 02_tanks_1
14810: PPUSH
14811: CALL 10514 0 2
// if mikhailStatus = 1 then
14815: LD_EXP 21
14819: PUSH
14820: LD_INT 1
14822: EQUAL
14823: IFFALSE 14837
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
14825: LD_EXP 21
14829: PPUSH
14830: LD_STRING 02_mikhailStatus_1
14832: PPUSH
14833: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
14837: LD_INT 1
14839: PPUSH
14840: CALL_OW 274
14844: PPUSH
14845: LD_INT 1
14847: PPUSH
14848: CALL_OW 275
14852: PPUSH
14853: LD_STRING 02_resources_4
14855: PPUSH
14856: CALL_OW 39
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
14860: LD_INT 1
14862: PPUSH
14863: CALL_OW 274
14867: PPUSH
14868: LD_INT 1
14870: PPUSH
14871: CALL_OW 275
14875: PUSH
14876: LD_INT 200
14878: GREATEREQUAL
14879: IFFALSE 14893
// begin AddMedal ( Cans , 1 ) ;
14881: LD_STRING Cans
14883: PPUSH
14884: LD_INT 1
14886: PPUSH
14887: CALL_OW 101
// end else
14891: GO 14904
// begin AddMedal ( Cans , - 1 ) ;
14893: LD_STRING Cans
14895: PPUSH
14896: LD_INT 1
14898: NEG
14899: PPUSH
14900: CALL_OW 101
// end ; if deadsCounter < 2 then
14904: LD_EXP 31
14908: PUSH
14909: LD_INT 2
14911: LESS
14912: IFFALSE 14926
// begin AddMedal ( Deaths , 1 ) ;
14914: LD_STRING Deaths
14916: PPUSH
14917: LD_INT 1
14919: PPUSH
14920: CALL_OW 101
// end else
14924: GO 14937
// begin AddMedal ( Deaths , - 1 ) ;
14926: LD_STRING Deaths
14928: PPUSH
14929: LD_INT 1
14931: NEG
14932: PPUSH
14933: CALL_OW 101
// end ; if mikhailStatus = 0 then
14937: LD_EXP 21
14941: PUSH
14942: LD_INT 0
14944: EQUAL
14945: IFFALSE 14958
// AddMedal ( Prisoner , - 1 ) ;
14947: LD_STRING Prisoner
14949: PPUSH
14950: LD_INT 1
14952: NEG
14953: PPUSH
14954: CALL_OW 101
// if mikhailStatus = 1 then
14958: LD_EXP 21
14962: PUSH
14963: LD_INT 1
14965: EQUAL
14966: IFFALSE 14978
// AddMedal ( Prisoner , 1 ) ;
14968: LD_STRING Prisoner
14970: PPUSH
14971: LD_INT 1
14973: PPUSH
14974: CALL_OW 101
// if mikhailStatus = 2 then
14978: LD_EXP 21
14982: PUSH
14983: LD_INT 2
14985: EQUAL
14986: IFFALSE 14998
// AddMedal ( Prisoner , 2 ) ;
14988: LD_STRING Prisoner
14990: PPUSH
14991: LD_INT 2
14993: PPUSH
14994: CALL_OW 101
// if mikhailStatus = 3 then
14998: LD_EXP 21
15002: PUSH
15003: LD_INT 3
15005: EQUAL
15006: IFFALSE 15019
// AddMedal ( Prisoner , - 2 ) ;
15008: LD_STRING Prisoner
15010: PPUSH
15011: LD_INT 2
15013: NEG
15014: PPUSH
15015: CALL_OW 101
// GiveMedals ( MAIN ) ;
15019: LD_STRING MAIN
15021: PPUSH
15022: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
15026: LD_INT 22
15028: PUSH
15029: LD_INT 1
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PUSH
15036: LD_INT 23
15038: PUSH
15039: LD_INT 1
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: PUSH
15046: LD_INT 21
15048: PUSH
15049: LD_INT 1
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: LIST
15060: PPUSH
15061: CALL_OW 69
15065: PPUSH
15066: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15070: LD_EXP 1
15074: PPUSH
15075: LD_EXP 33
15079: PUSH
15080: LD_STRING JMM
15082: STR
15083: PPUSH
15084: CALL_OW 38
// if IsOK ( Bobby ) then
15088: LD_EXP 2
15092: PPUSH
15093: CALL_OW 302
15097: IFFALSE 15117
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15099: LD_EXP 2
15103: PPUSH
15104: LD_EXP 33
15108: PUSH
15109: LD_STRING Bobby
15111: STR
15112: PPUSH
15113: CALL_OW 38
// if IsOK ( Cyrus ) then
15117: LD_EXP 3
15121: PPUSH
15122: CALL_OW 302
15126: IFFALSE 15146
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15128: LD_EXP 3
15132: PPUSH
15133: LD_EXP 33
15137: PUSH
15138: LD_STRING Cyrus
15140: STR
15141: PPUSH
15142: CALL_OW 38
// if IsOK ( Lisa ) then
15146: LD_EXP 4
15150: PPUSH
15151: CALL_OW 302
15155: IFFALSE 15175
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15157: LD_EXP 4
15161: PPUSH
15162: LD_EXP 33
15166: PUSH
15167: LD_STRING Lisa
15169: STR
15170: PPUSH
15171: CALL_OW 38
// if IsOK ( Khatam ) then
15175: LD_EXP 5
15179: PPUSH
15180: CALL_OW 302
15184: IFFALSE 15204
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
15186: LD_EXP 5
15190: PPUSH
15191: LD_EXP 33
15195: PUSH
15196: LD_STRING Khatam
15198: STR
15199: PPUSH
15200: CALL_OW 38
// if IsOK ( Brian ) then
15204: LD_EXP 6
15208: PPUSH
15209: CALL_OW 302
15213: IFFALSE 15233
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
15215: LD_EXP 6
15219: PPUSH
15220: LD_EXP 33
15224: PUSH
15225: LD_STRING Brian
15227: STR
15228: PPUSH
15229: CALL_OW 38
// if IsOk ( Jerry ) then
15233: LD_EXP 7
15237: PPUSH
15238: CALL_OW 302
15242: IFFALSE 15262
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
15244: LD_EXP 7
15248: PPUSH
15249: LD_EXP 33
15253: PUSH
15254: LD_STRING Jerry
15256: STR
15257: PPUSH
15258: CALL_OW 38
// if mikhailStatus = 1 then
15262: LD_EXP 21
15266: PUSH
15267: LD_INT 1
15269: EQUAL
15270: IFFALSE 15290
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
15272: LD_EXP 8
15276: PPUSH
15277: LD_EXP 33
15281: PUSH
15282: LD_STRING Mikhail
15284: STR
15285: PPUSH
15286: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
15290: LD_INT 50
15292: PUSH
15293: EMPTY
15294: LIST
15295: PUSH
15296: LD_INT 22
15298: PUSH
15299: LD_INT 1
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: PUSH
15306: LD_INT 21
15308: PUSH
15309: LD_INT 1
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: LIST
15320: PPUSH
15321: CALL_OW 69
15325: PUSH
15326: LD_EXP 1
15330: PUSH
15331: LD_EXP 2
15335: PUSH
15336: LD_EXP 3
15340: PUSH
15341: LD_EXP 4
15345: PUSH
15346: LD_EXP 5
15350: PUSH
15351: LD_EXP 6
15355: PUSH
15356: LD_EXP 7
15360: PUSH
15361: LD_EXP 8
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: DIFF
15376: PPUSH
15377: LD_STRING 02_other_survivors
15379: PPUSH
15380: CALL_OW 38
// YouWin ;
15384: CALL_OW 103
// end ;
15388: LD_VAR 0 1
15392: RET
