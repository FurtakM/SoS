// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses , traitor ; export mission_prefix , debug ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 77 0 0
// if debug then
  19: LD_EXP 35
  23: IFFALSE 40
// begin Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// end ; PrepareDifficulty ;
  40: CALL 10636 0 0
// PrepareRussianCommander ;
  44: CALL 12170 0 0
// PrepareSouthBase ;
  48: CALL 12266 0 0
// PrepareNorthBase ;
  52: CALL 12604 0 0
// PrepareOtherRussians ;
  56: CALL 12999 0 0
// PrepareHeroes ;
  60: CALL 10957 0 0
// PrepareLisSquad ;
  64: CALL 11327 0 0
// PrepareOtherAmericans ;
  68: CALL 11640 0 0
// Action ;
  72: CALL 250 0 0
// end ;
  76: END
// function Init ; begin
  77: LD_INT 0
  79: PPUSH
// debug := false ;
  80: LD_ADDR_EXP 35
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// mission_prefix := 02_ ;
  88: LD_ADDR_EXP 34
  92: PUSH
  93: LD_STRING 02_
  95: ST_TO_ADDR
// RuSoldMinLevel := 0 ;
  96: LD_ADDR_EXP 13
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// RuSoldMaxLevel := 0 ;
 104: LD_ADDR_EXP 14
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// hpJMM := 0 ;
 112: LD_ADDR_EXP 10
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// hpBobby := 0 ;
 120: LD_ADDR_EXP 11
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// hpCyrus := 0 ;
 128: LD_ADDR_EXP 12
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// cargoEscape := 0 ;
 136: LD_ADDR_EXP 20
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// mikhailStatus := 0 ;
 144: LD_ADDR_EXP 21
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// mikhailInBase := 0 ;
 152: LD_ADDR_EXP 22
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// mikhailDepot := 0 ;
 160: LD_ADDR_EXP 23
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// tigersRespawn := 0 ;
 168: LD_ADDR_EXP 30
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// cargoRespawn := 0 ;
 176: LD_ADDR_EXP 28
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cargoSee := 0 ;
 184: LD_ADDR_EXP 29
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// lastBattle := 0 ;
 192: LD_ADDR_EXP 27
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// deadsCounter := 0 ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// spotCorpses := 0 ;
 208: LD_ADDR_EXP 32
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// southBaseDefenders := [ ] ;
 216: LD_ADDR_EXP 25
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// northBaseDefenders := [ ] ;
 223: LD_ADDR_EXP 24
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// attackGroup := [ ] ;
 230: LD_ADDR_EXP 26
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// traitor := false ;
 237: LD_ADDR_EXP 33
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// end ; end_of_file
 245: LD_VAR 0 1
 249: RET
// export function Action ; var tmp ; begin
 250: LD_INT 0
 252: PPUSH
 253: PPUSH
// InGameOn ;
 254: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
 258: LD_EXP 1
 262: PPUSH
 263: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 267: LD_ADDR_VAR 0 2
 271: PUSH
 272: LD_INT 22
 274: PUSH
 275: LD_INT 4
 277: PUSH
 278: EMPTY
 279: LIST
 280: LIST
 281: PUSH
 282: LD_INT 21
 284: PUSH
 285: LD_INT 1
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PPUSH
 296: CALL_OW 69
 300: PUSH
 301: LD_EXP 4
 305: PUSH
 306: EMPTY
 307: LIST
 308: DIFF
 309: ST_TO_ADDR
// if Cyrus and Bobby then
 310: LD_EXP 3
 314: PUSH
 315: LD_EXP 2
 319: AND
 320: IFFALSE 650
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 322: LD_EXP 3
 326: PPUSH
 327: LD_INT 43
 329: PPUSH
 330: LD_INT 72
 332: PPUSH
 333: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 337: LD_EXP 2
 341: PPUSH
 342: LD_INT 44
 344: PPUSH
 345: LD_INT 70
 347: PPUSH
 348: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 352: LD_EXP 1
 356: PPUSH
 357: LD_INT 46
 359: PPUSH
 360: LD_INT 73
 362: PPUSH
 363: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 367: LD_EXP 3
 371: PPUSH
 372: LD_STRING D1a-Cyrus-1
 374: PPUSH
 375: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 379: LD_EXP 1
 383: PPUSH
 384: LD_STRING D1a-JMM-1
 386: PPUSH
 387: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 391: LD_EXP 3
 395: PPUSH
 396: LD_INT 37
 398: PPUSH
 399: LD_INT 66
 401: PPUSH
 402: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 406: LD_EXP 2
 410: PPUSH
 411: LD_INT 41
 413: PPUSH
 414: LD_INT 67
 416: PPUSH
 417: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 421: LD_EXP 1
 425: PPUSH
 426: LD_INT 38
 428: PPUSH
 429: LD_INT 64
 431: PPUSH
 432: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 436: LD_EXP 2
 440: PPUSH
 441: LD_STRING D1a-Bobby-2
 443: PPUSH
 444: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 448: LD_EXP 3
 452: PPUSH
 453: LD_INT 35
 455: PPUSH
 456: LD_INT 62
 458: PPUSH
 459: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 463: LD_EXP 2
 467: PPUSH
 468: LD_INT 32
 470: PPUSH
 471: LD_INT 60
 473: PPUSH
 474: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 478: LD_EXP 1
 482: PPUSH
 483: LD_INT 35
 485: PPUSH
 486: LD_INT 60
 488: PPUSH
 489: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 493: LD_EXP 1
 497: PPUSH
 498: LD_STRING D1a-JMM-2
 500: PPUSH
 501: CALL_OW 88
// ComWalk ( Lisa ) ;
 505: LD_EXP 4
 509: PPUSH
 510: CALL_OW 138
// wait ( 0 0$1 ) ;
 514: LD_INT 35
 516: PPUSH
 517: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 521: LD_EXP 4
 525: PPUSH
 526: LD_EXP 1
 530: PPUSH
 531: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 535: LD_EXP 1
 539: PUSH
 540: LD_EXP 3
 544: PUSH
 545: LD_EXP 2
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: LIST
 554: PPUSH
 555: LD_EXP 4
 559: PPUSH
 560: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 564: LD_VAR 0 2
 568: PUSH
 569: LD_INT 1
 571: ARRAY
 572: PPUSH
 573: LD_INT 33
 575: PPUSH
 576: LD_INT 55
 578: PPUSH
 579: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 583: LD_VAR 0 2
 587: PUSH
 588: LD_INT 2
 590: ARRAY
 591: PPUSH
 592: LD_INT 30
 594: PPUSH
 595: LD_INT 54
 597: PPUSH
 598: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 602: LD_VAR 0 2
 606: PUSH
 607: LD_INT 1
 609: ARRAY
 610: PPUSH
 611: LD_EXP 1
 615: PPUSH
 616: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 620: LD_VAR 0 2
 624: PUSH
 625: LD_INT 2
 627: ARRAY
 628: PPUSH
 629: LD_EXP 1
 633: PPUSH
 634: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 638: LD_EXP 4
 642: PPUSH
 643: LD_STRING D1a-Lisa-2
 645: PPUSH
 646: CALL_OW 88
// end ; if Cyrus and not Bobby then
 650: LD_EXP 3
 654: PUSH
 655: LD_EXP 2
 659: NOT
 660: AND
 661: IFFALSE 866
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 663: LD_EXP 3
 667: PPUSH
 668: LD_INT 43
 670: PPUSH
 671: LD_INT 72
 673: PPUSH
 674: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 678: LD_EXP 1
 682: PPUSH
 683: LD_INT 46
 685: PPUSH
 686: LD_INT 73
 688: PPUSH
 689: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 693: LD_EXP 3
 697: PPUSH
 698: LD_STRING D1a-Cyrus-1
 700: PPUSH
 701: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 705: LD_EXP 1
 709: PPUSH
 710: LD_STRING D1a-JMM-1
 712: PPUSH
 713: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 717: LD_EXP 3
 721: PPUSH
 722: LD_INT 37
 724: PPUSH
 725: LD_INT 66
 727: PPUSH
 728: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 732: LD_EXP 1
 736: PPUSH
 737: LD_INT 38
 739: PPUSH
 740: LD_INT 64
 742: PPUSH
 743: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 747: LD_EXP 3
 751: PPUSH
 752: LD_STRING D1a-Cyrus-2
 754: PPUSH
 755: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 759: LD_EXP 3
 763: PPUSH
 764: LD_INT 35
 766: PPUSH
 767: LD_INT 62
 769: PPUSH
 770: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 774: LD_EXP 1
 778: PPUSH
 779: LD_INT 35
 781: PPUSH
 782: LD_INT 60
 784: PPUSH
 785: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 789: LD_EXP 1
 793: PPUSH
 794: LD_STRING D1a-JMM-2
 796: PPUSH
 797: CALL_OW 88
// ComWalk ( Lisa ) ;
 801: LD_EXP 4
 805: PPUSH
 806: CALL_OW 138
// wait ( 0 0$1 ) ;
 810: LD_INT 35
 812: PPUSH
 813: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 817: LD_EXP 4
 821: PPUSH
 822: LD_EXP 1
 826: PPUSH
 827: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 831: LD_EXP 4
 835: PPUSH
 836: LD_STRING D1a-Lisa-2
 838: PPUSH
 839: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 843: LD_EXP 1
 847: PUSH
 848: LD_EXP 3
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: PPUSH
 857: LD_EXP 4
 861: PPUSH
 862: CALL_OW 119
// end ; if not Cyrus and Bobby then
 866: LD_EXP 3
 870: NOT
 871: PUSH
 872: LD_EXP 2
 876: AND
 877: IFFALSE 1156
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 879: LD_EXP 2
 883: PPUSH
 884: LD_INT 44
 886: PPUSH
 887: LD_INT 70
 889: PPUSH
 890: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 894: LD_EXP 1
 898: PPUSH
 899: LD_INT 46
 901: PPUSH
 902: LD_INT 73
 904: PPUSH
 905: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 909: LD_EXP 2
 913: PPUSH
 914: LD_STRING D1a-Bobby-1
 916: PPUSH
 917: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 921: LD_EXP 1
 925: PPUSH
 926: LD_STRING D1a-JMM-1
 928: PPUSH
 929: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 933: LD_EXP 2
 937: PPUSH
 938: LD_INT 37
 940: PPUSH
 941: LD_INT 66
 943: PPUSH
 944: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 948: LD_EXP 1
 952: PPUSH
 953: LD_INT 38
 955: PPUSH
 956: LD_INT 64
 958: PPUSH
 959: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 963: LD_EXP 2
 967: PPUSH
 968: LD_STRING D1a-Bobby-2
 970: PPUSH
 971: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 975: LD_EXP 2
 979: PPUSH
 980: LD_INT 35
 982: PPUSH
 983: LD_INT 62
 985: PPUSH
 986: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 990: LD_EXP 1
 994: PPUSH
 995: LD_INT 35
 997: PPUSH
 998: LD_INT 60
1000: PPUSH
1001: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
1005: LD_EXP 1
1009: PPUSH
1010: LD_STRING D1a-JMM-2
1012: PPUSH
1013: CALL_OW 88
// ComWalk ( Lisa ) ;
1017: LD_EXP 4
1021: PPUSH
1022: CALL_OW 138
// wait ( 0 0$1 ) ;
1026: LD_INT 35
1028: PPUSH
1029: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1033: LD_EXP 4
1037: PPUSH
1038: LD_EXP 1
1042: PPUSH
1043: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
1047: LD_EXP 1
1051: PUSH
1052: LD_EXP 3
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PPUSH
1061: LD_EXP 4
1065: PPUSH
1066: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1070: LD_VAR 0 2
1074: PUSH
1075: LD_INT 1
1077: ARRAY
1078: PPUSH
1079: LD_INT 33
1081: PPUSH
1082: LD_INT 55
1084: PPUSH
1085: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1089: LD_VAR 0 2
1093: PUSH
1094: LD_INT 2
1096: ARRAY
1097: PPUSH
1098: LD_INT 30
1100: PPUSH
1101: LD_INT 54
1103: PPUSH
1104: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1108: LD_VAR 0 2
1112: PUSH
1113: LD_INT 1
1115: ARRAY
1116: PPUSH
1117: LD_EXP 1
1121: PPUSH
1122: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1126: LD_VAR 0 2
1130: PUSH
1131: LD_INT 2
1133: ARRAY
1134: PPUSH
1135: LD_EXP 1
1139: PPUSH
1140: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1144: LD_EXP 4
1148: PPUSH
1149: LD_STRING D1a-Lisa-2
1151: PPUSH
1152: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1156: LD_EXP 3
1160: NOT
1161: PUSH
1162: LD_EXP 2
1166: NOT
1167: AND
1168: IFFALSE 1382
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1170: LD_EXP 1
1174: PPUSH
1175: LD_INT 37
1177: PPUSH
1178: LD_INT 66
1180: PPUSH
1181: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1185: LD_EXP 1
1189: PPUSH
1190: LD_STRING D1b-JMM-1
1192: PPUSH
1193: CALL_OW 88
// ComCrawl ( JMM ) ;
1197: LD_EXP 1
1201: PPUSH
1202: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1206: LD_EXP 1
1210: PPUSH
1211: LD_INT 35
1213: PPUSH
1214: LD_INT 60
1216: PPUSH
1217: CALL_OW 171
// wait ( 0 0$8 ) ;
1221: LD_INT 280
1223: PPUSH
1224: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1228: LD_EXP 1
1232: PPUSH
1233: LD_STRING D1b-JMM-1a
1235: PPUSH
1236: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1240: LD_EXP 1
1244: PUSH
1245: LD_EXP 4
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PPUSH
1254: CALL_OW 138
// wait ( 0 0$1 ) ;
1258: LD_INT 35
1260: PPUSH
1261: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1265: LD_EXP 4
1269: PPUSH
1270: LD_EXP 1
1274: PPUSH
1275: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1279: LD_EXP 1
1283: PUSH
1284: EMPTY
1285: LIST
1286: PPUSH
1287: LD_EXP 4
1291: PPUSH
1292: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1296: LD_VAR 0 2
1300: PUSH
1301: LD_INT 1
1303: ARRAY
1304: PPUSH
1305: LD_INT 33
1307: PPUSH
1308: LD_INT 55
1310: PPUSH
1311: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1315: LD_VAR 0 2
1319: PUSH
1320: LD_INT 2
1322: ARRAY
1323: PPUSH
1324: LD_INT 30
1326: PPUSH
1327: LD_INT 54
1329: PPUSH
1330: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1334: LD_VAR 0 2
1338: PUSH
1339: LD_INT 1
1341: ARRAY
1342: PPUSH
1343: LD_EXP 1
1347: PPUSH
1348: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1352: LD_VAR 0 2
1356: PUSH
1357: LD_INT 2
1359: ARRAY
1360: PPUSH
1361: LD_EXP 1
1365: PPUSH
1366: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1370: LD_EXP 4
1374: PPUSH
1375: LD_STRING D1b-Lisa-1
1377: PPUSH
1378: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1382: LD_EXP 1
1386: PPUSH
1387: LD_STRING D1-JMM-1
1389: PPUSH
1390: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1394: LD_EXP 4
1398: PPUSH
1399: LD_STRING D1-Lisa-1
1401: PPUSH
1402: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1406: LD_EXP 1
1410: PPUSH
1411: LD_STRING D1-JMM-2
1413: PPUSH
1414: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
1418: LD_EXP 9
1422: PPUSH
1423: LD_STRING D1-Pow-2
1425: PPUSH
1426: CALL_OW 586
// if Cyrus then
1430: LD_EXP 3
1434: IFFALSE 1460
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1436: LD_EXP 3
1440: PPUSH
1441: LD_STRING D1-Cyrus-2
1443: PPUSH
1444: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1448: LD_EXP 1
1452: PPUSH
1453: LD_STRING D1-JMM-3
1455: PPUSH
1456: CALL_OW 88
// end ; SayRadioNoFace ( Powell , D1-Pow-3 ) ;
1460: LD_EXP 9
1464: PPUSH
1465: LD_STRING D1-Pow-3
1467: PPUSH
1468: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
1472: LD_EXP 1
1476: PPUSH
1477: LD_STRING D1-JMM-4
1479: PPUSH
1480: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-4 ) ;
1484: LD_EXP 9
1488: PPUSH
1489: LD_STRING D1-Pow-4
1491: PPUSH
1492: CALL_OW 586
// SayRadioNoFace ( Powell , D1-Pow-4a ) ;
1496: LD_EXP 9
1500: PPUSH
1501: LD_STRING D1-Pow-4a
1503: PPUSH
1504: CALL_OW 586
// if Cyrus then
1508: LD_EXP 3
1512: IFFALSE 1526
// Say ( Cyrus , D1-Cyrus-4 ) ;
1514: LD_EXP 3
1518: PPUSH
1519: LD_STRING D1-Cyrus-4
1521: PPUSH
1522: CALL_OW 88
// if Bobby then
1526: LD_EXP 2
1530: IFFALSE 1568
// begin Say ( Bobby , D1-Bobby-4 ) ;
1532: LD_EXP 2
1536: PPUSH
1537: LD_STRING D1-Bobby-4
1539: PPUSH
1540: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1544: LD_EXP 4
1548: PPUSH
1549: LD_STRING D1-Lisa-4
1551: PPUSH
1552: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1556: LD_EXP 1
1560: PPUSH
1561: LD_STRING D1-JMM-5
1563: PPUSH
1564: CALL_OW 88
// end ; InGameOff ;
1568: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1572: LD_INT 22
1574: PUSH
1575: LD_INT 4
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PPUSH
1582: CALL_OW 69
1586: PUSH
1587: LD_EXP 6
1591: PUSH
1592: LD_EXP 7
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: DIFF
1601: PPUSH
1602: LD_INT 1
1604: PPUSH
1605: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1609: LD_STRING M1
1611: PPUSH
1612: CALL_OW 337
// SaveForQuickRestart ;
1616: CALL_OW 22
// end ;
1620: LD_VAR 0 1
1624: RET
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1625: LD_INT 7
1627: PPUSH
1628: LD_INT 22
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PPUSH
1638: CALL_OW 70
1642: PUSH
1643: LD_INT 0
1645: GREATER
1646: IFFALSE 2059
1648: GO 1650
1650: DISABLE
// begin InGameOn ;
1651: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1655: LD_INT 22
1657: PUSH
1658: LD_INT 1
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: PUSH
1665: LD_INT 21
1667: PUSH
1668: LD_INT 1
1670: PUSH
1671: EMPTY
1672: LIST
1673: LIST
1674: PUSH
1675: EMPTY
1676: LIST
1677: LIST
1678: PPUSH
1679: CALL_OW 69
1683: PPUSH
1684: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1688: LD_INT 24
1690: PPUSH
1691: LD_INT 32
1693: PPUSH
1694: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1698: LD_EXP 5
1702: PPUSH
1703: LD_INT 4
1705: PPUSH
1706: LD_INT 1
1708: PPUSH
1709: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1713: LD_EXP 5
1717: PPUSH
1718: LD_INT 4
1720: PPUSH
1721: CALL_OW 336
// wait ( 0 0$1 ) ;
1725: LD_INT 35
1727: PPUSH
1728: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1732: LD_EXP 5
1736: PPUSH
1737: LD_INT 27
1739: PPUSH
1740: LD_INT 38
1742: PPUSH
1743: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1747: LD_EXP 5
1751: PPUSH
1752: LD_EXP 1
1756: PPUSH
1757: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1761: LD_INT 22
1763: PUSH
1764: LD_INT 1
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: PUSH
1771: LD_INT 21
1773: PUSH
1774: LD_INT 1
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: PPUSH
1785: CALL_OW 69
1789: PUSH
1790: LD_EXP 5
1794: PUSH
1795: EMPTY
1796: LIST
1797: DIFF
1798: PPUSH
1799: LD_EXP 5
1803: PPUSH
1804: CALL_OW 119
// wait ( 0 0$1 ) ;
1808: LD_INT 35
1810: PPUSH
1811: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1815: LD_EXP 5
1819: PPUSH
1820: LD_STRING D2a-Khat-1
1822: PPUSH
1823: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1827: LD_EXP 1
1831: PPUSH
1832: LD_STRING D2a-JMM-1
1834: PPUSH
1835: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1839: LD_EXP 5
1843: PPUSH
1844: LD_STRING D2a-Khat-2
1846: PPUSH
1847: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1851: LD_EXP 1
1855: PPUSH
1856: LD_STRING D2a-JMM-2
1858: PPUSH
1859: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1863: LD_EXP 5
1867: PPUSH
1868: LD_STRING D2a-Khat-3
1870: PPUSH
1871: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1875: LD_EXP 1
1879: PPUSH
1880: LD_STRING D2a-JMM-3
1882: PPUSH
1883: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1887: LD_EXP 5
1891: PPUSH
1892: LD_STRING D2a-Khat-4
1894: PPUSH
1895: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1899: LD_EXP 1
1903: PPUSH
1904: LD_STRING D2a-JMM-4
1906: PPUSH
1907: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1911: LD_EXP 5
1915: PPUSH
1916: LD_STRING D2a-Khat-5
1918: PPUSH
1919: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1923: LD_EXP 1
1927: PPUSH
1928: LD_STRING D2a-JMM-5
1930: PPUSH
1931: CALL_OW 88
// InGameOff ;
1935: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) then
1939: LD_INT 22
1941: PUSH
1942: LD_INT 1
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: PUSH
1949: LD_INT 21
1951: PUSH
1952: LD_INT 1
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: PUSH
1959: LD_INT 3
1961: PUSH
1962: LD_INT 24
1964: PUSH
1965: LD_INT 800
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: LIST
1980: PPUSH
1981: CALL_OW 69
1985: IFFALSE 2059
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1987: LD_EXP 5
1991: PPUSH
1992: LD_INT 22
1994: PUSH
1995: LD_INT 1
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: PUSH
2002: LD_INT 21
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PUSH
2012: LD_INT 3
2014: PUSH
2015: LD_INT 24
2017: PUSH
2018: LD_INT 1000
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: LIST
2033: PPUSH
2034: CALL_OW 69
2038: PUSH
2039: LD_INT 1
2041: ARRAY
2042: PPUSH
2043: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
2047: LD_EXP 5
2051: PPUSH
2052: LD_STRING D2b-Khat-1
2054: PPUSH
2055: CALL_OW 88
// end ; end ;
2059: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) do var i , distanceTab , min , tmp , p ;
2060: LD_INT 15
2062: PPUSH
2063: LD_INT 22
2065: PUSH
2066: LD_INT 1
2068: PUSH
2069: EMPTY
2070: LIST
2071: LIST
2072: PPUSH
2073: CALL_OW 70
2077: IFFALSE 3274
2079: GO 2081
2081: DISABLE
2082: LD_INT 0
2084: PPUSH
2085: PPUSH
2086: PPUSH
2087: PPUSH
2088: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2089: LD_ADDR_VAR 0 2
2093: PUSH
2094: LD_INT 999
2096: PUSH
2097: LD_INT 999
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2107: LD_ADDR_VAR 0 4
2111: PUSH
2112: LD_INT 22
2114: PUSH
2115: LD_INT 1
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: PUSH
2122: LD_INT 21
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: PPUSH
2136: CALL_OW 69
2140: PUSH
2141: LD_EXP 1
2145: PUSH
2146: LD_EXP 2
2150: PUSH
2151: LD_EXP 3
2155: PUSH
2156: LD_EXP 4
2160: PUSH
2161: LD_EXP 5
2165: PUSH
2166: EMPTY
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: DIFF
2173: ST_TO_ADDR
// PrepareDeadSoldiers ;
2174: CALL 11782 0 0
// spotCorpses = 1 ;
2178: LD_ADDR_EXP 32
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2186: LD_INT 70
2188: PPUSH
2189: CALL_OW 67
// InGameOn ;
2193: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2197: LD_INT 23
2199: PPUSH
2200: LD_INT 12
2202: PPUSH
2203: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2207: LD_ADDR_VAR 0 3
2211: PUSH
2212: LD_VAR 0 2
2216: PUSH
2217: LD_INT 1
2219: ARRAY
2220: PUSH
2221: LD_INT 2
2223: ARRAY
2224: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2225: LD_ADDR_VAR 0 1
2229: PUSH
2230: LD_INT 22
2232: PUSH
2233: LD_INT 1
2235: PUSH
2236: EMPTY
2237: LIST
2238: LIST
2239: PUSH
2240: LD_INT 21
2242: PUSH
2243: LD_INT 1
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: PPUSH
2254: CALL_OW 69
2258: PUSH
2259: LD_EXP 1
2263: PUSH
2264: LD_EXP 5
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: DIFF
2273: PUSH
2274: FOR_IN
2275: IFFALSE 2326
// if IsOK ( i ) then
2277: LD_VAR 0 1
2281: PPUSH
2282: CALL_OW 302
2286: IFFALSE 2324
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2288: LD_ADDR_VAR 0 2
2292: PUSH
2293: LD_VAR 0 2
2297: PUSH
2298: LD_VAR 0 1
2302: PUSH
2303: LD_VAR 0 1
2307: PPUSH
2308: LD_INT 16
2310: PPUSH
2311: CALL_OW 299
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: EMPTY
2321: LIST
2322: ADD
2323: ST_TO_ADDR
2324: GO 2274
2326: POP
2327: POP
// for i = 2 to distanceTab do
2328: LD_ADDR_VAR 0 1
2332: PUSH
2333: DOUBLE
2334: LD_INT 2
2336: DEC
2337: ST_TO_ADDR
2338: LD_VAR 0 2
2342: PUSH
2343: FOR_TO
2344: IFFALSE 2390
// if distanceTab [ i ] [ 2 ] < min then
2346: LD_VAR 0 2
2350: PUSH
2351: LD_VAR 0 1
2355: ARRAY
2356: PUSH
2357: LD_INT 2
2359: ARRAY
2360: PUSH
2361: LD_VAR 0 3
2365: LESS
2366: IFFALSE 2388
// min = distanceTab [ i ] [ 2 ] ;
2368: LD_ADDR_VAR 0 3
2372: PUSH
2373: LD_VAR 0 2
2377: PUSH
2378: LD_VAR 0 1
2382: ARRAY
2383: PUSH
2384: LD_INT 2
2386: ARRAY
2387: ST_TO_ADDR
2388: GO 2343
2390: POP
2391: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2392: LD_ADDR_VAR 0 1
2396: PUSH
2397: LD_INT 22
2399: PUSH
2400: LD_INT 1
2402: PUSH
2403: EMPTY
2404: LIST
2405: LIST
2406: PUSH
2407: LD_INT 21
2409: PUSH
2410: LD_INT 1
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: PPUSH
2421: CALL_OW 69
2425: PUSH
2426: LD_EXP 1
2430: PUSH
2431: EMPTY
2432: LIST
2433: DIFF
2434: PUSH
2435: FOR_IN
2436: IFFALSE 2506
// begin ComMoveToArea ( i , DeadCutscene ) ;
2438: LD_VAR 0 1
2442: PPUSH
2443: LD_INT 28
2445: PPUSH
2446: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2450: LD_EXP 1
2454: PPUSH
2455: LD_INT 30
2457: PPUSH
2458: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2462: LD_VAR 0 1
2466: PPUSH
2467: LD_INT 23
2469: PPUSH
2470: LD_INT 11
2472: PPUSH
2473: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2477: LD_EXP 1
2481: PPUSH
2482: LD_INT 23
2484: PPUSH
2485: LD_INT 11
2487: PPUSH
2488: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2492: LD_EXP 36
2496: PPUSH
2497: LD_INT 250
2499: PPUSH
2500: CALL_OW 234
// end ;
2504: GO 2435
2506: POP
2507: POP
// for i = 2 to distanceTab do
2508: LD_ADDR_VAR 0 1
2512: PUSH
2513: DOUBLE
2514: LD_INT 2
2516: DEC
2517: ST_TO_ADDR
2518: LD_VAR 0 2
2522: PUSH
2523: FOR_TO
2524: IFFALSE 2910
// begin if distanceTab [ i ] [ 2 ] = min then
2526: LD_VAR 0 2
2530: PUSH
2531: LD_VAR 0 1
2535: ARRAY
2536: PUSH
2537: LD_INT 2
2539: ARRAY
2540: PUSH
2541: LD_VAR 0 3
2545: EQUAL
2546: IFFALSE 2908
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2548: LD_VAR 0 2
2552: PUSH
2553: LD_VAR 0 1
2557: ARRAY
2558: PUSH
2559: LD_INT 1
2561: ARRAY
2562: PUSH
2563: LD_EXP 2
2567: EQUAL
2568: IFFALSE 2582
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2570: LD_EXP 2
2574: PPUSH
2575: LD_STRING DCorpses-Bobby-1
2577: PPUSH
2578: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2582: LD_VAR 0 2
2586: PUSH
2587: LD_VAR 0 1
2591: ARRAY
2592: PUSH
2593: LD_INT 1
2595: ARRAY
2596: PUSH
2597: LD_EXP 3
2601: EQUAL
2602: IFFALSE 2616
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2604: LD_EXP 3
2608: PPUSH
2609: LD_STRING DCorpses-Cyrus-1
2611: PPUSH
2612: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2616: LD_VAR 0 2
2620: PUSH
2621: LD_VAR 0 1
2625: ARRAY
2626: PUSH
2627: LD_INT 1
2629: ARRAY
2630: PUSH
2631: LD_EXP 4
2635: EQUAL
2636: IFFALSE 2650
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2638: LD_EXP 4
2642: PPUSH
2643: LD_STRING DCorpses-Lisa-1
2645: PPUSH
2646: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2650: LD_VAR 0 2
2654: PUSH
2655: LD_VAR 0 1
2659: ARRAY
2660: PUSH
2661: LD_INT 1
2663: ARRAY
2664: PUSH
2665: LD_VAR 0 4
2669: PUSH
2670: LD_INT 1
2672: ARRAY
2673: EQUAL
2674: PUSH
2675: LD_VAR 0 4
2679: PUSH
2680: LD_INT 1
2682: ARRAY
2683: PPUSH
2684: CALL_OW 258
2688: PUSH
2689: LD_INT 1
2691: EQUAL
2692: AND
2693: IFFALSE 2711
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2695: LD_VAR 0 4
2699: PUSH
2700: LD_INT 1
2702: ARRAY
2703: PPUSH
2704: LD_STRING DCorpses-Sol1-1
2706: PPUSH
2707: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2711: LD_VAR 0 2
2715: PUSH
2716: LD_VAR 0 1
2720: ARRAY
2721: PUSH
2722: LD_INT 1
2724: ARRAY
2725: PUSH
2726: LD_VAR 0 4
2730: PUSH
2731: LD_INT 1
2733: ARRAY
2734: EQUAL
2735: PUSH
2736: LD_VAR 0 4
2740: PUSH
2741: LD_INT 1
2743: ARRAY
2744: PPUSH
2745: CALL_OW 258
2749: PUSH
2750: LD_INT 2
2752: EQUAL
2753: AND
2754: IFFALSE 2772
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2756: LD_VAR 0 4
2760: PUSH
2761: LD_INT 1
2763: ARRAY
2764: PPUSH
2765: LD_STRING DCorpses-FSol1-1
2767: PPUSH
2768: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2772: LD_VAR 0 2
2776: PUSH
2777: LD_VAR 0 1
2781: ARRAY
2782: PUSH
2783: LD_INT 1
2785: ARRAY
2786: PUSH
2787: LD_VAR 0 4
2791: PUSH
2792: LD_INT 2
2794: ARRAY
2795: EQUAL
2796: PUSH
2797: LD_VAR 0 4
2801: PUSH
2802: LD_INT 2
2804: ARRAY
2805: PPUSH
2806: CALL_OW 258
2810: PUSH
2811: LD_INT 1
2813: EQUAL
2814: AND
2815: IFFALSE 2833
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2817: LD_VAR 0 4
2821: PUSH
2822: LD_INT 2
2824: ARRAY
2825: PPUSH
2826: LD_STRING DCorpses-Sol1-1
2828: PPUSH
2829: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2833: LD_VAR 0 2
2837: PUSH
2838: LD_VAR 0 1
2842: ARRAY
2843: PUSH
2844: LD_INT 1
2846: ARRAY
2847: PUSH
2848: LD_VAR 0 4
2852: PUSH
2853: LD_INT 2
2855: ARRAY
2856: EQUAL
2857: PUSH
2858: LD_VAR 0 4
2862: PUSH
2863: LD_INT 2
2865: ARRAY
2866: PPUSH
2867: CALL_OW 258
2871: PUSH
2872: LD_INT 2
2874: EQUAL
2875: AND
2876: IFFALSE 2894
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2878: LD_VAR 0 4
2882: PUSH
2883: LD_INT 2
2885: ARRAY
2886: PPUSH
2887: LD_STRING DCorpses-FSol1-1
2889: PPUSH
2890: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2894: LD_EXP 36
2898: PPUSH
2899: LD_INT 150
2901: PPUSH
2902: CALL_OW 234
// break ;
2906: GO 2910
// end ; end ;
2908: GO 2523
2910: POP
2911: POP
// p := 0 ;
2912: LD_ADDR_VAR 0 5
2916: PUSH
2917: LD_INT 0
2919: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2920: LD_INT 35
2922: PPUSH
2923: CALL_OW 67
// p := p + 1 ;
2927: LD_ADDR_VAR 0 5
2931: PUSH
2932: LD_VAR 0 5
2936: PUSH
2937: LD_INT 1
2939: PLUS
2940: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2941: LD_ADDR_VAR 0 1
2945: PUSH
2946: LD_INT 22
2948: PUSH
2949: LD_INT 1
2951: PUSH
2952: EMPTY
2953: LIST
2954: LIST
2955: PUSH
2956: LD_INT 21
2958: PUSH
2959: LD_INT 1
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PPUSH
2970: CALL_OW 69
2974: PUSH
2975: LD_EXP 1
2979: PUSH
2980: EMPTY
2981: LIST
2982: DIFF
2983: PUSH
2984: FOR_IN
2985: IFFALSE 3055
// begin ComMoveToArea ( i , DeadCutscene ) ;
2987: LD_VAR 0 1
2991: PPUSH
2992: LD_INT 28
2994: PPUSH
2995: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2999: LD_EXP 1
3003: PPUSH
3004: LD_INT 30
3006: PPUSH
3007: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
3011: LD_VAR 0 1
3015: PPUSH
3016: LD_INT 23
3018: PPUSH
3019: LD_INT 11
3021: PPUSH
3022: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
3026: LD_EXP 1
3030: PPUSH
3031: LD_INT 23
3033: PPUSH
3034: LD_INT 11
3036: PPUSH
3037: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
3041: LD_EXP 36
3045: PPUSH
3046: LD_INT 250
3048: PPUSH
3049: CALL_OW 234
// end ;
3053: GO 2984
3055: POP
3056: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3057: LD_EXP 1
3061: PPUSH
3062: LD_INT 30
3064: PPUSH
3065: CALL_OW 308
3069: PUSH
3070: LD_VAR 0 5
3074: PUSH
3075: LD_INT 16
3077: GREATEREQUAL
3078: OR
3079: IFFALSE 2920
// wait ( 0 0$1 ) ;
3081: LD_INT 35
3083: PPUSH
3084: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3088: LD_EXP 1
3092: PPUSH
3093: LD_STRING DCorpses-JMM-1
3095: PPUSH
3096: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3100: LD_EXP 36
3104: PPUSH
3105: LD_INT 100
3107: PPUSH
3108: CALL_OW 234
// if IsOK ( Khatam ) then
3112: LD_EXP 5
3116: PPUSH
3117: CALL_OW 302
3121: IFFALSE 3258
// begin repeat wait ( 0 0$1 ) ;
3123: LD_INT 35
3125: PPUSH
3126: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3130: LD_EXP 5
3134: PPUSH
3135: LD_EXP 36
3139: PPUSH
3140: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3144: LD_EXP 5
3148: PPUSH
3149: LD_EXP 36
3153: PPUSH
3154: CALL_OW 296
3158: PUSH
3159: LD_INT 2
3161: LESS
3162: IFFALSE 3123
// spotCorpses = 0 ;
3164: LD_ADDR_EXP 32
3168: PUSH
3169: LD_INT 0
3171: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3172: LD_EXP 36
3176: PPUSH
3177: LD_INT 10
3179: PPUSH
3180: CALL_OW 234
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// KillUnit ( DyingSold ) ;
3191: LD_EXP 36
3195: PPUSH
3196: CALL_OW 66
// wait ( 0 0$1 ) ;
3200: LD_INT 35
3202: PPUSH
3203: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3207: LD_EXP 1
3211: PUSH
3212: LD_EXP 5
3216: PUSH
3217: EMPTY
3218: LIST
3219: LIST
3220: PPUSH
3221: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3225: LD_EXP 5
3229: PPUSH
3230: LD_EXP 1
3234: PPUSH
3235: CALL_OW 119
// wait ( 0 0$1 ) ;
3239: LD_INT 35
3241: PPUSH
3242: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3246: LD_EXP 5
3250: PPUSH
3251: LD_STRING DCorpses-Khat-1
3253: PPUSH
3254: CALL_OW 88
// end ; InGameOff ;
3258: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3262: LD_EXP 1
3266: PPUSH
3267: LD_STRING DCorpses-JMM-2
3269: PPUSH
3270: CALL_OW 88
// end ;
3274: PPOPN 5
3276: END
// every 0 0$1 trigger spotCorpses = 1 do
3277: LD_EXP 32
3281: PUSH
3282: LD_INT 1
3284: EQUAL
3285: IFFALSE 3303
3287: GO 3289
3289: DISABLE
// begin enable ;
3290: ENABLE
// SetLives ( DyingSold , 10 ) ;
3291: LD_EXP 36
3295: PPUSH
3296: LD_INT 10
3298: PPUSH
3299: CALL_OW 234
// end ;
3303: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3304: LD_INT 8
3306: PPUSH
3307: LD_INT 22
3309: PUSH
3310: LD_INT 1
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PPUSH
3317: CALL_OW 70
3321: PUSH
3322: LD_INT 22
3324: PUSH
3325: LD_INT 1
3327: PUSH
3328: EMPTY
3329: LIST
3330: LIST
3331: PPUSH
3332: CALL_OW 69
3336: PPUSH
3337: LD_EXP 7
3341: PPUSH
3342: CALL_OW 74
3346: PPUSH
3347: LD_EXP 7
3351: PPUSH
3352: CALL_OW 296
3356: PUSH
3357: LD_INT 13
3359: LESS
3360: OR
3361: IFFALSE 3542
3363: GO 3365
3365: DISABLE
3366: LD_INT 0
3368: PPUSH
// begin InGameOn ;
3369: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3373: LD_EXP 7
3377: PPUSH
3378: LD_INT 250
3380: PPUSH
3381: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 , 700 ] [ Difficulty ] ) ;
3385: LD_EXP 6
3389: PPUSH
3390: LD_INT 1000
3392: PUSH
3393: LD_INT 800
3395: PUSH
3396: LD_INT 750
3398: PUSH
3399: LD_INT 700
3401: PUSH
3402: EMPTY
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: PUSH
3408: LD_OWVAR 67
3412: ARRAY
3413: PPUSH
3414: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3418: LD_INT 3
3420: PPUSH
3421: LD_INT 4
3423: PPUSH
3424: LD_INT 2
3426: PPUSH
3427: LD_INT 1
3429: PPUSH
3430: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3434: LD_EXP 6
3438: PUSH
3439: LD_EXP 7
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PPUSH
3448: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) union FilterAllUnits ( [ f_side , 4 ] ) do
3452: LD_ADDR_VAR 0 1
3456: PUSH
3457: LD_INT 9
3459: PPUSH
3460: LD_INT 22
3462: PUSH
3463: LD_INT 3
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PPUSH
3470: CALL_OW 70
3474: PUSH
3475: LD_INT 22
3477: PUSH
3478: LD_INT 4
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: PPUSH
3485: CALL_OW 69
3489: UNION
3490: PUSH
3491: FOR_IN
3492: IFFALSE 3505
// ComFree ( i ) ;
3494: LD_VAR 0 1
3498: PPUSH
3499: CALL_OW 139
3503: GO 3491
3505: POP
3506: POP
// wait ( 0 0$1 ) ;
3507: LD_INT 35
3509: PPUSH
3510: CALL_OW 67
// InGameOff ;
3514: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3518: LD_EXP 6
3522: PPUSH
3523: LD_STRING DF-Sol1-1
3525: PPUSH
3526: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3530: LD_EXP 1
3534: PPUSH
3535: LD_STRING DF-JMM-1
3537: PPUSH
3538: CALL_OW 88
// end ;
3542: PPOPN 1
3544: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3545: LD_INT 19
3547: PPUSH
3548: LD_INT 22
3550: PUSH
3551: LD_INT 3
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: PPUSH
3558: CALL_OW 70
3562: PUSH
3563: LD_INT 0
3565: EQUAL
3566: IFFALSE 3675
3568: GO 3570
3570: DISABLE
// begin if not IsDead ( Brian ) then
3571: LD_EXP 6
3575: PPUSH
3576: CALL_OW 301
3580: NOT
3581: IFFALSE 3595
// SetSide ( Brian , 1 ) ;
3583: LD_EXP 6
3587: PPUSH
3588: LD_INT 1
3590: PPUSH
3591: CALL_OW 235
// if not IsDead ( Jerry ) then
3595: LD_EXP 7
3599: PPUSH
3600: CALL_OW 301
3604: NOT
3605: IFFALSE 3619
// SetSide ( Jerry , 1 ) ;
3607: LD_EXP 7
3611: PPUSH
3612: LD_INT 1
3614: PPUSH
3615: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3619: LD_INT 22
3621: PUSH
3622: LD_INT 1
3624: PUSH
3625: EMPTY
3626: LIST
3627: LIST
3628: PUSH
3629: LD_INT 25
3631: PUSH
3632: LD_INT 4
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: PPUSH
3643: CALL_OW 69
3647: IFFALSE 3663
// Say ( JMM , DFa-JMM-1 ) else
3649: LD_EXP 1
3653: PPUSH
3654: LD_STRING DFa-JMM-1
3656: PPUSH
3657: CALL_OW 88
3661: GO 3675
// Say ( JMM , DFa-JMM-1a ) ;
3663: LD_EXP 1
3667: PPUSH
3668: LD_STRING DFa-JMM-1a
3670: PPUSH
3671: CALL_OW 88
// end ;
3675: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3676: LD_INT 19
3678: PPUSH
3679: LD_INT 22
3681: PUSH
3682: LD_INT 3
3684: PUSH
3685: EMPTY
3686: LIST
3687: LIST
3688: PPUSH
3689: CALL_OW 70
3693: PUSH
3694: LD_INT 0
3696: EQUAL
3697: PUSH
3698: LD_EXP 6
3702: PPUSH
3703: CALL_OW 302
3707: NOT
3708: AND
3709: IFFALSE 3795
3711: GO 3713
3713: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3714: LD_INT 35
3716: PPUSH
3717: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3721: LD_EXP 6
3725: PPUSH
3726: CALL_OW 256
3730: PUSH
3731: LD_INT 250
3733: GREATER
3734: IFFALSE 3714
// Say ( Brian , DFb-Sol1-1 ) ;
3736: LD_EXP 6
3740: PPUSH
3741: LD_STRING DFb-Sol1-1
3743: PPUSH
3744: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3748: LD_EXP 6
3752: PPUSH
3753: LD_INT 78
3755: PPUSH
3756: LD_INT 74
3758: PPUSH
3759: CALL_OW 111
// if IsDead ( Jerry ) then
3763: LD_EXP 7
3767: PPUSH
3768: CALL_OW 301
3772: IFFALSE 3788
// Say ( Brian , DFb-Sol1-1a ) else
3774: LD_EXP 6
3778: PPUSH
3779: LD_STRING DFb-Sol1-1a
3781: PPUSH
3782: CALL_OW 88
3786: GO 3795
// SetAchievement ( ACH_JERRY ) ;
3788: LD_STRING ACH_JERRY
3790: PPUSH
3791: CALL_OW 543
// end ;
3795: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3796: LD_INT 22
3798: PUSH
3799: LD_INT 1
3801: PUSH
3802: EMPTY
3803: LIST
3804: LIST
3805: PUSH
3806: LD_INT 21
3808: PUSH
3809: LD_INT 2
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PPUSH
3820: CALL_OW 69
3824: PUSH
3825: LD_INT 0
3827: EQUAL
3828: IFFALSE 3920
3830: GO 3832
3832: DISABLE
3833: LD_INT 0
3835: PPUSH
// begin enable ;
3836: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3837: LD_ADDR_VAR 0 1
3841: PUSH
3842: LD_INT 22
3844: PUSH
3845: LD_INT 3
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: PUSH
3852: LD_INT 21
3854: PUSH
3855: LD_INT 3
3857: PUSH
3858: EMPTY
3859: LIST
3860: LIST
3861: PUSH
3862: LD_INT 30
3864: PUSH
3865: LD_INT 31
3867: PUSH
3868: EMPTY
3869: LIST
3870: LIST
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL_OW 69
3881: PUSH
3882: FOR_IN
3883: IFFALSE 3918
// begin if See ( 1 , i ) then
3885: LD_INT 1
3887: PPUSH
3888: LD_VAR 0 1
3892: PPUSH
3893: CALL_OW 292
3897: IFFALSE 3916
// begin disable ;
3899: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3900: LD_EXP 1
3904: PPUSH
3905: LD_STRING DX1-JMM-1
3907: PPUSH
3908: CALL_OW 88
// exit ;
3912: POP
3913: POP
3914: GO 3920
// end ; end ;
3916: GO 3882
3918: POP
3919: POP
// end ;
3920: PPOPN 1
3922: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
3923: LD_INT 1
3925: PPUSH
3926: LD_INT 11
3928: PPUSH
3929: CALL_OW 294
3933: IFFALSE 4196
3935: GO 3937
3937: DISABLE
3938: LD_INT 0
3940: PPUSH
3941: PPUSH
3942: PPUSH
// begin DialogueOn ;
3943: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3947: LD_INT 11
3949: PPUSH
3950: LD_INT 22
3952: PUSH
3953: LD_INT 3
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: PUSH
3960: LD_INT 21
3962: PUSH
3963: LD_INT 1
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: PUSH
3970: EMPTY
3971: LIST
3972: LIST
3973: PPUSH
3974: CALL_OW 70
3978: PUSH
3979: LD_INT 1
3981: ARRAY
3982: PPUSH
3983: LD_STRING DX3-Rus1-1
3985: PPUSH
3986: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3990: LD_EXP 1
3994: PPUSH
3995: LD_STRING DX3-JMM-1
3997: PPUSH
3998: CALL_OW 88
// DialogueOff ;
4002: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
4006: LD_ADDR_VAR 0 1
4010: PUSH
4011: LD_INT 11
4013: PPUSH
4014: LD_INT 22
4016: PUSH
4017: LD_INT 3
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: PUSH
4024: LD_INT 25
4026: PUSH
4027: LD_INT 1
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PPUSH
4038: CALL_OW 70
4042: PUSH
4043: FOR_IN
4044: IFFALSE 4064
// southBaseDefenders = southBaseDefenders ^ i ;
4046: LD_ADDR_EXP 25
4050: PUSH
4051: LD_EXP 25
4055: PUSH
4056: LD_VAR 0 1
4060: ADD
4061: ST_TO_ADDR
4062: GO 4043
4064: POP
4065: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 , 0 0$2 ] [ Difficulty ] ) ;
4066: LD_INT 175
4068: PUSH
4069: LD_INT 140
4071: PUSH
4072: LD_INT 105
4074: PUSH
4075: LD_INT 70
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: PUSH
4084: LD_OWVAR 67
4088: ARRAY
4089: PPUSH
4090: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4094: LD_ADDR_VAR 0 3
4098: PUSH
4099: LD_INT 22
4101: PUSH
4102: LD_INT 3
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: PUSH
4109: LD_INT 21
4111: PUSH
4112: LD_INT 1
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: PUSH
4119: LD_INT 25
4121: PUSH
4122: LD_INT 3
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: PUSH
4129: EMPTY
4130: LIST
4131: LIST
4132: LIST
4133: PPUSH
4134: CALL_OW 69
4138: ST_TO_ADDR
// if not mech then
4139: LD_VAR 0 3
4143: NOT
4144: IFFALSE 4148
// exit ;
4146: GO 4196
// ComExitBuilding ( mech ) ;
4148: LD_VAR 0 3
4152: PPUSH
4153: CALL_OW 122
// wait ( 0 0$1 ) ;
4157: LD_INT 35
4159: PPUSH
4160: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4164: LD_VAR 0 3
4168: PUSH
4169: LD_INT 1
4171: ARRAY
4172: PPUSH
4173: LD_INT 5
4175: PPUSH
4176: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4180: LD_VAR 0 3
4184: PUSH
4185: LD_INT 2
4187: ARRAY
4188: PPUSH
4189: LD_INT 4
4191: PPUSH
4192: CALL_OW 180
// end ;
4196: PPOPN 3
4198: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4199: LD_INT 1
4201: PPUSH
4202: LD_INT 5
4204: PPUSH
4205: CALL_OW 292
4209: PUSH
4210: LD_INT 1
4212: PPUSH
4213: LD_INT 4
4215: PPUSH
4216: CALL_OW 292
4220: OR
4221: IFFALSE 4305
4223: GO 4225
4225: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4226: LD_INT 5
4228: PUSH
4229: LD_INT 4
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: PPUSH
4236: CALL_OW 85
// if IsOK ( Bobby ) then
4240: LD_EXP 2
4244: PPUSH
4245: CALL_OW 302
4249: IFFALSE 4285
// begin DialogueOn ;
4251: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4255: LD_EXP 2
4259: PPUSH
4260: LD_STRING DX2-Bobby-1
4262: PPUSH
4263: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4267: LD_EXP 1
4271: PPUSH
4272: LD_STRING DX2-JMM-1a
4274: PPUSH
4275: CALL_OW 88
// DialogueOff ;
4279: CALL_OW 7
// end else
4283: GO 4305
// begin DialogueOn ;
4285: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4289: LD_EXP 1
4293: PPUSH
4294: LD_STRING DX2-JMM-1
4296: PPUSH
4297: CALL_OW 88
// DialogueOff ;
4301: CALL_OW 7
// end ; end ;
4305: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4306: LD_INT 22
4308: PUSH
4309: LD_INT 1
4311: PUSH
4312: EMPTY
4313: LIST
4314: LIST
4315: PUSH
4316: LD_INT 23
4318: PUSH
4319: LD_INT 3
4321: PUSH
4322: EMPTY
4323: LIST
4324: LIST
4325: PUSH
4326: LD_INT 21
4328: PUSH
4329: LD_INT 2
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: PUSH
4336: LD_INT 34
4338: PUSH
4339: LD_INT 42
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: PPUSH
4352: CALL_OW 69
4356: IFFALSE 4777
4358: GO 4360
4360: DISABLE
4361: LD_INT 0
4363: PPUSH
4364: PPUSH
4365: PPUSH
4366: PPUSH
4367: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4368: LD_ADDR_VAR 0 1
4372: PUSH
4373: LD_INT 22
4375: PUSH
4376: LD_INT 1
4378: PUSH
4379: EMPTY
4380: LIST
4381: LIST
4382: PUSH
4383: LD_INT 23
4385: PUSH
4386: LD_INT 3
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: PUSH
4393: LD_INT 21
4395: PUSH
4396: LD_INT 2
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: PUSH
4403: LD_INT 34
4405: PUSH
4406: LD_INT 42
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: PPUSH
4419: CALL_OW 69
4423: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4424: LD_ADDR_VAR 0 3
4428: PUSH
4429: LD_INT 22
4431: PUSH
4432: LD_INT 1
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: PUSH
4439: LD_INT 21
4441: PUSH
4442: LD_INT 1
4444: PUSH
4445: EMPTY
4446: LIST
4447: LIST
4448: PUSH
4449: LD_INT 26
4451: PUSH
4452: LD_INT 1
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: LIST
4463: PPUSH
4464: CALL_OW 69
4468: PUSH
4469: LD_EXP 1
4473: PUSH
4474: LD_EXP 3
4478: PUSH
4479: LD_EXP 2
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: DIFF
4489: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4490: LD_ADDR_VAR 0 4
4494: PUSH
4495: LD_INT 22
4497: PUSH
4498: LD_INT 1
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: LD_INT 21
4507: PUSH
4508: LD_INT 1
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: PUSH
4515: LD_INT 26
4517: PUSH
4518: LD_INT 2
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: LIST
4529: PPUSH
4530: CALL_OW 69
4534: PUSH
4535: LD_EXP 4
4539: PUSH
4540: EMPTY
4541: LIST
4542: DIFF
4543: ST_TO_ADDR
// if not tmp then
4544: LD_VAR 0 1
4548: NOT
4549: IFFALSE 4553
// exit ;
4551: GO 4777
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4553: LD_ADDR_VAR 0 2
4557: PUSH
4558: LD_VAR 0 1
4562: PUSH
4563: LD_INT 1
4565: ARRAY
4566: PPUSH
4567: CALL_OW 311
4571: ST_TO_ADDR
// if not speaker then
4572: LD_VAR 0 2
4576: NOT
4577: IFFALSE 4581
// exit ;
4579: GO 4777
// DialogueOn ;
4581: CALL_OW 6
// if speaker = JMM then
4585: LD_VAR 0 2
4589: PUSH
4590: LD_EXP 1
4594: EQUAL
4595: IFFALSE 4629
// begin if Lisa then
4597: LD_EXP 4
4601: IFFALSE 4615
// Say ( Lisa , DX2b-Lisa-1 ) ;
4603: LD_EXP 4
4607: PPUSH
4608: LD_STRING DX2b-Lisa-1
4610: PPUSH
4611: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4615: LD_EXP 1
4619: PPUSH
4620: LD_STRING DX2b-JMM-1
4622: PPUSH
4623: CALL_OW 88
// end else
4627: GO 4773
// begin Say ( JMM , DX2a-JMM-1 ) ;
4629: LD_EXP 1
4633: PPUSH
4634: LD_STRING DX2a-JMM-1
4636: PPUSH
4637: CALL_OW 88
// if speaker = Bobby then
4641: LD_VAR 0 2
4645: PUSH
4646: LD_EXP 2
4650: EQUAL
4651: IFFALSE 4665
// Say ( Bobby , DX2a-Bobby-1 ) ;
4653: LD_EXP 2
4657: PPUSH
4658: LD_STRING DX2a-Bobby-1
4660: PPUSH
4661: CALL_OW 88
// if speaker = Cyrus then
4665: LD_VAR 0 2
4669: PUSH
4670: LD_EXP 3
4674: EQUAL
4675: IFFALSE 4689
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4677: LD_EXP 3
4681: PPUSH
4682: LD_STRING DX2a-Cyrus-1
4684: PPUSH
4685: CALL_OW 88
// if speaker = Lisa then
4689: LD_VAR 0 2
4693: PUSH
4694: LD_EXP 4
4698: EQUAL
4699: IFFALSE 4713
// Say ( Lisa , DX2a-Lisa-1 ) ;
4701: LD_EXP 4
4705: PPUSH
4706: LD_STRING DX2a-Lisa-1
4708: PPUSH
4709: CALL_OW 88
// if speaker in temp1 then
4713: LD_VAR 0 2
4717: PUSH
4718: LD_VAR 0 3
4722: IN
4723: IFFALSE 4737
// Say ( speaker , DX2a-Sol1-1 ) ;
4725: LD_VAR 0 2
4729: PPUSH
4730: LD_STRING DX2a-Sol1-1
4732: PPUSH
4733: CALL_OW 88
// if speaker in temp2 then
4737: LD_VAR 0 2
4741: PUSH
4742: LD_VAR 0 4
4746: IN
4747: IFFALSE 4761
// Say ( speaker , DX2a-FSol1-1 ) ;
4749: LD_VAR 0 2
4753: PPUSH
4754: LD_STRING DX2a-FSol1-1
4756: PPUSH
4757: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4761: LD_EXP 1
4765: PPUSH
4766: LD_STRING DX2a-JMM-2
4768: PPUSH
4769: CALL_OW 88
// end ; DialogueOff ;
4773: CALL_OW 7
// end ;
4777: PPOPN 5
4779: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4780: LD_INT 1
4782: PPUSH
4783: CALL_OW 255
4787: PUSH
4788: LD_INT 1
4790: EQUAL
4791: PUSH
4792: LD_INT 10
4794: PPUSH
4795: CALL_OW 255
4799: PUSH
4800: LD_INT 1
4802: EQUAL
4803: OR
4804: IFFALSE 4864
4806: GO 4808
4808: DISABLE
// begin DialogueOn ;
4809: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4813: LD_EXP 1
4817: PPUSH
4818: LD_STRING D3-JMM-1
4820: PPUSH
4821: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4825: LD_EXP 9
4829: PPUSH
4830: LD_STRING D3-Pow-1
4832: PPUSH
4833: CALL_OW 586
// if IsOK ( Cyrus ) then
4837: LD_EXP 3
4841: PPUSH
4842: CALL_OW 302
4846: IFFALSE 4860
// Say ( Cyrus , D3-Cyrus-1 ) ;
4848: LD_EXP 3
4852: PPUSH
4853: LD_STRING D3-Cyrus-1
4855: PPUSH
4856: CALL_OW 88
// DialogueOff ;
4860: CALL_OW 7
// end ;
4864: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and IsOk ( dep1 ) and IsOk ( dep2 ) do var temp , tmp , i ;
4865: LD_INT 1
4867: PPUSH
4868: CALL_OW 255
4872: PUSH
4873: LD_INT 1
4875: EQUAL
4876: PUSH
4877: LD_INT 10
4879: PPUSH
4880: CALL_OW 255
4884: PUSH
4885: LD_INT 1
4887: EQUAL
4888: AND
4889: PUSH
4890: LD_INT 1
4892: PPUSH
4893: CALL_OW 302
4897: AND
4898: PUSH
4899: LD_INT 10
4901: PPUSH
4902: CALL_OW 302
4906: AND
4907: IFFALSE 6297
4909: GO 4911
4911: DISABLE
4912: LD_INT 0
4914: PPUSH
4915: PPUSH
4916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4917: LD_ADDR_VAR 0 2
4921: PUSH
4922: LD_INT 22
4924: PUSH
4925: LD_INT 3
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: PUSH
4932: LD_INT 21
4934: PUSH
4935: LD_INT 1
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: PPUSH
4946: CALL_OW 69
4950: ST_TO_ADDR
// if tmp then
4951: LD_VAR 0 2
4955: IFFALSE 5016
// begin for i in tmp do
4957: LD_ADDR_VAR 0 3
4961: PUSH
4962: LD_VAR 0 2
4966: PUSH
4967: FOR_IN
4968: IFFALSE 5014
// begin if IsInUnit ( i ) then
4970: LD_VAR 0 3
4974: PPUSH
4975: CALL_OW 310
4979: IFFALSE 4990
// ComExitBuilding ( i ) ;
4981: LD_VAR 0 3
4985: PPUSH
4986: CALL_OW 122
// wait ( 0 0$1 ) ;
4990: LD_INT 35
4992: PPUSH
4993: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
4997: LD_VAR 0 3
5001: PPUSH
5002: LD_INT 54
5004: PPUSH
5005: LD_INT 17
5007: PPUSH
5008: CALL_OW 174
// end ;
5012: GO 4967
5014: POP
5015: POP
// end ; wait ( 0 0$03 ) ;
5016: LD_INT 105
5018: PPUSH
5019: CALL_OW 67
// DialogueOn ;
5023: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5027: LD_EXP 1
5031: PPUSH
5032: LD_STRING D3a-JMM-1
5034: PPUSH
5035: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-1 ) ;
5039: LD_EXP 9
5043: PPUSH
5044: LD_STRING D3a-Pow-1
5046: PPUSH
5047: CALL_OW 586
// Say ( JMM , D3a-JMM-2 ) ;
5051: LD_EXP 1
5055: PPUSH
5056: LD_STRING D3a-JMM-2
5058: PPUSH
5059: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-2 ) ;
5063: LD_EXP 9
5067: PPUSH
5068: LD_STRING D3a-Pow-2
5070: PPUSH
5071: CALL_OW 586
// Say ( JMM , D3a-JMM-3 ) ;
5075: LD_EXP 1
5079: PPUSH
5080: LD_STRING D3a-JMM-3
5082: PPUSH
5083: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-3 ) ;
5087: LD_EXP 9
5091: PPUSH
5092: LD_STRING D3a-Pow-3
5094: PPUSH
5095: CALL_OW 586
// Say ( JMM , D3a-JMM-4 ) ;
5099: LD_EXP 1
5103: PPUSH
5104: LD_STRING D3a-JMM-4
5106: PPUSH
5107: CALL_OW 88
// DialogueOff ;
5111: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5115: LD_STRING M2
5117: PPUSH
5118: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5122: LD_EXP 1
5126: PPUSH
5127: LD_STRING D3b-JMM-1
5129: PPUSH
5130: CALL_OW 88
// Hint ( Depot2 ) ;
5134: LD_STRING Depot2
5136: PPUSH
5137: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5141: LD_INT 35
5143: PPUSH
5144: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5148: LD_INT 22
5150: PPUSH
5151: LD_INT 22
5153: PUSH
5154: LD_INT 1
5156: PUSH
5157: EMPTY
5158: LIST
5159: LIST
5160: PUSH
5161: LD_INT 25
5163: PUSH
5164: LD_INT 2
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PPUSH
5175: CALL_OW 70
5179: PUSH
5180: LD_INT 22
5182: PUSH
5183: LD_INT 3
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: PUSH
5190: LD_INT 21
5192: PUSH
5193: LD_INT 1
5195: PUSH
5196: EMPTY
5197: LIST
5198: LIST
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PPUSH
5204: CALL_OW 69
5208: NOT
5209: AND
5210: IFFALSE 5141
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5212: LD_ADDR_VAR 0 1
5216: PUSH
5217: LD_INT 22
5219: PUSH
5220: LD_INT 1
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: PUSH
5227: LD_INT 23
5229: PUSH
5230: LD_INT 1
5232: PUSH
5233: EMPTY
5234: LIST
5235: LIST
5236: PUSH
5237: LD_INT 25
5239: PUSH
5240: LD_INT 2
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: LD_INT 50
5249: PUSH
5250: EMPTY
5251: LIST
5252: PUSH
5253: LD_INT 56
5255: PUSH
5256: EMPTY
5257: LIST
5258: PUSH
5259: EMPTY
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: LIST
5265: PPUSH
5266: CALL_OW 69
5270: PUSH
5271: LD_EXP 1
5275: PUSH
5276: LD_EXP 5
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: DIFF
5285: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5286: LD_INT 35
5288: PPUSH
5289: CALL_OW 67
// until temp > 0 ;
5293: LD_VAR 0 1
5297: PUSH
5298: LD_INT 0
5300: GREATER
5301: IFFALSE 5212
// wait ( 0 0$5 ) ;
5303: LD_INT 175
5305: PPUSH
5306: CALL_OW 67
// PrepareRussianHeroes ;
5310: CALL 12008 0 0
// InGameOn ;
5314: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5318: LD_EXP 8
5322: PPUSH
5323: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5327: LD_EXP 1
5331: PUSH
5332: LD_VAR 0 1
5336: PUSH
5337: LD_INT 1
5339: ARRAY
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: PPUSH
5345: LD_EXP 8
5349: PPUSH
5350: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5354: LD_EXP 8
5358: PPUSH
5359: LD_VAR 0 1
5363: PUSH
5364: LD_INT 1
5366: ARRAY
5367: PPUSH
5368: CALL_OW 119
// wait ( 0 0$02 ) ;
5372: LD_INT 70
5374: PPUSH
5375: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5379: LD_EXP 8
5383: PPUSH
5384: LD_STRING D4-Mikh-1
5386: PPUSH
5387: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5391: LD_VAR 0 1
5395: PUSH
5396: LD_INT 1
5398: ARRAY
5399: PPUSH
5400: CALL_OW 258
5404: PUSH
5405: LD_INT 1
5407: EQUAL
5408: IFFALSE 5426
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5410: LD_VAR 0 1
5414: PUSH
5415: LD_INT 1
5417: ARRAY
5418: PPUSH
5419: LD_STRING D4-Sol1-1
5421: PPUSH
5422: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5426: LD_VAR 0 1
5430: PUSH
5431: LD_INT 1
5433: ARRAY
5434: PPUSH
5435: CALL_OW 258
5439: PUSH
5440: LD_INT 2
5442: EQUAL
5443: IFFALSE 5461
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5445: LD_VAR 0 1
5449: PUSH
5450: LD_INT 1
5452: ARRAY
5453: PPUSH
5454: LD_STRING D4-FSol1-1
5456: PPUSH
5457: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5461: LD_EXP 8
5465: PPUSH
5466: LD_STRING D4-Mikh-2
5468: PPUSH
5469: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5473: LD_VAR 0 1
5477: PUSH
5478: LD_INT 1
5480: ARRAY
5481: PPUSH
5482: CALL_OW 258
5486: PUSH
5487: LD_INT 1
5489: EQUAL
5490: IFFALSE 5508
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5492: LD_VAR 0 1
5496: PUSH
5497: LD_INT 1
5499: ARRAY
5500: PPUSH
5501: LD_STRING D4-Sol1-2
5503: PPUSH
5504: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5508: LD_VAR 0 1
5512: PUSH
5513: LD_INT 1
5515: ARRAY
5516: PPUSH
5517: CALL_OW 258
5521: PUSH
5522: LD_INT 2
5524: EQUAL
5525: IFFALSE 5543
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5527: LD_VAR 0 1
5531: PUSH
5532: LD_INT 1
5534: ARRAY
5535: PPUSH
5536: LD_STRING D4-FSol1-2
5538: PPUSH
5539: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5543: LD_EXP 8
5547: PPUSH
5548: LD_STRING D4-Mikh-3
5550: PPUSH
5551: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5555: LD_VAR 0 1
5559: PUSH
5560: LD_INT 1
5562: ARRAY
5563: PPUSH
5564: CALL_OW 258
5568: PUSH
5569: LD_INT 1
5571: EQUAL
5572: IFFALSE 5590
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5574: LD_VAR 0 1
5578: PUSH
5579: LD_INT 1
5581: ARRAY
5582: PPUSH
5583: LD_STRING D4-Sol1-3
5585: PPUSH
5586: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5590: LD_VAR 0 1
5594: PUSH
5595: LD_INT 1
5597: ARRAY
5598: PPUSH
5599: CALL_OW 258
5603: PUSH
5604: LD_INT 2
5606: EQUAL
5607: IFFALSE 5625
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5609: LD_VAR 0 1
5613: PUSH
5614: LD_INT 1
5616: ARRAY
5617: PPUSH
5618: LD_STRING D4-FSol1-3
5620: PPUSH
5621: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5625: LD_EXP 8
5629: PPUSH
5630: LD_STRING D4-Mikh-4
5632: PPUSH
5633: CALL_OW 88
// case Query ( Qs1 ) of 1 :
5637: LD_STRING Qs1
5639: PPUSH
5640: CALL_OW 97
5644: PUSH
5645: LD_INT 1
5647: DOUBLE
5648: EQUAL
5649: IFTRUE 5653
5651: GO 5688
5653: POP
// begin InGameOff ;
5654: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5658: LD_INT 1
5660: PPUSH
5661: LD_INT 6
5663: PPUSH
5664: LD_INT 2
5666: PPUSH
5667: LD_INT 1
5669: PPUSH
5670: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5674: LD_EXP 8
5678: PPUSH
5679: LD_INT 17
5681: PPUSH
5682: CALL_OW 113
// end ; 2 :
5686: GO 6281
5688: LD_INT 2
5690: DOUBLE
5691: EQUAL
5692: IFTRUE 5696
5694: GO 6246
5696: POP
// begin repeat wait ( 0 0$1 ) ;
5697: LD_INT 35
5699: PPUSH
5700: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5704: LD_VAR 0 1
5708: PUSH
5709: LD_INT 1
5711: ARRAY
5712: PPUSH
5713: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5717: LD_VAR 0 1
5721: PUSH
5722: LD_INT 1
5724: ARRAY
5725: PPUSH
5726: LD_EXP 1
5730: PPUSH
5731: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5735: LD_EXP 8
5739: PPUSH
5740: LD_EXP 1
5744: PPUSH
5745: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5749: LD_EXP 1
5753: PPUSH
5754: LD_EXP 8
5758: PPUSH
5759: CALL_OW 296
5763: PUSH
5764: LD_INT 5
5766: LESS
5767: IFFALSE 5697
// ComTurnUnit ( Mikhail , JMM ) ;
5769: LD_EXP 8
5773: PPUSH
5774: LD_EXP 1
5778: PPUSH
5779: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5783: LD_EXP 1
5787: PPUSH
5788: LD_STRING D4b-JMM-1
5790: PPUSH
5791: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5795: LD_EXP 8
5799: PPUSH
5800: LD_STRING D4b-Mikh-1
5802: PPUSH
5803: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5807: LD_EXP 1
5811: PPUSH
5812: LD_STRING D4b-JMM-2
5814: PPUSH
5815: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5819: LD_EXP 8
5823: PPUSH
5824: LD_STRING D4b-Mikh-2
5826: PPUSH
5827: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5831: LD_EXP 1
5835: PPUSH
5836: LD_STRING D4b-JMM-3
5838: PPUSH
5839: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5843: LD_EXP 8
5847: PPUSH
5848: LD_STRING D4b-Mikh-3
5850: PPUSH
5851: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5855: LD_EXP 1
5859: PPUSH
5860: LD_STRING D4b-JMM-4
5862: PPUSH
5863: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5867: LD_EXP 8
5871: PPUSH
5872: LD_STRING D4b-Mikh-4
5874: PPUSH
5875: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5879: LD_EXP 1
5883: PPUSH
5884: LD_STRING D4b-JMM-5
5886: PPUSH
5887: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5891: LD_EXP 8
5895: PPUSH
5896: LD_STRING D4b-Mikh-5
5898: PPUSH
5899: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5903: LD_EXP 1
5907: PPUSH
5908: LD_STRING D4b-JMM-6
5910: PPUSH
5911: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5915: LD_EXP 8
5919: PPUSH
5920: LD_STRING D4b-Mikh-6
5922: PPUSH
5923: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5927: LD_EXP 1
5931: PPUSH
5932: LD_STRING D4b-JMM-7
5934: PPUSH
5935: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5939: LD_EXP 8
5943: PPUSH
5944: LD_STRING D4b-Mikh-7
5946: PPUSH
5947: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5951: LD_VAR 0 1
5955: PUSH
5956: LD_INT 1
5958: ARRAY
5959: PPUSH
5960: CALL_OW 258
5964: PUSH
5965: LD_INT 1
5967: EQUAL
5968: IFFALSE 5986
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
5970: LD_VAR 0 1
5974: PUSH
5975: LD_INT 1
5977: ARRAY
5978: PPUSH
5979: LD_STRING D4b-Sol1-7
5981: PPUSH
5982: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5986: LD_VAR 0 1
5990: PUSH
5991: LD_INT 1
5993: ARRAY
5994: PPUSH
5995: CALL_OW 258
5999: PUSH
6000: LD_INT 2
6002: EQUAL
6003: IFFALSE 6021
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6005: LD_VAR 0 1
6009: PUSH
6010: LD_INT 1
6012: ARRAY
6013: PPUSH
6014: LD_STRING D4b-FSol1-7
6016: PPUSH
6017: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6021: LD_EXP 1
6025: PPUSH
6026: LD_STRING D4b-JMM-8
6028: PPUSH
6029: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6033: LD_VAR 0 1
6037: PUSH
6038: LD_INT 1
6040: ARRAY
6041: PPUSH
6042: CALL_OW 258
6046: PUSH
6047: LD_INT 1
6049: EQUAL
6050: IFFALSE 6068
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6052: LD_VAR 0 1
6056: PUSH
6057: LD_INT 1
6059: ARRAY
6060: PPUSH
6061: LD_STRING D4b-Sol1-8
6063: PPUSH
6064: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6068: LD_VAR 0 1
6072: PUSH
6073: LD_INT 1
6075: ARRAY
6076: PPUSH
6077: CALL_OW 258
6081: PUSH
6082: LD_INT 2
6084: EQUAL
6085: IFFALSE 6103
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6087: LD_VAR 0 1
6091: PUSH
6092: LD_INT 1
6094: ARRAY
6095: PPUSH
6096: LD_STRING D4b-FSol1-8
6098: PPUSH
6099: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6103: LD_EXP 1
6107: PPUSH
6108: LD_STRING D4b-JMM-9
6110: PPUSH
6111: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6115: LD_EXP 8
6119: PPUSH
6120: LD_INT 1
6122: PPUSH
6123: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6127: LD_ADDR_VAR 0 3
6131: PUSH
6132: LD_INT 22
6134: PUSH
6135: LD_INT 1
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: PUSH
6142: EMPTY
6143: LIST
6144: PPUSH
6145: CALL_OW 69
6149: PUSH
6150: FOR_IN
6151: IFFALSE 6164
// ComFree ( i ) ;
6153: LD_VAR 0 3
6157: PPUSH
6158: CALL_OW 139
6162: GO 6150
6164: POP
6165: POP
// repeat wait ( 0 0$1 ) ;
6166: LD_INT 35
6168: PPUSH
6169: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6173: LD_EXP 8
6177: PPUSH
6178: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6182: LD_EXP 8
6186: PUSH
6187: LD_VAR 0 1
6191: PUSH
6192: LD_INT 1
6194: ARRAY
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PPUSH
6200: LD_INT 1
6202: PPUSH
6203: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6207: LD_EXP 8
6211: PPUSH
6212: CALL_OW 310
6216: IFFALSE 6166
// mikhailDepot = IsInUnit ( Mikhail ) ;
6218: LD_ADDR_EXP 23
6222: PUSH
6223: LD_EXP 8
6227: PPUSH
6228: CALL_OW 310
6232: ST_TO_ADDR
// InGameOff ;
6233: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6237: LD_STRING M3
6239: PPUSH
6240: CALL_OW 337
// end ; 3 :
6244: GO 6281
6246: LD_INT 3
6248: DOUBLE
6249: EQUAL
6250: IFTRUE 6254
6252: GO 6280
6254: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6255: LD_EXP 8
6259: PPUSH
6260: LD_INT 17
6262: PPUSH
6263: CALL_OW 113
// wait ( 0 0$3 ) ;
6267: LD_INT 105
6269: PPUSH
6270: CALL_OW 67
// InGameOff ;
6274: CALL_OW 9
// end ; end ;
6278: GO 6281
6280: POP
// PrepareTigers ;
6281: CALL 15489 0 0
// RussianTrap ;
6285: CALL 10335 0 0
// tigersRespawn = 1 ;
6289: LD_ADDR_EXP 30
6293: PUSH
6294: LD_INT 1
6296: ST_TO_ADDR
// end ;
6297: PPOPN 3
6299: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6300: LD_INT 1
6302: PPUSH
6303: CALL_OW 255
6307: PUSH
6308: LD_INT 1
6310: EQUAL
6311: PUSH
6312: LD_INT 10
6314: PPUSH
6315: CALL_OW 255
6319: PUSH
6320: LD_INT 1
6322: EQUAL
6323: AND
6324: PUSH
6325: LD_INT 1
6327: PPUSH
6328: CALL_OW 274
6332: PPUSH
6333: LD_INT 1
6335: PPUSH
6336: CALL_OW 275
6340: PUSH
6341: LD_INT 100
6343: GREATEREQUAL
6344: AND
6345: IFFALSE 6494
6347: GO 6349
6349: DISABLE
6350: LD_INT 0
6352: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6353: LD_INT 2100
6355: PPUSH
6356: LD_INT 4200
6358: PPUSH
6359: CALL_OW 12
6363: PUSH
6364: LD_INT 1050
6366: PLUS
6367: PPUSH
6368: CALL_OW 67
// PrepareCargoBays ;
6372: CALL 13191 0 0
// cargoRespawn = 1 ;
6376: LD_ADDR_EXP 28
6380: PUSH
6381: LD_INT 1
6383: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6384: LD_ADDR_VAR 0 1
6388: PUSH
6389: LD_EXP 15
6393: PUSH
6394: LD_EXP 16
6398: PUSH
6399: LD_EXP 17
6403: PUSH
6404: LD_EXP 18
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6415: LD_VAR 0 1
6419: PPUSH
6420: LD_INT 17
6422: PPUSH
6423: LD_INT 10
6425: PPUSH
6426: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6430: LD_VAR 0 1
6434: PPUSH
6435: LD_INT 36
6437: PPUSH
6438: LD_INT 13
6440: PPUSH
6441: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6445: LD_VAR 0 1
6449: PPUSH
6450: LD_INT 40
6452: PPUSH
6453: LD_INT 20
6455: PPUSH
6456: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6460: LD_VAR 0 1
6464: PPUSH
6465: LD_INT 53
6467: PPUSH
6468: LD_INT 16
6470: PPUSH
6471: CALL_OW 171
// wait ( 0 0$5 ) ;
6475: LD_INT 175
6477: PPUSH
6478: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6482: LD_EXP 17
6486: PPUSH
6487: LD_STRING D5-Rus2-1
6489: PPUSH
6490: CALL_OW 88
// end ;
6494: PPOPN 1
6496: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6497: LD_EXP 28
6501: PUSH
6502: LD_INT 1
6504: EQUAL
6505: IFFALSE 6660
6507: GO 6509
6509: DISABLE
6510: LD_INT 0
6512: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6513: LD_ADDR_VAR 0 1
6517: PUSH
6518: LD_INT 22
6520: PUSH
6521: LD_INT 3
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: PUSH
6528: LD_INT 21
6530: PUSH
6531: LD_INT 2
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: PUSH
6538: LD_INT 34
6540: PUSH
6541: LD_INT 51
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: LIST
6552: PPUSH
6553: CALL_OW 69
6557: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6558: LD_INT 105
6560: PPUSH
6561: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6565: LD_VAR 0 1
6569: PPUSH
6570: LD_INT 3
6572: PUSH
6573: LD_INT 60
6575: PUSH
6576: EMPTY
6577: LIST
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PPUSH
6583: CALL_OW 72
6587: PUSH
6588: LD_VAR 0 1
6592: PPUSH
6593: LD_INT 3
6595: PUSH
6596: LD_INT 24
6598: PUSH
6599: LD_INT 980
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: PPUSH
6610: CALL_OW 72
6614: OR
6615: IFFALSE 6558
// ComMoveXY ( cargos , 7 , 9 ) ;
6617: LD_VAR 0 1
6621: PPUSH
6622: LD_INT 7
6624: PPUSH
6625: LD_INT 9
6627: PPUSH
6628: CALL_OW 111
// cargoSee = 1 ;
6632: LD_ADDR_EXP 29
6636: PUSH
6637: LD_INT 1
6639: ST_TO_ADDR
// cargoEscape = 1 ;
6640: LD_ADDR_EXP 20
6644: PUSH
6645: LD_INT 1
6647: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6648: LD_EXP 17
6652: PPUSH
6653: LD_STRING D5-Rus2-1a
6655: PPUSH
6656: CALL_OW 88
// end ;
6660: PPOPN 1
6662: END
// every 0 0$1 trigger cargoEscape and UnitFilter ( [ cargo1 , cargo2 ] , [ [ f_ok ] , [ f_side , 3 ] , [ f_placed ] ] ) do var cr , i , x , y ;
6663: LD_EXP 20
6667: PUSH
6668: LD_EXP 15
6672: PUSH
6673: LD_EXP 16
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: PPUSH
6682: LD_INT 50
6684: PUSH
6685: EMPTY
6686: LIST
6687: PUSH
6688: LD_INT 22
6690: PUSH
6691: LD_INT 3
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: PUSH
6698: LD_INT 52
6700: PUSH
6701: EMPTY
6702: LIST
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: LIST
6708: PPUSH
6709: CALL_OW 72
6713: AND
6714: IFFALSE 7047
6716: GO 6718
6718: DISABLE
6719: LD_INT 0
6721: PPUSH
6722: PPUSH
6723: PPUSH
6724: PPUSH
// begin enable ;
6725: ENABLE
// for i in [ cargo1 , cargo2 ] do
6726: LD_ADDR_VAR 0 2
6730: PUSH
6731: LD_EXP 15
6735: PUSH
6736: LD_EXP 16
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PUSH
6745: FOR_IN
6746: IFFALSE 7045
// begin cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
6748: LD_ADDR_VAR 0 1
6752: PUSH
6753: LD_VAR 0 2
6757: PPUSH
6758: CALL_OW 250
6762: PPUSH
6763: LD_VAR 0 2
6767: PPUSH
6768: CALL_OW 251
6772: PPUSH
6773: LD_INT 6
6775: PPUSH
6776: CALL 77684 0 3
6780: ST_TO_ADDR
// if cr and GetMultiCargo ( i ) [ 4 ] < 60 then
6781: LD_VAR 0 1
6785: PUSH
6786: LD_VAR 0 2
6790: PPUSH
6791: CALL 78903 0 1
6795: PUSH
6796: LD_INT 4
6798: ARRAY
6799: PUSH
6800: LD_INT 60
6802: LESS
6803: AND
6804: IFFALSE 6843
// ComCollect ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
6806: LD_VAR 0 2
6810: PPUSH
6811: LD_VAR 0 1
6815: PUSH
6816: LD_INT 1
6818: ARRAY
6819: PUSH
6820: LD_INT 1
6822: ARRAY
6823: PPUSH
6824: LD_VAR 0 1
6828: PUSH
6829: LD_INT 1
6831: ARRAY
6832: PUSH
6833: LD_INT 2
6835: ARRAY
6836: PPUSH
6837: CALL_OW 117
6841: GO 7043
// if not IsInArea ( i , RemoveArea ) then
6843: LD_VAR 0 2
6847: PPUSH
6848: LD_INT 32
6850: PPUSH
6851: CALL_OW 308
6855: NOT
6856: IFFALSE 7004
// begin x := ShiftX ( GetX ( i ) , 4 , 3 ) ;
6858: LD_ADDR_VAR 0 3
6862: PUSH
6863: LD_VAR 0 2
6867: PPUSH
6868: CALL_OW 250
6872: PPUSH
6873: LD_INT 4
6875: PPUSH
6876: LD_INT 3
6878: PPUSH
6879: CALL_OW 272
6883: ST_TO_ADDR
// y := GetY ( i ) ;
6884: LD_ADDR_VAR 0 4
6888: PUSH
6889: LD_VAR 0 2
6893: PPUSH
6894: CALL_OW 251
6898: ST_TO_ADDR
// if HexInfo ( x , y ) then
6899: LD_VAR 0 3
6903: PPUSH
6904: LD_VAR 0 4
6908: PPUSH
6909: CALL_OW 428
6913: IFFALSE 6936
// x := ShiftX ( x , 4 , 3 ) ;
6915: LD_ADDR_VAR 0 3
6919: PUSH
6920: LD_VAR 0 3
6924: PPUSH
6925: LD_INT 4
6927: PPUSH
6928: LD_INT 3
6930: PPUSH
6931: CALL_OW 272
6935: ST_TO_ADDR
// if HexInfo ( x , y ) or not ValidHex ( x , y ) then
6936: LD_VAR 0 3
6940: PPUSH
6941: LD_VAR 0 4
6945: PPUSH
6946: CALL_OW 428
6950: PUSH
6951: LD_VAR 0 3
6955: PPUSH
6956: LD_VAR 0 4
6960: PPUSH
6961: CALL_OW 488
6965: NOT
6966: OR
6967: IFFALSE 6983
// ComMoveToArea ( i , RemoveArea ) else
6969: LD_VAR 0 2
6973: PPUSH
6974: LD_INT 32
6976: PPUSH
6977: CALL_OW 113
6981: GO 7002
// ComMoveXY ( i , x , y ) ;
6983: LD_VAR 0 2
6987: PPUSH
6988: LD_VAR 0 3
6992: PPUSH
6993: LD_VAR 0 4
6997: PPUSH
6998: CALL_OW 111
// end else
7002: GO 7043
// begin RemoveUnit ( IsDrivenBy ( i ) ) ;
7004: LD_VAR 0 2
7008: PPUSH
7009: CALL_OW 311
7013: PPUSH
7014: CALL_OW 64
// RemoveUnit ( i ) ;
7018: LD_VAR 0 2
7022: PPUSH
7023: CALL_OW 64
// cargoEscape := cargoEscape + 1 ;
7027: LD_ADDR_EXP 20
7031: PUSH
7032: LD_EXP 20
7036: PUSH
7037: LD_INT 1
7039: PLUS
7040: ST_TO_ADDR
// continue ;
7041: GO 6745
// end ; end ;
7043: GO 6745
7045: POP
7046: POP
// end ;
7047: PPOPN 4
7049: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
7050: LD_EXP 20
7054: PUSH
7055: LD_INT 1
7057: GREATER
7058: IFFALSE 7307
7060: GO 7062
7062: DISABLE
7063: LD_INT 0
7065: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
7066: LD_INT 4
7068: PPUSH
7069: LD_INT 1
7071: PPUSH
7072: LD_INT 1
7074: PPUSH
7075: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
7079: LD_INT 31
7081: PPUSH
7082: LD_INT 1
7084: PPUSH
7085: LD_INT 1
7087: PPUSH
7088: CALL_OW 324
// Hint ( Bunker ) ;
7092: LD_STRING Bunker
7094: PPUSH
7095: CALL_OW 339
// if IsOK ( Jerry ) then
7099: LD_EXP 7
7103: PPUSH
7104: CALL_OW 302
7108: IFFALSE 7124
// Say ( Jerry , D5a-Sol1-1 ) else
7110: LD_EXP 7
7114: PPUSH
7115: LD_STRING D5a-Sol1-1
7117: PPUSH
7118: CALL_OW 88
7122: GO 7210
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
7124: LD_ADDR_VAR 0 1
7128: PUSH
7129: LD_INT 22
7131: PUSH
7132: LD_INT 1
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PUSH
7139: LD_INT 26
7141: PUSH
7142: LD_INT 1
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PPUSH
7153: CALL_OW 69
7157: PUSH
7158: LD_EXP 1
7162: PUSH
7163: LD_EXP 2
7167: PUSH
7168: LD_EXP 3
7172: PUSH
7173: LD_EXP 5
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: DIFF
7184: ST_TO_ADDR
// if not speaker then
7185: LD_VAR 0 1
7189: NOT
7190: IFFALSE 7194
// exit ;
7192: GO 7307
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7194: LD_VAR 0 1
7198: PUSH
7199: LD_INT 1
7201: ARRAY
7202: PPUSH
7203: LD_STRING D5a-Sol1-1
7205: PPUSH
7206: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7210: LD_EXP 1
7214: PPUSH
7215: LD_STRING D5a-JMM-1
7217: PPUSH
7218: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
7222: LD_INT 22
7224: PPUSH
7225: LD_INT 22
7227: PUSH
7228: LD_INT 1
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: LD_INT 25
7237: PUSH
7238: LD_INT 2
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PPUSH
7249: CALL_OW 70
7253: IFFALSE 7307
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
7255: LD_INT 22
7257: PPUSH
7258: LD_INT 22
7260: PUSH
7261: LD_INT 1
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: LD_INT 25
7270: PUSH
7271: LD_INT 2
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PPUSH
7282: CALL_OW 70
7286: PUSH
7287: LD_INT 1
7289: ARRAY
7290: PPUSH
7291: LD_INT 31
7293: PPUSH
7294: LD_INT 44
7296: PPUSH
7297: LD_INT 13
7299: PPUSH
7300: LD_INT 1
7302: PPUSH
7303: CALL_OW 145
// end ;
7307: PPOPN 1
7309: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7310: LD_INT 1
7312: PPUSH
7313: CALL_OW 255
7317: PUSH
7318: LD_INT 3
7320: EQUAL
7321: PUSH
7322: LD_INT 1
7324: PPUSH
7325: CALL_OW 256
7329: PUSH
7330: LD_INT 1000
7332: LESS
7333: AND
7334: PUSH
7335: LD_INT 10
7337: PPUSH
7338: CALL_OW 255
7342: PUSH
7343: LD_INT 3
7345: EQUAL
7346: PUSH
7347: LD_INT 10
7349: PPUSH
7350: CALL_OW 256
7354: PUSH
7355: LD_INT 1000
7357: LESS
7358: AND
7359: OR
7360: IFFALSE 7377
7362: GO 7364
7364: DISABLE
// Say ( JMM , D8-JMM-1 ) ;
7365: LD_EXP 1
7369: PPUSH
7370: LD_STRING D8-JMM-1
7372: PPUSH
7373: CALL_OW 88
7377: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7378: LD_EXP 8
7382: PPUSH
7383: CALL_OW 310
7387: PUSH
7388: LD_INT 1
7390: EQUAL
7391: PUSH
7392: LD_EXP 22
7396: PUSH
7397: LD_INT 3
7399: EQUAL
7400: NOT
7401: AND
7402: IFFALSE 7424
7404: GO 7406
7406: DISABLE
// begin enable ;
7407: ENABLE
// mikhailInBase = 1 ;
7408: LD_ADDR_EXP 22
7412: PUSH
7413: LD_INT 1
7415: ST_TO_ADDR
// mikhailStatus = 1 ;
7416: LD_ADDR_EXP 21
7420: PUSH
7421: LD_INT 1
7423: ST_TO_ADDR
// end ;
7424: END
// export function AskMikhail ; begin
7425: LD_INT 0
7427: PPUSH
// case Query ( QMikh2 ) of 1 :
7428: LD_STRING QMikh2
7430: PPUSH
7431: CALL_OW 97
7435: PUSH
7436: LD_INT 1
7438: DOUBLE
7439: EQUAL
7440: IFTRUE 7444
7442: GO 7511
7444: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7445: LD_INT 1
7447: PPUSH
7448: LD_INT 6
7450: PPUSH
7451: LD_INT 2
7453: PPUSH
7454: LD_INT 1
7456: PPUSH
7457: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7461: LD_EXP 8
7465: PPUSH
7466: LD_INT 6
7468: PPUSH
7469: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7473: LD_EXP 8
7477: PPUSH
7478: CALL_OW 122
// wait ( 0 0$1 ) ;
7482: LD_INT 35
7484: PPUSH
7485: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7489: LD_EXP 8
7493: PPUSH
7494: LD_INT 17
7496: PPUSH
7497: CALL_OW 113
// mikhailInbase = 0 ;
7501: LD_ADDR_EXP 22
7505: PUSH
7506: LD_INT 0
7508: ST_TO_ADDR
// end ; 2 :
7509: GO 7752
7511: LD_INT 2
7513: DOUBLE
7514: EQUAL
7515: IFTRUE 7519
7517: GO 7692
7519: POP
// begin mikhailInBase = 2 ;
7520: LD_ADDR_EXP 22
7524: PUSH
7525: LD_INT 2
7527: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7528: LD_EXP 8
7532: PPUSH
7533: LD_INT 6
7535: PPUSH
7536: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7540: LD_EXP 8
7544: PPUSH
7545: CALL_OW 122
// wait ( 0 0$1 ) ;
7549: LD_INT 35
7551: PPUSH
7552: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7556: LD_EXP 8
7560: PPUSH
7561: LD_EXP 8
7565: PPUSH
7566: CALL_OW 250
7570: PUSH
7571: LD_INT 2
7573: PLUS
7574: PPUSH
7575: LD_EXP 8
7579: PPUSH
7580: CALL_OW 251
7584: PUSH
7585: LD_INT 2
7587: PLUS
7588: PPUSH
7589: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7593: LD_EXP 8
7597: PPUSH
7598: LD_EXP 8
7602: PPUSH
7603: CALL_OW 250
7607: PUSH
7608: LD_INT 1
7610: PLUS
7611: PPUSH
7612: LD_EXP 8
7616: PPUSH
7617: CALL_OW 251
7621: PUSH
7622: LD_INT 2
7624: PLUS
7625: PPUSH
7626: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7630: LD_EXP 8
7634: PPUSH
7635: LD_EXP 8
7639: PPUSH
7640: CALL_OW 250
7644: PUSH
7645: LD_INT 2
7647: PLUS
7648: PPUSH
7649: LD_EXP 8
7653: PPUSH
7654: CALL_OW 251
7658: PPUSH
7659: CALL_OW 171
// wait ( 0 0$5 ) ;
7663: LD_INT 175
7665: PPUSH
7666: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7670: LD_EXP 8
7674: PPUSH
7675: LD_INT 25
7677: PPUSH
7678: CALL_OW 113
// mikhailInBase = 4 ;
7682: LD_ADDR_EXP 22
7686: PUSH
7687: LD_INT 4
7689: ST_TO_ADDR
// end ; 3 :
7690: GO 7752
7692: LD_INT 3
7694: DOUBLE
7695: EQUAL
7696: IFTRUE 7700
7698: GO 7751
7700: POP
// begin SetSide ( Mikhail , 6 ) ;
7701: LD_EXP 8
7705: PPUSH
7706: LD_INT 6
7708: PPUSH
7709: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7713: LD_EXP 8
7717: PPUSH
7718: CALL_OW 122
// wait ( 0 0$1 ) ;
7722: LD_INT 35
7724: PPUSH
7725: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7729: LD_EXP 8
7733: PPUSH
7734: LD_INT 17
7736: PPUSH
7737: CALL_OW 113
// mikhailInbase = 3 ;
7741: LD_ADDR_EXP 22
7745: PUSH
7746: LD_INT 3
7748: ST_TO_ADDR
// end ; end ;
7749: GO 7752
7751: POP
// end ;
7752: LD_VAR 0 1
7756: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7757: LD_EXP 8
7761: PPUSH
7762: LD_INT 25
7764: PPUSH
7765: CALL_OW 308
7769: PUSH
7770: LD_EXP 22
7774: PUSH
7775: LD_INT 4
7777: EQUAL
7778: AND
7779: IFFALSE 7883
7781: GO 7783
7783: DISABLE
// begin enable ;
7784: ENABLE
// mikhailInBase = 1 ;
7785: LD_ADDR_EXP 22
7789: PUSH
7790: LD_INT 1
7792: ST_TO_ADDR
// InGameOn ;
7793: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7797: LD_INT 1
7799: PPUSH
7800: LD_INT 6
7802: PPUSH
7803: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7807: LD_INT 35
7809: PPUSH
7810: CALL_OW 67
// if Carry ( Mikhail ) then
7814: LD_EXP 8
7818: PPUSH
7819: CALL_OW 281
7823: IFFALSE 7834
// ComUnload ( Mikhail ) ;
7825: LD_EXP 8
7829: PPUSH
7830: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7834: LD_EXP 8
7838: PPUSH
7839: LD_INT 1
7841: PPUSH
7842: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7846: LD_EXP 8
7850: PPUSH
7851: CALL_OW 310
7855: IFFALSE 7807
// SetSide ( dep1 , 1 ) ;
7857: LD_INT 1
7859: PPUSH
7860: LD_INT 1
7862: PPUSH
7863: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7867: LD_EXP 8
7871: PPUSH
7872: LD_INT 1
7874: PPUSH
7875: CALL_OW 235
// InGameOff ;
7879: CALL_OW 9
// end ;
7883: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7884: LD_EXP 8
7888: PPUSH
7889: CALL_OW 310
7893: PUSH
7894: LD_EXP 22
7898: PUSH
7899: LD_INT 3
7901: EQUAL
7902: NOT
7903: AND
7904: IFFALSE 8039
7906: GO 7908
7908: DISABLE
// begin enable ;
7909: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7910: LD_INT 22
7912: PUSH
7913: LD_INT 1
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: PUSH
7920: LD_INT 21
7922: PUSH
7923: LD_INT 1
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: PUSH
7930: LD_INT 91
7932: PUSH
7933: LD_EXP 8
7937: PPUSH
7938: CALL_OW 310
7942: PUSH
7943: LD_INT 10
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: LIST
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: LIST
7955: PPUSH
7956: CALL_OW 69
7960: PUSH
7961: LD_INT 1
7963: EQUAL
7964: IFFALSE 8039
// begin mikhailStatus = 4 ;
7966: LD_ADDR_EXP 21
7970: PUSH
7971: LD_INT 4
7973: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
7974: LD_INT 1
7976: PPUSH
7977: LD_INT 6
7979: PPUSH
7980: LD_INT 2
7982: PPUSH
7983: LD_INT 1
7985: PPUSH
7986: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7990: LD_EXP 8
7994: PPUSH
7995: LD_INT 6
7997: PPUSH
7998: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
8002: LD_EXP 8
8006: PPUSH
8007: CALL_OW 122
// wait ( 0 0$1 ) ;
8011: LD_INT 35
8013: PPUSH
8014: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
8018: LD_EXP 8
8022: PPUSH
8023: LD_INT 17
8025: PPUSH
8026: CALL_OW 113
// mikhailStatus = 3 ;
8030: LD_ADDR_EXP 21
8034: PUSH
8035: LD_INT 3
8037: ST_TO_ADDR
// disable ;
8038: DISABLE
// end ; end ;
8039: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
8040: LD_EXP 1
8044: PPUSH
8045: LD_EXP 23
8049: PPUSH
8050: CALL_OW 296
8054: PUSH
8055: LD_INT 5
8057: LESS
8058: PUSH
8059: LD_EXP 21
8063: PUSH
8064: LD_INT 3
8066: EQUAL
8067: AND
8068: PUSH
8069: LD_EXP 22
8073: PUSH
8074: LD_INT 3
8076: EQUAL
8077: NOT
8078: AND
8079: IFFALSE 8310
8081: GO 8083
8083: DISABLE
8084: LD_INT 0
8086: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
8087: LD_ADDR_VAR 0 1
8091: PUSH
8092: LD_INT 22
8094: PUSH
8095: LD_INT 1
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PUSH
8102: LD_INT 21
8104: PUSH
8105: LD_INT 1
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: PUSH
8112: LD_INT 26
8114: PUSH
8115: LD_INT 1
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: LIST
8126: PPUSH
8127: CALL_OW 69
8131: PUSH
8132: LD_EXP 1
8136: PUSH
8137: LD_EXP 5
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: DIFF
8146: ST_TO_ADDR
// if not tmp then
8147: LD_VAR 0 1
8151: NOT
8152: IFFALSE 8156
// exit ;
8154: GO 8310
// DialogueOn ;
8156: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
8160: LD_EXP 1
8164: PPUSH
8165: LD_STRING D7-JMM-1
8167: PPUSH
8168: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
8172: LD_VAR 0 1
8176: PUSH
8177: LD_INT 1
8179: ARRAY
8180: PPUSH
8181: LD_STRING D7-Sol1-1
8183: PPUSH
8184: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8188: LD_EXP 1
8192: PPUSH
8193: LD_STRING D7-JMM-2
8195: PPUSH
8196: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8200: LD_VAR 0 1
8204: PUSH
8205: LD_INT 1
8207: ARRAY
8208: PPUSH
8209: LD_STRING D7-Sol1-2
8211: PPUSH
8212: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8216: LD_EXP 1
8220: PPUSH
8221: LD_STRING D7-JMM-3
8223: PPUSH
8224: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8228: LD_VAR 0 1
8232: PUSH
8233: LD_INT 1
8235: ARRAY
8236: PPUSH
8237: LD_STRING D7-Sol1-3
8239: PPUSH
8240: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8244: LD_EXP 3
8248: PPUSH
8249: CALL_OW 302
8253: PUSH
8254: LD_EXP 4
8258: PPUSH
8259: CALL_OW 302
8263: AND
8264: IFFALSE 8306
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8266: LD_EXP 3
8270: PPUSH
8271: LD_STRING D7-Cyrus-3
8273: PPUSH
8274: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8278: LD_VAR 0 1
8282: PUSH
8283: LD_INT 1
8285: ARRAY
8286: PPUSH
8287: LD_STRING D7-Sol1-4
8289: PPUSH
8290: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8294: LD_EXP 4
8298: PPUSH
8299: LD_STRING D7-Lisa-4
8301: PPUSH
8302: CALL_OW 88
// end ; DialogueOff ;
8306: CALL_OW 7
// end ;
8310: PPOPN 1
8312: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8313: LD_EXP 8
8317: PPUSH
8318: CALL_OW 303
8322: PUSH
8323: LD_EXP 21
8327: PUSH
8328: LD_INT 3
8330: EQUAL
8331: AND
8332: IFFALSE 8346
8334: GO 8336
8336: DISABLE
// begin enable ;
8337: ENABLE
// mikhailStatus = 2 ;
8338: LD_ADDR_EXP 21
8342: PUSH
8343: LD_INT 2
8345: ST_TO_ADDR
// end ;
8346: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8347: LD_EXP 8
8351: PPUSH
8352: LD_INT 17
8354: PPUSH
8355: CALL_OW 308
8359: PUSH
8360: LD_EXP 8
8364: PPUSH
8365: CALL_OW 255
8369: PUSH
8370: LD_INT 6
8372: EQUAL
8373: AND
8374: IFFALSE 8407
8376: GO 8378
8378: DISABLE
// begin if not mikhailInBase = 3 then
8379: LD_EXP 22
8383: PUSH
8384: LD_INT 3
8386: EQUAL
8387: NOT
8388: IFFALSE 8398
// mikhailStatus = 3 ;
8390: LD_ADDR_EXP 21
8394: PUSH
8395: LD_INT 3
8397: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8398: LD_EXP 8
8402: PPUSH
8403: CALL_OW 64
// end ;
8407: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8408: LD_EXP 21
8412: PUSH
8413: LD_INT 3
8415: EQUAL
8416: PUSH
8417: LD_EXP 8
8421: PPUSH
8422: CALL_OW 255
8426: PUSH
8427: LD_INT 6
8429: EQUAL
8430: AND
8431: IFFALSE 8624
8433: GO 8435
8435: DISABLE
8436: LD_INT 0
8438: PPUSH
8439: PPUSH
// begin enable ;
8440: ENABLE
// if IsOk ( Mikhail ) then
8441: LD_EXP 8
8445: PPUSH
8446: CALL_OW 302
8450: IFFALSE 8624
// begin attacker := Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) diff [ JMM , Bobby , Cyrus , Lisa ] ;
8452: LD_ADDR_VAR 0 2
8456: PUSH
8457: LD_EXP 8
8461: PPUSH
8462: LD_INT 22
8464: PUSH
8465: LD_INT 1
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: PUSH
8472: LD_INT 21
8474: PUSH
8475: LD_INT 1
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: PPUSH
8486: CALL_OW 69
8490: PPUSH
8491: CALL 10527 0 2
8495: PUSH
8496: LD_EXP 1
8500: PUSH
8501: LD_EXP 2
8505: PUSH
8506: LD_EXP 3
8510: PUSH
8511: LD_EXP 4
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: DIFF
8522: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 10 then
8523: LD_VAR 0 2
8527: PPUSH
8528: LD_EXP 8
8532: PPUSH
8533: CALL_OW 296
8537: PUSH
8538: LD_INT 10
8540: LESS
8541: IFFALSE 8624
// begin if GetSex ( attacker ) = sex_male then
8543: LD_VAR 0 2
8547: PPUSH
8548: CALL_OW 258
8552: PUSH
8553: LD_INT 1
8555: EQUAL
8556: IFFALSE 8592
// begin disable ;
8558: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8559: LD_VAR 0 2
8563: PPUSH
8564: LD_STRING D7a-Sol1-1
8566: PPUSH
8567: CALL_OW 88
// wait ( 0 0$2 ) ;
8571: LD_INT 70
8573: PPUSH
8574: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8578: LD_VAR 0 2
8582: PPUSH
8583: LD_STRING D7a-Sol1-1a
8585: PPUSH
8586: CALL_OW 88
// end else
8590: GO 8624
// begin disable ;
8592: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8593: LD_VAR 0 2
8597: PPUSH
8598: LD_STRING D7a-FSol1-1
8600: PPUSH
8601: CALL_OW 88
// wait ( 0 0$2 ) ;
8605: LD_INT 70
8607: PPUSH
8608: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8612: LD_VAR 0 2
8616: PPUSH
8617: LD_STRING D7a-FSol1-1a
8619: PPUSH
8620: CALL_OW 88
// end ; end ; end ; end ;
8624: PPOPN 2
8626: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8627: LD_EXP 27
8631: PUSH
8632: LD_INT 1
8634: EQUAL
8635: PUSH
8636: LD_INT 22
8638: PPUSH
8639: LD_INT 22
8641: PUSH
8642: LD_INT 3
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: PUSH
8649: LD_INT 21
8651: PUSH
8652: LD_INT 1
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PPUSH
8663: CALL_OW 70
8667: PUSH
8668: LD_INT 2
8670: GREATER
8671: AND
8672: PUSH
8673: LD_INT 22
8675: PPUSH
8676: LD_INT 22
8678: PUSH
8679: LD_INT 1
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: LD_INT 2
8688: PUSH
8689: LD_INT 21
8691: PUSH
8692: LD_INT 1
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: PUSH
8699: LD_INT 59
8701: PUSH
8702: EMPTY
8703: LIST
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: LIST
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: PPUSH
8714: CALL_OW 70
8718: PUSH
8719: LD_INT 0
8721: EQUAL
8722: AND
8723: IFFALSE 8738
8725: GO 8727
8727: DISABLE
// SetSide ( dep1 , 3 ) ;
8728: LD_INT 1
8730: PPUSH
8731: LD_INT 3
8733: PPUSH
8734: CALL_OW 235
8738: END
// export function JMMTraitor ; var i ; begin
8739: LD_INT 0
8741: PPUSH
8742: PPUSH
// if traitor then
8743: LD_EXP 33
8747: IFFALSE 8751
// exit ;
8749: GO 8888
// traitor := true ;
8751: LD_ADDR_EXP 33
8755: PUSH
8756: LD_INT 1
8758: ST_TO_ADDR
// if IsOk ( Lisa ) then
8759: LD_EXP 4
8763: PPUSH
8764: CALL_OW 302
8768: IFFALSE 8790
// begin DialogueOn ;
8770: CALL_OW 6
// Say ( Lisa , D10-Lisa-Traitor ) ;
8774: LD_EXP 4
8778: PPUSH
8779: LD_STRING D10-Lisa-Traitor
8781: PPUSH
8782: CALL_OW 88
// DialogueOff ;
8786: CALL_OW 7
// end ; ComExit ( JMM ) ;
8790: LD_EXP 1
8794: PPUSH
8795: CALL 75736 0 1
// SetAttitude ( 1 , 4 , att_enemy , true ) ;
8799: LD_INT 1
8801: PPUSH
8802: LD_INT 4
8804: PPUSH
8805: LD_INT 2
8807: PPUSH
8808: LD_INT 1
8810: PPUSH
8811: CALL_OW 80
// for i in FilterAllUnits ( [ f_side , 1 ] ) diff JMM do
8815: LD_ADDR_VAR 0 2
8819: PUSH
8820: LD_INT 22
8822: PUSH
8823: LD_INT 1
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PPUSH
8830: CALL_OW 69
8834: PUSH
8835: LD_EXP 1
8839: DIFF
8840: PUSH
8841: FOR_IN
8842: IFFALSE 8872
// begin SetSide ( i , 4 ) ;
8844: LD_VAR 0 2
8848: PPUSH
8849: LD_INT 4
8851: PPUSH
8852: CALL_OW 235
// ComAttackUnit ( i , JMM ) ;
8856: LD_VAR 0 2
8860: PPUSH
8861: LD_EXP 1
8865: PPUSH
8866: CALL_OW 115
// end ;
8870: GO 8841
8872: POP
8873: POP
// wait ( 0 0$30 ) ;
8874: LD_INT 1050
8876: PPUSH
8877: CALL_OW 67
// YouLost ( Traitor ) ;
8881: LD_STRING Traitor
8883: PPUSH
8884: CALL_OW 104
// end ;
8888: LD_VAR 0 1
8892: RET
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8893: LD_EXP 30
8897: PUSH
8898: LD_INT 1
8900: EQUAL
8901: PUSH
8902: LD_INT 22
8904: PUSH
8905: LD_INT 0
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PUSH
8912: LD_INT 25
8914: PUSH
8915: LD_INT 14
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PPUSH
8926: CALL_OW 69
8930: PUSH
8931: LD_INT 0
8933: EQUAL
8934: AND
8935: IFFALSE 9036
8937: GO 8939
8939: DISABLE
8940: LD_INT 0
8942: PPUSH
8943: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8944: LD_ADDR_VAR 0 2
8948: PUSH
8949: LD_INT 22
8951: PUSH
8952: LD_INT 1
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: PUSH
8959: LD_INT 21
8961: PUSH
8962: LD_INT 1
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: PUSH
8969: LD_INT 23
8971: PUSH
8972: LD_INT 1
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: LIST
8983: PPUSH
8984: CALL_OW 69
8988: ST_TO_ADDR
// for i in tmp do
8989: LD_ADDR_VAR 0 1
8993: PUSH
8994: LD_VAR 0 2
8998: PUSH
8999: FOR_IN
9000: IFFALSE 9027
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
9002: LD_VAR 0 1
9006: PPUSH
9007: LD_INT 1
9009: PPUSH
9010: LD_INT 4
9012: PPUSH
9013: CALL_OW 12
9017: PPUSH
9018: LD_INT 300
9020: PPUSH
9021: CALL_OW 492
9025: GO 8999
9027: POP
9028: POP
// SetAchievement ( ACH_TIGER ) ;
9029: LD_STRING ACH_TIGER
9031: PPUSH
9032: CALL_OW 543
// end ;
9036: PPOPN 2
9038: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
9039: LD_INT 22
9041: PUSH
9042: LD_INT 1
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 34
9051: PUSH
9052: LD_INT 51
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PPUSH
9063: CALL_OW 69
9067: PUSH
9068: LD_INT 2
9070: GREATEREQUAL
9071: IFFALSE 9083
9073: GO 9075
9075: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
9076: LD_STRING ACH_CARGO
9078: PPUSH
9079: CALL_OW 543
9083: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , un ; begin
9084: LD_INT 0
9086: PPUSH
9087: PPUSH
9088: PPUSH
// for i = 1 to count do
9089: LD_ADDR_VAR 0 8
9093: PUSH
9094: DOUBLE
9095: LD_INT 1
9097: DEC
9098: ST_TO_ADDR
9099: LD_VAR 0 6
9103: PUSH
9104: FOR_TO
9105: IFFALSE 9186
// begin uc_side = side ;
9107: LD_ADDR_OWVAR 20
9111: PUSH
9112: LD_VAR 0 1
9116: ST_TO_ADDR
// uc_nation = nation ;
9117: LD_ADDR_OWVAR 21
9121: PUSH
9122: LD_VAR 0 2
9126: ST_TO_ADDR
// hc_gallery =  ;
9127: LD_ADDR_OWVAR 33
9131: PUSH
9132: LD_STRING 
9134: ST_TO_ADDR
// hc_name =  ;
9135: LD_ADDR_OWVAR 26
9139: PUSH
9140: LD_STRING 
9142: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
9143: LD_INT 0
9145: PPUSH
9146: LD_VAR 0 5
9150: PPUSH
9151: LD_VAR 0 4
9155: PPUSH
9156: CALL_OW 380
// un = CreateHuman ;
9160: LD_ADDR_VAR 0 9
9164: PUSH
9165: CALL_OW 44
9169: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
9170: LD_VAR 0 9
9174: PPUSH
9175: LD_VAR 0 3
9179: PPUSH
9180: CALL_OW 52
// end ;
9184: GO 9104
9186: POP
9187: POP
// end ;
9188: LD_VAR 0 7
9192: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
9193: LD_INT 0
9195: PPUSH
9196: PPUSH
9197: PPUSH
// uc_side := GetSide ( b ) ;
9198: LD_ADDR_OWVAR 20
9202: PUSH
9203: LD_VAR 0 2
9207: PPUSH
9208: CALL_OW 255
9212: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
9213: LD_ADDR_OWVAR 21
9217: PUSH
9218: LD_VAR 0 2
9222: PPUSH
9223: CALL_OW 248
9227: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
9228: LD_INT 0
9230: PPUSH
9231: LD_INT 1
9233: PPUSH
9234: LD_VAR 0 1
9238: PPUSH
9239: CALL_OW 380
// un = CreateHuman ;
9243: LD_ADDR_VAR 0 4
9247: PUSH
9248: CALL_OW 44
9252: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
9253: LD_ADDR_VAR 0 5
9257: PUSH
9258: LD_VAR 0 2
9262: PPUSH
9263: CALL_OW 254
9267: PUSH
9268: LD_INT 3
9270: MINUS
9271: ST_TO_ADDR
// if dir < 0 then
9272: LD_VAR 0 5
9276: PUSH
9277: LD_INT 0
9279: LESS
9280: IFFALSE 9296
// dir := 6 + dir ;
9282: LD_ADDR_VAR 0 5
9286: PUSH
9287: LD_INT 6
9289: PUSH
9290: LD_VAR 0 5
9294: PLUS
9295: ST_TO_ADDR
// SetDir ( un , dir ) ;
9296: LD_VAR 0 4
9300: PPUSH
9301: LD_VAR 0 5
9305: PPUSH
9306: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
9310: LD_VAR 0 4
9314: PPUSH
9315: LD_VAR 0 2
9319: PPUSH
9320: CALL_OW 52
// end ;
9324: LD_VAR 0 3
9328: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkList ; begin
9329: LD_INT 0
9331: PPUSH
9332: PPUSH
9333: PPUSH
9334: PPUSH
// engineerOkList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
9335: LD_ADDR_VAR 0 7
9339: PUSH
9340: LD_INT 22
9342: PUSH
9343: LD_VAR 0 1
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: PUSH
9352: LD_INT 25
9354: PUSH
9355: LD_INT 2
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: PUSH
9362: LD_INT 24
9364: PUSH
9365: LD_INT 1000
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: LIST
9376: PPUSH
9377: CALL_OW 69
9381: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9382: LD_ADDR_VAR 0 5
9386: PUSH
9387: LD_VAR 0 3
9391: PPUSH
9392: LD_INT 22
9394: PUSH
9395: LD_VAR 0 1
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: LD_INT 21
9406: PUSH
9407: LD_INT 3
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: PUSH
9414: LD_INT 3
9416: PUSH
9417: LD_INT 24
9419: PUSH
9420: LD_INT 1000
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: LIST
9435: PUSH
9436: EMPTY
9437: LIST
9438: PPUSH
9439: CALL_OW 70
9443: ST_TO_ADDR
// if not buildingsList and not engineerOkList then
9444: LD_VAR 0 5
9448: NOT
9449: PUSH
9450: LD_VAR 0 7
9454: NOT
9455: AND
9456: IFFALSE 9460
// exit ;
9458: GO 9656
// if not buildingsList and UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) and IsOk ( building ) then
9460: LD_VAR 0 5
9464: NOT
9465: PUSH
9466: LD_VAR 0 7
9470: PPUSH
9471: LD_INT 3
9473: PUSH
9474: LD_INT 54
9476: PUSH
9477: EMPTY
9478: LIST
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PPUSH
9484: CALL_OW 72
9488: AND
9489: PUSH
9490: LD_VAR 0 2
9494: PPUSH
9495: CALL_OW 302
9499: AND
9500: IFFALSE 9534
// ComEnterUnit ( UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) , building ) ;
9502: LD_VAR 0 7
9506: PPUSH
9507: LD_INT 3
9509: PUSH
9510: LD_INT 54
9512: PUSH
9513: EMPTY
9514: LIST
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: PPUSH
9520: CALL_OW 72
9524: PPUSH
9525: LD_VAR 0 2
9529: PPUSH
9530: CALL_OW 120
// if buildingsList then
9534: LD_VAR 0 5
9538: IFFALSE 9656
// begin for i in engineerOkList do
9540: LD_ADDR_VAR 0 6
9544: PUSH
9545: LD_VAR 0 7
9549: PUSH
9550: FOR_IN
9551: IFFALSE 9654
// if IsInUnit ( i ) then
9553: LD_VAR 0 6
9557: PPUSH
9558: CALL_OW 310
9562: IFFALSE 9575
// ComExitBuilding ( i ) else
9564: LD_VAR 0 6
9568: PPUSH
9569: CALL_OW 122
9573: GO 9652
// if GetLives ( i ) > 650 then
9575: LD_VAR 0 6
9579: PPUSH
9580: CALL_OW 256
9584: PUSH
9585: LD_INT 650
9587: GREATER
9588: IFFALSE 9616
// ComRepairBuilding ( i , NearestUnitToUnit ( buildingsList , i ) ) else
9590: LD_VAR 0 6
9594: PPUSH
9595: LD_VAR 0 5
9599: PPUSH
9600: LD_VAR 0 6
9604: PPUSH
9605: CALL_OW 74
9609: PPUSH
9610: CALL_OW 130
9614: GO 9652
// if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9616: LD_VAR 0 6
9620: PPUSH
9621: LD_INT 56
9623: PPUSH
9624: LD_INT 10
9626: PPUSH
9627: CALL_OW 297
9631: PUSH
9632: LD_INT 8
9634: GREATER
9635: IFFALSE 9652
// ComMoveXY ( i , 56 , 10 ) ;
9637: LD_VAR 0 6
9641: PPUSH
9642: LD_INT 56
9644: PPUSH
9645: LD_INT 10
9647: PPUSH
9648: CALL_OW 111
9652: GO 9550
9654: POP
9655: POP
// end ; end ;
9656: LD_VAR 0 4
9660: RET
// export function HealUnitInBase ( side , healArea , baseArea , building ) ; var sciList , i , damageUnits ; begin
9661: LD_INT 0
9663: PPUSH
9664: PPUSH
9665: PPUSH
9666: PPUSH
// sciList := FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9667: LD_ADDR_VAR 0 6
9671: PUSH
9672: LD_INT 22
9674: PUSH
9675: LD_VAR 0 1
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: PUSH
9684: LD_INT 25
9686: PUSH
9687: LD_INT 4
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: PUSH
9694: LD_INT 24
9696: PUSH
9697: LD_INT 250
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: LIST
9708: PPUSH
9709: CALL_OW 69
9713: ST_TO_ADDR
// damageUnits := FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9714: LD_ADDR_VAR 0 8
9718: PUSH
9719: LD_VAR 0 3
9723: PPUSH
9724: LD_INT 22
9726: PUSH
9727: LD_VAR 0 1
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: PUSH
9736: LD_INT 21
9738: PUSH
9739: LD_INT 1
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: LD_INT 3
9748: PUSH
9749: LD_INT 24
9751: PUSH
9752: LD_INT 650
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: PPUSH
9768: CALL_OW 70
9772: ST_TO_ADDR
// if not damageUnits and not sciList then
9773: LD_VAR 0 8
9777: NOT
9778: PUSH
9779: LD_VAR 0 6
9783: NOT
9784: AND
9785: IFFALSE 9789
// exit ;
9787: GO 9928
// if damageUnits then
9789: LD_VAR 0 8
9793: IFFALSE 9872
// begin for i in sciList do
9795: LD_ADDR_VAR 0 7
9799: PUSH
9800: LD_VAR 0 6
9804: PUSH
9805: FOR_IN
9806: IFFALSE 9868
// if IsInUnit ( i ) then
9808: LD_VAR 0 7
9812: PPUSH
9813: CALL_OW 310
9817: IFFALSE 9830
// ComExitBuilding ( i ) else
9819: LD_VAR 0 7
9823: PPUSH
9824: CALL_OW 122
9828: GO 9866
// if not HasTask ( i ) then
9830: LD_VAR 0 7
9834: PPUSH
9835: CALL_OW 314
9839: NOT
9840: IFFALSE 9866
// ComHeal ( i , NearestUnitToUnit ( damageUnits , i ) ) ;
9842: LD_VAR 0 7
9846: PPUSH
9847: LD_VAR 0 8
9851: PPUSH
9852: LD_VAR 0 7
9856: PPUSH
9857: CALL_OW 74
9861: PPUSH
9862: CALL_OW 128
9866: GO 9805
9868: POP
9869: POP
// end else
9870: GO 9928
// if UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) then
9872: LD_VAR 0 6
9876: PPUSH
9877: LD_INT 3
9879: PUSH
9880: LD_INT 54
9882: PUSH
9883: EMPTY
9884: LIST
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PPUSH
9890: CALL_OW 72
9894: IFFALSE 9928
// ComEnterUnit ( UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) , building ) ;
9896: LD_VAR 0 6
9900: PPUSH
9901: LD_INT 3
9903: PUSH
9904: LD_INT 54
9906: PUSH
9907: EMPTY
9908: LIST
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: PPUSH
9914: CALL_OW 72
9918: PPUSH
9919: LD_VAR 0 4
9923: PPUSH
9924: CALL_OW 120
// end ;
9928: LD_VAR 0 5
9932: RET
// export function DefendBases ( area , enemySide , defendersList , building ) ; var i , enemy , nearestUnit ; begin
9933: LD_INT 0
9935: PPUSH
9936: PPUSH
9937: PPUSH
9938: PPUSH
// if not defendersList then
9939: LD_VAR 0 3
9943: NOT
9944: IFFALSE 9948
// exit ;
9946: GO 10330
// enemy := FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9948: LD_ADDR_VAR 0 7
9952: PUSH
9953: LD_VAR 0 1
9957: PPUSH
9958: LD_INT 22
9960: PUSH
9961: LD_VAR 0 2
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 2
9972: PUSH
9973: LD_INT 21
9975: PUSH
9976: LD_INT 2
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PUSH
9983: LD_INT 21
9985: PUSH
9986: LD_INT 1
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: LIST
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PPUSH
10002: CALL_OW 70
10006: ST_TO_ADDR
// if enemy then
10007: LD_VAR 0 7
10011: IFFALSE 10232
// begin for i in defendersList do
10013: LD_ADDR_VAR 0 6
10017: PUSH
10018: LD_VAR 0 3
10022: PUSH
10023: FOR_IN
10024: IFFALSE 10228
// begin if IsInUnit ( i ) and GetLives ( i ) > 500 then
10026: LD_VAR 0 6
10030: PPUSH
10031: CALL_OW 310
10035: PUSH
10036: LD_VAR 0 6
10040: PPUSH
10041: CALL_OW 256
10045: PUSH
10046: LD_INT 500
10048: GREATER
10049: AND
10050: IFFALSE 10063
// ComExitBuilding ( i ) else
10052: LD_VAR 0 6
10056: PPUSH
10057: CALL_OW 122
10061: GO 10226
// if GetLives ( i ) > 650 then
10063: LD_VAR 0 6
10067: PPUSH
10068: CALL_OW 256
10072: PUSH
10073: LD_INT 650
10075: GREATER
10076: IFFALSE 10129
// begin nearestUnit := NearestUnitToUnit ( enemy , i ) ;
10078: LD_ADDR_VAR 0 8
10082: PUSH
10083: LD_VAR 0 7
10087: PPUSH
10088: LD_VAR 0 6
10092: PPUSH
10093: CALL_OW 74
10097: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearestUnit ) , GetY ( nearestUnit ) ) ;
10098: LD_VAR 0 6
10102: PPUSH
10103: LD_VAR 0 8
10107: PPUSH
10108: CALL_OW 250
10112: PPUSH
10113: LD_VAR 0 8
10117: PPUSH
10118: CALL_OW 251
10122: PPUSH
10123: CALL_OW 114
// end else
10127: GO 10226
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
10129: LD_INT 22
10131: PUSH
10132: LD_INT 3
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: PUSH
10139: LD_INT 25
10141: PUSH
10142: LD_INT 4
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: PPUSH
10153: CALL_OW 69
10157: IFFALSE 10197
// begin if GetDistUnitXY ( i , 56 , 10 ) > 8 then
10159: LD_VAR 0 6
10163: PPUSH
10164: LD_INT 56
10166: PPUSH
10167: LD_INT 10
10169: PPUSH
10170: CALL_OW 297
10174: PUSH
10175: LD_INT 8
10177: GREATER
10178: IFFALSE 10195
// ComMoveXY ( i , 56 , 10 ) ;
10180: LD_VAR 0 6
10184: PPUSH
10185: LD_INT 56
10187: PPUSH
10188: LD_INT 10
10190: PPUSH
10191: CALL_OW 111
// end else
10195: GO 10226
// if GetLives ( i ) <= 500 then
10197: LD_VAR 0 6
10201: PPUSH
10202: CALL_OW 256
10206: PUSH
10207: LD_INT 500
10209: LESSEQUAL
10210: IFFALSE 10226
// ComEnterUnit ( i , building ) ;
10212: LD_VAR 0 6
10216: PPUSH
10217: LD_VAR 0 4
10221: PPUSH
10222: CALL_OW 120
// end ;
10226: GO 10023
10228: POP
10229: POP
// end else
10230: GO 10330
// if UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) then
10232: LD_VAR 0 3
10236: PPUSH
10237: LD_INT 56
10239: PUSH
10240: EMPTY
10241: LIST
10242: PUSH
10243: LD_INT 3
10245: PUSH
10246: LD_INT 60
10248: PUSH
10249: EMPTY
10250: LIST
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: PUSH
10256: LD_INT 24
10258: PUSH
10259: LD_INT 1000
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: LIST
10270: PPUSH
10271: CALL_OW 72
10275: IFFALSE 10330
// ComEnterUnit ( UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) , building ) ;
10277: LD_VAR 0 3
10281: PPUSH
10282: LD_INT 56
10284: PUSH
10285: EMPTY
10286: LIST
10287: PUSH
10288: LD_INT 3
10290: PUSH
10291: LD_INT 60
10293: PUSH
10294: EMPTY
10295: LIST
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: PUSH
10301: LD_INT 24
10303: PUSH
10304: LD_INT 1000
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: LIST
10315: PPUSH
10316: CALL_OW 72
10320: PPUSH
10321: LD_VAR 0 4
10325: PPUSH
10326: CALL_OW 120
// end ;
10330: LD_VAR 0 5
10334: RET
// export function RussianTrap ; var i ; begin
10335: LD_INT 0
10337: PPUSH
10338: PPUSH
// if GetSide ( Brian ) = 4 then
10339: LD_EXP 6
10343: PPUSH
10344: CALL_OW 255
10348: PUSH
10349: LD_INT 4
10351: EQUAL
10352: IFFALSE 10375
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10354: LD_EXP 6
10358: PUSH
10359: LD_EXP 7
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PPUSH
10368: LD_INT 0
10370: PPUSH
10371: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10375: LD_ADDR_VAR 0 2
10379: PUSH
10380: LD_INT 22
10382: PUSH
10383: LD_INT 3
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: PUSH
10390: LD_INT 21
10392: PUSH
10393: LD_INT 1
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PPUSH
10404: CALL_OW 69
10408: PUSH
10409: FOR_IN
10410: IFFALSE 10520
// begin ComExitBuilding ( i ) ;
10412: LD_VAR 0 2
10416: PPUSH
10417: CALL_OW 122
// wait ( 0 0$1 ) ;
10421: LD_INT 35
10423: PPUSH
10424: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10428: LD_VAR 0 2
10432: PPUSH
10433: LD_INT 120
10435: PPUSH
10436: LD_INT 56
10438: PPUSH
10439: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10443: LD_VAR 0 2
10447: PPUSH
10448: LD_INT 111
10450: PPUSH
10451: LD_INT 37
10453: PPUSH
10454: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10458: LD_INT 33
10460: PPUSH
10461: CALL_OW 255
10465: PUSH
10466: LD_INT 3
10468: EQUAL
10469: PUSH
10470: LD_INT 33
10472: PPUSH
10473: CALL_OW 302
10477: AND
10478: IFFALSE 10494
// AddComEnterUnit ( i , arm2 ) else
10480: LD_VAR 0 2
10484: PPUSH
10485: LD_INT 33
10487: PPUSH
10488: CALL_OW 180
10492: GO 10518
// begin AddComCrawl ( i ) ;
10494: LD_VAR 0 2
10498: PPUSH
10499: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10503: LD_VAR 0 2
10507: PPUSH
10508: LD_INT 109
10510: PPUSH
10511: LD_INT 30
10513: PPUSH
10514: CALL_OW 174
// end ; end ;
10518: GO 10409
10520: POP
10521: POP
// end ;
10522: LD_VAR 0 1
10526: RET
// export function Nearest ( un , units ) ; var nearestDist , nearestUn , sold , dist ; begin
10527: LD_INT 0
10529: PPUSH
10530: PPUSH
10531: PPUSH
10532: PPUSH
10533: PPUSH
// nearestDist := 1000 ;
10534: LD_ADDR_VAR 0 4
10538: PUSH
10539: LD_INT 1000
10541: ST_TO_ADDR
// nearestUn := un ;
10542: LD_ADDR_VAR 0 5
10546: PUSH
10547: LD_VAR 0 1
10551: ST_TO_ADDR
// for sold in units do
10552: LD_ADDR_VAR 0 6
10556: PUSH
10557: LD_VAR 0 2
10561: PUSH
10562: FOR_IN
10563: IFFALSE 10619
// begin dist := GetDistUnits ( un , sold ) ;
10565: LD_ADDR_VAR 0 7
10569: PUSH
10570: LD_VAR 0 1
10574: PPUSH
10575: LD_VAR 0 6
10579: PPUSH
10580: CALL_OW 296
10584: ST_TO_ADDR
// if dist < nearestDist then
10585: LD_VAR 0 7
10589: PUSH
10590: LD_VAR 0 4
10594: LESS
10595: IFFALSE 10617
// begin nearestUn := sold ;
10597: LD_ADDR_VAR 0 5
10601: PUSH
10602: LD_VAR 0 6
10606: ST_TO_ADDR
// nearestDist := dist ;
10607: LD_ADDR_VAR 0 4
10611: PUSH
10612: LD_VAR 0 7
10616: ST_TO_ADDR
// end ; end ;
10617: GO 10562
10619: POP
10620: POP
// result := NearestUn ;
10621: LD_ADDR_VAR 0 3
10625: PUSH
10626: LD_VAR 0 5
10630: ST_TO_ADDR
// end ;
10631: LD_VAR 0 3
10635: RET
// export function PrepareDifficulty ; begin
10636: LD_INT 0
10638: PPUSH
// if Difficulty = 1 then
10639: LD_OWVAR 67
10643: PUSH
10644: LD_INT 1
10646: EQUAL
10647: IFFALSE 10710
// begin RemoveUnit ( brw2 ) ;
10649: LD_INT 9
10651: PPUSH
10652: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10656: LD_INT 30
10658: PPUSH
10659: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10663: LD_INT 52
10665: PPUSH
10666: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10670: LD_INT 63
10672: PPUSH
10673: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10677: LD_INT 5
10679: PUSH
10680: LD_INT 4
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: PPUSH
10687: LD_INT 60
10689: PPUSH
10690: CALL_OW 240
// RuSoldMinLevel = 0 ;
10694: LD_ADDR_EXP 13
10698: PUSH
10699: LD_INT 0
10701: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10702: LD_ADDR_EXP 14
10706: PUSH
10707: LD_INT 1
10709: ST_TO_ADDR
// end ; if Difficulty = 2 then
10710: LD_OWVAR 67
10714: PUSH
10715: LD_INT 2
10717: EQUAL
10718: IFFALSE 10760
// begin RemoveUnit ( brw4 ) ;
10720: LD_INT 52
10722: PPUSH
10723: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10727: LD_INT 5
10729: PUSH
10730: LD_INT 4
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: PPUSH
10737: LD_INT 50
10739: PPUSH
10740: CALL_OW 240
// RuSoldMinLevel = 1 ;
10744: LD_ADDR_EXP 13
10748: PUSH
10749: LD_INT 1
10751: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10752: LD_ADDR_EXP 14
10756: PUSH
10757: LD_INT 2
10759: ST_TO_ADDR
// end ; if Difficulty >= 3 then
10760: LD_OWVAR 67
10764: PUSH
10765: LD_INT 3
10767: GREATEREQUAL
10768: IFFALSE 10803
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10770: LD_INT 5
10772: PUSH
10773: LD_INT 4
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: PPUSH
10780: LD_INT 40
10782: PPUSH
10783: CALL_OW 240
// RuSoldMinLevel = 2 ;
10787: LD_ADDR_EXP 13
10791: PUSH
10792: LD_INT 2
10794: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10795: LD_ADDR_EXP 14
10799: PUSH
10800: LD_INT 3
10802: ST_TO_ADDR
// end ; end ;
10803: LD_VAR 0 1
10807: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10808: LD_INT 0
10810: PPUSH
10811: PPUSH
10812: PPUSH
// if not vehicles then
10813: LD_VAR 0 1
10817: NOT
10818: IFFALSE 10822
// exit ;
10820: GO 10952
// tmp := [ ] ;
10822: LD_ADDR_VAR 0 5
10826: PUSH
10827: EMPTY
10828: ST_TO_ADDR
// for i in vehicles do
10829: LD_ADDR_VAR 0 4
10833: PUSH
10834: LD_VAR 0 1
10838: PUSH
10839: FOR_IN
10840: IFFALSE 10936
// tmp := Replace ( tmp , tmp + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10842: LD_ADDR_VAR 0 5
10846: PUSH
10847: LD_VAR 0 5
10851: PPUSH
10852: LD_VAR 0 5
10856: PUSH
10857: LD_INT 1
10859: PLUS
10860: PPUSH
10861: LD_VAR 0 4
10865: PPUSH
10866: CALL_OW 265
10870: PUSH
10871: LD_VAR 0 4
10875: PPUSH
10876: CALL_OW 262
10880: PUSH
10881: LD_VAR 0 4
10885: PPUSH
10886: CALL_OW 263
10890: PUSH
10891: LD_VAR 0 4
10895: PPUSH
10896: CALL_OW 264
10900: PUSH
10901: LD_VAR 0 4
10905: PPUSH
10906: CALL_OW 261
10910: PUSH
10911: LD_VAR 0 4
10915: PPUSH
10916: CALL_OW 256
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: PPUSH
10929: CALL_OW 1
10933: ST_TO_ADDR
10934: GO 10839
10936: POP
10937: POP
// SaveVariable ( tmp , ident ) ;
10938: LD_VAR 0 5
10942: PPUSH
10943: LD_VAR 0 2
10947: PPUSH
10948: CALL_OW 39
// end ; end_of_file
10952: LD_VAR 0 3
10956: RET
// export function PrepareHeroes ; var plive , prefix ; begin
10957: LD_INT 0
10959: PPUSH
10960: PPUSH
10961: PPUSH
// prefix := 01_ ;
10962: LD_ADDR_VAR 0 3
10966: PUSH
10967: LD_STRING 01_
10969: ST_TO_ADDR
// uc_side := 1 ;
10970: LD_ADDR_OWVAR 20
10974: PUSH
10975: LD_INT 1
10977: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debug ) , prefix ) ;
10978: LD_ADDR_EXP 1
10982: PUSH
10983: LD_STRING JMM
10985: PPUSH
10986: LD_EXP 35
10990: NOT
10991: PPUSH
10992: LD_VAR 0 3
10996: PPUSH
10997: CALL 37636 0 3
11001: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
11002: LD_ADDR_VAR 0 2
11006: PUSH
11007: LD_STRING 01_JMMLifePoints_1
11009: PPUSH
11010: LD_INT 1000
11012: PPUSH
11013: CALL_OW 30
11017: ST_TO_ADDR
// if plive < 250 then
11018: LD_VAR 0 2
11022: PUSH
11023: LD_INT 250
11025: LESS
11026: IFFALSE 11036
// plive := 300 ;
11028: LD_ADDR_VAR 0 2
11032: PUSH
11033: LD_INT 300
11035: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
11036: LD_EXP 1
11040: PPUSH
11041: LD_VAR 0 2
11045: PPUSH
11046: CALL_OW 234
// Powell := NewCharacter ( Powell ) ;
11050: LD_ADDR_EXP 9
11054: PUSH
11055: LD_STRING Powell
11057: PPUSH
11058: CALL_OW 25
11062: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , prefix ) ;
11063: LD_ADDR_EXP 2
11067: PUSH
11068: LD_STRING Bobby
11070: PPUSH
11071: LD_EXP 35
11075: NOT
11076: PPUSH
11077: LD_VAR 0 3
11081: PPUSH
11082: CALL 37636 0 3
11086: ST_TO_ADDR
// if Bobby then
11087: LD_EXP 2
11091: IFFALSE 11141
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
11093: LD_ADDR_VAR 0 2
11097: PUSH
11098: LD_STRING 01_BobbyLifePoints_1
11100: PPUSH
11101: LD_INT 1000
11103: PPUSH
11104: CALL_OW 30
11108: ST_TO_ADDR
// if plive < 250 then
11109: LD_VAR 0 2
11113: PUSH
11114: LD_INT 250
11116: LESS
11117: IFFALSE 11127
// plive := 300 ;
11119: LD_ADDR_VAR 0 2
11123: PUSH
11124: LD_INT 300
11126: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
11127: LD_EXP 2
11131: PPUSH
11132: LD_VAR 0 2
11136: PPUSH
11137: CALL_OW 234
// end ; Cyrus := PrepareUnit ( Cyrus , ( not debug ) , prefix ) ;
11141: LD_ADDR_EXP 3
11145: PUSH
11146: LD_STRING Cyrus
11148: PPUSH
11149: LD_EXP 35
11153: NOT
11154: PPUSH
11155: LD_VAR 0 3
11159: PPUSH
11160: CALL 37636 0 3
11164: ST_TO_ADDR
// if Cyrus then
11165: LD_EXP 3
11169: IFFALSE 11219
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
11171: LD_ADDR_VAR 0 2
11175: PUSH
11176: LD_STRING 01_CyrusLifePoints_1
11178: PPUSH
11179: LD_INT 1000
11181: PPUSH
11182: CALL_OW 30
11186: ST_TO_ADDR
// if plive < 250 then
11187: LD_VAR 0 2
11191: PUSH
11192: LD_INT 250
11194: LESS
11195: IFFALSE 11205
// plive := 300 ;
11197: LD_ADDR_VAR 0 2
11201: PUSH
11202: LD_INT 300
11204: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
11205: LD_EXP 3
11209: PPUSH
11210: LD_VAR 0 2
11214: PPUSH
11215: CALL_OW 234
// end ; Khatam := NewCharacter ( Khatam ) ;
11219: LD_ADDR_EXP 5
11223: PUSH
11224: LD_STRING Khatam
11226: PPUSH
11227: CALL_OW 25
11231: ST_TO_ADDR
// uc_side := 4 ;
11232: LD_ADDR_OWVAR 20
11236: PUSH
11237: LD_INT 4
11239: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
11240: LD_ADDR_EXP 4
11244: PUSH
11245: LD_STRING Lisa
11247: PPUSH
11248: CALL_OW 25
11252: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
11253: LD_EXP 1
11257: PPUSH
11258: LD_INT 3
11260: PPUSH
11261: LD_INT 0
11263: PPUSH
11264: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
11268: LD_EXP 2
11272: PPUSH
11273: LD_INT 3
11275: PPUSH
11276: LD_INT 0
11278: PPUSH
11279: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
11283: LD_EXP 3
11287: PPUSH
11288: LD_INT 3
11290: PPUSH
11291: LD_INT 0
11293: PPUSH
11294: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
11298: LD_EXP 4
11302: PPUSH
11303: LD_INT 5
11305: PPUSH
11306: LD_INT 0
11308: PPUSH
11309: CALL_OW 49
// ComCrawl ( Lisa ) ;
11313: LD_EXP 4
11317: PPUSH
11318: CALL_OW 137
// end ;
11322: LD_VAR 0 1
11326: RET
// export function PrepareLisSquad ; var i , un ; begin
11327: LD_INT 0
11329: PPUSH
11330: PPUSH
11331: PPUSH
// uc_side := 4 ;
11332: LD_ADDR_OWVAR 20
11336: PUSH
11337: LD_INT 4
11339: ST_TO_ADDR
// uc_nation := 1 ;
11340: LD_ADDR_OWVAR 21
11344: PUSH
11345: LD_INT 1
11347: ST_TO_ADDR
// hc_class := 2 ;
11348: LD_ADDR_OWVAR 28
11352: PUSH
11353: LD_INT 2
11355: ST_TO_ADDR
// hc_sex := sex_male ;
11356: LD_ADDR_OWVAR 27
11360: PUSH
11361: LD_INT 1
11363: ST_TO_ADDR
// hc_gallery :=  ;
11364: LD_ADDR_OWVAR 33
11368: PUSH
11369: LD_STRING 
11371: ST_TO_ADDR
// hc_name :=  ;
11372: LD_ADDR_OWVAR 26
11376: PUSH
11377: LD_STRING 
11379: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11380: LD_ADDR_OWVAR 30
11384: PUSH
11385: LD_INT 0
11387: PUSH
11388: LD_INT 1
11390: PUSH
11391: LD_INT 0
11393: PUSH
11394: LD_INT 0
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11403: LD_ADDR_OWVAR 31
11407: PUSH
11408: LD_INT 1
11410: PUSH
11411: LD_INT 2
11413: PUSH
11414: LD_INT 0
11416: PUSH
11417: LD_INT 0
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: ST_TO_ADDR
// un := CreateHuman ;
11426: LD_ADDR_VAR 0 3
11430: PUSH
11431: CALL_OW 44
11435: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11436: LD_VAR 0 3
11440: PPUSH
11441: LD_INT 6
11443: PPUSH
11444: LD_INT 0
11446: PPUSH
11447: CALL_OW 49
// hc_sex := sex_female ;
11451: LD_ADDR_OWVAR 27
11455: PUSH
11456: LD_INT 2
11458: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11459: LD_ADDR_OWVAR 30
11463: PUSH
11464: LD_INT 0
11466: PUSH
11467: LD_INT 0
11469: PUSH
11470: LD_INT 0
11472: PUSH
11473: LD_INT 1
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11482: LD_ADDR_OWVAR 31
11486: PUSH
11487: LD_INT 0
11489: PUSH
11490: LD_INT 1
11492: PUSH
11493: LD_INT 0
11495: PUSH
11496: LD_INT 1
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: ST_TO_ADDR
// un := CreateHuman ;
11505: LD_ADDR_VAR 0 3
11509: PUSH
11510: CALL_OW 44
11514: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11515: LD_VAR 0 3
11519: PPUSH
11520: LD_INT 6
11522: PPUSH
11523: LD_INT 0
11525: PPUSH
11526: CALL_OW 49
// if not Bobby and not Cyrus then
11530: LD_EXP 2
11534: NOT
11535: PUSH
11536: LD_EXP 3
11540: NOT
11541: AND
11542: IFFALSE 11631
// begin hc_class := 1 ;
11544: LD_ADDR_OWVAR 28
11548: PUSH
11549: LD_INT 1
11551: ST_TO_ADDR
// hc_sex := sex_male ;
11552: LD_ADDR_OWVAR 27
11556: PUSH
11557: LD_INT 1
11559: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11560: LD_ADDR_OWVAR 30
11564: PUSH
11565: LD_INT 2
11567: PUSH
11568: LD_INT 3
11570: PUSH
11571: LD_INT 1
11573: PUSH
11574: LD_INT 0
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11583: LD_ADDR_OWVAR 31
11587: PUSH
11588: LD_INT 2
11590: PUSH
11591: LD_INT 3
11593: PUSH
11594: LD_INT 1
11596: PUSH
11597: LD_INT 0
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: ST_TO_ADDR
// un := CreateHuman ;
11606: LD_ADDR_VAR 0 3
11610: PUSH
11611: CALL_OW 44
11615: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11616: LD_VAR 0 3
11620: PPUSH
11621: LD_INT 31
11623: PPUSH
11624: LD_INT 0
11626: PPUSH
11627: CALL_OW 49
// end ; InitHc ;
11631: CALL_OW 19
// end ;
11635: LD_VAR 0 1
11639: RET
// export function PrepareOtherAmericans ; begin
11640: LD_INT 0
11642: PPUSH
// uc_side := 4 ;
11643: LD_ADDR_OWVAR 20
11647: PUSH
11648: LD_INT 4
11650: ST_TO_ADDR
// uc_nation := 1 ;
11651: LD_ADDR_OWVAR 21
11655: PUSH
11656: LD_INT 1
11658: ST_TO_ADDR
// hc_gallery :=  ;
11659: LD_ADDR_OWVAR 33
11663: PUSH
11664: LD_STRING 
11666: ST_TO_ADDR
// hc_name := Tom Garvin ;
11667: LD_ADDR_OWVAR 26
11671: PUSH
11672: LD_STRING Tom Garvin
11674: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 2 ) ;
11675: LD_INT 1
11677: PPUSH
11678: LD_INT 1
11680: PPUSH
11681: LD_INT 2
11683: PPUSH
11684: CALL_OW 380
// Brian := CreateHuman ;
11688: LD_ADDR_EXP 6
11692: PUSH
11693: CALL_OW 44
11697: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11698: LD_EXP 6
11702: PPUSH
11703: LD_INT 10
11705: PPUSH
11706: LD_INT 0
11708: PPUSH
11709: CALL_OW 49
// hc_name := Jerry White ;
11713: LD_ADDR_OWVAR 26
11717: PUSH
11718: LD_STRING Jerry White
11720: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , 2 ) ;
11721: LD_INT 1
11723: PPUSH
11724: LD_INT 3
11726: PPUSH
11727: LD_INT 2
11729: PPUSH
11730: CALL_OW 380
// Jerry := CreateHuman ;
11734: LD_ADDR_EXP 7
11738: PUSH
11739: CALL_OW 44
11743: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11744: LD_EXP 7
11748: PPUSH
11749: LD_INT 10
11751: PPUSH
11752: LD_INT 0
11754: PPUSH
11755: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11759: LD_EXP 6
11763: PUSH
11764: LD_EXP 7
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PPUSH
11773: CALL_OW 140
// end ;
11777: LD_VAR 0 1
11781: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un , hexes ; begin
11782: LD_INT 0
11784: PPUSH
11785: PPUSH
11786: PPUSH
11787: PPUSH
// hexes := AreaToList ( DeadsSpawn , 0 ) ;
11788: LD_ADDR_VAR 0 4
11792: PUSH
11793: LD_INT 16
11795: PPUSH
11796: LD_INT 0
11798: PPUSH
11799: CALL_OW 517
11803: ST_TO_ADDR
// for i = 1 to 6 do
11804: LD_ADDR_VAR 0 2
11808: PUSH
11809: DOUBLE
11810: LD_INT 1
11812: DEC
11813: ST_TO_ADDR
11814: LD_INT 6
11816: PUSH
11817: FOR_TO
11818: IFFALSE 11964
// begin uc_side := 4 ;
11820: LD_ADDR_OWVAR 20
11824: PUSH
11825: LD_INT 4
11827: ST_TO_ADDR
// uc_nation := 1 ;
11828: LD_ADDR_OWVAR 21
11832: PUSH
11833: LD_INT 1
11835: ST_TO_ADDR
// hc_gallery :=  ;
11836: LD_ADDR_OWVAR 33
11840: PUSH
11841: LD_STRING 
11843: ST_TO_ADDR
// hc_name :=  ;
11844: LD_ADDR_OWVAR 26
11848: PUSH
11849: LD_STRING 
11851: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 1 ) ;
11852: LD_INT 0
11854: PPUSH
11855: LD_INT 1
11857: PUSH
11858: LD_INT 1
11860: PUSH
11861: LD_INT 4
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: LIST
11868: PUSH
11869: LD_VAR 0 2
11873: PUSH
11874: LD_INT 3
11876: MOD
11877: PUSH
11878: LD_INT 1
11880: PLUS
11881: ARRAY
11882: PPUSH
11883: LD_INT 1
11885: PPUSH
11886: CALL_OW 380
// un := CreateHuman ;
11890: LD_ADDR_VAR 0 3
11894: PUSH
11895: CALL_OW 44
11899: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11900: LD_VAR 0 3
11904: PPUSH
11905: LD_INT 0
11907: PPUSH
11908: LD_INT 5
11910: PPUSH
11911: CALL_OW 12
11915: PPUSH
11916: CALL_OW 233
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
11920: LD_VAR 0 3
11924: PPUSH
11925: LD_VAR 0 4
11929: PUSH
11930: LD_INT 1
11932: ARRAY
11933: PUSH
11934: LD_VAR 0 2
11938: ARRAY
11939: PPUSH
11940: LD_VAR 0 4
11944: PUSH
11945: LD_INT 2
11947: ARRAY
11948: PUSH
11949: LD_VAR 0 2
11953: ARRAY
11954: PPUSH
11955: LD_INT 1
11957: PPUSH
11958: CALL_OW 601
// end ;
11962: GO 11817
11964: POP
11965: POP
// DyingSold := CreateHuman ;
11966: LD_ADDR_EXP 36
11970: PUSH
11971: CALL_OW 44
11975: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11976: LD_EXP 36
11980: PPUSH
11981: LD_INT 16
11983: PPUSH
11984: LD_INT 0
11986: PPUSH
11987: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11991: LD_EXP 36
11995: PPUSH
11996: LD_INT 250
11998: PPUSH
11999: CALL_OW 234
// end ; end_of_file
12003: LD_VAR 0 1
12007: RET
// export function PrepareRussianHeroes ; var tmp ; begin
12008: LD_INT 0
12010: PPUSH
12011: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
12012: LD_ADDR_VAR 0 2
12016: PUSH
12017: LD_INT 22
12019: PUSH
12020: LD_INT 1
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PUSH
12027: LD_INT 23
12029: PUSH
12030: LD_INT 1
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PUSH
12037: LD_INT 25
12039: PUSH
12040: LD_INT 2
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: PUSH
12047: LD_INT 50
12049: PUSH
12050: EMPTY
12051: LIST
12052: PUSH
12053: LD_INT 56
12055: PUSH
12056: EMPTY
12057: LIST
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: PPUSH
12066: CALL_OW 69
12070: PUSH
12071: LD_EXP 1
12075: PUSH
12076: EMPTY
12077: LIST
12078: DIFF
12079: ST_TO_ADDR
// if not tmp then
12080: LD_VAR 0 2
12084: NOT
12085: IFFALSE 12089
// exit ;
12087: GO 12165
// uc_side = 6 ;
12089: LD_ADDR_OWVAR 20
12093: PUSH
12094: LD_INT 6
12096: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
12097: LD_ADDR_EXP 8
12101: PUSH
12102: LD_STRING Mikhail
12104: PPUSH
12105: CALL_OW 25
12109: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
12110: LD_EXP 8
12114: PPUSH
12115: LD_INT 3
12117: PPUSH
12118: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
12122: LD_EXP 8
12126: PPUSH
12127: LD_VAR 0 2
12131: PUSH
12132: LD_INT 1
12134: ARRAY
12135: PPUSH
12136: CALL_OW 250
12140: PPUSH
12141: LD_VAR 0 2
12145: PUSH
12146: LD_INT 1
12148: ARRAY
12149: PPUSH
12150: CALL_OW 251
12154: PPUSH
12155: LD_INT 5
12157: PPUSH
12158: LD_INT 1
12160: PPUSH
12161: CALL_OW 50
// end ;
12165: LD_VAR 0 1
12169: RET
// export function PrepareRussianCommander ; begin
12170: LD_INT 0
12172: PPUSH
// uc_side = 3 ;
12173: LD_ADDR_OWVAR 20
12177: PUSH
12178: LD_INT 3
12180: ST_TO_ADDR
// uc_nation = 3 ;
12181: LD_ADDR_OWVAR 21
12185: PUSH
12186: LD_INT 3
12188: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
12189: LD_ADDR_EXP 19
12193: PUSH
12194: LD_STRING Natasza
12196: PPUSH
12197: CALL_OW 25
12201: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
12202: LD_EXP 19
12206: PPUSH
12207: LD_INT 24
12209: PPUSH
12210: LD_INT 0
12212: PPUSH
12213: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
12217: LD_EXP 19
12221: PPUSH
12222: LD_INT 56
12224: PPUSH
12225: LD_INT 16
12227: PPUSH
12228: CALL_OW 118
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , Natasza ) ;
12232: LD_ADDR_EXP 24
12236: PUSH
12237: LD_EXP 24
12241: PPUSH
12242: LD_EXP 24
12246: PUSH
12247: LD_INT 1
12249: PLUS
12250: PPUSH
12251: LD_EXP 19
12255: PPUSH
12256: CALL_OW 1
12260: ST_TO_ADDR
// end ;
12261: LD_VAR 0 1
12265: RET
// export function PrepareSouthBase ; var i , un ; begin
12266: LD_INT 0
12268: PPUSH
12269: PPUSH
12270: PPUSH
// for i = 1 to 2 do
12271: LD_ADDR_VAR 0 2
12275: PUSH
12276: DOUBLE
12277: LD_INT 1
12279: DEC
12280: ST_TO_ADDR
12281: LD_INT 2
12283: PUSH
12284: FOR_TO
12285: IFFALSE 12394
// begin uc_side = 3 ;
12287: LD_ADDR_OWVAR 20
12291: PUSH
12292: LD_INT 3
12294: ST_TO_ADDR
// uc_nation = 3 ;
12295: LD_ADDR_OWVAR 21
12299: PUSH
12300: LD_INT 3
12302: ST_TO_ADDR
// hc_gallery =  ;
12303: LD_ADDR_OWVAR 33
12307: PUSH
12308: LD_STRING 
12310: ST_TO_ADDR
// hc_name =  ;
12311: LD_ADDR_OWVAR 26
12315: PUSH
12316: LD_STRING 
12318: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12319: LD_INT 1
12321: PPUSH
12322: LD_INT 1
12324: PPUSH
12325: LD_EXP 13
12329: PPUSH
12330: LD_EXP 14
12334: PPUSH
12335: CALL_OW 12
12339: PPUSH
12340: CALL_OW 380
// hc_importance = 0 ;
12344: LD_ADDR_OWVAR 32
12348: PUSH
12349: LD_INT 0
12351: ST_TO_ADDR
// un = CreateHuman ;
12352: LD_ADDR_VAR 0 3
12356: PUSH
12357: CALL_OW 44
12361: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12362: LD_VAR 0 3
12366: PPUSH
12367: LD_INT 11
12369: PPUSH
12370: LD_INT 0
12372: PPUSH
12373: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12377: LD_VAR 0 3
12381: PPUSH
12382: LD_INT 111
12384: PPUSH
12385: LD_INT 38
12387: PPUSH
12388: CALL_OW 118
// end ;
12392: GO 12284
12394: POP
12395: POP
// for i = 1 to 2 do
12396: LD_ADDR_VAR 0 2
12400: PUSH
12401: DOUBLE
12402: LD_INT 1
12404: DEC
12405: ST_TO_ADDR
12406: LD_INT 2
12408: PUSH
12409: FOR_TO
12410: IFFALSE 12493
// begin uc_side = 3 ;
12412: LD_ADDR_OWVAR 20
12416: PUSH
12417: LD_INT 3
12419: ST_TO_ADDR
// uc_nation = 3 ;
12420: LD_ADDR_OWVAR 21
12424: PUSH
12425: LD_INT 3
12427: ST_TO_ADDR
// hc_gallery =  ;
12428: LD_ADDR_OWVAR 33
12432: PUSH
12433: LD_STRING 
12435: ST_TO_ADDR
// hc_name =  ;
12436: LD_ADDR_OWVAR 26
12440: PUSH
12441: LD_STRING 
12443: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12444: LD_INT 0
12446: PPUSH
12447: LD_INT 3
12449: PPUSH
12450: LD_EXP 13
12454: PPUSH
12455: LD_EXP 14
12459: PPUSH
12460: CALL_OW 12
12464: PPUSH
12465: CALL_OW 380
// un = CreateHuman ;
12469: LD_ADDR_VAR 0 3
12473: PUSH
12474: CALL_OW 44
12478: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12479: LD_VAR 0 3
12483: PPUSH
12484: LD_INT 10
12486: PPUSH
12487: CALL_OW 52
// end ;
12491: GO 12409
12493: POP
12494: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12495: LD_INT 3
12497: PPUSH
12498: LD_INT 3
12500: PPUSH
12501: LD_INT 33
12503: PPUSH
12504: LD_EXP 13
12508: PPUSH
12509: LD_EXP 14
12513: PPUSH
12514: CALL_OW 12
12518: PPUSH
12519: LD_INT 1
12521: PPUSH
12522: LD_INT 1
12524: PUSH
12525: LD_INT 2
12527: PUSH
12528: LD_INT 2
12530: PUSH
12531: LD_INT 3
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: PUSH
12540: LD_OWVAR 67
12544: ARRAY
12545: PPUSH
12546: CALL 9084 0 6
// for i in UnitsInside ( arm2 ) do
12550: LD_ADDR_VAR 0 2
12554: PUSH
12555: LD_INT 33
12557: PPUSH
12558: CALL_OW 313
12562: PUSH
12563: FOR_IN
12564: IFFALSE 12597
// southBaseDefenders = Replace ( southBaseDefenders , southBaseDefenders + 1 , i ) ;
12566: LD_ADDR_EXP 25
12570: PUSH
12571: LD_EXP 25
12575: PPUSH
12576: LD_EXP 25
12580: PUSH
12581: LD_INT 1
12583: PLUS
12584: PPUSH
12585: LD_VAR 0 2
12589: PPUSH
12590: CALL_OW 1
12594: ST_TO_ADDR
12595: GO 12563
12597: POP
12598: POP
// end ;
12599: LD_VAR 0 1
12603: RET
// export function PrepareNorthBase ; var i , un ; begin
12604: LD_INT 0
12606: PPUSH
12607: PPUSH
12608: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) , 4 ] [ Difficulty ] do
12609: LD_ADDR_VAR 0 2
12613: PUSH
12614: DOUBLE
12615: LD_INT 1
12617: DEC
12618: ST_TO_ADDR
12619: LD_INT 1
12621: PPUSH
12622: LD_INT 2
12624: PPUSH
12625: CALL_OW 12
12629: PUSH
12630: LD_INT 2
12632: PPUSH
12633: LD_INT 3
12635: PPUSH
12636: CALL_OW 12
12640: PUSH
12641: LD_INT 3
12643: PPUSH
12644: LD_INT 4
12646: PPUSH
12647: CALL_OW 12
12651: PUSH
12652: LD_INT 4
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: PUSH
12661: LD_OWVAR 67
12665: ARRAY
12666: PUSH
12667: FOR_TO
12668: IFFALSE 12754
// begin uc_side = 3 ;
12670: LD_ADDR_OWVAR 20
12674: PUSH
12675: LD_INT 3
12677: ST_TO_ADDR
// uc_nation = 3 ;
12678: LD_ADDR_OWVAR 21
12682: PUSH
12683: LD_INT 3
12685: ST_TO_ADDR
// hc_gallery =  ;
12686: LD_ADDR_OWVAR 33
12690: PUSH
12691: LD_STRING 
12693: ST_TO_ADDR
// hc_name =  ;
12694: LD_ADDR_OWVAR 26
12698: PUSH
12699: LD_STRING 
12701: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12702: LD_INT 0
12704: PPUSH
12705: LD_INT 1
12707: PPUSH
12708: LD_EXP 13
12712: PPUSH
12713: LD_EXP 14
12717: PPUSH
12718: CALL_OW 12
12722: PPUSH
12723: CALL_OW 380
// un = CreateHuman ;
12727: LD_ADDR_VAR 0 3
12731: PUSH
12732: CALL_OW 44
12736: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12737: LD_VAR 0 3
12741: PPUSH
12742: LD_INT 14
12744: PPUSH
12745: LD_INT 0
12747: PPUSH
12748: CALL_OW 49
// end ;
12752: GO 12667
12754: POP
12755: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) , 4 ] [ Difficulty ] ) ;
12756: LD_INT 3
12758: PPUSH
12759: LD_INT 3
12761: PPUSH
12762: LD_INT 2
12764: PPUSH
12765: LD_EXP 13
12769: PPUSH
12770: LD_EXP 14
12774: PPUSH
12775: CALL_OW 12
12779: PPUSH
12780: LD_INT 1
12782: PPUSH
12783: LD_INT 1
12785: PPUSH
12786: LD_INT 2
12788: PPUSH
12789: CALL_OW 12
12793: PUSH
12794: LD_INT 1
12796: PPUSH
12797: LD_INT 3
12799: PPUSH
12800: CALL_OW 12
12804: PUSH
12805: LD_INT 1
12807: PPUSH
12808: LD_INT 3
12810: PPUSH
12811: CALL_OW 12
12815: PUSH
12816: LD_INT 4
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: PUSH
12825: LD_OWVAR 67
12829: ARRAY
12830: PPUSH
12831: CALL 9084 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 , 2 ] [ Difficulty ] ) ;
12835: LD_INT 3
12837: PPUSH
12838: LD_INT 3
12840: PPUSH
12841: LD_INT 23
12843: PPUSH
12844: LD_EXP 13
12848: PPUSH
12849: LD_EXP 14
12853: PPUSH
12854: CALL_OW 12
12858: PPUSH
12859: LD_INT 4
12861: PPUSH
12862: LD_INT 0
12864: PUSH
12865: LD_INT 1
12867: PUSH
12868: LD_INT 2
12870: PUSH
12871: LD_INT 2
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: PUSH
12880: LD_OWVAR 67
12884: ARRAY
12885: PPUSH
12886: CALL 9084 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12890: LD_INT 3
12892: PPUSH
12893: LD_INT 3
12895: PPUSH
12896: LD_INT 1
12898: PPUSH
12899: LD_EXP 13
12903: PPUSH
12904: LD_EXP 14
12908: PPUSH
12909: CALL_OW 12
12913: PPUSH
12914: LD_INT 2
12916: PPUSH
12917: LD_INT 1
12919: PUSH
12920: LD_INT 2
12922: PUSH
12923: LD_INT 2
12925: PUSH
12926: LD_INT 3
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: PUSH
12935: LD_OWVAR 67
12939: ARRAY
12940: PPUSH
12941: CALL 9084 0 6
// for i in UnitsInside ( arm1 ) do
12945: LD_ADDR_VAR 0 2
12949: PUSH
12950: LD_INT 2
12952: PPUSH
12953: CALL_OW 313
12957: PUSH
12958: FOR_IN
12959: IFFALSE 12992
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , i ) ;
12961: LD_ADDR_EXP 24
12965: PUSH
12966: LD_EXP 24
12970: PPUSH
12971: LD_EXP 24
12975: PUSH
12976: LD_INT 1
12978: PLUS
12979: PPUSH
12980: LD_VAR 0 2
12984: PPUSH
12985: CALL_OW 1
12989: ST_TO_ADDR
12990: GO 12958
12992: POP
12993: POP
// end ;
12994: LD_VAR 0 1
12998: RET
// export function PrepareOtherRussians ; var i , un ; begin
12999: LD_INT 0
13001: PPUSH
13002: PPUSH
13003: PPUSH
// for i = 1 to 2 do
13004: LD_ADDR_VAR 0 2
13008: PUSH
13009: DOUBLE
13010: LD_INT 1
13012: DEC
13013: ST_TO_ADDR
13014: LD_INT 2
13016: PUSH
13017: FOR_TO
13018: IFFALSE 13119
// begin uc_side = 3 ;
13020: LD_ADDR_OWVAR 20
13024: PUSH
13025: LD_INT 3
13027: ST_TO_ADDR
// uc_nation = 3 ;
13028: LD_ADDR_OWVAR 21
13032: PUSH
13033: LD_INT 3
13035: ST_TO_ADDR
// hc_gallery =  ;
13036: LD_ADDR_OWVAR 33
13040: PUSH
13041: LD_STRING 
13043: ST_TO_ADDR
// hc_name =  ;
13044: LD_ADDR_OWVAR 26
13048: PUSH
13049: LD_STRING 
13051: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13052: LD_INT 0
13054: PPUSH
13055: LD_INT 1
13057: PPUSH
13058: LD_EXP 13
13062: PPUSH
13063: LD_EXP 14
13067: PPUSH
13068: CALL_OW 12
13072: PPUSH
13073: CALL_OW 380
// un = CreateHuman ;
13077: LD_ADDR_VAR 0 3
13081: PUSH
13082: CALL_OW 44
13086: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
13087: LD_VAR 0 3
13091: PPUSH
13092: LD_INT 9
13094: PPUSH
13095: LD_INT 0
13097: PPUSH
13098: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
13102: LD_VAR 0 3
13106: PPUSH
13107: LD_INT 80
13109: PPUSH
13110: LD_INT 73
13112: PPUSH
13113: CALL_OW 118
// end ;
13117: GO 13017
13119: POP
13120: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
13121: LD_ADDR_VAR 0 2
13125: PUSH
13126: LD_INT 22
13128: PUSH
13129: LD_INT 3
13131: PUSH
13132: EMPTY
13133: LIST
13134: LIST
13135: PUSH
13136: LD_INT 30
13138: PUSH
13139: LD_INT 31
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PPUSH
13150: CALL_OW 69
13154: PUSH
13155: FOR_IN
13156: IFFALSE 13184
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
13158: LD_EXP 13
13162: PPUSH
13163: LD_EXP 14
13167: PPUSH
13168: CALL_OW 12
13172: PPUSH
13173: LD_VAR 0 2
13177: PPUSH
13178: CALL 9193 0 2
13182: GO 13155
13184: POP
13185: POP
// end ;
13186: LD_VAR 0 1
13190: RET
// export function PrepareCargoBays ; begin
13191: LD_INT 0
13193: PPUSH
// uc_side = 3 ;
13194: LD_ADDR_OWVAR 20
13198: PUSH
13199: LD_INT 3
13201: ST_TO_ADDR
// uc_nation = 3 ;
13202: LD_ADDR_OWVAR 21
13206: PUSH
13207: LD_INT 3
13209: ST_TO_ADDR
// vc_engine = 1 ;
13210: LD_ADDR_OWVAR 39
13214: PUSH
13215: LD_INT 1
13217: ST_TO_ADDR
// vc_control = 1 ;
13218: LD_ADDR_OWVAR 38
13222: PUSH
13223: LD_INT 1
13225: ST_TO_ADDR
// vc_weapon = 51 ;
13226: LD_ADDR_OWVAR 40
13230: PUSH
13231: LD_INT 51
13233: ST_TO_ADDR
// vc_chassis = 22 ;
13234: LD_ADDR_OWVAR 37
13238: PUSH
13239: LD_INT 22
13241: ST_TO_ADDR
// cargo1 = CreateVehicle ;
13242: LD_ADDR_EXP 15
13246: PUSH
13247: CALL_OW 45
13251: ST_TO_ADDR
// cargo2 = CreateVehicle ;
13252: LD_ADDR_EXP 16
13256: PUSH
13257: CALL_OW 45
13261: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
13262: LD_EXP 15
13266: PPUSH
13267: LD_INT 13
13269: PPUSH
13270: LD_INT 0
13272: PPUSH
13273: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
13277: LD_EXP 16
13281: PPUSH
13282: LD_INT 13
13284: PPUSH
13285: LD_INT 0
13287: PPUSH
13288: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13292: LD_EXP 15
13296: PPUSH
13297: LD_INT 2
13299: PPUSH
13300: LD_INT 70
13302: PUSH
13303: LD_INT 50
13305: PUSH
13306: LD_INT 30
13308: PUSH
13309: LD_INT 20
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: PUSH
13318: LD_OWVAR 67
13322: ARRAY
13323: PPUSH
13324: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13328: LD_EXP 16
13332: PPUSH
13333: LD_INT 2
13335: PPUSH
13336: LD_INT 70
13338: PUSH
13339: LD_INT 50
13341: PUSH
13342: LD_INT 30
13344: PUSH
13345: LD_INT 20
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: PUSH
13354: LD_OWVAR 67
13358: ARRAY
13359: PPUSH
13360: CALL_OW 291
// hc_gallery =  ;
13364: LD_ADDR_OWVAR 33
13368: PUSH
13369: LD_STRING 
13371: ST_TO_ADDR
// hc_name =  ;
13372: LD_ADDR_OWVAR 26
13376: PUSH
13377: LD_STRING 
13379: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13380: LD_INT 1
13382: PPUSH
13383: LD_INT 3
13385: PPUSH
13386: LD_INT 1
13388: PPUSH
13389: LD_INT 2
13391: PPUSH
13392: CALL_OW 12
13396: PPUSH
13397: CALL_OW 380
// driver1 = CreateHuman ;
13401: LD_ADDR_EXP 17
13405: PUSH
13406: CALL_OW 44
13410: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13411: LD_EXP 17
13415: PPUSH
13416: LD_EXP 15
13420: PPUSH
13421: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13425: LD_ADDR_OWVAR 26
13429: PUSH
13430: LD_STRING Nikolai Andreyev
13432: ST_TO_ADDR
// driver2 = CreateHuman ;
13433: LD_ADDR_EXP 18
13437: PUSH
13438: CALL_OW 44
13442: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13443: LD_EXP 18
13447: PPUSH
13448: LD_EXP 16
13452: PPUSH
13453: CALL_OW 52
// end ;
13457: LD_VAR 0 1
13461: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , mech ; begin
13462: LD_INT 0
13464: PPUSH
13465: PPUSH
13466: PPUSH
13467: PPUSH
13468: PPUSH
13469: PPUSH
// uc_side = 3 ;
13470: LD_ADDR_OWVAR 20
13474: PUSH
13475: LD_INT 3
13477: ST_TO_ADDR
// uc_nation = 3 ;
13478: LD_ADDR_OWVAR 21
13482: PUSH
13483: LD_INT 3
13485: ST_TO_ADDR
// for i := 1 to count do
13486: LD_ADDR_VAR 0 4
13490: PUSH
13491: DOUBLE
13492: LD_INT 1
13494: DEC
13495: ST_TO_ADDR
13496: LD_VAR 0 1
13500: PUSH
13501: FOR_TO
13502: IFFALSE 13764
// begin vc_engine = 1 ;
13504: LD_ADDR_OWVAR 39
13508: PUSH
13509: LD_INT 1
13511: ST_TO_ADDR
// vc_control = 1 ;
13512: LD_ADDR_OWVAR 38
13516: PUSH
13517: LD_INT 1
13519: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
13520: LD_ADDR_OWVAR 40
13524: PUSH
13525: LD_INT 42
13527: ST_TO_ADDR
// if Difficulty = 3 then
13528: LD_OWVAR 67
13532: PUSH
13533: LD_INT 3
13535: EQUAL
13536: IFFALSE 13565
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13538: LD_ADDR_OWVAR 40
13542: PUSH
13543: LD_INT 42
13545: PUSH
13546: LD_INT 43
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: PUSH
13553: LD_INT 1
13555: PPUSH
13556: LD_INT 2
13558: PPUSH
13559: CALL_OW 12
13563: ARRAY
13564: ST_TO_ADDR
// if Difficulty = 4 then
13565: LD_OWVAR 67
13569: PUSH
13570: LD_INT 4
13572: EQUAL
13573: IFFALSE 13610
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 4 ) ] ;
13575: LD_ADDR_OWVAR 40
13579: PUSH
13580: LD_INT 42
13582: PUSH
13583: LD_INT 43
13585: PUSH
13586: LD_INT 43
13588: PUSH
13589: LD_INT 44
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 1
13600: PPUSH
13601: LD_INT 4
13603: PPUSH
13604: CALL_OW 12
13608: ARRAY
13609: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
13610: LD_ADDR_OWVAR 37
13614: PUSH
13615: LD_INT 21
13617: PUSH
13618: LD_INT 22
13620: PUSH
13621: LD_INT 22
13623: PUSH
13624: LD_INT 22
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: PUSH
13633: LD_OWVAR 67
13637: ARRAY
13638: ST_TO_ADDR
// veh = CreateVehicle ;
13639: LD_ADDR_VAR 0 5
13643: PUSH
13644: CALL_OW 45
13648: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13649: LD_VAR 0 5
13653: PPUSH
13654: LD_VAR 0 2
13658: PPUSH
13659: LD_INT 0
13661: PPUSH
13662: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13666: LD_ADDR_EXP 26
13670: PUSH
13671: LD_EXP 26
13675: PUSH
13676: LD_VAR 0 5
13680: ADD
13681: ST_TO_ADDR
// hc_gallery =  ;
13682: LD_ADDR_OWVAR 33
13686: PUSH
13687: LD_STRING 
13689: ST_TO_ADDR
// hc_name =  ;
13690: LD_ADDR_OWVAR 26
13694: PUSH
13695: LD_STRING 
13697: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13698: LD_INT 0
13700: PPUSH
13701: LD_INT 3
13703: PPUSH
13704: LD_EXP 13
13708: PPUSH
13709: LD_EXP 14
13713: PPUSH
13714: CALL_OW 12
13718: PPUSH
13719: CALL_OW 380
// un = CreateHuman ;
13723: LD_ADDR_VAR 0 6
13727: PUSH
13728: CALL_OW 44
13732: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13733: LD_VAR 0 6
13737: PPUSH
13738: LD_VAR 0 5
13742: PPUSH
13743: CALL_OW 52
// ComMoveXY ( un , 14 , 9 ) ;
13747: LD_VAR 0 6
13751: PPUSH
13752: LD_INT 14
13754: PPUSH
13755: LD_INT 9
13757: PPUSH
13758: CALL_OW 111
// end ;
13762: GO 13501
13764: POP
13765: POP
// wait ( 0 0$1 ) ;
13766: LD_INT 35
13768: PPUSH
13769: CALL_OW 67
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13773: LD_INT 0
13775: PPUSH
13776: LD_INT 2
13778: PPUSH
13779: LD_EXP 13
13783: PPUSH
13784: LD_EXP 14
13788: PPUSH
13789: CALL_OW 12
13793: PPUSH
13794: CALL_OW 380
// un = CreateHuman ;
13798: LD_ADDR_VAR 0 6
13802: PUSH
13803: CALL_OW 44
13807: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13808: LD_ADDR_VAR 0 4
13812: PUSH
13813: DOUBLE
13814: LD_INT 1
13816: DEC
13817: ST_TO_ADDR
13818: LD_VAR 0 1
13822: PUSH
13823: LD_INT 2
13825: PUSH
13826: LD_INT 2
13828: MUL
13829: PLUS
13830: PUSH
13831: FOR_TO
13832: IFFALSE 13924
// begin hc_gallery =  ;
13834: LD_ADDR_OWVAR 33
13838: PUSH
13839: LD_STRING 
13841: ST_TO_ADDR
// hc_name =  ;
13842: LD_ADDR_OWVAR 26
13846: PUSH
13847: LD_STRING 
13849: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13850: LD_INT 1
13852: PPUSH
13853: LD_INT 1
13855: PPUSH
13856: LD_EXP 13
13860: PPUSH
13861: LD_EXP 14
13865: PPUSH
13866: CALL_OW 12
13870: PPUSH
13871: CALL_OW 380
// un = CreateHuman ;
13875: LD_ADDR_VAR 0 6
13879: PUSH
13880: CALL_OW 44
13884: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 13 , 4 , false ) ;
13885: LD_VAR 0 6
13889: PPUSH
13890: LD_INT 9
13892: PPUSH
13893: LD_INT 13
13895: PPUSH
13896: LD_INT 4
13898: PPUSH
13899: LD_INT 0
13901: PPUSH
13902: CALL_OW 50
// attackGroup = attackGroup ^ un ;
13906: LD_ADDR_EXP 26
13910: PUSH
13911: LD_EXP 26
13915: PUSH
13916: LD_VAR 0 6
13920: ADD
13921: ST_TO_ADDR
// end ;
13922: GO 13831
13924: POP
13925: POP
// tmp := FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13926: LD_ADDR_VAR 0 7
13930: PUSH
13931: LD_INT 26
13933: PPUSH
13934: LD_INT 22
13936: PUSH
13937: LD_INT 3
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: PUSH
13944: LD_INT 21
13946: PUSH
13947: LD_INT 1
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PUSH
13954: LD_INT 26
13956: PUSH
13957: LD_INT 1
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: LIST
13968: PPUSH
13969: CALL_OW 70
13973: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13974: LD_VAR 0 7
13978: PUSH
13979: LD_INT 1
13981: ARRAY
13982: PPUSH
13983: LD_STRING D9-Rus3-1
13985: PPUSH
13986: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13990: LD_VAR 0 7
13994: PUSH
13995: LD_INT 2
13997: ARRAY
13998: PPUSH
13999: LD_STRING D9-Russ-1
14001: PPUSH
14002: CALL_OW 88
// ComAgressiveMove ( attackGroup , 31 , 13 ) ;
14006: LD_EXP 26
14010: PPUSH
14011: LD_INT 31
14013: PPUSH
14014: LD_INT 13
14016: PPUSH
14017: CALL_OW 114
// wait ( 0 0$3 ) ;
14021: LD_INT 105
14023: PPUSH
14024: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14028: LD_INT 35
14030: PPUSH
14031: CALL_OW 67
// for i in attackGroup do
14035: LD_ADDR_VAR 0 4
14039: PUSH
14040: LD_EXP 26
14044: PUSH
14045: FOR_IN
14046: IFFALSE 14413
// begin if IsDead ( i ) then
14048: LD_VAR 0 4
14052: PPUSH
14053: CALL_OW 301
14057: IFFALSE 14077
// begin attackGroup := attackGroup diff i ;
14059: LD_ADDR_EXP 26
14063: PUSH
14064: LD_EXP 26
14068: PUSH
14069: LD_VAR 0 4
14073: DIFF
14074: ST_TO_ADDR
// continue ;
14075: GO 14045
// end ; if not HasTask ( i ) and not GetTag ( i ) then
14077: LD_VAR 0 4
14081: PPUSH
14082: CALL_OW 314
14086: NOT
14087: PUSH
14088: LD_VAR 0 4
14092: PPUSH
14093: CALL_OW 110
14097: NOT
14098: AND
14099: IFFALSE 14135
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
14101: LD_VAR 0 4
14105: PPUSH
14106: LD_INT 22
14108: PUSH
14109: LD_INT 1
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PPUSH
14116: CALL_OW 69
14120: PPUSH
14121: LD_VAR 0 4
14125: PPUSH
14126: CALL_OW 74
14130: PPUSH
14131: CALL_OW 115
// if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
14135: LD_VAR 0 4
14139: PPUSH
14140: CALL_OW 110
14144: NOT
14145: PUSH
14146: LD_VAR 0 4
14150: PPUSH
14151: CALL_OW 256
14155: PUSH
14156: LD_INT 650
14158: LESS
14159: AND
14160: PUSH
14161: LD_VAR 0 4
14165: PPUSH
14166: CALL_OW 247
14170: PUSH
14171: LD_INT 2
14173: EQUAL
14174: AND
14175: IFFALSE 14204
// begin SetTag ( i , 1 ) ;
14177: LD_VAR 0 4
14181: PPUSH
14182: LD_INT 1
14184: PPUSH
14185: CALL_OW 109
// ComMoveXY ( i , 20 , 8 ) ;
14189: LD_VAR 0 4
14193: PPUSH
14194: LD_INT 20
14196: PPUSH
14197: LD_INT 8
14199: PPUSH
14200: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 20 , 8 ) < 6 then
14204: LD_VAR 0 4
14208: PPUSH
14209: CALL_OW 110
14213: PUSH
14214: LD_INT 1
14216: EQUAL
14217: PUSH
14218: LD_VAR 0 4
14222: PPUSH
14223: LD_INT 20
14225: PPUSH
14226: LD_INT 8
14228: PPUSH
14229: CALL_OW 297
14233: PUSH
14234: LD_INT 6
14236: LESS
14237: AND
14238: IFFALSE 14252
// SetTag ( i , 2 ) ;
14240: LD_VAR 0 4
14244: PPUSH
14245: LD_INT 2
14247: PPUSH
14248: CALL_OW 109
// if GetTag ( i ) = 2 then
14252: LD_VAR 0 4
14256: PPUSH
14257: CALL_OW 110
14261: PUSH
14262: LD_INT 2
14264: EQUAL
14265: IFFALSE 14373
// begin if GetLives ( i ) = 1000 then
14267: LD_VAR 0 4
14271: PPUSH
14272: CALL_OW 256
14276: PUSH
14277: LD_INT 1000
14279: EQUAL
14280: IFFALSE 14296
// SetTag ( i , 3 ) else
14282: LD_VAR 0 4
14286: PPUSH
14287: LD_INT 3
14289: PPUSH
14290: CALL_OW 109
14294: GO 14373
// if IsDrivenBy ( i ) then
14296: LD_VAR 0 4
14300: PPUSH
14301: CALL_OW 311
14305: IFFALSE 14373
// begin mech := IsDrivenBy ( i ) ;
14307: LD_ADDR_VAR 0 8
14311: PUSH
14312: LD_VAR 0 4
14316: PPUSH
14317: CALL_OW 311
14321: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
14322: LD_INT 1
14324: PPUSH
14325: LD_VAR 0 8
14329: PPUSH
14330: CALL_OW 292
14334: NOT
14335: PUSH
14336: LD_VAR 0 8
14340: PPUSH
14341: CALL_OW 256
14345: PUSH
14346: LD_INT 1000
14348: LESS
14349: AND
14350: IFFALSE 14364
// SetLives ( mech , 1000 ) ;
14352: LD_VAR 0 8
14356: PPUSH
14357: LD_INT 1000
14359: PPUSH
14360: CALL_OW 234
// ComRepairVehicleAndReturn ( mech ) ;
14364: LD_VAR 0 8
14368: PPUSH
14369: CALL 77038 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
14373: LD_VAR 0 4
14377: PPUSH
14378: CALL_OW 110
14382: PUSH
14383: LD_INT 3
14385: EQUAL
14386: PUSH
14387: LD_VAR 0 4
14391: PPUSH
14392: CALL_OW 311
14396: AND
14397: IFFALSE 14411
// SetTag ( i , 0 ) ;
14399: LD_VAR 0 4
14403: PPUSH
14404: LD_INT 0
14406: PPUSH
14407: CALL_OW 109
// end ;
14411: GO 14045
14413: POP
14414: POP
// until not attackGroup ;
14415: LD_EXP 26
14419: NOT
14420: IFFALSE 14028
// end ;
14422: LD_VAR 0 3
14426: RET
// every 0 0$1 trigger UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do var i ;
14427: LD_EXP 26
14431: PPUSH
14432: LD_INT 21
14434: PUSH
14435: LD_INT 2
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PPUSH
14442: CALL_OW 72
14446: IFFALSE 14514
14448: GO 14450
14450: DISABLE
14451: LD_INT 0
14453: PPUSH
// begin enable ;
14454: ENABLE
// for i in UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do
14455: LD_ADDR_VAR 0 1
14459: PUSH
14460: LD_EXP 26
14464: PPUSH
14465: LD_INT 21
14467: PUSH
14468: LD_INT 2
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PPUSH
14475: CALL_OW 72
14479: PUSH
14480: FOR_IN
14481: IFFALSE 14512
// if GetFuel ( i ) < 3 then
14483: LD_VAR 0 1
14487: PPUSH
14488: CALL_OW 261
14492: PUSH
14493: LD_INT 3
14495: LESS
14496: IFFALSE 14510
// SetFuel ( i , 3 ) ;
14498: LD_VAR 0 1
14502: PPUSH
14503: LD_INT 3
14505: PPUSH
14506: CALL_OW 240
14510: GO 14480
14512: POP
14513: POP
// end ; end_of_file
14514: PPOPN 1
14516: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do
14517: LD_INT 22
14519: PUSH
14520: LD_INT 3
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: PUSH
14527: LD_INT 25
14529: PUSH
14530: LD_INT 2
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PPUSH
14541: CALL_OW 69
14545: IFFALSE 14564
14547: GO 14549
14549: DISABLE
// begin enable ;
14550: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
14551: LD_INT 3
14553: PPUSH
14554: LD_INT 1
14556: PPUSH
14557: LD_INT 22
14559: PPUSH
14560: CALL 9329 0 3
// end ;
14564: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
14565: LD_INT 22
14567: PUSH
14568: LD_INT 3
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: PUSH
14575: LD_INT 25
14577: PUSH
14578: LD_INT 4
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: PPUSH
14589: CALL_OW 69
14593: IFFALSE 14615
14595: GO 14597
14597: DISABLE
// begin enable ;
14598: ENABLE
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
14599: LD_INT 3
14601: PPUSH
14602: LD_INT 20
14604: PPUSH
14605: LD_INT 22
14607: PPUSH
14608: LD_INT 23
14610: PPUSH
14611: CALL 9661 0 4
// end ;
14615: END
// every 0 0$1 trigger northBaseDefenders do
14616: LD_EXP 24
14620: IFFALSE 14644
14622: GO 14624
14624: DISABLE
// begin enable ;
14625: ENABLE
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
14626: LD_INT 22
14628: PPUSH
14629: LD_INT 1
14631: PPUSH
14632: LD_EXP 24
14636: PPUSH
14637: LD_INT 2
14639: PPUSH
14640: CALL 9933 0 4
// end ;
14644: END
// every 0 0$1 trigger southBaseDefenders do
14645: LD_EXP 25
14649: IFFALSE 14673
14651: GO 14653
14653: DISABLE
// begin enable ;
14654: ENABLE
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
14655: LD_INT 23
14657: PPUSH
14658: LD_INT 1
14660: PPUSH
14661: LD_EXP 25
14665: PPUSH
14666: LD_INT 33
14668: PPUSH
14669: CALL 9933 0 4
// end ; end_of_file
14673: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14674: LD_VAR 0 1
14678: PPUSH
14679: CALL 32742 0 1
// if unit = JMM then
14683: LD_VAR 0 1
14687: PUSH
14688: LD_EXP 1
14692: EQUAL
14693: IFFALSE 14702
// YouLost ( JMM ) ;
14695: LD_STRING JMM
14697: PPUSH
14698: CALL_OW 104
// if GetBType ( unit ) = b_depot then
14702: LD_VAR 0 1
14706: PPUSH
14707: CALL_OW 266
14711: PUSH
14712: LD_INT 0
14714: EQUAL
14715: IFFALSE 14724
// YouLost ( DepotDestroyed ) ;
14717: LD_STRING DepotDestroyed
14719: PPUSH
14720: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14724: LD_VAR 0 1
14728: PPUSH
14729: CALL_OW 255
14733: PUSH
14734: LD_INT 1
14736: EQUAL
14737: PUSH
14738: LD_VAR 0 1
14742: PPUSH
14743: CALL_OW 247
14747: PUSH
14748: LD_INT 1
14750: EQUAL
14751: AND
14752: IFFALSE 14768
// deadsCounter = deadsCounter + 1 ;
14754: LD_ADDR_EXP 31
14758: PUSH
14759: LD_EXP 31
14763: PUSH
14764: LD_INT 1
14766: PLUS
14767: ST_TO_ADDR
// end ;
14768: PPOPN 1
14770: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
14771: LD_VAR 0 1
14775: PUSH
14776: LD_INT 22
14778: PUSH
14779: LD_INT 1
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PUSH
14786: LD_INT 23
14788: PUSH
14789: LD_INT 1
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: LD_INT 21
14798: PUSH
14799: LD_INT 1
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: LIST
14810: PPUSH
14811: CALL_OW 69
14815: IN
14816: PUSH
14817: LD_VAR 0 2
14821: PUSH
14822: LD_INT 1
14824: EQUAL
14825: AND
14826: IFFALSE 14832
// JMMTraitor ;
14828: CALL 8739 0 0
// end ;
14832: PPOPN 3
14834: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
14835: LD_VAR 0 1
14839: PPUSH
14840: CALL_OW 255
14844: PUSH
14845: LD_INT 3
14847: EQUAL
14848: IFFALSE 14926
// begin ComMoveXY ( driver , 6 , 10 ) ;
14850: LD_VAR 0 1
14854: PPUSH
14855: LD_INT 6
14857: PPUSH
14858: LD_INT 10
14860: PPUSH
14861: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14865: LD_INT 35
14867: PPUSH
14868: CALL_OW 67
// ComMoveXY ( driver , 6 , 10 ) ;
14872: LD_VAR 0 1
14876: PPUSH
14877: LD_INT 6
14879: PPUSH
14880: LD_INT 10
14882: PPUSH
14883: CALL_OW 111
// if IsDead ( driver ) then
14887: LD_VAR 0 1
14891: PPUSH
14892: CALL_OW 301
14896: IFFALSE 14900
// exit ;
14898: GO 14926
// until IsAt ( driver , 6 , 10 ) ;
14900: LD_VAR 0 1
14904: PPUSH
14905: LD_INT 6
14907: PPUSH
14908: LD_INT 10
14910: PPUSH
14911: CALL_OW 307
14915: IFFALSE 14865
// RemoveUnit ( driver ) ;
14917: LD_VAR 0 1
14921: PPUSH
14922: CALL_OW 64
// end ; end ;
14926: PPOPN 4
14928: END
// on Command ( cmd ) do var i , j , tmp ;
14929: LD_INT 0
14931: PPUSH
14932: PPUSH
14933: PPUSH
// begin SOS_Command ( cmd ) ;
14934: LD_VAR 0 1
14938: PPUSH
14939: CALL 32846 0 1
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
14943: LD_ADDR_VAR 0 2
14947: PUSH
14948: LD_INT 22
14950: PUSH
14951: LD_INT 1
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: PUSH
14958: LD_INT 21
14960: PUSH
14961: LD_INT 2
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PPUSH
14972: CALL_OW 69
14976: PUSH
14977: FOR_IN
14978: IFFALSE 15099
// begin if GetTaskList ( i ) then
14980: LD_VAR 0 2
14984: PPUSH
14985: CALL_OW 437
14989: IFFALSE 15097
// begin for j = 1 to GetTaskList ( i ) do
14991: LD_ADDR_VAR 0 3
14995: PUSH
14996: DOUBLE
14997: LD_INT 1
14999: DEC
15000: ST_TO_ADDR
15001: LD_VAR 0 2
15005: PPUSH
15006: CALL_OW 437
15010: PUSH
15011: FOR_TO
15012: IFFALSE 15095
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
15014: LD_ADDR_VAR 0 4
15018: PUSH
15019: LD_VAR 0 2
15023: PPUSH
15024: CALL_OW 437
15028: PUSH
15029: LD_VAR 0 3
15033: ARRAY
15034: PUSH
15035: LD_INT 4
15037: ARRAY
15038: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
15039: LD_VAR 0 4
15043: PPUSH
15044: CALL_OW 255
15048: PUSH
15049: LD_INT 3
15051: EQUAL
15052: PUSH
15053: LD_VAR 0 4
15057: PPUSH
15058: CALL_OW 247
15062: PUSH
15063: LD_INT 2
15065: EQUAL
15066: AND
15067: PUSH
15068: LD_VAR 0 4
15072: PPUSH
15073: CALL_OW 264
15077: PUSH
15078: LD_INT 51
15080: EQUAL
15081: AND
15082: IFFALSE 15093
// ComStop ( i ) ;
15084: LD_VAR 0 2
15088: PPUSH
15089: CALL_OW 141
// end ;
15093: GO 15011
15095: POP
15096: POP
// end ; end ;
15097: GO 14977
15099: POP
15100: POP
// end ;
15101: PPOPN 4
15103: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
15104: LD_VAR 0 2
15108: PUSH
15109: LD_EXP 8
15113: EQUAL
15114: PUSH
15115: LD_EXP 21
15119: PUSH
15120: LD_INT 4
15122: NONEQUAL
15123: AND
15124: IFFALSE 15276
// begin if IsOk ( Mikhail ) then
15126: LD_EXP 8
15130: PPUSH
15131: CALL_OW 302
15135: IFFALSE 15143
// AskMikhail else
15137: CALL 7425 0 0
15141: GO 15276
// if IsOk ( llab1 ) then
15143: LD_INT 23
15145: PPUSH
15146: CALL_OW 302
15150: IFFALSE 15239
// begin InGameOn ;
15152: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
15156: LD_EXP 8
15160: PPUSH
15161: LD_INT 6
15163: PPUSH
15164: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
15168: LD_INT 23
15170: PPUSH
15171: LD_INT 6
15173: PPUSH
15174: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
15178: LD_EXP 8
15182: PPUSH
15183: LD_INT 23
15185: PPUSH
15186: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15190: LD_INT 35
15192: PPUSH
15193: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
15197: LD_EXP 8
15201: PPUSH
15202: CALL_OW 310
15206: PUSH
15207: LD_INT 23
15209: EQUAL
15210: PUSH
15211: LD_EXP 8
15215: PPUSH
15216: CALL_OW 301
15220: OR
15221: IFFALSE 15190
// SetSide ( llab1 , 1 ) ;
15223: LD_INT 23
15225: PPUSH
15226: LD_INT 1
15228: PPUSH
15229: CALL_OW 235
// InGameOff ;
15233: CALL_OW 9
// end else
15237: GO 15276
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
15239: LD_INT 3
15241: PPUSH
15242: LD_INT 6
15244: PPUSH
15245: LD_INT 2
15247: PPUSH
15248: LD_INT 1
15250: PPUSH
15251: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
15255: LD_EXP 8
15259: PPUSH
15260: LD_INT 6
15262: PPUSH
15263: CALL_OW 235
// ComHold ( Mikhail ) ;
15267: LD_EXP 8
15271: PPUSH
15272: CALL_OW 140
// end ; end ; end ;
15276: PPOPN 2
15278: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15279: LD_VAR 0 1
15283: PPUSH
15284: LD_VAR 0 2
15288: PPUSH
15289: CALL 32862 0 2
// end ;
15293: PPOPN 2
15295: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
15296: LD_EXP 8
15300: PPUSH
15301: CALL_OW 257
15305: PUSH
15306: LD_INT 3
15308: NONEQUAL
15309: IFFALSE 15327
15311: GO 15313
15313: DISABLE
// begin enable ;
15314: ENABLE
// SetClass ( Mikhail , 3 ) ;
15315: LD_EXP 8
15319: PPUSH
15320: LD_INT 3
15322: PPUSH
15323: CALL_OW 336
// end ; end_of_file
15327: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
15328: LD_INT 22
15330: PUSH
15331: LD_INT 1
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: LD_INT 21
15340: PUSH
15341: LD_INT 1
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: LD_INT 25
15350: PUSH
15351: LD_INT 2
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: LIST
15362: PPUSH
15363: CALL_OW 69
15367: PUSH
15368: LD_INT 0
15370: EQUAL
15371: PUSH
15372: LD_INT 22
15374: PUSH
15375: LD_INT 4
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PUSH
15382: LD_INT 21
15384: PUSH
15385: LD_INT 1
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: PUSH
15392: LD_INT 25
15394: PUSH
15395: LD_INT 2
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: LIST
15406: PPUSH
15407: CALL_OW 69
15411: PUSH
15412: LD_INT 0
15414: EQUAL
15415: AND
15416: PUSH
15417: LD_INT 1
15419: PPUSH
15420: CALL_OW 255
15424: PUSH
15425: LD_INT 3
15427: EQUAL
15428: AND
15429: PUSH
15430: LD_INT 10
15432: PPUSH
15433: CALL_OW 255
15437: PUSH
15438: LD_INT 3
15440: EQUAL
15441: AND
15442: IFFALSE 15454
15444: GO 15446
15446: DISABLE
// YouLost ( Engineer ) ;
15447: LD_STRING Engineer
15449: PPUSH
15450: CALL_OW 104
15454: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
15455: LD_INT 1
15457: PPUSH
15458: CALL_OW 255
15462: PUSH
15463: LD_INT 3
15465: EQUAL
15466: PUSH
15467: LD_EXP 27
15471: PUSH
15472: LD_INT 1
15474: EQUAL
15475: AND
15476: IFFALSE 15488
15478: GO 15480
15480: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
15481: LD_STRING DepotCaptured
15483: PPUSH
15484: CALL_OW 104
15488: END
// export function PrepareTigers ; var i , un ; begin
15489: LD_INT 0
15491: PPUSH
15492: PPUSH
15493: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15494: LD_ADDR_VAR 0 2
15498: PUSH
15499: DOUBLE
15500: LD_INT 1
15502: DEC
15503: ST_TO_ADDR
15504: LD_INT 2
15506: PUSH
15507: LD_INT 3
15509: PUSH
15510: LD_INT 4
15512: PUSH
15513: LD_INT 5
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: PUSH
15522: LD_OWVAR 67
15526: ARRAY
15527: PUSH
15528: FOR_TO
15529: IFFALSE 15644
// begin uc_side := 0 ;
15531: LD_ADDR_OWVAR 20
15535: PUSH
15536: LD_INT 0
15538: ST_TO_ADDR
// uc_nation := nation_nature ;
15539: LD_ADDR_OWVAR 21
15543: PUSH
15544: LD_INT 0
15546: ST_TO_ADDR
// hc_sex := sex_male ;
15547: LD_ADDR_OWVAR 27
15551: PUSH
15552: LD_INT 1
15554: ST_TO_ADDR
// hc_class := class_tiger ;
15555: LD_ADDR_OWVAR 28
15559: PUSH
15560: LD_INT 14
15562: ST_TO_ADDR
// hc_skills := [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
15563: LD_ADDR_OWVAR 31
15567: PUSH
15568: LD_EXP 14
15572: PUSH
15573: LD_INT 0
15575: PUSH
15576: LD_INT 0
15578: PUSH
15579: LD_INT 0
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: ST_TO_ADDR
// hc_agressivity := [ 30 , 40 , 45 , 50 ] [ Difficulty ] ;
15588: LD_ADDR_OWVAR 35
15592: PUSH
15593: LD_INT 30
15595: PUSH
15596: LD_INT 40
15598: PUSH
15599: LD_INT 45
15601: PUSH
15602: LD_INT 50
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: PUSH
15611: LD_OWVAR 67
15615: ARRAY
15616: ST_TO_ADDR
// un = CreateHuman ;
15617: LD_ADDR_VAR 0 3
15621: PUSH
15622: CALL_OW 44
15626: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15627: LD_VAR 0 3
15631: PPUSH
15632: LD_INT 27
15634: PPUSH
15635: LD_INT 0
15637: PPUSH
15638: CALL_OW 49
// end ;
15642: GO 15528
15644: POP
15645: POP
// end ; end_of_file
15646: LD_VAR 0 1
15650: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
15651: LD_INT 1
15653: PPUSH
15654: CALL_OW 255
15658: PUSH
15659: LD_INT 1
15661: EQUAL
15662: PUSH
15663: LD_INT 10
15665: PPUSH
15666: CALL_OW 255
15670: PUSH
15671: LD_INT 1
15673: EQUAL
15674: AND
15675: PUSH
15676: LD_EXP 20
15680: PUSH
15681: LD_INT 1
15683: EQUAL
15684: AND
15685: PUSH
15686: LD_INT 22
15688: PUSH
15689: LD_INT 3
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PUSH
15696: LD_INT 21
15698: PUSH
15699: LD_INT 2
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PUSH
15706: LD_INT 34
15708: PUSH
15709: LD_INT 51
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: PUSH
15716: LD_INT 3
15718: PUSH
15719: LD_INT 58
15721: PUSH
15722: EMPTY
15723: LIST
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: PPUSH
15735: CALL_OW 69
15739: PUSH
15740: LD_INT 0
15742: EQUAL
15743: AND
15744: IFFALSE 15835
15746: GO 15748
15748: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ) ;
15749: LD_INT 9450
15751: PUSH
15752: LD_INT 8400
15754: PUSH
15755: LD_INT 6300
15757: PUSH
15758: LD_INT 6300
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: PUSH
15767: LD_OWVAR 67
15771: ARRAY
15772: PPUSH
15773: CALL_OW 67
// if cargoEscape then
15777: LD_EXP 20
15781: IFFALSE 15835
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15783: LD_EXP 9
15787: PPUSH
15788: LD_STRING D6-Pow-1
15790: PPUSH
15791: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
15795: LD_EXP 1
15799: PPUSH
15800: LD_STRING D6-JMM-1
15802: PPUSH
15803: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
15807: LD_EXP 9
15811: PPUSH
15812: LD_STRING D6-Pow-2
15814: PPUSH
15815: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
15819: LD_EXP 1
15823: PPUSH
15824: LD_STRING D6-JMM-2
15826: PPUSH
15827: CALL_OW 88
// FinishMission ;
15831: CALL 16051 0 0
// end ; end ;
15835: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
15836: LD_INT 1
15838: PPUSH
15839: CALL_OW 255
15843: PUSH
15844: LD_INT 1
15846: EQUAL
15847: PUSH
15848: LD_INT 10
15850: PPUSH
15851: CALL_OW 255
15855: PUSH
15856: LD_INT 1
15858: EQUAL
15859: AND
15860: PUSH
15861: LD_EXP 20
15865: PUSH
15866: LD_INT 1
15868: GREATER
15869: AND
15870: IFFALSE 15945
15872: GO 15874
15874: DISABLE
15875: LD_INT 0
15877: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
15878: LD_INT 11550
15880: PUSH
15881: LD_INT 10500
15883: PUSH
15884: LD_INT 9450
15886: PUSH
15887: LD_INT 8400
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: PUSH
15896: LD_OWVAR 67
15900: ARRAY
15901: PPUSH
15902: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 , 4 ] [ Difficulty ] , RussianAttack ) ;
15906: LD_INT 1
15908: PUSH
15909: LD_INT 2
15911: PUSH
15912: LD_INT 3
15914: PUSH
15915: LD_INT 4
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: PUSH
15924: LD_OWVAR 67
15928: ARRAY
15929: PPUSH
15930: LD_INT 13
15932: PPUSH
15933: CALL 13462 0 2
// lastBattle = 1 ;
15937: LD_ADDR_EXP 27
15941: PUSH
15942: LD_INT 1
15944: ST_TO_ADDR
// end ;
15945: PPOPN 1
15947: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
15948: LD_EXP 27
15952: PUSH
15953: LD_INT 1
15955: EQUAL
15956: PUSH
15957: LD_INT 26
15959: PPUSH
15960: LD_INT 22
15962: PUSH
15963: LD_INT 3
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: LD_INT 21
15972: PUSH
15973: LD_INT 1
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PPUSH
15984: CALL_OW 70
15988: PUSH
15989: LD_INT 0
15991: EQUAL
15992: AND
15993: IFFALSE 16050
15995: GO 15997
15997: DISABLE
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15998: LD_EXP 9
16002: PPUSH
16003: LD_STRING D6-Pow-1
16005: PPUSH
16006: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
16010: LD_EXP 1
16014: PPUSH
16015: LD_STRING D6-JMM-1
16017: PPUSH
16018: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
16022: LD_EXP 9
16026: PPUSH
16027: LD_STRING D6-Pow-2
16029: PPUSH
16030: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
16034: LD_EXP 1
16038: PPUSH
16039: LD_STRING D6-JMM-2
16041: PPUSH
16042: CALL_OW 88
// FinishMission ;
16046: CALL 16051 0 0
// end ;
16050: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
16051: LD_INT 0
16053: PPUSH
16054: PPUSH
16055: PPUSH
16056: PPUSH
16057: PPUSH
// if traitor then
16058: LD_EXP 33
16062: IFFALSE 16066
// exit ;
16064: GO 16935
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_nation , 1 ] ] ) ) = 1 then
16066: LD_INT 22
16068: PUSH
16069: LD_INT 1
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PUSH
16076: LD_INT 21
16078: PUSH
16079: LD_INT 1
16081: PUSH
16082: EMPTY
16083: LIST
16084: LIST
16085: PUSH
16086: LD_INT 50
16088: PUSH
16089: EMPTY
16090: LIST
16091: PUSH
16092: LD_INT 23
16094: PUSH
16095: LD_INT 1
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: PPUSH
16108: CALL_OW 69
16112: PPUSH
16113: CALL 39738 0 1
16117: PUSH
16118: LD_INT 1
16120: EQUAL
16121: IFFALSE 16130
// YouLost ( Troops ) ;
16123: LD_STRING Troops
16125: PPUSH
16126: CALL_OW 104
// if tick <= 18 18$00 then
16130: LD_OWVAR 1
16134: PUSH
16135: LD_INT 37800
16137: LESSEQUAL
16138: IFFALSE 16147
// SetAchievement ( ACH_ASPEED_2 ) ;
16140: LD_STRING ACH_ASPEED_2
16142: PPUSH
16143: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
16147: LD_ADDR_VAR 0 2
16151: PUSH
16152: LD_INT 22
16154: PUSH
16155: LD_INT 1
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: PUSH
16162: LD_INT 21
16164: PUSH
16165: LD_INT 2
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: PUSH
16172: LD_INT 24
16174: PUSH
16175: LD_INT 251
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: LIST
16186: PPUSH
16187: CALL_OW 69
16191: ST_TO_ADDR
// if tmp then
16192: LD_VAR 0 2
16196: IFFALSE 16210
// SaveVehicles ( tmp , 02_tanks_1 ) ;
16198: LD_VAR 0 2
16202: PPUSH
16203: LD_STRING 02_tanks_1
16205: PPUSH
16206: CALL 10808 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
16210: LD_EXP 21
16214: PUSH
16215: LD_INT 1
16217: EQUAL
16218: PUSH
16219: LD_EXP 8
16223: PPUSH
16224: CALL_OW 300
16228: AND
16229: IFFALSE 16243
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
16231: LD_EXP 21
16235: PPUSH
16236: LD_STRING 02_mikhailStatus_1
16238: PPUSH
16239: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
16243: LD_INT 1
16245: PPUSH
16246: CALL_OW 274
16250: PPUSH
16251: LD_INT 1
16253: PPUSH
16254: CALL_OW 275
16258: PPUSH
16259: LD_STRING 02_resources_4
16261: PPUSH
16262: CALL_OW 39
// m1 := false ;
16266: LD_ADDR_VAR 0 3
16270: PUSH
16271: LD_INT 0
16273: ST_TO_ADDR
// m2 := false ;
16274: LD_ADDR_VAR 0 4
16278: PUSH
16279: LD_INT 0
16281: ST_TO_ADDR
// m3 := false ;
16282: LD_ADDR_VAR 0 5
16286: PUSH
16287: LD_INT 0
16289: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
16290: LD_INT 1
16292: PPUSH
16293: CALL_OW 274
16297: PPUSH
16298: LD_INT 1
16300: PPUSH
16301: CALL_OW 275
16305: PUSH
16306: LD_INT 200
16308: GREATEREQUAL
16309: IFFALSE 16331
// begin AddMedal ( Cans , 1 ) ;
16311: LD_STRING Cans
16313: PPUSH
16314: LD_INT 1
16316: PPUSH
16317: CALL_OW 101
// m1 := true ;
16321: LD_ADDR_VAR 0 3
16325: PUSH
16326: LD_INT 1
16328: ST_TO_ADDR
// end else
16329: GO 16342
// begin AddMedal ( Cans , - 1 ) ;
16331: LD_STRING Cans
16333: PPUSH
16334: LD_INT 1
16336: NEG
16337: PPUSH
16338: CALL_OW 101
// end ; if deadsCounter < 2 then
16342: LD_EXP 31
16346: PUSH
16347: LD_INT 2
16349: LESS
16350: IFFALSE 16372
// begin AddMedal ( Deaths , 1 ) ;
16352: LD_STRING Deaths
16354: PPUSH
16355: LD_INT 1
16357: PPUSH
16358: CALL_OW 101
// m2 := true ;
16362: LD_ADDR_VAR 0 4
16366: PUSH
16367: LD_INT 1
16369: ST_TO_ADDR
// end else
16370: GO 16383
// begin AddMedal ( Deaths , - 1 ) ;
16372: LD_STRING Deaths
16374: PPUSH
16375: LD_INT 1
16377: NEG
16378: PPUSH
16379: CALL_OW 101
// end ; if mikhailStatus = 0 then
16383: LD_EXP 21
16387: PUSH
16388: LD_INT 0
16390: EQUAL
16391: IFFALSE 16404
// AddMedal ( Prisoner , - 1 ) ;
16393: LD_STRING Prisoner
16395: PPUSH
16396: LD_INT 1
16398: NEG
16399: PPUSH
16400: CALL_OW 101
// if mikhailStatus = 1 then
16404: LD_EXP 21
16408: PUSH
16409: LD_INT 1
16411: EQUAL
16412: IFFALSE 16432
// begin AddMedal ( Prisoner , 1 ) ;
16414: LD_STRING Prisoner
16416: PPUSH
16417: LD_INT 1
16419: PPUSH
16420: CALL_OW 101
// m3 := true ;
16424: LD_ADDR_VAR 0 5
16428: PUSH
16429: LD_INT 1
16431: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
16432: LD_EXP 21
16436: PUSH
16437: LD_INT 2
16439: EQUAL
16440: IFFALSE 16460
// begin AddMedal ( Prisoner , 2 ) ;
16442: LD_STRING Prisoner
16444: PPUSH
16445: LD_INT 2
16447: PPUSH
16448: CALL_OW 101
// m3 := true ;
16452: LD_ADDR_VAR 0 5
16456: PUSH
16457: LD_INT 1
16459: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
16460: LD_EXP 21
16464: PUSH
16465: LD_INT 3
16467: EQUAL
16468: IFFALSE 16481
// AddMedal ( Prisoner , - 2 ) ;
16470: LD_STRING Prisoner
16472: PPUSH
16473: LD_INT 2
16475: NEG
16476: PPUSH
16477: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
16481: LD_OWVAR 67
16485: PUSH
16486: LD_INT 3
16488: GREATEREQUAL
16489: PUSH
16490: LD_VAR 0 3
16494: AND
16495: PUSH
16496: LD_VAR 0 4
16500: AND
16501: PUSH
16502: LD_VAR 0 5
16506: AND
16507: IFFALSE 16519
// SetAchievementEX ( ACH_AMER , 2 ) ;
16509: LD_STRING ACH_AMER
16511: PPUSH
16512: LD_INT 2
16514: PPUSH
16515: CALL_OW 564
// GiveMedals ( MAIN ) ;
16519: LD_STRING MAIN
16521: PPUSH
16522: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
16526: LD_INT 22
16528: PUSH
16529: LD_INT 1
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: PUSH
16536: LD_INT 23
16538: PUSH
16539: LD_INT 1
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: PUSH
16546: LD_INT 21
16548: PUSH
16549: LD_INT 1
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: LIST
16560: PPUSH
16561: CALL_OW 69
16565: PPUSH
16566: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
16570: LD_EXP 1
16574: PPUSH
16575: LD_EXP 34
16579: PUSH
16580: LD_STRING JMM
16582: STR
16583: PPUSH
16584: CALL_OW 38
// if IsOK ( Bobby ) then
16588: LD_EXP 2
16592: PPUSH
16593: CALL_OW 302
16597: IFFALSE 16617
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
16599: LD_EXP 2
16603: PPUSH
16604: LD_EXP 34
16608: PUSH
16609: LD_STRING Bobby
16611: STR
16612: PPUSH
16613: CALL_OW 38
// if IsOK ( Cyrus ) then
16617: LD_EXP 3
16621: PPUSH
16622: CALL_OW 302
16626: IFFALSE 16646
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
16628: LD_EXP 3
16632: PPUSH
16633: LD_EXP 34
16637: PUSH
16638: LD_STRING Cyrus
16640: STR
16641: PPUSH
16642: CALL_OW 38
// if IsOK ( Lisa ) then
16646: LD_EXP 4
16650: PPUSH
16651: CALL_OW 302
16655: IFFALSE 16682
// begin ToLua ( enableBioCharacter(BIO_LISA) ) ;
16657: LD_STRING enableBioCharacter(BIO_LISA)
16659: PPUSH
16660: CALL_OW 559
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
16664: LD_EXP 4
16668: PPUSH
16669: LD_EXP 34
16673: PUSH
16674: LD_STRING Lisa
16676: STR
16677: PPUSH
16678: CALL_OW 38
// end ; if IsOK ( Khatam ) then
16682: LD_EXP 5
16686: PPUSH
16687: CALL_OW 302
16691: IFFALSE 16718
// begin ToLua ( enableBioCharacter(BIO_KHAT) ) ;
16693: LD_STRING enableBioCharacter(BIO_KHAT)
16695: PPUSH
16696: CALL_OW 559
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
16700: LD_EXP 5
16704: PPUSH
16705: LD_EXP 34
16709: PUSH
16710: LD_STRING Khatam
16712: STR
16713: PPUSH
16714: CALL_OW 38
// end ; if IsOK ( Brian ) then
16718: LD_EXP 6
16722: PPUSH
16723: CALL_OW 302
16727: IFFALSE 16747
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
16729: LD_EXP 6
16733: PPUSH
16734: LD_EXP 34
16738: PUSH
16739: LD_STRING Brian
16741: STR
16742: PPUSH
16743: CALL_OW 38
// if IsOk ( Jerry ) then
16747: LD_EXP 7
16751: PPUSH
16752: CALL_OW 302
16756: IFFALSE 16776
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
16758: LD_EXP 7
16762: PPUSH
16763: LD_EXP 34
16767: PUSH
16768: LD_STRING Jerry
16770: STR
16771: PPUSH
16772: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
16776: LD_EXP 21
16780: PUSH
16781: LD_INT 1
16783: EQUAL
16784: PUSH
16785: LD_EXP 8
16789: PPUSH
16790: CALL_OW 255
16794: PUSH
16795: LD_INT 1
16797: EQUAL
16798: AND
16799: PUSH
16800: LD_EXP 8
16804: PPUSH
16805: CALL_OW 302
16809: AND
16810: IFFALSE 16837
// begin ToLua ( enableBioCharacter(BIO_MICH) ) ;
16812: LD_STRING enableBioCharacter(BIO_MICH)
16814: PPUSH
16815: CALL_OW 559
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
16819: LD_EXP 8
16823: PPUSH
16824: LD_EXP 34
16828: PUSH
16829: LD_STRING Mikhail
16831: STR
16832: PPUSH
16833: CALL_OW 38
// end ; SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
16837: LD_INT 50
16839: PUSH
16840: EMPTY
16841: LIST
16842: PUSH
16843: LD_INT 22
16845: PUSH
16846: LD_INT 1
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: PUSH
16853: LD_INT 21
16855: PUSH
16856: LD_INT 1
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: LIST
16867: PPUSH
16868: CALL_OW 69
16872: PUSH
16873: LD_EXP 1
16877: PUSH
16878: LD_EXP 2
16882: PUSH
16883: LD_EXP 3
16887: PUSH
16888: LD_EXP 4
16892: PUSH
16893: LD_EXP 5
16897: PUSH
16898: LD_EXP 6
16902: PUSH
16903: LD_EXP 7
16907: PUSH
16908: LD_EXP 8
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: DIFF
16923: PPUSH
16924: LD_STRING 02_other_survivors
16926: PPUSH
16927: CALL_OW 38
// YouWin ;
16931: CALL_OW 103
// end ; end_of_file end_of_file
16935: LD_VAR 0 1
16939: RET
// export globalGameSaveCounter ; every 0 0$1 do
16940: GO 16942
16942: DISABLE
// begin enable ;
16943: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
16944: LD_STRING updateTimer(
16946: PUSH
16947: LD_OWVAR 1
16951: STR
16952: PUSH
16953: LD_STRING );
16955: STR
16956: PPUSH
16957: CALL_OW 559
// end ;
16961: END
// every 0 0$1 do
16962: GO 16964
16964: DISABLE
// begin globalGameSaveCounter := 0 ;
16965: LD_ADDR_EXP 37
16969: PUSH
16970: LD_INT 0
16972: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
16973: LD_STRING setGameSaveCounter(0)
16975: PPUSH
16976: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
16980: LD_STRING initStreamRollete();
16982: PPUSH
16983: CALL_OW 559
// InitStreamMode ;
16987: CALL 18313 0 0
// DefineStreamItems ( false ) ;
16991: LD_INT 0
16993: PPUSH
16994: CALL 18777 0 1
// end ;
16998: END
// export function SOS_MapStart ( ) ; begin
16999: LD_INT 0
17001: PPUSH
// if streamModeActive then
17002: LD_EXP 38
17006: IFFALSE 17015
// DefineStreamItems ( true ) ;
17008: LD_INT 1
17010: PPUSH
17011: CALL 18777 0 1
// UpdateLuaVariables ( ) ;
17015: CALL 17032 0 0
// UpdateFactoryWaypoints ( ) ;
17019: CALL 31646 0 0
// UpdateWarehouseGatheringPoints ( ) ;
17023: CALL 31903 0 0
// end ;
17027: LD_VAR 0 1
17031: RET
// function UpdateLuaVariables ( ) ; begin
17032: LD_INT 0
17034: PPUSH
// if globalGameSaveCounter then
17035: LD_EXP 37
17039: IFFALSE 17073
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
17041: LD_ADDR_EXP 37
17045: PUSH
17046: LD_EXP 37
17050: PPUSH
17051: CALL 76699 0 1
17055: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17056: LD_STRING setGameSaveCounter(
17058: PUSH
17059: LD_EXP 37
17063: STR
17064: PUSH
17065: LD_STRING )
17067: STR
17068: PPUSH
17069: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
17073: LD_STRING setGameDifficulty(
17075: PUSH
17076: LD_OWVAR 67
17080: STR
17081: PUSH
17082: LD_STRING )
17084: STR
17085: PPUSH
17086: CALL_OW 559
// end ;
17090: LD_VAR 0 1
17094: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17095: LD_INT 0
17097: PPUSH
// if p2 = stream_mode then
17098: LD_VAR 0 2
17102: PUSH
17103: LD_INT 100
17105: EQUAL
17106: IFFALSE 18109
// begin if not StreamModeActive then
17108: LD_EXP 38
17112: NOT
17113: IFFALSE 17123
// StreamModeActive := true ;
17115: LD_ADDR_EXP 38
17119: PUSH
17120: LD_INT 1
17122: ST_TO_ADDR
// if p3 = 0 then
17123: LD_VAR 0 3
17127: PUSH
17128: LD_INT 0
17130: EQUAL
17131: IFFALSE 17137
// InitStreamMode ;
17133: CALL 18313 0 0
// if p3 = 1 then
17137: LD_VAR 0 3
17141: PUSH
17142: LD_INT 1
17144: EQUAL
17145: IFFALSE 17155
// sRocket := true ;
17147: LD_ADDR_EXP 43
17151: PUSH
17152: LD_INT 1
17154: ST_TO_ADDR
// if p3 = 2 then
17155: LD_VAR 0 3
17159: PUSH
17160: LD_INT 2
17162: EQUAL
17163: IFFALSE 17173
// sSpeed := true ;
17165: LD_ADDR_EXP 42
17169: PUSH
17170: LD_INT 1
17172: ST_TO_ADDR
// if p3 = 3 then
17173: LD_VAR 0 3
17177: PUSH
17178: LD_INT 3
17180: EQUAL
17181: IFFALSE 17191
// sEngine := true ;
17183: LD_ADDR_EXP 44
17187: PUSH
17188: LD_INT 1
17190: ST_TO_ADDR
// if p3 = 4 then
17191: LD_VAR 0 3
17195: PUSH
17196: LD_INT 4
17198: EQUAL
17199: IFFALSE 17209
// sSpec := true ;
17201: LD_ADDR_EXP 41
17205: PUSH
17206: LD_INT 1
17208: ST_TO_ADDR
// if p3 = 5 then
17209: LD_VAR 0 3
17213: PUSH
17214: LD_INT 5
17216: EQUAL
17217: IFFALSE 17227
// sLevel := true ;
17219: LD_ADDR_EXP 45
17223: PUSH
17224: LD_INT 1
17226: ST_TO_ADDR
// if p3 = 6 then
17227: LD_VAR 0 3
17231: PUSH
17232: LD_INT 6
17234: EQUAL
17235: IFFALSE 17245
// sArmoury := true ;
17237: LD_ADDR_EXP 46
17241: PUSH
17242: LD_INT 1
17244: ST_TO_ADDR
// if p3 = 7 then
17245: LD_VAR 0 3
17249: PUSH
17250: LD_INT 7
17252: EQUAL
17253: IFFALSE 17263
// sRadar := true ;
17255: LD_ADDR_EXP 47
17259: PUSH
17260: LD_INT 1
17262: ST_TO_ADDR
// if p3 = 8 then
17263: LD_VAR 0 3
17267: PUSH
17268: LD_INT 8
17270: EQUAL
17271: IFFALSE 17281
// sBunker := true ;
17273: LD_ADDR_EXP 48
17277: PUSH
17278: LD_INT 1
17280: ST_TO_ADDR
// if p3 = 9 then
17281: LD_VAR 0 3
17285: PUSH
17286: LD_INT 9
17288: EQUAL
17289: IFFALSE 17299
// sHack := true ;
17291: LD_ADDR_EXP 49
17295: PUSH
17296: LD_INT 1
17298: ST_TO_ADDR
// if p3 = 10 then
17299: LD_VAR 0 3
17303: PUSH
17304: LD_INT 10
17306: EQUAL
17307: IFFALSE 17317
// sFire := true ;
17309: LD_ADDR_EXP 50
17313: PUSH
17314: LD_INT 1
17316: ST_TO_ADDR
// if p3 = 11 then
17317: LD_VAR 0 3
17321: PUSH
17322: LD_INT 11
17324: EQUAL
17325: IFFALSE 17335
// sRefresh := true ;
17327: LD_ADDR_EXP 51
17331: PUSH
17332: LD_INT 1
17334: ST_TO_ADDR
// if p3 = 12 then
17335: LD_VAR 0 3
17339: PUSH
17340: LD_INT 12
17342: EQUAL
17343: IFFALSE 17353
// sExp := true ;
17345: LD_ADDR_EXP 52
17349: PUSH
17350: LD_INT 1
17352: ST_TO_ADDR
// if p3 = 13 then
17353: LD_VAR 0 3
17357: PUSH
17358: LD_INT 13
17360: EQUAL
17361: IFFALSE 17371
// sDepot := true ;
17363: LD_ADDR_EXP 53
17367: PUSH
17368: LD_INT 1
17370: ST_TO_ADDR
// if p3 = 14 then
17371: LD_VAR 0 3
17375: PUSH
17376: LD_INT 14
17378: EQUAL
17379: IFFALSE 17389
// sFlag := true ;
17381: LD_ADDR_EXP 54
17385: PUSH
17386: LD_INT 1
17388: ST_TO_ADDR
// if p3 = 15 then
17389: LD_VAR 0 3
17393: PUSH
17394: LD_INT 15
17396: EQUAL
17397: IFFALSE 17407
// sKamikadze := true ;
17399: LD_ADDR_EXP 62
17403: PUSH
17404: LD_INT 1
17406: ST_TO_ADDR
// if p3 = 16 then
17407: LD_VAR 0 3
17411: PUSH
17412: LD_INT 16
17414: EQUAL
17415: IFFALSE 17425
// sTroll := true ;
17417: LD_ADDR_EXP 63
17421: PUSH
17422: LD_INT 1
17424: ST_TO_ADDR
// if p3 = 17 then
17425: LD_VAR 0 3
17429: PUSH
17430: LD_INT 17
17432: EQUAL
17433: IFFALSE 17443
// sSlow := true ;
17435: LD_ADDR_EXP 64
17439: PUSH
17440: LD_INT 1
17442: ST_TO_ADDR
// if p3 = 18 then
17443: LD_VAR 0 3
17447: PUSH
17448: LD_INT 18
17450: EQUAL
17451: IFFALSE 17461
// sLack := true ;
17453: LD_ADDR_EXP 65
17457: PUSH
17458: LD_INT 1
17460: ST_TO_ADDR
// if p3 = 19 then
17461: LD_VAR 0 3
17465: PUSH
17466: LD_INT 19
17468: EQUAL
17469: IFFALSE 17479
// sTank := true ;
17471: LD_ADDR_EXP 67
17475: PUSH
17476: LD_INT 1
17478: ST_TO_ADDR
// if p3 = 20 then
17479: LD_VAR 0 3
17483: PUSH
17484: LD_INT 20
17486: EQUAL
17487: IFFALSE 17497
// sRemote := true ;
17489: LD_ADDR_EXP 68
17493: PUSH
17494: LD_INT 1
17496: ST_TO_ADDR
// if p3 = 21 then
17497: LD_VAR 0 3
17501: PUSH
17502: LD_INT 21
17504: EQUAL
17505: IFFALSE 17515
// sPowell := true ;
17507: LD_ADDR_EXP 69
17511: PUSH
17512: LD_INT 1
17514: ST_TO_ADDR
// if p3 = 22 then
17515: LD_VAR 0 3
17519: PUSH
17520: LD_INT 22
17522: EQUAL
17523: IFFALSE 17533
// sTeleport := true ;
17525: LD_ADDR_EXP 72
17529: PUSH
17530: LD_INT 1
17532: ST_TO_ADDR
// if p3 = 23 then
17533: LD_VAR 0 3
17537: PUSH
17538: LD_INT 23
17540: EQUAL
17541: IFFALSE 17551
// sOilTower := true ;
17543: LD_ADDR_EXP 74
17547: PUSH
17548: LD_INT 1
17550: ST_TO_ADDR
// if p3 = 24 then
17551: LD_VAR 0 3
17555: PUSH
17556: LD_INT 24
17558: EQUAL
17559: IFFALSE 17569
// sShovel := true ;
17561: LD_ADDR_EXP 75
17565: PUSH
17566: LD_INT 1
17568: ST_TO_ADDR
// if p3 = 25 then
17569: LD_VAR 0 3
17573: PUSH
17574: LD_INT 25
17576: EQUAL
17577: IFFALSE 17587
// sSheik := true ;
17579: LD_ADDR_EXP 76
17583: PUSH
17584: LD_INT 1
17586: ST_TO_ADDR
// if p3 = 26 then
17587: LD_VAR 0 3
17591: PUSH
17592: LD_INT 26
17594: EQUAL
17595: IFFALSE 17605
// sEarthquake := true ;
17597: LD_ADDR_EXP 78
17601: PUSH
17602: LD_INT 1
17604: ST_TO_ADDR
// if p3 = 27 then
17605: LD_VAR 0 3
17609: PUSH
17610: LD_INT 27
17612: EQUAL
17613: IFFALSE 17623
// sAI := true ;
17615: LD_ADDR_EXP 79
17619: PUSH
17620: LD_INT 1
17622: ST_TO_ADDR
// if p3 = 28 then
17623: LD_VAR 0 3
17627: PUSH
17628: LD_INT 28
17630: EQUAL
17631: IFFALSE 17641
// sCargo := true ;
17633: LD_ADDR_EXP 82
17637: PUSH
17638: LD_INT 1
17640: ST_TO_ADDR
// if p3 = 29 then
17641: LD_VAR 0 3
17645: PUSH
17646: LD_INT 29
17648: EQUAL
17649: IFFALSE 17659
// sDLaser := true ;
17651: LD_ADDR_EXP 83
17655: PUSH
17656: LD_INT 1
17658: ST_TO_ADDR
// if p3 = 30 then
17659: LD_VAR 0 3
17663: PUSH
17664: LD_INT 30
17666: EQUAL
17667: IFFALSE 17677
// sExchange := true ;
17669: LD_ADDR_EXP 84
17673: PUSH
17674: LD_INT 1
17676: ST_TO_ADDR
// if p3 = 31 then
17677: LD_VAR 0 3
17681: PUSH
17682: LD_INT 31
17684: EQUAL
17685: IFFALSE 17695
// sFac := true ;
17687: LD_ADDR_EXP 85
17691: PUSH
17692: LD_INT 1
17694: ST_TO_ADDR
// if p3 = 32 then
17695: LD_VAR 0 3
17699: PUSH
17700: LD_INT 32
17702: EQUAL
17703: IFFALSE 17713
// sPower := true ;
17705: LD_ADDR_EXP 86
17709: PUSH
17710: LD_INT 1
17712: ST_TO_ADDR
// if p3 = 33 then
17713: LD_VAR 0 3
17717: PUSH
17718: LD_INT 33
17720: EQUAL
17721: IFFALSE 17731
// sRandom := true ;
17723: LD_ADDR_EXP 87
17727: PUSH
17728: LD_INT 1
17730: ST_TO_ADDR
// if p3 = 34 then
17731: LD_VAR 0 3
17735: PUSH
17736: LD_INT 34
17738: EQUAL
17739: IFFALSE 17749
// sShield := true ;
17741: LD_ADDR_EXP 88
17745: PUSH
17746: LD_INT 1
17748: ST_TO_ADDR
// if p3 = 35 then
17749: LD_VAR 0 3
17753: PUSH
17754: LD_INT 35
17756: EQUAL
17757: IFFALSE 17767
// sTime := true ;
17759: LD_ADDR_EXP 89
17763: PUSH
17764: LD_INT 1
17766: ST_TO_ADDR
// if p3 = 36 then
17767: LD_VAR 0 3
17771: PUSH
17772: LD_INT 36
17774: EQUAL
17775: IFFALSE 17785
// sTools := true ;
17777: LD_ADDR_EXP 90
17781: PUSH
17782: LD_INT 1
17784: ST_TO_ADDR
// if p3 = 101 then
17785: LD_VAR 0 3
17789: PUSH
17790: LD_INT 101
17792: EQUAL
17793: IFFALSE 17803
// sSold := true ;
17795: LD_ADDR_EXP 55
17799: PUSH
17800: LD_INT 1
17802: ST_TO_ADDR
// if p3 = 102 then
17803: LD_VAR 0 3
17807: PUSH
17808: LD_INT 102
17810: EQUAL
17811: IFFALSE 17821
// sDiff := true ;
17813: LD_ADDR_EXP 56
17817: PUSH
17818: LD_INT 1
17820: ST_TO_ADDR
// if p3 = 103 then
17821: LD_VAR 0 3
17825: PUSH
17826: LD_INT 103
17828: EQUAL
17829: IFFALSE 17839
// sFog := true ;
17831: LD_ADDR_EXP 59
17835: PUSH
17836: LD_INT 1
17838: ST_TO_ADDR
// if p3 = 104 then
17839: LD_VAR 0 3
17843: PUSH
17844: LD_INT 104
17846: EQUAL
17847: IFFALSE 17857
// sReset := true ;
17849: LD_ADDR_EXP 60
17853: PUSH
17854: LD_INT 1
17856: ST_TO_ADDR
// if p3 = 105 then
17857: LD_VAR 0 3
17861: PUSH
17862: LD_INT 105
17864: EQUAL
17865: IFFALSE 17875
// sSun := true ;
17867: LD_ADDR_EXP 61
17871: PUSH
17872: LD_INT 1
17874: ST_TO_ADDR
// if p3 = 106 then
17875: LD_VAR 0 3
17879: PUSH
17880: LD_INT 106
17882: EQUAL
17883: IFFALSE 17893
// sTiger := true ;
17885: LD_ADDR_EXP 57
17889: PUSH
17890: LD_INT 1
17892: ST_TO_ADDR
// if p3 = 107 then
17893: LD_VAR 0 3
17897: PUSH
17898: LD_INT 107
17900: EQUAL
17901: IFFALSE 17911
// sBomb := true ;
17903: LD_ADDR_EXP 58
17907: PUSH
17908: LD_INT 1
17910: ST_TO_ADDR
// if p3 = 108 then
17911: LD_VAR 0 3
17915: PUSH
17916: LD_INT 108
17918: EQUAL
17919: IFFALSE 17929
// sWound := true ;
17921: LD_ADDR_EXP 66
17925: PUSH
17926: LD_INT 1
17928: ST_TO_ADDR
// if p3 = 109 then
17929: LD_VAR 0 3
17933: PUSH
17934: LD_INT 109
17936: EQUAL
17937: IFFALSE 17947
// sBetray := true ;
17939: LD_ADDR_EXP 70
17943: PUSH
17944: LD_INT 1
17946: ST_TO_ADDR
// if p3 = 110 then
17947: LD_VAR 0 3
17951: PUSH
17952: LD_INT 110
17954: EQUAL
17955: IFFALSE 17965
// sContamin := true ;
17957: LD_ADDR_EXP 71
17961: PUSH
17962: LD_INT 1
17964: ST_TO_ADDR
// if p3 = 111 then
17965: LD_VAR 0 3
17969: PUSH
17970: LD_INT 111
17972: EQUAL
17973: IFFALSE 17983
// sOil := true ;
17975: LD_ADDR_EXP 73
17979: PUSH
17980: LD_INT 1
17982: ST_TO_ADDR
// if p3 = 112 then
17983: LD_VAR 0 3
17987: PUSH
17988: LD_INT 112
17990: EQUAL
17991: IFFALSE 18001
// sStu := true ;
17993: LD_ADDR_EXP 77
17997: PUSH
17998: LD_INT 1
18000: ST_TO_ADDR
// if p3 = 113 then
18001: LD_VAR 0 3
18005: PUSH
18006: LD_INT 113
18008: EQUAL
18009: IFFALSE 18019
// sBazooka := true ;
18011: LD_ADDR_EXP 80
18015: PUSH
18016: LD_INT 1
18018: ST_TO_ADDR
// if p3 = 114 then
18019: LD_VAR 0 3
18023: PUSH
18024: LD_INT 114
18026: EQUAL
18027: IFFALSE 18037
// sMortar := true ;
18029: LD_ADDR_EXP 81
18033: PUSH
18034: LD_INT 1
18036: ST_TO_ADDR
// if p3 = 115 then
18037: LD_VAR 0 3
18041: PUSH
18042: LD_INT 115
18044: EQUAL
18045: IFFALSE 18055
// sRanger := true ;
18047: LD_ADDR_EXP 91
18051: PUSH
18052: LD_INT 1
18054: ST_TO_ADDR
// if p3 = 116 then
18055: LD_VAR 0 3
18059: PUSH
18060: LD_INT 116
18062: EQUAL
18063: IFFALSE 18073
// sComputer := true ;
18065: LD_ADDR_EXP 92
18069: PUSH
18070: LD_INT 1
18072: ST_TO_ADDR
// if p3 = 117 then
18073: LD_VAR 0 3
18077: PUSH
18078: LD_INT 117
18080: EQUAL
18081: IFFALSE 18091
// s30 := true ;
18083: LD_ADDR_EXP 93
18087: PUSH
18088: LD_INT 1
18090: ST_TO_ADDR
// if p3 = 118 then
18091: LD_VAR 0 3
18095: PUSH
18096: LD_INT 118
18098: EQUAL
18099: IFFALSE 18109
// s60 := true ;
18101: LD_ADDR_EXP 94
18105: PUSH
18106: LD_INT 1
18108: ST_TO_ADDR
// end ; if p2 = hack_mode then
18109: LD_VAR 0 2
18113: PUSH
18114: LD_INT 101
18116: EQUAL
18117: IFFALSE 18245
// begin case p3 of 1 :
18119: LD_VAR 0 3
18123: PUSH
18124: LD_INT 1
18126: DOUBLE
18127: EQUAL
18128: IFTRUE 18132
18130: GO 18139
18132: POP
// hHackUnlimitedResources ; 2 :
18133: CALL 30392 0 0
18137: GO 18245
18139: LD_INT 2
18141: DOUBLE
18142: EQUAL
18143: IFTRUE 18147
18145: GO 18154
18147: POP
// hHackSetLevel10 ; 3 :
18148: CALL 30525 0 0
18152: GO 18245
18154: LD_INT 3
18156: DOUBLE
18157: EQUAL
18158: IFTRUE 18162
18160: GO 18169
18162: POP
// hHackSetLevel10YourUnits ; 4 :
18163: CALL 30610 0 0
18167: GO 18245
18169: LD_INT 4
18171: DOUBLE
18172: EQUAL
18173: IFTRUE 18177
18175: GO 18184
18177: POP
// hHackInvincible ; 5 :
18178: CALL 31058 0 0
18182: GO 18245
18184: LD_INT 5
18186: DOUBLE
18187: EQUAL
18188: IFTRUE 18192
18190: GO 18199
18192: POP
// hHackInvisible ; 6 :
18193: CALL 31169 0 0
18197: GO 18245
18199: LD_INT 6
18201: DOUBLE
18202: EQUAL
18203: IFTRUE 18207
18205: GO 18214
18207: POP
// hHackChangeYourSide ; 7 :
18208: CALL 31226 0 0
18212: GO 18245
18214: LD_INT 7
18216: DOUBLE
18217: EQUAL
18218: IFTRUE 18222
18220: GO 18229
18222: POP
// hHackChangeUnitSide ; 8 :
18223: CALL 31268 0 0
18227: GO 18245
18229: LD_INT 8
18231: DOUBLE
18232: EQUAL
18233: IFTRUE 18237
18235: GO 18244
18237: POP
// hHackFog ; end ;
18238: CALL 31369 0 0
18242: GO 18245
18244: POP
// end ; if p2 = game_save_mode then
18245: LD_VAR 0 2
18249: PUSH
18250: LD_INT 102
18252: EQUAL
18253: IFFALSE 18308
// begin if p3 = 1 then
18255: LD_VAR 0 3
18259: PUSH
18260: LD_INT 1
18262: EQUAL
18263: IFFALSE 18275
// globalGameSaveCounter := p4 ;
18265: LD_ADDR_EXP 37
18269: PUSH
18270: LD_VAR 0 4
18274: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
18275: LD_VAR 0 3
18279: PUSH
18280: LD_INT 2
18282: EQUAL
18283: PUSH
18284: LD_EXP 37
18288: AND
18289: IFFALSE 18308
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18291: LD_STRING setGameSaveCounter(
18293: PUSH
18294: LD_EXP 37
18298: STR
18299: PUSH
18300: LD_STRING )
18302: STR
18303: PPUSH
18304: CALL_OW 559
// end ; end ;
18308: LD_VAR 0 7
18312: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
18313: LD_INT 0
18315: PPUSH
// streamModeActive := false ;
18316: LD_ADDR_EXP 38
18320: PUSH
18321: LD_INT 0
18323: ST_TO_ADDR
// normalCounter := 36 ;
18324: LD_ADDR_EXP 39
18328: PUSH
18329: LD_INT 36
18331: ST_TO_ADDR
// hardcoreCounter := 18 ;
18332: LD_ADDR_EXP 40
18336: PUSH
18337: LD_INT 18
18339: ST_TO_ADDR
// sRocket := false ;
18340: LD_ADDR_EXP 43
18344: PUSH
18345: LD_INT 0
18347: ST_TO_ADDR
// sSpeed := false ;
18348: LD_ADDR_EXP 42
18352: PUSH
18353: LD_INT 0
18355: ST_TO_ADDR
// sEngine := false ;
18356: LD_ADDR_EXP 44
18360: PUSH
18361: LD_INT 0
18363: ST_TO_ADDR
// sSpec := false ;
18364: LD_ADDR_EXP 41
18368: PUSH
18369: LD_INT 0
18371: ST_TO_ADDR
// sLevel := false ;
18372: LD_ADDR_EXP 45
18376: PUSH
18377: LD_INT 0
18379: ST_TO_ADDR
// sArmoury := false ;
18380: LD_ADDR_EXP 46
18384: PUSH
18385: LD_INT 0
18387: ST_TO_ADDR
// sRadar := false ;
18388: LD_ADDR_EXP 47
18392: PUSH
18393: LD_INT 0
18395: ST_TO_ADDR
// sBunker := false ;
18396: LD_ADDR_EXP 48
18400: PUSH
18401: LD_INT 0
18403: ST_TO_ADDR
// sHack := false ;
18404: LD_ADDR_EXP 49
18408: PUSH
18409: LD_INT 0
18411: ST_TO_ADDR
// sFire := false ;
18412: LD_ADDR_EXP 50
18416: PUSH
18417: LD_INT 0
18419: ST_TO_ADDR
// sRefresh := false ;
18420: LD_ADDR_EXP 51
18424: PUSH
18425: LD_INT 0
18427: ST_TO_ADDR
// sExp := false ;
18428: LD_ADDR_EXP 52
18432: PUSH
18433: LD_INT 0
18435: ST_TO_ADDR
// sDepot := false ;
18436: LD_ADDR_EXP 53
18440: PUSH
18441: LD_INT 0
18443: ST_TO_ADDR
// sFlag := false ;
18444: LD_ADDR_EXP 54
18448: PUSH
18449: LD_INT 0
18451: ST_TO_ADDR
// sKamikadze := false ;
18452: LD_ADDR_EXP 62
18456: PUSH
18457: LD_INT 0
18459: ST_TO_ADDR
// sTroll := false ;
18460: LD_ADDR_EXP 63
18464: PUSH
18465: LD_INT 0
18467: ST_TO_ADDR
// sSlow := false ;
18468: LD_ADDR_EXP 64
18472: PUSH
18473: LD_INT 0
18475: ST_TO_ADDR
// sLack := false ;
18476: LD_ADDR_EXP 65
18480: PUSH
18481: LD_INT 0
18483: ST_TO_ADDR
// sTank := false ;
18484: LD_ADDR_EXP 67
18488: PUSH
18489: LD_INT 0
18491: ST_TO_ADDR
// sRemote := false ;
18492: LD_ADDR_EXP 68
18496: PUSH
18497: LD_INT 0
18499: ST_TO_ADDR
// sPowell := false ;
18500: LD_ADDR_EXP 69
18504: PUSH
18505: LD_INT 0
18507: ST_TO_ADDR
// sTeleport := false ;
18508: LD_ADDR_EXP 72
18512: PUSH
18513: LD_INT 0
18515: ST_TO_ADDR
// sOilTower := false ;
18516: LD_ADDR_EXP 74
18520: PUSH
18521: LD_INT 0
18523: ST_TO_ADDR
// sShovel := false ;
18524: LD_ADDR_EXP 75
18528: PUSH
18529: LD_INT 0
18531: ST_TO_ADDR
// sSheik := false ;
18532: LD_ADDR_EXP 76
18536: PUSH
18537: LD_INT 0
18539: ST_TO_ADDR
// sEarthquake := false ;
18540: LD_ADDR_EXP 78
18544: PUSH
18545: LD_INT 0
18547: ST_TO_ADDR
// sAI := false ;
18548: LD_ADDR_EXP 79
18552: PUSH
18553: LD_INT 0
18555: ST_TO_ADDR
// sCargo := false ;
18556: LD_ADDR_EXP 82
18560: PUSH
18561: LD_INT 0
18563: ST_TO_ADDR
// sDLaser := false ;
18564: LD_ADDR_EXP 83
18568: PUSH
18569: LD_INT 0
18571: ST_TO_ADDR
// sExchange := false ;
18572: LD_ADDR_EXP 84
18576: PUSH
18577: LD_INT 0
18579: ST_TO_ADDR
// sFac := false ;
18580: LD_ADDR_EXP 85
18584: PUSH
18585: LD_INT 0
18587: ST_TO_ADDR
// sPower := false ;
18588: LD_ADDR_EXP 86
18592: PUSH
18593: LD_INT 0
18595: ST_TO_ADDR
// sRandom := false ;
18596: LD_ADDR_EXP 87
18600: PUSH
18601: LD_INT 0
18603: ST_TO_ADDR
// sShield := false ;
18604: LD_ADDR_EXP 88
18608: PUSH
18609: LD_INT 0
18611: ST_TO_ADDR
// sTime := false ;
18612: LD_ADDR_EXP 89
18616: PUSH
18617: LD_INT 0
18619: ST_TO_ADDR
// sTools := false ;
18620: LD_ADDR_EXP 90
18624: PUSH
18625: LD_INT 0
18627: ST_TO_ADDR
// sSold := false ;
18628: LD_ADDR_EXP 55
18632: PUSH
18633: LD_INT 0
18635: ST_TO_ADDR
// sDiff := false ;
18636: LD_ADDR_EXP 56
18640: PUSH
18641: LD_INT 0
18643: ST_TO_ADDR
// sFog := false ;
18644: LD_ADDR_EXP 59
18648: PUSH
18649: LD_INT 0
18651: ST_TO_ADDR
// sReset := false ;
18652: LD_ADDR_EXP 60
18656: PUSH
18657: LD_INT 0
18659: ST_TO_ADDR
// sSun := false ;
18660: LD_ADDR_EXP 61
18664: PUSH
18665: LD_INT 0
18667: ST_TO_ADDR
// sTiger := false ;
18668: LD_ADDR_EXP 57
18672: PUSH
18673: LD_INT 0
18675: ST_TO_ADDR
// sBomb := false ;
18676: LD_ADDR_EXP 58
18680: PUSH
18681: LD_INT 0
18683: ST_TO_ADDR
// sWound := false ;
18684: LD_ADDR_EXP 66
18688: PUSH
18689: LD_INT 0
18691: ST_TO_ADDR
// sBetray := false ;
18692: LD_ADDR_EXP 70
18696: PUSH
18697: LD_INT 0
18699: ST_TO_ADDR
// sContamin := false ;
18700: LD_ADDR_EXP 71
18704: PUSH
18705: LD_INT 0
18707: ST_TO_ADDR
// sOil := false ;
18708: LD_ADDR_EXP 73
18712: PUSH
18713: LD_INT 0
18715: ST_TO_ADDR
// sStu := false ;
18716: LD_ADDR_EXP 77
18720: PUSH
18721: LD_INT 0
18723: ST_TO_ADDR
// sBazooka := false ;
18724: LD_ADDR_EXP 80
18728: PUSH
18729: LD_INT 0
18731: ST_TO_ADDR
// sMortar := false ;
18732: LD_ADDR_EXP 81
18736: PUSH
18737: LD_INT 0
18739: ST_TO_ADDR
// sRanger := false ;
18740: LD_ADDR_EXP 91
18744: PUSH
18745: LD_INT 0
18747: ST_TO_ADDR
// sComputer := false ;
18748: LD_ADDR_EXP 92
18752: PUSH
18753: LD_INT 0
18755: ST_TO_ADDR
// s30 := false ;
18756: LD_ADDR_EXP 93
18760: PUSH
18761: LD_INT 0
18763: ST_TO_ADDR
// s60 := false ;
18764: LD_ADDR_EXP 94
18768: PUSH
18769: LD_INT 0
18771: ST_TO_ADDR
// end ;
18772: LD_VAR 0 1
18776: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
18777: LD_INT 0
18779: PPUSH
18780: PPUSH
18781: PPUSH
18782: PPUSH
18783: PPUSH
18784: PPUSH
18785: PPUSH
// result := [ ] ;
18786: LD_ADDR_VAR 0 2
18790: PUSH
18791: EMPTY
18792: ST_TO_ADDR
// if campaign_id = 1 then
18793: LD_OWVAR 69
18797: PUSH
18798: LD_INT 1
18800: EQUAL
18801: IFFALSE 21967
// begin case mission_number of 1 :
18803: LD_OWVAR 70
18807: PUSH
18808: LD_INT 1
18810: DOUBLE
18811: EQUAL
18812: IFTRUE 18816
18814: GO 18892
18816: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18817: LD_ADDR_VAR 0 2
18821: PUSH
18822: LD_INT 2
18824: PUSH
18825: LD_INT 4
18827: PUSH
18828: LD_INT 11
18830: PUSH
18831: LD_INT 12
18833: PUSH
18834: LD_INT 15
18836: PUSH
18837: LD_INT 16
18839: PUSH
18840: LD_INT 22
18842: PUSH
18843: LD_INT 23
18845: PUSH
18846: LD_INT 26
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: PUSH
18860: LD_INT 101
18862: PUSH
18863: LD_INT 102
18865: PUSH
18866: LD_INT 106
18868: PUSH
18869: LD_INT 116
18871: PUSH
18872: LD_INT 117
18874: PUSH
18875: LD_INT 118
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: ST_TO_ADDR
18890: GO 21965
18892: LD_INT 2
18894: DOUBLE
18895: EQUAL
18896: IFTRUE 18900
18898: GO 18984
18900: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18901: LD_ADDR_VAR 0 2
18905: PUSH
18906: LD_INT 2
18908: PUSH
18909: LD_INT 4
18911: PUSH
18912: LD_INT 11
18914: PUSH
18915: LD_INT 12
18917: PUSH
18918: LD_INT 15
18920: PUSH
18921: LD_INT 16
18923: PUSH
18924: LD_INT 22
18926: PUSH
18927: LD_INT 23
18929: PUSH
18930: LD_INT 26
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 101
18946: PUSH
18947: LD_INT 102
18949: PUSH
18950: LD_INT 105
18952: PUSH
18953: LD_INT 106
18955: PUSH
18956: LD_INT 108
18958: PUSH
18959: LD_INT 116
18961: PUSH
18962: LD_INT 117
18964: PUSH
18965: LD_INT 118
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: ST_TO_ADDR
18982: GO 21965
18984: LD_INT 3
18986: DOUBLE
18987: EQUAL
18988: IFTRUE 18992
18990: GO 19080
18992: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
18993: LD_ADDR_VAR 0 2
18997: PUSH
18998: LD_INT 2
19000: PUSH
19001: LD_INT 4
19003: PUSH
19004: LD_INT 5
19006: PUSH
19007: LD_INT 11
19009: PUSH
19010: LD_INT 12
19012: PUSH
19013: LD_INT 15
19015: PUSH
19016: LD_INT 16
19018: PUSH
19019: LD_INT 22
19021: PUSH
19022: LD_INT 26
19024: PUSH
19025: LD_INT 36
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 101
19042: PUSH
19043: LD_INT 102
19045: PUSH
19046: LD_INT 105
19048: PUSH
19049: LD_INT 106
19051: PUSH
19052: LD_INT 108
19054: PUSH
19055: LD_INT 116
19057: PUSH
19058: LD_INT 117
19060: PUSH
19061: LD_INT 118
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: ST_TO_ADDR
19078: GO 21965
19080: LD_INT 4
19082: DOUBLE
19083: EQUAL
19084: IFTRUE 19088
19086: GO 19184
19088: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
19089: LD_ADDR_VAR 0 2
19093: PUSH
19094: LD_INT 2
19096: PUSH
19097: LD_INT 4
19099: PUSH
19100: LD_INT 5
19102: PUSH
19103: LD_INT 8
19105: PUSH
19106: LD_INT 11
19108: PUSH
19109: LD_INT 12
19111: PUSH
19112: LD_INT 15
19114: PUSH
19115: LD_INT 16
19117: PUSH
19118: LD_INT 22
19120: PUSH
19121: LD_INT 23
19123: PUSH
19124: LD_INT 26
19126: PUSH
19127: LD_INT 36
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: PUSH
19144: LD_INT 101
19146: PUSH
19147: LD_INT 102
19149: PUSH
19150: LD_INT 105
19152: PUSH
19153: LD_INT 106
19155: PUSH
19156: LD_INT 108
19158: PUSH
19159: LD_INT 116
19161: PUSH
19162: LD_INT 117
19164: PUSH
19165: LD_INT 118
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: ST_TO_ADDR
19182: GO 21965
19184: LD_INT 5
19186: DOUBLE
19187: EQUAL
19188: IFTRUE 19192
19190: GO 19304
19192: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
19193: LD_ADDR_VAR 0 2
19197: PUSH
19198: LD_INT 2
19200: PUSH
19201: LD_INT 4
19203: PUSH
19204: LD_INT 5
19206: PUSH
19207: LD_INT 6
19209: PUSH
19210: LD_INT 8
19212: PUSH
19213: LD_INT 11
19215: PUSH
19216: LD_INT 12
19218: PUSH
19219: LD_INT 15
19221: PUSH
19222: LD_INT 16
19224: PUSH
19225: LD_INT 22
19227: PUSH
19228: LD_INT 23
19230: PUSH
19231: LD_INT 25
19233: PUSH
19234: LD_INT 26
19236: PUSH
19237: LD_INT 36
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: PUSH
19256: LD_INT 101
19258: PUSH
19259: LD_INT 102
19261: PUSH
19262: LD_INT 105
19264: PUSH
19265: LD_INT 106
19267: PUSH
19268: LD_INT 108
19270: PUSH
19271: LD_INT 109
19273: PUSH
19274: LD_INT 112
19276: PUSH
19277: LD_INT 116
19279: PUSH
19280: LD_INT 117
19282: PUSH
19283: LD_INT 118
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: ST_TO_ADDR
19302: GO 21965
19304: LD_INT 6
19306: DOUBLE
19307: EQUAL
19308: IFTRUE 19312
19310: GO 19444
19312: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
19313: LD_ADDR_VAR 0 2
19317: PUSH
19318: LD_INT 2
19320: PUSH
19321: LD_INT 4
19323: PUSH
19324: LD_INT 5
19326: PUSH
19327: LD_INT 6
19329: PUSH
19330: LD_INT 8
19332: PUSH
19333: LD_INT 11
19335: PUSH
19336: LD_INT 12
19338: PUSH
19339: LD_INT 15
19341: PUSH
19342: LD_INT 16
19344: PUSH
19345: LD_INT 20
19347: PUSH
19348: LD_INT 21
19350: PUSH
19351: LD_INT 22
19353: PUSH
19354: LD_INT 23
19356: PUSH
19357: LD_INT 25
19359: PUSH
19360: LD_INT 26
19362: PUSH
19363: LD_INT 30
19365: PUSH
19366: LD_INT 31
19368: PUSH
19369: LD_INT 32
19371: PUSH
19372: LD_INT 36
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 101
19398: PUSH
19399: LD_INT 102
19401: PUSH
19402: LD_INT 105
19404: PUSH
19405: LD_INT 106
19407: PUSH
19408: LD_INT 108
19410: PUSH
19411: LD_INT 109
19413: PUSH
19414: LD_INT 112
19416: PUSH
19417: LD_INT 116
19419: PUSH
19420: LD_INT 117
19422: PUSH
19423: LD_INT 118
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: ST_TO_ADDR
19442: GO 21965
19444: LD_INT 7
19446: DOUBLE
19447: EQUAL
19448: IFTRUE 19452
19450: GO 19564
19452: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
19453: LD_ADDR_VAR 0 2
19457: PUSH
19458: LD_INT 2
19460: PUSH
19461: LD_INT 4
19463: PUSH
19464: LD_INT 5
19466: PUSH
19467: LD_INT 7
19469: PUSH
19470: LD_INT 11
19472: PUSH
19473: LD_INT 12
19475: PUSH
19476: LD_INT 15
19478: PUSH
19479: LD_INT 16
19481: PUSH
19482: LD_INT 20
19484: PUSH
19485: LD_INT 21
19487: PUSH
19488: LD_INT 22
19490: PUSH
19491: LD_INT 23
19493: PUSH
19494: LD_INT 25
19496: PUSH
19497: LD_INT 26
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: PUSH
19516: LD_INT 101
19518: PUSH
19519: LD_INT 102
19521: PUSH
19522: LD_INT 103
19524: PUSH
19525: LD_INT 105
19527: PUSH
19528: LD_INT 106
19530: PUSH
19531: LD_INT 108
19533: PUSH
19534: LD_INT 112
19536: PUSH
19537: LD_INT 116
19539: PUSH
19540: LD_INT 117
19542: PUSH
19543: LD_INT 118
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: ST_TO_ADDR
19562: GO 21965
19564: LD_INT 8
19566: DOUBLE
19567: EQUAL
19568: IFTRUE 19572
19570: GO 19712
19572: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
19573: LD_ADDR_VAR 0 2
19577: PUSH
19578: LD_INT 2
19580: PUSH
19581: LD_INT 4
19583: PUSH
19584: LD_INT 5
19586: PUSH
19587: LD_INT 6
19589: PUSH
19590: LD_INT 7
19592: PUSH
19593: LD_INT 8
19595: PUSH
19596: LD_INT 11
19598: PUSH
19599: LD_INT 12
19601: PUSH
19602: LD_INT 15
19604: PUSH
19605: LD_INT 16
19607: PUSH
19608: LD_INT 20
19610: PUSH
19611: LD_INT 21
19613: PUSH
19614: LD_INT 22
19616: PUSH
19617: LD_INT 23
19619: PUSH
19620: LD_INT 25
19622: PUSH
19623: LD_INT 26
19625: PUSH
19626: LD_INT 30
19628: PUSH
19629: LD_INT 31
19631: PUSH
19632: LD_INT 32
19634: PUSH
19635: LD_INT 36
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: PUSH
19660: LD_INT 101
19662: PUSH
19663: LD_INT 102
19665: PUSH
19666: LD_INT 103
19668: PUSH
19669: LD_INT 105
19671: PUSH
19672: LD_INT 106
19674: PUSH
19675: LD_INT 108
19677: PUSH
19678: LD_INT 109
19680: PUSH
19681: LD_INT 112
19683: PUSH
19684: LD_INT 116
19686: PUSH
19687: LD_INT 117
19689: PUSH
19690: LD_INT 118
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: ST_TO_ADDR
19710: GO 21965
19712: LD_INT 9
19714: DOUBLE
19715: EQUAL
19716: IFTRUE 19720
19718: GO 19868
19720: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
19721: LD_ADDR_VAR 0 2
19725: PUSH
19726: LD_INT 2
19728: PUSH
19729: LD_INT 4
19731: PUSH
19732: LD_INT 5
19734: PUSH
19735: LD_INT 6
19737: PUSH
19738: LD_INT 7
19740: PUSH
19741: LD_INT 8
19743: PUSH
19744: LD_INT 11
19746: PUSH
19747: LD_INT 12
19749: PUSH
19750: LD_INT 15
19752: PUSH
19753: LD_INT 16
19755: PUSH
19756: LD_INT 20
19758: PUSH
19759: LD_INT 21
19761: PUSH
19762: LD_INT 22
19764: PUSH
19765: LD_INT 23
19767: PUSH
19768: LD_INT 25
19770: PUSH
19771: LD_INT 26
19773: PUSH
19774: LD_INT 28
19776: PUSH
19777: LD_INT 30
19779: PUSH
19780: LD_INT 31
19782: PUSH
19783: LD_INT 32
19785: PUSH
19786: LD_INT 36
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: PUSH
19812: LD_INT 101
19814: PUSH
19815: LD_INT 102
19817: PUSH
19818: LD_INT 103
19820: PUSH
19821: LD_INT 105
19823: PUSH
19824: LD_INT 106
19826: PUSH
19827: LD_INT 108
19829: PUSH
19830: LD_INT 109
19832: PUSH
19833: LD_INT 112
19835: PUSH
19836: LD_INT 114
19838: PUSH
19839: LD_INT 116
19841: PUSH
19842: LD_INT 117
19844: PUSH
19845: LD_INT 118
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: ST_TO_ADDR
19866: GO 21965
19868: LD_INT 10
19870: DOUBLE
19871: EQUAL
19872: IFTRUE 19876
19874: GO 20072
19876: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
19877: LD_ADDR_VAR 0 2
19881: PUSH
19882: LD_INT 2
19884: PUSH
19885: LD_INT 4
19887: PUSH
19888: LD_INT 5
19890: PUSH
19891: LD_INT 6
19893: PUSH
19894: LD_INT 7
19896: PUSH
19897: LD_INT 8
19899: PUSH
19900: LD_INT 9
19902: PUSH
19903: LD_INT 10
19905: PUSH
19906: LD_INT 11
19908: PUSH
19909: LD_INT 12
19911: PUSH
19912: LD_INT 13
19914: PUSH
19915: LD_INT 14
19917: PUSH
19918: LD_INT 15
19920: PUSH
19921: LD_INT 16
19923: PUSH
19924: LD_INT 17
19926: PUSH
19927: LD_INT 18
19929: PUSH
19930: LD_INT 19
19932: PUSH
19933: LD_INT 20
19935: PUSH
19936: LD_INT 21
19938: PUSH
19939: LD_INT 22
19941: PUSH
19942: LD_INT 23
19944: PUSH
19945: LD_INT 24
19947: PUSH
19948: LD_INT 25
19950: PUSH
19951: LD_INT 26
19953: PUSH
19954: LD_INT 28
19956: PUSH
19957: LD_INT 30
19959: PUSH
19960: LD_INT 31
19962: PUSH
19963: LD_INT 32
19965: PUSH
19966: LD_INT 36
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: PUSH
20000: LD_INT 101
20002: PUSH
20003: LD_INT 102
20005: PUSH
20006: LD_INT 103
20008: PUSH
20009: LD_INT 104
20011: PUSH
20012: LD_INT 105
20014: PUSH
20015: LD_INT 106
20017: PUSH
20018: LD_INT 107
20020: PUSH
20021: LD_INT 108
20023: PUSH
20024: LD_INT 109
20026: PUSH
20027: LD_INT 110
20029: PUSH
20030: LD_INT 111
20032: PUSH
20033: LD_INT 112
20035: PUSH
20036: LD_INT 114
20038: PUSH
20039: LD_INT 116
20041: PUSH
20042: LD_INT 117
20044: PUSH
20045: LD_INT 118
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: ST_TO_ADDR
20070: GO 21965
20072: LD_INT 11
20074: DOUBLE
20075: EQUAL
20076: IFTRUE 20080
20078: GO 20284
20080: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
20081: LD_ADDR_VAR 0 2
20085: PUSH
20086: LD_INT 2
20088: PUSH
20089: LD_INT 3
20091: PUSH
20092: LD_INT 4
20094: PUSH
20095: LD_INT 5
20097: PUSH
20098: LD_INT 6
20100: PUSH
20101: LD_INT 7
20103: PUSH
20104: LD_INT 8
20106: PUSH
20107: LD_INT 9
20109: PUSH
20110: LD_INT 10
20112: PUSH
20113: LD_INT 11
20115: PUSH
20116: LD_INT 12
20118: PUSH
20119: LD_INT 13
20121: PUSH
20122: LD_INT 14
20124: PUSH
20125: LD_INT 15
20127: PUSH
20128: LD_INT 16
20130: PUSH
20131: LD_INT 17
20133: PUSH
20134: LD_INT 18
20136: PUSH
20137: LD_INT 19
20139: PUSH
20140: LD_INT 20
20142: PUSH
20143: LD_INT 21
20145: PUSH
20146: LD_INT 22
20148: PUSH
20149: LD_INT 23
20151: PUSH
20152: LD_INT 24
20154: PUSH
20155: LD_INT 25
20157: PUSH
20158: LD_INT 26
20160: PUSH
20161: LD_INT 28
20163: PUSH
20164: LD_INT 30
20166: PUSH
20167: LD_INT 31
20169: PUSH
20170: LD_INT 32
20172: PUSH
20173: LD_INT 34
20175: PUSH
20176: LD_INT 36
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: PUSH
20212: LD_INT 101
20214: PUSH
20215: LD_INT 102
20217: PUSH
20218: LD_INT 103
20220: PUSH
20221: LD_INT 104
20223: PUSH
20224: LD_INT 105
20226: PUSH
20227: LD_INT 106
20229: PUSH
20230: LD_INT 107
20232: PUSH
20233: LD_INT 108
20235: PUSH
20236: LD_INT 109
20238: PUSH
20239: LD_INT 110
20241: PUSH
20242: LD_INT 111
20244: PUSH
20245: LD_INT 112
20247: PUSH
20248: LD_INT 114
20250: PUSH
20251: LD_INT 116
20253: PUSH
20254: LD_INT 117
20256: PUSH
20257: LD_INT 118
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: ST_TO_ADDR
20282: GO 21965
20284: LD_INT 12
20286: DOUBLE
20287: EQUAL
20288: IFTRUE 20292
20290: GO 20512
20292: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
20293: LD_ADDR_VAR 0 2
20297: PUSH
20298: LD_INT 1
20300: PUSH
20301: LD_INT 2
20303: PUSH
20304: LD_INT 3
20306: PUSH
20307: LD_INT 4
20309: PUSH
20310: LD_INT 5
20312: PUSH
20313: LD_INT 6
20315: PUSH
20316: LD_INT 7
20318: PUSH
20319: LD_INT 8
20321: PUSH
20322: LD_INT 9
20324: PUSH
20325: LD_INT 10
20327: PUSH
20328: LD_INT 11
20330: PUSH
20331: LD_INT 12
20333: PUSH
20334: LD_INT 13
20336: PUSH
20337: LD_INT 14
20339: PUSH
20340: LD_INT 15
20342: PUSH
20343: LD_INT 16
20345: PUSH
20346: LD_INT 17
20348: PUSH
20349: LD_INT 18
20351: PUSH
20352: LD_INT 19
20354: PUSH
20355: LD_INT 20
20357: PUSH
20358: LD_INT 21
20360: PUSH
20361: LD_INT 22
20363: PUSH
20364: LD_INT 23
20366: PUSH
20367: LD_INT 24
20369: PUSH
20370: LD_INT 25
20372: PUSH
20373: LD_INT 26
20375: PUSH
20376: LD_INT 27
20378: PUSH
20379: LD_INT 28
20381: PUSH
20382: LD_INT 30
20384: PUSH
20385: LD_INT 31
20387: PUSH
20388: LD_INT 32
20390: PUSH
20391: LD_INT 33
20393: PUSH
20394: LD_INT 34
20396: PUSH
20397: LD_INT 36
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 101
20438: PUSH
20439: LD_INT 102
20441: PUSH
20442: LD_INT 103
20444: PUSH
20445: LD_INT 104
20447: PUSH
20448: LD_INT 105
20450: PUSH
20451: LD_INT 106
20453: PUSH
20454: LD_INT 107
20456: PUSH
20457: LD_INT 108
20459: PUSH
20460: LD_INT 109
20462: PUSH
20463: LD_INT 110
20465: PUSH
20466: LD_INT 111
20468: PUSH
20469: LD_INT 112
20471: PUSH
20472: LD_INT 113
20474: PUSH
20475: LD_INT 114
20477: PUSH
20478: LD_INT 116
20480: PUSH
20481: LD_INT 117
20483: PUSH
20484: LD_INT 118
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: ST_TO_ADDR
20510: GO 21965
20512: LD_INT 13
20514: DOUBLE
20515: EQUAL
20516: IFTRUE 20520
20518: GO 20728
20520: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20521: LD_ADDR_VAR 0 2
20525: PUSH
20526: LD_INT 1
20528: PUSH
20529: LD_INT 2
20531: PUSH
20532: LD_INT 3
20534: PUSH
20535: LD_INT 4
20537: PUSH
20538: LD_INT 5
20540: PUSH
20541: LD_INT 8
20543: PUSH
20544: LD_INT 9
20546: PUSH
20547: LD_INT 10
20549: PUSH
20550: LD_INT 11
20552: PUSH
20553: LD_INT 12
20555: PUSH
20556: LD_INT 14
20558: PUSH
20559: LD_INT 15
20561: PUSH
20562: LD_INT 16
20564: PUSH
20565: LD_INT 17
20567: PUSH
20568: LD_INT 18
20570: PUSH
20571: LD_INT 19
20573: PUSH
20574: LD_INT 20
20576: PUSH
20577: LD_INT 21
20579: PUSH
20580: LD_INT 22
20582: PUSH
20583: LD_INT 23
20585: PUSH
20586: LD_INT 24
20588: PUSH
20589: LD_INT 25
20591: PUSH
20592: LD_INT 26
20594: PUSH
20595: LD_INT 27
20597: PUSH
20598: LD_INT 28
20600: PUSH
20601: LD_INT 30
20603: PUSH
20604: LD_INT 31
20606: PUSH
20607: LD_INT 32
20609: PUSH
20610: LD_INT 33
20612: PUSH
20613: LD_INT 34
20615: PUSH
20616: LD_INT 36
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: PUSH
20652: LD_INT 101
20654: PUSH
20655: LD_INT 102
20657: PUSH
20658: LD_INT 103
20660: PUSH
20661: LD_INT 104
20663: PUSH
20664: LD_INT 105
20666: PUSH
20667: LD_INT 106
20669: PUSH
20670: LD_INT 107
20672: PUSH
20673: LD_INT 108
20675: PUSH
20676: LD_INT 109
20678: PUSH
20679: LD_INT 110
20681: PUSH
20682: LD_INT 111
20684: PUSH
20685: LD_INT 112
20687: PUSH
20688: LD_INT 113
20690: PUSH
20691: LD_INT 114
20693: PUSH
20694: LD_INT 116
20696: PUSH
20697: LD_INT 117
20699: PUSH
20700: LD_INT 118
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: ST_TO_ADDR
20726: GO 21965
20728: LD_INT 14
20730: DOUBLE
20731: EQUAL
20732: IFTRUE 20736
20734: GO 20960
20736: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20737: LD_ADDR_VAR 0 2
20741: PUSH
20742: LD_INT 1
20744: PUSH
20745: LD_INT 2
20747: PUSH
20748: LD_INT 3
20750: PUSH
20751: LD_INT 4
20753: PUSH
20754: LD_INT 5
20756: PUSH
20757: LD_INT 6
20759: PUSH
20760: LD_INT 7
20762: PUSH
20763: LD_INT 8
20765: PUSH
20766: LD_INT 9
20768: PUSH
20769: LD_INT 10
20771: PUSH
20772: LD_INT 11
20774: PUSH
20775: LD_INT 12
20777: PUSH
20778: LD_INT 13
20780: PUSH
20781: LD_INT 14
20783: PUSH
20784: LD_INT 15
20786: PUSH
20787: LD_INT 16
20789: PUSH
20790: LD_INT 17
20792: PUSH
20793: LD_INT 18
20795: PUSH
20796: LD_INT 19
20798: PUSH
20799: LD_INT 20
20801: PUSH
20802: LD_INT 21
20804: PUSH
20805: LD_INT 22
20807: PUSH
20808: LD_INT 23
20810: PUSH
20811: LD_INT 24
20813: PUSH
20814: LD_INT 25
20816: PUSH
20817: LD_INT 26
20819: PUSH
20820: LD_INT 27
20822: PUSH
20823: LD_INT 28
20825: PUSH
20826: LD_INT 29
20828: PUSH
20829: LD_INT 30
20831: PUSH
20832: LD_INT 31
20834: PUSH
20835: LD_INT 32
20837: PUSH
20838: LD_INT 33
20840: PUSH
20841: LD_INT 34
20843: PUSH
20844: LD_INT 36
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: PUSH
20884: LD_INT 101
20886: PUSH
20887: LD_INT 102
20889: PUSH
20890: LD_INT 103
20892: PUSH
20893: LD_INT 104
20895: PUSH
20896: LD_INT 105
20898: PUSH
20899: LD_INT 106
20901: PUSH
20902: LD_INT 107
20904: PUSH
20905: LD_INT 108
20907: PUSH
20908: LD_INT 109
20910: PUSH
20911: LD_INT 110
20913: PUSH
20914: LD_INT 111
20916: PUSH
20917: LD_INT 112
20919: PUSH
20920: LD_INT 113
20922: PUSH
20923: LD_INT 114
20925: PUSH
20926: LD_INT 116
20928: PUSH
20929: LD_INT 117
20931: PUSH
20932: LD_INT 118
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: ST_TO_ADDR
20958: GO 21965
20960: LD_INT 15
20962: DOUBLE
20963: EQUAL
20964: IFTRUE 20968
20966: GO 21192
20968: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
20969: LD_ADDR_VAR 0 2
20973: PUSH
20974: LD_INT 1
20976: PUSH
20977: LD_INT 2
20979: PUSH
20980: LD_INT 3
20982: PUSH
20983: LD_INT 4
20985: PUSH
20986: LD_INT 5
20988: PUSH
20989: LD_INT 6
20991: PUSH
20992: LD_INT 7
20994: PUSH
20995: LD_INT 8
20997: PUSH
20998: LD_INT 9
21000: PUSH
21001: LD_INT 10
21003: PUSH
21004: LD_INT 11
21006: PUSH
21007: LD_INT 12
21009: PUSH
21010: LD_INT 13
21012: PUSH
21013: LD_INT 14
21015: PUSH
21016: LD_INT 15
21018: PUSH
21019: LD_INT 16
21021: PUSH
21022: LD_INT 17
21024: PUSH
21025: LD_INT 18
21027: PUSH
21028: LD_INT 19
21030: PUSH
21031: LD_INT 20
21033: PUSH
21034: LD_INT 21
21036: PUSH
21037: LD_INT 22
21039: PUSH
21040: LD_INT 23
21042: PUSH
21043: LD_INT 24
21045: PUSH
21046: LD_INT 25
21048: PUSH
21049: LD_INT 26
21051: PUSH
21052: LD_INT 27
21054: PUSH
21055: LD_INT 28
21057: PUSH
21058: LD_INT 29
21060: PUSH
21061: LD_INT 30
21063: PUSH
21064: LD_INT 31
21066: PUSH
21067: LD_INT 32
21069: PUSH
21070: LD_INT 33
21072: PUSH
21073: LD_INT 34
21075: PUSH
21076: LD_INT 36
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 101
21118: PUSH
21119: LD_INT 102
21121: PUSH
21122: LD_INT 103
21124: PUSH
21125: LD_INT 104
21127: PUSH
21128: LD_INT 105
21130: PUSH
21131: LD_INT 106
21133: PUSH
21134: LD_INT 107
21136: PUSH
21137: LD_INT 108
21139: PUSH
21140: LD_INT 109
21142: PUSH
21143: LD_INT 110
21145: PUSH
21146: LD_INT 111
21148: PUSH
21149: LD_INT 112
21151: PUSH
21152: LD_INT 113
21154: PUSH
21155: LD_INT 114
21157: PUSH
21158: LD_INT 116
21160: PUSH
21161: LD_INT 117
21163: PUSH
21164: LD_INT 118
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: ST_TO_ADDR
21190: GO 21965
21192: LD_INT 16
21194: DOUBLE
21195: EQUAL
21196: IFTRUE 21200
21198: GO 21336
21200: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
21201: LD_ADDR_VAR 0 2
21205: PUSH
21206: LD_INT 2
21208: PUSH
21209: LD_INT 4
21211: PUSH
21212: LD_INT 5
21214: PUSH
21215: LD_INT 7
21217: PUSH
21218: LD_INT 11
21220: PUSH
21221: LD_INT 12
21223: PUSH
21224: LD_INT 15
21226: PUSH
21227: LD_INT 16
21229: PUSH
21230: LD_INT 20
21232: PUSH
21233: LD_INT 21
21235: PUSH
21236: LD_INT 22
21238: PUSH
21239: LD_INT 23
21241: PUSH
21242: LD_INT 25
21244: PUSH
21245: LD_INT 26
21247: PUSH
21248: LD_INT 30
21250: PUSH
21251: LD_INT 31
21253: PUSH
21254: LD_INT 32
21256: PUSH
21257: LD_INT 33
21259: PUSH
21260: LD_INT 34
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 101
21286: PUSH
21287: LD_INT 102
21289: PUSH
21290: LD_INT 103
21292: PUSH
21293: LD_INT 106
21295: PUSH
21296: LD_INT 108
21298: PUSH
21299: LD_INT 112
21301: PUSH
21302: LD_INT 113
21304: PUSH
21305: LD_INT 114
21307: PUSH
21308: LD_INT 116
21310: PUSH
21311: LD_INT 117
21313: PUSH
21314: LD_INT 118
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: ST_TO_ADDR
21334: GO 21965
21336: LD_INT 17
21338: DOUBLE
21339: EQUAL
21340: IFTRUE 21344
21342: GO 21568
21344: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
21345: LD_ADDR_VAR 0 2
21349: PUSH
21350: LD_INT 1
21352: PUSH
21353: LD_INT 2
21355: PUSH
21356: LD_INT 3
21358: PUSH
21359: LD_INT 4
21361: PUSH
21362: LD_INT 5
21364: PUSH
21365: LD_INT 6
21367: PUSH
21368: LD_INT 7
21370: PUSH
21371: LD_INT 8
21373: PUSH
21374: LD_INT 9
21376: PUSH
21377: LD_INT 10
21379: PUSH
21380: LD_INT 11
21382: PUSH
21383: LD_INT 12
21385: PUSH
21386: LD_INT 13
21388: PUSH
21389: LD_INT 14
21391: PUSH
21392: LD_INT 15
21394: PUSH
21395: LD_INT 16
21397: PUSH
21398: LD_INT 17
21400: PUSH
21401: LD_INT 18
21403: PUSH
21404: LD_INT 19
21406: PUSH
21407: LD_INT 20
21409: PUSH
21410: LD_INT 21
21412: PUSH
21413: LD_INT 22
21415: PUSH
21416: LD_INT 23
21418: PUSH
21419: LD_INT 24
21421: PUSH
21422: LD_INT 25
21424: PUSH
21425: LD_INT 26
21427: PUSH
21428: LD_INT 27
21430: PUSH
21431: LD_INT 28
21433: PUSH
21434: LD_INT 29
21436: PUSH
21437: LD_INT 30
21439: PUSH
21440: LD_INT 31
21442: PUSH
21443: LD_INT 32
21445: PUSH
21446: LD_INT 33
21448: PUSH
21449: LD_INT 34
21451: PUSH
21452: LD_INT 36
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: PUSH
21492: LD_INT 101
21494: PUSH
21495: LD_INT 102
21497: PUSH
21498: LD_INT 103
21500: PUSH
21501: LD_INT 104
21503: PUSH
21504: LD_INT 105
21506: PUSH
21507: LD_INT 106
21509: PUSH
21510: LD_INT 107
21512: PUSH
21513: LD_INT 108
21515: PUSH
21516: LD_INT 109
21518: PUSH
21519: LD_INT 110
21521: PUSH
21522: LD_INT 111
21524: PUSH
21525: LD_INT 112
21527: PUSH
21528: LD_INT 113
21530: PUSH
21531: LD_INT 114
21533: PUSH
21534: LD_INT 116
21536: PUSH
21537: LD_INT 117
21539: PUSH
21540: LD_INT 118
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: ST_TO_ADDR
21566: GO 21965
21568: LD_INT 18
21570: DOUBLE
21571: EQUAL
21572: IFTRUE 21576
21574: GO 21724
21576: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21577: LD_ADDR_VAR 0 2
21581: PUSH
21582: LD_INT 2
21584: PUSH
21585: LD_INT 4
21587: PUSH
21588: LD_INT 5
21590: PUSH
21591: LD_INT 7
21593: PUSH
21594: LD_INT 11
21596: PUSH
21597: LD_INT 12
21599: PUSH
21600: LD_INT 15
21602: PUSH
21603: LD_INT 16
21605: PUSH
21606: LD_INT 20
21608: PUSH
21609: LD_INT 21
21611: PUSH
21612: LD_INT 22
21614: PUSH
21615: LD_INT 23
21617: PUSH
21618: LD_INT 25
21620: PUSH
21621: LD_INT 26
21623: PUSH
21624: LD_INT 30
21626: PUSH
21627: LD_INT 31
21629: PUSH
21630: LD_INT 32
21632: PUSH
21633: LD_INT 33
21635: PUSH
21636: LD_INT 34
21638: PUSH
21639: LD_INT 35
21641: PUSH
21642: LD_INT 36
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 101
21670: PUSH
21671: LD_INT 102
21673: PUSH
21674: LD_INT 103
21676: PUSH
21677: LD_INT 106
21679: PUSH
21680: LD_INT 108
21682: PUSH
21683: LD_INT 112
21685: PUSH
21686: LD_INT 113
21688: PUSH
21689: LD_INT 114
21691: PUSH
21692: LD_INT 115
21694: PUSH
21695: LD_INT 116
21697: PUSH
21698: LD_INT 117
21700: PUSH
21701: LD_INT 118
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: ST_TO_ADDR
21722: GO 21965
21724: LD_INT 19
21726: DOUBLE
21727: EQUAL
21728: IFTRUE 21732
21730: GO 21964
21732: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21733: LD_ADDR_VAR 0 2
21737: PUSH
21738: LD_INT 1
21740: PUSH
21741: LD_INT 2
21743: PUSH
21744: LD_INT 3
21746: PUSH
21747: LD_INT 4
21749: PUSH
21750: LD_INT 5
21752: PUSH
21753: LD_INT 6
21755: PUSH
21756: LD_INT 7
21758: PUSH
21759: LD_INT 8
21761: PUSH
21762: LD_INT 9
21764: PUSH
21765: LD_INT 10
21767: PUSH
21768: LD_INT 11
21770: PUSH
21771: LD_INT 12
21773: PUSH
21774: LD_INT 13
21776: PUSH
21777: LD_INT 14
21779: PUSH
21780: LD_INT 15
21782: PUSH
21783: LD_INT 16
21785: PUSH
21786: LD_INT 17
21788: PUSH
21789: LD_INT 18
21791: PUSH
21792: LD_INT 19
21794: PUSH
21795: LD_INT 20
21797: PUSH
21798: LD_INT 21
21800: PUSH
21801: LD_INT 22
21803: PUSH
21804: LD_INT 23
21806: PUSH
21807: LD_INT 24
21809: PUSH
21810: LD_INT 25
21812: PUSH
21813: LD_INT 26
21815: PUSH
21816: LD_INT 27
21818: PUSH
21819: LD_INT 28
21821: PUSH
21822: LD_INT 29
21824: PUSH
21825: LD_INT 30
21827: PUSH
21828: LD_INT 31
21830: PUSH
21831: LD_INT 32
21833: PUSH
21834: LD_INT 33
21836: PUSH
21837: LD_INT 34
21839: PUSH
21840: LD_INT 35
21842: PUSH
21843: LD_INT 36
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: PUSH
21884: LD_INT 101
21886: PUSH
21887: LD_INT 102
21889: PUSH
21890: LD_INT 103
21892: PUSH
21893: LD_INT 104
21895: PUSH
21896: LD_INT 105
21898: PUSH
21899: LD_INT 106
21901: PUSH
21902: LD_INT 107
21904: PUSH
21905: LD_INT 108
21907: PUSH
21908: LD_INT 109
21910: PUSH
21911: LD_INT 110
21913: PUSH
21914: LD_INT 111
21916: PUSH
21917: LD_INT 112
21919: PUSH
21920: LD_INT 113
21922: PUSH
21923: LD_INT 114
21925: PUSH
21926: LD_INT 115
21928: PUSH
21929: LD_INT 116
21931: PUSH
21932: LD_INT 117
21934: PUSH
21935: LD_INT 118
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: ST_TO_ADDR
21962: GO 21965
21964: POP
// end else
21965: GO 22196
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
21967: LD_ADDR_VAR 0 2
21971: PUSH
21972: LD_INT 1
21974: PUSH
21975: LD_INT 2
21977: PUSH
21978: LD_INT 3
21980: PUSH
21981: LD_INT 4
21983: PUSH
21984: LD_INT 5
21986: PUSH
21987: LD_INT 6
21989: PUSH
21990: LD_INT 7
21992: PUSH
21993: LD_INT 8
21995: PUSH
21996: LD_INT 9
21998: PUSH
21999: LD_INT 10
22001: PUSH
22002: LD_INT 11
22004: PUSH
22005: LD_INT 12
22007: PUSH
22008: LD_INT 13
22010: PUSH
22011: LD_INT 14
22013: PUSH
22014: LD_INT 15
22016: PUSH
22017: LD_INT 16
22019: PUSH
22020: LD_INT 17
22022: PUSH
22023: LD_INT 18
22025: PUSH
22026: LD_INT 19
22028: PUSH
22029: LD_INT 20
22031: PUSH
22032: LD_INT 21
22034: PUSH
22035: LD_INT 22
22037: PUSH
22038: LD_INT 23
22040: PUSH
22041: LD_INT 24
22043: PUSH
22044: LD_INT 25
22046: PUSH
22047: LD_INT 26
22049: PUSH
22050: LD_INT 27
22052: PUSH
22053: LD_INT 28
22055: PUSH
22056: LD_INT 29
22058: PUSH
22059: LD_INT 30
22061: PUSH
22062: LD_INT 31
22064: PUSH
22065: LD_INT 32
22067: PUSH
22068: LD_INT 33
22070: PUSH
22071: LD_INT 34
22073: PUSH
22074: LD_INT 35
22076: PUSH
22077: LD_INT 36
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 101
22120: PUSH
22121: LD_INT 102
22123: PUSH
22124: LD_INT 103
22126: PUSH
22127: LD_INT 104
22129: PUSH
22130: LD_INT 105
22132: PUSH
22133: LD_INT 106
22135: PUSH
22136: LD_INT 107
22138: PUSH
22139: LD_INT 108
22141: PUSH
22142: LD_INT 109
22144: PUSH
22145: LD_INT 110
22147: PUSH
22148: LD_INT 111
22150: PUSH
22151: LD_INT 112
22153: PUSH
22154: LD_INT 113
22156: PUSH
22157: LD_INT 114
22159: PUSH
22160: LD_INT 115
22162: PUSH
22163: LD_INT 116
22165: PUSH
22166: LD_INT 117
22168: PUSH
22169: LD_INT 118
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: ST_TO_ADDR
// if result then
22196: LD_VAR 0 2
22200: IFFALSE 22986
// begin normal :=  ;
22202: LD_ADDR_VAR 0 5
22206: PUSH
22207: LD_STRING 
22209: ST_TO_ADDR
// hardcore :=  ;
22210: LD_ADDR_VAR 0 6
22214: PUSH
22215: LD_STRING 
22217: ST_TO_ADDR
// active :=  ;
22218: LD_ADDR_VAR 0 7
22222: PUSH
22223: LD_STRING 
22225: ST_TO_ADDR
// for i = 1 to normalCounter do
22226: LD_ADDR_VAR 0 8
22230: PUSH
22231: DOUBLE
22232: LD_INT 1
22234: DEC
22235: ST_TO_ADDR
22236: LD_EXP 39
22240: PUSH
22241: FOR_TO
22242: IFFALSE 22343
// begin tmp := 0 ;
22244: LD_ADDR_VAR 0 3
22248: PUSH
22249: LD_STRING 0
22251: ST_TO_ADDR
// if result [ 1 ] then
22252: LD_VAR 0 2
22256: PUSH
22257: LD_INT 1
22259: ARRAY
22260: IFFALSE 22325
// if result [ 1 ] [ 1 ] = i then
22262: LD_VAR 0 2
22266: PUSH
22267: LD_INT 1
22269: ARRAY
22270: PUSH
22271: LD_INT 1
22273: ARRAY
22274: PUSH
22275: LD_VAR 0 8
22279: EQUAL
22280: IFFALSE 22325
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22282: LD_ADDR_VAR 0 2
22286: PUSH
22287: LD_VAR 0 2
22291: PPUSH
22292: LD_INT 1
22294: PPUSH
22295: LD_VAR 0 2
22299: PUSH
22300: LD_INT 1
22302: ARRAY
22303: PPUSH
22304: LD_INT 1
22306: PPUSH
22307: CALL_OW 3
22311: PPUSH
22312: CALL_OW 1
22316: ST_TO_ADDR
// tmp := 1 ;
22317: LD_ADDR_VAR 0 3
22321: PUSH
22322: LD_STRING 1
22324: ST_TO_ADDR
// end ; normal := normal & tmp ;
22325: LD_ADDR_VAR 0 5
22329: PUSH
22330: LD_VAR 0 5
22334: PUSH
22335: LD_VAR 0 3
22339: STR
22340: ST_TO_ADDR
// end ;
22341: GO 22241
22343: POP
22344: POP
// for i = 1 to hardcoreCounter do
22345: LD_ADDR_VAR 0 8
22349: PUSH
22350: DOUBLE
22351: LD_INT 1
22353: DEC
22354: ST_TO_ADDR
22355: LD_EXP 40
22359: PUSH
22360: FOR_TO
22361: IFFALSE 22466
// begin tmp := 0 ;
22363: LD_ADDR_VAR 0 3
22367: PUSH
22368: LD_STRING 0
22370: ST_TO_ADDR
// if result [ 2 ] then
22371: LD_VAR 0 2
22375: PUSH
22376: LD_INT 2
22378: ARRAY
22379: IFFALSE 22448
// if result [ 2 ] [ 1 ] = 100 + i then
22381: LD_VAR 0 2
22385: PUSH
22386: LD_INT 2
22388: ARRAY
22389: PUSH
22390: LD_INT 1
22392: ARRAY
22393: PUSH
22394: LD_INT 100
22396: PUSH
22397: LD_VAR 0 8
22401: PLUS
22402: EQUAL
22403: IFFALSE 22448
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22405: LD_ADDR_VAR 0 2
22409: PUSH
22410: LD_VAR 0 2
22414: PPUSH
22415: LD_INT 2
22417: PPUSH
22418: LD_VAR 0 2
22422: PUSH
22423: LD_INT 2
22425: ARRAY
22426: PPUSH
22427: LD_INT 1
22429: PPUSH
22430: CALL_OW 3
22434: PPUSH
22435: CALL_OW 1
22439: ST_TO_ADDR
// tmp := 1 ;
22440: LD_ADDR_VAR 0 3
22444: PUSH
22445: LD_STRING 1
22447: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22448: LD_ADDR_VAR 0 6
22452: PUSH
22453: LD_VAR 0 6
22457: PUSH
22458: LD_VAR 0 3
22462: STR
22463: ST_TO_ADDR
// end ;
22464: GO 22360
22466: POP
22467: POP
// if isGameLoad then
22468: LD_VAR 0 1
22472: IFFALSE 22947
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
22474: LD_ADDR_VAR 0 4
22478: PUSH
22479: LD_EXP 43
22483: PUSH
22484: LD_EXP 42
22488: PUSH
22489: LD_EXP 44
22493: PUSH
22494: LD_EXP 41
22498: PUSH
22499: LD_EXP 45
22503: PUSH
22504: LD_EXP 46
22508: PUSH
22509: LD_EXP 47
22513: PUSH
22514: LD_EXP 48
22518: PUSH
22519: LD_EXP 49
22523: PUSH
22524: LD_EXP 50
22528: PUSH
22529: LD_EXP 51
22533: PUSH
22534: LD_EXP 52
22538: PUSH
22539: LD_EXP 53
22543: PUSH
22544: LD_EXP 54
22548: PUSH
22549: LD_EXP 62
22553: PUSH
22554: LD_EXP 63
22558: PUSH
22559: LD_EXP 64
22563: PUSH
22564: LD_EXP 65
22568: PUSH
22569: LD_EXP 67
22573: PUSH
22574: LD_EXP 68
22578: PUSH
22579: LD_EXP 69
22583: PUSH
22584: LD_EXP 72
22588: PUSH
22589: LD_EXP 74
22593: PUSH
22594: LD_EXP 75
22598: PUSH
22599: LD_EXP 76
22603: PUSH
22604: LD_EXP 78
22608: PUSH
22609: LD_EXP 79
22613: PUSH
22614: LD_EXP 82
22618: PUSH
22619: LD_EXP 83
22623: PUSH
22624: LD_EXP 84
22628: PUSH
22629: LD_EXP 85
22633: PUSH
22634: LD_EXP 86
22638: PUSH
22639: LD_EXP 87
22643: PUSH
22644: LD_EXP 88
22648: PUSH
22649: LD_EXP 89
22653: PUSH
22654: LD_EXP 90
22658: PUSH
22659: LD_EXP 55
22663: PUSH
22664: LD_EXP 56
22668: PUSH
22669: LD_EXP 59
22673: PUSH
22674: LD_EXP 60
22678: PUSH
22679: LD_EXP 61
22683: PUSH
22684: LD_EXP 57
22688: PUSH
22689: LD_EXP 58
22693: PUSH
22694: LD_EXP 66
22698: PUSH
22699: LD_EXP 70
22703: PUSH
22704: LD_EXP 71
22708: PUSH
22709: LD_EXP 73
22713: PUSH
22714: LD_EXP 77
22718: PUSH
22719: LD_EXP 80
22723: PUSH
22724: LD_EXP 81
22728: PUSH
22729: LD_EXP 91
22733: PUSH
22734: LD_EXP 92
22738: PUSH
22739: LD_EXP 93
22743: PUSH
22744: LD_EXP 94
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: ST_TO_ADDR
// tmp :=  ;
22805: LD_ADDR_VAR 0 3
22809: PUSH
22810: LD_STRING 
22812: ST_TO_ADDR
// for i = 1 to normalCounter do
22813: LD_ADDR_VAR 0 8
22817: PUSH
22818: DOUBLE
22819: LD_INT 1
22821: DEC
22822: ST_TO_ADDR
22823: LD_EXP 39
22827: PUSH
22828: FOR_TO
22829: IFFALSE 22865
// begin if flags [ i ] then
22831: LD_VAR 0 4
22835: PUSH
22836: LD_VAR 0 8
22840: ARRAY
22841: IFFALSE 22863
// tmp := tmp & i & ; ;
22843: LD_ADDR_VAR 0 3
22847: PUSH
22848: LD_VAR 0 3
22852: PUSH
22853: LD_VAR 0 8
22857: STR
22858: PUSH
22859: LD_STRING ;
22861: STR
22862: ST_TO_ADDR
// end ;
22863: GO 22828
22865: POP
22866: POP
// for i = 1 to hardcoreCounter do
22867: LD_ADDR_VAR 0 8
22871: PUSH
22872: DOUBLE
22873: LD_INT 1
22875: DEC
22876: ST_TO_ADDR
22877: LD_EXP 40
22881: PUSH
22882: FOR_TO
22883: IFFALSE 22929
// begin if flags [ normalCounter + i ] then
22885: LD_VAR 0 4
22889: PUSH
22890: LD_EXP 39
22894: PUSH
22895: LD_VAR 0 8
22899: PLUS
22900: ARRAY
22901: IFFALSE 22927
// tmp := tmp & ( 100 + i ) & ; ;
22903: LD_ADDR_VAR 0 3
22907: PUSH
22908: LD_VAR 0 3
22912: PUSH
22913: LD_INT 100
22915: PUSH
22916: LD_VAR 0 8
22920: PLUS
22921: STR
22922: PUSH
22923: LD_STRING ;
22925: STR
22926: ST_TO_ADDR
// end ;
22927: GO 22882
22929: POP
22930: POP
// if tmp then
22931: LD_VAR 0 3
22935: IFFALSE 22947
// active := tmp ;
22937: LD_ADDR_VAR 0 7
22941: PUSH
22942: LD_VAR 0 3
22946: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
22947: LD_STRING getStreamItemsFromMission("
22949: PUSH
22950: LD_VAR 0 5
22954: STR
22955: PUSH
22956: LD_STRING ","
22958: STR
22959: PUSH
22960: LD_VAR 0 6
22964: STR
22965: PUSH
22966: LD_STRING ","
22968: STR
22969: PUSH
22970: LD_VAR 0 7
22974: STR
22975: PUSH
22976: LD_STRING ")
22978: STR
22979: PPUSH
22980: CALL_OW 559
// end else
22984: GO 22993
// ToLua ( getStreamItemsFromMission("","","") ) ;
22986: LD_STRING getStreamItemsFromMission("","","")
22988: PPUSH
22989: CALL_OW 559
// end ;
22993: LD_VAR 0 2
22997: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22998: LD_EXP 38
23002: PUSH
23003: LD_EXP 43
23007: AND
23008: IFFALSE 23132
23010: GO 23012
23012: DISABLE
23013: LD_INT 0
23015: PPUSH
23016: PPUSH
// begin enable ;
23017: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23018: LD_ADDR_VAR 0 2
23022: PUSH
23023: LD_INT 22
23025: PUSH
23026: LD_OWVAR 2
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 2
23037: PUSH
23038: LD_INT 34
23040: PUSH
23041: LD_INT 7
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: LD_INT 34
23050: PUSH
23051: LD_INT 45
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PUSH
23058: LD_INT 34
23060: PUSH
23061: LD_INT 28
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: LD_INT 34
23070: PUSH
23071: LD_INT 47
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PPUSH
23089: CALL_OW 69
23093: ST_TO_ADDR
// if not tmp then
23094: LD_VAR 0 2
23098: NOT
23099: IFFALSE 23103
// exit ;
23101: GO 23132
// for i in tmp do
23103: LD_ADDR_VAR 0 1
23107: PUSH
23108: LD_VAR 0 2
23112: PUSH
23113: FOR_IN
23114: IFFALSE 23130
// begin SetLives ( i , 0 ) ;
23116: LD_VAR 0 1
23120: PPUSH
23121: LD_INT 0
23123: PPUSH
23124: CALL_OW 234
// end ;
23128: GO 23113
23130: POP
23131: POP
// end ;
23132: PPOPN 2
23134: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23135: LD_EXP 38
23139: PUSH
23140: LD_EXP 44
23144: AND
23145: IFFALSE 23229
23147: GO 23149
23149: DISABLE
23150: LD_INT 0
23152: PPUSH
23153: PPUSH
// begin enable ;
23154: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23155: LD_ADDR_VAR 0 2
23159: PUSH
23160: LD_INT 22
23162: PUSH
23163: LD_OWVAR 2
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: LD_INT 32
23174: PUSH
23175: LD_INT 3
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PPUSH
23186: CALL_OW 69
23190: ST_TO_ADDR
// if not tmp then
23191: LD_VAR 0 2
23195: NOT
23196: IFFALSE 23200
// exit ;
23198: GO 23229
// for i in tmp do
23200: LD_ADDR_VAR 0 1
23204: PUSH
23205: LD_VAR 0 2
23209: PUSH
23210: FOR_IN
23211: IFFALSE 23227
// begin SetLives ( i , 0 ) ;
23213: LD_VAR 0 1
23217: PPUSH
23218: LD_INT 0
23220: PPUSH
23221: CALL_OW 234
// end ;
23225: GO 23210
23227: POP
23228: POP
// end ;
23229: PPOPN 2
23231: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23232: LD_EXP 38
23236: PUSH
23237: LD_EXP 41
23241: AND
23242: IFFALSE 23335
23244: GO 23246
23246: DISABLE
23247: LD_INT 0
23249: PPUSH
// begin enable ;
23250: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23251: LD_ADDR_VAR 0 1
23255: PUSH
23256: LD_INT 22
23258: PUSH
23259: LD_OWVAR 2
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: LD_INT 2
23270: PUSH
23271: LD_INT 25
23273: PUSH
23274: LD_INT 5
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 25
23283: PUSH
23284: LD_INT 9
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: PUSH
23291: LD_INT 25
23293: PUSH
23294: LD_INT 8
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PPUSH
23311: CALL_OW 69
23315: PUSH
23316: FOR_IN
23317: IFFALSE 23333
// begin SetClass ( i , 1 ) ;
23319: LD_VAR 0 1
23323: PPUSH
23324: LD_INT 1
23326: PPUSH
23327: CALL_OW 336
// end ;
23331: GO 23316
23333: POP
23334: POP
// end ;
23335: PPOPN 1
23337: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23338: LD_EXP 38
23342: PUSH
23343: LD_EXP 42
23347: AND
23348: PUSH
23349: LD_OWVAR 65
23353: PUSH
23354: LD_INT 7
23356: LESS
23357: AND
23358: IFFALSE 23372
23360: GO 23362
23362: DISABLE
// begin enable ;
23363: ENABLE
// game_speed := 7 ;
23364: LD_ADDR_OWVAR 65
23368: PUSH
23369: LD_INT 7
23371: ST_TO_ADDR
// end ;
23372: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23373: LD_EXP 38
23377: PUSH
23378: LD_EXP 45
23382: AND
23383: IFFALSE 23585
23385: GO 23387
23387: DISABLE
23388: LD_INT 0
23390: PPUSH
23391: PPUSH
23392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23393: LD_ADDR_VAR 0 3
23397: PUSH
23398: LD_INT 81
23400: PUSH
23401: LD_OWVAR 2
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 21
23412: PUSH
23413: LD_INT 1
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PPUSH
23424: CALL_OW 69
23428: ST_TO_ADDR
// if not tmp then
23429: LD_VAR 0 3
23433: NOT
23434: IFFALSE 23438
// exit ;
23436: GO 23585
// if tmp > 5 then
23438: LD_VAR 0 3
23442: PUSH
23443: LD_INT 5
23445: GREATER
23446: IFFALSE 23458
// k := 5 else
23448: LD_ADDR_VAR 0 2
23452: PUSH
23453: LD_INT 5
23455: ST_TO_ADDR
23456: GO 23468
// k := tmp ;
23458: LD_ADDR_VAR 0 2
23462: PUSH
23463: LD_VAR 0 3
23467: ST_TO_ADDR
// for i := 1 to k do
23468: LD_ADDR_VAR 0 1
23472: PUSH
23473: DOUBLE
23474: LD_INT 1
23476: DEC
23477: ST_TO_ADDR
23478: LD_VAR 0 2
23482: PUSH
23483: FOR_TO
23484: IFFALSE 23583
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23486: LD_VAR 0 3
23490: PUSH
23491: LD_VAR 0 1
23495: ARRAY
23496: PPUSH
23497: LD_VAR 0 1
23501: PUSH
23502: LD_INT 4
23504: MOD
23505: PUSH
23506: LD_INT 1
23508: PLUS
23509: PPUSH
23510: CALL_OW 259
23514: PUSH
23515: LD_INT 10
23517: LESS
23518: IFFALSE 23581
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23520: LD_VAR 0 3
23524: PUSH
23525: LD_VAR 0 1
23529: ARRAY
23530: PPUSH
23531: LD_VAR 0 1
23535: PUSH
23536: LD_INT 4
23538: MOD
23539: PUSH
23540: LD_INT 1
23542: PLUS
23543: PPUSH
23544: LD_VAR 0 3
23548: PUSH
23549: LD_VAR 0 1
23553: ARRAY
23554: PPUSH
23555: LD_VAR 0 1
23559: PUSH
23560: LD_INT 4
23562: MOD
23563: PUSH
23564: LD_INT 1
23566: PLUS
23567: PPUSH
23568: CALL_OW 259
23572: PUSH
23573: LD_INT 1
23575: PLUS
23576: PPUSH
23577: CALL_OW 237
23581: GO 23483
23583: POP
23584: POP
// end ;
23585: PPOPN 3
23587: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23588: LD_EXP 38
23592: PUSH
23593: LD_EXP 46
23597: AND
23598: IFFALSE 23618
23600: GO 23602
23602: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23603: LD_INT 4
23605: PPUSH
23606: LD_OWVAR 2
23610: PPUSH
23611: LD_INT 0
23613: PPUSH
23614: CALL_OW 324
23618: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23619: LD_EXP 38
23623: PUSH
23624: LD_EXP 75
23628: AND
23629: IFFALSE 23649
23631: GO 23633
23633: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23634: LD_INT 19
23636: PPUSH
23637: LD_OWVAR 2
23641: PPUSH
23642: LD_INT 0
23644: PPUSH
23645: CALL_OW 324
23649: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23650: LD_EXP 38
23654: PUSH
23655: LD_EXP 47
23659: AND
23660: IFFALSE 23762
23662: GO 23664
23664: DISABLE
23665: LD_INT 0
23667: PPUSH
23668: PPUSH
// begin enable ;
23669: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23670: LD_ADDR_VAR 0 2
23674: PUSH
23675: LD_INT 22
23677: PUSH
23678: LD_OWVAR 2
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: LD_INT 2
23689: PUSH
23690: LD_INT 34
23692: PUSH
23693: LD_INT 11
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 34
23702: PUSH
23703: LD_INT 30
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: LIST
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PPUSH
23719: CALL_OW 69
23723: ST_TO_ADDR
// if not tmp then
23724: LD_VAR 0 2
23728: NOT
23729: IFFALSE 23733
// exit ;
23731: GO 23762
// for i in tmp do
23733: LD_ADDR_VAR 0 1
23737: PUSH
23738: LD_VAR 0 2
23742: PUSH
23743: FOR_IN
23744: IFFALSE 23760
// begin SetLives ( i , 0 ) ;
23746: LD_VAR 0 1
23750: PPUSH
23751: LD_INT 0
23753: PPUSH
23754: CALL_OW 234
// end ;
23758: GO 23743
23760: POP
23761: POP
// end ;
23762: PPOPN 2
23764: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23765: LD_EXP 38
23769: PUSH
23770: LD_EXP 48
23774: AND
23775: IFFALSE 23795
23777: GO 23779
23779: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23780: LD_INT 32
23782: PPUSH
23783: LD_OWVAR 2
23787: PPUSH
23788: LD_INT 0
23790: PPUSH
23791: CALL_OW 324
23795: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23796: LD_EXP 38
23800: PUSH
23801: LD_EXP 49
23805: AND
23806: IFFALSE 23987
23808: GO 23810
23810: DISABLE
23811: LD_INT 0
23813: PPUSH
23814: PPUSH
23815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23816: LD_ADDR_VAR 0 2
23820: PUSH
23821: LD_INT 22
23823: PUSH
23824: LD_OWVAR 2
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 33
23835: PUSH
23836: LD_INT 3
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PPUSH
23847: CALL_OW 69
23851: ST_TO_ADDR
// if not tmp then
23852: LD_VAR 0 2
23856: NOT
23857: IFFALSE 23861
// exit ;
23859: GO 23987
// side := 0 ;
23861: LD_ADDR_VAR 0 3
23865: PUSH
23866: LD_INT 0
23868: ST_TO_ADDR
// for i := 1 to 8 do
23869: LD_ADDR_VAR 0 1
23873: PUSH
23874: DOUBLE
23875: LD_INT 1
23877: DEC
23878: ST_TO_ADDR
23879: LD_INT 8
23881: PUSH
23882: FOR_TO
23883: IFFALSE 23931
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23885: LD_OWVAR 2
23889: PUSH
23890: LD_VAR 0 1
23894: NONEQUAL
23895: PUSH
23896: LD_OWVAR 2
23900: PPUSH
23901: LD_VAR 0 1
23905: PPUSH
23906: CALL_OW 81
23910: PUSH
23911: LD_INT 2
23913: EQUAL
23914: AND
23915: IFFALSE 23929
// begin side := i ;
23917: LD_ADDR_VAR 0 3
23921: PUSH
23922: LD_VAR 0 1
23926: ST_TO_ADDR
// break ;
23927: GO 23931
// end ;
23929: GO 23882
23931: POP
23932: POP
// if not side then
23933: LD_VAR 0 3
23937: NOT
23938: IFFALSE 23942
// exit ;
23940: GO 23987
// for i := 1 to tmp do
23942: LD_ADDR_VAR 0 1
23946: PUSH
23947: DOUBLE
23948: LD_INT 1
23950: DEC
23951: ST_TO_ADDR
23952: LD_VAR 0 2
23956: PUSH
23957: FOR_TO
23958: IFFALSE 23985
// if Prob ( 60 ) then
23960: LD_INT 60
23962: PPUSH
23963: CALL_OW 13
23967: IFFALSE 23983
// SetSide ( i , side ) ;
23969: LD_VAR 0 1
23973: PPUSH
23974: LD_VAR 0 3
23978: PPUSH
23979: CALL_OW 235
23983: GO 23957
23985: POP
23986: POP
// end ;
23987: PPOPN 3
23989: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23990: LD_EXP 38
23994: PUSH
23995: LD_EXP 51
23999: AND
24000: IFFALSE 24119
24002: GO 24004
24004: DISABLE
24005: LD_INT 0
24007: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24008: LD_ADDR_VAR 0 1
24012: PUSH
24013: LD_INT 22
24015: PUSH
24016: LD_OWVAR 2
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 21
24027: PUSH
24028: LD_INT 1
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 3
24037: PUSH
24038: LD_INT 23
24040: PUSH
24041: LD_INT 0
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: LIST
24056: PPUSH
24057: CALL_OW 69
24061: PUSH
24062: FOR_IN
24063: IFFALSE 24117
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24065: LD_VAR 0 1
24069: PPUSH
24070: CALL_OW 257
24074: PUSH
24075: LD_INT 1
24077: PUSH
24078: LD_INT 2
24080: PUSH
24081: LD_INT 3
24083: PUSH
24084: LD_INT 4
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: IN
24093: IFFALSE 24115
// SetClass ( un , rand ( 1 , 4 ) ) ;
24095: LD_VAR 0 1
24099: PPUSH
24100: LD_INT 1
24102: PPUSH
24103: LD_INT 4
24105: PPUSH
24106: CALL_OW 12
24110: PPUSH
24111: CALL_OW 336
24115: GO 24062
24117: POP
24118: POP
// end ;
24119: PPOPN 1
24121: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24122: LD_EXP 38
24126: PUSH
24127: LD_EXP 50
24131: AND
24132: IFFALSE 24211
24134: GO 24136
24136: DISABLE
24137: LD_INT 0
24139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24140: LD_ADDR_VAR 0 1
24144: PUSH
24145: LD_INT 22
24147: PUSH
24148: LD_OWVAR 2
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 21
24159: PUSH
24160: LD_INT 3
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PPUSH
24171: CALL_OW 69
24175: ST_TO_ADDR
// if not tmp then
24176: LD_VAR 0 1
24180: NOT
24181: IFFALSE 24185
// exit ;
24183: GO 24211
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24185: LD_VAR 0 1
24189: PUSH
24190: LD_INT 1
24192: PPUSH
24193: LD_VAR 0 1
24197: PPUSH
24198: CALL_OW 12
24202: ARRAY
24203: PPUSH
24204: LD_INT 100
24206: PPUSH
24207: CALL_OW 234
// end ;
24211: PPOPN 1
24213: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24214: LD_EXP 38
24218: PUSH
24219: LD_EXP 52
24223: AND
24224: IFFALSE 24322
24226: GO 24228
24228: DISABLE
24229: LD_INT 0
24231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24232: LD_ADDR_VAR 0 1
24236: PUSH
24237: LD_INT 22
24239: PUSH
24240: LD_OWVAR 2
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 21
24251: PUSH
24252: LD_INT 1
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PPUSH
24263: CALL_OW 69
24267: ST_TO_ADDR
// if not tmp then
24268: LD_VAR 0 1
24272: NOT
24273: IFFALSE 24277
// exit ;
24275: GO 24322
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24277: LD_VAR 0 1
24281: PUSH
24282: LD_INT 1
24284: PPUSH
24285: LD_VAR 0 1
24289: PPUSH
24290: CALL_OW 12
24294: ARRAY
24295: PPUSH
24296: LD_INT 1
24298: PPUSH
24299: LD_INT 4
24301: PPUSH
24302: CALL_OW 12
24306: PPUSH
24307: LD_INT 3000
24309: PPUSH
24310: LD_INT 9000
24312: PPUSH
24313: CALL_OW 12
24317: PPUSH
24318: CALL_OW 492
// end ;
24322: PPOPN 1
24324: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24325: LD_EXP 38
24329: PUSH
24330: LD_EXP 53
24334: AND
24335: IFFALSE 24355
24337: GO 24339
24339: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24340: LD_INT 1
24342: PPUSH
24343: LD_OWVAR 2
24347: PPUSH
24348: LD_INT 0
24350: PPUSH
24351: CALL_OW 324
24355: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24356: LD_EXP 38
24360: PUSH
24361: LD_EXP 54
24365: AND
24366: IFFALSE 24449
24368: GO 24370
24370: DISABLE
24371: LD_INT 0
24373: PPUSH
24374: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24375: LD_ADDR_VAR 0 2
24379: PUSH
24380: LD_INT 22
24382: PUSH
24383: LD_OWVAR 2
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 21
24394: PUSH
24395: LD_INT 3
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PPUSH
24406: CALL_OW 69
24410: ST_TO_ADDR
// if not tmp then
24411: LD_VAR 0 2
24415: NOT
24416: IFFALSE 24420
// exit ;
24418: GO 24449
// for i in tmp do
24420: LD_ADDR_VAR 0 1
24424: PUSH
24425: LD_VAR 0 2
24429: PUSH
24430: FOR_IN
24431: IFFALSE 24447
// SetBLevel ( i , 10 ) ;
24433: LD_VAR 0 1
24437: PPUSH
24438: LD_INT 10
24440: PPUSH
24441: CALL_OW 241
24445: GO 24430
24447: POP
24448: POP
// end ;
24449: PPOPN 2
24451: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24452: LD_EXP 38
24456: PUSH
24457: LD_EXP 55
24461: AND
24462: IFFALSE 24573
24464: GO 24466
24466: DISABLE
24467: LD_INT 0
24469: PPUSH
24470: PPUSH
24471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24472: LD_ADDR_VAR 0 3
24476: PUSH
24477: LD_INT 22
24479: PUSH
24480: LD_OWVAR 2
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 25
24491: PUSH
24492: LD_INT 1
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PPUSH
24503: CALL_OW 69
24507: ST_TO_ADDR
// if not tmp then
24508: LD_VAR 0 3
24512: NOT
24513: IFFALSE 24517
// exit ;
24515: GO 24573
// un := tmp [ rand ( 1 , tmp ) ] ;
24517: LD_ADDR_VAR 0 2
24521: PUSH
24522: LD_VAR 0 3
24526: PUSH
24527: LD_INT 1
24529: PPUSH
24530: LD_VAR 0 3
24534: PPUSH
24535: CALL_OW 12
24539: ARRAY
24540: ST_TO_ADDR
// if Crawls ( un ) then
24541: LD_VAR 0 2
24545: PPUSH
24546: CALL_OW 318
24550: IFFALSE 24561
// ComWalk ( un ) ;
24552: LD_VAR 0 2
24556: PPUSH
24557: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24561: LD_VAR 0 2
24565: PPUSH
24566: LD_INT 5
24568: PPUSH
24569: CALL_OW 336
// end ;
24573: PPOPN 3
24575: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
24576: LD_EXP 38
24580: PUSH
24581: LD_EXP 56
24585: AND
24586: PUSH
24587: LD_OWVAR 67
24591: PUSH
24592: LD_INT 4
24594: LESS
24595: AND
24596: IFFALSE 24615
24598: GO 24600
24600: DISABLE
// begin Difficulty := Difficulty + 1 ;
24601: LD_ADDR_OWVAR 67
24605: PUSH
24606: LD_OWVAR 67
24610: PUSH
24611: LD_INT 1
24613: PLUS
24614: ST_TO_ADDR
// end ;
24615: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24616: LD_EXP 38
24620: PUSH
24621: LD_EXP 57
24625: AND
24626: IFFALSE 24729
24628: GO 24630
24630: DISABLE
24631: LD_INT 0
24633: PPUSH
// begin for i := 1 to 5 do
24634: LD_ADDR_VAR 0 1
24638: PUSH
24639: DOUBLE
24640: LD_INT 1
24642: DEC
24643: ST_TO_ADDR
24644: LD_INT 5
24646: PUSH
24647: FOR_TO
24648: IFFALSE 24727
// begin uc_nation := nation_nature ;
24650: LD_ADDR_OWVAR 21
24654: PUSH
24655: LD_INT 0
24657: ST_TO_ADDR
// uc_side := 0 ;
24658: LD_ADDR_OWVAR 20
24662: PUSH
24663: LD_INT 0
24665: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24666: LD_ADDR_OWVAR 29
24670: PUSH
24671: LD_INT 12
24673: PUSH
24674: LD_INT 12
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: ST_TO_ADDR
// hc_agressivity := 20 ;
24681: LD_ADDR_OWVAR 35
24685: PUSH
24686: LD_INT 20
24688: ST_TO_ADDR
// hc_class := class_tiger ;
24689: LD_ADDR_OWVAR 28
24693: PUSH
24694: LD_INT 14
24696: ST_TO_ADDR
// hc_gallery :=  ;
24697: LD_ADDR_OWVAR 33
24701: PUSH
24702: LD_STRING 
24704: ST_TO_ADDR
// hc_name :=  ;
24705: LD_ADDR_OWVAR 26
24709: PUSH
24710: LD_STRING 
24712: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24713: CALL_OW 44
24717: PPUSH
24718: LD_INT 0
24720: PPUSH
24721: CALL_OW 51
// end ;
24725: GO 24647
24727: POP
24728: POP
// end ;
24729: PPOPN 1
24731: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24732: LD_EXP 38
24736: PUSH
24737: LD_EXP 58
24741: AND
24742: IFFALSE 24751
24744: GO 24746
24746: DISABLE
// StreamSibBomb ;
24747: CALL 24752 0 0
24751: END
// export function StreamSibBomb ; var i , x , y ; begin
24752: LD_INT 0
24754: PPUSH
24755: PPUSH
24756: PPUSH
24757: PPUSH
// result := false ;
24758: LD_ADDR_VAR 0 1
24762: PUSH
24763: LD_INT 0
24765: ST_TO_ADDR
// for i := 1 to 16 do
24766: LD_ADDR_VAR 0 2
24770: PUSH
24771: DOUBLE
24772: LD_INT 1
24774: DEC
24775: ST_TO_ADDR
24776: LD_INT 16
24778: PUSH
24779: FOR_TO
24780: IFFALSE 24979
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24782: LD_ADDR_VAR 0 3
24786: PUSH
24787: LD_INT 10
24789: PUSH
24790: LD_INT 20
24792: PUSH
24793: LD_INT 30
24795: PUSH
24796: LD_INT 40
24798: PUSH
24799: LD_INT 50
24801: PUSH
24802: LD_INT 60
24804: PUSH
24805: LD_INT 70
24807: PUSH
24808: LD_INT 80
24810: PUSH
24811: LD_INT 90
24813: PUSH
24814: LD_INT 100
24816: PUSH
24817: LD_INT 110
24819: PUSH
24820: LD_INT 120
24822: PUSH
24823: LD_INT 130
24825: PUSH
24826: LD_INT 140
24828: PUSH
24829: LD_INT 150
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 1
24851: PPUSH
24852: LD_INT 15
24854: PPUSH
24855: CALL_OW 12
24859: ARRAY
24860: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24861: LD_ADDR_VAR 0 4
24865: PUSH
24866: LD_INT 10
24868: PUSH
24869: LD_INT 20
24871: PUSH
24872: LD_INT 30
24874: PUSH
24875: LD_INT 40
24877: PUSH
24878: LD_INT 50
24880: PUSH
24881: LD_INT 60
24883: PUSH
24884: LD_INT 70
24886: PUSH
24887: LD_INT 80
24889: PUSH
24890: LD_INT 90
24892: PUSH
24893: LD_INT 100
24895: PUSH
24896: LD_INT 110
24898: PUSH
24899: LD_INT 120
24901: PUSH
24902: LD_INT 130
24904: PUSH
24905: LD_INT 140
24907: PUSH
24908: LD_INT 150
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 1
24930: PPUSH
24931: LD_INT 15
24933: PPUSH
24934: CALL_OW 12
24938: ARRAY
24939: ST_TO_ADDR
// if ValidHex ( x , y ) then
24940: LD_VAR 0 3
24944: PPUSH
24945: LD_VAR 0 4
24949: PPUSH
24950: CALL_OW 488
24954: IFFALSE 24977
// begin result := [ x , y ] ;
24956: LD_ADDR_VAR 0 1
24960: PUSH
24961: LD_VAR 0 3
24965: PUSH
24966: LD_VAR 0 4
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: ST_TO_ADDR
// break ;
24975: GO 24979
// end ; end ;
24977: GO 24779
24979: POP
24980: POP
// if result then
24981: LD_VAR 0 1
24985: IFFALSE 25045
// begin ToLua ( playSibBomb() ) ;
24987: LD_STRING playSibBomb()
24989: PPUSH
24990: CALL_OW 559
// wait ( 0 0$14 ) ;
24994: LD_INT 490
24996: PPUSH
24997: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25001: LD_VAR 0 1
25005: PUSH
25006: LD_INT 1
25008: ARRAY
25009: PPUSH
25010: LD_VAR 0 1
25014: PUSH
25015: LD_INT 2
25017: ARRAY
25018: PPUSH
25019: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25023: LD_VAR 0 1
25027: PUSH
25028: LD_INT 1
25030: ARRAY
25031: PPUSH
25032: LD_VAR 0 1
25036: PUSH
25037: LD_INT 2
25039: ARRAY
25040: PPUSH
25041: CALL_OW 429
// end ; end ;
25045: LD_VAR 0 1
25049: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25050: LD_EXP 38
25054: PUSH
25055: LD_EXP 60
25059: AND
25060: IFFALSE 25072
25062: GO 25064
25064: DISABLE
// YouLost (  ) ;
25065: LD_STRING 
25067: PPUSH
25068: CALL_OW 104
25072: END
// every 0 0$1 trigger StreamModeActive and sFog do
25073: LD_EXP 38
25077: PUSH
25078: LD_EXP 59
25082: AND
25083: IFFALSE 25097
25085: GO 25087
25087: DISABLE
// FogOff ( your_side ) ;
25088: LD_OWVAR 2
25092: PPUSH
25093: CALL_OW 344
25097: END
// every 0 0$1 trigger StreamModeActive and sSun do
25098: LD_EXP 38
25102: PUSH
25103: LD_EXP 61
25107: AND
25108: IFFALSE 25136
25110: GO 25112
25112: DISABLE
// begin solar_recharge_percent := 0 ;
25113: LD_ADDR_OWVAR 79
25117: PUSH
25118: LD_INT 0
25120: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25121: LD_INT 10500
25123: PPUSH
25124: CALL_OW 67
// solar_recharge_percent := 100 ;
25128: LD_ADDR_OWVAR 79
25132: PUSH
25133: LD_INT 100
25135: ST_TO_ADDR
// end ;
25136: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25137: LD_EXP 38
25141: PUSH
25142: LD_EXP 62
25146: AND
25147: IFFALSE 25386
25149: GO 25151
25151: DISABLE
25152: LD_INT 0
25154: PPUSH
25155: PPUSH
25156: PPUSH
// begin tmp := [ ] ;
25157: LD_ADDR_VAR 0 3
25161: PUSH
25162: EMPTY
25163: ST_TO_ADDR
// for i := 1 to 6 do
25164: LD_ADDR_VAR 0 1
25168: PUSH
25169: DOUBLE
25170: LD_INT 1
25172: DEC
25173: ST_TO_ADDR
25174: LD_INT 6
25176: PUSH
25177: FOR_TO
25178: IFFALSE 25283
// begin uc_nation := nation_nature ;
25180: LD_ADDR_OWVAR 21
25184: PUSH
25185: LD_INT 0
25187: ST_TO_ADDR
// uc_side := 0 ;
25188: LD_ADDR_OWVAR 20
25192: PUSH
25193: LD_INT 0
25195: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25196: LD_ADDR_OWVAR 29
25200: PUSH
25201: LD_INT 12
25203: PUSH
25204: LD_INT 12
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: ST_TO_ADDR
// hc_agressivity := 20 ;
25211: LD_ADDR_OWVAR 35
25215: PUSH
25216: LD_INT 20
25218: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25219: LD_ADDR_OWVAR 28
25223: PUSH
25224: LD_INT 17
25226: ST_TO_ADDR
// hc_gallery :=  ;
25227: LD_ADDR_OWVAR 33
25231: PUSH
25232: LD_STRING 
25234: ST_TO_ADDR
// hc_name :=  ;
25235: LD_ADDR_OWVAR 26
25239: PUSH
25240: LD_STRING 
25242: ST_TO_ADDR
// un := CreateHuman ;
25243: LD_ADDR_VAR 0 2
25247: PUSH
25248: CALL_OW 44
25252: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25253: LD_VAR 0 2
25257: PPUSH
25258: LD_INT 1
25260: PPUSH
25261: CALL_OW 51
// tmp := tmp ^ un ;
25265: LD_ADDR_VAR 0 3
25269: PUSH
25270: LD_VAR 0 3
25274: PUSH
25275: LD_VAR 0 2
25279: ADD
25280: ST_TO_ADDR
// end ;
25281: GO 25177
25283: POP
25284: POP
// repeat wait ( 0 0$1 ) ;
25285: LD_INT 35
25287: PPUSH
25288: CALL_OW 67
// for un in tmp do
25292: LD_ADDR_VAR 0 2
25296: PUSH
25297: LD_VAR 0 3
25301: PUSH
25302: FOR_IN
25303: IFFALSE 25377
// begin if IsDead ( un ) then
25305: LD_VAR 0 2
25309: PPUSH
25310: CALL_OW 301
25314: IFFALSE 25334
// begin tmp := tmp diff un ;
25316: LD_ADDR_VAR 0 3
25320: PUSH
25321: LD_VAR 0 3
25325: PUSH
25326: LD_VAR 0 2
25330: DIFF
25331: ST_TO_ADDR
// continue ;
25332: GO 25302
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25334: LD_VAR 0 2
25338: PPUSH
25339: LD_INT 3
25341: PUSH
25342: LD_INT 22
25344: PUSH
25345: LD_INT 0
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PPUSH
25356: CALL_OW 69
25360: PPUSH
25361: LD_VAR 0 2
25365: PPUSH
25366: CALL_OW 74
25370: PPUSH
25371: CALL_OW 115
// end ;
25375: GO 25302
25377: POP
25378: POP
// until not tmp ;
25379: LD_VAR 0 3
25383: NOT
25384: IFFALSE 25285
// end ;
25386: PPOPN 3
25388: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25389: LD_EXP 38
25393: PUSH
25394: LD_EXP 63
25398: AND
25399: IFFALSE 25453
25401: GO 25403
25403: DISABLE
// begin ToLua ( displayTroll(); ) ;
25404: LD_STRING displayTroll();
25406: PPUSH
25407: CALL_OW 559
// wait ( 3 3$00 ) ;
25411: LD_INT 6300
25413: PPUSH
25414: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25418: LD_STRING hideTroll();
25420: PPUSH
25421: CALL_OW 559
// wait ( 1 1$00 ) ;
25425: LD_INT 2100
25427: PPUSH
25428: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25432: LD_STRING displayTroll();
25434: PPUSH
25435: CALL_OW 559
// wait ( 1 1$00 ) ;
25439: LD_INT 2100
25441: PPUSH
25442: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25446: LD_STRING hideTroll();
25448: PPUSH
25449: CALL_OW 559
// end ;
25453: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25454: LD_EXP 38
25458: PUSH
25459: LD_EXP 64
25463: AND
25464: IFFALSE 25527
25466: GO 25468
25468: DISABLE
25469: LD_INT 0
25471: PPUSH
// begin p := 0 ;
25472: LD_ADDR_VAR 0 1
25476: PUSH
25477: LD_INT 0
25479: ST_TO_ADDR
// repeat game_speed := 1 ;
25480: LD_ADDR_OWVAR 65
25484: PUSH
25485: LD_INT 1
25487: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25488: LD_INT 35
25490: PPUSH
25491: CALL_OW 67
// p := p + 1 ;
25495: LD_ADDR_VAR 0 1
25499: PUSH
25500: LD_VAR 0 1
25504: PUSH
25505: LD_INT 1
25507: PLUS
25508: ST_TO_ADDR
// until p >= 60 ;
25509: LD_VAR 0 1
25513: PUSH
25514: LD_INT 60
25516: GREATEREQUAL
25517: IFFALSE 25480
// game_speed := 4 ;
25519: LD_ADDR_OWVAR 65
25523: PUSH
25524: LD_INT 4
25526: ST_TO_ADDR
// end ;
25527: PPOPN 1
25529: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25530: LD_EXP 38
25534: PUSH
25535: LD_EXP 65
25539: AND
25540: IFFALSE 25686
25542: GO 25544
25544: DISABLE
25545: LD_INT 0
25547: PPUSH
25548: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25549: LD_ADDR_VAR 0 1
25553: PUSH
25554: LD_INT 22
25556: PUSH
25557: LD_OWVAR 2
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 2
25568: PUSH
25569: LD_INT 30
25571: PUSH
25572: LD_INT 0
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 30
25581: PUSH
25582: LD_INT 1
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: LIST
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PPUSH
25598: CALL_OW 69
25602: ST_TO_ADDR
// if not depot then
25603: LD_VAR 0 1
25607: NOT
25608: IFFALSE 25612
// exit ;
25610: GO 25686
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25612: LD_ADDR_VAR 0 2
25616: PUSH
25617: LD_VAR 0 1
25621: PUSH
25622: LD_INT 1
25624: PPUSH
25625: LD_VAR 0 1
25629: PPUSH
25630: CALL_OW 12
25634: ARRAY
25635: PPUSH
25636: CALL_OW 274
25640: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25641: LD_VAR 0 2
25645: PPUSH
25646: LD_INT 1
25648: PPUSH
25649: LD_INT 0
25651: PPUSH
25652: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25656: LD_VAR 0 2
25660: PPUSH
25661: LD_INT 2
25663: PPUSH
25664: LD_INT 0
25666: PPUSH
25667: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25671: LD_VAR 0 2
25675: PPUSH
25676: LD_INT 3
25678: PPUSH
25679: LD_INT 0
25681: PPUSH
25682: CALL_OW 277
// end ;
25686: PPOPN 2
25688: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25689: LD_EXP 38
25693: PUSH
25694: LD_EXP 66
25698: AND
25699: IFFALSE 25796
25701: GO 25703
25703: DISABLE
25704: LD_INT 0
25706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25707: LD_ADDR_VAR 0 1
25711: PUSH
25712: LD_INT 22
25714: PUSH
25715: LD_OWVAR 2
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: LD_INT 21
25726: PUSH
25727: LD_INT 1
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 3
25736: PUSH
25737: LD_INT 23
25739: PUSH
25740: LD_INT 0
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: LIST
25755: PPUSH
25756: CALL_OW 69
25760: ST_TO_ADDR
// if not tmp then
25761: LD_VAR 0 1
25765: NOT
25766: IFFALSE 25770
// exit ;
25768: GO 25796
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25770: LD_VAR 0 1
25774: PUSH
25775: LD_INT 1
25777: PPUSH
25778: LD_VAR 0 1
25782: PPUSH
25783: CALL_OW 12
25787: ARRAY
25788: PPUSH
25789: LD_INT 200
25791: PPUSH
25792: CALL_OW 234
// end ;
25796: PPOPN 1
25798: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25799: LD_EXP 38
25803: PUSH
25804: LD_EXP 67
25808: AND
25809: IFFALSE 25888
25811: GO 25813
25813: DISABLE
25814: LD_INT 0
25816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25817: LD_ADDR_VAR 0 1
25821: PUSH
25822: LD_INT 22
25824: PUSH
25825: LD_OWVAR 2
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 21
25836: PUSH
25837: LD_INT 2
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PPUSH
25848: CALL_OW 69
25852: ST_TO_ADDR
// if not tmp then
25853: LD_VAR 0 1
25857: NOT
25858: IFFALSE 25862
// exit ;
25860: GO 25888
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25862: LD_VAR 0 1
25866: PUSH
25867: LD_INT 1
25869: PPUSH
25870: LD_VAR 0 1
25874: PPUSH
25875: CALL_OW 12
25879: ARRAY
25880: PPUSH
25881: LD_INT 60
25883: PPUSH
25884: CALL_OW 234
// end ;
25888: PPOPN 1
25890: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25891: LD_EXP 38
25895: PUSH
25896: LD_EXP 68
25900: AND
25901: IFFALSE 26000
25903: GO 25905
25905: DISABLE
25906: LD_INT 0
25908: PPUSH
25909: PPUSH
// begin enable ;
25910: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25911: LD_ADDR_VAR 0 1
25915: PUSH
25916: LD_INT 22
25918: PUSH
25919: LD_OWVAR 2
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 61
25930: PUSH
25931: EMPTY
25932: LIST
25933: PUSH
25934: LD_INT 33
25936: PUSH
25937: LD_INT 2
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: LIST
25948: PPUSH
25949: CALL_OW 69
25953: ST_TO_ADDR
// if not tmp then
25954: LD_VAR 0 1
25958: NOT
25959: IFFALSE 25963
// exit ;
25961: GO 26000
// for i in tmp do
25963: LD_ADDR_VAR 0 2
25967: PUSH
25968: LD_VAR 0 1
25972: PUSH
25973: FOR_IN
25974: IFFALSE 25998
// if IsControledBy ( i ) then
25976: LD_VAR 0 2
25980: PPUSH
25981: CALL_OW 312
25985: IFFALSE 25996
// ComUnlink ( i ) ;
25987: LD_VAR 0 2
25991: PPUSH
25992: CALL_OW 136
25996: GO 25973
25998: POP
25999: POP
// end ;
26000: PPOPN 2
26002: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26003: LD_EXP 38
26007: PUSH
26008: LD_EXP 69
26012: AND
26013: IFFALSE 26153
26015: GO 26017
26017: DISABLE
26018: LD_INT 0
26020: PPUSH
26021: PPUSH
// begin ToLua ( displayPowell(); ) ;
26022: LD_STRING displayPowell();
26024: PPUSH
26025: CALL_OW 559
// uc_side := 0 ;
26029: LD_ADDR_OWVAR 20
26033: PUSH
26034: LD_INT 0
26036: ST_TO_ADDR
// uc_nation := 2 ;
26037: LD_ADDR_OWVAR 21
26041: PUSH
26042: LD_INT 2
26044: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26045: LD_ADDR_OWVAR 37
26049: PUSH
26050: LD_INT 14
26052: ST_TO_ADDR
// vc_engine := engine_siberite ;
26053: LD_ADDR_OWVAR 39
26057: PUSH
26058: LD_INT 3
26060: ST_TO_ADDR
// vc_control := control_apeman ;
26061: LD_ADDR_OWVAR 38
26065: PUSH
26066: LD_INT 5
26068: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26069: LD_ADDR_OWVAR 40
26073: PUSH
26074: LD_INT 29
26076: ST_TO_ADDR
// un := CreateVehicle ;
26077: LD_ADDR_VAR 0 2
26081: PUSH
26082: CALL_OW 45
26086: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26087: LD_VAR 0 2
26091: PPUSH
26092: LD_INT 1
26094: PPUSH
26095: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26099: LD_INT 35
26101: PPUSH
26102: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26106: LD_VAR 0 2
26110: PPUSH
26111: LD_INT 22
26113: PUSH
26114: LD_OWVAR 2
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PPUSH
26123: CALL_OW 69
26127: PPUSH
26128: LD_VAR 0 2
26132: PPUSH
26133: CALL_OW 74
26137: PPUSH
26138: CALL_OW 115
// until IsDead ( un ) ;
26142: LD_VAR 0 2
26146: PPUSH
26147: CALL_OW 301
26151: IFFALSE 26099
// end ;
26153: PPOPN 2
26155: END
// every 0 0$1 trigger StreamModeActive and sStu do
26156: LD_EXP 38
26160: PUSH
26161: LD_EXP 77
26165: AND
26166: IFFALSE 26182
26168: GO 26170
26170: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26171: LD_STRING displayStucuk();
26173: PPUSH
26174: CALL_OW 559
// ResetFog ;
26178: CALL_OW 335
// end ;
26182: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26183: LD_EXP 38
26187: PUSH
26188: LD_EXP 70
26192: AND
26193: IFFALSE 26334
26195: GO 26197
26197: DISABLE
26198: LD_INT 0
26200: PPUSH
26201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26202: LD_ADDR_VAR 0 2
26206: PUSH
26207: LD_INT 22
26209: PUSH
26210: LD_OWVAR 2
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 21
26221: PUSH
26222: LD_INT 1
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PPUSH
26233: CALL_OW 69
26237: ST_TO_ADDR
// if not tmp then
26238: LD_VAR 0 2
26242: NOT
26243: IFFALSE 26247
// exit ;
26245: GO 26334
// un := tmp [ rand ( 1 , tmp ) ] ;
26247: LD_ADDR_VAR 0 1
26251: PUSH
26252: LD_VAR 0 2
26256: PUSH
26257: LD_INT 1
26259: PPUSH
26260: LD_VAR 0 2
26264: PPUSH
26265: CALL_OW 12
26269: ARRAY
26270: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26271: LD_VAR 0 1
26275: PPUSH
26276: LD_INT 0
26278: PPUSH
26279: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26283: LD_VAR 0 1
26287: PPUSH
26288: LD_OWVAR 3
26292: PUSH
26293: LD_VAR 0 1
26297: DIFF
26298: PPUSH
26299: LD_VAR 0 1
26303: PPUSH
26304: CALL_OW 74
26308: PPUSH
26309: CALL_OW 115
// wait ( 0 0$20 ) ;
26313: LD_INT 700
26315: PPUSH
26316: CALL_OW 67
// SetSide ( un , your_side ) ;
26320: LD_VAR 0 1
26324: PPUSH
26325: LD_OWVAR 2
26329: PPUSH
26330: CALL_OW 235
// end ;
26334: PPOPN 2
26336: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26337: LD_EXP 38
26341: PUSH
26342: LD_EXP 71
26346: AND
26347: IFFALSE 26453
26349: GO 26351
26351: DISABLE
26352: LD_INT 0
26354: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26355: LD_ADDR_VAR 0 1
26359: PUSH
26360: LD_INT 22
26362: PUSH
26363: LD_OWVAR 2
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: LD_INT 2
26374: PUSH
26375: LD_INT 30
26377: PUSH
26378: LD_INT 0
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 30
26387: PUSH
26388: LD_INT 1
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: LIST
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PPUSH
26404: CALL_OW 69
26408: ST_TO_ADDR
// if not depot then
26409: LD_VAR 0 1
26413: NOT
26414: IFFALSE 26418
// exit ;
26416: GO 26453
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26418: LD_VAR 0 1
26422: PUSH
26423: LD_INT 1
26425: ARRAY
26426: PPUSH
26427: CALL_OW 250
26431: PPUSH
26432: LD_VAR 0 1
26436: PUSH
26437: LD_INT 1
26439: ARRAY
26440: PPUSH
26441: CALL_OW 251
26445: PPUSH
26446: LD_INT 70
26448: PPUSH
26449: CALL_OW 495
// end ;
26453: PPOPN 1
26455: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26456: LD_EXP 38
26460: PUSH
26461: LD_EXP 72
26465: AND
26466: IFFALSE 26677
26468: GO 26470
26470: DISABLE
26471: LD_INT 0
26473: PPUSH
26474: PPUSH
26475: PPUSH
26476: PPUSH
26477: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26478: LD_ADDR_VAR 0 5
26482: PUSH
26483: LD_INT 22
26485: PUSH
26486: LD_OWVAR 2
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 21
26497: PUSH
26498: LD_INT 1
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PPUSH
26509: CALL_OW 69
26513: ST_TO_ADDR
// if not tmp then
26514: LD_VAR 0 5
26518: NOT
26519: IFFALSE 26523
// exit ;
26521: GO 26677
// for i in tmp do
26523: LD_ADDR_VAR 0 1
26527: PUSH
26528: LD_VAR 0 5
26532: PUSH
26533: FOR_IN
26534: IFFALSE 26675
// begin d := rand ( 0 , 5 ) ;
26536: LD_ADDR_VAR 0 4
26540: PUSH
26541: LD_INT 0
26543: PPUSH
26544: LD_INT 5
26546: PPUSH
26547: CALL_OW 12
26551: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26552: LD_ADDR_VAR 0 2
26556: PUSH
26557: LD_VAR 0 1
26561: PPUSH
26562: CALL_OW 250
26566: PPUSH
26567: LD_VAR 0 4
26571: PPUSH
26572: LD_INT 3
26574: PPUSH
26575: LD_INT 12
26577: PPUSH
26578: CALL_OW 12
26582: PPUSH
26583: CALL_OW 272
26587: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26588: LD_ADDR_VAR 0 3
26592: PUSH
26593: LD_VAR 0 1
26597: PPUSH
26598: CALL_OW 251
26602: PPUSH
26603: LD_VAR 0 4
26607: PPUSH
26608: LD_INT 3
26610: PPUSH
26611: LD_INT 12
26613: PPUSH
26614: CALL_OW 12
26618: PPUSH
26619: CALL_OW 273
26623: ST_TO_ADDR
// if ValidHex ( x , y ) then
26624: LD_VAR 0 2
26628: PPUSH
26629: LD_VAR 0 3
26633: PPUSH
26634: CALL_OW 488
26638: IFFALSE 26673
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26640: LD_VAR 0 1
26644: PPUSH
26645: LD_VAR 0 2
26649: PPUSH
26650: LD_VAR 0 3
26654: PPUSH
26655: LD_INT 3
26657: PPUSH
26658: LD_INT 6
26660: PPUSH
26661: CALL_OW 12
26665: PPUSH
26666: LD_INT 1
26668: PPUSH
26669: CALL_OW 483
// end ;
26673: GO 26533
26675: POP
26676: POP
// end ;
26677: PPOPN 5
26679: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26680: LD_EXP 38
26684: PUSH
26685: LD_EXP 73
26689: AND
26690: IFFALSE 26784
26692: GO 26694
26694: DISABLE
26695: LD_INT 0
26697: PPUSH
26698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26699: LD_ADDR_VAR 0 2
26703: PUSH
26704: LD_INT 22
26706: PUSH
26707: LD_OWVAR 2
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 32
26718: PUSH
26719: LD_INT 1
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 21
26728: PUSH
26729: LD_INT 2
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: LIST
26740: PPUSH
26741: CALL_OW 69
26745: ST_TO_ADDR
// if not tmp then
26746: LD_VAR 0 2
26750: NOT
26751: IFFALSE 26755
// exit ;
26753: GO 26784
// for i in tmp do
26755: LD_ADDR_VAR 0 1
26759: PUSH
26760: LD_VAR 0 2
26764: PUSH
26765: FOR_IN
26766: IFFALSE 26782
// SetFuel ( i , 0 ) ;
26768: LD_VAR 0 1
26772: PPUSH
26773: LD_INT 0
26775: PPUSH
26776: CALL_OW 240
26780: GO 26765
26782: POP
26783: POP
// end ;
26784: PPOPN 2
26786: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26787: LD_EXP 38
26791: PUSH
26792: LD_EXP 74
26796: AND
26797: IFFALSE 26863
26799: GO 26801
26801: DISABLE
26802: LD_INT 0
26804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26805: LD_ADDR_VAR 0 1
26809: PUSH
26810: LD_INT 22
26812: PUSH
26813: LD_OWVAR 2
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 30
26824: PUSH
26825: LD_INT 29
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PPUSH
26836: CALL_OW 69
26840: ST_TO_ADDR
// if not tmp then
26841: LD_VAR 0 1
26845: NOT
26846: IFFALSE 26850
// exit ;
26848: GO 26863
// DestroyUnit ( tmp [ 1 ] ) ;
26850: LD_VAR 0 1
26854: PUSH
26855: LD_INT 1
26857: ARRAY
26858: PPUSH
26859: CALL_OW 65
// end ;
26863: PPOPN 1
26865: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26866: LD_EXP 38
26870: PUSH
26871: LD_EXP 76
26875: AND
26876: IFFALSE 27005
26878: GO 26880
26880: DISABLE
26881: LD_INT 0
26883: PPUSH
// begin uc_side := 0 ;
26884: LD_ADDR_OWVAR 20
26888: PUSH
26889: LD_INT 0
26891: ST_TO_ADDR
// uc_nation := nation_arabian ;
26892: LD_ADDR_OWVAR 21
26896: PUSH
26897: LD_INT 2
26899: ST_TO_ADDR
// hc_gallery :=  ;
26900: LD_ADDR_OWVAR 33
26904: PUSH
26905: LD_STRING 
26907: ST_TO_ADDR
// hc_name :=  ;
26908: LD_ADDR_OWVAR 26
26912: PUSH
26913: LD_STRING 
26915: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26916: LD_INT 1
26918: PPUSH
26919: LD_INT 11
26921: PPUSH
26922: LD_INT 10
26924: PPUSH
26925: CALL_OW 380
// un := CreateHuman ;
26929: LD_ADDR_VAR 0 1
26933: PUSH
26934: CALL_OW 44
26938: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26939: LD_VAR 0 1
26943: PPUSH
26944: LD_INT 1
26946: PPUSH
26947: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26951: LD_INT 35
26953: PPUSH
26954: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26958: LD_VAR 0 1
26962: PPUSH
26963: LD_INT 22
26965: PUSH
26966: LD_OWVAR 2
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PPUSH
26975: CALL_OW 69
26979: PPUSH
26980: LD_VAR 0 1
26984: PPUSH
26985: CALL_OW 74
26989: PPUSH
26990: CALL_OW 115
// until IsDead ( un ) ;
26994: LD_VAR 0 1
26998: PPUSH
26999: CALL_OW 301
27003: IFFALSE 26951
// end ;
27005: PPOPN 1
27007: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27008: LD_EXP 38
27012: PUSH
27013: LD_EXP 78
27017: AND
27018: IFFALSE 27030
27020: GO 27022
27022: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27023: LD_STRING earthquake(getX(game), 0, 32)
27025: PPUSH
27026: CALL_OW 559
27030: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27031: LD_EXP 38
27035: PUSH
27036: LD_EXP 79
27040: AND
27041: IFFALSE 27132
27043: GO 27045
27045: DISABLE
27046: LD_INT 0
27048: PPUSH
// begin enable ;
27049: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27050: LD_ADDR_VAR 0 1
27054: PUSH
27055: LD_INT 22
27057: PUSH
27058: LD_OWVAR 2
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 21
27069: PUSH
27070: LD_INT 2
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 33
27079: PUSH
27080: LD_INT 3
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: LIST
27091: PPUSH
27092: CALL_OW 69
27096: ST_TO_ADDR
// if not tmp then
27097: LD_VAR 0 1
27101: NOT
27102: IFFALSE 27106
// exit ;
27104: GO 27132
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27106: LD_VAR 0 1
27110: PUSH
27111: LD_INT 1
27113: PPUSH
27114: LD_VAR 0 1
27118: PPUSH
27119: CALL_OW 12
27123: ARRAY
27124: PPUSH
27125: LD_INT 1
27127: PPUSH
27128: CALL_OW 234
// end ;
27132: PPOPN 1
27134: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27135: LD_EXP 38
27139: PUSH
27140: LD_EXP 80
27144: AND
27145: IFFALSE 27286
27147: GO 27149
27149: DISABLE
27150: LD_INT 0
27152: PPUSH
27153: PPUSH
27154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27155: LD_ADDR_VAR 0 3
27159: PUSH
27160: LD_INT 22
27162: PUSH
27163: LD_OWVAR 2
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 25
27174: PUSH
27175: LD_INT 1
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PPUSH
27186: CALL_OW 69
27190: ST_TO_ADDR
// if not tmp then
27191: LD_VAR 0 3
27195: NOT
27196: IFFALSE 27200
// exit ;
27198: GO 27286
// un := tmp [ rand ( 1 , tmp ) ] ;
27200: LD_ADDR_VAR 0 2
27204: PUSH
27205: LD_VAR 0 3
27209: PUSH
27210: LD_INT 1
27212: PPUSH
27213: LD_VAR 0 3
27217: PPUSH
27218: CALL_OW 12
27222: ARRAY
27223: ST_TO_ADDR
// if Crawls ( un ) then
27224: LD_VAR 0 2
27228: PPUSH
27229: CALL_OW 318
27233: IFFALSE 27244
// ComWalk ( un ) ;
27235: LD_VAR 0 2
27239: PPUSH
27240: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27244: LD_VAR 0 2
27248: PPUSH
27249: LD_INT 9
27251: PPUSH
27252: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27256: LD_INT 28
27258: PPUSH
27259: LD_OWVAR 2
27263: PPUSH
27264: LD_INT 2
27266: PPUSH
27267: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27271: LD_INT 29
27273: PPUSH
27274: LD_OWVAR 2
27278: PPUSH
27279: LD_INT 2
27281: PPUSH
27282: CALL_OW 322
// end ;
27286: PPOPN 3
27288: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27289: LD_EXP 38
27293: PUSH
27294: LD_EXP 81
27298: AND
27299: IFFALSE 27410
27301: GO 27303
27303: DISABLE
27304: LD_INT 0
27306: PPUSH
27307: PPUSH
27308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27309: LD_ADDR_VAR 0 3
27313: PUSH
27314: LD_INT 22
27316: PUSH
27317: LD_OWVAR 2
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 25
27328: PUSH
27329: LD_INT 1
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PPUSH
27340: CALL_OW 69
27344: ST_TO_ADDR
// if not tmp then
27345: LD_VAR 0 3
27349: NOT
27350: IFFALSE 27354
// exit ;
27352: GO 27410
// un := tmp [ rand ( 1 , tmp ) ] ;
27354: LD_ADDR_VAR 0 2
27358: PUSH
27359: LD_VAR 0 3
27363: PUSH
27364: LD_INT 1
27366: PPUSH
27367: LD_VAR 0 3
27371: PPUSH
27372: CALL_OW 12
27376: ARRAY
27377: ST_TO_ADDR
// if Crawls ( un ) then
27378: LD_VAR 0 2
27382: PPUSH
27383: CALL_OW 318
27387: IFFALSE 27398
// ComWalk ( un ) ;
27389: LD_VAR 0 2
27393: PPUSH
27394: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27398: LD_VAR 0 2
27402: PPUSH
27403: LD_INT 8
27405: PPUSH
27406: CALL_OW 336
// end ;
27410: PPOPN 3
27412: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27413: LD_EXP 38
27417: PUSH
27418: LD_EXP 82
27422: AND
27423: IFFALSE 27567
27425: GO 27427
27427: DISABLE
27428: LD_INT 0
27430: PPUSH
27431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27432: LD_ADDR_VAR 0 2
27436: PUSH
27437: LD_INT 22
27439: PUSH
27440: LD_OWVAR 2
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 21
27451: PUSH
27452: LD_INT 2
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 2
27461: PUSH
27462: LD_INT 34
27464: PUSH
27465: LD_INT 12
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: PUSH
27472: LD_INT 34
27474: PUSH
27475: LD_INT 51
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: LD_INT 34
27484: PUSH
27485: LD_INT 32
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: LIST
27502: PPUSH
27503: CALL_OW 69
27507: ST_TO_ADDR
// if not tmp then
27508: LD_VAR 0 2
27512: NOT
27513: IFFALSE 27517
// exit ;
27515: GO 27567
// for i in tmp do
27517: LD_ADDR_VAR 0 1
27521: PUSH
27522: LD_VAR 0 2
27526: PUSH
27527: FOR_IN
27528: IFFALSE 27565
// if GetCargo ( i , mat_artifact ) = 0 then
27530: LD_VAR 0 1
27534: PPUSH
27535: LD_INT 4
27537: PPUSH
27538: CALL_OW 289
27542: PUSH
27543: LD_INT 0
27545: EQUAL
27546: IFFALSE 27563
// SetCargo ( i , mat_siberit , 100 ) ;
27548: LD_VAR 0 1
27552: PPUSH
27553: LD_INT 3
27555: PPUSH
27556: LD_INT 100
27558: PPUSH
27559: CALL_OW 290
27563: GO 27527
27565: POP
27566: POP
// end ;
27567: PPOPN 2
27569: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27570: LD_EXP 38
27574: PUSH
27575: LD_EXP 83
27579: AND
27580: IFFALSE 27763
27582: GO 27584
27584: DISABLE
27585: LD_INT 0
27587: PPUSH
27588: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27589: LD_ADDR_VAR 0 2
27593: PUSH
27594: LD_INT 22
27596: PUSH
27597: LD_OWVAR 2
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PPUSH
27606: CALL_OW 69
27610: ST_TO_ADDR
// if not tmp then
27611: LD_VAR 0 2
27615: NOT
27616: IFFALSE 27620
// exit ;
27618: GO 27763
// for i := 1 to 2 do
27620: LD_ADDR_VAR 0 1
27624: PUSH
27625: DOUBLE
27626: LD_INT 1
27628: DEC
27629: ST_TO_ADDR
27630: LD_INT 2
27632: PUSH
27633: FOR_TO
27634: IFFALSE 27761
// begin uc_side := your_side ;
27636: LD_ADDR_OWVAR 20
27640: PUSH
27641: LD_OWVAR 2
27645: ST_TO_ADDR
// uc_nation := nation_american ;
27646: LD_ADDR_OWVAR 21
27650: PUSH
27651: LD_INT 1
27653: ST_TO_ADDR
// vc_chassis := us_morphling ;
27654: LD_ADDR_OWVAR 37
27658: PUSH
27659: LD_INT 5
27661: ST_TO_ADDR
// vc_engine := engine_siberite ;
27662: LD_ADDR_OWVAR 39
27666: PUSH
27667: LD_INT 3
27669: ST_TO_ADDR
// vc_control := control_computer ;
27670: LD_ADDR_OWVAR 38
27674: PUSH
27675: LD_INT 3
27677: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27678: LD_ADDR_OWVAR 40
27682: PUSH
27683: LD_INT 10
27685: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27686: LD_VAR 0 2
27690: PUSH
27691: LD_INT 1
27693: ARRAY
27694: PPUSH
27695: CALL_OW 310
27699: NOT
27700: IFFALSE 27747
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27702: CALL_OW 45
27706: PPUSH
27707: LD_VAR 0 2
27711: PUSH
27712: LD_INT 1
27714: ARRAY
27715: PPUSH
27716: CALL_OW 250
27720: PPUSH
27721: LD_VAR 0 2
27725: PUSH
27726: LD_INT 1
27728: ARRAY
27729: PPUSH
27730: CALL_OW 251
27734: PPUSH
27735: LD_INT 12
27737: PPUSH
27738: LD_INT 1
27740: PPUSH
27741: CALL_OW 50
27745: GO 27759
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27747: CALL_OW 45
27751: PPUSH
27752: LD_INT 1
27754: PPUSH
27755: CALL_OW 51
// end ;
27759: GO 27633
27761: POP
27762: POP
// end ;
27763: PPOPN 2
27765: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27766: LD_EXP 38
27770: PUSH
27771: LD_EXP 84
27775: AND
27776: IFFALSE 27998
27778: GO 27780
27780: DISABLE
27781: LD_INT 0
27783: PPUSH
27784: PPUSH
27785: PPUSH
27786: PPUSH
27787: PPUSH
27788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27789: LD_ADDR_VAR 0 6
27793: PUSH
27794: LD_INT 22
27796: PUSH
27797: LD_OWVAR 2
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 21
27808: PUSH
27809: LD_INT 1
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 3
27818: PUSH
27819: LD_INT 23
27821: PUSH
27822: LD_INT 0
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: LIST
27837: PPUSH
27838: CALL_OW 69
27842: ST_TO_ADDR
// if not tmp then
27843: LD_VAR 0 6
27847: NOT
27848: IFFALSE 27852
// exit ;
27850: GO 27998
// s1 := rand ( 1 , 4 ) ;
27852: LD_ADDR_VAR 0 2
27856: PUSH
27857: LD_INT 1
27859: PPUSH
27860: LD_INT 4
27862: PPUSH
27863: CALL_OW 12
27867: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27868: LD_ADDR_VAR 0 4
27872: PUSH
27873: LD_VAR 0 6
27877: PUSH
27878: LD_INT 1
27880: ARRAY
27881: PPUSH
27882: LD_VAR 0 2
27886: PPUSH
27887: CALL_OW 259
27891: ST_TO_ADDR
// if s1 = 1 then
27892: LD_VAR 0 2
27896: PUSH
27897: LD_INT 1
27899: EQUAL
27900: IFFALSE 27920
// s2 := rand ( 2 , 4 ) else
27902: LD_ADDR_VAR 0 3
27906: PUSH
27907: LD_INT 2
27909: PPUSH
27910: LD_INT 4
27912: PPUSH
27913: CALL_OW 12
27917: ST_TO_ADDR
27918: GO 27928
// s2 := 1 ;
27920: LD_ADDR_VAR 0 3
27924: PUSH
27925: LD_INT 1
27927: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27928: LD_ADDR_VAR 0 5
27932: PUSH
27933: LD_VAR 0 6
27937: PUSH
27938: LD_INT 1
27940: ARRAY
27941: PPUSH
27942: LD_VAR 0 3
27946: PPUSH
27947: CALL_OW 259
27951: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27952: LD_VAR 0 6
27956: PUSH
27957: LD_INT 1
27959: ARRAY
27960: PPUSH
27961: LD_VAR 0 2
27965: PPUSH
27966: LD_VAR 0 5
27970: PPUSH
27971: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27975: LD_VAR 0 6
27979: PUSH
27980: LD_INT 1
27982: ARRAY
27983: PPUSH
27984: LD_VAR 0 3
27988: PPUSH
27989: LD_VAR 0 4
27993: PPUSH
27994: CALL_OW 237
// end ;
27998: PPOPN 6
28000: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28001: LD_EXP 38
28005: PUSH
28006: LD_EXP 85
28010: AND
28011: IFFALSE 28090
28013: GO 28015
28015: DISABLE
28016: LD_INT 0
28018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28019: LD_ADDR_VAR 0 1
28023: PUSH
28024: LD_INT 22
28026: PUSH
28027: LD_OWVAR 2
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 30
28038: PUSH
28039: LD_INT 3
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PPUSH
28050: CALL_OW 69
28054: ST_TO_ADDR
// if not tmp then
28055: LD_VAR 0 1
28059: NOT
28060: IFFALSE 28064
// exit ;
28062: GO 28090
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28064: LD_VAR 0 1
28068: PUSH
28069: LD_INT 1
28071: PPUSH
28072: LD_VAR 0 1
28076: PPUSH
28077: CALL_OW 12
28081: ARRAY
28082: PPUSH
28083: LD_INT 1
28085: PPUSH
28086: CALL_OW 234
// end ;
28090: PPOPN 1
28092: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28093: LD_EXP 38
28097: PUSH
28098: LD_EXP 86
28102: AND
28103: IFFALSE 28215
28105: GO 28107
28107: DISABLE
28108: LD_INT 0
28110: PPUSH
28111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28112: LD_ADDR_VAR 0 2
28116: PUSH
28117: LD_INT 22
28119: PUSH
28120: LD_OWVAR 2
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 2
28131: PUSH
28132: LD_INT 30
28134: PUSH
28135: LD_INT 27
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 30
28144: PUSH
28145: LD_INT 26
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 30
28154: PUSH
28155: LD_INT 28
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PPUSH
28172: CALL_OW 69
28176: ST_TO_ADDR
// if not tmp then
28177: LD_VAR 0 2
28181: NOT
28182: IFFALSE 28186
// exit ;
28184: GO 28215
// for i in tmp do
28186: LD_ADDR_VAR 0 1
28190: PUSH
28191: LD_VAR 0 2
28195: PUSH
28196: FOR_IN
28197: IFFALSE 28213
// SetLives ( i , 1 ) ;
28199: LD_VAR 0 1
28203: PPUSH
28204: LD_INT 1
28206: PPUSH
28207: CALL_OW 234
28211: GO 28196
28213: POP
28214: POP
// end ;
28215: PPOPN 2
28217: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28218: LD_EXP 38
28222: PUSH
28223: LD_EXP 87
28227: AND
28228: IFFALSE 28515
28230: GO 28232
28232: DISABLE
28233: LD_INT 0
28235: PPUSH
28236: PPUSH
28237: PPUSH
// begin i := rand ( 1 , 7 ) ;
28238: LD_ADDR_VAR 0 1
28242: PUSH
28243: LD_INT 1
28245: PPUSH
28246: LD_INT 7
28248: PPUSH
28249: CALL_OW 12
28253: ST_TO_ADDR
// case i of 1 :
28254: LD_VAR 0 1
28258: PUSH
28259: LD_INT 1
28261: DOUBLE
28262: EQUAL
28263: IFTRUE 28267
28265: GO 28277
28267: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28268: LD_STRING earthquake(getX(game), 0, 32)
28270: PPUSH
28271: CALL_OW 559
28275: GO 28515
28277: LD_INT 2
28279: DOUBLE
28280: EQUAL
28281: IFTRUE 28285
28283: GO 28299
28285: POP
// begin ToLua ( displayStucuk(); ) ;
28286: LD_STRING displayStucuk();
28288: PPUSH
28289: CALL_OW 559
// ResetFog ;
28293: CALL_OW 335
// end ; 3 :
28297: GO 28515
28299: LD_INT 3
28301: DOUBLE
28302: EQUAL
28303: IFTRUE 28307
28305: GO 28411
28307: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28308: LD_ADDR_VAR 0 2
28312: PUSH
28313: LD_INT 22
28315: PUSH
28316: LD_OWVAR 2
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 25
28327: PUSH
28328: LD_INT 1
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PPUSH
28339: CALL_OW 69
28343: ST_TO_ADDR
// if not tmp then
28344: LD_VAR 0 2
28348: NOT
28349: IFFALSE 28353
// exit ;
28351: GO 28515
// un := tmp [ rand ( 1 , tmp ) ] ;
28353: LD_ADDR_VAR 0 3
28357: PUSH
28358: LD_VAR 0 2
28362: PUSH
28363: LD_INT 1
28365: PPUSH
28366: LD_VAR 0 2
28370: PPUSH
28371: CALL_OW 12
28375: ARRAY
28376: ST_TO_ADDR
// if Crawls ( un ) then
28377: LD_VAR 0 3
28381: PPUSH
28382: CALL_OW 318
28386: IFFALSE 28397
// ComWalk ( un ) ;
28388: LD_VAR 0 3
28392: PPUSH
28393: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28397: LD_VAR 0 3
28401: PPUSH
28402: LD_INT 8
28404: PPUSH
28405: CALL_OW 336
// end ; 4 :
28409: GO 28515
28411: LD_INT 4
28413: DOUBLE
28414: EQUAL
28415: IFTRUE 28419
28417: GO 28493
28419: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28420: LD_ADDR_VAR 0 2
28424: PUSH
28425: LD_INT 22
28427: PUSH
28428: LD_OWVAR 2
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 30
28439: PUSH
28440: LD_INT 29
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PPUSH
28451: CALL_OW 69
28455: ST_TO_ADDR
// if not tmp then
28456: LD_VAR 0 2
28460: NOT
28461: IFFALSE 28465
// exit ;
28463: GO 28515
// CenterNowOnUnits ( tmp [ 1 ] ) ;
28465: LD_VAR 0 2
28469: PUSH
28470: LD_INT 1
28472: ARRAY
28473: PPUSH
28474: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
28478: LD_VAR 0 2
28482: PUSH
28483: LD_INT 1
28485: ARRAY
28486: PPUSH
28487: CALL_OW 65
// end ; 5 .. 7 :
28491: GO 28515
28493: LD_INT 5
28495: DOUBLE
28496: GREATEREQUAL
28497: IFFALSE 28505
28499: LD_INT 7
28501: DOUBLE
28502: LESSEQUAL
28503: IFTRUE 28507
28505: GO 28514
28507: POP
// StreamSibBomb ; end ;
28508: CALL 24752 0 0
28512: GO 28515
28514: POP
// end ;
28515: PPOPN 3
28517: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28518: LD_EXP 38
28522: PUSH
28523: LD_EXP 88
28527: AND
28528: IFFALSE 28684
28530: GO 28532
28532: DISABLE
28533: LD_INT 0
28535: PPUSH
28536: PPUSH
28537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28538: LD_ADDR_VAR 0 2
28542: PUSH
28543: LD_INT 81
28545: PUSH
28546: LD_OWVAR 2
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: LD_INT 2
28557: PUSH
28558: LD_INT 21
28560: PUSH
28561: LD_INT 1
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: LD_INT 21
28570: PUSH
28571: LD_INT 2
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: LIST
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PPUSH
28587: CALL_OW 69
28591: ST_TO_ADDR
// if not tmp then
28592: LD_VAR 0 2
28596: NOT
28597: IFFALSE 28601
// exit ;
28599: GO 28684
// p := 0 ;
28601: LD_ADDR_VAR 0 3
28605: PUSH
28606: LD_INT 0
28608: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28609: LD_INT 35
28611: PPUSH
28612: CALL_OW 67
// p := p + 1 ;
28616: LD_ADDR_VAR 0 3
28620: PUSH
28621: LD_VAR 0 3
28625: PUSH
28626: LD_INT 1
28628: PLUS
28629: ST_TO_ADDR
// for i in tmp do
28630: LD_ADDR_VAR 0 1
28634: PUSH
28635: LD_VAR 0 2
28639: PUSH
28640: FOR_IN
28641: IFFALSE 28672
// if GetLives ( i ) < 1000 then
28643: LD_VAR 0 1
28647: PPUSH
28648: CALL_OW 256
28652: PUSH
28653: LD_INT 1000
28655: LESS
28656: IFFALSE 28670
// SetLives ( i , 1000 ) ;
28658: LD_VAR 0 1
28662: PPUSH
28663: LD_INT 1000
28665: PPUSH
28666: CALL_OW 234
28670: GO 28640
28672: POP
28673: POP
// until p > 20 ;
28674: LD_VAR 0 3
28678: PUSH
28679: LD_INT 20
28681: GREATER
28682: IFFALSE 28609
// end ;
28684: PPOPN 3
28686: END
// every 0 0$1 trigger StreamModeActive and sTime do
28687: LD_EXP 38
28691: PUSH
28692: LD_EXP 89
28696: AND
28697: IFFALSE 28732
28699: GO 28701
28701: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28702: LD_INT 28
28704: PPUSH
28705: LD_OWVAR 2
28709: PPUSH
28710: LD_INT 2
28712: PPUSH
28713: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28717: LD_INT 30
28719: PPUSH
28720: LD_OWVAR 2
28724: PPUSH
28725: LD_INT 2
28727: PPUSH
28728: CALL_OW 322
// end ;
28732: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28733: LD_EXP 38
28737: PUSH
28738: LD_EXP 90
28742: AND
28743: IFFALSE 28864
28745: GO 28747
28747: DISABLE
28748: LD_INT 0
28750: PPUSH
28751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28752: LD_ADDR_VAR 0 2
28756: PUSH
28757: LD_INT 22
28759: PUSH
28760: LD_OWVAR 2
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 21
28771: PUSH
28772: LD_INT 1
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 3
28781: PUSH
28782: LD_INT 23
28784: PUSH
28785: LD_INT 0
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: LIST
28800: PPUSH
28801: CALL_OW 69
28805: ST_TO_ADDR
// if not tmp then
28806: LD_VAR 0 2
28810: NOT
28811: IFFALSE 28815
// exit ;
28813: GO 28864
// for i in tmp do
28815: LD_ADDR_VAR 0 1
28819: PUSH
28820: LD_VAR 0 2
28824: PUSH
28825: FOR_IN
28826: IFFALSE 28862
// begin if Crawls ( i ) then
28828: LD_VAR 0 1
28832: PPUSH
28833: CALL_OW 318
28837: IFFALSE 28848
// ComWalk ( i ) ;
28839: LD_VAR 0 1
28843: PPUSH
28844: CALL_OW 138
// SetClass ( i , 2 ) ;
28848: LD_VAR 0 1
28852: PPUSH
28853: LD_INT 2
28855: PPUSH
28856: CALL_OW 336
// end ;
28860: GO 28825
28862: POP
28863: POP
// end ;
28864: PPOPN 2
28866: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28867: LD_EXP 38
28871: PUSH
28872: LD_EXP 91
28876: AND
28877: IFFALSE 29165
28879: GO 28881
28881: DISABLE
28882: LD_INT 0
28884: PPUSH
28885: PPUSH
28886: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28887: LD_OWVAR 2
28891: PPUSH
28892: LD_INT 9
28894: PPUSH
28895: LD_INT 1
28897: PPUSH
28898: LD_INT 1
28900: PPUSH
28901: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28905: LD_INT 9
28907: PPUSH
28908: LD_OWVAR 2
28912: PPUSH
28913: CALL_OW 343
// uc_side := 9 ;
28917: LD_ADDR_OWVAR 20
28921: PUSH
28922: LD_INT 9
28924: ST_TO_ADDR
// uc_nation := 2 ;
28925: LD_ADDR_OWVAR 21
28929: PUSH
28930: LD_INT 2
28932: ST_TO_ADDR
// hc_name := Dark Warrior ;
28933: LD_ADDR_OWVAR 26
28937: PUSH
28938: LD_STRING Dark Warrior
28940: ST_TO_ADDR
// hc_gallery :=  ;
28941: LD_ADDR_OWVAR 33
28945: PUSH
28946: LD_STRING 
28948: ST_TO_ADDR
// hc_noskilllimit := true ;
28949: LD_ADDR_OWVAR 76
28953: PUSH
28954: LD_INT 1
28956: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28957: LD_ADDR_OWVAR 31
28961: PUSH
28962: LD_INT 30
28964: PUSH
28965: LD_INT 30
28967: PUSH
28968: LD_INT 30
28970: PUSH
28971: LD_INT 30
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: ST_TO_ADDR
// un := CreateHuman ;
28980: LD_ADDR_VAR 0 3
28984: PUSH
28985: CALL_OW 44
28989: ST_TO_ADDR
// hc_noskilllimit := false ;
28990: LD_ADDR_OWVAR 76
28994: PUSH
28995: LD_INT 0
28997: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28998: LD_VAR 0 3
29002: PPUSH
29003: LD_INT 1
29005: PPUSH
29006: CALL_OW 51
// ToLua ( playRanger() ) ;
29010: LD_STRING playRanger()
29012: PPUSH
29013: CALL_OW 559
// p := 0 ;
29017: LD_ADDR_VAR 0 2
29021: PUSH
29022: LD_INT 0
29024: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29025: LD_INT 35
29027: PPUSH
29028: CALL_OW 67
// p := p + 1 ;
29032: LD_ADDR_VAR 0 2
29036: PUSH
29037: LD_VAR 0 2
29041: PUSH
29042: LD_INT 1
29044: PLUS
29045: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29046: LD_VAR 0 3
29050: PPUSH
29051: CALL_OW 256
29055: PUSH
29056: LD_INT 1000
29058: LESS
29059: IFFALSE 29073
// SetLives ( un , 1000 ) ;
29061: LD_VAR 0 3
29065: PPUSH
29066: LD_INT 1000
29068: PPUSH
29069: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29073: LD_VAR 0 3
29077: PPUSH
29078: LD_INT 81
29080: PUSH
29081: LD_OWVAR 2
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 91
29092: PUSH
29093: LD_VAR 0 3
29097: PUSH
29098: LD_INT 30
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: LIST
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PPUSH
29110: CALL_OW 69
29114: PPUSH
29115: LD_VAR 0 3
29119: PPUSH
29120: CALL_OW 74
29124: PPUSH
29125: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29129: LD_VAR 0 2
29133: PUSH
29134: LD_INT 80
29136: GREATER
29137: PUSH
29138: LD_VAR 0 3
29142: PPUSH
29143: CALL_OW 301
29147: OR
29148: IFFALSE 29025
// if un then
29150: LD_VAR 0 3
29154: IFFALSE 29165
// RemoveUnit ( un ) ;
29156: LD_VAR 0 3
29160: PPUSH
29161: CALL_OW 64
// end ;
29165: PPOPN 3
29167: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
29168: LD_EXP 92
29172: IFFALSE 29288
29174: GO 29176
29176: DISABLE
29177: LD_INT 0
29179: PPUSH
29180: PPUSH
29181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29182: LD_ADDR_VAR 0 2
29186: PUSH
29187: LD_INT 81
29189: PUSH
29190: LD_OWVAR 2
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 21
29201: PUSH
29202: LD_INT 1
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PPUSH
29213: CALL_OW 69
29217: ST_TO_ADDR
// ToLua ( playComputer() ) ;
29218: LD_STRING playComputer()
29220: PPUSH
29221: CALL_OW 559
// if not tmp then
29225: LD_VAR 0 2
29229: NOT
29230: IFFALSE 29234
// exit ;
29232: GO 29288
// for i in tmp do
29234: LD_ADDR_VAR 0 1
29238: PUSH
29239: LD_VAR 0 2
29243: PUSH
29244: FOR_IN
29245: IFFALSE 29286
// for j := 1 to 4 do
29247: LD_ADDR_VAR 0 3
29251: PUSH
29252: DOUBLE
29253: LD_INT 1
29255: DEC
29256: ST_TO_ADDR
29257: LD_INT 4
29259: PUSH
29260: FOR_TO
29261: IFFALSE 29282
// SetSkill ( i , j , 10 ) ;
29263: LD_VAR 0 1
29267: PPUSH
29268: LD_VAR 0 3
29272: PPUSH
29273: LD_INT 10
29275: PPUSH
29276: CALL_OW 237
29280: GO 29260
29282: POP
29283: POP
29284: GO 29244
29286: POP
29287: POP
// end ;
29288: PPOPN 3
29290: END
// every 0 0$1 trigger s30 do var i , tmp ;
29291: LD_EXP 93
29295: IFFALSE 29364
29297: GO 29299
29299: DISABLE
29300: LD_INT 0
29302: PPUSH
29303: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29304: LD_ADDR_VAR 0 2
29308: PUSH
29309: LD_INT 22
29311: PUSH
29312: LD_OWVAR 2
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PPUSH
29321: CALL_OW 69
29325: ST_TO_ADDR
// if not tmp then
29326: LD_VAR 0 2
29330: NOT
29331: IFFALSE 29335
// exit ;
29333: GO 29364
// for i in tmp do
29335: LD_ADDR_VAR 0 1
29339: PUSH
29340: LD_VAR 0 2
29344: PUSH
29345: FOR_IN
29346: IFFALSE 29362
// SetLives ( i , 300 ) ;
29348: LD_VAR 0 1
29352: PPUSH
29353: LD_INT 300
29355: PPUSH
29356: CALL_OW 234
29360: GO 29345
29362: POP
29363: POP
// end ;
29364: PPOPN 2
29366: END
// every 0 0$1 trigger s60 do var i , tmp ;
29367: LD_EXP 94
29371: IFFALSE 29440
29373: GO 29375
29375: DISABLE
29376: LD_INT 0
29378: PPUSH
29379: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29380: LD_ADDR_VAR 0 2
29384: PUSH
29385: LD_INT 22
29387: PUSH
29388: LD_OWVAR 2
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PPUSH
29397: CALL_OW 69
29401: ST_TO_ADDR
// if not tmp then
29402: LD_VAR 0 2
29406: NOT
29407: IFFALSE 29411
// exit ;
29409: GO 29440
// for i in tmp do
29411: LD_ADDR_VAR 0 1
29415: PUSH
29416: LD_VAR 0 2
29420: PUSH
29421: FOR_IN
29422: IFFALSE 29438
// SetLives ( i , 600 ) ;
29424: LD_VAR 0 1
29428: PPUSH
29429: LD_INT 600
29431: PPUSH
29432: CALL_OW 234
29436: GO 29421
29438: POP
29439: POP
// end ;
29440: PPOPN 2
29442: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29443: LD_INT 0
29445: PPUSH
// case cmd of 301 :
29446: LD_VAR 0 1
29450: PUSH
29451: LD_INT 301
29453: DOUBLE
29454: EQUAL
29455: IFTRUE 29459
29457: GO 29491
29459: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29460: LD_VAR 0 6
29464: PPUSH
29465: LD_VAR 0 7
29469: PPUSH
29470: LD_VAR 0 8
29474: PPUSH
29475: LD_VAR 0 4
29479: PPUSH
29480: LD_VAR 0 5
29484: PPUSH
29485: CALL 30700 0 5
29489: GO 29612
29491: LD_INT 302
29493: DOUBLE
29494: EQUAL
29495: IFTRUE 29499
29497: GO 29536
29499: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29500: LD_VAR 0 6
29504: PPUSH
29505: LD_VAR 0 7
29509: PPUSH
29510: LD_VAR 0 8
29514: PPUSH
29515: LD_VAR 0 9
29519: PPUSH
29520: LD_VAR 0 4
29524: PPUSH
29525: LD_VAR 0 5
29529: PPUSH
29530: CALL 30791 0 6
29534: GO 29612
29536: LD_INT 303
29538: DOUBLE
29539: EQUAL
29540: IFTRUE 29544
29542: GO 29581
29544: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29545: LD_VAR 0 6
29549: PPUSH
29550: LD_VAR 0 7
29554: PPUSH
29555: LD_VAR 0 8
29559: PPUSH
29560: LD_VAR 0 9
29564: PPUSH
29565: LD_VAR 0 4
29569: PPUSH
29570: LD_VAR 0 5
29574: PPUSH
29575: CALL 29617 0 6
29579: GO 29612
29581: LD_INT 304
29583: DOUBLE
29584: EQUAL
29585: IFTRUE 29589
29587: GO 29611
29589: POP
// hHackTeleport ( unit , x , y ) ; end ;
29590: LD_VAR 0 2
29594: PPUSH
29595: LD_VAR 0 4
29599: PPUSH
29600: LD_VAR 0 5
29604: PPUSH
29605: CALL 31384 0 3
29609: GO 29612
29611: POP
// end ;
29612: LD_VAR 0 12
29616: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29617: LD_INT 0
29619: PPUSH
29620: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29621: LD_VAR 0 1
29625: PUSH
29626: LD_INT 1
29628: LESS
29629: PUSH
29630: LD_VAR 0 1
29634: PUSH
29635: LD_INT 3
29637: GREATER
29638: OR
29639: PUSH
29640: LD_VAR 0 5
29644: PPUSH
29645: LD_VAR 0 6
29649: PPUSH
29650: CALL_OW 428
29654: OR
29655: IFFALSE 29659
// exit ;
29657: GO 30387
// uc_side := your_side ;
29659: LD_ADDR_OWVAR 20
29663: PUSH
29664: LD_OWVAR 2
29668: ST_TO_ADDR
// uc_nation := nation ;
29669: LD_ADDR_OWVAR 21
29673: PUSH
29674: LD_VAR 0 1
29678: ST_TO_ADDR
// bc_level = 1 ;
29679: LD_ADDR_OWVAR 43
29683: PUSH
29684: LD_INT 1
29686: ST_TO_ADDR
// case btype of 1 :
29687: LD_VAR 0 2
29691: PUSH
29692: LD_INT 1
29694: DOUBLE
29695: EQUAL
29696: IFTRUE 29700
29698: GO 29711
29700: POP
// bc_type := b_depot ; 2 :
29701: LD_ADDR_OWVAR 42
29705: PUSH
29706: LD_INT 0
29708: ST_TO_ADDR
29709: GO 30331
29711: LD_INT 2
29713: DOUBLE
29714: EQUAL
29715: IFTRUE 29719
29717: GO 29730
29719: POP
// bc_type := b_warehouse ; 3 :
29720: LD_ADDR_OWVAR 42
29724: PUSH
29725: LD_INT 1
29727: ST_TO_ADDR
29728: GO 30331
29730: LD_INT 3
29732: DOUBLE
29733: EQUAL
29734: IFTRUE 29738
29736: GO 29749
29738: POP
// bc_type := b_lab ; 4 .. 9 :
29739: LD_ADDR_OWVAR 42
29743: PUSH
29744: LD_INT 6
29746: ST_TO_ADDR
29747: GO 30331
29749: LD_INT 4
29751: DOUBLE
29752: GREATEREQUAL
29753: IFFALSE 29761
29755: LD_INT 9
29757: DOUBLE
29758: LESSEQUAL
29759: IFTRUE 29763
29761: GO 29823
29763: POP
// begin bc_type := b_lab_half ;
29764: LD_ADDR_OWVAR 42
29768: PUSH
29769: LD_INT 7
29771: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29772: LD_ADDR_OWVAR 44
29776: PUSH
29777: LD_INT 10
29779: PUSH
29780: LD_INT 11
29782: PUSH
29783: LD_INT 12
29785: PUSH
29786: LD_INT 15
29788: PUSH
29789: LD_INT 14
29791: PUSH
29792: LD_INT 13
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: PUSH
29803: LD_VAR 0 2
29807: PUSH
29808: LD_INT 3
29810: MINUS
29811: ARRAY
29812: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
29813: LD_ADDR_OWVAR 45
29817: PUSH
29818: LD_INT 9
29820: ST_TO_ADDR
// end ; 10 .. 13 :
29821: GO 30331
29823: LD_INT 10
29825: DOUBLE
29826: GREATEREQUAL
29827: IFFALSE 29835
29829: LD_INT 13
29831: DOUBLE
29832: LESSEQUAL
29833: IFTRUE 29837
29835: GO 29914
29837: POP
// begin bc_type := b_lab_full ;
29838: LD_ADDR_OWVAR 42
29842: PUSH
29843: LD_INT 8
29845: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29846: LD_ADDR_OWVAR 44
29850: PUSH
29851: LD_INT 10
29853: PUSH
29854: LD_INT 12
29856: PUSH
29857: LD_INT 14
29859: PUSH
29860: LD_INT 13
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: PUSH
29869: LD_VAR 0 2
29873: PUSH
29874: LD_INT 9
29876: MINUS
29877: ARRAY
29878: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29879: LD_ADDR_OWVAR 45
29883: PUSH
29884: LD_INT 11
29886: PUSH
29887: LD_INT 15
29889: PUSH
29890: LD_INT 12
29892: PUSH
29893: LD_INT 15
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: PUSH
29902: LD_VAR 0 2
29906: PUSH
29907: LD_INT 9
29909: MINUS
29910: ARRAY
29911: ST_TO_ADDR
// end ; 14 :
29912: GO 30331
29914: LD_INT 14
29916: DOUBLE
29917: EQUAL
29918: IFTRUE 29922
29920: GO 29933
29922: POP
// bc_type := b_workshop ; 15 :
29923: LD_ADDR_OWVAR 42
29927: PUSH
29928: LD_INT 2
29930: ST_TO_ADDR
29931: GO 30331
29933: LD_INT 15
29935: DOUBLE
29936: EQUAL
29937: IFTRUE 29941
29939: GO 29952
29941: POP
// bc_type := b_factory ; 16 :
29942: LD_ADDR_OWVAR 42
29946: PUSH
29947: LD_INT 3
29949: ST_TO_ADDR
29950: GO 30331
29952: LD_INT 16
29954: DOUBLE
29955: EQUAL
29956: IFTRUE 29960
29958: GO 29971
29960: POP
// bc_type := b_ext_gun ; 17 :
29961: LD_ADDR_OWVAR 42
29965: PUSH
29966: LD_INT 17
29968: ST_TO_ADDR
29969: GO 30331
29971: LD_INT 17
29973: DOUBLE
29974: EQUAL
29975: IFTRUE 29979
29977: GO 30007
29979: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29980: LD_ADDR_OWVAR 42
29984: PUSH
29985: LD_INT 19
29987: PUSH
29988: LD_INT 23
29990: PUSH
29991: LD_INT 19
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: LIST
29998: PUSH
29999: LD_VAR 0 1
30003: ARRAY
30004: ST_TO_ADDR
30005: GO 30331
30007: LD_INT 18
30009: DOUBLE
30010: EQUAL
30011: IFTRUE 30015
30013: GO 30026
30015: POP
// bc_type := b_ext_radar ; 19 :
30016: LD_ADDR_OWVAR 42
30020: PUSH
30021: LD_INT 20
30023: ST_TO_ADDR
30024: GO 30331
30026: LD_INT 19
30028: DOUBLE
30029: EQUAL
30030: IFTRUE 30034
30032: GO 30045
30034: POP
// bc_type := b_ext_radio ; 20 :
30035: LD_ADDR_OWVAR 42
30039: PUSH
30040: LD_INT 22
30042: ST_TO_ADDR
30043: GO 30331
30045: LD_INT 20
30047: DOUBLE
30048: EQUAL
30049: IFTRUE 30053
30051: GO 30064
30053: POP
// bc_type := b_ext_siberium ; 21 :
30054: LD_ADDR_OWVAR 42
30058: PUSH
30059: LD_INT 21
30061: ST_TO_ADDR
30062: GO 30331
30064: LD_INT 21
30066: DOUBLE
30067: EQUAL
30068: IFTRUE 30072
30070: GO 30083
30072: POP
// bc_type := b_ext_computer ; 22 :
30073: LD_ADDR_OWVAR 42
30077: PUSH
30078: LD_INT 24
30080: ST_TO_ADDR
30081: GO 30331
30083: LD_INT 22
30085: DOUBLE
30086: EQUAL
30087: IFTRUE 30091
30089: GO 30102
30091: POP
// bc_type := b_ext_track ; 23 :
30092: LD_ADDR_OWVAR 42
30096: PUSH
30097: LD_INT 16
30099: ST_TO_ADDR
30100: GO 30331
30102: LD_INT 23
30104: DOUBLE
30105: EQUAL
30106: IFTRUE 30110
30108: GO 30121
30110: POP
// bc_type := b_ext_laser ; 24 :
30111: LD_ADDR_OWVAR 42
30115: PUSH
30116: LD_INT 25
30118: ST_TO_ADDR
30119: GO 30331
30121: LD_INT 24
30123: DOUBLE
30124: EQUAL
30125: IFTRUE 30129
30127: GO 30140
30129: POP
// bc_type := b_control_tower ; 25 :
30130: LD_ADDR_OWVAR 42
30134: PUSH
30135: LD_INT 36
30137: ST_TO_ADDR
30138: GO 30331
30140: LD_INT 25
30142: DOUBLE
30143: EQUAL
30144: IFTRUE 30148
30146: GO 30159
30148: POP
// bc_type := b_breastwork ; 26 :
30149: LD_ADDR_OWVAR 42
30153: PUSH
30154: LD_INT 31
30156: ST_TO_ADDR
30157: GO 30331
30159: LD_INT 26
30161: DOUBLE
30162: EQUAL
30163: IFTRUE 30167
30165: GO 30178
30167: POP
// bc_type := b_bunker ; 27 :
30168: LD_ADDR_OWVAR 42
30172: PUSH
30173: LD_INT 32
30175: ST_TO_ADDR
30176: GO 30331
30178: LD_INT 27
30180: DOUBLE
30181: EQUAL
30182: IFTRUE 30186
30184: GO 30197
30186: POP
// bc_type := b_turret ; 28 :
30187: LD_ADDR_OWVAR 42
30191: PUSH
30192: LD_INT 33
30194: ST_TO_ADDR
30195: GO 30331
30197: LD_INT 28
30199: DOUBLE
30200: EQUAL
30201: IFTRUE 30205
30203: GO 30216
30205: POP
// bc_type := b_armoury ; 29 :
30206: LD_ADDR_OWVAR 42
30210: PUSH
30211: LD_INT 4
30213: ST_TO_ADDR
30214: GO 30331
30216: LD_INT 29
30218: DOUBLE
30219: EQUAL
30220: IFTRUE 30224
30222: GO 30235
30224: POP
// bc_type := b_barracks ; 30 :
30225: LD_ADDR_OWVAR 42
30229: PUSH
30230: LD_INT 5
30232: ST_TO_ADDR
30233: GO 30331
30235: LD_INT 30
30237: DOUBLE
30238: EQUAL
30239: IFTRUE 30243
30241: GO 30254
30243: POP
// bc_type := b_solar_power ; 31 :
30244: LD_ADDR_OWVAR 42
30248: PUSH
30249: LD_INT 27
30251: ST_TO_ADDR
30252: GO 30331
30254: LD_INT 31
30256: DOUBLE
30257: EQUAL
30258: IFTRUE 30262
30260: GO 30273
30262: POP
// bc_type := b_oil_power ; 32 :
30263: LD_ADDR_OWVAR 42
30267: PUSH
30268: LD_INT 26
30270: ST_TO_ADDR
30271: GO 30331
30273: LD_INT 32
30275: DOUBLE
30276: EQUAL
30277: IFTRUE 30281
30279: GO 30292
30281: POP
// bc_type := b_siberite_power ; 33 :
30282: LD_ADDR_OWVAR 42
30286: PUSH
30287: LD_INT 28
30289: ST_TO_ADDR
30290: GO 30331
30292: LD_INT 33
30294: DOUBLE
30295: EQUAL
30296: IFTRUE 30300
30298: GO 30311
30300: POP
// bc_type := b_oil_mine ; 34 :
30301: LD_ADDR_OWVAR 42
30305: PUSH
30306: LD_INT 29
30308: ST_TO_ADDR
30309: GO 30331
30311: LD_INT 34
30313: DOUBLE
30314: EQUAL
30315: IFTRUE 30319
30317: GO 30330
30319: POP
// bc_type := b_siberite_mine ; end ;
30320: LD_ADDR_OWVAR 42
30324: PUSH
30325: LD_INT 30
30327: ST_TO_ADDR
30328: GO 30331
30330: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30331: LD_ADDR_VAR 0 8
30335: PUSH
30336: LD_VAR 0 5
30340: PPUSH
30341: LD_VAR 0 6
30345: PPUSH
30346: LD_VAR 0 3
30350: PPUSH
30351: CALL_OW 47
30355: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30356: LD_OWVAR 42
30360: PUSH
30361: LD_INT 32
30363: PUSH
30364: LD_INT 33
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: IN
30371: IFFALSE 30387
// PlaceWeaponTurret ( b , weapon ) ;
30373: LD_VAR 0 8
30377: PPUSH
30378: LD_VAR 0 4
30382: PPUSH
30383: CALL_OW 431
// end ;
30387: LD_VAR 0 7
30391: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30392: LD_INT 0
30394: PPUSH
30395: PPUSH
30396: PPUSH
30397: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30398: LD_ADDR_VAR 0 4
30402: PUSH
30403: LD_INT 22
30405: PUSH
30406: LD_OWVAR 2
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 2
30417: PUSH
30418: LD_INT 30
30420: PUSH
30421: LD_INT 0
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 30
30430: PUSH
30431: LD_INT 1
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: LIST
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PPUSH
30447: CALL_OW 69
30451: ST_TO_ADDR
// if not tmp then
30452: LD_VAR 0 4
30456: NOT
30457: IFFALSE 30461
// exit ;
30459: GO 30520
// for i in tmp do
30461: LD_ADDR_VAR 0 2
30465: PUSH
30466: LD_VAR 0 4
30470: PUSH
30471: FOR_IN
30472: IFFALSE 30518
// for j = 1 to 3 do
30474: LD_ADDR_VAR 0 3
30478: PUSH
30479: DOUBLE
30480: LD_INT 1
30482: DEC
30483: ST_TO_ADDR
30484: LD_INT 3
30486: PUSH
30487: FOR_TO
30488: IFFALSE 30514
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30490: LD_VAR 0 2
30494: PPUSH
30495: CALL_OW 274
30499: PPUSH
30500: LD_VAR 0 3
30504: PPUSH
30505: LD_INT 99999
30507: PPUSH
30508: CALL_OW 277
30512: GO 30487
30514: POP
30515: POP
30516: GO 30471
30518: POP
30519: POP
// end ;
30520: LD_VAR 0 1
30524: RET
// export function hHackSetLevel10 ; var i , j ; begin
30525: LD_INT 0
30527: PPUSH
30528: PPUSH
30529: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30530: LD_ADDR_VAR 0 2
30534: PUSH
30535: LD_INT 21
30537: PUSH
30538: LD_INT 1
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PPUSH
30545: CALL_OW 69
30549: PUSH
30550: FOR_IN
30551: IFFALSE 30603
// if IsSelected ( i ) then
30553: LD_VAR 0 2
30557: PPUSH
30558: CALL_OW 306
30562: IFFALSE 30601
// begin for j := 1 to 4 do
30564: LD_ADDR_VAR 0 3
30568: PUSH
30569: DOUBLE
30570: LD_INT 1
30572: DEC
30573: ST_TO_ADDR
30574: LD_INT 4
30576: PUSH
30577: FOR_TO
30578: IFFALSE 30599
// SetSkill ( i , j , 10 ) ;
30580: LD_VAR 0 2
30584: PPUSH
30585: LD_VAR 0 3
30589: PPUSH
30590: LD_INT 10
30592: PPUSH
30593: CALL_OW 237
30597: GO 30577
30599: POP
30600: POP
// end ;
30601: GO 30550
30603: POP
30604: POP
// end ;
30605: LD_VAR 0 1
30609: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30610: LD_INT 0
30612: PPUSH
30613: PPUSH
30614: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30615: LD_ADDR_VAR 0 2
30619: PUSH
30620: LD_INT 22
30622: PUSH
30623: LD_OWVAR 2
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 21
30634: PUSH
30635: LD_INT 1
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PPUSH
30646: CALL_OW 69
30650: PUSH
30651: FOR_IN
30652: IFFALSE 30693
// begin for j := 1 to 4 do
30654: LD_ADDR_VAR 0 3
30658: PUSH
30659: DOUBLE
30660: LD_INT 1
30662: DEC
30663: ST_TO_ADDR
30664: LD_INT 4
30666: PUSH
30667: FOR_TO
30668: IFFALSE 30689
// SetSkill ( i , j , 10 ) ;
30670: LD_VAR 0 2
30674: PPUSH
30675: LD_VAR 0 3
30679: PPUSH
30680: LD_INT 10
30682: PPUSH
30683: CALL_OW 237
30687: GO 30667
30689: POP
30690: POP
// end ;
30691: GO 30651
30693: POP
30694: POP
// end ;
30695: LD_VAR 0 1
30699: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30700: LD_INT 0
30702: PPUSH
// uc_side := your_side ;
30703: LD_ADDR_OWVAR 20
30707: PUSH
30708: LD_OWVAR 2
30712: ST_TO_ADDR
// uc_nation := nation ;
30713: LD_ADDR_OWVAR 21
30717: PUSH
30718: LD_VAR 0 1
30722: ST_TO_ADDR
// InitHc ;
30723: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30727: LD_INT 0
30729: PPUSH
30730: LD_VAR 0 2
30734: PPUSH
30735: LD_VAR 0 3
30739: PPUSH
30740: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30744: LD_VAR 0 4
30748: PPUSH
30749: LD_VAR 0 5
30753: PPUSH
30754: CALL_OW 428
30758: PUSH
30759: LD_INT 0
30761: EQUAL
30762: IFFALSE 30786
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30764: CALL_OW 44
30768: PPUSH
30769: LD_VAR 0 4
30773: PPUSH
30774: LD_VAR 0 5
30778: PPUSH
30779: LD_INT 1
30781: PPUSH
30782: CALL_OW 48
// end ;
30786: LD_VAR 0 6
30790: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30791: LD_INT 0
30793: PPUSH
30794: PPUSH
// uc_side := your_side ;
30795: LD_ADDR_OWVAR 20
30799: PUSH
30800: LD_OWVAR 2
30804: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30805: LD_VAR 0 1
30809: PUSH
30810: LD_INT 1
30812: PUSH
30813: LD_INT 2
30815: PUSH
30816: LD_INT 3
30818: PUSH
30819: LD_INT 4
30821: PUSH
30822: LD_INT 5
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: IN
30832: IFFALSE 30844
// uc_nation := nation_american else
30834: LD_ADDR_OWVAR 21
30838: PUSH
30839: LD_INT 1
30841: ST_TO_ADDR
30842: GO 30887
// if chassis in [ 11 , 12 , 13 , 14 ] then
30844: LD_VAR 0 1
30848: PUSH
30849: LD_INT 11
30851: PUSH
30852: LD_INT 12
30854: PUSH
30855: LD_INT 13
30857: PUSH
30858: LD_INT 14
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: IN
30867: IFFALSE 30879
// uc_nation := nation_arabian else
30869: LD_ADDR_OWVAR 21
30873: PUSH
30874: LD_INT 2
30876: ST_TO_ADDR
30877: GO 30887
// uc_nation := nation_russian ;
30879: LD_ADDR_OWVAR 21
30883: PUSH
30884: LD_INT 3
30886: ST_TO_ADDR
// vc_chassis := chassis ;
30887: LD_ADDR_OWVAR 37
30891: PUSH
30892: LD_VAR 0 1
30896: ST_TO_ADDR
// vc_engine := engine ;
30897: LD_ADDR_OWVAR 39
30901: PUSH
30902: LD_VAR 0 2
30906: ST_TO_ADDR
// vc_control := control ;
30907: LD_ADDR_OWVAR 38
30911: PUSH
30912: LD_VAR 0 3
30916: ST_TO_ADDR
// vc_weapon := weapon ;
30917: LD_ADDR_OWVAR 40
30921: PUSH
30922: LD_VAR 0 4
30926: ST_TO_ADDR
// un := CreateVehicle ;
30927: LD_ADDR_VAR 0 8
30931: PUSH
30932: CALL_OW 45
30936: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30937: LD_VAR 0 8
30941: PPUSH
30942: LD_INT 0
30944: PPUSH
30945: LD_INT 5
30947: PPUSH
30948: CALL_OW 12
30952: PPUSH
30953: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30957: LD_VAR 0 8
30961: PPUSH
30962: LD_VAR 0 5
30966: PPUSH
30967: LD_VAR 0 6
30971: PPUSH
30972: LD_INT 1
30974: PPUSH
30975: CALL_OW 48
// end ;
30979: LD_VAR 0 7
30983: RET
// export hInvincible ; every 1 do
30984: GO 30986
30986: DISABLE
// hInvincible := [ ] ;
30987: LD_ADDR_EXP 95
30991: PUSH
30992: EMPTY
30993: ST_TO_ADDR
30994: END
// every 10 do var i ;
30995: GO 30997
30997: DISABLE
30998: LD_INT 0
31000: PPUSH
// begin enable ;
31001: ENABLE
// if not hInvincible then
31002: LD_EXP 95
31006: NOT
31007: IFFALSE 31011
// exit ;
31009: GO 31055
// for i in hInvincible do
31011: LD_ADDR_VAR 0 1
31015: PUSH
31016: LD_EXP 95
31020: PUSH
31021: FOR_IN
31022: IFFALSE 31053
// if GetLives ( i ) < 1000 then
31024: LD_VAR 0 1
31028: PPUSH
31029: CALL_OW 256
31033: PUSH
31034: LD_INT 1000
31036: LESS
31037: IFFALSE 31051
// SetLives ( i , 1000 ) ;
31039: LD_VAR 0 1
31043: PPUSH
31044: LD_INT 1000
31046: PPUSH
31047: CALL_OW 234
31051: GO 31021
31053: POP
31054: POP
// end ;
31055: PPOPN 1
31057: END
// export function hHackInvincible ; var i ; begin
31058: LD_INT 0
31060: PPUSH
31061: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31062: LD_ADDR_VAR 0 2
31066: PUSH
31067: LD_INT 2
31069: PUSH
31070: LD_INT 21
31072: PUSH
31073: LD_INT 1
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 21
31082: PUSH
31083: LD_INT 2
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: LIST
31094: PPUSH
31095: CALL_OW 69
31099: PUSH
31100: FOR_IN
31101: IFFALSE 31162
// if IsSelected ( i ) then
31103: LD_VAR 0 2
31107: PPUSH
31108: CALL_OW 306
31112: IFFALSE 31160
// begin if i in hInvincible then
31114: LD_VAR 0 2
31118: PUSH
31119: LD_EXP 95
31123: IN
31124: IFFALSE 31144
// hInvincible := hInvincible diff i else
31126: LD_ADDR_EXP 95
31130: PUSH
31131: LD_EXP 95
31135: PUSH
31136: LD_VAR 0 2
31140: DIFF
31141: ST_TO_ADDR
31142: GO 31160
// hInvincible := hInvincible union i ;
31144: LD_ADDR_EXP 95
31148: PUSH
31149: LD_EXP 95
31153: PUSH
31154: LD_VAR 0 2
31158: UNION
31159: ST_TO_ADDR
// end ;
31160: GO 31100
31162: POP
31163: POP
// end ;
31164: LD_VAR 0 1
31168: RET
// export function hHackInvisible ; var i , j ; begin
31169: LD_INT 0
31171: PPUSH
31172: PPUSH
31173: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31174: LD_ADDR_VAR 0 2
31178: PUSH
31179: LD_INT 21
31181: PUSH
31182: LD_INT 1
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PPUSH
31189: CALL_OW 69
31193: PUSH
31194: FOR_IN
31195: IFFALSE 31219
// if IsSelected ( i ) then
31197: LD_VAR 0 2
31201: PPUSH
31202: CALL_OW 306
31206: IFFALSE 31217
// ComForceInvisible ( i ) ;
31208: LD_VAR 0 2
31212: PPUSH
31213: CALL_OW 496
31217: GO 31194
31219: POP
31220: POP
// end ;
31221: LD_VAR 0 1
31225: RET
// export function hHackChangeYourSide ; begin
31226: LD_INT 0
31228: PPUSH
// if your_side = 8 then
31229: LD_OWVAR 2
31233: PUSH
31234: LD_INT 8
31236: EQUAL
31237: IFFALSE 31249
// your_side := 0 else
31239: LD_ADDR_OWVAR 2
31243: PUSH
31244: LD_INT 0
31246: ST_TO_ADDR
31247: GO 31263
// your_side := your_side + 1 ;
31249: LD_ADDR_OWVAR 2
31253: PUSH
31254: LD_OWVAR 2
31258: PUSH
31259: LD_INT 1
31261: PLUS
31262: ST_TO_ADDR
// end ;
31263: LD_VAR 0 1
31267: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31268: LD_INT 0
31270: PPUSH
31271: PPUSH
31272: PPUSH
// for i in all_units do
31273: LD_ADDR_VAR 0 2
31277: PUSH
31278: LD_OWVAR 3
31282: PUSH
31283: FOR_IN
31284: IFFALSE 31362
// if IsSelected ( i ) then
31286: LD_VAR 0 2
31290: PPUSH
31291: CALL_OW 306
31295: IFFALSE 31360
// begin j := GetSide ( i ) ;
31297: LD_ADDR_VAR 0 3
31301: PUSH
31302: LD_VAR 0 2
31306: PPUSH
31307: CALL_OW 255
31311: ST_TO_ADDR
// if j = 8 then
31312: LD_VAR 0 3
31316: PUSH
31317: LD_INT 8
31319: EQUAL
31320: IFFALSE 31332
// j := 0 else
31322: LD_ADDR_VAR 0 3
31326: PUSH
31327: LD_INT 0
31329: ST_TO_ADDR
31330: GO 31346
// j := j + 1 ;
31332: LD_ADDR_VAR 0 3
31336: PUSH
31337: LD_VAR 0 3
31341: PUSH
31342: LD_INT 1
31344: PLUS
31345: ST_TO_ADDR
// SetSide ( i , j ) ;
31346: LD_VAR 0 2
31350: PPUSH
31351: LD_VAR 0 3
31355: PPUSH
31356: CALL_OW 235
// end ;
31360: GO 31283
31362: POP
31363: POP
// end ;
31364: LD_VAR 0 1
31368: RET
// export function hHackFog ; begin
31369: LD_INT 0
31371: PPUSH
// FogOff ( true ) ;
31372: LD_INT 1
31374: PPUSH
31375: CALL_OW 344
// end ;
31379: LD_VAR 0 1
31383: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31384: LD_INT 0
31386: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31387: LD_VAR 0 1
31391: PPUSH
31392: LD_VAR 0 2
31396: PPUSH
31397: LD_VAR 0 3
31401: PPUSH
31402: LD_INT 1
31404: PPUSH
31405: LD_INT 1
31407: PPUSH
31408: CALL_OW 483
// CenterOnXY ( x , y ) ;
31412: LD_VAR 0 2
31416: PPUSH
31417: LD_VAR 0 3
31421: PPUSH
31422: CALL_OW 84
// end ;
31426: LD_VAR 0 4
31430: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
31431: LD_INT 0
31433: PPUSH
31434: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
31435: LD_VAR 0 1
31439: NOT
31440: PUSH
31441: LD_VAR 0 2
31445: PPUSH
31446: LD_VAR 0 3
31450: PPUSH
31451: CALL_OW 488
31455: NOT
31456: OR
31457: PUSH
31458: LD_VAR 0 1
31462: PPUSH
31463: CALL_OW 266
31467: PUSH
31468: LD_INT 3
31470: NONEQUAL
31471: PUSH
31472: LD_VAR 0 1
31476: PPUSH
31477: CALL_OW 247
31481: PUSH
31482: LD_INT 1
31484: EQUAL
31485: NOT
31486: AND
31487: OR
31488: IFFALSE 31492
// exit ;
31490: GO 31641
// if GetType ( factory ) = unit_human then
31492: LD_VAR 0 1
31496: PPUSH
31497: CALL_OW 247
31501: PUSH
31502: LD_INT 1
31504: EQUAL
31505: IFFALSE 31522
// factory := IsInUnit ( factory ) ;
31507: LD_ADDR_VAR 0 1
31511: PUSH
31512: LD_VAR 0 1
31516: PPUSH
31517: CALL_OW 310
31521: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
31522: LD_VAR 0 1
31526: PPUSH
31527: CALL_OW 266
31531: PUSH
31532: LD_INT 3
31534: NONEQUAL
31535: IFFALSE 31539
// exit ;
31537: GO 31641
// if HexInfo ( x , y ) = factory then
31539: LD_VAR 0 2
31543: PPUSH
31544: LD_VAR 0 3
31548: PPUSH
31549: CALL_OW 428
31553: PUSH
31554: LD_VAR 0 1
31558: EQUAL
31559: IFFALSE 31586
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
31561: LD_ADDR_EXP 96
31565: PUSH
31566: LD_EXP 96
31570: PPUSH
31571: LD_VAR 0 1
31575: PPUSH
31576: LD_INT 0
31578: PPUSH
31579: CALL_OW 1
31583: ST_TO_ADDR
31584: GO 31637
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
31586: LD_ADDR_EXP 96
31590: PUSH
31591: LD_EXP 96
31595: PPUSH
31596: LD_VAR 0 1
31600: PPUSH
31601: LD_VAR 0 1
31605: PPUSH
31606: CALL_OW 255
31610: PUSH
31611: LD_VAR 0 1
31615: PUSH
31616: LD_VAR 0 2
31620: PUSH
31621: LD_VAR 0 3
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: PPUSH
31632: CALL_OW 1
31636: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31637: CALL 31646 0 0
// end ;
31641: LD_VAR 0 4
31645: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
31646: LD_INT 0
31648: PPUSH
31649: PPUSH
31650: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
31651: LD_STRING resetFactoryWaypoint();
31653: PPUSH
31654: CALL_OW 559
// if factoryWaypoints then
31658: LD_EXP 96
31662: IFFALSE 31788
// begin list := PrepareArray ( factoryWaypoints ) ;
31664: LD_ADDR_VAR 0 3
31668: PUSH
31669: LD_EXP 96
31673: PPUSH
31674: CALL 79096 0 1
31678: ST_TO_ADDR
// for i := 1 to list do
31679: LD_ADDR_VAR 0 2
31683: PUSH
31684: DOUBLE
31685: LD_INT 1
31687: DEC
31688: ST_TO_ADDR
31689: LD_VAR 0 3
31693: PUSH
31694: FOR_TO
31695: IFFALSE 31786
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31697: LD_STRING setFactoryWaypointXY(
31699: PUSH
31700: LD_VAR 0 3
31704: PUSH
31705: LD_VAR 0 2
31709: ARRAY
31710: PUSH
31711: LD_INT 1
31713: ARRAY
31714: STR
31715: PUSH
31716: LD_STRING ,
31718: STR
31719: PUSH
31720: LD_VAR 0 3
31724: PUSH
31725: LD_VAR 0 2
31729: ARRAY
31730: PUSH
31731: LD_INT 2
31733: ARRAY
31734: STR
31735: PUSH
31736: LD_STRING ,
31738: STR
31739: PUSH
31740: LD_VAR 0 3
31744: PUSH
31745: LD_VAR 0 2
31749: ARRAY
31750: PUSH
31751: LD_INT 3
31753: ARRAY
31754: STR
31755: PUSH
31756: LD_STRING ,
31758: STR
31759: PUSH
31760: LD_VAR 0 3
31764: PUSH
31765: LD_VAR 0 2
31769: ARRAY
31770: PUSH
31771: LD_INT 4
31773: ARRAY
31774: STR
31775: PUSH
31776: LD_STRING )
31778: STR
31779: PPUSH
31780: CALL_OW 559
31784: GO 31694
31786: POP
31787: POP
// end ; end ;
31788: LD_VAR 0 1
31792: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
31793: LD_INT 0
31795: PPUSH
// if HexInfo ( x , y ) = warehouse then
31796: LD_VAR 0 2
31800: PPUSH
31801: LD_VAR 0 3
31805: PPUSH
31806: CALL_OW 428
31810: PUSH
31811: LD_VAR 0 1
31815: EQUAL
31816: IFFALSE 31843
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
31818: LD_ADDR_EXP 97
31822: PUSH
31823: LD_EXP 97
31827: PPUSH
31828: LD_VAR 0 1
31832: PPUSH
31833: LD_INT 0
31835: PPUSH
31836: CALL_OW 1
31840: ST_TO_ADDR
31841: GO 31894
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
31843: LD_ADDR_EXP 97
31847: PUSH
31848: LD_EXP 97
31852: PPUSH
31853: LD_VAR 0 1
31857: PPUSH
31858: LD_VAR 0 1
31862: PPUSH
31863: CALL_OW 255
31867: PUSH
31868: LD_VAR 0 1
31872: PUSH
31873: LD_VAR 0 2
31877: PUSH
31878: LD_VAR 0 3
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: PPUSH
31889: CALL_OW 1
31893: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
31894: CALL 31903 0 0
// end ;
31898: LD_VAR 0 4
31902: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
31903: LD_INT 0
31905: PPUSH
31906: PPUSH
31907: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
31908: LD_STRING resetWarehouseGatheringPoints();
31910: PPUSH
31911: CALL_OW 559
// if warehouseGatheringPoints then
31915: LD_EXP 97
31919: IFFALSE 32045
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
31921: LD_ADDR_VAR 0 3
31925: PUSH
31926: LD_EXP 97
31930: PPUSH
31931: CALL 79096 0 1
31935: ST_TO_ADDR
// for i := 1 to list do
31936: LD_ADDR_VAR 0 2
31940: PUSH
31941: DOUBLE
31942: LD_INT 1
31944: DEC
31945: ST_TO_ADDR
31946: LD_VAR 0 3
31950: PUSH
31951: FOR_TO
31952: IFFALSE 32043
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31954: LD_STRING setWarehouseGatheringPointXY(
31956: PUSH
31957: LD_VAR 0 3
31961: PUSH
31962: LD_VAR 0 2
31966: ARRAY
31967: PUSH
31968: LD_INT 1
31970: ARRAY
31971: STR
31972: PUSH
31973: LD_STRING ,
31975: STR
31976: PUSH
31977: LD_VAR 0 3
31981: PUSH
31982: LD_VAR 0 2
31986: ARRAY
31987: PUSH
31988: LD_INT 2
31990: ARRAY
31991: STR
31992: PUSH
31993: LD_STRING ,
31995: STR
31996: PUSH
31997: LD_VAR 0 3
32001: PUSH
32002: LD_VAR 0 2
32006: ARRAY
32007: PUSH
32008: LD_INT 3
32010: ARRAY
32011: STR
32012: PUSH
32013: LD_STRING ,
32015: STR
32016: PUSH
32017: LD_VAR 0 3
32021: PUSH
32022: LD_VAR 0 2
32026: ARRAY
32027: PUSH
32028: LD_INT 4
32030: ARRAY
32031: STR
32032: PUSH
32033: LD_STRING )
32035: STR
32036: PPUSH
32037: CALL_OW 559
32041: GO 31951
32043: POP
32044: POP
// end ; end ;
32045: LD_VAR 0 1
32049: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
32050: LD_EXP 97
32054: IFFALSE 32739
32056: GO 32058
32058: DISABLE
32059: LD_INT 0
32061: PPUSH
32062: PPUSH
32063: PPUSH
32064: PPUSH
32065: PPUSH
32066: PPUSH
32067: PPUSH
32068: PPUSH
32069: PPUSH
// begin enable ;
32070: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
32071: LD_ADDR_VAR 0 3
32075: PUSH
32076: LD_EXP 97
32080: PPUSH
32081: CALL 79096 0 1
32085: ST_TO_ADDR
// if not list then
32086: LD_VAR 0 3
32090: NOT
32091: IFFALSE 32095
// exit ;
32093: GO 32739
// for i := 1 to list do
32095: LD_ADDR_VAR 0 1
32099: PUSH
32100: DOUBLE
32101: LD_INT 1
32103: DEC
32104: ST_TO_ADDR
32105: LD_VAR 0 3
32109: PUSH
32110: FOR_TO
32111: IFFALSE 32737
// begin depot := list [ i ] [ 2 ] ;
32113: LD_ADDR_VAR 0 8
32117: PUSH
32118: LD_VAR 0 3
32122: PUSH
32123: LD_VAR 0 1
32127: ARRAY
32128: PUSH
32129: LD_INT 2
32131: ARRAY
32132: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
32133: LD_ADDR_VAR 0 5
32137: PUSH
32138: LD_VAR 0 3
32142: PUSH
32143: LD_VAR 0 1
32147: ARRAY
32148: PUSH
32149: LD_INT 1
32151: ARRAY
32152: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
32153: LD_VAR 0 8
32157: PPUSH
32158: CALL_OW 301
32162: PUSH
32163: LD_VAR 0 5
32167: PUSH
32168: LD_VAR 0 8
32172: PPUSH
32173: CALL_OW 255
32177: NONEQUAL
32178: OR
32179: IFFALSE 32208
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
32181: LD_ADDR_EXP 97
32185: PUSH
32186: LD_EXP 97
32190: PPUSH
32191: LD_VAR 0 8
32195: PPUSH
32196: LD_INT 0
32198: PPUSH
32199: CALL_OW 1
32203: ST_TO_ADDR
// exit ;
32204: POP
32205: POP
32206: GO 32739
// end ; x := list [ i ] [ 3 ] ;
32208: LD_ADDR_VAR 0 6
32212: PUSH
32213: LD_VAR 0 3
32217: PUSH
32218: LD_VAR 0 1
32222: ARRAY
32223: PUSH
32224: LD_INT 3
32226: ARRAY
32227: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
32228: LD_ADDR_VAR 0 7
32232: PUSH
32233: LD_VAR 0 3
32237: PUSH
32238: LD_VAR 0 1
32242: ARRAY
32243: PUSH
32244: LD_INT 4
32246: ARRAY
32247: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
32248: LD_ADDR_VAR 0 9
32252: PUSH
32253: LD_VAR 0 6
32257: PPUSH
32258: LD_VAR 0 7
32262: PPUSH
32263: LD_INT 16
32265: PPUSH
32266: CALL 77684 0 3
32270: ST_TO_ADDR
// if not cratesNearbyPoint then
32271: LD_VAR 0 9
32275: NOT
32276: IFFALSE 32282
// exit ;
32278: POP
32279: POP
32280: GO 32739
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
32282: LD_ADDR_VAR 0 4
32286: PUSH
32287: LD_INT 22
32289: PUSH
32290: LD_VAR 0 5
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 3
32301: PUSH
32302: LD_INT 60
32304: PUSH
32305: EMPTY
32306: LIST
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 91
32314: PUSH
32315: LD_VAR 0 8
32319: PUSH
32320: LD_INT 6
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 2
32330: PUSH
32331: LD_INT 25
32333: PUSH
32334: LD_INT 2
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 25
32343: PUSH
32344: LD_INT 16
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: LIST
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: PPUSH
32362: CALL_OW 69
32366: PUSH
32367: LD_VAR 0 8
32371: PPUSH
32372: CALL_OW 313
32376: PPUSH
32377: LD_INT 3
32379: PUSH
32380: LD_INT 60
32382: PUSH
32383: EMPTY
32384: LIST
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 2
32392: PUSH
32393: LD_INT 25
32395: PUSH
32396: LD_INT 2
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 25
32405: PUSH
32406: LD_INT 16
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: LIST
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PPUSH
32422: CALL_OW 72
32426: UNION
32427: ST_TO_ADDR
// if tmp then
32428: LD_VAR 0 4
32432: IFFALSE 32512
// begin tmp := ShrinkArray ( tmp , 3 ) ;
32434: LD_ADDR_VAR 0 4
32438: PUSH
32439: LD_VAR 0 4
32443: PPUSH
32444: LD_INT 3
32446: PPUSH
32447: CALL 75653 0 2
32451: ST_TO_ADDR
// for j in tmp do
32452: LD_ADDR_VAR 0 2
32456: PUSH
32457: LD_VAR 0 4
32461: PUSH
32462: FOR_IN
32463: IFFALSE 32506
// begin if IsInUnit ( j ) then
32465: LD_VAR 0 2
32469: PPUSH
32470: CALL_OW 310
32474: IFFALSE 32485
// ComExit ( j ) ;
32476: LD_VAR 0 2
32480: PPUSH
32481: CALL 75736 0 1
// AddComCollect ( j , x , y ) ;
32485: LD_VAR 0 2
32489: PPUSH
32490: LD_VAR 0 6
32494: PPUSH
32495: LD_VAR 0 7
32499: PPUSH
32500: CALL_OW 177
// end ;
32504: GO 32462
32506: POP
32507: POP
// exit ;
32508: POP
32509: POP
32510: GO 32739
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
32512: LD_ADDR_VAR 0 4
32516: PUSH
32517: LD_INT 22
32519: PUSH
32520: LD_VAR 0 5
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 91
32531: PUSH
32532: LD_VAR 0 8
32536: PUSH
32537: LD_INT 8
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 2
32547: PUSH
32548: LD_INT 34
32550: PUSH
32551: LD_INT 12
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 34
32560: PUSH
32561: LD_INT 51
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 34
32570: PUSH
32571: LD_INT 32
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 34
32580: PUSH
32581: LD_INT 89
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: LIST
32599: PPUSH
32600: CALL_OW 69
32604: ST_TO_ADDR
// if tmp then
32605: LD_VAR 0 4
32609: IFFALSE 32735
// begin for j in tmp do
32611: LD_ADDR_VAR 0 2
32615: PUSH
32616: LD_VAR 0 4
32620: PUSH
32621: FOR_IN
32622: IFFALSE 32733
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
32624: LD_VAR 0 2
32628: PPUSH
32629: CALL_OW 262
32633: PUSH
32634: LD_INT 3
32636: EQUAL
32637: PUSH
32638: LD_VAR 0 2
32642: PPUSH
32643: CALL_OW 261
32647: PUSH
32648: LD_INT 20
32650: GREATER
32651: OR
32652: PUSH
32653: LD_VAR 0 2
32657: PPUSH
32658: CALL_OW 314
32662: NOT
32663: AND
32664: PUSH
32665: LD_VAR 0 2
32669: PPUSH
32670: CALL_OW 263
32674: PUSH
32675: LD_INT 1
32677: NONEQUAL
32678: PUSH
32679: LD_VAR 0 2
32683: PPUSH
32684: CALL_OW 311
32688: OR
32689: AND
32690: IFFALSE 32731
// begin ComCollect ( j , x , y ) ;
32692: LD_VAR 0 2
32696: PPUSH
32697: LD_VAR 0 6
32701: PPUSH
32702: LD_VAR 0 7
32706: PPUSH
32707: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
32711: LD_VAR 0 2
32715: PPUSH
32716: LD_VAR 0 8
32720: PPUSH
32721: CALL_OW 172
// exit ;
32725: POP
32726: POP
32727: POP
32728: POP
32729: GO 32739
// end ;
32731: GO 32621
32733: POP
32734: POP
// end ; end ;
32735: GO 32110
32737: POP
32738: POP
// end ; end_of_file
32739: PPOPN 9
32741: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32742: LD_INT 0
32744: PPUSH
32745: PPUSH
32746: PPUSH
32747: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32748: LD_VAR 0 1
32752: PPUSH
32753: CALL_OW 264
32757: PUSH
32758: LD_INT 91
32760: EQUAL
32761: IFFALSE 32833
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32763: LD_INT 68
32765: PPUSH
32766: LD_VAR 0 1
32770: PPUSH
32771: CALL_OW 255
32775: PPUSH
32776: CALL_OW 321
32780: PUSH
32781: LD_INT 2
32783: EQUAL
32784: IFFALSE 32796
// eff := 70 else
32786: LD_ADDR_VAR 0 4
32790: PUSH
32791: LD_INT 70
32793: ST_TO_ADDR
32794: GO 32804
// eff := 30 ;
32796: LD_ADDR_VAR 0 4
32800: PUSH
32801: LD_INT 30
32803: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32804: LD_VAR 0 1
32808: PPUSH
32809: CALL_OW 250
32813: PPUSH
32814: LD_VAR 0 1
32818: PPUSH
32819: CALL_OW 251
32823: PPUSH
32824: LD_VAR 0 4
32828: PPUSH
32829: CALL_OW 495
// end ; end ;
32833: LD_VAR 0 2
32837: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32838: LD_INT 0
32840: PPUSH
// end ;
32841: LD_VAR 0 4
32845: RET
// export function SOS_Command ( cmd ) ; begin
32846: LD_INT 0
32848: PPUSH
// end ;
32849: LD_VAR 0 2
32853: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32854: LD_INT 0
32856: PPUSH
// end ;
32857: LD_VAR 0 6
32861: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
32862: LD_INT 0
32864: PPUSH
32865: PPUSH
// if not vehicle or not factory then
32866: LD_VAR 0 1
32870: NOT
32871: PUSH
32872: LD_VAR 0 2
32876: NOT
32877: OR
32878: IFFALSE 32882
// exit ;
32880: GO 33113
// if factoryWaypoints >= factory then
32882: LD_EXP 96
32886: PUSH
32887: LD_VAR 0 2
32891: GREATEREQUAL
32892: IFFALSE 33113
// if factoryWaypoints [ factory ] then
32894: LD_EXP 96
32898: PUSH
32899: LD_VAR 0 2
32903: ARRAY
32904: IFFALSE 33113
// begin if GetControl ( vehicle ) = control_manual then
32906: LD_VAR 0 1
32910: PPUSH
32911: CALL_OW 263
32915: PUSH
32916: LD_INT 1
32918: EQUAL
32919: IFFALSE 33000
// begin driver := IsDrivenBy ( vehicle ) ;
32921: LD_ADDR_VAR 0 4
32925: PUSH
32926: LD_VAR 0 1
32930: PPUSH
32931: CALL_OW 311
32935: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32936: LD_VAR 0 4
32940: PPUSH
32941: LD_EXP 96
32945: PUSH
32946: LD_VAR 0 2
32950: ARRAY
32951: PUSH
32952: LD_INT 3
32954: ARRAY
32955: PPUSH
32956: LD_EXP 96
32960: PUSH
32961: LD_VAR 0 2
32965: ARRAY
32966: PUSH
32967: LD_INT 4
32969: ARRAY
32970: PPUSH
32971: CALL_OW 171
// AddComExitVehicle ( driver ) ;
32975: LD_VAR 0 4
32979: PPUSH
32980: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
32984: LD_VAR 0 4
32988: PPUSH
32989: LD_VAR 0 2
32993: PPUSH
32994: CALL_OW 180
// end else
32998: GO 33113
// if GetControl ( vehicle ) = control_remote then
33000: LD_VAR 0 1
33004: PPUSH
33005: CALL_OW 263
33009: PUSH
33010: LD_INT 2
33012: EQUAL
33013: IFFALSE 33074
// begin wait ( 0 0$2 ) ;
33015: LD_INT 70
33017: PPUSH
33018: CALL_OW 67
// if Connect ( vehicle ) then
33022: LD_VAR 0 1
33026: PPUSH
33027: CALL 45944 0 1
33031: IFFALSE 33072
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33033: LD_VAR 0 1
33037: PPUSH
33038: LD_EXP 96
33042: PUSH
33043: LD_VAR 0 2
33047: ARRAY
33048: PUSH
33049: LD_INT 3
33051: ARRAY
33052: PPUSH
33053: LD_EXP 96
33057: PUSH
33058: LD_VAR 0 2
33062: ARRAY
33063: PUSH
33064: LD_INT 4
33066: ARRAY
33067: PPUSH
33068: CALL_OW 171
// end else
33072: GO 33113
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33074: LD_VAR 0 1
33078: PPUSH
33079: LD_EXP 96
33083: PUSH
33084: LD_VAR 0 2
33088: ARRAY
33089: PUSH
33090: LD_INT 3
33092: ARRAY
33093: PPUSH
33094: LD_EXP 96
33098: PUSH
33099: LD_VAR 0 2
33103: ARRAY
33104: PUSH
33105: LD_INT 4
33107: ARRAY
33108: PPUSH
33109: CALL_OW 171
// end ; end ;
33113: LD_VAR 0 3
33117: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33118: LD_INT 0
33120: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33121: LD_VAR 0 1
33125: PUSH
33126: LD_INT 250
33128: EQUAL
33129: PUSH
33130: LD_VAR 0 2
33134: PPUSH
33135: CALL_OW 264
33139: PUSH
33140: LD_INT 81
33142: EQUAL
33143: AND
33144: IFFALSE 33165
// MinerPlaceMine ( unit , x , y ) ;
33146: LD_VAR 0 2
33150: PPUSH
33151: LD_VAR 0 4
33155: PPUSH
33156: LD_VAR 0 5
33160: PPUSH
33161: CALL 36155 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33165: LD_VAR 0 1
33169: PUSH
33170: LD_INT 251
33172: EQUAL
33173: PUSH
33174: LD_VAR 0 2
33178: PPUSH
33179: CALL_OW 264
33183: PUSH
33184: LD_INT 81
33186: EQUAL
33187: AND
33188: IFFALSE 33209
// MinerDetonateMine ( unit , x , y ) ;
33190: LD_VAR 0 2
33194: PPUSH
33195: LD_VAR 0 4
33199: PPUSH
33200: LD_VAR 0 5
33204: PPUSH
33205: CALL 36430 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33209: LD_VAR 0 1
33213: PUSH
33214: LD_INT 252
33216: EQUAL
33217: PUSH
33218: LD_VAR 0 2
33222: PPUSH
33223: CALL_OW 264
33227: PUSH
33228: LD_INT 81
33230: EQUAL
33231: AND
33232: IFFALSE 33253
// MinerCreateMinefield ( unit , x , y ) ;
33234: LD_VAR 0 2
33238: PPUSH
33239: LD_VAR 0 4
33243: PPUSH
33244: LD_VAR 0 5
33248: PPUSH
33249: CALL 36847 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33253: LD_VAR 0 1
33257: PUSH
33258: LD_INT 253
33260: EQUAL
33261: PUSH
33262: LD_VAR 0 2
33266: PPUSH
33267: CALL_OW 257
33271: PUSH
33272: LD_INT 5
33274: EQUAL
33275: AND
33276: IFFALSE 33297
// ComBinocular ( unit , x , y ) ;
33278: LD_VAR 0 2
33282: PPUSH
33283: LD_VAR 0 4
33287: PPUSH
33288: LD_VAR 0 5
33292: PPUSH
33293: CALL 37216 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33297: LD_VAR 0 1
33301: PUSH
33302: LD_INT 254
33304: EQUAL
33305: PUSH
33306: LD_VAR 0 2
33310: PPUSH
33311: CALL_OW 264
33315: PUSH
33316: LD_INT 99
33318: EQUAL
33319: AND
33320: PUSH
33321: LD_VAR 0 3
33325: PPUSH
33326: CALL_OW 263
33330: PUSH
33331: LD_INT 3
33333: EQUAL
33334: AND
33335: IFFALSE 33351
// HackDestroyVehicle ( unit , selectedUnit ) ;
33337: LD_VAR 0 2
33341: PPUSH
33342: LD_VAR 0 3
33346: PPUSH
33347: CALL 35519 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33351: LD_VAR 0 1
33355: PUSH
33356: LD_INT 255
33358: EQUAL
33359: PUSH
33360: LD_VAR 0 2
33364: PPUSH
33365: CALL_OW 264
33369: PUSH
33370: LD_INT 14
33372: PUSH
33373: LD_INT 53
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: IN
33380: AND
33381: PUSH
33382: LD_VAR 0 4
33386: PPUSH
33387: LD_VAR 0 5
33391: PPUSH
33392: CALL_OW 488
33396: AND
33397: IFFALSE 33421
// CutTreeXYR ( unit , x , y , 12 ) ;
33399: LD_VAR 0 2
33403: PPUSH
33404: LD_VAR 0 4
33408: PPUSH
33409: LD_VAR 0 5
33413: PPUSH
33414: LD_INT 12
33416: PPUSH
33417: CALL 33516 0 4
// if cmd = 256 then
33421: LD_VAR 0 1
33425: PUSH
33426: LD_INT 256
33428: EQUAL
33429: IFFALSE 33450
// SetFactoryWaypoint ( unit , x , y ) ;
33431: LD_VAR 0 2
33435: PPUSH
33436: LD_VAR 0 4
33440: PPUSH
33441: LD_VAR 0 5
33445: PPUSH
33446: CALL 31431 0 3
// if cmd = 257 then
33450: LD_VAR 0 1
33454: PUSH
33455: LD_INT 257
33457: EQUAL
33458: IFFALSE 33479
// SetWarehouseGatheringPoint ( unit , x , y ) ;
33460: LD_VAR 0 2
33464: PPUSH
33465: LD_VAR 0 4
33469: PPUSH
33470: LD_VAR 0 5
33474: PPUSH
33475: CALL 31793 0 3
// if cmd = 258 then
33479: LD_VAR 0 1
33483: PUSH
33484: LD_INT 258
33486: EQUAL
33487: IFFALSE 33511
// BurnTreeXYR ( unit , x , y , 8 ) ;
33489: LD_VAR 0 2
33493: PPUSH
33494: LD_VAR 0 4
33498: PPUSH
33499: LD_VAR 0 5
33503: PPUSH
33504: LD_INT 8
33506: PPUSH
33507: CALL 33910 0 4
// end ;
33511: LD_VAR 0 6
33515: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33516: LD_INT 0
33518: PPUSH
33519: PPUSH
33520: PPUSH
33521: PPUSH
33522: PPUSH
33523: PPUSH
33524: PPUSH
33525: PPUSH
33526: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
33527: LD_VAR 0 1
33531: PPUSH
33532: CALL_OW 302
33536: NOT
33537: PUSH
33538: LD_VAR 0 2
33542: PPUSH
33543: LD_VAR 0 3
33547: PPUSH
33548: CALL_OW 488
33552: NOT
33553: OR
33554: PUSH
33555: LD_VAR 0 4
33559: NOT
33560: OR
33561: IFFALSE 33565
// exit ;
33563: GO 33905
// list := [ ] ;
33565: LD_ADDR_VAR 0 13
33569: PUSH
33570: EMPTY
33571: ST_TO_ADDR
// if x - r < 0 then
33572: LD_VAR 0 2
33576: PUSH
33577: LD_VAR 0 4
33581: MINUS
33582: PUSH
33583: LD_INT 0
33585: LESS
33586: IFFALSE 33598
// min_x := 0 else
33588: LD_ADDR_VAR 0 7
33592: PUSH
33593: LD_INT 0
33595: ST_TO_ADDR
33596: GO 33614
// min_x := x - r ;
33598: LD_ADDR_VAR 0 7
33602: PUSH
33603: LD_VAR 0 2
33607: PUSH
33608: LD_VAR 0 4
33612: MINUS
33613: ST_TO_ADDR
// if y - r < 0 then
33614: LD_VAR 0 3
33618: PUSH
33619: LD_VAR 0 4
33623: MINUS
33624: PUSH
33625: LD_INT 0
33627: LESS
33628: IFFALSE 33640
// min_y := 0 else
33630: LD_ADDR_VAR 0 8
33634: PUSH
33635: LD_INT 0
33637: ST_TO_ADDR
33638: GO 33656
// min_y := y - r ;
33640: LD_ADDR_VAR 0 8
33644: PUSH
33645: LD_VAR 0 3
33649: PUSH
33650: LD_VAR 0 4
33654: MINUS
33655: ST_TO_ADDR
// max_x := x + r ;
33656: LD_ADDR_VAR 0 9
33660: PUSH
33661: LD_VAR 0 2
33665: PUSH
33666: LD_VAR 0 4
33670: PLUS
33671: ST_TO_ADDR
// max_y := y + r ;
33672: LD_ADDR_VAR 0 10
33676: PUSH
33677: LD_VAR 0 3
33681: PUSH
33682: LD_VAR 0 4
33686: PLUS
33687: ST_TO_ADDR
// for _x = min_x to max_x do
33688: LD_ADDR_VAR 0 11
33692: PUSH
33693: DOUBLE
33694: LD_VAR 0 7
33698: DEC
33699: ST_TO_ADDR
33700: LD_VAR 0 9
33704: PUSH
33705: FOR_TO
33706: IFFALSE 33823
// for _y = min_y to max_y do
33708: LD_ADDR_VAR 0 12
33712: PUSH
33713: DOUBLE
33714: LD_VAR 0 8
33718: DEC
33719: ST_TO_ADDR
33720: LD_VAR 0 10
33724: PUSH
33725: FOR_TO
33726: IFFALSE 33819
// begin if not ValidHex ( _x , _y ) then
33728: LD_VAR 0 11
33732: PPUSH
33733: LD_VAR 0 12
33737: PPUSH
33738: CALL_OW 488
33742: NOT
33743: IFFALSE 33747
// continue ;
33745: GO 33725
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33747: LD_VAR 0 11
33751: PPUSH
33752: LD_VAR 0 12
33756: PPUSH
33757: CALL_OW 351
33761: PUSH
33762: LD_VAR 0 11
33766: PPUSH
33767: LD_VAR 0 12
33771: PPUSH
33772: CALL_OW 554
33776: AND
33777: IFFALSE 33817
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33779: LD_ADDR_VAR 0 13
33783: PUSH
33784: LD_VAR 0 13
33788: PPUSH
33789: LD_VAR 0 13
33793: PUSH
33794: LD_INT 1
33796: PLUS
33797: PPUSH
33798: LD_VAR 0 11
33802: PUSH
33803: LD_VAR 0 12
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PPUSH
33812: CALL_OW 2
33816: ST_TO_ADDR
// end ;
33817: GO 33725
33819: POP
33820: POP
33821: GO 33705
33823: POP
33824: POP
// if not list then
33825: LD_VAR 0 13
33829: NOT
33830: IFFALSE 33834
// exit ;
33832: GO 33905
// for i in list do
33834: LD_ADDR_VAR 0 6
33838: PUSH
33839: LD_VAR 0 13
33843: PUSH
33844: FOR_IN
33845: IFFALSE 33903
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33847: LD_VAR 0 1
33851: PPUSH
33852: LD_STRING M
33854: PUSH
33855: LD_VAR 0 6
33859: PUSH
33860: LD_INT 1
33862: ARRAY
33863: PUSH
33864: LD_VAR 0 6
33868: PUSH
33869: LD_INT 2
33871: ARRAY
33872: PUSH
33873: LD_INT 0
33875: PUSH
33876: LD_INT 0
33878: PUSH
33879: LD_INT 0
33881: PUSH
33882: LD_INT 0
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: PUSH
33894: EMPTY
33895: LIST
33896: PPUSH
33897: CALL_OW 447
33901: GO 33844
33903: POP
33904: POP
// end ;
33905: LD_VAR 0 5
33909: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
33910: LD_INT 0
33912: PPUSH
33913: PPUSH
33914: PPUSH
33915: PPUSH
33916: PPUSH
33917: PPUSH
33918: PPUSH
33919: PPUSH
33920: PPUSH
33921: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
33922: LD_VAR 0 1
33926: PPUSH
33927: CALL_OW 302
33931: NOT
33932: PUSH
33933: LD_VAR 0 2
33937: PPUSH
33938: LD_VAR 0 3
33942: PPUSH
33943: CALL_OW 488
33947: NOT
33948: OR
33949: PUSH
33950: LD_VAR 0 4
33954: NOT
33955: OR
33956: IFFALSE 33960
// exit ;
33958: GO 34473
// list := [ ] ;
33960: LD_ADDR_VAR 0 13
33964: PUSH
33965: EMPTY
33966: ST_TO_ADDR
// if x - r < 0 then
33967: LD_VAR 0 2
33971: PUSH
33972: LD_VAR 0 4
33976: MINUS
33977: PUSH
33978: LD_INT 0
33980: LESS
33981: IFFALSE 33993
// min_x := 0 else
33983: LD_ADDR_VAR 0 7
33987: PUSH
33988: LD_INT 0
33990: ST_TO_ADDR
33991: GO 34009
// min_x := x - r ;
33993: LD_ADDR_VAR 0 7
33997: PUSH
33998: LD_VAR 0 2
34002: PUSH
34003: LD_VAR 0 4
34007: MINUS
34008: ST_TO_ADDR
// if y - r < 0 then
34009: LD_VAR 0 3
34013: PUSH
34014: LD_VAR 0 4
34018: MINUS
34019: PUSH
34020: LD_INT 0
34022: LESS
34023: IFFALSE 34035
// min_y := 0 else
34025: LD_ADDR_VAR 0 8
34029: PUSH
34030: LD_INT 0
34032: ST_TO_ADDR
34033: GO 34051
// min_y := y - r ;
34035: LD_ADDR_VAR 0 8
34039: PUSH
34040: LD_VAR 0 3
34044: PUSH
34045: LD_VAR 0 4
34049: MINUS
34050: ST_TO_ADDR
// max_x := x + r ;
34051: LD_ADDR_VAR 0 9
34055: PUSH
34056: LD_VAR 0 2
34060: PUSH
34061: LD_VAR 0 4
34065: PLUS
34066: ST_TO_ADDR
// max_y := y + r ;
34067: LD_ADDR_VAR 0 10
34071: PUSH
34072: LD_VAR 0 3
34076: PUSH
34077: LD_VAR 0 4
34081: PLUS
34082: ST_TO_ADDR
// for _x = min_x to max_x do
34083: LD_ADDR_VAR 0 11
34087: PUSH
34088: DOUBLE
34089: LD_VAR 0 7
34093: DEC
34094: ST_TO_ADDR
34095: LD_VAR 0 9
34099: PUSH
34100: FOR_TO
34101: IFFALSE 34218
// for _y = min_y to max_y do
34103: LD_ADDR_VAR 0 12
34107: PUSH
34108: DOUBLE
34109: LD_VAR 0 8
34113: DEC
34114: ST_TO_ADDR
34115: LD_VAR 0 10
34119: PUSH
34120: FOR_TO
34121: IFFALSE 34214
// begin if not ValidHex ( _x , _y ) then
34123: LD_VAR 0 11
34127: PPUSH
34128: LD_VAR 0 12
34132: PPUSH
34133: CALL_OW 488
34137: NOT
34138: IFFALSE 34142
// continue ;
34140: GO 34120
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34142: LD_VAR 0 11
34146: PPUSH
34147: LD_VAR 0 12
34151: PPUSH
34152: CALL_OW 351
34156: PUSH
34157: LD_VAR 0 11
34161: PPUSH
34162: LD_VAR 0 12
34166: PPUSH
34167: CALL_OW 554
34171: AND
34172: IFFALSE 34212
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34174: LD_ADDR_VAR 0 13
34178: PUSH
34179: LD_VAR 0 13
34183: PPUSH
34184: LD_VAR 0 13
34188: PUSH
34189: LD_INT 1
34191: PLUS
34192: PPUSH
34193: LD_VAR 0 11
34197: PUSH
34198: LD_VAR 0 12
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PPUSH
34207: CALL_OW 2
34211: ST_TO_ADDR
// end ;
34212: GO 34120
34214: POP
34215: POP
34216: GO 34100
34218: POP
34219: POP
// if not list then
34220: LD_VAR 0 13
34224: NOT
34225: IFFALSE 34229
// exit ;
34227: GO 34473
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
34229: LD_ADDR_VAR 0 13
34233: PUSH
34234: LD_VAR 0 1
34238: PPUSH
34239: LD_VAR 0 13
34243: PPUSH
34244: LD_INT 1
34246: PPUSH
34247: LD_INT 1
34249: PPUSH
34250: CALL 43086 0 4
34254: ST_TO_ADDR
// ComStop ( flame ) ;
34255: LD_VAR 0 1
34259: PPUSH
34260: CALL_OW 141
// for i in list do
34264: LD_ADDR_VAR 0 6
34268: PUSH
34269: LD_VAR 0 13
34273: PUSH
34274: FOR_IN
34275: IFFALSE 34306
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
34277: LD_VAR 0 1
34281: PPUSH
34282: LD_VAR 0 6
34286: PUSH
34287: LD_INT 1
34289: ARRAY
34290: PPUSH
34291: LD_VAR 0 6
34295: PUSH
34296: LD_INT 2
34298: ARRAY
34299: PPUSH
34300: CALL_OW 176
34304: GO 34274
34306: POP
34307: POP
// repeat wait ( 0 0$1 ) ;
34308: LD_INT 35
34310: PPUSH
34311: CALL_OW 67
// task := GetTaskList ( flame ) ;
34315: LD_ADDR_VAR 0 14
34319: PUSH
34320: LD_VAR 0 1
34324: PPUSH
34325: CALL_OW 437
34329: ST_TO_ADDR
// if not task then
34330: LD_VAR 0 14
34334: NOT
34335: IFFALSE 34339
// exit ;
34337: GO 34473
// if task [ 1 ] [ 1 ] <> | then
34339: LD_VAR 0 14
34343: PUSH
34344: LD_INT 1
34346: ARRAY
34347: PUSH
34348: LD_INT 1
34350: ARRAY
34351: PUSH
34352: LD_STRING |
34354: NONEQUAL
34355: IFFALSE 34359
// exit ;
34357: GO 34473
// _x := task [ 1 ] [ 2 ] ;
34359: LD_ADDR_VAR 0 11
34363: PUSH
34364: LD_VAR 0 14
34368: PUSH
34369: LD_INT 1
34371: ARRAY
34372: PUSH
34373: LD_INT 2
34375: ARRAY
34376: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
34377: LD_ADDR_VAR 0 12
34381: PUSH
34382: LD_VAR 0 14
34386: PUSH
34387: LD_INT 1
34389: ARRAY
34390: PUSH
34391: LD_INT 3
34393: ARRAY
34394: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
34395: LD_VAR 0 11
34399: PPUSH
34400: LD_VAR 0 12
34404: PPUSH
34405: CALL_OW 351
34409: NOT
34410: PUSH
34411: LD_VAR 0 11
34415: PPUSH
34416: LD_VAR 0 12
34420: PPUSH
34421: CALL_OW 554
34425: NOT
34426: OR
34427: IFFALSE 34461
// begin task := Delete ( task , 1 ) ;
34429: LD_ADDR_VAR 0 14
34433: PUSH
34434: LD_VAR 0 14
34438: PPUSH
34439: LD_INT 1
34441: PPUSH
34442: CALL_OW 3
34446: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
34447: LD_VAR 0 1
34451: PPUSH
34452: LD_VAR 0 14
34456: PPUSH
34457: CALL_OW 446
// end ; until not HasTask ( flame ) ;
34461: LD_VAR 0 1
34465: PPUSH
34466: CALL_OW 314
34470: NOT
34471: IFFALSE 34308
// end ;
34473: LD_VAR 0 5
34477: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34478: LD_EXP 99
34482: NOT
34483: IFFALSE 34533
34485: GO 34487
34487: DISABLE
// begin initHack := true ;
34488: LD_ADDR_EXP 99
34492: PUSH
34493: LD_INT 1
34495: ST_TO_ADDR
// hackTanks := [ ] ;
34496: LD_ADDR_EXP 100
34500: PUSH
34501: EMPTY
34502: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34503: LD_ADDR_EXP 101
34507: PUSH
34508: EMPTY
34509: ST_TO_ADDR
// hackLimit := 3 ;
34510: LD_ADDR_EXP 102
34514: PUSH
34515: LD_INT 3
34517: ST_TO_ADDR
// hackDist := 12 ;
34518: LD_ADDR_EXP 103
34522: PUSH
34523: LD_INT 12
34525: ST_TO_ADDR
// hackCounter := [ ] ;
34526: LD_ADDR_EXP 104
34530: PUSH
34531: EMPTY
34532: ST_TO_ADDR
// end ;
34533: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34534: LD_EXP 99
34538: PUSH
34539: LD_INT 34
34541: PUSH
34542: LD_INT 99
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PPUSH
34549: CALL_OW 69
34553: AND
34554: IFFALSE 34807
34556: GO 34558
34558: DISABLE
34559: LD_INT 0
34561: PPUSH
34562: PPUSH
// begin enable ;
34563: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34564: LD_ADDR_VAR 0 1
34568: PUSH
34569: LD_INT 34
34571: PUSH
34572: LD_INT 99
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PPUSH
34579: CALL_OW 69
34583: PUSH
34584: FOR_IN
34585: IFFALSE 34805
// begin if not i in hackTanks then
34587: LD_VAR 0 1
34591: PUSH
34592: LD_EXP 100
34596: IN
34597: NOT
34598: IFFALSE 34681
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34600: LD_ADDR_EXP 100
34604: PUSH
34605: LD_EXP 100
34609: PPUSH
34610: LD_EXP 100
34614: PUSH
34615: LD_INT 1
34617: PLUS
34618: PPUSH
34619: LD_VAR 0 1
34623: PPUSH
34624: CALL_OW 1
34628: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34629: LD_ADDR_EXP 101
34633: PUSH
34634: LD_EXP 101
34638: PPUSH
34639: LD_EXP 101
34643: PUSH
34644: LD_INT 1
34646: PLUS
34647: PPUSH
34648: EMPTY
34649: PPUSH
34650: CALL_OW 1
34654: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34655: LD_ADDR_EXP 104
34659: PUSH
34660: LD_EXP 104
34664: PPUSH
34665: LD_EXP 104
34669: PUSH
34670: LD_INT 1
34672: PLUS
34673: PPUSH
34674: EMPTY
34675: PPUSH
34676: CALL_OW 1
34680: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34681: LD_VAR 0 1
34685: PPUSH
34686: CALL_OW 302
34690: NOT
34691: IFFALSE 34704
// begin HackUnlinkAll ( i ) ;
34693: LD_VAR 0 1
34697: PPUSH
34698: CALL 34810 0 1
// continue ;
34702: GO 34584
// end ; HackCheckCapturedStatus ( i ) ;
34704: LD_VAR 0 1
34708: PPUSH
34709: CALL 35253 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34713: LD_ADDR_VAR 0 2
34717: PUSH
34718: LD_INT 81
34720: PUSH
34721: LD_VAR 0 1
34725: PPUSH
34726: CALL_OW 255
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 33
34737: PUSH
34738: LD_INT 3
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 91
34747: PUSH
34748: LD_VAR 0 1
34752: PUSH
34753: LD_EXP 103
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 50
34765: PUSH
34766: EMPTY
34767: LIST
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: PPUSH
34775: CALL_OW 69
34779: ST_TO_ADDR
// if not tmp then
34780: LD_VAR 0 2
34784: NOT
34785: IFFALSE 34789
// continue ;
34787: GO 34584
// HackLink ( i , tmp ) ;
34789: LD_VAR 0 1
34793: PPUSH
34794: LD_VAR 0 2
34798: PPUSH
34799: CALL 34946 0 2
// end ;
34803: GO 34584
34805: POP
34806: POP
// end ;
34807: PPOPN 2
34809: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34810: LD_INT 0
34812: PPUSH
34813: PPUSH
34814: PPUSH
// if not hack in hackTanks then
34815: LD_VAR 0 1
34819: PUSH
34820: LD_EXP 100
34824: IN
34825: NOT
34826: IFFALSE 34830
// exit ;
34828: GO 34941
// index := GetElementIndex ( hackTanks , hack ) ;
34830: LD_ADDR_VAR 0 4
34834: PUSH
34835: LD_EXP 100
34839: PPUSH
34840: LD_VAR 0 1
34844: PPUSH
34845: CALL 42383 0 2
34849: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34850: LD_EXP 101
34854: PUSH
34855: LD_VAR 0 4
34859: ARRAY
34860: IFFALSE 34941
// begin for i in hackTanksCaptured [ index ] do
34862: LD_ADDR_VAR 0 3
34866: PUSH
34867: LD_EXP 101
34871: PUSH
34872: LD_VAR 0 4
34876: ARRAY
34877: PUSH
34878: FOR_IN
34879: IFFALSE 34905
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34881: LD_VAR 0 3
34885: PUSH
34886: LD_INT 1
34888: ARRAY
34889: PPUSH
34890: LD_VAR 0 3
34894: PUSH
34895: LD_INT 2
34897: ARRAY
34898: PPUSH
34899: CALL_OW 235
34903: GO 34878
34905: POP
34906: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34907: LD_ADDR_EXP 101
34911: PUSH
34912: LD_EXP 101
34916: PPUSH
34917: LD_VAR 0 4
34921: PPUSH
34922: EMPTY
34923: PPUSH
34924: CALL_OW 1
34928: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34929: LD_VAR 0 1
34933: PPUSH
34934: LD_INT 0
34936: PPUSH
34937: CALL_OW 505
// end ; end ;
34941: LD_VAR 0 2
34945: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34946: LD_INT 0
34948: PPUSH
34949: PPUSH
34950: PPUSH
// if not hack in hackTanks or not vehicles then
34951: LD_VAR 0 1
34955: PUSH
34956: LD_EXP 100
34960: IN
34961: NOT
34962: PUSH
34963: LD_VAR 0 2
34967: NOT
34968: OR
34969: IFFALSE 34973
// exit ;
34971: GO 35248
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34973: LD_ADDR_VAR 0 2
34977: PUSH
34978: LD_VAR 0 1
34982: PPUSH
34983: LD_VAR 0 2
34987: PPUSH
34988: LD_INT 1
34990: PPUSH
34991: LD_INT 1
34993: PPUSH
34994: CALL 43033 0 4
34998: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34999: LD_ADDR_VAR 0 5
35003: PUSH
35004: LD_EXP 100
35008: PPUSH
35009: LD_VAR 0 1
35013: PPUSH
35014: CALL 42383 0 2
35018: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35019: LD_EXP 101
35023: PUSH
35024: LD_VAR 0 5
35028: ARRAY
35029: PUSH
35030: LD_EXP 102
35034: LESS
35035: IFFALSE 35224
// begin for i := 1 to vehicles do
35037: LD_ADDR_VAR 0 4
35041: PUSH
35042: DOUBLE
35043: LD_INT 1
35045: DEC
35046: ST_TO_ADDR
35047: LD_VAR 0 2
35051: PUSH
35052: FOR_TO
35053: IFFALSE 35222
// begin if hackTanksCaptured [ index ] = hackLimit then
35055: LD_EXP 101
35059: PUSH
35060: LD_VAR 0 5
35064: ARRAY
35065: PUSH
35066: LD_EXP 102
35070: EQUAL
35071: IFFALSE 35075
// break ;
35073: GO 35222
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35075: LD_ADDR_EXP 104
35079: PUSH
35080: LD_EXP 104
35084: PPUSH
35085: LD_VAR 0 5
35089: PPUSH
35090: LD_EXP 104
35094: PUSH
35095: LD_VAR 0 5
35099: ARRAY
35100: PUSH
35101: LD_INT 1
35103: PLUS
35104: PPUSH
35105: CALL_OW 1
35109: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35110: LD_ADDR_EXP 101
35114: PUSH
35115: LD_EXP 101
35119: PPUSH
35120: LD_VAR 0 5
35124: PUSH
35125: LD_EXP 101
35129: PUSH
35130: LD_VAR 0 5
35134: ARRAY
35135: PUSH
35136: LD_INT 1
35138: PLUS
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PPUSH
35144: LD_VAR 0 2
35148: PUSH
35149: LD_VAR 0 4
35153: ARRAY
35154: PUSH
35155: LD_VAR 0 2
35159: PUSH
35160: LD_VAR 0 4
35164: ARRAY
35165: PPUSH
35166: CALL_OW 255
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PPUSH
35175: CALL 42598 0 3
35179: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35180: LD_VAR 0 2
35184: PUSH
35185: LD_VAR 0 4
35189: ARRAY
35190: PPUSH
35191: LD_VAR 0 1
35195: PPUSH
35196: CALL_OW 255
35200: PPUSH
35201: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35205: LD_VAR 0 2
35209: PUSH
35210: LD_VAR 0 4
35214: ARRAY
35215: PPUSH
35216: CALL_OW 141
// end ;
35220: GO 35052
35222: POP
35223: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35224: LD_VAR 0 1
35228: PPUSH
35229: LD_EXP 101
35233: PUSH
35234: LD_VAR 0 5
35238: ARRAY
35239: PUSH
35240: LD_INT 0
35242: PLUS
35243: PPUSH
35244: CALL_OW 505
// end ;
35248: LD_VAR 0 3
35252: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35253: LD_INT 0
35255: PPUSH
35256: PPUSH
35257: PPUSH
35258: PPUSH
// if not hack in hackTanks then
35259: LD_VAR 0 1
35263: PUSH
35264: LD_EXP 100
35268: IN
35269: NOT
35270: IFFALSE 35274
// exit ;
35272: GO 35514
// index := GetElementIndex ( hackTanks , hack ) ;
35274: LD_ADDR_VAR 0 4
35278: PUSH
35279: LD_EXP 100
35283: PPUSH
35284: LD_VAR 0 1
35288: PPUSH
35289: CALL 42383 0 2
35293: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35294: LD_ADDR_VAR 0 3
35298: PUSH
35299: DOUBLE
35300: LD_EXP 101
35304: PUSH
35305: LD_VAR 0 4
35309: ARRAY
35310: INC
35311: ST_TO_ADDR
35312: LD_INT 1
35314: PUSH
35315: FOR_DOWNTO
35316: IFFALSE 35488
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35318: LD_ADDR_VAR 0 5
35322: PUSH
35323: LD_EXP 101
35327: PUSH
35328: LD_VAR 0 4
35332: ARRAY
35333: PUSH
35334: LD_VAR 0 3
35338: ARRAY
35339: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35340: LD_VAR 0 5
35344: PUSH
35345: LD_INT 1
35347: ARRAY
35348: PPUSH
35349: CALL_OW 302
35353: NOT
35354: PUSH
35355: LD_VAR 0 5
35359: PUSH
35360: LD_INT 1
35362: ARRAY
35363: PPUSH
35364: CALL_OW 255
35368: PUSH
35369: LD_VAR 0 1
35373: PPUSH
35374: CALL_OW 255
35378: NONEQUAL
35379: OR
35380: IFFALSE 35486
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35382: LD_VAR 0 5
35386: PUSH
35387: LD_INT 1
35389: ARRAY
35390: PPUSH
35391: CALL_OW 305
35395: PUSH
35396: LD_VAR 0 5
35400: PUSH
35401: LD_INT 1
35403: ARRAY
35404: PPUSH
35405: CALL_OW 255
35409: PUSH
35410: LD_VAR 0 1
35414: PPUSH
35415: CALL_OW 255
35419: EQUAL
35420: AND
35421: IFFALSE 35445
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35423: LD_VAR 0 5
35427: PUSH
35428: LD_INT 1
35430: ARRAY
35431: PPUSH
35432: LD_VAR 0 5
35436: PUSH
35437: LD_INT 2
35439: ARRAY
35440: PPUSH
35441: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35445: LD_ADDR_EXP 101
35449: PUSH
35450: LD_EXP 101
35454: PPUSH
35455: LD_VAR 0 4
35459: PPUSH
35460: LD_EXP 101
35464: PUSH
35465: LD_VAR 0 4
35469: ARRAY
35470: PPUSH
35471: LD_VAR 0 3
35475: PPUSH
35476: CALL_OW 3
35480: PPUSH
35481: CALL_OW 1
35485: ST_TO_ADDR
// end ; end ;
35486: GO 35315
35488: POP
35489: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35490: LD_VAR 0 1
35494: PPUSH
35495: LD_EXP 101
35499: PUSH
35500: LD_VAR 0 4
35504: ARRAY
35505: PUSH
35506: LD_INT 0
35508: PLUS
35509: PPUSH
35510: CALL_OW 505
// end ;
35514: LD_VAR 0 2
35518: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35519: LD_INT 0
35521: PPUSH
35522: PPUSH
35523: PPUSH
35524: PPUSH
// if not hack in hackTanks then
35525: LD_VAR 0 1
35529: PUSH
35530: LD_EXP 100
35534: IN
35535: NOT
35536: IFFALSE 35540
// exit ;
35538: GO 35625
// index := GetElementIndex ( hackTanks , hack ) ;
35540: LD_ADDR_VAR 0 5
35544: PUSH
35545: LD_EXP 100
35549: PPUSH
35550: LD_VAR 0 1
35554: PPUSH
35555: CALL 42383 0 2
35559: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35560: LD_ADDR_VAR 0 4
35564: PUSH
35565: DOUBLE
35566: LD_INT 1
35568: DEC
35569: ST_TO_ADDR
35570: LD_EXP 101
35574: PUSH
35575: LD_VAR 0 5
35579: ARRAY
35580: PUSH
35581: FOR_TO
35582: IFFALSE 35623
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35584: LD_EXP 101
35588: PUSH
35589: LD_VAR 0 5
35593: ARRAY
35594: PUSH
35595: LD_VAR 0 4
35599: ARRAY
35600: PUSH
35601: LD_INT 1
35603: ARRAY
35604: PUSH
35605: LD_VAR 0 2
35609: EQUAL
35610: IFFALSE 35621
// KillUnit ( vehicle ) ;
35612: LD_VAR 0 2
35616: PPUSH
35617: CALL_OW 66
35621: GO 35581
35623: POP
35624: POP
// end ;
35625: LD_VAR 0 3
35629: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35630: LD_EXP 105
35634: NOT
35635: IFFALSE 35670
35637: GO 35639
35639: DISABLE
// begin initMiner := true ;
35640: LD_ADDR_EXP 105
35644: PUSH
35645: LD_INT 1
35647: ST_TO_ADDR
// minersList := [ ] ;
35648: LD_ADDR_EXP 106
35652: PUSH
35653: EMPTY
35654: ST_TO_ADDR
// minerMinesList := [ ] ;
35655: LD_ADDR_EXP 107
35659: PUSH
35660: EMPTY
35661: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35662: LD_ADDR_EXP 108
35666: PUSH
35667: LD_INT 5
35669: ST_TO_ADDR
// end ;
35670: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35671: LD_EXP 105
35675: PUSH
35676: LD_INT 34
35678: PUSH
35679: LD_INT 81
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PPUSH
35686: CALL_OW 69
35690: AND
35691: IFFALSE 36152
35693: GO 35695
35695: DISABLE
35696: LD_INT 0
35698: PPUSH
35699: PPUSH
35700: PPUSH
35701: PPUSH
// begin enable ;
35702: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35703: LD_ADDR_VAR 0 1
35707: PUSH
35708: LD_INT 34
35710: PUSH
35711: LD_INT 81
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PPUSH
35718: CALL_OW 69
35722: PUSH
35723: FOR_IN
35724: IFFALSE 35796
// begin if not i in minersList then
35726: LD_VAR 0 1
35730: PUSH
35731: LD_EXP 106
35735: IN
35736: NOT
35737: IFFALSE 35794
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35739: LD_ADDR_EXP 106
35743: PUSH
35744: LD_EXP 106
35748: PPUSH
35749: LD_EXP 106
35753: PUSH
35754: LD_INT 1
35756: PLUS
35757: PPUSH
35758: LD_VAR 0 1
35762: PPUSH
35763: CALL_OW 1
35767: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35768: LD_ADDR_EXP 107
35772: PUSH
35773: LD_EXP 107
35777: PPUSH
35778: LD_EXP 107
35782: PUSH
35783: LD_INT 1
35785: PLUS
35786: PPUSH
35787: EMPTY
35788: PPUSH
35789: CALL_OW 1
35793: ST_TO_ADDR
// end end ;
35794: GO 35723
35796: POP
35797: POP
// for i := minerMinesList downto 1 do
35798: LD_ADDR_VAR 0 1
35802: PUSH
35803: DOUBLE
35804: LD_EXP 107
35808: INC
35809: ST_TO_ADDR
35810: LD_INT 1
35812: PUSH
35813: FOR_DOWNTO
35814: IFFALSE 36150
// begin if IsLive ( minersList [ i ] ) then
35816: LD_EXP 106
35820: PUSH
35821: LD_VAR 0 1
35825: ARRAY
35826: PPUSH
35827: CALL_OW 300
35831: IFFALSE 35859
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35833: LD_EXP 106
35837: PUSH
35838: LD_VAR 0 1
35842: ARRAY
35843: PPUSH
35844: LD_EXP 107
35848: PUSH
35849: LD_VAR 0 1
35853: ARRAY
35854: PPUSH
35855: CALL_OW 505
// if not minerMinesList [ i ] then
35859: LD_EXP 107
35863: PUSH
35864: LD_VAR 0 1
35868: ARRAY
35869: NOT
35870: IFFALSE 35874
// continue ;
35872: GO 35813
// for j := minerMinesList [ i ] downto 1 do
35874: LD_ADDR_VAR 0 2
35878: PUSH
35879: DOUBLE
35880: LD_EXP 107
35884: PUSH
35885: LD_VAR 0 1
35889: ARRAY
35890: INC
35891: ST_TO_ADDR
35892: LD_INT 1
35894: PUSH
35895: FOR_DOWNTO
35896: IFFALSE 36146
// begin side := GetSide ( minersList [ i ] ) ;
35898: LD_ADDR_VAR 0 3
35902: PUSH
35903: LD_EXP 106
35907: PUSH
35908: LD_VAR 0 1
35912: ARRAY
35913: PPUSH
35914: CALL_OW 255
35918: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35919: LD_ADDR_VAR 0 4
35923: PUSH
35924: LD_EXP 107
35928: PUSH
35929: LD_VAR 0 1
35933: ARRAY
35934: PUSH
35935: LD_VAR 0 2
35939: ARRAY
35940: PUSH
35941: LD_INT 1
35943: ARRAY
35944: PPUSH
35945: LD_EXP 107
35949: PUSH
35950: LD_VAR 0 1
35954: ARRAY
35955: PUSH
35956: LD_VAR 0 2
35960: ARRAY
35961: PUSH
35962: LD_INT 2
35964: ARRAY
35965: PPUSH
35966: CALL_OW 428
35970: ST_TO_ADDR
// if not tmp then
35971: LD_VAR 0 4
35975: NOT
35976: IFFALSE 35980
// continue ;
35978: GO 35895
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35980: LD_VAR 0 4
35984: PUSH
35985: LD_INT 81
35987: PUSH
35988: LD_VAR 0 3
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PPUSH
35997: CALL_OW 69
36001: IN
36002: PUSH
36003: LD_EXP 107
36007: PUSH
36008: LD_VAR 0 1
36012: ARRAY
36013: PUSH
36014: LD_VAR 0 2
36018: ARRAY
36019: PUSH
36020: LD_INT 1
36022: ARRAY
36023: PPUSH
36024: LD_EXP 107
36028: PUSH
36029: LD_VAR 0 1
36033: ARRAY
36034: PUSH
36035: LD_VAR 0 2
36039: ARRAY
36040: PUSH
36041: LD_INT 2
36043: ARRAY
36044: PPUSH
36045: CALL_OW 458
36049: AND
36050: IFFALSE 36144
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36052: LD_EXP 107
36056: PUSH
36057: LD_VAR 0 1
36061: ARRAY
36062: PUSH
36063: LD_VAR 0 2
36067: ARRAY
36068: PUSH
36069: LD_INT 1
36071: ARRAY
36072: PPUSH
36073: LD_EXP 107
36077: PUSH
36078: LD_VAR 0 1
36082: ARRAY
36083: PUSH
36084: LD_VAR 0 2
36088: ARRAY
36089: PUSH
36090: LD_INT 2
36092: ARRAY
36093: PPUSH
36094: LD_VAR 0 3
36098: PPUSH
36099: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36103: LD_ADDR_EXP 107
36107: PUSH
36108: LD_EXP 107
36112: PPUSH
36113: LD_VAR 0 1
36117: PPUSH
36118: LD_EXP 107
36122: PUSH
36123: LD_VAR 0 1
36127: ARRAY
36128: PPUSH
36129: LD_VAR 0 2
36133: PPUSH
36134: CALL_OW 3
36138: PPUSH
36139: CALL_OW 1
36143: ST_TO_ADDR
// end ; end ;
36144: GO 35895
36146: POP
36147: POP
// end ;
36148: GO 35813
36150: POP
36151: POP
// end ;
36152: PPOPN 4
36154: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36155: LD_INT 0
36157: PPUSH
36158: PPUSH
// result := false ;
36159: LD_ADDR_VAR 0 4
36163: PUSH
36164: LD_INT 0
36166: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36167: LD_VAR 0 1
36171: PPUSH
36172: CALL_OW 264
36176: PUSH
36177: LD_INT 81
36179: EQUAL
36180: NOT
36181: IFFALSE 36185
// exit ;
36183: GO 36425
// index := GetElementIndex ( minersList , unit ) ;
36185: LD_ADDR_VAR 0 5
36189: PUSH
36190: LD_EXP 106
36194: PPUSH
36195: LD_VAR 0 1
36199: PPUSH
36200: CALL 42383 0 2
36204: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36205: LD_EXP 107
36209: PUSH
36210: LD_VAR 0 5
36214: ARRAY
36215: PUSH
36216: LD_EXP 108
36220: GREATEREQUAL
36221: IFFALSE 36225
// exit ;
36223: GO 36425
// ComMoveXY ( unit , x , y ) ;
36225: LD_VAR 0 1
36229: PPUSH
36230: LD_VAR 0 2
36234: PPUSH
36235: LD_VAR 0 3
36239: PPUSH
36240: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36244: LD_INT 35
36246: PPUSH
36247: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36251: LD_VAR 0 1
36255: PPUSH
36256: LD_VAR 0 2
36260: PPUSH
36261: LD_VAR 0 3
36265: PPUSH
36266: CALL 74135 0 3
36270: NOT
36271: PUSH
36272: LD_VAR 0 1
36276: PPUSH
36277: CALL_OW 314
36281: AND
36282: IFFALSE 36286
// exit ;
36284: GO 36425
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36286: LD_VAR 0 2
36290: PPUSH
36291: LD_VAR 0 3
36295: PPUSH
36296: CALL_OW 428
36300: PUSH
36301: LD_VAR 0 1
36305: EQUAL
36306: PUSH
36307: LD_VAR 0 1
36311: PPUSH
36312: CALL_OW 314
36316: NOT
36317: AND
36318: IFFALSE 36244
// PlaySoundXY ( x , y , PlantMine ) ;
36320: LD_VAR 0 2
36324: PPUSH
36325: LD_VAR 0 3
36329: PPUSH
36330: LD_STRING PlantMine
36332: PPUSH
36333: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36337: LD_VAR 0 2
36341: PPUSH
36342: LD_VAR 0 3
36346: PPUSH
36347: LD_VAR 0 1
36351: PPUSH
36352: CALL_OW 255
36356: PPUSH
36357: LD_INT 0
36359: PPUSH
36360: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36364: LD_ADDR_EXP 107
36368: PUSH
36369: LD_EXP 107
36373: PPUSH
36374: LD_VAR 0 5
36378: PUSH
36379: LD_EXP 107
36383: PUSH
36384: LD_VAR 0 5
36388: ARRAY
36389: PUSH
36390: LD_INT 1
36392: PLUS
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PPUSH
36398: LD_VAR 0 2
36402: PUSH
36403: LD_VAR 0 3
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PPUSH
36412: CALL 42598 0 3
36416: ST_TO_ADDR
// result := true ;
36417: LD_ADDR_VAR 0 4
36421: PUSH
36422: LD_INT 1
36424: ST_TO_ADDR
// end ;
36425: LD_VAR 0 4
36429: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36430: LD_INT 0
36432: PPUSH
36433: PPUSH
36434: PPUSH
// if not unit in minersList then
36435: LD_VAR 0 1
36439: PUSH
36440: LD_EXP 106
36444: IN
36445: NOT
36446: IFFALSE 36450
// exit ;
36448: GO 36842
// index := GetElementIndex ( minersList , unit ) ;
36450: LD_ADDR_VAR 0 6
36454: PUSH
36455: LD_EXP 106
36459: PPUSH
36460: LD_VAR 0 1
36464: PPUSH
36465: CALL 42383 0 2
36469: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36470: LD_ADDR_VAR 0 5
36474: PUSH
36475: DOUBLE
36476: LD_EXP 107
36480: PUSH
36481: LD_VAR 0 6
36485: ARRAY
36486: INC
36487: ST_TO_ADDR
36488: LD_INT 1
36490: PUSH
36491: FOR_DOWNTO
36492: IFFALSE 36653
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36494: LD_EXP 107
36498: PUSH
36499: LD_VAR 0 6
36503: ARRAY
36504: PUSH
36505: LD_VAR 0 5
36509: ARRAY
36510: PUSH
36511: LD_INT 1
36513: ARRAY
36514: PUSH
36515: LD_VAR 0 2
36519: EQUAL
36520: PUSH
36521: LD_EXP 107
36525: PUSH
36526: LD_VAR 0 6
36530: ARRAY
36531: PUSH
36532: LD_VAR 0 5
36536: ARRAY
36537: PUSH
36538: LD_INT 2
36540: ARRAY
36541: PUSH
36542: LD_VAR 0 3
36546: EQUAL
36547: AND
36548: IFFALSE 36651
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36550: LD_EXP 107
36554: PUSH
36555: LD_VAR 0 6
36559: ARRAY
36560: PUSH
36561: LD_VAR 0 5
36565: ARRAY
36566: PUSH
36567: LD_INT 1
36569: ARRAY
36570: PPUSH
36571: LD_EXP 107
36575: PUSH
36576: LD_VAR 0 6
36580: ARRAY
36581: PUSH
36582: LD_VAR 0 5
36586: ARRAY
36587: PUSH
36588: LD_INT 2
36590: ARRAY
36591: PPUSH
36592: LD_VAR 0 1
36596: PPUSH
36597: CALL_OW 255
36601: PPUSH
36602: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36606: LD_ADDR_EXP 107
36610: PUSH
36611: LD_EXP 107
36615: PPUSH
36616: LD_VAR 0 6
36620: PPUSH
36621: LD_EXP 107
36625: PUSH
36626: LD_VAR 0 6
36630: ARRAY
36631: PPUSH
36632: LD_VAR 0 5
36636: PPUSH
36637: CALL_OW 3
36641: PPUSH
36642: CALL_OW 1
36646: ST_TO_ADDR
// exit ;
36647: POP
36648: POP
36649: GO 36842
// end ; end ;
36651: GO 36491
36653: POP
36654: POP
// for i := minerMinesList [ index ] downto 1 do
36655: LD_ADDR_VAR 0 5
36659: PUSH
36660: DOUBLE
36661: LD_EXP 107
36665: PUSH
36666: LD_VAR 0 6
36670: ARRAY
36671: INC
36672: ST_TO_ADDR
36673: LD_INT 1
36675: PUSH
36676: FOR_DOWNTO
36677: IFFALSE 36840
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36679: LD_EXP 107
36683: PUSH
36684: LD_VAR 0 6
36688: ARRAY
36689: PUSH
36690: LD_VAR 0 5
36694: ARRAY
36695: PUSH
36696: LD_INT 1
36698: ARRAY
36699: PPUSH
36700: LD_EXP 107
36704: PUSH
36705: LD_VAR 0 6
36709: ARRAY
36710: PUSH
36711: LD_VAR 0 5
36715: ARRAY
36716: PUSH
36717: LD_INT 2
36719: ARRAY
36720: PPUSH
36721: LD_VAR 0 2
36725: PPUSH
36726: LD_VAR 0 3
36730: PPUSH
36731: CALL_OW 298
36735: PUSH
36736: LD_INT 6
36738: LESS
36739: IFFALSE 36838
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36741: LD_EXP 107
36745: PUSH
36746: LD_VAR 0 6
36750: ARRAY
36751: PUSH
36752: LD_VAR 0 5
36756: ARRAY
36757: PUSH
36758: LD_INT 1
36760: ARRAY
36761: PPUSH
36762: LD_EXP 107
36766: PUSH
36767: LD_VAR 0 6
36771: ARRAY
36772: PUSH
36773: LD_VAR 0 5
36777: ARRAY
36778: PUSH
36779: LD_INT 2
36781: ARRAY
36782: PPUSH
36783: LD_VAR 0 1
36787: PPUSH
36788: CALL_OW 255
36792: PPUSH
36793: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36797: LD_ADDR_EXP 107
36801: PUSH
36802: LD_EXP 107
36806: PPUSH
36807: LD_VAR 0 6
36811: PPUSH
36812: LD_EXP 107
36816: PUSH
36817: LD_VAR 0 6
36821: ARRAY
36822: PPUSH
36823: LD_VAR 0 5
36827: PPUSH
36828: CALL_OW 3
36832: PPUSH
36833: CALL_OW 1
36837: ST_TO_ADDR
// end ; end ;
36838: GO 36676
36840: POP
36841: POP
// end ;
36842: LD_VAR 0 4
36846: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36847: LD_INT 0
36849: PPUSH
36850: PPUSH
36851: PPUSH
36852: PPUSH
36853: PPUSH
36854: PPUSH
36855: PPUSH
36856: PPUSH
36857: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36858: LD_VAR 0 1
36862: PPUSH
36863: CALL_OW 264
36867: PUSH
36868: LD_INT 81
36870: EQUAL
36871: NOT
36872: PUSH
36873: LD_VAR 0 1
36877: PUSH
36878: LD_EXP 106
36882: IN
36883: NOT
36884: OR
36885: IFFALSE 36889
// exit ;
36887: GO 37211
// index := GetElementIndex ( minersList , unit ) ;
36889: LD_ADDR_VAR 0 6
36893: PUSH
36894: LD_EXP 106
36898: PPUSH
36899: LD_VAR 0 1
36903: PPUSH
36904: CALL 42383 0 2
36908: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36909: LD_ADDR_VAR 0 8
36913: PUSH
36914: LD_EXP 108
36918: PUSH
36919: LD_EXP 107
36923: PUSH
36924: LD_VAR 0 6
36928: ARRAY
36929: MINUS
36930: ST_TO_ADDR
// if not minesFreeAmount then
36931: LD_VAR 0 8
36935: NOT
36936: IFFALSE 36940
// exit ;
36938: GO 37211
// tmp := [ ] ;
36940: LD_ADDR_VAR 0 7
36944: PUSH
36945: EMPTY
36946: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36947: LD_ADDR_VAR 0 5
36951: PUSH
36952: DOUBLE
36953: LD_INT 1
36955: DEC
36956: ST_TO_ADDR
36957: LD_VAR 0 8
36961: PUSH
36962: FOR_TO
36963: IFFALSE 37158
// begin _d := rand ( 0 , 5 ) ;
36965: LD_ADDR_VAR 0 11
36969: PUSH
36970: LD_INT 0
36972: PPUSH
36973: LD_INT 5
36975: PPUSH
36976: CALL_OW 12
36980: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36981: LD_ADDR_VAR 0 12
36985: PUSH
36986: LD_INT 2
36988: PPUSH
36989: LD_INT 6
36991: PPUSH
36992: CALL_OW 12
36996: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36997: LD_ADDR_VAR 0 9
37001: PUSH
37002: LD_VAR 0 2
37006: PPUSH
37007: LD_VAR 0 11
37011: PPUSH
37012: LD_VAR 0 12
37016: PPUSH
37017: CALL_OW 272
37021: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37022: LD_ADDR_VAR 0 10
37026: PUSH
37027: LD_VAR 0 3
37031: PPUSH
37032: LD_VAR 0 11
37036: PPUSH
37037: LD_VAR 0 12
37041: PPUSH
37042: CALL_OW 273
37046: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37047: LD_VAR 0 9
37051: PPUSH
37052: LD_VAR 0 10
37056: PPUSH
37057: CALL_OW 488
37061: PUSH
37062: LD_VAR 0 9
37066: PUSH
37067: LD_VAR 0 10
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_VAR 0 7
37080: IN
37081: NOT
37082: AND
37083: PUSH
37084: LD_VAR 0 9
37088: PPUSH
37089: LD_VAR 0 10
37093: PPUSH
37094: CALL_OW 458
37098: NOT
37099: AND
37100: IFFALSE 37142
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37102: LD_ADDR_VAR 0 7
37106: PUSH
37107: LD_VAR 0 7
37111: PPUSH
37112: LD_VAR 0 7
37116: PUSH
37117: LD_INT 1
37119: PLUS
37120: PPUSH
37121: LD_VAR 0 9
37125: PUSH
37126: LD_VAR 0 10
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PPUSH
37135: CALL_OW 1
37139: ST_TO_ADDR
37140: GO 37156
// i := i - 1 ;
37142: LD_ADDR_VAR 0 5
37146: PUSH
37147: LD_VAR 0 5
37151: PUSH
37152: LD_INT 1
37154: MINUS
37155: ST_TO_ADDR
// end ;
37156: GO 36962
37158: POP
37159: POP
// for i in tmp do
37160: LD_ADDR_VAR 0 5
37164: PUSH
37165: LD_VAR 0 7
37169: PUSH
37170: FOR_IN
37171: IFFALSE 37209
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37173: LD_VAR 0 1
37177: PPUSH
37178: LD_VAR 0 5
37182: PUSH
37183: LD_INT 1
37185: ARRAY
37186: PPUSH
37187: LD_VAR 0 5
37191: PUSH
37192: LD_INT 2
37194: ARRAY
37195: PPUSH
37196: CALL 36155 0 3
37200: NOT
37201: IFFALSE 37207
// exit ;
37203: POP
37204: POP
37205: GO 37211
37207: GO 37170
37209: POP
37210: POP
// end ;
37211: LD_VAR 0 4
37215: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37216: LD_INT 0
37218: PPUSH
37219: PPUSH
37220: PPUSH
37221: PPUSH
37222: PPUSH
37223: PPUSH
37224: PPUSH
// if not GetClass ( unit ) = class_sniper then
37225: LD_VAR 0 1
37229: PPUSH
37230: CALL_OW 257
37234: PUSH
37235: LD_INT 5
37237: EQUAL
37238: NOT
37239: IFFALSE 37243
// exit ;
37241: GO 37631
// dist := 8 ;
37243: LD_ADDR_VAR 0 5
37247: PUSH
37248: LD_INT 8
37250: ST_TO_ADDR
// viewRange := 12 ;
37251: LD_ADDR_VAR 0 7
37255: PUSH
37256: LD_INT 12
37258: ST_TO_ADDR
// side := GetSide ( unit ) ;
37259: LD_ADDR_VAR 0 6
37263: PUSH
37264: LD_VAR 0 1
37268: PPUSH
37269: CALL_OW 255
37273: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37274: LD_INT 61
37276: PPUSH
37277: LD_VAR 0 6
37281: PPUSH
37282: CALL_OW 321
37286: PUSH
37287: LD_INT 2
37289: EQUAL
37290: IFFALSE 37300
// viewRange := 16 ;
37292: LD_ADDR_VAR 0 7
37296: PUSH
37297: LD_INT 16
37299: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37300: LD_VAR 0 1
37304: PPUSH
37305: LD_VAR 0 2
37309: PPUSH
37310: LD_VAR 0 3
37314: PPUSH
37315: CALL_OW 297
37319: PUSH
37320: LD_VAR 0 5
37324: GREATER
37325: IFFALSE 37404
// begin ComMoveXY ( unit , x , y ) ;
37327: LD_VAR 0 1
37331: PPUSH
37332: LD_VAR 0 2
37336: PPUSH
37337: LD_VAR 0 3
37341: PPUSH
37342: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37346: LD_INT 35
37348: PPUSH
37349: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37353: LD_VAR 0 1
37357: PPUSH
37358: LD_VAR 0 2
37362: PPUSH
37363: LD_VAR 0 3
37367: PPUSH
37368: CALL 74135 0 3
37372: NOT
37373: IFFALSE 37377
// exit ;
37375: GO 37631
// until GetDistUnitXY ( unit , x , y ) < dist ;
37377: LD_VAR 0 1
37381: PPUSH
37382: LD_VAR 0 2
37386: PPUSH
37387: LD_VAR 0 3
37391: PPUSH
37392: CALL_OW 297
37396: PUSH
37397: LD_VAR 0 5
37401: LESS
37402: IFFALSE 37346
// end ; ComTurnXY ( unit , x , y ) ;
37404: LD_VAR 0 1
37408: PPUSH
37409: LD_VAR 0 2
37413: PPUSH
37414: LD_VAR 0 3
37418: PPUSH
37419: CALL_OW 118
// wait ( 5 ) ;
37423: LD_INT 5
37425: PPUSH
37426: CALL_OW 67
// _d := GetDir ( unit ) ;
37430: LD_ADDR_VAR 0 10
37434: PUSH
37435: LD_VAR 0 1
37439: PPUSH
37440: CALL_OW 254
37444: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37445: LD_ADDR_VAR 0 8
37449: PUSH
37450: LD_VAR 0 1
37454: PPUSH
37455: CALL_OW 250
37459: PPUSH
37460: LD_VAR 0 10
37464: PPUSH
37465: LD_VAR 0 5
37469: PPUSH
37470: CALL_OW 272
37474: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37475: LD_ADDR_VAR 0 9
37479: PUSH
37480: LD_VAR 0 1
37484: PPUSH
37485: CALL_OW 251
37489: PPUSH
37490: LD_VAR 0 10
37494: PPUSH
37495: LD_VAR 0 5
37499: PPUSH
37500: CALL_OW 273
37504: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37505: LD_VAR 0 8
37509: PPUSH
37510: LD_VAR 0 9
37514: PPUSH
37515: CALL_OW 488
37519: NOT
37520: IFFALSE 37524
// exit ;
37522: GO 37631
// ComAnimCustom ( unit , 1 ) ;
37524: LD_VAR 0 1
37528: PPUSH
37529: LD_INT 1
37531: PPUSH
37532: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37536: LD_VAR 0 8
37540: PPUSH
37541: LD_VAR 0 9
37545: PPUSH
37546: LD_VAR 0 6
37550: PPUSH
37551: LD_VAR 0 7
37555: PPUSH
37556: CALL_OW 330
// repeat wait ( 1 ) ;
37560: LD_INT 1
37562: PPUSH
37563: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37567: LD_VAR 0 1
37571: PPUSH
37572: CALL_OW 316
37576: PUSH
37577: LD_VAR 0 1
37581: PPUSH
37582: CALL_OW 314
37586: OR
37587: PUSH
37588: LD_VAR 0 1
37592: PPUSH
37593: CALL_OW 302
37597: NOT
37598: OR
37599: PUSH
37600: LD_VAR 0 1
37604: PPUSH
37605: CALL_OW 301
37609: OR
37610: IFFALSE 37560
// RemoveSeeing ( _x , _y , side ) ;
37612: LD_VAR 0 8
37616: PPUSH
37617: LD_VAR 0 9
37621: PPUSH
37622: LD_VAR 0 6
37626: PPUSH
37627: CALL_OW 331
// end ; end_of_file
37631: LD_VAR 0 4
37635: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37636: LD_INT 0
37638: PPUSH
37639: PPUSH
// if exist_mode then
37640: LD_VAR 0 2
37644: IFFALSE 37669
// unit := CreateCharacter ( prefix & ident ) else
37646: LD_ADDR_VAR 0 5
37650: PUSH
37651: LD_VAR 0 3
37655: PUSH
37656: LD_VAR 0 1
37660: STR
37661: PPUSH
37662: CALL_OW 34
37666: ST_TO_ADDR
37667: GO 37684
// unit := NewCharacter ( ident ) ;
37669: LD_ADDR_VAR 0 5
37673: PUSH
37674: LD_VAR 0 1
37678: PPUSH
37679: CALL_OW 25
37683: ST_TO_ADDR
// result := unit ;
37684: LD_ADDR_VAR 0 4
37688: PUSH
37689: LD_VAR 0 5
37693: ST_TO_ADDR
// end ;
37694: LD_VAR 0 4
37698: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37699: LD_INT 0
37701: PPUSH
37702: PPUSH
// if not side or not nation then
37703: LD_VAR 0 1
37707: NOT
37708: PUSH
37709: LD_VAR 0 2
37713: NOT
37714: OR
37715: IFFALSE 37719
// exit ;
37717: GO 38487
// case nation of nation_american :
37719: LD_VAR 0 2
37723: PUSH
37724: LD_INT 1
37726: DOUBLE
37727: EQUAL
37728: IFTRUE 37732
37730: GO 37946
37732: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37733: LD_ADDR_VAR 0 4
37737: PUSH
37738: LD_INT 35
37740: PUSH
37741: LD_INT 45
37743: PUSH
37744: LD_INT 46
37746: PUSH
37747: LD_INT 47
37749: PUSH
37750: LD_INT 82
37752: PUSH
37753: LD_INT 83
37755: PUSH
37756: LD_INT 84
37758: PUSH
37759: LD_INT 85
37761: PUSH
37762: LD_INT 86
37764: PUSH
37765: LD_INT 1
37767: PUSH
37768: LD_INT 2
37770: PUSH
37771: LD_INT 6
37773: PUSH
37774: LD_INT 15
37776: PUSH
37777: LD_INT 16
37779: PUSH
37780: LD_INT 7
37782: PUSH
37783: LD_INT 12
37785: PUSH
37786: LD_INT 13
37788: PUSH
37789: LD_INT 10
37791: PUSH
37792: LD_INT 14
37794: PUSH
37795: LD_INT 20
37797: PUSH
37798: LD_INT 21
37800: PUSH
37801: LD_INT 22
37803: PUSH
37804: LD_INT 25
37806: PUSH
37807: LD_INT 32
37809: PUSH
37810: LD_INT 27
37812: PUSH
37813: LD_INT 36
37815: PUSH
37816: LD_INT 69
37818: PUSH
37819: LD_INT 39
37821: PUSH
37822: LD_INT 34
37824: PUSH
37825: LD_INT 40
37827: PUSH
37828: LD_INT 48
37830: PUSH
37831: LD_INT 49
37833: PUSH
37834: LD_INT 50
37836: PUSH
37837: LD_INT 51
37839: PUSH
37840: LD_INT 52
37842: PUSH
37843: LD_INT 53
37845: PUSH
37846: LD_INT 54
37848: PUSH
37849: LD_INT 55
37851: PUSH
37852: LD_INT 56
37854: PUSH
37855: LD_INT 57
37857: PUSH
37858: LD_INT 58
37860: PUSH
37861: LD_INT 59
37863: PUSH
37864: LD_INT 60
37866: PUSH
37867: LD_INT 61
37869: PUSH
37870: LD_INT 62
37872: PUSH
37873: LD_INT 80
37875: PUSH
37876: LD_INT 82
37878: PUSH
37879: LD_INT 83
37881: PUSH
37882: LD_INT 84
37884: PUSH
37885: LD_INT 85
37887: PUSH
37888: LD_INT 86
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: ST_TO_ADDR
37944: GO 38411
37946: LD_INT 2
37948: DOUBLE
37949: EQUAL
37950: IFTRUE 37954
37952: GO 38180
37954: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37955: LD_ADDR_VAR 0 4
37959: PUSH
37960: LD_INT 35
37962: PUSH
37963: LD_INT 45
37965: PUSH
37966: LD_INT 46
37968: PUSH
37969: LD_INT 47
37971: PUSH
37972: LD_INT 82
37974: PUSH
37975: LD_INT 83
37977: PUSH
37978: LD_INT 84
37980: PUSH
37981: LD_INT 85
37983: PUSH
37984: LD_INT 87
37986: PUSH
37987: LD_INT 70
37989: PUSH
37990: LD_INT 1
37992: PUSH
37993: LD_INT 11
37995: PUSH
37996: LD_INT 3
37998: PUSH
37999: LD_INT 4
38001: PUSH
38002: LD_INT 5
38004: PUSH
38005: LD_INT 6
38007: PUSH
38008: LD_INT 15
38010: PUSH
38011: LD_INT 18
38013: PUSH
38014: LD_INT 7
38016: PUSH
38017: LD_INT 17
38019: PUSH
38020: LD_INT 8
38022: PUSH
38023: LD_INT 20
38025: PUSH
38026: LD_INT 21
38028: PUSH
38029: LD_INT 22
38031: PUSH
38032: LD_INT 72
38034: PUSH
38035: LD_INT 26
38037: PUSH
38038: LD_INT 69
38040: PUSH
38041: LD_INT 39
38043: PUSH
38044: LD_INT 40
38046: PUSH
38047: LD_INT 41
38049: PUSH
38050: LD_INT 42
38052: PUSH
38053: LD_INT 43
38055: PUSH
38056: LD_INT 48
38058: PUSH
38059: LD_INT 49
38061: PUSH
38062: LD_INT 50
38064: PUSH
38065: LD_INT 51
38067: PUSH
38068: LD_INT 52
38070: PUSH
38071: LD_INT 53
38073: PUSH
38074: LD_INT 54
38076: PUSH
38077: LD_INT 55
38079: PUSH
38080: LD_INT 56
38082: PUSH
38083: LD_INT 60
38085: PUSH
38086: LD_INT 61
38088: PUSH
38089: LD_INT 62
38091: PUSH
38092: LD_INT 66
38094: PUSH
38095: LD_INT 67
38097: PUSH
38098: LD_INT 68
38100: PUSH
38101: LD_INT 81
38103: PUSH
38104: LD_INT 82
38106: PUSH
38107: LD_INT 83
38109: PUSH
38110: LD_INT 84
38112: PUSH
38113: LD_INT 85
38115: PUSH
38116: LD_INT 87
38118: PUSH
38119: LD_INT 88
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: ST_TO_ADDR
38178: GO 38411
38180: LD_INT 3
38182: DOUBLE
38183: EQUAL
38184: IFTRUE 38188
38186: GO 38410
38188: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38189: LD_ADDR_VAR 0 4
38193: PUSH
38194: LD_INT 46
38196: PUSH
38197: LD_INT 47
38199: PUSH
38200: LD_INT 1
38202: PUSH
38203: LD_INT 2
38205: PUSH
38206: LD_INT 82
38208: PUSH
38209: LD_INT 83
38211: PUSH
38212: LD_INT 84
38214: PUSH
38215: LD_INT 85
38217: PUSH
38218: LD_INT 86
38220: PUSH
38221: LD_INT 11
38223: PUSH
38224: LD_INT 9
38226: PUSH
38227: LD_INT 20
38229: PUSH
38230: LD_INT 19
38232: PUSH
38233: LD_INT 21
38235: PUSH
38236: LD_INT 24
38238: PUSH
38239: LD_INT 22
38241: PUSH
38242: LD_INT 25
38244: PUSH
38245: LD_INT 28
38247: PUSH
38248: LD_INT 29
38250: PUSH
38251: LD_INT 30
38253: PUSH
38254: LD_INT 31
38256: PUSH
38257: LD_INT 37
38259: PUSH
38260: LD_INT 38
38262: PUSH
38263: LD_INT 32
38265: PUSH
38266: LD_INT 27
38268: PUSH
38269: LD_INT 33
38271: PUSH
38272: LD_INT 69
38274: PUSH
38275: LD_INT 39
38277: PUSH
38278: LD_INT 34
38280: PUSH
38281: LD_INT 40
38283: PUSH
38284: LD_INT 71
38286: PUSH
38287: LD_INT 23
38289: PUSH
38290: LD_INT 44
38292: PUSH
38293: LD_INT 48
38295: PUSH
38296: LD_INT 49
38298: PUSH
38299: LD_INT 50
38301: PUSH
38302: LD_INT 51
38304: PUSH
38305: LD_INT 52
38307: PUSH
38308: LD_INT 53
38310: PUSH
38311: LD_INT 54
38313: PUSH
38314: LD_INT 55
38316: PUSH
38317: LD_INT 56
38319: PUSH
38320: LD_INT 57
38322: PUSH
38323: LD_INT 58
38325: PUSH
38326: LD_INT 59
38328: PUSH
38329: LD_INT 63
38331: PUSH
38332: LD_INT 64
38334: PUSH
38335: LD_INT 65
38337: PUSH
38338: LD_INT 82
38340: PUSH
38341: LD_INT 83
38343: PUSH
38344: LD_INT 84
38346: PUSH
38347: LD_INT 85
38349: PUSH
38350: LD_INT 86
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: ST_TO_ADDR
38408: GO 38411
38410: POP
// if state > - 1 and state < 3 then
38411: LD_VAR 0 3
38415: PUSH
38416: LD_INT 1
38418: NEG
38419: GREATER
38420: PUSH
38421: LD_VAR 0 3
38425: PUSH
38426: LD_INT 3
38428: LESS
38429: AND
38430: IFFALSE 38487
// for i in result do
38432: LD_ADDR_VAR 0 5
38436: PUSH
38437: LD_VAR 0 4
38441: PUSH
38442: FOR_IN
38443: IFFALSE 38485
// if GetTech ( i , side ) <> state then
38445: LD_VAR 0 5
38449: PPUSH
38450: LD_VAR 0 1
38454: PPUSH
38455: CALL_OW 321
38459: PUSH
38460: LD_VAR 0 3
38464: NONEQUAL
38465: IFFALSE 38483
// result := result diff i ;
38467: LD_ADDR_VAR 0 4
38471: PUSH
38472: LD_VAR 0 4
38476: PUSH
38477: LD_VAR 0 5
38481: DIFF
38482: ST_TO_ADDR
38483: GO 38442
38485: POP
38486: POP
// end ;
38487: LD_VAR 0 4
38491: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38492: LD_INT 0
38494: PPUSH
38495: PPUSH
38496: PPUSH
// result := true ;
38497: LD_ADDR_VAR 0 3
38501: PUSH
38502: LD_INT 1
38504: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38505: LD_ADDR_VAR 0 5
38509: PUSH
38510: LD_VAR 0 2
38514: PPUSH
38515: CALL_OW 480
38519: ST_TO_ADDR
// if not tmp then
38520: LD_VAR 0 5
38524: NOT
38525: IFFALSE 38529
// exit ;
38527: GO 38578
// for i in tmp do
38529: LD_ADDR_VAR 0 4
38533: PUSH
38534: LD_VAR 0 5
38538: PUSH
38539: FOR_IN
38540: IFFALSE 38576
// if GetTech ( i , side ) <> state_researched then
38542: LD_VAR 0 4
38546: PPUSH
38547: LD_VAR 0 1
38551: PPUSH
38552: CALL_OW 321
38556: PUSH
38557: LD_INT 2
38559: NONEQUAL
38560: IFFALSE 38574
// begin result := false ;
38562: LD_ADDR_VAR 0 3
38566: PUSH
38567: LD_INT 0
38569: ST_TO_ADDR
// exit ;
38570: POP
38571: POP
38572: GO 38578
// end ;
38574: GO 38539
38576: POP
38577: POP
// end ;
38578: LD_VAR 0 3
38582: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38583: LD_INT 0
38585: PPUSH
38586: PPUSH
38587: PPUSH
38588: PPUSH
38589: PPUSH
38590: PPUSH
38591: PPUSH
38592: PPUSH
38593: PPUSH
38594: PPUSH
38595: PPUSH
38596: PPUSH
38597: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38598: LD_VAR 0 1
38602: NOT
38603: PUSH
38604: LD_VAR 0 1
38608: PPUSH
38609: CALL_OW 257
38613: PUSH
38614: LD_INT 9
38616: NONEQUAL
38617: OR
38618: IFFALSE 38622
// exit ;
38620: GO 39195
// side := GetSide ( unit ) ;
38622: LD_ADDR_VAR 0 9
38626: PUSH
38627: LD_VAR 0 1
38631: PPUSH
38632: CALL_OW 255
38636: ST_TO_ADDR
// tech_space := tech_spacanom ;
38637: LD_ADDR_VAR 0 12
38641: PUSH
38642: LD_INT 29
38644: ST_TO_ADDR
// tech_time := tech_taurad ;
38645: LD_ADDR_VAR 0 13
38649: PUSH
38650: LD_INT 28
38652: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38653: LD_ADDR_VAR 0 11
38657: PUSH
38658: LD_VAR 0 1
38662: PPUSH
38663: CALL_OW 310
38667: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38668: LD_VAR 0 11
38672: PPUSH
38673: CALL_OW 247
38677: PUSH
38678: LD_INT 2
38680: EQUAL
38681: IFFALSE 38685
// exit ;
38683: GO 39195
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38685: LD_ADDR_VAR 0 8
38689: PUSH
38690: LD_INT 81
38692: PUSH
38693: LD_VAR 0 9
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 3
38704: PUSH
38705: LD_INT 21
38707: PUSH
38708: LD_INT 3
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PPUSH
38723: CALL_OW 69
38727: ST_TO_ADDR
// if not tmp then
38728: LD_VAR 0 8
38732: NOT
38733: IFFALSE 38737
// exit ;
38735: GO 39195
// if in_unit then
38737: LD_VAR 0 11
38741: IFFALSE 38765
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38743: LD_ADDR_VAR 0 10
38747: PUSH
38748: LD_VAR 0 8
38752: PPUSH
38753: LD_VAR 0 11
38757: PPUSH
38758: CALL_OW 74
38762: ST_TO_ADDR
38763: GO 38785
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38765: LD_ADDR_VAR 0 10
38769: PUSH
38770: LD_VAR 0 8
38774: PPUSH
38775: LD_VAR 0 1
38779: PPUSH
38780: CALL_OW 74
38784: ST_TO_ADDR
// if not enemy then
38785: LD_VAR 0 10
38789: NOT
38790: IFFALSE 38794
// exit ;
38792: GO 39195
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38794: LD_VAR 0 11
38798: PUSH
38799: LD_VAR 0 11
38803: PPUSH
38804: LD_VAR 0 10
38808: PPUSH
38809: CALL_OW 296
38813: PUSH
38814: LD_INT 13
38816: GREATER
38817: AND
38818: PUSH
38819: LD_VAR 0 1
38823: PPUSH
38824: LD_VAR 0 10
38828: PPUSH
38829: CALL_OW 296
38833: PUSH
38834: LD_INT 12
38836: GREATER
38837: OR
38838: IFFALSE 38842
// exit ;
38840: GO 39195
// missile := [ 1 ] ;
38842: LD_ADDR_VAR 0 14
38846: PUSH
38847: LD_INT 1
38849: PUSH
38850: EMPTY
38851: LIST
38852: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38853: LD_VAR 0 9
38857: PPUSH
38858: LD_VAR 0 12
38862: PPUSH
38863: CALL_OW 325
38867: IFFALSE 38896
// missile := Replace ( missile , missile + 1 , 2 ) ;
38869: LD_ADDR_VAR 0 14
38873: PUSH
38874: LD_VAR 0 14
38878: PPUSH
38879: LD_VAR 0 14
38883: PUSH
38884: LD_INT 1
38886: PLUS
38887: PPUSH
38888: LD_INT 2
38890: PPUSH
38891: CALL_OW 1
38895: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38896: LD_VAR 0 9
38900: PPUSH
38901: LD_VAR 0 13
38905: PPUSH
38906: CALL_OW 325
38910: PUSH
38911: LD_VAR 0 10
38915: PPUSH
38916: CALL_OW 255
38920: PPUSH
38921: LD_VAR 0 13
38925: PPUSH
38926: CALL_OW 325
38930: NOT
38931: AND
38932: IFFALSE 38961
// missile := Replace ( missile , missile + 1 , 3 ) ;
38934: LD_ADDR_VAR 0 14
38938: PUSH
38939: LD_VAR 0 14
38943: PPUSH
38944: LD_VAR 0 14
38948: PUSH
38949: LD_INT 1
38951: PLUS
38952: PPUSH
38953: LD_INT 3
38955: PPUSH
38956: CALL_OW 1
38960: ST_TO_ADDR
// if missile < 2 then
38961: LD_VAR 0 14
38965: PUSH
38966: LD_INT 2
38968: LESS
38969: IFFALSE 38973
// exit ;
38971: GO 39195
// x := GetX ( enemy ) ;
38973: LD_ADDR_VAR 0 4
38977: PUSH
38978: LD_VAR 0 10
38982: PPUSH
38983: CALL_OW 250
38987: ST_TO_ADDR
// y := GetY ( enemy ) ;
38988: LD_ADDR_VAR 0 5
38992: PUSH
38993: LD_VAR 0 10
38997: PPUSH
38998: CALL_OW 251
39002: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39003: LD_ADDR_VAR 0 6
39007: PUSH
39008: LD_VAR 0 4
39012: PUSH
39013: LD_INT 1
39015: NEG
39016: PPUSH
39017: LD_INT 1
39019: PPUSH
39020: CALL_OW 12
39024: PLUS
39025: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39026: LD_ADDR_VAR 0 7
39030: PUSH
39031: LD_VAR 0 5
39035: PUSH
39036: LD_INT 1
39038: NEG
39039: PPUSH
39040: LD_INT 1
39042: PPUSH
39043: CALL_OW 12
39047: PLUS
39048: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39049: LD_VAR 0 6
39053: PPUSH
39054: LD_VAR 0 7
39058: PPUSH
39059: CALL_OW 488
39063: NOT
39064: IFFALSE 39086
// begin _x := x ;
39066: LD_ADDR_VAR 0 6
39070: PUSH
39071: LD_VAR 0 4
39075: ST_TO_ADDR
// _y := y ;
39076: LD_ADDR_VAR 0 7
39080: PUSH
39081: LD_VAR 0 5
39085: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39086: LD_ADDR_VAR 0 3
39090: PUSH
39091: LD_INT 1
39093: PPUSH
39094: LD_VAR 0 14
39098: PPUSH
39099: CALL_OW 12
39103: ST_TO_ADDR
// case i of 1 :
39104: LD_VAR 0 3
39108: PUSH
39109: LD_INT 1
39111: DOUBLE
39112: EQUAL
39113: IFTRUE 39117
39115: GO 39134
39117: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39118: LD_VAR 0 1
39122: PPUSH
39123: LD_VAR 0 10
39127: PPUSH
39128: CALL_OW 115
39132: GO 39195
39134: LD_INT 2
39136: DOUBLE
39137: EQUAL
39138: IFTRUE 39142
39140: GO 39164
39142: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39143: LD_VAR 0 1
39147: PPUSH
39148: LD_VAR 0 6
39152: PPUSH
39153: LD_VAR 0 7
39157: PPUSH
39158: CALL_OW 153
39162: GO 39195
39164: LD_INT 3
39166: DOUBLE
39167: EQUAL
39168: IFTRUE 39172
39170: GO 39194
39172: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39173: LD_VAR 0 1
39177: PPUSH
39178: LD_VAR 0 6
39182: PPUSH
39183: LD_VAR 0 7
39187: PPUSH
39188: CALL_OW 154
39192: GO 39195
39194: POP
// end ;
39195: LD_VAR 0 2
39199: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39200: LD_INT 0
39202: PPUSH
39203: PPUSH
39204: PPUSH
39205: PPUSH
39206: PPUSH
39207: PPUSH
// if not unit or not building then
39208: LD_VAR 0 1
39212: NOT
39213: PUSH
39214: LD_VAR 0 2
39218: NOT
39219: OR
39220: IFFALSE 39224
// exit ;
39222: GO 39382
// x := GetX ( building ) ;
39224: LD_ADDR_VAR 0 5
39228: PUSH
39229: LD_VAR 0 2
39233: PPUSH
39234: CALL_OW 250
39238: ST_TO_ADDR
// y := GetY ( building ) ;
39239: LD_ADDR_VAR 0 6
39243: PUSH
39244: LD_VAR 0 2
39248: PPUSH
39249: CALL_OW 251
39253: ST_TO_ADDR
// for i = 0 to 5 do
39254: LD_ADDR_VAR 0 4
39258: PUSH
39259: DOUBLE
39260: LD_INT 0
39262: DEC
39263: ST_TO_ADDR
39264: LD_INT 5
39266: PUSH
39267: FOR_TO
39268: IFFALSE 39380
// begin _x := ShiftX ( x , i , 3 ) ;
39270: LD_ADDR_VAR 0 7
39274: PUSH
39275: LD_VAR 0 5
39279: PPUSH
39280: LD_VAR 0 4
39284: PPUSH
39285: LD_INT 3
39287: PPUSH
39288: CALL_OW 272
39292: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39293: LD_ADDR_VAR 0 8
39297: PUSH
39298: LD_VAR 0 6
39302: PPUSH
39303: LD_VAR 0 4
39307: PPUSH
39308: LD_INT 3
39310: PPUSH
39311: CALL_OW 273
39315: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39316: LD_VAR 0 7
39320: PPUSH
39321: LD_VAR 0 8
39325: PPUSH
39326: CALL_OW 488
39330: NOT
39331: IFFALSE 39335
// continue ;
39333: GO 39267
// if HexInfo ( _x , _y ) = 0 then
39335: LD_VAR 0 7
39339: PPUSH
39340: LD_VAR 0 8
39344: PPUSH
39345: CALL_OW 428
39349: PUSH
39350: LD_INT 0
39352: EQUAL
39353: IFFALSE 39378
// begin ComMoveXY ( unit , _x , _y ) ;
39355: LD_VAR 0 1
39359: PPUSH
39360: LD_VAR 0 7
39364: PPUSH
39365: LD_VAR 0 8
39369: PPUSH
39370: CALL_OW 111
// exit ;
39374: POP
39375: POP
39376: GO 39382
// end ; end ;
39378: GO 39267
39380: POP
39381: POP
// end ;
39382: LD_VAR 0 3
39386: RET
// export function ScanBase ( side , base_area ) ; begin
39387: LD_INT 0
39389: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39390: LD_ADDR_VAR 0 3
39394: PUSH
39395: LD_VAR 0 2
39399: PPUSH
39400: LD_INT 81
39402: PUSH
39403: LD_VAR 0 1
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PPUSH
39412: CALL_OW 70
39416: ST_TO_ADDR
// end ;
39417: LD_VAR 0 3
39421: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39422: LD_INT 0
39424: PPUSH
39425: PPUSH
39426: PPUSH
39427: PPUSH
// result := false ;
39428: LD_ADDR_VAR 0 2
39432: PUSH
39433: LD_INT 0
39435: ST_TO_ADDR
// side := GetSide ( unit ) ;
39436: LD_ADDR_VAR 0 3
39440: PUSH
39441: LD_VAR 0 1
39445: PPUSH
39446: CALL_OW 255
39450: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39451: LD_ADDR_VAR 0 4
39455: PUSH
39456: LD_VAR 0 1
39460: PPUSH
39461: CALL_OW 248
39465: ST_TO_ADDR
// case nat of 1 :
39466: LD_VAR 0 4
39470: PUSH
39471: LD_INT 1
39473: DOUBLE
39474: EQUAL
39475: IFTRUE 39479
39477: GO 39490
39479: POP
// tech := tech_lassight ; 2 :
39480: LD_ADDR_VAR 0 5
39484: PUSH
39485: LD_INT 12
39487: ST_TO_ADDR
39488: GO 39529
39490: LD_INT 2
39492: DOUBLE
39493: EQUAL
39494: IFTRUE 39498
39496: GO 39509
39498: POP
// tech := tech_mortar ; 3 :
39499: LD_ADDR_VAR 0 5
39503: PUSH
39504: LD_INT 41
39506: ST_TO_ADDR
39507: GO 39529
39509: LD_INT 3
39511: DOUBLE
39512: EQUAL
39513: IFTRUE 39517
39515: GO 39528
39517: POP
// tech := tech_bazooka ; end ;
39518: LD_ADDR_VAR 0 5
39522: PUSH
39523: LD_INT 44
39525: ST_TO_ADDR
39526: GO 39529
39528: POP
// if Researched ( side , tech ) then
39529: LD_VAR 0 3
39533: PPUSH
39534: LD_VAR 0 5
39538: PPUSH
39539: CALL_OW 325
39543: IFFALSE 39570
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39545: LD_ADDR_VAR 0 2
39549: PUSH
39550: LD_INT 5
39552: PUSH
39553: LD_INT 8
39555: PUSH
39556: LD_INT 9
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: LIST
39563: PUSH
39564: LD_VAR 0 4
39568: ARRAY
39569: ST_TO_ADDR
// end ;
39570: LD_VAR 0 2
39574: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39575: LD_INT 0
39577: PPUSH
39578: PPUSH
39579: PPUSH
// if not mines then
39580: LD_VAR 0 2
39584: NOT
39585: IFFALSE 39589
// exit ;
39587: GO 39733
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39589: LD_ADDR_VAR 0 5
39593: PUSH
39594: LD_INT 81
39596: PUSH
39597: LD_VAR 0 1
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 3
39608: PUSH
39609: LD_INT 21
39611: PUSH
39612: LD_INT 3
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PPUSH
39627: CALL_OW 69
39631: ST_TO_ADDR
// for i in mines do
39632: LD_ADDR_VAR 0 4
39636: PUSH
39637: LD_VAR 0 2
39641: PUSH
39642: FOR_IN
39643: IFFALSE 39731
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39645: LD_VAR 0 4
39649: PUSH
39650: LD_INT 1
39652: ARRAY
39653: PPUSH
39654: LD_VAR 0 4
39658: PUSH
39659: LD_INT 2
39661: ARRAY
39662: PPUSH
39663: CALL_OW 458
39667: NOT
39668: IFFALSE 39672
// continue ;
39670: GO 39642
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39672: LD_VAR 0 4
39676: PUSH
39677: LD_INT 1
39679: ARRAY
39680: PPUSH
39681: LD_VAR 0 4
39685: PUSH
39686: LD_INT 2
39688: ARRAY
39689: PPUSH
39690: CALL_OW 428
39694: PUSH
39695: LD_VAR 0 5
39699: IN
39700: IFFALSE 39729
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39702: LD_VAR 0 4
39706: PUSH
39707: LD_INT 1
39709: ARRAY
39710: PPUSH
39711: LD_VAR 0 4
39715: PUSH
39716: LD_INT 2
39718: ARRAY
39719: PPUSH
39720: LD_VAR 0 1
39724: PPUSH
39725: CALL_OW 456
// end ;
39729: GO 39642
39731: POP
39732: POP
// end ;
39733: LD_VAR 0 3
39737: RET
// export function Count ( array ) ; begin
39738: LD_INT 0
39740: PPUSH
// result := array + 0 ;
39741: LD_ADDR_VAR 0 2
39745: PUSH
39746: LD_VAR 0 1
39750: PUSH
39751: LD_INT 0
39753: PLUS
39754: ST_TO_ADDR
// end ;
39755: LD_VAR 0 2
39759: RET
// export function IsEmpty ( building ) ; begin
39760: LD_INT 0
39762: PPUSH
// if not building then
39763: LD_VAR 0 1
39767: NOT
39768: IFFALSE 39772
// exit ;
39770: GO 39815
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39772: LD_ADDR_VAR 0 2
39776: PUSH
39777: LD_VAR 0 1
39781: PUSH
39782: LD_INT 22
39784: PUSH
39785: LD_VAR 0 1
39789: PPUSH
39790: CALL_OW 255
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 58
39801: PUSH
39802: EMPTY
39803: LIST
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PPUSH
39809: CALL_OW 69
39813: IN
39814: ST_TO_ADDR
// end ;
39815: LD_VAR 0 2
39819: RET
// export function IsNotFull ( building ) ; var places ; begin
39820: LD_INT 0
39822: PPUSH
39823: PPUSH
// if not building then
39824: LD_VAR 0 1
39828: NOT
39829: IFFALSE 39833
// exit ;
39831: GO 39861
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
39833: LD_ADDR_VAR 0 2
39837: PUSH
39838: LD_VAR 0 1
39842: PPUSH
39843: LD_INT 3
39845: PUSH
39846: LD_INT 62
39848: PUSH
39849: EMPTY
39850: LIST
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PPUSH
39856: CALL_OW 72
39860: ST_TO_ADDR
// end ;
39861: LD_VAR 0 2
39865: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39866: LD_INT 0
39868: PPUSH
39869: PPUSH
39870: PPUSH
39871: PPUSH
// tmp := [ ] ;
39872: LD_ADDR_VAR 0 3
39876: PUSH
39877: EMPTY
39878: ST_TO_ADDR
// list := [ ] ;
39879: LD_ADDR_VAR 0 5
39883: PUSH
39884: EMPTY
39885: ST_TO_ADDR
// for i = 16 to 25 do
39886: LD_ADDR_VAR 0 4
39890: PUSH
39891: DOUBLE
39892: LD_INT 16
39894: DEC
39895: ST_TO_ADDR
39896: LD_INT 25
39898: PUSH
39899: FOR_TO
39900: IFFALSE 39973
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39902: LD_ADDR_VAR 0 3
39906: PUSH
39907: LD_VAR 0 3
39911: PUSH
39912: LD_INT 22
39914: PUSH
39915: LD_VAR 0 1
39919: PPUSH
39920: CALL_OW 255
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 91
39931: PUSH
39932: LD_VAR 0 1
39936: PUSH
39937: LD_INT 6
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 30
39947: PUSH
39948: LD_VAR 0 4
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: LIST
39961: PUSH
39962: EMPTY
39963: LIST
39964: PPUSH
39965: CALL_OW 69
39969: ADD
39970: ST_TO_ADDR
39971: GO 39899
39973: POP
39974: POP
// for i = 1 to tmp do
39975: LD_ADDR_VAR 0 4
39979: PUSH
39980: DOUBLE
39981: LD_INT 1
39983: DEC
39984: ST_TO_ADDR
39985: LD_VAR 0 3
39989: PUSH
39990: FOR_TO
39991: IFFALSE 40079
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39993: LD_ADDR_VAR 0 5
39997: PUSH
39998: LD_VAR 0 5
40002: PUSH
40003: LD_VAR 0 3
40007: PUSH
40008: LD_VAR 0 4
40012: ARRAY
40013: PPUSH
40014: CALL_OW 266
40018: PUSH
40019: LD_VAR 0 3
40023: PUSH
40024: LD_VAR 0 4
40028: ARRAY
40029: PPUSH
40030: CALL_OW 250
40034: PUSH
40035: LD_VAR 0 3
40039: PUSH
40040: LD_VAR 0 4
40044: ARRAY
40045: PPUSH
40046: CALL_OW 251
40050: PUSH
40051: LD_VAR 0 3
40055: PUSH
40056: LD_VAR 0 4
40060: ARRAY
40061: PPUSH
40062: CALL_OW 254
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: PUSH
40073: EMPTY
40074: LIST
40075: ADD
40076: ST_TO_ADDR
40077: GO 39990
40079: POP
40080: POP
// result := list ;
40081: LD_ADDR_VAR 0 2
40085: PUSH
40086: LD_VAR 0 5
40090: ST_TO_ADDR
// end ;
40091: LD_VAR 0 2
40095: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40096: LD_INT 0
40098: PPUSH
40099: PPUSH
40100: PPUSH
40101: PPUSH
40102: PPUSH
40103: PPUSH
40104: PPUSH
// if not factory then
40105: LD_VAR 0 1
40109: NOT
40110: IFFALSE 40114
// exit ;
40112: GO 40707
// if control = control_apeman then
40114: LD_VAR 0 4
40118: PUSH
40119: LD_INT 5
40121: EQUAL
40122: IFFALSE 40231
// begin tmp := UnitsInside ( factory ) ;
40124: LD_ADDR_VAR 0 8
40128: PUSH
40129: LD_VAR 0 1
40133: PPUSH
40134: CALL_OW 313
40138: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40139: LD_VAR 0 8
40143: PPUSH
40144: LD_INT 25
40146: PUSH
40147: LD_INT 12
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PPUSH
40154: CALL_OW 72
40158: NOT
40159: IFFALSE 40169
// control := control_manual ;
40161: LD_ADDR_VAR 0 4
40165: PUSH
40166: LD_INT 1
40168: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40169: LD_ADDR_VAR 0 8
40173: PUSH
40174: LD_VAR 0 1
40178: PPUSH
40179: CALL 39866 0 1
40183: ST_TO_ADDR
// if tmp then
40184: LD_VAR 0 8
40188: IFFALSE 40231
// begin for i in tmp do
40190: LD_ADDR_VAR 0 7
40194: PUSH
40195: LD_VAR 0 8
40199: PUSH
40200: FOR_IN
40201: IFFALSE 40229
// if i [ 1 ] = b_ext_radio then
40203: LD_VAR 0 7
40207: PUSH
40208: LD_INT 1
40210: ARRAY
40211: PUSH
40212: LD_INT 22
40214: EQUAL
40215: IFFALSE 40227
// begin control := control_remote ;
40217: LD_ADDR_VAR 0 4
40221: PUSH
40222: LD_INT 2
40224: ST_TO_ADDR
// break ;
40225: GO 40229
// end ;
40227: GO 40200
40229: POP
40230: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40231: LD_VAR 0 1
40235: PPUSH
40236: LD_VAR 0 2
40240: PPUSH
40241: LD_VAR 0 3
40245: PPUSH
40246: LD_VAR 0 4
40250: PPUSH
40251: LD_VAR 0 5
40255: PPUSH
40256: CALL_OW 448
40260: IFFALSE 40295
// begin result := [ chassis , engine , control , weapon ] ;
40262: LD_ADDR_VAR 0 6
40266: PUSH
40267: LD_VAR 0 2
40271: PUSH
40272: LD_VAR 0 3
40276: PUSH
40277: LD_VAR 0 4
40281: PUSH
40282: LD_VAR 0 5
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: ST_TO_ADDR
// exit ;
40293: GO 40707
// end ; _chassis := AvailableChassisList ( factory ) ;
40295: LD_ADDR_VAR 0 9
40299: PUSH
40300: LD_VAR 0 1
40304: PPUSH
40305: CALL_OW 475
40309: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40310: LD_ADDR_VAR 0 11
40314: PUSH
40315: LD_VAR 0 1
40319: PPUSH
40320: CALL_OW 476
40324: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40325: LD_ADDR_VAR 0 12
40329: PUSH
40330: LD_VAR 0 1
40334: PPUSH
40335: CALL_OW 477
40339: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40340: LD_ADDR_VAR 0 10
40344: PUSH
40345: LD_VAR 0 1
40349: PPUSH
40350: CALL_OW 478
40354: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40355: LD_VAR 0 9
40359: NOT
40360: PUSH
40361: LD_VAR 0 11
40365: NOT
40366: OR
40367: PUSH
40368: LD_VAR 0 12
40372: NOT
40373: OR
40374: PUSH
40375: LD_VAR 0 10
40379: NOT
40380: OR
40381: IFFALSE 40416
// begin result := [ chassis , engine , control , weapon ] ;
40383: LD_ADDR_VAR 0 6
40387: PUSH
40388: LD_VAR 0 2
40392: PUSH
40393: LD_VAR 0 3
40397: PUSH
40398: LD_VAR 0 4
40402: PUSH
40403: LD_VAR 0 5
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: ST_TO_ADDR
// exit ;
40414: GO 40707
// end ; if not chassis in _chassis then
40416: LD_VAR 0 2
40420: PUSH
40421: LD_VAR 0 9
40425: IN
40426: NOT
40427: IFFALSE 40453
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40429: LD_ADDR_VAR 0 2
40433: PUSH
40434: LD_VAR 0 9
40438: PUSH
40439: LD_INT 1
40441: PPUSH
40442: LD_VAR 0 9
40446: PPUSH
40447: CALL_OW 12
40451: ARRAY
40452: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40453: LD_VAR 0 2
40457: PPUSH
40458: LD_VAR 0 3
40462: PPUSH
40463: CALL 40712 0 2
40467: NOT
40468: IFFALSE 40527
// repeat engine := _engine [ 1 ] ;
40470: LD_ADDR_VAR 0 3
40474: PUSH
40475: LD_VAR 0 11
40479: PUSH
40480: LD_INT 1
40482: ARRAY
40483: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40484: LD_ADDR_VAR 0 11
40488: PUSH
40489: LD_VAR 0 11
40493: PPUSH
40494: LD_INT 1
40496: PPUSH
40497: CALL_OW 3
40501: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40502: LD_VAR 0 2
40506: PPUSH
40507: LD_VAR 0 3
40511: PPUSH
40512: CALL 40712 0 2
40516: PUSH
40517: LD_VAR 0 11
40521: PUSH
40522: EMPTY
40523: EQUAL
40524: OR
40525: IFFALSE 40470
// if not control in _control then
40527: LD_VAR 0 4
40531: PUSH
40532: LD_VAR 0 12
40536: IN
40537: NOT
40538: IFFALSE 40564
// control := _control [ rand ( 1 , _control ) ] ;
40540: LD_ADDR_VAR 0 4
40544: PUSH
40545: LD_VAR 0 12
40549: PUSH
40550: LD_INT 1
40552: PPUSH
40553: LD_VAR 0 12
40557: PPUSH
40558: CALL_OW 12
40562: ARRAY
40563: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40564: LD_VAR 0 2
40568: PPUSH
40569: LD_VAR 0 5
40573: PPUSH
40574: CALL 40932 0 2
40578: NOT
40579: IFFALSE 40638
// repeat weapon := _weapon [ 1 ] ;
40581: LD_ADDR_VAR 0 5
40585: PUSH
40586: LD_VAR 0 10
40590: PUSH
40591: LD_INT 1
40593: ARRAY
40594: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40595: LD_ADDR_VAR 0 10
40599: PUSH
40600: LD_VAR 0 10
40604: PPUSH
40605: LD_INT 1
40607: PPUSH
40608: CALL_OW 3
40612: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40613: LD_VAR 0 2
40617: PPUSH
40618: LD_VAR 0 5
40622: PPUSH
40623: CALL 40932 0 2
40627: PUSH
40628: LD_VAR 0 10
40632: PUSH
40633: EMPTY
40634: EQUAL
40635: OR
40636: IFFALSE 40581
// result := [ ] ;
40638: LD_ADDR_VAR 0 6
40642: PUSH
40643: EMPTY
40644: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40645: LD_VAR 0 1
40649: PPUSH
40650: LD_VAR 0 2
40654: PPUSH
40655: LD_VAR 0 3
40659: PPUSH
40660: LD_VAR 0 4
40664: PPUSH
40665: LD_VAR 0 5
40669: PPUSH
40670: CALL_OW 448
40674: IFFALSE 40707
// result := [ chassis , engine , control , weapon ] ;
40676: LD_ADDR_VAR 0 6
40680: PUSH
40681: LD_VAR 0 2
40685: PUSH
40686: LD_VAR 0 3
40690: PUSH
40691: LD_VAR 0 4
40695: PUSH
40696: LD_VAR 0 5
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: ST_TO_ADDR
// end ;
40707: LD_VAR 0 6
40711: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40712: LD_INT 0
40714: PPUSH
// if not chassis or not engine then
40715: LD_VAR 0 1
40719: NOT
40720: PUSH
40721: LD_VAR 0 2
40725: NOT
40726: OR
40727: IFFALSE 40731
// exit ;
40729: GO 40927
// case engine of engine_solar :
40731: LD_VAR 0 2
40735: PUSH
40736: LD_INT 2
40738: DOUBLE
40739: EQUAL
40740: IFTRUE 40744
40742: GO 40782
40744: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40745: LD_ADDR_VAR 0 3
40749: PUSH
40750: LD_INT 11
40752: PUSH
40753: LD_INT 12
40755: PUSH
40756: LD_INT 13
40758: PUSH
40759: LD_INT 14
40761: PUSH
40762: LD_INT 1
40764: PUSH
40765: LD_INT 2
40767: PUSH
40768: LD_INT 3
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: ST_TO_ADDR
40780: GO 40911
40782: LD_INT 1
40784: DOUBLE
40785: EQUAL
40786: IFTRUE 40790
40788: GO 40852
40790: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40791: LD_ADDR_VAR 0 3
40795: PUSH
40796: LD_INT 11
40798: PUSH
40799: LD_INT 12
40801: PUSH
40802: LD_INT 13
40804: PUSH
40805: LD_INT 14
40807: PUSH
40808: LD_INT 1
40810: PUSH
40811: LD_INT 2
40813: PUSH
40814: LD_INT 3
40816: PUSH
40817: LD_INT 4
40819: PUSH
40820: LD_INT 5
40822: PUSH
40823: LD_INT 21
40825: PUSH
40826: LD_INT 23
40828: PUSH
40829: LD_INT 22
40831: PUSH
40832: LD_INT 24
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: ST_TO_ADDR
40850: GO 40911
40852: LD_INT 3
40854: DOUBLE
40855: EQUAL
40856: IFTRUE 40860
40858: GO 40910
40860: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40861: LD_ADDR_VAR 0 3
40865: PUSH
40866: LD_INT 13
40868: PUSH
40869: LD_INT 14
40871: PUSH
40872: LD_INT 2
40874: PUSH
40875: LD_INT 3
40877: PUSH
40878: LD_INT 4
40880: PUSH
40881: LD_INT 5
40883: PUSH
40884: LD_INT 21
40886: PUSH
40887: LD_INT 22
40889: PUSH
40890: LD_INT 23
40892: PUSH
40893: LD_INT 24
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: ST_TO_ADDR
40908: GO 40911
40910: POP
// result := ( chassis in result ) ;
40911: LD_ADDR_VAR 0 3
40915: PUSH
40916: LD_VAR 0 1
40920: PUSH
40921: LD_VAR 0 3
40925: IN
40926: ST_TO_ADDR
// end ;
40927: LD_VAR 0 3
40931: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40932: LD_INT 0
40934: PPUSH
// if not chassis or not weapon then
40935: LD_VAR 0 1
40939: NOT
40940: PUSH
40941: LD_VAR 0 2
40945: NOT
40946: OR
40947: IFFALSE 40951
// exit ;
40949: GO 42011
// case weapon of us_machine_gun :
40951: LD_VAR 0 2
40955: PUSH
40956: LD_INT 2
40958: DOUBLE
40959: EQUAL
40960: IFTRUE 40964
40962: GO 40994
40964: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40965: LD_ADDR_VAR 0 3
40969: PUSH
40970: LD_INT 1
40972: PUSH
40973: LD_INT 2
40975: PUSH
40976: LD_INT 3
40978: PUSH
40979: LD_INT 4
40981: PUSH
40982: LD_INT 5
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: ST_TO_ADDR
40992: GO 41995
40994: LD_INT 3
40996: DOUBLE
40997: EQUAL
40998: IFTRUE 41002
41000: GO 41032
41002: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41003: LD_ADDR_VAR 0 3
41007: PUSH
41008: LD_INT 1
41010: PUSH
41011: LD_INT 2
41013: PUSH
41014: LD_INT 3
41016: PUSH
41017: LD_INT 4
41019: PUSH
41020: LD_INT 5
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: ST_TO_ADDR
41030: GO 41995
41032: LD_INT 11
41034: DOUBLE
41035: EQUAL
41036: IFTRUE 41040
41038: GO 41070
41040: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41041: LD_ADDR_VAR 0 3
41045: PUSH
41046: LD_INT 1
41048: PUSH
41049: LD_INT 2
41051: PUSH
41052: LD_INT 3
41054: PUSH
41055: LD_INT 4
41057: PUSH
41058: LD_INT 5
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: ST_TO_ADDR
41068: GO 41995
41070: LD_INT 4
41072: DOUBLE
41073: EQUAL
41074: IFTRUE 41078
41076: GO 41104
41078: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41079: LD_ADDR_VAR 0 3
41083: PUSH
41084: LD_INT 2
41086: PUSH
41087: LD_INT 3
41089: PUSH
41090: LD_INT 4
41092: PUSH
41093: LD_INT 5
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: ST_TO_ADDR
41102: GO 41995
41104: LD_INT 5
41106: DOUBLE
41107: EQUAL
41108: IFTRUE 41112
41110: GO 41138
41112: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41113: LD_ADDR_VAR 0 3
41117: PUSH
41118: LD_INT 2
41120: PUSH
41121: LD_INT 3
41123: PUSH
41124: LD_INT 4
41126: PUSH
41127: LD_INT 5
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: ST_TO_ADDR
41136: GO 41995
41138: LD_INT 9
41140: DOUBLE
41141: EQUAL
41142: IFTRUE 41146
41144: GO 41172
41146: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41147: LD_ADDR_VAR 0 3
41151: PUSH
41152: LD_INT 2
41154: PUSH
41155: LD_INT 3
41157: PUSH
41158: LD_INT 4
41160: PUSH
41161: LD_INT 5
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: ST_TO_ADDR
41170: GO 41995
41172: LD_INT 7
41174: DOUBLE
41175: EQUAL
41176: IFTRUE 41180
41178: GO 41206
41180: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41181: LD_ADDR_VAR 0 3
41185: PUSH
41186: LD_INT 2
41188: PUSH
41189: LD_INT 3
41191: PUSH
41192: LD_INT 4
41194: PUSH
41195: LD_INT 5
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: ST_TO_ADDR
41204: GO 41995
41206: LD_INT 12
41208: DOUBLE
41209: EQUAL
41210: IFTRUE 41214
41212: GO 41240
41214: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41215: LD_ADDR_VAR 0 3
41219: PUSH
41220: LD_INT 2
41222: PUSH
41223: LD_INT 3
41225: PUSH
41226: LD_INT 4
41228: PUSH
41229: LD_INT 5
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: ST_TO_ADDR
41238: GO 41995
41240: LD_INT 13
41242: DOUBLE
41243: EQUAL
41244: IFTRUE 41248
41246: GO 41274
41248: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41249: LD_ADDR_VAR 0 3
41253: PUSH
41254: LD_INT 2
41256: PUSH
41257: LD_INT 3
41259: PUSH
41260: LD_INT 4
41262: PUSH
41263: LD_INT 5
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: ST_TO_ADDR
41272: GO 41995
41274: LD_INT 14
41276: DOUBLE
41277: EQUAL
41278: IFTRUE 41282
41280: GO 41300
41282: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41283: LD_ADDR_VAR 0 3
41287: PUSH
41288: LD_INT 4
41290: PUSH
41291: LD_INT 5
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: ST_TO_ADDR
41298: GO 41995
41300: LD_INT 6
41302: DOUBLE
41303: EQUAL
41304: IFTRUE 41308
41306: GO 41326
41308: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41309: LD_ADDR_VAR 0 3
41313: PUSH
41314: LD_INT 4
41316: PUSH
41317: LD_INT 5
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: ST_TO_ADDR
41324: GO 41995
41326: LD_INT 10
41328: DOUBLE
41329: EQUAL
41330: IFTRUE 41334
41332: GO 41352
41334: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41335: LD_ADDR_VAR 0 3
41339: PUSH
41340: LD_INT 4
41342: PUSH
41343: LD_INT 5
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: ST_TO_ADDR
41350: GO 41995
41352: LD_INT 22
41354: DOUBLE
41355: EQUAL
41356: IFTRUE 41360
41358: GO 41386
41360: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41361: LD_ADDR_VAR 0 3
41365: PUSH
41366: LD_INT 11
41368: PUSH
41369: LD_INT 12
41371: PUSH
41372: LD_INT 13
41374: PUSH
41375: LD_INT 14
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: ST_TO_ADDR
41384: GO 41995
41386: LD_INT 23
41388: DOUBLE
41389: EQUAL
41390: IFTRUE 41394
41392: GO 41420
41394: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41395: LD_ADDR_VAR 0 3
41399: PUSH
41400: LD_INT 11
41402: PUSH
41403: LD_INT 12
41405: PUSH
41406: LD_INT 13
41408: PUSH
41409: LD_INT 14
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: ST_TO_ADDR
41418: GO 41995
41420: LD_INT 24
41422: DOUBLE
41423: EQUAL
41424: IFTRUE 41428
41426: GO 41454
41428: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41429: LD_ADDR_VAR 0 3
41433: PUSH
41434: LD_INT 11
41436: PUSH
41437: LD_INT 12
41439: PUSH
41440: LD_INT 13
41442: PUSH
41443: LD_INT 14
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: ST_TO_ADDR
41452: GO 41995
41454: LD_INT 30
41456: DOUBLE
41457: EQUAL
41458: IFTRUE 41462
41460: GO 41488
41462: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41463: LD_ADDR_VAR 0 3
41467: PUSH
41468: LD_INT 11
41470: PUSH
41471: LD_INT 12
41473: PUSH
41474: LD_INT 13
41476: PUSH
41477: LD_INT 14
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: ST_TO_ADDR
41486: GO 41995
41488: LD_INT 25
41490: DOUBLE
41491: EQUAL
41492: IFTRUE 41496
41494: GO 41514
41496: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41497: LD_ADDR_VAR 0 3
41501: PUSH
41502: LD_INT 13
41504: PUSH
41505: LD_INT 14
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: ST_TO_ADDR
41512: GO 41995
41514: LD_INT 27
41516: DOUBLE
41517: EQUAL
41518: IFTRUE 41522
41520: GO 41540
41522: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41523: LD_ADDR_VAR 0 3
41527: PUSH
41528: LD_INT 13
41530: PUSH
41531: LD_INT 14
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: ST_TO_ADDR
41538: GO 41995
41540: LD_INT 92
41542: DOUBLE
41543: EQUAL
41544: IFTRUE 41548
41546: GO 41574
41548: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41549: LD_ADDR_VAR 0 3
41553: PUSH
41554: LD_INT 11
41556: PUSH
41557: LD_INT 12
41559: PUSH
41560: LD_INT 13
41562: PUSH
41563: LD_INT 14
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: ST_TO_ADDR
41572: GO 41995
41574: LD_INT 28
41576: DOUBLE
41577: EQUAL
41578: IFTRUE 41582
41580: GO 41600
41582: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41583: LD_ADDR_VAR 0 3
41587: PUSH
41588: LD_INT 13
41590: PUSH
41591: LD_INT 14
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: ST_TO_ADDR
41598: GO 41995
41600: LD_INT 29
41602: DOUBLE
41603: EQUAL
41604: IFTRUE 41608
41606: GO 41626
41608: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41609: LD_ADDR_VAR 0 3
41613: PUSH
41614: LD_INT 13
41616: PUSH
41617: LD_INT 14
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: ST_TO_ADDR
41624: GO 41995
41626: LD_INT 31
41628: DOUBLE
41629: EQUAL
41630: IFTRUE 41634
41632: GO 41652
41634: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41635: LD_ADDR_VAR 0 3
41639: PUSH
41640: LD_INT 13
41642: PUSH
41643: LD_INT 14
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: ST_TO_ADDR
41650: GO 41995
41652: LD_INT 26
41654: DOUBLE
41655: EQUAL
41656: IFTRUE 41660
41658: GO 41678
41660: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41661: LD_ADDR_VAR 0 3
41665: PUSH
41666: LD_INT 13
41668: PUSH
41669: LD_INT 14
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: ST_TO_ADDR
41676: GO 41995
41678: LD_INT 42
41680: DOUBLE
41681: EQUAL
41682: IFTRUE 41686
41684: GO 41712
41686: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41687: LD_ADDR_VAR 0 3
41691: PUSH
41692: LD_INT 21
41694: PUSH
41695: LD_INT 22
41697: PUSH
41698: LD_INT 23
41700: PUSH
41701: LD_INT 24
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: ST_TO_ADDR
41710: GO 41995
41712: LD_INT 43
41714: DOUBLE
41715: EQUAL
41716: IFTRUE 41720
41718: GO 41746
41720: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41721: LD_ADDR_VAR 0 3
41725: PUSH
41726: LD_INT 21
41728: PUSH
41729: LD_INT 22
41731: PUSH
41732: LD_INT 23
41734: PUSH
41735: LD_INT 24
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: ST_TO_ADDR
41744: GO 41995
41746: LD_INT 44
41748: DOUBLE
41749: EQUAL
41750: IFTRUE 41754
41752: GO 41780
41754: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41755: LD_ADDR_VAR 0 3
41759: PUSH
41760: LD_INT 21
41762: PUSH
41763: LD_INT 22
41765: PUSH
41766: LD_INT 23
41768: PUSH
41769: LD_INT 24
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: ST_TO_ADDR
41778: GO 41995
41780: LD_INT 45
41782: DOUBLE
41783: EQUAL
41784: IFTRUE 41788
41786: GO 41814
41788: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41789: LD_ADDR_VAR 0 3
41793: PUSH
41794: LD_INT 21
41796: PUSH
41797: LD_INT 22
41799: PUSH
41800: LD_INT 23
41802: PUSH
41803: LD_INT 24
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: ST_TO_ADDR
41812: GO 41995
41814: LD_INT 49
41816: DOUBLE
41817: EQUAL
41818: IFTRUE 41822
41820: GO 41848
41822: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41823: LD_ADDR_VAR 0 3
41827: PUSH
41828: LD_INT 21
41830: PUSH
41831: LD_INT 22
41833: PUSH
41834: LD_INT 23
41836: PUSH
41837: LD_INT 24
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: ST_TO_ADDR
41846: GO 41995
41848: LD_INT 51
41850: DOUBLE
41851: EQUAL
41852: IFTRUE 41856
41854: GO 41882
41856: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41857: LD_ADDR_VAR 0 3
41861: PUSH
41862: LD_INT 21
41864: PUSH
41865: LD_INT 22
41867: PUSH
41868: LD_INT 23
41870: PUSH
41871: LD_INT 24
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: ST_TO_ADDR
41880: GO 41995
41882: LD_INT 52
41884: DOUBLE
41885: EQUAL
41886: IFTRUE 41890
41888: GO 41916
41890: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41891: LD_ADDR_VAR 0 3
41895: PUSH
41896: LD_INT 21
41898: PUSH
41899: LD_INT 22
41901: PUSH
41902: LD_INT 23
41904: PUSH
41905: LD_INT 24
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: ST_TO_ADDR
41914: GO 41995
41916: LD_INT 53
41918: DOUBLE
41919: EQUAL
41920: IFTRUE 41924
41922: GO 41942
41924: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41925: LD_ADDR_VAR 0 3
41929: PUSH
41930: LD_INT 23
41932: PUSH
41933: LD_INT 24
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: ST_TO_ADDR
41940: GO 41995
41942: LD_INT 46
41944: DOUBLE
41945: EQUAL
41946: IFTRUE 41950
41948: GO 41968
41950: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41951: LD_ADDR_VAR 0 3
41955: PUSH
41956: LD_INT 23
41958: PUSH
41959: LD_INT 24
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: ST_TO_ADDR
41966: GO 41995
41968: LD_INT 47
41970: DOUBLE
41971: EQUAL
41972: IFTRUE 41976
41974: GO 41994
41976: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41977: LD_ADDR_VAR 0 3
41981: PUSH
41982: LD_INT 23
41984: PUSH
41985: LD_INT 24
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: ST_TO_ADDR
41992: GO 41995
41994: POP
// result := ( chassis in result ) ;
41995: LD_ADDR_VAR 0 3
41999: PUSH
42000: LD_VAR 0 1
42004: PUSH
42005: LD_VAR 0 3
42009: IN
42010: ST_TO_ADDR
// end ;
42011: LD_VAR 0 3
42015: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42016: LD_INT 0
42018: PPUSH
42019: PPUSH
42020: PPUSH
42021: PPUSH
42022: PPUSH
42023: PPUSH
42024: PPUSH
// result := array ;
42025: LD_ADDR_VAR 0 5
42029: PUSH
42030: LD_VAR 0 1
42034: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42035: LD_VAR 0 1
42039: NOT
42040: PUSH
42041: LD_VAR 0 2
42045: NOT
42046: OR
42047: PUSH
42048: LD_VAR 0 3
42052: NOT
42053: OR
42054: PUSH
42055: LD_VAR 0 2
42059: PUSH
42060: LD_VAR 0 1
42064: GREATER
42065: OR
42066: PUSH
42067: LD_VAR 0 3
42071: PUSH
42072: LD_VAR 0 1
42076: GREATER
42077: OR
42078: IFFALSE 42082
// exit ;
42080: GO 42378
// if direction then
42082: LD_VAR 0 4
42086: IFFALSE 42150
// begin d := 1 ;
42088: LD_ADDR_VAR 0 9
42092: PUSH
42093: LD_INT 1
42095: ST_TO_ADDR
// if i_from > i_to then
42096: LD_VAR 0 2
42100: PUSH
42101: LD_VAR 0 3
42105: GREATER
42106: IFFALSE 42132
// length := ( array - i_from ) + i_to else
42108: LD_ADDR_VAR 0 11
42112: PUSH
42113: LD_VAR 0 1
42117: PUSH
42118: LD_VAR 0 2
42122: MINUS
42123: PUSH
42124: LD_VAR 0 3
42128: PLUS
42129: ST_TO_ADDR
42130: GO 42148
// length := i_to - i_from ;
42132: LD_ADDR_VAR 0 11
42136: PUSH
42137: LD_VAR 0 3
42141: PUSH
42142: LD_VAR 0 2
42146: MINUS
42147: ST_TO_ADDR
// end else
42148: GO 42211
// begin d := - 1 ;
42150: LD_ADDR_VAR 0 9
42154: PUSH
42155: LD_INT 1
42157: NEG
42158: ST_TO_ADDR
// if i_from > i_to then
42159: LD_VAR 0 2
42163: PUSH
42164: LD_VAR 0 3
42168: GREATER
42169: IFFALSE 42189
// length := i_from - i_to else
42171: LD_ADDR_VAR 0 11
42175: PUSH
42176: LD_VAR 0 2
42180: PUSH
42181: LD_VAR 0 3
42185: MINUS
42186: ST_TO_ADDR
42187: GO 42211
// length := ( array - i_to ) + i_from ;
42189: LD_ADDR_VAR 0 11
42193: PUSH
42194: LD_VAR 0 1
42198: PUSH
42199: LD_VAR 0 3
42203: MINUS
42204: PUSH
42205: LD_VAR 0 2
42209: PLUS
42210: ST_TO_ADDR
// end ; if not length then
42211: LD_VAR 0 11
42215: NOT
42216: IFFALSE 42220
// exit ;
42218: GO 42378
// tmp := array ;
42220: LD_ADDR_VAR 0 10
42224: PUSH
42225: LD_VAR 0 1
42229: ST_TO_ADDR
// for i = 1 to length do
42230: LD_ADDR_VAR 0 6
42234: PUSH
42235: DOUBLE
42236: LD_INT 1
42238: DEC
42239: ST_TO_ADDR
42240: LD_VAR 0 11
42244: PUSH
42245: FOR_TO
42246: IFFALSE 42366
// begin for j = 1 to array do
42248: LD_ADDR_VAR 0 7
42252: PUSH
42253: DOUBLE
42254: LD_INT 1
42256: DEC
42257: ST_TO_ADDR
42258: LD_VAR 0 1
42262: PUSH
42263: FOR_TO
42264: IFFALSE 42352
// begin k := j + d ;
42266: LD_ADDR_VAR 0 8
42270: PUSH
42271: LD_VAR 0 7
42275: PUSH
42276: LD_VAR 0 9
42280: PLUS
42281: ST_TO_ADDR
// if k > array then
42282: LD_VAR 0 8
42286: PUSH
42287: LD_VAR 0 1
42291: GREATER
42292: IFFALSE 42302
// k := 1 ;
42294: LD_ADDR_VAR 0 8
42298: PUSH
42299: LD_INT 1
42301: ST_TO_ADDR
// if not k then
42302: LD_VAR 0 8
42306: NOT
42307: IFFALSE 42319
// k := array ;
42309: LD_ADDR_VAR 0 8
42313: PUSH
42314: LD_VAR 0 1
42318: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42319: LD_ADDR_VAR 0 10
42323: PUSH
42324: LD_VAR 0 10
42328: PPUSH
42329: LD_VAR 0 8
42333: PPUSH
42334: LD_VAR 0 1
42338: PUSH
42339: LD_VAR 0 7
42343: ARRAY
42344: PPUSH
42345: CALL_OW 1
42349: ST_TO_ADDR
// end ;
42350: GO 42263
42352: POP
42353: POP
// array := tmp ;
42354: LD_ADDR_VAR 0 1
42358: PUSH
42359: LD_VAR 0 10
42363: ST_TO_ADDR
// end ;
42364: GO 42245
42366: POP
42367: POP
// result := array ;
42368: LD_ADDR_VAR 0 5
42372: PUSH
42373: LD_VAR 0 1
42377: ST_TO_ADDR
// end ;
42378: LD_VAR 0 5
42382: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42383: LD_INT 0
42385: PPUSH
42386: PPUSH
// result := 0 ;
42387: LD_ADDR_VAR 0 3
42391: PUSH
42392: LD_INT 0
42394: ST_TO_ADDR
// if not array or not value in array then
42395: LD_VAR 0 1
42399: NOT
42400: PUSH
42401: LD_VAR 0 2
42405: PUSH
42406: LD_VAR 0 1
42410: IN
42411: NOT
42412: OR
42413: IFFALSE 42417
// exit ;
42415: GO 42471
// for i = 1 to array do
42417: LD_ADDR_VAR 0 4
42421: PUSH
42422: DOUBLE
42423: LD_INT 1
42425: DEC
42426: ST_TO_ADDR
42427: LD_VAR 0 1
42431: PUSH
42432: FOR_TO
42433: IFFALSE 42469
// if value = array [ i ] then
42435: LD_VAR 0 2
42439: PUSH
42440: LD_VAR 0 1
42444: PUSH
42445: LD_VAR 0 4
42449: ARRAY
42450: EQUAL
42451: IFFALSE 42467
// begin result := i ;
42453: LD_ADDR_VAR 0 3
42457: PUSH
42458: LD_VAR 0 4
42462: ST_TO_ADDR
// exit ;
42463: POP
42464: POP
42465: GO 42471
// end ;
42467: GO 42432
42469: POP
42470: POP
// end ;
42471: LD_VAR 0 3
42475: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42476: LD_INT 0
42478: PPUSH
// vc_chassis := chassis ;
42479: LD_ADDR_OWVAR 37
42483: PUSH
42484: LD_VAR 0 1
42488: ST_TO_ADDR
// vc_engine := engine ;
42489: LD_ADDR_OWVAR 39
42493: PUSH
42494: LD_VAR 0 2
42498: ST_TO_ADDR
// vc_control := control ;
42499: LD_ADDR_OWVAR 38
42503: PUSH
42504: LD_VAR 0 3
42508: ST_TO_ADDR
// vc_weapon := weapon ;
42509: LD_ADDR_OWVAR 40
42513: PUSH
42514: LD_VAR 0 4
42518: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42519: LD_ADDR_OWVAR 41
42523: PUSH
42524: LD_VAR 0 5
42528: ST_TO_ADDR
// end ;
42529: LD_VAR 0 6
42533: RET
// export function WantPlant ( unit ) ; var task ; begin
42534: LD_INT 0
42536: PPUSH
42537: PPUSH
// result := false ;
42538: LD_ADDR_VAR 0 2
42542: PUSH
42543: LD_INT 0
42545: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42546: LD_ADDR_VAR 0 3
42550: PUSH
42551: LD_VAR 0 1
42555: PPUSH
42556: CALL_OW 437
42560: ST_TO_ADDR
// if task then
42561: LD_VAR 0 3
42565: IFFALSE 42593
// if task [ 1 ] [ 1 ] = p then
42567: LD_VAR 0 3
42571: PUSH
42572: LD_INT 1
42574: ARRAY
42575: PUSH
42576: LD_INT 1
42578: ARRAY
42579: PUSH
42580: LD_STRING p
42582: EQUAL
42583: IFFALSE 42593
// result := true ;
42585: LD_ADDR_VAR 0 2
42589: PUSH
42590: LD_INT 1
42592: ST_TO_ADDR
// end ;
42593: LD_VAR 0 2
42597: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42598: LD_INT 0
42600: PPUSH
42601: PPUSH
42602: PPUSH
42603: PPUSH
// if pos < 1 then
42604: LD_VAR 0 2
42608: PUSH
42609: LD_INT 1
42611: LESS
42612: IFFALSE 42616
// exit ;
42614: GO 42919
// if pos = 1 then
42616: LD_VAR 0 2
42620: PUSH
42621: LD_INT 1
42623: EQUAL
42624: IFFALSE 42657
// result := Replace ( arr , pos [ 1 ] , value ) else
42626: LD_ADDR_VAR 0 4
42630: PUSH
42631: LD_VAR 0 1
42635: PPUSH
42636: LD_VAR 0 2
42640: PUSH
42641: LD_INT 1
42643: ARRAY
42644: PPUSH
42645: LD_VAR 0 3
42649: PPUSH
42650: CALL_OW 1
42654: ST_TO_ADDR
42655: GO 42919
// begin tmp := arr ;
42657: LD_ADDR_VAR 0 6
42661: PUSH
42662: LD_VAR 0 1
42666: ST_TO_ADDR
// s_arr := [ tmp ] ;
42667: LD_ADDR_VAR 0 7
42671: PUSH
42672: LD_VAR 0 6
42676: PUSH
42677: EMPTY
42678: LIST
42679: ST_TO_ADDR
// for i = 1 to pos - 1 do
42680: LD_ADDR_VAR 0 5
42684: PUSH
42685: DOUBLE
42686: LD_INT 1
42688: DEC
42689: ST_TO_ADDR
42690: LD_VAR 0 2
42694: PUSH
42695: LD_INT 1
42697: MINUS
42698: PUSH
42699: FOR_TO
42700: IFFALSE 42745
// begin tmp := tmp [ pos [ i ] ] ;
42702: LD_ADDR_VAR 0 6
42706: PUSH
42707: LD_VAR 0 6
42711: PUSH
42712: LD_VAR 0 2
42716: PUSH
42717: LD_VAR 0 5
42721: ARRAY
42722: ARRAY
42723: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42724: LD_ADDR_VAR 0 7
42728: PUSH
42729: LD_VAR 0 7
42733: PUSH
42734: LD_VAR 0 6
42738: PUSH
42739: EMPTY
42740: LIST
42741: ADD
42742: ST_TO_ADDR
// end ;
42743: GO 42699
42745: POP
42746: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42747: LD_ADDR_VAR 0 6
42751: PUSH
42752: LD_VAR 0 6
42756: PPUSH
42757: LD_VAR 0 2
42761: PUSH
42762: LD_VAR 0 2
42766: ARRAY
42767: PPUSH
42768: LD_VAR 0 3
42772: PPUSH
42773: CALL_OW 1
42777: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42778: LD_ADDR_VAR 0 7
42782: PUSH
42783: LD_VAR 0 7
42787: PPUSH
42788: LD_VAR 0 7
42792: PPUSH
42793: LD_VAR 0 6
42797: PPUSH
42798: CALL_OW 1
42802: ST_TO_ADDR
// for i = s_arr downto 2 do
42803: LD_ADDR_VAR 0 5
42807: PUSH
42808: DOUBLE
42809: LD_VAR 0 7
42813: INC
42814: ST_TO_ADDR
42815: LD_INT 2
42817: PUSH
42818: FOR_DOWNTO
42819: IFFALSE 42903
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42821: LD_ADDR_VAR 0 6
42825: PUSH
42826: LD_VAR 0 7
42830: PUSH
42831: LD_VAR 0 5
42835: PUSH
42836: LD_INT 1
42838: MINUS
42839: ARRAY
42840: PPUSH
42841: LD_VAR 0 2
42845: PUSH
42846: LD_VAR 0 5
42850: PUSH
42851: LD_INT 1
42853: MINUS
42854: ARRAY
42855: PPUSH
42856: LD_VAR 0 7
42860: PUSH
42861: LD_VAR 0 5
42865: ARRAY
42866: PPUSH
42867: CALL_OW 1
42871: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42872: LD_ADDR_VAR 0 7
42876: PUSH
42877: LD_VAR 0 7
42881: PPUSH
42882: LD_VAR 0 5
42886: PUSH
42887: LD_INT 1
42889: MINUS
42890: PPUSH
42891: LD_VAR 0 6
42895: PPUSH
42896: CALL_OW 1
42900: ST_TO_ADDR
// end ;
42901: GO 42818
42903: POP
42904: POP
// result := s_arr [ 1 ] ;
42905: LD_ADDR_VAR 0 4
42909: PUSH
42910: LD_VAR 0 7
42914: PUSH
42915: LD_INT 1
42917: ARRAY
42918: ST_TO_ADDR
// end ; end ;
42919: LD_VAR 0 4
42923: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42924: LD_INT 0
42926: PPUSH
42927: PPUSH
// if not list then
42928: LD_VAR 0 1
42932: NOT
42933: IFFALSE 42937
// exit ;
42935: GO 43028
// i := list [ pos1 ] ;
42937: LD_ADDR_VAR 0 5
42941: PUSH
42942: LD_VAR 0 1
42946: PUSH
42947: LD_VAR 0 2
42951: ARRAY
42952: ST_TO_ADDR
// if not i then
42953: LD_VAR 0 5
42957: NOT
42958: IFFALSE 42962
// exit ;
42960: GO 43028
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42962: LD_ADDR_VAR 0 1
42966: PUSH
42967: LD_VAR 0 1
42971: PPUSH
42972: LD_VAR 0 2
42976: PPUSH
42977: LD_VAR 0 1
42981: PUSH
42982: LD_VAR 0 3
42986: ARRAY
42987: PPUSH
42988: CALL_OW 1
42992: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42993: LD_ADDR_VAR 0 1
42997: PUSH
42998: LD_VAR 0 1
43002: PPUSH
43003: LD_VAR 0 3
43007: PPUSH
43008: LD_VAR 0 5
43012: PPUSH
43013: CALL_OW 1
43017: ST_TO_ADDR
// result := list ;
43018: LD_ADDR_VAR 0 4
43022: PUSH
43023: LD_VAR 0 1
43027: ST_TO_ADDR
// end ;
43028: LD_VAR 0 4
43032: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43033: LD_INT 0
43035: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43036: LD_ADDR_VAR 0 5
43040: PUSH
43041: LD_VAR 0 1
43045: PPUSH
43046: CALL_OW 250
43050: PPUSH
43051: LD_VAR 0 1
43055: PPUSH
43056: CALL_OW 251
43060: PPUSH
43061: LD_VAR 0 2
43065: PPUSH
43066: LD_VAR 0 3
43070: PPUSH
43071: LD_VAR 0 4
43075: PPUSH
43076: CALL 43454 0 5
43080: ST_TO_ADDR
// end ;
43081: LD_VAR 0 5
43085: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
43086: LD_INT 0
43088: PPUSH
43089: PPUSH
43090: PPUSH
43091: PPUSH
// if not list or not unit then
43092: LD_VAR 0 2
43096: NOT
43097: PUSH
43098: LD_VAR 0 1
43102: NOT
43103: OR
43104: IFFALSE 43108
// exit ;
43106: GO 43449
// result := [ ] ;
43108: LD_ADDR_VAR 0 5
43112: PUSH
43113: EMPTY
43114: ST_TO_ADDR
// for i in list do
43115: LD_ADDR_VAR 0 6
43119: PUSH
43120: LD_VAR 0 2
43124: PUSH
43125: FOR_IN
43126: IFFALSE 43344
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43128: LD_ADDR_VAR 0 8
43132: PUSH
43133: LD_VAR 0 1
43137: PPUSH
43138: LD_VAR 0 6
43142: PUSH
43143: LD_INT 1
43145: ARRAY
43146: PPUSH
43147: LD_VAR 0 6
43151: PUSH
43152: LD_INT 2
43154: ARRAY
43155: PPUSH
43156: CALL_OW 297
43160: ST_TO_ADDR
// if not Count ( result ) then
43161: LD_VAR 0 5
43165: PPUSH
43166: CALL 39738 0 1
43170: NOT
43171: IFFALSE 43204
// begin result := Join ( result , [ i , tmp ] ) ;
43173: LD_ADDR_VAR 0 5
43177: PUSH
43178: LD_VAR 0 5
43182: PPUSH
43183: LD_VAR 0 6
43187: PUSH
43188: LD_VAR 0 8
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PPUSH
43197: CALL 75338 0 2
43201: ST_TO_ADDR
// continue ;
43202: GO 43125
// end ; if result [ result ] [ 2 ] <= tmp then
43204: LD_VAR 0 5
43208: PUSH
43209: LD_VAR 0 5
43213: ARRAY
43214: PUSH
43215: LD_INT 2
43217: ARRAY
43218: PUSH
43219: LD_VAR 0 8
43223: LESSEQUAL
43224: IFFALSE 43257
// result := Join ( result , [ i , tmp ] ) else
43226: LD_ADDR_VAR 0 5
43230: PUSH
43231: LD_VAR 0 5
43235: PPUSH
43236: LD_VAR 0 6
43240: PUSH
43241: LD_VAR 0 8
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PPUSH
43250: CALL 75338 0 2
43254: ST_TO_ADDR
43255: GO 43342
// begin for j := 1 to Count ( result ) do
43257: LD_ADDR_VAR 0 7
43261: PUSH
43262: DOUBLE
43263: LD_INT 1
43265: DEC
43266: ST_TO_ADDR
43267: LD_VAR 0 5
43271: PPUSH
43272: CALL 39738 0 1
43276: PUSH
43277: FOR_TO
43278: IFFALSE 43340
// begin if tmp < result [ j ] [ 2 ] then
43280: LD_VAR 0 8
43284: PUSH
43285: LD_VAR 0 5
43289: PUSH
43290: LD_VAR 0 7
43294: ARRAY
43295: PUSH
43296: LD_INT 2
43298: ARRAY
43299: LESS
43300: IFFALSE 43338
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43302: LD_ADDR_VAR 0 5
43306: PUSH
43307: LD_VAR 0 5
43311: PPUSH
43312: LD_VAR 0 7
43316: PPUSH
43317: LD_VAR 0 6
43321: PUSH
43322: LD_VAR 0 8
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PPUSH
43331: CALL_OW 2
43335: ST_TO_ADDR
// break ;
43336: GO 43340
// end ; end ;
43338: GO 43277
43340: POP
43341: POP
// end ; end ;
43342: GO 43125
43344: POP
43345: POP
// if result and not asc then
43346: LD_VAR 0 5
43350: PUSH
43351: LD_VAR 0 3
43355: NOT
43356: AND
43357: IFFALSE 43374
// result := ReverseArray ( result ) ;
43359: LD_ADDR_VAR 0 5
43363: PUSH
43364: LD_VAR 0 5
43368: PPUSH
43369: CALL 70614 0 1
43373: ST_TO_ADDR
// tmp := [ ] ;
43374: LD_ADDR_VAR 0 8
43378: PUSH
43379: EMPTY
43380: ST_TO_ADDR
// if mode then
43381: LD_VAR 0 4
43385: IFFALSE 43449
// begin for i := 1 to result do
43387: LD_ADDR_VAR 0 6
43391: PUSH
43392: DOUBLE
43393: LD_INT 1
43395: DEC
43396: ST_TO_ADDR
43397: LD_VAR 0 5
43401: PUSH
43402: FOR_TO
43403: IFFALSE 43437
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
43405: LD_ADDR_VAR 0 8
43409: PUSH
43410: LD_VAR 0 8
43414: PPUSH
43415: LD_VAR 0 5
43419: PUSH
43420: LD_VAR 0 6
43424: ARRAY
43425: PUSH
43426: LD_INT 1
43428: ARRAY
43429: PPUSH
43430: CALL 75338 0 2
43434: ST_TO_ADDR
43435: GO 43402
43437: POP
43438: POP
// result := tmp ;
43439: LD_ADDR_VAR 0 5
43443: PUSH
43444: LD_VAR 0 8
43448: ST_TO_ADDR
// end ; end ;
43449: LD_VAR 0 5
43453: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43454: LD_INT 0
43456: PPUSH
43457: PPUSH
43458: PPUSH
43459: PPUSH
// if not list then
43460: LD_VAR 0 3
43464: NOT
43465: IFFALSE 43469
// exit ;
43467: GO 43857
// result := [ ] ;
43469: LD_ADDR_VAR 0 6
43473: PUSH
43474: EMPTY
43475: ST_TO_ADDR
// for i in list do
43476: LD_ADDR_VAR 0 7
43480: PUSH
43481: LD_VAR 0 3
43485: PUSH
43486: FOR_IN
43487: IFFALSE 43689
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43489: LD_ADDR_VAR 0 9
43493: PUSH
43494: LD_VAR 0 7
43498: PPUSH
43499: LD_VAR 0 1
43503: PPUSH
43504: LD_VAR 0 2
43508: PPUSH
43509: CALL_OW 297
43513: ST_TO_ADDR
// if not result then
43514: LD_VAR 0 6
43518: NOT
43519: IFFALSE 43545
// result := [ [ i , tmp ] ] else
43521: LD_ADDR_VAR 0 6
43525: PUSH
43526: LD_VAR 0 7
43530: PUSH
43531: LD_VAR 0 9
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: EMPTY
43541: LIST
43542: ST_TO_ADDR
43543: GO 43687
// begin if result [ result ] [ 2 ] < tmp then
43545: LD_VAR 0 6
43549: PUSH
43550: LD_VAR 0 6
43554: ARRAY
43555: PUSH
43556: LD_INT 2
43558: ARRAY
43559: PUSH
43560: LD_VAR 0 9
43564: LESS
43565: IFFALSE 43607
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43567: LD_ADDR_VAR 0 6
43571: PUSH
43572: LD_VAR 0 6
43576: PPUSH
43577: LD_VAR 0 6
43581: PUSH
43582: LD_INT 1
43584: PLUS
43585: PPUSH
43586: LD_VAR 0 7
43590: PUSH
43591: LD_VAR 0 9
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PPUSH
43600: CALL_OW 2
43604: ST_TO_ADDR
43605: GO 43687
// for j = 1 to result do
43607: LD_ADDR_VAR 0 8
43611: PUSH
43612: DOUBLE
43613: LD_INT 1
43615: DEC
43616: ST_TO_ADDR
43617: LD_VAR 0 6
43621: PUSH
43622: FOR_TO
43623: IFFALSE 43685
// begin if tmp < result [ j ] [ 2 ] then
43625: LD_VAR 0 9
43629: PUSH
43630: LD_VAR 0 6
43634: PUSH
43635: LD_VAR 0 8
43639: ARRAY
43640: PUSH
43641: LD_INT 2
43643: ARRAY
43644: LESS
43645: IFFALSE 43683
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43647: LD_ADDR_VAR 0 6
43651: PUSH
43652: LD_VAR 0 6
43656: PPUSH
43657: LD_VAR 0 8
43661: PPUSH
43662: LD_VAR 0 7
43666: PUSH
43667: LD_VAR 0 9
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PPUSH
43676: CALL_OW 2
43680: ST_TO_ADDR
// break ;
43681: GO 43685
// end ; end ;
43683: GO 43622
43685: POP
43686: POP
// end ; end ;
43687: GO 43486
43689: POP
43690: POP
// if result and not asc then
43691: LD_VAR 0 6
43695: PUSH
43696: LD_VAR 0 4
43700: NOT
43701: AND
43702: IFFALSE 43777
// begin tmp := result ;
43704: LD_ADDR_VAR 0 9
43708: PUSH
43709: LD_VAR 0 6
43713: ST_TO_ADDR
// for i = tmp downto 1 do
43714: LD_ADDR_VAR 0 7
43718: PUSH
43719: DOUBLE
43720: LD_VAR 0 9
43724: INC
43725: ST_TO_ADDR
43726: LD_INT 1
43728: PUSH
43729: FOR_DOWNTO
43730: IFFALSE 43775
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43732: LD_ADDR_VAR 0 6
43736: PUSH
43737: LD_VAR 0 6
43741: PPUSH
43742: LD_VAR 0 9
43746: PUSH
43747: LD_VAR 0 7
43751: MINUS
43752: PUSH
43753: LD_INT 1
43755: PLUS
43756: PPUSH
43757: LD_VAR 0 9
43761: PUSH
43762: LD_VAR 0 7
43766: ARRAY
43767: PPUSH
43768: CALL_OW 1
43772: ST_TO_ADDR
43773: GO 43729
43775: POP
43776: POP
// end ; tmp := [ ] ;
43777: LD_ADDR_VAR 0 9
43781: PUSH
43782: EMPTY
43783: ST_TO_ADDR
// if mode then
43784: LD_VAR 0 5
43788: IFFALSE 43857
// begin for i = 1 to result do
43790: LD_ADDR_VAR 0 7
43794: PUSH
43795: DOUBLE
43796: LD_INT 1
43798: DEC
43799: ST_TO_ADDR
43800: LD_VAR 0 6
43804: PUSH
43805: FOR_TO
43806: IFFALSE 43845
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43808: LD_ADDR_VAR 0 9
43812: PUSH
43813: LD_VAR 0 9
43817: PPUSH
43818: LD_VAR 0 7
43822: PPUSH
43823: LD_VAR 0 6
43827: PUSH
43828: LD_VAR 0 7
43832: ARRAY
43833: PUSH
43834: LD_INT 1
43836: ARRAY
43837: PPUSH
43838: CALL_OW 1
43842: ST_TO_ADDR
43843: GO 43805
43845: POP
43846: POP
// result := tmp ;
43847: LD_ADDR_VAR 0 6
43851: PUSH
43852: LD_VAR 0 9
43856: ST_TO_ADDR
// end ; end ;
43857: LD_VAR 0 6
43861: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43862: LD_INT 0
43864: PPUSH
43865: PPUSH
43866: PPUSH
43867: PPUSH
43868: PPUSH
43869: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43870: LD_ADDR_VAR 0 5
43874: PUSH
43875: LD_INT 0
43877: PUSH
43878: LD_INT 0
43880: PUSH
43881: LD_INT 0
43883: PUSH
43884: EMPTY
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: ST_TO_ADDR
// if not x or not y then
43892: LD_VAR 0 2
43896: NOT
43897: PUSH
43898: LD_VAR 0 3
43902: NOT
43903: OR
43904: IFFALSE 43908
// exit ;
43906: GO 45558
// if not range then
43908: LD_VAR 0 4
43912: NOT
43913: IFFALSE 43923
// range := 10 ;
43915: LD_ADDR_VAR 0 4
43919: PUSH
43920: LD_INT 10
43922: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43923: LD_ADDR_VAR 0 8
43927: PUSH
43928: LD_INT 81
43930: PUSH
43931: LD_VAR 0 1
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 92
43942: PUSH
43943: LD_VAR 0 2
43947: PUSH
43948: LD_VAR 0 3
43952: PUSH
43953: LD_VAR 0 4
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 3
43966: PUSH
43967: LD_INT 21
43969: PUSH
43970: LD_INT 3
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: LIST
43985: PPUSH
43986: CALL_OW 69
43990: ST_TO_ADDR
// if not tmp then
43991: LD_VAR 0 8
43995: NOT
43996: IFFALSE 44000
// exit ;
43998: GO 45558
// for i in tmp do
44000: LD_ADDR_VAR 0 6
44004: PUSH
44005: LD_VAR 0 8
44009: PUSH
44010: FOR_IN
44011: IFFALSE 45533
// begin points := [ 0 , 0 , 0 ] ;
44013: LD_ADDR_VAR 0 9
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: LD_INT 0
44023: PUSH
44024: LD_INT 0
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: LIST
44031: ST_TO_ADDR
// bpoints := 1 ;
44032: LD_ADDR_VAR 0 10
44036: PUSH
44037: LD_INT 1
44039: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44040: LD_VAR 0 6
44044: PPUSH
44045: CALL_OW 247
44049: PUSH
44050: LD_INT 1
44052: DOUBLE
44053: EQUAL
44054: IFTRUE 44058
44056: GO 44636
44058: POP
// begin if GetClass ( i ) = 1 then
44059: LD_VAR 0 6
44063: PPUSH
44064: CALL_OW 257
44068: PUSH
44069: LD_INT 1
44071: EQUAL
44072: IFFALSE 44093
// points := [ 10 , 5 , 3 ] ;
44074: LD_ADDR_VAR 0 9
44078: PUSH
44079: LD_INT 10
44081: PUSH
44082: LD_INT 5
44084: PUSH
44085: LD_INT 3
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: LIST
44092: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44093: LD_VAR 0 6
44097: PPUSH
44098: CALL_OW 257
44102: PUSH
44103: LD_INT 2
44105: PUSH
44106: LD_INT 3
44108: PUSH
44109: LD_INT 4
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: LIST
44116: IN
44117: IFFALSE 44138
// points := [ 3 , 2 , 1 ] ;
44119: LD_ADDR_VAR 0 9
44123: PUSH
44124: LD_INT 3
44126: PUSH
44127: LD_INT 2
44129: PUSH
44130: LD_INT 1
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: LIST
44137: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44138: LD_VAR 0 6
44142: PPUSH
44143: CALL_OW 257
44147: PUSH
44148: LD_INT 5
44150: EQUAL
44151: IFFALSE 44172
// points := [ 130 , 5 , 2 ] ;
44153: LD_ADDR_VAR 0 9
44157: PUSH
44158: LD_INT 130
44160: PUSH
44161: LD_INT 5
44163: PUSH
44164: LD_INT 2
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: LIST
44171: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44172: LD_VAR 0 6
44176: PPUSH
44177: CALL_OW 257
44181: PUSH
44182: LD_INT 8
44184: EQUAL
44185: IFFALSE 44206
// points := [ 35 , 35 , 30 ] ;
44187: LD_ADDR_VAR 0 9
44191: PUSH
44192: LD_INT 35
44194: PUSH
44195: LD_INT 35
44197: PUSH
44198: LD_INT 30
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: LIST
44205: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44206: LD_VAR 0 6
44210: PPUSH
44211: CALL_OW 257
44215: PUSH
44216: LD_INT 9
44218: EQUAL
44219: IFFALSE 44240
// points := [ 20 , 55 , 40 ] ;
44221: LD_ADDR_VAR 0 9
44225: PUSH
44226: LD_INT 20
44228: PUSH
44229: LD_INT 55
44231: PUSH
44232: LD_INT 40
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: LIST
44239: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44240: LD_VAR 0 6
44244: PPUSH
44245: CALL_OW 257
44249: PUSH
44250: LD_INT 12
44252: PUSH
44253: LD_INT 16
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: IN
44260: IFFALSE 44281
// points := [ 5 , 3 , 2 ] ;
44262: LD_ADDR_VAR 0 9
44266: PUSH
44267: LD_INT 5
44269: PUSH
44270: LD_INT 3
44272: PUSH
44273: LD_INT 2
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: LIST
44280: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44281: LD_VAR 0 6
44285: PPUSH
44286: CALL_OW 257
44290: PUSH
44291: LD_INT 17
44293: EQUAL
44294: IFFALSE 44315
// points := [ 100 , 50 , 75 ] ;
44296: LD_ADDR_VAR 0 9
44300: PUSH
44301: LD_INT 100
44303: PUSH
44304: LD_INT 50
44306: PUSH
44307: LD_INT 75
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: LIST
44314: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44315: LD_VAR 0 6
44319: PPUSH
44320: CALL_OW 257
44324: PUSH
44325: LD_INT 15
44327: EQUAL
44328: IFFALSE 44349
// points := [ 10 , 5 , 3 ] ;
44330: LD_ADDR_VAR 0 9
44334: PUSH
44335: LD_INT 10
44337: PUSH
44338: LD_INT 5
44340: PUSH
44341: LD_INT 3
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: LIST
44348: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44349: LD_VAR 0 6
44353: PPUSH
44354: CALL_OW 257
44358: PUSH
44359: LD_INT 14
44361: EQUAL
44362: IFFALSE 44383
// points := [ 10 , 0 , 0 ] ;
44364: LD_ADDR_VAR 0 9
44368: PUSH
44369: LD_INT 10
44371: PUSH
44372: LD_INT 0
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: LIST
44382: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44383: LD_VAR 0 6
44387: PPUSH
44388: CALL_OW 257
44392: PUSH
44393: LD_INT 11
44395: EQUAL
44396: IFFALSE 44417
// points := [ 30 , 10 , 5 ] ;
44398: LD_ADDR_VAR 0 9
44402: PUSH
44403: LD_INT 30
44405: PUSH
44406: LD_INT 10
44408: PUSH
44409: LD_INT 5
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: LIST
44416: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44417: LD_VAR 0 1
44421: PPUSH
44422: LD_INT 5
44424: PPUSH
44425: CALL_OW 321
44429: PUSH
44430: LD_INT 2
44432: EQUAL
44433: IFFALSE 44450
// bpoints := bpoints * 1.8 ;
44435: LD_ADDR_VAR 0 10
44439: PUSH
44440: LD_VAR 0 10
44444: PUSH
44445: LD_REAL  1.80000000000000E+0000
44448: MUL
44449: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44450: LD_VAR 0 6
44454: PPUSH
44455: CALL_OW 257
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: LD_INT 2
44465: PUSH
44466: LD_INT 3
44468: PUSH
44469: LD_INT 4
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: IN
44478: PUSH
44479: LD_VAR 0 1
44483: PPUSH
44484: LD_INT 51
44486: PPUSH
44487: CALL_OW 321
44491: PUSH
44492: LD_INT 2
44494: EQUAL
44495: AND
44496: IFFALSE 44513
// bpoints := bpoints * 1.2 ;
44498: LD_ADDR_VAR 0 10
44502: PUSH
44503: LD_VAR 0 10
44507: PUSH
44508: LD_REAL  1.20000000000000E+0000
44511: MUL
44512: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44513: LD_VAR 0 6
44517: PPUSH
44518: CALL_OW 257
44522: PUSH
44523: LD_INT 5
44525: PUSH
44526: LD_INT 7
44528: PUSH
44529: LD_INT 9
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: LIST
44536: IN
44537: PUSH
44538: LD_VAR 0 1
44542: PPUSH
44543: LD_INT 52
44545: PPUSH
44546: CALL_OW 321
44550: PUSH
44551: LD_INT 2
44553: EQUAL
44554: AND
44555: IFFALSE 44572
// bpoints := bpoints * 1.5 ;
44557: LD_ADDR_VAR 0 10
44561: PUSH
44562: LD_VAR 0 10
44566: PUSH
44567: LD_REAL  1.50000000000000E+0000
44570: MUL
44571: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44572: LD_VAR 0 1
44576: PPUSH
44577: LD_INT 66
44579: PPUSH
44580: CALL_OW 321
44584: PUSH
44585: LD_INT 2
44587: EQUAL
44588: IFFALSE 44605
// bpoints := bpoints * 1.1 ;
44590: LD_ADDR_VAR 0 10
44594: PUSH
44595: LD_VAR 0 10
44599: PUSH
44600: LD_REAL  1.10000000000000E+0000
44603: MUL
44604: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44605: LD_ADDR_VAR 0 10
44609: PUSH
44610: LD_VAR 0 10
44614: PUSH
44615: LD_VAR 0 6
44619: PPUSH
44620: LD_INT 1
44622: PPUSH
44623: CALL_OW 259
44627: PUSH
44628: LD_REAL  1.15000000000000E+0000
44631: MUL
44632: MUL
44633: ST_TO_ADDR
// end ; unit_vehicle :
44634: GO 45462
44636: LD_INT 2
44638: DOUBLE
44639: EQUAL
44640: IFTRUE 44644
44642: GO 45450
44644: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44645: LD_VAR 0 6
44649: PPUSH
44650: CALL_OW 264
44654: PUSH
44655: LD_INT 2
44657: PUSH
44658: LD_INT 42
44660: PUSH
44661: LD_INT 24
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: LIST
44668: IN
44669: IFFALSE 44690
// points := [ 25 , 5 , 3 ] ;
44671: LD_ADDR_VAR 0 9
44675: PUSH
44676: LD_INT 25
44678: PUSH
44679: LD_INT 5
44681: PUSH
44682: LD_INT 3
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: LIST
44689: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44690: LD_VAR 0 6
44694: PPUSH
44695: CALL_OW 264
44699: PUSH
44700: LD_INT 4
44702: PUSH
44703: LD_INT 43
44705: PUSH
44706: LD_INT 25
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: LIST
44713: IN
44714: IFFALSE 44735
// points := [ 40 , 15 , 5 ] ;
44716: LD_ADDR_VAR 0 9
44720: PUSH
44721: LD_INT 40
44723: PUSH
44724: LD_INT 15
44726: PUSH
44727: LD_INT 5
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: LIST
44734: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44735: LD_VAR 0 6
44739: PPUSH
44740: CALL_OW 264
44744: PUSH
44745: LD_INT 3
44747: PUSH
44748: LD_INT 23
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: IN
44755: IFFALSE 44776
// points := [ 7 , 25 , 8 ] ;
44757: LD_ADDR_VAR 0 9
44761: PUSH
44762: LD_INT 7
44764: PUSH
44765: LD_INT 25
44767: PUSH
44768: LD_INT 8
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: LIST
44775: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44776: LD_VAR 0 6
44780: PPUSH
44781: CALL_OW 264
44785: PUSH
44786: LD_INT 5
44788: PUSH
44789: LD_INT 27
44791: PUSH
44792: LD_INT 44
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: LIST
44799: IN
44800: IFFALSE 44821
// points := [ 14 , 50 , 16 ] ;
44802: LD_ADDR_VAR 0 9
44806: PUSH
44807: LD_INT 14
44809: PUSH
44810: LD_INT 50
44812: PUSH
44813: LD_INT 16
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: LIST
44820: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44821: LD_VAR 0 6
44825: PPUSH
44826: CALL_OW 264
44830: PUSH
44831: LD_INT 6
44833: PUSH
44834: LD_INT 46
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: IN
44841: IFFALSE 44862
// points := [ 32 , 120 , 70 ] ;
44843: LD_ADDR_VAR 0 9
44847: PUSH
44848: LD_INT 32
44850: PUSH
44851: LD_INT 120
44853: PUSH
44854: LD_INT 70
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: LIST
44861: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44862: LD_VAR 0 6
44866: PPUSH
44867: CALL_OW 264
44871: PUSH
44872: LD_INT 7
44874: PUSH
44875: LD_INT 28
44877: PUSH
44878: LD_INT 45
44880: PUSH
44881: LD_INT 92
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: IN
44890: IFFALSE 44911
// points := [ 35 , 20 , 45 ] ;
44892: LD_ADDR_VAR 0 9
44896: PUSH
44897: LD_INT 35
44899: PUSH
44900: LD_INT 20
44902: PUSH
44903: LD_INT 45
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: LIST
44910: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44911: LD_VAR 0 6
44915: PPUSH
44916: CALL_OW 264
44920: PUSH
44921: LD_INT 47
44923: PUSH
44924: EMPTY
44925: LIST
44926: IN
44927: IFFALSE 44948
// points := [ 67 , 45 , 75 ] ;
44929: LD_ADDR_VAR 0 9
44933: PUSH
44934: LD_INT 67
44936: PUSH
44937: LD_INT 45
44939: PUSH
44940: LD_INT 75
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: LIST
44947: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44948: LD_VAR 0 6
44952: PPUSH
44953: CALL_OW 264
44957: PUSH
44958: LD_INT 26
44960: PUSH
44961: EMPTY
44962: LIST
44963: IN
44964: IFFALSE 44985
// points := [ 120 , 30 , 80 ] ;
44966: LD_ADDR_VAR 0 9
44970: PUSH
44971: LD_INT 120
44973: PUSH
44974: LD_INT 30
44976: PUSH
44977: LD_INT 80
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: LIST
44984: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44985: LD_VAR 0 6
44989: PPUSH
44990: CALL_OW 264
44994: PUSH
44995: LD_INT 22
44997: PUSH
44998: EMPTY
44999: LIST
45000: IN
45001: IFFALSE 45022
// points := [ 40 , 1 , 1 ] ;
45003: LD_ADDR_VAR 0 9
45007: PUSH
45008: LD_INT 40
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: LIST
45021: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45022: LD_VAR 0 6
45026: PPUSH
45027: CALL_OW 264
45031: PUSH
45032: LD_INT 29
45034: PUSH
45035: EMPTY
45036: LIST
45037: IN
45038: IFFALSE 45059
// points := [ 70 , 200 , 400 ] ;
45040: LD_ADDR_VAR 0 9
45044: PUSH
45045: LD_INT 70
45047: PUSH
45048: LD_INT 200
45050: PUSH
45051: LD_INT 400
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: LIST
45058: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45059: LD_VAR 0 6
45063: PPUSH
45064: CALL_OW 264
45068: PUSH
45069: LD_INT 14
45071: PUSH
45072: LD_INT 53
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: IN
45079: IFFALSE 45100
// points := [ 40 , 10 , 20 ] ;
45081: LD_ADDR_VAR 0 9
45085: PUSH
45086: LD_INT 40
45088: PUSH
45089: LD_INT 10
45091: PUSH
45092: LD_INT 20
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: LIST
45099: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45100: LD_VAR 0 6
45104: PPUSH
45105: CALL_OW 264
45109: PUSH
45110: LD_INT 9
45112: PUSH
45113: EMPTY
45114: LIST
45115: IN
45116: IFFALSE 45137
// points := [ 5 , 70 , 20 ] ;
45118: LD_ADDR_VAR 0 9
45122: PUSH
45123: LD_INT 5
45125: PUSH
45126: LD_INT 70
45128: PUSH
45129: LD_INT 20
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: LIST
45136: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45137: LD_VAR 0 6
45141: PPUSH
45142: CALL_OW 264
45146: PUSH
45147: LD_INT 10
45149: PUSH
45150: EMPTY
45151: LIST
45152: IN
45153: IFFALSE 45174
// points := [ 35 , 110 , 70 ] ;
45155: LD_ADDR_VAR 0 9
45159: PUSH
45160: LD_INT 35
45162: PUSH
45163: LD_INT 110
45165: PUSH
45166: LD_INT 70
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: LIST
45173: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45174: LD_VAR 0 6
45178: PPUSH
45179: CALL_OW 265
45183: PUSH
45184: LD_INT 25
45186: EQUAL
45187: IFFALSE 45208
// points := [ 80 , 65 , 100 ] ;
45189: LD_ADDR_VAR 0 9
45193: PUSH
45194: LD_INT 80
45196: PUSH
45197: LD_INT 65
45199: PUSH
45200: LD_INT 100
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: LIST
45207: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45208: LD_VAR 0 6
45212: PPUSH
45213: CALL_OW 263
45217: PUSH
45218: LD_INT 1
45220: EQUAL
45221: IFFALSE 45256
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45223: LD_ADDR_VAR 0 10
45227: PUSH
45228: LD_VAR 0 10
45232: PUSH
45233: LD_VAR 0 6
45237: PPUSH
45238: CALL_OW 311
45242: PPUSH
45243: LD_INT 3
45245: PPUSH
45246: CALL_OW 259
45250: PUSH
45251: LD_INT 4
45253: MUL
45254: MUL
45255: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45256: LD_VAR 0 6
45260: PPUSH
45261: CALL_OW 263
45265: PUSH
45266: LD_INT 2
45268: EQUAL
45269: IFFALSE 45320
// begin j := IsControledBy ( i ) ;
45271: LD_ADDR_VAR 0 7
45275: PUSH
45276: LD_VAR 0 6
45280: PPUSH
45281: CALL_OW 312
45285: ST_TO_ADDR
// if j then
45286: LD_VAR 0 7
45290: IFFALSE 45320
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45292: LD_ADDR_VAR 0 10
45296: PUSH
45297: LD_VAR 0 10
45301: PUSH
45302: LD_VAR 0 7
45306: PPUSH
45307: LD_INT 3
45309: PPUSH
45310: CALL_OW 259
45314: PUSH
45315: LD_INT 3
45317: MUL
45318: MUL
45319: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45320: LD_VAR 0 6
45324: PPUSH
45325: CALL_OW 264
45329: PUSH
45330: LD_INT 5
45332: PUSH
45333: LD_INT 6
45335: PUSH
45336: LD_INT 46
45338: PUSH
45339: LD_INT 44
45341: PUSH
45342: LD_INT 47
45344: PUSH
45345: LD_INT 45
45347: PUSH
45348: LD_INT 28
45350: PUSH
45351: LD_INT 7
45353: PUSH
45354: LD_INT 27
45356: PUSH
45357: LD_INT 29
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: IN
45372: PUSH
45373: LD_VAR 0 1
45377: PPUSH
45378: LD_INT 52
45380: PPUSH
45381: CALL_OW 321
45385: PUSH
45386: LD_INT 2
45388: EQUAL
45389: AND
45390: IFFALSE 45407
// bpoints := bpoints * 1.2 ;
45392: LD_ADDR_VAR 0 10
45396: PUSH
45397: LD_VAR 0 10
45401: PUSH
45402: LD_REAL  1.20000000000000E+0000
45405: MUL
45406: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45407: LD_VAR 0 6
45411: PPUSH
45412: CALL_OW 264
45416: PUSH
45417: LD_INT 6
45419: PUSH
45420: LD_INT 46
45422: PUSH
45423: LD_INT 47
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: LIST
45430: IN
45431: IFFALSE 45448
// bpoints := bpoints * 1.2 ;
45433: LD_ADDR_VAR 0 10
45437: PUSH
45438: LD_VAR 0 10
45442: PUSH
45443: LD_REAL  1.20000000000000E+0000
45446: MUL
45447: ST_TO_ADDR
// end ; unit_building :
45448: GO 45462
45450: LD_INT 3
45452: DOUBLE
45453: EQUAL
45454: IFTRUE 45458
45456: GO 45461
45458: POP
// ; end ;
45459: GO 45462
45461: POP
// for j = 1 to 3 do
45462: LD_ADDR_VAR 0 7
45466: PUSH
45467: DOUBLE
45468: LD_INT 1
45470: DEC
45471: ST_TO_ADDR
45472: LD_INT 3
45474: PUSH
45475: FOR_TO
45476: IFFALSE 45529
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45478: LD_ADDR_VAR 0 5
45482: PUSH
45483: LD_VAR 0 5
45487: PPUSH
45488: LD_VAR 0 7
45492: PPUSH
45493: LD_VAR 0 5
45497: PUSH
45498: LD_VAR 0 7
45502: ARRAY
45503: PUSH
45504: LD_VAR 0 9
45508: PUSH
45509: LD_VAR 0 7
45513: ARRAY
45514: PUSH
45515: LD_VAR 0 10
45519: MUL
45520: PLUS
45521: PPUSH
45522: CALL_OW 1
45526: ST_TO_ADDR
45527: GO 45475
45529: POP
45530: POP
// end ;
45531: GO 44010
45533: POP
45534: POP
// result := Replace ( result , 4 , tmp ) ;
45535: LD_ADDR_VAR 0 5
45539: PUSH
45540: LD_VAR 0 5
45544: PPUSH
45545: LD_INT 4
45547: PPUSH
45548: LD_VAR 0 8
45552: PPUSH
45553: CALL_OW 1
45557: ST_TO_ADDR
// end ;
45558: LD_VAR 0 5
45562: RET
// export function DangerAtRange ( unit , range ) ; begin
45563: LD_INT 0
45565: PPUSH
// if not unit then
45566: LD_VAR 0 1
45570: NOT
45571: IFFALSE 45575
// exit ;
45573: GO 45620
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45575: LD_ADDR_VAR 0 3
45579: PUSH
45580: LD_VAR 0 1
45584: PPUSH
45585: CALL_OW 255
45589: PPUSH
45590: LD_VAR 0 1
45594: PPUSH
45595: CALL_OW 250
45599: PPUSH
45600: LD_VAR 0 1
45604: PPUSH
45605: CALL_OW 251
45609: PPUSH
45610: LD_VAR 0 2
45614: PPUSH
45615: CALL 43862 0 4
45619: ST_TO_ADDR
// end ;
45620: LD_VAR 0 3
45624: RET
// export function DangerInArea ( side , area ) ; begin
45625: LD_INT 0
45627: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45628: LD_ADDR_VAR 0 3
45632: PUSH
45633: LD_VAR 0 2
45637: PPUSH
45638: LD_INT 81
45640: PUSH
45641: LD_VAR 0 1
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PPUSH
45650: CALL_OW 70
45654: ST_TO_ADDR
// end ;
45655: LD_VAR 0 3
45659: RET
// export function IsExtension ( b ) ; begin
45660: LD_INT 0
45662: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45663: LD_ADDR_VAR 0 2
45667: PUSH
45668: LD_VAR 0 1
45672: PUSH
45673: LD_INT 23
45675: PUSH
45676: LD_INT 20
45678: PUSH
45679: LD_INT 22
45681: PUSH
45682: LD_INT 17
45684: PUSH
45685: LD_INT 24
45687: PUSH
45688: LD_INT 21
45690: PUSH
45691: LD_INT 19
45693: PUSH
45694: LD_INT 16
45696: PUSH
45697: LD_INT 25
45699: PUSH
45700: LD_INT 18
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: IN
45715: ST_TO_ADDR
// end ;
45716: LD_VAR 0 2
45720: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45721: LD_INT 0
45723: PPUSH
45724: PPUSH
45725: PPUSH
// result := [ ] ;
45726: LD_ADDR_VAR 0 4
45730: PUSH
45731: EMPTY
45732: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45733: LD_ADDR_VAR 0 5
45737: PUSH
45738: LD_VAR 0 2
45742: PPUSH
45743: LD_INT 21
45745: PUSH
45746: LD_INT 3
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PPUSH
45753: CALL_OW 70
45757: ST_TO_ADDR
// if not tmp then
45758: LD_VAR 0 5
45762: NOT
45763: IFFALSE 45767
// exit ;
45765: GO 45831
// if checkLink then
45767: LD_VAR 0 3
45771: IFFALSE 45821
// begin for i in tmp do
45773: LD_ADDR_VAR 0 6
45777: PUSH
45778: LD_VAR 0 5
45782: PUSH
45783: FOR_IN
45784: IFFALSE 45819
// if GetBase ( i ) <> base then
45786: LD_VAR 0 6
45790: PPUSH
45791: CALL_OW 274
45795: PUSH
45796: LD_VAR 0 1
45800: NONEQUAL
45801: IFFALSE 45817
// ComLinkToBase ( base , i ) ;
45803: LD_VAR 0 1
45807: PPUSH
45808: LD_VAR 0 6
45812: PPUSH
45813: CALL_OW 169
45817: GO 45783
45819: POP
45820: POP
// end ; result := tmp ;
45821: LD_ADDR_VAR 0 4
45825: PUSH
45826: LD_VAR 0 5
45830: ST_TO_ADDR
// end ;
45831: LD_VAR 0 4
45835: RET
// export function ComComplete ( units , b ) ; var i ; begin
45836: LD_INT 0
45838: PPUSH
45839: PPUSH
// if not units then
45840: LD_VAR 0 1
45844: NOT
45845: IFFALSE 45849
// exit ;
45847: GO 45939
// for i in units do
45849: LD_ADDR_VAR 0 4
45853: PUSH
45854: LD_VAR 0 1
45858: PUSH
45859: FOR_IN
45860: IFFALSE 45937
// if BuildingStatus ( b ) = bs_build then
45862: LD_VAR 0 2
45866: PPUSH
45867: CALL_OW 461
45871: PUSH
45872: LD_INT 1
45874: EQUAL
45875: IFFALSE 45935
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45877: LD_VAR 0 4
45881: PPUSH
45882: LD_STRING h
45884: PUSH
45885: LD_VAR 0 2
45889: PPUSH
45890: CALL_OW 250
45894: PUSH
45895: LD_VAR 0 2
45899: PPUSH
45900: CALL_OW 251
45904: PUSH
45905: LD_VAR 0 2
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: PUSH
45928: EMPTY
45929: LIST
45930: PPUSH
45931: CALL_OW 446
45935: GO 45859
45937: POP
45938: POP
// end ;
45939: LD_VAR 0 3
45943: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45944: LD_INT 0
45946: PPUSH
45947: PPUSH
45948: PPUSH
45949: PPUSH
45950: PPUSH
45951: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45952: LD_VAR 0 1
45956: NOT
45957: PUSH
45958: LD_VAR 0 1
45962: PPUSH
45963: CALL_OW 263
45967: PUSH
45968: LD_INT 2
45970: NONEQUAL
45971: OR
45972: IFFALSE 45976
// exit ;
45974: GO 46292
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45976: LD_ADDR_VAR 0 6
45980: PUSH
45981: LD_INT 22
45983: PUSH
45984: LD_VAR 0 1
45988: PPUSH
45989: CALL_OW 255
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 2
46000: PUSH
46001: LD_INT 30
46003: PUSH
46004: LD_INT 36
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 34
46013: PUSH
46014: LD_INT 31
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: LIST
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PPUSH
46030: CALL_OW 69
46034: ST_TO_ADDR
// if not tmp then
46035: LD_VAR 0 6
46039: NOT
46040: IFFALSE 46044
// exit ;
46042: GO 46292
// result := [ ] ;
46044: LD_ADDR_VAR 0 2
46048: PUSH
46049: EMPTY
46050: ST_TO_ADDR
// for i in tmp do
46051: LD_ADDR_VAR 0 3
46055: PUSH
46056: LD_VAR 0 6
46060: PUSH
46061: FOR_IN
46062: IFFALSE 46133
// begin t := UnitsInside ( i ) ;
46064: LD_ADDR_VAR 0 4
46068: PUSH
46069: LD_VAR 0 3
46073: PPUSH
46074: CALL_OW 313
46078: ST_TO_ADDR
// if t then
46079: LD_VAR 0 4
46083: IFFALSE 46131
// for j in t do
46085: LD_ADDR_VAR 0 7
46089: PUSH
46090: LD_VAR 0 4
46094: PUSH
46095: FOR_IN
46096: IFFALSE 46129
// result := Replace ( result , result + 1 , j ) ;
46098: LD_ADDR_VAR 0 2
46102: PUSH
46103: LD_VAR 0 2
46107: PPUSH
46108: LD_VAR 0 2
46112: PUSH
46113: LD_INT 1
46115: PLUS
46116: PPUSH
46117: LD_VAR 0 7
46121: PPUSH
46122: CALL_OW 1
46126: ST_TO_ADDR
46127: GO 46095
46129: POP
46130: POP
// end ;
46131: GO 46061
46133: POP
46134: POP
// if not result then
46135: LD_VAR 0 2
46139: NOT
46140: IFFALSE 46144
// exit ;
46142: GO 46292
// mech := result [ 1 ] ;
46144: LD_ADDR_VAR 0 5
46148: PUSH
46149: LD_VAR 0 2
46153: PUSH
46154: LD_INT 1
46156: ARRAY
46157: ST_TO_ADDR
// if result > 1 then
46158: LD_VAR 0 2
46162: PUSH
46163: LD_INT 1
46165: GREATER
46166: IFFALSE 46278
// begin for i = 2 to result do
46168: LD_ADDR_VAR 0 3
46172: PUSH
46173: DOUBLE
46174: LD_INT 2
46176: DEC
46177: ST_TO_ADDR
46178: LD_VAR 0 2
46182: PUSH
46183: FOR_TO
46184: IFFALSE 46276
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46186: LD_ADDR_VAR 0 4
46190: PUSH
46191: LD_VAR 0 2
46195: PUSH
46196: LD_VAR 0 3
46200: ARRAY
46201: PPUSH
46202: LD_INT 3
46204: PPUSH
46205: CALL_OW 259
46209: PUSH
46210: LD_VAR 0 2
46214: PUSH
46215: LD_VAR 0 3
46219: ARRAY
46220: PPUSH
46221: CALL_OW 432
46225: MINUS
46226: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46227: LD_VAR 0 4
46231: PUSH
46232: LD_VAR 0 5
46236: PPUSH
46237: LD_INT 3
46239: PPUSH
46240: CALL_OW 259
46244: PUSH
46245: LD_VAR 0 5
46249: PPUSH
46250: CALL_OW 432
46254: MINUS
46255: GREATEREQUAL
46256: IFFALSE 46274
// mech := result [ i ] ;
46258: LD_ADDR_VAR 0 5
46262: PUSH
46263: LD_VAR 0 2
46267: PUSH
46268: LD_VAR 0 3
46272: ARRAY
46273: ST_TO_ADDR
// end ;
46274: GO 46183
46276: POP
46277: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46278: LD_VAR 0 1
46282: PPUSH
46283: LD_VAR 0 5
46287: PPUSH
46288: CALL_OW 135
// end ;
46292: LD_VAR 0 2
46296: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46297: LD_INT 0
46299: PPUSH
46300: PPUSH
46301: PPUSH
46302: PPUSH
46303: PPUSH
46304: PPUSH
46305: PPUSH
46306: PPUSH
46307: PPUSH
46308: PPUSH
46309: PPUSH
46310: PPUSH
46311: PPUSH
// result := [ ] ;
46312: LD_ADDR_VAR 0 7
46316: PUSH
46317: EMPTY
46318: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46319: LD_VAR 0 1
46323: PPUSH
46324: CALL_OW 266
46328: PUSH
46329: LD_INT 0
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: IN
46339: NOT
46340: IFFALSE 46344
// exit ;
46342: GO 47978
// if name then
46344: LD_VAR 0 3
46348: IFFALSE 46364
// SetBName ( base_dep , name ) ;
46350: LD_VAR 0 1
46354: PPUSH
46355: LD_VAR 0 3
46359: PPUSH
46360: CALL_OW 500
// base := GetBase ( base_dep ) ;
46364: LD_ADDR_VAR 0 15
46368: PUSH
46369: LD_VAR 0 1
46373: PPUSH
46374: CALL_OW 274
46378: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46379: LD_ADDR_VAR 0 16
46383: PUSH
46384: LD_VAR 0 1
46388: PPUSH
46389: CALL_OW 255
46393: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46394: LD_ADDR_VAR 0 17
46398: PUSH
46399: LD_VAR 0 1
46403: PPUSH
46404: CALL_OW 248
46408: ST_TO_ADDR
// if sources then
46409: LD_VAR 0 5
46413: IFFALSE 46460
// for i = 1 to 3 do
46415: LD_ADDR_VAR 0 8
46419: PUSH
46420: DOUBLE
46421: LD_INT 1
46423: DEC
46424: ST_TO_ADDR
46425: LD_INT 3
46427: PUSH
46428: FOR_TO
46429: IFFALSE 46458
// AddResourceType ( base , i , sources [ i ] ) ;
46431: LD_VAR 0 15
46435: PPUSH
46436: LD_VAR 0 8
46440: PPUSH
46441: LD_VAR 0 5
46445: PUSH
46446: LD_VAR 0 8
46450: ARRAY
46451: PPUSH
46452: CALL_OW 276
46456: GO 46428
46458: POP
46459: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46460: LD_ADDR_VAR 0 18
46464: PUSH
46465: LD_VAR 0 15
46469: PPUSH
46470: LD_VAR 0 2
46474: PPUSH
46475: LD_INT 1
46477: PPUSH
46478: CALL 45721 0 3
46482: ST_TO_ADDR
// InitHc ;
46483: CALL_OW 19
// InitUc ;
46487: CALL_OW 18
// uc_side := side ;
46491: LD_ADDR_OWVAR 20
46495: PUSH
46496: LD_VAR 0 16
46500: ST_TO_ADDR
// uc_nation := nation ;
46501: LD_ADDR_OWVAR 21
46505: PUSH
46506: LD_VAR 0 17
46510: ST_TO_ADDR
// if buildings then
46511: LD_VAR 0 18
46515: IFFALSE 47837
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46517: LD_ADDR_VAR 0 19
46521: PUSH
46522: LD_VAR 0 18
46526: PPUSH
46527: LD_INT 2
46529: PUSH
46530: LD_INT 30
46532: PUSH
46533: LD_INT 29
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 30
46542: PUSH
46543: LD_INT 30
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: LIST
46554: PPUSH
46555: CALL_OW 72
46559: ST_TO_ADDR
// if tmp then
46560: LD_VAR 0 19
46564: IFFALSE 46612
// for i in tmp do
46566: LD_ADDR_VAR 0 8
46570: PUSH
46571: LD_VAR 0 19
46575: PUSH
46576: FOR_IN
46577: IFFALSE 46610
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46579: LD_VAR 0 8
46583: PPUSH
46584: CALL_OW 250
46588: PPUSH
46589: LD_VAR 0 8
46593: PPUSH
46594: CALL_OW 251
46598: PPUSH
46599: LD_VAR 0 16
46603: PPUSH
46604: CALL_OW 441
46608: GO 46576
46610: POP
46611: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46612: LD_VAR 0 18
46616: PPUSH
46617: LD_INT 2
46619: PUSH
46620: LD_INT 30
46622: PUSH
46623: LD_INT 32
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 30
46632: PUSH
46633: LD_INT 33
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: LIST
46644: PPUSH
46645: CALL_OW 72
46649: IFFALSE 46737
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46651: LD_ADDR_VAR 0 8
46655: PUSH
46656: LD_VAR 0 18
46660: PPUSH
46661: LD_INT 2
46663: PUSH
46664: LD_INT 30
46666: PUSH
46667: LD_INT 32
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 30
46676: PUSH
46677: LD_INT 33
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: LIST
46688: PPUSH
46689: CALL_OW 72
46693: PUSH
46694: FOR_IN
46695: IFFALSE 46735
// begin if not GetBWeapon ( i ) then
46697: LD_VAR 0 8
46701: PPUSH
46702: CALL_OW 269
46706: NOT
46707: IFFALSE 46733
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46709: LD_VAR 0 8
46713: PPUSH
46714: LD_VAR 0 8
46718: PPUSH
46719: LD_VAR 0 2
46723: PPUSH
46724: CALL 47983 0 2
46728: PPUSH
46729: CALL_OW 431
// end ;
46733: GO 46694
46735: POP
46736: POP
// end ; for i = 1 to personel do
46737: LD_ADDR_VAR 0 8
46741: PUSH
46742: DOUBLE
46743: LD_INT 1
46745: DEC
46746: ST_TO_ADDR
46747: LD_VAR 0 6
46751: PUSH
46752: FOR_TO
46753: IFFALSE 47817
// begin if i > 4 then
46755: LD_VAR 0 8
46759: PUSH
46760: LD_INT 4
46762: GREATER
46763: IFFALSE 46767
// break ;
46765: GO 47817
// case i of 1 :
46767: LD_VAR 0 8
46771: PUSH
46772: LD_INT 1
46774: DOUBLE
46775: EQUAL
46776: IFTRUE 46780
46778: GO 46860
46780: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46781: LD_ADDR_VAR 0 12
46785: PUSH
46786: LD_VAR 0 18
46790: PPUSH
46791: LD_INT 22
46793: PUSH
46794: LD_VAR 0 16
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 58
46805: PUSH
46806: EMPTY
46807: LIST
46808: PUSH
46809: LD_INT 2
46811: PUSH
46812: LD_INT 30
46814: PUSH
46815: LD_INT 32
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 30
46824: PUSH
46825: LD_INT 4
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 30
46834: PUSH
46835: LD_INT 5
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: LIST
46852: PPUSH
46853: CALL_OW 72
46857: ST_TO_ADDR
46858: GO 47082
46860: LD_INT 2
46862: DOUBLE
46863: EQUAL
46864: IFTRUE 46868
46866: GO 46930
46868: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46869: LD_ADDR_VAR 0 12
46873: PUSH
46874: LD_VAR 0 18
46878: PPUSH
46879: LD_INT 22
46881: PUSH
46882: LD_VAR 0 16
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 2
46893: PUSH
46894: LD_INT 30
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 30
46906: PUSH
46907: LD_INT 1
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: LIST
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PPUSH
46923: CALL_OW 72
46927: ST_TO_ADDR
46928: GO 47082
46930: LD_INT 3
46932: DOUBLE
46933: EQUAL
46934: IFTRUE 46938
46936: GO 47000
46938: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46939: LD_ADDR_VAR 0 12
46943: PUSH
46944: LD_VAR 0 18
46948: PPUSH
46949: LD_INT 22
46951: PUSH
46952: LD_VAR 0 16
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 2
46963: PUSH
46964: LD_INT 30
46966: PUSH
46967: LD_INT 2
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 30
46976: PUSH
46977: LD_INT 3
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: LIST
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PPUSH
46993: CALL_OW 72
46997: ST_TO_ADDR
46998: GO 47082
47000: LD_INT 4
47002: DOUBLE
47003: EQUAL
47004: IFTRUE 47008
47006: GO 47081
47008: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47009: LD_ADDR_VAR 0 12
47013: PUSH
47014: LD_VAR 0 18
47018: PPUSH
47019: LD_INT 22
47021: PUSH
47022: LD_VAR 0 16
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 2
47033: PUSH
47034: LD_INT 30
47036: PUSH
47037: LD_INT 6
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 30
47046: PUSH
47047: LD_INT 7
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 30
47056: PUSH
47057: LD_INT 8
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PPUSH
47074: CALL_OW 72
47078: ST_TO_ADDR
47079: GO 47082
47081: POP
// if i = 1 then
47082: LD_VAR 0 8
47086: PUSH
47087: LD_INT 1
47089: EQUAL
47090: IFFALSE 47201
// begin tmp := [ ] ;
47092: LD_ADDR_VAR 0 19
47096: PUSH
47097: EMPTY
47098: ST_TO_ADDR
// for j in f do
47099: LD_ADDR_VAR 0 9
47103: PUSH
47104: LD_VAR 0 12
47108: PUSH
47109: FOR_IN
47110: IFFALSE 47183
// if GetBType ( j ) = b_bunker then
47112: LD_VAR 0 9
47116: PPUSH
47117: CALL_OW 266
47121: PUSH
47122: LD_INT 32
47124: EQUAL
47125: IFFALSE 47152
// tmp := Insert ( tmp , 1 , j ) else
47127: LD_ADDR_VAR 0 19
47131: PUSH
47132: LD_VAR 0 19
47136: PPUSH
47137: LD_INT 1
47139: PPUSH
47140: LD_VAR 0 9
47144: PPUSH
47145: CALL_OW 2
47149: ST_TO_ADDR
47150: GO 47181
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47152: LD_ADDR_VAR 0 19
47156: PUSH
47157: LD_VAR 0 19
47161: PPUSH
47162: LD_VAR 0 19
47166: PUSH
47167: LD_INT 1
47169: PLUS
47170: PPUSH
47171: LD_VAR 0 9
47175: PPUSH
47176: CALL_OW 2
47180: ST_TO_ADDR
47181: GO 47109
47183: POP
47184: POP
// if tmp then
47185: LD_VAR 0 19
47189: IFFALSE 47201
// f := tmp ;
47191: LD_ADDR_VAR 0 12
47195: PUSH
47196: LD_VAR 0 19
47200: ST_TO_ADDR
// end ; x := personel [ i ] ;
47201: LD_ADDR_VAR 0 13
47205: PUSH
47206: LD_VAR 0 6
47210: PUSH
47211: LD_VAR 0 8
47215: ARRAY
47216: ST_TO_ADDR
// if x = - 1 then
47217: LD_VAR 0 13
47221: PUSH
47222: LD_INT 1
47224: NEG
47225: EQUAL
47226: IFFALSE 47435
// begin for j in f do
47228: LD_ADDR_VAR 0 9
47232: PUSH
47233: LD_VAR 0 12
47237: PUSH
47238: FOR_IN
47239: IFFALSE 47431
// repeat InitHc ;
47241: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47245: LD_VAR 0 9
47249: PPUSH
47250: CALL_OW 266
47254: PUSH
47255: LD_INT 5
47257: EQUAL
47258: IFFALSE 47328
// begin if UnitsInside ( j ) < 3 then
47260: LD_VAR 0 9
47264: PPUSH
47265: CALL_OW 313
47269: PUSH
47270: LD_INT 3
47272: LESS
47273: IFFALSE 47309
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47275: LD_INT 0
47277: PPUSH
47278: LD_INT 5
47280: PUSH
47281: LD_INT 8
47283: PUSH
47284: LD_INT 9
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: LIST
47291: PUSH
47292: LD_VAR 0 17
47296: ARRAY
47297: PPUSH
47298: LD_VAR 0 4
47302: PPUSH
47303: CALL_OW 380
47307: GO 47326
// PrepareHuman ( false , i , skill ) ;
47309: LD_INT 0
47311: PPUSH
47312: LD_VAR 0 8
47316: PPUSH
47317: LD_VAR 0 4
47321: PPUSH
47322: CALL_OW 380
// end else
47326: GO 47345
// PrepareHuman ( false , i , skill ) ;
47328: LD_INT 0
47330: PPUSH
47331: LD_VAR 0 8
47335: PPUSH
47336: LD_VAR 0 4
47340: PPUSH
47341: CALL_OW 380
// un := CreateHuman ;
47345: LD_ADDR_VAR 0 14
47349: PUSH
47350: CALL_OW 44
47354: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47355: LD_ADDR_VAR 0 7
47359: PUSH
47360: LD_VAR 0 7
47364: PPUSH
47365: LD_INT 1
47367: PPUSH
47368: LD_VAR 0 14
47372: PPUSH
47373: CALL_OW 2
47377: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47378: LD_VAR 0 14
47382: PPUSH
47383: LD_VAR 0 9
47387: PPUSH
47388: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47392: LD_VAR 0 9
47396: PPUSH
47397: CALL_OW 313
47401: PUSH
47402: LD_INT 6
47404: EQUAL
47405: PUSH
47406: LD_VAR 0 9
47410: PPUSH
47411: CALL_OW 266
47415: PUSH
47416: LD_INT 32
47418: PUSH
47419: LD_INT 31
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: IN
47426: OR
47427: IFFALSE 47241
47429: GO 47238
47431: POP
47432: POP
// end else
47433: GO 47815
// for j = 1 to x do
47435: LD_ADDR_VAR 0 9
47439: PUSH
47440: DOUBLE
47441: LD_INT 1
47443: DEC
47444: ST_TO_ADDR
47445: LD_VAR 0 13
47449: PUSH
47450: FOR_TO
47451: IFFALSE 47813
// begin InitHc ;
47453: CALL_OW 19
// if not f then
47457: LD_VAR 0 12
47461: NOT
47462: IFFALSE 47551
// begin PrepareHuman ( false , i , skill ) ;
47464: LD_INT 0
47466: PPUSH
47467: LD_VAR 0 8
47471: PPUSH
47472: LD_VAR 0 4
47476: PPUSH
47477: CALL_OW 380
// un := CreateHuman ;
47481: LD_ADDR_VAR 0 14
47485: PUSH
47486: CALL_OW 44
47490: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47491: LD_ADDR_VAR 0 7
47495: PUSH
47496: LD_VAR 0 7
47500: PPUSH
47501: LD_INT 1
47503: PPUSH
47504: LD_VAR 0 14
47508: PPUSH
47509: CALL_OW 2
47513: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47514: LD_VAR 0 14
47518: PPUSH
47519: LD_VAR 0 1
47523: PPUSH
47524: CALL_OW 250
47528: PPUSH
47529: LD_VAR 0 1
47533: PPUSH
47534: CALL_OW 251
47538: PPUSH
47539: LD_INT 10
47541: PPUSH
47542: LD_INT 0
47544: PPUSH
47545: CALL_OW 50
// continue ;
47549: GO 47450
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47551: LD_VAR 0 12
47555: PUSH
47556: LD_INT 1
47558: ARRAY
47559: PPUSH
47560: CALL_OW 313
47564: PUSH
47565: LD_VAR 0 12
47569: PUSH
47570: LD_INT 1
47572: ARRAY
47573: PPUSH
47574: CALL_OW 266
47578: PUSH
47579: LD_INT 32
47581: PUSH
47582: LD_INT 31
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: IN
47589: AND
47590: PUSH
47591: LD_VAR 0 12
47595: PUSH
47596: LD_INT 1
47598: ARRAY
47599: PPUSH
47600: CALL_OW 313
47604: PUSH
47605: LD_INT 6
47607: EQUAL
47608: OR
47609: IFFALSE 47629
// f := Delete ( f , 1 ) ;
47611: LD_ADDR_VAR 0 12
47615: PUSH
47616: LD_VAR 0 12
47620: PPUSH
47621: LD_INT 1
47623: PPUSH
47624: CALL_OW 3
47628: ST_TO_ADDR
// if not f then
47629: LD_VAR 0 12
47633: NOT
47634: IFFALSE 47652
// begin x := x + 2 ;
47636: LD_ADDR_VAR 0 13
47640: PUSH
47641: LD_VAR 0 13
47645: PUSH
47646: LD_INT 2
47648: PLUS
47649: ST_TO_ADDR
// continue ;
47650: GO 47450
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47652: LD_VAR 0 12
47656: PUSH
47657: LD_INT 1
47659: ARRAY
47660: PPUSH
47661: CALL_OW 266
47665: PUSH
47666: LD_INT 5
47668: EQUAL
47669: IFFALSE 47743
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47671: LD_VAR 0 12
47675: PUSH
47676: LD_INT 1
47678: ARRAY
47679: PPUSH
47680: CALL_OW 313
47684: PUSH
47685: LD_INT 3
47687: LESS
47688: IFFALSE 47724
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47690: LD_INT 0
47692: PPUSH
47693: LD_INT 5
47695: PUSH
47696: LD_INT 8
47698: PUSH
47699: LD_INT 9
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: LIST
47706: PUSH
47707: LD_VAR 0 17
47711: ARRAY
47712: PPUSH
47713: LD_VAR 0 4
47717: PPUSH
47718: CALL_OW 380
47722: GO 47741
// PrepareHuman ( false , i , skill ) ;
47724: LD_INT 0
47726: PPUSH
47727: LD_VAR 0 8
47731: PPUSH
47732: LD_VAR 0 4
47736: PPUSH
47737: CALL_OW 380
// end else
47741: GO 47760
// PrepareHuman ( false , i , skill ) ;
47743: LD_INT 0
47745: PPUSH
47746: LD_VAR 0 8
47750: PPUSH
47751: LD_VAR 0 4
47755: PPUSH
47756: CALL_OW 380
// un := CreateHuman ;
47760: LD_ADDR_VAR 0 14
47764: PUSH
47765: CALL_OW 44
47769: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47770: LD_ADDR_VAR 0 7
47774: PUSH
47775: LD_VAR 0 7
47779: PPUSH
47780: LD_INT 1
47782: PPUSH
47783: LD_VAR 0 14
47787: PPUSH
47788: CALL_OW 2
47792: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47793: LD_VAR 0 14
47797: PPUSH
47798: LD_VAR 0 12
47802: PUSH
47803: LD_INT 1
47805: ARRAY
47806: PPUSH
47807: CALL_OW 52
// end ;
47811: GO 47450
47813: POP
47814: POP
// end ;
47815: GO 46752
47817: POP
47818: POP
// result := result ^ buildings ;
47819: LD_ADDR_VAR 0 7
47823: PUSH
47824: LD_VAR 0 7
47828: PUSH
47829: LD_VAR 0 18
47833: ADD
47834: ST_TO_ADDR
// end else
47835: GO 47978
// begin for i = 1 to personel do
47837: LD_ADDR_VAR 0 8
47841: PUSH
47842: DOUBLE
47843: LD_INT 1
47845: DEC
47846: ST_TO_ADDR
47847: LD_VAR 0 6
47851: PUSH
47852: FOR_TO
47853: IFFALSE 47976
// begin if i > 4 then
47855: LD_VAR 0 8
47859: PUSH
47860: LD_INT 4
47862: GREATER
47863: IFFALSE 47867
// break ;
47865: GO 47976
// x := personel [ i ] ;
47867: LD_ADDR_VAR 0 13
47871: PUSH
47872: LD_VAR 0 6
47876: PUSH
47877: LD_VAR 0 8
47881: ARRAY
47882: ST_TO_ADDR
// if x = - 1 then
47883: LD_VAR 0 13
47887: PUSH
47888: LD_INT 1
47890: NEG
47891: EQUAL
47892: IFFALSE 47896
// continue ;
47894: GO 47852
// PrepareHuman ( false , i , skill ) ;
47896: LD_INT 0
47898: PPUSH
47899: LD_VAR 0 8
47903: PPUSH
47904: LD_VAR 0 4
47908: PPUSH
47909: CALL_OW 380
// un := CreateHuman ;
47913: LD_ADDR_VAR 0 14
47917: PUSH
47918: CALL_OW 44
47922: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47923: LD_VAR 0 14
47927: PPUSH
47928: LD_VAR 0 1
47932: PPUSH
47933: CALL_OW 250
47937: PPUSH
47938: LD_VAR 0 1
47942: PPUSH
47943: CALL_OW 251
47947: PPUSH
47948: LD_INT 10
47950: PPUSH
47951: LD_INT 0
47953: PPUSH
47954: CALL_OW 50
// result := result ^ un ;
47958: LD_ADDR_VAR 0 7
47962: PUSH
47963: LD_VAR 0 7
47967: PUSH
47968: LD_VAR 0 14
47972: ADD
47973: ST_TO_ADDR
// end ;
47974: GO 47852
47976: POP
47977: POP
// end ; end ;
47978: LD_VAR 0 7
47982: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47983: LD_INT 0
47985: PPUSH
47986: PPUSH
47987: PPUSH
47988: PPUSH
47989: PPUSH
47990: PPUSH
47991: PPUSH
47992: PPUSH
47993: PPUSH
47994: PPUSH
47995: PPUSH
47996: PPUSH
47997: PPUSH
47998: PPUSH
47999: PPUSH
48000: PPUSH
// result := false ;
48001: LD_ADDR_VAR 0 3
48005: PUSH
48006: LD_INT 0
48008: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48009: LD_VAR 0 1
48013: NOT
48014: PUSH
48015: LD_VAR 0 1
48019: PPUSH
48020: CALL_OW 266
48024: PUSH
48025: LD_INT 32
48027: PUSH
48028: LD_INT 33
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: IN
48035: NOT
48036: OR
48037: IFFALSE 48041
// exit ;
48039: GO 49150
// nat := GetNation ( tower ) ;
48041: LD_ADDR_VAR 0 12
48045: PUSH
48046: LD_VAR 0 1
48050: PPUSH
48051: CALL_OW 248
48055: ST_TO_ADDR
// side := GetSide ( tower ) ;
48056: LD_ADDR_VAR 0 16
48060: PUSH
48061: LD_VAR 0 1
48065: PPUSH
48066: CALL_OW 255
48070: ST_TO_ADDR
// x := GetX ( tower ) ;
48071: LD_ADDR_VAR 0 10
48075: PUSH
48076: LD_VAR 0 1
48080: PPUSH
48081: CALL_OW 250
48085: ST_TO_ADDR
// y := GetY ( tower ) ;
48086: LD_ADDR_VAR 0 11
48090: PUSH
48091: LD_VAR 0 1
48095: PPUSH
48096: CALL_OW 251
48100: ST_TO_ADDR
// if not x or not y then
48101: LD_VAR 0 10
48105: NOT
48106: PUSH
48107: LD_VAR 0 11
48111: NOT
48112: OR
48113: IFFALSE 48117
// exit ;
48115: GO 49150
// weapon := 0 ;
48117: LD_ADDR_VAR 0 18
48121: PUSH
48122: LD_INT 0
48124: ST_TO_ADDR
// fac_list := [ ] ;
48125: LD_ADDR_VAR 0 17
48129: PUSH
48130: EMPTY
48131: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48132: LD_ADDR_VAR 0 6
48136: PUSH
48137: LD_VAR 0 1
48141: PPUSH
48142: CALL_OW 274
48146: PPUSH
48147: LD_VAR 0 2
48151: PPUSH
48152: LD_INT 0
48154: PPUSH
48155: CALL 45721 0 3
48159: PPUSH
48160: LD_INT 30
48162: PUSH
48163: LD_INT 3
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PPUSH
48170: CALL_OW 72
48174: ST_TO_ADDR
// if not factories then
48175: LD_VAR 0 6
48179: NOT
48180: IFFALSE 48184
// exit ;
48182: GO 49150
// for i in factories do
48184: LD_ADDR_VAR 0 8
48188: PUSH
48189: LD_VAR 0 6
48193: PUSH
48194: FOR_IN
48195: IFFALSE 48220
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48197: LD_ADDR_VAR 0 17
48201: PUSH
48202: LD_VAR 0 17
48206: PUSH
48207: LD_VAR 0 8
48211: PPUSH
48212: CALL_OW 478
48216: UNION
48217: ST_TO_ADDR
48218: GO 48194
48220: POP
48221: POP
// if not fac_list then
48222: LD_VAR 0 17
48226: NOT
48227: IFFALSE 48231
// exit ;
48229: GO 49150
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48231: LD_ADDR_VAR 0 5
48235: PUSH
48236: LD_INT 4
48238: PUSH
48239: LD_INT 5
48241: PUSH
48242: LD_INT 9
48244: PUSH
48245: LD_INT 10
48247: PUSH
48248: LD_INT 6
48250: PUSH
48251: LD_INT 7
48253: PUSH
48254: LD_INT 11
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 27
48268: PUSH
48269: LD_INT 28
48271: PUSH
48272: LD_INT 26
48274: PUSH
48275: LD_INT 30
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 43
48286: PUSH
48287: LD_INT 44
48289: PUSH
48290: LD_INT 46
48292: PUSH
48293: LD_INT 45
48295: PUSH
48296: LD_INT 47
48298: PUSH
48299: LD_INT 49
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: LIST
48314: PUSH
48315: LD_VAR 0 12
48319: ARRAY
48320: ST_TO_ADDR
// list := list isect fac_list ;
48321: LD_ADDR_VAR 0 5
48325: PUSH
48326: LD_VAR 0 5
48330: PUSH
48331: LD_VAR 0 17
48335: ISECT
48336: ST_TO_ADDR
// if not list then
48337: LD_VAR 0 5
48341: NOT
48342: IFFALSE 48346
// exit ;
48344: GO 49150
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48346: LD_VAR 0 12
48350: PUSH
48351: LD_INT 3
48353: EQUAL
48354: PUSH
48355: LD_INT 49
48357: PUSH
48358: LD_VAR 0 5
48362: IN
48363: AND
48364: PUSH
48365: LD_INT 31
48367: PPUSH
48368: LD_VAR 0 16
48372: PPUSH
48373: CALL_OW 321
48377: PUSH
48378: LD_INT 2
48380: EQUAL
48381: AND
48382: IFFALSE 48442
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48384: LD_INT 22
48386: PUSH
48387: LD_VAR 0 16
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 35
48398: PUSH
48399: LD_INT 49
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 91
48408: PUSH
48409: LD_VAR 0 1
48413: PUSH
48414: LD_INT 10
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: LIST
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: LIST
48426: PPUSH
48427: CALL_OW 69
48431: NOT
48432: IFFALSE 48442
// weapon := ru_time_lapser ;
48434: LD_ADDR_VAR 0 18
48438: PUSH
48439: LD_INT 49
48441: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48442: LD_VAR 0 12
48446: PUSH
48447: LD_INT 1
48449: PUSH
48450: LD_INT 2
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: IN
48457: PUSH
48458: LD_INT 11
48460: PUSH
48461: LD_VAR 0 5
48465: IN
48466: PUSH
48467: LD_INT 30
48469: PUSH
48470: LD_VAR 0 5
48474: IN
48475: OR
48476: AND
48477: PUSH
48478: LD_INT 6
48480: PPUSH
48481: LD_VAR 0 16
48485: PPUSH
48486: CALL_OW 321
48490: PUSH
48491: LD_INT 2
48493: EQUAL
48494: AND
48495: IFFALSE 48660
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48497: LD_INT 22
48499: PUSH
48500: LD_VAR 0 16
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 2
48511: PUSH
48512: LD_INT 35
48514: PUSH
48515: LD_INT 11
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 35
48524: PUSH
48525: LD_INT 30
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 91
48539: PUSH
48540: LD_VAR 0 1
48544: PUSH
48545: LD_INT 18
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: LIST
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: LIST
48557: PPUSH
48558: CALL_OW 69
48562: NOT
48563: PUSH
48564: LD_INT 22
48566: PUSH
48567: LD_VAR 0 16
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 2
48578: PUSH
48579: LD_INT 30
48581: PUSH
48582: LD_INT 32
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 30
48591: PUSH
48592: LD_INT 33
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 91
48606: PUSH
48607: LD_VAR 0 1
48611: PUSH
48612: LD_INT 12
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: LIST
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: LIST
48624: PUSH
48625: EMPTY
48626: LIST
48627: PPUSH
48628: CALL_OW 69
48632: PUSH
48633: LD_INT 2
48635: GREATER
48636: AND
48637: IFFALSE 48660
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48639: LD_ADDR_VAR 0 18
48643: PUSH
48644: LD_INT 11
48646: PUSH
48647: LD_INT 30
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_VAR 0 12
48658: ARRAY
48659: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48660: LD_VAR 0 18
48664: NOT
48665: PUSH
48666: LD_INT 40
48668: PPUSH
48669: LD_VAR 0 16
48673: PPUSH
48674: CALL_OW 321
48678: PUSH
48679: LD_INT 2
48681: EQUAL
48682: AND
48683: PUSH
48684: LD_INT 7
48686: PUSH
48687: LD_VAR 0 5
48691: IN
48692: PUSH
48693: LD_INT 28
48695: PUSH
48696: LD_VAR 0 5
48700: IN
48701: OR
48702: PUSH
48703: LD_INT 45
48705: PUSH
48706: LD_VAR 0 5
48710: IN
48711: OR
48712: AND
48713: IFFALSE 48967
// begin hex := GetHexInfo ( x , y ) ;
48715: LD_ADDR_VAR 0 4
48719: PUSH
48720: LD_VAR 0 10
48724: PPUSH
48725: LD_VAR 0 11
48729: PPUSH
48730: CALL_OW 546
48734: ST_TO_ADDR
// if hex [ 1 ] then
48735: LD_VAR 0 4
48739: PUSH
48740: LD_INT 1
48742: ARRAY
48743: IFFALSE 48747
// exit ;
48745: GO 49150
// height := hex [ 2 ] ;
48747: LD_ADDR_VAR 0 15
48751: PUSH
48752: LD_VAR 0 4
48756: PUSH
48757: LD_INT 2
48759: ARRAY
48760: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48761: LD_ADDR_VAR 0 14
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: LD_INT 2
48771: PUSH
48772: LD_INT 3
48774: PUSH
48775: LD_INT 5
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: ST_TO_ADDR
// for i in tmp do
48784: LD_ADDR_VAR 0 8
48788: PUSH
48789: LD_VAR 0 14
48793: PUSH
48794: FOR_IN
48795: IFFALSE 48965
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48797: LD_ADDR_VAR 0 9
48801: PUSH
48802: LD_VAR 0 10
48806: PPUSH
48807: LD_VAR 0 8
48811: PPUSH
48812: LD_INT 5
48814: PPUSH
48815: CALL_OW 272
48819: PUSH
48820: LD_VAR 0 11
48824: PPUSH
48825: LD_VAR 0 8
48829: PPUSH
48830: LD_INT 5
48832: PPUSH
48833: CALL_OW 273
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48842: LD_VAR 0 9
48846: PUSH
48847: LD_INT 1
48849: ARRAY
48850: PPUSH
48851: LD_VAR 0 9
48855: PUSH
48856: LD_INT 2
48858: ARRAY
48859: PPUSH
48860: CALL_OW 488
48864: IFFALSE 48963
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48866: LD_ADDR_VAR 0 4
48870: PUSH
48871: LD_VAR 0 9
48875: PUSH
48876: LD_INT 1
48878: ARRAY
48879: PPUSH
48880: LD_VAR 0 9
48884: PUSH
48885: LD_INT 2
48887: ARRAY
48888: PPUSH
48889: CALL_OW 546
48893: ST_TO_ADDR
// if hex [ 1 ] then
48894: LD_VAR 0 4
48898: PUSH
48899: LD_INT 1
48901: ARRAY
48902: IFFALSE 48906
// continue ;
48904: GO 48794
// h := hex [ 2 ] ;
48906: LD_ADDR_VAR 0 13
48910: PUSH
48911: LD_VAR 0 4
48915: PUSH
48916: LD_INT 2
48918: ARRAY
48919: ST_TO_ADDR
// if h + 7 < height then
48920: LD_VAR 0 13
48924: PUSH
48925: LD_INT 7
48927: PLUS
48928: PUSH
48929: LD_VAR 0 15
48933: LESS
48934: IFFALSE 48963
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48936: LD_ADDR_VAR 0 18
48940: PUSH
48941: LD_INT 7
48943: PUSH
48944: LD_INT 28
48946: PUSH
48947: LD_INT 45
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: LIST
48954: PUSH
48955: LD_VAR 0 12
48959: ARRAY
48960: ST_TO_ADDR
// break ;
48961: GO 48965
// end ; end ; end ;
48963: GO 48794
48965: POP
48966: POP
// end ; if not weapon then
48967: LD_VAR 0 18
48971: NOT
48972: IFFALSE 49032
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48974: LD_ADDR_VAR 0 5
48978: PUSH
48979: LD_VAR 0 5
48983: PUSH
48984: LD_INT 11
48986: PUSH
48987: LD_INT 30
48989: PUSH
48990: LD_INT 49
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: LIST
48997: DIFF
48998: ST_TO_ADDR
// if not list then
48999: LD_VAR 0 5
49003: NOT
49004: IFFALSE 49008
// exit ;
49006: GO 49150
// weapon := list [ rand ( 1 , list ) ] ;
49008: LD_ADDR_VAR 0 18
49012: PUSH
49013: LD_VAR 0 5
49017: PUSH
49018: LD_INT 1
49020: PPUSH
49021: LD_VAR 0 5
49025: PPUSH
49026: CALL_OW 12
49030: ARRAY
49031: ST_TO_ADDR
// end ; if weapon then
49032: LD_VAR 0 18
49036: IFFALSE 49150
// begin tmp := CostOfWeapon ( weapon ) ;
49038: LD_ADDR_VAR 0 14
49042: PUSH
49043: LD_VAR 0 18
49047: PPUSH
49048: CALL_OW 451
49052: ST_TO_ADDR
// j := GetBase ( tower ) ;
49053: LD_ADDR_VAR 0 9
49057: PUSH
49058: LD_VAR 0 1
49062: PPUSH
49063: CALL_OW 274
49067: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49068: LD_VAR 0 9
49072: PPUSH
49073: LD_INT 1
49075: PPUSH
49076: CALL_OW 275
49080: PUSH
49081: LD_VAR 0 14
49085: PUSH
49086: LD_INT 1
49088: ARRAY
49089: GREATEREQUAL
49090: PUSH
49091: LD_VAR 0 9
49095: PPUSH
49096: LD_INT 2
49098: PPUSH
49099: CALL_OW 275
49103: PUSH
49104: LD_VAR 0 14
49108: PUSH
49109: LD_INT 2
49111: ARRAY
49112: GREATEREQUAL
49113: AND
49114: PUSH
49115: LD_VAR 0 9
49119: PPUSH
49120: LD_INT 3
49122: PPUSH
49123: CALL_OW 275
49127: PUSH
49128: LD_VAR 0 14
49132: PUSH
49133: LD_INT 3
49135: ARRAY
49136: GREATEREQUAL
49137: AND
49138: IFFALSE 49150
// result := weapon ;
49140: LD_ADDR_VAR 0 3
49144: PUSH
49145: LD_VAR 0 18
49149: ST_TO_ADDR
// end ; end ;
49150: LD_VAR 0 3
49154: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49155: LD_INT 0
49157: PPUSH
49158: PPUSH
// result := true ;
49159: LD_ADDR_VAR 0 3
49163: PUSH
49164: LD_INT 1
49166: ST_TO_ADDR
// if array1 = array2 then
49167: LD_VAR 0 1
49171: PUSH
49172: LD_VAR 0 2
49176: EQUAL
49177: IFFALSE 49237
// begin for i = 1 to array1 do
49179: LD_ADDR_VAR 0 4
49183: PUSH
49184: DOUBLE
49185: LD_INT 1
49187: DEC
49188: ST_TO_ADDR
49189: LD_VAR 0 1
49193: PUSH
49194: FOR_TO
49195: IFFALSE 49233
// if array1 [ i ] <> array2 [ i ] then
49197: LD_VAR 0 1
49201: PUSH
49202: LD_VAR 0 4
49206: ARRAY
49207: PUSH
49208: LD_VAR 0 2
49212: PUSH
49213: LD_VAR 0 4
49217: ARRAY
49218: NONEQUAL
49219: IFFALSE 49231
// begin result := false ;
49221: LD_ADDR_VAR 0 3
49225: PUSH
49226: LD_INT 0
49228: ST_TO_ADDR
// break ;
49229: GO 49233
// end ;
49231: GO 49194
49233: POP
49234: POP
// end else
49235: GO 49245
// result := false ;
49237: LD_ADDR_VAR 0 3
49241: PUSH
49242: LD_INT 0
49244: ST_TO_ADDR
// end ;
49245: LD_VAR 0 3
49249: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49250: LD_INT 0
49252: PPUSH
49253: PPUSH
// if not array1 or not array2 then
49254: LD_VAR 0 1
49258: NOT
49259: PUSH
49260: LD_VAR 0 2
49264: NOT
49265: OR
49266: IFFALSE 49270
// exit ;
49268: GO 49334
// result := true ;
49270: LD_ADDR_VAR 0 3
49274: PUSH
49275: LD_INT 1
49277: ST_TO_ADDR
// for i = 1 to array1 do
49278: LD_ADDR_VAR 0 4
49282: PUSH
49283: DOUBLE
49284: LD_INT 1
49286: DEC
49287: ST_TO_ADDR
49288: LD_VAR 0 1
49292: PUSH
49293: FOR_TO
49294: IFFALSE 49332
// if array1 [ i ] <> array2 [ i ] then
49296: LD_VAR 0 1
49300: PUSH
49301: LD_VAR 0 4
49305: ARRAY
49306: PUSH
49307: LD_VAR 0 2
49311: PUSH
49312: LD_VAR 0 4
49316: ARRAY
49317: NONEQUAL
49318: IFFALSE 49330
// begin result := false ;
49320: LD_ADDR_VAR 0 3
49324: PUSH
49325: LD_INT 0
49327: ST_TO_ADDR
// break ;
49328: GO 49332
// end ;
49330: GO 49293
49332: POP
49333: POP
// end ;
49334: LD_VAR 0 3
49338: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49339: LD_INT 0
49341: PPUSH
49342: PPUSH
49343: PPUSH
// pom := GetBase ( fac ) ;
49344: LD_ADDR_VAR 0 5
49348: PUSH
49349: LD_VAR 0 1
49353: PPUSH
49354: CALL_OW 274
49358: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49359: LD_ADDR_VAR 0 4
49363: PUSH
49364: LD_VAR 0 2
49368: PUSH
49369: LD_INT 1
49371: ARRAY
49372: PPUSH
49373: LD_VAR 0 2
49377: PUSH
49378: LD_INT 2
49380: ARRAY
49381: PPUSH
49382: LD_VAR 0 2
49386: PUSH
49387: LD_INT 3
49389: ARRAY
49390: PPUSH
49391: LD_VAR 0 2
49395: PUSH
49396: LD_INT 4
49398: ARRAY
49399: PPUSH
49400: CALL_OW 449
49404: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49405: LD_ADDR_VAR 0 3
49409: PUSH
49410: LD_VAR 0 5
49414: PPUSH
49415: LD_INT 1
49417: PPUSH
49418: CALL_OW 275
49422: PUSH
49423: LD_VAR 0 4
49427: PUSH
49428: LD_INT 1
49430: ARRAY
49431: GREATEREQUAL
49432: PUSH
49433: LD_VAR 0 5
49437: PPUSH
49438: LD_INT 2
49440: PPUSH
49441: CALL_OW 275
49445: PUSH
49446: LD_VAR 0 4
49450: PUSH
49451: LD_INT 2
49453: ARRAY
49454: GREATEREQUAL
49455: AND
49456: PUSH
49457: LD_VAR 0 5
49461: PPUSH
49462: LD_INT 3
49464: PPUSH
49465: CALL_OW 275
49469: PUSH
49470: LD_VAR 0 4
49474: PUSH
49475: LD_INT 3
49477: ARRAY
49478: GREATEREQUAL
49479: AND
49480: ST_TO_ADDR
// end ;
49481: LD_VAR 0 3
49485: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49486: LD_INT 0
49488: PPUSH
49489: PPUSH
49490: PPUSH
49491: PPUSH
// pom := GetBase ( building ) ;
49492: LD_ADDR_VAR 0 3
49496: PUSH
49497: LD_VAR 0 1
49501: PPUSH
49502: CALL_OW 274
49506: ST_TO_ADDR
// if not pom then
49507: LD_VAR 0 3
49511: NOT
49512: IFFALSE 49516
// exit ;
49514: GO 49686
// btype := GetBType ( building ) ;
49516: LD_ADDR_VAR 0 5
49520: PUSH
49521: LD_VAR 0 1
49525: PPUSH
49526: CALL_OW 266
49530: ST_TO_ADDR
// if btype = b_armoury then
49531: LD_VAR 0 5
49535: PUSH
49536: LD_INT 4
49538: EQUAL
49539: IFFALSE 49549
// btype := b_barracks ;
49541: LD_ADDR_VAR 0 5
49545: PUSH
49546: LD_INT 5
49548: ST_TO_ADDR
// if btype = b_depot then
49549: LD_VAR 0 5
49553: PUSH
49554: LD_INT 0
49556: EQUAL
49557: IFFALSE 49567
// btype := b_warehouse ;
49559: LD_ADDR_VAR 0 5
49563: PUSH
49564: LD_INT 1
49566: ST_TO_ADDR
// if btype = b_workshop then
49567: LD_VAR 0 5
49571: PUSH
49572: LD_INT 2
49574: EQUAL
49575: IFFALSE 49585
// btype := b_factory ;
49577: LD_ADDR_VAR 0 5
49581: PUSH
49582: LD_INT 3
49584: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49585: LD_ADDR_VAR 0 4
49589: PUSH
49590: LD_VAR 0 5
49594: PPUSH
49595: LD_VAR 0 1
49599: PPUSH
49600: CALL_OW 248
49604: PPUSH
49605: CALL_OW 450
49609: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49610: LD_ADDR_VAR 0 2
49614: PUSH
49615: LD_VAR 0 3
49619: PPUSH
49620: LD_INT 1
49622: PPUSH
49623: CALL_OW 275
49627: PUSH
49628: LD_VAR 0 4
49632: PUSH
49633: LD_INT 1
49635: ARRAY
49636: GREATEREQUAL
49637: PUSH
49638: LD_VAR 0 3
49642: PPUSH
49643: LD_INT 2
49645: PPUSH
49646: CALL_OW 275
49650: PUSH
49651: LD_VAR 0 4
49655: PUSH
49656: LD_INT 2
49658: ARRAY
49659: GREATEREQUAL
49660: AND
49661: PUSH
49662: LD_VAR 0 3
49666: PPUSH
49667: LD_INT 3
49669: PPUSH
49670: CALL_OW 275
49674: PUSH
49675: LD_VAR 0 4
49679: PUSH
49680: LD_INT 3
49682: ARRAY
49683: GREATEREQUAL
49684: AND
49685: ST_TO_ADDR
// end ;
49686: LD_VAR 0 2
49690: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49691: LD_INT 0
49693: PPUSH
49694: PPUSH
49695: PPUSH
// pom := GetBase ( building ) ;
49696: LD_ADDR_VAR 0 4
49700: PUSH
49701: LD_VAR 0 1
49705: PPUSH
49706: CALL_OW 274
49710: ST_TO_ADDR
// if not pom then
49711: LD_VAR 0 4
49715: NOT
49716: IFFALSE 49720
// exit ;
49718: GO 49821
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49720: LD_ADDR_VAR 0 5
49724: PUSH
49725: LD_VAR 0 2
49729: PPUSH
49730: LD_VAR 0 1
49734: PPUSH
49735: CALL_OW 248
49739: PPUSH
49740: CALL_OW 450
49744: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49745: LD_ADDR_VAR 0 3
49749: PUSH
49750: LD_VAR 0 4
49754: PPUSH
49755: LD_INT 1
49757: PPUSH
49758: CALL_OW 275
49762: PUSH
49763: LD_VAR 0 5
49767: PUSH
49768: LD_INT 1
49770: ARRAY
49771: GREATEREQUAL
49772: PUSH
49773: LD_VAR 0 4
49777: PPUSH
49778: LD_INT 2
49780: PPUSH
49781: CALL_OW 275
49785: PUSH
49786: LD_VAR 0 5
49790: PUSH
49791: LD_INT 2
49793: ARRAY
49794: GREATEREQUAL
49795: AND
49796: PUSH
49797: LD_VAR 0 4
49801: PPUSH
49802: LD_INT 3
49804: PPUSH
49805: CALL_OW 275
49809: PUSH
49810: LD_VAR 0 5
49814: PUSH
49815: LD_INT 3
49817: ARRAY
49818: GREATEREQUAL
49819: AND
49820: ST_TO_ADDR
// end ;
49821: LD_VAR 0 3
49825: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49826: LD_INT 0
49828: PPUSH
49829: PPUSH
49830: PPUSH
49831: PPUSH
49832: PPUSH
49833: PPUSH
49834: PPUSH
49835: PPUSH
49836: PPUSH
49837: PPUSH
49838: PPUSH
// result := false ;
49839: LD_ADDR_VAR 0 8
49843: PUSH
49844: LD_INT 0
49846: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49847: LD_VAR 0 5
49851: NOT
49852: PUSH
49853: LD_VAR 0 1
49857: NOT
49858: OR
49859: PUSH
49860: LD_VAR 0 2
49864: NOT
49865: OR
49866: PUSH
49867: LD_VAR 0 3
49871: NOT
49872: OR
49873: IFFALSE 49877
// exit ;
49875: GO 50691
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49877: LD_ADDR_VAR 0 14
49881: PUSH
49882: LD_VAR 0 1
49886: PPUSH
49887: LD_VAR 0 2
49891: PPUSH
49892: LD_VAR 0 3
49896: PPUSH
49897: LD_VAR 0 4
49901: PPUSH
49902: LD_VAR 0 5
49906: PUSH
49907: LD_INT 1
49909: ARRAY
49910: PPUSH
49911: CALL_OW 248
49915: PPUSH
49916: LD_INT 0
49918: PPUSH
49919: CALL 51944 0 6
49923: ST_TO_ADDR
// if not hexes then
49924: LD_VAR 0 14
49928: NOT
49929: IFFALSE 49933
// exit ;
49931: GO 50691
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49933: LD_ADDR_VAR 0 17
49937: PUSH
49938: LD_VAR 0 5
49942: PPUSH
49943: LD_INT 22
49945: PUSH
49946: LD_VAR 0 13
49950: PPUSH
49951: CALL_OW 255
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 2
49962: PUSH
49963: LD_INT 30
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 30
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: LIST
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PPUSH
49992: CALL_OW 72
49996: ST_TO_ADDR
// for i = 1 to hexes do
49997: LD_ADDR_VAR 0 9
50001: PUSH
50002: DOUBLE
50003: LD_INT 1
50005: DEC
50006: ST_TO_ADDR
50007: LD_VAR 0 14
50011: PUSH
50012: FOR_TO
50013: IFFALSE 50689
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50015: LD_ADDR_VAR 0 13
50019: PUSH
50020: LD_VAR 0 14
50024: PUSH
50025: LD_VAR 0 9
50029: ARRAY
50030: PUSH
50031: LD_INT 1
50033: ARRAY
50034: PPUSH
50035: LD_VAR 0 14
50039: PUSH
50040: LD_VAR 0 9
50044: ARRAY
50045: PUSH
50046: LD_INT 2
50048: ARRAY
50049: PPUSH
50050: CALL_OW 428
50054: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50055: LD_VAR 0 14
50059: PUSH
50060: LD_VAR 0 9
50064: ARRAY
50065: PUSH
50066: LD_INT 1
50068: ARRAY
50069: PPUSH
50070: LD_VAR 0 14
50074: PUSH
50075: LD_VAR 0 9
50079: ARRAY
50080: PUSH
50081: LD_INT 2
50083: ARRAY
50084: PPUSH
50085: CALL_OW 351
50089: PUSH
50090: LD_VAR 0 14
50094: PUSH
50095: LD_VAR 0 9
50099: ARRAY
50100: PUSH
50101: LD_INT 1
50103: ARRAY
50104: PPUSH
50105: LD_VAR 0 14
50109: PUSH
50110: LD_VAR 0 9
50114: ARRAY
50115: PUSH
50116: LD_INT 2
50118: ARRAY
50119: PPUSH
50120: CALL_OW 488
50124: NOT
50125: OR
50126: PUSH
50127: LD_VAR 0 13
50131: PPUSH
50132: CALL_OW 247
50136: PUSH
50137: LD_INT 3
50139: EQUAL
50140: OR
50141: IFFALSE 50147
// exit ;
50143: POP
50144: POP
50145: GO 50691
// if not tmp then
50147: LD_VAR 0 13
50151: NOT
50152: IFFALSE 50156
// continue ;
50154: GO 50012
// result := true ;
50156: LD_ADDR_VAR 0 8
50160: PUSH
50161: LD_INT 1
50163: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50164: LD_VAR 0 6
50168: PUSH
50169: LD_VAR 0 13
50173: PPUSH
50174: CALL_OW 247
50178: PUSH
50179: LD_INT 2
50181: EQUAL
50182: AND
50183: PUSH
50184: LD_VAR 0 13
50188: PPUSH
50189: CALL_OW 263
50193: PUSH
50194: LD_INT 1
50196: EQUAL
50197: AND
50198: IFFALSE 50362
// begin if IsDrivenBy ( tmp ) then
50200: LD_VAR 0 13
50204: PPUSH
50205: CALL_OW 311
50209: IFFALSE 50213
// continue ;
50211: GO 50012
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50213: LD_VAR 0 6
50217: PPUSH
50218: LD_INT 3
50220: PUSH
50221: LD_INT 60
50223: PUSH
50224: EMPTY
50225: LIST
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 3
50233: PUSH
50234: LD_INT 55
50236: PUSH
50237: EMPTY
50238: LIST
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PPUSH
50248: CALL_OW 72
50252: IFFALSE 50360
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50254: LD_ADDR_VAR 0 18
50258: PUSH
50259: LD_VAR 0 6
50263: PPUSH
50264: LD_INT 3
50266: PUSH
50267: LD_INT 60
50269: PUSH
50270: EMPTY
50271: LIST
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 3
50279: PUSH
50280: LD_INT 55
50282: PUSH
50283: EMPTY
50284: LIST
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PPUSH
50294: CALL_OW 72
50298: PUSH
50299: LD_INT 1
50301: ARRAY
50302: ST_TO_ADDR
// if IsInUnit ( driver ) then
50303: LD_VAR 0 18
50307: PPUSH
50308: CALL_OW 310
50312: IFFALSE 50323
// ComExit ( driver ) ;
50314: LD_VAR 0 18
50318: PPUSH
50319: CALL 75736 0 1
// AddComEnterUnit ( driver , tmp ) ;
50323: LD_VAR 0 18
50327: PPUSH
50328: LD_VAR 0 13
50332: PPUSH
50333: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50337: LD_VAR 0 18
50341: PPUSH
50342: LD_VAR 0 7
50346: PPUSH
50347: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50351: LD_VAR 0 18
50355: PPUSH
50356: CALL_OW 181
// end ; continue ;
50360: GO 50012
// end ; if not cleaners or not tmp in cleaners then
50362: LD_VAR 0 6
50366: NOT
50367: PUSH
50368: LD_VAR 0 13
50372: PUSH
50373: LD_VAR 0 6
50377: IN
50378: NOT
50379: OR
50380: IFFALSE 50687
// begin if dep then
50382: LD_VAR 0 17
50386: IFFALSE 50522
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50388: LD_ADDR_VAR 0 16
50392: PUSH
50393: LD_VAR 0 17
50397: PUSH
50398: LD_INT 1
50400: ARRAY
50401: PPUSH
50402: CALL_OW 250
50406: PPUSH
50407: LD_VAR 0 17
50411: PUSH
50412: LD_INT 1
50414: ARRAY
50415: PPUSH
50416: CALL_OW 254
50420: PPUSH
50421: LD_INT 5
50423: PPUSH
50424: CALL_OW 272
50428: PUSH
50429: LD_VAR 0 17
50433: PUSH
50434: LD_INT 1
50436: ARRAY
50437: PPUSH
50438: CALL_OW 251
50442: PPUSH
50443: LD_VAR 0 17
50447: PUSH
50448: LD_INT 1
50450: ARRAY
50451: PPUSH
50452: CALL_OW 254
50456: PPUSH
50457: LD_INT 5
50459: PPUSH
50460: CALL_OW 273
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50469: LD_VAR 0 16
50473: PUSH
50474: LD_INT 1
50476: ARRAY
50477: PPUSH
50478: LD_VAR 0 16
50482: PUSH
50483: LD_INT 2
50485: ARRAY
50486: PPUSH
50487: CALL_OW 488
50491: IFFALSE 50522
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50493: LD_VAR 0 13
50497: PPUSH
50498: LD_VAR 0 16
50502: PUSH
50503: LD_INT 1
50505: ARRAY
50506: PPUSH
50507: LD_VAR 0 16
50511: PUSH
50512: LD_INT 2
50514: ARRAY
50515: PPUSH
50516: CALL_OW 111
// continue ;
50520: GO 50012
// end ; end ; r := GetDir ( tmp ) ;
50522: LD_ADDR_VAR 0 15
50526: PUSH
50527: LD_VAR 0 13
50531: PPUSH
50532: CALL_OW 254
50536: ST_TO_ADDR
// if r = 5 then
50537: LD_VAR 0 15
50541: PUSH
50542: LD_INT 5
50544: EQUAL
50545: IFFALSE 50555
// r := 0 ;
50547: LD_ADDR_VAR 0 15
50551: PUSH
50552: LD_INT 0
50554: ST_TO_ADDR
// for j = r to 5 do
50555: LD_ADDR_VAR 0 10
50559: PUSH
50560: DOUBLE
50561: LD_VAR 0 15
50565: DEC
50566: ST_TO_ADDR
50567: LD_INT 5
50569: PUSH
50570: FOR_TO
50571: IFFALSE 50685
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50573: LD_ADDR_VAR 0 11
50577: PUSH
50578: LD_VAR 0 13
50582: PPUSH
50583: CALL_OW 250
50587: PPUSH
50588: LD_VAR 0 10
50592: PPUSH
50593: LD_INT 2
50595: PPUSH
50596: CALL_OW 272
50600: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50601: LD_ADDR_VAR 0 12
50605: PUSH
50606: LD_VAR 0 13
50610: PPUSH
50611: CALL_OW 251
50615: PPUSH
50616: LD_VAR 0 10
50620: PPUSH
50621: LD_INT 2
50623: PPUSH
50624: CALL_OW 273
50628: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50629: LD_VAR 0 11
50633: PPUSH
50634: LD_VAR 0 12
50638: PPUSH
50639: CALL_OW 488
50643: PUSH
50644: LD_VAR 0 11
50648: PPUSH
50649: LD_VAR 0 12
50653: PPUSH
50654: CALL_OW 428
50658: NOT
50659: AND
50660: IFFALSE 50683
// begin ComMoveXY ( tmp , _x , _y ) ;
50662: LD_VAR 0 13
50666: PPUSH
50667: LD_VAR 0 11
50671: PPUSH
50672: LD_VAR 0 12
50676: PPUSH
50677: CALL_OW 111
// break ;
50681: GO 50685
// end ; end ;
50683: GO 50570
50685: POP
50686: POP
// end ; end ;
50687: GO 50012
50689: POP
50690: POP
// end ;
50691: LD_VAR 0 8
50695: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50696: LD_INT 0
50698: PPUSH
// result := true ;
50699: LD_ADDR_VAR 0 3
50703: PUSH
50704: LD_INT 1
50706: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50707: LD_VAR 0 2
50711: PUSH
50712: LD_INT 24
50714: DOUBLE
50715: EQUAL
50716: IFTRUE 50726
50718: LD_INT 33
50720: DOUBLE
50721: EQUAL
50722: IFTRUE 50726
50724: GO 50751
50726: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50727: LD_ADDR_VAR 0 3
50731: PUSH
50732: LD_INT 32
50734: PPUSH
50735: LD_VAR 0 1
50739: PPUSH
50740: CALL_OW 321
50744: PUSH
50745: LD_INT 2
50747: EQUAL
50748: ST_TO_ADDR
50749: GO 51067
50751: LD_INT 20
50753: DOUBLE
50754: EQUAL
50755: IFTRUE 50759
50757: GO 50784
50759: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50760: LD_ADDR_VAR 0 3
50764: PUSH
50765: LD_INT 6
50767: PPUSH
50768: LD_VAR 0 1
50772: PPUSH
50773: CALL_OW 321
50777: PUSH
50778: LD_INT 2
50780: EQUAL
50781: ST_TO_ADDR
50782: GO 51067
50784: LD_INT 22
50786: DOUBLE
50787: EQUAL
50788: IFTRUE 50798
50790: LD_INT 36
50792: DOUBLE
50793: EQUAL
50794: IFTRUE 50798
50796: GO 50823
50798: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50799: LD_ADDR_VAR 0 3
50803: PUSH
50804: LD_INT 15
50806: PPUSH
50807: LD_VAR 0 1
50811: PPUSH
50812: CALL_OW 321
50816: PUSH
50817: LD_INT 2
50819: EQUAL
50820: ST_TO_ADDR
50821: GO 51067
50823: LD_INT 30
50825: DOUBLE
50826: EQUAL
50827: IFTRUE 50831
50829: GO 50856
50831: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50832: LD_ADDR_VAR 0 3
50836: PUSH
50837: LD_INT 20
50839: PPUSH
50840: LD_VAR 0 1
50844: PPUSH
50845: CALL_OW 321
50849: PUSH
50850: LD_INT 2
50852: EQUAL
50853: ST_TO_ADDR
50854: GO 51067
50856: LD_INT 28
50858: DOUBLE
50859: EQUAL
50860: IFTRUE 50870
50862: LD_INT 21
50864: DOUBLE
50865: EQUAL
50866: IFTRUE 50870
50868: GO 50895
50870: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50871: LD_ADDR_VAR 0 3
50875: PUSH
50876: LD_INT 21
50878: PPUSH
50879: LD_VAR 0 1
50883: PPUSH
50884: CALL_OW 321
50888: PUSH
50889: LD_INT 2
50891: EQUAL
50892: ST_TO_ADDR
50893: GO 51067
50895: LD_INT 16
50897: DOUBLE
50898: EQUAL
50899: IFTRUE 50903
50901: GO 50928
50903: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50904: LD_ADDR_VAR 0 3
50908: PUSH
50909: LD_INT 84
50911: PPUSH
50912: LD_VAR 0 1
50916: PPUSH
50917: CALL_OW 321
50921: PUSH
50922: LD_INT 2
50924: EQUAL
50925: ST_TO_ADDR
50926: GO 51067
50928: LD_INT 19
50930: DOUBLE
50931: EQUAL
50932: IFTRUE 50942
50934: LD_INT 23
50936: DOUBLE
50937: EQUAL
50938: IFTRUE 50942
50940: GO 50967
50942: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50943: LD_ADDR_VAR 0 3
50947: PUSH
50948: LD_INT 83
50950: PPUSH
50951: LD_VAR 0 1
50955: PPUSH
50956: CALL_OW 321
50960: PUSH
50961: LD_INT 2
50963: EQUAL
50964: ST_TO_ADDR
50965: GO 51067
50967: LD_INT 17
50969: DOUBLE
50970: EQUAL
50971: IFTRUE 50975
50973: GO 51000
50975: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50976: LD_ADDR_VAR 0 3
50980: PUSH
50981: LD_INT 39
50983: PPUSH
50984: LD_VAR 0 1
50988: PPUSH
50989: CALL_OW 321
50993: PUSH
50994: LD_INT 2
50996: EQUAL
50997: ST_TO_ADDR
50998: GO 51067
51000: LD_INT 18
51002: DOUBLE
51003: EQUAL
51004: IFTRUE 51008
51006: GO 51033
51008: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51009: LD_ADDR_VAR 0 3
51013: PUSH
51014: LD_INT 40
51016: PPUSH
51017: LD_VAR 0 1
51021: PPUSH
51022: CALL_OW 321
51026: PUSH
51027: LD_INT 2
51029: EQUAL
51030: ST_TO_ADDR
51031: GO 51067
51033: LD_INT 27
51035: DOUBLE
51036: EQUAL
51037: IFTRUE 51041
51039: GO 51066
51041: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51042: LD_ADDR_VAR 0 3
51046: PUSH
51047: LD_INT 35
51049: PPUSH
51050: LD_VAR 0 1
51054: PPUSH
51055: CALL_OW 321
51059: PUSH
51060: LD_INT 2
51062: EQUAL
51063: ST_TO_ADDR
51064: GO 51067
51066: POP
// end ;
51067: LD_VAR 0 3
51071: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51072: LD_INT 0
51074: PPUSH
51075: PPUSH
51076: PPUSH
51077: PPUSH
51078: PPUSH
51079: PPUSH
51080: PPUSH
51081: PPUSH
51082: PPUSH
51083: PPUSH
51084: PPUSH
// result := false ;
51085: LD_ADDR_VAR 0 6
51089: PUSH
51090: LD_INT 0
51092: ST_TO_ADDR
// if btype = b_depot then
51093: LD_VAR 0 2
51097: PUSH
51098: LD_INT 0
51100: EQUAL
51101: IFFALSE 51113
// begin result := true ;
51103: LD_ADDR_VAR 0 6
51107: PUSH
51108: LD_INT 1
51110: ST_TO_ADDR
// exit ;
51111: GO 51939
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51113: LD_VAR 0 1
51117: NOT
51118: PUSH
51119: LD_VAR 0 1
51123: PPUSH
51124: CALL_OW 266
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: IN
51139: NOT
51140: OR
51141: PUSH
51142: LD_VAR 0 2
51146: NOT
51147: OR
51148: PUSH
51149: LD_VAR 0 5
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: LD_INT 1
51159: PUSH
51160: LD_INT 2
51162: PUSH
51163: LD_INT 3
51165: PUSH
51166: LD_INT 4
51168: PUSH
51169: LD_INT 5
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: IN
51180: NOT
51181: OR
51182: PUSH
51183: LD_VAR 0 3
51187: PPUSH
51188: LD_VAR 0 4
51192: PPUSH
51193: CALL_OW 488
51197: NOT
51198: OR
51199: IFFALSE 51203
// exit ;
51201: GO 51939
// side := GetSide ( depot ) ;
51203: LD_ADDR_VAR 0 9
51207: PUSH
51208: LD_VAR 0 1
51212: PPUSH
51213: CALL_OW 255
51217: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51218: LD_VAR 0 9
51222: PPUSH
51223: LD_VAR 0 2
51227: PPUSH
51228: CALL 50696 0 2
51232: NOT
51233: IFFALSE 51237
// exit ;
51235: GO 51939
// pom := GetBase ( depot ) ;
51237: LD_ADDR_VAR 0 10
51241: PUSH
51242: LD_VAR 0 1
51246: PPUSH
51247: CALL_OW 274
51251: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51252: LD_ADDR_VAR 0 11
51256: PUSH
51257: LD_VAR 0 2
51261: PPUSH
51262: LD_VAR 0 1
51266: PPUSH
51267: CALL_OW 248
51271: PPUSH
51272: CALL_OW 450
51276: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51277: LD_VAR 0 10
51281: PPUSH
51282: LD_INT 1
51284: PPUSH
51285: CALL_OW 275
51289: PUSH
51290: LD_VAR 0 11
51294: PUSH
51295: LD_INT 1
51297: ARRAY
51298: GREATEREQUAL
51299: PUSH
51300: LD_VAR 0 10
51304: PPUSH
51305: LD_INT 2
51307: PPUSH
51308: CALL_OW 275
51312: PUSH
51313: LD_VAR 0 11
51317: PUSH
51318: LD_INT 2
51320: ARRAY
51321: GREATEREQUAL
51322: AND
51323: PUSH
51324: LD_VAR 0 10
51328: PPUSH
51329: LD_INT 3
51331: PPUSH
51332: CALL_OW 275
51336: PUSH
51337: LD_VAR 0 11
51341: PUSH
51342: LD_INT 3
51344: ARRAY
51345: GREATEREQUAL
51346: AND
51347: NOT
51348: IFFALSE 51352
// exit ;
51350: GO 51939
// if GetBType ( depot ) = b_depot then
51352: LD_VAR 0 1
51356: PPUSH
51357: CALL_OW 266
51361: PUSH
51362: LD_INT 0
51364: EQUAL
51365: IFFALSE 51377
// dist := 28 else
51367: LD_ADDR_VAR 0 14
51371: PUSH
51372: LD_INT 28
51374: ST_TO_ADDR
51375: GO 51385
// dist := 36 ;
51377: LD_ADDR_VAR 0 14
51381: PUSH
51382: LD_INT 36
51384: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51385: LD_VAR 0 1
51389: PPUSH
51390: LD_VAR 0 3
51394: PPUSH
51395: LD_VAR 0 4
51399: PPUSH
51400: CALL_OW 297
51404: PUSH
51405: LD_VAR 0 14
51409: GREATER
51410: IFFALSE 51414
// exit ;
51412: GO 51939
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51414: LD_ADDR_VAR 0 12
51418: PUSH
51419: LD_VAR 0 2
51423: PPUSH
51424: LD_VAR 0 3
51428: PPUSH
51429: LD_VAR 0 4
51433: PPUSH
51434: LD_VAR 0 5
51438: PPUSH
51439: LD_VAR 0 1
51443: PPUSH
51444: CALL_OW 248
51448: PPUSH
51449: LD_INT 0
51451: PPUSH
51452: CALL 51944 0 6
51456: ST_TO_ADDR
// if not hexes then
51457: LD_VAR 0 12
51461: NOT
51462: IFFALSE 51466
// exit ;
51464: GO 51939
// hex := GetHexInfo ( x , y ) ;
51466: LD_ADDR_VAR 0 15
51470: PUSH
51471: LD_VAR 0 3
51475: PPUSH
51476: LD_VAR 0 4
51480: PPUSH
51481: CALL_OW 546
51485: ST_TO_ADDR
// if hex [ 1 ] then
51486: LD_VAR 0 15
51490: PUSH
51491: LD_INT 1
51493: ARRAY
51494: IFFALSE 51498
// exit ;
51496: GO 51939
// height := hex [ 2 ] ;
51498: LD_ADDR_VAR 0 13
51502: PUSH
51503: LD_VAR 0 15
51507: PUSH
51508: LD_INT 2
51510: ARRAY
51511: ST_TO_ADDR
// for i = 1 to hexes do
51512: LD_ADDR_VAR 0 7
51516: PUSH
51517: DOUBLE
51518: LD_INT 1
51520: DEC
51521: ST_TO_ADDR
51522: LD_VAR 0 12
51526: PUSH
51527: FOR_TO
51528: IFFALSE 51858
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51530: LD_VAR 0 12
51534: PUSH
51535: LD_VAR 0 7
51539: ARRAY
51540: PUSH
51541: LD_INT 1
51543: ARRAY
51544: PPUSH
51545: LD_VAR 0 12
51549: PUSH
51550: LD_VAR 0 7
51554: ARRAY
51555: PUSH
51556: LD_INT 2
51558: ARRAY
51559: PPUSH
51560: CALL_OW 488
51564: NOT
51565: PUSH
51566: LD_VAR 0 12
51570: PUSH
51571: LD_VAR 0 7
51575: ARRAY
51576: PUSH
51577: LD_INT 1
51579: ARRAY
51580: PPUSH
51581: LD_VAR 0 12
51585: PUSH
51586: LD_VAR 0 7
51590: ARRAY
51591: PUSH
51592: LD_INT 2
51594: ARRAY
51595: PPUSH
51596: CALL_OW 428
51600: PUSH
51601: LD_INT 0
51603: GREATER
51604: OR
51605: PUSH
51606: LD_VAR 0 12
51610: PUSH
51611: LD_VAR 0 7
51615: ARRAY
51616: PUSH
51617: LD_INT 1
51619: ARRAY
51620: PPUSH
51621: LD_VAR 0 12
51625: PUSH
51626: LD_VAR 0 7
51630: ARRAY
51631: PUSH
51632: LD_INT 2
51634: ARRAY
51635: PPUSH
51636: CALL_OW 351
51640: OR
51641: IFFALSE 51647
// exit ;
51643: POP
51644: POP
51645: GO 51939
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51647: LD_ADDR_VAR 0 8
51651: PUSH
51652: LD_VAR 0 12
51656: PUSH
51657: LD_VAR 0 7
51661: ARRAY
51662: PUSH
51663: LD_INT 1
51665: ARRAY
51666: PPUSH
51667: LD_VAR 0 12
51671: PUSH
51672: LD_VAR 0 7
51676: ARRAY
51677: PUSH
51678: LD_INT 2
51680: ARRAY
51681: PPUSH
51682: CALL_OW 546
51686: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51687: LD_VAR 0 8
51691: PUSH
51692: LD_INT 1
51694: ARRAY
51695: PUSH
51696: LD_VAR 0 8
51700: PUSH
51701: LD_INT 2
51703: ARRAY
51704: PUSH
51705: LD_VAR 0 13
51709: PUSH
51710: LD_INT 2
51712: PLUS
51713: GREATER
51714: OR
51715: PUSH
51716: LD_VAR 0 8
51720: PUSH
51721: LD_INT 2
51723: ARRAY
51724: PUSH
51725: LD_VAR 0 13
51729: PUSH
51730: LD_INT 2
51732: MINUS
51733: LESS
51734: OR
51735: PUSH
51736: LD_VAR 0 8
51740: PUSH
51741: LD_INT 3
51743: ARRAY
51744: PUSH
51745: LD_INT 0
51747: PUSH
51748: LD_INT 8
51750: PUSH
51751: LD_INT 9
51753: PUSH
51754: LD_INT 10
51756: PUSH
51757: LD_INT 11
51759: PUSH
51760: LD_INT 12
51762: PUSH
51763: LD_INT 13
51765: PUSH
51766: LD_INT 16
51768: PUSH
51769: LD_INT 17
51771: PUSH
51772: LD_INT 18
51774: PUSH
51775: LD_INT 19
51777: PUSH
51778: LD_INT 20
51780: PUSH
51781: LD_INT 21
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: IN
51799: NOT
51800: OR
51801: PUSH
51802: LD_VAR 0 8
51806: PUSH
51807: LD_INT 5
51809: ARRAY
51810: NOT
51811: OR
51812: PUSH
51813: LD_VAR 0 8
51817: PUSH
51818: LD_INT 6
51820: ARRAY
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: LD_INT 2
51827: PUSH
51828: LD_INT 7
51830: PUSH
51831: LD_INT 9
51833: PUSH
51834: LD_INT 10
51836: PUSH
51837: LD_INT 11
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: IN
51848: NOT
51849: OR
51850: IFFALSE 51856
// exit ;
51852: POP
51853: POP
51854: GO 51939
// end ;
51856: GO 51527
51858: POP
51859: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51860: LD_VAR 0 9
51864: PPUSH
51865: LD_VAR 0 3
51869: PPUSH
51870: LD_VAR 0 4
51874: PPUSH
51875: LD_INT 20
51877: PPUSH
51878: CALL 43862 0 4
51882: PUSH
51883: LD_INT 4
51885: ARRAY
51886: IFFALSE 51890
// exit ;
51888: GO 51939
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51890: LD_VAR 0 2
51894: PUSH
51895: LD_INT 29
51897: PUSH
51898: LD_INT 30
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: IN
51905: PUSH
51906: LD_VAR 0 3
51910: PPUSH
51911: LD_VAR 0 4
51915: PPUSH
51916: LD_VAR 0 9
51920: PPUSH
51921: CALL_OW 440
51925: NOT
51926: AND
51927: IFFALSE 51931
// exit ;
51929: GO 51939
// result := true ;
51931: LD_ADDR_VAR 0 6
51935: PUSH
51936: LD_INT 1
51938: ST_TO_ADDR
// end ;
51939: LD_VAR 0 6
51943: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51944: LD_INT 0
51946: PPUSH
51947: PPUSH
51948: PPUSH
51949: PPUSH
51950: PPUSH
51951: PPUSH
51952: PPUSH
51953: PPUSH
51954: PPUSH
51955: PPUSH
51956: PPUSH
51957: PPUSH
51958: PPUSH
51959: PPUSH
51960: PPUSH
51961: PPUSH
51962: PPUSH
51963: PPUSH
51964: PPUSH
51965: PPUSH
51966: PPUSH
51967: PPUSH
51968: PPUSH
51969: PPUSH
51970: PPUSH
51971: PPUSH
51972: PPUSH
51973: PPUSH
51974: PPUSH
51975: PPUSH
51976: PPUSH
51977: PPUSH
51978: PPUSH
51979: PPUSH
51980: PPUSH
51981: PPUSH
51982: PPUSH
51983: PPUSH
51984: PPUSH
51985: PPUSH
51986: PPUSH
51987: PPUSH
51988: PPUSH
51989: PPUSH
51990: PPUSH
51991: PPUSH
51992: PPUSH
51993: PPUSH
51994: PPUSH
51995: PPUSH
51996: PPUSH
51997: PPUSH
51998: PPUSH
51999: PPUSH
52000: PPUSH
52001: PPUSH
52002: PPUSH
52003: PPUSH
// result = [ ] ;
52004: LD_ADDR_VAR 0 7
52008: PUSH
52009: EMPTY
52010: ST_TO_ADDR
// temp_list = [ ] ;
52011: LD_ADDR_VAR 0 9
52015: PUSH
52016: EMPTY
52017: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52018: LD_VAR 0 4
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: LD_INT 2
52031: PUSH
52032: LD_INT 3
52034: PUSH
52035: LD_INT 4
52037: PUSH
52038: LD_INT 5
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: IN
52049: NOT
52050: PUSH
52051: LD_VAR 0 1
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: IN
52066: PUSH
52067: LD_VAR 0 5
52071: PUSH
52072: LD_INT 1
52074: PUSH
52075: LD_INT 2
52077: PUSH
52078: LD_INT 3
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: LIST
52085: IN
52086: NOT
52087: AND
52088: OR
52089: IFFALSE 52093
// exit ;
52091: GO 70484
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52093: LD_VAR 0 1
52097: PUSH
52098: LD_INT 6
52100: PUSH
52101: LD_INT 7
52103: PUSH
52104: LD_INT 8
52106: PUSH
52107: LD_INT 13
52109: PUSH
52110: LD_INT 12
52112: PUSH
52113: LD_INT 15
52115: PUSH
52116: LD_INT 11
52118: PUSH
52119: LD_INT 14
52121: PUSH
52122: LD_INT 10
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: IN
52136: IFFALSE 52146
// btype = b_lab ;
52138: LD_ADDR_VAR 0 1
52142: PUSH
52143: LD_INT 6
52145: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52146: LD_VAR 0 6
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: LD_INT 2
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: LIST
52164: IN
52165: NOT
52166: PUSH
52167: LD_VAR 0 1
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: LD_INT 2
52180: PUSH
52181: LD_INT 3
52183: PUSH
52184: LD_INT 6
52186: PUSH
52187: LD_INT 36
52189: PUSH
52190: LD_INT 4
52192: PUSH
52193: LD_INT 5
52195: PUSH
52196: LD_INT 31
52198: PUSH
52199: LD_INT 32
52201: PUSH
52202: LD_INT 33
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: IN
52218: NOT
52219: PUSH
52220: LD_VAR 0 6
52224: PUSH
52225: LD_INT 1
52227: EQUAL
52228: AND
52229: OR
52230: PUSH
52231: LD_VAR 0 1
52235: PUSH
52236: LD_INT 2
52238: PUSH
52239: LD_INT 3
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: IN
52246: NOT
52247: PUSH
52248: LD_VAR 0 6
52252: PUSH
52253: LD_INT 2
52255: EQUAL
52256: AND
52257: OR
52258: IFFALSE 52268
// mode = 0 ;
52260: LD_ADDR_VAR 0 6
52264: PUSH
52265: LD_INT 0
52267: ST_TO_ADDR
// case mode of 0 :
52268: LD_VAR 0 6
52272: PUSH
52273: LD_INT 0
52275: DOUBLE
52276: EQUAL
52277: IFTRUE 52281
52279: GO 63734
52281: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52282: LD_ADDR_VAR 0 11
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: LD_INT 0
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 0
52299: PUSH
52300: LD_INT 1
52302: NEG
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: LD_INT 0
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 1
52320: PUSH
52321: LD_INT 1
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: LD_INT 1
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 1
52340: NEG
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 1
52351: NEG
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: NEG
52364: PUSH
52365: LD_INT 2
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: LD_INT 2
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 1
52397: PUSH
52398: LD_INT 2
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: LD_INT 2
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 1
52417: NEG
52418: PUSH
52419: LD_INT 1
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 1
52428: PUSH
52429: LD_INT 3
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: LD_INT 3
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: NEG
52449: PUSH
52450: LD_INT 2
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52475: LD_ADDR_VAR 0 12
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: LD_INT 0
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: LD_INT 1
52495: NEG
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 1
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: PUSH
52514: LD_INT 1
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 1
52533: NEG
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 1
52544: NEG
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 2
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 2
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: LD_INT 1
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 2
52598: NEG
52599: PUSH
52600: LD_INT 0
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 2
52609: NEG
52610: PUSH
52611: LD_INT 1
52613: NEG
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 2
52621: NEG
52622: PUSH
52623: LD_INT 1
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 3
52632: NEG
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 3
52643: NEG
52644: PUSH
52645: LD_INT 1
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52671: LD_ADDR_VAR 0 13
52675: PUSH
52676: LD_INT 0
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: LD_INT 1
52691: NEG
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 1
52699: PUSH
52700: LD_INT 0
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 1
52709: PUSH
52710: LD_INT 1
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 0
52719: PUSH
52720: LD_INT 1
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 1
52729: NEG
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 1
52740: NEG
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 1
52752: NEG
52753: PUSH
52754: LD_INT 2
52756: NEG
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 2
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 2
52774: PUSH
52775: LD_INT 2
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: PUSH
52785: LD_INT 2
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 2
52794: NEG
52795: PUSH
52796: LD_INT 1
52798: NEG
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 2
52806: NEG
52807: PUSH
52808: LD_INT 2
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 2
52818: NEG
52819: PUSH
52820: LD_INT 3
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 3
52830: NEG
52831: PUSH
52832: LD_INT 2
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 3
52842: NEG
52843: PUSH
52844: LD_INT 3
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52870: LD_ADDR_VAR 0 14
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 0
52887: PUSH
52888: LD_INT 1
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: LD_INT 0
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 1
52908: PUSH
52909: LD_INT 1
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 0
52918: PUSH
52919: LD_INT 1
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 1
52928: NEG
52929: PUSH
52930: LD_INT 0
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 1
52939: NEG
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 1
52951: NEG
52952: PUSH
52953: LD_INT 2
52955: NEG
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: LD_INT 2
52966: NEG
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: LD_INT 1
52977: NEG
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 1
52985: PUSH
52986: LD_INT 2
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: LD_INT 2
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: LD_INT 1
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: LD_INT 3
53020: NEG
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: LD_INT 3
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 1
53039: PUSH
53040: LD_INT 2
53042: NEG
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53066: LD_ADDR_VAR 0 15
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: LD_INT 1
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: LD_INT 1
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 1
53124: NEG
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 2
53158: PUSH
53159: LD_INT 0
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 2
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: PUSH
53180: LD_INT 1
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 2
53189: NEG
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 2
53200: NEG
53201: PUSH
53202: LD_INT 1
53204: NEG
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 2
53212: PUSH
53213: LD_INT 1
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 3
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 3
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53259: LD_ADDR_VAR 0 16
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 1
53287: PUSH
53288: LD_INT 0
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: LD_INT 1
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: PUSH
53319: LD_INT 0
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: NEG
53341: PUSH
53342: LD_INT 2
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 2
53352: PUSH
53353: LD_INT 1
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 2
53362: PUSH
53363: LD_INT 2
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 1
53372: PUSH
53373: LD_INT 2
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 2
53382: NEG
53383: PUSH
53384: LD_INT 1
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 2
53394: NEG
53395: PUSH
53396: LD_INT 2
53398: NEG
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 3
53406: PUSH
53407: LD_INT 2
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 3
53416: PUSH
53417: LD_INT 3
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 2
53426: PUSH
53427: LD_INT 3
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53452: LD_ADDR_VAR 0 17
53456: PUSH
53457: LD_INT 0
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 1
53480: PUSH
53481: LD_INT 0
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 1
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 1
53510: NEG
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 1
53521: NEG
53522: PUSH
53523: LD_INT 1
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 1
53533: NEG
53534: PUSH
53535: LD_INT 2
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: LD_INT 2
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 2
53567: PUSH
53568: LD_INT 0
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 2
53577: PUSH
53578: LD_INT 1
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 2
53587: PUSH
53588: LD_INT 2
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: PUSH
53598: LD_INT 2
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: LD_INT 2
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 1
53617: NEG
53618: PUSH
53619: LD_INT 1
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 2
53628: NEG
53629: PUSH
53630: LD_INT 0
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 2
53639: NEG
53640: PUSH
53641: LD_INT 1
53643: NEG
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 2
53651: NEG
53652: PUSH
53653: LD_INT 2
53655: NEG
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53682: LD_ADDR_VAR 0 18
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: LD_INT 0
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: LD_INT 1
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 1
53740: NEG
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: LD_INT 1
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 1
53763: NEG
53764: PUSH
53765: LD_INT 2
53767: NEG
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: LD_INT 2
53778: NEG
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 2
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 2
53807: PUSH
53808: LD_INT 1
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 2
53817: PUSH
53818: LD_INT 2
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: PUSH
53828: LD_INT 2
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 0
53837: PUSH
53838: LD_INT 2
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 1
53847: NEG
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 2
53858: NEG
53859: PUSH
53860: LD_INT 0
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 2
53869: NEG
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 2
53881: NEG
53882: PUSH
53883: LD_INT 2
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53912: LD_ADDR_VAR 0 19
53916: PUSH
53917: LD_INT 0
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: LD_INT 1
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 1
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 1
53950: PUSH
53951: LD_INT 1
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: LD_INT 1
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 1
53970: NEG
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: NEG
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 1
53993: NEG
53994: PUSH
53995: LD_INT 2
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: LD_INT 2
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 2
54027: PUSH
54028: LD_INT 0
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 2
54037: PUSH
54038: LD_INT 1
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 2
54047: PUSH
54048: LD_INT 2
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 1
54057: PUSH
54058: LD_INT 2
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: LD_INT 2
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 1
54077: NEG
54078: PUSH
54079: LD_INT 1
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 2
54088: NEG
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 2
54099: NEG
54100: PUSH
54101: LD_INT 1
54103: NEG
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 2
54111: NEG
54112: PUSH
54113: LD_INT 2
54115: NEG
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54142: LD_ADDR_VAR 0 20
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: LD_INT 1
54162: NEG
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: LD_INT 0
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: NEG
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: NEG
54224: PUSH
54225: LD_INT 2
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: LD_INT 2
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 2
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 2
54267: PUSH
54268: LD_INT 1
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 2
54277: PUSH
54278: LD_INT 2
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: PUSH
54288: LD_INT 2
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: LD_INT 2
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: LD_INT 1
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 2
54318: NEG
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 2
54329: NEG
54330: PUSH
54331: LD_INT 1
54333: NEG
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 2
54341: NEG
54342: PUSH
54343: LD_INT 2
54345: NEG
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54372: LD_ADDR_VAR 0 21
54376: PUSH
54377: LD_INT 0
54379: PUSH
54380: LD_INT 0
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: LD_INT 1
54392: NEG
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 1
54410: PUSH
54411: LD_INT 1
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: LD_INT 1
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 1
54430: NEG
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 1
54441: NEG
54442: PUSH
54443: LD_INT 1
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: LD_INT 2
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: LD_INT 2
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: PUSH
54477: LD_INT 1
54479: NEG
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 2
54487: PUSH
54488: LD_INT 0
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 2
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 2
54507: PUSH
54508: LD_INT 2
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 1
54517: PUSH
54518: LD_INT 2
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: LD_INT 2
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 1
54537: NEG
54538: PUSH
54539: LD_INT 1
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 2
54548: NEG
54549: PUSH
54550: LD_INT 0
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 2
54559: NEG
54560: PUSH
54561: LD_INT 1
54563: NEG
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 2
54571: NEG
54572: PUSH
54573: LD_INT 2
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54602: LD_ADDR_VAR 0 22
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: LD_INT 0
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: LD_INT 1
54622: NEG
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: LD_INT 0
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 1
54640: PUSH
54641: LD_INT 1
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: LD_INT 1
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 1
54671: NEG
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: NEG
54684: PUSH
54685: LD_INT 2
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: LD_INT 2
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: LD_INT 1
54709: NEG
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 2
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 2
54727: PUSH
54728: LD_INT 1
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 2
54737: PUSH
54738: LD_INT 2
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 1
54747: PUSH
54748: LD_INT 2
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: LD_INT 2
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 2
54778: NEG
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 2
54789: NEG
54790: PUSH
54791: LD_INT 1
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 2
54801: NEG
54802: PUSH
54803: LD_INT 2
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54832: LD_ADDR_VAR 0 23
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: LD_INT 0
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: LD_INT 1
54852: NEG
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 1
54860: PUSH
54861: LD_INT 0
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 1
54870: PUSH
54871: LD_INT 1
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 0
54880: PUSH
54881: LD_INT 1
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 1
54890: NEG
54891: PUSH
54892: LD_INT 0
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 1
54901: NEG
54902: PUSH
54903: LD_INT 1
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: NEG
54914: PUSH
54915: LD_INT 2
54917: NEG
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: LD_INT 2
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 1
54936: PUSH
54937: LD_INT 1
54939: NEG
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 2
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 2
54957: PUSH
54958: LD_INT 1
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 2
54967: PUSH
54968: LD_INT 2
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 1
54977: PUSH
54978: LD_INT 2
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: LD_INT 2
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 1
54997: NEG
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 2
55008: NEG
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 2
55019: NEG
55020: PUSH
55021: LD_INT 1
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 2
55031: NEG
55032: PUSH
55033: LD_INT 2
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 2
55043: NEG
55044: PUSH
55045: LD_INT 3
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: LD_INT 3
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: LD_INT 2
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 2
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55112: LD_ADDR_VAR 0 24
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 1
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: LD_INT 1
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: LD_INT 1
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 1
55170: NEG
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: LD_INT 1
55185: NEG
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 1
55193: NEG
55194: PUSH
55195: LD_INT 2
55197: NEG
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: LD_INT 2
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: PUSH
55217: LD_INT 1
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 2
55227: PUSH
55228: LD_INT 0
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 2
55237: PUSH
55238: LD_INT 1
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 2
55247: PUSH
55248: LD_INT 2
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 1
55257: PUSH
55258: LD_INT 2
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 0
55267: PUSH
55268: LD_INT 2
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 2
55288: NEG
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 2
55299: NEG
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 2
55311: NEG
55312: PUSH
55313: LD_INT 2
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 1
55323: PUSH
55324: LD_INT 2
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 2
55334: PUSH
55335: LD_INT 1
55337: NEG
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 3
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 3
55355: PUSH
55356: LD_INT 2
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55388: LD_ADDR_VAR 0 25
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: LD_INT 1
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 0
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: LD_INT 0
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: LD_INT 1
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: LD_INT 2
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: LD_INT 2
55484: NEG
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 1
55492: PUSH
55493: LD_INT 1
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 2
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 2
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 2
55523: PUSH
55524: LD_INT 2
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 1
55533: PUSH
55534: LD_INT 2
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 0
55543: PUSH
55544: LD_INT 2
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: NEG
55554: PUSH
55555: LD_INT 1
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 2
55564: NEG
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 2
55575: NEG
55576: PUSH
55577: LD_INT 1
55579: NEG
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 2
55587: NEG
55588: PUSH
55589: LD_INT 2
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 3
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 3
55609: PUSH
55610: LD_INT 2
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 2
55619: PUSH
55620: LD_INT 3
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: LD_INT 3
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55662: LD_ADDR_VAR 0 26
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 1
55690: PUSH
55691: LD_INT 0
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 0
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 1
55720: NEG
55721: PUSH
55722: LD_INT 0
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 1
55731: NEG
55732: PUSH
55733: LD_INT 1
55735: NEG
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: LD_INT 2
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 0
55755: PUSH
55756: LD_INT 2
55758: NEG
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 2
55777: PUSH
55778: LD_INT 0
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 2
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 2
55797: PUSH
55798: LD_INT 2
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 1
55807: PUSH
55808: LD_INT 2
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 0
55817: PUSH
55818: LD_INT 2
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 1
55827: NEG
55828: PUSH
55829: LD_INT 1
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 2
55838: NEG
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 2
55849: NEG
55850: PUSH
55851: LD_INT 1
55853: NEG
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 2
55861: NEG
55862: PUSH
55863: LD_INT 2
55865: NEG
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 2
55873: PUSH
55874: LD_INT 3
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: LD_INT 3
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 1
55893: NEG
55894: PUSH
55895: LD_INT 2
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 2
55904: NEG
55905: PUSH
55906: LD_INT 1
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55938: LD_ADDR_VAR 0 27
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 0
55955: PUSH
55956: LD_INT 1
55958: NEG
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 1
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 1
55976: PUSH
55977: LD_INT 1
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 0
55986: PUSH
55987: LD_INT 1
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 1
55996: NEG
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 1
56007: NEG
56008: PUSH
56009: LD_INT 1
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: LD_INT 2
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 0
56031: PUSH
56032: LD_INT 2
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: LD_INT 1
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 2
56053: PUSH
56054: LD_INT 0
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 2
56063: PUSH
56064: LD_INT 1
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 2
56073: PUSH
56074: LD_INT 2
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 1
56083: PUSH
56084: LD_INT 2
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: LD_INT 2
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: LD_INT 1
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 2
56114: NEG
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 2
56125: NEG
56126: PUSH
56127: LD_INT 1
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 2
56137: NEG
56138: PUSH
56139: LD_INT 2
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 1
56149: NEG
56150: PUSH
56151: LD_INT 2
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 2
56160: NEG
56161: PUSH
56162: LD_INT 1
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 3
56171: NEG
56172: PUSH
56173: LD_INT 1
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 3
56183: NEG
56184: PUSH
56185: LD_INT 2
56187: NEG
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56218: LD_ADDR_VAR 0 28
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: LD_INT 1
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 1
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: LD_INT 1
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 1
56276: NEG
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 1
56287: NEG
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 1
56299: NEG
56300: PUSH
56301: LD_INT 2
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: LD_INT 2
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 1
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 2
56333: PUSH
56334: LD_INT 0
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 2
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 2
56353: PUSH
56354: LD_INT 2
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: LD_INT 2
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: LD_INT 2
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: LD_INT 1
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 2
56394: NEG
56395: PUSH
56396: LD_INT 0
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 2
56405: NEG
56406: PUSH
56407: LD_INT 1
56409: NEG
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 2
56417: NEG
56418: PUSH
56419: LD_INT 2
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 2
56429: NEG
56430: PUSH
56431: LD_INT 3
56433: NEG
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 1
56441: NEG
56442: PUSH
56443: LD_INT 3
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 3
56453: NEG
56454: PUSH
56455: LD_INT 1
56457: NEG
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 3
56465: NEG
56466: PUSH
56467: LD_INT 2
56469: NEG
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56500: LD_ADDR_VAR 0 29
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 0
56517: PUSH
56518: LD_INT 1
56520: NEG
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 1
56528: PUSH
56529: LD_INT 0
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 1
56538: PUSH
56539: LD_INT 1
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: LD_INT 1
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 1
56558: NEG
56559: PUSH
56560: LD_INT 0
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 1
56569: NEG
56570: PUSH
56571: LD_INT 1
56573: NEG
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 1
56581: NEG
56582: PUSH
56583: LD_INT 2
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 0
56593: PUSH
56594: LD_INT 2
56596: NEG
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 1
56604: PUSH
56605: LD_INT 1
56607: NEG
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 2
56615: PUSH
56616: LD_INT 0
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 2
56625: PUSH
56626: LD_INT 1
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 1
56635: PUSH
56636: LD_INT 2
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 0
56645: PUSH
56646: LD_INT 2
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 1
56655: NEG
56656: PUSH
56657: LD_INT 1
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 2
56666: NEG
56667: PUSH
56668: LD_INT 1
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 2
56678: NEG
56679: PUSH
56680: LD_INT 2
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 2
56690: NEG
56691: PUSH
56692: LD_INT 3
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 2
56702: PUSH
56703: LD_INT 1
56705: NEG
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 3
56713: PUSH
56714: LD_INT 1
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 1
56723: PUSH
56724: LD_INT 3
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: LD_INT 2
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 3
56744: NEG
56745: PUSH
56746: LD_INT 2
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56779: LD_ADDR_VAR 0 30
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: LD_INT 1
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 1
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 1
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 0
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 1
56848: NEG
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 1
56860: NEG
56861: PUSH
56862: LD_INT 2
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: LD_INT 2
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: LD_INT 1
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 2
56894: PUSH
56895: LD_INT 0
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 2
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 2
56914: PUSH
56915: LD_INT 2
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 1
56924: PUSH
56925: LD_INT 2
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 1
56934: NEG
56935: PUSH
56936: LD_INT 1
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 2
56945: NEG
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 2
56956: NEG
56957: PUSH
56958: LD_INT 1
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 1
56968: NEG
56969: PUSH
56970: LD_INT 3
56972: NEG
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: LD_INT 2
56983: NEG
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 3
56991: PUSH
56992: LD_INT 2
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 2
57001: PUSH
57002: LD_INT 3
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 2
57011: NEG
57012: PUSH
57013: LD_INT 1
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 3
57022: NEG
57023: PUSH
57024: LD_INT 1
57026: NEG
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57057: LD_ADDR_VAR 0 31
57061: PUSH
57062: LD_INT 0
57064: PUSH
57065: LD_INT 0
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 0
57074: PUSH
57075: LD_INT 1
57077: NEG
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 1
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 1
57095: PUSH
57096: LD_INT 1
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: LD_INT 1
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 1
57115: NEG
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 1
57126: NEG
57127: PUSH
57128: LD_INT 1
57130: NEG
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 1
57138: NEG
57139: PUSH
57140: LD_INT 2
57142: NEG
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 1
57150: PUSH
57151: LD_INT 1
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 2
57161: PUSH
57162: LD_INT 0
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 2
57171: PUSH
57172: LD_INT 1
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 2
57181: PUSH
57182: LD_INT 2
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 1
57191: PUSH
57192: LD_INT 2
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: LD_INT 2
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: LD_INT 1
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 2
57222: NEG
57223: PUSH
57224: LD_INT 1
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 2
57234: NEG
57235: PUSH
57236: LD_INT 2
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 2
57246: NEG
57247: PUSH
57248: LD_INT 3
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 2
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 3
57269: PUSH
57270: LD_INT 1
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 1
57279: PUSH
57280: LD_INT 3
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: LD_INT 2
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 3
57300: NEG
57301: PUSH
57302: LD_INT 2
57304: NEG
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57335: LD_ADDR_VAR 0 32
57339: PUSH
57340: LD_INT 0
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: LD_INT 1
57355: NEG
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 1
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 1
57393: NEG
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 1
57404: NEG
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 1
57416: NEG
57417: PUSH
57418: LD_INT 2
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 0
57428: PUSH
57429: LD_INT 2
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: LD_INT 1
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 2
57450: PUSH
57451: LD_INT 1
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 2
57460: PUSH
57461: LD_INT 2
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: LD_INT 2
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: LD_INT 2
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: LD_INT 1
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 2
57501: NEG
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 2
57512: NEG
57513: PUSH
57514: LD_INT 1
57516: NEG
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 1
57524: NEG
57525: PUSH
57526: LD_INT 3
57528: NEG
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: LD_INT 2
57539: NEG
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 3
57547: PUSH
57548: LD_INT 2
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 2
57557: PUSH
57558: LD_INT 3
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 2
57567: NEG
57568: PUSH
57569: LD_INT 1
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 3
57578: NEG
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57613: LD_ADDR_VAR 0 33
57617: PUSH
57618: LD_INT 0
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 0
57630: PUSH
57631: LD_INT 1
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 1
57641: PUSH
57642: LD_INT 0
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 1
57651: PUSH
57652: LD_INT 1
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: LD_INT 1
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 1
57671: NEG
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 1
57682: NEG
57683: PUSH
57684: LD_INT 1
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 1
57694: NEG
57695: PUSH
57696: LD_INT 2
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 1
57706: PUSH
57707: LD_INT 1
57709: NEG
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 2
57717: PUSH
57718: LD_INT 0
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 2
57727: PUSH
57728: LD_INT 1
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 1
57737: PUSH
57738: LD_INT 2
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: LD_INT 2
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 1
57757: NEG
57758: PUSH
57759: LD_INT 1
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 2
57768: NEG
57769: PUSH
57770: LD_INT 0
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 2
57779: NEG
57780: PUSH
57781: LD_INT 1
57783: NEG
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 2
57791: NEG
57792: PUSH
57793: LD_INT 2
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 2
57803: NEG
57804: PUSH
57805: LD_INT 3
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 2
57815: PUSH
57816: LD_INT 1
57818: NEG
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 3
57826: PUSH
57827: LD_INT 1
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 1
57836: PUSH
57837: LD_INT 3
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: NEG
57847: PUSH
57848: LD_INT 2
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 3
57857: NEG
57858: PUSH
57859: LD_INT 2
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57892: LD_ADDR_VAR 0 34
57896: PUSH
57897: LD_INT 0
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 0
57909: PUSH
57910: LD_INT 1
57912: NEG
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 1
57920: PUSH
57921: LD_INT 0
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: LD_INT 1
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 0
57940: PUSH
57941: LD_INT 1
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 1
57950: NEG
57951: PUSH
57952: LD_INT 0
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 1
57961: NEG
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 1
57973: NEG
57974: PUSH
57975: LD_INT 2
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 0
57985: PUSH
57986: LD_INT 2
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 1
57996: PUSH
57997: LD_INT 1
57999: NEG
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 2
58007: PUSH
58008: LD_INT 1
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 2
58017: PUSH
58018: LD_INT 2
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: LD_INT 2
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 1
58037: NEG
58038: PUSH
58039: LD_INT 1
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 2
58048: NEG
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 2
58059: NEG
58060: PUSH
58061: LD_INT 1
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 2
58071: NEG
58072: PUSH
58073: LD_INT 2
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 1
58083: NEG
58084: PUSH
58085: LD_INT 3
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 1
58095: PUSH
58096: LD_INT 2
58098: NEG
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 3
58106: PUSH
58107: LD_INT 2
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 2
58116: PUSH
58117: LD_INT 3
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 2
58126: NEG
58127: PUSH
58128: LD_INT 1
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 3
58137: NEG
58138: PUSH
58139: LD_INT 1
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58172: LD_ADDR_VAR 0 35
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: LD_INT 0
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 0
58189: PUSH
58190: LD_INT 1
58192: NEG
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 1
58200: PUSH
58201: LD_INT 0
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 1
58210: PUSH
58211: LD_INT 1
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 0
58220: PUSH
58221: LD_INT 1
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 1
58230: NEG
58231: PUSH
58232: LD_INT 0
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 1
58241: NEG
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 2
58253: PUSH
58254: LD_INT 1
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 2
58263: NEG
58264: PUSH
58265: LD_INT 1
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58284: LD_ADDR_VAR 0 36
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: LD_INT 0
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 0
58301: PUSH
58302: LD_INT 1
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: LD_INT 0
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 1
58322: PUSH
58323: LD_INT 1
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 0
58332: PUSH
58333: LD_INT 1
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 1
58342: NEG
58343: PUSH
58344: LD_INT 0
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: NEG
58354: PUSH
58355: LD_INT 1
58357: NEG
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 1
58365: NEG
58366: PUSH
58367: LD_INT 2
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: LD_INT 2
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58396: LD_ADDR_VAR 0 37
58400: PUSH
58401: LD_INT 0
58403: PUSH
58404: LD_INT 0
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: LD_INT 1
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: LD_INT 0
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 1
58434: PUSH
58435: LD_INT 1
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 0
58444: PUSH
58445: LD_INT 1
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 1
58454: NEG
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 1
58465: NEG
58466: PUSH
58467: LD_INT 1
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 1
58477: PUSH
58478: LD_INT 1
58480: NEG
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 1
58488: NEG
58489: PUSH
58490: LD_INT 1
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58508: LD_ADDR_VAR 0 38
58512: PUSH
58513: LD_INT 0
58515: PUSH
58516: LD_INT 0
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 0
58525: PUSH
58526: LD_INT 1
58528: NEG
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 1
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 1
58546: PUSH
58547: LD_INT 1
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 0
58556: PUSH
58557: LD_INT 1
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 1
58566: NEG
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 1
58577: NEG
58578: PUSH
58579: LD_INT 1
58581: NEG
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 2
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 2
58599: NEG
58600: PUSH
58601: LD_INT 1
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58620: LD_ADDR_VAR 0 39
58624: PUSH
58625: LD_INT 0
58627: PUSH
58628: LD_INT 0
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: LD_INT 1
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 1
58658: PUSH
58659: LD_INT 1
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 0
58668: PUSH
58669: LD_INT 1
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 1
58678: NEG
58679: PUSH
58680: LD_INT 0
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 1
58689: NEG
58690: PUSH
58691: LD_INT 1
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 1
58701: NEG
58702: PUSH
58703: LD_INT 2
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 1
58713: PUSH
58714: LD_INT 2
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58732: LD_ADDR_VAR 0 40
58736: PUSH
58737: LD_INT 0
58739: PUSH
58740: LD_INT 0
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 0
58749: PUSH
58750: LD_INT 1
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 1
58760: PUSH
58761: LD_INT 0
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 1
58770: PUSH
58771: LD_INT 1
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 0
58780: PUSH
58781: LD_INT 1
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 1
58790: NEG
58791: PUSH
58792: LD_INT 0
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 1
58801: NEG
58802: PUSH
58803: LD_INT 1
58805: NEG
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 1
58813: PUSH
58814: LD_INT 1
58816: NEG
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 1
58824: NEG
58825: PUSH
58826: LD_INT 1
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58844: LD_ADDR_VAR 0 41
58848: PUSH
58849: LD_INT 0
58851: PUSH
58852: LD_INT 0
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: LD_INT 1
58864: NEG
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 1
58872: PUSH
58873: LD_INT 0
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 1
58882: PUSH
58883: LD_INT 1
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 0
58892: PUSH
58893: LD_INT 1
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 1
58902: NEG
58903: PUSH
58904: LD_INT 0
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 1
58913: NEG
58914: PUSH
58915: LD_INT 1
58917: NEG
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 1
58925: NEG
58926: PUSH
58927: LD_INT 2
58929: NEG
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 1
58937: PUSH
58938: LD_INT 1
58940: NEG
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 2
58948: PUSH
58949: LD_INT 0
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 2
58958: PUSH
58959: LD_INT 1
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 2
58968: PUSH
58969: LD_INT 2
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 1
58978: PUSH
58979: LD_INT 2
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 1
58988: NEG
58989: PUSH
58990: LD_INT 1
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 2
58999: NEG
59000: PUSH
59001: LD_INT 0
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 2
59010: NEG
59011: PUSH
59012: LD_INT 1
59014: NEG
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 2
59022: NEG
59023: PUSH
59024: LD_INT 2
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 2
59034: NEG
59035: PUSH
59036: LD_INT 3
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 2
59046: PUSH
59047: LD_INT 1
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 3
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 3
59067: PUSH
59068: LD_INT 1
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 3
59077: PUSH
59078: LD_INT 2
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 3
59087: PUSH
59088: LD_INT 3
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 2
59097: PUSH
59098: LD_INT 3
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 2
59107: NEG
59108: PUSH
59109: LD_INT 1
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 3
59118: NEG
59119: PUSH
59120: LD_INT 0
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 3
59129: NEG
59130: PUSH
59131: LD_INT 1
59133: NEG
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 3
59141: NEG
59142: PUSH
59143: LD_INT 2
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 3
59153: NEG
59154: PUSH
59155: LD_INT 3
59157: NEG
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59194: LD_ADDR_VAR 0 42
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: LD_INT 0
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 0
59211: PUSH
59212: LD_INT 1
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: LD_INT 0
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 1
59232: PUSH
59233: LD_INT 1
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 0
59242: PUSH
59243: LD_INT 1
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 1
59252: NEG
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 1
59263: NEG
59264: PUSH
59265: LD_INT 1
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 1
59275: NEG
59276: PUSH
59277: LD_INT 2
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 0
59287: PUSH
59288: LD_INT 2
59290: NEG
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 1
59298: PUSH
59299: LD_INT 1
59301: NEG
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 2
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 2
59319: PUSH
59320: LD_INT 2
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 1
59329: PUSH
59330: LD_INT 2
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 0
59339: PUSH
59340: LD_INT 2
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 1
59349: NEG
59350: PUSH
59351: LD_INT 1
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 2
59360: NEG
59361: PUSH
59362: LD_INT 1
59364: NEG
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 2
59372: NEG
59373: PUSH
59374: LD_INT 2
59376: NEG
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 2
59384: NEG
59385: PUSH
59386: LD_INT 3
59388: NEG
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 1
59396: NEG
59397: PUSH
59398: LD_INT 3
59400: NEG
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 0
59408: PUSH
59409: LD_INT 3
59411: NEG
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 1
59419: PUSH
59420: LD_INT 2
59422: NEG
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 3
59430: PUSH
59431: LD_INT 2
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 3
59440: PUSH
59441: LD_INT 3
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 2
59450: PUSH
59451: LD_INT 3
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 1
59460: PUSH
59461: LD_INT 3
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: LD_INT 3
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 1
59480: NEG
59481: PUSH
59482: LD_INT 2
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 3
59491: NEG
59492: PUSH
59493: LD_INT 2
59495: NEG
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 3
59503: NEG
59504: PUSH
59505: LD_INT 3
59507: NEG
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59544: LD_ADDR_VAR 0 43
59548: PUSH
59549: LD_INT 0
59551: PUSH
59552: LD_INT 0
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 0
59561: PUSH
59562: LD_INT 1
59564: NEG
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 1
59572: PUSH
59573: LD_INT 0
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 1
59582: PUSH
59583: LD_INT 1
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: LD_INT 1
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 1
59602: NEG
59603: PUSH
59604: LD_INT 0
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 1
59613: NEG
59614: PUSH
59615: LD_INT 1
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 1
59625: NEG
59626: PUSH
59627: LD_INT 2
59629: NEG
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 0
59637: PUSH
59638: LD_INT 2
59640: NEG
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 1
59648: PUSH
59649: LD_INT 1
59651: NEG
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 2
59659: PUSH
59660: LD_INT 0
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 2
59669: PUSH
59670: LD_INT 1
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 1
59679: PUSH
59680: LD_INT 2
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 0
59689: PUSH
59690: LD_INT 2
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 1
59699: NEG
59700: PUSH
59701: LD_INT 1
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 2
59710: NEG
59711: PUSH
59712: LD_INT 0
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 2
59721: NEG
59722: PUSH
59723: LD_INT 1
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 1
59733: NEG
59734: PUSH
59735: LD_INT 3
59737: NEG
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 0
59745: PUSH
59746: LD_INT 3
59748: NEG
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 1
59756: PUSH
59757: LD_INT 2
59759: NEG
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 2
59767: PUSH
59768: LD_INT 1
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 3
59778: PUSH
59779: LD_INT 0
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 3
59788: PUSH
59789: LD_INT 1
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: LD_INT 3
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 0
59808: PUSH
59809: LD_INT 3
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 1
59818: NEG
59819: PUSH
59820: LD_INT 2
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 2
59829: NEG
59830: PUSH
59831: LD_INT 1
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 3
59840: NEG
59841: PUSH
59842: LD_INT 0
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 3
59851: NEG
59852: PUSH
59853: LD_INT 1
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59892: LD_ADDR_VAR 0 44
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: LD_INT 0
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 0
59909: PUSH
59910: LD_INT 1
59912: NEG
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 1
59920: PUSH
59921: LD_INT 0
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 1
59930: PUSH
59931: LD_INT 1
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 0
59940: PUSH
59941: LD_INT 1
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 1
59950: NEG
59951: PUSH
59952: LD_INT 0
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 1
59961: NEG
59962: PUSH
59963: LD_INT 1
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 1
59973: NEG
59974: PUSH
59975: LD_INT 2
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 1
59985: PUSH
59986: LD_INT 1
59988: NEG
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 2
59996: PUSH
59997: LD_INT 0
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 2
60006: PUSH
60007: LD_INT 1
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 2
60016: PUSH
60017: LD_INT 2
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 1
60026: PUSH
60027: LD_INT 2
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 1
60036: NEG
60037: PUSH
60038: LD_INT 1
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 2
60047: NEG
60048: PUSH
60049: LD_INT 0
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 2
60058: NEG
60059: PUSH
60060: LD_INT 1
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 2
60070: NEG
60071: PUSH
60072: LD_INT 2
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 2
60082: NEG
60083: PUSH
60084: LD_INT 3
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 2
60094: PUSH
60095: LD_INT 1
60097: NEG
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 3
60105: PUSH
60106: LD_INT 0
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 3
60115: PUSH
60116: LD_INT 1
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 3
60125: PUSH
60126: LD_INT 2
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 3
60135: PUSH
60136: LD_INT 3
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 2
60145: PUSH
60146: LD_INT 3
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 2
60155: NEG
60156: PUSH
60157: LD_INT 1
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 3
60166: NEG
60167: PUSH
60168: LD_INT 0
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 3
60177: NEG
60178: PUSH
60179: LD_INT 1
60181: NEG
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 3
60189: NEG
60190: PUSH
60191: LD_INT 2
60193: NEG
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 3
60201: NEG
60202: PUSH
60203: LD_INT 3
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60242: LD_ADDR_VAR 0 45
60246: PUSH
60247: LD_INT 0
60249: PUSH
60250: LD_INT 0
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 0
60259: PUSH
60260: LD_INT 1
60262: NEG
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 1
60270: PUSH
60271: LD_INT 0
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 1
60280: PUSH
60281: LD_INT 1
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 0
60290: PUSH
60291: LD_INT 1
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 1
60300: NEG
60301: PUSH
60302: LD_INT 0
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 1
60311: NEG
60312: PUSH
60313: LD_INT 1
60315: NEG
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 1
60323: NEG
60324: PUSH
60325: LD_INT 2
60327: NEG
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 0
60335: PUSH
60336: LD_INT 2
60338: NEG
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 1
60346: PUSH
60347: LD_INT 1
60349: NEG
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 2
60357: PUSH
60358: LD_INT 1
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 2
60367: PUSH
60368: LD_INT 2
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 1
60377: PUSH
60378: LD_INT 2
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 0
60387: PUSH
60388: LD_INT 2
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: NEG
60398: PUSH
60399: LD_INT 1
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 2
60408: NEG
60409: PUSH
60410: LD_INT 1
60412: NEG
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 2
60420: NEG
60421: PUSH
60422: LD_INT 2
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 2
60432: NEG
60433: PUSH
60434: LD_INT 3
60436: NEG
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 1
60444: NEG
60445: PUSH
60446: LD_INT 3
60448: NEG
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 0
60456: PUSH
60457: LD_INT 3
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 1
60467: PUSH
60468: LD_INT 2
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 3
60478: PUSH
60479: LD_INT 2
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 3
60488: PUSH
60489: LD_INT 3
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 2
60498: PUSH
60499: LD_INT 3
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 1
60508: PUSH
60509: LD_INT 3
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 0
60518: PUSH
60519: LD_INT 3
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 1
60528: NEG
60529: PUSH
60530: LD_INT 2
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 3
60539: NEG
60540: PUSH
60541: LD_INT 2
60543: NEG
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 3
60551: NEG
60552: PUSH
60553: LD_INT 3
60555: NEG
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60592: LD_ADDR_VAR 0 46
60596: PUSH
60597: LD_INT 0
60599: PUSH
60600: LD_INT 0
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 0
60609: PUSH
60610: LD_INT 1
60612: NEG
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 1
60620: PUSH
60621: LD_INT 0
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 1
60630: PUSH
60631: LD_INT 1
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 0
60640: PUSH
60641: LD_INT 1
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 1
60650: NEG
60651: PUSH
60652: LD_INT 0
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 1
60661: NEG
60662: PUSH
60663: LD_INT 1
60665: NEG
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 1
60673: NEG
60674: PUSH
60675: LD_INT 2
60677: NEG
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 0
60685: PUSH
60686: LD_INT 2
60688: NEG
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 1
60696: PUSH
60697: LD_INT 1
60699: NEG
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 2
60707: PUSH
60708: LD_INT 0
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 2
60717: PUSH
60718: LD_INT 1
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 1
60727: PUSH
60728: LD_INT 2
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: LD_INT 2
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 1
60747: NEG
60748: PUSH
60749: LD_INT 1
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 2
60758: NEG
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 2
60769: NEG
60770: PUSH
60771: LD_INT 1
60773: NEG
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 1
60781: NEG
60782: PUSH
60783: LD_INT 3
60785: NEG
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 0
60793: PUSH
60794: LD_INT 3
60796: NEG
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 1
60804: PUSH
60805: LD_INT 2
60807: NEG
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 2
60815: PUSH
60816: LD_INT 1
60818: NEG
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 3
60826: PUSH
60827: LD_INT 0
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 3
60836: PUSH
60837: LD_INT 1
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 1
60846: PUSH
60847: LD_INT 3
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: LD_INT 3
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 1
60866: NEG
60867: PUSH
60868: LD_INT 2
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 2
60877: NEG
60878: PUSH
60879: LD_INT 1
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 3
60888: NEG
60889: PUSH
60890: LD_INT 0
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 3
60899: NEG
60900: PUSH
60901: LD_INT 1
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60940: LD_ADDR_VAR 0 47
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: LD_INT 0
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 0
60957: PUSH
60958: LD_INT 1
60960: NEG
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 1
60968: PUSH
60969: LD_INT 0
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 1
60978: PUSH
60979: LD_INT 1
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 0
60988: PUSH
60989: LD_INT 1
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 1
60998: NEG
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 1
61009: NEG
61010: PUSH
61011: LD_INT 1
61013: NEG
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 1
61021: NEG
61022: PUSH
61023: LD_INT 2
61025: NEG
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 0
61033: PUSH
61034: LD_INT 2
61036: NEG
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 1
61044: PUSH
61045: LD_INT 1
61047: NEG
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 2
61055: NEG
61056: PUSH
61057: LD_INT 1
61059: NEG
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 2
61067: NEG
61068: PUSH
61069: LD_INT 2
61071: NEG
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61091: LD_ADDR_VAR 0 48
61095: PUSH
61096: LD_INT 0
61098: PUSH
61099: LD_INT 0
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 0
61108: PUSH
61109: LD_INT 1
61111: NEG
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: LD_INT 0
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 1
61129: PUSH
61130: LD_INT 1
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 0
61139: PUSH
61140: LD_INT 1
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 1
61149: NEG
61150: PUSH
61151: LD_INT 0
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 1
61160: NEG
61161: PUSH
61162: LD_INT 1
61164: NEG
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 1
61172: NEG
61173: PUSH
61174: LD_INT 2
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 0
61184: PUSH
61185: LD_INT 2
61187: NEG
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 1
61195: PUSH
61196: LD_INT 1
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 2
61206: PUSH
61207: LD_INT 0
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 2
61216: PUSH
61217: LD_INT 1
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61238: LD_ADDR_VAR 0 49
61242: PUSH
61243: LD_INT 0
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 0
61255: PUSH
61256: LD_INT 1
61258: NEG
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 1
61266: PUSH
61267: LD_INT 0
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 1
61276: PUSH
61277: LD_INT 1
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 0
61286: PUSH
61287: LD_INT 1
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 1
61296: NEG
61297: PUSH
61298: LD_INT 0
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 1
61307: NEG
61308: PUSH
61309: LD_INT 1
61311: NEG
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 1
61319: PUSH
61320: LD_INT 1
61322: NEG
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 2
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 2
61340: PUSH
61341: LD_INT 1
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 2
61350: PUSH
61351: LD_INT 2
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 1
61360: PUSH
61361: LD_INT 2
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61382: LD_ADDR_VAR 0 50
61386: PUSH
61387: LD_INT 0
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 0
61399: PUSH
61400: LD_INT 1
61402: NEG
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 1
61410: PUSH
61411: LD_INT 0
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 1
61420: PUSH
61421: LD_INT 1
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 0
61430: PUSH
61431: LD_INT 1
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 1
61440: NEG
61441: PUSH
61442: LD_INT 0
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 1
61451: NEG
61452: PUSH
61453: LD_INT 1
61455: NEG
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 2
61463: PUSH
61464: LD_INT 1
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 2
61473: PUSH
61474: LD_INT 2
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 1
61483: PUSH
61484: LD_INT 2
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 0
61493: PUSH
61494: LD_INT 2
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 1
61503: NEG
61504: PUSH
61505: LD_INT 1
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61526: LD_ADDR_VAR 0 51
61530: PUSH
61531: LD_INT 0
61533: PUSH
61534: LD_INT 0
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 0
61543: PUSH
61544: LD_INT 1
61546: NEG
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 1
61554: PUSH
61555: LD_INT 0
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 1
61564: PUSH
61565: LD_INT 1
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 0
61574: PUSH
61575: LD_INT 1
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 1
61584: NEG
61585: PUSH
61586: LD_INT 0
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 1
61595: NEG
61596: PUSH
61597: LD_INT 1
61599: NEG
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 1
61607: PUSH
61608: LD_INT 2
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 0
61617: PUSH
61618: LD_INT 2
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 1
61627: NEG
61628: PUSH
61629: LD_INT 1
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 2
61638: NEG
61639: PUSH
61640: LD_INT 0
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 2
61649: NEG
61650: PUSH
61651: LD_INT 1
61653: NEG
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61673: LD_ADDR_VAR 0 52
61677: PUSH
61678: LD_INT 0
61680: PUSH
61681: LD_INT 0
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 0
61690: PUSH
61691: LD_INT 1
61693: NEG
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 1
61701: PUSH
61702: LD_INT 0
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 1
61711: PUSH
61712: LD_INT 1
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 0
61721: PUSH
61722: LD_INT 1
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 1
61731: NEG
61732: PUSH
61733: LD_INT 0
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 1
61742: NEG
61743: PUSH
61744: LD_INT 1
61746: NEG
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 1
61754: NEG
61755: PUSH
61756: LD_INT 2
61758: NEG
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 1
61766: NEG
61767: PUSH
61768: LD_INT 1
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 2
61777: NEG
61778: PUSH
61779: LD_INT 0
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 2
61788: NEG
61789: PUSH
61790: LD_INT 1
61792: NEG
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 2
61800: NEG
61801: PUSH
61802: LD_INT 2
61804: NEG
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61824: LD_ADDR_VAR 0 53
61828: PUSH
61829: LD_INT 0
61831: PUSH
61832: LD_INT 0
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 0
61841: PUSH
61842: LD_INT 1
61844: NEG
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 1
61852: PUSH
61853: LD_INT 0
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 1
61862: PUSH
61863: LD_INT 1
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 0
61872: PUSH
61873: LD_INT 1
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 1
61882: NEG
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 1
61893: NEG
61894: PUSH
61895: LD_INT 1
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 1
61905: NEG
61906: PUSH
61907: LD_INT 2
61909: NEG
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 0
61917: PUSH
61918: LD_INT 2
61920: NEG
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 1
61928: PUSH
61929: LD_INT 1
61931: NEG
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 2
61939: PUSH
61940: LD_INT 0
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 2
61949: PUSH
61950: LD_INT 1
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 2
61959: PUSH
61960: LD_INT 2
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 1
61969: PUSH
61970: LD_INT 2
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 0
61979: PUSH
61980: LD_INT 2
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 1
61989: NEG
61990: PUSH
61991: LD_INT 1
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 2
62000: NEG
62001: PUSH
62002: LD_INT 0
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 2
62011: NEG
62012: PUSH
62013: LD_INT 1
62015: NEG
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 2
62023: NEG
62024: PUSH
62025: LD_INT 2
62027: NEG
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62054: LD_ADDR_VAR 0 54
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: LD_INT 0
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 0
62071: PUSH
62072: LD_INT 1
62074: NEG
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 1
62082: PUSH
62083: LD_INT 0
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 1
62092: PUSH
62093: LD_INT 1
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 0
62102: PUSH
62103: LD_INT 1
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 1
62112: NEG
62113: PUSH
62114: LD_INT 0
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 1
62123: NEG
62124: PUSH
62125: LD_INT 1
62127: NEG
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 1
62135: NEG
62136: PUSH
62137: LD_INT 2
62139: NEG
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 0
62147: PUSH
62148: LD_INT 2
62150: NEG
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 1
62158: PUSH
62159: LD_INT 1
62161: NEG
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 2
62169: PUSH
62170: LD_INT 0
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 2
62179: PUSH
62180: LD_INT 1
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 2
62189: PUSH
62190: LD_INT 2
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 1
62199: PUSH
62200: LD_INT 2
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 0
62209: PUSH
62210: LD_INT 2
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 1
62219: NEG
62220: PUSH
62221: LD_INT 1
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 2
62230: NEG
62231: PUSH
62232: LD_INT 0
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 2
62241: NEG
62242: PUSH
62243: LD_INT 1
62245: NEG
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 2
62253: NEG
62254: PUSH
62255: LD_INT 2
62257: NEG
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62284: LD_ADDR_VAR 0 55
62288: PUSH
62289: LD_INT 0
62291: PUSH
62292: LD_INT 0
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 0
62301: PUSH
62302: LD_INT 1
62304: NEG
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 1
62312: PUSH
62313: LD_INT 0
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 1
62322: PUSH
62323: LD_INT 1
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: LD_INT 1
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 1
62342: NEG
62343: PUSH
62344: LD_INT 0
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 1
62353: NEG
62354: PUSH
62355: LD_INT 1
62357: NEG
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 1
62365: NEG
62366: PUSH
62367: LD_INT 2
62369: NEG
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 0
62377: PUSH
62378: LD_INT 2
62380: NEG
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 1
62388: PUSH
62389: LD_INT 1
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 2
62399: PUSH
62400: LD_INT 0
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 2
62409: PUSH
62410: LD_INT 1
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 2
62419: PUSH
62420: LD_INT 2
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 1
62429: PUSH
62430: LD_INT 2
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 0
62439: PUSH
62440: LD_INT 2
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 1
62449: NEG
62450: PUSH
62451: LD_INT 1
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 2
62460: NEG
62461: PUSH
62462: LD_INT 0
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 2
62471: NEG
62472: PUSH
62473: LD_INT 1
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 2
62483: NEG
62484: PUSH
62485: LD_INT 2
62487: NEG
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62514: LD_ADDR_VAR 0 56
62518: PUSH
62519: LD_INT 0
62521: PUSH
62522: LD_INT 0
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 0
62531: PUSH
62532: LD_INT 1
62534: NEG
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 1
62542: PUSH
62543: LD_INT 0
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 1
62552: PUSH
62553: LD_INT 1
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 0
62562: PUSH
62563: LD_INT 1
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 1
62572: NEG
62573: PUSH
62574: LD_INT 0
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 1
62583: NEG
62584: PUSH
62585: LD_INT 1
62587: NEG
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 1
62595: NEG
62596: PUSH
62597: LD_INT 2
62599: NEG
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 0
62607: PUSH
62608: LD_INT 2
62610: NEG
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 1
62618: PUSH
62619: LD_INT 1
62621: NEG
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 2
62629: PUSH
62630: LD_INT 0
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 2
62639: PUSH
62640: LD_INT 1
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 2
62649: PUSH
62650: LD_INT 2
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 1
62659: PUSH
62660: LD_INT 2
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 0
62669: PUSH
62670: LD_INT 2
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 1
62679: NEG
62680: PUSH
62681: LD_INT 1
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 2
62690: NEG
62691: PUSH
62692: LD_INT 0
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 2
62701: NEG
62702: PUSH
62703: LD_INT 1
62705: NEG
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 2
62713: NEG
62714: PUSH
62715: LD_INT 2
62717: NEG
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62744: LD_ADDR_VAR 0 57
62748: PUSH
62749: LD_INT 0
62751: PUSH
62752: LD_INT 0
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 0
62761: PUSH
62762: LD_INT 1
62764: NEG
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 1
62772: PUSH
62773: LD_INT 0
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 1
62782: PUSH
62783: LD_INT 1
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 0
62792: PUSH
62793: LD_INT 1
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 1
62802: NEG
62803: PUSH
62804: LD_INT 0
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 1
62813: NEG
62814: PUSH
62815: LD_INT 1
62817: NEG
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 1
62825: NEG
62826: PUSH
62827: LD_INT 2
62829: NEG
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 0
62837: PUSH
62838: LD_INT 2
62840: NEG
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 1
62848: PUSH
62849: LD_INT 1
62851: NEG
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 2
62859: PUSH
62860: LD_INT 0
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 2
62869: PUSH
62870: LD_INT 1
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 2
62879: PUSH
62880: LD_INT 2
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 1
62889: PUSH
62890: LD_INT 2
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 0
62899: PUSH
62900: LD_INT 2
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 1
62909: NEG
62910: PUSH
62911: LD_INT 1
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 2
62920: NEG
62921: PUSH
62922: LD_INT 0
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 2
62931: NEG
62932: PUSH
62933: LD_INT 1
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 2
62943: NEG
62944: PUSH
62945: LD_INT 2
62947: NEG
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62974: LD_ADDR_VAR 0 58
62978: PUSH
62979: LD_INT 0
62981: PUSH
62982: LD_INT 0
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 0
62991: PUSH
62992: LD_INT 1
62994: NEG
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 1
63002: PUSH
63003: LD_INT 0
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 1
63012: PUSH
63013: LD_INT 1
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 0
63022: PUSH
63023: LD_INT 1
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 1
63032: NEG
63033: PUSH
63034: LD_INT 0
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 1
63043: NEG
63044: PUSH
63045: LD_INT 1
63047: NEG
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 1
63055: NEG
63056: PUSH
63057: LD_INT 2
63059: NEG
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 0
63067: PUSH
63068: LD_INT 2
63070: NEG
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 1
63078: PUSH
63079: LD_INT 1
63081: NEG
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 2
63089: PUSH
63090: LD_INT 0
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 2
63099: PUSH
63100: LD_INT 1
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 2
63109: PUSH
63110: LD_INT 2
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 1
63119: PUSH
63120: LD_INT 2
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 0
63129: PUSH
63130: LD_INT 2
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 1
63139: NEG
63140: PUSH
63141: LD_INT 1
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 2
63150: NEG
63151: PUSH
63152: LD_INT 0
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 2
63161: NEG
63162: PUSH
63163: LD_INT 1
63165: NEG
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 2
63173: NEG
63174: PUSH
63175: LD_INT 2
63177: NEG
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63204: LD_ADDR_VAR 0 59
63208: PUSH
63209: LD_INT 0
63211: PUSH
63212: LD_INT 0
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 0
63221: PUSH
63222: LD_INT 1
63224: NEG
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 1
63232: PUSH
63233: LD_INT 0
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 1
63242: PUSH
63243: LD_INT 1
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 0
63252: PUSH
63253: LD_INT 1
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 1
63262: NEG
63263: PUSH
63264: LD_INT 0
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 1
63273: NEG
63274: PUSH
63275: LD_INT 1
63277: NEG
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63292: LD_ADDR_VAR 0 60
63296: PUSH
63297: LD_INT 0
63299: PUSH
63300: LD_INT 0
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 0
63309: PUSH
63310: LD_INT 1
63312: NEG
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 1
63320: PUSH
63321: LD_INT 0
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 1
63330: PUSH
63331: LD_INT 1
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 0
63340: PUSH
63341: LD_INT 1
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 1
63350: NEG
63351: PUSH
63352: LD_INT 0
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 1
63361: NEG
63362: PUSH
63363: LD_INT 1
63365: NEG
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63380: LD_ADDR_VAR 0 61
63384: PUSH
63385: LD_INT 0
63387: PUSH
63388: LD_INT 0
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 0
63397: PUSH
63398: LD_INT 1
63400: NEG
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 1
63408: PUSH
63409: LD_INT 0
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 1
63418: PUSH
63419: LD_INT 1
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 0
63428: PUSH
63429: LD_INT 1
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 1
63438: NEG
63439: PUSH
63440: LD_INT 0
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 1
63449: NEG
63450: PUSH
63451: LD_INT 1
63453: NEG
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63468: LD_ADDR_VAR 0 62
63472: PUSH
63473: LD_INT 0
63475: PUSH
63476: LD_INT 0
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 0
63485: PUSH
63486: LD_INT 1
63488: NEG
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 1
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 1
63506: PUSH
63507: LD_INT 1
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 0
63516: PUSH
63517: LD_INT 1
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 1
63526: NEG
63527: PUSH
63528: LD_INT 0
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 1
63537: NEG
63538: PUSH
63539: LD_INT 1
63541: NEG
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63556: LD_ADDR_VAR 0 63
63560: PUSH
63561: LD_INT 0
63563: PUSH
63564: LD_INT 0
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 0
63573: PUSH
63574: LD_INT 1
63576: NEG
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 1
63584: PUSH
63585: LD_INT 0
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 1
63594: PUSH
63595: LD_INT 1
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 0
63604: PUSH
63605: LD_INT 1
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 1
63614: NEG
63615: PUSH
63616: LD_INT 0
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 1
63625: NEG
63626: PUSH
63627: LD_INT 1
63629: NEG
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63644: LD_ADDR_VAR 0 64
63648: PUSH
63649: LD_INT 0
63651: PUSH
63652: LD_INT 0
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 0
63661: PUSH
63662: LD_INT 1
63664: NEG
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 1
63672: PUSH
63673: LD_INT 0
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 1
63682: PUSH
63683: LD_INT 1
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 0
63692: PUSH
63693: LD_INT 1
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 1
63702: NEG
63703: PUSH
63704: LD_INT 0
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 1
63713: NEG
63714: PUSH
63715: LD_INT 1
63717: NEG
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: ST_TO_ADDR
// end ; 1 :
63732: GO 69629
63734: LD_INT 1
63736: DOUBLE
63737: EQUAL
63738: IFTRUE 63742
63740: GO 66365
63742: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63743: LD_ADDR_VAR 0 11
63747: PUSH
63748: LD_INT 1
63750: NEG
63751: PUSH
63752: LD_INT 3
63754: NEG
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 0
63762: PUSH
63763: LD_INT 3
63765: NEG
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 1
63773: PUSH
63774: LD_INT 2
63776: NEG
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: LIST
63786: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63787: LD_ADDR_VAR 0 12
63791: PUSH
63792: LD_INT 2
63794: PUSH
63795: LD_INT 1
63797: NEG
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 3
63805: PUSH
63806: LD_INT 0
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 3
63815: PUSH
63816: LD_INT 1
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: LIST
63827: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63828: LD_ADDR_VAR 0 13
63832: PUSH
63833: LD_INT 3
63835: PUSH
63836: LD_INT 2
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 3
63845: PUSH
63846: LD_INT 3
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: LD_INT 2
63855: PUSH
63856: LD_INT 3
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: LIST
63867: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63868: LD_ADDR_VAR 0 14
63872: PUSH
63873: LD_INT 1
63875: PUSH
63876: LD_INT 3
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 0
63885: PUSH
63886: LD_INT 3
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 1
63895: NEG
63896: PUSH
63897: LD_INT 2
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: LIST
63908: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63909: LD_ADDR_VAR 0 15
63913: PUSH
63914: LD_INT 2
63916: NEG
63917: PUSH
63918: LD_INT 1
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 3
63927: NEG
63928: PUSH
63929: LD_INT 0
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 3
63938: NEG
63939: PUSH
63940: LD_INT 1
63942: NEG
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: LIST
63952: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63953: LD_ADDR_VAR 0 16
63957: PUSH
63958: LD_INT 2
63960: NEG
63961: PUSH
63962: LD_INT 3
63964: NEG
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 3
63972: NEG
63973: PUSH
63974: LD_INT 2
63976: NEG
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 3
63984: NEG
63985: PUSH
63986: LD_INT 3
63988: NEG
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: LIST
63998: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63999: LD_ADDR_VAR 0 17
64003: PUSH
64004: LD_INT 1
64006: NEG
64007: PUSH
64008: LD_INT 3
64010: NEG
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 0
64018: PUSH
64019: LD_INT 3
64021: NEG
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 1
64029: PUSH
64030: LD_INT 2
64032: NEG
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: LIST
64042: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64043: LD_ADDR_VAR 0 18
64047: PUSH
64048: LD_INT 2
64050: PUSH
64051: LD_INT 1
64053: NEG
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 3
64061: PUSH
64062: LD_INT 0
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 3
64071: PUSH
64072: LD_INT 1
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: LIST
64083: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64084: LD_ADDR_VAR 0 19
64088: PUSH
64089: LD_INT 3
64091: PUSH
64092: LD_INT 2
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 3
64101: PUSH
64102: LD_INT 3
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 2
64111: PUSH
64112: LD_INT 3
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: LIST
64123: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64124: LD_ADDR_VAR 0 20
64128: PUSH
64129: LD_INT 1
64131: PUSH
64132: LD_INT 3
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 0
64141: PUSH
64142: LD_INT 3
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 1
64151: NEG
64152: PUSH
64153: LD_INT 2
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: LIST
64164: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64165: LD_ADDR_VAR 0 21
64169: PUSH
64170: LD_INT 2
64172: NEG
64173: PUSH
64174: LD_INT 1
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: LD_INT 3
64183: NEG
64184: PUSH
64185: LD_INT 0
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 3
64194: NEG
64195: PUSH
64196: LD_INT 1
64198: NEG
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: LIST
64208: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64209: LD_ADDR_VAR 0 22
64213: PUSH
64214: LD_INT 2
64216: NEG
64217: PUSH
64218: LD_INT 3
64220: NEG
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: LD_INT 3
64228: NEG
64229: PUSH
64230: LD_INT 2
64232: NEG
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 3
64240: NEG
64241: PUSH
64242: LD_INT 3
64244: NEG
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: LIST
64254: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64255: LD_ADDR_VAR 0 23
64259: PUSH
64260: LD_INT 0
64262: PUSH
64263: LD_INT 3
64265: NEG
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 1
64273: NEG
64274: PUSH
64275: LD_INT 4
64277: NEG
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 1
64285: PUSH
64286: LD_INT 3
64288: NEG
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: LIST
64298: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64299: LD_ADDR_VAR 0 24
64303: PUSH
64304: LD_INT 3
64306: PUSH
64307: LD_INT 0
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 3
64316: PUSH
64317: LD_INT 1
64319: NEG
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 4
64327: PUSH
64328: LD_INT 1
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: LIST
64339: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64340: LD_ADDR_VAR 0 25
64344: PUSH
64345: LD_INT 3
64347: PUSH
64348: LD_INT 3
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 4
64357: PUSH
64358: LD_INT 3
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 3
64367: PUSH
64368: LD_INT 4
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: LIST
64379: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64380: LD_ADDR_VAR 0 26
64384: PUSH
64385: LD_INT 0
64387: PUSH
64388: LD_INT 3
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: LD_INT 1
64397: PUSH
64398: LD_INT 4
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 1
64407: NEG
64408: PUSH
64409: LD_INT 3
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: LIST
64420: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64421: LD_ADDR_VAR 0 27
64425: PUSH
64426: LD_INT 3
64428: NEG
64429: PUSH
64430: LD_INT 0
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 3
64439: NEG
64440: PUSH
64441: LD_INT 1
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 4
64450: NEG
64451: PUSH
64452: LD_INT 1
64454: NEG
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: LIST
64464: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64465: LD_ADDR_VAR 0 28
64469: PUSH
64470: LD_INT 3
64472: NEG
64473: PUSH
64474: LD_INT 3
64476: NEG
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 3
64484: NEG
64485: PUSH
64486: LD_INT 4
64488: NEG
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 4
64496: NEG
64497: PUSH
64498: LD_INT 3
64500: NEG
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: LIST
64510: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64511: LD_ADDR_VAR 0 29
64515: PUSH
64516: LD_INT 1
64518: NEG
64519: PUSH
64520: LD_INT 3
64522: NEG
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: LD_INT 0
64530: PUSH
64531: LD_INT 3
64533: NEG
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 1
64541: PUSH
64542: LD_INT 2
64544: NEG
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 1
64552: NEG
64553: PUSH
64554: LD_INT 4
64556: NEG
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 0
64564: PUSH
64565: LD_INT 4
64567: NEG
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 1
64575: PUSH
64576: LD_INT 3
64578: NEG
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 1
64586: NEG
64587: PUSH
64588: LD_INT 5
64590: NEG
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 0
64598: PUSH
64599: LD_INT 5
64601: NEG
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 1
64609: PUSH
64610: LD_INT 4
64612: NEG
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 1
64620: NEG
64621: PUSH
64622: LD_INT 6
64624: NEG
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 0
64632: PUSH
64633: LD_INT 6
64635: NEG
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: LD_INT 1
64643: PUSH
64644: LD_INT 5
64646: NEG
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64666: LD_ADDR_VAR 0 30
64670: PUSH
64671: LD_INT 2
64673: PUSH
64674: LD_INT 1
64676: NEG
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 3
64684: PUSH
64685: LD_INT 0
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 3
64694: PUSH
64695: LD_INT 1
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: LD_INT 3
64704: PUSH
64705: LD_INT 1
64707: NEG
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 4
64715: PUSH
64716: LD_INT 0
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 4
64725: PUSH
64726: LD_INT 1
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 4
64735: PUSH
64736: LD_INT 1
64738: NEG
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 5
64746: PUSH
64747: LD_INT 0
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 5
64756: PUSH
64757: LD_INT 1
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 5
64766: PUSH
64767: LD_INT 1
64769: NEG
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 6
64777: PUSH
64778: LD_INT 0
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 6
64787: PUSH
64788: LD_INT 1
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64809: LD_ADDR_VAR 0 31
64813: PUSH
64814: LD_INT 3
64816: PUSH
64817: LD_INT 2
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 3
64826: PUSH
64827: LD_INT 3
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: PUSH
64834: LD_INT 2
64836: PUSH
64837: LD_INT 3
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 4
64846: PUSH
64847: LD_INT 3
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 4
64856: PUSH
64857: LD_INT 4
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 3
64866: PUSH
64867: LD_INT 4
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 5
64876: PUSH
64877: LD_INT 4
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 5
64886: PUSH
64887: LD_INT 5
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 4
64896: PUSH
64897: LD_INT 5
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 6
64906: PUSH
64907: LD_INT 5
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 6
64916: PUSH
64917: LD_INT 6
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 5
64926: PUSH
64927: LD_INT 6
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64948: LD_ADDR_VAR 0 32
64952: PUSH
64953: LD_INT 1
64955: PUSH
64956: LD_INT 3
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 0
64965: PUSH
64966: LD_INT 3
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 1
64975: NEG
64976: PUSH
64977: LD_INT 2
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 1
64986: PUSH
64987: LD_INT 4
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 0
64996: PUSH
64997: LD_INT 4
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 1
65006: NEG
65007: PUSH
65008: LD_INT 3
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 1
65017: PUSH
65018: LD_INT 5
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 0
65027: PUSH
65028: LD_INT 5
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 1
65037: NEG
65038: PUSH
65039: LD_INT 4
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: LD_INT 1
65048: PUSH
65049: LD_INT 6
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 0
65058: PUSH
65059: LD_INT 6
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 1
65068: NEG
65069: PUSH
65070: LD_INT 5
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65091: LD_ADDR_VAR 0 33
65095: PUSH
65096: LD_INT 2
65098: NEG
65099: PUSH
65100: LD_INT 1
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 3
65109: NEG
65110: PUSH
65111: LD_INT 0
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 3
65120: NEG
65121: PUSH
65122: LD_INT 1
65124: NEG
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 3
65132: NEG
65133: PUSH
65134: LD_INT 1
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 4
65143: NEG
65144: PUSH
65145: LD_INT 0
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 4
65154: NEG
65155: PUSH
65156: LD_INT 1
65158: NEG
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: LD_INT 4
65166: NEG
65167: PUSH
65168: LD_INT 1
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 5
65177: NEG
65178: PUSH
65179: LD_INT 0
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 5
65188: NEG
65189: PUSH
65190: LD_INT 1
65192: NEG
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 5
65200: NEG
65201: PUSH
65202: LD_INT 1
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 6
65211: NEG
65212: PUSH
65213: LD_INT 0
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 6
65222: NEG
65223: PUSH
65224: LD_INT 1
65226: NEG
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65246: LD_ADDR_VAR 0 34
65250: PUSH
65251: LD_INT 2
65253: NEG
65254: PUSH
65255: LD_INT 3
65257: NEG
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 3
65265: NEG
65266: PUSH
65267: LD_INT 2
65269: NEG
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 3
65277: NEG
65278: PUSH
65279: LD_INT 3
65281: NEG
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: LD_INT 3
65289: NEG
65290: PUSH
65291: LD_INT 4
65293: NEG
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 4
65301: NEG
65302: PUSH
65303: LD_INT 3
65305: NEG
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 4
65313: NEG
65314: PUSH
65315: LD_INT 4
65317: NEG
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 4
65325: NEG
65326: PUSH
65327: LD_INT 5
65329: NEG
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 5
65337: NEG
65338: PUSH
65339: LD_INT 4
65341: NEG
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 5
65349: NEG
65350: PUSH
65351: LD_INT 5
65353: NEG
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 5
65361: NEG
65362: PUSH
65363: LD_INT 6
65365: NEG
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 6
65373: NEG
65374: PUSH
65375: LD_INT 5
65377: NEG
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_INT 6
65385: NEG
65386: PUSH
65387: LD_INT 6
65389: NEG
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: LIST
65403: LIST
65404: LIST
65405: LIST
65406: LIST
65407: LIST
65408: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65409: LD_ADDR_VAR 0 41
65413: PUSH
65414: LD_INT 0
65416: PUSH
65417: LD_INT 2
65419: NEG
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: LD_INT 1
65427: NEG
65428: PUSH
65429: LD_INT 3
65431: NEG
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 1
65439: PUSH
65440: LD_INT 2
65442: NEG
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: LIST
65452: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65453: LD_ADDR_VAR 0 42
65457: PUSH
65458: LD_INT 2
65460: PUSH
65461: LD_INT 0
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 2
65470: PUSH
65471: LD_INT 1
65473: NEG
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 3
65481: PUSH
65482: LD_INT 1
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: LIST
65493: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65494: LD_ADDR_VAR 0 43
65498: PUSH
65499: LD_INT 2
65501: PUSH
65502: LD_INT 2
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 3
65511: PUSH
65512: LD_INT 2
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 2
65521: PUSH
65522: LD_INT 3
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: LIST
65533: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65534: LD_ADDR_VAR 0 44
65538: PUSH
65539: LD_INT 0
65541: PUSH
65542: LD_INT 2
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 1
65551: PUSH
65552: LD_INT 3
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 1
65561: NEG
65562: PUSH
65563: LD_INT 2
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: LIST
65574: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65575: LD_ADDR_VAR 0 45
65579: PUSH
65580: LD_INT 2
65582: NEG
65583: PUSH
65584: LD_INT 0
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: PUSH
65591: LD_INT 2
65593: NEG
65594: PUSH
65595: LD_INT 1
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 3
65604: NEG
65605: PUSH
65606: LD_INT 1
65608: NEG
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: LIST
65618: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65619: LD_ADDR_VAR 0 46
65623: PUSH
65624: LD_INT 2
65626: NEG
65627: PUSH
65628: LD_INT 2
65630: NEG
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 2
65638: NEG
65639: PUSH
65640: LD_INT 3
65642: NEG
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 3
65650: NEG
65651: PUSH
65652: LD_INT 2
65654: NEG
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: LIST
65664: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65665: LD_ADDR_VAR 0 47
65669: PUSH
65670: LD_INT 2
65672: NEG
65673: PUSH
65674: LD_INT 3
65676: NEG
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 1
65684: NEG
65685: PUSH
65686: LD_INT 3
65688: NEG
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65698: LD_ADDR_VAR 0 48
65702: PUSH
65703: LD_INT 1
65705: PUSH
65706: LD_INT 2
65708: NEG
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 2
65716: PUSH
65717: LD_INT 1
65719: NEG
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65729: LD_ADDR_VAR 0 49
65733: PUSH
65734: LD_INT 3
65736: PUSH
65737: LD_INT 1
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 3
65746: PUSH
65747: LD_INT 2
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65758: LD_ADDR_VAR 0 50
65762: PUSH
65763: LD_INT 2
65765: PUSH
65766: LD_INT 3
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 1
65775: PUSH
65776: LD_INT 3
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65787: LD_ADDR_VAR 0 51
65791: PUSH
65792: LD_INT 1
65794: NEG
65795: PUSH
65796: LD_INT 2
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 2
65805: NEG
65806: PUSH
65807: LD_INT 1
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65818: LD_ADDR_VAR 0 52
65822: PUSH
65823: LD_INT 3
65825: NEG
65826: PUSH
65827: LD_INT 1
65829: NEG
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 3
65837: NEG
65838: PUSH
65839: LD_INT 2
65841: NEG
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65851: LD_ADDR_VAR 0 53
65855: PUSH
65856: LD_INT 1
65858: NEG
65859: PUSH
65860: LD_INT 3
65862: NEG
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 0
65870: PUSH
65871: LD_INT 3
65873: NEG
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: LD_INT 1
65881: PUSH
65882: LD_INT 2
65884: NEG
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: LIST
65894: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65895: LD_ADDR_VAR 0 54
65899: PUSH
65900: LD_INT 2
65902: PUSH
65903: LD_INT 1
65905: NEG
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: LD_INT 3
65913: PUSH
65914: LD_INT 0
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 3
65923: PUSH
65924: LD_INT 1
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: LIST
65935: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65936: LD_ADDR_VAR 0 55
65940: PUSH
65941: LD_INT 3
65943: PUSH
65944: LD_INT 2
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: LD_INT 3
65953: PUSH
65954: LD_INT 3
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 2
65963: PUSH
65964: LD_INT 3
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: LIST
65975: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65976: LD_ADDR_VAR 0 56
65980: PUSH
65981: LD_INT 1
65983: PUSH
65984: LD_INT 3
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: LD_INT 0
65993: PUSH
65994: LD_INT 3
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 1
66003: NEG
66004: PUSH
66005: LD_INT 2
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: LIST
66016: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66017: LD_ADDR_VAR 0 57
66021: PUSH
66022: LD_INT 2
66024: NEG
66025: PUSH
66026: LD_INT 1
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_INT 3
66035: NEG
66036: PUSH
66037: LD_INT 0
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 3
66046: NEG
66047: PUSH
66048: LD_INT 1
66050: NEG
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: LIST
66060: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66061: LD_ADDR_VAR 0 58
66065: PUSH
66066: LD_INT 2
66068: NEG
66069: PUSH
66070: LD_INT 3
66072: NEG
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 3
66080: NEG
66081: PUSH
66082: LD_INT 2
66084: NEG
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: LD_INT 3
66092: NEG
66093: PUSH
66094: LD_INT 3
66096: NEG
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: LIST
66106: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66107: LD_ADDR_VAR 0 59
66111: PUSH
66112: LD_INT 1
66114: NEG
66115: PUSH
66116: LD_INT 2
66118: NEG
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 0
66126: PUSH
66127: LD_INT 2
66129: NEG
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PUSH
66135: LD_INT 1
66137: PUSH
66138: LD_INT 1
66140: NEG
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: LIST
66150: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66151: LD_ADDR_VAR 0 60
66155: PUSH
66156: LD_INT 1
66158: PUSH
66159: LD_INT 1
66161: NEG
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 2
66169: PUSH
66170: LD_INT 0
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: LD_INT 2
66179: PUSH
66180: LD_INT 1
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: LIST
66191: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66192: LD_ADDR_VAR 0 61
66196: PUSH
66197: LD_INT 2
66199: PUSH
66200: LD_INT 1
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: LD_INT 2
66209: PUSH
66210: LD_INT 2
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 1
66219: PUSH
66220: LD_INT 2
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: LIST
66231: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66232: LD_ADDR_VAR 0 62
66236: PUSH
66237: LD_INT 1
66239: PUSH
66240: LD_INT 2
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 0
66249: PUSH
66250: LD_INT 2
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 1
66259: NEG
66260: PUSH
66261: LD_INT 1
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: LIST
66272: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66273: LD_ADDR_VAR 0 63
66277: PUSH
66278: LD_INT 1
66280: NEG
66281: PUSH
66282: LD_INT 1
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 2
66291: NEG
66292: PUSH
66293: LD_INT 0
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 2
66302: NEG
66303: PUSH
66304: LD_INT 1
66306: NEG
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: LIST
66316: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66317: LD_ADDR_VAR 0 64
66321: PUSH
66322: LD_INT 1
66324: NEG
66325: PUSH
66326: LD_INT 2
66328: NEG
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 2
66336: NEG
66337: PUSH
66338: LD_INT 1
66340: NEG
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 2
66348: NEG
66349: PUSH
66350: LD_INT 2
66352: NEG
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: LIST
66362: ST_TO_ADDR
// end ; 2 :
66363: GO 69629
66365: LD_INT 2
66367: DOUBLE
66368: EQUAL
66369: IFTRUE 66373
66371: GO 69628
66373: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66374: LD_ADDR_VAR 0 29
66378: PUSH
66379: LD_INT 4
66381: PUSH
66382: LD_INT 0
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 4
66391: PUSH
66392: LD_INT 1
66394: NEG
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: PUSH
66400: LD_INT 5
66402: PUSH
66403: LD_INT 0
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 5
66412: PUSH
66413: LD_INT 1
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: LD_INT 4
66422: PUSH
66423: LD_INT 1
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: LD_INT 3
66432: PUSH
66433: LD_INT 0
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 3
66442: PUSH
66443: LD_INT 1
66445: NEG
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 3
66453: PUSH
66454: LD_INT 2
66456: NEG
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 5
66464: PUSH
66465: LD_INT 2
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 3
66474: PUSH
66475: LD_INT 3
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 3
66484: PUSH
66485: LD_INT 2
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 4
66494: PUSH
66495: LD_INT 3
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 4
66504: PUSH
66505: LD_INT 4
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 3
66514: PUSH
66515: LD_INT 4
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 2
66524: PUSH
66525: LD_INT 3
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 2
66534: PUSH
66535: LD_INT 2
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 4
66544: PUSH
66545: LD_INT 2
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 2
66554: PUSH
66555: LD_INT 4
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 0
66564: PUSH
66565: LD_INT 4
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: LD_INT 0
66574: PUSH
66575: LD_INT 3
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 1
66584: PUSH
66585: LD_INT 4
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 1
66594: PUSH
66595: LD_INT 5
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 0
66604: PUSH
66605: LD_INT 5
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 1
66614: NEG
66615: PUSH
66616: LD_INT 4
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 1
66625: NEG
66626: PUSH
66627: LD_INT 3
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 2
66636: PUSH
66637: LD_INT 5
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 2
66646: NEG
66647: PUSH
66648: LD_INT 3
66650: PUSH
66651: EMPTY
66652: LIST
66653: LIST
66654: PUSH
66655: LD_INT 3
66657: NEG
66658: PUSH
66659: LD_INT 0
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 3
66668: NEG
66669: PUSH
66670: LD_INT 1
66672: NEG
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 2
66680: NEG
66681: PUSH
66682: LD_INT 0
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 2
66691: NEG
66692: PUSH
66693: LD_INT 1
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 3
66702: NEG
66703: PUSH
66704: LD_INT 1
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 4
66713: NEG
66714: PUSH
66715: LD_INT 0
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 4
66724: NEG
66725: PUSH
66726: LD_INT 1
66728: NEG
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 4
66736: NEG
66737: PUSH
66738: LD_INT 2
66740: NEG
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 2
66748: NEG
66749: PUSH
66750: LD_INT 2
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 4
66759: NEG
66760: PUSH
66761: LD_INT 4
66763: NEG
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 4
66771: NEG
66772: PUSH
66773: LD_INT 5
66775: NEG
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: LD_INT 3
66783: NEG
66784: PUSH
66785: LD_INT 4
66787: NEG
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 3
66795: NEG
66796: PUSH
66797: LD_INT 3
66799: NEG
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 4
66807: NEG
66808: PUSH
66809: LD_INT 3
66811: NEG
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 5
66819: NEG
66820: PUSH
66821: LD_INT 4
66823: NEG
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 5
66831: NEG
66832: PUSH
66833: LD_INT 5
66835: NEG
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 3
66843: NEG
66844: PUSH
66845: LD_INT 5
66847: NEG
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 5
66855: NEG
66856: PUSH
66857: LD_INT 3
66859: NEG
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66912: LD_ADDR_VAR 0 30
66916: PUSH
66917: LD_INT 4
66919: PUSH
66920: LD_INT 4
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: LD_INT 4
66929: PUSH
66930: LD_INT 3
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: PUSH
66937: LD_INT 5
66939: PUSH
66940: LD_INT 4
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: LD_INT 5
66949: PUSH
66950: LD_INT 5
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: LD_INT 4
66959: PUSH
66960: LD_INT 5
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: LD_INT 3
66969: PUSH
66970: LD_INT 4
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 3
66979: PUSH
66980: LD_INT 3
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: PUSH
66987: LD_INT 5
66989: PUSH
66990: LD_INT 3
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 3
66999: PUSH
67000: LD_INT 5
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 0
67009: PUSH
67010: LD_INT 3
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 0
67019: PUSH
67020: LD_INT 2
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 1
67029: PUSH
67030: LD_INT 3
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 1
67039: PUSH
67040: LD_INT 4
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: LD_INT 0
67049: PUSH
67050: LD_INT 4
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: LD_INT 1
67059: NEG
67060: PUSH
67061: LD_INT 3
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 1
67070: NEG
67071: PUSH
67072: LD_INT 2
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: PUSH
67079: LD_INT 2
67081: PUSH
67082: LD_INT 4
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: LD_INT 2
67091: NEG
67092: PUSH
67093: LD_INT 2
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: LD_INT 4
67102: NEG
67103: PUSH
67104: LD_INT 0
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 4
67113: NEG
67114: PUSH
67115: LD_INT 1
67117: NEG
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 3
67125: NEG
67126: PUSH
67127: LD_INT 0
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 3
67136: NEG
67137: PUSH
67138: LD_INT 1
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 4
67147: NEG
67148: PUSH
67149: LD_INT 1
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: LD_INT 5
67158: NEG
67159: PUSH
67160: LD_INT 0
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: LD_INT 5
67169: NEG
67170: PUSH
67171: LD_INT 1
67173: NEG
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: PUSH
67179: LD_INT 5
67181: NEG
67182: PUSH
67183: LD_INT 2
67185: NEG
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 3
67193: NEG
67194: PUSH
67195: LD_INT 2
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 3
67204: NEG
67205: PUSH
67206: LD_INT 3
67208: NEG
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 3
67216: NEG
67217: PUSH
67218: LD_INT 4
67220: NEG
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 2
67228: NEG
67229: PUSH
67230: LD_INT 3
67232: NEG
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 2
67240: NEG
67241: PUSH
67242: LD_INT 2
67244: NEG
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_INT 3
67252: NEG
67253: PUSH
67254: LD_INT 2
67256: NEG
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 4
67264: NEG
67265: PUSH
67266: LD_INT 3
67268: NEG
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 4
67276: NEG
67277: PUSH
67278: LD_INT 4
67280: NEG
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_INT 2
67288: NEG
67289: PUSH
67290: LD_INT 4
67292: NEG
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 4
67300: NEG
67301: PUSH
67302: LD_INT 2
67304: NEG
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 0
67312: PUSH
67313: LD_INT 4
67315: NEG
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 0
67323: PUSH
67324: LD_INT 5
67326: NEG
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: LD_INT 1
67334: PUSH
67335: LD_INT 4
67337: NEG
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 1
67345: PUSH
67346: LD_INT 3
67348: NEG
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: LD_INT 0
67356: PUSH
67357: LD_INT 3
67359: NEG
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: PUSH
67365: LD_INT 1
67367: NEG
67368: PUSH
67369: LD_INT 4
67371: NEG
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 1
67379: NEG
67380: PUSH
67381: LD_INT 5
67383: NEG
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: LD_INT 2
67391: PUSH
67392: LD_INT 3
67394: NEG
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 2
67402: NEG
67403: PUSH
67404: LD_INT 5
67406: NEG
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: LIST
67416: LIST
67417: LIST
67418: LIST
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: LIST
67432: LIST
67433: LIST
67434: LIST
67435: LIST
67436: LIST
67437: LIST
67438: LIST
67439: LIST
67440: LIST
67441: LIST
67442: LIST
67443: LIST
67444: LIST
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67459: LD_ADDR_VAR 0 31
67463: PUSH
67464: LD_INT 0
67466: PUSH
67467: LD_INT 4
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: LD_INT 0
67476: PUSH
67477: LD_INT 3
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: LD_INT 1
67486: PUSH
67487: LD_INT 4
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 1
67496: PUSH
67497: LD_INT 5
67499: PUSH
67500: EMPTY
67501: LIST
67502: LIST
67503: PUSH
67504: LD_INT 0
67506: PUSH
67507: LD_INT 5
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: PUSH
67514: LD_INT 1
67516: NEG
67517: PUSH
67518: LD_INT 4
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: LD_INT 1
67527: NEG
67528: PUSH
67529: LD_INT 3
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 2
67538: PUSH
67539: LD_INT 5
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: LD_INT 2
67548: NEG
67549: PUSH
67550: LD_INT 3
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: PUSH
67557: LD_INT 3
67559: NEG
67560: PUSH
67561: LD_INT 0
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: PUSH
67568: LD_INT 3
67570: NEG
67571: PUSH
67572: LD_INT 1
67574: NEG
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 2
67582: NEG
67583: PUSH
67584: LD_INT 0
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 2
67593: NEG
67594: PUSH
67595: LD_INT 1
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 3
67604: NEG
67605: PUSH
67606: LD_INT 1
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 4
67615: NEG
67616: PUSH
67617: LD_INT 0
67619: PUSH
67620: EMPTY
67621: LIST
67622: LIST
67623: PUSH
67624: LD_INT 4
67626: NEG
67627: PUSH
67628: LD_INT 1
67630: NEG
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: LD_INT 4
67638: NEG
67639: PUSH
67640: LD_INT 2
67642: NEG
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 2
67650: NEG
67651: PUSH
67652: LD_INT 2
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 4
67661: NEG
67662: PUSH
67663: LD_INT 4
67665: NEG
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_INT 4
67673: NEG
67674: PUSH
67675: LD_INT 5
67677: NEG
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 3
67685: NEG
67686: PUSH
67687: LD_INT 4
67689: NEG
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 3
67697: NEG
67698: PUSH
67699: LD_INT 3
67701: NEG
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 4
67709: NEG
67710: PUSH
67711: LD_INT 3
67713: NEG
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: LD_INT 5
67721: NEG
67722: PUSH
67723: LD_INT 4
67725: NEG
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 5
67733: NEG
67734: PUSH
67735: LD_INT 5
67737: NEG
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: PUSH
67743: LD_INT 3
67745: NEG
67746: PUSH
67747: LD_INT 5
67749: NEG
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: LD_INT 5
67757: NEG
67758: PUSH
67759: LD_INT 3
67761: NEG
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 0
67769: PUSH
67770: LD_INT 3
67772: NEG
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: LD_INT 0
67780: PUSH
67781: LD_INT 4
67783: NEG
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: LD_INT 1
67791: PUSH
67792: LD_INT 3
67794: NEG
67795: PUSH
67796: EMPTY
67797: LIST
67798: LIST
67799: PUSH
67800: LD_INT 1
67802: PUSH
67803: LD_INT 2
67805: NEG
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: LD_INT 0
67813: PUSH
67814: LD_INT 2
67816: NEG
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: PUSH
67822: LD_INT 1
67824: NEG
67825: PUSH
67826: LD_INT 3
67828: NEG
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 1
67836: NEG
67837: PUSH
67838: LD_INT 4
67840: NEG
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: LD_INT 2
67848: PUSH
67849: LD_INT 2
67851: NEG
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 2
67859: NEG
67860: PUSH
67861: LD_INT 4
67863: NEG
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 4
67871: PUSH
67872: LD_INT 0
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: LD_INT 4
67881: PUSH
67882: LD_INT 1
67884: NEG
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 5
67892: PUSH
67893: LD_INT 0
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 5
67902: PUSH
67903: LD_INT 1
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 4
67912: PUSH
67913: LD_INT 1
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 3
67922: PUSH
67923: LD_INT 0
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: LD_INT 3
67932: PUSH
67933: LD_INT 1
67935: NEG
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: PUSH
67941: LD_INT 3
67943: PUSH
67944: LD_INT 2
67946: NEG
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: LD_INT 5
67954: PUSH
67955: LD_INT 2
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: LIST
67966: LIST
67967: LIST
67968: LIST
67969: LIST
67970: LIST
67971: LIST
67972: LIST
67973: LIST
67974: LIST
67975: LIST
67976: LIST
67977: LIST
67978: LIST
67979: LIST
67980: LIST
67981: LIST
67982: LIST
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: LIST
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68009: LD_ADDR_VAR 0 32
68013: PUSH
68014: LD_INT 4
68016: NEG
68017: PUSH
68018: LD_INT 0
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: PUSH
68025: LD_INT 4
68027: NEG
68028: PUSH
68029: LD_INT 1
68031: NEG
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 3
68039: NEG
68040: PUSH
68041: LD_INT 0
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 3
68050: NEG
68051: PUSH
68052: LD_INT 1
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: LD_INT 4
68061: NEG
68062: PUSH
68063: LD_INT 1
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 5
68072: NEG
68073: PUSH
68074: LD_INT 0
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 5
68083: NEG
68084: PUSH
68085: LD_INT 1
68087: NEG
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: PUSH
68093: LD_INT 5
68095: NEG
68096: PUSH
68097: LD_INT 2
68099: NEG
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 3
68107: NEG
68108: PUSH
68109: LD_INT 2
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 3
68118: NEG
68119: PUSH
68120: LD_INT 3
68122: NEG
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 3
68130: NEG
68131: PUSH
68132: LD_INT 4
68134: NEG
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 2
68142: NEG
68143: PUSH
68144: LD_INT 3
68146: NEG
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 2
68154: NEG
68155: PUSH
68156: LD_INT 2
68158: NEG
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 3
68166: NEG
68167: PUSH
68168: LD_INT 2
68170: NEG
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 4
68178: NEG
68179: PUSH
68180: LD_INT 3
68182: NEG
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: LD_INT 4
68190: NEG
68191: PUSH
68192: LD_INT 4
68194: NEG
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: LD_INT 2
68202: NEG
68203: PUSH
68204: LD_INT 4
68206: NEG
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 4
68214: NEG
68215: PUSH
68216: LD_INT 2
68218: NEG
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: PUSH
68224: LD_INT 0
68226: PUSH
68227: LD_INT 4
68229: NEG
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: LD_INT 0
68237: PUSH
68238: LD_INT 5
68240: NEG
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PUSH
68246: LD_INT 1
68248: PUSH
68249: LD_INT 4
68251: NEG
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: LD_INT 1
68259: PUSH
68260: LD_INT 3
68262: NEG
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: LD_INT 0
68270: PUSH
68271: LD_INT 3
68273: NEG
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 1
68281: NEG
68282: PUSH
68283: LD_INT 4
68285: NEG
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: LD_INT 1
68293: NEG
68294: PUSH
68295: LD_INT 5
68297: NEG
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 2
68305: PUSH
68306: LD_INT 3
68308: NEG
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 2
68316: NEG
68317: PUSH
68318: LD_INT 5
68320: NEG
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 3
68328: PUSH
68329: LD_INT 0
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: LD_INT 3
68338: PUSH
68339: LD_INT 1
68341: NEG
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: LD_INT 4
68349: PUSH
68350: LD_INT 0
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PUSH
68357: LD_INT 4
68359: PUSH
68360: LD_INT 1
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 3
68369: PUSH
68370: LD_INT 1
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 2
68379: PUSH
68380: LD_INT 0
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 2
68389: PUSH
68390: LD_INT 1
68392: NEG
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: PUSH
68398: LD_INT 2
68400: PUSH
68401: LD_INT 2
68403: NEG
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: LD_INT 4
68411: PUSH
68412: LD_INT 2
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: LD_INT 4
68421: PUSH
68422: LD_INT 4
68424: PUSH
68425: EMPTY
68426: LIST
68427: LIST
68428: PUSH
68429: LD_INT 4
68431: PUSH
68432: LD_INT 3
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: PUSH
68439: LD_INT 5
68441: PUSH
68442: LD_INT 4
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: LD_INT 5
68451: PUSH
68452: LD_INT 5
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: PUSH
68459: LD_INT 4
68461: PUSH
68462: LD_INT 5
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 3
68471: PUSH
68472: LD_INT 4
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 3
68481: PUSH
68482: LD_INT 3
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: PUSH
68489: LD_INT 5
68491: PUSH
68492: LD_INT 3
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PUSH
68499: LD_INT 3
68501: PUSH
68502: LD_INT 5
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: LIST
68536: LIST
68537: LIST
68538: LIST
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: LIST
68544: LIST
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68556: LD_ADDR_VAR 0 33
68560: PUSH
68561: LD_INT 4
68563: NEG
68564: PUSH
68565: LD_INT 4
68567: NEG
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: PUSH
68573: LD_INT 4
68575: NEG
68576: PUSH
68577: LD_INT 5
68579: NEG
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: PUSH
68585: LD_INT 3
68587: NEG
68588: PUSH
68589: LD_INT 4
68591: NEG
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: LD_INT 3
68599: NEG
68600: PUSH
68601: LD_INT 3
68603: NEG
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_INT 4
68611: NEG
68612: PUSH
68613: LD_INT 3
68615: NEG
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: LD_INT 5
68623: NEG
68624: PUSH
68625: LD_INT 4
68627: NEG
68628: PUSH
68629: EMPTY
68630: LIST
68631: LIST
68632: PUSH
68633: LD_INT 5
68635: NEG
68636: PUSH
68637: LD_INT 5
68639: NEG
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: PUSH
68645: LD_INT 3
68647: NEG
68648: PUSH
68649: LD_INT 5
68651: NEG
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PUSH
68657: LD_INT 5
68659: NEG
68660: PUSH
68661: LD_INT 3
68663: NEG
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PUSH
68669: LD_INT 0
68671: PUSH
68672: LD_INT 3
68674: NEG
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: LD_INT 0
68682: PUSH
68683: LD_INT 4
68685: NEG
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: LD_INT 1
68693: PUSH
68694: LD_INT 3
68696: NEG
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: LD_INT 1
68704: PUSH
68705: LD_INT 2
68707: NEG
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: LD_INT 0
68715: PUSH
68716: LD_INT 2
68718: NEG
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: LD_INT 1
68726: NEG
68727: PUSH
68728: LD_INT 3
68730: NEG
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: LD_INT 1
68738: NEG
68739: PUSH
68740: LD_INT 4
68742: NEG
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: LD_INT 2
68750: PUSH
68751: LD_INT 2
68753: NEG
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: LD_INT 2
68761: NEG
68762: PUSH
68763: LD_INT 4
68765: NEG
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: PUSH
68771: LD_INT 4
68773: PUSH
68774: LD_INT 0
68776: PUSH
68777: EMPTY
68778: LIST
68779: LIST
68780: PUSH
68781: LD_INT 4
68783: PUSH
68784: LD_INT 1
68786: NEG
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: PUSH
68792: LD_INT 5
68794: PUSH
68795: LD_INT 0
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: PUSH
68802: LD_INT 5
68804: PUSH
68805: LD_INT 1
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PUSH
68812: LD_INT 4
68814: PUSH
68815: LD_INT 1
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PUSH
68822: LD_INT 3
68824: PUSH
68825: LD_INT 0
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 3
68834: PUSH
68835: LD_INT 1
68837: NEG
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: LD_INT 3
68845: PUSH
68846: LD_INT 2
68848: NEG
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 5
68856: PUSH
68857: LD_INT 2
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 3
68866: PUSH
68867: LD_INT 3
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 3
68876: PUSH
68877: LD_INT 2
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PUSH
68884: LD_INT 4
68886: PUSH
68887: LD_INT 3
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PUSH
68894: LD_INT 4
68896: PUSH
68897: LD_INT 4
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: LD_INT 3
68906: PUSH
68907: LD_INT 4
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 2
68916: PUSH
68917: LD_INT 3
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: PUSH
68924: LD_INT 2
68926: PUSH
68927: LD_INT 2
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: LD_INT 4
68936: PUSH
68937: LD_INT 2
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PUSH
68944: LD_INT 2
68946: PUSH
68947: LD_INT 4
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 0
68956: PUSH
68957: LD_INT 4
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 0
68966: PUSH
68967: LD_INT 3
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 1
68976: PUSH
68977: LD_INT 4
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 1
68986: PUSH
68987: LD_INT 5
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 0
68996: PUSH
68997: LD_INT 5
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: LD_INT 1
69006: NEG
69007: PUSH
69008: LD_INT 4
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: PUSH
69015: LD_INT 1
69017: NEG
69018: PUSH
69019: LD_INT 3
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 2
69028: PUSH
69029: LD_INT 5
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 2
69038: NEG
69039: PUSH
69040: LD_INT 3
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: LIST
69076: LIST
69077: LIST
69078: LIST
69079: LIST
69080: LIST
69081: LIST
69082: LIST
69083: LIST
69084: LIST
69085: LIST
69086: LIST
69087: LIST
69088: LIST
69089: LIST
69090: LIST
69091: LIST
69092: LIST
69093: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69094: LD_ADDR_VAR 0 34
69098: PUSH
69099: LD_INT 0
69101: PUSH
69102: LD_INT 4
69104: NEG
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: LD_INT 0
69112: PUSH
69113: LD_INT 5
69115: NEG
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_INT 1
69123: PUSH
69124: LD_INT 4
69126: NEG
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: PUSH
69132: LD_INT 1
69134: PUSH
69135: LD_INT 3
69137: NEG
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: PUSH
69143: LD_INT 0
69145: PUSH
69146: LD_INT 3
69148: NEG
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: PUSH
69154: LD_INT 1
69156: NEG
69157: PUSH
69158: LD_INT 4
69160: NEG
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: PUSH
69166: LD_INT 1
69168: NEG
69169: PUSH
69170: LD_INT 5
69172: NEG
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PUSH
69178: LD_INT 2
69180: PUSH
69181: LD_INT 3
69183: NEG
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: PUSH
69189: LD_INT 2
69191: NEG
69192: PUSH
69193: LD_INT 5
69195: NEG
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: PUSH
69201: LD_INT 3
69203: PUSH
69204: LD_INT 0
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: PUSH
69211: LD_INT 3
69213: PUSH
69214: LD_INT 1
69216: NEG
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: PUSH
69222: LD_INT 4
69224: PUSH
69225: LD_INT 0
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: PUSH
69232: LD_INT 4
69234: PUSH
69235: LD_INT 1
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: LD_INT 3
69244: PUSH
69245: LD_INT 1
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: LD_INT 2
69254: PUSH
69255: LD_INT 0
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: LD_INT 2
69264: PUSH
69265: LD_INT 1
69267: NEG
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: LD_INT 2
69275: PUSH
69276: LD_INT 2
69278: NEG
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: LD_INT 4
69286: PUSH
69287: LD_INT 2
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: PUSH
69294: LD_INT 4
69296: PUSH
69297: LD_INT 4
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PUSH
69304: LD_INT 4
69306: PUSH
69307: LD_INT 3
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 5
69316: PUSH
69317: LD_INT 4
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: LD_INT 5
69326: PUSH
69327: LD_INT 5
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: LD_INT 4
69336: PUSH
69337: LD_INT 5
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: LD_INT 3
69346: PUSH
69347: LD_INT 4
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PUSH
69354: LD_INT 3
69356: PUSH
69357: LD_INT 3
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PUSH
69364: LD_INT 5
69366: PUSH
69367: LD_INT 3
69369: PUSH
69370: EMPTY
69371: LIST
69372: LIST
69373: PUSH
69374: LD_INT 3
69376: PUSH
69377: LD_INT 5
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: LD_INT 0
69386: PUSH
69387: LD_INT 3
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: LD_INT 0
69396: PUSH
69397: LD_INT 2
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 1
69406: PUSH
69407: LD_INT 3
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: LD_INT 1
69416: PUSH
69417: LD_INT 4
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 0
69426: PUSH
69427: LD_INT 4
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PUSH
69434: LD_INT 1
69436: NEG
69437: PUSH
69438: LD_INT 3
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: PUSH
69445: LD_INT 1
69447: NEG
69448: PUSH
69449: LD_INT 2
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 2
69458: PUSH
69459: LD_INT 4
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 2
69468: NEG
69469: PUSH
69470: LD_INT 2
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PUSH
69477: LD_INT 4
69479: NEG
69480: PUSH
69481: LD_INT 0
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: PUSH
69488: LD_INT 4
69490: NEG
69491: PUSH
69492: LD_INT 1
69494: NEG
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: PUSH
69500: LD_INT 3
69502: NEG
69503: PUSH
69504: LD_INT 0
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: PUSH
69511: LD_INT 3
69513: NEG
69514: PUSH
69515: LD_INT 1
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: PUSH
69522: LD_INT 4
69524: NEG
69525: PUSH
69526: LD_INT 1
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: LD_INT 5
69535: NEG
69536: PUSH
69537: LD_INT 0
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: PUSH
69544: LD_INT 5
69546: NEG
69547: PUSH
69548: LD_INT 1
69550: NEG
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 5
69558: NEG
69559: PUSH
69560: LD_INT 2
69562: NEG
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PUSH
69568: LD_INT 3
69570: NEG
69571: PUSH
69572: LD_INT 2
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: LIST
69593: LIST
69594: LIST
69595: LIST
69596: LIST
69597: LIST
69598: LIST
69599: LIST
69600: LIST
69601: LIST
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: LIST
69608: LIST
69609: LIST
69610: LIST
69611: LIST
69612: LIST
69613: LIST
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: LIST
69625: ST_TO_ADDR
// end ; end ;
69626: GO 69629
69628: POP
// case btype of b_depot , b_warehouse :
69629: LD_VAR 0 1
69633: PUSH
69634: LD_INT 0
69636: DOUBLE
69637: EQUAL
69638: IFTRUE 69648
69640: LD_INT 1
69642: DOUBLE
69643: EQUAL
69644: IFTRUE 69648
69646: GO 69849
69648: POP
// case nation of nation_american :
69649: LD_VAR 0 5
69653: PUSH
69654: LD_INT 1
69656: DOUBLE
69657: EQUAL
69658: IFTRUE 69662
69660: GO 69718
69662: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69663: LD_ADDR_VAR 0 9
69667: PUSH
69668: LD_VAR 0 11
69672: PUSH
69673: LD_VAR 0 12
69677: PUSH
69678: LD_VAR 0 13
69682: PUSH
69683: LD_VAR 0 14
69687: PUSH
69688: LD_VAR 0 15
69692: PUSH
69693: LD_VAR 0 16
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: LIST
69702: LIST
69703: LIST
69704: LIST
69705: PUSH
69706: LD_VAR 0 4
69710: PUSH
69711: LD_INT 1
69713: PLUS
69714: ARRAY
69715: ST_TO_ADDR
69716: GO 69847
69718: LD_INT 2
69720: DOUBLE
69721: EQUAL
69722: IFTRUE 69726
69724: GO 69782
69726: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69727: LD_ADDR_VAR 0 9
69731: PUSH
69732: LD_VAR 0 17
69736: PUSH
69737: LD_VAR 0 18
69741: PUSH
69742: LD_VAR 0 19
69746: PUSH
69747: LD_VAR 0 20
69751: PUSH
69752: LD_VAR 0 21
69756: PUSH
69757: LD_VAR 0 22
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: PUSH
69770: LD_VAR 0 4
69774: PUSH
69775: LD_INT 1
69777: PLUS
69778: ARRAY
69779: ST_TO_ADDR
69780: GO 69847
69782: LD_INT 3
69784: DOUBLE
69785: EQUAL
69786: IFTRUE 69790
69788: GO 69846
69790: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69791: LD_ADDR_VAR 0 9
69795: PUSH
69796: LD_VAR 0 23
69800: PUSH
69801: LD_VAR 0 24
69805: PUSH
69806: LD_VAR 0 25
69810: PUSH
69811: LD_VAR 0 26
69815: PUSH
69816: LD_VAR 0 27
69820: PUSH
69821: LD_VAR 0 28
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: LIST
69830: LIST
69831: LIST
69832: LIST
69833: PUSH
69834: LD_VAR 0 4
69838: PUSH
69839: LD_INT 1
69841: PLUS
69842: ARRAY
69843: ST_TO_ADDR
69844: GO 69847
69846: POP
69847: GO 70402
69849: LD_INT 2
69851: DOUBLE
69852: EQUAL
69853: IFTRUE 69863
69855: LD_INT 3
69857: DOUBLE
69858: EQUAL
69859: IFTRUE 69863
69861: GO 69919
69863: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69864: LD_ADDR_VAR 0 9
69868: PUSH
69869: LD_VAR 0 29
69873: PUSH
69874: LD_VAR 0 30
69878: PUSH
69879: LD_VAR 0 31
69883: PUSH
69884: LD_VAR 0 32
69888: PUSH
69889: LD_VAR 0 33
69893: PUSH
69894: LD_VAR 0 34
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: LIST
69903: LIST
69904: LIST
69905: LIST
69906: PUSH
69907: LD_VAR 0 4
69911: PUSH
69912: LD_INT 1
69914: PLUS
69915: ARRAY
69916: ST_TO_ADDR
69917: GO 70402
69919: LD_INT 16
69921: DOUBLE
69922: EQUAL
69923: IFTRUE 69981
69925: LD_INT 17
69927: DOUBLE
69928: EQUAL
69929: IFTRUE 69981
69931: LD_INT 18
69933: DOUBLE
69934: EQUAL
69935: IFTRUE 69981
69937: LD_INT 19
69939: DOUBLE
69940: EQUAL
69941: IFTRUE 69981
69943: LD_INT 22
69945: DOUBLE
69946: EQUAL
69947: IFTRUE 69981
69949: LD_INT 20
69951: DOUBLE
69952: EQUAL
69953: IFTRUE 69981
69955: LD_INT 21
69957: DOUBLE
69958: EQUAL
69959: IFTRUE 69981
69961: LD_INT 23
69963: DOUBLE
69964: EQUAL
69965: IFTRUE 69981
69967: LD_INT 24
69969: DOUBLE
69970: EQUAL
69971: IFTRUE 69981
69973: LD_INT 25
69975: DOUBLE
69976: EQUAL
69977: IFTRUE 69981
69979: GO 70037
69981: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69982: LD_ADDR_VAR 0 9
69986: PUSH
69987: LD_VAR 0 35
69991: PUSH
69992: LD_VAR 0 36
69996: PUSH
69997: LD_VAR 0 37
70001: PUSH
70002: LD_VAR 0 38
70006: PUSH
70007: LD_VAR 0 39
70011: PUSH
70012: LD_VAR 0 40
70016: PUSH
70017: EMPTY
70018: LIST
70019: LIST
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: PUSH
70025: LD_VAR 0 4
70029: PUSH
70030: LD_INT 1
70032: PLUS
70033: ARRAY
70034: ST_TO_ADDR
70035: GO 70402
70037: LD_INT 6
70039: DOUBLE
70040: EQUAL
70041: IFTRUE 70093
70043: LD_INT 7
70045: DOUBLE
70046: EQUAL
70047: IFTRUE 70093
70049: LD_INT 8
70051: DOUBLE
70052: EQUAL
70053: IFTRUE 70093
70055: LD_INT 13
70057: DOUBLE
70058: EQUAL
70059: IFTRUE 70093
70061: LD_INT 12
70063: DOUBLE
70064: EQUAL
70065: IFTRUE 70093
70067: LD_INT 15
70069: DOUBLE
70070: EQUAL
70071: IFTRUE 70093
70073: LD_INT 11
70075: DOUBLE
70076: EQUAL
70077: IFTRUE 70093
70079: LD_INT 14
70081: DOUBLE
70082: EQUAL
70083: IFTRUE 70093
70085: LD_INT 10
70087: DOUBLE
70088: EQUAL
70089: IFTRUE 70093
70091: GO 70149
70093: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70094: LD_ADDR_VAR 0 9
70098: PUSH
70099: LD_VAR 0 41
70103: PUSH
70104: LD_VAR 0 42
70108: PUSH
70109: LD_VAR 0 43
70113: PUSH
70114: LD_VAR 0 44
70118: PUSH
70119: LD_VAR 0 45
70123: PUSH
70124: LD_VAR 0 46
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: LIST
70135: LIST
70136: PUSH
70137: LD_VAR 0 4
70141: PUSH
70142: LD_INT 1
70144: PLUS
70145: ARRAY
70146: ST_TO_ADDR
70147: GO 70402
70149: LD_INT 36
70151: DOUBLE
70152: EQUAL
70153: IFTRUE 70157
70155: GO 70213
70157: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70158: LD_ADDR_VAR 0 9
70162: PUSH
70163: LD_VAR 0 47
70167: PUSH
70168: LD_VAR 0 48
70172: PUSH
70173: LD_VAR 0 49
70177: PUSH
70178: LD_VAR 0 50
70182: PUSH
70183: LD_VAR 0 51
70187: PUSH
70188: LD_VAR 0 52
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: LIST
70197: LIST
70198: LIST
70199: LIST
70200: PUSH
70201: LD_VAR 0 4
70205: PUSH
70206: LD_INT 1
70208: PLUS
70209: ARRAY
70210: ST_TO_ADDR
70211: GO 70402
70213: LD_INT 4
70215: DOUBLE
70216: EQUAL
70217: IFTRUE 70239
70219: LD_INT 5
70221: DOUBLE
70222: EQUAL
70223: IFTRUE 70239
70225: LD_INT 34
70227: DOUBLE
70228: EQUAL
70229: IFTRUE 70239
70231: LD_INT 37
70233: DOUBLE
70234: EQUAL
70235: IFTRUE 70239
70237: GO 70295
70239: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70240: LD_ADDR_VAR 0 9
70244: PUSH
70245: LD_VAR 0 53
70249: PUSH
70250: LD_VAR 0 54
70254: PUSH
70255: LD_VAR 0 55
70259: PUSH
70260: LD_VAR 0 56
70264: PUSH
70265: LD_VAR 0 57
70269: PUSH
70270: LD_VAR 0 58
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: PUSH
70283: LD_VAR 0 4
70287: PUSH
70288: LD_INT 1
70290: PLUS
70291: ARRAY
70292: ST_TO_ADDR
70293: GO 70402
70295: LD_INT 31
70297: DOUBLE
70298: EQUAL
70299: IFTRUE 70345
70301: LD_INT 32
70303: DOUBLE
70304: EQUAL
70305: IFTRUE 70345
70307: LD_INT 33
70309: DOUBLE
70310: EQUAL
70311: IFTRUE 70345
70313: LD_INT 27
70315: DOUBLE
70316: EQUAL
70317: IFTRUE 70345
70319: LD_INT 26
70321: DOUBLE
70322: EQUAL
70323: IFTRUE 70345
70325: LD_INT 28
70327: DOUBLE
70328: EQUAL
70329: IFTRUE 70345
70331: LD_INT 29
70333: DOUBLE
70334: EQUAL
70335: IFTRUE 70345
70337: LD_INT 30
70339: DOUBLE
70340: EQUAL
70341: IFTRUE 70345
70343: GO 70401
70345: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70346: LD_ADDR_VAR 0 9
70350: PUSH
70351: LD_VAR 0 59
70355: PUSH
70356: LD_VAR 0 60
70360: PUSH
70361: LD_VAR 0 61
70365: PUSH
70366: LD_VAR 0 62
70370: PUSH
70371: LD_VAR 0 63
70375: PUSH
70376: LD_VAR 0 64
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: LIST
70385: LIST
70386: LIST
70387: LIST
70388: PUSH
70389: LD_VAR 0 4
70393: PUSH
70394: LD_INT 1
70396: PLUS
70397: ARRAY
70398: ST_TO_ADDR
70399: GO 70402
70401: POP
// temp_list2 = [ ] ;
70402: LD_ADDR_VAR 0 10
70406: PUSH
70407: EMPTY
70408: ST_TO_ADDR
// for i in temp_list do
70409: LD_ADDR_VAR 0 8
70413: PUSH
70414: LD_VAR 0 9
70418: PUSH
70419: FOR_IN
70420: IFFALSE 70472
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70422: LD_ADDR_VAR 0 10
70426: PUSH
70427: LD_VAR 0 10
70431: PUSH
70432: LD_VAR 0 8
70436: PUSH
70437: LD_INT 1
70439: ARRAY
70440: PUSH
70441: LD_VAR 0 2
70445: PLUS
70446: PUSH
70447: LD_VAR 0 8
70451: PUSH
70452: LD_INT 2
70454: ARRAY
70455: PUSH
70456: LD_VAR 0 3
70460: PLUS
70461: PUSH
70462: EMPTY
70463: LIST
70464: LIST
70465: PUSH
70466: EMPTY
70467: LIST
70468: ADD
70469: ST_TO_ADDR
70470: GO 70419
70472: POP
70473: POP
// result = temp_list2 ;
70474: LD_ADDR_VAR 0 7
70478: PUSH
70479: LD_VAR 0 10
70483: ST_TO_ADDR
// end ;
70484: LD_VAR 0 7
70488: RET
// export function EnemyInRange ( unit , dist ) ; begin
70489: LD_INT 0
70491: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70492: LD_ADDR_VAR 0 3
70496: PUSH
70497: LD_VAR 0 1
70501: PPUSH
70502: CALL_OW 255
70506: PPUSH
70507: LD_VAR 0 1
70511: PPUSH
70512: CALL_OW 250
70516: PPUSH
70517: LD_VAR 0 1
70521: PPUSH
70522: CALL_OW 251
70526: PPUSH
70527: LD_VAR 0 2
70531: PPUSH
70532: CALL 43862 0 4
70536: PUSH
70537: LD_INT 4
70539: ARRAY
70540: ST_TO_ADDR
// end ;
70541: LD_VAR 0 3
70545: RET
// export function PlayerSeeMe ( unit ) ; begin
70546: LD_INT 0
70548: PPUSH
// result := See ( your_side , unit ) ;
70549: LD_ADDR_VAR 0 2
70553: PUSH
70554: LD_OWVAR 2
70558: PPUSH
70559: LD_VAR 0 1
70563: PPUSH
70564: CALL_OW 292
70568: ST_TO_ADDR
// end ;
70569: LD_VAR 0 2
70573: RET
// export function ReverseDir ( unit ) ; begin
70574: LD_INT 0
70576: PPUSH
// if not unit then
70577: LD_VAR 0 1
70581: NOT
70582: IFFALSE 70586
// exit ;
70584: GO 70609
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70586: LD_ADDR_VAR 0 2
70590: PUSH
70591: LD_VAR 0 1
70595: PPUSH
70596: CALL_OW 254
70600: PUSH
70601: LD_INT 3
70603: PLUS
70604: PUSH
70605: LD_INT 6
70607: MOD
70608: ST_TO_ADDR
// end ;
70609: LD_VAR 0 2
70613: RET
// export function ReverseArray ( array ) ; var i ; begin
70614: LD_INT 0
70616: PPUSH
70617: PPUSH
// if not array then
70618: LD_VAR 0 1
70622: NOT
70623: IFFALSE 70627
// exit ;
70625: GO 70682
// result := [ ] ;
70627: LD_ADDR_VAR 0 2
70631: PUSH
70632: EMPTY
70633: ST_TO_ADDR
// for i := array downto 1 do
70634: LD_ADDR_VAR 0 3
70638: PUSH
70639: DOUBLE
70640: LD_VAR 0 1
70644: INC
70645: ST_TO_ADDR
70646: LD_INT 1
70648: PUSH
70649: FOR_DOWNTO
70650: IFFALSE 70680
// result := Join ( result , array [ i ] ) ;
70652: LD_ADDR_VAR 0 2
70656: PUSH
70657: LD_VAR 0 2
70661: PPUSH
70662: LD_VAR 0 1
70666: PUSH
70667: LD_VAR 0 3
70671: ARRAY
70672: PPUSH
70673: CALL 75338 0 2
70677: ST_TO_ADDR
70678: GO 70649
70680: POP
70681: POP
// end ;
70682: LD_VAR 0 2
70686: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
70687: LD_INT 0
70689: PPUSH
70690: PPUSH
70691: PPUSH
70692: PPUSH
70693: PPUSH
70694: PPUSH
// if not unit or not hexes then
70695: LD_VAR 0 1
70699: NOT
70700: PUSH
70701: LD_VAR 0 2
70705: NOT
70706: OR
70707: IFFALSE 70711
// exit ;
70709: GO 70834
// dist := 9999 ;
70711: LD_ADDR_VAR 0 5
70715: PUSH
70716: LD_INT 9999
70718: ST_TO_ADDR
// for i = 1 to hexes do
70719: LD_ADDR_VAR 0 4
70723: PUSH
70724: DOUBLE
70725: LD_INT 1
70727: DEC
70728: ST_TO_ADDR
70729: LD_VAR 0 2
70733: PUSH
70734: FOR_TO
70735: IFFALSE 70822
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70737: LD_ADDR_VAR 0 6
70741: PUSH
70742: LD_VAR 0 1
70746: PPUSH
70747: LD_VAR 0 2
70751: PUSH
70752: LD_VAR 0 4
70756: ARRAY
70757: PUSH
70758: LD_INT 1
70760: ARRAY
70761: PPUSH
70762: LD_VAR 0 2
70766: PUSH
70767: LD_VAR 0 4
70771: ARRAY
70772: PUSH
70773: LD_INT 2
70775: ARRAY
70776: PPUSH
70777: CALL_OW 297
70781: ST_TO_ADDR
// if tdist < dist then
70782: LD_VAR 0 6
70786: PUSH
70787: LD_VAR 0 5
70791: LESS
70792: IFFALSE 70820
// begin hex := hexes [ i ] ;
70794: LD_ADDR_VAR 0 8
70798: PUSH
70799: LD_VAR 0 2
70803: PUSH
70804: LD_VAR 0 4
70808: ARRAY
70809: ST_TO_ADDR
// dist := tdist ;
70810: LD_ADDR_VAR 0 5
70814: PUSH
70815: LD_VAR 0 6
70819: ST_TO_ADDR
// end ; end ;
70820: GO 70734
70822: POP
70823: POP
// result := hex ;
70824: LD_ADDR_VAR 0 3
70828: PUSH
70829: LD_VAR 0 8
70833: ST_TO_ADDR
// end ;
70834: LD_VAR 0 3
70838: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70839: LD_INT 0
70841: PPUSH
70842: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70843: LD_VAR 0 1
70847: NOT
70848: PUSH
70849: LD_VAR 0 1
70853: PUSH
70854: LD_INT 21
70856: PUSH
70857: LD_INT 2
70859: PUSH
70860: EMPTY
70861: LIST
70862: LIST
70863: PUSH
70864: LD_INT 23
70866: PUSH
70867: LD_INT 2
70869: PUSH
70870: EMPTY
70871: LIST
70872: LIST
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: PPUSH
70878: CALL_OW 69
70882: IN
70883: NOT
70884: OR
70885: IFFALSE 70889
// exit ;
70887: GO 70936
// for i = 1 to 3 do
70889: LD_ADDR_VAR 0 3
70893: PUSH
70894: DOUBLE
70895: LD_INT 1
70897: DEC
70898: ST_TO_ADDR
70899: LD_INT 3
70901: PUSH
70902: FOR_TO
70903: IFFALSE 70934
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70905: LD_VAR 0 1
70909: PPUSH
70910: CALL_OW 250
70914: PPUSH
70915: LD_VAR 0 1
70919: PPUSH
70920: CALL_OW 251
70924: PPUSH
70925: LD_INT 1
70927: PPUSH
70928: CALL_OW 453
70932: GO 70902
70934: POP
70935: POP
// end ;
70936: LD_VAR 0 2
70940: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70941: LD_INT 0
70943: PPUSH
70944: PPUSH
70945: PPUSH
70946: PPUSH
70947: PPUSH
70948: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70949: LD_VAR 0 1
70953: NOT
70954: PUSH
70955: LD_VAR 0 2
70959: NOT
70960: OR
70961: PUSH
70962: LD_VAR 0 1
70966: PPUSH
70967: CALL_OW 314
70971: OR
70972: IFFALSE 70976
// exit ;
70974: GO 71443
// if GetLives ( i ) < 250 then
70976: LD_VAR 0 4
70980: PPUSH
70981: CALL_OW 256
70985: PUSH
70986: LD_INT 250
70988: LESS
70989: IFFALSE 71002
// begin ComAutodestruct ( i ) ;
70991: LD_VAR 0 4
70995: PPUSH
70996: CALL 70839 0 1
// exit ;
71000: GO 71443
// end ; x := GetX ( enemy_unit ) ;
71002: LD_ADDR_VAR 0 7
71006: PUSH
71007: LD_VAR 0 2
71011: PPUSH
71012: CALL_OW 250
71016: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71017: LD_ADDR_VAR 0 8
71021: PUSH
71022: LD_VAR 0 2
71026: PPUSH
71027: CALL_OW 251
71031: ST_TO_ADDR
// if not x or not y then
71032: LD_VAR 0 7
71036: NOT
71037: PUSH
71038: LD_VAR 0 8
71042: NOT
71043: OR
71044: IFFALSE 71048
// exit ;
71046: GO 71443
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71048: LD_ADDR_VAR 0 6
71052: PUSH
71053: LD_VAR 0 7
71057: PPUSH
71058: LD_INT 0
71060: PPUSH
71061: LD_INT 4
71063: PPUSH
71064: CALL_OW 272
71068: PUSH
71069: LD_VAR 0 8
71073: PPUSH
71074: LD_INT 0
71076: PPUSH
71077: LD_INT 4
71079: PPUSH
71080: CALL_OW 273
71084: PUSH
71085: EMPTY
71086: LIST
71087: LIST
71088: PUSH
71089: LD_VAR 0 7
71093: PPUSH
71094: LD_INT 1
71096: PPUSH
71097: LD_INT 4
71099: PPUSH
71100: CALL_OW 272
71104: PUSH
71105: LD_VAR 0 8
71109: PPUSH
71110: LD_INT 1
71112: PPUSH
71113: LD_INT 4
71115: PPUSH
71116: CALL_OW 273
71120: PUSH
71121: EMPTY
71122: LIST
71123: LIST
71124: PUSH
71125: LD_VAR 0 7
71129: PPUSH
71130: LD_INT 2
71132: PPUSH
71133: LD_INT 4
71135: PPUSH
71136: CALL_OW 272
71140: PUSH
71141: LD_VAR 0 8
71145: PPUSH
71146: LD_INT 2
71148: PPUSH
71149: LD_INT 4
71151: PPUSH
71152: CALL_OW 273
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: PUSH
71161: LD_VAR 0 7
71165: PPUSH
71166: LD_INT 3
71168: PPUSH
71169: LD_INT 4
71171: PPUSH
71172: CALL_OW 272
71176: PUSH
71177: LD_VAR 0 8
71181: PPUSH
71182: LD_INT 3
71184: PPUSH
71185: LD_INT 4
71187: PPUSH
71188: CALL_OW 273
71192: PUSH
71193: EMPTY
71194: LIST
71195: LIST
71196: PUSH
71197: LD_VAR 0 7
71201: PPUSH
71202: LD_INT 4
71204: PPUSH
71205: LD_INT 4
71207: PPUSH
71208: CALL_OW 272
71212: PUSH
71213: LD_VAR 0 8
71217: PPUSH
71218: LD_INT 4
71220: PPUSH
71221: LD_INT 4
71223: PPUSH
71224: CALL_OW 273
71228: PUSH
71229: EMPTY
71230: LIST
71231: LIST
71232: PUSH
71233: LD_VAR 0 7
71237: PPUSH
71238: LD_INT 5
71240: PPUSH
71241: LD_INT 4
71243: PPUSH
71244: CALL_OW 272
71248: PUSH
71249: LD_VAR 0 8
71253: PPUSH
71254: LD_INT 5
71256: PPUSH
71257: LD_INT 4
71259: PPUSH
71260: CALL_OW 273
71264: PUSH
71265: EMPTY
71266: LIST
71267: LIST
71268: PUSH
71269: EMPTY
71270: LIST
71271: LIST
71272: LIST
71273: LIST
71274: LIST
71275: LIST
71276: ST_TO_ADDR
// for i = tmp downto 1 do
71277: LD_ADDR_VAR 0 4
71281: PUSH
71282: DOUBLE
71283: LD_VAR 0 6
71287: INC
71288: ST_TO_ADDR
71289: LD_INT 1
71291: PUSH
71292: FOR_DOWNTO
71293: IFFALSE 71394
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71295: LD_VAR 0 6
71299: PUSH
71300: LD_VAR 0 4
71304: ARRAY
71305: PUSH
71306: LD_INT 1
71308: ARRAY
71309: PPUSH
71310: LD_VAR 0 6
71314: PUSH
71315: LD_VAR 0 4
71319: ARRAY
71320: PUSH
71321: LD_INT 2
71323: ARRAY
71324: PPUSH
71325: CALL_OW 488
71329: NOT
71330: PUSH
71331: LD_VAR 0 6
71335: PUSH
71336: LD_VAR 0 4
71340: ARRAY
71341: PUSH
71342: LD_INT 1
71344: ARRAY
71345: PPUSH
71346: LD_VAR 0 6
71350: PUSH
71351: LD_VAR 0 4
71355: ARRAY
71356: PUSH
71357: LD_INT 2
71359: ARRAY
71360: PPUSH
71361: CALL_OW 428
71365: PUSH
71366: LD_INT 0
71368: NONEQUAL
71369: OR
71370: IFFALSE 71392
// tmp := Delete ( tmp , i ) ;
71372: LD_ADDR_VAR 0 6
71376: PUSH
71377: LD_VAR 0 6
71381: PPUSH
71382: LD_VAR 0 4
71386: PPUSH
71387: CALL_OW 3
71391: ST_TO_ADDR
71392: GO 71292
71394: POP
71395: POP
// j := GetClosestHex ( unit , tmp ) ;
71396: LD_ADDR_VAR 0 5
71400: PUSH
71401: LD_VAR 0 1
71405: PPUSH
71406: LD_VAR 0 6
71410: PPUSH
71411: CALL 70687 0 2
71415: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71416: LD_VAR 0 1
71420: PPUSH
71421: LD_VAR 0 5
71425: PUSH
71426: LD_INT 1
71428: ARRAY
71429: PPUSH
71430: LD_VAR 0 5
71434: PUSH
71435: LD_INT 2
71437: ARRAY
71438: PPUSH
71439: CALL_OW 111
// end ;
71443: LD_VAR 0 3
71447: RET
// export function PrepareApemanSoldier ( ) ; begin
71448: LD_INT 0
71450: PPUSH
// uc_nation := 0 ;
71451: LD_ADDR_OWVAR 21
71455: PUSH
71456: LD_INT 0
71458: ST_TO_ADDR
// hc_sex := sex_male ;
71459: LD_ADDR_OWVAR 27
71463: PUSH
71464: LD_INT 1
71466: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
71467: LD_ADDR_OWVAR 28
71471: PUSH
71472: LD_INT 15
71474: ST_TO_ADDR
// hc_gallery :=  ;
71475: LD_ADDR_OWVAR 33
71479: PUSH
71480: LD_STRING 
71482: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71483: LD_ADDR_OWVAR 31
71487: PUSH
71488: LD_INT 0
71490: PPUSH
71491: LD_INT 3
71493: PPUSH
71494: CALL_OW 12
71498: PUSH
71499: LD_INT 0
71501: PPUSH
71502: LD_INT 3
71504: PPUSH
71505: CALL_OW 12
71509: PUSH
71510: LD_INT 0
71512: PUSH
71513: LD_INT 0
71515: PUSH
71516: EMPTY
71517: LIST
71518: LIST
71519: LIST
71520: LIST
71521: ST_TO_ADDR
// end ;
71522: LD_VAR 0 1
71526: RET
// export function PrepareApemanEngineer ( ) ; begin
71527: LD_INT 0
71529: PPUSH
// uc_nation := 0 ;
71530: LD_ADDR_OWVAR 21
71534: PUSH
71535: LD_INT 0
71537: ST_TO_ADDR
// hc_sex := sex_male ;
71538: LD_ADDR_OWVAR 27
71542: PUSH
71543: LD_INT 1
71545: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
71546: LD_ADDR_OWVAR 28
71550: PUSH
71551: LD_INT 16
71553: ST_TO_ADDR
// hc_gallery :=  ;
71554: LD_ADDR_OWVAR 33
71558: PUSH
71559: LD_STRING 
71561: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71562: LD_ADDR_OWVAR 31
71566: PUSH
71567: LD_INT 0
71569: PPUSH
71570: LD_INT 3
71572: PPUSH
71573: CALL_OW 12
71577: PUSH
71578: LD_INT 0
71580: PPUSH
71581: LD_INT 3
71583: PPUSH
71584: CALL_OW 12
71588: PUSH
71589: LD_INT 0
71591: PUSH
71592: LD_INT 0
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: LIST
71599: LIST
71600: ST_TO_ADDR
// end ;
71601: LD_VAR 0 1
71605: RET
// export function PrepareApeman ( agressivity ) ; begin
71606: LD_INT 0
71608: PPUSH
// uc_side := 0 ;
71609: LD_ADDR_OWVAR 20
71613: PUSH
71614: LD_INT 0
71616: ST_TO_ADDR
// uc_nation := 0 ;
71617: LD_ADDR_OWVAR 21
71621: PUSH
71622: LD_INT 0
71624: ST_TO_ADDR
// hc_sex := sex_male ;
71625: LD_ADDR_OWVAR 27
71629: PUSH
71630: LD_INT 1
71632: ST_TO_ADDR
// hc_class := class_apeman ;
71633: LD_ADDR_OWVAR 28
71637: PUSH
71638: LD_INT 12
71640: ST_TO_ADDR
// hc_gallery :=  ;
71641: LD_ADDR_OWVAR 33
71645: PUSH
71646: LD_STRING 
71648: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71649: LD_ADDR_OWVAR 35
71653: PUSH
71654: LD_VAR 0 1
71658: NEG
71659: PPUSH
71660: LD_VAR 0 1
71664: PPUSH
71665: CALL_OW 12
71669: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71670: LD_ADDR_OWVAR 31
71674: PUSH
71675: LD_INT 0
71677: PPUSH
71678: LD_INT 3
71680: PPUSH
71681: CALL_OW 12
71685: PUSH
71686: LD_INT 0
71688: PPUSH
71689: LD_INT 3
71691: PPUSH
71692: CALL_OW 12
71696: PUSH
71697: LD_INT 0
71699: PUSH
71700: LD_INT 0
71702: PUSH
71703: EMPTY
71704: LIST
71705: LIST
71706: LIST
71707: LIST
71708: ST_TO_ADDR
// end ;
71709: LD_VAR 0 2
71713: RET
// export function PrepareTiger ( agressivity ) ; begin
71714: LD_INT 0
71716: PPUSH
// uc_side := 0 ;
71717: LD_ADDR_OWVAR 20
71721: PUSH
71722: LD_INT 0
71724: ST_TO_ADDR
// uc_nation := 0 ;
71725: LD_ADDR_OWVAR 21
71729: PUSH
71730: LD_INT 0
71732: ST_TO_ADDR
// hc_class := class_tiger ;
71733: LD_ADDR_OWVAR 28
71737: PUSH
71738: LD_INT 14
71740: ST_TO_ADDR
// hc_gallery :=  ;
71741: LD_ADDR_OWVAR 33
71745: PUSH
71746: LD_STRING 
71748: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71749: LD_ADDR_OWVAR 35
71753: PUSH
71754: LD_VAR 0 1
71758: NEG
71759: PPUSH
71760: LD_VAR 0 1
71764: PPUSH
71765: CALL_OW 12
71769: ST_TO_ADDR
// end ;
71770: LD_VAR 0 2
71774: RET
// export function PrepareEnchidna ( ) ; begin
71775: LD_INT 0
71777: PPUSH
// uc_side := 0 ;
71778: LD_ADDR_OWVAR 20
71782: PUSH
71783: LD_INT 0
71785: ST_TO_ADDR
// uc_nation := 0 ;
71786: LD_ADDR_OWVAR 21
71790: PUSH
71791: LD_INT 0
71793: ST_TO_ADDR
// hc_class := class_baggie ;
71794: LD_ADDR_OWVAR 28
71798: PUSH
71799: LD_INT 13
71801: ST_TO_ADDR
// hc_gallery :=  ;
71802: LD_ADDR_OWVAR 33
71806: PUSH
71807: LD_STRING 
71809: ST_TO_ADDR
// end ;
71810: LD_VAR 0 1
71814: RET
// export function PrepareFrog ( ) ; begin
71815: LD_INT 0
71817: PPUSH
// uc_side := 0 ;
71818: LD_ADDR_OWVAR 20
71822: PUSH
71823: LD_INT 0
71825: ST_TO_ADDR
// uc_nation := 0 ;
71826: LD_ADDR_OWVAR 21
71830: PUSH
71831: LD_INT 0
71833: ST_TO_ADDR
// hc_class := class_frog ;
71834: LD_ADDR_OWVAR 28
71838: PUSH
71839: LD_INT 19
71841: ST_TO_ADDR
// hc_gallery :=  ;
71842: LD_ADDR_OWVAR 33
71846: PUSH
71847: LD_STRING 
71849: ST_TO_ADDR
// end ;
71850: LD_VAR 0 1
71854: RET
// export function PrepareFish ( ) ; begin
71855: LD_INT 0
71857: PPUSH
// uc_side := 0 ;
71858: LD_ADDR_OWVAR 20
71862: PUSH
71863: LD_INT 0
71865: ST_TO_ADDR
// uc_nation := 0 ;
71866: LD_ADDR_OWVAR 21
71870: PUSH
71871: LD_INT 0
71873: ST_TO_ADDR
// hc_class := class_fish ;
71874: LD_ADDR_OWVAR 28
71878: PUSH
71879: LD_INT 20
71881: ST_TO_ADDR
// hc_gallery :=  ;
71882: LD_ADDR_OWVAR 33
71886: PUSH
71887: LD_STRING 
71889: ST_TO_ADDR
// end ;
71890: LD_VAR 0 1
71894: RET
// export function PrepareBird ( ) ; begin
71895: LD_INT 0
71897: PPUSH
// uc_side := 0 ;
71898: LD_ADDR_OWVAR 20
71902: PUSH
71903: LD_INT 0
71905: ST_TO_ADDR
// uc_nation := 0 ;
71906: LD_ADDR_OWVAR 21
71910: PUSH
71911: LD_INT 0
71913: ST_TO_ADDR
// hc_class := class_phororhacos ;
71914: LD_ADDR_OWVAR 28
71918: PUSH
71919: LD_INT 18
71921: ST_TO_ADDR
// hc_gallery :=  ;
71922: LD_ADDR_OWVAR 33
71926: PUSH
71927: LD_STRING 
71929: ST_TO_ADDR
// end ;
71930: LD_VAR 0 1
71934: RET
// export function PrepareHorse ( ) ; begin
71935: LD_INT 0
71937: PPUSH
// uc_side := 0 ;
71938: LD_ADDR_OWVAR 20
71942: PUSH
71943: LD_INT 0
71945: ST_TO_ADDR
// uc_nation := 0 ;
71946: LD_ADDR_OWVAR 21
71950: PUSH
71951: LD_INT 0
71953: ST_TO_ADDR
// hc_class := class_horse ;
71954: LD_ADDR_OWVAR 28
71958: PUSH
71959: LD_INT 21
71961: ST_TO_ADDR
// hc_gallery :=  ;
71962: LD_ADDR_OWVAR 33
71966: PUSH
71967: LD_STRING 
71969: ST_TO_ADDR
// end ;
71970: LD_VAR 0 1
71974: RET
// export function PrepareMastodont ( ) ; begin
71975: LD_INT 0
71977: PPUSH
// uc_side := 0 ;
71978: LD_ADDR_OWVAR 20
71982: PUSH
71983: LD_INT 0
71985: ST_TO_ADDR
// uc_nation := 0 ;
71986: LD_ADDR_OWVAR 21
71990: PUSH
71991: LD_INT 0
71993: ST_TO_ADDR
// vc_chassis := class_mastodont ;
71994: LD_ADDR_OWVAR 37
71998: PUSH
71999: LD_INT 31
72001: ST_TO_ADDR
// vc_control := control_rider ;
72002: LD_ADDR_OWVAR 38
72006: PUSH
72007: LD_INT 4
72009: ST_TO_ADDR
// end ;
72010: LD_VAR 0 1
72014: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72015: LD_INT 0
72017: PPUSH
72018: PPUSH
72019: PPUSH
// uc_side = 0 ;
72020: LD_ADDR_OWVAR 20
72024: PUSH
72025: LD_INT 0
72027: ST_TO_ADDR
// uc_nation = 0 ;
72028: LD_ADDR_OWVAR 21
72032: PUSH
72033: LD_INT 0
72035: ST_TO_ADDR
// InitHc_All ( ) ;
72036: CALL_OW 584
// InitVc ;
72040: CALL_OW 20
// if mastodonts then
72044: LD_VAR 0 6
72048: IFFALSE 72115
// for i = 1 to mastodonts do
72050: LD_ADDR_VAR 0 11
72054: PUSH
72055: DOUBLE
72056: LD_INT 1
72058: DEC
72059: ST_TO_ADDR
72060: LD_VAR 0 6
72064: PUSH
72065: FOR_TO
72066: IFFALSE 72113
// begin vc_chassis := 31 ;
72068: LD_ADDR_OWVAR 37
72072: PUSH
72073: LD_INT 31
72075: ST_TO_ADDR
// vc_control := control_rider ;
72076: LD_ADDR_OWVAR 38
72080: PUSH
72081: LD_INT 4
72083: ST_TO_ADDR
// animal := CreateVehicle ;
72084: LD_ADDR_VAR 0 12
72088: PUSH
72089: CALL_OW 45
72093: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72094: LD_VAR 0 12
72098: PPUSH
72099: LD_VAR 0 8
72103: PPUSH
72104: LD_INT 0
72106: PPUSH
72107: CALL 74243 0 3
// end ;
72111: GO 72065
72113: POP
72114: POP
// if horses then
72115: LD_VAR 0 5
72119: IFFALSE 72186
// for i = 1 to horses do
72121: LD_ADDR_VAR 0 11
72125: PUSH
72126: DOUBLE
72127: LD_INT 1
72129: DEC
72130: ST_TO_ADDR
72131: LD_VAR 0 5
72135: PUSH
72136: FOR_TO
72137: IFFALSE 72184
// begin hc_class := 21 ;
72139: LD_ADDR_OWVAR 28
72143: PUSH
72144: LD_INT 21
72146: ST_TO_ADDR
// hc_gallery :=  ;
72147: LD_ADDR_OWVAR 33
72151: PUSH
72152: LD_STRING 
72154: ST_TO_ADDR
// animal := CreateHuman ;
72155: LD_ADDR_VAR 0 12
72159: PUSH
72160: CALL_OW 44
72164: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72165: LD_VAR 0 12
72169: PPUSH
72170: LD_VAR 0 8
72174: PPUSH
72175: LD_INT 0
72177: PPUSH
72178: CALL 74243 0 3
// end ;
72182: GO 72136
72184: POP
72185: POP
// if birds then
72186: LD_VAR 0 1
72190: IFFALSE 72257
// for i = 1 to birds do
72192: LD_ADDR_VAR 0 11
72196: PUSH
72197: DOUBLE
72198: LD_INT 1
72200: DEC
72201: ST_TO_ADDR
72202: LD_VAR 0 1
72206: PUSH
72207: FOR_TO
72208: IFFALSE 72255
// begin hc_class := 18 ;
72210: LD_ADDR_OWVAR 28
72214: PUSH
72215: LD_INT 18
72217: ST_TO_ADDR
// hc_gallery =  ;
72218: LD_ADDR_OWVAR 33
72222: PUSH
72223: LD_STRING 
72225: ST_TO_ADDR
// animal := CreateHuman ;
72226: LD_ADDR_VAR 0 12
72230: PUSH
72231: CALL_OW 44
72235: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72236: LD_VAR 0 12
72240: PPUSH
72241: LD_VAR 0 8
72245: PPUSH
72246: LD_INT 0
72248: PPUSH
72249: CALL 74243 0 3
// end ;
72253: GO 72207
72255: POP
72256: POP
// if tigers then
72257: LD_VAR 0 2
72261: IFFALSE 72345
// for i = 1 to tigers do
72263: LD_ADDR_VAR 0 11
72267: PUSH
72268: DOUBLE
72269: LD_INT 1
72271: DEC
72272: ST_TO_ADDR
72273: LD_VAR 0 2
72277: PUSH
72278: FOR_TO
72279: IFFALSE 72343
// begin hc_class = class_tiger ;
72281: LD_ADDR_OWVAR 28
72285: PUSH
72286: LD_INT 14
72288: ST_TO_ADDR
// hc_gallery =  ;
72289: LD_ADDR_OWVAR 33
72293: PUSH
72294: LD_STRING 
72296: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72297: LD_ADDR_OWVAR 35
72301: PUSH
72302: LD_INT 7
72304: NEG
72305: PPUSH
72306: LD_INT 7
72308: PPUSH
72309: CALL_OW 12
72313: ST_TO_ADDR
// animal := CreateHuman ;
72314: LD_ADDR_VAR 0 12
72318: PUSH
72319: CALL_OW 44
72323: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72324: LD_VAR 0 12
72328: PPUSH
72329: LD_VAR 0 8
72333: PPUSH
72334: LD_INT 0
72336: PPUSH
72337: CALL 74243 0 3
// end ;
72341: GO 72278
72343: POP
72344: POP
// if apemans then
72345: LD_VAR 0 3
72349: IFFALSE 72472
// for i = 1 to apemans do
72351: LD_ADDR_VAR 0 11
72355: PUSH
72356: DOUBLE
72357: LD_INT 1
72359: DEC
72360: ST_TO_ADDR
72361: LD_VAR 0 3
72365: PUSH
72366: FOR_TO
72367: IFFALSE 72470
// begin hc_class = class_apeman ;
72369: LD_ADDR_OWVAR 28
72373: PUSH
72374: LD_INT 12
72376: ST_TO_ADDR
// hc_gallery =  ;
72377: LD_ADDR_OWVAR 33
72381: PUSH
72382: LD_STRING 
72384: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72385: LD_ADDR_OWVAR 35
72389: PUSH
72390: LD_INT 2
72392: NEG
72393: PPUSH
72394: LD_INT 2
72396: PPUSH
72397: CALL_OW 12
72401: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72402: LD_ADDR_OWVAR 31
72406: PUSH
72407: LD_INT 1
72409: PPUSH
72410: LD_INT 3
72412: PPUSH
72413: CALL_OW 12
72417: PUSH
72418: LD_INT 1
72420: PPUSH
72421: LD_INT 3
72423: PPUSH
72424: CALL_OW 12
72428: PUSH
72429: LD_INT 0
72431: PUSH
72432: LD_INT 0
72434: PUSH
72435: EMPTY
72436: LIST
72437: LIST
72438: LIST
72439: LIST
72440: ST_TO_ADDR
// animal := CreateHuman ;
72441: LD_ADDR_VAR 0 12
72445: PUSH
72446: CALL_OW 44
72450: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72451: LD_VAR 0 12
72455: PPUSH
72456: LD_VAR 0 8
72460: PPUSH
72461: LD_INT 0
72463: PPUSH
72464: CALL 74243 0 3
// end ;
72468: GO 72366
72470: POP
72471: POP
// if enchidnas then
72472: LD_VAR 0 4
72476: IFFALSE 72543
// for i = 1 to enchidnas do
72478: LD_ADDR_VAR 0 11
72482: PUSH
72483: DOUBLE
72484: LD_INT 1
72486: DEC
72487: ST_TO_ADDR
72488: LD_VAR 0 4
72492: PUSH
72493: FOR_TO
72494: IFFALSE 72541
// begin hc_class = 13 ;
72496: LD_ADDR_OWVAR 28
72500: PUSH
72501: LD_INT 13
72503: ST_TO_ADDR
// hc_gallery =  ;
72504: LD_ADDR_OWVAR 33
72508: PUSH
72509: LD_STRING 
72511: ST_TO_ADDR
// animal := CreateHuman ;
72512: LD_ADDR_VAR 0 12
72516: PUSH
72517: CALL_OW 44
72521: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72522: LD_VAR 0 12
72526: PPUSH
72527: LD_VAR 0 8
72531: PPUSH
72532: LD_INT 0
72534: PPUSH
72535: CALL 74243 0 3
// end ;
72539: GO 72493
72541: POP
72542: POP
// if fishes then
72543: LD_VAR 0 7
72547: IFFALSE 72614
// for i = 1 to fishes do
72549: LD_ADDR_VAR 0 11
72553: PUSH
72554: DOUBLE
72555: LD_INT 1
72557: DEC
72558: ST_TO_ADDR
72559: LD_VAR 0 7
72563: PUSH
72564: FOR_TO
72565: IFFALSE 72612
// begin hc_class = 20 ;
72567: LD_ADDR_OWVAR 28
72571: PUSH
72572: LD_INT 20
72574: ST_TO_ADDR
// hc_gallery =  ;
72575: LD_ADDR_OWVAR 33
72579: PUSH
72580: LD_STRING 
72582: ST_TO_ADDR
// animal := CreateHuman ;
72583: LD_ADDR_VAR 0 12
72587: PUSH
72588: CALL_OW 44
72592: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72593: LD_VAR 0 12
72597: PPUSH
72598: LD_VAR 0 9
72602: PPUSH
72603: LD_INT 0
72605: PPUSH
72606: CALL 74243 0 3
// end ;
72610: GO 72564
72612: POP
72613: POP
// end ;
72614: LD_VAR 0 10
72618: RET
// export function WantHeal ( sci , unit ) ; begin
72619: LD_INT 0
72621: PPUSH
// if GetTaskList ( sci ) > 0 then
72622: LD_VAR 0 1
72626: PPUSH
72627: CALL_OW 437
72631: PUSH
72632: LD_INT 0
72634: GREATER
72635: IFFALSE 72705
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72637: LD_VAR 0 1
72641: PPUSH
72642: CALL_OW 437
72646: PUSH
72647: LD_INT 1
72649: ARRAY
72650: PUSH
72651: LD_INT 1
72653: ARRAY
72654: PUSH
72655: LD_STRING l
72657: EQUAL
72658: PUSH
72659: LD_VAR 0 1
72663: PPUSH
72664: CALL_OW 437
72668: PUSH
72669: LD_INT 1
72671: ARRAY
72672: PUSH
72673: LD_INT 4
72675: ARRAY
72676: PUSH
72677: LD_VAR 0 2
72681: EQUAL
72682: AND
72683: IFFALSE 72695
// result := true else
72685: LD_ADDR_VAR 0 3
72689: PUSH
72690: LD_INT 1
72692: ST_TO_ADDR
72693: GO 72703
// result := false ;
72695: LD_ADDR_VAR 0 3
72699: PUSH
72700: LD_INT 0
72702: ST_TO_ADDR
// end else
72703: GO 72713
// result := false ;
72705: LD_ADDR_VAR 0 3
72709: PUSH
72710: LD_INT 0
72712: ST_TO_ADDR
// end ;
72713: LD_VAR 0 3
72717: RET
// export function HealTarget ( sci ) ; begin
72718: LD_INT 0
72720: PPUSH
// if not sci then
72721: LD_VAR 0 1
72725: NOT
72726: IFFALSE 72730
// exit ;
72728: GO 72795
// result := 0 ;
72730: LD_ADDR_VAR 0 2
72734: PUSH
72735: LD_INT 0
72737: ST_TO_ADDR
// if GetTaskList ( sci ) then
72738: LD_VAR 0 1
72742: PPUSH
72743: CALL_OW 437
72747: IFFALSE 72795
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72749: LD_VAR 0 1
72753: PPUSH
72754: CALL_OW 437
72758: PUSH
72759: LD_INT 1
72761: ARRAY
72762: PUSH
72763: LD_INT 1
72765: ARRAY
72766: PUSH
72767: LD_STRING l
72769: EQUAL
72770: IFFALSE 72795
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72772: LD_ADDR_VAR 0 2
72776: PUSH
72777: LD_VAR 0 1
72781: PPUSH
72782: CALL_OW 437
72786: PUSH
72787: LD_INT 1
72789: ARRAY
72790: PUSH
72791: LD_INT 4
72793: ARRAY
72794: ST_TO_ADDR
// end ;
72795: LD_VAR 0 2
72799: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72800: LD_INT 0
72802: PPUSH
72803: PPUSH
72804: PPUSH
72805: PPUSH
// if not base_units then
72806: LD_VAR 0 1
72810: NOT
72811: IFFALSE 72815
// exit ;
72813: GO 72902
// result := false ;
72815: LD_ADDR_VAR 0 2
72819: PUSH
72820: LD_INT 0
72822: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72823: LD_ADDR_VAR 0 5
72827: PUSH
72828: LD_VAR 0 1
72832: PPUSH
72833: LD_INT 21
72835: PUSH
72836: LD_INT 3
72838: PUSH
72839: EMPTY
72840: LIST
72841: LIST
72842: PPUSH
72843: CALL_OW 72
72847: ST_TO_ADDR
// if not tmp then
72848: LD_VAR 0 5
72852: NOT
72853: IFFALSE 72857
// exit ;
72855: GO 72902
// for i in tmp do
72857: LD_ADDR_VAR 0 3
72861: PUSH
72862: LD_VAR 0 5
72866: PUSH
72867: FOR_IN
72868: IFFALSE 72900
// begin result := EnemyInRange ( i , 22 ) ;
72870: LD_ADDR_VAR 0 2
72874: PUSH
72875: LD_VAR 0 3
72879: PPUSH
72880: LD_INT 22
72882: PPUSH
72883: CALL 70489 0 2
72887: ST_TO_ADDR
// if result then
72888: LD_VAR 0 2
72892: IFFALSE 72898
// exit ;
72894: POP
72895: POP
72896: GO 72902
// end ;
72898: GO 72867
72900: POP
72901: POP
// end ;
72902: LD_VAR 0 2
72906: RET
// export function FilterByTag ( units , tag ) ; begin
72907: LD_INT 0
72909: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
72910: LD_ADDR_VAR 0 3
72914: PUSH
72915: LD_VAR 0 1
72919: PPUSH
72920: LD_INT 120
72922: PUSH
72923: LD_VAR 0 2
72927: PUSH
72928: EMPTY
72929: LIST
72930: LIST
72931: PPUSH
72932: CALL_OW 72
72936: ST_TO_ADDR
// end ;
72937: LD_VAR 0 3
72941: RET
// export function IsDriver ( un ) ; begin
72942: LD_INT 0
72944: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72945: LD_ADDR_VAR 0 2
72949: PUSH
72950: LD_VAR 0 1
72954: PUSH
72955: LD_INT 55
72957: PUSH
72958: EMPTY
72959: LIST
72960: PPUSH
72961: CALL_OW 69
72965: IN
72966: ST_TO_ADDR
// end ;
72967: LD_VAR 0 2
72971: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72972: LD_INT 0
72974: PPUSH
72975: PPUSH
// list := [ ] ;
72976: LD_ADDR_VAR 0 5
72980: PUSH
72981: EMPTY
72982: ST_TO_ADDR
// case d of 0 :
72983: LD_VAR 0 3
72987: PUSH
72988: LD_INT 0
72990: DOUBLE
72991: EQUAL
72992: IFTRUE 72996
72994: GO 73129
72996: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72997: LD_ADDR_VAR 0 5
73001: PUSH
73002: LD_VAR 0 1
73006: PUSH
73007: LD_INT 4
73009: MINUS
73010: PUSH
73011: LD_VAR 0 2
73015: PUSH
73016: LD_INT 4
73018: MINUS
73019: PUSH
73020: LD_INT 2
73022: PUSH
73023: EMPTY
73024: LIST
73025: LIST
73026: LIST
73027: PUSH
73028: LD_VAR 0 1
73032: PUSH
73033: LD_INT 3
73035: MINUS
73036: PUSH
73037: LD_VAR 0 2
73041: PUSH
73042: LD_INT 1
73044: PUSH
73045: EMPTY
73046: LIST
73047: LIST
73048: LIST
73049: PUSH
73050: LD_VAR 0 1
73054: PUSH
73055: LD_INT 4
73057: PLUS
73058: PUSH
73059: LD_VAR 0 2
73063: PUSH
73064: LD_INT 4
73066: PUSH
73067: EMPTY
73068: LIST
73069: LIST
73070: LIST
73071: PUSH
73072: LD_VAR 0 1
73076: PUSH
73077: LD_INT 3
73079: PLUS
73080: PUSH
73081: LD_VAR 0 2
73085: PUSH
73086: LD_INT 3
73088: PLUS
73089: PUSH
73090: LD_INT 5
73092: PUSH
73093: EMPTY
73094: LIST
73095: LIST
73096: LIST
73097: PUSH
73098: LD_VAR 0 1
73102: PUSH
73103: LD_VAR 0 2
73107: PUSH
73108: LD_INT 4
73110: PLUS
73111: PUSH
73112: LD_INT 0
73114: PUSH
73115: EMPTY
73116: LIST
73117: LIST
73118: LIST
73119: PUSH
73120: EMPTY
73121: LIST
73122: LIST
73123: LIST
73124: LIST
73125: LIST
73126: ST_TO_ADDR
// end ; 1 :
73127: GO 73827
73129: LD_INT 1
73131: DOUBLE
73132: EQUAL
73133: IFTRUE 73137
73135: GO 73270
73137: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73138: LD_ADDR_VAR 0 5
73142: PUSH
73143: LD_VAR 0 1
73147: PUSH
73148: LD_VAR 0 2
73152: PUSH
73153: LD_INT 4
73155: MINUS
73156: PUSH
73157: LD_INT 3
73159: PUSH
73160: EMPTY
73161: LIST
73162: LIST
73163: LIST
73164: PUSH
73165: LD_VAR 0 1
73169: PUSH
73170: LD_INT 3
73172: MINUS
73173: PUSH
73174: LD_VAR 0 2
73178: PUSH
73179: LD_INT 3
73181: MINUS
73182: PUSH
73183: LD_INT 2
73185: PUSH
73186: EMPTY
73187: LIST
73188: LIST
73189: LIST
73190: PUSH
73191: LD_VAR 0 1
73195: PUSH
73196: LD_INT 4
73198: MINUS
73199: PUSH
73200: LD_VAR 0 2
73204: PUSH
73205: LD_INT 1
73207: PUSH
73208: EMPTY
73209: LIST
73210: LIST
73211: LIST
73212: PUSH
73213: LD_VAR 0 1
73217: PUSH
73218: LD_VAR 0 2
73222: PUSH
73223: LD_INT 3
73225: PLUS
73226: PUSH
73227: LD_INT 0
73229: PUSH
73230: EMPTY
73231: LIST
73232: LIST
73233: LIST
73234: PUSH
73235: LD_VAR 0 1
73239: PUSH
73240: LD_INT 4
73242: PLUS
73243: PUSH
73244: LD_VAR 0 2
73248: PUSH
73249: LD_INT 4
73251: PLUS
73252: PUSH
73253: LD_INT 5
73255: PUSH
73256: EMPTY
73257: LIST
73258: LIST
73259: LIST
73260: PUSH
73261: EMPTY
73262: LIST
73263: LIST
73264: LIST
73265: LIST
73266: LIST
73267: ST_TO_ADDR
// end ; 2 :
73268: GO 73827
73270: LD_INT 2
73272: DOUBLE
73273: EQUAL
73274: IFTRUE 73278
73276: GO 73407
73278: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73279: LD_ADDR_VAR 0 5
73283: PUSH
73284: LD_VAR 0 1
73288: PUSH
73289: LD_VAR 0 2
73293: PUSH
73294: LD_INT 3
73296: MINUS
73297: PUSH
73298: LD_INT 3
73300: PUSH
73301: EMPTY
73302: LIST
73303: LIST
73304: LIST
73305: PUSH
73306: LD_VAR 0 1
73310: PUSH
73311: LD_INT 4
73313: PLUS
73314: PUSH
73315: LD_VAR 0 2
73319: PUSH
73320: LD_INT 4
73322: PUSH
73323: EMPTY
73324: LIST
73325: LIST
73326: LIST
73327: PUSH
73328: LD_VAR 0 1
73332: PUSH
73333: LD_VAR 0 2
73337: PUSH
73338: LD_INT 4
73340: PLUS
73341: PUSH
73342: LD_INT 0
73344: PUSH
73345: EMPTY
73346: LIST
73347: LIST
73348: LIST
73349: PUSH
73350: LD_VAR 0 1
73354: PUSH
73355: LD_INT 3
73357: MINUS
73358: PUSH
73359: LD_VAR 0 2
73363: PUSH
73364: LD_INT 1
73366: PUSH
73367: EMPTY
73368: LIST
73369: LIST
73370: LIST
73371: PUSH
73372: LD_VAR 0 1
73376: PUSH
73377: LD_INT 4
73379: MINUS
73380: PUSH
73381: LD_VAR 0 2
73385: PUSH
73386: LD_INT 4
73388: MINUS
73389: PUSH
73390: LD_INT 2
73392: PUSH
73393: EMPTY
73394: LIST
73395: LIST
73396: LIST
73397: PUSH
73398: EMPTY
73399: LIST
73400: LIST
73401: LIST
73402: LIST
73403: LIST
73404: ST_TO_ADDR
// end ; 3 :
73405: GO 73827
73407: LD_INT 3
73409: DOUBLE
73410: EQUAL
73411: IFTRUE 73415
73413: GO 73548
73415: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73416: LD_ADDR_VAR 0 5
73420: PUSH
73421: LD_VAR 0 1
73425: PUSH
73426: LD_INT 3
73428: PLUS
73429: PUSH
73430: LD_VAR 0 2
73434: PUSH
73435: LD_INT 4
73437: PUSH
73438: EMPTY
73439: LIST
73440: LIST
73441: LIST
73442: PUSH
73443: LD_VAR 0 1
73447: PUSH
73448: LD_INT 4
73450: PLUS
73451: PUSH
73452: LD_VAR 0 2
73456: PUSH
73457: LD_INT 4
73459: PLUS
73460: PUSH
73461: LD_INT 5
73463: PUSH
73464: EMPTY
73465: LIST
73466: LIST
73467: LIST
73468: PUSH
73469: LD_VAR 0 1
73473: PUSH
73474: LD_INT 4
73476: MINUS
73477: PUSH
73478: LD_VAR 0 2
73482: PUSH
73483: LD_INT 1
73485: PUSH
73486: EMPTY
73487: LIST
73488: LIST
73489: LIST
73490: PUSH
73491: LD_VAR 0 1
73495: PUSH
73496: LD_VAR 0 2
73500: PUSH
73501: LD_INT 4
73503: MINUS
73504: PUSH
73505: LD_INT 3
73507: PUSH
73508: EMPTY
73509: LIST
73510: LIST
73511: LIST
73512: PUSH
73513: LD_VAR 0 1
73517: PUSH
73518: LD_INT 3
73520: MINUS
73521: PUSH
73522: LD_VAR 0 2
73526: PUSH
73527: LD_INT 3
73529: MINUS
73530: PUSH
73531: LD_INT 2
73533: PUSH
73534: EMPTY
73535: LIST
73536: LIST
73537: LIST
73538: PUSH
73539: EMPTY
73540: LIST
73541: LIST
73542: LIST
73543: LIST
73544: LIST
73545: ST_TO_ADDR
// end ; 4 :
73546: GO 73827
73548: LD_INT 4
73550: DOUBLE
73551: EQUAL
73552: IFTRUE 73556
73554: GO 73689
73556: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73557: LD_ADDR_VAR 0 5
73561: PUSH
73562: LD_VAR 0 1
73566: PUSH
73567: LD_VAR 0 2
73571: PUSH
73572: LD_INT 4
73574: PLUS
73575: PUSH
73576: LD_INT 0
73578: PUSH
73579: EMPTY
73580: LIST
73581: LIST
73582: LIST
73583: PUSH
73584: LD_VAR 0 1
73588: PUSH
73589: LD_INT 3
73591: PLUS
73592: PUSH
73593: LD_VAR 0 2
73597: PUSH
73598: LD_INT 3
73600: PLUS
73601: PUSH
73602: LD_INT 5
73604: PUSH
73605: EMPTY
73606: LIST
73607: LIST
73608: LIST
73609: PUSH
73610: LD_VAR 0 1
73614: PUSH
73615: LD_INT 4
73617: PLUS
73618: PUSH
73619: LD_VAR 0 2
73623: PUSH
73624: LD_INT 4
73626: PUSH
73627: EMPTY
73628: LIST
73629: LIST
73630: LIST
73631: PUSH
73632: LD_VAR 0 1
73636: PUSH
73637: LD_VAR 0 2
73641: PUSH
73642: LD_INT 3
73644: MINUS
73645: PUSH
73646: LD_INT 3
73648: PUSH
73649: EMPTY
73650: LIST
73651: LIST
73652: LIST
73653: PUSH
73654: LD_VAR 0 1
73658: PUSH
73659: LD_INT 4
73661: MINUS
73662: PUSH
73663: LD_VAR 0 2
73667: PUSH
73668: LD_INT 4
73670: MINUS
73671: PUSH
73672: LD_INT 2
73674: PUSH
73675: EMPTY
73676: LIST
73677: LIST
73678: LIST
73679: PUSH
73680: EMPTY
73681: LIST
73682: LIST
73683: LIST
73684: LIST
73685: LIST
73686: ST_TO_ADDR
// end ; 5 :
73687: GO 73827
73689: LD_INT 5
73691: DOUBLE
73692: EQUAL
73693: IFTRUE 73697
73695: GO 73826
73697: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73698: LD_ADDR_VAR 0 5
73702: PUSH
73703: LD_VAR 0 1
73707: PUSH
73708: LD_INT 4
73710: MINUS
73711: PUSH
73712: LD_VAR 0 2
73716: PUSH
73717: LD_INT 1
73719: PUSH
73720: EMPTY
73721: LIST
73722: LIST
73723: LIST
73724: PUSH
73725: LD_VAR 0 1
73729: PUSH
73730: LD_VAR 0 2
73734: PUSH
73735: LD_INT 4
73737: MINUS
73738: PUSH
73739: LD_INT 3
73741: PUSH
73742: EMPTY
73743: LIST
73744: LIST
73745: LIST
73746: PUSH
73747: LD_VAR 0 1
73751: PUSH
73752: LD_INT 4
73754: PLUS
73755: PUSH
73756: LD_VAR 0 2
73760: PUSH
73761: LD_INT 4
73763: PLUS
73764: PUSH
73765: LD_INT 5
73767: PUSH
73768: EMPTY
73769: LIST
73770: LIST
73771: LIST
73772: PUSH
73773: LD_VAR 0 1
73777: PUSH
73778: LD_INT 3
73780: PLUS
73781: PUSH
73782: LD_VAR 0 2
73786: PUSH
73787: LD_INT 4
73789: PUSH
73790: EMPTY
73791: LIST
73792: LIST
73793: LIST
73794: PUSH
73795: LD_VAR 0 1
73799: PUSH
73800: LD_VAR 0 2
73804: PUSH
73805: LD_INT 3
73807: PLUS
73808: PUSH
73809: LD_INT 0
73811: PUSH
73812: EMPTY
73813: LIST
73814: LIST
73815: LIST
73816: PUSH
73817: EMPTY
73818: LIST
73819: LIST
73820: LIST
73821: LIST
73822: LIST
73823: ST_TO_ADDR
// end ; end ;
73824: GO 73827
73826: POP
// result := list ;
73827: LD_ADDR_VAR 0 4
73831: PUSH
73832: LD_VAR 0 5
73836: ST_TO_ADDR
// end ;
73837: LD_VAR 0 4
73841: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73842: LD_INT 0
73844: PPUSH
73845: PPUSH
73846: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73847: LD_VAR 0 1
73851: NOT
73852: PUSH
73853: LD_VAR 0 2
73857: PUSH
73858: LD_INT 1
73860: PUSH
73861: LD_INT 2
73863: PUSH
73864: LD_INT 3
73866: PUSH
73867: LD_INT 4
73869: PUSH
73870: EMPTY
73871: LIST
73872: LIST
73873: LIST
73874: LIST
73875: IN
73876: NOT
73877: OR
73878: IFFALSE 73882
// exit ;
73880: GO 73965
// tmp := [ ] ;
73882: LD_ADDR_VAR 0 5
73886: PUSH
73887: EMPTY
73888: ST_TO_ADDR
// for i in units do
73889: LD_ADDR_VAR 0 4
73893: PUSH
73894: LD_VAR 0 1
73898: PUSH
73899: FOR_IN
73900: IFFALSE 73934
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
73902: LD_ADDR_VAR 0 5
73906: PUSH
73907: LD_VAR 0 5
73911: PPUSH
73912: LD_VAR 0 4
73916: PPUSH
73917: LD_VAR 0 2
73921: PPUSH
73922: CALL_OW 259
73926: PPUSH
73927: CALL 75338 0 2
73931: ST_TO_ADDR
73932: GO 73899
73934: POP
73935: POP
// if not tmp then
73936: LD_VAR 0 5
73940: NOT
73941: IFFALSE 73945
// exit ;
73943: GO 73965
// result := SortListByListDesc ( units , tmp ) ;
73945: LD_ADDR_VAR 0 3
73949: PUSH
73950: LD_VAR 0 1
73954: PPUSH
73955: LD_VAR 0 5
73959: PPUSH
73960: CALL_OW 77
73964: ST_TO_ADDR
// end ;
73965: LD_VAR 0 3
73969: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73970: LD_INT 0
73972: PPUSH
73973: PPUSH
73974: PPUSH
// result := false ;
73975: LD_ADDR_VAR 0 3
73979: PUSH
73980: LD_INT 0
73982: ST_TO_ADDR
// if not building then
73983: LD_VAR 0 2
73987: NOT
73988: IFFALSE 73992
// exit ;
73990: GO 74130
// x := GetX ( building ) ;
73992: LD_ADDR_VAR 0 4
73996: PUSH
73997: LD_VAR 0 2
74001: PPUSH
74002: CALL_OW 250
74006: ST_TO_ADDR
// y := GetY ( building ) ;
74007: LD_ADDR_VAR 0 5
74011: PUSH
74012: LD_VAR 0 2
74016: PPUSH
74017: CALL_OW 251
74021: ST_TO_ADDR
// if not x or not y then
74022: LD_VAR 0 4
74026: NOT
74027: PUSH
74028: LD_VAR 0 5
74032: NOT
74033: OR
74034: IFFALSE 74038
// exit ;
74036: GO 74130
// if GetTaskList ( unit ) then
74038: LD_VAR 0 1
74042: PPUSH
74043: CALL_OW 437
74047: IFFALSE 74130
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74049: LD_STRING e
74051: PUSH
74052: LD_VAR 0 1
74056: PPUSH
74057: CALL_OW 437
74061: PUSH
74062: LD_INT 1
74064: ARRAY
74065: PUSH
74066: LD_INT 1
74068: ARRAY
74069: EQUAL
74070: PUSH
74071: LD_VAR 0 4
74075: PUSH
74076: LD_VAR 0 1
74080: PPUSH
74081: CALL_OW 437
74085: PUSH
74086: LD_INT 1
74088: ARRAY
74089: PUSH
74090: LD_INT 2
74092: ARRAY
74093: EQUAL
74094: AND
74095: PUSH
74096: LD_VAR 0 5
74100: PUSH
74101: LD_VAR 0 1
74105: PPUSH
74106: CALL_OW 437
74110: PUSH
74111: LD_INT 1
74113: ARRAY
74114: PUSH
74115: LD_INT 3
74117: ARRAY
74118: EQUAL
74119: AND
74120: IFFALSE 74130
// result := true end ;
74122: LD_ADDR_VAR 0 3
74126: PUSH
74127: LD_INT 1
74129: ST_TO_ADDR
// end ;
74130: LD_VAR 0 3
74134: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74135: LD_INT 0
74137: PPUSH
// result := false ;
74138: LD_ADDR_VAR 0 4
74142: PUSH
74143: LD_INT 0
74145: ST_TO_ADDR
// if GetTaskList ( unit ) then
74146: LD_VAR 0 1
74150: PPUSH
74151: CALL_OW 437
74155: IFFALSE 74238
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74157: LD_STRING M
74159: PUSH
74160: LD_VAR 0 1
74164: PPUSH
74165: CALL_OW 437
74169: PUSH
74170: LD_INT 1
74172: ARRAY
74173: PUSH
74174: LD_INT 1
74176: ARRAY
74177: EQUAL
74178: PUSH
74179: LD_VAR 0 2
74183: PUSH
74184: LD_VAR 0 1
74188: PPUSH
74189: CALL_OW 437
74193: PUSH
74194: LD_INT 1
74196: ARRAY
74197: PUSH
74198: LD_INT 2
74200: ARRAY
74201: EQUAL
74202: AND
74203: PUSH
74204: LD_VAR 0 3
74208: PUSH
74209: LD_VAR 0 1
74213: PPUSH
74214: CALL_OW 437
74218: PUSH
74219: LD_INT 1
74221: ARRAY
74222: PUSH
74223: LD_INT 3
74225: ARRAY
74226: EQUAL
74227: AND
74228: IFFALSE 74238
// result := true ;
74230: LD_ADDR_VAR 0 4
74234: PUSH
74235: LD_INT 1
74237: ST_TO_ADDR
// end ; end ;
74238: LD_VAR 0 4
74242: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74243: LD_INT 0
74245: PPUSH
74246: PPUSH
74247: PPUSH
74248: PPUSH
// if not unit or not area then
74249: LD_VAR 0 1
74253: NOT
74254: PUSH
74255: LD_VAR 0 2
74259: NOT
74260: OR
74261: IFFALSE 74265
// exit ;
74263: GO 74441
// tmp := AreaToList ( area , i ) ;
74265: LD_ADDR_VAR 0 6
74269: PUSH
74270: LD_VAR 0 2
74274: PPUSH
74275: LD_VAR 0 5
74279: PPUSH
74280: CALL_OW 517
74284: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74285: LD_ADDR_VAR 0 5
74289: PUSH
74290: DOUBLE
74291: LD_INT 1
74293: DEC
74294: ST_TO_ADDR
74295: LD_VAR 0 6
74299: PUSH
74300: LD_INT 1
74302: ARRAY
74303: PUSH
74304: FOR_TO
74305: IFFALSE 74439
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74307: LD_ADDR_VAR 0 7
74311: PUSH
74312: LD_VAR 0 6
74316: PUSH
74317: LD_INT 1
74319: ARRAY
74320: PUSH
74321: LD_VAR 0 5
74325: ARRAY
74326: PUSH
74327: LD_VAR 0 6
74331: PUSH
74332: LD_INT 2
74334: ARRAY
74335: PUSH
74336: LD_VAR 0 5
74340: ARRAY
74341: PUSH
74342: EMPTY
74343: LIST
74344: LIST
74345: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
74346: LD_INT 92
74348: PUSH
74349: LD_VAR 0 7
74353: PUSH
74354: LD_INT 1
74356: ARRAY
74357: PUSH
74358: LD_VAR 0 7
74362: PUSH
74363: LD_INT 2
74365: ARRAY
74366: PUSH
74367: LD_INT 2
74369: PUSH
74370: EMPTY
74371: LIST
74372: LIST
74373: LIST
74374: LIST
74375: PPUSH
74376: CALL_OW 69
74380: PUSH
74381: LD_INT 0
74383: EQUAL
74384: IFFALSE 74437
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74386: LD_VAR 0 1
74390: PPUSH
74391: LD_VAR 0 7
74395: PUSH
74396: LD_INT 1
74398: ARRAY
74399: PPUSH
74400: LD_VAR 0 7
74404: PUSH
74405: LD_INT 2
74407: ARRAY
74408: PPUSH
74409: LD_VAR 0 3
74413: PPUSH
74414: CALL_OW 48
// result := IsPlaced ( unit ) ;
74418: LD_ADDR_VAR 0 4
74422: PUSH
74423: LD_VAR 0 1
74427: PPUSH
74428: CALL_OW 305
74432: ST_TO_ADDR
// exit ;
74433: POP
74434: POP
74435: GO 74441
// end ; end ;
74437: GO 74304
74439: POP
74440: POP
// end ;
74441: LD_VAR 0 4
74445: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74446: LD_INT 0
74448: PPUSH
74449: PPUSH
74450: PPUSH
// if not side or side > 8 then
74451: LD_VAR 0 1
74455: NOT
74456: PUSH
74457: LD_VAR 0 1
74461: PUSH
74462: LD_INT 8
74464: GREATER
74465: OR
74466: IFFALSE 74470
// exit ;
74468: GO 74657
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74470: LD_ADDR_VAR 0 4
74474: PUSH
74475: LD_INT 22
74477: PUSH
74478: LD_VAR 0 1
74482: PUSH
74483: EMPTY
74484: LIST
74485: LIST
74486: PUSH
74487: LD_INT 21
74489: PUSH
74490: LD_INT 3
74492: PUSH
74493: EMPTY
74494: LIST
74495: LIST
74496: PUSH
74497: EMPTY
74498: LIST
74499: LIST
74500: PPUSH
74501: CALL_OW 69
74505: ST_TO_ADDR
// if not tmp then
74506: LD_VAR 0 4
74510: NOT
74511: IFFALSE 74515
// exit ;
74513: GO 74657
// enable_addtolog := true ;
74515: LD_ADDR_OWVAR 81
74519: PUSH
74520: LD_INT 1
74522: ST_TO_ADDR
// AddToLog ( [ ) ;
74523: LD_STRING [
74525: PPUSH
74526: CALL_OW 561
// for i in tmp do
74530: LD_ADDR_VAR 0 3
74534: PUSH
74535: LD_VAR 0 4
74539: PUSH
74540: FOR_IN
74541: IFFALSE 74648
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74543: LD_STRING [
74545: PUSH
74546: LD_VAR 0 3
74550: PPUSH
74551: CALL_OW 266
74555: STR
74556: PUSH
74557: LD_STRING , 
74559: STR
74560: PUSH
74561: LD_VAR 0 3
74565: PPUSH
74566: CALL_OW 250
74570: STR
74571: PUSH
74572: LD_STRING , 
74574: STR
74575: PUSH
74576: LD_VAR 0 3
74580: PPUSH
74581: CALL_OW 251
74585: STR
74586: PUSH
74587: LD_STRING , 
74589: STR
74590: PUSH
74591: LD_VAR 0 3
74595: PPUSH
74596: CALL_OW 254
74600: STR
74601: PUSH
74602: LD_STRING , 
74604: STR
74605: PUSH
74606: LD_VAR 0 3
74610: PPUSH
74611: LD_INT 1
74613: PPUSH
74614: CALL_OW 268
74618: STR
74619: PUSH
74620: LD_STRING , 
74622: STR
74623: PUSH
74624: LD_VAR 0 3
74628: PPUSH
74629: LD_INT 2
74631: PPUSH
74632: CALL_OW 268
74636: STR
74637: PUSH
74638: LD_STRING ],
74640: STR
74641: PPUSH
74642: CALL_OW 561
// end ;
74646: GO 74540
74648: POP
74649: POP
// AddToLog ( ]; ) ;
74650: LD_STRING ];
74652: PPUSH
74653: CALL_OW 561
// end ;
74657: LD_VAR 0 2
74661: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74662: LD_INT 0
74664: PPUSH
74665: PPUSH
74666: PPUSH
74667: PPUSH
74668: PPUSH
// if not area or not rate or not max then
74669: LD_VAR 0 1
74673: NOT
74674: PUSH
74675: LD_VAR 0 2
74679: NOT
74680: OR
74681: PUSH
74682: LD_VAR 0 4
74686: NOT
74687: OR
74688: IFFALSE 74692
// exit ;
74690: GO 74881
// while 1 do
74692: LD_INT 1
74694: IFFALSE 74881
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74696: LD_ADDR_VAR 0 9
74700: PUSH
74701: LD_VAR 0 1
74705: PPUSH
74706: LD_INT 1
74708: PPUSH
74709: CALL_OW 287
74713: PUSH
74714: LD_INT 10
74716: MUL
74717: ST_TO_ADDR
// r := rate / 10 ;
74718: LD_ADDR_VAR 0 7
74722: PUSH
74723: LD_VAR 0 2
74727: PUSH
74728: LD_INT 10
74730: DIVREAL
74731: ST_TO_ADDR
// time := 1 1$00 ;
74732: LD_ADDR_VAR 0 8
74736: PUSH
74737: LD_INT 2100
74739: ST_TO_ADDR
// if amount < min then
74740: LD_VAR 0 9
74744: PUSH
74745: LD_VAR 0 3
74749: LESS
74750: IFFALSE 74768
// r := r * 2 else
74752: LD_ADDR_VAR 0 7
74756: PUSH
74757: LD_VAR 0 7
74761: PUSH
74762: LD_INT 2
74764: MUL
74765: ST_TO_ADDR
74766: GO 74794
// if amount > max then
74768: LD_VAR 0 9
74772: PUSH
74773: LD_VAR 0 4
74777: GREATER
74778: IFFALSE 74794
// r := r / 2 ;
74780: LD_ADDR_VAR 0 7
74784: PUSH
74785: LD_VAR 0 7
74789: PUSH
74790: LD_INT 2
74792: DIVREAL
74793: ST_TO_ADDR
// time := time / r ;
74794: LD_ADDR_VAR 0 8
74798: PUSH
74799: LD_VAR 0 8
74803: PUSH
74804: LD_VAR 0 7
74808: DIVREAL
74809: ST_TO_ADDR
// if time < 0 then
74810: LD_VAR 0 8
74814: PUSH
74815: LD_INT 0
74817: LESS
74818: IFFALSE 74835
// time := time * - 1 ;
74820: LD_ADDR_VAR 0 8
74824: PUSH
74825: LD_VAR 0 8
74829: PUSH
74830: LD_INT 1
74832: NEG
74833: MUL
74834: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
74835: LD_VAR 0 8
74839: PUSH
74840: LD_INT 35
74842: PPUSH
74843: LD_INT 875
74845: PPUSH
74846: CALL_OW 12
74850: PLUS
74851: PPUSH
74852: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74856: LD_INT 1
74858: PPUSH
74859: LD_INT 5
74861: PPUSH
74862: CALL_OW 12
74866: PPUSH
74867: LD_VAR 0 1
74871: PPUSH
74872: LD_INT 1
74874: PPUSH
74875: CALL_OW 55
// end ;
74879: GO 74692
// end ;
74881: LD_VAR 0 5
74885: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74886: LD_INT 0
74888: PPUSH
74889: PPUSH
74890: PPUSH
74891: PPUSH
74892: PPUSH
74893: PPUSH
74894: PPUSH
74895: PPUSH
// if not turrets or not factories then
74896: LD_VAR 0 1
74900: NOT
74901: PUSH
74902: LD_VAR 0 2
74906: NOT
74907: OR
74908: IFFALSE 74912
// exit ;
74910: GO 75219
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74912: LD_ADDR_VAR 0 10
74916: PUSH
74917: LD_INT 5
74919: PUSH
74920: LD_INT 6
74922: PUSH
74923: EMPTY
74924: LIST
74925: LIST
74926: PUSH
74927: LD_INT 2
74929: PUSH
74930: LD_INT 4
74932: PUSH
74933: EMPTY
74934: LIST
74935: LIST
74936: PUSH
74937: LD_INT 3
74939: PUSH
74940: LD_INT 5
74942: PUSH
74943: EMPTY
74944: LIST
74945: LIST
74946: PUSH
74947: EMPTY
74948: LIST
74949: LIST
74950: LIST
74951: PUSH
74952: LD_INT 24
74954: PUSH
74955: LD_INT 25
74957: PUSH
74958: EMPTY
74959: LIST
74960: LIST
74961: PUSH
74962: LD_INT 23
74964: PUSH
74965: LD_INT 27
74967: PUSH
74968: EMPTY
74969: LIST
74970: LIST
74971: PUSH
74972: EMPTY
74973: LIST
74974: LIST
74975: PUSH
74976: LD_INT 42
74978: PUSH
74979: LD_INT 43
74981: PUSH
74982: EMPTY
74983: LIST
74984: LIST
74985: PUSH
74986: LD_INT 44
74988: PUSH
74989: LD_INT 46
74991: PUSH
74992: EMPTY
74993: LIST
74994: LIST
74995: PUSH
74996: LD_INT 45
74998: PUSH
74999: LD_INT 47
75001: PUSH
75002: EMPTY
75003: LIST
75004: LIST
75005: PUSH
75006: EMPTY
75007: LIST
75008: LIST
75009: LIST
75010: PUSH
75011: EMPTY
75012: LIST
75013: LIST
75014: LIST
75015: ST_TO_ADDR
// result := [ ] ;
75016: LD_ADDR_VAR 0 3
75020: PUSH
75021: EMPTY
75022: ST_TO_ADDR
// for i in turrets do
75023: LD_ADDR_VAR 0 4
75027: PUSH
75028: LD_VAR 0 1
75032: PUSH
75033: FOR_IN
75034: IFFALSE 75217
// begin nat := GetNation ( i ) ;
75036: LD_ADDR_VAR 0 7
75040: PUSH
75041: LD_VAR 0 4
75045: PPUSH
75046: CALL_OW 248
75050: ST_TO_ADDR
// weapon := 0 ;
75051: LD_ADDR_VAR 0 8
75055: PUSH
75056: LD_INT 0
75058: ST_TO_ADDR
// if not nat then
75059: LD_VAR 0 7
75063: NOT
75064: IFFALSE 75068
// continue ;
75066: GO 75033
// for j in list [ nat ] do
75068: LD_ADDR_VAR 0 5
75072: PUSH
75073: LD_VAR 0 10
75077: PUSH
75078: LD_VAR 0 7
75082: ARRAY
75083: PUSH
75084: FOR_IN
75085: IFFALSE 75126
// if GetBWeapon ( i ) = j [ 1 ] then
75087: LD_VAR 0 4
75091: PPUSH
75092: CALL_OW 269
75096: PUSH
75097: LD_VAR 0 5
75101: PUSH
75102: LD_INT 1
75104: ARRAY
75105: EQUAL
75106: IFFALSE 75124
// begin weapon := j [ 2 ] ;
75108: LD_ADDR_VAR 0 8
75112: PUSH
75113: LD_VAR 0 5
75117: PUSH
75118: LD_INT 2
75120: ARRAY
75121: ST_TO_ADDR
// break ;
75122: GO 75126
// end ;
75124: GO 75084
75126: POP
75127: POP
// if not weapon then
75128: LD_VAR 0 8
75132: NOT
75133: IFFALSE 75137
// continue ;
75135: GO 75033
// for k in factories do
75137: LD_ADDR_VAR 0 6
75141: PUSH
75142: LD_VAR 0 2
75146: PUSH
75147: FOR_IN
75148: IFFALSE 75213
// begin weapons := AvailableWeaponList ( k ) ;
75150: LD_ADDR_VAR 0 9
75154: PUSH
75155: LD_VAR 0 6
75159: PPUSH
75160: CALL_OW 478
75164: ST_TO_ADDR
// if not weapons then
75165: LD_VAR 0 9
75169: NOT
75170: IFFALSE 75174
// continue ;
75172: GO 75147
// if weapon in weapons then
75174: LD_VAR 0 8
75178: PUSH
75179: LD_VAR 0 9
75183: IN
75184: IFFALSE 75211
// begin result := [ i , weapon ] ;
75186: LD_ADDR_VAR 0 3
75190: PUSH
75191: LD_VAR 0 4
75195: PUSH
75196: LD_VAR 0 8
75200: PUSH
75201: EMPTY
75202: LIST
75203: LIST
75204: ST_TO_ADDR
// exit ;
75205: POP
75206: POP
75207: POP
75208: POP
75209: GO 75219
// end ; end ;
75211: GO 75147
75213: POP
75214: POP
// end ;
75215: GO 75033
75217: POP
75218: POP
// end ;
75219: LD_VAR 0 3
75223: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75224: LD_INT 0
75226: PPUSH
// if not side or side > 8 then
75227: LD_VAR 0 3
75231: NOT
75232: PUSH
75233: LD_VAR 0 3
75237: PUSH
75238: LD_INT 8
75240: GREATER
75241: OR
75242: IFFALSE 75246
// exit ;
75244: GO 75305
// if not range then
75246: LD_VAR 0 4
75250: NOT
75251: IFFALSE 75262
// range := - 12 ;
75253: LD_ADDR_VAR 0 4
75257: PUSH
75258: LD_INT 12
75260: NEG
75261: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75262: LD_VAR 0 1
75266: PPUSH
75267: LD_VAR 0 2
75271: PPUSH
75272: LD_VAR 0 3
75276: PPUSH
75277: LD_VAR 0 4
75281: PPUSH
75282: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75286: LD_VAR 0 1
75290: PPUSH
75291: LD_VAR 0 2
75295: PPUSH
75296: LD_VAR 0 3
75300: PPUSH
75301: CALL_OW 331
// end ;
75305: LD_VAR 0 5
75309: RET
// export function Video ( mode ) ; begin
75310: LD_INT 0
75312: PPUSH
// ingame_video = mode ;
75313: LD_ADDR_OWVAR 52
75317: PUSH
75318: LD_VAR 0 1
75322: ST_TO_ADDR
// interface_hidden = mode ;
75323: LD_ADDR_OWVAR 54
75327: PUSH
75328: LD_VAR 0 1
75332: ST_TO_ADDR
// end ;
75333: LD_VAR 0 2
75337: RET
// export function Join ( array , element ) ; begin
75338: LD_INT 0
75340: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75341: LD_ADDR_VAR 0 3
75345: PUSH
75346: LD_VAR 0 1
75350: PPUSH
75351: LD_VAR 0 1
75355: PUSH
75356: LD_INT 1
75358: PLUS
75359: PPUSH
75360: LD_VAR 0 2
75364: PPUSH
75365: CALL_OW 1
75369: ST_TO_ADDR
// end ;
75370: LD_VAR 0 3
75374: RET
// export function JoinUnion ( array , element ) ; begin
75375: LD_INT 0
75377: PPUSH
// result := array union element ;
75378: LD_ADDR_VAR 0 3
75382: PUSH
75383: LD_VAR 0 1
75387: PUSH
75388: LD_VAR 0 2
75392: UNION
75393: ST_TO_ADDR
// end ;
75394: LD_VAR 0 3
75398: RET
// export function GetBehemoths ( side ) ; begin
75399: LD_INT 0
75401: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
75402: LD_ADDR_VAR 0 2
75406: PUSH
75407: LD_INT 22
75409: PUSH
75410: LD_VAR 0 1
75414: PUSH
75415: EMPTY
75416: LIST
75417: LIST
75418: PUSH
75419: LD_INT 31
75421: PUSH
75422: LD_INT 25
75424: PUSH
75425: EMPTY
75426: LIST
75427: LIST
75428: PUSH
75429: EMPTY
75430: LIST
75431: LIST
75432: PPUSH
75433: CALL_OW 69
75437: ST_TO_ADDR
// end ;
75438: LD_VAR 0 2
75442: RET
// export function Shuffle ( array ) ; var i , index ; begin
75443: LD_INT 0
75445: PPUSH
75446: PPUSH
75447: PPUSH
// result := [ ] ;
75448: LD_ADDR_VAR 0 2
75452: PUSH
75453: EMPTY
75454: ST_TO_ADDR
// if not array then
75455: LD_VAR 0 1
75459: NOT
75460: IFFALSE 75464
// exit ;
75462: GO 75563
// Randomize ;
75464: CALL_OW 10
// for i = array downto 1 do
75468: LD_ADDR_VAR 0 3
75472: PUSH
75473: DOUBLE
75474: LD_VAR 0 1
75478: INC
75479: ST_TO_ADDR
75480: LD_INT 1
75482: PUSH
75483: FOR_DOWNTO
75484: IFFALSE 75561
// begin index := rand ( 1 , array ) ;
75486: LD_ADDR_VAR 0 4
75490: PUSH
75491: LD_INT 1
75493: PPUSH
75494: LD_VAR 0 1
75498: PPUSH
75499: CALL_OW 12
75503: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75504: LD_ADDR_VAR 0 2
75508: PUSH
75509: LD_VAR 0 2
75513: PPUSH
75514: LD_VAR 0 2
75518: PUSH
75519: LD_INT 1
75521: PLUS
75522: PPUSH
75523: LD_VAR 0 1
75527: PUSH
75528: LD_VAR 0 4
75532: ARRAY
75533: PPUSH
75534: CALL_OW 2
75538: ST_TO_ADDR
// array := Delete ( array , index ) ;
75539: LD_ADDR_VAR 0 1
75543: PUSH
75544: LD_VAR 0 1
75548: PPUSH
75549: LD_VAR 0 4
75553: PPUSH
75554: CALL_OW 3
75558: ST_TO_ADDR
// end ;
75559: GO 75483
75561: POP
75562: POP
// end ;
75563: LD_VAR 0 2
75567: RET
// export function GetBaseMaterials ( base ) ; begin
75568: LD_INT 0
75570: PPUSH
// result := [ 0 , 0 , 0 ] ;
75571: LD_ADDR_VAR 0 2
75575: PUSH
75576: LD_INT 0
75578: PUSH
75579: LD_INT 0
75581: PUSH
75582: LD_INT 0
75584: PUSH
75585: EMPTY
75586: LIST
75587: LIST
75588: LIST
75589: ST_TO_ADDR
// if not base then
75590: LD_VAR 0 1
75594: NOT
75595: IFFALSE 75599
// exit ;
75597: GO 75648
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75599: LD_ADDR_VAR 0 2
75603: PUSH
75604: LD_VAR 0 1
75608: PPUSH
75609: LD_INT 1
75611: PPUSH
75612: CALL_OW 275
75616: PUSH
75617: LD_VAR 0 1
75621: PPUSH
75622: LD_INT 2
75624: PPUSH
75625: CALL_OW 275
75629: PUSH
75630: LD_VAR 0 1
75634: PPUSH
75635: LD_INT 3
75637: PPUSH
75638: CALL_OW 275
75642: PUSH
75643: EMPTY
75644: LIST
75645: LIST
75646: LIST
75647: ST_TO_ADDR
// end ;
75648: LD_VAR 0 2
75652: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75653: LD_INT 0
75655: PPUSH
75656: PPUSH
// result := array ;
75657: LD_ADDR_VAR 0 3
75661: PUSH
75662: LD_VAR 0 1
75666: ST_TO_ADDR
// if size >= result then
75667: LD_VAR 0 2
75671: PUSH
75672: LD_VAR 0 3
75676: GREATEREQUAL
75677: IFFALSE 75681
// exit ;
75679: GO 75731
// if size then
75681: LD_VAR 0 2
75685: IFFALSE 75731
// for i := array downto size do
75687: LD_ADDR_VAR 0 4
75691: PUSH
75692: DOUBLE
75693: LD_VAR 0 1
75697: INC
75698: ST_TO_ADDR
75699: LD_VAR 0 2
75703: PUSH
75704: FOR_DOWNTO
75705: IFFALSE 75729
// result := Delete ( result , result ) ;
75707: LD_ADDR_VAR 0 3
75711: PUSH
75712: LD_VAR 0 3
75716: PPUSH
75717: LD_VAR 0 3
75721: PPUSH
75722: CALL_OW 3
75726: ST_TO_ADDR
75727: GO 75704
75729: POP
75730: POP
// end ;
75731: LD_VAR 0 3
75735: RET
// export function ComExit ( unit ) ; var tmp ; begin
75736: LD_INT 0
75738: PPUSH
75739: PPUSH
// if not IsInUnit ( unit ) then
75740: LD_VAR 0 1
75744: PPUSH
75745: CALL_OW 310
75749: NOT
75750: IFFALSE 75754
// exit ;
75752: GO 75814
// tmp := IsInUnit ( unit ) ;
75754: LD_ADDR_VAR 0 3
75758: PUSH
75759: LD_VAR 0 1
75763: PPUSH
75764: CALL_OW 310
75768: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75769: LD_VAR 0 3
75773: PPUSH
75774: CALL_OW 247
75778: PUSH
75779: LD_INT 2
75781: EQUAL
75782: IFFALSE 75795
// ComExitVehicle ( unit ) else
75784: LD_VAR 0 1
75788: PPUSH
75789: CALL_OW 121
75793: GO 75804
// ComExitBuilding ( unit ) ;
75795: LD_VAR 0 1
75799: PPUSH
75800: CALL_OW 122
// result := tmp ;
75804: LD_ADDR_VAR 0 2
75808: PUSH
75809: LD_VAR 0 3
75813: ST_TO_ADDR
// end ;
75814: LD_VAR 0 2
75818: RET
// export function ComExitAll ( units ) ; var i ; begin
75819: LD_INT 0
75821: PPUSH
75822: PPUSH
// if not units then
75823: LD_VAR 0 1
75827: NOT
75828: IFFALSE 75832
// exit ;
75830: GO 75858
// for i in units do
75832: LD_ADDR_VAR 0 3
75836: PUSH
75837: LD_VAR 0 1
75841: PUSH
75842: FOR_IN
75843: IFFALSE 75856
// ComExit ( i ) ;
75845: LD_VAR 0 3
75849: PPUSH
75850: CALL 75736 0 1
75854: GO 75842
75856: POP
75857: POP
// end ;
75858: LD_VAR 0 2
75862: RET
// export function ResetHc ; begin
75863: LD_INT 0
75865: PPUSH
// InitHc ;
75866: CALL_OW 19
// hc_importance := 0 ;
75870: LD_ADDR_OWVAR 32
75874: PUSH
75875: LD_INT 0
75877: ST_TO_ADDR
// end ;
75878: LD_VAR 0 1
75882: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75883: LD_INT 0
75885: PPUSH
75886: PPUSH
75887: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75888: LD_ADDR_VAR 0 6
75892: PUSH
75893: LD_VAR 0 1
75897: PUSH
75898: LD_VAR 0 3
75902: PLUS
75903: PUSH
75904: LD_INT 2
75906: DIV
75907: ST_TO_ADDR
// if _x < 0 then
75908: LD_VAR 0 6
75912: PUSH
75913: LD_INT 0
75915: LESS
75916: IFFALSE 75933
// _x := _x * - 1 ;
75918: LD_ADDR_VAR 0 6
75922: PUSH
75923: LD_VAR 0 6
75927: PUSH
75928: LD_INT 1
75930: NEG
75931: MUL
75932: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75933: LD_ADDR_VAR 0 7
75937: PUSH
75938: LD_VAR 0 2
75942: PUSH
75943: LD_VAR 0 4
75947: PLUS
75948: PUSH
75949: LD_INT 2
75951: DIV
75952: ST_TO_ADDR
// if _y < 0 then
75953: LD_VAR 0 7
75957: PUSH
75958: LD_INT 0
75960: LESS
75961: IFFALSE 75978
// _y := _y * - 1 ;
75963: LD_ADDR_VAR 0 7
75967: PUSH
75968: LD_VAR 0 7
75972: PUSH
75973: LD_INT 1
75975: NEG
75976: MUL
75977: ST_TO_ADDR
// result := [ _x , _y ] ;
75978: LD_ADDR_VAR 0 5
75982: PUSH
75983: LD_VAR 0 6
75987: PUSH
75988: LD_VAR 0 7
75992: PUSH
75993: EMPTY
75994: LIST
75995: LIST
75996: ST_TO_ADDR
// end ;
75997: LD_VAR 0 5
76001: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76002: LD_INT 0
76004: PPUSH
76005: PPUSH
76006: PPUSH
76007: PPUSH
// task := GetTaskList ( unit ) ;
76008: LD_ADDR_VAR 0 7
76012: PUSH
76013: LD_VAR 0 1
76017: PPUSH
76018: CALL_OW 437
76022: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76023: LD_VAR 0 7
76027: NOT
76028: PUSH
76029: LD_VAR 0 1
76033: PPUSH
76034: LD_VAR 0 2
76038: PPUSH
76039: CALL_OW 308
76043: NOT
76044: AND
76045: IFFALSE 76049
// exit ;
76047: GO 76167
// if IsInArea ( unit , area ) then
76049: LD_VAR 0 1
76053: PPUSH
76054: LD_VAR 0 2
76058: PPUSH
76059: CALL_OW 308
76063: IFFALSE 76081
// begin ComMoveToArea ( unit , goAway ) ;
76065: LD_VAR 0 1
76069: PPUSH
76070: LD_VAR 0 3
76074: PPUSH
76075: CALL_OW 113
// exit ;
76079: GO 76167
// end ; if task [ 1 ] [ 1 ] <> M then
76081: LD_VAR 0 7
76085: PUSH
76086: LD_INT 1
76088: ARRAY
76089: PUSH
76090: LD_INT 1
76092: ARRAY
76093: PUSH
76094: LD_STRING M
76096: NONEQUAL
76097: IFFALSE 76101
// exit ;
76099: GO 76167
// x := task [ 1 ] [ 2 ] ;
76101: LD_ADDR_VAR 0 5
76105: PUSH
76106: LD_VAR 0 7
76110: PUSH
76111: LD_INT 1
76113: ARRAY
76114: PUSH
76115: LD_INT 2
76117: ARRAY
76118: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76119: LD_ADDR_VAR 0 6
76123: PUSH
76124: LD_VAR 0 7
76128: PUSH
76129: LD_INT 1
76131: ARRAY
76132: PUSH
76133: LD_INT 3
76135: ARRAY
76136: ST_TO_ADDR
// if InArea ( x , y , area ) then
76137: LD_VAR 0 5
76141: PPUSH
76142: LD_VAR 0 6
76146: PPUSH
76147: LD_VAR 0 2
76151: PPUSH
76152: CALL_OW 309
76156: IFFALSE 76167
// ComStop ( unit ) ;
76158: LD_VAR 0 1
76162: PPUSH
76163: CALL_OW 141
// end ;
76167: LD_VAR 0 4
76171: RET
// export function Abs ( value ) ; begin
76172: LD_INT 0
76174: PPUSH
// result := value ;
76175: LD_ADDR_VAR 0 2
76179: PUSH
76180: LD_VAR 0 1
76184: ST_TO_ADDR
// if value < 0 then
76185: LD_VAR 0 1
76189: PUSH
76190: LD_INT 0
76192: LESS
76193: IFFALSE 76210
// result := value * - 1 ;
76195: LD_ADDR_VAR 0 2
76199: PUSH
76200: LD_VAR 0 1
76204: PUSH
76205: LD_INT 1
76207: NEG
76208: MUL
76209: ST_TO_ADDR
// end ;
76210: LD_VAR 0 2
76214: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76215: LD_INT 0
76217: PPUSH
76218: PPUSH
76219: PPUSH
76220: PPUSH
76221: PPUSH
76222: PPUSH
76223: PPUSH
76224: PPUSH
// if not unit or not building then
76225: LD_VAR 0 1
76229: NOT
76230: PUSH
76231: LD_VAR 0 2
76235: NOT
76236: OR
76237: IFFALSE 76241
// exit ;
76239: GO 76467
// x := GetX ( building ) ;
76241: LD_ADDR_VAR 0 4
76245: PUSH
76246: LD_VAR 0 2
76250: PPUSH
76251: CALL_OW 250
76255: ST_TO_ADDR
// y := GetY ( building ) ;
76256: LD_ADDR_VAR 0 6
76260: PUSH
76261: LD_VAR 0 2
76265: PPUSH
76266: CALL_OW 251
76270: ST_TO_ADDR
// d := GetDir ( building ) ;
76271: LD_ADDR_VAR 0 8
76275: PUSH
76276: LD_VAR 0 2
76280: PPUSH
76281: CALL_OW 254
76285: ST_TO_ADDR
// r := 4 ;
76286: LD_ADDR_VAR 0 9
76290: PUSH
76291: LD_INT 4
76293: ST_TO_ADDR
// for i := 1 to 5 do
76294: LD_ADDR_VAR 0 10
76298: PUSH
76299: DOUBLE
76300: LD_INT 1
76302: DEC
76303: ST_TO_ADDR
76304: LD_INT 5
76306: PUSH
76307: FOR_TO
76308: IFFALSE 76465
// begin _x := ShiftX ( x , d , r + i ) ;
76310: LD_ADDR_VAR 0 5
76314: PUSH
76315: LD_VAR 0 4
76319: PPUSH
76320: LD_VAR 0 8
76324: PPUSH
76325: LD_VAR 0 9
76329: PUSH
76330: LD_VAR 0 10
76334: PLUS
76335: PPUSH
76336: CALL_OW 272
76340: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76341: LD_ADDR_VAR 0 7
76345: PUSH
76346: LD_VAR 0 6
76350: PPUSH
76351: LD_VAR 0 8
76355: PPUSH
76356: LD_VAR 0 9
76360: PUSH
76361: LD_VAR 0 10
76365: PLUS
76366: PPUSH
76367: CALL_OW 273
76371: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76372: LD_VAR 0 5
76376: PPUSH
76377: LD_VAR 0 7
76381: PPUSH
76382: CALL_OW 488
76386: PUSH
76387: LD_VAR 0 5
76391: PPUSH
76392: LD_VAR 0 7
76396: PPUSH
76397: CALL_OW 428
76401: PPUSH
76402: CALL_OW 247
76406: PUSH
76407: LD_INT 3
76409: PUSH
76410: LD_INT 2
76412: PUSH
76413: EMPTY
76414: LIST
76415: LIST
76416: IN
76417: NOT
76418: AND
76419: IFFALSE 76463
// begin ComMoveXY ( unit , _x , _y ) ;
76421: LD_VAR 0 1
76425: PPUSH
76426: LD_VAR 0 5
76430: PPUSH
76431: LD_VAR 0 7
76435: PPUSH
76436: CALL_OW 111
// result := [ _x , _y ] ;
76440: LD_ADDR_VAR 0 3
76444: PUSH
76445: LD_VAR 0 5
76449: PUSH
76450: LD_VAR 0 7
76454: PUSH
76455: EMPTY
76456: LIST
76457: LIST
76458: ST_TO_ADDR
// exit ;
76459: POP
76460: POP
76461: GO 76467
// end ; end ;
76463: GO 76307
76465: POP
76466: POP
// end ;
76467: LD_VAR 0 3
76471: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76472: LD_INT 0
76474: PPUSH
76475: PPUSH
76476: PPUSH
// result := 0 ;
76477: LD_ADDR_VAR 0 3
76481: PUSH
76482: LD_INT 0
76484: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76485: LD_VAR 0 1
76489: PUSH
76490: LD_INT 0
76492: LESS
76493: PUSH
76494: LD_VAR 0 1
76498: PUSH
76499: LD_INT 8
76501: GREATER
76502: OR
76503: PUSH
76504: LD_VAR 0 2
76508: PUSH
76509: LD_INT 0
76511: LESS
76512: OR
76513: PUSH
76514: LD_VAR 0 2
76518: PUSH
76519: LD_INT 8
76521: GREATER
76522: OR
76523: IFFALSE 76527
// exit ;
76525: GO 76602
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76527: LD_ADDR_VAR 0 4
76531: PUSH
76532: LD_INT 22
76534: PUSH
76535: LD_VAR 0 2
76539: PUSH
76540: EMPTY
76541: LIST
76542: LIST
76543: PPUSH
76544: CALL_OW 69
76548: PUSH
76549: FOR_IN
76550: IFFALSE 76600
// begin un := UnitShoot ( i ) ;
76552: LD_ADDR_VAR 0 5
76556: PUSH
76557: LD_VAR 0 4
76561: PPUSH
76562: CALL_OW 504
76566: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76567: LD_VAR 0 5
76571: PPUSH
76572: CALL_OW 255
76576: PUSH
76577: LD_VAR 0 1
76581: EQUAL
76582: IFFALSE 76598
// begin result := un ;
76584: LD_ADDR_VAR 0 3
76588: PUSH
76589: LD_VAR 0 5
76593: ST_TO_ADDR
// exit ;
76594: POP
76595: POP
76596: GO 76602
// end ; end ;
76598: GO 76549
76600: POP
76601: POP
// end ;
76602: LD_VAR 0 3
76606: RET
// export function GetCargoBay ( units ) ; begin
76607: LD_INT 0
76609: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76610: LD_ADDR_VAR 0 2
76614: PUSH
76615: LD_VAR 0 1
76619: PPUSH
76620: LD_INT 2
76622: PUSH
76623: LD_INT 34
76625: PUSH
76626: LD_INT 12
76628: PUSH
76629: EMPTY
76630: LIST
76631: LIST
76632: PUSH
76633: LD_INT 34
76635: PUSH
76636: LD_INT 51
76638: PUSH
76639: EMPTY
76640: LIST
76641: LIST
76642: PUSH
76643: LD_INT 34
76645: PUSH
76646: LD_INT 32
76648: PUSH
76649: EMPTY
76650: LIST
76651: LIST
76652: PUSH
76653: LD_INT 34
76655: PUSH
76656: LD_INT 89
76658: PUSH
76659: EMPTY
76660: LIST
76661: LIST
76662: PUSH
76663: EMPTY
76664: LIST
76665: LIST
76666: LIST
76667: LIST
76668: LIST
76669: PPUSH
76670: CALL_OW 72
76674: ST_TO_ADDR
// end ;
76675: LD_VAR 0 2
76679: RET
// export function Negate ( value ) ; begin
76680: LD_INT 0
76682: PPUSH
// result := not value ;
76683: LD_ADDR_VAR 0 2
76687: PUSH
76688: LD_VAR 0 1
76692: NOT
76693: ST_TO_ADDR
// end ;
76694: LD_VAR 0 2
76698: RET
// export function Inc ( value ) ; begin
76699: LD_INT 0
76701: PPUSH
// result := value + 1 ;
76702: LD_ADDR_VAR 0 2
76706: PUSH
76707: LD_VAR 0 1
76711: PUSH
76712: LD_INT 1
76714: PLUS
76715: ST_TO_ADDR
// end ;
76716: LD_VAR 0 2
76720: RET
// export function Dec ( value ) ; begin
76721: LD_INT 0
76723: PPUSH
// result := value - 1 ;
76724: LD_ADDR_VAR 0 2
76728: PUSH
76729: LD_VAR 0 1
76733: PUSH
76734: LD_INT 1
76736: MINUS
76737: ST_TO_ADDR
// end ;
76738: LD_VAR 0 2
76742: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76743: LD_INT 0
76745: PPUSH
76746: PPUSH
76747: PPUSH
76748: PPUSH
76749: PPUSH
76750: PPUSH
76751: PPUSH
76752: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76753: LD_VAR 0 1
76757: PPUSH
76758: LD_VAR 0 2
76762: PPUSH
76763: CALL_OW 488
76767: NOT
76768: PUSH
76769: LD_VAR 0 3
76773: PPUSH
76774: LD_VAR 0 4
76778: PPUSH
76779: CALL_OW 488
76783: NOT
76784: OR
76785: IFFALSE 76798
// begin result := - 1 ;
76787: LD_ADDR_VAR 0 5
76791: PUSH
76792: LD_INT 1
76794: NEG
76795: ST_TO_ADDR
// exit ;
76796: GO 77033
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76798: LD_ADDR_VAR 0 12
76802: PUSH
76803: LD_VAR 0 1
76807: PPUSH
76808: LD_VAR 0 2
76812: PPUSH
76813: LD_VAR 0 3
76817: PPUSH
76818: LD_VAR 0 4
76822: PPUSH
76823: CALL 75883 0 4
76827: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76828: LD_ADDR_VAR 0 11
76832: PUSH
76833: LD_VAR 0 1
76837: PPUSH
76838: LD_VAR 0 2
76842: PPUSH
76843: LD_VAR 0 12
76847: PUSH
76848: LD_INT 1
76850: ARRAY
76851: PPUSH
76852: LD_VAR 0 12
76856: PUSH
76857: LD_INT 2
76859: ARRAY
76860: PPUSH
76861: CALL_OW 298
76865: ST_TO_ADDR
// distance := 9999 ;
76866: LD_ADDR_VAR 0 10
76870: PUSH
76871: LD_INT 9999
76873: ST_TO_ADDR
// for i := 0 to 5 do
76874: LD_ADDR_VAR 0 6
76878: PUSH
76879: DOUBLE
76880: LD_INT 0
76882: DEC
76883: ST_TO_ADDR
76884: LD_INT 5
76886: PUSH
76887: FOR_TO
76888: IFFALSE 77031
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76890: LD_ADDR_VAR 0 7
76894: PUSH
76895: LD_VAR 0 1
76899: PPUSH
76900: LD_VAR 0 6
76904: PPUSH
76905: LD_VAR 0 11
76909: PPUSH
76910: CALL_OW 272
76914: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76915: LD_ADDR_VAR 0 8
76919: PUSH
76920: LD_VAR 0 2
76924: PPUSH
76925: LD_VAR 0 6
76929: PPUSH
76930: LD_VAR 0 11
76934: PPUSH
76935: CALL_OW 273
76939: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76940: LD_VAR 0 7
76944: PPUSH
76945: LD_VAR 0 8
76949: PPUSH
76950: CALL_OW 488
76954: NOT
76955: IFFALSE 76959
// continue ;
76957: GO 76887
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76959: LD_ADDR_VAR 0 9
76963: PUSH
76964: LD_VAR 0 12
76968: PUSH
76969: LD_INT 1
76971: ARRAY
76972: PPUSH
76973: LD_VAR 0 12
76977: PUSH
76978: LD_INT 2
76980: ARRAY
76981: PPUSH
76982: LD_VAR 0 7
76986: PPUSH
76987: LD_VAR 0 8
76991: PPUSH
76992: CALL_OW 298
76996: ST_TO_ADDR
// if tmp < distance then
76997: LD_VAR 0 9
77001: PUSH
77002: LD_VAR 0 10
77006: LESS
77007: IFFALSE 77029
// begin result := i ;
77009: LD_ADDR_VAR 0 5
77013: PUSH
77014: LD_VAR 0 6
77018: ST_TO_ADDR
// distance := tmp ;
77019: LD_ADDR_VAR 0 10
77023: PUSH
77024: LD_VAR 0 9
77028: ST_TO_ADDR
// end ; end ;
77029: GO 76887
77031: POP
77032: POP
// end ;
77033: LD_VAR 0 5
77037: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77038: LD_INT 0
77040: PPUSH
77041: PPUSH
// if not driver or not IsInUnit ( driver ) then
77042: LD_VAR 0 1
77046: NOT
77047: PUSH
77048: LD_VAR 0 1
77052: PPUSH
77053: CALL_OW 310
77057: NOT
77058: OR
77059: IFFALSE 77063
// exit ;
77061: GO 77153
// vehicle := IsInUnit ( driver ) ;
77063: LD_ADDR_VAR 0 3
77067: PUSH
77068: LD_VAR 0 1
77072: PPUSH
77073: CALL_OW 310
77077: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77078: LD_VAR 0 1
77082: PPUSH
77083: LD_STRING \
77085: PUSH
77086: LD_INT 0
77088: PUSH
77089: LD_INT 0
77091: PUSH
77092: LD_INT 0
77094: PUSH
77095: LD_INT 0
77097: PUSH
77098: LD_INT 0
77100: PUSH
77101: LD_INT 0
77103: PUSH
77104: EMPTY
77105: LIST
77106: LIST
77107: LIST
77108: LIST
77109: LIST
77110: LIST
77111: LIST
77112: PUSH
77113: LD_STRING E
77115: PUSH
77116: LD_INT 0
77118: PUSH
77119: LD_INT 0
77121: PUSH
77122: LD_VAR 0 3
77126: PUSH
77127: LD_INT 0
77129: PUSH
77130: LD_INT 0
77132: PUSH
77133: LD_INT 0
77135: PUSH
77136: EMPTY
77137: LIST
77138: LIST
77139: LIST
77140: LIST
77141: LIST
77142: LIST
77143: LIST
77144: PUSH
77145: EMPTY
77146: LIST
77147: LIST
77148: PPUSH
77149: CALL_OW 446
// end ;
77153: LD_VAR 0 2
77157: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77158: LD_INT 0
77160: PPUSH
77161: PPUSH
// if not driver or not IsInUnit ( driver ) then
77162: LD_VAR 0 1
77166: NOT
77167: PUSH
77168: LD_VAR 0 1
77172: PPUSH
77173: CALL_OW 310
77177: NOT
77178: OR
77179: IFFALSE 77183
// exit ;
77181: GO 77273
// vehicle := IsInUnit ( driver ) ;
77183: LD_ADDR_VAR 0 3
77187: PUSH
77188: LD_VAR 0 1
77192: PPUSH
77193: CALL_OW 310
77197: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77198: LD_VAR 0 1
77202: PPUSH
77203: LD_STRING \
77205: PUSH
77206: LD_INT 0
77208: PUSH
77209: LD_INT 0
77211: PUSH
77212: LD_INT 0
77214: PUSH
77215: LD_INT 0
77217: PUSH
77218: LD_INT 0
77220: PUSH
77221: LD_INT 0
77223: PUSH
77224: EMPTY
77225: LIST
77226: LIST
77227: LIST
77228: LIST
77229: LIST
77230: LIST
77231: LIST
77232: PUSH
77233: LD_STRING E
77235: PUSH
77236: LD_INT 0
77238: PUSH
77239: LD_INT 0
77241: PUSH
77242: LD_VAR 0 3
77246: PUSH
77247: LD_INT 0
77249: PUSH
77250: LD_INT 0
77252: PUSH
77253: LD_INT 0
77255: PUSH
77256: EMPTY
77257: LIST
77258: LIST
77259: LIST
77260: LIST
77261: LIST
77262: LIST
77263: LIST
77264: PUSH
77265: EMPTY
77266: LIST
77267: LIST
77268: PPUSH
77269: CALL_OW 447
// end ;
77273: LD_VAR 0 2
77277: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77278: LD_INT 0
77280: PPUSH
77281: PPUSH
77282: PPUSH
// tmp := [ ] ;
77283: LD_ADDR_VAR 0 5
77287: PUSH
77288: EMPTY
77289: ST_TO_ADDR
// for i in units do
77290: LD_ADDR_VAR 0 4
77294: PUSH
77295: LD_VAR 0 1
77299: PUSH
77300: FOR_IN
77301: IFFALSE 77339
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77303: LD_ADDR_VAR 0 5
77307: PUSH
77308: LD_VAR 0 5
77312: PPUSH
77313: LD_VAR 0 5
77317: PUSH
77318: LD_INT 1
77320: PLUS
77321: PPUSH
77322: LD_VAR 0 4
77326: PPUSH
77327: CALL_OW 256
77331: PPUSH
77332: CALL_OW 2
77336: ST_TO_ADDR
77337: GO 77300
77339: POP
77340: POP
// if not tmp then
77341: LD_VAR 0 5
77345: NOT
77346: IFFALSE 77350
// exit ;
77348: GO 77398
// if asc then
77350: LD_VAR 0 2
77354: IFFALSE 77378
// result := SortListByListAsc ( units , tmp ) else
77356: LD_ADDR_VAR 0 3
77360: PUSH
77361: LD_VAR 0 1
77365: PPUSH
77366: LD_VAR 0 5
77370: PPUSH
77371: CALL_OW 76
77375: ST_TO_ADDR
77376: GO 77398
// result := SortListByListDesc ( units , tmp ) ;
77378: LD_ADDR_VAR 0 3
77382: PUSH
77383: LD_VAR 0 1
77387: PPUSH
77388: LD_VAR 0 5
77392: PPUSH
77393: CALL_OW 77
77397: ST_TO_ADDR
// end ;
77398: LD_VAR 0 3
77402: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77403: LD_INT 0
77405: PPUSH
77406: PPUSH
// task := GetTaskList ( mech ) ;
77407: LD_ADDR_VAR 0 4
77411: PUSH
77412: LD_VAR 0 1
77416: PPUSH
77417: CALL_OW 437
77421: ST_TO_ADDR
// if not task then
77422: LD_VAR 0 4
77426: NOT
77427: IFFALSE 77431
// exit ;
77429: GO 77473
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
77431: LD_ADDR_VAR 0 3
77435: PUSH
77436: LD_VAR 0 4
77440: PUSH
77441: LD_INT 1
77443: ARRAY
77444: PUSH
77445: LD_INT 1
77447: ARRAY
77448: PUSH
77449: LD_STRING r
77451: EQUAL
77452: PUSH
77453: LD_VAR 0 4
77457: PUSH
77458: LD_INT 1
77460: ARRAY
77461: PUSH
77462: LD_INT 4
77464: ARRAY
77465: PUSH
77466: LD_VAR 0 2
77470: EQUAL
77471: AND
77472: ST_TO_ADDR
// end ;
77473: LD_VAR 0 3
77477: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77478: LD_INT 0
77480: PPUSH
// SetDir ( unit , d ) ;
77481: LD_VAR 0 1
77485: PPUSH
77486: LD_VAR 0 4
77490: PPUSH
77491: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77495: LD_VAR 0 1
77499: PPUSH
77500: LD_VAR 0 2
77504: PPUSH
77505: LD_VAR 0 3
77509: PPUSH
77510: LD_VAR 0 5
77514: PPUSH
77515: CALL_OW 48
// end ;
77519: LD_VAR 0 6
77523: RET
// export function ToNaturalNumber ( number ) ; begin
77524: LD_INT 0
77526: PPUSH
// result := number div 1 ;
77527: LD_ADDR_VAR 0 2
77531: PUSH
77532: LD_VAR 0 1
77536: PUSH
77537: LD_INT 1
77539: DIV
77540: ST_TO_ADDR
// if number < 0 then
77541: LD_VAR 0 1
77545: PUSH
77546: LD_INT 0
77548: LESS
77549: IFFALSE 77559
// result := 0 ;
77551: LD_ADDR_VAR 0 2
77555: PUSH
77556: LD_INT 0
77558: ST_TO_ADDR
// end ;
77559: LD_VAR 0 2
77563: RET
// export function SortByClass ( units , class ) ; var un ; begin
77564: LD_INT 0
77566: PPUSH
77567: PPUSH
// if not units or not class then
77568: LD_VAR 0 1
77572: NOT
77573: PUSH
77574: LD_VAR 0 2
77578: NOT
77579: OR
77580: IFFALSE 77584
// exit ;
77582: GO 77679
// result := [ ] ;
77584: LD_ADDR_VAR 0 3
77588: PUSH
77589: EMPTY
77590: ST_TO_ADDR
// for un in units do
77591: LD_ADDR_VAR 0 4
77595: PUSH
77596: LD_VAR 0 1
77600: PUSH
77601: FOR_IN
77602: IFFALSE 77677
// if GetClass ( un ) = class then
77604: LD_VAR 0 4
77608: PPUSH
77609: CALL_OW 257
77613: PUSH
77614: LD_VAR 0 2
77618: EQUAL
77619: IFFALSE 77646
// result := Insert ( result , 1 , un ) else
77621: LD_ADDR_VAR 0 3
77625: PUSH
77626: LD_VAR 0 3
77630: PPUSH
77631: LD_INT 1
77633: PPUSH
77634: LD_VAR 0 4
77638: PPUSH
77639: CALL_OW 2
77643: ST_TO_ADDR
77644: GO 77675
// result := Replace ( result , result + 1 , un ) ;
77646: LD_ADDR_VAR 0 3
77650: PUSH
77651: LD_VAR 0 3
77655: PPUSH
77656: LD_VAR 0 3
77660: PUSH
77661: LD_INT 1
77663: PLUS
77664: PPUSH
77665: LD_VAR 0 4
77669: PPUSH
77670: CALL_OW 1
77674: ST_TO_ADDR
77675: GO 77601
77677: POP
77678: POP
// end ;
77679: LD_VAR 0 3
77683: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77684: LD_INT 0
77686: PPUSH
77687: PPUSH
77688: PPUSH
77689: PPUSH
77690: PPUSH
77691: PPUSH
77692: PPUSH
// result := [ ] ;
77693: LD_ADDR_VAR 0 4
77697: PUSH
77698: EMPTY
77699: ST_TO_ADDR
// if x - r < 0 then
77700: LD_VAR 0 1
77704: PUSH
77705: LD_VAR 0 3
77709: MINUS
77710: PUSH
77711: LD_INT 0
77713: LESS
77714: IFFALSE 77726
// min_x := 0 else
77716: LD_ADDR_VAR 0 8
77720: PUSH
77721: LD_INT 0
77723: ST_TO_ADDR
77724: GO 77742
// min_x := x - r ;
77726: LD_ADDR_VAR 0 8
77730: PUSH
77731: LD_VAR 0 1
77735: PUSH
77736: LD_VAR 0 3
77740: MINUS
77741: ST_TO_ADDR
// if y - r < 0 then
77742: LD_VAR 0 2
77746: PUSH
77747: LD_VAR 0 3
77751: MINUS
77752: PUSH
77753: LD_INT 0
77755: LESS
77756: IFFALSE 77768
// min_y := 0 else
77758: LD_ADDR_VAR 0 7
77762: PUSH
77763: LD_INT 0
77765: ST_TO_ADDR
77766: GO 77784
// min_y := y - r ;
77768: LD_ADDR_VAR 0 7
77772: PUSH
77773: LD_VAR 0 2
77777: PUSH
77778: LD_VAR 0 3
77782: MINUS
77783: ST_TO_ADDR
// max_x := x + r ;
77784: LD_ADDR_VAR 0 9
77788: PUSH
77789: LD_VAR 0 1
77793: PUSH
77794: LD_VAR 0 3
77798: PLUS
77799: ST_TO_ADDR
// max_y := y + r ;
77800: LD_ADDR_VAR 0 10
77804: PUSH
77805: LD_VAR 0 2
77809: PUSH
77810: LD_VAR 0 3
77814: PLUS
77815: ST_TO_ADDR
// for _x = min_x to max_x do
77816: LD_ADDR_VAR 0 5
77820: PUSH
77821: DOUBLE
77822: LD_VAR 0 8
77826: DEC
77827: ST_TO_ADDR
77828: LD_VAR 0 9
77832: PUSH
77833: FOR_TO
77834: IFFALSE 77935
// for _y = min_y to max_y do
77836: LD_ADDR_VAR 0 6
77840: PUSH
77841: DOUBLE
77842: LD_VAR 0 7
77846: DEC
77847: ST_TO_ADDR
77848: LD_VAR 0 10
77852: PUSH
77853: FOR_TO
77854: IFFALSE 77931
// begin if not ValidHex ( _x , _y ) then
77856: LD_VAR 0 5
77860: PPUSH
77861: LD_VAR 0 6
77865: PPUSH
77866: CALL_OW 488
77870: NOT
77871: IFFALSE 77875
// continue ;
77873: GO 77853
// if GetResourceTypeXY ( _x , _y ) then
77875: LD_VAR 0 5
77879: PPUSH
77880: LD_VAR 0 6
77884: PPUSH
77885: CALL_OW 283
77889: IFFALSE 77929
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77891: LD_ADDR_VAR 0 4
77895: PUSH
77896: LD_VAR 0 4
77900: PPUSH
77901: LD_VAR 0 4
77905: PUSH
77906: LD_INT 1
77908: PLUS
77909: PPUSH
77910: LD_VAR 0 5
77914: PUSH
77915: LD_VAR 0 6
77919: PUSH
77920: EMPTY
77921: LIST
77922: LIST
77923: PPUSH
77924: CALL_OW 1
77928: ST_TO_ADDR
// end ;
77929: GO 77853
77931: POP
77932: POP
77933: GO 77833
77935: POP
77936: POP
// end ;
77937: LD_VAR 0 4
77941: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77942: LD_INT 0
77944: PPUSH
77945: PPUSH
77946: PPUSH
77947: PPUSH
77948: PPUSH
77949: PPUSH
77950: PPUSH
77951: PPUSH
// if not units then
77952: LD_VAR 0 1
77956: NOT
77957: IFFALSE 77961
// exit ;
77959: GO 78485
// result := UnitFilter ( units , [ f_ok ] ) ;
77961: LD_ADDR_VAR 0 3
77965: PUSH
77966: LD_VAR 0 1
77970: PPUSH
77971: LD_INT 50
77973: PUSH
77974: EMPTY
77975: LIST
77976: PPUSH
77977: CALL_OW 72
77981: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77982: LD_ADDR_VAR 0 8
77986: PUSH
77987: LD_VAR 0 1
77991: PUSH
77992: LD_INT 1
77994: ARRAY
77995: PPUSH
77996: CALL_OW 255
78000: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78001: LD_ADDR_VAR 0 10
78005: PUSH
78006: LD_INT 29
78008: PUSH
78009: LD_INT 91
78011: PUSH
78012: LD_INT 49
78014: PUSH
78015: EMPTY
78016: LIST
78017: LIST
78018: LIST
78019: ST_TO_ADDR
// if not result then
78020: LD_VAR 0 3
78024: NOT
78025: IFFALSE 78029
// exit ;
78027: GO 78485
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78029: LD_ADDR_VAR 0 5
78033: PUSH
78034: LD_INT 81
78036: PUSH
78037: LD_VAR 0 8
78041: PUSH
78042: EMPTY
78043: LIST
78044: LIST
78045: PPUSH
78046: CALL_OW 69
78050: ST_TO_ADDR
// for i in result do
78051: LD_ADDR_VAR 0 4
78055: PUSH
78056: LD_VAR 0 3
78060: PUSH
78061: FOR_IN
78062: IFFALSE 78483
// begin tag := GetTag ( i ) + 1 ;
78064: LD_ADDR_VAR 0 9
78068: PUSH
78069: LD_VAR 0 4
78073: PPUSH
78074: CALL_OW 110
78078: PUSH
78079: LD_INT 1
78081: PLUS
78082: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78083: LD_ADDR_VAR 0 7
78087: PUSH
78088: LD_VAR 0 4
78092: PPUSH
78093: CALL_OW 250
78097: PPUSH
78098: LD_VAR 0 4
78102: PPUSH
78103: CALL_OW 251
78107: PPUSH
78108: LD_INT 6
78110: PPUSH
78111: CALL 77684 0 3
78115: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78116: LD_VAR 0 4
78120: PPUSH
78121: CALL_OW 247
78125: PUSH
78126: LD_INT 2
78128: EQUAL
78129: PUSH
78130: LD_VAR 0 7
78134: AND
78135: PUSH
78136: LD_VAR 0 4
78140: PPUSH
78141: CALL_OW 264
78145: PUSH
78146: LD_VAR 0 10
78150: IN
78151: NOT
78152: AND
78153: IFFALSE 78192
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78155: LD_VAR 0 4
78159: PPUSH
78160: LD_VAR 0 7
78164: PUSH
78165: LD_INT 1
78167: ARRAY
78168: PUSH
78169: LD_INT 1
78171: ARRAY
78172: PPUSH
78173: LD_VAR 0 7
78177: PUSH
78178: LD_INT 1
78180: ARRAY
78181: PUSH
78182: LD_INT 2
78184: ARRAY
78185: PPUSH
78186: CALL_OW 116
78190: GO 78481
// if path > tag then
78192: LD_VAR 0 2
78196: PUSH
78197: LD_VAR 0 9
78201: GREATER
78202: IFFALSE 78410
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
78204: LD_ADDR_VAR 0 6
78208: PUSH
78209: LD_VAR 0 5
78213: PPUSH
78214: LD_INT 91
78216: PUSH
78217: LD_VAR 0 4
78221: PUSH
78222: LD_INT 8
78224: PUSH
78225: EMPTY
78226: LIST
78227: LIST
78228: LIST
78229: PPUSH
78230: CALL_OW 72
78234: ST_TO_ADDR
// if nearEnemy then
78235: LD_VAR 0 6
78239: IFFALSE 78308
// begin if GetWeapon ( i ) = ru_time_lapser then
78241: LD_VAR 0 4
78245: PPUSH
78246: CALL_OW 264
78250: PUSH
78251: LD_INT 49
78253: EQUAL
78254: IFFALSE 78282
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78256: LD_VAR 0 4
78260: PPUSH
78261: LD_VAR 0 6
78265: PPUSH
78266: LD_VAR 0 4
78270: PPUSH
78271: CALL_OW 74
78275: PPUSH
78276: CALL_OW 112
78280: GO 78306
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
78282: LD_VAR 0 4
78286: PPUSH
78287: LD_VAR 0 6
78291: PPUSH
78292: LD_VAR 0 4
78296: PPUSH
78297: CALL_OW 74
78301: PPUSH
78302: CALL 79410 0 2
// end else
78306: GO 78408
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78308: LD_VAR 0 4
78312: PPUSH
78313: LD_VAR 0 2
78317: PUSH
78318: LD_VAR 0 9
78322: ARRAY
78323: PUSH
78324: LD_INT 1
78326: ARRAY
78327: PPUSH
78328: LD_VAR 0 2
78332: PUSH
78333: LD_VAR 0 9
78337: ARRAY
78338: PUSH
78339: LD_INT 2
78341: ARRAY
78342: PPUSH
78343: CALL_OW 297
78347: PUSH
78348: LD_INT 6
78350: GREATER
78351: IFFALSE 78394
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78353: LD_VAR 0 4
78357: PPUSH
78358: LD_VAR 0 2
78362: PUSH
78363: LD_VAR 0 9
78367: ARRAY
78368: PUSH
78369: LD_INT 1
78371: ARRAY
78372: PPUSH
78373: LD_VAR 0 2
78377: PUSH
78378: LD_VAR 0 9
78382: ARRAY
78383: PUSH
78384: LD_INT 2
78386: ARRAY
78387: PPUSH
78388: CALL_OW 114
78392: GO 78408
// SetTag ( i , tag ) ;
78394: LD_VAR 0 4
78398: PPUSH
78399: LD_VAR 0 9
78403: PPUSH
78404: CALL_OW 109
// end else
78408: GO 78481
// if enemy then
78410: LD_VAR 0 5
78414: IFFALSE 78481
// begin if GetWeapon ( i ) = ru_time_lapser then
78416: LD_VAR 0 4
78420: PPUSH
78421: CALL_OW 264
78425: PUSH
78426: LD_INT 49
78428: EQUAL
78429: IFFALSE 78457
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
78431: LD_VAR 0 4
78435: PPUSH
78436: LD_VAR 0 5
78440: PPUSH
78441: LD_VAR 0 4
78445: PPUSH
78446: CALL_OW 74
78450: PPUSH
78451: CALL_OW 112
78455: GO 78481
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78457: LD_VAR 0 4
78461: PPUSH
78462: LD_VAR 0 5
78466: PPUSH
78467: LD_VAR 0 4
78471: PPUSH
78472: CALL_OW 74
78476: PPUSH
78477: CALL 79410 0 2
// end ; end ;
78481: GO 78061
78483: POP
78484: POP
// end ;
78485: LD_VAR 0 3
78489: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78490: LD_INT 0
78492: PPUSH
78493: PPUSH
78494: PPUSH
// if not unit or IsInUnit ( unit ) then
78495: LD_VAR 0 1
78499: NOT
78500: PUSH
78501: LD_VAR 0 1
78505: PPUSH
78506: CALL_OW 310
78510: OR
78511: IFFALSE 78515
// exit ;
78513: GO 78606
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78515: LD_ADDR_VAR 0 4
78519: PUSH
78520: LD_VAR 0 1
78524: PPUSH
78525: CALL_OW 250
78529: PPUSH
78530: LD_VAR 0 2
78534: PPUSH
78535: LD_INT 1
78537: PPUSH
78538: CALL_OW 272
78542: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78543: LD_ADDR_VAR 0 5
78547: PUSH
78548: LD_VAR 0 1
78552: PPUSH
78553: CALL_OW 251
78557: PPUSH
78558: LD_VAR 0 2
78562: PPUSH
78563: LD_INT 1
78565: PPUSH
78566: CALL_OW 273
78570: ST_TO_ADDR
// if ValidHex ( x , y ) then
78571: LD_VAR 0 4
78575: PPUSH
78576: LD_VAR 0 5
78580: PPUSH
78581: CALL_OW 488
78585: IFFALSE 78606
// ComTurnXY ( unit , x , y ) ;
78587: LD_VAR 0 1
78591: PPUSH
78592: LD_VAR 0 4
78596: PPUSH
78597: LD_VAR 0 5
78601: PPUSH
78602: CALL_OW 118
// end ;
78606: LD_VAR 0 3
78610: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78611: LD_INT 0
78613: PPUSH
78614: PPUSH
// result := false ;
78615: LD_ADDR_VAR 0 3
78619: PUSH
78620: LD_INT 0
78622: ST_TO_ADDR
// if not units then
78623: LD_VAR 0 2
78627: NOT
78628: IFFALSE 78632
// exit ;
78630: GO 78677
// for i in units do
78632: LD_ADDR_VAR 0 4
78636: PUSH
78637: LD_VAR 0 2
78641: PUSH
78642: FOR_IN
78643: IFFALSE 78675
// if See ( side , i ) then
78645: LD_VAR 0 1
78649: PPUSH
78650: LD_VAR 0 4
78654: PPUSH
78655: CALL_OW 292
78659: IFFALSE 78673
// begin result := true ;
78661: LD_ADDR_VAR 0 3
78665: PUSH
78666: LD_INT 1
78668: ST_TO_ADDR
// exit ;
78669: POP
78670: POP
78671: GO 78677
// end ;
78673: GO 78642
78675: POP
78676: POP
// end ;
78677: LD_VAR 0 3
78681: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78682: LD_INT 0
78684: PPUSH
78685: PPUSH
78686: PPUSH
78687: PPUSH
// if not unit or not points then
78688: LD_VAR 0 1
78692: NOT
78693: PUSH
78694: LD_VAR 0 2
78698: NOT
78699: OR
78700: IFFALSE 78704
// exit ;
78702: GO 78794
// dist := 99999 ;
78704: LD_ADDR_VAR 0 5
78708: PUSH
78709: LD_INT 99999
78711: ST_TO_ADDR
// for i in points do
78712: LD_ADDR_VAR 0 4
78716: PUSH
78717: LD_VAR 0 2
78721: PUSH
78722: FOR_IN
78723: IFFALSE 78792
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78725: LD_ADDR_VAR 0 6
78729: PUSH
78730: LD_VAR 0 1
78734: PPUSH
78735: LD_VAR 0 4
78739: PUSH
78740: LD_INT 1
78742: ARRAY
78743: PPUSH
78744: LD_VAR 0 4
78748: PUSH
78749: LD_INT 2
78751: ARRAY
78752: PPUSH
78753: CALL_OW 297
78757: ST_TO_ADDR
// if tmpDist < dist then
78758: LD_VAR 0 6
78762: PUSH
78763: LD_VAR 0 5
78767: LESS
78768: IFFALSE 78790
// begin result := i ;
78770: LD_ADDR_VAR 0 3
78774: PUSH
78775: LD_VAR 0 4
78779: ST_TO_ADDR
// dist := tmpDist ;
78780: LD_ADDR_VAR 0 5
78784: PUSH
78785: LD_VAR 0 6
78789: ST_TO_ADDR
// end ; end ;
78790: GO 78722
78792: POP
78793: POP
// end ;
78794: LD_VAR 0 3
78798: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
78799: LD_INT 0
78801: PPUSH
// uc_side := side ;
78802: LD_ADDR_OWVAR 20
78806: PUSH
78807: LD_VAR 0 1
78811: ST_TO_ADDR
// uc_nation := 3 ;
78812: LD_ADDR_OWVAR 21
78816: PUSH
78817: LD_INT 3
78819: ST_TO_ADDR
// vc_chassis := 25 ;
78820: LD_ADDR_OWVAR 37
78824: PUSH
78825: LD_INT 25
78827: ST_TO_ADDR
// vc_engine := engine_siberite ;
78828: LD_ADDR_OWVAR 39
78832: PUSH
78833: LD_INT 3
78835: ST_TO_ADDR
// vc_control := control_computer ;
78836: LD_ADDR_OWVAR 38
78840: PUSH
78841: LD_INT 3
78843: ST_TO_ADDR
// vc_weapon := 59 ;
78844: LD_ADDR_OWVAR 40
78848: PUSH
78849: LD_INT 59
78851: ST_TO_ADDR
// result := CreateVehicle ;
78852: LD_ADDR_VAR 0 5
78856: PUSH
78857: CALL_OW 45
78861: ST_TO_ADDR
// SetDir ( result , d ) ;
78862: LD_VAR 0 5
78866: PPUSH
78867: LD_VAR 0 4
78871: PPUSH
78872: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
78876: LD_VAR 0 5
78880: PPUSH
78881: LD_VAR 0 2
78885: PPUSH
78886: LD_VAR 0 3
78890: PPUSH
78891: LD_INT 0
78893: PPUSH
78894: CALL_OW 48
// end ;
78898: LD_VAR 0 5
78902: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
78903: LD_INT 0
78905: PPUSH
78906: PPUSH
78907: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
78908: LD_ADDR_VAR 0 2
78912: PUSH
78913: LD_INT 0
78915: PUSH
78916: LD_INT 0
78918: PUSH
78919: LD_INT 0
78921: PUSH
78922: LD_INT 0
78924: PUSH
78925: EMPTY
78926: LIST
78927: LIST
78928: LIST
78929: LIST
78930: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
78931: LD_VAR 0 1
78935: NOT
78936: PUSH
78937: LD_VAR 0 1
78941: PPUSH
78942: CALL_OW 264
78946: PUSH
78947: LD_INT 12
78949: PUSH
78950: LD_INT 51
78952: PUSH
78953: LD_INT 32
78955: PUSH
78956: LD_INT 89
78958: PUSH
78959: EMPTY
78960: LIST
78961: LIST
78962: LIST
78963: LIST
78964: IN
78965: NOT
78966: OR
78967: IFFALSE 78971
// exit ;
78969: GO 79069
// for i := 1 to 3 do
78971: LD_ADDR_VAR 0 3
78975: PUSH
78976: DOUBLE
78977: LD_INT 1
78979: DEC
78980: ST_TO_ADDR
78981: LD_INT 3
78983: PUSH
78984: FOR_TO
78985: IFFALSE 79067
// begin tmp := GetCargo ( cargo , i ) ;
78987: LD_ADDR_VAR 0 4
78991: PUSH
78992: LD_VAR 0 1
78996: PPUSH
78997: LD_VAR 0 3
79001: PPUSH
79002: CALL_OW 289
79006: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79007: LD_ADDR_VAR 0 2
79011: PUSH
79012: LD_VAR 0 2
79016: PPUSH
79017: LD_VAR 0 3
79021: PPUSH
79022: LD_VAR 0 4
79026: PPUSH
79027: CALL_OW 1
79031: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79032: LD_ADDR_VAR 0 2
79036: PUSH
79037: LD_VAR 0 2
79041: PPUSH
79042: LD_INT 4
79044: PPUSH
79045: LD_VAR 0 2
79049: PUSH
79050: LD_INT 4
79052: ARRAY
79053: PUSH
79054: LD_VAR 0 4
79058: PLUS
79059: PPUSH
79060: CALL_OW 1
79064: ST_TO_ADDR
// end ;
79065: GO 78984
79067: POP
79068: POP
// end ;
79069: LD_VAR 0 2
79073: RET
// export function Length ( array ) ; begin
79074: LD_INT 0
79076: PPUSH
// result := array + 0 ;
79077: LD_ADDR_VAR 0 2
79081: PUSH
79082: LD_VAR 0 1
79086: PUSH
79087: LD_INT 0
79089: PLUS
79090: ST_TO_ADDR
// end ;
79091: LD_VAR 0 2
79095: RET
// export function PrepareArray ( array ) ; begin
79096: LD_INT 0
79098: PPUSH
// result := array diff 0 ;
79099: LD_ADDR_VAR 0 2
79103: PUSH
79104: LD_VAR 0 1
79108: PUSH
79109: LD_INT 0
79111: DIFF
79112: ST_TO_ADDR
// if not result [ 1 ] then
79113: LD_VAR 0 2
79117: PUSH
79118: LD_INT 1
79120: ARRAY
79121: NOT
79122: IFFALSE 79142
// result := Delete ( result , 1 ) ;
79124: LD_ADDR_VAR 0 2
79128: PUSH
79129: LD_VAR 0 2
79133: PPUSH
79134: LD_INT 1
79136: PPUSH
79137: CALL_OW 3
79141: ST_TO_ADDR
// end ;
79142: LD_VAR 0 2
79146: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
79147: LD_INT 0
79149: PPUSH
79150: PPUSH
79151: PPUSH
79152: PPUSH
// sibRocketRange := 25 ;
79153: LD_ADDR_VAR 0 6
79157: PUSH
79158: LD_INT 25
79160: ST_TO_ADDR
// result := false ;
79161: LD_ADDR_VAR 0 4
79165: PUSH
79166: LD_INT 0
79168: ST_TO_ADDR
// for i := 0 to 5 do
79169: LD_ADDR_VAR 0 5
79173: PUSH
79174: DOUBLE
79175: LD_INT 0
79177: DEC
79178: ST_TO_ADDR
79179: LD_INT 5
79181: PUSH
79182: FOR_TO
79183: IFFALSE 79250
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
79185: LD_VAR 0 1
79189: PPUSH
79190: LD_VAR 0 5
79194: PPUSH
79195: LD_VAR 0 6
79199: PPUSH
79200: CALL_OW 272
79204: PPUSH
79205: LD_VAR 0 2
79209: PPUSH
79210: LD_VAR 0 5
79214: PPUSH
79215: LD_VAR 0 6
79219: PPUSH
79220: CALL_OW 273
79224: PPUSH
79225: LD_VAR 0 3
79229: PPUSH
79230: CALL_OW 309
79234: IFFALSE 79248
// begin result := true ;
79236: LD_ADDR_VAR 0 4
79240: PUSH
79241: LD_INT 1
79243: ST_TO_ADDR
// exit ;
79244: POP
79245: POP
79246: GO 79252
// end ;
79248: GO 79182
79250: POP
79251: POP
// end ;
79252: LD_VAR 0 4
79256: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
79257: LD_INT 0
79259: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
79260: LD_VAR 0 1
79264: PPUSH
79265: LD_VAR 0 2
79269: PPUSH
79270: LD_INT 0
79272: PPUSH
79273: LD_INT 0
79275: PPUSH
79276: LD_INT 1
79278: PPUSH
79279: LD_INT 0
79281: PPUSH
79282: CALL_OW 587
// end ;
79286: LD_VAR 0 3
79290: RET
// export function CenterOnNow ( unit ) ; begin
79291: LD_INT 0
79293: PPUSH
// result := IsInUnit ( unit ) ;
79294: LD_ADDR_VAR 0 2
79298: PUSH
79299: LD_VAR 0 1
79303: PPUSH
79304: CALL_OW 310
79308: ST_TO_ADDR
// if not result then
79309: LD_VAR 0 2
79313: NOT
79314: IFFALSE 79326
// result := unit ;
79316: LD_ADDR_VAR 0 2
79320: PUSH
79321: LD_VAR 0 1
79325: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
79326: LD_VAR 0 1
79330: PPUSH
79331: CALL_OW 87
// end ;
79335: LD_VAR 0 2
79339: RET
// export function ComMoveHex ( unit , hex ) ; begin
79340: LD_INT 0
79342: PPUSH
// if not hex then
79343: LD_VAR 0 2
79347: NOT
79348: IFFALSE 79352
// exit ;
79350: GO 79405
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
79352: LD_VAR 0 2
79356: PUSH
79357: LD_INT 1
79359: ARRAY
79360: PPUSH
79361: LD_VAR 0 2
79365: PUSH
79366: LD_INT 2
79368: ARRAY
79369: PPUSH
79370: CALL_OW 428
79374: IFFALSE 79378
// exit ;
79376: GO 79405
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
79378: LD_VAR 0 1
79382: PPUSH
79383: LD_VAR 0 2
79387: PUSH
79388: LD_INT 1
79390: ARRAY
79391: PPUSH
79392: LD_VAR 0 2
79396: PUSH
79397: LD_INT 2
79399: ARRAY
79400: PPUSH
79401: CALL_OW 111
// end ;
79405: LD_VAR 0 3
79409: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
79410: LD_INT 0
79412: PPUSH
79413: PPUSH
79414: PPUSH
// if not unit or not enemy then
79415: LD_VAR 0 1
79419: NOT
79420: PUSH
79421: LD_VAR 0 2
79425: NOT
79426: OR
79427: IFFALSE 79431
// exit ;
79429: GO 79555
// x := GetX ( enemy ) ;
79431: LD_ADDR_VAR 0 4
79435: PUSH
79436: LD_VAR 0 2
79440: PPUSH
79441: CALL_OW 250
79445: ST_TO_ADDR
// y := GetY ( enemy ) ;
79446: LD_ADDR_VAR 0 5
79450: PUSH
79451: LD_VAR 0 2
79455: PPUSH
79456: CALL_OW 251
79460: ST_TO_ADDR
// if ValidHex ( x , y ) then
79461: LD_VAR 0 4
79465: PPUSH
79466: LD_VAR 0 5
79470: PPUSH
79471: CALL_OW 488
79475: IFFALSE 79555
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
79477: LD_VAR 0 2
79481: PPUSH
79482: CALL_OW 247
79486: PUSH
79487: LD_INT 3
79489: PUSH
79490: LD_INT 2
79492: PUSH
79493: EMPTY
79494: LIST
79495: LIST
79496: IN
79497: PUSH
79498: LD_VAR 0 1
79502: PPUSH
79503: CALL_OW 255
79507: PPUSH
79508: LD_VAR 0 2
79512: PPUSH
79513: CALL_OW 292
79517: AND
79518: IFFALSE 79536
// ComAttackUnit ( unit , enemy ) else
79520: LD_VAR 0 1
79524: PPUSH
79525: LD_VAR 0 2
79529: PPUSH
79530: CALL_OW 115
79534: GO 79555
// ComAgressiveMove ( unit , x , y ) ;
79536: LD_VAR 0 1
79540: PPUSH
79541: LD_VAR 0 4
79545: PPUSH
79546: LD_VAR 0 5
79550: PPUSH
79551: CALL_OW 114
// end ;
79555: LD_VAR 0 3
79559: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
79560: LD_INT 0
79562: PPUSH
79563: PPUSH
79564: PPUSH
// list := AreaToList ( area , 0 ) ;
79565: LD_ADDR_VAR 0 5
79569: PUSH
79570: LD_VAR 0 1
79574: PPUSH
79575: LD_INT 0
79577: PPUSH
79578: CALL_OW 517
79582: ST_TO_ADDR
// if not list then
79583: LD_VAR 0 5
79587: NOT
79588: IFFALSE 79592
// exit ;
79590: GO 79722
// if all then
79592: LD_VAR 0 2
79596: IFFALSE 79684
// begin for i := 1 to list [ 1 ] do
79598: LD_ADDR_VAR 0 4
79602: PUSH
79603: DOUBLE
79604: LD_INT 1
79606: DEC
79607: ST_TO_ADDR
79608: LD_VAR 0 5
79612: PUSH
79613: LD_INT 1
79615: ARRAY
79616: PUSH
79617: FOR_TO
79618: IFFALSE 79680
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
79620: LD_ADDR_VAR 0 3
79624: PUSH
79625: LD_VAR 0 3
79629: PPUSH
79630: LD_VAR 0 3
79634: PUSH
79635: LD_INT 1
79637: PLUS
79638: PPUSH
79639: LD_VAR 0 5
79643: PUSH
79644: LD_INT 1
79646: ARRAY
79647: PUSH
79648: LD_VAR 0 4
79652: ARRAY
79653: PUSH
79654: LD_VAR 0 5
79658: PUSH
79659: LD_INT 2
79661: ARRAY
79662: PUSH
79663: LD_VAR 0 4
79667: ARRAY
79668: PUSH
79669: EMPTY
79670: LIST
79671: LIST
79672: PPUSH
79673: CALL_OW 1
79677: ST_TO_ADDR
79678: GO 79617
79680: POP
79681: POP
// exit ;
79682: GO 79722
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
79684: LD_ADDR_VAR 0 3
79688: PUSH
79689: LD_VAR 0 5
79693: PUSH
79694: LD_INT 1
79696: ARRAY
79697: PUSH
79698: LD_INT 1
79700: ARRAY
79701: PUSH
79702: LD_VAR 0 5
79706: PUSH
79707: LD_INT 2
79709: ARRAY
79710: PUSH
79711: LD_INT 1
79713: ARRAY
79714: PUSH
79715: EMPTY
79716: LIST
79717: LIST
79718: PUSH
79719: EMPTY
79720: LIST
79721: ST_TO_ADDR
// end ;
79722: LD_VAR 0 3
79726: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
79727: LD_INT 0
79729: PPUSH
79730: PPUSH
// list := AreaToList ( area , 0 ) ;
79731: LD_ADDR_VAR 0 4
79735: PUSH
79736: LD_VAR 0 1
79740: PPUSH
79741: LD_INT 0
79743: PPUSH
79744: CALL_OW 517
79748: ST_TO_ADDR
// if not list then
79749: LD_VAR 0 4
79753: NOT
79754: IFFALSE 79758
// exit ;
79756: GO 79799
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
79758: LD_ADDR_VAR 0 3
79762: PUSH
79763: LD_VAR 0 4
79767: PUSH
79768: LD_INT 1
79770: ARRAY
79771: PUSH
79772: LD_INT 1
79774: ARRAY
79775: PUSH
79776: LD_VAR 0 4
79780: PUSH
79781: LD_INT 2
79783: ARRAY
79784: PUSH
79785: LD_INT 1
79787: ARRAY
79788: PUSH
79789: LD_VAR 0 2
79793: PUSH
79794: EMPTY
79795: LIST
79796: LIST
79797: LIST
79798: ST_TO_ADDR
// end ;
79799: LD_VAR 0 3
79803: RET
// export function First ( array ) ; begin
79804: LD_INT 0
79806: PPUSH
// if not array then
79807: LD_VAR 0 1
79811: NOT
79812: IFFALSE 79816
// exit ;
79814: GO 79830
// result := array [ 1 ] ;
79816: LD_ADDR_VAR 0 2
79820: PUSH
79821: LD_VAR 0 1
79825: PUSH
79826: LD_INT 1
79828: ARRAY
79829: ST_TO_ADDR
// end ;
79830: LD_VAR 0 2
79834: RET
// export function Last ( array ) ; begin
79835: LD_INT 0
79837: PPUSH
// if not array then
79838: LD_VAR 0 1
79842: NOT
79843: IFFALSE 79847
// exit ;
79845: GO 79863
// result := array [ array ] ;
79847: LD_ADDR_VAR 0 2
79851: PUSH
79852: LD_VAR 0 1
79856: PUSH
79857: LD_VAR 0 1
79861: ARRAY
79862: ST_TO_ADDR
// end ; end_of_file
79863: LD_VAR 0 2
79867: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79868: LD_VAR 0 1
79872: PUSH
79873: LD_INT 200
79875: DOUBLE
79876: GREATEREQUAL
79877: IFFALSE 79885
79879: LD_INT 299
79881: DOUBLE
79882: LESSEQUAL
79883: IFTRUE 79887
79885: GO 79919
79887: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79888: LD_VAR 0 1
79892: PPUSH
79893: LD_VAR 0 2
79897: PPUSH
79898: LD_VAR 0 3
79902: PPUSH
79903: LD_VAR 0 4
79907: PPUSH
79908: LD_VAR 0 5
79912: PPUSH
79913: CALL 33118 0 5
79917: GO 79996
79919: LD_INT 300
79921: DOUBLE
79922: GREATEREQUAL
79923: IFFALSE 79931
79925: LD_INT 399
79927: DOUBLE
79928: LESSEQUAL
79929: IFTRUE 79933
79931: GO 79995
79933: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79934: LD_VAR 0 1
79938: PPUSH
79939: LD_VAR 0 2
79943: PPUSH
79944: LD_VAR 0 3
79948: PPUSH
79949: LD_VAR 0 4
79953: PPUSH
79954: LD_VAR 0 5
79958: PPUSH
79959: LD_VAR 0 6
79963: PPUSH
79964: LD_VAR 0 7
79968: PPUSH
79969: LD_VAR 0 8
79973: PPUSH
79974: LD_VAR 0 9
79978: PPUSH
79979: LD_VAR 0 10
79983: PPUSH
79984: LD_VAR 0 11
79988: PPUSH
79989: CALL 29443 0 11
79993: GO 79996
79995: POP
// end ;
79996: PPOPN 11
79998: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79999: LD_VAR 0 1
80003: PPUSH
80004: LD_VAR 0 2
80008: PPUSH
80009: LD_VAR 0 3
80013: PPUSH
80014: LD_VAR 0 4
80018: PPUSH
80019: LD_VAR 0 5
80023: PPUSH
80024: CALL 32854 0 5
// end ; end_of_file
80028: PPOPN 5
80030: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80031: LD_VAR 0 1
80035: PPUSH
80036: LD_VAR 0 2
80040: PPUSH
80041: LD_VAR 0 3
80045: PPUSH
80046: LD_VAR 0 4
80050: PPUSH
80051: LD_VAR 0 5
80055: PPUSH
80056: LD_VAR 0 6
80060: PPUSH
80061: CALL 17095 0 6
// end ;
80065: PPOPN 6
80067: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80068: LD_INT 0
80070: PPUSH
// begin if not units then
80071: LD_VAR 0 1
80075: NOT
80076: IFFALSE 80080
// exit ;
80078: GO 80080
// end ;
80080: PPOPN 7
80082: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80083: CALL 16999 0 0
// end ;
80087: PPOPN 1
80089: END
