// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix ; starting begin mission_prefix := 02_ ;
   0: LD_ADDR_EXP 33
   4: PUSH
   5: LD_STRING 02_
   7: ST_TO_ADDR
// RuSoldMinLevel = 0 ;
   8: LD_ADDR_EXP 13
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
  16: LD_ADDR_EXP 14
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpJMM = 0 ;
  24: LD_ADDR_EXP 10
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpBobby = 0 ;
  32: LD_ADDR_EXP 11
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// hpCyrus = 0 ;
  40: LD_ADDR_EXP 12
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// cargoEscape = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailInBase = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// mikhailDepot = 0 ;
  72: LD_ADDR_EXP 23
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// tigersRespawn = 0 ;
  80: LD_ADDR_EXP 30
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// cargoRespawn = 0 ;
  88: LD_ADDR_EXP 28
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// cargoSee = 0 ;
  96: LD_ADDR_EXP 29
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// lastBattle = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// deadsCounter = 0 ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// spotCorpses = 0 ;
 120: LD_ADDR_EXP 32
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 128: LD_ADDR_EXP 25
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 135: LD_ADDR_EXP 24
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// attackGroup = [ ] ;
 142: LD_ADDR_EXP 26
 146: PUSH
 147: EMPTY
 148: ST_TO_ADDR
// RandomizeAll ;
 149: CALL_OW 11
// InGameOn ;
 153: CALL_OW 8
// Resetfog ;
 157: CALL_OW 335
// AnimateTrees ( true ) ;
 161: LD_INT 1
 163: PPUSH
 164: CALL_OW 573
// PrepareDifficulty ;
 168: CALL 10386 0 0
// PrepareRussianCommander ;
 172: CALL 11842 0 0
// PrepareSouthBase ;
 176: CALL 11925 0 0
// PrepareNorthBase ;
 180: CALL 12264 0 0
// PrepareOtherRussians ;
 184: CALL 12630 0 0
// PrepareHeroes ;
 188: CALL 10701 0 0
// PrepareLisSquad ;
 192: CALL 11029 0 0
// PrepareOtherAmericans ;
 196: CALL 11374 0 0
// end ; end_of_file
 200: END
// every 1 do var tmp ;
 201: GO 203
 203: DISABLE
 204: LD_INT 0
 206: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 207: LD_EXP 1
 211: PPUSH
 212: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 216: LD_ADDR_VAR 0 1
 220: PUSH
 221: LD_INT 22
 223: PUSH
 224: LD_INT 4
 226: PUSH
 227: EMPTY
 228: LIST
 229: LIST
 230: PUSH
 231: LD_INT 21
 233: PUSH
 234: LD_INT 1
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: EMPTY
 242: LIST
 243: LIST
 244: PPUSH
 245: CALL_OW 69
 249: PUSH
 250: LD_EXP 4
 254: PUSH
 255: EMPTY
 256: LIST
 257: DIFF
 258: ST_TO_ADDR
// if Cyrus and Bobby then
 259: LD_EXP 3
 263: PUSH
 264: LD_EXP 2
 268: AND
 269: IFFALSE 599
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 271: LD_EXP 3
 275: PPUSH
 276: LD_INT 43
 278: PPUSH
 279: LD_INT 72
 281: PPUSH
 282: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 286: LD_EXP 2
 290: PPUSH
 291: LD_INT 44
 293: PPUSH
 294: LD_INT 70
 296: PPUSH
 297: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 301: LD_EXP 1
 305: PPUSH
 306: LD_INT 46
 308: PPUSH
 309: LD_INT 73
 311: PPUSH
 312: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 316: LD_EXP 3
 320: PPUSH
 321: LD_STRING D1a-Cyrus-1
 323: PPUSH
 324: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 328: LD_EXP 1
 332: PPUSH
 333: LD_STRING D1a-JMM-1
 335: PPUSH
 336: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 340: LD_EXP 3
 344: PPUSH
 345: LD_INT 37
 347: PPUSH
 348: LD_INT 66
 350: PPUSH
 351: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 355: LD_EXP 2
 359: PPUSH
 360: LD_INT 41
 362: PPUSH
 363: LD_INT 67
 365: PPUSH
 366: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 370: LD_EXP 1
 374: PPUSH
 375: LD_INT 38
 377: PPUSH
 378: LD_INT 64
 380: PPUSH
 381: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 385: LD_EXP 2
 389: PPUSH
 390: LD_STRING D1a-Bobby-2
 392: PPUSH
 393: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 397: LD_EXP 3
 401: PPUSH
 402: LD_INT 35
 404: PPUSH
 405: LD_INT 62
 407: PPUSH
 408: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 412: LD_EXP 2
 416: PPUSH
 417: LD_INT 32
 419: PPUSH
 420: LD_INT 60
 422: PPUSH
 423: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 427: LD_EXP 1
 431: PPUSH
 432: LD_INT 35
 434: PPUSH
 435: LD_INT 60
 437: PPUSH
 438: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 442: LD_EXP 1
 446: PPUSH
 447: LD_STRING D1a-JMM-2
 449: PPUSH
 450: CALL_OW 88
// ComWalk ( Lisa ) ;
 454: LD_EXP 4
 458: PPUSH
 459: CALL_OW 138
// wait ( 0 0$1 ) ;
 463: LD_INT 35
 465: PPUSH
 466: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 470: LD_EXP 4
 474: PPUSH
 475: LD_EXP 1
 479: PPUSH
 480: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 484: LD_EXP 1
 488: PUSH
 489: LD_EXP 3
 493: PUSH
 494: LD_EXP 2
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: PPUSH
 504: LD_EXP 4
 508: PPUSH
 509: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 513: LD_VAR 0 1
 517: PUSH
 518: LD_INT 1
 520: ARRAY
 521: PPUSH
 522: LD_INT 33
 524: PPUSH
 525: LD_INT 55
 527: PPUSH
 528: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 532: LD_VAR 0 1
 536: PUSH
 537: LD_INT 2
 539: ARRAY
 540: PPUSH
 541: LD_INT 30
 543: PPUSH
 544: LD_INT 54
 546: PPUSH
 547: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 551: LD_VAR 0 1
 555: PUSH
 556: LD_INT 1
 558: ARRAY
 559: PPUSH
 560: LD_EXP 1
 564: PPUSH
 565: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 569: LD_VAR 0 1
 573: PUSH
 574: LD_INT 2
 576: ARRAY
 577: PPUSH
 578: LD_EXP 1
 582: PPUSH
 583: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 587: LD_EXP 4
 591: PPUSH
 592: LD_STRING D1a-Lisa-2
 594: PPUSH
 595: CALL_OW 88
// end ; if Cyrus and not Bobby then
 599: LD_EXP 3
 603: PUSH
 604: LD_EXP 2
 608: NOT
 609: AND
 610: IFFALSE 815
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 612: LD_EXP 3
 616: PPUSH
 617: LD_INT 43
 619: PPUSH
 620: LD_INT 72
 622: PPUSH
 623: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 627: LD_EXP 1
 631: PPUSH
 632: LD_INT 46
 634: PPUSH
 635: LD_INT 73
 637: PPUSH
 638: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 642: LD_EXP 3
 646: PPUSH
 647: LD_STRING D1a-Cyrus-1
 649: PPUSH
 650: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 654: LD_EXP 1
 658: PPUSH
 659: LD_STRING D1a-JMM-1
 661: PPUSH
 662: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 666: LD_EXP 3
 670: PPUSH
 671: LD_INT 37
 673: PPUSH
 674: LD_INT 66
 676: PPUSH
 677: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 681: LD_EXP 1
 685: PPUSH
 686: LD_INT 38
 688: PPUSH
 689: LD_INT 64
 691: PPUSH
 692: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 696: LD_EXP 3
 700: PPUSH
 701: LD_STRING D1a-Cyrus-2
 703: PPUSH
 704: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 708: LD_EXP 3
 712: PPUSH
 713: LD_INT 35
 715: PPUSH
 716: LD_INT 62
 718: PPUSH
 719: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 723: LD_EXP 1
 727: PPUSH
 728: LD_INT 35
 730: PPUSH
 731: LD_INT 60
 733: PPUSH
 734: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 738: LD_EXP 1
 742: PPUSH
 743: LD_STRING D1a-JMM-2
 745: PPUSH
 746: CALL_OW 88
// ComWalk ( Lisa ) ;
 750: LD_EXP 4
 754: PPUSH
 755: CALL_OW 138
// wait ( 0 0$1 ) ;
 759: LD_INT 35
 761: PPUSH
 762: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 766: LD_EXP 4
 770: PPUSH
 771: LD_EXP 1
 775: PPUSH
 776: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 780: LD_EXP 4
 784: PPUSH
 785: LD_STRING D1a-Lisa-2
 787: PPUSH
 788: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 792: LD_EXP 1
 796: PUSH
 797: LD_EXP 3
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: PPUSH
 806: LD_EXP 4
 810: PPUSH
 811: CALL_OW 119
// end ; if not Cyrus and Bobby then
 815: LD_EXP 3
 819: NOT
 820: PUSH
 821: LD_EXP 2
 825: AND
 826: IFFALSE 1105
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 828: LD_EXP 2
 832: PPUSH
 833: LD_INT 44
 835: PPUSH
 836: LD_INT 70
 838: PPUSH
 839: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 843: LD_EXP 1
 847: PPUSH
 848: LD_INT 46
 850: PPUSH
 851: LD_INT 73
 853: PPUSH
 854: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 858: LD_EXP 2
 862: PPUSH
 863: LD_STRING D1a-Bobby-1
 865: PPUSH
 866: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 870: LD_EXP 1
 874: PPUSH
 875: LD_STRING D1a-JMM-1
 877: PPUSH
 878: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 882: LD_EXP 2
 886: PPUSH
 887: LD_INT 37
 889: PPUSH
 890: LD_INT 66
 892: PPUSH
 893: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 897: LD_EXP 1
 901: PPUSH
 902: LD_INT 38
 904: PPUSH
 905: LD_INT 64
 907: PPUSH
 908: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 912: LD_EXP 2
 916: PPUSH
 917: LD_STRING D1a-Bobby-2
 919: PPUSH
 920: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 924: LD_EXP 2
 928: PPUSH
 929: LD_INT 35
 931: PPUSH
 932: LD_INT 62
 934: PPUSH
 935: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 939: LD_EXP 1
 943: PPUSH
 944: LD_INT 35
 946: PPUSH
 947: LD_INT 60
 949: PPUSH
 950: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 954: LD_EXP 1
 958: PPUSH
 959: LD_STRING D1a-JMM-2
 961: PPUSH
 962: CALL_OW 88
// ComWalk ( Lisa ) ;
 966: LD_EXP 4
 970: PPUSH
 971: CALL_OW 138
// wait ( 0 0$1 ) ;
 975: LD_INT 35
 977: PPUSH
 978: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 982: LD_EXP 4
 986: PPUSH
 987: LD_EXP 1
 991: PPUSH
 992: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 996: LD_EXP 1
1000: PUSH
1001: LD_EXP 3
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PPUSH
1010: LD_EXP 4
1014: PPUSH
1015: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 1
1026: ARRAY
1027: PPUSH
1028: LD_INT 33
1030: PPUSH
1031: LD_INT 55
1033: PPUSH
1034: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1038: LD_VAR 0 1
1042: PUSH
1043: LD_INT 2
1045: ARRAY
1046: PPUSH
1047: LD_INT 30
1049: PPUSH
1050: LD_INT 54
1052: PPUSH
1053: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1057: LD_VAR 0 1
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: LD_EXP 1
1070: PPUSH
1071: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1075: LD_VAR 0 1
1079: PUSH
1080: LD_INT 2
1082: ARRAY
1083: PPUSH
1084: LD_EXP 1
1088: PPUSH
1089: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1093: LD_EXP 4
1097: PPUSH
1098: LD_STRING D1a-Lisa-2
1100: PPUSH
1101: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1105: LD_EXP 3
1109: NOT
1110: PUSH
1111: LD_EXP 2
1115: NOT
1116: AND
1117: IFFALSE 1331
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1119: LD_EXP 1
1123: PPUSH
1124: LD_INT 37
1126: PPUSH
1127: LD_INT 66
1129: PPUSH
1130: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1134: LD_EXP 1
1138: PPUSH
1139: LD_STRING D1b-JMM-1
1141: PPUSH
1142: CALL_OW 88
// ComCrawl ( JMM ) ;
1146: LD_EXP 1
1150: PPUSH
1151: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1155: LD_EXP 1
1159: PPUSH
1160: LD_INT 35
1162: PPUSH
1163: LD_INT 60
1165: PPUSH
1166: CALL_OW 171
// wait ( 0 0$8 ) ;
1170: LD_INT 280
1172: PPUSH
1173: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1177: LD_EXP 1
1181: PPUSH
1182: LD_STRING D1b-JMM-1a
1184: PPUSH
1185: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1189: LD_EXP 1
1193: PUSH
1194: LD_EXP 4
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PPUSH
1203: CALL_OW 138
// wait ( 0 0$1 ) ;
1207: LD_INT 35
1209: PPUSH
1210: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1214: LD_EXP 4
1218: PPUSH
1219: LD_EXP 1
1223: PPUSH
1224: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1228: LD_EXP 1
1232: PUSH
1233: EMPTY
1234: LIST
1235: PPUSH
1236: LD_EXP 4
1240: PPUSH
1241: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1245: LD_VAR 0 1
1249: PUSH
1250: LD_INT 1
1252: ARRAY
1253: PPUSH
1254: LD_INT 33
1256: PPUSH
1257: LD_INT 55
1259: PPUSH
1260: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: ARRAY
1272: PPUSH
1273: LD_INT 30
1275: PPUSH
1276: LD_INT 54
1278: PPUSH
1279: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1283: LD_VAR 0 1
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: LD_EXP 1
1296: PPUSH
1297: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1301: LD_VAR 0 1
1305: PUSH
1306: LD_INT 2
1308: ARRAY
1309: PPUSH
1310: LD_EXP 1
1314: PPUSH
1315: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1319: LD_EXP 4
1323: PPUSH
1324: LD_STRING D1b-Lisa-1
1326: PPUSH
1327: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1331: LD_EXP 1
1335: PPUSH
1336: LD_STRING D1-JMM-1
1338: PPUSH
1339: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1343: LD_EXP 4
1347: PPUSH
1348: LD_STRING D1-Lisa-1
1350: PPUSH
1351: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1355: LD_EXP 1
1359: PPUSH
1360: LD_STRING D1-JMM-2
1362: PPUSH
1363: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1367: LD_EXP 9
1371: PPUSH
1372: LD_STRING D1-Pow-2
1374: PPUSH
1375: CALL_OW 94
// if Cyrus then
1379: LD_EXP 3
1383: IFFALSE 1409
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1385: LD_EXP 3
1389: PPUSH
1390: LD_STRING D1-Cyrus-2
1392: PPUSH
1393: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1397: LD_EXP 1
1401: PPUSH
1402: LD_STRING D1-JMM-3
1404: PPUSH
1405: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1409: LD_EXP 9
1413: PPUSH
1414: LD_STRING D1-Pow-3
1416: PPUSH
1417: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1421: LD_EXP 1
1425: PPUSH
1426: LD_STRING D1-JMM-4
1428: PPUSH
1429: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1433: LD_EXP 9
1437: PPUSH
1438: LD_STRING D1-Pow-4
1440: PPUSH
1441: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1445: LD_EXP 9
1449: PPUSH
1450: LD_STRING D1-Pow-4a
1452: PPUSH
1453: CALL_OW 94
// if Cyrus then
1457: LD_EXP 3
1461: IFFALSE 1475
// Say ( Cyrus , D1-Cyrus-4 ) ;
1463: LD_EXP 3
1467: PPUSH
1468: LD_STRING D1-Cyrus-4
1470: PPUSH
1471: CALL_OW 88
// if Bobby then
1475: LD_EXP 2
1479: IFFALSE 1517
// begin Say ( Bobby , D1-Bobby-4 ) ;
1481: LD_EXP 2
1485: PPUSH
1486: LD_STRING D1-Bobby-4
1488: PPUSH
1489: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1493: LD_EXP 4
1497: PPUSH
1498: LD_STRING D1-Lisa-4
1500: PPUSH
1501: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1505: LD_EXP 1
1509: PPUSH
1510: LD_STRING D1-JMM-5
1512: PPUSH
1513: CALL_OW 88
// end ; InGameOff ;
1517: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1521: LD_INT 22
1523: PUSH
1524: LD_INT 4
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PPUSH
1531: CALL_OW 69
1535: PUSH
1536: LD_EXP 6
1540: PUSH
1541: LD_EXP 7
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: DIFF
1550: PPUSH
1551: LD_INT 1
1553: PPUSH
1554: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1558: LD_STRING M1
1560: PPUSH
1561: CALL_OW 337
// SaveForQuickRestart ;
1565: CALL_OW 22
// end ;
1569: PPOPN 1
1571: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1572: LD_INT 7
1574: PPUSH
1575: LD_INT 22
1577: PUSH
1578: LD_INT 1
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: PPUSH
1585: CALL_OW 70
1589: PUSH
1590: LD_INT 0
1592: GREATER
1593: IFFALSE 2010
1595: GO 1597
1597: DISABLE
// begin InGameOn ;
1598: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1602: LD_INT 22
1604: PUSH
1605: LD_INT 1
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 21
1614: PUSH
1615: LD_INT 1
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PPUSH
1626: CALL_OW 69
1630: PPUSH
1631: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1635: LD_INT 24
1637: PPUSH
1638: LD_INT 32
1640: PPUSH
1641: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1645: LD_EXP 5
1649: PPUSH
1650: LD_INT 4
1652: PPUSH
1653: LD_INT 1
1655: PPUSH
1656: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1660: LD_EXP 5
1664: PPUSH
1665: LD_INT 4
1667: PPUSH
1668: CALL_OW 336
// wait ( 0 0$1 ) ;
1672: LD_INT 35
1674: PPUSH
1675: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1679: LD_EXP 5
1683: PPUSH
1684: LD_INT 27
1686: PPUSH
1687: LD_INT 38
1689: PPUSH
1690: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1694: LD_EXP 5
1698: PPUSH
1699: LD_EXP 1
1703: PPUSH
1704: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1708: LD_INT 22
1710: PUSH
1711: LD_INT 1
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 21
1720: PUSH
1721: LD_INT 1
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: PPUSH
1732: CALL_OW 69
1736: PUSH
1737: LD_EXP 5
1741: PUSH
1742: EMPTY
1743: LIST
1744: DIFF
1745: PPUSH
1746: LD_EXP 5
1750: PPUSH
1751: CALL_OW 119
// wait ( 0 0$1 ) ;
1755: LD_INT 35
1757: PPUSH
1758: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1762: LD_EXP 5
1766: PPUSH
1767: LD_STRING D2a-Khat-1
1769: PPUSH
1770: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1774: LD_EXP 1
1778: PPUSH
1779: LD_STRING D2a-JMM-1
1781: PPUSH
1782: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1786: LD_EXP 5
1790: PPUSH
1791: LD_STRING D2a-Khat-2
1793: PPUSH
1794: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1798: LD_EXP 1
1802: PPUSH
1803: LD_STRING D2a-JMM-2
1805: PPUSH
1806: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1810: LD_EXP 5
1814: PPUSH
1815: LD_STRING D2a-Khat-3
1817: PPUSH
1818: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1822: LD_EXP 1
1826: PPUSH
1827: LD_STRING D2a-JMM-3
1829: PPUSH
1830: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1834: LD_EXP 5
1838: PPUSH
1839: LD_STRING D2a-Khat-4
1841: PPUSH
1842: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1846: LD_EXP 1
1850: PPUSH
1851: LD_STRING D2a-JMM-4
1853: PPUSH
1854: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1858: LD_EXP 5
1862: PPUSH
1863: LD_STRING D2a-Khat-5
1865: PPUSH
1866: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1870: LD_EXP 1
1874: PPUSH
1875: LD_STRING D2a-JMM-5
1877: PPUSH
1878: CALL_OW 88
// InGameOff ;
1882: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1886: LD_INT 22
1888: PUSH
1889: LD_INT 1
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: PUSH
1896: LD_INT 21
1898: PUSH
1899: LD_INT 1
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 3
1908: PUSH
1909: LD_INT 24
1911: PUSH
1912: LD_INT 800
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: PPUSH
1928: CALL_OW 69
1932: PUSH
1933: LD_INT 0
1935: GREATER
1936: IFFALSE 2010
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1938: LD_EXP 5
1942: PPUSH
1943: LD_INT 22
1945: PUSH
1946: LD_INT 1
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 21
1955: PUSH
1956: LD_INT 1
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: PUSH
1963: LD_INT 3
1965: PUSH
1966: LD_INT 24
1968: PUSH
1969: LD_INT 1000
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PPUSH
1985: CALL_OW 69
1989: PUSH
1990: LD_INT 1
1992: ARRAY
1993: PPUSH
1994: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1998: LD_EXP 5
2002: PPUSH
2003: LD_STRING D2b-Khat-1
2005: PPUSH
2006: CALL_OW 88
// end ; end ;
2010: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp , p ;
2011: LD_INT 15
2013: PPUSH
2014: LD_INT 22
2016: PUSH
2017: LD_INT 1
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PPUSH
2024: CALL_OW 70
2028: PUSH
2029: LD_INT 0
2031: GREATER
2032: IFFALSE 3229
2034: GO 2036
2036: DISABLE
2037: LD_INT 0
2039: PPUSH
2040: PPUSH
2041: PPUSH
2042: PPUSH
2043: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2044: LD_ADDR_VAR 0 2
2048: PUSH
2049: LD_INT 999
2051: PUSH
2052: LD_INT 999
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2062: LD_ADDR_VAR 0 4
2066: PUSH
2067: LD_INT 22
2069: PUSH
2070: LD_INT 1
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: PUSH
2077: LD_INT 21
2079: PUSH
2080: LD_INT 1
2082: PUSH
2083: EMPTY
2084: LIST
2085: LIST
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PPUSH
2091: CALL_OW 69
2095: PUSH
2096: LD_EXP 1
2100: PUSH
2101: LD_EXP 2
2105: PUSH
2106: LD_EXP 3
2110: PUSH
2111: LD_EXP 4
2115: PUSH
2116: LD_EXP 5
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: DIFF
2128: ST_TO_ADDR
// PrepareDeadSoldiers ;
2129: CALL 11532 0 0
// spotCorpses = 1 ;
2133: LD_ADDR_EXP 32
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2141: LD_INT 70
2143: PPUSH
2144: CALL_OW 67
// InGameOn ;
2148: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2152: LD_INT 23
2154: PPUSH
2155: LD_INT 12
2157: PPUSH
2158: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2162: LD_ADDR_VAR 0 3
2166: PUSH
2167: LD_VAR 0 2
2171: PUSH
2172: LD_INT 1
2174: ARRAY
2175: PUSH
2176: LD_INT 2
2178: ARRAY
2179: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2180: LD_ADDR_VAR 0 1
2184: PUSH
2185: LD_INT 22
2187: PUSH
2188: LD_INT 1
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 21
2197: PUSH
2198: LD_INT 1
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: PPUSH
2209: CALL_OW 69
2213: PUSH
2214: LD_EXP 1
2218: PUSH
2219: LD_EXP 5
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: DIFF
2228: PUSH
2229: FOR_IN
2230: IFFALSE 2281
// if IsOK ( i ) then
2232: LD_VAR 0 1
2236: PPUSH
2237: CALL_OW 302
2241: IFFALSE 2279
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: LD_VAR 0 2
2252: PUSH
2253: LD_VAR 0 1
2257: PUSH
2258: LD_VAR 0 1
2262: PPUSH
2263: LD_INT 16
2265: PPUSH
2266: CALL_OW 299
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: EMPTY
2276: LIST
2277: ADD
2278: ST_TO_ADDR
2279: GO 2229
2281: POP
2282: POP
// for i = 2 to distanceTab do
2283: LD_ADDR_VAR 0 1
2287: PUSH
2288: DOUBLE
2289: LD_INT 2
2291: DEC
2292: ST_TO_ADDR
2293: LD_VAR 0 2
2297: PUSH
2298: FOR_TO
2299: IFFALSE 2345
// if distanceTab [ i ] [ 2 ] < min then
2301: LD_VAR 0 2
2305: PUSH
2306: LD_VAR 0 1
2310: ARRAY
2311: PUSH
2312: LD_INT 2
2314: ARRAY
2315: PUSH
2316: LD_VAR 0 3
2320: LESS
2321: IFFALSE 2343
// min = distanceTab [ i ] [ 2 ] ;
2323: LD_ADDR_VAR 0 3
2327: PUSH
2328: LD_VAR 0 2
2332: PUSH
2333: LD_VAR 0 1
2337: ARRAY
2338: PUSH
2339: LD_INT 2
2341: ARRAY
2342: ST_TO_ADDR
2343: GO 2298
2345: POP
2346: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2347: LD_ADDR_VAR 0 1
2351: PUSH
2352: LD_INT 22
2354: PUSH
2355: LD_INT 1
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: LD_INT 21
2364: PUSH
2365: LD_INT 1
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PPUSH
2376: CALL_OW 69
2380: PUSH
2381: LD_EXP 1
2385: PUSH
2386: EMPTY
2387: LIST
2388: DIFF
2389: PUSH
2390: FOR_IN
2391: IFFALSE 2461
// begin ComMoveToArea ( i , DeadCutscene ) ;
2393: LD_VAR 0 1
2397: PPUSH
2398: LD_INT 28
2400: PPUSH
2401: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2405: LD_EXP 1
2409: PPUSH
2410: LD_INT 30
2412: PPUSH
2413: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2417: LD_VAR 0 1
2421: PPUSH
2422: LD_INT 23
2424: PPUSH
2425: LD_INT 11
2427: PPUSH
2428: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2432: LD_EXP 1
2436: PPUSH
2437: LD_INT 23
2439: PPUSH
2440: LD_INT 11
2442: PPUSH
2443: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2447: LD_EXP 34
2451: PPUSH
2452: LD_INT 250
2454: PPUSH
2455: CALL_OW 234
// end ;
2459: GO 2390
2461: POP
2462: POP
// for i = 2 to distanceTab do
2463: LD_ADDR_VAR 0 1
2467: PUSH
2468: DOUBLE
2469: LD_INT 2
2471: DEC
2472: ST_TO_ADDR
2473: LD_VAR 0 2
2477: PUSH
2478: FOR_TO
2479: IFFALSE 2865
// begin if distanceTab [ i ] [ 2 ] = min then
2481: LD_VAR 0 2
2485: PUSH
2486: LD_VAR 0 1
2490: ARRAY
2491: PUSH
2492: LD_INT 2
2494: ARRAY
2495: PUSH
2496: LD_VAR 0 3
2500: EQUAL
2501: IFFALSE 2863
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2503: LD_VAR 0 2
2507: PUSH
2508: LD_VAR 0 1
2512: ARRAY
2513: PUSH
2514: LD_INT 1
2516: ARRAY
2517: PUSH
2518: LD_EXP 2
2522: EQUAL
2523: IFFALSE 2537
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2525: LD_EXP 2
2529: PPUSH
2530: LD_STRING DCorpses-Bobby-1
2532: PPUSH
2533: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2537: LD_VAR 0 2
2541: PUSH
2542: LD_VAR 0 1
2546: ARRAY
2547: PUSH
2548: LD_INT 1
2550: ARRAY
2551: PUSH
2552: LD_EXP 3
2556: EQUAL
2557: IFFALSE 2571
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2559: LD_EXP 3
2563: PPUSH
2564: LD_STRING DCorpses-Cyrus-1
2566: PPUSH
2567: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2571: LD_VAR 0 2
2575: PUSH
2576: LD_VAR 0 1
2580: ARRAY
2581: PUSH
2582: LD_INT 1
2584: ARRAY
2585: PUSH
2586: LD_EXP 4
2590: EQUAL
2591: IFFALSE 2605
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2593: LD_EXP 4
2597: PPUSH
2598: LD_STRING DCorpses-Lisa-1
2600: PPUSH
2601: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2605: LD_VAR 0 2
2609: PUSH
2610: LD_VAR 0 1
2614: ARRAY
2615: PUSH
2616: LD_INT 1
2618: ARRAY
2619: PUSH
2620: LD_VAR 0 4
2624: PUSH
2625: LD_INT 1
2627: ARRAY
2628: EQUAL
2629: PUSH
2630: LD_VAR 0 4
2634: PUSH
2635: LD_INT 1
2637: ARRAY
2638: PPUSH
2639: CALL_OW 258
2643: PUSH
2644: LD_INT 1
2646: EQUAL
2647: AND
2648: IFFALSE 2666
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2650: LD_VAR 0 4
2654: PUSH
2655: LD_INT 1
2657: ARRAY
2658: PPUSH
2659: LD_STRING DCorpses-Sol1-1
2661: PPUSH
2662: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2666: LD_VAR 0 2
2670: PUSH
2671: LD_VAR 0 1
2675: ARRAY
2676: PUSH
2677: LD_INT 1
2679: ARRAY
2680: PUSH
2681: LD_VAR 0 4
2685: PUSH
2686: LD_INT 1
2688: ARRAY
2689: EQUAL
2690: PUSH
2691: LD_VAR 0 4
2695: PUSH
2696: LD_INT 1
2698: ARRAY
2699: PPUSH
2700: CALL_OW 258
2704: PUSH
2705: LD_INT 2
2707: EQUAL
2708: AND
2709: IFFALSE 2727
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2711: LD_VAR 0 4
2715: PUSH
2716: LD_INT 1
2718: ARRAY
2719: PPUSH
2720: LD_STRING DCorpses-FSol1-1
2722: PPUSH
2723: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2727: LD_VAR 0 2
2731: PUSH
2732: LD_VAR 0 1
2736: ARRAY
2737: PUSH
2738: LD_INT 1
2740: ARRAY
2741: PUSH
2742: LD_VAR 0 4
2746: PUSH
2747: LD_INT 2
2749: ARRAY
2750: EQUAL
2751: PUSH
2752: LD_VAR 0 4
2756: PUSH
2757: LD_INT 2
2759: ARRAY
2760: PPUSH
2761: CALL_OW 258
2765: PUSH
2766: LD_INT 1
2768: EQUAL
2769: AND
2770: IFFALSE 2788
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2772: LD_VAR 0 4
2776: PUSH
2777: LD_INT 2
2779: ARRAY
2780: PPUSH
2781: LD_STRING DCorpses-Sol1-1
2783: PPUSH
2784: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2788: LD_VAR 0 2
2792: PUSH
2793: LD_VAR 0 1
2797: ARRAY
2798: PUSH
2799: LD_INT 1
2801: ARRAY
2802: PUSH
2803: LD_VAR 0 4
2807: PUSH
2808: LD_INT 2
2810: ARRAY
2811: EQUAL
2812: PUSH
2813: LD_VAR 0 4
2817: PUSH
2818: LD_INT 2
2820: ARRAY
2821: PPUSH
2822: CALL_OW 258
2826: PUSH
2827: LD_INT 2
2829: EQUAL
2830: AND
2831: IFFALSE 2849
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2833: LD_VAR 0 4
2837: PUSH
2838: LD_INT 2
2840: ARRAY
2841: PPUSH
2842: LD_STRING DCorpses-FSol1-1
2844: PPUSH
2845: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2849: LD_EXP 34
2853: PPUSH
2854: LD_INT 150
2856: PPUSH
2857: CALL_OW 234
// break ;
2861: GO 2865
// end ; end ;
2863: GO 2478
2865: POP
2866: POP
// p := 0 ;
2867: LD_ADDR_VAR 0 5
2871: PUSH
2872: LD_INT 0
2874: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2875: LD_INT 35
2877: PPUSH
2878: CALL_OW 67
// p := p + 1 ;
2882: LD_ADDR_VAR 0 5
2886: PUSH
2887: LD_VAR 0 5
2891: PUSH
2892: LD_INT 1
2894: PLUS
2895: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2896: LD_ADDR_VAR 0 1
2900: PUSH
2901: LD_INT 22
2903: PUSH
2904: LD_INT 1
2906: PUSH
2907: EMPTY
2908: LIST
2909: LIST
2910: PUSH
2911: LD_INT 21
2913: PUSH
2914: LD_INT 1
2916: PUSH
2917: EMPTY
2918: LIST
2919: LIST
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: PPUSH
2925: CALL_OW 69
2929: PUSH
2930: LD_EXP 1
2934: PUSH
2935: EMPTY
2936: LIST
2937: DIFF
2938: PUSH
2939: FOR_IN
2940: IFFALSE 3010
// begin ComMoveToArea ( i , DeadCutscene ) ;
2942: LD_VAR 0 1
2946: PPUSH
2947: LD_INT 28
2949: PPUSH
2950: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2954: LD_EXP 1
2958: PPUSH
2959: LD_INT 30
2961: PPUSH
2962: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2966: LD_VAR 0 1
2970: PPUSH
2971: LD_INT 23
2973: PPUSH
2974: LD_INT 11
2976: PPUSH
2977: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2981: LD_EXP 1
2985: PPUSH
2986: LD_INT 23
2988: PPUSH
2989: LD_INT 11
2991: PPUSH
2992: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2996: LD_EXP 34
3000: PPUSH
3001: LD_INT 250
3003: PPUSH
3004: CALL_OW 234
// end ;
3008: GO 2939
3010: POP
3011: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3012: LD_EXP 1
3016: PPUSH
3017: LD_INT 30
3019: PPUSH
3020: CALL_OW 308
3024: PUSH
3025: LD_VAR 0 5
3029: PUSH
3030: LD_INT 16
3032: GREATEREQUAL
3033: OR
3034: IFFALSE 2875
// wait ( 0 0$1 ) ;
3036: LD_INT 35
3038: PPUSH
3039: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3043: LD_EXP 1
3047: PPUSH
3048: LD_STRING DCorpses-JMM-1
3050: PPUSH
3051: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3055: LD_EXP 34
3059: PPUSH
3060: LD_INT 100
3062: PPUSH
3063: CALL_OW 234
// if IsOK ( Khatam ) then
3067: LD_EXP 5
3071: PPUSH
3072: CALL_OW 302
3076: IFFALSE 3213
// begin repeat wait ( 0 0$1 ) ;
3078: LD_INT 35
3080: PPUSH
3081: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3085: LD_EXP 5
3089: PPUSH
3090: LD_EXP 34
3094: PPUSH
3095: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3099: LD_EXP 5
3103: PPUSH
3104: LD_EXP 34
3108: PPUSH
3109: CALL_OW 296
3113: PUSH
3114: LD_INT 2
3116: LESS
3117: IFFALSE 3078
// spotCorpses = 0 ;
3119: LD_ADDR_EXP 32
3123: PUSH
3124: LD_INT 0
3126: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3127: LD_EXP 34
3131: PPUSH
3132: LD_INT 10
3134: PPUSH
3135: CALL_OW 234
// wait ( 0 0$3 ) ;
3139: LD_INT 105
3141: PPUSH
3142: CALL_OW 67
// KillUnit ( DyingSold ) ;
3146: LD_EXP 34
3150: PPUSH
3151: CALL_OW 66
// wait ( 0 0$1 ) ;
3155: LD_INT 35
3157: PPUSH
3158: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3162: LD_EXP 1
3166: PUSH
3167: LD_EXP 5
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3180: LD_EXP 5
3184: PPUSH
3185: LD_EXP 1
3189: PPUSH
3190: CALL_OW 119
// wait ( 0 0$1 ) ;
3194: LD_INT 35
3196: PPUSH
3197: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3201: LD_EXP 5
3205: PPUSH
3206: LD_STRING DCorpses-Khat-1
3208: PPUSH
3209: CALL_OW 88
// end ; InGameOff ;
3213: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3217: LD_EXP 1
3221: PPUSH
3222: LD_STRING DCorpses-JMM-2
3224: PPUSH
3225: CALL_OW 88
// end ;
3229: PPOPN 5
3231: END
// every 0 0$1 trigger spotCorpses = 1 do
3232: LD_EXP 32
3236: PUSH
3237: LD_INT 1
3239: EQUAL
3240: IFFALSE 3258
3242: GO 3244
3244: DISABLE
// begin enable ;
3245: ENABLE
// SetLives ( DyingSold , 10 ) ;
3246: LD_EXP 34
3250: PPUSH
3251: LD_INT 10
3253: PPUSH
3254: CALL_OW 234
// end ;
3258: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3259: LD_INT 8
3261: PPUSH
3262: LD_INT 22
3264: PUSH
3265: LD_INT 1
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PPUSH
3272: CALL_OW 70
3276: PUSH
3277: LD_INT 0
3279: GREATER
3280: PUSH
3281: LD_INT 22
3283: PUSH
3284: LD_INT 1
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PPUSH
3291: CALL_OW 69
3295: PPUSH
3296: LD_EXP 7
3300: PPUSH
3301: CALL_OW 74
3305: PPUSH
3306: LD_EXP 7
3310: PPUSH
3311: CALL_OW 296
3315: PUSH
3316: LD_INT 13
3318: LESS
3319: OR
3320: IFFALSE 3517
3322: GO 3324
3324: DISABLE
3325: LD_INT 0
3327: PPUSH
// begin InGameOn ;
3328: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3332: LD_EXP 7
3336: PPUSH
3337: LD_INT 250
3339: PPUSH
3340: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 ] [ Difficulty ] ) ;
3344: LD_EXP 6
3348: PPUSH
3349: LD_INT 1000
3351: PUSH
3352: LD_INT 800
3354: PUSH
3355: LD_INT 750
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: LIST
3362: PUSH
3363: LD_OWVAR 67
3367: ARRAY
3368: PPUSH
3369: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3373: LD_INT 3
3375: PPUSH
3376: LD_INT 4
3378: PPUSH
3379: LD_INT 2
3381: PPUSH
3382: LD_INT 1
3384: PPUSH
3385: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3389: LD_EXP 6
3393: PUSH
3394: LD_EXP 7
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PPUSH
3403: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3407: LD_ADDR_VAR 0 1
3411: PUSH
3412: LD_INT 9
3414: PPUSH
3415: LD_INT 22
3417: PUSH
3418: LD_INT 3
3420: PUSH
3421: EMPTY
3422: LIST
3423: LIST
3424: PPUSH
3425: CALL_OW 70
3429: PUSH
3430: FOR_IN
3431: IFFALSE 3444
// ComFree ( i ) ;
3433: LD_VAR 0 1
3437: PPUSH
3438: CALL_OW 139
3442: GO 3430
3444: POP
3445: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3446: LD_ADDR_VAR 0 1
3450: PUSH
3451: LD_INT 22
3453: PUSH
3454: LD_INT 4
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PPUSH
3461: CALL_OW 69
3465: PUSH
3466: FOR_IN
3467: IFFALSE 3480
// ComFree ( i ) ;
3469: LD_VAR 0 1
3473: PPUSH
3474: CALL_OW 139
3478: GO 3466
3480: POP
3481: POP
// wait ( 0 0$1 ) ;
3482: LD_INT 35
3484: PPUSH
3485: CALL_OW 67
// InGameOff ;
3489: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3493: LD_EXP 6
3497: PPUSH
3498: LD_STRING DF-Sol1-1
3500: PPUSH
3501: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3505: LD_EXP 1
3509: PPUSH
3510: LD_STRING DF-JMM-1
3512: PPUSH
3513: CALL_OW 88
// end ;
3517: PPOPN 1
3519: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3520: LD_INT 19
3522: PPUSH
3523: LD_INT 22
3525: PUSH
3526: LD_INT 3
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: PPUSH
3533: CALL_OW 70
3537: PUSH
3538: LD_INT 0
3540: EQUAL
3541: IFFALSE 3650
3543: GO 3545
3545: DISABLE
// begin if not IsDead ( Brian ) then
3546: LD_EXP 6
3550: PPUSH
3551: CALL_OW 301
3555: NOT
3556: IFFALSE 3570
// SetSide ( Brian , 1 ) ;
3558: LD_EXP 6
3562: PPUSH
3563: LD_INT 1
3565: PPUSH
3566: CALL_OW 235
// if not IsDead ( Jerry ) then
3570: LD_EXP 7
3574: PPUSH
3575: CALL_OW 301
3579: NOT
3580: IFFALSE 3594
// SetSide ( Jerry , 1 ) ;
3582: LD_EXP 7
3586: PPUSH
3587: LD_INT 1
3589: PPUSH
3590: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3594: LD_INT 22
3596: PUSH
3597: LD_INT 1
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PUSH
3604: LD_INT 25
3606: PUSH
3607: LD_INT 4
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: PUSH
3614: EMPTY
3615: LIST
3616: LIST
3617: PPUSH
3618: CALL_OW 69
3622: IFFALSE 3638
// Say ( JMM , DFa-JMM-1 ) else
3624: LD_EXP 1
3628: PPUSH
3629: LD_STRING DFa-JMM-1
3631: PPUSH
3632: CALL_OW 88
3636: GO 3650
// Say ( JMM , DFa-JMM-1a ) ;
3638: LD_EXP 1
3642: PPUSH
3643: LD_STRING DFa-JMM-1a
3645: PPUSH
3646: CALL_OW 88
// end ;
3650: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3651: LD_INT 19
3653: PPUSH
3654: LD_INT 22
3656: PUSH
3657: LD_INT 3
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: PPUSH
3664: CALL_OW 70
3668: PUSH
3669: LD_INT 0
3671: EQUAL
3672: PUSH
3673: LD_EXP 6
3677: PPUSH
3678: CALL_OW 302
3682: NOT
3683: AND
3684: IFFALSE 3770
3686: GO 3688
3688: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3689: LD_INT 35
3691: PPUSH
3692: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3696: LD_EXP 6
3700: PPUSH
3701: CALL_OW 256
3705: PUSH
3706: LD_INT 250
3708: GREATER
3709: IFFALSE 3689
// Say ( Brian , DFb-Sol1-1 ) ;
3711: LD_EXP 6
3715: PPUSH
3716: LD_STRING DFb-Sol1-1
3718: PPUSH
3719: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3723: LD_EXP 6
3727: PPUSH
3728: LD_INT 78
3730: PPUSH
3731: LD_INT 74
3733: PPUSH
3734: CALL_OW 111
// if IsDead ( Jerry ) then
3738: LD_EXP 7
3742: PPUSH
3743: CALL_OW 301
3747: IFFALSE 3763
// Say ( Brian , DFb-Sol1-1a ) else
3749: LD_EXP 6
3753: PPUSH
3754: LD_STRING DFb-Sol1-1a
3756: PPUSH
3757: CALL_OW 88
3761: GO 3770
// SetAchievement ( ACH_JERRY ) ;
3763: LD_STRING ACH_JERRY
3765: PPUSH
3766: CALL_OW 543
// end ;
3770: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3771: LD_INT 22
3773: PUSH
3774: LD_INT 1
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PUSH
3781: LD_INT 21
3783: PUSH
3784: LD_INT 2
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: PPUSH
3795: CALL_OW 69
3799: PUSH
3800: LD_INT 0
3802: EQUAL
3803: IFFALSE 3891
3805: GO 3807
3807: DISABLE
3808: LD_INT 0
3810: PPUSH
// begin enable ;
3811: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3812: LD_ADDR_VAR 0 1
3816: PUSH
3817: LD_INT 22
3819: PUSH
3820: LD_INT 3
3822: PUSH
3823: EMPTY
3824: LIST
3825: LIST
3826: PUSH
3827: LD_INT 21
3829: PUSH
3830: LD_INT 3
3832: PUSH
3833: EMPTY
3834: LIST
3835: LIST
3836: PUSH
3837: LD_INT 30
3839: PUSH
3840: LD_INT 31
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: LIST
3851: PPUSH
3852: CALL_OW 69
3856: PUSH
3857: FOR_IN
3858: IFFALSE 3889
// begin if See ( 1 , i ) then
3860: LD_INT 1
3862: PPUSH
3863: LD_VAR 0 1
3867: PPUSH
3868: CALL_OW 292
3872: IFFALSE 3887
// begin disable ;
3874: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3875: LD_EXP 1
3879: PPUSH
3880: LD_STRING DX1-JMM-1
3882: PPUSH
3883: CALL_OW 88
// end ; end ;
3887: GO 3857
3889: POP
3890: POP
// end ;
3891: PPOPN 1
3893: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
3894: LD_INT 1
3896: PPUSH
3897: LD_INT 11
3899: PPUSH
3900: CALL_OW 294
3904: IFFALSE 4163
3906: GO 3908
3908: DISABLE
3909: LD_INT 0
3911: PPUSH
3912: PPUSH
3913: PPUSH
// begin DialogueOn ;
3914: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3918: LD_INT 11
3920: PPUSH
3921: LD_INT 22
3923: PUSH
3924: LD_INT 3
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 21
3933: PUSH
3934: LD_INT 1
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: EMPTY
3942: LIST
3943: LIST
3944: PPUSH
3945: CALL_OW 70
3949: PUSH
3950: LD_INT 1
3952: ARRAY
3953: PPUSH
3954: LD_STRING DX3-Rus1-1
3956: PPUSH
3957: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3961: LD_EXP 1
3965: PPUSH
3966: LD_STRING DX3-JMM-1
3968: PPUSH
3969: CALL_OW 88
// DialogueOff ;
3973: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
3977: LD_ADDR_VAR 0 1
3981: PUSH
3982: LD_INT 11
3984: PPUSH
3985: LD_INT 22
3987: PUSH
3988: LD_INT 3
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PUSH
3995: LD_INT 25
3997: PUSH
3998: LD_INT 1
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PPUSH
4009: CALL_OW 70
4013: PUSH
4014: FOR_IN
4015: IFFALSE 4035
// southBaseDefenders = southBaseDefenders ^ i ;
4017: LD_ADDR_EXP 25
4021: PUSH
4022: LD_EXP 25
4026: PUSH
4027: LD_VAR 0 1
4031: ADD
4032: ST_TO_ADDR
4033: GO 4014
4035: POP
4036: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 ] [ Difficulty ] ) ;
4037: LD_INT 175
4039: PUSH
4040: LD_INT 140
4042: PUSH
4043: LD_INT 105
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: PUSH
4051: LD_OWVAR 67
4055: ARRAY
4056: PPUSH
4057: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4061: LD_ADDR_VAR 0 3
4065: PUSH
4066: LD_INT 22
4068: PUSH
4069: LD_INT 3
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: PUSH
4076: LD_INT 21
4078: PUSH
4079: LD_INT 1
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: PUSH
4086: LD_INT 25
4088: PUSH
4089: LD_INT 3
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: LIST
4100: PPUSH
4101: CALL_OW 69
4105: ST_TO_ADDR
// if not mech then
4106: LD_VAR 0 3
4110: NOT
4111: IFFALSE 4115
// exit ;
4113: GO 4163
// ComExitBuilding ( mech ) ;
4115: LD_VAR 0 3
4119: PPUSH
4120: CALL_OW 122
// wait ( 0 0$1 ) ;
4124: LD_INT 35
4126: PPUSH
4127: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4131: LD_VAR 0 3
4135: PUSH
4136: LD_INT 1
4138: ARRAY
4139: PPUSH
4140: LD_INT 5
4142: PPUSH
4143: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4147: LD_VAR 0 3
4151: PUSH
4152: LD_INT 2
4154: ARRAY
4155: PPUSH
4156: LD_INT 4
4158: PPUSH
4159: CALL_OW 180
// end ;
4163: PPOPN 3
4165: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4166: LD_INT 1
4168: PPUSH
4169: LD_INT 5
4171: PPUSH
4172: CALL_OW 292
4176: PUSH
4177: LD_INT 1
4179: PPUSH
4180: LD_INT 4
4182: PPUSH
4183: CALL_OW 292
4187: OR
4188: IFFALSE 4272
4190: GO 4192
4192: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4193: LD_INT 5
4195: PUSH
4196: LD_INT 4
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PPUSH
4203: CALL_OW 85
// if IsOK ( Bobby ) then
4207: LD_EXP 2
4211: PPUSH
4212: CALL_OW 302
4216: IFFALSE 4252
// begin DialogueOn ;
4218: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4222: LD_EXP 2
4226: PPUSH
4227: LD_STRING DX2-Bobby-1
4229: PPUSH
4230: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4234: LD_EXP 1
4238: PPUSH
4239: LD_STRING DX2-JMM-1a
4241: PPUSH
4242: CALL_OW 88
// DialogueOff ;
4246: CALL_OW 7
// end else
4250: GO 4272
// begin DialogueOn ;
4252: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4256: LD_EXP 1
4260: PPUSH
4261: LD_STRING DX2-JMM-1
4263: PPUSH
4264: CALL_OW 88
// DialogueOff ;
4268: CALL_OW 7
// end ; end ;
4272: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4273: LD_INT 22
4275: PUSH
4276: LD_INT 1
4278: PUSH
4279: EMPTY
4280: LIST
4281: LIST
4282: PUSH
4283: LD_INT 23
4285: PUSH
4286: LD_INT 3
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: PUSH
4293: LD_INT 21
4295: PUSH
4296: LD_INT 2
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PUSH
4303: LD_INT 34
4305: PUSH
4306: LD_INT 42
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: PPUSH
4319: CALL_OW 69
4323: IFFALSE 4744
4325: GO 4327
4327: DISABLE
4328: LD_INT 0
4330: PPUSH
4331: PPUSH
4332: PPUSH
4333: PPUSH
4334: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4335: LD_ADDR_VAR 0 1
4339: PUSH
4340: LD_INT 22
4342: PUSH
4343: LD_INT 1
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: PUSH
4350: LD_INT 23
4352: PUSH
4353: LD_INT 3
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: PUSH
4360: LD_INT 21
4362: PUSH
4363: LD_INT 2
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: PUSH
4370: LD_INT 34
4372: PUSH
4373: LD_INT 42
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: PPUSH
4386: CALL_OW 69
4390: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4391: LD_ADDR_VAR 0 3
4395: PUSH
4396: LD_INT 22
4398: PUSH
4399: LD_INT 1
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PUSH
4406: LD_INT 21
4408: PUSH
4409: LD_INT 1
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: LD_INT 26
4418: PUSH
4419: LD_INT 1
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: PUSH
4436: LD_EXP 1
4440: PUSH
4441: LD_EXP 3
4445: PUSH
4446: LD_EXP 2
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: DIFF
4456: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4457: LD_ADDR_VAR 0 4
4461: PUSH
4462: LD_INT 22
4464: PUSH
4465: LD_INT 1
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 1
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 26
4484: PUSH
4485: LD_INT 2
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: PPUSH
4497: CALL_OW 69
4501: PUSH
4502: LD_EXP 4
4506: PUSH
4507: EMPTY
4508: LIST
4509: DIFF
4510: ST_TO_ADDR
// if not tmp then
4511: LD_VAR 0 1
4515: NOT
4516: IFFALSE 4520
// exit ;
4518: GO 4744
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4520: LD_ADDR_VAR 0 2
4524: PUSH
4525: LD_VAR 0 1
4529: PUSH
4530: LD_INT 1
4532: ARRAY
4533: PPUSH
4534: CALL_OW 311
4538: ST_TO_ADDR
// if not speaker then
4539: LD_VAR 0 2
4543: NOT
4544: IFFALSE 4548
// exit ;
4546: GO 4744
// DialogueOn ;
4548: CALL_OW 6
// if speaker = JMM then
4552: LD_VAR 0 2
4556: PUSH
4557: LD_EXP 1
4561: EQUAL
4562: IFFALSE 4596
// begin if Lisa then
4564: LD_EXP 4
4568: IFFALSE 4582
// Say ( Lisa , DX2b-Lisa-1 ) ;
4570: LD_EXP 4
4574: PPUSH
4575: LD_STRING DX2b-Lisa-1
4577: PPUSH
4578: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4582: LD_EXP 1
4586: PPUSH
4587: LD_STRING DX2b-JMM-1
4589: PPUSH
4590: CALL_OW 88
// end else
4594: GO 4740
// begin Say ( JMM , DX2a-JMM-1 ) ;
4596: LD_EXP 1
4600: PPUSH
4601: LD_STRING DX2a-JMM-1
4603: PPUSH
4604: CALL_OW 88
// if speaker = Bobby then
4608: LD_VAR 0 2
4612: PUSH
4613: LD_EXP 2
4617: EQUAL
4618: IFFALSE 4632
// Say ( Bobby , DX2a-Bobby-1 ) ;
4620: LD_EXP 2
4624: PPUSH
4625: LD_STRING DX2a-Bobby-1
4627: PPUSH
4628: CALL_OW 88
// if speaker = Cyrus then
4632: LD_VAR 0 2
4636: PUSH
4637: LD_EXP 3
4641: EQUAL
4642: IFFALSE 4656
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4644: LD_EXP 3
4648: PPUSH
4649: LD_STRING DX2a-Cyrus-1
4651: PPUSH
4652: CALL_OW 88
// if speaker = Lisa then
4656: LD_VAR 0 2
4660: PUSH
4661: LD_EXP 4
4665: EQUAL
4666: IFFALSE 4680
// Say ( Lisa , DX2a-Lisa-1 ) ;
4668: LD_EXP 4
4672: PPUSH
4673: LD_STRING DX2a-Lisa-1
4675: PPUSH
4676: CALL_OW 88
// if speaker in temp1 then
4680: LD_VAR 0 2
4684: PUSH
4685: LD_VAR 0 3
4689: IN
4690: IFFALSE 4704
// Say ( speaker , DX2a-Sol1-1 ) ;
4692: LD_VAR 0 2
4696: PPUSH
4697: LD_STRING DX2a-Sol1-1
4699: PPUSH
4700: CALL_OW 88
// if speaker in temp2 then
4704: LD_VAR 0 2
4708: PUSH
4709: LD_VAR 0 4
4713: IN
4714: IFFALSE 4728
// Say ( speaker , DX2a-FSol1-1 ) ;
4716: LD_VAR 0 2
4720: PPUSH
4721: LD_STRING DX2a-FSol1-1
4723: PPUSH
4724: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4728: LD_EXP 1
4732: PPUSH
4733: LD_STRING DX2a-JMM-2
4735: PPUSH
4736: CALL_OW 88
// end ; DialogueOff ;
4740: CALL_OW 7
// end ;
4744: PPOPN 5
4746: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4747: LD_INT 1
4749: PPUSH
4750: CALL_OW 255
4754: PUSH
4755: LD_INT 1
4757: EQUAL
4758: PUSH
4759: LD_INT 10
4761: PPUSH
4762: CALL_OW 255
4766: PUSH
4767: LD_INT 1
4769: EQUAL
4770: OR
4771: IFFALSE 4831
4773: GO 4775
4775: DISABLE
// begin DialogueOn ;
4776: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4780: LD_EXP 1
4784: PPUSH
4785: LD_STRING D3-JMM-1
4787: PPUSH
4788: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4792: LD_EXP 9
4796: PPUSH
4797: LD_STRING D3-Pow-1
4799: PPUSH
4800: CALL_OW 94
// if IsOK ( Cyrus ) then
4804: LD_EXP 3
4808: PPUSH
4809: CALL_OW 302
4813: IFFALSE 4827
// Say ( Cyrus , D3-Cyrus-1 ) ;
4815: LD_EXP 3
4819: PPUSH
4820: LD_STRING D3-Cyrus-1
4822: PPUSH
4823: CALL_OW 88
// DialogueOff ;
4827: CALL_OW 7
// end ;
4831: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , tmp , i ;
4832: LD_INT 1
4834: PPUSH
4835: CALL_OW 255
4839: PUSH
4840: LD_INT 1
4842: EQUAL
4843: PUSH
4844: LD_INT 10
4846: PPUSH
4847: CALL_OW 255
4851: PUSH
4852: LD_INT 1
4854: EQUAL
4855: AND
4856: IFFALSE 6246
4858: GO 4860
4860: DISABLE
4861: LD_INT 0
4863: PPUSH
4864: PPUSH
4865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4866: LD_ADDR_VAR 0 2
4870: PUSH
4871: LD_INT 22
4873: PUSH
4874: LD_INT 3
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: LD_INT 21
4883: PUSH
4884: LD_INT 1
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: PPUSH
4895: CALL_OW 69
4899: ST_TO_ADDR
// if tmp then
4900: LD_VAR 0 2
4904: IFFALSE 4965
// begin for i in tmp do
4906: LD_ADDR_VAR 0 3
4910: PUSH
4911: LD_VAR 0 2
4915: PUSH
4916: FOR_IN
4917: IFFALSE 4963
// begin if IsInUnit ( i ) then
4919: LD_VAR 0 3
4923: PPUSH
4924: CALL_OW 310
4928: IFFALSE 4939
// ComExitBuilding ( i ) ;
4930: LD_VAR 0 3
4934: PPUSH
4935: CALL_OW 122
// wait ( 0 0$1 ) ;
4939: LD_INT 35
4941: PPUSH
4942: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
4946: LD_VAR 0 3
4950: PPUSH
4951: LD_INT 54
4953: PPUSH
4954: LD_INT 17
4956: PPUSH
4957: CALL_OW 174
// end ;
4961: GO 4916
4963: POP
4964: POP
// end ; wait ( 0 0$03 ) ;
4965: LD_INT 105
4967: PPUSH
4968: CALL_OW 67
// DialogueOn ;
4972: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
4976: LD_EXP 1
4980: PPUSH
4981: LD_STRING D3a-JMM-1
4983: PPUSH
4984: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
4988: LD_EXP 9
4992: PPUSH
4993: LD_STRING D3a-Pow-1
4995: PPUSH
4996: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5000: LD_EXP 1
5004: PPUSH
5005: LD_STRING D3a-JMM-2
5007: PPUSH
5008: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5012: LD_EXP 9
5016: PPUSH
5017: LD_STRING D3a-Pow-2
5019: PPUSH
5020: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5024: LD_EXP 1
5028: PPUSH
5029: LD_STRING D3a-JMM-3
5031: PPUSH
5032: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5036: LD_EXP 9
5040: PPUSH
5041: LD_STRING D3a-Pow-3
5043: PPUSH
5044: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5048: LD_EXP 1
5052: PPUSH
5053: LD_STRING D3a-JMM-4
5055: PPUSH
5056: CALL_OW 88
// DialogueOff ;
5060: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5064: LD_STRING M2
5066: PPUSH
5067: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5071: LD_EXP 1
5075: PPUSH
5076: LD_STRING D3b-JMM-1
5078: PPUSH
5079: CALL_OW 88
// Hint ( Depot2 ) ;
5083: LD_STRING Depot2
5085: PPUSH
5086: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5090: LD_INT 35
5092: PPUSH
5093: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5097: LD_INT 22
5099: PPUSH
5100: LD_INT 22
5102: PUSH
5103: LD_INT 1
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: PUSH
5110: LD_INT 25
5112: PUSH
5113: LD_INT 2
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: PPUSH
5124: CALL_OW 70
5128: PUSH
5129: LD_INT 22
5131: PUSH
5132: LD_INT 3
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: PUSH
5139: LD_INT 21
5141: PUSH
5142: LD_INT 1
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: PPUSH
5153: CALL_OW 69
5157: NOT
5158: AND
5159: IFFALSE 5090
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5161: LD_ADDR_VAR 0 1
5165: PUSH
5166: LD_INT 22
5168: PUSH
5169: LD_INT 1
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: PUSH
5176: LD_INT 23
5178: PUSH
5179: LD_INT 1
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: LD_INT 25
5188: PUSH
5189: LD_INT 2
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: PUSH
5196: LD_INT 50
5198: PUSH
5199: EMPTY
5200: LIST
5201: PUSH
5202: LD_INT 56
5204: PUSH
5205: EMPTY
5206: LIST
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: PPUSH
5215: CALL_OW 69
5219: PUSH
5220: LD_EXP 1
5224: PUSH
5225: LD_EXP 5
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: DIFF
5234: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5235: LD_INT 35
5237: PPUSH
5238: CALL_OW 67
// until temp > 0 ;
5242: LD_VAR 0 1
5246: PUSH
5247: LD_INT 0
5249: GREATER
5250: IFFALSE 5161
// wait ( 0 0$5 ) ;
5252: LD_INT 175
5254: PPUSH
5255: CALL_OW 67
// PrepareRussianHeroes ;
5259: CALL 11689 0 0
// InGameOn ;
5263: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5267: LD_EXP 8
5271: PPUSH
5272: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5276: LD_EXP 1
5280: PUSH
5281: LD_VAR 0 1
5285: PUSH
5286: LD_INT 1
5288: ARRAY
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: PPUSH
5294: LD_EXP 8
5298: PPUSH
5299: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5303: LD_EXP 8
5307: PPUSH
5308: LD_VAR 0 1
5312: PUSH
5313: LD_INT 1
5315: ARRAY
5316: PPUSH
5317: CALL_OW 119
// Wait ( 0 0$02 ) ;
5321: LD_INT 70
5323: PPUSH
5324: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5328: LD_EXP 8
5332: PPUSH
5333: LD_STRING D4-Mikh-1
5335: PPUSH
5336: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5340: LD_VAR 0 1
5344: PUSH
5345: LD_INT 1
5347: ARRAY
5348: PPUSH
5349: CALL_OW 258
5353: PUSH
5354: LD_INT 1
5356: EQUAL
5357: IFFALSE 5375
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5359: LD_VAR 0 1
5363: PUSH
5364: LD_INT 1
5366: ARRAY
5367: PPUSH
5368: LD_STRING D4-Sol1-1
5370: PPUSH
5371: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5375: LD_VAR 0 1
5379: PUSH
5380: LD_INT 1
5382: ARRAY
5383: PPUSH
5384: CALL_OW 258
5388: PUSH
5389: LD_INT 2
5391: EQUAL
5392: IFFALSE 5410
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5394: LD_VAR 0 1
5398: PUSH
5399: LD_INT 1
5401: ARRAY
5402: PPUSH
5403: LD_STRING D4-FSol1-1
5405: PPUSH
5406: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5410: LD_EXP 8
5414: PPUSH
5415: LD_STRING D4-Mikh-2
5417: PPUSH
5418: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5422: LD_VAR 0 1
5426: PUSH
5427: LD_INT 1
5429: ARRAY
5430: PPUSH
5431: CALL_OW 258
5435: PUSH
5436: LD_INT 1
5438: EQUAL
5439: IFFALSE 5457
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5441: LD_VAR 0 1
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: PPUSH
5450: LD_STRING D4-Sol1-2
5452: PPUSH
5453: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5457: LD_VAR 0 1
5461: PUSH
5462: LD_INT 1
5464: ARRAY
5465: PPUSH
5466: CALL_OW 258
5470: PUSH
5471: LD_INT 2
5473: EQUAL
5474: IFFALSE 5492
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5476: LD_VAR 0 1
5480: PUSH
5481: LD_INT 1
5483: ARRAY
5484: PPUSH
5485: LD_STRING D4-FSol1-2
5487: PPUSH
5488: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5492: LD_EXP 8
5496: PPUSH
5497: LD_STRING D4-Mikh-3
5499: PPUSH
5500: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5504: LD_VAR 0 1
5508: PUSH
5509: LD_INT 1
5511: ARRAY
5512: PPUSH
5513: CALL_OW 258
5517: PUSH
5518: LD_INT 1
5520: EQUAL
5521: IFFALSE 5539
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5523: LD_VAR 0 1
5527: PUSH
5528: LD_INT 1
5530: ARRAY
5531: PPUSH
5532: LD_STRING D4-Sol1-3
5534: PPUSH
5535: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5539: LD_VAR 0 1
5543: PUSH
5544: LD_INT 1
5546: ARRAY
5547: PPUSH
5548: CALL_OW 258
5552: PUSH
5553: LD_INT 2
5555: EQUAL
5556: IFFALSE 5574
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5558: LD_VAR 0 1
5562: PUSH
5563: LD_INT 1
5565: ARRAY
5566: PPUSH
5567: LD_STRING D4-FSol1-3
5569: PPUSH
5570: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5574: LD_EXP 8
5578: PPUSH
5579: LD_STRING D4-Mikh-4
5581: PPUSH
5582: CALL_OW 88
// case query ( Qs1 ) of 1 :
5586: LD_STRING Qs1
5588: PPUSH
5589: CALL_OW 97
5593: PUSH
5594: LD_INT 1
5596: DOUBLE
5597: EQUAL
5598: IFTRUE 5602
5600: GO 5637
5602: POP
// begin InGameOff ;
5603: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5607: LD_INT 1
5609: PPUSH
5610: LD_INT 6
5612: PPUSH
5613: LD_INT 2
5615: PPUSH
5616: LD_INT 1
5618: PPUSH
5619: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5623: LD_EXP 8
5627: PPUSH
5628: LD_INT 17
5630: PPUSH
5631: CALL_OW 113
// end ; 2 :
5635: GO 6230
5637: LD_INT 2
5639: DOUBLE
5640: EQUAL
5641: IFTRUE 5645
5643: GO 6195
5645: POP
// begin repeat wait ( 0 0$1 ) ;
5646: LD_INT 35
5648: PPUSH
5649: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5653: LD_VAR 0 1
5657: PUSH
5658: LD_INT 1
5660: ARRAY
5661: PPUSH
5662: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5666: LD_VAR 0 1
5670: PUSH
5671: LD_INT 1
5673: ARRAY
5674: PPUSH
5675: LD_EXP 1
5679: PPUSH
5680: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5684: LD_EXP 8
5688: PPUSH
5689: LD_EXP 1
5693: PPUSH
5694: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5698: LD_EXP 1
5702: PPUSH
5703: LD_EXP 8
5707: PPUSH
5708: CALL_OW 296
5712: PUSH
5713: LD_INT 5
5715: LESS
5716: IFFALSE 5646
// ComTurnUnit ( Mikhail , JMM ) ;
5718: LD_EXP 8
5722: PPUSH
5723: LD_EXP 1
5727: PPUSH
5728: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5732: LD_EXP 1
5736: PPUSH
5737: LD_STRING D4b-JMM-1
5739: PPUSH
5740: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5744: LD_EXP 8
5748: PPUSH
5749: LD_STRING D4b-Mikh-1
5751: PPUSH
5752: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5756: LD_EXP 1
5760: PPUSH
5761: LD_STRING D4b-JMM-2
5763: PPUSH
5764: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5768: LD_EXP 8
5772: PPUSH
5773: LD_STRING D4b-Mikh-2
5775: PPUSH
5776: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5780: LD_EXP 1
5784: PPUSH
5785: LD_STRING D4b-JMM-3
5787: PPUSH
5788: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5792: LD_EXP 8
5796: PPUSH
5797: LD_STRING D4b-Mikh-3
5799: PPUSH
5800: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5804: LD_EXP 1
5808: PPUSH
5809: LD_STRING D4b-JMM-4
5811: PPUSH
5812: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5816: LD_EXP 8
5820: PPUSH
5821: LD_STRING D4b-Mikh-4
5823: PPUSH
5824: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5828: LD_EXP 1
5832: PPUSH
5833: LD_STRING D4b-JMM-5
5835: PPUSH
5836: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5840: LD_EXP 8
5844: PPUSH
5845: LD_STRING D4b-Mikh-5
5847: PPUSH
5848: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5852: LD_EXP 1
5856: PPUSH
5857: LD_STRING D4b-JMM-6
5859: PPUSH
5860: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5864: LD_EXP 8
5868: PPUSH
5869: LD_STRING D4b-Mikh-6
5871: PPUSH
5872: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5876: LD_EXP 1
5880: PPUSH
5881: LD_STRING D4b-JMM-7
5883: PPUSH
5884: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5888: LD_EXP 8
5892: PPUSH
5893: LD_STRING D4b-Mikh-7
5895: PPUSH
5896: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5900: LD_VAR 0 1
5904: PUSH
5905: LD_INT 1
5907: ARRAY
5908: PPUSH
5909: CALL_OW 258
5913: PUSH
5914: LD_INT 1
5916: EQUAL
5917: IFFALSE 5935
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
5919: LD_VAR 0 1
5923: PUSH
5924: LD_INT 1
5926: ARRAY
5927: PPUSH
5928: LD_STRING D4b-Sol1-7
5930: PPUSH
5931: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5935: LD_VAR 0 1
5939: PUSH
5940: LD_INT 1
5942: ARRAY
5943: PPUSH
5944: CALL_OW 258
5948: PUSH
5949: LD_INT 2
5951: EQUAL
5952: IFFALSE 5970
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
5954: LD_VAR 0 1
5958: PUSH
5959: LD_INT 1
5961: ARRAY
5962: PPUSH
5963: LD_STRING D4b-FSol1-7
5965: PPUSH
5966: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
5970: LD_EXP 1
5974: PPUSH
5975: LD_STRING D4b-JMM-8
5977: PPUSH
5978: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5982: LD_VAR 0 1
5986: PUSH
5987: LD_INT 1
5989: ARRAY
5990: PPUSH
5991: CALL_OW 258
5995: PUSH
5996: LD_INT 1
5998: EQUAL
5999: IFFALSE 6017
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6001: LD_VAR 0 1
6005: PUSH
6006: LD_INT 1
6008: ARRAY
6009: PPUSH
6010: LD_STRING D4b-Sol1-8
6012: PPUSH
6013: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6017: LD_VAR 0 1
6021: PUSH
6022: LD_INT 1
6024: ARRAY
6025: PPUSH
6026: CALL_OW 258
6030: PUSH
6031: LD_INT 2
6033: EQUAL
6034: IFFALSE 6052
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6036: LD_VAR 0 1
6040: PUSH
6041: LD_INT 1
6043: ARRAY
6044: PPUSH
6045: LD_STRING D4b-FSol1-8
6047: PPUSH
6048: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6052: LD_EXP 1
6056: PPUSH
6057: LD_STRING D4b-JMM-9
6059: PPUSH
6060: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6064: LD_EXP 8
6068: PPUSH
6069: LD_INT 1
6071: PPUSH
6072: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6076: LD_ADDR_VAR 0 3
6080: PUSH
6081: LD_INT 22
6083: PUSH
6084: LD_INT 1
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: PUSH
6091: EMPTY
6092: LIST
6093: PPUSH
6094: CALL_OW 69
6098: PUSH
6099: FOR_IN
6100: IFFALSE 6113
// ComFree ( i ) ;
6102: LD_VAR 0 3
6106: PPUSH
6107: CALL_OW 139
6111: GO 6099
6113: POP
6114: POP
// repeat wait ( 0 0$1 ) ;
6115: LD_INT 35
6117: PPUSH
6118: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6122: LD_EXP 8
6126: PPUSH
6127: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6131: LD_EXP 8
6135: PUSH
6136: LD_VAR 0 1
6140: PUSH
6141: LD_INT 1
6143: ARRAY
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: PPUSH
6149: LD_INT 1
6151: PPUSH
6152: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6156: LD_EXP 8
6160: PPUSH
6161: CALL_OW 310
6165: IFFALSE 6115
// mikhailDepot = IsInUnit ( Mikhail ) ;
6167: LD_ADDR_EXP 23
6171: PUSH
6172: LD_EXP 8
6176: PPUSH
6177: CALL_OW 310
6181: ST_TO_ADDR
// InGameOff ;
6182: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6186: LD_STRING M3
6188: PPUSH
6189: CALL_OW 337
// end ; 3 :
6193: GO 6230
6195: LD_INT 3
6197: DOUBLE
6198: EQUAL
6199: IFTRUE 6203
6201: GO 6229
6203: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6204: LD_EXP 8
6208: PPUSH
6209: LD_INT 17
6211: PPUSH
6212: CALL_OW 113
// wait ( 0 0$3 ) ;
6216: LD_INT 105
6218: PPUSH
6219: CALL_OW 67
// InGameOff ;
6223: CALL_OW 9
// end ; end ;
6227: GO 6230
6229: POP
// PrepareTigers ;
6230: CALL 14539 0 0
// RussianTrap ;
6234: CALL 10085 0 0
// tigersRespawn = 1 ;
6238: LD_ADDR_EXP 30
6242: PUSH
6243: LD_INT 1
6245: ST_TO_ADDR
// end ;
6246: PPOPN 3
6248: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6249: LD_INT 1
6251: PPUSH
6252: CALL_OW 255
6256: PUSH
6257: LD_INT 1
6259: EQUAL
6260: PUSH
6261: LD_INT 10
6263: PPUSH
6264: CALL_OW 255
6268: PUSH
6269: LD_INT 1
6271: EQUAL
6272: AND
6273: PUSH
6274: LD_INT 1
6276: PPUSH
6277: CALL_OW 274
6281: PPUSH
6282: LD_INT 1
6284: PPUSH
6285: CALL_OW 275
6289: PUSH
6290: LD_INT 100
6292: GREATEREQUAL
6293: AND
6294: IFFALSE 6443
6296: GO 6298
6298: DISABLE
6299: LD_INT 0
6301: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6302: LD_INT 2100
6304: PPUSH
6305: LD_INT 4200
6307: PPUSH
6308: CALL_OW 12
6312: PUSH
6313: LD_INT 1050
6315: PLUS
6316: PPUSH
6317: CALL_OW 67
// PrepareCargoBays ;
6321: CALL 12822 0 0
// cargoRespawn = 1 ;
6325: LD_ADDR_EXP 28
6329: PUSH
6330: LD_INT 1
6332: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6333: LD_ADDR_VAR 0 1
6337: PUSH
6338: LD_EXP 15
6342: PUSH
6343: LD_EXP 16
6347: PUSH
6348: LD_EXP 17
6352: PUSH
6353: LD_EXP 18
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6364: LD_VAR 0 1
6368: PPUSH
6369: LD_INT 17
6371: PPUSH
6372: LD_INT 10
6374: PPUSH
6375: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6379: LD_VAR 0 1
6383: PPUSH
6384: LD_INT 36
6386: PPUSH
6387: LD_INT 13
6389: PPUSH
6390: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6394: LD_VAR 0 1
6398: PPUSH
6399: LD_INT 40
6401: PPUSH
6402: LD_INT 20
6404: PPUSH
6405: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6409: LD_VAR 0 1
6413: PPUSH
6414: LD_INT 53
6416: PPUSH
6417: LD_INT 16
6419: PPUSH
6420: CALL_OW 171
// wait ( 0 0$5 ) ;
6424: LD_INT 175
6426: PPUSH
6427: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6431: LD_EXP 17
6435: PPUSH
6436: LD_STRING D5-Rus2-1
6438: PPUSH
6439: CALL_OW 88
// end ;
6443: PPOPN 1
6445: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6446: LD_EXP 28
6450: PUSH
6451: LD_INT 1
6453: EQUAL
6454: IFFALSE 6609
6456: GO 6458
6458: DISABLE
6459: LD_INT 0
6461: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6462: LD_ADDR_VAR 0 1
6466: PUSH
6467: LD_INT 22
6469: PUSH
6470: LD_INT 3
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PUSH
6477: LD_INT 21
6479: PUSH
6480: LD_INT 2
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: PUSH
6487: LD_INT 34
6489: PUSH
6490: LD_INT 51
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: LIST
6501: PPUSH
6502: CALL_OW 69
6506: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6507: LD_INT 105
6509: PPUSH
6510: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6514: LD_VAR 0 1
6518: PPUSH
6519: LD_INT 3
6521: PUSH
6522: LD_INT 60
6524: PUSH
6525: EMPTY
6526: LIST
6527: PUSH
6528: EMPTY
6529: LIST
6530: LIST
6531: PPUSH
6532: CALL_OW 72
6536: PUSH
6537: LD_VAR 0 1
6541: PPUSH
6542: LD_INT 3
6544: PUSH
6545: LD_INT 24
6547: PUSH
6548: LD_INT 980
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PPUSH
6559: CALL_OW 72
6563: OR
6564: IFFALSE 6507
// ComMoveXY ( cargos , 7 , 9 ) ;
6566: LD_VAR 0 1
6570: PPUSH
6571: LD_INT 7
6573: PPUSH
6574: LD_INT 9
6576: PPUSH
6577: CALL_OW 111
// cargoSee = 1 ;
6581: LD_ADDR_EXP 29
6585: PUSH
6586: LD_INT 1
6588: ST_TO_ADDR
// cargoEscape = 1 ;
6589: LD_ADDR_EXP 20
6593: PUSH
6594: LD_INT 1
6596: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6597: LD_EXP 17
6601: PPUSH
6602: LD_STRING D5-Rus2-1a
6604: PPUSH
6605: CALL_OW 88
// end ;
6609: PPOPN 1
6611: END
// every 0 0$1 trigger cargoEscape > 0 do
6612: LD_EXP 20
6616: PUSH
6617: LD_INT 0
6619: GREATER
6620: IFFALSE 6767
6622: GO 6624
6624: DISABLE
// begin enable ;
6625: ENABLE
// ComMoveToArea ( [ cargo1 , cargo2 ] , RussianAttack ) ;
6626: LD_EXP 15
6630: PUSH
6631: LD_EXP 16
6635: PUSH
6636: EMPTY
6637: LIST
6638: LIST
6639: PPUSH
6640: LD_INT 13
6642: PPUSH
6643: CALL_OW 113
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6647: LD_EXP 15
6651: PPUSH
6652: LD_INT 13
6654: PPUSH
6655: CALL_OW 308
6659: PUSH
6660: LD_EXP 17
6664: PPUSH
6665: LD_INT 13
6667: PPUSH
6668: CALL_OW 308
6672: OR
6673: IFFALSE 6707
// begin RemoveUnit ( cargo1 ) ;
6675: LD_EXP 15
6679: PPUSH
6680: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6684: LD_EXP 17
6688: PPUSH
6689: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6693: LD_ADDR_EXP 20
6697: PUSH
6698: LD_EXP 20
6702: PUSH
6703: LD_INT 1
6705: PLUS
6706: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6707: LD_EXP 16
6711: PPUSH
6712: LD_INT 13
6714: PPUSH
6715: CALL_OW 308
6719: PUSH
6720: LD_EXP 18
6724: PPUSH
6725: LD_INT 13
6727: PPUSH
6728: CALL_OW 308
6732: OR
6733: IFFALSE 6767
// begin RemoveUnit ( cargo2 ) ;
6735: LD_EXP 16
6739: PPUSH
6740: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6744: LD_EXP 18
6748: PPUSH
6749: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6753: LD_ADDR_EXP 20
6757: PUSH
6758: LD_EXP 20
6762: PUSH
6763: LD_INT 1
6765: PLUS
6766: ST_TO_ADDR
// end ; end ;
6767: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
6768: LD_EXP 20
6772: PUSH
6773: LD_INT 1
6775: GREATER
6776: IFFALSE 7025
6778: GO 6780
6780: DISABLE
6781: LD_INT 0
6783: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
6784: LD_INT 4
6786: PPUSH
6787: LD_INT 1
6789: PPUSH
6790: LD_INT 1
6792: PPUSH
6793: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6797: LD_INT 31
6799: PPUSH
6800: LD_INT 1
6802: PPUSH
6803: LD_INT 1
6805: PPUSH
6806: CALL_OW 324
// Hint ( Bunker ) ;
6810: LD_STRING Bunker
6812: PPUSH
6813: CALL_OW 339
// if IsOK ( Jerry ) then
6817: LD_EXP 7
6821: PPUSH
6822: CALL_OW 302
6826: IFFALSE 6842
// Say ( Jerry , D5a-Sol1-1 ) else
6828: LD_EXP 7
6832: PPUSH
6833: LD_STRING D5a-Sol1-1
6835: PPUSH
6836: CALL_OW 88
6840: GO 6928
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
6842: LD_ADDR_VAR 0 1
6846: PUSH
6847: LD_INT 22
6849: PUSH
6850: LD_INT 1
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PUSH
6857: LD_INT 26
6859: PUSH
6860: LD_INT 1
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PPUSH
6871: CALL_OW 69
6875: PUSH
6876: LD_EXP 1
6880: PUSH
6881: LD_EXP 2
6885: PUSH
6886: LD_EXP 3
6890: PUSH
6891: LD_EXP 5
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: LIST
6900: LIST
6901: DIFF
6902: ST_TO_ADDR
// if not speaker then
6903: LD_VAR 0 1
6907: NOT
6908: IFFALSE 6912
// exit ;
6910: GO 7025
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
6912: LD_VAR 0 1
6916: PUSH
6917: LD_INT 1
6919: ARRAY
6920: PPUSH
6921: LD_STRING D5a-Sol1-1
6923: PPUSH
6924: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
6928: LD_EXP 1
6932: PPUSH
6933: LD_STRING D5a-JMM-1
6935: PPUSH
6936: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
6940: LD_INT 22
6942: PPUSH
6943: LD_INT 22
6945: PUSH
6946: LD_INT 1
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PUSH
6953: LD_INT 25
6955: PUSH
6956: LD_INT 2
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: PPUSH
6967: CALL_OW 70
6971: IFFALSE 7025
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
6973: LD_INT 22
6975: PPUSH
6976: LD_INT 22
6978: PUSH
6979: LD_INT 1
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PUSH
6986: LD_INT 25
6988: PUSH
6989: LD_INT 2
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PPUSH
7000: CALL_OW 70
7004: PUSH
7005: LD_INT 1
7007: ARRAY
7008: PPUSH
7009: LD_INT 31
7011: PPUSH
7012: LD_INT 44
7014: PPUSH
7015: LD_INT 13
7017: PPUSH
7018: LD_INT 1
7020: PPUSH
7021: CALL_OW 145
// end ;
7025: PPOPN 1
7027: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7028: LD_INT 1
7030: PPUSH
7031: CALL_OW 255
7035: PUSH
7036: LD_INT 3
7038: EQUAL
7039: PUSH
7040: LD_INT 1
7042: PPUSH
7043: CALL_OW 256
7047: PUSH
7048: LD_INT 1000
7050: LESS
7051: AND
7052: PUSH
7053: LD_INT 10
7055: PPUSH
7056: CALL_OW 255
7060: PUSH
7061: LD_INT 3
7063: EQUAL
7064: PUSH
7065: LD_INT 10
7067: PPUSH
7068: CALL_OW 256
7072: PUSH
7073: LD_INT 1000
7075: LESS
7076: AND
7077: OR
7078: IFFALSE 7095
7080: GO 7082
7082: DISABLE
// begin Say ( JMM , D8-JMM-1 ) ;
7083: LD_EXP 1
7087: PPUSH
7088: LD_STRING D8-JMM-1
7090: PPUSH
7091: CALL_OW 88
// end ;
7095: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7096: LD_EXP 8
7100: PPUSH
7101: CALL_OW 310
7105: PUSH
7106: LD_INT 1
7108: EQUAL
7109: PUSH
7110: LD_EXP 22
7114: PUSH
7115: LD_INT 3
7117: EQUAL
7118: NOT
7119: AND
7120: IFFALSE 7142
7122: GO 7124
7124: DISABLE
// begin mikhailInBase = 1 ;
7125: LD_ADDR_EXP 22
7129: PUSH
7130: LD_INT 1
7132: ST_TO_ADDR
// mikhailStatus = 1 ;
7133: LD_ADDR_EXP 21
7137: PUSH
7138: LD_INT 1
7140: ST_TO_ADDR
// enable ;
7141: ENABLE
// end ;
7142: END
// export function AskMikhail ; begin
7143: LD_INT 0
7145: PPUSH
// case query ( QMikh2 ) of 1 :
7146: LD_STRING QMikh2
7148: PPUSH
7149: CALL_OW 97
7153: PUSH
7154: LD_INT 1
7156: DOUBLE
7157: EQUAL
7158: IFTRUE 7162
7160: GO 7229
7162: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7163: LD_INT 1
7165: PPUSH
7166: LD_INT 6
7168: PPUSH
7169: LD_INT 2
7171: PPUSH
7172: LD_INT 1
7174: PPUSH
7175: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7179: LD_EXP 8
7183: PPUSH
7184: LD_INT 6
7186: PPUSH
7187: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7191: LD_EXP 8
7195: PPUSH
7196: CALL_OW 122
// wait ( 0 0$1 ) ;
7200: LD_INT 35
7202: PPUSH
7203: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7207: LD_EXP 8
7211: PPUSH
7212: LD_INT 17
7214: PPUSH
7215: CALL_OW 113
// mikhailInbase = 0 ;
7219: LD_ADDR_EXP 22
7223: PUSH
7224: LD_INT 0
7226: ST_TO_ADDR
// end ; 2 :
7227: GO 7470
7229: LD_INT 2
7231: DOUBLE
7232: EQUAL
7233: IFTRUE 7237
7235: GO 7410
7237: POP
// begin mikhailInBase = 2 ;
7238: LD_ADDR_EXP 22
7242: PUSH
7243: LD_INT 2
7245: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7246: LD_EXP 8
7250: PPUSH
7251: LD_INT 6
7253: PPUSH
7254: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7258: LD_EXP 8
7262: PPUSH
7263: CALL_OW 122
// wait ( 0 0$1 ) ;
7267: LD_INT 35
7269: PPUSH
7270: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7274: LD_EXP 8
7278: PPUSH
7279: LD_EXP 8
7283: PPUSH
7284: CALL_OW 250
7288: PUSH
7289: LD_INT 2
7291: PLUS
7292: PPUSH
7293: LD_EXP 8
7297: PPUSH
7298: CALL_OW 251
7302: PUSH
7303: LD_INT 2
7305: PLUS
7306: PPUSH
7307: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7311: LD_EXP 8
7315: PPUSH
7316: LD_EXP 8
7320: PPUSH
7321: CALL_OW 250
7325: PUSH
7326: LD_INT 1
7328: PLUS
7329: PPUSH
7330: LD_EXP 8
7334: PPUSH
7335: CALL_OW 251
7339: PUSH
7340: LD_INT 2
7342: PLUS
7343: PPUSH
7344: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7348: LD_EXP 8
7352: PPUSH
7353: LD_EXP 8
7357: PPUSH
7358: CALL_OW 250
7362: PUSH
7363: LD_INT 2
7365: PLUS
7366: PPUSH
7367: LD_EXP 8
7371: PPUSH
7372: CALL_OW 251
7376: PPUSH
7377: CALL_OW 171
// wait ( 0 0$5 ) ;
7381: LD_INT 175
7383: PPUSH
7384: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7388: LD_EXP 8
7392: PPUSH
7393: LD_INT 25
7395: PPUSH
7396: CALL_OW 113
// mikhailInBase = 4 ;
7400: LD_ADDR_EXP 22
7404: PUSH
7405: LD_INT 4
7407: ST_TO_ADDR
// end ; 3 :
7408: GO 7470
7410: LD_INT 3
7412: DOUBLE
7413: EQUAL
7414: IFTRUE 7418
7416: GO 7469
7418: POP
// begin SetSide ( Mikhail , 6 ) ;
7419: LD_EXP 8
7423: PPUSH
7424: LD_INT 6
7426: PPUSH
7427: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7431: LD_EXP 8
7435: PPUSH
7436: CALL_OW 122
// wait ( 0 0$1 ) ;
7440: LD_INT 35
7442: PPUSH
7443: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7447: LD_EXP 8
7451: PPUSH
7452: LD_INT 17
7454: PPUSH
7455: CALL_OW 113
// mikhailInbase = 3 ;
7459: LD_ADDR_EXP 22
7463: PUSH
7464: LD_INT 3
7466: ST_TO_ADDR
// end ; end ;
7467: GO 7470
7469: POP
// end ;
7470: LD_VAR 0 1
7474: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7475: LD_EXP 8
7479: PPUSH
7480: LD_INT 25
7482: PPUSH
7483: CALL_OW 308
7487: PUSH
7488: LD_EXP 22
7492: PUSH
7493: LD_INT 4
7495: EQUAL
7496: AND
7497: IFFALSE 7601
7499: GO 7501
7501: DISABLE
// begin enable ;
7502: ENABLE
// mikhailInBase = 1 ;
7503: LD_ADDR_EXP 22
7507: PUSH
7508: LD_INT 1
7510: ST_TO_ADDR
// InGameOn ;
7511: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7515: LD_INT 1
7517: PPUSH
7518: LD_INT 6
7520: PPUSH
7521: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7525: LD_INT 35
7527: PPUSH
7528: CALL_OW 67
// if Carry ( Mikhail ) then
7532: LD_EXP 8
7536: PPUSH
7537: CALL_OW 281
7541: IFFALSE 7552
// ComUnload ( Mikhail ) ;
7543: LD_EXP 8
7547: PPUSH
7548: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7552: LD_EXP 8
7556: PPUSH
7557: LD_INT 1
7559: PPUSH
7560: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7564: LD_EXP 8
7568: PPUSH
7569: CALL_OW 310
7573: IFFALSE 7525
// SetSide ( dep1 , 1 ) ;
7575: LD_INT 1
7577: PPUSH
7578: LD_INT 1
7580: PPUSH
7581: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7585: LD_EXP 8
7589: PPUSH
7590: LD_INT 1
7592: PPUSH
7593: CALL_OW 235
// InGameOff ;
7597: CALL_OW 9
// end ;
7601: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7602: LD_EXP 8
7606: PPUSH
7607: CALL_OW 310
7611: PUSH
7612: LD_EXP 22
7616: PUSH
7617: LD_INT 3
7619: EQUAL
7620: NOT
7621: AND
7622: IFFALSE 7757
7624: GO 7626
7626: DISABLE
// begin enable ;
7627: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7628: LD_INT 22
7630: PUSH
7631: LD_INT 1
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PUSH
7638: LD_INT 21
7640: PUSH
7641: LD_INT 1
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PUSH
7648: LD_INT 91
7650: PUSH
7651: LD_EXP 8
7655: PPUSH
7656: CALL_OW 310
7660: PUSH
7661: LD_INT 10
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: LIST
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: LIST
7673: PPUSH
7674: CALL_OW 69
7678: PUSH
7679: LD_INT 1
7681: EQUAL
7682: IFFALSE 7757
// begin mikhailStatus = 4 ;
7684: LD_ADDR_EXP 21
7688: PUSH
7689: LD_INT 4
7691: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
7692: LD_INT 1
7694: PPUSH
7695: LD_INT 6
7697: PPUSH
7698: LD_INT 2
7700: PPUSH
7701: LD_INT 1
7703: PPUSH
7704: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7708: LD_EXP 8
7712: PPUSH
7713: LD_INT 6
7715: PPUSH
7716: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7720: LD_EXP 8
7724: PPUSH
7725: CALL_OW 122
// wait ( 0 0$1 ) ;
7729: LD_INT 35
7731: PPUSH
7732: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7736: LD_EXP 8
7740: PPUSH
7741: LD_INT 17
7743: PPUSH
7744: CALL_OW 113
// mikhailStatus = 3 ;
7748: LD_ADDR_EXP 21
7752: PUSH
7753: LD_INT 3
7755: ST_TO_ADDR
// disable ;
7756: DISABLE
// end ; end ;
7757: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7758: LD_EXP 1
7762: PPUSH
7763: LD_EXP 23
7767: PPUSH
7768: CALL_OW 296
7772: PUSH
7773: LD_INT 5
7775: LESS
7776: PUSH
7777: LD_EXP 21
7781: PUSH
7782: LD_INT 3
7784: EQUAL
7785: AND
7786: PUSH
7787: LD_EXP 22
7791: PUSH
7792: LD_INT 3
7794: EQUAL
7795: NOT
7796: AND
7797: IFFALSE 8019
7799: GO 7801
7801: DISABLE
7802: LD_INT 0
7804: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
7805: LD_ADDR_VAR 0 1
7809: PUSH
7810: LD_INT 22
7812: PUSH
7813: LD_INT 1
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: PUSH
7820: LD_INT 21
7822: PUSH
7823: LD_INT 1
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: PUSH
7830: LD_INT 26
7832: PUSH
7833: LD_INT 1
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PUSH
7840: EMPTY
7841: LIST
7842: LIST
7843: LIST
7844: PPUSH
7845: CALL_OW 69
7849: PUSH
7850: LD_EXP 1
7854: PUSH
7855: LD_EXP 5
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: DIFF
7864: ST_TO_ADDR
// DialogueOn ;
7865: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7869: LD_EXP 1
7873: PPUSH
7874: LD_STRING D7-JMM-1
7876: PPUSH
7877: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7881: LD_VAR 0 1
7885: PUSH
7886: LD_INT 1
7888: ARRAY
7889: PPUSH
7890: LD_STRING D7-Sol1-1
7892: PPUSH
7893: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7897: LD_EXP 1
7901: PPUSH
7902: LD_STRING D7-JMM-2
7904: PPUSH
7905: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
7909: LD_VAR 0 1
7913: PUSH
7914: LD_INT 1
7916: ARRAY
7917: PPUSH
7918: LD_STRING D7-Sol1-2
7920: PPUSH
7921: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
7925: LD_EXP 1
7929: PPUSH
7930: LD_STRING D7-JMM-3
7932: PPUSH
7933: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
7937: LD_VAR 0 1
7941: PUSH
7942: LD_INT 1
7944: ARRAY
7945: PPUSH
7946: LD_STRING D7-Sol1-3
7948: PPUSH
7949: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
7953: LD_EXP 3
7957: PPUSH
7958: CALL_OW 302
7962: PUSH
7963: LD_EXP 4
7967: PPUSH
7968: CALL_OW 302
7972: AND
7973: IFFALSE 8015
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
7975: LD_EXP 3
7979: PPUSH
7980: LD_STRING D7-Cyrus-3
7982: PPUSH
7983: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
7987: LD_VAR 0 1
7991: PUSH
7992: LD_INT 1
7994: ARRAY
7995: PPUSH
7996: LD_STRING D7-Sol1-4
7998: PPUSH
7999: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8003: LD_EXP 4
8007: PPUSH
8008: LD_STRING D7-Lisa-4
8010: PPUSH
8011: CALL_OW 88
// end ; DialogueOff ;
8015: CALL_OW 7
// end ;
8019: PPOPN 1
8021: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8022: LD_EXP 8
8026: PPUSH
8027: CALL_OW 303
8031: PUSH
8032: LD_EXP 21
8036: PUSH
8037: LD_INT 3
8039: EQUAL
8040: AND
8041: IFFALSE 8055
8043: GO 8045
8045: DISABLE
// begin enable ;
8046: ENABLE
// mikhailStatus = 2 ;
8047: LD_ADDR_EXP 21
8051: PUSH
8052: LD_INT 2
8054: ST_TO_ADDR
// end ;
8055: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8056: LD_EXP 8
8060: PPUSH
8061: LD_INT 17
8063: PPUSH
8064: CALL_OW 308
8068: PUSH
8069: LD_EXP 8
8073: PPUSH
8074: CALL_OW 255
8078: PUSH
8079: LD_INT 6
8081: EQUAL
8082: AND
8083: IFFALSE 8116
8085: GO 8087
8087: DISABLE
// begin if not mikhailInBase = 3 then
8088: LD_EXP 22
8092: PUSH
8093: LD_INT 3
8095: EQUAL
8096: NOT
8097: IFFALSE 8107
// mikhailStatus = 3 ;
8099: LD_ADDR_EXP 21
8103: PUSH
8104: LD_INT 3
8106: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8107: LD_EXP 8
8111: PPUSH
8112: CALL_OW 64
// end ;
8116: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8117: LD_EXP 21
8121: PUSH
8122: LD_INT 3
8124: EQUAL
8125: PUSH
8126: LD_EXP 8
8130: PPUSH
8131: CALL_OW 255
8135: PUSH
8136: LD_INT 6
8138: EQUAL
8139: AND
8140: IFFALSE 8306
8142: GO 8144
8144: DISABLE
8145: LD_INT 0
8147: PPUSH
8148: PPUSH
// begin enable ;
8149: ENABLE
// if IsOk ( Mikhail ) then
8150: LD_EXP 8
8154: PPUSH
8155: CALL_OW 302
8159: IFFALSE 8306
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8161: LD_ADDR_VAR 0 2
8165: PUSH
8166: LD_EXP 8
8170: PPUSH
8171: LD_INT 22
8173: PUSH
8174: LD_INT 1
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PUSH
8181: LD_INT 21
8183: PUSH
8184: LD_INT 1
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: PPUSH
8195: CALL_OW 69
8199: PPUSH
8200: CALL 10277 0 2
8204: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8205: LD_VAR 0 2
8209: PPUSH
8210: LD_EXP 8
8214: PPUSH
8215: CALL_OW 296
8219: PUSH
8220: LD_INT 8
8222: LESS
8223: IFFALSE 8306
// begin if GetSex ( attacker ) = sex_male then
8225: LD_VAR 0 2
8229: PPUSH
8230: CALL_OW 258
8234: PUSH
8235: LD_INT 1
8237: EQUAL
8238: IFFALSE 8274
// begin disable ;
8240: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8241: LD_VAR 0 2
8245: PPUSH
8246: LD_STRING D7a-Sol1-1
8248: PPUSH
8249: CALL_OW 88
// wait ( 0 0$2 ) ;
8253: LD_INT 70
8255: PPUSH
8256: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8260: LD_VAR 0 2
8264: PPUSH
8265: LD_STRING D7a-Sol1-1a
8267: PPUSH
8268: CALL_OW 88
// end else
8272: GO 8306
// begin disable ;
8274: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8275: LD_VAR 0 2
8279: PPUSH
8280: LD_STRING D7a-FSol1-1
8282: PPUSH
8283: CALL_OW 88
// wait ( 0 0$2 ) ;
8287: LD_INT 70
8289: PPUSH
8290: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8294: LD_VAR 0 2
8298: PPUSH
8299: LD_STRING D7a-FSol1-1a
8301: PPUSH
8302: CALL_OW 88
// end ; end ; end ; end ;
8306: PPOPN 2
8308: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8309: LD_EXP 27
8313: PUSH
8314: LD_INT 1
8316: EQUAL
8317: PUSH
8318: LD_INT 22
8320: PPUSH
8321: LD_INT 22
8323: PUSH
8324: LD_INT 3
8326: PUSH
8327: EMPTY
8328: LIST
8329: LIST
8330: PUSH
8331: LD_INT 21
8333: PUSH
8334: LD_INT 1
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: PPUSH
8345: CALL_OW 70
8349: PUSH
8350: LD_INT 2
8352: GREATER
8353: AND
8354: PUSH
8355: LD_INT 22
8357: PPUSH
8358: LD_INT 22
8360: PUSH
8361: LD_INT 1
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: PUSH
8368: LD_INT 2
8370: PUSH
8371: LD_INT 21
8373: PUSH
8374: LD_INT 1
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: PUSH
8381: LD_INT 59
8383: PUSH
8384: EMPTY
8385: LIST
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: LIST
8391: PUSH
8392: EMPTY
8393: LIST
8394: LIST
8395: PPUSH
8396: CALL_OW 70
8400: PUSH
8401: LD_INT 0
8403: EQUAL
8404: AND
8405: IFFALSE 8420
8407: GO 8409
8409: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8410: LD_INT 1
8412: PPUSH
8413: LD_INT 3
8415: PPUSH
8416: CALL_OW 235
// end ;
8420: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8421: LD_EXP 30
8425: PUSH
8426: LD_INT 1
8428: EQUAL
8429: PUSH
8430: LD_INT 22
8432: PUSH
8433: LD_INT 0
8435: PUSH
8436: EMPTY
8437: LIST
8438: LIST
8439: PUSH
8440: LD_INT 25
8442: PUSH
8443: LD_INT 14
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: PPUSH
8454: CALL_OW 69
8458: PUSH
8459: LD_INT 0
8461: EQUAL
8462: AND
8463: IFFALSE 8564
8465: GO 8467
8467: DISABLE
8468: LD_INT 0
8470: PPUSH
8471: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8472: LD_ADDR_VAR 0 2
8476: PUSH
8477: LD_INT 22
8479: PUSH
8480: LD_INT 1
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: PUSH
8487: LD_INT 21
8489: PUSH
8490: LD_INT 1
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: PUSH
8497: LD_INT 23
8499: PUSH
8500: LD_INT 1
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: LIST
8511: PPUSH
8512: CALL_OW 69
8516: ST_TO_ADDR
// for i in tmp do
8517: LD_ADDR_VAR 0 1
8521: PUSH
8522: LD_VAR 0 2
8526: PUSH
8527: FOR_IN
8528: IFFALSE 8555
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8530: LD_VAR 0 1
8534: PPUSH
8535: LD_INT 1
8537: PPUSH
8538: LD_INT 4
8540: PPUSH
8541: CALL_OW 12
8545: PPUSH
8546: LD_INT 300
8548: PPUSH
8549: CALL_OW 492
8553: GO 8527
8555: POP
8556: POP
// SetAchievement ( ACH_TIGER ) ;
8557: LD_STRING ACH_TIGER
8559: PPUSH
8560: CALL_OW 543
// end ;
8564: PPOPN 2
8566: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
8567: LD_INT 22
8569: PUSH
8570: LD_INT 1
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: PUSH
8577: LD_INT 34
8579: PUSH
8580: LD_INT 51
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: PUSH
8587: EMPTY
8588: LIST
8589: LIST
8590: PPUSH
8591: CALL_OW 69
8595: PUSH
8596: LD_INT 2
8598: GREATEREQUAL
8599: IFFALSE 8611
8601: GO 8603
8603: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
8604: LD_STRING ACH_CARGO
8606: PPUSH
8607: CALL_OW 543
8611: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8612: LD_INT 0
8614: PPUSH
8615: PPUSH
8616: PPUSH
8617: PPUSH
// for i = 1 to count do
8618: LD_ADDR_VAR 0 8
8622: PUSH
8623: DOUBLE
8624: LD_INT 1
8626: DEC
8627: ST_TO_ADDR
8628: LD_VAR 0 6
8632: PUSH
8633: FOR_TO
8634: IFFALSE 8715
// begin uc_side = side ;
8636: LD_ADDR_OWVAR 20
8640: PUSH
8641: LD_VAR 0 1
8645: ST_TO_ADDR
// uc_nation = nation ;
8646: LD_ADDR_OWVAR 21
8650: PUSH
8651: LD_VAR 0 2
8655: ST_TO_ADDR
// hc_gallery =  ;
8656: LD_ADDR_OWVAR 33
8660: PUSH
8661: LD_STRING 
8663: ST_TO_ADDR
// hc_name =  ;
8664: LD_ADDR_OWVAR 26
8668: PUSH
8669: LD_STRING 
8671: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8672: LD_INT 0
8674: PPUSH
8675: LD_VAR 0 5
8679: PPUSH
8680: LD_VAR 0 4
8684: PPUSH
8685: CALL_OW 380
// un = CreateHuman ;
8689: LD_ADDR_VAR 0 10
8693: PUSH
8694: CALL_OW 44
8698: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8699: LD_VAR 0 10
8703: PPUSH
8704: LD_VAR 0 3
8708: PPUSH
8709: CALL_OW 52
// end ;
8713: GO 8633
8715: POP
8716: POP
// end ;
8717: LD_VAR 0 7
8721: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8722: LD_INT 0
8724: PPUSH
8725: PPUSH
8726: PPUSH
// uc_side := GetSide ( b ) ;
8727: LD_ADDR_OWVAR 20
8731: PUSH
8732: LD_VAR 0 2
8736: PPUSH
8737: CALL_OW 255
8741: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8742: LD_ADDR_OWVAR 21
8746: PUSH
8747: LD_VAR 0 2
8751: PPUSH
8752: CALL_OW 248
8756: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8757: LD_INT 0
8759: PPUSH
8760: LD_INT 1
8762: PPUSH
8763: LD_VAR 0 1
8767: PPUSH
8768: CALL_OW 380
// un = CreateHuman ;
8772: LD_ADDR_VAR 0 4
8776: PUSH
8777: CALL_OW 44
8781: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8782: LD_ADDR_VAR 0 5
8786: PUSH
8787: LD_VAR 0 2
8791: PPUSH
8792: CALL_OW 254
8796: PUSH
8797: LD_INT 3
8799: MINUS
8800: ST_TO_ADDR
// if dir < 0 then
8801: LD_VAR 0 5
8805: PUSH
8806: LD_INT 0
8808: LESS
8809: IFFALSE 8825
// dir := 6 + dir ;
8811: LD_ADDR_VAR 0 5
8815: PUSH
8816: LD_INT 6
8818: PUSH
8819: LD_VAR 0 5
8823: PLUS
8824: ST_TO_ADDR
// SetDir ( un , dir ) ;
8825: LD_VAR 0 4
8829: PPUSH
8830: LD_VAR 0 5
8834: PPUSH
8835: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8839: LD_VAR 0 4
8843: PPUSH
8844: LD_VAR 0 2
8848: PPUSH
8849: CALL_OW 52
// end ;
8853: LD_VAR 0 3
8857: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8858: LD_INT 0
8860: PPUSH
8861: PPUSH
8862: PPUSH
8863: PPUSH
8864: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8865: LD_ADDR_VAR 0 7
8869: PUSH
8870: LD_INT 22
8872: PUSH
8873: LD_VAR 0 1
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PUSH
8882: LD_INT 25
8884: PUSH
8885: LD_INT 2
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: PUSH
8892: LD_INT 24
8894: PUSH
8895: LD_INT 1000
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: LIST
8906: PPUSH
8907: CALL_OW 69
8911: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8912: LD_ADDR_VAR 0 5
8916: PUSH
8917: LD_VAR 0 3
8921: PPUSH
8922: LD_INT 22
8924: PUSH
8925: LD_VAR 0 1
8929: PUSH
8930: EMPTY
8931: LIST
8932: LIST
8933: PUSH
8934: LD_INT 21
8936: PUSH
8937: LD_INT 3
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: PUSH
8944: LD_INT 3
8946: PUSH
8947: LD_INT 24
8949: PUSH
8950: LD_INT 1000
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: LIST
8965: PUSH
8966: EMPTY
8967: LIST
8968: PPUSH
8969: CALL_OW 70
8973: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8974: LD_VAR 0 5
8978: PUSH
8979: LD_INT 0
8981: GREATER
8982: PUSH
8983: LD_VAR 0 7
8987: PUSH
8988: LD_INT 0
8990: GREATER
8991: AND
8992: IFFALSE 9058
// begin for i in engineerOk_list do
8994: LD_ADDR_VAR 0 6
8998: PUSH
8999: LD_VAR 0 7
9003: PUSH
9004: FOR_IN
9005: IFFALSE 9056
// begin for j in buildings_list do
9007: LD_ADDR_VAR 0 8
9011: PUSH
9012: LD_VAR 0 5
9016: PUSH
9017: FOR_IN
9018: IFFALSE 9052
// begin AddComExitBuilding ( i ) ;
9020: LD_VAR 0 6
9024: PPUSH
9025: CALL_OW 182
// wait ( 0 0$1 ) ;
9029: LD_INT 35
9031: PPUSH
9032: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
9036: LD_VAR 0 6
9040: PPUSH
9041: LD_VAR 0 8
9045: PPUSH
9046: CALL_OW 190
// end ;
9050: GO 9017
9052: POP
9053: POP
// end ;
9054: GO 9004
9056: POP
9057: POP
// end ; if buildings_list = 0 then
9058: LD_VAR 0 5
9062: PUSH
9063: LD_INT 0
9065: EQUAL
9066: IFFALSE 9099
// begin for i in engineerOK_list do
9068: LD_ADDR_VAR 0 6
9072: PUSH
9073: LD_VAR 0 7
9077: PUSH
9078: FOR_IN
9079: IFFALSE 9097
// begin ComEnterUnit ( i , building ) ;
9081: LD_VAR 0 6
9085: PPUSH
9086: LD_VAR 0 2
9090: PPUSH
9091: CALL_OW 120
// end ;
9095: GO 9078
9097: POP
9098: POP
// end ; end ;
9099: LD_VAR 0 4
9103: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
9104: LD_INT 0
9106: PPUSH
9107: PPUSH
9108: PPUSH
9109: PPUSH
9110: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9111: LD_ADDR_VAR 0 6
9115: PUSH
9116: LD_INT 22
9118: PUSH
9119: LD_VAR 0 1
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: PUSH
9128: LD_INT 25
9130: PUSH
9131: LD_INT 4
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: PUSH
9138: LD_INT 24
9140: PUSH
9141: LD_INT 250
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: LIST
9152: PPUSH
9153: CALL_OW 69
9157: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9158: LD_ADDR_VAR 0 9
9162: PUSH
9163: LD_VAR 0 3
9167: PPUSH
9168: LD_INT 22
9170: PUSH
9171: LD_VAR 0 1
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: PUSH
9180: LD_INT 21
9182: PUSH
9183: LD_INT 1
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: PUSH
9190: LD_INT 3
9192: PUSH
9193: LD_INT 24
9195: PUSH
9196: LD_INT 650
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: LIST
9211: PPUSH
9212: CALL_OW 70
9216: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
9217: LD_VAR 0 9
9221: PUSH
9222: LD_INT 0
9224: GREATER
9225: PUSH
9226: LD_VAR 0 6
9230: PUSH
9231: LD_INT 0
9233: GREATER
9234: AND
9235: IFFALSE 9362
// begin for i = 1 to damageUnits do
9237: LD_ADDR_VAR 0 7
9241: PUSH
9242: DOUBLE
9243: LD_INT 1
9245: DEC
9246: ST_TO_ADDR
9247: LD_VAR 0 9
9251: PUSH
9252: FOR_TO
9253: IFFALSE 9277
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9255: LD_VAR 0 9
9259: PUSH
9260: LD_VAR 0 7
9264: ARRAY
9265: PPUSH
9266: LD_VAR 0 2
9270: PPUSH
9271: CALL_OW 113
9275: GO 9252
9277: POP
9278: POP
// for i in sci_list do
9279: LD_ADDR_VAR 0 7
9283: PUSH
9284: LD_VAR 0 6
9288: PUSH
9289: FOR_IN
9290: IFFALSE 9358
// begin ComExitBuilding ( i ) ;
9292: LD_VAR 0 7
9296: PPUSH
9297: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9301: LD_ADDR_VAR 0 8
9305: PUSH
9306: LD_VAR 0 2
9310: PPUSH
9311: LD_INT 22
9313: PUSH
9314: LD_VAR 0 1
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PPUSH
9323: CALL_OW 70
9327: PUSH
9328: FOR_IN
9329: IFFALSE 9354
// begin AddComHeal ( i , j ) ;
9331: LD_VAR 0 7
9335: PPUSH
9336: LD_VAR 0 8
9340: PPUSH
9341: CALL_OW 188
// wait ( 1 1$0 ) ;
9345: LD_INT 2100
9347: PPUSH
9348: CALL_OW 67
// end ;
9352: GO 9328
9354: POP
9355: POP
// end ;
9356: GO 9289
9358: POP
9359: POP
// end else
9360: GO 9376
// begin AddComEnterUnit ( sci_list , build ) ;
9362: LD_VAR 0 6
9366: PPUSH
9367: LD_VAR 0 4
9371: PPUSH
9372: CALL_OW 180
// end ; end ;
9376: LD_VAR 0 5
9380: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9381: LD_INT 0
9383: PPUSH
9384: PPUSH
9385: PPUSH
9386: PPUSH
9387: PPUSH
9388: PPUSH
9389: PPUSH
9390: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9391: LD_ADDR_VAR 0 7
9395: PUSH
9396: LD_VAR 0 3
9400: PPUSH
9401: LD_INT 22
9403: PUSH
9404: LD_VAR 0 1
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: PUSH
9413: LD_INT 21
9415: PUSH
9416: LD_INT 2
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: PUSH
9423: LD_INT 24
9425: PUSH
9426: LD_INT 550
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PUSH
9433: LD_INT 34
9435: PUSH
9436: LD_INT 46
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: PPUSH
9449: CALL_OW 70
9453: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9454: LD_ADDR_VAR 0 8
9458: PUSH
9459: LD_VAR 0 3
9463: PPUSH
9464: LD_INT 22
9466: PUSH
9467: LD_VAR 0 1
9471: PUSH
9472: EMPTY
9473: LIST
9474: LIST
9475: PUSH
9476: LD_INT 21
9478: PUSH
9479: LD_INT 2
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: PUSH
9486: LD_INT 34
9488: PUSH
9489: LD_INT 46
9491: PUSH
9492: EMPTY
9493: LIST
9494: LIST
9495: PUSH
9496: LD_INT 3
9498: PUSH
9499: LD_INT 24
9501: PUSH
9502: LD_INT 550
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: EMPTY
9510: LIST
9511: LIST
9512: PUSH
9513: EMPTY
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: PPUSH
9519: CALL_OW 70
9523: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9524: LD_ADDR_VAR 0 9
9528: PUSH
9529: LD_VAR 0 2
9533: PPUSH
9534: LD_INT 22
9536: PUSH
9537: LD_VAR 0 1
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: PUSH
9546: LD_INT 21
9548: PUSH
9549: LD_INT 2
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PUSH
9556: LD_INT 34
9558: PUSH
9559: LD_INT 46
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: PUSH
9566: LD_INT 24
9568: PUSH
9569: LD_INT 1000
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PUSH
9576: LD_INT 58
9578: PUSH
9579: EMPTY
9580: LIST
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: PPUSH
9589: CALL_OW 70
9593: ST_TO_ADDR
// for i in damageVehicle_list do
9594: LD_ADDR_VAR 0 5
9598: PUSH
9599: LD_VAR 0 8
9603: PUSH
9604: FOR_IN
9605: IFFALSE 9624
// mechanicInside_list = UnitsInside ( i ) ;
9607: LD_ADDR_VAR 0 10
9611: PUSH
9612: LD_VAR 0 5
9616: PPUSH
9617: CALL_OW 313
9621: ST_TO_ADDR
9622: GO 9604
9624: POP
9625: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9626: LD_ADDR_VAR 0 11
9630: PUSH
9631: LD_VAR 0 2
9635: PPUSH
9636: LD_INT 22
9638: PUSH
9639: LD_VAR 0 1
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: PUSH
9648: LD_INT 25
9650: PUSH
9651: LD_INT 3
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: PPUSH
9662: CALL_OW 70
9666: ST_TO_ADDR
// if damageVehicle_list > 0 then
9667: LD_VAR 0 8
9671: PUSH
9672: LD_INT 0
9674: GREATER
9675: IFFALSE 9748
// begin for i in damageVehicle_list do
9677: LD_ADDR_VAR 0 5
9681: PUSH
9682: LD_VAR 0 8
9686: PUSH
9687: FOR_IN
9688: IFFALSE 9746
// begin for j in mechanicInside_list do
9690: LD_ADDR_VAR 0 6
9694: PUSH
9695: LD_VAR 0 10
9699: PUSH
9700: FOR_IN
9701: IFFALSE 9742
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9703: LD_VAR 0 8
9707: PPUSH
9708: LD_VAR 0 2
9712: PPUSH
9713: CALL_OW 113
// AddComExitVehicle ( j ) ;
9717: LD_VAR 0 6
9721: PPUSH
9722: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9726: LD_VAR 0 6
9730: PPUSH
9731: LD_VAR 0 5
9735: PPUSH
9736: CALL_OW 189
// end ;
9740: GO 9700
9742: POP
9743: POP
// end ;
9744: GO 9687
9746: POP
9747: POP
// end ; if emptyVehicle_list > 0 then
9748: LD_VAR 0 9
9752: PUSH
9753: LD_INT 0
9755: GREATER
9756: IFFALSE 9806
// begin for i in emptyVehicle_list do
9758: LD_ADDR_VAR 0 5
9762: PUSH
9763: LD_VAR 0 9
9767: PUSH
9768: FOR_IN
9769: IFFALSE 9804
// begin for j in mechanicOutside_list do
9771: LD_ADDR_VAR 0 6
9775: PUSH
9776: LD_VAR 0 11
9780: PUSH
9781: FOR_IN
9782: IFFALSE 9800
// begin AddComEnterUnit ( j , i ) ;
9784: LD_VAR 0 6
9788: PPUSH
9789: LD_VAR 0 5
9793: PPUSH
9794: CALL_OW 180
// end ;
9798: GO 9781
9800: POP
9801: POP
// end ;
9802: GO 9768
9804: POP
9805: POP
// end ; if VehicleOK_list > 0 then
9806: LD_VAR 0 7
9810: PUSH
9811: LD_INT 0
9813: GREATER
9814: IFFALSE 9848
// begin for i in VehicleOK_list do
9816: LD_ADDR_VAR 0 5
9820: PUSH
9821: LD_VAR 0 7
9825: PUSH
9826: FOR_IN
9827: IFFALSE 9846
// ComAgressiveMove ( i , 110 , 29 ) ;
9829: LD_VAR 0 5
9833: PPUSH
9834: LD_INT 110
9836: PPUSH
9837: LD_INT 29
9839: PPUSH
9840: CALL_OW 114
9844: GO 9826
9846: POP
9847: POP
// end ; end ;
9848: LD_VAR 0 4
9852: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9853: LD_INT 0
9855: PPUSH
9856: PPUSH
9857: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9858: LD_VAR 0 1
9862: PPUSH
9863: LD_INT 22
9865: PUSH
9866: LD_VAR 0 2
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PUSH
9875: LD_INT 2
9877: PUSH
9878: LD_INT 21
9880: PUSH
9881: LD_INT 2
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: PUSH
9888: LD_INT 21
9890: PUSH
9891: LD_INT 1
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: LIST
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PPUSH
9907: CALL_OW 70
9911: PUSH
9912: LD_VAR 0 5
9916: GREATER
9917: IFFALSE 10049
// begin for i in defendersList do
9919: LD_ADDR_VAR 0 7
9923: PUSH
9924: LD_VAR 0 3
9928: PUSH
9929: FOR_IN
9930: IFFALSE 10045
// begin AddComExitBuilding ( i ) ;
9932: LD_VAR 0 7
9936: PPUSH
9937: CALL_OW 182
// wait ( 0 0$1 ) ;
9941: LD_INT 35
9943: PPUSH
9944: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
9948: LD_ADDR_VAR 0 8
9952: PUSH
9953: LD_VAR 0 1
9957: PPUSH
9958: LD_INT 22
9960: PUSH
9961: LD_VAR 0 2
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 2
9972: PUSH
9973: LD_INT 21
9975: PUSH
9976: LD_INT 2
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PUSH
9983: LD_INT 21
9985: PUSH
9986: LD_INT 1
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: LIST
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PPUSH
10002: CALL_OW 70
10006: PUSH
10007: FOR_IN
10008: IFFALSE 10041
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
10010: LD_VAR 0 7
10014: PPUSH
10015: LD_VAR 0 8
10019: PPUSH
10020: CALL_OW 250
10024: PPUSH
10025: LD_VAR 0 8
10029: PPUSH
10030: CALL_OW 251
10034: PPUSH
10035: CALL_OW 174
10039: GO 10007
10041: POP
10042: POP
// end ;
10043: GO 9929
10045: POP
10046: POP
// end else
10047: GO 10080
// begin for i in defendersList do
10049: LD_ADDR_VAR 0 7
10053: PUSH
10054: LD_VAR 0 3
10058: PUSH
10059: FOR_IN
10060: IFFALSE 10078
// ComEnterUnit ( i , build ) ;
10062: LD_VAR 0 7
10066: PPUSH
10067: LD_VAR 0 4
10071: PPUSH
10072: CALL_OW 120
10076: GO 10059
10078: POP
10079: POP
// end ; end ;
10080: LD_VAR 0 6
10084: RET
// export function RussianTrap ; var i ; begin
10085: LD_INT 0
10087: PPUSH
10088: PPUSH
// if GetSide ( Brian ) = 4 then
10089: LD_EXP 6
10093: PPUSH
10094: CALL_OW 255
10098: PUSH
10099: LD_INT 4
10101: EQUAL
10102: IFFALSE 10125
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10104: LD_EXP 6
10108: PUSH
10109: LD_EXP 7
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: PPUSH
10118: LD_INT 0
10120: PPUSH
10121: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10125: LD_ADDR_VAR 0 2
10129: PUSH
10130: LD_INT 22
10132: PUSH
10133: LD_INT 3
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PUSH
10140: LD_INT 21
10142: PUSH
10143: LD_INT 1
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: PPUSH
10154: CALL_OW 69
10158: PUSH
10159: FOR_IN
10160: IFFALSE 10270
// begin ComExitBuilding ( i ) ;
10162: LD_VAR 0 2
10166: PPUSH
10167: CALL_OW 122
// wait ( 0 0$1 ) ;
10171: LD_INT 35
10173: PPUSH
10174: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10178: LD_VAR 0 2
10182: PPUSH
10183: LD_INT 120
10185: PPUSH
10186: LD_INT 56
10188: PPUSH
10189: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10193: LD_VAR 0 2
10197: PPUSH
10198: LD_INT 111
10200: PPUSH
10201: LD_INT 37
10203: PPUSH
10204: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10208: LD_INT 33
10210: PPUSH
10211: CALL_OW 255
10215: PUSH
10216: LD_INT 3
10218: EQUAL
10219: PUSH
10220: LD_INT 33
10222: PPUSH
10223: CALL_OW 302
10227: AND
10228: IFFALSE 10244
// begin AddComEnterUnit ( i , arm2 ) ;
10230: LD_VAR 0 2
10234: PPUSH
10235: LD_INT 33
10237: PPUSH
10238: CALL_OW 180
// end else
10242: GO 10268
// begin AddComCrawl ( i ) ;
10244: LD_VAR 0 2
10248: PPUSH
10249: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10253: LD_VAR 0 2
10257: PPUSH
10258: LD_INT 109
10260: PPUSH
10261: LD_INT 30
10263: PPUSH
10264: CALL_OW 174
// end ; end ;
10268: GO 10159
10270: POP
10271: POP
// end ;
10272: LD_VAR 0 1
10276: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10277: LD_INT 0
10279: PPUSH
10280: PPUSH
10281: PPUSH
10282: PPUSH
10283: PPUSH
// nearest_dist = 1000 ;
10284: LD_ADDR_VAR 0 4
10288: PUSH
10289: LD_INT 1000
10291: ST_TO_ADDR
// nearest_un = un ;
10292: LD_ADDR_VAR 0 5
10296: PUSH
10297: LD_VAR 0 1
10301: ST_TO_ADDR
// for sold in units do
10302: LD_ADDR_VAR 0 6
10306: PUSH
10307: LD_VAR 0 2
10311: PUSH
10312: FOR_IN
10313: IFFALSE 10369
// begin dist = GetDistUnits ( un , sold ) ;
10315: LD_ADDR_VAR 0 7
10319: PUSH
10320: LD_VAR 0 1
10324: PPUSH
10325: LD_VAR 0 6
10329: PPUSH
10330: CALL_OW 296
10334: ST_TO_ADDR
// if dist < nearest_dist then
10335: LD_VAR 0 7
10339: PUSH
10340: LD_VAR 0 4
10344: LESS
10345: IFFALSE 10367
// begin nearest_un = sold ;
10347: LD_ADDR_VAR 0 5
10351: PUSH
10352: LD_VAR 0 6
10356: ST_TO_ADDR
// nearest_dist = dist ;
10357: LD_ADDR_VAR 0 4
10361: PUSH
10362: LD_VAR 0 7
10366: ST_TO_ADDR
// end ; end ;
10367: GO 10312
10369: POP
10370: POP
// result := nearest_un ;
10371: LD_ADDR_VAR 0 3
10375: PUSH
10376: LD_VAR 0 5
10380: ST_TO_ADDR
// end ;
10381: LD_VAR 0 3
10385: RET
// export function PrepareDifficulty ; begin
10386: LD_INT 0
10388: PPUSH
// if Difficulty = 1 then
10389: LD_OWVAR 67
10393: PUSH
10394: LD_INT 1
10396: EQUAL
10397: IFFALSE 10460
// begin RemoveUnit ( brw2 ) ;
10399: LD_INT 9
10401: PPUSH
10402: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10406: LD_INT 30
10408: PPUSH
10409: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10413: LD_INT 52
10415: PPUSH
10416: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10420: LD_INT 63
10422: PPUSH
10423: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10427: LD_INT 5
10429: PUSH
10430: LD_INT 4
10432: PUSH
10433: EMPTY
10434: LIST
10435: LIST
10436: PPUSH
10437: LD_INT 60
10439: PPUSH
10440: CALL_OW 240
// RuSoldMinLevel = 0 ;
10444: LD_ADDR_EXP 13
10448: PUSH
10449: LD_INT 0
10451: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10452: LD_ADDR_EXP 14
10456: PUSH
10457: LD_INT 1
10459: ST_TO_ADDR
// end ; if Difficulty = 2 then
10460: LD_OWVAR 67
10464: PUSH
10465: LD_INT 2
10467: EQUAL
10468: IFFALSE 10510
// begin RemoveUnit ( brw4 ) ;
10470: LD_INT 52
10472: PPUSH
10473: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10477: LD_INT 5
10479: PUSH
10480: LD_INT 4
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: PPUSH
10487: LD_INT 50
10489: PPUSH
10490: CALL_OW 240
// RuSoldMinLevel = 1 ;
10494: LD_ADDR_EXP 13
10498: PUSH
10499: LD_INT 1
10501: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10502: LD_ADDR_EXP 14
10506: PUSH
10507: LD_INT 2
10509: ST_TO_ADDR
// end ; if Difficulty = 3 then
10510: LD_OWVAR 67
10514: PUSH
10515: LD_INT 3
10517: EQUAL
10518: IFFALSE 10553
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10520: LD_INT 5
10522: PUSH
10523: LD_INT 4
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: PPUSH
10530: LD_INT 40
10532: PPUSH
10533: CALL_OW 240
// RuSoldMinLevel = 2 ;
10537: LD_ADDR_EXP 13
10541: PUSH
10542: LD_INT 2
10544: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10545: LD_ADDR_EXP 14
10549: PUSH
10550: LD_INT 3
10552: ST_TO_ADDR
// end ; end ;
10553: LD_VAR 0 1
10557: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10558: LD_INT 0
10560: PPUSH
10561: PPUSH
10562: PPUSH
// tmp = [ ] ;
10563: LD_ADDR_VAR 0 5
10567: PUSH
10568: EMPTY
10569: ST_TO_ADDR
// if not vehicles then
10570: LD_VAR 0 1
10574: NOT
10575: IFFALSE 10579
// exit ;
10577: GO 10696
// for i in vehicles do
10579: LD_ADDR_VAR 0 4
10583: PUSH
10584: LD_VAR 0 1
10588: PUSH
10589: FOR_IN
10590: IFFALSE 10680
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10592: LD_ADDR_VAR 0 5
10596: PUSH
10597: LD_VAR 0 5
10601: PPUSH
10602: LD_INT 1
10604: PPUSH
10605: LD_VAR 0 4
10609: PPUSH
10610: CALL_OW 265
10614: PUSH
10615: LD_VAR 0 4
10619: PPUSH
10620: CALL_OW 262
10624: PUSH
10625: LD_VAR 0 4
10629: PPUSH
10630: CALL_OW 263
10634: PUSH
10635: LD_VAR 0 4
10639: PPUSH
10640: CALL_OW 264
10644: PUSH
10645: LD_VAR 0 4
10649: PPUSH
10650: CALL_OW 261
10654: PUSH
10655: LD_VAR 0 4
10659: PPUSH
10660: CALL_OW 256
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: PPUSH
10673: CALL_OW 2
10677: ST_TO_ADDR
// end ;
10678: GO 10589
10680: POP
10681: POP
// SaveVariable ( tmp , ident ) ;
10682: LD_VAR 0 5
10686: PPUSH
10687: LD_VAR 0 2
10691: PPUSH
10692: CALL_OW 39
// end ; end_of_file
10696: LD_VAR 0 3
10700: RET
// export function PrepareHeroes ; var plive ; begin
10701: LD_INT 0
10703: PPUSH
10704: PPUSH
// uc_side = 1 ;
10705: LD_ADDR_OWVAR 20
10709: PUSH
10710: LD_INT 1
10712: ST_TO_ADDR
// JMM = CreateCharacter ( 01_JMM ) ;
10713: LD_ADDR_EXP 1
10717: PUSH
10718: LD_STRING 01_JMM
10720: PPUSH
10721: CALL_OW 34
10725: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10726: LD_ADDR_VAR 0 2
10730: PUSH
10731: LD_STRING 01_JMMLifePoints_1
10733: PPUSH
10734: LD_INT 1000
10736: PPUSH
10737: CALL_OW 30
10741: ST_TO_ADDR
// if plive < 250 then
10742: LD_VAR 0 2
10746: PUSH
10747: LD_INT 250
10749: LESS
10750: IFFALSE 10760
// plive := 300 ;
10752: LD_ADDR_VAR 0 2
10756: PUSH
10757: LD_INT 300
10759: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10760: LD_EXP 1
10764: PPUSH
10765: LD_VAR 0 2
10769: PPUSH
10770: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10774: LD_ADDR_EXP 9
10778: PUSH
10779: LD_STRING Powell
10781: PPUSH
10782: CALL_OW 25
10786: ST_TO_ADDR
// Bobby = CreateCharacter ( 01_Bobby ) ;
10787: LD_ADDR_EXP 2
10791: PUSH
10792: LD_STRING 01_Bobby
10794: PPUSH
10795: CALL_OW 34
10799: ST_TO_ADDR
// if Bobby then
10800: LD_EXP 2
10804: IFFALSE 10854
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10806: LD_ADDR_VAR 0 2
10810: PUSH
10811: LD_STRING 01_BobbyLifePoints_1
10813: PPUSH
10814: LD_INT 1000
10816: PPUSH
10817: CALL_OW 30
10821: ST_TO_ADDR
// if plive < 250 then
10822: LD_VAR 0 2
10826: PUSH
10827: LD_INT 250
10829: LESS
10830: IFFALSE 10840
// plive := 300 ;
10832: LD_ADDR_VAR 0 2
10836: PUSH
10837: LD_INT 300
10839: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
10840: LD_EXP 2
10844: PPUSH
10845: LD_VAR 0 2
10849: PPUSH
10850: CALL_OW 234
// end ; Cyrus = CreateCharacter ( 01_Cyrus ) ;
10854: LD_ADDR_EXP 3
10858: PUSH
10859: LD_STRING 01_Cyrus
10861: PPUSH
10862: CALL_OW 34
10866: ST_TO_ADDR
// if Cyrus then
10867: LD_EXP 3
10871: IFFALSE 10921
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
10873: LD_ADDR_VAR 0 2
10877: PUSH
10878: LD_STRING 01_CyrusLifePoints_1
10880: PPUSH
10881: LD_INT 1000
10883: PPUSH
10884: CALL_OW 30
10888: ST_TO_ADDR
// if plive < 250 then
10889: LD_VAR 0 2
10893: PUSH
10894: LD_INT 250
10896: LESS
10897: IFFALSE 10907
// plive := 300 ;
10899: LD_ADDR_VAR 0 2
10903: PUSH
10904: LD_INT 300
10906: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
10907: LD_EXP 3
10911: PPUSH
10912: LD_VAR 0 2
10916: PPUSH
10917: CALL_OW 234
// end ; Khatam = NewCharacter ( Khatam ) ;
10921: LD_ADDR_EXP 5
10925: PUSH
10926: LD_STRING Khatam
10928: PPUSH
10929: CALL_OW 25
10933: ST_TO_ADDR
// uc_side = 4 ;
10934: LD_ADDR_OWVAR 20
10938: PUSH
10939: LD_INT 4
10941: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10942: LD_ADDR_EXP 4
10946: PUSH
10947: LD_STRING Lisa
10949: PPUSH
10950: CALL_OW 25
10954: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10955: LD_EXP 1
10959: PPUSH
10960: LD_INT 3
10962: PPUSH
10963: LD_INT 0
10965: PPUSH
10966: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10970: LD_EXP 2
10974: PPUSH
10975: LD_INT 3
10977: PPUSH
10978: LD_INT 0
10980: PPUSH
10981: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10985: LD_EXP 3
10989: PPUSH
10990: LD_INT 3
10992: PPUSH
10993: LD_INT 0
10995: PPUSH
10996: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
11000: LD_EXP 4
11004: PPUSH
11005: LD_INT 5
11007: PPUSH
11008: LD_INT 0
11010: PPUSH
11011: CALL_OW 49
// ComCrawl ( Lisa ) ;
11015: LD_EXP 4
11019: PPUSH
11020: CALL_OW 137
// end ;
11024: LD_VAR 0 1
11028: RET
// export function PrepareLisSquad ; var i , un ; begin
11029: LD_INT 0
11031: PPUSH
11032: PPUSH
11033: PPUSH
// uc_side = 4 ;
11034: LD_ADDR_OWVAR 20
11038: PUSH
11039: LD_INT 4
11041: ST_TO_ADDR
// uc_nation = 1 ;
11042: LD_ADDR_OWVAR 21
11046: PUSH
11047: LD_INT 1
11049: ST_TO_ADDR
// hc_class := 2 ;
11050: LD_ADDR_OWVAR 28
11054: PUSH
11055: LD_INT 2
11057: ST_TO_ADDR
// hc_sex := sex_male ;
11058: LD_ADDR_OWVAR 27
11062: PUSH
11063: LD_INT 1
11065: ST_TO_ADDR
// hc_gallery :=  ;
11066: LD_ADDR_OWVAR 33
11070: PUSH
11071: LD_STRING 
11073: ST_TO_ADDR
// hc_name :=  ;
11074: LD_ADDR_OWVAR 26
11078: PUSH
11079: LD_STRING 
11081: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11082: LD_ADDR_OWVAR 30
11086: PUSH
11087: LD_INT 0
11089: PUSH
11090: LD_INT 1
11092: PUSH
11093: LD_INT 0
11095: PUSH
11096: LD_INT 0
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11105: LD_ADDR_OWVAR 31
11109: PUSH
11110: LD_INT 1
11112: PUSH
11113: LD_INT 2
11115: PUSH
11116: LD_INT 0
11118: PUSH
11119: LD_INT 0
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: ST_TO_ADDR
// un := CreateHuman ;
11128: LD_ADDR_VAR 0 3
11132: PUSH
11133: CALL_OW 44
11137: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11138: LD_VAR 0 3
11142: PPUSH
11143: LD_INT 6
11145: PPUSH
11146: LD_INT 0
11148: PPUSH
11149: CALL_OW 49
// hc_sex := sex_female ;
11153: LD_ADDR_OWVAR 27
11157: PUSH
11158: LD_INT 2
11160: ST_TO_ADDR
// hc_gallery :=  ;
11161: LD_ADDR_OWVAR 33
11165: PUSH
11166: LD_STRING 
11168: ST_TO_ADDR
// hc_name :=  ;
11169: LD_ADDR_OWVAR 26
11173: PUSH
11174: LD_STRING 
11176: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11177: LD_ADDR_OWVAR 30
11181: PUSH
11182: LD_INT 0
11184: PUSH
11185: LD_INT 0
11187: PUSH
11188: LD_INT 0
11190: PUSH
11191: LD_INT 1
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11200: LD_ADDR_OWVAR 31
11204: PUSH
11205: LD_INT 0
11207: PUSH
11208: LD_INT 1
11210: PUSH
11211: LD_INT 0
11213: PUSH
11214: LD_INT 1
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: ST_TO_ADDR
// un := CreateHuman ;
11223: LD_ADDR_VAR 0 3
11227: PUSH
11228: CALL_OW 44
11232: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11233: LD_VAR 0 3
11237: PPUSH
11238: LD_INT 6
11240: PPUSH
11241: LD_INT 0
11243: PPUSH
11244: CALL_OW 49
// if not Bobby and not Cyrus then
11248: LD_EXP 2
11252: NOT
11253: PUSH
11254: LD_EXP 3
11258: NOT
11259: AND
11260: IFFALSE 11365
// begin hc_class := 1 ;
11262: LD_ADDR_OWVAR 28
11266: PUSH
11267: LD_INT 1
11269: ST_TO_ADDR
// hc_sex := sex_male ;
11270: LD_ADDR_OWVAR 27
11274: PUSH
11275: LD_INT 1
11277: ST_TO_ADDR
// hc_gallery :=  ;
11278: LD_ADDR_OWVAR 33
11282: PUSH
11283: LD_STRING 
11285: ST_TO_ADDR
// hc_name :=  ;
11286: LD_ADDR_OWVAR 26
11290: PUSH
11291: LD_STRING 
11293: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11294: LD_ADDR_OWVAR 30
11298: PUSH
11299: LD_INT 2
11301: PUSH
11302: LD_INT 3
11304: PUSH
11305: LD_INT 1
11307: PUSH
11308: LD_INT 0
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11317: LD_ADDR_OWVAR 31
11321: PUSH
11322: LD_INT 2
11324: PUSH
11325: LD_INT 3
11327: PUSH
11328: LD_INT 1
11330: PUSH
11331: LD_INT 0
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: ST_TO_ADDR
// un := CreateHuman ;
11340: LD_ADDR_VAR 0 3
11344: PUSH
11345: CALL_OW 44
11349: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11350: LD_VAR 0 3
11354: PPUSH
11355: LD_INT 31
11357: PPUSH
11358: LD_INT 0
11360: PPUSH
11361: CALL_OW 49
// end ; InitHc ;
11365: CALL_OW 19
// end ;
11369: LD_VAR 0 1
11373: RET
// export function PrepareOtherAmericans ; begin
11374: LD_INT 0
11376: PPUSH
// uc_side = 4 ;
11377: LD_ADDR_OWVAR 20
11381: PUSH
11382: LD_INT 4
11384: ST_TO_ADDR
// uc_nation = 1 ;
11385: LD_ADDR_OWVAR 21
11389: PUSH
11390: LD_INT 1
11392: ST_TO_ADDR
// hc_gallery =  ;
11393: LD_ADDR_OWVAR 33
11397: PUSH
11398: LD_STRING 
11400: ST_TO_ADDR
// hc_name = Tom Garvin ;
11401: LD_ADDR_OWVAR 26
11405: PUSH
11406: LD_STRING Tom Garvin
11408: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
11409: LD_INT 1
11411: PPUSH
11412: LD_INT 1
11414: PPUSH
11415: LD_INT 1
11417: PPUSH
11418: LD_INT 2
11420: PPUSH
11421: CALL_OW 12
11425: PPUSH
11426: CALL_OW 380
// Brian = CreateHuman ;
11430: LD_ADDR_EXP 6
11434: PUSH
11435: CALL_OW 44
11439: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11440: LD_EXP 6
11444: PPUSH
11445: LD_INT 10
11447: PPUSH
11448: LD_INT 0
11450: PPUSH
11451: CALL_OW 49
// hc_name = Jerry White ;
11455: LD_ADDR_OWVAR 26
11459: PUSH
11460: LD_STRING Jerry White
11462: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11463: LD_INT 1
11465: PPUSH
11466: LD_INT 3
11468: PPUSH
11469: LD_INT 1
11471: PPUSH
11472: LD_INT 2
11474: PPUSH
11475: CALL_OW 12
11479: PPUSH
11480: CALL_OW 380
// Jerry = CreateHuman ;
11484: LD_ADDR_EXP 7
11488: PUSH
11489: CALL_OW 44
11493: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11494: LD_EXP 7
11498: PPUSH
11499: LD_INT 10
11501: PPUSH
11502: LD_INT 0
11504: PPUSH
11505: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11509: LD_EXP 6
11513: PUSH
11514: LD_EXP 7
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PPUSH
11523: CALL_OW 140
// end ;
11527: LD_VAR 0 1
11531: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11532: LD_INT 0
11534: PPUSH
11535: PPUSH
11536: PPUSH
// for i = 1 to 6 do
11537: LD_ADDR_VAR 0 2
11541: PUSH
11542: DOUBLE
11543: LD_INT 1
11545: DEC
11546: ST_TO_ADDR
11547: LD_INT 6
11549: PUSH
11550: FOR_TO
11551: IFFALSE 11645
// begin uc_side = 4 ;
11553: LD_ADDR_OWVAR 20
11557: PUSH
11558: LD_INT 4
11560: ST_TO_ADDR
// uc_nation = 1 ;
11561: LD_ADDR_OWVAR 21
11565: PUSH
11566: LD_INT 1
11568: ST_TO_ADDR
// hc_gallery =  ;
11569: LD_ADDR_OWVAR 33
11573: PUSH
11574: LD_STRING 
11576: ST_TO_ADDR
// hc_name =  ;
11577: LD_ADDR_OWVAR 26
11581: PUSH
11582: LD_STRING 
11584: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11585: LD_INT 0
11587: PPUSH
11588: LD_INT 1
11590: PPUSH
11591: LD_INT 4
11593: PPUSH
11594: CALL_OW 12
11598: PPUSH
11599: LD_INT 1
11601: PPUSH
11602: CALL_OW 380
// un = CreateHuman ;
11606: LD_ADDR_VAR 0 3
11610: PUSH
11611: CALL_OW 44
11615: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11616: LD_VAR 0 3
11620: PPUSH
11621: LD_INT 16
11623: PPUSH
11624: LD_INT 0
11626: PPUSH
11627: CALL_OW 49
// SetLives ( un , 1 ) ;
11631: LD_VAR 0 3
11635: PPUSH
11636: LD_INT 1
11638: PPUSH
11639: CALL_OW 234
// end ;
11643: GO 11550
11645: POP
11646: POP
// DyingSold = CreateHuman ;
11647: LD_ADDR_EXP 34
11651: PUSH
11652: CALL_OW 44
11656: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11657: LD_EXP 34
11661: PPUSH
11662: LD_INT 16
11664: PPUSH
11665: LD_INT 0
11667: PPUSH
11668: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11672: LD_EXP 34
11676: PPUSH
11677: LD_INT 250
11679: PPUSH
11680: CALL_OW 234
// end ; end_of_file
11684: LD_VAR 0 1
11688: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11689: LD_INT 0
11691: PPUSH
11692: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11693: LD_ADDR_VAR 0 2
11697: PUSH
11698: LD_INT 22
11700: PUSH
11701: LD_INT 1
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: PUSH
11708: LD_INT 23
11710: PUSH
11711: LD_INT 1
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: PUSH
11718: LD_INT 25
11720: PUSH
11721: LD_INT 2
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: PUSH
11728: LD_INT 50
11730: PUSH
11731: EMPTY
11732: LIST
11733: PUSH
11734: LD_INT 56
11736: PUSH
11737: EMPTY
11738: LIST
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: PPUSH
11747: CALL_OW 69
11751: PUSH
11752: LD_EXP 1
11756: PUSH
11757: EMPTY
11758: LIST
11759: DIFF
11760: ST_TO_ADDR
// uc_side = 6 ;
11761: LD_ADDR_OWVAR 20
11765: PUSH
11766: LD_INT 6
11768: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11769: LD_ADDR_EXP 8
11773: PUSH
11774: LD_STRING Mikhail
11776: PPUSH
11777: CALL_OW 25
11781: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11782: LD_EXP 8
11786: PPUSH
11787: LD_INT 3
11789: PPUSH
11790: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
11794: LD_EXP 8
11798: PPUSH
11799: LD_VAR 0 2
11803: PUSH
11804: LD_INT 1
11806: ARRAY
11807: PPUSH
11808: CALL_OW 250
11812: PPUSH
11813: LD_VAR 0 2
11817: PUSH
11818: LD_INT 1
11820: ARRAY
11821: PPUSH
11822: CALL_OW 251
11826: PPUSH
11827: LD_INT 5
11829: PPUSH
11830: LD_INT 1
11832: PPUSH
11833: CALL_OW 50
// end ;
11837: LD_VAR 0 1
11841: RET
// export function PrepareRussianCommander ; begin
11842: LD_INT 0
11844: PPUSH
// uc_side = 3 ;
11845: LD_ADDR_OWVAR 20
11849: PUSH
11850: LD_INT 3
11852: ST_TO_ADDR
// uc_nation = 3 ;
11853: LD_ADDR_OWVAR 21
11857: PUSH
11858: LD_INT 3
11860: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11861: LD_ADDR_EXP 19
11865: PUSH
11866: LD_STRING Natasza
11868: PPUSH
11869: CALL_OW 25
11873: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11874: LD_EXP 19
11878: PPUSH
11879: LD_INT 24
11881: PPUSH
11882: LD_INT 0
11884: PPUSH
11885: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11889: LD_EXP 19
11893: PPUSH
11894: LD_INT 56
11896: PPUSH
11897: LD_INT 16
11899: PPUSH
11900: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11904: LD_ADDR_EXP 24
11908: PUSH
11909: LD_EXP 24
11913: PUSH
11914: LD_EXP 19
11918: ADD
11919: ST_TO_ADDR
// end ;
11920: LD_VAR 0 1
11924: RET
// export function PrepareSouthBase ; var i , un ; begin
11925: LD_INT 0
11927: PPUSH
11928: PPUSH
11929: PPUSH
// for i = 1 to 2 do
11930: LD_ADDR_VAR 0 2
11934: PUSH
11935: DOUBLE
11936: LD_INT 1
11938: DEC
11939: ST_TO_ADDR
11940: LD_INT 2
11942: PUSH
11943: FOR_TO
11944: IFFALSE 12053
// begin uc_side = 3 ;
11946: LD_ADDR_OWVAR 20
11950: PUSH
11951: LD_INT 3
11953: ST_TO_ADDR
// uc_nation = 3 ;
11954: LD_ADDR_OWVAR 21
11958: PUSH
11959: LD_INT 3
11961: ST_TO_ADDR
// hc_gallery =  ;
11962: LD_ADDR_OWVAR 33
11966: PUSH
11967: LD_STRING 
11969: ST_TO_ADDR
// hc_name =  ;
11970: LD_ADDR_OWVAR 26
11974: PUSH
11975: LD_STRING 
11977: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11978: LD_INT 1
11980: PPUSH
11981: LD_INT 1
11983: PPUSH
11984: LD_EXP 13
11988: PPUSH
11989: LD_EXP 14
11993: PPUSH
11994: CALL_OW 12
11998: PPUSH
11999: CALL_OW 380
// hc_importance = 0 ;
12003: LD_ADDR_OWVAR 32
12007: PUSH
12008: LD_INT 0
12010: ST_TO_ADDR
// un = CreateHuman ;
12011: LD_ADDR_VAR 0 3
12015: PUSH
12016: CALL_OW 44
12020: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12021: LD_VAR 0 3
12025: PPUSH
12026: LD_INT 11
12028: PPUSH
12029: LD_INT 0
12031: PPUSH
12032: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12036: LD_VAR 0 3
12040: PPUSH
12041: LD_INT 111
12043: PPUSH
12044: LD_INT 38
12046: PPUSH
12047: CALL_OW 118
// end ;
12051: GO 11943
12053: POP
12054: POP
// for i = 1 to Difficulty do
12055: LD_ADDR_VAR 0 2
12059: PUSH
12060: DOUBLE
12061: LD_INT 1
12063: DEC
12064: ST_TO_ADDR
12065: LD_OWVAR 67
12069: PUSH
12070: FOR_TO
12071: IFFALSE 12154
// begin uc_side = 3 ;
12073: LD_ADDR_OWVAR 20
12077: PUSH
12078: LD_INT 3
12080: ST_TO_ADDR
// uc_nation = 3 ;
12081: LD_ADDR_OWVAR 21
12085: PUSH
12086: LD_INT 3
12088: ST_TO_ADDR
// hc_gallery =  ;
12089: LD_ADDR_OWVAR 33
12093: PUSH
12094: LD_STRING 
12096: ST_TO_ADDR
// hc_name =  ;
12097: LD_ADDR_OWVAR 26
12101: PUSH
12102: LD_STRING 
12104: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12105: LD_INT 0
12107: PPUSH
12108: LD_INT 3
12110: PPUSH
12111: LD_EXP 13
12115: PPUSH
12116: LD_EXP 14
12120: PPUSH
12121: CALL_OW 12
12125: PPUSH
12126: CALL_OW 380
// un = CreateHuman ;
12130: LD_ADDR_VAR 0 3
12134: PUSH
12135: CALL_OW 44
12139: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12140: LD_VAR 0 3
12144: PPUSH
12145: LD_INT 10
12147: PPUSH
12148: CALL_OW 52
// end ;
12152: GO 12070
12154: POP
12155: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
12156: LD_INT 3
12158: PPUSH
12159: LD_INT 3
12161: PPUSH
12162: LD_INT 33
12164: PPUSH
12165: LD_EXP 13
12169: PPUSH
12170: LD_EXP 14
12174: PPUSH
12175: CALL_OW 12
12179: PPUSH
12180: LD_INT 1
12182: PPUSH
12183: LD_INT 1
12185: PUSH
12186: LD_INT 1
12188: PPUSH
12189: LD_INT 2
12191: PPUSH
12192: CALL_OW 12
12196: PUSH
12197: LD_INT 1
12199: PPUSH
12200: LD_INT 2
12202: PPUSH
12203: CALL_OW 12
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: LIST
12212: PUSH
12213: LD_OWVAR 67
12217: ARRAY
12218: PPUSH
12219: CALL 8612 0 6
// for i in UnitsInside ( arm2 ) do
12223: LD_ADDR_VAR 0 2
12227: PUSH
12228: LD_INT 33
12230: PPUSH
12231: CALL_OW 313
12235: PUSH
12236: FOR_IN
12237: IFFALSE 12257
// southBaseDefenders = southBaseDefenders ^ i ;
12239: LD_ADDR_EXP 25
12243: PUSH
12244: LD_EXP 25
12248: PUSH
12249: LD_VAR 0 2
12253: ADD
12254: ST_TO_ADDR
12255: GO 12236
12257: POP
12258: POP
// end ;
12259: LD_VAR 0 1
12263: RET
// export function PrepareNorthBase ; var i , un ; begin
12264: LD_INT 0
12266: PPUSH
12267: PPUSH
12268: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
12269: LD_ADDR_VAR 0 2
12273: PUSH
12274: DOUBLE
12275: LD_INT 1
12277: DEC
12278: ST_TO_ADDR
12279: LD_INT 1
12281: PPUSH
12282: LD_INT 2
12284: PPUSH
12285: CALL_OW 12
12289: PUSH
12290: LD_INT 2
12292: PPUSH
12293: LD_INT 3
12295: PPUSH
12296: CALL_OW 12
12300: PUSH
12301: LD_INT 3
12303: PPUSH
12304: LD_INT 4
12306: PPUSH
12307: CALL_OW 12
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: LIST
12316: PUSH
12317: LD_OWVAR 67
12321: ARRAY
12322: PUSH
12323: FOR_TO
12324: IFFALSE 12410
// begin uc_side = 3 ;
12326: LD_ADDR_OWVAR 20
12330: PUSH
12331: LD_INT 3
12333: ST_TO_ADDR
// uc_nation = 3 ;
12334: LD_ADDR_OWVAR 21
12338: PUSH
12339: LD_INT 3
12341: ST_TO_ADDR
// hc_gallery =  ;
12342: LD_ADDR_OWVAR 33
12346: PUSH
12347: LD_STRING 
12349: ST_TO_ADDR
// hc_name =  ;
12350: LD_ADDR_OWVAR 26
12354: PUSH
12355: LD_STRING 
12357: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12358: LD_INT 0
12360: PPUSH
12361: LD_INT 1
12363: PPUSH
12364: LD_EXP 13
12368: PPUSH
12369: LD_EXP 14
12373: PPUSH
12374: CALL_OW 12
12378: PPUSH
12379: CALL_OW 380
// un = CreateHuman ;
12383: LD_ADDR_VAR 0 3
12387: PUSH
12388: CALL_OW 44
12392: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12393: LD_VAR 0 3
12397: PPUSH
12398: LD_INT 14
12400: PPUSH
12401: LD_INT 0
12403: PPUSH
12404: CALL_OW 49
// end ;
12408: GO 12323
12410: POP
12411: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
12412: LD_INT 3
12414: PPUSH
12415: LD_INT 3
12417: PPUSH
12418: LD_INT 2
12420: PPUSH
12421: LD_EXP 13
12425: PPUSH
12426: LD_EXP 14
12430: PPUSH
12431: CALL_OW 12
12435: PPUSH
12436: LD_INT 1
12438: PPUSH
12439: LD_INT 1
12441: PPUSH
12442: LD_INT 2
12444: PPUSH
12445: CALL_OW 12
12449: PUSH
12450: LD_INT 1
12452: PPUSH
12453: LD_INT 3
12455: PPUSH
12456: CALL_OW 12
12460: PUSH
12461: LD_INT 1
12463: PPUSH
12464: LD_INT 3
12466: PPUSH
12467: CALL_OW 12
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: LIST
12476: PUSH
12477: LD_OWVAR 67
12481: ARRAY
12482: PPUSH
12483: CALL 8612 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
12487: LD_INT 3
12489: PPUSH
12490: LD_INT 3
12492: PPUSH
12493: LD_INT 23
12495: PPUSH
12496: LD_EXP 13
12500: PPUSH
12501: LD_EXP 14
12505: PPUSH
12506: CALL_OW 12
12510: PPUSH
12511: LD_INT 4
12513: PPUSH
12514: LD_INT 0
12516: PUSH
12517: LD_INT 1
12519: PUSH
12520: LD_INT 2
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: LIST
12527: PUSH
12528: LD_OWVAR 67
12532: ARRAY
12533: PPUSH
12534: CALL 8612 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12538: LD_INT 3
12540: PPUSH
12541: LD_INT 3
12543: PPUSH
12544: LD_INT 1
12546: PPUSH
12547: LD_EXP 13
12551: PPUSH
12552: LD_EXP 14
12556: PPUSH
12557: CALL_OW 12
12561: PPUSH
12562: LD_INT 2
12564: PPUSH
12565: LD_INT 1
12567: PUSH
12568: LD_INT 2
12570: PUSH
12571: LD_INT 2
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: LIST
12578: PUSH
12579: LD_OWVAR 67
12583: ARRAY
12584: PPUSH
12585: CALL 8612 0 6
// for i in UnitsInside ( arm1 ) do
12589: LD_ADDR_VAR 0 2
12593: PUSH
12594: LD_INT 2
12596: PPUSH
12597: CALL_OW 313
12601: PUSH
12602: FOR_IN
12603: IFFALSE 12623
// northBaseDefenders = northBaseDefenders ^ i ;
12605: LD_ADDR_EXP 24
12609: PUSH
12610: LD_EXP 24
12614: PUSH
12615: LD_VAR 0 2
12619: ADD
12620: ST_TO_ADDR
12621: GO 12602
12623: POP
12624: POP
// end ;
12625: LD_VAR 0 1
12629: RET
// export function PrepareOtherRussians ; var i , un ; begin
12630: LD_INT 0
12632: PPUSH
12633: PPUSH
12634: PPUSH
// for i = 1 to 2 do
12635: LD_ADDR_VAR 0 2
12639: PUSH
12640: DOUBLE
12641: LD_INT 1
12643: DEC
12644: ST_TO_ADDR
12645: LD_INT 2
12647: PUSH
12648: FOR_TO
12649: IFFALSE 12750
// begin uc_side = 3 ;
12651: LD_ADDR_OWVAR 20
12655: PUSH
12656: LD_INT 3
12658: ST_TO_ADDR
// uc_nation = 3 ;
12659: LD_ADDR_OWVAR 21
12663: PUSH
12664: LD_INT 3
12666: ST_TO_ADDR
// hc_gallery =  ;
12667: LD_ADDR_OWVAR 33
12671: PUSH
12672: LD_STRING 
12674: ST_TO_ADDR
// hc_name =  ;
12675: LD_ADDR_OWVAR 26
12679: PUSH
12680: LD_STRING 
12682: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12683: LD_INT 0
12685: PPUSH
12686: LD_INT 1
12688: PPUSH
12689: LD_EXP 13
12693: PPUSH
12694: LD_EXP 14
12698: PPUSH
12699: CALL_OW 12
12703: PPUSH
12704: CALL_OW 380
// un = CreateHuman ;
12708: LD_ADDR_VAR 0 3
12712: PUSH
12713: CALL_OW 44
12717: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12718: LD_VAR 0 3
12722: PPUSH
12723: LD_INT 9
12725: PPUSH
12726: LD_INT 0
12728: PPUSH
12729: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12733: LD_VAR 0 3
12737: PPUSH
12738: LD_INT 80
12740: PPUSH
12741: LD_INT 73
12743: PPUSH
12744: CALL_OW 118
// end ;
12748: GO 12648
12750: POP
12751: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12752: LD_ADDR_VAR 0 2
12756: PUSH
12757: LD_INT 22
12759: PUSH
12760: LD_INT 3
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: PUSH
12767: LD_INT 30
12769: PUSH
12770: LD_INT 31
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PPUSH
12781: CALL_OW 69
12785: PUSH
12786: FOR_IN
12787: IFFALSE 12815
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12789: LD_EXP 13
12793: PPUSH
12794: LD_EXP 14
12798: PPUSH
12799: CALL_OW 12
12803: PPUSH
12804: LD_VAR 0 2
12808: PPUSH
12809: CALL 8722 0 2
12813: GO 12786
12815: POP
12816: POP
// end ;
12817: LD_VAR 0 1
12821: RET
// export function PrepareCargoBays ; begin
12822: LD_INT 0
12824: PPUSH
// uc_side = 3 ;
12825: LD_ADDR_OWVAR 20
12829: PUSH
12830: LD_INT 3
12832: ST_TO_ADDR
// uc_nation = 3 ;
12833: LD_ADDR_OWVAR 21
12837: PUSH
12838: LD_INT 3
12840: ST_TO_ADDR
// vc_engine = 1 ;
12841: LD_ADDR_OWVAR 39
12845: PUSH
12846: LD_INT 1
12848: ST_TO_ADDR
// vc_control = 1 ;
12849: LD_ADDR_OWVAR 38
12853: PUSH
12854: LD_INT 1
12856: ST_TO_ADDR
// vc_weapon = 51 ;
12857: LD_ADDR_OWVAR 40
12861: PUSH
12862: LD_INT 51
12864: ST_TO_ADDR
// vc_chassis = 22 ;
12865: LD_ADDR_OWVAR 37
12869: PUSH
12870: LD_INT 22
12872: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12873: LD_ADDR_EXP 15
12877: PUSH
12878: CALL_OW 45
12882: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12883: LD_ADDR_EXP 16
12887: PUSH
12888: CALL_OW 45
12892: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12893: LD_EXP 15
12897: PPUSH
12898: LD_INT 13
12900: PPUSH
12901: LD_INT 0
12903: PPUSH
12904: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12908: LD_EXP 16
12912: PPUSH
12913: LD_INT 13
12915: PPUSH
12916: LD_INT 0
12918: PPUSH
12919: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12923: LD_EXP 15
12927: PPUSH
12928: LD_INT 2
12930: PPUSH
12931: LD_INT 70
12933: PUSH
12934: LD_INT 50
12936: PUSH
12937: LD_INT 30
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: LIST
12944: PUSH
12945: LD_OWVAR 67
12949: ARRAY
12950: PPUSH
12951: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12955: LD_EXP 16
12959: PPUSH
12960: LD_INT 2
12962: PPUSH
12963: LD_INT 70
12965: PUSH
12966: LD_INT 50
12968: PUSH
12969: LD_INT 30
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: LIST
12976: PUSH
12977: LD_OWVAR 67
12981: ARRAY
12982: PPUSH
12983: CALL_OW 291
// hc_gallery =  ;
12987: LD_ADDR_OWVAR 33
12991: PUSH
12992: LD_STRING 
12994: ST_TO_ADDR
// hc_name =  ;
12995: LD_ADDR_OWVAR 26
12999: PUSH
13000: LD_STRING 
13002: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13003: LD_INT 1
13005: PPUSH
13006: LD_INT 3
13008: PPUSH
13009: LD_INT 1
13011: PPUSH
13012: LD_INT 2
13014: PPUSH
13015: CALL_OW 12
13019: PPUSH
13020: CALL_OW 380
// driver1 = CreateHuman ;
13024: LD_ADDR_EXP 17
13028: PUSH
13029: CALL_OW 44
13033: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13034: LD_EXP 17
13038: PPUSH
13039: LD_EXP 15
13043: PPUSH
13044: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13048: LD_ADDR_OWVAR 26
13052: PUSH
13053: LD_STRING Nikolai Andreyev
13055: ST_TO_ADDR
// driver2 = CreateHuman ;
13056: LD_ADDR_EXP 18
13060: PUSH
13061: CALL_OW 44
13065: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13066: LD_EXP 18
13070: PPUSH
13071: LD_EXP 16
13075: PPUSH
13076: CALL_OW 52
// end ;
13080: LD_VAR 0 1
13084: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
13085: LD_INT 0
13087: PPUSH
13088: PPUSH
13089: PPUSH
13090: PPUSH
13091: PPUSH
13092: PPUSH
13093: PPUSH
// uc_side = 3 ;
13094: LD_ADDR_OWVAR 20
13098: PUSH
13099: LD_INT 3
13101: ST_TO_ADDR
// uc_nation = 3 ;
13102: LD_ADDR_OWVAR 21
13106: PUSH
13107: LD_INT 3
13109: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
13110: LD_ADDR_VAR 0 4
13114: PUSH
13115: DOUBLE
13116: LD_INT 1
13118: DEC
13119: ST_TO_ADDR
13120: LD_VAR 0 1
13124: PUSH
13125: LD_INT 1
13127: PPUSH
13128: LD_INT 3
13130: PPUSH
13131: CALL_OW 12
13135: PLUS
13136: PUSH
13137: FOR_TO
13138: IFFALSE 13315
// begin vc_engine = 1 ;
13140: LD_ADDR_OWVAR 39
13144: PUSH
13145: LD_INT 1
13147: ST_TO_ADDR
// vc_control = 1 ;
13148: LD_ADDR_OWVAR 38
13152: PUSH
13153: LD_INT 1
13155: ST_TO_ADDR
// vc_weapon = 42 ;
13156: LD_ADDR_OWVAR 40
13160: PUSH
13161: LD_INT 42
13163: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
13164: LD_ADDR_OWVAR 37
13168: PUSH
13169: LD_INT 21
13171: PUSH
13172: LD_INT 22
13174: PUSH
13175: LD_INT 22
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: LIST
13182: PUSH
13183: LD_OWVAR 67
13187: ARRAY
13188: ST_TO_ADDR
// veh = CreateVehicle ;
13189: LD_ADDR_VAR 0 5
13193: PUSH
13194: CALL_OW 45
13198: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13199: LD_VAR 0 5
13203: PPUSH
13204: LD_VAR 0 2
13208: PPUSH
13209: LD_INT 0
13211: PPUSH
13212: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13216: LD_ADDR_EXP 26
13220: PUSH
13221: LD_EXP 26
13225: PUSH
13226: LD_VAR 0 5
13230: ADD
13231: ST_TO_ADDR
// hc_gallery =  ;
13232: LD_ADDR_OWVAR 33
13236: PUSH
13237: LD_STRING 
13239: ST_TO_ADDR
// hc_name =  ;
13240: LD_ADDR_OWVAR 26
13244: PUSH
13245: LD_STRING 
13247: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13248: LD_INT 0
13250: PPUSH
13251: LD_INT 3
13253: PPUSH
13254: LD_EXP 13
13258: PPUSH
13259: LD_EXP 14
13263: PPUSH
13264: CALL_OW 12
13268: PPUSH
13269: CALL_OW 380
// un = CreateHuman ;
13273: LD_ADDR_VAR 0 6
13277: PUSH
13278: CALL_OW 44
13282: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13283: LD_VAR 0 6
13287: PPUSH
13288: LD_VAR 0 5
13292: PPUSH
13293: CALL_OW 52
// attackGroup = attackGroup ^ un ;
13297: LD_ADDR_EXP 26
13301: PUSH
13302: LD_EXP 26
13306: PUSH
13307: LD_VAR 0 6
13311: ADD
13312: ST_TO_ADDR
// end ;
13313: GO 13137
13315: POP
13316: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13317: LD_INT 0
13319: PPUSH
13320: LD_INT 2
13322: PPUSH
13323: LD_EXP 13
13327: PPUSH
13328: LD_EXP 14
13332: PPUSH
13333: CALL_OW 12
13337: PPUSH
13338: CALL_OW 380
// un = CreateHuman ;
13342: LD_ADDR_VAR 0 6
13346: PUSH
13347: CALL_OW 44
13351: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13352: LD_ADDR_VAR 0 4
13356: PUSH
13357: DOUBLE
13358: LD_INT 1
13360: DEC
13361: ST_TO_ADDR
13362: LD_VAR 0 1
13366: PUSH
13367: LD_INT 2
13369: PUSH
13370: LD_INT 2
13372: MUL
13373: PLUS
13374: PUSH
13375: FOR_TO
13376: IFFALSE 13464
// begin hc_gallery =  ;
13378: LD_ADDR_OWVAR 33
13382: PUSH
13383: LD_STRING 
13385: ST_TO_ADDR
// hc_name =  ;
13386: LD_ADDR_OWVAR 26
13390: PUSH
13391: LD_STRING 
13393: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13394: LD_INT 1
13396: PPUSH
13397: LD_INT 1
13399: PPUSH
13400: LD_EXP 13
13404: PPUSH
13405: LD_EXP 14
13409: PPUSH
13410: CALL_OW 12
13414: PPUSH
13415: CALL_OW 380
// un = CreateHuman ;
13419: LD_ADDR_VAR 0 6
13423: PUSH
13424: CALL_OW 44
13428: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
13429: LD_VAR 0 6
13433: PPUSH
13434: LD_VAR 0 2
13438: PPUSH
13439: LD_INT 0
13441: PPUSH
13442: CALL_OW 49
// attackGroup = attackGroup ^ un ;
13446: LD_ADDR_EXP 26
13450: PUSH
13451: LD_EXP 26
13455: PUSH
13456: LD_VAR 0 6
13460: ADD
13461: ST_TO_ADDR
// end ;
13462: GO 13375
13464: POP
13465: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13466: LD_ADDR_VAR 0 7
13470: PUSH
13471: LD_INT 26
13473: PPUSH
13474: LD_INT 22
13476: PUSH
13477: LD_INT 3
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: LD_INT 21
13486: PUSH
13487: LD_INT 1
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: LD_INT 26
13496: PUSH
13497: LD_INT 1
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: LIST
13508: PPUSH
13509: CALL_OW 70
13513: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13514: LD_VAR 0 7
13518: PUSH
13519: LD_INT 1
13521: ARRAY
13522: PPUSH
13523: LD_STRING D9-Rus3-1
13525: PPUSH
13526: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13530: LD_VAR 0 7
13534: PUSH
13535: LD_INT 2
13537: ARRAY
13538: PPUSH
13539: LD_STRING D9-Russ-1
13541: PPUSH
13542: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13546: LD_INT 35
13548: PPUSH
13549: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13553: LD_ADDR_VAR 0 4
13557: PUSH
13558: LD_INT 26
13560: PPUSH
13561: LD_INT 22
13563: PUSH
13564: LD_INT 3
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: PUSH
13571: EMPTY
13572: LIST
13573: PPUSH
13574: CALL_OW 70
13578: PUSH
13579: FOR_IN
13580: IFFALSE 13752
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13582: LD_ADDR_VAR 0 8
13586: PUSH
13587: LD_INT 22
13589: PUSH
13590: LD_INT 1
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: PPUSH
13597: CALL_OW 69
13601: PPUSH
13602: LD_VAR 0 4
13606: PPUSH
13607: CALL_OW 74
13611: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13612: LD_ADDR_VAR 0 9
13616: PUSH
13617: LD_INT 22
13619: PUSH
13620: LD_INT 1
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: PUSH
13627: LD_INT 2
13629: PUSH
13630: LD_INT 59
13632: PUSH
13633: EMPTY
13634: LIST
13635: PUSH
13636: LD_INT 21
13638: PUSH
13639: LD_INT 1
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: PUSH
13646: LD_INT 21
13648: PUSH
13649: LD_INT 2
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: PUSH
13666: EMPTY
13667: LIST
13668: PPUSH
13669: CALL_OW 69
13673: PPUSH
13674: LD_VAR 0 4
13678: PPUSH
13679: CALL_OW 74
13683: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13684: LD_VAR 0 4
13688: PPUSH
13689: LD_VAR 0 8
13693: PPUSH
13694: CALL_OW 296
13698: PUSH
13699: LD_INT 8
13701: PLUS
13702: PUSH
13703: LD_VAR 0 4
13707: PPUSH
13708: LD_VAR 0 9
13712: PPUSH
13713: CALL_OW 296
13717: LESS
13718: IFFALSE 13736
// begin ComAttackUnit ( i , target1 ) ;
13720: LD_VAR 0 4
13724: PPUSH
13725: LD_VAR 0 8
13729: PPUSH
13730: CALL_OW 115
// end else
13734: GO 13750
// begin ComAttackUnit ( i , target2 ) ;
13736: LD_VAR 0 4
13740: PPUSH
13741: LD_VAR 0 9
13745: PPUSH
13746: CALL_OW 115
// end ; end ;
13750: GO 13579
13752: POP
13753: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13754: LD_INT 26
13756: PPUSH
13757: LD_INT 22
13759: PUSH
13760: LD_INT 3
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: PUSH
13767: LD_INT 2
13769: PUSH
13770: LD_INT 21
13772: PUSH
13773: LD_INT 1
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PUSH
13780: LD_INT 21
13782: PUSH
13783: LD_INT 2
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: PUSH
13790: LD_INT 59
13792: PUSH
13793: EMPTY
13794: LIST
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: PPUSH
13806: CALL_OW 70
13810: PUSH
13811: LD_INT 0
13813: EQUAL
13814: IFFALSE 13546
// end ; end_of_file
13816: LD_VAR 0 3
13820: RET
// every 0 0$1 do
13821: GO 13823
13823: DISABLE
// begin enable ;
13824: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13825: LD_INT 3
13827: PPUSH
13828: LD_INT 1
13830: PPUSH
13831: LD_INT 22
13833: PPUSH
13834: CALL 8858 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
13838: LD_INT 3
13840: PPUSH
13841: LD_INT 20
13843: PPUSH
13844: LD_INT 22
13846: PPUSH
13847: LD_INT 23
13849: PPUSH
13850: CALL 9104 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13854: LD_INT 3
13856: PPUSH
13857: LD_INT 21
13859: PPUSH
13860: LD_INT 23
13862: PPUSH
13863: CALL 9381 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13867: LD_INT 22
13869: PPUSH
13870: LD_INT 1
13872: PPUSH
13873: LD_EXP 24
13877: PPUSH
13878: LD_INT 2
13880: PPUSH
13881: LD_INT 3
13883: PPUSH
13884: CALL 9853 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13888: LD_INT 23
13890: PPUSH
13891: LD_INT 1
13893: PPUSH
13894: LD_EXP 25
13898: PPUSH
13899: LD_INT 33
13901: PPUSH
13902: LD_INT 1
13904: PPUSH
13905: CALL 9853 0 5
// end ; end_of_file
13909: END
// on UnitDestroyed ( unit ) do begin if GetBType ( unit ) = b_depot then
13910: LD_VAR 0 1
13914: PPUSH
13915: CALL_OW 266
13919: PUSH
13920: LD_INT 0
13922: EQUAL
13923: IFFALSE 13932
// YouLost ( DepotDestroyed ) ;
13925: LD_STRING DepotDestroyed
13927: PPUSH
13928: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13932: LD_VAR 0 1
13936: PPUSH
13937: CALL_OW 255
13941: PUSH
13942: LD_INT 1
13944: EQUAL
13945: PUSH
13946: LD_VAR 0 1
13950: PPUSH
13951: CALL_OW 247
13955: PUSH
13956: LD_INT 1
13958: EQUAL
13959: AND
13960: IFFALSE 13976
// deadsCounter = deadsCounter + 1 ;
13962: LD_ADDR_EXP 31
13966: PUSH
13967: LD_EXP 31
13971: PUSH
13972: LD_INT 1
13974: PLUS
13975: ST_TO_ADDR
// end ;
13976: PPOPN 1
13978: END
// on Command ( comandid ) do var i , j , tmp ;
13979: LD_INT 0
13981: PPUSH
13982: PPUSH
13983: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
13984: LD_ADDR_VAR 0 2
13988: PUSH
13989: LD_INT 22
13991: PUSH
13992: LD_INT 1
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: PUSH
13999: LD_INT 21
14001: PUSH
14002: LD_INT 2
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: PPUSH
14013: CALL_OW 69
14017: PUSH
14018: FOR_IN
14019: IFFALSE 14144
// begin if GetTaskList ( i ) > 0 then
14021: LD_VAR 0 2
14025: PPUSH
14026: CALL_OW 437
14030: PUSH
14031: LD_INT 0
14033: GREATER
14034: IFFALSE 14142
// begin for j = 1 to GetTaskList ( i ) do
14036: LD_ADDR_VAR 0 3
14040: PUSH
14041: DOUBLE
14042: LD_INT 1
14044: DEC
14045: ST_TO_ADDR
14046: LD_VAR 0 2
14050: PPUSH
14051: CALL_OW 437
14055: PUSH
14056: FOR_TO
14057: IFFALSE 14140
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14059: LD_ADDR_VAR 0 4
14063: PUSH
14064: LD_VAR 0 2
14068: PPUSH
14069: CALL_OW 437
14073: PUSH
14074: LD_VAR 0 3
14078: ARRAY
14079: PUSH
14080: LD_INT 4
14082: ARRAY
14083: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14084: LD_VAR 0 4
14088: PPUSH
14089: CALL_OW 255
14093: PUSH
14094: LD_INT 3
14096: EQUAL
14097: PUSH
14098: LD_VAR 0 4
14102: PPUSH
14103: CALL_OW 247
14107: PUSH
14108: LD_INT 2
14110: EQUAL
14111: AND
14112: PUSH
14113: LD_VAR 0 4
14117: PPUSH
14118: CALL_OW 264
14122: PUSH
14123: LD_INT 51
14125: EQUAL
14126: AND
14127: IFFALSE 14138
// ComStop ( i ) ;
14129: LD_VAR 0 2
14133: PPUSH
14134: CALL_OW 141
// end ;
14138: GO 14056
14140: POP
14141: POP
// end ; end ;
14142: GO 14018
14144: POP
14145: POP
// end ;
14146: PPOPN 4
14148: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14149: LD_VAR 0 2
14153: PUSH
14154: LD_EXP 8
14158: EQUAL
14159: PUSH
14160: LD_EXP 21
14164: PUSH
14165: LD_INT 4
14167: NONEQUAL
14168: AND
14169: IFFALSE 14321
// begin if IsOk ( Mikhail ) then
14171: LD_EXP 8
14175: PPUSH
14176: CALL_OW 302
14180: IFFALSE 14188
// AskMikhail else
14182: CALL 7143 0 0
14186: GO 14321
// if IsOk ( llab1 ) then
14188: LD_INT 23
14190: PPUSH
14191: CALL_OW 302
14195: IFFALSE 14284
// begin InGameOn ;
14197: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14201: LD_EXP 8
14205: PPUSH
14206: LD_INT 6
14208: PPUSH
14209: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
14213: LD_INT 23
14215: PPUSH
14216: LD_INT 6
14218: PPUSH
14219: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
14223: LD_EXP 8
14227: PPUSH
14228: LD_INT 23
14230: PPUSH
14231: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14235: LD_INT 35
14237: PPUSH
14238: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
14242: LD_EXP 8
14246: PPUSH
14247: CALL_OW 310
14251: PUSH
14252: LD_INT 23
14254: EQUAL
14255: PUSH
14256: LD_EXP 8
14260: PPUSH
14261: CALL_OW 301
14265: OR
14266: IFFALSE 14235
// SetSide ( llab1 , 1 ) ;
14268: LD_INT 23
14270: PPUSH
14271: LD_INT 1
14273: PPUSH
14274: CALL_OW 235
// InGameOff ;
14278: CALL_OW 9
// end else
14282: GO 14321
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
14284: LD_INT 3
14286: PPUSH
14287: LD_INT 6
14289: PPUSH
14290: LD_INT 2
14292: PPUSH
14293: LD_INT 1
14295: PPUSH
14296: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
14300: LD_EXP 8
14304: PPUSH
14305: LD_INT 6
14307: PPUSH
14308: CALL_OW 235
// ComHold ( Mikhail ) ;
14312: LD_EXP 8
14316: PPUSH
14317: CALL_OW 140
// end ; end ; end ;
14321: PPOPN 2
14323: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
14324: LD_EXP 8
14328: PPUSH
14329: CALL_OW 257
14333: PUSH
14334: LD_INT 3
14336: NONEQUAL
14337: IFFALSE 14355
14339: GO 14341
14341: DISABLE
// begin enable ;
14342: ENABLE
// SetClass ( Mikhail , 3 ) ;
14343: LD_EXP 8
14347: PPUSH
14348: LD_INT 3
14350: PPUSH
14351: CALL_OW 336
// end ; end_of_file
14355: END
// every 0 0$1 trigger IsDead ( JMM ) do
14356: LD_EXP 1
14360: PPUSH
14361: CALL_OW 301
14365: IFFALSE 14377
14367: GO 14369
14369: DISABLE
// YouLost ( JMM ) ;
14370: LD_STRING JMM
14372: PPUSH
14373: CALL_OW 104
14377: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
14378: LD_INT 22
14380: PUSH
14381: LD_INT 1
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: PUSH
14388: LD_INT 21
14390: PUSH
14391: LD_INT 1
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PUSH
14398: LD_INT 25
14400: PUSH
14401: LD_INT 2
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: LIST
14412: PPUSH
14413: CALL_OW 69
14417: PUSH
14418: LD_INT 0
14420: EQUAL
14421: PUSH
14422: LD_INT 22
14424: PUSH
14425: LD_INT 4
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PUSH
14432: LD_INT 21
14434: PUSH
14435: LD_INT 1
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PUSH
14442: LD_INT 25
14444: PUSH
14445: LD_INT 2
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: LIST
14456: PPUSH
14457: CALL_OW 69
14461: PUSH
14462: LD_INT 0
14464: EQUAL
14465: AND
14466: PUSH
14467: LD_INT 1
14469: PPUSH
14470: CALL_OW 255
14474: PUSH
14475: LD_INT 3
14477: EQUAL
14478: AND
14479: PUSH
14480: LD_INT 10
14482: PPUSH
14483: CALL_OW 255
14487: PUSH
14488: LD_INT 3
14490: EQUAL
14491: AND
14492: IFFALSE 14504
14494: GO 14496
14496: DISABLE
// YouLost ( Engineer ) ;
14497: LD_STRING Engineer
14499: PPUSH
14500: CALL_OW 104
14504: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14505: LD_INT 1
14507: PPUSH
14508: CALL_OW 255
14512: PUSH
14513: LD_INT 3
14515: EQUAL
14516: PUSH
14517: LD_EXP 27
14521: PUSH
14522: LD_INT 1
14524: EQUAL
14525: AND
14526: IFFALSE 14538
14528: GO 14530
14530: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14531: LD_STRING DepotCaptured
14533: PPUSH
14534: CALL_OW 104
14538: END
// export function PrepareTigers ; var i , un ; begin
14539: LD_INT 0
14541: PPUSH
14542: PPUSH
14543: PPUSH
// for i = 1 to Difficulty do
14544: LD_ADDR_VAR 0 2
14548: PUSH
14549: DOUBLE
14550: LD_INT 1
14552: DEC
14553: ST_TO_ADDR
14554: LD_OWVAR 67
14558: PUSH
14559: FOR_TO
14560: IFFALSE 14695
// begin hc_sex = sex_male ;
14562: LD_ADDR_OWVAR 27
14566: PUSH
14567: LD_INT 1
14569: ST_TO_ADDR
// uc_side = 0 ;
14570: LD_ADDR_OWVAR 20
14574: PUSH
14575: LD_INT 0
14577: ST_TO_ADDR
// uc_nation = nation_nature ;
14578: LD_ADDR_OWVAR 21
14582: PUSH
14583: LD_INT 0
14585: ST_TO_ADDR
// hc_class = class_tiger ;
14586: LD_ADDR_OWVAR 28
14590: PUSH
14591: LD_INT 14
14593: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14594: LD_ADDR_OWVAR 31
14598: PUSH
14599: LD_EXP 14
14603: PUSH
14604: LD_INT 0
14606: PUSH
14607: LD_INT 0
14609: PUSH
14610: LD_INT 0
14612: PUSH
14613: EMPTY
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
14619: LD_ADDR_OWVAR 35
14623: PUSH
14624: LD_INT 30
14626: PPUSH
14627: LD_INT 40
14629: PPUSH
14630: CALL_OW 12
14634: PUSH
14635: LD_INT 40
14637: PPUSH
14638: LD_INT 50
14640: PPUSH
14641: CALL_OW 12
14645: PUSH
14646: LD_INT 50
14648: PPUSH
14649: LD_INT 60
14651: PPUSH
14652: CALL_OW 12
14656: PUSH
14657: EMPTY
14658: LIST
14659: LIST
14660: LIST
14661: PUSH
14662: LD_OWVAR 67
14666: ARRAY
14667: ST_TO_ADDR
// un = CreateHuman ;
14668: LD_ADDR_VAR 0 3
14672: PUSH
14673: CALL_OW 44
14677: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14678: LD_VAR 0 3
14682: PPUSH
14683: LD_INT 27
14685: PPUSH
14686: LD_INT 0
14688: PPUSH
14689: CALL_OW 49
// end ;
14693: GO 14559
14695: POP
14696: POP
// end ; end_of_file
14697: LD_VAR 0 1
14701: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
14702: LD_INT 1
14704: PPUSH
14705: CALL_OW 255
14709: PUSH
14710: LD_INT 1
14712: EQUAL
14713: PUSH
14714: LD_INT 10
14716: PPUSH
14717: CALL_OW 255
14721: PUSH
14722: LD_INT 1
14724: EQUAL
14725: AND
14726: PUSH
14727: LD_EXP 20
14731: PUSH
14732: LD_INT 1
14734: EQUAL
14735: AND
14736: PUSH
14737: LD_INT 22
14739: PUSH
14740: LD_INT 3
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: PUSH
14747: LD_INT 21
14749: PUSH
14750: LD_INT 2
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: PUSH
14757: LD_INT 34
14759: PUSH
14760: LD_INT 51
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: PUSH
14767: LD_INT 3
14769: PUSH
14770: LD_INT 58
14772: PUSH
14773: EMPTY
14774: LIST
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: PPUSH
14786: CALL_OW 69
14790: PUSH
14791: LD_INT 0
14793: EQUAL
14794: AND
14795: IFFALSE 14886
14797: GO 14799
14799: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
14800: LD_INT 9450
14802: PUSH
14803: LD_INT 8400
14805: PUSH
14806: LD_INT 6300
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: LIST
14813: PUSH
14814: LD_OWVAR 67
14818: ARRAY
14819: PPUSH
14820: CALL_OW 67
// if cargoEscape = 1 then
14824: LD_EXP 20
14828: PUSH
14829: LD_INT 1
14831: EQUAL
14832: IFFALSE 14886
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14834: LD_EXP 9
14838: PPUSH
14839: LD_STRING D6-Pow-1
14841: PPUSH
14842: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14846: LD_EXP 1
14850: PPUSH
14851: LD_STRING D6-JMM-1
14853: PPUSH
14854: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14858: LD_EXP 9
14862: PPUSH
14863: LD_STRING D6-Pow-2
14865: PPUSH
14866: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14870: LD_EXP 1
14874: PPUSH
14875: LD_STRING D6-JMM-2
14877: PPUSH
14878: CALL_OW 88
// FinishMission ;
14882: CALL 15094 0 0
// end ; end ;
14886: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
14887: LD_INT 1
14889: PPUSH
14890: CALL_OW 255
14894: PUSH
14895: LD_INT 1
14897: EQUAL
14898: PUSH
14899: LD_INT 10
14901: PPUSH
14902: CALL_OW 255
14906: PUSH
14907: LD_INT 1
14909: EQUAL
14910: AND
14911: PUSH
14912: LD_EXP 20
14916: PUSH
14917: LD_INT 1
14919: GREATER
14920: AND
14921: IFFALSE 14988
14923: GO 14925
14925: DISABLE
14926: LD_INT 0
14928: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
14929: LD_INT 11550
14931: PUSH
14932: LD_INT 10500
14934: PUSH
14935: LD_INT 9450
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: LIST
14942: PUSH
14943: LD_OWVAR 67
14947: ARRAY
14948: PPUSH
14949: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
14953: LD_INT 1
14955: PUSH
14956: LD_INT 2
14958: PUSH
14959: LD_INT 3
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: LIST
14966: PUSH
14967: LD_OWVAR 67
14971: ARRAY
14972: PPUSH
14973: LD_INT 13
14975: PPUSH
14976: CALL 13085 0 2
// lastBattle = 1 ;
14980: LD_ADDR_EXP 27
14984: PUSH
14985: LD_INT 1
14987: ST_TO_ADDR
// end ;
14988: PPOPN 1
14990: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14991: LD_EXP 27
14995: PUSH
14996: LD_INT 1
14998: EQUAL
14999: PUSH
15000: LD_INT 26
15002: PPUSH
15003: LD_INT 22
15005: PUSH
15006: LD_INT 3
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PUSH
15013: LD_INT 21
15015: PUSH
15016: LD_INT 1
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: PPUSH
15027: CALL_OW 70
15031: PUSH
15032: LD_INT 0
15034: EQUAL
15035: AND
15036: IFFALSE 15093
15038: GO 15040
15040: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
15041: LD_EXP 9
15045: PPUSH
15046: LD_STRING D6-Pow-1
15048: PPUSH
15049: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
15053: LD_EXP 1
15057: PPUSH
15058: LD_STRING D6-JMM-1
15060: PPUSH
15061: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
15065: LD_EXP 9
15069: PPUSH
15070: LD_STRING D6-Pow-2
15072: PPUSH
15073: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
15077: LD_EXP 1
15081: PPUSH
15082: LD_STRING D6-JMM-2
15084: PPUSH
15085: CALL_OW 88
// FinishMission ;
15089: CALL 15094 0 0
// end ;
15093: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
15094: LD_INT 0
15096: PPUSH
15097: PPUSH
15098: PPUSH
15099: PPUSH
15100: PPUSH
// if tick <= 18 18$00 then
15101: LD_OWVAR 1
15105: PUSH
15106: LD_INT 37800
15108: LESSEQUAL
15109: IFFALSE 15118
// SetAchievement ( ACH_ASPEED_2 ) ;
15111: LD_STRING ACH_ASPEED_2
15113: PPUSH
15114: CALL_OW 543
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15118: LD_ADDR_VAR 0 2
15122: PUSH
15123: LD_INT 22
15125: PUSH
15126: LD_INT 1
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: PUSH
15133: LD_INT 21
15135: PUSH
15136: LD_INT 2
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: PUSH
15143: LD_INT 24
15145: PUSH
15146: LD_INT 251
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: LIST
15157: PPUSH
15158: CALL_OW 69
15162: ST_TO_ADDR
// if tmp then
15163: LD_VAR 0 2
15167: IFFALSE 15181
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15169: LD_VAR 0 2
15173: PPUSH
15174: LD_STRING 02_tanks_1
15176: PPUSH
15177: CALL 10558 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
15181: LD_EXP 21
15185: PUSH
15186: LD_INT 1
15188: EQUAL
15189: PUSH
15190: LD_EXP 8
15194: PPUSH
15195: CALL_OW 300
15199: AND
15200: IFFALSE 15214
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15202: LD_EXP 21
15206: PPUSH
15207: LD_STRING 02_mikhailStatus_1
15209: PPUSH
15210: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15214: LD_INT 1
15216: PPUSH
15217: CALL_OW 274
15221: PPUSH
15222: LD_INT 1
15224: PPUSH
15225: CALL_OW 275
15229: PPUSH
15230: LD_STRING 02_resources_4
15232: PPUSH
15233: CALL_OW 39
// m1 := false ;
15237: LD_ADDR_VAR 0 3
15241: PUSH
15242: LD_INT 0
15244: ST_TO_ADDR
// m2 := false ;
15245: LD_ADDR_VAR 0 4
15249: PUSH
15250: LD_INT 0
15252: ST_TO_ADDR
// m3 := false ;
15253: LD_ADDR_VAR 0 5
15257: PUSH
15258: LD_INT 0
15260: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15261: LD_INT 1
15263: PPUSH
15264: CALL_OW 274
15268: PPUSH
15269: LD_INT 1
15271: PPUSH
15272: CALL_OW 275
15276: PUSH
15277: LD_INT 200
15279: GREATEREQUAL
15280: IFFALSE 15302
// begin AddMedal ( Cans , 1 ) ;
15282: LD_STRING Cans
15284: PPUSH
15285: LD_INT 1
15287: PPUSH
15288: CALL_OW 101
// m1 := true ;
15292: LD_ADDR_VAR 0 3
15296: PUSH
15297: LD_INT 1
15299: ST_TO_ADDR
// end else
15300: GO 15313
// begin AddMedal ( Cans , - 1 ) ;
15302: LD_STRING Cans
15304: PPUSH
15305: LD_INT 1
15307: NEG
15308: PPUSH
15309: CALL_OW 101
// end ; if deadsCounter < 2 then
15313: LD_EXP 31
15317: PUSH
15318: LD_INT 2
15320: LESS
15321: IFFALSE 15343
// begin AddMedal ( Deaths , 1 ) ;
15323: LD_STRING Deaths
15325: PPUSH
15326: LD_INT 1
15328: PPUSH
15329: CALL_OW 101
// m2 := true ;
15333: LD_ADDR_VAR 0 4
15337: PUSH
15338: LD_INT 1
15340: ST_TO_ADDR
// end else
15341: GO 15354
// begin AddMedal ( Deaths , - 1 ) ;
15343: LD_STRING Deaths
15345: PPUSH
15346: LD_INT 1
15348: NEG
15349: PPUSH
15350: CALL_OW 101
// end ; if mikhailStatus = 0 then
15354: LD_EXP 21
15358: PUSH
15359: LD_INT 0
15361: EQUAL
15362: IFFALSE 15375
// AddMedal ( Prisoner , - 1 ) ;
15364: LD_STRING Prisoner
15366: PPUSH
15367: LD_INT 1
15369: NEG
15370: PPUSH
15371: CALL_OW 101
// if mikhailStatus = 1 then
15375: LD_EXP 21
15379: PUSH
15380: LD_INT 1
15382: EQUAL
15383: IFFALSE 15403
// begin AddMedal ( Prisoner , 1 ) ;
15385: LD_STRING Prisoner
15387: PPUSH
15388: LD_INT 1
15390: PPUSH
15391: CALL_OW 101
// m3 := true ;
15395: LD_ADDR_VAR 0 5
15399: PUSH
15400: LD_INT 1
15402: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
15403: LD_EXP 21
15407: PUSH
15408: LD_INT 2
15410: EQUAL
15411: IFFALSE 15431
// begin AddMedal ( Prisoner , 2 ) ;
15413: LD_STRING Prisoner
15415: PPUSH
15416: LD_INT 2
15418: PPUSH
15419: CALL_OW 101
// m3 := true ;
15423: LD_ADDR_VAR 0 5
15427: PUSH
15428: LD_INT 1
15430: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
15431: LD_EXP 21
15435: PUSH
15436: LD_INT 3
15438: EQUAL
15439: IFFALSE 15452
// AddMedal ( Prisoner , - 2 ) ;
15441: LD_STRING Prisoner
15443: PPUSH
15444: LD_INT 2
15446: NEG
15447: PPUSH
15448: CALL_OW 101
// if Difficulty = 3 and m1 and m2 and m3 then
15452: LD_OWVAR 67
15456: PUSH
15457: LD_INT 3
15459: EQUAL
15460: PUSH
15461: LD_VAR 0 3
15465: AND
15466: PUSH
15467: LD_VAR 0 4
15471: AND
15472: PUSH
15473: LD_VAR 0 5
15477: AND
15478: IFFALSE 15490
// SetAchievementEX ( ACH_AMER , 2 ) ;
15480: LD_STRING ACH_AMER
15482: PPUSH
15483: LD_INT 2
15485: PPUSH
15486: CALL_OW 564
// GiveMedals ( MAIN ) ;
15490: LD_STRING MAIN
15492: PPUSH
15493: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
15497: LD_INT 22
15499: PUSH
15500: LD_INT 1
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: PUSH
15507: LD_INT 23
15509: PUSH
15510: LD_INT 1
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: PUSH
15517: LD_INT 21
15519: PUSH
15520: LD_INT 1
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: PPUSH
15532: CALL_OW 69
15536: PPUSH
15537: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15541: LD_EXP 1
15545: PPUSH
15546: LD_EXP 33
15550: PUSH
15551: LD_STRING JMM
15553: STR
15554: PPUSH
15555: CALL_OW 38
// if IsOK ( Bobby ) then
15559: LD_EXP 2
15563: PPUSH
15564: CALL_OW 302
15568: IFFALSE 15588
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15570: LD_EXP 2
15574: PPUSH
15575: LD_EXP 33
15579: PUSH
15580: LD_STRING Bobby
15582: STR
15583: PPUSH
15584: CALL_OW 38
// if IsOK ( Cyrus ) then
15588: LD_EXP 3
15592: PPUSH
15593: CALL_OW 302
15597: IFFALSE 15617
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15599: LD_EXP 3
15603: PPUSH
15604: LD_EXP 33
15608: PUSH
15609: LD_STRING Cyrus
15611: STR
15612: PPUSH
15613: CALL_OW 38
// if IsOK ( Lisa ) then
15617: LD_EXP 4
15621: PPUSH
15622: CALL_OW 302
15626: IFFALSE 15646
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15628: LD_EXP 4
15632: PPUSH
15633: LD_EXP 33
15637: PUSH
15638: LD_STRING Lisa
15640: STR
15641: PPUSH
15642: CALL_OW 38
// if IsOK ( Khatam ) then
15646: LD_EXP 5
15650: PPUSH
15651: CALL_OW 302
15655: IFFALSE 15675
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
15657: LD_EXP 5
15661: PPUSH
15662: LD_EXP 33
15666: PUSH
15667: LD_STRING Khatam
15669: STR
15670: PPUSH
15671: CALL_OW 38
// if IsOK ( Brian ) then
15675: LD_EXP 6
15679: PPUSH
15680: CALL_OW 302
15684: IFFALSE 15704
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
15686: LD_EXP 6
15690: PPUSH
15691: LD_EXP 33
15695: PUSH
15696: LD_STRING Brian
15698: STR
15699: PPUSH
15700: CALL_OW 38
// if IsOk ( Jerry ) then
15704: LD_EXP 7
15708: PPUSH
15709: CALL_OW 302
15713: IFFALSE 15733
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
15715: LD_EXP 7
15719: PPUSH
15720: LD_EXP 33
15724: PUSH
15725: LD_STRING Jerry
15727: STR
15728: PPUSH
15729: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
15733: LD_EXP 21
15737: PUSH
15738: LD_INT 1
15740: EQUAL
15741: PUSH
15742: LD_EXP 8
15746: PPUSH
15747: CALL_OW 255
15751: PUSH
15752: LD_INT 1
15754: EQUAL
15755: AND
15756: PUSH
15757: LD_EXP 8
15761: PPUSH
15762: CALL_OW 302
15766: AND
15767: IFFALSE 15787
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
15769: LD_EXP 8
15773: PPUSH
15774: LD_EXP 33
15778: PUSH
15779: LD_STRING Mikhail
15781: STR
15782: PPUSH
15783: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
15787: LD_INT 50
15789: PUSH
15790: EMPTY
15791: LIST
15792: PUSH
15793: LD_INT 22
15795: PUSH
15796: LD_INT 1
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: PUSH
15803: LD_INT 21
15805: PUSH
15806: LD_INT 1
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: LIST
15817: PPUSH
15818: CALL_OW 69
15822: PUSH
15823: LD_EXP 1
15827: PUSH
15828: LD_EXP 2
15832: PUSH
15833: LD_EXP 3
15837: PUSH
15838: LD_EXP 4
15842: PUSH
15843: LD_EXP 5
15847: PUSH
15848: LD_EXP 6
15852: PUSH
15853: LD_EXP 7
15857: PUSH
15858: LD_EXP 8
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: DIFF
15873: PPUSH
15874: LD_STRING 02_other_survivors
15876: PPUSH
15877: CALL_OW 38
// YouWin ;
15881: CALL_OW 103
// end ; end_of_file
15885: LD_VAR 0 1
15889: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
15890: LD_INT 0
15892: PPUSH
// ar_miner := 81 ;
15893: LD_ADDR_EXP 42
15897: PUSH
15898: LD_INT 81
15900: ST_TO_ADDR
// ar_crane := 88 ;
15901: LD_ADDR_EXP 41
15905: PUSH
15906: LD_INT 88
15908: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
15909: LD_ADDR_EXP 36
15913: PUSH
15914: LD_INT 89
15916: ST_TO_ADDR
// us_hack := 99 ;
15917: LD_ADDR_EXP 37
15921: PUSH
15922: LD_INT 99
15924: ST_TO_ADDR
// us_artillery := 97 ;
15925: LD_ADDR_EXP 38
15929: PUSH
15930: LD_INT 97
15932: ST_TO_ADDR
// ar_bio_bomb := 91 ;
15933: LD_ADDR_EXP 39
15937: PUSH
15938: LD_INT 91
15940: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
15941: LD_ADDR_EXP 40
15945: PUSH
15946: LD_INT 92
15948: ST_TO_ADDR
// ru_radar := 98 ;
15949: LD_ADDR_EXP 35
15953: PUSH
15954: LD_INT 98
15956: ST_TO_ADDR
// tech_Artillery := 80 ;
15957: LD_ADDR_EXP 43
15961: PUSH
15962: LD_INT 80
15964: ST_TO_ADDR
// tech_RadMat := 81 ;
15965: LD_ADDR_EXP 44
15969: PUSH
15970: LD_INT 81
15972: ST_TO_ADDR
// tech_BasicTools := 82 ;
15973: LD_ADDR_EXP 45
15977: PUSH
15978: LD_INT 82
15980: ST_TO_ADDR
// tech_Cargo := 83 ;
15981: LD_ADDR_EXP 46
15985: PUSH
15986: LD_INT 83
15988: ST_TO_ADDR
// tech_Track := 84 ;
15989: LD_ADDR_EXP 47
15993: PUSH
15994: LD_INT 84
15996: ST_TO_ADDR
// tech_Crane := 85 ;
15997: LD_ADDR_EXP 48
16001: PUSH
16002: LD_INT 85
16004: ST_TO_ADDR
// tech_Bulldozer := 86 ;
16005: LD_ADDR_EXP 49
16009: PUSH
16010: LD_INT 86
16012: ST_TO_ADDR
// tech_Hovercraft := 87 ;
16013: LD_ADDR_EXP 50
16017: PUSH
16018: LD_INT 87
16020: ST_TO_ADDR
// end ;
16021: LD_VAR 0 1
16025: RET
// every 1 do
16026: GO 16028
16028: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
16029: CALL 15890 0 0
16033: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
16034: LD_VAR 0 2
16038: PUSH
16039: LD_INT 100
16041: EQUAL
16042: IFFALSE 16991
// begin if not StreamModeActive then
16044: LD_EXP 51
16048: NOT
16049: IFFALSE 16059
// StreamModeActive := true ;
16051: LD_ADDR_EXP 51
16055: PUSH
16056: LD_INT 1
16058: ST_TO_ADDR
// if p3 = 0 then
16059: LD_VAR 0 3
16063: PUSH
16064: LD_INT 0
16066: EQUAL
16067: IFFALSE 16073
// InitStreamMode ;
16069: CALL 17149 0 0
// if p3 = 1 then
16073: LD_VAR 0 3
16077: PUSH
16078: LD_INT 1
16080: EQUAL
16081: IFFALSE 16091
// sRocket := true ;
16083: LD_ADDR_EXP 56
16087: PUSH
16088: LD_INT 1
16090: ST_TO_ADDR
// if p3 = 2 then
16091: LD_VAR 0 3
16095: PUSH
16096: LD_INT 2
16098: EQUAL
16099: IFFALSE 16109
// sSpeed := true ;
16101: LD_ADDR_EXP 55
16105: PUSH
16106: LD_INT 1
16108: ST_TO_ADDR
// if p3 = 3 then
16109: LD_VAR 0 3
16113: PUSH
16114: LD_INT 3
16116: EQUAL
16117: IFFALSE 16127
// sEngine := true ;
16119: LD_ADDR_EXP 57
16123: PUSH
16124: LD_INT 1
16126: ST_TO_ADDR
// if p3 = 4 then
16127: LD_VAR 0 3
16131: PUSH
16132: LD_INT 4
16134: EQUAL
16135: IFFALSE 16145
// sSpec := true ;
16137: LD_ADDR_EXP 54
16141: PUSH
16142: LD_INT 1
16144: ST_TO_ADDR
// if p3 = 5 then
16145: LD_VAR 0 3
16149: PUSH
16150: LD_INT 5
16152: EQUAL
16153: IFFALSE 16163
// sLevel := true ;
16155: LD_ADDR_EXP 58
16159: PUSH
16160: LD_INT 1
16162: ST_TO_ADDR
// if p3 = 6 then
16163: LD_VAR 0 3
16167: PUSH
16168: LD_INT 6
16170: EQUAL
16171: IFFALSE 16181
// sArmoury := true ;
16173: LD_ADDR_EXP 59
16177: PUSH
16178: LD_INT 1
16180: ST_TO_ADDR
// if p3 = 7 then
16181: LD_VAR 0 3
16185: PUSH
16186: LD_INT 7
16188: EQUAL
16189: IFFALSE 16199
// sRadar := true ;
16191: LD_ADDR_EXP 60
16195: PUSH
16196: LD_INT 1
16198: ST_TO_ADDR
// if p3 = 8 then
16199: LD_VAR 0 3
16203: PUSH
16204: LD_INT 8
16206: EQUAL
16207: IFFALSE 16217
// sBunker := true ;
16209: LD_ADDR_EXP 61
16213: PUSH
16214: LD_INT 1
16216: ST_TO_ADDR
// if p3 = 9 then
16217: LD_VAR 0 3
16221: PUSH
16222: LD_INT 9
16224: EQUAL
16225: IFFALSE 16235
// sHack := true ;
16227: LD_ADDR_EXP 62
16231: PUSH
16232: LD_INT 1
16234: ST_TO_ADDR
// if p3 = 10 then
16235: LD_VAR 0 3
16239: PUSH
16240: LD_INT 10
16242: EQUAL
16243: IFFALSE 16253
// sFire := true ;
16245: LD_ADDR_EXP 63
16249: PUSH
16250: LD_INT 1
16252: ST_TO_ADDR
// if p3 = 11 then
16253: LD_VAR 0 3
16257: PUSH
16258: LD_INT 11
16260: EQUAL
16261: IFFALSE 16271
// sRefresh := true ;
16263: LD_ADDR_EXP 64
16267: PUSH
16268: LD_INT 1
16270: ST_TO_ADDR
// if p3 = 12 then
16271: LD_VAR 0 3
16275: PUSH
16276: LD_INT 12
16278: EQUAL
16279: IFFALSE 16289
// sExp := true ;
16281: LD_ADDR_EXP 65
16285: PUSH
16286: LD_INT 1
16288: ST_TO_ADDR
// if p3 = 13 then
16289: LD_VAR 0 3
16293: PUSH
16294: LD_INT 13
16296: EQUAL
16297: IFFALSE 16307
// sDepot := true ;
16299: LD_ADDR_EXP 66
16303: PUSH
16304: LD_INT 1
16306: ST_TO_ADDR
// if p3 = 14 then
16307: LD_VAR 0 3
16311: PUSH
16312: LD_INT 14
16314: EQUAL
16315: IFFALSE 16325
// sFlag := true ;
16317: LD_ADDR_EXP 67
16321: PUSH
16322: LD_INT 1
16324: ST_TO_ADDR
// if p3 = 15 then
16325: LD_VAR 0 3
16329: PUSH
16330: LD_INT 15
16332: EQUAL
16333: IFFALSE 16343
// sKamikadze := true ;
16335: LD_ADDR_EXP 75
16339: PUSH
16340: LD_INT 1
16342: ST_TO_ADDR
// if p3 = 16 then
16343: LD_VAR 0 3
16347: PUSH
16348: LD_INT 16
16350: EQUAL
16351: IFFALSE 16361
// sTroll := true ;
16353: LD_ADDR_EXP 76
16357: PUSH
16358: LD_INT 1
16360: ST_TO_ADDR
// if p3 = 17 then
16361: LD_VAR 0 3
16365: PUSH
16366: LD_INT 17
16368: EQUAL
16369: IFFALSE 16379
// sSlow := true ;
16371: LD_ADDR_EXP 77
16375: PUSH
16376: LD_INT 1
16378: ST_TO_ADDR
// if p3 = 18 then
16379: LD_VAR 0 3
16383: PUSH
16384: LD_INT 18
16386: EQUAL
16387: IFFALSE 16397
// sLack := true ;
16389: LD_ADDR_EXP 78
16393: PUSH
16394: LD_INT 1
16396: ST_TO_ADDR
// if p3 = 19 then
16397: LD_VAR 0 3
16401: PUSH
16402: LD_INT 19
16404: EQUAL
16405: IFFALSE 16415
// sTank := true ;
16407: LD_ADDR_EXP 80
16411: PUSH
16412: LD_INT 1
16414: ST_TO_ADDR
// if p3 = 20 then
16415: LD_VAR 0 3
16419: PUSH
16420: LD_INT 20
16422: EQUAL
16423: IFFALSE 16433
// sRemote := true ;
16425: LD_ADDR_EXP 81
16429: PUSH
16430: LD_INT 1
16432: ST_TO_ADDR
// if p3 = 21 then
16433: LD_VAR 0 3
16437: PUSH
16438: LD_INT 21
16440: EQUAL
16441: IFFALSE 16451
// sPowell := true ;
16443: LD_ADDR_EXP 82
16447: PUSH
16448: LD_INT 1
16450: ST_TO_ADDR
// if p3 = 22 then
16451: LD_VAR 0 3
16455: PUSH
16456: LD_INT 22
16458: EQUAL
16459: IFFALSE 16469
// sTeleport := true ;
16461: LD_ADDR_EXP 85
16465: PUSH
16466: LD_INT 1
16468: ST_TO_ADDR
// if p3 = 23 then
16469: LD_VAR 0 3
16473: PUSH
16474: LD_INT 23
16476: EQUAL
16477: IFFALSE 16487
// sOilTower := true ;
16479: LD_ADDR_EXP 87
16483: PUSH
16484: LD_INT 1
16486: ST_TO_ADDR
// if p3 = 24 then
16487: LD_VAR 0 3
16491: PUSH
16492: LD_INT 24
16494: EQUAL
16495: IFFALSE 16505
// sShovel := true ;
16497: LD_ADDR_EXP 88
16501: PUSH
16502: LD_INT 1
16504: ST_TO_ADDR
// if p3 = 25 then
16505: LD_VAR 0 3
16509: PUSH
16510: LD_INT 25
16512: EQUAL
16513: IFFALSE 16523
// sSheik := true ;
16515: LD_ADDR_EXP 89
16519: PUSH
16520: LD_INT 1
16522: ST_TO_ADDR
// if p3 = 26 then
16523: LD_VAR 0 3
16527: PUSH
16528: LD_INT 26
16530: EQUAL
16531: IFFALSE 16541
// sEarthquake := true ;
16533: LD_ADDR_EXP 91
16537: PUSH
16538: LD_INT 1
16540: ST_TO_ADDR
// if p3 = 27 then
16541: LD_VAR 0 3
16545: PUSH
16546: LD_INT 27
16548: EQUAL
16549: IFFALSE 16559
// sAI := true ;
16551: LD_ADDR_EXP 92
16555: PUSH
16556: LD_INT 1
16558: ST_TO_ADDR
// if p3 = 28 then
16559: LD_VAR 0 3
16563: PUSH
16564: LD_INT 28
16566: EQUAL
16567: IFFALSE 16577
// sCargo := true ;
16569: LD_ADDR_EXP 95
16573: PUSH
16574: LD_INT 1
16576: ST_TO_ADDR
// if p3 = 29 then
16577: LD_VAR 0 3
16581: PUSH
16582: LD_INT 29
16584: EQUAL
16585: IFFALSE 16595
// sDLaser := true ;
16587: LD_ADDR_EXP 96
16591: PUSH
16592: LD_INT 1
16594: ST_TO_ADDR
// if p3 = 30 then
16595: LD_VAR 0 3
16599: PUSH
16600: LD_INT 30
16602: EQUAL
16603: IFFALSE 16613
// sExchange := true ;
16605: LD_ADDR_EXP 97
16609: PUSH
16610: LD_INT 1
16612: ST_TO_ADDR
// if p3 = 31 then
16613: LD_VAR 0 3
16617: PUSH
16618: LD_INT 31
16620: EQUAL
16621: IFFALSE 16631
// sFac := true ;
16623: LD_ADDR_EXP 98
16627: PUSH
16628: LD_INT 1
16630: ST_TO_ADDR
// if p3 = 32 then
16631: LD_VAR 0 3
16635: PUSH
16636: LD_INT 32
16638: EQUAL
16639: IFFALSE 16649
// sPower := true ;
16641: LD_ADDR_EXP 99
16645: PUSH
16646: LD_INT 1
16648: ST_TO_ADDR
// if p3 = 33 then
16649: LD_VAR 0 3
16653: PUSH
16654: LD_INT 33
16656: EQUAL
16657: IFFALSE 16667
// sRandom := true ;
16659: LD_ADDR_EXP 100
16663: PUSH
16664: LD_INT 1
16666: ST_TO_ADDR
// if p3 = 34 then
16667: LD_VAR 0 3
16671: PUSH
16672: LD_INT 34
16674: EQUAL
16675: IFFALSE 16685
// sShield := true ;
16677: LD_ADDR_EXP 101
16681: PUSH
16682: LD_INT 1
16684: ST_TO_ADDR
// if p3 = 35 then
16685: LD_VAR 0 3
16689: PUSH
16690: LD_INT 35
16692: EQUAL
16693: IFFALSE 16703
// sTime := true ;
16695: LD_ADDR_EXP 102
16699: PUSH
16700: LD_INT 1
16702: ST_TO_ADDR
// if p3 = 36 then
16703: LD_VAR 0 3
16707: PUSH
16708: LD_INT 36
16710: EQUAL
16711: IFFALSE 16721
// sTools := true ;
16713: LD_ADDR_EXP 103
16717: PUSH
16718: LD_INT 1
16720: ST_TO_ADDR
// if p3 = 101 then
16721: LD_VAR 0 3
16725: PUSH
16726: LD_INT 101
16728: EQUAL
16729: IFFALSE 16739
// sSold := true ;
16731: LD_ADDR_EXP 68
16735: PUSH
16736: LD_INT 1
16738: ST_TO_ADDR
// if p3 = 102 then
16739: LD_VAR 0 3
16743: PUSH
16744: LD_INT 102
16746: EQUAL
16747: IFFALSE 16757
// sDiff := true ;
16749: LD_ADDR_EXP 69
16753: PUSH
16754: LD_INT 1
16756: ST_TO_ADDR
// if p3 = 103 then
16757: LD_VAR 0 3
16761: PUSH
16762: LD_INT 103
16764: EQUAL
16765: IFFALSE 16775
// sFog := true ;
16767: LD_ADDR_EXP 72
16771: PUSH
16772: LD_INT 1
16774: ST_TO_ADDR
// if p3 = 104 then
16775: LD_VAR 0 3
16779: PUSH
16780: LD_INT 104
16782: EQUAL
16783: IFFALSE 16793
// sReset := true ;
16785: LD_ADDR_EXP 73
16789: PUSH
16790: LD_INT 1
16792: ST_TO_ADDR
// if p3 = 105 then
16793: LD_VAR 0 3
16797: PUSH
16798: LD_INT 105
16800: EQUAL
16801: IFFALSE 16811
// sSun := true ;
16803: LD_ADDR_EXP 74
16807: PUSH
16808: LD_INT 1
16810: ST_TO_ADDR
// if p3 = 106 then
16811: LD_VAR 0 3
16815: PUSH
16816: LD_INT 106
16818: EQUAL
16819: IFFALSE 16829
// sTiger := true ;
16821: LD_ADDR_EXP 70
16825: PUSH
16826: LD_INT 1
16828: ST_TO_ADDR
// if p3 = 107 then
16829: LD_VAR 0 3
16833: PUSH
16834: LD_INT 107
16836: EQUAL
16837: IFFALSE 16847
// sBomb := true ;
16839: LD_ADDR_EXP 71
16843: PUSH
16844: LD_INT 1
16846: ST_TO_ADDR
// if p3 = 108 then
16847: LD_VAR 0 3
16851: PUSH
16852: LD_INT 108
16854: EQUAL
16855: IFFALSE 16865
// sWound := true ;
16857: LD_ADDR_EXP 79
16861: PUSH
16862: LD_INT 1
16864: ST_TO_ADDR
// if p3 = 109 then
16865: LD_VAR 0 3
16869: PUSH
16870: LD_INT 109
16872: EQUAL
16873: IFFALSE 16883
// sBetray := true ;
16875: LD_ADDR_EXP 83
16879: PUSH
16880: LD_INT 1
16882: ST_TO_ADDR
// if p3 = 110 then
16883: LD_VAR 0 3
16887: PUSH
16888: LD_INT 110
16890: EQUAL
16891: IFFALSE 16901
// sContamin := true ;
16893: LD_ADDR_EXP 84
16897: PUSH
16898: LD_INT 1
16900: ST_TO_ADDR
// if p3 = 111 then
16901: LD_VAR 0 3
16905: PUSH
16906: LD_INT 111
16908: EQUAL
16909: IFFALSE 16919
// sOil := true ;
16911: LD_ADDR_EXP 86
16915: PUSH
16916: LD_INT 1
16918: ST_TO_ADDR
// if p3 = 112 then
16919: LD_VAR 0 3
16923: PUSH
16924: LD_INT 112
16926: EQUAL
16927: IFFALSE 16937
// sStu := true ;
16929: LD_ADDR_EXP 90
16933: PUSH
16934: LD_INT 1
16936: ST_TO_ADDR
// if p3 = 113 then
16937: LD_VAR 0 3
16941: PUSH
16942: LD_INT 113
16944: EQUAL
16945: IFFALSE 16955
// sBazooka := true ;
16947: LD_ADDR_EXP 93
16951: PUSH
16952: LD_INT 1
16954: ST_TO_ADDR
// if p3 = 114 then
16955: LD_VAR 0 3
16959: PUSH
16960: LD_INT 114
16962: EQUAL
16963: IFFALSE 16973
// sMortar := true ;
16965: LD_ADDR_EXP 94
16969: PUSH
16970: LD_INT 1
16972: ST_TO_ADDR
// if p3 = 115 then
16973: LD_VAR 0 3
16977: PUSH
16978: LD_INT 115
16980: EQUAL
16981: IFFALSE 16991
// sRanger := true ;
16983: LD_ADDR_EXP 104
16987: PUSH
16988: LD_INT 1
16990: ST_TO_ADDR
// end ; if p2 = 101 then
16991: LD_VAR 0 2
16995: PUSH
16996: LD_INT 101
16998: EQUAL
16999: IFFALSE 17127
// begin case p3 of 1 :
17001: LD_VAR 0 3
17005: PUSH
17006: LD_INT 1
17008: DOUBLE
17009: EQUAL
17010: IFTRUE 17014
17012: GO 17021
17014: POP
// hHackUnlimitedResources ; 2 :
17015: CALL 28162 0 0
17019: GO 17127
17021: LD_INT 2
17023: DOUBLE
17024: EQUAL
17025: IFTRUE 17029
17027: GO 17036
17029: POP
// hHackSetLevel10 ; 3 :
17030: CALL 28295 0 0
17034: GO 17127
17036: LD_INT 3
17038: DOUBLE
17039: EQUAL
17040: IFTRUE 17044
17042: GO 17051
17044: POP
// hHackSetLevel10YourUnits ; 4 :
17045: CALL 28380 0 0
17049: GO 17127
17051: LD_INT 4
17053: DOUBLE
17054: EQUAL
17055: IFTRUE 17059
17057: GO 17066
17059: POP
// hHackInvincible ; 5 :
17060: CALL 28828 0 0
17064: GO 17127
17066: LD_INT 5
17068: DOUBLE
17069: EQUAL
17070: IFTRUE 17074
17072: GO 17081
17074: POP
// hHackInvisible ; 6 :
17075: CALL 28939 0 0
17079: GO 17127
17081: LD_INT 6
17083: DOUBLE
17084: EQUAL
17085: IFTRUE 17089
17087: GO 17096
17089: POP
// hHackChangeYourSide ; 7 :
17090: CALL 28996 0 0
17094: GO 17127
17096: LD_INT 7
17098: DOUBLE
17099: EQUAL
17100: IFTRUE 17104
17102: GO 17111
17104: POP
// hHackChangeUnitSide ; 8 :
17105: CALL 29038 0 0
17109: GO 17127
17111: LD_INT 8
17113: DOUBLE
17114: EQUAL
17115: IFTRUE 17119
17117: GO 17126
17119: POP
// hHackFog ; end ;
17120: CALL 29139 0 0
17124: GO 17127
17126: POP
// end ; end ;
17127: PPOPN 6
17129: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
17130: GO 17132
17132: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
17133: LD_STRING initStreamRollete();
17135: PPUSH
17136: CALL_OW 559
// InitStreamMode ;
17140: CALL 17149 0 0
// DefineStreamItems ( ) ;
17144: CALL 17589 0 0
// end ;
17148: END
// function InitStreamMode ; begin
17149: LD_INT 0
17151: PPUSH
// streamModeActive := false ;
17152: LD_ADDR_EXP 51
17156: PUSH
17157: LD_INT 0
17159: ST_TO_ADDR
// normalCounter := 36 ;
17160: LD_ADDR_EXP 52
17164: PUSH
17165: LD_INT 36
17167: ST_TO_ADDR
// hardcoreCounter := 16 ;
17168: LD_ADDR_EXP 53
17172: PUSH
17173: LD_INT 16
17175: ST_TO_ADDR
// sRocket := false ;
17176: LD_ADDR_EXP 56
17180: PUSH
17181: LD_INT 0
17183: ST_TO_ADDR
// sSpeed := false ;
17184: LD_ADDR_EXP 55
17188: PUSH
17189: LD_INT 0
17191: ST_TO_ADDR
// sEngine := false ;
17192: LD_ADDR_EXP 57
17196: PUSH
17197: LD_INT 0
17199: ST_TO_ADDR
// sSpec := false ;
17200: LD_ADDR_EXP 54
17204: PUSH
17205: LD_INT 0
17207: ST_TO_ADDR
// sLevel := false ;
17208: LD_ADDR_EXP 58
17212: PUSH
17213: LD_INT 0
17215: ST_TO_ADDR
// sArmoury := false ;
17216: LD_ADDR_EXP 59
17220: PUSH
17221: LD_INT 0
17223: ST_TO_ADDR
// sRadar := false ;
17224: LD_ADDR_EXP 60
17228: PUSH
17229: LD_INT 0
17231: ST_TO_ADDR
// sBunker := false ;
17232: LD_ADDR_EXP 61
17236: PUSH
17237: LD_INT 0
17239: ST_TO_ADDR
// sHack := false ;
17240: LD_ADDR_EXP 62
17244: PUSH
17245: LD_INT 0
17247: ST_TO_ADDR
// sFire := false ;
17248: LD_ADDR_EXP 63
17252: PUSH
17253: LD_INT 0
17255: ST_TO_ADDR
// sRefresh := false ;
17256: LD_ADDR_EXP 64
17260: PUSH
17261: LD_INT 0
17263: ST_TO_ADDR
// sExp := false ;
17264: LD_ADDR_EXP 65
17268: PUSH
17269: LD_INT 0
17271: ST_TO_ADDR
// sDepot := false ;
17272: LD_ADDR_EXP 66
17276: PUSH
17277: LD_INT 0
17279: ST_TO_ADDR
// sFlag := false ;
17280: LD_ADDR_EXP 67
17284: PUSH
17285: LD_INT 0
17287: ST_TO_ADDR
// sKamikadze := false ;
17288: LD_ADDR_EXP 75
17292: PUSH
17293: LD_INT 0
17295: ST_TO_ADDR
// sTroll := false ;
17296: LD_ADDR_EXP 76
17300: PUSH
17301: LD_INT 0
17303: ST_TO_ADDR
// sSlow := false ;
17304: LD_ADDR_EXP 77
17308: PUSH
17309: LD_INT 0
17311: ST_TO_ADDR
// sLack := false ;
17312: LD_ADDR_EXP 78
17316: PUSH
17317: LD_INT 0
17319: ST_TO_ADDR
// sTank := false ;
17320: LD_ADDR_EXP 80
17324: PUSH
17325: LD_INT 0
17327: ST_TO_ADDR
// sRemote := false ;
17328: LD_ADDR_EXP 81
17332: PUSH
17333: LD_INT 0
17335: ST_TO_ADDR
// sPowell := false ;
17336: LD_ADDR_EXP 82
17340: PUSH
17341: LD_INT 0
17343: ST_TO_ADDR
// sTeleport := false ;
17344: LD_ADDR_EXP 85
17348: PUSH
17349: LD_INT 0
17351: ST_TO_ADDR
// sOilTower := false ;
17352: LD_ADDR_EXP 87
17356: PUSH
17357: LD_INT 0
17359: ST_TO_ADDR
// sShovel := false ;
17360: LD_ADDR_EXP 88
17364: PUSH
17365: LD_INT 0
17367: ST_TO_ADDR
// sSheik := false ;
17368: LD_ADDR_EXP 89
17372: PUSH
17373: LD_INT 0
17375: ST_TO_ADDR
// sEarthquake := false ;
17376: LD_ADDR_EXP 91
17380: PUSH
17381: LD_INT 0
17383: ST_TO_ADDR
// sAI := false ;
17384: LD_ADDR_EXP 92
17388: PUSH
17389: LD_INT 0
17391: ST_TO_ADDR
// sCargo := false ;
17392: LD_ADDR_EXP 95
17396: PUSH
17397: LD_INT 0
17399: ST_TO_ADDR
// sDLaser := false ;
17400: LD_ADDR_EXP 96
17404: PUSH
17405: LD_INT 0
17407: ST_TO_ADDR
// sExchange := false ;
17408: LD_ADDR_EXP 97
17412: PUSH
17413: LD_INT 0
17415: ST_TO_ADDR
// sFac := false ;
17416: LD_ADDR_EXP 98
17420: PUSH
17421: LD_INT 0
17423: ST_TO_ADDR
// sPower := false ;
17424: LD_ADDR_EXP 99
17428: PUSH
17429: LD_INT 0
17431: ST_TO_ADDR
// sRandom := false ;
17432: LD_ADDR_EXP 100
17436: PUSH
17437: LD_INT 0
17439: ST_TO_ADDR
// sShield := false ;
17440: LD_ADDR_EXP 101
17444: PUSH
17445: LD_INT 0
17447: ST_TO_ADDR
// sTime := false ;
17448: LD_ADDR_EXP 102
17452: PUSH
17453: LD_INT 0
17455: ST_TO_ADDR
// sTools := false ;
17456: LD_ADDR_EXP 103
17460: PUSH
17461: LD_INT 0
17463: ST_TO_ADDR
// sSold := false ;
17464: LD_ADDR_EXP 68
17468: PUSH
17469: LD_INT 0
17471: ST_TO_ADDR
// sDiff := false ;
17472: LD_ADDR_EXP 69
17476: PUSH
17477: LD_INT 0
17479: ST_TO_ADDR
// sFog := false ;
17480: LD_ADDR_EXP 72
17484: PUSH
17485: LD_INT 0
17487: ST_TO_ADDR
// sReset := false ;
17488: LD_ADDR_EXP 73
17492: PUSH
17493: LD_INT 0
17495: ST_TO_ADDR
// sSun := false ;
17496: LD_ADDR_EXP 74
17500: PUSH
17501: LD_INT 0
17503: ST_TO_ADDR
// sTiger := false ;
17504: LD_ADDR_EXP 70
17508: PUSH
17509: LD_INT 0
17511: ST_TO_ADDR
// sBomb := false ;
17512: LD_ADDR_EXP 71
17516: PUSH
17517: LD_INT 0
17519: ST_TO_ADDR
// sWound := false ;
17520: LD_ADDR_EXP 79
17524: PUSH
17525: LD_INT 0
17527: ST_TO_ADDR
// sBetray := false ;
17528: LD_ADDR_EXP 83
17532: PUSH
17533: LD_INT 0
17535: ST_TO_ADDR
// sContamin := false ;
17536: LD_ADDR_EXP 84
17540: PUSH
17541: LD_INT 0
17543: ST_TO_ADDR
// sOil := false ;
17544: LD_ADDR_EXP 86
17548: PUSH
17549: LD_INT 0
17551: ST_TO_ADDR
// sStu := false ;
17552: LD_ADDR_EXP 90
17556: PUSH
17557: LD_INT 0
17559: ST_TO_ADDR
// sBazooka := false ;
17560: LD_ADDR_EXP 93
17564: PUSH
17565: LD_INT 0
17567: ST_TO_ADDR
// sMortar := false ;
17568: LD_ADDR_EXP 94
17572: PUSH
17573: LD_INT 0
17575: ST_TO_ADDR
// sRanger := false ;
17576: LD_ADDR_EXP 104
17580: PUSH
17581: LD_INT 0
17583: ST_TO_ADDR
// end ;
17584: LD_VAR 0 1
17588: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
17589: LD_INT 0
17591: PPUSH
17592: PPUSH
17593: PPUSH
17594: PPUSH
17595: PPUSH
// result := [ ] ;
17596: LD_ADDR_VAR 0 1
17600: PUSH
17601: EMPTY
17602: ST_TO_ADDR
// if campaign_id = 1 then
17603: LD_OWVAR 69
17607: PUSH
17608: LD_INT 1
17610: EQUAL
17611: IFFALSE 20549
// begin case mission_number of 1 :
17613: LD_OWVAR 70
17617: PUSH
17618: LD_INT 1
17620: DOUBLE
17621: EQUAL
17622: IFTRUE 17626
17624: GO 17690
17626: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
17627: LD_ADDR_VAR 0 1
17631: PUSH
17632: LD_INT 2
17634: PUSH
17635: LD_INT 4
17637: PUSH
17638: LD_INT 11
17640: PUSH
17641: LD_INT 12
17643: PUSH
17644: LD_INT 15
17646: PUSH
17647: LD_INT 16
17649: PUSH
17650: LD_INT 22
17652: PUSH
17653: LD_INT 23
17655: PUSH
17656: LD_INT 26
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: PUSH
17670: LD_INT 101
17672: PUSH
17673: LD_INT 102
17675: PUSH
17676: LD_INT 106
17678: PUSH
17679: EMPTY
17680: LIST
17681: LIST
17682: LIST
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: ST_TO_ADDR
17688: GO 20547
17690: LD_INT 2
17692: DOUBLE
17693: EQUAL
17694: IFTRUE 17698
17696: GO 17770
17698: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
17699: LD_ADDR_VAR 0 1
17703: PUSH
17704: LD_INT 2
17706: PUSH
17707: LD_INT 4
17709: PUSH
17710: LD_INT 11
17712: PUSH
17713: LD_INT 12
17715: PUSH
17716: LD_INT 15
17718: PUSH
17719: LD_INT 16
17721: PUSH
17722: LD_INT 22
17724: PUSH
17725: LD_INT 23
17727: PUSH
17728: LD_INT 26
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 101
17744: PUSH
17745: LD_INT 102
17747: PUSH
17748: LD_INT 105
17750: PUSH
17751: LD_INT 106
17753: PUSH
17754: LD_INT 108
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: ST_TO_ADDR
17768: GO 20547
17770: LD_INT 3
17772: DOUBLE
17773: EQUAL
17774: IFTRUE 17778
17776: GO 17854
17778: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
17779: LD_ADDR_VAR 0 1
17783: PUSH
17784: LD_INT 2
17786: PUSH
17787: LD_INT 4
17789: PUSH
17790: LD_INT 5
17792: PUSH
17793: LD_INT 11
17795: PUSH
17796: LD_INT 12
17798: PUSH
17799: LD_INT 15
17801: PUSH
17802: LD_INT 16
17804: PUSH
17805: LD_INT 22
17807: PUSH
17808: LD_INT 26
17810: PUSH
17811: LD_INT 36
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: PUSH
17826: LD_INT 101
17828: PUSH
17829: LD_INT 102
17831: PUSH
17832: LD_INT 105
17834: PUSH
17835: LD_INT 106
17837: PUSH
17838: LD_INT 108
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: ST_TO_ADDR
17852: GO 20547
17854: LD_INT 4
17856: DOUBLE
17857: EQUAL
17858: IFTRUE 17862
17860: GO 17946
17862: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
17863: LD_ADDR_VAR 0 1
17867: PUSH
17868: LD_INT 2
17870: PUSH
17871: LD_INT 4
17873: PUSH
17874: LD_INT 5
17876: PUSH
17877: LD_INT 8
17879: PUSH
17880: LD_INT 11
17882: PUSH
17883: LD_INT 12
17885: PUSH
17886: LD_INT 15
17888: PUSH
17889: LD_INT 16
17891: PUSH
17892: LD_INT 22
17894: PUSH
17895: LD_INT 23
17897: PUSH
17898: LD_INT 26
17900: PUSH
17901: LD_INT 36
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 101
17920: PUSH
17921: LD_INT 102
17923: PUSH
17924: LD_INT 105
17926: PUSH
17927: LD_INT 106
17929: PUSH
17930: LD_INT 108
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: ST_TO_ADDR
17944: GO 20547
17946: LD_INT 5
17948: DOUBLE
17949: EQUAL
17950: IFTRUE 17954
17952: GO 18054
17954: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
17955: LD_ADDR_VAR 0 1
17959: PUSH
17960: LD_INT 2
17962: PUSH
17963: LD_INT 4
17965: PUSH
17966: LD_INT 5
17968: PUSH
17969: LD_INT 6
17971: PUSH
17972: LD_INT 8
17974: PUSH
17975: LD_INT 11
17977: PUSH
17978: LD_INT 12
17980: PUSH
17981: LD_INT 15
17983: PUSH
17984: LD_INT 16
17986: PUSH
17987: LD_INT 22
17989: PUSH
17990: LD_INT 23
17992: PUSH
17993: LD_INT 25
17995: PUSH
17996: LD_INT 26
17998: PUSH
17999: LD_INT 36
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: PUSH
18018: LD_INT 101
18020: PUSH
18021: LD_INT 102
18023: PUSH
18024: LD_INT 105
18026: PUSH
18027: LD_INT 106
18029: PUSH
18030: LD_INT 108
18032: PUSH
18033: LD_INT 109
18035: PUSH
18036: LD_INT 112
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: ST_TO_ADDR
18052: GO 20547
18054: LD_INT 6
18056: DOUBLE
18057: EQUAL
18058: IFTRUE 18062
18060: GO 18182
18062: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
18063: LD_ADDR_VAR 0 1
18067: PUSH
18068: LD_INT 2
18070: PUSH
18071: LD_INT 4
18073: PUSH
18074: LD_INT 5
18076: PUSH
18077: LD_INT 6
18079: PUSH
18080: LD_INT 8
18082: PUSH
18083: LD_INT 11
18085: PUSH
18086: LD_INT 12
18088: PUSH
18089: LD_INT 15
18091: PUSH
18092: LD_INT 16
18094: PUSH
18095: LD_INT 20
18097: PUSH
18098: LD_INT 21
18100: PUSH
18101: LD_INT 22
18103: PUSH
18104: LD_INT 23
18106: PUSH
18107: LD_INT 25
18109: PUSH
18110: LD_INT 26
18112: PUSH
18113: LD_INT 30
18115: PUSH
18116: LD_INT 31
18118: PUSH
18119: LD_INT 32
18121: PUSH
18122: LD_INT 36
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: PUSH
18146: LD_INT 101
18148: PUSH
18149: LD_INT 102
18151: PUSH
18152: LD_INT 105
18154: PUSH
18155: LD_INT 106
18157: PUSH
18158: LD_INT 108
18160: PUSH
18161: LD_INT 109
18163: PUSH
18164: LD_INT 112
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: ST_TO_ADDR
18180: GO 20547
18182: LD_INT 7
18184: DOUBLE
18185: EQUAL
18186: IFTRUE 18190
18188: GO 18290
18190: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
18191: LD_ADDR_VAR 0 1
18195: PUSH
18196: LD_INT 2
18198: PUSH
18199: LD_INT 4
18201: PUSH
18202: LD_INT 5
18204: PUSH
18205: LD_INT 7
18207: PUSH
18208: LD_INT 11
18210: PUSH
18211: LD_INT 12
18213: PUSH
18214: LD_INT 15
18216: PUSH
18217: LD_INT 16
18219: PUSH
18220: LD_INT 20
18222: PUSH
18223: LD_INT 21
18225: PUSH
18226: LD_INT 22
18228: PUSH
18229: LD_INT 23
18231: PUSH
18232: LD_INT 25
18234: PUSH
18235: LD_INT 26
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: PUSH
18254: LD_INT 101
18256: PUSH
18257: LD_INT 102
18259: PUSH
18260: LD_INT 103
18262: PUSH
18263: LD_INT 105
18265: PUSH
18266: LD_INT 106
18268: PUSH
18269: LD_INT 108
18271: PUSH
18272: LD_INT 112
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: ST_TO_ADDR
18288: GO 20547
18290: LD_INT 8
18292: DOUBLE
18293: EQUAL
18294: IFTRUE 18298
18296: GO 18426
18298: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
18299: LD_ADDR_VAR 0 1
18303: PUSH
18304: LD_INT 2
18306: PUSH
18307: LD_INT 4
18309: PUSH
18310: LD_INT 5
18312: PUSH
18313: LD_INT 6
18315: PUSH
18316: LD_INT 7
18318: PUSH
18319: LD_INT 8
18321: PUSH
18322: LD_INT 11
18324: PUSH
18325: LD_INT 12
18327: PUSH
18328: LD_INT 15
18330: PUSH
18331: LD_INT 16
18333: PUSH
18334: LD_INT 20
18336: PUSH
18337: LD_INT 21
18339: PUSH
18340: LD_INT 22
18342: PUSH
18343: LD_INT 23
18345: PUSH
18346: LD_INT 25
18348: PUSH
18349: LD_INT 26
18351: PUSH
18352: LD_INT 30
18354: PUSH
18355: LD_INT 31
18357: PUSH
18358: LD_INT 32
18360: PUSH
18361: LD_INT 36
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: PUSH
18386: LD_INT 101
18388: PUSH
18389: LD_INT 102
18391: PUSH
18392: LD_INT 103
18394: PUSH
18395: LD_INT 105
18397: PUSH
18398: LD_INT 106
18400: PUSH
18401: LD_INT 108
18403: PUSH
18404: LD_INT 109
18406: PUSH
18407: LD_INT 112
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: ST_TO_ADDR
18424: GO 20547
18426: LD_INT 9
18428: DOUBLE
18429: EQUAL
18430: IFTRUE 18434
18432: GO 18570
18434: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
18435: LD_ADDR_VAR 0 1
18439: PUSH
18440: LD_INT 2
18442: PUSH
18443: LD_INT 4
18445: PUSH
18446: LD_INT 5
18448: PUSH
18449: LD_INT 6
18451: PUSH
18452: LD_INT 7
18454: PUSH
18455: LD_INT 8
18457: PUSH
18458: LD_INT 11
18460: PUSH
18461: LD_INT 12
18463: PUSH
18464: LD_INT 15
18466: PUSH
18467: LD_INT 16
18469: PUSH
18470: LD_INT 20
18472: PUSH
18473: LD_INT 21
18475: PUSH
18476: LD_INT 22
18478: PUSH
18479: LD_INT 23
18481: PUSH
18482: LD_INT 25
18484: PUSH
18485: LD_INT 26
18487: PUSH
18488: LD_INT 28
18490: PUSH
18491: LD_INT 30
18493: PUSH
18494: LD_INT 31
18496: PUSH
18497: LD_INT 32
18499: PUSH
18500: LD_INT 36
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: PUSH
18526: LD_INT 101
18528: PUSH
18529: LD_INT 102
18531: PUSH
18532: LD_INT 103
18534: PUSH
18535: LD_INT 105
18537: PUSH
18538: LD_INT 106
18540: PUSH
18541: LD_INT 108
18543: PUSH
18544: LD_INT 109
18546: PUSH
18547: LD_INT 112
18549: PUSH
18550: LD_INT 114
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: ST_TO_ADDR
18568: GO 20547
18570: LD_INT 10
18572: DOUBLE
18573: EQUAL
18574: IFTRUE 18578
18576: GO 18762
18578: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
18579: LD_ADDR_VAR 0 1
18583: PUSH
18584: LD_INT 2
18586: PUSH
18587: LD_INT 4
18589: PUSH
18590: LD_INT 5
18592: PUSH
18593: LD_INT 6
18595: PUSH
18596: LD_INT 7
18598: PUSH
18599: LD_INT 8
18601: PUSH
18602: LD_INT 9
18604: PUSH
18605: LD_INT 10
18607: PUSH
18608: LD_INT 11
18610: PUSH
18611: LD_INT 12
18613: PUSH
18614: LD_INT 13
18616: PUSH
18617: LD_INT 14
18619: PUSH
18620: LD_INT 15
18622: PUSH
18623: LD_INT 16
18625: PUSH
18626: LD_INT 17
18628: PUSH
18629: LD_INT 18
18631: PUSH
18632: LD_INT 19
18634: PUSH
18635: LD_INT 20
18637: PUSH
18638: LD_INT 21
18640: PUSH
18641: LD_INT 22
18643: PUSH
18644: LD_INT 23
18646: PUSH
18647: LD_INT 24
18649: PUSH
18650: LD_INT 25
18652: PUSH
18653: LD_INT 26
18655: PUSH
18656: LD_INT 28
18658: PUSH
18659: LD_INT 30
18661: PUSH
18662: LD_INT 31
18664: PUSH
18665: LD_INT 32
18667: PUSH
18668: LD_INT 36
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 101
18704: PUSH
18705: LD_INT 102
18707: PUSH
18708: LD_INT 103
18710: PUSH
18711: LD_INT 104
18713: PUSH
18714: LD_INT 105
18716: PUSH
18717: LD_INT 106
18719: PUSH
18720: LD_INT 107
18722: PUSH
18723: LD_INT 108
18725: PUSH
18726: LD_INT 109
18728: PUSH
18729: LD_INT 110
18731: PUSH
18732: LD_INT 111
18734: PUSH
18735: LD_INT 112
18737: PUSH
18738: LD_INT 114
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: ST_TO_ADDR
18760: GO 20547
18762: LD_INT 11
18764: DOUBLE
18765: EQUAL
18766: IFTRUE 18770
18768: GO 18962
18770: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
18771: LD_ADDR_VAR 0 1
18775: PUSH
18776: LD_INT 2
18778: PUSH
18779: LD_INT 3
18781: PUSH
18782: LD_INT 4
18784: PUSH
18785: LD_INT 5
18787: PUSH
18788: LD_INT 6
18790: PUSH
18791: LD_INT 7
18793: PUSH
18794: LD_INT 8
18796: PUSH
18797: LD_INT 9
18799: PUSH
18800: LD_INT 10
18802: PUSH
18803: LD_INT 11
18805: PUSH
18806: LD_INT 12
18808: PUSH
18809: LD_INT 13
18811: PUSH
18812: LD_INT 14
18814: PUSH
18815: LD_INT 15
18817: PUSH
18818: LD_INT 16
18820: PUSH
18821: LD_INT 17
18823: PUSH
18824: LD_INT 18
18826: PUSH
18827: LD_INT 19
18829: PUSH
18830: LD_INT 20
18832: PUSH
18833: LD_INT 21
18835: PUSH
18836: LD_INT 22
18838: PUSH
18839: LD_INT 23
18841: PUSH
18842: LD_INT 24
18844: PUSH
18845: LD_INT 25
18847: PUSH
18848: LD_INT 26
18850: PUSH
18851: LD_INT 28
18853: PUSH
18854: LD_INT 30
18856: PUSH
18857: LD_INT 31
18859: PUSH
18860: LD_INT 32
18862: PUSH
18863: LD_INT 34
18865: PUSH
18866: LD_INT 36
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: PUSH
18902: LD_INT 101
18904: PUSH
18905: LD_INT 102
18907: PUSH
18908: LD_INT 103
18910: PUSH
18911: LD_INT 104
18913: PUSH
18914: LD_INT 105
18916: PUSH
18917: LD_INT 106
18919: PUSH
18920: LD_INT 107
18922: PUSH
18923: LD_INT 108
18925: PUSH
18926: LD_INT 109
18928: PUSH
18929: LD_INT 110
18931: PUSH
18932: LD_INT 111
18934: PUSH
18935: LD_INT 112
18937: PUSH
18938: LD_INT 114
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: ST_TO_ADDR
18960: GO 20547
18962: LD_INT 12
18964: DOUBLE
18965: EQUAL
18966: IFTRUE 18970
18968: GO 19178
18970: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
18971: LD_ADDR_VAR 0 1
18975: PUSH
18976: LD_INT 1
18978: PUSH
18979: LD_INT 2
18981: PUSH
18982: LD_INT 3
18984: PUSH
18985: LD_INT 4
18987: PUSH
18988: LD_INT 5
18990: PUSH
18991: LD_INT 6
18993: PUSH
18994: LD_INT 7
18996: PUSH
18997: LD_INT 8
18999: PUSH
19000: LD_INT 9
19002: PUSH
19003: LD_INT 10
19005: PUSH
19006: LD_INT 11
19008: PUSH
19009: LD_INT 12
19011: PUSH
19012: LD_INT 13
19014: PUSH
19015: LD_INT 14
19017: PUSH
19018: LD_INT 15
19020: PUSH
19021: LD_INT 16
19023: PUSH
19024: LD_INT 17
19026: PUSH
19027: LD_INT 18
19029: PUSH
19030: LD_INT 19
19032: PUSH
19033: LD_INT 20
19035: PUSH
19036: LD_INT 21
19038: PUSH
19039: LD_INT 22
19041: PUSH
19042: LD_INT 23
19044: PUSH
19045: LD_INT 24
19047: PUSH
19048: LD_INT 25
19050: PUSH
19051: LD_INT 26
19053: PUSH
19054: LD_INT 27
19056: PUSH
19057: LD_INT 28
19059: PUSH
19060: LD_INT 30
19062: PUSH
19063: LD_INT 31
19065: PUSH
19066: LD_INT 32
19068: PUSH
19069: LD_INT 33
19071: PUSH
19072: LD_INT 34
19074: PUSH
19075: LD_INT 36
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 101
19116: PUSH
19117: LD_INT 102
19119: PUSH
19120: LD_INT 103
19122: PUSH
19123: LD_INT 104
19125: PUSH
19126: LD_INT 105
19128: PUSH
19129: LD_INT 106
19131: PUSH
19132: LD_INT 107
19134: PUSH
19135: LD_INT 108
19137: PUSH
19138: LD_INT 109
19140: PUSH
19141: LD_INT 110
19143: PUSH
19144: LD_INT 111
19146: PUSH
19147: LD_INT 112
19149: PUSH
19150: LD_INT 113
19152: PUSH
19153: LD_INT 114
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: ST_TO_ADDR
19176: GO 20547
19178: LD_INT 13
19180: DOUBLE
19181: EQUAL
19182: IFTRUE 19186
19184: GO 19382
19186: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
19187: LD_ADDR_VAR 0 1
19191: PUSH
19192: LD_INT 1
19194: PUSH
19195: LD_INT 2
19197: PUSH
19198: LD_INT 3
19200: PUSH
19201: LD_INT 4
19203: PUSH
19204: LD_INT 5
19206: PUSH
19207: LD_INT 8
19209: PUSH
19210: LD_INT 9
19212: PUSH
19213: LD_INT 10
19215: PUSH
19216: LD_INT 11
19218: PUSH
19219: LD_INT 12
19221: PUSH
19222: LD_INT 14
19224: PUSH
19225: LD_INT 15
19227: PUSH
19228: LD_INT 16
19230: PUSH
19231: LD_INT 17
19233: PUSH
19234: LD_INT 18
19236: PUSH
19237: LD_INT 19
19239: PUSH
19240: LD_INT 20
19242: PUSH
19243: LD_INT 21
19245: PUSH
19246: LD_INT 22
19248: PUSH
19249: LD_INT 23
19251: PUSH
19252: LD_INT 24
19254: PUSH
19255: LD_INT 25
19257: PUSH
19258: LD_INT 26
19260: PUSH
19261: LD_INT 27
19263: PUSH
19264: LD_INT 28
19266: PUSH
19267: LD_INT 30
19269: PUSH
19270: LD_INT 31
19272: PUSH
19273: LD_INT 32
19275: PUSH
19276: LD_INT 33
19278: PUSH
19279: LD_INT 34
19281: PUSH
19282: LD_INT 36
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 101
19320: PUSH
19321: LD_INT 102
19323: PUSH
19324: LD_INT 103
19326: PUSH
19327: LD_INT 104
19329: PUSH
19330: LD_INT 105
19332: PUSH
19333: LD_INT 106
19335: PUSH
19336: LD_INT 107
19338: PUSH
19339: LD_INT 108
19341: PUSH
19342: LD_INT 109
19344: PUSH
19345: LD_INT 110
19347: PUSH
19348: LD_INT 111
19350: PUSH
19351: LD_INT 112
19353: PUSH
19354: LD_INT 113
19356: PUSH
19357: LD_INT 114
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: ST_TO_ADDR
19380: GO 20547
19382: LD_INT 14
19384: DOUBLE
19385: EQUAL
19386: IFTRUE 19390
19388: GO 19602
19390: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
19391: LD_ADDR_VAR 0 1
19395: PUSH
19396: LD_INT 1
19398: PUSH
19399: LD_INT 2
19401: PUSH
19402: LD_INT 3
19404: PUSH
19405: LD_INT 4
19407: PUSH
19408: LD_INT 5
19410: PUSH
19411: LD_INT 6
19413: PUSH
19414: LD_INT 7
19416: PUSH
19417: LD_INT 8
19419: PUSH
19420: LD_INT 9
19422: PUSH
19423: LD_INT 10
19425: PUSH
19426: LD_INT 11
19428: PUSH
19429: LD_INT 12
19431: PUSH
19432: LD_INT 13
19434: PUSH
19435: LD_INT 14
19437: PUSH
19438: LD_INT 15
19440: PUSH
19441: LD_INT 16
19443: PUSH
19444: LD_INT 17
19446: PUSH
19447: LD_INT 18
19449: PUSH
19450: LD_INT 19
19452: PUSH
19453: LD_INT 20
19455: PUSH
19456: LD_INT 21
19458: PUSH
19459: LD_INT 22
19461: PUSH
19462: LD_INT 23
19464: PUSH
19465: LD_INT 24
19467: PUSH
19468: LD_INT 25
19470: PUSH
19471: LD_INT 26
19473: PUSH
19474: LD_INT 27
19476: PUSH
19477: LD_INT 28
19479: PUSH
19480: LD_INT 29
19482: PUSH
19483: LD_INT 30
19485: PUSH
19486: LD_INT 31
19488: PUSH
19489: LD_INT 32
19491: PUSH
19492: LD_INT 33
19494: PUSH
19495: LD_INT 34
19497: PUSH
19498: LD_INT 36
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: PUSH
19538: LD_INT 101
19540: PUSH
19541: LD_INT 102
19543: PUSH
19544: LD_INT 103
19546: PUSH
19547: LD_INT 104
19549: PUSH
19550: LD_INT 105
19552: PUSH
19553: LD_INT 106
19555: PUSH
19556: LD_INT 107
19558: PUSH
19559: LD_INT 108
19561: PUSH
19562: LD_INT 109
19564: PUSH
19565: LD_INT 110
19567: PUSH
19568: LD_INT 111
19570: PUSH
19571: LD_INT 112
19573: PUSH
19574: LD_INT 113
19576: PUSH
19577: LD_INT 114
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: ST_TO_ADDR
19600: GO 20547
19602: LD_INT 15
19604: DOUBLE
19605: EQUAL
19606: IFTRUE 19610
19608: GO 19822
19610: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
19611: LD_ADDR_VAR 0 1
19615: PUSH
19616: LD_INT 1
19618: PUSH
19619: LD_INT 2
19621: PUSH
19622: LD_INT 3
19624: PUSH
19625: LD_INT 4
19627: PUSH
19628: LD_INT 5
19630: PUSH
19631: LD_INT 6
19633: PUSH
19634: LD_INT 7
19636: PUSH
19637: LD_INT 8
19639: PUSH
19640: LD_INT 9
19642: PUSH
19643: LD_INT 10
19645: PUSH
19646: LD_INT 11
19648: PUSH
19649: LD_INT 12
19651: PUSH
19652: LD_INT 13
19654: PUSH
19655: LD_INT 14
19657: PUSH
19658: LD_INT 15
19660: PUSH
19661: LD_INT 16
19663: PUSH
19664: LD_INT 17
19666: PUSH
19667: LD_INT 18
19669: PUSH
19670: LD_INT 19
19672: PUSH
19673: LD_INT 20
19675: PUSH
19676: LD_INT 21
19678: PUSH
19679: LD_INT 22
19681: PUSH
19682: LD_INT 23
19684: PUSH
19685: LD_INT 24
19687: PUSH
19688: LD_INT 25
19690: PUSH
19691: LD_INT 26
19693: PUSH
19694: LD_INT 27
19696: PUSH
19697: LD_INT 28
19699: PUSH
19700: LD_INT 29
19702: PUSH
19703: LD_INT 30
19705: PUSH
19706: LD_INT 31
19708: PUSH
19709: LD_INT 32
19711: PUSH
19712: LD_INT 33
19714: PUSH
19715: LD_INT 34
19717: PUSH
19718: LD_INT 36
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: PUSH
19758: LD_INT 101
19760: PUSH
19761: LD_INT 102
19763: PUSH
19764: LD_INT 103
19766: PUSH
19767: LD_INT 104
19769: PUSH
19770: LD_INT 105
19772: PUSH
19773: LD_INT 106
19775: PUSH
19776: LD_INT 107
19778: PUSH
19779: LD_INT 108
19781: PUSH
19782: LD_INT 109
19784: PUSH
19785: LD_INT 110
19787: PUSH
19788: LD_INT 111
19790: PUSH
19791: LD_INT 112
19793: PUSH
19794: LD_INT 113
19796: PUSH
19797: LD_INT 114
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: ST_TO_ADDR
19820: GO 20547
19822: LD_INT 16
19824: DOUBLE
19825: EQUAL
19826: IFTRUE 19830
19828: GO 19954
19830: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
19831: LD_ADDR_VAR 0 1
19835: PUSH
19836: LD_INT 2
19838: PUSH
19839: LD_INT 4
19841: PUSH
19842: LD_INT 5
19844: PUSH
19845: LD_INT 7
19847: PUSH
19848: LD_INT 11
19850: PUSH
19851: LD_INT 12
19853: PUSH
19854: LD_INT 15
19856: PUSH
19857: LD_INT 16
19859: PUSH
19860: LD_INT 20
19862: PUSH
19863: LD_INT 21
19865: PUSH
19866: LD_INT 22
19868: PUSH
19869: LD_INT 23
19871: PUSH
19872: LD_INT 25
19874: PUSH
19875: LD_INT 26
19877: PUSH
19878: LD_INT 30
19880: PUSH
19881: LD_INT 31
19883: PUSH
19884: LD_INT 32
19886: PUSH
19887: LD_INT 33
19889: PUSH
19890: LD_INT 34
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 101
19916: PUSH
19917: LD_INT 102
19919: PUSH
19920: LD_INT 103
19922: PUSH
19923: LD_INT 106
19925: PUSH
19926: LD_INT 108
19928: PUSH
19929: LD_INT 112
19931: PUSH
19932: LD_INT 113
19934: PUSH
19935: LD_INT 114
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: ST_TO_ADDR
19952: GO 20547
19954: LD_INT 17
19956: DOUBLE
19957: EQUAL
19958: IFTRUE 19962
19960: GO 20174
19962: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
19963: LD_ADDR_VAR 0 1
19967: PUSH
19968: LD_INT 1
19970: PUSH
19971: LD_INT 2
19973: PUSH
19974: LD_INT 3
19976: PUSH
19977: LD_INT 4
19979: PUSH
19980: LD_INT 5
19982: PUSH
19983: LD_INT 6
19985: PUSH
19986: LD_INT 7
19988: PUSH
19989: LD_INT 8
19991: PUSH
19992: LD_INT 9
19994: PUSH
19995: LD_INT 10
19997: PUSH
19998: LD_INT 11
20000: PUSH
20001: LD_INT 12
20003: PUSH
20004: LD_INT 13
20006: PUSH
20007: LD_INT 14
20009: PUSH
20010: LD_INT 15
20012: PUSH
20013: LD_INT 16
20015: PUSH
20016: LD_INT 17
20018: PUSH
20019: LD_INT 18
20021: PUSH
20022: LD_INT 19
20024: PUSH
20025: LD_INT 20
20027: PUSH
20028: LD_INT 21
20030: PUSH
20031: LD_INT 22
20033: PUSH
20034: LD_INT 23
20036: PUSH
20037: LD_INT 24
20039: PUSH
20040: LD_INT 25
20042: PUSH
20043: LD_INT 26
20045: PUSH
20046: LD_INT 27
20048: PUSH
20049: LD_INT 28
20051: PUSH
20052: LD_INT 29
20054: PUSH
20055: LD_INT 30
20057: PUSH
20058: LD_INT 31
20060: PUSH
20061: LD_INT 32
20063: PUSH
20064: LD_INT 33
20066: PUSH
20067: LD_INT 34
20069: PUSH
20070: LD_INT 36
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: PUSH
20110: LD_INT 101
20112: PUSH
20113: LD_INT 102
20115: PUSH
20116: LD_INT 103
20118: PUSH
20119: LD_INT 104
20121: PUSH
20122: LD_INT 105
20124: PUSH
20125: LD_INT 106
20127: PUSH
20128: LD_INT 107
20130: PUSH
20131: LD_INT 108
20133: PUSH
20134: LD_INT 109
20136: PUSH
20137: LD_INT 110
20139: PUSH
20140: LD_INT 111
20142: PUSH
20143: LD_INT 112
20145: PUSH
20146: LD_INT 113
20148: PUSH
20149: LD_INT 114
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: ST_TO_ADDR
20172: GO 20547
20174: LD_INT 18
20176: DOUBLE
20177: EQUAL
20178: IFTRUE 20182
20180: GO 20318
20182: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
20183: LD_ADDR_VAR 0 1
20187: PUSH
20188: LD_INT 2
20190: PUSH
20191: LD_INT 4
20193: PUSH
20194: LD_INT 5
20196: PUSH
20197: LD_INT 7
20199: PUSH
20200: LD_INT 11
20202: PUSH
20203: LD_INT 12
20205: PUSH
20206: LD_INT 15
20208: PUSH
20209: LD_INT 16
20211: PUSH
20212: LD_INT 20
20214: PUSH
20215: LD_INT 21
20217: PUSH
20218: LD_INT 22
20220: PUSH
20221: LD_INT 23
20223: PUSH
20224: LD_INT 25
20226: PUSH
20227: LD_INT 26
20229: PUSH
20230: LD_INT 30
20232: PUSH
20233: LD_INT 31
20235: PUSH
20236: LD_INT 32
20238: PUSH
20239: LD_INT 33
20241: PUSH
20242: LD_INT 34
20244: PUSH
20245: LD_INT 35
20247: PUSH
20248: LD_INT 36
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: PUSH
20274: LD_INT 101
20276: PUSH
20277: LD_INT 102
20279: PUSH
20280: LD_INT 103
20282: PUSH
20283: LD_INT 106
20285: PUSH
20286: LD_INT 108
20288: PUSH
20289: LD_INT 112
20291: PUSH
20292: LD_INT 113
20294: PUSH
20295: LD_INT 114
20297: PUSH
20298: LD_INT 115
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: ST_TO_ADDR
20316: GO 20547
20318: LD_INT 19
20320: DOUBLE
20321: EQUAL
20322: IFTRUE 20326
20324: GO 20546
20326: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
20327: LD_ADDR_VAR 0 1
20331: PUSH
20332: LD_INT 1
20334: PUSH
20335: LD_INT 2
20337: PUSH
20338: LD_INT 3
20340: PUSH
20341: LD_INT 4
20343: PUSH
20344: LD_INT 5
20346: PUSH
20347: LD_INT 6
20349: PUSH
20350: LD_INT 7
20352: PUSH
20353: LD_INT 8
20355: PUSH
20356: LD_INT 9
20358: PUSH
20359: LD_INT 10
20361: PUSH
20362: LD_INT 11
20364: PUSH
20365: LD_INT 12
20367: PUSH
20368: LD_INT 13
20370: PUSH
20371: LD_INT 14
20373: PUSH
20374: LD_INT 15
20376: PUSH
20377: LD_INT 16
20379: PUSH
20380: LD_INT 17
20382: PUSH
20383: LD_INT 18
20385: PUSH
20386: LD_INT 19
20388: PUSH
20389: LD_INT 20
20391: PUSH
20392: LD_INT 21
20394: PUSH
20395: LD_INT 22
20397: PUSH
20398: LD_INT 23
20400: PUSH
20401: LD_INT 24
20403: PUSH
20404: LD_INT 25
20406: PUSH
20407: LD_INT 26
20409: PUSH
20410: LD_INT 27
20412: PUSH
20413: LD_INT 28
20415: PUSH
20416: LD_INT 29
20418: PUSH
20419: LD_INT 30
20421: PUSH
20422: LD_INT 31
20424: PUSH
20425: LD_INT 32
20427: PUSH
20428: LD_INT 33
20430: PUSH
20431: LD_INT 34
20433: PUSH
20434: LD_INT 35
20436: PUSH
20437: LD_INT 36
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: PUSH
20478: LD_INT 101
20480: PUSH
20481: LD_INT 102
20483: PUSH
20484: LD_INT 103
20486: PUSH
20487: LD_INT 104
20489: PUSH
20490: LD_INT 105
20492: PUSH
20493: LD_INT 106
20495: PUSH
20496: LD_INT 107
20498: PUSH
20499: LD_INT 108
20501: PUSH
20502: LD_INT 109
20504: PUSH
20505: LD_INT 110
20507: PUSH
20508: LD_INT 111
20510: PUSH
20511: LD_INT 112
20513: PUSH
20514: LD_INT 113
20516: PUSH
20517: LD_INT 114
20519: PUSH
20520: LD_INT 115
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: ST_TO_ADDR
20544: GO 20547
20546: POP
// end else
20547: GO 20766
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
20549: LD_ADDR_VAR 0 1
20553: PUSH
20554: LD_INT 1
20556: PUSH
20557: LD_INT 2
20559: PUSH
20560: LD_INT 3
20562: PUSH
20563: LD_INT 4
20565: PUSH
20566: LD_INT 5
20568: PUSH
20569: LD_INT 6
20571: PUSH
20572: LD_INT 7
20574: PUSH
20575: LD_INT 8
20577: PUSH
20578: LD_INT 9
20580: PUSH
20581: LD_INT 10
20583: PUSH
20584: LD_INT 11
20586: PUSH
20587: LD_INT 12
20589: PUSH
20590: LD_INT 13
20592: PUSH
20593: LD_INT 14
20595: PUSH
20596: LD_INT 15
20598: PUSH
20599: LD_INT 16
20601: PUSH
20602: LD_INT 17
20604: PUSH
20605: LD_INT 18
20607: PUSH
20608: LD_INT 19
20610: PUSH
20611: LD_INT 20
20613: PUSH
20614: LD_INT 21
20616: PUSH
20617: LD_INT 22
20619: PUSH
20620: LD_INT 23
20622: PUSH
20623: LD_INT 24
20625: PUSH
20626: LD_INT 25
20628: PUSH
20629: LD_INT 26
20631: PUSH
20632: LD_INT 27
20634: PUSH
20635: LD_INT 28
20637: PUSH
20638: LD_INT 29
20640: PUSH
20641: LD_INT 30
20643: PUSH
20644: LD_INT 31
20646: PUSH
20647: LD_INT 32
20649: PUSH
20650: LD_INT 33
20652: PUSH
20653: LD_INT 34
20655: PUSH
20656: LD_INT 35
20658: PUSH
20659: LD_INT 36
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 101
20702: PUSH
20703: LD_INT 102
20705: PUSH
20706: LD_INT 103
20708: PUSH
20709: LD_INT 104
20711: PUSH
20712: LD_INT 105
20714: PUSH
20715: LD_INT 106
20717: PUSH
20718: LD_INT 107
20720: PUSH
20721: LD_INT 108
20723: PUSH
20724: LD_INT 109
20726: PUSH
20727: LD_INT 110
20729: PUSH
20730: LD_INT 111
20732: PUSH
20733: LD_INT 112
20735: PUSH
20736: LD_INT 113
20738: PUSH
20739: LD_INT 114
20741: PUSH
20742: LD_INT 115
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: ST_TO_ADDR
// if result then
20766: LD_VAR 0 1
20770: IFFALSE 21059
// begin normal :=  ;
20772: LD_ADDR_VAR 0 3
20776: PUSH
20777: LD_STRING 
20779: ST_TO_ADDR
// hardcore :=  ;
20780: LD_ADDR_VAR 0 4
20784: PUSH
20785: LD_STRING 
20787: ST_TO_ADDR
// for i = 1 to normalCounter do
20788: LD_ADDR_VAR 0 5
20792: PUSH
20793: DOUBLE
20794: LD_INT 1
20796: DEC
20797: ST_TO_ADDR
20798: LD_EXP 52
20802: PUSH
20803: FOR_TO
20804: IFFALSE 20905
// begin tmp := 0 ;
20806: LD_ADDR_VAR 0 2
20810: PUSH
20811: LD_STRING 0
20813: ST_TO_ADDR
// if result [ 1 ] then
20814: LD_VAR 0 1
20818: PUSH
20819: LD_INT 1
20821: ARRAY
20822: IFFALSE 20887
// if result [ 1 ] [ 1 ] = i then
20824: LD_VAR 0 1
20828: PUSH
20829: LD_INT 1
20831: ARRAY
20832: PUSH
20833: LD_INT 1
20835: ARRAY
20836: PUSH
20837: LD_VAR 0 5
20841: EQUAL
20842: IFFALSE 20887
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20844: LD_ADDR_VAR 0 1
20848: PUSH
20849: LD_VAR 0 1
20853: PPUSH
20854: LD_INT 1
20856: PPUSH
20857: LD_VAR 0 1
20861: PUSH
20862: LD_INT 1
20864: ARRAY
20865: PPUSH
20866: LD_INT 1
20868: PPUSH
20869: CALL_OW 3
20873: PPUSH
20874: CALL_OW 1
20878: ST_TO_ADDR
// tmp := 1 ;
20879: LD_ADDR_VAR 0 2
20883: PUSH
20884: LD_STRING 1
20886: ST_TO_ADDR
// end ; normal := normal & tmp ;
20887: LD_ADDR_VAR 0 3
20891: PUSH
20892: LD_VAR 0 3
20896: PUSH
20897: LD_VAR 0 2
20901: STR
20902: ST_TO_ADDR
// end ;
20903: GO 20803
20905: POP
20906: POP
// for i = 1 to hardcoreCounter do
20907: LD_ADDR_VAR 0 5
20911: PUSH
20912: DOUBLE
20913: LD_INT 1
20915: DEC
20916: ST_TO_ADDR
20917: LD_EXP 53
20921: PUSH
20922: FOR_TO
20923: IFFALSE 21028
// begin tmp := 0 ;
20925: LD_ADDR_VAR 0 2
20929: PUSH
20930: LD_STRING 0
20932: ST_TO_ADDR
// if result [ 2 ] then
20933: LD_VAR 0 1
20937: PUSH
20938: LD_INT 2
20940: ARRAY
20941: IFFALSE 21010
// if result [ 2 ] [ 1 ] = 100 + i then
20943: LD_VAR 0 1
20947: PUSH
20948: LD_INT 2
20950: ARRAY
20951: PUSH
20952: LD_INT 1
20954: ARRAY
20955: PUSH
20956: LD_INT 100
20958: PUSH
20959: LD_VAR 0 5
20963: PLUS
20964: EQUAL
20965: IFFALSE 21010
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20967: LD_ADDR_VAR 0 1
20971: PUSH
20972: LD_VAR 0 1
20976: PPUSH
20977: LD_INT 2
20979: PPUSH
20980: LD_VAR 0 1
20984: PUSH
20985: LD_INT 2
20987: ARRAY
20988: PPUSH
20989: LD_INT 1
20991: PPUSH
20992: CALL_OW 3
20996: PPUSH
20997: CALL_OW 1
21001: ST_TO_ADDR
// tmp := 1 ;
21002: LD_ADDR_VAR 0 2
21006: PUSH
21007: LD_STRING 1
21009: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21010: LD_ADDR_VAR 0 4
21014: PUSH
21015: LD_VAR 0 4
21019: PUSH
21020: LD_VAR 0 2
21024: STR
21025: ST_TO_ADDR
// end ;
21026: GO 20922
21028: POP
21029: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
21030: LD_STRING getStreamItemsFromMission("
21032: PUSH
21033: LD_VAR 0 3
21037: STR
21038: PUSH
21039: LD_STRING ","
21041: STR
21042: PUSH
21043: LD_VAR 0 4
21047: STR
21048: PUSH
21049: LD_STRING ")
21051: STR
21052: PPUSH
21053: CALL_OW 559
// end else
21057: GO 21066
// ToLua ( getStreamItemsFromMission("","") ) ;
21059: LD_STRING getStreamItemsFromMission("","")
21061: PPUSH
21062: CALL_OW 559
// end ;
21066: LD_VAR 0 1
21070: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21071: LD_EXP 51
21075: PUSH
21076: LD_EXP 56
21080: AND
21081: IFFALSE 21205
21083: GO 21085
21085: DISABLE
21086: LD_INT 0
21088: PPUSH
21089: PPUSH
// begin enable ;
21090: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21091: LD_ADDR_VAR 0 2
21095: PUSH
21096: LD_INT 22
21098: PUSH
21099: LD_OWVAR 2
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 2
21110: PUSH
21111: LD_INT 34
21113: PUSH
21114: LD_INT 7
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 34
21123: PUSH
21124: LD_INT 45
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 34
21133: PUSH
21134: LD_INT 28
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 34
21143: PUSH
21144: LD_INT 47
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PPUSH
21162: CALL_OW 69
21166: ST_TO_ADDR
// if not tmp then
21167: LD_VAR 0 2
21171: NOT
21172: IFFALSE 21176
// exit ;
21174: GO 21205
// for i in tmp do
21176: LD_ADDR_VAR 0 1
21180: PUSH
21181: LD_VAR 0 2
21185: PUSH
21186: FOR_IN
21187: IFFALSE 21203
// begin SetLives ( i , 0 ) ;
21189: LD_VAR 0 1
21193: PPUSH
21194: LD_INT 0
21196: PPUSH
21197: CALL_OW 234
// end ;
21201: GO 21186
21203: POP
21204: POP
// end ;
21205: PPOPN 2
21207: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21208: LD_EXP 51
21212: PUSH
21213: LD_EXP 57
21217: AND
21218: IFFALSE 21302
21220: GO 21222
21222: DISABLE
21223: LD_INT 0
21225: PPUSH
21226: PPUSH
// begin enable ;
21227: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21228: LD_ADDR_VAR 0 2
21232: PUSH
21233: LD_INT 22
21235: PUSH
21236: LD_OWVAR 2
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: PUSH
21245: LD_INT 32
21247: PUSH
21248: LD_INT 3
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PPUSH
21259: CALL_OW 69
21263: ST_TO_ADDR
// if not tmp then
21264: LD_VAR 0 2
21268: NOT
21269: IFFALSE 21273
// exit ;
21271: GO 21302
// for i in tmp do
21273: LD_ADDR_VAR 0 1
21277: PUSH
21278: LD_VAR 0 2
21282: PUSH
21283: FOR_IN
21284: IFFALSE 21300
// begin SetLives ( i , 0 ) ;
21286: LD_VAR 0 1
21290: PPUSH
21291: LD_INT 0
21293: PPUSH
21294: CALL_OW 234
// end ;
21298: GO 21283
21300: POP
21301: POP
// end ;
21302: PPOPN 2
21304: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21305: LD_EXP 51
21309: PUSH
21310: LD_EXP 54
21314: AND
21315: IFFALSE 21408
21317: GO 21319
21319: DISABLE
21320: LD_INT 0
21322: PPUSH
// begin enable ;
21323: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21324: LD_ADDR_VAR 0 1
21328: PUSH
21329: LD_INT 22
21331: PUSH
21332: LD_OWVAR 2
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 2
21343: PUSH
21344: LD_INT 25
21346: PUSH
21347: LD_INT 5
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 25
21356: PUSH
21357: LD_INT 9
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 25
21366: PUSH
21367: LD_INT 8
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PPUSH
21384: CALL_OW 69
21388: PUSH
21389: FOR_IN
21390: IFFALSE 21406
// begin SetClass ( i , 1 ) ;
21392: LD_VAR 0 1
21396: PPUSH
21397: LD_INT 1
21399: PPUSH
21400: CALL_OW 336
// end ;
21404: GO 21389
21406: POP
21407: POP
// end ;
21408: PPOPN 1
21410: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21411: LD_EXP 51
21415: PUSH
21416: LD_EXP 55
21420: AND
21421: PUSH
21422: LD_OWVAR 65
21426: PUSH
21427: LD_INT 7
21429: LESS
21430: AND
21431: IFFALSE 21445
21433: GO 21435
21435: DISABLE
// begin enable ;
21436: ENABLE
// game_speed := 7 ;
21437: LD_ADDR_OWVAR 65
21441: PUSH
21442: LD_INT 7
21444: ST_TO_ADDR
// end ;
21445: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21446: LD_EXP 51
21450: PUSH
21451: LD_EXP 58
21455: AND
21456: IFFALSE 21658
21458: GO 21460
21460: DISABLE
21461: LD_INT 0
21463: PPUSH
21464: PPUSH
21465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21466: LD_ADDR_VAR 0 3
21470: PUSH
21471: LD_INT 81
21473: PUSH
21474: LD_OWVAR 2
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PUSH
21483: LD_INT 21
21485: PUSH
21486: LD_INT 1
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PPUSH
21497: CALL_OW 69
21501: ST_TO_ADDR
// if not tmp then
21502: LD_VAR 0 3
21506: NOT
21507: IFFALSE 21511
// exit ;
21509: GO 21658
// if tmp > 5 then
21511: LD_VAR 0 3
21515: PUSH
21516: LD_INT 5
21518: GREATER
21519: IFFALSE 21531
// k := 5 else
21521: LD_ADDR_VAR 0 2
21525: PUSH
21526: LD_INT 5
21528: ST_TO_ADDR
21529: GO 21541
// k := tmp ;
21531: LD_ADDR_VAR 0 2
21535: PUSH
21536: LD_VAR 0 3
21540: ST_TO_ADDR
// for i := 1 to k do
21541: LD_ADDR_VAR 0 1
21545: PUSH
21546: DOUBLE
21547: LD_INT 1
21549: DEC
21550: ST_TO_ADDR
21551: LD_VAR 0 2
21555: PUSH
21556: FOR_TO
21557: IFFALSE 21656
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21559: LD_VAR 0 3
21563: PUSH
21564: LD_VAR 0 1
21568: ARRAY
21569: PPUSH
21570: LD_VAR 0 1
21574: PUSH
21575: LD_INT 4
21577: MOD
21578: PUSH
21579: LD_INT 1
21581: PLUS
21582: PPUSH
21583: CALL_OW 259
21587: PUSH
21588: LD_INT 10
21590: LESS
21591: IFFALSE 21654
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21593: LD_VAR 0 3
21597: PUSH
21598: LD_VAR 0 1
21602: ARRAY
21603: PPUSH
21604: LD_VAR 0 1
21608: PUSH
21609: LD_INT 4
21611: MOD
21612: PUSH
21613: LD_INT 1
21615: PLUS
21616: PPUSH
21617: LD_VAR 0 3
21621: PUSH
21622: LD_VAR 0 1
21626: ARRAY
21627: PPUSH
21628: LD_VAR 0 1
21632: PUSH
21633: LD_INT 4
21635: MOD
21636: PUSH
21637: LD_INT 1
21639: PLUS
21640: PPUSH
21641: CALL_OW 259
21645: PUSH
21646: LD_INT 1
21648: PLUS
21649: PPUSH
21650: CALL_OW 237
21654: GO 21556
21656: POP
21657: POP
// end ;
21658: PPOPN 3
21660: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21661: LD_EXP 51
21665: PUSH
21666: LD_EXP 59
21670: AND
21671: IFFALSE 21691
21673: GO 21675
21675: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21676: LD_INT 4
21678: PPUSH
21679: LD_OWVAR 2
21683: PPUSH
21684: LD_INT 0
21686: PPUSH
21687: CALL_OW 324
21691: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21692: LD_EXP 51
21696: PUSH
21697: LD_EXP 88
21701: AND
21702: IFFALSE 21722
21704: GO 21706
21706: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21707: LD_INT 19
21709: PPUSH
21710: LD_OWVAR 2
21714: PPUSH
21715: LD_INT 0
21717: PPUSH
21718: CALL_OW 324
21722: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21723: LD_EXP 51
21727: PUSH
21728: LD_EXP 60
21732: AND
21733: IFFALSE 21835
21735: GO 21737
21737: DISABLE
21738: LD_INT 0
21740: PPUSH
21741: PPUSH
// begin enable ;
21742: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21743: LD_ADDR_VAR 0 2
21747: PUSH
21748: LD_INT 22
21750: PUSH
21751: LD_OWVAR 2
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 2
21762: PUSH
21763: LD_INT 34
21765: PUSH
21766: LD_INT 11
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 34
21775: PUSH
21776: LD_INT 30
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: LIST
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PPUSH
21792: CALL_OW 69
21796: ST_TO_ADDR
// if not tmp then
21797: LD_VAR 0 2
21801: NOT
21802: IFFALSE 21806
// exit ;
21804: GO 21835
// for i in tmp do
21806: LD_ADDR_VAR 0 1
21810: PUSH
21811: LD_VAR 0 2
21815: PUSH
21816: FOR_IN
21817: IFFALSE 21833
// begin SetLives ( i , 0 ) ;
21819: LD_VAR 0 1
21823: PPUSH
21824: LD_INT 0
21826: PPUSH
21827: CALL_OW 234
// end ;
21831: GO 21816
21833: POP
21834: POP
// end ;
21835: PPOPN 2
21837: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21838: LD_EXP 51
21842: PUSH
21843: LD_EXP 61
21847: AND
21848: IFFALSE 21868
21850: GO 21852
21852: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21853: LD_INT 32
21855: PPUSH
21856: LD_OWVAR 2
21860: PPUSH
21861: LD_INT 0
21863: PPUSH
21864: CALL_OW 324
21868: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21869: LD_EXP 51
21873: PUSH
21874: LD_EXP 62
21878: AND
21879: IFFALSE 22060
21881: GO 21883
21883: DISABLE
21884: LD_INT 0
21886: PPUSH
21887: PPUSH
21888: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21889: LD_ADDR_VAR 0 2
21893: PUSH
21894: LD_INT 22
21896: PUSH
21897: LD_OWVAR 2
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PUSH
21906: LD_INT 33
21908: PUSH
21909: LD_INT 3
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: PPUSH
21920: CALL_OW 69
21924: ST_TO_ADDR
// if not tmp then
21925: LD_VAR 0 2
21929: NOT
21930: IFFALSE 21934
// exit ;
21932: GO 22060
// side := 0 ;
21934: LD_ADDR_VAR 0 3
21938: PUSH
21939: LD_INT 0
21941: ST_TO_ADDR
// for i := 1 to 8 do
21942: LD_ADDR_VAR 0 1
21946: PUSH
21947: DOUBLE
21948: LD_INT 1
21950: DEC
21951: ST_TO_ADDR
21952: LD_INT 8
21954: PUSH
21955: FOR_TO
21956: IFFALSE 22004
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21958: LD_OWVAR 2
21962: PUSH
21963: LD_VAR 0 1
21967: NONEQUAL
21968: PUSH
21969: LD_OWVAR 2
21973: PPUSH
21974: LD_VAR 0 1
21978: PPUSH
21979: CALL_OW 81
21983: PUSH
21984: LD_INT 2
21986: EQUAL
21987: AND
21988: IFFALSE 22002
// begin side := i ;
21990: LD_ADDR_VAR 0 3
21994: PUSH
21995: LD_VAR 0 1
21999: ST_TO_ADDR
// break ;
22000: GO 22004
// end ;
22002: GO 21955
22004: POP
22005: POP
// if not side then
22006: LD_VAR 0 3
22010: NOT
22011: IFFALSE 22015
// exit ;
22013: GO 22060
// for i := 1 to tmp do
22015: LD_ADDR_VAR 0 1
22019: PUSH
22020: DOUBLE
22021: LD_INT 1
22023: DEC
22024: ST_TO_ADDR
22025: LD_VAR 0 2
22029: PUSH
22030: FOR_TO
22031: IFFALSE 22058
// if Prob ( 60 ) then
22033: LD_INT 60
22035: PPUSH
22036: CALL_OW 13
22040: IFFALSE 22056
// SetSide ( i , side ) ;
22042: LD_VAR 0 1
22046: PPUSH
22047: LD_VAR 0 3
22051: PPUSH
22052: CALL_OW 235
22056: GO 22030
22058: POP
22059: POP
// end ;
22060: PPOPN 3
22062: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22063: LD_EXP 51
22067: PUSH
22068: LD_EXP 64
22072: AND
22073: IFFALSE 22192
22075: GO 22077
22077: DISABLE
22078: LD_INT 0
22080: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22081: LD_ADDR_VAR 0 1
22085: PUSH
22086: LD_INT 22
22088: PUSH
22089: LD_OWVAR 2
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 21
22100: PUSH
22101: LD_INT 1
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 3
22110: PUSH
22111: LD_INT 23
22113: PUSH
22114: LD_INT 0
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: LIST
22129: PPUSH
22130: CALL_OW 69
22134: PUSH
22135: FOR_IN
22136: IFFALSE 22190
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22138: LD_VAR 0 1
22142: PPUSH
22143: CALL_OW 257
22147: PUSH
22148: LD_INT 1
22150: PUSH
22151: LD_INT 2
22153: PUSH
22154: LD_INT 3
22156: PUSH
22157: LD_INT 4
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: IN
22166: IFFALSE 22188
// SetClass ( un , rand ( 1 , 4 ) ) ;
22168: LD_VAR 0 1
22172: PPUSH
22173: LD_INT 1
22175: PPUSH
22176: LD_INT 4
22178: PPUSH
22179: CALL_OW 12
22183: PPUSH
22184: CALL_OW 336
22188: GO 22135
22190: POP
22191: POP
// end ;
22192: PPOPN 1
22194: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22195: LD_EXP 51
22199: PUSH
22200: LD_EXP 63
22204: AND
22205: IFFALSE 22284
22207: GO 22209
22209: DISABLE
22210: LD_INT 0
22212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22213: LD_ADDR_VAR 0 1
22217: PUSH
22218: LD_INT 22
22220: PUSH
22221: LD_OWVAR 2
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: PUSH
22230: LD_INT 21
22232: PUSH
22233: LD_INT 3
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PPUSH
22244: CALL_OW 69
22248: ST_TO_ADDR
// if not tmp then
22249: LD_VAR 0 1
22253: NOT
22254: IFFALSE 22258
// exit ;
22256: GO 22284
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22258: LD_VAR 0 1
22262: PUSH
22263: LD_INT 1
22265: PPUSH
22266: LD_VAR 0 1
22270: PPUSH
22271: CALL_OW 12
22275: ARRAY
22276: PPUSH
22277: LD_INT 100
22279: PPUSH
22280: CALL_OW 234
// end ;
22284: PPOPN 1
22286: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22287: LD_EXP 51
22291: PUSH
22292: LD_EXP 65
22296: AND
22297: IFFALSE 22395
22299: GO 22301
22301: DISABLE
22302: LD_INT 0
22304: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22305: LD_ADDR_VAR 0 1
22309: PUSH
22310: LD_INT 22
22312: PUSH
22313: LD_OWVAR 2
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 21
22324: PUSH
22325: LD_INT 1
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PPUSH
22336: CALL_OW 69
22340: ST_TO_ADDR
// if not tmp then
22341: LD_VAR 0 1
22345: NOT
22346: IFFALSE 22350
// exit ;
22348: GO 22395
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22350: LD_VAR 0 1
22354: PUSH
22355: LD_INT 1
22357: PPUSH
22358: LD_VAR 0 1
22362: PPUSH
22363: CALL_OW 12
22367: ARRAY
22368: PPUSH
22369: LD_INT 1
22371: PPUSH
22372: LD_INT 4
22374: PPUSH
22375: CALL_OW 12
22379: PPUSH
22380: LD_INT 3000
22382: PPUSH
22383: LD_INT 9000
22385: PPUSH
22386: CALL_OW 12
22390: PPUSH
22391: CALL_OW 492
// end ;
22395: PPOPN 1
22397: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22398: LD_EXP 51
22402: PUSH
22403: LD_EXP 66
22407: AND
22408: IFFALSE 22428
22410: GO 22412
22412: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22413: LD_INT 1
22415: PPUSH
22416: LD_OWVAR 2
22420: PPUSH
22421: LD_INT 0
22423: PPUSH
22424: CALL_OW 324
22428: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22429: LD_EXP 51
22433: PUSH
22434: LD_EXP 67
22438: AND
22439: IFFALSE 22522
22441: GO 22443
22443: DISABLE
22444: LD_INT 0
22446: PPUSH
22447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22448: LD_ADDR_VAR 0 2
22452: PUSH
22453: LD_INT 22
22455: PUSH
22456: LD_OWVAR 2
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: LD_INT 21
22467: PUSH
22468: LD_INT 3
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PPUSH
22479: CALL_OW 69
22483: ST_TO_ADDR
// if not tmp then
22484: LD_VAR 0 2
22488: NOT
22489: IFFALSE 22493
// exit ;
22491: GO 22522
// for i in tmp do
22493: LD_ADDR_VAR 0 1
22497: PUSH
22498: LD_VAR 0 2
22502: PUSH
22503: FOR_IN
22504: IFFALSE 22520
// SetBLevel ( i , 10 ) ;
22506: LD_VAR 0 1
22510: PPUSH
22511: LD_INT 10
22513: PPUSH
22514: CALL_OW 241
22518: GO 22503
22520: POP
22521: POP
// end ;
22522: PPOPN 2
22524: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22525: LD_EXP 51
22529: PUSH
22530: LD_EXP 68
22534: AND
22535: IFFALSE 22646
22537: GO 22539
22539: DISABLE
22540: LD_INT 0
22542: PPUSH
22543: PPUSH
22544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22545: LD_ADDR_VAR 0 3
22549: PUSH
22550: LD_INT 22
22552: PUSH
22553: LD_OWVAR 2
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 25
22564: PUSH
22565: LD_INT 1
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PPUSH
22576: CALL_OW 69
22580: ST_TO_ADDR
// if not tmp then
22581: LD_VAR 0 3
22585: NOT
22586: IFFALSE 22590
// exit ;
22588: GO 22646
// un := tmp [ rand ( 1 , tmp ) ] ;
22590: LD_ADDR_VAR 0 2
22594: PUSH
22595: LD_VAR 0 3
22599: PUSH
22600: LD_INT 1
22602: PPUSH
22603: LD_VAR 0 3
22607: PPUSH
22608: CALL_OW 12
22612: ARRAY
22613: ST_TO_ADDR
// if Crawls ( un ) then
22614: LD_VAR 0 2
22618: PPUSH
22619: CALL_OW 318
22623: IFFALSE 22634
// ComWalk ( un ) ;
22625: LD_VAR 0 2
22629: PPUSH
22630: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22634: LD_VAR 0 2
22638: PPUSH
22639: LD_INT 5
22641: PPUSH
22642: CALL_OW 336
// end ;
22646: PPOPN 3
22648: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
22649: LD_EXP 51
22653: PUSH
22654: LD_EXP 69
22658: AND
22659: PUSH
22660: LD_OWVAR 67
22664: PUSH
22665: LD_INT 3
22667: LESS
22668: AND
22669: IFFALSE 22688
22671: GO 22673
22673: DISABLE
// Difficulty := Difficulty + 1 ;
22674: LD_ADDR_OWVAR 67
22678: PUSH
22679: LD_OWVAR 67
22683: PUSH
22684: LD_INT 1
22686: PLUS
22687: ST_TO_ADDR
22688: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22689: LD_EXP 51
22693: PUSH
22694: LD_EXP 70
22698: AND
22699: IFFALSE 22802
22701: GO 22703
22703: DISABLE
22704: LD_INT 0
22706: PPUSH
// begin for i := 1 to 5 do
22707: LD_ADDR_VAR 0 1
22711: PUSH
22712: DOUBLE
22713: LD_INT 1
22715: DEC
22716: ST_TO_ADDR
22717: LD_INT 5
22719: PUSH
22720: FOR_TO
22721: IFFALSE 22800
// begin uc_nation := nation_nature ;
22723: LD_ADDR_OWVAR 21
22727: PUSH
22728: LD_INT 0
22730: ST_TO_ADDR
// uc_side := 0 ;
22731: LD_ADDR_OWVAR 20
22735: PUSH
22736: LD_INT 0
22738: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22739: LD_ADDR_OWVAR 29
22743: PUSH
22744: LD_INT 12
22746: PUSH
22747: LD_INT 12
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: ST_TO_ADDR
// hc_agressivity := 20 ;
22754: LD_ADDR_OWVAR 35
22758: PUSH
22759: LD_INT 20
22761: ST_TO_ADDR
// hc_class := class_tiger ;
22762: LD_ADDR_OWVAR 28
22766: PUSH
22767: LD_INT 14
22769: ST_TO_ADDR
// hc_gallery :=  ;
22770: LD_ADDR_OWVAR 33
22774: PUSH
22775: LD_STRING 
22777: ST_TO_ADDR
// hc_name :=  ;
22778: LD_ADDR_OWVAR 26
22782: PUSH
22783: LD_STRING 
22785: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22786: CALL_OW 44
22790: PPUSH
22791: LD_INT 0
22793: PPUSH
22794: CALL_OW 51
// end ;
22798: GO 22720
22800: POP
22801: POP
// end ;
22802: PPOPN 1
22804: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22805: LD_EXP 51
22809: PUSH
22810: LD_EXP 71
22814: AND
22815: IFFALSE 22824
22817: GO 22819
22819: DISABLE
// StreamSibBomb ;
22820: CALL 22825 0 0
22824: END
// export function StreamSibBomb ; var i , x , y ; begin
22825: LD_INT 0
22827: PPUSH
22828: PPUSH
22829: PPUSH
22830: PPUSH
// result := false ;
22831: LD_ADDR_VAR 0 1
22835: PUSH
22836: LD_INT 0
22838: ST_TO_ADDR
// for i := 1 to 16 do
22839: LD_ADDR_VAR 0 2
22843: PUSH
22844: DOUBLE
22845: LD_INT 1
22847: DEC
22848: ST_TO_ADDR
22849: LD_INT 16
22851: PUSH
22852: FOR_TO
22853: IFFALSE 23052
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22855: LD_ADDR_VAR 0 3
22859: PUSH
22860: LD_INT 10
22862: PUSH
22863: LD_INT 20
22865: PUSH
22866: LD_INT 30
22868: PUSH
22869: LD_INT 40
22871: PUSH
22872: LD_INT 50
22874: PUSH
22875: LD_INT 60
22877: PUSH
22878: LD_INT 70
22880: PUSH
22881: LD_INT 80
22883: PUSH
22884: LD_INT 90
22886: PUSH
22887: LD_INT 100
22889: PUSH
22890: LD_INT 110
22892: PUSH
22893: LD_INT 120
22895: PUSH
22896: LD_INT 130
22898: PUSH
22899: LD_INT 140
22901: PUSH
22902: LD_INT 150
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 1
22924: PPUSH
22925: LD_INT 15
22927: PPUSH
22928: CALL_OW 12
22932: ARRAY
22933: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22934: LD_ADDR_VAR 0 4
22938: PUSH
22939: LD_INT 10
22941: PUSH
22942: LD_INT 20
22944: PUSH
22945: LD_INT 30
22947: PUSH
22948: LD_INT 40
22950: PUSH
22951: LD_INT 50
22953: PUSH
22954: LD_INT 60
22956: PUSH
22957: LD_INT 70
22959: PUSH
22960: LD_INT 80
22962: PUSH
22963: LD_INT 90
22965: PUSH
22966: LD_INT 100
22968: PUSH
22969: LD_INT 110
22971: PUSH
22972: LD_INT 120
22974: PUSH
22975: LD_INT 130
22977: PUSH
22978: LD_INT 140
22980: PUSH
22981: LD_INT 150
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 1
23003: PPUSH
23004: LD_INT 15
23006: PPUSH
23007: CALL_OW 12
23011: ARRAY
23012: ST_TO_ADDR
// if ValidHex ( x , y ) then
23013: LD_VAR 0 3
23017: PPUSH
23018: LD_VAR 0 4
23022: PPUSH
23023: CALL_OW 488
23027: IFFALSE 23050
// begin result := [ x , y ] ;
23029: LD_ADDR_VAR 0 1
23033: PUSH
23034: LD_VAR 0 3
23038: PUSH
23039: LD_VAR 0 4
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: ST_TO_ADDR
// break ;
23048: GO 23052
// end ; end ;
23050: GO 22852
23052: POP
23053: POP
// if result then
23054: LD_VAR 0 1
23058: IFFALSE 23118
// begin ToLua ( playSibBomb() ) ;
23060: LD_STRING playSibBomb()
23062: PPUSH
23063: CALL_OW 559
// wait ( 0 0$14 ) ;
23067: LD_INT 490
23069: PPUSH
23070: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23074: LD_VAR 0 1
23078: PUSH
23079: LD_INT 1
23081: ARRAY
23082: PPUSH
23083: LD_VAR 0 1
23087: PUSH
23088: LD_INT 2
23090: ARRAY
23091: PPUSH
23092: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23096: LD_VAR 0 1
23100: PUSH
23101: LD_INT 1
23103: ARRAY
23104: PPUSH
23105: LD_VAR 0 1
23109: PUSH
23110: LD_INT 2
23112: ARRAY
23113: PPUSH
23114: CALL_OW 429
// end ; end ;
23118: LD_VAR 0 1
23122: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23123: LD_EXP 51
23127: PUSH
23128: LD_EXP 73
23132: AND
23133: IFFALSE 23145
23135: GO 23137
23137: DISABLE
// YouLost (  ) ;
23138: LD_STRING 
23140: PPUSH
23141: CALL_OW 104
23145: END
// every 0 0$1 trigger StreamModeActive and sFog do
23146: LD_EXP 51
23150: PUSH
23151: LD_EXP 72
23155: AND
23156: IFFALSE 23170
23158: GO 23160
23160: DISABLE
// FogOff ( your_side ) ;
23161: LD_OWVAR 2
23165: PPUSH
23166: CALL_OW 344
23170: END
// every 0 0$1 trigger StreamModeActive and sSun do
23171: LD_EXP 51
23175: PUSH
23176: LD_EXP 74
23180: AND
23181: IFFALSE 23209
23183: GO 23185
23185: DISABLE
// begin solar_recharge_percent := 0 ;
23186: LD_ADDR_OWVAR 79
23190: PUSH
23191: LD_INT 0
23193: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23194: LD_INT 10500
23196: PPUSH
23197: CALL_OW 67
// solar_recharge_percent := 100 ;
23201: LD_ADDR_OWVAR 79
23205: PUSH
23206: LD_INT 100
23208: ST_TO_ADDR
// end ;
23209: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23210: LD_EXP 51
23214: PUSH
23215: LD_EXP 75
23219: AND
23220: IFFALSE 23459
23222: GO 23224
23224: DISABLE
23225: LD_INT 0
23227: PPUSH
23228: PPUSH
23229: PPUSH
// begin tmp := [ ] ;
23230: LD_ADDR_VAR 0 3
23234: PUSH
23235: EMPTY
23236: ST_TO_ADDR
// for i := 1 to 6 do
23237: LD_ADDR_VAR 0 1
23241: PUSH
23242: DOUBLE
23243: LD_INT 1
23245: DEC
23246: ST_TO_ADDR
23247: LD_INT 6
23249: PUSH
23250: FOR_TO
23251: IFFALSE 23356
// begin uc_nation := nation_nature ;
23253: LD_ADDR_OWVAR 21
23257: PUSH
23258: LD_INT 0
23260: ST_TO_ADDR
// uc_side := 0 ;
23261: LD_ADDR_OWVAR 20
23265: PUSH
23266: LD_INT 0
23268: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23269: LD_ADDR_OWVAR 29
23273: PUSH
23274: LD_INT 12
23276: PUSH
23277: LD_INT 12
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: ST_TO_ADDR
// hc_agressivity := 20 ;
23284: LD_ADDR_OWVAR 35
23288: PUSH
23289: LD_INT 20
23291: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23292: LD_ADDR_OWVAR 28
23296: PUSH
23297: LD_INT 17
23299: ST_TO_ADDR
// hc_gallery :=  ;
23300: LD_ADDR_OWVAR 33
23304: PUSH
23305: LD_STRING 
23307: ST_TO_ADDR
// hc_name :=  ;
23308: LD_ADDR_OWVAR 26
23312: PUSH
23313: LD_STRING 
23315: ST_TO_ADDR
// un := CreateHuman ;
23316: LD_ADDR_VAR 0 2
23320: PUSH
23321: CALL_OW 44
23325: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23326: LD_VAR 0 2
23330: PPUSH
23331: LD_INT 1
23333: PPUSH
23334: CALL_OW 51
// tmp := tmp ^ un ;
23338: LD_ADDR_VAR 0 3
23342: PUSH
23343: LD_VAR 0 3
23347: PUSH
23348: LD_VAR 0 2
23352: ADD
23353: ST_TO_ADDR
// end ;
23354: GO 23250
23356: POP
23357: POP
// repeat wait ( 0 0$1 ) ;
23358: LD_INT 35
23360: PPUSH
23361: CALL_OW 67
// for un in tmp do
23365: LD_ADDR_VAR 0 2
23369: PUSH
23370: LD_VAR 0 3
23374: PUSH
23375: FOR_IN
23376: IFFALSE 23450
// begin if IsDead ( un ) then
23378: LD_VAR 0 2
23382: PPUSH
23383: CALL_OW 301
23387: IFFALSE 23407
// begin tmp := tmp diff un ;
23389: LD_ADDR_VAR 0 3
23393: PUSH
23394: LD_VAR 0 3
23398: PUSH
23399: LD_VAR 0 2
23403: DIFF
23404: ST_TO_ADDR
// continue ;
23405: GO 23375
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23407: LD_VAR 0 2
23411: PPUSH
23412: LD_INT 3
23414: PUSH
23415: LD_INT 22
23417: PUSH
23418: LD_INT 0
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PPUSH
23429: CALL_OW 69
23433: PPUSH
23434: LD_VAR 0 2
23438: PPUSH
23439: CALL_OW 74
23443: PPUSH
23444: CALL_OW 115
// end ;
23448: GO 23375
23450: POP
23451: POP
// until not tmp ;
23452: LD_VAR 0 3
23456: NOT
23457: IFFALSE 23358
// end ;
23459: PPOPN 3
23461: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23462: LD_EXP 51
23466: PUSH
23467: LD_EXP 76
23471: AND
23472: IFFALSE 23526
23474: GO 23476
23476: DISABLE
// begin ToLua ( displayTroll(); ) ;
23477: LD_STRING displayTroll();
23479: PPUSH
23480: CALL_OW 559
// wait ( 3 3$00 ) ;
23484: LD_INT 6300
23486: PPUSH
23487: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23491: LD_STRING hideTroll();
23493: PPUSH
23494: CALL_OW 559
// wait ( 1 1$00 ) ;
23498: LD_INT 2100
23500: PPUSH
23501: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23505: LD_STRING displayTroll();
23507: PPUSH
23508: CALL_OW 559
// wait ( 1 1$00 ) ;
23512: LD_INT 2100
23514: PPUSH
23515: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23519: LD_STRING hideTroll();
23521: PPUSH
23522: CALL_OW 559
// end ;
23526: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23527: LD_EXP 51
23531: PUSH
23532: LD_EXP 77
23536: AND
23537: IFFALSE 23600
23539: GO 23541
23541: DISABLE
23542: LD_INT 0
23544: PPUSH
// begin p := 0 ;
23545: LD_ADDR_VAR 0 1
23549: PUSH
23550: LD_INT 0
23552: ST_TO_ADDR
// repeat game_speed := 1 ;
23553: LD_ADDR_OWVAR 65
23557: PUSH
23558: LD_INT 1
23560: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23561: LD_INT 35
23563: PPUSH
23564: CALL_OW 67
// p := p + 1 ;
23568: LD_ADDR_VAR 0 1
23572: PUSH
23573: LD_VAR 0 1
23577: PUSH
23578: LD_INT 1
23580: PLUS
23581: ST_TO_ADDR
// until p >= 60 ;
23582: LD_VAR 0 1
23586: PUSH
23587: LD_INT 60
23589: GREATEREQUAL
23590: IFFALSE 23553
// game_speed := 4 ;
23592: LD_ADDR_OWVAR 65
23596: PUSH
23597: LD_INT 4
23599: ST_TO_ADDR
// end ;
23600: PPOPN 1
23602: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23603: LD_EXP 51
23607: PUSH
23608: LD_EXP 78
23612: AND
23613: IFFALSE 23759
23615: GO 23617
23617: DISABLE
23618: LD_INT 0
23620: PPUSH
23621: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23622: LD_ADDR_VAR 0 1
23626: PUSH
23627: LD_INT 22
23629: PUSH
23630: LD_OWVAR 2
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 2
23641: PUSH
23642: LD_INT 30
23644: PUSH
23645: LD_INT 0
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: LD_INT 30
23654: PUSH
23655: LD_INT 1
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: LIST
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: PPUSH
23671: CALL_OW 69
23675: ST_TO_ADDR
// if not depot then
23676: LD_VAR 0 1
23680: NOT
23681: IFFALSE 23685
// exit ;
23683: GO 23759
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23685: LD_ADDR_VAR 0 2
23689: PUSH
23690: LD_VAR 0 1
23694: PUSH
23695: LD_INT 1
23697: PPUSH
23698: LD_VAR 0 1
23702: PPUSH
23703: CALL_OW 12
23707: ARRAY
23708: PPUSH
23709: CALL_OW 274
23713: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23714: LD_VAR 0 2
23718: PPUSH
23719: LD_INT 1
23721: PPUSH
23722: LD_INT 0
23724: PPUSH
23725: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23729: LD_VAR 0 2
23733: PPUSH
23734: LD_INT 2
23736: PPUSH
23737: LD_INT 0
23739: PPUSH
23740: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23744: LD_VAR 0 2
23748: PPUSH
23749: LD_INT 3
23751: PPUSH
23752: LD_INT 0
23754: PPUSH
23755: CALL_OW 277
// end ;
23759: PPOPN 2
23761: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23762: LD_EXP 51
23766: PUSH
23767: LD_EXP 79
23771: AND
23772: IFFALSE 23869
23774: GO 23776
23776: DISABLE
23777: LD_INT 0
23779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23780: LD_ADDR_VAR 0 1
23784: PUSH
23785: LD_INT 22
23787: PUSH
23788: LD_OWVAR 2
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 21
23799: PUSH
23800: LD_INT 1
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: LD_INT 3
23809: PUSH
23810: LD_INT 23
23812: PUSH
23813: LD_INT 0
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: LIST
23828: PPUSH
23829: CALL_OW 69
23833: ST_TO_ADDR
// if not tmp then
23834: LD_VAR 0 1
23838: NOT
23839: IFFALSE 23843
// exit ;
23841: GO 23869
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23843: LD_VAR 0 1
23847: PUSH
23848: LD_INT 1
23850: PPUSH
23851: LD_VAR 0 1
23855: PPUSH
23856: CALL_OW 12
23860: ARRAY
23861: PPUSH
23862: LD_INT 200
23864: PPUSH
23865: CALL_OW 234
// end ;
23869: PPOPN 1
23871: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23872: LD_EXP 51
23876: PUSH
23877: LD_EXP 80
23881: AND
23882: IFFALSE 23961
23884: GO 23886
23886: DISABLE
23887: LD_INT 0
23889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23890: LD_ADDR_VAR 0 1
23894: PUSH
23895: LD_INT 22
23897: PUSH
23898: LD_OWVAR 2
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 21
23909: PUSH
23910: LD_INT 2
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PPUSH
23921: CALL_OW 69
23925: ST_TO_ADDR
// if not tmp then
23926: LD_VAR 0 1
23930: NOT
23931: IFFALSE 23935
// exit ;
23933: GO 23961
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23935: LD_VAR 0 1
23939: PUSH
23940: LD_INT 1
23942: PPUSH
23943: LD_VAR 0 1
23947: PPUSH
23948: CALL_OW 12
23952: ARRAY
23953: PPUSH
23954: LD_INT 60
23956: PPUSH
23957: CALL_OW 234
// end ;
23961: PPOPN 1
23963: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23964: LD_EXP 51
23968: PUSH
23969: LD_EXP 81
23973: AND
23974: IFFALSE 24073
23976: GO 23978
23978: DISABLE
23979: LD_INT 0
23981: PPUSH
23982: PPUSH
// begin enable ;
23983: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23984: LD_ADDR_VAR 0 1
23988: PUSH
23989: LD_INT 22
23991: PUSH
23992: LD_OWVAR 2
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: LD_INT 61
24003: PUSH
24004: EMPTY
24005: LIST
24006: PUSH
24007: LD_INT 33
24009: PUSH
24010: LD_INT 2
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: LIST
24021: PPUSH
24022: CALL_OW 69
24026: ST_TO_ADDR
// if not tmp then
24027: LD_VAR 0 1
24031: NOT
24032: IFFALSE 24036
// exit ;
24034: GO 24073
// for i in tmp do
24036: LD_ADDR_VAR 0 2
24040: PUSH
24041: LD_VAR 0 1
24045: PUSH
24046: FOR_IN
24047: IFFALSE 24071
// if IsControledBy ( i ) then
24049: LD_VAR 0 2
24053: PPUSH
24054: CALL_OW 312
24058: IFFALSE 24069
// ComUnlink ( i ) ;
24060: LD_VAR 0 2
24064: PPUSH
24065: CALL_OW 136
24069: GO 24046
24071: POP
24072: POP
// end ;
24073: PPOPN 2
24075: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24076: LD_EXP 51
24080: PUSH
24081: LD_EXP 82
24085: AND
24086: IFFALSE 24226
24088: GO 24090
24090: DISABLE
24091: LD_INT 0
24093: PPUSH
24094: PPUSH
// begin ToLua ( displayPowell(); ) ;
24095: LD_STRING displayPowell();
24097: PPUSH
24098: CALL_OW 559
// uc_side := 0 ;
24102: LD_ADDR_OWVAR 20
24106: PUSH
24107: LD_INT 0
24109: ST_TO_ADDR
// uc_nation := 2 ;
24110: LD_ADDR_OWVAR 21
24114: PUSH
24115: LD_INT 2
24117: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24118: LD_ADDR_OWVAR 37
24122: PUSH
24123: LD_INT 14
24125: ST_TO_ADDR
// vc_engine := engine_siberite ;
24126: LD_ADDR_OWVAR 39
24130: PUSH
24131: LD_INT 3
24133: ST_TO_ADDR
// vc_control := control_apeman ;
24134: LD_ADDR_OWVAR 38
24138: PUSH
24139: LD_INT 5
24141: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24142: LD_ADDR_OWVAR 40
24146: PUSH
24147: LD_INT 29
24149: ST_TO_ADDR
// un := CreateVehicle ;
24150: LD_ADDR_VAR 0 2
24154: PUSH
24155: CALL_OW 45
24159: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24160: LD_VAR 0 2
24164: PPUSH
24165: LD_INT 1
24167: PPUSH
24168: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24172: LD_INT 35
24174: PPUSH
24175: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24179: LD_VAR 0 2
24183: PPUSH
24184: LD_INT 22
24186: PUSH
24187: LD_OWVAR 2
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PPUSH
24196: CALL_OW 69
24200: PPUSH
24201: LD_VAR 0 2
24205: PPUSH
24206: CALL_OW 74
24210: PPUSH
24211: CALL_OW 115
// until IsDead ( un ) ;
24215: LD_VAR 0 2
24219: PPUSH
24220: CALL_OW 301
24224: IFFALSE 24172
// end ;
24226: PPOPN 2
24228: END
// every 0 0$1 trigger StreamModeActive and sStu do
24229: LD_EXP 51
24233: PUSH
24234: LD_EXP 90
24238: AND
24239: IFFALSE 24255
24241: GO 24243
24243: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24244: LD_STRING displayStucuk();
24246: PPUSH
24247: CALL_OW 559
// ResetFog ;
24251: CALL_OW 335
// end ;
24255: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24256: LD_EXP 51
24260: PUSH
24261: LD_EXP 83
24265: AND
24266: IFFALSE 24407
24268: GO 24270
24270: DISABLE
24271: LD_INT 0
24273: PPUSH
24274: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24275: LD_ADDR_VAR 0 2
24279: PUSH
24280: LD_INT 22
24282: PUSH
24283: LD_OWVAR 2
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PUSH
24292: LD_INT 21
24294: PUSH
24295: LD_INT 1
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PPUSH
24306: CALL_OW 69
24310: ST_TO_ADDR
// if not tmp then
24311: LD_VAR 0 2
24315: NOT
24316: IFFALSE 24320
// exit ;
24318: GO 24407
// un := tmp [ rand ( 1 , tmp ) ] ;
24320: LD_ADDR_VAR 0 1
24324: PUSH
24325: LD_VAR 0 2
24329: PUSH
24330: LD_INT 1
24332: PPUSH
24333: LD_VAR 0 2
24337: PPUSH
24338: CALL_OW 12
24342: ARRAY
24343: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24344: LD_VAR 0 1
24348: PPUSH
24349: LD_INT 0
24351: PPUSH
24352: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24356: LD_VAR 0 1
24360: PPUSH
24361: LD_OWVAR 3
24365: PUSH
24366: LD_VAR 0 1
24370: DIFF
24371: PPUSH
24372: LD_VAR 0 1
24376: PPUSH
24377: CALL_OW 74
24381: PPUSH
24382: CALL_OW 115
// wait ( 0 0$20 ) ;
24386: LD_INT 700
24388: PPUSH
24389: CALL_OW 67
// SetSide ( un , your_side ) ;
24393: LD_VAR 0 1
24397: PPUSH
24398: LD_OWVAR 2
24402: PPUSH
24403: CALL_OW 235
// end ;
24407: PPOPN 2
24409: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24410: LD_EXP 51
24414: PUSH
24415: LD_EXP 84
24419: AND
24420: IFFALSE 24526
24422: GO 24424
24424: DISABLE
24425: LD_INT 0
24427: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24428: LD_ADDR_VAR 0 1
24432: PUSH
24433: LD_INT 22
24435: PUSH
24436: LD_OWVAR 2
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 2
24447: PUSH
24448: LD_INT 30
24450: PUSH
24451: LD_INT 0
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: LD_INT 30
24460: PUSH
24461: LD_INT 1
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: LIST
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PPUSH
24477: CALL_OW 69
24481: ST_TO_ADDR
// if not depot then
24482: LD_VAR 0 1
24486: NOT
24487: IFFALSE 24491
// exit ;
24489: GO 24526
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24491: LD_VAR 0 1
24495: PUSH
24496: LD_INT 1
24498: ARRAY
24499: PPUSH
24500: CALL_OW 250
24504: PPUSH
24505: LD_VAR 0 1
24509: PUSH
24510: LD_INT 1
24512: ARRAY
24513: PPUSH
24514: CALL_OW 251
24518: PPUSH
24519: LD_INT 70
24521: PPUSH
24522: CALL_OW 495
// end ;
24526: PPOPN 1
24528: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24529: LD_EXP 51
24533: PUSH
24534: LD_EXP 85
24538: AND
24539: IFFALSE 24750
24541: GO 24543
24543: DISABLE
24544: LD_INT 0
24546: PPUSH
24547: PPUSH
24548: PPUSH
24549: PPUSH
24550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24551: LD_ADDR_VAR 0 5
24555: PUSH
24556: LD_INT 22
24558: PUSH
24559: LD_OWVAR 2
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 21
24570: PUSH
24571: LD_INT 1
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PPUSH
24582: CALL_OW 69
24586: ST_TO_ADDR
// if not tmp then
24587: LD_VAR 0 5
24591: NOT
24592: IFFALSE 24596
// exit ;
24594: GO 24750
// for i in tmp do
24596: LD_ADDR_VAR 0 1
24600: PUSH
24601: LD_VAR 0 5
24605: PUSH
24606: FOR_IN
24607: IFFALSE 24748
// begin d := rand ( 0 , 5 ) ;
24609: LD_ADDR_VAR 0 4
24613: PUSH
24614: LD_INT 0
24616: PPUSH
24617: LD_INT 5
24619: PPUSH
24620: CALL_OW 12
24624: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24625: LD_ADDR_VAR 0 2
24629: PUSH
24630: LD_VAR 0 1
24634: PPUSH
24635: CALL_OW 250
24639: PPUSH
24640: LD_VAR 0 4
24644: PPUSH
24645: LD_INT 3
24647: PPUSH
24648: LD_INT 12
24650: PPUSH
24651: CALL_OW 12
24655: PPUSH
24656: CALL_OW 272
24660: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24661: LD_ADDR_VAR 0 3
24665: PUSH
24666: LD_VAR 0 1
24670: PPUSH
24671: CALL_OW 251
24675: PPUSH
24676: LD_VAR 0 4
24680: PPUSH
24681: LD_INT 3
24683: PPUSH
24684: LD_INT 12
24686: PPUSH
24687: CALL_OW 12
24691: PPUSH
24692: CALL_OW 273
24696: ST_TO_ADDR
// if ValidHex ( x , y ) then
24697: LD_VAR 0 2
24701: PPUSH
24702: LD_VAR 0 3
24706: PPUSH
24707: CALL_OW 488
24711: IFFALSE 24746
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24713: LD_VAR 0 1
24717: PPUSH
24718: LD_VAR 0 2
24722: PPUSH
24723: LD_VAR 0 3
24727: PPUSH
24728: LD_INT 3
24730: PPUSH
24731: LD_INT 6
24733: PPUSH
24734: CALL_OW 12
24738: PPUSH
24739: LD_INT 1
24741: PPUSH
24742: CALL_OW 483
// end ;
24746: GO 24606
24748: POP
24749: POP
// end ;
24750: PPOPN 5
24752: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24753: LD_EXP 51
24757: PUSH
24758: LD_EXP 86
24762: AND
24763: IFFALSE 24857
24765: GO 24767
24767: DISABLE
24768: LD_INT 0
24770: PPUSH
24771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24772: LD_ADDR_VAR 0 2
24776: PUSH
24777: LD_INT 22
24779: PUSH
24780: LD_OWVAR 2
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: LD_INT 32
24791: PUSH
24792: LD_INT 1
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PUSH
24799: LD_INT 21
24801: PUSH
24802: LD_INT 2
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: LIST
24813: PPUSH
24814: CALL_OW 69
24818: ST_TO_ADDR
// if not tmp then
24819: LD_VAR 0 2
24823: NOT
24824: IFFALSE 24828
// exit ;
24826: GO 24857
// for i in tmp do
24828: LD_ADDR_VAR 0 1
24832: PUSH
24833: LD_VAR 0 2
24837: PUSH
24838: FOR_IN
24839: IFFALSE 24855
// SetFuel ( i , 0 ) ;
24841: LD_VAR 0 1
24845: PPUSH
24846: LD_INT 0
24848: PPUSH
24849: CALL_OW 240
24853: GO 24838
24855: POP
24856: POP
// end ;
24857: PPOPN 2
24859: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24860: LD_EXP 51
24864: PUSH
24865: LD_EXP 87
24869: AND
24870: IFFALSE 24936
24872: GO 24874
24874: DISABLE
24875: LD_INT 0
24877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24878: LD_ADDR_VAR 0 1
24882: PUSH
24883: LD_INT 22
24885: PUSH
24886: LD_OWVAR 2
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 30
24897: PUSH
24898: LD_INT 29
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PPUSH
24909: CALL_OW 69
24913: ST_TO_ADDR
// if not tmp then
24914: LD_VAR 0 1
24918: NOT
24919: IFFALSE 24923
// exit ;
24921: GO 24936
// DestroyUnit ( tmp [ 1 ] ) ;
24923: LD_VAR 0 1
24927: PUSH
24928: LD_INT 1
24930: ARRAY
24931: PPUSH
24932: CALL_OW 65
// end ;
24936: PPOPN 1
24938: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24939: LD_EXP 51
24943: PUSH
24944: LD_EXP 89
24948: AND
24949: IFFALSE 25078
24951: GO 24953
24953: DISABLE
24954: LD_INT 0
24956: PPUSH
// begin uc_side := 0 ;
24957: LD_ADDR_OWVAR 20
24961: PUSH
24962: LD_INT 0
24964: ST_TO_ADDR
// uc_nation := nation_arabian ;
24965: LD_ADDR_OWVAR 21
24969: PUSH
24970: LD_INT 2
24972: ST_TO_ADDR
// hc_gallery :=  ;
24973: LD_ADDR_OWVAR 33
24977: PUSH
24978: LD_STRING 
24980: ST_TO_ADDR
// hc_name :=  ;
24981: LD_ADDR_OWVAR 26
24985: PUSH
24986: LD_STRING 
24988: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24989: LD_INT 1
24991: PPUSH
24992: LD_INT 11
24994: PPUSH
24995: LD_INT 10
24997: PPUSH
24998: CALL_OW 380
// un := CreateHuman ;
25002: LD_ADDR_VAR 0 1
25006: PUSH
25007: CALL_OW 44
25011: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25012: LD_VAR 0 1
25016: PPUSH
25017: LD_INT 1
25019: PPUSH
25020: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25024: LD_INT 35
25026: PPUSH
25027: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25031: LD_VAR 0 1
25035: PPUSH
25036: LD_INT 22
25038: PUSH
25039: LD_OWVAR 2
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PPUSH
25048: CALL_OW 69
25052: PPUSH
25053: LD_VAR 0 1
25057: PPUSH
25058: CALL_OW 74
25062: PPUSH
25063: CALL_OW 115
// until IsDead ( un ) ;
25067: LD_VAR 0 1
25071: PPUSH
25072: CALL_OW 301
25076: IFFALSE 25024
// end ;
25078: PPOPN 1
25080: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25081: LD_EXP 51
25085: PUSH
25086: LD_EXP 91
25090: AND
25091: IFFALSE 25103
25093: GO 25095
25095: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25096: LD_STRING earthquake(getX(game), 0, 32)
25098: PPUSH
25099: CALL_OW 559
25103: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25104: LD_EXP 51
25108: PUSH
25109: LD_EXP 92
25113: AND
25114: IFFALSE 25205
25116: GO 25118
25118: DISABLE
25119: LD_INT 0
25121: PPUSH
// begin enable ;
25122: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25123: LD_ADDR_VAR 0 1
25127: PUSH
25128: LD_INT 22
25130: PUSH
25131: LD_OWVAR 2
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 21
25142: PUSH
25143: LD_INT 2
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 33
25152: PUSH
25153: LD_INT 3
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: LIST
25164: PPUSH
25165: CALL_OW 69
25169: ST_TO_ADDR
// if not tmp then
25170: LD_VAR 0 1
25174: NOT
25175: IFFALSE 25179
// exit ;
25177: GO 25205
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25179: LD_VAR 0 1
25183: PUSH
25184: LD_INT 1
25186: PPUSH
25187: LD_VAR 0 1
25191: PPUSH
25192: CALL_OW 12
25196: ARRAY
25197: PPUSH
25198: LD_INT 1
25200: PPUSH
25201: CALL_OW 234
// end ;
25205: PPOPN 1
25207: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25208: LD_EXP 51
25212: PUSH
25213: LD_EXP 93
25217: AND
25218: IFFALSE 25359
25220: GO 25222
25222: DISABLE
25223: LD_INT 0
25225: PPUSH
25226: PPUSH
25227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25228: LD_ADDR_VAR 0 3
25232: PUSH
25233: LD_INT 22
25235: PUSH
25236: LD_OWVAR 2
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 25
25247: PUSH
25248: LD_INT 1
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PPUSH
25259: CALL_OW 69
25263: ST_TO_ADDR
// if not tmp then
25264: LD_VAR 0 3
25268: NOT
25269: IFFALSE 25273
// exit ;
25271: GO 25359
// un := tmp [ rand ( 1 , tmp ) ] ;
25273: LD_ADDR_VAR 0 2
25277: PUSH
25278: LD_VAR 0 3
25282: PUSH
25283: LD_INT 1
25285: PPUSH
25286: LD_VAR 0 3
25290: PPUSH
25291: CALL_OW 12
25295: ARRAY
25296: ST_TO_ADDR
// if Crawls ( un ) then
25297: LD_VAR 0 2
25301: PPUSH
25302: CALL_OW 318
25306: IFFALSE 25317
// ComWalk ( un ) ;
25308: LD_VAR 0 2
25312: PPUSH
25313: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25317: LD_VAR 0 2
25321: PPUSH
25322: LD_INT 9
25324: PPUSH
25325: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25329: LD_INT 28
25331: PPUSH
25332: LD_OWVAR 2
25336: PPUSH
25337: LD_INT 2
25339: PPUSH
25340: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25344: LD_INT 29
25346: PPUSH
25347: LD_OWVAR 2
25351: PPUSH
25352: LD_INT 2
25354: PPUSH
25355: CALL_OW 322
// end ;
25359: PPOPN 3
25361: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25362: LD_EXP 51
25366: PUSH
25367: LD_EXP 94
25371: AND
25372: IFFALSE 25483
25374: GO 25376
25376: DISABLE
25377: LD_INT 0
25379: PPUSH
25380: PPUSH
25381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25382: LD_ADDR_VAR 0 3
25386: PUSH
25387: LD_INT 22
25389: PUSH
25390: LD_OWVAR 2
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: LD_INT 25
25401: PUSH
25402: LD_INT 1
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PPUSH
25413: CALL_OW 69
25417: ST_TO_ADDR
// if not tmp then
25418: LD_VAR 0 3
25422: NOT
25423: IFFALSE 25427
// exit ;
25425: GO 25483
// un := tmp [ rand ( 1 , tmp ) ] ;
25427: LD_ADDR_VAR 0 2
25431: PUSH
25432: LD_VAR 0 3
25436: PUSH
25437: LD_INT 1
25439: PPUSH
25440: LD_VAR 0 3
25444: PPUSH
25445: CALL_OW 12
25449: ARRAY
25450: ST_TO_ADDR
// if Crawls ( un ) then
25451: LD_VAR 0 2
25455: PPUSH
25456: CALL_OW 318
25460: IFFALSE 25471
// ComWalk ( un ) ;
25462: LD_VAR 0 2
25466: PPUSH
25467: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25471: LD_VAR 0 2
25475: PPUSH
25476: LD_INT 8
25478: PPUSH
25479: CALL_OW 336
// end ;
25483: PPOPN 3
25485: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25486: LD_EXP 51
25490: PUSH
25491: LD_EXP 95
25495: AND
25496: IFFALSE 25640
25498: GO 25500
25500: DISABLE
25501: LD_INT 0
25503: PPUSH
25504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25505: LD_ADDR_VAR 0 2
25509: PUSH
25510: LD_INT 22
25512: PUSH
25513: LD_OWVAR 2
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 21
25524: PUSH
25525: LD_INT 2
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: LD_INT 2
25534: PUSH
25535: LD_INT 34
25537: PUSH
25538: LD_INT 12
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 34
25547: PUSH
25548: LD_INT 51
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 34
25557: PUSH
25558: LD_INT 32
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: LIST
25575: PPUSH
25576: CALL_OW 69
25580: ST_TO_ADDR
// if not tmp then
25581: LD_VAR 0 2
25585: NOT
25586: IFFALSE 25590
// exit ;
25588: GO 25640
// for i in tmp do
25590: LD_ADDR_VAR 0 1
25594: PUSH
25595: LD_VAR 0 2
25599: PUSH
25600: FOR_IN
25601: IFFALSE 25638
// if GetCargo ( i , mat_artifact ) = 0 then
25603: LD_VAR 0 1
25607: PPUSH
25608: LD_INT 4
25610: PPUSH
25611: CALL_OW 289
25615: PUSH
25616: LD_INT 0
25618: EQUAL
25619: IFFALSE 25636
// SetCargo ( i , mat_siberit , 100 ) ;
25621: LD_VAR 0 1
25625: PPUSH
25626: LD_INT 3
25628: PPUSH
25629: LD_INT 100
25631: PPUSH
25632: CALL_OW 290
25636: GO 25600
25638: POP
25639: POP
// end ;
25640: PPOPN 2
25642: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25643: LD_EXP 51
25647: PUSH
25648: LD_EXP 96
25652: AND
25653: IFFALSE 25836
25655: GO 25657
25657: DISABLE
25658: LD_INT 0
25660: PPUSH
25661: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25662: LD_ADDR_VAR 0 2
25666: PUSH
25667: LD_INT 22
25669: PUSH
25670: LD_OWVAR 2
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PPUSH
25679: CALL_OW 69
25683: ST_TO_ADDR
// if not tmp then
25684: LD_VAR 0 2
25688: NOT
25689: IFFALSE 25693
// exit ;
25691: GO 25836
// for i := 1 to 2 do
25693: LD_ADDR_VAR 0 1
25697: PUSH
25698: DOUBLE
25699: LD_INT 1
25701: DEC
25702: ST_TO_ADDR
25703: LD_INT 2
25705: PUSH
25706: FOR_TO
25707: IFFALSE 25834
// begin uc_side := your_side ;
25709: LD_ADDR_OWVAR 20
25713: PUSH
25714: LD_OWVAR 2
25718: ST_TO_ADDR
// uc_nation := nation_american ;
25719: LD_ADDR_OWVAR 21
25723: PUSH
25724: LD_INT 1
25726: ST_TO_ADDR
// vc_chassis := us_morphling ;
25727: LD_ADDR_OWVAR 37
25731: PUSH
25732: LD_INT 5
25734: ST_TO_ADDR
// vc_engine := engine_siberite ;
25735: LD_ADDR_OWVAR 39
25739: PUSH
25740: LD_INT 3
25742: ST_TO_ADDR
// vc_control := control_computer ;
25743: LD_ADDR_OWVAR 38
25747: PUSH
25748: LD_INT 3
25750: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25751: LD_ADDR_OWVAR 40
25755: PUSH
25756: LD_INT 10
25758: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25759: LD_VAR 0 2
25763: PUSH
25764: LD_INT 1
25766: ARRAY
25767: PPUSH
25768: CALL_OW 310
25772: NOT
25773: IFFALSE 25820
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25775: CALL_OW 45
25779: PPUSH
25780: LD_VAR 0 2
25784: PUSH
25785: LD_INT 1
25787: ARRAY
25788: PPUSH
25789: CALL_OW 250
25793: PPUSH
25794: LD_VAR 0 2
25798: PUSH
25799: LD_INT 1
25801: ARRAY
25802: PPUSH
25803: CALL_OW 251
25807: PPUSH
25808: LD_INT 12
25810: PPUSH
25811: LD_INT 1
25813: PPUSH
25814: CALL_OW 50
25818: GO 25832
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25820: CALL_OW 45
25824: PPUSH
25825: LD_INT 1
25827: PPUSH
25828: CALL_OW 51
// end ;
25832: GO 25706
25834: POP
25835: POP
// end ;
25836: PPOPN 2
25838: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25839: LD_EXP 51
25843: PUSH
25844: LD_EXP 97
25848: AND
25849: IFFALSE 26071
25851: GO 25853
25853: DISABLE
25854: LD_INT 0
25856: PPUSH
25857: PPUSH
25858: PPUSH
25859: PPUSH
25860: PPUSH
25861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25862: LD_ADDR_VAR 0 6
25866: PUSH
25867: LD_INT 22
25869: PUSH
25870: LD_OWVAR 2
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 21
25881: PUSH
25882: LD_INT 1
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: LD_INT 3
25891: PUSH
25892: LD_INT 23
25894: PUSH
25895: LD_INT 0
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: LIST
25910: PPUSH
25911: CALL_OW 69
25915: ST_TO_ADDR
// if not tmp then
25916: LD_VAR 0 6
25920: NOT
25921: IFFALSE 25925
// exit ;
25923: GO 26071
// s1 := rand ( 1 , 4 ) ;
25925: LD_ADDR_VAR 0 2
25929: PUSH
25930: LD_INT 1
25932: PPUSH
25933: LD_INT 4
25935: PPUSH
25936: CALL_OW 12
25940: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25941: LD_ADDR_VAR 0 4
25945: PUSH
25946: LD_VAR 0 6
25950: PUSH
25951: LD_INT 1
25953: ARRAY
25954: PPUSH
25955: LD_VAR 0 2
25959: PPUSH
25960: CALL_OW 259
25964: ST_TO_ADDR
// if s1 = 1 then
25965: LD_VAR 0 2
25969: PUSH
25970: LD_INT 1
25972: EQUAL
25973: IFFALSE 25993
// s2 := rand ( 2 , 4 ) else
25975: LD_ADDR_VAR 0 3
25979: PUSH
25980: LD_INT 2
25982: PPUSH
25983: LD_INT 4
25985: PPUSH
25986: CALL_OW 12
25990: ST_TO_ADDR
25991: GO 26001
// s2 := 1 ;
25993: LD_ADDR_VAR 0 3
25997: PUSH
25998: LD_INT 1
26000: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26001: LD_ADDR_VAR 0 5
26005: PUSH
26006: LD_VAR 0 6
26010: PUSH
26011: LD_INT 1
26013: ARRAY
26014: PPUSH
26015: LD_VAR 0 3
26019: PPUSH
26020: CALL_OW 259
26024: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26025: LD_VAR 0 6
26029: PUSH
26030: LD_INT 1
26032: ARRAY
26033: PPUSH
26034: LD_VAR 0 2
26038: PPUSH
26039: LD_VAR 0 5
26043: PPUSH
26044: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26048: LD_VAR 0 6
26052: PUSH
26053: LD_INT 1
26055: ARRAY
26056: PPUSH
26057: LD_VAR 0 3
26061: PPUSH
26062: LD_VAR 0 4
26066: PPUSH
26067: CALL_OW 237
// end ;
26071: PPOPN 6
26073: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26074: LD_EXP 51
26078: PUSH
26079: LD_EXP 98
26083: AND
26084: IFFALSE 26163
26086: GO 26088
26088: DISABLE
26089: LD_INT 0
26091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26092: LD_ADDR_VAR 0 1
26096: PUSH
26097: LD_INT 22
26099: PUSH
26100: LD_OWVAR 2
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 30
26111: PUSH
26112: LD_INT 3
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PPUSH
26123: CALL_OW 69
26127: ST_TO_ADDR
// if not tmp then
26128: LD_VAR 0 1
26132: NOT
26133: IFFALSE 26137
// exit ;
26135: GO 26163
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26137: LD_VAR 0 1
26141: PUSH
26142: LD_INT 1
26144: PPUSH
26145: LD_VAR 0 1
26149: PPUSH
26150: CALL_OW 12
26154: ARRAY
26155: PPUSH
26156: LD_INT 1
26158: PPUSH
26159: CALL_OW 234
// end ;
26163: PPOPN 1
26165: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26166: LD_EXP 51
26170: PUSH
26171: LD_EXP 99
26175: AND
26176: IFFALSE 26288
26178: GO 26180
26180: DISABLE
26181: LD_INT 0
26183: PPUSH
26184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26185: LD_ADDR_VAR 0 2
26189: PUSH
26190: LD_INT 22
26192: PUSH
26193: LD_OWVAR 2
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 2
26204: PUSH
26205: LD_INT 30
26207: PUSH
26208: LD_INT 27
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 30
26217: PUSH
26218: LD_INT 26
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 30
26227: PUSH
26228: LD_INT 28
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PPUSH
26245: CALL_OW 69
26249: ST_TO_ADDR
// if not tmp then
26250: LD_VAR 0 2
26254: NOT
26255: IFFALSE 26259
// exit ;
26257: GO 26288
// for i in tmp do
26259: LD_ADDR_VAR 0 1
26263: PUSH
26264: LD_VAR 0 2
26268: PUSH
26269: FOR_IN
26270: IFFALSE 26286
// SetLives ( i , 1 ) ;
26272: LD_VAR 0 1
26276: PPUSH
26277: LD_INT 1
26279: PPUSH
26280: CALL_OW 234
26284: GO 26269
26286: POP
26287: POP
// end ;
26288: PPOPN 2
26290: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26291: LD_EXP 51
26295: PUSH
26296: LD_EXP 100
26300: AND
26301: IFFALSE 26575
26303: GO 26305
26305: DISABLE
26306: LD_INT 0
26308: PPUSH
26309: PPUSH
26310: PPUSH
// begin i := rand ( 1 , 7 ) ;
26311: LD_ADDR_VAR 0 1
26315: PUSH
26316: LD_INT 1
26318: PPUSH
26319: LD_INT 7
26321: PPUSH
26322: CALL_OW 12
26326: ST_TO_ADDR
// case i of 1 :
26327: LD_VAR 0 1
26331: PUSH
26332: LD_INT 1
26334: DOUBLE
26335: EQUAL
26336: IFTRUE 26340
26338: GO 26350
26340: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26341: LD_STRING earthquake(getX(game), 0, 32)
26343: PPUSH
26344: CALL_OW 559
26348: GO 26575
26350: LD_INT 2
26352: DOUBLE
26353: EQUAL
26354: IFTRUE 26358
26356: GO 26372
26358: POP
// begin ToLua ( displayStucuk(); ) ;
26359: LD_STRING displayStucuk();
26361: PPUSH
26362: CALL_OW 559
// ResetFog ;
26366: CALL_OW 335
// end ; 3 :
26370: GO 26575
26372: LD_INT 3
26374: DOUBLE
26375: EQUAL
26376: IFTRUE 26380
26378: GO 26484
26380: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26381: LD_ADDR_VAR 0 2
26385: PUSH
26386: LD_INT 22
26388: PUSH
26389: LD_OWVAR 2
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: LD_INT 25
26400: PUSH
26401: LD_INT 1
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PPUSH
26412: CALL_OW 69
26416: ST_TO_ADDR
// if not tmp then
26417: LD_VAR 0 2
26421: NOT
26422: IFFALSE 26426
// exit ;
26424: GO 26575
// un := tmp [ rand ( 1 , tmp ) ] ;
26426: LD_ADDR_VAR 0 3
26430: PUSH
26431: LD_VAR 0 2
26435: PUSH
26436: LD_INT 1
26438: PPUSH
26439: LD_VAR 0 2
26443: PPUSH
26444: CALL_OW 12
26448: ARRAY
26449: ST_TO_ADDR
// if Crawls ( un ) then
26450: LD_VAR 0 3
26454: PPUSH
26455: CALL_OW 318
26459: IFFALSE 26470
// ComWalk ( un ) ;
26461: LD_VAR 0 3
26465: PPUSH
26466: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26470: LD_VAR 0 3
26474: PPUSH
26475: LD_INT 8
26477: PPUSH
26478: CALL_OW 336
// end ; 4 :
26482: GO 26575
26484: LD_INT 4
26486: DOUBLE
26487: EQUAL
26488: IFTRUE 26492
26490: GO 26553
26492: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26493: LD_ADDR_VAR 0 2
26497: PUSH
26498: LD_INT 22
26500: PUSH
26501: LD_OWVAR 2
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 30
26512: PUSH
26513: LD_INT 29
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PPUSH
26524: CALL_OW 69
26528: ST_TO_ADDR
// if not tmp then
26529: LD_VAR 0 2
26533: NOT
26534: IFFALSE 26538
// exit ;
26536: GO 26575
// DestroyUnit ( tmp [ 1 ] ) ;
26538: LD_VAR 0 2
26542: PUSH
26543: LD_INT 1
26545: ARRAY
26546: PPUSH
26547: CALL_OW 65
// end ; 5 .. 7 :
26551: GO 26575
26553: LD_INT 5
26555: DOUBLE
26556: GREATEREQUAL
26557: IFFALSE 26565
26559: LD_INT 7
26561: DOUBLE
26562: LESSEQUAL
26563: IFTRUE 26567
26565: GO 26574
26567: POP
// StreamSibBomb ; end ;
26568: CALL 22825 0 0
26572: GO 26575
26574: POP
// end ;
26575: PPOPN 3
26577: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26578: LD_EXP 51
26582: PUSH
26583: LD_EXP 101
26587: AND
26588: IFFALSE 26744
26590: GO 26592
26592: DISABLE
26593: LD_INT 0
26595: PPUSH
26596: PPUSH
26597: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26598: LD_ADDR_VAR 0 2
26602: PUSH
26603: LD_INT 81
26605: PUSH
26606: LD_OWVAR 2
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 2
26617: PUSH
26618: LD_INT 21
26620: PUSH
26621: LD_INT 1
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: LD_INT 21
26630: PUSH
26631: LD_INT 2
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: LIST
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PPUSH
26647: CALL_OW 69
26651: ST_TO_ADDR
// if not tmp then
26652: LD_VAR 0 2
26656: NOT
26657: IFFALSE 26661
// exit ;
26659: GO 26744
// p := 0 ;
26661: LD_ADDR_VAR 0 3
26665: PUSH
26666: LD_INT 0
26668: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26669: LD_INT 35
26671: PPUSH
26672: CALL_OW 67
// p := p + 1 ;
26676: LD_ADDR_VAR 0 3
26680: PUSH
26681: LD_VAR 0 3
26685: PUSH
26686: LD_INT 1
26688: PLUS
26689: ST_TO_ADDR
// for i in tmp do
26690: LD_ADDR_VAR 0 1
26694: PUSH
26695: LD_VAR 0 2
26699: PUSH
26700: FOR_IN
26701: IFFALSE 26732
// if GetLives ( i ) < 1000 then
26703: LD_VAR 0 1
26707: PPUSH
26708: CALL_OW 256
26712: PUSH
26713: LD_INT 1000
26715: LESS
26716: IFFALSE 26730
// SetLives ( i , 1000 ) ;
26718: LD_VAR 0 1
26722: PPUSH
26723: LD_INT 1000
26725: PPUSH
26726: CALL_OW 234
26730: GO 26700
26732: POP
26733: POP
// until p > 20 ;
26734: LD_VAR 0 3
26738: PUSH
26739: LD_INT 20
26741: GREATER
26742: IFFALSE 26669
// end ;
26744: PPOPN 3
26746: END
// every 0 0$1 trigger StreamModeActive and sTime do
26747: LD_EXP 51
26751: PUSH
26752: LD_EXP 102
26756: AND
26757: IFFALSE 26792
26759: GO 26761
26761: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26762: LD_INT 28
26764: PPUSH
26765: LD_OWVAR 2
26769: PPUSH
26770: LD_INT 2
26772: PPUSH
26773: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26777: LD_INT 30
26779: PPUSH
26780: LD_OWVAR 2
26784: PPUSH
26785: LD_INT 2
26787: PPUSH
26788: CALL_OW 322
// end ;
26792: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26793: LD_EXP 51
26797: PUSH
26798: LD_EXP 103
26802: AND
26803: IFFALSE 26924
26805: GO 26807
26807: DISABLE
26808: LD_INT 0
26810: PPUSH
26811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26812: LD_ADDR_VAR 0 2
26816: PUSH
26817: LD_INT 22
26819: PUSH
26820: LD_OWVAR 2
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 21
26831: PUSH
26832: LD_INT 1
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 3
26841: PUSH
26842: LD_INT 23
26844: PUSH
26845: LD_INT 0
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: LIST
26860: PPUSH
26861: CALL_OW 69
26865: ST_TO_ADDR
// if not tmp then
26866: LD_VAR 0 2
26870: NOT
26871: IFFALSE 26875
// exit ;
26873: GO 26924
// for i in tmp do
26875: LD_ADDR_VAR 0 1
26879: PUSH
26880: LD_VAR 0 2
26884: PUSH
26885: FOR_IN
26886: IFFALSE 26922
// begin if Crawls ( i ) then
26888: LD_VAR 0 1
26892: PPUSH
26893: CALL_OW 318
26897: IFFALSE 26908
// ComWalk ( i ) ;
26899: LD_VAR 0 1
26903: PPUSH
26904: CALL_OW 138
// SetClass ( i , 2 ) ;
26908: LD_VAR 0 1
26912: PPUSH
26913: LD_INT 2
26915: PPUSH
26916: CALL_OW 336
// end ;
26920: GO 26885
26922: POP
26923: POP
// end ;
26924: PPOPN 2
26926: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26927: LD_EXP 51
26931: PUSH
26932: LD_EXP 104
26936: AND
26937: IFFALSE 27218
26939: GO 26941
26941: DISABLE
26942: LD_INT 0
26944: PPUSH
26945: PPUSH
26946: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26947: LD_OWVAR 2
26951: PPUSH
26952: LD_INT 9
26954: PPUSH
26955: LD_INT 1
26957: PPUSH
26958: LD_INT 1
26960: PPUSH
26961: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26965: LD_INT 9
26967: PPUSH
26968: LD_OWVAR 2
26972: PPUSH
26973: CALL_OW 343
// uc_side := 9 ;
26977: LD_ADDR_OWVAR 20
26981: PUSH
26982: LD_INT 9
26984: ST_TO_ADDR
// uc_nation := 2 ;
26985: LD_ADDR_OWVAR 21
26989: PUSH
26990: LD_INT 2
26992: ST_TO_ADDR
// hc_name := Dark Warrior ;
26993: LD_ADDR_OWVAR 26
26997: PUSH
26998: LD_STRING Dark Warrior
27000: ST_TO_ADDR
// hc_gallery :=  ;
27001: LD_ADDR_OWVAR 33
27005: PUSH
27006: LD_STRING 
27008: ST_TO_ADDR
// hc_noskilllimit := true ;
27009: LD_ADDR_OWVAR 76
27013: PUSH
27014: LD_INT 1
27016: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27017: LD_ADDR_OWVAR 31
27021: PUSH
27022: LD_INT 30
27024: PUSH
27025: LD_INT 30
27027: PUSH
27028: LD_INT 30
27030: PUSH
27031: LD_INT 30
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: ST_TO_ADDR
// un := CreateHuman ;
27040: LD_ADDR_VAR 0 3
27044: PUSH
27045: CALL_OW 44
27049: ST_TO_ADDR
// hc_noskilllimit := false ;
27050: LD_ADDR_OWVAR 76
27054: PUSH
27055: LD_INT 0
27057: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27058: LD_VAR 0 3
27062: PPUSH
27063: LD_INT 1
27065: PPUSH
27066: CALL_OW 51
// p := 0 ;
27070: LD_ADDR_VAR 0 2
27074: PUSH
27075: LD_INT 0
27077: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27078: LD_INT 35
27080: PPUSH
27081: CALL_OW 67
// p := p + 1 ;
27085: LD_ADDR_VAR 0 2
27089: PUSH
27090: LD_VAR 0 2
27094: PUSH
27095: LD_INT 1
27097: PLUS
27098: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27099: LD_VAR 0 3
27103: PPUSH
27104: CALL_OW 256
27108: PUSH
27109: LD_INT 1000
27111: LESS
27112: IFFALSE 27126
// SetLives ( un , 1000 ) ;
27114: LD_VAR 0 3
27118: PPUSH
27119: LD_INT 1000
27121: PPUSH
27122: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27126: LD_VAR 0 3
27130: PPUSH
27131: LD_INT 81
27133: PUSH
27134: LD_OWVAR 2
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 91
27145: PUSH
27146: LD_VAR 0 3
27150: PUSH
27151: LD_INT 30
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: LIST
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PPUSH
27163: CALL_OW 69
27167: PPUSH
27168: LD_VAR 0 3
27172: PPUSH
27173: CALL_OW 74
27177: PPUSH
27178: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
27182: LD_VAR 0 2
27186: PUSH
27187: LD_INT 60
27189: GREATER
27190: PUSH
27191: LD_VAR 0 3
27195: PPUSH
27196: CALL_OW 301
27200: OR
27201: IFFALSE 27078
// if un then
27203: LD_VAR 0 3
27207: IFFALSE 27218
// RemoveUnit ( un ) ;
27209: LD_VAR 0 3
27213: PPUSH
27214: CALL_OW 64
// end ;
27218: PPOPN 3
27220: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27221: LD_INT 0
27223: PPUSH
// case cmd of 301 :
27224: LD_VAR 0 1
27228: PUSH
27229: LD_INT 301
27231: DOUBLE
27232: EQUAL
27233: IFTRUE 27237
27235: GO 27269
27237: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27238: LD_VAR 0 6
27242: PPUSH
27243: LD_VAR 0 7
27247: PPUSH
27248: LD_VAR 0 8
27252: PPUSH
27253: LD_VAR 0 4
27257: PPUSH
27258: LD_VAR 0 5
27262: PPUSH
27263: CALL 28470 0 5
27267: GO 27390
27269: LD_INT 302
27271: DOUBLE
27272: EQUAL
27273: IFTRUE 27277
27275: GO 27314
27277: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27278: LD_VAR 0 6
27282: PPUSH
27283: LD_VAR 0 7
27287: PPUSH
27288: LD_VAR 0 8
27292: PPUSH
27293: LD_VAR 0 9
27297: PPUSH
27298: LD_VAR 0 4
27302: PPUSH
27303: LD_VAR 0 5
27307: PPUSH
27308: CALL 28561 0 6
27312: GO 27390
27314: LD_INT 303
27316: DOUBLE
27317: EQUAL
27318: IFTRUE 27322
27320: GO 27359
27322: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27323: LD_VAR 0 6
27327: PPUSH
27328: LD_VAR 0 7
27332: PPUSH
27333: LD_VAR 0 8
27337: PPUSH
27338: LD_VAR 0 9
27342: PPUSH
27343: LD_VAR 0 4
27347: PPUSH
27348: LD_VAR 0 5
27352: PPUSH
27353: CALL 27395 0 6
27357: GO 27390
27359: LD_INT 304
27361: DOUBLE
27362: EQUAL
27363: IFTRUE 27367
27365: GO 27389
27367: POP
// hHackTeleport ( unit , x , y ) ; end ;
27368: LD_VAR 0 2
27372: PPUSH
27373: LD_VAR 0 4
27377: PPUSH
27378: LD_VAR 0 5
27382: PPUSH
27383: CALL 29154 0 3
27387: GO 27390
27389: POP
// end ;
27390: LD_VAR 0 12
27394: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27395: LD_INT 0
27397: PPUSH
27398: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27399: LD_VAR 0 1
27403: PUSH
27404: LD_INT 1
27406: LESS
27407: PUSH
27408: LD_VAR 0 1
27412: PUSH
27413: LD_INT 3
27415: GREATER
27416: OR
27417: PUSH
27418: LD_VAR 0 5
27422: PPUSH
27423: LD_VAR 0 6
27427: PPUSH
27428: CALL_OW 428
27432: OR
27433: IFFALSE 27437
// exit ;
27435: GO 28157
// uc_side := your_side ;
27437: LD_ADDR_OWVAR 20
27441: PUSH
27442: LD_OWVAR 2
27446: ST_TO_ADDR
// uc_nation := nation ;
27447: LD_ADDR_OWVAR 21
27451: PUSH
27452: LD_VAR 0 1
27456: ST_TO_ADDR
// bc_level = 1 ;
27457: LD_ADDR_OWVAR 43
27461: PUSH
27462: LD_INT 1
27464: ST_TO_ADDR
// case btype of 1 :
27465: LD_VAR 0 2
27469: PUSH
27470: LD_INT 1
27472: DOUBLE
27473: EQUAL
27474: IFTRUE 27478
27476: GO 27489
27478: POP
// bc_type := b_depot ; 2 :
27479: LD_ADDR_OWVAR 42
27483: PUSH
27484: LD_INT 0
27486: ST_TO_ADDR
27487: GO 28101
27489: LD_INT 2
27491: DOUBLE
27492: EQUAL
27493: IFTRUE 27497
27495: GO 27508
27497: POP
// bc_type := b_warehouse ; 3 :
27498: LD_ADDR_OWVAR 42
27502: PUSH
27503: LD_INT 1
27505: ST_TO_ADDR
27506: GO 28101
27508: LD_INT 3
27510: DOUBLE
27511: EQUAL
27512: IFTRUE 27516
27514: GO 27527
27516: POP
// bc_type := b_lab ; 4 .. 9 :
27517: LD_ADDR_OWVAR 42
27521: PUSH
27522: LD_INT 6
27524: ST_TO_ADDR
27525: GO 28101
27527: LD_INT 4
27529: DOUBLE
27530: GREATEREQUAL
27531: IFFALSE 27539
27533: LD_INT 9
27535: DOUBLE
27536: LESSEQUAL
27537: IFTRUE 27541
27539: GO 27593
27541: POP
// begin bc_type := b_lab_half ;
27542: LD_ADDR_OWVAR 42
27546: PUSH
27547: LD_INT 7
27549: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27550: LD_ADDR_OWVAR 44
27554: PUSH
27555: LD_INT 10
27557: PUSH
27558: LD_INT 11
27560: PUSH
27561: LD_INT 12
27563: PUSH
27564: LD_INT 15
27566: PUSH
27567: LD_INT 14
27569: PUSH
27570: LD_INT 13
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: PUSH
27581: LD_VAR 0 2
27585: PUSH
27586: LD_INT 3
27588: MINUS
27589: ARRAY
27590: ST_TO_ADDR
// end ; 10 .. 13 :
27591: GO 28101
27593: LD_INT 10
27595: DOUBLE
27596: GREATEREQUAL
27597: IFFALSE 27605
27599: LD_INT 13
27601: DOUBLE
27602: LESSEQUAL
27603: IFTRUE 27607
27605: GO 27684
27607: POP
// begin bc_type := b_lab_full ;
27608: LD_ADDR_OWVAR 42
27612: PUSH
27613: LD_INT 8
27615: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27616: LD_ADDR_OWVAR 44
27620: PUSH
27621: LD_INT 10
27623: PUSH
27624: LD_INT 12
27626: PUSH
27627: LD_INT 14
27629: PUSH
27630: LD_INT 13
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: PUSH
27639: LD_VAR 0 2
27643: PUSH
27644: LD_INT 9
27646: MINUS
27647: ARRAY
27648: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27649: LD_ADDR_OWVAR 45
27653: PUSH
27654: LD_INT 11
27656: PUSH
27657: LD_INT 15
27659: PUSH
27660: LD_INT 12
27662: PUSH
27663: LD_INT 15
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: PUSH
27672: LD_VAR 0 2
27676: PUSH
27677: LD_INT 9
27679: MINUS
27680: ARRAY
27681: ST_TO_ADDR
// end ; 14 :
27682: GO 28101
27684: LD_INT 14
27686: DOUBLE
27687: EQUAL
27688: IFTRUE 27692
27690: GO 27703
27692: POP
// bc_type := b_workshop ; 15 :
27693: LD_ADDR_OWVAR 42
27697: PUSH
27698: LD_INT 2
27700: ST_TO_ADDR
27701: GO 28101
27703: LD_INT 15
27705: DOUBLE
27706: EQUAL
27707: IFTRUE 27711
27709: GO 27722
27711: POP
// bc_type := b_factory ; 16 :
27712: LD_ADDR_OWVAR 42
27716: PUSH
27717: LD_INT 3
27719: ST_TO_ADDR
27720: GO 28101
27722: LD_INT 16
27724: DOUBLE
27725: EQUAL
27726: IFTRUE 27730
27728: GO 27741
27730: POP
// bc_type := b_ext_gun ; 17 :
27731: LD_ADDR_OWVAR 42
27735: PUSH
27736: LD_INT 17
27738: ST_TO_ADDR
27739: GO 28101
27741: LD_INT 17
27743: DOUBLE
27744: EQUAL
27745: IFTRUE 27749
27747: GO 27777
27749: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
27750: LD_ADDR_OWVAR 42
27754: PUSH
27755: LD_INT 19
27757: PUSH
27758: LD_INT 23
27760: PUSH
27761: LD_INT 19
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: LIST
27768: PUSH
27769: LD_VAR 0 1
27773: ARRAY
27774: ST_TO_ADDR
27775: GO 28101
27777: LD_INT 18
27779: DOUBLE
27780: EQUAL
27781: IFTRUE 27785
27783: GO 27796
27785: POP
// bc_type := b_ext_radar ; 19 :
27786: LD_ADDR_OWVAR 42
27790: PUSH
27791: LD_INT 20
27793: ST_TO_ADDR
27794: GO 28101
27796: LD_INT 19
27798: DOUBLE
27799: EQUAL
27800: IFTRUE 27804
27802: GO 27815
27804: POP
// bc_type := b_ext_radio ; 20 :
27805: LD_ADDR_OWVAR 42
27809: PUSH
27810: LD_INT 22
27812: ST_TO_ADDR
27813: GO 28101
27815: LD_INT 20
27817: DOUBLE
27818: EQUAL
27819: IFTRUE 27823
27821: GO 27834
27823: POP
// bc_type := b_ext_siberium ; 21 :
27824: LD_ADDR_OWVAR 42
27828: PUSH
27829: LD_INT 21
27831: ST_TO_ADDR
27832: GO 28101
27834: LD_INT 21
27836: DOUBLE
27837: EQUAL
27838: IFTRUE 27842
27840: GO 27853
27842: POP
// bc_type := b_ext_computer ; 22 :
27843: LD_ADDR_OWVAR 42
27847: PUSH
27848: LD_INT 24
27850: ST_TO_ADDR
27851: GO 28101
27853: LD_INT 22
27855: DOUBLE
27856: EQUAL
27857: IFTRUE 27861
27859: GO 27872
27861: POP
// bc_type := b_ext_track ; 23 :
27862: LD_ADDR_OWVAR 42
27866: PUSH
27867: LD_INT 16
27869: ST_TO_ADDR
27870: GO 28101
27872: LD_INT 23
27874: DOUBLE
27875: EQUAL
27876: IFTRUE 27880
27878: GO 27891
27880: POP
// bc_type := b_ext_laser ; 24 :
27881: LD_ADDR_OWVAR 42
27885: PUSH
27886: LD_INT 25
27888: ST_TO_ADDR
27889: GO 28101
27891: LD_INT 24
27893: DOUBLE
27894: EQUAL
27895: IFTRUE 27899
27897: GO 27910
27899: POP
// bc_type := b_control_tower ; 25 :
27900: LD_ADDR_OWVAR 42
27904: PUSH
27905: LD_INT 36
27907: ST_TO_ADDR
27908: GO 28101
27910: LD_INT 25
27912: DOUBLE
27913: EQUAL
27914: IFTRUE 27918
27916: GO 27929
27918: POP
// bc_type := b_breastwork ; 26 :
27919: LD_ADDR_OWVAR 42
27923: PUSH
27924: LD_INT 31
27926: ST_TO_ADDR
27927: GO 28101
27929: LD_INT 26
27931: DOUBLE
27932: EQUAL
27933: IFTRUE 27937
27935: GO 27948
27937: POP
// bc_type := b_bunker ; 27 :
27938: LD_ADDR_OWVAR 42
27942: PUSH
27943: LD_INT 32
27945: ST_TO_ADDR
27946: GO 28101
27948: LD_INT 27
27950: DOUBLE
27951: EQUAL
27952: IFTRUE 27956
27954: GO 27967
27956: POP
// bc_type := b_turret ; 28 :
27957: LD_ADDR_OWVAR 42
27961: PUSH
27962: LD_INT 33
27964: ST_TO_ADDR
27965: GO 28101
27967: LD_INT 28
27969: DOUBLE
27970: EQUAL
27971: IFTRUE 27975
27973: GO 27986
27975: POP
// bc_type := b_armoury ; 29 :
27976: LD_ADDR_OWVAR 42
27980: PUSH
27981: LD_INT 4
27983: ST_TO_ADDR
27984: GO 28101
27986: LD_INT 29
27988: DOUBLE
27989: EQUAL
27990: IFTRUE 27994
27992: GO 28005
27994: POP
// bc_type := b_barracks ; 30 :
27995: LD_ADDR_OWVAR 42
27999: PUSH
28000: LD_INT 5
28002: ST_TO_ADDR
28003: GO 28101
28005: LD_INT 30
28007: DOUBLE
28008: EQUAL
28009: IFTRUE 28013
28011: GO 28024
28013: POP
// bc_type := b_solar_power ; 31 :
28014: LD_ADDR_OWVAR 42
28018: PUSH
28019: LD_INT 27
28021: ST_TO_ADDR
28022: GO 28101
28024: LD_INT 31
28026: DOUBLE
28027: EQUAL
28028: IFTRUE 28032
28030: GO 28043
28032: POP
// bc_type := b_oil_power ; 32 :
28033: LD_ADDR_OWVAR 42
28037: PUSH
28038: LD_INT 26
28040: ST_TO_ADDR
28041: GO 28101
28043: LD_INT 32
28045: DOUBLE
28046: EQUAL
28047: IFTRUE 28051
28049: GO 28062
28051: POP
// bc_type := b_siberite_power ; 33 :
28052: LD_ADDR_OWVAR 42
28056: PUSH
28057: LD_INT 28
28059: ST_TO_ADDR
28060: GO 28101
28062: LD_INT 33
28064: DOUBLE
28065: EQUAL
28066: IFTRUE 28070
28068: GO 28081
28070: POP
// bc_type := b_oil_mine ; 34 :
28071: LD_ADDR_OWVAR 42
28075: PUSH
28076: LD_INT 29
28078: ST_TO_ADDR
28079: GO 28101
28081: LD_INT 34
28083: DOUBLE
28084: EQUAL
28085: IFTRUE 28089
28087: GO 28100
28089: POP
// bc_type := b_siberite_mine ; end ;
28090: LD_ADDR_OWVAR 42
28094: PUSH
28095: LD_INT 30
28097: ST_TO_ADDR
28098: GO 28101
28100: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28101: LD_ADDR_VAR 0 8
28105: PUSH
28106: LD_VAR 0 5
28110: PPUSH
28111: LD_VAR 0 6
28115: PPUSH
28116: LD_VAR 0 3
28120: PPUSH
28121: CALL_OW 47
28125: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28126: LD_OWVAR 42
28130: PUSH
28131: LD_INT 32
28133: PUSH
28134: LD_INT 33
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: IN
28141: IFFALSE 28157
// PlaceWeaponTurret ( b , weapon ) ;
28143: LD_VAR 0 8
28147: PPUSH
28148: LD_VAR 0 4
28152: PPUSH
28153: CALL_OW 431
// end ;
28157: LD_VAR 0 7
28161: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28162: LD_INT 0
28164: PPUSH
28165: PPUSH
28166: PPUSH
28167: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28168: LD_ADDR_VAR 0 4
28172: PUSH
28173: LD_INT 22
28175: PUSH
28176: LD_OWVAR 2
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: LD_INT 2
28187: PUSH
28188: LD_INT 30
28190: PUSH
28191: LD_INT 0
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 30
28200: PUSH
28201: LD_INT 1
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: LIST
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PPUSH
28217: CALL_OW 69
28221: ST_TO_ADDR
// if not tmp then
28222: LD_VAR 0 4
28226: NOT
28227: IFFALSE 28231
// exit ;
28229: GO 28290
// for i in tmp do
28231: LD_ADDR_VAR 0 2
28235: PUSH
28236: LD_VAR 0 4
28240: PUSH
28241: FOR_IN
28242: IFFALSE 28288
// for j = 1 to 3 do
28244: LD_ADDR_VAR 0 3
28248: PUSH
28249: DOUBLE
28250: LD_INT 1
28252: DEC
28253: ST_TO_ADDR
28254: LD_INT 3
28256: PUSH
28257: FOR_TO
28258: IFFALSE 28284
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28260: LD_VAR 0 2
28264: PPUSH
28265: CALL_OW 274
28269: PPUSH
28270: LD_VAR 0 3
28274: PPUSH
28275: LD_INT 99999
28277: PPUSH
28278: CALL_OW 277
28282: GO 28257
28284: POP
28285: POP
28286: GO 28241
28288: POP
28289: POP
// end ;
28290: LD_VAR 0 1
28294: RET
// export function hHackSetLevel10 ; var i , j ; begin
28295: LD_INT 0
28297: PPUSH
28298: PPUSH
28299: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28300: LD_ADDR_VAR 0 2
28304: PUSH
28305: LD_INT 21
28307: PUSH
28308: LD_INT 1
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PPUSH
28315: CALL_OW 69
28319: PUSH
28320: FOR_IN
28321: IFFALSE 28373
// if IsSelected ( i ) then
28323: LD_VAR 0 2
28327: PPUSH
28328: CALL_OW 306
28332: IFFALSE 28371
// begin for j := 1 to 4 do
28334: LD_ADDR_VAR 0 3
28338: PUSH
28339: DOUBLE
28340: LD_INT 1
28342: DEC
28343: ST_TO_ADDR
28344: LD_INT 4
28346: PUSH
28347: FOR_TO
28348: IFFALSE 28369
// SetSkill ( i , j , 10 ) ;
28350: LD_VAR 0 2
28354: PPUSH
28355: LD_VAR 0 3
28359: PPUSH
28360: LD_INT 10
28362: PPUSH
28363: CALL_OW 237
28367: GO 28347
28369: POP
28370: POP
// end ;
28371: GO 28320
28373: POP
28374: POP
// end ;
28375: LD_VAR 0 1
28379: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28380: LD_INT 0
28382: PPUSH
28383: PPUSH
28384: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28385: LD_ADDR_VAR 0 2
28389: PUSH
28390: LD_INT 22
28392: PUSH
28393: LD_OWVAR 2
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: LD_INT 21
28404: PUSH
28405: LD_INT 1
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PPUSH
28416: CALL_OW 69
28420: PUSH
28421: FOR_IN
28422: IFFALSE 28463
// begin for j := 1 to 4 do
28424: LD_ADDR_VAR 0 3
28428: PUSH
28429: DOUBLE
28430: LD_INT 1
28432: DEC
28433: ST_TO_ADDR
28434: LD_INT 4
28436: PUSH
28437: FOR_TO
28438: IFFALSE 28459
// SetSkill ( i , j , 10 ) ;
28440: LD_VAR 0 2
28444: PPUSH
28445: LD_VAR 0 3
28449: PPUSH
28450: LD_INT 10
28452: PPUSH
28453: CALL_OW 237
28457: GO 28437
28459: POP
28460: POP
// end ;
28461: GO 28421
28463: POP
28464: POP
// end ;
28465: LD_VAR 0 1
28469: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28470: LD_INT 0
28472: PPUSH
// uc_side := your_side ;
28473: LD_ADDR_OWVAR 20
28477: PUSH
28478: LD_OWVAR 2
28482: ST_TO_ADDR
// uc_nation := nation ;
28483: LD_ADDR_OWVAR 21
28487: PUSH
28488: LD_VAR 0 1
28492: ST_TO_ADDR
// InitHc ;
28493: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28497: LD_INT 0
28499: PPUSH
28500: LD_VAR 0 2
28504: PPUSH
28505: LD_VAR 0 3
28509: PPUSH
28510: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28514: LD_VAR 0 4
28518: PPUSH
28519: LD_VAR 0 5
28523: PPUSH
28524: CALL_OW 428
28528: PUSH
28529: LD_INT 0
28531: EQUAL
28532: IFFALSE 28556
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28534: CALL_OW 44
28538: PPUSH
28539: LD_VAR 0 4
28543: PPUSH
28544: LD_VAR 0 5
28548: PPUSH
28549: LD_INT 1
28551: PPUSH
28552: CALL_OW 48
// end ;
28556: LD_VAR 0 6
28560: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28561: LD_INT 0
28563: PPUSH
28564: PPUSH
// uc_side := your_side ;
28565: LD_ADDR_OWVAR 20
28569: PUSH
28570: LD_OWVAR 2
28574: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28575: LD_VAR 0 1
28579: PUSH
28580: LD_INT 1
28582: PUSH
28583: LD_INT 2
28585: PUSH
28586: LD_INT 3
28588: PUSH
28589: LD_INT 4
28591: PUSH
28592: LD_INT 5
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: IN
28602: IFFALSE 28614
// uc_nation := nation_american else
28604: LD_ADDR_OWVAR 21
28608: PUSH
28609: LD_INT 1
28611: ST_TO_ADDR
28612: GO 28657
// if chassis in [ 11 , 12 , 13 , 14 ] then
28614: LD_VAR 0 1
28618: PUSH
28619: LD_INT 11
28621: PUSH
28622: LD_INT 12
28624: PUSH
28625: LD_INT 13
28627: PUSH
28628: LD_INT 14
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: IN
28637: IFFALSE 28649
// uc_nation := nation_arabian else
28639: LD_ADDR_OWVAR 21
28643: PUSH
28644: LD_INT 2
28646: ST_TO_ADDR
28647: GO 28657
// uc_nation := nation_russian ;
28649: LD_ADDR_OWVAR 21
28653: PUSH
28654: LD_INT 3
28656: ST_TO_ADDR
// vc_chassis := chassis ;
28657: LD_ADDR_OWVAR 37
28661: PUSH
28662: LD_VAR 0 1
28666: ST_TO_ADDR
// vc_engine := engine ;
28667: LD_ADDR_OWVAR 39
28671: PUSH
28672: LD_VAR 0 2
28676: ST_TO_ADDR
// vc_control := control ;
28677: LD_ADDR_OWVAR 38
28681: PUSH
28682: LD_VAR 0 3
28686: ST_TO_ADDR
// vc_weapon := weapon ;
28687: LD_ADDR_OWVAR 40
28691: PUSH
28692: LD_VAR 0 4
28696: ST_TO_ADDR
// un := CreateVehicle ;
28697: LD_ADDR_VAR 0 8
28701: PUSH
28702: CALL_OW 45
28706: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28707: LD_VAR 0 8
28711: PPUSH
28712: LD_INT 0
28714: PPUSH
28715: LD_INT 5
28717: PPUSH
28718: CALL_OW 12
28722: PPUSH
28723: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
28727: LD_VAR 0 8
28731: PPUSH
28732: LD_VAR 0 5
28736: PPUSH
28737: LD_VAR 0 6
28741: PPUSH
28742: LD_INT 1
28744: PPUSH
28745: CALL_OW 48
// end ;
28749: LD_VAR 0 7
28753: RET
// export hInvincible ; every 1 do
28754: GO 28756
28756: DISABLE
// hInvincible := [ ] ;
28757: LD_ADDR_EXP 105
28761: PUSH
28762: EMPTY
28763: ST_TO_ADDR
28764: END
// every 10 do var i ;
28765: GO 28767
28767: DISABLE
28768: LD_INT 0
28770: PPUSH
// begin enable ;
28771: ENABLE
// if not hInvincible then
28772: LD_EXP 105
28776: NOT
28777: IFFALSE 28781
// exit ;
28779: GO 28825
// for i in hInvincible do
28781: LD_ADDR_VAR 0 1
28785: PUSH
28786: LD_EXP 105
28790: PUSH
28791: FOR_IN
28792: IFFALSE 28823
// if GetLives ( i ) < 1000 then
28794: LD_VAR 0 1
28798: PPUSH
28799: CALL_OW 256
28803: PUSH
28804: LD_INT 1000
28806: LESS
28807: IFFALSE 28821
// SetLives ( i , 1000 ) ;
28809: LD_VAR 0 1
28813: PPUSH
28814: LD_INT 1000
28816: PPUSH
28817: CALL_OW 234
28821: GO 28791
28823: POP
28824: POP
// end ;
28825: PPOPN 1
28827: END
// export function hHackInvincible ; var i ; begin
28828: LD_INT 0
28830: PPUSH
28831: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28832: LD_ADDR_VAR 0 2
28836: PUSH
28837: LD_INT 2
28839: PUSH
28840: LD_INT 21
28842: PUSH
28843: LD_INT 1
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: LD_INT 21
28852: PUSH
28853: LD_INT 2
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: LIST
28864: PPUSH
28865: CALL_OW 69
28869: PUSH
28870: FOR_IN
28871: IFFALSE 28932
// if IsSelected ( i ) then
28873: LD_VAR 0 2
28877: PPUSH
28878: CALL_OW 306
28882: IFFALSE 28930
// begin if i in hInvincible then
28884: LD_VAR 0 2
28888: PUSH
28889: LD_EXP 105
28893: IN
28894: IFFALSE 28914
// hInvincible := hInvincible diff i else
28896: LD_ADDR_EXP 105
28900: PUSH
28901: LD_EXP 105
28905: PUSH
28906: LD_VAR 0 2
28910: DIFF
28911: ST_TO_ADDR
28912: GO 28930
// hInvincible := hInvincible union i ;
28914: LD_ADDR_EXP 105
28918: PUSH
28919: LD_EXP 105
28923: PUSH
28924: LD_VAR 0 2
28928: UNION
28929: ST_TO_ADDR
// end ;
28930: GO 28870
28932: POP
28933: POP
// end ;
28934: LD_VAR 0 1
28938: RET
// export function hHackInvisible ; var i , j ; begin
28939: LD_INT 0
28941: PPUSH
28942: PPUSH
28943: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28944: LD_ADDR_VAR 0 2
28948: PUSH
28949: LD_INT 21
28951: PUSH
28952: LD_INT 1
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PPUSH
28959: CALL_OW 69
28963: PUSH
28964: FOR_IN
28965: IFFALSE 28989
// if IsSelected ( i ) then
28967: LD_VAR 0 2
28971: PPUSH
28972: CALL_OW 306
28976: IFFALSE 28987
// ComForceInvisible ( i ) ;
28978: LD_VAR 0 2
28982: PPUSH
28983: CALL_OW 496
28987: GO 28964
28989: POP
28990: POP
// end ;
28991: LD_VAR 0 1
28995: RET
// export function hHackChangeYourSide ; begin
28996: LD_INT 0
28998: PPUSH
// if your_side = 8 then
28999: LD_OWVAR 2
29003: PUSH
29004: LD_INT 8
29006: EQUAL
29007: IFFALSE 29019
// your_side := 0 else
29009: LD_ADDR_OWVAR 2
29013: PUSH
29014: LD_INT 0
29016: ST_TO_ADDR
29017: GO 29033
// your_side := your_side + 1 ;
29019: LD_ADDR_OWVAR 2
29023: PUSH
29024: LD_OWVAR 2
29028: PUSH
29029: LD_INT 1
29031: PLUS
29032: ST_TO_ADDR
// end ;
29033: LD_VAR 0 1
29037: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29038: LD_INT 0
29040: PPUSH
29041: PPUSH
29042: PPUSH
// for i in all_units do
29043: LD_ADDR_VAR 0 2
29047: PUSH
29048: LD_OWVAR 3
29052: PUSH
29053: FOR_IN
29054: IFFALSE 29132
// if IsSelected ( i ) then
29056: LD_VAR 0 2
29060: PPUSH
29061: CALL_OW 306
29065: IFFALSE 29130
// begin j := GetSide ( i ) ;
29067: LD_ADDR_VAR 0 3
29071: PUSH
29072: LD_VAR 0 2
29076: PPUSH
29077: CALL_OW 255
29081: ST_TO_ADDR
// if j = 8 then
29082: LD_VAR 0 3
29086: PUSH
29087: LD_INT 8
29089: EQUAL
29090: IFFALSE 29102
// j := 0 else
29092: LD_ADDR_VAR 0 3
29096: PUSH
29097: LD_INT 0
29099: ST_TO_ADDR
29100: GO 29116
// j := j + 1 ;
29102: LD_ADDR_VAR 0 3
29106: PUSH
29107: LD_VAR 0 3
29111: PUSH
29112: LD_INT 1
29114: PLUS
29115: ST_TO_ADDR
// SetSide ( i , j ) ;
29116: LD_VAR 0 2
29120: PPUSH
29121: LD_VAR 0 3
29125: PPUSH
29126: CALL_OW 235
// end ;
29130: GO 29053
29132: POP
29133: POP
// end ;
29134: LD_VAR 0 1
29138: RET
// export function hHackFog ; begin
29139: LD_INT 0
29141: PPUSH
// FogOff ( true ) ;
29142: LD_INT 1
29144: PPUSH
29145: CALL_OW 344
// end ;
29149: LD_VAR 0 1
29153: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29154: LD_INT 0
29156: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29157: LD_VAR 0 1
29161: PPUSH
29162: LD_VAR 0 2
29166: PPUSH
29167: LD_VAR 0 3
29171: PPUSH
29172: LD_INT 1
29174: PPUSH
29175: LD_INT 1
29177: PPUSH
29178: CALL_OW 483
// CenterOnXY ( x , y ) ;
29182: LD_VAR 0 2
29186: PPUSH
29187: LD_VAR 0 3
29191: PPUSH
29192: CALL_OW 84
// end ; end_of_file
29196: LD_VAR 0 4
29200: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
29201: LD_INT 0
29203: PPUSH
29204: PPUSH
29205: PPUSH
29206: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
29207: LD_VAR 0 1
29211: PPUSH
29212: CALL_OW 264
29216: PUSH
29217: LD_EXP 39
29221: EQUAL
29222: IFFALSE 29294
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
29224: LD_INT 68
29226: PPUSH
29227: LD_VAR 0 1
29231: PPUSH
29232: CALL_OW 255
29236: PPUSH
29237: CALL_OW 321
29241: PUSH
29242: LD_INT 2
29244: EQUAL
29245: IFFALSE 29257
// eff := 70 else
29247: LD_ADDR_VAR 0 4
29251: PUSH
29252: LD_INT 70
29254: ST_TO_ADDR
29255: GO 29265
// eff := 30 ;
29257: LD_ADDR_VAR 0 4
29261: PUSH
29262: LD_INT 30
29264: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
29265: LD_VAR 0 1
29269: PPUSH
29270: CALL_OW 250
29274: PPUSH
29275: LD_VAR 0 1
29279: PPUSH
29280: CALL_OW 251
29284: PPUSH
29285: LD_VAR 0 4
29289: PPUSH
29290: CALL_OW 495
// end ; end ;
29294: LD_VAR 0 2
29298: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
29299: LD_INT 0
29301: PPUSH
// end ;
29302: LD_VAR 0 4
29306: RET
// export function SOS_Command ( cmd ) ; begin
29307: LD_INT 0
29309: PPUSH
// end ;
29310: LD_VAR 0 2
29314: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
29315: LD_INT 0
29317: PPUSH
// if cmd = 121 then
29318: LD_VAR 0 1
29322: PUSH
29323: LD_INT 121
29325: EQUAL
29326: IFFALSE 29328
// end ;
29328: LD_VAR 0 6
29332: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
29333: LD_INT 0
29335: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
29336: LD_VAR 0 1
29340: PUSH
29341: LD_INT 250
29343: EQUAL
29344: PUSH
29345: LD_VAR 0 2
29349: PPUSH
29350: CALL_OW 264
29354: PUSH
29355: LD_EXP 42
29359: EQUAL
29360: AND
29361: IFFALSE 29382
// MinerPlaceMine ( unit , x , y ) ;
29363: LD_VAR 0 2
29367: PPUSH
29368: LD_VAR 0 4
29372: PPUSH
29373: LD_VAR 0 5
29377: PPUSH
29378: CALL 31731 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
29382: LD_VAR 0 1
29386: PUSH
29387: LD_INT 251
29389: EQUAL
29390: PUSH
29391: LD_VAR 0 2
29395: PPUSH
29396: CALL_OW 264
29400: PUSH
29401: LD_EXP 42
29405: EQUAL
29406: AND
29407: IFFALSE 29428
// MinerDetonateMine ( unit , x , y ) ;
29409: LD_VAR 0 2
29413: PPUSH
29414: LD_VAR 0 4
29418: PPUSH
29419: LD_VAR 0 5
29423: PPUSH
29424: CALL 32008 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
29428: LD_VAR 0 1
29432: PUSH
29433: LD_INT 252
29435: EQUAL
29436: PUSH
29437: LD_VAR 0 2
29441: PPUSH
29442: CALL_OW 264
29446: PUSH
29447: LD_EXP 42
29451: EQUAL
29452: AND
29453: IFFALSE 29474
// MinerCreateMinefield ( unit , x , y ) ;
29455: LD_VAR 0 2
29459: PPUSH
29460: LD_VAR 0 4
29464: PPUSH
29465: LD_VAR 0 5
29469: PPUSH
29470: CALL 32425 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
29474: LD_VAR 0 1
29478: PUSH
29479: LD_INT 253
29481: EQUAL
29482: PUSH
29483: LD_VAR 0 2
29487: PPUSH
29488: CALL_OW 257
29492: PUSH
29493: LD_INT 5
29495: EQUAL
29496: AND
29497: IFFALSE 29518
// ComBinocular ( unit , x , y ) ;
29499: LD_VAR 0 2
29503: PPUSH
29504: LD_VAR 0 4
29508: PPUSH
29509: LD_VAR 0 5
29513: PPUSH
29514: CALL 32796 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
29518: LD_VAR 0 1
29522: PUSH
29523: LD_INT 254
29525: EQUAL
29526: PUSH
29527: LD_VAR 0 2
29531: PPUSH
29532: CALL_OW 264
29536: PUSH
29537: LD_EXP 37
29541: EQUAL
29542: AND
29543: PUSH
29544: LD_VAR 0 3
29548: PPUSH
29549: CALL_OW 263
29553: PUSH
29554: LD_INT 3
29556: EQUAL
29557: AND
29558: IFFALSE 29574
// HackDestroyVehicle ( unit , selectedUnit ) ;
29560: LD_VAR 0 2
29564: PPUSH
29565: LD_VAR 0 3
29569: PPUSH
29570: CALL 31091 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
29574: LD_VAR 0 1
29578: PUSH
29579: LD_INT 255
29581: EQUAL
29582: PUSH
29583: LD_VAR 0 2
29587: PPUSH
29588: CALL_OW 264
29592: PUSH
29593: LD_INT 14
29595: PUSH
29596: LD_INT 53
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: IN
29603: AND
29604: PUSH
29605: LD_VAR 0 4
29609: PPUSH
29610: LD_VAR 0 5
29614: PPUSH
29615: CALL_OW 488
29619: AND
29620: IFFALSE 29644
// CutTreeXYR ( unit , x , y , 12 ) ;
29622: LD_VAR 0 2
29626: PPUSH
29627: LD_VAR 0 4
29631: PPUSH
29632: LD_VAR 0 5
29636: PPUSH
29637: LD_INT 12
29639: PPUSH
29640: CALL 29657 0 4
// end ;
29644: LD_VAR 0 6
29648: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
29649: LD_INT 0
29651: PPUSH
// end ;
29652: LD_VAR 0 4
29656: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
29657: LD_INT 0
29659: PPUSH
29660: PPUSH
29661: PPUSH
29662: PPUSH
29663: PPUSH
29664: PPUSH
29665: PPUSH
29666: PPUSH
29667: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
29668: LD_VAR 0 1
29672: NOT
29673: PUSH
29674: LD_VAR 0 2
29678: PPUSH
29679: LD_VAR 0 3
29683: PPUSH
29684: CALL_OW 488
29688: NOT
29689: OR
29690: PUSH
29691: LD_VAR 0 4
29695: NOT
29696: OR
29697: IFFALSE 29701
// exit ;
29699: GO 30041
// list := [ ] ;
29701: LD_ADDR_VAR 0 13
29705: PUSH
29706: EMPTY
29707: ST_TO_ADDR
// if x - r < 0 then
29708: LD_VAR 0 2
29712: PUSH
29713: LD_VAR 0 4
29717: MINUS
29718: PUSH
29719: LD_INT 0
29721: LESS
29722: IFFALSE 29734
// min_x := 0 else
29724: LD_ADDR_VAR 0 7
29728: PUSH
29729: LD_INT 0
29731: ST_TO_ADDR
29732: GO 29750
// min_x := x - r ;
29734: LD_ADDR_VAR 0 7
29738: PUSH
29739: LD_VAR 0 2
29743: PUSH
29744: LD_VAR 0 4
29748: MINUS
29749: ST_TO_ADDR
// if y - r < 0 then
29750: LD_VAR 0 3
29754: PUSH
29755: LD_VAR 0 4
29759: MINUS
29760: PUSH
29761: LD_INT 0
29763: LESS
29764: IFFALSE 29776
// min_y := 0 else
29766: LD_ADDR_VAR 0 8
29770: PUSH
29771: LD_INT 0
29773: ST_TO_ADDR
29774: GO 29792
// min_y := y - r ;
29776: LD_ADDR_VAR 0 8
29780: PUSH
29781: LD_VAR 0 3
29785: PUSH
29786: LD_VAR 0 4
29790: MINUS
29791: ST_TO_ADDR
// max_x := x + r ;
29792: LD_ADDR_VAR 0 9
29796: PUSH
29797: LD_VAR 0 2
29801: PUSH
29802: LD_VAR 0 4
29806: PLUS
29807: ST_TO_ADDR
// max_y := y + r ;
29808: LD_ADDR_VAR 0 10
29812: PUSH
29813: LD_VAR 0 3
29817: PUSH
29818: LD_VAR 0 4
29822: PLUS
29823: ST_TO_ADDR
// for _x = min_x to max_x do
29824: LD_ADDR_VAR 0 11
29828: PUSH
29829: DOUBLE
29830: LD_VAR 0 7
29834: DEC
29835: ST_TO_ADDR
29836: LD_VAR 0 9
29840: PUSH
29841: FOR_TO
29842: IFFALSE 29959
// for _y = min_y to max_y do
29844: LD_ADDR_VAR 0 12
29848: PUSH
29849: DOUBLE
29850: LD_VAR 0 8
29854: DEC
29855: ST_TO_ADDR
29856: LD_VAR 0 10
29860: PUSH
29861: FOR_TO
29862: IFFALSE 29955
// begin if not ValidHex ( _x , _y ) then
29864: LD_VAR 0 11
29868: PPUSH
29869: LD_VAR 0 12
29873: PPUSH
29874: CALL_OW 488
29878: NOT
29879: IFFALSE 29883
// continue ;
29881: GO 29861
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29883: LD_VAR 0 11
29887: PPUSH
29888: LD_VAR 0 12
29892: PPUSH
29893: CALL_OW 351
29897: PUSH
29898: LD_VAR 0 11
29902: PPUSH
29903: LD_VAR 0 12
29907: PPUSH
29908: CALL_OW 554
29912: AND
29913: IFFALSE 29953
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29915: LD_ADDR_VAR 0 13
29919: PUSH
29920: LD_VAR 0 13
29924: PPUSH
29925: LD_VAR 0 13
29929: PUSH
29930: LD_INT 1
29932: PLUS
29933: PPUSH
29934: LD_VAR 0 11
29938: PUSH
29939: LD_VAR 0 12
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PPUSH
29948: CALL_OW 2
29952: ST_TO_ADDR
// end ;
29953: GO 29861
29955: POP
29956: POP
29957: GO 29841
29959: POP
29960: POP
// if not list then
29961: LD_VAR 0 13
29965: NOT
29966: IFFALSE 29970
// exit ;
29968: GO 30041
// for i in list do
29970: LD_ADDR_VAR 0 6
29974: PUSH
29975: LD_VAR 0 13
29979: PUSH
29980: FOR_IN
29981: IFFALSE 30039
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29983: LD_VAR 0 1
29987: PPUSH
29988: LD_STRING M
29990: PUSH
29991: LD_VAR 0 6
29995: PUSH
29996: LD_INT 1
29998: ARRAY
29999: PUSH
30000: LD_VAR 0 6
30004: PUSH
30005: LD_INT 2
30007: ARRAY
30008: PUSH
30009: LD_INT 0
30011: PUSH
30012: LD_INT 0
30014: PUSH
30015: LD_INT 0
30017: PUSH
30018: LD_INT 0
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: PUSH
30030: EMPTY
30031: LIST
30032: PPUSH
30033: CALL_OW 447
30037: GO 29980
30039: POP
30040: POP
// end ;
30041: LD_VAR 0 5
30045: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
30046: LD_EXP 108
30050: NOT
30051: IFFALSE 30101
30053: GO 30055
30055: DISABLE
// begin initHack := true ;
30056: LD_ADDR_EXP 108
30060: PUSH
30061: LD_INT 1
30063: ST_TO_ADDR
// hackTanks := [ ] ;
30064: LD_ADDR_EXP 109
30068: PUSH
30069: EMPTY
30070: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
30071: LD_ADDR_EXP 110
30075: PUSH
30076: EMPTY
30077: ST_TO_ADDR
// hackLimit := 3 ;
30078: LD_ADDR_EXP 111
30082: PUSH
30083: LD_INT 3
30085: ST_TO_ADDR
// hackDist := 12 ;
30086: LD_ADDR_EXP 112
30090: PUSH
30091: LD_INT 12
30093: ST_TO_ADDR
// hackCounter := [ ] ;
30094: LD_ADDR_EXP 113
30098: PUSH
30099: EMPTY
30100: ST_TO_ADDR
// end ;
30101: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
30102: LD_EXP 108
30106: PUSH
30107: LD_INT 34
30109: PUSH
30110: LD_EXP 37
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PPUSH
30119: CALL_OW 69
30123: AND
30124: IFFALSE 30379
30126: GO 30128
30128: DISABLE
30129: LD_INT 0
30131: PPUSH
30132: PPUSH
// begin enable ;
30133: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
30134: LD_ADDR_VAR 0 1
30138: PUSH
30139: LD_INT 34
30141: PUSH
30142: LD_EXP 37
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PPUSH
30151: CALL_OW 69
30155: PUSH
30156: FOR_IN
30157: IFFALSE 30377
// begin if not i in hackTanks then
30159: LD_VAR 0 1
30163: PUSH
30164: LD_EXP 109
30168: IN
30169: NOT
30170: IFFALSE 30253
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
30172: LD_ADDR_EXP 109
30176: PUSH
30177: LD_EXP 109
30181: PPUSH
30182: LD_EXP 109
30186: PUSH
30187: LD_INT 1
30189: PLUS
30190: PPUSH
30191: LD_VAR 0 1
30195: PPUSH
30196: CALL_OW 1
30200: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
30201: LD_ADDR_EXP 110
30205: PUSH
30206: LD_EXP 110
30210: PPUSH
30211: LD_EXP 110
30215: PUSH
30216: LD_INT 1
30218: PLUS
30219: PPUSH
30220: EMPTY
30221: PPUSH
30222: CALL_OW 1
30226: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
30227: LD_ADDR_EXP 113
30231: PUSH
30232: LD_EXP 113
30236: PPUSH
30237: LD_EXP 113
30241: PUSH
30242: LD_INT 1
30244: PLUS
30245: PPUSH
30246: EMPTY
30247: PPUSH
30248: CALL_OW 1
30252: ST_TO_ADDR
// end ; if not IsOk ( i ) then
30253: LD_VAR 0 1
30257: PPUSH
30258: CALL_OW 302
30262: NOT
30263: IFFALSE 30276
// begin HackUnlinkAll ( i ) ;
30265: LD_VAR 0 1
30269: PPUSH
30270: CALL 30382 0 1
// continue ;
30274: GO 30156
// end ; HackCheckCapturedStatus ( i ) ;
30276: LD_VAR 0 1
30280: PPUSH
30281: CALL 30825 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
30285: LD_ADDR_VAR 0 2
30289: PUSH
30290: LD_INT 81
30292: PUSH
30293: LD_VAR 0 1
30297: PPUSH
30298: CALL_OW 255
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 33
30309: PUSH
30310: LD_INT 3
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 91
30319: PUSH
30320: LD_VAR 0 1
30324: PUSH
30325: LD_EXP 112
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 50
30337: PUSH
30338: EMPTY
30339: LIST
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: PPUSH
30347: CALL_OW 69
30351: ST_TO_ADDR
// if not tmp then
30352: LD_VAR 0 2
30356: NOT
30357: IFFALSE 30361
// continue ;
30359: GO 30156
// HackLink ( i , tmp ) ;
30361: LD_VAR 0 1
30365: PPUSH
30366: LD_VAR 0 2
30370: PPUSH
30371: CALL 30518 0 2
// end ;
30375: GO 30156
30377: POP
30378: POP
// end ;
30379: PPOPN 2
30381: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30382: LD_INT 0
30384: PPUSH
30385: PPUSH
30386: PPUSH
// if not hack in hackTanks then
30387: LD_VAR 0 1
30391: PUSH
30392: LD_EXP 109
30396: IN
30397: NOT
30398: IFFALSE 30402
// exit ;
30400: GO 30513
// index := GetElementIndex ( hackTanks , hack ) ;
30402: LD_ADDR_VAR 0 4
30406: PUSH
30407: LD_EXP 109
30411: PPUSH
30412: LD_VAR 0 1
30416: PPUSH
30417: CALL 37947 0 2
30421: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30422: LD_EXP 110
30426: PUSH
30427: LD_VAR 0 4
30431: ARRAY
30432: IFFALSE 30513
// begin for i in hackTanksCaptured [ index ] do
30434: LD_ADDR_VAR 0 3
30438: PUSH
30439: LD_EXP 110
30443: PUSH
30444: LD_VAR 0 4
30448: ARRAY
30449: PUSH
30450: FOR_IN
30451: IFFALSE 30477
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30453: LD_VAR 0 3
30457: PUSH
30458: LD_INT 1
30460: ARRAY
30461: PPUSH
30462: LD_VAR 0 3
30466: PUSH
30467: LD_INT 2
30469: ARRAY
30470: PPUSH
30471: CALL_OW 235
30475: GO 30450
30477: POP
30478: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30479: LD_ADDR_EXP 110
30483: PUSH
30484: LD_EXP 110
30488: PPUSH
30489: LD_VAR 0 4
30493: PPUSH
30494: EMPTY
30495: PPUSH
30496: CALL_OW 1
30500: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30501: LD_VAR 0 1
30505: PPUSH
30506: LD_INT 0
30508: PPUSH
30509: CALL_OW 505
// end ; end ;
30513: LD_VAR 0 2
30517: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30518: LD_INT 0
30520: PPUSH
30521: PPUSH
30522: PPUSH
// if not hack in hackTanks or not vehicles then
30523: LD_VAR 0 1
30527: PUSH
30528: LD_EXP 109
30532: IN
30533: NOT
30534: PUSH
30535: LD_VAR 0 2
30539: NOT
30540: OR
30541: IFFALSE 30545
// exit ;
30543: GO 30820
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30545: LD_ADDR_VAR 0 2
30549: PUSH
30550: LD_VAR 0 1
30554: PPUSH
30555: LD_VAR 0 2
30559: PPUSH
30560: LD_INT 1
30562: PPUSH
30563: LD_INT 1
30565: PPUSH
30566: CALL 38597 0 4
30570: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30571: LD_ADDR_VAR 0 5
30575: PUSH
30576: LD_EXP 109
30580: PPUSH
30581: LD_VAR 0 1
30585: PPUSH
30586: CALL 37947 0 2
30590: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30591: LD_EXP 110
30595: PUSH
30596: LD_VAR 0 5
30600: ARRAY
30601: PUSH
30602: LD_EXP 111
30606: LESS
30607: IFFALSE 30796
// begin for i := 1 to vehicles do
30609: LD_ADDR_VAR 0 4
30613: PUSH
30614: DOUBLE
30615: LD_INT 1
30617: DEC
30618: ST_TO_ADDR
30619: LD_VAR 0 2
30623: PUSH
30624: FOR_TO
30625: IFFALSE 30794
// begin if hackTanksCaptured [ index ] = hackLimit then
30627: LD_EXP 110
30631: PUSH
30632: LD_VAR 0 5
30636: ARRAY
30637: PUSH
30638: LD_EXP 111
30642: EQUAL
30643: IFFALSE 30647
// break ;
30645: GO 30794
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30647: LD_ADDR_EXP 113
30651: PUSH
30652: LD_EXP 113
30656: PPUSH
30657: LD_VAR 0 5
30661: PPUSH
30662: LD_EXP 113
30666: PUSH
30667: LD_VAR 0 5
30671: ARRAY
30672: PUSH
30673: LD_INT 1
30675: PLUS
30676: PPUSH
30677: CALL_OW 1
30681: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30682: LD_ADDR_EXP 110
30686: PUSH
30687: LD_EXP 110
30691: PPUSH
30692: LD_VAR 0 5
30696: PUSH
30697: LD_EXP 110
30701: PUSH
30702: LD_VAR 0 5
30706: ARRAY
30707: PUSH
30708: LD_INT 1
30710: PLUS
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PPUSH
30716: LD_VAR 0 2
30720: PUSH
30721: LD_VAR 0 4
30725: ARRAY
30726: PUSH
30727: LD_VAR 0 2
30731: PUSH
30732: LD_VAR 0 4
30736: ARRAY
30737: PPUSH
30738: CALL_OW 255
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PPUSH
30747: CALL 38162 0 3
30751: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30752: LD_VAR 0 2
30756: PUSH
30757: LD_VAR 0 4
30761: ARRAY
30762: PPUSH
30763: LD_VAR 0 1
30767: PPUSH
30768: CALL_OW 255
30772: PPUSH
30773: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30777: LD_VAR 0 2
30781: PUSH
30782: LD_VAR 0 4
30786: ARRAY
30787: PPUSH
30788: CALL_OW 141
// end ;
30792: GO 30624
30794: POP
30795: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30796: LD_VAR 0 1
30800: PPUSH
30801: LD_EXP 110
30805: PUSH
30806: LD_VAR 0 5
30810: ARRAY
30811: PUSH
30812: LD_INT 0
30814: PLUS
30815: PPUSH
30816: CALL_OW 505
// end ;
30820: LD_VAR 0 3
30824: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30825: LD_INT 0
30827: PPUSH
30828: PPUSH
30829: PPUSH
30830: PPUSH
// if not hack in hackTanks then
30831: LD_VAR 0 1
30835: PUSH
30836: LD_EXP 109
30840: IN
30841: NOT
30842: IFFALSE 30846
// exit ;
30844: GO 31086
// index := GetElementIndex ( hackTanks , hack ) ;
30846: LD_ADDR_VAR 0 4
30850: PUSH
30851: LD_EXP 109
30855: PPUSH
30856: LD_VAR 0 1
30860: PPUSH
30861: CALL 37947 0 2
30865: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30866: LD_ADDR_VAR 0 3
30870: PUSH
30871: DOUBLE
30872: LD_EXP 110
30876: PUSH
30877: LD_VAR 0 4
30881: ARRAY
30882: INC
30883: ST_TO_ADDR
30884: LD_INT 1
30886: PUSH
30887: FOR_DOWNTO
30888: IFFALSE 31060
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30890: LD_ADDR_VAR 0 5
30894: PUSH
30895: LD_EXP 110
30899: PUSH
30900: LD_VAR 0 4
30904: ARRAY
30905: PUSH
30906: LD_VAR 0 3
30910: ARRAY
30911: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30912: LD_VAR 0 5
30916: PUSH
30917: LD_INT 1
30919: ARRAY
30920: PPUSH
30921: CALL_OW 302
30925: NOT
30926: PUSH
30927: LD_VAR 0 5
30931: PUSH
30932: LD_INT 1
30934: ARRAY
30935: PPUSH
30936: CALL_OW 255
30940: PUSH
30941: LD_VAR 0 1
30945: PPUSH
30946: CALL_OW 255
30950: NONEQUAL
30951: OR
30952: IFFALSE 31058
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30954: LD_VAR 0 5
30958: PUSH
30959: LD_INT 1
30961: ARRAY
30962: PPUSH
30963: CALL_OW 305
30967: PUSH
30968: LD_VAR 0 5
30972: PUSH
30973: LD_INT 1
30975: ARRAY
30976: PPUSH
30977: CALL_OW 255
30981: PUSH
30982: LD_VAR 0 1
30986: PPUSH
30987: CALL_OW 255
30991: EQUAL
30992: AND
30993: IFFALSE 31017
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30995: LD_VAR 0 5
30999: PUSH
31000: LD_INT 1
31002: ARRAY
31003: PPUSH
31004: LD_VAR 0 5
31008: PUSH
31009: LD_INT 2
31011: ARRAY
31012: PPUSH
31013: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
31017: LD_ADDR_EXP 110
31021: PUSH
31022: LD_EXP 110
31026: PPUSH
31027: LD_VAR 0 4
31031: PPUSH
31032: LD_EXP 110
31036: PUSH
31037: LD_VAR 0 4
31041: ARRAY
31042: PPUSH
31043: LD_VAR 0 3
31047: PPUSH
31048: CALL_OW 3
31052: PPUSH
31053: CALL_OW 1
31057: ST_TO_ADDR
// end ; end ;
31058: GO 30887
31060: POP
31061: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31062: LD_VAR 0 1
31066: PPUSH
31067: LD_EXP 110
31071: PUSH
31072: LD_VAR 0 4
31076: ARRAY
31077: PUSH
31078: LD_INT 0
31080: PLUS
31081: PPUSH
31082: CALL_OW 505
// end ;
31086: LD_VAR 0 2
31090: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
31091: LD_INT 0
31093: PPUSH
31094: PPUSH
31095: PPUSH
31096: PPUSH
// if not hack in hackTanks then
31097: LD_VAR 0 1
31101: PUSH
31102: LD_EXP 109
31106: IN
31107: NOT
31108: IFFALSE 31112
// exit ;
31110: GO 31197
// index := GetElementIndex ( hackTanks , hack ) ;
31112: LD_ADDR_VAR 0 5
31116: PUSH
31117: LD_EXP 109
31121: PPUSH
31122: LD_VAR 0 1
31126: PPUSH
31127: CALL 37947 0 2
31131: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
31132: LD_ADDR_VAR 0 4
31136: PUSH
31137: DOUBLE
31138: LD_INT 1
31140: DEC
31141: ST_TO_ADDR
31142: LD_EXP 110
31146: PUSH
31147: LD_VAR 0 5
31151: ARRAY
31152: PUSH
31153: FOR_TO
31154: IFFALSE 31195
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
31156: LD_EXP 110
31160: PUSH
31161: LD_VAR 0 5
31165: ARRAY
31166: PUSH
31167: LD_VAR 0 4
31171: ARRAY
31172: PUSH
31173: LD_INT 1
31175: ARRAY
31176: PUSH
31177: LD_VAR 0 2
31181: EQUAL
31182: IFFALSE 31193
// KillUnit ( vehicle ) ;
31184: LD_VAR 0 2
31188: PPUSH
31189: CALL_OW 66
31193: GO 31153
31195: POP
31196: POP
// end ;
31197: LD_VAR 0 3
31201: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
31202: LD_EXP 114
31206: NOT
31207: IFFALSE 31242
31209: GO 31211
31211: DISABLE
// begin initMiner := true ;
31212: LD_ADDR_EXP 114
31216: PUSH
31217: LD_INT 1
31219: ST_TO_ADDR
// minersList := [ ] ;
31220: LD_ADDR_EXP 115
31224: PUSH
31225: EMPTY
31226: ST_TO_ADDR
// minerMinesList := [ ] ;
31227: LD_ADDR_EXP 116
31231: PUSH
31232: EMPTY
31233: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
31234: LD_ADDR_EXP 117
31238: PUSH
31239: LD_INT 5
31241: ST_TO_ADDR
// end ;
31242: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
31243: LD_EXP 114
31247: PUSH
31248: LD_INT 34
31250: PUSH
31251: LD_EXP 42
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PPUSH
31260: CALL_OW 69
31264: AND
31265: IFFALSE 31728
31267: GO 31269
31269: DISABLE
31270: LD_INT 0
31272: PPUSH
31273: PPUSH
31274: PPUSH
31275: PPUSH
// begin enable ;
31276: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
31277: LD_ADDR_VAR 0 1
31281: PUSH
31282: LD_INT 34
31284: PUSH
31285: LD_EXP 42
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PPUSH
31294: CALL_OW 69
31298: PUSH
31299: FOR_IN
31300: IFFALSE 31372
// begin if not i in minersList then
31302: LD_VAR 0 1
31306: PUSH
31307: LD_EXP 115
31311: IN
31312: NOT
31313: IFFALSE 31370
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
31315: LD_ADDR_EXP 115
31319: PUSH
31320: LD_EXP 115
31324: PPUSH
31325: LD_EXP 115
31329: PUSH
31330: LD_INT 1
31332: PLUS
31333: PPUSH
31334: LD_VAR 0 1
31338: PPUSH
31339: CALL_OW 1
31343: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31344: LD_ADDR_EXP 116
31348: PUSH
31349: LD_EXP 116
31353: PPUSH
31354: LD_EXP 116
31358: PUSH
31359: LD_INT 1
31361: PLUS
31362: PPUSH
31363: EMPTY
31364: PPUSH
31365: CALL_OW 1
31369: ST_TO_ADDR
// end end ;
31370: GO 31299
31372: POP
31373: POP
// for i := minerMinesList downto 1 do
31374: LD_ADDR_VAR 0 1
31378: PUSH
31379: DOUBLE
31380: LD_EXP 116
31384: INC
31385: ST_TO_ADDR
31386: LD_INT 1
31388: PUSH
31389: FOR_DOWNTO
31390: IFFALSE 31726
// begin if IsLive ( minersList [ i ] ) then
31392: LD_EXP 115
31396: PUSH
31397: LD_VAR 0 1
31401: ARRAY
31402: PPUSH
31403: CALL_OW 300
31407: IFFALSE 31435
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
31409: LD_EXP 115
31413: PUSH
31414: LD_VAR 0 1
31418: ARRAY
31419: PPUSH
31420: LD_EXP 116
31424: PUSH
31425: LD_VAR 0 1
31429: ARRAY
31430: PPUSH
31431: CALL_OW 505
// if not minerMinesList [ i ] then
31435: LD_EXP 116
31439: PUSH
31440: LD_VAR 0 1
31444: ARRAY
31445: NOT
31446: IFFALSE 31450
// continue ;
31448: GO 31389
// for j := minerMinesList [ i ] downto 1 do
31450: LD_ADDR_VAR 0 2
31454: PUSH
31455: DOUBLE
31456: LD_EXP 116
31460: PUSH
31461: LD_VAR 0 1
31465: ARRAY
31466: INC
31467: ST_TO_ADDR
31468: LD_INT 1
31470: PUSH
31471: FOR_DOWNTO
31472: IFFALSE 31722
// begin side := GetSide ( minersList [ i ] ) ;
31474: LD_ADDR_VAR 0 3
31478: PUSH
31479: LD_EXP 115
31483: PUSH
31484: LD_VAR 0 1
31488: ARRAY
31489: PPUSH
31490: CALL_OW 255
31494: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31495: LD_ADDR_VAR 0 4
31499: PUSH
31500: LD_EXP 116
31504: PUSH
31505: LD_VAR 0 1
31509: ARRAY
31510: PUSH
31511: LD_VAR 0 2
31515: ARRAY
31516: PUSH
31517: LD_INT 1
31519: ARRAY
31520: PPUSH
31521: LD_EXP 116
31525: PUSH
31526: LD_VAR 0 1
31530: ARRAY
31531: PUSH
31532: LD_VAR 0 2
31536: ARRAY
31537: PUSH
31538: LD_INT 2
31540: ARRAY
31541: PPUSH
31542: CALL_OW 428
31546: ST_TO_ADDR
// if not tmp then
31547: LD_VAR 0 4
31551: NOT
31552: IFFALSE 31556
// continue ;
31554: GO 31471
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31556: LD_VAR 0 4
31560: PUSH
31561: LD_INT 81
31563: PUSH
31564: LD_VAR 0 3
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PPUSH
31573: CALL_OW 69
31577: IN
31578: PUSH
31579: LD_EXP 116
31583: PUSH
31584: LD_VAR 0 1
31588: ARRAY
31589: PUSH
31590: LD_VAR 0 2
31594: ARRAY
31595: PUSH
31596: LD_INT 1
31598: ARRAY
31599: PPUSH
31600: LD_EXP 116
31604: PUSH
31605: LD_VAR 0 1
31609: ARRAY
31610: PUSH
31611: LD_VAR 0 2
31615: ARRAY
31616: PUSH
31617: LD_INT 2
31619: ARRAY
31620: PPUSH
31621: CALL_OW 458
31625: AND
31626: IFFALSE 31720
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31628: LD_EXP 116
31632: PUSH
31633: LD_VAR 0 1
31637: ARRAY
31638: PUSH
31639: LD_VAR 0 2
31643: ARRAY
31644: PUSH
31645: LD_INT 1
31647: ARRAY
31648: PPUSH
31649: LD_EXP 116
31653: PUSH
31654: LD_VAR 0 1
31658: ARRAY
31659: PUSH
31660: LD_VAR 0 2
31664: ARRAY
31665: PUSH
31666: LD_INT 2
31668: ARRAY
31669: PPUSH
31670: LD_VAR 0 3
31674: PPUSH
31675: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31679: LD_ADDR_EXP 116
31683: PUSH
31684: LD_EXP 116
31688: PPUSH
31689: LD_VAR 0 1
31693: PPUSH
31694: LD_EXP 116
31698: PUSH
31699: LD_VAR 0 1
31703: ARRAY
31704: PPUSH
31705: LD_VAR 0 2
31709: PPUSH
31710: CALL_OW 3
31714: PPUSH
31715: CALL_OW 1
31719: ST_TO_ADDR
// end ; end ;
31720: GO 31471
31722: POP
31723: POP
// end ;
31724: GO 31389
31726: POP
31727: POP
// end ;
31728: PPOPN 4
31730: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31731: LD_INT 0
31733: PPUSH
31734: PPUSH
// result := false ;
31735: LD_ADDR_VAR 0 4
31739: PUSH
31740: LD_INT 0
31742: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31743: LD_VAR 0 1
31747: PPUSH
31748: CALL_OW 264
31752: PUSH
31753: LD_EXP 42
31757: EQUAL
31758: NOT
31759: IFFALSE 31763
// exit ;
31761: GO 32003
// index := GetElementIndex ( minersList , unit ) ;
31763: LD_ADDR_VAR 0 5
31767: PUSH
31768: LD_EXP 115
31772: PPUSH
31773: LD_VAR 0 1
31777: PPUSH
31778: CALL 37947 0 2
31782: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31783: LD_EXP 116
31787: PUSH
31788: LD_VAR 0 5
31792: ARRAY
31793: PUSH
31794: LD_EXP 117
31798: GREATEREQUAL
31799: IFFALSE 31803
// exit ;
31801: GO 32003
// ComMoveXY ( unit , x , y ) ;
31803: LD_VAR 0 1
31807: PPUSH
31808: LD_VAR 0 2
31812: PPUSH
31813: LD_VAR 0 3
31817: PPUSH
31818: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31822: LD_INT 35
31824: PPUSH
31825: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31829: LD_VAR 0 1
31833: PPUSH
31834: LD_VAR 0 2
31838: PPUSH
31839: LD_VAR 0 3
31843: PPUSH
31844: CALL 68011 0 3
31848: NOT
31849: PUSH
31850: LD_VAR 0 1
31854: PPUSH
31855: CALL_OW 314
31859: AND
31860: IFFALSE 31864
// exit ;
31862: GO 32003
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31864: LD_VAR 0 2
31868: PPUSH
31869: LD_VAR 0 3
31873: PPUSH
31874: CALL_OW 428
31878: PUSH
31879: LD_VAR 0 1
31883: EQUAL
31884: PUSH
31885: LD_VAR 0 1
31889: PPUSH
31890: CALL_OW 314
31894: NOT
31895: AND
31896: IFFALSE 31822
// PlaySoundXY ( x , y , PlantMine ) ;
31898: LD_VAR 0 2
31902: PPUSH
31903: LD_VAR 0 3
31907: PPUSH
31908: LD_STRING PlantMine
31910: PPUSH
31911: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31915: LD_VAR 0 2
31919: PPUSH
31920: LD_VAR 0 3
31924: PPUSH
31925: LD_VAR 0 1
31929: PPUSH
31930: CALL_OW 255
31934: PPUSH
31935: LD_INT 0
31937: PPUSH
31938: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31942: LD_ADDR_EXP 116
31946: PUSH
31947: LD_EXP 116
31951: PPUSH
31952: LD_VAR 0 5
31956: PUSH
31957: LD_EXP 116
31961: PUSH
31962: LD_VAR 0 5
31966: ARRAY
31967: PUSH
31968: LD_INT 1
31970: PLUS
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PPUSH
31976: LD_VAR 0 2
31980: PUSH
31981: LD_VAR 0 3
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PPUSH
31990: CALL 38162 0 3
31994: ST_TO_ADDR
// result := true ;
31995: LD_ADDR_VAR 0 4
31999: PUSH
32000: LD_INT 1
32002: ST_TO_ADDR
// end ;
32003: LD_VAR 0 4
32007: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
32008: LD_INT 0
32010: PPUSH
32011: PPUSH
32012: PPUSH
// if not unit in minersList then
32013: LD_VAR 0 1
32017: PUSH
32018: LD_EXP 115
32022: IN
32023: NOT
32024: IFFALSE 32028
// exit ;
32026: GO 32420
// index := GetElementIndex ( minersList , unit ) ;
32028: LD_ADDR_VAR 0 6
32032: PUSH
32033: LD_EXP 115
32037: PPUSH
32038: LD_VAR 0 1
32042: PPUSH
32043: CALL 37947 0 2
32047: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
32048: LD_ADDR_VAR 0 5
32052: PUSH
32053: DOUBLE
32054: LD_EXP 116
32058: PUSH
32059: LD_VAR 0 6
32063: ARRAY
32064: INC
32065: ST_TO_ADDR
32066: LD_INT 1
32068: PUSH
32069: FOR_DOWNTO
32070: IFFALSE 32231
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
32072: LD_EXP 116
32076: PUSH
32077: LD_VAR 0 6
32081: ARRAY
32082: PUSH
32083: LD_VAR 0 5
32087: ARRAY
32088: PUSH
32089: LD_INT 1
32091: ARRAY
32092: PUSH
32093: LD_VAR 0 2
32097: EQUAL
32098: PUSH
32099: LD_EXP 116
32103: PUSH
32104: LD_VAR 0 6
32108: ARRAY
32109: PUSH
32110: LD_VAR 0 5
32114: ARRAY
32115: PUSH
32116: LD_INT 2
32118: ARRAY
32119: PUSH
32120: LD_VAR 0 3
32124: EQUAL
32125: AND
32126: IFFALSE 32229
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32128: LD_EXP 116
32132: PUSH
32133: LD_VAR 0 6
32137: ARRAY
32138: PUSH
32139: LD_VAR 0 5
32143: ARRAY
32144: PUSH
32145: LD_INT 1
32147: ARRAY
32148: PPUSH
32149: LD_EXP 116
32153: PUSH
32154: LD_VAR 0 6
32158: ARRAY
32159: PUSH
32160: LD_VAR 0 5
32164: ARRAY
32165: PUSH
32166: LD_INT 2
32168: ARRAY
32169: PPUSH
32170: LD_VAR 0 1
32174: PPUSH
32175: CALL_OW 255
32179: PPUSH
32180: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32184: LD_ADDR_EXP 116
32188: PUSH
32189: LD_EXP 116
32193: PPUSH
32194: LD_VAR 0 6
32198: PPUSH
32199: LD_EXP 116
32203: PUSH
32204: LD_VAR 0 6
32208: ARRAY
32209: PPUSH
32210: LD_VAR 0 5
32214: PPUSH
32215: CALL_OW 3
32219: PPUSH
32220: CALL_OW 1
32224: ST_TO_ADDR
// exit ;
32225: POP
32226: POP
32227: GO 32420
// end ; end ;
32229: GO 32069
32231: POP
32232: POP
// for i := minerMinesList [ index ] downto 1 do
32233: LD_ADDR_VAR 0 5
32237: PUSH
32238: DOUBLE
32239: LD_EXP 116
32243: PUSH
32244: LD_VAR 0 6
32248: ARRAY
32249: INC
32250: ST_TO_ADDR
32251: LD_INT 1
32253: PUSH
32254: FOR_DOWNTO
32255: IFFALSE 32418
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
32257: LD_EXP 116
32261: PUSH
32262: LD_VAR 0 6
32266: ARRAY
32267: PUSH
32268: LD_VAR 0 5
32272: ARRAY
32273: PUSH
32274: LD_INT 1
32276: ARRAY
32277: PPUSH
32278: LD_EXP 116
32282: PUSH
32283: LD_VAR 0 6
32287: ARRAY
32288: PUSH
32289: LD_VAR 0 5
32293: ARRAY
32294: PUSH
32295: LD_INT 2
32297: ARRAY
32298: PPUSH
32299: LD_VAR 0 2
32303: PPUSH
32304: LD_VAR 0 3
32308: PPUSH
32309: CALL_OW 298
32313: PUSH
32314: LD_INT 6
32316: LESS
32317: IFFALSE 32416
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32319: LD_EXP 116
32323: PUSH
32324: LD_VAR 0 6
32328: ARRAY
32329: PUSH
32330: LD_VAR 0 5
32334: ARRAY
32335: PUSH
32336: LD_INT 1
32338: ARRAY
32339: PPUSH
32340: LD_EXP 116
32344: PUSH
32345: LD_VAR 0 6
32349: ARRAY
32350: PUSH
32351: LD_VAR 0 5
32355: ARRAY
32356: PUSH
32357: LD_INT 2
32359: ARRAY
32360: PPUSH
32361: LD_VAR 0 1
32365: PPUSH
32366: CALL_OW 255
32370: PPUSH
32371: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32375: LD_ADDR_EXP 116
32379: PUSH
32380: LD_EXP 116
32384: PPUSH
32385: LD_VAR 0 6
32389: PPUSH
32390: LD_EXP 116
32394: PUSH
32395: LD_VAR 0 6
32399: ARRAY
32400: PPUSH
32401: LD_VAR 0 5
32405: PPUSH
32406: CALL_OW 3
32410: PPUSH
32411: CALL_OW 1
32415: ST_TO_ADDR
// end ; end ;
32416: GO 32254
32418: POP
32419: POP
// end ;
32420: LD_VAR 0 4
32424: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32425: LD_INT 0
32427: PPUSH
32428: PPUSH
32429: PPUSH
32430: PPUSH
32431: PPUSH
32432: PPUSH
32433: PPUSH
32434: PPUSH
32435: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32436: LD_VAR 0 1
32440: PPUSH
32441: CALL_OW 264
32445: PUSH
32446: LD_EXP 42
32450: EQUAL
32451: NOT
32452: PUSH
32453: LD_VAR 0 1
32457: PUSH
32458: LD_EXP 115
32462: IN
32463: NOT
32464: OR
32465: IFFALSE 32469
// exit ;
32467: GO 32791
// index := GetElementIndex ( minersList , unit ) ;
32469: LD_ADDR_VAR 0 6
32473: PUSH
32474: LD_EXP 115
32478: PPUSH
32479: LD_VAR 0 1
32483: PPUSH
32484: CALL 37947 0 2
32488: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32489: LD_ADDR_VAR 0 8
32493: PUSH
32494: LD_EXP 117
32498: PUSH
32499: LD_EXP 116
32503: PUSH
32504: LD_VAR 0 6
32508: ARRAY
32509: MINUS
32510: ST_TO_ADDR
// if not minesFreeAmount then
32511: LD_VAR 0 8
32515: NOT
32516: IFFALSE 32520
// exit ;
32518: GO 32791
// tmp := [ ] ;
32520: LD_ADDR_VAR 0 7
32524: PUSH
32525: EMPTY
32526: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32527: LD_ADDR_VAR 0 5
32531: PUSH
32532: DOUBLE
32533: LD_INT 1
32535: DEC
32536: ST_TO_ADDR
32537: LD_VAR 0 8
32541: PUSH
32542: FOR_TO
32543: IFFALSE 32738
// begin _d := rand ( 0 , 5 ) ;
32545: LD_ADDR_VAR 0 11
32549: PUSH
32550: LD_INT 0
32552: PPUSH
32553: LD_INT 5
32555: PPUSH
32556: CALL_OW 12
32560: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32561: LD_ADDR_VAR 0 12
32565: PUSH
32566: LD_INT 2
32568: PPUSH
32569: LD_INT 6
32571: PPUSH
32572: CALL_OW 12
32576: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32577: LD_ADDR_VAR 0 9
32581: PUSH
32582: LD_VAR 0 2
32586: PPUSH
32587: LD_VAR 0 11
32591: PPUSH
32592: LD_VAR 0 12
32596: PPUSH
32597: CALL_OW 272
32601: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32602: LD_ADDR_VAR 0 10
32606: PUSH
32607: LD_VAR 0 3
32611: PPUSH
32612: LD_VAR 0 11
32616: PPUSH
32617: LD_VAR 0 12
32621: PPUSH
32622: CALL_OW 273
32626: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32627: LD_VAR 0 9
32631: PPUSH
32632: LD_VAR 0 10
32636: PPUSH
32637: CALL_OW 488
32641: PUSH
32642: LD_VAR 0 9
32646: PUSH
32647: LD_VAR 0 10
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_VAR 0 7
32660: IN
32661: NOT
32662: AND
32663: PUSH
32664: LD_VAR 0 9
32668: PPUSH
32669: LD_VAR 0 10
32673: PPUSH
32674: CALL_OW 458
32678: NOT
32679: AND
32680: IFFALSE 32722
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32682: LD_ADDR_VAR 0 7
32686: PUSH
32687: LD_VAR 0 7
32691: PPUSH
32692: LD_VAR 0 7
32696: PUSH
32697: LD_INT 1
32699: PLUS
32700: PPUSH
32701: LD_VAR 0 9
32705: PUSH
32706: LD_VAR 0 10
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PPUSH
32715: CALL_OW 1
32719: ST_TO_ADDR
32720: GO 32736
// i := i - 1 ;
32722: LD_ADDR_VAR 0 5
32726: PUSH
32727: LD_VAR 0 5
32731: PUSH
32732: LD_INT 1
32734: MINUS
32735: ST_TO_ADDR
// end ;
32736: GO 32542
32738: POP
32739: POP
// for i in tmp do
32740: LD_ADDR_VAR 0 5
32744: PUSH
32745: LD_VAR 0 7
32749: PUSH
32750: FOR_IN
32751: IFFALSE 32789
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32753: LD_VAR 0 1
32757: PPUSH
32758: LD_VAR 0 5
32762: PUSH
32763: LD_INT 1
32765: ARRAY
32766: PPUSH
32767: LD_VAR 0 5
32771: PUSH
32772: LD_INT 2
32774: ARRAY
32775: PPUSH
32776: CALL 31731 0 3
32780: NOT
32781: IFFALSE 32787
// exit ;
32783: POP
32784: POP
32785: GO 32791
32787: GO 32750
32789: POP
32790: POP
// end ;
32791: LD_VAR 0 4
32795: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
32796: LD_INT 0
32798: PPUSH
32799: PPUSH
32800: PPUSH
32801: PPUSH
32802: PPUSH
32803: PPUSH
32804: PPUSH
// if not GetClass ( unit ) = class_sniper then
32805: LD_VAR 0 1
32809: PPUSH
32810: CALL_OW 257
32814: PUSH
32815: LD_INT 5
32817: EQUAL
32818: NOT
32819: IFFALSE 32823
// exit ;
32821: GO 33211
// dist := 8 ;
32823: LD_ADDR_VAR 0 5
32827: PUSH
32828: LD_INT 8
32830: ST_TO_ADDR
// viewRange := 12 ;
32831: LD_ADDR_VAR 0 7
32835: PUSH
32836: LD_INT 12
32838: ST_TO_ADDR
// side := GetSide ( unit ) ;
32839: LD_ADDR_VAR 0 6
32843: PUSH
32844: LD_VAR 0 1
32848: PPUSH
32849: CALL_OW 255
32853: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32854: LD_INT 61
32856: PPUSH
32857: LD_VAR 0 6
32861: PPUSH
32862: CALL_OW 321
32866: PUSH
32867: LD_INT 2
32869: EQUAL
32870: IFFALSE 32880
// viewRange := 16 ;
32872: LD_ADDR_VAR 0 7
32876: PUSH
32877: LD_INT 16
32879: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32880: LD_VAR 0 1
32884: PPUSH
32885: LD_VAR 0 2
32889: PPUSH
32890: LD_VAR 0 3
32894: PPUSH
32895: CALL_OW 297
32899: PUSH
32900: LD_VAR 0 5
32904: GREATER
32905: IFFALSE 32984
// begin ComMoveXY ( unit , x , y ) ;
32907: LD_VAR 0 1
32911: PPUSH
32912: LD_VAR 0 2
32916: PPUSH
32917: LD_VAR 0 3
32921: PPUSH
32922: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32926: LD_INT 35
32928: PPUSH
32929: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32933: LD_VAR 0 1
32937: PPUSH
32938: LD_VAR 0 2
32942: PPUSH
32943: LD_VAR 0 3
32947: PPUSH
32948: CALL 68011 0 3
32952: NOT
32953: IFFALSE 32957
// exit ;
32955: GO 33211
// until GetDistUnitXY ( unit , x , y ) < dist ;
32957: LD_VAR 0 1
32961: PPUSH
32962: LD_VAR 0 2
32966: PPUSH
32967: LD_VAR 0 3
32971: PPUSH
32972: CALL_OW 297
32976: PUSH
32977: LD_VAR 0 5
32981: LESS
32982: IFFALSE 32926
// end ; ComTurnXY ( unit , x , y ) ;
32984: LD_VAR 0 1
32988: PPUSH
32989: LD_VAR 0 2
32993: PPUSH
32994: LD_VAR 0 3
32998: PPUSH
32999: CALL_OW 118
// wait ( 5 ) ;
33003: LD_INT 5
33005: PPUSH
33006: CALL_OW 67
// _d := GetDir ( unit ) ;
33010: LD_ADDR_VAR 0 10
33014: PUSH
33015: LD_VAR 0 1
33019: PPUSH
33020: CALL_OW 254
33024: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
33025: LD_ADDR_VAR 0 8
33029: PUSH
33030: LD_VAR 0 1
33034: PPUSH
33035: CALL_OW 250
33039: PPUSH
33040: LD_VAR 0 10
33044: PPUSH
33045: LD_VAR 0 5
33049: PPUSH
33050: CALL_OW 272
33054: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
33055: LD_ADDR_VAR 0 9
33059: PUSH
33060: LD_VAR 0 1
33064: PPUSH
33065: CALL_OW 251
33069: PPUSH
33070: LD_VAR 0 10
33074: PPUSH
33075: LD_VAR 0 5
33079: PPUSH
33080: CALL_OW 273
33084: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33085: LD_VAR 0 8
33089: PPUSH
33090: LD_VAR 0 9
33094: PPUSH
33095: CALL_OW 488
33099: NOT
33100: IFFALSE 33104
// exit ;
33102: GO 33211
// ComAnimCustom ( unit , 1 ) ;
33104: LD_VAR 0 1
33108: PPUSH
33109: LD_INT 1
33111: PPUSH
33112: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
33116: LD_VAR 0 8
33120: PPUSH
33121: LD_VAR 0 9
33125: PPUSH
33126: LD_VAR 0 6
33130: PPUSH
33131: LD_VAR 0 7
33135: PPUSH
33136: CALL_OW 330
// repeat wait ( 1 ) ;
33140: LD_INT 1
33142: PPUSH
33143: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
33147: LD_VAR 0 1
33151: PPUSH
33152: CALL_OW 316
33156: PUSH
33157: LD_VAR 0 1
33161: PPUSH
33162: CALL_OW 314
33166: OR
33167: PUSH
33168: LD_VAR 0 1
33172: PPUSH
33173: CALL_OW 302
33177: NOT
33178: OR
33179: PUSH
33180: LD_VAR 0 1
33184: PPUSH
33185: CALL_OW 301
33189: OR
33190: IFFALSE 33140
// RemoveSeeing ( _x , _y , side ) ;
33192: LD_VAR 0 8
33196: PPUSH
33197: LD_VAR 0 9
33201: PPUSH
33202: LD_VAR 0 6
33206: PPUSH
33207: CALL_OW 331
// end ; end_of_file
33211: LD_VAR 0 4
33215: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33216: LD_INT 0
33218: PPUSH
33219: PPUSH
// if exist_mode then
33220: LD_VAR 0 2
33224: IFFALSE 33249
// unit := CreateCharacter ( prefix & ident ) else
33226: LD_ADDR_VAR 0 5
33230: PUSH
33231: LD_VAR 0 3
33235: PUSH
33236: LD_VAR 0 1
33240: STR
33241: PPUSH
33242: CALL_OW 34
33246: ST_TO_ADDR
33247: GO 33264
// unit := NewCharacter ( ident ) ;
33249: LD_ADDR_VAR 0 5
33253: PUSH
33254: LD_VAR 0 1
33258: PPUSH
33259: CALL_OW 25
33263: ST_TO_ADDR
// result := unit ;
33264: LD_ADDR_VAR 0 4
33268: PUSH
33269: LD_VAR 0 5
33273: ST_TO_ADDR
// end ;
33274: LD_VAR 0 4
33278: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33279: LD_INT 0
33281: PPUSH
33282: PPUSH
// if not side or not nation then
33283: LD_VAR 0 1
33287: NOT
33288: PUSH
33289: LD_VAR 0 2
33293: NOT
33294: OR
33295: IFFALSE 33299
// exit ;
33297: GO 34063
// case nation of nation_american :
33299: LD_VAR 0 2
33303: PUSH
33304: LD_INT 1
33306: DOUBLE
33307: EQUAL
33308: IFTRUE 33312
33310: GO 33526
33312: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33313: LD_ADDR_VAR 0 4
33317: PUSH
33318: LD_INT 35
33320: PUSH
33321: LD_INT 45
33323: PUSH
33324: LD_INT 46
33326: PUSH
33327: LD_INT 47
33329: PUSH
33330: LD_INT 82
33332: PUSH
33333: LD_INT 83
33335: PUSH
33336: LD_INT 84
33338: PUSH
33339: LD_INT 85
33341: PUSH
33342: LD_INT 86
33344: PUSH
33345: LD_INT 1
33347: PUSH
33348: LD_INT 2
33350: PUSH
33351: LD_INT 6
33353: PUSH
33354: LD_INT 15
33356: PUSH
33357: LD_INT 16
33359: PUSH
33360: LD_INT 7
33362: PUSH
33363: LD_INT 12
33365: PUSH
33366: LD_INT 13
33368: PUSH
33369: LD_INT 10
33371: PUSH
33372: LD_INT 14
33374: PUSH
33375: LD_INT 20
33377: PUSH
33378: LD_INT 21
33380: PUSH
33381: LD_INT 22
33383: PUSH
33384: LD_INT 25
33386: PUSH
33387: LD_INT 32
33389: PUSH
33390: LD_INT 27
33392: PUSH
33393: LD_INT 36
33395: PUSH
33396: LD_INT 69
33398: PUSH
33399: LD_INT 39
33401: PUSH
33402: LD_INT 34
33404: PUSH
33405: LD_INT 40
33407: PUSH
33408: LD_INT 48
33410: PUSH
33411: LD_INT 49
33413: PUSH
33414: LD_INT 50
33416: PUSH
33417: LD_INT 51
33419: PUSH
33420: LD_INT 52
33422: PUSH
33423: LD_INT 53
33425: PUSH
33426: LD_INT 54
33428: PUSH
33429: LD_INT 55
33431: PUSH
33432: LD_INT 56
33434: PUSH
33435: LD_INT 57
33437: PUSH
33438: LD_INT 58
33440: PUSH
33441: LD_INT 59
33443: PUSH
33444: LD_INT 60
33446: PUSH
33447: LD_INT 61
33449: PUSH
33450: LD_INT 62
33452: PUSH
33453: LD_INT 80
33455: PUSH
33456: LD_INT 82
33458: PUSH
33459: LD_INT 83
33461: PUSH
33462: LD_INT 84
33464: PUSH
33465: LD_INT 85
33467: PUSH
33468: LD_INT 86
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: ST_TO_ADDR
33524: GO 33987
33526: LD_INT 2
33528: DOUBLE
33529: EQUAL
33530: IFTRUE 33534
33532: GO 33756
33534: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
33535: LD_ADDR_VAR 0 4
33539: PUSH
33540: LD_INT 35
33542: PUSH
33543: LD_INT 45
33545: PUSH
33546: LD_INT 46
33548: PUSH
33549: LD_INT 47
33551: PUSH
33552: LD_INT 82
33554: PUSH
33555: LD_INT 83
33557: PUSH
33558: LD_INT 84
33560: PUSH
33561: LD_INT 85
33563: PUSH
33564: LD_INT 87
33566: PUSH
33567: LD_INT 70
33569: PUSH
33570: LD_INT 1
33572: PUSH
33573: LD_INT 11
33575: PUSH
33576: LD_INT 3
33578: PUSH
33579: LD_INT 4
33581: PUSH
33582: LD_INT 5
33584: PUSH
33585: LD_INT 6
33587: PUSH
33588: LD_INT 15
33590: PUSH
33591: LD_INT 18
33593: PUSH
33594: LD_INT 7
33596: PUSH
33597: LD_INT 17
33599: PUSH
33600: LD_INT 8
33602: PUSH
33603: LD_INT 20
33605: PUSH
33606: LD_INT 21
33608: PUSH
33609: LD_INT 22
33611: PUSH
33612: LD_INT 72
33614: PUSH
33615: LD_INT 26
33617: PUSH
33618: LD_INT 69
33620: PUSH
33621: LD_INT 39
33623: PUSH
33624: LD_INT 40
33626: PUSH
33627: LD_INT 41
33629: PUSH
33630: LD_INT 42
33632: PUSH
33633: LD_INT 43
33635: PUSH
33636: LD_INT 48
33638: PUSH
33639: LD_INT 49
33641: PUSH
33642: LD_INT 50
33644: PUSH
33645: LD_INT 51
33647: PUSH
33648: LD_INT 52
33650: PUSH
33651: LD_INT 53
33653: PUSH
33654: LD_INT 54
33656: PUSH
33657: LD_INT 55
33659: PUSH
33660: LD_INT 56
33662: PUSH
33663: LD_INT 60
33665: PUSH
33666: LD_INT 61
33668: PUSH
33669: LD_INT 62
33671: PUSH
33672: LD_INT 66
33674: PUSH
33675: LD_INT 67
33677: PUSH
33678: LD_INT 68
33680: PUSH
33681: LD_INT 81
33683: PUSH
33684: LD_INT 82
33686: PUSH
33687: LD_INT 83
33689: PUSH
33690: LD_INT 84
33692: PUSH
33693: LD_INT 85
33695: PUSH
33696: LD_INT 87
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: ST_TO_ADDR
33754: GO 33987
33756: LD_INT 3
33758: DOUBLE
33759: EQUAL
33760: IFTRUE 33764
33762: GO 33986
33764: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33765: LD_ADDR_VAR 0 4
33769: PUSH
33770: LD_INT 46
33772: PUSH
33773: LD_INT 47
33775: PUSH
33776: LD_INT 1
33778: PUSH
33779: LD_INT 2
33781: PUSH
33782: LD_INT 82
33784: PUSH
33785: LD_INT 83
33787: PUSH
33788: LD_INT 84
33790: PUSH
33791: LD_INT 85
33793: PUSH
33794: LD_INT 86
33796: PUSH
33797: LD_INT 11
33799: PUSH
33800: LD_INT 9
33802: PUSH
33803: LD_INT 20
33805: PUSH
33806: LD_INT 19
33808: PUSH
33809: LD_INT 21
33811: PUSH
33812: LD_INT 24
33814: PUSH
33815: LD_INT 22
33817: PUSH
33818: LD_INT 25
33820: PUSH
33821: LD_INT 28
33823: PUSH
33824: LD_INT 29
33826: PUSH
33827: LD_INT 30
33829: PUSH
33830: LD_INT 31
33832: PUSH
33833: LD_INT 37
33835: PUSH
33836: LD_INT 38
33838: PUSH
33839: LD_INT 32
33841: PUSH
33842: LD_INT 27
33844: PUSH
33845: LD_INT 33
33847: PUSH
33848: LD_INT 69
33850: PUSH
33851: LD_INT 39
33853: PUSH
33854: LD_INT 34
33856: PUSH
33857: LD_INT 40
33859: PUSH
33860: LD_INT 71
33862: PUSH
33863: LD_INT 23
33865: PUSH
33866: LD_INT 44
33868: PUSH
33869: LD_INT 48
33871: PUSH
33872: LD_INT 49
33874: PUSH
33875: LD_INT 50
33877: PUSH
33878: LD_INT 51
33880: PUSH
33881: LD_INT 52
33883: PUSH
33884: LD_INT 53
33886: PUSH
33887: LD_INT 54
33889: PUSH
33890: LD_INT 55
33892: PUSH
33893: LD_INT 56
33895: PUSH
33896: LD_INT 57
33898: PUSH
33899: LD_INT 58
33901: PUSH
33902: LD_INT 59
33904: PUSH
33905: LD_INT 63
33907: PUSH
33908: LD_INT 64
33910: PUSH
33911: LD_INT 65
33913: PUSH
33914: LD_INT 82
33916: PUSH
33917: LD_INT 83
33919: PUSH
33920: LD_INT 84
33922: PUSH
33923: LD_INT 85
33925: PUSH
33926: LD_INT 86
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: ST_TO_ADDR
33984: GO 33987
33986: POP
// if state > - 1 and state < 3 then
33987: LD_VAR 0 3
33991: PUSH
33992: LD_INT 1
33994: NEG
33995: GREATER
33996: PUSH
33997: LD_VAR 0 3
34001: PUSH
34002: LD_INT 3
34004: LESS
34005: AND
34006: IFFALSE 34063
// for i in result do
34008: LD_ADDR_VAR 0 5
34012: PUSH
34013: LD_VAR 0 4
34017: PUSH
34018: FOR_IN
34019: IFFALSE 34061
// if GetTech ( i , side ) <> state then
34021: LD_VAR 0 5
34025: PPUSH
34026: LD_VAR 0 1
34030: PPUSH
34031: CALL_OW 321
34035: PUSH
34036: LD_VAR 0 3
34040: NONEQUAL
34041: IFFALSE 34059
// result := result diff i ;
34043: LD_ADDR_VAR 0 4
34047: PUSH
34048: LD_VAR 0 4
34052: PUSH
34053: LD_VAR 0 5
34057: DIFF
34058: ST_TO_ADDR
34059: GO 34018
34061: POP
34062: POP
// end ;
34063: LD_VAR 0 4
34067: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34068: LD_INT 0
34070: PPUSH
34071: PPUSH
34072: PPUSH
// result := true ;
34073: LD_ADDR_VAR 0 3
34077: PUSH
34078: LD_INT 1
34080: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34081: LD_ADDR_VAR 0 5
34085: PUSH
34086: LD_VAR 0 2
34090: PPUSH
34091: CALL_OW 480
34095: ST_TO_ADDR
// if not tmp then
34096: LD_VAR 0 5
34100: NOT
34101: IFFALSE 34105
// exit ;
34103: GO 34154
// for i in tmp do
34105: LD_ADDR_VAR 0 4
34109: PUSH
34110: LD_VAR 0 5
34114: PUSH
34115: FOR_IN
34116: IFFALSE 34152
// if GetTech ( i , side ) <> state_researched then
34118: LD_VAR 0 4
34122: PPUSH
34123: LD_VAR 0 1
34127: PPUSH
34128: CALL_OW 321
34132: PUSH
34133: LD_INT 2
34135: NONEQUAL
34136: IFFALSE 34150
// begin result := false ;
34138: LD_ADDR_VAR 0 3
34142: PUSH
34143: LD_INT 0
34145: ST_TO_ADDR
// exit ;
34146: POP
34147: POP
34148: GO 34154
// end ;
34150: GO 34115
34152: POP
34153: POP
// end ;
34154: LD_VAR 0 3
34158: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34159: LD_INT 0
34161: PPUSH
34162: PPUSH
34163: PPUSH
34164: PPUSH
34165: PPUSH
34166: PPUSH
34167: PPUSH
34168: PPUSH
34169: PPUSH
34170: PPUSH
34171: PPUSH
34172: PPUSH
34173: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34174: LD_VAR 0 1
34178: NOT
34179: PUSH
34180: LD_VAR 0 1
34184: PPUSH
34185: CALL_OW 257
34189: PUSH
34190: LD_INT 9
34192: NONEQUAL
34193: OR
34194: IFFALSE 34198
// exit ;
34196: GO 34771
// side := GetSide ( unit ) ;
34198: LD_ADDR_VAR 0 9
34202: PUSH
34203: LD_VAR 0 1
34207: PPUSH
34208: CALL_OW 255
34212: ST_TO_ADDR
// tech_space := tech_spacanom ;
34213: LD_ADDR_VAR 0 12
34217: PUSH
34218: LD_INT 29
34220: ST_TO_ADDR
// tech_time := tech_taurad ;
34221: LD_ADDR_VAR 0 13
34225: PUSH
34226: LD_INT 28
34228: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34229: LD_ADDR_VAR 0 11
34233: PUSH
34234: LD_VAR 0 1
34238: PPUSH
34239: CALL_OW 310
34243: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34244: LD_VAR 0 11
34248: PPUSH
34249: CALL_OW 247
34253: PUSH
34254: LD_INT 2
34256: EQUAL
34257: IFFALSE 34261
// exit ;
34259: GO 34771
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34261: LD_ADDR_VAR 0 8
34265: PUSH
34266: LD_INT 81
34268: PUSH
34269: LD_VAR 0 9
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 3
34280: PUSH
34281: LD_INT 21
34283: PUSH
34284: LD_INT 3
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PPUSH
34299: CALL_OW 69
34303: ST_TO_ADDR
// if not tmp then
34304: LD_VAR 0 8
34308: NOT
34309: IFFALSE 34313
// exit ;
34311: GO 34771
// if in_unit then
34313: LD_VAR 0 11
34317: IFFALSE 34341
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34319: LD_ADDR_VAR 0 10
34323: PUSH
34324: LD_VAR 0 8
34328: PPUSH
34329: LD_VAR 0 11
34333: PPUSH
34334: CALL_OW 74
34338: ST_TO_ADDR
34339: GO 34361
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34341: LD_ADDR_VAR 0 10
34345: PUSH
34346: LD_VAR 0 8
34350: PPUSH
34351: LD_VAR 0 1
34355: PPUSH
34356: CALL_OW 74
34360: ST_TO_ADDR
// if not enemy then
34361: LD_VAR 0 10
34365: NOT
34366: IFFALSE 34370
// exit ;
34368: GO 34771
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34370: LD_VAR 0 11
34374: PUSH
34375: LD_VAR 0 11
34379: PPUSH
34380: LD_VAR 0 10
34384: PPUSH
34385: CALL_OW 296
34389: PUSH
34390: LD_INT 13
34392: GREATER
34393: AND
34394: PUSH
34395: LD_VAR 0 1
34399: PPUSH
34400: LD_VAR 0 10
34404: PPUSH
34405: CALL_OW 296
34409: PUSH
34410: LD_INT 12
34412: GREATER
34413: OR
34414: IFFALSE 34418
// exit ;
34416: GO 34771
// missile := [ 1 ] ;
34418: LD_ADDR_VAR 0 14
34422: PUSH
34423: LD_INT 1
34425: PUSH
34426: EMPTY
34427: LIST
34428: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34429: LD_VAR 0 9
34433: PPUSH
34434: LD_VAR 0 12
34438: PPUSH
34439: CALL_OW 325
34443: IFFALSE 34472
// missile := Insert ( missile , missile + 1 , 2 ) ;
34445: LD_ADDR_VAR 0 14
34449: PUSH
34450: LD_VAR 0 14
34454: PPUSH
34455: LD_VAR 0 14
34459: PUSH
34460: LD_INT 1
34462: PLUS
34463: PPUSH
34464: LD_INT 2
34466: PPUSH
34467: CALL_OW 2
34471: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34472: LD_VAR 0 9
34476: PPUSH
34477: LD_VAR 0 13
34481: PPUSH
34482: CALL_OW 325
34486: PUSH
34487: LD_VAR 0 10
34491: PPUSH
34492: CALL_OW 255
34496: PPUSH
34497: LD_VAR 0 13
34501: PPUSH
34502: CALL_OW 325
34506: NOT
34507: AND
34508: IFFALSE 34537
// missile := Insert ( missile , missile + 1 , 3 ) ;
34510: LD_ADDR_VAR 0 14
34514: PUSH
34515: LD_VAR 0 14
34519: PPUSH
34520: LD_VAR 0 14
34524: PUSH
34525: LD_INT 1
34527: PLUS
34528: PPUSH
34529: LD_INT 3
34531: PPUSH
34532: CALL_OW 2
34536: ST_TO_ADDR
// if missile < 2 then
34537: LD_VAR 0 14
34541: PUSH
34542: LD_INT 2
34544: LESS
34545: IFFALSE 34549
// exit ;
34547: GO 34771
// x := GetX ( enemy ) ;
34549: LD_ADDR_VAR 0 4
34553: PUSH
34554: LD_VAR 0 10
34558: PPUSH
34559: CALL_OW 250
34563: ST_TO_ADDR
// y := GetY ( enemy ) ;
34564: LD_ADDR_VAR 0 5
34568: PUSH
34569: LD_VAR 0 10
34573: PPUSH
34574: CALL_OW 251
34578: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34579: LD_ADDR_VAR 0 6
34583: PUSH
34584: LD_VAR 0 4
34588: PUSH
34589: LD_INT 1
34591: NEG
34592: PPUSH
34593: LD_INT 1
34595: PPUSH
34596: CALL_OW 12
34600: PLUS
34601: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34602: LD_ADDR_VAR 0 7
34606: PUSH
34607: LD_VAR 0 5
34611: PUSH
34612: LD_INT 1
34614: NEG
34615: PPUSH
34616: LD_INT 1
34618: PPUSH
34619: CALL_OW 12
34623: PLUS
34624: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34625: LD_VAR 0 6
34629: PPUSH
34630: LD_VAR 0 7
34634: PPUSH
34635: CALL_OW 488
34639: NOT
34640: IFFALSE 34662
// begin _x := x ;
34642: LD_ADDR_VAR 0 6
34646: PUSH
34647: LD_VAR 0 4
34651: ST_TO_ADDR
// _y := y ;
34652: LD_ADDR_VAR 0 7
34656: PUSH
34657: LD_VAR 0 5
34661: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34662: LD_ADDR_VAR 0 3
34666: PUSH
34667: LD_INT 1
34669: PPUSH
34670: LD_VAR 0 14
34674: PPUSH
34675: CALL_OW 12
34679: ST_TO_ADDR
// case i of 1 :
34680: LD_VAR 0 3
34684: PUSH
34685: LD_INT 1
34687: DOUBLE
34688: EQUAL
34689: IFTRUE 34693
34691: GO 34710
34693: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34694: LD_VAR 0 1
34698: PPUSH
34699: LD_VAR 0 10
34703: PPUSH
34704: CALL_OW 115
34708: GO 34771
34710: LD_INT 2
34712: DOUBLE
34713: EQUAL
34714: IFTRUE 34718
34716: GO 34740
34718: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34719: LD_VAR 0 1
34723: PPUSH
34724: LD_VAR 0 6
34728: PPUSH
34729: LD_VAR 0 7
34733: PPUSH
34734: CALL_OW 153
34738: GO 34771
34740: LD_INT 3
34742: DOUBLE
34743: EQUAL
34744: IFTRUE 34748
34746: GO 34770
34748: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34749: LD_VAR 0 1
34753: PPUSH
34754: LD_VAR 0 6
34758: PPUSH
34759: LD_VAR 0 7
34763: PPUSH
34764: CALL_OW 154
34768: GO 34771
34770: POP
// end ;
34771: LD_VAR 0 2
34775: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34776: LD_INT 0
34778: PPUSH
34779: PPUSH
34780: PPUSH
34781: PPUSH
34782: PPUSH
34783: PPUSH
// if not unit or not building then
34784: LD_VAR 0 1
34788: NOT
34789: PUSH
34790: LD_VAR 0 2
34794: NOT
34795: OR
34796: IFFALSE 34800
// exit ;
34798: GO 34958
// x := GetX ( building ) ;
34800: LD_ADDR_VAR 0 5
34804: PUSH
34805: LD_VAR 0 2
34809: PPUSH
34810: CALL_OW 250
34814: ST_TO_ADDR
// y := GetY ( building ) ;
34815: LD_ADDR_VAR 0 6
34819: PUSH
34820: LD_VAR 0 2
34824: PPUSH
34825: CALL_OW 251
34829: ST_TO_ADDR
// for i = 0 to 5 do
34830: LD_ADDR_VAR 0 4
34834: PUSH
34835: DOUBLE
34836: LD_INT 0
34838: DEC
34839: ST_TO_ADDR
34840: LD_INT 5
34842: PUSH
34843: FOR_TO
34844: IFFALSE 34956
// begin _x := ShiftX ( x , i , 3 ) ;
34846: LD_ADDR_VAR 0 7
34850: PUSH
34851: LD_VAR 0 5
34855: PPUSH
34856: LD_VAR 0 4
34860: PPUSH
34861: LD_INT 3
34863: PPUSH
34864: CALL_OW 272
34868: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34869: LD_ADDR_VAR 0 8
34873: PUSH
34874: LD_VAR 0 6
34878: PPUSH
34879: LD_VAR 0 4
34883: PPUSH
34884: LD_INT 3
34886: PPUSH
34887: CALL_OW 273
34891: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34892: LD_VAR 0 7
34896: PPUSH
34897: LD_VAR 0 8
34901: PPUSH
34902: CALL_OW 488
34906: NOT
34907: IFFALSE 34911
// continue ;
34909: GO 34843
// if HexInfo ( _x , _y ) = 0 then
34911: LD_VAR 0 7
34915: PPUSH
34916: LD_VAR 0 8
34920: PPUSH
34921: CALL_OW 428
34925: PUSH
34926: LD_INT 0
34928: EQUAL
34929: IFFALSE 34954
// begin ComMoveXY ( unit , _x , _y ) ;
34931: LD_VAR 0 1
34935: PPUSH
34936: LD_VAR 0 7
34940: PPUSH
34941: LD_VAR 0 8
34945: PPUSH
34946: CALL_OW 111
// exit ;
34950: POP
34951: POP
34952: GO 34958
// end ; end ;
34954: GO 34843
34956: POP
34957: POP
// end ;
34958: LD_VAR 0 3
34962: RET
// export function ScanBase ( side , base_area ) ; begin
34963: LD_INT 0
34965: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34966: LD_ADDR_VAR 0 3
34970: PUSH
34971: LD_VAR 0 2
34975: PPUSH
34976: LD_INT 81
34978: PUSH
34979: LD_VAR 0 1
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PPUSH
34988: CALL_OW 70
34992: ST_TO_ADDR
// end ;
34993: LD_VAR 0 3
34997: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34998: LD_INT 0
35000: PPUSH
35001: PPUSH
35002: PPUSH
35003: PPUSH
// result := false ;
35004: LD_ADDR_VAR 0 2
35008: PUSH
35009: LD_INT 0
35011: ST_TO_ADDR
// side := GetSide ( unit ) ;
35012: LD_ADDR_VAR 0 3
35016: PUSH
35017: LD_VAR 0 1
35021: PPUSH
35022: CALL_OW 255
35026: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35027: LD_ADDR_VAR 0 4
35031: PUSH
35032: LD_VAR 0 1
35036: PPUSH
35037: CALL_OW 248
35041: ST_TO_ADDR
// case nat of 1 :
35042: LD_VAR 0 4
35046: PUSH
35047: LD_INT 1
35049: DOUBLE
35050: EQUAL
35051: IFTRUE 35055
35053: GO 35066
35055: POP
// tech := tech_lassight ; 2 :
35056: LD_ADDR_VAR 0 5
35060: PUSH
35061: LD_INT 12
35063: ST_TO_ADDR
35064: GO 35105
35066: LD_INT 2
35068: DOUBLE
35069: EQUAL
35070: IFTRUE 35074
35072: GO 35085
35074: POP
// tech := tech_mortar ; 3 :
35075: LD_ADDR_VAR 0 5
35079: PUSH
35080: LD_INT 41
35082: ST_TO_ADDR
35083: GO 35105
35085: LD_INT 3
35087: DOUBLE
35088: EQUAL
35089: IFTRUE 35093
35091: GO 35104
35093: POP
// tech := tech_bazooka ; end ;
35094: LD_ADDR_VAR 0 5
35098: PUSH
35099: LD_INT 44
35101: ST_TO_ADDR
35102: GO 35105
35104: POP
// if Researched ( side , tech ) then
35105: LD_VAR 0 3
35109: PPUSH
35110: LD_VAR 0 5
35114: PPUSH
35115: CALL_OW 325
35119: IFFALSE 35146
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35121: LD_ADDR_VAR 0 2
35125: PUSH
35126: LD_INT 5
35128: PUSH
35129: LD_INT 8
35131: PUSH
35132: LD_INT 9
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: LIST
35139: PUSH
35140: LD_VAR 0 4
35144: ARRAY
35145: ST_TO_ADDR
// end ;
35146: LD_VAR 0 2
35150: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35151: LD_INT 0
35153: PPUSH
35154: PPUSH
35155: PPUSH
// if not mines then
35156: LD_VAR 0 2
35160: NOT
35161: IFFALSE 35165
// exit ;
35163: GO 35309
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35165: LD_ADDR_VAR 0 5
35169: PUSH
35170: LD_INT 81
35172: PUSH
35173: LD_VAR 0 1
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 3
35184: PUSH
35185: LD_INT 21
35187: PUSH
35188: LD_INT 3
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PPUSH
35203: CALL_OW 69
35207: ST_TO_ADDR
// for i in mines do
35208: LD_ADDR_VAR 0 4
35212: PUSH
35213: LD_VAR 0 2
35217: PUSH
35218: FOR_IN
35219: IFFALSE 35307
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35221: LD_VAR 0 4
35225: PUSH
35226: LD_INT 1
35228: ARRAY
35229: PPUSH
35230: LD_VAR 0 4
35234: PUSH
35235: LD_INT 2
35237: ARRAY
35238: PPUSH
35239: CALL_OW 458
35243: NOT
35244: IFFALSE 35248
// continue ;
35246: GO 35218
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35248: LD_VAR 0 4
35252: PUSH
35253: LD_INT 1
35255: ARRAY
35256: PPUSH
35257: LD_VAR 0 4
35261: PUSH
35262: LD_INT 2
35264: ARRAY
35265: PPUSH
35266: CALL_OW 428
35270: PUSH
35271: LD_VAR 0 5
35275: IN
35276: IFFALSE 35305
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35278: LD_VAR 0 4
35282: PUSH
35283: LD_INT 1
35285: ARRAY
35286: PPUSH
35287: LD_VAR 0 4
35291: PUSH
35292: LD_INT 2
35294: ARRAY
35295: PPUSH
35296: LD_VAR 0 1
35300: PPUSH
35301: CALL_OW 456
// end ;
35305: GO 35218
35307: POP
35308: POP
// end ;
35309: LD_VAR 0 3
35313: RET
// export function Count ( array ) ; var i ; begin
35314: LD_INT 0
35316: PPUSH
35317: PPUSH
// result := 0 ;
35318: LD_ADDR_VAR 0 2
35322: PUSH
35323: LD_INT 0
35325: ST_TO_ADDR
// for i in array do
35326: LD_ADDR_VAR 0 3
35330: PUSH
35331: LD_VAR 0 1
35335: PUSH
35336: FOR_IN
35337: IFFALSE 35361
// if i then
35339: LD_VAR 0 3
35343: IFFALSE 35359
// result := result + 1 ;
35345: LD_ADDR_VAR 0 2
35349: PUSH
35350: LD_VAR 0 2
35354: PUSH
35355: LD_INT 1
35357: PLUS
35358: ST_TO_ADDR
35359: GO 35336
35361: POP
35362: POP
// end ;
35363: LD_VAR 0 2
35367: RET
// export function IsEmpty ( building ) ; begin
35368: LD_INT 0
35370: PPUSH
// if not building then
35371: LD_VAR 0 1
35375: NOT
35376: IFFALSE 35380
// exit ;
35378: GO 35423
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35380: LD_ADDR_VAR 0 2
35384: PUSH
35385: LD_VAR 0 1
35389: PUSH
35390: LD_INT 22
35392: PUSH
35393: LD_VAR 0 1
35397: PPUSH
35398: CALL_OW 255
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: LD_INT 58
35409: PUSH
35410: EMPTY
35411: LIST
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PPUSH
35417: CALL_OW 69
35421: IN
35422: ST_TO_ADDR
// end ;
35423: LD_VAR 0 2
35427: RET
// export function IsNotFull ( building ) ; begin
35428: LD_INT 0
35430: PPUSH
// if not building then
35431: LD_VAR 0 1
35435: NOT
35436: IFFALSE 35440
// exit ;
35438: GO 35459
// result := UnitsInside ( building ) < 6 ;
35440: LD_ADDR_VAR 0 2
35444: PUSH
35445: LD_VAR 0 1
35449: PPUSH
35450: CALL_OW 313
35454: PUSH
35455: LD_INT 6
35457: LESS
35458: ST_TO_ADDR
// end ;
35459: LD_VAR 0 2
35463: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35464: LD_INT 0
35466: PPUSH
35467: PPUSH
35468: PPUSH
35469: PPUSH
// tmp := [ ] ;
35470: LD_ADDR_VAR 0 3
35474: PUSH
35475: EMPTY
35476: ST_TO_ADDR
// list := [ ] ;
35477: LD_ADDR_VAR 0 5
35481: PUSH
35482: EMPTY
35483: ST_TO_ADDR
// for i = 16 to 25 do
35484: LD_ADDR_VAR 0 4
35488: PUSH
35489: DOUBLE
35490: LD_INT 16
35492: DEC
35493: ST_TO_ADDR
35494: LD_INT 25
35496: PUSH
35497: FOR_TO
35498: IFFALSE 35571
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35500: LD_ADDR_VAR 0 3
35504: PUSH
35505: LD_VAR 0 3
35509: PUSH
35510: LD_INT 22
35512: PUSH
35513: LD_VAR 0 1
35517: PPUSH
35518: CALL_OW 255
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 91
35529: PUSH
35530: LD_VAR 0 1
35534: PUSH
35535: LD_INT 6
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 30
35545: PUSH
35546: LD_VAR 0 4
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: LIST
35559: PUSH
35560: EMPTY
35561: LIST
35562: PPUSH
35563: CALL_OW 69
35567: ADD
35568: ST_TO_ADDR
35569: GO 35497
35571: POP
35572: POP
// for i = 1 to tmp do
35573: LD_ADDR_VAR 0 4
35577: PUSH
35578: DOUBLE
35579: LD_INT 1
35581: DEC
35582: ST_TO_ADDR
35583: LD_VAR 0 3
35587: PUSH
35588: FOR_TO
35589: IFFALSE 35677
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35591: LD_ADDR_VAR 0 5
35595: PUSH
35596: LD_VAR 0 5
35600: PUSH
35601: LD_VAR 0 3
35605: PUSH
35606: LD_VAR 0 4
35610: ARRAY
35611: PPUSH
35612: CALL_OW 266
35616: PUSH
35617: LD_VAR 0 3
35621: PUSH
35622: LD_VAR 0 4
35626: ARRAY
35627: PPUSH
35628: CALL_OW 250
35632: PUSH
35633: LD_VAR 0 3
35637: PUSH
35638: LD_VAR 0 4
35642: ARRAY
35643: PPUSH
35644: CALL_OW 251
35648: PUSH
35649: LD_VAR 0 3
35653: PUSH
35654: LD_VAR 0 4
35658: ARRAY
35659: PPUSH
35660: CALL_OW 254
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: PUSH
35671: EMPTY
35672: LIST
35673: ADD
35674: ST_TO_ADDR
35675: GO 35588
35677: POP
35678: POP
// result := list ;
35679: LD_ADDR_VAR 0 2
35683: PUSH
35684: LD_VAR 0 5
35688: ST_TO_ADDR
// end ;
35689: LD_VAR 0 2
35693: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35694: LD_INT 0
35696: PPUSH
35697: PPUSH
35698: PPUSH
35699: PPUSH
35700: PPUSH
35701: PPUSH
35702: PPUSH
// if not factory then
35703: LD_VAR 0 1
35707: NOT
35708: IFFALSE 35712
// exit ;
35710: GO 36305
// if control = control_apeman then
35712: LD_VAR 0 4
35716: PUSH
35717: LD_INT 5
35719: EQUAL
35720: IFFALSE 35829
// begin tmp := UnitsInside ( factory ) ;
35722: LD_ADDR_VAR 0 8
35726: PUSH
35727: LD_VAR 0 1
35731: PPUSH
35732: CALL_OW 313
35736: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35737: LD_VAR 0 8
35741: PPUSH
35742: LD_INT 25
35744: PUSH
35745: LD_INT 12
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PPUSH
35752: CALL_OW 72
35756: NOT
35757: IFFALSE 35767
// control := control_manual ;
35759: LD_ADDR_VAR 0 4
35763: PUSH
35764: LD_INT 1
35766: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35767: LD_ADDR_VAR 0 8
35771: PUSH
35772: LD_VAR 0 1
35776: PPUSH
35777: CALL 35464 0 1
35781: ST_TO_ADDR
// if tmp then
35782: LD_VAR 0 8
35786: IFFALSE 35829
// begin for i in tmp do
35788: LD_ADDR_VAR 0 7
35792: PUSH
35793: LD_VAR 0 8
35797: PUSH
35798: FOR_IN
35799: IFFALSE 35827
// if i [ 1 ] = b_ext_radio then
35801: LD_VAR 0 7
35805: PUSH
35806: LD_INT 1
35808: ARRAY
35809: PUSH
35810: LD_INT 22
35812: EQUAL
35813: IFFALSE 35825
// begin control := control_remote ;
35815: LD_ADDR_VAR 0 4
35819: PUSH
35820: LD_INT 2
35822: ST_TO_ADDR
// break ;
35823: GO 35827
// end ;
35825: GO 35798
35827: POP
35828: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35829: LD_VAR 0 1
35833: PPUSH
35834: LD_VAR 0 2
35838: PPUSH
35839: LD_VAR 0 3
35843: PPUSH
35844: LD_VAR 0 4
35848: PPUSH
35849: LD_VAR 0 5
35853: PPUSH
35854: CALL_OW 448
35858: IFFALSE 35893
// begin result := [ chassis , engine , control , weapon ] ;
35860: LD_ADDR_VAR 0 6
35864: PUSH
35865: LD_VAR 0 2
35869: PUSH
35870: LD_VAR 0 3
35874: PUSH
35875: LD_VAR 0 4
35879: PUSH
35880: LD_VAR 0 5
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: ST_TO_ADDR
// exit ;
35891: GO 36305
// end ; _chassis := AvailableChassisList ( factory ) ;
35893: LD_ADDR_VAR 0 9
35897: PUSH
35898: LD_VAR 0 1
35902: PPUSH
35903: CALL_OW 475
35907: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35908: LD_ADDR_VAR 0 11
35912: PUSH
35913: LD_VAR 0 1
35917: PPUSH
35918: CALL_OW 476
35922: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35923: LD_ADDR_VAR 0 12
35927: PUSH
35928: LD_VAR 0 1
35932: PPUSH
35933: CALL_OW 477
35937: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35938: LD_ADDR_VAR 0 10
35942: PUSH
35943: LD_VAR 0 1
35947: PPUSH
35948: CALL_OW 478
35952: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35953: LD_VAR 0 9
35957: NOT
35958: PUSH
35959: LD_VAR 0 11
35963: NOT
35964: OR
35965: PUSH
35966: LD_VAR 0 12
35970: NOT
35971: OR
35972: PUSH
35973: LD_VAR 0 10
35977: NOT
35978: OR
35979: IFFALSE 36014
// begin result := [ chassis , engine , control , weapon ] ;
35981: LD_ADDR_VAR 0 6
35985: PUSH
35986: LD_VAR 0 2
35990: PUSH
35991: LD_VAR 0 3
35995: PUSH
35996: LD_VAR 0 4
36000: PUSH
36001: LD_VAR 0 5
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: ST_TO_ADDR
// exit ;
36012: GO 36305
// end ; if not chassis in _chassis then
36014: LD_VAR 0 2
36018: PUSH
36019: LD_VAR 0 9
36023: IN
36024: NOT
36025: IFFALSE 36051
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36027: LD_ADDR_VAR 0 2
36031: PUSH
36032: LD_VAR 0 9
36036: PUSH
36037: LD_INT 1
36039: PPUSH
36040: LD_VAR 0 9
36044: PPUSH
36045: CALL_OW 12
36049: ARRAY
36050: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36051: LD_VAR 0 2
36055: PPUSH
36056: LD_VAR 0 3
36060: PPUSH
36061: CALL 36310 0 2
36065: NOT
36066: IFFALSE 36125
// repeat engine := _engine [ 1 ] ;
36068: LD_ADDR_VAR 0 3
36072: PUSH
36073: LD_VAR 0 11
36077: PUSH
36078: LD_INT 1
36080: ARRAY
36081: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36082: LD_ADDR_VAR 0 11
36086: PUSH
36087: LD_VAR 0 11
36091: PPUSH
36092: LD_INT 1
36094: PPUSH
36095: CALL_OW 3
36099: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36100: LD_VAR 0 2
36104: PPUSH
36105: LD_VAR 0 3
36109: PPUSH
36110: CALL 36310 0 2
36114: PUSH
36115: LD_VAR 0 11
36119: PUSH
36120: EMPTY
36121: EQUAL
36122: OR
36123: IFFALSE 36068
// if not control in _control then
36125: LD_VAR 0 4
36129: PUSH
36130: LD_VAR 0 12
36134: IN
36135: NOT
36136: IFFALSE 36162
// control := _control [ rand ( 1 , _control ) ] ;
36138: LD_ADDR_VAR 0 4
36142: PUSH
36143: LD_VAR 0 12
36147: PUSH
36148: LD_INT 1
36150: PPUSH
36151: LD_VAR 0 12
36155: PPUSH
36156: CALL_OW 12
36160: ARRAY
36161: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36162: LD_VAR 0 2
36166: PPUSH
36167: LD_VAR 0 5
36171: PPUSH
36172: CALL 36530 0 2
36176: NOT
36177: IFFALSE 36236
// repeat weapon := _weapon [ 1 ] ;
36179: LD_ADDR_VAR 0 5
36183: PUSH
36184: LD_VAR 0 10
36188: PUSH
36189: LD_INT 1
36191: ARRAY
36192: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36193: LD_ADDR_VAR 0 10
36197: PUSH
36198: LD_VAR 0 10
36202: PPUSH
36203: LD_INT 1
36205: PPUSH
36206: CALL_OW 3
36210: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36211: LD_VAR 0 2
36215: PPUSH
36216: LD_VAR 0 5
36220: PPUSH
36221: CALL 36530 0 2
36225: PUSH
36226: LD_VAR 0 10
36230: PUSH
36231: EMPTY
36232: EQUAL
36233: OR
36234: IFFALSE 36179
// result := [ ] ;
36236: LD_ADDR_VAR 0 6
36240: PUSH
36241: EMPTY
36242: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36243: LD_VAR 0 1
36247: PPUSH
36248: LD_VAR 0 2
36252: PPUSH
36253: LD_VAR 0 3
36257: PPUSH
36258: LD_VAR 0 4
36262: PPUSH
36263: LD_VAR 0 5
36267: PPUSH
36268: CALL_OW 448
36272: IFFALSE 36305
// result := [ chassis , engine , control , weapon ] ;
36274: LD_ADDR_VAR 0 6
36278: PUSH
36279: LD_VAR 0 2
36283: PUSH
36284: LD_VAR 0 3
36288: PUSH
36289: LD_VAR 0 4
36293: PUSH
36294: LD_VAR 0 5
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: ST_TO_ADDR
// end ;
36305: LD_VAR 0 6
36309: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36310: LD_INT 0
36312: PPUSH
// if not chassis or not engine then
36313: LD_VAR 0 1
36317: NOT
36318: PUSH
36319: LD_VAR 0 2
36323: NOT
36324: OR
36325: IFFALSE 36329
// exit ;
36327: GO 36525
// case engine of engine_solar :
36329: LD_VAR 0 2
36333: PUSH
36334: LD_INT 2
36336: DOUBLE
36337: EQUAL
36338: IFTRUE 36342
36340: GO 36380
36342: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36343: LD_ADDR_VAR 0 3
36347: PUSH
36348: LD_INT 11
36350: PUSH
36351: LD_INT 12
36353: PUSH
36354: LD_INT 13
36356: PUSH
36357: LD_INT 14
36359: PUSH
36360: LD_INT 1
36362: PUSH
36363: LD_INT 2
36365: PUSH
36366: LD_INT 3
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: ST_TO_ADDR
36378: GO 36509
36380: LD_INT 1
36382: DOUBLE
36383: EQUAL
36384: IFTRUE 36388
36386: GO 36450
36388: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36389: LD_ADDR_VAR 0 3
36393: PUSH
36394: LD_INT 11
36396: PUSH
36397: LD_INT 12
36399: PUSH
36400: LD_INT 13
36402: PUSH
36403: LD_INT 14
36405: PUSH
36406: LD_INT 1
36408: PUSH
36409: LD_INT 2
36411: PUSH
36412: LD_INT 3
36414: PUSH
36415: LD_INT 4
36417: PUSH
36418: LD_INT 5
36420: PUSH
36421: LD_INT 21
36423: PUSH
36424: LD_INT 23
36426: PUSH
36427: LD_INT 22
36429: PUSH
36430: LD_INT 24
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: ST_TO_ADDR
36448: GO 36509
36450: LD_INT 3
36452: DOUBLE
36453: EQUAL
36454: IFTRUE 36458
36456: GO 36508
36458: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36459: LD_ADDR_VAR 0 3
36463: PUSH
36464: LD_INT 13
36466: PUSH
36467: LD_INT 14
36469: PUSH
36470: LD_INT 2
36472: PUSH
36473: LD_INT 3
36475: PUSH
36476: LD_INT 4
36478: PUSH
36479: LD_INT 5
36481: PUSH
36482: LD_INT 21
36484: PUSH
36485: LD_INT 22
36487: PUSH
36488: LD_INT 23
36490: PUSH
36491: LD_INT 24
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: ST_TO_ADDR
36506: GO 36509
36508: POP
// result := ( chassis in result ) ;
36509: LD_ADDR_VAR 0 3
36513: PUSH
36514: LD_VAR 0 1
36518: PUSH
36519: LD_VAR 0 3
36523: IN
36524: ST_TO_ADDR
// end ;
36525: LD_VAR 0 3
36529: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36530: LD_INT 0
36532: PPUSH
// if not chassis or not weapon then
36533: LD_VAR 0 1
36537: NOT
36538: PUSH
36539: LD_VAR 0 2
36543: NOT
36544: OR
36545: IFFALSE 36549
// exit ;
36547: GO 37575
// case weapon of us_machine_gun :
36549: LD_VAR 0 2
36553: PUSH
36554: LD_INT 2
36556: DOUBLE
36557: EQUAL
36558: IFTRUE 36562
36560: GO 36592
36562: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36563: LD_ADDR_VAR 0 3
36567: PUSH
36568: LD_INT 1
36570: PUSH
36571: LD_INT 2
36573: PUSH
36574: LD_INT 3
36576: PUSH
36577: LD_INT 4
36579: PUSH
36580: LD_INT 5
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: ST_TO_ADDR
36590: GO 37559
36592: LD_INT 3
36594: DOUBLE
36595: EQUAL
36596: IFTRUE 36600
36598: GO 36630
36600: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36601: LD_ADDR_VAR 0 3
36605: PUSH
36606: LD_INT 1
36608: PUSH
36609: LD_INT 2
36611: PUSH
36612: LD_INT 3
36614: PUSH
36615: LD_INT 4
36617: PUSH
36618: LD_INT 5
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: ST_TO_ADDR
36628: GO 37559
36630: LD_INT 11
36632: DOUBLE
36633: EQUAL
36634: IFTRUE 36638
36636: GO 36668
36638: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36639: LD_ADDR_VAR 0 3
36643: PUSH
36644: LD_INT 1
36646: PUSH
36647: LD_INT 2
36649: PUSH
36650: LD_INT 3
36652: PUSH
36653: LD_INT 4
36655: PUSH
36656: LD_INT 5
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: ST_TO_ADDR
36666: GO 37559
36668: LD_INT 4
36670: DOUBLE
36671: EQUAL
36672: IFTRUE 36676
36674: GO 36702
36676: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36677: LD_ADDR_VAR 0 3
36681: PUSH
36682: LD_INT 2
36684: PUSH
36685: LD_INT 3
36687: PUSH
36688: LD_INT 4
36690: PUSH
36691: LD_INT 5
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: ST_TO_ADDR
36700: GO 37559
36702: LD_INT 5
36704: DOUBLE
36705: EQUAL
36706: IFTRUE 36710
36708: GO 36736
36710: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36711: LD_ADDR_VAR 0 3
36715: PUSH
36716: LD_INT 2
36718: PUSH
36719: LD_INT 3
36721: PUSH
36722: LD_INT 4
36724: PUSH
36725: LD_INT 5
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: ST_TO_ADDR
36734: GO 37559
36736: LD_INT 9
36738: DOUBLE
36739: EQUAL
36740: IFTRUE 36744
36742: GO 36770
36744: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36745: LD_ADDR_VAR 0 3
36749: PUSH
36750: LD_INT 2
36752: PUSH
36753: LD_INT 3
36755: PUSH
36756: LD_INT 4
36758: PUSH
36759: LD_INT 5
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: ST_TO_ADDR
36768: GO 37559
36770: LD_INT 7
36772: DOUBLE
36773: EQUAL
36774: IFTRUE 36778
36776: GO 36804
36778: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36779: LD_ADDR_VAR 0 3
36783: PUSH
36784: LD_INT 2
36786: PUSH
36787: LD_INT 3
36789: PUSH
36790: LD_INT 4
36792: PUSH
36793: LD_INT 5
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: ST_TO_ADDR
36802: GO 37559
36804: LD_INT 12
36806: DOUBLE
36807: EQUAL
36808: IFTRUE 36812
36810: GO 36838
36812: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36813: LD_ADDR_VAR 0 3
36817: PUSH
36818: LD_INT 2
36820: PUSH
36821: LD_INT 3
36823: PUSH
36824: LD_INT 4
36826: PUSH
36827: LD_INT 5
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: ST_TO_ADDR
36836: GO 37559
36838: LD_INT 13
36840: DOUBLE
36841: EQUAL
36842: IFTRUE 36846
36844: GO 36872
36846: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36847: LD_ADDR_VAR 0 3
36851: PUSH
36852: LD_INT 2
36854: PUSH
36855: LD_INT 3
36857: PUSH
36858: LD_INT 4
36860: PUSH
36861: LD_INT 5
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: ST_TO_ADDR
36870: GO 37559
36872: LD_INT 14
36874: DOUBLE
36875: EQUAL
36876: IFTRUE 36880
36878: GO 36898
36880: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36881: LD_ADDR_VAR 0 3
36885: PUSH
36886: LD_INT 4
36888: PUSH
36889: LD_INT 5
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: ST_TO_ADDR
36896: GO 37559
36898: LD_INT 6
36900: DOUBLE
36901: EQUAL
36902: IFTRUE 36906
36904: GO 36924
36906: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36907: LD_ADDR_VAR 0 3
36911: PUSH
36912: LD_INT 4
36914: PUSH
36915: LD_INT 5
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: ST_TO_ADDR
36922: GO 37559
36924: LD_INT 10
36926: DOUBLE
36927: EQUAL
36928: IFTRUE 36932
36930: GO 36950
36932: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36933: LD_ADDR_VAR 0 3
36937: PUSH
36938: LD_INT 4
36940: PUSH
36941: LD_INT 5
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: ST_TO_ADDR
36948: GO 37559
36950: LD_INT 22
36952: DOUBLE
36953: EQUAL
36954: IFTRUE 36958
36956: GO 36984
36958: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36959: LD_ADDR_VAR 0 3
36963: PUSH
36964: LD_INT 11
36966: PUSH
36967: LD_INT 12
36969: PUSH
36970: LD_INT 13
36972: PUSH
36973: LD_INT 14
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: ST_TO_ADDR
36982: GO 37559
36984: LD_INT 23
36986: DOUBLE
36987: EQUAL
36988: IFTRUE 36992
36990: GO 37018
36992: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36993: LD_ADDR_VAR 0 3
36997: PUSH
36998: LD_INT 11
37000: PUSH
37001: LD_INT 12
37003: PUSH
37004: LD_INT 13
37006: PUSH
37007: LD_INT 14
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: ST_TO_ADDR
37016: GO 37559
37018: LD_INT 24
37020: DOUBLE
37021: EQUAL
37022: IFTRUE 37026
37024: GO 37052
37026: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37027: LD_ADDR_VAR 0 3
37031: PUSH
37032: LD_INT 11
37034: PUSH
37035: LD_INT 12
37037: PUSH
37038: LD_INT 13
37040: PUSH
37041: LD_INT 14
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: ST_TO_ADDR
37050: GO 37559
37052: LD_INT 30
37054: DOUBLE
37055: EQUAL
37056: IFTRUE 37060
37058: GO 37086
37060: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37061: LD_ADDR_VAR 0 3
37065: PUSH
37066: LD_INT 11
37068: PUSH
37069: LD_INT 12
37071: PUSH
37072: LD_INT 13
37074: PUSH
37075: LD_INT 14
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: ST_TO_ADDR
37084: GO 37559
37086: LD_INT 25
37088: DOUBLE
37089: EQUAL
37090: IFTRUE 37094
37092: GO 37112
37094: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37095: LD_ADDR_VAR 0 3
37099: PUSH
37100: LD_INT 13
37102: PUSH
37103: LD_INT 14
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: ST_TO_ADDR
37110: GO 37559
37112: LD_INT 27
37114: DOUBLE
37115: EQUAL
37116: IFTRUE 37120
37118: GO 37138
37120: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37121: LD_ADDR_VAR 0 3
37125: PUSH
37126: LD_INT 13
37128: PUSH
37129: LD_INT 14
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: ST_TO_ADDR
37136: GO 37559
37138: LD_INT 28
37140: DOUBLE
37141: EQUAL
37142: IFTRUE 37146
37144: GO 37164
37146: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37147: LD_ADDR_VAR 0 3
37151: PUSH
37152: LD_INT 13
37154: PUSH
37155: LD_INT 14
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: ST_TO_ADDR
37162: GO 37559
37164: LD_INT 29
37166: DOUBLE
37167: EQUAL
37168: IFTRUE 37172
37170: GO 37190
37172: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37173: LD_ADDR_VAR 0 3
37177: PUSH
37178: LD_INT 13
37180: PUSH
37181: LD_INT 14
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: ST_TO_ADDR
37188: GO 37559
37190: LD_INT 31
37192: DOUBLE
37193: EQUAL
37194: IFTRUE 37198
37196: GO 37216
37198: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37199: LD_ADDR_VAR 0 3
37203: PUSH
37204: LD_INT 13
37206: PUSH
37207: LD_INT 14
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: ST_TO_ADDR
37214: GO 37559
37216: LD_INT 26
37218: DOUBLE
37219: EQUAL
37220: IFTRUE 37224
37222: GO 37242
37224: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37225: LD_ADDR_VAR 0 3
37229: PUSH
37230: LD_INT 13
37232: PUSH
37233: LD_INT 14
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: ST_TO_ADDR
37240: GO 37559
37242: LD_INT 42
37244: DOUBLE
37245: EQUAL
37246: IFTRUE 37250
37248: GO 37276
37250: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37251: LD_ADDR_VAR 0 3
37255: PUSH
37256: LD_INT 21
37258: PUSH
37259: LD_INT 22
37261: PUSH
37262: LD_INT 23
37264: PUSH
37265: LD_INT 24
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: ST_TO_ADDR
37274: GO 37559
37276: LD_INT 43
37278: DOUBLE
37279: EQUAL
37280: IFTRUE 37284
37282: GO 37310
37284: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37285: LD_ADDR_VAR 0 3
37289: PUSH
37290: LD_INT 21
37292: PUSH
37293: LD_INT 22
37295: PUSH
37296: LD_INT 23
37298: PUSH
37299: LD_INT 24
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: ST_TO_ADDR
37308: GO 37559
37310: LD_INT 44
37312: DOUBLE
37313: EQUAL
37314: IFTRUE 37318
37316: GO 37344
37318: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37319: LD_ADDR_VAR 0 3
37323: PUSH
37324: LD_INT 21
37326: PUSH
37327: LD_INT 22
37329: PUSH
37330: LD_INT 23
37332: PUSH
37333: LD_INT 24
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: ST_TO_ADDR
37342: GO 37559
37344: LD_INT 45
37346: DOUBLE
37347: EQUAL
37348: IFTRUE 37352
37350: GO 37378
37352: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37353: LD_ADDR_VAR 0 3
37357: PUSH
37358: LD_INT 21
37360: PUSH
37361: LD_INT 22
37363: PUSH
37364: LD_INT 23
37366: PUSH
37367: LD_INT 24
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: ST_TO_ADDR
37376: GO 37559
37378: LD_INT 49
37380: DOUBLE
37381: EQUAL
37382: IFTRUE 37386
37384: GO 37412
37386: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37387: LD_ADDR_VAR 0 3
37391: PUSH
37392: LD_INT 21
37394: PUSH
37395: LD_INT 22
37397: PUSH
37398: LD_INT 23
37400: PUSH
37401: LD_INT 24
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: ST_TO_ADDR
37410: GO 37559
37412: LD_INT 51
37414: DOUBLE
37415: EQUAL
37416: IFTRUE 37420
37418: GO 37446
37420: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37421: LD_ADDR_VAR 0 3
37425: PUSH
37426: LD_INT 21
37428: PUSH
37429: LD_INT 22
37431: PUSH
37432: LD_INT 23
37434: PUSH
37435: LD_INT 24
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: ST_TO_ADDR
37444: GO 37559
37446: LD_INT 52
37448: DOUBLE
37449: EQUAL
37450: IFTRUE 37454
37452: GO 37480
37454: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37455: LD_ADDR_VAR 0 3
37459: PUSH
37460: LD_INT 21
37462: PUSH
37463: LD_INT 22
37465: PUSH
37466: LD_INT 23
37468: PUSH
37469: LD_INT 24
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: ST_TO_ADDR
37478: GO 37559
37480: LD_INT 53
37482: DOUBLE
37483: EQUAL
37484: IFTRUE 37488
37486: GO 37506
37488: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37489: LD_ADDR_VAR 0 3
37493: PUSH
37494: LD_INT 23
37496: PUSH
37497: LD_INT 24
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: ST_TO_ADDR
37504: GO 37559
37506: LD_INT 46
37508: DOUBLE
37509: EQUAL
37510: IFTRUE 37514
37512: GO 37532
37514: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37515: LD_ADDR_VAR 0 3
37519: PUSH
37520: LD_INT 23
37522: PUSH
37523: LD_INT 24
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: ST_TO_ADDR
37530: GO 37559
37532: LD_INT 47
37534: DOUBLE
37535: EQUAL
37536: IFTRUE 37540
37538: GO 37558
37540: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37541: LD_ADDR_VAR 0 3
37545: PUSH
37546: LD_INT 23
37548: PUSH
37549: LD_INT 24
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: ST_TO_ADDR
37556: GO 37559
37558: POP
// result := ( chassis in result ) ;
37559: LD_ADDR_VAR 0 3
37563: PUSH
37564: LD_VAR 0 1
37568: PUSH
37569: LD_VAR 0 3
37573: IN
37574: ST_TO_ADDR
// end ;
37575: LD_VAR 0 3
37579: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37580: LD_INT 0
37582: PPUSH
37583: PPUSH
37584: PPUSH
37585: PPUSH
37586: PPUSH
37587: PPUSH
37588: PPUSH
// result := array ;
37589: LD_ADDR_VAR 0 5
37593: PUSH
37594: LD_VAR 0 1
37598: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37599: LD_VAR 0 1
37603: NOT
37604: PUSH
37605: LD_VAR 0 2
37609: NOT
37610: OR
37611: PUSH
37612: LD_VAR 0 3
37616: NOT
37617: OR
37618: PUSH
37619: LD_VAR 0 2
37623: PUSH
37624: LD_VAR 0 1
37628: GREATER
37629: OR
37630: PUSH
37631: LD_VAR 0 3
37635: PUSH
37636: LD_VAR 0 1
37640: GREATER
37641: OR
37642: IFFALSE 37646
// exit ;
37644: GO 37942
// if direction then
37646: LD_VAR 0 4
37650: IFFALSE 37714
// begin d := 1 ;
37652: LD_ADDR_VAR 0 9
37656: PUSH
37657: LD_INT 1
37659: ST_TO_ADDR
// if i_from > i_to then
37660: LD_VAR 0 2
37664: PUSH
37665: LD_VAR 0 3
37669: GREATER
37670: IFFALSE 37696
// length := ( array - i_from ) + i_to else
37672: LD_ADDR_VAR 0 11
37676: PUSH
37677: LD_VAR 0 1
37681: PUSH
37682: LD_VAR 0 2
37686: MINUS
37687: PUSH
37688: LD_VAR 0 3
37692: PLUS
37693: ST_TO_ADDR
37694: GO 37712
// length := i_to - i_from ;
37696: LD_ADDR_VAR 0 11
37700: PUSH
37701: LD_VAR 0 3
37705: PUSH
37706: LD_VAR 0 2
37710: MINUS
37711: ST_TO_ADDR
// end else
37712: GO 37775
// begin d := - 1 ;
37714: LD_ADDR_VAR 0 9
37718: PUSH
37719: LD_INT 1
37721: NEG
37722: ST_TO_ADDR
// if i_from > i_to then
37723: LD_VAR 0 2
37727: PUSH
37728: LD_VAR 0 3
37732: GREATER
37733: IFFALSE 37753
// length := i_from - i_to else
37735: LD_ADDR_VAR 0 11
37739: PUSH
37740: LD_VAR 0 2
37744: PUSH
37745: LD_VAR 0 3
37749: MINUS
37750: ST_TO_ADDR
37751: GO 37775
// length := ( array - i_to ) + i_from ;
37753: LD_ADDR_VAR 0 11
37757: PUSH
37758: LD_VAR 0 1
37762: PUSH
37763: LD_VAR 0 3
37767: MINUS
37768: PUSH
37769: LD_VAR 0 2
37773: PLUS
37774: ST_TO_ADDR
// end ; if not length then
37775: LD_VAR 0 11
37779: NOT
37780: IFFALSE 37784
// exit ;
37782: GO 37942
// tmp := array ;
37784: LD_ADDR_VAR 0 10
37788: PUSH
37789: LD_VAR 0 1
37793: ST_TO_ADDR
// for i = 1 to length do
37794: LD_ADDR_VAR 0 6
37798: PUSH
37799: DOUBLE
37800: LD_INT 1
37802: DEC
37803: ST_TO_ADDR
37804: LD_VAR 0 11
37808: PUSH
37809: FOR_TO
37810: IFFALSE 37930
// begin for j = 1 to array do
37812: LD_ADDR_VAR 0 7
37816: PUSH
37817: DOUBLE
37818: LD_INT 1
37820: DEC
37821: ST_TO_ADDR
37822: LD_VAR 0 1
37826: PUSH
37827: FOR_TO
37828: IFFALSE 37916
// begin k := j + d ;
37830: LD_ADDR_VAR 0 8
37834: PUSH
37835: LD_VAR 0 7
37839: PUSH
37840: LD_VAR 0 9
37844: PLUS
37845: ST_TO_ADDR
// if k > array then
37846: LD_VAR 0 8
37850: PUSH
37851: LD_VAR 0 1
37855: GREATER
37856: IFFALSE 37866
// k := 1 ;
37858: LD_ADDR_VAR 0 8
37862: PUSH
37863: LD_INT 1
37865: ST_TO_ADDR
// if not k then
37866: LD_VAR 0 8
37870: NOT
37871: IFFALSE 37883
// k := array ;
37873: LD_ADDR_VAR 0 8
37877: PUSH
37878: LD_VAR 0 1
37882: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37883: LD_ADDR_VAR 0 10
37887: PUSH
37888: LD_VAR 0 10
37892: PPUSH
37893: LD_VAR 0 8
37897: PPUSH
37898: LD_VAR 0 1
37902: PUSH
37903: LD_VAR 0 7
37907: ARRAY
37908: PPUSH
37909: CALL_OW 1
37913: ST_TO_ADDR
// end ;
37914: GO 37827
37916: POP
37917: POP
// array := tmp ;
37918: LD_ADDR_VAR 0 1
37922: PUSH
37923: LD_VAR 0 10
37927: ST_TO_ADDR
// end ;
37928: GO 37809
37930: POP
37931: POP
// result := array ;
37932: LD_ADDR_VAR 0 5
37936: PUSH
37937: LD_VAR 0 1
37941: ST_TO_ADDR
// end ;
37942: LD_VAR 0 5
37946: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37947: LD_INT 0
37949: PPUSH
37950: PPUSH
// result := 0 ;
37951: LD_ADDR_VAR 0 3
37955: PUSH
37956: LD_INT 0
37958: ST_TO_ADDR
// if not array or not value in array then
37959: LD_VAR 0 1
37963: NOT
37964: PUSH
37965: LD_VAR 0 2
37969: PUSH
37970: LD_VAR 0 1
37974: IN
37975: NOT
37976: OR
37977: IFFALSE 37981
// exit ;
37979: GO 38035
// for i = 1 to array do
37981: LD_ADDR_VAR 0 4
37985: PUSH
37986: DOUBLE
37987: LD_INT 1
37989: DEC
37990: ST_TO_ADDR
37991: LD_VAR 0 1
37995: PUSH
37996: FOR_TO
37997: IFFALSE 38033
// if value = array [ i ] then
37999: LD_VAR 0 2
38003: PUSH
38004: LD_VAR 0 1
38008: PUSH
38009: LD_VAR 0 4
38013: ARRAY
38014: EQUAL
38015: IFFALSE 38031
// begin result := i ;
38017: LD_ADDR_VAR 0 3
38021: PUSH
38022: LD_VAR 0 4
38026: ST_TO_ADDR
// exit ;
38027: POP
38028: POP
38029: GO 38035
// end ;
38031: GO 37996
38033: POP
38034: POP
// end ;
38035: LD_VAR 0 3
38039: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38040: LD_INT 0
38042: PPUSH
// vc_chassis := chassis ;
38043: LD_ADDR_OWVAR 37
38047: PUSH
38048: LD_VAR 0 1
38052: ST_TO_ADDR
// vc_engine := engine ;
38053: LD_ADDR_OWVAR 39
38057: PUSH
38058: LD_VAR 0 2
38062: ST_TO_ADDR
// vc_control := control ;
38063: LD_ADDR_OWVAR 38
38067: PUSH
38068: LD_VAR 0 3
38072: ST_TO_ADDR
// vc_weapon := weapon ;
38073: LD_ADDR_OWVAR 40
38077: PUSH
38078: LD_VAR 0 4
38082: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38083: LD_ADDR_OWVAR 41
38087: PUSH
38088: LD_VAR 0 5
38092: ST_TO_ADDR
// end ;
38093: LD_VAR 0 6
38097: RET
// export function WantPlant ( unit ) ; var task ; begin
38098: LD_INT 0
38100: PPUSH
38101: PPUSH
// result := false ;
38102: LD_ADDR_VAR 0 2
38106: PUSH
38107: LD_INT 0
38109: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38110: LD_ADDR_VAR 0 3
38114: PUSH
38115: LD_VAR 0 1
38119: PPUSH
38120: CALL_OW 437
38124: ST_TO_ADDR
// if task then
38125: LD_VAR 0 3
38129: IFFALSE 38157
// if task [ 1 ] [ 1 ] = p then
38131: LD_VAR 0 3
38135: PUSH
38136: LD_INT 1
38138: ARRAY
38139: PUSH
38140: LD_INT 1
38142: ARRAY
38143: PUSH
38144: LD_STRING p
38146: EQUAL
38147: IFFALSE 38157
// result := true ;
38149: LD_ADDR_VAR 0 2
38153: PUSH
38154: LD_INT 1
38156: ST_TO_ADDR
// end ;
38157: LD_VAR 0 2
38161: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38162: LD_INT 0
38164: PPUSH
38165: PPUSH
38166: PPUSH
38167: PPUSH
// if pos < 1 then
38168: LD_VAR 0 2
38172: PUSH
38173: LD_INT 1
38175: LESS
38176: IFFALSE 38180
// exit ;
38178: GO 38483
// if pos = 1 then
38180: LD_VAR 0 2
38184: PUSH
38185: LD_INT 1
38187: EQUAL
38188: IFFALSE 38221
// result := Replace ( arr , pos [ 1 ] , value ) else
38190: LD_ADDR_VAR 0 4
38194: PUSH
38195: LD_VAR 0 1
38199: PPUSH
38200: LD_VAR 0 2
38204: PUSH
38205: LD_INT 1
38207: ARRAY
38208: PPUSH
38209: LD_VAR 0 3
38213: PPUSH
38214: CALL_OW 1
38218: ST_TO_ADDR
38219: GO 38483
// begin tmp := arr ;
38221: LD_ADDR_VAR 0 6
38225: PUSH
38226: LD_VAR 0 1
38230: ST_TO_ADDR
// s_arr := [ tmp ] ;
38231: LD_ADDR_VAR 0 7
38235: PUSH
38236: LD_VAR 0 6
38240: PUSH
38241: EMPTY
38242: LIST
38243: ST_TO_ADDR
// for i = 1 to pos - 1 do
38244: LD_ADDR_VAR 0 5
38248: PUSH
38249: DOUBLE
38250: LD_INT 1
38252: DEC
38253: ST_TO_ADDR
38254: LD_VAR 0 2
38258: PUSH
38259: LD_INT 1
38261: MINUS
38262: PUSH
38263: FOR_TO
38264: IFFALSE 38309
// begin tmp := tmp [ pos [ i ] ] ;
38266: LD_ADDR_VAR 0 6
38270: PUSH
38271: LD_VAR 0 6
38275: PUSH
38276: LD_VAR 0 2
38280: PUSH
38281: LD_VAR 0 5
38285: ARRAY
38286: ARRAY
38287: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38288: LD_ADDR_VAR 0 7
38292: PUSH
38293: LD_VAR 0 7
38297: PUSH
38298: LD_VAR 0 6
38302: PUSH
38303: EMPTY
38304: LIST
38305: ADD
38306: ST_TO_ADDR
// end ;
38307: GO 38263
38309: POP
38310: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38311: LD_ADDR_VAR 0 6
38315: PUSH
38316: LD_VAR 0 6
38320: PPUSH
38321: LD_VAR 0 2
38325: PUSH
38326: LD_VAR 0 2
38330: ARRAY
38331: PPUSH
38332: LD_VAR 0 3
38336: PPUSH
38337: CALL_OW 1
38341: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38342: LD_ADDR_VAR 0 7
38346: PUSH
38347: LD_VAR 0 7
38351: PPUSH
38352: LD_VAR 0 7
38356: PPUSH
38357: LD_VAR 0 6
38361: PPUSH
38362: CALL_OW 1
38366: ST_TO_ADDR
// for i = s_arr downto 2 do
38367: LD_ADDR_VAR 0 5
38371: PUSH
38372: DOUBLE
38373: LD_VAR 0 7
38377: INC
38378: ST_TO_ADDR
38379: LD_INT 2
38381: PUSH
38382: FOR_DOWNTO
38383: IFFALSE 38467
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38385: LD_ADDR_VAR 0 6
38389: PUSH
38390: LD_VAR 0 7
38394: PUSH
38395: LD_VAR 0 5
38399: PUSH
38400: LD_INT 1
38402: MINUS
38403: ARRAY
38404: PPUSH
38405: LD_VAR 0 2
38409: PUSH
38410: LD_VAR 0 5
38414: PUSH
38415: LD_INT 1
38417: MINUS
38418: ARRAY
38419: PPUSH
38420: LD_VAR 0 7
38424: PUSH
38425: LD_VAR 0 5
38429: ARRAY
38430: PPUSH
38431: CALL_OW 1
38435: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38436: LD_ADDR_VAR 0 7
38440: PUSH
38441: LD_VAR 0 7
38445: PPUSH
38446: LD_VAR 0 5
38450: PUSH
38451: LD_INT 1
38453: MINUS
38454: PPUSH
38455: LD_VAR 0 6
38459: PPUSH
38460: CALL_OW 1
38464: ST_TO_ADDR
// end ;
38465: GO 38382
38467: POP
38468: POP
// result := s_arr [ 1 ] ;
38469: LD_ADDR_VAR 0 4
38473: PUSH
38474: LD_VAR 0 7
38478: PUSH
38479: LD_INT 1
38481: ARRAY
38482: ST_TO_ADDR
// end ; end ;
38483: LD_VAR 0 4
38487: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38488: LD_INT 0
38490: PPUSH
38491: PPUSH
// if not list then
38492: LD_VAR 0 1
38496: NOT
38497: IFFALSE 38501
// exit ;
38499: GO 38592
// i := list [ pos1 ] ;
38501: LD_ADDR_VAR 0 5
38505: PUSH
38506: LD_VAR 0 1
38510: PUSH
38511: LD_VAR 0 2
38515: ARRAY
38516: ST_TO_ADDR
// if not i then
38517: LD_VAR 0 5
38521: NOT
38522: IFFALSE 38526
// exit ;
38524: GO 38592
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38526: LD_ADDR_VAR 0 1
38530: PUSH
38531: LD_VAR 0 1
38535: PPUSH
38536: LD_VAR 0 2
38540: PPUSH
38541: LD_VAR 0 1
38545: PUSH
38546: LD_VAR 0 3
38550: ARRAY
38551: PPUSH
38552: CALL_OW 1
38556: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38557: LD_ADDR_VAR 0 1
38561: PUSH
38562: LD_VAR 0 1
38566: PPUSH
38567: LD_VAR 0 3
38571: PPUSH
38572: LD_VAR 0 5
38576: PPUSH
38577: CALL_OW 1
38581: ST_TO_ADDR
// result := list ;
38582: LD_ADDR_VAR 0 4
38586: PUSH
38587: LD_VAR 0 1
38591: ST_TO_ADDR
// end ;
38592: LD_VAR 0 4
38596: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38597: LD_INT 0
38599: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38600: LD_ADDR_VAR 0 5
38604: PUSH
38605: LD_VAR 0 1
38609: PPUSH
38610: CALL_OW 250
38614: PPUSH
38615: LD_VAR 0 1
38619: PPUSH
38620: CALL_OW 251
38624: PPUSH
38625: LD_VAR 0 2
38629: PPUSH
38630: LD_VAR 0 3
38634: PPUSH
38635: LD_VAR 0 4
38639: PPUSH
38640: CALL 38650 0 5
38644: ST_TO_ADDR
// end ;
38645: LD_VAR 0 5
38649: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38650: LD_INT 0
38652: PPUSH
38653: PPUSH
38654: PPUSH
38655: PPUSH
// if not list then
38656: LD_VAR 0 3
38660: NOT
38661: IFFALSE 38665
// exit ;
38663: GO 39053
// result := [ ] ;
38665: LD_ADDR_VAR 0 6
38669: PUSH
38670: EMPTY
38671: ST_TO_ADDR
// for i in list do
38672: LD_ADDR_VAR 0 7
38676: PUSH
38677: LD_VAR 0 3
38681: PUSH
38682: FOR_IN
38683: IFFALSE 38885
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38685: LD_ADDR_VAR 0 9
38689: PUSH
38690: LD_VAR 0 7
38694: PPUSH
38695: LD_VAR 0 1
38699: PPUSH
38700: LD_VAR 0 2
38704: PPUSH
38705: CALL_OW 297
38709: ST_TO_ADDR
// if not result then
38710: LD_VAR 0 6
38714: NOT
38715: IFFALSE 38741
// result := [ [ i , tmp ] ] else
38717: LD_ADDR_VAR 0 6
38721: PUSH
38722: LD_VAR 0 7
38726: PUSH
38727: LD_VAR 0 9
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: EMPTY
38737: LIST
38738: ST_TO_ADDR
38739: GO 38883
// begin if result [ result ] [ 2 ] < tmp then
38741: LD_VAR 0 6
38745: PUSH
38746: LD_VAR 0 6
38750: ARRAY
38751: PUSH
38752: LD_INT 2
38754: ARRAY
38755: PUSH
38756: LD_VAR 0 9
38760: LESS
38761: IFFALSE 38803
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38763: LD_ADDR_VAR 0 6
38767: PUSH
38768: LD_VAR 0 6
38772: PPUSH
38773: LD_VAR 0 6
38777: PUSH
38778: LD_INT 1
38780: PLUS
38781: PPUSH
38782: LD_VAR 0 7
38786: PUSH
38787: LD_VAR 0 9
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PPUSH
38796: CALL_OW 2
38800: ST_TO_ADDR
38801: GO 38883
// for j = 1 to result do
38803: LD_ADDR_VAR 0 8
38807: PUSH
38808: DOUBLE
38809: LD_INT 1
38811: DEC
38812: ST_TO_ADDR
38813: LD_VAR 0 6
38817: PUSH
38818: FOR_TO
38819: IFFALSE 38881
// begin if tmp < result [ j ] [ 2 ] then
38821: LD_VAR 0 9
38825: PUSH
38826: LD_VAR 0 6
38830: PUSH
38831: LD_VAR 0 8
38835: ARRAY
38836: PUSH
38837: LD_INT 2
38839: ARRAY
38840: LESS
38841: IFFALSE 38879
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38843: LD_ADDR_VAR 0 6
38847: PUSH
38848: LD_VAR 0 6
38852: PPUSH
38853: LD_VAR 0 8
38857: PPUSH
38858: LD_VAR 0 7
38862: PUSH
38863: LD_VAR 0 9
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PPUSH
38872: CALL_OW 2
38876: ST_TO_ADDR
// break ;
38877: GO 38881
// end ; end ;
38879: GO 38818
38881: POP
38882: POP
// end ; end ;
38883: GO 38682
38885: POP
38886: POP
// if result and not asc then
38887: LD_VAR 0 6
38891: PUSH
38892: LD_VAR 0 4
38896: NOT
38897: AND
38898: IFFALSE 38973
// begin tmp := result ;
38900: LD_ADDR_VAR 0 9
38904: PUSH
38905: LD_VAR 0 6
38909: ST_TO_ADDR
// for i = tmp downto 1 do
38910: LD_ADDR_VAR 0 7
38914: PUSH
38915: DOUBLE
38916: LD_VAR 0 9
38920: INC
38921: ST_TO_ADDR
38922: LD_INT 1
38924: PUSH
38925: FOR_DOWNTO
38926: IFFALSE 38971
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38928: LD_ADDR_VAR 0 6
38932: PUSH
38933: LD_VAR 0 6
38937: PPUSH
38938: LD_VAR 0 9
38942: PUSH
38943: LD_VAR 0 7
38947: MINUS
38948: PUSH
38949: LD_INT 1
38951: PLUS
38952: PPUSH
38953: LD_VAR 0 9
38957: PUSH
38958: LD_VAR 0 7
38962: ARRAY
38963: PPUSH
38964: CALL_OW 1
38968: ST_TO_ADDR
38969: GO 38925
38971: POP
38972: POP
// end ; tmp := [ ] ;
38973: LD_ADDR_VAR 0 9
38977: PUSH
38978: EMPTY
38979: ST_TO_ADDR
// if mode then
38980: LD_VAR 0 5
38984: IFFALSE 39053
// begin for i = 1 to result do
38986: LD_ADDR_VAR 0 7
38990: PUSH
38991: DOUBLE
38992: LD_INT 1
38994: DEC
38995: ST_TO_ADDR
38996: LD_VAR 0 6
39000: PUSH
39001: FOR_TO
39002: IFFALSE 39041
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39004: LD_ADDR_VAR 0 9
39008: PUSH
39009: LD_VAR 0 9
39013: PPUSH
39014: LD_VAR 0 7
39018: PPUSH
39019: LD_VAR 0 6
39023: PUSH
39024: LD_VAR 0 7
39028: ARRAY
39029: PUSH
39030: LD_INT 1
39032: ARRAY
39033: PPUSH
39034: CALL_OW 1
39038: ST_TO_ADDR
39039: GO 39001
39041: POP
39042: POP
// result := tmp ;
39043: LD_ADDR_VAR 0 6
39047: PUSH
39048: LD_VAR 0 9
39052: ST_TO_ADDR
// end ; end ;
39053: LD_VAR 0 6
39057: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39058: LD_INT 0
39060: PPUSH
39061: PPUSH
39062: PPUSH
39063: PPUSH
39064: PPUSH
39065: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39066: LD_ADDR_VAR 0 5
39070: PUSH
39071: LD_INT 0
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: LD_INT 0
39079: PUSH
39080: EMPTY
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: ST_TO_ADDR
// if not x or not y then
39088: LD_VAR 0 2
39092: NOT
39093: PUSH
39094: LD_VAR 0 3
39098: NOT
39099: OR
39100: IFFALSE 39104
// exit ;
39102: GO 40750
// if not range then
39104: LD_VAR 0 4
39108: NOT
39109: IFFALSE 39119
// range := 10 ;
39111: LD_ADDR_VAR 0 4
39115: PUSH
39116: LD_INT 10
39118: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39119: LD_ADDR_VAR 0 8
39123: PUSH
39124: LD_INT 81
39126: PUSH
39127: LD_VAR 0 1
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 92
39138: PUSH
39139: LD_VAR 0 2
39143: PUSH
39144: LD_VAR 0 3
39148: PUSH
39149: LD_VAR 0 4
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 3
39162: PUSH
39163: LD_INT 21
39165: PUSH
39166: LD_INT 3
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: LIST
39181: PPUSH
39182: CALL_OW 69
39186: ST_TO_ADDR
// if not tmp then
39187: LD_VAR 0 8
39191: NOT
39192: IFFALSE 39196
// exit ;
39194: GO 40750
// for i in tmp do
39196: LD_ADDR_VAR 0 6
39200: PUSH
39201: LD_VAR 0 8
39205: PUSH
39206: FOR_IN
39207: IFFALSE 40725
// begin points := [ 0 , 0 , 0 ] ;
39209: LD_ADDR_VAR 0 9
39213: PUSH
39214: LD_INT 0
39216: PUSH
39217: LD_INT 0
39219: PUSH
39220: LD_INT 0
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: LIST
39227: ST_TO_ADDR
// bpoints := 1 ;
39228: LD_ADDR_VAR 0 10
39232: PUSH
39233: LD_INT 1
39235: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39236: LD_VAR 0 6
39240: PPUSH
39241: CALL_OW 247
39245: PUSH
39246: LD_INT 1
39248: DOUBLE
39249: EQUAL
39250: IFTRUE 39254
39252: GO 39832
39254: POP
// begin if GetClass ( i ) = 1 then
39255: LD_VAR 0 6
39259: PPUSH
39260: CALL_OW 257
39264: PUSH
39265: LD_INT 1
39267: EQUAL
39268: IFFALSE 39289
// points := [ 10 , 5 , 3 ] ;
39270: LD_ADDR_VAR 0 9
39274: PUSH
39275: LD_INT 10
39277: PUSH
39278: LD_INT 5
39280: PUSH
39281: LD_INT 3
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: LIST
39288: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39289: LD_VAR 0 6
39293: PPUSH
39294: CALL_OW 257
39298: PUSH
39299: LD_INT 2
39301: PUSH
39302: LD_INT 3
39304: PUSH
39305: LD_INT 4
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: LIST
39312: IN
39313: IFFALSE 39334
// points := [ 3 , 2 , 1 ] ;
39315: LD_ADDR_VAR 0 9
39319: PUSH
39320: LD_INT 3
39322: PUSH
39323: LD_INT 2
39325: PUSH
39326: LD_INT 1
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: LIST
39333: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39334: LD_VAR 0 6
39338: PPUSH
39339: CALL_OW 257
39343: PUSH
39344: LD_INT 5
39346: EQUAL
39347: IFFALSE 39368
// points := [ 130 , 5 , 2 ] ;
39349: LD_ADDR_VAR 0 9
39353: PUSH
39354: LD_INT 130
39356: PUSH
39357: LD_INT 5
39359: PUSH
39360: LD_INT 2
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: LIST
39367: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39368: LD_VAR 0 6
39372: PPUSH
39373: CALL_OW 257
39377: PUSH
39378: LD_INT 8
39380: EQUAL
39381: IFFALSE 39402
// points := [ 35 , 35 , 30 ] ;
39383: LD_ADDR_VAR 0 9
39387: PUSH
39388: LD_INT 35
39390: PUSH
39391: LD_INT 35
39393: PUSH
39394: LD_INT 30
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: LIST
39401: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39402: LD_VAR 0 6
39406: PPUSH
39407: CALL_OW 257
39411: PUSH
39412: LD_INT 9
39414: EQUAL
39415: IFFALSE 39436
// points := [ 20 , 55 , 40 ] ;
39417: LD_ADDR_VAR 0 9
39421: PUSH
39422: LD_INT 20
39424: PUSH
39425: LD_INT 55
39427: PUSH
39428: LD_INT 40
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: LIST
39435: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39436: LD_VAR 0 6
39440: PPUSH
39441: CALL_OW 257
39445: PUSH
39446: LD_INT 12
39448: PUSH
39449: LD_INT 16
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: IN
39456: IFFALSE 39477
// points := [ 5 , 3 , 2 ] ;
39458: LD_ADDR_VAR 0 9
39462: PUSH
39463: LD_INT 5
39465: PUSH
39466: LD_INT 3
39468: PUSH
39469: LD_INT 2
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: LIST
39476: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39477: LD_VAR 0 6
39481: PPUSH
39482: CALL_OW 257
39486: PUSH
39487: LD_INT 17
39489: EQUAL
39490: IFFALSE 39511
// points := [ 100 , 50 , 75 ] ;
39492: LD_ADDR_VAR 0 9
39496: PUSH
39497: LD_INT 100
39499: PUSH
39500: LD_INT 50
39502: PUSH
39503: LD_INT 75
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: LIST
39510: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39511: LD_VAR 0 6
39515: PPUSH
39516: CALL_OW 257
39520: PUSH
39521: LD_INT 15
39523: EQUAL
39524: IFFALSE 39545
// points := [ 10 , 5 , 3 ] ;
39526: LD_ADDR_VAR 0 9
39530: PUSH
39531: LD_INT 10
39533: PUSH
39534: LD_INT 5
39536: PUSH
39537: LD_INT 3
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: LIST
39544: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39545: LD_VAR 0 6
39549: PPUSH
39550: CALL_OW 257
39554: PUSH
39555: LD_INT 14
39557: EQUAL
39558: IFFALSE 39579
// points := [ 10 , 0 , 0 ] ;
39560: LD_ADDR_VAR 0 9
39564: PUSH
39565: LD_INT 10
39567: PUSH
39568: LD_INT 0
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: LIST
39578: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39579: LD_VAR 0 6
39583: PPUSH
39584: CALL_OW 257
39588: PUSH
39589: LD_INT 11
39591: EQUAL
39592: IFFALSE 39613
// points := [ 30 , 10 , 5 ] ;
39594: LD_ADDR_VAR 0 9
39598: PUSH
39599: LD_INT 30
39601: PUSH
39602: LD_INT 10
39604: PUSH
39605: LD_INT 5
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: LIST
39612: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39613: LD_VAR 0 1
39617: PPUSH
39618: LD_INT 5
39620: PPUSH
39621: CALL_OW 321
39625: PUSH
39626: LD_INT 2
39628: EQUAL
39629: IFFALSE 39646
// bpoints := bpoints * 1.8 ;
39631: LD_ADDR_VAR 0 10
39635: PUSH
39636: LD_VAR 0 10
39640: PUSH
39641: LD_REAL  1.80000000000000E+0000
39644: MUL
39645: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39646: LD_VAR 0 6
39650: PPUSH
39651: CALL_OW 257
39655: PUSH
39656: LD_INT 1
39658: PUSH
39659: LD_INT 2
39661: PUSH
39662: LD_INT 3
39664: PUSH
39665: LD_INT 4
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: IN
39674: PUSH
39675: LD_VAR 0 1
39679: PPUSH
39680: LD_INT 51
39682: PPUSH
39683: CALL_OW 321
39687: PUSH
39688: LD_INT 2
39690: EQUAL
39691: AND
39692: IFFALSE 39709
// bpoints := bpoints * 1.2 ;
39694: LD_ADDR_VAR 0 10
39698: PUSH
39699: LD_VAR 0 10
39703: PUSH
39704: LD_REAL  1.20000000000000E+0000
39707: MUL
39708: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39709: LD_VAR 0 6
39713: PPUSH
39714: CALL_OW 257
39718: PUSH
39719: LD_INT 5
39721: PUSH
39722: LD_INT 7
39724: PUSH
39725: LD_INT 9
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: LIST
39732: IN
39733: PUSH
39734: LD_VAR 0 1
39738: PPUSH
39739: LD_INT 52
39741: PPUSH
39742: CALL_OW 321
39746: PUSH
39747: LD_INT 2
39749: EQUAL
39750: AND
39751: IFFALSE 39768
// bpoints := bpoints * 1.5 ;
39753: LD_ADDR_VAR 0 10
39757: PUSH
39758: LD_VAR 0 10
39762: PUSH
39763: LD_REAL  1.50000000000000E+0000
39766: MUL
39767: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39768: LD_VAR 0 1
39772: PPUSH
39773: LD_INT 66
39775: PPUSH
39776: CALL_OW 321
39780: PUSH
39781: LD_INT 2
39783: EQUAL
39784: IFFALSE 39801
// bpoints := bpoints * 1.1 ;
39786: LD_ADDR_VAR 0 10
39790: PUSH
39791: LD_VAR 0 10
39795: PUSH
39796: LD_REAL  1.10000000000000E+0000
39799: MUL
39800: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39801: LD_ADDR_VAR 0 10
39805: PUSH
39806: LD_VAR 0 10
39810: PUSH
39811: LD_VAR 0 6
39815: PPUSH
39816: LD_INT 1
39818: PPUSH
39819: CALL_OW 259
39823: PUSH
39824: LD_REAL  1.15000000000000E+0000
39827: MUL
39828: MUL
39829: ST_TO_ADDR
// end ; unit_vehicle :
39830: GO 40654
39832: LD_INT 2
39834: DOUBLE
39835: EQUAL
39836: IFTRUE 39840
39838: GO 40642
39840: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39841: LD_VAR 0 6
39845: PPUSH
39846: CALL_OW 264
39850: PUSH
39851: LD_INT 2
39853: PUSH
39854: LD_INT 42
39856: PUSH
39857: LD_INT 24
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: LIST
39864: IN
39865: IFFALSE 39886
// points := [ 25 , 5 , 3 ] ;
39867: LD_ADDR_VAR 0 9
39871: PUSH
39872: LD_INT 25
39874: PUSH
39875: LD_INT 5
39877: PUSH
39878: LD_INT 3
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: LIST
39885: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39886: LD_VAR 0 6
39890: PPUSH
39891: CALL_OW 264
39895: PUSH
39896: LD_INT 4
39898: PUSH
39899: LD_INT 43
39901: PUSH
39902: LD_INT 25
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: LIST
39909: IN
39910: IFFALSE 39931
// points := [ 40 , 15 , 5 ] ;
39912: LD_ADDR_VAR 0 9
39916: PUSH
39917: LD_INT 40
39919: PUSH
39920: LD_INT 15
39922: PUSH
39923: LD_INT 5
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: LIST
39930: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39931: LD_VAR 0 6
39935: PPUSH
39936: CALL_OW 264
39940: PUSH
39941: LD_INT 3
39943: PUSH
39944: LD_INT 23
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: IN
39951: IFFALSE 39972
// points := [ 7 , 25 , 8 ] ;
39953: LD_ADDR_VAR 0 9
39957: PUSH
39958: LD_INT 7
39960: PUSH
39961: LD_INT 25
39963: PUSH
39964: LD_INT 8
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: LIST
39971: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39972: LD_VAR 0 6
39976: PPUSH
39977: CALL_OW 264
39981: PUSH
39982: LD_INT 5
39984: PUSH
39985: LD_INT 27
39987: PUSH
39988: LD_INT 44
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: LIST
39995: IN
39996: IFFALSE 40017
// points := [ 14 , 50 , 16 ] ;
39998: LD_ADDR_VAR 0 9
40002: PUSH
40003: LD_INT 14
40005: PUSH
40006: LD_INT 50
40008: PUSH
40009: LD_INT 16
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: LIST
40016: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40017: LD_VAR 0 6
40021: PPUSH
40022: CALL_OW 264
40026: PUSH
40027: LD_INT 6
40029: PUSH
40030: LD_INT 46
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: IN
40037: IFFALSE 40058
// points := [ 32 , 120 , 70 ] ;
40039: LD_ADDR_VAR 0 9
40043: PUSH
40044: LD_INT 32
40046: PUSH
40047: LD_INT 120
40049: PUSH
40050: LD_INT 70
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: LIST
40057: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
40058: LD_VAR 0 6
40062: PPUSH
40063: CALL_OW 264
40067: PUSH
40068: LD_INT 7
40070: PUSH
40071: LD_INT 28
40073: PUSH
40074: LD_INT 45
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: LIST
40081: IN
40082: IFFALSE 40103
// points := [ 35 , 20 , 45 ] ;
40084: LD_ADDR_VAR 0 9
40088: PUSH
40089: LD_INT 35
40091: PUSH
40092: LD_INT 20
40094: PUSH
40095: LD_INT 45
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: LIST
40102: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40103: LD_VAR 0 6
40107: PPUSH
40108: CALL_OW 264
40112: PUSH
40113: LD_INT 47
40115: PUSH
40116: EMPTY
40117: LIST
40118: IN
40119: IFFALSE 40140
// points := [ 67 , 45 , 75 ] ;
40121: LD_ADDR_VAR 0 9
40125: PUSH
40126: LD_INT 67
40128: PUSH
40129: LD_INT 45
40131: PUSH
40132: LD_INT 75
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: LIST
40139: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40140: LD_VAR 0 6
40144: PPUSH
40145: CALL_OW 264
40149: PUSH
40150: LD_INT 26
40152: PUSH
40153: EMPTY
40154: LIST
40155: IN
40156: IFFALSE 40177
// points := [ 120 , 30 , 80 ] ;
40158: LD_ADDR_VAR 0 9
40162: PUSH
40163: LD_INT 120
40165: PUSH
40166: LD_INT 30
40168: PUSH
40169: LD_INT 80
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: LIST
40176: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40177: LD_VAR 0 6
40181: PPUSH
40182: CALL_OW 264
40186: PUSH
40187: LD_INT 22
40189: PUSH
40190: EMPTY
40191: LIST
40192: IN
40193: IFFALSE 40214
// points := [ 40 , 1 , 1 ] ;
40195: LD_ADDR_VAR 0 9
40199: PUSH
40200: LD_INT 40
40202: PUSH
40203: LD_INT 1
40205: PUSH
40206: LD_INT 1
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: LIST
40213: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40214: LD_VAR 0 6
40218: PPUSH
40219: CALL_OW 264
40223: PUSH
40224: LD_INT 29
40226: PUSH
40227: EMPTY
40228: LIST
40229: IN
40230: IFFALSE 40251
// points := [ 70 , 200 , 400 ] ;
40232: LD_ADDR_VAR 0 9
40236: PUSH
40237: LD_INT 70
40239: PUSH
40240: LD_INT 200
40242: PUSH
40243: LD_INT 400
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: LIST
40250: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40251: LD_VAR 0 6
40255: PPUSH
40256: CALL_OW 264
40260: PUSH
40261: LD_INT 14
40263: PUSH
40264: LD_INT 53
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: IN
40271: IFFALSE 40292
// points := [ 40 , 10 , 20 ] ;
40273: LD_ADDR_VAR 0 9
40277: PUSH
40278: LD_INT 40
40280: PUSH
40281: LD_INT 10
40283: PUSH
40284: LD_INT 20
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: LIST
40291: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40292: LD_VAR 0 6
40296: PPUSH
40297: CALL_OW 264
40301: PUSH
40302: LD_INT 9
40304: PUSH
40305: EMPTY
40306: LIST
40307: IN
40308: IFFALSE 40329
// points := [ 5 , 70 , 20 ] ;
40310: LD_ADDR_VAR 0 9
40314: PUSH
40315: LD_INT 5
40317: PUSH
40318: LD_INT 70
40320: PUSH
40321: LD_INT 20
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: LIST
40328: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40329: LD_VAR 0 6
40333: PPUSH
40334: CALL_OW 264
40338: PUSH
40339: LD_INT 10
40341: PUSH
40342: EMPTY
40343: LIST
40344: IN
40345: IFFALSE 40366
// points := [ 35 , 110 , 70 ] ;
40347: LD_ADDR_VAR 0 9
40351: PUSH
40352: LD_INT 35
40354: PUSH
40355: LD_INT 110
40357: PUSH
40358: LD_INT 70
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: LIST
40365: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40366: LD_VAR 0 6
40370: PPUSH
40371: CALL_OW 265
40375: PUSH
40376: LD_INT 25
40378: EQUAL
40379: IFFALSE 40400
// points := [ 80 , 65 , 100 ] ;
40381: LD_ADDR_VAR 0 9
40385: PUSH
40386: LD_INT 80
40388: PUSH
40389: LD_INT 65
40391: PUSH
40392: LD_INT 100
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: LIST
40399: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40400: LD_VAR 0 6
40404: PPUSH
40405: CALL_OW 263
40409: PUSH
40410: LD_INT 1
40412: EQUAL
40413: IFFALSE 40448
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40415: LD_ADDR_VAR 0 10
40419: PUSH
40420: LD_VAR 0 10
40424: PUSH
40425: LD_VAR 0 6
40429: PPUSH
40430: CALL_OW 311
40434: PPUSH
40435: LD_INT 3
40437: PPUSH
40438: CALL_OW 259
40442: PUSH
40443: LD_INT 4
40445: MUL
40446: MUL
40447: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40448: LD_VAR 0 6
40452: PPUSH
40453: CALL_OW 263
40457: PUSH
40458: LD_INT 2
40460: EQUAL
40461: IFFALSE 40512
// begin j := IsControledBy ( i ) ;
40463: LD_ADDR_VAR 0 7
40467: PUSH
40468: LD_VAR 0 6
40472: PPUSH
40473: CALL_OW 312
40477: ST_TO_ADDR
// if j then
40478: LD_VAR 0 7
40482: IFFALSE 40512
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40484: LD_ADDR_VAR 0 10
40488: PUSH
40489: LD_VAR 0 10
40493: PUSH
40494: LD_VAR 0 7
40498: PPUSH
40499: LD_INT 3
40501: PPUSH
40502: CALL_OW 259
40506: PUSH
40507: LD_INT 3
40509: MUL
40510: MUL
40511: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40512: LD_VAR 0 6
40516: PPUSH
40517: CALL_OW 264
40521: PUSH
40522: LD_INT 5
40524: PUSH
40525: LD_INT 6
40527: PUSH
40528: LD_INT 46
40530: PUSH
40531: LD_INT 44
40533: PUSH
40534: LD_INT 47
40536: PUSH
40537: LD_INT 45
40539: PUSH
40540: LD_INT 28
40542: PUSH
40543: LD_INT 7
40545: PUSH
40546: LD_INT 27
40548: PUSH
40549: LD_INT 29
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: IN
40564: PUSH
40565: LD_VAR 0 1
40569: PPUSH
40570: LD_INT 52
40572: PPUSH
40573: CALL_OW 321
40577: PUSH
40578: LD_INT 2
40580: EQUAL
40581: AND
40582: IFFALSE 40599
// bpoints := bpoints * 1.2 ;
40584: LD_ADDR_VAR 0 10
40588: PUSH
40589: LD_VAR 0 10
40593: PUSH
40594: LD_REAL  1.20000000000000E+0000
40597: MUL
40598: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40599: LD_VAR 0 6
40603: PPUSH
40604: CALL_OW 264
40608: PUSH
40609: LD_INT 6
40611: PUSH
40612: LD_INT 46
40614: PUSH
40615: LD_INT 47
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: LIST
40622: IN
40623: IFFALSE 40640
// bpoints := bpoints * 1.2 ;
40625: LD_ADDR_VAR 0 10
40629: PUSH
40630: LD_VAR 0 10
40634: PUSH
40635: LD_REAL  1.20000000000000E+0000
40638: MUL
40639: ST_TO_ADDR
// end ; unit_building :
40640: GO 40654
40642: LD_INT 3
40644: DOUBLE
40645: EQUAL
40646: IFTRUE 40650
40648: GO 40653
40650: POP
// ; end ;
40651: GO 40654
40653: POP
// for j = 1 to 3 do
40654: LD_ADDR_VAR 0 7
40658: PUSH
40659: DOUBLE
40660: LD_INT 1
40662: DEC
40663: ST_TO_ADDR
40664: LD_INT 3
40666: PUSH
40667: FOR_TO
40668: IFFALSE 40721
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40670: LD_ADDR_VAR 0 5
40674: PUSH
40675: LD_VAR 0 5
40679: PPUSH
40680: LD_VAR 0 7
40684: PPUSH
40685: LD_VAR 0 5
40689: PUSH
40690: LD_VAR 0 7
40694: ARRAY
40695: PUSH
40696: LD_VAR 0 9
40700: PUSH
40701: LD_VAR 0 7
40705: ARRAY
40706: PUSH
40707: LD_VAR 0 10
40711: MUL
40712: PLUS
40713: PPUSH
40714: CALL_OW 1
40718: ST_TO_ADDR
40719: GO 40667
40721: POP
40722: POP
// end ;
40723: GO 39206
40725: POP
40726: POP
// result := Replace ( result , 4 , tmp ) ;
40727: LD_ADDR_VAR 0 5
40731: PUSH
40732: LD_VAR 0 5
40736: PPUSH
40737: LD_INT 4
40739: PPUSH
40740: LD_VAR 0 8
40744: PPUSH
40745: CALL_OW 1
40749: ST_TO_ADDR
// end ;
40750: LD_VAR 0 5
40754: RET
// export function DangerAtRange ( unit , range ) ; begin
40755: LD_INT 0
40757: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40758: LD_ADDR_VAR 0 3
40762: PUSH
40763: LD_VAR 0 1
40767: PPUSH
40768: CALL_OW 255
40772: PPUSH
40773: LD_VAR 0 1
40777: PPUSH
40778: CALL_OW 250
40782: PPUSH
40783: LD_VAR 0 1
40787: PPUSH
40788: CALL_OW 251
40792: PPUSH
40793: LD_VAR 0 2
40797: PPUSH
40798: CALL 39058 0 4
40802: ST_TO_ADDR
// end ;
40803: LD_VAR 0 3
40807: RET
// export function DangerInArea ( side , area ) ; begin
40808: LD_INT 0
40810: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40811: LD_ADDR_VAR 0 3
40815: PUSH
40816: LD_VAR 0 2
40820: PPUSH
40821: LD_INT 81
40823: PUSH
40824: LD_VAR 0 1
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PPUSH
40833: CALL_OW 70
40837: ST_TO_ADDR
// end ;
40838: LD_VAR 0 3
40842: RET
// export function IsExtension ( b ) ; begin
40843: LD_INT 0
40845: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40846: LD_ADDR_VAR 0 2
40850: PUSH
40851: LD_VAR 0 1
40855: PUSH
40856: LD_INT 23
40858: PUSH
40859: LD_INT 20
40861: PUSH
40862: LD_INT 22
40864: PUSH
40865: LD_INT 17
40867: PUSH
40868: LD_INT 24
40870: PUSH
40871: LD_INT 21
40873: PUSH
40874: LD_INT 19
40876: PUSH
40877: LD_INT 16
40879: PUSH
40880: LD_INT 25
40882: PUSH
40883: LD_INT 18
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: IN
40898: ST_TO_ADDR
// end ;
40899: LD_VAR 0 2
40903: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
40904: LD_INT 0
40906: PPUSH
40907: PPUSH
40908: PPUSH
// result := [ ] ;
40909: LD_ADDR_VAR 0 3
40913: PUSH
40914: EMPTY
40915: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40916: LD_ADDR_VAR 0 4
40920: PUSH
40921: LD_VAR 0 2
40925: PPUSH
40926: LD_INT 21
40928: PUSH
40929: LD_INT 3
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PPUSH
40936: CALL_OW 70
40940: ST_TO_ADDR
// if not tmp then
40941: LD_VAR 0 4
40945: NOT
40946: IFFALSE 40950
// exit ;
40948: GO 41008
// for i in tmp do
40950: LD_ADDR_VAR 0 5
40954: PUSH
40955: LD_VAR 0 4
40959: PUSH
40960: FOR_IN
40961: IFFALSE 40996
// if GetBase ( i ) <> base then
40963: LD_VAR 0 5
40967: PPUSH
40968: CALL_OW 274
40972: PUSH
40973: LD_VAR 0 1
40977: NONEQUAL
40978: IFFALSE 40994
// ComLinkToBase ( base , i ) ;
40980: LD_VAR 0 1
40984: PPUSH
40985: LD_VAR 0 5
40989: PPUSH
40990: CALL_OW 169
40994: GO 40960
40996: POP
40997: POP
// result := tmp ;
40998: LD_ADDR_VAR 0 3
41002: PUSH
41003: LD_VAR 0 4
41007: ST_TO_ADDR
// end ;
41008: LD_VAR 0 3
41012: RET
// export function ComComplete ( unit , b ) ; var i ; begin
41013: LD_INT 0
41015: PPUSH
41016: PPUSH
// if BuildingStatus ( b ) = bs_build then
41017: LD_VAR 0 2
41021: PPUSH
41022: CALL_OW 461
41026: PUSH
41027: LD_INT 1
41029: EQUAL
41030: IFFALSE 41090
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41032: LD_VAR 0 1
41036: PPUSH
41037: LD_STRING h
41039: PUSH
41040: LD_VAR 0 2
41044: PPUSH
41045: CALL_OW 250
41049: PUSH
41050: LD_VAR 0 2
41054: PPUSH
41055: CALL_OW 251
41059: PUSH
41060: LD_VAR 0 2
41064: PUSH
41065: LD_INT 0
41067: PUSH
41068: LD_INT 0
41070: PUSH
41071: LD_INT 0
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: PUSH
41083: EMPTY
41084: LIST
41085: PPUSH
41086: CALL_OW 446
// end ;
41090: LD_VAR 0 3
41094: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41095: LD_INT 0
41097: PPUSH
41098: PPUSH
41099: PPUSH
41100: PPUSH
41101: PPUSH
41102: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
41103: LD_VAR 0 1
41107: NOT
41108: PUSH
41109: LD_VAR 0 1
41113: PPUSH
41114: CALL_OW 263
41118: PUSH
41119: LD_INT 2
41121: EQUAL
41122: NOT
41123: OR
41124: IFFALSE 41128
// exit ;
41126: GO 41444
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41128: LD_ADDR_VAR 0 6
41132: PUSH
41133: LD_INT 22
41135: PUSH
41136: LD_VAR 0 1
41140: PPUSH
41141: CALL_OW 255
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 2
41152: PUSH
41153: LD_INT 30
41155: PUSH
41156: LD_INT 36
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 34
41165: PUSH
41166: LD_INT 31
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: LIST
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PPUSH
41182: CALL_OW 69
41186: ST_TO_ADDR
// if not tmp then
41187: LD_VAR 0 6
41191: NOT
41192: IFFALSE 41196
// exit ;
41194: GO 41444
// result := [ ] ;
41196: LD_ADDR_VAR 0 2
41200: PUSH
41201: EMPTY
41202: ST_TO_ADDR
// for i in tmp do
41203: LD_ADDR_VAR 0 3
41207: PUSH
41208: LD_VAR 0 6
41212: PUSH
41213: FOR_IN
41214: IFFALSE 41285
// begin t := UnitsInside ( i ) ;
41216: LD_ADDR_VAR 0 4
41220: PUSH
41221: LD_VAR 0 3
41225: PPUSH
41226: CALL_OW 313
41230: ST_TO_ADDR
// if t then
41231: LD_VAR 0 4
41235: IFFALSE 41283
// for j in t do
41237: LD_ADDR_VAR 0 7
41241: PUSH
41242: LD_VAR 0 4
41246: PUSH
41247: FOR_IN
41248: IFFALSE 41281
// result := Insert ( result , result + 1 , j ) ;
41250: LD_ADDR_VAR 0 2
41254: PUSH
41255: LD_VAR 0 2
41259: PPUSH
41260: LD_VAR 0 2
41264: PUSH
41265: LD_INT 1
41267: PLUS
41268: PPUSH
41269: LD_VAR 0 7
41273: PPUSH
41274: CALL_OW 2
41278: ST_TO_ADDR
41279: GO 41247
41281: POP
41282: POP
// end ;
41283: GO 41213
41285: POP
41286: POP
// if not result then
41287: LD_VAR 0 2
41291: NOT
41292: IFFALSE 41296
// exit ;
41294: GO 41444
// mech := result [ 1 ] ;
41296: LD_ADDR_VAR 0 5
41300: PUSH
41301: LD_VAR 0 2
41305: PUSH
41306: LD_INT 1
41308: ARRAY
41309: ST_TO_ADDR
// if result > 1 then
41310: LD_VAR 0 2
41314: PUSH
41315: LD_INT 1
41317: GREATER
41318: IFFALSE 41430
// for i = 2 to result do
41320: LD_ADDR_VAR 0 3
41324: PUSH
41325: DOUBLE
41326: LD_INT 2
41328: DEC
41329: ST_TO_ADDR
41330: LD_VAR 0 2
41334: PUSH
41335: FOR_TO
41336: IFFALSE 41428
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41338: LD_ADDR_VAR 0 4
41342: PUSH
41343: LD_VAR 0 2
41347: PUSH
41348: LD_VAR 0 3
41352: ARRAY
41353: PPUSH
41354: LD_INT 3
41356: PPUSH
41357: CALL_OW 259
41361: PUSH
41362: LD_VAR 0 2
41366: PUSH
41367: LD_VAR 0 3
41371: ARRAY
41372: PPUSH
41373: CALL_OW 432
41377: MINUS
41378: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41379: LD_VAR 0 4
41383: PUSH
41384: LD_VAR 0 5
41388: PPUSH
41389: LD_INT 3
41391: PPUSH
41392: CALL_OW 259
41396: PUSH
41397: LD_VAR 0 5
41401: PPUSH
41402: CALL_OW 432
41406: MINUS
41407: GREATEREQUAL
41408: IFFALSE 41426
// mech := result [ i ] ;
41410: LD_ADDR_VAR 0 5
41414: PUSH
41415: LD_VAR 0 2
41419: PUSH
41420: LD_VAR 0 3
41424: ARRAY
41425: ST_TO_ADDR
// end ;
41426: GO 41335
41428: POP
41429: POP
// ComLinkTo ( vehicle , mech ) ;
41430: LD_VAR 0 1
41434: PPUSH
41435: LD_VAR 0 5
41439: PPUSH
41440: CALL_OW 135
// end ;
41444: LD_VAR 0 2
41448: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41449: LD_INT 0
41451: PPUSH
41452: PPUSH
41453: PPUSH
41454: PPUSH
41455: PPUSH
41456: PPUSH
41457: PPUSH
41458: PPUSH
41459: PPUSH
41460: PPUSH
41461: PPUSH
41462: PPUSH
41463: PPUSH
// result := [ ] ;
41464: LD_ADDR_VAR 0 7
41468: PUSH
41469: EMPTY
41470: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41471: LD_VAR 0 1
41475: PPUSH
41476: CALL_OW 266
41480: PUSH
41481: LD_INT 0
41483: PUSH
41484: LD_INT 1
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: IN
41491: NOT
41492: IFFALSE 41496
// exit ;
41494: GO 43127
// if name then
41496: LD_VAR 0 3
41500: IFFALSE 41516
// SetBName ( base_dep , name ) ;
41502: LD_VAR 0 1
41506: PPUSH
41507: LD_VAR 0 3
41511: PPUSH
41512: CALL_OW 500
// base := GetBase ( base_dep ) ;
41516: LD_ADDR_VAR 0 15
41520: PUSH
41521: LD_VAR 0 1
41525: PPUSH
41526: CALL_OW 274
41530: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41531: LD_ADDR_VAR 0 16
41535: PUSH
41536: LD_VAR 0 1
41540: PPUSH
41541: CALL_OW 255
41545: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41546: LD_ADDR_VAR 0 17
41550: PUSH
41551: LD_VAR 0 1
41555: PPUSH
41556: CALL_OW 248
41560: ST_TO_ADDR
// if sources then
41561: LD_VAR 0 5
41565: IFFALSE 41612
// for i = 1 to 3 do
41567: LD_ADDR_VAR 0 8
41571: PUSH
41572: DOUBLE
41573: LD_INT 1
41575: DEC
41576: ST_TO_ADDR
41577: LD_INT 3
41579: PUSH
41580: FOR_TO
41581: IFFALSE 41610
// AddResourceType ( base , i , sources [ i ] ) ;
41583: LD_VAR 0 15
41587: PPUSH
41588: LD_VAR 0 8
41592: PPUSH
41593: LD_VAR 0 5
41597: PUSH
41598: LD_VAR 0 8
41602: ARRAY
41603: PPUSH
41604: CALL_OW 276
41608: GO 41580
41610: POP
41611: POP
// buildings := GetBaseBuildings ( base , area ) ;
41612: LD_ADDR_VAR 0 18
41616: PUSH
41617: LD_VAR 0 15
41621: PPUSH
41622: LD_VAR 0 2
41626: PPUSH
41627: CALL 40904 0 2
41631: ST_TO_ADDR
// InitHc ;
41632: CALL_OW 19
// InitUc ;
41636: CALL_OW 18
// uc_side := side ;
41640: LD_ADDR_OWVAR 20
41644: PUSH
41645: LD_VAR 0 16
41649: ST_TO_ADDR
// uc_nation := nation ;
41650: LD_ADDR_OWVAR 21
41654: PUSH
41655: LD_VAR 0 17
41659: ST_TO_ADDR
// if buildings then
41660: LD_VAR 0 18
41664: IFFALSE 42986
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41666: LD_ADDR_VAR 0 19
41670: PUSH
41671: LD_VAR 0 18
41675: PPUSH
41676: LD_INT 2
41678: PUSH
41679: LD_INT 30
41681: PUSH
41682: LD_INT 29
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 30
41691: PUSH
41692: LD_INT 30
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: LIST
41703: PPUSH
41704: CALL_OW 72
41708: ST_TO_ADDR
// if tmp then
41709: LD_VAR 0 19
41713: IFFALSE 41761
// for i in tmp do
41715: LD_ADDR_VAR 0 8
41719: PUSH
41720: LD_VAR 0 19
41724: PUSH
41725: FOR_IN
41726: IFFALSE 41759
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41728: LD_VAR 0 8
41732: PPUSH
41733: CALL_OW 250
41737: PPUSH
41738: LD_VAR 0 8
41742: PPUSH
41743: CALL_OW 251
41747: PPUSH
41748: LD_VAR 0 16
41752: PPUSH
41753: CALL_OW 441
41757: GO 41725
41759: POP
41760: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41761: LD_VAR 0 18
41765: PPUSH
41766: LD_INT 2
41768: PUSH
41769: LD_INT 30
41771: PUSH
41772: LD_INT 32
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 30
41781: PUSH
41782: LD_INT 33
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: LIST
41793: PPUSH
41794: CALL_OW 72
41798: IFFALSE 41886
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41800: LD_ADDR_VAR 0 8
41804: PUSH
41805: LD_VAR 0 18
41809: PPUSH
41810: LD_INT 2
41812: PUSH
41813: LD_INT 30
41815: PUSH
41816: LD_INT 32
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 30
41825: PUSH
41826: LD_INT 33
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: LIST
41837: PPUSH
41838: CALL_OW 72
41842: PUSH
41843: FOR_IN
41844: IFFALSE 41884
// begin if not GetBWeapon ( i ) then
41846: LD_VAR 0 8
41850: PPUSH
41851: CALL_OW 269
41855: NOT
41856: IFFALSE 41882
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41858: LD_VAR 0 8
41862: PPUSH
41863: LD_VAR 0 8
41867: PPUSH
41868: LD_VAR 0 2
41872: PPUSH
41873: CALL 43132 0 2
41877: PPUSH
41878: CALL_OW 431
// end ;
41882: GO 41843
41884: POP
41885: POP
// end ; for i = 1 to personel do
41886: LD_ADDR_VAR 0 8
41890: PUSH
41891: DOUBLE
41892: LD_INT 1
41894: DEC
41895: ST_TO_ADDR
41896: LD_VAR 0 6
41900: PUSH
41901: FOR_TO
41902: IFFALSE 42966
// begin if i > 4 then
41904: LD_VAR 0 8
41908: PUSH
41909: LD_INT 4
41911: GREATER
41912: IFFALSE 41916
// break ;
41914: GO 42966
// case i of 1 :
41916: LD_VAR 0 8
41920: PUSH
41921: LD_INT 1
41923: DOUBLE
41924: EQUAL
41925: IFTRUE 41929
41927: GO 42009
41929: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41930: LD_ADDR_VAR 0 12
41934: PUSH
41935: LD_VAR 0 18
41939: PPUSH
41940: LD_INT 22
41942: PUSH
41943: LD_VAR 0 16
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 58
41954: PUSH
41955: EMPTY
41956: LIST
41957: PUSH
41958: LD_INT 2
41960: PUSH
41961: LD_INT 30
41963: PUSH
41964: LD_INT 32
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 30
41973: PUSH
41974: LD_INT 4
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 30
41983: PUSH
41984: LD_INT 5
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: LIST
42001: PPUSH
42002: CALL_OW 72
42006: ST_TO_ADDR
42007: GO 42231
42009: LD_INT 2
42011: DOUBLE
42012: EQUAL
42013: IFTRUE 42017
42015: GO 42079
42017: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42018: LD_ADDR_VAR 0 12
42022: PUSH
42023: LD_VAR 0 18
42027: PPUSH
42028: LD_INT 22
42030: PUSH
42031: LD_VAR 0 16
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 2
42042: PUSH
42043: LD_INT 30
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 30
42055: PUSH
42056: LD_INT 1
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: LIST
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PPUSH
42072: CALL_OW 72
42076: ST_TO_ADDR
42077: GO 42231
42079: LD_INT 3
42081: DOUBLE
42082: EQUAL
42083: IFTRUE 42087
42085: GO 42149
42087: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42088: LD_ADDR_VAR 0 12
42092: PUSH
42093: LD_VAR 0 18
42097: PPUSH
42098: LD_INT 22
42100: PUSH
42101: LD_VAR 0 16
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 2
42112: PUSH
42113: LD_INT 30
42115: PUSH
42116: LD_INT 2
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 30
42125: PUSH
42126: LD_INT 3
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: LIST
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PPUSH
42142: CALL_OW 72
42146: ST_TO_ADDR
42147: GO 42231
42149: LD_INT 4
42151: DOUBLE
42152: EQUAL
42153: IFTRUE 42157
42155: GO 42230
42157: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42158: LD_ADDR_VAR 0 12
42162: PUSH
42163: LD_VAR 0 18
42167: PPUSH
42168: LD_INT 22
42170: PUSH
42171: LD_VAR 0 16
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 2
42182: PUSH
42183: LD_INT 30
42185: PUSH
42186: LD_INT 6
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 30
42195: PUSH
42196: LD_INT 7
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 30
42205: PUSH
42206: LD_INT 8
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PPUSH
42223: CALL_OW 72
42227: ST_TO_ADDR
42228: GO 42231
42230: POP
// if i = 1 then
42231: LD_VAR 0 8
42235: PUSH
42236: LD_INT 1
42238: EQUAL
42239: IFFALSE 42350
// begin tmp := [ ] ;
42241: LD_ADDR_VAR 0 19
42245: PUSH
42246: EMPTY
42247: ST_TO_ADDR
// for j in f do
42248: LD_ADDR_VAR 0 9
42252: PUSH
42253: LD_VAR 0 12
42257: PUSH
42258: FOR_IN
42259: IFFALSE 42332
// if GetBType ( j ) = b_bunker then
42261: LD_VAR 0 9
42265: PPUSH
42266: CALL_OW 266
42270: PUSH
42271: LD_INT 32
42273: EQUAL
42274: IFFALSE 42301
// tmp := Insert ( tmp , 1 , j ) else
42276: LD_ADDR_VAR 0 19
42280: PUSH
42281: LD_VAR 0 19
42285: PPUSH
42286: LD_INT 1
42288: PPUSH
42289: LD_VAR 0 9
42293: PPUSH
42294: CALL_OW 2
42298: ST_TO_ADDR
42299: GO 42330
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42301: LD_ADDR_VAR 0 19
42305: PUSH
42306: LD_VAR 0 19
42310: PPUSH
42311: LD_VAR 0 19
42315: PUSH
42316: LD_INT 1
42318: PLUS
42319: PPUSH
42320: LD_VAR 0 9
42324: PPUSH
42325: CALL_OW 2
42329: ST_TO_ADDR
42330: GO 42258
42332: POP
42333: POP
// if tmp then
42334: LD_VAR 0 19
42338: IFFALSE 42350
// f := tmp ;
42340: LD_ADDR_VAR 0 12
42344: PUSH
42345: LD_VAR 0 19
42349: ST_TO_ADDR
// end ; x := personel [ i ] ;
42350: LD_ADDR_VAR 0 13
42354: PUSH
42355: LD_VAR 0 6
42359: PUSH
42360: LD_VAR 0 8
42364: ARRAY
42365: ST_TO_ADDR
// if x = - 1 then
42366: LD_VAR 0 13
42370: PUSH
42371: LD_INT 1
42373: NEG
42374: EQUAL
42375: IFFALSE 42584
// begin for j in f do
42377: LD_ADDR_VAR 0 9
42381: PUSH
42382: LD_VAR 0 12
42386: PUSH
42387: FOR_IN
42388: IFFALSE 42580
// repeat InitHc ;
42390: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42394: LD_VAR 0 9
42398: PPUSH
42399: CALL_OW 266
42403: PUSH
42404: LD_INT 5
42406: EQUAL
42407: IFFALSE 42477
// begin if UnitsInside ( j ) < 3 then
42409: LD_VAR 0 9
42413: PPUSH
42414: CALL_OW 313
42418: PUSH
42419: LD_INT 3
42421: LESS
42422: IFFALSE 42458
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42424: LD_INT 0
42426: PPUSH
42427: LD_INT 5
42429: PUSH
42430: LD_INT 8
42432: PUSH
42433: LD_INT 9
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: LIST
42440: PUSH
42441: LD_VAR 0 17
42445: ARRAY
42446: PPUSH
42447: LD_VAR 0 4
42451: PPUSH
42452: CALL_OW 380
42456: GO 42475
// PrepareHuman ( false , i , skill ) ;
42458: LD_INT 0
42460: PPUSH
42461: LD_VAR 0 8
42465: PPUSH
42466: LD_VAR 0 4
42470: PPUSH
42471: CALL_OW 380
// end else
42475: GO 42494
// PrepareHuman ( false , i , skill ) ;
42477: LD_INT 0
42479: PPUSH
42480: LD_VAR 0 8
42484: PPUSH
42485: LD_VAR 0 4
42489: PPUSH
42490: CALL_OW 380
// un := CreateHuman ;
42494: LD_ADDR_VAR 0 14
42498: PUSH
42499: CALL_OW 44
42503: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42504: LD_ADDR_VAR 0 7
42508: PUSH
42509: LD_VAR 0 7
42513: PPUSH
42514: LD_INT 1
42516: PPUSH
42517: LD_VAR 0 14
42521: PPUSH
42522: CALL_OW 2
42526: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42527: LD_VAR 0 14
42531: PPUSH
42532: LD_VAR 0 9
42536: PPUSH
42537: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42541: LD_VAR 0 9
42545: PPUSH
42546: CALL_OW 313
42550: PUSH
42551: LD_INT 6
42553: EQUAL
42554: PUSH
42555: LD_VAR 0 9
42559: PPUSH
42560: CALL_OW 266
42564: PUSH
42565: LD_INT 32
42567: PUSH
42568: LD_INT 31
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: IN
42575: OR
42576: IFFALSE 42390
42578: GO 42387
42580: POP
42581: POP
// end else
42582: GO 42964
// for j = 1 to x do
42584: LD_ADDR_VAR 0 9
42588: PUSH
42589: DOUBLE
42590: LD_INT 1
42592: DEC
42593: ST_TO_ADDR
42594: LD_VAR 0 13
42598: PUSH
42599: FOR_TO
42600: IFFALSE 42962
// begin InitHc ;
42602: CALL_OW 19
// if not f then
42606: LD_VAR 0 12
42610: NOT
42611: IFFALSE 42700
// begin PrepareHuman ( false , i , skill ) ;
42613: LD_INT 0
42615: PPUSH
42616: LD_VAR 0 8
42620: PPUSH
42621: LD_VAR 0 4
42625: PPUSH
42626: CALL_OW 380
// un := CreateHuman ;
42630: LD_ADDR_VAR 0 14
42634: PUSH
42635: CALL_OW 44
42639: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42640: LD_ADDR_VAR 0 7
42644: PUSH
42645: LD_VAR 0 7
42649: PPUSH
42650: LD_INT 1
42652: PPUSH
42653: LD_VAR 0 14
42657: PPUSH
42658: CALL_OW 2
42662: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42663: LD_VAR 0 14
42667: PPUSH
42668: LD_VAR 0 1
42672: PPUSH
42673: CALL_OW 250
42677: PPUSH
42678: LD_VAR 0 1
42682: PPUSH
42683: CALL_OW 251
42687: PPUSH
42688: LD_INT 10
42690: PPUSH
42691: LD_INT 0
42693: PPUSH
42694: CALL_OW 50
// continue ;
42698: GO 42599
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42700: LD_VAR 0 12
42704: PUSH
42705: LD_INT 1
42707: ARRAY
42708: PPUSH
42709: CALL_OW 313
42713: PUSH
42714: LD_VAR 0 12
42718: PUSH
42719: LD_INT 1
42721: ARRAY
42722: PPUSH
42723: CALL_OW 266
42727: PUSH
42728: LD_INT 32
42730: PUSH
42731: LD_INT 31
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: IN
42738: AND
42739: PUSH
42740: LD_VAR 0 12
42744: PUSH
42745: LD_INT 1
42747: ARRAY
42748: PPUSH
42749: CALL_OW 313
42753: PUSH
42754: LD_INT 6
42756: EQUAL
42757: OR
42758: IFFALSE 42778
// f := Delete ( f , 1 ) ;
42760: LD_ADDR_VAR 0 12
42764: PUSH
42765: LD_VAR 0 12
42769: PPUSH
42770: LD_INT 1
42772: PPUSH
42773: CALL_OW 3
42777: ST_TO_ADDR
// if not f then
42778: LD_VAR 0 12
42782: NOT
42783: IFFALSE 42801
// begin x := x + 2 ;
42785: LD_ADDR_VAR 0 13
42789: PUSH
42790: LD_VAR 0 13
42794: PUSH
42795: LD_INT 2
42797: PLUS
42798: ST_TO_ADDR
// continue ;
42799: GO 42599
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42801: LD_VAR 0 12
42805: PUSH
42806: LD_INT 1
42808: ARRAY
42809: PPUSH
42810: CALL_OW 266
42814: PUSH
42815: LD_INT 5
42817: EQUAL
42818: IFFALSE 42892
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42820: LD_VAR 0 12
42824: PUSH
42825: LD_INT 1
42827: ARRAY
42828: PPUSH
42829: CALL_OW 313
42833: PUSH
42834: LD_INT 3
42836: LESS
42837: IFFALSE 42873
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42839: LD_INT 0
42841: PPUSH
42842: LD_INT 5
42844: PUSH
42845: LD_INT 8
42847: PUSH
42848: LD_INT 9
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: LIST
42855: PUSH
42856: LD_VAR 0 17
42860: ARRAY
42861: PPUSH
42862: LD_VAR 0 4
42866: PPUSH
42867: CALL_OW 380
42871: GO 42890
// PrepareHuman ( false , i , skill ) ;
42873: LD_INT 0
42875: PPUSH
42876: LD_VAR 0 8
42880: PPUSH
42881: LD_VAR 0 4
42885: PPUSH
42886: CALL_OW 380
// end else
42890: GO 42909
// PrepareHuman ( false , i , skill ) ;
42892: LD_INT 0
42894: PPUSH
42895: LD_VAR 0 8
42899: PPUSH
42900: LD_VAR 0 4
42904: PPUSH
42905: CALL_OW 380
// un := CreateHuman ;
42909: LD_ADDR_VAR 0 14
42913: PUSH
42914: CALL_OW 44
42918: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42919: LD_ADDR_VAR 0 7
42923: PUSH
42924: LD_VAR 0 7
42928: PPUSH
42929: LD_INT 1
42931: PPUSH
42932: LD_VAR 0 14
42936: PPUSH
42937: CALL_OW 2
42941: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42942: LD_VAR 0 14
42946: PPUSH
42947: LD_VAR 0 12
42951: PUSH
42952: LD_INT 1
42954: ARRAY
42955: PPUSH
42956: CALL_OW 52
// end ;
42960: GO 42599
42962: POP
42963: POP
// end ;
42964: GO 41901
42966: POP
42967: POP
// result := result ^ buildings ;
42968: LD_ADDR_VAR 0 7
42972: PUSH
42973: LD_VAR 0 7
42977: PUSH
42978: LD_VAR 0 18
42982: ADD
42983: ST_TO_ADDR
// end else
42984: GO 43127
// begin for i = 1 to personel do
42986: LD_ADDR_VAR 0 8
42990: PUSH
42991: DOUBLE
42992: LD_INT 1
42994: DEC
42995: ST_TO_ADDR
42996: LD_VAR 0 6
43000: PUSH
43001: FOR_TO
43002: IFFALSE 43125
// begin if i > 4 then
43004: LD_VAR 0 8
43008: PUSH
43009: LD_INT 4
43011: GREATER
43012: IFFALSE 43016
// break ;
43014: GO 43125
// x := personel [ i ] ;
43016: LD_ADDR_VAR 0 13
43020: PUSH
43021: LD_VAR 0 6
43025: PUSH
43026: LD_VAR 0 8
43030: ARRAY
43031: ST_TO_ADDR
// if x = - 1 then
43032: LD_VAR 0 13
43036: PUSH
43037: LD_INT 1
43039: NEG
43040: EQUAL
43041: IFFALSE 43045
// continue ;
43043: GO 43001
// PrepareHuman ( false , i , skill ) ;
43045: LD_INT 0
43047: PPUSH
43048: LD_VAR 0 8
43052: PPUSH
43053: LD_VAR 0 4
43057: PPUSH
43058: CALL_OW 380
// un := CreateHuman ;
43062: LD_ADDR_VAR 0 14
43066: PUSH
43067: CALL_OW 44
43071: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43072: LD_VAR 0 14
43076: PPUSH
43077: LD_VAR 0 1
43081: PPUSH
43082: CALL_OW 250
43086: PPUSH
43087: LD_VAR 0 1
43091: PPUSH
43092: CALL_OW 251
43096: PPUSH
43097: LD_INT 10
43099: PPUSH
43100: LD_INT 0
43102: PPUSH
43103: CALL_OW 50
// result := result ^ un ;
43107: LD_ADDR_VAR 0 7
43111: PUSH
43112: LD_VAR 0 7
43116: PUSH
43117: LD_VAR 0 14
43121: ADD
43122: ST_TO_ADDR
// end ;
43123: GO 43001
43125: POP
43126: POP
// end ; end ;
43127: LD_VAR 0 7
43131: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43132: LD_INT 0
43134: PPUSH
43135: PPUSH
43136: PPUSH
43137: PPUSH
43138: PPUSH
43139: PPUSH
43140: PPUSH
43141: PPUSH
43142: PPUSH
43143: PPUSH
43144: PPUSH
43145: PPUSH
43146: PPUSH
43147: PPUSH
43148: PPUSH
43149: PPUSH
// result := false ;
43150: LD_ADDR_VAR 0 3
43154: PUSH
43155: LD_INT 0
43157: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43158: LD_VAR 0 1
43162: NOT
43163: PUSH
43164: LD_VAR 0 1
43168: PPUSH
43169: CALL_OW 266
43173: PUSH
43174: LD_INT 32
43176: PUSH
43177: LD_INT 33
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: IN
43184: NOT
43185: OR
43186: IFFALSE 43190
// exit ;
43188: GO 44326
// nat := GetNation ( tower ) ;
43190: LD_ADDR_VAR 0 12
43194: PUSH
43195: LD_VAR 0 1
43199: PPUSH
43200: CALL_OW 248
43204: ST_TO_ADDR
// side := GetSide ( tower ) ;
43205: LD_ADDR_VAR 0 16
43209: PUSH
43210: LD_VAR 0 1
43214: PPUSH
43215: CALL_OW 255
43219: ST_TO_ADDR
// x := GetX ( tower ) ;
43220: LD_ADDR_VAR 0 10
43224: PUSH
43225: LD_VAR 0 1
43229: PPUSH
43230: CALL_OW 250
43234: ST_TO_ADDR
// y := GetY ( tower ) ;
43235: LD_ADDR_VAR 0 11
43239: PUSH
43240: LD_VAR 0 1
43244: PPUSH
43245: CALL_OW 251
43249: ST_TO_ADDR
// if not x or not y then
43250: LD_VAR 0 10
43254: NOT
43255: PUSH
43256: LD_VAR 0 11
43260: NOT
43261: OR
43262: IFFALSE 43266
// exit ;
43264: GO 44326
// weapon := 0 ;
43266: LD_ADDR_VAR 0 18
43270: PUSH
43271: LD_INT 0
43273: ST_TO_ADDR
// fac_list := [ ] ;
43274: LD_ADDR_VAR 0 17
43278: PUSH
43279: EMPTY
43280: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
43281: LD_ADDR_VAR 0 6
43285: PUSH
43286: LD_VAR 0 1
43290: PPUSH
43291: CALL_OW 274
43295: PPUSH
43296: LD_VAR 0 2
43300: PPUSH
43301: CALL 40904 0 2
43305: PPUSH
43306: LD_INT 30
43308: PUSH
43309: LD_INT 3
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PPUSH
43316: CALL_OW 72
43320: ST_TO_ADDR
// if not factories then
43321: LD_VAR 0 6
43325: NOT
43326: IFFALSE 43330
// exit ;
43328: GO 44326
// for i in factories do
43330: LD_ADDR_VAR 0 8
43334: PUSH
43335: LD_VAR 0 6
43339: PUSH
43340: FOR_IN
43341: IFFALSE 43366
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43343: LD_ADDR_VAR 0 17
43347: PUSH
43348: LD_VAR 0 17
43352: PUSH
43353: LD_VAR 0 8
43357: PPUSH
43358: CALL_OW 478
43362: UNION
43363: ST_TO_ADDR
43364: GO 43340
43366: POP
43367: POP
// if not fac_list then
43368: LD_VAR 0 17
43372: NOT
43373: IFFALSE 43377
// exit ;
43375: GO 44326
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43377: LD_ADDR_VAR 0 5
43381: PUSH
43382: LD_INT 4
43384: PUSH
43385: LD_INT 5
43387: PUSH
43388: LD_INT 9
43390: PUSH
43391: LD_INT 10
43393: PUSH
43394: LD_INT 6
43396: PUSH
43397: LD_INT 7
43399: PUSH
43400: LD_INT 11
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 27
43414: PUSH
43415: LD_INT 28
43417: PUSH
43418: LD_INT 26
43420: PUSH
43421: LD_INT 30
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 43
43432: PUSH
43433: LD_INT 44
43435: PUSH
43436: LD_INT 46
43438: PUSH
43439: LD_INT 45
43441: PUSH
43442: LD_INT 47
43444: PUSH
43445: LD_INT 49
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: LIST
43460: PUSH
43461: LD_VAR 0 12
43465: ARRAY
43466: ST_TO_ADDR
// for i in list do
43467: LD_ADDR_VAR 0 8
43471: PUSH
43472: LD_VAR 0 5
43476: PUSH
43477: FOR_IN
43478: IFFALSE 43511
// if not i in fac_list then
43480: LD_VAR 0 8
43484: PUSH
43485: LD_VAR 0 17
43489: IN
43490: NOT
43491: IFFALSE 43509
// list := list diff i ;
43493: LD_ADDR_VAR 0 5
43497: PUSH
43498: LD_VAR 0 5
43502: PUSH
43503: LD_VAR 0 8
43507: DIFF
43508: ST_TO_ADDR
43509: GO 43477
43511: POP
43512: POP
// if not list then
43513: LD_VAR 0 5
43517: NOT
43518: IFFALSE 43522
// exit ;
43520: GO 44326
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43522: LD_VAR 0 12
43526: PUSH
43527: LD_INT 3
43529: EQUAL
43530: PUSH
43531: LD_INT 49
43533: PUSH
43534: LD_VAR 0 5
43538: IN
43539: AND
43540: PUSH
43541: LD_INT 31
43543: PPUSH
43544: LD_VAR 0 16
43548: PPUSH
43549: CALL_OW 321
43553: PUSH
43554: LD_INT 2
43556: EQUAL
43557: AND
43558: IFFALSE 43618
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43560: LD_INT 22
43562: PUSH
43563: LD_VAR 0 16
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 35
43574: PUSH
43575: LD_INT 49
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 91
43584: PUSH
43585: LD_VAR 0 1
43589: PUSH
43590: LD_INT 10
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: LIST
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: LIST
43602: PPUSH
43603: CALL_OW 69
43607: NOT
43608: IFFALSE 43618
// weapon := ru_time_lapser ;
43610: LD_ADDR_VAR 0 18
43614: PUSH
43615: LD_INT 49
43617: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43618: LD_VAR 0 12
43622: PUSH
43623: LD_INT 1
43625: PUSH
43626: LD_INT 2
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: IN
43633: PUSH
43634: LD_INT 11
43636: PUSH
43637: LD_VAR 0 5
43641: IN
43642: PUSH
43643: LD_INT 30
43645: PUSH
43646: LD_VAR 0 5
43650: IN
43651: OR
43652: AND
43653: PUSH
43654: LD_INT 6
43656: PPUSH
43657: LD_VAR 0 16
43661: PPUSH
43662: CALL_OW 321
43666: PUSH
43667: LD_INT 2
43669: EQUAL
43670: AND
43671: IFFALSE 43836
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43673: LD_INT 22
43675: PUSH
43676: LD_VAR 0 16
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 2
43687: PUSH
43688: LD_INT 35
43690: PUSH
43691: LD_INT 11
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 35
43700: PUSH
43701: LD_INT 30
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 91
43715: PUSH
43716: LD_VAR 0 1
43720: PUSH
43721: LD_INT 18
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: LIST
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: LIST
43733: PPUSH
43734: CALL_OW 69
43738: NOT
43739: PUSH
43740: LD_INT 22
43742: PUSH
43743: LD_VAR 0 16
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 2
43754: PUSH
43755: LD_INT 30
43757: PUSH
43758: LD_INT 32
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 30
43767: PUSH
43768: LD_INT 33
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 91
43782: PUSH
43783: LD_VAR 0 1
43787: PUSH
43788: LD_INT 12
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: LIST
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: LIST
43800: PUSH
43801: EMPTY
43802: LIST
43803: PPUSH
43804: CALL_OW 69
43808: PUSH
43809: LD_INT 2
43811: GREATER
43812: AND
43813: IFFALSE 43836
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43815: LD_ADDR_VAR 0 18
43819: PUSH
43820: LD_INT 11
43822: PUSH
43823: LD_INT 30
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_VAR 0 12
43834: ARRAY
43835: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43836: LD_VAR 0 18
43840: NOT
43841: PUSH
43842: LD_INT 40
43844: PPUSH
43845: LD_VAR 0 16
43849: PPUSH
43850: CALL_OW 321
43854: PUSH
43855: LD_INT 2
43857: EQUAL
43858: AND
43859: PUSH
43860: LD_INT 7
43862: PUSH
43863: LD_VAR 0 5
43867: IN
43868: PUSH
43869: LD_INT 28
43871: PUSH
43872: LD_VAR 0 5
43876: IN
43877: OR
43878: PUSH
43879: LD_INT 45
43881: PUSH
43882: LD_VAR 0 5
43886: IN
43887: OR
43888: AND
43889: IFFALSE 44143
// begin hex := GetHexInfo ( x , y ) ;
43891: LD_ADDR_VAR 0 4
43895: PUSH
43896: LD_VAR 0 10
43900: PPUSH
43901: LD_VAR 0 11
43905: PPUSH
43906: CALL_OW 546
43910: ST_TO_ADDR
// if hex [ 1 ] then
43911: LD_VAR 0 4
43915: PUSH
43916: LD_INT 1
43918: ARRAY
43919: IFFALSE 43923
// exit ;
43921: GO 44326
// height := hex [ 2 ] ;
43923: LD_ADDR_VAR 0 15
43927: PUSH
43928: LD_VAR 0 4
43932: PUSH
43933: LD_INT 2
43935: ARRAY
43936: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43937: LD_ADDR_VAR 0 14
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: LD_INT 2
43947: PUSH
43948: LD_INT 3
43950: PUSH
43951: LD_INT 5
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: ST_TO_ADDR
// for i in tmp do
43960: LD_ADDR_VAR 0 8
43964: PUSH
43965: LD_VAR 0 14
43969: PUSH
43970: FOR_IN
43971: IFFALSE 44141
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43973: LD_ADDR_VAR 0 9
43977: PUSH
43978: LD_VAR 0 10
43982: PPUSH
43983: LD_VAR 0 8
43987: PPUSH
43988: LD_INT 5
43990: PPUSH
43991: CALL_OW 272
43995: PUSH
43996: LD_VAR 0 11
44000: PPUSH
44001: LD_VAR 0 8
44005: PPUSH
44006: LD_INT 5
44008: PPUSH
44009: CALL_OW 273
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44018: LD_VAR 0 9
44022: PUSH
44023: LD_INT 1
44025: ARRAY
44026: PPUSH
44027: LD_VAR 0 9
44031: PUSH
44032: LD_INT 2
44034: ARRAY
44035: PPUSH
44036: CALL_OW 488
44040: IFFALSE 44139
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44042: LD_ADDR_VAR 0 4
44046: PUSH
44047: LD_VAR 0 9
44051: PUSH
44052: LD_INT 1
44054: ARRAY
44055: PPUSH
44056: LD_VAR 0 9
44060: PUSH
44061: LD_INT 2
44063: ARRAY
44064: PPUSH
44065: CALL_OW 546
44069: ST_TO_ADDR
// if hex [ 1 ] then
44070: LD_VAR 0 4
44074: PUSH
44075: LD_INT 1
44077: ARRAY
44078: IFFALSE 44082
// continue ;
44080: GO 43970
// h := hex [ 2 ] ;
44082: LD_ADDR_VAR 0 13
44086: PUSH
44087: LD_VAR 0 4
44091: PUSH
44092: LD_INT 2
44094: ARRAY
44095: ST_TO_ADDR
// if h + 7 < height then
44096: LD_VAR 0 13
44100: PUSH
44101: LD_INT 7
44103: PLUS
44104: PUSH
44105: LD_VAR 0 15
44109: LESS
44110: IFFALSE 44139
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44112: LD_ADDR_VAR 0 18
44116: PUSH
44117: LD_INT 7
44119: PUSH
44120: LD_INT 28
44122: PUSH
44123: LD_INT 45
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: LIST
44130: PUSH
44131: LD_VAR 0 12
44135: ARRAY
44136: ST_TO_ADDR
// break ;
44137: GO 44141
// end ; end ; end ;
44139: GO 43970
44141: POP
44142: POP
// end ; if not weapon then
44143: LD_VAR 0 18
44147: NOT
44148: IFFALSE 44208
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44150: LD_ADDR_VAR 0 5
44154: PUSH
44155: LD_VAR 0 5
44159: PUSH
44160: LD_INT 11
44162: PUSH
44163: LD_INT 30
44165: PUSH
44166: LD_INT 49
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: LIST
44173: DIFF
44174: ST_TO_ADDR
// if not list then
44175: LD_VAR 0 5
44179: NOT
44180: IFFALSE 44184
// exit ;
44182: GO 44326
// weapon := list [ rand ( 1 , list ) ] ;
44184: LD_ADDR_VAR 0 18
44188: PUSH
44189: LD_VAR 0 5
44193: PUSH
44194: LD_INT 1
44196: PPUSH
44197: LD_VAR 0 5
44201: PPUSH
44202: CALL_OW 12
44206: ARRAY
44207: ST_TO_ADDR
// end ; if weapon then
44208: LD_VAR 0 18
44212: IFFALSE 44326
// begin tmp := CostOfWeapon ( weapon ) ;
44214: LD_ADDR_VAR 0 14
44218: PUSH
44219: LD_VAR 0 18
44223: PPUSH
44224: CALL_OW 451
44228: ST_TO_ADDR
// j := GetBase ( tower ) ;
44229: LD_ADDR_VAR 0 9
44233: PUSH
44234: LD_VAR 0 1
44238: PPUSH
44239: CALL_OW 274
44243: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44244: LD_VAR 0 9
44248: PPUSH
44249: LD_INT 1
44251: PPUSH
44252: CALL_OW 275
44256: PUSH
44257: LD_VAR 0 14
44261: PUSH
44262: LD_INT 1
44264: ARRAY
44265: GREATEREQUAL
44266: PUSH
44267: LD_VAR 0 9
44271: PPUSH
44272: LD_INT 2
44274: PPUSH
44275: CALL_OW 275
44279: PUSH
44280: LD_VAR 0 14
44284: PUSH
44285: LD_INT 2
44287: ARRAY
44288: GREATEREQUAL
44289: AND
44290: PUSH
44291: LD_VAR 0 9
44295: PPUSH
44296: LD_INT 3
44298: PPUSH
44299: CALL_OW 275
44303: PUSH
44304: LD_VAR 0 14
44308: PUSH
44309: LD_INT 3
44311: ARRAY
44312: GREATEREQUAL
44313: AND
44314: IFFALSE 44326
// result := weapon ;
44316: LD_ADDR_VAR 0 3
44320: PUSH
44321: LD_VAR 0 18
44325: ST_TO_ADDR
// end ; end ;
44326: LD_VAR 0 3
44330: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44331: LD_INT 0
44333: PPUSH
44334: PPUSH
// result := true ;
44335: LD_ADDR_VAR 0 3
44339: PUSH
44340: LD_INT 1
44342: ST_TO_ADDR
// if array1 = array2 then
44343: LD_VAR 0 1
44347: PUSH
44348: LD_VAR 0 2
44352: EQUAL
44353: IFFALSE 44413
// begin for i = 1 to array1 do
44355: LD_ADDR_VAR 0 4
44359: PUSH
44360: DOUBLE
44361: LD_INT 1
44363: DEC
44364: ST_TO_ADDR
44365: LD_VAR 0 1
44369: PUSH
44370: FOR_TO
44371: IFFALSE 44409
// if array1 [ i ] <> array2 [ i ] then
44373: LD_VAR 0 1
44377: PUSH
44378: LD_VAR 0 4
44382: ARRAY
44383: PUSH
44384: LD_VAR 0 2
44388: PUSH
44389: LD_VAR 0 4
44393: ARRAY
44394: NONEQUAL
44395: IFFALSE 44407
// begin result := false ;
44397: LD_ADDR_VAR 0 3
44401: PUSH
44402: LD_INT 0
44404: ST_TO_ADDR
// break ;
44405: GO 44409
// end ;
44407: GO 44370
44409: POP
44410: POP
// end else
44411: GO 44421
// result := false ;
44413: LD_ADDR_VAR 0 3
44417: PUSH
44418: LD_INT 0
44420: ST_TO_ADDR
// end ;
44421: LD_VAR 0 3
44425: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44426: LD_INT 0
44428: PPUSH
44429: PPUSH
44430: PPUSH
// pom := GetBase ( fac ) ;
44431: LD_ADDR_VAR 0 5
44435: PUSH
44436: LD_VAR 0 1
44440: PPUSH
44441: CALL_OW 274
44445: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44446: LD_ADDR_VAR 0 4
44450: PUSH
44451: LD_VAR 0 2
44455: PUSH
44456: LD_INT 1
44458: ARRAY
44459: PPUSH
44460: LD_VAR 0 2
44464: PUSH
44465: LD_INT 2
44467: ARRAY
44468: PPUSH
44469: LD_VAR 0 2
44473: PUSH
44474: LD_INT 3
44476: ARRAY
44477: PPUSH
44478: LD_VAR 0 2
44482: PUSH
44483: LD_INT 4
44485: ARRAY
44486: PPUSH
44487: CALL_OW 449
44491: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44492: LD_ADDR_VAR 0 3
44496: PUSH
44497: LD_VAR 0 5
44501: PPUSH
44502: LD_INT 1
44504: PPUSH
44505: CALL_OW 275
44509: PUSH
44510: LD_VAR 0 4
44514: PUSH
44515: LD_INT 1
44517: ARRAY
44518: GREATEREQUAL
44519: PUSH
44520: LD_VAR 0 5
44524: PPUSH
44525: LD_INT 2
44527: PPUSH
44528: CALL_OW 275
44532: PUSH
44533: LD_VAR 0 4
44537: PUSH
44538: LD_INT 2
44540: ARRAY
44541: GREATEREQUAL
44542: AND
44543: PUSH
44544: LD_VAR 0 5
44548: PPUSH
44549: LD_INT 3
44551: PPUSH
44552: CALL_OW 275
44556: PUSH
44557: LD_VAR 0 4
44561: PUSH
44562: LD_INT 3
44564: ARRAY
44565: GREATEREQUAL
44566: AND
44567: ST_TO_ADDR
// end ;
44568: LD_VAR 0 3
44572: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44573: LD_INT 0
44575: PPUSH
44576: PPUSH
44577: PPUSH
44578: PPUSH
// pom := GetBase ( building ) ;
44579: LD_ADDR_VAR 0 3
44583: PUSH
44584: LD_VAR 0 1
44588: PPUSH
44589: CALL_OW 274
44593: ST_TO_ADDR
// if not pom then
44594: LD_VAR 0 3
44598: NOT
44599: IFFALSE 44603
// exit ;
44601: GO 44773
// btype := GetBType ( building ) ;
44603: LD_ADDR_VAR 0 5
44607: PUSH
44608: LD_VAR 0 1
44612: PPUSH
44613: CALL_OW 266
44617: ST_TO_ADDR
// if btype = b_armoury then
44618: LD_VAR 0 5
44622: PUSH
44623: LD_INT 4
44625: EQUAL
44626: IFFALSE 44636
// btype := b_barracks ;
44628: LD_ADDR_VAR 0 5
44632: PUSH
44633: LD_INT 5
44635: ST_TO_ADDR
// if btype = b_depot then
44636: LD_VAR 0 5
44640: PUSH
44641: LD_INT 0
44643: EQUAL
44644: IFFALSE 44654
// btype := b_warehouse ;
44646: LD_ADDR_VAR 0 5
44650: PUSH
44651: LD_INT 1
44653: ST_TO_ADDR
// if btype = b_workshop then
44654: LD_VAR 0 5
44658: PUSH
44659: LD_INT 2
44661: EQUAL
44662: IFFALSE 44672
// btype := b_factory ;
44664: LD_ADDR_VAR 0 5
44668: PUSH
44669: LD_INT 3
44671: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44672: LD_ADDR_VAR 0 4
44676: PUSH
44677: LD_VAR 0 5
44681: PPUSH
44682: LD_VAR 0 1
44686: PPUSH
44687: CALL_OW 248
44691: PPUSH
44692: CALL_OW 450
44696: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44697: LD_ADDR_VAR 0 2
44701: PUSH
44702: LD_VAR 0 3
44706: PPUSH
44707: LD_INT 1
44709: PPUSH
44710: CALL_OW 275
44714: PUSH
44715: LD_VAR 0 4
44719: PUSH
44720: LD_INT 1
44722: ARRAY
44723: GREATEREQUAL
44724: PUSH
44725: LD_VAR 0 3
44729: PPUSH
44730: LD_INT 2
44732: PPUSH
44733: CALL_OW 275
44737: PUSH
44738: LD_VAR 0 4
44742: PUSH
44743: LD_INT 2
44745: ARRAY
44746: GREATEREQUAL
44747: AND
44748: PUSH
44749: LD_VAR 0 3
44753: PPUSH
44754: LD_INT 3
44756: PPUSH
44757: CALL_OW 275
44761: PUSH
44762: LD_VAR 0 4
44766: PUSH
44767: LD_INT 3
44769: ARRAY
44770: GREATEREQUAL
44771: AND
44772: ST_TO_ADDR
// end ;
44773: LD_VAR 0 2
44777: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44778: LD_INT 0
44780: PPUSH
44781: PPUSH
44782: PPUSH
// pom := GetBase ( building ) ;
44783: LD_ADDR_VAR 0 4
44787: PUSH
44788: LD_VAR 0 1
44792: PPUSH
44793: CALL_OW 274
44797: ST_TO_ADDR
// if not pom then
44798: LD_VAR 0 4
44802: NOT
44803: IFFALSE 44807
// exit ;
44805: GO 44908
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44807: LD_ADDR_VAR 0 5
44811: PUSH
44812: LD_VAR 0 2
44816: PPUSH
44817: LD_VAR 0 1
44821: PPUSH
44822: CALL_OW 248
44826: PPUSH
44827: CALL_OW 450
44831: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44832: LD_ADDR_VAR 0 3
44836: PUSH
44837: LD_VAR 0 4
44841: PPUSH
44842: LD_INT 1
44844: PPUSH
44845: CALL_OW 275
44849: PUSH
44850: LD_VAR 0 5
44854: PUSH
44855: LD_INT 1
44857: ARRAY
44858: GREATEREQUAL
44859: PUSH
44860: LD_VAR 0 4
44864: PPUSH
44865: LD_INT 2
44867: PPUSH
44868: CALL_OW 275
44872: PUSH
44873: LD_VAR 0 5
44877: PUSH
44878: LD_INT 2
44880: ARRAY
44881: GREATEREQUAL
44882: AND
44883: PUSH
44884: LD_VAR 0 4
44888: PPUSH
44889: LD_INT 3
44891: PPUSH
44892: CALL_OW 275
44896: PUSH
44897: LD_VAR 0 5
44901: PUSH
44902: LD_INT 3
44904: ARRAY
44905: GREATEREQUAL
44906: AND
44907: ST_TO_ADDR
// end ;
44908: LD_VAR 0 3
44912: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
44913: LD_INT 0
44915: PPUSH
44916: PPUSH
44917: PPUSH
44918: PPUSH
44919: PPUSH
44920: PPUSH
44921: PPUSH
44922: PPUSH
44923: PPUSH
44924: PPUSH
// result := false ;
44925: LD_ADDR_VAR 0 6
44929: PUSH
44930: LD_INT 0
44932: ST_TO_ADDR
// if not base or not btype or not x or not y then
44933: LD_VAR 0 1
44937: NOT
44938: PUSH
44939: LD_VAR 0 2
44943: NOT
44944: OR
44945: PUSH
44946: LD_VAR 0 3
44950: NOT
44951: OR
44952: PUSH
44953: LD_VAR 0 4
44957: NOT
44958: OR
44959: IFFALSE 44963
// exit ;
44961: GO 45572
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
44963: LD_ADDR_VAR 0 12
44967: PUSH
44968: LD_VAR 0 2
44972: PPUSH
44973: LD_VAR 0 3
44977: PPUSH
44978: LD_VAR 0 4
44982: PPUSH
44983: LD_VAR 0 5
44987: PPUSH
44988: LD_VAR 0 1
44992: PUSH
44993: LD_INT 1
44995: ARRAY
44996: PPUSH
44997: CALL_OW 248
45001: PPUSH
45002: LD_INT 0
45004: PPUSH
45005: CALL 46409 0 6
45009: ST_TO_ADDR
// if not hexes then
45010: LD_VAR 0 12
45014: NOT
45015: IFFALSE 45019
// exit ;
45017: GO 45572
// for i = 1 to hexes do
45019: LD_ADDR_VAR 0 7
45023: PUSH
45024: DOUBLE
45025: LD_INT 1
45027: DEC
45028: ST_TO_ADDR
45029: LD_VAR 0 12
45033: PUSH
45034: FOR_TO
45035: IFFALSE 45570
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45037: LD_ADDR_VAR 0 11
45041: PUSH
45042: LD_VAR 0 12
45046: PUSH
45047: LD_VAR 0 7
45051: ARRAY
45052: PUSH
45053: LD_INT 1
45055: ARRAY
45056: PPUSH
45057: LD_VAR 0 12
45061: PUSH
45062: LD_VAR 0 7
45066: ARRAY
45067: PUSH
45068: LD_INT 2
45070: ARRAY
45071: PPUSH
45072: CALL_OW 428
45076: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45077: LD_VAR 0 12
45081: PUSH
45082: LD_VAR 0 7
45086: ARRAY
45087: PUSH
45088: LD_INT 1
45090: ARRAY
45091: PPUSH
45092: LD_VAR 0 12
45096: PUSH
45097: LD_VAR 0 7
45101: ARRAY
45102: PUSH
45103: LD_INT 2
45105: ARRAY
45106: PPUSH
45107: CALL_OW 351
45111: PUSH
45112: LD_VAR 0 12
45116: PUSH
45117: LD_VAR 0 7
45121: ARRAY
45122: PUSH
45123: LD_INT 1
45125: ARRAY
45126: PPUSH
45127: LD_VAR 0 12
45131: PUSH
45132: LD_VAR 0 7
45136: ARRAY
45137: PUSH
45138: LD_INT 2
45140: ARRAY
45141: PPUSH
45142: CALL_OW 488
45146: NOT
45147: OR
45148: PUSH
45149: LD_VAR 0 11
45153: PPUSH
45154: CALL_OW 247
45158: PUSH
45159: LD_INT 3
45161: EQUAL
45162: OR
45163: IFFALSE 45169
// exit ;
45165: POP
45166: POP
45167: GO 45572
// if not tmp or not tmp in base then
45169: LD_VAR 0 11
45173: NOT
45174: PUSH
45175: LD_VAR 0 11
45179: PUSH
45180: LD_VAR 0 1
45184: IN
45185: NOT
45186: OR
45187: IFFALSE 45191
// continue ;
45189: GO 45034
// result := true ;
45191: LD_ADDR_VAR 0 6
45195: PUSH
45196: LD_INT 1
45198: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45199: LD_ADDR_VAR 0 15
45203: PUSH
45204: LD_VAR 0 1
45208: PPUSH
45209: LD_INT 22
45211: PUSH
45212: LD_VAR 0 11
45216: PPUSH
45217: CALL_OW 255
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 2
45228: PUSH
45229: LD_INT 30
45231: PUSH
45232: LD_INT 0
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 30
45241: PUSH
45242: LD_INT 1
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: LIST
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PPUSH
45258: CALL_OW 72
45262: ST_TO_ADDR
// if dep then
45263: LD_VAR 0 15
45267: IFFALSE 45403
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45269: LD_ADDR_VAR 0 14
45273: PUSH
45274: LD_VAR 0 15
45278: PUSH
45279: LD_INT 1
45281: ARRAY
45282: PPUSH
45283: CALL_OW 250
45287: PPUSH
45288: LD_VAR 0 15
45292: PUSH
45293: LD_INT 1
45295: ARRAY
45296: PPUSH
45297: CALL_OW 254
45301: PPUSH
45302: LD_INT 5
45304: PPUSH
45305: CALL_OW 272
45309: PUSH
45310: LD_VAR 0 15
45314: PUSH
45315: LD_INT 1
45317: ARRAY
45318: PPUSH
45319: CALL_OW 251
45323: PPUSH
45324: LD_VAR 0 15
45328: PUSH
45329: LD_INT 1
45331: ARRAY
45332: PPUSH
45333: CALL_OW 254
45337: PPUSH
45338: LD_INT 5
45340: PPUSH
45341: CALL_OW 273
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45350: LD_VAR 0 14
45354: PUSH
45355: LD_INT 1
45357: ARRAY
45358: PPUSH
45359: LD_VAR 0 14
45363: PUSH
45364: LD_INT 2
45366: ARRAY
45367: PPUSH
45368: CALL_OW 488
45372: IFFALSE 45403
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45374: LD_VAR 0 11
45378: PPUSH
45379: LD_VAR 0 14
45383: PUSH
45384: LD_INT 1
45386: ARRAY
45387: PPUSH
45388: LD_VAR 0 14
45392: PUSH
45393: LD_INT 2
45395: ARRAY
45396: PPUSH
45397: CALL_OW 111
// continue ;
45401: GO 45034
// end ; end ; r := GetDir ( tmp ) ;
45403: LD_ADDR_VAR 0 13
45407: PUSH
45408: LD_VAR 0 11
45412: PPUSH
45413: CALL_OW 254
45417: ST_TO_ADDR
// if r = 5 then
45418: LD_VAR 0 13
45422: PUSH
45423: LD_INT 5
45425: EQUAL
45426: IFFALSE 45436
// r := 0 ;
45428: LD_ADDR_VAR 0 13
45432: PUSH
45433: LD_INT 0
45435: ST_TO_ADDR
// for j = r to 5 do
45436: LD_ADDR_VAR 0 8
45440: PUSH
45441: DOUBLE
45442: LD_VAR 0 13
45446: DEC
45447: ST_TO_ADDR
45448: LD_INT 5
45450: PUSH
45451: FOR_TO
45452: IFFALSE 45566
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45454: LD_ADDR_VAR 0 9
45458: PUSH
45459: LD_VAR 0 11
45463: PPUSH
45464: CALL_OW 250
45468: PPUSH
45469: LD_VAR 0 8
45473: PPUSH
45474: LD_INT 2
45476: PPUSH
45477: CALL_OW 272
45481: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45482: LD_ADDR_VAR 0 10
45486: PUSH
45487: LD_VAR 0 11
45491: PPUSH
45492: CALL_OW 251
45496: PPUSH
45497: LD_VAR 0 8
45501: PPUSH
45502: LD_INT 2
45504: PPUSH
45505: CALL_OW 273
45509: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45510: LD_VAR 0 9
45514: PPUSH
45515: LD_VAR 0 10
45519: PPUSH
45520: CALL_OW 488
45524: PUSH
45525: LD_VAR 0 9
45529: PPUSH
45530: LD_VAR 0 10
45534: PPUSH
45535: CALL_OW 428
45539: NOT
45540: AND
45541: IFFALSE 45564
// begin ComMoveXY ( tmp , _x , _y ) ;
45543: LD_VAR 0 11
45547: PPUSH
45548: LD_VAR 0 9
45552: PPUSH
45553: LD_VAR 0 10
45557: PPUSH
45558: CALL_OW 111
// break ;
45562: GO 45566
// end ; end ;
45564: GO 45451
45566: POP
45567: POP
// end ;
45568: GO 45034
45570: POP
45571: POP
// end ;
45572: LD_VAR 0 6
45576: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
45577: LD_INT 0
45579: PPUSH
45580: PPUSH
45581: PPUSH
45582: PPUSH
45583: PPUSH
45584: PPUSH
45585: PPUSH
45586: PPUSH
45587: PPUSH
45588: PPUSH
// result := false ;
45589: LD_ADDR_VAR 0 6
45593: PUSH
45594: LD_INT 0
45596: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45597: LD_VAR 0 1
45601: NOT
45602: PUSH
45603: LD_VAR 0 1
45607: PPUSH
45608: CALL_OW 266
45612: PUSH
45613: LD_INT 0
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: IN
45623: NOT
45624: OR
45625: PUSH
45626: LD_VAR 0 2
45630: NOT
45631: OR
45632: PUSH
45633: LD_VAR 0 5
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: LD_INT 1
45643: PUSH
45644: LD_INT 2
45646: PUSH
45647: LD_INT 3
45649: PUSH
45650: LD_INT 4
45652: PUSH
45653: LD_INT 5
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: IN
45664: NOT
45665: OR
45666: PUSH
45667: LD_VAR 0 3
45671: PPUSH
45672: LD_VAR 0 4
45676: PPUSH
45677: CALL_OW 488
45681: NOT
45682: OR
45683: IFFALSE 45687
// exit ;
45685: GO 46404
// pom := GetBase ( depot ) ;
45687: LD_ADDR_VAR 0 10
45691: PUSH
45692: LD_VAR 0 1
45696: PPUSH
45697: CALL_OW 274
45701: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45702: LD_ADDR_VAR 0 11
45706: PUSH
45707: LD_VAR 0 2
45711: PPUSH
45712: LD_VAR 0 1
45716: PPUSH
45717: CALL_OW 248
45721: PPUSH
45722: CALL_OW 450
45726: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45727: LD_VAR 0 10
45731: PPUSH
45732: LD_INT 1
45734: PPUSH
45735: CALL_OW 275
45739: PUSH
45740: LD_VAR 0 11
45744: PUSH
45745: LD_INT 1
45747: ARRAY
45748: GREATEREQUAL
45749: PUSH
45750: LD_VAR 0 10
45754: PPUSH
45755: LD_INT 2
45757: PPUSH
45758: CALL_OW 275
45762: PUSH
45763: LD_VAR 0 11
45767: PUSH
45768: LD_INT 2
45770: ARRAY
45771: GREATEREQUAL
45772: AND
45773: PUSH
45774: LD_VAR 0 10
45778: PPUSH
45779: LD_INT 3
45781: PPUSH
45782: CALL_OW 275
45786: PUSH
45787: LD_VAR 0 11
45791: PUSH
45792: LD_INT 3
45794: ARRAY
45795: GREATEREQUAL
45796: AND
45797: NOT
45798: IFFALSE 45802
// exit ;
45800: GO 46404
// if GetBType ( depot ) = b_depot then
45802: LD_VAR 0 1
45806: PPUSH
45807: CALL_OW 266
45811: PUSH
45812: LD_INT 0
45814: EQUAL
45815: IFFALSE 45827
// dist := 28 else
45817: LD_ADDR_VAR 0 14
45821: PUSH
45822: LD_INT 28
45824: ST_TO_ADDR
45825: GO 45835
// dist := 36 ;
45827: LD_ADDR_VAR 0 14
45831: PUSH
45832: LD_INT 36
45834: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45835: LD_VAR 0 1
45839: PPUSH
45840: LD_VAR 0 3
45844: PPUSH
45845: LD_VAR 0 4
45849: PPUSH
45850: CALL_OW 297
45854: PUSH
45855: LD_VAR 0 14
45859: GREATER
45860: IFFALSE 45864
// exit ;
45862: GO 46404
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45864: LD_ADDR_VAR 0 12
45868: PUSH
45869: LD_VAR 0 2
45873: PPUSH
45874: LD_VAR 0 3
45878: PPUSH
45879: LD_VAR 0 4
45883: PPUSH
45884: LD_VAR 0 5
45888: PPUSH
45889: LD_VAR 0 1
45893: PPUSH
45894: CALL_OW 248
45898: PPUSH
45899: LD_INT 0
45901: PPUSH
45902: CALL 46409 0 6
45906: ST_TO_ADDR
// if not hexes then
45907: LD_VAR 0 12
45911: NOT
45912: IFFALSE 45916
// exit ;
45914: GO 46404
// hex := GetHexInfo ( x , y ) ;
45916: LD_ADDR_VAR 0 15
45920: PUSH
45921: LD_VAR 0 3
45925: PPUSH
45926: LD_VAR 0 4
45930: PPUSH
45931: CALL_OW 546
45935: ST_TO_ADDR
// if hex [ 1 ] then
45936: LD_VAR 0 15
45940: PUSH
45941: LD_INT 1
45943: ARRAY
45944: IFFALSE 45948
// exit ;
45946: GO 46404
// height := hex [ 2 ] ;
45948: LD_ADDR_VAR 0 13
45952: PUSH
45953: LD_VAR 0 15
45957: PUSH
45958: LD_INT 2
45960: ARRAY
45961: ST_TO_ADDR
// for i = 1 to hexes do
45962: LD_ADDR_VAR 0 7
45966: PUSH
45967: DOUBLE
45968: LD_INT 1
45970: DEC
45971: ST_TO_ADDR
45972: LD_VAR 0 12
45976: PUSH
45977: FOR_TO
45978: IFFALSE 46308
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45980: LD_VAR 0 12
45984: PUSH
45985: LD_VAR 0 7
45989: ARRAY
45990: PUSH
45991: LD_INT 1
45993: ARRAY
45994: PPUSH
45995: LD_VAR 0 12
45999: PUSH
46000: LD_VAR 0 7
46004: ARRAY
46005: PUSH
46006: LD_INT 2
46008: ARRAY
46009: PPUSH
46010: CALL_OW 488
46014: NOT
46015: PUSH
46016: LD_VAR 0 12
46020: PUSH
46021: LD_VAR 0 7
46025: ARRAY
46026: PUSH
46027: LD_INT 1
46029: ARRAY
46030: PPUSH
46031: LD_VAR 0 12
46035: PUSH
46036: LD_VAR 0 7
46040: ARRAY
46041: PUSH
46042: LD_INT 2
46044: ARRAY
46045: PPUSH
46046: CALL_OW 428
46050: PUSH
46051: LD_INT 0
46053: GREATER
46054: OR
46055: PUSH
46056: LD_VAR 0 12
46060: PUSH
46061: LD_VAR 0 7
46065: ARRAY
46066: PUSH
46067: LD_INT 1
46069: ARRAY
46070: PPUSH
46071: LD_VAR 0 12
46075: PUSH
46076: LD_VAR 0 7
46080: ARRAY
46081: PUSH
46082: LD_INT 2
46084: ARRAY
46085: PPUSH
46086: CALL_OW 351
46090: OR
46091: IFFALSE 46097
// exit ;
46093: POP
46094: POP
46095: GO 46404
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46097: LD_ADDR_VAR 0 8
46101: PUSH
46102: LD_VAR 0 12
46106: PUSH
46107: LD_VAR 0 7
46111: ARRAY
46112: PUSH
46113: LD_INT 1
46115: ARRAY
46116: PPUSH
46117: LD_VAR 0 12
46121: PUSH
46122: LD_VAR 0 7
46126: ARRAY
46127: PUSH
46128: LD_INT 2
46130: ARRAY
46131: PPUSH
46132: CALL_OW 546
46136: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46137: LD_VAR 0 8
46141: PUSH
46142: LD_INT 1
46144: ARRAY
46145: PUSH
46146: LD_VAR 0 8
46150: PUSH
46151: LD_INT 2
46153: ARRAY
46154: PUSH
46155: LD_VAR 0 13
46159: PUSH
46160: LD_INT 2
46162: PLUS
46163: GREATER
46164: OR
46165: PUSH
46166: LD_VAR 0 8
46170: PUSH
46171: LD_INT 2
46173: ARRAY
46174: PUSH
46175: LD_VAR 0 13
46179: PUSH
46180: LD_INT 2
46182: MINUS
46183: LESS
46184: OR
46185: PUSH
46186: LD_VAR 0 8
46190: PUSH
46191: LD_INT 3
46193: ARRAY
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: LD_INT 8
46200: PUSH
46201: LD_INT 9
46203: PUSH
46204: LD_INT 10
46206: PUSH
46207: LD_INT 11
46209: PUSH
46210: LD_INT 12
46212: PUSH
46213: LD_INT 13
46215: PUSH
46216: LD_INT 16
46218: PUSH
46219: LD_INT 17
46221: PUSH
46222: LD_INT 18
46224: PUSH
46225: LD_INT 19
46227: PUSH
46228: LD_INT 20
46230: PUSH
46231: LD_INT 21
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: IN
46249: NOT
46250: OR
46251: PUSH
46252: LD_VAR 0 8
46256: PUSH
46257: LD_INT 5
46259: ARRAY
46260: NOT
46261: OR
46262: PUSH
46263: LD_VAR 0 8
46267: PUSH
46268: LD_INT 6
46270: ARRAY
46271: PUSH
46272: LD_INT 1
46274: PUSH
46275: LD_INT 2
46277: PUSH
46278: LD_INT 7
46280: PUSH
46281: LD_INT 9
46283: PUSH
46284: LD_INT 10
46286: PUSH
46287: LD_INT 11
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: IN
46298: NOT
46299: OR
46300: IFFALSE 46306
// exit ;
46302: POP
46303: POP
46304: GO 46404
// end ;
46306: GO 45977
46308: POP
46309: POP
// side := GetSide ( depot ) ;
46310: LD_ADDR_VAR 0 9
46314: PUSH
46315: LD_VAR 0 1
46319: PPUSH
46320: CALL_OW 255
46324: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46325: LD_VAR 0 9
46329: PPUSH
46330: LD_VAR 0 3
46334: PPUSH
46335: LD_VAR 0 4
46339: PPUSH
46340: LD_INT 20
46342: PPUSH
46343: CALL 39058 0 4
46347: PUSH
46348: LD_INT 4
46350: ARRAY
46351: IFFALSE 46355
// exit ;
46353: GO 46404
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46355: LD_VAR 0 2
46359: PUSH
46360: LD_INT 29
46362: PUSH
46363: LD_INT 30
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: IN
46370: PUSH
46371: LD_VAR 0 3
46375: PPUSH
46376: LD_VAR 0 4
46380: PPUSH
46381: LD_VAR 0 9
46385: PPUSH
46386: CALL_OW 440
46390: NOT
46391: AND
46392: IFFALSE 46396
// exit ;
46394: GO 46404
// result := true ;
46396: LD_ADDR_VAR 0 6
46400: PUSH
46401: LD_INT 1
46403: ST_TO_ADDR
// end ;
46404: LD_VAR 0 6
46408: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46409: LD_INT 0
46411: PPUSH
46412: PPUSH
46413: PPUSH
46414: PPUSH
46415: PPUSH
46416: PPUSH
46417: PPUSH
46418: PPUSH
46419: PPUSH
46420: PPUSH
46421: PPUSH
46422: PPUSH
46423: PPUSH
46424: PPUSH
46425: PPUSH
46426: PPUSH
46427: PPUSH
46428: PPUSH
46429: PPUSH
46430: PPUSH
46431: PPUSH
46432: PPUSH
46433: PPUSH
46434: PPUSH
46435: PPUSH
46436: PPUSH
46437: PPUSH
46438: PPUSH
46439: PPUSH
46440: PPUSH
46441: PPUSH
46442: PPUSH
46443: PPUSH
46444: PPUSH
46445: PPUSH
46446: PPUSH
46447: PPUSH
46448: PPUSH
46449: PPUSH
46450: PPUSH
46451: PPUSH
46452: PPUSH
46453: PPUSH
46454: PPUSH
46455: PPUSH
46456: PPUSH
46457: PPUSH
46458: PPUSH
46459: PPUSH
46460: PPUSH
46461: PPUSH
46462: PPUSH
46463: PPUSH
46464: PPUSH
46465: PPUSH
46466: PPUSH
46467: PPUSH
46468: PPUSH
// result = [ ] ;
46469: LD_ADDR_VAR 0 7
46473: PUSH
46474: EMPTY
46475: ST_TO_ADDR
// temp_list = [ ] ;
46476: LD_ADDR_VAR 0 9
46480: PUSH
46481: EMPTY
46482: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46483: LD_VAR 0 4
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: LD_INT 2
46496: PUSH
46497: LD_INT 3
46499: PUSH
46500: LD_INT 4
46502: PUSH
46503: LD_INT 5
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: IN
46514: NOT
46515: PUSH
46516: LD_VAR 0 1
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: IN
46531: PUSH
46532: LD_VAR 0 5
46536: PUSH
46537: LD_INT 1
46539: PUSH
46540: LD_INT 2
46542: PUSH
46543: LD_INT 3
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: LIST
46550: IN
46551: NOT
46552: AND
46553: OR
46554: IFFALSE 46558
// exit ;
46556: GO 64949
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46558: LD_VAR 0 1
46562: PUSH
46563: LD_INT 6
46565: PUSH
46566: LD_INT 7
46568: PUSH
46569: LD_INT 8
46571: PUSH
46572: LD_INT 13
46574: PUSH
46575: LD_INT 12
46577: PUSH
46578: LD_INT 15
46580: PUSH
46581: LD_INT 11
46583: PUSH
46584: LD_INT 14
46586: PUSH
46587: LD_INT 10
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: IN
46601: IFFALSE 46611
// btype = b_lab ;
46603: LD_ADDR_VAR 0 1
46607: PUSH
46608: LD_INT 6
46610: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46611: LD_VAR 0 6
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: LD_INT 2
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: LIST
46629: IN
46630: NOT
46631: PUSH
46632: LD_VAR 0 1
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: LD_INT 1
46642: PUSH
46643: LD_INT 2
46645: PUSH
46646: LD_INT 3
46648: PUSH
46649: LD_INT 6
46651: PUSH
46652: LD_INT 36
46654: PUSH
46655: LD_INT 4
46657: PUSH
46658: LD_INT 5
46660: PUSH
46661: LD_INT 31
46663: PUSH
46664: LD_INT 32
46666: PUSH
46667: LD_INT 33
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: IN
46683: NOT
46684: PUSH
46685: LD_VAR 0 6
46689: PUSH
46690: LD_INT 1
46692: EQUAL
46693: AND
46694: OR
46695: PUSH
46696: LD_VAR 0 1
46700: PUSH
46701: LD_INT 2
46703: PUSH
46704: LD_INT 3
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: IN
46711: NOT
46712: PUSH
46713: LD_VAR 0 6
46717: PUSH
46718: LD_INT 2
46720: EQUAL
46721: AND
46722: OR
46723: IFFALSE 46733
// mode = 0 ;
46725: LD_ADDR_VAR 0 6
46729: PUSH
46730: LD_INT 0
46732: ST_TO_ADDR
// case mode of 0 :
46733: LD_VAR 0 6
46737: PUSH
46738: LD_INT 0
46740: DOUBLE
46741: EQUAL
46742: IFTRUE 46746
46744: GO 58199
46746: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46747: LD_ADDR_VAR 0 11
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 0
46764: PUSH
46765: LD_INT 1
46767: NEG
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 1
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: LD_INT 2
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: LD_INT 2
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 1
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: LD_INT 2
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 0
46872: PUSH
46873: LD_INT 2
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 1
46882: NEG
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: LD_INT 3
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 0
46903: PUSH
46904: LD_INT 3
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: LD_INT 2
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46940: LD_ADDR_VAR 0 12
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: LD_INT 1
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: LD_INT 1
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: LD_INT 1
47024: NEG
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 2
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 2
47042: PUSH
47043: LD_INT 1
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: LD_INT 1
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 2
47063: NEG
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 2
47074: NEG
47075: PUSH
47076: LD_INT 1
47078: NEG
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 2
47086: NEG
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 3
47097: NEG
47098: PUSH
47099: LD_INT 0
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 3
47108: NEG
47109: PUSH
47110: LD_INT 1
47112: NEG
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47136: LD_ADDR_VAR 0 13
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: LD_INT 1
47156: NEG
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 1
47164: PUSH
47165: LD_INT 0
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: PUSH
47175: LD_INT 1
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: LD_INT 1
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 1
47194: NEG
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 1
47205: NEG
47206: PUSH
47207: LD_INT 1
47209: NEG
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: LD_INT 2
47221: NEG
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 2
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 2
47239: PUSH
47240: LD_INT 2
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: LD_INT 2
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 2
47259: NEG
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 2
47271: NEG
47272: PUSH
47273: LD_INT 2
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 2
47283: NEG
47284: PUSH
47285: LD_INT 3
47287: NEG
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 3
47295: NEG
47296: PUSH
47297: LD_INT 2
47299: NEG
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 3
47307: NEG
47308: PUSH
47309: LD_INT 3
47311: NEG
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47335: LD_ADDR_VAR 0 14
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 1
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 1
47393: NEG
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 1
47416: NEG
47417: PUSH
47418: LD_INT 2
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: LD_INT 2
47431: NEG
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 1
47439: PUSH
47440: LD_INT 1
47442: NEG
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 1
47450: PUSH
47451: LD_INT 2
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 0
47460: PUSH
47461: LD_INT 2
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 1
47470: NEG
47471: PUSH
47472: LD_INT 1
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: LD_INT 3
47485: NEG
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 0
47493: PUSH
47494: LD_INT 3
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 1
47504: PUSH
47505: LD_INT 2
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47531: LD_ADDR_VAR 0 15
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 1
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 1
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: NEG
47601: PUSH
47602: LD_INT 1
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: LD_INT 1
47615: NEG
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 2
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 2
47633: PUSH
47634: LD_INT 1
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 1
47643: NEG
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 2
47654: NEG
47655: PUSH
47656: LD_INT 0
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 2
47665: NEG
47666: PUSH
47667: LD_INT 1
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 2
47677: PUSH
47678: LD_INT 1
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 3
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 3
47698: PUSH
47699: LD_INT 1
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47724: LD_ADDR_VAR 0 16
47728: PUSH
47729: LD_INT 0
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: LD_INT 1
47744: NEG
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 1
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 1
47762: PUSH
47763: LD_INT 1
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 1
47782: NEG
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 1
47793: NEG
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 1
47805: NEG
47806: PUSH
47807: LD_INT 2
47809: NEG
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 2
47817: PUSH
47818: LD_INT 1
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 2
47827: PUSH
47828: LD_INT 2
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 1
47837: PUSH
47838: LD_INT 2
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 2
47847: NEG
47848: PUSH
47849: LD_INT 1
47851: NEG
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 2
47859: NEG
47860: PUSH
47861: LD_INT 2
47863: NEG
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 3
47871: PUSH
47872: LD_INT 2
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 3
47881: PUSH
47882: LD_INT 3
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 2
47891: PUSH
47892: LD_INT 3
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47917: LD_ADDR_VAR 0 17
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: LD_INT 1
47937: NEG
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 1
47975: NEG
47976: PUSH
47977: LD_INT 0
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: NEG
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: LD_INT 2
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: LD_INT 2
48013: NEG
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 2
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 2
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 2
48052: PUSH
48053: LD_INT 2
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: PUSH
48063: LD_INT 2
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 0
48072: PUSH
48073: LD_INT 2
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 1
48082: NEG
48083: PUSH
48084: LD_INT 1
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 2
48093: NEG
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 2
48104: NEG
48105: PUSH
48106: LD_INT 1
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 2
48116: NEG
48117: PUSH
48118: LD_INT 2
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48147: LD_ADDR_VAR 0 18
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 0
48164: PUSH
48165: LD_INT 1
48167: NEG
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 1
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 1
48205: NEG
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 1
48216: NEG
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 1
48228: NEG
48229: PUSH
48230: LD_INT 2
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: LD_INT 2
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: LD_INT 1
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 2
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 2
48272: PUSH
48273: LD_INT 1
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 2
48282: PUSH
48283: LD_INT 2
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: LD_INT 2
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: LD_INT 2
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 2
48323: NEG
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 2
48334: NEG
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 2
48346: NEG
48347: PUSH
48348: LD_INT 2
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48377: LD_ADDR_VAR 0 19
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: LD_INT 1
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 1
48435: NEG
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 1
48446: NEG
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 1
48458: NEG
48459: PUSH
48460: LD_INT 2
48462: NEG
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: LD_INT 2
48473: NEG
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: LD_INT 1
48484: NEG
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 2
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 2
48502: PUSH
48503: LD_INT 1
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 2
48512: PUSH
48513: LD_INT 2
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: LD_INT 2
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: LD_INT 2
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: LD_INT 1
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 2
48553: NEG
48554: PUSH
48555: LD_INT 0
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 2
48564: NEG
48565: PUSH
48566: LD_INT 1
48568: NEG
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 2
48576: NEG
48577: PUSH
48578: LD_INT 2
48580: NEG
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48607: LD_ADDR_VAR 0 20
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: LD_INT 1
48627: NEG
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 1
48635: PUSH
48636: LD_INT 0
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 1
48645: PUSH
48646: LD_INT 1
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: LD_INT 1
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 1
48665: NEG
48666: PUSH
48667: LD_INT 0
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: LD_INT 1
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: LD_INT 2
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 0
48700: PUSH
48701: LD_INT 2
48703: NEG
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: LD_INT 1
48714: NEG
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 2
48722: PUSH
48723: LD_INT 0
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 2
48732: PUSH
48733: LD_INT 1
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 2
48742: PUSH
48743: LD_INT 2
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 1
48752: PUSH
48753: LD_INT 2
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: LD_INT 2
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 1
48772: NEG
48773: PUSH
48774: LD_INT 1
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 2
48783: NEG
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 2
48794: NEG
48795: PUSH
48796: LD_INT 1
48798: NEG
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 2
48806: NEG
48807: PUSH
48808: LD_INT 2
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48837: LD_ADDR_VAR 0 21
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 1
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 1
48895: NEG
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: NEG
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 1
48918: NEG
48919: PUSH
48920: LD_INT 2
48922: NEG
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: LD_INT 2
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: LD_INT 1
48944: NEG
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 2
48952: PUSH
48953: LD_INT 0
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 2
48962: PUSH
48963: LD_INT 1
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 2
48972: PUSH
48973: LD_INT 2
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: LD_INT 2
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: LD_INT 2
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: LD_INT 1
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 2
49013: NEG
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 2
49024: NEG
49025: PUSH
49026: LD_INT 1
49028: NEG
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 2
49036: NEG
49037: PUSH
49038: LD_INT 2
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49067: LD_ADDR_VAR 0 22
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 0
49084: PUSH
49085: LD_INT 1
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: LD_INT 2
49152: NEG
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: LD_INT 2
49163: NEG
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 2
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 2
49192: PUSH
49193: LD_INT 1
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 2
49202: PUSH
49203: LD_INT 2
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: LD_INT 2
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: LD_INT 2
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 1
49232: NEG
49233: PUSH
49234: LD_INT 1
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 2
49243: NEG
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 2
49254: NEG
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 2
49266: NEG
49267: PUSH
49268: LD_INT 2
49270: NEG
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49297: LD_ADDR_VAR 0 23
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 0
49314: PUSH
49315: LD_INT 1
49317: NEG
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 1
49335: PUSH
49336: LD_INT 1
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 0
49345: PUSH
49346: LD_INT 1
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: LD_INT 0
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 1
49366: NEG
49367: PUSH
49368: LD_INT 1
49370: NEG
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 1
49378: NEG
49379: PUSH
49380: LD_INT 2
49382: NEG
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 0
49390: PUSH
49391: LD_INT 2
49393: NEG
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: LD_INT 1
49404: NEG
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 2
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 2
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 2
49432: PUSH
49433: LD_INT 2
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 1
49442: PUSH
49443: LD_INT 2
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 0
49452: PUSH
49453: LD_INT 2
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 1
49462: NEG
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 2
49473: NEG
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 2
49484: NEG
49485: PUSH
49486: LD_INT 1
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 2
49496: NEG
49497: PUSH
49498: LD_INT 2
49500: NEG
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 2
49508: NEG
49509: PUSH
49510: LD_INT 3
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: NEG
49521: PUSH
49522: LD_INT 3
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 1
49532: PUSH
49533: LD_INT 2
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 2
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49577: LD_ADDR_VAR 0 24
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: LD_INT 1
49650: NEG
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: LD_INT 2
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: LD_INT 2
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 2
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 2
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 2
49712: PUSH
49713: LD_INT 2
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: PUSH
49723: LD_INT 2
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: LD_INT 2
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 2
49753: NEG
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 2
49764: NEG
49765: PUSH
49766: LD_INT 1
49768: NEG
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 2
49776: NEG
49777: PUSH
49778: LD_INT 2
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: LD_INT 2
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 2
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 3
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 3
49820: PUSH
49821: LD_INT 2
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49853: LD_ADDR_VAR 0 25
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: LD_INT 1
49873: NEG
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 1
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 1
49891: PUSH
49892: LD_INT 1
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: LD_INT 1
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 1
49922: NEG
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 1
49934: NEG
49935: PUSH
49936: LD_INT 2
49938: NEG
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: LD_INT 2
49949: NEG
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: LD_INT 1
49960: NEG
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 2
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 2
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 2
49988: PUSH
49989: LD_INT 2
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 1
49998: PUSH
49999: LD_INT 2
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: LD_INT 2
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 1
50018: NEG
50019: PUSH
50020: LD_INT 1
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 2
50029: NEG
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 2
50040: NEG
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 2
50052: NEG
50053: PUSH
50054: LD_INT 2
50056: NEG
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 3
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 3
50074: PUSH
50075: LD_INT 2
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 2
50084: PUSH
50085: LD_INT 3
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 1
50094: PUSH
50095: LD_INT 3
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50127: LD_ADDR_VAR 0 26
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 0
50144: PUSH
50145: LD_INT 1
50147: NEG
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 1
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 1
50165: PUSH
50166: LD_INT 1
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 0
50175: PUSH
50176: LD_INT 1
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: NEG
50186: PUSH
50187: LD_INT 0
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 1
50196: NEG
50197: PUSH
50198: LD_INT 1
50200: NEG
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 1
50208: NEG
50209: PUSH
50210: LD_INT 2
50212: NEG
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 0
50220: PUSH
50221: LD_INT 2
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 1
50231: PUSH
50232: LD_INT 1
50234: NEG
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 2
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 2
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 2
50262: PUSH
50263: LD_INT 2
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: LD_INT 2
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: LD_INT 2
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: NEG
50293: PUSH
50294: LD_INT 1
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 2
50303: NEG
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 2
50314: NEG
50315: PUSH
50316: LD_INT 1
50318: NEG
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 2
50326: NEG
50327: PUSH
50328: LD_INT 2
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 2
50338: PUSH
50339: LD_INT 3
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: LD_INT 3
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 1
50358: NEG
50359: PUSH
50360: LD_INT 2
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 2
50369: NEG
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50403: LD_ADDR_VAR 0 27
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: LD_INT 1
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 1
50472: NEG
50473: PUSH
50474: LD_INT 1
50476: NEG
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: LD_INT 2
50488: NEG
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: LD_INT 2
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: LD_INT 1
50510: NEG
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 2
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 2
50528: PUSH
50529: LD_INT 1
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 2
50538: PUSH
50539: LD_INT 2
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 1
50548: PUSH
50549: LD_INT 2
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 0
50558: PUSH
50559: LD_INT 2
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 2
50579: NEG
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 2
50590: NEG
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 2
50602: NEG
50603: PUSH
50604: LD_INT 2
50606: NEG
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 1
50614: NEG
50615: PUSH
50616: LD_INT 2
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 2
50625: NEG
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 3
50636: NEG
50637: PUSH
50638: LD_INT 1
50640: NEG
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 3
50648: NEG
50649: PUSH
50650: LD_INT 2
50652: NEG
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50683: LD_ADDR_VAR 0 28
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: LD_INT 1
50703: NEG
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 1
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: LD_INT 1
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: LD_INT 1
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 1
50752: NEG
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: LD_INT 2
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: LD_INT 2
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 2
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 2
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 2
50818: PUSH
50819: LD_INT 2
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: LD_INT 2
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 0
50838: PUSH
50839: LD_INT 2
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: NEG
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 2
50859: NEG
50860: PUSH
50861: LD_INT 0
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 2
50870: NEG
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 2
50882: NEG
50883: PUSH
50884: LD_INT 2
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 2
50894: NEG
50895: PUSH
50896: LD_INT 3
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 1
50906: NEG
50907: PUSH
50908: LD_INT 3
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 3
50918: NEG
50919: PUSH
50920: LD_INT 1
50922: NEG
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 3
50930: NEG
50931: PUSH
50932: LD_INT 2
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50965: LD_ADDR_VAR 0 29
50969: PUSH
50970: LD_INT 0
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 0
50982: PUSH
50983: LD_INT 1
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 1
51003: PUSH
51004: LD_INT 1
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 0
51013: PUSH
51014: LD_INT 1
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 1
51023: NEG
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 1
51034: NEG
51035: PUSH
51036: LD_INT 1
51038: NEG
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 1
51046: NEG
51047: PUSH
51048: LD_INT 2
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: LD_INT 2
51061: NEG
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 1
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 2
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 2
51090: PUSH
51091: LD_INT 1
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 1
51100: PUSH
51101: LD_INT 2
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: LD_INT 2
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 1
51120: NEG
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 2
51131: NEG
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 2
51143: NEG
51144: PUSH
51145: LD_INT 2
51147: NEG
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 2
51155: NEG
51156: PUSH
51157: LD_INT 3
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 2
51167: PUSH
51168: LD_INT 1
51170: NEG
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 3
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: LD_INT 3
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: LD_INT 2
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 3
51209: NEG
51210: PUSH
51211: LD_INT 2
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51244: LD_ADDR_VAR 0 30
51248: PUSH
51249: LD_INT 0
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 1
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 0
51292: PUSH
51293: LD_INT 1
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 1
51302: NEG
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 1
51313: NEG
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 1
51325: NEG
51326: PUSH
51327: LD_INT 2
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: LD_INT 2
51340: NEG
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: LD_INT 1
51351: NEG
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 2
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 2
51369: PUSH
51370: LD_INT 1
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 2
51379: PUSH
51380: LD_INT 2
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: LD_INT 2
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 1
51399: NEG
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 2
51410: NEG
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 2
51421: NEG
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: NEG
51434: PUSH
51435: LD_INT 3
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: LD_INT 2
51448: NEG
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 3
51456: PUSH
51457: LD_INT 2
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 2
51466: PUSH
51467: LD_INT 3
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 2
51476: NEG
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 3
51487: NEG
51488: PUSH
51489: LD_INT 1
51491: NEG
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51522: LD_ADDR_VAR 0 31
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 1
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: LD_INT 1
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 0
51570: PUSH
51571: LD_INT 1
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 1
51580: NEG
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: NEG
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 1
51603: NEG
51604: PUSH
51605: LD_INT 2
51607: NEG
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: LD_INT 1
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 2
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 2
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 2
51646: PUSH
51647: LD_INT 2
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: LD_INT 2
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: LD_INT 2
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: NEG
51677: PUSH
51678: LD_INT 1
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 2
51687: NEG
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 2
51699: NEG
51700: PUSH
51701: LD_INT 2
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 2
51711: NEG
51712: PUSH
51713: LD_INT 3
51715: NEG
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 2
51723: PUSH
51724: LD_INT 1
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 3
51734: PUSH
51735: LD_INT 1
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 1
51744: PUSH
51745: LD_INT 3
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 1
51754: NEG
51755: PUSH
51756: LD_INT 2
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 3
51765: NEG
51766: PUSH
51767: LD_INT 2
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51800: LD_ADDR_VAR 0 32
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 1
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 1
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 0
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 1
51858: NEG
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 1
51869: NEG
51870: PUSH
51871: LD_INT 1
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 1
51881: NEG
51882: PUSH
51883: LD_INT 2
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: LD_INT 2
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 1
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 2
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 2
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: PUSH
51936: LD_INT 2
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: LD_INT 2
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 1
51955: NEG
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 2
51966: NEG
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 2
51977: NEG
51978: PUSH
51979: LD_INT 1
51981: NEG
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 1
51989: NEG
51990: PUSH
51991: LD_INT 3
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 1
52001: PUSH
52002: LD_INT 2
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 3
52012: PUSH
52013: LD_INT 2
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 2
52022: PUSH
52023: LD_INT 3
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 2
52032: NEG
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 3
52043: NEG
52044: PUSH
52045: LD_INT 1
52047: NEG
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52078: LD_ADDR_VAR 0 33
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 1
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: NEG
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: NEG
52148: PUSH
52149: LD_INT 1
52151: NEG
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: LD_INT 2
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 2
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 2
52192: PUSH
52193: LD_INT 1
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: LD_INT 2
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: LD_INT 2
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 1
52222: NEG
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 2
52233: NEG
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 2
52244: NEG
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 2
52256: NEG
52257: PUSH
52258: LD_INT 2
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 2
52268: NEG
52269: PUSH
52270: LD_INT 3
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 2
52280: PUSH
52281: LD_INT 1
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 3
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 1
52301: PUSH
52302: LD_INT 3
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 1
52311: NEG
52312: PUSH
52313: LD_INT 2
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 3
52322: NEG
52323: PUSH
52324: LD_INT 2
52326: NEG
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52357: LD_ADDR_VAR 0 34
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 0
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: NEG
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 1
52438: NEG
52439: PUSH
52440: LD_INT 2
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: LD_INT 2
52453: NEG
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: LD_INT 1
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 2
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 2
52482: PUSH
52483: LD_INT 2
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: LD_INT 2
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 1
52502: NEG
52503: PUSH
52504: LD_INT 1
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 2
52513: NEG
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 2
52524: NEG
52525: PUSH
52526: LD_INT 1
52528: NEG
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 2
52536: NEG
52537: PUSH
52538: LD_INT 2
52540: NEG
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: LD_INT 3
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: LD_INT 2
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 3
52571: PUSH
52572: LD_INT 2
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 2
52581: PUSH
52582: LD_INT 3
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 2
52591: NEG
52592: PUSH
52593: LD_INT 1
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 3
52602: NEG
52603: PUSH
52604: LD_INT 1
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52637: LD_ADDR_VAR 0 35
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 0
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 1
52695: NEG
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: LD_INT 1
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 2
52718: PUSH
52719: LD_INT 1
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 2
52728: NEG
52729: PUSH
52730: LD_INT 1
52732: NEG
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52749: LD_ADDR_VAR 0 36
52753: PUSH
52754: LD_INT 0
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 1
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: NEG
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: NEG
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 1
52830: NEG
52831: PUSH
52832: LD_INT 2
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 1
52842: PUSH
52843: LD_INT 2
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52861: LD_ADDR_VAR 0 37
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: LD_INT 0
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: LD_INT 1
52881: NEG
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 1
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 1
52930: NEG
52931: PUSH
52932: LD_INT 1
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: LD_INT 1
52945: NEG
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 1
52953: NEG
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52973: LD_ADDR_VAR 0 38
52977: PUSH
52978: LD_INT 0
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: LD_INT 1
52993: NEG
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 1
53001: PUSH
53002: LD_INT 0
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: PUSH
53012: LD_INT 1
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: LD_INT 1
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 1
53031: NEG
53032: PUSH
53033: LD_INT 0
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 2
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 2
53064: NEG
53065: PUSH
53066: LD_INT 1
53068: NEG
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53085: LD_ADDR_VAR 0 39
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 0
53102: PUSH
53103: LD_INT 1
53105: NEG
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 1
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 1
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: LD_INT 1
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 1
53143: NEG
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 1
53154: NEG
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: NEG
53167: PUSH
53168: LD_INT 2
53170: NEG
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 1
53178: PUSH
53179: LD_INT 2
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53197: LD_ADDR_VAR 0 40
53201: PUSH
53202: LD_INT 0
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 1
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: LD_INT 1
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: NEG
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: LD_INT 1
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 1
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 1
53289: NEG
53290: PUSH
53291: LD_INT 1
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53309: LD_ADDR_VAR 0 41
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 1
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 1
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 0
53357: PUSH
53358: LD_INT 1
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 1
53367: NEG
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 1
53378: NEG
53379: PUSH
53380: LD_INT 1
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 1
53390: NEG
53391: PUSH
53392: LD_INT 2
53394: NEG
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: PUSH
53403: LD_INT 1
53405: NEG
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 2
53413: PUSH
53414: LD_INT 0
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 2
53423: PUSH
53424: LD_INT 1
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 2
53433: PUSH
53434: LD_INT 2
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: LD_INT 2
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: NEG
53454: PUSH
53455: LD_INT 1
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 2
53464: NEG
53465: PUSH
53466: LD_INT 0
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 2
53475: NEG
53476: PUSH
53477: LD_INT 1
53479: NEG
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 2
53487: NEG
53488: PUSH
53489: LD_INT 2
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 2
53499: NEG
53500: PUSH
53501: LD_INT 3
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 2
53511: PUSH
53512: LD_INT 1
53514: NEG
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 3
53522: PUSH
53523: LD_INT 0
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 3
53532: PUSH
53533: LD_INT 1
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 3
53542: PUSH
53543: LD_INT 2
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 3
53552: PUSH
53553: LD_INT 3
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 2
53562: PUSH
53563: LD_INT 3
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 2
53572: NEG
53573: PUSH
53574: LD_INT 1
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 3
53583: NEG
53584: PUSH
53585: LD_INT 0
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 3
53594: NEG
53595: PUSH
53596: LD_INT 1
53598: NEG
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 3
53606: NEG
53607: PUSH
53608: LD_INT 2
53610: NEG
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 3
53618: NEG
53619: PUSH
53620: LD_INT 3
53622: NEG
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53659: LD_ADDR_VAR 0 42
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: PUSH
53730: LD_INT 1
53732: NEG
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 1
53740: NEG
53741: PUSH
53742: LD_INT 2
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: LD_INT 2
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 1
53763: PUSH
53764: LD_INT 1
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 2
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 2
53784: PUSH
53785: LD_INT 2
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: LD_INT 2
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 0
53804: PUSH
53805: LD_INT 2
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: LD_INT 1
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 2
53825: NEG
53826: PUSH
53827: LD_INT 1
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 2
53837: NEG
53838: PUSH
53839: LD_INT 2
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 2
53849: NEG
53850: PUSH
53851: LD_INT 3
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: LD_INT 3
53865: NEG
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 0
53873: PUSH
53874: LD_INT 3
53876: NEG
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: LD_INT 2
53887: NEG
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 3
53895: PUSH
53896: LD_INT 2
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 3
53905: PUSH
53906: LD_INT 3
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 2
53915: PUSH
53916: LD_INT 3
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 1
53925: PUSH
53926: LD_INT 3
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 0
53935: PUSH
53936: LD_INT 3
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: LD_INT 2
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 3
53956: NEG
53957: PUSH
53958: LD_INT 2
53960: NEG
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 3
53968: NEG
53969: PUSH
53970: LD_INT 3
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54009: LD_ADDR_VAR 0 43
54013: PUSH
54014: LD_INT 0
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 0
54026: PUSH
54027: LD_INT 1
54029: NEG
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 1
54037: PUSH
54038: LD_INT 0
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 1
54047: PUSH
54048: LD_INT 1
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 0
54057: PUSH
54058: LD_INT 1
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 1
54067: NEG
54068: PUSH
54069: LD_INT 0
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 1
54078: NEG
54079: PUSH
54080: LD_INT 1
54082: NEG
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 1
54090: NEG
54091: PUSH
54092: LD_INT 2
54094: NEG
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: LD_INT 2
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 1
54113: PUSH
54114: LD_INT 1
54116: NEG
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 2
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 2
54134: PUSH
54135: LD_INT 1
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 1
54144: PUSH
54145: LD_INT 2
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: LD_INT 2
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 1
54164: NEG
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 2
54175: NEG
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 2
54186: NEG
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: LD_INT 3
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 0
54210: PUSH
54211: LD_INT 3
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: LD_INT 2
54224: NEG
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 2
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 3
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 3
54253: PUSH
54254: LD_INT 1
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: PUSH
54264: LD_INT 3
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 0
54273: PUSH
54274: LD_INT 3
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 1
54283: NEG
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 2
54294: NEG
54295: PUSH
54296: LD_INT 1
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 3
54305: NEG
54306: PUSH
54307: LD_INT 0
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 3
54316: NEG
54317: PUSH
54318: LD_INT 1
54320: NEG
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54357: LD_ADDR_VAR 0 44
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: LD_INT 1
54377: NEG
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 1
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 1
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 0
54405: PUSH
54406: LD_INT 1
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 1
54415: NEG
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: PUSH
54428: LD_INT 1
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: LD_INT 2
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 2
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 2
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 2
54481: PUSH
54482: LD_INT 2
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: PUSH
54492: LD_INT 2
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: LD_INT 1
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 2
54512: NEG
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 2
54523: NEG
54524: PUSH
54525: LD_INT 1
54527: NEG
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 2
54535: NEG
54536: PUSH
54537: LD_INT 2
54539: NEG
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 2
54547: NEG
54548: PUSH
54549: LD_INT 3
54551: NEG
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 2
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 3
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 3
54580: PUSH
54581: LD_INT 1
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 3
54590: PUSH
54591: LD_INT 2
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 3
54600: PUSH
54601: LD_INT 3
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 2
54610: PUSH
54611: LD_INT 3
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 2
54620: NEG
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 3
54631: NEG
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 3
54642: NEG
54643: PUSH
54644: LD_INT 1
54646: NEG
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 3
54654: NEG
54655: PUSH
54656: LD_INT 2
54658: NEG
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 3
54666: NEG
54667: PUSH
54668: LD_INT 3
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54707: LD_ADDR_VAR 0 45
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: LD_INT 1
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: NEG
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: LD_INT 1
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 1
54788: NEG
54789: PUSH
54790: LD_INT 2
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: LD_INT 2
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 1
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 2
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 2
54832: PUSH
54833: LD_INT 2
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 1
54842: PUSH
54843: LD_INT 2
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 0
54852: PUSH
54853: LD_INT 2
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 1
54862: NEG
54863: PUSH
54864: LD_INT 1
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 2
54873: NEG
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 2
54885: NEG
54886: PUSH
54887: LD_INT 2
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 2
54897: NEG
54898: PUSH
54899: LD_INT 3
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 1
54909: NEG
54910: PUSH
54911: LD_INT 3
54913: NEG
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: LD_INT 3
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: PUSH
54933: LD_INT 2
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 3
54943: PUSH
54944: LD_INT 2
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 3
54953: PUSH
54954: LD_INT 3
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 2
54963: PUSH
54964: LD_INT 3
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 1
54973: PUSH
54974: LD_INT 3
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: LD_INT 3
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 1
54993: NEG
54994: PUSH
54995: LD_INT 2
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 3
55004: NEG
55005: PUSH
55006: LD_INT 2
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 3
55016: NEG
55017: PUSH
55018: LD_INT 3
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55057: LD_ADDR_VAR 0 46
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: LD_INT 1
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 1
55126: NEG
55127: PUSH
55128: LD_INT 1
55130: NEG
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 1
55138: NEG
55139: PUSH
55140: LD_INT 2
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: LD_INT 2
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: PUSH
55162: LD_INT 1
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 2
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 2
55182: PUSH
55183: LD_INT 1
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: LD_INT 2
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: LD_INT 2
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: LD_INT 1
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 2
55223: NEG
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 2
55234: NEG
55235: PUSH
55236: LD_INT 1
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 1
55246: NEG
55247: PUSH
55248: LD_INT 3
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: LD_INT 3
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: LD_INT 2
55272: NEG
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 2
55280: PUSH
55281: LD_INT 1
55283: NEG
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 3
55291: PUSH
55292: LD_INT 0
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 3
55301: PUSH
55302: LD_INT 1
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 1
55311: PUSH
55312: LD_INT 3
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: LD_INT 3
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 1
55331: NEG
55332: PUSH
55333: LD_INT 2
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 2
55342: NEG
55343: PUSH
55344: LD_INT 1
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 3
55353: NEG
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 3
55364: NEG
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55405: LD_ADDR_VAR 0 47
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 0
55422: PUSH
55423: LD_INT 1
55425: NEG
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 1
55433: PUSH
55434: LD_INT 0
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 1
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: LD_INT 1
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 1
55463: NEG
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 1
55474: NEG
55475: PUSH
55476: LD_INT 1
55478: NEG
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 1
55486: NEG
55487: PUSH
55488: LD_INT 2
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: LD_INT 2
55501: NEG
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 1
55509: PUSH
55510: LD_INT 1
55512: NEG
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 2
55520: NEG
55521: PUSH
55522: LD_INT 1
55524: NEG
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 2
55532: NEG
55533: PUSH
55534: LD_INT 2
55536: NEG
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55556: LD_ADDR_VAR 0 48
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: LD_INT 1
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 1
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 1
55614: NEG
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: LD_INT 2
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: LD_INT 2
55652: NEG
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 1
55660: PUSH
55661: LD_INT 1
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 2
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 2
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55703: LD_ADDR_VAR 0 49
55707: PUSH
55708: LD_INT 0
55710: PUSH
55711: LD_INT 0
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: LD_INT 1
55723: NEG
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: LD_INT 0
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: LD_INT 1
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 1
55761: NEG
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: NEG
55773: PUSH
55774: LD_INT 1
55776: NEG
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 1
55784: PUSH
55785: LD_INT 1
55787: NEG
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 2
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 2
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 2
55815: PUSH
55816: LD_INT 2
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: LD_INT 2
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55847: LD_ADDR_VAR 0 50
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: LD_INT 1
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 1
55885: PUSH
55886: LD_INT 1
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 1
55916: NEG
55917: PUSH
55918: LD_INT 1
55920: NEG
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 2
55928: PUSH
55929: LD_INT 1
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 2
55938: PUSH
55939: LD_INT 2
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: LD_INT 2
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: LD_INT 2
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: LD_INT 1
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55991: LD_ADDR_VAR 0 51
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: LD_INT 0
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: LD_INT 1
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 1
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 0
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 1
56049: NEG
56050: PUSH
56051: LD_INT 0
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 1
56060: NEG
56061: PUSH
56062: LD_INT 1
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 1
56072: PUSH
56073: LD_INT 2
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 0
56082: PUSH
56083: LD_INT 2
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 1
56092: NEG
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 2
56103: NEG
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 2
56114: NEG
56115: PUSH
56116: LD_INT 1
56118: NEG
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56138: LD_ADDR_VAR 0 52
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: LD_INT 1
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: PUSH
56167: LD_INT 0
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 1
56207: NEG
56208: PUSH
56209: LD_INT 1
56211: NEG
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: NEG
56220: PUSH
56221: LD_INT 2
56223: NEG
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 1
56231: NEG
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 2
56242: NEG
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 2
56253: NEG
56254: PUSH
56255: LD_INT 1
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 2
56265: NEG
56266: PUSH
56267: LD_INT 2
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56289: LD_ADDR_VAR 0 53
56293: PUSH
56294: LD_INT 0
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: LD_INT 1
56309: NEG
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 1
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: PUSH
56328: LD_INT 1
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: LD_INT 1
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 1
56347: NEG
56348: PUSH
56349: LD_INT 0
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: NEG
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 1
56370: NEG
56371: PUSH
56372: LD_INT 2
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: LD_INT 2
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 1
56393: PUSH
56394: LD_INT 1
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 2
56404: PUSH
56405: LD_INT 0
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 2
56414: PUSH
56415: LD_INT 1
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 2
56424: PUSH
56425: LD_INT 2
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: LD_INT 2
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 0
56444: PUSH
56445: LD_INT 2
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 1
56454: NEG
56455: PUSH
56456: LD_INT 1
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 2
56465: NEG
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 2
56476: NEG
56477: PUSH
56478: LD_INT 1
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 2
56488: NEG
56489: PUSH
56490: LD_INT 2
56492: NEG
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56519: LD_ADDR_VAR 0 54
56523: PUSH
56524: LD_INT 0
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 0
56536: PUSH
56537: LD_INT 1
56539: NEG
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 1
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 0
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 1
56577: NEG
56578: PUSH
56579: LD_INT 0
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: NEG
56589: PUSH
56590: LD_INT 1
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: LD_INT 2
56604: NEG
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: LD_INT 2
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 1
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 2
56634: PUSH
56635: LD_INT 0
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 2
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 2
56654: PUSH
56655: LD_INT 2
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: PUSH
56665: LD_INT 2
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: LD_INT 2
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 1
56684: NEG
56685: PUSH
56686: LD_INT 1
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 2
56695: NEG
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 2
56706: NEG
56707: PUSH
56708: LD_INT 1
56710: NEG
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 2
56718: NEG
56719: PUSH
56720: LD_INT 2
56722: NEG
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56749: LD_ADDR_VAR 0 55
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: LD_INT 0
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: LD_INT 1
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 1
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 1
56818: NEG
56819: PUSH
56820: LD_INT 1
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: LD_INT 2
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: LD_INT 2
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: LD_INT 1
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 2
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 2
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 2
56884: PUSH
56885: LD_INT 2
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: LD_INT 2
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: LD_INT 2
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 2
56925: NEG
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 2
56936: NEG
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 2
56948: NEG
56949: PUSH
56950: LD_INT 2
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56979: LD_ADDR_VAR 0 56
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 0
56996: PUSH
56997: LD_INT 1
56999: NEG
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 1
57007: PUSH
57008: LD_INT 0
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 1
57017: PUSH
57018: LD_INT 1
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: LD_INT 1
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 1
57037: NEG
57038: PUSH
57039: LD_INT 0
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 1
57048: NEG
57049: PUSH
57050: LD_INT 1
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 1
57060: NEG
57061: PUSH
57062: LD_INT 2
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: LD_INT 2
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 1
57083: PUSH
57084: LD_INT 1
57086: NEG
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 2
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 2
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 2
57114: PUSH
57115: LD_INT 2
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: LD_INT 2
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 0
57134: PUSH
57135: LD_INT 2
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 2
57155: NEG
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 2
57166: NEG
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 2
57178: NEG
57179: PUSH
57180: LD_INT 2
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57209: LD_ADDR_VAR 0 57
57213: PUSH
57214: LD_INT 0
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: LD_INT 1
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 1
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 1
57247: PUSH
57248: LD_INT 1
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: LD_INT 1
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 1
57267: NEG
57268: PUSH
57269: LD_INT 0
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: LD_INT 1
57282: NEG
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 1
57290: NEG
57291: PUSH
57292: LD_INT 2
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: LD_INT 2
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 1
57313: PUSH
57314: LD_INT 1
57316: NEG
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 2
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 2
57334: PUSH
57335: LD_INT 1
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 2
57344: PUSH
57345: LD_INT 2
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: LD_INT 2
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: LD_INT 2
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 2
57385: NEG
57386: PUSH
57387: LD_INT 0
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 2
57396: NEG
57397: PUSH
57398: LD_INT 1
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 2
57408: NEG
57409: PUSH
57410: LD_INT 2
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57439: LD_ADDR_VAR 0 58
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 0
57456: PUSH
57457: LD_INT 1
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 1
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 1
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: LD_INT 1
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 1
57497: NEG
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 1
57508: NEG
57509: PUSH
57510: LD_INT 1
57512: NEG
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: LD_INT 2
57524: NEG
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: LD_INT 2
57535: NEG
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: LD_INT 1
57546: NEG
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 2
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 2
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 2
57574: PUSH
57575: LD_INT 2
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: LD_INT 2
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: LD_INT 2
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: PUSH
57606: LD_INT 1
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 2
57615: NEG
57616: PUSH
57617: LD_INT 0
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 2
57626: NEG
57627: PUSH
57628: LD_INT 1
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 2
57638: NEG
57639: PUSH
57640: LD_INT 2
57642: NEG
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57669: LD_ADDR_VAR 0 59
57673: PUSH
57674: LD_INT 0
57676: PUSH
57677: LD_INT 0
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 0
57686: PUSH
57687: LD_INT 1
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 1
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 1
57707: PUSH
57708: LD_INT 1
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 0
57717: PUSH
57718: LD_INT 1
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 1
57727: NEG
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 1
57738: NEG
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57757: LD_ADDR_VAR 0 60
57761: PUSH
57762: LD_INT 0
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: LD_INT 1
57777: NEG
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 1
57795: PUSH
57796: LD_INT 1
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: LD_INT 1
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: NEG
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 1
57826: NEG
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57845: LD_ADDR_VAR 0 61
57849: PUSH
57850: LD_INT 0
57852: PUSH
57853: LD_INT 0
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: LD_INT 1
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 1
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 1
57883: PUSH
57884: LD_INT 1
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 0
57893: PUSH
57894: LD_INT 1
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 1
57903: NEG
57904: PUSH
57905: LD_INT 0
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 1
57914: NEG
57915: PUSH
57916: LD_INT 1
57918: NEG
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57933: LD_ADDR_VAR 0 62
57937: PUSH
57938: LD_INT 0
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 0
57950: PUSH
57951: LD_INT 1
57953: NEG
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 1
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 1
57971: PUSH
57972: LD_INT 1
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 0
57981: PUSH
57982: LD_INT 1
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 1
57991: NEG
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 1
58002: NEG
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58021: LD_ADDR_VAR 0 63
58025: PUSH
58026: LD_INT 0
58028: PUSH
58029: LD_INT 0
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 0
58038: PUSH
58039: LD_INT 1
58041: NEG
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 1
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 1
58059: PUSH
58060: LD_INT 1
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 0
58069: PUSH
58070: LD_INT 1
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 1
58079: NEG
58080: PUSH
58081: LD_INT 0
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 1
58090: NEG
58091: PUSH
58092: LD_INT 1
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58109: LD_ADDR_VAR 0 64
58113: PUSH
58114: LD_INT 0
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 0
58126: PUSH
58127: LD_INT 1
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 1
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 1
58147: PUSH
58148: LD_INT 1
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 0
58157: PUSH
58158: LD_INT 1
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 1
58167: NEG
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 1
58178: NEG
58179: PUSH
58180: LD_INT 1
58182: NEG
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: ST_TO_ADDR
// end ; 1 :
58197: GO 64094
58199: LD_INT 1
58201: DOUBLE
58202: EQUAL
58203: IFTRUE 58207
58205: GO 60830
58207: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58208: LD_ADDR_VAR 0 11
58212: PUSH
58213: LD_INT 1
58215: NEG
58216: PUSH
58217: LD_INT 3
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: LD_INT 3
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 1
58238: PUSH
58239: LD_INT 2
58241: NEG
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: LIST
58251: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58252: LD_ADDR_VAR 0 12
58256: PUSH
58257: LD_INT 2
58259: PUSH
58260: LD_INT 1
58262: NEG
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 3
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 3
58280: PUSH
58281: LD_INT 1
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: LIST
58292: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58293: LD_ADDR_VAR 0 13
58297: PUSH
58298: LD_INT 3
58300: PUSH
58301: LD_INT 2
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 3
58310: PUSH
58311: LD_INT 3
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 2
58320: PUSH
58321: LD_INT 3
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: LIST
58332: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58333: LD_ADDR_VAR 0 14
58337: PUSH
58338: LD_INT 1
58340: PUSH
58341: LD_INT 3
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 0
58350: PUSH
58351: LD_INT 3
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 1
58360: NEG
58361: PUSH
58362: LD_INT 2
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: LIST
58373: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58374: LD_ADDR_VAR 0 15
58378: PUSH
58379: LD_INT 2
58381: NEG
58382: PUSH
58383: LD_INT 1
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 3
58392: NEG
58393: PUSH
58394: LD_INT 0
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 3
58403: NEG
58404: PUSH
58405: LD_INT 1
58407: NEG
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: LIST
58417: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58418: LD_ADDR_VAR 0 16
58422: PUSH
58423: LD_INT 2
58425: NEG
58426: PUSH
58427: LD_INT 3
58429: NEG
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 3
58437: NEG
58438: PUSH
58439: LD_INT 2
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 3
58449: NEG
58450: PUSH
58451: LD_INT 3
58453: NEG
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: LIST
58463: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58464: LD_ADDR_VAR 0 17
58468: PUSH
58469: LD_INT 1
58471: NEG
58472: PUSH
58473: LD_INT 3
58475: NEG
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 0
58483: PUSH
58484: LD_INT 3
58486: NEG
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 1
58494: PUSH
58495: LD_INT 2
58497: NEG
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: LIST
58507: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58508: LD_ADDR_VAR 0 18
58512: PUSH
58513: LD_INT 2
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 3
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 3
58536: PUSH
58537: LD_INT 1
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: LIST
58548: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58549: LD_ADDR_VAR 0 19
58553: PUSH
58554: LD_INT 3
58556: PUSH
58557: LD_INT 2
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 3
58566: PUSH
58567: LD_INT 3
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 2
58576: PUSH
58577: LD_INT 3
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: LIST
58588: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58589: LD_ADDR_VAR 0 20
58593: PUSH
58594: LD_INT 1
58596: PUSH
58597: LD_INT 3
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 0
58606: PUSH
58607: LD_INT 3
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 1
58616: NEG
58617: PUSH
58618: LD_INT 2
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: LIST
58629: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58630: LD_ADDR_VAR 0 21
58634: PUSH
58635: LD_INT 2
58637: NEG
58638: PUSH
58639: LD_INT 1
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 3
58648: NEG
58649: PUSH
58650: LD_INT 0
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 3
58659: NEG
58660: PUSH
58661: LD_INT 1
58663: NEG
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: LIST
58673: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58674: LD_ADDR_VAR 0 22
58678: PUSH
58679: LD_INT 2
58681: NEG
58682: PUSH
58683: LD_INT 3
58685: NEG
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 3
58693: NEG
58694: PUSH
58695: LD_INT 2
58697: NEG
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 3
58705: NEG
58706: PUSH
58707: LD_INT 3
58709: NEG
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: LIST
58719: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58720: LD_ADDR_VAR 0 23
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: LD_INT 3
58730: NEG
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 1
58738: NEG
58739: PUSH
58740: LD_INT 4
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 1
58750: PUSH
58751: LD_INT 3
58753: NEG
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: LIST
58763: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58764: LD_ADDR_VAR 0 24
58768: PUSH
58769: LD_INT 3
58771: PUSH
58772: LD_INT 0
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 3
58781: PUSH
58782: LD_INT 1
58784: NEG
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 4
58792: PUSH
58793: LD_INT 1
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: LIST
58804: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58805: LD_ADDR_VAR 0 25
58809: PUSH
58810: LD_INT 3
58812: PUSH
58813: LD_INT 3
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 4
58822: PUSH
58823: LD_INT 3
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 3
58832: PUSH
58833: LD_INT 4
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: LIST
58844: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58845: LD_ADDR_VAR 0 26
58849: PUSH
58850: LD_INT 0
58852: PUSH
58853: LD_INT 3
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: LD_INT 4
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 1
58872: NEG
58873: PUSH
58874: LD_INT 3
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: LIST
58885: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58886: LD_ADDR_VAR 0 27
58890: PUSH
58891: LD_INT 3
58893: NEG
58894: PUSH
58895: LD_INT 0
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 3
58904: NEG
58905: PUSH
58906: LD_INT 1
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 4
58915: NEG
58916: PUSH
58917: LD_INT 1
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: LIST
58929: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58930: LD_ADDR_VAR 0 28
58934: PUSH
58935: LD_INT 3
58937: NEG
58938: PUSH
58939: LD_INT 3
58941: NEG
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 3
58949: NEG
58950: PUSH
58951: LD_INT 4
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 4
58961: NEG
58962: PUSH
58963: LD_INT 3
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: LIST
58975: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58976: LD_ADDR_VAR 0 29
58980: PUSH
58981: LD_INT 1
58983: NEG
58984: PUSH
58985: LD_INT 3
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: LD_INT 3
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 1
59006: PUSH
59007: LD_INT 2
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 1
59017: NEG
59018: PUSH
59019: LD_INT 4
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 0
59029: PUSH
59030: LD_INT 4
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 1
59040: PUSH
59041: LD_INT 3
59043: NEG
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 1
59051: NEG
59052: PUSH
59053: LD_INT 5
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 0
59063: PUSH
59064: LD_INT 5
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 1
59074: PUSH
59075: LD_INT 4
59077: NEG
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 1
59085: NEG
59086: PUSH
59087: LD_INT 6
59089: NEG
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: LD_INT 6
59100: NEG
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 1
59108: PUSH
59109: LD_INT 5
59111: NEG
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59131: LD_ADDR_VAR 0 30
59135: PUSH
59136: LD_INT 2
59138: PUSH
59139: LD_INT 1
59141: NEG
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 3
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 3
59159: PUSH
59160: LD_INT 1
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 3
59169: PUSH
59170: LD_INT 1
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 4
59180: PUSH
59181: LD_INT 0
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 4
59190: PUSH
59191: LD_INT 1
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 4
59200: PUSH
59201: LD_INT 1
59203: NEG
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 5
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 5
59221: PUSH
59222: LD_INT 1
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 5
59231: PUSH
59232: LD_INT 1
59234: NEG
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 6
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 6
59252: PUSH
59253: LD_INT 1
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59274: LD_ADDR_VAR 0 31
59278: PUSH
59279: LD_INT 3
59281: PUSH
59282: LD_INT 2
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 3
59291: PUSH
59292: LD_INT 3
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 2
59301: PUSH
59302: LD_INT 3
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 4
59311: PUSH
59312: LD_INT 3
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 4
59321: PUSH
59322: LD_INT 4
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 3
59331: PUSH
59332: LD_INT 4
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 5
59341: PUSH
59342: LD_INT 4
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 5
59351: PUSH
59352: LD_INT 5
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 4
59361: PUSH
59362: LD_INT 5
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 6
59371: PUSH
59372: LD_INT 5
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 6
59381: PUSH
59382: LD_INT 6
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 5
59391: PUSH
59392: LD_INT 6
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59413: LD_ADDR_VAR 0 32
59417: PUSH
59418: LD_INT 1
59420: PUSH
59421: LD_INT 3
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: LD_INT 3
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 1
59440: NEG
59441: PUSH
59442: LD_INT 2
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 1
59451: PUSH
59452: LD_INT 4
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: LD_INT 4
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 1
59471: NEG
59472: PUSH
59473: LD_INT 3
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 1
59482: PUSH
59483: LD_INT 5
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 0
59492: PUSH
59493: LD_INT 5
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 1
59502: NEG
59503: PUSH
59504: LD_INT 4
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 1
59513: PUSH
59514: LD_INT 6
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 0
59523: PUSH
59524: LD_INT 6
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: LD_INT 5
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59556: LD_ADDR_VAR 0 33
59560: PUSH
59561: LD_INT 2
59563: NEG
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 3
59574: NEG
59575: PUSH
59576: LD_INT 0
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 3
59585: NEG
59586: PUSH
59587: LD_INT 1
59589: NEG
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 3
59597: NEG
59598: PUSH
59599: LD_INT 1
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 4
59608: NEG
59609: PUSH
59610: LD_INT 0
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 4
59619: NEG
59620: PUSH
59621: LD_INT 1
59623: NEG
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 4
59631: NEG
59632: PUSH
59633: LD_INT 1
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 5
59642: NEG
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 5
59653: NEG
59654: PUSH
59655: LD_INT 1
59657: NEG
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 5
59665: NEG
59666: PUSH
59667: LD_INT 1
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 6
59676: NEG
59677: PUSH
59678: LD_INT 0
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 6
59687: NEG
59688: PUSH
59689: LD_INT 1
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59711: LD_ADDR_VAR 0 34
59715: PUSH
59716: LD_INT 2
59718: NEG
59719: PUSH
59720: LD_INT 3
59722: NEG
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 3
59730: NEG
59731: PUSH
59732: LD_INT 2
59734: NEG
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 3
59742: NEG
59743: PUSH
59744: LD_INT 3
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 3
59754: NEG
59755: PUSH
59756: LD_INT 4
59758: NEG
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 4
59766: NEG
59767: PUSH
59768: LD_INT 3
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 4
59778: NEG
59779: PUSH
59780: LD_INT 4
59782: NEG
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 4
59790: NEG
59791: PUSH
59792: LD_INT 5
59794: NEG
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 5
59802: NEG
59803: PUSH
59804: LD_INT 4
59806: NEG
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 5
59814: NEG
59815: PUSH
59816: LD_INT 5
59818: NEG
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 5
59826: NEG
59827: PUSH
59828: LD_INT 6
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 6
59838: NEG
59839: PUSH
59840: LD_INT 5
59842: NEG
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 6
59850: NEG
59851: PUSH
59852: LD_INT 6
59854: NEG
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59874: LD_ADDR_VAR 0 41
59878: PUSH
59879: LD_INT 0
59881: PUSH
59882: LD_INT 2
59884: NEG
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 1
59892: NEG
59893: PUSH
59894: LD_INT 3
59896: NEG
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 1
59904: PUSH
59905: LD_INT 2
59907: NEG
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: LIST
59917: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59918: LD_ADDR_VAR 0 42
59922: PUSH
59923: LD_INT 2
59925: PUSH
59926: LD_INT 0
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 2
59935: PUSH
59936: LD_INT 1
59938: NEG
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 3
59946: PUSH
59947: LD_INT 1
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: LIST
59958: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59959: LD_ADDR_VAR 0 43
59963: PUSH
59964: LD_INT 2
59966: PUSH
59967: LD_INT 2
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 3
59976: PUSH
59977: LD_INT 2
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 2
59986: PUSH
59987: LD_INT 3
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: LIST
59998: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59999: LD_ADDR_VAR 0 44
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: LD_INT 2
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 1
60016: PUSH
60017: LD_INT 3
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 1
60026: NEG
60027: PUSH
60028: LD_INT 2
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: LIST
60039: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60040: LD_ADDR_VAR 0 45
60044: PUSH
60045: LD_INT 2
60047: NEG
60048: PUSH
60049: LD_INT 0
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 2
60058: NEG
60059: PUSH
60060: LD_INT 1
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 3
60069: NEG
60070: PUSH
60071: LD_INT 1
60073: NEG
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: LIST
60083: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60084: LD_ADDR_VAR 0 46
60088: PUSH
60089: LD_INT 2
60091: NEG
60092: PUSH
60093: LD_INT 2
60095: NEG
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 2
60103: NEG
60104: PUSH
60105: LD_INT 3
60107: NEG
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 3
60115: NEG
60116: PUSH
60117: LD_INT 2
60119: NEG
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: LIST
60129: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60130: LD_ADDR_VAR 0 47
60134: PUSH
60135: LD_INT 2
60137: NEG
60138: PUSH
60139: LD_INT 3
60141: NEG
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 1
60149: NEG
60150: PUSH
60151: LD_INT 3
60153: NEG
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60163: LD_ADDR_VAR 0 48
60167: PUSH
60168: LD_INT 1
60170: PUSH
60171: LD_INT 2
60173: NEG
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 2
60181: PUSH
60182: LD_INT 1
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60194: LD_ADDR_VAR 0 49
60198: PUSH
60199: LD_INT 3
60201: PUSH
60202: LD_INT 1
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 3
60211: PUSH
60212: LD_INT 2
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60223: LD_ADDR_VAR 0 50
60227: PUSH
60228: LD_INT 2
60230: PUSH
60231: LD_INT 3
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 1
60240: PUSH
60241: LD_INT 3
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60252: LD_ADDR_VAR 0 51
60256: PUSH
60257: LD_INT 1
60259: NEG
60260: PUSH
60261: LD_INT 2
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 2
60270: NEG
60271: PUSH
60272: LD_INT 1
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60283: LD_ADDR_VAR 0 52
60287: PUSH
60288: LD_INT 3
60290: NEG
60291: PUSH
60292: LD_INT 1
60294: NEG
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 3
60302: NEG
60303: PUSH
60304: LD_INT 2
60306: NEG
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60316: LD_ADDR_VAR 0 53
60320: PUSH
60321: LD_INT 1
60323: NEG
60324: PUSH
60325: LD_INT 3
60327: NEG
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 0
60335: PUSH
60336: LD_INT 3
60338: NEG
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 1
60346: PUSH
60347: LD_INT 2
60349: NEG
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: LIST
60359: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60360: LD_ADDR_VAR 0 54
60364: PUSH
60365: LD_INT 2
60367: PUSH
60368: LD_INT 1
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 3
60378: PUSH
60379: LD_INT 0
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 3
60388: PUSH
60389: LD_INT 1
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: LIST
60400: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60401: LD_ADDR_VAR 0 55
60405: PUSH
60406: LD_INT 3
60408: PUSH
60409: LD_INT 2
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 3
60418: PUSH
60419: LD_INT 3
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 2
60428: PUSH
60429: LD_INT 3
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: LIST
60440: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60441: LD_ADDR_VAR 0 56
60445: PUSH
60446: LD_INT 1
60448: PUSH
60449: LD_INT 3
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 0
60458: PUSH
60459: LD_INT 3
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 1
60468: NEG
60469: PUSH
60470: LD_INT 2
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: LIST
60481: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60482: LD_ADDR_VAR 0 57
60486: PUSH
60487: LD_INT 2
60489: NEG
60490: PUSH
60491: LD_INT 1
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 3
60500: NEG
60501: PUSH
60502: LD_INT 0
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 3
60511: NEG
60512: PUSH
60513: LD_INT 1
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: LIST
60525: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60526: LD_ADDR_VAR 0 58
60530: PUSH
60531: LD_INT 2
60533: NEG
60534: PUSH
60535: LD_INT 3
60537: NEG
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 3
60545: NEG
60546: PUSH
60547: LD_INT 2
60549: NEG
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 3
60557: NEG
60558: PUSH
60559: LD_INT 3
60561: NEG
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: LIST
60571: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60572: LD_ADDR_VAR 0 59
60576: PUSH
60577: LD_INT 1
60579: NEG
60580: PUSH
60581: LD_INT 2
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 0
60591: PUSH
60592: LD_INT 2
60594: NEG
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 1
60602: PUSH
60603: LD_INT 1
60605: NEG
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: LIST
60615: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60616: LD_ADDR_VAR 0 60
60620: PUSH
60621: LD_INT 1
60623: PUSH
60624: LD_INT 1
60626: NEG
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 2
60634: PUSH
60635: LD_INT 0
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 2
60644: PUSH
60645: LD_INT 1
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: LIST
60656: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60657: LD_ADDR_VAR 0 61
60661: PUSH
60662: LD_INT 2
60664: PUSH
60665: LD_INT 1
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 2
60674: PUSH
60675: LD_INT 2
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 1
60684: PUSH
60685: LD_INT 2
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: LIST
60696: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60697: LD_ADDR_VAR 0 62
60701: PUSH
60702: LD_INT 1
60704: PUSH
60705: LD_INT 2
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 0
60714: PUSH
60715: LD_INT 2
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 1
60724: NEG
60725: PUSH
60726: LD_INT 1
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: LIST
60737: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60738: LD_ADDR_VAR 0 63
60742: PUSH
60743: LD_INT 1
60745: NEG
60746: PUSH
60747: LD_INT 1
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 2
60756: NEG
60757: PUSH
60758: LD_INT 0
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 2
60767: NEG
60768: PUSH
60769: LD_INT 1
60771: NEG
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: LIST
60781: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60782: LD_ADDR_VAR 0 64
60786: PUSH
60787: LD_INT 1
60789: NEG
60790: PUSH
60791: LD_INT 2
60793: NEG
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 2
60801: NEG
60802: PUSH
60803: LD_INT 1
60805: NEG
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 2
60813: NEG
60814: PUSH
60815: LD_INT 2
60817: NEG
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: LIST
60827: ST_TO_ADDR
// end ; 2 :
60828: GO 64094
60830: LD_INT 2
60832: DOUBLE
60833: EQUAL
60834: IFTRUE 60838
60836: GO 64093
60838: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60839: LD_ADDR_VAR 0 29
60843: PUSH
60844: LD_INT 4
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 4
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 5
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 5
60877: PUSH
60878: LD_INT 1
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 4
60887: PUSH
60888: LD_INT 1
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 3
60897: PUSH
60898: LD_INT 0
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 3
60907: PUSH
60908: LD_INT 1
60910: NEG
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 3
60918: PUSH
60919: LD_INT 2
60921: NEG
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 5
60929: PUSH
60930: LD_INT 2
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 3
60939: PUSH
60940: LD_INT 3
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 3
60949: PUSH
60950: LD_INT 2
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 4
60959: PUSH
60960: LD_INT 3
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 4
60969: PUSH
60970: LD_INT 4
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 3
60979: PUSH
60980: LD_INT 4
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 2
60989: PUSH
60990: LD_INT 3
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 2
60999: PUSH
61000: LD_INT 2
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 4
61009: PUSH
61010: LD_INT 2
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 2
61019: PUSH
61020: LD_INT 4
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 0
61029: PUSH
61030: LD_INT 4
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 0
61039: PUSH
61040: LD_INT 3
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 1
61049: PUSH
61050: LD_INT 4
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 1
61059: PUSH
61060: LD_INT 5
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 0
61069: PUSH
61070: LD_INT 5
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 1
61079: NEG
61080: PUSH
61081: LD_INT 4
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 1
61090: NEG
61091: PUSH
61092: LD_INT 3
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 2
61101: PUSH
61102: LD_INT 5
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 2
61111: NEG
61112: PUSH
61113: LD_INT 3
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 3
61122: NEG
61123: PUSH
61124: LD_INT 0
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 3
61133: NEG
61134: PUSH
61135: LD_INT 1
61137: NEG
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 2
61145: NEG
61146: PUSH
61147: LD_INT 0
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 2
61156: NEG
61157: PUSH
61158: LD_INT 1
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 3
61167: NEG
61168: PUSH
61169: LD_INT 1
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 4
61178: NEG
61179: PUSH
61180: LD_INT 0
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 4
61189: NEG
61190: PUSH
61191: LD_INT 1
61193: NEG
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 4
61201: NEG
61202: PUSH
61203: LD_INT 2
61205: NEG
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 2
61213: NEG
61214: PUSH
61215: LD_INT 2
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 4
61224: NEG
61225: PUSH
61226: LD_INT 4
61228: NEG
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 4
61236: NEG
61237: PUSH
61238: LD_INT 5
61240: NEG
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 3
61248: NEG
61249: PUSH
61250: LD_INT 4
61252: NEG
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 3
61260: NEG
61261: PUSH
61262: LD_INT 3
61264: NEG
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 4
61272: NEG
61273: PUSH
61274: LD_INT 3
61276: NEG
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 5
61284: NEG
61285: PUSH
61286: LD_INT 4
61288: NEG
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 5
61296: NEG
61297: PUSH
61298: LD_INT 5
61300: NEG
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 3
61308: NEG
61309: PUSH
61310: LD_INT 5
61312: NEG
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 5
61320: NEG
61321: PUSH
61322: LD_INT 3
61324: NEG
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61377: LD_ADDR_VAR 0 30
61381: PUSH
61382: LD_INT 4
61384: PUSH
61385: LD_INT 4
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 4
61394: PUSH
61395: LD_INT 3
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 5
61404: PUSH
61405: LD_INT 4
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 5
61414: PUSH
61415: LD_INT 5
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 4
61424: PUSH
61425: LD_INT 5
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 3
61434: PUSH
61435: LD_INT 4
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 3
61444: PUSH
61445: LD_INT 3
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 5
61454: PUSH
61455: LD_INT 3
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 3
61464: PUSH
61465: LD_INT 5
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 0
61474: PUSH
61475: LD_INT 3
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 0
61484: PUSH
61485: LD_INT 2
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 1
61494: PUSH
61495: LD_INT 3
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 1
61504: PUSH
61505: LD_INT 4
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 0
61514: PUSH
61515: LD_INT 4
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 1
61524: NEG
61525: PUSH
61526: LD_INT 3
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 1
61535: NEG
61536: PUSH
61537: LD_INT 2
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 2
61546: PUSH
61547: LD_INT 4
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 2
61556: NEG
61557: PUSH
61558: LD_INT 2
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 4
61567: NEG
61568: PUSH
61569: LD_INT 0
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 4
61578: NEG
61579: PUSH
61580: LD_INT 1
61582: NEG
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 3
61590: NEG
61591: PUSH
61592: LD_INT 0
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 3
61601: NEG
61602: PUSH
61603: LD_INT 1
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 4
61612: NEG
61613: PUSH
61614: LD_INT 1
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 5
61623: NEG
61624: PUSH
61625: LD_INT 0
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 5
61634: NEG
61635: PUSH
61636: LD_INT 1
61638: NEG
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 5
61646: NEG
61647: PUSH
61648: LD_INT 2
61650: NEG
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 3
61658: NEG
61659: PUSH
61660: LD_INT 2
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 3
61669: NEG
61670: PUSH
61671: LD_INT 3
61673: NEG
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 3
61681: NEG
61682: PUSH
61683: LD_INT 4
61685: NEG
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 2
61693: NEG
61694: PUSH
61695: LD_INT 3
61697: NEG
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 2
61705: NEG
61706: PUSH
61707: LD_INT 2
61709: NEG
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 3
61717: NEG
61718: PUSH
61719: LD_INT 2
61721: NEG
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 4
61729: NEG
61730: PUSH
61731: LD_INT 3
61733: NEG
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 4
61741: NEG
61742: PUSH
61743: LD_INT 4
61745: NEG
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 2
61753: NEG
61754: PUSH
61755: LD_INT 4
61757: NEG
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 4
61765: NEG
61766: PUSH
61767: LD_INT 2
61769: NEG
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 0
61777: PUSH
61778: LD_INT 4
61780: NEG
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 0
61788: PUSH
61789: LD_INT 5
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 1
61799: PUSH
61800: LD_INT 4
61802: NEG
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 1
61810: PUSH
61811: LD_INT 3
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 0
61821: PUSH
61822: LD_INT 3
61824: NEG
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 1
61832: NEG
61833: PUSH
61834: LD_INT 4
61836: NEG
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 1
61844: NEG
61845: PUSH
61846: LD_INT 5
61848: NEG
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 2
61856: PUSH
61857: LD_INT 3
61859: NEG
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 2
61867: NEG
61868: PUSH
61869: LD_INT 5
61871: NEG
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61924: LD_ADDR_VAR 0 31
61928: PUSH
61929: LD_INT 0
61931: PUSH
61932: LD_INT 4
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 0
61941: PUSH
61942: LD_INT 3
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 1
61951: PUSH
61952: LD_INT 4
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 1
61961: PUSH
61962: LD_INT 5
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 0
61971: PUSH
61972: LD_INT 5
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 1
61981: NEG
61982: PUSH
61983: LD_INT 4
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 1
61992: NEG
61993: PUSH
61994: LD_INT 3
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 2
62003: PUSH
62004: LD_INT 5
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 2
62013: NEG
62014: PUSH
62015: LD_INT 3
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 3
62024: NEG
62025: PUSH
62026: LD_INT 0
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 3
62035: NEG
62036: PUSH
62037: LD_INT 1
62039: NEG
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 2
62047: NEG
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 2
62058: NEG
62059: PUSH
62060: LD_INT 1
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 3
62069: NEG
62070: PUSH
62071: LD_INT 1
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 4
62080: NEG
62081: PUSH
62082: LD_INT 0
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 4
62091: NEG
62092: PUSH
62093: LD_INT 1
62095: NEG
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 4
62103: NEG
62104: PUSH
62105: LD_INT 2
62107: NEG
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 2
62115: NEG
62116: PUSH
62117: LD_INT 2
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 4
62126: NEG
62127: PUSH
62128: LD_INT 4
62130: NEG
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 4
62138: NEG
62139: PUSH
62140: LD_INT 5
62142: NEG
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 3
62150: NEG
62151: PUSH
62152: LD_INT 4
62154: NEG
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 3
62162: NEG
62163: PUSH
62164: LD_INT 3
62166: NEG
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 4
62174: NEG
62175: PUSH
62176: LD_INT 3
62178: NEG
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 5
62186: NEG
62187: PUSH
62188: LD_INT 4
62190: NEG
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 5
62198: NEG
62199: PUSH
62200: LD_INT 5
62202: NEG
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 3
62210: NEG
62211: PUSH
62212: LD_INT 5
62214: NEG
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 5
62222: NEG
62223: PUSH
62224: LD_INT 3
62226: NEG
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 0
62234: PUSH
62235: LD_INT 3
62237: NEG
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 0
62245: PUSH
62246: LD_INT 4
62248: NEG
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 1
62256: PUSH
62257: LD_INT 3
62259: NEG
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 1
62267: PUSH
62268: LD_INT 2
62270: NEG
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 0
62278: PUSH
62279: LD_INT 2
62281: NEG
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 1
62289: NEG
62290: PUSH
62291: LD_INT 3
62293: NEG
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 1
62301: NEG
62302: PUSH
62303: LD_INT 4
62305: NEG
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 2
62313: PUSH
62314: LD_INT 2
62316: NEG
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 2
62324: NEG
62325: PUSH
62326: LD_INT 4
62328: NEG
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 4
62336: PUSH
62337: LD_INT 0
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 4
62346: PUSH
62347: LD_INT 1
62349: NEG
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 5
62357: PUSH
62358: LD_INT 0
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 5
62367: PUSH
62368: LD_INT 1
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 4
62377: PUSH
62378: LD_INT 1
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 3
62387: PUSH
62388: LD_INT 0
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 3
62397: PUSH
62398: LD_INT 1
62400: NEG
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 3
62408: PUSH
62409: LD_INT 2
62411: NEG
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 5
62419: PUSH
62420: LD_INT 2
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62474: LD_ADDR_VAR 0 32
62478: PUSH
62479: LD_INT 4
62481: NEG
62482: PUSH
62483: LD_INT 0
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 4
62492: NEG
62493: PUSH
62494: LD_INT 1
62496: NEG
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 3
62504: NEG
62505: PUSH
62506: LD_INT 0
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 3
62515: NEG
62516: PUSH
62517: LD_INT 1
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 4
62526: NEG
62527: PUSH
62528: LD_INT 1
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 5
62537: NEG
62538: PUSH
62539: LD_INT 0
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 5
62548: NEG
62549: PUSH
62550: LD_INT 1
62552: NEG
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 5
62560: NEG
62561: PUSH
62562: LD_INT 2
62564: NEG
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 3
62572: NEG
62573: PUSH
62574: LD_INT 2
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 3
62583: NEG
62584: PUSH
62585: LD_INT 3
62587: NEG
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 3
62595: NEG
62596: PUSH
62597: LD_INT 4
62599: NEG
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 2
62607: NEG
62608: PUSH
62609: LD_INT 3
62611: NEG
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 2
62619: NEG
62620: PUSH
62621: LD_INT 2
62623: NEG
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 3
62631: NEG
62632: PUSH
62633: LD_INT 2
62635: NEG
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 4
62643: NEG
62644: PUSH
62645: LD_INT 3
62647: NEG
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 4
62655: NEG
62656: PUSH
62657: LD_INT 4
62659: NEG
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 2
62667: NEG
62668: PUSH
62669: LD_INT 4
62671: NEG
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 4
62679: NEG
62680: PUSH
62681: LD_INT 2
62683: NEG
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 0
62691: PUSH
62692: LD_INT 4
62694: NEG
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 0
62702: PUSH
62703: LD_INT 5
62705: NEG
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 1
62713: PUSH
62714: LD_INT 4
62716: NEG
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 1
62724: PUSH
62725: LD_INT 3
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 0
62735: PUSH
62736: LD_INT 3
62738: NEG
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 1
62746: NEG
62747: PUSH
62748: LD_INT 4
62750: NEG
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 1
62758: NEG
62759: PUSH
62760: LD_INT 5
62762: NEG
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 2
62770: PUSH
62771: LD_INT 3
62773: NEG
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 2
62781: NEG
62782: PUSH
62783: LD_INT 5
62785: NEG
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 3
62793: PUSH
62794: LD_INT 0
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 3
62803: PUSH
62804: LD_INT 1
62806: NEG
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 4
62814: PUSH
62815: LD_INT 0
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 4
62824: PUSH
62825: LD_INT 1
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 3
62834: PUSH
62835: LD_INT 1
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 2
62844: PUSH
62845: LD_INT 0
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 2
62854: PUSH
62855: LD_INT 1
62857: NEG
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 2
62865: PUSH
62866: LD_INT 2
62868: NEG
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 4
62876: PUSH
62877: LD_INT 2
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 4
62886: PUSH
62887: LD_INT 4
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 4
62896: PUSH
62897: LD_INT 3
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 5
62906: PUSH
62907: LD_INT 4
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 5
62916: PUSH
62917: LD_INT 5
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 4
62926: PUSH
62927: LD_INT 5
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 3
62936: PUSH
62937: LD_INT 4
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 3
62946: PUSH
62947: LD_INT 3
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 5
62956: PUSH
62957: LD_INT 3
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 3
62966: PUSH
62967: LD_INT 5
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63021: LD_ADDR_VAR 0 33
63025: PUSH
63026: LD_INT 4
63028: NEG
63029: PUSH
63030: LD_INT 4
63032: NEG
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 4
63040: NEG
63041: PUSH
63042: LD_INT 5
63044: NEG
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 3
63052: NEG
63053: PUSH
63054: LD_INT 4
63056: NEG
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 3
63064: NEG
63065: PUSH
63066: LD_INT 3
63068: NEG
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 4
63076: NEG
63077: PUSH
63078: LD_INT 3
63080: NEG
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 5
63088: NEG
63089: PUSH
63090: LD_INT 4
63092: NEG
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 5
63100: NEG
63101: PUSH
63102: LD_INT 5
63104: NEG
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 3
63112: NEG
63113: PUSH
63114: LD_INT 5
63116: NEG
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 5
63124: NEG
63125: PUSH
63126: LD_INT 3
63128: NEG
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 0
63136: PUSH
63137: LD_INT 3
63139: NEG
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 0
63147: PUSH
63148: LD_INT 4
63150: NEG
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 1
63158: PUSH
63159: LD_INT 3
63161: NEG
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 1
63169: PUSH
63170: LD_INT 2
63172: NEG
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 0
63180: PUSH
63181: LD_INT 2
63183: NEG
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 1
63191: NEG
63192: PUSH
63193: LD_INT 3
63195: NEG
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 1
63203: NEG
63204: PUSH
63205: LD_INT 4
63207: NEG
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 2
63215: PUSH
63216: LD_INT 2
63218: NEG
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 2
63226: NEG
63227: PUSH
63228: LD_INT 4
63230: NEG
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 4
63238: PUSH
63239: LD_INT 0
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 4
63248: PUSH
63249: LD_INT 1
63251: NEG
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 5
63259: PUSH
63260: LD_INT 0
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 5
63269: PUSH
63270: LD_INT 1
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 4
63279: PUSH
63280: LD_INT 1
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 3
63289: PUSH
63290: LD_INT 0
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 3
63299: PUSH
63300: LD_INT 1
63302: NEG
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 3
63310: PUSH
63311: LD_INT 2
63313: NEG
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 5
63321: PUSH
63322: LD_INT 2
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 3
63331: PUSH
63332: LD_INT 3
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 3
63341: PUSH
63342: LD_INT 2
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 4
63351: PUSH
63352: LD_INT 3
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 4
63361: PUSH
63362: LD_INT 4
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 3
63371: PUSH
63372: LD_INT 4
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 2
63381: PUSH
63382: LD_INT 3
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 2
63391: PUSH
63392: LD_INT 2
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 4
63401: PUSH
63402: LD_INT 2
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 2
63411: PUSH
63412: LD_INT 4
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 0
63421: PUSH
63422: LD_INT 4
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: LD_INT 0
63431: PUSH
63432: LD_INT 3
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 1
63441: PUSH
63442: LD_INT 4
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 1
63451: PUSH
63452: LD_INT 5
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 0
63461: PUSH
63462: LD_INT 5
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 1
63471: NEG
63472: PUSH
63473: LD_INT 4
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 1
63482: NEG
63483: PUSH
63484: LD_INT 3
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 2
63493: PUSH
63494: LD_INT 5
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 2
63503: NEG
63504: PUSH
63505: LD_INT 3
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63559: LD_ADDR_VAR 0 34
63563: PUSH
63564: LD_INT 0
63566: PUSH
63567: LD_INT 4
63569: NEG
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 0
63577: PUSH
63578: LD_INT 5
63580: NEG
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 1
63588: PUSH
63589: LD_INT 4
63591: NEG
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 1
63599: PUSH
63600: LD_INT 3
63602: NEG
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 0
63610: PUSH
63611: LD_INT 3
63613: NEG
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 1
63621: NEG
63622: PUSH
63623: LD_INT 4
63625: NEG
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 1
63633: NEG
63634: PUSH
63635: LD_INT 5
63637: NEG
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 2
63645: PUSH
63646: LD_INT 3
63648: NEG
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 2
63656: NEG
63657: PUSH
63658: LD_INT 5
63660: NEG
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 3
63668: PUSH
63669: LD_INT 0
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 3
63678: PUSH
63679: LD_INT 1
63681: NEG
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 4
63689: PUSH
63690: LD_INT 0
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 4
63699: PUSH
63700: LD_INT 1
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 3
63709: PUSH
63710: LD_INT 1
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 2
63719: PUSH
63720: LD_INT 0
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 2
63729: PUSH
63730: LD_INT 1
63732: NEG
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 2
63740: PUSH
63741: LD_INT 2
63743: NEG
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 4
63751: PUSH
63752: LD_INT 2
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 4
63761: PUSH
63762: LD_INT 4
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 4
63771: PUSH
63772: LD_INT 3
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 5
63781: PUSH
63782: LD_INT 4
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 5
63791: PUSH
63792: LD_INT 5
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 4
63801: PUSH
63802: LD_INT 5
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 3
63811: PUSH
63812: LD_INT 4
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 3
63821: PUSH
63822: LD_INT 3
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 5
63831: PUSH
63832: LD_INT 3
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 3
63841: PUSH
63842: LD_INT 5
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 0
63851: PUSH
63852: LD_INT 3
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 0
63861: PUSH
63862: LD_INT 2
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 1
63871: PUSH
63872: LD_INT 3
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 1
63881: PUSH
63882: LD_INT 4
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 0
63891: PUSH
63892: LD_INT 4
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 1
63901: NEG
63902: PUSH
63903: LD_INT 3
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 1
63912: NEG
63913: PUSH
63914: LD_INT 2
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 2
63923: PUSH
63924: LD_INT 4
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 2
63933: NEG
63934: PUSH
63935: LD_INT 2
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 4
63944: NEG
63945: PUSH
63946: LD_INT 0
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 4
63955: NEG
63956: PUSH
63957: LD_INT 1
63959: NEG
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 3
63967: NEG
63968: PUSH
63969: LD_INT 0
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 3
63978: NEG
63979: PUSH
63980: LD_INT 1
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 4
63989: NEG
63990: PUSH
63991: LD_INT 1
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 5
64000: NEG
64001: PUSH
64002: LD_INT 0
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 5
64011: NEG
64012: PUSH
64013: LD_INT 1
64015: NEG
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 5
64023: NEG
64024: PUSH
64025: LD_INT 2
64027: NEG
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 3
64035: NEG
64036: PUSH
64037: LD_INT 2
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: ST_TO_ADDR
// end ; end ;
64091: GO 64094
64093: POP
// case btype of b_depot , b_warehouse :
64094: LD_VAR 0 1
64098: PUSH
64099: LD_INT 0
64101: DOUBLE
64102: EQUAL
64103: IFTRUE 64113
64105: LD_INT 1
64107: DOUBLE
64108: EQUAL
64109: IFTRUE 64113
64111: GO 64314
64113: POP
// case nation of nation_american :
64114: LD_VAR 0 5
64118: PUSH
64119: LD_INT 1
64121: DOUBLE
64122: EQUAL
64123: IFTRUE 64127
64125: GO 64183
64127: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64128: LD_ADDR_VAR 0 9
64132: PUSH
64133: LD_VAR 0 11
64137: PUSH
64138: LD_VAR 0 12
64142: PUSH
64143: LD_VAR 0 13
64147: PUSH
64148: LD_VAR 0 14
64152: PUSH
64153: LD_VAR 0 15
64157: PUSH
64158: LD_VAR 0 16
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: PUSH
64171: LD_VAR 0 4
64175: PUSH
64176: LD_INT 1
64178: PLUS
64179: ARRAY
64180: ST_TO_ADDR
64181: GO 64312
64183: LD_INT 2
64185: DOUBLE
64186: EQUAL
64187: IFTRUE 64191
64189: GO 64247
64191: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64192: LD_ADDR_VAR 0 9
64196: PUSH
64197: LD_VAR 0 17
64201: PUSH
64202: LD_VAR 0 18
64206: PUSH
64207: LD_VAR 0 19
64211: PUSH
64212: LD_VAR 0 20
64216: PUSH
64217: LD_VAR 0 21
64221: PUSH
64222: LD_VAR 0 22
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: PUSH
64235: LD_VAR 0 4
64239: PUSH
64240: LD_INT 1
64242: PLUS
64243: ARRAY
64244: ST_TO_ADDR
64245: GO 64312
64247: LD_INT 3
64249: DOUBLE
64250: EQUAL
64251: IFTRUE 64255
64253: GO 64311
64255: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64256: LD_ADDR_VAR 0 9
64260: PUSH
64261: LD_VAR 0 23
64265: PUSH
64266: LD_VAR 0 24
64270: PUSH
64271: LD_VAR 0 25
64275: PUSH
64276: LD_VAR 0 26
64280: PUSH
64281: LD_VAR 0 27
64285: PUSH
64286: LD_VAR 0 28
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: PUSH
64299: LD_VAR 0 4
64303: PUSH
64304: LD_INT 1
64306: PLUS
64307: ARRAY
64308: ST_TO_ADDR
64309: GO 64312
64311: POP
64312: GO 64867
64314: LD_INT 2
64316: DOUBLE
64317: EQUAL
64318: IFTRUE 64328
64320: LD_INT 3
64322: DOUBLE
64323: EQUAL
64324: IFTRUE 64328
64326: GO 64384
64328: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64329: LD_ADDR_VAR 0 9
64333: PUSH
64334: LD_VAR 0 29
64338: PUSH
64339: LD_VAR 0 30
64343: PUSH
64344: LD_VAR 0 31
64348: PUSH
64349: LD_VAR 0 32
64353: PUSH
64354: LD_VAR 0 33
64358: PUSH
64359: LD_VAR 0 34
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: PUSH
64372: LD_VAR 0 4
64376: PUSH
64377: LD_INT 1
64379: PLUS
64380: ARRAY
64381: ST_TO_ADDR
64382: GO 64867
64384: LD_INT 16
64386: DOUBLE
64387: EQUAL
64388: IFTRUE 64446
64390: LD_INT 17
64392: DOUBLE
64393: EQUAL
64394: IFTRUE 64446
64396: LD_INT 18
64398: DOUBLE
64399: EQUAL
64400: IFTRUE 64446
64402: LD_INT 19
64404: DOUBLE
64405: EQUAL
64406: IFTRUE 64446
64408: LD_INT 22
64410: DOUBLE
64411: EQUAL
64412: IFTRUE 64446
64414: LD_INT 20
64416: DOUBLE
64417: EQUAL
64418: IFTRUE 64446
64420: LD_INT 21
64422: DOUBLE
64423: EQUAL
64424: IFTRUE 64446
64426: LD_INT 23
64428: DOUBLE
64429: EQUAL
64430: IFTRUE 64446
64432: LD_INT 24
64434: DOUBLE
64435: EQUAL
64436: IFTRUE 64446
64438: LD_INT 25
64440: DOUBLE
64441: EQUAL
64442: IFTRUE 64446
64444: GO 64502
64446: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64447: LD_ADDR_VAR 0 9
64451: PUSH
64452: LD_VAR 0 35
64456: PUSH
64457: LD_VAR 0 36
64461: PUSH
64462: LD_VAR 0 37
64466: PUSH
64467: LD_VAR 0 38
64471: PUSH
64472: LD_VAR 0 39
64476: PUSH
64477: LD_VAR 0 40
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: PUSH
64490: LD_VAR 0 4
64494: PUSH
64495: LD_INT 1
64497: PLUS
64498: ARRAY
64499: ST_TO_ADDR
64500: GO 64867
64502: LD_INT 6
64504: DOUBLE
64505: EQUAL
64506: IFTRUE 64558
64508: LD_INT 7
64510: DOUBLE
64511: EQUAL
64512: IFTRUE 64558
64514: LD_INT 8
64516: DOUBLE
64517: EQUAL
64518: IFTRUE 64558
64520: LD_INT 13
64522: DOUBLE
64523: EQUAL
64524: IFTRUE 64558
64526: LD_INT 12
64528: DOUBLE
64529: EQUAL
64530: IFTRUE 64558
64532: LD_INT 15
64534: DOUBLE
64535: EQUAL
64536: IFTRUE 64558
64538: LD_INT 11
64540: DOUBLE
64541: EQUAL
64542: IFTRUE 64558
64544: LD_INT 14
64546: DOUBLE
64547: EQUAL
64548: IFTRUE 64558
64550: LD_INT 10
64552: DOUBLE
64553: EQUAL
64554: IFTRUE 64558
64556: GO 64614
64558: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64559: LD_ADDR_VAR 0 9
64563: PUSH
64564: LD_VAR 0 41
64568: PUSH
64569: LD_VAR 0 42
64573: PUSH
64574: LD_VAR 0 43
64578: PUSH
64579: LD_VAR 0 44
64583: PUSH
64584: LD_VAR 0 45
64588: PUSH
64589: LD_VAR 0 46
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: PUSH
64602: LD_VAR 0 4
64606: PUSH
64607: LD_INT 1
64609: PLUS
64610: ARRAY
64611: ST_TO_ADDR
64612: GO 64867
64614: LD_INT 36
64616: DOUBLE
64617: EQUAL
64618: IFTRUE 64622
64620: GO 64678
64622: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64623: LD_ADDR_VAR 0 9
64627: PUSH
64628: LD_VAR 0 47
64632: PUSH
64633: LD_VAR 0 48
64637: PUSH
64638: LD_VAR 0 49
64642: PUSH
64643: LD_VAR 0 50
64647: PUSH
64648: LD_VAR 0 51
64652: PUSH
64653: LD_VAR 0 52
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: PUSH
64666: LD_VAR 0 4
64670: PUSH
64671: LD_INT 1
64673: PLUS
64674: ARRAY
64675: ST_TO_ADDR
64676: GO 64867
64678: LD_INT 4
64680: DOUBLE
64681: EQUAL
64682: IFTRUE 64704
64684: LD_INT 5
64686: DOUBLE
64687: EQUAL
64688: IFTRUE 64704
64690: LD_INT 34
64692: DOUBLE
64693: EQUAL
64694: IFTRUE 64704
64696: LD_INT 37
64698: DOUBLE
64699: EQUAL
64700: IFTRUE 64704
64702: GO 64760
64704: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64705: LD_ADDR_VAR 0 9
64709: PUSH
64710: LD_VAR 0 53
64714: PUSH
64715: LD_VAR 0 54
64719: PUSH
64720: LD_VAR 0 55
64724: PUSH
64725: LD_VAR 0 56
64729: PUSH
64730: LD_VAR 0 57
64734: PUSH
64735: LD_VAR 0 58
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: PUSH
64748: LD_VAR 0 4
64752: PUSH
64753: LD_INT 1
64755: PLUS
64756: ARRAY
64757: ST_TO_ADDR
64758: GO 64867
64760: LD_INT 31
64762: DOUBLE
64763: EQUAL
64764: IFTRUE 64810
64766: LD_INT 32
64768: DOUBLE
64769: EQUAL
64770: IFTRUE 64810
64772: LD_INT 33
64774: DOUBLE
64775: EQUAL
64776: IFTRUE 64810
64778: LD_INT 27
64780: DOUBLE
64781: EQUAL
64782: IFTRUE 64810
64784: LD_INT 26
64786: DOUBLE
64787: EQUAL
64788: IFTRUE 64810
64790: LD_INT 28
64792: DOUBLE
64793: EQUAL
64794: IFTRUE 64810
64796: LD_INT 29
64798: DOUBLE
64799: EQUAL
64800: IFTRUE 64810
64802: LD_INT 30
64804: DOUBLE
64805: EQUAL
64806: IFTRUE 64810
64808: GO 64866
64810: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64811: LD_ADDR_VAR 0 9
64815: PUSH
64816: LD_VAR 0 59
64820: PUSH
64821: LD_VAR 0 60
64825: PUSH
64826: LD_VAR 0 61
64830: PUSH
64831: LD_VAR 0 62
64835: PUSH
64836: LD_VAR 0 63
64840: PUSH
64841: LD_VAR 0 64
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: PUSH
64854: LD_VAR 0 4
64858: PUSH
64859: LD_INT 1
64861: PLUS
64862: ARRAY
64863: ST_TO_ADDR
64864: GO 64867
64866: POP
// temp_list2 = [ ] ;
64867: LD_ADDR_VAR 0 10
64871: PUSH
64872: EMPTY
64873: ST_TO_ADDR
// for i in temp_list do
64874: LD_ADDR_VAR 0 8
64878: PUSH
64879: LD_VAR 0 9
64883: PUSH
64884: FOR_IN
64885: IFFALSE 64937
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64887: LD_ADDR_VAR 0 10
64891: PUSH
64892: LD_VAR 0 10
64896: PUSH
64897: LD_VAR 0 8
64901: PUSH
64902: LD_INT 1
64904: ARRAY
64905: PUSH
64906: LD_VAR 0 2
64910: PLUS
64911: PUSH
64912: LD_VAR 0 8
64916: PUSH
64917: LD_INT 2
64919: ARRAY
64920: PUSH
64921: LD_VAR 0 3
64925: PLUS
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: EMPTY
64932: LIST
64933: ADD
64934: ST_TO_ADDR
64935: GO 64884
64937: POP
64938: POP
// result = temp_list2 ;
64939: LD_ADDR_VAR 0 7
64943: PUSH
64944: LD_VAR 0 10
64948: ST_TO_ADDR
// end ;
64949: LD_VAR 0 7
64953: RET
// export function EnemyInRange ( unit , dist ) ; begin
64954: LD_INT 0
64956: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64957: LD_ADDR_VAR 0 3
64961: PUSH
64962: LD_VAR 0 1
64966: PPUSH
64967: CALL_OW 255
64971: PPUSH
64972: LD_VAR 0 1
64976: PPUSH
64977: CALL_OW 250
64981: PPUSH
64982: LD_VAR 0 1
64986: PPUSH
64987: CALL_OW 251
64991: PPUSH
64992: LD_VAR 0 2
64996: PPUSH
64997: CALL 39058 0 4
65001: PUSH
65002: LD_INT 4
65004: ARRAY
65005: ST_TO_ADDR
// end ;
65006: LD_VAR 0 3
65010: RET
// export function PlayerSeeMe ( unit ) ; begin
65011: LD_INT 0
65013: PPUSH
// result := See ( your_side , unit ) ;
65014: LD_ADDR_VAR 0 2
65018: PUSH
65019: LD_OWVAR 2
65023: PPUSH
65024: LD_VAR 0 1
65028: PPUSH
65029: CALL_OW 292
65033: ST_TO_ADDR
// end ;
65034: LD_VAR 0 2
65038: RET
// export function ReverseDir ( unit ) ; begin
65039: LD_INT 0
65041: PPUSH
// if not unit then
65042: LD_VAR 0 1
65046: NOT
65047: IFFALSE 65051
// exit ;
65049: GO 65074
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65051: LD_ADDR_VAR 0 2
65055: PUSH
65056: LD_VAR 0 1
65060: PPUSH
65061: CALL_OW 254
65065: PUSH
65066: LD_INT 3
65068: PLUS
65069: PUSH
65070: LD_INT 6
65072: MOD
65073: ST_TO_ADDR
// end ;
65074: LD_VAR 0 2
65078: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
65079: LD_INT 0
65081: PPUSH
65082: PPUSH
65083: PPUSH
65084: PPUSH
65085: PPUSH
// if not hexes then
65086: LD_VAR 0 2
65090: NOT
65091: IFFALSE 65095
// exit ;
65093: GO 65243
// dist := 9999 ;
65095: LD_ADDR_VAR 0 5
65099: PUSH
65100: LD_INT 9999
65102: ST_TO_ADDR
// for i = 1 to hexes do
65103: LD_ADDR_VAR 0 4
65107: PUSH
65108: DOUBLE
65109: LD_INT 1
65111: DEC
65112: ST_TO_ADDR
65113: LD_VAR 0 2
65117: PUSH
65118: FOR_TO
65119: IFFALSE 65231
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
65121: LD_VAR 0 1
65125: PPUSH
65126: LD_VAR 0 2
65130: PUSH
65131: LD_VAR 0 4
65135: ARRAY
65136: PUSH
65137: LD_INT 1
65139: ARRAY
65140: PPUSH
65141: LD_VAR 0 2
65145: PUSH
65146: LD_VAR 0 4
65150: ARRAY
65151: PUSH
65152: LD_INT 2
65154: ARRAY
65155: PPUSH
65156: CALL_OW 297
65160: PUSH
65161: LD_VAR 0 5
65165: LESS
65166: IFFALSE 65229
// begin hex := hexes [ i ] ;
65168: LD_ADDR_VAR 0 7
65172: PUSH
65173: LD_VAR 0 2
65177: PUSH
65178: LD_VAR 0 4
65182: ARRAY
65183: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65184: LD_ADDR_VAR 0 5
65188: PUSH
65189: LD_VAR 0 1
65193: PPUSH
65194: LD_VAR 0 2
65198: PUSH
65199: LD_VAR 0 4
65203: ARRAY
65204: PUSH
65205: LD_INT 1
65207: ARRAY
65208: PPUSH
65209: LD_VAR 0 2
65213: PUSH
65214: LD_VAR 0 4
65218: ARRAY
65219: PUSH
65220: LD_INT 2
65222: ARRAY
65223: PPUSH
65224: CALL_OW 297
65228: ST_TO_ADDR
// end ; end ;
65229: GO 65118
65231: POP
65232: POP
// result := hex ;
65233: LD_ADDR_VAR 0 3
65237: PUSH
65238: LD_VAR 0 7
65242: ST_TO_ADDR
// end ;
65243: LD_VAR 0 3
65247: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65248: LD_INT 0
65250: PPUSH
65251: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65252: LD_VAR 0 1
65256: NOT
65257: PUSH
65258: LD_VAR 0 1
65262: PUSH
65263: LD_INT 21
65265: PUSH
65266: LD_INT 2
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 23
65275: PUSH
65276: LD_INT 2
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PPUSH
65287: CALL_OW 69
65291: IN
65292: NOT
65293: OR
65294: IFFALSE 65298
// exit ;
65296: GO 65345
// for i = 1 to 3 do
65298: LD_ADDR_VAR 0 3
65302: PUSH
65303: DOUBLE
65304: LD_INT 1
65306: DEC
65307: ST_TO_ADDR
65308: LD_INT 3
65310: PUSH
65311: FOR_TO
65312: IFFALSE 65343
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65314: LD_VAR 0 1
65318: PPUSH
65319: CALL_OW 250
65323: PPUSH
65324: LD_VAR 0 1
65328: PPUSH
65329: CALL_OW 251
65333: PPUSH
65334: LD_INT 1
65336: PPUSH
65337: CALL_OW 453
65341: GO 65311
65343: POP
65344: POP
// end ;
65345: LD_VAR 0 2
65349: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65350: LD_INT 0
65352: PPUSH
65353: PPUSH
65354: PPUSH
65355: PPUSH
65356: PPUSH
65357: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65358: LD_VAR 0 1
65362: NOT
65363: PUSH
65364: LD_VAR 0 2
65368: NOT
65369: OR
65370: PUSH
65371: LD_VAR 0 1
65375: PPUSH
65376: CALL_OW 314
65380: OR
65381: IFFALSE 65385
// exit ;
65383: GO 65826
// x := GetX ( enemy_unit ) ;
65385: LD_ADDR_VAR 0 7
65389: PUSH
65390: LD_VAR 0 2
65394: PPUSH
65395: CALL_OW 250
65399: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65400: LD_ADDR_VAR 0 8
65404: PUSH
65405: LD_VAR 0 2
65409: PPUSH
65410: CALL_OW 251
65414: ST_TO_ADDR
// if not x or not y then
65415: LD_VAR 0 7
65419: NOT
65420: PUSH
65421: LD_VAR 0 8
65425: NOT
65426: OR
65427: IFFALSE 65431
// exit ;
65429: GO 65826
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65431: LD_ADDR_VAR 0 6
65435: PUSH
65436: LD_VAR 0 7
65440: PPUSH
65441: LD_INT 0
65443: PPUSH
65444: LD_INT 4
65446: PPUSH
65447: CALL_OW 272
65451: PUSH
65452: LD_VAR 0 8
65456: PPUSH
65457: LD_INT 0
65459: PPUSH
65460: LD_INT 4
65462: PPUSH
65463: CALL_OW 273
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_VAR 0 7
65476: PPUSH
65477: LD_INT 1
65479: PPUSH
65480: LD_INT 4
65482: PPUSH
65483: CALL_OW 272
65487: PUSH
65488: LD_VAR 0 8
65492: PPUSH
65493: LD_INT 1
65495: PPUSH
65496: LD_INT 4
65498: PPUSH
65499: CALL_OW 273
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_VAR 0 7
65512: PPUSH
65513: LD_INT 2
65515: PPUSH
65516: LD_INT 4
65518: PPUSH
65519: CALL_OW 272
65523: PUSH
65524: LD_VAR 0 8
65528: PPUSH
65529: LD_INT 2
65531: PPUSH
65532: LD_INT 4
65534: PPUSH
65535: CALL_OW 273
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_VAR 0 7
65548: PPUSH
65549: LD_INT 3
65551: PPUSH
65552: LD_INT 4
65554: PPUSH
65555: CALL_OW 272
65559: PUSH
65560: LD_VAR 0 8
65564: PPUSH
65565: LD_INT 3
65567: PPUSH
65568: LD_INT 4
65570: PPUSH
65571: CALL_OW 273
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_VAR 0 7
65584: PPUSH
65585: LD_INT 4
65587: PPUSH
65588: LD_INT 4
65590: PPUSH
65591: CALL_OW 272
65595: PUSH
65596: LD_VAR 0 8
65600: PPUSH
65601: LD_INT 4
65603: PPUSH
65604: LD_INT 4
65606: PPUSH
65607: CALL_OW 273
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_VAR 0 7
65620: PPUSH
65621: LD_INT 5
65623: PPUSH
65624: LD_INT 4
65626: PPUSH
65627: CALL_OW 272
65631: PUSH
65632: LD_VAR 0 8
65636: PPUSH
65637: LD_INT 5
65639: PPUSH
65640: LD_INT 4
65642: PPUSH
65643: CALL_OW 273
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: ST_TO_ADDR
// for i = tmp downto 1 do
65660: LD_ADDR_VAR 0 4
65664: PUSH
65665: DOUBLE
65666: LD_VAR 0 6
65670: INC
65671: ST_TO_ADDR
65672: LD_INT 1
65674: PUSH
65675: FOR_DOWNTO
65676: IFFALSE 65777
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65678: LD_VAR 0 6
65682: PUSH
65683: LD_VAR 0 4
65687: ARRAY
65688: PUSH
65689: LD_INT 1
65691: ARRAY
65692: PPUSH
65693: LD_VAR 0 6
65697: PUSH
65698: LD_VAR 0 4
65702: ARRAY
65703: PUSH
65704: LD_INT 2
65706: ARRAY
65707: PPUSH
65708: CALL_OW 488
65712: NOT
65713: PUSH
65714: LD_VAR 0 6
65718: PUSH
65719: LD_VAR 0 4
65723: ARRAY
65724: PUSH
65725: LD_INT 1
65727: ARRAY
65728: PPUSH
65729: LD_VAR 0 6
65733: PUSH
65734: LD_VAR 0 4
65738: ARRAY
65739: PUSH
65740: LD_INT 2
65742: ARRAY
65743: PPUSH
65744: CALL_OW 428
65748: PUSH
65749: LD_INT 0
65751: NONEQUAL
65752: OR
65753: IFFALSE 65775
// tmp := Delete ( tmp , i ) ;
65755: LD_ADDR_VAR 0 6
65759: PUSH
65760: LD_VAR 0 6
65764: PPUSH
65765: LD_VAR 0 4
65769: PPUSH
65770: CALL_OW 3
65774: ST_TO_ADDR
65775: GO 65675
65777: POP
65778: POP
// j := GetClosestHex ( unit , tmp ) ;
65779: LD_ADDR_VAR 0 5
65783: PUSH
65784: LD_VAR 0 1
65788: PPUSH
65789: LD_VAR 0 6
65793: PPUSH
65794: CALL 65079 0 2
65798: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65799: LD_VAR 0 1
65803: PPUSH
65804: LD_VAR 0 5
65808: PUSH
65809: LD_INT 1
65811: ARRAY
65812: PPUSH
65813: LD_VAR 0 5
65817: PUSH
65818: LD_INT 2
65820: ARRAY
65821: PPUSH
65822: CALL_OW 111
// end ;
65826: LD_VAR 0 3
65830: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65831: LD_INT 0
65833: PPUSH
65834: PPUSH
65835: PPUSH
// uc_side = 0 ;
65836: LD_ADDR_OWVAR 20
65840: PUSH
65841: LD_INT 0
65843: ST_TO_ADDR
// uc_nation = 0 ;
65844: LD_ADDR_OWVAR 21
65848: PUSH
65849: LD_INT 0
65851: ST_TO_ADDR
// InitHc_All ( ) ;
65852: CALL_OW 584
// InitVc ;
65856: CALL_OW 20
// if mastodonts then
65860: LD_VAR 0 6
65864: IFFALSE 65931
// for i = 1 to mastodonts do
65866: LD_ADDR_VAR 0 11
65870: PUSH
65871: DOUBLE
65872: LD_INT 1
65874: DEC
65875: ST_TO_ADDR
65876: LD_VAR 0 6
65880: PUSH
65881: FOR_TO
65882: IFFALSE 65929
// begin vc_chassis := 31 ;
65884: LD_ADDR_OWVAR 37
65888: PUSH
65889: LD_INT 31
65891: ST_TO_ADDR
// vc_control := control_rider ;
65892: LD_ADDR_OWVAR 38
65896: PUSH
65897: LD_INT 4
65899: ST_TO_ADDR
// animal := CreateVehicle ;
65900: LD_ADDR_VAR 0 12
65904: PUSH
65905: CALL_OW 45
65909: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65910: LD_VAR 0 12
65914: PPUSH
65915: LD_VAR 0 8
65919: PPUSH
65920: LD_INT 0
65922: PPUSH
65923: CALL 68119 0 3
// end ;
65927: GO 65881
65929: POP
65930: POP
// if horses then
65931: LD_VAR 0 5
65935: IFFALSE 66002
// for i = 1 to horses do
65937: LD_ADDR_VAR 0 11
65941: PUSH
65942: DOUBLE
65943: LD_INT 1
65945: DEC
65946: ST_TO_ADDR
65947: LD_VAR 0 5
65951: PUSH
65952: FOR_TO
65953: IFFALSE 66000
// begin hc_class := 21 ;
65955: LD_ADDR_OWVAR 28
65959: PUSH
65960: LD_INT 21
65962: ST_TO_ADDR
// hc_gallery :=  ;
65963: LD_ADDR_OWVAR 33
65967: PUSH
65968: LD_STRING 
65970: ST_TO_ADDR
// animal := CreateHuman ;
65971: LD_ADDR_VAR 0 12
65975: PUSH
65976: CALL_OW 44
65980: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65981: LD_VAR 0 12
65985: PPUSH
65986: LD_VAR 0 8
65990: PPUSH
65991: LD_INT 0
65993: PPUSH
65994: CALL 68119 0 3
// end ;
65998: GO 65952
66000: POP
66001: POP
// if birds then
66002: LD_VAR 0 1
66006: IFFALSE 66073
// for i = 1 to birds do
66008: LD_ADDR_VAR 0 11
66012: PUSH
66013: DOUBLE
66014: LD_INT 1
66016: DEC
66017: ST_TO_ADDR
66018: LD_VAR 0 1
66022: PUSH
66023: FOR_TO
66024: IFFALSE 66071
// begin hc_class = 18 ;
66026: LD_ADDR_OWVAR 28
66030: PUSH
66031: LD_INT 18
66033: ST_TO_ADDR
// hc_gallery =  ;
66034: LD_ADDR_OWVAR 33
66038: PUSH
66039: LD_STRING 
66041: ST_TO_ADDR
// animal := CreateHuman ;
66042: LD_ADDR_VAR 0 12
66046: PUSH
66047: CALL_OW 44
66051: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66052: LD_VAR 0 12
66056: PPUSH
66057: LD_VAR 0 8
66061: PPUSH
66062: LD_INT 0
66064: PPUSH
66065: CALL 68119 0 3
// end ;
66069: GO 66023
66071: POP
66072: POP
// if tigers then
66073: LD_VAR 0 2
66077: IFFALSE 66161
// for i = 1 to tigers do
66079: LD_ADDR_VAR 0 11
66083: PUSH
66084: DOUBLE
66085: LD_INT 1
66087: DEC
66088: ST_TO_ADDR
66089: LD_VAR 0 2
66093: PUSH
66094: FOR_TO
66095: IFFALSE 66159
// begin hc_class = class_tiger ;
66097: LD_ADDR_OWVAR 28
66101: PUSH
66102: LD_INT 14
66104: ST_TO_ADDR
// hc_gallery =  ;
66105: LD_ADDR_OWVAR 33
66109: PUSH
66110: LD_STRING 
66112: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66113: LD_ADDR_OWVAR 35
66117: PUSH
66118: LD_INT 7
66120: NEG
66121: PPUSH
66122: LD_INT 7
66124: PPUSH
66125: CALL_OW 12
66129: ST_TO_ADDR
// animal := CreateHuman ;
66130: LD_ADDR_VAR 0 12
66134: PUSH
66135: CALL_OW 44
66139: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66140: LD_VAR 0 12
66144: PPUSH
66145: LD_VAR 0 8
66149: PPUSH
66150: LD_INT 0
66152: PPUSH
66153: CALL 68119 0 3
// end ;
66157: GO 66094
66159: POP
66160: POP
// if apemans then
66161: LD_VAR 0 3
66165: IFFALSE 66288
// for i = 1 to apemans do
66167: LD_ADDR_VAR 0 11
66171: PUSH
66172: DOUBLE
66173: LD_INT 1
66175: DEC
66176: ST_TO_ADDR
66177: LD_VAR 0 3
66181: PUSH
66182: FOR_TO
66183: IFFALSE 66286
// begin hc_class = class_apeman ;
66185: LD_ADDR_OWVAR 28
66189: PUSH
66190: LD_INT 12
66192: ST_TO_ADDR
// hc_gallery =  ;
66193: LD_ADDR_OWVAR 33
66197: PUSH
66198: LD_STRING 
66200: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
66201: LD_ADDR_OWVAR 35
66205: PUSH
66206: LD_INT 5
66208: NEG
66209: PPUSH
66210: LD_INT 5
66212: PPUSH
66213: CALL_OW 12
66217: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66218: LD_ADDR_OWVAR 31
66222: PUSH
66223: LD_INT 1
66225: PPUSH
66226: LD_INT 3
66228: PPUSH
66229: CALL_OW 12
66233: PUSH
66234: LD_INT 1
66236: PPUSH
66237: LD_INT 3
66239: PPUSH
66240: CALL_OW 12
66244: PUSH
66245: LD_INT 0
66247: PUSH
66248: LD_INT 0
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: ST_TO_ADDR
// animal := CreateHuman ;
66257: LD_ADDR_VAR 0 12
66261: PUSH
66262: CALL_OW 44
66266: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66267: LD_VAR 0 12
66271: PPUSH
66272: LD_VAR 0 8
66276: PPUSH
66277: LD_INT 0
66279: PPUSH
66280: CALL 68119 0 3
// end ;
66284: GO 66182
66286: POP
66287: POP
// if enchidnas then
66288: LD_VAR 0 4
66292: IFFALSE 66359
// for i = 1 to enchidnas do
66294: LD_ADDR_VAR 0 11
66298: PUSH
66299: DOUBLE
66300: LD_INT 1
66302: DEC
66303: ST_TO_ADDR
66304: LD_VAR 0 4
66308: PUSH
66309: FOR_TO
66310: IFFALSE 66357
// begin hc_class = 13 ;
66312: LD_ADDR_OWVAR 28
66316: PUSH
66317: LD_INT 13
66319: ST_TO_ADDR
// hc_gallery =  ;
66320: LD_ADDR_OWVAR 33
66324: PUSH
66325: LD_STRING 
66327: ST_TO_ADDR
// animal := CreateHuman ;
66328: LD_ADDR_VAR 0 12
66332: PUSH
66333: CALL_OW 44
66337: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66338: LD_VAR 0 12
66342: PPUSH
66343: LD_VAR 0 8
66347: PPUSH
66348: LD_INT 0
66350: PPUSH
66351: CALL 68119 0 3
// end ;
66355: GO 66309
66357: POP
66358: POP
// if fishes then
66359: LD_VAR 0 7
66363: IFFALSE 66430
// for i = 1 to fishes do
66365: LD_ADDR_VAR 0 11
66369: PUSH
66370: DOUBLE
66371: LD_INT 1
66373: DEC
66374: ST_TO_ADDR
66375: LD_VAR 0 7
66379: PUSH
66380: FOR_TO
66381: IFFALSE 66428
// begin hc_class = 20 ;
66383: LD_ADDR_OWVAR 28
66387: PUSH
66388: LD_INT 20
66390: ST_TO_ADDR
// hc_gallery =  ;
66391: LD_ADDR_OWVAR 33
66395: PUSH
66396: LD_STRING 
66398: ST_TO_ADDR
// animal := CreateHuman ;
66399: LD_ADDR_VAR 0 12
66403: PUSH
66404: CALL_OW 44
66408: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66409: LD_VAR 0 12
66413: PPUSH
66414: LD_VAR 0 9
66418: PPUSH
66419: LD_INT 0
66421: PPUSH
66422: CALL 68119 0 3
// end ;
66426: GO 66380
66428: POP
66429: POP
// end ;
66430: LD_VAR 0 10
66434: RET
// export function WantHeal ( sci , unit ) ; begin
66435: LD_INT 0
66437: PPUSH
// if GetTaskList ( sci ) > 0 then
66438: LD_VAR 0 1
66442: PPUSH
66443: CALL_OW 437
66447: PUSH
66448: LD_INT 0
66450: GREATER
66451: IFFALSE 66521
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66453: LD_VAR 0 1
66457: PPUSH
66458: CALL_OW 437
66462: PUSH
66463: LD_INT 1
66465: ARRAY
66466: PUSH
66467: LD_INT 1
66469: ARRAY
66470: PUSH
66471: LD_STRING l
66473: EQUAL
66474: PUSH
66475: LD_VAR 0 1
66479: PPUSH
66480: CALL_OW 437
66484: PUSH
66485: LD_INT 1
66487: ARRAY
66488: PUSH
66489: LD_INT 4
66491: ARRAY
66492: PUSH
66493: LD_VAR 0 2
66497: EQUAL
66498: AND
66499: IFFALSE 66511
// result := true else
66501: LD_ADDR_VAR 0 3
66505: PUSH
66506: LD_INT 1
66508: ST_TO_ADDR
66509: GO 66519
// result := false ;
66511: LD_ADDR_VAR 0 3
66515: PUSH
66516: LD_INT 0
66518: ST_TO_ADDR
// end else
66519: GO 66529
// result := false ;
66521: LD_ADDR_VAR 0 3
66525: PUSH
66526: LD_INT 0
66528: ST_TO_ADDR
// end ;
66529: LD_VAR 0 3
66533: RET
// export function HealTarget ( sci ) ; begin
66534: LD_INT 0
66536: PPUSH
// if not sci then
66537: LD_VAR 0 1
66541: NOT
66542: IFFALSE 66546
// exit ;
66544: GO 66611
// result := 0 ;
66546: LD_ADDR_VAR 0 2
66550: PUSH
66551: LD_INT 0
66553: ST_TO_ADDR
// if GetTaskList ( sci ) then
66554: LD_VAR 0 1
66558: PPUSH
66559: CALL_OW 437
66563: IFFALSE 66611
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66565: LD_VAR 0 1
66569: PPUSH
66570: CALL_OW 437
66574: PUSH
66575: LD_INT 1
66577: ARRAY
66578: PUSH
66579: LD_INT 1
66581: ARRAY
66582: PUSH
66583: LD_STRING l
66585: EQUAL
66586: IFFALSE 66611
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66588: LD_ADDR_VAR 0 2
66592: PUSH
66593: LD_VAR 0 1
66597: PPUSH
66598: CALL_OW 437
66602: PUSH
66603: LD_INT 1
66605: ARRAY
66606: PUSH
66607: LD_INT 4
66609: ARRAY
66610: ST_TO_ADDR
// end ;
66611: LD_VAR 0 2
66615: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66616: LD_INT 0
66618: PPUSH
66619: PPUSH
66620: PPUSH
66621: PPUSH
// if not base_units then
66622: LD_VAR 0 1
66626: NOT
66627: IFFALSE 66631
// exit ;
66629: GO 66718
// result := false ;
66631: LD_ADDR_VAR 0 2
66635: PUSH
66636: LD_INT 0
66638: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66639: LD_ADDR_VAR 0 5
66643: PUSH
66644: LD_VAR 0 1
66648: PPUSH
66649: LD_INT 21
66651: PUSH
66652: LD_INT 3
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PPUSH
66659: CALL_OW 72
66663: ST_TO_ADDR
// if not tmp then
66664: LD_VAR 0 5
66668: NOT
66669: IFFALSE 66673
// exit ;
66671: GO 66718
// for i in tmp do
66673: LD_ADDR_VAR 0 3
66677: PUSH
66678: LD_VAR 0 5
66682: PUSH
66683: FOR_IN
66684: IFFALSE 66716
// begin result := EnemyInRange ( i , 22 ) ;
66686: LD_ADDR_VAR 0 2
66690: PUSH
66691: LD_VAR 0 3
66695: PPUSH
66696: LD_INT 22
66698: PPUSH
66699: CALL 64954 0 2
66703: ST_TO_ADDR
// if result then
66704: LD_VAR 0 2
66708: IFFALSE 66714
// exit ;
66710: POP
66711: POP
66712: GO 66718
// end ;
66714: GO 66683
66716: POP
66717: POP
// end ;
66718: LD_VAR 0 2
66722: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
66723: LD_INT 0
66725: PPUSH
66726: PPUSH
// if not units then
66727: LD_VAR 0 1
66731: NOT
66732: IFFALSE 66736
// exit ;
66734: GO 66806
// result := [ ] ;
66736: LD_ADDR_VAR 0 3
66740: PUSH
66741: EMPTY
66742: ST_TO_ADDR
// for i in units do
66743: LD_ADDR_VAR 0 4
66747: PUSH
66748: LD_VAR 0 1
66752: PUSH
66753: FOR_IN
66754: IFFALSE 66804
// if GetTag ( i ) = tag then
66756: LD_VAR 0 4
66760: PPUSH
66761: CALL_OW 110
66765: PUSH
66766: LD_VAR 0 2
66770: EQUAL
66771: IFFALSE 66802
// result := Insert ( result , result + 1 , i ) ;
66773: LD_ADDR_VAR 0 3
66777: PUSH
66778: LD_VAR 0 3
66782: PPUSH
66783: LD_VAR 0 3
66787: PUSH
66788: LD_INT 1
66790: PLUS
66791: PPUSH
66792: LD_VAR 0 4
66796: PPUSH
66797: CALL_OW 2
66801: ST_TO_ADDR
66802: GO 66753
66804: POP
66805: POP
// end ;
66806: LD_VAR 0 3
66810: RET
// export function IsDriver ( un ) ; begin
66811: LD_INT 0
66813: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66814: LD_ADDR_VAR 0 2
66818: PUSH
66819: LD_VAR 0 1
66823: PUSH
66824: LD_INT 55
66826: PUSH
66827: EMPTY
66828: LIST
66829: PPUSH
66830: CALL_OW 69
66834: IN
66835: ST_TO_ADDR
// end ;
66836: LD_VAR 0 2
66840: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66841: LD_INT 0
66843: PPUSH
66844: PPUSH
// list := [ ] ;
66845: LD_ADDR_VAR 0 5
66849: PUSH
66850: EMPTY
66851: ST_TO_ADDR
// case d of 0 :
66852: LD_VAR 0 3
66856: PUSH
66857: LD_INT 0
66859: DOUBLE
66860: EQUAL
66861: IFTRUE 66865
66863: GO 66998
66865: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66866: LD_ADDR_VAR 0 5
66870: PUSH
66871: LD_VAR 0 1
66875: PUSH
66876: LD_INT 4
66878: MINUS
66879: PUSH
66880: LD_VAR 0 2
66884: PUSH
66885: LD_INT 4
66887: MINUS
66888: PUSH
66889: LD_INT 2
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: LIST
66896: PUSH
66897: LD_VAR 0 1
66901: PUSH
66902: LD_INT 3
66904: MINUS
66905: PUSH
66906: LD_VAR 0 2
66910: PUSH
66911: LD_INT 1
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: LIST
66918: PUSH
66919: LD_VAR 0 1
66923: PUSH
66924: LD_INT 4
66926: PLUS
66927: PUSH
66928: LD_VAR 0 2
66932: PUSH
66933: LD_INT 4
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: LIST
66940: PUSH
66941: LD_VAR 0 1
66945: PUSH
66946: LD_INT 3
66948: PLUS
66949: PUSH
66950: LD_VAR 0 2
66954: PUSH
66955: LD_INT 3
66957: PLUS
66958: PUSH
66959: LD_INT 5
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: LIST
66966: PUSH
66967: LD_VAR 0 1
66971: PUSH
66972: LD_VAR 0 2
66976: PUSH
66977: LD_INT 4
66979: PLUS
66980: PUSH
66981: LD_INT 0
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: LIST
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: LIST
66993: LIST
66994: LIST
66995: ST_TO_ADDR
// end ; 1 :
66996: GO 67696
66998: LD_INT 1
67000: DOUBLE
67001: EQUAL
67002: IFTRUE 67006
67004: GO 67139
67006: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67007: LD_ADDR_VAR 0 5
67011: PUSH
67012: LD_VAR 0 1
67016: PUSH
67017: LD_VAR 0 2
67021: PUSH
67022: LD_INT 4
67024: MINUS
67025: PUSH
67026: LD_INT 3
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: LIST
67033: PUSH
67034: LD_VAR 0 1
67038: PUSH
67039: LD_INT 3
67041: MINUS
67042: PUSH
67043: LD_VAR 0 2
67047: PUSH
67048: LD_INT 3
67050: MINUS
67051: PUSH
67052: LD_INT 2
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: LIST
67059: PUSH
67060: LD_VAR 0 1
67064: PUSH
67065: LD_INT 4
67067: MINUS
67068: PUSH
67069: LD_VAR 0 2
67073: PUSH
67074: LD_INT 1
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: LIST
67081: PUSH
67082: LD_VAR 0 1
67086: PUSH
67087: LD_VAR 0 2
67091: PUSH
67092: LD_INT 3
67094: PLUS
67095: PUSH
67096: LD_INT 0
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: LIST
67103: PUSH
67104: LD_VAR 0 1
67108: PUSH
67109: LD_INT 4
67111: PLUS
67112: PUSH
67113: LD_VAR 0 2
67117: PUSH
67118: LD_INT 4
67120: PLUS
67121: PUSH
67122: LD_INT 5
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: LIST
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: LIST
67134: LIST
67135: LIST
67136: ST_TO_ADDR
// end ; 2 :
67137: GO 67696
67139: LD_INT 2
67141: DOUBLE
67142: EQUAL
67143: IFTRUE 67147
67145: GO 67276
67147: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67148: LD_ADDR_VAR 0 5
67152: PUSH
67153: LD_VAR 0 1
67157: PUSH
67158: LD_VAR 0 2
67162: PUSH
67163: LD_INT 3
67165: MINUS
67166: PUSH
67167: LD_INT 3
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: LIST
67174: PUSH
67175: LD_VAR 0 1
67179: PUSH
67180: LD_INT 4
67182: PLUS
67183: PUSH
67184: LD_VAR 0 2
67188: PUSH
67189: LD_INT 4
67191: PUSH
67192: EMPTY
67193: LIST
67194: LIST
67195: LIST
67196: PUSH
67197: LD_VAR 0 1
67201: PUSH
67202: LD_VAR 0 2
67206: PUSH
67207: LD_INT 4
67209: PLUS
67210: PUSH
67211: LD_INT 0
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: LIST
67218: PUSH
67219: LD_VAR 0 1
67223: PUSH
67224: LD_INT 3
67226: MINUS
67227: PUSH
67228: LD_VAR 0 2
67232: PUSH
67233: LD_INT 1
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: LIST
67240: PUSH
67241: LD_VAR 0 1
67245: PUSH
67246: LD_INT 4
67248: MINUS
67249: PUSH
67250: LD_VAR 0 2
67254: PUSH
67255: LD_INT 4
67257: MINUS
67258: PUSH
67259: LD_INT 2
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: LIST
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: ST_TO_ADDR
// end ; 3 :
67274: GO 67696
67276: LD_INT 3
67278: DOUBLE
67279: EQUAL
67280: IFTRUE 67284
67282: GO 67417
67284: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67285: LD_ADDR_VAR 0 5
67289: PUSH
67290: LD_VAR 0 1
67294: PUSH
67295: LD_INT 3
67297: PLUS
67298: PUSH
67299: LD_VAR 0 2
67303: PUSH
67304: LD_INT 4
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: LIST
67311: PUSH
67312: LD_VAR 0 1
67316: PUSH
67317: LD_INT 4
67319: PLUS
67320: PUSH
67321: LD_VAR 0 2
67325: PUSH
67326: LD_INT 4
67328: PLUS
67329: PUSH
67330: LD_INT 5
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: LIST
67337: PUSH
67338: LD_VAR 0 1
67342: PUSH
67343: LD_INT 4
67345: MINUS
67346: PUSH
67347: LD_VAR 0 2
67351: PUSH
67352: LD_INT 1
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: LIST
67359: PUSH
67360: LD_VAR 0 1
67364: PUSH
67365: LD_VAR 0 2
67369: PUSH
67370: LD_INT 4
67372: MINUS
67373: PUSH
67374: LD_INT 3
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: LIST
67381: PUSH
67382: LD_VAR 0 1
67386: PUSH
67387: LD_INT 3
67389: MINUS
67390: PUSH
67391: LD_VAR 0 2
67395: PUSH
67396: LD_INT 3
67398: MINUS
67399: PUSH
67400: LD_INT 2
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: LIST
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: ST_TO_ADDR
// end ; 4 :
67415: GO 67696
67417: LD_INT 4
67419: DOUBLE
67420: EQUAL
67421: IFTRUE 67425
67423: GO 67558
67425: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67426: LD_ADDR_VAR 0 5
67430: PUSH
67431: LD_VAR 0 1
67435: PUSH
67436: LD_VAR 0 2
67440: PUSH
67441: LD_INT 4
67443: PLUS
67444: PUSH
67445: LD_INT 0
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: LIST
67452: PUSH
67453: LD_VAR 0 1
67457: PUSH
67458: LD_INT 3
67460: PLUS
67461: PUSH
67462: LD_VAR 0 2
67466: PUSH
67467: LD_INT 3
67469: PLUS
67470: PUSH
67471: LD_INT 5
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: LIST
67478: PUSH
67479: LD_VAR 0 1
67483: PUSH
67484: LD_INT 4
67486: PLUS
67487: PUSH
67488: LD_VAR 0 2
67492: PUSH
67493: LD_INT 4
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: LIST
67500: PUSH
67501: LD_VAR 0 1
67505: PUSH
67506: LD_VAR 0 2
67510: PUSH
67511: LD_INT 3
67513: MINUS
67514: PUSH
67515: LD_INT 3
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: LIST
67522: PUSH
67523: LD_VAR 0 1
67527: PUSH
67528: LD_INT 4
67530: MINUS
67531: PUSH
67532: LD_VAR 0 2
67536: PUSH
67537: LD_INT 4
67539: MINUS
67540: PUSH
67541: LD_INT 2
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: LIST
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: ST_TO_ADDR
// end ; 5 :
67556: GO 67696
67558: LD_INT 5
67560: DOUBLE
67561: EQUAL
67562: IFTRUE 67566
67564: GO 67695
67566: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67567: LD_ADDR_VAR 0 5
67571: PUSH
67572: LD_VAR 0 1
67576: PUSH
67577: LD_INT 4
67579: MINUS
67580: PUSH
67581: LD_VAR 0 2
67585: PUSH
67586: LD_INT 1
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: LIST
67593: PUSH
67594: LD_VAR 0 1
67598: PUSH
67599: LD_VAR 0 2
67603: PUSH
67604: LD_INT 4
67606: MINUS
67607: PUSH
67608: LD_INT 3
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: LIST
67615: PUSH
67616: LD_VAR 0 1
67620: PUSH
67621: LD_INT 4
67623: PLUS
67624: PUSH
67625: LD_VAR 0 2
67629: PUSH
67630: LD_INT 4
67632: PLUS
67633: PUSH
67634: LD_INT 5
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: LIST
67641: PUSH
67642: LD_VAR 0 1
67646: PUSH
67647: LD_INT 3
67649: PLUS
67650: PUSH
67651: LD_VAR 0 2
67655: PUSH
67656: LD_INT 4
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: LIST
67663: PUSH
67664: LD_VAR 0 1
67668: PUSH
67669: LD_VAR 0 2
67673: PUSH
67674: LD_INT 3
67676: PLUS
67677: PUSH
67678: LD_INT 0
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: LIST
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: ST_TO_ADDR
// end ; end ;
67693: GO 67696
67695: POP
// result := list ;
67696: LD_ADDR_VAR 0 4
67700: PUSH
67701: LD_VAR 0 5
67705: ST_TO_ADDR
// end ;
67706: LD_VAR 0 4
67710: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67711: LD_INT 0
67713: PPUSH
67714: PPUSH
67715: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67716: LD_VAR 0 1
67720: NOT
67721: PUSH
67722: LD_VAR 0 2
67726: PUSH
67727: LD_INT 1
67729: PUSH
67730: LD_INT 2
67732: PUSH
67733: LD_INT 3
67735: PUSH
67736: LD_INT 4
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: IN
67745: NOT
67746: OR
67747: IFFALSE 67751
// exit ;
67749: GO 67843
// tmp := [ ] ;
67751: LD_ADDR_VAR 0 5
67755: PUSH
67756: EMPTY
67757: ST_TO_ADDR
// for i in units do
67758: LD_ADDR_VAR 0 4
67762: PUSH
67763: LD_VAR 0 1
67767: PUSH
67768: FOR_IN
67769: IFFALSE 67812
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
67771: LD_ADDR_VAR 0 5
67775: PUSH
67776: LD_VAR 0 5
67780: PPUSH
67781: LD_VAR 0 5
67785: PUSH
67786: LD_INT 1
67788: PLUS
67789: PPUSH
67790: LD_VAR 0 4
67794: PPUSH
67795: LD_VAR 0 2
67799: PPUSH
67800: CALL_OW 259
67804: PPUSH
67805: CALL_OW 2
67809: ST_TO_ADDR
67810: GO 67768
67812: POP
67813: POP
// if not tmp then
67814: LD_VAR 0 5
67818: NOT
67819: IFFALSE 67823
// exit ;
67821: GO 67843
// result := SortListByListDesc ( units , tmp ) ;
67823: LD_ADDR_VAR 0 3
67827: PUSH
67828: LD_VAR 0 1
67832: PPUSH
67833: LD_VAR 0 5
67837: PPUSH
67838: CALL_OW 77
67842: ST_TO_ADDR
// end ;
67843: LD_VAR 0 3
67847: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67848: LD_INT 0
67850: PPUSH
67851: PPUSH
67852: PPUSH
// result := false ;
67853: LD_ADDR_VAR 0 3
67857: PUSH
67858: LD_INT 0
67860: ST_TO_ADDR
// x := GetX ( building ) ;
67861: LD_ADDR_VAR 0 4
67865: PUSH
67866: LD_VAR 0 2
67870: PPUSH
67871: CALL_OW 250
67875: ST_TO_ADDR
// y := GetY ( building ) ;
67876: LD_ADDR_VAR 0 5
67880: PUSH
67881: LD_VAR 0 2
67885: PPUSH
67886: CALL_OW 251
67890: ST_TO_ADDR
// if not building or not x or not y then
67891: LD_VAR 0 2
67895: NOT
67896: PUSH
67897: LD_VAR 0 4
67901: NOT
67902: OR
67903: PUSH
67904: LD_VAR 0 5
67908: NOT
67909: OR
67910: IFFALSE 67914
// exit ;
67912: GO 68006
// if GetTaskList ( unit ) then
67914: LD_VAR 0 1
67918: PPUSH
67919: CALL_OW 437
67923: IFFALSE 68006
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67925: LD_STRING e
67927: PUSH
67928: LD_VAR 0 1
67932: PPUSH
67933: CALL_OW 437
67937: PUSH
67938: LD_INT 1
67940: ARRAY
67941: PUSH
67942: LD_INT 1
67944: ARRAY
67945: EQUAL
67946: PUSH
67947: LD_VAR 0 4
67951: PUSH
67952: LD_VAR 0 1
67956: PPUSH
67957: CALL_OW 437
67961: PUSH
67962: LD_INT 1
67964: ARRAY
67965: PUSH
67966: LD_INT 2
67968: ARRAY
67969: EQUAL
67970: AND
67971: PUSH
67972: LD_VAR 0 5
67976: PUSH
67977: LD_VAR 0 1
67981: PPUSH
67982: CALL_OW 437
67986: PUSH
67987: LD_INT 1
67989: ARRAY
67990: PUSH
67991: LD_INT 3
67993: ARRAY
67994: EQUAL
67995: AND
67996: IFFALSE 68006
// result := true end ;
67998: LD_ADDR_VAR 0 3
68002: PUSH
68003: LD_INT 1
68005: ST_TO_ADDR
// end ;
68006: LD_VAR 0 3
68010: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68011: LD_INT 0
68013: PPUSH
// result := false ;
68014: LD_ADDR_VAR 0 4
68018: PUSH
68019: LD_INT 0
68021: ST_TO_ADDR
// if GetTaskList ( unit ) then
68022: LD_VAR 0 1
68026: PPUSH
68027: CALL_OW 437
68031: IFFALSE 68114
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68033: LD_STRING M
68035: PUSH
68036: LD_VAR 0 1
68040: PPUSH
68041: CALL_OW 437
68045: PUSH
68046: LD_INT 1
68048: ARRAY
68049: PUSH
68050: LD_INT 1
68052: ARRAY
68053: EQUAL
68054: PUSH
68055: LD_VAR 0 2
68059: PUSH
68060: LD_VAR 0 1
68064: PPUSH
68065: CALL_OW 437
68069: PUSH
68070: LD_INT 1
68072: ARRAY
68073: PUSH
68074: LD_INT 2
68076: ARRAY
68077: EQUAL
68078: AND
68079: PUSH
68080: LD_VAR 0 3
68084: PUSH
68085: LD_VAR 0 1
68089: PPUSH
68090: CALL_OW 437
68094: PUSH
68095: LD_INT 1
68097: ARRAY
68098: PUSH
68099: LD_INT 3
68101: ARRAY
68102: EQUAL
68103: AND
68104: IFFALSE 68114
// result := true ;
68106: LD_ADDR_VAR 0 4
68110: PUSH
68111: LD_INT 1
68113: ST_TO_ADDR
// end ; end ;
68114: LD_VAR 0 4
68118: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68119: LD_INT 0
68121: PPUSH
68122: PPUSH
68123: PPUSH
68124: PPUSH
// if not unit or not area then
68125: LD_VAR 0 1
68129: NOT
68130: PUSH
68131: LD_VAR 0 2
68135: NOT
68136: OR
68137: IFFALSE 68141
// exit ;
68139: GO 68305
// tmp := AreaToList ( area , i ) ;
68141: LD_ADDR_VAR 0 6
68145: PUSH
68146: LD_VAR 0 2
68150: PPUSH
68151: LD_VAR 0 5
68155: PPUSH
68156: CALL_OW 517
68160: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68161: LD_ADDR_VAR 0 5
68165: PUSH
68166: DOUBLE
68167: LD_INT 1
68169: DEC
68170: ST_TO_ADDR
68171: LD_VAR 0 6
68175: PUSH
68176: LD_INT 1
68178: ARRAY
68179: PUSH
68180: FOR_TO
68181: IFFALSE 68303
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68183: LD_ADDR_VAR 0 7
68187: PUSH
68188: LD_VAR 0 6
68192: PUSH
68193: LD_INT 1
68195: ARRAY
68196: PUSH
68197: LD_VAR 0 5
68201: ARRAY
68202: PUSH
68203: LD_VAR 0 6
68207: PUSH
68208: LD_INT 2
68210: ARRAY
68211: PUSH
68212: LD_VAR 0 5
68216: ARRAY
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
68222: LD_VAR 0 7
68226: PUSH
68227: LD_INT 1
68229: ARRAY
68230: PPUSH
68231: LD_VAR 0 7
68235: PUSH
68236: LD_INT 2
68238: ARRAY
68239: PPUSH
68240: CALL_OW 428
68244: PUSH
68245: LD_INT 0
68247: EQUAL
68248: IFFALSE 68301
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68250: LD_VAR 0 1
68254: PPUSH
68255: LD_VAR 0 7
68259: PUSH
68260: LD_INT 1
68262: ARRAY
68263: PPUSH
68264: LD_VAR 0 7
68268: PUSH
68269: LD_INT 2
68271: ARRAY
68272: PPUSH
68273: LD_VAR 0 3
68277: PPUSH
68278: CALL_OW 48
// result := IsPlaced ( unit ) ;
68282: LD_ADDR_VAR 0 4
68286: PUSH
68287: LD_VAR 0 1
68291: PPUSH
68292: CALL_OW 305
68296: ST_TO_ADDR
// exit ;
68297: POP
68298: POP
68299: GO 68305
// end ; end ;
68301: GO 68180
68303: POP
68304: POP
// end ;
68305: LD_VAR 0 4
68309: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68310: LD_INT 0
68312: PPUSH
68313: PPUSH
68314: PPUSH
// if not side or side > 8 then
68315: LD_VAR 0 1
68319: NOT
68320: PUSH
68321: LD_VAR 0 1
68325: PUSH
68326: LD_INT 8
68328: GREATER
68329: OR
68330: IFFALSE 68334
// exit ;
68332: GO 68521
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68334: LD_ADDR_VAR 0 4
68338: PUSH
68339: LD_INT 22
68341: PUSH
68342: LD_VAR 0 1
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PUSH
68351: LD_INT 21
68353: PUSH
68354: LD_INT 3
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PPUSH
68365: CALL_OW 69
68369: ST_TO_ADDR
// if not tmp then
68370: LD_VAR 0 4
68374: NOT
68375: IFFALSE 68379
// exit ;
68377: GO 68521
// enable_addtolog := true ;
68379: LD_ADDR_OWVAR 81
68383: PUSH
68384: LD_INT 1
68386: ST_TO_ADDR
// AddToLog ( [ ) ;
68387: LD_STRING [
68389: PPUSH
68390: CALL_OW 561
// for i in tmp do
68394: LD_ADDR_VAR 0 3
68398: PUSH
68399: LD_VAR 0 4
68403: PUSH
68404: FOR_IN
68405: IFFALSE 68512
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68407: LD_STRING [
68409: PUSH
68410: LD_VAR 0 3
68414: PPUSH
68415: CALL_OW 266
68419: STR
68420: PUSH
68421: LD_STRING , 
68423: STR
68424: PUSH
68425: LD_VAR 0 3
68429: PPUSH
68430: CALL_OW 250
68434: STR
68435: PUSH
68436: LD_STRING , 
68438: STR
68439: PUSH
68440: LD_VAR 0 3
68444: PPUSH
68445: CALL_OW 251
68449: STR
68450: PUSH
68451: LD_STRING , 
68453: STR
68454: PUSH
68455: LD_VAR 0 3
68459: PPUSH
68460: CALL_OW 254
68464: STR
68465: PUSH
68466: LD_STRING , 
68468: STR
68469: PUSH
68470: LD_VAR 0 3
68474: PPUSH
68475: LD_INT 1
68477: PPUSH
68478: CALL_OW 268
68482: STR
68483: PUSH
68484: LD_STRING , 
68486: STR
68487: PUSH
68488: LD_VAR 0 3
68492: PPUSH
68493: LD_INT 2
68495: PPUSH
68496: CALL_OW 268
68500: STR
68501: PUSH
68502: LD_STRING ],
68504: STR
68505: PPUSH
68506: CALL_OW 561
// end ;
68510: GO 68404
68512: POP
68513: POP
// AddToLog ( ]; ) ;
68514: LD_STRING ];
68516: PPUSH
68517: CALL_OW 561
// end ;
68521: LD_VAR 0 2
68525: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68526: LD_INT 0
68528: PPUSH
68529: PPUSH
68530: PPUSH
68531: PPUSH
68532: PPUSH
// if not area or not rate or not max then
68533: LD_VAR 0 1
68537: NOT
68538: PUSH
68539: LD_VAR 0 2
68543: NOT
68544: OR
68545: PUSH
68546: LD_VAR 0 4
68550: NOT
68551: OR
68552: IFFALSE 68556
// exit ;
68554: GO 68748
// while 1 do
68556: LD_INT 1
68558: IFFALSE 68748
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68560: LD_ADDR_VAR 0 9
68564: PUSH
68565: LD_VAR 0 1
68569: PPUSH
68570: LD_INT 1
68572: PPUSH
68573: CALL_OW 287
68577: PUSH
68578: LD_INT 10
68580: MUL
68581: ST_TO_ADDR
// r := rate / 10 ;
68582: LD_ADDR_VAR 0 7
68586: PUSH
68587: LD_VAR 0 2
68591: PUSH
68592: LD_INT 10
68594: DIVREAL
68595: ST_TO_ADDR
// time := 1 1$00 ;
68596: LD_ADDR_VAR 0 8
68600: PUSH
68601: LD_INT 2100
68603: ST_TO_ADDR
// if amount < min then
68604: LD_VAR 0 9
68608: PUSH
68609: LD_VAR 0 3
68613: LESS
68614: IFFALSE 68632
// r := r * 2 else
68616: LD_ADDR_VAR 0 7
68620: PUSH
68621: LD_VAR 0 7
68625: PUSH
68626: LD_INT 2
68628: MUL
68629: ST_TO_ADDR
68630: GO 68658
// if amount > max then
68632: LD_VAR 0 9
68636: PUSH
68637: LD_VAR 0 4
68641: GREATER
68642: IFFALSE 68658
// r := r / 2 ;
68644: LD_ADDR_VAR 0 7
68648: PUSH
68649: LD_VAR 0 7
68653: PUSH
68654: LD_INT 2
68656: DIVREAL
68657: ST_TO_ADDR
// time := time / r ;
68658: LD_ADDR_VAR 0 8
68662: PUSH
68663: LD_VAR 0 8
68667: PUSH
68668: LD_VAR 0 7
68672: DIVREAL
68673: ST_TO_ADDR
// if time < 0 then
68674: LD_VAR 0 8
68678: PUSH
68679: LD_INT 0
68681: LESS
68682: IFFALSE 68699
// time := time * - 1 ;
68684: LD_ADDR_VAR 0 8
68688: PUSH
68689: LD_VAR 0 8
68693: PUSH
68694: LD_INT 1
68696: NEG
68697: MUL
68698: ST_TO_ADDR
// wait ( time ) ;
68699: LD_VAR 0 8
68703: PPUSH
68704: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
68708: LD_INT 35
68710: PPUSH
68711: LD_INT 875
68713: PPUSH
68714: CALL_OW 12
68718: PPUSH
68719: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68723: LD_INT 1
68725: PPUSH
68726: LD_INT 5
68728: PPUSH
68729: CALL_OW 12
68733: PPUSH
68734: LD_VAR 0 1
68738: PPUSH
68739: LD_INT 1
68741: PPUSH
68742: CALL_OW 55
// end ;
68746: GO 68556
// end ;
68748: LD_VAR 0 5
68752: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68753: LD_INT 0
68755: PPUSH
68756: PPUSH
68757: PPUSH
68758: PPUSH
68759: PPUSH
68760: PPUSH
68761: PPUSH
68762: PPUSH
// if not turrets or not factories then
68763: LD_VAR 0 1
68767: NOT
68768: PUSH
68769: LD_VAR 0 2
68773: NOT
68774: OR
68775: IFFALSE 68779
// exit ;
68777: GO 69086
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68779: LD_ADDR_VAR 0 10
68783: PUSH
68784: LD_INT 5
68786: PUSH
68787: LD_INT 6
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 2
68796: PUSH
68797: LD_INT 4
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 3
68806: PUSH
68807: LD_INT 5
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: LIST
68818: PUSH
68819: LD_INT 24
68821: PUSH
68822: LD_INT 25
68824: PUSH
68825: EMPTY
68826: LIST
68827: LIST
68828: PUSH
68829: LD_INT 23
68831: PUSH
68832: LD_INT 27
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: LD_INT 42
68845: PUSH
68846: LD_INT 43
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: PUSH
68853: LD_INT 44
68855: PUSH
68856: LD_INT 46
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: LD_INT 45
68865: PUSH
68866: LD_INT 47
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: LIST
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: LIST
68882: ST_TO_ADDR
// result := [ ] ;
68883: LD_ADDR_VAR 0 3
68887: PUSH
68888: EMPTY
68889: ST_TO_ADDR
// for i in turrets do
68890: LD_ADDR_VAR 0 4
68894: PUSH
68895: LD_VAR 0 1
68899: PUSH
68900: FOR_IN
68901: IFFALSE 69084
// begin nat := GetNation ( i ) ;
68903: LD_ADDR_VAR 0 7
68907: PUSH
68908: LD_VAR 0 4
68912: PPUSH
68913: CALL_OW 248
68917: ST_TO_ADDR
// weapon := 0 ;
68918: LD_ADDR_VAR 0 8
68922: PUSH
68923: LD_INT 0
68925: ST_TO_ADDR
// if not nat then
68926: LD_VAR 0 7
68930: NOT
68931: IFFALSE 68935
// continue ;
68933: GO 68900
// for j in list [ nat ] do
68935: LD_ADDR_VAR 0 5
68939: PUSH
68940: LD_VAR 0 10
68944: PUSH
68945: LD_VAR 0 7
68949: ARRAY
68950: PUSH
68951: FOR_IN
68952: IFFALSE 68993
// if GetBWeapon ( i ) = j [ 1 ] then
68954: LD_VAR 0 4
68958: PPUSH
68959: CALL_OW 269
68963: PUSH
68964: LD_VAR 0 5
68968: PUSH
68969: LD_INT 1
68971: ARRAY
68972: EQUAL
68973: IFFALSE 68991
// begin weapon := j [ 2 ] ;
68975: LD_ADDR_VAR 0 8
68979: PUSH
68980: LD_VAR 0 5
68984: PUSH
68985: LD_INT 2
68987: ARRAY
68988: ST_TO_ADDR
// break ;
68989: GO 68993
// end ;
68991: GO 68951
68993: POP
68994: POP
// if not weapon then
68995: LD_VAR 0 8
68999: NOT
69000: IFFALSE 69004
// continue ;
69002: GO 68900
// for k in factories do
69004: LD_ADDR_VAR 0 6
69008: PUSH
69009: LD_VAR 0 2
69013: PUSH
69014: FOR_IN
69015: IFFALSE 69080
// begin weapons := AvailableWeaponList ( k ) ;
69017: LD_ADDR_VAR 0 9
69021: PUSH
69022: LD_VAR 0 6
69026: PPUSH
69027: CALL_OW 478
69031: ST_TO_ADDR
// if not weapons then
69032: LD_VAR 0 9
69036: NOT
69037: IFFALSE 69041
// continue ;
69039: GO 69014
// if weapon in weapons then
69041: LD_VAR 0 8
69045: PUSH
69046: LD_VAR 0 9
69050: IN
69051: IFFALSE 69078
// begin result := [ i , weapon ] ;
69053: LD_ADDR_VAR 0 3
69057: PUSH
69058: LD_VAR 0 4
69062: PUSH
69063: LD_VAR 0 8
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: ST_TO_ADDR
// exit ;
69072: POP
69073: POP
69074: POP
69075: POP
69076: GO 69086
// end ; end ;
69078: GO 69014
69080: POP
69081: POP
// end ;
69082: GO 68900
69084: POP
69085: POP
// end ;
69086: LD_VAR 0 3
69090: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69091: LD_INT 0
69093: PPUSH
// if not side or side > 8 then
69094: LD_VAR 0 3
69098: NOT
69099: PUSH
69100: LD_VAR 0 3
69104: PUSH
69105: LD_INT 8
69107: GREATER
69108: OR
69109: IFFALSE 69113
// exit ;
69111: GO 69172
// if not range then
69113: LD_VAR 0 4
69117: NOT
69118: IFFALSE 69129
// range := - 12 ;
69120: LD_ADDR_VAR 0 4
69124: PUSH
69125: LD_INT 12
69127: NEG
69128: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69129: LD_VAR 0 1
69133: PPUSH
69134: LD_VAR 0 2
69138: PPUSH
69139: LD_VAR 0 3
69143: PPUSH
69144: LD_VAR 0 4
69148: PPUSH
69149: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69153: LD_VAR 0 1
69157: PPUSH
69158: LD_VAR 0 2
69162: PPUSH
69163: LD_VAR 0 3
69167: PPUSH
69168: CALL_OW 331
// end ;
69172: LD_VAR 0 5
69176: RET
// export function Video ( mode ) ; begin
69177: LD_INT 0
69179: PPUSH
// ingame_video = mode ;
69180: LD_ADDR_OWVAR 52
69184: PUSH
69185: LD_VAR 0 1
69189: ST_TO_ADDR
// interface_hidden = mode ;
69190: LD_ADDR_OWVAR 54
69194: PUSH
69195: LD_VAR 0 1
69199: ST_TO_ADDR
// end ;
69200: LD_VAR 0 2
69204: RET
// export function Join ( array , element ) ; begin
69205: LD_INT 0
69207: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69208: LD_ADDR_VAR 0 3
69212: PUSH
69213: LD_VAR 0 1
69217: PPUSH
69218: LD_VAR 0 1
69222: PUSH
69223: LD_INT 1
69225: PLUS
69226: PPUSH
69227: LD_VAR 0 2
69231: PPUSH
69232: CALL_OW 1
69236: ST_TO_ADDR
// end ;
69237: LD_VAR 0 3
69241: RET
// export function JoinUnion ( array , element ) ; begin
69242: LD_INT 0
69244: PPUSH
// result := array union element ;
69245: LD_ADDR_VAR 0 3
69249: PUSH
69250: LD_VAR 0 1
69254: PUSH
69255: LD_VAR 0 2
69259: UNION
69260: ST_TO_ADDR
// end ;
69261: LD_VAR 0 3
69265: RET
// export function GetBehemoths ( side ) ; begin
69266: LD_INT 0
69268: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
69269: LD_ADDR_VAR 0 2
69273: PUSH
69274: LD_INT 22
69276: PUSH
69277: LD_VAR 0 1
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: LD_INT 31
69288: PUSH
69289: LD_INT 25
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: PPUSH
69300: CALL_OW 69
69304: ST_TO_ADDR
// end ;
69305: LD_VAR 0 2
69309: RET
// export function Shuffle ( array ) ; var i , index ; begin
69310: LD_INT 0
69312: PPUSH
69313: PPUSH
69314: PPUSH
// result := [ ] ;
69315: LD_ADDR_VAR 0 2
69319: PUSH
69320: EMPTY
69321: ST_TO_ADDR
// if not array then
69322: LD_VAR 0 1
69326: NOT
69327: IFFALSE 69331
// exit ;
69329: GO 69430
// Randomize ;
69331: CALL_OW 10
// for i = array downto 1 do
69335: LD_ADDR_VAR 0 3
69339: PUSH
69340: DOUBLE
69341: LD_VAR 0 1
69345: INC
69346: ST_TO_ADDR
69347: LD_INT 1
69349: PUSH
69350: FOR_DOWNTO
69351: IFFALSE 69428
// begin index := rand ( 1 , array ) ;
69353: LD_ADDR_VAR 0 4
69357: PUSH
69358: LD_INT 1
69360: PPUSH
69361: LD_VAR 0 1
69365: PPUSH
69366: CALL_OW 12
69370: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69371: LD_ADDR_VAR 0 2
69375: PUSH
69376: LD_VAR 0 2
69380: PPUSH
69381: LD_VAR 0 2
69385: PUSH
69386: LD_INT 1
69388: PLUS
69389: PPUSH
69390: LD_VAR 0 1
69394: PUSH
69395: LD_VAR 0 4
69399: ARRAY
69400: PPUSH
69401: CALL_OW 2
69405: ST_TO_ADDR
// array := Delete ( array , index ) ;
69406: LD_ADDR_VAR 0 1
69410: PUSH
69411: LD_VAR 0 1
69415: PPUSH
69416: LD_VAR 0 4
69420: PPUSH
69421: CALL_OW 3
69425: ST_TO_ADDR
// end ;
69426: GO 69350
69428: POP
69429: POP
// end ;
69430: LD_VAR 0 2
69434: RET
// export function GetBaseMaterials ( base ) ; begin
69435: LD_INT 0
69437: PPUSH
// result := [ 0 , 0 , 0 ] ;
69438: LD_ADDR_VAR 0 2
69442: PUSH
69443: LD_INT 0
69445: PUSH
69446: LD_INT 0
69448: PUSH
69449: LD_INT 0
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: LIST
69456: ST_TO_ADDR
// if not base then
69457: LD_VAR 0 1
69461: NOT
69462: IFFALSE 69466
// exit ;
69464: GO 69515
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69466: LD_ADDR_VAR 0 2
69470: PUSH
69471: LD_VAR 0 1
69475: PPUSH
69476: LD_INT 1
69478: PPUSH
69479: CALL_OW 275
69483: PUSH
69484: LD_VAR 0 1
69488: PPUSH
69489: LD_INT 2
69491: PPUSH
69492: CALL_OW 275
69496: PUSH
69497: LD_VAR 0 1
69501: PPUSH
69502: LD_INT 3
69504: PPUSH
69505: CALL_OW 275
69509: PUSH
69510: EMPTY
69511: LIST
69512: LIST
69513: LIST
69514: ST_TO_ADDR
// end ;
69515: LD_VAR 0 2
69519: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69520: LD_INT 0
69522: PPUSH
69523: PPUSH
// result := array ;
69524: LD_ADDR_VAR 0 3
69528: PUSH
69529: LD_VAR 0 1
69533: ST_TO_ADDR
// if size > 0 then
69534: LD_VAR 0 2
69538: PUSH
69539: LD_INT 0
69541: GREATER
69542: IFFALSE 69588
// for i := array downto size do
69544: LD_ADDR_VAR 0 4
69548: PUSH
69549: DOUBLE
69550: LD_VAR 0 1
69554: INC
69555: ST_TO_ADDR
69556: LD_VAR 0 2
69560: PUSH
69561: FOR_DOWNTO
69562: IFFALSE 69586
// result := Delete ( result , result ) ;
69564: LD_ADDR_VAR 0 3
69568: PUSH
69569: LD_VAR 0 3
69573: PPUSH
69574: LD_VAR 0 3
69578: PPUSH
69579: CALL_OW 3
69583: ST_TO_ADDR
69584: GO 69561
69586: POP
69587: POP
// end ;
69588: LD_VAR 0 3
69592: RET
// export function ComExit ( unit ) ; var tmp ; begin
69593: LD_INT 0
69595: PPUSH
69596: PPUSH
// if not IsInUnit ( unit ) then
69597: LD_VAR 0 1
69601: PPUSH
69602: CALL_OW 310
69606: NOT
69607: IFFALSE 69611
// exit ;
69609: GO 69671
// tmp := IsInUnit ( unit ) ;
69611: LD_ADDR_VAR 0 3
69615: PUSH
69616: LD_VAR 0 1
69620: PPUSH
69621: CALL_OW 310
69625: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69626: LD_VAR 0 3
69630: PPUSH
69631: CALL_OW 247
69635: PUSH
69636: LD_INT 2
69638: EQUAL
69639: IFFALSE 69652
// ComExitVehicle ( unit ) else
69641: LD_VAR 0 1
69645: PPUSH
69646: CALL_OW 121
69650: GO 69661
// ComExitBuilding ( unit ) ;
69652: LD_VAR 0 1
69656: PPUSH
69657: CALL_OW 122
// result := tmp ;
69661: LD_ADDR_VAR 0 2
69665: PUSH
69666: LD_VAR 0 3
69670: ST_TO_ADDR
// end ;
69671: LD_VAR 0 2
69675: RET
// export function ResetHc ; begin
69676: LD_INT 0
69678: PPUSH
// InitHc ;
69679: CALL_OW 19
// hc_importance := 0 ;
69683: LD_ADDR_OWVAR 32
69687: PUSH
69688: LD_INT 0
69690: ST_TO_ADDR
// end ;
69691: LD_VAR 0 1
69695: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69696: LD_INT 0
69698: PPUSH
69699: PPUSH
69700: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69701: LD_ADDR_VAR 0 6
69705: PUSH
69706: LD_VAR 0 1
69710: PUSH
69711: LD_VAR 0 3
69715: PLUS
69716: PUSH
69717: LD_INT 2
69719: DIV
69720: ST_TO_ADDR
// if _x < 0 then
69721: LD_VAR 0 6
69725: PUSH
69726: LD_INT 0
69728: LESS
69729: IFFALSE 69746
// _x := _x * - 1 ;
69731: LD_ADDR_VAR 0 6
69735: PUSH
69736: LD_VAR 0 6
69740: PUSH
69741: LD_INT 1
69743: NEG
69744: MUL
69745: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69746: LD_ADDR_VAR 0 7
69750: PUSH
69751: LD_VAR 0 2
69755: PUSH
69756: LD_VAR 0 4
69760: PLUS
69761: PUSH
69762: LD_INT 2
69764: DIV
69765: ST_TO_ADDR
// if _y < 0 then
69766: LD_VAR 0 7
69770: PUSH
69771: LD_INT 0
69773: LESS
69774: IFFALSE 69791
// _y := _y * - 1 ;
69776: LD_ADDR_VAR 0 7
69780: PUSH
69781: LD_VAR 0 7
69785: PUSH
69786: LD_INT 1
69788: NEG
69789: MUL
69790: ST_TO_ADDR
// result := [ _x , _y ] ;
69791: LD_ADDR_VAR 0 5
69795: PUSH
69796: LD_VAR 0 6
69800: PUSH
69801: LD_VAR 0 7
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: ST_TO_ADDR
// end ;
69810: LD_VAR 0 5
69814: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69815: LD_INT 0
69817: PPUSH
69818: PPUSH
69819: PPUSH
69820: PPUSH
// task := GetTaskList ( unit ) ;
69821: LD_ADDR_VAR 0 7
69825: PUSH
69826: LD_VAR 0 1
69830: PPUSH
69831: CALL_OW 437
69835: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69836: LD_VAR 0 7
69840: NOT
69841: PUSH
69842: LD_VAR 0 1
69846: PPUSH
69847: LD_VAR 0 2
69851: PPUSH
69852: CALL_OW 308
69856: NOT
69857: AND
69858: IFFALSE 69862
// exit ;
69860: GO 69980
// if IsInArea ( unit , area ) then
69862: LD_VAR 0 1
69866: PPUSH
69867: LD_VAR 0 2
69871: PPUSH
69872: CALL_OW 308
69876: IFFALSE 69894
// begin ComMoveToArea ( unit , goAway ) ;
69878: LD_VAR 0 1
69882: PPUSH
69883: LD_VAR 0 3
69887: PPUSH
69888: CALL_OW 113
// exit ;
69892: GO 69980
// end ; if task [ 1 ] [ 1 ] <> M then
69894: LD_VAR 0 7
69898: PUSH
69899: LD_INT 1
69901: ARRAY
69902: PUSH
69903: LD_INT 1
69905: ARRAY
69906: PUSH
69907: LD_STRING M
69909: NONEQUAL
69910: IFFALSE 69914
// exit ;
69912: GO 69980
// x := task [ 1 ] [ 2 ] ;
69914: LD_ADDR_VAR 0 5
69918: PUSH
69919: LD_VAR 0 7
69923: PUSH
69924: LD_INT 1
69926: ARRAY
69927: PUSH
69928: LD_INT 2
69930: ARRAY
69931: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69932: LD_ADDR_VAR 0 6
69936: PUSH
69937: LD_VAR 0 7
69941: PUSH
69942: LD_INT 1
69944: ARRAY
69945: PUSH
69946: LD_INT 3
69948: ARRAY
69949: ST_TO_ADDR
// if InArea ( x , y , area ) then
69950: LD_VAR 0 5
69954: PPUSH
69955: LD_VAR 0 6
69959: PPUSH
69960: LD_VAR 0 2
69964: PPUSH
69965: CALL_OW 309
69969: IFFALSE 69980
// ComStop ( unit ) ;
69971: LD_VAR 0 1
69975: PPUSH
69976: CALL_OW 141
// end ;
69980: LD_VAR 0 4
69984: RET
// export function Abs ( value ) ; begin
69985: LD_INT 0
69987: PPUSH
// result := value ;
69988: LD_ADDR_VAR 0 2
69992: PUSH
69993: LD_VAR 0 1
69997: ST_TO_ADDR
// if value < 0 then
69998: LD_VAR 0 1
70002: PUSH
70003: LD_INT 0
70005: LESS
70006: IFFALSE 70023
// result := value * - 1 ;
70008: LD_ADDR_VAR 0 2
70012: PUSH
70013: LD_VAR 0 1
70017: PUSH
70018: LD_INT 1
70020: NEG
70021: MUL
70022: ST_TO_ADDR
// end ;
70023: LD_VAR 0 2
70027: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70028: LD_INT 0
70030: PPUSH
70031: PPUSH
70032: PPUSH
70033: PPUSH
70034: PPUSH
70035: PPUSH
70036: PPUSH
70037: PPUSH
// if not unit or not building then
70038: LD_VAR 0 1
70042: NOT
70043: PUSH
70044: LD_VAR 0 2
70048: NOT
70049: OR
70050: IFFALSE 70054
// exit ;
70052: GO 70280
// x := GetX ( building ) ;
70054: LD_ADDR_VAR 0 4
70058: PUSH
70059: LD_VAR 0 2
70063: PPUSH
70064: CALL_OW 250
70068: ST_TO_ADDR
// y := GetY ( building ) ;
70069: LD_ADDR_VAR 0 6
70073: PUSH
70074: LD_VAR 0 2
70078: PPUSH
70079: CALL_OW 251
70083: ST_TO_ADDR
// d := GetDir ( building ) ;
70084: LD_ADDR_VAR 0 8
70088: PUSH
70089: LD_VAR 0 2
70093: PPUSH
70094: CALL_OW 254
70098: ST_TO_ADDR
// r := 4 ;
70099: LD_ADDR_VAR 0 9
70103: PUSH
70104: LD_INT 4
70106: ST_TO_ADDR
// for i := 1 to 5 do
70107: LD_ADDR_VAR 0 10
70111: PUSH
70112: DOUBLE
70113: LD_INT 1
70115: DEC
70116: ST_TO_ADDR
70117: LD_INT 5
70119: PUSH
70120: FOR_TO
70121: IFFALSE 70278
// begin _x := ShiftX ( x , d , r + i ) ;
70123: LD_ADDR_VAR 0 5
70127: PUSH
70128: LD_VAR 0 4
70132: PPUSH
70133: LD_VAR 0 8
70137: PPUSH
70138: LD_VAR 0 9
70142: PUSH
70143: LD_VAR 0 10
70147: PLUS
70148: PPUSH
70149: CALL_OW 272
70153: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70154: LD_ADDR_VAR 0 7
70158: PUSH
70159: LD_VAR 0 6
70163: PPUSH
70164: LD_VAR 0 8
70168: PPUSH
70169: LD_VAR 0 9
70173: PUSH
70174: LD_VAR 0 10
70178: PLUS
70179: PPUSH
70180: CALL_OW 273
70184: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70185: LD_VAR 0 5
70189: PPUSH
70190: LD_VAR 0 7
70194: PPUSH
70195: CALL_OW 488
70199: PUSH
70200: LD_VAR 0 5
70204: PPUSH
70205: LD_VAR 0 7
70209: PPUSH
70210: CALL_OW 428
70214: PPUSH
70215: CALL_OW 247
70219: PUSH
70220: LD_INT 3
70222: PUSH
70223: LD_INT 2
70225: PUSH
70226: EMPTY
70227: LIST
70228: LIST
70229: IN
70230: NOT
70231: AND
70232: IFFALSE 70276
// begin ComMoveXY ( unit , _x , _y ) ;
70234: LD_VAR 0 1
70238: PPUSH
70239: LD_VAR 0 5
70243: PPUSH
70244: LD_VAR 0 7
70248: PPUSH
70249: CALL_OW 111
// result := [ _x , _y ] ;
70253: LD_ADDR_VAR 0 3
70257: PUSH
70258: LD_VAR 0 5
70262: PUSH
70263: LD_VAR 0 7
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: ST_TO_ADDR
// exit ;
70272: POP
70273: POP
70274: GO 70280
// end ; end ;
70276: GO 70120
70278: POP
70279: POP
// end ;
70280: LD_VAR 0 3
70284: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70285: LD_INT 0
70287: PPUSH
70288: PPUSH
70289: PPUSH
// result := 0 ;
70290: LD_ADDR_VAR 0 3
70294: PUSH
70295: LD_INT 0
70297: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70298: LD_VAR 0 1
70302: PUSH
70303: LD_INT 0
70305: LESS
70306: PUSH
70307: LD_VAR 0 1
70311: PUSH
70312: LD_INT 8
70314: GREATER
70315: OR
70316: PUSH
70317: LD_VAR 0 2
70321: PUSH
70322: LD_INT 0
70324: LESS
70325: OR
70326: PUSH
70327: LD_VAR 0 2
70331: PUSH
70332: LD_INT 8
70334: GREATER
70335: OR
70336: IFFALSE 70340
// exit ;
70338: GO 70415
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70340: LD_ADDR_VAR 0 4
70344: PUSH
70345: LD_INT 22
70347: PUSH
70348: LD_VAR 0 2
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: PPUSH
70357: CALL_OW 69
70361: PUSH
70362: FOR_IN
70363: IFFALSE 70413
// begin un := UnitShoot ( i ) ;
70365: LD_ADDR_VAR 0 5
70369: PUSH
70370: LD_VAR 0 4
70374: PPUSH
70375: CALL_OW 504
70379: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70380: LD_VAR 0 5
70384: PPUSH
70385: CALL_OW 255
70389: PUSH
70390: LD_VAR 0 1
70394: EQUAL
70395: IFFALSE 70411
// begin result := un ;
70397: LD_ADDR_VAR 0 3
70401: PUSH
70402: LD_VAR 0 5
70406: ST_TO_ADDR
// exit ;
70407: POP
70408: POP
70409: GO 70415
// end ; end ;
70411: GO 70362
70413: POP
70414: POP
// end ; end_of_file
70415: LD_VAR 0 3
70419: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70420: LD_VAR 0 1
70424: PUSH
70425: LD_INT 200
70427: DOUBLE
70428: GREATEREQUAL
70429: IFFALSE 70437
70431: LD_INT 299
70433: DOUBLE
70434: LESSEQUAL
70435: IFTRUE 70439
70437: GO 70471
70439: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; end ;
70440: LD_VAR 0 1
70444: PPUSH
70445: LD_VAR 0 2
70449: PPUSH
70450: LD_VAR 0 3
70454: PPUSH
70455: LD_VAR 0 4
70459: PPUSH
70460: LD_VAR 0 5
70464: PPUSH
70465: CALL 29333 0 5
70469: GO 70472
70471: POP
// end ;
70472: PPOPN 11
70474: END
