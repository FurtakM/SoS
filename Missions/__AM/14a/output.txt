// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// FogOff ( 7 ) ;
  11: LD_INT 7
  13: PPUSH
  14: CALL_OW 344
// RandomizeAll ;
  18: CALL_OW 11
// InitVariables ;
  22: CALL 66 0 0
// LoadBuildings ;
  26: CALL 94 0 0
// PrepareAlliance ;
  30: CALL 637 0 0
// music_nat := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
  34: LD_ADDR_OWVAR 71
  38: PUSH
  39: LD_INT 1
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: PUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 2
  54: PPUSH
  55: CALL_OW 12
  59: ARRAY
  60: ST_TO_ADDR
// Action ;
  61: CALL 3429 0 0
// end ;
  65: END
// export debug ; export function InitVariables ; begin
  66: LD_INT 0
  68: PPUSH
// debug := false ;
  69: LD_ADDR_EXP 1
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// end ;
  77: LD_VAR 0 1
  81: RET
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
  82: LD_VAR 0 1
  86: PPUSH
  87: CALL 18172 0 1
// end ; end_of_file
  91: PPOPN 1
  93: END
// export function LoadBuildings ; var i , tmp , b , j ; begin
  94: LD_INT 0
  96: PPUSH
  97: PPUSH
  98: PPUSH
  99: PPUSH
 100: PPUSH
// tmp := LoadVariable ( 13a_buildings , [ [ 7 , 1 , b_warehouse , 70 , 46 , 3 , 10 , 0 , 0 , 0 ] ] ) ;
 101: LD_ADDR_VAR 0 3
 105: PUSH
 106: LD_STRING 13a_buildings
 108: PPUSH
 109: LD_INT 7
 111: PUSH
 112: LD_INT 1
 114: PUSH
 115: LD_INT 1
 117: PUSH
 118: LD_INT 70
 120: PUSH
 121: LD_INT 46
 123: PUSH
 124: LD_INT 3
 126: PUSH
 127: LD_INT 10
 129: PUSH
 130: LD_INT 0
 132: PUSH
 133: LD_INT 0
 135: PUSH
 136: LD_INT 0
 138: PUSH
 139: EMPTY
 140: LIST
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: LIST
 150: PUSH
 151: EMPTY
 152: LIST
 153: PPUSH
 154: CALL_OW 30
 158: ST_TO_ADDR
// bc_kind1 := - 1 ;
 159: LD_ADDR_OWVAR 44
 163: PUSH
 164: LD_INT 1
 166: NEG
 167: ST_TO_ADDR
// bc_kind2 := - 1 ;
 168: LD_ADDR_OWVAR 45
 172: PUSH
 173: LD_INT 1
 175: NEG
 176: ST_TO_ADDR
// for i in tmp do
 177: LD_ADDR_VAR 0 2
 181: PUSH
 182: LD_VAR 0 3
 186: PUSH
 187: FOR_IN
 188: IFFALSE 433
// begin uc_side := 7 ;
 190: LD_ADDR_OWVAR 20
 194: PUSH
 195: LD_INT 7
 197: ST_TO_ADDR
// uc_nation := i [ 2 ] ;
 198: LD_ADDR_OWVAR 21
 202: PUSH
 203: LD_VAR 0 2
 207: PUSH
 208: LD_INT 2
 210: ARRAY
 211: ST_TO_ADDR
// if i [ 2 ] = 2 then
 212: LD_VAR 0 2
 216: PUSH
 217: LD_INT 2
 219: ARRAY
 220: PUSH
 221: LD_INT 2
 223: EQUAL
 224: IFFALSE 234
// uc_side := 4 ;
 226: LD_ADDR_OWVAR 20
 230: PUSH
 231: LD_INT 4
 233: ST_TO_ADDR
// bc_type := i [ 3 ] ;
 234: LD_ADDR_OWVAR 42
 238: PUSH
 239: LD_VAR 0 2
 243: PUSH
 244: LD_INT 3
 246: ARRAY
 247: ST_TO_ADDR
// if i [ 3 ] in [ b_oil_mine , b_siberite_mine ] then
 248: LD_VAR 0 2
 252: PUSH
 253: LD_INT 3
 255: ARRAY
 256: PUSH
 257: LD_INT 29
 259: PUSH
 260: LD_INT 30
 262: PUSH
 263: EMPTY
 264: LIST
 265: LIST
 266: IN
 267: IFFALSE 300
// SetResourceVisibility ( i [ 4 ] , i [ 5 ] , i [ 1 ] ) ;
 269: LD_VAR 0 2
 273: PUSH
 274: LD_INT 4
 276: ARRAY
 277: PPUSH
 278: LD_VAR 0 2
 282: PUSH
 283: LD_INT 5
 285: ARRAY
 286: PPUSH
 287: LD_VAR 0 2
 291: PUSH
 292: LD_INT 1
 294: ARRAY
 295: PPUSH
 296: CALL_OW 441
// if i [ 8 ] then
 300: LD_VAR 0 2
 304: PUSH
 305: LD_INT 8
 307: ARRAY
 308: IFFALSE 324
// bc_kind1 := i [ 8 ] ;
 310: LD_ADDR_OWVAR 44
 314: PUSH
 315: LD_VAR 0 2
 319: PUSH
 320: LD_INT 8
 322: ARRAY
 323: ST_TO_ADDR
// if i [ 9 ] then
 324: LD_VAR 0 2
 328: PUSH
 329: LD_INT 9
 331: ARRAY
 332: IFFALSE 348
// bc_kind2 := i [ 9 ] ;
 334: LD_ADDR_OWVAR 45
 338: PUSH
 339: LD_VAR 0 2
 343: PUSH
 344: LD_INT 9
 346: ARRAY
 347: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 4 ] , i [ 5 ] , i [ 6 ] ) ;
 348: LD_ADDR_VAR 0 4
 352: PUSH
 353: LD_VAR 0 2
 357: PUSH
 358: LD_INT 4
 360: ARRAY
 361: PPUSH
 362: LD_VAR 0 2
 366: PUSH
 367: LD_INT 5
 369: ARRAY
 370: PPUSH
 371: LD_VAR 0 2
 375: PUSH
 376: LD_INT 6
 378: ARRAY
 379: PPUSH
 380: CALL_OW 47
 384: ST_TO_ADDR
// SetBLevel ( b , i [ 7 ] ) ;
 385: LD_VAR 0 4
 389: PPUSH
 390: LD_VAR 0 2
 394: PUSH
 395: LD_INT 7
 397: ARRAY
 398: PPUSH
 399: CALL_OW 241
// if i [ 10 ] then
 403: LD_VAR 0 2
 407: PUSH
 408: LD_INT 10
 410: ARRAY
 411: IFFALSE 431
// PlaceWeaponTurret ( b , i [ 10 ] ) ;
 413: LD_VAR 0 4
 417: PPUSH
 418: LD_VAR 0 2
 422: PUSH
 423: LD_INT 10
 425: ARRAY
 426: PPUSH
 427: CALL_OW 431
// end ;
 431: GO 187
 433: POP
 434: POP
// if HexInfo ( 144 , 65 ) = 0 then
 435: LD_INT 144
 437: PPUSH
 438: LD_INT 65
 440: PPUSH
 441: CALL_OW 428
 445: PUSH
 446: LD_INT 0
 448: EQUAL
 449: IFFALSE 486
// begin uc_side := 4 ;
 451: LD_ADDR_OWVAR 20
 455: PUSH
 456: LD_INT 4
 458: ST_TO_ADDR
// bc_type := b_warehouse ;
 459: LD_ADDR_OWVAR 42
 463: PUSH
 464: LD_INT 1
 466: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 144 , 65 , 1 ) ;
 467: LD_ADDR_VAR 0 4
 471: PUSH
 472: LD_INT 144
 474: PPUSH
 475: LD_INT 65
 477: PPUSH
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 47
 485: ST_TO_ADDR
// end ; for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 486: LD_ADDR_VAR 0 2
 490: PUSH
 491: LD_INT 22
 493: PUSH
 494: LD_INT 7
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: PUSH
 501: LD_INT 2
 503: PUSH
 504: LD_INT 30
 506: PUSH
 507: LD_INT 0
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 30
 516: PUSH
 517: LD_INT 1
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PPUSH
 533: CALL_OW 69
 537: PUSH
 538: FOR_IN
 539: IFFALSE 591
// for j = 1 to 3 do
 541: LD_ADDR_VAR 0 5
 545: PUSH
 546: DOUBLE
 547: LD_INT 1
 549: DEC
 550: ST_TO_ADDR
 551: LD_INT 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 587
// SetResourceType ( GetBase ( i ) , j , 3000 / j ) ;
 557: LD_VAR 0 2
 561: PPUSH
 562: CALL_OW 274
 566: PPUSH
 567: LD_VAR 0 5
 571: PPUSH
 572: LD_INT 3000
 574: PUSH
 575: LD_VAR 0 5
 579: DIVREAL
 580: PPUSH
 581: CALL_OW 277
 585: GO 554
 587: POP
 588: POP
 589: GO 538
 591: POP
 592: POP
// for i in FilterUnitsInArea ( spot_area , [ f_side , 7 ] ) do
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: LD_INT 3
 600: PPUSH
 601: LD_INT 22
 603: PUSH
 604: LD_INT 7
 606: PUSH
 607: EMPTY
 608: LIST
 609: LIST
 610: PPUSH
 611: CALL_OW 70
 615: PUSH
 616: FOR_IN
 617: IFFALSE 630
// RemoveUnit ( i ) ;
 619: LD_VAR 0 2
 623: PPUSH
 624: CALL_OW 64
 628: GO 616
 630: POP
 631: POP
// end ; end_of_file
 632: LD_VAR 0 1
 636: RET
// export JMM , Burlak , freedom ; export Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Gossudarov , Kirilenkova , Titov , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov , Belkov , Gnyevko , Masha ; export squad1 , squad2 ; export function PrepareAlliance ; var tmp , i , veh ; begin
 637: LD_INT 0
 639: PPUSH
 640: PPUSH
 641: PPUSH
 642: PPUSH
// uc_side := 7 ;
 643: LD_ADDR_OWVAR 20
 647: PUSH
 648: LD_INT 7
 650: ST_TO_ADDR
// uc_nation := 1 ;
 651: LD_ADDR_OWVAR 21
 655: PUSH
 656: LD_INT 1
 658: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 13a_ ) ;
 659: LD_ADDR_EXP 2
 663: PUSH
 664: LD_STRING JMM
 666: PPUSH
 667: LD_EXP 1
 671: NOT
 672: PPUSH
 673: LD_STRING 13a_
 675: PPUSH
 676: CALL 22071 0 3
 680: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 13a_ ) ;
 681: LD_ADDR_EXP 3
 685: PUSH
 686: LD_STRING Burlak
 688: PPUSH
 689: LD_EXP 1
 693: NOT
 694: PPUSH
 695: LD_STRING 13a_
 697: PPUSH
 698: CALL 22071 0 3
 702: ST_TO_ADDR
// if debug then
 703: LD_EXP 1
 707: IFFALSE 742
// begin PrepareHuman ( sex_male , 4 , 10 ) ;
 709: LD_INT 1
 711: PPUSH
 712: LD_INT 4
 714: PPUSH
 715: LD_INT 10
 717: PPUSH
 718: CALL_OW 380
// JMM := CreateHuman ;
 722: LD_ADDR_EXP 2
 726: PUSH
 727: CALL_OW 44
 731: ST_TO_ADDR
// Burlak := CreateHuman ;
 732: LD_ADDR_EXP 3
 736: PUSH
 737: CALL_OW 44
 741: ST_TO_ADDR
// end ; freedom := FilterUnitsInArea ( freedom_base , [ [ f_side , 7 ] , [ f_or , [ f_nation , 1 ] , [ f_nation , 3 ] ] , [ f_btype , b_warehouse ] ] ) ;
 742: LD_ADDR_EXP 4
 746: PUSH
 747: LD_INT 1
 749: PPUSH
 750: LD_INT 22
 752: PUSH
 753: LD_INT 7
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: LD_INT 2
 762: PUSH
 763: LD_INT 23
 765: PUSH
 766: LD_INT 1
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: PUSH
 773: LD_INT 23
 775: PUSH
 776: LD_INT 3
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PUSH
 783: EMPTY
 784: LIST
 785: LIST
 786: LIST
 787: PUSH
 788: LD_INT 30
 790: PUSH
 791: LD_INT 1
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: PPUSH
 803: CALL_OW 70
 807: ST_TO_ADDR
// if freedom then
 808: LD_EXP 4
 812: IFFALSE 939
// begin freedom := freedom [ 1 ] ;
 814: LD_ADDR_EXP 4
 818: PUSH
 819: LD_EXP 4
 823: PUSH
 824: LD_INT 1
 826: ARRAY
 827: ST_TO_ADDR
// SetBName ( freedom , freedom ) ;
 828: LD_EXP 4
 832: PPUSH
 833: LD_STRING freedom
 835: PPUSH
 836: CALL_OW 500
// CenterNowOnUnits ( freedom ) ;
 840: LD_EXP 4
 844: PPUSH
 845: CALL_OW 87
// PlaceHumanInUnit ( JMM , freedom ) ;
 849: LD_EXP 2
 853: PPUSH
 854: LD_EXP 4
 858: PPUSH
 859: CALL_OW 52
// PlaceHumanInUnit ( Burlak , freedom ) ;
 863: LD_EXP 3
 867: PPUSH
 868: LD_EXP 4
 872: PPUSH
 873: CALL_OW 52
// SetResourceType ( GetBase ( freedom ) , mat_cans , 1000 ) ;
 877: LD_EXP 4
 881: PPUSH
 882: CALL_OW 274
 886: PPUSH
 887: LD_INT 1
 889: PPUSH
 890: LD_INT 1000
 892: PPUSH
 893: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_oil , 400 ) ;
 897: LD_EXP 4
 901: PPUSH
 902: CALL_OW 274
 906: PPUSH
 907: LD_INT 2
 909: PPUSH
 910: LD_INT 400
 912: PPUSH
 913: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_siberit , 30 ) ;
 917: LD_EXP 4
 921: PPUSH
 922: CALL_OW 274
 926: PPUSH
 927: LD_INT 3
 929: PPUSH
 930: LD_INT 30
 932: PPUSH
 933: CALL_OW 277
// end else
 937: GO 1026
// begin PlaceUnitArea ( JMM , freedom_base , false ) ;
 939: LD_EXP 2
 943: PPUSH
 944: LD_INT 1
 946: PPUSH
 947: LD_INT 0
 949: PPUSH
 950: CALL_OW 49
// PlaceUnitXYR ( Burlak , GetX ( JMM ) , GetY ( JMM ) , 8 , false ) ;
 954: LD_EXP 3
 958: PPUSH
 959: LD_EXP 2
 963: PPUSH
 964: CALL_OW 250
 968: PPUSH
 969: LD_EXP 2
 973: PPUSH
 974: CALL_OW 251
 978: PPUSH
 979: LD_INT 8
 981: PPUSH
 982: LD_INT 0
 984: PPUSH
 985: CALL_OW 50
// ComTurnUnit ( JMM , Burlak ) ;
 989: LD_EXP 2
 993: PPUSH
 994: LD_EXP 3
 998: PPUSH
 999: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
1003: LD_EXP 3
1007: PPUSH
1008: LD_EXP 2
1012: PPUSH
1013: CALL_OW 119
// CenterNowOnUnits ( JMM ) ;
1017: LD_EXP 2
1021: PPUSH
1022: CALL_OW 87
// end ; SetClass ( JMM , 2 ) ;
1026: LD_EXP 2
1030: PPUSH
1031: LD_INT 2
1033: PPUSH
1034: CALL_OW 336
// tmp := [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] , [ us_double_gun , us_laser , us_rocket_launcher , us_gatling_gun , us_cargo_bay ] ] ;
1038: LD_ADDR_VAR 0 2
1042: PUSH
1043: LD_INT 2
1045: PUSH
1046: LD_INT 3
1048: PUSH
1049: LD_INT 4
1051: PUSH
1052: LD_INT 5
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 5
1063: PUSH
1064: LD_INT 9
1066: PUSH
1067: LD_INT 7
1069: PUSH
1070: LD_INT 4
1072: PUSH
1073: LD_INT 12
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: ST_TO_ADDR
// for i = 1 to 5 do
1087: LD_ADDR_VAR 0 3
1091: PUSH
1092: DOUBLE
1093: LD_INT 1
1095: DEC
1096: ST_TO_ADDR
1097: LD_INT 5
1099: PUSH
1100: FOR_TO
1101: IFFALSE 1285
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 5 + 1 ] , 100 ) ;
1103: LD_VAR 0 2
1107: PUSH
1108: LD_INT 1
1110: ARRAY
1111: PUSH
1112: LD_VAR 0 3
1116: PUSH
1117: LD_INT 4
1119: MOD
1120: PUSH
1121: LD_INT 1
1123: PLUS
1124: ARRAY
1125: PPUSH
1126: LD_INT 1
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 1
1138: PPUSH
1139: LD_INT 2
1141: PPUSH
1142: CALL_OW 12
1146: ARRAY
1147: PPUSH
1148: LD_INT 1
1150: PPUSH
1151: LD_VAR 0 2
1155: PUSH
1156: LD_INT 2
1158: ARRAY
1159: PUSH
1160: LD_VAR 0 3
1164: PUSH
1165: LD_INT 5
1167: MOD
1168: PUSH
1169: LD_INT 1
1171: PLUS
1172: ARRAY
1173: PPUSH
1174: LD_INT 100
1176: PPUSH
1177: CALL 26935 0 5
// veh := CreateVehicle ;
1181: LD_ADDR_VAR 0 4
1185: PUSH
1186: CALL_OW 45
1190: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1191: LD_VAR 0 4
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_INT 5
1201: PPUSH
1202: CALL_OW 12
1206: PPUSH
1207: CALL_OW 233
// if freedom then
1211: LD_EXP 4
1215: IFFALSE 1248
// begin if IsInArea ( freedom , freedom_base ) then
1217: LD_EXP 4
1221: PPUSH
1222: LD_INT 1
1224: PPUSH
1225: CALL_OW 308
1229: IFFALSE 1246
// PlaceUnitArea ( veh , freedom_base , false ) end else
1231: LD_VAR 0 4
1235: PPUSH
1236: LD_INT 1
1238: PPUSH
1239: LD_INT 0
1241: PPUSH
1242: CALL_OW 49
1246: GO 1283
// PlaceUnitXYR ( veh , GetX ( JMM ) , GetY ( JMM ) , 14 , false ) ;
1248: LD_VAR 0 4
1252: PPUSH
1253: LD_EXP 2
1257: PPUSH
1258: CALL_OW 250
1262: PPUSH
1263: LD_EXP 2
1267: PPUSH
1268: CALL_OW 251
1272: PPUSH
1273: LD_INT 14
1275: PPUSH
1276: LD_INT 0
1278: PPUSH
1279: CALL_OW 50
// end ;
1283: GO 1100
1285: POP
1286: POP
// uc_nation := 3 ;
1287: LD_ADDR_OWVAR 21
1291: PUSH
1292: LD_INT 3
1294: ST_TO_ADDR
// tmp := [ [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] ] ;
1295: LD_ADDR_VAR 0 2
1299: PUSH
1300: LD_INT 21
1302: PUSH
1303: LD_INT 22
1305: PUSH
1306: LD_INT 23
1308: PUSH
1309: LD_INT 24
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: PUSH
1318: LD_INT 43
1320: PUSH
1321: LD_INT 44
1323: PUSH
1324: LD_INT 45
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: ST_TO_ADDR
// for i = 1 to 5 do
1336: LD_ADDR_VAR 0 3
1340: PUSH
1341: DOUBLE
1342: LD_INT 1
1344: DEC
1345: ST_TO_ADDR
1346: LD_INT 5
1348: PUSH
1349: FOR_TO
1350: IFFALSE 1477
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 3 + 1 ] , 100 ) ;
1352: LD_VAR 0 2
1356: PUSH
1357: LD_INT 1
1359: ARRAY
1360: PUSH
1361: LD_VAR 0 3
1365: PUSH
1366: LD_INT 4
1368: MOD
1369: PUSH
1370: LD_INT 1
1372: PLUS
1373: ARRAY
1374: PPUSH
1375: LD_INT 1
1377: PUSH
1378: LD_INT 3
1380: PUSH
1381: EMPTY
1382: LIST
1383: LIST
1384: PUSH
1385: LD_INT 1
1387: PPUSH
1388: LD_INT 2
1390: PPUSH
1391: CALL_OW 12
1395: ARRAY
1396: PPUSH
1397: LD_INT 1
1399: PPUSH
1400: LD_VAR 0 2
1404: PUSH
1405: LD_INT 2
1407: ARRAY
1408: PUSH
1409: LD_VAR 0 3
1413: PUSH
1414: LD_INT 3
1416: MOD
1417: PUSH
1418: LD_INT 1
1420: PLUS
1421: ARRAY
1422: PPUSH
1423: LD_INT 100
1425: PPUSH
1426: CALL 26935 0 5
// veh := CreateVehicle ;
1430: LD_ADDR_VAR 0 4
1434: PUSH
1435: CALL_OW 45
1439: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1440: LD_VAR 0 4
1444: PPUSH
1445: LD_INT 0
1447: PPUSH
1448: LD_INT 5
1450: PPUSH
1451: CALL_OW 12
1455: PPUSH
1456: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1460: LD_VAR 0 4
1464: PPUSH
1465: LD_INT 1
1467: PPUSH
1468: LD_INT 0
1470: PPUSH
1471: CALL_OW 49
// end ;
1475: GO 1349
1477: POP
1478: POP
// if not FilterAllUnits ( [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
1479: LD_INT 2
1481: PUSH
1482: LD_INT 34
1484: PUSH
1485: LD_INT 12
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PUSH
1492: LD_INT 34
1494: PUSH
1495: LD_INT 51
1497: PUSH
1498: EMPTY
1499: LIST
1500: LIST
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: LIST
1506: PPUSH
1507: CALL_OW 69
1511: NOT
1512: IFFALSE 1578
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 ) ;
1514: LD_INT 22
1516: PPUSH
1517: LD_INT 3
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: LD_INT 51
1525: PPUSH
1526: LD_INT 0
1528: PPUSH
1529: CALL 26935 0 5
// veh := CreateVehicle ;
1533: LD_ADDR_VAR 0 4
1537: PUSH
1538: CALL_OW 45
1542: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1543: LD_VAR 0 4
1547: PPUSH
1548: LD_INT 0
1550: PPUSH
1551: LD_INT 5
1553: PPUSH
1554: CALL_OW 12
1558: PPUSH
1559: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1563: LD_VAR 0 4
1567: PPUSH
1568: LD_INT 1
1570: PPUSH
1571: LD_INT 0
1573: PPUSH
1574: CALL_OW 49
// end ; tmp := LoadVariable ( 13a_Masha , [ ] ) ;
1578: LD_ADDR_VAR 0 2
1582: PUSH
1583: LD_STRING 13a_Masha
1585: PPUSH
1586: EMPTY
1587: PPUSH
1588: CALL_OW 30
1592: ST_TO_ADDR
// if tmp then
1593: LD_VAR 0 2
1597: IFFALSE 1680
// begin PrepareVehicle ( tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] , 100 ) ;
1599: LD_VAR 0 2
1603: PUSH
1604: LD_INT 1
1606: ARRAY
1607: PPUSH
1608: LD_VAR 0 2
1612: PUSH
1613: LD_INT 2
1615: ARRAY
1616: PPUSH
1617: LD_VAR 0 2
1621: PUSH
1622: LD_INT 3
1624: ARRAY
1625: PPUSH
1626: LD_VAR 0 2
1630: PUSH
1631: LD_INT 4
1633: ARRAY
1634: PPUSH
1635: LD_INT 100
1637: PPUSH
1638: CALL 26935 0 5
// Masha := CreateVehicle ;
1642: LD_ADDR_EXP 36
1646: PUSH
1647: CALL_OW 45
1651: ST_TO_ADDR
// PlaceUnitArea ( Masha , freedom_base , false ) ;
1652: LD_EXP 36
1656: PPUSH
1657: LD_INT 1
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 49
// SetMark ( Masha , - 7 ) ;
1667: LD_EXP 36
1671: PPUSH
1672: LD_INT 7
1674: NEG
1675: PPUSH
1676: CALL_OW 242
// end ; uc_side := 4 ;
1680: LD_ADDR_OWVAR 20
1684: PUSH
1685: LD_INT 4
1687: ST_TO_ADDR
// tmp := [ ] ;
1688: LD_ADDR_VAR 0 2
1692: PUSH
1693: EMPTY
1694: ST_TO_ADDR
// squad1 := [ ] ;
1695: LD_ADDR_EXP 37
1699: PUSH
1700: EMPTY
1701: ST_TO_ADDR
// squad2 := [ ] ;
1702: LD_ADDR_EXP 38
1706: PUSH
1707: EMPTY
1708: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
1709: LD_ADDR_EXP 19
1713: PUSH
1714: LD_STRING Joan
1716: PPUSH
1717: LD_EXP 1
1721: NOT
1722: PPUSH
1723: LD_STRING 13a_
1725: PPUSH
1726: CALL 22071 0 3
1730: ST_TO_ADDR
// if Joan then
1731: LD_EXP 19
1735: IFFALSE 1753
// tmp := tmp ^ Joan ;
1737: LD_ADDR_VAR 0 2
1741: PUSH
1742: LD_VAR 0 2
1746: PUSH
1747: LD_EXP 19
1751: ADD
1752: ST_TO_ADDR
// Roth := PrepareUnit ( Roth , ( not debug ) , 13a_ ) ;
1753: LD_ADDR_EXP 5
1757: PUSH
1758: LD_STRING Roth
1760: PPUSH
1761: LD_EXP 1
1765: NOT
1766: PPUSH
1767: LD_STRING 13a_
1769: PPUSH
1770: CALL 22071 0 3
1774: ST_TO_ADDR
// if Roth then
1775: LD_EXP 5
1779: IFFALSE 1797
// tmp := tmp ^ Roth ;
1781: LD_ADDR_VAR 0 2
1785: PUSH
1786: LD_VAR 0 2
1790: PUSH
1791: LD_EXP 5
1795: ADD
1796: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 13a_ ) ;
1797: LD_ADDR_EXP 10
1801: PUSH
1802: LD_STRING Denis
1804: PPUSH
1805: LD_EXP 1
1809: NOT
1810: PPUSH
1811: LD_STRING 13a_
1813: PPUSH
1814: CALL 22071 0 3
1818: ST_TO_ADDR
// if Denis then
1819: LD_EXP 10
1823: IFFALSE 1841
// tmp := tmp ^ Denis ;
1825: LD_ADDR_VAR 0 2
1829: PUSH
1830: LD_VAR 0 2
1834: PUSH
1835: LD_EXP 10
1839: ADD
1840: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 13a_ ) ;
1841: LD_ADDR_EXP 20
1845: PUSH
1846: LD_STRING DeltaDoctor
1848: PPUSH
1849: LD_EXP 1
1853: NOT
1854: PPUSH
1855: LD_STRING 13a_
1857: PPUSH
1858: CALL 22071 0 3
1862: ST_TO_ADDR
// if DeltaDoctor then
1863: LD_EXP 20
1867: IFFALSE 1885
// tmp := tmp ^ DeltaDoctor ;
1869: LD_ADDR_VAR 0 2
1873: PUSH
1874: LD_VAR 0 2
1878: PUSH
1879: LD_EXP 20
1883: ADD
1884: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 13a_ ) ;
1885: LD_ADDR_EXP 18
1889: PUSH
1890: LD_STRING Simms
1892: PPUSH
1893: LD_EXP 1
1897: NOT
1898: PPUSH
1899: LD_STRING 13a_
1901: PPUSH
1902: CALL 22071 0 3
1906: ST_TO_ADDR
// if Simms then
1907: LD_EXP 18
1911: IFFALSE 1929
// tmp := tmp ^ Simms ;
1913: LD_ADDR_VAR 0 2
1917: PUSH
1918: LD_VAR 0 2
1922: PUSH
1923: LD_EXP 18
1927: ADD
1928: ST_TO_ADDR
// Gossudarov := PrepareUnit ( Gossudarov , ( not debug ) , 13a_ ) ;
1929: LD_ADDR_EXP 21
1933: PUSH
1934: LD_STRING Gossudarov
1936: PPUSH
1937: LD_EXP 1
1941: NOT
1942: PPUSH
1943: LD_STRING 13a_
1945: PPUSH
1946: CALL 22071 0 3
1950: ST_TO_ADDR
// if Gossudarov then
1951: LD_EXP 21
1955: IFFALSE 1973
// tmp := tmp ^ Gossudarov ;
1957: LD_ADDR_VAR 0 2
1961: PUSH
1962: LD_VAR 0 2
1966: PUSH
1967: LD_EXP 21
1971: ADD
1972: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , 13a_ ) ;
1973: LD_ADDR_EXP 22
1977: PUSH
1978: LD_STRING Kirilenkova
1980: PPUSH
1981: LD_EXP 1
1985: NOT
1986: PPUSH
1987: LD_STRING 13a_
1989: PPUSH
1990: CALL 22071 0 3
1994: ST_TO_ADDR
// if Kirilenkova then
1995: LD_EXP 22
1999: IFFALSE 2017
// tmp := tmp ^ Kirilenkova ;
2001: LD_ADDR_VAR 0 2
2005: PUSH
2006: LD_VAR 0 2
2010: PUSH
2011: LD_EXP 22
2015: ADD
2016: ST_TO_ADDR
// Petrosyan := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2017: LD_ADDR_EXP 25
2021: PUSH
2022: LD_STRING Petrosyan
2024: PPUSH
2025: LD_EXP 1
2029: NOT
2030: PPUSH
2031: LD_STRING 13a_
2033: PPUSH
2034: CALL 22071 0 3
2038: ST_TO_ADDR
// if Petrosyan then
2039: LD_EXP 25
2043: IFFALSE 2061
// tmp := tmp ^ Petrosyan ;
2045: LD_ADDR_VAR 0 2
2049: PUSH
2050: LD_VAR 0 2
2054: PUSH
2055: LD_EXP 25
2059: ADD
2060: ST_TO_ADDR
// Scholtze := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2061: LD_ADDR_EXP 26
2065: PUSH
2066: LD_STRING Petrosyan
2068: PPUSH
2069: LD_EXP 1
2073: NOT
2074: PPUSH
2075: LD_STRING 13a_
2077: PPUSH
2078: CALL 22071 0 3
2082: ST_TO_ADDR
// if Scholtze then
2083: LD_EXP 26
2087: IFFALSE 2105
// tmp := tmp ^ Scholtze ;
2089: LD_ADDR_VAR 0 2
2093: PUSH
2094: LD_VAR 0 2
2098: PUSH
2099: LD_EXP 26
2103: ADD
2104: ST_TO_ADDR
// Dolgov := PrepareUnit ( Dolgov , ( not debug ) , 13a_ ) ;
2105: LD_ADDR_EXP 24
2109: PUSH
2110: LD_STRING Dolgov
2112: PPUSH
2113: LD_EXP 1
2117: NOT
2118: PPUSH
2119: LD_STRING 13a_
2121: PPUSH
2122: CALL 22071 0 3
2126: ST_TO_ADDR
// if Dolgov then
2127: LD_EXP 24
2131: IFFALSE 2149
// tmp := tmp ^ Dolgov ;
2133: LD_ADDR_VAR 0 2
2137: PUSH
2138: LD_VAR 0 2
2142: PUSH
2143: LD_EXP 24
2147: ADD
2148: ST_TO_ADDR
// for i in tmp do
2149: LD_ADDR_VAR 0 3
2153: PUSH
2154: LD_VAR 0 2
2158: PUSH
2159: FOR_IN
2160: IFFALSE 2185
// PlaceUnitXYR ( i , 160 , 78 , 22 , false ) ;
2162: LD_VAR 0 3
2166: PPUSH
2167: LD_INT 160
2169: PPUSH
2170: LD_INT 78
2172: PPUSH
2173: LD_INT 22
2175: PPUSH
2176: LD_INT 0
2178: PPUSH
2179: CALL_OW 50
2183: GO 2159
2185: POP
2186: POP
// squad1 := tmp ;
2187: LD_ADDR_EXP 37
2191: PUSH
2192: LD_VAR 0 2
2196: ST_TO_ADDR
// tmp := [ ] ;
2197: LD_ADDR_VAR 0 2
2201: PUSH
2202: EMPTY
2203: ST_TO_ADDR
// Petrovova := PrepareUnit ( Petrova , ( not debug ) , 13a_ ) ;
2204: LD_ADDR_EXP 30
2208: PUSH
2209: LD_STRING Petrova
2211: PPUSH
2212: LD_EXP 1
2216: NOT
2217: PPUSH
2218: LD_STRING 13a_
2220: PPUSH
2221: CALL 22071 0 3
2225: ST_TO_ADDR
// if Petrovova then
2226: LD_EXP 30
2230: IFFALSE 2248
// tmp := tmp ^ Petrovova ;
2232: LD_ADDR_VAR 0 2
2236: PUSH
2237: LD_VAR 0 2
2241: PUSH
2242: LD_EXP 30
2246: ADD
2247: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , ( not debug ) , 13a_ ) ;
2248: LD_ADDR_EXP 23
2252: PUSH
2253: LD_STRING Titov
2255: PPUSH
2256: LD_EXP 1
2260: NOT
2261: PPUSH
2262: LD_STRING 13a_
2264: PPUSH
2265: CALL 22071 0 3
2269: ST_TO_ADDR
// if Titov then
2270: LD_EXP 23
2274: IFFALSE 2292
// tmp := tmp ^ Titov ;
2276: LD_ADDR_VAR 0 2
2280: PUSH
2281: LD_VAR 0 2
2285: PUSH
2286: LD_EXP 23
2290: ADD
2291: ST_TO_ADDR
// Karamazov := PrepareUnit ( Karamazov , ( not debug ) , 13a_ ) ;
2292: LD_ADDR_EXP 33
2296: PUSH
2297: LD_STRING Karamazov
2299: PPUSH
2300: LD_EXP 1
2304: NOT
2305: PPUSH
2306: LD_STRING 13a_
2308: PPUSH
2309: CALL 22071 0 3
2313: ST_TO_ADDR
// if Karamazov then
2314: LD_EXP 33
2318: IFFALSE 2336
// tmp := tmp ^ Karamazov ;
2320: LD_ADDR_VAR 0 2
2324: PUSH
2325: LD_VAR 0 2
2329: PUSH
2330: LD_EXP 33
2334: ADD
2335: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 13a_ ) ;
2336: LD_ADDR_EXP 16
2340: PUSH
2341: LD_STRING Frank
2343: PPUSH
2344: LD_EXP 1
2348: NOT
2349: PPUSH
2350: LD_STRING 13a_
2352: PPUSH
2353: CALL 22071 0 3
2357: ST_TO_ADDR
// if Frank then
2358: LD_EXP 16
2362: IFFALSE 2380
// tmp := tmp ^ Frank ;
2364: LD_ADDR_VAR 0 2
2368: PUSH
2369: LD_VAR 0 2
2373: PUSH
2374: LD_EXP 16
2378: ADD
2379: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 13a_ ) ;
2380: LD_ADDR_EXP 7
2384: PUSH
2385: LD_STRING Donaldson
2387: PPUSH
2388: LD_EXP 1
2392: NOT
2393: PPUSH
2394: LD_STRING 13a_
2396: PPUSH
2397: CALL 22071 0 3
2401: ST_TO_ADDR
// if Donaldson then
2402: LD_EXP 7
2406: IFFALSE 2424
// tmp := tmp ^ Donaldson ;
2408: LD_ADDR_VAR 0 2
2412: PUSH
2413: LD_VAR 0 2
2417: PUSH
2418: LD_EXP 7
2422: ADD
2423: ST_TO_ADDR
// for i in tmp do
2424: LD_ADDR_VAR 0 3
2428: PUSH
2429: LD_VAR 0 2
2433: PUSH
2434: FOR_IN
2435: IFFALSE 2475
// begin PlaceUnitXYR ( i , 117 , 8 , 6 , false ) ;
2437: LD_VAR 0 3
2441: PPUSH
2442: LD_INT 117
2444: PPUSH
2445: LD_INT 8
2447: PPUSH
2448: LD_INT 6
2450: PPUSH
2451: LD_INT 0
2453: PPUSH
2454: CALL_OW 50
// ComTurnXY ( i , 117 , 8 ) ;
2458: LD_VAR 0 3
2462: PPUSH
2463: LD_INT 117
2465: PPUSH
2466: LD_INT 8
2468: PPUSH
2469: CALL_OW 118
// end ;
2473: GO 2434
2475: POP
2476: POP
// squad2 := tmp ;
2477: LD_ADDR_EXP 38
2481: PUSH
2482: LD_VAR 0 2
2486: ST_TO_ADDR
// uc_side := 0 ;
2487: LD_ADDR_OWVAR 20
2491: PUSH
2492: LD_INT 0
2494: ST_TO_ADDR
// uc_nation := 0 ;
2495: LD_ADDR_OWVAR 21
2499: PUSH
2500: LD_INT 0
2502: ST_TO_ADDR
// InitHc ;
2503: CALL_OW 19
// hc_importance := 0 ;
2507: LD_ADDR_OWVAR 32
2511: PUSH
2512: LD_INT 0
2514: ST_TO_ADDR
// hc_name := Find some goods! ;
2515: LD_ADDR_OWVAR 26
2519: PUSH
2520: LD_STRING Find some goods!
2522: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
2523: LD_INT 0
2525: PPUSH
2526: LD_INT 12
2528: PPUSH
2529: LD_INT 1
2531: PPUSH
2532: CALL_OW 380
// PlaceUnitXY ( CreateHuman , 96 , 108 , false ) ;
2536: CALL_OW 44
2540: PPUSH
2541: LD_INT 96
2543: PPUSH
2544: LD_INT 108
2546: PPUSH
2547: LD_INT 0
2549: PPUSH
2550: CALL_OW 48
// InitHc ;
2554: CALL_OW 19
// end ;
2558: LD_VAR 0 1
2562: RET
// every 3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) do var Louis , veh ;
2563: LD_INT 22
2565: PUSH
2566: LD_INT 7
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: PUSH
2573: LD_INT 23
2575: PUSH
2576: LD_INT 0
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PPUSH
2587: CALL_OW 69
2591: IFFALSE 3056
2593: GO 2595
2595: DISABLE
2596: LD_INT 0
2598: PPUSH
2599: PPUSH
// begin InGameOn ;
2600: CALL_OW 8
// RemoveUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) [ 1 ] ) ;
2604: LD_INT 22
2606: PUSH
2607: LD_INT 7
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: PUSH
2614: LD_INT 23
2616: PUSH
2617: LD_INT 0
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: PPUSH
2628: CALL_OW 69
2632: PUSH
2633: LD_INT 1
2635: ARRAY
2636: PPUSH
2637: CALL_OW 64
// game_speed := 4 ;
2641: LD_ADDR_OWVAR 65
2645: PUSH
2646: LD_INT 4
2648: ST_TO_ADDR
// ComMoveXY ( JMM , 93 , 100 ) ;
2649: LD_EXP 2
2653: PPUSH
2654: LD_INT 93
2656: PPUSH
2657: LD_INT 100
2659: PPUSH
2660: CALL_OW 111
// ComMoveXY ( Burlak , 93 , 99 ) ;
2664: LD_EXP 3
2668: PPUSH
2669: LD_INT 93
2671: PPUSH
2672: LD_INT 99
2674: PPUSH
2675: CALL_OW 111
// AddComTurnXY ( [ JMM , Burlak ] , 81 , 112 ) ;
2679: LD_EXP 2
2683: PUSH
2684: LD_EXP 3
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: PPUSH
2693: LD_INT 81
2695: PPUSH
2696: LD_INT 112
2698: PPUSH
2699: CALL_OW 178
// wait ( 0 0$5 ) ;
2703: LD_INT 175
2705: PPUSH
2706: CALL_OW 67
// music_nat := 2 ;
2710: LD_ADDR_OWVAR 71
2714: PUSH
2715: LD_INT 2
2717: ST_TO_ADDR
// music_class := 4 ;
2718: LD_ADDR_OWVAR 72
2722: PUSH
2723: LD_INT 4
2725: ST_TO_ADDR
// CenterNowOnXY ( 80 , 130 ) ;
2726: LD_INT 80
2728: PPUSH
2729: LD_INT 130
2731: PPUSH
2732: CALL_OW 86
// uc_nation := 2 ;
2736: LD_ADDR_OWVAR 21
2740: PUSH
2741: LD_INT 2
2743: ST_TO_ADDR
// uc_side := 2 ;
2744: LD_ADDR_OWVAR 20
2748: PUSH
2749: LD_INT 2
2751: ST_TO_ADDR
// hc_gallery = sandar ;
2752: LD_ADDR_OWVAR 33
2756: PUSH
2757: LD_STRING sandar
2759: ST_TO_ADDR
// hc_face_number = 1 ;
2760: LD_ADDR_OWVAR 34
2764: PUSH
2765: LD_INT 1
2767: ST_TO_ADDR
// hc_name = Louis Schulz ;
2768: LD_ADDR_OWVAR 26
2772: PUSH
2773: LD_STRING Louis Schulz
2775: ST_TO_ADDR
// hc_attr = [ 13 , 11 ] ;
2776: LD_ADDR_OWVAR 29
2780: PUSH
2781: LD_INT 13
2783: PUSH
2784: LD_INT 11
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: ST_TO_ADDR
// hc_basic_skills = [ 0 , 0 , 0 , 0 ] ;
2791: LD_ADDR_OWVAR 30
2795: PUSH
2796: LD_INT 0
2798: PUSH
2799: LD_INT 0
2801: PUSH
2802: LD_INT 0
2804: PUSH
2805: LD_INT 0
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: LIST
2812: LIST
2813: ST_TO_ADDR
// hc_skills = [ 10 , 6 , 7 , 7 ] ;
2814: LD_ADDR_OWVAR 31
2818: PUSH
2819: LD_INT 10
2821: PUSH
2822: LD_INT 6
2824: PUSH
2825: LD_INT 7
2827: PUSH
2828: LD_INT 7
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: ST_TO_ADDR
// hc_sex = sex_male ;
2837: LD_ADDR_OWVAR 27
2841: PUSH
2842: LD_INT 1
2844: ST_TO_ADDR
// hc_class = 1 ;
2845: LD_ADDR_OWVAR 28
2849: PUSH
2850: LD_INT 1
2852: ST_TO_ADDR
// hc_importance = 100 ;
2853: LD_ADDR_OWVAR 32
2857: PUSH
2858: LD_INT 100
2860: ST_TO_ADDR
// Louis = CreateHuman ;
2861: LD_ADDR_VAR 0 1
2865: PUSH
2866: CALL_OW 44
2870: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_flame_thrower , 100 ) ;
2871: LD_INT 14
2873: PPUSH
2874: LD_INT 3
2876: PPUSH
2877: LD_INT 1
2879: PPUSH
2880: LD_INT 26
2882: PPUSH
2883: LD_INT 100
2885: PPUSH
2886: CALL 26935 0 5
// veh := CreateVehicle ;
2890: LD_ADDR_VAR 0 2
2894: PUSH
2895: CALL_OW 45
2899: ST_TO_ADDR
// SetMark ( veh , - 2 ) ;
2900: LD_VAR 0 2
2904: PPUSH
2905: LD_INT 2
2907: NEG
2908: PPUSH
2909: CALL_OW 242
// PlaceUnitXY ( veh , 80 , 130 , false ) ;
2913: LD_VAR 0 2
2917: PPUSH
2918: LD_INT 80
2920: PPUSH
2921: LD_INT 130
2923: PPUSH
2924: LD_INT 0
2926: PPUSH
2927: CALL_OW 48
// PlaceHumanInUnit ( Louis , veh ) ;
2931: LD_VAR 0 1
2935: PPUSH
2936: LD_VAR 0 2
2940: PPUSH
2941: CALL_OW 52
// ComMoveXY ( Louis , 80 , 109 ) ;
2945: LD_VAR 0 1
2949: PPUSH
2950: LD_INT 80
2952: PPUSH
2953: LD_INT 109
2955: PPUSH
2956: CALL_OW 111
// AddComExitVehicle ( Louis ) ;
2960: LD_VAR 0 1
2964: PPUSH
2965: CALL_OW 181
// AddComMoveXY ( Louis , 80 , 131 ) ;
2969: LD_VAR 0 1
2973: PPUSH
2974: LD_INT 80
2976: PPUSH
2977: LD_INT 131
2979: PPUSH
2980: CALL_OW 171
// wait ( 0 0$06 ) ;
2984: LD_INT 210
2986: PPUSH
2987: CALL_OW 67
// InGameOff ;
2991: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
2995: LD_INT 35
2997: PPUSH
2998: CALL_OW 67
// until IsAt ( Louis , 80 , 131 ) ;
3002: LD_VAR 0 1
3006: PPUSH
3007: LD_INT 80
3009: PPUSH
3010: LD_INT 131
3012: PPUSH
3013: CALL_OW 307
3017: IFFALSE 2995
// SetSide ( veh , 7 ) ;
3019: LD_VAR 0 2
3023: PPUSH
3024: LD_INT 7
3026: PPUSH
3027: CALL_OW 235
// RemoveUnit ( Louis ) ;
3031: LD_VAR 0 1
3035: PPUSH
3036: CALL_OW 64
// music_nat := 3 ;
3040: LD_ADDR_OWVAR 71
3044: PUSH
3045: LD_INT 3
3047: ST_TO_ADDR
// music_class := 0 ;
3048: LD_ADDR_OWVAR 72
3052: PUSH
3053: LD_INT 0
3055: ST_TO_ADDR
// end ;
3056: PPOPN 2
3058: END
// every 0 0$10 trigger squad1 do var i , xy ;
3059: LD_EXP 37
3063: IFFALSE 3426
3065: GO 3067
3067: DISABLE
3068: LD_INT 0
3070: PPUSH
3071: PPUSH
// begin enable ;
3072: ENABLE
// i := squad1 [ rand ( 1 , squad1 ) ] ;
3073: LD_ADDR_VAR 0 1
3077: PUSH
3078: LD_EXP 37
3082: PUSH
3083: LD_INT 1
3085: PPUSH
3086: LD_EXP 37
3090: PPUSH
3091: CALL_OW 12
3095: ARRAY
3096: ST_TO_ADDR
// if IsInUnit ( i ) then
3097: LD_VAR 0 1
3101: PPUSH
3102: CALL_OW 310
3106: IFFALSE 3110
// exit ;
3108: GO 3426
// ComRemember ( i ) ;
3110: LD_VAR 0 1
3114: PPUSH
3115: CALL_OW 143
// xy := [ ShiftX ( GetX ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) , ShiftY ( GetY ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) ] ;
3119: LD_ADDR_VAR 0 2
3123: PUSH
3124: LD_VAR 0 1
3128: PPUSH
3129: CALL_OW 250
3133: PPUSH
3134: LD_INT 0
3136: PPUSH
3137: LD_INT 5
3139: PPUSH
3140: CALL_OW 12
3144: PPUSH
3145: LD_INT 2
3147: PPUSH
3148: LD_INT 7
3150: PPUSH
3151: CALL_OW 12
3155: PPUSH
3156: CALL_OW 272
3160: PUSH
3161: LD_VAR 0 1
3165: PPUSH
3166: CALL_OW 251
3170: PPUSH
3171: LD_INT 0
3173: PPUSH
3174: LD_INT 5
3176: PPUSH
3177: CALL_OW 12
3181: PPUSH
3182: LD_INT 2
3184: PPUSH
3185: LD_INT 7
3187: PPUSH
3188: CALL_OW 12
3192: PPUSH
3193: CALL_OW 273
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) <> 0 or not ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
3202: LD_VAR 0 2
3206: PUSH
3207: LD_INT 1
3209: ARRAY
3210: PPUSH
3211: LD_VAR 0 2
3215: PUSH
3216: LD_INT 2
3218: ARRAY
3219: PPUSH
3220: CALL_OW 428
3224: PUSH
3225: LD_INT 0
3227: NONEQUAL
3228: PUSH
3229: LD_VAR 0 2
3233: PUSH
3234: LD_INT 1
3236: ARRAY
3237: PPUSH
3238: LD_VAR 0 2
3242: PUSH
3243: LD_INT 2
3245: ARRAY
3246: PPUSH
3247: CALL_OW 488
3251: NOT
3252: OR
3253: IFFALSE 3257
// exit ;
3255: GO 3426
// AddComMoveXY ( i , xy [ 1 ] , xy [ 2 ] ) ;
3257: LD_VAR 0 1
3261: PPUSH
3262: LD_VAR 0 2
3266: PUSH
3267: LD_INT 1
3269: ARRAY
3270: PPUSH
3271: LD_VAR 0 2
3275: PUSH
3276: LD_INT 2
3278: ARRAY
3279: PPUSH
3280: CALL_OW 171
// AddComWait ( i , 0 0$10 ) ;
3284: LD_VAR 0 1
3288: PPUSH
3289: LD_INT 350
3291: PPUSH
3292: CALL_OW 202
// if Prob ( 60 ) and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) then
3296: LD_INT 60
3298: PPUSH
3299: CALL_OW 13
3303: PUSH
3304: LD_INT 22
3306: PUSH
3307: LD_INT 4
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PUSH
3314: LD_INT 21
3316: PUSH
3317: LD_INT 3
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PPUSH
3328: CALL_OW 69
3332: AND
3333: IFFALSE 3417
// begin AddComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) , i ) ) ;
3335: LD_VAR 0 1
3339: PPUSH
3340: LD_INT 22
3342: PUSH
3343: LD_INT 4
3345: PUSH
3346: EMPTY
3347: LIST
3348: LIST
3349: PUSH
3350: LD_INT 21
3352: PUSH
3353: LD_INT 3
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: PPUSH
3364: CALL_OW 69
3368: PPUSH
3369: LD_VAR 0 1
3373: PPUSH
3374: CALL_OW 74
3378: PPUSH
3379: CALL_OW 180
// repeat wait ( 0 0$30 ) ;
3383: LD_INT 1050
3385: PPUSH
3386: CALL_OW 67
// until IsInUnit ( i ) ;
3390: LD_VAR 0 1
3394: PPUSH
3395: CALL_OW 310
3399: IFFALSE 3383
// wait ( 0 0$30 ) ;
3401: LD_INT 1050
3403: PPUSH
3404: CALL_OW 67
// AddComExitBuilding ( i ) ;
3408: LD_VAR 0 1
3412: PPUSH
3413: CALL_OW 182
// end ; AddComReturn ( i ) ;
3417: LD_VAR 0 1
3421: PPUSH
3422: CALL_OW 204
// end ; end_of_file
3426: PPOPN 2
3428: END
// export function Action ; begin
3429: LD_INT 0
3431: PPUSH
// InGameOn ;
3432: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
3436: LD_EXP 2
3440: PPUSH
3441: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
3445: LD_EXP 2
3449: PPUSH
3450: LD_STRING D1-JMM-1
3452: PPUSH
3453: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
3457: LD_EXP 3
3461: PPUSH
3462: LD_STRING D1-Bur-1
3464: PPUSH
3465: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
3469: LD_EXP 2
3473: PPUSH
3474: LD_STRING D1-JMM-2
3476: PPUSH
3477: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
3481: LD_EXP 3
3485: PPUSH
3486: LD_STRING D1-Bur-2
3488: PPUSH
3489: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3493: LD_EXP 2
3497: PPUSH
3498: LD_STRING D1-JMM-3
3500: PPUSH
3501: CALL_OW 88
// Say ( Burlak , D1-Bur-3 ) ;
3505: LD_EXP 3
3509: PPUSH
3510: LD_STRING D1-Bur-3
3512: PPUSH
3513: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3517: LD_EXP 2
3521: PPUSH
3522: LD_STRING D1-JMM-4
3524: PPUSH
3525: CALL_OW 88
// Say ( Burlak , D1-Bur-4 ) ;
3529: LD_EXP 3
3533: PPUSH
3534: LD_STRING D1-Bur-4
3536: PPUSH
3537: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3541: LD_EXP 2
3545: PPUSH
3546: LD_STRING D1-JMM-5
3548: PPUSH
3549: CALL_OW 88
// Say ( Burlak , D1-Bur-5 ) ;
3553: LD_EXP 3
3557: PPUSH
3558: LD_STRING D1-Bur-5
3560: PPUSH
3561: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3565: LD_EXP 2
3569: PPUSH
3570: LD_STRING D1-JMM-6
3572: PPUSH
3573: CALL_OW 88
// Say ( Burlak , D1-Bur-6 ) ;
3577: LD_EXP 3
3581: PPUSH
3582: LD_STRING D1-Bur-6
3584: PPUSH
3585: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
3589: LD_EXP 2
3593: PPUSH
3594: LD_STRING D1-JMM-7
3596: PPUSH
3597: CALL_OW 88
// wait ( 20 ) ;
3601: LD_INT 20
3603: PPUSH
3604: CALL_OW 67
// Query ( QTruck ) ;
3608: LD_STRING QTruck
3610: PPUSH
3611: CALL_OW 97
// InGameOff ;
3615: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
3619: LD_STRING MArtPickup
3621: PPUSH
3622: CALL_OW 337
// SetAreaMapShow ( escape_area , 1 ) ;
3626: LD_INT 2
3628: PPUSH
3629: LD_INT 1
3631: PPUSH
3632: CALL_OW 424
// end ;
3636: LD_VAR 0 1
3640: RET
// every 0 0$3 trigger FilterUnitsInArea ( escape_area , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) = 2 and IsInUnit ( JMM ) and IsInUnit ( Burlak ) and ( GetWeapon ( IsInUnit ( JMM ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] or GetWeapon ( IsInUnit ( Burlak ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] ) do var i , macmilanVeh , burlakVeh ;
3641: LD_INT 2
3643: PPUSH
3644: LD_INT 21
3646: PUSH
3647: LD_INT 2
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: PUSH
3654: LD_INT 33
3656: PUSH
3657: LD_INT 1
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: PUSH
3664: LD_INT 3
3666: PUSH
3667: LD_INT 58
3669: PUSH
3670: EMPTY
3671: LIST
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: LIST
3681: PPUSH
3682: CALL_OW 70
3686: PUSH
3687: LD_INT 2
3689: EQUAL
3690: PUSH
3691: LD_EXP 2
3695: PPUSH
3696: CALL_OW 310
3700: AND
3701: PUSH
3702: LD_EXP 3
3706: PPUSH
3707: CALL_OW 310
3711: AND
3712: PUSH
3713: LD_EXP 2
3717: PPUSH
3718: CALL_OW 310
3722: PPUSH
3723: CALL_OW 264
3727: PUSH
3728: LD_INT 51
3730: PUSH
3731: LD_INT 12
3733: PUSH
3734: LD_EXP 40
3738: PUSH
3739: LD_INT 32
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: IN
3748: PUSH
3749: LD_EXP 3
3753: PPUSH
3754: CALL_OW 310
3758: PPUSH
3759: CALL_OW 264
3763: PUSH
3764: LD_INT 51
3766: PUSH
3767: LD_INT 12
3769: PUSH
3770: LD_EXP 40
3774: PUSH
3775: LD_INT 32
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: IN
3784: OR
3785: AND
3786: IFFALSE 3996
3788: GO 3790
3790: DISABLE
3791: LD_INT 0
3793: PPUSH
3794: PPUSH
3795: PPUSH
// begin macmilanVeh := IsInUnit ( JMM ) ;
3796: LD_ADDR_VAR 0 2
3800: PUSH
3801: LD_EXP 2
3805: PPUSH
3806: CALL_OW 310
3810: ST_TO_ADDR
// burlakVeh := IsInUnit ( Burlak ) ;
3811: LD_ADDR_VAR 0 3
3815: PUSH
3816: LD_EXP 3
3820: PPUSH
3821: CALL_OW 310
3825: ST_TO_ADDR
// SaveVariable ( [ GetChassis ( macmilanVeh ) , GetEngine ( macmilanVeh ) , control_manual , GetWeapon ( macmilanVeh ) , GetMark ( macmilanVeh ) , GetNation ( macmilanVeh ) ] , 14a_JMMVeh ) ;
3826: LD_VAR 0 2
3830: PPUSH
3831: CALL_OW 265
3835: PUSH
3836: LD_VAR 0 2
3840: PPUSH
3841: CALL_OW 262
3845: PUSH
3846: LD_INT 1
3848: PUSH
3849: LD_VAR 0 2
3853: PPUSH
3854: CALL_OW 264
3858: PUSH
3859: LD_VAR 0 2
3863: PPUSH
3864: CALL_OW 271
3868: PUSH
3869: LD_VAR 0 2
3873: PPUSH
3874: CALL_OW 248
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: PPUSH
3887: LD_STRING 14a_JMMVeh
3889: PPUSH
3890: CALL_OW 39
// SaveVariable ( [ GetChassis ( burlakVeh ) , GetEngine ( burlakVeh ) , control_manual , GetWeapon ( burlakVeh ) , GetMark ( burlakVeh ) , GetNation ( burlakVeh ) ] , 14a_BurlakVeh ) ;
3894: LD_VAR 0 3
3898: PPUSH
3899: CALL_OW 265
3903: PUSH
3904: LD_VAR 0 3
3908: PPUSH
3909: CALL_OW 262
3913: PUSH
3914: LD_INT 1
3916: PUSH
3917: LD_VAR 0 3
3921: PPUSH
3922: CALL_OW 264
3926: PUSH
3927: LD_VAR 0 3
3931: PPUSH
3932: CALL_OW 271
3936: PUSH
3937: LD_VAR 0 3
3941: PPUSH
3942: CALL_OW 248
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: PPUSH
3955: LD_STRING 14a_BurlakVeh
3957: PPUSH
3958: CALL_OW 39
// SaveCharacters ( JMM , 14a_JMM ) ;
3962: LD_EXP 2
3966: PPUSH
3967: LD_STRING 14a_JMM
3969: PPUSH
3970: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
3974: LD_EXP 3
3978: PPUSH
3979: LD_STRING 14a_Burlak
3981: PPUSH
3982: CALL_OW 38
// ChangeMap ( 1 , %_cont ) ;
3986: LD_INT 1
3988: PPUSH
3989: LD_STRING %_cont
3991: PPUSH
3992: CALL_OW 340
// end ;
3996: PPOPN 3
3998: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 950 ] ] ] ) do
3999: LD_INT 22
4001: PUSH
4002: LD_INT 4
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PUSH
4009: LD_INT 3
4011: PUSH
4012: LD_INT 24
4014: PUSH
4015: LD_INT 950
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PPUSH
4030: CALL_OW 69
4034: IFFALSE 4046
4036: GO 4038
4038: DISABLE
// YouLost ( FriendlyFire ) ;
4039: LD_STRING FriendlyFire
4041: PPUSH
4042: CALL_OW 104
4046: END
// every 0 0$1 trigger IsDead ( Burlak ) do
4047: LD_EXP 3
4051: PPUSH
4052: CALL_OW 301
4056: IFFALSE 4068
4058: GO 4060
4060: DISABLE
// YouLost ( Burlak ) ;
4061: LD_STRING Burlak
4063: PPUSH
4064: CALL_OW 104
4068: END
// every 0 0$1 trigger IsDead ( JMM ) do
4069: LD_EXP 2
4073: PPUSH
4074: CALL_OW 301
4078: IFFALSE 4090
4080: GO 4082
4082: DISABLE
// YouLost ( JMM ) ; end_of_file
4083: LD_STRING JMM
4085: PPUSH
4086: CALL_OW 104
4090: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
4091: LD_INT 0
4093: PPUSH
// ar_miner := 81 ;
4094: LD_ADDR_EXP 46
4098: PUSH
4099: LD_INT 81
4101: ST_TO_ADDR
// ar_crane := 88 ;
4102: LD_ADDR_EXP 45
4106: PUSH
4107: LD_INT 88
4109: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4110: LD_ADDR_EXP 40
4114: PUSH
4115: LD_INT 89
4117: ST_TO_ADDR
// us_hack := 99 ;
4118: LD_ADDR_EXP 41
4122: PUSH
4123: LD_INT 99
4125: ST_TO_ADDR
// us_artillery := 97 ;
4126: LD_ADDR_EXP 42
4130: PUSH
4131: LD_INT 97
4133: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4134: LD_ADDR_EXP 43
4138: PUSH
4139: LD_INT 91
4141: ST_TO_ADDR
// ar_mortar := 92 ;
4142: LD_ADDR_EXP 44
4146: PUSH
4147: LD_INT 92
4149: ST_TO_ADDR
// ru_radar := 98 ;
4150: LD_ADDR_EXP 39
4154: PUSH
4155: LD_INT 98
4157: ST_TO_ADDR
// tech_Artillery := 80 ;
4158: LD_ADDR_EXP 47
4162: PUSH
4163: LD_INT 80
4165: ST_TO_ADDR
// tech_RadMat := 81 ;
4166: LD_ADDR_EXP 48
4170: PUSH
4171: LD_INT 81
4173: ST_TO_ADDR
// tech_BasicTools := 82 ;
4174: LD_ADDR_EXP 49
4178: PUSH
4179: LD_INT 82
4181: ST_TO_ADDR
// tech_Cargo := 83 ;
4182: LD_ADDR_EXP 50
4186: PUSH
4187: LD_INT 83
4189: ST_TO_ADDR
// tech_Track := 84 ;
4190: LD_ADDR_EXP 51
4194: PUSH
4195: LD_INT 84
4197: ST_TO_ADDR
// tech_Crane := 85 ;
4198: LD_ADDR_EXP 52
4202: PUSH
4203: LD_INT 85
4205: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4206: LD_ADDR_EXP 53
4210: PUSH
4211: LD_INT 86
4213: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4214: LD_ADDR_EXP 54
4218: PUSH
4219: LD_INT 87
4221: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
4222: LD_ADDR_EXP 55
4226: PUSH
4227: LD_INT 88
4229: ST_TO_ADDR
// class_mastodont := 31 ;
4230: LD_ADDR_EXP 56
4234: PUSH
4235: LD_INT 31
4237: ST_TO_ADDR
// class_horse := 21 ;
4238: LD_ADDR_EXP 57
4242: PUSH
4243: LD_INT 21
4245: ST_TO_ADDR
// end ;
4246: LD_VAR 0 1
4250: RET
// every 1 do
4251: GO 4253
4253: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
4254: CALL 4091 0 0
4258: END
// every 0 0$1 do
4259: GO 4261
4261: DISABLE
// begin enable ;
4262: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4263: LD_STRING updateTimer(
4265: PUSH
4266: LD_OWVAR 1
4270: STR
4271: PUSH
4272: LD_STRING );
4274: STR
4275: PPUSH
4276: CALL_OW 559
// end ;
4280: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4281: LD_INT 0
4283: PPUSH
// if p2 = 100 then
4284: LD_VAR 0 2
4288: PUSH
4289: LD_INT 100
4291: EQUAL
4292: IFFALSE 5295
// begin if not StreamModeActive then
4294: LD_EXP 58
4298: NOT
4299: IFFALSE 4309
// StreamModeActive := true ;
4301: LD_ADDR_EXP 58
4305: PUSH
4306: LD_INT 1
4308: ST_TO_ADDR
// if p3 = 0 then
4309: LD_VAR 0 3
4313: PUSH
4314: LD_INT 0
4316: EQUAL
4317: IFFALSE 4323
// InitStreamMode ;
4319: CALL 5455 0 0
// if p3 = 1 then
4323: LD_VAR 0 3
4327: PUSH
4328: LD_INT 1
4330: EQUAL
4331: IFFALSE 4341
// sRocket := true ;
4333: LD_ADDR_EXP 63
4337: PUSH
4338: LD_INT 1
4340: ST_TO_ADDR
// if p3 = 2 then
4341: LD_VAR 0 3
4345: PUSH
4346: LD_INT 2
4348: EQUAL
4349: IFFALSE 4359
// sSpeed := true ;
4351: LD_ADDR_EXP 62
4355: PUSH
4356: LD_INT 1
4358: ST_TO_ADDR
// if p3 = 3 then
4359: LD_VAR 0 3
4363: PUSH
4364: LD_INT 3
4366: EQUAL
4367: IFFALSE 4377
// sEngine := true ;
4369: LD_ADDR_EXP 64
4373: PUSH
4374: LD_INT 1
4376: ST_TO_ADDR
// if p3 = 4 then
4377: LD_VAR 0 3
4381: PUSH
4382: LD_INT 4
4384: EQUAL
4385: IFFALSE 4395
// sSpec := true ;
4387: LD_ADDR_EXP 61
4391: PUSH
4392: LD_INT 1
4394: ST_TO_ADDR
// if p3 = 5 then
4395: LD_VAR 0 3
4399: PUSH
4400: LD_INT 5
4402: EQUAL
4403: IFFALSE 4413
// sLevel := true ;
4405: LD_ADDR_EXP 65
4409: PUSH
4410: LD_INT 1
4412: ST_TO_ADDR
// if p3 = 6 then
4413: LD_VAR 0 3
4417: PUSH
4418: LD_INT 6
4420: EQUAL
4421: IFFALSE 4431
// sArmoury := true ;
4423: LD_ADDR_EXP 66
4427: PUSH
4428: LD_INT 1
4430: ST_TO_ADDR
// if p3 = 7 then
4431: LD_VAR 0 3
4435: PUSH
4436: LD_INT 7
4438: EQUAL
4439: IFFALSE 4449
// sRadar := true ;
4441: LD_ADDR_EXP 67
4445: PUSH
4446: LD_INT 1
4448: ST_TO_ADDR
// if p3 = 8 then
4449: LD_VAR 0 3
4453: PUSH
4454: LD_INT 8
4456: EQUAL
4457: IFFALSE 4467
// sBunker := true ;
4459: LD_ADDR_EXP 68
4463: PUSH
4464: LD_INT 1
4466: ST_TO_ADDR
// if p3 = 9 then
4467: LD_VAR 0 3
4471: PUSH
4472: LD_INT 9
4474: EQUAL
4475: IFFALSE 4485
// sHack := true ;
4477: LD_ADDR_EXP 69
4481: PUSH
4482: LD_INT 1
4484: ST_TO_ADDR
// if p3 = 10 then
4485: LD_VAR 0 3
4489: PUSH
4490: LD_INT 10
4492: EQUAL
4493: IFFALSE 4503
// sFire := true ;
4495: LD_ADDR_EXP 70
4499: PUSH
4500: LD_INT 1
4502: ST_TO_ADDR
// if p3 = 11 then
4503: LD_VAR 0 3
4507: PUSH
4508: LD_INT 11
4510: EQUAL
4511: IFFALSE 4521
// sRefresh := true ;
4513: LD_ADDR_EXP 71
4517: PUSH
4518: LD_INT 1
4520: ST_TO_ADDR
// if p3 = 12 then
4521: LD_VAR 0 3
4525: PUSH
4526: LD_INT 12
4528: EQUAL
4529: IFFALSE 4539
// sExp := true ;
4531: LD_ADDR_EXP 72
4535: PUSH
4536: LD_INT 1
4538: ST_TO_ADDR
// if p3 = 13 then
4539: LD_VAR 0 3
4543: PUSH
4544: LD_INT 13
4546: EQUAL
4547: IFFALSE 4557
// sDepot := true ;
4549: LD_ADDR_EXP 73
4553: PUSH
4554: LD_INT 1
4556: ST_TO_ADDR
// if p3 = 14 then
4557: LD_VAR 0 3
4561: PUSH
4562: LD_INT 14
4564: EQUAL
4565: IFFALSE 4575
// sFlag := true ;
4567: LD_ADDR_EXP 74
4571: PUSH
4572: LD_INT 1
4574: ST_TO_ADDR
// if p3 = 15 then
4575: LD_VAR 0 3
4579: PUSH
4580: LD_INT 15
4582: EQUAL
4583: IFFALSE 4593
// sKamikadze := true ;
4585: LD_ADDR_EXP 82
4589: PUSH
4590: LD_INT 1
4592: ST_TO_ADDR
// if p3 = 16 then
4593: LD_VAR 0 3
4597: PUSH
4598: LD_INT 16
4600: EQUAL
4601: IFFALSE 4611
// sTroll := true ;
4603: LD_ADDR_EXP 83
4607: PUSH
4608: LD_INT 1
4610: ST_TO_ADDR
// if p3 = 17 then
4611: LD_VAR 0 3
4615: PUSH
4616: LD_INT 17
4618: EQUAL
4619: IFFALSE 4629
// sSlow := true ;
4621: LD_ADDR_EXP 84
4625: PUSH
4626: LD_INT 1
4628: ST_TO_ADDR
// if p3 = 18 then
4629: LD_VAR 0 3
4633: PUSH
4634: LD_INT 18
4636: EQUAL
4637: IFFALSE 4647
// sLack := true ;
4639: LD_ADDR_EXP 85
4643: PUSH
4644: LD_INT 1
4646: ST_TO_ADDR
// if p3 = 19 then
4647: LD_VAR 0 3
4651: PUSH
4652: LD_INT 19
4654: EQUAL
4655: IFFALSE 4665
// sTank := true ;
4657: LD_ADDR_EXP 87
4661: PUSH
4662: LD_INT 1
4664: ST_TO_ADDR
// if p3 = 20 then
4665: LD_VAR 0 3
4669: PUSH
4670: LD_INT 20
4672: EQUAL
4673: IFFALSE 4683
// sRemote := true ;
4675: LD_ADDR_EXP 88
4679: PUSH
4680: LD_INT 1
4682: ST_TO_ADDR
// if p3 = 21 then
4683: LD_VAR 0 3
4687: PUSH
4688: LD_INT 21
4690: EQUAL
4691: IFFALSE 4701
// sPowell := true ;
4693: LD_ADDR_EXP 89
4697: PUSH
4698: LD_INT 1
4700: ST_TO_ADDR
// if p3 = 22 then
4701: LD_VAR 0 3
4705: PUSH
4706: LD_INT 22
4708: EQUAL
4709: IFFALSE 4719
// sTeleport := true ;
4711: LD_ADDR_EXP 92
4715: PUSH
4716: LD_INT 1
4718: ST_TO_ADDR
// if p3 = 23 then
4719: LD_VAR 0 3
4723: PUSH
4724: LD_INT 23
4726: EQUAL
4727: IFFALSE 4737
// sOilTower := true ;
4729: LD_ADDR_EXP 94
4733: PUSH
4734: LD_INT 1
4736: ST_TO_ADDR
// if p3 = 24 then
4737: LD_VAR 0 3
4741: PUSH
4742: LD_INT 24
4744: EQUAL
4745: IFFALSE 4755
// sShovel := true ;
4747: LD_ADDR_EXP 95
4751: PUSH
4752: LD_INT 1
4754: ST_TO_ADDR
// if p3 = 25 then
4755: LD_VAR 0 3
4759: PUSH
4760: LD_INT 25
4762: EQUAL
4763: IFFALSE 4773
// sSheik := true ;
4765: LD_ADDR_EXP 96
4769: PUSH
4770: LD_INT 1
4772: ST_TO_ADDR
// if p3 = 26 then
4773: LD_VAR 0 3
4777: PUSH
4778: LD_INT 26
4780: EQUAL
4781: IFFALSE 4791
// sEarthquake := true ;
4783: LD_ADDR_EXP 98
4787: PUSH
4788: LD_INT 1
4790: ST_TO_ADDR
// if p3 = 27 then
4791: LD_VAR 0 3
4795: PUSH
4796: LD_INT 27
4798: EQUAL
4799: IFFALSE 4809
// sAI := true ;
4801: LD_ADDR_EXP 99
4805: PUSH
4806: LD_INT 1
4808: ST_TO_ADDR
// if p3 = 28 then
4809: LD_VAR 0 3
4813: PUSH
4814: LD_INT 28
4816: EQUAL
4817: IFFALSE 4827
// sCargo := true ;
4819: LD_ADDR_EXP 102
4823: PUSH
4824: LD_INT 1
4826: ST_TO_ADDR
// if p3 = 29 then
4827: LD_VAR 0 3
4831: PUSH
4832: LD_INT 29
4834: EQUAL
4835: IFFALSE 4845
// sDLaser := true ;
4837: LD_ADDR_EXP 103
4841: PUSH
4842: LD_INT 1
4844: ST_TO_ADDR
// if p3 = 30 then
4845: LD_VAR 0 3
4849: PUSH
4850: LD_INT 30
4852: EQUAL
4853: IFFALSE 4863
// sExchange := true ;
4855: LD_ADDR_EXP 104
4859: PUSH
4860: LD_INT 1
4862: ST_TO_ADDR
// if p3 = 31 then
4863: LD_VAR 0 3
4867: PUSH
4868: LD_INT 31
4870: EQUAL
4871: IFFALSE 4881
// sFac := true ;
4873: LD_ADDR_EXP 105
4877: PUSH
4878: LD_INT 1
4880: ST_TO_ADDR
// if p3 = 32 then
4881: LD_VAR 0 3
4885: PUSH
4886: LD_INT 32
4888: EQUAL
4889: IFFALSE 4899
// sPower := true ;
4891: LD_ADDR_EXP 106
4895: PUSH
4896: LD_INT 1
4898: ST_TO_ADDR
// if p3 = 33 then
4899: LD_VAR 0 3
4903: PUSH
4904: LD_INT 33
4906: EQUAL
4907: IFFALSE 4917
// sRandom := true ;
4909: LD_ADDR_EXP 107
4913: PUSH
4914: LD_INT 1
4916: ST_TO_ADDR
// if p3 = 34 then
4917: LD_VAR 0 3
4921: PUSH
4922: LD_INT 34
4924: EQUAL
4925: IFFALSE 4935
// sShield := true ;
4927: LD_ADDR_EXP 108
4931: PUSH
4932: LD_INT 1
4934: ST_TO_ADDR
// if p3 = 35 then
4935: LD_VAR 0 3
4939: PUSH
4940: LD_INT 35
4942: EQUAL
4943: IFFALSE 4953
// sTime := true ;
4945: LD_ADDR_EXP 109
4949: PUSH
4950: LD_INT 1
4952: ST_TO_ADDR
// if p3 = 36 then
4953: LD_VAR 0 3
4957: PUSH
4958: LD_INT 36
4960: EQUAL
4961: IFFALSE 4971
// sTools := true ;
4963: LD_ADDR_EXP 110
4967: PUSH
4968: LD_INT 1
4970: ST_TO_ADDR
// if p3 = 101 then
4971: LD_VAR 0 3
4975: PUSH
4976: LD_INT 101
4978: EQUAL
4979: IFFALSE 4989
// sSold := true ;
4981: LD_ADDR_EXP 75
4985: PUSH
4986: LD_INT 1
4988: ST_TO_ADDR
// if p3 = 102 then
4989: LD_VAR 0 3
4993: PUSH
4994: LD_INT 102
4996: EQUAL
4997: IFFALSE 5007
// sDiff := true ;
4999: LD_ADDR_EXP 76
5003: PUSH
5004: LD_INT 1
5006: ST_TO_ADDR
// if p3 = 103 then
5007: LD_VAR 0 3
5011: PUSH
5012: LD_INT 103
5014: EQUAL
5015: IFFALSE 5025
// sFog := true ;
5017: LD_ADDR_EXP 79
5021: PUSH
5022: LD_INT 1
5024: ST_TO_ADDR
// if p3 = 104 then
5025: LD_VAR 0 3
5029: PUSH
5030: LD_INT 104
5032: EQUAL
5033: IFFALSE 5043
// sReset := true ;
5035: LD_ADDR_EXP 80
5039: PUSH
5040: LD_INT 1
5042: ST_TO_ADDR
// if p3 = 105 then
5043: LD_VAR 0 3
5047: PUSH
5048: LD_INT 105
5050: EQUAL
5051: IFFALSE 5061
// sSun := true ;
5053: LD_ADDR_EXP 81
5057: PUSH
5058: LD_INT 1
5060: ST_TO_ADDR
// if p3 = 106 then
5061: LD_VAR 0 3
5065: PUSH
5066: LD_INT 106
5068: EQUAL
5069: IFFALSE 5079
// sTiger := true ;
5071: LD_ADDR_EXP 77
5075: PUSH
5076: LD_INT 1
5078: ST_TO_ADDR
// if p3 = 107 then
5079: LD_VAR 0 3
5083: PUSH
5084: LD_INT 107
5086: EQUAL
5087: IFFALSE 5097
// sBomb := true ;
5089: LD_ADDR_EXP 78
5093: PUSH
5094: LD_INT 1
5096: ST_TO_ADDR
// if p3 = 108 then
5097: LD_VAR 0 3
5101: PUSH
5102: LD_INT 108
5104: EQUAL
5105: IFFALSE 5115
// sWound := true ;
5107: LD_ADDR_EXP 86
5111: PUSH
5112: LD_INT 1
5114: ST_TO_ADDR
// if p3 = 109 then
5115: LD_VAR 0 3
5119: PUSH
5120: LD_INT 109
5122: EQUAL
5123: IFFALSE 5133
// sBetray := true ;
5125: LD_ADDR_EXP 90
5129: PUSH
5130: LD_INT 1
5132: ST_TO_ADDR
// if p3 = 110 then
5133: LD_VAR 0 3
5137: PUSH
5138: LD_INT 110
5140: EQUAL
5141: IFFALSE 5151
// sContamin := true ;
5143: LD_ADDR_EXP 91
5147: PUSH
5148: LD_INT 1
5150: ST_TO_ADDR
// if p3 = 111 then
5151: LD_VAR 0 3
5155: PUSH
5156: LD_INT 111
5158: EQUAL
5159: IFFALSE 5169
// sOil := true ;
5161: LD_ADDR_EXP 93
5165: PUSH
5166: LD_INT 1
5168: ST_TO_ADDR
// if p3 = 112 then
5169: LD_VAR 0 3
5173: PUSH
5174: LD_INT 112
5176: EQUAL
5177: IFFALSE 5187
// sStu := true ;
5179: LD_ADDR_EXP 97
5183: PUSH
5184: LD_INT 1
5186: ST_TO_ADDR
// if p3 = 113 then
5187: LD_VAR 0 3
5191: PUSH
5192: LD_INT 113
5194: EQUAL
5195: IFFALSE 5205
// sBazooka := true ;
5197: LD_ADDR_EXP 100
5201: PUSH
5202: LD_INT 1
5204: ST_TO_ADDR
// if p3 = 114 then
5205: LD_VAR 0 3
5209: PUSH
5210: LD_INT 114
5212: EQUAL
5213: IFFALSE 5223
// sMortar := true ;
5215: LD_ADDR_EXP 101
5219: PUSH
5220: LD_INT 1
5222: ST_TO_ADDR
// if p3 = 115 then
5223: LD_VAR 0 3
5227: PUSH
5228: LD_INT 115
5230: EQUAL
5231: IFFALSE 5241
// sRanger := true ;
5233: LD_ADDR_EXP 111
5237: PUSH
5238: LD_INT 1
5240: ST_TO_ADDR
// if p3 = 116 then
5241: LD_VAR 0 3
5245: PUSH
5246: LD_INT 116
5248: EQUAL
5249: IFFALSE 5259
// sComputer := true ;
5251: LD_ADDR_EXP 112
5255: PUSH
5256: LD_INT 1
5258: ST_TO_ADDR
// if p3 = 117 then
5259: LD_VAR 0 3
5263: PUSH
5264: LD_INT 117
5266: EQUAL
5267: IFFALSE 5277
// s30 := true ;
5269: LD_ADDR_EXP 113
5273: PUSH
5274: LD_INT 1
5276: ST_TO_ADDR
// if p3 = 118 then
5277: LD_VAR 0 3
5281: PUSH
5282: LD_INT 118
5284: EQUAL
5285: IFFALSE 5295
// s60 := true ;
5287: LD_ADDR_EXP 114
5291: PUSH
5292: LD_INT 1
5294: ST_TO_ADDR
// end ; if p2 = 101 then
5295: LD_VAR 0 2
5299: PUSH
5300: LD_INT 101
5302: EQUAL
5303: IFFALSE 5431
// begin case p3 of 1 :
5305: LD_VAR 0 3
5309: PUSH
5310: LD_INT 1
5312: DOUBLE
5313: EQUAL
5314: IFTRUE 5318
5316: GO 5325
5318: POP
// hHackUnlimitedResources ; 2 :
5319: CALL 17027 0 0
5323: GO 5431
5325: LD_INT 2
5327: DOUBLE
5328: EQUAL
5329: IFTRUE 5333
5331: GO 5340
5333: POP
// hHackSetLevel10 ; 3 :
5334: CALL 17160 0 0
5338: GO 5431
5340: LD_INT 3
5342: DOUBLE
5343: EQUAL
5344: IFTRUE 5348
5346: GO 5355
5348: POP
// hHackSetLevel10YourUnits ; 4 :
5349: CALL 17245 0 0
5353: GO 5431
5355: LD_INT 4
5357: DOUBLE
5358: EQUAL
5359: IFTRUE 5363
5361: GO 5370
5363: POP
// hHackInvincible ; 5 :
5364: CALL 17693 0 0
5368: GO 5431
5370: LD_INT 5
5372: DOUBLE
5373: EQUAL
5374: IFTRUE 5378
5376: GO 5385
5378: POP
// hHackInvisible ; 6 :
5379: CALL 17804 0 0
5383: GO 5431
5385: LD_INT 6
5387: DOUBLE
5388: EQUAL
5389: IFTRUE 5393
5391: GO 5400
5393: POP
// hHackChangeYourSide ; 7 :
5394: CALL 17861 0 0
5398: GO 5431
5400: LD_INT 7
5402: DOUBLE
5403: EQUAL
5404: IFTRUE 5408
5406: GO 5415
5408: POP
// hHackChangeUnitSide ; 8 :
5409: CALL 17903 0 0
5413: GO 5431
5415: LD_INT 8
5417: DOUBLE
5418: EQUAL
5419: IFTRUE 5423
5421: GO 5430
5423: POP
// hHackFog ; end ;
5424: CALL 18004 0 0
5428: GO 5431
5430: POP
// end ; end ;
5431: LD_VAR 0 7
5435: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
5436: GO 5438
5438: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5439: LD_STRING initStreamRollete();
5441: PPUSH
5442: CALL_OW 559
// InitStreamMode ;
5446: CALL 5455 0 0
// DefineStreamItems ( ) ;
5450: CALL 5919 0 0
// end ;
5454: END
// function InitStreamMode ; begin
5455: LD_INT 0
5457: PPUSH
// streamModeActive := false ;
5458: LD_ADDR_EXP 58
5462: PUSH
5463: LD_INT 0
5465: ST_TO_ADDR
// normalCounter := 36 ;
5466: LD_ADDR_EXP 59
5470: PUSH
5471: LD_INT 36
5473: ST_TO_ADDR
// hardcoreCounter := 16 ;
5474: LD_ADDR_EXP 60
5478: PUSH
5479: LD_INT 16
5481: ST_TO_ADDR
// sRocket := false ;
5482: LD_ADDR_EXP 63
5486: PUSH
5487: LD_INT 0
5489: ST_TO_ADDR
// sSpeed := false ;
5490: LD_ADDR_EXP 62
5494: PUSH
5495: LD_INT 0
5497: ST_TO_ADDR
// sEngine := false ;
5498: LD_ADDR_EXP 64
5502: PUSH
5503: LD_INT 0
5505: ST_TO_ADDR
// sSpec := false ;
5506: LD_ADDR_EXP 61
5510: PUSH
5511: LD_INT 0
5513: ST_TO_ADDR
// sLevel := false ;
5514: LD_ADDR_EXP 65
5518: PUSH
5519: LD_INT 0
5521: ST_TO_ADDR
// sArmoury := false ;
5522: LD_ADDR_EXP 66
5526: PUSH
5527: LD_INT 0
5529: ST_TO_ADDR
// sRadar := false ;
5530: LD_ADDR_EXP 67
5534: PUSH
5535: LD_INT 0
5537: ST_TO_ADDR
// sBunker := false ;
5538: LD_ADDR_EXP 68
5542: PUSH
5543: LD_INT 0
5545: ST_TO_ADDR
// sHack := false ;
5546: LD_ADDR_EXP 69
5550: PUSH
5551: LD_INT 0
5553: ST_TO_ADDR
// sFire := false ;
5554: LD_ADDR_EXP 70
5558: PUSH
5559: LD_INT 0
5561: ST_TO_ADDR
// sRefresh := false ;
5562: LD_ADDR_EXP 71
5566: PUSH
5567: LD_INT 0
5569: ST_TO_ADDR
// sExp := false ;
5570: LD_ADDR_EXP 72
5574: PUSH
5575: LD_INT 0
5577: ST_TO_ADDR
// sDepot := false ;
5578: LD_ADDR_EXP 73
5582: PUSH
5583: LD_INT 0
5585: ST_TO_ADDR
// sFlag := false ;
5586: LD_ADDR_EXP 74
5590: PUSH
5591: LD_INT 0
5593: ST_TO_ADDR
// sKamikadze := false ;
5594: LD_ADDR_EXP 82
5598: PUSH
5599: LD_INT 0
5601: ST_TO_ADDR
// sTroll := false ;
5602: LD_ADDR_EXP 83
5606: PUSH
5607: LD_INT 0
5609: ST_TO_ADDR
// sSlow := false ;
5610: LD_ADDR_EXP 84
5614: PUSH
5615: LD_INT 0
5617: ST_TO_ADDR
// sLack := false ;
5618: LD_ADDR_EXP 85
5622: PUSH
5623: LD_INT 0
5625: ST_TO_ADDR
// sTank := false ;
5626: LD_ADDR_EXP 87
5630: PUSH
5631: LD_INT 0
5633: ST_TO_ADDR
// sRemote := false ;
5634: LD_ADDR_EXP 88
5638: PUSH
5639: LD_INT 0
5641: ST_TO_ADDR
// sPowell := false ;
5642: LD_ADDR_EXP 89
5646: PUSH
5647: LD_INT 0
5649: ST_TO_ADDR
// sTeleport := false ;
5650: LD_ADDR_EXP 92
5654: PUSH
5655: LD_INT 0
5657: ST_TO_ADDR
// sOilTower := false ;
5658: LD_ADDR_EXP 94
5662: PUSH
5663: LD_INT 0
5665: ST_TO_ADDR
// sShovel := false ;
5666: LD_ADDR_EXP 95
5670: PUSH
5671: LD_INT 0
5673: ST_TO_ADDR
// sSheik := false ;
5674: LD_ADDR_EXP 96
5678: PUSH
5679: LD_INT 0
5681: ST_TO_ADDR
// sEarthquake := false ;
5682: LD_ADDR_EXP 98
5686: PUSH
5687: LD_INT 0
5689: ST_TO_ADDR
// sAI := false ;
5690: LD_ADDR_EXP 99
5694: PUSH
5695: LD_INT 0
5697: ST_TO_ADDR
// sCargo := false ;
5698: LD_ADDR_EXP 102
5702: PUSH
5703: LD_INT 0
5705: ST_TO_ADDR
// sDLaser := false ;
5706: LD_ADDR_EXP 103
5710: PUSH
5711: LD_INT 0
5713: ST_TO_ADDR
// sExchange := false ;
5714: LD_ADDR_EXP 104
5718: PUSH
5719: LD_INT 0
5721: ST_TO_ADDR
// sFac := false ;
5722: LD_ADDR_EXP 105
5726: PUSH
5727: LD_INT 0
5729: ST_TO_ADDR
// sPower := false ;
5730: LD_ADDR_EXP 106
5734: PUSH
5735: LD_INT 0
5737: ST_TO_ADDR
// sRandom := false ;
5738: LD_ADDR_EXP 107
5742: PUSH
5743: LD_INT 0
5745: ST_TO_ADDR
// sShield := false ;
5746: LD_ADDR_EXP 108
5750: PUSH
5751: LD_INT 0
5753: ST_TO_ADDR
// sTime := false ;
5754: LD_ADDR_EXP 109
5758: PUSH
5759: LD_INT 0
5761: ST_TO_ADDR
// sTools := false ;
5762: LD_ADDR_EXP 110
5766: PUSH
5767: LD_INT 0
5769: ST_TO_ADDR
// sSold := false ;
5770: LD_ADDR_EXP 75
5774: PUSH
5775: LD_INT 0
5777: ST_TO_ADDR
// sDiff := false ;
5778: LD_ADDR_EXP 76
5782: PUSH
5783: LD_INT 0
5785: ST_TO_ADDR
// sFog := false ;
5786: LD_ADDR_EXP 79
5790: PUSH
5791: LD_INT 0
5793: ST_TO_ADDR
// sReset := false ;
5794: LD_ADDR_EXP 80
5798: PUSH
5799: LD_INT 0
5801: ST_TO_ADDR
// sSun := false ;
5802: LD_ADDR_EXP 81
5806: PUSH
5807: LD_INT 0
5809: ST_TO_ADDR
// sTiger := false ;
5810: LD_ADDR_EXP 77
5814: PUSH
5815: LD_INT 0
5817: ST_TO_ADDR
// sBomb := false ;
5818: LD_ADDR_EXP 78
5822: PUSH
5823: LD_INT 0
5825: ST_TO_ADDR
// sWound := false ;
5826: LD_ADDR_EXP 86
5830: PUSH
5831: LD_INT 0
5833: ST_TO_ADDR
// sBetray := false ;
5834: LD_ADDR_EXP 90
5838: PUSH
5839: LD_INT 0
5841: ST_TO_ADDR
// sContamin := false ;
5842: LD_ADDR_EXP 91
5846: PUSH
5847: LD_INT 0
5849: ST_TO_ADDR
// sOil := false ;
5850: LD_ADDR_EXP 93
5854: PUSH
5855: LD_INT 0
5857: ST_TO_ADDR
// sStu := false ;
5858: LD_ADDR_EXP 97
5862: PUSH
5863: LD_INT 0
5865: ST_TO_ADDR
// sBazooka := false ;
5866: LD_ADDR_EXP 100
5870: PUSH
5871: LD_INT 0
5873: ST_TO_ADDR
// sMortar := false ;
5874: LD_ADDR_EXP 101
5878: PUSH
5879: LD_INT 0
5881: ST_TO_ADDR
// sRanger := false ;
5882: LD_ADDR_EXP 111
5886: PUSH
5887: LD_INT 0
5889: ST_TO_ADDR
// sComputer := false ;
5890: LD_ADDR_EXP 112
5894: PUSH
5895: LD_INT 0
5897: ST_TO_ADDR
// s30 := false ;
5898: LD_ADDR_EXP 113
5902: PUSH
5903: LD_INT 0
5905: ST_TO_ADDR
// s60 := false ;
5906: LD_ADDR_EXP 114
5910: PUSH
5911: LD_INT 0
5913: ST_TO_ADDR
// end ;
5914: LD_VAR 0 1
5918: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5919: LD_INT 0
5921: PPUSH
5922: PPUSH
5923: PPUSH
5924: PPUSH
5925: PPUSH
// result := [ ] ;
5926: LD_ADDR_VAR 0 1
5930: PUSH
5931: EMPTY
5932: ST_TO_ADDR
// if campaign_id = 1 then
5933: LD_OWVAR 69
5937: PUSH
5938: LD_INT 1
5940: EQUAL
5941: IFFALSE 9107
// begin case mission_number of 1 :
5943: LD_OWVAR 70
5947: PUSH
5948: LD_INT 1
5950: DOUBLE
5951: EQUAL
5952: IFTRUE 5956
5954: GO 6032
5956: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
5957: LD_ADDR_VAR 0 1
5961: PUSH
5962: LD_INT 2
5964: PUSH
5965: LD_INT 4
5967: PUSH
5968: LD_INT 11
5970: PUSH
5971: LD_INT 12
5973: PUSH
5974: LD_INT 15
5976: PUSH
5977: LD_INT 16
5979: PUSH
5980: LD_INT 22
5982: PUSH
5983: LD_INT 23
5985: PUSH
5986: LD_INT 26
5988: PUSH
5989: EMPTY
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: PUSH
6000: LD_INT 101
6002: PUSH
6003: LD_INT 102
6005: PUSH
6006: LD_INT 106
6008: PUSH
6009: LD_INT 116
6011: PUSH
6012: LD_INT 117
6014: PUSH
6015: LD_INT 118
6017: PUSH
6018: EMPTY
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: ST_TO_ADDR
6030: GO 9105
6032: LD_INT 2
6034: DOUBLE
6035: EQUAL
6036: IFTRUE 6040
6038: GO 6124
6040: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6041: LD_ADDR_VAR 0 1
6045: PUSH
6046: LD_INT 2
6048: PUSH
6049: LD_INT 4
6051: PUSH
6052: LD_INT 11
6054: PUSH
6055: LD_INT 12
6057: PUSH
6058: LD_INT 15
6060: PUSH
6061: LD_INT 16
6063: PUSH
6064: LD_INT 22
6066: PUSH
6067: LD_INT 23
6069: PUSH
6070: LD_INT 26
6072: PUSH
6073: EMPTY
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: PUSH
6084: LD_INT 101
6086: PUSH
6087: LD_INT 102
6089: PUSH
6090: LD_INT 105
6092: PUSH
6093: LD_INT 106
6095: PUSH
6096: LD_INT 108
6098: PUSH
6099: LD_INT 116
6101: PUSH
6102: LD_INT 117
6104: PUSH
6105: LD_INT 118
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: PUSH
6118: EMPTY
6119: LIST
6120: LIST
6121: ST_TO_ADDR
6122: GO 9105
6124: LD_INT 3
6126: DOUBLE
6127: EQUAL
6128: IFTRUE 6132
6130: GO 6220
6132: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6133: LD_ADDR_VAR 0 1
6137: PUSH
6138: LD_INT 2
6140: PUSH
6141: LD_INT 4
6143: PUSH
6144: LD_INT 5
6146: PUSH
6147: LD_INT 11
6149: PUSH
6150: LD_INT 12
6152: PUSH
6153: LD_INT 15
6155: PUSH
6156: LD_INT 16
6158: PUSH
6159: LD_INT 22
6161: PUSH
6162: LD_INT 26
6164: PUSH
6165: LD_INT 36
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: PUSH
6180: LD_INT 101
6182: PUSH
6183: LD_INT 102
6185: PUSH
6186: LD_INT 105
6188: PUSH
6189: LD_INT 106
6191: PUSH
6192: LD_INT 108
6194: PUSH
6195: LD_INT 116
6197: PUSH
6198: LD_INT 117
6200: PUSH
6201: LD_INT 118
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: ST_TO_ADDR
6218: GO 9105
6220: LD_INT 4
6222: DOUBLE
6223: EQUAL
6224: IFTRUE 6228
6226: GO 6324
6228: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6229: LD_ADDR_VAR 0 1
6233: PUSH
6234: LD_INT 2
6236: PUSH
6237: LD_INT 4
6239: PUSH
6240: LD_INT 5
6242: PUSH
6243: LD_INT 8
6245: PUSH
6246: LD_INT 11
6248: PUSH
6249: LD_INT 12
6251: PUSH
6252: LD_INT 15
6254: PUSH
6255: LD_INT 16
6257: PUSH
6258: LD_INT 22
6260: PUSH
6261: LD_INT 23
6263: PUSH
6264: LD_INT 26
6266: PUSH
6267: LD_INT 36
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: PUSH
6284: LD_INT 101
6286: PUSH
6287: LD_INT 102
6289: PUSH
6290: LD_INT 105
6292: PUSH
6293: LD_INT 106
6295: PUSH
6296: LD_INT 108
6298: PUSH
6299: LD_INT 116
6301: PUSH
6302: LD_INT 117
6304: PUSH
6305: LD_INT 118
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: ST_TO_ADDR
6322: GO 9105
6324: LD_INT 5
6326: DOUBLE
6327: EQUAL
6328: IFTRUE 6332
6330: GO 6444
6332: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6333: LD_ADDR_VAR 0 1
6337: PUSH
6338: LD_INT 2
6340: PUSH
6341: LD_INT 4
6343: PUSH
6344: LD_INT 5
6346: PUSH
6347: LD_INT 6
6349: PUSH
6350: LD_INT 8
6352: PUSH
6353: LD_INT 11
6355: PUSH
6356: LD_INT 12
6358: PUSH
6359: LD_INT 15
6361: PUSH
6362: LD_INT 16
6364: PUSH
6365: LD_INT 22
6367: PUSH
6368: LD_INT 23
6370: PUSH
6371: LD_INT 25
6373: PUSH
6374: LD_INT 26
6376: PUSH
6377: LD_INT 36
6379: PUSH
6380: EMPTY
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: PUSH
6396: LD_INT 101
6398: PUSH
6399: LD_INT 102
6401: PUSH
6402: LD_INT 105
6404: PUSH
6405: LD_INT 106
6407: PUSH
6408: LD_INT 108
6410: PUSH
6411: LD_INT 109
6413: PUSH
6414: LD_INT 112
6416: PUSH
6417: LD_INT 116
6419: PUSH
6420: LD_INT 117
6422: PUSH
6423: LD_INT 118
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: ST_TO_ADDR
6442: GO 9105
6444: LD_INT 6
6446: DOUBLE
6447: EQUAL
6448: IFTRUE 6452
6450: GO 6584
6452: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6453: LD_ADDR_VAR 0 1
6457: PUSH
6458: LD_INT 2
6460: PUSH
6461: LD_INT 4
6463: PUSH
6464: LD_INT 5
6466: PUSH
6467: LD_INT 6
6469: PUSH
6470: LD_INT 8
6472: PUSH
6473: LD_INT 11
6475: PUSH
6476: LD_INT 12
6478: PUSH
6479: LD_INT 15
6481: PUSH
6482: LD_INT 16
6484: PUSH
6485: LD_INT 20
6487: PUSH
6488: LD_INT 21
6490: PUSH
6491: LD_INT 22
6493: PUSH
6494: LD_INT 23
6496: PUSH
6497: LD_INT 25
6499: PUSH
6500: LD_INT 26
6502: PUSH
6503: LD_INT 30
6505: PUSH
6506: LD_INT 31
6508: PUSH
6509: LD_INT 32
6511: PUSH
6512: LD_INT 36
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: PUSH
6536: LD_INT 101
6538: PUSH
6539: LD_INT 102
6541: PUSH
6542: LD_INT 105
6544: PUSH
6545: LD_INT 106
6547: PUSH
6548: LD_INT 108
6550: PUSH
6551: LD_INT 109
6553: PUSH
6554: LD_INT 112
6556: PUSH
6557: LD_INT 116
6559: PUSH
6560: LD_INT 117
6562: PUSH
6563: LD_INT 118
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: ST_TO_ADDR
6582: GO 9105
6584: LD_INT 7
6586: DOUBLE
6587: EQUAL
6588: IFTRUE 6592
6590: GO 6704
6592: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6593: LD_ADDR_VAR 0 1
6597: PUSH
6598: LD_INT 2
6600: PUSH
6601: LD_INT 4
6603: PUSH
6604: LD_INT 5
6606: PUSH
6607: LD_INT 7
6609: PUSH
6610: LD_INT 11
6612: PUSH
6613: LD_INT 12
6615: PUSH
6616: LD_INT 15
6618: PUSH
6619: LD_INT 16
6621: PUSH
6622: LD_INT 20
6624: PUSH
6625: LD_INT 21
6627: PUSH
6628: LD_INT 22
6630: PUSH
6631: LD_INT 23
6633: PUSH
6634: LD_INT 25
6636: PUSH
6637: LD_INT 26
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: PUSH
6656: LD_INT 101
6658: PUSH
6659: LD_INT 102
6661: PUSH
6662: LD_INT 103
6664: PUSH
6665: LD_INT 105
6667: PUSH
6668: LD_INT 106
6670: PUSH
6671: LD_INT 108
6673: PUSH
6674: LD_INT 112
6676: PUSH
6677: LD_INT 116
6679: PUSH
6680: LD_INT 117
6682: PUSH
6683: LD_INT 118
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: ST_TO_ADDR
6702: GO 9105
6704: LD_INT 8
6706: DOUBLE
6707: EQUAL
6708: IFTRUE 6712
6710: GO 6852
6712: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
6713: LD_ADDR_VAR 0 1
6717: PUSH
6718: LD_INT 2
6720: PUSH
6721: LD_INT 4
6723: PUSH
6724: LD_INT 5
6726: PUSH
6727: LD_INT 6
6729: PUSH
6730: LD_INT 7
6732: PUSH
6733: LD_INT 8
6735: PUSH
6736: LD_INT 11
6738: PUSH
6739: LD_INT 12
6741: PUSH
6742: LD_INT 15
6744: PUSH
6745: LD_INT 16
6747: PUSH
6748: LD_INT 20
6750: PUSH
6751: LD_INT 21
6753: PUSH
6754: LD_INT 22
6756: PUSH
6757: LD_INT 23
6759: PUSH
6760: LD_INT 25
6762: PUSH
6763: LD_INT 26
6765: PUSH
6766: LD_INT 30
6768: PUSH
6769: LD_INT 31
6771: PUSH
6772: LD_INT 32
6774: PUSH
6775: LD_INT 36
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: PUSH
6800: LD_INT 101
6802: PUSH
6803: LD_INT 102
6805: PUSH
6806: LD_INT 103
6808: PUSH
6809: LD_INT 105
6811: PUSH
6812: LD_INT 106
6814: PUSH
6815: LD_INT 108
6817: PUSH
6818: LD_INT 109
6820: PUSH
6821: LD_INT 112
6823: PUSH
6824: LD_INT 116
6826: PUSH
6827: LD_INT 117
6829: PUSH
6830: LD_INT 118
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: ST_TO_ADDR
6850: GO 9105
6852: LD_INT 9
6854: DOUBLE
6855: EQUAL
6856: IFTRUE 6860
6858: GO 7008
6860: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
6861: LD_ADDR_VAR 0 1
6865: PUSH
6866: LD_INT 2
6868: PUSH
6869: LD_INT 4
6871: PUSH
6872: LD_INT 5
6874: PUSH
6875: LD_INT 6
6877: PUSH
6878: LD_INT 7
6880: PUSH
6881: LD_INT 8
6883: PUSH
6884: LD_INT 11
6886: PUSH
6887: LD_INT 12
6889: PUSH
6890: LD_INT 15
6892: PUSH
6893: LD_INT 16
6895: PUSH
6896: LD_INT 20
6898: PUSH
6899: LD_INT 21
6901: PUSH
6902: LD_INT 22
6904: PUSH
6905: LD_INT 23
6907: PUSH
6908: LD_INT 25
6910: PUSH
6911: LD_INT 26
6913: PUSH
6914: LD_INT 28
6916: PUSH
6917: LD_INT 30
6919: PUSH
6920: LD_INT 31
6922: PUSH
6923: LD_INT 32
6925: PUSH
6926: LD_INT 36
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: PUSH
6952: LD_INT 101
6954: PUSH
6955: LD_INT 102
6957: PUSH
6958: LD_INT 103
6960: PUSH
6961: LD_INT 105
6963: PUSH
6964: LD_INT 106
6966: PUSH
6967: LD_INT 108
6969: PUSH
6970: LD_INT 109
6972: PUSH
6973: LD_INT 112
6975: PUSH
6976: LD_INT 114
6978: PUSH
6979: LD_INT 116
6981: PUSH
6982: LD_INT 117
6984: PUSH
6985: LD_INT 118
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: ST_TO_ADDR
7006: GO 9105
7008: LD_INT 10
7010: DOUBLE
7011: EQUAL
7012: IFTRUE 7016
7014: GO 7212
7016: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7017: LD_ADDR_VAR 0 1
7021: PUSH
7022: LD_INT 2
7024: PUSH
7025: LD_INT 4
7027: PUSH
7028: LD_INT 5
7030: PUSH
7031: LD_INT 6
7033: PUSH
7034: LD_INT 7
7036: PUSH
7037: LD_INT 8
7039: PUSH
7040: LD_INT 9
7042: PUSH
7043: LD_INT 10
7045: PUSH
7046: LD_INT 11
7048: PUSH
7049: LD_INT 12
7051: PUSH
7052: LD_INT 13
7054: PUSH
7055: LD_INT 14
7057: PUSH
7058: LD_INT 15
7060: PUSH
7061: LD_INT 16
7063: PUSH
7064: LD_INT 17
7066: PUSH
7067: LD_INT 18
7069: PUSH
7070: LD_INT 19
7072: PUSH
7073: LD_INT 20
7075: PUSH
7076: LD_INT 21
7078: PUSH
7079: LD_INT 22
7081: PUSH
7082: LD_INT 23
7084: PUSH
7085: LD_INT 24
7087: PUSH
7088: LD_INT 25
7090: PUSH
7091: LD_INT 26
7093: PUSH
7094: LD_INT 28
7096: PUSH
7097: LD_INT 30
7099: PUSH
7100: LD_INT 31
7102: PUSH
7103: LD_INT 32
7105: PUSH
7106: LD_INT 36
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: PUSH
7140: LD_INT 101
7142: PUSH
7143: LD_INT 102
7145: PUSH
7146: LD_INT 103
7148: PUSH
7149: LD_INT 104
7151: PUSH
7152: LD_INT 105
7154: PUSH
7155: LD_INT 106
7157: PUSH
7158: LD_INT 107
7160: PUSH
7161: LD_INT 108
7163: PUSH
7164: LD_INT 109
7166: PUSH
7167: LD_INT 110
7169: PUSH
7170: LD_INT 111
7172: PUSH
7173: LD_INT 112
7175: PUSH
7176: LD_INT 114
7178: PUSH
7179: LD_INT 116
7181: PUSH
7182: LD_INT 117
7184: PUSH
7185: LD_INT 118
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: ST_TO_ADDR
7210: GO 9105
7212: LD_INT 11
7214: DOUBLE
7215: EQUAL
7216: IFTRUE 7220
7218: GO 7424
7220: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7221: LD_ADDR_VAR 0 1
7225: PUSH
7226: LD_INT 2
7228: PUSH
7229: LD_INT 3
7231: PUSH
7232: LD_INT 4
7234: PUSH
7235: LD_INT 5
7237: PUSH
7238: LD_INT 6
7240: PUSH
7241: LD_INT 7
7243: PUSH
7244: LD_INT 8
7246: PUSH
7247: LD_INT 9
7249: PUSH
7250: LD_INT 10
7252: PUSH
7253: LD_INT 11
7255: PUSH
7256: LD_INT 12
7258: PUSH
7259: LD_INT 13
7261: PUSH
7262: LD_INT 14
7264: PUSH
7265: LD_INT 15
7267: PUSH
7268: LD_INT 16
7270: PUSH
7271: LD_INT 17
7273: PUSH
7274: LD_INT 18
7276: PUSH
7277: LD_INT 19
7279: PUSH
7280: LD_INT 20
7282: PUSH
7283: LD_INT 21
7285: PUSH
7286: LD_INT 22
7288: PUSH
7289: LD_INT 23
7291: PUSH
7292: LD_INT 24
7294: PUSH
7295: LD_INT 25
7297: PUSH
7298: LD_INT 26
7300: PUSH
7301: LD_INT 28
7303: PUSH
7304: LD_INT 30
7306: PUSH
7307: LD_INT 31
7309: PUSH
7310: LD_INT 32
7312: PUSH
7313: LD_INT 34
7315: PUSH
7316: LD_INT 36
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: LIST
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: PUSH
7352: LD_INT 101
7354: PUSH
7355: LD_INT 102
7357: PUSH
7358: LD_INT 103
7360: PUSH
7361: LD_INT 104
7363: PUSH
7364: LD_INT 105
7366: PUSH
7367: LD_INT 106
7369: PUSH
7370: LD_INT 107
7372: PUSH
7373: LD_INT 108
7375: PUSH
7376: LD_INT 109
7378: PUSH
7379: LD_INT 110
7381: PUSH
7382: LD_INT 111
7384: PUSH
7385: LD_INT 112
7387: PUSH
7388: LD_INT 114
7390: PUSH
7391: LD_INT 116
7393: PUSH
7394: LD_INT 117
7396: PUSH
7397: LD_INT 118
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: ST_TO_ADDR
7422: GO 9105
7424: LD_INT 12
7426: DOUBLE
7427: EQUAL
7428: IFTRUE 7432
7430: GO 7652
7432: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7433: LD_ADDR_VAR 0 1
7437: PUSH
7438: LD_INT 1
7440: PUSH
7441: LD_INT 2
7443: PUSH
7444: LD_INT 3
7446: PUSH
7447: LD_INT 4
7449: PUSH
7450: LD_INT 5
7452: PUSH
7453: LD_INT 6
7455: PUSH
7456: LD_INT 7
7458: PUSH
7459: LD_INT 8
7461: PUSH
7462: LD_INT 9
7464: PUSH
7465: LD_INT 10
7467: PUSH
7468: LD_INT 11
7470: PUSH
7471: LD_INT 12
7473: PUSH
7474: LD_INT 13
7476: PUSH
7477: LD_INT 14
7479: PUSH
7480: LD_INT 15
7482: PUSH
7483: LD_INT 16
7485: PUSH
7486: LD_INT 17
7488: PUSH
7489: LD_INT 18
7491: PUSH
7492: LD_INT 19
7494: PUSH
7495: LD_INT 20
7497: PUSH
7498: LD_INT 21
7500: PUSH
7501: LD_INT 22
7503: PUSH
7504: LD_INT 23
7506: PUSH
7507: LD_INT 24
7509: PUSH
7510: LD_INT 25
7512: PUSH
7513: LD_INT 26
7515: PUSH
7516: LD_INT 27
7518: PUSH
7519: LD_INT 28
7521: PUSH
7522: LD_INT 30
7524: PUSH
7525: LD_INT 31
7527: PUSH
7528: LD_INT 32
7530: PUSH
7531: LD_INT 33
7533: PUSH
7534: LD_INT 34
7536: PUSH
7537: LD_INT 36
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: PUSH
7576: LD_INT 101
7578: PUSH
7579: LD_INT 102
7581: PUSH
7582: LD_INT 103
7584: PUSH
7585: LD_INT 104
7587: PUSH
7588: LD_INT 105
7590: PUSH
7591: LD_INT 106
7593: PUSH
7594: LD_INT 107
7596: PUSH
7597: LD_INT 108
7599: PUSH
7600: LD_INT 109
7602: PUSH
7603: LD_INT 110
7605: PUSH
7606: LD_INT 111
7608: PUSH
7609: LD_INT 112
7611: PUSH
7612: LD_INT 113
7614: PUSH
7615: LD_INT 114
7617: PUSH
7618: LD_INT 116
7620: PUSH
7621: LD_INT 117
7623: PUSH
7624: LD_INT 118
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: ST_TO_ADDR
7650: GO 9105
7652: LD_INT 13
7654: DOUBLE
7655: EQUAL
7656: IFTRUE 7660
7658: GO 7868
7660: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
7661: LD_ADDR_VAR 0 1
7665: PUSH
7666: LD_INT 1
7668: PUSH
7669: LD_INT 2
7671: PUSH
7672: LD_INT 3
7674: PUSH
7675: LD_INT 4
7677: PUSH
7678: LD_INT 5
7680: PUSH
7681: LD_INT 8
7683: PUSH
7684: LD_INT 9
7686: PUSH
7687: LD_INT 10
7689: PUSH
7690: LD_INT 11
7692: PUSH
7693: LD_INT 12
7695: PUSH
7696: LD_INT 14
7698: PUSH
7699: LD_INT 15
7701: PUSH
7702: LD_INT 16
7704: PUSH
7705: LD_INT 17
7707: PUSH
7708: LD_INT 18
7710: PUSH
7711: LD_INT 19
7713: PUSH
7714: LD_INT 20
7716: PUSH
7717: LD_INT 21
7719: PUSH
7720: LD_INT 22
7722: PUSH
7723: LD_INT 23
7725: PUSH
7726: LD_INT 24
7728: PUSH
7729: LD_INT 25
7731: PUSH
7732: LD_INT 26
7734: PUSH
7735: LD_INT 27
7737: PUSH
7738: LD_INT 28
7740: PUSH
7741: LD_INT 30
7743: PUSH
7744: LD_INT 31
7746: PUSH
7747: LD_INT 32
7749: PUSH
7750: LD_INT 33
7752: PUSH
7753: LD_INT 34
7755: PUSH
7756: LD_INT 36
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 101
7794: PUSH
7795: LD_INT 102
7797: PUSH
7798: LD_INT 103
7800: PUSH
7801: LD_INT 104
7803: PUSH
7804: LD_INT 105
7806: PUSH
7807: LD_INT 106
7809: PUSH
7810: LD_INT 107
7812: PUSH
7813: LD_INT 108
7815: PUSH
7816: LD_INT 109
7818: PUSH
7819: LD_INT 110
7821: PUSH
7822: LD_INT 111
7824: PUSH
7825: LD_INT 112
7827: PUSH
7828: LD_INT 113
7830: PUSH
7831: LD_INT 114
7833: PUSH
7834: LD_INT 116
7836: PUSH
7837: LD_INT 117
7839: PUSH
7840: LD_INT 118
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: ST_TO_ADDR
7866: GO 9105
7868: LD_INT 14
7870: DOUBLE
7871: EQUAL
7872: IFTRUE 7876
7874: GO 8100
7876: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
7877: LD_ADDR_VAR 0 1
7881: PUSH
7882: LD_INT 1
7884: PUSH
7885: LD_INT 2
7887: PUSH
7888: LD_INT 3
7890: PUSH
7891: LD_INT 4
7893: PUSH
7894: LD_INT 5
7896: PUSH
7897: LD_INT 6
7899: PUSH
7900: LD_INT 7
7902: PUSH
7903: LD_INT 8
7905: PUSH
7906: LD_INT 9
7908: PUSH
7909: LD_INT 10
7911: PUSH
7912: LD_INT 11
7914: PUSH
7915: LD_INT 12
7917: PUSH
7918: LD_INT 13
7920: PUSH
7921: LD_INT 14
7923: PUSH
7924: LD_INT 15
7926: PUSH
7927: LD_INT 16
7929: PUSH
7930: LD_INT 17
7932: PUSH
7933: LD_INT 18
7935: PUSH
7936: LD_INT 19
7938: PUSH
7939: LD_INT 20
7941: PUSH
7942: LD_INT 21
7944: PUSH
7945: LD_INT 22
7947: PUSH
7948: LD_INT 23
7950: PUSH
7951: LD_INT 24
7953: PUSH
7954: LD_INT 25
7956: PUSH
7957: LD_INT 26
7959: PUSH
7960: LD_INT 27
7962: PUSH
7963: LD_INT 28
7965: PUSH
7966: LD_INT 29
7968: PUSH
7969: LD_INT 30
7971: PUSH
7972: LD_INT 31
7974: PUSH
7975: LD_INT 32
7977: PUSH
7978: LD_INT 33
7980: PUSH
7981: LD_INT 34
7983: PUSH
7984: LD_INT 36
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: PUSH
8024: LD_INT 101
8026: PUSH
8027: LD_INT 102
8029: PUSH
8030: LD_INT 103
8032: PUSH
8033: LD_INT 104
8035: PUSH
8036: LD_INT 105
8038: PUSH
8039: LD_INT 106
8041: PUSH
8042: LD_INT 107
8044: PUSH
8045: LD_INT 108
8047: PUSH
8048: LD_INT 109
8050: PUSH
8051: LD_INT 110
8053: PUSH
8054: LD_INT 111
8056: PUSH
8057: LD_INT 112
8059: PUSH
8060: LD_INT 113
8062: PUSH
8063: LD_INT 114
8065: PUSH
8066: LD_INT 116
8068: PUSH
8069: LD_INT 117
8071: PUSH
8072: LD_INT 118
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: ST_TO_ADDR
8098: GO 9105
8100: LD_INT 15
8102: DOUBLE
8103: EQUAL
8104: IFTRUE 8108
8106: GO 8332
8108: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8109: LD_ADDR_VAR 0 1
8113: PUSH
8114: LD_INT 1
8116: PUSH
8117: LD_INT 2
8119: PUSH
8120: LD_INT 3
8122: PUSH
8123: LD_INT 4
8125: PUSH
8126: LD_INT 5
8128: PUSH
8129: LD_INT 6
8131: PUSH
8132: LD_INT 7
8134: PUSH
8135: LD_INT 8
8137: PUSH
8138: LD_INT 9
8140: PUSH
8141: LD_INT 10
8143: PUSH
8144: LD_INT 11
8146: PUSH
8147: LD_INT 12
8149: PUSH
8150: LD_INT 13
8152: PUSH
8153: LD_INT 14
8155: PUSH
8156: LD_INT 15
8158: PUSH
8159: LD_INT 16
8161: PUSH
8162: LD_INT 17
8164: PUSH
8165: LD_INT 18
8167: PUSH
8168: LD_INT 19
8170: PUSH
8171: LD_INT 20
8173: PUSH
8174: LD_INT 21
8176: PUSH
8177: LD_INT 22
8179: PUSH
8180: LD_INT 23
8182: PUSH
8183: LD_INT 24
8185: PUSH
8186: LD_INT 25
8188: PUSH
8189: LD_INT 26
8191: PUSH
8192: LD_INT 27
8194: PUSH
8195: LD_INT 28
8197: PUSH
8198: LD_INT 29
8200: PUSH
8201: LD_INT 30
8203: PUSH
8204: LD_INT 31
8206: PUSH
8207: LD_INT 32
8209: PUSH
8210: LD_INT 33
8212: PUSH
8213: LD_INT 34
8215: PUSH
8216: LD_INT 36
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: PUSH
8256: LD_INT 101
8258: PUSH
8259: LD_INT 102
8261: PUSH
8262: LD_INT 103
8264: PUSH
8265: LD_INT 104
8267: PUSH
8268: LD_INT 105
8270: PUSH
8271: LD_INT 106
8273: PUSH
8274: LD_INT 107
8276: PUSH
8277: LD_INT 108
8279: PUSH
8280: LD_INT 109
8282: PUSH
8283: LD_INT 110
8285: PUSH
8286: LD_INT 111
8288: PUSH
8289: LD_INT 112
8291: PUSH
8292: LD_INT 113
8294: PUSH
8295: LD_INT 114
8297: PUSH
8298: LD_INT 116
8300: PUSH
8301: LD_INT 117
8303: PUSH
8304: LD_INT 118
8306: PUSH
8307: EMPTY
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: ST_TO_ADDR
8330: GO 9105
8332: LD_INT 16
8334: DOUBLE
8335: EQUAL
8336: IFTRUE 8340
8338: GO 8476
8340: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8341: LD_ADDR_VAR 0 1
8345: PUSH
8346: LD_INT 2
8348: PUSH
8349: LD_INT 4
8351: PUSH
8352: LD_INT 5
8354: PUSH
8355: LD_INT 7
8357: PUSH
8358: LD_INT 11
8360: PUSH
8361: LD_INT 12
8363: PUSH
8364: LD_INT 15
8366: PUSH
8367: LD_INT 16
8369: PUSH
8370: LD_INT 20
8372: PUSH
8373: LD_INT 21
8375: PUSH
8376: LD_INT 22
8378: PUSH
8379: LD_INT 23
8381: PUSH
8382: LD_INT 25
8384: PUSH
8385: LD_INT 26
8387: PUSH
8388: LD_INT 30
8390: PUSH
8391: LD_INT 31
8393: PUSH
8394: LD_INT 32
8396: PUSH
8397: LD_INT 33
8399: PUSH
8400: LD_INT 34
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: PUSH
8424: LD_INT 101
8426: PUSH
8427: LD_INT 102
8429: PUSH
8430: LD_INT 103
8432: PUSH
8433: LD_INT 106
8435: PUSH
8436: LD_INT 108
8438: PUSH
8439: LD_INT 112
8441: PUSH
8442: LD_INT 113
8444: PUSH
8445: LD_INT 114
8447: PUSH
8448: LD_INT 116
8450: PUSH
8451: LD_INT 117
8453: PUSH
8454: LD_INT 118
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: ST_TO_ADDR
8474: GO 9105
8476: LD_INT 17
8478: DOUBLE
8479: EQUAL
8480: IFTRUE 8484
8482: GO 8708
8484: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8485: LD_ADDR_VAR 0 1
8489: PUSH
8490: LD_INT 1
8492: PUSH
8493: LD_INT 2
8495: PUSH
8496: LD_INT 3
8498: PUSH
8499: LD_INT 4
8501: PUSH
8502: LD_INT 5
8504: PUSH
8505: LD_INT 6
8507: PUSH
8508: LD_INT 7
8510: PUSH
8511: LD_INT 8
8513: PUSH
8514: LD_INT 9
8516: PUSH
8517: LD_INT 10
8519: PUSH
8520: LD_INT 11
8522: PUSH
8523: LD_INT 12
8525: PUSH
8526: LD_INT 13
8528: PUSH
8529: LD_INT 14
8531: PUSH
8532: LD_INT 15
8534: PUSH
8535: LD_INT 16
8537: PUSH
8538: LD_INT 17
8540: PUSH
8541: LD_INT 18
8543: PUSH
8544: LD_INT 19
8546: PUSH
8547: LD_INT 20
8549: PUSH
8550: LD_INT 21
8552: PUSH
8553: LD_INT 22
8555: PUSH
8556: LD_INT 23
8558: PUSH
8559: LD_INT 24
8561: PUSH
8562: LD_INT 25
8564: PUSH
8565: LD_INT 26
8567: PUSH
8568: LD_INT 27
8570: PUSH
8571: LD_INT 28
8573: PUSH
8574: LD_INT 29
8576: PUSH
8577: LD_INT 30
8579: PUSH
8580: LD_INT 31
8582: PUSH
8583: LD_INT 32
8585: PUSH
8586: LD_INT 33
8588: PUSH
8589: LD_INT 34
8591: PUSH
8592: LD_INT 36
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: PUSH
8632: LD_INT 101
8634: PUSH
8635: LD_INT 102
8637: PUSH
8638: LD_INT 103
8640: PUSH
8641: LD_INT 104
8643: PUSH
8644: LD_INT 105
8646: PUSH
8647: LD_INT 106
8649: PUSH
8650: LD_INT 107
8652: PUSH
8653: LD_INT 108
8655: PUSH
8656: LD_INT 109
8658: PUSH
8659: LD_INT 110
8661: PUSH
8662: LD_INT 111
8664: PUSH
8665: LD_INT 112
8667: PUSH
8668: LD_INT 113
8670: PUSH
8671: LD_INT 114
8673: PUSH
8674: LD_INT 116
8676: PUSH
8677: LD_INT 117
8679: PUSH
8680: LD_INT 118
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: ST_TO_ADDR
8706: GO 9105
8708: LD_INT 18
8710: DOUBLE
8711: EQUAL
8712: IFTRUE 8716
8714: GO 8864
8716: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
8717: LD_ADDR_VAR 0 1
8721: PUSH
8722: LD_INT 2
8724: PUSH
8725: LD_INT 4
8727: PUSH
8728: LD_INT 5
8730: PUSH
8731: LD_INT 7
8733: PUSH
8734: LD_INT 11
8736: PUSH
8737: LD_INT 12
8739: PUSH
8740: LD_INT 15
8742: PUSH
8743: LD_INT 16
8745: PUSH
8746: LD_INT 20
8748: PUSH
8749: LD_INT 21
8751: PUSH
8752: LD_INT 22
8754: PUSH
8755: LD_INT 23
8757: PUSH
8758: LD_INT 25
8760: PUSH
8761: LD_INT 26
8763: PUSH
8764: LD_INT 30
8766: PUSH
8767: LD_INT 31
8769: PUSH
8770: LD_INT 32
8772: PUSH
8773: LD_INT 33
8775: PUSH
8776: LD_INT 34
8778: PUSH
8779: LD_INT 35
8781: PUSH
8782: LD_INT 36
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: PUSH
8808: LD_INT 101
8810: PUSH
8811: LD_INT 102
8813: PUSH
8814: LD_INT 103
8816: PUSH
8817: LD_INT 106
8819: PUSH
8820: LD_INT 108
8822: PUSH
8823: LD_INT 112
8825: PUSH
8826: LD_INT 113
8828: PUSH
8829: LD_INT 114
8831: PUSH
8832: LD_INT 115
8834: PUSH
8835: LD_INT 116
8837: PUSH
8838: LD_INT 117
8840: PUSH
8841: LD_INT 118
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: ST_TO_ADDR
8862: GO 9105
8864: LD_INT 19
8866: DOUBLE
8867: EQUAL
8868: IFTRUE 8872
8870: GO 9104
8872: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
8873: LD_ADDR_VAR 0 1
8877: PUSH
8878: LD_INT 1
8880: PUSH
8881: LD_INT 2
8883: PUSH
8884: LD_INT 3
8886: PUSH
8887: LD_INT 4
8889: PUSH
8890: LD_INT 5
8892: PUSH
8893: LD_INT 6
8895: PUSH
8896: LD_INT 7
8898: PUSH
8899: LD_INT 8
8901: PUSH
8902: LD_INT 9
8904: PUSH
8905: LD_INT 10
8907: PUSH
8908: LD_INT 11
8910: PUSH
8911: LD_INT 12
8913: PUSH
8914: LD_INT 13
8916: PUSH
8917: LD_INT 14
8919: PUSH
8920: LD_INT 15
8922: PUSH
8923: LD_INT 16
8925: PUSH
8926: LD_INT 17
8928: PUSH
8929: LD_INT 18
8931: PUSH
8932: LD_INT 19
8934: PUSH
8935: LD_INT 20
8937: PUSH
8938: LD_INT 21
8940: PUSH
8941: LD_INT 22
8943: PUSH
8944: LD_INT 23
8946: PUSH
8947: LD_INT 24
8949: PUSH
8950: LD_INT 25
8952: PUSH
8953: LD_INT 26
8955: PUSH
8956: LD_INT 27
8958: PUSH
8959: LD_INT 28
8961: PUSH
8962: LD_INT 29
8964: PUSH
8965: LD_INT 30
8967: PUSH
8968: LD_INT 31
8970: PUSH
8971: LD_INT 32
8973: PUSH
8974: LD_INT 33
8976: PUSH
8977: LD_INT 34
8979: PUSH
8980: LD_INT 35
8982: PUSH
8983: LD_INT 36
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: PUSH
9024: LD_INT 101
9026: PUSH
9027: LD_INT 102
9029: PUSH
9030: LD_INT 103
9032: PUSH
9033: LD_INT 104
9035: PUSH
9036: LD_INT 105
9038: PUSH
9039: LD_INT 106
9041: PUSH
9042: LD_INT 107
9044: PUSH
9045: LD_INT 108
9047: PUSH
9048: LD_INT 109
9050: PUSH
9051: LD_INT 110
9053: PUSH
9054: LD_INT 111
9056: PUSH
9057: LD_INT 112
9059: PUSH
9060: LD_INT 113
9062: PUSH
9063: LD_INT 114
9065: PUSH
9066: LD_INT 115
9068: PUSH
9069: LD_INT 116
9071: PUSH
9072: LD_INT 117
9074: PUSH
9075: LD_INT 118
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: PUSH
9098: EMPTY
9099: LIST
9100: LIST
9101: ST_TO_ADDR
9102: GO 9105
9104: POP
// end else
9105: GO 9336
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9107: LD_ADDR_VAR 0 1
9111: PUSH
9112: LD_INT 1
9114: PUSH
9115: LD_INT 2
9117: PUSH
9118: LD_INT 3
9120: PUSH
9121: LD_INT 4
9123: PUSH
9124: LD_INT 5
9126: PUSH
9127: LD_INT 6
9129: PUSH
9130: LD_INT 7
9132: PUSH
9133: LD_INT 8
9135: PUSH
9136: LD_INT 9
9138: PUSH
9139: LD_INT 10
9141: PUSH
9142: LD_INT 11
9144: PUSH
9145: LD_INT 12
9147: PUSH
9148: LD_INT 13
9150: PUSH
9151: LD_INT 14
9153: PUSH
9154: LD_INT 15
9156: PUSH
9157: LD_INT 16
9159: PUSH
9160: LD_INT 17
9162: PUSH
9163: LD_INT 18
9165: PUSH
9166: LD_INT 19
9168: PUSH
9169: LD_INT 20
9171: PUSH
9172: LD_INT 21
9174: PUSH
9175: LD_INT 22
9177: PUSH
9178: LD_INT 23
9180: PUSH
9181: LD_INT 24
9183: PUSH
9184: LD_INT 25
9186: PUSH
9187: LD_INT 26
9189: PUSH
9190: LD_INT 27
9192: PUSH
9193: LD_INT 28
9195: PUSH
9196: LD_INT 29
9198: PUSH
9199: LD_INT 30
9201: PUSH
9202: LD_INT 31
9204: PUSH
9205: LD_INT 32
9207: PUSH
9208: LD_INT 33
9210: PUSH
9211: LD_INT 34
9213: PUSH
9214: LD_INT 35
9216: PUSH
9217: LD_INT 36
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: PUSH
9258: LD_INT 101
9260: PUSH
9261: LD_INT 102
9263: PUSH
9264: LD_INT 103
9266: PUSH
9267: LD_INT 104
9269: PUSH
9270: LD_INT 105
9272: PUSH
9273: LD_INT 106
9275: PUSH
9276: LD_INT 107
9278: PUSH
9279: LD_INT 108
9281: PUSH
9282: LD_INT 109
9284: PUSH
9285: LD_INT 110
9287: PUSH
9288: LD_INT 111
9290: PUSH
9291: LD_INT 112
9293: PUSH
9294: LD_INT 113
9296: PUSH
9297: LD_INT 114
9299: PUSH
9300: LD_INT 115
9302: PUSH
9303: LD_INT 116
9305: PUSH
9306: LD_INT 117
9308: PUSH
9309: LD_INT 118
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: ST_TO_ADDR
// if result then
9336: LD_VAR 0 1
9340: IFFALSE 9629
// begin normal :=  ;
9342: LD_ADDR_VAR 0 3
9346: PUSH
9347: LD_STRING 
9349: ST_TO_ADDR
// hardcore :=  ;
9350: LD_ADDR_VAR 0 4
9354: PUSH
9355: LD_STRING 
9357: ST_TO_ADDR
// for i = 1 to normalCounter do
9358: LD_ADDR_VAR 0 5
9362: PUSH
9363: DOUBLE
9364: LD_INT 1
9366: DEC
9367: ST_TO_ADDR
9368: LD_EXP 59
9372: PUSH
9373: FOR_TO
9374: IFFALSE 9475
// begin tmp := 0 ;
9376: LD_ADDR_VAR 0 2
9380: PUSH
9381: LD_STRING 0
9383: ST_TO_ADDR
// if result [ 1 ] then
9384: LD_VAR 0 1
9388: PUSH
9389: LD_INT 1
9391: ARRAY
9392: IFFALSE 9457
// if result [ 1 ] [ 1 ] = i then
9394: LD_VAR 0 1
9398: PUSH
9399: LD_INT 1
9401: ARRAY
9402: PUSH
9403: LD_INT 1
9405: ARRAY
9406: PUSH
9407: LD_VAR 0 5
9411: EQUAL
9412: IFFALSE 9457
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9414: LD_ADDR_VAR 0 1
9418: PUSH
9419: LD_VAR 0 1
9423: PPUSH
9424: LD_INT 1
9426: PPUSH
9427: LD_VAR 0 1
9431: PUSH
9432: LD_INT 1
9434: ARRAY
9435: PPUSH
9436: LD_INT 1
9438: PPUSH
9439: CALL_OW 3
9443: PPUSH
9444: CALL_OW 1
9448: ST_TO_ADDR
// tmp := 1 ;
9449: LD_ADDR_VAR 0 2
9453: PUSH
9454: LD_STRING 1
9456: ST_TO_ADDR
// end ; normal := normal & tmp ;
9457: LD_ADDR_VAR 0 3
9461: PUSH
9462: LD_VAR 0 3
9466: PUSH
9467: LD_VAR 0 2
9471: STR
9472: ST_TO_ADDR
// end ;
9473: GO 9373
9475: POP
9476: POP
// for i = 1 to hardcoreCounter do
9477: LD_ADDR_VAR 0 5
9481: PUSH
9482: DOUBLE
9483: LD_INT 1
9485: DEC
9486: ST_TO_ADDR
9487: LD_EXP 60
9491: PUSH
9492: FOR_TO
9493: IFFALSE 9598
// begin tmp := 0 ;
9495: LD_ADDR_VAR 0 2
9499: PUSH
9500: LD_STRING 0
9502: ST_TO_ADDR
// if result [ 2 ] then
9503: LD_VAR 0 1
9507: PUSH
9508: LD_INT 2
9510: ARRAY
9511: IFFALSE 9580
// if result [ 2 ] [ 1 ] = 100 + i then
9513: LD_VAR 0 1
9517: PUSH
9518: LD_INT 2
9520: ARRAY
9521: PUSH
9522: LD_INT 1
9524: ARRAY
9525: PUSH
9526: LD_INT 100
9528: PUSH
9529: LD_VAR 0 5
9533: PLUS
9534: EQUAL
9535: IFFALSE 9580
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9537: LD_ADDR_VAR 0 1
9541: PUSH
9542: LD_VAR 0 1
9546: PPUSH
9547: LD_INT 2
9549: PPUSH
9550: LD_VAR 0 1
9554: PUSH
9555: LD_INT 2
9557: ARRAY
9558: PPUSH
9559: LD_INT 1
9561: PPUSH
9562: CALL_OW 3
9566: PPUSH
9567: CALL_OW 1
9571: ST_TO_ADDR
// tmp := 1 ;
9572: LD_ADDR_VAR 0 2
9576: PUSH
9577: LD_STRING 1
9579: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9580: LD_ADDR_VAR 0 4
9584: PUSH
9585: LD_VAR 0 4
9589: PUSH
9590: LD_VAR 0 2
9594: STR
9595: ST_TO_ADDR
// end ;
9596: GO 9492
9598: POP
9599: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9600: LD_STRING getStreamItemsFromMission("
9602: PUSH
9603: LD_VAR 0 3
9607: STR
9608: PUSH
9609: LD_STRING ","
9611: STR
9612: PUSH
9613: LD_VAR 0 4
9617: STR
9618: PUSH
9619: LD_STRING ")
9621: STR
9622: PPUSH
9623: CALL_OW 559
// end else
9627: GO 9636
// ToLua ( getStreamItemsFromMission("","") ) ;
9629: LD_STRING getStreamItemsFromMission("","")
9631: PPUSH
9632: CALL_OW 559
// end ;
9636: LD_VAR 0 1
9640: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9641: LD_EXP 58
9645: PUSH
9646: LD_EXP 63
9650: AND
9651: IFFALSE 9775
9653: GO 9655
9655: DISABLE
9656: LD_INT 0
9658: PPUSH
9659: PPUSH
// begin enable ;
9660: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9661: LD_ADDR_VAR 0 2
9665: PUSH
9666: LD_INT 22
9668: PUSH
9669: LD_OWVAR 2
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: PUSH
9678: LD_INT 2
9680: PUSH
9681: LD_INT 34
9683: PUSH
9684: LD_INT 7
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PUSH
9691: LD_INT 34
9693: PUSH
9694: LD_INT 45
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: PUSH
9701: LD_INT 34
9703: PUSH
9704: LD_INT 28
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: PUSH
9711: LD_INT 34
9713: PUSH
9714: LD_INT 47
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: PUSH
9721: EMPTY
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: PPUSH
9732: CALL_OW 69
9736: ST_TO_ADDR
// if not tmp then
9737: LD_VAR 0 2
9741: NOT
9742: IFFALSE 9746
// exit ;
9744: GO 9775
// for i in tmp do
9746: LD_ADDR_VAR 0 1
9750: PUSH
9751: LD_VAR 0 2
9755: PUSH
9756: FOR_IN
9757: IFFALSE 9773
// begin SetLives ( i , 0 ) ;
9759: LD_VAR 0 1
9763: PPUSH
9764: LD_INT 0
9766: PPUSH
9767: CALL_OW 234
// end ;
9771: GO 9756
9773: POP
9774: POP
// end ;
9775: PPOPN 2
9777: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9778: LD_EXP 58
9782: PUSH
9783: LD_EXP 64
9787: AND
9788: IFFALSE 9872
9790: GO 9792
9792: DISABLE
9793: LD_INT 0
9795: PPUSH
9796: PPUSH
// begin enable ;
9797: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9798: LD_ADDR_VAR 0 2
9802: PUSH
9803: LD_INT 22
9805: PUSH
9806: LD_OWVAR 2
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: PUSH
9815: LD_INT 32
9817: PUSH
9818: LD_INT 3
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: PPUSH
9829: CALL_OW 69
9833: ST_TO_ADDR
// if not tmp then
9834: LD_VAR 0 2
9838: NOT
9839: IFFALSE 9843
// exit ;
9841: GO 9872
// for i in tmp do
9843: LD_ADDR_VAR 0 1
9847: PUSH
9848: LD_VAR 0 2
9852: PUSH
9853: FOR_IN
9854: IFFALSE 9870
// begin SetLives ( i , 0 ) ;
9856: LD_VAR 0 1
9860: PPUSH
9861: LD_INT 0
9863: PPUSH
9864: CALL_OW 234
// end ;
9868: GO 9853
9870: POP
9871: POP
// end ;
9872: PPOPN 2
9874: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9875: LD_EXP 58
9879: PUSH
9880: LD_EXP 61
9884: AND
9885: IFFALSE 9978
9887: GO 9889
9889: DISABLE
9890: LD_INT 0
9892: PPUSH
// begin enable ;
9893: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9894: LD_ADDR_VAR 0 1
9898: PUSH
9899: LD_INT 22
9901: PUSH
9902: LD_OWVAR 2
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PUSH
9911: LD_INT 2
9913: PUSH
9914: LD_INT 25
9916: PUSH
9917: LD_INT 5
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PUSH
9924: LD_INT 25
9926: PUSH
9927: LD_INT 9
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PUSH
9934: LD_INT 25
9936: PUSH
9937: LD_INT 8
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: PPUSH
9954: CALL_OW 69
9958: PUSH
9959: FOR_IN
9960: IFFALSE 9976
// begin SetClass ( i , 1 ) ;
9962: LD_VAR 0 1
9966: PPUSH
9967: LD_INT 1
9969: PPUSH
9970: CALL_OW 336
// end ;
9974: GO 9959
9976: POP
9977: POP
// end ;
9978: PPOPN 1
9980: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9981: LD_EXP 58
9985: PUSH
9986: LD_EXP 62
9990: AND
9991: PUSH
9992: LD_OWVAR 65
9996: PUSH
9997: LD_INT 7
9999: LESS
10000: AND
10001: IFFALSE 10015
10003: GO 10005
10005: DISABLE
// begin enable ;
10006: ENABLE
// game_speed := 7 ;
10007: LD_ADDR_OWVAR 65
10011: PUSH
10012: LD_INT 7
10014: ST_TO_ADDR
// end ;
10015: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10016: LD_EXP 58
10020: PUSH
10021: LD_EXP 65
10025: AND
10026: IFFALSE 10228
10028: GO 10030
10030: DISABLE
10031: LD_INT 0
10033: PPUSH
10034: PPUSH
10035: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10036: LD_ADDR_VAR 0 3
10040: PUSH
10041: LD_INT 81
10043: PUSH
10044: LD_OWVAR 2
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PUSH
10053: LD_INT 21
10055: PUSH
10056: LD_INT 1
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: PPUSH
10067: CALL_OW 69
10071: ST_TO_ADDR
// if not tmp then
10072: LD_VAR 0 3
10076: NOT
10077: IFFALSE 10081
// exit ;
10079: GO 10228
// if tmp > 5 then
10081: LD_VAR 0 3
10085: PUSH
10086: LD_INT 5
10088: GREATER
10089: IFFALSE 10101
// k := 5 else
10091: LD_ADDR_VAR 0 2
10095: PUSH
10096: LD_INT 5
10098: ST_TO_ADDR
10099: GO 10111
// k := tmp ;
10101: LD_ADDR_VAR 0 2
10105: PUSH
10106: LD_VAR 0 3
10110: ST_TO_ADDR
// for i := 1 to k do
10111: LD_ADDR_VAR 0 1
10115: PUSH
10116: DOUBLE
10117: LD_INT 1
10119: DEC
10120: ST_TO_ADDR
10121: LD_VAR 0 2
10125: PUSH
10126: FOR_TO
10127: IFFALSE 10226
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10129: LD_VAR 0 3
10133: PUSH
10134: LD_VAR 0 1
10138: ARRAY
10139: PPUSH
10140: LD_VAR 0 1
10144: PUSH
10145: LD_INT 4
10147: MOD
10148: PUSH
10149: LD_INT 1
10151: PLUS
10152: PPUSH
10153: CALL_OW 259
10157: PUSH
10158: LD_INT 10
10160: LESS
10161: IFFALSE 10224
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10163: LD_VAR 0 3
10167: PUSH
10168: LD_VAR 0 1
10172: ARRAY
10173: PPUSH
10174: LD_VAR 0 1
10178: PUSH
10179: LD_INT 4
10181: MOD
10182: PUSH
10183: LD_INT 1
10185: PLUS
10186: PPUSH
10187: LD_VAR 0 3
10191: PUSH
10192: LD_VAR 0 1
10196: ARRAY
10197: PPUSH
10198: LD_VAR 0 1
10202: PUSH
10203: LD_INT 4
10205: MOD
10206: PUSH
10207: LD_INT 1
10209: PLUS
10210: PPUSH
10211: CALL_OW 259
10215: PUSH
10216: LD_INT 1
10218: PLUS
10219: PPUSH
10220: CALL_OW 237
10224: GO 10126
10226: POP
10227: POP
// end ;
10228: PPOPN 3
10230: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10231: LD_EXP 58
10235: PUSH
10236: LD_EXP 66
10240: AND
10241: IFFALSE 10261
10243: GO 10245
10245: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10246: LD_INT 4
10248: PPUSH
10249: LD_OWVAR 2
10253: PPUSH
10254: LD_INT 0
10256: PPUSH
10257: CALL_OW 324
10261: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10262: LD_EXP 58
10266: PUSH
10267: LD_EXP 95
10271: AND
10272: IFFALSE 10292
10274: GO 10276
10276: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10277: LD_INT 19
10279: PPUSH
10280: LD_OWVAR 2
10284: PPUSH
10285: LD_INT 0
10287: PPUSH
10288: CALL_OW 324
10292: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10293: LD_EXP 58
10297: PUSH
10298: LD_EXP 67
10302: AND
10303: IFFALSE 10405
10305: GO 10307
10307: DISABLE
10308: LD_INT 0
10310: PPUSH
10311: PPUSH
// begin enable ;
10312: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10313: LD_ADDR_VAR 0 2
10317: PUSH
10318: LD_INT 22
10320: PUSH
10321: LD_OWVAR 2
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: PUSH
10330: LD_INT 2
10332: PUSH
10333: LD_INT 34
10335: PUSH
10336: LD_INT 11
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: PUSH
10343: LD_INT 34
10345: PUSH
10346: LD_INT 30
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: LIST
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: PPUSH
10362: CALL_OW 69
10366: ST_TO_ADDR
// if not tmp then
10367: LD_VAR 0 2
10371: NOT
10372: IFFALSE 10376
// exit ;
10374: GO 10405
// for i in tmp do
10376: LD_ADDR_VAR 0 1
10380: PUSH
10381: LD_VAR 0 2
10385: PUSH
10386: FOR_IN
10387: IFFALSE 10403
// begin SetLives ( i , 0 ) ;
10389: LD_VAR 0 1
10393: PPUSH
10394: LD_INT 0
10396: PPUSH
10397: CALL_OW 234
// end ;
10401: GO 10386
10403: POP
10404: POP
// end ;
10405: PPOPN 2
10407: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10408: LD_EXP 58
10412: PUSH
10413: LD_EXP 68
10417: AND
10418: IFFALSE 10438
10420: GO 10422
10422: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10423: LD_INT 32
10425: PPUSH
10426: LD_OWVAR 2
10430: PPUSH
10431: LD_INT 0
10433: PPUSH
10434: CALL_OW 324
10438: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10439: LD_EXP 58
10443: PUSH
10444: LD_EXP 69
10448: AND
10449: IFFALSE 10630
10451: GO 10453
10453: DISABLE
10454: LD_INT 0
10456: PPUSH
10457: PPUSH
10458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10459: LD_ADDR_VAR 0 2
10463: PUSH
10464: LD_INT 22
10466: PUSH
10467: LD_OWVAR 2
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: LD_INT 33
10478: PUSH
10479: LD_INT 3
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: PPUSH
10490: CALL_OW 69
10494: ST_TO_ADDR
// if not tmp then
10495: LD_VAR 0 2
10499: NOT
10500: IFFALSE 10504
// exit ;
10502: GO 10630
// side := 0 ;
10504: LD_ADDR_VAR 0 3
10508: PUSH
10509: LD_INT 0
10511: ST_TO_ADDR
// for i := 1 to 8 do
10512: LD_ADDR_VAR 0 1
10516: PUSH
10517: DOUBLE
10518: LD_INT 1
10520: DEC
10521: ST_TO_ADDR
10522: LD_INT 8
10524: PUSH
10525: FOR_TO
10526: IFFALSE 10574
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10528: LD_OWVAR 2
10532: PUSH
10533: LD_VAR 0 1
10537: NONEQUAL
10538: PUSH
10539: LD_OWVAR 2
10543: PPUSH
10544: LD_VAR 0 1
10548: PPUSH
10549: CALL_OW 81
10553: PUSH
10554: LD_INT 2
10556: EQUAL
10557: AND
10558: IFFALSE 10572
// begin side := i ;
10560: LD_ADDR_VAR 0 3
10564: PUSH
10565: LD_VAR 0 1
10569: ST_TO_ADDR
// break ;
10570: GO 10574
// end ;
10572: GO 10525
10574: POP
10575: POP
// if not side then
10576: LD_VAR 0 3
10580: NOT
10581: IFFALSE 10585
// exit ;
10583: GO 10630
// for i := 1 to tmp do
10585: LD_ADDR_VAR 0 1
10589: PUSH
10590: DOUBLE
10591: LD_INT 1
10593: DEC
10594: ST_TO_ADDR
10595: LD_VAR 0 2
10599: PUSH
10600: FOR_TO
10601: IFFALSE 10628
// if Prob ( 60 ) then
10603: LD_INT 60
10605: PPUSH
10606: CALL_OW 13
10610: IFFALSE 10626
// SetSide ( i , side ) ;
10612: LD_VAR 0 1
10616: PPUSH
10617: LD_VAR 0 3
10621: PPUSH
10622: CALL_OW 235
10626: GO 10600
10628: POP
10629: POP
// end ;
10630: PPOPN 3
10632: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10633: LD_EXP 58
10637: PUSH
10638: LD_EXP 71
10642: AND
10643: IFFALSE 10762
10645: GO 10647
10647: DISABLE
10648: LD_INT 0
10650: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10651: LD_ADDR_VAR 0 1
10655: PUSH
10656: LD_INT 22
10658: PUSH
10659: LD_OWVAR 2
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: LD_INT 21
10670: PUSH
10671: LD_INT 1
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: LD_INT 3
10680: PUSH
10681: LD_INT 23
10683: PUSH
10684: LD_INT 0
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: LIST
10699: PPUSH
10700: CALL_OW 69
10704: PUSH
10705: FOR_IN
10706: IFFALSE 10760
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10708: LD_VAR 0 1
10712: PPUSH
10713: CALL_OW 257
10717: PUSH
10718: LD_INT 1
10720: PUSH
10721: LD_INT 2
10723: PUSH
10724: LD_INT 3
10726: PUSH
10727: LD_INT 4
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: IN
10736: IFFALSE 10758
// SetClass ( un , rand ( 1 , 4 ) ) ;
10738: LD_VAR 0 1
10742: PPUSH
10743: LD_INT 1
10745: PPUSH
10746: LD_INT 4
10748: PPUSH
10749: CALL_OW 12
10753: PPUSH
10754: CALL_OW 336
10758: GO 10705
10760: POP
10761: POP
// end ;
10762: PPOPN 1
10764: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10765: LD_EXP 58
10769: PUSH
10770: LD_EXP 70
10774: AND
10775: IFFALSE 10854
10777: GO 10779
10779: DISABLE
10780: LD_INT 0
10782: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10783: LD_ADDR_VAR 0 1
10787: PUSH
10788: LD_INT 22
10790: PUSH
10791: LD_OWVAR 2
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: LD_INT 21
10802: PUSH
10803: LD_INT 3
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PPUSH
10814: CALL_OW 69
10818: ST_TO_ADDR
// if not tmp then
10819: LD_VAR 0 1
10823: NOT
10824: IFFALSE 10828
// exit ;
10826: GO 10854
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10828: LD_VAR 0 1
10832: PUSH
10833: LD_INT 1
10835: PPUSH
10836: LD_VAR 0 1
10840: PPUSH
10841: CALL_OW 12
10845: ARRAY
10846: PPUSH
10847: LD_INT 100
10849: PPUSH
10850: CALL_OW 234
// end ;
10854: PPOPN 1
10856: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10857: LD_EXP 58
10861: PUSH
10862: LD_EXP 72
10866: AND
10867: IFFALSE 10965
10869: GO 10871
10871: DISABLE
10872: LD_INT 0
10874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10875: LD_ADDR_VAR 0 1
10879: PUSH
10880: LD_INT 22
10882: PUSH
10883: LD_OWVAR 2
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: PUSH
10892: LD_INT 21
10894: PUSH
10895: LD_INT 1
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: PPUSH
10906: CALL_OW 69
10910: ST_TO_ADDR
// if not tmp then
10911: LD_VAR 0 1
10915: NOT
10916: IFFALSE 10920
// exit ;
10918: GO 10965
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10920: LD_VAR 0 1
10924: PUSH
10925: LD_INT 1
10927: PPUSH
10928: LD_VAR 0 1
10932: PPUSH
10933: CALL_OW 12
10937: ARRAY
10938: PPUSH
10939: LD_INT 1
10941: PPUSH
10942: LD_INT 4
10944: PPUSH
10945: CALL_OW 12
10949: PPUSH
10950: LD_INT 3000
10952: PPUSH
10953: LD_INT 9000
10955: PPUSH
10956: CALL_OW 12
10960: PPUSH
10961: CALL_OW 492
// end ;
10965: PPOPN 1
10967: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10968: LD_EXP 58
10972: PUSH
10973: LD_EXP 73
10977: AND
10978: IFFALSE 10998
10980: GO 10982
10982: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10983: LD_INT 1
10985: PPUSH
10986: LD_OWVAR 2
10990: PPUSH
10991: LD_INT 0
10993: PPUSH
10994: CALL_OW 324
10998: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10999: LD_EXP 58
11003: PUSH
11004: LD_EXP 74
11008: AND
11009: IFFALSE 11092
11011: GO 11013
11013: DISABLE
11014: LD_INT 0
11016: PPUSH
11017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11018: LD_ADDR_VAR 0 2
11022: PUSH
11023: LD_INT 22
11025: PUSH
11026: LD_OWVAR 2
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: PUSH
11035: LD_INT 21
11037: PUSH
11038: LD_INT 3
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: PPUSH
11049: CALL_OW 69
11053: ST_TO_ADDR
// if not tmp then
11054: LD_VAR 0 2
11058: NOT
11059: IFFALSE 11063
// exit ;
11061: GO 11092
// for i in tmp do
11063: LD_ADDR_VAR 0 1
11067: PUSH
11068: LD_VAR 0 2
11072: PUSH
11073: FOR_IN
11074: IFFALSE 11090
// SetBLevel ( i , 10 ) ;
11076: LD_VAR 0 1
11080: PPUSH
11081: LD_INT 10
11083: PPUSH
11084: CALL_OW 241
11088: GO 11073
11090: POP
11091: POP
// end ;
11092: PPOPN 2
11094: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11095: LD_EXP 58
11099: PUSH
11100: LD_EXP 75
11104: AND
11105: IFFALSE 11216
11107: GO 11109
11109: DISABLE
11110: LD_INT 0
11112: PPUSH
11113: PPUSH
11114: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11115: LD_ADDR_VAR 0 3
11119: PUSH
11120: LD_INT 22
11122: PUSH
11123: LD_OWVAR 2
11127: PUSH
11128: EMPTY
11129: LIST
11130: LIST
11131: PUSH
11132: LD_INT 25
11134: PUSH
11135: LD_INT 1
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: PPUSH
11146: CALL_OW 69
11150: ST_TO_ADDR
// if not tmp then
11151: LD_VAR 0 3
11155: NOT
11156: IFFALSE 11160
// exit ;
11158: GO 11216
// un := tmp [ rand ( 1 , tmp ) ] ;
11160: LD_ADDR_VAR 0 2
11164: PUSH
11165: LD_VAR 0 3
11169: PUSH
11170: LD_INT 1
11172: PPUSH
11173: LD_VAR 0 3
11177: PPUSH
11178: CALL_OW 12
11182: ARRAY
11183: ST_TO_ADDR
// if Crawls ( un ) then
11184: LD_VAR 0 2
11188: PPUSH
11189: CALL_OW 318
11193: IFFALSE 11204
// ComWalk ( un ) ;
11195: LD_VAR 0 2
11199: PPUSH
11200: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11204: LD_VAR 0 2
11208: PPUSH
11209: LD_INT 5
11211: PPUSH
11212: CALL_OW 336
// end ;
11216: PPOPN 3
11218: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11219: LD_EXP 58
11223: PUSH
11224: LD_EXP 76
11228: AND
11229: PUSH
11230: LD_OWVAR 67
11234: PUSH
11235: LD_INT 4
11237: LESS
11238: AND
11239: IFFALSE 11258
11241: GO 11243
11243: DISABLE
// begin Difficulty := Difficulty + 1 ;
11244: LD_ADDR_OWVAR 67
11248: PUSH
11249: LD_OWVAR 67
11253: PUSH
11254: LD_INT 1
11256: PLUS
11257: ST_TO_ADDR
// end ;
11258: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11259: LD_EXP 58
11263: PUSH
11264: LD_EXP 77
11268: AND
11269: IFFALSE 11372
11271: GO 11273
11273: DISABLE
11274: LD_INT 0
11276: PPUSH
// begin for i := 1 to 5 do
11277: LD_ADDR_VAR 0 1
11281: PUSH
11282: DOUBLE
11283: LD_INT 1
11285: DEC
11286: ST_TO_ADDR
11287: LD_INT 5
11289: PUSH
11290: FOR_TO
11291: IFFALSE 11370
// begin uc_nation := nation_nature ;
11293: LD_ADDR_OWVAR 21
11297: PUSH
11298: LD_INT 0
11300: ST_TO_ADDR
// uc_side := 0 ;
11301: LD_ADDR_OWVAR 20
11305: PUSH
11306: LD_INT 0
11308: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11309: LD_ADDR_OWVAR 29
11313: PUSH
11314: LD_INT 12
11316: PUSH
11317: LD_INT 12
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: ST_TO_ADDR
// hc_agressivity := 20 ;
11324: LD_ADDR_OWVAR 35
11328: PUSH
11329: LD_INT 20
11331: ST_TO_ADDR
// hc_class := class_tiger ;
11332: LD_ADDR_OWVAR 28
11336: PUSH
11337: LD_INT 14
11339: ST_TO_ADDR
// hc_gallery :=  ;
11340: LD_ADDR_OWVAR 33
11344: PUSH
11345: LD_STRING 
11347: ST_TO_ADDR
// hc_name :=  ;
11348: LD_ADDR_OWVAR 26
11352: PUSH
11353: LD_STRING 
11355: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11356: CALL_OW 44
11360: PPUSH
11361: LD_INT 0
11363: PPUSH
11364: CALL_OW 51
// end ;
11368: GO 11290
11370: POP
11371: POP
// end ;
11372: PPOPN 1
11374: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11375: LD_EXP 58
11379: PUSH
11380: LD_EXP 78
11384: AND
11385: IFFALSE 11394
11387: GO 11389
11389: DISABLE
// StreamSibBomb ;
11390: CALL 11395 0 0
11394: END
// export function StreamSibBomb ; var i , x , y ; begin
11395: LD_INT 0
11397: PPUSH
11398: PPUSH
11399: PPUSH
11400: PPUSH
// result := false ;
11401: LD_ADDR_VAR 0 1
11405: PUSH
11406: LD_INT 0
11408: ST_TO_ADDR
// for i := 1 to 16 do
11409: LD_ADDR_VAR 0 2
11413: PUSH
11414: DOUBLE
11415: LD_INT 1
11417: DEC
11418: ST_TO_ADDR
11419: LD_INT 16
11421: PUSH
11422: FOR_TO
11423: IFFALSE 11622
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11425: LD_ADDR_VAR 0 3
11429: PUSH
11430: LD_INT 10
11432: PUSH
11433: LD_INT 20
11435: PUSH
11436: LD_INT 30
11438: PUSH
11439: LD_INT 40
11441: PUSH
11442: LD_INT 50
11444: PUSH
11445: LD_INT 60
11447: PUSH
11448: LD_INT 70
11450: PUSH
11451: LD_INT 80
11453: PUSH
11454: LD_INT 90
11456: PUSH
11457: LD_INT 100
11459: PUSH
11460: LD_INT 110
11462: PUSH
11463: LD_INT 120
11465: PUSH
11466: LD_INT 130
11468: PUSH
11469: LD_INT 140
11471: PUSH
11472: LD_INT 150
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: PUSH
11492: LD_INT 1
11494: PPUSH
11495: LD_INT 15
11497: PPUSH
11498: CALL_OW 12
11502: ARRAY
11503: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11504: LD_ADDR_VAR 0 4
11508: PUSH
11509: LD_INT 10
11511: PUSH
11512: LD_INT 20
11514: PUSH
11515: LD_INT 30
11517: PUSH
11518: LD_INT 40
11520: PUSH
11521: LD_INT 50
11523: PUSH
11524: LD_INT 60
11526: PUSH
11527: LD_INT 70
11529: PUSH
11530: LD_INT 80
11532: PUSH
11533: LD_INT 90
11535: PUSH
11536: LD_INT 100
11538: PUSH
11539: LD_INT 110
11541: PUSH
11542: LD_INT 120
11544: PUSH
11545: LD_INT 130
11547: PUSH
11548: LD_INT 140
11550: PUSH
11551: LD_INT 150
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: PUSH
11571: LD_INT 1
11573: PPUSH
11574: LD_INT 15
11576: PPUSH
11577: CALL_OW 12
11581: ARRAY
11582: ST_TO_ADDR
// if ValidHex ( x , y ) then
11583: LD_VAR 0 3
11587: PPUSH
11588: LD_VAR 0 4
11592: PPUSH
11593: CALL_OW 488
11597: IFFALSE 11620
// begin result := [ x , y ] ;
11599: LD_ADDR_VAR 0 1
11603: PUSH
11604: LD_VAR 0 3
11608: PUSH
11609: LD_VAR 0 4
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: ST_TO_ADDR
// break ;
11618: GO 11622
// end ; end ;
11620: GO 11422
11622: POP
11623: POP
// if result then
11624: LD_VAR 0 1
11628: IFFALSE 11688
// begin ToLua ( playSibBomb() ) ;
11630: LD_STRING playSibBomb()
11632: PPUSH
11633: CALL_OW 559
// wait ( 0 0$14 ) ;
11637: LD_INT 490
11639: PPUSH
11640: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11644: LD_VAR 0 1
11648: PUSH
11649: LD_INT 1
11651: ARRAY
11652: PPUSH
11653: LD_VAR 0 1
11657: PUSH
11658: LD_INT 2
11660: ARRAY
11661: PPUSH
11662: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11666: LD_VAR 0 1
11670: PUSH
11671: LD_INT 1
11673: ARRAY
11674: PPUSH
11675: LD_VAR 0 1
11679: PUSH
11680: LD_INT 2
11682: ARRAY
11683: PPUSH
11684: CALL_OW 429
// end ; end ;
11688: LD_VAR 0 1
11692: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11693: LD_EXP 58
11697: PUSH
11698: LD_EXP 80
11702: AND
11703: IFFALSE 11715
11705: GO 11707
11707: DISABLE
// YouLost (  ) ;
11708: LD_STRING 
11710: PPUSH
11711: CALL_OW 104
11715: END
// every 0 0$1 trigger StreamModeActive and sFog do
11716: LD_EXP 58
11720: PUSH
11721: LD_EXP 79
11725: AND
11726: IFFALSE 11740
11728: GO 11730
11730: DISABLE
// FogOff ( your_side ) ;
11731: LD_OWVAR 2
11735: PPUSH
11736: CALL_OW 344
11740: END
// every 0 0$1 trigger StreamModeActive and sSun do
11741: LD_EXP 58
11745: PUSH
11746: LD_EXP 81
11750: AND
11751: IFFALSE 11779
11753: GO 11755
11755: DISABLE
// begin solar_recharge_percent := 0 ;
11756: LD_ADDR_OWVAR 79
11760: PUSH
11761: LD_INT 0
11763: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11764: LD_INT 10500
11766: PPUSH
11767: CALL_OW 67
// solar_recharge_percent := 100 ;
11771: LD_ADDR_OWVAR 79
11775: PUSH
11776: LD_INT 100
11778: ST_TO_ADDR
// end ;
11779: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11780: LD_EXP 58
11784: PUSH
11785: LD_EXP 82
11789: AND
11790: IFFALSE 12029
11792: GO 11794
11794: DISABLE
11795: LD_INT 0
11797: PPUSH
11798: PPUSH
11799: PPUSH
// begin tmp := [ ] ;
11800: LD_ADDR_VAR 0 3
11804: PUSH
11805: EMPTY
11806: ST_TO_ADDR
// for i := 1 to 6 do
11807: LD_ADDR_VAR 0 1
11811: PUSH
11812: DOUBLE
11813: LD_INT 1
11815: DEC
11816: ST_TO_ADDR
11817: LD_INT 6
11819: PUSH
11820: FOR_TO
11821: IFFALSE 11926
// begin uc_nation := nation_nature ;
11823: LD_ADDR_OWVAR 21
11827: PUSH
11828: LD_INT 0
11830: ST_TO_ADDR
// uc_side := 0 ;
11831: LD_ADDR_OWVAR 20
11835: PUSH
11836: LD_INT 0
11838: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11839: LD_ADDR_OWVAR 29
11843: PUSH
11844: LD_INT 12
11846: PUSH
11847: LD_INT 12
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: ST_TO_ADDR
// hc_agressivity := 20 ;
11854: LD_ADDR_OWVAR 35
11858: PUSH
11859: LD_INT 20
11861: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11862: LD_ADDR_OWVAR 28
11866: PUSH
11867: LD_INT 17
11869: ST_TO_ADDR
// hc_gallery :=  ;
11870: LD_ADDR_OWVAR 33
11874: PUSH
11875: LD_STRING 
11877: ST_TO_ADDR
// hc_name :=  ;
11878: LD_ADDR_OWVAR 26
11882: PUSH
11883: LD_STRING 
11885: ST_TO_ADDR
// un := CreateHuman ;
11886: LD_ADDR_VAR 0 2
11890: PUSH
11891: CALL_OW 44
11895: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11896: LD_VAR 0 2
11900: PPUSH
11901: LD_INT 1
11903: PPUSH
11904: CALL_OW 51
// tmp := tmp ^ un ;
11908: LD_ADDR_VAR 0 3
11912: PUSH
11913: LD_VAR 0 3
11917: PUSH
11918: LD_VAR 0 2
11922: ADD
11923: ST_TO_ADDR
// end ;
11924: GO 11820
11926: POP
11927: POP
// repeat wait ( 0 0$1 ) ;
11928: LD_INT 35
11930: PPUSH
11931: CALL_OW 67
// for un in tmp do
11935: LD_ADDR_VAR 0 2
11939: PUSH
11940: LD_VAR 0 3
11944: PUSH
11945: FOR_IN
11946: IFFALSE 12020
// begin if IsDead ( un ) then
11948: LD_VAR 0 2
11952: PPUSH
11953: CALL_OW 301
11957: IFFALSE 11977
// begin tmp := tmp diff un ;
11959: LD_ADDR_VAR 0 3
11963: PUSH
11964: LD_VAR 0 3
11968: PUSH
11969: LD_VAR 0 2
11973: DIFF
11974: ST_TO_ADDR
// continue ;
11975: GO 11945
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11977: LD_VAR 0 2
11981: PPUSH
11982: LD_INT 3
11984: PUSH
11985: LD_INT 22
11987: PUSH
11988: LD_INT 0
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PPUSH
11999: CALL_OW 69
12003: PPUSH
12004: LD_VAR 0 2
12008: PPUSH
12009: CALL_OW 74
12013: PPUSH
12014: CALL_OW 115
// end ;
12018: GO 11945
12020: POP
12021: POP
// until not tmp ;
12022: LD_VAR 0 3
12026: NOT
12027: IFFALSE 11928
// end ;
12029: PPOPN 3
12031: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12032: LD_EXP 58
12036: PUSH
12037: LD_EXP 83
12041: AND
12042: IFFALSE 12096
12044: GO 12046
12046: DISABLE
// begin ToLua ( displayTroll(); ) ;
12047: LD_STRING displayTroll();
12049: PPUSH
12050: CALL_OW 559
// wait ( 3 3$00 ) ;
12054: LD_INT 6300
12056: PPUSH
12057: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12061: LD_STRING hideTroll();
12063: PPUSH
12064: CALL_OW 559
// wait ( 1 1$00 ) ;
12068: LD_INT 2100
12070: PPUSH
12071: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12075: LD_STRING displayTroll();
12077: PPUSH
12078: CALL_OW 559
// wait ( 1 1$00 ) ;
12082: LD_INT 2100
12084: PPUSH
12085: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12089: LD_STRING hideTroll();
12091: PPUSH
12092: CALL_OW 559
// end ;
12096: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12097: LD_EXP 58
12101: PUSH
12102: LD_EXP 84
12106: AND
12107: IFFALSE 12170
12109: GO 12111
12111: DISABLE
12112: LD_INT 0
12114: PPUSH
// begin p := 0 ;
12115: LD_ADDR_VAR 0 1
12119: PUSH
12120: LD_INT 0
12122: ST_TO_ADDR
// repeat game_speed := 1 ;
12123: LD_ADDR_OWVAR 65
12127: PUSH
12128: LD_INT 1
12130: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12131: LD_INT 35
12133: PPUSH
12134: CALL_OW 67
// p := p + 1 ;
12138: LD_ADDR_VAR 0 1
12142: PUSH
12143: LD_VAR 0 1
12147: PUSH
12148: LD_INT 1
12150: PLUS
12151: ST_TO_ADDR
// until p >= 60 ;
12152: LD_VAR 0 1
12156: PUSH
12157: LD_INT 60
12159: GREATEREQUAL
12160: IFFALSE 12123
// game_speed := 4 ;
12162: LD_ADDR_OWVAR 65
12166: PUSH
12167: LD_INT 4
12169: ST_TO_ADDR
// end ;
12170: PPOPN 1
12172: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12173: LD_EXP 58
12177: PUSH
12178: LD_EXP 85
12182: AND
12183: IFFALSE 12329
12185: GO 12187
12187: DISABLE
12188: LD_INT 0
12190: PPUSH
12191: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12192: LD_ADDR_VAR 0 1
12196: PUSH
12197: LD_INT 22
12199: PUSH
12200: LD_OWVAR 2
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: PUSH
12209: LD_INT 2
12211: PUSH
12212: LD_INT 30
12214: PUSH
12215: LD_INT 0
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: PUSH
12222: LD_INT 30
12224: PUSH
12225: LD_INT 1
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: LIST
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PPUSH
12241: CALL_OW 69
12245: ST_TO_ADDR
// if not depot then
12246: LD_VAR 0 1
12250: NOT
12251: IFFALSE 12255
// exit ;
12253: GO 12329
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12255: LD_ADDR_VAR 0 2
12259: PUSH
12260: LD_VAR 0 1
12264: PUSH
12265: LD_INT 1
12267: PPUSH
12268: LD_VAR 0 1
12272: PPUSH
12273: CALL_OW 12
12277: ARRAY
12278: PPUSH
12279: CALL_OW 274
12283: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12284: LD_VAR 0 2
12288: PPUSH
12289: LD_INT 1
12291: PPUSH
12292: LD_INT 0
12294: PPUSH
12295: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12299: LD_VAR 0 2
12303: PPUSH
12304: LD_INT 2
12306: PPUSH
12307: LD_INT 0
12309: PPUSH
12310: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12314: LD_VAR 0 2
12318: PPUSH
12319: LD_INT 3
12321: PPUSH
12322: LD_INT 0
12324: PPUSH
12325: CALL_OW 277
// end ;
12329: PPOPN 2
12331: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12332: LD_EXP 58
12336: PUSH
12337: LD_EXP 86
12341: AND
12342: IFFALSE 12439
12344: GO 12346
12346: DISABLE
12347: LD_INT 0
12349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12350: LD_ADDR_VAR 0 1
12354: PUSH
12355: LD_INT 22
12357: PUSH
12358: LD_OWVAR 2
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PUSH
12367: LD_INT 21
12369: PUSH
12370: LD_INT 1
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PUSH
12377: LD_INT 3
12379: PUSH
12380: LD_INT 23
12382: PUSH
12383: LD_INT 0
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PUSH
12394: EMPTY
12395: LIST
12396: LIST
12397: LIST
12398: PPUSH
12399: CALL_OW 69
12403: ST_TO_ADDR
// if not tmp then
12404: LD_VAR 0 1
12408: NOT
12409: IFFALSE 12413
// exit ;
12411: GO 12439
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12413: LD_VAR 0 1
12417: PUSH
12418: LD_INT 1
12420: PPUSH
12421: LD_VAR 0 1
12425: PPUSH
12426: CALL_OW 12
12430: ARRAY
12431: PPUSH
12432: LD_INT 200
12434: PPUSH
12435: CALL_OW 234
// end ;
12439: PPOPN 1
12441: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12442: LD_EXP 58
12446: PUSH
12447: LD_EXP 87
12451: AND
12452: IFFALSE 12531
12454: GO 12456
12456: DISABLE
12457: LD_INT 0
12459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12460: LD_ADDR_VAR 0 1
12464: PUSH
12465: LD_INT 22
12467: PUSH
12468: LD_OWVAR 2
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PUSH
12477: LD_INT 21
12479: PUSH
12480: LD_INT 2
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PPUSH
12491: CALL_OW 69
12495: ST_TO_ADDR
// if not tmp then
12496: LD_VAR 0 1
12500: NOT
12501: IFFALSE 12505
// exit ;
12503: GO 12531
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12505: LD_VAR 0 1
12509: PUSH
12510: LD_INT 1
12512: PPUSH
12513: LD_VAR 0 1
12517: PPUSH
12518: CALL_OW 12
12522: ARRAY
12523: PPUSH
12524: LD_INT 60
12526: PPUSH
12527: CALL_OW 234
// end ;
12531: PPOPN 1
12533: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12534: LD_EXP 58
12538: PUSH
12539: LD_EXP 88
12543: AND
12544: IFFALSE 12643
12546: GO 12548
12548: DISABLE
12549: LD_INT 0
12551: PPUSH
12552: PPUSH
// begin enable ;
12553: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12554: LD_ADDR_VAR 0 1
12558: PUSH
12559: LD_INT 22
12561: PUSH
12562: LD_OWVAR 2
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: PUSH
12571: LD_INT 61
12573: PUSH
12574: EMPTY
12575: LIST
12576: PUSH
12577: LD_INT 33
12579: PUSH
12580: LD_INT 2
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: LIST
12591: PPUSH
12592: CALL_OW 69
12596: ST_TO_ADDR
// if not tmp then
12597: LD_VAR 0 1
12601: NOT
12602: IFFALSE 12606
// exit ;
12604: GO 12643
// for i in tmp do
12606: LD_ADDR_VAR 0 2
12610: PUSH
12611: LD_VAR 0 1
12615: PUSH
12616: FOR_IN
12617: IFFALSE 12641
// if IsControledBy ( i ) then
12619: LD_VAR 0 2
12623: PPUSH
12624: CALL_OW 312
12628: IFFALSE 12639
// ComUnlink ( i ) ;
12630: LD_VAR 0 2
12634: PPUSH
12635: CALL_OW 136
12639: GO 12616
12641: POP
12642: POP
// end ;
12643: PPOPN 2
12645: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12646: LD_EXP 58
12650: PUSH
12651: LD_EXP 89
12655: AND
12656: IFFALSE 12796
12658: GO 12660
12660: DISABLE
12661: LD_INT 0
12663: PPUSH
12664: PPUSH
// begin ToLua ( displayPowell(); ) ;
12665: LD_STRING displayPowell();
12667: PPUSH
12668: CALL_OW 559
// uc_side := 0 ;
12672: LD_ADDR_OWVAR 20
12676: PUSH
12677: LD_INT 0
12679: ST_TO_ADDR
// uc_nation := 2 ;
12680: LD_ADDR_OWVAR 21
12684: PUSH
12685: LD_INT 2
12687: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12688: LD_ADDR_OWVAR 37
12692: PUSH
12693: LD_INT 14
12695: ST_TO_ADDR
// vc_engine := engine_siberite ;
12696: LD_ADDR_OWVAR 39
12700: PUSH
12701: LD_INT 3
12703: ST_TO_ADDR
// vc_control := control_apeman ;
12704: LD_ADDR_OWVAR 38
12708: PUSH
12709: LD_INT 5
12711: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12712: LD_ADDR_OWVAR 40
12716: PUSH
12717: LD_INT 29
12719: ST_TO_ADDR
// un := CreateVehicle ;
12720: LD_ADDR_VAR 0 2
12724: PUSH
12725: CALL_OW 45
12729: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12730: LD_VAR 0 2
12734: PPUSH
12735: LD_INT 1
12737: PPUSH
12738: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12742: LD_INT 35
12744: PPUSH
12745: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12749: LD_VAR 0 2
12753: PPUSH
12754: LD_INT 22
12756: PUSH
12757: LD_OWVAR 2
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: PPUSH
12766: CALL_OW 69
12770: PPUSH
12771: LD_VAR 0 2
12775: PPUSH
12776: CALL_OW 74
12780: PPUSH
12781: CALL_OW 115
// until IsDead ( un ) ;
12785: LD_VAR 0 2
12789: PPUSH
12790: CALL_OW 301
12794: IFFALSE 12742
// end ;
12796: PPOPN 2
12798: END
// every 0 0$1 trigger StreamModeActive and sStu do
12799: LD_EXP 58
12803: PUSH
12804: LD_EXP 97
12808: AND
12809: IFFALSE 12825
12811: GO 12813
12813: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12814: LD_STRING displayStucuk();
12816: PPUSH
12817: CALL_OW 559
// ResetFog ;
12821: CALL_OW 335
// end ;
12825: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12826: LD_EXP 58
12830: PUSH
12831: LD_EXP 90
12835: AND
12836: IFFALSE 12977
12838: GO 12840
12840: DISABLE
12841: LD_INT 0
12843: PPUSH
12844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12845: LD_ADDR_VAR 0 2
12849: PUSH
12850: LD_INT 22
12852: PUSH
12853: LD_OWVAR 2
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: PUSH
12862: LD_INT 21
12864: PUSH
12865: LD_INT 1
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: PPUSH
12876: CALL_OW 69
12880: ST_TO_ADDR
// if not tmp then
12881: LD_VAR 0 2
12885: NOT
12886: IFFALSE 12890
// exit ;
12888: GO 12977
// un := tmp [ rand ( 1 , tmp ) ] ;
12890: LD_ADDR_VAR 0 1
12894: PUSH
12895: LD_VAR 0 2
12899: PUSH
12900: LD_INT 1
12902: PPUSH
12903: LD_VAR 0 2
12907: PPUSH
12908: CALL_OW 12
12912: ARRAY
12913: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12914: LD_VAR 0 1
12918: PPUSH
12919: LD_INT 0
12921: PPUSH
12922: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12926: LD_VAR 0 1
12930: PPUSH
12931: LD_OWVAR 3
12935: PUSH
12936: LD_VAR 0 1
12940: DIFF
12941: PPUSH
12942: LD_VAR 0 1
12946: PPUSH
12947: CALL_OW 74
12951: PPUSH
12952: CALL_OW 115
// wait ( 0 0$20 ) ;
12956: LD_INT 700
12958: PPUSH
12959: CALL_OW 67
// SetSide ( un , your_side ) ;
12963: LD_VAR 0 1
12967: PPUSH
12968: LD_OWVAR 2
12972: PPUSH
12973: CALL_OW 235
// end ;
12977: PPOPN 2
12979: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12980: LD_EXP 58
12984: PUSH
12985: LD_EXP 91
12989: AND
12990: IFFALSE 13096
12992: GO 12994
12994: DISABLE
12995: LD_INT 0
12997: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12998: LD_ADDR_VAR 0 1
13002: PUSH
13003: LD_INT 22
13005: PUSH
13006: LD_OWVAR 2
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: PUSH
13015: LD_INT 2
13017: PUSH
13018: LD_INT 30
13020: PUSH
13021: LD_INT 0
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: PUSH
13028: LD_INT 30
13030: PUSH
13031: LD_INT 1
13033: PUSH
13034: EMPTY
13035: LIST
13036: LIST
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: LIST
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PPUSH
13047: CALL_OW 69
13051: ST_TO_ADDR
// if not depot then
13052: LD_VAR 0 1
13056: NOT
13057: IFFALSE 13061
// exit ;
13059: GO 13096
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13061: LD_VAR 0 1
13065: PUSH
13066: LD_INT 1
13068: ARRAY
13069: PPUSH
13070: CALL_OW 250
13074: PPUSH
13075: LD_VAR 0 1
13079: PUSH
13080: LD_INT 1
13082: ARRAY
13083: PPUSH
13084: CALL_OW 251
13088: PPUSH
13089: LD_INT 70
13091: PPUSH
13092: CALL_OW 495
// end ;
13096: PPOPN 1
13098: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13099: LD_EXP 58
13103: PUSH
13104: LD_EXP 92
13108: AND
13109: IFFALSE 13320
13111: GO 13113
13113: DISABLE
13114: LD_INT 0
13116: PPUSH
13117: PPUSH
13118: PPUSH
13119: PPUSH
13120: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13121: LD_ADDR_VAR 0 5
13125: PUSH
13126: LD_INT 22
13128: PUSH
13129: LD_OWVAR 2
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: PUSH
13138: LD_INT 21
13140: PUSH
13141: LD_INT 1
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: PPUSH
13152: CALL_OW 69
13156: ST_TO_ADDR
// if not tmp then
13157: LD_VAR 0 5
13161: NOT
13162: IFFALSE 13166
// exit ;
13164: GO 13320
// for i in tmp do
13166: LD_ADDR_VAR 0 1
13170: PUSH
13171: LD_VAR 0 5
13175: PUSH
13176: FOR_IN
13177: IFFALSE 13318
// begin d := rand ( 0 , 5 ) ;
13179: LD_ADDR_VAR 0 4
13183: PUSH
13184: LD_INT 0
13186: PPUSH
13187: LD_INT 5
13189: PPUSH
13190: CALL_OW 12
13194: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13195: LD_ADDR_VAR 0 2
13199: PUSH
13200: LD_VAR 0 1
13204: PPUSH
13205: CALL_OW 250
13209: PPUSH
13210: LD_VAR 0 4
13214: PPUSH
13215: LD_INT 3
13217: PPUSH
13218: LD_INT 12
13220: PPUSH
13221: CALL_OW 12
13225: PPUSH
13226: CALL_OW 272
13230: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13231: LD_ADDR_VAR 0 3
13235: PUSH
13236: LD_VAR 0 1
13240: PPUSH
13241: CALL_OW 251
13245: PPUSH
13246: LD_VAR 0 4
13250: PPUSH
13251: LD_INT 3
13253: PPUSH
13254: LD_INT 12
13256: PPUSH
13257: CALL_OW 12
13261: PPUSH
13262: CALL_OW 273
13266: ST_TO_ADDR
// if ValidHex ( x , y ) then
13267: LD_VAR 0 2
13271: PPUSH
13272: LD_VAR 0 3
13276: PPUSH
13277: CALL_OW 488
13281: IFFALSE 13316
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13283: LD_VAR 0 1
13287: PPUSH
13288: LD_VAR 0 2
13292: PPUSH
13293: LD_VAR 0 3
13297: PPUSH
13298: LD_INT 3
13300: PPUSH
13301: LD_INT 6
13303: PPUSH
13304: CALL_OW 12
13308: PPUSH
13309: LD_INT 1
13311: PPUSH
13312: CALL_OW 483
// end ;
13316: GO 13176
13318: POP
13319: POP
// end ;
13320: PPOPN 5
13322: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13323: LD_EXP 58
13327: PUSH
13328: LD_EXP 93
13332: AND
13333: IFFALSE 13427
13335: GO 13337
13337: DISABLE
13338: LD_INT 0
13340: PPUSH
13341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13342: LD_ADDR_VAR 0 2
13346: PUSH
13347: LD_INT 22
13349: PUSH
13350: LD_OWVAR 2
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PUSH
13359: LD_INT 32
13361: PUSH
13362: LD_INT 1
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: LD_INT 21
13371: PUSH
13372: LD_INT 2
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: LIST
13383: PPUSH
13384: CALL_OW 69
13388: ST_TO_ADDR
// if not tmp then
13389: LD_VAR 0 2
13393: NOT
13394: IFFALSE 13398
// exit ;
13396: GO 13427
// for i in tmp do
13398: LD_ADDR_VAR 0 1
13402: PUSH
13403: LD_VAR 0 2
13407: PUSH
13408: FOR_IN
13409: IFFALSE 13425
// SetFuel ( i , 0 ) ;
13411: LD_VAR 0 1
13415: PPUSH
13416: LD_INT 0
13418: PPUSH
13419: CALL_OW 240
13423: GO 13408
13425: POP
13426: POP
// end ;
13427: PPOPN 2
13429: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13430: LD_EXP 58
13434: PUSH
13435: LD_EXP 94
13439: AND
13440: IFFALSE 13506
13442: GO 13444
13444: DISABLE
13445: LD_INT 0
13447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13448: LD_ADDR_VAR 0 1
13452: PUSH
13453: LD_INT 22
13455: PUSH
13456: LD_OWVAR 2
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PUSH
13465: LD_INT 30
13467: PUSH
13468: LD_INT 29
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: PPUSH
13479: CALL_OW 69
13483: ST_TO_ADDR
// if not tmp then
13484: LD_VAR 0 1
13488: NOT
13489: IFFALSE 13493
// exit ;
13491: GO 13506
// DestroyUnit ( tmp [ 1 ] ) ;
13493: LD_VAR 0 1
13497: PUSH
13498: LD_INT 1
13500: ARRAY
13501: PPUSH
13502: CALL_OW 65
// end ;
13506: PPOPN 1
13508: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13509: LD_EXP 58
13513: PUSH
13514: LD_EXP 96
13518: AND
13519: IFFALSE 13648
13521: GO 13523
13523: DISABLE
13524: LD_INT 0
13526: PPUSH
// begin uc_side := 0 ;
13527: LD_ADDR_OWVAR 20
13531: PUSH
13532: LD_INT 0
13534: ST_TO_ADDR
// uc_nation := nation_arabian ;
13535: LD_ADDR_OWVAR 21
13539: PUSH
13540: LD_INT 2
13542: ST_TO_ADDR
// hc_gallery :=  ;
13543: LD_ADDR_OWVAR 33
13547: PUSH
13548: LD_STRING 
13550: ST_TO_ADDR
// hc_name :=  ;
13551: LD_ADDR_OWVAR 26
13555: PUSH
13556: LD_STRING 
13558: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13559: LD_INT 1
13561: PPUSH
13562: LD_INT 11
13564: PPUSH
13565: LD_INT 10
13567: PPUSH
13568: CALL_OW 380
// un := CreateHuman ;
13572: LD_ADDR_VAR 0 1
13576: PUSH
13577: CALL_OW 44
13581: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13582: LD_VAR 0 1
13586: PPUSH
13587: LD_INT 1
13589: PPUSH
13590: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13594: LD_INT 35
13596: PPUSH
13597: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13601: LD_VAR 0 1
13605: PPUSH
13606: LD_INT 22
13608: PUSH
13609: LD_OWVAR 2
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: PPUSH
13618: CALL_OW 69
13622: PPUSH
13623: LD_VAR 0 1
13627: PPUSH
13628: CALL_OW 74
13632: PPUSH
13633: CALL_OW 115
// until IsDead ( un ) ;
13637: LD_VAR 0 1
13641: PPUSH
13642: CALL_OW 301
13646: IFFALSE 13594
// end ;
13648: PPOPN 1
13650: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13651: LD_EXP 58
13655: PUSH
13656: LD_EXP 98
13660: AND
13661: IFFALSE 13673
13663: GO 13665
13665: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13666: LD_STRING earthquake(getX(game), 0, 32)
13668: PPUSH
13669: CALL_OW 559
13673: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13674: LD_EXP 58
13678: PUSH
13679: LD_EXP 99
13683: AND
13684: IFFALSE 13775
13686: GO 13688
13688: DISABLE
13689: LD_INT 0
13691: PPUSH
// begin enable ;
13692: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13693: LD_ADDR_VAR 0 1
13697: PUSH
13698: LD_INT 22
13700: PUSH
13701: LD_OWVAR 2
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PUSH
13710: LD_INT 21
13712: PUSH
13713: LD_INT 2
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: PUSH
13720: LD_INT 33
13722: PUSH
13723: LD_INT 3
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: LIST
13734: PPUSH
13735: CALL_OW 69
13739: ST_TO_ADDR
// if not tmp then
13740: LD_VAR 0 1
13744: NOT
13745: IFFALSE 13749
// exit ;
13747: GO 13775
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13749: LD_VAR 0 1
13753: PUSH
13754: LD_INT 1
13756: PPUSH
13757: LD_VAR 0 1
13761: PPUSH
13762: CALL_OW 12
13766: ARRAY
13767: PPUSH
13768: LD_INT 1
13770: PPUSH
13771: CALL_OW 234
// end ;
13775: PPOPN 1
13777: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13778: LD_EXP 58
13782: PUSH
13783: LD_EXP 100
13787: AND
13788: IFFALSE 13929
13790: GO 13792
13792: DISABLE
13793: LD_INT 0
13795: PPUSH
13796: PPUSH
13797: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13798: LD_ADDR_VAR 0 3
13802: PUSH
13803: LD_INT 22
13805: PUSH
13806: LD_OWVAR 2
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: PUSH
13815: LD_INT 25
13817: PUSH
13818: LD_INT 1
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: PPUSH
13829: CALL_OW 69
13833: ST_TO_ADDR
// if not tmp then
13834: LD_VAR 0 3
13838: NOT
13839: IFFALSE 13843
// exit ;
13841: GO 13929
// un := tmp [ rand ( 1 , tmp ) ] ;
13843: LD_ADDR_VAR 0 2
13847: PUSH
13848: LD_VAR 0 3
13852: PUSH
13853: LD_INT 1
13855: PPUSH
13856: LD_VAR 0 3
13860: PPUSH
13861: CALL_OW 12
13865: ARRAY
13866: ST_TO_ADDR
// if Crawls ( un ) then
13867: LD_VAR 0 2
13871: PPUSH
13872: CALL_OW 318
13876: IFFALSE 13887
// ComWalk ( un ) ;
13878: LD_VAR 0 2
13882: PPUSH
13883: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13887: LD_VAR 0 2
13891: PPUSH
13892: LD_INT 9
13894: PPUSH
13895: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13899: LD_INT 28
13901: PPUSH
13902: LD_OWVAR 2
13906: PPUSH
13907: LD_INT 2
13909: PPUSH
13910: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13914: LD_INT 29
13916: PPUSH
13917: LD_OWVAR 2
13921: PPUSH
13922: LD_INT 2
13924: PPUSH
13925: CALL_OW 322
// end ;
13929: PPOPN 3
13931: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13932: LD_EXP 58
13936: PUSH
13937: LD_EXP 101
13941: AND
13942: IFFALSE 14053
13944: GO 13946
13946: DISABLE
13947: LD_INT 0
13949: PPUSH
13950: PPUSH
13951: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13952: LD_ADDR_VAR 0 3
13956: PUSH
13957: LD_INT 22
13959: PUSH
13960: LD_OWVAR 2
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: PUSH
13969: LD_INT 25
13971: PUSH
13972: LD_INT 1
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: PPUSH
13983: CALL_OW 69
13987: ST_TO_ADDR
// if not tmp then
13988: LD_VAR 0 3
13992: NOT
13993: IFFALSE 13997
// exit ;
13995: GO 14053
// un := tmp [ rand ( 1 , tmp ) ] ;
13997: LD_ADDR_VAR 0 2
14001: PUSH
14002: LD_VAR 0 3
14006: PUSH
14007: LD_INT 1
14009: PPUSH
14010: LD_VAR 0 3
14014: PPUSH
14015: CALL_OW 12
14019: ARRAY
14020: ST_TO_ADDR
// if Crawls ( un ) then
14021: LD_VAR 0 2
14025: PPUSH
14026: CALL_OW 318
14030: IFFALSE 14041
// ComWalk ( un ) ;
14032: LD_VAR 0 2
14036: PPUSH
14037: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14041: LD_VAR 0 2
14045: PPUSH
14046: LD_INT 8
14048: PPUSH
14049: CALL_OW 336
// end ;
14053: PPOPN 3
14055: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14056: LD_EXP 58
14060: PUSH
14061: LD_EXP 102
14065: AND
14066: IFFALSE 14210
14068: GO 14070
14070: DISABLE
14071: LD_INT 0
14073: PPUSH
14074: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14075: LD_ADDR_VAR 0 2
14079: PUSH
14080: LD_INT 22
14082: PUSH
14083: LD_OWVAR 2
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: PUSH
14092: LD_INT 21
14094: PUSH
14095: LD_INT 2
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PUSH
14102: LD_INT 2
14104: PUSH
14105: LD_INT 34
14107: PUSH
14108: LD_INT 12
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: PUSH
14115: LD_INT 34
14117: PUSH
14118: LD_INT 51
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: PUSH
14125: LD_INT 34
14127: PUSH
14128: LD_INT 32
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: LIST
14145: PPUSH
14146: CALL_OW 69
14150: ST_TO_ADDR
// if not tmp then
14151: LD_VAR 0 2
14155: NOT
14156: IFFALSE 14160
// exit ;
14158: GO 14210
// for i in tmp do
14160: LD_ADDR_VAR 0 1
14164: PUSH
14165: LD_VAR 0 2
14169: PUSH
14170: FOR_IN
14171: IFFALSE 14208
// if GetCargo ( i , mat_artifact ) = 0 then
14173: LD_VAR 0 1
14177: PPUSH
14178: LD_INT 4
14180: PPUSH
14181: CALL_OW 289
14185: PUSH
14186: LD_INT 0
14188: EQUAL
14189: IFFALSE 14206
// SetCargo ( i , mat_siberit , 100 ) ;
14191: LD_VAR 0 1
14195: PPUSH
14196: LD_INT 3
14198: PPUSH
14199: LD_INT 100
14201: PPUSH
14202: CALL_OW 290
14206: GO 14170
14208: POP
14209: POP
// end ;
14210: PPOPN 2
14212: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14213: LD_EXP 58
14217: PUSH
14218: LD_EXP 103
14222: AND
14223: IFFALSE 14406
14225: GO 14227
14227: DISABLE
14228: LD_INT 0
14230: PPUSH
14231: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14232: LD_ADDR_VAR 0 2
14236: PUSH
14237: LD_INT 22
14239: PUSH
14240: LD_OWVAR 2
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PPUSH
14249: CALL_OW 69
14253: ST_TO_ADDR
// if not tmp then
14254: LD_VAR 0 2
14258: NOT
14259: IFFALSE 14263
// exit ;
14261: GO 14406
// for i := 1 to 2 do
14263: LD_ADDR_VAR 0 1
14267: PUSH
14268: DOUBLE
14269: LD_INT 1
14271: DEC
14272: ST_TO_ADDR
14273: LD_INT 2
14275: PUSH
14276: FOR_TO
14277: IFFALSE 14404
// begin uc_side := your_side ;
14279: LD_ADDR_OWVAR 20
14283: PUSH
14284: LD_OWVAR 2
14288: ST_TO_ADDR
// uc_nation := nation_american ;
14289: LD_ADDR_OWVAR 21
14293: PUSH
14294: LD_INT 1
14296: ST_TO_ADDR
// vc_chassis := us_morphling ;
14297: LD_ADDR_OWVAR 37
14301: PUSH
14302: LD_INT 5
14304: ST_TO_ADDR
// vc_engine := engine_siberite ;
14305: LD_ADDR_OWVAR 39
14309: PUSH
14310: LD_INT 3
14312: ST_TO_ADDR
// vc_control := control_computer ;
14313: LD_ADDR_OWVAR 38
14317: PUSH
14318: LD_INT 3
14320: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14321: LD_ADDR_OWVAR 40
14325: PUSH
14326: LD_INT 10
14328: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14329: LD_VAR 0 2
14333: PUSH
14334: LD_INT 1
14336: ARRAY
14337: PPUSH
14338: CALL_OW 310
14342: NOT
14343: IFFALSE 14390
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14345: CALL_OW 45
14349: PPUSH
14350: LD_VAR 0 2
14354: PUSH
14355: LD_INT 1
14357: ARRAY
14358: PPUSH
14359: CALL_OW 250
14363: PPUSH
14364: LD_VAR 0 2
14368: PUSH
14369: LD_INT 1
14371: ARRAY
14372: PPUSH
14373: CALL_OW 251
14377: PPUSH
14378: LD_INT 12
14380: PPUSH
14381: LD_INT 1
14383: PPUSH
14384: CALL_OW 50
14388: GO 14402
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14390: CALL_OW 45
14394: PPUSH
14395: LD_INT 1
14397: PPUSH
14398: CALL_OW 51
// end ;
14402: GO 14276
14404: POP
14405: POP
// end ;
14406: PPOPN 2
14408: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14409: LD_EXP 58
14413: PUSH
14414: LD_EXP 104
14418: AND
14419: IFFALSE 14641
14421: GO 14423
14423: DISABLE
14424: LD_INT 0
14426: PPUSH
14427: PPUSH
14428: PPUSH
14429: PPUSH
14430: PPUSH
14431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14432: LD_ADDR_VAR 0 6
14436: PUSH
14437: LD_INT 22
14439: PUSH
14440: LD_OWVAR 2
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: PUSH
14449: LD_INT 21
14451: PUSH
14452: LD_INT 1
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PUSH
14459: LD_INT 3
14461: PUSH
14462: LD_INT 23
14464: PUSH
14465: LD_INT 0
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: LIST
14480: PPUSH
14481: CALL_OW 69
14485: ST_TO_ADDR
// if not tmp then
14486: LD_VAR 0 6
14490: NOT
14491: IFFALSE 14495
// exit ;
14493: GO 14641
// s1 := rand ( 1 , 4 ) ;
14495: LD_ADDR_VAR 0 2
14499: PUSH
14500: LD_INT 1
14502: PPUSH
14503: LD_INT 4
14505: PPUSH
14506: CALL_OW 12
14510: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14511: LD_ADDR_VAR 0 4
14515: PUSH
14516: LD_VAR 0 6
14520: PUSH
14521: LD_INT 1
14523: ARRAY
14524: PPUSH
14525: LD_VAR 0 2
14529: PPUSH
14530: CALL_OW 259
14534: ST_TO_ADDR
// if s1 = 1 then
14535: LD_VAR 0 2
14539: PUSH
14540: LD_INT 1
14542: EQUAL
14543: IFFALSE 14563
// s2 := rand ( 2 , 4 ) else
14545: LD_ADDR_VAR 0 3
14549: PUSH
14550: LD_INT 2
14552: PPUSH
14553: LD_INT 4
14555: PPUSH
14556: CALL_OW 12
14560: ST_TO_ADDR
14561: GO 14571
// s2 := 1 ;
14563: LD_ADDR_VAR 0 3
14567: PUSH
14568: LD_INT 1
14570: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14571: LD_ADDR_VAR 0 5
14575: PUSH
14576: LD_VAR 0 6
14580: PUSH
14581: LD_INT 1
14583: ARRAY
14584: PPUSH
14585: LD_VAR 0 3
14589: PPUSH
14590: CALL_OW 259
14594: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14595: LD_VAR 0 6
14599: PUSH
14600: LD_INT 1
14602: ARRAY
14603: PPUSH
14604: LD_VAR 0 2
14608: PPUSH
14609: LD_VAR 0 5
14613: PPUSH
14614: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14618: LD_VAR 0 6
14622: PUSH
14623: LD_INT 1
14625: ARRAY
14626: PPUSH
14627: LD_VAR 0 3
14631: PPUSH
14632: LD_VAR 0 4
14636: PPUSH
14637: CALL_OW 237
// end ;
14641: PPOPN 6
14643: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14644: LD_EXP 58
14648: PUSH
14649: LD_EXP 105
14653: AND
14654: IFFALSE 14733
14656: GO 14658
14658: DISABLE
14659: LD_INT 0
14661: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14662: LD_ADDR_VAR 0 1
14666: PUSH
14667: LD_INT 22
14669: PUSH
14670: LD_OWVAR 2
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: PUSH
14679: LD_INT 30
14681: PUSH
14682: LD_INT 3
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: PPUSH
14693: CALL_OW 69
14697: ST_TO_ADDR
// if not tmp then
14698: LD_VAR 0 1
14702: NOT
14703: IFFALSE 14707
// exit ;
14705: GO 14733
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14707: LD_VAR 0 1
14711: PUSH
14712: LD_INT 1
14714: PPUSH
14715: LD_VAR 0 1
14719: PPUSH
14720: CALL_OW 12
14724: ARRAY
14725: PPUSH
14726: LD_INT 1
14728: PPUSH
14729: CALL_OW 234
// end ;
14733: PPOPN 1
14735: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14736: LD_EXP 58
14740: PUSH
14741: LD_EXP 106
14745: AND
14746: IFFALSE 14858
14748: GO 14750
14750: DISABLE
14751: LD_INT 0
14753: PPUSH
14754: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14755: LD_ADDR_VAR 0 2
14759: PUSH
14760: LD_INT 22
14762: PUSH
14763: LD_OWVAR 2
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: PUSH
14772: LD_INT 2
14774: PUSH
14775: LD_INT 30
14777: PUSH
14778: LD_INT 27
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PUSH
14785: LD_INT 30
14787: PUSH
14788: LD_INT 26
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PUSH
14795: LD_INT 30
14797: PUSH
14798: LD_INT 28
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: PUSH
14805: EMPTY
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: PPUSH
14815: CALL_OW 69
14819: ST_TO_ADDR
// if not tmp then
14820: LD_VAR 0 2
14824: NOT
14825: IFFALSE 14829
// exit ;
14827: GO 14858
// for i in tmp do
14829: LD_ADDR_VAR 0 1
14833: PUSH
14834: LD_VAR 0 2
14838: PUSH
14839: FOR_IN
14840: IFFALSE 14856
// SetLives ( i , 1 ) ;
14842: LD_VAR 0 1
14846: PPUSH
14847: LD_INT 1
14849: PPUSH
14850: CALL_OW 234
14854: GO 14839
14856: POP
14857: POP
// end ;
14858: PPOPN 2
14860: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14861: LD_EXP 58
14865: PUSH
14866: LD_EXP 107
14870: AND
14871: IFFALSE 15158
14873: GO 14875
14875: DISABLE
14876: LD_INT 0
14878: PPUSH
14879: PPUSH
14880: PPUSH
// begin i := rand ( 1 , 7 ) ;
14881: LD_ADDR_VAR 0 1
14885: PUSH
14886: LD_INT 1
14888: PPUSH
14889: LD_INT 7
14891: PPUSH
14892: CALL_OW 12
14896: ST_TO_ADDR
// case i of 1 :
14897: LD_VAR 0 1
14901: PUSH
14902: LD_INT 1
14904: DOUBLE
14905: EQUAL
14906: IFTRUE 14910
14908: GO 14920
14910: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14911: LD_STRING earthquake(getX(game), 0, 32)
14913: PPUSH
14914: CALL_OW 559
14918: GO 15158
14920: LD_INT 2
14922: DOUBLE
14923: EQUAL
14924: IFTRUE 14928
14926: GO 14942
14928: POP
// begin ToLua ( displayStucuk(); ) ;
14929: LD_STRING displayStucuk();
14931: PPUSH
14932: CALL_OW 559
// ResetFog ;
14936: CALL_OW 335
// end ; 3 :
14940: GO 15158
14942: LD_INT 3
14944: DOUBLE
14945: EQUAL
14946: IFTRUE 14950
14948: GO 15054
14950: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14951: LD_ADDR_VAR 0 2
14955: PUSH
14956: LD_INT 22
14958: PUSH
14959: LD_OWVAR 2
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: LD_INT 25
14970: PUSH
14971: LD_INT 1
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PPUSH
14982: CALL_OW 69
14986: ST_TO_ADDR
// if not tmp then
14987: LD_VAR 0 2
14991: NOT
14992: IFFALSE 14996
// exit ;
14994: GO 15158
// un := tmp [ rand ( 1 , tmp ) ] ;
14996: LD_ADDR_VAR 0 3
15000: PUSH
15001: LD_VAR 0 2
15005: PUSH
15006: LD_INT 1
15008: PPUSH
15009: LD_VAR 0 2
15013: PPUSH
15014: CALL_OW 12
15018: ARRAY
15019: ST_TO_ADDR
// if Crawls ( un ) then
15020: LD_VAR 0 3
15024: PPUSH
15025: CALL_OW 318
15029: IFFALSE 15040
// ComWalk ( un ) ;
15031: LD_VAR 0 3
15035: PPUSH
15036: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15040: LD_VAR 0 3
15044: PPUSH
15045: LD_INT 8
15047: PPUSH
15048: CALL_OW 336
// end ; 4 :
15052: GO 15158
15054: LD_INT 4
15056: DOUBLE
15057: EQUAL
15058: IFTRUE 15062
15060: GO 15136
15062: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15063: LD_ADDR_VAR 0 2
15067: PUSH
15068: LD_INT 22
15070: PUSH
15071: LD_OWVAR 2
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: PUSH
15080: LD_INT 30
15082: PUSH
15083: LD_INT 29
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: PPUSH
15094: CALL_OW 69
15098: ST_TO_ADDR
// if not tmp then
15099: LD_VAR 0 2
15103: NOT
15104: IFFALSE 15108
// exit ;
15106: GO 15158
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15108: LD_VAR 0 2
15112: PUSH
15113: LD_INT 1
15115: ARRAY
15116: PPUSH
15117: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15121: LD_VAR 0 2
15125: PUSH
15126: LD_INT 1
15128: ARRAY
15129: PPUSH
15130: CALL_OW 65
// end ; 5 .. 7 :
15134: GO 15158
15136: LD_INT 5
15138: DOUBLE
15139: GREATEREQUAL
15140: IFFALSE 15148
15142: LD_INT 7
15144: DOUBLE
15145: LESSEQUAL
15146: IFTRUE 15150
15148: GO 15157
15150: POP
// StreamSibBomb ; end ;
15151: CALL 11395 0 0
15155: GO 15158
15157: POP
// end ;
15158: PPOPN 3
15160: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15161: LD_EXP 58
15165: PUSH
15166: LD_EXP 108
15170: AND
15171: IFFALSE 15327
15173: GO 15175
15175: DISABLE
15176: LD_INT 0
15178: PPUSH
15179: PPUSH
15180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15181: LD_ADDR_VAR 0 2
15185: PUSH
15186: LD_INT 81
15188: PUSH
15189: LD_OWVAR 2
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PUSH
15198: LD_INT 2
15200: PUSH
15201: LD_INT 21
15203: PUSH
15204: LD_INT 1
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PUSH
15211: LD_INT 21
15213: PUSH
15214: LD_INT 2
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: LIST
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: PPUSH
15230: CALL_OW 69
15234: ST_TO_ADDR
// if not tmp then
15235: LD_VAR 0 2
15239: NOT
15240: IFFALSE 15244
// exit ;
15242: GO 15327
// p := 0 ;
15244: LD_ADDR_VAR 0 3
15248: PUSH
15249: LD_INT 0
15251: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15252: LD_INT 35
15254: PPUSH
15255: CALL_OW 67
// p := p + 1 ;
15259: LD_ADDR_VAR 0 3
15263: PUSH
15264: LD_VAR 0 3
15268: PUSH
15269: LD_INT 1
15271: PLUS
15272: ST_TO_ADDR
// for i in tmp do
15273: LD_ADDR_VAR 0 1
15277: PUSH
15278: LD_VAR 0 2
15282: PUSH
15283: FOR_IN
15284: IFFALSE 15315
// if GetLives ( i ) < 1000 then
15286: LD_VAR 0 1
15290: PPUSH
15291: CALL_OW 256
15295: PUSH
15296: LD_INT 1000
15298: LESS
15299: IFFALSE 15313
// SetLives ( i , 1000 ) ;
15301: LD_VAR 0 1
15305: PPUSH
15306: LD_INT 1000
15308: PPUSH
15309: CALL_OW 234
15313: GO 15283
15315: POP
15316: POP
// until p > 20 ;
15317: LD_VAR 0 3
15321: PUSH
15322: LD_INT 20
15324: GREATER
15325: IFFALSE 15252
// end ;
15327: PPOPN 3
15329: END
// every 0 0$1 trigger StreamModeActive and sTime do
15330: LD_EXP 58
15334: PUSH
15335: LD_EXP 109
15339: AND
15340: IFFALSE 15375
15342: GO 15344
15344: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15345: LD_INT 28
15347: PPUSH
15348: LD_OWVAR 2
15352: PPUSH
15353: LD_INT 2
15355: PPUSH
15356: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15360: LD_INT 30
15362: PPUSH
15363: LD_OWVAR 2
15367: PPUSH
15368: LD_INT 2
15370: PPUSH
15371: CALL_OW 322
// end ;
15375: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15376: LD_EXP 58
15380: PUSH
15381: LD_EXP 110
15385: AND
15386: IFFALSE 15507
15388: GO 15390
15390: DISABLE
15391: LD_INT 0
15393: PPUSH
15394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15395: LD_ADDR_VAR 0 2
15399: PUSH
15400: LD_INT 22
15402: PUSH
15403: LD_OWVAR 2
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PUSH
15412: LD_INT 21
15414: PUSH
15415: LD_INT 1
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: PUSH
15422: LD_INT 3
15424: PUSH
15425: LD_INT 23
15427: PUSH
15428: LD_INT 0
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: LIST
15443: PPUSH
15444: CALL_OW 69
15448: ST_TO_ADDR
// if not tmp then
15449: LD_VAR 0 2
15453: NOT
15454: IFFALSE 15458
// exit ;
15456: GO 15507
// for i in tmp do
15458: LD_ADDR_VAR 0 1
15462: PUSH
15463: LD_VAR 0 2
15467: PUSH
15468: FOR_IN
15469: IFFALSE 15505
// begin if Crawls ( i ) then
15471: LD_VAR 0 1
15475: PPUSH
15476: CALL_OW 318
15480: IFFALSE 15491
// ComWalk ( i ) ;
15482: LD_VAR 0 1
15486: PPUSH
15487: CALL_OW 138
// SetClass ( i , 2 ) ;
15491: LD_VAR 0 1
15495: PPUSH
15496: LD_INT 2
15498: PPUSH
15499: CALL_OW 336
// end ;
15503: GO 15468
15505: POP
15506: POP
// end ;
15507: PPOPN 2
15509: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15510: LD_EXP 58
15514: PUSH
15515: LD_EXP 111
15519: AND
15520: IFFALSE 15808
15522: GO 15524
15524: DISABLE
15525: LD_INT 0
15527: PPUSH
15528: PPUSH
15529: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15530: LD_OWVAR 2
15534: PPUSH
15535: LD_INT 9
15537: PPUSH
15538: LD_INT 1
15540: PPUSH
15541: LD_INT 1
15543: PPUSH
15544: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15548: LD_INT 9
15550: PPUSH
15551: LD_OWVAR 2
15555: PPUSH
15556: CALL_OW 343
// uc_side := 9 ;
15560: LD_ADDR_OWVAR 20
15564: PUSH
15565: LD_INT 9
15567: ST_TO_ADDR
// uc_nation := 2 ;
15568: LD_ADDR_OWVAR 21
15572: PUSH
15573: LD_INT 2
15575: ST_TO_ADDR
// hc_name := Dark Warrior ;
15576: LD_ADDR_OWVAR 26
15580: PUSH
15581: LD_STRING Dark Warrior
15583: ST_TO_ADDR
// hc_gallery :=  ;
15584: LD_ADDR_OWVAR 33
15588: PUSH
15589: LD_STRING 
15591: ST_TO_ADDR
// hc_noskilllimit := true ;
15592: LD_ADDR_OWVAR 76
15596: PUSH
15597: LD_INT 1
15599: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15600: LD_ADDR_OWVAR 31
15604: PUSH
15605: LD_INT 30
15607: PUSH
15608: LD_INT 30
15610: PUSH
15611: LD_INT 30
15613: PUSH
15614: LD_INT 30
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: ST_TO_ADDR
// un := CreateHuman ;
15623: LD_ADDR_VAR 0 3
15627: PUSH
15628: CALL_OW 44
15632: ST_TO_ADDR
// hc_noskilllimit := false ;
15633: LD_ADDR_OWVAR 76
15637: PUSH
15638: LD_INT 0
15640: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15641: LD_VAR 0 3
15645: PPUSH
15646: LD_INT 1
15648: PPUSH
15649: CALL_OW 51
// ToLua ( playRanger() ) ;
15653: LD_STRING playRanger()
15655: PPUSH
15656: CALL_OW 559
// p := 0 ;
15660: LD_ADDR_VAR 0 2
15664: PUSH
15665: LD_INT 0
15667: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15668: LD_INT 35
15670: PPUSH
15671: CALL_OW 67
// p := p + 1 ;
15675: LD_ADDR_VAR 0 2
15679: PUSH
15680: LD_VAR 0 2
15684: PUSH
15685: LD_INT 1
15687: PLUS
15688: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15689: LD_VAR 0 3
15693: PPUSH
15694: CALL_OW 256
15698: PUSH
15699: LD_INT 1000
15701: LESS
15702: IFFALSE 15716
// SetLives ( un , 1000 ) ;
15704: LD_VAR 0 3
15708: PPUSH
15709: LD_INT 1000
15711: PPUSH
15712: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15716: LD_VAR 0 3
15720: PPUSH
15721: LD_INT 81
15723: PUSH
15724: LD_OWVAR 2
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: PUSH
15733: LD_INT 91
15735: PUSH
15736: LD_VAR 0 3
15740: PUSH
15741: LD_INT 30
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: LIST
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: PPUSH
15753: CALL_OW 69
15757: PPUSH
15758: LD_VAR 0 3
15762: PPUSH
15763: CALL_OW 74
15767: PPUSH
15768: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
15772: LD_VAR 0 2
15776: PUSH
15777: LD_INT 80
15779: GREATER
15780: PUSH
15781: LD_VAR 0 3
15785: PPUSH
15786: CALL_OW 301
15790: OR
15791: IFFALSE 15668
// if un then
15793: LD_VAR 0 3
15797: IFFALSE 15808
// RemoveUnit ( un ) ;
15799: LD_VAR 0 3
15803: PPUSH
15804: CALL_OW 64
// end ;
15808: PPOPN 3
15810: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
15811: LD_EXP 112
15815: IFFALSE 15931
15817: GO 15819
15819: DISABLE
15820: LD_INT 0
15822: PPUSH
15823: PPUSH
15824: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15825: LD_ADDR_VAR 0 2
15829: PUSH
15830: LD_INT 81
15832: PUSH
15833: LD_OWVAR 2
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PUSH
15842: LD_INT 21
15844: PUSH
15845: LD_INT 1
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PPUSH
15856: CALL_OW 69
15860: ST_TO_ADDR
// ToLua ( playComputer() ) ;
15861: LD_STRING playComputer()
15863: PPUSH
15864: CALL_OW 559
// if not tmp then
15868: LD_VAR 0 2
15872: NOT
15873: IFFALSE 15877
// exit ;
15875: GO 15931
// for i in tmp do
15877: LD_ADDR_VAR 0 1
15881: PUSH
15882: LD_VAR 0 2
15886: PUSH
15887: FOR_IN
15888: IFFALSE 15929
// for j := 1 to 4 do
15890: LD_ADDR_VAR 0 3
15894: PUSH
15895: DOUBLE
15896: LD_INT 1
15898: DEC
15899: ST_TO_ADDR
15900: LD_INT 4
15902: PUSH
15903: FOR_TO
15904: IFFALSE 15925
// SetSkill ( i , j , 10 ) ;
15906: LD_VAR 0 1
15910: PPUSH
15911: LD_VAR 0 3
15915: PPUSH
15916: LD_INT 10
15918: PPUSH
15919: CALL_OW 237
15923: GO 15903
15925: POP
15926: POP
15927: GO 15887
15929: POP
15930: POP
// end ;
15931: PPOPN 3
15933: END
// every 0 0$1 trigger s30 do var i , tmp ;
15934: LD_EXP 113
15938: IFFALSE 16007
15940: GO 15942
15942: DISABLE
15943: LD_INT 0
15945: PPUSH
15946: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15947: LD_ADDR_VAR 0 2
15951: PUSH
15952: LD_INT 22
15954: PUSH
15955: LD_OWVAR 2
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PPUSH
15964: CALL_OW 69
15968: ST_TO_ADDR
// if not tmp then
15969: LD_VAR 0 2
15973: NOT
15974: IFFALSE 15978
// exit ;
15976: GO 16007
// for i in tmp do
15978: LD_ADDR_VAR 0 1
15982: PUSH
15983: LD_VAR 0 2
15987: PUSH
15988: FOR_IN
15989: IFFALSE 16005
// SetLives ( i , 300 ) ;
15991: LD_VAR 0 1
15995: PPUSH
15996: LD_INT 300
15998: PPUSH
15999: CALL_OW 234
16003: GO 15988
16005: POP
16006: POP
// end ;
16007: PPOPN 2
16009: END
// every 0 0$1 trigger s60 do var i , tmp ;
16010: LD_EXP 114
16014: IFFALSE 16083
16016: GO 16018
16018: DISABLE
16019: LD_INT 0
16021: PPUSH
16022: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16023: LD_ADDR_VAR 0 2
16027: PUSH
16028: LD_INT 22
16030: PUSH
16031: LD_OWVAR 2
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: PPUSH
16040: CALL_OW 69
16044: ST_TO_ADDR
// if not tmp then
16045: LD_VAR 0 2
16049: NOT
16050: IFFALSE 16054
// exit ;
16052: GO 16083
// for i in tmp do
16054: LD_ADDR_VAR 0 1
16058: PUSH
16059: LD_VAR 0 2
16063: PUSH
16064: FOR_IN
16065: IFFALSE 16081
// SetLives ( i , 600 ) ;
16067: LD_VAR 0 1
16071: PPUSH
16072: LD_INT 600
16074: PPUSH
16075: CALL_OW 234
16079: GO 16064
16081: POP
16082: POP
// end ;
16083: PPOPN 2
16085: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16086: LD_INT 0
16088: PPUSH
// case cmd of 301 :
16089: LD_VAR 0 1
16093: PUSH
16094: LD_INT 301
16096: DOUBLE
16097: EQUAL
16098: IFTRUE 16102
16100: GO 16134
16102: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16103: LD_VAR 0 6
16107: PPUSH
16108: LD_VAR 0 7
16112: PPUSH
16113: LD_VAR 0 8
16117: PPUSH
16118: LD_VAR 0 4
16122: PPUSH
16123: LD_VAR 0 5
16127: PPUSH
16128: CALL 17335 0 5
16132: GO 16255
16134: LD_INT 302
16136: DOUBLE
16137: EQUAL
16138: IFTRUE 16142
16140: GO 16179
16142: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16143: LD_VAR 0 6
16147: PPUSH
16148: LD_VAR 0 7
16152: PPUSH
16153: LD_VAR 0 8
16157: PPUSH
16158: LD_VAR 0 9
16162: PPUSH
16163: LD_VAR 0 4
16167: PPUSH
16168: LD_VAR 0 5
16172: PPUSH
16173: CALL 17426 0 6
16177: GO 16255
16179: LD_INT 303
16181: DOUBLE
16182: EQUAL
16183: IFTRUE 16187
16185: GO 16224
16187: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16188: LD_VAR 0 6
16192: PPUSH
16193: LD_VAR 0 7
16197: PPUSH
16198: LD_VAR 0 8
16202: PPUSH
16203: LD_VAR 0 9
16207: PPUSH
16208: LD_VAR 0 4
16212: PPUSH
16213: LD_VAR 0 5
16217: PPUSH
16218: CALL 16260 0 6
16222: GO 16255
16224: LD_INT 304
16226: DOUBLE
16227: EQUAL
16228: IFTRUE 16232
16230: GO 16254
16232: POP
// hHackTeleport ( unit , x , y ) ; end ;
16233: LD_VAR 0 2
16237: PPUSH
16238: LD_VAR 0 4
16242: PPUSH
16243: LD_VAR 0 5
16247: PPUSH
16248: CALL 18019 0 3
16252: GO 16255
16254: POP
// end ;
16255: LD_VAR 0 12
16259: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16260: LD_INT 0
16262: PPUSH
16263: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16264: LD_VAR 0 1
16268: PUSH
16269: LD_INT 1
16271: LESS
16272: PUSH
16273: LD_VAR 0 1
16277: PUSH
16278: LD_INT 3
16280: GREATER
16281: OR
16282: PUSH
16283: LD_VAR 0 5
16287: PPUSH
16288: LD_VAR 0 6
16292: PPUSH
16293: CALL_OW 428
16297: OR
16298: IFFALSE 16302
// exit ;
16300: GO 17022
// uc_side := your_side ;
16302: LD_ADDR_OWVAR 20
16306: PUSH
16307: LD_OWVAR 2
16311: ST_TO_ADDR
// uc_nation := nation ;
16312: LD_ADDR_OWVAR 21
16316: PUSH
16317: LD_VAR 0 1
16321: ST_TO_ADDR
// bc_level = 1 ;
16322: LD_ADDR_OWVAR 43
16326: PUSH
16327: LD_INT 1
16329: ST_TO_ADDR
// case btype of 1 :
16330: LD_VAR 0 2
16334: PUSH
16335: LD_INT 1
16337: DOUBLE
16338: EQUAL
16339: IFTRUE 16343
16341: GO 16354
16343: POP
// bc_type := b_depot ; 2 :
16344: LD_ADDR_OWVAR 42
16348: PUSH
16349: LD_INT 0
16351: ST_TO_ADDR
16352: GO 16966
16354: LD_INT 2
16356: DOUBLE
16357: EQUAL
16358: IFTRUE 16362
16360: GO 16373
16362: POP
// bc_type := b_warehouse ; 3 :
16363: LD_ADDR_OWVAR 42
16367: PUSH
16368: LD_INT 1
16370: ST_TO_ADDR
16371: GO 16966
16373: LD_INT 3
16375: DOUBLE
16376: EQUAL
16377: IFTRUE 16381
16379: GO 16392
16381: POP
// bc_type := b_lab ; 4 .. 9 :
16382: LD_ADDR_OWVAR 42
16386: PUSH
16387: LD_INT 6
16389: ST_TO_ADDR
16390: GO 16966
16392: LD_INT 4
16394: DOUBLE
16395: GREATEREQUAL
16396: IFFALSE 16404
16398: LD_INT 9
16400: DOUBLE
16401: LESSEQUAL
16402: IFTRUE 16406
16404: GO 16458
16406: POP
// begin bc_type := b_lab_half ;
16407: LD_ADDR_OWVAR 42
16411: PUSH
16412: LD_INT 7
16414: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16415: LD_ADDR_OWVAR 44
16419: PUSH
16420: LD_INT 10
16422: PUSH
16423: LD_INT 11
16425: PUSH
16426: LD_INT 12
16428: PUSH
16429: LD_INT 15
16431: PUSH
16432: LD_INT 14
16434: PUSH
16435: LD_INT 13
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: PUSH
16446: LD_VAR 0 2
16450: PUSH
16451: LD_INT 3
16453: MINUS
16454: ARRAY
16455: ST_TO_ADDR
// end ; 10 .. 13 :
16456: GO 16966
16458: LD_INT 10
16460: DOUBLE
16461: GREATEREQUAL
16462: IFFALSE 16470
16464: LD_INT 13
16466: DOUBLE
16467: LESSEQUAL
16468: IFTRUE 16472
16470: GO 16549
16472: POP
// begin bc_type := b_lab_full ;
16473: LD_ADDR_OWVAR 42
16477: PUSH
16478: LD_INT 8
16480: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
16481: LD_ADDR_OWVAR 44
16485: PUSH
16486: LD_INT 10
16488: PUSH
16489: LD_INT 12
16491: PUSH
16492: LD_INT 14
16494: PUSH
16495: LD_INT 13
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: PUSH
16504: LD_VAR 0 2
16508: PUSH
16509: LD_INT 9
16511: MINUS
16512: ARRAY
16513: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
16514: LD_ADDR_OWVAR 45
16518: PUSH
16519: LD_INT 11
16521: PUSH
16522: LD_INT 15
16524: PUSH
16525: LD_INT 12
16527: PUSH
16528: LD_INT 15
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: PUSH
16537: LD_VAR 0 2
16541: PUSH
16542: LD_INT 9
16544: MINUS
16545: ARRAY
16546: ST_TO_ADDR
// end ; 14 :
16547: GO 16966
16549: LD_INT 14
16551: DOUBLE
16552: EQUAL
16553: IFTRUE 16557
16555: GO 16568
16557: POP
// bc_type := b_workshop ; 15 :
16558: LD_ADDR_OWVAR 42
16562: PUSH
16563: LD_INT 2
16565: ST_TO_ADDR
16566: GO 16966
16568: LD_INT 15
16570: DOUBLE
16571: EQUAL
16572: IFTRUE 16576
16574: GO 16587
16576: POP
// bc_type := b_factory ; 16 :
16577: LD_ADDR_OWVAR 42
16581: PUSH
16582: LD_INT 3
16584: ST_TO_ADDR
16585: GO 16966
16587: LD_INT 16
16589: DOUBLE
16590: EQUAL
16591: IFTRUE 16595
16593: GO 16606
16595: POP
// bc_type := b_ext_gun ; 17 :
16596: LD_ADDR_OWVAR 42
16600: PUSH
16601: LD_INT 17
16603: ST_TO_ADDR
16604: GO 16966
16606: LD_INT 17
16608: DOUBLE
16609: EQUAL
16610: IFTRUE 16614
16612: GO 16642
16614: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
16615: LD_ADDR_OWVAR 42
16619: PUSH
16620: LD_INT 19
16622: PUSH
16623: LD_INT 23
16625: PUSH
16626: LD_INT 19
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: LIST
16633: PUSH
16634: LD_VAR 0 1
16638: ARRAY
16639: ST_TO_ADDR
16640: GO 16966
16642: LD_INT 18
16644: DOUBLE
16645: EQUAL
16646: IFTRUE 16650
16648: GO 16661
16650: POP
// bc_type := b_ext_radar ; 19 :
16651: LD_ADDR_OWVAR 42
16655: PUSH
16656: LD_INT 20
16658: ST_TO_ADDR
16659: GO 16966
16661: LD_INT 19
16663: DOUBLE
16664: EQUAL
16665: IFTRUE 16669
16667: GO 16680
16669: POP
// bc_type := b_ext_radio ; 20 :
16670: LD_ADDR_OWVAR 42
16674: PUSH
16675: LD_INT 22
16677: ST_TO_ADDR
16678: GO 16966
16680: LD_INT 20
16682: DOUBLE
16683: EQUAL
16684: IFTRUE 16688
16686: GO 16699
16688: POP
// bc_type := b_ext_siberium ; 21 :
16689: LD_ADDR_OWVAR 42
16693: PUSH
16694: LD_INT 21
16696: ST_TO_ADDR
16697: GO 16966
16699: LD_INT 21
16701: DOUBLE
16702: EQUAL
16703: IFTRUE 16707
16705: GO 16718
16707: POP
// bc_type := b_ext_computer ; 22 :
16708: LD_ADDR_OWVAR 42
16712: PUSH
16713: LD_INT 24
16715: ST_TO_ADDR
16716: GO 16966
16718: LD_INT 22
16720: DOUBLE
16721: EQUAL
16722: IFTRUE 16726
16724: GO 16737
16726: POP
// bc_type := b_ext_track ; 23 :
16727: LD_ADDR_OWVAR 42
16731: PUSH
16732: LD_INT 16
16734: ST_TO_ADDR
16735: GO 16966
16737: LD_INT 23
16739: DOUBLE
16740: EQUAL
16741: IFTRUE 16745
16743: GO 16756
16745: POP
// bc_type := b_ext_laser ; 24 :
16746: LD_ADDR_OWVAR 42
16750: PUSH
16751: LD_INT 25
16753: ST_TO_ADDR
16754: GO 16966
16756: LD_INT 24
16758: DOUBLE
16759: EQUAL
16760: IFTRUE 16764
16762: GO 16775
16764: POP
// bc_type := b_control_tower ; 25 :
16765: LD_ADDR_OWVAR 42
16769: PUSH
16770: LD_INT 36
16772: ST_TO_ADDR
16773: GO 16966
16775: LD_INT 25
16777: DOUBLE
16778: EQUAL
16779: IFTRUE 16783
16781: GO 16794
16783: POP
// bc_type := b_breastwork ; 26 :
16784: LD_ADDR_OWVAR 42
16788: PUSH
16789: LD_INT 31
16791: ST_TO_ADDR
16792: GO 16966
16794: LD_INT 26
16796: DOUBLE
16797: EQUAL
16798: IFTRUE 16802
16800: GO 16813
16802: POP
// bc_type := b_bunker ; 27 :
16803: LD_ADDR_OWVAR 42
16807: PUSH
16808: LD_INT 32
16810: ST_TO_ADDR
16811: GO 16966
16813: LD_INT 27
16815: DOUBLE
16816: EQUAL
16817: IFTRUE 16821
16819: GO 16832
16821: POP
// bc_type := b_turret ; 28 :
16822: LD_ADDR_OWVAR 42
16826: PUSH
16827: LD_INT 33
16829: ST_TO_ADDR
16830: GO 16966
16832: LD_INT 28
16834: DOUBLE
16835: EQUAL
16836: IFTRUE 16840
16838: GO 16851
16840: POP
// bc_type := b_armoury ; 29 :
16841: LD_ADDR_OWVAR 42
16845: PUSH
16846: LD_INT 4
16848: ST_TO_ADDR
16849: GO 16966
16851: LD_INT 29
16853: DOUBLE
16854: EQUAL
16855: IFTRUE 16859
16857: GO 16870
16859: POP
// bc_type := b_barracks ; 30 :
16860: LD_ADDR_OWVAR 42
16864: PUSH
16865: LD_INT 5
16867: ST_TO_ADDR
16868: GO 16966
16870: LD_INT 30
16872: DOUBLE
16873: EQUAL
16874: IFTRUE 16878
16876: GO 16889
16878: POP
// bc_type := b_solar_power ; 31 :
16879: LD_ADDR_OWVAR 42
16883: PUSH
16884: LD_INT 27
16886: ST_TO_ADDR
16887: GO 16966
16889: LD_INT 31
16891: DOUBLE
16892: EQUAL
16893: IFTRUE 16897
16895: GO 16908
16897: POP
// bc_type := b_oil_power ; 32 :
16898: LD_ADDR_OWVAR 42
16902: PUSH
16903: LD_INT 26
16905: ST_TO_ADDR
16906: GO 16966
16908: LD_INT 32
16910: DOUBLE
16911: EQUAL
16912: IFTRUE 16916
16914: GO 16927
16916: POP
// bc_type := b_siberite_power ; 33 :
16917: LD_ADDR_OWVAR 42
16921: PUSH
16922: LD_INT 28
16924: ST_TO_ADDR
16925: GO 16966
16927: LD_INT 33
16929: DOUBLE
16930: EQUAL
16931: IFTRUE 16935
16933: GO 16946
16935: POP
// bc_type := b_oil_mine ; 34 :
16936: LD_ADDR_OWVAR 42
16940: PUSH
16941: LD_INT 29
16943: ST_TO_ADDR
16944: GO 16966
16946: LD_INT 34
16948: DOUBLE
16949: EQUAL
16950: IFTRUE 16954
16952: GO 16965
16954: POP
// bc_type := b_siberite_mine ; end ;
16955: LD_ADDR_OWVAR 42
16959: PUSH
16960: LD_INT 30
16962: ST_TO_ADDR
16963: GO 16966
16965: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
16966: LD_ADDR_VAR 0 8
16970: PUSH
16971: LD_VAR 0 5
16975: PPUSH
16976: LD_VAR 0 6
16980: PPUSH
16981: LD_VAR 0 3
16985: PPUSH
16986: CALL_OW 47
16990: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
16991: LD_OWVAR 42
16995: PUSH
16996: LD_INT 32
16998: PUSH
16999: LD_INT 33
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: IN
17006: IFFALSE 17022
// PlaceWeaponTurret ( b , weapon ) ;
17008: LD_VAR 0 8
17012: PPUSH
17013: LD_VAR 0 4
17017: PPUSH
17018: CALL_OW 431
// end ;
17022: LD_VAR 0 7
17026: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17027: LD_INT 0
17029: PPUSH
17030: PPUSH
17031: PPUSH
17032: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17033: LD_ADDR_VAR 0 4
17037: PUSH
17038: LD_INT 22
17040: PUSH
17041: LD_OWVAR 2
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: PUSH
17050: LD_INT 2
17052: PUSH
17053: LD_INT 30
17055: PUSH
17056: LD_INT 0
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: LD_INT 30
17065: PUSH
17066: LD_INT 1
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: LIST
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PPUSH
17082: CALL_OW 69
17086: ST_TO_ADDR
// if not tmp then
17087: LD_VAR 0 4
17091: NOT
17092: IFFALSE 17096
// exit ;
17094: GO 17155
// for i in tmp do
17096: LD_ADDR_VAR 0 2
17100: PUSH
17101: LD_VAR 0 4
17105: PUSH
17106: FOR_IN
17107: IFFALSE 17153
// for j = 1 to 3 do
17109: LD_ADDR_VAR 0 3
17113: PUSH
17114: DOUBLE
17115: LD_INT 1
17117: DEC
17118: ST_TO_ADDR
17119: LD_INT 3
17121: PUSH
17122: FOR_TO
17123: IFFALSE 17149
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17125: LD_VAR 0 2
17129: PPUSH
17130: CALL_OW 274
17134: PPUSH
17135: LD_VAR 0 3
17139: PPUSH
17140: LD_INT 99999
17142: PPUSH
17143: CALL_OW 277
17147: GO 17122
17149: POP
17150: POP
17151: GO 17106
17153: POP
17154: POP
// end ;
17155: LD_VAR 0 1
17159: RET
// export function hHackSetLevel10 ; var i , j ; begin
17160: LD_INT 0
17162: PPUSH
17163: PPUSH
17164: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17165: LD_ADDR_VAR 0 2
17169: PUSH
17170: LD_INT 21
17172: PUSH
17173: LD_INT 1
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PPUSH
17180: CALL_OW 69
17184: PUSH
17185: FOR_IN
17186: IFFALSE 17238
// if IsSelected ( i ) then
17188: LD_VAR 0 2
17192: PPUSH
17193: CALL_OW 306
17197: IFFALSE 17236
// begin for j := 1 to 4 do
17199: LD_ADDR_VAR 0 3
17203: PUSH
17204: DOUBLE
17205: LD_INT 1
17207: DEC
17208: ST_TO_ADDR
17209: LD_INT 4
17211: PUSH
17212: FOR_TO
17213: IFFALSE 17234
// SetSkill ( i , j , 10 ) ;
17215: LD_VAR 0 2
17219: PPUSH
17220: LD_VAR 0 3
17224: PPUSH
17225: LD_INT 10
17227: PPUSH
17228: CALL_OW 237
17232: GO 17212
17234: POP
17235: POP
// end ;
17236: GO 17185
17238: POP
17239: POP
// end ;
17240: LD_VAR 0 1
17244: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17245: LD_INT 0
17247: PPUSH
17248: PPUSH
17249: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17250: LD_ADDR_VAR 0 2
17254: PUSH
17255: LD_INT 22
17257: PUSH
17258: LD_OWVAR 2
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 21
17269: PUSH
17270: LD_INT 1
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PPUSH
17281: CALL_OW 69
17285: PUSH
17286: FOR_IN
17287: IFFALSE 17328
// begin for j := 1 to 4 do
17289: LD_ADDR_VAR 0 3
17293: PUSH
17294: DOUBLE
17295: LD_INT 1
17297: DEC
17298: ST_TO_ADDR
17299: LD_INT 4
17301: PUSH
17302: FOR_TO
17303: IFFALSE 17324
// SetSkill ( i , j , 10 ) ;
17305: LD_VAR 0 2
17309: PPUSH
17310: LD_VAR 0 3
17314: PPUSH
17315: LD_INT 10
17317: PPUSH
17318: CALL_OW 237
17322: GO 17302
17324: POP
17325: POP
// end ;
17326: GO 17286
17328: POP
17329: POP
// end ;
17330: LD_VAR 0 1
17334: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17335: LD_INT 0
17337: PPUSH
// uc_side := your_side ;
17338: LD_ADDR_OWVAR 20
17342: PUSH
17343: LD_OWVAR 2
17347: ST_TO_ADDR
// uc_nation := nation ;
17348: LD_ADDR_OWVAR 21
17352: PUSH
17353: LD_VAR 0 1
17357: ST_TO_ADDR
// InitHc ;
17358: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17362: LD_INT 0
17364: PPUSH
17365: LD_VAR 0 2
17369: PPUSH
17370: LD_VAR 0 3
17374: PPUSH
17375: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17379: LD_VAR 0 4
17383: PPUSH
17384: LD_VAR 0 5
17388: PPUSH
17389: CALL_OW 428
17393: PUSH
17394: LD_INT 0
17396: EQUAL
17397: IFFALSE 17421
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17399: CALL_OW 44
17403: PPUSH
17404: LD_VAR 0 4
17408: PPUSH
17409: LD_VAR 0 5
17413: PPUSH
17414: LD_INT 1
17416: PPUSH
17417: CALL_OW 48
// end ;
17421: LD_VAR 0 6
17425: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
17426: LD_INT 0
17428: PPUSH
17429: PPUSH
// uc_side := your_side ;
17430: LD_ADDR_OWVAR 20
17434: PUSH
17435: LD_OWVAR 2
17439: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
17440: LD_VAR 0 1
17444: PUSH
17445: LD_INT 1
17447: PUSH
17448: LD_INT 2
17450: PUSH
17451: LD_INT 3
17453: PUSH
17454: LD_INT 4
17456: PUSH
17457: LD_INT 5
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: IN
17467: IFFALSE 17479
// uc_nation := nation_american else
17469: LD_ADDR_OWVAR 21
17473: PUSH
17474: LD_INT 1
17476: ST_TO_ADDR
17477: GO 17522
// if chassis in [ 11 , 12 , 13 , 14 ] then
17479: LD_VAR 0 1
17483: PUSH
17484: LD_INT 11
17486: PUSH
17487: LD_INT 12
17489: PUSH
17490: LD_INT 13
17492: PUSH
17493: LD_INT 14
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: IN
17502: IFFALSE 17514
// uc_nation := nation_arabian else
17504: LD_ADDR_OWVAR 21
17508: PUSH
17509: LD_INT 2
17511: ST_TO_ADDR
17512: GO 17522
// uc_nation := nation_russian ;
17514: LD_ADDR_OWVAR 21
17518: PUSH
17519: LD_INT 3
17521: ST_TO_ADDR
// vc_chassis := chassis ;
17522: LD_ADDR_OWVAR 37
17526: PUSH
17527: LD_VAR 0 1
17531: ST_TO_ADDR
// vc_engine := engine ;
17532: LD_ADDR_OWVAR 39
17536: PUSH
17537: LD_VAR 0 2
17541: ST_TO_ADDR
// vc_control := control ;
17542: LD_ADDR_OWVAR 38
17546: PUSH
17547: LD_VAR 0 3
17551: ST_TO_ADDR
// vc_weapon := weapon ;
17552: LD_ADDR_OWVAR 40
17556: PUSH
17557: LD_VAR 0 4
17561: ST_TO_ADDR
// un := CreateVehicle ;
17562: LD_ADDR_VAR 0 8
17566: PUSH
17567: CALL_OW 45
17571: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
17572: LD_VAR 0 8
17576: PPUSH
17577: LD_INT 0
17579: PPUSH
17580: LD_INT 5
17582: PPUSH
17583: CALL_OW 12
17587: PPUSH
17588: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
17592: LD_VAR 0 8
17596: PPUSH
17597: LD_VAR 0 5
17601: PPUSH
17602: LD_VAR 0 6
17606: PPUSH
17607: LD_INT 1
17609: PPUSH
17610: CALL_OW 48
// end ;
17614: LD_VAR 0 7
17618: RET
// export hInvincible ; every 1 do
17619: GO 17621
17621: DISABLE
// hInvincible := [ ] ;
17622: LD_ADDR_EXP 115
17626: PUSH
17627: EMPTY
17628: ST_TO_ADDR
17629: END
// every 10 do var i ;
17630: GO 17632
17632: DISABLE
17633: LD_INT 0
17635: PPUSH
// begin enable ;
17636: ENABLE
// if not hInvincible then
17637: LD_EXP 115
17641: NOT
17642: IFFALSE 17646
// exit ;
17644: GO 17690
// for i in hInvincible do
17646: LD_ADDR_VAR 0 1
17650: PUSH
17651: LD_EXP 115
17655: PUSH
17656: FOR_IN
17657: IFFALSE 17688
// if GetLives ( i ) < 1000 then
17659: LD_VAR 0 1
17663: PPUSH
17664: CALL_OW 256
17668: PUSH
17669: LD_INT 1000
17671: LESS
17672: IFFALSE 17686
// SetLives ( i , 1000 ) ;
17674: LD_VAR 0 1
17678: PPUSH
17679: LD_INT 1000
17681: PPUSH
17682: CALL_OW 234
17686: GO 17656
17688: POP
17689: POP
// end ;
17690: PPOPN 1
17692: END
// export function hHackInvincible ; var i ; begin
17693: LD_INT 0
17695: PPUSH
17696: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17697: LD_ADDR_VAR 0 2
17701: PUSH
17702: LD_INT 2
17704: PUSH
17705: LD_INT 21
17707: PUSH
17708: LD_INT 1
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PUSH
17715: LD_INT 21
17717: PUSH
17718: LD_INT 2
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: LIST
17729: PPUSH
17730: CALL_OW 69
17734: PUSH
17735: FOR_IN
17736: IFFALSE 17797
// if IsSelected ( i ) then
17738: LD_VAR 0 2
17742: PPUSH
17743: CALL_OW 306
17747: IFFALSE 17795
// begin if i in hInvincible then
17749: LD_VAR 0 2
17753: PUSH
17754: LD_EXP 115
17758: IN
17759: IFFALSE 17779
// hInvincible := hInvincible diff i else
17761: LD_ADDR_EXP 115
17765: PUSH
17766: LD_EXP 115
17770: PUSH
17771: LD_VAR 0 2
17775: DIFF
17776: ST_TO_ADDR
17777: GO 17795
// hInvincible := hInvincible union i ;
17779: LD_ADDR_EXP 115
17783: PUSH
17784: LD_EXP 115
17788: PUSH
17789: LD_VAR 0 2
17793: UNION
17794: ST_TO_ADDR
// end ;
17795: GO 17735
17797: POP
17798: POP
// end ;
17799: LD_VAR 0 1
17803: RET
// export function hHackInvisible ; var i , j ; begin
17804: LD_INT 0
17806: PPUSH
17807: PPUSH
17808: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17809: LD_ADDR_VAR 0 2
17813: PUSH
17814: LD_INT 21
17816: PUSH
17817: LD_INT 1
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PPUSH
17824: CALL_OW 69
17828: PUSH
17829: FOR_IN
17830: IFFALSE 17854
// if IsSelected ( i ) then
17832: LD_VAR 0 2
17836: PPUSH
17837: CALL_OW 306
17841: IFFALSE 17852
// ComForceInvisible ( i ) ;
17843: LD_VAR 0 2
17847: PPUSH
17848: CALL_OW 496
17852: GO 17829
17854: POP
17855: POP
// end ;
17856: LD_VAR 0 1
17860: RET
// export function hHackChangeYourSide ; begin
17861: LD_INT 0
17863: PPUSH
// if your_side = 8 then
17864: LD_OWVAR 2
17868: PUSH
17869: LD_INT 8
17871: EQUAL
17872: IFFALSE 17884
// your_side := 0 else
17874: LD_ADDR_OWVAR 2
17878: PUSH
17879: LD_INT 0
17881: ST_TO_ADDR
17882: GO 17898
// your_side := your_side + 1 ;
17884: LD_ADDR_OWVAR 2
17888: PUSH
17889: LD_OWVAR 2
17893: PUSH
17894: LD_INT 1
17896: PLUS
17897: ST_TO_ADDR
// end ;
17898: LD_VAR 0 1
17902: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17903: LD_INT 0
17905: PPUSH
17906: PPUSH
17907: PPUSH
// for i in all_units do
17908: LD_ADDR_VAR 0 2
17912: PUSH
17913: LD_OWVAR 3
17917: PUSH
17918: FOR_IN
17919: IFFALSE 17997
// if IsSelected ( i ) then
17921: LD_VAR 0 2
17925: PPUSH
17926: CALL_OW 306
17930: IFFALSE 17995
// begin j := GetSide ( i ) ;
17932: LD_ADDR_VAR 0 3
17936: PUSH
17937: LD_VAR 0 2
17941: PPUSH
17942: CALL_OW 255
17946: ST_TO_ADDR
// if j = 8 then
17947: LD_VAR 0 3
17951: PUSH
17952: LD_INT 8
17954: EQUAL
17955: IFFALSE 17967
// j := 0 else
17957: LD_ADDR_VAR 0 3
17961: PUSH
17962: LD_INT 0
17964: ST_TO_ADDR
17965: GO 17981
// j := j + 1 ;
17967: LD_ADDR_VAR 0 3
17971: PUSH
17972: LD_VAR 0 3
17976: PUSH
17977: LD_INT 1
17979: PLUS
17980: ST_TO_ADDR
// SetSide ( i , j ) ;
17981: LD_VAR 0 2
17985: PPUSH
17986: LD_VAR 0 3
17990: PPUSH
17991: CALL_OW 235
// end ;
17995: GO 17918
17997: POP
17998: POP
// end ;
17999: LD_VAR 0 1
18003: RET
// export function hHackFog ; begin
18004: LD_INT 0
18006: PPUSH
// FogOff ( true ) ;
18007: LD_INT 1
18009: PPUSH
18010: CALL_OW 344
// end ;
18014: LD_VAR 0 1
18018: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18019: LD_INT 0
18021: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18022: LD_VAR 0 1
18026: PPUSH
18027: LD_VAR 0 2
18031: PPUSH
18032: LD_VAR 0 3
18036: PPUSH
18037: LD_INT 1
18039: PPUSH
18040: LD_INT 1
18042: PPUSH
18043: CALL_OW 483
// CenterOnXY ( x , y ) ;
18047: LD_VAR 0 2
18051: PPUSH
18052: LD_VAR 0 3
18056: PPUSH
18057: CALL_OW 84
// end ; end_of_file
18061: LD_VAR 0 4
18065: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
18066: LD_INT 0
18068: PPUSH
18069: PPUSH
18070: PPUSH
18071: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
18072: LD_VAR 0 1
18076: PPUSH
18077: CALL_OW 264
18081: PUSH
18082: LD_EXP 43
18086: EQUAL
18087: IFFALSE 18159
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18089: LD_INT 68
18091: PPUSH
18092: LD_VAR 0 1
18096: PPUSH
18097: CALL_OW 255
18101: PPUSH
18102: CALL_OW 321
18106: PUSH
18107: LD_INT 2
18109: EQUAL
18110: IFFALSE 18122
// eff := 70 else
18112: LD_ADDR_VAR 0 4
18116: PUSH
18117: LD_INT 70
18119: ST_TO_ADDR
18120: GO 18130
// eff := 30 ;
18122: LD_ADDR_VAR 0 4
18126: PUSH
18127: LD_INT 30
18129: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18130: LD_VAR 0 1
18134: PPUSH
18135: CALL_OW 250
18139: PPUSH
18140: LD_VAR 0 1
18144: PPUSH
18145: CALL_OW 251
18149: PPUSH
18150: LD_VAR 0 4
18154: PPUSH
18155: CALL_OW 495
// end ; end ;
18159: LD_VAR 0 2
18163: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
18164: LD_INT 0
18166: PPUSH
// end ;
18167: LD_VAR 0 4
18171: RET
// export function SOS_Command ( cmd ) ; begin
18172: LD_INT 0
18174: PPUSH
// end ;
18175: LD_VAR 0 2
18179: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
18180: LD_INT 0
18182: PPUSH
// end ;
18183: LD_VAR 0 6
18187: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18188: LD_INT 0
18190: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18191: LD_VAR 0 1
18195: PUSH
18196: LD_INT 250
18198: EQUAL
18199: PUSH
18200: LD_VAR 0 2
18204: PPUSH
18205: CALL_OW 264
18209: PUSH
18210: LD_EXP 46
18214: EQUAL
18215: AND
18216: IFFALSE 18237
// MinerPlaceMine ( unit , x , y ) ;
18218: LD_VAR 0 2
18222: PPUSH
18223: LD_VAR 0 4
18227: PPUSH
18228: LD_VAR 0 5
18232: PPUSH
18233: CALL 20586 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18237: LD_VAR 0 1
18241: PUSH
18242: LD_INT 251
18244: EQUAL
18245: PUSH
18246: LD_VAR 0 2
18250: PPUSH
18251: CALL_OW 264
18255: PUSH
18256: LD_EXP 46
18260: EQUAL
18261: AND
18262: IFFALSE 18283
// MinerDetonateMine ( unit , x , y ) ;
18264: LD_VAR 0 2
18268: PPUSH
18269: LD_VAR 0 4
18273: PPUSH
18274: LD_VAR 0 5
18278: PPUSH
18279: CALL 20863 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18283: LD_VAR 0 1
18287: PUSH
18288: LD_INT 252
18290: EQUAL
18291: PUSH
18292: LD_VAR 0 2
18296: PPUSH
18297: CALL_OW 264
18301: PUSH
18302: LD_EXP 46
18306: EQUAL
18307: AND
18308: IFFALSE 18329
// MinerCreateMinefield ( unit , x , y ) ;
18310: LD_VAR 0 2
18314: PPUSH
18315: LD_VAR 0 4
18319: PPUSH
18320: LD_VAR 0 5
18324: PPUSH
18325: CALL 21280 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18329: LD_VAR 0 1
18333: PUSH
18334: LD_INT 253
18336: EQUAL
18337: PUSH
18338: LD_VAR 0 2
18342: PPUSH
18343: CALL_OW 257
18347: PUSH
18348: LD_INT 5
18350: EQUAL
18351: AND
18352: IFFALSE 18373
// ComBinocular ( unit , x , y ) ;
18354: LD_VAR 0 2
18358: PPUSH
18359: LD_VAR 0 4
18363: PPUSH
18364: LD_VAR 0 5
18368: PPUSH
18369: CALL 21651 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18373: LD_VAR 0 1
18377: PUSH
18378: LD_INT 254
18380: EQUAL
18381: PUSH
18382: LD_VAR 0 2
18386: PPUSH
18387: CALL_OW 264
18391: PUSH
18392: LD_EXP 41
18396: EQUAL
18397: AND
18398: PUSH
18399: LD_VAR 0 3
18403: PPUSH
18404: CALL_OW 263
18408: PUSH
18409: LD_INT 3
18411: EQUAL
18412: AND
18413: IFFALSE 18429
// HackDestroyVehicle ( unit , selectedUnit ) ;
18415: LD_VAR 0 2
18419: PPUSH
18420: LD_VAR 0 3
18424: PPUSH
18425: CALL 19946 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18429: LD_VAR 0 1
18433: PUSH
18434: LD_INT 255
18436: EQUAL
18437: PUSH
18438: LD_VAR 0 2
18442: PPUSH
18443: CALL_OW 264
18447: PUSH
18448: LD_INT 14
18450: PUSH
18451: LD_INT 53
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: IN
18458: AND
18459: PUSH
18460: LD_VAR 0 4
18464: PPUSH
18465: LD_VAR 0 5
18469: PPUSH
18470: CALL_OW 488
18474: AND
18475: IFFALSE 18499
// CutTreeXYR ( unit , x , y , 12 ) ;
18477: LD_VAR 0 2
18481: PPUSH
18482: LD_VAR 0 4
18486: PPUSH
18487: LD_VAR 0 5
18491: PPUSH
18492: LD_INT 12
18494: PPUSH
18495: CALL 18512 0 4
// end ;
18499: LD_VAR 0 6
18503: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
18504: LD_INT 0
18506: PPUSH
// end ;
18507: LD_VAR 0 4
18511: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18512: LD_INT 0
18514: PPUSH
18515: PPUSH
18516: PPUSH
18517: PPUSH
18518: PPUSH
18519: PPUSH
18520: PPUSH
18521: PPUSH
18522: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18523: LD_VAR 0 1
18527: NOT
18528: PUSH
18529: LD_VAR 0 2
18533: PPUSH
18534: LD_VAR 0 3
18538: PPUSH
18539: CALL_OW 488
18543: NOT
18544: OR
18545: PUSH
18546: LD_VAR 0 4
18550: NOT
18551: OR
18552: IFFALSE 18556
// exit ;
18554: GO 18896
// list := [ ] ;
18556: LD_ADDR_VAR 0 13
18560: PUSH
18561: EMPTY
18562: ST_TO_ADDR
// if x - r < 0 then
18563: LD_VAR 0 2
18567: PUSH
18568: LD_VAR 0 4
18572: MINUS
18573: PUSH
18574: LD_INT 0
18576: LESS
18577: IFFALSE 18589
// min_x := 0 else
18579: LD_ADDR_VAR 0 7
18583: PUSH
18584: LD_INT 0
18586: ST_TO_ADDR
18587: GO 18605
// min_x := x - r ;
18589: LD_ADDR_VAR 0 7
18593: PUSH
18594: LD_VAR 0 2
18598: PUSH
18599: LD_VAR 0 4
18603: MINUS
18604: ST_TO_ADDR
// if y - r < 0 then
18605: LD_VAR 0 3
18609: PUSH
18610: LD_VAR 0 4
18614: MINUS
18615: PUSH
18616: LD_INT 0
18618: LESS
18619: IFFALSE 18631
// min_y := 0 else
18621: LD_ADDR_VAR 0 8
18625: PUSH
18626: LD_INT 0
18628: ST_TO_ADDR
18629: GO 18647
// min_y := y - r ;
18631: LD_ADDR_VAR 0 8
18635: PUSH
18636: LD_VAR 0 3
18640: PUSH
18641: LD_VAR 0 4
18645: MINUS
18646: ST_TO_ADDR
// max_x := x + r ;
18647: LD_ADDR_VAR 0 9
18651: PUSH
18652: LD_VAR 0 2
18656: PUSH
18657: LD_VAR 0 4
18661: PLUS
18662: ST_TO_ADDR
// max_y := y + r ;
18663: LD_ADDR_VAR 0 10
18667: PUSH
18668: LD_VAR 0 3
18672: PUSH
18673: LD_VAR 0 4
18677: PLUS
18678: ST_TO_ADDR
// for _x = min_x to max_x do
18679: LD_ADDR_VAR 0 11
18683: PUSH
18684: DOUBLE
18685: LD_VAR 0 7
18689: DEC
18690: ST_TO_ADDR
18691: LD_VAR 0 9
18695: PUSH
18696: FOR_TO
18697: IFFALSE 18814
// for _y = min_y to max_y do
18699: LD_ADDR_VAR 0 12
18703: PUSH
18704: DOUBLE
18705: LD_VAR 0 8
18709: DEC
18710: ST_TO_ADDR
18711: LD_VAR 0 10
18715: PUSH
18716: FOR_TO
18717: IFFALSE 18810
// begin if not ValidHex ( _x , _y ) then
18719: LD_VAR 0 11
18723: PPUSH
18724: LD_VAR 0 12
18728: PPUSH
18729: CALL_OW 488
18733: NOT
18734: IFFALSE 18738
// continue ;
18736: GO 18716
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18738: LD_VAR 0 11
18742: PPUSH
18743: LD_VAR 0 12
18747: PPUSH
18748: CALL_OW 351
18752: PUSH
18753: LD_VAR 0 11
18757: PPUSH
18758: LD_VAR 0 12
18762: PPUSH
18763: CALL_OW 554
18767: AND
18768: IFFALSE 18808
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18770: LD_ADDR_VAR 0 13
18774: PUSH
18775: LD_VAR 0 13
18779: PPUSH
18780: LD_VAR 0 13
18784: PUSH
18785: LD_INT 1
18787: PLUS
18788: PPUSH
18789: LD_VAR 0 11
18793: PUSH
18794: LD_VAR 0 12
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PPUSH
18803: CALL_OW 2
18807: ST_TO_ADDR
// end ;
18808: GO 18716
18810: POP
18811: POP
18812: GO 18696
18814: POP
18815: POP
// if not list then
18816: LD_VAR 0 13
18820: NOT
18821: IFFALSE 18825
// exit ;
18823: GO 18896
// for i in list do
18825: LD_ADDR_VAR 0 6
18829: PUSH
18830: LD_VAR 0 13
18834: PUSH
18835: FOR_IN
18836: IFFALSE 18894
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18838: LD_VAR 0 1
18842: PPUSH
18843: LD_STRING M
18845: PUSH
18846: LD_VAR 0 6
18850: PUSH
18851: LD_INT 1
18853: ARRAY
18854: PUSH
18855: LD_VAR 0 6
18859: PUSH
18860: LD_INT 2
18862: ARRAY
18863: PUSH
18864: LD_INT 0
18866: PUSH
18867: LD_INT 0
18869: PUSH
18870: LD_INT 0
18872: PUSH
18873: LD_INT 0
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: PUSH
18885: EMPTY
18886: LIST
18887: PPUSH
18888: CALL_OW 447
18892: GO 18835
18894: POP
18895: POP
// end ;
18896: LD_VAR 0 5
18900: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18901: LD_EXP 118
18905: NOT
18906: IFFALSE 18956
18908: GO 18910
18910: DISABLE
// begin initHack := true ;
18911: LD_ADDR_EXP 118
18915: PUSH
18916: LD_INT 1
18918: ST_TO_ADDR
// hackTanks := [ ] ;
18919: LD_ADDR_EXP 119
18923: PUSH
18924: EMPTY
18925: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18926: LD_ADDR_EXP 120
18930: PUSH
18931: EMPTY
18932: ST_TO_ADDR
// hackLimit := 3 ;
18933: LD_ADDR_EXP 121
18937: PUSH
18938: LD_INT 3
18940: ST_TO_ADDR
// hackDist := 12 ;
18941: LD_ADDR_EXP 122
18945: PUSH
18946: LD_INT 12
18948: ST_TO_ADDR
// hackCounter := [ ] ;
18949: LD_ADDR_EXP 123
18953: PUSH
18954: EMPTY
18955: ST_TO_ADDR
// end ;
18956: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18957: LD_EXP 118
18961: PUSH
18962: LD_INT 34
18964: PUSH
18965: LD_EXP 41
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PPUSH
18974: CALL_OW 69
18978: AND
18979: IFFALSE 19234
18981: GO 18983
18983: DISABLE
18984: LD_INT 0
18986: PPUSH
18987: PPUSH
// begin enable ;
18988: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18989: LD_ADDR_VAR 0 1
18993: PUSH
18994: LD_INT 34
18996: PUSH
18997: LD_EXP 41
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PPUSH
19006: CALL_OW 69
19010: PUSH
19011: FOR_IN
19012: IFFALSE 19232
// begin if not i in hackTanks then
19014: LD_VAR 0 1
19018: PUSH
19019: LD_EXP 119
19023: IN
19024: NOT
19025: IFFALSE 19108
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19027: LD_ADDR_EXP 119
19031: PUSH
19032: LD_EXP 119
19036: PPUSH
19037: LD_EXP 119
19041: PUSH
19042: LD_INT 1
19044: PLUS
19045: PPUSH
19046: LD_VAR 0 1
19050: PPUSH
19051: CALL_OW 1
19055: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19056: LD_ADDR_EXP 120
19060: PUSH
19061: LD_EXP 120
19065: PPUSH
19066: LD_EXP 120
19070: PUSH
19071: LD_INT 1
19073: PLUS
19074: PPUSH
19075: EMPTY
19076: PPUSH
19077: CALL_OW 1
19081: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19082: LD_ADDR_EXP 123
19086: PUSH
19087: LD_EXP 123
19091: PPUSH
19092: LD_EXP 123
19096: PUSH
19097: LD_INT 1
19099: PLUS
19100: PPUSH
19101: EMPTY
19102: PPUSH
19103: CALL_OW 1
19107: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19108: LD_VAR 0 1
19112: PPUSH
19113: CALL_OW 302
19117: NOT
19118: IFFALSE 19131
// begin HackUnlinkAll ( i ) ;
19120: LD_VAR 0 1
19124: PPUSH
19125: CALL 19237 0 1
// continue ;
19129: GO 19011
// end ; HackCheckCapturedStatus ( i ) ;
19131: LD_VAR 0 1
19135: PPUSH
19136: CALL 19680 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19140: LD_ADDR_VAR 0 2
19144: PUSH
19145: LD_INT 81
19147: PUSH
19148: LD_VAR 0 1
19152: PPUSH
19153: CALL_OW 255
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 33
19164: PUSH
19165: LD_INT 3
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 91
19174: PUSH
19175: LD_VAR 0 1
19179: PUSH
19180: LD_EXP 122
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: LIST
19189: PUSH
19190: LD_INT 50
19192: PUSH
19193: EMPTY
19194: LIST
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: PPUSH
19202: CALL_OW 69
19206: ST_TO_ADDR
// if not tmp then
19207: LD_VAR 0 2
19211: NOT
19212: IFFALSE 19216
// continue ;
19214: GO 19011
// HackLink ( i , tmp ) ;
19216: LD_VAR 0 1
19220: PPUSH
19221: LD_VAR 0 2
19225: PPUSH
19226: CALL 19373 0 2
// end ;
19230: GO 19011
19232: POP
19233: POP
// end ;
19234: PPOPN 2
19236: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19237: LD_INT 0
19239: PPUSH
19240: PPUSH
19241: PPUSH
// if not hack in hackTanks then
19242: LD_VAR 0 1
19246: PUSH
19247: LD_EXP 119
19251: IN
19252: NOT
19253: IFFALSE 19257
// exit ;
19255: GO 19368
// index := GetElementIndex ( hackTanks , hack ) ;
19257: LD_ADDR_VAR 0 4
19261: PUSH
19262: LD_EXP 119
19266: PPUSH
19267: LD_VAR 0 1
19271: PPUSH
19272: CALL 26842 0 2
19276: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19277: LD_EXP 120
19281: PUSH
19282: LD_VAR 0 4
19286: ARRAY
19287: IFFALSE 19368
// begin for i in hackTanksCaptured [ index ] do
19289: LD_ADDR_VAR 0 3
19293: PUSH
19294: LD_EXP 120
19298: PUSH
19299: LD_VAR 0 4
19303: ARRAY
19304: PUSH
19305: FOR_IN
19306: IFFALSE 19332
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19308: LD_VAR 0 3
19312: PUSH
19313: LD_INT 1
19315: ARRAY
19316: PPUSH
19317: LD_VAR 0 3
19321: PUSH
19322: LD_INT 2
19324: ARRAY
19325: PPUSH
19326: CALL_OW 235
19330: GO 19305
19332: POP
19333: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19334: LD_ADDR_EXP 120
19338: PUSH
19339: LD_EXP 120
19343: PPUSH
19344: LD_VAR 0 4
19348: PPUSH
19349: EMPTY
19350: PPUSH
19351: CALL_OW 1
19355: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19356: LD_VAR 0 1
19360: PPUSH
19361: LD_INT 0
19363: PPUSH
19364: CALL_OW 505
// end ; end ;
19368: LD_VAR 0 2
19372: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19373: LD_INT 0
19375: PPUSH
19376: PPUSH
19377: PPUSH
// if not hack in hackTanks or not vehicles then
19378: LD_VAR 0 1
19382: PUSH
19383: LD_EXP 119
19387: IN
19388: NOT
19389: PUSH
19390: LD_VAR 0 2
19394: NOT
19395: OR
19396: IFFALSE 19400
// exit ;
19398: GO 19675
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19400: LD_ADDR_VAR 0 2
19404: PUSH
19405: LD_VAR 0 1
19409: PPUSH
19410: LD_VAR 0 2
19414: PPUSH
19415: LD_INT 1
19417: PPUSH
19418: LD_INT 1
19420: PPUSH
19421: CALL 27492 0 4
19425: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19426: LD_ADDR_VAR 0 5
19430: PUSH
19431: LD_EXP 119
19435: PPUSH
19436: LD_VAR 0 1
19440: PPUSH
19441: CALL 26842 0 2
19445: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19446: LD_EXP 120
19450: PUSH
19451: LD_VAR 0 5
19455: ARRAY
19456: PUSH
19457: LD_EXP 121
19461: LESS
19462: IFFALSE 19651
// begin for i := 1 to vehicles do
19464: LD_ADDR_VAR 0 4
19468: PUSH
19469: DOUBLE
19470: LD_INT 1
19472: DEC
19473: ST_TO_ADDR
19474: LD_VAR 0 2
19478: PUSH
19479: FOR_TO
19480: IFFALSE 19649
// begin if hackTanksCaptured [ index ] = hackLimit then
19482: LD_EXP 120
19486: PUSH
19487: LD_VAR 0 5
19491: ARRAY
19492: PUSH
19493: LD_EXP 121
19497: EQUAL
19498: IFFALSE 19502
// break ;
19500: GO 19649
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19502: LD_ADDR_EXP 123
19506: PUSH
19507: LD_EXP 123
19511: PPUSH
19512: LD_VAR 0 5
19516: PPUSH
19517: LD_EXP 123
19521: PUSH
19522: LD_VAR 0 5
19526: ARRAY
19527: PUSH
19528: LD_INT 1
19530: PLUS
19531: PPUSH
19532: CALL_OW 1
19536: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19537: LD_ADDR_EXP 120
19541: PUSH
19542: LD_EXP 120
19546: PPUSH
19547: LD_VAR 0 5
19551: PUSH
19552: LD_EXP 120
19556: PUSH
19557: LD_VAR 0 5
19561: ARRAY
19562: PUSH
19563: LD_INT 1
19565: PLUS
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PPUSH
19571: LD_VAR 0 2
19575: PUSH
19576: LD_VAR 0 4
19580: ARRAY
19581: PUSH
19582: LD_VAR 0 2
19586: PUSH
19587: LD_VAR 0 4
19591: ARRAY
19592: PPUSH
19593: CALL_OW 255
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PPUSH
19602: CALL 27057 0 3
19606: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19607: LD_VAR 0 2
19611: PUSH
19612: LD_VAR 0 4
19616: ARRAY
19617: PPUSH
19618: LD_VAR 0 1
19622: PPUSH
19623: CALL_OW 255
19627: PPUSH
19628: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19632: LD_VAR 0 2
19636: PUSH
19637: LD_VAR 0 4
19641: ARRAY
19642: PPUSH
19643: CALL_OW 141
// end ;
19647: GO 19479
19649: POP
19650: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19651: LD_VAR 0 1
19655: PPUSH
19656: LD_EXP 120
19660: PUSH
19661: LD_VAR 0 5
19665: ARRAY
19666: PUSH
19667: LD_INT 0
19669: PLUS
19670: PPUSH
19671: CALL_OW 505
// end ;
19675: LD_VAR 0 3
19679: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19680: LD_INT 0
19682: PPUSH
19683: PPUSH
19684: PPUSH
19685: PPUSH
// if not hack in hackTanks then
19686: LD_VAR 0 1
19690: PUSH
19691: LD_EXP 119
19695: IN
19696: NOT
19697: IFFALSE 19701
// exit ;
19699: GO 19941
// index := GetElementIndex ( hackTanks , hack ) ;
19701: LD_ADDR_VAR 0 4
19705: PUSH
19706: LD_EXP 119
19710: PPUSH
19711: LD_VAR 0 1
19715: PPUSH
19716: CALL 26842 0 2
19720: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19721: LD_ADDR_VAR 0 3
19725: PUSH
19726: DOUBLE
19727: LD_EXP 120
19731: PUSH
19732: LD_VAR 0 4
19736: ARRAY
19737: INC
19738: ST_TO_ADDR
19739: LD_INT 1
19741: PUSH
19742: FOR_DOWNTO
19743: IFFALSE 19915
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19745: LD_ADDR_VAR 0 5
19749: PUSH
19750: LD_EXP 120
19754: PUSH
19755: LD_VAR 0 4
19759: ARRAY
19760: PUSH
19761: LD_VAR 0 3
19765: ARRAY
19766: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19767: LD_VAR 0 5
19771: PUSH
19772: LD_INT 1
19774: ARRAY
19775: PPUSH
19776: CALL_OW 302
19780: NOT
19781: PUSH
19782: LD_VAR 0 5
19786: PUSH
19787: LD_INT 1
19789: ARRAY
19790: PPUSH
19791: CALL_OW 255
19795: PUSH
19796: LD_VAR 0 1
19800: PPUSH
19801: CALL_OW 255
19805: NONEQUAL
19806: OR
19807: IFFALSE 19913
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19809: LD_VAR 0 5
19813: PUSH
19814: LD_INT 1
19816: ARRAY
19817: PPUSH
19818: CALL_OW 305
19822: PUSH
19823: LD_VAR 0 5
19827: PUSH
19828: LD_INT 1
19830: ARRAY
19831: PPUSH
19832: CALL_OW 255
19836: PUSH
19837: LD_VAR 0 1
19841: PPUSH
19842: CALL_OW 255
19846: EQUAL
19847: AND
19848: IFFALSE 19872
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19850: LD_VAR 0 5
19854: PUSH
19855: LD_INT 1
19857: ARRAY
19858: PPUSH
19859: LD_VAR 0 5
19863: PUSH
19864: LD_INT 2
19866: ARRAY
19867: PPUSH
19868: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19872: LD_ADDR_EXP 120
19876: PUSH
19877: LD_EXP 120
19881: PPUSH
19882: LD_VAR 0 4
19886: PPUSH
19887: LD_EXP 120
19891: PUSH
19892: LD_VAR 0 4
19896: ARRAY
19897: PPUSH
19898: LD_VAR 0 3
19902: PPUSH
19903: CALL_OW 3
19907: PPUSH
19908: CALL_OW 1
19912: ST_TO_ADDR
// end ; end ;
19913: GO 19742
19915: POP
19916: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19917: LD_VAR 0 1
19921: PPUSH
19922: LD_EXP 120
19926: PUSH
19927: LD_VAR 0 4
19931: ARRAY
19932: PUSH
19933: LD_INT 0
19935: PLUS
19936: PPUSH
19937: CALL_OW 505
// end ;
19941: LD_VAR 0 2
19945: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19946: LD_INT 0
19948: PPUSH
19949: PPUSH
19950: PPUSH
19951: PPUSH
// if not hack in hackTanks then
19952: LD_VAR 0 1
19956: PUSH
19957: LD_EXP 119
19961: IN
19962: NOT
19963: IFFALSE 19967
// exit ;
19965: GO 20052
// index := GetElementIndex ( hackTanks , hack ) ;
19967: LD_ADDR_VAR 0 5
19971: PUSH
19972: LD_EXP 119
19976: PPUSH
19977: LD_VAR 0 1
19981: PPUSH
19982: CALL 26842 0 2
19986: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19987: LD_ADDR_VAR 0 4
19991: PUSH
19992: DOUBLE
19993: LD_INT 1
19995: DEC
19996: ST_TO_ADDR
19997: LD_EXP 120
20001: PUSH
20002: LD_VAR 0 5
20006: ARRAY
20007: PUSH
20008: FOR_TO
20009: IFFALSE 20050
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20011: LD_EXP 120
20015: PUSH
20016: LD_VAR 0 5
20020: ARRAY
20021: PUSH
20022: LD_VAR 0 4
20026: ARRAY
20027: PUSH
20028: LD_INT 1
20030: ARRAY
20031: PUSH
20032: LD_VAR 0 2
20036: EQUAL
20037: IFFALSE 20048
// KillUnit ( vehicle ) ;
20039: LD_VAR 0 2
20043: PPUSH
20044: CALL_OW 66
20048: GO 20008
20050: POP
20051: POP
// end ;
20052: LD_VAR 0 3
20056: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20057: LD_EXP 124
20061: NOT
20062: IFFALSE 20097
20064: GO 20066
20066: DISABLE
// begin initMiner := true ;
20067: LD_ADDR_EXP 124
20071: PUSH
20072: LD_INT 1
20074: ST_TO_ADDR
// minersList := [ ] ;
20075: LD_ADDR_EXP 125
20079: PUSH
20080: EMPTY
20081: ST_TO_ADDR
// minerMinesList := [ ] ;
20082: LD_ADDR_EXP 126
20086: PUSH
20087: EMPTY
20088: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20089: LD_ADDR_EXP 127
20093: PUSH
20094: LD_INT 5
20096: ST_TO_ADDR
// end ;
20097: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20098: LD_EXP 124
20102: PUSH
20103: LD_INT 34
20105: PUSH
20106: LD_EXP 46
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PPUSH
20115: CALL_OW 69
20119: AND
20120: IFFALSE 20583
20122: GO 20124
20124: DISABLE
20125: LD_INT 0
20127: PPUSH
20128: PPUSH
20129: PPUSH
20130: PPUSH
// begin enable ;
20131: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20132: LD_ADDR_VAR 0 1
20136: PUSH
20137: LD_INT 34
20139: PUSH
20140: LD_EXP 46
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PPUSH
20149: CALL_OW 69
20153: PUSH
20154: FOR_IN
20155: IFFALSE 20227
// begin if not i in minersList then
20157: LD_VAR 0 1
20161: PUSH
20162: LD_EXP 125
20166: IN
20167: NOT
20168: IFFALSE 20225
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20170: LD_ADDR_EXP 125
20174: PUSH
20175: LD_EXP 125
20179: PPUSH
20180: LD_EXP 125
20184: PUSH
20185: LD_INT 1
20187: PLUS
20188: PPUSH
20189: LD_VAR 0 1
20193: PPUSH
20194: CALL_OW 1
20198: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20199: LD_ADDR_EXP 126
20203: PUSH
20204: LD_EXP 126
20208: PPUSH
20209: LD_EXP 126
20213: PUSH
20214: LD_INT 1
20216: PLUS
20217: PPUSH
20218: EMPTY
20219: PPUSH
20220: CALL_OW 1
20224: ST_TO_ADDR
// end end ;
20225: GO 20154
20227: POP
20228: POP
// for i := minerMinesList downto 1 do
20229: LD_ADDR_VAR 0 1
20233: PUSH
20234: DOUBLE
20235: LD_EXP 126
20239: INC
20240: ST_TO_ADDR
20241: LD_INT 1
20243: PUSH
20244: FOR_DOWNTO
20245: IFFALSE 20581
// begin if IsLive ( minersList [ i ] ) then
20247: LD_EXP 125
20251: PUSH
20252: LD_VAR 0 1
20256: ARRAY
20257: PPUSH
20258: CALL_OW 300
20262: IFFALSE 20290
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20264: LD_EXP 125
20268: PUSH
20269: LD_VAR 0 1
20273: ARRAY
20274: PPUSH
20275: LD_EXP 126
20279: PUSH
20280: LD_VAR 0 1
20284: ARRAY
20285: PPUSH
20286: CALL_OW 505
// if not minerMinesList [ i ] then
20290: LD_EXP 126
20294: PUSH
20295: LD_VAR 0 1
20299: ARRAY
20300: NOT
20301: IFFALSE 20305
// continue ;
20303: GO 20244
// for j := minerMinesList [ i ] downto 1 do
20305: LD_ADDR_VAR 0 2
20309: PUSH
20310: DOUBLE
20311: LD_EXP 126
20315: PUSH
20316: LD_VAR 0 1
20320: ARRAY
20321: INC
20322: ST_TO_ADDR
20323: LD_INT 1
20325: PUSH
20326: FOR_DOWNTO
20327: IFFALSE 20577
// begin side := GetSide ( minersList [ i ] ) ;
20329: LD_ADDR_VAR 0 3
20333: PUSH
20334: LD_EXP 125
20338: PUSH
20339: LD_VAR 0 1
20343: ARRAY
20344: PPUSH
20345: CALL_OW 255
20349: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20350: LD_ADDR_VAR 0 4
20354: PUSH
20355: LD_EXP 126
20359: PUSH
20360: LD_VAR 0 1
20364: ARRAY
20365: PUSH
20366: LD_VAR 0 2
20370: ARRAY
20371: PUSH
20372: LD_INT 1
20374: ARRAY
20375: PPUSH
20376: LD_EXP 126
20380: PUSH
20381: LD_VAR 0 1
20385: ARRAY
20386: PUSH
20387: LD_VAR 0 2
20391: ARRAY
20392: PUSH
20393: LD_INT 2
20395: ARRAY
20396: PPUSH
20397: CALL_OW 428
20401: ST_TO_ADDR
// if not tmp then
20402: LD_VAR 0 4
20406: NOT
20407: IFFALSE 20411
// continue ;
20409: GO 20326
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20411: LD_VAR 0 4
20415: PUSH
20416: LD_INT 81
20418: PUSH
20419: LD_VAR 0 3
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: PPUSH
20428: CALL_OW 69
20432: IN
20433: PUSH
20434: LD_EXP 126
20438: PUSH
20439: LD_VAR 0 1
20443: ARRAY
20444: PUSH
20445: LD_VAR 0 2
20449: ARRAY
20450: PUSH
20451: LD_INT 1
20453: ARRAY
20454: PPUSH
20455: LD_EXP 126
20459: PUSH
20460: LD_VAR 0 1
20464: ARRAY
20465: PUSH
20466: LD_VAR 0 2
20470: ARRAY
20471: PUSH
20472: LD_INT 2
20474: ARRAY
20475: PPUSH
20476: CALL_OW 458
20480: AND
20481: IFFALSE 20575
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20483: LD_EXP 126
20487: PUSH
20488: LD_VAR 0 1
20492: ARRAY
20493: PUSH
20494: LD_VAR 0 2
20498: ARRAY
20499: PUSH
20500: LD_INT 1
20502: ARRAY
20503: PPUSH
20504: LD_EXP 126
20508: PUSH
20509: LD_VAR 0 1
20513: ARRAY
20514: PUSH
20515: LD_VAR 0 2
20519: ARRAY
20520: PUSH
20521: LD_INT 2
20523: ARRAY
20524: PPUSH
20525: LD_VAR 0 3
20529: PPUSH
20530: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20534: LD_ADDR_EXP 126
20538: PUSH
20539: LD_EXP 126
20543: PPUSH
20544: LD_VAR 0 1
20548: PPUSH
20549: LD_EXP 126
20553: PUSH
20554: LD_VAR 0 1
20558: ARRAY
20559: PPUSH
20560: LD_VAR 0 2
20564: PPUSH
20565: CALL_OW 3
20569: PPUSH
20570: CALL_OW 1
20574: ST_TO_ADDR
// end ; end ;
20575: GO 20326
20577: POP
20578: POP
// end ;
20579: GO 20244
20581: POP
20582: POP
// end ;
20583: PPOPN 4
20585: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20586: LD_INT 0
20588: PPUSH
20589: PPUSH
// result := false ;
20590: LD_ADDR_VAR 0 4
20594: PUSH
20595: LD_INT 0
20597: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20598: LD_VAR 0 1
20602: PPUSH
20603: CALL_OW 264
20607: PUSH
20608: LD_EXP 46
20612: EQUAL
20613: NOT
20614: IFFALSE 20618
// exit ;
20616: GO 20858
// index := GetElementIndex ( minersList , unit ) ;
20618: LD_ADDR_VAR 0 5
20622: PUSH
20623: LD_EXP 125
20627: PPUSH
20628: LD_VAR 0 1
20632: PPUSH
20633: CALL 26842 0 2
20637: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20638: LD_EXP 126
20642: PUSH
20643: LD_VAR 0 5
20647: ARRAY
20648: PUSH
20649: LD_EXP 127
20653: GREATEREQUAL
20654: IFFALSE 20658
// exit ;
20656: GO 20858
// ComMoveXY ( unit , x , y ) ;
20658: LD_VAR 0 1
20662: PPUSH
20663: LD_VAR 0 2
20667: PPUSH
20668: LD_VAR 0 3
20672: PPUSH
20673: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20677: LD_INT 35
20679: PPUSH
20680: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20684: LD_VAR 0 1
20688: PPUSH
20689: LD_VAR 0 2
20693: PPUSH
20694: LD_VAR 0 3
20698: PPUSH
20699: CALL 57614 0 3
20703: NOT
20704: PUSH
20705: LD_VAR 0 1
20709: PPUSH
20710: CALL_OW 314
20714: AND
20715: IFFALSE 20719
// exit ;
20717: GO 20858
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20719: LD_VAR 0 2
20723: PPUSH
20724: LD_VAR 0 3
20728: PPUSH
20729: CALL_OW 428
20733: PUSH
20734: LD_VAR 0 1
20738: EQUAL
20739: PUSH
20740: LD_VAR 0 1
20744: PPUSH
20745: CALL_OW 314
20749: NOT
20750: AND
20751: IFFALSE 20677
// PlaySoundXY ( x , y , PlantMine ) ;
20753: LD_VAR 0 2
20757: PPUSH
20758: LD_VAR 0 3
20762: PPUSH
20763: LD_STRING PlantMine
20765: PPUSH
20766: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20770: LD_VAR 0 2
20774: PPUSH
20775: LD_VAR 0 3
20779: PPUSH
20780: LD_VAR 0 1
20784: PPUSH
20785: CALL_OW 255
20789: PPUSH
20790: LD_INT 0
20792: PPUSH
20793: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20797: LD_ADDR_EXP 126
20801: PUSH
20802: LD_EXP 126
20806: PPUSH
20807: LD_VAR 0 5
20811: PUSH
20812: LD_EXP 126
20816: PUSH
20817: LD_VAR 0 5
20821: ARRAY
20822: PUSH
20823: LD_INT 1
20825: PLUS
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PPUSH
20831: LD_VAR 0 2
20835: PUSH
20836: LD_VAR 0 3
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PPUSH
20845: CALL 27057 0 3
20849: ST_TO_ADDR
// result := true ;
20850: LD_ADDR_VAR 0 4
20854: PUSH
20855: LD_INT 1
20857: ST_TO_ADDR
// end ;
20858: LD_VAR 0 4
20862: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20863: LD_INT 0
20865: PPUSH
20866: PPUSH
20867: PPUSH
// if not unit in minersList then
20868: LD_VAR 0 1
20872: PUSH
20873: LD_EXP 125
20877: IN
20878: NOT
20879: IFFALSE 20883
// exit ;
20881: GO 21275
// index := GetElementIndex ( minersList , unit ) ;
20883: LD_ADDR_VAR 0 6
20887: PUSH
20888: LD_EXP 125
20892: PPUSH
20893: LD_VAR 0 1
20897: PPUSH
20898: CALL 26842 0 2
20902: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20903: LD_ADDR_VAR 0 5
20907: PUSH
20908: DOUBLE
20909: LD_EXP 126
20913: PUSH
20914: LD_VAR 0 6
20918: ARRAY
20919: INC
20920: ST_TO_ADDR
20921: LD_INT 1
20923: PUSH
20924: FOR_DOWNTO
20925: IFFALSE 21086
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20927: LD_EXP 126
20931: PUSH
20932: LD_VAR 0 6
20936: ARRAY
20937: PUSH
20938: LD_VAR 0 5
20942: ARRAY
20943: PUSH
20944: LD_INT 1
20946: ARRAY
20947: PUSH
20948: LD_VAR 0 2
20952: EQUAL
20953: PUSH
20954: LD_EXP 126
20958: PUSH
20959: LD_VAR 0 6
20963: ARRAY
20964: PUSH
20965: LD_VAR 0 5
20969: ARRAY
20970: PUSH
20971: LD_INT 2
20973: ARRAY
20974: PUSH
20975: LD_VAR 0 3
20979: EQUAL
20980: AND
20981: IFFALSE 21084
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20983: LD_EXP 126
20987: PUSH
20988: LD_VAR 0 6
20992: ARRAY
20993: PUSH
20994: LD_VAR 0 5
20998: ARRAY
20999: PUSH
21000: LD_INT 1
21002: ARRAY
21003: PPUSH
21004: LD_EXP 126
21008: PUSH
21009: LD_VAR 0 6
21013: ARRAY
21014: PUSH
21015: LD_VAR 0 5
21019: ARRAY
21020: PUSH
21021: LD_INT 2
21023: ARRAY
21024: PPUSH
21025: LD_VAR 0 1
21029: PPUSH
21030: CALL_OW 255
21034: PPUSH
21035: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21039: LD_ADDR_EXP 126
21043: PUSH
21044: LD_EXP 126
21048: PPUSH
21049: LD_VAR 0 6
21053: PPUSH
21054: LD_EXP 126
21058: PUSH
21059: LD_VAR 0 6
21063: ARRAY
21064: PPUSH
21065: LD_VAR 0 5
21069: PPUSH
21070: CALL_OW 3
21074: PPUSH
21075: CALL_OW 1
21079: ST_TO_ADDR
// exit ;
21080: POP
21081: POP
21082: GO 21275
// end ; end ;
21084: GO 20924
21086: POP
21087: POP
// for i := minerMinesList [ index ] downto 1 do
21088: LD_ADDR_VAR 0 5
21092: PUSH
21093: DOUBLE
21094: LD_EXP 126
21098: PUSH
21099: LD_VAR 0 6
21103: ARRAY
21104: INC
21105: ST_TO_ADDR
21106: LD_INT 1
21108: PUSH
21109: FOR_DOWNTO
21110: IFFALSE 21273
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21112: LD_EXP 126
21116: PUSH
21117: LD_VAR 0 6
21121: ARRAY
21122: PUSH
21123: LD_VAR 0 5
21127: ARRAY
21128: PUSH
21129: LD_INT 1
21131: ARRAY
21132: PPUSH
21133: LD_EXP 126
21137: PUSH
21138: LD_VAR 0 6
21142: ARRAY
21143: PUSH
21144: LD_VAR 0 5
21148: ARRAY
21149: PUSH
21150: LD_INT 2
21152: ARRAY
21153: PPUSH
21154: LD_VAR 0 2
21158: PPUSH
21159: LD_VAR 0 3
21163: PPUSH
21164: CALL_OW 298
21168: PUSH
21169: LD_INT 6
21171: LESS
21172: IFFALSE 21271
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21174: LD_EXP 126
21178: PUSH
21179: LD_VAR 0 6
21183: ARRAY
21184: PUSH
21185: LD_VAR 0 5
21189: ARRAY
21190: PUSH
21191: LD_INT 1
21193: ARRAY
21194: PPUSH
21195: LD_EXP 126
21199: PUSH
21200: LD_VAR 0 6
21204: ARRAY
21205: PUSH
21206: LD_VAR 0 5
21210: ARRAY
21211: PUSH
21212: LD_INT 2
21214: ARRAY
21215: PPUSH
21216: LD_VAR 0 1
21220: PPUSH
21221: CALL_OW 255
21225: PPUSH
21226: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21230: LD_ADDR_EXP 126
21234: PUSH
21235: LD_EXP 126
21239: PPUSH
21240: LD_VAR 0 6
21244: PPUSH
21245: LD_EXP 126
21249: PUSH
21250: LD_VAR 0 6
21254: ARRAY
21255: PPUSH
21256: LD_VAR 0 5
21260: PPUSH
21261: CALL_OW 3
21265: PPUSH
21266: CALL_OW 1
21270: ST_TO_ADDR
// end ; end ;
21271: GO 21109
21273: POP
21274: POP
// end ;
21275: LD_VAR 0 4
21279: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21280: LD_INT 0
21282: PPUSH
21283: PPUSH
21284: PPUSH
21285: PPUSH
21286: PPUSH
21287: PPUSH
21288: PPUSH
21289: PPUSH
21290: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21291: LD_VAR 0 1
21295: PPUSH
21296: CALL_OW 264
21300: PUSH
21301: LD_EXP 46
21305: EQUAL
21306: NOT
21307: PUSH
21308: LD_VAR 0 1
21312: PUSH
21313: LD_EXP 125
21317: IN
21318: NOT
21319: OR
21320: IFFALSE 21324
// exit ;
21322: GO 21646
// index := GetElementIndex ( minersList , unit ) ;
21324: LD_ADDR_VAR 0 6
21328: PUSH
21329: LD_EXP 125
21333: PPUSH
21334: LD_VAR 0 1
21338: PPUSH
21339: CALL 26842 0 2
21343: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21344: LD_ADDR_VAR 0 8
21348: PUSH
21349: LD_EXP 127
21353: PUSH
21354: LD_EXP 126
21358: PUSH
21359: LD_VAR 0 6
21363: ARRAY
21364: MINUS
21365: ST_TO_ADDR
// if not minesFreeAmount then
21366: LD_VAR 0 8
21370: NOT
21371: IFFALSE 21375
// exit ;
21373: GO 21646
// tmp := [ ] ;
21375: LD_ADDR_VAR 0 7
21379: PUSH
21380: EMPTY
21381: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21382: LD_ADDR_VAR 0 5
21386: PUSH
21387: DOUBLE
21388: LD_INT 1
21390: DEC
21391: ST_TO_ADDR
21392: LD_VAR 0 8
21396: PUSH
21397: FOR_TO
21398: IFFALSE 21593
// begin _d := rand ( 0 , 5 ) ;
21400: LD_ADDR_VAR 0 11
21404: PUSH
21405: LD_INT 0
21407: PPUSH
21408: LD_INT 5
21410: PPUSH
21411: CALL_OW 12
21415: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21416: LD_ADDR_VAR 0 12
21420: PUSH
21421: LD_INT 2
21423: PPUSH
21424: LD_INT 6
21426: PPUSH
21427: CALL_OW 12
21431: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21432: LD_ADDR_VAR 0 9
21436: PUSH
21437: LD_VAR 0 2
21441: PPUSH
21442: LD_VAR 0 11
21446: PPUSH
21447: LD_VAR 0 12
21451: PPUSH
21452: CALL_OW 272
21456: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21457: LD_ADDR_VAR 0 10
21461: PUSH
21462: LD_VAR 0 3
21466: PPUSH
21467: LD_VAR 0 11
21471: PPUSH
21472: LD_VAR 0 12
21476: PPUSH
21477: CALL_OW 273
21481: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21482: LD_VAR 0 9
21486: PPUSH
21487: LD_VAR 0 10
21491: PPUSH
21492: CALL_OW 488
21496: PUSH
21497: LD_VAR 0 9
21501: PUSH
21502: LD_VAR 0 10
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_VAR 0 7
21515: IN
21516: NOT
21517: AND
21518: PUSH
21519: LD_VAR 0 9
21523: PPUSH
21524: LD_VAR 0 10
21528: PPUSH
21529: CALL_OW 458
21533: NOT
21534: AND
21535: IFFALSE 21577
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21537: LD_ADDR_VAR 0 7
21541: PUSH
21542: LD_VAR 0 7
21546: PPUSH
21547: LD_VAR 0 7
21551: PUSH
21552: LD_INT 1
21554: PLUS
21555: PPUSH
21556: LD_VAR 0 9
21560: PUSH
21561: LD_VAR 0 10
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PPUSH
21570: CALL_OW 1
21574: ST_TO_ADDR
21575: GO 21591
// i := i - 1 ;
21577: LD_ADDR_VAR 0 5
21581: PUSH
21582: LD_VAR 0 5
21586: PUSH
21587: LD_INT 1
21589: MINUS
21590: ST_TO_ADDR
// end ;
21591: GO 21397
21593: POP
21594: POP
// for i in tmp do
21595: LD_ADDR_VAR 0 5
21599: PUSH
21600: LD_VAR 0 7
21604: PUSH
21605: FOR_IN
21606: IFFALSE 21644
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21608: LD_VAR 0 1
21612: PPUSH
21613: LD_VAR 0 5
21617: PUSH
21618: LD_INT 1
21620: ARRAY
21621: PPUSH
21622: LD_VAR 0 5
21626: PUSH
21627: LD_INT 2
21629: ARRAY
21630: PPUSH
21631: CALL 20586 0 3
21635: NOT
21636: IFFALSE 21642
// exit ;
21638: POP
21639: POP
21640: GO 21646
21642: GO 21605
21644: POP
21645: POP
// end ;
21646: LD_VAR 0 4
21650: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21651: LD_INT 0
21653: PPUSH
21654: PPUSH
21655: PPUSH
21656: PPUSH
21657: PPUSH
21658: PPUSH
21659: PPUSH
// if not GetClass ( unit ) = class_sniper then
21660: LD_VAR 0 1
21664: PPUSH
21665: CALL_OW 257
21669: PUSH
21670: LD_INT 5
21672: EQUAL
21673: NOT
21674: IFFALSE 21678
// exit ;
21676: GO 22066
// dist := 8 ;
21678: LD_ADDR_VAR 0 5
21682: PUSH
21683: LD_INT 8
21685: ST_TO_ADDR
// viewRange := 12 ;
21686: LD_ADDR_VAR 0 7
21690: PUSH
21691: LD_INT 12
21693: ST_TO_ADDR
// side := GetSide ( unit ) ;
21694: LD_ADDR_VAR 0 6
21698: PUSH
21699: LD_VAR 0 1
21703: PPUSH
21704: CALL_OW 255
21708: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21709: LD_INT 61
21711: PPUSH
21712: LD_VAR 0 6
21716: PPUSH
21717: CALL_OW 321
21721: PUSH
21722: LD_INT 2
21724: EQUAL
21725: IFFALSE 21735
// viewRange := 16 ;
21727: LD_ADDR_VAR 0 7
21731: PUSH
21732: LD_INT 16
21734: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21735: LD_VAR 0 1
21739: PPUSH
21740: LD_VAR 0 2
21744: PPUSH
21745: LD_VAR 0 3
21749: PPUSH
21750: CALL_OW 297
21754: PUSH
21755: LD_VAR 0 5
21759: GREATER
21760: IFFALSE 21839
// begin ComMoveXY ( unit , x , y ) ;
21762: LD_VAR 0 1
21766: PPUSH
21767: LD_VAR 0 2
21771: PPUSH
21772: LD_VAR 0 3
21776: PPUSH
21777: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21781: LD_INT 35
21783: PPUSH
21784: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21788: LD_VAR 0 1
21792: PPUSH
21793: LD_VAR 0 2
21797: PPUSH
21798: LD_VAR 0 3
21802: PPUSH
21803: CALL 57614 0 3
21807: NOT
21808: IFFALSE 21812
// exit ;
21810: GO 22066
// until GetDistUnitXY ( unit , x , y ) < dist ;
21812: LD_VAR 0 1
21816: PPUSH
21817: LD_VAR 0 2
21821: PPUSH
21822: LD_VAR 0 3
21826: PPUSH
21827: CALL_OW 297
21831: PUSH
21832: LD_VAR 0 5
21836: LESS
21837: IFFALSE 21781
// end ; ComTurnXY ( unit , x , y ) ;
21839: LD_VAR 0 1
21843: PPUSH
21844: LD_VAR 0 2
21848: PPUSH
21849: LD_VAR 0 3
21853: PPUSH
21854: CALL_OW 118
// wait ( 5 ) ;
21858: LD_INT 5
21860: PPUSH
21861: CALL_OW 67
// _d := GetDir ( unit ) ;
21865: LD_ADDR_VAR 0 10
21869: PUSH
21870: LD_VAR 0 1
21874: PPUSH
21875: CALL_OW 254
21879: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21880: LD_ADDR_VAR 0 8
21884: PUSH
21885: LD_VAR 0 1
21889: PPUSH
21890: CALL_OW 250
21894: PPUSH
21895: LD_VAR 0 10
21899: PPUSH
21900: LD_VAR 0 5
21904: PPUSH
21905: CALL_OW 272
21909: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21910: LD_ADDR_VAR 0 9
21914: PUSH
21915: LD_VAR 0 1
21919: PPUSH
21920: CALL_OW 251
21924: PPUSH
21925: LD_VAR 0 10
21929: PPUSH
21930: LD_VAR 0 5
21934: PPUSH
21935: CALL_OW 273
21939: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21940: LD_VAR 0 8
21944: PPUSH
21945: LD_VAR 0 9
21949: PPUSH
21950: CALL_OW 488
21954: NOT
21955: IFFALSE 21959
// exit ;
21957: GO 22066
// ComAnimCustom ( unit , 1 ) ;
21959: LD_VAR 0 1
21963: PPUSH
21964: LD_INT 1
21966: PPUSH
21967: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21971: LD_VAR 0 8
21975: PPUSH
21976: LD_VAR 0 9
21980: PPUSH
21981: LD_VAR 0 6
21985: PPUSH
21986: LD_VAR 0 7
21990: PPUSH
21991: CALL_OW 330
// repeat wait ( 1 ) ;
21995: LD_INT 1
21997: PPUSH
21998: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
22002: LD_VAR 0 1
22006: PPUSH
22007: CALL_OW 316
22011: PUSH
22012: LD_VAR 0 1
22016: PPUSH
22017: CALL_OW 314
22021: OR
22022: PUSH
22023: LD_VAR 0 1
22027: PPUSH
22028: CALL_OW 302
22032: NOT
22033: OR
22034: PUSH
22035: LD_VAR 0 1
22039: PPUSH
22040: CALL_OW 301
22044: OR
22045: IFFALSE 21995
// RemoveSeeing ( _x , _y , side ) ;
22047: LD_VAR 0 8
22051: PPUSH
22052: LD_VAR 0 9
22056: PPUSH
22057: LD_VAR 0 6
22061: PPUSH
22062: CALL_OW 331
// end ; end_of_file
22066: LD_VAR 0 4
22070: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22071: LD_INT 0
22073: PPUSH
22074: PPUSH
// if exist_mode then
22075: LD_VAR 0 2
22079: IFFALSE 22104
// unit := CreateCharacter ( prefix & ident ) else
22081: LD_ADDR_VAR 0 5
22085: PUSH
22086: LD_VAR 0 3
22090: PUSH
22091: LD_VAR 0 1
22095: STR
22096: PPUSH
22097: CALL_OW 34
22101: ST_TO_ADDR
22102: GO 22119
// unit := NewCharacter ( ident ) ;
22104: LD_ADDR_VAR 0 5
22108: PUSH
22109: LD_VAR 0 1
22113: PPUSH
22114: CALL_OW 25
22118: ST_TO_ADDR
// result := unit ;
22119: LD_ADDR_VAR 0 4
22123: PUSH
22124: LD_VAR 0 5
22128: ST_TO_ADDR
// end ;
22129: LD_VAR 0 4
22133: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22134: LD_INT 0
22136: PPUSH
22137: PPUSH
// if not side or not nation then
22138: LD_VAR 0 1
22142: NOT
22143: PUSH
22144: LD_VAR 0 2
22148: NOT
22149: OR
22150: IFFALSE 22154
// exit ;
22152: GO 22922
// case nation of nation_american :
22154: LD_VAR 0 2
22158: PUSH
22159: LD_INT 1
22161: DOUBLE
22162: EQUAL
22163: IFTRUE 22167
22165: GO 22381
22167: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22168: LD_ADDR_VAR 0 4
22172: PUSH
22173: LD_INT 35
22175: PUSH
22176: LD_INT 45
22178: PUSH
22179: LD_INT 46
22181: PUSH
22182: LD_INT 47
22184: PUSH
22185: LD_INT 82
22187: PUSH
22188: LD_INT 83
22190: PUSH
22191: LD_INT 84
22193: PUSH
22194: LD_INT 85
22196: PUSH
22197: LD_INT 86
22199: PUSH
22200: LD_INT 1
22202: PUSH
22203: LD_INT 2
22205: PUSH
22206: LD_INT 6
22208: PUSH
22209: LD_INT 15
22211: PUSH
22212: LD_INT 16
22214: PUSH
22215: LD_INT 7
22217: PUSH
22218: LD_INT 12
22220: PUSH
22221: LD_INT 13
22223: PUSH
22224: LD_INT 10
22226: PUSH
22227: LD_INT 14
22229: PUSH
22230: LD_INT 20
22232: PUSH
22233: LD_INT 21
22235: PUSH
22236: LD_INT 22
22238: PUSH
22239: LD_INT 25
22241: PUSH
22242: LD_INT 32
22244: PUSH
22245: LD_INT 27
22247: PUSH
22248: LD_INT 36
22250: PUSH
22251: LD_INT 69
22253: PUSH
22254: LD_INT 39
22256: PUSH
22257: LD_INT 34
22259: PUSH
22260: LD_INT 40
22262: PUSH
22263: LD_INT 48
22265: PUSH
22266: LD_INT 49
22268: PUSH
22269: LD_INT 50
22271: PUSH
22272: LD_INT 51
22274: PUSH
22275: LD_INT 52
22277: PUSH
22278: LD_INT 53
22280: PUSH
22281: LD_INT 54
22283: PUSH
22284: LD_INT 55
22286: PUSH
22287: LD_INT 56
22289: PUSH
22290: LD_INT 57
22292: PUSH
22293: LD_INT 58
22295: PUSH
22296: LD_INT 59
22298: PUSH
22299: LD_INT 60
22301: PUSH
22302: LD_INT 61
22304: PUSH
22305: LD_INT 62
22307: PUSH
22308: LD_INT 80
22310: PUSH
22311: LD_INT 82
22313: PUSH
22314: LD_INT 83
22316: PUSH
22317: LD_INT 84
22319: PUSH
22320: LD_INT 85
22322: PUSH
22323: LD_INT 86
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: ST_TO_ADDR
22379: GO 22846
22381: LD_INT 2
22383: DOUBLE
22384: EQUAL
22385: IFTRUE 22389
22387: GO 22615
22389: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22390: LD_ADDR_VAR 0 4
22394: PUSH
22395: LD_INT 35
22397: PUSH
22398: LD_INT 45
22400: PUSH
22401: LD_INT 46
22403: PUSH
22404: LD_INT 47
22406: PUSH
22407: LD_INT 82
22409: PUSH
22410: LD_INT 83
22412: PUSH
22413: LD_INT 84
22415: PUSH
22416: LD_INT 85
22418: PUSH
22419: LD_INT 87
22421: PUSH
22422: LD_INT 70
22424: PUSH
22425: LD_INT 1
22427: PUSH
22428: LD_INT 11
22430: PUSH
22431: LD_INT 3
22433: PUSH
22434: LD_INT 4
22436: PUSH
22437: LD_INT 5
22439: PUSH
22440: LD_INT 6
22442: PUSH
22443: LD_INT 15
22445: PUSH
22446: LD_INT 18
22448: PUSH
22449: LD_INT 7
22451: PUSH
22452: LD_INT 17
22454: PUSH
22455: LD_INT 8
22457: PUSH
22458: LD_INT 20
22460: PUSH
22461: LD_INT 21
22463: PUSH
22464: LD_INT 22
22466: PUSH
22467: LD_INT 72
22469: PUSH
22470: LD_INT 26
22472: PUSH
22473: LD_INT 69
22475: PUSH
22476: LD_INT 39
22478: PUSH
22479: LD_INT 40
22481: PUSH
22482: LD_INT 41
22484: PUSH
22485: LD_INT 42
22487: PUSH
22488: LD_INT 43
22490: PUSH
22491: LD_INT 48
22493: PUSH
22494: LD_INT 49
22496: PUSH
22497: LD_INT 50
22499: PUSH
22500: LD_INT 51
22502: PUSH
22503: LD_INT 52
22505: PUSH
22506: LD_INT 53
22508: PUSH
22509: LD_INT 54
22511: PUSH
22512: LD_INT 55
22514: PUSH
22515: LD_INT 56
22517: PUSH
22518: LD_INT 60
22520: PUSH
22521: LD_INT 61
22523: PUSH
22524: LD_INT 62
22526: PUSH
22527: LD_INT 66
22529: PUSH
22530: LD_INT 67
22532: PUSH
22533: LD_INT 68
22535: PUSH
22536: LD_INT 81
22538: PUSH
22539: LD_INT 82
22541: PUSH
22542: LD_INT 83
22544: PUSH
22545: LD_INT 84
22547: PUSH
22548: LD_INT 85
22550: PUSH
22551: LD_INT 87
22553: PUSH
22554: LD_INT 88
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: ST_TO_ADDR
22613: GO 22846
22615: LD_INT 3
22617: DOUBLE
22618: EQUAL
22619: IFTRUE 22623
22621: GO 22845
22623: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22624: LD_ADDR_VAR 0 4
22628: PUSH
22629: LD_INT 46
22631: PUSH
22632: LD_INT 47
22634: PUSH
22635: LD_INT 1
22637: PUSH
22638: LD_INT 2
22640: PUSH
22641: LD_INT 82
22643: PUSH
22644: LD_INT 83
22646: PUSH
22647: LD_INT 84
22649: PUSH
22650: LD_INT 85
22652: PUSH
22653: LD_INT 86
22655: PUSH
22656: LD_INT 11
22658: PUSH
22659: LD_INT 9
22661: PUSH
22662: LD_INT 20
22664: PUSH
22665: LD_INT 19
22667: PUSH
22668: LD_INT 21
22670: PUSH
22671: LD_INT 24
22673: PUSH
22674: LD_INT 22
22676: PUSH
22677: LD_INT 25
22679: PUSH
22680: LD_INT 28
22682: PUSH
22683: LD_INT 29
22685: PUSH
22686: LD_INT 30
22688: PUSH
22689: LD_INT 31
22691: PUSH
22692: LD_INT 37
22694: PUSH
22695: LD_INT 38
22697: PUSH
22698: LD_INT 32
22700: PUSH
22701: LD_INT 27
22703: PUSH
22704: LD_INT 33
22706: PUSH
22707: LD_INT 69
22709: PUSH
22710: LD_INT 39
22712: PUSH
22713: LD_INT 34
22715: PUSH
22716: LD_INT 40
22718: PUSH
22719: LD_INT 71
22721: PUSH
22722: LD_INT 23
22724: PUSH
22725: LD_INT 44
22727: PUSH
22728: LD_INT 48
22730: PUSH
22731: LD_INT 49
22733: PUSH
22734: LD_INT 50
22736: PUSH
22737: LD_INT 51
22739: PUSH
22740: LD_INT 52
22742: PUSH
22743: LD_INT 53
22745: PUSH
22746: LD_INT 54
22748: PUSH
22749: LD_INT 55
22751: PUSH
22752: LD_INT 56
22754: PUSH
22755: LD_INT 57
22757: PUSH
22758: LD_INT 58
22760: PUSH
22761: LD_INT 59
22763: PUSH
22764: LD_INT 63
22766: PUSH
22767: LD_INT 64
22769: PUSH
22770: LD_INT 65
22772: PUSH
22773: LD_INT 82
22775: PUSH
22776: LD_INT 83
22778: PUSH
22779: LD_INT 84
22781: PUSH
22782: LD_INT 85
22784: PUSH
22785: LD_INT 86
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: ST_TO_ADDR
22843: GO 22846
22845: POP
// if state > - 1 and state < 3 then
22846: LD_VAR 0 3
22850: PUSH
22851: LD_INT 1
22853: NEG
22854: GREATER
22855: PUSH
22856: LD_VAR 0 3
22860: PUSH
22861: LD_INT 3
22863: LESS
22864: AND
22865: IFFALSE 22922
// for i in result do
22867: LD_ADDR_VAR 0 5
22871: PUSH
22872: LD_VAR 0 4
22876: PUSH
22877: FOR_IN
22878: IFFALSE 22920
// if GetTech ( i , side ) <> state then
22880: LD_VAR 0 5
22884: PPUSH
22885: LD_VAR 0 1
22889: PPUSH
22890: CALL_OW 321
22894: PUSH
22895: LD_VAR 0 3
22899: NONEQUAL
22900: IFFALSE 22918
// result := result diff i ;
22902: LD_ADDR_VAR 0 4
22906: PUSH
22907: LD_VAR 0 4
22911: PUSH
22912: LD_VAR 0 5
22916: DIFF
22917: ST_TO_ADDR
22918: GO 22877
22920: POP
22921: POP
// end ;
22922: LD_VAR 0 4
22926: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22927: LD_INT 0
22929: PPUSH
22930: PPUSH
22931: PPUSH
// result := true ;
22932: LD_ADDR_VAR 0 3
22936: PUSH
22937: LD_INT 1
22939: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22940: LD_ADDR_VAR 0 5
22944: PUSH
22945: LD_VAR 0 2
22949: PPUSH
22950: CALL_OW 480
22954: ST_TO_ADDR
// if not tmp then
22955: LD_VAR 0 5
22959: NOT
22960: IFFALSE 22964
// exit ;
22962: GO 23013
// for i in tmp do
22964: LD_ADDR_VAR 0 4
22968: PUSH
22969: LD_VAR 0 5
22973: PUSH
22974: FOR_IN
22975: IFFALSE 23011
// if GetTech ( i , side ) <> state_researched then
22977: LD_VAR 0 4
22981: PPUSH
22982: LD_VAR 0 1
22986: PPUSH
22987: CALL_OW 321
22991: PUSH
22992: LD_INT 2
22994: NONEQUAL
22995: IFFALSE 23009
// begin result := false ;
22997: LD_ADDR_VAR 0 3
23001: PUSH
23002: LD_INT 0
23004: ST_TO_ADDR
// exit ;
23005: POP
23006: POP
23007: GO 23013
// end ;
23009: GO 22974
23011: POP
23012: POP
// end ;
23013: LD_VAR 0 3
23017: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23018: LD_INT 0
23020: PPUSH
23021: PPUSH
23022: PPUSH
23023: PPUSH
23024: PPUSH
23025: PPUSH
23026: PPUSH
23027: PPUSH
23028: PPUSH
23029: PPUSH
23030: PPUSH
23031: PPUSH
23032: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23033: LD_VAR 0 1
23037: NOT
23038: PUSH
23039: LD_VAR 0 1
23043: PPUSH
23044: CALL_OW 257
23048: PUSH
23049: LD_INT 9
23051: NONEQUAL
23052: OR
23053: IFFALSE 23057
// exit ;
23055: GO 23630
// side := GetSide ( unit ) ;
23057: LD_ADDR_VAR 0 9
23061: PUSH
23062: LD_VAR 0 1
23066: PPUSH
23067: CALL_OW 255
23071: ST_TO_ADDR
// tech_space := tech_spacanom ;
23072: LD_ADDR_VAR 0 12
23076: PUSH
23077: LD_INT 29
23079: ST_TO_ADDR
// tech_time := tech_taurad ;
23080: LD_ADDR_VAR 0 13
23084: PUSH
23085: LD_INT 28
23087: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23088: LD_ADDR_VAR 0 11
23092: PUSH
23093: LD_VAR 0 1
23097: PPUSH
23098: CALL_OW 310
23102: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23103: LD_VAR 0 11
23107: PPUSH
23108: CALL_OW 247
23112: PUSH
23113: LD_INT 2
23115: EQUAL
23116: IFFALSE 23120
// exit ;
23118: GO 23630
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23120: LD_ADDR_VAR 0 8
23124: PUSH
23125: LD_INT 81
23127: PUSH
23128: LD_VAR 0 9
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PUSH
23137: LD_INT 3
23139: PUSH
23140: LD_INT 21
23142: PUSH
23143: LD_INT 3
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PPUSH
23158: CALL_OW 69
23162: ST_TO_ADDR
// if not tmp then
23163: LD_VAR 0 8
23167: NOT
23168: IFFALSE 23172
// exit ;
23170: GO 23630
// if in_unit then
23172: LD_VAR 0 11
23176: IFFALSE 23200
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23178: LD_ADDR_VAR 0 10
23182: PUSH
23183: LD_VAR 0 8
23187: PPUSH
23188: LD_VAR 0 11
23192: PPUSH
23193: CALL_OW 74
23197: ST_TO_ADDR
23198: GO 23220
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23200: LD_ADDR_VAR 0 10
23204: PUSH
23205: LD_VAR 0 8
23209: PPUSH
23210: LD_VAR 0 1
23214: PPUSH
23215: CALL_OW 74
23219: ST_TO_ADDR
// if not enemy then
23220: LD_VAR 0 10
23224: NOT
23225: IFFALSE 23229
// exit ;
23227: GO 23630
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23229: LD_VAR 0 11
23233: PUSH
23234: LD_VAR 0 11
23238: PPUSH
23239: LD_VAR 0 10
23243: PPUSH
23244: CALL_OW 296
23248: PUSH
23249: LD_INT 13
23251: GREATER
23252: AND
23253: PUSH
23254: LD_VAR 0 1
23258: PPUSH
23259: LD_VAR 0 10
23263: PPUSH
23264: CALL_OW 296
23268: PUSH
23269: LD_INT 12
23271: GREATER
23272: OR
23273: IFFALSE 23277
// exit ;
23275: GO 23630
// missile := [ 1 ] ;
23277: LD_ADDR_VAR 0 14
23281: PUSH
23282: LD_INT 1
23284: PUSH
23285: EMPTY
23286: LIST
23287: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23288: LD_VAR 0 9
23292: PPUSH
23293: LD_VAR 0 12
23297: PPUSH
23298: CALL_OW 325
23302: IFFALSE 23331
// missile := Insert ( missile , missile + 1 , 2 ) ;
23304: LD_ADDR_VAR 0 14
23308: PUSH
23309: LD_VAR 0 14
23313: PPUSH
23314: LD_VAR 0 14
23318: PUSH
23319: LD_INT 1
23321: PLUS
23322: PPUSH
23323: LD_INT 2
23325: PPUSH
23326: CALL_OW 2
23330: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23331: LD_VAR 0 9
23335: PPUSH
23336: LD_VAR 0 13
23340: PPUSH
23341: CALL_OW 325
23345: PUSH
23346: LD_VAR 0 10
23350: PPUSH
23351: CALL_OW 255
23355: PPUSH
23356: LD_VAR 0 13
23360: PPUSH
23361: CALL_OW 325
23365: NOT
23366: AND
23367: IFFALSE 23396
// missile := Insert ( missile , missile + 1 , 3 ) ;
23369: LD_ADDR_VAR 0 14
23373: PUSH
23374: LD_VAR 0 14
23378: PPUSH
23379: LD_VAR 0 14
23383: PUSH
23384: LD_INT 1
23386: PLUS
23387: PPUSH
23388: LD_INT 3
23390: PPUSH
23391: CALL_OW 2
23395: ST_TO_ADDR
// if missile < 2 then
23396: LD_VAR 0 14
23400: PUSH
23401: LD_INT 2
23403: LESS
23404: IFFALSE 23408
// exit ;
23406: GO 23630
// x := GetX ( enemy ) ;
23408: LD_ADDR_VAR 0 4
23412: PUSH
23413: LD_VAR 0 10
23417: PPUSH
23418: CALL_OW 250
23422: ST_TO_ADDR
// y := GetY ( enemy ) ;
23423: LD_ADDR_VAR 0 5
23427: PUSH
23428: LD_VAR 0 10
23432: PPUSH
23433: CALL_OW 251
23437: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23438: LD_ADDR_VAR 0 6
23442: PUSH
23443: LD_VAR 0 4
23447: PUSH
23448: LD_INT 1
23450: NEG
23451: PPUSH
23452: LD_INT 1
23454: PPUSH
23455: CALL_OW 12
23459: PLUS
23460: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23461: LD_ADDR_VAR 0 7
23465: PUSH
23466: LD_VAR 0 5
23470: PUSH
23471: LD_INT 1
23473: NEG
23474: PPUSH
23475: LD_INT 1
23477: PPUSH
23478: CALL_OW 12
23482: PLUS
23483: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23484: LD_VAR 0 6
23488: PPUSH
23489: LD_VAR 0 7
23493: PPUSH
23494: CALL_OW 488
23498: NOT
23499: IFFALSE 23521
// begin _x := x ;
23501: LD_ADDR_VAR 0 6
23505: PUSH
23506: LD_VAR 0 4
23510: ST_TO_ADDR
// _y := y ;
23511: LD_ADDR_VAR 0 7
23515: PUSH
23516: LD_VAR 0 5
23520: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23521: LD_ADDR_VAR 0 3
23525: PUSH
23526: LD_INT 1
23528: PPUSH
23529: LD_VAR 0 14
23533: PPUSH
23534: CALL_OW 12
23538: ST_TO_ADDR
// case i of 1 :
23539: LD_VAR 0 3
23543: PUSH
23544: LD_INT 1
23546: DOUBLE
23547: EQUAL
23548: IFTRUE 23552
23550: GO 23569
23552: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23553: LD_VAR 0 1
23557: PPUSH
23558: LD_VAR 0 10
23562: PPUSH
23563: CALL_OW 115
23567: GO 23630
23569: LD_INT 2
23571: DOUBLE
23572: EQUAL
23573: IFTRUE 23577
23575: GO 23599
23577: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23578: LD_VAR 0 1
23582: PPUSH
23583: LD_VAR 0 6
23587: PPUSH
23588: LD_VAR 0 7
23592: PPUSH
23593: CALL_OW 153
23597: GO 23630
23599: LD_INT 3
23601: DOUBLE
23602: EQUAL
23603: IFTRUE 23607
23605: GO 23629
23607: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23608: LD_VAR 0 1
23612: PPUSH
23613: LD_VAR 0 6
23617: PPUSH
23618: LD_VAR 0 7
23622: PPUSH
23623: CALL_OW 154
23627: GO 23630
23629: POP
// end ;
23630: LD_VAR 0 2
23634: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23635: LD_INT 0
23637: PPUSH
23638: PPUSH
23639: PPUSH
23640: PPUSH
23641: PPUSH
23642: PPUSH
// if not unit or not building then
23643: LD_VAR 0 1
23647: NOT
23648: PUSH
23649: LD_VAR 0 2
23653: NOT
23654: OR
23655: IFFALSE 23659
// exit ;
23657: GO 23817
// x := GetX ( building ) ;
23659: LD_ADDR_VAR 0 5
23663: PUSH
23664: LD_VAR 0 2
23668: PPUSH
23669: CALL_OW 250
23673: ST_TO_ADDR
// y := GetY ( building ) ;
23674: LD_ADDR_VAR 0 6
23678: PUSH
23679: LD_VAR 0 2
23683: PPUSH
23684: CALL_OW 251
23688: ST_TO_ADDR
// for i = 0 to 5 do
23689: LD_ADDR_VAR 0 4
23693: PUSH
23694: DOUBLE
23695: LD_INT 0
23697: DEC
23698: ST_TO_ADDR
23699: LD_INT 5
23701: PUSH
23702: FOR_TO
23703: IFFALSE 23815
// begin _x := ShiftX ( x , i , 3 ) ;
23705: LD_ADDR_VAR 0 7
23709: PUSH
23710: LD_VAR 0 5
23714: PPUSH
23715: LD_VAR 0 4
23719: PPUSH
23720: LD_INT 3
23722: PPUSH
23723: CALL_OW 272
23727: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23728: LD_ADDR_VAR 0 8
23732: PUSH
23733: LD_VAR 0 6
23737: PPUSH
23738: LD_VAR 0 4
23742: PPUSH
23743: LD_INT 3
23745: PPUSH
23746: CALL_OW 273
23750: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23751: LD_VAR 0 7
23755: PPUSH
23756: LD_VAR 0 8
23760: PPUSH
23761: CALL_OW 488
23765: NOT
23766: IFFALSE 23770
// continue ;
23768: GO 23702
// if HexInfo ( _x , _y ) = 0 then
23770: LD_VAR 0 7
23774: PPUSH
23775: LD_VAR 0 8
23779: PPUSH
23780: CALL_OW 428
23784: PUSH
23785: LD_INT 0
23787: EQUAL
23788: IFFALSE 23813
// begin ComMoveXY ( unit , _x , _y ) ;
23790: LD_VAR 0 1
23794: PPUSH
23795: LD_VAR 0 7
23799: PPUSH
23800: LD_VAR 0 8
23804: PPUSH
23805: CALL_OW 111
// exit ;
23809: POP
23810: POP
23811: GO 23817
// end ; end ;
23813: GO 23702
23815: POP
23816: POP
// end ;
23817: LD_VAR 0 3
23821: RET
// export function ScanBase ( side , base_area ) ; begin
23822: LD_INT 0
23824: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23825: LD_ADDR_VAR 0 3
23829: PUSH
23830: LD_VAR 0 2
23834: PPUSH
23835: LD_INT 81
23837: PUSH
23838: LD_VAR 0 1
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PPUSH
23847: CALL_OW 70
23851: ST_TO_ADDR
// end ;
23852: LD_VAR 0 3
23856: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23857: LD_INT 0
23859: PPUSH
23860: PPUSH
23861: PPUSH
23862: PPUSH
// result := false ;
23863: LD_ADDR_VAR 0 2
23867: PUSH
23868: LD_INT 0
23870: ST_TO_ADDR
// side := GetSide ( unit ) ;
23871: LD_ADDR_VAR 0 3
23875: PUSH
23876: LD_VAR 0 1
23880: PPUSH
23881: CALL_OW 255
23885: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23886: LD_ADDR_VAR 0 4
23890: PUSH
23891: LD_VAR 0 1
23895: PPUSH
23896: CALL_OW 248
23900: ST_TO_ADDR
// case nat of 1 :
23901: LD_VAR 0 4
23905: PUSH
23906: LD_INT 1
23908: DOUBLE
23909: EQUAL
23910: IFTRUE 23914
23912: GO 23925
23914: POP
// tech := tech_lassight ; 2 :
23915: LD_ADDR_VAR 0 5
23919: PUSH
23920: LD_INT 12
23922: ST_TO_ADDR
23923: GO 23964
23925: LD_INT 2
23927: DOUBLE
23928: EQUAL
23929: IFTRUE 23933
23931: GO 23944
23933: POP
// tech := tech_mortar ; 3 :
23934: LD_ADDR_VAR 0 5
23938: PUSH
23939: LD_INT 41
23941: ST_TO_ADDR
23942: GO 23964
23944: LD_INT 3
23946: DOUBLE
23947: EQUAL
23948: IFTRUE 23952
23950: GO 23963
23952: POP
// tech := tech_bazooka ; end ;
23953: LD_ADDR_VAR 0 5
23957: PUSH
23958: LD_INT 44
23960: ST_TO_ADDR
23961: GO 23964
23963: POP
// if Researched ( side , tech ) then
23964: LD_VAR 0 3
23968: PPUSH
23969: LD_VAR 0 5
23973: PPUSH
23974: CALL_OW 325
23978: IFFALSE 24005
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23980: LD_ADDR_VAR 0 2
23984: PUSH
23985: LD_INT 5
23987: PUSH
23988: LD_INT 8
23990: PUSH
23991: LD_INT 9
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: LIST
23998: PUSH
23999: LD_VAR 0 4
24003: ARRAY
24004: ST_TO_ADDR
// end ;
24005: LD_VAR 0 2
24009: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24010: LD_INT 0
24012: PPUSH
24013: PPUSH
24014: PPUSH
// if not mines then
24015: LD_VAR 0 2
24019: NOT
24020: IFFALSE 24024
// exit ;
24022: GO 24168
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24024: LD_ADDR_VAR 0 5
24028: PUSH
24029: LD_INT 81
24031: PUSH
24032: LD_VAR 0 1
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: PUSH
24041: LD_INT 3
24043: PUSH
24044: LD_INT 21
24046: PUSH
24047: LD_INT 3
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PPUSH
24062: CALL_OW 69
24066: ST_TO_ADDR
// for i in mines do
24067: LD_ADDR_VAR 0 4
24071: PUSH
24072: LD_VAR 0 2
24076: PUSH
24077: FOR_IN
24078: IFFALSE 24166
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24080: LD_VAR 0 4
24084: PUSH
24085: LD_INT 1
24087: ARRAY
24088: PPUSH
24089: LD_VAR 0 4
24093: PUSH
24094: LD_INT 2
24096: ARRAY
24097: PPUSH
24098: CALL_OW 458
24102: NOT
24103: IFFALSE 24107
// continue ;
24105: GO 24077
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24107: LD_VAR 0 4
24111: PUSH
24112: LD_INT 1
24114: ARRAY
24115: PPUSH
24116: LD_VAR 0 4
24120: PUSH
24121: LD_INT 2
24123: ARRAY
24124: PPUSH
24125: CALL_OW 428
24129: PUSH
24130: LD_VAR 0 5
24134: IN
24135: IFFALSE 24164
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24137: LD_VAR 0 4
24141: PUSH
24142: LD_INT 1
24144: ARRAY
24145: PPUSH
24146: LD_VAR 0 4
24150: PUSH
24151: LD_INT 2
24153: ARRAY
24154: PPUSH
24155: LD_VAR 0 1
24159: PPUSH
24160: CALL_OW 456
// end ;
24164: GO 24077
24166: POP
24167: POP
// end ;
24168: LD_VAR 0 3
24172: RET
// export function Count ( array ) ; var i ; begin
24173: LD_INT 0
24175: PPUSH
24176: PPUSH
// result := 0 ;
24177: LD_ADDR_VAR 0 2
24181: PUSH
24182: LD_INT 0
24184: ST_TO_ADDR
// for i in array do
24185: LD_ADDR_VAR 0 3
24189: PUSH
24190: LD_VAR 0 1
24194: PUSH
24195: FOR_IN
24196: IFFALSE 24220
// if i then
24198: LD_VAR 0 3
24202: IFFALSE 24218
// result := result + 1 ;
24204: LD_ADDR_VAR 0 2
24208: PUSH
24209: LD_VAR 0 2
24213: PUSH
24214: LD_INT 1
24216: PLUS
24217: ST_TO_ADDR
24218: GO 24195
24220: POP
24221: POP
// end ;
24222: LD_VAR 0 2
24226: RET
// export function IsEmpty ( building ) ; begin
24227: LD_INT 0
24229: PPUSH
// if not building then
24230: LD_VAR 0 1
24234: NOT
24235: IFFALSE 24239
// exit ;
24237: GO 24282
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24239: LD_ADDR_VAR 0 2
24243: PUSH
24244: LD_VAR 0 1
24248: PUSH
24249: LD_INT 22
24251: PUSH
24252: LD_VAR 0 1
24256: PPUSH
24257: CALL_OW 255
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 58
24268: PUSH
24269: EMPTY
24270: LIST
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PPUSH
24276: CALL_OW 69
24280: IN
24281: ST_TO_ADDR
// end ;
24282: LD_VAR 0 2
24286: RET
// export function IsNotFull ( building ) ; begin
24287: LD_INT 0
24289: PPUSH
// if not building then
24290: LD_VAR 0 1
24294: NOT
24295: IFFALSE 24299
// exit ;
24297: GO 24318
// result := UnitsInside ( building ) < 6 ;
24299: LD_ADDR_VAR 0 2
24303: PUSH
24304: LD_VAR 0 1
24308: PPUSH
24309: CALL_OW 313
24313: PUSH
24314: LD_INT 6
24316: LESS
24317: ST_TO_ADDR
// end ;
24318: LD_VAR 0 2
24322: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24323: LD_INT 0
24325: PPUSH
24326: PPUSH
24327: PPUSH
24328: PPUSH
// tmp := [ ] ;
24329: LD_ADDR_VAR 0 3
24333: PUSH
24334: EMPTY
24335: ST_TO_ADDR
// list := [ ] ;
24336: LD_ADDR_VAR 0 5
24340: PUSH
24341: EMPTY
24342: ST_TO_ADDR
// for i = 16 to 25 do
24343: LD_ADDR_VAR 0 4
24347: PUSH
24348: DOUBLE
24349: LD_INT 16
24351: DEC
24352: ST_TO_ADDR
24353: LD_INT 25
24355: PUSH
24356: FOR_TO
24357: IFFALSE 24430
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24359: LD_ADDR_VAR 0 3
24363: PUSH
24364: LD_VAR 0 3
24368: PUSH
24369: LD_INT 22
24371: PUSH
24372: LD_VAR 0 1
24376: PPUSH
24377: CALL_OW 255
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 91
24388: PUSH
24389: LD_VAR 0 1
24393: PUSH
24394: LD_INT 6
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 30
24404: PUSH
24405: LD_VAR 0 4
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: LIST
24418: PUSH
24419: EMPTY
24420: LIST
24421: PPUSH
24422: CALL_OW 69
24426: ADD
24427: ST_TO_ADDR
24428: GO 24356
24430: POP
24431: POP
// for i = 1 to tmp do
24432: LD_ADDR_VAR 0 4
24436: PUSH
24437: DOUBLE
24438: LD_INT 1
24440: DEC
24441: ST_TO_ADDR
24442: LD_VAR 0 3
24446: PUSH
24447: FOR_TO
24448: IFFALSE 24536
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24450: LD_ADDR_VAR 0 5
24454: PUSH
24455: LD_VAR 0 5
24459: PUSH
24460: LD_VAR 0 3
24464: PUSH
24465: LD_VAR 0 4
24469: ARRAY
24470: PPUSH
24471: CALL_OW 266
24475: PUSH
24476: LD_VAR 0 3
24480: PUSH
24481: LD_VAR 0 4
24485: ARRAY
24486: PPUSH
24487: CALL_OW 250
24491: PUSH
24492: LD_VAR 0 3
24496: PUSH
24497: LD_VAR 0 4
24501: ARRAY
24502: PPUSH
24503: CALL_OW 251
24507: PUSH
24508: LD_VAR 0 3
24512: PUSH
24513: LD_VAR 0 4
24517: ARRAY
24518: PPUSH
24519: CALL_OW 254
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: PUSH
24530: EMPTY
24531: LIST
24532: ADD
24533: ST_TO_ADDR
24534: GO 24447
24536: POP
24537: POP
// result := list ;
24538: LD_ADDR_VAR 0 2
24542: PUSH
24543: LD_VAR 0 5
24547: ST_TO_ADDR
// end ;
24548: LD_VAR 0 2
24552: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24553: LD_INT 0
24555: PPUSH
24556: PPUSH
24557: PPUSH
24558: PPUSH
24559: PPUSH
24560: PPUSH
24561: PPUSH
// if not factory then
24562: LD_VAR 0 1
24566: NOT
24567: IFFALSE 24571
// exit ;
24569: GO 25164
// if control = control_apeman then
24571: LD_VAR 0 4
24575: PUSH
24576: LD_INT 5
24578: EQUAL
24579: IFFALSE 24688
// begin tmp := UnitsInside ( factory ) ;
24581: LD_ADDR_VAR 0 8
24585: PUSH
24586: LD_VAR 0 1
24590: PPUSH
24591: CALL_OW 313
24595: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24596: LD_VAR 0 8
24600: PPUSH
24601: LD_INT 25
24603: PUSH
24604: LD_INT 12
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PPUSH
24611: CALL_OW 72
24615: NOT
24616: IFFALSE 24626
// control := control_manual ;
24618: LD_ADDR_VAR 0 4
24622: PUSH
24623: LD_INT 1
24625: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24626: LD_ADDR_VAR 0 8
24630: PUSH
24631: LD_VAR 0 1
24635: PPUSH
24636: CALL 24323 0 1
24640: ST_TO_ADDR
// if tmp then
24641: LD_VAR 0 8
24645: IFFALSE 24688
// begin for i in tmp do
24647: LD_ADDR_VAR 0 7
24651: PUSH
24652: LD_VAR 0 8
24656: PUSH
24657: FOR_IN
24658: IFFALSE 24686
// if i [ 1 ] = b_ext_radio then
24660: LD_VAR 0 7
24664: PUSH
24665: LD_INT 1
24667: ARRAY
24668: PUSH
24669: LD_INT 22
24671: EQUAL
24672: IFFALSE 24684
// begin control := control_remote ;
24674: LD_ADDR_VAR 0 4
24678: PUSH
24679: LD_INT 2
24681: ST_TO_ADDR
// break ;
24682: GO 24686
// end ;
24684: GO 24657
24686: POP
24687: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24688: LD_VAR 0 1
24692: PPUSH
24693: LD_VAR 0 2
24697: PPUSH
24698: LD_VAR 0 3
24702: PPUSH
24703: LD_VAR 0 4
24707: PPUSH
24708: LD_VAR 0 5
24712: PPUSH
24713: CALL_OW 448
24717: IFFALSE 24752
// begin result := [ chassis , engine , control , weapon ] ;
24719: LD_ADDR_VAR 0 6
24723: PUSH
24724: LD_VAR 0 2
24728: PUSH
24729: LD_VAR 0 3
24733: PUSH
24734: LD_VAR 0 4
24738: PUSH
24739: LD_VAR 0 5
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: ST_TO_ADDR
// exit ;
24750: GO 25164
// end ; _chassis := AvailableChassisList ( factory ) ;
24752: LD_ADDR_VAR 0 9
24756: PUSH
24757: LD_VAR 0 1
24761: PPUSH
24762: CALL_OW 475
24766: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24767: LD_ADDR_VAR 0 11
24771: PUSH
24772: LD_VAR 0 1
24776: PPUSH
24777: CALL_OW 476
24781: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24782: LD_ADDR_VAR 0 12
24786: PUSH
24787: LD_VAR 0 1
24791: PPUSH
24792: CALL_OW 477
24796: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24797: LD_ADDR_VAR 0 10
24801: PUSH
24802: LD_VAR 0 1
24806: PPUSH
24807: CALL_OW 478
24811: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24812: LD_VAR 0 9
24816: NOT
24817: PUSH
24818: LD_VAR 0 11
24822: NOT
24823: OR
24824: PUSH
24825: LD_VAR 0 12
24829: NOT
24830: OR
24831: PUSH
24832: LD_VAR 0 10
24836: NOT
24837: OR
24838: IFFALSE 24873
// begin result := [ chassis , engine , control , weapon ] ;
24840: LD_ADDR_VAR 0 6
24844: PUSH
24845: LD_VAR 0 2
24849: PUSH
24850: LD_VAR 0 3
24854: PUSH
24855: LD_VAR 0 4
24859: PUSH
24860: LD_VAR 0 5
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: ST_TO_ADDR
// exit ;
24871: GO 25164
// end ; if not chassis in _chassis then
24873: LD_VAR 0 2
24877: PUSH
24878: LD_VAR 0 9
24882: IN
24883: NOT
24884: IFFALSE 24910
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24886: LD_ADDR_VAR 0 2
24890: PUSH
24891: LD_VAR 0 9
24895: PUSH
24896: LD_INT 1
24898: PPUSH
24899: LD_VAR 0 9
24903: PPUSH
24904: CALL_OW 12
24908: ARRAY
24909: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24910: LD_VAR 0 2
24914: PPUSH
24915: LD_VAR 0 3
24919: PPUSH
24920: CALL 25169 0 2
24924: NOT
24925: IFFALSE 24984
// repeat engine := _engine [ 1 ] ;
24927: LD_ADDR_VAR 0 3
24931: PUSH
24932: LD_VAR 0 11
24936: PUSH
24937: LD_INT 1
24939: ARRAY
24940: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24941: LD_ADDR_VAR 0 11
24945: PUSH
24946: LD_VAR 0 11
24950: PPUSH
24951: LD_INT 1
24953: PPUSH
24954: CALL_OW 3
24958: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24959: LD_VAR 0 2
24963: PPUSH
24964: LD_VAR 0 3
24968: PPUSH
24969: CALL 25169 0 2
24973: PUSH
24974: LD_VAR 0 11
24978: PUSH
24979: EMPTY
24980: EQUAL
24981: OR
24982: IFFALSE 24927
// if not control in _control then
24984: LD_VAR 0 4
24988: PUSH
24989: LD_VAR 0 12
24993: IN
24994: NOT
24995: IFFALSE 25021
// control := _control [ rand ( 1 , _control ) ] ;
24997: LD_ADDR_VAR 0 4
25001: PUSH
25002: LD_VAR 0 12
25006: PUSH
25007: LD_INT 1
25009: PPUSH
25010: LD_VAR 0 12
25014: PPUSH
25015: CALL_OW 12
25019: ARRAY
25020: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25021: LD_VAR 0 2
25025: PPUSH
25026: LD_VAR 0 5
25030: PPUSH
25031: CALL 25389 0 2
25035: NOT
25036: IFFALSE 25095
// repeat weapon := _weapon [ 1 ] ;
25038: LD_ADDR_VAR 0 5
25042: PUSH
25043: LD_VAR 0 10
25047: PUSH
25048: LD_INT 1
25050: ARRAY
25051: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25052: LD_ADDR_VAR 0 10
25056: PUSH
25057: LD_VAR 0 10
25061: PPUSH
25062: LD_INT 1
25064: PPUSH
25065: CALL_OW 3
25069: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25070: LD_VAR 0 2
25074: PPUSH
25075: LD_VAR 0 5
25079: PPUSH
25080: CALL 25389 0 2
25084: PUSH
25085: LD_VAR 0 10
25089: PUSH
25090: EMPTY
25091: EQUAL
25092: OR
25093: IFFALSE 25038
// result := [ ] ;
25095: LD_ADDR_VAR 0 6
25099: PUSH
25100: EMPTY
25101: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25102: LD_VAR 0 1
25106: PPUSH
25107: LD_VAR 0 2
25111: PPUSH
25112: LD_VAR 0 3
25116: PPUSH
25117: LD_VAR 0 4
25121: PPUSH
25122: LD_VAR 0 5
25126: PPUSH
25127: CALL_OW 448
25131: IFFALSE 25164
// result := [ chassis , engine , control , weapon ] ;
25133: LD_ADDR_VAR 0 6
25137: PUSH
25138: LD_VAR 0 2
25142: PUSH
25143: LD_VAR 0 3
25147: PUSH
25148: LD_VAR 0 4
25152: PUSH
25153: LD_VAR 0 5
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: ST_TO_ADDR
// end ;
25164: LD_VAR 0 6
25168: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25169: LD_INT 0
25171: PPUSH
// if not chassis or not engine then
25172: LD_VAR 0 1
25176: NOT
25177: PUSH
25178: LD_VAR 0 2
25182: NOT
25183: OR
25184: IFFALSE 25188
// exit ;
25186: GO 25384
// case engine of engine_solar :
25188: LD_VAR 0 2
25192: PUSH
25193: LD_INT 2
25195: DOUBLE
25196: EQUAL
25197: IFTRUE 25201
25199: GO 25239
25201: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25202: LD_ADDR_VAR 0 3
25206: PUSH
25207: LD_INT 11
25209: PUSH
25210: LD_INT 12
25212: PUSH
25213: LD_INT 13
25215: PUSH
25216: LD_INT 14
25218: PUSH
25219: LD_INT 1
25221: PUSH
25222: LD_INT 2
25224: PUSH
25225: LD_INT 3
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: ST_TO_ADDR
25237: GO 25368
25239: LD_INT 1
25241: DOUBLE
25242: EQUAL
25243: IFTRUE 25247
25245: GO 25309
25247: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25248: LD_ADDR_VAR 0 3
25252: PUSH
25253: LD_INT 11
25255: PUSH
25256: LD_INT 12
25258: PUSH
25259: LD_INT 13
25261: PUSH
25262: LD_INT 14
25264: PUSH
25265: LD_INT 1
25267: PUSH
25268: LD_INT 2
25270: PUSH
25271: LD_INT 3
25273: PUSH
25274: LD_INT 4
25276: PUSH
25277: LD_INT 5
25279: PUSH
25280: LD_INT 21
25282: PUSH
25283: LD_INT 23
25285: PUSH
25286: LD_INT 22
25288: PUSH
25289: LD_INT 24
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: ST_TO_ADDR
25307: GO 25368
25309: LD_INT 3
25311: DOUBLE
25312: EQUAL
25313: IFTRUE 25317
25315: GO 25367
25317: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25318: LD_ADDR_VAR 0 3
25322: PUSH
25323: LD_INT 13
25325: PUSH
25326: LD_INT 14
25328: PUSH
25329: LD_INT 2
25331: PUSH
25332: LD_INT 3
25334: PUSH
25335: LD_INT 4
25337: PUSH
25338: LD_INT 5
25340: PUSH
25341: LD_INT 21
25343: PUSH
25344: LD_INT 22
25346: PUSH
25347: LD_INT 23
25349: PUSH
25350: LD_INT 24
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: ST_TO_ADDR
25365: GO 25368
25367: POP
// result := ( chassis in result ) ;
25368: LD_ADDR_VAR 0 3
25372: PUSH
25373: LD_VAR 0 1
25377: PUSH
25378: LD_VAR 0 3
25382: IN
25383: ST_TO_ADDR
// end ;
25384: LD_VAR 0 3
25388: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25389: LD_INT 0
25391: PPUSH
// if not chassis or not weapon then
25392: LD_VAR 0 1
25396: NOT
25397: PUSH
25398: LD_VAR 0 2
25402: NOT
25403: OR
25404: IFFALSE 25408
// exit ;
25406: GO 26470
// case weapon of us_machine_gun :
25408: LD_VAR 0 2
25412: PUSH
25413: LD_INT 2
25415: DOUBLE
25416: EQUAL
25417: IFTRUE 25421
25419: GO 25451
25421: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25422: LD_ADDR_VAR 0 3
25426: PUSH
25427: LD_INT 1
25429: PUSH
25430: LD_INT 2
25432: PUSH
25433: LD_INT 3
25435: PUSH
25436: LD_INT 4
25438: PUSH
25439: LD_INT 5
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: ST_TO_ADDR
25449: GO 26454
25451: LD_INT 3
25453: DOUBLE
25454: EQUAL
25455: IFTRUE 25459
25457: GO 25489
25459: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25460: LD_ADDR_VAR 0 3
25464: PUSH
25465: LD_INT 1
25467: PUSH
25468: LD_INT 2
25470: PUSH
25471: LD_INT 3
25473: PUSH
25474: LD_INT 4
25476: PUSH
25477: LD_INT 5
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: ST_TO_ADDR
25487: GO 26454
25489: LD_INT 11
25491: DOUBLE
25492: EQUAL
25493: IFTRUE 25497
25495: GO 25527
25497: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25498: LD_ADDR_VAR 0 3
25502: PUSH
25503: LD_INT 1
25505: PUSH
25506: LD_INT 2
25508: PUSH
25509: LD_INT 3
25511: PUSH
25512: LD_INT 4
25514: PUSH
25515: LD_INT 5
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: ST_TO_ADDR
25525: GO 26454
25527: LD_INT 4
25529: DOUBLE
25530: EQUAL
25531: IFTRUE 25535
25533: GO 25561
25535: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25536: LD_ADDR_VAR 0 3
25540: PUSH
25541: LD_INT 2
25543: PUSH
25544: LD_INT 3
25546: PUSH
25547: LD_INT 4
25549: PUSH
25550: LD_INT 5
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: ST_TO_ADDR
25559: GO 26454
25561: LD_INT 5
25563: DOUBLE
25564: EQUAL
25565: IFTRUE 25569
25567: GO 25595
25569: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25570: LD_ADDR_VAR 0 3
25574: PUSH
25575: LD_INT 2
25577: PUSH
25578: LD_INT 3
25580: PUSH
25581: LD_INT 4
25583: PUSH
25584: LD_INT 5
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: ST_TO_ADDR
25593: GO 26454
25595: LD_INT 9
25597: DOUBLE
25598: EQUAL
25599: IFTRUE 25603
25601: GO 25629
25603: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25604: LD_ADDR_VAR 0 3
25608: PUSH
25609: LD_INT 2
25611: PUSH
25612: LD_INT 3
25614: PUSH
25615: LD_INT 4
25617: PUSH
25618: LD_INT 5
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: ST_TO_ADDR
25627: GO 26454
25629: LD_INT 7
25631: DOUBLE
25632: EQUAL
25633: IFTRUE 25637
25635: GO 25663
25637: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25638: LD_ADDR_VAR 0 3
25642: PUSH
25643: LD_INT 2
25645: PUSH
25646: LD_INT 3
25648: PUSH
25649: LD_INT 4
25651: PUSH
25652: LD_INT 5
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: ST_TO_ADDR
25661: GO 26454
25663: LD_INT 12
25665: DOUBLE
25666: EQUAL
25667: IFTRUE 25671
25669: GO 25697
25671: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25672: LD_ADDR_VAR 0 3
25676: PUSH
25677: LD_INT 2
25679: PUSH
25680: LD_INT 3
25682: PUSH
25683: LD_INT 4
25685: PUSH
25686: LD_INT 5
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: ST_TO_ADDR
25695: GO 26454
25697: LD_INT 13
25699: DOUBLE
25700: EQUAL
25701: IFTRUE 25705
25703: GO 25731
25705: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25706: LD_ADDR_VAR 0 3
25710: PUSH
25711: LD_INT 2
25713: PUSH
25714: LD_INT 3
25716: PUSH
25717: LD_INT 4
25719: PUSH
25720: LD_INT 5
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: ST_TO_ADDR
25729: GO 26454
25731: LD_INT 14
25733: DOUBLE
25734: EQUAL
25735: IFTRUE 25739
25737: GO 25757
25739: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25740: LD_ADDR_VAR 0 3
25744: PUSH
25745: LD_INT 4
25747: PUSH
25748: LD_INT 5
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: ST_TO_ADDR
25755: GO 26454
25757: LD_INT 6
25759: DOUBLE
25760: EQUAL
25761: IFTRUE 25765
25763: GO 25783
25765: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25766: LD_ADDR_VAR 0 3
25770: PUSH
25771: LD_INT 4
25773: PUSH
25774: LD_INT 5
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: ST_TO_ADDR
25781: GO 26454
25783: LD_INT 10
25785: DOUBLE
25786: EQUAL
25787: IFTRUE 25791
25789: GO 25809
25791: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25792: LD_ADDR_VAR 0 3
25796: PUSH
25797: LD_INT 4
25799: PUSH
25800: LD_INT 5
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: ST_TO_ADDR
25807: GO 26454
25809: LD_INT 22
25811: DOUBLE
25812: EQUAL
25813: IFTRUE 25817
25815: GO 25843
25817: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25818: LD_ADDR_VAR 0 3
25822: PUSH
25823: LD_INT 11
25825: PUSH
25826: LD_INT 12
25828: PUSH
25829: LD_INT 13
25831: PUSH
25832: LD_INT 14
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: ST_TO_ADDR
25841: GO 26454
25843: LD_INT 23
25845: DOUBLE
25846: EQUAL
25847: IFTRUE 25851
25849: GO 25877
25851: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25852: LD_ADDR_VAR 0 3
25856: PUSH
25857: LD_INT 11
25859: PUSH
25860: LD_INT 12
25862: PUSH
25863: LD_INT 13
25865: PUSH
25866: LD_INT 14
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: ST_TO_ADDR
25875: GO 26454
25877: LD_INT 24
25879: DOUBLE
25880: EQUAL
25881: IFTRUE 25885
25883: GO 25911
25885: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25886: LD_ADDR_VAR 0 3
25890: PUSH
25891: LD_INT 11
25893: PUSH
25894: LD_INT 12
25896: PUSH
25897: LD_INT 13
25899: PUSH
25900: LD_INT 14
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: ST_TO_ADDR
25909: GO 26454
25911: LD_INT 30
25913: DOUBLE
25914: EQUAL
25915: IFTRUE 25919
25917: GO 25945
25919: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25920: LD_ADDR_VAR 0 3
25924: PUSH
25925: LD_INT 11
25927: PUSH
25928: LD_INT 12
25930: PUSH
25931: LD_INT 13
25933: PUSH
25934: LD_INT 14
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: ST_TO_ADDR
25943: GO 26454
25945: LD_INT 25
25947: DOUBLE
25948: EQUAL
25949: IFTRUE 25953
25951: GO 25971
25953: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25954: LD_ADDR_VAR 0 3
25958: PUSH
25959: LD_INT 13
25961: PUSH
25962: LD_INT 14
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: ST_TO_ADDR
25969: GO 26454
25971: LD_INT 27
25973: DOUBLE
25974: EQUAL
25975: IFTRUE 25979
25977: GO 25997
25979: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25980: LD_ADDR_VAR 0 3
25984: PUSH
25985: LD_INT 13
25987: PUSH
25988: LD_INT 14
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: ST_TO_ADDR
25995: GO 26454
25997: LD_EXP 44
26001: DOUBLE
26002: EQUAL
26003: IFTRUE 26007
26005: GO 26033
26007: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26008: LD_ADDR_VAR 0 3
26012: PUSH
26013: LD_INT 11
26015: PUSH
26016: LD_INT 12
26018: PUSH
26019: LD_INT 13
26021: PUSH
26022: LD_INT 14
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: ST_TO_ADDR
26031: GO 26454
26033: LD_INT 28
26035: DOUBLE
26036: EQUAL
26037: IFTRUE 26041
26039: GO 26059
26041: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26042: LD_ADDR_VAR 0 3
26046: PUSH
26047: LD_INT 13
26049: PUSH
26050: LD_INT 14
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: ST_TO_ADDR
26057: GO 26454
26059: LD_INT 29
26061: DOUBLE
26062: EQUAL
26063: IFTRUE 26067
26065: GO 26085
26067: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26068: LD_ADDR_VAR 0 3
26072: PUSH
26073: LD_INT 13
26075: PUSH
26076: LD_INT 14
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: ST_TO_ADDR
26083: GO 26454
26085: LD_INT 31
26087: DOUBLE
26088: EQUAL
26089: IFTRUE 26093
26091: GO 26111
26093: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26094: LD_ADDR_VAR 0 3
26098: PUSH
26099: LD_INT 13
26101: PUSH
26102: LD_INT 14
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: ST_TO_ADDR
26109: GO 26454
26111: LD_INT 26
26113: DOUBLE
26114: EQUAL
26115: IFTRUE 26119
26117: GO 26137
26119: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26120: LD_ADDR_VAR 0 3
26124: PUSH
26125: LD_INT 13
26127: PUSH
26128: LD_INT 14
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: ST_TO_ADDR
26135: GO 26454
26137: LD_INT 42
26139: DOUBLE
26140: EQUAL
26141: IFTRUE 26145
26143: GO 26171
26145: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26146: LD_ADDR_VAR 0 3
26150: PUSH
26151: LD_INT 21
26153: PUSH
26154: LD_INT 22
26156: PUSH
26157: LD_INT 23
26159: PUSH
26160: LD_INT 24
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: ST_TO_ADDR
26169: GO 26454
26171: LD_INT 43
26173: DOUBLE
26174: EQUAL
26175: IFTRUE 26179
26177: GO 26205
26179: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26180: LD_ADDR_VAR 0 3
26184: PUSH
26185: LD_INT 21
26187: PUSH
26188: LD_INT 22
26190: PUSH
26191: LD_INT 23
26193: PUSH
26194: LD_INT 24
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: ST_TO_ADDR
26203: GO 26454
26205: LD_INT 44
26207: DOUBLE
26208: EQUAL
26209: IFTRUE 26213
26211: GO 26239
26213: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26214: LD_ADDR_VAR 0 3
26218: PUSH
26219: LD_INT 21
26221: PUSH
26222: LD_INT 22
26224: PUSH
26225: LD_INT 23
26227: PUSH
26228: LD_INT 24
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: ST_TO_ADDR
26237: GO 26454
26239: LD_INT 45
26241: DOUBLE
26242: EQUAL
26243: IFTRUE 26247
26245: GO 26273
26247: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26248: LD_ADDR_VAR 0 3
26252: PUSH
26253: LD_INT 21
26255: PUSH
26256: LD_INT 22
26258: PUSH
26259: LD_INT 23
26261: PUSH
26262: LD_INT 24
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: ST_TO_ADDR
26271: GO 26454
26273: LD_INT 49
26275: DOUBLE
26276: EQUAL
26277: IFTRUE 26281
26279: GO 26307
26281: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26282: LD_ADDR_VAR 0 3
26286: PUSH
26287: LD_INT 21
26289: PUSH
26290: LD_INT 22
26292: PUSH
26293: LD_INT 23
26295: PUSH
26296: LD_INT 24
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: ST_TO_ADDR
26305: GO 26454
26307: LD_INT 51
26309: DOUBLE
26310: EQUAL
26311: IFTRUE 26315
26313: GO 26341
26315: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26316: LD_ADDR_VAR 0 3
26320: PUSH
26321: LD_INT 21
26323: PUSH
26324: LD_INT 22
26326: PUSH
26327: LD_INT 23
26329: PUSH
26330: LD_INT 24
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: ST_TO_ADDR
26339: GO 26454
26341: LD_INT 52
26343: DOUBLE
26344: EQUAL
26345: IFTRUE 26349
26347: GO 26375
26349: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26350: LD_ADDR_VAR 0 3
26354: PUSH
26355: LD_INT 21
26357: PUSH
26358: LD_INT 22
26360: PUSH
26361: LD_INT 23
26363: PUSH
26364: LD_INT 24
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: ST_TO_ADDR
26373: GO 26454
26375: LD_INT 53
26377: DOUBLE
26378: EQUAL
26379: IFTRUE 26383
26381: GO 26401
26383: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26384: LD_ADDR_VAR 0 3
26388: PUSH
26389: LD_INT 23
26391: PUSH
26392: LD_INT 24
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: ST_TO_ADDR
26399: GO 26454
26401: LD_INT 46
26403: DOUBLE
26404: EQUAL
26405: IFTRUE 26409
26407: GO 26427
26409: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26410: LD_ADDR_VAR 0 3
26414: PUSH
26415: LD_INT 23
26417: PUSH
26418: LD_INT 24
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: ST_TO_ADDR
26425: GO 26454
26427: LD_INT 47
26429: DOUBLE
26430: EQUAL
26431: IFTRUE 26435
26433: GO 26453
26435: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26436: LD_ADDR_VAR 0 3
26440: PUSH
26441: LD_INT 23
26443: PUSH
26444: LD_INT 24
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: ST_TO_ADDR
26451: GO 26454
26453: POP
// result := ( chassis in result ) ;
26454: LD_ADDR_VAR 0 3
26458: PUSH
26459: LD_VAR 0 1
26463: PUSH
26464: LD_VAR 0 3
26468: IN
26469: ST_TO_ADDR
// end ;
26470: LD_VAR 0 3
26474: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26475: LD_INT 0
26477: PPUSH
26478: PPUSH
26479: PPUSH
26480: PPUSH
26481: PPUSH
26482: PPUSH
26483: PPUSH
// result := array ;
26484: LD_ADDR_VAR 0 5
26488: PUSH
26489: LD_VAR 0 1
26493: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26494: LD_VAR 0 1
26498: NOT
26499: PUSH
26500: LD_VAR 0 2
26504: NOT
26505: OR
26506: PUSH
26507: LD_VAR 0 3
26511: NOT
26512: OR
26513: PUSH
26514: LD_VAR 0 2
26518: PUSH
26519: LD_VAR 0 1
26523: GREATER
26524: OR
26525: PUSH
26526: LD_VAR 0 3
26530: PUSH
26531: LD_VAR 0 1
26535: GREATER
26536: OR
26537: IFFALSE 26541
// exit ;
26539: GO 26837
// if direction then
26541: LD_VAR 0 4
26545: IFFALSE 26609
// begin d := 1 ;
26547: LD_ADDR_VAR 0 9
26551: PUSH
26552: LD_INT 1
26554: ST_TO_ADDR
// if i_from > i_to then
26555: LD_VAR 0 2
26559: PUSH
26560: LD_VAR 0 3
26564: GREATER
26565: IFFALSE 26591
// length := ( array - i_from ) + i_to else
26567: LD_ADDR_VAR 0 11
26571: PUSH
26572: LD_VAR 0 1
26576: PUSH
26577: LD_VAR 0 2
26581: MINUS
26582: PUSH
26583: LD_VAR 0 3
26587: PLUS
26588: ST_TO_ADDR
26589: GO 26607
// length := i_to - i_from ;
26591: LD_ADDR_VAR 0 11
26595: PUSH
26596: LD_VAR 0 3
26600: PUSH
26601: LD_VAR 0 2
26605: MINUS
26606: ST_TO_ADDR
// end else
26607: GO 26670
// begin d := - 1 ;
26609: LD_ADDR_VAR 0 9
26613: PUSH
26614: LD_INT 1
26616: NEG
26617: ST_TO_ADDR
// if i_from > i_to then
26618: LD_VAR 0 2
26622: PUSH
26623: LD_VAR 0 3
26627: GREATER
26628: IFFALSE 26648
// length := i_from - i_to else
26630: LD_ADDR_VAR 0 11
26634: PUSH
26635: LD_VAR 0 2
26639: PUSH
26640: LD_VAR 0 3
26644: MINUS
26645: ST_TO_ADDR
26646: GO 26670
// length := ( array - i_to ) + i_from ;
26648: LD_ADDR_VAR 0 11
26652: PUSH
26653: LD_VAR 0 1
26657: PUSH
26658: LD_VAR 0 3
26662: MINUS
26663: PUSH
26664: LD_VAR 0 2
26668: PLUS
26669: ST_TO_ADDR
// end ; if not length then
26670: LD_VAR 0 11
26674: NOT
26675: IFFALSE 26679
// exit ;
26677: GO 26837
// tmp := array ;
26679: LD_ADDR_VAR 0 10
26683: PUSH
26684: LD_VAR 0 1
26688: ST_TO_ADDR
// for i = 1 to length do
26689: LD_ADDR_VAR 0 6
26693: PUSH
26694: DOUBLE
26695: LD_INT 1
26697: DEC
26698: ST_TO_ADDR
26699: LD_VAR 0 11
26703: PUSH
26704: FOR_TO
26705: IFFALSE 26825
// begin for j = 1 to array do
26707: LD_ADDR_VAR 0 7
26711: PUSH
26712: DOUBLE
26713: LD_INT 1
26715: DEC
26716: ST_TO_ADDR
26717: LD_VAR 0 1
26721: PUSH
26722: FOR_TO
26723: IFFALSE 26811
// begin k := j + d ;
26725: LD_ADDR_VAR 0 8
26729: PUSH
26730: LD_VAR 0 7
26734: PUSH
26735: LD_VAR 0 9
26739: PLUS
26740: ST_TO_ADDR
// if k > array then
26741: LD_VAR 0 8
26745: PUSH
26746: LD_VAR 0 1
26750: GREATER
26751: IFFALSE 26761
// k := 1 ;
26753: LD_ADDR_VAR 0 8
26757: PUSH
26758: LD_INT 1
26760: ST_TO_ADDR
// if not k then
26761: LD_VAR 0 8
26765: NOT
26766: IFFALSE 26778
// k := array ;
26768: LD_ADDR_VAR 0 8
26772: PUSH
26773: LD_VAR 0 1
26777: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26778: LD_ADDR_VAR 0 10
26782: PUSH
26783: LD_VAR 0 10
26787: PPUSH
26788: LD_VAR 0 8
26792: PPUSH
26793: LD_VAR 0 1
26797: PUSH
26798: LD_VAR 0 7
26802: ARRAY
26803: PPUSH
26804: CALL_OW 1
26808: ST_TO_ADDR
// end ;
26809: GO 26722
26811: POP
26812: POP
// array := tmp ;
26813: LD_ADDR_VAR 0 1
26817: PUSH
26818: LD_VAR 0 10
26822: ST_TO_ADDR
// end ;
26823: GO 26704
26825: POP
26826: POP
// result := array ;
26827: LD_ADDR_VAR 0 5
26831: PUSH
26832: LD_VAR 0 1
26836: ST_TO_ADDR
// end ;
26837: LD_VAR 0 5
26841: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26842: LD_INT 0
26844: PPUSH
26845: PPUSH
// result := 0 ;
26846: LD_ADDR_VAR 0 3
26850: PUSH
26851: LD_INT 0
26853: ST_TO_ADDR
// if not array or not value in array then
26854: LD_VAR 0 1
26858: NOT
26859: PUSH
26860: LD_VAR 0 2
26864: PUSH
26865: LD_VAR 0 1
26869: IN
26870: NOT
26871: OR
26872: IFFALSE 26876
// exit ;
26874: GO 26930
// for i = 1 to array do
26876: LD_ADDR_VAR 0 4
26880: PUSH
26881: DOUBLE
26882: LD_INT 1
26884: DEC
26885: ST_TO_ADDR
26886: LD_VAR 0 1
26890: PUSH
26891: FOR_TO
26892: IFFALSE 26928
// if value = array [ i ] then
26894: LD_VAR 0 2
26898: PUSH
26899: LD_VAR 0 1
26903: PUSH
26904: LD_VAR 0 4
26908: ARRAY
26909: EQUAL
26910: IFFALSE 26926
// begin result := i ;
26912: LD_ADDR_VAR 0 3
26916: PUSH
26917: LD_VAR 0 4
26921: ST_TO_ADDR
// exit ;
26922: POP
26923: POP
26924: GO 26930
// end ;
26926: GO 26891
26928: POP
26929: POP
// end ;
26930: LD_VAR 0 3
26934: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26935: LD_INT 0
26937: PPUSH
// vc_chassis := chassis ;
26938: LD_ADDR_OWVAR 37
26942: PUSH
26943: LD_VAR 0 1
26947: ST_TO_ADDR
// vc_engine := engine ;
26948: LD_ADDR_OWVAR 39
26952: PUSH
26953: LD_VAR 0 2
26957: ST_TO_ADDR
// vc_control := control ;
26958: LD_ADDR_OWVAR 38
26962: PUSH
26963: LD_VAR 0 3
26967: ST_TO_ADDR
// vc_weapon := weapon ;
26968: LD_ADDR_OWVAR 40
26972: PUSH
26973: LD_VAR 0 4
26977: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26978: LD_ADDR_OWVAR 41
26982: PUSH
26983: LD_VAR 0 5
26987: ST_TO_ADDR
// end ;
26988: LD_VAR 0 6
26992: RET
// export function WantPlant ( unit ) ; var task ; begin
26993: LD_INT 0
26995: PPUSH
26996: PPUSH
// result := false ;
26997: LD_ADDR_VAR 0 2
27001: PUSH
27002: LD_INT 0
27004: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27005: LD_ADDR_VAR 0 3
27009: PUSH
27010: LD_VAR 0 1
27014: PPUSH
27015: CALL_OW 437
27019: ST_TO_ADDR
// if task then
27020: LD_VAR 0 3
27024: IFFALSE 27052
// if task [ 1 ] [ 1 ] = p then
27026: LD_VAR 0 3
27030: PUSH
27031: LD_INT 1
27033: ARRAY
27034: PUSH
27035: LD_INT 1
27037: ARRAY
27038: PUSH
27039: LD_STRING p
27041: EQUAL
27042: IFFALSE 27052
// result := true ;
27044: LD_ADDR_VAR 0 2
27048: PUSH
27049: LD_INT 1
27051: ST_TO_ADDR
// end ;
27052: LD_VAR 0 2
27056: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27057: LD_INT 0
27059: PPUSH
27060: PPUSH
27061: PPUSH
27062: PPUSH
// if pos < 1 then
27063: LD_VAR 0 2
27067: PUSH
27068: LD_INT 1
27070: LESS
27071: IFFALSE 27075
// exit ;
27073: GO 27378
// if pos = 1 then
27075: LD_VAR 0 2
27079: PUSH
27080: LD_INT 1
27082: EQUAL
27083: IFFALSE 27116
// result := Replace ( arr , pos [ 1 ] , value ) else
27085: LD_ADDR_VAR 0 4
27089: PUSH
27090: LD_VAR 0 1
27094: PPUSH
27095: LD_VAR 0 2
27099: PUSH
27100: LD_INT 1
27102: ARRAY
27103: PPUSH
27104: LD_VAR 0 3
27108: PPUSH
27109: CALL_OW 1
27113: ST_TO_ADDR
27114: GO 27378
// begin tmp := arr ;
27116: LD_ADDR_VAR 0 6
27120: PUSH
27121: LD_VAR 0 1
27125: ST_TO_ADDR
// s_arr := [ tmp ] ;
27126: LD_ADDR_VAR 0 7
27130: PUSH
27131: LD_VAR 0 6
27135: PUSH
27136: EMPTY
27137: LIST
27138: ST_TO_ADDR
// for i = 1 to pos - 1 do
27139: LD_ADDR_VAR 0 5
27143: PUSH
27144: DOUBLE
27145: LD_INT 1
27147: DEC
27148: ST_TO_ADDR
27149: LD_VAR 0 2
27153: PUSH
27154: LD_INT 1
27156: MINUS
27157: PUSH
27158: FOR_TO
27159: IFFALSE 27204
// begin tmp := tmp [ pos [ i ] ] ;
27161: LD_ADDR_VAR 0 6
27165: PUSH
27166: LD_VAR 0 6
27170: PUSH
27171: LD_VAR 0 2
27175: PUSH
27176: LD_VAR 0 5
27180: ARRAY
27181: ARRAY
27182: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27183: LD_ADDR_VAR 0 7
27187: PUSH
27188: LD_VAR 0 7
27192: PUSH
27193: LD_VAR 0 6
27197: PUSH
27198: EMPTY
27199: LIST
27200: ADD
27201: ST_TO_ADDR
// end ;
27202: GO 27158
27204: POP
27205: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27206: LD_ADDR_VAR 0 6
27210: PUSH
27211: LD_VAR 0 6
27215: PPUSH
27216: LD_VAR 0 2
27220: PUSH
27221: LD_VAR 0 2
27225: ARRAY
27226: PPUSH
27227: LD_VAR 0 3
27231: PPUSH
27232: CALL_OW 1
27236: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27237: LD_ADDR_VAR 0 7
27241: PUSH
27242: LD_VAR 0 7
27246: PPUSH
27247: LD_VAR 0 7
27251: PPUSH
27252: LD_VAR 0 6
27256: PPUSH
27257: CALL_OW 1
27261: ST_TO_ADDR
// for i = s_arr downto 2 do
27262: LD_ADDR_VAR 0 5
27266: PUSH
27267: DOUBLE
27268: LD_VAR 0 7
27272: INC
27273: ST_TO_ADDR
27274: LD_INT 2
27276: PUSH
27277: FOR_DOWNTO
27278: IFFALSE 27362
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27280: LD_ADDR_VAR 0 6
27284: PUSH
27285: LD_VAR 0 7
27289: PUSH
27290: LD_VAR 0 5
27294: PUSH
27295: LD_INT 1
27297: MINUS
27298: ARRAY
27299: PPUSH
27300: LD_VAR 0 2
27304: PUSH
27305: LD_VAR 0 5
27309: PUSH
27310: LD_INT 1
27312: MINUS
27313: ARRAY
27314: PPUSH
27315: LD_VAR 0 7
27319: PUSH
27320: LD_VAR 0 5
27324: ARRAY
27325: PPUSH
27326: CALL_OW 1
27330: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27331: LD_ADDR_VAR 0 7
27335: PUSH
27336: LD_VAR 0 7
27340: PPUSH
27341: LD_VAR 0 5
27345: PUSH
27346: LD_INT 1
27348: MINUS
27349: PPUSH
27350: LD_VAR 0 6
27354: PPUSH
27355: CALL_OW 1
27359: ST_TO_ADDR
// end ;
27360: GO 27277
27362: POP
27363: POP
// result := s_arr [ 1 ] ;
27364: LD_ADDR_VAR 0 4
27368: PUSH
27369: LD_VAR 0 7
27373: PUSH
27374: LD_INT 1
27376: ARRAY
27377: ST_TO_ADDR
// end ; end ;
27378: LD_VAR 0 4
27382: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27383: LD_INT 0
27385: PPUSH
27386: PPUSH
// if not list then
27387: LD_VAR 0 1
27391: NOT
27392: IFFALSE 27396
// exit ;
27394: GO 27487
// i := list [ pos1 ] ;
27396: LD_ADDR_VAR 0 5
27400: PUSH
27401: LD_VAR 0 1
27405: PUSH
27406: LD_VAR 0 2
27410: ARRAY
27411: ST_TO_ADDR
// if not i then
27412: LD_VAR 0 5
27416: NOT
27417: IFFALSE 27421
// exit ;
27419: GO 27487
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27421: LD_ADDR_VAR 0 1
27425: PUSH
27426: LD_VAR 0 1
27430: PPUSH
27431: LD_VAR 0 2
27435: PPUSH
27436: LD_VAR 0 1
27440: PUSH
27441: LD_VAR 0 3
27445: ARRAY
27446: PPUSH
27447: CALL_OW 1
27451: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27452: LD_ADDR_VAR 0 1
27456: PUSH
27457: LD_VAR 0 1
27461: PPUSH
27462: LD_VAR 0 3
27466: PPUSH
27467: LD_VAR 0 5
27471: PPUSH
27472: CALL_OW 1
27476: ST_TO_ADDR
// result := list ;
27477: LD_ADDR_VAR 0 4
27481: PUSH
27482: LD_VAR 0 1
27486: ST_TO_ADDR
// end ;
27487: LD_VAR 0 4
27491: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27492: LD_INT 0
27494: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27495: LD_ADDR_VAR 0 5
27499: PUSH
27500: LD_VAR 0 1
27504: PPUSH
27505: CALL_OW 250
27509: PPUSH
27510: LD_VAR 0 1
27514: PPUSH
27515: CALL_OW 251
27519: PPUSH
27520: LD_VAR 0 2
27524: PPUSH
27525: LD_VAR 0 3
27529: PPUSH
27530: LD_VAR 0 4
27534: PPUSH
27535: CALL 27545 0 5
27539: ST_TO_ADDR
// end ;
27540: LD_VAR 0 5
27544: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27545: LD_INT 0
27547: PPUSH
27548: PPUSH
27549: PPUSH
27550: PPUSH
// if not list then
27551: LD_VAR 0 3
27555: NOT
27556: IFFALSE 27560
// exit ;
27558: GO 27948
// result := [ ] ;
27560: LD_ADDR_VAR 0 6
27564: PUSH
27565: EMPTY
27566: ST_TO_ADDR
// for i in list do
27567: LD_ADDR_VAR 0 7
27571: PUSH
27572: LD_VAR 0 3
27576: PUSH
27577: FOR_IN
27578: IFFALSE 27780
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27580: LD_ADDR_VAR 0 9
27584: PUSH
27585: LD_VAR 0 7
27589: PPUSH
27590: LD_VAR 0 1
27594: PPUSH
27595: LD_VAR 0 2
27599: PPUSH
27600: CALL_OW 297
27604: ST_TO_ADDR
// if not result then
27605: LD_VAR 0 6
27609: NOT
27610: IFFALSE 27636
// result := [ [ i , tmp ] ] else
27612: LD_ADDR_VAR 0 6
27616: PUSH
27617: LD_VAR 0 7
27621: PUSH
27622: LD_VAR 0 9
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: EMPTY
27632: LIST
27633: ST_TO_ADDR
27634: GO 27778
// begin if result [ result ] [ 2 ] < tmp then
27636: LD_VAR 0 6
27640: PUSH
27641: LD_VAR 0 6
27645: ARRAY
27646: PUSH
27647: LD_INT 2
27649: ARRAY
27650: PUSH
27651: LD_VAR 0 9
27655: LESS
27656: IFFALSE 27698
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27658: LD_ADDR_VAR 0 6
27662: PUSH
27663: LD_VAR 0 6
27667: PPUSH
27668: LD_VAR 0 6
27672: PUSH
27673: LD_INT 1
27675: PLUS
27676: PPUSH
27677: LD_VAR 0 7
27681: PUSH
27682: LD_VAR 0 9
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PPUSH
27691: CALL_OW 2
27695: ST_TO_ADDR
27696: GO 27778
// for j = 1 to result do
27698: LD_ADDR_VAR 0 8
27702: PUSH
27703: DOUBLE
27704: LD_INT 1
27706: DEC
27707: ST_TO_ADDR
27708: LD_VAR 0 6
27712: PUSH
27713: FOR_TO
27714: IFFALSE 27776
// begin if tmp < result [ j ] [ 2 ] then
27716: LD_VAR 0 9
27720: PUSH
27721: LD_VAR 0 6
27725: PUSH
27726: LD_VAR 0 8
27730: ARRAY
27731: PUSH
27732: LD_INT 2
27734: ARRAY
27735: LESS
27736: IFFALSE 27774
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27738: LD_ADDR_VAR 0 6
27742: PUSH
27743: LD_VAR 0 6
27747: PPUSH
27748: LD_VAR 0 8
27752: PPUSH
27753: LD_VAR 0 7
27757: PUSH
27758: LD_VAR 0 9
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PPUSH
27767: CALL_OW 2
27771: ST_TO_ADDR
// break ;
27772: GO 27776
// end ; end ;
27774: GO 27713
27776: POP
27777: POP
// end ; end ;
27778: GO 27577
27780: POP
27781: POP
// if result and not asc then
27782: LD_VAR 0 6
27786: PUSH
27787: LD_VAR 0 4
27791: NOT
27792: AND
27793: IFFALSE 27868
// begin tmp := result ;
27795: LD_ADDR_VAR 0 9
27799: PUSH
27800: LD_VAR 0 6
27804: ST_TO_ADDR
// for i = tmp downto 1 do
27805: LD_ADDR_VAR 0 7
27809: PUSH
27810: DOUBLE
27811: LD_VAR 0 9
27815: INC
27816: ST_TO_ADDR
27817: LD_INT 1
27819: PUSH
27820: FOR_DOWNTO
27821: IFFALSE 27866
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27823: LD_ADDR_VAR 0 6
27827: PUSH
27828: LD_VAR 0 6
27832: PPUSH
27833: LD_VAR 0 9
27837: PUSH
27838: LD_VAR 0 7
27842: MINUS
27843: PUSH
27844: LD_INT 1
27846: PLUS
27847: PPUSH
27848: LD_VAR 0 9
27852: PUSH
27853: LD_VAR 0 7
27857: ARRAY
27858: PPUSH
27859: CALL_OW 1
27863: ST_TO_ADDR
27864: GO 27820
27866: POP
27867: POP
// end ; tmp := [ ] ;
27868: LD_ADDR_VAR 0 9
27872: PUSH
27873: EMPTY
27874: ST_TO_ADDR
// if mode then
27875: LD_VAR 0 5
27879: IFFALSE 27948
// begin for i = 1 to result do
27881: LD_ADDR_VAR 0 7
27885: PUSH
27886: DOUBLE
27887: LD_INT 1
27889: DEC
27890: ST_TO_ADDR
27891: LD_VAR 0 6
27895: PUSH
27896: FOR_TO
27897: IFFALSE 27936
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27899: LD_ADDR_VAR 0 9
27903: PUSH
27904: LD_VAR 0 9
27908: PPUSH
27909: LD_VAR 0 7
27913: PPUSH
27914: LD_VAR 0 6
27918: PUSH
27919: LD_VAR 0 7
27923: ARRAY
27924: PUSH
27925: LD_INT 1
27927: ARRAY
27928: PPUSH
27929: CALL_OW 1
27933: ST_TO_ADDR
27934: GO 27896
27936: POP
27937: POP
// result := tmp ;
27938: LD_ADDR_VAR 0 6
27942: PUSH
27943: LD_VAR 0 9
27947: ST_TO_ADDR
// end ; end ;
27948: LD_VAR 0 6
27952: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27953: LD_INT 0
27955: PPUSH
27956: PPUSH
27957: PPUSH
27958: PPUSH
27959: PPUSH
27960: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27961: LD_ADDR_VAR 0 5
27965: PUSH
27966: LD_INT 0
27968: PUSH
27969: LD_INT 0
27971: PUSH
27972: LD_INT 0
27974: PUSH
27975: EMPTY
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: ST_TO_ADDR
// if not x or not y then
27983: LD_VAR 0 2
27987: NOT
27988: PUSH
27989: LD_VAR 0 3
27993: NOT
27994: OR
27995: IFFALSE 27999
// exit ;
27997: GO 29651
// if not range then
27999: LD_VAR 0 4
28003: NOT
28004: IFFALSE 28014
// range := 10 ;
28006: LD_ADDR_VAR 0 4
28010: PUSH
28011: LD_INT 10
28013: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28014: LD_ADDR_VAR 0 8
28018: PUSH
28019: LD_INT 81
28021: PUSH
28022: LD_VAR 0 1
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 92
28033: PUSH
28034: LD_VAR 0 2
28038: PUSH
28039: LD_VAR 0 3
28043: PUSH
28044: LD_VAR 0 4
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 3
28057: PUSH
28058: LD_INT 21
28060: PUSH
28061: LD_INT 3
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: LIST
28076: PPUSH
28077: CALL_OW 69
28081: ST_TO_ADDR
// if not tmp then
28082: LD_VAR 0 8
28086: NOT
28087: IFFALSE 28091
// exit ;
28089: GO 29651
// for i in tmp do
28091: LD_ADDR_VAR 0 6
28095: PUSH
28096: LD_VAR 0 8
28100: PUSH
28101: FOR_IN
28102: IFFALSE 29626
// begin points := [ 0 , 0 , 0 ] ;
28104: LD_ADDR_VAR 0 9
28108: PUSH
28109: LD_INT 0
28111: PUSH
28112: LD_INT 0
28114: PUSH
28115: LD_INT 0
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: LIST
28122: ST_TO_ADDR
// bpoints := 1 ;
28123: LD_ADDR_VAR 0 10
28127: PUSH
28128: LD_INT 1
28130: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28131: LD_VAR 0 6
28135: PPUSH
28136: CALL_OW 247
28140: PUSH
28141: LD_INT 1
28143: DOUBLE
28144: EQUAL
28145: IFTRUE 28149
28147: GO 28727
28149: POP
// begin if GetClass ( i ) = 1 then
28150: LD_VAR 0 6
28154: PPUSH
28155: CALL_OW 257
28159: PUSH
28160: LD_INT 1
28162: EQUAL
28163: IFFALSE 28184
// points := [ 10 , 5 , 3 ] ;
28165: LD_ADDR_VAR 0 9
28169: PUSH
28170: LD_INT 10
28172: PUSH
28173: LD_INT 5
28175: PUSH
28176: LD_INT 3
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: LIST
28183: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28184: LD_VAR 0 6
28188: PPUSH
28189: CALL_OW 257
28193: PUSH
28194: LD_INT 2
28196: PUSH
28197: LD_INT 3
28199: PUSH
28200: LD_INT 4
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: LIST
28207: IN
28208: IFFALSE 28229
// points := [ 3 , 2 , 1 ] ;
28210: LD_ADDR_VAR 0 9
28214: PUSH
28215: LD_INT 3
28217: PUSH
28218: LD_INT 2
28220: PUSH
28221: LD_INT 1
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: LIST
28228: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28229: LD_VAR 0 6
28233: PPUSH
28234: CALL_OW 257
28238: PUSH
28239: LD_INT 5
28241: EQUAL
28242: IFFALSE 28263
// points := [ 130 , 5 , 2 ] ;
28244: LD_ADDR_VAR 0 9
28248: PUSH
28249: LD_INT 130
28251: PUSH
28252: LD_INT 5
28254: PUSH
28255: LD_INT 2
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: LIST
28262: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28263: LD_VAR 0 6
28267: PPUSH
28268: CALL_OW 257
28272: PUSH
28273: LD_INT 8
28275: EQUAL
28276: IFFALSE 28297
// points := [ 35 , 35 , 30 ] ;
28278: LD_ADDR_VAR 0 9
28282: PUSH
28283: LD_INT 35
28285: PUSH
28286: LD_INT 35
28288: PUSH
28289: LD_INT 30
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: LIST
28296: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28297: LD_VAR 0 6
28301: PPUSH
28302: CALL_OW 257
28306: PUSH
28307: LD_INT 9
28309: EQUAL
28310: IFFALSE 28331
// points := [ 20 , 55 , 40 ] ;
28312: LD_ADDR_VAR 0 9
28316: PUSH
28317: LD_INT 20
28319: PUSH
28320: LD_INT 55
28322: PUSH
28323: LD_INT 40
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: LIST
28330: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28331: LD_VAR 0 6
28335: PPUSH
28336: CALL_OW 257
28340: PUSH
28341: LD_INT 12
28343: PUSH
28344: LD_INT 16
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: IN
28351: IFFALSE 28372
// points := [ 5 , 3 , 2 ] ;
28353: LD_ADDR_VAR 0 9
28357: PUSH
28358: LD_INT 5
28360: PUSH
28361: LD_INT 3
28363: PUSH
28364: LD_INT 2
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: LIST
28371: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28372: LD_VAR 0 6
28376: PPUSH
28377: CALL_OW 257
28381: PUSH
28382: LD_INT 17
28384: EQUAL
28385: IFFALSE 28406
// points := [ 100 , 50 , 75 ] ;
28387: LD_ADDR_VAR 0 9
28391: PUSH
28392: LD_INT 100
28394: PUSH
28395: LD_INT 50
28397: PUSH
28398: LD_INT 75
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: LIST
28405: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28406: LD_VAR 0 6
28410: PPUSH
28411: CALL_OW 257
28415: PUSH
28416: LD_INT 15
28418: EQUAL
28419: IFFALSE 28440
// points := [ 10 , 5 , 3 ] ;
28421: LD_ADDR_VAR 0 9
28425: PUSH
28426: LD_INT 10
28428: PUSH
28429: LD_INT 5
28431: PUSH
28432: LD_INT 3
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: LIST
28439: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28440: LD_VAR 0 6
28444: PPUSH
28445: CALL_OW 257
28449: PUSH
28450: LD_INT 14
28452: EQUAL
28453: IFFALSE 28474
// points := [ 10 , 0 , 0 ] ;
28455: LD_ADDR_VAR 0 9
28459: PUSH
28460: LD_INT 10
28462: PUSH
28463: LD_INT 0
28465: PUSH
28466: LD_INT 0
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: LIST
28473: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28474: LD_VAR 0 6
28478: PPUSH
28479: CALL_OW 257
28483: PUSH
28484: LD_INT 11
28486: EQUAL
28487: IFFALSE 28508
// points := [ 30 , 10 , 5 ] ;
28489: LD_ADDR_VAR 0 9
28493: PUSH
28494: LD_INT 30
28496: PUSH
28497: LD_INT 10
28499: PUSH
28500: LD_INT 5
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: LIST
28507: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28508: LD_VAR 0 1
28512: PPUSH
28513: LD_INT 5
28515: PPUSH
28516: CALL_OW 321
28520: PUSH
28521: LD_INT 2
28523: EQUAL
28524: IFFALSE 28541
// bpoints := bpoints * 1.8 ;
28526: LD_ADDR_VAR 0 10
28530: PUSH
28531: LD_VAR 0 10
28535: PUSH
28536: LD_REAL  1.80000000000000E+0000
28539: MUL
28540: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28541: LD_VAR 0 6
28545: PPUSH
28546: CALL_OW 257
28550: PUSH
28551: LD_INT 1
28553: PUSH
28554: LD_INT 2
28556: PUSH
28557: LD_INT 3
28559: PUSH
28560: LD_INT 4
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: IN
28569: PUSH
28570: LD_VAR 0 1
28574: PPUSH
28575: LD_INT 51
28577: PPUSH
28578: CALL_OW 321
28582: PUSH
28583: LD_INT 2
28585: EQUAL
28586: AND
28587: IFFALSE 28604
// bpoints := bpoints * 1.2 ;
28589: LD_ADDR_VAR 0 10
28593: PUSH
28594: LD_VAR 0 10
28598: PUSH
28599: LD_REAL  1.20000000000000E+0000
28602: MUL
28603: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28604: LD_VAR 0 6
28608: PPUSH
28609: CALL_OW 257
28613: PUSH
28614: LD_INT 5
28616: PUSH
28617: LD_INT 7
28619: PUSH
28620: LD_INT 9
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: LIST
28627: IN
28628: PUSH
28629: LD_VAR 0 1
28633: PPUSH
28634: LD_INT 52
28636: PPUSH
28637: CALL_OW 321
28641: PUSH
28642: LD_INT 2
28644: EQUAL
28645: AND
28646: IFFALSE 28663
// bpoints := bpoints * 1.5 ;
28648: LD_ADDR_VAR 0 10
28652: PUSH
28653: LD_VAR 0 10
28657: PUSH
28658: LD_REAL  1.50000000000000E+0000
28661: MUL
28662: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28663: LD_VAR 0 1
28667: PPUSH
28668: LD_INT 66
28670: PPUSH
28671: CALL_OW 321
28675: PUSH
28676: LD_INT 2
28678: EQUAL
28679: IFFALSE 28696
// bpoints := bpoints * 1.1 ;
28681: LD_ADDR_VAR 0 10
28685: PUSH
28686: LD_VAR 0 10
28690: PUSH
28691: LD_REAL  1.10000000000000E+0000
28694: MUL
28695: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28696: LD_ADDR_VAR 0 10
28700: PUSH
28701: LD_VAR 0 10
28705: PUSH
28706: LD_VAR 0 6
28710: PPUSH
28711: LD_INT 1
28713: PPUSH
28714: CALL_OW 259
28718: PUSH
28719: LD_REAL  1.15000000000000E+0000
28722: MUL
28723: MUL
28724: ST_TO_ADDR
// end ; unit_vehicle :
28725: GO 29555
28727: LD_INT 2
28729: DOUBLE
28730: EQUAL
28731: IFTRUE 28735
28733: GO 29543
28735: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28736: LD_VAR 0 6
28740: PPUSH
28741: CALL_OW 264
28745: PUSH
28746: LD_INT 2
28748: PUSH
28749: LD_INT 42
28751: PUSH
28752: LD_INT 24
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: LIST
28759: IN
28760: IFFALSE 28781
// points := [ 25 , 5 , 3 ] ;
28762: LD_ADDR_VAR 0 9
28766: PUSH
28767: LD_INT 25
28769: PUSH
28770: LD_INT 5
28772: PUSH
28773: LD_INT 3
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: LIST
28780: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28781: LD_VAR 0 6
28785: PPUSH
28786: CALL_OW 264
28790: PUSH
28791: LD_INT 4
28793: PUSH
28794: LD_INT 43
28796: PUSH
28797: LD_INT 25
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: LIST
28804: IN
28805: IFFALSE 28826
// points := [ 40 , 15 , 5 ] ;
28807: LD_ADDR_VAR 0 9
28811: PUSH
28812: LD_INT 40
28814: PUSH
28815: LD_INT 15
28817: PUSH
28818: LD_INT 5
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: LIST
28825: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28826: LD_VAR 0 6
28830: PPUSH
28831: CALL_OW 264
28835: PUSH
28836: LD_INT 3
28838: PUSH
28839: LD_INT 23
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: IN
28846: IFFALSE 28867
// points := [ 7 , 25 , 8 ] ;
28848: LD_ADDR_VAR 0 9
28852: PUSH
28853: LD_INT 7
28855: PUSH
28856: LD_INT 25
28858: PUSH
28859: LD_INT 8
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: LIST
28866: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28867: LD_VAR 0 6
28871: PPUSH
28872: CALL_OW 264
28876: PUSH
28877: LD_INT 5
28879: PUSH
28880: LD_INT 27
28882: PUSH
28883: LD_INT 44
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: LIST
28890: IN
28891: IFFALSE 28912
// points := [ 14 , 50 , 16 ] ;
28893: LD_ADDR_VAR 0 9
28897: PUSH
28898: LD_INT 14
28900: PUSH
28901: LD_INT 50
28903: PUSH
28904: LD_INT 16
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: LIST
28911: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28912: LD_VAR 0 6
28916: PPUSH
28917: CALL_OW 264
28921: PUSH
28922: LD_INT 6
28924: PUSH
28925: LD_INT 46
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: IN
28932: IFFALSE 28953
// points := [ 32 , 120 , 70 ] ;
28934: LD_ADDR_VAR 0 9
28938: PUSH
28939: LD_INT 32
28941: PUSH
28942: LD_INT 120
28944: PUSH
28945: LD_INT 70
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: LIST
28952: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28953: LD_VAR 0 6
28957: PPUSH
28958: CALL_OW 264
28962: PUSH
28963: LD_INT 7
28965: PUSH
28966: LD_INT 28
28968: PUSH
28969: LD_INT 45
28971: PUSH
28972: LD_EXP 44
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: IN
28983: IFFALSE 29004
// points := [ 35 , 20 , 45 ] ;
28985: LD_ADDR_VAR 0 9
28989: PUSH
28990: LD_INT 35
28992: PUSH
28993: LD_INT 20
28995: PUSH
28996: LD_INT 45
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: LIST
29003: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29004: LD_VAR 0 6
29008: PPUSH
29009: CALL_OW 264
29013: PUSH
29014: LD_INT 47
29016: PUSH
29017: EMPTY
29018: LIST
29019: IN
29020: IFFALSE 29041
// points := [ 67 , 45 , 75 ] ;
29022: LD_ADDR_VAR 0 9
29026: PUSH
29027: LD_INT 67
29029: PUSH
29030: LD_INT 45
29032: PUSH
29033: LD_INT 75
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: LIST
29040: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29041: LD_VAR 0 6
29045: PPUSH
29046: CALL_OW 264
29050: PUSH
29051: LD_INT 26
29053: PUSH
29054: EMPTY
29055: LIST
29056: IN
29057: IFFALSE 29078
// points := [ 120 , 30 , 80 ] ;
29059: LD_ADDR_VAR 0 9
29063: PUSH
29064: LD_INT 120
29066: PUSH
29067: LD_INT 30
29069: PUSH
29070: LD_INT 80
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: LIST
29077: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29078: LD_VAR 0 6
29082: PPUSH
29083: CALL_OW 264
29087: PUSH
29088: LD_INT 22
29090: PUSH
29091: EMPTY
29092: LIST
29093: IN
29094: IFFALSE 29115
// points := [ 40 , 1 , 1 ] ;
29096: LD_ADDR_VAR 0 9
29100: PUSH
29101: LD_INT 40
29103: PUSH
29104: LD_INT 1
29106: PUSH
29107: LD_INT 1
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: LIST
29114: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29115: LD_VAR 0 6
29119: PPUSH
29120: CALL_OW 264
29124: PUSH
29125: LD_INT 29
29127: PUSH
29128: EMPTY
29129: LIST
29130: IN
29131: IFFALSE 29152
// points := [ 70 , 200 , 400 ] ;
29133: LD_ADDR_VAR 0 9
29137: PUSH
29138: LD_INT 70
29140: PUSH
29141: LD_INT 200
29143: PUSH
29144: LD_INT 400
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: LIST
29151: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29152: LD_VAR 0 6
29156: PPUSH
29157: CALL_OW 264
29161: PUSH
29162: LD_INT 14
29164: PUSH
29165: LD_INT 53
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: IN
29172: IFFALSE 29193
// points := [ 40 , 10 , 20 ] ;
29174: LD_ADDR_VAR 0 9
29178: PUSH
29179: LD_INT 40
29181: PUSH
29182: LD_INT 10
29184: PUSH
29185: LD_INT 20
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: LIST
29192: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29193: LD_VAR 0 6
29197: PPUSH
29198: CALL_OW 264
29202: PUSH
29203: LD_INT 9
29205: PUSH
29206: EMPTY
29207: LIST
29208: IN
29209: IFFALSE 29230
// points := [ 5 , 70 , 20 ] ;
29211: LD_ADDR_VAR 0 9
29215: PUSH
29216: LD_INT 5
29218: PUSH
29219: LD_INT 70
29221: PUSH
29222: LD_INT 20
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: LIST
29229: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29230: LD_VAR 0 6
29234: PPUSH
29235: CALL_OW 264
29239: PUSH
29240: LD_INT 10
29242: PUSH
29243: EMPTY
29244: LIST
29245: IN
29246: IFFALSE 29267
// points := [ 35 , 110 , 70 ] ;
29248: LD_ADDR_VAR 0 9
29252: PUSH
29253: LD_INT 35
29255: PUSH
29256: LD_INT 110
29258: PUSH
29259: LD_INT 70
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: LIST
29266: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29267: LD_VAR 0 6
29271: PPUSH
29272: CALL_OW 265
29276: PUSH
29277: LD_INT 25
29279: EQUAL
29280: IFFALSE 29301
// points := [ 80 , 65 , 100 ] ;
29282: LD_ADDR_VAR 0 9
29286: PUSH
29287: LD_INT 80
29289: PUSH
29290: LD_INT 65
29292: PUSH
29293: LD_INT 100
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: LIST
29300: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29301: LD_VAR 0 6
29305: PPUSH
29306: CALL_OW 263
29310: PUSH
29311: LD_INT 1
29313: EQUAL
29314: IFFALSE 29349
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29316: LD_ADDR_VAR 0 10
29320: PUSH
29321: LD_VAR 0 10
29325: PUSH
29326: LD_VAR 0 6
29330: PPUSH
29331: CALL_OW 311
29335: PPUSH
29336: LD_INT 3
29338: PPUSH
29339: CALL_OW 259
29343: PUSH
29344: LD_INT 4
29346: MUL
29347: MUL
29348: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29349: LD_VAR 0 6
29353: PPUSH
29354: CALL_OW 263
29358: PUSH
29359: LD_INT 2
29361: EQUAL
29362: IFFALSE 29413
// begin j := IsControledBy ( i ) ;
29364: LD_ADDR_VAR 0 7
29368: PUSH
29369: LD_VAR 0 6
29373: PPUSH
29374: CALL_OW 312
29378: ST_TO_ADDR
// if j then
29379: LD_VAR 0 7
29383: IFFALSE 29413
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29385: LD_ADDR_VAR 0 10
29389: PUSH
29390: LD_VAR 0 10
29394: PUSH
29395: LD_VAR 0 7
29399: PPUSH
29400: LD_INT 3
29402: PPUSH
29403: CALL_OW 259
29407: PUSH
29408: LD_INT 3
29410: MUL
29411: MUL
29412: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29413: LD_VAR 0 6
29417: PPUSH
29418: CALL_OW 264
29422: PUSH
29423: LD_INT 5
29425: PUSH
29426: LD_INT 6
29428: PUSH
29429: LD_INT 46
29431: PUSH
29432: LD_INT 44
29434: PUSH
29435: LD_INT 47
29437: PUSH
29438: LD_INT 45
29440: PUSH
29441: LD_INT 28
29443: PUSH
29444: LD_INT 7
29446: PUSH
29447: LD_INT 27
29449: PUSH
29450: LD_INT 29
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: IN
29465: PUSH
29466: LD_VAR 0 1
29470: PPUSH
29471: LD_INT 52
29473: PPUSH
29474: CALL_OW 321
29478: PUSH
29479: LD_INT 2
29481: EQUAL
29482: AND
29483: IFFALSE 29500
// bpoints := bpoints * 1.2 ;
29485: LD_ADDR_VAR 0 10
29489: PUSH
29490: LD_VAR 0 10
29494: PUSH
29495: LD_REAL  1.20000000000000E+0000
29498: MUL
29499: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29500: LD_VAR 0 6
29504: PPUSH
29505: CALL_OW 264
29509: PUSH
29510: LD_INT 6
29512: PUSH
29513: LD_INT 46
29515: PUSH
29516: LD_INT 47
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: LIST
29523: IN
29524: IFFALSE 29541
// bpoints := bpoints * 1.2 ;
29526: LD_ADDR_VAR 0 10
29530: PUSH
29531: LD_VAR 0 10
29535: PUSH
29536: LD_REAL  1.20000000000000E+0000
29539: MUL
29540: ST_TO_ADDR
// end ; unit_building :
29541: GO 29555
29543: LD_INT 3
29545: DOUBLE
29546: EQUAL
29547: IFTRUE 29551
29549: GO 29554
29551: POP
// ; end ;
29552: GO 29555
29554: POP
// for j = 1 to 3 do
29555: LD_ADDR_VAR 0 7
29559: PUSH
29560: DOUBLE
29561: LD_INT 1
29563: DEC
29564: ST_TO_ADDR
29565: LD_INT 3
29567: PUSH
29568: FOR_TO
29569: IFFALSE 29622
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29571: LD_ADDR_VAR 0 5
29575: PUSH
29576: LD_VAR 0 5
29580: PPUSH
29581: LD_VAR 0 7
29585: PPUSH
29586: LD_VAR 0 5
29590: PUSH
29591: LD_VAR 0 7
29595: ARRAY
29596: PUSH
29597: LD_VAR 0 9
29601: PUSH
29602: LD_VAR 0 7
29606: ARRAY
29607: PUSH
29608: LD_VAR 0 10
29612: MUL
29613: PLUS
29614: PPUSH
29615: CALL_OW 1
29619: ST_TO_ADDR
29620: GO 29568
29622: POP
29623: POP
// end ;
29624: GO 28101
29626: POP
29627: POP
// result := Replace ( result , 4 , tmp ) ;
29628: LD_ADDR_VAR 0 5
29632: PUSH
29633: LD_VAR 0 5
29637: PPUSH
29638: LD_INT 4
29640: PPUSH
29641: LD_VAR 0 8
29645: PPUSH
29646: CALL_OW 1
29650: ST_TO_ADDR
// end ;
29651: LD_VAR 0 5
29655: RET
// export function DangerAtRange ( unit , range ) ; begin
29656: LD_INT 0
29658: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29659: LD_ADDR_VAR 0 3
29663: PUSH
29664: LD_VAR 0 1
29668: PPUSH
29669: CALL_OW 255
29673: PPUSH
29674: LD_VAR 0 1
29678: PPUSH
29679: CALL_OW 250
29683: PPUSH
29684: LD_VAR 0 1
29688: PPUSH
29689: CALL_OW 251
29693: PPUSH
29694: LD_VAR 0 2
29698: PPUSH
29699: CALL 27953 0 4
29703: ST_TO_ADDR
// end ;
29704: LD_VAR 0 3
29708: RET
// export function DangerInArea ( side , area ) ; begin
29709: LD_INT 0
29711: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29712: LD_ADDR_VAR 0 3
29716: PUSH
29717: LD_VAR 0 2
29721: PPUSH
29722: LD_INT 81
29724: PUSH
29725: LD_VAR 0 1
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PPUSH
29734: CALL_OW 70
29738: ST_TO_ADDR
// end ;
29739: LD_VAR 0 3
29743: RET
// export function IsExtension ( b ) ; begin
29744: LD_INT 0
29746: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29747: LD_ADDR_VAR 0 2
29751: PUSH
29752: LD_VAR 0 1
29756: PUSH
29757: LD_INT 23
29759: PUSH
29760: LD_INT 20
29762: PUSH
29763: LD_INT 22
29765: PUSH
29766: LD_INT 17
29768: PUSH
29769: LD_INT 24
29771: PUSH
29772: LD_INT 21
29774: PUSH
29775: LD_INT 19
29777: PUSH
29778: LD_INT 16
29780: PUSH
29781: LD_INT 25
29783: PUSH
29784: LD_INT 18
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: IN
29799: ST_TO_ADDR
// end ;
29800: LD_VAR 0 2
29804: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29805: LD_INT 0
29807: PPUSH
29808: PPUSH
29809: PPUSH
// result := [ ] ;
29810: LD_ADDR_VAR 0 4
29814: PUSH
29815: EMPTY
29816: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29817: LD_ADDR_VAR 0 5
29821: PUSH
29822: LD_VAR 0 2
29826: PPUSH
29827: LD_INT 21
29829: PUSH
29830: LD_INT 3
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PPUSH
29837: CALL_OW 70
29841: ST_TO_ADDR
// if not tmp then
29842: LD_VAR 0 5
29846: NOT
29847: IFFALSE 29851
// exit ;
29849: GO 29915
// if checkLink then
29851: LD_VAR 0 3
29855: IFFALSE 29905
// begin for i in tmp do
29857: LD_ADDR_VAR 0 6
29861: PUSH
29862: LD_VAR 0 5
29866: PUSH
29867: FOR_IN
29868: IFFALSE 29903
// if GetBase ( i ) <> base then
29870: LD_VAR 0 6
29874: PPUSH
29875: CALL_OW 274
29879: PUSH
29880: LD_VAR 0 1
29884: NONEQUAL
29885: IFFALSE 29901
// ComLinkToBase ( base , i ) ;
29887: LD_VAR 0 1
29891: PPUSH
29892: LD_VAR 0 6
29896: PPUSH
29897: CALL_OW 169
29901: GO 29867
29903: POP
29904: POP
// end ; result := tmp ;
29905: LD_ADDR_VAR 0 4
29909: PUSH
29910: LD_VAR 0 5
29914: ST_TO_ADDR
// end ;
29915: LD_VAR 0 4
29919: RET
// export function ComComplete ( units , b ) ; var i ; begin
29920: LD_INT 0
29922: PPUSH
29923: PPUSH
// if not units then
29924: LD_VAR 0 1
29928: NOT
29929: IFFALSE 29933
// exit ;
29931: GO 30023
// for i in units do
29933: LD_ADDR_VAR 0 4
29937: PUSH
29938: LD_VAR 0 1
29942: PUSH
29943: FOR_IN
29944: IFFALSE 30021
// if BuildingStatus ( b ) = bs_build then
29946: LD_VAR 0 2
29950: PPUSH
29951: CALL_OW 461
29955: PUSH
29956: LD_INT 1
29958: EQUAL
29959: IFFALSE 30019
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29961: LD_VAR 0 4
29965: PPUSH
29966: LD_STRING h
29968: PUSH
29969: LD_VAR 0 2
29973: PPUSH
29974: CALL_OW 250
29978: PUSH
29979: LD_VAR 0 2
29983: PPUSH
29984: CALL_OW 251
29988: PUSH
29989: LD_VAR 0 2
29993: PUSH
29994: LD_INT 0
29996: PUSH
29997: LD_INT 0
29999: PUSH
30000: LD_INT 0
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: PUSH
30012: EMPTY
30013: LIST
30014: PPUSH
30015: CALL_OW 446
30019: GO 29943
30021: POP
30022: POP
// end ;
30023: LD_VAR 0 3
30027: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30028: LD_INT 0
30030: PPUSH
30031: PPUSH
30032: PPUSH
30033: PPUSH
30034: PPUSH
30035: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30036: LD_VAR 0 1
30040: NOT
30041: PUSH
30042: LD_VAR 0 1
30046: PPUSH
30047: CALL_OW 263
30051: PUSH
30052: LD_INT 2
30054: NONEQUAL
30055: OR
30056: IFFALSE 30060
// exit ;
30058: GO 30376
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30060: LD_ADDR_VAR 0 6
30064: PUSH
30065: LD_INT 22
30067: PUSH
30068: LD_VAR 0 1
30072: PPUSH
30073: CALL_OW 255
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 2
30084: PUSH
30085: LD_INT 30
30087: PUSH
30088: LD_INT 36
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 34
30097: PUSH
30098: LD_INT 31
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: LIST
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PPUSH
30114: CALL_OW 69
30118: ST_TO_ADDR
// if not tmp then
30119: LD_VAR 0 6
30123: NOT
30124: IFFALSE 30128
// exit ;
30126: GO 30376
// result := [ ] ;
30128: LD_ADDR_VAR 0 2
30132: PUSH
30133: EMPTY
30134: ST_TO_ADDR
// for i in tmp do
30135: LD_ADDR_VAR 0 3
30139: PUSH
30140: LD_VAR 0 6
30144: PUSH
30145: FOR_IN
30146: IFFALSE 30217
// begin t := UnitsInside ( i ) ;
30148: LD_ADDR_VAR 0 4
30152: PUSH
30153: LD_VAR 0 3
30157: PPUSH
30158: CALL_OW 313
30162: ST_TO_ADDR
// if t then
30163: LD_VAR 0 4
30167: IFFALSE 30215
// for j in t do
30169: LD_ADDR_VAR 0 7
30173: PUSH
30174: LD_VAR 0 4
30178: PUSH
30179: FOR_IN
30180: IFFALSE 30213
// result := Replace ( result , result + 1 , j ) ;
30182: LD_ADDR_VAR 0 2
30186: PUSH
30187: LD_VAR 0 2
30191: PPUSH
30192: LD_VAR 0 2
30196: PUSH
30197: LD_INT 1
30199: PLUS
30200: PPUSH
30201: LD_VAR 0 7
30205: PPUSH
30206: CALL_OW 1
30210: ST_TO_ADDR
30211: GO 30179
30213: POP
30214: POP
// end ;
30215: GO 30145
30217: POP
30218: POP
// if not result then
30219: LD_VAR 0 2
30223: NOT
30224: IFFALSE 30228
// exit ;
30226: GO 30376
// mech := result [ 1 ] ;
30228: LD_ADDR_VAR 0 5
30232: PUSH
30233: LD_VAR 0 2
30237: PUSH
30238: LD_INT 1
30240: ARRAY
30241: ST_TO_ADDR
// if result > 1 then
30242: LD_VAR 0 2
30246: PUSH
30247: LD_INT 1
30249: GREATER
30250: IFFALSE 30362
// begin for i = 2 to result do
30252: LD_ADDR_VAR 0 3
30256: PUSH
30257: DOUBLE
30258: LD_INT 2
30260: DEC
30261: ST_TO_ADDR
30262: LD_VAR 0 2
30266: PUSH
30267: FOR_TO
30268: IFFALSE 30360
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30270: LD_ADDR_VAR 0 4
30274: PUSH
30275: LD_VAR 0 2
30279: PUSH
30280: LD_VAR 0 3
30284: ARRAY
30285: PPUSH
30286: LD_INT 3
30288: PPUSH
30289: CALL_OW 259
30293: PUSH
30294: LD_VAR 0 2
30298: PUSH
30299: LD_VAR 0 3
30303: ARRAY
30304: PPUSH
30305: CALL_OW 432
30309: MINUS
30310: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30311: LD_VAR 0 4
30315: PUSH
30316: LD_VAR 0 5
30320: PPUSH
30321: LD_INT 3
30323: PPUSH
30324: CALL_OW 259
30328: PUSH
30329: LD_VAR 0 5
30333: PPUSH
30334: CALL_OW 432
30338: MINUS
30339: GREATEREQUAL
30340: IFFALSE 30358
// mech := result [ i ] ;
30342: LD_ADDR_VAR 0 5
30346: PUSH
30347: LD_VAR 0 2
30351: PUSH
30352: LD_VAR 0 3
30356: ARRAY
30357: ST_TO_ADDR
// end ;
30358: GO 30267
30360: POP
30361: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30362: LD_VAR 0 1
30366: PPUSH
30367: LD_VAR 0 5
30371: PPUSH
30372: CALL_OW 135
// end ;
30376: LD_VAR 0 2
30380: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30381: LD_INT 0
30383: PPUSH
30384: PPUSH
30385: PPUSH
30386: PPUSH
30387: PPUSH
30388: PPUSH
30389: PPUSH
30390: PPUSH
30391: PPUSH
30392: PPUSH
30393: PPUSH
30394: PPUSH
30395: PPUSH
// result := [ ] ;
30396: LD_ADDR_VAR 0 7
30400: PUSH
30401: EMPTY
30402: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30403: LD_VAR 0 1
30407: PPUSH
30408: CALL_OW 266
30412: PUSH
30413: LD_INT 0
30415: PUSH
30416: LD_INT 1
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: IN
30423: NOT
30424: IFFALSE 30428
// exit ;
30426: GO 32062
// if name then
30428: LD_VAR 0 3
30432: IFFALSE 30448
// SetBName ( base_dep , name ) ;
30434: LD_VAR 0 1
30438: PPUSH
30439: LD_VAR 0 3
30443: PPUSH
30444: CALL_OW 500
// base := GetBase ( base_dep ) ;
30448: LD_ADDR_VAR 0 15
30452: PUSH
30453: LD_VAR 0 1
30457: PPUSH
30458: CALL_OW 274
30462: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30463: LD_ADDR_VAR 0 16
30467: PUSH
30468: LD_VAR 0 1
30472: PPUSH
30473: CALL_OW 255
30477: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30478: LD_ADDR_VAR 0 17
30482: PUSH
30483: LD_VAR 0 1
30487: PPUSH
30488: CALL_OW 248
30492: ST_TO_ADDR
// if sources then
30493: LD_VAR 0 5
30497: IFFALSE 30544
// for i = 1 to 3 do
30499: LD_ADDR_VAR 0 8
30503: PUSH
30504: DOUBLE
30505: LD_INT 1
30507: DEC
30508: ST_TO_ADDR
30509: LD_INT 3
30511: PUSH
30512: FOR_TO
30513: IFFALSE 30542
// AddResourceType ( base , i , sources [ i ] ) ;
30515: LD_VAR 0 15
30519: PPUSH
30520: LD_VAR 0 8
30524: PPUSH
30525: LD_VAR 0 5
30529: PUSH
30530: LD_VAR 0 8
30534: ARRAY
30535: PPUSH
30536: CALL_OW 276
30540: GO 30512
30542: POP
30543: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30544: LD_ADDR_VAR 0 18
30548: PUSH
30549: LD_VAR 0 15
30553: PPUSH
30554: LD_VAR 0 2
30558: PPUSH
30559: LD_INT 1
30561: PPUSH
30562: CALL 29805 0 3
30566: ST_TO_ADDR
// InitHc ;
30567: CALL_OW 19
// InitUc ;
30571: CALL_OW 18
// uc_side := side ;
30575: LD_ADDR_OWVAR 20
30579: PUSH
30580: LD_VAR 0 16
30584: ST_TO_ADDR
// uc_nation := nation ;
30585: LD_ADDR_OWVAR 21
30589: PUSH
30590: LD_VAR 0 17
30594: ST_TO_ADDR
// if buildings then
30595: LD_VAR 0 18
30599: IFFALSE 31921
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30601: LD_ADDR_VAR 0 19
30605: PUSH
30606: LD_VAR 0 18
30610: PPUSH
30611: LD_INT 2
30613: PUSH
30614: LD_INT 30
30616: PUSH
30617: LD_INT 29
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 30
30626: PUSH
30627: LD_INT 30
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: LIST
30638: PPUSH
30639: CALL_OW 72
30643: ST_TO_ADDR
// if tmp then
30644: LD_VAR 0 19
30648: IFFALSE 30696
// for i in tmp do
30650: LD_ADDR_VAR 0 8
30654: PUSH
30655: LD_VAR 0 19
30659: PUSH
30660: FOR_IN
30661: IFFALSE 30694
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30663: LD_VAR 0 8
30667: PPUSH
30668: CALL_OW 250
30672: PPUSH
30673: LD_VAR 0 8
30677: PPUSH
30678: CALL_OW 251
30682: PPUSH
30683: LD_VAR 0 16
30687: PPUSH
30688: CALL_OW 441
30692: GO 30660
30694: POP
30695: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30696: LD_VAR 0 18
30700: PPUSH
30701: LD_INT 2
30703: PUSH
30704: LD_INT 30
30706: PUSH
30707: LD_INT 32
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 30
30716: PUSH
30717: LD_INT 33
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: LIST
30728: PPUSH
30729: CALL_OW 72
30733: IFFALSE 30821
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30735: LD_ADDR_VAR 0 8
30739: PUSH
30740: LD_VAR 0 18
30744: PPUSH
30745: LD_INT 2
30747: PUSH
30748: LD_INT 30
30750: PUSH
30751: LD_INT 32
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 30
30760: PUSH
30761: LD_INT 33
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: LIST
30772: PPUSH
30773: CALL_OW 72
30777: PUSH
30778: FOR_IN
30779: IFFALSE 30819
// begin if not GetBWeapon ( i ) then
30781: LD_VAR 0 8
30785: PPUSH
30786: CALL_OW 269
30790: NOT
30791: IFFALSE 30817
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30793: LD_VAR 0 8
30797: PPUSH
30798: LD_VAR 0 8
30802: PPUSH
30803: LD_VAR 0 2
30807: PPUSH
30808: CALL 32067 0 2
30812: PPUSH
30813: CALL_OW 431
// end ;
30817: GO 30778
30819: POP
30820: POP
// end ; for i = 1 to personel do
30821: LD_ADDR_VAR 0 8
30825: PUSH
30826: DOUBLE
30827: LD_INT 1
30829: DEC
30830: ST_TO_ADDR
30831: LD_VAR 0 6
30835: PUSH
30836: FOR_TO
30837: IFFALSE 31901
// begin if i > 4 then
30839: LD_VAR 0 8
30843: PUSH
30844: LD_INT 4
30846: GREATER
30847: IFFALSE 30851
// break ;
30849: GO 31901
// case i of 1 :
30851: LD_VAR 0 8
30855: PUSH
30856: LD_INT 1
30858: DOUBLE
30859: EQUAL
30860: IFTRUE 30864
30862: GO 30944
30864: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30865: LD_ADDR_VAR 0 12
30869: PUSH
30870: LD_VAR 0 18
30874: PPUSH
30875: LD_INT 22
30877: PUSH
30878: LD_VAR 0 16
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 58
30889: PUSH
30890: EMPTY
30891: LIST
30892: PUSH
30893: LD_INT 2
30895: PUSH
30896: LD_INT 30
30898: PUSH
30899: LD_INT 32
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 30
30908: PUSH
30909: LD_INT 4
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 30
30918: PUSH
30919: LD_INT 5
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: LIST
30936: PPUSH
30937: CALL_OW 72
30941: ST_TO_ADDR
30942: GO 31166
30944: LD_INT 2
30946: DOUBLE
30947: EQUAL
30948: IFTRUE 30952
30950: GO 31014
30952: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30953: LD_ADDR_VAR 0 12
30957: PUSH
30958: LD_VAR 0 18
30962: PPUSH
30963: LD_INT 22
30965: PUSH
30966: LD_VAR 0 16
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 2
30977: PUSH
30978: LD_INT 30
30980: PUSH
30981: LD_INT 0
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 30
30990: PUSH
30991: LD_INT 1
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: LIST
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PPUSH
31007: CALL_OW 72
31011: ST_TO_ADDR
31012: GO 31166
31014: LD_INT 3
31016: DOUBLE
31017: EQUAL
31018: IFTRUE 31022
31020: GO 31084
31022: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31023: LD_ADDR_VAR 0 12
31027: PUSH
31028: LD_VAR 0 18
31032: PPUSH
31033: LD_INT 22
31035: PUSH
31036: LD_VAR 0 16
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: LD_INT 2
31047: PUSH
31048: LD_INT 30
31050: PUSH
31051: LD_INT 2
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 30
31060: PUSH
31061: LD_INT 3
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: LIST
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PPUSH
31077: CALL_OW 72
31081: ST_TO_ADDR
31082: GO 31166
31084: LD_INT 4
31086: DOUBLE
31087: EQUAL
31088: IFTRUE 31092
31090: GO 31165
31092: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31093: LD_ADDR_VAR 0 12
31097: PUSH
31098: LD_VAR 0 18
31102: PPUSH
31103: LD_INT 22
31105: PUSH
31106: LD_VAR 0 16
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 2
31117: PUSH
31118: LD_INT 30
31120: PUSH
31121: LD_INT 6
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 30
31130: PUSH
31131: LD_INT 7
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 30
31140: PUSH
31141: LD_INT 8
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PPUSH
31158: CALL_OW 72
31162: ST_TO_ADDR
31163: GO 31166
31165: POP
// if i = 1 then
31166: LD_VAR 0 8
31170: PUSH
31171: LD_INT 1
31173: EQUAL
31174: IFFALSE 31285
// begin tmp := [ ] ;
31176: LD_ADDR_VAR 0 19
31180: PUSH
31181: EMPTY
31182: ST_TO_ADDR
// for j in f do
31183: LD_ADDR_VAR 0 9
31187: PUSH
31188: LD_VAR 0 12
31192: PUSH
31193: FOR_IN
31194: IFFALSE 31267
// if GetBType ( j ) = b_bunker then
31196: LD_VAR 0 9
31200: PPUSH
31201: CALL_OW 266
31205: PUSH
31206: LD_INT 32
31208: EQUAL
31209: IFFALSE 31236
// tmp := Insert ( tmp , 1 , j ) else
31211: LD_ADDR_VAR 0 19
31215: PUSH
31216: LD_VAR 0 19
31220: PPUSH
31221: LD_INT 1
31223: PPUSH
31224: LD_VAR 0 9
31228: PPUSH
31229: CALL_OW 2
31233: ST_TO_ADDR
31234: GO 31265
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31236: LD_ADDR_VAR 0 19
31240: PUSH
31241: LD_VAR 0 19
31245: PPUSH
31246: LD_VAR 0 19
31250: PUSH
31251: LD_INT 1
31253: PLUS
31254: PPUSH
31255: LD_VAR 0 9
31259: PPUSH
31260: CALL_OW 2
31264: ST_TO_ADDR
31265: GO 31193
31267: POP
31268: POP
// if tmp then
31269: LD_VAR 0 19
31273: IFFALSE 31285
// f := tmp ;
31275: LD_ADDR_VAR 0 12
31279: PUSH
31280: LD_VAR 0 19
31284: ST_TO_ADDR
// end ; x := personel [ i ] ;
31285: LD_ADDR_VAR 0 13
31289: PUSH
31290: LD_VAR 0 6
31294: PUSH
31295: LD_VAR 0 8
31299: ARRAY
31300: ST_TO_ADDR
// if x = - 1 then
31301: LD_VAR 0 13
31305: PUSH
31306: LD_INT 1
31308: NEG
31309: EQUAL
31310: IFFALSE 31519
// begin for j in f do
31312: LD_ADDR_VAR 0 9
31316: PUSH
31317: LD_VAR 0 12
31321: PUSH
31322: FOR_IN
31323: IFFALSE 31515
// repeat InitHc ;
31325: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31329: LD_VAR 0 9
31333: PPUSH
31334: CALL_OW 266
31338: PUSH
31339: LD_INT 5
31341: EQUAL
31342: IFFALSE 31412
// begin if UnitsInside ( j ) < 3 then
31344: LD_VAR 0 9
31348: PPUSH
31349: CALL_OW 313
31353: PUSH
31354: LD_INT 3
31356: LESS
31357: IFFALSE 31393
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31359: LD_INT 0
31361: PPUSH
31362: LD_INT 5
31364: PUSH
31365: LD_INT 8
31367: PUSH
31368: LD_INT 9
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: LIST
31375: PUSH
31376: LD_VAR 0 17
31380: ARRAY
31381: PPUSH
31382: LD_VAR 0 4
31386: PPUSH
31387: CALL_OW 380
31391: GO 31410
// PrepareHuman ( false , i , skill ) ;
31393: LD_INT 0
31395: PPUSH
31396: LD_VAR 0 8
31400: PPUSH
31401: LD_VAR 0 4
31405: PPUSH
31406: CALL_OW 380
// end else
31410: GO 31429
// PrepareHuman ( false , i , skill ) ;
31412: LD_INT 0
31414: PPUSH
31415: LD_VAR 0 8
31419: PPUSH
31420: LD_VAR 0 4
31424: PPUSH
31425: CALL_OW 380
// un := CreateHuman ;
31429: LD_ADDR_VAR 0 14
31433: PUSH
31434: CALL_OW 44
31438: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31439: LD_ADDR_VAR 0 7
31443: PUSH
31444: LD_VAR 0 7
31448: PPUSH
31449: LD_INT 1
31451: PPUSH
31452: LD_VAR 0 14
31456: PPUSH
31457: CALL_OW 2
31461: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31462: LD_VAR 0 14
31466: PPUSH
31467: LD_VAR 0 9
31471: PPUSH
31472: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31476: LD_VAR 0 9
31480: PPUSH
31481: CALL_OW 313
31485: PUSH
31486: LD_INT 6
31488: EQUAL
31489: PUSH
31490: LD_VAR 0 9
31494: PPUSH
31495: CALL_OW 266
31499: PUSH
31500: LD_INT 32
31502: PUSH
31503: LD_INT 31
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: IN
31510: OR
31511: IFFALSE 31325
31513: GO 31322
31515: POP
31516: POP
// end else
31517: GO 31899
// for j = 1 to x do
31519: LD_ADDR_VAR 0 9
31523: PUSH
31524: DOUBLE
31525: LD_INT 1
31527: DEC
31528: ST_TO_ADDR
31529: LD_VAR 0 13
31533: PUSH
31534: FOR_TO
31535: IFFALSE 31897
// begin InitHc ;
31537: CALL_OW 19
// if not f then
31541: LD_VAR 0 12
31545: NOT
31546: IFFALSE 31635
// begin PrepareHuman ( false , i , skill ) ;
31548: LD_INT 0
31550: PPUSH
31551: LD_VAR 0 8
31555: PPUSH
31556: LD_VAR 0 4
31560: PPUSH
31561: CALL_OW 380
// un := CreateHuman ;
31565: LD_ADDR_VAR 0 14
31569: PUSH
31570: CALL_OW 44
31574: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31575: LD_ADDR_VAR 0 7
31579: PUSH
31580: LD_VAR 0 7
31584: PPUSH
31585: LD_INT 1
31587: PPUSH
31588: LD_VAR 0 14
31592: PPUSH
31593: CALL_OW 2
31597: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31598: LD_VAR 0 14
31602: PPUSH
31603: LD_VAR 0 1
31607: PPUSH
31608: CALL_OW 250
31612: PPUSH
31613: LD_VAR 0 1
31617: PPUSH
31618: CALL_OW 251
31622: PPUSH
31623: LD_INT 10
31625: PPUSH
31626: LD_INT 0
31628: PPUSH
31629: CALL_OW 50
// continue ;
31633: GO 31534
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31635: LD_VAR 0 12
31639: PUSH
31640: LD_INT 1
31642: ARRAY
31643: PPUSH
31644: CALL_OW 313
31648: PUSH
31649: LD_VAR 0 12
31653: PUSH
31654: LD_INT 1
31656: ARRAY
31657: PPUSH
31658: CALL_OW 266
31662: PUSH
31663: LD_INT 32
31665: PUSH
31666: LD_INT 31
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: IN
31673: AND
31674: PUSH
31675: LD_VAR 0 12
31679: PUSH
31680: LD_INT 1
31682: ARRAY
31683: PPUSH
31684: CALL_OW 313
31688: PUSH
31689: LD_INT 6
31691: EQUAL
31692: OR
31693: IFFALSE 31713
// f := Delete ( f , 1 ) ;
31695: LD_ADDR_VAR 0 12
31699: PUSH
31700: LD_VAR 0 12
31704: PPUSH
31705: LD_INT 1
31707: PPUSH
31708: CALL_OW 3
31712: ST_TO_ADDR
// if not f then
31713: LD_VAR 0 12
31717: NOT
31718: IFFALSE 31736
// begin x := x + 2 ;
31720: LD_ADDR_VAR 0 13
31724: PUSH
31725: LD_VAR 0 13
31729: PUSH
31730: LD_INT 2
31732: PLUS
31733: ST_TO_ADDR
// continue ;
31734: GO 31534
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31736: LD_VAR 0 12
31740: PUSH
31741: LD_INT 1
31743: ARRAY
31744: PPUSH
31745: CALL_OW 266
31749: PUSH
31750: LD_INT 5
31752: EQUAL
31753: IFFALSE 31827
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31755: LD_VAR 0 12
31759: PUSH
31760: LD_INT 1
31762: ARRAY
31763: PPUSH
31764: CALL_OW 313
31768: PUSH
31769: LD_INT 3
31771: LESS
31772: IFFALSE 31808
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31774: LD_INT 0
31776: PPUSH
31777: LD_INT 5
31779: PUSH
31780: LD_INT 8
31782: PUSH
31783: LD_INT 9
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: LIST
31790: PUSH
31791: LD_VAR 0 17
31795: ARRAY
31796: PPUSH
31797: LD_VAR 0 4
31801: PPUSH
31802: CALL_OW 380
31806: GO 31825
// PrepareHuman ( false , i , skill ) ;
31808: LD_INT 0
31810: PPUSH
31811: LD_VAR 0 8
31815: PPUSH
31816: LD_VAR 0 4
31820: PPUSH
31821: CALL_OW 380
// end else
31825: GO 31844
// PrepareHuman ( false , i , skill ) ;
31827: LD_INT 0
31829: PPUSH
31830: LD_VAR 0 8
31834: PPUSH
31835: LD_VAR 0 4
31839: PPUSH
31840: CALL_OW 380
// un := CreateHuman ;
31844: LD_ADDR_VAR 0 14
31848: PUSH
31849: CALL_OW 44
31853: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31854: LD_ADDR_VAR 0 7
31858: PUSH
31859: LD_VAR 0 7
31863: PPUSH
31864: LD_INT 1
31866: PPUSH
31867: LD_VAR 0 14
31871: PPUSH
31872: CALL_OW 2
31876: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31877: LD_VAR 0 14
31881: PPUSH
31882: LD_VAR 0 12
31886: PUSH
31887: LD_INT 1
31889: ARRAY
31890: PPUSH
31891: CALL_OW 52
// end ;
31895: GO 31534
31897: POP
31898: POP
// end ;
31899: GO 30836
31901: POP
31902: POP
// result := result ^ buildings ;
31903: LD_ADDR_VAR 0 7
31907: PUSH
31908: LD_VAR 0 7
31912: PUSH
31913: LD_VAR 0 18
31917: ADD
31918: ST_TO_ADDR
// end else
31919: GO 32062
// begin for i = 1 to personel do
31921: LD_ADDR_VAR 0 8
31925: PUSH
31926: DOUBLE
31927: LD_INT 1
31929: DEC
31930: ST_TO_ADDR
31931: LD_VAR 0 6
31935: PUSH
31936: FOR_TO
31937: IFFALSE 32060
// begin if i > 4 then
31939: LD_VAR 0 8
31943: PUSH
31944: LD_INT 4
31946: GREATER
31947: IFFALSE 31951
// break ;
31949: GO 32060
// x := personel [ i ] ;
31951: LD_ADDR_VAR 0 13
31955: PUSH
31956: LD_VAR 0 6
31960: PUSH
31961: LD_VAR 0 8
31965: ARRAY
31966: ST_TO_ADDR
// if x = - 1 then
31967: LD_VAR 0 13
31971: PUSH
31972: LD_INT 1
31974: NEG
31975: EQUAL
31976: IFFALSE 31980
// continue ;
31978: GO 31936
// PrepareHuman ( false , i , skill ) ;
31980: LD_INT 0
31982: PPUSH
31983: LD_VAR 0 8
31987: PPUSH
31988: LD_VAR 0 4
31992: PPUSH
31993: CALL_OW 380
// un := CreateHuman ;
31997: LD_ADDR_VAR 0 14
32001: PUSH
32002: CALL_OW 44
32006: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32007: LD_VAR 0 14
32011: PPUSH
32012: LD_VAR 0 1
32016: PPUSH
32017: CALL_OW 250
32021: PPUSH
32022: LD_VAR 0 1
32026: PPUSH
32027: CALL_OW 251
32031: PPUSH
32032: LD_INT 10
32034: PPUSH
32035: LD_INT 0
32037: PPUSH
32038: CALL_OW 50
// result := result ^ un ;
32042: LD_ADDR_VAR 0 7
32046: PUSH
32047: LD_VAR 0 7
32051: PUSH
32052: LD_VAR 0 14
32056: ADD
32057: ST_TO_ADDR
// end ;
32058: GO 31936
32060: POP
32061: POP
// end ; end ;
32062: LD_VAR 0 7
32066: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32067: LD_INT 0
32069: PPUSH
32070: PPUSH
32071: PPUSH
32072: PPUSH
32073: PPUSH
32074: PPUSH
32075: PPUSH
32076: PPUSH
32077: PPUSH
32078: PPUSH
32079: PPUSH
32080: PPUSH
32081: PPUSH
32082: PPUSH
32083: PPUSH
32084: PPUSH
// result := false ;
32085: LD_ADDR_VAR 0 3
32089: PUSH
32090: LD_INT 0
32092: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32093: LD_VAR 0 1
32097: NOT
32098: PUSH
32099: LD_VAR 0 1
32103: PPUSH
32104: CALL_OW 266
32108: PUSH
32109: LD_INT 32
32111: PUSH
32112: LD_INT 33
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: IN
32119: NOT
32120: OR
32121: IFFALSE 32125
// exit ;
32123: GO 33234
// nat := GetNation ( tower ) ;
32125: LD_ADDR_VAR 0 12
32129: PUSH
32130: LD_VAR 0 1
32134: PPUSH
32135: CALL_OW 248
32139: ST_TO_ADDR
// side := GetSide ( tower ) ;
32140: LD_ADDR_VAR 0 16
32144: PUSH
32145: LD_VAR 0 1
32149: PPUSH
32150: CALL_OW 255
32154: ST_TO_ADDR
// x := GetX ( tower ) ;
32155: LD_ADDR_VAR 0 10
32159: PUSH
32160: LD_VAR 0 1
32164: PPUSH
32165: CALL_OW 250
32169: ST_TO_ADDR
// y := GetY ( tower ) ;
32170: LD_ADDR_VAR 0 11
32174: PUSH
32175: LD_VAR 0 1
32179: PPUSH
32180: CALL_OW 251
32184: ST_TO_ADDR
// if not x or not y then
32185: LD_VAR 0 10
32189: NOT
32190: PUSH
32191: LD_VAR 0 11
32195: NOT
32196: OR
32197: IFFALSE 32201
// exit ;
32199: GO 33234
// weapon := 0 ;
32201: LD_ADDR_VAR 0 18
32205: PUSH
32206: LD_INT 0
32208: ST_TO_ADDR
// fac_list := [ ] ;
32209: LD_ADDR_VAR 0 17
32213: PUSH
32214: EMPTY
32215: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32216: LD_ADDR_VAR 0 6
32220: PUSH
32221: LD_VAR 0 1
32225: PPUSH
32226: CALL_OW 274
32230: PPUSH
32231: LD_VAR 0 2
32235: PPUSH
32236: LD_INT 0
32238: PPUSH
32239: CALL 29805 0 3
32243: PPUSH
32244: LD_INT 30
32246: PUSH
32247: LD_INT 3
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PPUSH
32254: CALL_OW 72
32258: ST_TO_ADDR
// if not factories then
32259: LD_VAR 0 6
32263: NOT
32264: IFFALSE 32268
// exit ;
32266: GO 33234
// for i in factories do
32268: LD_ADDR_VAR 0 8
32272: PUSH
32273: LD_VAR 0 6
32277: PUSH
32278: FOR_IN
32279: IFFALSE 32304
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32281: LD_ADDR_VAR 0 17
32285: PUSH
32286: LD_VAR 0 17
32290: PUSH
32291: LD_VAR 0 8
32295: PPUSH
32296: CALL_OW 478
32300: UNION
32301: ST_TO_ADDR
32302: GO 32278
32304: POP
32305: POP
// if not fac_list then
32306: LD_VAR 0 17
32310: NOT
32311: IFFALSE 32315
// exit ;
32313: GO 33234
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32315: LD_ADDR_VAR 0 5
32319: PUSH
32320: LD_INT 4
32322: PUSH
32323: LD_INT 5
32325: PUSH
32326: LD_INT 9
32328: PUSH
32329: LD_INT 10
32331: PUSH
32332: LD_INT 6
32334: PUSH
32335: LD_INT 7
32337: PUSH
32338: LD_INT 11
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 27
32352: PUSH
32353: LD_INT 28
32355: PUSH
32356: LD_INT 26
32358: PUSH
32359: LD_INT 30
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 43
32370: PUSH
32371: LD_INT 44
32373: PUSH
32374: LD_INT 46
32376: PUSH
32377: LD_INT 45
32379: PUSH
32380: LD_INT 47
32382: PUSH
32383: LD_INT 49
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: LIST
32398: PUSH
32399: LD_VAR 0 12
32403: ARRAY
32404: ST_TO_ADDR
// list := list isect fac_list ;
32405: LD_ADDR_VAR 0 5
32409: PUSH
32410: LD_VAR 0 5
32414: PUSH
32415: LD_VAR 0 17
32419: ISECT
32420: ST_TO_ADDR
// if not list then
32421: LD_VAR 0 5
32425: NOT
32426: IFFALSE 32430
// exit ;
32428: GO 33234
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32430: LD_VAR 0 12
32434: PUSH
32435: LD_INT 3
32437: EQUAL
32438: PUSH
32439: LD_INT 49
32441: PUSH
32442: LD_VAR 0 5
32446: IN
32447: AND
32448: PUSH
32449: LD_INT 31
32451: PPUSH
32452: LD_VAR 0 16
32456: PPUSH
32457: CALL_OW 321
32461: PUSH
32462: LD_INT 2
32464: EQUAL
32465: AND
32466: IFFALSE 32526
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32468: LD_INT 22
32470: PUSH
32471: LD_VAR 0 16
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 35
32482: PUSH
32483: LD_INT 49
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 91
32492: PUSH
32493: LD_VAR 0 1
32497: PUSH
32498: LD_INT 10
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: LIST
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: LIST
32510: PPUSH
32511: CALL_OW 69
32515: NOT
32516: IFFALSE 32526
// weapon := ru_time_lapser ;
32518: LD_ADDR_VAR 0 18
32522: PUSH
32523: LD_INT 49
32525: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32526: LD_VAR 0 12
32530: PUSH
32531: LD_INT 1
32533: PUSH
32534: LD_INT 2
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: IN
32541: PUSH
32542: LD_INT 11
32544: PUSH
32545: LD_VAR 0 5
32549: IN
32550: PUSH
32551: LD_INT 30
32553: PUSH
32554: LD_VAR 0 5
32558: IN
32559: OR
32560: AND
32561: PUSH
32562: LD_INT 6
32564: PPUSH
32565: LD_VAR 0 16
32569: PPUSH
32570: CALL_OW 321
32574: PUSH
32575: LD_INT 2
32577: EQUAL
32578: AND
32579: IFFALSE 32744
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32581: LD_INT 22
32583: PUSH
32584: LD_VAR 0 16
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 2
32595: PUSH
32596: LD_INT 35
32598: PUSH
32599: LD_INT 11
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 35
32608: PUSH
32609: LD_INT 30
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 91
32623: PUSH
32624: LD_VAR 0 1
32628: PUSH
32629: LD_INT 18
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: LIST
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: LIST
32641: PPUSH
32642: CALL_OW 69
32646: NOT
32647: PUSH
32648: LD_INT 22
32650: PUSH
32651: LD_VAR 0 16
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 2
32662: PUSH
32663: LD_INT 30
32665: PUSH
32666: LD_INT 32
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 30
32675: PUSH
32676: LD_INT 33
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 91
32690: PUSH
32691: LD_VAR 0 1
32695: PUSH
32696: LD_INT 12
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: LIST
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: LIST
32708: PUSH
32709: EMPTY
32710: LIST
32711: PPUSH
32712: CALL_OW 69
32716: PUSH
32717: LD_INT 2
32719: GREATER
32720: AND
32721: IFFALSE 32744
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32723: LD_ADDR_VAR 0 18
32727: PUSH
32728: LD_INT 11
32730: PUSH
32731: LD_INT 30
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_VAR 0 12
32742: ARRAY
32743: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32744: LD_VAR 0 18
32748: NOT
32749: PUSH
32750: LD_INT 40
32752: PPUSH
32753: LD_VAR 0 16
32757: PPUSH
32758: CALL_OW 321
32762: PUSH
32763: LD_INT 2
32765: EQUAL
32766: AND
32767: PUSH
32768: LD_INT 7
32770: PUSH
32771: LD_VAR 0 5
32775: IN
32776: PUSH
32777: LD_INT 28
32779: PUSH
32780: LD_VAR 0 5
32784: IN
32785: OR
32786: PUSH
32787: LD_INT 45
32789: PUSH
32790: LD_VAR 0 5
32794: IN
32795: OR
32796: AND
32797: IFFALSE 33051
// begin hex := GetHexInfo ( x , y ) ;
32799: LD_ADDR_VAR 0 4
32803: PUSH
32804: LD_VAR 0 10
32808: PPUSH
32809: LD_VAR 0 11
32813: PPUSH
32814: CALL_OW 546
32818: ST_TO_ADDR
// if hex [ 1 ] then
32819: LD_VAR 0 4
32823: PUSH
32824: LD_INT 1
32826: ARRAY
32827: IFFALSE 32831
// exit ;
32829: GO 33234
// height := hex [ 2 ] ;
32831: LD_ADDR_VAR 0 15
32835: PUSH
32836: LD_VAR 0 4
32840: PUSH
32841: LD_INT 2
32843: ARRAY
32844: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32845: LD_ADDR_VAR 0 14
32849: PUSH
32850: LD_INT 0
32852: PUSH
32853: LD_INT 2
32855: PUSH
32856: LD_INT 3
32858: PUSH
32859: LD_INT 5
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: ST_TO_ADDR
// for i in tmp do
32868: LD_ADDR_VAR 0 8
32872: PUSH
32873: LD_VAR 0 14
32877: PUSH
32878: FOR_IN
32879: IFFALSE 33049
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32881: LD_ADDR_VAR 0 9
32885: PUSH
32886: LD_VAR 0 10
32890: PPUSH
32891: LD_VAR 0 8
32895: PPUSH
32896: LD_INT 5
32898: PPUSH
32899: CALL_OW 272
32903: PUSH
32904: LD_VAR 0 11
32908: PPUSH
32909: LD_VAR 0 8
32913: PPUSH
32914: LD_INT 5
32916: PPUSH
32917: CALL_OW 273
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32926: LD_VAR 0 9
32930: PUSH
32931: LD_INT 1
32933: ARRAY
32934: PPUSH
32935: LD_VAR 0 9
32939: PUSH
32940: LD_INT 2
32942: ARRAY
32943: PPUSH
32944: CALL_OW 488
32948: IFFALSE 33047
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32950: LD_ADDR_VAR 0 4
32954: PUSH
32955: LD_VAR 0 9
32959: PUSH
32960: LD_INT 1
32962: ARRAY
32963: PPUSH
32964: LD_VAR 0 9
32968: PUSH
32969: LD_INT 2
32971: ARRAY
32972: PPUSH
32973: CALL_OW 546
32977: ST_TO_ADDR
// if hex [ 1 ] then
32978: LD_VAR 0 4
32982: PUSH
32983: LD_INT 1
32985: ARRAY
32986: IFFALSE 32990
// continue ;
32988: GO 32878
// h := hex [ 2 ] ;
32990: LD_ADDR_VAR 0 13
32994: PUSH
32995: LD_VAR 0 4
32999: PUSH
33000: LD_INT 2
33002: ARRAY
33003: ST_TO_ADDR
// if h + 7 < height then
33004: LD_VAR 0 13
33008: PUSH
33009: LD_INT 7
33011: PLUS
33012: PUSH
33013: LD_VAR 0 15
33017: LESS
33018: IFFALSE 33047
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33020: LD_ADDR_VAR 0 18
33024: PUSH
33025: LD_INT 7
33027: PUSH
33028: LD_INT 28
33030: PUSH
33031: LD_INT 45
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: LIST
33038: PUSH
33039: LD_VAR 0 12
33043: ARRAY
33044: ST_TO_ADDR
// break ;
33045: GO 33049
// end ; end ; end ;
33047: GO 32878
33049: POP
33050: POP
// end ; if not weapon then
33051: LD_VAR 0 18
33055: NOT
33056: IFFALSE 33116
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33058: LD_ADDR_VAR 0 5
33062: PUSH
33063: LD_VAR 0 5
33067: PUSH
33068: LD_INT 11
33070: PUSH
33071: LD_INT 30
33073: PUSH
33074: LD_INT 49
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: LIST
33081: DIFF
33082: ST_TO_ADDR
// if not list then
33083: LD_VAR 0 5
33087: NOT
33088: IFFALSE 33092
// exit ;
33090: GO 33234
// weapon := list [ rand ( 1 , list ) ] ;
33092: LD_ADDR_VAR 0 18
33096: PUSH
33097: LD_VAR 0 5
33101: PUSH
33102: LD_INT 1
33104: PPUSH
33105: LD_VAR 0 5
33109: PPUSH
33110: CALL_OW 12
33114: ARRAY
33115: ST_TO_ADDR
// end ; if weapon then
33116: LD_VAR 0 18
33120: IFFALSE 33234
// begin tmp := CostOfWeapon ( weapon ) ;
33122: LD_ADDR_VAR 0 14
33126: PUSH
33127: LD_VAR 0 18
33131: PPUSH
33132: CALL_OW 451
33136: ST_TO_ADDR
// j := GetBase ( tower ) ;
33137: LD_ADDR_VAR 0 9
33141: PUSH
33142: LD_VAR 0 1
33146: PPUSH
33147: CALL_OW 274
33151: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33152: LD_VAR 0 9
33156: PPUSH
33157: LD_INT 1
33159: PPUSH
33160: CALL_OW 275
33164: PUSH
33165: LD_VAR 0 14
33169: PUSH
33170: LD_INT 1
33172: ARRAY
33173: GREATEREQUAL
33174: PUSH
33175: LD_VAR 0 9
33179: PPUSH
33180: LD_INT 2
33182: PPUSH
33183: CALL_OW 275
33187: PUSH
33188: LD_VAR 0 14
33192: PUSH
33193: LD_INT 2
33195: ARRAY
33196: GREATEREQUAL
33197: AND
33198: PUSH
33199: LD_VAR 0 9
33203: PPUSH
33204: LD_INT 3
33206: PPUSH
33207: CALL_OW 275
33211: PUSH
33212: LD_VAR 0 14
33216: PUSH
33217: LD_INT 3
33219: ARRAY
33220: GREATEREQUAL
33221: AND
33222: IFFALSE 33234
// result := weapon ;
33224: LD_ADDR_VAR 0 3
33228: PUSH
33229: LD_VAR 0 18
33233: ST_TO_ADDR
// end ; end ;
33234: LD_VAR 0 3
33238: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33239: LD_INT 0
33241: PPUSH
33242: PPUSH
// result := true ;
33243: LD_ADDR_VAR 0 3
33247: PUSH
33248: LD_INT 1
33250: ST_TO_ADDR
// if array1 = array2 then
33251: LD_VAR 0 1
33255: PUSH
33256: LD_VAR 0 2
33260: EQUAL
33261: IFFALSE 33321
// begin for i = 1 to array1 do
33263: LD_ADDR_VAR 0 4
33267: PUSH
33268: DOUBLE
33269: LD_INT 1
33271: DEC
33272: ST_TO_ADDR
33273: LD_VAR 0 1
33277: PUSH
33278: FOR_TO
33279: IFFALSE 33317
// if array1 [ i ] <> array2 [ i ] then
33281: LD_VAR 0 1
33285: PUSH
33286: LD_VAR 0 4
33290: ARRAY
33291: PUSH
33292: LD_VAR 0 2
33296: PUSH
33297: LD_VAR 0 4
33301: ARRAY
33302: NONEQUAL
33303: IFFALSE 33315
// begin result := false ;
33305: LD_ADDR_VAR 0 3
33309: PUSH
33310: LD_INT 0
33312: ST_TO_ADDR
// break ;
33313: GO 33317
// end ;
33315: GO 33278
33317: POP
33318: POP
// end else
33319: GO 33329
// result := false ;
33321: LD_ADDR_VAR 0 3
33325: PUSH
33326: LD_INT 0
33328: ST_TO_ADDR
// end ;
33329: LD_VAR 0 3
33333: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33334: LD_INT 0
33336: PPUSH
33337: PPUSH
// if not array1 or not array2 then
33338: LD_VAR 0 1
33342: NOT
33343: PUSH
33344: LD_VAR 0 2
33348: NOT
33349: OR
33350: IFFALSE 33354
// exit ;
33352: GO 33418
// result := true ;
33354: LD_ADDR_VAR 0 3
33358: PUSH
33359: LD_INT 1
33361: ST_TO_ADDR
// for i = 1 to array1 do
33362: LD_ADDR_VAR 0 4
33366: PUSH
33367: DOUBLE
33368: LD_INT 1
33370: DEC
33371: ST_TO_ADDR
33372: LD_VAR 0 1
33376: PUSH
33377: FOR_TO
33378: IFFALSE 33416
// if array1 [ i ] <> array2 [ i ] then
33380: LD_VAR 0 1
33384: PUSH
33385: LD_VAR 0 4
33389: ARRAY
33390: PUSH
33391: LD_VAR 0 2
33395: PUSH
33396: LD_VAR 0 4
33400: ARRAY
33401: NONEQUAL
33402: IFFALSE 33414
// begin result := false ;
33404: LD_ADDR_VAR 0 3
33408: PUSH
33409: LD_INT 0
33411: ST_TO_ADDR
// break ;
33412: GO 33416
// end ;
33414: GO 33377
33416: POP
33417: POP
// end ;
33418: LD_VAR 0 3
33422: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33423: LD_INT 0
33425: PPUSH
33426: PPUSH
33427: PPUSH
// pom := GetBase ( fac ) ;
33428: LD_ADDR_VAR 0 5
33432: PUSH
33433: LD_VAR 0 1
33437: PPUSH
33438: CALL_OW 274
33442: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33443: LD_ADDR_VAR 0 4
33447: PUSH
33448: LD_VAR 0 2
33452: PUSH
33453: LD_INT 1
33455: ARRAY
33456: PPUSH
33457: LD_VAR 0 2
33461: PUSH
33462: LD_INT 2
33464: ARRAY
33465: PPUSH
33466: LD_VAR 0 2
33470: PUSH
33471: LD_INT 3
33473: ARRAY
33474: PPUSH
33475: LD_VAR 0 2
33479: PUSH
33480: LD_INT 4
33482: ARRAY
33483: PPUSH
33484: CALL_OW 449
33488: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33489: LD_ADDR_VAR 0 3
33493: PUSH
33494: LD_VAR 0 5
33498: PPUSH
33499: LD_INT 1
33501: PPUSH
33502: CALL_OW 275
33506: PUSH
33507: LD_VAR 0 4
33511: PUSH
33512: LD_INT 1
33514: ARRAY
33515: GREATEREQUAL
33516: PUSH
33517: LD_VAR 0 5
33521: PPUSH
33522: LD_INT 2
33524: PPUSH
33525: CALL_OW 275
33529: PUSH
33530: LD_VAR 0 4
33534: PUSH
33535: LD_INT 2
33537: ARRAY
33538: GREATEREQUAL
33539: AND
33540: PUSH
33541: LD_VAR 0 5
33545: PPUSH
33546: LD_INT 3
33548: PPUSH
33549: CALL_OW 275
33553: PUSH
33554: LD_VAR 0 4
33558: PUSH
33559: LD_INT 3
33561: ARRAY
33562: GREATEREQUAL
33563: AND
33564: ST_TO_ADDR
// end ;
33565: LD_VAR 0 3
33569: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33570: LD_INT 0
33572: PPUSH
33573: PPUSH
33574: PPUSH
33575: PPUSH
// pom := GetBase ( building ) ;
33576: LD_ADDR_VAR 0 3
33580: PUSH
33581: LD_VAR 0 1
33585: PPUSH
33586: CALL_OW 274
33590: ST_TO_ADDR
// if not pom then
33591: LD_VAR 0 3
33595: NOT
33596: IFFALSE 33600
// exit ;
33598: GO 33770
// btype := GetBType ( building ) ;
33600: LD_ADDR_VAR 0 5
33604: PUSH
33605: LD_VAR 0 1
33609: PPUSH
33610: CALL_OW 266
33614: ST_TO_ADDR
// if btype = b_armoury then
33615: LD_VAR 0 5
33619: PUSH
33620: LD_INT 4
33622: EQUAL
33623: IFFALSE 33633
// btype := b_barracks ;
33625: LD_ADDR_VAR 0 5
33629: PUSH
33630: LD_INT 5
33632: ST_TO_ADDR
// if btype = b_depot then
33633: LD_VAR 0 5
33637: PUSH
33638: LD_INT 0
33640: EQUAL
33641: IFFALSE 33651
// btype := b_warehouse ;
33643: LD_ADDR_VAR 0 5
33647: PUSH
33648: LD_INT 1
33650: ST_TO_ADDR
// if btype = b_workshop then
33651: LD_VAR 0 5
33655: PUSH
33656: LD_INT 2
33658: EQUAL
33659: IFFALSE 33669
// btype := b_factory ;
33661: LD_ADDR_VAR 0 5
33665: PUSH
33666: LD_INT 3
33668: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33669: LD_ADDR_VAR 0 4
33673: PUSH
33674: LD_VAR 0 5
33678: PPUSH
33679: LD_VAR 0 1
33683: PPUSH
33684: CALL_OW 248
33688: PPUSH
33689: CALL_OW 450
33693: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33694: LD_ADDR_VAR 0 2
33698: PUSH
33699: LD_VAR 0 3
33703: PPUSH
33704: LD_INT 1
33706: PPUSH
33707: CALL_OW 275
33711: PUSH
33712: LD_VAR 0 4
33716: PUSH
33717: LD_INT 1
33719: ARRAY
33720: GREATEREQUAL
33721: PUSH
33722: LD_VAR 0 3
33726: PPUSH
33727: LD_INT 2
33729: PPUSH
33730: CALL_OW 275
33734: PUSH
33735: LD_VAR 0 4
33739: PUSH
33740: LD_INT 2
33742: ARRAY
33743: GREATEREQUAL
33744: AND
33745: PUSH
33746: LD_VAR 0 3
33750: PPUSH
33751: LD_INT 3
33753: PPUSH
33754: CALL_OW 275
33758: PUSH
33759: LD_VAR 0 4
33763: PUSH
33764: LD_INT 3
33766: ARRAY
33767: GREATEREQUAL
33768: AND
33769: ST_TO_ADDR
// end ;
33770: LD_VAR 0 2
33774: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33775: LD_INT 0
33777: PPUSH
33778: PPUSH
33779: PPUSH
// pom := GetBase ( building ) ;
33780: LD_ADDR_VAR 0 4
33784: PUSH
33785: LD_VAR 0 1
33789: PPUSH
33790: CALL_OW 274
33794: ST_TO_ADDR
// if not pom then
33795: LD_VAR 0 4
33799: NOT
33800: IFFALSE 33804
// exit ;
33802: GO 33905
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33804: LD_ADDR_VAR 0 5
33808: PUSH
33809: LD_VAR 0 2
33813: PPUSH
33814: LD_VAR 0 1
33818: PPUSH
33819: CALL_OW 248
33823: PPUSH
33824: CALL_OW 450
33828: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33829: LD_ADDR_VAR 0 3
33833: PUSH
33834: LD_VAR 0 4
33838: PPUSH
33839: LD_INT 1
33841: PPUSH
33842: CALL_OW 275
33846: PUSH
33847: LD_VAR 0 5
33851: PUSH
33852: LD_INT 1
33854: ARRAY
33855: GREATEREQUAL
33856: PUSH
33857: LD_VAR 0 4
33861: PPUSH
33862: LD_INT 2
33864: PPUSH
33865: CALL_OW 275
33869: PUSH
33870: LD_VAR 0 5
33874: PUSH
33875: LD_INT 2
33877: ARRAY
33878: GREATEREQUAL
33879: AND
33880: PUSH
33881: LD_VAR 0 4
33885: PPUSH
33886: LD_INT 3
33888: PPUSH
33889: CALL_OW 275
33893: PUSH
33894: LD_VAR 0 5
33898: PUSH
33899: LD_INT 3
33901: ARRAY
33902: GREATEREQUAL
33903: AND
33904: ST_TO_ADDR
// end ;
33905: LD_VAR 0 3
33909: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33910: LD_INT 0
33912: PPUSH
33913: PPUSH
33914: PPUSH
33915: PPUSH
33916: PPUSH
33917: PPUSH
33918: PPUSH
33919: PPUSH
33920: PPUSH
33921: PPUSH
33922: PPUSH
// result := false ;
33923: LD_ADDR_VAR 0 8
33927: PUSH
33928: LD_INT 0
33930: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33931: LD_VAR 0 5
33935: NOT
33936: PUSH
33937: LD_VAR 0 1
33941: NOT
33942: OR
33943: PUSH
33944: LD_VAR 0 2
33948: NOT
33949: OR
33950: PUSH
33951: LD_VAR 0 3
33955: NOT
33956: OR
33957: IFFALSE 33961
// exit ;
33959: GO 34775
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33961: LD_ADDR_VAR 0 14
33965: PUSH
33966: LD_VAR 0 1
33970: PPUSH
33971: LD_VAR 0 2
33975: PPUSH
33976: LD_VAR 0 3
33980: PPUSH
33981: LD_VAR 0 4
33985: PPUSH
33986: LD_VAR 0 5
33990: PUSH
33991: LD_INT 1
33993: ARRAY
33994: PPUSH
33995: CALL_OW 248
33999: PPUSH
34000: LD_INT 0
34002: PPUSH
34003: CALL 36012 0 6
34007: ST_TO_ADDR
// if not hexes then
34008: LD_VAR 0 14
34012: NOT
34013: IFFALSE 34017
// exit ;
34015: GO 34775
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34017: LD_ADDR_VAR 0 17
34021: PUSH
34022: LD_VAR 0 5
34026: PPUSH
34027: LD_INT 22
34029: PUSH
34030: LD_VAR 0 13
34034: PPUSH
34035: CALL_OW 255
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 2
34046: PUSH
34047: LD_INT 30
34049: PUSH
34050: LD_INT 0
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 30
34059: PUSH
34060: LD_INT 1
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: LIST
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PPUSH
34076: CALL_OW 72
34080: ST_TO_ADDR
// for i = 1 to hexes do
34081: LD_ADDR_VAR 0 9
34085: PUSH
34086: DOUBLE
34087: LD_INT 1
34089: DEC
34090: ST_TO_ADDR
34091: LD_VAR 0 14
34095: PUSH
34096: FOR_TO
34097: IFFALSE 34773
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34099: LD_ADDR_VAR 0 13
34103: PUSH
34104: LD_VAR 0 14
34108: PUSH
34109: LD_VAR 0 9
34113: ARRAY
34114: PUSH
34115: LD_INT 1
34117: ARRAY
34118: PPUSH
34119: LD_VAR 0 14
34123: PUSH
34124: LD_VAR 0 9
34128: ARRAY
34129: PUSH
34130: LD_INT 2
34132: ARRAY
34133: PPUSH
34134: CALL_OW 428
34138: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34139: LD_VAR 0 14
34143: PUSH
34144: LD_VAR 0 9
34148: ARRAY
34149: PUSH
34150: LD_INT 1
34152: ARRAY
34153: PPUSH
34154: LD_VAR 0 14
34158: PUSH
34159: LD_VAR 0 9
34163: ARRAY
34164: PUSH
34165: LD_INT 2
34167: ARRAY
34168: PPUSH
34169: CALL_OW 351
34173: PUSH
34174: LD_VAR 0 14
34178: PUSH
34179: LD_VAR 0 9
34183: ARRAY
34184: PUSH
34185: LD_INT 1
34187: ARRAY
34188: PPUSH
34189: LD_VAR 0 14
34193: PUSH
34194: LD_VAR 0 9
34198: ARRAY
34199: PUSH
34200: LD_INT 2
34202: ARRAY
34203: PPUSH
34204: CALL_OW 488
34208: NOT
34209: OR
34210: PUSH
34211: LD_VAR 0 13
34215: PPUSH
34216: CALL_OW 247
34220: PUSH
34221: LD_INT 3
34223: EQUAL
34224: OR
34225: IFFALSE 34231
// exit ;
34227: POP
34228: POP
34229: GO 34775
// if not tmp then
34231: LD_VAR 0 13
34235: NOT
34236: IFFALSE 34240
// continue ;
34238: GO 34096
// result := true ;
34240: LD_ADDR_VAR 0 8
34244: PUSH
34245: LD_INT 1
34247: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34248: LD_VAR 0 6
34252: PUSH
34253: LD_VAR 0 13
34257: PPUSH
34258: CALL_OW 247
34262: PUSH
34263: LD_INT 2
34265: EQUAL
34266: AND
34267: PUSH
34268: LD_VAR 0 13
34272: PPUSH
34273: CALL_OW 263
34277: PUSH
34278: LD_INT 1
34280: EQUAL
34281: AND
34282: IFFALSE 34446
// begin if IsDrivenBy ( tmp ) then
34284: LD_VAR 0 13
34288: PPUSH
34289: CALL_OW 311
34293: IFFALSE 34297
// continue ;
34295: GO 34096
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34297: LD_VAR 0 6
34301: PPUSH
34302: LD_INT 3
34304: PUSH
34305: LD_INT 60
34307: PUSH
34308: EMPTY
34309: LIST
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 3
34317: PUSH
34318: LD_INT 55
34320: PUSH
34321: EMPTY
34322: LIST
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PPUSH
34332: CALL_OW 72
34336: IFFALSE 34444
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34338: LD_ADDR_VAR 0 18
34342: PUSH
34343: LD_VAR 0 6
34347: PPUSH
34348: LD_INT 3
34350: PUSH
34351: LD_INT 60
34353: PUSH
34354: EMPTY
34355: LIST
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 3
34363: PUSH
34364: LD_INT 55
34366: PUSH
34367: EMPTY
34368: LIST
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PPUSH
34378: CALL_OW 72
34382: PUSH
34383: LD_INT 1
34385: ARRAY
34386: ST_TO_ADDR
// if IsInUnit ( driver ) then
34387: LD_VAR 0 18
34391: PPUSH
34392: CALL_OW 310
34396: IFFALSE 34407
// ComExit ( driver ) ;
34398: LD_VAR 0 18
34402: PPUSH
34403: CALL 59196 0 1
// AddComEnterUnit ( driver , tmp ) ;
34407: LD_VAR 0 18
34411: PPUSH
34412: LD_VAR 0 13
34416: PPUSH
34417: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34421: LD_VAR 0 18
34425: PPUSH
34426: LD_VAR 0 7
34430: PPUSH
34431: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34435: LD_VAR 0 18
34439: PPUSH
34440: CALL_OW 181
// end ; continue ;
34444: GO 34096
// end ; if not cleaners or not tmp in cleaners then
34446: LD_VAR 0 6
34450: NOT
34451: PUSH
34452: LD_VAR 0 13
34456: PUSH
34457: LD_VAR 0 6
34461: IN
34462: NOT
34463: OR
34464: IFFALSE 34771
// begin if dep then
34466: LD_VAR 0 17
34470: IFFALSE 34606
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34472: LD_ADDR_VAR 0 16
34476: PUSH
34477: LD_VAR 0 17
34481: PUSH
34482: LD_INT 1
34484: ARRAY
34485: PPUSH
34486: CALL_OW 250
34490: PPUSH
34491: LD_VAR 0 17
34495: PUSH
34496: LD_INT 1
34498: ARRAY
34499: PPUSH
34500: CALL_OW 254
34504: PPUSH
34505: LD_INT 5
34507: PPUSH
34508: CALL_OW 272
34512: PUSH
34513: LD_VAR 0 17
34517: PUSH
34518: LD_INT 1
34520: ARRAY
34521: PPUSH
34522: CALL_OW 251
34526: PPUSH
34527: LD_VAR 0 17
34531: PUSH
34532: LD_INT 1
34534: ARRAY
34535: PPUSH
34536: CALL_OW 254
34540: PPUSH
34541: LD_INT 5
34543: PPUSH
34544: CALL_OW 273
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34553: LD_VAR 0 16
34557: PUSH
34558: LD_INT 1
34560: ARRAY
34561: PPUSH
34562: LD_VAR 0 16
34566: PUSH
34567: LD_INT 2
34569: ARRAY
34570: PPUSH
34571: CALL_OW 488
34575: IFFALSE 34606
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34577: LD_VAR 0 13
34581: PPUSH
34582: LD_VAR 0 16
34586: PUSH
34587: LD_INT 1
34589: ARRAY
34590: PPUSH
34591: LD_VAR 0 16
34595: PUSH
34596: LD_INT 2
34598: ARRAY
34599: PPUSH
34600: CALL_OW 111
// continue ;
34604: GO 34096
// end ; end ; r := GetDir ( tmp ) ;
34606: LD_ADDR_VAR 0 15
34610: PUSH
34611: LD_VAR 0 13
34615: PPUSH
34616: CALL_OW 254
34620: ST_TO_ADDR
// if r = 5 then
34621: LD_VAR 0 15
34625: PUSH
34626: LD_INT 5
34628: EQUAL
34629: IFFALSE 34639
// r := 0 ;
34631: LD_ADDR_VAR 0 15
34635: PUSH
34636: LD_INT 0
34638: ST_TO_ADDR
// for j = r to 5 do
34639: LD_ADDR_VAR 0 10
34643: PUSH
34644: DOUBLE
34645: LD_VAR 0 15
34649: DEC
34650: ST_TO_ADDR
34651: LD_INT 5
34653: PUSH
34654: FOR_TO
34655: IFFALSE 34769
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34657: LD_ADDR_VAR 0 11
34661: PUSH
34662: LD_VAR 0 13
34666: PPUSH
34667: CALL_OW 250
34671: PPUSH
34672: LD_VAR 0 10
34676: PPUSH
34677: LD_INT 2
34679: PPUSH
34680: CALL_OW 272
34684: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34685: LD_ADDR_VAR 0 12
34689: PUSH
34690: LD_VAR 0 13
34694: PPUSH
34695: CALL_OW 251
34699: PPUSH
34700: LD_VAR 0 10
34704: PPUSH
34705: LD_INT 2
34707: PPUSH
34708: CALL_OW 273
34712: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34713: LD_VAR 0 11
34717: PPUSH
34718: LD_VAR 0 12
34722: PPUSH
34723: CALL_OW 488
34727: PUSH
34728: LD_VAR 0 11
34732: PPUSH
34733: LD_VAR 0 12
34737: PPUSH
34738: CALL_OW 428
34742: NOT
34743: AND
34744: IFFALSE 34767
// begin ComMoveXY ( tmp , _x , _y ) ;
34746: LD_VAR 0 13
34750: PPUSH
34751: LD_VAR 0 11
34755: PPUSH
34756: LD_VAR 0 12
34760: PPUSH
34761: CALL_OW 111
// break ;
34765: GO 34769
// end ; end ;
34767: GO 34654
34769: POP
34770: POP
// end ; end ;
34771: GO 34096
34773: POP
34774: POP
// end ;
34775: LD_VAR 0 8
34779: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34780: LD_INT 0
34782: PPUSH
// result := true ;
34783: LD_ADDR_VAR 0 3
34787: PUSH
34788: LD_INT 1
34790: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34791: LD_VAR 0 2
34795: PUSH
34796: LD_INT 24
34798: DOUBLE
34799: EQUAL
34800: IFTRUE 34810
34802: LD_INT 33
34804: DOUBLE
34805: EQUAL
34806: IFTRUE 34810
34808: GO 34835
34810: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34811: LD_ADDR_VAR 0 3
34815: PUSH
34816: LD_INT 32
34818: PPUSH
34819: LD_VAR 0 1
34823: PPUSH
34824: CALL_OW 321
34828: PUSH
34829: LD_INT 2
34831: EQUAL
34832: ST_TO_ADDR
34833: GO 35155
34835: LD_INT 20
34837: DOUBLE
34838: EQUAL
34839: IFTRUE 34843
34841: GO 34868
34843: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34844: LD_ADDR_VAR 0 3
34848: PUSH
34849: LD_INT 6
34851: PPUSH
34852: LD_VAR 0 1
34856: PPUSH
34857: CALL_OW 321
34861: PUSH
34862: LD_INT 2
34864: EQUAL
34865: ST_TO_ADDR
34866: GO 35155
34868: LD_INT 22
34870: DOUBLE
34871: EQUAL
34872: IFTRUE 34882
34874: LD_INT 36
34876: DOUBLE
34877: EQUAL
34878: IFTRUE 34882
34880: GO 34907
34882: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34883: LD_ADDR_VAR 0 3
34887: PUSH
34888: LD_INT 15
34890: PPUSH
34891: LD_VAR 0 1
34895: PPUSH
34896: CALL_OW 321
34900: PUSH
34901: LD_INT 2
34903: EQUAL
34904: ST_TO_ADDR
34905: GO 35155
34907: LD_INT 30
34909: DOUBLE
34910: EQUAL
34911: IFTRUE 34915
34913: GO 34940
34915: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34916: LD_ADDR_VAR 0 3
34920: PUSH
34921: LD_INT 20
34923: PPUSH
34924: LD_VAR 0 1
34928: PPUSH
34929: CALL_OW 321
34933: PUSH
34934: LD_INT 2
34936: EQUAL
34937: ST_TO_ADDR
34938: GO 35155
34940: LD_INT 28
34942: DOUBLE
34943: EQUAL
34944: IFTRUE 34954
34946: LD_INT 21
34948: DOUBLE
34949: EQUAL
34950: IFTRUE 34954
34952: GO 34979
34954: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34955: LD_ADDR_VAR 0 3
34959: PUSH
34960: LD_INT 21
34962: PPUSH
34963: LD_VAR 0 1
34967: PPUSH
34968: CALL_OW 321
34972: PUSH
34973: LD_INT 2
34975: EQUAL
34976: ST_TO_ADDR
34977: GO 35155
34979: LD_INT 16
34981: DOUBLE
34982: EQUAL
34983: IFTRUE 34987
34985: GO 35014
34987: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34988: LD_ADDR_VAR 0 3
34992: PUSH
34993: LD_EXP 51
34997: PPUSH
34998: LD_VAR 0 1
35002: PPUSH
35003: CALL_OW 321
35007: PUSH
35008: LD_INT 2
35010: EQUAL
35011: ST_TO_ADDR
35012: GO 35155
35014: LD_INT 19
35016: DOUBLE
35017: EQUAL
35018: IFTRUE 35028
35020: LD_INT 23
35022: DOUBLE
35023: EQUAL
35024: IFTRUE 35028
35026: GO 35055
35028: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35029: LD_ADDR_VAR 0 3
35033: PUSH
35034: LD_EXP 50
35038: PPUSH
35039: LD_VAR 0 1
35043: PPUSH
35044: CALL_OW 321
35048: PUSH
35049: LD_INT 2
35051: EQUAL
35052: ST_TO_ADDR
35053: GO 35155
35055: LD_INT 17
35057: DOUBLE
35058: EQUAL
35059: IFTRUE 35063
35061: GO 35088
35063: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35064: LD_ADDR_VAR 0 3
35068: PUSH
35069: LD_INT 39
35071: PPUSH
35072: LD_VAR 0 1
35076: PPUSH
35077: CALL_OW 321
35081: PUSH
35082: LD_INT 2
35084: EQUAL
35085: ST_TO_ADDR
35086: GO 35155
35088: LD_INT 18
35090: DOUBLE
35091: EQUAL
35092: IFTRUE 35096
35094: GO 35121
35096: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
35097: LD_ADDR_VAR 0 3
35101: PUSH
35102: LD_INT 40
35104: PPUSH
35105: LD_VAR 0 1
35109: PPUSH
35110: CALL_OW 321
35114: PUSH
35115: LD_INT 2
35117: EQUAL
35118: ST_TO_ADDR
35119: GO 35155
35121: LD_INT 27
35123: DOUBLE
35124: EQUAL
35125: IFTRUE 35129
35127: GO 35154
35129: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
35130: LD_ADDR_VAR 0 3
35134: PUSH
35135: LD_INT 35
35137: PPUSH
35138: LD_VAR 0 1
35142: PPUSH
35143: CALL_OW 321
35147: PUSH
35148: LD_INT 2
35150: EQUAL
35151: ST_TO_ADDR
35152: GO 35155
35154: POP
// end ;
35155: LD_VAR 0 3
35159: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
35160: LD_INT 0
35162: PPUSH
35163: PPUSH
35164: PPUSH
35165: PPUSH
35166: PPUSH
35167: PPUSH
35168: PPUSH
35169: PPUSH
35170: PPUSH
35171: PPUSH
35172: PPUSH
// result := false ;
35173: LD_ADDR_VAR 0 6
35177: PUSH
35178: LD_INT 0
35180: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35181: LD_VAR 0 1
35185: NOT
35186: PUSH
35187: LD_VAR 0 1
35191: PPUSH
35192: CALL_OW 266
35196: PUSH
35197: LD_INT 0
35199: PUSH
35200: LD_INT 1
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: IN
35207: NOT
35208: OR
35209: PUSH
35210: LD_VAR 0 2
35214: NOT
35215: OR
35216: PUSH
35217: LD_VAR 0 5
35221: PUSH
35222: LD_INT 0
35224: PUSH
35225: LD_INT 1
35227: PUSH
35228: LD_INT 2
35230: PUSH
35231: LD_INT 3
35233: PUSH
35234: LD_INT 4
35236: PUSH
35237: LD_INT 5
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: IN
35248: NOT
35249: OR
35250: PUSH
35251: LD_VAR 0 3
35255: PPUSH
35256: LD_VAR 0 4
35260: PPUSH
35261: CALL_OW 488
35265: NOT
35266: OR
35267: IFFALSE 35271
// exit ;
35269: GO 36007
// side := GetSide ( depot ) ;
35271: LD_ADDR_VAR 0 9
35275: PUSH
35276: LD_VAR 0 1
35280: PPUSH
35281: CALL_OW 255
35285: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35286: LD_VAR 0 9
35290: PPUSH
35291: LD_VAR 0 2
35295: PPUSH
35296: CALL 34780 0 2
35300: NOT
35301: IFFALSE 35305
// exit ;
35303: GO 36007
// pom := GetBase ( depot ) ;
35305: LD_ADDR_VAR 0 10
35309: PUSH
35310: LD_VAR 0 1
35314: PPUSH
35315: CALL_OW 274
35319: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35320: LD_ADDR_VAR 0 11
35324: PUSH
35325: LD_VAR 0 2
35329: PPUSH
35330: LD_VAR 0 1
35334: PPUSH
35335: CALL_OW 248
35339: PPUSH
35340: CALL_OW 450
35344: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35345: LD_VAR 0 10
35349: PPUSH
35350: LD_INT 1
35352: PPUSH
35353: CALL_OW 275
35357: PUSH
35358: LD_VAR 0 11
35362: PUSH
35363: LD_INT 1
35365: ARRAY
35366: GREATEREQUAL
35367: PUSH
35368: LD_VAR 0 10
35372: PPUSH
35373: LD_INT 2
35375: PPUSH
35376: CALL_OW 275
35380: PUSH
35381: LD_VAR 0 11
35385: PUSH
35386: LD_INT 2
35388: ARRAY
35389: GREATEREQUAL
35390: AND
35391: PUSH
35392: LD_VAR 0 10
35396: PPUSH
35397: LD_INT 3
35399: PPUSH
35400: CALL_OW 275
35404: PUSH
35405: LD_VAR 0 11
35409: PUSH
35410: LD_INT 3
35412: ARRAY
35413: GREATEREQUAL
35414: AND
35415: NOT
35416: IFFALSE 35420
// exit ;
35418: GO 36007
// if GetBType ( depot ) = b_depot then
35420: LD_VAR 0 1
35424: PPUSH
35425: CALL_OW 266
35429: PUSH
35430: LD_INT 0
35432: EQUAL
35433: IFFALSE 35445
// dist := 28 else
35435: LD_ADDR_VAR 0 14
35439: PUSH
35440: LD_INT 28
35442: ST_TO_ADDR
35443: GO 35453
// dist := 36 ;
35445: LD_ADDR_VAR 0 14
35449: PUSH
35450: LD_INT 36
35452: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35453: LD_VAR 0 1
35457: PPUSH
35458: LD_VAR 0 3
35462: PPUSH
35463: LD_VAR 0 4
35467: PPUSH
35468: CALL_OW 297
35472: PUSH
35473: LD_VAR 0 14
35477: GREATER
35478: IFFALSE 35482
// exit ;
35480: GO 36007
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35482: LD_ADDR_VAR 0 12
35486: PUSH
35487: LD_VAR 0 2
35491: PPUSH
35492: LD_VAR 0 3
35496: PPUSH
35497: LD_VAR 0 4
35501: PPUSH
35502: LD_VAR 0 5
35506: PPUSH
35507: LD_VAR 0 1
35511: PPUSH
35512: CALL_OW 248
35516: PPUSH
35517: LD_INT 0
35519: PPUSH
35520: CALL 36012 0 6
35524: ST_TO_ADDR
// if not hexes then
35525: LD_VAR 0 12
35529: NOT
35530: IFFALSE 35534
// exit ;
35532: GO 36007
// hex := GetHexInfo ( x , y ) ;
35534: LD_ADDR_VAR 0 15
35538: PUSH
35539: LD_VAR 0 3
35543: PPUSH
35544: LD_VAR 0 4
35548: PPUSH
35549: CALL_OW 546
35553: ST_TO_ADDR
// if hex [ 1 ] then
35554: LD_VAR 0 15
35558: PUSH
35559: LD_INT 1
35561: ARRAY
35562: IFFALSE 35566
// exit ;
35564: GO 36007
// height := hex [ 2 ] ;
35566: LD_ADDR_VAR 0 13
35570: PUSH
35571: LD_VAR 0 15
35575: PUSH
35576: LD_INT 2
35578: ARRAY
35579: ST_TO_ADDR
// for i = 1 to hexes do
35580: LD_ADDR_VAR 0 7
35584: PUSH
35585: DOUBLE
35586: LD_INT 1
35588: DEC
35589: ST_TO_ADDR
35590: LD_VAR 0 12
35594: PUSH
35595: FOR_TO
35596: IFFALSE 35926
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35598: LD_VAR 0 12
35602: PUSH
35603: LD_VAR 0 7
35607: ARRAY
35608: PUSH
35609: LD_INT 1
35611: ARRAY
35612: PPUSH
35613: LD_VAR 0 12
35617: PUSH
35618: LD_VAR 0 7
35622: ARRAY
35623: PUSH
35624: LD_INT 2
35626: ARRAY
35627: PPUSH
35628: CALL_OW 488
35632: NOT
35633: PUSH
35634: LD_VAR 0 12
35638: PUSH
35639: LD_VAR 0 7
35643: ARRAY
35644: PUSH
35645: LD_INT 1
35647: ARRAY
35648: PPUSH
35649: LD_VAR 0 12
35653: PUSH
35654: LD_VAR 0 7
35658: ARRAY
35659: PUSH
35660: LD_INT 2
35662: ARRAY
35663: PPUSH
35664: CALL_OW 428
35668: PUSH
35669: LD_INT 0
35671: GREATER
35672: OR
35673: PUSH
35674: LD_VAR 0 12
35678: PUSH
35679: LD_VAR 0 7
35683: ARRAY
35684: PUSH
35685: LD_INT 1
35687: ARRAY
35688: PPUSH
35689: LD_VAR 0 12
35693: PUSH
35694: LD_VAR 0 7
35698: ARRAY
35699: PUSH
35700: LD_INT 2
35702: ARRAY
35703: PPUSH
35704: CALL_OW 351
35708: OR
35709: IFFALSE 35715
// exit ;
35711: POP
35712: POP
35713: GO 36007
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35715: LD_ADDR_VAR 0 8
35719: PUSH
35720: LD_VAR 0 12
35724: PUSH
35725: LD_VAR 0 7
35729: ARRAY
35730: PUSH
35731: LD_INT 1
35733: ARRAY
35734: PPUSH
35735: LD_VAR 0 12
35739: PUSH
35740: LD_VAR 0 7
35744: ARRAY
35745: PUSH
35746: LD_INT 2
35748: ARRAY
35749: PPUSH
35750: CALL_OW 546
35754: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35755: LD_VAR 0 8
35759: PUSH
35760: LD_INT 1
35762: ARRAY
35763: PUSH
35764: LD_VAR 0 8
35768: PUSH
35769: LD_INT 2
35771: ARRAY
35772: PUSH
35773: LD_VAR 0 13
35777: PUSH
35778: LD_INT 2
35780: PLUS
35781: GREATER
35782: OR
35783: PUSH
35784: LD_VAR 0 8
35788: PUSH
35789: LD_INT 2
35791: ARRAY
35792: PUSH
35793: LD_VAR 0 13
35797: PUSH
35798: LD_INT 2
35800: MINUS
35801: LESS
35802: OR
35803: PUSH
35804: LD_VAR 0 8
35808: PUSH
35809: LD_INT 3
35811: ARRAY
35812: PUSH
35813: LD_INT 0
35815: PUSH
35816: LD_INT 8
35818: PUSH
35819: LD_INT 9
35821: PUSH
35822: LD_INT 10
35824: PUSH
35825: LD_INT 11
35827: PUSH
35828: LD_INT 12
35830: PUSH
35831: LD_INT 13
35833: PUSH
35834: LD_INT 16
35836: PUSH
35837: LD_INT 17
35839: PUSH
35840: LD_INT 18
35842: PUSH
35843: LD_INT 19
35845: PUSH
35846: LD_INT 20
35848: PUSH
35849: LD_INT 21
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: IN
35867: NOT
35868: OR
35869: PUSH
35870: LD_VAR 0 8
35874: PUSH
35875: LD_INT 5
35877: ARRAY
35878: NOT
35879: OR
35880: PUSH
35881: LD_VAR 0 8
35885: PUSH
35886: LD_INT 6
35888: ARRAY
35889: PUSH
35890: LD_INT 1
35892: PUSH
35893: LD_INT 2
35895: PUSH
35896: LD_INT 7
35898: PUSH
35899: LD_INT 9
35901: PUSH
35902: LD_INT 10
35904: PUSH
35905: LD_INT 11
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: IN
35916: NOT
35917: OR
35918: IFFALSE 35924
// exit ;
35920: POP
35921: POP
35922: GO 36007
// end ;
35924: GO 35595
35926: POP
35927: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35928: LD_VAR 0 9
35932: PPUSH
35933: LD_VAR 0 3
35937: PPUSH
35938: LD_VAR 0 4
35942: PPUSH
35943: LD_INT 20
35945: PPUSH
35946: CALL 27953 0 4
35950: PUSH
35951: LD_INT 4
35953: ARRAY
35954: IFFALSE 35958
// exit ;
35956: GO 36007
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35958: LD_VAR 0 2
35962: PUSH
35963: LD_INT 29
35965: PUSH
35966: LD_INT 30
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: IN
35973: PUSH
35974: LD_VAR 0 3
35978: PPUSH
35979: LD_VAR 0 4
35983: PPUSH
35984: LD_VAR 0 9
35988: PPUSH
35989: CALL_OW 440
35993: NOT
35994: AND
35995: IFFALSE 35999
// exit ;
35997: GO 36007
// result := true ;
35999: LD_ADDR_VAR 0 6
36003: PUSH
36004: LD_INT 1
36006: ST_TO_ADDR
// end ;
36007: LD_VAR 0 6
36011: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36012: LD_INT 0
36014: PPUSH
36015: PPUSH
36016: PPUSH
36017: PPUSH
36018: PPUSH
36019: PPUSH
36020: PPUSH
36021: PPUSH
36022: PPUSH
36023: PPUSH
36024: PPUSH
36025: PPUSH
36026: PPUSH
36027: PPUSH
36028: PPUSH
36029: PPUSH
36030: PPUSH
36031: PPUSH
36032: PPUSH
36033: PPUSH
36034: PPUSH
36035: PPUSH
36036: PPUSH
36037: PPUSH
36038: PPUSH
36039: PPUSH
36040: PPUSH
36041: PPUSH
36042: PPUSH
36043: PPUSH
36044: PPUSH
36045: PPUSH
36046: PPUSH
36047: PPUSH
36048: PPUSH
36049: PPUSH
36050: PPUSH
36051: PPUSH
36052: PPUSH
36053: PPUSH
36054: PPUSH
36055: PPUSH
36056: PPUSH
36057: PPUSH
36058: PPUSH
36059: PPUSH
36060: PPUSH
36061: PPUSH
36062: PPUSH
36063: PPUSH
36064: PPUSH
36065: PPUSH
36066: PPUSH
36067: PPUSH
36068: PPUSH
36069: PPUSH
36070: PPUSH
36071: PPUSH
// result = [ ] ;
36072: LD_ADDR_VAR 0 7
36076: PUSH
36077: EMPTY
36078: ST_TO_ADDR
// temp_list = [ ] ;
36079: LD_ADDR_VAR 0 9
36083: PUSH
36084: EMPTY
36085: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36086: LD_VAR 0 4
36090: PUSH
36091: LD_INT 0
36093: PUSH
36094: LD_INT 1
36096: PUSH
36097: LD_INT 2
36099: PUSH
36100: LD_INT 3
36102: PUSH
36103: LD_INT 4
36105: PUSH
36106: LD_INT 5
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: IN
36117: NOT
36118: PUSH
36119: LD_VAR 0 1
36123: PUSH
36124: LD_INT 0
36126: PUSH
36127: LD_INT 1
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: IN
36134: PUSH
36135: LD_VAR 0 5
36139: PUSH
36140: LD_INT 1
36142: PUSH
36143: LD_INT 2
36145: PUSH
36146: LD_INT 3
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: LIST
36153: IN
36154: NOT
36155: AND
36156: OR
36157: IFFALSE 36161
// exit ;
36159: GO 54552
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36161: LD_VAR 0 1
36165: PUSH
36166: LD_INT 6
36168: PUSH
36169: LD_INT 7
36171: PUSH
36172: LD_INT 8
36174: PUSH
36175: LD_INT 13
36177: PUSH
36178: LD_INT 12
36180: PUSH
36181: LD_INT 15
36183: PUSH
36184: LD_INT 11
36186: PUSH
36187: LD_INT 14
36189: PUSH
36190: LD_INT 10
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: IN
36204: IFFALSE 36214
// btype = b_lab ;
36206: LD_ADDR_VAR 0 1
36210: PUSH
36211: LD_INT 6
36213: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36214: LD_VAR 0 6
36218: PUSH
36219: LD_INT 0
36221: PUSH
36222: LD_INT 1
36224: PUSH
36225: LD_INT 2
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: LIST
36232: IN
36233: NOT
36234: PUSH
36235: LD_VAR 0 1
36239: PUSH
36240: LD_INT 0
36242: PUSH
36243: LD_INT 1
36245: PUSH
36246: LD_INT 2
36248: PUSH
36249: LD_INT 3
36251: PUSH
36252: LD_INT 6
36254: PUSH
36255: LD_INT 36
36257: PUSH
36258: LD_INT 4
36260: PUSH
36261: LD_INT 5
36263: PUSH
36264: LD_INT 31
36266: PUSH
36267: LD_INT 32
36269: PUSH
36270: LD_INT 33
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: IN
36286: NOT
36287: PUSH
36288: LD_VAR 0 6
36292: PUSH
36293: LD_INT 1
36295: EQUAL
36296: AND
36297: OR
36298: PUSH
36299: LD_VAR 0 1
36303: PUSH
36304: LD_INT 2
36306: PUSH
36307: LD_INT 3
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: IN
36314: NOT
36315: PUSH
36316: LD_VAR 0 6
36320: PUSH
36321: LD_INT 2
36323: EQUAL
36324: AND
36325: OR
36326: IFFALSE 36336
// mode = 0 ;
36328: LD_ADDR_VAR 0 6
36332: PUSH
36333: LD_INT 0
36335: ST_TO_ADDR
// case mode of 0 :
36336: LD_VAR 0 6
36340: PUSH
36341: LD_INT 0
36343: DOUBLE
36344: EQUAL
36345: IFTRUE 36349
36347: GO 47802
36349: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36350: LD_ADDR_VAR 0 11
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: LD_INT 0
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 0
36367: PUSH
36368: LD_INT 1
36370: NEG
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 1
36378: PUSH
36379: LD_INT 0
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 1
36388: PUSH
36389: LD_INT 1
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 0
36398: PUSH
36399: LD_INT 1
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 1
36408: NEG
36409: PUSH
36410: LD_INT 0
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 1
36419: NEG
36420: PUSH
36421: LD_INT 1
36423: NEG
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 1
36431: NEG
36432: PUSH
36433: LD_INT 2
36435: NEG
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 0
36443: PUSH
36444: LD_INT 2
36446: NEG
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 1
36454: PUSH
36455: LD_INT 1
36457: NEG
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 1
36465: PUSH
36466: LD_INT 2
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 0
36475: PUSH
36476: LD_INT 2
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 1
36485: NEG
36486: PUSH
36487: LD_INT 1
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 1
36496: PUSH
36497: LD_INT 3
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 0
36506: PUSH
36507: LD_INT 3
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: LD_INT 1
36516: NEG
36517: PUSH
36518: LD_INT 2
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36543: LD_ADDR_VAR 0 12
36547: PUSH
36548: LD_INT 0
36550: PUSH
36551: LD_INT 0
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 0
36560: PUSH
36561: LD_INT 1
36563: NEG
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: PUSH
36572: LD_INT 0
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 1
36581: PUSH
36582: LD_INT 1
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 0
36591: PUSH
36592: LD_INT 1
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 1
36601: NEG
36602: PUSH
36603: LD_INT 0
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 1
36612: NEG
36613: PUSH
36614: LD_INT 1
36616: NEG
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 1
36624: PUSH
36625: LD_INT 1
36627: NEG
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: LD_INT 2
36635: PUSH
36636: LD_INT 0
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 2
36645: PUSH
36646: LD_INT 1
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 1
36655: NEG
36656: PUSH
36657: LD_INT 1
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 2
36666: NEG
36667: PUSH
36668: LD_INT 0
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 2
36677: NEG
36678: PUSH
36679: LD_INT 1
36681: NEG
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 2
36689: NEG
36690: PUSH
36691: LD_INT 1
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 3
36700: NEG
36701: PUSH
36702: LD_INT 0
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 3
36711: NEG
36712: PUSH
36713: LD_INT 1
36715: NEG
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36739: LD_ADDR_VAR 0 13
36743: PUSH
36744: LD_INT 0
36746: PUSH
36747: LD_INT 0
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 0
36756: PUSH
36757: LD_INT 1
36759: NEG
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 1
36767: PUSH
36768: LD_INT 0
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 1
36777: PUSH
36778: LD_INT 1
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 0
36787: PUSH
36788: LD_INT 1
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 1
36797: NEG
36798: PUSH
36799: LD_INT 0
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 1
36808: NEG
36809: PUSH
36810: LD_INT 1
36812: NEG
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 1
36820: NEG
36821: PUSH
36822: LD_INT 2
36824: NEG
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 2
36832: PUSH
36833: LD_INT 1
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: PUSH
36840: LD_INT 2
36842: PUSH
36843: LD_INT 2
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 1
36852: PUSH
36853: LD_INT 2
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 2
36862: NEG
36863: PUSH
36864: LD_INT 1
36866: NEG
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 2
36874: NEG
36875: PUSH
36876: LD_INT 2
36878: NEG
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 2
36886: NEG
36887: PUSH
36888: LD_INT 3
36890: NEG
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 3
36898: NEG
36899: PUSH
36900: LD_INT 2
36902: NEG
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: LD_INT 3
36910: NEG
36911: PUSH
36912: LD_INT 3
36914: NEG
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36938: LD_ADDR_VAR 0 14
36942: PUSH
36943: LD_INT 0
36945: PUSH
36946: LD_INT 0
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 0
36955: PUSH
36956: LD_INT 1
36958: NEG
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 1
36966: PUSH
36967: LD_INT 0
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 1
36976: PUSH
36977: LD_INT 1
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 0
36986: PUSH
36987: LD_INT 1
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 1
36996: NEG
36997: PUSH
36998: LD_INT 0
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 1
37007: NEG
37008: PUSH
37009: LD_INT 1
37011: NEG
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 1
37019: NEG
37020: PUSH
37021: LD_INT 2
37023: NEG
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 0
37031: PUSH
37032: LD_INT 2
37034: NEG
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 1
37042: PUSH
37043: LD_INT 1
37045: NEG
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 1
37053: PUSH
37054: LD_INT 2
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 0
37063: PUSH
37064: LD_INT 2
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 1
37073: NEG
37074: PUSH
37075: LD_INT 1
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 1
37084: NEG
37085: PUSH
37086: LD_INT 3
37088: NEG
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 0
37096: PUSH
37097: LD_INT 3
37099: NEG
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 1
37107: PUSH
37108: LD_INT 2
37110: NEG
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37134: LD_ADDR_VAR 0 15
37138: PUSH
37139: LD_INT 0
37141: PUSH
37142: LD_INT 0
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 0
37151: PUSH
37152: LD_INT 1
37154: NEG
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 1
37162: PUSH
37163: LD_INT 0
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 1
37172: PUSH
37173: LD_INT 1
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 0
37182: PUSH
37183: LD_INT 1
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 1
37192: NEG
37193: PUSH
37194: LD_INT 0
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 1
37203: NEG
37204: PUSH
37205: LD_INT 1
37207: NEG
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 1
37215: PUSH
37216: LD_INT 1
37218: NEG
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 2
37226: PUSH
37227: LD_INT 0
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 2
37236: PUSH
37237: LD_INT 1
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 1
37246: NEG
37247: PUSH
37248: LD_INT 1
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 2
37257: NEG
37258: PUSH
37259: LD_INT 0
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 2
37268: NEG
37269: PUSH
37270: LD_INT 1
37272: NEG
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 2
37280: PUSH
37281: LD_INT 1
37283: NEG
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: LD_INT 3
37291: PUSH
37292: LD_INT 0
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 3
37301: PUSH
37302: LD_INT 1
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37327: LD_ADDR_VAR 0 16
37331: PUSH
37332: LD_INT 0
37334: PUSH
37335: LD_INT 0
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 0
37344: PUSH
37345: LD_INT 1
37347: NEG
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 1
37355: PUSH
37356: LD_INT 0
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 1
37365: PUSH
37366: LD_INT 1
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 0
37375: PUSH
37376: LD_INT 1
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 1
37385: NEG
37386: PUSH
37387: LD_INT 0
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 1
37396: NEG
37397: PUSH
37398: LD_INT 1
37400: NEG
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 1
37408: NEG
37409: PUSH
37410: LD_INT 2
37412: NEG
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 2
37420: PUSH
37421: LD_INT 1
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 2
37430: PUSH
37431: LD_INT 2
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 1
37440: PUSH
37441: LD_INT 2
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 2
37450: NEG
37451: PUSH
37452: LD_INT 1
37454: NEG
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 2
37462: NEG
37463: PUSH
37464: LD_INT 2
37466: NEG
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 3
37474: PUSH
37475: LD_INT 2
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 3
37484: PUSH
37485: LD_INT 3
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 2
37494: PUSH
37495: LD_INT 3
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37520: LD_ADDR_VAR 0 17
37524: PUSH
37525: LD_INT 0
37527: PUSH
37528: LD_INT 0
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 0
37537: PUSH
37538: LD_INT 1
37540: NEG
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 1
37548: PUSH
37549: LD_INT 0
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 1
37558: PUSH
37559: LD_INT 1
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 0
37568: PUSH
37569: LD_INT 1
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: PUSH
37576: LD_INT 1
37578: NEG
37579: PUSH
37580: LD_INT 0
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 1
37589: NEG
37590: PUSH
37591: LD_INT 1
37593: NEG
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 1
37601: NEG
37602: PUSH
37603: LD_INT 2
37605: NEG
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 0
37613: PUSH
37614: LD_INT 2
37616: NEG
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 1
37624: PUSH
37625: LD_INT 1
37627: NEG
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 2
37635: PUSH
37636: LD_INT 0
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 2
37645: PUSH
37646: LD_INT 1
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 2
37655: PUSH
37656: LD_INT 2
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 1
37665: PUSH
37666: LD_INT 2
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 0
37675: PUSH
37676: LD_INT 2
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 1
37685: NEG
37686: PUSH
37687: LD_INT 1
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 2
37696: NEG
37697: PUSH
37698: LD_INT 0
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 2
37707: NEG
37708: PUSH
37709: LD_INT 1
37711: NEG
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 2
37719: NEG
37720: PUSH
37721: LD_INT 2
37723: NEG
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37750: LD_ADDR_VAR 0 18
37754: PUSH
37755: LD_INT 0
37757: PUSH
37758: LD_INT 0
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 0
37767: PUSH
37768: LD_INT 1
37770: NEG
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 1
37778: PUSH
37779: LD_INT 0
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 1
37788: PUSH
37789: LD_INT 1
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 0
37798: PUSH
37799: LD_INT 1
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 1
37808: NEG
37809: PUSH
37810: LD_INT 0
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 1
37819: NEG
37820: PUSH
37821: LD_INT 1
37823: NEG
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 1
37831: NEG
37832: PUSH
37833: LD_INT 2
37835: NEG
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 0
37843: PUSH
37844: LD_INT 2
37846: NEG
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 1
37854: PUSH
37855: LD_INT 1
37857: NEG
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 2
37865: PUSH
37866: LD_INT 0
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 2
37875: PUSH
37876: LD_INT 1
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 2
37885: PUSH
37886: LD_INT 2
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 1
37895: PUSH
37896: LD_INT 2
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 0
37905: PUSH
37906: LD_INT 2
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 1
37915: NEG
37916: PUSH
37917: LD_INT 1
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 2
37926: NEG
37927: PUSH
37928: LD_INT 0
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PUSH
37935: LD_INT 2
37937: NEG
37938: PUSH
37939: LD_INT 1
37941: NEG
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 2
37949: NEG
37950: PUSH
37951: LD_INT 2
37953: NEG
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37980: LD_ADDR_VAR 0 19
37984: PUSH
37985: LD_INT 0
37987: PUSH
37988: LD_INT 0
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 0
37997: PUSH
37998: LD_INT 1
38000: NEG
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 1
38008: PUSH
38009: LD_INT 0
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 1
38018: PUSH
38019: LD_INT 1
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 0
38028: PUSH
38029: LD_INT 1
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 1
38038: NEG
38039: PUSH
38040: LD_INT 0
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 1
38049: NEG
38050: PUSH
38051: LD_INT 1
38053: NEG
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 1
38061: NEG
38062: PUSH
38063: LD_INT 2
38065: NEG
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 0
38073: PUSH
38074: LD_INT 2
38076: NEG
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 1
38084: PUSH
38085: LD_INT 1
38087: NEG
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 2
38095: PUSH
38096: LD_INT 0
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 2
38105: PUSH
38106: LD_INT 1
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 2
38115: PUSH
38116: LD_INT 2
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 1
38125: PUSH
38126: LD_INT 2
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 0
38135: PUSH
38136: LD_INT 2
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 1
38145: NEG
38146: PUSH
38147: LD_INT 1
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 2
38156: NEG
38157: PUSH
38158: LD_INT 0
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 2
38167: NEG
38168: PUSH
38169: LD_INT 1
38171: NEG
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 2
38179: NEG
38180: PUSH
38181: LD_INT 2
38183: NEG
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38210: LD_ADDR_VAR 0 20
38214: PUSH
38215: LD_INT 0
38217: PUSH
38218: LD_INT 0
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: LD_INT 1
38230: NEG
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 1
38238: PUSH
38239: LD_INT 0
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 1
38248: PUSH
38249: LD_INT 1
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 0
38258: PUSH
38259: LD_INT 1
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 1
38268: NEG
38269: PUSH
38270: LD_INT 0
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 1
38279: NEG
38280: PUSH
38281: LD_INT 1
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 1
38291: NEG
38292: PUSH
38293: LD_INT 2
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 0
38303: PUSH
38304: LD_INT 2
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 1
38314: PUSH
38315: LD_INT 1
38317: NEG
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 2
38325: PUSH
38326: LD_INT 0
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 2
38335: PUSH
38336: LD_INT 1
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 2
38345: PUSH
38346: LD_INT 2
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 1
38355: PUSH
38356: LD_INT 2
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 0
38365: PUSH
38366: LD_INT 2
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 1
38375: NEG
38376: PUSH
38377: LD_INT 1
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 2
38386: NEG
38387: PUSH
38388: LD_INT 0
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 2
38397: NEG
38398: PUSH
38399: LD_INT 1
38401: NEG
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 2
38409: NEG
38410: PUSH
38411: LD_INT 2
38413: NEG
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38440: LD_ADDR_VAR 0 21
38444: PUSH
38445: LD_INT 0
38447: PUSH
38448: LD_INT 0
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 0
38457: PUSH
38458: LD_INT 1
38460: NEG
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 1
38468: PUSH
38469: LD_INT 0
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: LD_INT 1
38478: PUSH
38479: LD_INT 1
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 0
38488: PUSH
38489: LD_INT 1
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 1
38498: NEG
38499: PUSH
38500: LD_INT 0
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 1
38509: NEG
38510: PUSH
38511: LD_INT 1
38513: NEG
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 1
38521: NEG
38522: PUSH
38523: LD_INT 2
38525: NEG
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 0
38533: PUSH
38534: LD_INT 2
38536: NEG
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 1
38544: PUSH
38545: LD_INT 1
38547: NEG
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 2
38555: PUSH
38556: LD_INT 0
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 2
38565: PUSH
38566: LD_INT 1
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 2
38575: PUSH
38576: LD_INT 2
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 1
38585: PUSH
38586: LD_INT 2
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 0
38595: PUSH
38596: LD_INT 2
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 1
38605: NEG
38606: PUSH
38607: LD_INT 1
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 2
38616: NEG
38617: PUSH
38618: LD_INT 0
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 2
38627: NEG
38628: PUSH
38629: LD_INT 1
38631: NEG
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 2
38639: NEG
38640: PUSH
38641: LD_INT 2
38643: NEG
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38670: LD_ADDR_VAR 0 22
38674: PUSH
38675: LD_INT 0
38677: PUSH
38678: LD_INT 0
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 0
38687: PUSH
38688: LD_INT 1
38690: NEG
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 1
38698: PUSH
38699: LD_INT 0
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 1
38708: PUSH
38709: LD_INT 1
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 0
38718: PUSH
38719: LD_INT 1
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 1
38728: NEG
38729: PUSH
38730: LD_INT 0
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 1
38739: NEG
38740: PUSH
38741: LD_INT 1
38743: NEG
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 1
38751: NEG
38752: PUSH
38753: LD_INT 2
38755: NEG
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 0
38763: PUSH
38764: LD_INT 2
38766: NEG
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 1
38774: PUSH
38775: LD_INT 1
38777: NEG
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 2
38785: PUSH
38786: LD_INT 0
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 2
38795: PUSH
38796: LD_INT 1
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 2
38805: PUSH
38806: LD_INT 2
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 1
38815: PUSH
38816: LD_INT 2
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 0
38825: PUSH
38826: LD_INT 2
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 1
38835: NEG
38836: PUSH
38837: LD_INT 1
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 2
38846: NEG
38847: PUSH
38848: LD_INT 0
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 2
38857: NEG
38858: PUSH
38859: LD_INT 1
38861: NEG
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 2
38869: NEG
38870: PUSH
38871: LD_INT 2
38873: NEG
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38900: LD_ADDR_VAR 0 23
38904: PUSH
38905: LD_INT 0
38907: PUSH
38908: LD_INT 0
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: LD_INT 1
38920: NEG
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 1
38928: PUSH
38929: LD_INT 0
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 1
38938: PUSH
38939: LD_INT 1
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 0
38948: PUSH
38949: LD_INT 1
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 1
38958: NEG
38959: PUSH
38960: LD_INT 0
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 1
38969: NEG
38970: PUSH
38971: LD_INT 1
38973: NEG
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 1
38981: NEG
38982: PUSH
38983: LD_INT 2
38985: NEG
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 0
38993: PUSH
38994: LD_INT 2
38996: NEG
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 1
39004: PUSH
39005: LD_INT 1
39007: NEG
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 2
39015: PUSH
39016: LD_INT 0
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 2
39025: PUSH
39026: LD_INT 1
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 2
39035: PUSH
39036: LD_INT 2
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 1
39045: PUSH
39046: LD_INT 2
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 0
39055: PUSH
39056: LD_INT 2
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 1
39065: NEG
39066: PUSH
39067: LD_INT 1
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 2
39076: NEG
39077: PUSH
39078: LD_INT 0
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 2
39087: NEG
39088: PUSH
39089: LD_INT 1
39091: NEG
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 2
39099: NEG
39100: PUSH
39101: LD_INT 2
39103: NEG
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 2
39111: NEG
39112: PUSH
39113: LD_INT 3
39115: NEG
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 1
39123: NEG
39124: PUSH
39125: LD_INT 3
39127: NEG
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 1
39135: PUSH
39136: LD_INT 2
39138: NEG
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 2
39146: PUSH
39147: LD_INT 1
39149: NEG
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39180: LD_ADDR_VAR 0 24
39184: PUSH
39185: LD_INT 0
39187: PUSH
39188: LD_INT 0
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 0
39197: PUSH
39198: LD_INT 1
39200: NEG
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 1
39208: PUSH
39209: LD_INT 0
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 1
39218: PUSH
39219: LD_INT 1
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 0
39228: PUSH
39229: LD_INT 1
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 1
39238: NEG
39239: PUSH
39240: LD_INT 0
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 1
39249: NEG
39250: PUSH
39251: LD_INT 1
39253: NEG
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 1
39261: NEG
39262: PUSH
39263: LD_INT 2
39265: NEG
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 0
39273: PUSH
39274: LD_INT 2
39276: NEG
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 1
39284: PUSH
39285: LD_INT 1
39287: NEG
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 2
39295: PUSH
39296: LD_INT 0
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 2
39305: PUSH
39306: LD_INT 1
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 2
39315: PUSH
39316: LD_INT 2
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 1
39325: PUSH
39326: LD_INT 2
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: LD_INT 2
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 1
39345: NEG
39346: PUSH
39347: LD_INT 1
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 2
39356: NEG
39357: PUSH
39358: LD_INT 0
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 2
39367: NEG
39368: PUSH
39369: LD_INT 1
39371: NEG
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 2
39379: NEG
39380: PUSH
39381: LD_INT 2
39383: NEG
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 1
39391: PUSH
39392: LD_INT 2
39394: NEG
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 2
39402: PUSH
39403: LD_INT 1
39405: NEG
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 3
39413: PUSH
39414: LD_INT 1
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 3
39423: PUSH
39424: LD_INT 2
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39456: LD_ADDR_VAR 0 25
39460: PUSH
39461: LD_INT 0
39463: PUSH
39464: LD_INT 0
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 0
39473: PUSH
39474: LD_INT 1
39476: NEG
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 1
39484: PUSH
39485: LD_INT 0
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 1
39494: PUSH
39495: LD_INT 1
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 0
39504: PUSH
39505: LD_INT 1
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 1
39514: NEG
39515: PUSH
39516: LD_INT 0
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 1
39525: NEG
39526: PUSH
39527: LD_INT 1
39529: NEG
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 1
39537: NEG
39538: PUSH
39539: LD_INT 2
39541: NEG
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 0
39549: PUSH
39550: LD_INT 2
39552: NEG
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 1
39560: PUSH
39561: LD_INT 1
39563: NEG
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 2
39571: PUSH
39572: LD_INT 0
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 2
39581: PUSH
39582: LD_INT 1
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 2
39591: PUSH
39592: LD_INT 2
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 1
39601: PUSH
39602: LD_INT 2
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 0
39611: PUSH
39612: LD_INT 2
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 1
39621: NEG
39622: PUSH
39623: LD_INT 1
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 2
39632: NEG
39633: PUSH
39634: LD_INT 0
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 2
39643: NEG
39644: PUSH
39645: LD_INT 1
39647: NEG
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 2
39655: NEG
39656: PUSH
39657: LD_INT 2
39659: NEG
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 3
39667: PUSH
39668: LD_INT 1
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 3
39677: PUSH
39678: LD_INT 2
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 2
39687: PUSH
39688: LD_INT 3
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 1
39697: PUSH
39698: LD_INT 3
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39730: LD_ADDR_VAR 0 26
39734: PUSH
39735: LD_INT 0
39737: PUSH
39738: LD_INT 0
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 0
39747: PUSH
39748: LD_INT 1
39750: NEG
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 1
39758: PUSH
39759: LD_INT 0
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 1
39768: PUSH
39769: LD_INT 1
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 0
39778: PUSH
39779: LD_INT 1
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 1
39788: NEG
39789: PUSH
39790: LD_INT 0
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 1
39799: NEG
39800: PUSH
39801: LD_INT 1
39803: NEG
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 1
39811: NEG
39812: PUSH
39813: LD_INT 2
39815: NEG
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 0
39823: PUSH
39824: LD_INT 2
39826: NEG
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 1
39834: PUSH
39835: LD_INT 1
39837: NEG
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 2
39845: PUSH
39846: LD_INT 0
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 2
39855: PUSH
39856: LD_INT 1
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 2
39865: PUSH
39866: LD_INT 2
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 1
39875: PUSH
39876: LD_INT 2
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 0
39885: PUSH
39886: LD_INT 2
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 1
39895: NEG
39896: PUSH
39897: LD_INT 1
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 2
39906: NEG
39907: PUSH
39908: LD_INT 0
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 2
39917: NEG
39918: PUSH
39919: LD_INT 1
39921: NEG
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 2
39929: NEG
39930: PUSH
39931: LD_INT 2
39933: NEG
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 2
39941: PUSH
39942: LD_INT 3
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 1
39951: PUSH
39952: LD_INT 3
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 1
39961: NEG
39962: PUSH
39963: LD_INT 2
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 2
39972: NEG
39973: PUSH
39974: LD_INT 1
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40006: LD_ADDR_VAR 0 27
40010: PUSH
40011: LD_INT 0
40013: PUSH
40014: LD_INT 0
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 0
40023: PUSH
40024: LD_INT 1
40026: NEG
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 1
40034: PUSH
40035: LD_INT 0
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 1
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 0
40054: PUSH
40055: LD_INT 1
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 1
40064: NEG
40065: PUSH
40066: LD_INT 0
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: PUSH
40077: LD_INT 1
40079: NEG
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 1
40087: NEG
40088: PUSH
40089: LD_INT 2
40091: NEG
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 0
40099: PUSH
40100: LD_INT 2
40102: NEG
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 1
40110: PUSH
40111: LD_INT 1
40113: NEG
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 2
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 2
40131: PUSH
40132: LD_INT 1
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 2
40141: PUSH
40142: LD_INT 2
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 1
40151: PUSH
40152: LD_INT 2
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 0
40161: PUSH
40162: LD_INT 2
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 1
40171: NEG
40172: PUSH
40173: LD_INT 1
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 2
40182: NEG
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 2
40193: NEG
40194: PUSH
40195: LD_INT 1
40197: NEG
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 2
40205: NEG
40206: PUSH
40207: LD_INT 2
40209: NEG
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 1
40217: NEG
40218: PUSH
40219: LD_INT 2
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 2
40228: NEG
40229: PUSH
40230: LD_INT 1
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 3
40239: NEG
40240: PUSH
40241: LD_INT 1
40243: NEG
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 3
40251: NEG
40252: PUSH
40253: LD_INT 2
40255: NEG
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40286: LD_ADDR_VAR 0 28
40290: PUSH
40291: LD_INT 0
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 0
40303: PUSH
40304: LD_INT 1
40306: NEG
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 1
40314: PUSH
40315: LD_INT 0
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 1
40324: PUSH
40325: LD_INT 1
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 0
40334: PUSH
40335: LD_INT 1
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 1
40344: NEG
40345: PUSH
40346: LD_INT 0
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 1
40355: NEG
40356: PUSH
40357: LD_INT 1
40359: NEG
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 1
40367: NEG
40368: PUSH
40369: LD_INT 2
40371: NEG
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 0
40379: PUSH
40380: LD_INT 2
40382: NEG
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 1
40390: PUSH
40391: LD_INT 1
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 2
40401: PUSH
40402: LD_INT 0
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 2
40411: PUSH
40412: LD_INT 1
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 2
40421: PUSH
40422: LD_INT 2
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 1
40431: PUSH
40432: LD_INT 2
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: LD_INT 2
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 1
40451: NEG
40452: PUSH
40453: LD_INT 1
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 2
40462: NEG
40463: PUSH
40464: LD_INT 0
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 2
40473: NEG
40474: PUSH
40475: LD_INT 1
40477: NEG
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 2
40485: NEG
40486: PUSH
40487: LD_INT 2
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 2
40497: NEG
40498: PUSH
40499: LD_INT 3
40501: NEG
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: LD_INT 3
40513: NEG
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 3
40521: NEG
40522: PUSH
40523: LD_INT 1
40525: NEG
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 3
40533: NEG
40534: PUSH
40535: LD_INT 2
40537: NEG
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40568: LD_ADDR_VAR 0 29
40572: PUSH
40573: LD_INT 0
40575: PUSH
40576: LD_INT 0
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: LD_INT 1
40588: NEG
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 1
40596: PUSH
40597: LD_INT 0
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: LD_INT 1
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: LD_INT 1
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 1
40626: NEG
40627: PUSH
40628: LD_INT 0
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 1
40637: NEG
40638: PUSH
40639: LD_INT 1
40641: NEG
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 1
40649: NEG
40650: PUSH
40651: LD_INT 2
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: LD_INT 2
40664: NEG
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 1
40672: PUSH
40673: LD_INT 1
40675: NEG
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 2
40683: PUSH
40684: LD_INT 0
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 2
40693: PUSH
40694: LD_INT 1
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 1
40703: PUSH
40704: LD_INT 2
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 0
40713: PUSH
40714: LD_INT 2
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 1
40723: NEG
40724: PUSH
40725: LD_INT 1
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 2
40734: NEG
40735: PUSH
40736: LD_INT 1
40738: NEG
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 2
40746: NEG
40747: PUSH
40748: LD_INT 2
40750: NEG
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 2
40758: NEG
40759: PUSH
40760: LD_INT 3
40762: NEG
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 2
40770: PUSH
40771: LD_INT 1
40773: NEG
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 3
40781: PUSH
40782: LD_INT 1
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 1
40791: PUSH
40792: LD_INT 3
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 1
40801: NEG
40802: PUSH
40803: LD_INT 2
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 3
40812: NEG
40813: PUSH
40814: LD_INT 2
40816: NEG
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40847: LD_ADDR_VAR 0 30
40851: PUSH
40852: LD_INT 0
40854: PUSH
40855: LD_INT 0
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 0
40864: PUSH
40865: LD_INT 1
40867: NEG
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 1
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 1
40885: PUSH
40886: LD_INT 1
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 0
40895: PUSH
40896: LD_INT 1
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 1
40905: NEG
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 1
40916: NEG
40917: PUSH
40918: LD_INT 1
40920: NEG
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 1
40928: NEG
40929: PUSH
40930: LD_INT 2
40932: NEG
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 0
40940: PUSH
40941: LD_INT 2
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 1
40951: PUSH
40952: LD_INT 1
40954: NEG
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 2
40962: PUSH
40963: LD_INT 0
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 2
40972: PUSH
40973: LD_INT 1
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 2
40982: PUSH
40983: LD_INT 2
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 1
40992: PUSH
40993: LD_INT 2
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 1
41002: NEG
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 2
41013: NEG
41014: PUSH
41015: LD_INT 0
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 2
41024: NEG
41025: PUSH
41026: LD_INT 1
41028: NEG
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 1
41036: NEG
41037: PUSH
41038: LD_INT 3
41040: NEG
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 1
41048: PUSH
41049: LD_INT 2
41051: NEG
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 3
41059: PUSH
41060: LD_INT 2
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 2
41069: PUSH
41070: LD_INT 3
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 2
41079: NEG
41080: PUSH
41081: LD_INT 1
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 3
41090: NEG
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41125: LD_ADDR_VAR 0 31
41129: PUSH
41130: LD_INT 0
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 0
41142: PUSH
41143: LD_INT 1
41145: NEG
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 1
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 1
41163: PUSH
41164: LD_INT 1
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 0
41173: PUSH
41174: LD_INT 1
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 1
41183: NEG
41184: PUSH
41185: LD_INT 0
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 1
41194: NEG
41195: PUSH
41196: LD_INT 1
41198: NEG
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 1
41206: NEG
41207: PUSH
41208: LD_INT 2
41210: NEG
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 1
41218: PUSH
41219: LD_INT 1
41221: NEG
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 2
41229: PUSH
41230: LD_INT 0
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 2
41239: PUSH
41240: LD_INT 1
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 2
41249: PUSH
41250: LD_INT 2
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: LD_INT 2
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 0
41269: PUSH
41270: LD_INT 2
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 1
41279: NEG
41280: PUSH
41281: LD_INT 1
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 2
41290: NEG
41291: PUSH
41292: LD_INT 1
41294: NEG
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 2
41302: NEG
41303: PUSH
41304: LD_INT 2
41306: NEG
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 2
41314: NEG
41315: PUSH
41316: LD_INT 3
41318: NEG
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 2
41326: PUSH
41327: LD_INT 1
41329: NEG
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 3
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 1
41347: PUSH
41348: LD_INT 3
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 1
41357: NEG
41358: PUSH
41359: LD_INT 2
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 3
41368: NEG
41369: PUSH
41370: LD_INT 2
41372: NEG
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41403: LD_ADDR_VAR 0 32
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: LD_INT 0
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 0
41420: PUSH
41421: LD_INT 1
41423: NEG
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 1
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: LD_INT 1
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 0
41451: PUSH
41452: LD_INT 1
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 1
41461: NEG
41462: PUSH
41463: LD_INT 0
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 1
41472: NEG
41473: PUSH
41474: LD_INT 1
41476: NEG
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 1
41484: NEG
41485: PUSH
41486: LD_INT 2
41488: NEG
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 0
41496: PUSH
41497: LD_INT 2
41499: NEG
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 1
41507: PUSH
41508: LD_INT 1
41510: NEG
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 2
41518: PUSH
41519: LD_INT 1
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 2
41528: PUSH
41529: LD_INT 2
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 1
41538: PUSH
41539: LD_INT 2
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 0
41548: PUSH
41549: LD_INT 2
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 1
41558: NEG
41559: PUSH
41560: LD_INT 1
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 2
41569: NEG
41570: PUSH
41571: LD_INT 0
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 2
41580: NEG
41581: PUSH
41582: LD_INT 1
41584: NEG
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 1
41592: NEG
41593: PUSH
41594: LD_INT 3
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 1
41604: PUSH
41605: LD_INT 2
41607: NEG
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 3
41615: PUSH
41616: LD_INT 2
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 2
41625: PUSH
41626: LD_INT 3
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 2
41635: NEG
41636: PUSH
41637: LD_INT 1
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 3
41646: NEG
41647: PUSH
41648: LD_INT 1
41650: NEG
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41681: LD_ADDR_VAR 0 33
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: LD_INT 0
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 0
41698: PUSH
41699: LD_INT 1
41701: NEG
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: LD_INT 1
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 0
41729: PUSH
41730: LD_INT 1
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 1
41739: NEG
41740: PUSH
41741: LD_INT 0
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 1
41750: NEG
41751: PUSH
41752: LD_INT 1
41754: NEG
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 1
41762: NEG
41763: PUSH
41764: LD_INT 2
41766: NEG
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 1
41774: PUSH
41775: LD_INT 1
41777: NEG
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 2
41785: PUSH
41786: LD_INT 0
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 2
41795: PUSH
41796: LD_INT 1
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 1
41805: PUSH
41806: LD_INT 2
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 0
41815: PUSH
41816: LD_INT 2
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 1
41825: NEG
41826: PUSH
41827: LD_INT 1
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 2
41836: NEG
41837: PUSH
41838: LD_INT 0
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 2
41847: NEG
41848: PUSH
41849: LD_INT 1
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 2
41859: NEG
41860: PUSH
41861: LD_INT 2
41863: NEG
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 2
41871: NEG
41872: PUSH
41873: LD_INT 3
41875: NEG
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 2
41883: PUSH
41884: LD_INT 1
41886: NEG
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 3
41894: PUSH
41895: LD_INT 1
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 1
41904: PUSH
41905: LD_INT 3
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: PUSH
41916: LD_INT 2
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 3
41925: NEG
41926: PUSH
41927: LD_INT 2
41929: NEG
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41960: LD_ADDR_VAR 0 34
41964: PUSH
41965: LD_INT 0
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 0
41977: PUSH
41978: LD_INT 1
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 1
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 1
41998: PUSH
41999: LD_INT 1
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: LD_INT 1
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 1
42018: NEG
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 1
42029: NEG
42030: PUSH
42031: LD_INT 1
42033: NEG
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 1
42041: NEG
42042: PUSH
42043: LD_INT 2
42045: NEG
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: LD_INT 2
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 1
42064: PUSH
42065: LD_INT 1
42067: NEG
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 2
42075: PUSH
42076: LD_INT 1
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 2
42085: PUSH
42086: LD_INT 2
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 1
42095: PUSH
42096: LD_INT 2
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 1
42105: NEG
42106: PUSH
42107: LD_INT 1
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 2
42116: NEG
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 2
42127: NEG
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 2
42139: NEG
42140: PUSH
42141: LD_INT 2
42143: NEG
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 1
42151: NEG
42152: PUSH
42153: LD_INT 3
42155: NEG
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 1
42163: PUSH
42164: LD_INT 2
42166: NEG
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 3
42174: PUSH
42175: LD_INT 2
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 2
42184: PUSH
42185: LD_INT 3
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 2
42194: NEG
42195: PUSH
42196: LD_INT 1
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 3
42205: NEG
42206: PUSH
42207: LD_INT 1
42209: NEG
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42240: LD_ADDR_VAR 0 35
42244: PUSH
42245: LD_INT 0
42247: PUSH
42248: LD_INT 0
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: LD_INT 1
42260: NEG
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 1
42268: PUSH
42269: LD_INT 0
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 1
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 0
42288: PUSH
42289: LD_INT 1
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 1
42309: NEG
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 2
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 2
42331: NEG
42332: PUSH
42333: LD_INT 1
42335: NEG
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42352: LD_ADDR_VAR 0 36
42356: PUSH
42357: LD_INT 0
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 0
42369: PUSH
42370: LD_INT 1
42372: NEG
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 1
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 1
42390: PUSH
42391: LD_INT 1
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: LD_INT 1
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 1
42421: NEG
42422: PUSH
42423: LD_INT 1
42425: NEG
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 1
42433: NEG
42434: PUSH
42435: LD_INT 2
42437: NEG
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 1
42445: PUSH
42446: LD_INT 2
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42464: LD_ADDR_VAR 0 37
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: LD_INT 0
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 0
42481: PUSH
42482: LD_INT 1
42484: NEG
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 1
42492: PUSH
42493: LD_INT 0
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: LD_INT 1
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 0
42512: PUSH
42513: LD_INT 1
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 1
42522: NEG
42523: PUSH
42524: LD_INT 0
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 1
42533: NEG
42534: PUSH
42535: LD_INT 1
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 1
42545: PUSH
42546: LD_INT 1
42548: NEG
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 1
42556: NEG
42557: PUSH
42558: LD_INT 1
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42576: LD_ADDR_VAR 0 38
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: LD_INT 0
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: LD_INT 1
42596: NEG
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 1
42604: PUSH
42605: LD_INT 0
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 1
42614: PUSH
42615: LD_INT 1
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 0
42624: PUSH
42625: LD_INT 1
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 1
42634: NEG
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 1
42645: NEG
42646: PUSH
42647: LD_INT 1
42649: NEG
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 2
42657: PUSH
42658: LD_INT 1
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 2
42667: NEG
42668: PUSH
42669: LD_INT 1
42671: NEG
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42688: LD_ADDR_VAR 0 39
42692: PUSH
42693: LD_INT 0
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 0
42705: PUSH
42706: LD_INT 1
42708: NEG
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: PUSH
42717: LD_INT 0
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 1
42726: PUSH
42727: LD_INT 1
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: LD_INT 1
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 1
42746: NEG
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 1
42757: NEG
42758: PUSH
42759: LD_INT 1
42761: NEG
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 1
42769: NEG
42770: PUSH
42771: LD_INT 2
42773: NEG
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 1
42781: PUSH
42782: LD_INT 2
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42800: LD_ADDR_VAR 0 40
42804: PUSH
42805: LD_INT 0
42807: PUSH
42808: LD_INT 0
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: LD_INT 1
42820: NEG
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 1
42828: PUSH
42829: LD_INT 0
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 1
42838: PUSH
42839: LD_INT 1
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: LD_INT 1
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 1
42858: NEG
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 1
42869: NEG
42870: PUSH
42871: LD_INT 1
42873: NEG
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 1
42881: PUSH
42882: LD_INT 1
42884: NEG
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 1
42892: NEG
42893: PUSH
42894: LD_INT 1
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42912: LD_ADDR_VAR 0 41
42916: PUSH
42917: LD_INT 0
42919: PUSH
42920: LD_INT 0
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: LD_INT 1
42932: NEG
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 1
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: PUSH
42951: LD_INT 1
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 0
42960: PUSH
42961: LD_INT 1
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 1
42970: NEG
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 1
42981: NEG
42982: PUSH
42983: LD_INT 1
42985: NEG
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 1
42993: NEG
42994: PUSH
42995: LD_INT 2
42997: NEG
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 1
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 2
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 2
43026: PUSH
43027: LD_INT 1
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 2
43036: PUSH
43037: LD_INT 2
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 1
43046: PUSH
43047: LD_INT 2
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 1
43056: NEG
43057: PUSH
43058: LD_INT 1
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 2
43067: NEG
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 2
43078: NEG
43079: PUSH
43080: LD_INT 1
43082: NEG
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 2
43090: NEG
43091: PUSH
43092: LD_INT 2
43094: NEG
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 2
43102: NEG
43103: PUSH
43104: LD_INT 3
43106: NEG
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 2
43114: PUSH
43115: LD_INT 1
43117: NEG
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 3
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 3
43135: PUSH
43136: LD_INT 1
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 3
43145: PUSH
43146: LD_INT 2
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 3
43155: PUSH
43156: LD_INT 3
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 2
43165: PUSH
43166: LD_INT 3
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 2
43175: NEG
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 3
43186: NEG
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 3
43197: NEG
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 3
43209: NEG
43210: PUSH
43211: LD_INT 2
43213: NEG
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 3
43221: NEG
43222: PUSH
43223: LD_INT 3
43225: NEG
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43262: LD_ADDR_VAR 0 42
43266: PUSH
43267: LD_INT 0
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 0
43279: PUSH
43280: LD_INT 1
43282: NEG
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 1
43290: PUSH
43291: LD_INT 0
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 1
43300: PUSH
43301: LD_INT 1
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 0
43310: PUSH
43311: LD_INT 1
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 1
43320: NEG
43321: PUSH
43322: LD_INT 0
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 1
43331: NEG
43332: PUSH
43333: LD_INT 1
43335: NEG
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 1
43343: NEG
43344: PUSH
43345: LD_INT 2
43347: NEG
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 0
43355: PUSH
43356: LD_INT 2
43358: NEG
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 1
43366: PUSH
43367: LD_INT 1
43369: NEG
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 2
43377: PUSH
43378: LD_INT 1
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 2
43387: PUSH
43388: LD_INT 2
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 1
43397: PUSH
43398: LD_INT 2
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 0
43407: PUSH
43408: LD_INT 2
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 1
43417: NEG
43418: PUSH
43419: LD_INT 1
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 2
43428: NEG
43429: PUSH
43430: LD_INT 1
43432: NEG
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 2
43440: NEG
43441: PUSH
43442: LD_INT 2
43444: NEG
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 2
43452: NEG
43453: PUSH
43454: LD_INT 3
43456: NEG
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 1
43464: NEG
43465: PUSH
43466: LD_INT 3
43468: NEG
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: LD_INT 3
43479: NEG
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 1
43487: PUSH
43488: LD_INT 2
43490: NEG
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 3
43498: PUSH
43499: LD_INT 2
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 3
43508: PUSH
43509: LD_INT 3
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 2
43518: PUSH
43519: LD_INT 3
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 1
43528: PUSH
43529: LD_INT 3
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: LD_INT 3
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 1
43548: NEG
43549: PUSH
43550: LD_INT 2
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 3
43559: NEG
43560: PUSH
43561: LD_INT 2
43563: NEG
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 3
43571: NEG
43572: PUSH
43573: LD_INT 3
43575: NEG
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43612: LD_ADDR_VAR 0 43
43616: PUSH
43617: LD_INT 0
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 0
43629: PUSH
43630: LD_INT 1
43632: NEG
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 1
43640: PUSH
43641: LD_INT 0
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 1
43650: PUSH
43651: LD_INT 1
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: LD_INT 1
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 1
43670: NEG
43671: PUSH
43672: LD_INT 0
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 1
43681: NEG
43682: PUSH
43683: LD_INT 1
43685: NEG
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 1
43693: NEG
43694: PUSH
43695: LD_INT 2
43697: NEG
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: LD_INT 2
43708: NEG
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 1
43716: PUSH
43717: LD_INT 1
43719: NEG
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 2
43727: PUSH
43728: LD_INT 0
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 2
43737: PUSH
43738: LD_INT 1
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: LD_INT 2
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: LD_INT 2
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: LD_INT 1
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 2
43778: NEG
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 2
43789: NEG
43790: PUSH
43791: LD_INT 1
43793: NEG
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 1
43801: NEG
43802: PUSH
43803: LD_INT 3
43805: NEG
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: LD_INT 3
43816: NEG
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 1
43824: PUSH
43825: LD_INT 2
43827: NEG
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 2
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 3
43846: PUSH
43847: LD_INT 0
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 3
43856: PUSH
43857: LD_INT 1
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 1
43866: PUSH
43867: LD_INT 3
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 0
43876: PUSH
43877: LD_INT 3
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: NEG
43887: PUSH
43888: LD_INT 2
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 2
43897: NEG
43898: PUSH
43899: LD_INT 1
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 3
43908: NEG
43909: PUSH
43910: LD_INT 0
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 3
43919: NEG
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43960: LD_ADDR_VAR 0 44
43964: PUSH
43965: LD_INT 0
43967: PUSH
43968: LD_INT 0
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 0
43977: PUSH
43978: LD_INT 1
43980: NEG
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 1
43988: PUSH
43989: LD_INT 0
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 1
43998: PUSH
43999: LD_INT 1
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 0
44008: PUSH
44009: LD_INT 1
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 1
44018: NEG
44019: PUSH
44020: LD_INT 0
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 1
44029: NEG
44030: PUSH
44031: LD_INT 1
44033: NEG
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 1
44041: NEG
44042: PUSH
44043: LD_INT 2
44045: NEG
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 1
44053: PUSH
44054: LD_INT 1
44056: NEG
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 2
44064: PUSH
44065: LD_INT 0
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 2
44074: PUSH
44075: LD_INT 1
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 2
44084: PUSH
44085: LD_INT 2
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 1
44094: PUSH
44095: LD_INT 2
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 1
44104: NEG
44105: PUSH
44106: LD_INT 1
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 2
44115: NEG
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 2
44126: NEG
44127: PUSH
44128: LD_INT 1
44130: NEG
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 2
44138: NEG
44139: PUSH
44140: LD_INT 2
44142: NEG
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 2
44150: NEG
44151: PUSH
44152: LD_INT 3
44154: NEG
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 2
44162: PUSH
44163: LD_INT 1
44165: NEG
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 3
44173: PUSH
44174: LD_INT 0
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 3
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 3
44193: PUSH
44194: LD_INT 2
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 3
44203: PUSH
44204: LD_INT 3
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 2
44213: PUSH
44214: LD_INT 3
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 2
44223: NEG
44224: PUSH
44225: LD_INT 1
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 3
44234: NEG
44235: PUSH
44236: LD_INT 0
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 3
44245: NEG
44246: PUSH
44247: LD_INT 1
44249: NEG
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 3
44257: NEG
44258: PUSH
44259: LD_INT 2
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 3
44269: NEG
44270: PUSH
44271: LD_INT 3
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44310: LD_ADDR_VAR 0 45
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: LD_INT 1
44330: NEG
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 1
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: LD_INT 1
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 0
44358: PUSH
44359: LD_INT 1
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: NEG
44369: PUSH
44370: LD_INT 0
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: LD_INT 1
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: NEG
44392: PUSH
44393: LD_INT 2
44395: NEG
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 0
44403: PUSH
44404: LD_INT 2
44406: NEG
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 1
44414: PUSH
44415: LD_INT 1
44417: NEG
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 2
44425: PUSH
44426: LD_INT 1
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: LD_INT 2
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 1
44445: PUSH
44446: LD_INT 2
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: LD_INT 2
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 2
44476: NEG
44477: PUSH
44478: LD_INT 1
44480: NEG
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 2
44488: NEG
44489: PUSH
44490: LD_INT 2
44492: NEG
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 2
44500: NEG
44501: PUSH
44502: LD_INT 3
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 1
44512: NEG
44513: PUSH
44514: LD_INT 3
44516: NEG
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: LD_INT 3
44527: NEG
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 1
44535: PUSH
44536: LD_INT 2
44538: NEG
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 3
44546: PUSH
44547: LD_INT 2
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 3
44556: PUSH
44557: LD_INT 3
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 2
44566: PUSH
44567: LD_INT 3
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 1
44576: PUSH
44577: LD_INT 3
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 0
44586: PUSH
44587: LD_INT 3
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 1
44596: NEG
44597: PUSH
44598: LD_INT 2
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 3
44607: NEG
44608: PUSH
44609: LD_INT 2
44611: NEG
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 3
44619: NEG
44620: PUSH
44621: LD_INT 3
44623: NEG
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44660: LD_ADDR_VAR 0 46
44664: PUSH
44665: LD_INT 0
44667: PUSH
44668: LD_INT 0
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: LD_INT 1
44680: NEG
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 1
44688: PUSH
44689: LD_INT 0
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 1
44698: PUSH
44699: LD_INT 1
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: LD_INT 1
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 1
44718: NEG
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: NEG
44730: PUSH
44731: LD_INT 1
44733: NEG
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 1
44741: NEG
44742: PUSH
44743: LD_INT 2
44745: NEG
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 0
44753: PUSH
44754: LD_INT 2
44756: NEG
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 1
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 2
44775: PUSH
44776: LD_INT 0
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 2
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 1
44795: PUSH
44796: LD_INT 2
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: LD_INT 2
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 1
44815: NEG
44816: PUSH
44817: LD_INT 1
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 2
44826: NEG
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 2
44837: NEG
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 1
44849: NEG
44850: PUSH
44851: LD_INT 3
44853: NEG
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: LD_INT 3
44864: NEG
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: LD_INT 2
44875: NEG
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 2
44883: PUSH
44884: LD_INT 1
44886: NEG
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 3
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 3
44904: PUSH
44905: LD_INT 1
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: LD_INT 3
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: LD_INT 3
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 1
44934: NEG
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 2
44945: NEG
44946: PUSH
44947: LD_INT 1
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 3
44956: NEG
44957: PUSH
44958: LD_INT 0
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 3
44967: NEG
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45008: LD_ADDR_VAR 0 47
45012: PUSH
45013: LD_INT 0
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: LD_INT 1
45028: NEG
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: LD_INT 0
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: PUSH
45047: LD_INT 1
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: LD_INT 1
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 1
45066: NEG
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: NEG
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: LD_INT 2
45093: NEG
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 0
45101: PUSH
45102: LD_INT 2
45104: NEG
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 1
45112: PUSH
45113: LD_INT 1
45115: NEG
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 2
45123: NEG
45124: PUSH
45125: LD_INT 1
45127: NEG
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 2
45135: NEG
45136: PUSH
45137: LD_INT 2
45139: NEG
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45159: LD_ADDR_VAR 0 48
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: LD_INT 0
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 0
45176: PUSH
45177: LD_INT 1
45179: NEG
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 1
45187: PUSH
45188: LD_INT 0
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: LD_INT 1
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 1
45228: NEG
45229: PUSH
45230: LD_INT 1
45232: NEG
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: LD_INT 2
45244: NEG
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: LD_INT 2
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 1
45263: PUSH
45264: LD_INT 1
45266: NEG
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 2
45274: PUSH
45275: LD_INT 0
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 2
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45306: LD_ADDR_VAR 0 49
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 0
45323: PUSH
45324: LD_INT 1
45326: NEG
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 1
45334: PUSH
45335: LD_INT 0
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 1
45344: PUSH
45345: LD_INT 1
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 0
45354: PUSH
45355: LD_INT 1
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 1
45364: NEG
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 1
45375: NEG
45376: PUSH
45377: LD_INT 1
45379: NEG
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 2
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 2
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 2
45418: PUSH
45419: LD_INT 2
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 1
45428: PUSH
45429: LD_INT 2
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45450: LD_ADDR_VAR 0 50
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: LD_INT 1
45470: NEG
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: LD_INT 0
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: LD_INT 1
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: LD_INT 1
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 1
45508: NEG
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: LD_INT 1
45523: NEG
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 2
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 2
45541: PUSH
45542: LD_INT 2
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: LD_INT 2
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: LD_INT 2
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45594: LD_ADDR_VAR 0 51
45598: PUSH
45599: LD_INT 0
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: LD_INT 1
45614: NEG
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: LD_INT 1
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 1
45652: NEG
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: LD_INT 1
45667: NEG
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: PUSH
45676: LD_INT 2
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 0
45685: PUSH
45686: LD_INT 2
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 1
45695: NEG
45696: PUSH
45697: LD_INT 1
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 2
45706: NEG
45707: PUSH
45708: LD_INT 0
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 2
45717: NEG
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45741: LD_ADDR_VAR 0 52
45745: PUSH
45746: LD_INT 0
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 0
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 1
45769: PUSH
45770: LD_INT 0
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 1
45779: PUSH
45780: LD_INT 1
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: LD_INT 1
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 1
45799: NEG
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: NEG
45823: PUSH
45824: LD_INT 2
45826: NEG
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 1
45834: NEG
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 2
45845: NEG
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 2
45856: NEG
45857: PUSH
45858: LD_INT 1
45860: NEG
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 2
45868: NEG
45869: PUSH
45870: LD_INT 2
45872: NEG
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45892: LD_ADDR_VAR 0 53
45896: PUSH
45897: LD_INT 0
45899: PUSH
45900: LD_INT 0
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 0
45909: PUSH
45910: LD_INT 1
45912: NEG
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 1
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 1
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: LD_INT 1
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 1
45950: NEG
45951: PUSH
45952: LD_INT 0
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: NEG
45962: PUSH
45963: LD_INT 1
45965: NEG
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: LD_INT 2
45977: NEG
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 0
45985: PUSH
45986: LD_INT 2
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 1
45996: PUSH
45997: LD_INT 1
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 2
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 2
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 2
46027: PUSH
46028: LD_INT 2
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: LD_INT 2
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: LD_INT 2
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: LD_INT 1
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 2
46068: NEG
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 2
46079: NEG
46080: PUSH
46081: LD_INT 1
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 2
46091: NEG
46092: PUSH
46093: LD_INT 2
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46122: LD_ADDR_VAR 0 54
46126: PUSH
46127: LD_INT 0
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 0
46139: PUSH
46140: LD_INT 1
46142: NEG
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 1
46160: PUSH
46161: LD_INT 1
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 0
46170: PUSH
46171: LD_INT 1
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: LD_INT 0
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 1
46191: NEG
46192: PUSH
46193: LD_INT 1
46195: NEG
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: LD_INT 2
46207: NEG
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: LD_INT 2
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: PUSH
46227: LD_INT 1
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 2
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 2
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 2
46257: PUSH
46258: LD_INT 2
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: LD_INT 2
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: LD_INT 2
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 1
46287: NEG
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 2
46298: NEG
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 2
46309: NEG
46310: PUSH
46311: LD_INT 1
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 2
46321: NEG
46322: PUSH
46323: LD_INT 2
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46352: LD_ADDR_VAR 0 55
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 0
46369: PUSH
46370: LD_INT 1
46372: NEG
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 1
46410: NEG
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 1
46421: NEG
46422: PUSH
46423: LD_INT 1
46425: NEG
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: LD_INT 2
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 0
46445: PUSH
46446: LD_INT 2
46448: NEG
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 1
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 2
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 2
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 2
46487: PUSH
46488: LD_INT 2
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: LD_INT 2
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: LD_INT 2
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 2
46528: NEG
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 2
46539: NEG
46540: PUSH
46541: LD_INT 1
46543: NEG
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 2
46551: NEG
46552: PUSH
46553: LD_INT 2
46555: NEG
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46582: LD_ADDR_VAR 0 56
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: LD_INT 0
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 0
46599: PUSH
46600: LD_INT 1
46602: NEG
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: LD_INT 1
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 1
46640: NEG
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: LD_INT 2
46667: NEG
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: LD_INT 2
46678: NEG
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 1
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 2
46697: PUSH
46698: LD_INT 0
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 2
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 2
46717: PUSH
46718: LD_INT 2
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: PUSH
46728: LD_INT 2
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: LD_INT 2
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 1
46747: NEG
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 2
46758: NEG
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 2
46769: NEG
46770: PUSH
46771: LD_INT 1
46773: NEG
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 2
46781: NEG
46782: PUSH
46783: LD_INT 2
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46812: LD_ADDR_VAR 0 57
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: LD_INT 0
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: LD_INT 1
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 1
46850: PUSH
46851: LD_INT 1
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: LD_INT 1
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 1
46870: NEG
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 1
46881: NEG
46882: PUSH
46883: LD_INT 1
46885: NEG
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 1
46893: NEG
46894: PUSH
46895: LD_INT 2
46897: NEG
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: LD_INT 2
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: LD_INT 1
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 2
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 2
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 2
46947: PUSH
46948: LD_INT 2
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: LD_INT 2
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: LD_INT 2
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 1
46977: NEG
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 2
46988: NEG
46989: PUSH
46990: LD_INT 0
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 2
46999: NEG
47000: PUSH
47001: LD_INT 1
47003: NEG
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 2
47011: NEG
47012: PUSH
47013: LD_INT 2
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47042: LD_ADDR_VAR 0 58
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: LD_INT 0
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: LD_INT 1
47062: NEG
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 1
47111: NEG
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 1
47123: NEG
47124: PUSH
47125: LD_INT 2
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 0
47135: PUSH
47136: LD_INT 2
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 2
47157: PUSH
47158: LD_INT 0
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 2
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 2
47177: PUSH
47178: LD_INT 2
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: PUSH
47188: LD_INT 2
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: LD_INT 2
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 1
47207: NEG
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 2
47218: NEG
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 2
47229: NEG
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 2
47241: NEG
47242: PUSH
47243: LD_INT 2
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47272: LD_ADDR_VAR 0 59
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: LD_INT 1
47292: NEG
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: LD_INT 1
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: LD_INT 1
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: NEG
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: NEG
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47360: LD_ADDR_VAR 0 60
47364: PUSH
47365: LD_INT 0
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: LD_INT 1
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 1
47388: PUSH
47389: LD_INT 0
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 1
47398: PUSH
47399: LD_INT 1
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 0
47408: PUSH
47409: LD_INT 1
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: NEG
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 1
47429: NEG
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47448: LD_ADDR_VAR 0 61
47452: PUSH
47453: LD_INT 0
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: LD_INT 1
47468: NEG
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 1
47476: PUSH
47477: LD_INT 0
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 1
47486: PUSH
47487: LD_INT 1
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: LD_INT 1
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 1
47506: NEG
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 1
47517: NEG
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47536: LD_ADDR_VAR 0 62
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 1
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 0
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 1
47594: NEG
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 1
47605: NEG
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47624: LD_ADDR_VAR 0 63
47628: PUSH
47629: LD_INT 0
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 1
47652: PUSH
47653: LD_INT 0
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: PUSH
47663: LD_INT 1
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: LD_INT 0
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: LD_INT 1
47697: NEG
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47712: LD_ADDR_VAR 0 64
47716: PUSH
47717: LD_INT 0
47719: PUSH
47720: LD_INT 0
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: LD_INT 1
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: LD_INT 0
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: LD_INT 1
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 1
47770: NEG
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 1
47781: NEG
47782: PUSH
47783: LD_INT 1
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: ST_TO_ADDR
// end ; 1 :
47800: GO 53697
47802: LD_INT 1
47804: DOUBLE
47805: EQUAL
47806: IFTRUE 47810
47808: GO 50433
47810: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47811: LD_ADDR_VAR 0 11
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: LD_INT 3
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 0
47830: PUSH
47831: LD_INT 3
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 1
47841: PUSH
47842: LD_INT 2
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: LIST
47854: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47855: LD_ADDR_VAR 0 12
47859: PUSH
47860: LD_INT 2
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 3
47873: PUSH
47874: LD_INT 0
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 3
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: LIST
47895: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47896: LD_ADDR_VAR 0 13
47900: PUSH
47901: LD_INT 3
47903: PUSH
47904: LD_INT 2
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 3
47913: PUSH
47914: LD_INT 3
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 2
47923: PUSH
47924: LD_INT 3
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: LIST
47935: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47936: LD_ADDR_VAR 0 14
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: LD_INT 3
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: LD_INT 3
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 1
47963: NEG
47964: PUSH
47965: LD_INT 2
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: LIST
47976: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47977: LD_ADDR_VAR 0 15
47981: PUSH
47982: LD_INT 2
47984: NEG
47985: PUSH
47986: LD_INT 1
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 3
47995: NEG
47996: PUSH
47997: LD_INT 0
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 3
48006: NEG
48007: PUSH
48008: LD_INT 1
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: LIST
48020: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48021: LD_ADDR_VAR 0 16
48025: PUSH
48026: LD_INT 2
48028: NEG
48029: PUSH
48030: LD_INT 3
48032: NEG
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 3
48040: NEG
48041: PUSH
48042: LD_INT 2
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 3
48052: NEG
48053: PUSH
48054: LD_INT 3
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: LIST
48066: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48067: LD_ADDR_VAR 0 17
48071: PUSH
48072: LD_INT 1
48074: NEG
48075: PUSH
48076: LD_INT 3
48078: NEG
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: LD_INT 3
48089: NEG
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 1
48097: PUSH
48098: LD_INT 2
48100: NEG
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: LIST
48110: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48111: LD_ADDR_VAR 0 18
48115: PUSH
48116: LD_INT 2
48118: PUSH
48119: LD_INT 1
48121: NEG
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 3
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 3
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: LIST
48151: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48152: LD_ADDR_VAR 0 19
48156: PUSH
48157: LD_INT 3
48159: PUSH
48160: LD_INT 2
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 3
48169: PUSH
48170: LD_INT 3
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 2
48179: PUSH
48180: LD_INT 3
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: LIST
48191: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48192: LD_ADDR_VAR 0 20
48196: PUSH
48197: LD_INT 1
48199: PUSH
48200: LD_INT 3
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: LD_INT 3
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: LD_INT 2
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: LIST
48232: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48233: LD_ADDR_VAR 0 21
48237: PUSH
48238: LD_INT 2
48240: NEG
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 3
48251: NEG
48252: PUSH
48253: LD_INT 0
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 3
48262: NEG
48263: PUSH
48264: LD_INT 1
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: LIST
48276: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48277: LD_ADDR_VAR 0 22
48281: PUSH
48282: LD_INT 2
48284: NEG
48285: PUSH
48286: LD_INT 3
48288: NEG
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 3
48296: NEG
48297: PUSH
48298: LD_INT 2
48300: NEG
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 3
48308: NEG
48309: PUSH
48310: LD_INT 3
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: LIST
48322: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48323: LD_ADDR_VAR 0 23
48327: PUSH
48328: LD_INT 0
48330: PUSH
48331: LD_INT 3
48333: NEG
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 1
48341: NEG
48342: PUSH
48343: LD_INT 4
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: LD_INT 3
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: LIST
48366: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48367: LD_ADDR_VAR 0 24
48371: PUSH
48372: LD_INT 3
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 3
48384: PUSH
48385: LD_INT 1
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 4
48395: PUSH
48396: LD_INT 1
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: LIST
48407: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48408: LD_ADDR_VAR 0 25
48412: PUSH
48413: LD_INT 3
48415: PUSH
48416: LD_INT 3
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 4
48425: PUSH
48426: LD_INT 3
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 3
48435: PUSH
48436: LD_INT 4
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: LIST
48447: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48448: LD_ADDR_VAR 0 26
48452: PUSH
48453: LD_INT 0
48455: PUSH
48456: LD_INT 3
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: LD_INT 4
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 1
48475: NEG
48476: PUSH
48477: LD_INT 3
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: LIST
48488: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48489: LD_ADDR_VAR 0 27
48493: PUSH
48494: LD_INT 3
48496: NEG
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 3
48507: NEG
48508: PUSH
48509: LD_INT 1
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 4
48518: NEG
48519: PUSH
48520: LD_INT 1
48522: NEG
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: LIST
48532: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48533: LD_ADDR_VAR 0 28
48537: PUSH
48538: LD_INT 3
48540: NEG
48541: PUSH
48542: LD_INT 3
48544: NEG
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 3
48552: NEG
48553: PUSH
48554: LD_INT 4
48556: NEG
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 4
48564: NEG
48565: PUSH
48566: LD_INT 3
48568: NEG
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: LIST
48578: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48579: LD_ADDR_VAR 0 29
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: LD_INT 3
48590: NEG
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: LD_INT 3
48601: NEG
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: LD_INT 2
48612: NEG
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 1
48620: NEG
48621: PUSH
48622: LD_INT 4
48624: NEG
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: LD_INT 4
48635: NEG
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: PUSH
48644: LD_INT 3
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: LD_INT 5
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: LD_INT 5
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: LD_INT 4
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: LD_INT 6
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 0
48700: PUSH
48701: LD_INT 6
48703: NEG
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: LD_INT 5
48714: NEG
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48734: LD_ADDR_VAR 0 30
48738: PUSH
48739: LD_INT 2
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 3
48752: PUSH
48753: LD_INT 0
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 3
48762: PUSH
48763: LD_INT 1
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 3
48772: PUSH
48773: LD_INT 1
48775: NEG
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 4
48783: PUSH
48784: LD_INT 0
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 4
48793: PUSH
48794: LD_INT 1
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 4
48803: PUSH
48804: LD_INT 1
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 5
48814: PUSH
48815: LD_INT 0
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 5
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 5
48834: PUSH
48835: LD_INT 1
48837: NEG
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 6
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 6
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48877: LD_ADDR_VAR 0 31
48881: PUSH
48882: LD_INT 3
48884: PUSH
48885: LD_INT 2
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 3
48894: PUSH
48895: LD_INT 3
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 2
48904: PUSH
48905: LD_INT 3
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 4
48914: PUSH
48915: LD_INT 3
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 4
48924: PUSH
48925: LD_INT 4
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 3
48934: PUSH
48935: LD_INT 4
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 5
48944: PUSH
48945: LD_INT 4
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 5
48954: PUSH
48955: LD_INT 5
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 4
48964: PUSH
48965: LD_INT 5
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 6
48974: PUSH
48975: LD_INT 5
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 6
48984: PUSH
48985: LD_INT 6
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 5
48994: PUSH
48995: LD_INT 6
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49016: LD_ADDR_VAR 0 32
49020: PUSH
49021: LD_INT 1
49023: PUSH
49024: LD_INT 3
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: LD_INT 3
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: LD_INT 2
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: LD_INT 4
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: LD_INT 4
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 1
49074: NEG
49075: PUSH
49076: LD_INT 3
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 1
49085: PUSH
49086: LD_INT 5
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 0
49095: PUSH
49096: LD_INT 5
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 1
49105: NEG
49106: PUSH
49107: LD_INT 4
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 1
49116: PUSH
49117: LD_INT 6
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: LD_INT 6
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: LD_INT 5
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49159: LD_ADDR_VAR 0 33
49163: PUSH
49164: LD_INT 2
49166: NEG
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 3
49177: NEG
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 3
49188: NEG
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 3
49200: NEG
49201: PUSH
49202: LD_INT 1
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 4
49211: NEG
49212: PUSH
49213: LD_INT 0
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 4
49222: NEG
49223: PUSH
49224: LD_INT 1
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 4
49234: NEG
49235: PUSH
49236: LD_INT 1
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 5
49245: NEG
49246: PUSH
49247: LD_INT 0
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 5
49256: NEG
49257: PUSH
49258: LD_INT 1
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 5
49268: NEG
49269: PUSH
49270: LD_INT 1
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 6
49279: NEG
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 6
49290: NEG
49291: PUSH
49292: LD_INT 1
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49314: LD_ADDR_VAR 0 34
49318: PUSH
49319: LD_INT 2
49321: NEG
49322: PUSH
49323: LD_INT 3
49325: NEG
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 3
49333: NEG
49334: PUSH
49335: LD_INT 2
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 3
49345: NEG
49346: PUSH
49347: LD_INT 3
49349: NEG
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 3
49357: NEG
49358: PUSH
49359: LD_INT 4
49361: NEG
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 4
49369: NEG
49370: PUSH
49371: LD_INT 3
49373: NEG
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 4
49381: NEG
49382: PUSH
49383: LD_INT 4
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 4
49393: NEG
49394: PUSH
49395: LD_INT 5
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 5
49405: NEG
49406: PUSH
49407: LD_INT 4
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 5
49417: NEG
49418: PUSH
49419: LD_INT 5
49421: NEG
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 5
49429: NEG
49430: PUSH
49431: LD_INT 6
49433: NEG
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 6
49441: NEG
49442: PUSH
49443: LD_INT 5
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 6
49453: NEG
49454: PUSH
49455: LD_INT 6
49457: NEG
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49477: LD_ADDR_VAR 0 41
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: LD_INT 2
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 1
49495: NEG
49496: PUSH
49497: LD_INT 3
49499: NEG
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 1
49507: PUSH
49508: LD_INT 2
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: LIST
49520: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49521: LD_ADDR_VAR 0 42
49525: PUSH
49526: LD_INT 2
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 2
49538: PUSH
49539: LD_INT 1
49541: NEG
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 3
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: LIST
49561: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49562: LD_ADDR_VAR 0 43
49566: PUSH
49567: LD_INT 2
49569: PUSH
49570: LD_INT 2
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 3
49579: PUSH
49580: LD_INT 2
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 2
49589: PUSH
49590: LD_INT 3
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: LIST
49601: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49602: LD_ADDR_VAR 0 44
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: LD_INT 2
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: LD_INT 3
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 1
49629: NEG
49630: PUSH
49631: LD_INT 2
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: LIST
49642: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49643: LD_ADDR_VAR 0 45
49647: PUSH
49648: LD_INT 2
49650: NEG
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 2
49661: NEG
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 3
49672: NEG
49673: PUSH
49674: LD_INT 1
49676: NEG
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: LIST
49686: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49687: LD_ADDR_VAR 0 46
49691: PUSH
49692: LD_INT 2
49694: NEG
49695: PUSH
49696: LD_INT 2
49698: NEG
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 2
49706: NEG
49707: PUSH
49708: LD_INT 3
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 3
49718: NEG
49719: PUSH
49720: LD_INT 2
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: LIST
49732: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49733: LD_ADDR_VAR 0 47
49737: PUSH
49738: LD_INT 2
49740: NEG
49741: PUSH
49742: LD_INT 3
49744: NEG
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 1
49752: NEG
49753: PUSH
49754: LD_INT 3
49756: NEG
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49766: LD_ADDR_VAR 0 48
49770: PUSH
49771: LD_INT 1
49773: PUSH
49774: LD_INT 2
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 2
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49797: LD_ADDR_VAR 0 49
49801: PUSH
49802: LD_INT 3
49804: PUSH
49805: LD_INT 1
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 3
49814: PUSH
49815: LD_INT 2
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49826: LD_ADDR_VAR 0 50
49830: PUSH
49831: LD_INT 2
49833: PUSH
49834: LD_INT 3
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 1
49843: PUSH
49844: LD_INT 3
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49855: LD_ADDR_VAR 0 51
49859: PUSH
49860: LD_INT 1
49862: NEG
49863: PUSH
49864: LD_INT 2
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 2
49873: NEG
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49886: LD_ADDR_VAR 0 52
49890: PUSH
49891: LD_INT 3
49893: NEG
49894: PUSH
49895: LD_INT 1
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 3
49905: NEG
49906: PUSH
49907: LD_INT 2
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49919: LD_ADDR_VAR 0 53
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: LD_INT 3
49930: NEG
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 0
49938: PUSH
49939: LD_INT 3
49941: NEG
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: PUSH
49950: LD_INT 2
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: LIST
49962: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49963: LD_ADDR_VAR 0 54
49967: PUSH
49968: LD_INT 2
49970: PUSH
49971: LD_INT 1
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 3
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 3
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: LIST
50003: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50004: LD_ADDR_VAR 0 55
50008: PUSH
50009: LD_INT 3
50011: PUSH
50012: LD_INT 2
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 3
50021: PUSH
50022: LD_INT 3
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 2
50031: PUSH
50032: LD_INT 3
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: LIST
50043: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50044: LD_ADDR_VAR 0 56
50048: PUSH
50049: LD_INT 1
50051: PUSH
50052: LD_INT 3
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 0
50061: PUSH
50062: LD_INT 3
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: LD_INT 2
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: LIST
50084: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50085: LD_ADDR_VAR 0 57
50089: PUSH
50090: LD_INT 2
50092: NEG
50093: PUSH
50094: LD_INT 1
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 3
50103: NEG
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 3
50114: NEG
50115: PUSH
50116: LD_INT 1
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: LIST
50128: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50129: LD_ADDR_VAR 0 58
50133: PUSH
50134: LD_INT 2
50136: NEG
50137: PUSH
50138: LD_INT 3
50140: NEG
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 3
50148: NEG
50149: PUSH
50150: LD_INT 2
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 3
50160: NEG
50161: PUSH
50162: LD_INT 3
50164: NEG
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: LIST
50174: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50175: LD_ADDR_VAR 0 59
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: LD_INT 2
50186: NEG
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: LD_INT 2
50197: NEG
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: PUSH
50206: LD_INT 1
50208: NEG
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: LIST
50218: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50219: LD_ADDR_VAR 0 60
50223: PUSH
50224: LD_INT 1
50226: PUSH
50227: LD_INT 1
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 2
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 2
50247: PUSH
50248: LD_INT 1
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: LIST
50259: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50260: LD_ADDR_VAR 0 61
50264: PUSH
50265: LD_INT 2
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 2
50277: PUSH
50278: LD_INT 2
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: LD_INT 2
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: LIST
50299: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50300: LD_ADDR_VAR 0 62
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: LD_INT 2
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: LD_INT 2
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: LD_INT 1
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: LIST
50340: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50341: LD_ADDR_VAR 0 63
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: LD_INT 1
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 2
50359: NEG
50360: PUSH
50361: LD_INT 0
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 2
50370: NEG
50371: PUSH
50372: LD_INT 1
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: LIST
50384: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50385: LD_ADDR_VAR 0 64
50389: PUSH
50390: LD_INT 1
50392: NEG
50393: PUSH
50394: LD_INT 2
50396: NEG
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 2
50404: NEG
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 2
50416: NEG
50417: PUSH
50418: LD_INT 2
50420: NEG
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: LIST
50430: ST_TO_ADDR
// end ; 2 :
50431: GO 53697
50433: LD_INT 2
50435: DOUBLE
50436: EQUAL
50437: IFTRUE 50441
50439: GO 53696
50441: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50442: LD_ADDR_VAR 0 29
50446: PUSH
50447: LD_INT 4
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 4
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 5
50470: PUSH
50471: LD_INT 0
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 5
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 4
50490: PUSH
50491: LD_INT 1
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 3
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 3
50510: PUSH
50511: LD_INT 1
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 3
50521: PUSH
50522: LD_INT 2
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 5
50532: PUSH
50533: LD_INT 2
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 3
50542: PUSH
50543: LD_INT 3
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 3
50552: PUSH
50553: LD_INT 2
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 4
50562: PUSH
50563: LD_INT 3
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 4
50572: PUSH
50573: LD_INT 4
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 3
50582: PUSH
50583: LD_INT 4
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 2
50592: PUSH
50593: LD_INT 3
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 2
50602: PUSH
50603: LD_INT 2
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 4
50612: PUSH
50613: LD_INT 2
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 2
50622: PUSH
50623: LD_INT 4
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: LD_INT 4
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: LD_INT 3
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: PUSH
50653: LD_INT 4
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 1
50662: PUSH
50663: LD_INT 5
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: LD_INT 5
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: NEG
50683: PUSH
50684: LD_INT 4
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 1
50693: NEG
50694: PUSH
50695: LD_INT 3
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 2
50704: PUSH
50705: LD_INT 5
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 2
50714: NEG
50715: PUSH
50716: LD_INT 3
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 3
50725: NEG
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 3
50736: NEG
50737: PUSH
50738: LD_INT 1
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 2
50748: NEG
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 2
50759: NEG
50760: PUSH
50761: LD_INT 1
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 3
50770: NEG
50771: PUSH
50772: LD_INT 1
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 4
50781: NEG
50782: PUSH
50783: LD_INT 0
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 4
50792: NEG
50793: PUSH
50794: LD_INT 1
50796: NEG
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 4
50804: NEG
50805: PUSH
50806: LD_INT 2
50808: NEG
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 2
50816: NEG
50817: PUSH
50818: LD_INT 2
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 4
50827: NEG
50828: PUSH
50829: LD_INT 4
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 4
50839: NEG
50840: PUSH
50841: LD_INT 5
50843: NEG
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 3
50851: NEG
50852: PUSH
50853: LD_INT 4
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 3
50863: NEG
50864: PUSH
50865: LD_INT 3
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 4
50875: NEG
50876: PUSH
50877: LD_INT 3
50879: NEG
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 5
50887: NEG
50888: PUSH
50889: LD_INT 4
50891: NEG
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 5
50899: NEG
50900: PUSH
50901: LD_INT 5
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 3
50911: NEG
50912: PUSH
50913: LD_INT 5
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 5
50923: NEG
50924: PUSH
50925: LD_INT 3
50927: NEG
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50980: LD_ADDR_VAR 0 30
50984: PUSH
50985: LD_INT 4
50987: PUSH
50988: LD_INT 4
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 4
50997: PUSH
50998: LD_INT 3
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 5
51007: PUSH
51008: LD_INT 4
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 5
51017: PUSH
51018: LD_INT 5
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 4
51027: PUSH
51028: LD_INT 5
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 3
51037: PUSH
51038: LD_INT 4
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 3
51047: PUSH
51048: LD_INT 3
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 5
51057: PUSH
51058: LD_INT 3
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 3
51067: PUSH
51068: LD_INT 5
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 0
51077: PUSH
51078: LD_INT 3
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: LD_INT 2
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: LD_INT 3
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 1
51107: PUSH
51108: LD_INT 4
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: LD_INT 4
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: LD_INT 3
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: LD_INT 2
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 2
51149: PUSH
51150: LD_INT 4
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 2
51159: NEG
51160: PUSH
51161: LD_INT 2
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 4
51170: NEG
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 4
51181: NEG
51182: PUSH
51183: LD_INT 1
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 3
51193: NEG
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 3
51204: NEG
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 4
51215: NEG
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 5
51226: NEG
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 5
51237: NEG
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 5
51249: NEG
51250: PUSH
51251: LD_INT 2
51253: NEG
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 3
51261: NEG
51262: PUSH
51263: LD_INT 2
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 3
51272: NEG
51273: PUSH
51274: LD_INT 3
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 3
51284: NEG
51285: PUSH
51286: LD_INT 4
51288: NEG
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 2
51296: NEG
51297: PUSH
51298: LD_INT 3
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 2
51308: NEG
51309: PUSH
51310: LD_INT 2
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 3
51320: NEG
51321: PUSH
51322: LD_INT 2
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 4
51332: NEG
51333: PUSH
51334: LD_INT 3
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 4
51344: NEG
51345: PUSH
51346: LD_INT 4
51348: NEG
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 2
51356: NEG
51357: PUSH
51358: LD_INT 4
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 4
51368: NEG
51369: PUSH
51370: LD_INT 2
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 0
51380: PUSH
51381: LD_INT 4
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: LD_INT 5
51394: NEG
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: LD_INT 4
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 1
51413: PUSH
51414: LD_INT 3
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: LD_INT 3
51427: NEG
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 1
51435: NEG
51436: PUSH
51437: LD_INT 4
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: LD_INT 5
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 2
51459: PUSH
51460: LD_INT 3
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 2
51470: NEG
51471: PUSH
51472: LD_INT 5
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51527: LD_ADDR_VAR 0 31
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: LD_INT 4
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 0
51544: PUSH
51545: LD_INT 3
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: LD_INT 4
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: LD_INT 5
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: LD_INT 5
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: LD_INT 4
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: LD_INT 3
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 2
51606: PUSH
51607: LD_INT 5
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 2
51616: NEG
51617: PUSH
51618: LD_INT 3
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 3
51627: NEG
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 3
51638: NEG
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 2
51650: NEG
51651: PUSH
51652: LD_INT 0
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 2
51661: NEG
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 3
51672: NEG
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 4
51683: NEG
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 4
51694: NEG
51695: PUSH
51696: LD_INT 1
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 4
51706: NEG
51707: PUSH
51708: LD_INT 2
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 2
51718: NEG
51719: PUSH
51720: LD_INT 2
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 4
51729: NEG
51730: PUSH
51731: LD_INT 4
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 4
51741: NEG
51742: PUSH
51743: LD_INT 5
51745: NEG
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 3
51753: NEG
51754: PUSH
51755: LD_INT 4
51757: NEG
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 3
51765: NEG
51766: PUSH
51767: LD_INT 3
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 4
51777: NEG
51778: PUSH
51779: LD_INT 3
51781: NEG
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 5
51789: NEG
51790: PUSH
51791: LD_INT 4
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 5
51801: NEG
51802: PUSH
51803: LD_INT 5
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 3
51813: NEG
51814: PUSH
51815: LD_INT 5
51817: NEG
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 5
51825: NEG
51826: PUSH
51827: LD_INT 3
51829: NEG
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 0
51837: PUSH
51838: LD_INT 3
51840: NEG
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 0
51848: PUSH
51849: LD_INT 4
51851: NEG
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 1
51859: PUSH
51860: LD_INT 3
51862: NEG
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 1
51870: PUSH
51871: LD_INT 2
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 0
51881: PUSH
51882: LD_INT 2
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: LD_INT 3
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: LD_INT 4
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 2
51916: PUSH
51917: LD_INT 2
51919: NEG
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 2
51927: NEG
51928: PUSH
51929: LD_INT 4
51931: NEG
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 4
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 4
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 5
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 5
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 4
51980: PUSH
51981: LD_INT 1
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 3
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 3
52000: PUSH
52001: LD_INT 1
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 3
52011: PUSH
52012: LD_INT 2
52014: NEG
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 5
52022: PUSH
52023: LD_INT 2
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52077: LD_ADDR_VAR 0 32
52081: PUSH
52082: LD_INT 4
52084: NEG
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 4
52095: NEG
52096: PUSH
52097: LD_INT 1
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 3
52107: NEG
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 3
52118: NEG
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 4
52129: NEG
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 5
52140: NEG
52141: PUSH
52142: LD_INT 0
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 5
52151: NEG
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 5
52163: NEG
52164: PUSH
52165: LD_INT 2
52167: NEG
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 3
52175: NEG
52176: PUSH
52177: LD_INT 2
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 3
52186: NEG
52187: PUSH
52188: LD_INT 3
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 3
52198: NEG
52199: PUSH
52200: LD_INT 4
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 2
52210: NEG
52211: PUSH
52212: LD_INT 3
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 2
52222: NEG
52223: PUSH
52224: LD_INT 2
52226: NEG
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 3
52234: NEG
52235: PUSH
52236: LD_INT 2
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 4
52246: NEG
52247: PUSH
52248: LD_INT 3
52250: NEG
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 4
52258: NEG
52259: PUSH
52260: LD_INT 4
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 2
52270: NEG
52271: PUSH
52272: LD_INT 4
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 4
52282: NEG
52283: PUSH
52284: LD_INT 2
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: LD_INT 4
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 0
52305: PUSH
52306: LD_INT 5
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 1
52316: PUSH
52317: LD_INT 4
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: LD_INT 3
52330: NEG
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: LD_INT 3
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 1
52349: NEG
52350: PUSH
52351: LD_INT 4
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 1
52361: NEG
52362: PUSH
52363: LD_INT 5
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 2
52373: PUSH
52374: LD_INT 3
52376: NEG
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 2
52384: NEG
52385: PUSH
52386: LD_INT 5
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 3
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 3
52406: PUSH
52407: LD_INT 1
52409: NEG
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 4
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 4
52427: PUSH
52428: LD_INT 1
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 3
52437: PUSH
52438: LD_INT 1
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 2
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 2
52457: PUSH
52458: LD_INT 1
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 2
52468: PUSH
52469: LD_INT 2
52471: NEG
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 4
52479: PUSH
52480: LD_INT 2
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 4
52489: PUSH
52490: LD_INT 4
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 4
52499: PUSH
52500: LD_INT 3
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 5
52509: PUSH
52510: LD_INT 4
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 5
52519: PUSH
52520: LD_INT 5
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 4
52529: PUSH
52530: LD_INT 5
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 3
52539: PUSH
52540: LD_INT 4
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 3
52549: PUSH
52550: LD_INT 3
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 5
52559: PUSH
52560: LD_INT 3
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 3
52569: PUSH
52570: LD_INT 5
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52624: LD_ADDR_VAR 0 33
52628: PUSH
52629: LD_INT 4
52631: NEG
52632: PUSH
52633: LD_INT 4
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 4
52643: NEG
52644: PUSH
52645: LD_INT 5
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 3
52655: NEG
52656: PUSH
52657: LD_INT 4
52659: NEG
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 3
52667: NEG
52668: PUSH
52669: LD_INT 3
52671: NEG
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 4
52679: NEG
52680: PUSH
52681: LD_INT 3
52683: NEG
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 5
52691: NEG
52692: PUSH
52693: LD_INT 4
52695: NEG
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 5
52703: NEG
52704: PUSH
52705: LD_INT 5
52707: NEG
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 3
52715: NEG
52716: PUSH
52717: LD_INT 5
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 5
52727: NEG
52728: PUSH
52729: LD_INT 3
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: LD_INT 3
52742: NEG
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: LD_INT 4
52753: NEG
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 1
52761: PUSH
52762: LD_INT 3
52764: NEG
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 1
52772: PUSH
52773: LD_INT 2
52775: NEG
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: LD_INT 2
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 1
52794: NEG
52795: PUSH
52796: LD_INT 3
52798: NEG
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: LD_INT 4
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 2
52818: PUSH
52819: LD_INT 2
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 2
52829: NEG
52830: PUSH
52831: LD_INT 4
52833: NEG
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 4
52841: PUSH
52842: LD_INT 0
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 4
52851: PUSH
52852: LD_INT 1
52854: NEG
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 5
52862: PUSH
52863: LD_INT 0
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 5
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 4
52882: PUSH
52883: LD_INT 1
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 3
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 3
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 3
52913: PUSH
52914: LD_INT 2
52916: NEG
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 5
52924: PUSH
52925: LD_INT 2
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 3
52934: PUSH
52935: LD_INT 3
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 3
52944: PUSH
52945: LD_INT 2
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 4
52954: PUSH
52955: LD_INT 3
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 4
52964: PUSH
52965: LD_INT 4
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 3
52974: PUSH
52975: LD_INT 4
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 2
52984: PUSH
52985: LD_INT 3
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 2
52994: PUSH
52995: LD_INT 2
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 4
53004: PUSH
53005: LD_INT 2
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 2
53014: PUSH
53015: LD_INT 4
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: LD_INT 4
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: LD_INT 3
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: LD_INT 4
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: LD_INT 5
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: LD_INT 5
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: NEG
53075: PUSH
53076: LD_INT 4
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: LD_INT 3
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 2
53096: PUSH
53097: LD_INT 5
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 2
53106: NEG
53107: PUSH
53108: LD_INT 3
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53162: LD_ADDR_VAR 0 34
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: LD_INT 4
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: LD_INT 5
53183: NEG
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: PUSH
53192: LD_INT 4
53194: NEG
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 1
53202: PUSH
53203: LD_INT 3
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: LD_INT 3
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 1
53224: NEG
53225: PUSH
53226: LD_INT 4
53228: NEG
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 1
53236: NEG
53237: PUSH
53238: LD_INT 5
53240: NEG
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 2
53248: PUSH
53249: LD_INT 3
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 2
53259: NEG
53260: PUSH
53261: LD_INT 5
53263: NEG
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 3
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 3
53281: PUSH
53282: LD_INT 1
53284: NEG
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 4
53292: PUSH
53293: LD_INT 0
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 4
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 3
53312: PUSH
53313: LD_INT 1
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 2
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 2
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 2
53343: PUSH
53344: LD_INT 2
53346: NEG
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 4
53354: PUSH
53355: LD_INT 2
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 4
53364: PUSH
53365: LD_INT 4
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 4
53374: PUSH
53375: LD_INT 3
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 5
53384: PUSH
53385: LD_INT 4
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 5
53394: PUSH
53395: LD_INT 5
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 4
53404: PUSH
53405: LD_INT 5
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 3
53414: PUSH
53415: LD_INT 4
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 3
53424: PUSH
53425: LD_INT 3
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 5
53434: PUSH
53435: LD_INT 3
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 3
53444: PUSH
53445: LD_INT 5
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 0
53454: PUSH
53455: LD_INT 3
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 0
53464: PUSH
53465: LD_INT 2
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 1
53474: PUSH
53475: LD_INT 3
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: PUSH
53485: LD_INT 4
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: LD_INT 4
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 1
53504: NEG
53505: PUSH
53506: LD_INT 3
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 1
53515: NEG
53516: PUSH
53517: LD_INT 2
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 2
53526: PUSH
53527: LD_INT 4
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 2
53536: NEG
53537: PUSH
53538: LD_INT 2
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 4
53547: NEG
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 4
53558: NEG
53559: PUSH
53560: LD_INT 1
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 3
53570: NEG
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 3
53581: NEG
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 4
53592: NEG
53593: PUSH
53594: LD_INT 1
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 5
53603: NEG
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 5
53614: NEG
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 5
53626: NEG
53627: PUSH
53628: LD_INT 2
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 3
53638: NEG
53639: PUSH
53640: LD_INT 2
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: ST_TO_ADDR
// end ; end ;
53694: GO 53697
53696: POP
// case btype of b_depot , b_warehouse :
53697: LD_VAR 0 1
53701: PUSH
53702: LD_INT 0
53704: DOUBLE
53705: EQUAL
53706: IFTRUE 53716
53708: LD_INT 1
53710: DOUBLE
53711: EQUAL
53712: IFTRUE 53716
53714: GO 53917
53716: POP
// case nation of nation_american :
53717: LD_VAR 0 5
53721: PUSH
53722: LD_INT 1
53724: DOUBLE
53725: EQUAL
53726: IFTRUE 53730
53728: GO 53786
53730: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53731: LD_ADDR_VAR 0 9
53735: PUSH
53736: LD_VAR 0 11
53740: PUSH
53741: LD_VAR 0 12
53745: PUSH
53746: LD_VAR 0 13
53750: PUSH
53751: LD_VAR 0 14
53755: PUSH
53756: LD_VAR 0 15
53760: PUSH
53761: LD_VAR 0 16
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: PUSH
53774: LD_VAR 0 4
53778: PUSH
53779: LD_INT 1
53781: PLUS
53782: ARRAY
53783: ST_TO_ADDR
53784: GO 53915
53786: LD_INT 2
53788: DOUBLE
53789: EQUAL
53790: IFTRUE 53794
53792: GO 53850
53794: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53795: LD_ADDR_VAR 0 9
53799: PUSH
53800: LD_VAR 0 17
53804: PUSH
53805: LD_VAR 0 18
53809: PUSH
53810: LD_VAR 0 19
53814: PUSH
53815: LD_VAR 0 20
53819: PUSH
53820: LD_VAR 0 21
53824: PUSH
53825: LD_VAR 0 22
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: PUSH
53838: LD_VAR 0 4
53842: PUSH
53843: LD_INT 1
53845: PLUS
53846: ARRAY
53847: ST_TO_ADDR
53848: GO 53915
53850: LD_INT 3
53852: DOUBLE
53853: EQUAL
53854: IFTRUE 53858
53856: GO 53914
53858: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53859: LD_ADDR_VAR 0 9
53863: PUSH
53864: LD_VAR 0 23
53868: PUSH
53869: LD_VAR 0 24
53873: PUSH
53874: LD_VAR 0 25
53878: PUSH
53879: LD_VAR 0 26
53883: PUSH
53884: LD_VAR 0 27
53888: PUSH
53889: LD_VAR 0 28
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: PUSH
53902: LD_VAR 0 4
53906: PUSH
53907: LD_INT 1
53909: PLUS
53910: ARRAY
53911: ST_TO_ADDR
53912: GO 53915
53914: POP
53915: GO 54470
53917: LD_INT 2
53919: DOUBLE
53920: EQUAL
53921: IFTRUE 53931
53923: LD_INT 3
53925: DOUBLE
53926: EQUAL
53927: IFTRUE 53931
53929: GO 53987
53931: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53932: LD_ADDR_VAR 0 9
53936: PUSH
53937: LD_VAR 0 29
53941: PUSH
53942: LD_VAR 0 30
53946: PUSH
53947: LD_VAR 0 31
53951: PUSH
53952: LD_VAR 0 32
53956: PUSH
53957: LD_VAR 0 33
53961: PUSH
53962: LD_VAR 0 34
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: PUSH
53975: LD_VAR 0 4
53979: PUSH
53980: LD_INT 1
53982: PLUS
53983: ARRAY
53984: ST_TO_ADDR
53985: GO 54470
53987: LD_INT 16
53989: DOUBLE
53990: EQUAL
53991: IFTRUE 54049
53993: LD_INT 17
53995: DOUBLE
53996: EQUAL
53997: IFTRUE 54049
53999: LD_INT 18
54001: DOUBLE
54002: EQUAL
54003: IFTRUE 54049
54005: LD_INT 19
54007: DOUBLE
54008: EQUAL
54009: IFTRUE 54049
54011: LD_INT 22
54013: DOUBLE
54014: EQUAL
54015: IFTRUE 54049
54017: LD_INT 20
54019: DOUBLE
54020: EQUAL
54021: IFTRUE 54049
54023: LD_INT 21
54025: DOUBLE
54026: EQUAL
54027: IFTRUE 54049
54029: LD_INT 23
54031: DOUBLE
54032: EQUAL
54033: IFTRUE 54049
54035: LD_INT 24
54037: DOUBLE
54038: EQUAL
54039: IFTRUE 54049
54041: LD_INT 25
54043: DOUBLE
54044: EQUAL
54045: IFTRUE 54049
54047: GO 54105
54049: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54050: LD_ADDR_VAR 0 9
54054: PUSH
54055: LD_VAR 0 35
54059: PUSH
54060: LD_VAR 0 36
54064: PUSH
54065: LD_VAR 0 37
54069: PUSH
54070: LD_VAR 0 38
54074: PUSH
54075: LD_VAR 0 39
54079: PUSH
54080: LD_VAR 0 40
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: PUSH
54093: LD_VAR 0 4
54097: PUSH
54098: LD_INT 1
54100: PLUS
54101: ARRAY
54102: ST_TO_ADDR
54103: GO 54470
54105: LD_INT 6
54107: DOUBLE
54108: EQUAL
54109: IFTRUE 54161
54111: LD_INT 7
54113: DOUBLE
54114: EQUAL
54115: IFTRUE 54161
54117: LD_INT 8
54119: DOUBLE
54120: EQUAL
54121: IFTRUE 54161
54123: LD_INT 13
54125: DOUBLE
54126: EQUAL
54127: IFTRUE 54161
54129: LD_INT 12
54131: DOUBLE
54132: EQUAL
54133: IFTRUE 54161
54135: LD_INT 15
54137: DOUBLE
54138: EQUAL
54139: IFTRUE 54161
54141: LD_INT 11
54143: DOUBLE
54144: EQUAL
54145: IFTRUE 54161
54147: LD_INT 14
54149: DOUBLE
54150: EQUAL
54151: IFTRUE 54161
54153: LD_INT 10
54155: DOUBLE
54156: EQUAL
54157: IFTRUE 54161
54159: GO 54217
54161: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54162: LD_ADDR_VAR 0 9
54166: PUSH
54167: LD_VAR 0 41
54171: PUSH
54172: LD_VAR 0 42
54176: PUSH
54177: LD_VAR 0 43
54181: PUSH
54182: LD_VAR 0 44
54186: PUSH
54187: LD_VAR 0 45
54191: PUSH
54192: LD_VAR 0 46
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: PUSH
54205: LD_VAR 0 4
54209: PUSH
54210: LD_INT 1
54212: PLUS
54213: ARRAY
54214: ST_TO_ADDR
54215: GO 54470
54217: LD_INT 36
54219: DOUBLE
54220: EQUAL
54221: IFTRUE 54225
54223: GO 54281
54225: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54226: LD_ADDR_VAR 0 9
54230: PUSH
54231: LD_VAR 0 47
54235: PUSH
54236: LD_VAR 0 48
54240: PUSH
54241: LD_VAR 0 49
54245: PUSH
54246: LD_VAR 0 50
54250: PUSH
54251: LD_VAR 0 51
54255: PUSH
54256: LD_VAR 0 52
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: PUSH
54269: LD_VAR 0 4
54273: PUSH
54274: LD_INT 1
54276: PLUS
54277: ARRAY
54278: ST_TO_ADDR
54279: GO 54470
54281: LD_INT 4
54283: DOUBLE
54284: EQUAL
54285: IFTRUE 54307
54287: LD_INT 5
54289: DOUBLE
54290: EQUAL
54291: IFTRUE 54307
54293: LD_INT 34
54295: DOUBLE
54296: EQUAL
54297: IFTRUE 54307
54299: LD_INT 37
54301: DOUBLE
54302: EQUAL
54303: IFTRUE 54307
54305: GO 54363
54307: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54308: LD_ADDR_VAR 0 9
54312: PUSH
54313: LD_VAR 0 53
54317: PUSH
54318: LD_VAR 0 54
54322: PUSH
54323: LD_VAR 0 55
54327: PUSH
54328: LD_VAR 0 56
54332: PUSH
54333: LD_VAR 0 57
54337: PUSH
54338: LD_VAR 0 58
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: PUSH
54351: LD_VAR 0 4
54355: PUSH
54356: LD_INT 1
54358: PLUS
54359: ARRAY
54360: ST_TO_ADDR
54361: GO 54470
54363: LD_INT 31
54365: DOUBLE
54366: EQUAL
54367: IFTRUE 54413
54369: LD_INT 32
54371: DOUBLE
54372: EQUAL
54373: IFTRUE 54413
54375: LD_INT 33
54377: DOUBLE
54378: EQUAL
54379: IFTRUE 54413
54381: LD_INT 27
54383: DOUBLE
54384: EQUAL
54385: IFTRUE 54413
54387: LD_INT 26
54389: DOUBLE
54390: EQUAL
54391: IFTRUE 54413
54393: LD_INT 28
54395: DOUBLE
54396: EQUAL
54397: IFTRUE 54413
54399: LD_INT 29
54401: DOUBLE
54402: EQUAL
54403: IFTRUE 54413
54405: LD_INT 30
54407: DOUBLE
54408: EQUAL
54409: IFTRUE 54413
54411: GO 54469
54413: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54414: LD_ADDR_VAR 0 9
54418: PUSH
54419: LD_VAR 0 59
54423: PUSH
54424: LD_VAR 0 60
54428: PUSH
54429: LD_VAR 0 61
54433: PUSH
54434: LD_VAR 0 62
54438: PUSH
54439: LD_VAR 0 63
54443: PUSH
54444: LD_VAR 0 64
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: PUSH
54457: LD_VAR 0 4
54461: PUSH
54462: LD_INT 1
54464: PLUS
54465: ARRAY
54466: ST_TO_ADDR
54467: GO 54470
54469: POP
// temp_list2 = [ ] ;
54470: LD_ADDR_VAR 0 10
54474: PUSH
54475: EMPTY
54476: ST_TO_ADDR
// for i in temp_list do
54477: LD_ADDR_VAR 0 8
54481: PUSH
54482: LD_VAR 0 9
54486: PUSH
54487: FOR_IN
54488: IFFALSE 54540
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54490: LD_ADDR_VAR 0 10
54494: PUSH
54495: LD_VAR 0 10
54499: PUSH
54500: LD_VAR 0 8
54504: PUSH
54505: LD_INT 1
54507: ARRAY
54508: PUSH
54509: LD_VAR 0 2
54513: PLUS
54514: PUSH
54515: LD_VAR 0 8
54519: PUSH
54520: LD_INT 2
54522: ARRAY
54523: PUSH
54524: LD_VAR 0 3
54528: PLUS
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: EMPTY
54535: LIST
54536: ADD
54537: ST_TO_ADDR
54538: GO 54487
54540: POP
54541: POP
// result = temp_list2 ;
54542: LD_ADDR_VAR 0 7
54546: PUSH
54547: LD_VAR 0 10
54551: ST_TO_ADDR
// end ;
54552: LD_VAR 0 7
54556: RET
// export function EnemyInRange ( unit , dist ) ; begin
54557: LD_INT 0
54559: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54560: LD_ADDR_VAR 0 3
54564: PUSH
54565: LD_VAR 0 1
54569: PPUSH
54570: CALL_OW 255
54574: PPUSH
54575: LD_VAR 0 1
54579: PPUSH
54580: CALL_OW 250
54584: PPUSH
54585: LD_VAR 0 1
54589: PPUSH
54590: CALL_OW 251
54594: PPUSH
54595: LD_VAR 0 2
54599: PPUSH
54600: CALL 27953 0 4
54604: PUSH
54605: LD_INT 4
54607: ARRAY
54608: ST_TO_ADDR
// end ;
54609: LD_VAR 0 3
54613: RET
// export function PlayerSeeMe ( unit ) ; begin
54614: LD_INT 0
54616: PPUSH
// result := See ( your_side , unit ) ;
54617: LD_ADDR_VAR 0 2
54621: PUSH
54622: LD_OWVAR 2
54626: PPUSH
54627: LD_VAR 0 1
54631: PPUSH
54632: CALL_OW 292
54636: ST_TO_ADDR
// end ;
54637: LD_VAR 0 2
54641: RET
// export function ReverseDir ( unit ) ; begin
54642: LD_INT 0
54644: PPUSH
// if not unit then
54645: LD_VAR 0 1
54649: NOT
54650: IFFALSE 54654
// exit ;
54652: GO 54677
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54654: LD_ADDR_VAR 0 2
54658: PUSH
54659: LD_VAR 0 1
54663: PPUSH
54664: CALL_OW 254
54668: PUSH
54669: LD_INT 3
54671: PLUS
54672: PUSH
54673: LD_INT 6
54675: MOD
54676: ST_TO_ADDR
// end ;
54677: LD_VAR 0 2
54681: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
54682: LD_INT 0
54684: PPUSH
54685: PPUSH
54686: PPUSH
54687: PPUSH
54688: PPUSH
// if not hexes then
54689: LD_VAR 0 2
54693: NOT
54694: IFFALSE 54698
// exit ;
54696: GO 54846
// dist := 9999 ;
54698: LD_ADDR_VAR 0 5
54702: PUSH
54703: LD_INT 9999
54705: ST_TO_ADDR
// for i = 1 to hexes do
54706: LD_ADDR_VAR 0 4
54710: PUSH
54711: DOUBLE
54712: LD_INT 1
54714: DEC
54715: ST_TO_ADDR
54716: LD_VAR 0 2
54720: PUSH
54721: FOR_TO
54722: IFFALSE 54834
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
54724: LD_VAR 0 1
54728: PPUSH
54729: LD_VAR 0 2
54733: PUSH
54734: LD_VAR 0 4
54738: ARRAY
54739: PUSH
54740: LD_INT 1
54742: ARRAY
54743: PPUSH
54744: LD_VAR 0 2
54748: PUSH
54749: LD_VAR 0 4
54753: ARRAY
54754: PUSH
54755: LD_INT 2
54757: ARRAY
54758: PPUSH
54759: CALL_OW 297
54763: PUSH
54764: LD_VAR 0 5
54768: LESS
54769: IFFALSE 54832
// begin hex := hexes [ i ] ;
54771: LD_ADDR_VAR 0 7
54775: PUSH
54776: LD_VAR 0 2
54780: PUSH
54781: LD_VAR 0 4
54785: ARRAY
54786: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54787: LD_ADDR_VAR 0 5
54791: PUSH
54792: LD_VAR 0 1
54796: PPUSH
54797: LD_VAR 0 2
54801: PUSH
54802: LD_VAR 0 4
54806: ARRAY
54807: PUSH
54808: LD_INT 1
54810: ARRAY
54811: PPUSH
54812: LD_VAR 0 2
54816: PUSH
54817: LD_VAR 0 4
54821: ARRAY
54822: PUSH
54823: LD_INT 2
54825: ARRAY
54826: PPUSH
54827: CALL_OW 297
54831: ST_TO_ADDR
// end ; end ;
54832: GO 54721
54834: POP
54835: POP
// result := hex ;
54836: LD_ADDR_VAR 0 3
54840: PUSH
54841: LD_VAR 0 7
54845: ST_TO_ADDR
// end ;
54846: LD_VAR 0 3
54850: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54851: LD_INT 0
54853: PPUSH
54854: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54855: LD_VAR 0 1
54859: NOT
54860: PUSH
54861: LD_VAR 0 1
54865: PUSH
54866: LD_INT 21
54868: PUSH
54869: LD_INT 2
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 23
54878: PUSH
54879: LD_INT 2
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PPUSH
54890: CALL_OW 69
54894: IN
54895: NOT
54896: OR
54897: IFFALSE 54901
// exit ;
54899: GO 54948
// for i = 1 to 3 do
54901: LD_ADDR_VAR 0 3
54905: PUSH
54906: DOUBLE
54907: LD_INT 1
54909: DEC
54910: ST_TO_ADDR
54911: LD_INT 3
54913: PUSH
54914: FOR_TO
54915: IFFALSE 54946
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54917: LD_VAR 0 1
54921: PPUSH
54922: CALL_OW 250
54926: PPUSH
54927: LD_VAR 0 1
54931: PPUSH
54932: CALL_OW 251
54936: PPUSH
54937: LD_INT 1
54939: PPUSH
54940: CALL_OW 453
54944: GO 54914
54946: POP
54947: POP
// end ;
54948: LD_VAR 0 2
54952: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54953: LD_INT 0
54955: PPUSH
54956: PPUSH
54957: PPUSH
54958: PPUSH
54959: PPUSH
54960: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54961: LD_VAR 0 1
54965: NOT
54966: PUSH
54967: LD_VAR 0 2
54971: NOT
54972: OR
54973: PUSH
54974: LD_VAR 0 1
54978: PPUSH
54979: CALL_OW 314
54983: OR
54984: IFFALSE 54988
// exit ;
54986: GO 55429
// x := GetX ( enemy_unit ) ;
54988: LD_ADDR_VAR 0 7
54992: PUSH
54993: LD_VAR 0 2
54997: PPUSH
54998: CALL_OW 250
55002: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55003: LD_ADDR_VAR 0 8
55007: PUSH
55008: LD_VAR 0 2
55012: PPUSH
55013: CALL_OW 251
55017: ST_TO_ADDR
// if not x or not y then
55018: LD_VAR 0 7
55022: NOT
55023: PUSH
55024: LD_VAR 0 8
55028: NOT
55029: OR
55030: IFFALSE 55034
// exit ;
55032: GO 55429
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55034: LD_ADDR_VAR 0 6
55038: PUSH
55039: LD_VAR 0 7
55043: PPUSH
55044: LD_INT 0
55046: PPUSH
55047: LD_INT 4
55049: PPUSH
55050: CALL_OW 272
55054: PUSH
55055: LD_VAR 0 8
55059: PPUSH
55060: LD_INT 0
55062: PPUSH
55063: LD_INT 4
55065: PPUSH
55066: CALL_OW 273
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_VAR 0 7
55079: PPUSH
55080: LD_INT 1
55082: PPUSH
55083: LD_INT 4
55085: PPUSH
55086: CALL_OW 272
55090: PUSH
55091: LD_VAR 0 8
55095: PPUSH
55096: LD_INT 1
55098: PPUSH
55099: LD_INT 4
55101: PPUSH
55102: CALL_OW 273
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_VAR 0 7
55115: PPUSH
55116: LD_INT 2
55118: PPUSH
55119: LD_INT 4
55121: PPUSH
55122: CALL_OW 272
55126: PUSH
55127: LD_VAR 0 8
55131: PPUSH
55132: LD_INT 2
55134: PPUSH
55135: LD_INT 4
55137: PPUSH
55138: CALL_OW 273
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_VAR 0 7
55151: PPUSH
55152: LD_INT 3
55154: PPUSH
55155: LD_INT 4
55157: PPUSH
55158: CALL_OW 272
55162: PUSH
55163: LD_VAR 0 8
55167: PPUSH
55168: LD_INT 3
55170: PPUSH
55171: LD_INT 4
55173: PPUSH
55174: CALL_OW 273
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_VAR 0 7
55187: PPUSH
55188: LD_INT 4
55190: PPUSH
55191: LD_INT 4
55193: PPUSH
55194: CALL_OW 272
55198: PUSH
55199: LD_VAR 0 8
55203: PPUSH
55204: LD_INT 4
55206: PPUSH
55207: LD_INT 4
55209: PPUSH
55210: CALL_OW 273
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_VAR 0 7
55223: PPUSH
55224: LD_INT 5
55226: PPUSH
55227: LD_INT 4
55229: PPUSH
55230: CALL_OW 272
55234: PUSH
55235: LD_VAR 0 8
55239: PPUSH
55240: LD_INT 5
55242: PPUSH
55243: LD_INT 4
55245: PPUSH
55246: CALL_OW 273
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: ST_TO_ADDR
// for i = tmp downto 1 do
55263: LD_ADDR_VAR 0 4
55267: PUSH
55268: DOUBLE
55269: LD_VAR 0 6
55273: INC
55274: ST_TO_ADDR
55275: LD_INT 1
55277: PUSH
55278: FOR_DOWNTO
55279: IFFALSE 55380
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55281: LD_VAR 0 6
55285: PUSH
55286: LD_VAR 0 4
55290: ARRAY
55291: PUSH
55292: LD_INT 1
55294: ARRAY
55295: PPUSH
55296: LD_VAR 0 6
55300: PUSH
55301: LD_VAR 0 4
55305: ARRAY
55306: PUSH
55307: LD_INT 2
55309: ARRAY
55310: PPUSH
55311: CALL_OW 488
55315: NOT
55316: PUSH
55317: LD_VAR 0 6
55321: PUSH
55322: LD_VAR 0 4
55326: ARRAY
55327: PUSH
55328: LD_INT 1
55330: ARRAY
55331: PPUSH
55332: LD_VAR 0 6
55336: PUSH
55337: LD_VAR 0 4
55341: ARRAY
55342: PUSH
55343: LD_INT 2
55345: ARRAY
55346: PPUSH
55347: CALL_OW 428
55351: PUSH
55352: LD_INT 0
55354: NONEQUAL
55355: OR
55356: IFFALSE 55378
// tmp := Delete ( tmp , i ) ;
55358: LD_ADDR_VAR 0 6
55362: PUSH
55363: LD_VAR 0 6
55367: PPUSH
55368: LD_VAR 0 4
55372: PPUSH
55373: CALL_OW 3
55377: ST_TO_ADDR
55378: GO 55278
55380: POP
55381: POP
// j := GetClosestHex ( unit , tmp ) ;
55382: LD_ADDR_VAR 0 5
55386: PUSH
55387: LD_VAR 0 1
55391: PPUSH
55392: LD_VAR 0 6
55396: PPUSH
55397: CALL 54682 0 2
55401: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55402: LD_VAR 0 1
55406: PPUSH
55407: LD_VAR 0 5
55411: PUSH
55412: LD_INT 1
55414: ARRAY
55415: PPUSH
55416: LD_VAR 0 5
55420: PUSH
55421: LD_INT 2
55423: ARRAY
55424: PPUSH
55425: CALL_OW 111
// end ;
55429: LD_VAR 0 3
55433: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55434: LD_INT 0
55436: PPUSH
55437: PPUSH
55438: PPUSH
// uc_side = 0 ;
55439: LD_ADDR_OWVAR 20
55443: PUSH
55444: LD_INT 0
55446: ST_TO_ADDR
// uc_nation = 0 ;
55447: LD_ADDR_OWVAR 21
55451: PUSH
55452: LD_INT 0
55454: ST_TO_ADDR
// InitHc_All ( ) ;
55455: CALL_OW 584
// InitVc ;
55459: CALL_OW 20
// if mastodonts then
55463: LD_VAR 0 6
55467: IFFALSE 55534
// for i = 1 to mastodonts do
55469: LD_ADDR_VAR 0 11
55473: PUSH
55474: DOUBLE
55475: LD_INT 1
55477: DEC
55478: ST_TO_ADDR
55479: LD_VAR 0 6
55483: PUSH
55484: FOR_TO
55485: IFFALSE 55532
// begin vc_chassis := 31 ;
55487: LD_ADDR_OWVAR 37
55491: PUSH
55492: LD_INT 31
55494: ST_TO_ADDR
// vc_control := control_rider ;
55495: LD_ADDR_OWVAR 38
55499: PUSH
55500: LD_INT 4
55502: ST_TO_ADDR
// animal := CreateVehicle ;
55503: LD_ADDR_VAR 0 12
55507: PUSH
55508: CALL_OW 45
55512: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55513: LD_VAR 0 12
55517: PPUSH
55518: LD_VAR 0 8
55522: PPUSH
55523: LD_INT 0
55525: PPUSH
55526: CALL 57722 0 3
// end ;
55530: GO 55484
55532: POP
55533: POP
// if horses then
55534: LD_VAR 0 5
55538: IFFALSE 55605
// for i = 1 to horses do
55540: LD_ADDR_VAR 0 11
55544: PUSH
55545: DOUBLE
55546: LD_INT 1
55548: DEC
55549: ST_TO_ADDR
55550: LD_VAR 0 5
55554: PUSH
55555: FOR_TO
55556: IFFALSE 55603
// begin hc_class := 21 ;
55558: LD_ADDR_OWVAR 28
55562: PUSH
55563: LD_INT 21
55565: ST_TO_ADDR
// hc_gallery :=  ;
55566: LD_ADDR_OWVAR 33
55570: PUSH
55571: LD_STRING 
55573: ST_TO_ADDR
// animal := CreateHuman ;
55574: LD_ADDR_VAR 0 12
55578: PUSH
55579: CALL_OW 44
55583: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55584: LD_VAR 0 12
55588: PPUSH
55589: LD_VAR 0 8
55593: PPUSH
55594: LD_INT 0
55596: PPUSH
55597: CALL 57722 0 3
// end ;
55601: GO 55555
55603: POP
55604: POP
// if birds then
55605: LD_VAR 0 1
55609: IFFALSE 55676
// for i = 1 to birds do
55611: LD_ADDR_VAR 0 11
55615: PUSH
55616: DOUBLE
55617: LD_INT 1
55619: DEC
55620: ST_TO_ADDR
55621: LD_VAR 0 1
55625: PUSH
55626: FOR_TO
55627: IFFALSE 55674
// begin hc_class = 18 ;
55629: LD_ADDR_OWVAR 28
55633: PUSH
55634: LD_INT 18
55636: ST_TO_ADDR
// hc_gallery =  ;
55637: LD_ADDR_OWVAR 33
55641: PUSH
55642: LD_STRING 
55644: ST_TO_ADDR
// animal := CreateHuman ;
55645: LD_ADDR_VAR 0 12
55649: PUSH
55650: CALL_OW 44
55654: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55655: LD_VAR 0 12
55659: PPUSH
55660: LD_VAR 0 8
55664: PPUSH
55665: LD_INT 0
55667: PPUSH
55668: CALL 57722 0 3
// end ;
55672: GO 55626
55674: POP
55675: POP
// if tigers then
55676: LD_VAR 0 2
55680: IFFALSE 55764
// for i = 1 to tigers do
55682: LD_ADDR_VAR 0 11
55686: PUSH
55687: DOUBLE
55688: LD_INT 1
55690: DEC
55691: ST_TO_ADDR
55692: LD_VAR 0 2
55696: PUSH
55697: FOR_TO
55698: IFFALSE 55762
// begin hc_class = class_tiger ;
55700: LD_ADDR_OWVAR 28
55704: PUSH
55705: LD_INT 14
55707: ST_TO_ADDR
// hc_gallery =  ;
55708: LD_ADDR_OWVAR 33
55712: PUSH
55713: LD_STRING 
55715: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55716: LD_ADDR_OWVAR 35
55720: PUSH
55721: LD_INT 7
55723: NEG
55724: PPUSH
55725: LD_INT 7
55727: PPUSH
55728: CALL_OW 12
55732: ST_TO_ADDR
// animal := CreateHuman ;
55733: LD_ADDR_VAR 0 12
55737: PUSH
55738: CALL_OW 44
55742: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55743: LD_VAR 0 12
55747: PPUSH
55748: LD_VAR 0 8
55752: PPUSH
55753: LD_INT 0
55755: PPUSH
55756: CALL 57722 0 3
// end ;
55760: GO 55697
55762: POP
55763: POP
// if apemans then
55764: LD_VAR 0 3
55768: IFFALSE 55891
// for i = 1 to apemans do
55770: LD_ADDR_VAR 0 11
55774: PUSH
55775: DOUBLE
55776: LD_INT 1
55778: DEC
55779: ST_TO_ADDR
55780: LD_VAR 0 3
55784: PUSH
55785: FOR_TO
55786: IFFALSE 55889
// begin hc_class = class_apeman ;
55788: LD_ADDR_OWVAR 28
55792: PUSH
55793: LD_INT 12
55795: ST_TO_ADDR
// hc_gallery =  ;
55796: LD_ADDR_OWVAR 33
55800: PUSH
55801: LD_STRING 
55803: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
55804: LD_ADDR_OWVAR 35
55808: PUSH
55809: LD_INT 2
55811: NEG
55812: PPUSH
55813: LD_INT 2
55815: PPUSH
55816: CALL_OW 12
55820: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55821: LD_ADDR_OWVAR 31
55825: PUSH
55826: LD_INT 1
55828: PPUSH
55829: LD_INT 3
55831: PPUSH
55832: CALL_OW 12
55836: PUSH
55837: LD_INT 1
55839: PPUSH
55840: LD_INT 3
55842: PPUSH
55843: CALL_OW 12
55847: PUSH
55848: LD_INT 0
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: ST_TO_ADDR
// animal := CreateHuman ;
55860: LD_ADDR_VAR 0 12
55864: PUSH
55865: CALL_OW 44
55869: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55870: LD_VAR 0 12
55874: PPUSH
55875: LD_VAR 0 8
55879: PPUSH
55880: LD_INT 0
55882: PPUSH
55883: CALL 57722 0 3
// end ;
55887: GO 55785
55889: POP
55890: POP
// if enchidnas then
55891: LD_VAR 0 4
55895: IFFALSE 55962
// for i = 1 to enchidnas do
55897: LD_ADDR_VAR 0 11
55901: PUSH
55902: DOUBLE
55903: LD_INT 1
55905: DEC
55906: ST_TO_ADDR
55907: LD_VAR 0 4
55911: PUSH
55912: FOR_TO
55913: IFFALSE 55960
// begin hc_class = 13 ;
55915: LD_ADDR_OWVAR 28
55919: PUSH
55920: LD_INT 13
55922: ST_TO_ADDR
// hc_gallery =  ;
55923: LD_ADDR_OWVAR 33
55927: PUSH
55928: LD_STRING 
55930: ST_TO_ADDR
// animal := CreateHuman ;
55931: LD_ADDR_VAR 0 12
55935: PUSH
55936: CALL_OW 44
55940: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55941: LD_VAR 0 12
55945: PPUSH
55946: LD_VAR 0 8
55950: PPUSH
55951: LD_INT 0
55953: PPUSH
55954: CALL 57722 0 3
// end ;
55958: GO 55912
55960: POP
55961: POP
// if fishes then
55962: LD_VAR 0 7
55966: IFFALSE 56033
// for i = 1 to fishes do
55968: LD_ADDR_VAR 0 11
55972: PUSH
55973: DOUBLE
55974: LD_INT 1
55976: DEC
55977: ST_TO_ADDR
55978: LD_VAR 0 7
55982: PUSH
55983: FOR_TO
55984: IFFALSE 56031
// begin hc_class = 20 ;
55986: LD_ADDR_OWVAR 28
55990: PUSH
55991: LD_INT 20
55993: ST_TO_ADDR
// hc_gallery =  ;
55994: LD_ADDR_OWVAR 33
55998: PUSH
55999: LD_STRING 
56001: ST_TO_ADDR
// animal := CreateHuman ;
56002: LD_ADDR_VAR 0 12
56006: PUSH
56007: CALL_OW 44
56011: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56012: LD_VAR 0 12
56016: PPUSH
56017: LD_VAR 0 9
56021: PPUSH
56022: LD_INT 0
56024: PPUSH
56025: CALL 57722 0 3
// end ;
56029: GO 55983
56031: POP
56032: POP
// end ;
56033: LD_VAR 0 10
56037: RET
// export function WantHeal ( sci , unit ) ; begin
56038: LD_INT 0
56040: PPUSH
// if GetTaskList ( sci ) > 0 then
56041: LD_VAR 0 1
56045: PPUSH
56046: CALL_OW 437
56050: PUSH
56051: LD_INT 0
56053: GREATER
56054: IFFALSE 56124
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56056: LD_VAR 0 1
56060: PPUSH
56061: CALL_OW 437
56065: PUSH
56066: LD_INT 1
56068: ARRAY
56069: PUSH
56070: LD_INT 1
56072: ARRAY
56073: PUSH
56074: LD_STRING l
56076: EQUAL
56077: PUSH
56078: LD_VAR 0 1
56082: PPUSH
56083: CALL_OW 437
56087: PUSH
56088: LD_INT 1
56090: ARRAY
56091: PUSH
56092: LD_INT 4
56094: ARRAY
56095: PUSH
56096: LD_VAR 0 2
56100: EQUAL
56101: AND
56102: IFFALSE 56114
// result := true else
56104: LD_ADDR_VAR 0 3
56108: PUSH
56109: LD_INT 1
56111: ST_TO_ADDR
56112: GO 56122
// result := false ;
56114: LD_ADDR_VAR 0 3
56118: PUSH
56119: LD_INT 0
56121: ST_TO_ADDR
// end else
56122: GO 56132
// result := false ;
56124: LD_ADDR_VAR 0 3
56128: PUSH
56129: LD_INT 0
56131: ST_TO_ADDR
// end ;
56132: LD_VAR 0 3
56136: RET
// export function HealTarget ( sci ) ; begin
56137: LD_INT 0
56139: PPUSH
// if not sci then
56140: LD_VAR 0 1
56144: NOT
56145: IFFALSE 56149
// exit ;
56147: GO 56214
// result := 0 ;
56149: LD_ADDR_VAR 0 2
56153: PUSH
56154: LD_INT 0
56156: ST_TO_ADDR
// if GetTaskList ( sci ) then
56157: LD_VAR 0 1
56161: PPUSH
56162: CALL_OW 437
56166: IFFALSE 56214
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56168: LD_VAR 0 1
56172: PPUSH
56173: CALL_OW 437
56177: PUSH
56178: LD_INT 1
56180: ARRAY
56181: PUSH
56182: LD_INT 1
56184: ARRAY
56185: PUSH
56186: LD_STRING l
56188: EQUAL
56189: IFFALSE 56214
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56191: LD_ADDR_VAR 0 2
56195: PUSH
56196: LD_VAR 0 1
56200: PPUSH
56201: CALL_OW 437
56205: PUSH
56206: LD_INT 1
56208: ARRAY
56209: PUSH
56210: LD_INT 4
56212: ARRAY
56213: ST_TO_ADDR
// end ;
56214: LD_VAR 0 2
56218: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56219: LD_INT 0
56221: PPUSH
56222: PPUSH
56223: PPUSH
56224: PPUSH
// if not base_units then
56225: LD_VAR 0 1
56229: NOT
56230: IFFALSE 56234
// exit ;
56232: GO 56321
// result := false ;
56234: LD_ADDR_VAR 0 2
56238: PUSH
56239: LD_INT 0
56241: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56242: LD_ADDR_VAR 0 5
56246: PUSH
56247: LD_VAR 0 1
56251: PPUSH
56252: LD_INT 21
56254: PUSH
56255: LD_INT 3
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PPUSH
56262: CALL_OW 72
56266: ST_TO_ADDR
// if not tmp then
56267: LD_VAR 0 5
56271: NOT
56272: IFFALSE 56276
// exit ;
56274: GO 56321
// for i in tmp do
56276: LD_ADDR_VAR 0 3
56280: PUSH
56281: LD_VAR 0 5
56285: PUSH
56286: FOR_IN
56287: IFFALSE 56319
// begin result := EnemyInRange ( i , 22 ) ;
56289: LD_ADDR_VAR 0 2
56293: PUSH
56294: LD_VAR 0 3
56298: PPUSH
56299: LD_INT 22
56301: PPUSH
56302: CALL 54557 0 2
56306: ST_TO_ADDR
// if result then
56307: LD_VAR 0 2
56311: IFFALSE 56317
// exit ;
56313: POP
56314: POP
56315: GO 56321
// end ;
56317: GO 56286
56319: POP
56320: POP
// end ;
56321: LD_VAR 0 2
56325: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
56326: LD_INT 0
56328: PPUSH
56329: PPUSH
// if not units then
56330: LD_VAR 0 1
56334: NOT
56335: IFFALSE 56339
// exit ;
56337: GO 56409
// result := [ ] ;
56339: LD_ADDR_VAR 0 3
56343: PUSH
56344: EMPTY
56345: ST_TO_ADDR
// for i in units do
56346: LD_ADDR_VAR 0 4
56350: PUSH
56351: LD_VAR 0 1
56355: PUSH
56356: FOR_IN
56357: IFFALSE 56407
// if GetTag ( i ) = tag then
56359: LD_VAR 0 4
56363: PPUSH
56364: CALL_OW 110
56368: PUSH
56369: LD_VAR 0 2
56373: EQUAL
56374: IFFALSE 56405
// result := Replace ( result , result + 1 , i ) ;
56376: LD_ADDR_VAR 0 3
56380: PUSH
56381: LD_VAR 0 3
56385: PPUSH
56386: LD_VAR 0 3
56390: PUSH
56391: LD_INT 1
56393: PLUS
56394: PPUSH
56395: LD_VAR 0 4
56399: PPUSH
56400: CALL_OW 1
56404: ST_TO_ADDR
56405: GO 56356
56407: POP
56408: POP
// end ;
56409: LD_VAR 0 3
56413: RET
// export function IsDriver ( un ) ; begin
56414: LD_INT 0
56416: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56417: LD_ADDR_VAR 0 2
56421: PUSH
56422: LD_VAR 0 1
56426: PUSH
56427: LD_INT 55
56429: PUSH
56430: EMPTY
56431: LIST
56432: PPUSH
56433: CALL_OW 69
56437: IN
56438: ST_TO_ADDR
// end ;
56439: LD_VAR 0 2
56443: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56444: LD_INT 0
56446: PPUSH
56447: PPUSH
// list := [ ] ;
56448: LD_ADDR_VAR 0 5
56452: PUSH
56453: EMPTY
56454: ST_TO_ADDR
// case d of 0 :
56455: LD_VAR 0 3
56459: PUSH
56460: LD_INT 0
56462: DOUBLE
56463: EQUAL
56464: IFTRUE 56468
56466: GO 56601
56468: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56469: LD_ADDR_VAR 0 5
56473: PUSH
56474: LD_VAR 0 1
56478: PUSH
56479: LD_INT 4
56481: MINUS
56482: PUSH
56483: LD_VAR 0 2
56487: PUSH
56488: LD_INT 4
56490: MINUS
56491: PUSH
56492: LD_INT 2
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: LIST
56499: PUSH
56500: LD_VAR 0 1
56504: PUSH
56505: LD_INT 3
56507: MINUS
56508: PUSH
56509: LD_VAR 0 2
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: LIST
56521: PUSH
56522: LD_VAR 0 1
56526: PUSH
56527: LD_INT 4
56529: PLUS
56530: PUSH
56531: LD_VAR 0 2
56535: PUSH
56536: LD_INT 4
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: LIST
56543: PUSH
56544: LD_VAR 0 1
56548: PUSH
56549: LD_INT 3
56551: PLUS
56552: PUSH
56553: LD_VAR 0 2
56557: PUSH
56558: LD_INT 3
56560: PLUS
56561: PUSH
56562: LD_INT 5
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: LIST
56569: PUSH
56570: LD_VAR 0 1
56574: PUSH
56575: LD_VAR 0 2
56579: PUSH
56580: LD_INT 4
56582: PLUS
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: LIST
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: ST_TO_ADDR
// end ; 1 :
56599: GO 57299
56601: LD_INT 1
56603: DOUBLE
56604: EQUAL
56605: IFTRUE 56609
56607: GO 56742
56609: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56610: LD_ADDR_VAR 0 5
56614: PUSH
56615: LD_VAR 0 1
56619: PUSH
56620: LD_VAR 0 2
56624: PUSH
56625: LD_INT 4
56627: MINUS
56628: PUSH
56629: LD_INT 3
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: LIST
56636: PUSH
56637: LD_VAR 0 1
56641: PUSH
56642: LD_INT 3
56644: MINUS
56645: PUSH
56646: LD_VAR 0 2
56650: PUSH
56651: LD_INT 3
56653: MINUS
56654: PUSH
56655: LD_INT 2
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: LIST
56662: PUSH
56663: LD_VAR 0 1
56667: PUSH
56668: LD_INT 4
56670: MINUS
56671: PUSH
56672: LD_VAR 0 2
56676: PUSH
56677: LD_INT 1
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: LIST
56684: PUSH
56685: LD_VAR 0 1
56689: PUSH
56690: LD_VAR 0 2
56694: PUSH
56695: LD_INT 3
56697: PLUS
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: LIST
56706: PUSH
56707: LD_VAR 0 1
56711: PUSH
56712: LD_INT 4
56714: PLUS
56715: PUSH
56716: LD_VAR 0 2
56720: PUSH
56721: LD_INT 4
56723: PLUS
56724: PUSH
56725: LD_INT 5
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: LIST
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: ST_TO_ADDR
// end ; 2 :
56740: GO 57299
56742: LD_INT 2
56744: DOUBLE
56745: EQUAL
56746: IFTRUE 56750
56748: GO 56879
56750: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56751: LD_ADDR_VAR 0 5
56755: PUSH
56756: LD_VAR 0 1
56760: PUSH
56761: LD_VAR 0 2
56765: PUSH
56766: LD_INT 3
56768: MINUS
56769: PUSH
56770: LD_INT 3
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: LIST
56777: PUSH
56778: LD_VAR 0 1
56782: PUSH
56783: LD_INT 4
56785: PLUS
56786: PUSH
56787: LD_VAR 0 2
56791: PUSH
56792: LD_INT 4
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: LIST
56799: PUSH
56800: LD_VAR 0 1
56804: PUSH
56805: LD_VAR 0 2
56809: PUSH
56810: LD_INT 4
56812: PLUS
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: LIST
56821: PUSH
56822: LD_VAR 0 1
56826: PUSH
56827: LD_INT 3
56829: MINUS
56830: PUSH
56831: LD_VAR 0 2
56835: PUSH
56836: LD_INT 1
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: LIST
56843: PUSH
56844: LD_VAR 0 1
56848: PUSH
56849: LD_INT 4
56851: MINUS
56852: PUSH
56853: LD_VAR 0 2
56857: PUSH
56858: LD_INT 4
56860: MINUS
56861: PUSH
56862: LD_INT 2
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: LIST
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: ST_TO_ADDR
// end ; 3 :
56877: GO 57299
56879: LD_INT 3
56881: DOUBLE
56882: EQUAL
56883: IFTRUE 56887
56885: GO 57020
56887: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56888: LD_ADDR_VAR 0 5
56892: PUSH
56893: LD_VAR 0 1
56897: PUSH
56898: LD_INT 3
56900: PLUS
56901: PUSH
56902: LD_VAR 0 2
56906: PUSH
56907: LD_INT 4
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: LIST
56914: PUSH
56915: LD_VAR 0 1
56919: PUSH
56920: LD_INT 4
56922: PLUS
56923: PUSH
56924: LD_VAR 0 2
56928: PUSH
56929: LD_INT 4
56931: PLUS
56932: PUSH
56933: LD_INT 5
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: LIST
56940: PUSH
56941: LD_VAR 0 1
56945: PUSH
56946: LD_INT 4
56948: MINUS
56949: PUSH
56950: LD_VAR 0 2
56954: PUSH
56955: LD_INT 1
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: LIST
56962: PUSH
56963: LD_VAR 0 1
56967: PUSH
56968: LD_VAR 0 2
56972: PUSH
56973: LD_INT 4
56975: MINUS
56976: PUSH
56977: LD_INT 3
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: LIST
56984: PUSH
56985: LD_VAR 0 1
56989: PUSH
56990: LD_INT 3
56992: MINUS
56993: PUSH
56994: LD_VAR 0 2
56998: PUSH
56999: LD_INT 3
57001: MINUS
57002: PUSH
57003: LD_INT 2
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: LIST
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: ST_TO_ADDR
// end ; 4 :
57018: GO 57299
57020: LD_INT 4
57022: DOUBLE
57023: EQUAL
57024: IFTRUE 57028
57026: GO 57161
57028: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57029: LD_ADDR_VAR 0 5
57033: PUSH
57034: LD_VAR 0 1
57038: PUSH
57039: LD_VAR 0 2
57043: PUSH
57044: LD_INT 4
57046: PLUS
57047: PUSH
57048: LD_INT 0
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: LIST
57055: PUSH
57056: LD_VAR 0 1
57060: PUSH
57061: LD_INT 3
57063: PLUS
57064: PUSH
57065: LD_VAR 0 2
57069: PUSH
57070: LD_INT 3
57072: PLUS
57073: PUSH
57074: LD_INT 5
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: LIST
57081: PUSH
57082: LD_VAR 0 1
57086: PUSH
57087: LD_INT 4
57089: PLUS
57090: PUSH
57091: LD_VAR 0 2
57095: PUSH
57096: LD_INT 4
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: LIST
57103: PUSH
57104: LD_VAR 0 1
57108: PUSH
57109: LD_VAR 0 2
57113: PUSH
57114: LD_INT 3
57116: MINUS
57117: PUSH
57118: LD_INT 3
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: LIST
57125: PUSH
57126: LD_VAR 0 1
57130: PUSH
57131: LD_INT 4
57133: MINUS
57134: PUSH
57135: LD_VAR 0 2
57139: PUSH
57140: LD_INT 4
57142: MINUS
57143: PUSH
57144: LD_INT 2
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: LIST
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: ST_TO_ADDR
// end ; 5 :
57159: GO 57299
57161: LD_INT 5
57163: DOUBLE
57164: EQUAL
57165: IFTRUE 57169
57167: GO 57298
57169: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57170: LD_ADDR_VAR 0 5
57174: PUSH
57175: LD_VAR 0 1
57179: PUSH
57180: LD_INT 4
57182: MINUS
57183: PUSH
57184: LD_VAR 0 2
57188: PUSH
57189: LD_INT 1
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: LIST
57196: PUSH
57197: LD_VAR 0 1
57201: PUSH
57202: LD_VAR 0 2
57206: PUSH
57207: LD_INT 4
57209: MINUS
57210: PUSH
57211: LD_INT 3
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: LIST
57218: PUSH
57219: LD_VAR 0 1
57223: PUSH
57224: LD_INT 4
57226: PLUS
57227: PUSH
57228: LD_VAR 0 2
57232: PUSH
57233: LD_INT 4
57235: PLUS
57236: PUSH
57237: LD_INT 5
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: LIST
57244: PUSH
57245: LD_VAR 0 1
57249: PUSH
57250: LD_INT 3
57252: PLUS
57253: PUSH
57254: LD_VAR 0 2
57258: PUSH
57259: LD_INT 4
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: LIST
57266: PUSH
57267: LD_VAR 0 1
57271: PUSH
57272: LD_VAR 0 2
57276: PUSH
57277: LD_INT 3
57279: PLUS
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: LIST
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: ST_TO_ADDR
// end ; end ;
57296: GO 57299
57298: POP
// result := list ;
57299: LD_ADDR_VAR 0 4
57303: PUSH
57304: LD_VAR 0 5
57308: ST_TO_ADDR
// end ;
57309: LD_VAR 0 4
57313: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57314: LD_INT 0
57316: PPUSH
57317: PPUSH
57318: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57319: LD_VAR 0 1
57323: NOT
57324: PUSH
57325: LD_VAR 0 2
57329: PUSH
57330: LD_INT 1
57332: PUSH
57333: LD_INT 2
57335: PUSH
57336: LD_INT 3
57338: PUSH
57339: LD_INT 4
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: IN
57348: NOT
57349: OR
57350: IFFALSE 57354
// exit ;
57352: GO 57446
// tmp := [ ] ;
57354: LD_ADDR_VAR 0 5
57358: PUSH
57359: EMPTY
57360: ST_TO_ADDR
// for i in units do
57361: LD_ADDR_VAR 0 4
57365: PUSH
57366: LD_VAR 0 1
57370: PUSH
57371: FOR_IN
57372: IFFALSE 57415
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
57374: LD_ADDR_VAR 0 5
57378: PUSH
57379: LD_VAR 0 5
57383: PPUSH
57384: LD_VAR 0 5
57388: PUSH
57389: LD_INT 1
57391: PLUS
57392: PPUSH
57393: LD_VAR 0 4
57397: PPUSH
57398: LD_VAR 0 2
57402: PPUSH
57403: CALL_OW 259
57407: PPUSH
57408: CALL_OW 2
57412: ST_TO_ADDR
57413: GO 57371
57415: POP
57416: POP
// if not tmp then
57417: LD_VAR 0 5
57421: NOT
57422: IFFALSE 57426
// exit ;
57424: GO 57446
// result := SortListByListDesc ( units , tmp ) ;
57426: LD_ADDR_VAR 0 3
57430: PUSH
57431: LD_VAR 0 1
57435: PPUSH
57436: LD_VAR 0 5
57440: PPUSH
57441: CALL_OW 77
57445: ST_TO_ADDR
// end ;
57446: LD_VAR 0 3
57450: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57451: LD_INT 0
57453: PPUSH
57454: PPUSH
57455: PPUSH
// result := false ;
57456: LD_ADDR_VAR 0 3
57460: PUSH
57461: LD_INT 0
57463: ST_TO_ADDR
// x := GetX ( building ) ;
57464: LD_ADDR_VAR 0 4
57468: PUSH
57469: LD_VAR 0 2
57473: PPUSH
57474: CALL_OW 250
57478: ST_TO_ADDR
// y := GetY ( building ) ;
57479: LD_ADDR_VAR 0 5
57483: PUSH
57484: LD_VAR 0 2
57488: PPUSH
57489: CALL_OW 251
57493: ST_TO_ADDR
// if not building or not x or not y then
57494: LD_VAR 0 2
57498: NOT
57499: PUSH
57500: LD_VAR 0 4
57504: NOT
57505: OR
57506: PUSH
57507: LD_VAR 0 5
57511: NOT
57512: OR
57513: IFFALSE 57517
// exit ;
57515: GO 57609
// if GetTaskList ( unit ) then
57517: LD_VAR 0 1
57521: PPUSH
57522: CALL_OW 437
57526: IFFALSE 57609
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57528: LD_STRING e
57530: PUSH
57531: LD_VAR 0 1
57535: PPUSH
57536: CALL_OW 437
57540: PUSH
57541: LD_INT 1
57543: ARRAY
57544: PUSH
57545: LD_INT 1
57547: ARRAY
57548: EQUAL
57549: PUSH
57550: LD_VAR 0 4
57554: PUSH
57555: LD_VAR 0 1
57559: PPUSH
57560: CALL_OW 437
57564: PUSH
57565: LD_INT 1
57567: ARRAY
57568: PUSH
57569: LD_INT 2
57571: ARRAY
57572: EQUAL
57573: AND
57574: PUSH
57575: LD_VAR 0 5
57579: PUSH
57580: LD_VAR 0 1
57584: PPUSH
57585: CALL_OW 437
57589: PUSH
57590: LD_INT 1
57592: ARRAY
57593: PUSH
57594: LD_INT 3
57596: ARRAY
57597: EQUAL
57598: AND
57599: IFFALSE 57609
// result := true end ;
57601: LD_ADDR_VAR 0 3
57605: PUSH
57606: LD_INT 1
57608: ST_TO_ADDR
// end ;
57609: LD_VAR 0 3
57613: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57614: LD_INT 0
57616: PPUSH
// result := false ;
57617: LD_ADDR_VAR 0 4
57621: PUSH
57622: LD_INT 0
57624: ST_TO_ADDR
// if GetTaskList ( unit ) then
57625: LD_VAR 0 1
57629: PPUSH
57630: CALL_OW 437
57634: IFFALSE 57717
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57636: LD_STRING M
57638: PUSH
57639: LD_VAR 0 1
57643: PPUSH
57644: CALL_OW 437
57648: PUSH
57649: LD_INT 1
57651: ARRAY
57652: PUSH
57653: LD_INT 1
57655: ARRAY
57656: EQUAL
57657: PUSH
57658: LD_VAR 0 2
57662: PUSH
57663: LD_VAR 0 1
57667: PPUSH
57668: CALL_OW 437
57672: PUSH
57673: LD_INT 1
57675: ARRAY
57676: PUSH
57677: LD_INT 2
57679: ARRAY
57680: EQUAL
57681: AND
57682: PUSH
57683: LD_VAR 0 3
57687: PUSH
57688: LD_VAR 0 1
57692: PPUSH
57693: CALL_OW 437
57697: PUSH
57698: LD_INT 1
57700: ARRAY
57701: PUSH
57702: LD_INT 3
57704: ARRAY
57705: EQUAL
57706: AND
57707: IFFALSE 57717
// result := true ;
57709: LD_ADDR_VAR 0 4
57713: PUSH
57714: LD_INT 1
57716: ST_TO_ADDR
// end ; end ;
57717: LD_VAR 0 4
57721: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57722: LD_INT 0
57724: PPUSH
57725: PPUSH
57726: PPUSH
57727: PPUSH
// if not unit or not area then
57728: LD_VAR 0 1
57732: NOT
57733: PUSH
57734: LD_VAR 0 2
57738: NOT
57739: OR
57740: IFFALSE 57744
// exit ;
57742: GO 57908
// tmp := AreaToList ( area , i ) ;
57744: LD_ADDR_VAR 0 6
57748: PUSH
57749: LD_VAR 0 2
57753: PPUSH
57754: LD_VAR 0 5
57758: PPUSH
57759: CALL_OW 517
57763: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57764: LD_ADDR_VAR 0 5
57768: PUSH
57769: DOUBLE
57770: LD_INT 1
57772: DEC
57773: ST_TO_ADDR
57774: LD_VAR 0 6
57778: PUSH
57779: LD_INT 1
57781: ARRAY
57782: PUSH
57783: FOR_TO
57784: IFFALSE 57906
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57786: LD_ADDR_VAR 0 7
57790: PUSH
57791: LD_VAR 0 6
57795: PUSH
57796: LD_INT 1
57798: ARRAY
57799: PUSH
57800: LD_VAR 0 5
57804: ARRAY
57805: PUSH
57806: LD_VAR 0 6
57810: PUSH
57811: LD_INT 2
57813: ARRAY
57814: PUSH
57815: LD_VAR 0 5
57819: ARRAY
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
57825: LD_VAR 0 7
57829: PUSH
57830: LD_INT 1
57832: ARRAY
57833: PPUSH
57834: LD_VAR 0 7
57838: PUSH
57839: LD_INT 2
57841: ARRAY
57842: PPUSH
57843: CALL_OW 428
57847: PUSH
57848: LD_INT 0
57850: EQUAL
57851: IFFALSE 57904
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57853: LD_VAR 0 1
57857: PPUSH
57858: LD_VAR 0 7
57862: PUSH
57863: LD_INT 1
57865: ARRAY
57866: PPUSH
57867: LD_VAR 0 7
57871: PUSH
57872: LD_INT 2
57874: ARRAY
57875: PPUSH
57876: LD_VAR 0 3
57880: PPUSH
57881: CALL_OW 48
// result := IsPlaced ( unit ) ;
57885: LD_ADDR_VAR 0 4
57889: PUSH
57890: LD_VAR 0 1
57894: PPUSH
57895: CALL_OW 305
57899: ST_TO_ADDR
// exit ;
57900: POP
57901: POP
57902: GO 57908
// end ; end ;
57904: GO 57783
57906: POP
57907: POP
// end ;
57908: LD_VAR 0 4
57912: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57913: LD_INT 0
57915: PPUSH
57916: PPUSH
57917: PPUSH
// if not side or side > 8 then
57918: LD_VAR 0 1
57922: NOT
57923: PUSH
57924: LD_VAR 0 1
57928: PUSH
57929: LD_INT 8
57931: GREATER
57932: OR
57933: IFFALSE 57937
// exit ;
57935: GO 58124
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57937: LD_ADDR_VAR 0 4
57941: PUSH
57942: LD_INT 22
57944: PUSH
57945: LD_VAR 0 1
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 21
57956: PUSH
57957: LD_INT 3
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PPUSH
57968: CALL_OW 69
57972: ST_TO_ADDR
// if not tmp then
57973: LD_VAR 0 4
57977: NOT
57978: IFFALSE 57982
// exit ;
57980: GO 58124
// enable_addtolog := true ;
57982: LD_ADDR_OWVAR 81
57986: PUSH
57987: LD_INT 1
57989: ST_TO_ADDR
// AddToLog ( [ ) ;
57990: LD_STRING [
57992: PPUSH
57993: CALL_OW 561
// for i in tmp do
57997: LD_ADDR_VAR 0 3
58001: PUSH
58002: LD_VAR 0 4
58006: PUSH
58007: FOR_IN
58008: IFFALSE 58115
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58010: LD_STRING [
58012: PUSH
58013: LD_VAR 0 3
58017: PPUSH
58018: CALL_OW 266
58022: STR
58023: PUSH
58024: LD_STRING , 
58026: STR
58027: PUSH
58028: LD_VAR 0 3
58032: PPUSH
58033: CALL_OW 250
58037: STR
58038: PUSH
58039: LD_STRING , 
58041: STR
58042: PUSH
58043: LD_VAR 0 3
58047: PPUSH
58048: CALL_OW 251
58052: STR
58053: PUSH
58054: LD_STRING , 
58056: STR
58057: PUSH
58058: LD_VAR 0 3
58062: PPUSH
58063: CALL_OW 254
58067: STR
58068: PUSH
58069: LD_STRING , 
58071: STR
58072: PUSH
58073: LD_VAR 0 3
58077: PPUSH
58078: LD_INT 1
58080: PPUSH
58081: CALL_OW 268
58085: STR
58086: PUSH
58087: LD_STRING , 
58089: STR
58090: PUSH
58091: LD_VAR 0 3
58095: PPUSH
58096: LD_INT 2
58098: PPUSH
58099: CALL_OW 268
58103: STR
58104: PUSH
58105: LD_STRING ],
58107: STR
58108: PPUSH
58109: CALL_OW 561
// end ;
58113: GO 58007
58115: POP
58116: POP
// AddToLog ( ]; ) ;
58117: LD_STRING ];
58119: PPUSH
58120: CALL_OW 561
// end ;
58124: LD_VAR 0 2
58128: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58129: LD_INT 0
58131: PPUSH
58132: PPUSH
58133: PPUSH
58134: PPUSH
58135: PPUSH
// if not area or not rate or not max then
58136: LD_VAR 0 1
58140: NOT
58141: PUSH
58142: LD_VAR 0 2
58146: NOT
58147: OR
58148: PUSH
58149: LD_VAR 0 4
58153: NOT
58154: OR
58155: IFFALSE 58159
// exit ;
58157: GO 58351
// while 1 do
58159: LD_INT 1
58161: IFFALSE 58351
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58163: LD_ADDR_VAR 0 9
58167: PUSH
58168: LD_VAR 0 1
58172: PPUSH
58173: LD_INT 1
58175: PPUSH
58176: CALL_OW 287
58180: PUSH
58181: LD_INT 10
58183: MUL
58184: ST_TO_ADDR
// r := rate / 10 ;
58185: LD_ADDR_VAR 0 7
58189: PUSH
58190: LD_VAR 0 2
58194: PUSH
58195: LD_INT 10
58197: DIVREAL
58198: ST_TO_ADDR
// time := 1 1$00 ;
58199: LD_ADDR_VAR 0 8
58203: PUSH
58204: LD_INT 2100
58206: ST_TO_ADDR
// if amount < min then
58207: LD_VAR 0 9
58211: PUSH
58212: LD_VAR 0 3
58216: LESS
58217: IFFALSE 58235
// r := r * 2 else
58219: LD_ADDR_VAR 0 7
58223: PUSH
58224: LD_VAR 0 7
58228: PUSH
58229: LD_INT 2
58231: MUL
58232: ST_TO_ADDR
58233: GO 58261
// if amount > max then
58235: LD_VAR 0 9
58239: PUSH
58240: LD_VAR 0 4
58244: GREATER
58245: IFFALSE 58261
// r := r / 2 ;
58247: LD_ADDR_VAR 0 7
58251: PUSH
58252: LD_VAR 0 7
58256: PUSH
58257: LD_INT 2
58259: DIVREAL
58260: ST_TO_ADDR
// time := time / r ;
58261: LD_ADDR_VAR 0 8
58265: PUSH
58266: LD_VAR 0 8
58270: PUSH
58271: LD_VAR 0 7
58275: DIVREAL
58276: ST_TO_ADDR
// if time < 0 then
58277: LD_VAR 0 8
58281: PUSH
58282: LD_INT 0
58284: LESS
58285: IFFALSE 58302
// time := time * - 1 ;
58287: LD_ADDR_VAR 0 8
58291: PUSH
58292: LD_VAR 0 8
58296: PUSH
58297: LD_INT 1
58299: NEG
58300: MUL
58301: ST_TO_ADDR
// wait ( time ) ;
58302: LD_VAR 0 8
58306: PPUSH
58307: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
58311: LD_INT 35
58313: PPUSH
58314: LD_INT 875
58316: PPUSH
58317: CALL_OW 12
58321: PPUSH
58322: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58326: LD_INT 1
58328: PPUSH
58329: LD_INT 5
58331: PPUSH
58332: CALL_OW 12
58336: PPUSH
58337: LD_VAR 0 1
58341: PPUSH
58342: LD_INT 1
58344: PPUSH
58345: CALL_OW 55
// end ;
58349: GO 58159
// end ;
58351: LD_VAR 0 5
58355: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58356: LD_INT 0
58358: PPUSH
58359: PPUSH
58360: PPUSH
58361: PPUSH
58362: PPUSH
58363: PPUSH
58364: PPUSH
58365: PPUSH
// if not turrets or not factories then
58366: LD_VAR 0 1
58370: NOT
58371: PUSH
58372: LD_VAR 0 2
58376: NOT
58377: OR
58378: IFFALSE 58382
// exit ;
58380: GO 58689
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58382: LD_ADDR_VAR 0 10
58386: PUSH
58387: LD_INT 5
58389: PUSH
58390: LD_INT 6
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 2
58399: PUSH
58400: LD_INT 4
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 3
58409: PUSH
58410: LD_INT 5
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 24
58424: PUSH
58425: LD_INT 25
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 23
58434: PUSH
58435: LD_INT 27
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 42
58448: PUSH
58449: LD_INT 43
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 44
58458: PUSH
58459: LD_INT 46
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 45
58468: PUSH
58469: LD_INT 47
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: LIST
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: LIST
58485: ST_TO_ADDR
// result := [ ] ;
58486: LD_ADDR_VAR 0 3
58490: PUSH
58491: EMPTY
58492: ST_TO_ADDR
// for i in turrets do
58493: LD_ADDR_VAR 0 4
58497: PUSH
58498: LD_VAR 0 1
58502: PUSH
58503: FOR_IN
58504: IFFALSE 58687
// begin nat := GetNation ( i ) ;
58506: LD_ADDR_VAR 0 7
58510: PUSH
58511: LD_VAR 0 4
58515: PPUSH
58516: CALL_OW 248
58520: ST_TO_ADDR
// weapon := 0 ;
58521: LD_ADDR_VAR 0 8
58525: PUSH
58526: LD_INT 0
58528: ST_TO_ADDR
// if not nat then
58529: LD_VAR 0 7
58533: NOT
58534: IFFALSE 58538
// continue ;
58536: GO 58503
// for j in list [ nat ] do
58538: LD_ADDR_VAR 0 5
58542: PUSH
58543: LD_VAR 0 10
58547: PUSH
58548: LD_VAR 0 7
58552: ARRAY
58553: PUSH
58554: FOR_IN
58555: IFFALSE 58596
// if GetBWeapon ( i ) = j [ 1 ] then
58557: LD_VAR 0 4
58561: PPUSH
58562: CALL_OW 269
58566: PUSH
58567: LD_VAR 0 5
58571: PUSH
58572: LD_INT 1
58574: ARRAY
58575: EQUAL
58576: IFFALSE 58594
// begin weapon := j [ 2 ] ;
58578: LD_ADDR_VAR 0 8
58582: PUSH
58583: LD_VAR 0 5
58587: PUSH
58588: LD_INT 2
58590: ARRAY
58591: ST_TO_ADDR
// break ;
58592: GO 58596
// end ;
58594: GO 58554
58596: POP
58597: POP
// if not weapon then
58598: LD_VAR 0 8
58602: NOT
58603: IFFALSE 58607
// continue ;
58605: GO 58503
// for k in factories do
58607: LD_ADDR_VAR 0 6
58611: PUSH
58612: LD_VAR 0 2
58616: PUSH
58617: FOR_IN
58618: IFFALSE 58683
// begin weapons := AvailableWeaponList ( k ) ;
58620: LD_ADDR_VAR 0 9
58624: PUSH
58625: LD_VAR 0 6
58629: PPUSH
58630: CALL_OW 478
58634: ST_TO_ADDR
// if not weapons then
58635: LD_VAR 0 9
58639: NOT
58640: IFFALSE 58644
// continue ;
58642: GO 58617
// if weapon in weapons then
58644: LD_VAR 0 8
58648: PUSH
58649: LD_VAR 0 9
58653: IN
58654: IFFALSE 58681
// begin result := [ i , weapon ] ;
58656: LD_ADDR_VAR 0 3
58660: PUSH
58661: LD_VAR 0 4
58665: PUSH
58666: LD_VAR 0 8
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: ST_TO_ADDR
// exit ;
58675: POP
58676: POP
58677: POP
58678: POP
58679: GO 58689
// end ; end ;
58681: GO 58617
58683: POP
58684: POP
// end ;
58685: GO 58503
58687: POP
58688: POP
// end ;
58689: LD_VAR 0 3
58693: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58694: LD_INT 0
58696: PPUSH
// if not side or side > 8 then
58697: LD_VAR 0 3
58701: NOT
58702: PUSH
58703: LD_VAR 0 3
58707: PUSH
58708: LD_INT 8
58710: GREATER
58711: OR
58712: IFFALSE 58716
// exit ;
58714: GO 58775
// if not range then
58716: LD_VAR 0 4
58720: NOT
58721: IFFALSE 58732
// range := - 12 ;
58723: LD_ADDR_VAR 0 4
58727: PUSH
58728: LD_INT 12
58730: NEG
58731: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58732: LD_VAR 0 1
58736: PPUSH
58737: LD_VAR 0 2
58741: PPUSH
58742: LD_VAR 0 3
58746: PPUSH
58747: LD_VAR 0 4
58751: PPUSH
58752: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58756: LD_VAR 0 1
58760: PPUSH
58761: LD_VAR 0 2
58765: PPUSH
58766: LD_VAR 0 3
58770: PPUSH
58771: CALL_OW 331
// end ;
58775: LD_VAR 0 5
58779: RET
// export function Video ( mode ) ; begin
58780: LD_INT 0
58782: PPUSH
// ingame_video = mode ;
58783: LD_ADDR_OWVAR 52
58787: PUSH
58788: LD_VAR 0 1
58792: ST_TO_ADDR
// interface_hidden = mode ;
58793: LD_ADDR_OWVAR 54
58797: PUSH
58798: LD_VAR 0 1
58802: ST_TO_ADDR
// end ;
58803: LD_VAR 0 2
58807: RET
// export function Join ( array , element ) ; begin
58808: LD_INT 0
58810: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58811: LD_ADDR_VAR 0 3
58815: PUSH
58816: LD_VAR 0 1
58820: PPUSH
58821: LD_VAR 0 1
58825: PUSH
58826: LD_INT 1
58828: PLUS
58829: PPUSH
58830: LD_VAR 0 2
58834: PPUSH
58835: CALL_OW 1
58839: ST_TO_ADDR
// end ;
58840: LD_VAR 0 3
58844: RET
// export function JoinUnion ( array , element ) ; begin
58845: LD_INT 0
58847: PPUSH
// result := array union element ;
58848: LD_ADDR_VAR 0 3
58852: PUSH
58853: LD_VAR 0 1
58857: PUSH
58858: LD_VAR 0 2
58862: UNION
58863: ST_TO_ADDR
// end ;
58864: LD_VAR 0 3
58868: RET
// export function GetBehemoths ( side ) ; begin
58869: LD_INT 0
58871: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
58872: LD_ADDR_VAR 0 2
58876: PUSH
58877: LD_INT 22
58879: PUSH
58880: LD_VAR 0 1
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 31
58891: PUSH
58892: LD_INT 25
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PPUSH
58903: CALL_OW 69
58907: ST_TO_ADDR
// end ;
58908: LD_VAR 0 2
58912: RET
// export function Shuffle ( array ) ; var i , index ; begin
58913: LD_INT 0
58915: PPUSH
58916: PPUSH
58917: PPUSH
// result := [ ] ;
58918: LD_ADDR_VAR 0 2
58922: PUSH
58923: EMPTY
58924: ST_TO_ADDR
// if not array then
58925: LD_VAR 0 1
58929: NOT
58930: IFFALSE 58934
// exit ;
58932: GO 59033
// Randomize ;
58934: CALL_OW 10
// for i = array downto 1 do
58938: LD_ADDR_VAR 0 3
58942: PUSH
58943: DOUBLE
58944: LD_VAR 0 1
58948: INC
58949: ST_TO_ADDR
58950: LD_INT 1
58952: PUSH
58953: FOR_DOWNTO
58954: IFFALSE 59031
// begin index := rand ( 1 , array ) ;
58956: LD_ADDR_VAR 0 4
58960: PUSH
58961: LD_INT 1
58963: PPUSH
58964: LD_VAR 0 1
58968: PPUSH
58969: CALL_OW 12
58973: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58974: LD_ADDR_VAR 0 2
58978: PUSH
58979: LD_VAR 0 2
58983: PPUSH
58984: LD_VAR 0 2
58988: PUSH
58989: LD_INT 1
58991: PLUS
58992: PPUSH
58993: LD_VAR 0 1
58997: PUSH
58998: LD_VAR 0 4
59002: ARRAY
59003: PPUSH
59004: CALL_OW 2
59008: ST_TO_ADDR
// array := Delete ( array , index ) ;
59009: LD_ADDR_VAR 0 1
59013: PUSH
59014: LD_VAR 0 1
59018: PPUSH
59019: LD_VAR 0 4
59023: PPUSH
59024: CALL_OW 3
59028: ST_TO_ADDR
// end ;
59029: GO 58953
59031: POP
59032: POP
// end ;
59033: LD_VAR 0 2
59037: RET
// export function GetBaseMaterials ( base ) ; begin
59038: LD_INT 0
59040: PPUSH
// result := [ 0 , 0 , 0 ] ;
59041: LD_ADDR_VAR 0 2
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: LD_INT 0
59051: PUSH
59052: LD_INT 0
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: LIST
59059: ST_TO_ADDR
// if not base then
59060: LD_VAR 0 1
59064: NOT
59065: IFFALSE 59069
// exit ;
59067: GO 59118
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59069: LD_ADDR_VAR 0 2
59073: PUSH
59074: LD_VAR 0 1
59078: PPUSH
59079: LD_INT 1
59081: PPUSH
59082: CALL_OW 275
59086: PUSH
59087: LD_VAR 0 1
59091: PPUSH
59092: LD_INT 2
59094: PPUSH
59095: CALL_OW 275
59099: PUSH
59100: LD_VAR 0 1
59104: PPUSH
59105: LD_INT 3
59107: PPUSH
59108: CALL_OW 275
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: LIST
59117: ST_TO_ADDR
// end ;
59118: LD_VAR 0 2
59122: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59123: LD_INT 0
59125: PPUSH
59126: PPUSH
// result := array ;
59127: LD_ADDR_VAR 0 3
59131: PUSH
59132: LD_VAR 0 1
59136: ST_TO_ADDR
// if size > 0 then
59137: LD_VAR 0 2
59141: PUSH
59142: LD_INT 0
59144: GREATER
59145: IFFALSE 59191
// for i := array downto size do
59147: LD_ADDR_VAR 0 4
59151: PUSH
59152: DOUBLE
59153: LD_VAR 0 1
59157: INC
59158: ST_TO_ADDR
59159: LD_VAR 0 2
59163: PUSH
59164: FOR_DOWNTO
59165: IFFALSE 59189
// result := Delete ( result , result ) ;
59167: LD_ADDR_VAR 0 3
59171: PUSH
59172: LD_VAR 0 3
59176: PPUSH
59177: LD_VAR 0 3
59181: PPUSH
59182: CALL_OW 3
59186: ST_TO_ADDR
59187: GO 59164
59189: POP
59190: POP
// end ;
59191: LD_VAR 0 3
59195: RET
// export function ComExit ( unit ) ; var tmp ; begin
59196: LD_INT 0
59198: PPUSH
59199: PPUSH
// if not IsInUnit ( unit ) then
59200: LD_VAR 0 1
59204: PPUSH
59205: CALL_OW 310
59209: NOT
59210: IFFALSE 59214
// exit ;
59212: GO 59274
// tmp := IsInUnit ( unit ) ;
59214: LD_ADDR_VAR 0 3
59218: PUSH
59219: LD_VAR 0 1
59223: PPUSH
59224: CALL_OW 310
59228: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59229: LD_VAR 0 3
59233: PPUSH
59234: CALL_OW 247
59238: PUSH
59239: LD_INT 2
59241: EQUAL
59242: IFFALSE 59255
// ComExitVehicle ( unit ) else
59244: LD_VAR 0 1
59248: PPUSH
59249: CALL_OW 121
59253: GO 59264
// ComExitBuilding ( unit ) ;
59255: LD_VAR 0 1
59259: PPUSH
59260: CALL_OW 122
// result := tmp ;
59264: LD_ADDR_VAR 0 2
59268: PUSH
59269: LD_VAR 0 3
59273: ST_TO_ADDR
// end ;
59274: LD_VAR 0 2
59278: RET
// export function ComExitAll ( units ) ; var i ; begin
59279: LD_INT 0
59281: PPUSH
59282: PPUSH
// if not units then
59283: LD_VAR 0 1
59287: NOT
59288: IFFALSE 59292
// exit ;
59290: GO 59318
// for i in units do
59292: LD_ADDR_VAR 0 3
59296: PUSH
59297: LD_VAR 0 1
59301: PUSH
59302: FOR_IN
59303: IFFALSE 59316
// ComExit ( i ) ;
59305: LD_VAR 0 3
59309: PPUSH
59310: CALL 59196 0 1
59314: GO 59302
59316: POP
59317: POP
// end ;
59318: LD_VAR 0 2
59322: RET
// export function ResetHc ; begin
59323: LD_INT 0
59325: PPUSH
// InitHc ;
59326: CALL_OW 19
// hc_importance := 0 ;
59330: LD_ADDR_OWVAR 32
59334: PUSH
59335: LD_INT 0
59337: ST_TO_ADDR
// end ;
59338: LD_VAR 0 1
59342: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59343: LD_INT 0
59345: PPUSH
59346: PPUSH
59347: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59348: LD_ADDR_VAR 0 6
59352: PUSH
59353: LD_VAR 0 1
59357: PUSH
59358: LD_VAR 0 3
59362: PLUS
59363: PUSH
59364: LD_INT 2
59366: DIV
59367: ST_TO_ADDR
// if _x < 0 then
59368: LD_VAR 0 6
59372: PUSH
59373: LD_INT 0
59375: LESS
59376: IFFALSE 59393
// _x := _x * - 1 ;
59378: LD_ADDR_VAR 0 6
59382: PUSH
59383: LD_VAR 0 6
59387: PUSH
59388: LD_INT 1
59390: NEG
59391: MUL
59392: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59393: LD_ADDR_VAR 0 7
59397: PUSH
59398: LD_VAR 0 2
59402: PUSH
59403: LD_VAR 0 4
59407: PLUS
59408: PUSH
59409: LD_INT 2
59411: DIV
59412: ST_TO_ADDR
// if _y < 0 then
59413: LD_VAR 0 7
59417: PUSH
59418: LD_INT 0
59420: LESS
59421: IFFALSE 59438
// _y := _y * - 1 ;
59423: LD_ADDR_VAR 0 7
59427: PUSH
59428: LD_VAR 0 7
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: MUL
59437: ST_TO_ADDR
// result := [ _x , _y ] ;
59438: LD_ADDR_VAR 0 5
59442: PUSH
59443: LD_VAR 0 6
59447: PUSH
59448: LD_VAR 0 7
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: ST_TO_ADDR
// end ;
59457: LD_VAR 0 5
59461: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59462: LD_INT 0
59464: PPUSH
59465: PPUSH
59466: PPUSH
59467: PPUSH
// task := GetTaskList ( unit ) ;
59468: LD_ADDR_VAR 0 7
59472: PUSH
59473: LD_VAR 0 1
59477: PPUSH
59478: CALL_OW 437
59482: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59483: LD_VAR 0 7
59487: NOT
59488: PUSH
59489: LD_VAR 0 1
59493: PPUSH
59494: LD_VAR 0 2
59498: PPUSH
59499: CALL_OW 308
59503: NOT
59504: AND
59505: IFFALSE 59509
// exit ;
59507: GO 59627
// if IsInArea ( unit , area ) then
59509: LD_VAR 0 1
59513: PPUSH
59514: LD_VAR 0 2
59518: PPUSH
59519: CALL_OW 308
59523: IFFALSE 59541
// begin ComMoveToArea ( unit , goAway ) ;
59525: LD_VAR 0 1
59529: PPUSH
59530: LD_VAR 0 3
59534: PPUSH
59535: CALL_OW 113
// exit ;
59539: GO 59627
// end ; if task [ 1 ] [ 1 ] <> M then
59541: LD_VAR 0 7
59545: PUSH
59546: LD_INT 1
59548: ARRAY
59549: PUSH
59550: LD_INT 1
59552: ARRAY
59553: PUSH
59554: LD_STRING M
59556: NONEQUAL
59557: IFFALSE 59561
// exit ;
59559: GO 59627
// x := task [ 1 ] [ 2 ] ;
59561: LD_ADDR_VAR 0 5
59565: PUSH
59566: LD_VAR 0 7
59570: PUSH
59571: LD_INT 1
59573: ARRAY
59574: PUSH
59575: LD_INT 2
59577: ARRAY
59578: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59579: LD_ADDR_VAR 0 6
59583: PUSH
59584: LD_VAR 0 7
59588: PUSH
59589: LD_INT 1
59591: ARRAY
59592: PUSH
59593: LD_INT 3
59595: ARRAY
59596: ST_TO_ADDR
// if InArea ( x , y , area ) then
59597: LD_VAR 0 5
59601: PPUSH
59602: LD_VAR 0 6
59606: PPUSH
59607: LD_VAR 0 2
59611: PPUSH
59612: CALL_OW 309
59616: IFFALSE 59627
// ComStop ( unit ) ;
59618: LD_VAR 0 1
59622: PPUSH
59623: CALL_OW 141
// end ;
59627: LD_VAR 0 4
59631: RET
// export function Abs ( value ) ; begin
59632: LD_INT 0
59634: PPUSH
// result := value ;
59635: LD_ADDR_VAR 0 2
59639: PUSH
59640: LD_VAR 0 1
59644: ST_TO_ADDR
// if value < 0 then
59645: LD_VAR 0 1
59649: PUSH
59650: LD_INT 0
59652: LESS
59653: IFFALSE 59670
// result := value * - 1 ;
59655: LD_ADDR_VAR 0 2
59659: PUSH
59660: LD_VAR 0 1
59664: PUSH
59665: LD_INT 1
59667: NEG
59668: MUL
59669: ST_TO_ADDR
// end ;
59670: LD_VAR 0 2
59674: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59675: LD_INT 0
59677: PPUSH
59678: PPUSH
59679: PPUSH
59680: PPUSH
59681: PPUSH
59682: PPUSH
59683: PPUSH
59684: PPUSH
// if not unit or not building then
59685: LD_VAR 0 1
59689: NOT
59690: PUSH
59691: LD_VAR 0 2
59695: NOT
59696: OR
59697: IFFALSE 59701
// exit ;
59699: GO 59927
// x := GetX ( building ) ;
59701: LD_ADDR_VAR 0 4
59705: PUSH
59706: LD_VAR 0 2
59710: PPUSH
59711: CALL_OW 250
59715: ST_TO_ADDR
// y := GetY ( building ) ;
59716: LD_ADDR_VAR 0 6
59720: PUSH
59721: LD_VAR 0 2
59725: PPUSH
59726: CALL_OW 251
59730: ST_TO_ADDR
// d := GetDir ( building ) ;
59731: LD_ADDR_VAR 0 8
59735: PUSH
59736: LD_VAR 0 2
59740: PPUSH
59741: CALL_OW 254
59745: ST_TO_ADDR
// r := 4 ;
59746: LD_ADDR_VAR 0 9
59750: PUSH
59751: LD_INT 4
59753: ST_TO_ADDR
// for i := 1 to 5 do
59754: LD_ADDR_VAR 0 10
59758: PUSH
59759: DOUBLE
59760: LD_INT 1
59762: DEC
59763: ST_TO_ADDR
59764: LD_INT 5
59766: PUSH
59767: FOR_TO
59768: IFFALSE 59925
// begin _x := ShiftX ( x , d , r + i ) ;
59770: LD_ADDR_VAR 0 5
59774: PUSH
59775: LD_VAR 0 4
59779: PPUSH
59780: LD_VAR 0 8
59784: PPUSH
59785: LD_VAR 0 9
59789: PUSH
59790: LD_VAR 0 10
59794: PLUS
59795: PPUSH
59796: CALL_OW 272
59800: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59801: LD_ADDR_VAR 0 7
59805: PUSH
59806: LD_VAR 0 6
59810: PPUSH
59811: LD_VAR 0 8
59815: PPUSH
59816: LD_VAR 0 9
59820: PUSH
59821: LD_VAR 0 10
59825: PLUS
59826: PPUSH
59827: CALL_OW 273
59831: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59832: LD_VAR 0 5
59836: PPUSH
59837: LD_VAR 0 7
59841: PPUSH
59842: CALL_OW 488
59846: PUSH
59847: LD_VAR 0 5
59851: PPUSH
59852: LD_VAR 0 7
59856: PPUSH
59857: CALL_OW 428
59861: PPUSH
59862: CALL_OW 247
59866: PUSH
59867: LD_INT 3
59869: PUSH
59870: LD_INT 2
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: IN
59877: NOT
59878: AND
59879: IFFALSE 59923
// begin ComMoveXY ( unit , _x , _y ) ;
59881: LD_VAR 0 1
59885: PPUSH
59886: LD_VAR 0 5
59890: PPUSH
59891: LD_VAR 0 7
59895: PPUSH
59896: CALL_OW 111
// result := [ _x , _y ] ;
59900: LD_ADDR_VAR 0 3
59904: PUSH
59905: LD_VAR 0 5
59909: PUSH
59910: LD_VAR 0 7
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: ST_TO_ADDR
// exit ;
59919: POP
59920: POP
59921: GO 59927
// end ; end ;
59923: GO 59767
59925: POP
59926: POP
// end ;
59927: LD_VAR 0 3
59931: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59932: LD_INT 0
59934: PPUSH
59935: PPUSH
59936: PPUSH
// result := 0 ;
59937: LD_ADDR_VAR 0 3
59941: PUSH
59942: LD_INT 0
59944: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59945: LD_VAR 0 1
59949: PUSH
59950: LD_INT 0
59952: LESS
59953: PUSH
59954: LD_VAR 0 1
59958: PUSH
59959: LD_INT 8
59961: GREATER
59962: OR
59963: PUSH
59964: LD_VAR 0 2
59968: PUSH
59969: LD_INT 0
59971: LESS
59972: OR
59973: PUSH
59974: LD_VAR 0 2
59978: PUSH
59979: LD_INT 8
59981: GREATER
59982: OR
59983: IFFALSE 59987
// exit ;
59985: GO 60062
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59987: LD_ADDR_VAR 0 4
59991: PUSH
59992: LD_INT 22
59994: PUSH
59995: LD_VAR 0 2
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PPUSH
60004: CALL_OW 69
60008: PUSH
60009: FOR_IN
60010: IFFALSE 60060
// begin un := UnitShoot ( i ) ;
60012: LD_ADDR_VAR 0 5
60016: PUSH
60017: LD_VAR 0 4
60021: PPUSH
60022: CALL_OW 504
60026: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60027: LD_VAR 0 5
60031: PPUSH
60032: CALL_OW 255
60036: PUSH
60037: LD_VAR 0 1
60041: EQUAL
60042: IFFALSE 60058
// begin result := un ;
60044: LD_ADDR_VAR 0 3
60048: PUSH
60049: LD_VAR 0 5
60053: ST_TO_ADDR
// exit ;
60054: POP
60055: POP
60056: GO 60062
// end ; end ;
60058: GO 60009
60060: POP
60061: POP
// end ;
60062: LD_VAR 0 3
60066: RET
// export function GetCargoBay ( units ) ; begin
60067: LD_INT 0
60069: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60070: LD_ADDR_VAR 0 2
60074: PUSH
60075: LD_VAR 0 1
60079: PPUSH
60080: LD_INT 2
60082: PUSH
60083: LD_INT 34
60085: PUSH
60086: LD_INT 12
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 34
60095: PUSH
60096: LD_INT 51
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 34
60105: PUSH
60106: LD_INT 32
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 34
60115: PUSH
60116: LD_EXP 40
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: PPUSH
60132: CALL_OW 72
60136: ST_TO_ADDR
// end ;
60137: LD_VAR 0 2
60141: RET
// export function Negate ( value ) ; begin
60142: LD_INT 0
60144: PPUSH
// result := not value ;
60145: LD_ADDR_VAR 0 2
60149: PUSH
60150: LD_VAR 0 1
60154: NOT
60155: ST_TO_ADDR
// end ;
60156: LD_VAR 0 2
60160: RET
// export function Inc ( value ) ; begin
60161: LD_INT 0
60163: PPUSH
// result := value + 1 ;
60164: LD_ADDR_VAR 0 2
60168: PUSH
60169: LD_VAR 0 1
60173: PUSH
60174: LD_INT 1
60176: PLUS
60177: ST_TO_ADDR
// end ;
60178: LD_VAR 0 2
60182: RET
// export function Dec ( value ) ; begin
60183: LD_INT 0
60185: PPUSH
// result := value - 1 ;
60186: LD_ADDR_VAR 0 2
60190: PUSH
60191: LD_VAR 0 1
60195: PUSH
60196: LD_INT 1
60198: MINUS
60199: ST_TO_ADDR
// end ;
60200: LD_VAR 0 2
60204: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60205: LD_INT 0
60207: PPUSH
60208: PPUSH
60209: PPUSH
60210: PPUSH
60211: PPUSH
60212: PPUSH
60213: PPUSH
60214: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60215: LD_VAR 0 1
60219: PPUSH
60220: LD_VAR 0 2
60224: PPUSH
60225: CALL_OW 488
60229: NOT
60230: PUSH
60231: LD_VAR 0 3
60235: PPUSH
60236: LD_VAR 0 4
60240: PPUSH
60241: CALL_OW 488
60245: NOT
60246: OR
60247: IFFALSE 60260
// begin result := - 1 ;
60249: LD_ADDR_VAR 0 5
60253: PUSH
60254: LD_INT 1
60256: NEG
60257: ST_TO_ADDR
// exit ;
60258: GO 60495
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60260: LD_ADDR_VAR 0 12
60264: PUSH
60265: LD_VAR 0 1
60269: PPUSH
60270: LD_VAR 0 2
60274: PPUSH
60275: LD_VAR 0 3
60279: PPUSH
60280: LD_VAR 0 4
60284: PPUSH
60285: CALL 59343 0 4
60289: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60290: LD_ADDR_VAR 0 11
60294: PUSH
60295: LD_VAR 0 1
60299: PPUSH
60300: LD_VAR 0 2
60304: PPUSH
60305: LD_VAR 0 12
60309: PUSH
60310: LD_INT 1
60312: ARRAY
60313: PPUSH
60314: LD_VAR 0 12
60318: PUSH
60319: LD_INT 2
60321: ARRAY
60322: PPUSH
60323: CALL_OW 298
60327: ST_TO_ADDR
// distance := 9999 ;
60328: LD_ADDR_VAR 0 10
60332: PUSH
60333: LD_INT 9999
60335: ST_TO_ADDR
// for i := 0 to 5 do
60336: LD_ADDR_VAR 0 6
60340: PUSH
60341: DOUBLE
60342: LD_INT 0
60344: DEC
60345: ST_TO_ADDR
60346: LD_INT 5
60348: PUSH
60349: FOR_TO
60350: IFFALSE 60493
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60352: LD_ADDR_VAR 0 7
60356: PUSH
60357: LD_VAR 0 1
60361: PPUSH
60362: LD_VAR 0 6
60366: PPUSH
60367: LD_VAR 0 11
60371: PPUSH
60372: CALL_OW 272
60376: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60377: LD_ADDR_VAR 0 8
60381: PUSH
60382: LD_VAR 0 2
60386: PPUSH
60387: LD_VAR 0 6
60391: PPUSH
60392: LD_VAR 0 11
60396: PPUSH
60397: CALL_OW 273
60401: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60402: LD_VAR 0 7
60406: PPUSH
60407: LD_VAR 0 8
60411: PPUSH
60412: CALL_OW 488
60416: NOT
60417: IFFALSE 60421
// continue ;
60419: GO 60349
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60421: LD_ADDR_VAR 0 9
60425: PUSH
60426: LD_VAR 0 12
60430: PUSH
60431: LD_INT 1
60433: ARRAY
60434: PPUSH
60435: LD_VAR 0 12
60439: PUSH
60440: LD_INT 2
60442: ARRAY
60443: PPUSH
60444: LD_VAR 0 7
60448: PPUSH
60449: LD_VAR 0 8
60453: PPUSH
60454: CALL_OW 298
60458: ST_TO_ADDR
// if tmp < distance then
60459: LD_VAR 0 9
60463: PUSH
60464: LD_VAR 0 10
60468: LESS
60469: IFFALSE 60491
// begin result := i ;
60471: LD_ADDR_VAR 0 5
60475: PUSH
60476: LD_VAR 0 6
60480: ST_TO_ADDR
// distance := tmp ;
60481: LD_ADDR_VAR 0 10
60485: PUSH
60486: LD_VAR 0 9
60490: ST_TO_ADDR
// end ; end ;
60491: GO 60349
60493: POP
60494: POP
// end ;
60495: LD_VAR 0 5
60499: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60500: LD_INT 0
60502: PPUSH
60503: PPUSH
// if not driver or not IsInUnit ( driver ) then
60504: LD_VAR 0 1
60508: NOT
60509: PUSH
60510: LD_VAR 0 1
60514: PPUSH
60515: CALL_OW 310
60519: NOT
60520: OR
60521: IFFALSE 60525
// exit ;
60523: GO 60615
// vehicle := IsInUnit ( driver ) ;
60525: LD_ADDR_VAR 0 3
60529: PUSH
60530: LD_VAR 0 1
60534: PPUSH
60535: CALL_OW 310
60539: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60540: LD_VAR 0 1
60544: PPUSH
60545: LD_STRING \
60547: PUSH
60548: LD_INT 0
60550: PUSH
60551: LD_INT 0
60553: PUSH
60554: LD_INT 0
60556: PUSH
60557: LD_INT 0
60559: PUSH
60560: LD_INT 0
60562: PUSH
60563: LD_INT 0
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: PUSH
60575: LD_STRING E
60577: PUSH
60578: LD_INT 0
60580: PUSH
60581: LD_INT 0
60583: PUSH
60584: LD_VAR 0 3
60588: PUSH
60589: LD_INT 0
60591: PUSH
60592: LD_INT 0
60594: PUSH
60595: LD_INT 0
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PPUSH
60611: CALL_OW 446
// end ;
60615: LD_VAR 0 2
60619: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60620: LD_INT 0
60622: PPUSH
60623: PPUSH
// if not driver or not IsInUnit ( driver ) then
60624: LD_VAR 0 1
60628: NOT
60629: PUSH
60630: LD_VAR 0 1
60634: PPUSH
60635: CALL_OW 310
60639: NOT
60640: OR
60641: IFFALSE 60645
// exit ;
60643: GO 60735
// vehicle := IsInUnit ( driver ) ;
60645: LD_ADDR_VAR 0 3
60649: PUSH
60650: LD_VAR 0 1
60654: PPUSH
60655: CALL_OW 310
60659: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60660: LD_VAR 0 1
60664: PPUSH
60665: LD_STRING \
60667: PUSH
60668: LD_INT 0
60670: PUSH
60671: LD_INT 0
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: LD_INT 0
60679: PUSH
60680: LD_INT 0
60682: PUSH
60683: LD_INT 0
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: PUSH
60695: LD_STRING E
60697: PUSH
60698: LD_INT 0
60700: PUSH
60701: LD_INT 0
60703: PUSH
60704: LD_VAR 0 3
60708: PUSH
60709: LD_INT 0
60711: PUSH
60712: LD_INT 0
60714: PUSH
60715: LD_INT 0
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PPUSH
60731: CALL_OW 447
// end ;
60735: LD_VAR 0 2
60739: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60740: LD_INT 0
60742: PPUSH
60743: PPUSH
60744: PPUSH
// tmp := [ ] ;
60745: LD_ADDR_VAR 0 5
60749: PUSH
60750: EMPTY
60751: ST_TO_ADDR
// for i in units do
60752: LD_ADDR_VAR 0 4
60756: PUSH
60757: LD_VAR 0 1
60761: PUSH
60762: FOR_IN
60763: IFFALSE 60801
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60765: LD_ADDR_VAR 0 5
60769: PUSH
60770: LD_VAR 0 5
60774: PPUSH
60775: LD_VAR 0 5
60779: PUSH
60780: LD_INT 1
60782: PLUS
60783: PPUSH
60784: LD_VAR 0 4
60788: PPUSH
60789: CALL_OW 256
60793: PPUSH
60794: CALL_OW 2
60798: ST_TO_ADDR
60799: GO 60762
60801: POP
60802: POP
// if not tmp then
60803: LD_VAR 0 5
60807: NOT
60808: IFFALSE 60812
// exit ;
60810: GO 60860
// if asc then
60812: LD_VAR 0 2
60816: IFFALSE 60840
// result := SortListByListAsc ( units , tmp ) else
60818: LD_ADDR_VAR 0 3
60822: PUSH
60823: LD_VAR 0 1
60827: PPUSH
60828: LD_VAR 0 5
60832: PPUSH
60833: CALL_OW 76
60837: ST_TO_ADDR
60838: GO 60860
// result := SortListByListDesc ( units , tmp ) ;
60840: LD_ADDR_VAR 0 3
60844: PUSH
60845: LD_VAR 0 1
60849: PPUSH
60850: LD_VAR 0 5
60854: PPUSH
60855: CALL_OW 77
60859: ST_TO_ADDR
// end ;
60860: LD_VAR 0 3
60864: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
60865: LD_INT 0
60867: PPUSH
60868: PPUSH
// task := GetTaskList ( mech ) ;
60869: LD_ADDR_VAR 0 4
60873: PUSH
60874: LD_VAR 0 1
60878: PPUSH
60879: CALL_OW 437
60883: ST_TO_ADDR
// if not task then
60884: LD_VAR 0 4
60888: NOT
60889: IFFALSE 60893
// exit ;
60891: GO 60935
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
60893: LD_ADDR_VAR 0 3
60897: PUSH
60898: LD_VAR 0 4
60902: PUSH
60903: LD_INT 1
60905: ARRAY
60906: PUSH
60907: LD_INT 1
60909: ARRAY
60910: PUSH
60911: LD_STRING r
60913: EQUAL
60914: PUSH
60915: LD_VAR 0 4
60919: PUSH
60920: LD_INT 1
60922: ARRAY
60923: PUSH
60924: LD_INT 4
60926: ARRAY
60927: PUSH
60928: LD_VAR 0 2
60932: EQUAL
60933: AND
60934: ST_TO_ADDR
// end ;
60935: LD_VAR 0 3
60939: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
60940: LD_INT 0
60942: PPUSH
// SetDir ( unit , d ) ;
60943: LD_VAR 0 1
60947: PPUSH
60948: LD_VAR 0 4
60952: PPUSH
60953: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
60957: LD_VAR 0 1
60961: PPUSH
60962: LD_VAR 0 2
60966: PPUSH
60967: LD_VAR 0 3
60971: PPUSH
60972: LD_VAR 0 5
60976: PPUSH
60977: CALL_OW 48
// end ;
60981: LD_VAR 0 6
60985: RET
// export function ToNaturalNumber ( number ) ; begin
60986: LD_INT 0
60988: PPUSH
// result := number div 1 ;
60989: LD_ADDR_VAR 0 2
60993: PUSH
60994: LD_VAR 0 1
60998: PUSH
60999: LD_INT 1
61001: DIV
61002: ST_TO_ADDR
// if number < 0 then
61003: LD_VAR 0 1
61007: PUSH
61008: LD_INT 0
61010: LESS
61011: IFFALSE 61021
// result := 0 ;
61013: LD_ADDR_VAR 0 2
61017: PUSH
61018: LD_INT 0
61020: ST_TO_ADDR
// end ;
61021: LD_VAR 0 2
61025: RET
// export function SortByClass ( units , class ) ; var un ; begin
61026: LD_INT 0
61028: PPUSH
61029: PPUSH
// if not units or not class then
61030: LD_VAR 0 1
61034: NOT
61035: PUSH
61036: LD_VAR 0 2
61040: NOT
61041: OR
61042: IFFALSE 61046
// exit ;
61044: GO 61141
// result := [ ] ;
61046: LD_ADDR_VAR 0 3
61050: PUSH
61051: EMPTY
61052: ST_TO_ADDR
// for un in units do
61053: LD_ADDR_VAR 0 4
61057: PUSH
61058: LD_VAR 0 1
61062: PUSH
61063: FOR_IN
61064: IFFALSE 61139
// if GetClass ( un ) = class then
61066: LD_VAR 0 4
61070: PPUSH
61071: CALL_OW 257
61075: PUSH
61076: LD_VAR 0 2
61080: EQUAL
61081: IFFALSE 61108
// result := Insert ( result , 1 , un ) else
61083: LD_ADDR_VAR 0 3
61087: PUSH
61088: LD_VAR 0 3
61092: PPUSH
61093: LD_INT 1
61095: PPUSH
61096: LD_VAR 0 4
61100: PPUSH
61101: CALL_OW 2
61105: ST_TO_ADDR
61106: GO 61137
// result := Replace ( result , result + 1 , un ) ;
61108: LD_ADDR_VAR 0 3
61112: PUSH
61113: LD_VAR 0 3
61117: PPUSH
61118: LD_VAR 0 3
61122: PUSH
61123: LD_INT 1
61125: PLUS
61126: PPUSH
61127: LD_VAR 0 4
61131: PPUSH
61132: CALL_OW 1
61136: ST_TO_ADDR
61137: GO 61063
61139: POP
61140: POP
// end ;
61141: LD_VAR 0 3
61145: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61146: LD_INT 0
61148: PPUSH
61149: PPUSH
61150: PPUSH
61151: PPUSH
61152: PPUSH
61153: PPUSH
61154: PPUSH
// result := [ ] ;
61155: LD_ADDR_VAR 0 4
61159: PUSH
61160: EMPTY
61161: ST_TO_ADDR
// if x - r < 0 then
61162: LD_VAR 0 1
61166: PUSH
61167: LD_VAR 0 3
61171: MINUS
61172: PUSH
61173: LD_INT 0
61175: LESS
61176: IFFALSE 61188
// min_x := 0 else
61178: LD_ADDR_VAR 0 8
61182: PUSH
61183: LD_INT 0
61185: ST_TO_ADDR
61186: GO 61204
// min_x := x - r ;
61188: LD_ADDR_VAR 0 8
61192: PUSH
61193: LD_VAR 0 1
61197: PUSH
61198: LD_VAR 0 3
61202: MINUS
61203: ST_TO_ADDR
// if y - r < 0 then
61204: LD_VAR 0 2
61208: PUSH
61209: LD_VAR 0 3
61213: MINUS
61214: PUSH
61215: LD_INT 0
61217: LESS
61218: IFFALSE 61230
// min_y := 0 else
61220: LD_ADDR_VAR 0 7
61224: PUSH
61225: LD_INT 0
61227: ST_TO_ADDR
61228: GO 61246
// min_y := y - r ;
61230: LD_ADDR_VAR 0 7
61234: PUSH
61235: LD_VAR 0 2
61239: PUSH
61240: LD_VAR 0 3
61244: MINUS
61245: ST_TO_ADDR
// max_x := x + r ;
61246: LD_ADDR_VAR 0 9
61250: PUSH
61251: LD_VAR 0 1
61255: PUSH
61256: LD_VAR 0 3
61260: PLUS
61261: ST_TO_ADDR
// max_y := y + r ;
61262: LD_ADDR_VAR 0 10
61266: PUSH
61267: LD_VAR 0 2
61271: PUSH
61272: LD_VAR 0 3
61276: PLUS
61277: ST_TO_ADDR
// for _x = min_x to max_x do
61278: LD_ADDR_VAR 0 5
61282: PUSH
61283: DOUBLE
61284: LD_VAR 0 8
61288: DEC
61289: ST_TO_ADDR
61290: LD_VAR 0 9
61294: PUSH
61295: FOR_TO
61296: IFFALSE 61397
// for _y = min_y to max_y do
61298: LD_ADDR_VAR 0 6
61302: PUSH
61303: DOUBLE
61304: LD_VAR 0 7
61308: DEC
61309: ST_TO_ADDR
61310: LD_VAR 0 10
61314: PUSH
61315: FOR_TO
61316: IFFALSE 61393
// begin if not ValidHex ( _x , _y ) then
61318: LD_VAR 0 5
61322: PPUSH
61323: LD_VAR 0 6
61327: PPUSH
61328: CALL_OW 488
61332: NOT
61333: IFFALSE 61337
// continue ;
61335: GO 61315
// if GetResourceTypeXY ( _x , _y ) then
61337: LD_VAR 0 5
61341: PPUSH
61342: LD_VAR 0 6
61346: PPUSH
61347: CALL_OW 283
61351: IFFALSE 61391
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61353: LD_ADDR_VAR 0 4
61357: PUSH
61358: LD_VAR 0 4
61362: PPUSH
61363: LD_VAR 0 4
61367: PUSH
61368: LD_INT 1
61370: PLUS
61371: PPUSH
61372: LD_VAR 0 5
61376: PUSH
61377: LD_VAR 0 6
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PPUSH
61386: CALL_OW 1
61390: ST_TO_ADDR
// end ;
61391: GO 61315
61393: POP
61394: POP
61395: GO 61295
61397: POP
61398: POP
// end ;
61399: LD_VAR 0 4
61403: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61404: LD_INT 0
61406: PPUSH
61407: PPUSH
61408: PPUSH
61409: PPUSH
61410: PPUSH
61411: PPUSH
61412: PPUSH
61413: PPUSH
// if not units then
61414: LD_VAR 0 1
61418: NOT
61419: IFFALSE 61423
// exit ;
61421: GO 61848
// result := UnitFilter ( units , [ f_ok ] ) ;
61423: LD_ADDR_VAR 0 3
61427: PUSH
61428: LD_VAR 0 1
61432: PPUSH
61433: LD_INT 50
61435: PUSH
61436: EMPTY
61437: LIST
61438: PPUSH
61439: CALL_OW 72
61443: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61444: LD_ADDR_VAR 0 8
61448: PUSH
61449: LD_VAR 0 1
61453: PUSH
61454: LD_INT 1
61456: ARRAY
61457: PPUSH
61458: CALL_OW 255
61462: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
61463: LD_ADDR_VAR 0 10
61467: PUSH
61468: LD_INT 29
61470: PUSH
61471: LD_EXP 43
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: ST_TO_ADDR
// if not result then
61480: LD_VAR 0 3
61484: NOT
61485: IFFALSE 61489
// exit ;
61487: GO 61848
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61489: LD_ADDR_VAR 0 5
61493: PUSH
61494: LD_INT 81
61496: PUSH
61497: LD_VAR 0 8
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PPUSH
61506: CALL_OW 69
61510: ST_TO_ADDR
// for i in result do
61511: LD_ADDR_VAR 0 4
61515: PUSH
61516: LD_VAR 0 3
61520: PUSH
61521: FOR_IN
61522: IFFALSE 61846
// begin tag := GetTag ( i ) + 1 ;
61524: LD_ADDR_VAR 0 9
61528: PUSH
61529: LD_VAR 0 4
61533: PPUSH
61534: CALL_OW 110
61538: PUSH
61539: LD_INT 1
61541: PLUS
61542: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
61543: LD_ADDR_VAR 0 7
61547: PUSH
61548: LD_VAR 0 4
61552: PPUSH
61553: CALL_OW 250
61557: PPUSH
61558: LD_VAR 0 4
61562: PPUSH
61563: CALL_OW 251
61567: PPUSH
61568: LD_INT 6
61570: PPUSH
61571: CALL 61146 0 3
61575: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
61576: LD_VAR 0 7
61580: PUSH
61581: LD_VAR 0 4
61585: PPUSH
61586: CALL_OW 264
61590: PUSH
61591: LD_VAR 0 10
61595: IN
61596: NOT
61597: AND
61598: IFFALSE 61637
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61600: LD_VAR 0 4
61604: PPUSH
61605: LD_VAR 0 7
61609: PUSH
61610: LD_INT 1
61612: ARRAY
61613: PUSH
61614: LD_INT 1
61616: ARRAY
61617: PPUSH
61618: LD_VAR 0 7
61622: PUSH
61623: LD_INT 1
61625: ARRAY
61626: PUSH
61627: LD_INT 2
61629: ARRAY
61630: PPUSH
61631: CALL_OW 116
61635: GO 61844
// if path > tag then
61637: LD_VAR 0 2
61641: PUSH
61642: LD_VAR 0 9
61646: GREATER
61647: IFFALSE 61814
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
61649: LD_ADDR_VAR 0 6
61653: PUSH
61654: LD_VAR 0 5
61658: PPUSH
61659: LD_INT 91
61661: PUSH
61662: LD_VAR 0 4
61666: PUSH
61667: LD_INT 12
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: LIST
61674: PPUSH
61675: CALL_OW 72
61679: ST_TO_ADDR
// if nearEnemy then
61680: LD_VAR 0 6
61684: IFFALSE 61712
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
61686: LD_VAR 0 4
61690: PPUSH
61691: LD_VAR 0 6
61695: PPUSH
61696: LD_VAR 0 4
61700: PPUSH
61701: CALL_OW 74
61705: PPUSH
61706: CALL_OW 115
61710: GO 61812
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
61712: LD_VAR 0 4
61716: PPUSH
61717: LD_VAR 0 2
61721: PUSH
61722: LD_VAR 0 9
61726: ARRAY
61727: PUSH
61728: LD_INT 1
61730: ARRAY
61731: PPUSH
61732: LD_VAR 0 2
61736: PUSH
61737: LD_VAR 0 9
61741: ARRAY
61742: PUSH
61743: LD_INT 2
61745: ARRAY
61746: PPUSH
61747: CALL_OW 297
61751: PUSH
61752: LD_INT 6
61754: GREATER
61755: IFFALSE 61798
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
61757: LD_VAR 0 4
61761: PPUSH
61762: LD_VAR 0 2
61766: PUSH
61767: LD_VAR 0 9
61771: ARRAY
61772: PUSH
61773: LD_INT 1
61775: ARRAY
61776: PPUSH
61777: LD_VAR 0 2
61781: PUSH
61782: LD_VAR 0 9
61786: ARRAY
61787: PUSH
61788: LD_INT 2
61790: ARRAY
61791: PPUSH
61792: CALL_OW 114
61796: GO 61812
// SetTag ( i , tag ) ;
61798: LD_VAR 0 4
61802: PPUSH
61803: LD_VAR 0 9
61807: PPUSH
61808: CALL_OW 109
// end else
61812: GO 61844
// if enemy then
61814: LD_VAR 0 5
61818: IFFALSE 61844
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
61820: LD_VAR 0 4
61824: PPUSH
61825: LD_VAR 0 5
61829: PPUSH
61830: LD_VAR 0 4
61834: PPUSH
61835: CALL_OW 74
61839: PPUSH
61840: CALL_OW 115
// end ;
61844: GO 61521
61846: POP
61847: POP
// end ;
61848: LD_VAR 0 3
61852: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
61853: LD_INT 0
61855: PPUSH
61856: PPUSH
61857: PPUSH
// if not unit or IsInUnit ( unit ) then
61858: LD_VAR 0 1
61862: NOT
61863: PUSH
61864: LD_VAR 0 1
61868: PPUSH
61869: CALL_OW 310
61873: OR
61874: IFFALSE 61878
// exit ;
61876: GO 61969
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
61878: LD_ADDR_VAR 0 4
61882: PUSH
61883: LD_VAR 0 1
61887: PPUSH
61888: CALL_OW 250
61892: PPUSH
61893: LD_VAR 0 2
61897: PPUSH
61898: LD_INT 1
61900: PPUSH
61901: CALL_OW 272
61905: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
61906: LD_ADDR_VAR 0 5
61910: PUSH
61911: LD_VAR 0 1
61915: PPUSH
61916: CALL_OW 251
61920: PPUSH
61921: LD_VAR 0 2
61925: PPUSH
61926: LD_INT 1
61928: PPUSH
61929: CALL_OW 273
61933: ST_TO_ADDR
// if ValidHex ( x , y ) then
61934: LD_VAR 0 4
61938: PPUSH
61939: LD_VAR 0 5
61943: PPUSH
61944: CALL_OW 488
61948: IFFALSE 61969
// ComTurnXY ( unit , x , y ) ;
61950: LD_VAR 0 1
61954: PPUSH
61955: LD_VAR 0 4
61959: PPUSH
61960: LD_VAR 0 5
61964: PPUSH
61965: CALL_OW 118
// end ;
61969: LD_VAR 0 3
61973: RET
// export function SeeUnits ( side , units ) ; var i ; begin
61974: LD_INT 0
61976: PPUSH
61977: PPUSH
// result := false ;
61978: LD_ADDR_VAR 0 3
61982: PUSH
61983: LD_INT 0
61985: ST_TO_ADDR
// if not units then
61986: LD_VAR 0 2
61990: NOT
61991: IFFALSE 61995
// exit ;
61993: GO 62040
// for i in units do
61995: LD_ADDR_VAR 0 4
61999: PUSH
62000: LD_VAR 0 2
62004: PUSH
62005: FOR_IN
62006: IFFALSE 62038
// if See ( side , i ) then
62008: LD_VAR 0 1
62012: PPUSH
62013: LD_VAR 0 4
62017: PPUSH
62018: CALL_OW 292
62022: IFFALSE 62036
// begin result := true ;
62024: LD_ADDR_VAR 0 3
62028: PUSH
62029: LD_INT 1
62031: ST_TO_ADDR
// exit ;
62032: POP
62033: POP
62034: GO 62040
// end ;
62036: GO 62005
62038: POP
62039: POP
// end ;
62040: LD_VAR 0 3
62044: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62045: LD_INT 0
62047: PPUSH
62048: PPUSH
62049: PPUSH
62050: PPUSH
// if not unit or not points then
62051: LD_VAR 0 1
62055: NOT
62056: PUSH
62057: LD_VAR 0 2
62061: NOT
62062: OR
62063: IFFALSE 62067
// exit ;
62065: GO 62157
// dist := 99999 ;
62067: LD_ADDR_VAR 0 5
62071: PUSH
62072: LD_INT 99999
62074: ST_TO_ADDR
// for i in points do
62075: LD_ADDR_VAR 0 4
62079: PUSH
62080: LD_VAR 0 2
62084: PUSH
62085: FOR_IN
62086: IFFALSE 62155
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62088: LD_ADDR_VAR 0 6
62092: PUSH
62093: LD_VAR 0 1
62097: PPUSH
62098: LD_VAR 0 4
62102: PUSH
62103: LD_INT 1
62105: ARRAY
62106: PPUSH
62107: LD_VAR 0 4
62111: PUSH
62112: LD_INT 2
62114: ARRAY
62115: PPUSH
62116: CALL_OW 297
62120: ST_TO_ADDR
// if tmpDist < dist then
62121: LD_VAR 0 6
62125: PUSH
62126: LD_VAR 0 5
62130: LESS
62131: IFFALSE 62153
// begin result := i ;
62133: LD_ADDR_VAR 0 3
62137: PUSH
62138: LD_VAR 0 4
62142: ST_TO_ADDR
// dist := tmpDist ;
62143: LD_ADDR_VAR 0 5
62147: PUSH
62148: LD_VAR 0 6
62152: ST_TO_ADDR
// end ; end ;
62153: GO 62085
62155: POP
62156: POP
// end ;
62157: LD_VAR 0 3
62161: RET
