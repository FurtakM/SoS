// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// FogOff ( 7 ) ;
  11: LD_INT 7
  13: PPUSH
  14: CALL_OW 344
// RandomizeAll ;
  18: CALL_OW 11
// InitVariables ;
  22: CALL 66 0 0
// LoadBuildings ;
  26: CALL 94 0 0
// PrepareAlliance ;
  30: CALL 637 0 0
// music_nat := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
  34: LD_ADDR_OWVAR 71
  38: PUSH
  39: LD_INT 1
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: PUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 2
  54: PPUSH
  55: CALL_OW 12
  59: ARRAY
  60: ST_TO_ADDR
// Action ;
  61: CALL 3429 0 0
// end ;
  65: END
// export debug ; export function InitVariables ; begin
  66: LD_INT 0
  68: PPUSH
// debug := false ;
  69: LD_ADDR_EXP 1
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// end ;
  77: LD_VAR 0 1
  81: RET
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
  82: LD_VAR 0 1
  86: PPUSH
  87: CALL 17508 0 1
// end ; end_of_file
  91: PPOPN 1
  93: END
// export function LoadBuildings ; var i , tmp , b , j ; begin
  94: LD_INT 0
  96: PPUSH
  97: PPUSH
  98: PPUSH
  99: PPUSH
 100: PPUSH
// tmp := LoadVariable ( 13a_buildings , [ [ 7 , 1 , b_warehouse , 70 , 46 , 3 , 10 , 0 , 0 , 0 ] ] ) ;
 101: LD_ADDR_VAR 0 3
 105: PUSH
 106: LD_STRING 13a_buildings
 108: PPUSH
 109: LD_INT 7
 111: PUSH
 112: LD_INT 1
 114: PUSH
 115: LD_INT 1
 117: PUSH
 118: LD_INT 70
 120: PUSH
 121: LD_INT 46
 123: PUSH
 124: LD_INT 3
 126: PUSH
 127: LD_INT 10
 129: PUSH
 130: LD_INT 0
 132: PUSH
 133: LD_INT 0
 135: PUSH
 136: LD_INT 0
 138: PUSH
 139: EMPTY
 140: LIST
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: LIST
 150: PUSH
 151: EMPTY
 152: LIST
 153: PPUSH
 154: CALL_OW 30
 158: ST_TO_ADDR
// bc_kind1 := - 1 ;
 159: LD_ADDR_OWVAR 44
 163: PUSH
 164: LD_INT 1
 166: NEG
 167: ST_TO_ADDR
// bc_kind2 := - 1 ;
 168: LD_ADDR_OWVAR 45
 172: PUSH
 173: LD_INT 1
 175: NEG
 176: ST_TO_ADDR
// for i in tmp do
 177: LD_ADDR_VAR 0 2
 181: PUSH
 182: LD_VAR 0 3
 186: PUSH
 187: FOR_IN
 188: IFFALSE 433
// begin uc_side := 7 ;
 190: LD_ADDR_OWVAR 20
 194: PUSH
 195: LD_INT 7
 197: ST_TO_ADDR
// uc_nation := i [ 2 ] ;
 198: LD_ADDR_OWVAR 21
 202: PUSH
 203: LD_VAR 0 2
 207: PUSH
 208: LD_INT 2
 210: ARRAY
 211: ST_TO_ADDR
// if i [ 2 ] = 2 then
 212: LD_VAR 0 2
 216: PUSH
 217: LD_INT 2
 219: ARRAY
 220: PUSH
 221: LD_INT 2
 223: EQUAL
 224: IFFALSE 234
// uc_side := 4 ;
 226: LD_ADDR_OWVAR 20
 230: PUSH
 231: LD_INT 4
 233: ST_TO_ADDR
// bc_type := i [ 3 ] ;
 234: LD_ADDR_OWVAR 42
 238: PUSH
 239: LD_VAR 0 2
 243: PUSH
 244: LD_INT 3
 246: ARRAY
 247: ST_TO_ADDR
// if i [ 3 ] in [ b_oil_mine , b_siberite_mine ] then
 248: LD_VAR 0 2
 252: PUSH
 253: LD_INT 3
 255: ARRAY
 256: PUSH
 257: LD_INT 29
 259: PUSH
 260: LD_INT 30
 262: PUSH
 263: EMPTY
 264: LIST
 265: LIST
 266: IN
 267: IFFALSE 300
// SetResourceVisibility ( i [ 4 ] , i [ 5 ] , i [ 1 ] ) ;
 269: LD_VAR 0 2
 273: PUSH
 274: LD_INT 4
 276: ARRAY
 277: PPUSH
 278: LD_VAR 0 2
 282: PUSH
 283: LD_INT 5
 285: ARRAY
 286: PPUSH
 287: LD_VAR 0 2
 291: PUSH
 292: LD_INT 1
 294: ARRAY
 295: PPUSH
 296: CALL_OW 441
// if i [ 8 ] then
 300: LD_VAR 0 2
 304: PUSH
 305: LD_INT 8
 307: ARRAY
 308: IFFALSE 324
// bc_kind1 := i [ 8 ] ;
 310: LD_ADDR_OWVAR 44
 314: PUSH
 315: LD_VAR 0 2
 319: PUSH
 320: LD_INT 8
 322: ARRAY
 323: ST_TO_ADDR
// if i [ 9 ] then
 324: LD_VAR 0 2
 328: PUSH
 329: LD_INT 9
 331: ARRAY
 332: IFFALSE 348
// bc_kind2 := i [ 9 ] ;
 334: LD_ADDR_OWVAR 45
 338: PUSH
 339: LD_VAR 0 2
 343: PUSH
 344: LD_INT 9
 346: ARRAY
 347: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 4 ] , i [ 5 ] , i [ 6 ] ) ;
 348: LD_ADDR_VAR 0 4
 352: PUSH
 353: LD_VAR 0 2
 357: PUSH
 358: LD_INT 4
 360: ARRAY
 361: PPUSH
 362: LD_VAR 0 2
 366: PUSH
 367: LD_INT 5
 369: ARRAY
 370: PPUSH
 371: LD_VAR 0 2
 375: PUSH
 376: LD_INT 6
 378: ARRAY
 379: PPUSH
 380: CALL_OW 47
 384: ST_TO_ADDR
// SetBLevel ( b , i [ 7 ] ) ;
 385: LD_VAR 0 4
 389: PPUSH
 390: LD_VAR 0 2
 394: PUSH
 395: LD_INT 7
 397: ARRAY
 398: PPUSH
 399: CALL_OW 241
// if i [ 10 ] then
 403: LD_VAR 0 2
 407: PUSH
 408: LD_INT 10
 410: ARRAY
 411: IFFALSE 431
// PlaceWeaponTurret ( b , i [ 10 ] ) ;
 413: LD_VAR 0 4
 417: PPUSH
 418: LD_VAR 0 2
 422: PUSH
 423: LD_INT 10
 425: ARRAY
 426: PPUSH
 427: CALL_OW 431
// end ;
 431: GO 187
 433: POP
 434: POP
// if HexInfo ( 144 , 65 ) = 0 then
 435: LD_INT 144
 437: PPUSH
 438: LD_INT 65
 440: PPUSH
 441: CALL_OW 428
 445: PUSH
 446: LD_INT 0
 448: EQUAL
 449: IFFALSE 486
// begin uc_side := 4 ;
 451: LD_ADDR_OWVAR 20
 455: PUSH
 456: LD_INT 4
 458: ST_TO_ADDR
// bc_type := b_warehouse ;
 459: LD_ADDR_OWVAR 42
 463: PUSH
 464: LD_INT 1
 466: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 144 , 65 , 1 ) ;
 467: LD_ADDR_VAR 0 4
 471: PUSH
 472: LD_INT 144
 474: PPUSH
 475: LD_INT 65
 477: PPUSH
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 47
 485: ST_TO_ADDR
// end ; for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 486: LD_ADDR_VAR 0 2
 490: PUSH
 491: LD_INT 22
 493: PUSH
 494: LD_INT 7
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: PUSH
 501: LD_INT 2
 503: PUSH
 504: LD_INT 30
 506: PUSH
 507: LD_INT 0
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 30
 516: PUSH
 517: LD_INT 1
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PPUSH
 533: CALL_OW 69
 537: PUSH
 538: FOR_IN
 539: IFFALSE 591
// for j = 1 to 3 do
 541: LD_ADDR_VAR 0 5
 545: PUSH
 546: DOUBLE
 547: LD_INT 1
 549: DEC
 550: ST_TO_ADDR
 551: LD_INT 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 587
// SetResourceType ( GetBase ( i ) , j , 3000 / j ) ;
 557: LD_VAR 0 2
 561: PPUSH
 562: CALL_OW 274
 566: PPUSH
 567: LD_VAR 0 5
 571: PPUSH
 572: LD_INT 3000
 574: PUSH
 575: LD_VAR 0 5
 579: DIVREAL
 580: PPUSH
 581: CALL_OW 277
 585: GO 554
 587: POP
 588: POP
 589: GO 538
 591: POP
 592: POP
// for i in FilterUnitsInArea ( spot_area , [ f_side , 7 ] ) do
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: LD_INT 3
 600: PPUSH
 601: LD_INT 22
 603: PUSH
 604: LD_INT 7
 606: PUSH
 607: EMPTY
 608: LIST
 609: LIST
 610: PPUSH
 611: CALL_OW 70
 615: PUSH
 616: FOR_IN
 617: IFFALSE 630
// RemoveUnit ( i ) ;
 619: LD_VAR 0 2
 623: PPUSH
 624: CALL_OW 64
 628: GO 616
 630: POP
 631: POP
// end ; end_of_file
 632: LD_VAR 0 1
 636: RET
// export JMM , Burlak , freedom ; export Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Gossudarov , Kirilenkova , Titov , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov , Belkov , Gnyevko , Masha ; export squad1 , squad2 ; export function PrepareAlliance ; var tmp , i , veh ; begin
 637: LD_INT 0
 639: PPUSH
 640: PPUSH
 641: PPUSH
 642: PPUSH
// uc_side := 7 ;
 643: LD_ADDR_OWVAR 20
 647: PUSH
 648: LD_INT 7
 650: ST_TO_ADDR
// uc_nation := 1 ;
 651: LD_ADDR_OWVAR 21
 655: PUSH
 656: LD_INT 1
 658: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 13a_ ) ;
 659: LD_ADDR_EXP 2
 663: PUSH
 664: LD_STRING JMM
 666: PPUSH
 667: LD_EXP 1
 671: NOT
 672: PPUSH
 673: LD_STRING 13a_
 675: PPUSH
 676: CALL 21417 0 3
 680: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 13a_ ) ;
 681: LD_ADDR_EXP 3
 685: PUSH
 686: LD_STRING Burlak
 688: PPUSH
 689: LD_EXP 1
 693: NOT
 694: PPUSH
 695: LD_STRING 13a_
 697: PPUSH
 698: CALL 21417 0 3
 702: ST_TO_ADDR
// if debug then
 703: LD_EXP 1
 707: IFFALSE 742
// begin PrepareHuman ( sex_male , 4 , 10 ) ;
 709: LD_INT 1
 711: PPUSH
 712: LD_INT 4
 714: PPUSH
 715: LD_INT 10
 717: PPUSH
 718: CALL_OW 380
// JMM := CreateHuman ;
 722: LD_ADDR_EXP 2
 726: PUSH
 727: CALL_OW 44
 731: ST_TO_ADDR
// Burlak := CreateHuman ;
 732: LD_ADDR_EXP 3
 736: PUSH
 737: CALL_OW 44
 741: ST_TO_ADDR
// end ; freedom := FilterUnitsInArea ( freedom_base , [ [ f_side , 7 ] , [ f_or , [ f_nation , 1 ] , [ f_nation , 3 ] ] , [ f_btype , b_warehouse ] ] ) ;
 742: LD_ADDR_EXP 4
 746: PUSH
 747: LD_INT 1
 749: PPUSH
 750: LD_INT 22
 752: PUSH
 753: LD_INT 7
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: LD_INT 2
 762: PUSH
 763: LD_INT 23
 765: PUSH
 766: LD_INT 1
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: PUSH
 773: LD_INT 23
 775: PUSH
 776: LD_INT 3
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PUSH
 783: EMPTY
 784: LIST
 785: LIST
 786: LIST
 787: PUSH
 788: LD_INT 30
 790: PUSH
 791: LD_INT 1
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: PPUSH
 803: CALL_OW 70
 807: ST_TO_ADDR
// if freedom then
 808: LD_EXP 4
 812: IFFALSE 939
// begin freedom := freedom [ 1 ] ;
 814: LD_ADDR_EXP 4
 818: PUSH
 819: LD_EXP 4
 823: PUSH
 824: LD_INT 1
 826: ARRAY
 827: ST_TO_ADDR
// SetBName ( freedom , freedom ) ;
 828: LD_EXP 4
 832: PPUSH
 833: LD_STRING freedom
 835: PPUSH
 836: CALL_OW 500
// CenterNowOnUnits ( freedom ) ;
 840: LD_EXP 4
 844: PPUSH
 845: CALL_OW 87
// PlaceHumanInUnit ( JMM , freedom ) ;
 849: LD_EXP 2
 853: PPUSH
 854: LD_EXP 4
 858: PPUSH
 859: CALL_OW 52
// PlaceHumanInUnit ( Burlak , freedom ) ;
 863: LD_EXP 3
 867: PPUSH
 868: LD_EXP 4
 872: PPUSH
 873: CALL_OW 52
// SetResourceType ( GetBase ( freedom ) , mat_cans , 1000 ) ;
 877: LD_EXP 4
 881: PPUSH
 882: CALL_OW 274
 886: PPUSH
 887: LD_INT 1
 889: PPUSH
 890: LD_INT 1000
 892: PPUSH
 893: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_oil , 400 ) ;
 897: LD_EXP 4
 901: PPUSH
 902: CALL_OW 274
 906: PPUSH
 907: LD_INT 2
 909: PPUSH
 910: LD_INT 400
 912: PPUSH
 913: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_siberit , 30 ) ;
 917: LD_EXP 4
 921: PPUSH
 922: CALL_OW 274
 926: PPUSH
 927: LD_INT 3
 929: PPUSH
 930: LD_INT 30
 932: PPUSH
 933: CALL_OW 277
// end else
 937: GO 1026
// begin PlaceUnitArea ( JMM , freedom_base , false ) ;
 939: LD_EXP 2
 943: PPUSH
 944: LD_INT 1
 946: PPUSH
 947: LD_INT 0
 949: PPUSH
 950: CALL_OW 49
// PlaceUnitXYR ( Burlak , GetX ( JMM ) , GetY ( JMM ) , 8 , false ) ;
 954: LD_EXP 3
 958: PPUSH
 959: LD_EXP 2
 963: PPUSH
 964: CALL_OW 250
 968: PPUSH
 969: LD_EXP 2
 973: PPUSH
 974: CALL_OW 251
 978: PPUSH
 979: LD_INT 8
 981: PPUSH
 982: LD_INT 0
 984: PPUSH
 985: CALL_OW 50
// ComTurnUnit ( JMM , Burlak ) ;
 989: LD_EXP 2
 993: PPUSH
 994: LD_EXP 3
 998: PPUSH
 999: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
1003: LD_EXP 3
1007: PPUSH
1008: LD_EXP 2
1012: PPUSH
1013: CALL_OW 119
// CenterNowOnUnits ( JMM ) ;
1017: LD_EXP 2
1021: PPUSH
1022: CALL_OW 87
// end ; SetClass ( JMM , 2 ) ;
1026: LD_EXP 2
1030: PPUSH
1031: LD_INT 2
1033: PPUSH
1034: CALL_OW 336
// tmp := [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] , [ us_double_gun , us_laser , us_rocket_launcher , us_gatling_gun , us_cargo_bay ] ] ;
1038: LD_ADDR_VAR 0 2
1042: PUSH
1043: LD_INT 2
1045: PUSH
1046: LD_INT 3
1048: PUSH
1049: LD_INT 4
1051: PUSH
1052: LD_INT 5
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 5
1063: PUSH
1064: LD_INT 9
1066: PUSH
1067: LD_INT 7
1069: PUSH
1070: LD_INT 4
1072: PUSH
1073: LD_INT 12
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: ST_TO_ADDR
// for i = 1 to 5 do
1087: LD_ADDR_VAR 0 3
1091: PUSH
1092: DOUBLE
1093: LD_INT 1
1095: DEC
1096: ST_TO_ADDR
1097: LD_INT 5
1099: PUSH
1100: FOR_TO
1101: IFFALSE 1285
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 5 + 1 ] , 100 ) ;
1103: LD_VAR 0 2
1107: PUSH
1108: LD_INT 1
1110: ARRAY
1111: PUSH
1112: LD_VAR 0 3
1116: PUSH
1117: LD_INT 4
1119: MOD
1120: PUSH
1121: LD_INT 1
1123: PLUS
1124: ARRAY
1125: PPUSH
1126: LD_INT 1
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 1
1138: PPUSH
1139: LD_INT 2
1141: PPUSH
1142: CALL_OW 12
1146: ARRAY
1147: PPUSH
1148: LD_INT 1
1150: PPUSH
1151: LD_VAR 0 2
1155: PUSH
1156: LD_INT 2
1158: ARRAY
1159: PUSH
1160: LD_VAR 0 3
1164: PUSH
1165: LD_INT 5
1167: MOD
1168: PUSH
1169: LD_INT 1
1171: PLUS
1172: ARRAY
1173: PPUSH
1174: LD_INT 100
1176: PPUSH
1177: CALL 26241 0 5
// veh := CreateVehicle ;
1181: LD_ADDR_VAR 0 4
1185: PUSH
1186: CALL_OW 45
1190: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1191: LD_VAR 0 4
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_INT 5
1201: PPUSH
1202: CALL_OW 12
1206: PPUSH
1207: CALL_OW 233
// if freedom then
1211: LD_EXP 4
1215: IFFALSE 1248
// begin if IsInArea ( freedom , freedom_base ) then
1217: LD_EXP 4
1221: PPUSH
1222: LD_INT 1
1224: PPUSH
1225: CALL_OW 308
1229: IFFALSE 1246
// PlaceUnitArea ( veh , freedom_base , false ) end else
1231: LD_VAR 0 4
1235: PPUSH
1236: LD_INT 1
1238: PPUSH
1239: LD_INT 0
1241: PPUSH
1242: CALL_OW 49
1246: GO 1283
// PlaceUnitXYR ( veh , GetX ( JMM ) , GetY ( JMM ) , 14 , false ) ;
1248: LD_VAR 0 4
1252: PPUSH
1253: LD_EXP 2
1257: PPUSH
1258: CALL_OW 250
1262: PPUSH
1263: LD_EXP 2
1267: PPUSH
1268: CALL_OW 251
1272: PPUSH
1273: LD_INT 14
1275: PPUSH
1276: LD_INT 0
1278: PPUSH
1279: CALL_OW 50
// end ;
1283: GO 1100
1285: POP
1286: POP
// uc_nation := 3 ;
1287: LD_ADDR_OWVAR 21
1291: PUSH
1292: LD_INT 3
1294: ST_TO_ADDR
// tmp := [ [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] ] ;
1295: LD_ADDR_VAR 0 2
1299: PUSH
1300: LD_INT 21
1302: PUSH
1303: LD_INT 22
1305: PUSH
1306: LD_INT 23
1308: PUSH
1309: LD_INT 24
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: PUSH
1318: LD_INT 43
1320: PUSH
1321: LD_INT 44
1323: PUSH
1324: LD_INT 45
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: ST_TO_ADDR
// for i = 1 to 5 do
1336: LD_ADDR_VAR 0 3
1340: PUSH
1341: DOUBLE
1342: LD_INT 1
1344: DEC
1345: ST_TO_ADDR
1346: LD_INT 5
1348: PUSH
1349: FOR_TO
1350: IFFALSE 1477
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 3 + 1 ] , 100 ) ;
1352: LD_VAR 0 2
1356: PUSH
1357: LD_INT 1
1359: ARRAY
1360: PUSH
1361: LD_VAR 0 3
1365: PUSH
1366: LD_INT 4
1368: MOD
1369: PUSH
1370: LD_INT 1
1372: PLUS
1373: ARRAY
1374: PPUSH
1375: LD_INT 1
1377: PUSH
1378: LD_INT 3
1380: PUSH
1381: EMPTY
1382: LIST
1383: LIST
1384: PUSH
1385: LD_INT 1
1387: PPUSH
1388: LD_INT 2
1390: PPUSH
1391: CALL_OW 12
1395: ARRAY
1396: PPUSH
1397: LD_INT 1
1399: PPUSH
1400: LD_VAR 0 2
1404: PUSH
1405: LD_INT 2
1407: ARRAY
1408: PUSH
1409: LD_VAR 0 3
1413: PUSH
1414: LD_INT 3
1416: MOD
1417: PUSH
1418: LD_INT 1
1420: PLUS
1421: ARRAY
1422: PPUSH
1423: LD_INT 100
1425: PPUSH
1426: CALL 26241 0 5
// veh := CreateVehicle ;
1430: LD_ADDR_VAR 0 4
1434: PUSH
1435: CALL_OW 45
1439: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1440: LD_VAR 0 4
1444: PPUSH
1445: LD_INT 0
1447: PPUSH
1448: LD_INT 5
1450: PPUSH
1451: CALL_OW 12
1455: PPUSH
1456: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1460: LD_VAR 0 4
1464: PPUSH
1465: LD_INT 1
1467: PPUSH
1468: LD_INT 0
1470: PPUSH
1471: CALL_OW 49
// end ;
1475: GO 1349
1477: POP
1478: POP
// if not FilterAllUnits ( [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
1479: LD_INT 2
1481: PUSH
1482: LD_INT 34
1484: PUSH
1485: LD_INT 12
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PUSH
1492: LD_INT 34
1494: PUSH
1495: LD_INT 51
1497: PUSH
1498: EMPTY
1499: LIST
1500: LIST
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: LIST
1506: PPUSH
1507: CALL_OW 69
1511: NOT
1512: IFFALSE 1578
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 ) ;
1514: LD_INT 22
1516: PPUSH
1517: LD_INT 3
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: LD_INT 51
1525: PPUSH
1526: LD_INT 0
1528: PPUSH
1529: CALL 26241 0 5
// veh := CreateVehicle ;
1533: LD_ADDR_VAR 0 4
1537: PUSH
1538: CALL_OW 45
1542: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1543: LD_VAR 0 4
1547: PPUSH
1548: LD_INT 0
1550: PPUSH
1551: LD_INT 5
1553: PPUSH
1554: CALL_OW 12
1558: PPUSH
1559: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1563: LD_VAR 0 4
1567: PPUSH
1568: LD_INT 1
1570: PPUSH
1571: LD_INT 0
1573: PPUSH
1574: CALL_OW 49
// end ; tmp := LoadVariable ( 13a_Masha , [ ] ) ;
1578: LD_ADDR_VAR 0 2
1582: PUSH
1583: LD_STRING 13a_Masha
1585: PPUSH
1586: EMPTY
1587: PPUSH
1588: CALL_OW 30
1592: ST_TO_ADDR
// if tmp then
1593: LD_VAR 0 2
1597: IFFALSE 1680
// begin PrepareVehicle ( tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] , 100 ) ;
1599: LD_VAR 0 2
1603: PUSH
1604: LD_INT 1
1606: ARRAY
1607: PPUSH
1608: LD_VAR 0 2
1612: PUSH
1613: LD_INT 2
1615: ARRAY
1616: PPUSH
1617: LD_VAR 0 2
1621: PUSH
1622: LD_INT 3
1624: ARRAY
1625: PPUSH
1626: LD_VAR 0 2
1630: PUSH
1631: LD_INT 4
1633: ARRAY
1634: PPUSH
1635: LD_INT 100
1637: PPUSH
1638: CALL 26241 0 5
// Masha := CreateVehicle ;
1642: LD_ADDR_EXP 36
1646: PUSH
1647: CALL_OW 45
1651: ST_TO_ADDR
// PlaceUnitArea ( Masha , freedom_base , false ) ;
1652: LD_EXP 36
1656: PPUSH
1657: LD_INT 1
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 49
// SetMark ( Masha , - 7 ) ;
1667: LD_EXP 36
1671: PPUSH
1672: LD_INT 7
1674: NEG
1675: PPUSH
1676: CALL_OW 242
// end ; uc_side := 4 ;
1680: LD_ADDR_OWVAR 20
1684: PUSH
1685: LD_INT 4
1687: ST_TO_ADDR
// tmp := [ ] ;
1688: LD_ADDR_VAR 0 2
1692: PUSH
1693: EMPTY
1694: ST_TO_ADDR
// squad1 := [ ] ;
1695: LD_ADDR_EXP 37
1699: PUSH
1700: EMPTY
1701: ST_TO_ADDR
// squad2 := [ ] ;
1702: LD_ADDR_EXP 38
1706: PUSH
1707: EMPTY
1708: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
1709: LD_ADDR_EXP 19
1713: PUSH
1714: LD_STRING Joan
1716: PPUSH
1717: LD_EXP 1
1721: NOT
1722: PPUSH
1723: LD_STRING 13a_
1725: PPUSH
1726: CALL 21417 0 3
1730: ST_TO_ADDR
// if Joan then
1731: LD_EXP 19
1735: IFFALSE 1753
// tmp := tmp ^ Joan ;
1737: LD_ADDR_VAR 0 2
1741: PUSH
1742: LD_VAR 0 2
1746: PUSH
1747: LD_EXP 19
1751: ADD
1752: ST_TO_ADDR
// Roth := PrepareUnit ( Roth , ( not debug ) , 13a_ ) ;
1753: LD_ADDR_EXP 5
1757: PUSH
1758: LD_STRING Roth
1760: PPUSH
1761: LD_EXP 1
1765: NOT
1766: PPUSH
1767: LD_STRING 13a_
1769: PPUSH
1770: CALL 21417 0 3
1774: ST_TO_ADDR
// if Roth then
1775: LD_EXP 5
1779: IFFALSE 1797
// tmp := tmp ^ Roth ;
1781: LD_ADDR_VAR 0 2
1785: PUSH
1786: LD_VAR 0 2
1790: PUSH
1791: LD_EXP 5
1795: ADD
1796: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 13a_ ) ;
1797: LD_ADDR_EXP 10
1801: PUSH
1802: LD_STRING Denis
1804: PPUSH
1805: LD_EXP 1
1809: NOT
1810: PPUSH
1811: LD_STRING 13a_
1813: PPUSH
1814: CALL 21417 0 3
1818: ST_TO_ADDR
// if Denis then
1819: LD_EXP 10
1823: IFFALSE 1841
// tmp := tmp ^ Denis ;
1825: LD_ADDR_VAR 0 2
1829: PUSH
1830: LD_VAR 0 2
1834: PUSH
1835: LD_EXP 10
1839: ADD
1840: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 13a_ ) ;
1841: LD_ADDR_EXP 20
1845: PUSH
1846: LD_STRING DeltaDoctor
1848: PPUSH
1849: LD_EXP 1
1853: NOT
1854: PPUSH
1855: LD_STRING 13a_
1857: PPUSH
1858: CALL 21417 0 3
1862: ST_TO_ADDR
// if DeltaDoctor then
1863: LD_EXP 20
1867: IFFALSE 1885
// tmp := tmp ^ DeltaDoctor ;
1869: LD_ADDR_VAR 0 2
1873: PUSH
1874: LD_VAR 0 2
1878: PUSH
1879: LD_EXP 20
1883: ADD
1884: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 13a_ ) ;
1885: LD_ADDR_EXP 18
1889: PUSH
1890: LD_STRING Simms
1892: PPUSH
1893: LD_EXP 1
1897: NOT
1898: PPUSH
1899: LD_STRING 13a_
1901: PPUSH
1902: CALL 21417 0 3
1906: ST_TO_ADDR
// if Simms then
1907: LD_EXP 18
1911: IFFALSE 1929
// tmp := tmp ^ Simms ;
1913: LD_ADDR_VAR 0 2
1917: PUSH
1918: LD_VAR 0 2
1922: PUSH
1923: LD_EXP 18
1927: ADD
1928: ST_TO_ADDR
// Gossudarov := PrepareUnit ( Gossudarov , ( not debug ) , 13a_ ) ;
1929: LD_ADDR_EXP 21
1933: PUSH
1934: LD_STRING Gossudarov
1936: PPUSH
1937: LD_EXP 1
1941: NOT
1942: PPUSH
1943: LD_STRING 13a_
1945: PPUSH
1946: CALL 21417 0 3
1950: ST_TO_ADDR
// if Gossudarov then
1951: LD_EXP 21
1955: IFFALSE 1973
// tmp := tmp ^ Gossudarov ;
1957: LD_ADDR_VAR 0 2
1961: PUSH
1962: LD_VAR 0 2
1966: PUSH
1967: LD_EXP 21
1971: ADD
1972: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , 13a_ ) ;
1973: LD_ADDR_EXP 22
1977: PUSH
1978: LD_STRING Kirilenkova
1980: PPUSH
1981: LD_EXP 1
1985: NOT
1986: PPUSH
1987: LD_STRING 13a_
1989: PPUSH
1990: CALL 21417 0 3
1994: ST_TO_ADDR
// if Kirilenkova then
1995: LD_EXP 22
1999: IFFALSE 2017
// tmp := tmp ^ Kirilenkova ;
2001: LD_ADDR_VAR 0 2
2005: PUSH
2006: LD_VAR 0 2
2010: PUSH
2011: LD_EXP 22
2015: ADD
2016: ST_TO_ADDR
// Petrosyan := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2017: LD_ADDR_EXP 25
2021: PUSH
2022: LD_STRING Petrosyan
2024: PPUSH
2025: LD_EXP 1
2029: NOT
2030: PPUSH
2031: LD_STRING 13a_
2033: PPUSH
2034: CALL 21417 0 3
2038: ST_TO_ADDR
// if Petrosyan then
2039: LD_EXP 25
2043: IFFALSE 2061
// tmp := tmp ^ Petrosyan ;
2045: LD_ADDR_VAR 0 2
2049: PUSH
2050: LD_VAR 0 2
2054: PUSH
2055: LD_EXP 25
2059: ADD
2060: ST_TO_ADDR
// Scholtze := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2061: LD_ADDR_EXP 26
2065: PUSH
2066: LD_STRING Petrosyan
2068: PPUSH
2069: LD_EXP 1
2073: NOT
2074: PPUSH
2075: LD_STRING 13a_
2077: PPUSH
2078: CALL 21417 0 3
2082: ST_TO_ADDR
// if Scholtze then
2083: LD_EXP 26
2087: IFFALSE 2105
// tmp := tmp ^ Scholtze ;
2089: LD_ADDR_VAR 0 2
2093: PUSH
2094: LD_VAR 0 2
2098: PUSH
2099: LD_EXP 26
2103: ADD
2104: ST_TO_ADDR
// Dolgov := PrepareUnit ( Dolgov , ( not debug ) , 13a_ ) ;
2105: LD_ADDR_EXP 24
2109: PUSH
2110: LD_STRING Dolgov
2112: PPUSH
2113: LD_EXP 1
2117: NOT
2118: PPUSH
2119: LD_STRING 13a_
2121: PPUSH
2122: CALL 21417 0 3
2126: ST_TO_ADDR
// if Dolgov then
2127: LD_EXP 24
2131: IFFALSE 2149
// tmp := tmp ^ Dolgov ;
2133: LD_ADDR_VAR 0 2
2137: PUSH
2138: LD_VAR 0 2
2142: PUSH
2143: LD_EXP 24
2147: ADD
2148: ST_TO_ADDR
// for i in tmp do
2149: LD_ADDR_VAR 0 3
2153: PUSH
2154: LD_VAR 0 2
2158: PUSH
2159: FOR_IN
2160: IFFALSE 2185
// PlaceUnitXYR ( i , 160 , 78 , 22 , false ) ;
2162: LD_VAR 0 3
2166: PPUSH
2167: LD_INT 160
2169: PPUSH
2170: LD_INT 78
2172: PPUSH
2173: LD_INT 22
2175: PPUSH
2176: LD_INT 0
2178: PPUSH
2179: CALL_OW 50
2183: GO 2159
2185: POP
2186: POP
// squad1 := tmp ;
2187: LD_ADDR_EXP 37
2191: PUSH
2192: LD_VAR 0 2
2196: ST_TO_ADDR
// tmp := [ ] ;
2197: LD_ADDR_VAR 0 2
2201: PUSH
2202: EMPTY
2203: ST_TO_ADDR
// Petrovova := PrepareUnit ( Petrova , ( not debug ) , 13a_ ) ;
2204: LD_ADDR_EXP 30
2208: PUSH
2209: LD_STRING Petrova
2211: PPUSH
2212: LD_EXP 1
2216: NOT
2217: PPUSH
2218: LD_STRING 13a_
2220: PPUSH
2221: CALL 21417 0 3
2225: ST_TO_ADDR
// if Petrovova then
2226: LD_EXP 30
2230: IFFALSE 2248
// tmp := tmp ^ Petrovova ;
2232: LD_ADDR_VAR 0 2
2236: PUSH
2237: LD_VAR 0 2
2241: PUSH
2242: LD_EXP 30
2246: ADD
2247: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , ( not debug ) , 13a_ ) ;
2248: LD_ADDR_EXP 23
2252: PUSH
2253: LD_STRING Titov
2255: PPUSH
2256: LD_EXP 1
2260: NOT
2261: PPUSH
2262: LD_STRING 13a_
2264: PPUSH
2265: CALL 21417 0 3
2269: ST_TO_ADDR
// if Titov then
2270: LD_EXP 23
2274: IFFALSE 2292
// tmp := tmp ^ Titov ;
2276: LD_ADDR_VAR 0 2
2280: PUSH
2281: LD_VAR 0 2
2285: PUSH
2286: LD_EXP 23
2290: ADD
2291: ST_TO_ADDR
// Karamazov := PrepareUnit ( Karamazov , ( not debug ) , 13a_ ) ;
2292: LD_ADDR_EXP 33
2296: PUSH
2297: LD_STRING Karamazov
2299: PPUSH
2300: LD_EXP 1
2304: NOT
2305: PPUSH
2306: LD_STRING 13a_
2308: PPUSH
2309: CALL 21417 0 3
2313: ST_TO_ADDR
// if Karamazov then
2314: LD_EXP 33
2318: IFFALSE 2336
// tmp := tmp ^ Karamazov ;
2320: LD_ADDR_VAR 0 2
2324: PUSH
2325: LD_VAR 0 2
2329: PUSH
2330: LD_EXP 33
2334: ADD
2335: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 13a_ ) ;
2336: LD_ADDR_EXP 16
2340: PUSH
2341: LD_STRING Frank
2343: PPUSH
2344: LD_EXP 1
2348: NOT
2349: PPUSH
2350: LD_STRING 13a_
2352: PPUSH
2353: CALL 21417 0 3
2357: ST_TO_ADDR
// if Frank then
2358: LD_EXP 16
2362: IFFALSE 2380
// tmp := tmp ^ Frank ;
2364: LD_ADDR_VAR 0 2
2368: PUSH
2369: LD_VAR 0 2
2373: PUSH
2374: LD_EXP 16
2378: ADD
2379: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 13a_ ) ;
2380: LD_ADDR_EXP 7
2384: PUSH
2385: LD_STRING Donaldson
2387: PPUSH
2388: LD_EXP 1
2392: NOT
2393: PPUSH
2394: LD_STRING 13a_
2396: PPUSH
2397: CALL 21417 0 3
2401: ST_TO_ADDR
// if Donaldson then
2402: LD_EXP 7
2406: IFFALSE 2424
// tmp := tmp ^ Donaldson ;
2408: LD_ADDR_VAR 0 2
2412: PUSH
2413: LD_VAR 0 2
2417: PUSH
2418: LD_EXP 7
2422: ADD
2423: ST_TO_ADDR
// for i in tmp do
2424: LD_ADDR_VAR 0 3
2428: PUSH
2429: LD_VAR 0 2
2433: PUSH
2434: FOR_IN
2435: IFFALSE 2475
// begin PlaceUnitXYR ( i , 117 , 8 , 6 , false ) ;
2437: LD_VAR 0 3
2441: PPUSH
2442: LD_INT 117
2444: PPUSH
2445: LD_INT 8
2447: PPUSH
2448: LD_INT 6
2450: PPUSH
2451: LD_INT 0
2453: PPUSH
2454: CALL_OW 50
// ComTurnXY ( i , 117 , 8 ) ;
2458: LD_VAR 0 3
2462: PPUSH
2463: LD_INT 117
2465: PPUSH
2466: LD_INT 8
2468: PPUSH
2469: CALL_OW 118
// end ;
2473: GO 2434
2475: POP
2476: POP
// squad2 := tmp ;
2477: LD_ADDR_EXP 38
2481: PUSH
2482: LD_VAR 0 2
2486: ST_TO_ADDR
// uc_side := 0 ;
2487: LD_ADDR_OWVAR 20
2491: PUSH
2492: LD_INT 0
2494: ST_TO_ADDR
// uc_nation := 0 ;
2495: LD_ADDR_OWVAR 21
2499: PUSH
2500: LD_INT 0
2502: ST_TO_ADDR
// InitHc ;
2503: CALL_OW 19
// hc_importance := 0 ;
2507: LD_ADDR_OWVAR 32
2511: PUSH
2512: LD_INT 0
2514: ST_TO_ADDR
// hc_name := Find some goods! ;
2515: LD_ADDR_OWVAR 26
2519: PUSH
2520: LD_STRING Find some goods!
2522: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
2523: LD_INT 0
2525: PPUSH
2526: LD_INT 12
2528: PPUSH
2529: LD_INT 1
2531: PPUSH
2532: CALL_OW 380
// PlaceUnitXY ( CreateHuman , 96 , 108 , false ) ;
2536: CALL_OW 44
2540: PPUSH
2541: LD_INT 96
2543: PPUSH
2544: LD_INT 108
2546: PPUSH
2547: LD_INT 0
2549: PPUSH
2550: CALL_OW 48
// InitHc ;
2554: CALL_OW 19
// end ;
2558: LD_VAR 0 1
2562: RET
// every 3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) do var Louis , veh ;
2563: LD_INT 22
2565: PUSH
2566: LD_INT 7
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: PUSH
2573: LD_INT 23
2575: PUSH
2576: LD_INT 0
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PPUSH
2587: CALL_OW 69
2591: IFFALSE 3056
2593: GO 2595
2595: DISABLE
2596: LD_INT 0
2598: PPUSH
2599: PPUSH
// begin InGameOn ;
2600: CALL_OW 8
// RemoveUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) [ 1 ] ) ;
2604: LD_INT 22
2606: PUSH
2607: LD_INT 7
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: PUSH
2614: LD_INT 23
2616: PUSH
2617: LD_INT 0
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: PPUSH
2628: CALL_OW 69
2632: PUSH
2633: LD_INT 1
2635: ARRAY
2636: PPUSH
2637: CALL_OW 64
// game_speed := 4 ;
2641: LD_ADDR_OWVAR 65
2645: PUSH
2646: LD_INT 4
2648: ST_TO_ADDR
// ComMoveXY ( JMM , 93 , 100 ) ;
2649: LD_EXP 2
2653: PPUSH
2654: LD_INT 93
2656: PPUSH
2657: LD_INT 100
2659: PPUSH
2660: CALL_OW 111
// ComMoveXY ( Burlak , 93 , 99 ) ;
2664: LD_EXP 3
2668: PPUSH
2669: LD_INT 93
2671: PPUSH
2672: LD_INT 99
2674: PPUSH
2675: CALL_OW 111
// AddComTurnXY ( [ JMM , Burlak ] , 81 , 112 ) ;
2679: LD_EXP 2
2683: PUSH
2684: LD_EXP 3
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: PPUSH
2693: LD_INT 81
2695: PPUSH
2696: LD_INT 112
2698: PPUSH
2699: CALL_OW 178
// wait ( 0 0$5 ) ;
2703: LD_INT 175
2705: PPUSH
2706: CALL_OW 67
// music_nat := 2 ;
2710: LD_ADDR_OWVAR 71
2714: PUSH
2715: LD_INT 2
2717: ST_TO_ADDR
// music_class := 4 ;
2718: LD_ADDR_OWVAR 72
2722: PUSH
2723: LD_INT 4
2725: ST_TO_ADDR
// CenterNowOnXY ( 80 , 130 ) ;
2726: LD_INT 80
2728: PPUSH
2729: LD_INT 130
2731: PPUSH
2732: CALL_OW 86
// uc_nation := 2 ;
2736: LD_ADDR_OWVAR 21
2740: PUSH
2741: LD_INT 2
2743: ST_TO_ADDR
// uc_side := 2 ;
2744: LD_ADDR_OWVAR 20
2748: PUSH
2749: LD_INT 2
2751: ST_TO_ADDR
// hc_gallery = sandar ;
2752: LD_ADDR_OWVAR 33
2756: PUSH
2757: LD_STRING sandar
2759: ST_TO_ADDR
// hc_face_number = 1 ;
2760: LD_ADDR_OWVAR 34
2764: PUSH
2765: LD_INT 1
2767: ST_TO_ADDR
// hc_name = Louis Schulz ;
2768: LD_ADDR_OWVAR 26
2772: PUSH
2773: LD_STRING Louis Schulz
2775: ST_TO_ADDR
// hc_attr = [ 13 , 11 ] ;
2776: LD_ADDR_OWVAR 29
2780: PUSH
2781: LD_INT 13
2783: PUSH
2784: LD_INT 11
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: ST_TO_ADDR
// hc_basic_skills = [ 0 , 0 , 0 , 0 ] ;
2791: LD_ADDR_OWVAR 30
2795: PUSH
2796: LD_INT 0
2798: PUSH
2799: LD_INT 0
2801: PUSH
2802: LD_INT 0
2804: PUSH
2805: LD_INT 0
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: LIST
2812: LIST
2813: ST_TO_ADDR
// hc_skills = [ 10 , 6 , 7 , 7 ] ;
2814: LD_ADDR_OWVAR 31
2818: PUSH
2819: LD_INT 10
2821: PUSH
2822: LD_INT 6
2824: PUSH
2825: LD_INT 7
2827: PUSH
2828: LD_INT 7
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: ST_TO_ADDR
// hc_sex = sex_male ;
2837: LD_ADDR_OWVAR 27
2841: PUSH
2842: LD_INT 1
2844: ST_TO_ADDR
// hc_class = 1 ;
2845: LD_ADDR_OWVAR 28
2849: PUSH
2850: LD_INT 1
2852: ST_TO_ADDR
// hc_importance = 100 ;
2853: LD_ADDR_OWVAR 32
2857: PUSH
2858: LD_INT 100
2860: ST_TO_ADDR
// Louis = CreateHuman ;
2861: LD_ADDR_VAR 0 1
2865: PUSH
2866: CALL_OW 44
2870: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_flame_thrower , 100 ) ;
2871: LD_INT 14
2873: PPUSH
2874: LD_INT 3
2876: PPUSH
2877: LD_INT 1
2879: PPUSH
2880: LD_INT 26
2882: PPUSH
2883: LD_INT 100
2885: PPUSH
2886: CALL 26241 0 5
// veh := CreateVehicle ;
2890: LD_ADDR_VAR 0 2
2894: PUSH
2895: CALL_OW 45
2899: ST_TO_ADDR
// SetMark ( veh , - 2 ) ;
2900: LD_VAR 0 2
2904: PPUSH
2905: LD_INT 2
2907: NEG
2908: PPUSH
2909: CALL_OW 242
// PlaceUnitXY ( veh , 80 , 130 , false ) ;
2913: LD_VAR 0 2
2917: PPUSH
2918: LD_INT 80
2920: PPUSH
2921: LD_INT 130
2923: PPUSH
2924: LD_INT 0
2926: PPUSH
2927: CALL_OW 48
// PlaceHumanInUnit ( Louis , veh ) ;
2931: LD_VAR 0 1
2935: PPUSH
2936: LD_VAR 0 2
2940: PPUSH
2941: CALL_OW 52
// ComMoveXY ( Louis , 80 , 109 ) ;
2945: LD_VAR 0 1
2949: PPUSH
2950: LD_INT 80
2952: PPUSH
2953: LD_INT 109
2955: PPUSH
2956: CALL_OW 111
// AddComExitVehicle ( Louis ) ;
2960: LD_VAR 0 1
2964: PPUSH
2965: CALL_OW 181
// AddComMoveXY ( Louis , 80 , 131 ) ;
2969: LD_VAR 0 1
2973: PPUSH
2974: LD_INT 80
2976: PPUSH
2977: LD_INT 131
2979: PPUSH
2980: CALL_OW 171
// wait ( 0 0$06 ) ;
2984: LD_INT 210
2986: PPUSH
2987: CALL_OW 67
// InGameOff ;
2991: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
2995: LD_INT 35
2997: PPUSH
2998: CALL_OW 67
// until IsAt ( Louis , 80 , 131 ) ;
3002: LD_VAR 0 1
3006: PPUSH
3007: LD_INT 80
3009: PPUSH
3010: LD_INT 131
3012: PPUSH
3013: CALL_OW 307
3017: IFFALSE 2995
// SetSide ( veh , 7 ) ;
3019: LD_VAR 0 2
3023: PPUSH
3024: LD_INT 7
3026: PPUSH
3027: CALL_OW 235
// RemoveUnit ( Louis ) ;
3031: LD_VAR 0 1
3035: PPUSH
3036: CALL_OW 64
// music_nat := 3 ;
3040: LD_ADDR_OWVAR 71
3044: PUSH
3045: LD_INT 3
3047: ST_TO_ADDR
// music_class := 0 ;
3048: LD_ADDR_OWVAR 72
3052: PUSH
3053: LD_INT 0
3055: ST_TO_ADDR
// end ;
3056: PPOPN 2
3058: END
// every 0 0$10 trigger squad1 do var i , xy ;
3059: LD_EXP 37
3063: IFFALSE 3426
3065: GO 3067
3067: DISABLE
3068: LD_INT 0
3070: PPUSH
3071: PPUSH
// begin enable ;
3072: ENABLE
// i := squad1 [ rand ( 1 , squad1 ) ] ;
3073: LD_ADDR_VAR 0 1
3077: PUSH
3078: LD_EXP 37
3082: PUSH
3083: LD_INT 1
3085: PPUSH
3086: LD_EXP 37
3090: PPUSH
3091: CALL_OW 12
3095: ARRAY
3096: ST_TO_ADDR
// if IsInUnit ( i ) then
3097: LD_VAR 0 1
3101: PPUSH
3102: CALL_OW 310
3106: IFFALSE 3110
// exit ;
3108: GO 3426
// ComRemember ( i ) ;
3110: LD_VAR 0 1
3114: PPUSH
3115: CALL_OW 143
// xy := [ ShiftX ( GetX ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) , ShiftY ( GetY ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) ] ;
3119: LD_ADDR_VAR 0 2
3123: PUSH
3124: LD_VAR 0 1
3128: PPUSH
3129: CALL_OW 250
3133: PPUSH
3134: LD_INT 0
3136: PPUSH
3137: LD_INT 5
3139: PPUSH
3140: CALL_OW 12
3144: PPUSH
3145: LD_INT 2
3147: PPUSH
3148: LD_INT 7
3150: PPUSH
3151: CALL_OW 12
3155: PPUSH
3156: CALL_OW 272
3160: PUSH
3161: LD_VAR 0 1
3165: PPUSH
3166: CALL_OW 251
3170: PPUSH
3171: LD_INT 0
3173: PPUSH
3174: LD_INT 5
3176: PPUSH
3177: CALL_OW 12
3181: PPUSH
3182: LD_INT 2
3184: PPUSH
3185: LD_INT 7
3187: PPUSH
3188: CALL_OW 12
3192: PPUSH
3193: CALL_OW 273
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) <> 0 or not ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
3202: LD_VAR 0 2
3206: PUSH
3207: LD_INT 1
3209: ARRAY
3210: PPUSH
3211: LD_VAR 0 2
3215: PUSH
3216: LD_INT 2
3218: ARRAY
3219: PPUSH
3220: CALL_OW 428
3224: PUSH
3225: LD_INT 0
3227: NONEQUAL
3228: PUSH
3229: LD_VAR 0 2
3233: PUSH
3234: LD_INT 1
3236: ARRAY
3237: PPUSH
3238: LD_VAR 0 2
3242: PUSH
3243: LD_INT 2
3245: ARRAY
3246: PPUSH
3247: CALL_OW 488
3251: NOT
3252: OR
3253: IFFALSE 3257
// exit ;
3255: GO 3426
// AddComMoveXY ( i , xy [ 1 ] , xy [ 2 ] ) ;
3257: LD_VAR 0 1
3261: PPUSH
3262: LD_VAR 0 2
3266: PUSH
3267: LD_INT 1
3269: ARRAY
3270: PPUSH
3271: LD_VAR 0 2
3275: PUSH
3276: LD_INT 2
3278: ARRAY
3279: PPUSH
3280: CALL_OW 171
// AddComWait ( i , 0 0$10 ) ;
3284: LD_VAR 0 1
3288: PPUSH
3289: LD_INT 350
3291: PPUSH
3292: CALL_OW 202
// if Prob ( 60 ) and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) then
3296: LD_INT 60
3298: PPUSH
3299: CALL_OW 13
3303: PUSH
3304: LD_INT 22
3306: PUSH
3307: LD_INT 4
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PUSH
3314: LD_INT 21
3316: PUSH
3317: LD_INT 3
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PPUSH
3328: CALL_OW 69
3332: AND
3333: IFFALSE 3417
// begin AddComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) , i ) ) ;
3335: LD_VAR 0 1
3339: PPUSH
3340: LD_INT 22
3342: PUSH
3343: LD_INT 4
3345: PUSH
3346: EMPTY
3347: LIST
3348: LIST
3349: PUSH
3350: LD_INT 21
3352: PUSH
3353: LD_INT 3
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: PPUSH
3364: CALL_OW 69
3368: PPUSH
3369: LD_VAR 0 1
3373: PPUSH
3374: CALL_OW 74
3378: PPUSH
3379: CALL_OW 180
// repeat wait ( 0 0$30 ) ;
3383: LD_INT 1050
3385: PPUSH
3386: CALL_OW 67
// until IsInUnit ( i ) ;
3390: LD_VAR 0 1
3394: PPUSH
3395: CALL_OW 310
3399: IFFALSE 3383
// wait ( 0 0$30 ) ;
3401: LD_INT 1050
3403: PPUSH
3404: CALL_OW 67
// AddComExitBuilding ( i ) ;
3408: LD_VAR 0 1
3412: PPUSH
3413: CALL_OW 182
// end ; AddComReturn ( i ) ;
3417: LD_VAR 0 1
3421: PPUSH
3422: CALL_OW 204
// end ; end_of_file
3426: PPOPN 2
3428: END
// export function Action ; begin
3429: LD_INT 0
3431: PPUSH
// InGameOn ;
3432: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
3436: LD_EXP 2
3440: PPUSH
3441: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
3445: LD_EXP 2
3449: PPUSH
3450: LD_STRING D1-JMM-1
3452: PPUSH
3453: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
3457: LD_EXP 3
3461: PPUSH
3462: LD_STRING D1-Bur-1
3464: PPUSH
3465: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
3469: LD_EXP 2
3473: PPUSH
3474: LD_STRING D1-JMM-2
3476: PPUSH
3477: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
3481: LD_EXP 3
3485: PPUSH
3486: LD_STRING D1-Bur-2
3488: PPUSH
3489: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3493: LD_EXP 2
3497: PPUSH
3498: LD_STRING D1-JMM-3
3500: PPUSH
3501: CALL_OW 88
// Say ( Burlak , D1-Bur-3 ) ;
3505: LD_EXP 3
3509: PPUSH
3510: LD_STRING D1-Bur-3
3512: PPUSH
3513: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3517: LD_EXP 2
3521: PPUSH
3522: LD_STRING D1-JMM-4
3524: PPUSH
3525: CALL_OW 88
// Say ( Burlak , D1-Bur-4 ) ;
3529: LD_EXP 3
3533: PPUSH
3534: LD_STRING D1-Bur-4
3536: PPUSH
3537: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3541: LD_EXP 2
3545: PPUSH
3546: LD_STRING D1-JMM-5
3548: PPUSH
3549: CALL_OW 88
// Say ( Burlak , D1-Bur-5 ) ;
3553: LD_EXP 3
3557: PPUSH
3558: LD_STRING D1-Bur-5
3560: PPUSH
3561: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3565: LD_EXP 2
3569: PPUSH
3570: LD_STRING D1-JMM-6
3572: PPUSH
3573: CALL_OW 88
// Say ( Burlak , D1-Bur-6 ) ;
3577: LD_EXP 3
3581: PPUSH
3582: LD_STRING D1-Bur-6
3584: PPUSH
3585: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
3589: LD_EXP 2
3593: PPUSH
3594: LD_STRING D1-JMM-7
3596: PPUSH
3597: CALL_OW 88
// wait ( 20 ) ;
3601: LD_INT 20
3603: PPUSH
3604: CALL_OW 67
// Query ( QTruck ) ;
3608: LD_STRING QTruck
3610: PPUSH
3611: CALL_OW 97
// InGameOff ;
3615: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
3619: LD_STRING MArtPickup
3621: PPUSH
3622: CALL_OW 337
// SetAreaMapShow ( escape_area , 1 ) ;
3626: LD_INT 2
3628: PPUSH
3629: LD_INT 1
3631: PPUSH
3632: CALL_OW 424
// end ;
3636: LD_VAR 0 1
3640: RET
// every 0 0$3 trigger FilterUnitsInArea ( escape_area , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) = 2 and IsInUnit ( JMM ) and IsInUnit ( Burlak ) and ( GetWeapon ( IsInUnit ( JMM ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] or GetWeapon ( IsInUnit ( Burlak ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] ) do var i , macmilanVeh , burlakVeh ;
3641: LD_INT 2
3643: PPUSH
3644: LD_INT 21
3646: PUSH
3647: LD_INT 2
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: PUSH
3654: LD_INT 33
3656: PUSH
3657: LD_INT 1
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: PUSH
3664: LD_INT 3
3666: PUSH
3667: LD_INT 58
3669: PUSH
3670: EMPTY
3671: LIST
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: LIST
3681: PPUSH
3682: CALL_OW 70
3686: PUSH
3687: LD_INT 2
3689: EQUAL
3690: PUSH
3691: LD_EXP 2
3695: PPUSH
3696: CALL_OW 310
3700: AND
3701: PUSH
3702: LD_EXP 3
3706: PPUSH
3707: CALL_OW 310
3711: AND
3712: PUSH
3713: LD_EXP 2
3717: PPUSH
3718: CALL_OW 310
3722: PPUSH
3723: CALL_OW 264
3727: PUSH
3728: LD_INT 51
3730: PUSH
3731: LD_INT 12
3733: PUSH
3734: LD_EXP 40
3738: PUSH
3739: LD_INT 32
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: IN
3748: PUSH
3749: LD_EXP 3
3753: PPUSH
3754: CALL_OW 310
3758: PPUSH
3759: CALL_OW 264
3763: PUSH
3764: LD_INT 51
3766: PUSH
3767: LD_INT 12
3769: PUSH
3770: LD_EXP 40
3774: PUSH
3775: LD_INT 32
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: IN
3784: OR
3785: AND
3786: IFFALSE 3996
3788: GO 3790
3790: DISABLE
3791: LD_INT 0
3793: PPUSH
3794: PPUSH
3795: PPUSH
// begin macmilanVeh := IsInUnit ( JMM ) ;
3796: LD_ADDR_VAR 0 2
3800: PUSH
3801: LD_EXP 2
3805: PPUSH
3806: CALL_OW 310
3810: ST_TO_ADDR
// burlakVeh := IsInUnit ( Burlak ) ;
3811: LD_ADDR_VAR 0 3
3815: PUSH
3816: LD_EXP 3
3820: PPUSH
3821: CALL_OW 310
3825: ST_TO_ADDR
// SaveVariable ( [ GetChassis ( macmilanVeh ) , GetEngine ( macmilanVeh ) , control_manual , GetWeapon ( macmilanVeh ) , GetMark ( macmilanVeh ) , GetNation ( macmilanVeh ) ] , 14a_JMMVeh ) ;
3826: LD_VAR 0 2
3830: PPUSH
3831: CALL_OW 265
3835: PUSH
3836: LD_VAR 0 2
3840: PPUSH
3841: CALL_OW 262
3845: PUSH
3846: LD_INT 1
3848: PUSH
3849: LD_VAR 0 2
3853: PPUSH
3854: CALL_OW 264
3858: PUSH
3859: LD_VAR 0 2
3863: PPUSH
3864: CALL_OW 271
3868: PUSH
3869: LD_VAR 0 2
3873: PPUSH
3874: CALL_OW 248
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: PPUSH
3887: LD_STRING 14a_JMMVeh
3889: PPUSH
3890: CALL_OW 39
// SaveVariable ( [ GetChassis ( burlakVeh ) , GetEngine ( burlakVeh ) , control_manual , GetWeapon ( burlakVeh ) , GetMark ( burlakVeh ) , GetNation ( burlakVeh ) ] , 14a_BurlakVeh ) ;
3894: LD_VAR 0 3
3898: PPUSH
3899: CALL_OW 265
3903: PUSH
3904: LD_VAR 0 3
3908: PPUSH
3909: CALL_OW 262
3913: PUSH
3914: LD_INT 1
3916: PUSH
3917: LD_VAR 0 3
3921: PPUSH
3922: CALL_OW 264
3926: PUSH
3927: LD_VAR 0 3
3931: PPUSH
3932: CALL_OW 271
3936: PUSH
3937: LD_VAR 0 3
3941: PPUSH
3942: CALL_OW 248
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: PPUSH
3955: LD_STRING 14a_BurlakVeh
3957: PPUSH
3958: CALL_OW 39
// SaveCharacters ( JMM , 14a_JMM ) ;
3962: LD_EXP 2
3966: PPUSH
3967: LD_STRING 14a_JMM
3969: PPUSH
3970: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
3974: LD_EXP 3
3978: PPUSH
3979: LD_STRING 14a_Burlak
3981: PPUSH
3982: CALL_OW 38
// ChangeMap ( 1 , %_cont ) ;
3986: LD_INT 1
3988: PPUSH
3989: LD_STRING %_cont
3991: PPUSH
3992: CALL_OW 340
// end ;
3996: PPOPN 3
3998: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 950 ] ] ] ) do
3999: LD_INT 22
4001: PUSH
4002: LD_INT 4
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PUSH
4009: LD_INT 3
4011: PUSH
4012: LD_INT 24
4014: PUSH
4015: LD_INT 950
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PPUSH
4030: CALL_OW 69
4034: IFFALSE 4046
4036: GO 4038
4038: DISABLE
// YouLost ( FriendlyFire ) ;
4039: LD_STRING FriendlyFire
4041: PPUSH
4042: CALL_OW 104
4046: END
// every 0 0$1 trigger IsDead ( Burlak ) do
4047: LD_EXP 3
4051: PPUSH
4052: CALL_OW 301
4056: IFFALSE 4068
4058: GO 4060
4060: DISABLE
// YouLost ( Burlak ) ;
4061: LD_STRING Burlak
4063: PPUSH
4064: CALL_OW 104
4068: END
// every 0 0$1 trigger IsDead ( JMM ) do
4069: LD_EXP 2
4073: PPUSH
4074: CALL_OW 301
4078: IFFALSE 4090
4080: GO 4082
4082: DISABLE
// YouLost ( JMM ) ; end_of_file
4083: LD_STRING JMM
4085: PPUSH
4086: CALL_OW 104
4090: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
4091: LD_INT 0
4093: PPUSH
// ar_miner := 81 ;
4094: LD_ADDR_EXP 46
4098: PUSH
4099: LD_INT 81
4101: ST_TO_ADDR
// ar_crane := 88 ;
4102: LD_ADDR_EXP 45
4106: PUSH
4107: LD_INT 88
4109: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4110: LD_ADDR_EXP 40
4114: PUSH
4115: LD_INT 89
4117: ST_TO_ADDR
// us_hack := 99 ;
4118: LD_ADDR_EXP 41
4122: PUSH
4123: LD_INT 99
4125: ST_TO_ADDR
// us_artillery := 97 ;
4126: LD_ADDR_EXP 42
4130: PUSH
4131: LD_INT 97
4133: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4134: LD_ADDR_EXP 43
4138: PUSH
4139: LD_INT 91
4141: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
4142: LD_ADDR_EXP 44
4146: PUSH
4147: LD_INT 92
4149: ST_TO_ADDR
// ru_radar := 98 ;
4150: LD_ADDR_EXP 39
4154: PUSH
4155: LD_INT 98
4157: ST_TO_ADDR
// tech_Artillery := 80 ;
4158: LD_ADDR_EXP 47
4162: PUSH
4163: LD_INT 80
4165: ST_TO_ADDR
// tech_RadMat := 81 ;
4166: LD_ADDR_EXP 48
4170: PUSH
4171: LD_INT 81
4173: ST_TO_ADDR
// tech_BasicTools := 82 ;
4174: LD_ADDR_EXP 49
4178: PUSH
4179: LD_INT 82
4181: ST_TO_ADDR
// tech_Cargo := 83 ;
4182: LD_ADDR_EXP 50
4186: PUSH
4187: LD_INT 83
4189: ST_TO_ADDR
// tech_Track := 84 ;
4190: LD_ADDR_EXP 51
4194: PUSH
4195: LD_INT 84
4197: ST_TO_ADDR
// tech_Crane := 85 ;
4198: LD_ADDR_EXP 52
4202: PUSH
4203: LD_INT 85
4205: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4206: LD_ADDR_EXP 53
4210: PUSH
4211: LD_INT 86
4213: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4214: LD_ADDR_EXP 54
4218: PUSH
4219: LD_INT 87
4221: ST_TO_ADDR
// end ;
4222: LD_VAR 0 1
4226: RET
// every 1 do
4227: GO 4229
4229: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
4230: CALL 4091 0 0
4234: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
4235: LD_VAR 0 2
4239: PUSH
4240: LD_INT 100
4242: EQUAL
4243: IFFALSE 5192
// begin if not StreamModeActive then
4245: LD_EXP 55
4249: NOT
4250: IFFALSE 4260
// StreamModeActive := true ;
4252: LD_ADDR_EXP 55
4256: PUSH
4257: LD_INT 1
4259: ST_TO_ADDR
// if p3 = 0 then
4260: LD_VAR 0 3
4264: PUSH
4265: LD_INT 0
4267: EQUAL
4268: IFFALSE 4274
// InitStreamMode ;
4270: CALL 5350 0 0
// if p3 = 1 then
4274: LD_VAR 0 3
4278: PUSH
4279: LD_INT 1
4281: EQUAL
4282: IFFALSE 4292
// sRocket := true ;
4284: LD_ADDR_EXP 60
4288: PUSH
4289: LD_INT 1
4291: ST_TO_ADDR
// if p3 = 2 then
4292: LD_VAR 0 3
4296: PUSH
4297: LD_INT 2
4299: EQUAL
4300: IFFALSE 4310
// sSpeed := true ;
4302: LD_ADDR_EXP 59
4306: PUSH
4307: LD_INT 1
4309: ST_TO_ADDR
// if p3 = 3 then
4310: LD_VAR 0 3
4314: PUSH
4315: LD_INT 3
4317: EQUAL
4318: IFFALSE 4328
// sEngine := true ;
4320: LD_ADDR_EXP 61
4324: PUSH
4325: LD_INT 1
4327: ST_TO_ADDR
// if p3 = 4 then
4328: LD_VAR 0 3
4332: PUSH
4333: LD_INT 4
4335: EQUAL
4336: IFFALSE 4346
// sSpec := true ;
4338: LD_ADDR_EXP 58
4342: PUSH
4343: LD_INT 1
4345: ST_TO_ADDR
// if p3 = 5 then
4346: LD_VAR 0 3
4350: PUSH
4351: LD_INT 5
4353: EQUAL
4354: IFFALSE 4364
// sLevel := true ;
4356: LD_ADDR_EXP 62
4360: PUSH
4361: LD_INT 1
4363: ST_TO_ADDR
// if p3 = 6 then
4364: LD_VAR 0 3
4368: PUSH
4369: LD_INT 6
4371: EQUAL
4372: IFFALSE 4382
// sArmoury := true ;
4374: LD_ADDR_EXP 63
4378: PUSH
4379: LD_INT 1
4381: ST_TO_ADDR
// if p3 = 7 then
4382: LD_VAR 0 3
4386: PUSH
4387: LD_INT 7
4389: EQUAL
4390: IFFALSE 4400
// sRadar := true ;
4392: LD_ADDR_EXP 64
4396: PUSH
4397: LD_INT 1
4399: ST_TO_ADDR
// if p3 = 8 then
4400: LD_VAR 0 3
4404: PUSH
4405: LD_INT 8
4407: EQUAL
4408: IFFALSE 4418
// sBunker := true ;
4410: LD_ADDR_EXP 65
4414: PUSH
4415: LD_INT 1
4417: ST_TO_ADDR
// if p3 = 9 then
4418: LD_VAR 0 3
4422: PUSH
4423: LD_INT 9
4425: EQUAL
4426: IFFALSE 4436
// sHack := true ;
4428: LD_ADDR_EXP 66
4432: PUSH
4433: LD_INT 1
4435: ST_TO_ADDR
// if p3 = 10 then
4436: LD_VAR 0 3
4440: PUSH
4441: LD_INT 10
4443: EQUAL
4444: IFFALSE 4454
// sFire := true ;
4446: LD_ADDR_EXP 67
4450: PUSH
4451: LD_INT 1
4453: ST_TO_ADDR
// if p3 = 11 then
4454: LD_VAR 0 3
4458: PUSH
4459: LD_INT 11
4461: EQUAL
4462: IFFALSE 4472
// sRefresh := true ;
4464: LD_ADDR_EXP 68
4468: PUSH
4469: LD_INT 1
4471: ST_TO_ADDR
// if p3 = 12 then
4472: LD_VAR 0 3
4476: PUSH
4477: LD_INT 12
4479: EQUAL
4480: IFFALSE 4490
// sExp := true ;
4482: LD_ADDR_EXP 69
4486: PUSH
4487: LD_INT 1
4489: ST_TO_ADDR
// if p3 = 13 then
4490: LD_VAR 0 3
4494: PUSH
4495: LD_INT 13
4497: EQUAL
4498: IFFALSE 4508
// sDepot := true ;
4500: LD_ADDR_EXP 70
4504: PUSH
4505: LD_INT 1
4507: ST_TO_ADDR
// if p3 = 14 then
4508: LD_VAR 0 3
4512: PUSH
4513: LD_INT 14
4515: EQUAL
4516: IFFALSE 4526
// sFlag := true ;
4518: LD_ADDR_EXP 71
4522: PUSH
4523: LD_INT 1
4525: ST_TO_ADDR
// if p3 = 15 then
4526: LD_VAR 0 3
4530: PUSH
4531: LD_INT 15
4533: EQUAL
4534: IFFALSE 4544
// sKamikadze := true ;
4536: LD_ADDR_EXP 79
4540: PUSH
4541: LD_INT 1
4543: ST_TO_ADDR
// if p3 = 16 then
4544: LD_VAR 0 3
4548: PUSH
4549: LD_INT 16
4551: EQUAL
4552: IFFALSE 4562
// sTroll := true ;
4554: LD_ADDR_EXP 80
4558: PUSH
4559: LD_INT 1
4561: ST_TO_ADDR
// if p3 = 17 then
4562: LD_VAR 0 3
4566: PUSH
4567: LD_INT 17
4569: EQUAL
4570: IFFALSE 4580
// sSlow := true ;
4572: LD_ADDR_EXP 81
4576: PUSH
4577: LD_INT 1
4579: ST_TO_ADDR
// if p3 = 18 then
4580: LD_VAR 0 3
4584: PUSH
4585: LD_INT 18
4587: EQUAL
4588: IFFALSE 4598
// sLack := true ;
4590: LD_ADDR_EXP 82
4594: PUSH
4595: LD_INT 1
4597: ST_TO_ADDR
// if p3 = 19 then
4598: LD_VAR 0 3
4602: PUSH
4603: LD_INT 19
4605: EQUAL
4606: IFFALSE 4616
// sTank := true ;
4608: LD_ADDR_EXP 84
4612: PUSH
4613: LD_INT 1
4615: ST_TO_ADDR
// if p3 = 20 then
4616: LD_VAR 0 3
4620: PUSH
4621: LD_INT 20
4623: EQUAL
4624: IFFALSE 4634
// sRemote := true ;
4626: LD_ADDR_EXP 85
4630: PUSH
4631: LD_INT 1
4633: ST_TO_ADDR
// if p3 = 21 then
4634: LD_VAR 0 3
4638: PUSH
4639: LD_INT 21
4641: EQUAL
4642: IFFALSE 4652
// sPowell := true ;
4644: LD_ADDR_EXP 86
4648: PUSH
4649: LD_INT 1
4651: ST_TO_ADDR
// if p3 = 22 then
4652: LD_VAR 0 3
4656: PUSH
4657: LD_INT 22
4659: EQUAL
4660: IFFALSE 4670
// sTeleport := true ;
4662: LD_ADDR_EXP 89
4666: PUSH
4667: LD_INT 1
4669: ST_TO_ADDR
// if p3 = 23 then
4670: LD_VAR 0 3
4674: PUSH
4675: LD_INT 23
4677: EQUAL
4678: IFFALSE 4688
// sOilTower := true ;
4680: LD_ADDR_EXP 91
4684: PUSH
4685: LD_INT 1
4687: ST_TO_ADDR
// if p3 = 24 then
4688: LD_VAR 0 3
4692: PUSH
4693: LD_INT 24
4695: EQUAL
4696: IFFALSE 4706
// sShovel := true ;
4698: LD_ADDR_EXP 92
4702: PUSH
4703: LD_INT 1
4705: ST_TO_ADDR
// if p3 = 25 then
4706: LD_VAR 0 3
4710: PUSH
4711: LD_INT 25
4713: EQUAL
4714: IFFALSE 4724
// sSheik := true ;
4716: LD_ADDR_EXP 93
4720: PUSH
4721: LD_INT 1
4723: ST_TO_ADDR
// if p3 = 26 then
4724: LD_VAR 0 3
4728: PUSH
4729: LD_INT 26
4731: EQUAL
4732: IFFALSE 4742
// sEarthquake := true ;
4734: LD_ADDR_EXP 95
4738: PUSH
4739: LD_INT 1
4741: ST_TO_ADDR
// if p3 = 27 then
4742: LD_VAR 0 3
4746: PUSH
4747: LD_INT 27
4749: EQUAL
4750: IFFALSE 4760
// sAI := true ;
4752: LD_ADDR_EXP 96
4756: PUSH
4757: LD_INT 1
4759: ST_TO_ADDR
// if p3 = 28 then
4760: LD_VAR 0 3
4764: PUSH
4765: LD_INT 28
4767: EQUAL
4768: IFFALSE 4778
// sCargo := true ;
4770: LD_ADDR_EXP 99
4774: PUSH
4775: LD_INT 1
4777: ST_TO_ADDR
// if p3 = 29 then
4778: LD_VAR 0 3
4782: PUSH
4783: LD_INT 29
4785: EQUAL
4786: IFFALSE 4796
// sDLaser := true ;
4788: LD_ADDR_EXP 100
4792: PUSH
4793: LD_INT 1
4795: ST_TO_ADDR
// if p3 = 30 then
4796: LD_VAR 0 3
4800: PUSH
4801: LD_INT 30
4803: EQUAL
4804: IFFALSE 4814
// sExchange := true ;
4806: LD_ADDR_EXP 101
4810: PUSH
4811: LD_INT 1
4813: ST_TO_ADDR
// if p3 = 31 then
4814: LD_VAR 0 3
4818: PUSH
4819: LD_INT 31
4821: EQUAL
4822: IFFALSE 4832
// sFac := true ;
4824: LD_ADDR_EXP 102
4828: PUSH
4829: LD_INT 1
4831: ST_TO_ADDR
// if p3 = 32 then
4832: LD_VAR 0 3
4836: PUSH
4837: LD_INT 32
4839: EQUAL
4840: IFFALSE 4850
// sPower := true ;
4842: LD_ADDR_EXP 103
4846: PUSH
4847: LD_INT 1
4849: ST_TO_ADDR
// if p3 = 33 then
4850: LD_VAR 0 3
4854: PUSH
4855: LD_INT 33
4857: EQUAL
4858: IFFALSE 4868
// sRandom := true ;
4860: LD_ADDR_EXP 104
4864: PUSH
4865: LD_INT 1
4867: ST_TO_ADDR
// if p3 = 34 then
4868: LD_VAR 0 3
4872: PUSH
4873: LD_INT 34
4875: EQUAL
4876: IFFALSE 4886
// sShield := true ;
4878: LD_ADDR_EXP 105
4882: PUSH
4883: LD_INT 1
4885: ST_TO_ADDR
// if p3 = 35 then
4886: LD_VAR 0 3
4890: PUSH
4891: LD_INT 35
4893: EQUAL
4894: IFFALSE 4904
// sTime := true ;
4896: LD_ADDR_EXP 106
4900: PUSH
4901: LD_INT 1
4903: ST_TO_ADDR
// if p3 = 36 then
4904: LD_VAR 0 3
4908: PUSH
4909: LD_INT 36
4911: EQUAL
4912: IFFALSE 4922
// sTools := true ;
4914: LD_ADDR_EXP 107
4918: PUSH
4919: LD_INT 1
4921: ST_TO_ADDR
// if p3 = 101 then
4922: LD_VAR 0 3
4926: PUSH
4927: LD_INT 101
4929: EQUAL
4930: IFFALSE 4940
// sSold := true ;
4932: LD_ADDR_EXP 72
4936: PUSH
4937: LD_INT 1
4939: ST_TO_ADDR
// if p3 = 102 then
4940: LD_VAR 0 3
4944: PUSH
4945: LD_INT 102
4947: EQUAL
4948: IFFALSE 4958
// sDiff := true ;
4950: LD_ADDR_EXP 73
4954: PUSH
4955: LD_INT 1
4957: ST_TO_ADDR
// if p3 = 103 then
4958: LD_VAR 0 3
4962: PUSH
4963: LD_INT 103
4965: EQUAL
4966: IFFALSE 4976
// sFog := true ;
4968: LD_ADDR_EXP 76
4972: PUSH
4973: LD_INT 1
4975: ST_TO_ADDR
// if p3 = 104 then
4976: LD_VAR 0 3
4980: PUSH
4981: LD_INT 104
4983: EQUAL
4984: IFFALSE 4994
// sReset := true ;
4986: LD_ADDR_EXP 77
4990: PUSH
4991: LD_INT 1
4993: ST_TO_ADDR
// if p3 = 105 then
4994: LD_VAR 0 3
4998: PUSH
4999: LD_INT 105
5001: EQUAL
5002: IFFALSE 5012
// sSun := true ;
5004: LD_ADDR_EXP 78
5008: PUSH
5009: LD_INT 1
5011: ST_TO_ADDR
// if p3 = 106 then
5012: LD_VAR 0 3
5016: PUSH
5017: LD_INT 106
5019: EQUAL
5020: IFFALSE 5030
// sTiger := true ;
5022: LD_ADDR_EXP 74
5026: PUSH
5027: LD_INT 1
5029: ST_TO_ADDR
// if p3 = 107 then
5030: LD_VAR 0 3
5034: PUSH
5035: LD_INT 107
5037: EQUAL
5038: IFFALSE 5048
// sBomb := true ;
5040: LD_ADDR_EXP 75
5044: PUSH
5045: LD_INT 1
5047: ST_TO_ADDR
// if p3 = 108 then
5048: LD_VAR 0 3
5052: PUSH
5053: LD_INT 108
5055: EQUAL
5056: IFFALSE 5066
// sWound := true ;
5058: LD_ADDR_EXP 83
5062: PUSH
5063: LD_INT 1
5065: ST_TO_ADDR
// if p3 = 109 then
5066: LD_VAR 0 3
5070: PUSH
5071: LD_INT 109
5073: EQUAL
5074: IFFALSE 5084
// sBetray := true ;
5076: LD_ADDR_EXP 87
5080: PUSH
5081: LD_INT 1
5083: ST_TO_ADDR
// if p3 = 110 then
5084: LD_VAR 0 3
5088: PUSH
5089: LD_INT 110
5091: EQUAL
5092: IFFALSE 5102
// sContamin := true ;
5094: LD_ADDR_EXP 88
5098: PUSH
5099: LD_INT 1
5101: ST_TO_ADDR
// if p3 = 111 then
5102: LD_VAR 0 3
5106: PUSH
5107: LD_INT 111
5109: EQUAL
5110: IFFALSE 5120
// sOil := true ;
5112: LD_ADDR_EXP 90
5116: PUSH
5117: LD_INT 1
5119: ST_TO_ADDR
// if p3 = 112 then
5120: LD_VAR 0 3
5124: PUSH
5125: LD_INT 112
5127: EQUAL
5128: IFFALSE 5138
// sStu := true ;
5130: LD_ADDR_EXP 94
5134: PUSH
5135: LD_INT 1
5137: ST_TO_ADDR
// if p3 = 113 then
5138: LD_VAR 0 3
5142: PUSH
5143: LD_INT 113
5145: EQUAL
5146: IFFALSE 5156
// sBazooka := true ;
5148: LD_ADDR_EXP 97
5152: PUSH
5153: LD_INT 1
5155: ST_TO_ADDR
// if p3 = 114 then
5156: LD_VAR 0 3
5160: PUSH
5161: LD_INT 114
5163: EQUAL
5164: IFFALSE 5174
// sMortar := true ;
5166: LD_ADDR_EXP 98
5170: PUSH
5171: LD_INT 1
5173: ST_TO_ADDR
// if p3 = 115 then
5174: LD_VAR 0 3
5178: PUSH
5179: LD_INT 115
5181: EQUAL
5182: IFFALSE 5192
// sRanger := true ;
5184: LD_ADDR_EXP 108
5188: PUSH
5189: LD_INT 1
5191: ST_TO_ADDR
// end ; if p2 = 101 then
5192: LD_VAR 0 2
5196: PUSH
5197: LD_INT 101
5199: EQUAL
5200: IFFALSE 5328
// begin case p3 of 1 :
5202: LD_VAR 0 3
5206: PUSH
5207: LD_INT 1
5209: DOUBLE
5210: EQUAL
5211: IFTRUE 5215
5213: GO 5222
5215: POP
// hHackUnlimitedResources ; 2 :
5216: CALL 16363 0 0
5220: GO 5328
5222: LD_INT 2
5224: DOUBLE
5225: EQUAL
5226: IFTRUE 5230
5228: GO 5237
5230: POP
// hHackSetLevel10 ; 3 :
5231: CALL 16496 0 0
5235: GO 5328
5237: LD_INT 3
5239: DOUBLE
5240: EQUAL
5241: IFTRUE 5245
5243: GO 5252
5245: POP
// hHackSetLevel10YourUnits ; 4 :
5246: CALL 16581 0 0
5250: GO 5328
5252: LD_INT 4
5254: DOUBLE
5255: EQUAL
5256: IFTRUE 5260
5258: GO 5267
5260: POP
// hHackInvincible ; 5 :
5261: CALL 17029 0 0
5265: GO 5328
5267: LD_INT 5
5269: DOUBLE
5270: EQUAL
5271: IFTRUE 5275
5273: GO 5282
5275: POP
// hHackInvisible ; 6 :
5276: CALL 17140 0 0
5280: GO 5328
5282: LD_INT 6
5284: DOUBLE
5285: EQUAL
5286: IFTRUE 5290
5288: GO 5297
5290: POP
// hHackChangeYourSide ; 7 :
5291: CALL 17197 0 0
5295: GO 5328
5297: LD_INT 7
5299: DOUBLE
5300: EQUAL
5301: IFTRUE 5305
5303: GO 5312
5305: POP
// hHackChangeUnitSide ; 8 :
5306: CALL 17239 0 0
5310: GO 5328
5312: LD_INT 8
5314: DOUBLE
5315: EQUAL
5316: IFTRUE 5320
5318: GO 5327
5320: POP
// hHackFog ; end ;
5321: CALL 17340 0 0
5325: GO 5328
5327: POP
// end ; end ;
5328: PPOPN 6
5330: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
5331: GO 5333
5333: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5334: LD_STRING initStreamRollete();
5336: PPUSH
5337: CALL_OW 559
// InitStreamMode ;
5341: CALL 5350 0 0
// DefineStreamItems ( ) ;
5345: CALL 5790 0 0
// end ;
5349: END
// function InitStreamMode ; begin
5350: LD_INT 0
5352: PPUSH
// streamModeActive := false ;
5353: LD_ADDR_EXP 55
5357: PUSH
5358: LD_INT 0
5360: ST_TO_ADDR
// normalCounter := 36 ;
5361: LD_ADDR_EXP 56
5365: PUSH
5366: LD_INT 36
5368: ST_TO_ADDR
// hardcoreCounter := 16 ;
5369: LD_ADDR_EXP 57
5373: PUSH
5374: LD_INT 16
5376: ST_TO_ADDR
// sRocket := false ;
5377: LD_ADDR_EXP 60
5381: PUSH
5382: LD_INT 0
5384: ST_TO_ADDR
// sSpeed := false ;
5385: LD_ADDR_EXP 59
5389: PUSH
5390: LD_INT 0
5392: ST_TO_ADDR
// sEngine := false ;
5393: LD_ADDR_EXP 61
5397: PUSH
5398: LD_INT 0
5400: ST_TO_ADDR
// sSpec := false ;
5401: LD_ADDR_EXP 58
5405: PUSH
5406: LD_INT 0
5408: ST_TO_ADDR
// sLevel := false ;
5409: LD_ADDR_EXP 62
5413: PUSH
5414: LD_INT 0
5416: ST_TO_ADDR
// sArmoury := false ;
5417: LD_ADDR_EXP 63
5421: PUSH
5422: LD_INT 0
5424: ST_TO_ADDR
// sRadar := false ;
5425: LD_ADDR_EXP 64
5429: PUSH
5430: LD_INT 0
5432: ST_TO_ADDR
// sBunker := false ;
5433: LD_ADDR_EXP 65
5437: PUSH
5438: LD_INT 0
5440: ST_TO_ADDR
// sHack := false ;
5441: LD_ADDR_EXP 66
5445: PUSH
5446: LD_INT 0
5448: ST_TO_ADDR
// sFire := false ;
5449: LD_ADDR_EXP 67
5453: PUSH
5454: LD_INT 0
5456: ST_TO_ADDR
// sRefresh := false ;
5457: LD_ADDR_EXP 68
5461: PUSH
5462: LD_INT 0
5464: ST_TO_ADDR
// sExp := false ;
5465: LD_ADDR_EXP 69
5469: PUSH
5470: LD_INT 0
5472: ST_TO_ADDR
// sDepot := false ;
5473: LD_ADDR_EXP 70
5477: PUSH
5478: LD_INT 0
5480: ST_TO_ADDR
// sFlag := false ;
5481: LD_ADDR_EXP 71
5485: PUSH
5486: LD_INT 0
5488: ST_TO_ADDR
// sKamikadze := false ;
5489: LD_ADDR_EXP 79
5493: PUSH
5494: LD_INT 0
5496: ST_TO_ADDR
// sTroll := false ;
5497: LD_ADDR_EXP 80
5501: PUSH
5502: LD_INT 0
5504: ST_TO_ADDR
// sSlow := false ;
5505: LD_ADDR_EXP 81
5509: PUSH
5510: LD_INT 0
5512: ST_TO_ADDR
// sLack := false ;
5513: LD_ADDR_EXP 82
5517: PUSH
5518: LD_INT 0
5520: ST_TO_ADDR
// sTank := false ;
5521: LD_ADDR_EXP 84
5525: PUSH
5526: LD_INT 0
5528: ST_TO_ADDR
// sRemote := false ;
5529: LD_ADDR_EXP 85
5533: PUSH
5534: LD_INT 0
5536: ST_TO_ADDR
// sPowell := false ;
5537: LD_ADDR_EXP 86
5541: PUSH
5542: LD_INT 0
5544: ST_TO_ADDR
// sTeleport := false ;
5545: LD_ADDR_EXP 89
5549: PUSH
5550: LD_INT 0
5552: ST_TO_ADDR
// sOilTower := false ;
5553: LD_ADDR_EXP 91
5557: PUSH
5558: LD_INT 0
5560: ST_TO_ADDR
// sShovel := false ;
5561: LD_ADDR_EXP 92
5565: PUSH
5566: LD_INT 0
5568: ST_TO_ADDR
// sSheik := false ;
5569: LD_ADDR_EXP 93
5573: PUSH
5574: LD_INT 0
5576: ST_TO_ADDR
// sEarthquake := false ;
5577: LD_ADDR_EXP 95
5581: PUSH
5582: LD_INT 0
5584: ST_TO_ADDR
// sAI := false ;
5585: LD_ADDR_EXP 96
5589: PUSH
5590: LD_INT 0
5592: ST_TO_ADDR
// sCargo := false ;
5593: LD_ADDR_EXP 99
5597: PUSH
5598: LD_INT 0
5600: ST_TO_ADDR
// sDLaser := false ;
5601: LD_ADDR_EXP 100
5605: PUSH
5606: LD_INT 0
5608: ST_TO_ADDR
// sExchange := false ;
5609: LD_ADDR_EXP 101
5613: PUSH
5614: LD_INT 0
5616: ST_TO_ADDR
// sFac := false ;
5617: LD_ADDR_EXP 102
5621: PUSH
5622: LD_INT 0
5624: ST_TO_ADDR
// sPower := false ;
5625: LD_ADDR_EXP 103
5629: PUSH
5630: LD_INT 0
5632: ST_TO_ADDR
// sRandom := false ;
5633: LD_ADDR_EXP 104
5637: PUSH
5638: LD_INT 0
5640: ST_TO_ADDR
// sShield := false ;
5641: LD_ADDR_EXP 105
5645: PUSH
5646: LD_INT 0
5648: ST_TO_ADDR
// sTime := false ;
5649: LD_ADDR_EXP 106
5653: PUSH
5654: LD_INT 0
5656: ST_TO_ADDR
// sTools := false ;
5657: LD_ADDR_EXP 107
5661: PUSH
5662: LD_INT 0
5664: ST_TO_ADDR
// sSold := false ;
5665: LD_ADDR_EXP 72
5669: PUSH
5670: LD_INT 0
5672: ST_TO_ADDR
// sDiff := false ;
5673: LD_ADDR_EXP 73
5677: PUSH
5678: LD_INT 0
5680: ST_TO_ADDR
// sFog := false ;
5681: LD_ADDR_EXP 76
5685: PUSH
5686: LD_INT 0
5688: ST_TO_ADDR
// sReset := false ;
5689: LD_ADDR_EXP 77
5693: PUSH
5694: LD_INT 0
5696: ST_TO_ADDR
// sSun := false ;
5697: LD_ADDR_EXP 78
5701: PUSH
5702: LD_INT 0
5704: ST_TO_ADDR
// sTiger := false ;
5705: LD_ADDR_EXP 74
5709: PUSH
5710: LD_INT 0
5712: ST_TO_ADDR
// sBomb := false ;
5713: LD_ADDR_EXP 75
5717: PUSH
5718: LD_INT 0
5720: ST_TO_ADDR
// sWound := false ;
5721: LD_ADDR_EXP 83
5725: PUSH
5726: LD_INT 0
5728: ST_TO_ADDR
// sBetray := false ;
5729: LD_ADDR_EXP 87
5733: PUSH
5734: LD_INT 0
5736: ST_TO_ADDR
// sContamin := false ;
5737: LD_ADDR_EXP 88
5741: PUSH
5742: LD_INT 0
5744: ST_TO_ADDR
// sOil := false ;
5745: LD_ADDR_EXP 90
5749: PUSH
5750: LD_INT 0
5752: ST_TO_ADDR
// sStu := false ;
5753: LD_ADDR_EXP 94
5757: PUSH
5758: LD_INT 0
5760: ST_TO_ADDR
// sBazooka := false ;
5761: LD_ADDR_EXP 97
5765: PUSH
5766: LD_INT 0
5768: ST_TO_ADDR
// sMortar := false ;
5769: LD_ADDR_EXP 98
5773: PUSH
5774: LD_INT 0
5776: ST_TO_ADDR
// sRanger := false ;
5777: LD_ADDR_EXP 108
5781: PUSH
5782: LD_INT 0
5784: ST_TO_ADDR
// end ;
5785: LD_VAR 0 1
5789: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5790: LD_INT 0
5792: PPUSH
5793: PPUSH
5794: PPUSH
5795: PPUSH
5796: PPUSH
// result := [ ] ;
5797: LD_ADDR_VAR 0 1
5801: PUSH
5802: EMPTY
5803: ST_TO_ADDR
// if campaign_id = 1 then
5804: LD_OWVAR 69
5808: PUSH
5809: LD_INT 1
5811: EQUAL
5812: IFFALSE 8750
// begin case mission_number of 1 :
5814: LD_OWVAR 70
5818: PUSH
5819: LD_INT 1
5821: DOUBLE
5822: EQUAL
5823: IFTRUE 5827
5825: GO 5891
5827: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
5828: LD_ADDR_VAR 0 1
5832: PUSH
5833: LD_INT 2
5835: PUSH
5836: LD_INT 4
5838: PUSH
5839: LD_INT 11
5841: PUSH
5842: LD_INT 12
5844: PUSH
5845: LD_INT 15
5847: PUSH
5848: LD_INT 16
5850: PUSH
5851: LD_INT 22
5853: PUSH
5854: LD_INT 23
5856: PUSH
5857: LD_INT 26
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: PUSH
5871: LD_INT 101
5873: PUSH
5874: LD_INT 102
5876: PUSH
5877: LD_INT 106
5879: PUSH
5880: EMPTY
5881: LIST
5882: LIST
5883: LIST
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: ST_TO_ADDR
5889: GO 8748
5891: LD_INT 2
5893: DOUBLE
5894: EQUAL
5895: IFTRUE 5899
5897: GO 5971
5899: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
5900: LD_ADDR_VAR 0 1
5904: PUSH
5905: LD_INT 2
5907: PUSH
5908: LD_INT 4
5910: PUSH
5911: LD_INT 11
5913: PUSH
5914: LD_INT 12
5916: PUSH
5917: LD_INT 15
5919: PUSH
5920: LD_INT 16
5922: PUSH
5923: LD_INT 22
5925: PUSH
5926: LD_INT 23
5928: PUSH
5929: LD_INT 26
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: PUSH
5943: LD_INT 101
5945: PUSH
5946: LD_INT 102
5948: PUSH
5949: LD_INT 105
5951: PUSH
5952: LD_INT 106
5954: PUSH
5955: LD_INT 108
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: LIST
5962: LIST
5963: LIST
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: ST_TO_ADDR
5969: GO 8748
5971: LD_INT 3
5973: DOUBLE
5974: EQUAL
5975: IFTRUE 5979
5977: GO 6055
5979: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
5980: LD_ADDR_VAR 0 1
5984: PUSH
5985: LD_INT 2
5987: PUSH
5988: LD_INT 4
5990: PUSH
5991: LD_INT 5
5993: PUSH
5994: LD_INT 11
5996: PUSH
5997: LD_INT 12
5999: PUSH
6000: LD_INT 15
6002: PUSH
6003: LD_INT 16
6005: PUSH
6006: LD_INT 22
6008: PUSH
6009: LD_INT 26
6011: PUSH
6012: LD_INT 36
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: PUSH
6027: LD_INT 101
6029: PUSH
6030: LD_INT 102
6032: PUSH
6033: LD_INT 105
6035: PUSH
6036: LD_INT 106
6038: PUSH
6039: LD_INT 108
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: ST_TO_ADDR
6053: GO 8748
6055: LD_INT 4
6057: DOUBLE
6058: EQUAL
6059: IFTRUE 6063
6061: GO 6147
6063: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
6064: LD_ADDR_VAR 0 1
6068: PUSH
6069: LD_INT 2
6071: PUSH
6072: LD_INT 4
6074: PUSH
6075: LD_INT 5
6077: PUSH
6078: LD_INT 8
6080: PUSH
6081: LD_INT 11
6083: PUSH
6084: LD_INT 12
6086: PUSH
6087: LD_INT 15
6089: PUSH
6090: LD_INT 16
6092: PUSH
6093: LD_INT 22
6095: PUSH
6096: LD_INT 23
6098: PUSH
6099: LD_INT 26
6101: PUSH
6102: LD_INT 36
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: PUSH
6119: LD_INT 101
6121: PUSH
6122: LD_INT 102
6124: PUSH
6125: LD_INT 105
6127: PUSH
6128: LD_INT 106
6130: PUSH
6131: LD_INT 108
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: ST_TO_ADDR
6145: GO 8748
6147: LD_INT 5
6149: DOUBLE
6150: EQUAL
6151: IFTRUE 6155
6153: GO 6255
6155: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
6156: LD_ADDR_VAR 0 1
6160: PUSH
6161: LD_INT 2
6163: PUSH
6164: LD_INT 4
6166: PUSH
6167: LD_INT 5
6169: PUSH
6170: LD_INT 6
6172: PUSH
6173: LD_INT 8
6175: PUSH
6176: LD_INT 11
6178: PUSH
6179: LD_INT 12
6181: PUSH
6182: LD_INT 15
6184: PUSH
6185: LD_INT 16
6187: PUSH
6188: LD_INT 22
6190: PUSH
6191: LD_INT 23
6193: PUSH
6194: LD_INT 25
6196: PUSH
6197: LD_INT 26
6199: PUSH
6200: LD_INT 36
6202: PUSH
6203: EMPTY
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: LIST
6218: PUSH
6219: LD_INT 101
6221: PUSH
6222: LD_INT 102
6224: PUSH
6225: LD_INT 105
6227: PUSH
6228: LD_INT 106
6230: PUSH
6231: LD_INT 108
6233: PUSH
6234: LD_INT 109
6236: PUSH
6237: LD_INT 112
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: ST_TO_ADDR
6253: GO 8748
6255: LD_INT 6
6257: DOUBLE
6258: EQUAL
6259: IFTRUE 6263
6261: GO 6383
6263: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
6264: LD_ADDR_VAR 0 1
6268: PUSH
6269: LD_INT 2
6271: PUSH
6272: LD_INT 4
6274: PUSH
6275: LD_INT 5
6277: PUSH
6278: LD_INT 6
6280: PUSH
6281: LD_INT 8
6283: PUSH
6284: LD_INT 11
6286: PUSH
6287: LD_INT 12
6289: PUSH
6290: LD_INT 15
6292: PUSH
6293: LD_INT 16
6295: PUSH
6296: LD_INT 20
6298: PUSH
6299: LD_INT 21
6301: PUSH
6302: LD_INT 22
6304: PUSH
6305: LD_INT 23
6307: PUSH
6308: LD_INT 25
6310: PUSH
6311: LD_INT 26
6313: PUSH
6314: LD_INT 30
6316: PUSH
6317: LD_INT 31
6319: PUSH
6320: LD_INT 32
6322: PUSH
6323: LD_INT 36
6325: PUSH
6326: EMPTY
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: PUSH
6347: LD_INT 101
6349: PUSH
6350: LD_INT 102
6352: PUSH
6353: LD_INT 105
6355: PUSH
6356: LD_INT 106
6358: PUSH
6359: LD_INT 108
6361: PUSH
6362: LD_INT 109
6364: PUSH
6365: LD_INT 112
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: ST_TO_ADDR
6381: GO 8748
6383: LD_INT 7
6385: DOUBLE
6386: EQUAL
6387: IFTRUE 6391
6389: GO 6491
6391: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
6392: LD_ADDR_VAR 0 1
6396: PUSH
6397: LD_INT 2
6399: PUSH
6400: LD_INT 4
6402: PUSH
6403: LD_INT 5
6405: PUSH
6406: LD_INT 7
6408: PUSH
6409: LD_INT 11
6411: PUSH
6412: LD_INT 12
6414: PUSH
6415: LD_INT 15
6417: PUSH
6418: LD_INT 16
6420: PUSH
6421: LD_INT 20
6423: PUSH
6424: LD_INT 21
6426: PUSH
6427: LD_INT 22
6429: PUSH
6430: LD_INT 23
6432: PUSH
6433: LD_INT 25
6435: PUSH
6436: LD_INT 26
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: LIST
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: PUSH
6455: LD_INT 101
6457: PUSH
6458: LD_INT 102
6460: PUSH
6461: LD_INT 103
6463: PUSH
6464: LD_INT 105
6466: PUSH
6467: LD_INT 106
6469: PUSH
6470: LD_INT 108
6472: PUSH
6473: LD_INT 112
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: PUSH
6485: EMPTY
6486: LIST
6487: LIST
6488: ST_TO_ADDR
6489: GO 8748
6491: LD_INT 8
6493: DOUBLE
6494: EQUAL
6495: IFTRUE 6499
6497: GO 6627
6499: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
6500: LD_ADDR_VAR 0 1
6504: PUSH
6505: LD_INT 2
6507: PUSH
6508: LD_INT 4
6510: PUSH
6511: LD_INT 5
6513: PUSH
6514: LD_INT 6
6516: PUSH
6517: LD_INT 7
6519: PUSH
6520: LD_INT 8
6522: PUSH
6523: LD_INT 11
6525: PUSH
6526: LD_INT 12
6528: PUSH
6529: LD_INT 15
6531: PUSH
6532: LD_INT 16
6534: PUSH
6535: LD_INT 20
6537: PUSH
6538: LD_INT 21
6540: PUSH
6541: LD_INT 22
6543: PUSH
6544: LD_INT 23
6546: PUSH
6547: LD_INT 25
6549: PUSH
6550: LD_INT 26
6552: PUSH
6553: LD_INT 30
6555: PUSH
6556: LD_INT 31
6558: PUSH
6559: LD_INT 32
6561: PUSH
6562: LD_INT 36
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: PUSH
6587: LD_INT 101
6589: PUSH
6590: LD_INT 102
6592: PUSH
6593: LD_INT 103
6595: PUSH
6596: LD_INT 105
6598: PUSH
6599: LD_INT 106
6601: PUSH
6602: LD_INT 108
6604: PUSH
6605: LD_INT 109
6607: PUSH
6608: LD_INT 112
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: ST_TO_ADDR
6625: GO 8748
6627: LD_INT 9
6629: DOUBLE
6630: EQUAL
6631: IFTRUE 6635
6633: GO 6771
6635: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
6636: LD_ADDR_VAR 0 1
6640: PUSH
6641: LD_INT 2
6643: PUSH
6644: LD_INT 4
6646: PUSH
6647: LD_INT 5
6649: PUSH
6650: LD_INT 6
6652: PUSH
6653: LD_INT 7
6655: PUSH
6656: LD_INT 8
6658: PUSH
6659: LD_INT 11
6661: PUSH
6662: LD_INT 12
6664: PUSH
6665: LD_INT 15
6667: PUSH
6668: LD_INT 16
6670: PUSH
6671: LD_INT 20
6673: PUSH
6674: LD_INT 21
6676: PUSH
6677: LD_INT 22
6679: PUSH
6680: LD_INT 23
6682: PUSH
6683: LD_INT 25
6685: PUSH
6686: LD_INT 26
6688: PUSH
6689: LD_INT 28
6691: PUSH
6692: LD_INT 30
6694: PUSH
6695: LD_INT 31
6697: PUSH
6698: LD_INT 32
6700: PUSH
6701: LD_INT 36
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: PUSH
6727: LD_INT 101
6729: PUSH
6730: LD_INT 102
6732: PUSH
6733: LD_INT 103
6735: PUSH
6736: LD_INT 105
6738: PUSH
6739: LD_INT 106
6741: PUSH
6742: LD_INT 108
6744: PUSH
6745: LD_INT 109
6747: PUSH
6748: LD_INT 112
6750: PUSH
6751: LD_INT 114
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: LIST
6762: LIST
6763: LIST
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: ST_TO_ADDR
6769: GO 8748
6771: LD_INT 10
6773: DOUBLE
6774: EQUAL
6775: IFTRUE 6779
6777: GO 6963
6779: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
6780: LD_ADDR_VAR 0 1
6784: PUSH
6785: LD_INT 2
6787: PUSH
6788: LD_INT 4
6790: PUSH
6791: LD_INT 5
6793: PUSH
6794: LD_INT 6
6796: PUSH
6797: LD_INT 7
6799: PUSH
6800: LD_INT 8
6802: PUSH
6803: LD_INT 9
6805: PUSH
6806: LD_INT 10
6808: PUSH
6809: LD_INT 11
6811: PUSH
6812: LD_INT 12
6814: PUSH
6815: LD_INT 13
6817: PUSH
6818: LD_INT 14
6820: PUSH
6821: LD_INT 15
6823: PUSH
6824: LD_INT 16
6826: PUSH
6827: LD_INT 17
6829: PUSH
6830: LD_INT 18
6832: PUSH
6833: LD_INT 19
6835: PUSH
6836: LD_INT 20
6838: PUSH
6839: LD_INT 21
6841: PUSH
6842: LD_INT 22
6844: PUSH
6845: LD_INT 23
6847: PUSH
6848: LD_INT 24
6850: PUSH
6851: LD_INT 25
6853: PUSH
6854: LD_INT 26
6856: PUSH
6857: LD_INT 28
6859: PUSH
6860: LD_INT 30
6862: PUSH
6863: LD_INT 31
6865: PUSH
6866: LD_INT 32
6868: PUSH
6869: LD_INT 36
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: LIST
6900: LIST
6901: LIST
6902: PUSH
6903: LD_INT 101
6905: PUSH
6906: LD_INT 102
6908: PUSH
6909: LD_INT 103
6911: PUSH
6912: LD_INT 104
6914: PUSH
6915: LD_INT 105
6917: PUSH
6918: LD_INT 106
6920: PUSH
6921: LD_INT 107
6923: PUSH
6924: LD_INT 108
6926: PUSH
6927: LD_INT 109
6929: PUSH
6930: LD_INT 110
6932: PUSH
6933: LD_INT 111
6935: PUSH
6936: LD_INT 112
6938: PUSH
6939: LD_INT 114
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: ST_TO_ADDR
6961: GO 8748
6963: LD_INT 11
6965: DOUBLE
6966: EQUAL
6967: IFTRUE 6971
6969: GO 7163
6971: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
6972: LD_ADDR_VAR 0 1
6976: PUSH
6977: LD_INT 2
6979: PUSH
6980: LD_INT 3
6982: PUSH
6983: LD_INT 4
6985: PUSH
6986: LD_INT 5
6988: PUSH
6989: LD_INT 6
6991: PUSH
6992: LD_INT 7
6994: PUSH
6995: LD_INT 8
6997: PUSH
6998: LD_INT 9
7000: PUSH
7001: LD_INT 10
7003: PUSH
7004: LD_INT 11
7006: PUSH
7007: LD_INT 12
7009: PUSH
7010: LD_INT 13
7012: PUSH
7013: LD_INT 14
7015: PUSH
7016: LD_INT 15
7018: PUSH
7019: LD_INT 16
7021: PUSH
7022: LD_INT 17
7024: PUSH
7025: LD_INT 18
7027: PUSH
7028: LD_INT 19
7030: PUSH
7031: LD_INT 20
7033: PUSH
7034: LD_INT 21
7036: PUSH
7037: LD_INT 22
7039: PUSH
7040: LD_INT 23
7042: PUSH
7043: LD_INT 24
7045: PUSH
7046: LD_INT 25
7048: PUSH
7049: LD_INT 26
7051: PUSH
7052: LD_INT 28
7054: PUSH
7055: LD_INT 30
7057: PUSH
7058: LD_INT 31
7060: PUSH
7061: LD_INT 32
7063: PUSH
7064: LD_INT 34
7066: PUSH
7067: LD_INT 36
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: PUSH
7103: LD_INT 101
7105: PUSH
7106: LD_INT 102
7108: PUSH
7109: LD_INT 103
7111: PUSH
7112: LD_INT 104
7114: PUSH
7115: LD_INT 105
7117: PUSH
7118: LD_INT 106
7120: PUSH
7121: LD_INT 107
7123: PUSH
7124: LD_INT 108
7126: PUSH
7127: LD_INT 109
7129: PUSH
7130: LD_INT 110
7132: PUSH
7133: LD_INT 111
7135: PUSH
7136: LD_INT 112
7138: PUSH
7139: LD_INT 114
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: ST_TO_ADDR
7161: GO 8748
7163: LD_INT 12
7165: DOUBLE
7166: EQUAL
7167: IFTRUE 7171
7169: GO 7379
7171: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
7172: LD_ADDR_VAR 0 1
7176: PUSH
7177: LD_INT 1
7179: PUSH
7180: LD_INT 2
7182: PUSH
7183: LD_INT 3
7185: PUSH
7186: LD_INT 4
7188: PUSH
7189: LD_INT 5
7191: PUSH
7192: LD_INT 6
7194: PUSH
7195: LD_INT 7
7197: PUSH
7198: LD_INT 8
7200: PUSH
7201: LD_INT 9
7203: PUSH
7204: LD_INT 10
7206: PUSH
7207: LD_INT 11
7209: PUSH
7210: LD_INT 12
7212: PUSH
7213: LD_INT 13
7215: PUSH
7216: LD_INT 14
7218: PUSH
7219: LD_INT 15
7221: PUSH
7222: LD_INT 16
7224: PUSH
7225: LD_INT 17
7227: PUSH
7228: LD_INT 18
7230: PUSH
7231: LD_INT 19
7233: PUSH
7234: LD_INT 20
7236: PUSH
7237: LD_INT 21
7239: PUSH
7240: LD_INT 22
7242: PUSH
7243: LD_INT 23
7245: PUSH
7246: LD_INT 24
7248: PUSH
7249: LD_INT 25
7251: PUSH
7252: LD_INT 26
7254: PUSH
7255: LD_INT 27
7257: PUSH
7258: LD_INT 28
7260: PUSH
7261: LD_INT 30
7263: PUSH
7264: LD_INT 31
7266: PUSH
7267: LD_INT 32
7269: PUSH
7270: LD_INT 33
7272: PUSH
7273: LD_INT 34
7275: PUSH
7276: LD_INT 36
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: LIST
7294: LIST
7295: LIST
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: PUSH
7315: LD_INT 101
7317: PUSH
7318: LD_INT 102
7320: PUSH
7321: LD_INT 103
7323: PUSH
7324: LD_INT 104
7326: PUSH
7327: LD_INT 105
7329: PUSH
7330: LD_INT 106
7332: PUSH
7333: LD_INT 107
7335: PUSH
7336: LD_INT 108
7338: PUSH
7339: LD_INT 109
7341: PUSH
7342: LD_INT 110
7344: PUSH
7345: LD_INT 111
7347: PUSH
7348: LD_INT 112
7350: PUSH
7351: LD_INT 113
7353: PUSH
7354: LD_INT 114
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: ST_TO_ADDR
7377: GO 8748
7379: LD_INT 13
7381: DOUBLE
7382: EQUAL
7383: IFTRUE 7387
7385: GO 7583
7387: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
7388: LD_ADDR_VAR 0 1
7392: PUSH
7393: LD_INT 1
7395: PUSH
7396: LD_INT 2
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: LD_INT 4
7404: PUSH
7405: LD_INT 5
7407: PUSH
7408: LD_INT 8
7410: PUSH
7411: LD_INT 9
7413: PUSH
7414: LD_INT 10
7416: PUSH
7417: LD_INT 11
7419: PUSH
7420: LD_INT 12
7422: PUSH
7423: LD_INT 14
7425: PUSH
7426: LD_INT 15
7428: PUSH
7429: LD_INT 16
7431: PUSH
7432: LD_INT 17
7434: PUSH
7435: LD_INT 18
7437: PUSH
7438: LD_INT 19
7440: PUSH
7441: LD_INT 20
7443: PUSH
7444: LD_INT 21
7446: PUSH
7447: LD_INT 22
7449: PUSH
7450: LD_INT 23
7452: PUSH
7453: LD_INT 24
7455: PUSH
7456: LD_INT 25
7458: PUSH
7459: LD_INT 26
7461: PUSH
7462: LD_INT 27
7464: PUSH
7465: LD_INT 28
7467: PUSH
7468: LD_INT 30
7470: PUSH
7471: LD_INT 31
7473: PUSH
7474: LD_INT 32
7476: PUSH
7477: LD_INT 33
7479: PUSH
7480: LD_INT 34
7482: PUSH
7483: LD_INT 36
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: PUSH
7519: LD_INT 101
7521: PUSH
7522: LD_INT 102
7524: PUSH
7525: LD_INT 103
7527: PUSH
7528: LD_INT 104
7530: PUSH
7531: LD_INT 105
7533: PUSH
7534: LD_INT 106
7536: PUSH
7537: LD_INT 107
7539: PUSH
7540: LD_INT 108
7542: PUSH
7543: LD_INT 109
7545: PUSH
7546: LD_INT 110
7548: PUSH
7549: LD_INT 111
7551: PUSH
7552: LD_INT 112
7554: PUSH
7555: LD_INT 113
7557: PUSH
7558: LD_INT 114
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: ST_TO_ADDR
7581: GO 8748
7583: LD_INT 14
7585: DOUBLE
7586: EQUAL
7587: IFTRUE 7591
7589: GO 7803
7591: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
7592: LD_ADDR_VAR 0 1
7596: PUSH
7597: LD_INT 1
7599: PUSH
7600: LD_INT 2
7602: PUSH
7603: LD_INT 3
7605: PUSH
7606: LD_INT 4
7608: PUSH
7609: LD_INT 5
7611: PUSH
7612: LD_INT 6
7614: PUSH
7615: LD_INT 7
7617: PUSH
7618: LD_INT 8
7620: PUSH
7621: LD_INT 9
7623: PUSH
7624: LD_INT 10
7626: PUSH
7627: LD_INT 11
7629: PUSH
7630: LD_INT 12
7632: PUSH
7633: LD_INT 13
7635: PUSH
7636: LD_INT 14
7638: PUSH
7639: LD_INT 15
7641: PUSH
7642: LD_INT 16
7644: PUSH
7645: LD_INT 17
7647: PUSH
7648: LD_INT 18
7650: PUSH
7651: LD_INT 19
7653: PUSH
7654: LD_INT 20
7656: PUSH
7657: LD_INT 21
7659: PUSH
7660: LD_INT 22
7662: PUSH
7663: LD_INT 23
7665: PUSH
7666: LD_INT 24
7668: PUSH
7669: LD_INT 25
7671: PUSH
7672: LD_INT 26
7674: PUSH
7675: LD_INT 27
7677: PUSH
7678: LD_INT 28
7680: PUSH
7681: LD_INT 29
7683: PUSH
7684: LD_INT 30
7686: PUSH
7687: LD_INT 31
7689: PUSH
7690: LD_INT 32
7692: PUSH
7693: LD_INT 33
7695: PUSH
7696: LD_INT 34
7698: PUSH
7699: LD_INT 36
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: PUSH
7739: LD_INT 101
7741: PUSH
7742: LD_INT 102
7744: PUSH
7745: LD_INT 103
7747: PUSH
7748: LD_INT 104
7750: PUSH
7751: LD_INT 105
7753: PUSH
7754: LD_INT 106
7756: PUSH
7757: LD_INT 107
7759: PUSH
7760: LD_INT 108
7762: PUSH
7763: LD_INT 109
7765: PUSH
7766: LD_INT 110
7768: PUSH
7769: LD_INT 111
7771: PUSH
7772: LD_INT 112
7774: PUSH
7775: LD_INT 113
7777: PUSH
7778: LD_INT 114
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: ST_TO_ADDR
7801: GO 8748
7803: LD_INT 15
7805: DOUBLE
7806: EQUAL
7807: IFTRUE 7811
7809: GO 8023
7811: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
7812: LD_ADDR_VAR 0 1
7816: PUSH
7817: LD_INT 1
7819: PUSH
7820: LD_INT 2
7822: PUSH
7823: LD_INT 3
7825: PUSH
7826: LD_INT 4
7828: PUSH
7829: LD_INT 5
7831: PUSH
7832: LD_INT 6
7834: PUSH
7835: LD_INT 7
7837: PUSH
7838: LD_INT 8
7840: PUSH
7841: LD_INT 9
7843: PUSH
7844: LD_INT 10
7846: PUSH
7847: LD_INT 11
7849: PUSH
7850: LD_INT 12
7852: PUSH
7853: LD_INT 13
7855: PUSH
7856: LD_INT 14
7858: PUSH
7859: LD_INT 15
7861: PUSH
7862: LD_INT 16
7864: PUSH
7865: LD_INT 17
7867: PUSH
7868: LD_INT 18
7870: PUSH
7871: LD_INT 19
7873: PUSH
7874: LD_INT 20
7876: PUSH
7877: LD_INT 21
7879: PUSH
7880: LD_INT 22
7882: PUSH
7883: LD_INT 23
7885: PUSH
7886: LD_INT 24
7888: PUSH
7889: LD_INT 25
7891: PUSH
7892: LD_INT 26
7894: PUSH
7895: LD_INT 27
7897: PUSH
7898: LD_INT 28
7900: PUSH
7901: LD_INT 29
7903: PUSH
7904: LD_INT 30
7906: PUSH
7907: LD_INT 31
7909: PUSH
7910: LD_INT 32
7912: PUSH
7913: LD_INT 33
7915: PUSH
7916: LD_INT 34
7918: PUSH
7919: LD_INT 36
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: PUSH
7959: LD_INT 101
7961: PUSH
7962: LD_INT 102
7964: PUSH
7965: LD_INT 103
7967: PUSH
7968: LD_INT 104
7970: PUSH
7971: LD_INT 105
7973: PUSH
7974: LD_INT 106
7976: PUSH
7977: LD_INT 107
7979: PUSH
7980: LD_INT 108
7982: PUSH
7983: LD_INT 109
7985: PUSH
7986: LD_INT 110
7988: PUSH
7989: LD_INT 111
7991: PUSH
7992: LD_INT 112
7994: PUSH
7995: LD_INT 113
7997: PUSH
7998: LD_INT 114
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: ST_TO_ADDR
8021: GO 8748
8023: LD_INT 16
8025: DOUBLE
8026: EQUAL
8027: IFTRUE 8031
8029: GO 8155
8031: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
8032: LD_ADDR_VAR 0 1
8036: PUSH
8037: LD_INT 2
8039: PUSH
8040: LD_INT 4
8042: PUSH
8043: LD_INT 5
8045: PUSH
8046: LD_INT 7
8048: PUSH
8049: LD_INT 11
8051: PUSH
8052: LD_INT 12
8054: PUSH
8055: LD_INT 15
8057: PUSH
8058: LD_INT 16
8060: PUSH
8061: LD_INT 20
8063: PUSH
8064: LD_INT 21
8066: PUSH
8067: LD_INT 22
8069: PUSH
8070: LD_INT 23
8072: PUSH
8073: LD_INT 25
8075: PUSH
8076: LD_INT 26
8078: PUSH
8079: LD_INT 30
8081: PUSH
8082: LD_INT 31
8084: PUSH
8085: LD_INT 32
8087: PUSH
8088: LD_INT 33
8090: PUSH
8091: LD_INT 34
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: PUSH
8115: LD_INT 101
8117: PUSH
8118: LD_INT 102
8120: PUSH
8121: LD_INT 103
8123: PUSH
8124: LD_INT 106
8126: PUSH
8127: LD_INT 108
8129: PUSH
8130: LD_INT 112
8132: PUSH
8133: LD_INT 113
8135: PUSH
8136: LD_INT 114
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: ST_TO_ADDR
8153: GO 8748
8155: LD_INT 17
8157: DOUBLE
8158: EQUAL
8159: IFTRUE 8163
8161: GO 8375
8163: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
8164: LD_ADDR_VAR 0 1
8168: PUSH
8169: LD_INT 1
8171: PUSH
8172: LD_INT 2
8174: PUSH
8175: LD_INT 3
8177: PUSH
8178: LD_INT 4
8180: PUSH
8181: LD_INT 5
8183: PUSH
8184: LD_INT 6
8186: PUSH
8187: LD_INT 7
8189: PUSH
8190: LD_INT 8
8192: PUSH
8193: LD_INT 9
8195: PUSH
8196: LD_INT 10
8198: PUSH
8199: LD_INT 11
8201: PUSH
8202: LD_INT 12
8204: PUSH
8205: LD_INT 13
8207: PUSH
8208: LD_INT 14
8210: PUSH
8211: LD_INT 15
8213: PUSH
8214: LD_INT 16
8216: PUSH
8217: LD_INT 17
8219: PUSH
8220: LD_INT 18
8222: PUSH
8223: LD_INT 19
8225: PUSH
8226: LD_INT 20
8228: PUSH
8229: LD_INT 21
8231: PUSH
8232: LD_INT 22
8234: PUSH
8235: LD_INT 23
8237: PUSH
8238: LD_INT 24
8240: PUSH
8241: LD_INT 25
8243: PUSH
8244: LD_INT 26
8246: PUSH
8247: LD_INT 27
8249: PUSH
8250: LD_INT 28
8252: PUSH
8253: LD_INT 29
8255: PUSH
8256: LD_INT 30
8258: PUSH
8259: LD_INT 31
8261: PUSH
8262: LD_INT 32
8264: PUSH
8265: LD_INT 33
8267: PUSH
8268: LD_INT 34
8270: PUSH
8271: LD_INT 36
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: PUSH
8311: LD_INT 101
8313: PUSH
8314: LD_INT 102
8316: PUSH
8317: LD_INT 103
8319: PUSH
8320: LD_INT 104
8322: PUSH
8323: LD_INT 105
8325: PUSH
8326: LD_INT 106
8328: PUSH
8329: LD_INT 107
8331: PUSH
8332: LD_INT 108
8334: PUSH
8335: LD_INT 109
8337: PUSH
8338: LD_INT 110
8340: PUSH
8341: LD_INT 111
8343: PUSH
8344: LD_INT 112
8346: PUSH
8347: LD_INT 113
8349: PUSH
8350: LD_INT 114
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: ST_TO_ADDR
8373: GO 8748
8375: LD_INT 18
8377: DOUBLE
8378: EQUAL
8379: IFTRUE 8383
8381: GO 8519
8383: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
8384: LD_ADDR_VAR 0 1
8388: PUSH
8389: LD_INT 2
8391: PUSH
8392: LD_INT 4
8394: PUSH
8395: LD_INT 5
8397: PUSH
8398: LD_INT 7
8400: PUSH
8401: LD_INT 11
8403: PUSH
8404: LD_INT 12
8406: PUSH
8407: LD_INT 15
8409: PUSH
8410: LD_INT 16
8412: PUSH
8413: LD_INT 20
8415: PUSH
8416: LD_INT 21
8418: PUSH
8419: LD_INT 22
8421: PUSH
8422: LD_INT 23
8424: PUSH
8425: LD_INT 25
8427: PUSH
8428: LD_INT 26
8430: PUSH
8431: LD_INT 30
8433: PUSH
8434: LD_INT 31
8436: PUSH
8437: LD_INT 32
8439: PUSH
8440: LD_INT 33
8442: PUSH
8443: LD_INT 34
8445: PUSH
8446: LD_INT 35
8448: PUSH
8449: LD_INT 36
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: PUSH
8475: LD_INT 101
8477: PUSH
8478: LD_INT 102
8480: PUSH
8481: LD_INT 103
8483: PUSH
8484: LD_INT 106
8486: PUSH
8487: LD_INT 108
8489: PUSH
8490: LD_INT 112
8492: PUSH
8493: LD_INT 113
8495: PUSH
8496: LD_INT 114
8498: PUSH
8499: LD_INT 115
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: ST_TO_ADDR
8517: GO 8748
8519: LD_INT 19
8521: DOUBLE
8522: EQUAL
8523: IFTRUE 8527
8525: GO 8747
8527: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
8528: LD_ADDR_VAR 0 1
8532: PUSH
8533: LD_INT 1
8535: PUSH
8536: LD_INT 2
8538: PUSH
8539: LD_INT 3
8541: PUSH
8542: LD_INT 4
8544: PUSH
8545: LD_INT 5
8547: PUSH
8548: LD_INT 6
8550: PUSH
8551: LD_INT 7
8553: PUSH
8554: LD_INT 8
8556: PUSH
8557: LD_INT 9
8559: PUSH
8560: LD_INT 10
8562: PUSH
8563: LD_INT 11
8565: PUSH
8566: LD_INT 12
8568: PUSH
8569: LD_INT 13
8571: PUSH
8572: LD_INT 14
8574: PUSH
8575: LD_INT 15
8577: PUSH
8578: LD_INT 16
8580: PUSH
8581: LD_INT 17
8583: PUSH
8584: LD_INT 18
8586: PUSH
8587: LD_INT 19
8589: PUSH
8590: LD_INT 20
8592: PUSH
8593: LD_INT 21
8595: PUSH
8596: LD_INT 22
8598: PUSH
8599: LD_INT 23
8601: PUSH
8602: LD_INT 24
8604: PUSH
8605: LD_INT 25
8607: PUSH
8608: LD_INT 26
8610: PUSH
8611: LD_INT 27
8613: PUSH
8614: LD_INT 28
8616: PUSH
8617: LD_INT 29
8619: PUSH
8620: LD_INT 30
8622: PUSH
8623: LD_INT 31
8625: PUSH
8626: LD_INT 32
8628: PUSH
8629: LD_INT 33
8631: PUSH
8632: LD_INT 34
8634: PUSH
8635: LD_INT 35
8637: PUSH
8638: LD_INT 36
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: PUSH
8679: LD_INT 101
8681: PUSH
8682: LD_INT 102
8684: PUSH
8685: LD_INT 103
8687: PUSH
8688: LD_INT 104
8690: PUSH
8691: LD_INT 105
8693: PUSH
8694: LD_INT 106
8696: PUSH
8697: LD_INT 107
8699: PUSH
8700: LD_INT 108
8702: PUSH
8703: LD_INT 109
8705: PUSH
8706: LD_INT 110
8708: PUSH
8709: LD_INT 111
8711: PUSH
8712: LD_INT 112
8714: PUSH
8715: LD_INT 113
8717: PUSH
8718: LD_INT 114
8720: PUSH
8721: LD_INT 115
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: ST_TO_ADDR
8745: GO 8748
8747: POP
// end else
8748: GO 8967
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
8750: LD_ADDR_VAR 0 1
8754: PUSH
8755: LD_INT 1
8757: PUSH
8758: LD_INT 2
8760: PUSH
8761: LD_INT 3
8763: PUSH
8764: LD_INT 4
8766: PUSH
8767: LD_INT 5
8769: PUSH
8770: LD_INT 6
8772: PUSH
8773: LD_INT 7
8775: PUSH
8776: LD_INT 8
8778: PUSH
8779: LD_INT 9
8781: PUSH
8782: LD_INT 10
8784: PUSH
8785: LD_INT 11
8787: PUSH
8788: LD_INT 12
8790: PUSH
8791: LD_INT 13
8793: PUSH
8794: LD_INT 14
8796: PUSH
8797: LD_INT 15
8799: PUSH
8800: LD_INT 16
8802: PUSH
8803: LD_INT 17
8805: PUSH
8806: LD_INT 18
8808: PUSH
8809: LD_INT 19
8811: PUSH
8812: LD_INT 20
8814: PUSH
8815: LD_INT 21
8817: PUSH
8818: LD_INT 22
8820: PUSH
8821: LD_INT 23
8823: PUSH
8824: LD_INT 24
8826: PUSH
8827: LD_INT 25
8829: PUSH
8830: LD_INT 26
8832: PUSH
8833: LD_INT 27
8835: PUSH
8836: LD_INT 28
8838: PUSH
8839: LD_INT 29
8841: PUSH
8842: LD_INT 30
8844: PUSH
8845: LD_INT 31
8847: PUSH
8848: LD_INT 32
8850: PUSH
8851: LD_INT 33
8853: PUSH
8854: LD_INT 34
8856: PUSH
8857: LD_INT 35
8859: PUSH
8860: LD_INT 36
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: PUSH
8901: LD_INT 101
8903: PUSH
8904: LD_INT 102
8906: PUSH
8907: LD_INT 103
8909: PUSH
8910: LD_INT 104
8912: PUSH
8913: LD_INT 105
8915: PUSH
8916: LD_INT 106
8918: PUSH
8919: LD_INT 107
8921: PUSH
8922: LD_INT 108
8924: PUSH
8925: LD_INT 109
8927: PUSH
8928: LD_INT 110
8930: PUSH
8931: LD_INT 111
8933: PUSH
8934: LD_INT 112
8936: PUSH
8937: LD_INT 113
8939: PUSH
8940: LD_INT 114
8942: PUSH
8943: LD_INT 115
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: ST_TO_ADDR
// if result then
8967: LD_VAR 0 1
8971: IFFALSE 9260
// begin normal :=  ;
8973: LD_ADDR_VAR 0 3
8977: PUSH
8978: LD_STRING 
8980: ST_TO_ADDR
// hardcore :=  ;
8981: LD_ADDR_VAR 0 4
8985: PUSH
8986: LD_STRING 
8988: ST_TO_ADDR
// for i = 1 to normalCounter do
8989: LD_ADDR_VAR 0 5
8993: PUSH
8994: DOUBLE
8995: LD_INT 1
8997: DEC
8998: ST_TO_ADDR
8999: LD_EXP 56
9003: PUSH
9004: FOR_TO
9005: IFFALSE 9106
// begin tmp := 0 ;
9007: LD_ADDR_VAR 0 2
9011: PUSH
9012: LD_STRING 0
9014: ST_TO_ADDR
// if result [ 1 ] then
9015: LD_VAR 0 1
9019: PUSH
9020: LD_INT 1
9022: ARRAY
9023: IFFALSE 9088
// if result [ 1 ] [ 1 ] = i then
9025: LD_VAR 0 1
9029: PUSH
9030: LD_INT 1
9032: ARRAY
9033: PUSH
9034: LD_INT 1
9036: ARRAY
9037: PUSH
9038: LD_VAR 0 5
9042: EQUAL
9043: IFFALSE 9088
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9045: LD_ADDR_VAR 0 1
9049: PUSH
9050: LD_VAR 0 1
9054: PPUSH
9055: LD_INT 1
9057: PPUSH
9058: LD_VAR 0 1
9062: PUSH
9063: LD_INT 1
9065: ARRAY
9066: PPUSH
9067: LD_INT 1
9069: PPUSH
9070: CALL_OW 3
9074: PPUSH
9075: CALL_OW 1
9079: ST_TO_ADDR
// tmp := 1 ;
9080: LD_ADDR_VAR 0 2
9084: PUSH
9085: LD_STRING 1
9087: ST_TO_ADDR
// end ; normal := normal & tmp ;
9088: LD_ADDR_VAR 0 3
9092: PUSH
9093: LD_VAR 0 3
9097: PUSH
9098: LD_VAR 0 2
9102: STR
9103: ST_TO_ADDR
// end ;
9104: GO 9004
9106: POP
9107: POP
// for i = 1 to hardcoreCounter do
9108: LD_ADDR_VAR 0 5
9112: PUSH
9113: DOUBLE
9114: LD_INT 1
9116: DEC
9117: ST_TO_ADDR
9118: LD_EXP 57
9122: PUSH
9123: FOR_TO
9124: IFFALSE 9229
// begin tmp := 0 ;
9126: LD_ADDR_VAR 0 2
9130: PUSH
9131: LD_STRING 0
9133: ST_TO_ADDR
// if result [ 2 ] then
9134: LD_VAR 0 1
9138: PUSH
9139: LD_INT 2
9141: ARRAY
9142: IFFALSE 9211
// if result [ 2 ] [ 1 ] = 100 + i then
9144: LD_VAR 0 1
9148: PUSH
9149: LD_INT 2
9151: ARRAY
9152: PUSH
9153: LD_INT 1
9155: ARRAY
9156: PUSH
9157: LD_INT 100
9159: PUSH
9160: LD_VAR 0 5
9164: PLUS
9165: EQUAL
9166: IFFALSE 9211
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9168: LD_ADDR_VAR 0 1
9172: PUSH
9173: LD_VAR 0 1
9177: PPUSH
9178: LD_INT 2
9180: PPUSH
9181: LD_VAR 0 1
9185: PUSH
9186: LD_INT 2
9188: ARRAY
9189: PPUSH
9190: LD_INT 1
9192: PPUSH
9193: CALL_OW 3
9197: PPUSH
9198: CALL_OW 1
9202: ST_TO_ADDR
// tmp := 1 ;
9203: LD_ADDR_VAR 0 2
9207: PUSH
9208: LD_STRING 1
9210: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9211: LD_ADDR_VAR 0 4
9215: PUSH
9216: LD_VAR 0 4
9220: PUSH
9221: LD_VAR 0 2
9225: STR
9226: ST_TO_ADDR
// end ;
9227: GO 9123
9229: POP
9230: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9231: LD_STRING getStreamItemsFromMission("
9233: PUSH
9234: LD_VAR 0 3
9238: STR
9239: PUSH
9240: LD_STRING ","
9242: STR
9243: PUSH
9244: LD_VAR 0 4
9248: STR
9249: PUSH
9250: LD_STRING ")
9252: STR
9253: PPUSH
9254: CALL_OW 559
// end else
9258: GO 9267
// ToLua ( getStreamItemsFromMission("","") ) ;
9260: LD_STRING getStreamItemsFromMission("","")
9262: PPUSH
9263: CALL_OW 559
// end ;
9267: LD_VAR 0 1
9271: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9272: LD_EXP 55
9276: PUSH
9277: LD_EXP 60
9281: AND
9282: IFFALSE 9406
9284: GO 9286
9286: DISABLE
9287: LD_INT 0
9289: PPUSH
9290: PPUSH
// begin enable ;
9291: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9292: LD_ADDR_VAR 0 2
9296: PUSH
9297: LD_INT 22
9299: PUSH
9300: LD_OWVAR 2
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: PUSH
9309: LD_INT 2
9311: PUSH
9312: LD_INT 34
9314: PUSH
9315: LD_INT 7
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: PUSH
9322: LD_INT 34
9324: PUSH
9325: LD_INT 45
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: PUSH
9332: LD_INT 34
9334: PUSH
9335: LD_INT 28
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: PUSH
9342: LD_INT 34
9344: PUSH
9345: LD_INT 47
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PPUSH
9363: CALL_OW 69
9367: ST_TO_ADDR
// if not tmp then
9368: LD_VAR 0 2
9372: NOT
9373: IFFALSE 9377
// exit ;
9375: GO 9406
// for i in tmp do
9377: LD_ADDR_VAR 0 1
9381: PUSH
9382: LD_VAR 0 2
9386: PUSH
9387: FOR_IN
9388: IFFALSE 9404
// begin SetLives ( i , 0 ) ;
9390: LD_VAR 0 1
9394: PPUSH
9395: LD_INT 0
9397: PPUSH
9398: CALL_OW 234
// end ;
9402: GO 9387
9404: POP
9405: POP
// end ;
9406: PPOPN 2
9408: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9409: LD_EXP 55
9413: PUSH
9414: LD_EXP 61
9418: AND
9419: IFFALSE 9503
9421: GO 9423
9423: DISABLE
9424: LD_INT 0
9426: PPUSH
9427: PPUSH
// begin enable ;
9428: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9429: LD_ADDR_VAR 0 2
9433: PUSH
9434: LD_INT 22
9436: PUSH
9437: LD_OWVAR 2
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: PUSH
9446: LD_INT 32
9448: PUSH
9449: LD_INT 3
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: PUSH
9456: EMPTY
9457: LIST
9458: LIST
9459: PPUSH
9460: CALL_OW 69
9464: ST_TO_ADDR
// if not tmp then
9465: LD_VAR 0 2
9469: NOT
9470: IFFALSE 9474
// exit ;
9472: GO 9503
// for i in tmp do
9474: LD_ADDR_VAR 0 1
9478: PUSH
9479: LD_VAR 0 2
9483: PUSH
9484: FOR_IN
9485: IFFALSE 9501
// begin SetLives ( i , 0 ) ;
9487: LD_VAR 0 1
9491: PPUSH
9492: LD_INT 0
9494: PPUSH
9495: CALL_OW 234
// end ;
9499: GO 9484
9501: POP
9502: POP
// end ;
9503: PPOPN 2
9505: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9506: LD_EXP 55
9510: PUSH
9511: LD_EXP 58
9515: AND
9516: IFFALSE 9609
9518: GO 9520
9520: DISABLE
9521: LD_INT 0
9523: PPUSH
// begin enable ;
9524: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9525: LD_ADDR_VAR 0 1
9529: PUSH
9530: LD_INT 22
9532: PUSH
9533: LD_OWVAR 2
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PUSH
9542: LD_INT 2
9544: PUSH
9545: LD_INT 25
9547: PUSH
9548: LD_INT 5
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: PUSH
9555: LD_INT 25
9557: PUSH
9558: LD_INT 9
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: PUSH
9565: LD_INT 25
9567: PUSH
9568: LD_INT 8
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: PUSH
9581: EMPTY
9582: LIST
9583: LIST
9584: PPUSH
9585: CALL_OW 69
9589: PUSH
9590: FOR_IN
9591: IFFALSE 9607
// begin SetClass ( i , 1 ) ;
9593: LD_VAR 0 1
9597: PPUSH
9598: LD_INT 1
9600: PPUSH
9601: CALL_OW 336
// end ;
9605: GO 9590
9607: POP
9608: POP
// end ;
9609: PPOPN 1
9611: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9612: LD_EXP 55
9616: PUSH
9617: LD_EXP 59
9621: AND
9622: PUSH
9623: LD_OWVAR 65
9627: PUSH
9628: LD_INT 7
9630: LESS
9631: AND
9632: IFFALSE 9646
9634: GO 9636
9636: DISABLE
// begin enable ;
9637: ENABLE
// game_speed := 7 ;
9638: LD_ADDR_OWVAR 65
9642: PUSH
9643: LD_INT 7
9645: ST_TO_ADDR
// end ;
9646: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9647: LD_EXP 55
9651: PUSH
9652: LD_EXP 62
9656: AND
9657: IFFALSE 9859
9659: GO 9661
9661: DISABLE
9662: LD_INT 0
9664: PPUSH
9665: PPUSH
9666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9667: LD_ADDR_VAR 0 3
9671: PUSH
9672: LD_INT 81
9674: PUSH
9675: LD_OWVAR 2
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: PUSH
9684: LD_INT 21
9686: PUSH
9687: LD_INT 1
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PPUSH
9698: CALL_OW 69
9702: ST_TO_ADDR
// if not tmp then
9703: LD_VAR 0 3
9707: NOT
9708: IFFALSE 9712
// exit ;
9710: GO 9859
// if tmp > 5 then
9712: LD_VAR 0 3
9716: PUSH
9717: LD_INT 5
9719: GREATER
9720: IFFALSE 9732
// k := 5 else
9722: LD_ADDR_VAR 0 2
9726: PUSH
9727: LD_INT 5
9729: ST_TO_ADDR
9730: GO 9742
// k := tmp ;
9732: LD_ADDR_VAR 0 2
9736: PUSH
9737: LD_VAR 0 3
9741: ST_TO_ADDR
// for i := 1 to k do
9742: LD_ADDR_VAR 0 1
9746: PUSH
9747: DOUBLE
9748: LD_INT 1
9750: DEC
9751: ST_TO_ADDR
9752: LD_VAR 0 2
9756: PUSH
9757: FOR_TO
9758: IFFALSE 9857
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
9760: LD_VAR 0 3
9764: PUSH
9765: LD_VAR 0 1
9769: ARRAY
9770: PPUSH
9771: LD_VAR 0 1
9775: PUSH
9776: LD_INT 4
9778: MOD
9779: PUSH
9780: LD_INT 1
9782: PLUS
9783: PPUSH
9784: CALL_OW 259
9788: PUSH
9789: LD_INT 10
9791: LESS
9792: IFFALSE 9855
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
9794: LD_VAR 0 3
9798: PUSH
9799: LD_VAR 0 1
9803: ARRAY
9804: PPUSH
9805: LD_VAR 0 1
9809: PUSH
9810: LD_INT 4
9812: MOD
9813: PUSH
9814: LD_INT 1
9816: PLUS
9817: PPUSH
9818: LD_VAR 0 3
9822: PUSH
9823: LD_VAR 0 1
9827: ARRAY
9828: PPUSH
9829: LD_VAR 0 1
9833: PUSH
9834: LD_INT 4
9836: MOD
9837: PUSH
9838: LD_INT 1
9840: PLUS
9841: PPUSH
9842: CALL_OW 259
9846: PUSH
9847: LD_INT 1
9849: PLUS
9850: PPUSH
9851: CALL_OW 237
9855: GO 9757
9857: POP
9858: POP
// end ;
9859: PPOPN 3
9861: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
9862: LD_EXP 55
9866: PUSH
9867: LD_EXP 63
9871: AND
9872: IFFALSE 9892
9874: GO 9876
9876: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
9877: LD_INT 4
9879: PPUSH
9880: LD_OWVAR 2
9884: PPUSH
9885: LD_INT 0
9887: PPUSH
9888: CALL_OW 324
9892: END
// every 0 0$1 trigger StreamModeActive and sShovel do
9893: LD_EXP 55
9897: PUSH
9898: LD_EXP 92
9902: AND
9903: IFFALSE 9923
9905: GO 9907
9907: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
9908: LD_INT 19
9910: PPUSH
9911: LD_OWVAR 2
9915: PPUSH
9916: LD_INT 0
9918: PPUSH
9919: CALL_OW 324
9923: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
9924: LD_EXP 55
9928: PUSH
9929: LD_EXP 64
9933: AND
9934: IFFALSE 10036
9936: GO 9938
9938: DISABLE
9939: LD_INT 0
9941: PPUSH
9942: PPUSH
// begin enable ;
9943: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
9944: LD_ADDR_VAR 0 2
9948: PUSH
9949: LD_INT 22
9951: PUSH
9952: LD_OWVAR 2
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PUSH
9961: LD_INT 2
9963: PUSH
9964: LD_INT 34
9966: PUSH
9967: LD_INT 11
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: PUSH
9974: LD_INT 34
9976: PUSH
9977: LD_INT 30
9979: PUSH
9980: EMPTY
9981: LIST
9982: LIST
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: LIST
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PPUSH
9993: CALL_OW 69
9997: ST_TO_ADDR
// if not tmp then
9998: LD_VAR 0 2
10002: NOT
10003: IFFALSE 10007
// exit ;
10005: GO 10036
// for i in tmp do
10007: LD_ADDR_VAR 0 1
10011: PUSH
10012: LD_VAR 0 2
10016: PUSH
10017: FOR_IN
10018: IFFALSE 10034
// begin SetLives ( i , 0 ) ;
10020: LD_VAR 0 1
10024: PPUSH
10025: LD_INT 0
10027: PPUSH
10028: CALL_OW 234
// end ;
10032: GO 10017
10034: POP
10035: POP
// end ;
10036: PPOPN 2
10038: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10039: LD_EXP 55
10043: PUSH
10044: LD_EXP 65
10048: AND
10049: IFFALSE 10069
10051: GO 10053
10053: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10054: LD_INT 32
10056: PPUSH
10057: LD_OWVAR 2
10061: PPUSH
10062: LD_INT 0
10064: PPUSH
10065: CALL_OW 324
10069: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10070: LD_EXP 55
10074: PUSH
10075: LD_EXP 66
10079: AND
10080: IFFALSE 10261
10082: GO 10084
10084: DISABLE
10085: LD_INT 0
10087: PPUSH
10088: PPUSH
10089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10090: LD_ADDR_VAR 0 2
10094: PUSH
10095: LD_INT 22
10097: PUSH
10098: LD_OWVAR 2
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: PUSH
10107: LD_INT 33
10109: PUSH
10110: LD_INT 3
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: PPUSH
10121: CALL_OW 69
10125: ST_TO_ADDR
// if not tmp then
10126: LD_VAR 0 2
10130: NOT
10131: IFFALSE 10135
// exit ;
10133: GO 10261
// side := 0 ;
10135: LD_ADDR_VAR 0 3
10139: PUSH
10140: LD_INT 0
10142: ST_TO_ADDR
// for i := 1 to 8 do
10143: LD_ADDR_VAR 0 1
10147: PUSH
10148: DOUBLE
10149: LD_INT 1
10151: DEC
10152: ST_TO_ADDR
10153: LD_INT 8
10155: PUSH
10156: FOR_TO
10157: IFFALSE 10205
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10159: LD_OWVAR 2
10163: PUSH
10164: LD_VAR 0 1
10168: NONEQUAL
10169: PUSH
10170: LD_OWVAR 2
10174: PPUSH
10175: LD_VAR 0 1
10179: PPUSH
10180: CALL_OW 81
10184: PUSH
10185: LD_INT 2
10187: EQUAL
10188: AND
10189: IFFALSE 10203
// begin side := i ;
10191: LD_ADDR_VAR 0 3
10195: PUSH
10196: LD_VAR 0 1
10200: ST_TO_ADDR
// break ;
10201: GO 10205
// end ;
10203: GO 10156
10205: POP
10206: POP
// if not side then
10207: LD_VAR 0 3
10211: NOT
10212: IFFALSE 10216
// exit ;
10214: GO 10261
// for i := 1 to tmp do
10216: LD_ADDR_VAR 0 1
10220: PUSH
10221: DOUBLE
10222: LD_INT 1
10224: DEC
10225: ST_TO_ADDR
10226: LD_VAR 0 2
10230: PUSH
10231: FOR_TO
10232: IFFALSE 10259
// if Prob ( 60 ) then
10234: LD_INT 60
10236: PPUSH
10237: CALL_OW 13
10241: IFFALSE 10257
// SetSide ( i , side ) ;
10243: LD_VAR 0 1
10247: PPUSH
10248: LD_VAR 0 3
10252: PPUSH
10253: CALL_OW 235
10257: GO 10231
10259: POP
10260: POP
// end ;
10261: PPOPN 3
10263: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10264: LD_EXP 55
10268: PUSH
10269: LD_EXP 68
10273: AND
10274: IFFALSE 10393
10276: GO 10278
10278: DISABLE
10279: LD_INT 0
10281: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10282: LD_ADDR_VAR 0 1
10286: PUSH
10287: LD_INT 22
10289: PUSH
10290: LD_OWVAR 2
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 21
10301: PUSH
10302: LD_INT 1
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: PUSH
10309: LD_INT 3
10311: PUSH
10312: LD_INT 23
10314: PUSH
10315: LD_INT 0
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: LIST
10330: PPUSH
10331: CALL_OW 69
10335: PUSH
10336: FOR_IN
10337: IFFALSE 10391
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10339: LD_VAR 0 1
10343: PPUSH
10344: CALL_OW 257
10348: PUSH
10349: LD_INT 1
10351: PUSH
10352: LD_INT 2
10354: PUSH
10355: LD_INT 3
10357: PUSH
10358: LD_INT 4
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: IN
10367: IFFALSE 10389
// SetClass ( un , rand ( 1 , 4 ) ) ;
10369: LD_VAR 0 1
10373: PPUSH
10374: LD_INT 1
10376: PPUSH
10377: LD_INT 4
10379: PPUSH
10380: CALL_OW 12
10384: PPUSH
10385: CALL_OW 336
10389: GO 10336
10391: POP
10392: POP
// end ;
10393: PPOPN 1
10395: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10396: LD_EXP 55
10400: PUSH
10401: LD_EXP 67
10405: AND
10406: IFFALSE 10485
10408: GO 10410
10410: DISABLE
10411: LD_INT 0
10413: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10414: LD_ADDR_VAR 0 1
10418: PUSH
10419: LD_INT 22
10421: PUSH
10422: LD_OWVAR 2
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: LD_INT 21
10433: PUSH
10434: LD_INT 3
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PPUSH
10445: CALL_OW 69
10449: ST_TO_ADDR
// if not tmp then
10450: LD_VAR 0 1
10454: NOT
10455: IFFALSE 10459
// exit ;
10457: GO 10485
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10459: LD_VAR 0 1
10463: PUSH
10464: LD_INT 1
10466: PPUSH
10467: LD_VAR 0 1
10471: PPUSH
10472: CALL_OW 12
10476: ARRAY
10477: PPUSH
10478: LD_INT 100
10480: PPUSH
10481: CALL_OW 234
// end ;
10485: PPOPN 1
10487: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10488: LD_EXP 55
10492: PUSH
10493: LD_EXP 69
10497: AND
10498: IFFALSE 10596
10500: GO 10502
10502: DISABLE
10503: LD_INT 0
10505: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10506: LD_ADDR_VAR 0 1
10510: PUSH
10511: LD_INT 22
10513: PUSH
10514: LD_OWVAR 2
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: LD_INT 21
10525: PUSH
10526: LD_INT 1
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: PPUSH
10537: CALL_OW 69
10541: ST_TO_ADDR
// if not tmp then
10542: LD_VAR 0 1
10546: NOT
10547: IFFALSE 10551
// exit ;
10549: GO 10596
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10551: LD_VAR 0 1
10555: PUSH
10556: LD_INT 1
10558: PPUSH
10559: LD_VAR 0 1
10563: PPUSH
10564: CALL_OW 12
10568: ARRAY
10569: PPUSH
10570: LD_INT 1
10572: PPUSH
10573: LD_INT 4
10575: PPUSH
10576: CALL_OW 12
10580: PPUSH
10581: LD_INT 3000
10583: PPUSH
10584: LD_INT 9000
10586: PPUSH
10587: CALL_OW 12
10591: PPUSH
10592: CALL_OW 492
// end ;
10596: PPOPN 1
10598: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10599: LD_EXP 55
10603: PUSH
10604: LD_EXP 70
10608: AND
10609: IFFALSE 10629
10611: GO 10613
10613: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10614: LD_INT 1
10616: PPUSH
10617: LD_OWVAR 2
10621: PPUSH
10622: LD_INT 0
10624: PPUSH
10625: CALL_OW 324
10629: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10630: LD_EXP 55
10634: PUSH
10635: LD_EXP 71
10639: AND
10640: IFFALSE 10723
10642: GO 10644
10644: DISABLE
10645: LD_INT 0
10647: PPUSH
10648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10649: LD_ADDR_VAR 0 2
10653: PUSH
10654: LD_INT 22
10656: PUSH
10657: LD_OWVAR 2
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PUSH
10666: LD_INT 21
10668: PUSH
10669: LD_INT 3
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PPUSH
10680: CALL_OW 69
10684: ST_TO_ADDR
// if not tmp then
10685: LD_VAR 0 2
10689: NOT
10690: IFFALSE 10694
// exit ;
10692: GO 10723
// for i in tmp do
10694: LD_ADDR_VAR 0 1
10698: PUSH
10699: LD_VAR 0 2
10703: PUSH
10704: FOR_IN
10705: IFFALSE 10721
// SetBLevel ( i , 10 ) ;
10707: LD_VAR 0 1
10711: PPUSH
10712: LD_INT 10
10714: PPUSH
10715: CALL_OW 241
10719: GO 10704
10721: POP
10722: POP
// end ;
10723: PPOPN 2
10725: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
10726: LD_EXP 55
10730: PUSH
10731: LD_EXP 72
10735: AND
10736: IFFALSE 10847
10738: GO 10740
10740: DISABLE
10741: LD_INT 0
10743: PPUSH
10744: PPUSH
10745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10746: LD_ADDR_VAR 0 3
10750: PUSH
10751: LD_INT 22
10753: PUSH
10754: LD_OWVAR 2
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: PUSH
10763: LD_INT 25
10765: PUSH
10766: LD_INT 1
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: PPUSH
10777: CALL_OW 69
10781: ST_TO_ADDR
// if not tmp then
10782: LD_VAR 0 3
10786: NOT
10787: IFFALSE 10791
// exit ;
10789: GO 10847
// un := tmp [ rand ( 1 , tmp ) ] ;
10791: LD_ADDR_VAR 0 2
10795: PUSH
10796: LD_VAR 0 3
10800: PUSH
10801: LD_INT 1
10803: PPUSH
10804: LD_VAR 0 3
10808: PPUSH
10809: CALL_OW 12
10813: ARRAY
10814: ST_TO_ADDR
// if Crawls ( un ) then
10815: LD_VAR 0 2
10819: PPUSH
10820: CALL_OW 318
10824: IFFALSE 10835
// ComWalk ( un ) ;
10826: LD_VAR 0 2
10830: PPUSH
10831: CALL_OW 138
// SetClass ( un , class_sniper ) ;
10835: LD_VAR 0 2
10839: PPUSH
10840: LD_INT 5
10842: PPUSH
10843: CALL_OW 336
// end ;
10847: PPOPN 3
10849: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
10850: LD_EXP 55
10854: PUSH
10855: LD_EXP 73
10859: AND
10860: PUSH
10861: LD_OWVAR 67
10865: PUSH
10866: LD_INT 3
10868: LESS
10869: AND
10870: IFFALSE 10889
10872: GO 10874
10874: DISABLE
// Difficulty := Difficulty + 1 ;
10875: LD_ADDR_OWVAR 67
10879: PUSH
10880: LD_OWVAR 67
10884: PUSH
10885: LD_INT 1
10887: PLUS
10888: ST_TO_ADDR
10889: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
10890: LD_EXP 55
10894: PUSH
10895: LD_EXP 74
10899: AND
10900: IFFALSE 11003
10902: GO 10904
10904: DISABLE
10905: LD_INT 0
10907: PPUSH
// begin for i := 1 to 5 do
10908: LD_ADDR_VAR 0 1
10912: PUSH
10913: DOUBLE
10914: LD_INT 1
10916: DEC
10917: ST_TO_ADDR
10918: LD_INT 5
10920: PUSH
10921: FOR_TO
10922: IFFALSE 11001
// begin uc_nation := nation_nature ;
10924: LD_ADDR_OWVAR 21
10928: PUSH
10929: LD_INT 0
10931: ST_TO_ADDR
// uc_side := 0 ;
10932: LD_ADDR_OWVAR 20
10936: PUSH
10937: LD_INT 0
10939: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10940: LD_ADDR_OWVAR 29
10944: PUSH
10945: LD_INT 12
10947: PUSH
10948: LD_INT 12
10950: PUSH
10951: EMPTY
10952: LIST
10953: LIST
10954: ST_TO_ADDR
// hc_agressivity := 20 ;
10955: LD_ADDR_OWVAR 35
10959: PUSH
10960: LD_INT 20
10962: ST_TO_ADDR
// hc_class := class_tiger ;
10963: LD_ADDR_OWVAR 28
10967: PUSH
10968: LD_INT 14
10970: ST_TO_ADDR
// hc_gallery :=  ;
10971: LD_ADDR_OWVAR 33
10975: PUSH
10976: LD_STRING 
10978: ST_TO_ADDR
// hc_name :=  ;
10979: LD_ADDR_OWVAR 26
10983: PUSH
10984: LD_STRING 
10986: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
10987: CALL_OW 44
10991: PPUSH
10992: LD_INT 0
10994: PPUSH
10995: CALL_OW 51
// end ;
10999: GO 10921
11001: POP
11002: POP
// end ;
11003: PPOPN 1
11005: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11006: LD_EXP 55
11010: PUSH
11011: LD_EXP 75
11015: AND
11016: IFFALSE 11025
11018: GO 11020
11020: DISABLE
// StreamSibBomb ;
11021: CALL 11026 0 0
11025: END
// export function StreamSibBomb ; var i , x , y ; begin
11026: LD_INT 0
11028: PPUSH
11029: PPUSH
11030: PPUSH
11031: PPUSH
// result := false ;
11032: LD_ADDR_VAR 0 1
11036: PUSH
11037: LD_INT 0
11039: ST_TO_ADDR
// for i := 1 to 16 do
11040: LD_ADDR_VAR 0 2
11044: PUSH
11045: DOUBLE
11046: LD_INT 1
11048: DEC
11049: ST_TO_ADDR
11050: LD_INT 16
11052: PUSH
11053: FOR_TO
11054: IFFALSE 11253
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11056: LD_ADDR_VAR 0 3
11060: PUSH
11061: LD_INT 10
11063: PUSH
11064: LD_INT 20
11066: PUSH
11067: LD_INT 30
11069: PUSH
11070: LD_INT 40
11072: PUSH
11073: LD_INT 50
11075: PUSH
11076: LD_INT 60
11078: PUSH
11079: LD_INT 70
11081: PUSH
11082: LD_INT 80
11084: PUSH
11085: LD_INT 90
11087: PUSH
11088: LD_INT 100
11090: PUSH
11091: LD_INT 110
11093: PUSH
11094: LD_INT 120
11096: PUSH
11097: LD_INT 130
11099: PUSH
11100: LD_INT 140
11102: PUSH
11103: LD_INT 150
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: PUSH
11123: LD_INT 1
11125: PPUSH
11126: LD_INT 15
11128: PPUSH
11129: CALL_OW 12
11133: ARRAY
11134: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11135: LD_ADDR_VAR 0 4
11139: PUSH
11140: LD_INT 10
11142: PUSH
11143: LD_INT 20
11145: PUSH
11146: LD_INT 30
11148: PUSH
11149: LD_INT 40
11151: PUSH
11152: LD_INT 50
11154: PUSH
11155: LD_INT 60
11157: PUSH
11158: LD_INT 70
11160: PUSH
11161: LD_INT 80
11163: PUSH
11164: LD_INT 90
11166: PUSH
11167: LD_INT 100
11169: PUSH
11170: LD_INT 110
11172: PUSH
11173: LD_INT 120
11175: PUSH
11176: LD_INT 130
11178: PUSH
11179: LD_INT 140
11181: PUSH
11182: LD_INT 150
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: PUSH
11202: LD_INT 1
11204: PPUSH
11205: LD_INT 15
11207: PPUSH
11208: CALL_OW 12
11212: ARRAY
11213: ST_TO_ADDR
// if ValidHex ( x , y ) then
11214: LD_VAR 0 3
11218: PPUSH
11219: LD_VAR 0 4
11223: PPUSH
11224: CALL_OW 488
11228: IFFALSE 11251
// begin result := [ x , y ] ;
11230: LD_ADDR_VAR 0 1
11234: PUSH
11235: LD_VAR 0 3
11239: PUSH
11240: LD_VAR 0 4
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: ST_TO_ADDR
// break ;
11249: GO 11253
// end ; end ;
11251: GO 11053
11253: POP
11254: POP
// if result then
11255: LD_VAR 0 1
11259: IFFALSE 11319
// begin ToLua ( playSibBomb() ) ;
11261: LD_STRING playSibBomb()
11263: PPUSH
11264: CALL_OW 559
// wait ( 0 0$14 ) ;
11268: LD_INT 490
11270: PPUSH
11271: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11275: LD_VAR 0 1
11279: PUSH
11280: LD_INT 1
11282: ARRAY
11283: PPUSH
11284: LD_VAR 0 1
11288: PUSH
11289: LD_INT 2
11291: ARRAY
11292: PPUSH
11293: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11297: LD_VAR 0 1
11301: PUSH
11302: LD_INT 1
11304: ARRAY
11305: PPUSH
11306: LD_VAR 0 1
11310: PUSH
11311: LD_INT 2
11313: ARRAY
11314: PPUSH
11315: CALL_OW 429
// end ; end ;
11319: LD_VAR 0 1
11323: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11324: LD_EXP 55
11328: PUSH
11329: LD_EXP 77
11333: AND
11334: IFFALSE 11346
11336: GO 11338
11338: DISABLE
// YouLost (  ) ;
11339: LD_STRING 
11341: PPUSH
11342: CALL_OW 104
11346: END
// every 0 0$1 trigger StreamModeActive and sFog do
11347: LD_EXP 55
11351: PUSH
11352: LD_EXP 76
11356: AND
11357: IFFALSE 11371
11359: GO 11361
11361: DISABLE
// FogOff ( your_side ) ;
11362: LD_OWVAR 2
11366: PPUSH
11367: CALL_OW 344
11371: END
// every 0 0$1 trigger StreamModeActive and sSun do
11372: LD_EXP 55
11376: PUSH
11377: LD_EXP 78
11381: AND
11382: IFFALSE 11410
11384: GO 11386
11386: DISABLE
// begin solar_recharge_percent := 0 ;
11387: LD_ADDR_OWVAR 79
11391: PUSH
11392: LD_INT 0
11394: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11395: LD_INT 10500
11397: PPUSH
11398: CALL_OW 67
// solar_recharge_percent := 100 ;
11402: LD_ADDR_OWVAR 79
11406: PUSH
11407: LD_INT 100
11409: ST_TO_ADDR
// end ;
11410: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11411: LD_EXP 55
11415: PUSH
11416: LD_EXP 79
11420: AND
11421: IFFALSE 11660
11423: GO 11425
11425: DISABLE
11426: LD_INT 0
11428: PPUSH
11429: PPUSH
11430: PPUSH
// begin tmp := [ ] ;
11431: LD_ADDR_VAR 0 3
11435: PUSH
11436: EMPTY
11437: ST_TO_ADDR
// for i := 1 to 6 do
11438: LD_ADDR_VAR 0 1
11442: PUSH
11443: DOUBLE
11444: LD_INT 1
11446: DEC
11447: ST_TO_ADDR
11448: LD_INT 6
11450: PUSH
11451: FOR_TO
11452: IFFALSE 11557
// begin uc_nation := nation_nature ;
11454: LD_ADDR_OWVAR 21
11458: PUSH
11459: LD_INT 0
11461: ST_TO_ADDR
// uc_side := 0 ;
11462: LD_ADDR_OWVAR 20
11466: PUSH
11467: LD_INT 0
11469: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11470: LD_ADDR_OWVAR 29
11474: PUSH
11475: LD_INT 12
11477: PUSH
11478: LD_INT 12
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: ST_TO_ADDR
// hc_agressivity := 20 ;
11485: LD_ADDR_OWVAR 35
11489: PUSH
11490: LD_INT 20
11492: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11493: LD_ADDR_OWVAR 28
11497: PUSH
11498: LD_INT 17
11500: ST_TO_ADDR
// hc_gallery :=  ;
11501: LD_ADDR_OWVAR 33
11505: PUSH
11506: LD_STRING 
11508: ST_TO_ADDR
// hc_name :=  ;
11509: LD_ADDR_OWVAR 26
11513: PUSH
11514: LD_STRING 
11516: ST_TO_ADDR
// un := CreateHuman ;
11517: LD_ADDR_VAR 0 2
11521: PUSH
11522: CALL_OW 44
11526: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11527: LD_VAR 0 2
11531: PPUSH
11532: LD_INT 1
11534: PPUSH
11535: CALL_OW 51
// tmp := tmp ^ un ;
11539: LD_ADDR_VAR 0 3
11543: PUSH
11544: LD_VAR 0 3
11548: PUSH
11549: LD_VAR 0 2
11553: ADD
11554: ST_TO_ADDR
// end ;
11555: GO 11451
11557: POP
11558: POP
// repeat wait ( 0 0$1 ) ;
11559: LD_INT 35
11561: PPUSH
11562: CALL_OW 67
// for un in tmp do
11566: LD_ADDR_VAR 0 2
11570: PUSH
11571: LD_VAR 0 3
11575: PUSH
11576: FOR_IN
11577: IFFALSE 11651
// begin if IsDead ( un ) then
11579: LD_VAR 0 2
11583: PPUSH
11584: CALL_OW 301
11588: IFFALSE 11608
// begin tmp := tmp diff un ;
11590: LD_ADDR_VAR 0 3
11594: PUSH
11595: LD_VAR 0 3
11599: PUSH
11600: LD_VAR 0 2
11604: DIFF
11605: ST_TO_ADDR
// continue ;
11606: GO 11576
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11608: LD_VAR 0 2
11612: PPUSH
11613: LD_INT 3
11615: PUSH
11616: LD_INT 22
11618: PUSH
11619: LD_INT 0
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PPUSH
11630: CALL_OW 69
11634: PPUSH
11635: LD_VAR 0 2
11639: PPUSH
11640: CALL_OW 74
11644: PPUSH
11645: CALL_OW 115
// end ;
11649: GO 11576
11651: POP
11652: POP
// until not tmp ;
11653: LD_VAR 0 3
11657: NOT
11658: IFFALSE 11559
// end ;
11660: PPOPN 3
11662: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11663: LD_EXP 55
11667: PUSH
11668: LD_EXP 80
11672: AND
11673: IFFALSE 11727
11675: GO 11677
11677: DISABLE
// begin ToLua ( displayTroll(); ) ;
11678: LD_STRING displayTroll();
11680: PPUSH
11681: CALL_OW 559
// wait ( 3 3$00 ) ;
11685: LD_INT 6300
11687: PPUSH
11688: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11692: LD_STRING hideTroll();
11694: PPUSH
11695: CALL_OW 559
// wait ( 1 1$00 ) ;
11699: LD_INT 2100
11701: PPUSH
11702: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11706: LD_STRING displayTroll();
11708: PPUSH
11709: CALL_OW 559
// wait ( 1 1$00 ) ;
11713: LD_INT 2100
11715: PPUSH
11716: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11720: LD_STRING hideTroll();
11722: PPUSH
11723: CALL_OW 559
// end ;
11727: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
11728: LD_EXP 55
11732: PUSH
11733: LD_EXP 81
11737: AND
11738: IFFALSE 11801
11740: GO 11742
11742: DISABLE
11743: LD_INT 0
11745: PPUSH
// begin p := 0 ;
11746: LD_ADDR_VAR 0 1
11750: PUSH
11751: LD_INT 0
11753: ST_TO_ADDR
// repeat game_speed := 1 ;
11754: LD_ADDR_OWVAR 65
11758: PUSH
11759: LD_INT 1
11761: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11762: LD_INT 35
11764: PPUSH
11765: CALL_OW 67
// p := p + 1 ;
11769: LD_ADDR_VAR 0 1
11773: PUSH
11774: LD_VAR 0 1
11778: PUSH
11779: LD_INT 1
11781: PLUS
11782: ST_TO_ADDR
// until p >= 60 ;
11783: LD_VAR 0 1
11787: PUSH
11788: LD_INT 60
11790: GREATEREQUAL
11791: IFFALSE 11754
// game_speed := 4 ;
11793: LD_ADDR_OWVAR 65
11797: PUSH
11798: LD_INT 4
11800: ST_TO_ADDR
// end ;
11801: PPOPN 1
11803: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
11804: LD_EXP 55
11808: PUSH
11809: LD_EXP 82
11813: AND
11814: IFFALSE 11960
11816: GO 11818
11818: DISABLE
11819: LD_INT 0
11821: PPUSH
11822: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11823: LD_ADDR_VAR 0 1
11827: PUSH
11828: LD_INT 22
11830: PUSH
11831: LD_OWVAR 2
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: PUSH
11840: LD_INT 2
11842: PUSH
11843: LD_INT 30
11845: PUSH
11846: LD_INT 0
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: PUSH
11853: LD_INT 30
11855: PUSH
11856: LD_INT 1
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: LIST
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PPUSH
11872: CALL_OW 69
11876: ST_TO_ADDR
// if not depot then
11877: LD_VAR 0 1
11881: NOT
11882: IFFALSE 11886
// exit ;
11884: GO 11960
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
11886: LD_ADDR_VAR 0 2
11890: PUSH
11891: LD_VAR 0 1
11895: PUSH
11896: LD_INT 1
11898: PPUSH
11899: LD_VAR 0 1
11903: PPUSH
11904: CALL_OW 12
11908: ARRAY
11909: PPUSH
11910: CALL_OW 274
11914: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
11915: LD_VAR 0 2
11919: PPUSH
11920: LD_INT 1
11922: PPUSH
11923: LD_INT 0
11925: PPUSH
11926: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
11930: LD_VAR 0 2
11934: PPUSH
11935: LD_INT 2
11937: PPUSH
11938: LD_INT 0
11940: PPUSH
11941: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
11945: LD_VAR 0 2
11949: PPUSH
11950: LD_INT 3
11952: PPUSH
11953: LD_INT 0
11955: PPUSH
11956: CALL_OW 277
// end ;
11960: PPOPN 2
11962: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
11963: LD_EXP 55
11967: PUSH
11968: LD_EXP 83
11972: AND
11973: IFFALSE 12070
11975: GO 11977
11977: DISABLE
11978: LD_INT 0
11980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11981: LD_ADDR_VAR 0 1
11985: PUSH
11986: LD_INT 22
11988: PUSH
11989: LD_OWVAR 2
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: PUSH
11998: LD_INT 21
12000: PUSH
12001: LD_INT 1
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PUSH
12008: LD_INT 3
12010: PUSH
12011: LD_INT 23
12013: PUSH
12014: LD_INT 0
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: LIST
12029: PPUSH
12030: CALL_OW 69
12034: ST_TO_ADDR
// if not tmp then
12035: LD_VAR 0 1
12039: NOT
12040: IFFALSE 12044
// exit ;
12042: GO 12070
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12044: LD_VAR 0 1
12048: PUSH
12049: LD_INT 1
12051: PPUSH
12052: LD_VAR 0 1
12056: PPUSH
12057: CALL_OW 12
12061: ARRAY
12062: PPUSH
12063: LD_INT 200
12065: PPUSH
12066: CALL_OW 234
// end ;
12070: PPOPN 1
12072: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12073: LD_EXP 55
12077: PUSH
12078: LD_EXP 84
12082: AND
12083: IFFALSE 12162
12085: GO 12087
12087: DISABLE
12088: LD_INT 0
12090: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12091: LD_ADDR_VAR 0 1
12095: PUSH
12096: LD_INT 22
12098: PUSH
12099: LD_OWVAR 2
12103: PUSH
12104: EMPTY
12105: LIST
12106: LIST
12107: PUSH
12108: LD_INT 21
12110: PUSH
12111: LD_INT 2
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PPUSH
12122: CALL_OW 69
12126: ST_TO_ADDR
// if not tmp then
12127: LD_VAR 0 1
12131: NOT
12132: IFFALSE 12136
// exit ;
12134: GO 12162
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12136: LD_VAR 0 1
12140: PUSH
12141: LD_INT 1
12143: PPUSH
12144: LD_VAR 0 1
12148: PPUSH
12149: CALL_OW 12
12153: ARRAY
12154: PPUSH
12155: LD_INT 60
12157: PPUSH
12158: CALL_OW 234
// end ;
12162: PPOPN 1
12164: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12165: LD_EXP 55
12169: PUSH
12170: LD_EXP 85
12174: AND
12175: IFFALSE 12274
12177: GO 12179
12179: DISABLE
12180: LD_INT 0
12182: PPUSH
12183: PPUSH
// begin enable ;
12184: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12185: LD_ADDR_VAR 0 1
12189: PUSH
12190: LD_INT 22
12192: PUSH
12193: LD_OWVAR 2
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PUSH
12202: LD_INT 61
12204: PUSH
12205: EMPTY
12206: LIST
12207: PUSH
12208: LD_INT 33
12210: PUSH
12211: LD_INT 2
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: LIST
12222: PPUSH
12223: CALL_OW 69
12227: ST_TO_ADDR
// if not tmp then
12228: LD_VAR 0 1
12232: NOT
12233: IFFALSE 12237
// exit ;
12235: GO 12274
// for i in tmp do
12237: LD_ADDR_VAR 0 2
12241: PUSH
12242: LD_VAR 0 1
12246: PUSH
12247: FOR_IN
12248: IFFALSE 12272
// if IsControledBy ( i ) then
12250: LD_VAR 0 2
12254: PPUSH
12255: CALL_OW 312
12259: IFFALSE 12270
// ComUnlink ( i ) ;
12261: LD_VAR 0 2
12265: PPUSH
12266: CALL_OW 136
12270: GO 12247
12272: POP
12273: POP
// end ;
12274: PPOPN 2
12276: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12277: LD_EXP 55
12281: PUSH
12282: LD_EXP 86
12286: AND
12287: IFFALSE 12427
12289: GO 12291
12291: DISABLE
12292: LD_INT 0
12294: PPUSH
12295: PPUSH
// begin ToLua ( displayPowell(); ) ;
12296: LD_STRING displayPowell();
12298: PPUSH
12299: CALL_OW 559
// uc_side := 0 ;
12303: LD_ADDR_OWVAR 20
12307: PUSH
12308: LD_INT 0
12310: ST_TO_ADDR
// uc_nation := 2 ;
12311: LD_ADDR_OWVAR 21
12315: PUSH
12316: LD_INT 2
12318: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12319: LD_ADDR_OWVAR 37
12323: PUSH
12324: LD_INT 14
12326: ST_TO_ADDR
// vc_engine := engine_siberite ;
12327: LD_ADDR_OWVAR 39
12331: PUSH
12332: LD_INT 3
12334: ST_TO_ADDR
// vc_control := control_apeman ;
12335: LD_ADDR_OWVAR 38
12339: PUSH
12340: LD_INT 5
12342: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12343: LD_ADDR_OWVAR 40
12347: PUSH
12348: LD_INT 29
12350: ST_TO_ADDR
// un := CreateVehicle ;
12351: LD_ADDR_VAR 0 2
12355: PUSH
12356: CALL_OW 45
12360: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12361: LD_VAR 0 2
12365: PPUSH
12366: LD_INT 1
12368: PPUSH
12369: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12373: LD_INT 35
12375: PPUSH
12376: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12380: LD_VAR 0 2
12384: PPUSH
12385: LD_INT 22
12387: PUSH
12388: LD_OWVAR 2
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PPUSH
12397: CALL_OW 69
12401: PPUSH
12402: LD_VAR 0 2
12406: PPUSH
12407: CALL_OW 74
12411: PPUSH
12412: CALL_OW 115
// until IsDead ( un ) ;
12416: LD_VAR 0 2
12420: PPUSH
12421: CALL_OW 301
12425: IFFALSE 12373
// end ;
12427: PPOPN 2
12429: END
// every 0 0$1 trigger StreamModeActive and sStu do
12430: LD_EXP 55
12434: PUSH
12435: LD_EXP 94
12439: AND
12440: IFFALSE 12456
12442: GO 12444
12444: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12445: LD_STRING displayStucuk();
12447: PPUSH
12448: CALL_OW 559
// ResetFog ;
12452: CALL_OW 335
// end ;
12456: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12457: LD_EXP 55
12461: PUSH
12462: LD_EXP 87
12466: AND
12467: IFFALSE 12608
12469: GO 12471
12471: DISABLE
12472: LD_INT 0
12474: PPUSH
12475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12476: LD_ADDR_VAR 0 2
12480: PUSH
12481: LD_INT 22
12483: PUSH
12484: LD_OWVAR 2
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PUSH
12493: LD_INT 21
12495: PUSH
12496: LD_INT 1
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: PPUSH
12507: CALL_OW 69
12511: ST_TO_ADDR
// if not tmp then
12512: LD_VAR 0 2
12516: NOT
12517: IFFALSE 12521
// exit ;
12519: GO 12608
// un := tmp [ rand ( 1 , tmp ) ] ;
12521: LD_ADDR_VAR 0 1
12525: PUSH
12526: LD_VAR 0 2
12530: PUSH
12531: LD_INT 1
12533: PPUSH
12534: LD_VAR 0 2
12538: PPUSH
12539: CALL_OW 12
12543: ARRAY
12544: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12545: LD_VAR 0 1
12549: PPUSH
12550: LD_INT 0
12552: PPUSH
12553: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12557: LD_VAR 0 1
12561: PPUSH
12562: LD_OWVAR 3
12566: PUSH
12567: LD_VAR 0 1
12571: DIFF
12572: PPUSH
12573: LD_VAR 0 1
12577: PPUSH
12578: CALL_OW 74
12582: PPUSH
12583: CALL_OW 115
// wait ( 0 0$20 ) ;
12587: LD_INT 700
12589: PPUSH
12590: CALL_OW 67
// SetSide ( un , your_side ) ;
12594: LD_VAR 0 1
12598: PPUSH
12599: LD_OWVAR 2
12603: PPUSH
12604: CALL_OW 235
// end ;
12608: PPOPN 2
12610: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12611: LD_EXP 55
12615: PUSH
12616: LD_EXP 88
12620: AND
12621: IFFALSE 12727
12623: GO 12625
12625: DISABLE
12626: LD_INT 0
12628: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12629: LD_ADDR_VAR 0 1
12633: PUSH
12634: LD_INT 22
12636: PUSH
12637: LD_OWVAR 2
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: PUSH
12646: LD_INT 2
12648: PUSH
12649: LD_INT 30
12651: PUSH
12652: LD_INT 0
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: PUSH
12659: LD_INT 30
12661: PUSH
12662: LD_INT 1
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: LIST
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: PPUSH
12678: CALL_OW 69
12682: ST_TO_ADDR
// if not depot then
12683: LD_VAR 0 1
12687: NOT
12688: IFFALSE 12692
// exit ;
12690: GO 12727
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
12692: LD_VAR 0 1
12696: PUSH
12697: LD_INT 1
12699: ARRAY
12700: PPUSH
12701: CALL_OW 250
12705: PPUSH
12706: LD_VAR 0 1
12710: PUSH
12711: LD_INT 1
12713: ARRAY
12714: PPUSH
12715: CALL_OW 251
12719: PPUSH
12720: LD_INT 70
12722: PPUSH
12723: CALL_OW 495
// end ;
12727: PPOPN 1
12729: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
12730: LD_EXP 55
12734: PUSH
12735: LD_EXP 89
12739: AND
12740: IFFALSE 12951
12742: GO 12744
12744: DISABLE
12745: LD_INT 0
12747: PPUSH
12748: PPUSH
12749: PPUSH
12750: PPUSH
12751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12752: LD_ADDR_VAR 0 5
12756: PUSH
12757: LD_INT 22
12759: PUSH
12760: LD_OWVAR 2
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PUSH
12769: LD_INT 21
12771: PUSH
12772: LD_INT 1
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PPUSH
12783: CALL_OW 69
12787: ST_TO_ADDR
// if not tmp then
12788: LD_VAR 0 5
12792: NOT
12793: IFFALSE 12797
// exit ;
12795: GO 12951
// for i in tmp do
12797: LD_ADDR_VAR 0 1
12801: PUSH
12802: LD_VAR 0 5
12806: PUSH
12807: FOR_IN
12808: IFFALSE 12949
// begin d := rand ( 0 , 5 ) ;
12810: LD_ADDR_VAR 0 4
12814: PUSH
12815: LD_INT 0
12817: PPUSH
12818: LD_INT 5
12820: PPUSH
12821: CALL_OW 12
12825: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
12826: LD_ADDR_VAR 0 2
12830: PUSH
12831: LD_VAR 0 1
12835: PPUSH
12836: CALL_OW 250
12840: PPUSH
12841: LD_VAR 0 4
12845: PPUSH
12846: LD_INT 3
12848: PPUSH
12849: LD_INT 12
12851: PPUSH
12852: CALL_OW 12
12856: PPUSH
12857: CALL_OW 272
12861: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
12862: LD_ADDR_VAR 0 3
12866: PUSH
12867: LD_VAR 0 1
12871: PPUSH
12872: CALL_OW 251
12876: PPUSH
12877: LD_VAR 0 4
12881: PPUSH
12882: LD_INT 3
12884: PPUSH
12885: LD_INT 12
12887: PPUSH
12888: CALL_OW 12
12892: PPUSH
12893: CALL_OW 273
12897: ST_TO_ADDR
// if ValidHex ( x , y ) then
12898: LD_VAR 0 2
12902: PPUSH
12903: LD_VAR 0 3
12907: PPUSH
12908: CALL_OW 488
12912: IFFALSE 12947
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
12914: LD_VAR 0 1
12918: PPUSH
12919: LD_VAR 0 2
12923: PPUSH
12924: LD_VAR 0 3
12928: PPUSH
12929: LD_INT 3
12931: PPUSH
12932: LD_INT 6
12934: PPUSH
12935: CALL_OW 12
12939: PPUSH
12940: LD_INT 1
12942: PPUSH
12943: CALL_OW 483
// end ;
12947: GO 12807
12949: POP
12950: POP
// end ;
12951: PPOPN 5
12953: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
12954: LD_EXP 55
12958: PUSH
12959: LD_EXP 90
12963: AND
12964: IFFALSE 13058
12966: GO 12968
12968: DISABLE
12969: LD_INT 0
12971: PPUSH
12972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
12973: LD_ADDR_VAR 0 2
12977: PUSH
12978: LD_INT 22
12980: PUSH
12981: LD_OWVAR 2
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PUSH
12990: LD_INT 32
12992: PUSH
12993: LD_INT 1
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: PUSH
13000: LD_INT 21
13002: PUSH
13003: LD_INT 2
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: PPUSH
13015: CALL_OW 69
13019: ST_TO_ADDR
// if not tmp then
13020: LD_VAR 0 2
13024: NOT
13025: IFFALSE 13029
// exit ;
13027: GO 13058
// for i in tmp do
13029: LD_ADDR_VAR 0 1
13033: PUSH
13034: LD_VAR 0 2
13038: PUSH
13039: FOR_IN
13040: IFFALSE 13056
// SetFuel ( i , 0 ) ;
13042: LD_VAR 0 1
13046: PPUSH
13047: LD_INT 0
13049: PPUSH
13050: CALL_OW 240
13054: GO 13039
13056: POP
13057: POP
// end ;
13058: PPOPN 2
13060: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13061: LD_EXP 55
13065: PUSH
13066: LD_EXP 91
13070: AND
13071: IFFALSE 13137
13073: GO 13075
13075: DISABLE
13076: LD_INT 0
13078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13079: LD_ADDR_VAR 0 1
13083: PUSH
13084: LD_INT 22
13086: PUSH
13087: LD_OWVAR 2
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: PUSH
13096: LD_INT 30
13098: PUSH
13099: LD_INT 29
13101: PUSH
13102: EMPTY
13103: LIST
13104: LIST
13105: PUSH
13106: EMPTY
13107: LIST
13108: LIST
13109: PPUSH
13110: CALL_OW 69
13114: ST_TO_ADDR
// if not tmp then
13115: LD_VAR 0 1
13119: NOT
13120: IFFALSE 13124
// exit ;
13122: GO 13137
// DestroyUnit ( tmp [ 1 ] ) ;
13124: LD_VAR 0 1
13128: PUSH
13129: LD_INT 1
13131: ARRAY
13132: PPUSH
13133: CALL_OW 65
// end ;
13137: PPOPN 1
13139: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13140: LD_EXP 55
13144: PUSH
13145: LD_EXP 93
13149: AND
13150: IFFALSE 13279
13152: GO 13154
13154: DISABLE
13155: LD_INT 0
13157: PPUSH
// begin uc_side := 0 ;
13158: LD_ADDR_OWVAR 20
13162: PUSH
13163: LD_INT 0
13165: ST_TO_ADDR
// uc_nation := nation_arabian ;
13166: LD_ADDR_OWVAR 21
13170: PUSH
13171: LD_INT 2
13173: ST_TO_ADDR
// hc_gallery :=  ;
13174: LD_ADDR_OWVAR 33
13178: PUSH
13179: LD_STRING 
13181: ST_TO_ADDR
// hc_name :=  ;
13182: LD_ADDR_OWVAR 26
13186: PUSH
13187: LD_STRING 
13189: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13190: LD_INT 1
13192: PPUSH
13193: LD_INT 11
13195: PPUSH
13196: LD_INT 10
13198: PPUSH
13199: CALL_OW 380
// un := CreateHuman ;
13203: LD_ADDR_VAR 0 1
13207: PUSH
13208: CALL_OW 44
13212: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13213: LD_VAR 0 1
13217: PPUSH
13218: LD_INT 1
13220: PPUSH
13221: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13225: LD_INT 35
13227: PPUSH
13228: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13232: LD_VAR 0 1
13236: PPUSH
13237: LD_INT 22
13239: PUSH
13240: LD_OWVAR 2
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: PPUSH
13249: CALL_OW 69
13253: PPUSH
13254: LD_VAR 0 1
13258: PPUSH
13259: CALL_OW 74
13263: PPUSH
13264: CALL_OW 115
// until IsDead ( un ) ;
13268: LD_VAR 0 1
13272: PPUSH
13273: CALL_OW 301
13277: IFFALSE 13225
// end ;
13279: PPOPN 1
13281: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13282: LD_EXP 55
13286: PUSH
13287: LD_EXP 95
13291: AND
13292: IFFALSE 13304
13294: GO 13296
13296: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13297: LD_STRING earthquake(getX(game), 0, 32)
13299: PPUSH
13300: CALL_OW 559
13304: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13305: LD_EXP 55
13309: PUSH
13310: LD_EXP 96
13314: AND
13315: IFFALSE 13406
13317: GO 13319
13319: DISABLE
13320: LD_INT 0
13322: PPUSH
// begin enable ;
13323: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13324: LD_ADDR_VAR 0 1
13328: PUSH
13329: LD_INT 22
13331: PUSH
13332: LD_OWVAR 2
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: PUSH
13341: LD_INT 21
13343: PUSH
13344: LD_INT 2
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: PUSH
13351: LD_INT 33
13353: PUSH
13354: LD_INT 3
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: LIST
13365: PPUSH
13366: CALL_OW 69
13370: ST_TO_ADDR
// if not tmp then
13371: LD_VAR 0 1
13375: NOT
13376: IFFALSE 13380
// exit ;
13378: GO 13406
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13380: LD_VAR 0 1
13384: PUSH
13385: LD_INT 1
13387: PPUSH
13388: LD_VAR 0 1
13392: PPUSH
13393: CALL_OW 12
13397: ARRAY
13398: PPUSH
13399: LD_INT 1
13401: PPUSH
13402: CALL_OW 234
// end ;
13406: PPOPN 1
13408: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13409: LD_EXP 55
13413: PUSH
13414: LD_EXP 97
13418: AND
13419: IFFALSE 13560
13421: GO 13423
13423: DISABLE
13424: LD_INT 0
13426: PPUSH
13427: PPUSH
13428: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13429: LD_ADDR_VAR 0 3
13433: PUSH
13434: LD_INT 22
13436: PUSH
13437: LD_OWVAR 2
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: LD_INT 25
13448: PUSH
13449: LD_INT 1
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PPUSH
13460: CALL_OW 69
13464: ST_TO_ADDR
// if not tmp then
13465: LD_VAR 0 3
13469: NOT
13470: IFFALSE 13474
// exit ;
13472: GO 13560
// un := tmp [ rand ( 1 , tmp ) ] ;
13474: LD_ADDR_VAR 0 2
13478: PUSH
13479: LD_VAR 0 3
13483: PUSH
13484: LD_INT 1
13486: PPUSH
13487: LD_VAR 0 3
13491: PPUSH
13492: CALL_OW 12
13496: ARRAY
13497: ST_TO_ADDR
// if Crawls ( un ) then
13498: LD_VAR 0 2
13502: PPUSH
13503: CALL_OW 318
13507: IFFALSE 13518
// ComWalk ( un ) ;
13509: LD_VAR 0 2
13513: PPUSH
13514: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13518: LD_VAR 0 2
13522: PPUSH
13523: LD_INT 9
13525: PPUSH
13526: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13530: LD_INT 28
13532: PPUSH
13533: LD_OWVAR 2
13537: PPUSH
13538: LD_INT 2
13540: PPUSH
13541: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13545: LD_INT 29
13547: PPUSH
13548: LD_OWVAR 2
13552: PPUSH
13553: LD_INT 2
13555: PPUSH
13556: CALL_OW 322
// end ;
13560: PPOPN 3
13562: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13563: LD_EXP 55
13567: PUSH
13568: LD_EXP 98
13572: AND
13573: IFFALSE 13684
13575: GO 13577
13577: DISABLE
13578: LD_INT 0
13580: PPUSH
13581: PPUSH
13582: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13583: LD_ADDR_VAR 0 3
13587: PUSH
13588: LD_INT 22
13590: PUSH
13591: LD_OWVAR 2
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: LD_INT 25
13602: PUSH
13603: LD_INT 1
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PPUSH
13614: CALL_OW 69
13618: ST_TO_ADDR
// if not tmp then
13619: LD_VAR 0 3
13623: NOT
13624: IFFALSE 13628
// exit ;
13626: GO 13684
// un := tmp [ rand ( 1 , tmp ) ] ;
13628: LD_ADDR_VAR 0 2
13632: PUSH
13633: LD_VAR 0 3
13637: PUSH
13638: LD_INT 1
13640: PPUSH
13641: LD_VAR 0 3
13645: PPUSH
13646: CALL_OW 12
13650: ARRAY
13651: ST_TO_ADDR
// if Crawls ( un ) then
13652: LD_VAR 0 2
13656: PPUSH
13657: CALL_OW 318
13661: IFFALSE 13672
// ComWalk ( un ) ;
13663: LD_VAR 0 2
13667: PPUSH
13668: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13672: LD_VAR 0 2
13676: PPUSH
13677: LD_INT 8
13679: PPUSH
13680: CALL_OW 336
// end ;
13684: PPOPN 3
13686: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
13687: LD_EXP 55
13691: PUSH
13692: LD_EXP 99
13696: AND
13697: IFFALSE 13841
13699: GO 13701
13701: DISABLE
13702: LD_INT 0
13704: PPUSH
13705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13706: LD_ADDR_VAR 0 2
13710: PUSH
13711: LD_INT 22
13713: PUSH
13714: LD_OWVAR 2
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PUSH
13723: LD_INT 21
13725: PUSH
13726: LD_INT 2
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PUSH
13733: LD_INT 2
13735: PUSH
13736: LD_INT 34
13738: PUSH
13739: LD_INT 12
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PUSH
13746: LD_INT 34
13748: PUSH
13749: LD_INT 51
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: PUSH
13756: LD_INT 34
13758: PUSH
13759: LD_INT 32
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: LIST
13776: PPUSH
13777: CALL_OW 69
13781: ST_TO_ADDR
// if not tmp then
13782: LD_VAR 0 2
13786: NOT
13787: IFFALSE 13791
// exit ;
13789: GO 13841
// for i in tmp do
13791: LD_ADDR_VAR 0 1
13795: PUSH
13796: LD_VAR 0 2
13800: PUSH
13801: FOR_IN
13802: IFFALSE 13839
// if GetCargo ( i , mat_artifact ) = 0 then
13804: LD_VAR 0 1
13808: PPUSH
13809: LD_INT 4
13811: PPUSH
13812: CALL_OW 289
13816: PUSH
13817: LD_INT 0
13819: EQUAL
13820: IFFALSE 13837
// SetCargo ( i , mat_siberit , 100 ) ;
13822: LD_VAR 0 1
13826: PPUSH
13827: LD_INT 3
13829: PPUSH
13830: LD_INT 100
13832: PPUSH
13833: CALL_OW 290
13837: GO 13801
13839: POP
13840: POP
// end ;
13841: PPOPN 2
13843: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
13844: LD_EXP 55
13848: PUSH
13849: LD_EXP 100
13853: AND
13854: IFFALSE 14037
13856: GO 13858
13858: DISABLE
13859: LD_INT 0
13861: PPUSH
13862: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13863: LD_ADDR_VAR 0 2
13867: PUSH
13868: LD_INT 22
13870: PUSH
13871: LD_OWVAR 2
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: PPUSH
13880: CALL_OW 69
13884: ST_TO_ADDR
// if not tmp then
13885: LD_VAR 0 2
13889: NOT
13890: IFFALSE 13894
// exit ;
13892: GO 14037
// for i := 1 to 2 do
13894: LD_ADDR_VAR 0 1
13898: PUSH
13899: DOUBLE
13900: LD_INT 1
13902: DEC
13903: ST_TO_ADDR
13904: LD_INT 2
13906: PUSH
13907: FOR_TO
13908: IFFALSE 14035
// begin uc_side := your_side ;
13910: LD_ADDR_OWVAR 20
13914: PUSH
13915: LD_OWVAR 2
13919: ST_TO_ADDR
// uc_nation := nation_american ;
13920: LD_ADDR_OWVAR 21
13924: PUSH
13925: LD_INT 1
13927: ST_TO_ADDR
// vc_chassis := us_morphling ;
13928: LD_ADDR_OWVAR 37
13932: PUSH
13933: LD_INT 5
13935: ST_TO_ADDR
// vc_engine := engine_siberite ;
13936: LD_ADDR_OWVAR 39
13940: PUSH
13941: LD_INT 3
13943: ST_TO_ADDR
// vc_control := control_computer ;
13944: LD_ADDR_OWVAR 38
13948: PUSH
13949: LD_INT 3
13951: ST_TO_ADDR
// vc_weapon := us_double_laser ;
13952: LD_ADDR_OWVAR 40
13956: PUSH
13957: LD_INT 10
13959: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
13960: LD_VAR 0 2
13964: PUSH
13965: LD_INT 1
13967: ARRAY
13968: PPUSH
13969: CALL_OW 310
13973: NOT
13974: IFFALSE 14021
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
13976: CALL_OW 45
13980: PPUSH
13981: LD_VAR 0 2
13985: PUSH
13986: LD_INT 1
13988: ARRAY
13989: PPUSH
13990: CALL_OW 250
13994: PPUSH
13995: LD_VAR 0 2
13999: PUSH
14000: LD_INT 1
14002: ARRAY
14003: PPUSH
14004: CALL_OW 251
14008: PPUSH
14009: LD_INT 12
14011: PPUSH
14012: LD_INT 1
14014: PPUSH
14015: CALL_OW 50
14019: GO 14033
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14021: CALL_OW 45
14025: PPUSH
14026: LD_INT 1
14028: PPUSH
14029: CALL_OW 51
// end ;
14033: GO 13907
14035: POP
14036: POP
// end ;
14037: PPOPN 2
14039: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14040: LD_EXP 55
14044: PUSH
14045: LD_EXP 101
14049: AND
14050: IFFALSE 14272
14052: GO 14054
14054: DISABLE
14055: LD_INT 0
14057: PPUSH
14058: PPUSH
14059: PPUSH
14060: PPUSH
14061: PPUSH
14062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14063: LD_ADDR_VAR 0 6
14067: PUSH
14068: LD_INT 22
14070: PUSH
14071: LD_OWVAR 2
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 21
14082: PUSH
14083: LD_INT 1
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: LD_INT 3
14092: PUSH
14093: LD_INT 23
14095: PUSH
14096: LD_INT 0
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: LIST
14111: PPUSH
14112: CALL_OW 69
14116: ST_TO_ADDR
// if not tmp then
14117: LD_VAR 0 6
14121: NOT
14122: IFFALSE 14126
// exit ;
14124: GO 14272
// s1 := rand ( 1 , 4 ) ;
14126: LD_ADDR_VAR 0 2
14130: PUSH
14131: LD_INT 1
14133: PPUSH
14134: LD_INT 4
14136: PPUSH
14137: CALL_OW 12
14141: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14142: LD_ADDR_VAR 0 4
14146: PUSH
14147: LD_VAR 0 6
14151: PUSH
14152: LD_INT 1
14154: ARRAY
14155: PPUSH
14156: LD_VAR 0 2
14160: PPUSH
14161: CALL_OW 259
14165: ST_TO_ADDR
// if s1 = 1 then
14166: LD_VAR 0 2
14170: PUSH
14171: LD_INT 1
14173: EQUAL
14174: IFFALSE 14194
// s2 := rand ( 2 , 4 ) else
14176: LD_ADDR_VAR 0 3
14180: PUSH
14181: LD_INT 2
14183: PPUSH
14184: LD_INT 4
14186: PPUSH
14187: CALL_OW 12
14191: ST_TO_ADDR
14192: GO 14202
// s2 := 1 ;
14194: LD_ADDR_VAR 0 3
14198: PUSH
14199: LD_INT 1
14201: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14202: LD_ADDR_VAR 0 5
14206: PUSH
14207: LD_VAR 0 6
14211: PUSH
14212: LD_INT 1
14214: ARRAY
14215: PPUSH
14216: LD_VAR 0 3
14220: PPUSH
14221: CALL_OW 259
14225: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14226: LD_VAR 0 6
14230: PUSH
14231: LD_INT 1
14233: ARRAY
14234: PPUSH
14235: LD_VAR 0 2
14239: PPUSH
14240: LD_VAR 0 5
14244: PPUSH
14245: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14249: LD_VAR 0 6
14253: PUSH
14254: LD_INT 1
14256: ARRAY
14257: PPUSH
14258: LD_VAR 0 3
14262: PPUSH
14263: LD_VAR 0 4
14267: PPUSH
14268: CALL_OW 237
// end ;
14272: PPOPN 6
14274: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14275: LD_EXP 55
14279: PUSH
14280: LD_EXP 102
14284: AND
14285: IFFALSE 14364
14287: GO 14289
14289: DISABLE
14290: LD_INT 0
14292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14293: LD_ADDR_VAR 0 1
14297: PUSH
14298: LD_INT 22
14300: PUSH
14301: LD_OWVAR 2
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: LD_INT 30
14312: PUSH
14313: LD_INT 3
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PPUSH
14324: CALL_OW 69
14328: ST_TO_ADDR
// if not tmp then
14329: LD_VAR 0 1
14333: NOT
14334: IFFALSE 14338
// exit ;
14336: GO 14364
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14338: LD_VAR 0 1
14342: PUSH
14343: LD_INT 1
14345: PPUSH
14346: LD_VAR 0 1
14350: PPUSH
14351: CALL_OW 12
14355: ARRAY
14356: PPUSH
14357: LD_INT 1
14359: PPUSH
14360: CALL_OW 234
// end ;
14364: PPOPN 1
14366: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14367: LD_EXP 55
14371: PUSH
14372: LD_EXP 103
14376: AND
14377: IFFALSE 14489
14379: GO 14381
14381: DISABLE
14382: LD_INT 0
14384: PPUSH
14385: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14386: LD_ADDR_VAR 0 2
14390: PUSH
14391: LD_INT 22
14393: PUSH
14394: LD_OWVAR 2
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: PUSH
14403: LD_INT 2
14405: PUSH
14406: LD_INT 30
14408: PUSH
14409: LD_INT 27
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: LD_INT 30
14418: PUSH
14419: LD_INT 26
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: LD_INT 30
14428: PUSH
14429: LD_INT 28
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PPUSH
14446: CALL_OW 69
14450: ST_TO_ADDR
// if not tmp then
14451: LD_VAR 0 2
14455: NOT
14456: IFFALSE 14460
// exit ;
14458: GO 14489
// for i in tmp do
14460: LD_ADDR_VAR 0 1
14464: PUSH
14465: LD_VAR 0 2
14469: PUSH
14470: FOR_IN
14471: IFFALSE 14487
// SetLives ( i , 1 ) ;
14473: LD_VAR 0 1
14477: PPUSH
14478: LD_INT 1
14480: PPUSH
14481: CALL_OW 234
14485: GO 14470
14487: POP
14488: POP
// end ;
14489: PPOPN 2
14491: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14492: LD_EXP 55
14496: PUSH
14497: LD_EXP 104
14501: AND
14502: IFFALSE 14776
14504: GO 14506
14506: DISABLE
14507: LD_INT 0
14509: PPUSH
14510: PPUSH
14511: PPUSH
// begin i := rand ( 1 , 7 ) ;
14512: LD_ADDR_VAR 0 1
14516: PUSH
14517: LD_INT 1
14519: PPUSH
14520: LD_INT 7
14522: PPUSH
14523: CALL_OW 12
14527: ST_TO_ADDR
// case i of 1 :
14528: LD_VAR 0 1
14532: PUSH
14533: LD_INT 1
14535: DOUBLE
14536: EQUAL
14537: IFTRUE 14541
14539: GO 14551
14541: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14542: LD_STRING earthquake(getX(game), 0, 32)
14544: PPUSH
14545: CALL_OW 559
14549: GO 14776
14551: LD_INT 2
14553: DOUBLE
14554: EQUAL
14555: IFTRUE 14559
14557: GO 14573
14559: POP
// begin ToLua ( displayStucuk(); ) ;
14560: LD_STRING displayStucuk();
14562: PPUSH
14563: CALL_OW 559
// ResetFog ;
14567: CALL_OW 335
// end ; 3 :
14571: GO 14776
14573: LD_INT 3
14575: DOUBLE
14576: EQUAL
14577: IFTRUE 14581
14579: GO 14685
14581: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14582: LD_ADDR_VAR 0 2
14586: PUSH
14587: LD_INT 22
14589: PUSH
14590: LD_OWVAR 2
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: PUSH
14599: LD_INT 25
14601: PUSH
14602: LD_INT 1
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: PPUSH
14613: CALL_OW 69
14617: ST_TO_ADDR
// if not tmp then
14618: LD_VAR 0 2
14622: NOT
14623: IFFALSE 14627
// exit ;
14625: GO 14776
// un := tmp [ rand ( 1 , tmp ) ] ;
14627: LD_ADDR_VAR 0 3
14631: PUSH
14632: LD_VAR 0 2
14636: PUSH
14637: LD_INT 1
14639: PPUSH
14640: LD_VAR 0 2
14644: PPUSH
14645: CALL_OW 12
14649: ARRAY
14650: ST_TO_ADDR
// if Crawls ( un ) then
14651: LD_VAR 0 3
14655: PPUSH
14656: CALL_OW 318
14660: IFFALSE 14671
// ComWalk ( un ) ;
14662: LD_VAR 0 3
14666: PPUSH
14667: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14671: LD_VAR 0 3
14675: PPUSH
14676: LD_INT 8
14678: PPUSH
14679: CALL_OW 336
// end ; 4 :
14683: GO 14776
14685: LD_INT 4
14687: DOUBLE
14688: EQUAL
14689: IFTRUE 14693
14691: GO 14754
14693: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14694: LD_ADDR_VAR 0 2
14698: PUSH
14699: LD_INT 22
14701: PUSH
14702: LD_OWVAR 2
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: LD_INT 30
14713: PUSH
14714: LD_INT 29
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PPUSH
14725: CALL_OW 69
14729: ST_TO_ADDR
// if not tmp then
14730: LD_VAR 0 2
14734: NOT
14735: IFFALSE 14739
// exit ;
14737: GO 14776
// DestroyUnit ( tmp [ 1 ] ) ;
14739: LD_VAR 0 2
14743: PUSH
14744: LD_INT 1
14746: ARRAY
14747: PPUSH
14748: CALL_OW 65
// end ; 5 .. 7 :
14752: GO 14776
14754: LD_INT 5
14756: DOUBLE
14757: GREATEREQUAL
14758: IFFALSE 14766
14760: LD_INT 7
14762: DOUBLE
14763: LESSEQUAL
14764: IFTRUE 14768
14766: GO 14775
14768: POP
// StreamSibBomb ; end ;
14769: CALL 11026 0 0
14773: GO 14776
14775: POP
// end ;
14776: PPOPN 3
14778: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
14779: LD_EXP 55
14783: PUSH
14784: LD_EXP 105
14788: AND
14789: IFFALSE 14945
14791: GO 14793
14793: DISABLE
14794: LD_INT 0
14796: PPUSH
14797: PPUSH
14798: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
14799: LD_ADDR_VAR 0 2
14803: PUSH
14804: LD_INT 81
14806: PUSH
14807: LD_OWVAR 2
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 2
14818: PUSH
14819: LD_INT 21
14821: PUSH
14822: LD_INT 1
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: LD_INT 21
14831: PUSH
14832: LD_INT 2
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: LIST
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: PPUSH
14848: CALL_OW 69
14852: ST_TO_ADDR
// if not tmp then
14853: LD_VAR 0 2
14857: NOT
14858: IFFALSE 14862
// exit ;
14860: GO 14945
// p := 0 ;
14862: LD_ADDR_VAR 0 3
14866: PUSH
14867: LD_INT 0
14869: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14870: LD_INT 35
14872: PPUSH
14873: CALL_OW 67
// p := p + 1 ;
14877: LD_ADDR_VAR 0 3
14881: PUSH
14882: LD_VAR 0 3
14886: PUSH
14887: LD_INT 1
14889: PLUS
14890: ST_TO_ADDR
// for i in tmp do
14891: LD_ADDR_VAR 0 1
14895: PUSH
14896: LD_VAR 0 2
14900: PUSH
14901: FOR_IN
14902: IFFALSE 14933
// if GetLives ( i ) < 1000 then
14904: LD_VAR 0 1
14908: PPUSH
14909: CALL_OW 256
14913: PUSH
14914: LD_INT 1000
14916: LESS
14917: IFFALSE 14931
// SetLives ( i , 1000 ) ;
14919: LD_VAR 0 1
14923: PPUSH
14924: LD_INT 1000
14926: PPUSH
14927: CALL_OW 234
14931: GO 14901
14933: POP
14934: POP
// until p > 20 ;
14935: LD_VAR 0 3
14939: PUSH
14940: LD_INT 20
14942: GREATER
14943: IFFALSE 14870
// end ;
14945: PPOPN 3
14947: END
// every 0 0$1 trigger StreamModeActive and sTime do
14948: LD_EXP 55
14952: PUSH
14953: LD_EXP 106
14957: AND
14958: IFFALSE 14993
14960: GO 14962
14962: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
14963: LD_INT 28
14965: PPUSH
14966: LD_OWVAR 2
14970: PPUSH
14971: LD_INT 2
14973: PPUSH
14974: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
14978: LD_INT 30
14980: PPUSH
14981: LD_OWVAR 2
14985: PPUSH
14986: LD_INT 2
14988: PPUSH
14989: CALL_OW 322
// end ;
14993: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
14994: LD_EXP 55
14998: PUSH
14999: LD_EXP 107
15003: AND
15004: IFFALSE 15125
15006: GO 15008
15008: DISABLE
15009: LD_INT 0
15011: PPUSH
15012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15013: LD_ADDR_VAR 0 2
15017: PUSH
15018: LD_INT 22
15020: PUSH
15021: LD_OWVAR 2
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: PUSH
15030: LD_INT 21
15032: PUSH
15033: LD_INT 1
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: PUSH
15040: LD_INT 3
15042: PUSH
15043: LD_INT 23
15045: PUSH
15046: LD_INT 0
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: LIST
15061: PPUSH
15062: CALL_OW 69
15066: ST_TO_ADDR
// if not tmp then
15067: LD_VAR 0 2
15071: NOT
15072: IFFALSE 15076
// exit ;
15074: GO 15125
// for i in tmp do
15076: LD_ADDR_VAR 0 1
15080: PUSH
15081: LD_VAR 0 2
15085: PUSH
15086: FOR_IN
15087: IFFALSE 15123
// begin if Crawls ( i ) then
15089: LD_VAR 0 1
15093: PPUSH
15094: CALL_OW 318
15098: IFFALSE 15109
// ComWalk ( i ) ;
15100: LD_VAR 0 1
15104: PPUSH
15105: CALL_OW 138
// SetClass ( i , 2 ) ;
15109: LD_VAR 0 1
15113: PPUSH
15114: LD_INT 2
15116: PPUSH
15117: CALL_OW 336
// end ;
15121: GO 15086
15123: POP
15124: POP
// end ;
15125: PPOPN 2
15127: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15128: LD_EXP 55
15132: PUSH
15133: LD_EXP 108
15137: AND
15138: IFFALSE 15419
15140: GO 15142
15142: DISABLE
15143: LD_INT 0
15145: PPUSH
15146: PPUSH
15147: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15148: LD_OWVAR 2
15152: PPUSH
15153: LD_INT 9
15155: PPUSH
15156: LD_INT 1
15158: PPUSH
15159: LD_INT 1
15161: PPUSH
15162: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15166: LD_INT 9
15168: PPUSH
15169: LD_OWVAR 2
15173: PPUSH
15174: CALL_OW 343
// uc_side := 9 ;
15178: LD_ADDR_OWVAR 20
15182: PUSH
15183: LD_INT 9
15185: ST_TO_ADDR
// uc_nation := 2 ;
15186: LD_ADDR_OWVAR 21
15190: PUSH
15191: LD_INT 2
15193: ST_TO_ADDR
// hc_name := Dark Warrior ;
15194: LD_ADDR_OWVAR 26
15198: PUSH
15199: LD_STRING Dark Warrior
15201: ST_TO_ADDR
// hc_gallery :=  ;
15202: LD_ADDR_OWVAR 33
15206: PUSH
15207: LD_STRING 
15209: ST_TO_ADDR
// hc_noskilllimit := true ;
15210: LD_ADDR_OWVAR 76
15214: PUSH
15215: LD_INT 1
15217: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15218: LD_ADDR_OWVAR 31
15222: PUSH
15223: LD_INT 30
15225: PUSH
15226: LD_INT 30
15228: PUSH
15229: LD_INT 30
15231: PUSH
15232: LD_INT 30
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: ST_TO_ADDR
// un := CreateHuman ;
15241: LD_ADDR_VAR 0 3
15245: PUSH
15246: CALL_OW 44
15250: ST_TO_ADDR
// hc_noskilllimit := false ;
15251: LD_ADDR_OWVAR 76
15255: PUSH
15256: LD_INT 0
15258: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15259: LD_VAR 0 3
15263: PPUSH
15264: LD_INT 1
15266: PPUSH
15267: CALL_OW 51
// p := 0 ;
15271: LD_ADDR_VAR 0 2
15275: PUSH
15276: LD_INT 0
15278: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15279: LD_INT 35
15281: PPUSH
15282: CALL_OW 67
// p := p + 1 ;
15286: LD_ADDR_VAR 0 2
15290: PUSH
15291: LD_VAR 0 2
15295: PUSH
15296: LD_INT 1
15298: PLUS
15299: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15300: LD_VAR 0 3
15304: PPUSH
15305: CALL_OW 256
15309: PUSH
15310: LD_INT 1000
15312: LESS
15313: IFFALSE 15327
// SetLives ( un , 1000 ) ;
15315: LD_VAR 0 3
15319: PPUSH
15320: LD_INT 1000
15322: PPUSH
15323: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15327: LD_VAR 0 3
15331: PPUSH
15332: LD_INT 81
15334: PUSH
15335: LD_OWVAR 2
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PUSH
15344: LD_INT 91
15346: PUSH
15347: LD_VAR 0 3
15351: PUSH
15352: LD_INT 30
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: LIST
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: PPUSH
15364: CALL_OW 69
15368: PPUSH
15369: LD_VAR 0 3
15373: PPUSH
15374: CALL_OW 74
15378: PPUSH
15379: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15383: LD_VAR 0 2
15387: PUSH
15388: LD_INT 60
15390: GREATER
15391: PUSH
15392: LD_VAR 0 3
15396: PPUSH
15397: CALL_OW 301
15401: OR
15402: IFFALSE 15279
// if un then
15404: LD_VAR 0 3
15408: IFFALSE 15419
// RemoveUnit ( un ) ;
15410: LD_VAR 0 3
15414: PPUSH
15415: CALL_OW 64
// end ;
15419: PPOPN 3
15421: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15422: LD_INT 0
15424: PPUSH
// case cmd of 301 :
15425: LD_VAR 0 1
15429: PUSH
15430: LD_INT 301
15432: DOUBLE
15433: EQUAL
15434: IFTRUE 15438
15436: GO 15470
15438: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
15439: LD_VAR 0 6
15443: PPUSH
15444: LD_VAR 0 7
15448: PPUSH
15449: LD_VAR 0 8
15453: PPUSH
15454: LD_VAR 0 4
15458: PPUSH
15459: LD_VAR 0 5
15463: PPUSH
15464: CALL 16671 0 5
15468: GO 15591
15470: LD_INT 302
15472: DOUBLE
15473: EQUAL
15474: IFTRUE 15478
15476: GO 15515
15478: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
15479: LD_VAR 0 6
15483: PPUSH
15484: LD_VAR 0 7
15488: PPUSH
15489: LD_VAR 0 8
15493: PPUSH
15494: LD_VAR 0 9
15498: PPUSH
15499: LD_VAR 0 4
15503: PPUSH
15504: LD_VAR 0 5
15508: PPUSH
15509: CALL 16762 0 6
15513: GO 15591
15515: LD_INT 303
15517: DOUBLE
15518: EQUAL
15519: IFTRUE 15523
15521: GO 15560
15523: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
15524: LD_VAR 0 6
15528: PPUSH
15529: LD_VAR 0 7
15533: PPUSH
15534: LD_VAR 0 8
15538: PPUSH
15539: LD_VAR 0 9
15543: PPUSH
15544: LD_VAR 0 4
15548: PPUSH
15549: LD_VAR 0 5
15553: PPUSH
15554: CALL 15596 0 6
15558: GO 15591
15560: LD_INT 304
15562: DOUBLE
15563: EQUAL
15564: IFTRUE 15568
15566: GO 15590
15568: POP
// hHackTeleport ( unit , x , y ) ; end ;
15569: LD_VAR 0 2
15573: PPUSH
15574: LD_VAR 0 4
15578: PPUSH
15579: LD_VAR 0 5
15583: PPUSH
15584: CALL 17355 0 3
15588: GO 15591
15590: POP
// end ;
15591: LD_VAR 0 12
15595: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
15596: LD_INT 0
15598: PPUSH
15599: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
15600: LD_VAR 0 1
15604: PUSH
15605: LD_INT 1
15607: LESS
15608: PUSH
15609: LD_VAR 0 1
15613: PUSH
15614: LD_INT 3
15616: GREATER
15617: OR
15618: PUSH
15619: LD_VAR 0 5
15623: PPUSH
15624: LD_VAR 0 6
15628: PPUSH
15629: CALL_OW 428
15633: OR
15634: IFFALSE 15638
// exit ;
15636: GO 16358
// uc_side := your_side ;
15638: LD_ADDR_OWVAR 20
15642: PUSH
15643: LD_OWVAR 2
15647: ST_TO_ADDR
// uc_nation := nation ;
15648: LD_ADDR_OWVAR 21
15652: PUSH
15653: LD_VAR 0 1
15657: ST_TO_ADDR
// bc_level = 1 ;
15658: LD_ADDR_OWVAR 43
15662: PUSH
15663: LD_INT 1
15665: ST_TO_ADDR
// case btype of 1 :
15666: LD_VAR 0 2
15670: PUSH
15671: LD_INT 1
15673: DOUBLE
15674: EQUAL
15675: IFTRUE 15679
15677: GO 15690
15679: POP
// bc_type := b_depot ; 2 :
15680: LD_ADDR_OWVAR 42
15684: PUSH
15685: LD_INT 0
15687: ST_TO_ADDR
15688: GO 16302
15690: LD_INT 2
15692: DOUBLE
15693: EQUAL
15694: IFTRUE 15698
15696: GO 15709
15698: POP
// bc_type := b_warehouse ; 3 :
15699: LD_ADDR_OWVAR 42
15703: PUSH
15704: LD_INT 1
15706: ST_TO_ADDR
15707: GO 16302
15709: LD_INT 3
15711: DOUBLE
15712: EQUAL
15713: IFTRUE 15717
15715: GO 15728
15717: POP
// bc_type := b_lab ; 4 .. 9 :
15718: LD_ADDR_OWVAR 42
15722: PUSH
15723: LD_INT 6
15725: ST_TO_ADDR
15726: GO 16302
15728: LD_INT 4
15730: DOUBLE
15731: GREATEREQUAL
15732: IFFALSE 15740
15734: LD_INT 9
15736: DOUBLE
15737: LESSEQUAL
15738: IFTRUE 15742
15740: GO 15794
15742: POP
// begin bc_type := b_lab_half ;
15743: LD_ADDR_OWVAR 42
15747: PUSH
15748: LD_INT 7
15750: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
15751: LD_ADDR_OWVAR 44
15755: PUSH
15756: LD_INT 10
15758: PUSH
15759: LD_INT 11
15761: PUSH
15762: LD_INT 12
15764: PUSH
15765: LD_INT 15
15767: PUSH
15768: LD_INT 14
15770: PUSH
15771: LD_INT 13
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: PUSH
15782: LD_VAR 0 2
15786: PUSH
15787: LD_INT 3
15789: MINUS
15790: ARRAY
15791: ST_TO_ADDR
// end ; 10 .. 13 :
15792: GO 16302
15794: LD_INT 10
15796: DOUBLE
15797: GREATEREQUAL
15798: IFFALSE 15806
15800: LD_INT 13
15802: DOUBLE
15803: LESSEQUAL
15804: IFTRUE 15808
15806: GO 15885
15808: POP
// begin bc_type := b_lab_full ;
15809: LD_ADDR_OWVAR 42
15813: PUSH
15814: LD_INT 8
15816: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
15817: LD_ADDR_OWVAR 44
15821: PUSH
15822: LD_INT 10
15824: PUSH
15825: LD_INT 12
15827: PUSH
15828: LD_INT 14
15830: PUSH
15831: LD_INT 13
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: PUSH
15840: LD_VAR 0 2
15844: PUSH
15845: LD_INT 9
15847: MINUS
15848: ARRAY
15849: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
15850: LD_ADDR_OWVAR 45
15854: PUSH
15855: LD_INT 11
15857: PUSH
15858: LD_INT 15
15860: PUSH
15861: LD_INT 12
15863: PUSH
15864: LD_INT 15
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: PUSH
15873: LD_VAR 0 2
15877: PUSH
15878: LD_INT 9
15880: MINUS
15881: ARRAY
15882: ST_TO_ADDR
// end ; 14 :
15883: GO 16302
15885: LD_INT 14
15887: DOUBLE
15888: EQUAL
15889: IFTRUE 15893
15891: GO 15904
15893: POP
// bc_type := b_workshop ; 15 :
15894: LD_ADDR_OWVAR 42
15898: PUSH
15899: LD_INT 2
15901: ST_TO_ADDR
15902: GO 16302
15904: LD_INT 15
15906: DOUBLE
15907: EQUAL
15908: IFTRUE 15912
15910: GO 15923
15912: POP
// bc_type := b_factory ; 16 :
15913: LD_ADDR_OWVAR 42
15917: PUSH
15918: LD_INT 3
15920: ST_TO_ADDR
15921: GO 16302
15923: LD_INT 16
15925: DOUBLE
15926: EQUAL
15927: IFTRUE 15931
15929: GO 15942
15931: POP
// bc_type := b_ext_gun ; 17 :
15932: LD_ADDR_OWVAR 42
15936: PUSH
15937: LD_INT 17
15939: ST_TO_ADDR
15940: GO 16302
15942: LD_INT 17
15944: DOUBLE
15945: EQUAL
15946: IFTRUE 15950
15948: GO 15978
15950: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
15951: LD_ADDR_OWVAR 42
15955: PUSH
15956: LD_INT 19
15958: PUSH
15959: LD_INT 23
15961: PUSH
15962: LD_INT 19
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: LIST
15969: PUSH
15970: LD_VAR 0 1
15974: ARRAY
15975: ST_TO_ADDR
15976: GO 16302
15978: LD_INT 18
15980: DOUBLE
15981: EQUAL
15982: IFTRUE 15986
15984: GO 15997
15986: POP
// bc_type := b_ext_radar ; 19 :
15987: LD_ADDR_OWVAR 42
15991: PUSH
15992: LD_INT 20
15994: ST_TO_ADDR
15995: GO 16302
15997: LD_INT 19
15999: DOUBLE
16000: EQUAL
16001: IFTRUE 16005
16003: GO 16016
16005: POP
// bc_type := b_ext_radio ; 20 :
16006: LD_ADDR_OWVAR 42
16010: PUSH
16011: LD_INT 22
16013: ST_TO_ADDR
16014: GO 16302
16016: LD_INT 20
16018: DOUBLE
16019: EQUAL
16020: IFTRUE 16024
16022: GO 16035
16024: POP
// bc_type := b_ext_siberium ; 21 :
16025: LD_ADDR_OWVAR 42
16029: PUSH
16030: LD_INT 21
16032: ST_TO_ADDR
16033: GO 16302
16035: LD_INT 21
16037: DOUBLE
16038: EQUAL
16039: IFTRUE 16043
16041: GO 16054
16043: POP
// bc_type := b_ext_computer ; 22 :
16044: LD_ADDR_OWVAR 42
16048: PUSH
16049: LD_INT 24
16051: ST_TO_ADDR
16052: GO 16302
16054: LD_INT 22
16056: DOUBLE
16057: EQUAL
16058: IFTRUE 16062
16060: GO 16073
16062: POP
// bc_type := b_ext_track ; 23 :
16063: LD_ADDR_OWVAR 42
16067: PUSH
16068: LD_INT 16
16070: ST_TO_ADDR
16071: GO 16302
16073: LD_INT 23
16075: DOUBLE
16076: EQUAL
16077: IFTRUE 16081
16079: GO 16092
16081: POP
// bc_type := b_ext_laser ; 24 :
16082: LD_ADDR_OWVAR 42
16086: PUSH
16087: LD_INT 25
16089: ST_TO_ADDR
16090: GO 16302
16092: LD_INT 24
16094: DOUBLE
16095: EQUAL
16096: IFTRUE 16100
16098: GO 16111
16100: POP
// bc_type := b_control_tower ; 25 :
16101: LD_ADDR_OWVAR 42
16105: PUSH
16106: LD_INT 36
16108: ST_TO_ADDR
16109: GO 16302
16111: LD_INT 25
16113: DOUBLE
16114: EQUAL
16115: IFTRUE 16119
16117: GO 16130
16119: POP
// bc_type := b_breastwork ; 26 :
16120: LD_ADDR_OWVAR 42
16124: PUSH
16125: LD_INT 31
16127: ST_TO_ADDR
16128: GO 16302
16130: LD_INT 26
16132: DOUBLE
16133: EQUAL
16134: IFTRUE 16138
16136: GO 16149
16138: POP
// bc_type := b_bunker ; 27 :
16139: LD_ADDR_OWVAR 42
16143: PUSH
16144: LD_INT 32
16146: ST_TO_ADDR
16147: GO 16302
16149: LD_INT 27
16151: DOUBLE
16152: EQUAL
16153: IFTRUE 16157
16155: GO 16168
16157: POP
// bc_type := b_turret ; 28 :
16158: LD_ADDR_OWVAR 42
16162: PUSH
16163: LD_INT 33
16165: ST_TO_ADDR
16166: GO 16302
16168: LD_INT 28
16170: DOUBLE
16171: EQUAL
16172: IFTRUE 16176
16174: GO 16187
16176: POP
// bc_type := b_armoury ; 29 :
16177: LD_ADDR_OWVAR 42
16181: PUSH
16182: LD_INT 4
16184: ST_TO_ADDR
16185: GO 16302
16187: LD_INT 29
16189: DOUBLE
16190: EQUAL
16191: IFTRUE 16195
16193: GO 16206
16195: POP
// bc_type := b_barracks ; 30 :
16196: LD_ADDR_OWVAR 42
16200: PUSH
16201: LD_INT 5
16203: ST_TO_ADDR
16204: GO 16302
16206: LD_INT 30
16208: DOUBLE
16209: EQUAL
16210: IFTRUE 16214
16212: GO 16225
16214: POP
// bc_type := b_solar_power ; 31 :
16215: LD_ADDR_OWVAR 42
16219: PUSH
16220: LD_INT 27
16222: ST_TO_ADDR
16223: GO 16302
16225: LD_INT 31
16227: DOUBLE
16228: EQUAL
16229: IFTRUE 16233
16231: GO 16244
16233: POP
// bc_type := b_oil_power ; 32 :
16234: LD_ADDR_OWVAR 42
16238: PUSH
16239: LD_INT 26
16241: ST_TO_ADDR
16242: GO 16302
16244: LD_INT 32
16246: DOUBLE
16247: EQUAL
16248: IFTRUE 16252
16250: GO 16263
16252: POP
// bc_type := b_siberite_power ; 33 :
16253: LD_ADDR_OWVAR 42
16257: PUSH
16258: LD_INT 28
16260: ST_TO_ADDR
16261: GO 16302
16263: LD_INT 33
16265: DOUBLE
16266: EQUAL
16267: IFTRUE 16271
16269: GO 16282
16271: POP
// bc_type := b_oil_mine ; 34 :
16272: LD_ADDR_OWVAR 42
16276: PUSH
16277: LD_INT 29
16279: ST_TO_ADDR
16280: GO 16302
16282: LD_INT 34
16284: DOUBLE
16285: EQUAL
16286: IFTRUE 16290
16288: GO 16301
16290: POP
// bc_type := b_siberite_mine ; end ;
16291: LD_ADDR_OWVAR 42
16295: PUSH
16296: LD_INT 30
16298: ST_TO_ADDR
16299: GO 16302
16301: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
16302: LD_ADDR_VAR 0 8
16306: PUSH
16307: LD_VAR 0 5
16311: PPUSH
16312: LD_VAR 0 6
16316: PPUSH
16317: LD_VAR 0 3
16321: PPUSH
16322: CALL_OW 47
16326: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
16327: LD_OWVAR 42
16331: PUSH
16332: LD_INT 32
16334: PUSH
16335: LD_INT 33
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: IN
16342: IFFALSE 16358
// PlaceWeaponTurret ( b , weapon ) ;
16344: LD_VAR 0 8
16348: PPUSH
16349: LD_VAR 0 4
16353: PPUSH
16354: CALL_OW 431
// end ;
16358: LD_VAR 0 7
16362: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
16363: LD_INT 0
16365: PPUSH
16366: PPUSH
16367: PPUSH
16368: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16369: LD_ADDR_VAR 0 4
16373: PUSH
16374: LD_INT 22
16376: PUSH
16377: LD_OWVAR 2
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PUSH
16386: LD_INT 2
16388: PUSH
16389: LD_INT 30
16391: PUSH
16392: LD_INT 0
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 30
16401: PUSH
16402: LD_INT 1
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: LIST
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: PPUSH
16418: CALL_OW 69
16422: ST_TO_ADDR
// if not tmp then
16423: LD_VAR 0 4
16427: NOT
16428: IFFALSE 16432
// exit ;
16430: GO 16491
// for i in tmp do
16432: LD_ADDR_VAR 0 2
16436: PUSH
16437: LD_VAR 0 4
16441: PUSH
16442: FOR_IN
16443: IFFALSE 16489
// for j = 1 to 3 do
16445: LD_ADDR_VAR 0 3
16449: PUSH
16450: DOUBLE
16451: LD_INT 1
16453: DEC
16454: ST_TO_ADDR
16455: LD_INT 3
16457: PUSH
16458: FOR_TO
16459: IFFALSE 16485
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
16461: LD_VAR 0 2
16465: PPUSH
16466: CALL_OW 274
16470: PPUSH
16471: LD_VAR 0 3
16475: PPUSH
16476: LD_INT 99999
16478: PPUSH
16479: CALL_OW 277
16483: GO 16458
16485: POP
16486: POP
16487: GO 16442
16489: POP
16490: POP
// end ;
16491: LD_VAR 0 1
16495: RET
// export function hHackSetLevel10 ; var i , j ; begin
16496: LD_INT 0
16498: PPUSH
16499: PPUSH
16500: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16501: LD_ADDR_VAR 0 2
16505: PUSH
16506: LD_INT 21
16508: PUSH
16509: LD_INT 1
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PPUSH
16516: CALL_OW 69
16520: PUSH
16521: FOR_IN
16522: IFFALSE 16574
// if IsSelected ( i ) then
16524: LD_VAR 0 2
16528: PPUSH
16529: CALL_OW 306
16533: IFFALSE 16572
// begin for j := 1 to 4 do
16535: LD_ADDR_VAR 0 3
16539: PUSH
16540: DOUBLE
16541: LD_INT 1
16543: DEC
16544: ST_TO_ADDR
16545: LD_INT 4
16547: PUSH
16548: FOR_TO
16549: IFFALSE 16570
// SetSkill ( i , j , 10 ) ;
16551: LD_VAR 0 2
16555: PPUSH
16556: LD_VAR 0 3
16560: PPUSH
16561: LD_INT 10
16563: PPUSH
16564: CALL_OW 237
16568: GO 16548
16570: POP
16571: POP
// end ;
16572: GO 16521
16574: POP
16575: POP
// end ;
16576: LD_VAR 0 1
16580: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
16581: LD_INT 0
16583: PPUSH
16584: PPUSH
16585: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
16586: LD_ADDR_VAR 0 2
16590: PUSH
16591: LD_INT 22
16593: PUSH
16594: LD_OWVAR 2
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: LD_INT 21
16605: PUSH
16606: LD_INT 1
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: PPUSH
16617: CALL_OW 69
16621: PUSH
16622: FOR_IN
16623: IFFALSE 16664
// begin for j := 1 to 4 do
16625: LD_ADDR_VAR 0 3
16629: PUSH
16630: DOUBLE
16631: LD_INT 1
16633: DEC
16634: ST_TO_ADDR
16635: LD_INT 4
16637: PUSH
16638: FOR_TO
16639: IFFALSE 16660
// SetSkill ( i , j , 10 ) ;
16641: LD_VAR 0 2
16645: PPUSH
16646: LD_VAR 0 3
16650: PPUSH
16651: LD_INT 10
16653: PPUSH
16654: CALL_OW 237
16658: GO 16638
16660: POP
16661: POP
// end ;
16662: GO 16622
16664: POP
16665: POP
// end ;
16666: LD_VAR 0 1
16670: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
16671: LD_INT 0
16673: PPUSH
// uc_side := your_side ;
16674: LD_ADDR_OWVAR 20
16678: PUSH
16679: LD_OWVAR 2
16683: ST_TO_ADDR
// uc_nation := nation ;
16684: LD_ADDR_OWVAR 21
16688: PUSH
16689: LD_VAR 0 1
16693: ST_TO_ADDR
// InitHc ;
16694: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
16698: LD_INT 0
16700: PPUSH
16701: LD_VAR 0 2
16705: PPUSH
16706: LD_VAR 0 3
16710: PPUSH
16711: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
16715: LD_VAR 0 4
16719: PPUSH
16720: LD_VAR 0 5
16724: PPUSH
16725: CALL_OW 428
16729: PUSH
16730: LD_INT 0
16732: EQUAL
16733: IFFALSE 16757
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
16735: CALL_OW 44
16739: PPUSH
16740: LD_VAR 0 4
16744: PPUSH
16745: LD_VAR 0 5
16749: PPUSH
16750: LD_INT 1
16752: PPUSH
16753: CALL_OW 48
// end ;
16757: LD_VAR 0 6
16761: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
16762: LD_INT 0
16764: PPUSH
16765: PPUSH
// uc_side := your_side ;
16766: LD_ADDR_OWVAR 20
16770: PUSH
16771: LD_OWVAR 2
16775: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
16776: LD_VAR 0 1
16780: PUSH
16781: LD_INT 1
16783: PUSH
16784: LD_INT 2
16786: PUSH
16787: LD_INT 3
16789: PUSH
16790: LD_INT 4
16792: PUSH
16793: LD_INT 5
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: IN
16803: IFFALSE 16815
// uc_nation := nation_american else
16805: LD_ADDR_OWVAR 21
16809: PUSH
16810: LD_INT 1
16812: ST_TO_ADDR
16813: GO 16858
// if chassis in [ 11 , 12 , 13 , 14 ] then
16815: LD_VAR 0 1
16819: PUSH
16820: LD_INT 11
16822: PUSH
16823: LD_INT 12
16825: PUSH
16826: LD_INT 13
16828: PUSH
16829: LD_INT 14
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: IN
16838: IFFALSE 16850
// uc_nation := nation_arabian else
16840: LD_ADDR_OWVAR 21
16844: PUSH
16845: LD_INT 2
16847: ST_TO_ADDR
16848: GO 16858
// uc_nation := nation_russian ;
16850: LD_ADDR_OWVAR 21
16854: PUSH
16855: LD_INT 3
16857: ST_TO_ADDR
// vc_chassis := chassis ;
16858: LD_ADDR_OWVAR 37
16862: PUSH
16863: LD_VAR 0 1
16867: ST_TO_ADDR
// vc_engine := engine ;
16868: LD_ADDR_OWVAR 39
16872: PUSH
16873: LD_VAR 0 2
16877: ST_TO_ADDR
// vc_control := control ;
16878: LD_ADDR_OWVAR 38
16882: PUSH
16883: LD_VAR 0 3
16887: ST_TO_ADDR
// vc_weapon := weapon ;
16888: LD_ADDR_OWVAR 40
16892: PUSH
16893: LD_VAR 0 4
16897: ST_TO_ADDR
// un := CreateVehicle ;
16898: LD_ADDR_VAR 0 8
16902: PUSH
16903: CALL_OW 45
16907: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
16908: LD_VAR 0 8
16912: PPUSH
16913: LD_INT 0
16915: PPUSH
16916: LD_INT 5
16918: PPUSH
16919: CALL_OW 12
16923: PPUSH
16924: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
16928: LD_VAR 0 8
16932: PPUSH
16933: LD_VAR 0 5
16937: PPUSH
16938: LD_VAR 0 6
16942: PPUSH
16943: LD_INT 1
16945: PPUSH
16946: CALL_OW 48
// end ;
16950: LD_VAR 0 7
16954: RET
// export hInvincible ; every 1 do
16955: GO 16957
16957: DISABLE
// hInvincible := [ ] ;
16958: LD_ADDR_EXP 109
16962: PUSH
16963: EMPTY
16964: ST_TO_ADDR
16965: END
// every 10 do var i ;
16966: GO 16968
16968: DISABLE
16969: LD_INT 0
16971: PPUSH
// begin enable ;
16972: ENABLE
// if not hInvincible then
16973: LD_EXP 109
16977: NOT
16978: IFFALSE 16982
// exit ;
16980: GO 17026
// for i in hInvincible do
16982: LD_ADDR_VAR 0 1
16986: PUSH
16987: LD_EXP 109
16991: PUSH
16992: FOR_IN
16993: IFFALSE 17024
// if GetLives ( i ) < 1000 then
16995: LD_VAR 0 1
16999: PPUSH
17000: CALL_OW 256
17004: PUSH
17005: LD_INT 1000
17007: LESS
17008: IFFALSE 17022
// SetLives ( i , 1000 ) ;
17010: LD_VAR 0 1
17014: PPUSH
17015: LD_INT 1000
17017: PPUSH
17018: CALL_OW 234
17022: GO 16992
17024: POP
17025: POP
// end ;
17026: PPOPN 1
17028: END
// export function hHackInvincible ; var i ; begin
17029: LD_INT 0
17031: PPUSH
17032: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17033: LD_ADDR_VAR 0 2
17037: PUSH
17038: LD_INT 2
17040: PUSH
17041: LD_INT 21
17043: PUSH
17044: LD_INT 1
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: PUSH
17051: LD_INT 21
17053: PUSH
17054: LD_INT 2
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: LIST
17065: PPUSH
17066: CALL_OW 69
17070: PUSH
17071: FOR_IN
17072: IFFALSE 17133
// if IsSelected ( i ) then
17074: LD_VAR 0 2
17078: PPUSH
17079: CALL_OW 306
17083: IFFALSE 17131
// begin if i in hInvincible then
17085: LD_VAR 0 2
17089: PUSH
17090: LD_EXP 109
17094: IN
17095: IFFALSE 17115
// hInvincible := hInvincible diff i else
17097: LD_ADDR_EXP 109
17101: PUSH
17102: LD_EXP 109
17106: PUSH
17107: LD_VAR 0 2
17111: DIFF
17112: ST_TO_ADDR
17113: GO 17131
// hInvincible := hInvincible union i ;
17115: LD_ADDR_EXP 109
17119: PUSH
17120: LD_EXP 109
17124: PUSH
17125: LD_VAR 0 2
17129: UNION
17130: ST_TO_ADDR
// end ;
17131: GO 17071
17133: POP
17134: POP
// end ;
17135: LD_VAR 0 1
17139: RET
// export function hHackInvisible ; var i , j ; begin
17140: LD_INT 0
17142: PPUSH
17143: PPUSH
17144: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17145: LD_ADDR_VAR 0 2
17149: PUSH
17150: LD_INT 21
17152: PUSH
17153: LD_INT 1
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PPUSH
17160: CALL_OW 69
17164: PUSH
17165: FOR_IN
17166: IFFALSE 17190
// if IsSelected ( i ) then
17168: LD_VAR 0 2
17172: PPUSH
17173: CALL_OW 306
17177: IFFALSE 17188
// ComForceInvisible ( i ) ;
17179: LD_VAR 0 2
17183: PPUSH
17184: CALL_OW 496
17188: GO 17165
17190: POP
17191: POP
// end ;
17192: LD_VAR 0 1
17196: RET
// export function hHackChangeYourSide ; begin
17197: LD_INT 0
17199: PPUSH
// if your_side = 8 then
17200: LD_OWVAR 2
17204: PUSH
17205: LD_INT 8
17207: EQUAL
17208: IFFALSE 17220
// your_side := 0 else
17210: LD_ADDR_OWVAR 2
17214: PUSH
17215: LD_INT 0
17217: ST_TO_ADDR
17218: GO 17234
// your_side := your_side + 1 ;
17220: LD_ADDR_OWVAR 2
17224: PUSH
17225: LD_OWVAR 2
17229: PUSH
17230: LD_INT 1
17232: PLUS
17233: ST_TO_ADDR
// end ;
17234: LD_VAR 0 1
17238: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17239: LD_INT 0
17241: PPUSH
17242: PPUSH
17243: PPUSH
// for i in all_units do
17244: LD_ADDR_VAR 0 2
17248: PUSH
17249: LD_OWVAR 3
17253: PUSH
17254: FOR_IN
17255: IFFALSE 17333
// if IsSelected ( i ) then
17257: LD_VAR 0 2
17261: PPUSH
17262: CALL_OW 306
17266: IFFALSE 17331
// begin j := GetSide ( i ) ;
17268: LD_ADDR_VAR 0 3
17272: PUSH
17273: LD_VAR 0 2
17277: PPUSH
17278: CALL_OW 255
17282: ST_TO_ADDR
// if j = 8 then
17283: LD_VAR 0 3
17287: PUSH
17288: LD_INT 8
17290: EQUAL
17291: IFFALSE 17303
// j := 0 else
17293: LD_ADDR_VAR 0 3
17297: PUSH
17298: LD_INT 0
17300: ST_TO_ADDR
17301: GO 17317
// j := j + 1 ;
17303: LD_ADDR_VAR 0 3
17307: PUSH
17308: LD_VAR 0 3
17312: PUSH
17313: LD_INT 1
17315: PLUS
17316: ST_TO_ADDR
// SetSide ( i , j ) ;
17317: LD_VAR 0 2
17321: PPUSH
17322: LD_VAR 0 3
17326: PPUSH
17327: CALL_OW 235
// end ;
17331: GO 17254
17333: POP
17334: POP
// end ;
17335: LD_VAR 0 1
17339: RET
// export function hHackFog ; begin
17340: LD_INT 0
17342: PPUSH
// FogOff ( true ) ;
17343: LD_INT 1
17345: PPUSH
17346: CALL_OW 344
// end ;
17350: LD_VAR 0 1
17354: RET
// export function hHackTeleport ( unit , x , y ) ; begin
17355: LD_INT 0
17357: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
17358: LD_VAR 0 1
17362: PPUSH
17363: LD_VAR 0 2
17367: PPUSH
17368: LD_VAR 0 3
17372: PPUSH
17373: LD_INT 1
17375: PPUSH
17376: LD_INT 1
17378: PPUSH
17379: CALL_OW 483
// CenterOnXY ( x , y ) ;
17383: LD_VAR 0 2
17387: PPUSH
17388: LD_VAR 0 3
17392: PPUSH
17393: CALL_OW 84
// end ; end_of_file
17397: LD_VAR 0 4
17401: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17402: LD_INT 0
17404: PPUSH
17405: PPUSH
17406: PPUSH
17407: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17408: LD_VAR 0 1
17412: PPUSH
17413: CALL_OW 264
17417: PUSH
17418: LD_EXP 43
17422: EQUAL
17423: IFFALSE 17495
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17425: LD_INT 68
17427: PPUSH
17428: LD_VAR 0 1
17432: PPUSH
17433: CALL_OW 255
17437: PPUSH
17438: CALL_OW 321
17442: PUSH
17443: LD_INT 2
17445: EQUAL
17446: IFFALSE 17458
// eff := 70 else
17448: LD_ADDR_VAR 0 4
17452: PUSH
17453: LD_INT 70
17455: ST_TO_ADDR
17456: GO 17466
// eff := 30 ;
17458: LD_ADDR_VAR 0 4
17462: PUSH
17463: LD_INT 30
17465: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17466: LD_VAR 0 1
17470: PPUSH
17471: CALL_OW 250
17475: PPUSH
17476: LD_VAR 0 1
17480: PPUSH
17481: CALL_OW 251
17485: PPUSH
17486: LD_VAR 0 4
17490: PPUSH
17491: CALL_OW 495
// end ; end ;
17495: LD_VAR 0 2
17499: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17500: LD_INT 0
17502: PPUSH
// end ;
17503: LD_VAR 0 4
17507: RET
// export function SOS_Command ( cmd ) ; begin
17508: LD_INT 0
17510: PPUSH
// end ;
17511: LD_VAR 0 2
17515: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17516: LD_INT 0
17518: PPUSH
// if cmd = 121 then
17519: LD_VAR 0 1
17523: PUSH
17524: LD_INT 121
17526: EQUAL
17527: IFFALSE 17529
// end ;
17529: LD_VAR 0 6
17533: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
17534: LD_INT 0
17536: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
17537: LD_VAR 0 1
17541: PUSH
17542: LD_INT 250
17544: EQUAL
17545: PUSH
17546: LD_VAR 0 2
17550: PPUSH
17551: CALL_OW 264
17555: PUSH
17556: LD_EXP 46
17560: EQUAL
17561: AND
17562: IFFALSE 17583
// MinerPlaceMine ( unit , x , y ) ;
17564: LD_VAR 0 2
17568: PPUSH
17569: LD_VAR 0 4
17573: PPUSH
17574: LD_VAR 0 5
17578: PPUSH
17579: CALL 19932 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
17583: LD_VAR 0 1
17587: PUSH
17588: LD_INT 251
17590: EQUAL
17591: PUSH
17592: LD_VAR 0 2
17596: PPUSH
17597: CALL_OW 264
17601: PUSH
17602: LD_EXP 46
17606: EQUAL
17607: AND
17608: IFFALSE 17629
// MinerDetonateMine ( unit , x , y ) ;
17610: LD_VAR 0 2
17614: PPUSH
17615: LD_VAR 0 4
17619: PPUSH
17620: LD_VAR 0 5
17624: PPUSH
17625: CALL 20209 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
17629: LD_VAR 0 1
17633: PUSH
17634: LD_INT 252
17636: EQUAL
17637: PUSH
17638: LD_VAR 0 2
17642: PPUSH
17643: CALL_OW 264
17647: PUSH
17648: LD_EXP 46
17652: EQUAL
17653: AND
17654: IFFALSE 17675
// MinerCreateMinefield ( unit , x , y ) ;
17656: LD_VAR 0 2
17660: PPUSH
17661: LD_VAR 0 4
17665: PPUSH
17666: LD_VAR 0 5
17670: PPUSH
17671: CALL 20626 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
17675: LD_VAR 0 1
17679: PUSH
17680: LD_INT 253
17682: EQUAL
17683: PUSH
17684: LD_VAR 0 2
17688: PPUSH
17689: CALL_OW 257
17693: PUSH
17694: LD_INT 5
17696: EQUAL
17697: AND
17698: IFFALSE 17719
// ComBinocular ( unit , x , y ) ;
17700: LD_VAR 0 2
17704: PPUSH
17705: LD_VAR 0 4
17709: PPUSH
17710: LD_VAR 0 5
17714: PPUSH
17715: CALL 20997 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
17719: LD_VAR 0 1
17723: PUSH
17724: LD_INT 254
17726: EQUAL
17727: PUSH
17728: LD_VAR 0 2
17732: PPUSH
17733: CALL_OW 264
17737: PUSH
17738: LD_EXP 41
17742: EQUAL
17743: AND
17744: PUSH
17745: LD_VAR 0 3
17749: PPUSH
17750: CALL_OW 263
17754: PUSH
17755: LD_INT 3
17757: EQUAL
17758: AND
17759: IFFALSE 17775
// HackDestroyVehicle ( unit , selectedUnit ) ;
17761: LD_VAR 0 2
17765: PPUSH
17766: LD_VAR 0 3
17770: PPUSH
17771: CALL 19292 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
17775: LD_VAR 0 1
17779: PUSH
17780: LD_INT 255
17782: EQUAL
17783: PUSH
17784: LD_VAR 0 2
17788: PPUSH
17789: CALL_OW 264
17793: PUSH
17794: LD_INT 14
17796: PUSH
17797: LD_INT 53
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: IN
17804: AND
17805: PUSH
17806: LD_VAR 0 4
17810: PPUSH
17811: LD_VAR 0 5
17815: PPUSH
17816: CALL_OW 488
17820: AND
17821: IFFALSE 17845
// CutTreeXYR ( unit , x , y , 12 ) ;
17823: LD_VAR 0 2
17827: PPUSH
17828: LD_VAR 0 4
17832: PPUSH
17833: LD_VAR 0 5
17837: PPUSH
17838: LD_INT 12
17840: PPUSH
17841: CALL 17858 0 4
// end ;
17845: LD_VAR 0 6
17849: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
17850: LD_INT 0
17852: PPUSH
// end ;
17853: LD_VAR 0 4
17857: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17858: LD_INT 0
17860: PPUSH
17861: PPUSH
17862: PPUSH
17863: PPUSH
17864: PPUSH
17865: PPUSH
17866: PPUSH
17867: PPUSH
17868: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
17869: LD_VAR 0 1
17873: NOT
17874: PUSH
17875: LD_VAR 0 2
17879: PPUSH
17880: LD_VAR 0 3
17884: PPUSH
17885: CALL_OW 488
17889: NOT
17890: OR
17891: PUSH
17892: LD_VAR 0 4
17896: NOT
17897: OR
17898: IFFALSE 17902
// exit ;
17900: GO 18242
// list := [ ] ;
17902: LD_ADDR_VAR 0 13
17906: PUSH
17907: EMPTY
17908: ST_TO_ADDR
// if x - r < 0 then
17909: LD_VAR 0 2
17913: PUSH
17914: LD_VAR 0 4
17918: MINUS
17919: PUSH
17920: LD_INT 0
17922: LESS
17923: IFFALSE 17935
// min_x := 0 else
17925: LD_ADDR_VAR 0 7
17929: PUSH
17930: LD_INT 0
17932: ST_TO_ADDR
17933: GO 17951
// min_x := x - r ;
17935: LD_ADDR_VAR 0 7
17939: PUSH
17940: LD_VAR 0 2
17944: PUSH
17945: LD_VAR 0 4
17949: MINUS
17950: ST_TO_ADDR
// if y - r < 0 then
17951: LD_VAR 0 3
17955: PUSH
17956: LD_VAR 0 4
17960: MINUS
17961: PUSH
17962: LD_INT 0
17964: LESS
17965: IFFALSE 17977
// min_y := 0 else
17967: LD_ADDR_VAR 0 8
17971: PUSH
17972: LD_INT 0
17974: ST_TO_ADDR
17975: GO 17993
// min_y := y - r ;
17977: LD_ADDR_VAR 0 8
17981: PUSH
17982: LD_VAR 0 3
17986: PUSH
17987: LD_VAR 0 4
17991: MINUS
17992: ST_TO_ADDR
// max_x := x + r ;
17993: LD_ADDR_VAR 0 9
17997: PUSH
17998: LD_VAR 0 2
18002: PUSH
18003: LD_VAR 0 4
18007: PLUS
18008: ST_TO_ADDR
// max_y := y + r ;
18009: LD_ADDR_VAR 0 10
18013: PUSH
18014: LD_VAR 0 3
18018: PUSH
18019: LD_VAR 0 4
18023: PLUS
18024: ST_TO_ADDR
// for _x = min_x to max_x do
18025: LD_ADDR_VAR 0 11
18029: PUSH
18030: DOUBLE
18031: LD_VAR 0 7
18035: DEC
18036: ST_TO_ADDR
18037: LD_VAR 0 9
18041: PUSH
18042: FOR_TO
18043: IFFALSE 18160
// for _y = min_y to max_y do
18045: LD_ADDR_VAR 0 12
18049: PUSH
18050: DOUBLE
18051: LD_VAR 0 8
18055: DEC
18056: ST_TO_ADDR
18057: LD_VAR 0 10
18061: PUSH
18062: FOR_TO
18063: IFFALSE 18156
// begin if not ValidHex ( _x , _y ) then
18065: LD_VAR 0 11
18069: PPUSH
18070: LD_VAR 0 12
18074: PPUSH
18075: CALL_OW 488
18079: NOT
18080: IFFALSE 18084
// continue ;
18082: GO 18062
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18084: LD_VAR 0 11
18088: PPUSH
18089: LD_VAR 0 12
18093: PPUSH
18094: CALL_OW 351
18098: PUSH
18099: LD_VAR 0 11
18103: PPUSH
18104: LD_VAR 0 12
18108: PPUSH
18109: CALL_OW 554
18113: AND
18114: IFFALSE 18154
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18116: LD_ADDR_VAR 0 13
18120: PUSH
18121: LD_VAR 0 13
18125: PPUSH
18126: LD_VAR 0 13
18130: PUSH
18131: LD_INT 1
18133: PLUS
18134: PPUSH
18135: LD_VAR 0 11
18139: PUSH
18140: LD_VAR 0 12
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PPUSH
18149: CALL_OW 2
18153: ST_TO_ADDR
// end ;
18154: GO 18062
18156: POP
18157: POP
18158: GO 18042
18160: POP
18161: POP
// if not list then
18162: LD_VAR 0 13
18166: NOT
18167: IFFALSE 18171
// exit ;
18169: GO 18242
// for i in list do
18171: LD_ADDR_VAR 0 6
18175: PUSH
18176: LD_VAR 0 13
18180: PUSH
18181: FOR_IN
18182: IFFALSE 18240
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18184: LD_VAR 0 1
18188: PPUSH
18189: LD_STRING M
18191: PUSH
18192: LD_VAR 0 6
18196: PUSH
18197: LD_INT 1
18199: ARRAY
18200: PUSH
18201: LD_VAR 0 6
18205: PUSH
18206: LD_INT 2
18208: ARRAY
18209: PUSH
18210: LD_INT 0
18212: PUSH
18213: LD_INT 0
18215: PUSH
18216: LD_INT 0
18218: PUSH
18219: LD_INT 0
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: PUSH
18231: EMPTY
18232: LIST
18233: PPUSH
18234: CALL_OW 447
18238: GO 18181
18240: POP
18241: POP
// end ;
18242: LD_VAR 0 5
18246: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18247: LD_EXP 112
18251: NOT
18252: IFFALSE 18302
18254: GO 18256
18256: DISABLE
// begin initHack := true ;
18257: LD_ADDR_EXP 112
18261: PUSH
18262: LD_INT 1
18264: ST_TO_ADDR
// hackTanks := [ ] ;
18265: LD_ADDR_EXP 113
18269: PUSH
18270: EMPTY
18271: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18272: LD_ADDR_EXP 114
18276: PUSH
18277: EMPTY
18278: ST_TO_ADDR
// hackLimit := 3 ;
18279: LD_ADDR_EXP 115
18283: PUSH
18284: LD_INT 3
18286: ST_TO_ADDR
// hackDist := 12 ;
18287: LD_ADDR_EXP 116
18291: PUSH
18292: LD_INT 12
18294: ST_TO_ADDR
// hackCounter := [ ] ;
18295: LD_ADDR_EXP 117
18299: PUSH
18300: EMPTY
18301: ST_TO_ADDR
// end ;
18302: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18303: LD_EXP 112
18307: PUSH
18308: LD_INT 34
18310: PUSH
18311: LD_EXP 41
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PPUSH
18320: CALL_OW 69
18324: AND
18325: IFFALSE 18580
18327: GO 18329
18329: DISABLE
18330: LD_INT 0
18332: PPUSH
18333: PPUSH
// begin enable ;
18334: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18335: LD_ADDR_VAR 0 1
18339: PUSH
18340: LD_INT 34
18342: PUSH
18343: LD_EXP 41
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: PPUSH
18352: CALL_OW 69
18356: PUSH
18357: FOR_IN
18358: IFFALSE 18578
// begin if not i in hackTanks then
18360: LD_VAR 0 1
18364: PUSH
18365: LD_EXP 113
18369: IN
18370: NOT
18371: IFFALSE 18454
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18373: LD_ADDR_EXP 113
18377: PUSH
18378: LD_EXP 113
18382: PPUSH
18383: LD_EXP 113
18387: PUSH
18388: LD_INT 1
18390: PLUS
18391: PPUSH
18392: LD_VAR 0 1
18396: PPUSH
18397: CALL_OW 1
18401: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18402: LD_ADDR_EXP 114
18406: PUSH
18407: LD_EXP 114
18411: PPUSH
18412: LD_EXP 114
18416: PUSH
18417: LD_INT 1
18419: PLUS
18420: PPUSH
18421: EMPTY
18422: PPUSH
18423: CALL_OW 1
18427: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18428: LD_ADDR_EXP 117
18432: PUSH
18433: LD_EXP 117
18437: PPUSH
18438: LD_EXP 117
18442: PUSH
18443: LD_INT 1
18445: PLUS
18446: PPUSH
18447: EMPTY
18448: PPUSH
18449: CALL_OW 1
18453: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18454: LD_VAR 0 1
18458: PPUSH
18459: CALL_OW 302
18463: NOT
18464: IFFALSE 18477
// begin HackUnlinkAll ( i ) ;
18466: LD_VAR 0 1
18470: PPUSH
18471: CALL 18583 0 1
// continue ;
18475: GO 18357
// end ; HackCheckCapturedStatus ( i ) ;
18477: LD_VAR 0 1
18481: PPUSH
18482: CALL 19026 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18486: LD_ADDR_VAR 0 2
18490: PUSH
18491: LD_INT 81
18493: PUSH
18494: LD_VAR 0 1
18498: PPUSH
18499: CALL_OW 255
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PUSH
18508: LD_INT 33
18510: PUSH
18511: LD_INT 3
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: PUSH
18518: LD_INT 91
18520: PUSH
18521: LD_VAR 0 1
18525: PUSH
18526: LD_EXP 116
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: LIST
18535: PUSH
18536: LD_INT 50
18538: PUSH
18539: EMPTY
18540: LIST
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: PPUSH
18548: CALL_OW 69
18552: ST_TO_ADDR
// if not tmp then
18553: LD_VAR 0 2
18557: NOT
18558: IFFALSE 18562
// continue ;
18560: GO 18357
// HackLink ( i , tmp ) ;
18562: LD_VAR 0 1
18566: PPUSH
18567: LD_VAR 0 2
18571: PPUSH
18572: CALL 18719 0 2
// end ;
18576: GO 18357
18578: POP
18579: POP
// end ;
18580: PPOPN 2
18582: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18583: LD_INT 0
18585: PPUSH
18586: PPUSH
18587: PPUSH
// if not hack in hackTanks then
18588: LD_VAR 0 1
18592: PUSH
18593: LD_EXP 113
18597: IN
18598: NOT
18599: IFFALSE 18603
// exit ;
18601: GO 18714
// index := GetElementIndex ( hackTanks , hack ) ;
18603: LD_ADDR_VAR 0 4
18607: PUSH
18608: LD_EXP 113
18612: PPUSH
18613: LD_VAR 0 1
18617: PPUSH
18618: CALL 26148 0 2
18622: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18623: LD_EXP 114
18627: PUSH
18628: LD_VAR 0 4
18632: ARRAY
18633: IFFALSE 18714
// begin for i in hackTanksCaptured [ index ] do
18635: LD_ADDR_VAR 0 3
18639: PUSH
18640: LD_EXP 114
18644: PUSH
18645: LD_VAR 0 4
18649: ARRAY
18650: PUSH
18651: FOR_IN
18652: IFFALSE 18678
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18654: LD_VAR 0 3
18658: PUSH
18659: LD_INT 1
18661: ARRAY
18662: PPUSH
18663: LD_VAR 0 3
18667: PUSH
18668: LD_INT 2
18670: ARRAY
18671: PPUSH
18672: CALL_OW 235
18676: GO 18651
18678: POP
18679: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18680: LD_ADDR_EXP 114
18684: PUSH
18685: LD_EXP 114
18689: PPUSH
18690: LD_VAR 0 4
18694: PPUSH
18695: EMPTY
18696: PPUSH
18697: CALL_OW 1
18701: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18702: LD_VAR 0 1
18706: PPUSH
18707: LD_INT 0
18709: PPUSH
18710: CALL_OW 505
// end ; end ;
18714: LD_VAR 0 2
18718: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18719: LD_INT 0
18721: PPUSH
18722: PPUSH
18723: PPUSH
// if not hack in hackTanks or not vehicles then
18724: LD_VAR 0 1
18728: PUSH
18729: LD_EXP 113
18733: IN
18734: NOT
18735: PUSH
18736: LD_VAR 0 2
18740: NOT
18741: OR
18742: IFFALSE 18746
// exit ;
18744: GO 19021
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18746: LD_ADDR_VAR 0 2
18750: PUSH
18751: LD_VAR 0 1
18755: PPUSH
18756: LD_VAR 0 2
18760: PPUSH
18761: LD_INT 1
18763: PPUSH
18764: LD_INT 1
18766: PPUSH
18767: CALL 26798 0 4
18771: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18772: LD_ADDR_VAR 0 5
18776: PUSH
18777: LD_EXP 113
18781: PPUSH
18782: LD_VAR 0 1
18786: PPUSH
18787: CALL 26148 0 2
18791: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18792: LD_EXP 114
18796: PUSH
18797: LD_VAR 0 5
18801: ARRAY
18802: PUSH
18803: LD_EXP 115
18807: LESS
18808: IFFALSE 18997
// begin for i := 1 to vehicles do
18810: LD_ADDR_VAR 0 4
18814: PUSH
18815: DOUBLE
18816: LD_INT 1
18818: DEC
18819: ST_TO_ADDR
18820: LD_VAR 0 2
18824: PUSH
18825: FOR_TO
18826: IFFALSE 18995
// begin if hackTanksCaptured [ index ] = hackLimit then
18828: LD_EXP 114
18832: PUSH
18833: LD_VAR 0 5
18837: ARRAY
18838: PUSH
18839: LD_EXP 115
18843: EQUAL
18844: IFFALSE 18848
// break ;
18846: GO 18995
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18848: LD_ADDR_EXP 117
18852: PUSH
18853: LD_EXP 117
18857: PPUSH
18858: LD_VAR 0 5
18862: PPUSH
18863: LD_EXP 117
18867: PUSH
18868: LD_VAR 0 5
18872: ARRAY
18873: PUSH
18874: LD_INT 1
18876: PLUS
18877: PPUSH
18878: CALL_OW 1
18882: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18883: LD_ADDR_EXP 114
18887: PUSH
18888: LD_EXP 114
18892: PPUSH
18893: LD_VAR 0 5
18897: PUSH
18898: LD_EXP 114
18902: PUSH
18903: LD_VAR 0 5
18907: ARRAY
18908: PUSH
18909: LD_INT 1
18911: PLUS
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PPUSH
18917: LD_VAR 0 2
18921: PUSH
18922: LD_VAR 0 4
18926: ARRAY
18927: PUSH
18928: LD_VAR 0 2
18932: PUSH
18933: LD_VAR 0 4
18937: ARRAY
18938: PPUSH
18939: CALL_OW 255
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PPUSH
18948: CALL 26363 0 3
18952: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
18953: LD_VAR 0 2
18957: PUSH
18958: LD_VAR 0 4
18962: ARRAY
18963: PPUSH
18964: LD_VAR 0 1
18968: PPUSH
18969: CALL_OW 255
18973: PPUSH
18974: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
18978: LD_VAR 0 2
18982: PUSH
18983: LD_VAR 0 4
18987: ARRAY
18988: PPUSH
18989: CALL_OW 141
// end ;
18993: GO 18825
18995: POP
18996: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18997: LD_VAR 0 1
19001: PPUSH
19002: LD_EXP 114
19006: PUSH
19007: LD_VAR 0 5
19011: ARRAY
19012: PUSH
19013: LD_INT 0
19015: PLUS
19016: PPUSH
19017: CALL_OW 505
// end ;
19021: LD_VAR 0 3
19025: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19026: LD_INT 0
19028: PPUSH
19029: PPUSH
19030: PPUSH
19031: PPUSH
// if not hack in hackTanks then
19032: LD_VAR 0 1
19036: PUSH
19037: LD_EXP 113
19041: IN
19042: NOT
19043: IFFALSE 19047
// exit ;
19045: GO 19287
// index := GetElementIndex ( hackTanks , hack ) ;
19047: LD_ADDR_VAR 0 4
19051: PUSH
19052: LD_EXP 113
19056: PPUSH
19057: LD_VAR 0 1
19061: PPUSH
19062: CALL 26148 0 2
19066: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19067: LD_ADDR_VAR 0 3
19071: PUSH
19072: DOUBLE
19073: LD_EXP 114
19077: PUSH
19078: LD_VAR 0 4
19082: ARRAY
19083: INC
19084: ST_TO_ADDR
19085: LD_INT 1
19087: PUSH
19088: FOR_DOWNTO
19089: IFFALSE 19261
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19091: LD_ADDR_VAR 0 5
19095: PUSH
19096: LD_EXP 114
19100: PUSH
19101: LD_VAR 0 4
19105: ARRAY
19106: PUSH
19107: LD_VAR 0 3
19111: ARRAY
19112: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19113: LD_VAR 0 5
19117: PUSH
19118: LD_INT 1
19120: ARRAY
19121: PPUSH
19122: CALL_OW 302
19126: NOT
19127: PUSH
19128: LD_VAR 0 5
19132: PUSH
19133: LD_INT 1
19135: ARRAY
19136: PPUSH
19137: CALL_OW 255
19141: PUSH
19142: LD_VAR 0 1
19146: PPUSH
19147: CALL_OW 255
19151: NONEQUAL
19152: OR
19153: IFFALSE 19259
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19155: LD_VAR 0 5
19159: PUSH
19160: LD_INT 1
19162: ARRAY
19163: PPUSH
19164: CALL_OW 305
19168: PUSH
19169: LD_VAR 0 5
19173: PUSH
19174: LD_INT 1
19176: ARRAY
19177: PPUSH
19178: CALL_OW 255
19182: PUSH
19183: LD_VAR 0 1
19187: PPUSH
19188: CALL_OW 255
19192: EQUAL
19193: AND
19194: IFFALSE 19218
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19196: LD_VAR 0 5
19200: PUSH
19201: LD_INT 1
19203: ARRAY
19204: PPUSH
19205: LD_VAR 0 5
19209: PUSH
19210: LD_INT 2
19212: ARRAY
19213: PPUSH
19214: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19218: LD_ADDR_EXP 114
19222: PUSH
19223: LD_EXP 114
19227: PPUSH
19228: LD_VAR 0 4
19232: PPUSH
19233: LD_EXP 114
19237: PUSH
19238: LD_VAR 0 4
19242: ARRAY
19243: PPUSH
19244: LD_VAR 0 3
19248: PPUSH
19249: CALL_OW 3
19253: PPUSH
19254: CALL_OW 1
19258: ST_TO_ADDR
// end ; end ;
19259: GO 19088
19261: POP
19262: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19263: LD_VAR 0 1
19267: PPUSH
19268: LD_EXP 114
19272: PUSH
19273: LD_VAR 0 4
19277: ARRAY
19278: PUSH
19279: LD_INT 0
19281: PLUS
19282: PPUSH
19283: CALL_OW 505
// end ;
19287: LD_VAR 0 2
19291: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19292: LD_INT 0
19294: PPUSH
19295: PPUSH
19296: PPUSH
19297: PPUSH
// if not hack in hackTanks then
19298: LD_VAR 0 1
19302: PUSH
19303: LD_EXP 113
19307: IN
19308: NOT
19309: IFFALSE 19313
// exit ;
19311: GO 19398
// index := GetElementIndex ( hackTanks , hack ) ;
19313: LD_ADDR_VAR 0 5
19317: PUSH
19318: LD_EXP 113
19322: PPUSH
19323: LD_VAR 0 1
19327: PPUSH
19328: CALL 26148 0 2
19332: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19333: LD_ADDR_VAR 0 4
19337: PUSH
19338: DOUBLE
19339: LD_INT 1
19341: DEC
19342: ST_TO_ADDR
19343: LD_EXP 114
19347: PUSH
19348: LD_VAR 0 5
19352: ARRAY
19353: PUSH
19354: FOR_TO
19355: IFFALSE 19396
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19357: LD_EXP 114
19361: PUSH
19362: LD_VAR 0 5
19366: ARRAY
19367: PUSH
19368: LD_VAR 0 4
19372: ARRAY
19373: PUSH
19374: LD_INT 1
19376: ARRAY
19377: PUSH
19378: LD_VAR 0 2
19382: EQUAL
19383: IFFALSE 19394
// KillUnit ( vehicle ) ;
19385: LD_VAR 0 2
19389: PPUSH
19390: CALL_OW 66
19394: GO 19354
19396: POP
19397: POP
// end ;
19398: LD_VAR 0 3
19402: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19403: LD_EXP 118
19407: NOT
19408: IFFALSE 19443
19410: GO 19412
19412: DISABLE
// begin initMiner := true ;
19413: LD_ADDR_EXP 118
19417: PUSH
19418: LD_INT 1
19420: ST_TO_ADDR
// minersList := [ ] ;
19421: LD_ADDR_EXP 119
19425: PUSH
19426: EMPTY
19427: ST_TO_ADDR
// minerMinesList := [ ] ;
19428: LD_ADDR_EXP 120
19432: PUSH
19433: EMPTY
19434: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19435: LD_ADDR_EXP 121
19439: PUSH
19440: LD_INT 5
19442: ST_TO_ADDR
// end ;
19443: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19444: LD_EXP 118
19448: PUSH
19449: LD_INT 34
19451: PUSH
19452: LD_EXP 46
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PPUSH
19461: CALL_OW 69
19465: AND
19466: IFFALSE 19929
19468: GO 19470
19470: DISABLE
19471: LD_INT 0
19473: PPUSH
19474: PPUSH
19475: PPUSH
19476: PPUSH
// begin enable ;
19477: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
19478: LD_ADDR_VAR 0 1
19482: PUSH
19483: LD_INT 34
19485: PUSH
19486: LD_EXP 46
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PPUSH
19495: CALL_OW 69
19499: PUSH
19500: FOR_IN
19501: IFFALSE 19573
// begin if not i in minersList then
19503: LD_VAR 0 1
19507: PUSH
19508: LD_EXP 119
19512: IN
19513: NOT
19514: IFFALSE 19571
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19516: LD_ADDR_EXP 119
19520: PUSH
19521: LD_EXP 119
19525: PPUSH
19526: LD_EXP 119
19530: PUSH
19531: LD_INT 1
19533: PLUS
19534: PPUSH
19535: LD_VAR 0 1
19539: PPUSH
19540: CALL_OW 1
19544: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
19545: LD_ADDR_EXP 120
19549: PUSH
19550: LD_EXP 120
19554: PPUSH
19555: LD_EXP 120
19559: PUSH
19560: LD_INT 1
19562: PLUS
19563: PPUSH
19564: EMPTY
19565: PPUSH
19566: CALL_OW 1
19570: ST_TO_ADDR
// end end ;
19571: GO 19500
19573: POP
19574: POP
// for i := minerMinesList downto 1 do
19575: LD_ADDR_VAR 0 1
19579: PUSH
19580: DOUBLE
19581: LD_EXP 120
19585: INC
19586: ST_TO_ADDR
19587: LD_INT 1
19589: PUSH
19590: FOR_DOWNTO
19591: IFFALSE 19927
// begin if IsLive ( minersList [ i ] ) then
19593: LD_EXP 119
19597: PUSH
19598: LD_VAR 0 1
19602: ARRAY
19603: PPUSH
19604: CALL_OW 300
19608: IFFALSE 19636
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
19610: LD_EXP 119
19614: PUSH
19615: LD_VAR 0 1
19619: ARRAY
19620: PPUSH
19621: LD_EXP 120
19625: PUSH
19626: LD_VAR 0 1
19630: ARRAY
19631: PPUSH
19632: CALL_OW 505
// if not minerMinesList [ i ] then
19636: LD_EXP 120
19640: PUSH
19641: LD_VAR 0 1
19645: ARRAY
19646: NOT
19647: IFFALSE 19651
// continue ;
19649: GO 19590
// for j := minerMinesList [ i ] downto 1 do
19651: LD_ADDR_VAR 0 2
19655: PUSH
19656: DOUBLE
19657: LD_EXP 120
19661: PUSH
19662: LD_VAR 0 1
19666: ARRAY
19667: INC
19668: ST_TO_ADDR
19669: LD_INT 1
19671: PUSH
19672: FOR_DOWNTO
19673: IFFALSE 19923
// begin side := GetSide ( minersList [ i ] ) ;
19675: LD_ADDR_VAR 0 3
19679: PUSH
19680: LD_EXP 119
19684: PUSH
19685: LD_VAR 0 1
19689: ARRAY
19690: PPUSH
19691: CALL_OW 255
19695: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19696: LD_ADDR_VAR 0 4
19700: PUSH
19701: LD_EXP 120
19705: PUSH
19706: LD_VAR 0 1
19710: ARRAY
19711: PUSH
19712: LD_VAR 0 2
19716: ARRAY
19717: PUSH
19718: LD_INT 1
19720: ARRAY
19721: PPUSH
19722: LD_EXP 120
19726: PUSH
19727: LD_VAR 0 1
19731: ARRAY
19732: PUSH
19733: LD_VAR 0 2
19737: ARRAY
19738: PUSH
19739: LD_INT 2
19741: ARRAY
19742: PPUSH
19743: CALL_OW 428
19747: ST_TO_ADDR
// if not tmp then
19748: LD_VAR 0 4
19752: NOT
19753: IFFALSE 19757
// continue ;
19755: GO 19672
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19757: LD_VAR 0 4
19761: PUSH
19762: LD_INT 81
19764: PUSH
19765: LD_VAR 0 3
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PPUSH
19774: CALL_OW 69
19778: IN
19779: PUSH
19780: LD_EXP 120
19784: PUSH
19785: LD_VAR 0 1
19789: ARRAY
19790: PUSH
19791: LD_VAR 0 2
19795: ARRAY
19796: PUSH
19797: LD_INT 1
19799: ARRAY
19800: PPUSH
19801: LD_EXP 120
19805: PUSH
19806: LD_VAR 0 1
19810: ARRAY
19811: PUSH
19812: LD_VAR 0 2
19816: ARRAY
19817: PUSH
19818: LD_INT 2
19820: ARRAY
19821: PPUSH
19822: CALL_OW 458
19826: AND
19827: IFFALSE 19921
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
19829: LD_EXP 120
19833: PUSH
19834: LD_VAR 0 1
19838: ARRAY
19839: PUSH
19840: LD_VAR 0 2
19844: ARRAY
19845: PUSH
19846: LD_INT 1
19848: ARRAY
19849: PPUSH
19850: LD_EXP 120
19854: PUSH
19855: LD_VAR 0 1
19859: ARRAY
19860: PUSH
19861: LD_VAR 0 2
19865: ARRAY
19866: PUSH
19867: LD_INT 2
19869: ARRAY
19870: PPUSH
19871: LD_VAR 0 3
19875: PPUSH
19876: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
19880: LD_ADDR_EXP 120
19884: PUSH
19885: LD_EXP 120
19889: PPUSH
19890: LD_VAR 0 1
19894: PPUSH
19895: LD_EXP 120
19899: PUSH
19900: LD_VAR 0 1
19904: ARRAY
19905: PPUSH
19906: LD_VAR 0 2
19910: PPUSH
19911: CALL_OW 3
19915: PPUSH
19916: CALL_OW 1
19920: ST_TO_ADDR
// end ; end ;
19921: GO 19672
19923: POP
19924: POP
// end ;
19925: GO 19590
19927: POP
19928: POP
// end ;
19929: PPOPN 4
19931: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
19932: LD_INT 0
19934: PPUSH
19935: PPUSH
// result := false ;
19936: LD_ADDR_VAR 0 4
19940: PUSH
19941: LD_INT 0
19943: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
19944: LD_VAR 0 1
19948: PPUSH
19949: CALL_OW 264
19953: PUSH
19954: LD_EXP 46
19958: EQUAL
19959: NOT
19960: IFFALSE 19964
// exit ;
19962: GO 20204
// index := GetElementIndex ( minersList , unit ) ;
19964: LD_ADDR_VAR 0 5
19968: PUSH
19969: LD_EXP 119
19973: PPUSH
19974: LD_VAR 0 1
19978: PPUSH
19979: CALL 26148 0 2
19983: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
19984: LD_EXP 120
19988: PUSH
19989: LD_VAR 0 5
19993: ARRAY
19994: PUSH
19995: LD_EXP 121
19999: GREATEREQUAL
20000: IFFALSE 20004
// exit ;
20002: GO 20204
// ComMoveXY ( unit , x , y ) ;
20004: LD_VAR 0 1
20008: PPUSH
20009: LD_VAR 0 2
20013: PPUSH
20014: LD_VAR 0 3
20018: PPUSH
20019: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20023: LD_INT 35
20025: PPUSH
20026: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20030: LD_VAR 0 1
20034: PPUSH
20035: LD_VAR 0 2
20039: PPUSH
20040: LD_VAR 0 3
20044: PPUSH
20045: CALL 56545 0 3
20049: NOT
20050: PUSH
20051: LD_VAR 0 1
20055: PPUSH
20056: CALL_OW 314
20060: AND
20061: IFFALSE 20065
// exit ;
20063: GO 20204
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20065: LD_VAR 0 2
20069: PPUSH
20070: LD_VAR 0 3
20074: PPUSH
20075: CALL_OW 428
20079: PUSH
20080: LD_VAR 0 1
20084: EQUAL
20085: PUSH
20086: LD_VAR 0 1
20090: PPUSH
20091: CALL_OW 314
20095: NOT
20096: AND
20097: IFFALSE 20023
// PlaySoundXY ( x , y , PlantMine ) ;
20099: LD_VAR 0 2
20103: PPUSH
20104: LD_VAR 0 3
20108: PPUSH
20109: LD_STRING PlantMine
20111: PPUSH
20112: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20116: LD_VAR 0 2
20120: PPUSH
20121: LD_VAR 0 3
20125: PPUSH
20126: LD_VAR 0 1
20130: PPUSH
20131: CALL_OW 255
20135: PPUSH
20136: LD_INT 0
20138: PPUSH
20139: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20143: LD_ADDR_EXP 120
20147: PUSH
20148: LD_EXP 120
20152: PPUSH
20153: LD_VAR 0 5
20157: PUSH
20158: LD_EXP 120
20162: PUSH
20163: LD_VAR 0 5
20167: ARRAY
20168: PUSH
20169: LD_INT 1
20171: PLUS
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: PPUSH
20177: LD_VAR 0 2
20181: PUSH
20182: LD_VAR 0 3
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PPUSH
20191: CALL 26363 0 3
20195: ST_TO_ADDR
// result := true ;
20196: LD_ADDR_VAR 0 4
20200: PUSH
20201: LD_INT 1
20203: ST_TO_ADDR
// end ;
20204: LD_VAR 0 4
20208: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20209: LD_INT 0
20211: PPUSH
20212: PPUSH
20213: PPUSH
// if not unit in minersList then
20214: LD_VAR 0 1
20218: PUSH
20219: LD_EXP 119
20223: IN
20224: NOT
20225: IFFALSE 20229
// exit ;
20227: GO 20621
// index := GetElementIndex ( minersList , unit ) ;
20229: LD_ADDR_VAR 0 6
20233: PUSH
20234: LD_EXP 119
20238: PPUSH
20239: LD_VAR 0 1
20243: PPUSH
20244: CALL 26148 0 2
20248: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20249: LD_ADDR_VAR 0 5
20253: PUSH
20254: DOUBLE
20255: LD_EXP 120
20259: PUSH
20260: LD_VAR 0 6
20264: ARRAY
20265: INC
20266: ST_TO_ADDR
20267: LD_INT 1
20269: PUSH
20270: FOR_DOWNTO
20271: IFFALSE 20432
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20273: LD_EXP 120
20277: PUSH
20278: LD_VAR 0 6
20282: ARRAY
20283: PUSH
20284: LD_VAR 0 5
20288: ARRAY
20289: PUSH
20290: LD_INT 1
20292: ARRAY
20293: PUSH
20294: LD_VAR 0 2
20298: EQUAL
20299: PUSH
20300: LD_EXP 120
20304: PUSH
20305: LD_VAR 0 6
20309: ARRAY
20310: PUSH
20311: LD_VAR 0 5
20315: ARRAY
20316: PUSH
20317: LD_INT 2
20319: ARRAY
20320: PUSH
20321: LD_VAR 0 3
20325: EQUAL
20326: AND
20327: IFFALSE 20430
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20329: LD_EXP 120
20333: PUSH
20334: LD_VAR 0 6
20338: ARRAY
20339: PUSH
20340: LD_VAR 0 5
20344: ARRAY
20345: PUSH
20346: LD_INT 1
20348: ARRAY
20349: PPUSH
20350: LD_EXP 120
20354: PUSH
20355: LD_VAR 0 6
20359: ARRAY
20360: PUSH
20361: LD_VAR 0 5
20365: ARRAY
20366: PUSH
20367: LD_INT 2
20369: ARRAY
20370: PPUSH
20371: LD_VAR 0 1
20375: PPUSH
20376: CALL_OW 255
20380: PPUSH
20381: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20385: LD_ADDR_EXP 120
20389: PUSH
20390: LD_EXP 120
20394: PPUSH
20395: LD_VAR 0 6
20399: PPUSH
20400: LD_EXP 120
20404: PUSH
20405: LD_VAR 0 6
20409: ARRAY
20410: PPUSH
20411: LD_VAR 0 5
20415: PPUSH
20416: CALL_OW 3
20420: PPUSH
20421: CALL_OW 1
20425: ST_TO_ADDR
// exit ;
20426: POP
20427: POP
20428: GO 20621
// end ; end ;
20430: GO 20270
20432: POP
20433: POP
// for i := minerMinesList [ index ] downto 1 do
20434: LD_ADDR_VAR 0 5
20438: PUSH
20439: DOUBLE
20440: LD_EXP 120
20444: PUSH
20445: LD_VAR 0 6
20449: ARRAY
20450: INC
20451: ST_TO_ADDR
20452: LD_INT 1
20454: PUSH
20455: FOR_DOWNTO
20456: IFFALSE 20619
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20458: LD_EXP 120
20462: PUSH
20463: LD_VAR 0 6
20467: ARRAY
20468: PUSH
20469: LD_VAR 0 5
20473: ARRAY
20474: PUSH
20475: LD_INT 1
20477: ARRAY
20478: PPUSH
20479: LD_EXP 120
20483: PUSH
20484: LD_VAR 0 6
20488: ARRAY
20489: PUSH
20490: LD_VAR 0 5
20494: ARRAY
20495: PUSH
20496: LD_INT 2
20498: ARRAY
20499: PPUSH
20500: LD_VAR 0 2
20504: PPUSH
20505: LD_VAR 0 3
20509: PPUSH
20510: CALL_OW 298
20514: PUSH
20515: LD_INT 6
20517: LESS
20518: IFFALSE 20617
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20520: LD_EXP 120
20524: PUSH
20525: LD_VAR 0 6
20529: ARRAY
20530: PUSH
20531: LD_VAR 0 5
20535: ARRAY
20536: PUSH
20537: LD_INT 1
20539: ARRAY
20540: PPUSH
20541: LD_EXP 120
20545: PUSH
20546: LD_VAR 0 6
20550: ARRAY
20551: PUSH
20552: LD_VAR 0 5
20556: ARRAY
20557: PUSH
20558: LD_INT 2
20560: ARRAY
20561: PPUSH
20562: LD_VAR 0 1
20566: PPUSH
20567: CALL_OW 255
20571: PPUSH
20572: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20576: LD_ADDR_EXP 120
20580: PUSH
20581: LD_EXP 120
20585: PPUSH
20586: LD_VAR 0 6
20590: PPUSH
20591: LD_EXP 120
20595: PUSH
20596: LD_VAR 0 6
20600: ARRAY
20601: PPUSH
20602: LD_VAR 0 5
20606: PPUSH
20607: CALL_OW 3
20611: PPUSH
20612: CALL_OW 1
20616: ST_TO_ADDR
// end ; end ;
20617: GO 20455
20619: POP
20620: POP
// end ;
20621: LD_VAR 0 4
20625: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20626: LD_INT 0
20628: PPUSH
20629: PPUSH
20630: PPUSH
20631: PPUSH
20632: PPUSH
20633: PPUSH
20634: PPUSH
20635: PPUSH
20636: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20637: LD_VAR 0 1
20641: PPUSH
20642: CALL_OW 264
20646: PUSH
20647: LD_EXP 46
20651: EQUAL
20652: NOT
20653: PUSH
20654: LD_VAR 0 1
20658: PUSH
20659: LD_EXP 119
20663: IN
20664: NOT
20665: OR
20666: IFFALSE 20670
// exit ;
20668: GO 20992
// index := GetElementIndex ( minersList , unit ) ;
20670: LD_ADDR_VAR 0 6
20674: PUSH
20675: LD_EXP 119
20679: PPUSH
20680: LD_VAR 0 1
20684: PPUSH
20685: CALL 26148 0 2
20689: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20690: LD_ADDR_VAR 0 8
20694: PUSH
20695: LD_EXP 121
20699: PUSH
20700: LD_EXP 120
20704: PUSH
20705: LD_VAR 0 6
20709: ARRAY
20710: MINUS
20711: ST_TO_ADDR
// if not minesFreeAmount then
20712: LD_VAR 0 8
20716: NOT
20717: IFFALSE 20721
// exit ;
20719: GO 20992
// tmp := [ ] ;
20721: LD_ADDR_VAR 0 7
20725: PUSH
20726: EMPTY
20727: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20728: LD_ADDR_VAR 0 5
20732: PUSH
20733: DOUBLE
20734: LD_INT 1
20736: DEC
20737: ST_TO_ADDR
20738: LD_VAR 0 8
20742: PUSH
20743: FOR_TO
20744: IFFALSE 20939
// begin _d := rand ( 0 , 5 ) ;
20746: LD_ADDR_VAR 0 11
20750: PUSH
20751: LD_INT 0
20753: PPUSH
20754: LD_INT 5
20756: PPUSH
20757: CALL_OW 12
20761: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20762: LD_ADDR_VAR 0 12
20766: PUSH
20767: LD_INT 2
20769: PPUSH
20770: LD_INT 6
20772: PPUSH
20773: CALL_OW 12
20777: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
20778: LD_ADDR_VAR 0 9
20782: PUSH
20783: LD_VAR 0 2
20787: PPUSH
20788: LD_VAR 0 11
20792: PPUSH
20793: LD_VAR 0 12
20797: PPUSH
20798: CALL_OW 272
20802: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
20803: LD_ADDR_VAR 0 10
20807: PUSH
20808: LD_VAR 0 3
20812: PPUSH
20813: LD_VAR 0 11
20817: PPUSH
20818: LD_VAR 0 12
20822: PPUSH
20823: CALL_OW 273
20827: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
20828: LD_VAR 0 9
20832: PPUSH
20833: LD_VAR 0 10
20837: PPUSH
20838: CALL_OW 488
20842: PUSH
20843: LD_VAR 0 9
20847: PUSH
20848: LD_VAR 0 10
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: LD_VAR 0 7
20861: IN
20862: NOT
20863: AND
20864: PUSH
20865: LD_VAR 0 9
20869: PPUSH
20870: LD_VAR 0 10
20874: PPUSH
20875: CALL_OW 458
20879: NOT
20880: AND
20881: IFFALSE 20923
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
20883: LD_ADDR_VAR 0 7
20887: PUSH
20888: LD_VAR 0 7
20892: PPUSH
20893: LD_VAR 0 7
20897: PUSH
20898: LD_INT 1
20900: PLUS
20901: PPUSH
20902: LD_VAR 0 9
20906: PUSH
20907: LD_VAR 0 10
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PPUSH
20916: CALL_OW 1
20920: ST_TO_ADDR
20921: GO 20937
// i := i - 1 ;
20923: LD_ADDR_VAR 0 5
20927: PUSH
20928: LD_VAR 0 5
20932: PUSH
20933: LD_INT 1
20935: MINUS
20936: ST_TO_ADDR
// end ;
20937: GO 20743
20939: POP
20940: POP
// for i in tmp do
20941: LD_ADDR_VAR 0 5
20945: PUSH
20946: LD_VAR 0 7
20950: PUSH
20951: FOR_IN
20952: IFFALSE 20990
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
20954: LD_VAR 0 1
20958: PPUSH
20959: LD_VAR 0 5
20963: PUSH
20964: LD_INT 1
20966: ARRAY
20967: PPUSH
20968: LD_VAR 0 5
20972: PUSH
20973: LD_INT 2
20975: ARRAY
20976: PPUSH
20977: CALL 19932 0 3
20981: NOT
20982: IFFALSE 20988
// exit ;
20984: POP
20985: POP
20986: GO 20992
20988: GO 20951
20990: POP
20991: POP
// end ;
20992: LD_VAR 0 4
20996: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
20997: LD_INT 0
20999: PPUSH
21000: PPUSH
21001: PPUSH
21002: PPUSH
21003: PPUSH
21004: PPUSH
21005: PPUSH
// if not GetClass ( unit ) = class_sniper then
21006: LD_VAR 0 1
21010: PPUSH
21011: CALL_OW 257
21015: PUSH
21016: LD_INT 5
21018: EQUAL
21019: NOT
21020: IFFALSE 21024
// exit ;
21022: GO 21412
// dist := 8 ;
21024: LD_ADDR_VAR 0 5
21028: PUSH
21029: LD_INT 8
21031: ST_TO_ADDR
// viewRange := 12 ;
21032: LD_ADDR_VAR 0 7
21036: PUSH
21037: LD_INT 12
21039: ST_TO_ADDR
// side := GetSide ( unit ) ;
21040: LD_ADDR_VAR 0 6
21044: PUSH
21045: LD_VAR 0 1
21049: PPUSH
21050: CALL_OW 255
21054: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21055: LD_INT 61
21057: PPUSH
21058: LD_VAR 0 6
21062: PPUSH
21063: CALL_OW 321
21067: PUSH
21068: LD_INT 2
21070: EQUAL
21071: IFFALSE 21081
// viewRange := 16 ;
21073: LD_ADDR_VAR 0 7
21077: PUSH
21078: LD_INT 16
21080: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21081: LD_VAR 0 1
21085: PPUSH
21086: LD_VAR 0 2
21090: PPUSH
21091: LD_VAR 0 3
21095: PPUSH
21096: CALL_OW 297
21100: PUSH
21101: LD_VAR 0 5
21105: GREATER
21106: IFFALSE 21185
// begin ComMoveXY ( unit , x , y ) ;
21108: LD_VAR 0 1
21112: PPUSH
21113: LD_VAR 0 2
21117: PPUSH
21118: LD_VAR 0 3
21122: PPUSH
21123: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21127: LD_INT 35
21129: PPUSH
21130: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21134: LD_VAR 0 1
21138: PPUSH
21139: LD_VAR 0 2
21143: PPUSH
21144: LD_VAR 0 3
21148: PPUSH
21149: CALL 56545 0 3
21153: NOT
21154: IFFALSE 21158
// exit ;
21156: GO 21412
// until GetDistUnitXY ( unit , x , y ) < dist ;
21158: LD_VAR 0 1
21162: PPUSH
21163: LD_VAR 0 2
21167: PPUSH
21168: LD_VAR 0 3
21172: PPUSH
21173: CALL_OW 297
21177: PUSH
21178: LD_VAR 0 5
21182: LESS
21183: IFFALSE 21127
// end ; ComTurnXY ( unit , x , y ) ;
21185: LD_VAR 0 1
21189: PPUSH
21190: LD_VAR 0 2
21194: PPUSH
21195: LD_VAR 0 3
21199: PPUSH
21200: CALL_OW 118
// wait ( 5 ) ;
21204: LD_INT 5
21206: PPUSH
21207: CALL_OW 67
// _d := GetDir ( unit ) ;
21211: LD_ADDR_VAR 0 10
21215: PUSH
21216: LD_VAR 0 1
21220: PPUSH
21221: CALL_OW 254
21225: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21226: LD_ADDR_VAR 0 8
21230: PUSH
21231: LD_VAR 0 1
21235: PPUSH
21236: CALL_OW 250
21240: PPUSH
21241: LD_VAR 0 10
21245: PPUSH
21246: LD_VAR 0 5
21250: PPUSH
21251: CALL_OW 272
21255: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21256: LD_ADDR_VAR 0 9
21260: PUSH
21261: LD_VAR 0 1
21265: PPUSH
21266: CALL_OW 251
21270: PPUSH
21271: LD_VAR 0 10
21275: PPUSH
21276: LD_VAR 0 5
21280: PPUSH
21281: CALL_OW 273
21285: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21286: LD_VAR 0 8
21290: PPUSH
21291: LD_VAR 0 9
21295: PPUSH
21296: CALL_OW 488
21300: NOT
21301: IFFALSE 21305
// exit ;
21303: GO 21412
// ComAnimCustom ( unit , 1 ) ;
21305: LD_VAR 0 1
21309: PPUSH
21310: LD_INT 1
21312: PPUSH
21313: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21317: LD_VAR 0 8
21321: PPUSH
21322: LD_VAR 0 9
21326: PPUSH
21327: LD_VAR 0 6
21331: PPUSH
21332: LD_VAR 0 7
21336: PPUSH
21337: CALL_OW 330
// repeat wait ( 1 ) ;
21341: LD_INT 1
21343: PPUSH
21344: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
21348: LD_VAR 0 1
21352: PPUSH
21353: CALL_OW 316
21357: PUSH
21358: LD_VAR 0 1
21362: PPUSH
21363: CALL_OW 314
21367: OR
21368: PUSH
21369: LD_VAR 0 1
21373: PPUSH
21374: CALL_OW 302
21378: NOT
21379: OR
21380: PUSH
21381: LD_VAR 0 1
21385: PPUSH
21386: CALL_OW 301
21390: OR
21391: IFFALSE 21341
// RemoveSeeing ( _x , _y , side ) ;
21393: LD_VAR 0 8
21397: PPUSH
21398: LD_VAR 0 9
21402: PPUSH
21403: LD_VAR 0 6
21407: PPUSH
21408: CALL_OW 331
// end ; end_of_file
21412: LD_VAR 0 4
21416: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21417: LD_INT 0
21419: PPUSH
21420: PPUSH
// if exist_mode then
21421: LD_VAR 0 2
21425: IFFALSE 21450
// unit := CreateCharacter ( prefix & ident ) else
21427: LD_ADDR_VAR 0 5
21431: PUSH
21432: LD_VAR 0 3
21436: PUSH
21437: LD_VAR 0 1
21441: STR
21442: PPUSH
21443: CALL_OW 34
21447: ST_TO_ADDR
21448: GO 21465
// unit := NewCharacter ( ident ) ;
21450: LD_ADDR_VAR 0 5
21454: PUSH
21455: LD_VAR 0 1
21459: PPUSH
21460: CALL_OW 25
21464: ST_TO_ADDR
// result := unit ;
21465: LD_ADDR_VAR 0 4
21469: PUSH
21470: LD_VAR 0 5
21474: ST_TO_ADDR
// end ;
21475: LD_VAR 0 4
21479: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21480: LD_INT 0
21482: PPUSH
21483: PPUSH
// if not side or not nation then
21484: LD_VAR 0 1
21488: NOT
21489: PUSH
21490: LD_VAR 0 2
21494: NOT
21495: OR
21496: IFFALSE 21500
// exit ;
21498: GO 22264
// case nation of nation_american :
21500: LD_VAR 0 2
21504: PUSH
21505: LD_INT 1
21507: DOUBLE
21508: EQUAL
21509: IFTRUE 21513
21511: GO 21727
21513: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21514: LD_ADDR_VAR 0 4
21518: PUSH
21519: LD_INT 35
21521: PUSH
21522: LD_INT 45
21524: PUSH
21525: LD_INT 46
21527: PUSH
21528: LD_INT 47
21530: PUSH
21531: LD_INT 82
21533: PUSH
21534: LD_INT 83
21536: PUSH
21537: LD_INT 84
21539: PUSH
21540: LD_INT 85
21542: PUSH
21543: LD_INT 86
21545: PUSH
21546: LD_INT 1
21548: PUSH
21549: LD_INT 2
21551: PUSH
21552: LD_INT 6
21554: PUSH
21555: LD_INT 15
21557: PUSH
21558: LD_INT 16
21560: PUSH
21561: LD_INT 7
21563: PUSH
21564: LD_INT 12
21566: PUSH
21567: LD_INT 13
21569: PUSH
21570: LD_INT 10
21572: PUSH
21573: LD_INT 14
21575: PUSH
21576: LD_INT 20
21578: PUSH
21579: LD_INT 21
21581: PUSH
21582: LD_INT 22
21584: PUSH
21585: LD_INT 25
21587: PUSH
21588: LD_INT 32
21590: PUSH
21591: LD_INT 27
21593: PUSH
21594: LD_INT 36
21596: PUSH
21597: LD_INT 69
21599: PUSH
21600: LD_INT 39
21602: PUSH
21603: LD_INT 34
21605: PUSH
21606: LD_INT 40
21608: PUSH
21609: LD_INT 48
21611: PUSH
21612: LD_INT 49
21614: PUSH
21615: LD_INT 50
21617: PUSH
21618: LD_INT 51
21620: PUSH
21621: LD_INT 52
21623: PUSH
21624: LD_INT 53
21626: PUSH
21627: LD_INT 54
21629: PUSH
21630: LD_INT 55
21632: PUSH
21633: LD_INT 56
21635: PUSH
21636: LD_INT 57
21638: PUSH
21639: LD_INT 58
21641: PUSH
21642: LD_INT 59
21644: PUSH
21645: LD_INT 60
21647: PUSH
21648: LD_INT 61
21650: PUSH
21651: LD_INT 62
21653: PUSH
21654: LD_INT 80
21656: PUSH
21657: LD_INT 82
21659: PUSH
21660: LD_INT 83
21662: PUSH
21663: LD_INT 84
21665: PUSH
21666: LD_INT 85
21668: PUSH
21669: LD_INT 86
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: ST_TO_ADDR
21725: GO 22188
21727: LD_INT 2
21729: DOUBLE
21730: EQUAL
21731: IFTRUE 21735
21733: GO 21957
21735: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
21736: LD_ADDR_VAR 0 4
21740: PUSH
21741: LD_INT 35
21743: PUSH
21744: LD_INT 45
21746: PUSH
21747: LD_INT 46
21749: PUSH
21750: LD_INT 47
21752: PUSH
21753: LD_INT 82
21755: PUSH
21756: LD_INT 83
21758: PUSH
21759: LD_INT 84
21761: PUSH
21762: LD_INT 85
21764: PUSH
21765: LD_INT 87
21767: PUSH
21768: LD_INT 70
21770: PUSH
21771: LD_INT 1
21773: PUSH
21774: LD_INT 11
21776: PUSH
21777: LD_INT 3
21779: PUSH
21780: LD_INT 4
21782: PUSH
21783: LD_INT 5
21785: PUSH
21786: LD_INT 6
21788: PUSH
21789: LD_INT 15
21791: PUSH
21792: LD_INT 18
21794: PUSH
21795: LD_INT 7
21797: PUSH
21798: LD_INT 17
21800: PUSH
21801: LD_INT 8
21803: PUSH
21804: LD_INT 20
21806: PUSH
21807: LD_INT 21
21809: PUSH
21810: LD_INT 22
21812: PUSH
21813: LD_INT 72
21815: PUSH
21816: LD_INT 26
21818: PUSH
21819: LD_INT 69
21821: PUSH
21822: LD_INT 39
21824: PUSH
21825: LD_INT 40
21827: PUSH
21828: LD_INT 41
21830: PUSH
21831: LD_INT 42
21833: PUSH
21834: LD_INT 43
21836: PUSH
21837: LD_INT 48
21839: PUSH
21840: LD_INT 49
21842: PUSH
21843: LD_INT 50
21845: PUSH
21846: LD_INT 51
21848: PUSH
21849: LD_INT 52
21851: PUSH
21852: LD_INT 53
21854: PUSH
21855: LD_INT 54
21857: PUSH
21858: LD_INT 55
21860: PUSH
21861: LD_INT 56
21863: PUSH
21864: LD_INT 60
21866: PUSH
21867: LD_INT 61
21869: PUSH
21870: LD_INT 62
21872: PUSH
21873: LD_INT 66
21875: PUSH
21876: LD_INT 67
21878: PUSH
21879: LD_INT 68
21881: PUSH
21882: LD_INT 81
21884: PUSH
21885: LD_INT 82
21887: PUSH
21888: LD_INT 83
21890: PUSH
21891: LD_INT 84
21893: PUSH
21894: LD_INT 85
21896: PUSH
21897: LD_INT 87
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: ST_TO_ADDR
21955: GO 22188
21957: LD_INT 3
21959: DOUBLE
21960: EQUAL
21961: IFTRUE 21965
21963: GO 22187
21965: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21966: LD_ADDR_VAR 0 4
21970: PUSH
21971: LD_INT 46
21973: PUSH
21974: LD_INT 47
21976: PUSH
21977: LD_INT 1
21979: PUSH
21980: LD_INT 2
21982: PUSH
21983: LD_INT 82
21985: PUSH
21986: LD_INT 83
21988: PUSH
21989: LD_INT 84
21991: PUSH
21992: LD_INT 85
21994: PUSH
21995: LD_INT 86
21997: PUSH
21998: LD_INT 11
22000: PUSH
22001: LD_INT 9
22003: PUSH
22004: LD_INT 20
22006: PUSH
22007: LD_INT 19
22009: PUSH
22010: LD_INT 21
22012: PUSH
22013: LD_INT 24
22015: PUSH
22016: LD_INT 22
22018: PUSH
22019: LD_INT 25
22021: PUSH
22022: LD_INT 28
22024: PUSH
22025: LD_INT 29
22027: PUSH
22028: LD_INT 30
22030: PUSH
22031: LD_INT 31
22033: PUSH
22034: LD_INT 37
22036: PUSH
22037: LD_INT 38
22039: PUSH
22040: LD_INT 32
22042: PUSH
22043: LD_INT 27
22045: PUSH
22046: LD_INT 33
22048: PUSH
22049: LD_INT 69
22051: PUSH
22052: LD_INT 39
22054: PUSH
22055: LD_INT 34
22057: PUSH
22058: LD_INT 40
22060: PUSH
22061: LD_INT 71
22063: PUSH
22064: LD_INT 23
22066: PUSH
22067: LD_INT 44
22069: PUSH
22070: LD_INT 48
22072: PUSH
22073: LD_INT 49
22075: PUSH
22076: LD_INT 50
22078: PUSH
22079: LD_INT 51
22081: PUSH
22082: LD_INT 52
22084: PUSH
22085: LD_INT 53
22087: PUSH
22088: LD_INT 54
22090: PUSH
22091: LD_INT 55
22093: PUSH
22094: LD_INT 56
22096: PUSH
22097: LD_INT 57
22099: PUSH
22100: LD_INT 58
22102: PUSH
22103: LD_INT 59
22105: PUSH
22106: LD_INT 63
22108: PUSH
22109: LD_INT 64
22111: PUSH
22112: LD_INT 65
22114: PUSH
22115: LD_INT 82
22117: PUSH
22118: LD_INT 83
22120: PUSH
22121: LD_INT 84
22123: PUSH
22124: LD_INT 85
22126: PUSH
22127: LD_INT 86
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: ST_TO_ADDR
22185: GO 22188
22187: POP
// if state > - 1 and state < 3 then
22188: LD_VAR 0 3
22192: PUSH
22193: LD_INT 1
22195: NEG
22196: GREATER
22197: PUSH
22198: LD_VAR 0 3
22202: PUSH
22203: LD_INT 3
22205: LESS
22206: AND
22207: IFFALSE 22264
// for i in result do
22209: LD_ADDR_VAR 0 5
22213: PUSH
22214: LD_VAR 0 4
22218: PUSH
22219: FOR_IN
22220: IFFALSE 22262
// if GetTech ( i , side ) <> state then
22222: LD_VAR 0 5
22226: PPUSH
22227: LD_VAR 0 1
22231: PPUSH
22232: CALL_OW 321
22236: PUSH
22237: LD_VAR 0 3
22241: NONEQUAL
22242: IFFALSE 22260
// result := result diff i ;
22244: LD_ADDR_VAR 0 4
22248: PUSH
22249: LD_VAR 0 4
22253: PUSH
22254: LD_VAR 0 5
22258: DIFF
22259: ST_TO_ADDR
22260: GO 22219
22262: POP
22263: POP
// end ;
22264: LD_VAR 0 4
22268: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22269: LD_INT 0
22271: PPUSH
22272: PPUSH
22273: PPUSH
// result := true ;
22274: LD_ADDR_VAR 0 3
22278: PUSH
22279: LD_INT 1
22281: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22282: LD_ADDR_VAR 0 5
22286: PUSH
22287: LD_VAR 0 2
22291: PPUSH
22292: CALL_OW 480
22296: ST_TO_ADDR
// if not tmp then
22297: LD_VAR 0 5
22301: NOT
22302: IFFALSE 22306
// exit ;
22304: GO 22355
// for i in tmp do
22306: LD_ADDR_VAR 0 4
22310: PUSH
22311: LD_VAR 0 5
22315: PUSH
22316: FOR_IN
22317: IFFALSE 22353
// if GetTech ( i , side ) <> state_researched then
22319: LD_VAR 0 4
22323: PPUSH
22324: LD_VAR 0 1
22328: PPUSH
22329: CALL_OW 321
22333: PUSH
22334: LD_INT 2
22336: NONEQUAL
22337: IFFALSE 22351
// begin result := false ;
22339: LD_ADDR_VAR 0 3
22343: PUSH
22344: LD_INT 0
22346: ST_TO_ADDR
// exit ;
22347: POP
22348: POP
22349: GO 22355
// end ;
22351: GO 22316
22353: POP
22354: POP
// end ;
22355: LD_VAR 0 3
22359: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22360: LD_INT 0
22362: PPUSH
22363: PPUSH
22364: PPUSH
22365: PPUSH
22366: PPUSH
22367: PPUSH
22368: PPUSH
22369: PPUSH
22370: PPUSH
22371: PPUSH
22372: PPUSH
22373: PPUSH
22374: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22375: LD_VAR 0 1
22379: NOT
22380: PUSH
22381: LD_VAR 0 1
22385: PPUSH
22386: CALL_OW 257
22390: PUSH
22391: LD_INT 9
22393: NONEQUAL
22394: OR
22395: IFFALSE 22399
// exit ;
22397: GO 22972
// side := GetSide ( unit ) ;
22399: LD_ADDR_VAR 0 9
22403: PUSH
22404: LD_VAR 0 1
22408: PPUSH
22409: CALL_OW 255
22413: ST_TO_ADDR
// tech_space := tech_spacanom ;
22414: LD_ADDR_VAR 0 12
22418: PUSH
22419: LD_INT 29
22421: ST_TO_ADDR
// tech_time := tech_taurad ;
22422: LD_ADDR_VAR 0 13
22426: PUSH
22427: LD_INT 28
22429: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22430: LD_ADDR_VAR 0 11
22434: PUSH
22435: LD_VAR 0 1
22439: PPUSH
22440: CALL_OW 310
22444: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22445: LD_VAR 0 11
22449: PPUSH
22450: CALL_OW 247
22454: PUSH
22455: LD_INT 2
22457: EQUAL
22458: IFFALSE 22462
// exit ;
22460: GO 22972
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22462: LD_ADDR_VAR 0 8
22466: PUSH
22467: LD_INT 81
22469: PUSH
22470: LD_VAR 0 9
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PUSH
22479: LD_INT 3
22481: PUSH
22482: LD_INT 21
22484: PUSH
22485: LD_INT 3
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PPUSH
22500: CALL_OW 69
22504: ST_TO_ADDR
// if not tmp then
22505: LD_VAR 0 8
22509: NOT
22510: IFFALSE 22514
// exit ;
22512: GO 22972
// if in_unit then
22514: LD_VAR 0 11
22518: IFFALSE 22542
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22520: LD_ADDR_VAR 0 10
22524: PUSH
22525: LD_VAR 0 8
22529: PPUSH
22530: LD_VAR 0 11
22534: PPUSH
22535: CALL_OW 74
22539: ST_TO_ADDR
22540: GO 22562
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22542: LD_ADDR_VAR 0 10
22546: PUSH
22547: LD_VAR 0 8
22551: PPUSH
22552: LD_VAR 0 1
22556: PPUSH
22557: CALL_OW 74
22561: ST_TO_ADDR
// if not enemy then
22562: LD_VAR 0 10
22566: NOT
22567: IFFALSE 22571
// exit ;
22569: GO 22972
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22571: LD_VAR 0 11
22575: PUSH
22576: LD_VAR 0 11
22580: PPUSH
22581: LD_VAR 0 10
22585: PPUSH
22586: CALL_OW 296
22590: PUSH
22591: LD_INT 13
22593: GREATER
22594: AND
22595: PUSH
22596: LD_VAR 0 1
22600: PPUSH
22601: LD_VAR 0 10
22605: PPUSH
22606: CALL_OW 296
22610: PUSH
22611: LD_INT 12
22613: GREATER
22614: OR
22615: IFFALSE 22619
// exit ;
22617: GO 22972
// missile := [ 1 ] ;
22619: LD_ADDR_VAR 0 14
22623: PUSH
22624: LD_INT 1
22626: PUSH
22627: EMPTY
22628: LIST
22629: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22630: LD_VAR 0 9
22634: PPUSH
22635: LD_VAR 0 12
22639: PPUSH
22640: CALL_OW 325
22644: IFFALSE 22673
// missile := Insert ( missile , missile + 1 , 2 ) ;
22646: LD_ADDR_VAR 0 14
22650: PUSH
22651: LD_VAR 0 14
22655: PPUSH
22656: LD_VAR 0 14
22660: PUSH
22661: LD_INT 1
22663: PLUS
22664: PPUSH
22665: LD_INT 2
22667: PPUSH
22668: CALL_OW 2
22672: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22673: LD_VAR 0 9
22677: PPUSH
22678: LD_VAR 0 13
22682: PPUSH
22683: CALL_OW 325
22687: PUSH
22688: LD_VAR 0 10
22692: PPUSH
22693: CALL_OW 255
22697: PPUSH
22698: LD_VAR 0 13
22702: PPUSH
22703: CALL_OW 325
22707: NOT
22708: AND
22709: IFFALSE 22738
// missile := Insert ( missile , missile + 1 , 3 ) ;
22711: LD_ADDR_VAR 0 14
22715: PUSH
22716: LD_VAR 0 14
22720: PPUSH
22721: LD_VAR 0 14
22725: PUSH
22726: LD_INT 1
22728: PLUS
22729: PPUSH
22730: LD_INT 3
22732: PPUSH
22733: CALL_OW 2
22737: ST_TO_ADDR
// if missile < 2 then
22738: LD_VAR 0 14
22742: PUSH
22743: LD_INT 2
22745: LESS
22746: IFFALSE 22750
// exit ;
22748: GO 22972
// x := GetX ( enemy ) ;
22750: LD_ADDR_VAR 0 4
22754: PUSH
22755: LD_VAR 0 10
22759: PPUSH
22760: CALL_OW 250
22764: ST_TO_ADDR
// y := GetY ( enemy ) ;
22765: LD_ADDR_VAR 0 5
22769: PUSH
22770: LD_VAR 0 10
22774: PPUSH
22775: CALL_OW 251
22779: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22780: LD_ADDR_VAR 0 6
22784: PUSH
22785: LD_VAR 0 4
22789: PUSH
22790: LD_INT 1
22792: NEG
22793: PPUSH
22794: LD_INT 1
22796: PPUSH
22797: CALL_OW 12
22801: PLUS
22802: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22803: LD_ADDR_VAR 0 7
22807: PUSH
22808: LD_VAR 0 5
22812: PUSH
22813: LD_INT 1
22815: NEG
22816: PPUSH
22817: LD_INT 1
22819: PPUSH
22820: CALL_OW 12
22824: PLUS
22825: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22826: LD_VAR 0 6
22830: PPUSH
22831: LD_VAR 0 7
22835: PPUSH
22836: CALL_OW 488
22840: NOT
22841: IFFALSE 22863
// begin _x := x ;
22843: LD_ADDR_VAR 0 6
22847: PUSH
22848: LD_VAR 0 4
22852: ST_TO_ADDR
// _y := y ;
22853: LD_ADDR_VAR 0 7
22857: PUSH
22858: LD_VAR 0 5
22862: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22863: LD_ADDR_VAR 0 3
22867: PUSH
22868: LD_INT 1
22870: PPUSH
22871: LD_VAR 0 14
22875: PPUSH
22876: CALL_OW 12
22880: ST_TO_ADDR
// case i of 1 :
22881: LD_VAR 0 3
22885: PUSH
22886: LD_INT 1
22888: DOUBLE
22889: EQUAL
22890: IFTRUE 22894
22892: GO 22911
22894: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22895: LD_VAR 0 1
22899: PPUSH
22900: LD_VAR 0 10
22904: PPUSH
22905: CALL_OW 115
22909: GO 22972
22911: LD_INT 2
22913: DOUBLE
22914: EQUAL
22915: IFTRUE 22919
22917: GO 22941
22919: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22920: LD_VAR 0 1
22924: PPUSH
22925: LD_VAR 0 6
22929: PPUSH
22930: LD_VAR 0 7
22934: PPUSH
22935: CALL_OW 153
22939: GO 22972
22941: LD_INT 3
22943: DOUBLE
22944: EQUAL
22945: IFTRUE 22949
22947: GO 22971
22949: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22950: LD_VAR 0 1
22954: PPUSH
22955: LD_VAR 0 6
22959: PPUSH
22960: LD_VAR 0 7
22964: PPUSH
22965: CALL_OW 154
22969: GO 22972
22971: POP
// end ;
22972: LD_VAR 0 2
22976: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22977: LD_INT 0
22979: PPUSH
22980: PPUSH
22981: PPUSH
22982: PPUSH
22983: PPUSH
22984: PPUSH
// if not unit or not building then
22985: LD_VAR 0 1
22989: NOT
22990: PUSH
22991: LD_VAR 0 2
22995: NOT
22996: OR
22997: IFFALSE 23001
// exit ;
22999: GO 23159
// x := GetX ( building ) ;
23001: LD_ADDR_VAR 0 5
23005: PUSH
23006: LD_VAR 0 2
23010: PPUSH
23011: CALL_OW 250
23015: ST_TO_ADDR
// y := GetY ( building ) ;
23016: LD_ADDR_VAR 0 6
23020: PUSH
23021: LD_VAR 0 2
23025: PPUSH
23026: CALL_OW 251
23030: ST_TO_ADDR
// for i = 0 to 5 do
23031: LD_ADDR_VAR 0 4
23035: PUSH
23036: DOUBLE
23037: LD_INT 0
23039: DEC
23040: ST_TO_ADDR
23041: LD_INT 5
23043: PUSH
23044: FOR_TO
23045: IFFALSE 23157
// begin _x := ShiftX ( x , i , 3 ) ;
23047: LD_ADDR_VAR 0 7
23051: PUSH
23052: LD_VAR 0 5
23056: PPUSH
23057: LD_VAR 0 4
23061: PPUSH
23062: LD_INT 3
23064: PPUSH
23065: CALL_OW 272
23069: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23070: LD_ADDR_VAR 0 8
23074: PUSH
23075: LD_VAR 0 6
23079: PPUSH
23080: LD_VAR 0 4
23084: PPUSH
23085: LD_INT 3
23087: PPUSH
23088: CALL_OW 273
23092: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23093: LD_VAR 0 7
23097: PPUSH
23098: LD_VAR 0 8
23102: PPUSH
23103: CALL_OW 488
23107: NOT
23108: IFFALSE 23112
// continue ;
23110: GO 23044
// if HexInfo ( _x , _y ) = 0 then
23112: LD_VAR 0 7
23116: PPUSH
23117: LD_VAR 0 8
23121: PPUSH
23122: CALL_OW 428
23126: PUSH
23127: LD_INT 0
23129: EQUAL
23130: IFFALSE 23155
// begin ComMoveXY ( unit , _x , _y ) ;
23132: LD_VAR 0 1
23136: PPUSH
23137: LD_VAR 0 7
23141: PPUSH
23142: LD_VAR 0 8
23146: PPUSH
23147: CALL_OW 111
// exit ;
23151: POP
23152: POP
23153: GO 23159
// end ; end ;
23155: GO 23044
23157: POP
23158: POP
// end ;
23159: LD_VAR 0 3
23163: RET
// export function ScanBase ( side , base_area ) ; begin
23164: LD_INT 0
23166: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23167: LD_ADDR_VAR 0 3
23171: PUSH
23172: LD_VAR 0 2
23176: PPUSH
23177: LD_INT 81
23179: PUSH
23180: LD_VAR 0 1
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PPUSH
23189: CALL_OW 70
23193: ST_TO_ADDR
// end ;
23194: LD_VAR 0 3
23198: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23199: LD_INT 0
23201: PPUSH
23202: PPUSH
23203: PPUSH
23204: PPUSH
// result := false ;
23205: LD_ADDR_VAR 0 2
23209: PUSH
23210: LD_INT 0
23212: ST_TO_ADDR
// side := GetSide ( unit ) ;
23213: LD_ADDR_VAR 0 3
23217: PUSH
23218: LD_VAR 0 1
23222: PPUSH
23223: CALL_OW 255
23227: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23228: LD_ADDR_VAR 0 4
23232: PUSH
23233: LD_VAR 0 1
23237: PPUSH
23238: CALL_OW 248
23242: ST_TO_ADDR
// case nat of 1 :
23243: LD_VAR 0 4
23247: PUSH
23248: LD_INT 1
23250: DOUBLE
23251: EQUAL
23252: IFTRUE 23256
23254: GO 23267
23256: POP
// tech := tech_lassight ; 2 :
23257: LD_ADDR_VAR 0 5
23261: PUSH
23262: LD_INT 12
23264: ST_TO_ADDR
23265: GO 23306
23267: LD_INT 2
23269: DOUBLE
23270: EQUAL
23271: IFTRUE 23275
23273: GO 23286
23275: POP
// tech := tech_mortar ; 3 :
23276: LD_ADDR_VAR 0 5
23280: PUSH
23281: LD_INT 41
23283: ST_TO_ADDR
23284: GO 23306
23286: LD_INT 3
23288: DOUBLE
23289: EQUAL
23290: IFTRUE 23294
23292: GO 23305
23294: POP
// tech := tech_bazooka ; end ;
23295: LD_ADDR_VAR 0 5
23299: PUSH
23300: LD_INT 44
23302: ST_TO_ADDR
23303: GO 23306
23305: POP
// if Researched ( side , tech ) then
23306: LD_VAR 0 3
23310: PPUSH
23311: LD_VAR 0 5
23315: PPUSH
23316: CALL_OW 325
23320: IFFALSE 23347
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23322: LD_ADDR_VAR 0 2
23326: PUSH
23327: LD_INT 5
23329: PUSH
23330: LD_INT 8
23332: PUSH
23333: LD_INT 9
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: LIST
23340: PUSH
23341: LD_VAR 0 4
23345: ARRAY
23346: ST_TO_ADDR
// end ;
23347: LD_VAR 0 2
23351: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23352: LD_INT 0
23354: PPUSH
23355: PPUSH
23356: PPUSH
// if not mines then
23357: LD_VAR 0 2
23361: NOT
23362: IFFALSE 23366
// exit ;
23364: GO 23510
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23366: LD_ADDR_VAR 0 5
23370: PUSH
23371: LD_INT 81
23373: PUSH
23374: LD_VAR 0 1
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: PUSH
23383: LD_INT 3
23385: PUSH
23386: LD_INT 21
23388: PUSH
23389: LD_INT 3
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PPUSH
23404: CALL_OW 69
23408: ST_TO_ADDR
// for i in mines do
23409: LD_ADDR_VAR 0 4
23413: PUSH
23414: LD_VAR 0 2
23418: PUSH
23419: FOR_IN
23420: IFFALSE 23508
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23422: LD_VAR 0 4
23426: PUSH
23427: LD_INT 1
23429: ARRAY
23430: PPUSH
23431: LD_VAR 0 4
23435: PUSH
23436: LD_INT 2
23438: ARRAY
23439: PPUSH
23440: CALL_OW 458
23444: NOT
23445: IFFALSE 23449
// continue ;
23447: GO 23419
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23449: LD_VAR 0 4
23453: PUSH
23454: LD_INT 1
23456: ARRAY
23457: PPUSH
23458: LD_VAR 0 4
23462: PUSH
23463: LD_INT 2
23465: ARRAY
23466: PPUSH
23467: CALL_OW 428
23471: PUSH
23472: LD_VAR 0 5
23476: IN
23477: IFFALSE 23506
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23479: LD_VAR 0 4
23483: PUSH
23484: LD_INT 1
23486: ARRAY
23487: PPUSH
23488: LD_VAR 0 4
23492: PUSH
23493: LD_INT 2
23495: ARRAY
23496: PPUSH
23497: LD_VAR 0 1
23501: PPUSH
23502: CALL_OW 456
// end ;
23506: GO 23419
23508: POP
23509: POP
// end ;
23510: LD_VAR 0 3
23514: RET
// export function Count ( array ) ; var i ; begin
23515: LD_INT 0
23517: PPUSH
23518: PPUSH
// result := 0 ;
23519: LD_ADDR_VAR 0 2
23523: PUSH
23524: LD_INT 0
23526: ST_TO_ADDR
// for i in array do
23527: LD_ADDR_VAR 0 3
23531: PUSH
23532: LD_VAR 0 1
23536: PUSH
23537: FOR_IN
23538: IFFALSE 23562
// if i then
23540: LD_VAR 0 3
23544: IFFALSE 23560
// result := result + 1 ;
23546: LD_ADDR_VAR 0 2
23550: PUSH
23551: LD_VAR 0 2
23555: PUSH
23556: LD_INT 1
23558: PLUS
23559: ST_TO_ADDR
23560: GO 23537
23562: POP
23563: POP
// end ;
23564: LD_VAR 0 2
23568: RET
// export function IsEmpty ( building ) ; begin
23569: LD_INT 0
23571: PPUSH
// if not building then
23572: LD_VAR 0 1
23576: NOT
23577: IFFALSE 23581
// exit ;
23579: GO 23624
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23581: LD_ADDR_VAR 0 2
23585: PUSH
23586: LD_VAR 0 1
23590: PUSH
23591: LD_INT 22
23593: PUSH
23594: LD_VAR 0 1
23598: PPUSH
23599: CALL_OW 255
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 58
23610: PUSH
23611: EMPTY
23612: LIST
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PPUSH
23618: CALL_OW 69
23622: IN
23623: ST_TO_ADDR
// end ;
23624: LD_VAR 0 2
23628: RET
// export function IsNotFull ( building ) ; begin
23629: LD_INT 0
23631: PPUSH
// if not building then
23632: LD_VAR 0 1
23636: NOT
23637: IFFALSE 23641
// exit ;
23639: GO 23660
// result := UnitsInside ( building ) < 6 ;
23641: LD_ADDR_VAR 0 2
23645: PUSH
23646: LD_VAR 0 1
23650: PPUSH
23651: CALL_OW 313
23655: PUSH
23656: LD_INT 6
23658: LESS
23659: ST_TO_ADDR
// end ;
23660: LD_VAR 0 2
23664: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23665: LD_INT 0
23667: PPUSH
23668: PPUSH
23669: PPUSH
23670: PPUSH
// tmp := [ ] ;
23671: LD_ADDR_VAR 0 3
23675: PUSH
23676: EMPTY
23677: ST_TO_ADDR
// list := [ ] ;
23678: LD_ADDR_VAR 0 5
23682: PUSH
23683: EMPTY
23684: ST_TO_ADDR
// for i = 16 to 25 do
23685: LD_ADDR_VAR 0 4
23689: PUSH
23690: DOUBLE
23691: LD_INT 16
23693: DEC
23694: ST_TO_ADDR
23695: LD_INT 25
23697: PUSH
23698: FOR_TO
23699: IFFALSE 23772
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23701: LD_ADDR_VAR 0 3
23705: PUSH
23706: LD_VAR 0 3
23710: PUSH
23711: LD_INT 22
23713: PUSH
23714: LD_VAR 0 1
23718: PPUSH
23719: CALL_OW 255
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 91
23730: PUSH
23731: LD_VAR 0 1
23735: PUSH
23736: LD_INT 6
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: LIST
23743: PUSH
23744: LD_INT 30
23746: PUSH
23747: LD_VAR 0 4
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: LIST
23760: PUSH
23761: EMPTY
23762: LIST
23763: PPUSH
23764: CALL_OW 69
23768: ADD
23769: ST_TO_ADDR
23770: GO 23698
23772: POP
23773: POP
// for i = 1 to tmp do
23774: LD_ADDR_VAR 0 4
23778: PUSH
23779: DOUBLE
23780: LD_INT 1
23782: DEC
23783: ST_TO_ADDR
23784: LD_VAR 0 3
23788: PUSH
23789: FOR_TO
23790: IFFALSE 23878
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23792: LD_ADDR_VAR 0 5
23796: PUSH
23797: LD_VAR 0 5
23801: PUSH
23802: LD_VAR 0 3
23806: PUSH
23807: LD_VAR 0 4
23811: ARRAY
23812: PPUSH
23813: CALL_OW 266
23817: PUSH
23818: LD_VAR 0 3
23822: PUSH
23823: LD_VAR 0 4
23827: ARRAY
23828: PPUSH
23829: CALL_OW 250
23833: PUSH
23834: LD_VAR 0 3
23838: PUSH
23839: LD_VAR 0 4
23843: ARRAY
23844: PPUSH
23845: CALL_OW 251
23849: PUSH
23850: LD_VAR 0 3
23854: PUSH
23855: LD_VAR 0 4
23859: ARRAY
23860: PPUSH
23861: CALL_OW 254
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: PUSH
23872: EMPTY
23873: LIST
23874: ADD
23875: ST_TO_ADDR
23876: GO 23789
23878: POP
23879: POP
// result := list ;
23880: LD_ADDR_VAR 0 2
23884: PUSH
23885: LD_VAR 0 5
23889: ST_TO_ADDR
// end ;
23890: LD_VAR 0 2
23894: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23895: LD_INT 0
23897: PPUSH
23898: PPUSH
23899: PPUSH
23900: PPUSH
23901: PPUSH
23902: PPUSH
23903: PPUSH
// if not factory then
23904: LD_VAR 0 1
23908: NOT
23909: IFFALSE 23913
// exit ;
23911: GO 24506
// if control = control_apeman then
23913: LD_VAR 0 4
23917: PUSH
23918: LD_INT 5
23920: EQUAL
23921: IFFALSE 24030
// begin tmp := UnitsInside ( factory ) ;
23923: LD_ADDR_VAR 0 8
23927: PUSH
23928: LD_VAR 0 1
23932: PPUSH
23933: CALL_OW 313
23937: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23938: LD_VAR 0 8
23942: PPUSH
23943: LD_INT 25
23945: PUSH
23946: LD_INT 12
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PPUSH
23953: CALL_OW 72
23957: NOT
23958: IFFALSE 23968
// control := control_manual ;
23960: LD_ADDR_VAR 0 4
23964: PUSH
23965: LD_INT 1
23967: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23968: LD_ADDR_VAR 0 8
23972: PUSH
23973: LD_VAR 0 1
23977: PPUSH
23978: CALL 23665 0 1
23982: ST_TO_ADDR
// if tmp then
23983: LD_VAR 0 8
23987: IFFALSE 24030
// begin for i in tmp do
23989: LD_ADDR_VAR 0 7
23993: PUSH
23994: LD_VAR 0 8
23998: PUSH
23999: FOR_IN
24000: IFFALSE 24028
// if i [ 1 ] = b_ext_radio then
24002: LD_VAR 0 7
24006: PUSH
24007: LD_INT 1
24009: ARRAY
24010: PUSH
24011: LD_INT 22
24013: EQUAL
24014: IFFALSE 24026
// begin control := control_remote ;
24016: LD_ADDR_VAR 0 4
24020: PUSH
24021: LD_INT 2
24023: ST_TO_ADDR
// break ;
24024: GO 24028
// end ;
24026: GO 23999
24028: POP
24029: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24030: LD_VAR 0 1
24034: PPUSH
24035: LD_VAR 0 2
24039: PPUSH
24040: LD_VAR 0 3
24044: PPUSH
24045: LD_VAR 0 4
24049: PPUSH
24050: LD_VAR 0 5
24054: PPUSH
24055: CALL_OW 448
24059: IFFALSE 24094
// begin result := [ chassis , engine , control , weapon ] ;
24061: LD_ADDR_VAR 0 6
24065: PUSH
24066: LD_VAR 0 2
24070: PUSH
24071: LD_VAR 0 3
24075: PUSH
24076: LD_VAR 0 4
24080: PUSH
24081: LD_VAR 0 5
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: ST_TO_ADDR
// exit ;
24092: GO 24506
// end ; _chassis := AvailableChassisList ( factory ) ;
24094: LD_ADDR_VAR 0 9
24098: PUSH
24099: LD_VAR 0 1
24103: PPUSH
24104: CALL_OW 475
24108: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24109: LD_ADDR_VAR 0 11
24113: PUSH
24114: LD_VAR 0 1
24118: PPUSH
24119: CALL_OW 476
24123: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24124: LD_ADDR_VAR 0 12
24128: PUSH
24129: LD_VAR 0 1
24133: PPUSH
24134: CALL_OW 477
24138: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24139: LD_ADDR_VAR 0 10
24143: PUSH
24144: LD_VAR 0 1
24148: PPUSH
24149: CALL_OW 478
24153: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24154: LD_VAR 0 9
24158: NOT
24159: PUSH
24160: LD_VAR 0 11
24164: NOT
24165: OR
24166: PUSH
24167: LD_VAR 0 12
24171: NOT
24172: OR
24173: PUSH
24174: LD_VAR 0 10
24178: NOT
24179: OR
24180: IFFALSE 24215
// begin result := [ chassis , engine , control , weapon ] ;
24182: LD_ADDR_VAR 0 6
24186: PUSH
24187: LD_VAR 0 2
24191: PUSH
24192: LD_VAR 0 3
24196: PUSH
24197: LD_VAR 0 4
24201: PUSH
24202: LD_VAR 0 5
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: ST_TO_ADDR
// exit ;
24213: GO 24506
// end ; if not chassis in _chassis then
24215: LD_VAR 0 2
24219: PUSH
24220: LD_VAR 0 9
24224: IN
24225: NOT
24226: IFFALSE 24252
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24228: LD_ADDR_VAR 0 2
24232: PUSH
24233: LD_VAR 0 9
24237: PUSH
24238: LD_INT 1
24240: PPUSH
24241: LD_VAR 0 9
24245: PPUSH
24246: CALL_OW 12
24250: ARRAY
24251: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24252: LD_VAR 0 2
24256: PPUSH
24257: LD_VAR 0 3
24261: PPUSH
24262: CALL 24511 0 2
24266: NOT
24267: IFFALSE 24326
// repeat engine := _engine [ 1 ] ;
24269: LD_ADDR_VAR 0 3
24273: PUSH
24274: LD_VAR 0 11
24278: PUSH
24279: LD_INT 1
24281: ARRAY
24282: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24283: LD_ADDR_VAR 0 11
24287: PUSH
24288: LD_VAR 0 11
24292: PPUSH
24293: LD_INT 1
24295: PPUSH
24296: CALL_OW 3
24300: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24301: LD_VAR 0 2
24305: PPUSH
24306: LD_VAR 0 3
24310: PPUSH
24311: CALL 24511 0 2
24315: PUSH
24316: LD_VAR 0 11
24320: PUSH
24321: EMPTY
24322: EQUAL
24323: OR
24324: IFFALSE 24269
// if not control in _control then
24326: LD_VAR 0 4
24330: PUSH
24331: LD_VAR 0 12
24335: IN
24336: NOT
24337: IFFALSE 24363
// control := _control [ rand ( 1 , _control ) ] ;
24339: LD_ADDR_VAR 0 4
24343: PUSH
24344: LD_VAR 0 12
24348: PUSH
24349: LD_INT 1
24351: PPUSH
24352: LD_VAR 0 12
24356: PPUSH
24357: CALL_OW 12
24361: ARRAY
24362: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24363: LD_VAR 0 2
24367: PPUSH
24368: LD_VAR 0 5
24372: PPUSH
24373: CALL 24731 0 2
24377: NOT
24378: IFFALSE 24437
// repeat weapon := _weapon [ 1 ] ;
24380: LD_ADDR_VAR 0 5
24384: PUSH
24385: LD_VAR 0 10
24389: PUSH
24390: LD_INT 1
24392: ARRAY
24393: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24394: LD_ADDR_VAR 0 10
24398: PUSH
24399: LD_VAR 0 10
24403: PPUSH
24404: LD_INT 1
24406: PPUSH
24407: CALL_OW 3
24411: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24412: LD_VAR 0 2
24416: PPUSH
24417: LD_VAR 0 5
24421: PPUSH
24422: CALL 24731 0 2
24426: PUSH
24427: LD_VAR 0 10
24431: PUSH
24432: EMPTY
24433: EQUAL
24434: OR
24435: IFFALSE 24380
// result := [ ] ;
24437: LD_ADDR_VAR 0 6
24441: PUSH
24442: EMPTY
24443: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24444: LD_VAR 0 1
24448: PPUSH
24449: LD_VAR 0 2
24453: PPUSH
24454: LD_VAR 0 3
24458: PPUSH
24459: LD_VAR 0 4
24463: PPUSH
24464: LD_VAR 0 5
24468: PPUSH
24469: CALL_OW 448
24473: IFFALSE 24506
// result := [ chassis , engine , control , weapon ] ;
24475: LD_ADDR_VAR 0 6
24479: PUSH
24480: LD_VAR 0 2
24484: PUSH
24485: LD_VAR 0 3
24489: PUSH
24490: LD_VAR 0 4
24494: PUSH
24495: LD_VAR 0 5
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: ST_TO_ADDR
// end ;
24506: LD_VAR 0 6
24510: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24511: LD_INT 0
24513: PPUSH
// if not chassis or not engine then
24514: LD_VAR 0 1
24518: NOT
24519: PUSH
24520: LD_VAR 0 2
24524: NOT
24525: OR
24526: IFFALSE 24530
// exit ;
24528: GO 24726
// case engine of engine_solar :
24530: LD_VAR 0 2
24534: PUSH
24535: LD_INT 2
24537: DOUBLE
24538: EQUAL
24539: IFTRUE 24543
24541: GO 24581
24543: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24544: LD_ADDR_VAR 0 3
24548: PUSH
24549: LD_INT 11
24551: PUSH
24552: LD_INT 12
24554: PUSH
24555: LD_INT 13
24557: PUSH
24558: LD_INT 14
24560: PUSH
24561: LD_INT 1
24563: PUSH
24564: LD_INT 2
24566: PUSH
24567: LD_INT 3
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: ST_TO_ADDR
24579: GO 24710
24581: LD_INT 1
24583: DOUBLE
24584: EQUAL
24585: IFTRUE 24589
24587: GO 24651
24589: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24590: LD_ADDR_VAR 0 3
24594: PUSH
24595: LD_INT 11
24597: PUSH
24598: LD_INT 12
24600: PUSH
24601: LD_INT 13
24603: PUSH
24604: LD_INT 14
24606: PUSH
24607: LD_INT 1
24609: PUSH
24610: LD_INT 2
24612: PUSH
24613: LD_INT 3
24615: PUSH
24616: LD_INT 4
24618: PUSH
24619: LD_INT 5
24621: PUSH
24622: LD_INT 21
24624: PUSH
24625: LD_INT 23
24627: PUSH
24628: LD_INT 22
24630: PUSH
24631: LD_INT 24
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: ST_TO_ADDR
24649: GO 24710
24651: LD_INT 3
24653: DOUBLE
24654: EQUAL
24655: IFTRUE 24659
24657: GO 24709
24659: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24660: LD_ADDR_VAR 0 3
24664: PUSH
24665: LD_INT 13
24667: PUSH
24668: LD_INT 14
24670: PUSH
24671: LD_INT 2
24673: PUSH
24674: LD_INT 3
24676: PUSH
24677: LD_INT 4
24679: PUSH
24680: LD_INT 5
24682: PUSH
24683: LD_INT 21
24685: PUSH
24686: LD_INT 22
24688: PUSH
24689: LD_INT 23
24691: PUSH
24692: LD_INT 24
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: ST_TO_ADDR
24707: GO 24710
24709: POP
// result := ( chassis in result ) ;
24710: LD_ADDR_VAR 0 3
24714: PUSH
24715: LD_VAR 0 1
24719: PUSH
24720: LD_VAR 0 3
24724: IN
24725: ST_TO_ADDR
// end ;
24726: LD_VAR 0 3
24730: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24731: LD_INT 0
24733: PPUSH
// if not chassis or not weapon then
24734: LD_VAR 0 1
24738: NOT
24739: PUSH
24740: LD_VAR 0 2
24744: NOT
24745: OR
24746: IFFALSE 24750
// exit ;
24748: GO 25776
// case weapon of us_machine_gun :
24750: LD_VAR 0 2
24754: PUSH
24755: LD_INT 2
24757: DOUBLE
24758: EQUAL
24759: IFTRUE 24763
24761: GO 24793
24763: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24764: LD_ADDR_VAR 0 3
24768: PUSH
24769: LD_INT 1
24771: PUSH
24772: LD_INT 2
24774: PUSH
24775: LD_INT 3
24777: PUSH
24778: LD_INT 4
24780: PUSH
24781: LD_INT 5
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: ST_TO_ADDR
24791: GO 25760
24793: LD_INT 3
24795: DOUBLE
24796: EQUAL
24797: IFTRUE 24801
24799: GO 24831
24801: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24802: LD_ADDR_VAR 0 3
24806: PUSH
24807: LD_INT 1
24809: PUSH
24810: LD_INT 2
24812: PUSH
24813: LD_INT 3
24815: PUSH
24816: LD_INT 4
24818: PUSH
24819: LD_INT 5
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: ST_TO_ADDR
24829: GO 25760
24831: LD_INT 11
24833: DOUBLE
24834: EQUAL
24835: IFTRUE 24839
24837: GO 24869
24839: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24840: LD_ADDR_VAR 0 3
24844: PUSH
24845: LD_INT 1
24847: PUSH
24848: LD_INT 2
24850: PUSH
24851: LD_INT 3
24853: PUSH
24854: LD_INT 4
24856: PUSH
24857: LD_INT 5
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: ST_TO_ADDR
24867: GO 25760
24869: LD_INT 4
24871: DOUBLE
24872: EQUAL
24873: IFTRUE 24877
24875: GO 24903
24877: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24878: LD_ADDR_VAR 0 3
24882: PUSH
24883: LD_INT 2
24885: PUSH
24886: LD_INT 3
24888: PUSH
24889: LD_INT 4
24891: PUSH
24892: LD_INT 5
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: ST_TO_ADDR
24901: GO 25760
24903: LD_INT 5
24905: DOUBLE
24906: EQUAL
24907: IFTRUE 24911
24909: GO 24937
24911: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24912: LD_ADDR_VAR 0 3
24916: PUSH
24917: LD_INT 2
24919: PUSH
24920: LD_INT 3
24922: PUSH
24923: LD_INT 4
24925: PUSH
24926: LD_INT 5
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: ST_TO_ADDR
24935: GO 25760
24937: LD_INT 9
24939: DOUBLE
24940: EQUAL
24941: IFTRUE 24945
24943: GO 24971
24945: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24946: LD_ADDR_VAR 0 3
24950: PUSH
24951: LD_INT 2
24953: PUSH
24954: LD_INT 3
24956: PUSH
24957: LD_INT 4
24959: PUSH
24960: LD_INT 5
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: ST_TO_ADDR
24969: GO 25760
24971: LD_INT 7
24973: DOUBLE
24974: EQUAL
24975: IFTRUE 24979
24977: GO 25005
24979: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24980: LD_ADDR_VAR 0 3
24984: PUSH
24985: LD_INT 2
24987: PUSH
24988: LD_INT 3
24990: PUSH
24991: LD_INT 4
24993: PUSH
24994: LD_INT 5
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: ST_TO_ADDR
25003: GO 25760
25005: LD_INT 12
25007: DOUBLE
25008: EQUAL
25009: IFTRUE 25013
25011: GO 25039
25013: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25014: LD_ADDR_VAR 0 3
25018: PUSH
25019: LD_INT 2
25021: PUSH
25022: LD_INT 3
25024: PUSH
25025: LD_INT 4
25027: PUSH
25028: LD_INT 5
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: ST_TO_ADDR
25037: GO 25760
25039: LD_INT 13
25041: DOUBLE
25042: EQUAL
25043: IFTRUE 25047
25045: GO 25073
25047: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25048: LD_ADDR_VAR 0 3
25052: PUSH
25053: LD_INT 2
25055: PUSH
25056: LD_INT 3
25058: PUSH
25059: LD_INT 4
25061: PUSH
25062: LD_INT 5
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: ST_TO_ADDR
25071: GO 25760
25073: LD_INT 14
25075: DOUBLE
25076: EQUAL
25077: IFTRUE 25081
25079: GO 25099
25081: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25082: LD_ADDR_VAR 0 3
25086: PUSH
25087: LD_INT 4
25089: PUSH
25090: LD_INT 5
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: ST_TO_ADDR
25097: GO 25760
25099: LD_INT 6
25101: DOUBLE
25102: EQUAL
25103: IFTRUE 25107
25105: GO 25125
25107: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25108: LD_ADDR_VAR 0 3
25112: PUSH
25113: LD_INT 4
25115: PUSH
25116: LD_INT 5
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: ST_TO_ADDR
25123: GO 25760
25125: LD_INT 10
25127: DOUBLE
25128: EQUAL
25129: IFTRUE 25133
25131: GO 25151
25133: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25134: LD_ADDR_VAR 0 3
25138: PUSH
25139: LD_INT 4
25141: PUSH
25142: LD_INT 5
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: ST_TO_ADDR
25149: GO 25760
25151: LD_INT 22
25153: DOUBLE
25154: EQUAL
25155: IFTRUE 25159
25157: GO 25185
25159: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25160: LD_ADDR_VAR 0 3
25164: PUSH
25165: LD_INT 11
25167: PUSH
25168: LD_INT 12
25170: PUSH
25171: LD_INT 13
25173: PUSH
25174: LD_INT 14
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: ST_TO_ADDR
25183: GO 25760
25185: LD_INT 23
25187: DOUBLE
25188: EQUAL
25189: IFTRUE 25193
25191: GO 25219
25193: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25194: LD_ADDR_VAR 0 3
25198: PUSH
25199: LD_INT 11
25201: PUSH
25202: LD_INT 12
25204: PUSH
25205: LD_INT 13
25207: PUSH
25208: LD_INT 14
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: ST_TO_ADDR
25217: GO 25760
25219: LD_INT 24
25221: DOUBLE
25222: EQUAL
25223: IFTRUE 25227
25225: GO 25253
25227: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25228: LD_ADDR_VAR 0 3
25232: PUSH
25233: LD_INT 11
25235: PUSH
25236: LD_INT 12
25238: PUSH
25239: LD_INT 13
25241: PUSH
25242: LD_INT 14
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: ST_TO_ADDR
25251: GO 25760
25253: LD_INT 30
25255: DOUBLE
25256: EQUAL
25257: IFTRUE 25261
25259: GO 25287
25261: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25262: LD_ADDR_VAR 0 3
25266: PUSH
25267: LD_INT 11
25269: PUSH
25270: LD_INT 12
25272: PUSH
25273: LD_INT 13
25275: PUSH
25276: LD_INT 14
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: ST_TO_ADDR
25285: GO 25760
25287: LD_INT 25
25289: DOUBLE
25290: EQUAL
25291: IFTRUE 25295
25293: GO 25313
25295: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25296: LD_ADDR_VAR 0 3
25300: PUSH
25301: LD_INT 13
25303: PUSH
25304: LD_INT 14
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: ST_TO_ADDR
25311: GO 25760
25313: LD_INT 27
25315: DOUBLE
25316: EQUAL
25317: IFTRUE 25321
25319: GO 25339
25321: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25322: LD_ADDR_VAR 0 3
25326: PUSH
25327: LD_INT 13
25329: PUSH
25330: LD_INT 14
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: ST_TO_ADDR
25337: GO 25760
25339: LD_INT 28
25341: DOUBLE
25342: EQUAL
25343: IFTRUE 25347
25345: GO 25365
25347: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25348: LD_ADDR_VAR 0 3
25352: PUSH
25353: LD_INT 13
25355: PUSH
25356: LD_INT 14
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: ST_TO_ADDR
25363: GO 25760
25365: LD_INT 29
25367: DOUBLE
25368: EQUAL
25369: IFTRUE 25373
25371: GO 25391
25373: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25374: LD_ADDR_VAR 0 3
25378: PUSH
25379: LD_INT 13
25381: PUSH
25382: LD_INT 14
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: ST_TO_ADDR
25389: GO 25760
25391: LD_INT 31
25393: DOUBLE
25394: EQUAL
25395: IFTRUE 25399
25397: GO 25417
25399: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25400: LD_ADDR_VAR 0 3
25404: PUSH
25405: LD_INT 13
25407: PUSH
25408: LD_INT 14
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: ST_TO_ADDR
25415: GO 25760
25417: LD_INT 26
25419: DOUBLE
25420: EQUAL
25421: IFTRUE 25425
25423: GO 25443
25425: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25426: LD_ADDR_VAR 0 3
25430: PUSH
25431: LD_INT 13
25433: PUSH
25434: LD_INT 14
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: ST_TO_ADDR
25441: GO 25760
25443: LD_INT 42
25445: DOUBLE
25446: EQUAL
25447: IFTRUE 25451
25449: GO 25477
25451: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25452: LD_ADDR_VAR 0 3
25456: PUSH
25457: LD_INT 21
25459: PUSH
25460: LD_INT 22
25462: PUSH
25463: LD_INT 23
25465: PUSH
25466: LD_INT 24
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: ST_TO_ADDR
25475: GO 25760
25477: LD_INT 43
25479: DOUBLE
25480: EQUAL
25481: IFTRUE 25485
25483: GO 25511
25485: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25486: LD_ADDR_VAR 0 3
25490: PUSH
25491: LD_INT 21
25493: PUSH
25494: LD_INT 22
25496: PUSH
25497: LD_INT 23
25499: PUSH
25500: LD_INT 24
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: ST_TO_ADDR
25509: GO 25760
25511: LD_INT 44
25513: DOUBLE
25514: EQUAL
25515: IFTRUE 25519
25517: GO 25545
25519: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25520: LD_ADDR_VAR 0 3
25524: PUSH
25525: LD_INT 21
25527: PUSH
25528: LD_INT 22
25530: PUSH
25531: LD_INT 23
25533: PUSH
25534: LD_INT 24
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: ST_TO_ADDR
25543: GO 25760
25545: LD_INT 45
25547: DOUBLE
25548: EQUAL
25549: IFTRUE 25553
25551: GO 25579
25553: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25554: LD_ADDR_VAR 0 3
25558: PUSH
25559: LD_INT 21
25561: PUSH
25562: LD_INT 22
25564: PUSH
25565: LD_INT 23
25567: PUSH
25568: LD_INT 24
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: ST_TO_ADDR
25577: GO 25760
25579: LD_INT 49
25581: DOUBLE
25582: EQUAL
25583: IFTRUE 25587
25585: GO 25613
25587: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25588: LD_ADDR_VAR 0 3
25592: PUSH
25593: LD_INT 21
25595: PUSH
25596: LD_INT 22
25598: PUSH
25599: LD_INT 23
25601: PUSH
25602: LD_INT 24
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: ST_TO_ADDR
25611: GO 25760
25613: LD_INT 51
25615: DOUBLE
25616: EQUAL
25617: IFTRUE 25621
25619: GO 25647
25621: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25622: LD_ADDR_VAR 0 3
25626: PUSH
25627: LD_INT 21
25629: PUSH
25630: LD_INT 22
25632: PUSH
25633: LD_INT 23
25635: PUSH
25636: LD_INT 24
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: ST_TO_ADDR
25645: GO 25760
25647: LD_INT 52
25649: DOUBLE
25650: EQUAL
25651: IFTRUE 25655
25653: GO 25681
25655: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25656: LD_ADDR_VAR 0 3
25660: PUSH
25661: LD_INT 21
25663: PUSH
25664: LD_INT 22
25666: PUSH
25667: LD_INT 23
25669: PUSH
25670: LD_INT 24
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: ST_TO_ADDR
25679: GO 25760
25681: LD_INT 53
25683: DOUBLE
25684: EQUAL
25685: IFTRUE 25689
25687: GO 25707
25689: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25690: LD_ADDR_VAR 0 3
25694: PUSH
25695: LD_INT 23
25697: PUSH
25698: LD_INT 24
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: ST_TO_ADDR
25705: GO 25760
25707: LD_INT 46
25709: DOUBLE
25710: EQUAL
25711: IFTRUE 25715
25713: GO 25733
25715: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25716: LD_ADDR_VAR 0 3
25720: PUSH
25721: LD_INT 23
25723: PUSH
25724: LD_INT 24
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: ST_TO_ADDR
25731: GO 25760
25733: LD_INT 47
25735: DOUBLE
25736: EQUAL
25737: IFTRUE 25741
25739: GO 25759
25741: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25742: LD_ADDR_VAR 0 3
25746: PUSH
25747: LD_INT 23
25749: PUSH
25750: LD_INT 24
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: ST_TO_ADDR
25757: GO 25760
25759: POP
// result := ( chassis in result ) ;
25760: LD_ADDR_VAR 0 3
25764: PUSH
25765: LD_VAR 0 1
25769: PUSH
25770: LD_VAR 0 3
25774: IN
25775: ST_TO_ADDR
// end ;
25776: LD_VAR 0 3
25780: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25781: LD_INT 0
25783: PPUSH
25784: PPUSH
25785: PPUSH
25786: PPUSH
25787: PPUSH
25788: PPUSH
25789: PPUSH
// result := array ;
25790: LD_ADDR_VAR 0 5
25794: PUSH
25795: LD_VAR 0 1
25799: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25800: LD_VAR 0 1
25804: NOT
25805: PUSH
25806: LD_VAR 0 2
25810: NOT
25811: OR
25812: PUSH
25813: LD_VAR 0 3
25817: NOT
25818: OR
25819: PUSH
25820: LD_VAR 0 2
25824: PUSH
25825: LD_VAR 0 1
25829: GREATER
25830: OR
25831: PUSH
25832: LD_VAR 0 3
25836: PUSH
25837: LD_VAR 0 1
25841: GREATER
25842: OR
25843: IFFALSE 25847
// exit ;
25845: GO 26143
// if direction then
25847: LD_VAR 0 4
25851: IFFALSE 25915
// begin d := 1 ;
25853: LD_ADDR_VAR 0 9
25857: PUSH
25858: LD_INT 1
25860: ST_TO_ADDR
// if i_from > i_to then
25861: LD_VAR 0 2
25865: PUSH
25866: LD_VAR 0 3
25870: GREATER
25871: IFFALSE 25897
// length := ( array - i_from ) + i_to else
25873: LD_ADDR_VAR 0 11
25877: PUSH
25878: LD_VAR 0 1
25882: PUSH
25883: LD_VAR 0 2
25887: MINUS
25888: PUSH
25889: LD_VAR 0 3
25893: PLUS
25894: ST_TO_ADDR
25895: GO 25913
// length := i_to - i_from ;
25897: LD_ADDR_VAR 0 11
25901: PUSH
25902: LD_VAR 0 3
25906: PUSH
25907: LD_VAR 0 2
25911: MINUS
25912: ST_TO_ADDR
// end else
25913: GO 25976
// begin d := - 1 ;
25915: LD_ADDR_VAR 0 9
25919: PUSH
25920: LD_INT 1
25922: NEG
25923: ST_TO_ADDR
// if i_from > i_to then
25924: LD_VAR 0 2
25928: PUSH
25929: LD_VAR 0 3
25933: GREATER
25934: IFFALSE 25954
// length := i_from - i_to else
25936: LD_ADDR_VAR 0 11
25940: PUSH
25941: LD_VAR 0 2
25945: PUSH
25946: LD_VAR 0 3
25950: MINUS
25951: ST_TO_ADDR
25952: GO 25976
// length := ( array - i_to ) + i_from ;
25954: LD_ADDR_VAR 0 11
25958: PUSH
25959: LD_VAR 0 1
25963: PUSH
25964: LD_VAR 0 3
25968: MINUS
25969: PUSH
25970: LD_VAR 0 2
25974: PLUS
25975: ST_TO_ADDR
// end ; if not length then
25976: LD_VAR 0 11
25980: NOT
25981: IFFALSE 25985
// exit ;
25983: GO 26143
// tmp := array ;
25985: LD_ADDR_VAR 0 10
25989: PUSH
25990: LD_VAR 0 1
25994: ST_TO_ADDR
// for i = 1 to length do
25995: LD_ADDR_VAR 0 6
25999: PUSH
26000: DOUBLE
26001: LD_INT 1
26003: DEC
26004: ST_TO_ADDR
26005: LD_VAR 0 11
26009: PUSH
26010: FOR_TO
26011: IFFALSE 26131
// begin for j = 1 to array do
26013: LD_ADDR_VAR 0 7
26017: PUSH
26018: DOUBLE
26019: LD_INT 1
26021: DEC
26022: ST_TO_ADDR
26023: LD_VAR 0 1
26027: PUSH
26028: FOR_TO
26029: IFFALSE 26117
// begin k := j + d ;
26031: LD_ADDR_VAR 0 8
26035: PUSH
26036: LD_VAR 0 7
26040: PUSH
26041: LD_VAR 0 9
26045: PLUS
26046: ST_TO_ADDR
// if k > array then
26047: LD_VAR 0 8
26051: PUSH
26052: LD_VAR 0 1
26056: GREATER
26057: IFFALSE 26067
// k := 1 ;
26059: LD_ADDR_VAR 0 8
26063: PUSH
26064: LD_INT 1
26066: ST_TO_ADDR
// if not k then
26067: LD_VAR 0 8
26071: NOT
26072: IFFALSE 26084
// k := array ;
26074: LD_ADDR_VAR 0 8
26078: PUSH
26079: LD_VAR 0 1
26083: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26084: LD_ADDR_VAR 0 10
26088: PUSH
26089: LD_VAR 0 10
26093: PPUSH
26094: LD_VAR 0 8
26098: PPUSH
26099: LD_VAR 0 1
26103: PUSH
26104: LD_VAR 0 7
26108: ARRAY
26109: PPUSH
26110: CALL_OW 1
26114: ST_TO_ADDR
// end ;
26115: GO 26028
26117: POP
26118: POP
// array := tmp ;
26119: LD_ADDR_VAR 0 1
26123: PUSH
26124: LD_VAR 0 10
26128: ST_TO_ADDR
// end ;
26129: GO 26010
26131: POP
26132: POP
// result := array ;
26133: LD_ADDR_VAR 0 5
26137: PUSH
26138: LD_VAR 0 1
26142: ST_TO_ADDR
// end ;
26143: LD_VAR 0 5
26147: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26148: LD_INT 0
26150: PPUSH
26151: PPUSH
// result := 0 ;
26152: LD_ADDR_VAR 0 3
26156: PUSH
26157: LD_INT 0
26159: ST_TO_ADDR
// if not array or not value in array then
26160: LD_VAR 0 1
26164: NOT
26165: PUSH
26166: LD_VAR 0 2
26170: PUSH
26171: LD_VAR 0 1
26175: IN
26176: NOT
26177: OR
26178: IFFALSE 26182
// exit ;
26180: GO 26236
// for i = 1 to array do
26182: LD_ADDR_VAR 0 4
26186: PUSH
26187: DOUBLE
26188: LD_INT 1
26190: DEC
26191: ST_TO_ADDR
26192: LD_VAR 0 1
26196: PUSH
26197: FOR_TO
26198: IFFALSE 26234
// if value = array [ i ] then
26200: LD_VAR 0 2
26204: PUSH
26205: LD_VAR 0 1
26209: PUSH
26210: LD_VAR 0 4
26214: ARRAY
26215: EQUAL
26216: IFFALSE 26232
// begin result := i ;
26218: LD_ADDR_VAR 0 3
26222: PUSH
26223: LD_VAR 0 4
26227: ST_TO_ADDR
// exit ;
26228: POP
26229: POP
26230: GO 26236
// end ;
26232: GO 26197
26234: POP
26235: POP
// end ;
26236: LD_VAR 0 3
26240: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26241: LD_INT 0
26243: PPUSH
// vc_chassis := chassis ;
26244: LD_ADDR_OWVAR 37
26248: PUSH
26249: LD_VAR 0 1
26253: ST_TO_ADDR
// vc_engine := engine ;
26254: LD_ADDR_OWVAR 39
26258: PUSH
26259: LD_VAR 0 2
26263: ST_TO_ADDR
// vc_control := control ;
26264: LD_ADDR_OWVAR 38
26268: PUSH
26269: LD_VAR 0 3
26273: ST_TO_ADDR
// vc_weapon := weapon ;
26274: LD_ADDR_OWVAR 40
26278: PUSH
26279: LD_VAR 0 4
26283: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26284: LD_ADDR_OWVAR 41
26288: PUSH
26289: LD_VAR 0 5
26293: ST_TO_ADDR
// end ;
26294: LD_VAR 0 6
26298: RET
// export function WantPlant ( unit ) ; var task ; begin
26299: LD_INT 0
26301: PPUSH
26302: PPUSH
// result := false ;
26303: LD_ADDR_VAR 0 2
26307: PUSH
26308: LD_INT 0
26310: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26311: LD_ADDR_VAR 0 3
26315: PUSH
26316: LD_VAR 0 1
26320: PPUSH
26321: CALL_OW 437
26325: ST_TO_ADDR
// if task then
26326: LD_VAR 0 3
26330: IFFALSE 26358
// if task [ 1 ] [ 1 ] = p then
26332: LD_VAR 0 3
26336: PUSH
26337: LD_INT 1
26339: ARRAY
26340: PUSH
26341: LD_INT 1
26343: ARRAY
26344: PUSH
26345: LD_STRING p
26347: EQUAL
26348: IFFALSE 26358
// result := true ;
26350: LD_ADDR_VAR 0 2
26354: PUSH
26355: LD_INT 1
26357: ST_TO_ADDR
// end ;
26358: LD_VAR 0 2
26362: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26363: LD_INT 0
26365: PPUSH
26366: PPUSH
26367: PPUSH
26368: PPUSH
// if pos < 1 then
26369: LD_VAR 0 2
26373: PUSH
26374: LD_INT 1
26376: LESS
26377: IFFALSE 26381
// exit ;
26379: GO 26684
// if pos = 1 then
26381: LD_VAR 0 2
26385: PUSH
26386: LD_INT 1
26388: EQUAL
26389: IFFALSE 26422
// result := Replace ( arr , pos [ 1 ] , value ) else
26391: LD_ADDR_VAR 0 4
26395: PUSH
26396: LD_VAR 0 1
26400: PPUSH
26401: LD_VAR 0 2
26405: PUSH
26406: LD_INT 1
26408: ARRAY
26409: PPUSH
26410: LD_VAR 0 3
26414: PPUSH
26415: CALL_OW 1
26419: ST_TO_ADDR
26420: GO 26684
// begin tmp := arr ;
26422: LD_ADDR_VAR 0 6
26426: PUSH
26427: LD_VAR 0 1
26431: ST_TO_ADDR
// s_arr := [ tmp ] ;
26432: LD_ADDR_VAR 0 7
26436: PUSH
26437: LD_VAR 0 6
26441: PUSH
26442: EMPTY
26443: LIST
26444: ST_TO_ADDR
// for i = 1 to pos - 1 do
26445: LD_ADDR_VAR 0 5
26449: PUSH
26450: DOUBLE
26451: LD_INT 1
26453: DEC
26454: ST_TO_ADDR
26455: LD_VAR 0 2
26459: PUSH
26460: LD_INT 1
26462: MINUS
26463: PUSH
26464: FOR_TO
26465: IFFALSE 26510
// begin tmp := tmp [ pos [ i ] ] ;
26467: LD_ADDR_VAR 0 6
26471: PUSH
26472: LD_VAR 0 6
26476: PUSH
26477: LD_VAR 0 2
26481: PUSH
26482: LD_VAR 0 5
26486: ARRAY
26487: ARRAY
26488: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26489: LD_ADDR_VAR 0 7
26493: PUSH
26494: LD_VAR 0 7
26498: PUSH
26499: LD_VAR 0 6
26503: PUSH
26504: EMPTY
26505: LIST
26506: ADD
26507: ST_TO_ADDR
// end ;
26508: GO 26464
26510: POP
26511: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26512: LD_ADDR_VAR 0 6
26516: PUSH
26517: LD_VAR 0 6
26521: PPUSH
26522: LD_VAR 0 2
26526: PUSH
26527: LD_VAR 0 2
26531: ARRAY
26532: PPUSH
26533: LD_VAR 0 3
26537: PPUSH
26538: CALL_OW 1
26542: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26543: LD_ADDR_VAR 0 7
26547: PUSH
26548: LD_VAR 0 7
26552: PPUSH
26553: LD_VAR 0 7
26557: PPUSH
26558: LD_VAR 0 6
26562: PPUSH
26563: CALL_OW 1
26567: ST_TO_ADDR
// for i = s_arr downto 2 do
26568: LD_ADDR_VAR 0 5
26572: PUSH
26573: DOUBLE
26574: LD_VAR 0 7
26578: INC
26579: ST_TO_ADDR
26580: LD_INT 2
26582: PUSH
26583: FOR_DOWNTO
26584: IFFALSE 26668
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26586: LD_ADDR_VAR 0 6
26590: PUSH
26591: LD_VAR 0 7
26595: PUSH
26596: LD_VAR 0 5
26600: PUSH
26601: LD_INT 1
26603: MINUS
26604: ARRAY
26605: PPUSH
26606: LD_VAR 0 2
26610: PUSH
26611: LD_VAR 0 5
26615: PUSH
26616: LD_INT 1
26618: MINUS
26619: ARRAY
26620: PPUSH
26621: LD_VAR 0 7
26625: PUSH
26626: LD_VAR 0 5
26630: ARRAY
26631: PPUSH
26632: CALL_OW 1
26636: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26637: LD_ADDR_VAR 0 7
26641: PUSH
26642: LD_VAR 0 7
26646: PPUSH
26647: LD_VAR 0 5
26651: PUSH
26652: LD_INT 1
26654: MINUS
26655: PPUSH
26656: LD_VAR 0 6
26660: PPUSH
26661: CALL_OW 1
26665: ST_TO_ADDR
// end ;
26666: GO 26583
26668: POP
26669: POP
// result := s_arr [ 1 ] ;
26670: LD_ADDR_VAR 0 4
26674: PUSH
26675: LD_VAR 0 7
26679: PUSH
26680: LD_INT 1
26682: ARRAY
26683: ST_TO_ADDR
// end ; end ;
26684: LD_VAR 0 4
26688: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26689: LD_INT 0
26691: PPUSH
26692: PPUSH
// if not list then
26693: LD_VAR 0 1
26697: NOT
26698: IFFALSE 26702
// exit ;
26700: GO 26793
// i := list [ pos1 ] ;
26702: LD_ADDR_VAR 0 5
26706: PUSH
26707: LD_VAR 0 1
26711: PUSH
26712: LD_VAR 0 2
26716: ARRAY
26717: ST_TO_ADDR
// if not i then
26718: LD_VAR 0 5
26722: NOT
26723: IFFALSE 26727
// exit ;
26725: GO 26793
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26727: LD_ADDR_VAR 0 1
26731: PUSH
26732: LD_VAR 0 1
26736: PPUSH
26737: LD_VAR 0 2
26741: PPUSH
26742: LD_VAR 0 1
26746: PUSH
26747: LD_VAR 0 3
26751: ARRAY
26752: PPUSH
26753: CALL_OW 1
26757: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26758: LD_ADDR_VAR 0 1
26762: PUSH
26763: LD_VAR 0 1
26767: PPUSH
26768: LD_VAR 0 3
26772: PPUSH
26773: LD_VAR 0 5
26777: PPUSH
26778: CALL_OW 1
26782: ST_TO_ADDR
// result := list ;
26783: LD_ADDR_VAR 0 4
26787: PUSH
26788: LD_VAR 0 1
26792: ST_TO_ADDR
// end ;
26793: LD_VAR 0 4
26797: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26798: LD_INT 0
26800: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26801: LD_ADDR_VAR 0 5
26805: PUSH
26806: LD_VAR 0 1
26810: PPUSH
26811: CALL_OW 250
26815: PPUSH
26816: LD_VAR 0 1
26820: PPUSH
26821: CALL_OW 251
26825: PPUSH
26826: LD_VAR 0 2
26830: PPUSH
26831: LD_VAR 0 3
26835: PPUSH
26836: LD_VAR 0 4
26840: PPUSH
26841: CALL 26851 0 5
26845: ST_TO_ADDR
// end ;
26846: LD_VAR 0 5
26850: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26851: LD_INT 0
26853: PPUSH
26854: PPUSH
26855: PPUSH
26856: PPUSH
// if not list then
26857: LD_VAR 0 3
26861: NOT
26862: IFFALSE 26866
// exit ;
26864: GO 27254
// result := [ ] ;
26866: LD_ADDR_VAR 0 6
26870: PUSH
26871: EMPTY
26872: ST_TO_ADDR
// for i in list do
26873: LD_ADDR_VAR 0 7
26877: PUSH
26878: LD_VAR 0 3
26882: PUSH
26883: FOR_IN
26884: IFFALSE 27086
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26886: LD_ADDR_VAR 0 9
26890: PUSH
26891: LD_VAR 0 7
26895: PPUSH
26896: LD_VAR 0 1
26900: PPUSH
26901: LD_VAR 0 2
26905: PPUSH
26906: CALL_OW 297
26910: ST_TO_ADDR
// if not result then
26911: LD_VAR 0 6
26915: NOT
26916: IFFALSE 26942
// result := [ [ i , tmp ] ] else
26918: LD_ADDR_VAR 0 6
26922: PUSH
26923: LD_VAR 0 7
26927: PUSH
26928: LD_VAR 0 9
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: EMPTY
26938: LIST
26939: ST_TO_ADDR
26940: GO 27084
// begin if result [ result ] [ 2 ] < tmp then
26942: LD_VAR 0 6
26946: PUSH
26947: LD_VAR 0 6
26951: ARRAY
26952: PUSH
26953: LD_INT 2
26955: ARRAY
26956: PUSH
26957: LD_VAR 0 9
26961: LESS
26962: IFFALSE 27004
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26964: LD_ADDR_VAR 0 6
26968: PUSH
26969: LD_VAR 0 6
26973: PPUSH
26974: LD_VAR 0 6
26978: PUSH
26979: LD_INT 1
26981: PLUS
26982: PPUSH
26983: LD_VAR 0 7
26987: PUSH
26988: LD_VAR 0 9
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PPUSH
26997: CALL_OW 2
27001: ST_TO_ADDR
27002: GO 27084
// for j = 1 to result do
27004: LD_ADDR_VAR 0 8
27008: PUSH
27009: DOUBLE
27010: LD_INT 1
27012: DEC
27013: ST_TO_ADDR
27014: LD_VAR 0 6
27018: PUSH
27019: FOR_TO
27020: IFFALSE 27082
// begin if tmp < result [ j ] [ 2 ] then
27022: LD_VAR 0 9
27026: PUSH
27027: LD_VAR 0 6
27031: PUSH
27032: LD_VAR 0 8
27036: ARRAY
27037: PUSH
27038: LD_INT 2
27040: ARRAY
27041: LESS
27042: IFFALSE 27080
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27044: LD_ADDR_VAR 0 6
27048: PUSH
27049: LD_VAR 0 6
27053: PPUSH
27054: LD_VAR 0 8
27058: PPUSH
27059: LD_VAR 0 7
27063: PUSH
27064: LD_VAR 0 9
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PPUSH
27073: CALL_OW 2
27077: ST_TO_ADDR
// break ;
27078: GO 27082
// end ; end ;
27080: GO 27019
27082: POP
27083: POP
// end ; end ;
27084: GO 26883
27086: POP
27087: POP
// if result and not asc then
27088: LD_VAR 0 6
27092: PUSH
27093: LD_VAR 0 4
27097: NOT
27098: AND
27099: IFFALSE 27174
// begin tmp := result ;
27101: LD_ADDR_VAR 0 9
27105: PUSH
27106: LD_VAR 0 6
27110: ST_TO_ADDR
// for i = tmp downto 1 do
27111: LD_ADDR_VAR 0 7
27115: PUSH
27116: DOUBLE
27117: LD_VAR 0 9
27121: INC
27122: ST_TO_ADDR
27123: LD_INT 1
27125: PUSH
27126: FOR_DOWNTO
27127: IFFALSE 27172
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27129: LD_ADDR_VAR 0 6
27133: PUSH
27134: LD_VAR 0 6
27138: PPUSH
27139: LD_VAR 0 9
27143: PUSH
27144: LD_VAR 0 7
27148: MINUS
27149: PUSH
27150: LD_INT 1
27152: PLUS
27153: PPUSH
27154: LD_VAR 0 9
27158: PUSH
27159: LD_VAR 0 7
27163: ARRAY
27164: PPUSH
27165: CALL_OW 1
27169: ST_TO_ADDR
27170: GO 27126
27172: POP
27173: POP
// end ; tmp := [ ] ;
27174: LD_ADDR_VAR 0 9
27178: PUSH
27179: EMPTY
27180: ST_TO_ADDR
// if mode then
27181: LD_VAR 0 5
27185: IFFALSE 27254
// begin for i = 1 to result do
27187: LD_ADDR_VAR 0 7
27191: PUSH
27192: DOUBLE
27193: LD_INT 1
27195: DEC
27196: ST_TO_ADDR
27197: LD_VAR 0 6
27201: PUSH
27202: FOR_TO
27203: IFFALSE 27242
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27205: LD_ADDR_VAR 0 9
27209: PUSH
27210: LD_VAR 0 9
27214: PPUSH
27215: LD_VAR 0 7
27219: PPUSH
27220: LD_VAR 0 6
27224: PUSH
27225: LD_VAR 0 7
27229: ARRAY
27230: PUSH
27231: LD_INT 1
27233: ARRAY
27234: PPUSH
27235: CALL_OW 1
27239: ST_TO_ADDR
27240: GO 27202
27242: POP
27243: POP
// result := tmp ;
27244: LD_ADDR_VAR 0 6
27248: PUSH
27249: LD_VAR 0 9
27253: ST_TO_ADDR
// end ; end ;
27254: LD_VAR 0 6
27258: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27259: LD_INT 0
27261: PPUSH
27262: PPUSH
27263: PPUSH
27264: PPUSH
27265: PPUSH
27266: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27267: LD_ADDR_VAR 0 5
27271: PUSH
27272: LD_INT 0
27274: PUSH
27275: LD_INT 0
27277: PUSH
27278: LD_INT 0
27280: PUSH
27281: EMPTY
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: ST_TO_ADDR
// if not x or not y then
27289: LD_VAR 0 2
27293: NOT
27294: PUSH
27295: LD_VAR 0 3
27299: NOT
27300: OR
27301: IFFALSE 27305
// exit ;
27303: GO 28951
// if not range then
27305: LD_VAR 0 4
27309: NOT
27310: IFFALSE 27320
// range := 10 ;
27312: LD_ADDR_VAR 0 4
27316: PUSH
27317: LD_INT 10
27319: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27320: LD_ADDR_VAR 0 8
27324: PUSH
27325: LD_INT 81
27327: PUSH
27328: LD_VAR 0 1
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 92
27339: PUSH
27340: LD_VAR 0 2
27344: PUSH
27345: LD_VAR 0 3
27349: PUSH
27350: LD_VAR 0 4
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: PUSH
27361: LD_INT 3
27363: PUSH
27364: LD_INT 21
27366: PUSH
27367: LD_INT 3
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: LIST
27382: PPUSH
27383: CALL_OW 69
27387: ST_TO_ADDR
// if not tmp then
27388: LD_VAR 0 8
27392: NOT
27393: IFFALSE 27397
// exit ;
27395: GO 28951
// for i in tmp do
27397: LD_ADDR_VAR 0 6
27401: PUSH
27402: LD_VAR 0 8
27406: PUSH
27407: FOR_IN
27408: IFFALSE 28926
// begin points := [ 0 , 0 , 0 ] ;
27410: LD_ADDR_VAR 0 9
27414: PUSH
27415: LD_INT 0
27417: PUSH
27418: LD_INT 0
27420: PUSH
27421: LD_INT 0
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: LIST
27428: ST_TO_ADDR
// bpoints := 1 ;
27429: LD_ADDR_VAR 0 10
27433: PUSH
27434: LD_INT 1
27436: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27437: LD_VAR 0 6
27441: PPUSH
27442: CALL_OW 247
27446: PUSH
27447: LD_INT 1
27449: DOUBLE
27450: EQUAL
27451: IFTRUE 27455
27453: GO 28033
27455: POP
// begin if GetClass ( i ) = 1 then
27456: LD_VAR 0 6
27460: PPUSH
27461: CALL_OW 257
27465: PUSH
27466: LD_INT 1
27468: EQUAL
27469: IFFALSE 27490
// points := [ 10 , 5 , 3 ] ;
27471: LD_ADDR_VAR 0 9
27475: PUSH
27476: LD_INT 10
27478: PUSH
27479: LD_INT 5
27481: PUSH
27482: LD_INT 3
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: LIST
27489: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27490: LD_VAR 0 6
27494: PPUSH
27495: CALL_OW 257
27499: PUSH
27500: LD_INT 2
27502: PUSH
27503: LD_INT 3
27505: PUSH
27506: LD_INT 4
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: LIST
27513: IN
27514: IFFALSE 27535
// points := [ 3 , 2 , 1 ] ;
27516: LD_ADDR_VAR 0 9
27520: PUSH
27521: LD_INT 3
27523: PUSH
27524: LD_INT 2
27526: PUSH
27527: LD_INT 1
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: LIST
27534: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27535: LD_VAR 0 6
27539: PPUSH
27540: CALL_OW 257
27544: PUSH
27545: LD_INT 5
27547: EQUAL
27548: IFFALSE 27569
// points := [ 130 , 5 , 2 ] ;
27550: LD_ADDR_VAR 0 9
27554: PUSH
27555: LD_INT 130
27557: PUSH
27558: LD_INT 5
27560: PUSH
27561: LD_INT 2
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: LIST
27568: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27569: LD_VAR 0 6
27573: PPUSH
27574: CALL_OW 257
27578: PUSH
27579: LD_INT 8
27581: EQUAL
27582: IFFALSE 27603
// points := [ 35 , 35 , 30 ] ;
27584: LD_ADDR_VAR 0 9
27588: PUSH
27589: LD_INT 35
27591: PUSH
27592: LD_INT 35
27594: PUSH
27595: LD_INT 30
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: LIST
27602: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27603: LD_VAR 0 6
27607: PPUSH
27608: CALL_OW 257
27612: PUSH
27613: LD_INT 9
27615: EQUAL
27616: IFFALSE 27637
// points := [ 20 , 55 , 40 ] ;
27618: LD_ADDR_VAR 0 9
27622: PUSH
27623: LD_INT 20
27625: PUSH
27626: LD_INT 55
27628: PUSH
27629: LD_INT 40
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: LIST
27636: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27637: LD_VAR 0 6
27641: PPUSH
27642: CALL_OW 257
27646: PUSH
27647: LD_INT 12
27649: PUSH
27650: LD_INT 16
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: IN
27657: IFFALSE 27678
// points := [ 5 , 3 , 2 ] ;
27659: LD_ADDR_VAR 0 9
27663: PUSH
27664: LD_INT 5
27666: PUSH
27667: LD_INT 3
27669: PUSH
27670: LD_INT 2
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: LIST
27677: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27678: LD_VAR 0 6
27682: PPUSH
27683: CALL_OW 257
27687: PUSH
27688: LD_INT 17
27690: EQUAL
27691: IFFALSE 27712
// points := [ 100 , 50 , 75 ] ;
27693: LD_ADDR_VAR 0 9
27697: PUSH
27698: LD_INT 100
27700: PUSH
27701: LD_INT 50
27703: PUSH
27704: LD_INT 75
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: LIST
27711: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27712: LD_VAR 0 6
27716: PPUSH
27717: CALL_OW 257
27721: PUSH
27722: LD_INT 15
27724: EQUAL
27725: IFFALSE 27746
// points := [ 10 , 5 , 3 ] ;
27727: LD_ADDR_VAR 0 9
27731: PUSH
27732: LD_INT 10
27734: PUSH
27735: LD_INT 5
27737: PUSH
27738: LD_INT 3
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: LIST
27745: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27746: LD_VAR 0 6
27750: PPUSH
27751: CALL_OW 257
27755: PUSH
27756: LD_INT 14
27758: EQUAL
27759: IFFALSE 27780
// points := [ 10 , 0 , 0 ] ;
27761: LD_ADDR_VAR 0 9
27765: PUSH
27766: LD_INT 10
27768: PUSH
27769: LD_INT 0
27771: PUSH
27772: LD_INT 0
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: LIST
27779: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27780: LD_VAR 0 6
27784: PPUSH
27785: CALL_OW 257
27789: PUSH
27790: LD_INT 11
27792: EQUAL
27793: IFFALSE 27814
// points := [ 30 , 10 , 5 ] ;
27795: LD_ADDR_VAR 0 9
27799: PUSH
27800: LD_INT 30
27802: PUSH
27803: LD_INT 10
27805: PUSH
27806: LD_INT 5
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: LIST
27813: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27814: LD_VAR 0 1
27818: PPUSH
27819: LD_INT 5
27821: PPUSH
27822: CALL_OW 321
27826: PUSH
27827: LD_INT 2
27829: EQUAL
27830: IFFALSE 27847
// bpoints := bpoints * 1.8 ;
27832: LD_ADDR_VAR 0 10
27836: PUSH
27837: LD_VAR 0 10
27841: PUSH
27842: LD_REAL  1.80000000000000E+0000
27845: MUL
27846: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27847: LD_VAR 0 6
27851: PPUSH
27852: CALL_OW 257
27856: PUSH
27857: LD_INT 1
27859: PUSH
27860: LD_INT 2
27862: PUSH
27863: LD_INT 3
27865: PUSH
27866: LD_INT 4
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: IN
27875: PUSH
27876: LD_VAR 0 1
27880: PPUSH
27881: LD_INT 51
27883: PPUSH
27884: CALL_OW 321
27888: PUSH
27889: LD_INT 2
27891: EQUAL
27892: AND
27893: IFFALSE 27910
// bpoints := bpoints * 1.2 ;
27895: LD_ADDR_VAR 0 10
27899: PUSH
27900: LD_VAR 0 10
27904: PUSH
27905: LD_REAL  1.20000000000000E+0000
27908: MUL
27909: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27910: LD_VAR 0 6
27914: PPUSH
27915: CALL_OW 257
27919: PUSH
27920: LD_INT 5
27922: PUSH
27923: LD_INT 7
27925: PUSH
27926: LD_INT 9
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: LIST
27933: IN
27934: PUSH
27935: LD_VAR 0 1
27939: PPUSH
27940: LD_INT 52
27942: PPUSH
27943: CALL_OW 321
27947: PUSH
27948: LD_INT 2
27950: EQUAL
27951: AND
27952: IFFALSE 27969
// bpoints := bpoints * 1.5 ;
27954: LD_ADDR_VAR 0 10
27958: PUSH
27959: LD_VAR 0 10
27963: PUSH
27964: LD_REAL  1.50000000000000E+0000
27967: MUL
27968: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27969: LD_VAR 0 1
27973: PPUSH
27974: LD_INT 66
27976: PPUSH
27977: CALL_OW 321
27981: PUSH
27982: LD_INT 2
27984: EQUAL
27985: IFFALSE 28002
// bpoints := bpoints * 1.1 ;
27987: LD_ADDR_VAR 0 10
27991: PUSH
27992: LD_VAR 0 10
27996: PUSH
27997: LD_REAL  1.10000000000000E+0000
28000: MUL
28001: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28002: LD_ADDR_VAR 0 10
28006: PUSH
28007: LD_VAR 0 10
28011: PUSH
28012: LD_VAR 0 6
28016: PPUSH
28017: LD_INT 1
28019: PPUSH
28020: CALL_OW 259
28024: PUSH
28025: LD_REAL  1.15000000000000E+0000
28028: MUL
28029: MUL
28030: ST_TO_ADDR
// end ; unit_vehicle :
28031: GO 28855
28033: LD_INT 2
28035: DOUBLE
28036: EQUAL
28037: IFTRUE 28041
28039: GO 28843
28041: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28042: LD_VAR 0 6
28046: PPUSH
28047: CALL_OW 264
28051: PUSH
28052: LD_INT 2
28054: PUSH
28055: LD_INT 42
28057: PUSH
28058: LD_INT 24
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: LIST
28065: IN
28066: IFFALSE 28087
// points := [ 25 , 5 , 3 ] ;
28068: LD_ADDR_VAR 0 9
28072: PUSH
28073: LD_INT 25
28075: PUSH
28076: LD_INT 5
28078: PUSH
28079: LD_INT 3
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: LIST
28086: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28087: LD_VAR 0 6
28091: PPUSH
28092: CALL_OW 264
28096: PUSH
28097: LD_INT 4
28099: PUSH
28100: LD_INT 43
28102: PUSH
28103: LD_INT 25
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: LIST
28110: IN
28111: IFFALSE 28132
// points := [ 40 , 15 , 5 ] ;
28113: LD_ADDR_VAR 0 9
28117: PUSH
28118: LD_INT 40
28120: PUSH
28121: LD_INT 15
28123: PUSH
28124: LD_INT 5
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: LIST
28131: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28132: LD_VAR 0 6
28136: PPUSH
28137: CALL_OW 264
28141: PUSH
28142: LD_INT 3
28144: PUSH
28145: LD_INT 23
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: IN
28152: IFFALSE 28173
// points := [ 7 , 25 , 8 ] ;
28154: LD_ADDR_VAR 0 9
28158: PUSH
28159: LD_INT 7
28161: PUSH
28162: LD_INT 25
28164: PUSH
28165: LD_INT 8
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: LIST
28172: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28173: LD_VAR 0 6
28177: PPUSH
28178: CALL_OW 264
28182: PUSH
28183: LD_INT 5
28185: PUSH
28186: LD_INT 27
28188: PUSH
28189: LD_INT 44
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: LIST
28196: IN
28197: IFFALSE 28218
// points := [ 14 , 50 , 16 ] ;
28199: LD_ADDR_VAR 0 9
28203: PUSH
28204: LD_INT 14
28206: PUSH
28207: LD_INT 50
28209: PUSH
28210: LD_INT 16
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: LIST
28217: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28218: LD_VAR 0 6
28222: PPUSH
28223: CALL_OW 264
28227: PUSH
28228: LD_INT 6
28230: PUSH
28231: LD_INT 46
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: IN
28238: IFFALSE 28259
// points := [ 32 , 120 , 70 ] ;
28240: LD_ADDR_VAR 0 9
28244: PUSH
28245: LD_INT 32
28247: PUSH
28248: LD_INT 120
28250: PUSH
28251: LD_INT 70
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: LIST
28258: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
28259: LD_VAR 0 6
28263: PPUSH
28264: CALL_OW 264
28268: PUSH
28269: LD_INT 7
28271: PUSH
28272: LD_INT 28
28274: PUSH
28275: LD_INT 45
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: LIST
28282: IN
28283: IFFALSE 28304
// points := [ 35 , 20 , 45 ] ;
28285: LD_ADDR_VAR 0 9
28289: PUSH
28290: LD_INT 35
28292: PUSH
28293: LD_INT 20
28295: PUSH
28296: LD_INT 45
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: LIST
28303: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28304: LD_VAR 0 6
28308: PPUSH
28309: CALL_OW 264
28313: PUSH
28314: LD_INT 47
28316: PUSH
28317: EMPTY
28318: LIST
28319: IN
28320: IFFALSE 28341
// points := [ 67 , 45 , 75 ] ;
28322: LD_ADDR_VAR 0 9
28326: PUSH
28327: LD_INT 67
28329: PUSH
28330: LD_INT 45
28332: PUSH
28333: LD_INT 75
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: LIST
28340: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28341: LD_VAR 0 6
28345: PPUSH
28346: CALL_OW 264
28350: PUSH
28351: LD_INT 26
28353: PUSH
28354: EMPTY
28355: LIST
28356: IN
28357: IFFALSE 28378
// points := [ 120 , 30 , 80 ] ;
28359: LD_ADDR_VAR 0 9
28363: PUSH
28364: LD_INT 120
28366: PUSH
28367: LD_INT 30
28369: PUSH
28370: LD_INT 80
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: LIST
28377: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28378: LD_VAR 0 6
28382: PPUSH
28383: CALL_OW 264
28387: PUSH
28388: LD_INT 22
28390: PUSH
28391: EMPTY
28392: LIST
28393: IN
28394: IFFALSE 28415
// points := [ 40 , 1 , 1 ] ;
28396: LD_ADDR_VAR 0 9
28400: PUSH
28401: LD_INT 40
28403: PUSH
28404: LD_INT 1
28406: PUSH
28407: LD_INT 1
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: LIST
28414: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28415: LD_VAR 0 6
28419: PPUSH
28420: CALL_OW 264
28424: PUSH
28425: LD_INT 29
28427: PUSH
28428: EMPTY
28429: LIST
28430: IN
28431: IFFALSE 28452
// points := [ 70 , 200 , 400 ] ;
28433: LD_ADDR_VAR 0 9
28437: PUSH
28438: LD_INT 70
28440: PUSH
28441: LD_INT 200
28443: PUSH
28444: LD_INT 400
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: LIST
28451: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28452: LD_VAR 0 6
28456: PPUSH
28457: CALL_OW 264
28461: PUSH
28462: LD_INT 14
28464: PUSH
28465: LD_INT 53
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: IN
28472: IFFALSE 28493
// points := [ 40 , 10 , 20 ] ;
28474: LD_ADDR_VAR 0 9
28478: PUSH
28479: LD_INT 40
28481: PUSH
28482: LD_INT 10
28484: PUSH
28485: LD_INT 20
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: LIST
28492: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28493: LD_VAR 0 6
28497: PPUSH
28498: CALL_OW 264
28502: PUSH
28503: LD_INT 9
28505: PUSH
28506: EMPTY
28507: LIST
28508: IN
28509: IFFALSE 28530
// points := [ 5 , 70 , 20 ] ;
28511: LD_ADDR_VAR 0 9
28515: PUSH
28516: LD_INT 5
28518: PUSH
28519: LD_INT 70
28521: PUSH
28522: LD_INT 20
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: LIST
28529: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28530: LD_VAR 0 6
28534: PPUSH
28535: CALL_OW 264
28539: PUSH
28540: LD_INT 10
28542: PUSH
28543: EMPTY
28544: LIST
28545: IN
28546: IFFALSE 28567
// points := [ 35 , 110 , 70 ] ;
28548: LD_ADDR_VAR 0 9
28552: PUSH
28553: LD_INT 35
28555: PUSH
28556: LD_INT 110
28558: PUSH
28559: LD_INT 70
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: LIST
28566: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28567: LD_VAR 0 6
28571: PPUSH
28572: CALL_OW 265
28576: PUSH
28577: LD_INT 25
28579: EQUAL
28580: IFFALSE 28601
// points := [ 80 , 65 , 100 ] ;
28582: LD_ADDR_VAR 0 9
28586: PUSH
28587: LD_INT 80
28589: PUSH
28590: LD_INT 65
28592: PUSH
28593: LD_INT 100
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: LIST
28600: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28601: LD_VAR 0 6
28605: PPUSH
28606: CALL_OW 263
28610: PUSH
28611: LD_INT 1
28613: EQUAL
28614: IFFALSE 28649
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28616: LD_ADDR_VAR 0 10
28620: PUSH
28621: LD_VAR 0 10
28625: PUSH
28626: LD_VAR 0 6
28630: PPUSH
28631: CALL_OW 311
28635: PPUSH
28636: LD_INT 3
28638: PPUSH
28639: CALL_OW 259
28643: PUSH
28644: LD_INT 4
28646: MUL
28647: MUL
28648: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28649: LD_VAR 0 6
28653: PPUSH
28654: CALL_OW 263
28658: PUSH
28659: LD_INT 2
28661: EQUAL
28662: IFFALSE 28713
// begin j := IsControledBy ( i ) ;
28664: LD_ADDR_VAR 0 7
28668: PUSH
28669: LD_VAR 0 6
28673: PPUSH
28674: CALL_OW 312
28678: ST_TO_ADDR
// if j then
28679: LD_VAR 0 7
28683: IFFALSE 28713
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28685: LD_ADDR_VAR 0 10
28689: PUSH
28690: LD_VAR 0 10
28694: PUSH
28695: LD_VAR 0 7
28699: PPUSH
28700: LD_INT 3
28702: PPUSH
28703: CALL_OW 259
28707: PUSH
28708: LD_INT 3
28710: MUL
28711: MUL
28712: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28713: LD_VAR 0 6
28717: PPUSH
28718: CALL_OW 264
28722: PUSH
28723: LD_INT 5
28725: PUSH
28726: LD_INT 6
28728: PUSH
28729: LD_INT 46
28731: PUSH
28732: LD_INT 44
28734: PUSH
28735: LD_INT 47
28737: PUSH
28738: LD_INT 45
28740: PUSH
28741: LD_INT 28
28743: PUSH
28744: LD_INT 7
28746: PUSH
28747: LD_INT 27
28749: PUSH
28750: LD_INT 29
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: IN
28765: PUSH
28766: LD_VAR 0 1
28770: PPUSH
28771: LD_INT 52
28773: PPUSH
28774: CALL_OW 321
28778: PUSH
28779: LD_INT 2
28781: EQUAL
28782: AND
28783: IFFALSE 28800
// bpoints := bpoints * 1.2 ;
28785: LD_ADDR_VAR 0 10
28789: PUSH
28790: LD_VAR 0 10
28794: PUSH
28795: LD_REAL  1.20000000000000E+0000
28798: MUL
28799: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28800: LD_VAR 0 6
28804: PPUSH
28805: CALL_OW 264
28809: PUSH
28810: LD_INT 6
28812: PUSH
28813: LD_INT 46
28815: PUSH
28816: LD_INT 47
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: LIST
28823: IN
28824: IFFALSE 28841
// bpoints := bpoints * 1.2 ;
28826: LD_ADDR_VAR 0 10
28830: PUSH
28831: LD_VAR 0 10
28835: PUSH
28836: LD_REAL  1.20000000000000E+0000
28839: MUL
28840: ST_TO_ADDR
// end ; unit_building :
28841: GO 28855
28843: LD_INT 3
28845: DOUBLE
28846: EQUAL
28847: IFTRUE 28851
28849: GO 28854
28851: POP
// ; end ;
28852: GO 28855
28854: POP
// for j = 1 to 3 do
28855: LD_ADDR_VAR 0 7
28859: PUSH
28860: DOUBLE
28861: LD_INT 1
28863: DEC
28864: ST_TO_ADDR
28865: LD_INT 3
28867: PUSH
28868: FOR_TO
28869: IFFALSE 28922
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28871: LD_ADDR_VAR 0 5
28875: PUSH
28876: LD_VAR 0 5
28880: PPUSH
28881: LD_VAR 0 7
28885: PPUSH
28886: LD_VAR 0 5
28890: PUSH
28891: LD_VAR 0 7
28895: ARRAY
28896: PUSH
28897: LD_VAR 0 9
28901: PUSH
28902: LD_VAR 0 7
28906: ARRAY
28907: PUSH
28908: LD_VAR 0 10
28912: MUL
28913: PLUS
28914: PPUSH
28915: CALL_OW 1
28919: ST_TO_ADDR
28920: GO 28868
28922: POP
28923: POP
// end ;
28924: GO 27407
28926: POP
28927: POP
// result := Replace ( result , 4 , tmp ) ;
28928: LD_ADDR_VAR 0 5
28932: PUSH
28933: LD_VAR 0 5
28937: PPUSH
28938: LD_INT 4
28940: PPUSH
28941: LD_VAR 0 8
28945: PPUSH
28946: CALL_OW 1
28950: ST_TO_ADDR
// end ;
28951: LD_VAR 0 5
28955: RET
// export function DangerAtRange ( unit , range ) ; begin
28956: LD_INT 0
28958: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28959: LD_ADDR_VAR 0 3
28963: PUSH
28964: LD_VAR 0 1
28968: PPUSH
28969: CALL_OW 255
28973: PPUSH
28974: LD_VAR 0 1
28978: PPUSH
28979: CALL_OW 250
28983: PPUSH
28984: LD_VAR 0 1
28988: PPUSH
28989: CALL_OW 251
28993: PPUSH
28994: LD_VAR 0 2
28998: PPUSH
28999: CALL 27259 0 4
29003: ST_TO_ADDR
// end ;
29004: LD_VAR 0 3
29008: RET
// export function DangerInArea ( side , area ) ; begin
29009: LD_INT 0
29011: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29012: LD_ADDR_VAR 0 3
29016: PUSH
29017: LD_VAR 0 2
29021: PPUSH
29022: LD_INT 81
29024: PUSH
29025: LD_VAR 0 1
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PPUSH
29034: CALL_OW 70
29038: ST_TO_ADDR
// end ;
29039: LD_VAR 0 3
29043: RET
// export function IsExtension ( b ) ; begin
29044: LD_INT 0
29046: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29047: LD_ADDR_VAR 0 2
29051: PUSH
29052: LD_VAR 0 1
29056: PUSH
29057: LD_INT 23
29059: PUSH
29060: LD_INT 20
29062: PUSH
29063: LD_INT 22
29065: PUSH
29066: LD_INT 17
29068: PUSH
29069: LD_INT 24
29071: PUSH
29072: LD_INT 21
29074: PUSH
29075: LD_INT 19
29077: PUSH
29078: LD_INT 16
29080: PUSH
29081: LD_INT 25
29083: PUSH
29084: LD_INT 18
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: IN
29099: ST_TO_ADDR
// end ;
29100: LD_VAR 0 2
29104: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29105: LD_INT 0
29107: PPUSH
29108: PPUSH
29109: PPUSH
// result := [ ] ;
29110: LD_ADDR_VAR 0 4
29114: PUSH
29115: EMPTY
29116: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29117: LD_ADDR_VAR 0 5
29121: PUSH
29122: LD_VAR 0 2
29126: PPUSH
29127: LD_INT 21
29129: PUSH
29130: LD_INT 3
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PPUSH
29137: CALL_OW 70
29141: ST_TO_ADDR
// if not tmp then
29142: LD_VAR 0 5
29146: NOT
29147: IFFALSE 29151
// exit ;
29149: GO 29215
// if checkLink then
29151: LD_VAR 0 3
29155: IFFALSE 29205
// begin for i in tmp do
29157: LD_ADDR_VAR 0 6
29161: PUSH
29162: LD_VAR 0 5
29166: PUSH
29167: FOR_IN
29168: IFFALSE 29203
// if GetBase ( i ) <> base then
29170: LD_VAR 0 6
29174: PPUSH
29175: CALL_OW 274
29179: PUSH
29180: LD_VAR 0 1
29184: NONEQUAL
29185: IFFALSE 29201
// ComLinkToBase ( base , i ) ;
29187: LD_VAR 0 1
29191: PPUSH
29192: LD_VAR 0 6
29196: PPUSH
29197: CALL_OW 169
29201: GO 29167
29203: POP
29204: POP
// end ; result := tmp ;
29205: LD_ADDR_VAR 0 4
29209: PUSH
29210: LD_VAR 0 5
29214: ST_TO_ADDR
// end ;
29215: LD_VAR 0 4
29219: RET
// export function ComComplete ( units , b ) ; var i ; begin
29220: LD_INT 0
29222: PPUSH
29223: PPUSH
// if not units then
29224: LD_VAR 0 1
29228: NOT
29229: IFFALSE 29233
// exit ;
29231: GO 29323
// for i in units do
29233: LD_ADDR_VAR 0 4
29237: PUSH
29238: LD_VAR 0 1
29242: PUSH
29243: FOR_IN
29244: IFFALSE 29321
// if BuildingStatus ( b ) = bs_build then
29246: LD_VAR 0 2
29250: PPUSH
29251: CALL_OW 461
29255: PUSH
29256: LD_INT 1
29258: EQUAL
29259: IFFALSE 29319
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29261: LD_VAR 0 4
29265: PPUSH
29266: LD_STRING h
29268: PUSH
29269: LD_VAR 0 2
29273: PPUSH
29274: CALL_OW 250
29278: PUSH
29279: LD_VAR 0 2
29283: PPUSH
29284: CALL_OW 251
29288: PUSH
29289: LD_VAR 0 2
29293: PUSH
29294: LD_INT 0
29296: PUSH
29297: LD_INT 0
29299: PUSH
29300: LD_INT 0
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: PUSH
29312: EMPTY
29313: LIST
29314: PPUSH
29315: CALL_OW 446
29319: GO 29243
29321: POP
29322: POP
// end ;
29323: LD_VAR 0 3
29327: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29328: LD_INT 0
29330: PPUSH
29331: PPUSH
29332: PPUSH
29333: PPUSH
29334: PPUSH
29335: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29336: LD_VAR 0 1
29340: NOT
29341: PUSH
29342: LD_VAR 0 1
29346: PPUSH
29347: CALL_OW 263
29351: PUSH
29352: LD_INT 2
29354: EQUAL
29355: NOT
29356: OR
29357: IFFALSE 29361
// exit ;
29359: GO 29677
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29361: LD_ADDR_VAR 0 6
29365: PUSH
29366: LD_INT 22
29368: PUSH
29369: LD_VAR 0 1
29373: PPUSH
29374: CALL_OW 255
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 2
29385: PUSH
29386: LD_INT 30
29388: PUSH
29389: LD_INT 36
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 34
29398: PUSH
29399: LD_INT 31
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: LIST
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PPUSH
29415: CALL_OW 69
29419: ST_TO_ADDR
// if not tmp then
29420: LD_VAR 0 6
29424: NOT
29425: IFFALSE 29429
// exit ;
29427: GO 29677
// result := [ ] ;
29429: LD_ADDR_VAR 0 2
29433: PUSH
29434: EMPTY
29435: ST_TO_ADDR
// for i in tmp do
29436: LD_ADDR_VAR 0 3
29440: PUSH
29441: LD_VAR 0 6
29445: PUSH
29446: FOR_IN
29447: IFFALSE 29518
// begin t := UnitsInside ( i ) ;
29449: LD_ADDR_VAR 0 4
29453: PUSH
29454: LD_VAR 0 3
29458: PPUSH
29459: CALL_OW 313
29463: ST_TO_ADDR
// if t then
29464: LD_VAR 0 4
29468: IFFALSE 29516
// for j in t do
29470: LD_ADDR_VAR 0 7
29474: PUSH
29475: LD_VAR 0 4
29479: PUSH
29480: FOR_IN
29481: IFFALSE 29514
// result := Insert ( result , result + 1 , j ) ;
29483: LD_ADDR_VAR 0 2
29487: PUSH
29488: LD_VAR 0 2
29492: PPUSH
29493: LD_VAR 0 2
29497: PUSH
29498: LD_INT 1
29500: PLUS
29501: PPUSH
29502: LD_VAR 0 7
29506: PPUSH
29507: CALL_OW 2
29511: ST_TO_ADDR
29512: GO 29480
29514: POP
29515: POP
// end ;
29516: GO 29446
29518: POP
29519: POP
// if not result then
29520: LD_VAR 0 2
29524: NOT
29525: IFFALSE 29529
// exit ;
29527: GO 29677
// mech := result [ 1 ] ;
29529: LD_ADDR_VAR 0 5
29533: PUSH
29534: LD_VAR 0 2
29538: PUSH
29539: LD_INT 1
29541: ARRAY
29542: ST_TO_ADDR
// if result > 1 then
29543: LD_VAR 0 2
29547: PUSH
29548: LD_INT 1
29550: GREATER
29551: IFFALSE 29663
// for i = 2 to result do
29553: LD_ADDR_VAR 0 3
29557: PUSH
29558: DOUBLE
29559: LD_INT 2
29561: DEC
29562: ST_TO_ADDR
29563: LD_VAR 0 2
29567: PUSH
29568: FOR_TO
29569: IFFALSE 29661
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29571: LD_ADDR_VAR 0 4
29575: PUSH
29576: LD_VAR 0 2
29580: PUSH
29581: LD_VAR 0 3
29585: ARRAY
29586: PPUSH
29587: LD_INT 3
29589: PPUSH
29590: CALL_OW 259
29594: PUSH
29595: LD_VAR 0 2
29599: PUSH
29600: LD_VAR 0 3
29604: ARRAY
29605: PPUSH
29606: CALL_OW 432
29610: MINUS
29611: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29612: LD_VAR 0 4
29616: PUSH
29617: LD_VAR 0 5
29621: PPUSH
29622: LD_INT 3
29624: PPUSH
29625: CALL_OW 259
29629: PUSH
29630: LD_VAR 0 5
29634: PPUSH
29635: CALL_OW 432
29639: MINUS
29640: GREATEREQUAL
29641: IFFALSE 29659
// mech := result [ i ] ;
29643: LD_ADDR_VAR 0 5
29647: PUSH
29648: LD_VAR 0 2
29652: PUSH
29653: LD_VAR 0 3
29657: ARRAY
29658: ST_TO_ADDR
// end ;
29659: GO 29568
29661: POP
29662: POP
// ComLinkTo ( vehicle , mech ) ;
29663: LD_VAR 0 1
29667: PPUSH
29668: LD_VAR 0 5
29672: PPUSH
29673: CALL_OW 135
// end ;
29677: LD_VAR 0 2
29681: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29682: LD_INT 0
29684: PPUSH
29685: PPUSH
29686: PPUSH
29687: PPUSH
29688: PPUSH
29689: PPUSH
29690: PPUSH
29691: PPUSH
29692: PPUSH
29693: PPUSH
29694: PPUSH
29695: PPUSH
29696: PPUSH
// result := [ ] ;
29697: LD_ADDR_VAR 0 7
29701: PUSH
29702: EMPTY
29703: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29704: LD_VAR 0 1
29708: PPUSH
29709: CALL_OW 266
29713: PUSH
29714: LD_INT 0
29716: PUSH
29717: LD_INT 1
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: IN
29724: NOT
29725: IFFALSE 29729
// exit ;
29727: GO 31363
// if name then
29729: LD_VAR 0 3
29733: IFFALSE 29749
// SetBName ( base_dep , name ) ;
29735: LD_VAR 0 1
29739: PPUSH
29740: LD_VAR 0 3
29744: PPUSH
29745: CALL_OW 500
// base := GetBase ( base_dep ) ;
29749: LD_ADDR_VAR 0 15
29753: PUSH
29754: LD_VAR 0 1
29758: PPUSH
29759: CALL_OW 274
29763: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29764: LD_ADDR_VAR 0 16
29768: PUSH
29769: LD_VAR 0 1
29773: PPUSH
29774: CALL_OW 255
29778: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29779: LD_ADDR_VAR 0 17
29783: PUSH
29784: LD_VAR 0 1
29788: PPUSH
29789: CALL_OW 248
29793: ST_TO_ADDR
// if sources then
29794: LD_VAR 0 5
29798: IFFALSE 29845
// for i = 1 to 3 do
29800: LD_ADDR_VAR 0 8
29804: PUSH
29805: DOUBLE
29806: LD_INT 1
29808: DEC
29809: ST_TO_ADDR
29810: LD_INT 3
29812: PUSH
29813: FOR_TO
29814: IFFALSE 29843
// AddResourceType ( base , i , sources [ i ] ) ;
29816: LD_VAR 0 15
29820: PPUSH
29821: LD_VAR 0 8
29825: PPUSH
29826: LD_VAR 0 5
29830: PUSH
29831: LD_VAR 0 8
29835: ARRAY
29836: PPUSH
29837: CALL_OW 276
29841: GO 29813
29843: POP
29844: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29845: LD_ADDR_VAR 0 18
29849: PUSH
29850: LD_VAR 0 15
29854: PPUSH
29855: LD_VAR 0 2
29859: PPUSH
29860: LD_INT 1
29862: PPUSH
29863: CALL 29105 0 3
29867: ST_TO_ADDR
// InitHc ;
29868: CALL_OW 19
// InitUc ;
29872: CALL_OW 18
// uc_side := side ;
29876: LD_ADDR_OWVAR 20
29880: PUSH
29881: LD_VAR 0 16
29885: ST_TO_ADDR
// uc_nation := nation ;
29886: LD_ADDR_OWVAR 21
29890: PUSH
29891: LD_VAR 0 17
29895: ST_TO_ADDR
// if buildings then
29896: LD_VAR 0 18
29900: IFFALSE 31222
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29902: LD_ADDR_VAR 0 19
29906: PUSH
29907: LD_VAR 0 18
29911: PPUSH
29912: LD_INT 2
29914: PUSH
29915: LD_INT 30
29917: PUSH
29918: LD_INT 29
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 30
29927: PUSH
29928: LD_INT 30
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: LIST
29939: PPUSH
29940: CALL_OW 72
29944: ST_TO_ADDR
// if tmp then
29945: LD_VAR 0 19
29949: IFFALSE 29997
// for i in tmp do
29951: LD_ADDR_VAR 0 8
29955: PUSH
29956: LD_VAR 0 19
29960: PUSH
29961: FOR_IN
29962: IFFALSE 29995
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29964: LD_VAR 0 8
29968: PPUSH
29969: CALL_OW 250
29973: PPUSH
29974: LD_VAR 0 8
29978: PPUSH
29979: CALL_OW 251
29983: PPUSH
29984: LD_VAR 0 16
29988: PPUSH
29989: CALL_OW 441
29993: GO 29961
29995: POP
29996: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29997: LD_VAR 0 18
30001: PPUSH
30002: LD_INT 2
30004: PUSH
30005: LD_INT 30
30007: PUSH
30008: LD_INT 32
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: LD_INT 30
30017: PUSH
30018: LD_INT 33
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: LIST
30029: PPUSH
30030: CALL_OW 72
30034: IFFALSE 30122
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30036: LD_ADDR_VAR 0 8
30040: PUSH
30041: LD_VAR 0 18
30045: PPUSH
30046: LD_INT 2
30048: PUSH
30049: LD_INT 30
30051: PUSH
30052: LD_INT 32
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 30
30061: PUSH
30062: LD_INT 33
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: LIST
30073: PPUSH
30074: CALL_OW 72
30078: PUSH
30079: FOR_IN
30080: IFFALSE 30120
// begin if not GetBWeapon ( i ) then
30082: LD_VAR 0 8
30086: PPUSH
30087: CALL_OW 269
30091: NOT
30092: IFFALSE 30118
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30094: LD_VAR 0 8
30098: PPUSH
30099: LD_VAR 0 8
30103: PPUSH
30104: LD_VAR 0 2
30108: PPUSH
30109: CALL 31368 0 2
30113: PPUSH
30114: CALL_OW 431
// end ;
30118: GO 30079
30120: POP
30121: POP
// end ; for i = 1 to personel do
30122: LD_ADDR_VAR 0 8
30126: PUSH
30127: DOUBLE
30128: LD_INT 1
30130: DEC
30131: ST_TO_ADDR
30132: LD_VAR 0 6
30136: PUSH
30137: FOR_TO
30138: IFFALSE 31202
// begin if i > 4 then
30140: LD_VAR 0 8
30144: PUSH
30145: LD_INT 4
30147: GREATER
30148: IFFALSE 30152
// break ;
30150: GO 31202
// case i of 1 :
30152: LD_VAR 0 8
30156: PUSH
30157: LD_INT 1
30159: DOUBLE
30160: EQUAL
30161: IFTRUE 30165
30163: GO 30245
30165: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30166: LD_ADDR_VAR 0 12
30170: PUSH
30171: LD_VAR 0 18
30175: PPUSH
30176: LD_INT 22
30178: PUSH
30179: LD_VAR 0 16
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 58
30190: PUSH
30191: EMPTY
30192: LIST
30193: PUSH
30194: LD_INT 2
30196: PUSH
30197: LD_INT 30
30199: PUSH
30200: LD_INT 32
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 30
30209: PUSH
30210: LD_INT 4
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 30
30219: PUSH
30220: LD_INT 5
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: LIST
30237: PPUSH
30238: CALL_OW 72
30242: ST_TO_ADDR
30243: GO 30467
30245: LD_INT 2
30247: DOUBLE
30248: EQUAL
30249: IFTRUE 30253
30251: GO 30315
30253: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30254: LD_ADDR_VAR 0 12
30258: PUSH
30259: LD_VAR 0 18
30263: PPUSH
30264: LD_INT 22
30266: PUSH
30267: LD_VAR 0 16
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 2
30278: PUSH
30279: LD_INT 30
30281: PUSH
30282: LD_INT 0
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 30
30291: PUSH
30292: LD_INT 1
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: LIST
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PPUSH
30308: CALL_OW 72
30312: ST_TO_ADDR
30313: GO 30467
30315: LD_INT 3
30317: DOUBLE
30318: EQUAL
30319: IFTRUE 30323
30321: GO 30385
30323: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30324: LD_ADDR_VAR 0 12
30328: PUSH
30329: LD_VAR 0 18
30333: PPUSH
30334: LD_INT 22
30336: PUSH
30337: LD_VAR 0 16
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 2
30348: PUSH
30349: LD_INT 30
30351: PUSH
30352: LD_INT 2
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 30
30361: PUSH
30362: LD_INT 3
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: LIST
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PPUSH
30378: CALL_OW 72
30382: ST_TO_ADDR
30383: GO 30467
30385: LD_INT 4
30387: DOUBLE
30388: EQUAL
30389: IFTRUE 30393
30391: GO 30466
30393: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30394: LD_ADDR_VAR 0 12
30398: PUSH
30399: LD_VAR 0 18
30403: PPUSH
30404: LD_INT 22
30406: PUSH
30407: LD_VAR 0 16
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 2
30418: PUSH
30419: LD_INT 30
30421: PUSH
30422: LD_INT 6
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 30
30431: PUSH
30432: LD_INT 7
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 30
30441: PUSH
30442: LD_INT 8
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PPUSH
30459: CALL_OW 72
30463: ST_TO_ADDR
30464: GO 30467
30466: POP
// if i = 1 then
30467: LD_VAR 0 8
30471: PUSH
30472: LD_INT 1
30474: EQUAL
30475: IFFALSE 30586
// begin tmp := [ ] ;
30477: LD_ADDR_VAR 0 19
30481: PUSH
30482: EMPTY
30483: ST_TO_ADDR
// for j in f do
30484: LD_ADDR_VAR 0 9
30488: PUSH
30489: LD_VAR 0 12
30493: PUSH
30494: FOR_IN
30495: IFFALSE 30568
// if GetBType ( j ) = b_bunker then
30497: LD_VAR 0 9
30501: PPUSH
30502: CALL_OW 266
30506: PUSH
30507: LD_INT 32
30509: EQUAL
30510: IFFALSE 30537
// tmp := Insert ( tmp , 1 , j ) else
30512: LD_ADDR_VAR 0 19
30516: PUSH
30517: LD_VAR 0 19
30521: PPUSH
30522: LD_INT 1
30524: PPUSH
30525: LD_VAR 0 9
30529: PPUSH
30530: CALL_OW 2
30534: ST_TO_ADDR
30535: GO 30566
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30537: LD_ADDR_VAR 0 19
30541: PUSH
30542: LD_VAR 0 19
30546: PPUSH
30547: LD_VAR 0 19
30551: PUSH
30552: LD_INT 1
30554: PLUS
30555: PPUSH
30556: LD_VAR 0 9
30560: PPUSH
30561: CALL_OW 2
30565: ST_TO_ADDR
30566: GO 30494
30568: POP
30569: POP
// if tmp then
30570: LD_VAR 0 19
30574: IFFALSE 30586
// f := tmp ;
30576: LD_ADDR_VAR 0 12
30580: PUSH
30581: LD_VAR 0 19
30585: ST_TO_ADDR
// end ; x := personel [ i ] ;
30586: LD_ADDR_VAR 0 13
30590: PUSH
30591: LD_VAR 0 6
30595: PUSH
30596: LD_VAR 0 8
30600: ARRAY
30601: ST_TO_ADDR
// if x = - 1 then
30602: LD_VAR 0 13
30606: PUSH
30607: LD_INT 1
30609: NEG
30610: EQUAL
30611: IFFALSE 30820
// begin for j in f do
30613: LD_ADDR_VAR 0 9
30617: PUSH
30618: LD_VAR 0 12
30622: PUSH
30623: FOR_IN
30624: IFFALSE 30816
// repeat InitHc ;
30626: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30630: LD_VAR 0 9
30634: PPUSH
30635: CALL_OW 266
30639: PUSH
30640: LD_INT 5
30642: EQUAL
30643: IFFALSE 30713
// begin if UnitsInside ( j ) < 3 then
30645: LD_VAR 0 9
30649: PPUSH
30650: CALL_OW 313
30654: PUSH
30655: LD_INT 3
30657: LESS
30658: IFFALSE 30694
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30660: LD_INT 0
30662: PPUSH
30663: LD_INT 5
30665: PUSH
30666: LD_INT 8
30668: PUSH
30669: LD_INT 9
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: LIST
30676: PUSH
30677: LD_VAR 0 17
30681: ARRAY
30682: PPUSH
30683: LD_VAR 0 4
30687: PPUSH
30688: CALL_OW 380
30692: GO 30711
// PrepareHuman ( false , i , skill ) ;
30694: LD_INT 0
30696: PPUSH
30697: LD_VAR 0 8
30701: PPUSH
30702: LD_VAR 0 4
30706: PPUSH
30707: CALL_OW 380
// end else
30711: GO 30730
// PrepareHuman ( false , i , skill ) ;
30713: LD_INT 0
30715: PPUSH
30716: LD_VAR 0 8
30720: PPUSH
30721: LD_VAR 0 4
30725: PPUSH
30726: CALL_OW 380
// un := CreateHuman ;
30730: LD_ADDR_VAR 0 14
30734: PUSH
30735: CALL_OW 44
30739: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30740: LD_ADDR_VAR 0 7
30744: PUSH
30745: LD_VAR 0 7
30749: PPUSH
30750: LD_INT 1
30752: PPUSH
30753: LD_VAR 0 14
30757: PPUSH
30758: CALL_OW 2
30762: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30763: LD_VAR 0 14
30767: PPUSH
30768: LD_VAR 0 9
30772: PPUSH
30773: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30777: LD_VAR 0 9
30781: PPUSH
30782: CALL_OW 313
30786: PUSH
30787: LD_INT 6
30789: EQUAL
30790: PUSH
30791: LD_VAR 0 9
30795: PPUSH
30796: CALL_OW 266
30800: PUSH
30801: LD_INT 32
30803: PUSH
30804: LD_INT 31
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: IN
30811: OR
30812: IFFALSE 30626
30814: GO 30623
30816: POP
30817: POP
// end else
30818: GO 31200
// for j = 1 to x do
30820: LD_ADDR_VAR 0 9
30824: PUSH
30825: DOUBLE
30826: LD_INT 1
30828: DEC
30829: ST_TO_ADDR
30830: LD_VAR 0 13
30834: PUSH
30835: FOR_TO
30836: IFFALSE 31198
// begin InitHc ;
30838: CALL_OW 19
// if not f then
30842: LD_VAR 0 12
30846: NOT
30847: IFFALSE 30936
// begin PrepareHuman ( false , i , skill ) ;
30849: LD_INT 0
30851: PPUSH
30852: LD_VAR 0 8
30856: PPUSH
30857: LD_VAR 0 4
30861: PPUSH
30862: CALL_OW 380
// un := CreateHuman ;
30866: LD_ADDR_VAR 0 14
30870: PUSH
30871: CALL_OW 44
30875: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30876: LD_ADDR_VAR 0 7
30880: PUSH
30881: LD_VAR 0 7
30885: PPUSH
30886: LD_INT 1
30888: PPUSH
30889: LD_VAR 0 14
30893: PPUSH
30894: CALL_OW 2
30898: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30899: LD_VAR 0 14
30903: PPUSH
30904: LD_VAR 0 1
30908: PPUSH
30909: CALL_OW 250
30913: PPUSH
30914: LD_VAR 0 1
30918: PPUSH
30919: CALL_OW 251
30923: PPUSH
30924: LD_INT 10
30926: PPUSH
30927: LD_INT 0
30929: PPUSH
30930: CALL_OW 50
// continue ;
30934: GO 30835
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30936: LD_VAR 0 12
30940: PUSH
30941: LD_INT 1
30943: ARRAY
30944: PPUSH
30945: CALL_OW 313
30949: PUSH
30950: LD_VAR 0 12
30954: PUSH
30955: LD_INT 1
30957: ARRAY
30958: PPUSH
30959: CALL_OW 266
30963: PUSH
30964: LD_INT 32
30966: PUSH
30967: LD_INT 31
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: IN
30974: AND
30975: PUSH
30976: LD_VAR 0 12
30980: PUSH
30981: LD_INT 1
30983: ARRAY
30984: PPUSH
30985: CALL_OW 313
30989: PUSH
30990: LD_INT 6
30992: EQUAL
30993: OR
30994: IFFALSE 31014
// f := Delete ( f , 1 ) ;
30996: LD_ADDR_VAR 0 12
31000: PUSH
31001: LD_VAR 0 12
31005: PPUSH
31006: LD_INT 1
31008: PPUSH
31009: CALL_OW 3
31013: ST_TO_ADDR
// if not f then
31014: LD_VAR 0 12
31018: NOT
31019: IFFALSE 31037
// begin x := x + 2 ;
31021: LD_ADDR_VAR 0 13
31025: PUSH
31026: LD_VAR 0 13
31030: PUSH
31031: LD_INT 2
31033: PLUS
31034: ST_TO_ADDR
// continue ;
31035: GO 30835
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31037: LD_VAR 0 12
31041: PUSH
31042: LD_INT 1
31044: ARRAY
31045: PPUSH
31046: CALL_OW 266
31050: PUSH
31051: LD_INT 5
31053: EQUAL
31054: IFFALSE 31128
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31056: LD_VAR 0 12
31060: PUSH
31061: LD_INT 1
31063: ARRAY
31064: PPUSH
31065: CALL_OW 313
31069: PUSH
31070: LD_INT 3
31072: LESS
31073: IFFALSE 31109
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31075: LD_INT 0
31077: PPUSH
31078: LD_INT 5
31080: PUSH
31081: LD_INT 8
31083: PUSH
31084: LD_INT 9
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: LIST
31091: PUSH
31092: LD_VAR 0 17
31096: ARRAY
31097: PPUSH
31098: LD_VAR 0 4
31102: PPUSH
31103: CALL_OW 380
31107: GO 31126
// PrepareHuman ( false , i , skill ) ;
31109: LD_INT 0
31111: PPUSH
31112: LD_VAR 0 8
31116: PPUSH
31117: LD_VAR 0 4
31121: PPUSH
31122: CALL_OW 380
// end else
31126: GO 31145
// PrepareHuman ( false , i , skill ) ;
31128: LD_INT 0
31130: PPUSH
31131: LD_VAR 0 8
31135: PPUSH
31136: LD_VAR 0 4
31140: PPUSH
31141: CALL_OW 380
// un := CreateHuman ;
31145: LD_ADDR_VAR 0 14
31149: PUSH
31150: CALL_OW 44
31154: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31155: LD_ADDR_VAR 0 7
31159: PUSH
31160: LD_VAR 0 7
31164: PPUSH
31165: LD_INT 1
31167: PPUSH
31168: LD_VAR 0 14
31172: PPUSH
31173: CALL_OW 2
31177: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31178: LD_VAR 0 14
31182: PPUSH
31183: LD_VAR 0 12
31187: PUSH
31188: LD_INT 1
31190: ARRAY
31191: PPUSH
31192: CALL_OW 52
// end ;
31196: GO 30835
31198: POP
31199: POP
// end ;
31200: GO 30137
31202: POP
31203: POP
// result := result ^ buildings ;
31204: LD_ADDR_VAR 0 7
31208: PUSH
31209: LD_VAR 0 7
31213: PUSH
31214: LD_VAR 0 18
31218: ADD
31219: ST_TO_ADDR
// end else
31220: GO 31363
// begin for i = 1 to personel do
31222: LD_ADDR_VAR 0 8
31226: PUSH
31227: DOUBLE
31228: LD_INT 1
31230: DEC
31231: ST_TO_ADDR
31232: LD_VAR 0 6
31236: PUSH
31237: FOR_TO
31238: IFFALSE 31361
// begin if i > 4 then
31240: LD_VAR 0 8
31244: PUSH
31245: LD_INT 4
31247: GREATER
31248: IFFALSE 31252
// break ;
31250: GO 31361
// x := personel [ i ] ;
31252: LD_ADDR_VAR 0 13
31256: PUSH
31257: LD_VAR 0 6
31261: PUSH
31262: LD_VAR 0 8
31266: ARRAY
31267: ST_TO_ADDR
// if x = - 1 then
31268: LD_VAR 0 13
31272: PUSH
31273: LD_INT 1
31275: NEG
31276: EQUAL
31277: IFFALSE 31281
// continue ;
31279: GO 31237
// PrepareHuman ( false , i , skill ) ;
31281: LD_INT 0
31283: PPUSH
31284: LD_VAR 0 8
31288: PPUSH
31289: LD_VAR 0 4
31293: PPUSH
31294: CALL_OW 380
// un := CreateHuman ;
31298: LD_ADDR_VAR 0 14
31302: PUSH
31303: CALL_OW 44
31307: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31308: LD_VAR 0 14
31312: PPUSH
31313: LD_VAR 0 1
31317: PPUSH
31318: CALL_OW 250
31322: PPUSH
31323: LD_VAR 0 1
31327: PPUSH
31328: CALL_OW 251
31332: PPUSH
31333: LD_INT 10
31335: PPUSH
31336: LD_INT 0
31338: PPUSH
31339: CALL_OW 50
// result := result ^ un ;
31343: LD_ADDR_VAR 0 7
31347: PUSH
31348: LD_VAR 0 7
31352: PUSH
31353: LD_VAR 0 14
31357: ADD
31358: ST_TO_ADDR
// end ;
31359: GO 31237
31361: POP
31362: POP
// end ; end ;
31363: LD_VAR 0 7
31367: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31368: LD_INT 0
31370: PPUSH
31371: PPUSH
31372: PPUSH
31373: PPUSH
31374: PPUSH
31375: PPUSH
31376: PPUSH
31377: PPUSH
31378: PPUSH
31379: PPUSH
31380: PPUSH
31381: PPUSH
31382: PPUSH
31383: PPUSH
31384: PPUSH
31385: PPUSH
// result := false ;
31386: LD_ADDR_VAR 0 3
31390: PUSH
31391: LD_INT 0
31393: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31394: LD_VAR 0 1
31398: NOT
31399: PUSH
31400: LD_VAR 0 1
31404: PPUSH
31405: CALL_OW 266
31409: PUSH
31410: LD_INT 32
31412: PUSH
31413: LD_INT 33
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: IN
31420: NOT
31421: OR
31422: IFFALSE 31426
// exit ;
31424: GO 32565
// nat := GetNation ( tower ) ;
31426: LD_ADDR_VAR 0 12
31430: PUSH
31431: LD_VAR 0 1
31435: PPUSH
31436: CALL_OW 248
31440: ST_TO_ADDR
// side := GetSide ( tower ) ;
31441: LD_ADDR_VAR 0 16
31445: PUSH
31446: LD_VAR 0 1
31450: PPUSH
31451: CALL_OW 255
31455: ST_TO_ADDR
// x := GetX ( tower ) ;
31456: LD_ADDR_VAR 0 10
31460: PUSH
31461: LD_VAR 0 1
31465: PPUSH
31466: CALL_OW 250
31470: ST_TO_ADDR
// y := GetY ( tower ) ;
31471: LD_ADDR_VAR 0 11
31475: PUSH
31476: LD_VAR 0 1
31480: PPUSH
31481: CALL_OW 251
31485: ST_TO_ADDR
// if not x or not y then
31486: LD_VAR 0 10
31490: NOT
31491: PUSH
31492: LD_VAR 0 11
31496: NOT
31497: OR
31498: IFFALSE 31502
// exit ;
31500: GO 32565
// weapon := 0 ;
31502: LD_ADDR_VAR 0 18
31506: PUSH
31507: LD_INT 0
31509: ST_TO_ADDR
// fac_list := [ ] ;
31510: LD_ADDR_VAR 0 17
31514: PUSH
31515: EMPTY
31516: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31517: LD_ADDR_VAR 0 6
31521: PUSH
31522: LD_VAR 0 1
31526: PPUSH
31527: CALL_OW 274
31531: PPUSH
31532: LD_VAR 0 2
31536: PPUSH
31537: LD_INT 0
31539: PPUSH
31540: CALL 29105 0 3
31544: PPUSH
31545: LD_INT 30
31547: PUSH
31548: LD_INT 3
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PPUSH
31555: CALL_OW 72
31559: ST_TO_ADDR
// if not factories then
31560: LD_VAR 0 6
31564: NOT
31565: IFFALSE 31569
// exit ;
31567: GO 32565
// for i in factories do
31569: LD_ADDR_VAR 0 8
31573: PUSH
31574: LD_VAR 0 6
31578: PUSH
31579: FOR_IN
31580: IFFALSE 31605
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31582: LD_ADDR_VAR 0 17
31586: PUSH
31587: LD_VAR 0 17
31591: PUSH
31592: LD_VAR 0 8
31596: PPUSH
31597: CALL_OW 478
31601: UNION
31602: ST_TO_ADDR
31603: GO 31579
31605: POP
31606: POP
// if not fac_list then
31607: LD_VAR 0 17
31611: NOT
31612: IFFALSE 31616
// exit ;
31614: GO 32565
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31616: LD_ADDR_VAR 0 5
31620: PUSH
31621: LD_INT 4
31623: PUSH
31624: LD_INT 5
31626: PUSH
31627: LD_INT 9
31629: PUSH
31630: LD_INT 10
31632: PUSH
31633: LD_INT 6
31635: PUSH
31636: LD_INT 7
31638: PUSH
31639: LD_INT 11
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 27
31653: PUSH
31654: LD_INT 28
31656: PUSH
31657: LD_INT 26
31659: PUSH
31660: LD_INT 30
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 43
31671: PUSH
31672: LD_INT 44
31674: PUSH
31675: LD_INT 46
31677: PUSH
31678: LD_INT 45
31680: PUSH
31681: LD_INT 47
31683: PUSH
31684: LD_INT 49
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: LIST
31699: PUSH
31700: LD_VAR 0 12
31704: ARRAY
31705: ST_TO_ADDR
// for i in list do
31706: LD_ADDR_VAR 0 8
31710: PUSH
31711: LD_VAR 0 5
31715: PUSH
31716: FOR_IN
31717: IFFALSE 31750
// if not i in fac_list then
31719: LD_VAR 0 8
31723: PUSH
31724: LD_VAR 0 17
31728: IN
31729: NOT
31730: IFFALSE 31748
// list := list diff i ;
31732: LD_ADDR_VAR 0 5
31736: PUSH
31737: LD_VAR 0 5
31741: PUSH
31742: LD_VAR 0 8
31746: DIFF
31747: ST_TO_ADDR
31748: GO 31716
31750: POP
31751: POP
// if not list then
31752: LD_VAR 0 5
31756: NOT
31757: IFFALSE 31761
// exit ;
31759: GO 32565
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31761: LD_VAR 0 12
31765: PUSH
31766: LD_INT 3
31768: EQUAL
31769: PUSH
31770: LD_INT 49
31772: PUSH
31773: LD_VAR 0 5
31777: IN
31778: AND
31779: PUSH
31780: LD_INT 31
31782: PPUSH
31783: LD_VAR 0 16
31787: PPUSH
31788: CALL_OW 321
31792: PUSH
31793: LD_INT 2
31795: EQUAL
31796: AND
31797: IFFALSE 31857
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31799: LD_INT 22
31801: PUSH
31802: LD_VAR 0 16
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 35
31813: PUSH
31814: LD_INT 49
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 91
31823: PUSH
31824: LD_VAR 0 1
31828: PUSH
31829: LD_INT 10
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: LIST
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: LIST
31841: PPUSH
31842: CALL_OW 69
31846: NOT
31847: IFFALSE 31857
// weapon := ru_time_lapser ;
31849: LD_ADDR_VAR 0 18
31853: PUSH
31854: LD_INT 49
31856: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31857: LD_VAR 0 12
31861: PUSH
31862: LD_INT 1
31864: PUSH
31865: LD_INT 2
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: IN
31872: PUSH
31873: LD_INT 11
31875: PUSH
31876: LD_VAR 0 5
31880: IN
31881: PUSH
31882: LD_INT 30
31884: PUSH
31885: LD_VAR 0 5
31889: IN
31890: OR
31891: AND
31892: PUSH
31893: LD_INT 6
31895: PPUSH
31896: LD_VAR 0 16
31900: PPUSH
31901: CALL_OW 321
31905: PUSH
31906: LD_INT 2
31908: EQUAL
31909: AND
31910: IFFALSE 32075
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31912: LD_INT 22
31914: PUSH
31915: LD_VAR 0 16
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 2
31926: PUSH
31927: LD_INT 35
31929: PUSH
31930: LD_INT 11
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 35
31939: PUSH
31940: LD_INT 30
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 91
31954: PUSH
31955: LD_VAR 0 1
31959: PUSH
31960: LD_INT 18
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: LIST
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: LIST
31972: PPUSH
31973: CALL_OW 69
31977: NOT
31978: PUSH
31979: LD_INT 22
31981: PUSH
31982: LD_VAR 0 16
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 2
31993: PUSH
31994: LD_INT 30
31996: PUSH
31997: LD_INT 32
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 30
32006: PUSH
32007: LD_INT 33
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 91
32021: PUSH
32022: LD_VAR 0 1
32026: PUSH
32027: LD_INT 12
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: LIST
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: LIST
32039: PUSH
32040: EMPTY
32041: LIST
32042: PPUSH
32043: CALL_OW 69
32047: PUSH
32048: LD_INT 2
32050: GREATER
32051: AND
32052: IFFALSE 32075
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32054: LD_ADDR_VAR 0 18
32058: PUSH
32059: LD_INT 11
32061: PUSH
32062: LD_INT 30
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_VAR 0 12
32073: ARRAY
32074: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32075: LD_VAR 0 18
32079: NOT
32080: PUSH
32081: LD_INT 40
32083: PPUSH
32084: LD_VAR 0 16
32088: PPUSH
32089: CALL_OW 321
32093: PUSH
32094: LD_INT 2
32096: EQUAL
32097: AND
32098: PUSH
32099: LD_INT 7
32101: PUSH
32102: LD_VAR 0 5
32106: IN
32107: PUSH
32108: LD_INT 28
32110: PUSH
32111: LD_VAR 0 5
32115: IN
32116: OR
32117: PUSH
32118: LD_INT 45
32120: PUSH
32121: LD_VAR 0 5
32125: IN
32126: OR
32127: AND
32128: IFFALSE 32382
// begin hex := GetHexInfo ( x , y ) ;
32130: LD_ADDR_VAR 0 4
32134: PUSH
32135: LD_VAR 0 10
32139: PPUSH
32140: LD_VAR 0 11
32144: PPUSH
32145: CALL_OW 546
32149: ST_TO_ADDR
// if hex [ 1 ] then
32150: LD_VAR 0 4
32154: PUSH
32155: LD_INT 1
32157: ARRAY
32158: IFFALSE 32162
// exit ;
32160: GO 32565
// height := hex [ 2 ] ;
32162: LD_ADDR_VAR 0 15
32166: PUSH
32167: LD_VAR 0 4
32171: PUSH
32172: LD_INT 2
32174: ARRAY
32175: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32176: LD_ADDR_VAR 0 14
32180: PUSH
32181: LD_INT 0
32183: PUSH
32184: LD_INT 2
32186: PUSH
32187: LD_INT 3
32189: PUSH
32190: LD_INT 5
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: ST_TO_ADDR
// for i in tmp do
32199: LD_ADDR_VAR 0 8
32203: PUSH
32204: LD_VAR 0 14
32208: PUSH
32209: FOR_IN
32210: IFFALSE 32380
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32212: LD_ADDR_VAR 0 9
32216: PUSH
32217: LD_VAR 0 10
32221: PPUSH
32222: LD_VAR 0 8
32226: PPUSH
32227: LD_INT 5
32229: PPUSH
32230: CALL_OW 272
32234: PUSH
32235: LD_VAR 0 11
32239: PPUSH
32240: LD_VAR 0 8
32244: PPUSH
32245: LD_INT 5
32247: PPUSH
32248: CALL_OW 273
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32257: LD_VAR 0 9
32261: PUSH
32262: LD_INT 1
32264: ARRAY
32265: PPUSH
32266: LD_VAR 0 9
32270: PUSH
32271: LD_INT 2
32273: ARRAY
32274: PPUSH
32275: CALL_OW 488
32279: IFFALSE 32378
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32281: LD_ADDR_VAR 0 4
32285: PUSH
32286: LD_VAR 0 9
32290: PUSH
32291: LD_INT 1
32293: ARRAY
32294: PPUSH
32295: LD_VAR 0 9
32299: PUSH
32300: LD_INT 2
32302: ARRAY
32303: PPUSH
32304: CALL_OW 546
32308: ST_TO_ADDR
// if hex [ 1 ] then
32309: LD_VAR 0 4
32313: PUSH
32314: LD_INT 1
32316: ARRAY
32317: IFFALSE 32321
// continue ;
32319: GO 32209
// h := hex [ 2 ] ;
32321: LD_ADDR_VAR 0 13
32325: PUSH
32326: LD_VAR 0 4
32330: PUSH
32331: LD_INT 2
32333: ARRAY
32334: ST_TO_ADDR
// if h + 7 < height then
32335: LD_VAR 0 13
32339: PUSH
32340: LD_INT 7
32342: PLUS
32343: PUSH
32344: LD_VAR 0 15
32348: LESS
32349: IFFALSE 32378
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32351: LD_ADDR_VAR 0 18
32355: PUSH
32356: LD_INT 7
32358: PUSH
32359: LD_INT 28
32361: PUSH
32362: LD_INT 45
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: LIST
32369: PUSH
32370: LD_VAR 0 12
32374: ARRAY
32375: ST_TO_ADDR
// break ;
32376: GO 32380
// end ; end ; end ;
32378: GO 32209
32380: POP
32381: POP
// end ; if not weapon then
32382: LD_VAR 0 18
32386: NOT
32387: IFFALSE 32447
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32389: LD_ADDR_VAR 0 5
32393: PUSH
32394: LD_VAR 0 5
32398: PUSH
32399: LD_INT 11
32401: PUSH
32402: LD_INT 30
32404: PUSH
32405: LD_INT 49
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: LIST
32412: DIFF
32413: ST_TO_ADDR
// if not list then
32414: LD_VAR 0 5
32418: NOT
32419: IFFALSE 32423
// exit ;
32421: GO 32565
// weapon := list [ rand ( 1 , list ) ] ;
32423: LD_ADDR_VAR 0 18
32427: PUSH
32428: LD_VAR 0 5
32432: PUSH
32433: LD_INT 1
32435: PPUSH
32436: LD_VAR 0 5
32440: PPUSH
32441: CALL_OW 12
32445: ARRAY
32446: ST_TO_ADDR
// end ; if weapon then
32447: LD_VAR 0 18
32451: IFFALSE 32565
// begin tmp := CostOfWeapon ( weapon ) ;
32453: LD_ADDR_VAR 0 14
32457: PUSH
32458: LD_VAR 0 18
32462: PPUSH
32463: CALL_OW 451
32467: ST_TO_ADDR
// j := GetBase ( tower ) ;
32468: LD_ADDR_VAR 0 9
32472: PUSH
32473: LD_VAR 0 1
32477: PPUSH
32478: CALL_OW 274
32482: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32483: LD_VAR 0 9
32487: PPUSH
32488: LD_INT 1
32490: PPUSH
32491: CALL_OW 275
32495: PUSH
32496: LD_VAR 0 14
32500: PUSH
32501: LD_INT 1
32503: ARRAY
32504: GREATEREQUAL
32505: PUSH
32506: LD_VAR 0 9
32510: PPUSH
32511: LD_INT 2
32513: PPUSH
32514: CALL_OW 275
32518: PUSH
32519: LD_VAR 0 14
32523: PUSH
32524: LD_INT 2
32526: ARRAY
32527: GREATEREQUAL
32528: AND
32529: PUSH
32530: LD_VAR 0 9
32534: PPUSH
32535: LD_INT 3
32537: PPUSH
32538: CALL_OW 275
32542: PUSH
32543: LD_VAR 0 14
32547: PUSH
32548: LD_INT 3
32550: ARRAY
32551: GREATEREQUAL
32552: AND
32553: IFFALSE 32565
// result := weapon ;
32555: LD_ADDR_VAR 0 3
32559: PUSH
32560: LD_VAR 0 18
32564: ST_TO_ADDR
// end ; end ;
32565: LD_VAR 0 3
32569: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32570: LD_INT 0
32572: PPUSH
32573: PPUSH
// result := true ;
32574: LD_ADDR_VAR 0 3
32578: PUSH
32579: LD_INT 1
32581: ST_TO_ADDR
// if array1 = array2 then
32582: LD_VAR 0 1
32586: PUSH
32587: LD_VAR 0 2
32591: EQUAL
32592: IFFALSE 32652
// begin for i = 1 to array1 do
32594: LD_ADDR_VAR 0 4
32598: PUSH
32599: DOUBLE
32600: LD_INT 1
32602: DEC
32603: ST_TO_ADDR
32604: LD_VAR 0 1
32608: PUSH
32609: FOR_TO
32610: IFFALSE 32648
// if array1 [ i ] <> array2 [ i ] then
32612: LD_VAR 0 1
32616: PUSH
32617: LD_VAR 0 4
32621: ARRAY
32622: PUSH
32623: LD_VAR 0 2
32627: PUSH
32628: LD_VAR 0 4
32632: ARRAY
32633: NONEQUAL
32634: IFFALSE 32646
// begin result := false ;
32636: LD_ADDR_VAR 0 3
32640: PUSH
32641: LD_INT 0
32643: ST_TO_ADDR
// break ;
32644: GO 32648
// end ;
32646: GO 32609
32648: POP
32649: POP
// end else
32650: GO 32660
// result := false ;
32652: LD_ADDR_VAR 0 3
32656: PUSH
32657: LD_INT 0
32659: ST_TO_ADDR
// end ;
32660: LD_VAR 0 3
32664: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32665: LD_INT 0
32667: PPUSH
32668: PPUSH
// if not array1 or not array2 then
32669: LD_VAR 0 1
32673: NOT
32674: PUSH
32675: LD_VAR 0 2
32679: NOT
32680: OR
32681: IFFALSE 32685
// exit ;
32683: GO 32749
// result := true ;
32685: LD_ADDR_VAR 0 3
32689: PUSH
32690: LD_INT 1
32692: ST_TO_ADDR
// for i = 1 to array1 do
32693: LD_ADDR_VAR 0 4
32697: PUSH
32698: DOUBLE
32699: LD_INT 1
32701: DEC
32702: ST_TO_ADDR
32703: LD_VAR 0 1
32707: PUSH
32708: FOR_TO
32709: IFFALSE 32747
// if array1 [ i ] <> array2 [ i ] then
32711: LD_VAR 0 1
32715: PUSH
32716: LD_VAR 0 4
32720: ARRAY
32721: PUSH
32722: LD_VAR 0 2
32726: PUSH
32727: LD_VAR 0 4
32731: ARRAY
32732: NONEQUAL
32733: IFFALSE 32745
// begin result := false ;
32735: LD_ADDR_VAR 0 3
32739: PUSH
32740: LD_INT 0
32742: ST_TO_ADDR
// break ;
32743: GO 32747
// end ;
32745: GO 32708
32747: POP
32748: POP
// end ;
32749: LD_VAR 0 3
32753: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32754: LD_INT 0
32756: PPUSH
32757: PPUSH
32758: PPUSH
// pom := GetBase ( fac ) ;
32759: LD_ADDR_VAR 0 5
32763: PUSH
32764: LD_VAR 0 1
32768: PPUSH
32769: CALL_OW 274
32773: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32774: LD_ADDR_VAR 0 4
32778: PUSH
32779: LD_VAR 0 2
32783: PUSH
32784: LD_INT 1
32786: ARRAY
32787: PPUSH
32788: LD_VAR 0 2
32792: PUSH
32793: LD_INT 2
32795: ARRAY
32796: PPUSH
32797: LD_VAR 0 2
32801: PUSH
32802: LD_INT 3
32804: ARRAY
32805: PPUSH
32806: LD_VAR 0 2
32810: PUSH
32811: LD_INT 4
32813: ARRAY
32814: PPUSH
32815: CALL_OW 449
32819: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32820: LD_ADDR_VAR 0 3
32824: PUSH
32825: LD_VAR 0 5
32829: PPUSH
32830: LD_INT 1
32832: PPUSH
32833: CALL_OW 275
32837: PUSH
32838: LD_VAR 0 4
32842: PUSH
32843: LD_INT 1
32845: ARRAY
32846: GREATEREQUAL
32847: PUSH
32848: LD_VAR 0 5
32852: PPUSH
32853: LD_INT 2
32855: PPUSH
32856: CALL_OW 275
32860: PUSH
32861: LD_VAR 0 4
32865: PUSH
32866: LD_INT 2
32868: ARRAY
32869: GREATEREQUAL
32870: AND
32871: PUSH
32872: LD_VAR 0 5
32876: PPUSH
32877: LD_INT 3
32879: PPUSH
32880: CALL_OW 275
32884: PUSH
32885: LD_VAR 0 4
32889: PUSH
32890: LD_INT 3
32892: ARRAY
32893: GREATEREQUAL
32894: AND
32895: ST_TO_ADDR
// end ;
32896: LD_VAR 0 3
32900: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32901: LD_INT 0
32903: PPUSH
32904: PPUSH
32905: PPUSH
32906: PPUSH
// pom := GetBase ( building ) ;
32907: LD_ADDR_VAR 0 3
32911: PUSH
32912: LD_VAR 0 1
32916: PPUSH
32917: CALL_OW 274
32921: ST_TO_ADDR
// if not pom then
32922: LD_VAR 0 3
32926: NOT
32927: IFFALSE 32931
// exit ;
32929: GO 33101
// btype := GetBType ( building ) ;
32931: LD_ADDR_VAR 0 5
32935: PUSH
32936: LD_VAR 0 1
32940: PPUSH
32941: CALL_OW 266
32945: ST_TO_ADDR
// if btype = b_armoury then
32946: LD_VAR 0 5
32950: PUSH
32951: LD_INT 4
32953: EQUAL
32954: IFFALSE 32964
// btype := b_barracks ;
32956: LD_ADDR_VAR 0 5
32960: PUSH
32961: LD_INT 5
32963: ST_TO_ADDR
// if btype = b_depot then
32964: LD_VAR 0 5
32968: PUSH
32969: LD_INT 0
32971: EQUAL
32972: IFFALSE 32982
// btype := b_warehouse ;
32974: LD_ADDR_VAR 0 5
32978: PUSH
32979: LD_INT 1
32981: ST_TO_ADDR
// if btype = b_workshop then
32982: LD_VAR 0 5
32986: PUSH
32987: LD_INT 2
32989: EQUAL
32990: IFFALSE 33000
// btype := b_factory ;
32992: LD_ADDR_VAR 0 5
32996: PUSH
32997: LD_INT 3
32999: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33000: LD_ADDR_VAR 0 4
33004: PUSH
33005: LD_VAR 0 5
33009: PPUSH
33010: LD_VAR 0 1
33014: PPUSH
33015: CALL_OW 248
33019: PPUSH
33020: CALL_OW 450
33024: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33025: LD_ADDR_VAR 0 2
33029: PUSH
33030: LD_VAR 0 3
33034: PPUSH
33035: LD_INT 1
33037: PPUSH
33038: CALL_OW 275
33042: PUSH
33043: LD_VAR 0 4
33047: PUSH
33048: LD_INT 1
33050: ARRAY
33051: GREATEREQUAL
33052: PUSH
33053: LD_VAR 0 3
33057: PPUSH
33058: LD_INT 2
33060: PPUSH
33061: CALL_OW 275
33065: PUSH
33066: LD_VAR 0 4
33070: PUSH
33071: LD_INT 2
33073: ARRAY
33074: GREATEREQUAL
33075: AND
33076: PUSH
33077: LD_VAR 0 3
33081: PPUSH
33082: LD_INT 3
33084: PPUSH
33085: CALL_OW 275
33089: PUSH
33090: LD_VAR 0 4
33094: PUSH
33095: LD_INT 3
33097: ARRAY
33098: GREATEREQUAL
33099: AND
33100: ST_TO_ADDR
// end ;
33101: LD_VAR 0 2
33105: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33106: LD_INT 0
33108: PPUSH
33109: PPUSH
33110: PPUSH
// pom := GetBase ( building ) ;
33111: LD_ADDR_VAR 0 4
33115: PUSH
33116: LD_VAR 0 1
33120: PPUSH
33121: CALL_OW 274
33125: ST_TO_ADDR
// if not pom then
33126: LD_VAR 0 4
33130: NOT
33131: IFFALSE 33135
// exit ;
33133: GO 33236
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33135: LD_ADDR_VAR 0 5
33139: PUSH
33140: LD_VAR 0 2
33144: PPUSH
33145: LD_VAR 0 1
33149: PPUSH
33150: CALL_OW 248
33154: PPUSH
33155: CALL_OW 450
33159: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33160: LD_ADDR_VAR 0 3
33164: PUSH
33165: LD_VAR 0 4
33169: PPUSH
33170: LD_INT 1
33172: PPUSH
33173: CALL_OW 275
33177: PUSH
33178: LD_VAR 0 5
33182: PUSH
33183: LD_INT 1
33185: ARRAY
33186: GREATEREQUAL
33187: PUSH
33188: LD_VAR 0 4
33192: PPUSH
33193: LD_INT 2
33195: PPUSH
33196: CALL_OW 275
33200: PUSH
33201: LD_VAR 0 5
33205: PUSH
33206: LD_INT 2
33208: ARRAY
33209: GREATEREQUAL
33210: AND
33211: PUSH
33212: LD_VAR 0 4
33216: PPUSH
33217: LD_INT 3
33219: PPUSH
33220: CALL_OW 275
33224: PUSH
33225: LD_VAR 0 5
33229: PUSH
33230: LD_INT 3
33232: ARRAY
33233: GREATEREQUAL
33234: AND
33235: ST_TO_ADDR
// end ;
33236: LD_VAR 0 3
33240: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33241: LD_INT 0
33243: PPUSH
33244: PPUSH
33245: PPUSH
33246: PPUSH
33247: PPUSH
33248: PPUSH
33249: PPUSH
33250: PPUSH
33251: PPUSH
33252: PPUSH
33253: PPUSH
// result := false ;
33254: LD_ADDR_VAR 0 8
33258: PUSH
33259: LD_INT 0
33261: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33262: LD_VAR 0 5
33266: NOT
33267: PUSH
33268: LD_VAR 0 1
33272: NOT
33273: OR
33274: PUSH
33275: LD_VAR 0 2
33279: NOT
33280: OR
33281: PUSH
33282: LD_VAR 0 3
33286: NOT
33287: OR
33288: IFFALSE 33292
// exit ;
33290: GO 34106
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33292: LD_ADDR_VAR 0 14
33296: PUSH
33297: LD_VAR 0 1
33301: PPUSH
33302: LD_VAR 0 2
33306: PPUSH
33307: LD_VAR 0 3
33311: PPUSH
33312: LD_VAR 0 4
33316: PPUSH
33317: LD_VAR 0 5
33321: PUSH
33322: LD_INT 1
33324: ARRAY
33325: PPUSH
33326: CALL_OW 248
33330: PPUSH
33331: LD_INT 0
33333: PPUSH
33334: CALL 34943 0 6
33338: ST_TO_ADDR
// if not hexes then
33339: LD_VAR 0 14
33343: NOT
33344: IFFALSE 33348
// exit ;
33346: GO 34106
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33348: LD_ADDR_VAR 0 17
33352: PUSH
33353: LD_VAR 0 5
33357: PPUSH
33358: LD_INT 22
33360: PUSH
33361: LD_VAR 0 13
33365: PPUSH
33366: CALL_OW 255
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 2
33377: PUSH
33378: LD_INT 30
33380: PUSH
33381: LD_INT 0
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 30
33390: PUSH
33391: LD_INT 1
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: LIST
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PPUSH
33407: CALL_OW 72
33411: ST_TO_ADDR
// for i = 1 to hexes do
33412: LD_ADDR_VAR 0 9
33416: PUSH
33417: DOUBLE
33418: LD_INT 1
33420: DEC
33421: ST_TO_ADDR
33422: LD_VAR 0 14
33426: PUSH
33427: FOR_TO
33428: IFFALSE 34104
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33430: LD_ADDR_VAR 0 13
33434: PUSH
33435: LD_VAR 0 14
33439: PUSH
33440: LD_VAR 0 9
33444: ARRAY
33445: PUSH
33446: LD_INT 1
33448: ARRAY
33449: PPUSH
33450: LD_VAR 0 14
33454: PUSH
33455: LD_VAR 0 9
33459: ARRAY
33460: PUSH
33461: LD_INT 2
33463: ARRAY
33464: PPUSH
33465: CALL_OW 428
33469: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33470: LD_VAR 0 14
33474: PUSH
33475: LD_VAR 0 9
33479: ARRAY
33480: PUSH
33481: LD_INT 1
33483: ARRAY
33484: PPUSH
33485: LD_VAR 0 14
33489: PUSH
33490: LD_VAR 0 9
33494: ARRAY
33495: PUSH
33496: LD_INT 2
33498: ARRAY
33499: PPUSH
33500: CALL_OW 351
33504: PUSH
33505: LD_VAR 0 14
33509: PUSH
33510: LD_VAR 0 9
33514: ARRAY
33515: PUSH
33516: LD_INT 1
33518: ARRAY
33519: PPUSH
33520: LD_VAR 0 14
33524: PUSH
33525: LD_VAR 0 9
33529: ARRAY
33530: PUSH
33531: LD_INT 2
33533: ARRAY
33534: PPUSH
33535: CALL_OW 488
33539: NOT
33540: OR
33541: PUSH
33542: LD_VAR 0 13
33546: PPUSH
33547: CALL_OW 247
33551: PUSH
33552: LD_INT 3
33554: EQUAL
33555: OR
33556: IFFALSE 33562
// exit ;
33558: POP
33559: POP
33560: GO 34106
// if not tmp then
33562: LD_VAR 0 13
33566: NOT
33567: IFFALSE 33571
// continue ;
33569: GO 33427
// result := true ;
33571: LD_ADDR_VAR 0 8
33575: PUSH
33576: LD_INT 1
33578: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33579: LD_VAR 0 6
33583: PUSH
33584: LD_VAR 0 13
33588: PPUSH
33589: CALL_OW 247
33593: PUSH
33594: LD_INT 2
33596: EQUAL
33597: AND
33598: PUSH
33599: LD_VAR 0 13
33603: PPUSH
33604: CALL_OW 263
33608: PUSH
33609: LD_INT 1
33611: EQUAL
33612: AND
33613: IFFALSE 33777
// begin if IsDrivenBy ( tmp ) then
33615: LD_VAR 0 13
33619: PPUSH
33620: CALL_OW 311
33624: IFFALSE 33628
// continue ;
33626: GO 33427
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33628: LD_VAR 0 6
33632: PPUSH
33633: LD_INT 3
33635: PUSH
33636: LD_INT 60
33638: PUSH
33639: EMPTY
33640: LIST
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 3
33648: PUSH
33649: LD_INT 55
33651: PUSH
33652: EMPTY
33653: LIST
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PPUSH
33663: CALL_OW 72
33667: IFFALSE 33775
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33669: LD_ADDR_VAR 0 18
33673: PUSH
33674: LD_VAR 0 6
33678: PPUSH
33679: LD_INT 3
33681: PUSH
33682: LD_INT 60
33684: PUSH
33685: EMPTY
33686: LIST
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 3
33694: PUSH
33695: LD_INT 55
33697: PUSH
33698: EMPTY
33699: LIST
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PPUSH
33709: CALL_OW 72
33713: PUSH
33714: LD_INT 1
33716: ARRAY
33717: ST_TO_ADDR
// if IsInUnit ( driver ) then
33718: LD_VAR 0 18
33722: PPUSH
33723: CALL_OW 310
33727: IFFALSE 33738
// ComExit ( driver ) ;
33729: LD_VAR 0 18
33733: PPUSH
33734: CALL 58127 0 1
// AddComEnterUnit ( driver , tmp ) ;
33738: LD_VAR 0 18
33742: PPUSH
33743: LD_VAR 0 13
33747: PPUSH
33748: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33752: LD_VAR 0 18
33756: PPUSH
33757: LD_VAR 0 7
33761: PPUSH
33762: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33766: LD_VAR 0 18
33770: PPUSH
33771: CALL_OW 181
// end ; continue ;
33775: GO 33427
// end ; if not cleaners or not tmp in cleaners then
33777: LD_VAR 0 6
33781: NOT
33782: PUSH
33783: LD_VAR 0 13
33787: PUSH
33788: LD_VAR 0 6
33792: IN
33793: NOT
33794: OR
33795: IFFALSE 34102
// begin if dep then
33797: LD_VAR 0 17
33801: IFFALSE 33937
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33803: LD_ADDR_VAR 0 16
33807: PUSH
33808: LD_VAR 0 17
33812: PUSH
33813: LD_INT 1
33815: ARRAY
33816: PPUSH
33817: CALL_OW 250
33821: PPUSH
33822: LD_VAR 0 17
33826: PUSH
33827: LD_INT 1
33829: ARRAY
33830: PPUSH
33831: CALL_OW 254
33835: PPUSH
33836: LD_INT 5
33838: PPUSH
33839: CALL_OW 272
33843: PUSH
33844: LD_VAR 0 17
33848: PUSH
33849: LD_INT 1
33851: ARRAY
33852: PPUSH
33853: CALL_OW 251
33857: PPUSH
33858: LD_VAR 0 17
33862: PUSH
33863: LD_INT 1
33865: ARRAY
33866: PPUSH
33867: CALL_OW 254
33871: PPUSH
33872: LD_INT 5
33874: PPUSH
33875: CALL_OW 273
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33884: LD_VAR 0 16
33888: PUSH
33889: LD_INT 1
33891: ARRAY
33892: PPUSH
33893: LD_VAR 0 16
33897: PUSH
33898: LD_INT 2
33900: ARRAY
33901: PPUSH
33902: CALL_OW 488
33906: IFFALSE 33937
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33908: LD_VAR 0 13
33912: PPUSH
33913: LD_VAR 0 16
33917: PUSH
33918: LD_INT 1
33920: ARRAY
33921: PPUSH
33922: LD_VAR 0 16
33926: PUSH
33927: LD_INT 2
33929: ARRAY
33930: PPUSH
33931: CALL_OW 111
// continue ;
33935: GO 33427
// end ; end ; r := GetDir ( tmp ) ;
33937: LD_ADDR_VAR 0 15
33941: PUSH
33942: LD_VAR 0 13
33946: PPUSH
33947: CALL_OW 254
33951: ST_TO_ADDR
// if r = 5 then
33952: LD_VAR 0 15
33956: PUSH
33957: LD_INT 5
33959: EQUAL
33960: IFFALSE 33970
// r := 0 ;
33962: LD_ADDR_VAR 0 15
33966: PUSH
33967: LD_INT 0
33969: ST_TO_ADDR
// for j = r to 5 do
33970: LD_ADDR_VAR 0 10
33974: PUSH
33975: DOUBLE
33976: LD_VAR 0 15
33980: DEC
33981: ST_TO_ADDR
33982: LD_INT 5
33984: PUSH
33985: FOR_TO
33986: IFFALSE 34100
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33988: LD_ADDR_VAR 0 11
33992: PUSH
33993: LD_VAR 0 13
33997: PPUSH
33998: CALL_OW 250
34002: PPUSH
34003: LD_VAR 0 10
34007: PPUSH
34008: LD_INT 2
34010: PPUSH
34011: CALL_OW 272
34015: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34016: LD_ADDR_VAR 0 12
34020: PUSH
34021: LD_VAR 0 13
34025: PPUSH
34026: CALL_OW 251
34030: PPUSH
34031: LD_VAR 0 10
34035: PPUSH
34036: LD_INT 2
34038: PPUSH
34039: CALL_OW 273
34043: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34044: LD_VAR 0 11
34048: PPUSH
34049: LD_VAR 0 12
34053: PPUSH
34054: CALL_OW 488
34058: PUSH
34059: LD_VAR 0 11
34063: PPUSH
34064: LD_VAR 0 12
34068: PPUSH
34069: CALL_OW 428
34073: NOT
34074: AND
34075: IFFALSE 34098
// begin ComMoveXY ( tmp , _x , _y ) ;
34077: LD_VAR 0 13
34081: PPUSH
34082: LD_VAR 0 11
34086: PPUSH
34087: LD_VAR 0 12
34091: PPUSH
34092: CALL_OW 111
// break ;
34096: GO 34100
// end ; end ;
34098: GO 33985
34100: POP
34101: POP
// end ; end ;
34102: GO 33427
34104: POP
34105: POP
// end ;
34106: LD_VAR 0 8
34110: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
34111: LD_INT 0
34113: PPUSH
34114: PPUSH
34115: PPUSH
34116: PPUSH
34117: PPUSH
34118: PPUSH
34119: PPUSH
34120: PPUSH
34121: PPUSH
34122: PPUSH
// result := false ;
34123: LD_ADDR_VAR 0 6
34127: PUSH
34128: LD_INT 0
34130: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34131: LD_VAR 0 1
34135: NOT
34136: PUSH
34137: LD_VAR 0 1
34141: PPUSH
34142: CALL_OW 266
34146: PUSH
34147: LD_INT 0
34149: PUSH
34150: LD_INT 1
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: IN
34157: NOT
34158: OR
34159: PUSH
34160: LD_VAR 0 2
34164: NOT
34165: OR
34166: PUSH
34167: LD_VAR 0 5
34171: PUSH
34172: LD_INT 0
34174: PUSH
34175: LD_INT 1
34177: PUSH
34178: LD_INT 2
34180: PUSH
34181: LD_INT 3
34183: PUSH
34184: LD_INT 4
34186: PUSH
34187: LD_INT 5
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: IN
34198: NOT
34199: OR
34200: PUSH
34201: LD_VAR 0 3
34205: PPUSH
34206: LD_VAR 0 4
34210: PPUSH
34211: CALL_OW 488
34215: NOT
34216: OR
34217: IFFALSE 34221
// exit ;
34219: GO 34938
// pom := GetBase ( depot ) ;
34221: LD_ADDR_VAR 0 10
34225: PUSH
34226: LD_VAR 0 1
34230: PPUSH
34231: CALL_OW 274
34235: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34236: LD_ADDR_VAR 0 11
34240: PUSH
34241: LD_VAR 0 2
34245: PPUSH
34246: LD_VAR 0 1
34250: PPUSH
34251: CALL_OW 248
34255: PPUSH
34256: CALL_OW 450
34260: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34261: LD_VAR 0 10
34265: PPUSH
34266: LD_INT 1
34268: PPUSH
34269: CALL_OW 275
34273: PUSH
34274: LD_VAR 0 11
34278: PUSH
34279: LD_INT 1
34281: ARRAY
34282: GREATEREQUAL
34283: PUSH
34284: LD_VAR 0 10
34288: PPUSH
34289: LD_INT 2
34291: PPUSH
34292: CALL_OW 275
34296: PUSH
34297: LD_VAR 0 11
34301: PUSH
34302: LD_INT 2
34304: ARRAY
34305: GREATEREQUAL
34306: AND
34307: PUSH
34308: LD_VAR 0 10
34312: PPUSH
34313: LD_INT 3
34315: PPUSH
34316: CALL_OW 275
34320: PUSH
34321: LD_VAR 0 11
34325: PUSH
34326: LD_INT 3
34328: ARRAY
34329: GREATEREQUAL
34330: AND
34331: NOT
34332: IFFALSE 34336
// exit ;
34334: GO 34938
// if GetBType ( depot ) = b_depot then
34336: LD_VAR 0 1
34340: PPUSH
34341: CALL_OW 266
34345: PUSH
34346: LD_INT 0
34348: EQUAL
34349: IFFALSE 34361
// dist := 28 else
34351: LD_ADDR_VAR 0 14
34355: PUSH
34356: LD_INT 28
34358: ST_TO_ADDR
34359: GO 34369
// dist := 36 ;
34361: LD_ADDR_VAR 0 14
34365: PUSH
34366: LD_INT 36
34368: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34369: LD_VAR 0 1
34373: PPUSH
34374: LD_VAR 0 3
34378: PPUSH
34379: LD_VAR 0 4
34383: PPUSH
34384: CALL_OW 297
34388: PUSH
34389: LD_VAR 0 14
34393: GREATER
34394: IFFALSE 34398
// exit ;
34396: GO 34938
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34398: LD_ADDR_VAR 0 12
34402: PUSH
34403: LD_VAR 0 2
34407: PPUSH
34408: LD_VAR 0 3
34412: PPUSH
34413: LD_VAR 0 4
34417: PPUSH
34418: LD_VAR 0 5
34422: PPUSH
34423: LD_VAR 0 1
34427: PPUSH
34428: CALL_OW 248
34432: PPUSH
34433: LD_INT 0
34435: PPUSH
34436: CALL 34943 0 6
34440: ST_TO_ADDR
// if not hexes then
34441: LD_VAR 0 12
34445: NOT
34446: IFFALSE 34450
// exit ;
34448: GO 34938
// hex := GetHexInfo ( x , y ) ;
34450: LD_ADDR_VAR 0 15
34454: PUSH
34455: LD_VAR 0 3
34459: PPUSH
34460: LD_VAR 0 4
34464: PPUSH
34465: CALL_OW 546
34469: ST_TO_ADDR
// if hex [ 1 ] then
34470: LD_VAR 0 15
34474: PUSH
34475: LD_INT 1
34477: ARRAY
34478: IFFALSE 34482
// exit ;
34480: GO 34938
// height := hex [ 2 ] ;
34482: LD_ADDR_VAR 0 13
34486: PUSH
34487: LD_VAR 0 15
34491: PUSH
34492: LD_INT 2
34494: ARRAY
34495: ST_TO_ADDR
// for i = 1 to hexes do
34496: LD_ADDR_VAR 0 7
34500: PUSH
34501: DOUBLE
34502: LD_INT 1
34504: DEC
34505: ST_TO_ADDR
34506: LD_VAR 0 12
34510: PUSH
34511: FOR_TO
34512: IFFALSE 34842
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34514: LD_VAR 0 12
34518: PUSH
34519: LD_VAR 0 7
34523: ARRAY
34524: PUSH
34525: LD_INT 1
34527: ARRAY
34528: PPUSH
34529: LD_VAR 0 12
34533: PUSH
34534: LD_VAR 0 7
34538: ARRAY
34539: PUSH
34540: LD_INT 2
34542: ARRAY
34543: PPUSH
34544: CALL_OW 488
34548: NOT
34549: PUSH
34550: LD_VAR 0 12
34554: PUSH
34555: LD_VAR 0 7
34559: ARRAY
34560: PUSH
34561: LD_INT 1
34563: ARRAY
34564: PPUSH
34565: LD_VAR 0 12
34569: PUSH
34570: LD_VAR 0 7
34574: ARRAY
34575: PUSH
34576: LD_INT 2
34578: ARRAY
34579: PPUSH
34580: CALL_OW 428
34584: PUSH
34585: LD_INT 0
34587: GREATER
34588: OR
34589: PUSH
34590: LD_VAR 0 12
34594: PUSH
34595: LD_VAR 0 7
34599: ARRAY
34600: PUSH
34601: LD_INT 1
34603: ARRAY
34604: PPUSH
34605: LD_VAR 0 12
34609: PUSH
34610: LD_VAR 0 7
34614: ARRAY
34615: PUSH
34616: LD_INT 2
34618: ARRAY
34619: PPUSH
34620: CALL_OW 351
34624: OR
34625: IFFALSE 34631
// exit ;
34627: POP
34628: POP
34629: GO 34938
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34631: LD_ADDR_VAR 0 8
34635: PUSH
34636: LD_VAR 0 12
34640: PUSH
34641: LD_VAR 0 7
34645: ARRAY
34646: PUSH
34647: LD_INT 1
34649: ARRAY
34650: PPUSH
34651: LD_VAR 0 12
34655: PUSH
34656: LD_VAR 0 7
34660: ARRAY
34661: PUSH
34662: LD_INT 2
34664: ARRAY
34665: PPUSH
34666: CALL_OW 546
34670: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34671: LD_VAR 0 8
34675: PUSH
34676: LD_INT 1
34678: ARRAY
34679: PUSH
34680: LD_VAR 0 8
34684: PUSH
34685: LD_INT 2
34687: ARRAY
34688: PUSH
34689: LD_VAR 0 13
34693: PUSH
34694: LD_INT 2
34696: PLUS
34697: GREATER
34698: OR
34699: PUSH
34700: LD_VAR 0 8
34704: PUSH
34705: LD_INT 2
34707: ARRAY
34708: PUSH
34709: LD_VAR 0 13
34713: PUSH
34714: LD_INT 2
34716: MINUS
34717: LESS
34718: OR
34719: PUSH
34720: LD_VAR 0 8
34724: PUSH
34725: LD_INT 3
34727: ARRAY
34728: PUSH
34729: LD_INT 0
34731: PUSH
34732: LD_INT 8
34734: PUSH
34735: LD_INT 9
34737: PUSH
34738: LD_INT 10
34740: PUSH
34741: LD_INT 11
34743: PUSH
34744: LD_INT 12
34746: PUSH
34747: LD_INT 13
34749: PUSH
34750: LD_INT 16
34752: PUSH
34753: LD_INT 17
34755: PUSH
34756: LD_INT 18
34758: PUSH
34759: LD_INT 19
34761: PUSH
34762: LD_INT 20
34764: PUSH
34765: LD_INT 21
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: IN
34783: NOT
34784: OR
34785: PUSH
34786: LD_VAR 0 8
34790: PUSH
34791: LD_INT 5
34793: ARRAY
34794: NOT
34795: OR
34796: PUSH
34797: LD_VAR 0 8
34801: PUSH
34802: LD_INT 6
34804: ARRAY
34805: PUSH
34806: LD_INT 1
34808: PUSH
34809: LD_INT 2
34811: PUSH
34812: LD_INT 7
34814: PUSH
34815: LD_INT 9
34817: PUSH
34818: LD_INT 10
34820: PUSH
34821: LD_INT 11
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: IN
34832: NOT
34833: OR
34834: IFFALSE 34840
// exit ;
34836: POP
34837: POP
34838: GO 34938
// end ;
34840: GO 34511
34842: POP
34843: POP
// side := GetSide ( depot ) ;
34844: LD_ADDR_VAR 0 9
34848: PUSH
34849: LD_VAR 0 1
34853: PPUSH
34854: CALL_OW 255
34858: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34859: LD_VAR 0 9
34863: PPUSH
34864: LD_VAR 0 3
34868: PPUSH
34869: LD_VAR 0 4
34873: PPUSH
34874: LD_INT 20
34876: PPUSH
34877: CALL 27259 0 4
34881: PUSH
34882: LD_INT 4
34884: ARRAY
34885: IFFALSE 34889
// exit ;
34887: GO 34938
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34889: LD_VAR 0 2
34893: PUSH
34894: LD_INT 29
34896: PUSH
34897: LD_INT 30
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: IN
34904: PUSH
34905: LD_VAR 0 3
34909: PPUSH
34910: LD_VAR 0 4
34914: PPUSH
34915: LD_VAR 0 9
34919: PPUSH
34920: CALL_OW 440
34924: NOT
34925: AND
34926: IFFALSE 34930
// exit ;
34928: GO 34938
// result := true ;
34930: LD_ADDR_VAR 0 6
34934: PUSH
34935: LD_INT 1
34937: ST_TO_ADDR
// end ;
34938: LD_VAR 0 6
34942: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34943: LD_INT 0
34945: PPUSH
34946: PPUSH
34947: PPUSH
34948: PPUSH
34949: PPUSH
34950: PPUSH
34951: PPUSH
34952: PPUSH
34953: PPUSH
34954: PPUSH
34955: PPUSH
34956: PPUSH
34957: PPUSH
34958: PPUSH
34959: PPUSH
34960: PPUSH
34961: PPUSH
34962: PPUSH
34963: PPUSH
34964: PPUSH
34965: PPUSH
34966: PPUSH
34967: PPUSH
34968: PPUSH
34969: PPUSH
34970: PPUSH
34971: PPUSH
34972: PPUSH
34973: PPUSH
34974: PPUSH
34975: PPUSH
34976: PPUSH
34977: PPUSH
34978: PPUSH
34979: PPUSH
34980: PPUSH
34981: PPUSH
34982: PPUSH
34983: PPUSH
34984: PPUSH
34985: PPUSH
34986: PPUSH
34987: PPUSH
34988: PPUSH
34989: PPUSH
34990: PPUSH
34991: PPUSH
34992: PPUSH
34993: PPUSH
34994: PPUSH
34995: PPUSH
34996: PPUSH
34997: PPUSH
34998: PPUSH
34999: PPUSH
35000: PPUSH
35001: PPUSH
35002: PPUSH
// result = [ ] ;
35003: LD_ADDR_VAR 0 7
35007: PUSH
35008: EMPTY
35009: ST_TO_ADDR
// temp_list = [ ] ;
35010: LD_ADDR_VAR 0 9
35014: PUSH
35015: EMPTY
35016: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35017: LD_VAR 0 4
35021: PUSH
35022: LD_INT 0
35024: PUSH
35025: LD_INT 1
35027: PUSH
35028: LD_INT 2
35030: PUSH
35031: LD_INT 3
35033: PUSH
35034: LD_INT 4
35036: PUSH
35037: LD_INT 5
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: IN
35048: NOT
35049: PUSH
35050: LD_VAR 0 1
35054: PUSH
35055: LD_INT 0
35057: PUSH
35058: LD_INT 1
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: IN
35065: PUSH
35066: LD_VAR 0 5
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: LD_INT 2
35076: PUSH
35077: LD_INT 3
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: LIST
35084: IN
35085: NOT
35086: AND
35087: OR
35088: IFFALSE 35092
// exit ;
35090: GO 53483
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35092: LD_VAR 0 1
35096: PUSH
35097: LD_INT 6
35099: PUSH
35100: LD_INT 7
35102: PUSH
35103: LD_INT 8
35105: PUSH
35106: LD_INT 13
35108: PUSH
35109: LD_INT 12
35111: PUSH
35112: LD_INT 15
35114: PUSH
35115: LD_INT 11
35117: PUSH
35118: LD_INT 14
35120: PUSH
35121: LD_INT 10
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: IN
35135: IFFALSE 35145
// btype = b_lab ;
35137: LD_ADDR_VAR 0 1
35141: PUSH
35142: LD_INT 6
35144: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35145: LD_VAR 0 6
35149: PUSH
35150: LD_INT 0
35152: PUSH
35153: LD_INT 1
35155: PUSH
35156: LD_INT 2
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: LIST
35163: IN
35164: NOT
35165: PUSH
35166: LD_VAR 0 1
35170: PUSH
35171: LD_INT 0
35173: PUSH
35174: LD_INT 1
35176: PUSH
35177: LD_INT 2
35179: PUSH
35180: LD_INT 3
35182: PUSH
35183: LD_INT 6
35185: PUSH
35186: LD_INT 36
35188: PUSH
35189: LD_INT 4
35191: PUSH
35192: LD_INT 5
35194: PUSH
35195: LD_INT 31
35197: PUSH
35198: LD_INT 32
35200: PUSH
35201: LD_INT 33
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: IN
35217: NOT
35218: PUSH
35219: LD_VAR 0 6
35223: PUSH
35224: LD_INT 1
35226: EQUAL
35227: AND
35228: OR
35229: PUSH
35230: LD_VAR 0 1
35234: PUSH
35235: LD_INT 2
35237: PUSH
35238: LD_INT 3
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: IN
35245: NOT
35246: PUSH
35247: LD_VAR 0 6
35251: PUSH
35252: LD_INT 2
35254: EQUAL
35255: AND
35256: OR
35257: IFFALSE 35267
// mode = 0 ;
35259: LD_ADDR_VAR 0 6
35263: PUSH
35264: LD_INT 0
35266: ST_TO_ADDR
// case mode of 0 :
35267: LD_VAR 0 6
35271: PUSH
35272: LD_INT 0
35274: DOUBLE
35275: EQUAL
35276: IFTRUE 35280
35278: GO 46733
35280: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35281: LD_ADDR_VAR 0 11
35285: PUSH
35286: LD_INT 0
35288: PUSH
35289: LD_INT 0
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 0
35298: PUSH
35299: LD_INT 1
35301: NEG
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 1
35309: PUSH
35310: LD_INT 0
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 1
35319: PUSH
35320: LD_INT 1
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 0
35329: PUSH
35330: LD_INT 1
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 1
35339: NEG
35340: PUSH
35341: LD_INT 0
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 1
35350: NEG
35351: PUSH
35352: LD_INT 1
35354: NEG
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 1
35362: NEG
35363: PUSH
35364: LD_INT 2
35366: NEG
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 0
35374: PUSH
35375: LD_INT 2
35377: NEG
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 1
35385: PUSH
35386: LD_INT 1
35388: NEG
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 1
35396: PUSH
35397: LD_INT 2
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 0
35406: PUSH
35407: LD_INT 2
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 1
35416: NEG
35417: PUSH
35418: LD_INT 1
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 1
35427: PUSH
35428: LD_INT 3
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 0
35437: PUSH
35438: LD_INT 3
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 1
35447: NEG
35448: PUSH
35449: LD_INT 2
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35474: LD_ADDR_VAR 0 12
35478: PUSH
35479: LD_INT 0
35481: PUSH
35482: LD_INT 0
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 0
35491: PUSH
35492: LD_INT 1
35494: NEG
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 1
35502: PUSH
35503: LD_INT 0
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 1
35512: PUSH
35513: LD_INT 1
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 0
35522: PUSH
35523: LD_INT 1
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 1
35532: NEG
35533: PUSH
35534: LD_INT 0
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 1
35543: NEG
35544: PUSH
35545: LD_INT 1
35547: NEG
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 1
35555: PUSH
35556: LD_INT 1
35558: NEG
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 2
35566: PUSH
35567: LD_INT 0
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 2
35576: PUSH
35577: LD_INT 1
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 1
35586: NEG
35587: PUSH
35588: LD_INT 1
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 2
35597: NEG
35598: PUSH
35599: LD_INT 0
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 2
35608: NEG
35609: PUSH
35610: LD_INT 1
35612: NEG
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 2
35620: NEG
35621: PUSH
35622: LD_INT 1
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 3
35631: NEG
35632: PUSH
35633: LD_INT 0
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 3
35642: NEG
35643: PUSH
35644: LD_INT 1
35646: NEG
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35670: LD_ADDR_VAR 0 13
35674: PUSH
35675: LD_INT 0
35677: PUSH
35678: LD_INT 0
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_INT 0
35687: PUSH
35688: LD_INT 1
35690: NEG
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 1
35698: PUSH
35699: LD_INT 0
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 1
35708: PUSH
35709: LD_INT 1
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 0
35718: PUSH
35719: LD_INT 1
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 1
35728: NEG
35729: PUSH
35730: LD_INT 0
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 1
35739: NEG
35740: PUSH
35741: LD_INT 1
35743: NEG
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 1
35751: NEG
35752: PUSH
35753: LD_INT 2
35755: NEG
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 2
35763: PUSH
35764: LD_INT 1
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 2
35773: PUSH
35774: LD_INT 2
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 1
35783: PUSH
35784: LD_INT 2
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 2
35793: NEG
35794: PUSH
35795: LD_INT 1
35797: NEG
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 2
35805: NEG
35806: PUSH
35807: LD_INT 2
35809: NEG
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 2
35817: NEG
35818: PUSH
35819: LD_INT 3
35821: NEG
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 3
35829: NEG
35830: PUSH
35831: LD_INT 2
35833: NEG
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 3
35841: NEG
35842: PUSH
35843: LD_INT 3
35845: NEG
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35869: LD_ADDR_VAR 0 14
35873: PUSH
35874: LD_INT 0
35876: PUSH
35877: LD_INT 0
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 0
35886: PUSH
35887: LD_INT 1
35889: NEG
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 1
35897: PUSH
35898: LD_INT 0
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 1
35907: PUSH
35908: LD_INT 1
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 0
35917: PUSH
35918: LD_INT 1
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 1
35927: NEG
35928: PUSH
35929: LD_INT 0
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 1
35938: NEG
35939: PUSH
35940: LD_INT 1
35942: NEG
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 1
35950: NEG
35951: PUSH
35952: LD_INT 2
35954: NEG
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 0
35962: PUSH
35963: LD_INT 2
35965: NEG
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 1
35973: PUSH
35974: LD_INT 1
35976: NEG
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 1
35984: PUSH
35985: LD_INT 2
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 0
35994: PUSH
35995: LD_INT 2
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 1
36004: NEG
36005: PUSH
36006: LD_INT 1
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 1
36015: NEG
36016: PUSH
36017: LD_INT 3
36019: NEG
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 0
36027: PUSH
36028: LD_INT 3
36030: NEG
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 1
36038: PUSH
36039: LD_INT 2
36041: NEG
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36065: LD_ADDR_VAR 0 15
36069: PUSH
36070: LD_INT 0
36072: PUSH
36073: LD_INT 0
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: LD_INT 1
36085: NEG
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 1
36093: PUSH
36094: LD_INT 0
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 1
36103: PUSH
36104: LD_INT 1
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 0
36113: PUSH
36114: LD_INT 1
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 1
36123: NEG
36124: PUSH
36125: LD_INT 0
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 1
36134: NEG
36135: PUSH
36136: LD_INT 1
36138: NEG
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 1
36146: PUSH
36147: LD_INT 1
36149: NEG
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 2
36157: PUSH
36158: LD_INT 0
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 2
36167: PUSH
36168: LD_INT 1
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 1
36177: NEG
36178: PUSH
36179: LD_INT 1
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 2
36188: NEG
36189: PUSH
36190: LD_INT 0
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 2
36199: NEG
36200: PUSH
36201: LD_INT 1
36203: NEG
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 2
36211: PUSH
36212: LD_INT 1
36214: NEG
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 3
36222: PUSH
36223: LD_INT 0
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 3
36232: PUSH
36233: LD_INT 1
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36258: LD_ADDR_VAR 0 16
36262: PUSH
36263: LD_INT 0
36265: PUSH
36266: LD_INT 0
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 0
36275: PUSH
36276: LD_INT 1
36278: NEG
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 1
36286: PUSH
36287: LD_INT 0
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 1
36296: PUSH
36297: LD_INT 1
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 0
36306: PUSH
36307: LD_INT 1
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 1
36316: NEG
36317: PUSH
36318: LD_INT 0
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 1
36327: NEG
36328: PUSH
36329: LD_INT 1
36331: NEG
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 1
36339: NEG
36340: PUSH
36341: LD_INT 2
36343: NEG
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 2
36351: PUSH
36352: LD_INT 1
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 2
36361: PUSH
36362: LD_INT 2
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 1
36371: PUSH
36372: LD_INT 2
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 2
36381: NEG
36382: PUSH
36383: LD_INT 1
36385: NEG
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 2
36393: NEG
36394: PUSH
36395: LD_INT 2
36397: NEG
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 3
36405: PUSH
36406: LD_INT 2
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 3
36415: PUSH
36416: LD_INT 3
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 2
36425: PUSH
36426: LD_INT 3
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36451: LD_ADDR_VAR 0 17
36455: PUSH
36456: LD_INT 0
36458: PUSH
36459: LD_INT 0
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 0
36468: PUSH
36469: LD_INT 1
36471: NEG
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 1
36479: PUSH
36480: LD_INT 0
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 1
36489: PUSH
36490: LD_INT 1
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 0
36499: PUSH
36500: LD_INT 1
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 1
36509: NEG
36510: PUSH
36511: LD_INT 0
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 1
36520: NEG
36521: PUSH
36522: LD_INT 1
36524: NEG
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 1
36532: NEG
36533: PUSH
36534: LD_INT 2
36536: NEG
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 0
36544: PUSH
36545: LD_INT 2
36547: NEG
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 1
36555: PUSH
36556: LD_INT 1
36558: NEG
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 2
36566: PUSH
36567: LD_INT 0
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 2
36576: PUSH
36577: LD_INT 1
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 2
36586: PUSH
36587: LD_INT 2
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 1
36596: PUSH
36597: LD_INT 2
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 0
36606: PUSH
36607: LD_INT 2
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 1
36616: NEG
36617: PUSH
36618: LD_INT 1
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 2
36627: NEG
36628: PUSH
36629: LD_INT 0
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 2
36638: NEG
36639: PUSH
36640: LD_INT 1
36642: NEG
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 2
36650: NEG
36651: PUSH
36652: LD_INT 2
36654: NEG
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36681: LD_ADDR_VAR 0 18
36685: PUSH
36686: LD_INT 0
36688: PUSH
36689: LD_INT 0
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 0
36698: PUSH
36699: LD_INT 1
36701: NEG
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 1
36709: PUSH
36710: LD_INT 0
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 1
36719: PUSH
36720: LD_INT 1
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 0
36729: PUSH
36730: LD_INT 1
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 1
36739: NEG
36740: PUSH
36741: LD_INT 0
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 1
36750: NEG
36751: PUSH
36752: LD_INT 1
36754: NEG
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 1
36762: NEG
36763: PUSH
36764: LD_INT 2
36766: NEG
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 0
36774: PUSH
36775: LD_INT 2
36777: NEG
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 1
36785: PUSH
36786: LD_INT 1
36788: NEG
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 2
36796: PUSH
36797: LD_INT 0
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 2
36806: PUSH
36807: LD_INT 1
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 2
36816: PUSH
36817: LD_INT 2
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 1
36826: PUSH
36827: LD_INT 2
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 0
36836: PUSH
36837: LD_INT 2
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 1
36846: NEG
36847: PUSH
36848: LD_INT 1
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 2
36857: NEG
36858: PUSH
36859: LD_INT 0
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 2
36868: NEG
36869: PUSH
36870: LD_INT 1
36872: NEG
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 2
36880: NEG
36881: PUSH
36882: LD_INT 2
36884: NEG
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36911: LD_ADDR_VAR 0 19
36915: PUSH
36916: LD_INT 0
36918: PUSH
36919: LD_INT 0
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 0
36928: PUSH
36929: LD_INT 1
36931: NEG
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 1
36939: PUSH
36940: LD_INT 0
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 1
36949: PUSH
36950: LD_INT 1
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 0
36959: PUSH
36960: LD_INT 1
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 1
36969: NEG
36970: PUSH
36971: LD_INT 0
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 1
36980: NEG
36981: PUSH
36982: LD_INT 1
36984: NEG
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 1
36992: NEG
36993: PUSH
36994: LD_INT 2
36996: NEG
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 0
37004: PUSH
37005: LD_INT 2
37007: NEG
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 1
37015: PUSH
37016: LD_INT 1
37018: NEG
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 2
37026: PUSH
37027: LD_INT 0
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 2
37036: PUSH
37037: LD_INT 1
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 2
37046: PUSH
37047: LD_INT 2
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 1
37056: PUSH
37057: LD_INT 2
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 0
37066: PUSH
37067: LD_INT 2
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 1
37076: NEG
37077: PUSH
37078: LD_INT 1
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 2
37087: NEG
37088: PUSH
37089: LD_INT 0
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 2
37098: NEG
37099: PUSH
37100: LD_INT 1
37102: NEG
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 2
37110: NEG
37111: PUSH
37112: LD_INT 2
37114: NEG
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37141: LD_ADDR_VAR 0 20
37145: PUSH
37146: LD_INT 0
37148: PUSH
37149: LD_INT 0
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: LD_INT 1
37161: NEG
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 1
37169: PUSH
37170: LD_INT 0
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 1
37179: PUSH
37180: LD_INT 1
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 0
37189: PUSH
37190: LD_INT 1
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 1
37199: NEG
37200: PUSH
37201: LD_INT 0
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 1
37210: NEG
37211: PUSH
37212: LD_INT 1
37214: NEG
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 1
37222: NEG
37223: PUSH
37224: LD_INT 2
37226: NEG
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 0
37234: PUSH
37235: LD_INT 2
37237: NEG
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 1
37245: PUSH
37246: LD_INT 1
37248: NEG
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 2
37256: PUSH
37257: LD_INT 0
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 2
37266: PUSH
37267: LD_INT 1
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 2
37276: PUSH
37277: LD_INT 2
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 1
37286: PUSH
37287: LD_INT 2
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 0
37296: PUSH
37297: LD_INT 2
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 1
37306: NEG
37307: PUSH
37308: LD_INT 1
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 2
37317: NEG
37318: PUSH
37319: LD_INT 0
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 2
37328: NEG
37329: PUSH
37330: LD_INT 1
37332: NEG
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 2
37340: NEG
37341: PUSH
37342: LD_INT 2
37344: NEG
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37371: LD_ADDR_VAR 0 21
37375: PUSH
37376: LD_INT 0
37378: PUSH
37379: LD_INT 0
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 0
37388: PUSH
37389: LD_INT 1
37391: NEG
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 1
37399: PUSH
37400: LD_INT 0
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 1
37409: PUSH
37410: LD_INT 1
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 0
37419: PUSH
37420: LD_INT 1
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 1
37429: NEG
37430: PUSH
37431: LD_INT 0
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 1
37440: NEG
37441: PUSH
37442: LD_INT 1
37444: NEG
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 1
37452: NEG
37453: PUSH
37454: LD_INT 2
37456: NEG
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 0
37464: PUSH
37465: LD_INT 2
37467: NEG
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 1
37475: PUSH
37476: LD_INT 1
37478: NEG
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 2
37486: PUSH
37487: LD_INT 0
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 2
37496: PUSH
37497: LD_INT 1
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 2
37506: PUSH
37507: LD_INT 2
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 1
37516: PUSH
37517: LD_INT 2
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 0
37526: PUSH
37527: LD_INT 2
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 1
37536: NEG
37537: PUSH
37538: LD_INT 1
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 2
37547: NEG
37548: PUSH
37549: LD_INT 0
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 2
37558: NEG
37559: PUSH
37560: LD_INT 1
37562: NEG
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 2
37570: NEG
37571: PUSH
37572: LD_INT 2
37574: NEG
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37601: LD_ADDR_VAR 0 22
37605: PUSH
37606: LD_INT 0
37608: PUSH
37609: LD_INT 0
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 0
37618: PUSH
37619: LD_INT 1
37621: NEG
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 1
37629: PUSH
37630: LD_INT 0
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 1
37639: PUSH
37640: LD_INT 1
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 0
37649: PUSH
37650: LD_INT 1
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 1
37659: NEG
37660: PUSH
37661: LD_INT 0
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 1
37670: NEG
37671: PUSH
37672: LD_INT 1
37674: NEG
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 1
37682: NEG
37683: PUSH
37684: LD_INT 2
37686: NEG
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 0
37694: PUSH
37695: LD_INT 2
37697: NEG
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 1
37705: PUSH
37706: LD_INT 1
37708: NEG
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 2
37716: PUSH
37717: LD_INT 0
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 2
37726: PUSH
37727: LD_INT 1
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 2
37736: PUSH
37737: LD_INT 2
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 1
37746: PUSH
37747: LD_INT 2
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 0
37756: PUSH
37757: LD_INT 2
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 1
37766: NEG
37767: PUSH
37768: LD_INT 1
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 2
37777: NEG
37778: PUSH
37779: LD_INT 0
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 2
37788: NEG
37789: PUSH
37790: LD_INT 1
37792: NEG
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 2
37800: NEG
37801: PUSH
37802: LD_INT 2
37804: NEG
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37831: LD_ADDR_VAR 0 23
37835: PUSH
37836: LD_INT 0
37838: PUSH
37839: LD_INT 0
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 0
37848: PUSH
37849: LD_INT 1
37851: NEG
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 1
37859: PUSH
37860: LD_INT 0
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 1
37869: PUSH
37870: LD_INT 1
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 0
37879: PUSH
37880: LD_INT 1
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 1
37889: NEG
37890: PUSH
37891: LD_INT 0
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 1
37900: NEG
37901: PUSH
37902: LD_INT 1
37904: NEG
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 1
37912: NEG
37913: PUSH
37914: LD_INT 2
37916: NEG
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 0
37924: PUSH
37925: LD_INT 2
37927: NEG
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 1
37935: PUSH
37936: LD_INT 1
37938: NEG
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 2
37946: PUSH
37947: LD_INT 0
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 2
37956: PUSH
37957: LD_INT 1
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 2
37966: PUSH
37967: LD_INT 2
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 1
37976: PUSH
37977: LD_INT 2
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 0
37986: PUSH
37987: LD_INT 2
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 1
37996: NEG
37997: PUSH
37998: LD_INT 1
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 2
38007: NEG
38008: PUSH
38009: LD_INT 0
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 2
38018: NEG
38019: PUSH
38020: LD_INT 1
38022: NEG
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 2
38030: NEG
38031: PUSH
38032: LD_INT 2
38034: NEG
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 2
38042: NEG
38043: PUSH
38044: LD_INT 3
38046: NEG
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 1
38054: NEG
38055: PUSH
38056: LD_INT 3
38058: NEG
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 1
38066: PUSH
38067: LD_INT 2
38069: NEG
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 2
38077: PUSH
38078: LD_INT 1
38080: NEG
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38111: LD_ADDR_VAR 0 24
38115: PUSH
38116: LD_INT 0
38118: PUSH
38119: LD_INT 0
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 0
38128: PUSH
38129: LD_INT 1
38131: NEG
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 1
38139: PUSH
38140: LD_INT 0
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 1
38149: PUSH
38150: LD_INT 1
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 0
38159: PUSH
38160: LD_INT 1
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 1
38169: NEG
38170: PUSH
38171: LD_INT 0
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 1
38180: NEG
38181: PUSH
38182: LD_INT 1
38184: NEG
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 1
38192: NEG
38193: PUSH
38194: LD_INT 2
38196: NEG
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 0
38204: PUSH
38205: LD_INT 2
38207: NEG
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 1
38215: PUSH
38216: LD_INT 1
38218: NEG
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 2
38226: PUSH
38227: LD_INT 0
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 2
38236: PUSH
38237: LD_INT 1
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 2
38246: PUSH
38247: LD_INT 2
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 1
38256: PUSH
38257: LD_INT 2
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 0
38266: PUSH
38267: LD_INT 2
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 1
38276: NEG
38277: PUSH
38278: LD_INT 1
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 2
38287: NEG
38288: PUSH
38289: LD_INT 0
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 2
38298: NEG
38299: PUSH
38300: LD_INT 1
38302: NEG
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 2
38310: NEG
38311: PUSH
38312: LD_INT 2
38314: NEG
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 1
38322: PUSH
38323: LD_INT 2
38325: NEG
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 2
38333: PUSH
38334: LD_INT 1
38336: NEG
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 3
38344: PUSH
38345: LD_INT 1
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 3
38354: PUSH
38355: LD_INT 2
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38387: LD_ADDR_VAR 0 25
38391: PUSH
38392: LD_INT 0
38394: PUSH
38395: LD_INT 0
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 0
38404: PUSH
38405: LD_INT 1
38407: NEG
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 1
38415: PUSH
38416: LD_INT 0
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 1
38425: PUSH
38426: LD_INT 1
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 0
38435: PUSH
38436: LD_INT 1
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 1
38445: NEG
38446: PUSH
38447: LD_INT 0
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 1
38456: NEG
38457: PUSH
38458: LD_INT 1
38460: NEG
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 1
38468: NEG
38469: PUSH
38470: LD_INT 2
38472: NEG
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 0
38480: PUSH
38481: LD_INT 2
38483: NEG
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 1
38491: PUSH
38492: LD_INT 1
38494: NEG
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 2
38502: PUSH
38503: LD_INT 0
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 2
38512: PUSH
38513: LD_INT 1
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 2
38522: PUSH
38523: LD_INT 2
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 1
38532: PUSH
38533: LD_INT 2
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 0
38542: PUSH
38543: LD_INT 2
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 1
38552: NEG
38553: PUSH
38554: LD_INT 1
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 2
38563: NEG
38564: PUSH
38565: LD_INT 0
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 2
38574: NEG
38575: PUSH
38576: LD_INT 1
38578: NEG
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 2
38586: NEG
38587: PUSH
38588: LD_INT 2
38590: NEG
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 3
38598: PUSH
38599: LD_INT 1
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 3
38608: PUSH
38609: LD_INT 2
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 2
38618: PUSH
38619: LD_INT 3
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: LD_INT 3
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38661: LD_ADDR_VAR 0 26
38665: PUSH
38666: LD_INT 0
38668: PUSH
38669: LD_INT 0
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 0
38678: PUSH
38679: LD_INT 1
38681: NEG
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 1
38689: PUSH
38690: LD_INT 0
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 1
38699: PUSH
38700: LD_INT 1
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 0
38709: PUSH
38710: LD_INT 1
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 1
38719: NEG
38720: PUSH
38721: LD_INT 0
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 1
38730: NEG
38731: PUSH
38732: LD_INT 1
38734: NEG
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 1
38742: NEG
38743: PUSH
38744: LD_INT 2
38746: NEG
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 0
38754: PUSH
38755: LD_INT 2
38757: NEG
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 1
38765: PUSH
38766: LD_INT 1
38768: NEG
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 2
38776: PUSH
38777: LD_INT 0
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 2
38786: PUSH
38787: LD_INT 1
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 2
38796: PUSH
38797: LD_INT 2
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 1
38806: PUSH
38807: LD_INT 2
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 0
38816: PUSH
38817: LD_INT 2
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 1
38826: NEG
38827: PUSH
38828: LD_INT 1
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 2
38837: NEG
38838: PUSH
38839: LD_INT 0
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 2
38848: NEG
38849: PUSH
38850: LD_INT 1
38852: NEG
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 2
38860: NEG
38861: PUSH
38862: LD_INT 2
38864: NEG
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 2
38872: PUSH
38873: LD_INT 3
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 1
38882: PUSH
38883: LD_INT 3
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 1
38892: NEG
38893: PUSH
38894: LD_INT 2
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 2
38903: NEG
38904: PUSH
38905: LD_INT 1
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38937: LD_ADDR_VAR 0 27
38941: PUSH
38942: LD_INT 0
38944: PUSH
38945: LD_INT 0
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: LD_INT 1
38957: NEG
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 1
38965: PUSH
38966: LD_INT 0
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 1
38975: PUSH
38976: LD_INT 1
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 0
38985: PUSH
38986: LD_INT 1
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 1
38995: NEG
38996: PUSH
38997: LD_INT 0
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 1
39006: NEG
39007: PUSH
39008: LD_INT 1
39010: NEG
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 1
39018: NEG
39019: PUSH
39020: LD_INT 2
39022: NEG
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 0
39030: PUSH
39031: LD_INT 2
39033: NEG
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 1
39041: PUSH
39042: LD_INT 1
39044: NEG
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 2
39052: PUSH
39053: LD_INT 0
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 2
39062: PUSH
39063: LD_INT 1
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 2
39072: PUSH
39073: LD_INT 2
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 1
39082: PUSH
39083: LD_INT 2
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: LD_INT 2
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 1
39102: NEG
39103: PUSH
39104: LD_INT 1
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 2
39113: NEG
39114: PUSH
39115: LD_INT 0
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 2
39124: NEG
39125: PUSH
39126: LD_INT 1
39128: NEG
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 2
39136: NEG
39137: PUSH
39138: LD_INT 2
39140: NEG
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 1
39148: NEG
39149: PUSH
39150: LD_INT 2
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 2
39159: NEG
39160: PUSH
39161: LD_INT 1
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 3
39170: NEG
39171: PUSH
39172: LD_INT 1
39174: NEG
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 3
39182: NEG
39183: PUSH
39184: LD_INT 2
39186: NEG
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39217: LD_ADDR_VAR 0 28
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: LD_INT 0
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 0
39234: PUSH
39235: LD_INT 1
39237: NEG
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 1
39245: PUSH
39246: LD_INT 0
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 1
39255: PUSH
39256: LD_INT 1
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: LD_INT 1
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: LD_INT 0
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 1
39286: NEG
39287: PUSH
39288: LD_INT 1
39290: NEG
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 1
39298: NEG
39299: PUSH
39300: LD_INT 2
39302: NEG
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 0
39310: PUSH
39311: LD_INT 2
39313: NEG
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 1
39321: PUSH
39322: LD_INT 1
39324: NEG
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 2
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 2
39342: PUSH
39343: LD_INT 1
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 2
39352: PUSH
39353: LD_INT 2
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 1
39362: PUSH
39363: LD_INT 2
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 0
39372: PUSH
39373: LD_INT 2
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 1
39382: NEG
39383: PUSH
39384: LD_INT 1
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 2
39393: NEG
39394: PUSH
39395: LD_INT 0
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 2
39404: NEG
39405: PUSH
39406: LD_INT 1
39408: NEG
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 2
39416: NEG
39417: PUSH
39418: LD_INT 2
39420: NEG
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 2
39428: NEG
39429: PUSH
39430: LD_INT 3
39432: NEG
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 1
39440: NEG
39441: PUSH
39442: LD_INT 3
39444: NEG
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 3
39452: NEG
39453: PUSH
39454: LD_INT 1
39456: NEG
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 3
39464: NEG
39465: PUSH
39466: LD_INT 2
39468: NEG
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39499: LD_ADDR_VAR 0 29
39503: PUSH
39504: LD_INT 0
39506: PUSH
39507: LD_INT 0
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 0
39516: PUSH
39517: LD_INT 1
39519: NEG
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 1
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 1
39537: PUSH
39538: LD_INT 1
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 0
39547: PUSH
39548: LD_INT 1
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 1
39557: NEG
39558: PUSH
39559: LD_INT 0
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 1
39568: NEG
39569: PUSH
39570: LD_INT 1
39572: NEG
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 1
39580: NEG
39581: PUSH
39582: LD_INT 2
39584: NEG
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 0
39592: PUSH
39593: LD_INT 2
39595: NEG
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 1
39603: PUSH
39604: LD_INT 1
39606: NEG
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 2
39614: PUSH
39615: LD_INT 0
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 2
39624: PUSH
39625: LD_INT 1
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 1
39634: PUSH
39635: LD_INT 2
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 0
39644: PUSH
39645: LD_INT 2
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 1
39654: NEG
39655: PUSH
39656: LD_INT 1
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 2
39665: NEG
39666: PUSH
39667: LD_INT 1
39669: NEG
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 2
39677: NEG
39678: PUSH
39679: LD_INT 2
39681: NEG
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 2
39689: NEG
39690: PUSH
39691: LD_INT 3
39693: NEG
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 2
39701: PUSH
39702: LD_INT 1
39704: NEG
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 3
39712: PUSH
39713: LD_INT 1
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 1
39722: PUSH
39723: LD_INT 3
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 1
39732: NEG
39733: PUSH
39734: LD_INT 2
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 3
39743: NEG
39744: PUSH
39745: LD_INT 2
39747: NEG
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39778: LD_ADDR_VAR 0 30
39782: PUSH
39783: LD_INT 0
39785: PUSH
39786: LD_INT 0
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 0
39795: PUSH
39796: LD_INT 1
39798: NEG
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 1
39806: PUSH
39807: LD_INT 0
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 1
39816: PUSH
39817: LD_INT 1
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 0
39826: PUSH
39827: LD_INT 1
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 1
39836: NEG
39837: PUSH
39838: LD_INT 0
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 1
39847: NEG
39848: PUSH
39849: LD_INT 1
39851: NEG
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 1
39859: NEG
39860: PUSH
39861: LD_INT 2
39863: NEG
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 0
39871: PUSH
39872: LD_INT 2
39874: NEG
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 1
39882: PUSH
39883: LD_INT 1
39885: NEG
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 2
39893: PUSH
39894: LD_INT 0
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 2
39903: PUSH
39904: LD_INT 1
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 2
39913: PUSH
39914: LD_INT 2
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 1
39923: PUSH
39924: LD_INT 2
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: NEG
39934: PUSH
39935: LD_INT 1
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 2
39944: NEG
39945: PUSH
39946: LD_INT 0
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 2
39955: NEG
39956: PUSH
39957: LD_INT 1
39959: NEG
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 1
39967: NEG
39968: PUSH
39969: LD_INT 3
39971: NEG
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 1
39979: PUSH
39980: LD_INT 2
39982: NEG
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 3
39990: PUSH
39991: LD_INT 2
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 2
40000: PUSH
40001: LD_INT 3
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 2
40010: NEG
40011: PUSH
40012: LD_INT 1
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 3
40021: NEG
40022: PUSH
40023: LD_INT 1
40025: NEG
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40056: LD_ADDR_VAR 0 31
40060: PUSH
40061: LD_INT 0
40063: PUSH
40064: LD_INT 0
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 0
40073: PUSH
40074: LD_INT 1
40076: NEG
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 1
40084: PUSH
40085: LD_INT 0
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 1
40094: PUSH
40095: LD_INT 1
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 0
40104: PUSH
40105: LD_INT 1
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 1
40114: NEG
40115: PUSH
40116: LD_INT 0
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 1
40125: NEG
40126: PUSH
40127: LD_INT 1
40129: NEG
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 1
40137: NEG
40138: PUSH
40139: LD_INT 2
40141: NEG
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 1
40149: PUSH
40150: LD_INT 1
40152: NEG
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 2
40160: PUSH
40161: LD_INT 0
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 2
40170: PUSH
40171: LD_INT 1
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 2
40180: PUSH
40181: LD_INT 2
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 1
40190: PUSH
40191: LD_INT 2
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 0
40200: PUSH
40201: LD_INT 2
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 1
40210: NEG
40211: PUSH
40212: LD_INT 1
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 2
40221: NEG
40222: PUSH
40223: LD_INT 1
40225: NEG
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 2
40233: NEG
40234: PUSH
40235: LD_INT 2
40237: NEG
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 2
40245: NEG
40246: PUSH
40247: LD_INT 3
40249: NEG
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 2
40257: PUSH
40258: LD_INT 1
40260: NEG
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 3
40268: PUSH
40269: LD_INT 1
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 1
40278: PUSH
40279: LD_INT 3
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 1
40288: NEG
40289: PUSH
40290: LD_INT 2
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 3
40299: NEG
40300: PUSH
40301: LD_INT 2
40303: NEG
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40334: LD_ADDR_VAR 0 32
40338: PUSH
40339: LD_INT 0
40341: PUSH
40342: LD_INT 0
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 0
40351: PUSH
40352: LD_INT 1
40354: NEG
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 1
40362: PUSH
40363: LD_INT 0
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 1
40372: PUSH
40373: LD_INT 1
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 0
40382: PUSH
40383: LD_INT 1
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 1
40392: NEG
40393: PUSH
40394: LD_INT 0
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 1
40403: NEG
40404: PUSH
40405: LD_INT 1
40407: NEG
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: NEG
40416: PUSH
40417: LD_INT 2
40419: NEG
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 0
40427: PUSH
40428: LD_INT 2
40430: NEG
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 1
40438: PUSH
40439: LD_INT 1
40441: NEG
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 2
40449: PUSH
40450: LD_INT 1
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 2
40459: PUSH
40460: LD_INT 2
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 1
40469: PUSH
40470: LD_INT 2
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 0
40479: PUSH
40480: LD_INT 2
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 1
40489: NEG
40490: PUSH
40491: LD_INT 1
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 2
40500: NEG
40501: PUSH
40502: LD_INT 0
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 2
40511: NEG
40512: PUSH
40513: LD_INT 1
40515: NEG
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: LD_INT 3
40527: NEG
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 1
40535: PUSH
40536: LD_INT 2
40538: NEG
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 3
40546: PUSH
40547: LD_INT 2
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 2
40556: PUSH
40557: LD_INT 3
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 2
40566: NEG
40567: PUSH
40568: LD_INT 1
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 3
40577: NEG
40578: PUSH
40579: LD_INT 1
40581: NEG
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40612: LD_ADDR_VAR 0 33
40616: PUSH
40617: LD_INT 0
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 0
40629: PUSH
40630: LD_INT 1
40632: NEG
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 1
40640: PUSH
40641: LD_INT 0
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 1
40650: PUSH
40651: LD_INT 1
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 0
40660: PUSH
40661: LD_INT 1
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 1
40670: NEG
40671: PUSH
40672: LD_INT 0
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 1
40681: NEG
40682: PUSH
40683: LD_INT 1
40685: NEG
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: NEG
40694: PUSH
40695: LD_INT 2
40697: NEG
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 1
40705: PUSH
40706: LD_INT 1
40708: NEG
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 2
40716: PUSH
40717: LD_INT 0
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 2
40726: PUSH
40727: LD_INT 1
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 1
40736: PUSH
40737: LD_INT 2
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 0
40746: PUSH
40747: LD_INT 2
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 1
40756: NEG
40757: PUSH
40758: LD_INT 1
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 2
40767: NEG
40768: PUSH
40769: LD_INT 0
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 2
40778: NEG
40779: PUSH
40780: LD_INT 1
40782: NEG
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 2
40790: NEG
40791: PUSH
40792: LD_INT 2
40794: NEG
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 2
40802: NEG
40803: PUSH
40804: LD_INT 3
40806: NEG
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 2
40814: PUSH
40815: LD_INT 1
40817: NEG
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 3
40825: PUSH
40826: LD_INT 1
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 1
40835: PUSH
40836: LD_INT 3
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 1
40845: NEG
40846: PUSH
40847: LD_INT 2
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 3
40856: NEG
40857: PUSH
40858: LD_INT 2
40860: NEG
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40891: LD_ADDR_VAR 0 34
40895: PUSH
40896: LD_INT 0
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: LD_INT 1
40911: NEG
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 1
40929: PUSH
40930: LD_INT 1
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: LD_INT 1
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 1
40960: NEG
40961: PUSH
40962: LD_INT 1
40964: NEG
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 1
40972: NEG
40973: PUSH
40974: LD_INT 2
40976: NEG
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: LD_INT 2
40987: NEG
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: LD_INT 1
40998: NEG
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 2
41006: PUSH
41007: LD_INT 1
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 2
41016: PUSH
41017: LD_INT 2
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 1
41026: PUSH
41027: LD_INT 2
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 1
41036: NEG
41037: PUSH
41038: LD_INT 1
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 2
41047: NEG
41048: PUSH
41049: LD_INT 0
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 2
41058: NEG
41059: PUSH
41060: LD_INT 1
41062: NEG
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 2
41070: NEG
41071: PUSH
41072: LD_INT 2
41074: NEG
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 1
41082: NEG
41083: PUSH
41084: LD_INT 3
41086: NEG
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 1
41094: PUSH
41095: LD_INT 2
41097: NEG
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 3
41105: PUSH
41106: LD_INT 2
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 2
41115: PUSH
41116: LD_INT 3
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 2
41125: NEG
41126: PUSH
41127: LD_INT 1
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 3
41136: NEG
41137: PUSH
41138: LD_INT 1
41140: NEG
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41171: LD_ADDR_VAR 0 35
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: LD_INT 1
41191: NEG
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 1
41199: PUSH
41200: LD_INT 0
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 1
41209: PUSH
41210: LD_INT 1
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 0
41219: PUSH
41220: LD_INT 1
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 1
41229: NEG
41230: PUSH
41231: LD_INT 0
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 1
41240: NEG
41241: PUSH
41242: LD_INT 1
41244: NEG
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 2
41252: PUSH
41253: LD_INT 1
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 2
41262: NEG
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41283: LD_ADDR_VAR 0 36
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: LD_INT 1
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 1
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 1
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 0
41331: PUSH
41332: LD_INT 1
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 1
41341: NEG
41342: PUSH
41343: LD_INT 0
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: LD_INT 1
41356: NEG
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 1
41364: NEG
41365: PUSH
41366: LD_INT 2
41368: NEG
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 1
41376: PUSH
41377: LD_INT 2
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41395: LD_ADDR_VAR 0 37
41399: PUSH
41400: LD_INT 0
41402: PUSH
41403: LD_INT 0
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 1
41423: PUSH
41424: LD_INT 0
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 1
41433: PUSH
41434: LD_INT 1
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: LD_INT 1
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 1
41453: NEG
41454: PUSH
41455: LD_INT 0
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 1
41464: NEG
41465: PUSH
41466: LD_INT 1
41468: NEG
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 1
41476: PUSH
41477: LD_INT 1
41479: NEG
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 1
41487: NEG
41488: PUSH
41489: LD_INT 1
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41507: LD_ADDR_VAR 0 38
41511: PUSH
41512: LD_INT 0
41514: PUSH
41515: LD_INT 0
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 0
41524: PUSH
41525: LD_INT 1
41527: NEG
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 1
41535: PUSH
41536: LD_INT 0
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 1
41545: PUSH
41546: LD_INT 1
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: LD_INT 1
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 1
41565: NEG
41566: PUSH
41567: LD_INT 0
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 1
41576: NEG
41577: PUSH
41578: LD_INT 1
41580: NEG
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 2
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 2
41598: NEG
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41619: LD_ADDR_VAR 0 39
41623: PUSH
41624: LD_INT 0
41626: PUSH
41627: LD_INT 0
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 0
41636: PUSH
41637: LD_INT 1
41639: NEG
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 1
41647: PUSH
41648: LD_INT 0
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 1
41657: PUSH
41658: LD_INT 1
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 0
41667: PUSH
41668: LD_INT 1
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 1
41677: NEG
41678: PUSH
41679: LD_INT 0
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 1
41688: NEG
41689: PUSH
41690: LD_INT 1
41692: NEG
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 1
41700: NEG
41701: PUSH
41702: LD_INT 2
41704: NEG
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 1
41712: PUSH
41713: LD_INT 2
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41731: LD_ADDR_VAR 0 40
41735: PUSH
41736: LD_INT 0
41738: PUSH
41739: LD_INT 0
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: LD_INT 1
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: PUSH
41760: LD_INT 0
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 1
41769: PUSH
41770: LD_INT 1
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 0
41779: PUSH
41780: LD_INT 1
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 1
41789: NEG
41790: PUSH
41791: LD_INT 0
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 1
41800: NEG
41801: PUSH
41802: LD_INT 1
41804: NEG
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 1
41812: PUSH
41813: LD_INT 1
41815: NEG
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 1
41823: NEG
41824: PUSH
41825: LD_INT 1
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41843: LD_ADDR_VAR 0 41
41847: PUSH
41848: LD_INT 0
41850: PUSH
41851: LD_INT 0
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 0
41860: PUSH
41861: LD_INT 1
41863: NEG
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 1
41871: PUSH
41872: LD_INT 0
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 1
41881: PUSH
41882: LD_INT 1
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 0
41891: PUSH
41892: LD_INT 1
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: NEG
41902: PUSH
41903: LD_INT 0
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 1
41912: NEG
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 1
41924: NEG
41925: PUSH
41926: LD_INT 2
41928: NEG
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 1
41936: PUSH
41937: LD_INT 1
41939: NEG
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 2
41947: PUSH
41948: LD_INT 0
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 2
41957: PUSH
41958: LD_INT 1
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 2
41967: PUSH
41968: LD_INT 2
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 1
41977: PUSH
41978: LD_INT 2
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 1
41987: NEG
41988: PUSH
41989: LD_INT 1
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 2
41998: NEG
41999: PUSH
42000: LD_INT 0
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 2
42009: NEG
42010: PUSH
42011: LD_INT 1
42013: NEG
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 2
42021: NEG
42022: PUSH
42023: LD_INT 2
42025: NEG
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 2
42033: NEG
42034: PUSH
42035: LD_INT 3
42037: NEG
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 2
42045: PUSH
42046: LD_INT 1
42048: NEG
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 3
42056: PUSH
42057: LD_INT 0
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 3
42066: PUSH
42067: LD_INT 1
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 3
42076: PUSH
42077: LD_INT 2
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 3
42086: PUSH
42087: LD_INT 3
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 2
42096: PUSH
42097: LD_INT 3
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 2
42106: NEG
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 3
42117: NEG
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 3
42128: NEG
42129: PUSH
42130: LD_INT 1
42132: NEG
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 3
42140: NEG
42141: PUSH
42142: LD_INT 2
42144: NEG
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 3
42152: NEG
42153: PUSH
42154: LD_INT 3
42156: NEG
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42193: LD_ADDR_VAR 0 42
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: LD_INT 1
42213: NEG
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 1
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 1
42251: NEG
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 1
42262: NEG
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 1
42274: NEG
42275: PUSH
42276: LD_INT 2
42278: NEG
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: LD_INT 2
42289: NEG
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 1
42297: PUSH
42298: LD_INT 1
42300: NEG
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 2
42308: PUSH
42309: LD_INT 1
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 2
42318: PUSH
42319: LD_INT 2
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: LD_INT 2
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 0
42338: PUSH
42339: LD_INT 2
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 1
42348: NEG
42349: PUSH
42350: LD_INT 1
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 2
42359: NEG
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 2
42371: NEG
42372: PUSH
42373: LD_INT 2
42375: NEG
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 2
42383: NEG
42384: PUSH
42385: LD_INT 3
42387: NEG
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 1
42395: NEG
42396: PUSH
42397: LD_INT 3
42399: NEG
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 0
42407: PUSH
42408: LD_INT 3
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 1
42418: PUSH
42419: LD_INT 2
42421: NEG
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 3
42429: PUSH
42430: LD_INT 2
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 3
42439: PUSH
42440: LD_INT 3
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 2
42449: PUSH
42450: LD_INT 3
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: PUSH
42460: LD_INT 3
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: LD_INT 3
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: LD_INT 2
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 3
42490: NEG
42491: PUSH
42492: LD_INT 2
42494: NEG
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 3
42502: NEG
42503: PUSH
42504: LD_INT 3
42506: NEG
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42543: LD_ADDR_VAR 0 43
42547: PUSH
42548: LD_INT 0
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 0
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 1
42571: PUSH
42572: LD_INT 0
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 1
42581: PUSH
42582: LD_INT 1
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: LD_INT 1
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 1
42601: NEG
42602: PUSH
42603: LD_INT 0
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: LD_INT 1
42616: NEG
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 1
42624: NEG
42625: PUSH
42626: LD_INT 2
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 0
42636: PUSH
42637: LD_INT 2
42639: NEG
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 1
42647: PUSH
42648: LD_INT 1
42650: NEG
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 2
42658: PUSH
42659: LD_INT 0
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 2
42668: PUSH
42669: LD_INT 1
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 1
42678: PUSH
42679: LD_INT 2
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 0
42688: PUSH
42689: LD_INT 2
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 1
42698: NEG
42699: PUSH
42700: LD_INT 1
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 2
42709: NEG
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 2
42720: NEG
42721: PUSH
42722: LD_INT 1
42724: NEG
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: LD_INT 3
42736: NEG
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: LD_INT 3
42747: NEG
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 1
42755: PUSH
42756: LD_INT 2
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 2
42766: PUSH
42767: LD_INT 1
42769: NEG
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 3
42777: PUSH
42778: LD_INT 0
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 3
42787: PUSH
42788: LD_INT 1
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 1
42797: PUSH
42798: LD_INT 3
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 0
42807: PUSH
42808: LD_INT 3
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 1
42817: NEG
42818: PUSH
42819: LD_INT 2
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 2
42828: NEG
42829: PUSH
42830: LD_INT 1
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 3
42839: NEG
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 3
42850: NEG
42851: PUSH
42852: LD_INT 1
42854: NEG
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42891: LD_ADDR_VAR 0 44
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: LD_INT 0
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 0
42908: PUSH
42909: LD_INT 1
42911: NEG
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 1
42919: PUSH
42920: LD_INT 0
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 1
42929: PUSH
42930: LD_INT 1
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: LD_INT 1
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 1
42949: NEG
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 1
42960: NEG
42961: PUSH
42962: LD_INT 1
42964: NEG
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 1
42972: NEG
42973: PUSH
42974: LD_INT 2
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: LD_INT 1
42987: NEG
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 2
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 2
43005: PUSH
43006: LD_INT 1
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 2
43015: PUSH
43016: LD_INT 2
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 1
43025: PUSH
43026: LD_INT 2
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 1
43035: NEG
43036: PUSH
43037: LD_INT 1
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 2
43046: NEG
43047: PUSH
43048: LD_INT 0
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 2
43057: NEG
43058: PUSH
43059: LD_INT 1
43061: NEG
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 2
43069: NEG
43070: PUSH
43071: LD_INT 2
43073: NEG
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 2
43081: NEG
43082: PUSH
43083: LD_INT 3
43085: NEG
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 2
43093: PUSH
43094: LD_INT 1
43096: NEG
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 3
43104: PUSH
43105: LD_INT 0
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 3
43114: PUSH
43115: LD_INT 1
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 3
43124: PUSH
43125: LD_INT 2
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 3
43134: PUSH
43135: LD_INT 3
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 2
43144: PUSH
43145: LD_INT 3
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 2
43154: NEG
43155: PUSH
43156: LD_INT 1
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 3
43165: NEG
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 3
43176: NEG
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 3
43188: NEG
43189: PUSH
43190: LD_INT 2
43192: NEG
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 3
43200: NEG
43201: PUSH
43202: LD_INT 3
43204: NEG
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43241: LD_ADDR_VAR 0 45
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: LD_INT 0
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 0
43258: PUSH
43259: LD_INT 1
43261: NEG
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 1
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: LD_INT 1
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 1
43310: NEG
43311: PUSH
43312: LD_INT 1
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: NEG
43323: PUSH
43324: LD_INT 2
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: LD_INT 2
43337: NEG
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: LD_INT 1
43348: NEG
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 2
43356: PUSH
43357: LD_INT 1
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 2
43366: PUSH
43367: LD_INT 2
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 1
43376: PUSH
43377: LD_INT 2
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 0
43386: PUSH
43387: LD_INT 2
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 1
43396: NEG
43397: PUSH
43398: LD_INT 1
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 2
43407: NEG
43408: PUSH
43409: LD_INT 1
43411: NEG
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 2
43419: NEG
43420: PUSH
43421: LD_INT 2
43423: NEG
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 2
43431: NEG
43432: PUSH
43433: LD_INT 3
43435: NEG
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 1
43443: NEG
43444: PUSH
43445: LD_INT 3
43447: NEG
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 0
43455: PUSH
43456: LD_INT 3
43458: NEG
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 1
43466: PUSH
43467: LD_INT 2
43469: NEG
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 3
43477: PUSH
43478: LD_INT 2
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 3
43487: PUSH
43488: LD_INT 3
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 2
43497: PUSH
43498: LD_INT 3
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 1
43507: PUSH
43508: LD_INT 3
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: LD_INT 3
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: LD_INT 2
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 3
43538: NEG
43539: PUSH
43540: LD_INT 2
43542: NEG
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 3
43550: NEG
43551: PUSH
43552: LD_INT 3
43554: NEG
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43591: LD_ADDR_VAR 0 46
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: LD_INT 0
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: LD_INT 1
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: PUSH
43630: LD_INT 1
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 0
43639: PUSH
43640: LD_INT 1
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: NEG
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 1
43660: NEG
43661: PUSH
43662: LD_INT 1
43664: NEG
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 1
43672: NEG
43673: PUSH
43674: LD_INT 2
43676: NEG
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: LD_INT 2
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: LD_INT 1
43698: NEG
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 2
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 2
43716: PUSH
43717: LD_INT 1
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: LD_INT 2
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 0
43736: PUSH
43737: LD_INT 2
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 1
43746: NEG
43747: PUSH
43748: LD_INT 1
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 2
43757: NEG
43758: PUSH
43759: LD_INT 0
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 2
43768: NEG
43769: PUSH
43770: LD_INT 1
43772: NEG
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: LD_INT 3
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: LD_INT 3
43795: NEG
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: LD_INT 2
43806: NEG
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 2
43814: PUSH
43815: LD_INT 1
43817: NEG
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 3
43825: PUSH
43826: LD_INT 0
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 3
43835: PUSH
43836: LD_INT 1
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 1
43845: PUSH
43846: LD_INT 3
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: LD_INT 3
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 1
43865: NEG
43866: PUSH
43867: LD_INT 2
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 2
43876: NEG
43877: PUSH
43878: LD_INT 1
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 3
43887: NEG
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 3
43898: NEG
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43939: LD_ADDR_VAR 0 47
43943: PUSH
43944: LD_INT 0
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: LD_INT 1
43959: NEG
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 1
43967: PUSH
43968: LD_INT 0
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 1
43977: PUSH
43978: LD_INT 1
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: LD_INT 1
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 1
43997: NEG
43998: PUSH
43999: LD_INT 0
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 1
44008: NEG
44009: PUSH
44010: LD_INT 1
44012: NEG
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: LD_INT 2
44024: NEG
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: LD_INT 2
44035: NEG
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: PUSH
44044: LD_INT 1
44046: NEG
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 2
44054: NEG
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 2
44066: NEG
44067: PUSH
44068: LD_INT 2
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44090: LD_ADDR_VAR 0 48
44094: PUSH
44095: LD_INT 0
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 1
44118: PUSH
44119: LD_INT 0
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 1
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 1
44159: NEG
44160: PUSH
44161: LD_INT 1
44163: NEG
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 1
44171: NEG
44172: PUSH
44173: LD_INT 2
44175: NEG
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: LD_INT 2
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: LD_INT 1
44197: NEG
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 2
44205: PUSH
44206: LD_INT 0
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 2
44215: PUSH
44216: LD_INT 1
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44237: LD_ADDR_VAR 0 49
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: LD_INT 0
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: LD_INT 1
44257: NEG
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 1
44265: PUSH
44266: LD_INT 0
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: LD_INT 1
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 1
44306: NEG
44307: PUSH
44308: LD_INT 1
44310: NEG
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 1
44318: PUSH
44319: LD_INT 1
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 2
44329: PUSH
44330: LD_INT 0
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 2
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 2
44349: PUSH
44350: LD_INT 2
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: PUSH
44360: LD_INT 2
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44381: LD_ADDR_VAR 0 50
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: LD_INT 0
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: LD_INT 1
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 1
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: LD_INT 1
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 1
44450: NEG
44451: PUSH
44452: LD_INT 1
44454: NEG
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 2
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 2
44472: PUSH
44473: LD_INT 2
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 1
44482: PUSH
44483: LD_INT 2
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: LD_INT 2
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: NEG
44503: PUSH
44504: LD_INT 1
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44525: LD_ADDR_VAR 0 51
44529: PUSH
44530: LD_INT 0
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 0
44542: PUSH
44543: LD_INT 1
44545: NEG
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 1
44553: PUSH
44554: LD_INT 0
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 0
44573: PUSH
44574: LD_INT 1
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 1
44583: NEG
44584: PUSH
44585: LD_INT 0
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 1
44594: NEG
44595: PUSH
44596: LD_INT 1
44598: NEG
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 1
44606: PUSH
44607: LD_INT 2
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: LD_INT 2
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: LD_INT 1
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 2
44637: NEG
44638: PUSH
44639: LD_INT 0
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 2
44648: NEG
44649: PUSH
44650: LD_INT 1
44652: NEG
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44672: LD_ADDR_VAR 0 52
44676: PUSH
44677: LD_INT 0
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: LD_INT 1
44692: NEG
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 1
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 1
44710: PUSH
44711: LD_INT 1
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 0
44720: PUSH
44721: LD_INT 1
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 1
44730: NEG
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 1
44741: NEG
44742: PUSH
44743: LD_INT 1
44745: NEG
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 1
44753: NEG
44754: PUSH
44755: LD_INT 2
44757: NEG
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 1
44765: NEG
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 2
44776: NEG
44777: PUSH
44778: LD_INT 0
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 2
44787: NEG
44788: PUSH
44789: LD_INT 1
44791: NEG
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 2
44799: NEG
44800: PUSH
44801: LD_INT 2
44803: NEG
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44823: LD_ADDR_VAR 0 53
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: LD_INT 1
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: LD_INT 1
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: LD_INT 1
44896: NEG
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: LD_INT 2
44908: NEG
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: LD_INT 2
44919: NEG
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: LD_INT 1
44930: NEG
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 2
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 2
44958: PUSH
44959: LD_INT 2
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: LD_INT 2
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: LD_INT 2
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: NEG
44989: PUSH
44990: LD_INT 1
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 2
44999: NEG
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 2
45010: NEG
45011: PUSH
45012: LD_INT 1
45014: NEG
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 2
45022: NEG
45023: PUSH
45024: LD_INT 2
45026: NEG
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45053: LD_ADDR_VAR 0 54
45057: PUSH
45058: LD_INT 0
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: LD_INT 1
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 1
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 0
45101: PUSH
45102: LD_INT 1
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 1
45111: NEG
45112: PUSH
45113: LD_INT 0
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 1
45122: NEG
45123: PUSH
45124: LD_INT 1
45126: NEG
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 1
45134: NEG
45135: PUSH
45136: LD_INT 2
45138: NEG
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: LD_INT 2
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 1
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 2
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 2
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 2
45188: PUSH
45189: LD_INT 2
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: PUSH
45199: LD_INT 2
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: LD_INT 2
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: NEG
45219: PUSH
45220: LD_INT 1
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 2
45229: NEG
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 2
45240: NEG
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 2
45252: NEG
45253: PUSH
45254: LD_INT 2
45256: NEG
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45283: LD_ADDR_VAR 0 55
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: LD_INT 1
45303: NEG
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: LD_INT 1
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: NEG
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 1
45352: NEG
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 1
45364: NEG
45365: PUSH
45366: LD_INT 2
45368: NEG
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: LD_INT 2
45379: NEG
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 2
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 2
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 2
45418: PUSH
45419: LD_INT 2
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 1
45428: PUSH
45429: LD_INT 2
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: LD_INT 2
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 1
45448: NEG
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 2
45459: NEG
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 2
45470: NEG
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 2
45482: NEG
45483: PUSH
45484: LD_INT 2
45486: NEG
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45513: LD_ADDR_VAR 0 56
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 1
45582: NEG
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: NEG
45595: PUSH
45596: LD_INT 2
45598: NEG
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: LD_INT 2
45609: NEG
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 2
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 2
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: LD_INT 2
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: LD_INT 2
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 1
45678: NEG
45679: PUSH
45680: LD_INT 1
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 2
45689: NEG
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 2
45700: NEG
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 2
45712: NEG
45713: PUSH
45714: LD_INT 2
45716: NEG
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45743: LD_ADDR_VAR 0 57
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: LD_INT 1
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: NEG
45825: PUSH
45826: LD_INT 2
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: LD_INT 2
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: LD_INT 1
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 2
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 2
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 2
45878: PUSH
45879: LD_INT 2
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 1
45888: PUSH
45889: LD_INT 2
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: LD_INT 2
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: NEG
45909: PUSH
45910: LD_INT 1
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 2
45919: NEG
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 2
45930: NEG
45931: PUSH
45932: LD_INT 1
45934: NEG
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 2
45942: NEG
45943: PUSH
45944: LD_INT 2
45946: NEG
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45973: LD_ADDR_VAR 0 58
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: LD_INT 1
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 1
46042: NEG
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: NEG
46055: PUSH
46056: LD_INT 2
46058: NEG
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: LD_INT 2
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 1
46077: PUSH
46078: LD_INT 1
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 2
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 2
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 2
46108: PUSH
46109: LD_INT 2
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: PUSH
46119: LD_INT 2
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: LD_INT 2
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 2
46149: NEG
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 2
46160: NEG
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 2
46172: NEG
46173: PUSH
46174: LD_INT 2
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46203: LD_ADDR_VAR 0 59
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: LD_INT 0
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46291: LD_ADDR_VAR 0 60
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: LD_INT 1
46311: NEG
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: PUSH
46320: LD_INT 0
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 1
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: LD_INT 1
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 1
46360: NEG
46361: PUSH
46362: LD_INT 1
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46379: LD_ADDR_VAR 0 61
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: LD_INT 0
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: LD_INT 1
46399: NEG
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 1
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 1
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 0
46427: PUSH
46428: LD_INT 1
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: LD_INT 0
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 1
46448: NEG
46449: PUSH
46450: LD_INT 1
46452: NEG
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46467: LD_ADDR_VAR 0 62
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: LD_INT 0
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: LD_INT 0
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46555: LD_ADDR_VAR 0 63
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: LD_INT 0
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 0
46572: PUSH
46573: LD_INT 1
46575: NEG
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: LD_INT 1
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 1
46613: NEG
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: LD_INT 1
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46643: LD_ADDR_VAR 0 64
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 0
46691: PUSH
46692: LD_INT 1
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: ST_TO_ADDR
// end ; 1 :
46731: GO 52628
46733: LD_INT 1
46735: DOUBLE
46736: EQUAL
46737: IFTRUE 46741
46739: GO 49364
46741: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46742: LD_ADDR_VAR 0 11
46746: PUSH
46747: LD_INT 1
46749: NEG
46750: PUSH
46751: LD_INT 3
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: LD_INT 3
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: LD_INT 2
46775: NEG
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: LIST
46785: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46786: LD_ADDR_VAR 0 12
46790: PUSH
46791: LD_INT 2
46793: PUSH
46794: LD_INT 1
46796: NEG
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 3
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 3
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: LIST
46826: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46827: LD_ADDR_VAR 0 13
46831: PUSH
46832: LD_INT 3
46834: PUSH
46835: LD_INT 2
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 3
46844: PUSH
46845: LD_INT 3
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 2
46854: PUSH
46855: LD_INT 3
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: LIST
46866: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46867: LD_ADDR_VAR 0 14
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: LD_INT 3
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: LD_INT 3
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: LD_INT 2
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: LIST
46907: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46908: LD_ADDR_VAR 0 15
46912: PUSH
46913: LD_INT 2
46915: NEG
46916: PUSH
46917: LD_INT 1
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 3
46926: NEG
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 3
46937: NEG
46938: PUSH
46939: LD_INT 1
46941: NEG
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: LIST
46951: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46952: LD_ADDR_VAR 0 16
46956: PUSH
46957: LD_INT 2
46959: NEG
46960: PUSH
46961: LD_INT 3
46963: NEG
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 3
46971: NEG
46972: PUSH
46973: LD_INT 2
46975: NEG
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 3
46983: NEG
46984: PUSH
46985: LD_INT 3
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: LIST
46997: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46998: LD_ADDR_VAR 0 17
47002: PUSH
47003: LD_INT 1
47005: NEG
47006: PUSH
47007: LD_INT 3
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: LD_INT 3
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: LD_INT 2
47031: NEG
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: LIST
47041: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47042: LD_ADDR_VAR 0 18
47046: PUSH
47047: LD_INT 2
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 3
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 3
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: LIST
47082: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47083: LD_ADDR_VAR 0 19
47087: PUSH
47088: LD_INT 3
47090: PUSH
47091: LD_INT 2
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 3
47100: PUSH
47101: LD_INT 3
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 2
47110: PUSH
47111: LD_INT 3
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: LIST
47122: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47123: LD_ADDR_VAR 0 20
47127: PUSH
47128: LD_INT 1
47130: PUSH
47131: LD_INT 3
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: LD_INT 3
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 1
47150: NEG
47151: PUSH
47152: LD_INT 2
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: LIST
47163: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47164: LD_ADDR_VAR 0 21
47168: PUSH
47169: LD_INT 2
47171: NEG
47172: PUSH
47173: LD_INT 1
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 3
47182: NEG
47183: PUSH
47184: LD_INT 0
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 3
47193: NEG
47194: PUSH
47195: LD_INT 1
47197: NEG
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: LIST
47207: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47208: LD_ADDR_VAR 0 22
47212: PUSH
47213: LD_INT 2
47215: NEG
47216: PUSH
47217: LD_INT 3
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 3
47227: NEG
47228: PUSH
47229: LD_INT 2
47231: NEG
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 3
47239: NEG
47240: PUSH
47241: LD_INT 3
47243: NEG
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: LIST
47253: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47254: LD_ADDR_VAR 0 23
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: LD_INT 3
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: LD_INT 4
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 1
47284: PUSH
47285: LD_INT 3
47287: NEG
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: LIST
47297: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47298: LD_ADDR_VAR 0 24
47302: PUSH
47303: LD_INT 3
47305: PUSH
47306: LD_INT 0
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 3
47315: PUSH
47316: LD_INT 1
47318: NEG
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 4
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: LIST
47338: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47339: LD_ADDR_VAR 0 25
47343: PUSH
47344: LD_INT 3
47346: PUSH
47347: LD_INT 3
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 4
47356: PUSH
47357: LD_INT 3
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 3
47366: PUSH
47367: LD_INT 4
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: LIST
47378: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47379: LD_ADDR_VAR 0 26
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 3
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: PUSH
47397: LD_INT 4
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 1
47406: NEG
47407: PUSH
47408: LD_INT 3
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: LIST
47419: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47420: LD_ADDR_VAR 0 27
47424: PUSH
47425: LD_INT 3
47427: NEG
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 3
47438: NEG
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 4
47449: NEG
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: LIST
47463: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47464: LD_ADDR_VAR 0 28
47468: PUSH
47469: LD_INT 3
47471: NEG
47472: PUSH
47473: LD_INT 3
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 3
47483: NEG
47484: PUSH
47485: LD_INT 4
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 4
47495: NEG
47496: PUSH
47497: LD_INT 3
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: LIST
47509: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47510: LD_ADDR_VAR 0 29
47514: PUSH
47515: LD_INT 1
47517: NEG
47518: PUSH
47519: LD_INT 3
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: LD_INT 3
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 1
47540: PUSH
47541: LD_INT 2
47543: NEG
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: LD_INT 4
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 0
47563: PUSH
47564: LD_INT 4
47566: NEG
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 1
47574: PUSH
47575: LD_INT 3
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 1
47585: NEG
47586: PUSH
47587: LD_INT 5
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 0
47597: PUSH
47598: LD_INT 5
47600: NEG
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 1
47608: PUSH
47609: LD_INT 4
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: NEG
47620: PUSH
47621: LD_INT 6
47623: NEG
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 0
47631: PUSH
47632: LD_INT 6
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: LD_INT 5
47645: NEG
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47665: LD_ADDR_VAR 0 30
47669: PUSH
47670: LD_INT 2
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 3
47683: PUSH
47684: LD_INT 0
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 3
47693: PUSH
47694: LD_INT 1
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 3
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 4
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 4
47724: PUSH
47725: LD_INT 1
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 4
47734: PUSH
47735: LD_INT 1
47737: NEG
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 5
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 5
47755: PUSH
47756: LD_INT 1
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 5
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 6
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 6
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47808: LD_ADDR_VAR 0 31
47812: PUSH
47813: LD_INT 3
47815: PUSH
47816: LD_INT 2
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 3
47825: PUSH
47826: LD_INT 3
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 2
47835: PUSH
47836: LD_INT 3
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 4
47845: PUSH
47846: LD_INT 3
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 4
47855: PUSH
47856: LD_INT 4
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 3
47865: PUSH
47866: LD_INT 4
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 5
47875: PUSH
47876: LD_INT 4
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 5
47885: PUSH
47886: LD_INT 5
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 4
47895: PUSH
47896: LD_INT 5
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 6
47905: PUSH
47906: LD_INT 5
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 6
47915: PUSH
47916: LD_INT 6
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 5
47925: PUSH
47926: LD_INT 6
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47947: LD_ADDR_VAR 0 32
47951: PUSH
47952: LD_INT 1
47954: PUSH
47955: LD_INT 3
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 0
47964: PUSH
47965: LD_INT 3
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 1
47974: NEG
47975: PUSH
47976: LD_INT 2
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 1
47985: PUSH
47986: LD_INT 4
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: LD_INT 4
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: NEG
48006: PUSH
48007: LD_INT 3
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 1
48016: PUSH
48017: LD_INT 5
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: LD_INT 5
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 1
48036: NEG
48037: PUSH
48038: LD_INT 4
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: LD_INT 6
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: LD_INT 6
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: LD_INT 5
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48090: LD_ADDR_VAR 0 33
48094: PUSH
48095: LD_INT 2
48097: NEG
48098: PUSH
48099: LD_INT 1
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 3
48108: NEG
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 3
48119: NEG
48120: PUSH
48121: LD_INT 1
48123: NEG
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 3
48131: NEG
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 4
48142: NEG
48143: PUSH
48144: LD_INT 0
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 4
48153: NEG
48154: PUSH
48155: LD_INT 1
48157: NEG
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 4
48165: NEG
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 5
48176: NEG
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 5
48187: NEG
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 5
48199: NEG
48200: PUSH
48201: LD_INT 1
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 6
48210: NEG
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 6
48221: NEG
48222: PUSH
48223: LD_INT 1
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48245: LD_ADDR_VAR 0 34
48249: PUSH
48250: LD_INT 2
48252: NEG
48253: PUSH
48254: LD_INT 3
48256: NEG
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 3
48264: NEG
48265: PUSH
48266: LD_INT 2
48268: NEG
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 3
48276: NEG
48277: PUSH
48278: LD_INT 3
48280: NEG
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 3
48288: NEG
48289: PUSH
48290: LD_INT 4
48292: NEG
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 4
48300: NEG
48301: PUSH
48302: LD_INT 3
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 4
48312: NEG
48313: PUSH
48314: LD_INT 4
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 4
48324: NEG
48325: PUSH
48326: LD_INT 5
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 5
48336: NEG
48337: PUSH
48338: LD_INT 4
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 5
48348: NEG
48349: PUSH
48350: LD_INT 5
48352: NEG
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 5
48360: NEG
48361: PUSH
48362: LD_INT 6
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 6
48372: NEG
48373: PUSH
48374: LD_INT 5
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 6
48384: NEG
48385: PUSH
48386: LD_INT 6
48388: NEG
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48408: LD_ADDR_VAR 0 41
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: LD_INT 2
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: NEG
48427: PUSH
48428: LD_INT 3
48430: NEG
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 1
48438: PUSH
48439: LD_INT 2
48441: NEG
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: LIST
48451: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48452: LD_ADDR_VAR 0 42
48456: PUSH
48457: LD_INT 2
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 2
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 3
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: LIST
48492: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48493: LD_ADDR_VAR 0 43
48497: PUSH
48498: LD_INT 2
48500: PUSH
48501: LD_INT 2
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 3
48510: PUSH
48511: LD_INT 2
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 2
48520: PUSH
48521: LD_INT 3
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: LIST
48532: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48533: LD_ADDR_VAR 0 44
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: LD_INT 2
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 1
48550: PUSH
48551: LD_INT 3
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: LD_INT 2
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: LIST
48573: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48574: LD_ADDR_VAR 0 45
48578: PUSH
48579: LD_INT 2
48581: NEG
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 2
48592: NEG
48593: PUSH
48594: LD_INT 1
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 3
48603: NEG
48604: PUSH
48605: LD_INT 1
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: LIST
48617: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48618: LD_ADDR_VAR 0 46
48622: PUSH
48623: LD_INT 2
48625: NEG
48626: PUSH
48627: LD_INT 2
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 2
48637: NEG
48638: PUSH
48639: LD_INT 3
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 3
48649: NEG
48650: PUSH
48651: LD_INT 2
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: LIST
48663: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48664: LD_ADDR_VAR 0 47
48668: PUSH
48669: LD_INT 2
48671: NEG
48672: PUSH
48673: LD_INT 3
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: LD_INT 3
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48697: LD_ADDR_VAR 0 48
48701: PUSH
48702: LD_INT 1
48704: PUSH
48705: LD_INT 2
48707: NEG
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 2
48715: PUSH
48716: LD_INT 1
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48728: LD_ADDR_VAR 0 49
48732: PUSH
48733: LD_INT 3
48735: PUSH
48736: LD_INT 1
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 3
48745: PUSH
48746: LD_INT 2
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48757: LD_ADDR_VAR 0 50
48761: PUSH
48762: LD_INT 2
48764: PUSH
48765: LD_INT 3
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: LD_INT 3
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48786: LD_ADDR_VAR 0 51
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: LD_INT 2
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 2
48804: NEG
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48817: LD_ADDR_VAR 0 52
48821: PUSH
48822: LD_INT 3
48824: NEG
48825: PUSH
48826: LD_INT 1
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 3
48836: NEG
48837: PUSH
48838: LD_INT 2
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48850: LD_ADDR_VAR 0 53
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: LD_INT 3
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: LD_INT 3
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: LD_INT 2
48883: NEG
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: LIST
48893: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48894: LD_ADDR_VAR 0 54
48898: PUSH
48899: LD_INT 2
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 3
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 3
48922: PUSH
48923: LD_INT 1
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: LIST
48934: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48935: LD_ADDR_VAR 0 55
48939: PUSH
48940: LD_INT 3
48942: PUSH
48943: LD_INT 2
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 3
48952: PUSH
48953: LD_INT 3
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 2
48962: PUSH
48963: LD_INT 3
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: LIST
48974: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48975: LD_ADDR_VAR 0 56
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: LD_INT 3
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: LD_INT 3
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: LD_INT 2
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: LIST
49015: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49016: LD_ADDR_VAR 0 57
49020: PUSH
49021: LD_INT 2
49023: NEG
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 3
49034: NEG
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 3
49045: NEG
49046: PUSH
49047: LD_INT 1
49049: NEG
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: LIST
49059: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49060: LD_ADDR_VAR 0 58
49064: PUSH
49065: LD_INT 2
49067: NEG
49068: PUSH
49069: LD_INT 3
49071: NEG
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 3
49079: NEG
49080: PUSH
49081: LD_INT 2
49083: NEG
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 3
49091: NEG
49092: PUSH
49093: LD_INT 3
49095: NEG
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: LIST
49105: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49106: LD_ADDR_VAR 0 59
49110: PUSH
49111: LD_INT 1
49113: NEG
49114: PUSH
49115: LD_INT 2
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: LD_INT 2
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: LIST
49149: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49150: LD_ADDR_VAR 0 60
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: LD_INT 1
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 2
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 2
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: LIST
49190: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49191: LD_ADDR_VAR 0 61
49195: PUSH
49196: LD_INT 2
49198: PUSH
49199: LD_INT 1
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 2
49208: PUSH
49209: LD_INT 2
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: LD_INT 2
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: LIST
49230: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49231: LD_ADDR_VAR 0 62
49235: PUSH
49236: LD_INT 1
49238: PUSH
49239: LD_INT 2
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 0
49248: PUSH
49249: LD_INT 2
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: LD_INT 1
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: LIST
49271: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49272: LD_ADDR_VAR 0 63
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 2
49290: NEG
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 2
49301: NEG
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: LIST
49315: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49316: LD_ADDR_VAR 0 64
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: LD_INT 2
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 2
49335: NEG
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 2
49347: NEG
49348: PUSH
49349: LD_INT 2
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: LIST
49361: ST_TO_ADDR
// end ; 2 :
49362: GO 52628
49364: LD_INT 2
49366: DOUBLE
49367: EQUAL
49368: IFTRUE 49372
49370: GO 52627
49372: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49373: LD_ADDR_VAR 0 29
49377: PUSH
49378: LD_INT 4
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 4
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 5
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 5
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 4
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 3
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 3
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 3
49452: PUSH
49453: LD_INT 2
49455: NEG
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 5
49463: PUSH
49464: LD_INT 2
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 3
49473: PUSH
49474: LD_INT 3
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 3
49483: PUSH
49484: LD_INT 2
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 4
49493: PUSH
49494: LD_INT 3
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 4
49503: PUSH
49504: LD_INT 4
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 3
49513: PUSH
49514: LD_INT 4
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 2
49523: PUSH
49524: LD_INT 3
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 2
49533: PUSH
49534: LD_INT 2
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 4
49543: PUSH
49544: LD_INT 2
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 2
49553: PUSH
49554: LD_INT 4
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: LD_INT 4
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 0
49573: PUSH
49574: LD_INT 3
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: LD_INT 4
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: PUSH
49594: LD_INT 5
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: LD_INT 5
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: LD_INT 4
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: NEG
49625: PUSH
49626: LD_INT 3
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 2
49635: PUSH
49636: LD_INT 5
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 2
49645: NEG
49646: PUSH
49647: LD_INT 3
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 3
49656: NEG
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 3
49667: NEG
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 2
49679: NEG
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 2
49690: NEG
49691: PUSH
49692: LD_INT 1
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 3
49701: NEG
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 4
49712: NEG
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 4
49723: NEG
49724: PUSH
49725: LD_INT 1
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 4
49735: NEG
49736: PUSH
49737: LD_INT 2
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 2
49747: NEG
49748: PUSH
49749: LD_INT 2
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 4
49758: NEG
49759: PUSH
49760: LD_INT 4
49762: NEG
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 4
49770: NEG
49771: PUSH
49772: LD_INT 5
49774: NEG
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 3
49782: NEG
49783: PUSH
49784: LD_INT 4
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 3
49794: NEG
49795: PUSH
49796: LD_INT 3
49798: NEG
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 4
49806: NEG
49807: PUSH
49808: LD_INT 3
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 5
49818: NEG
49819: PUSH
49820: LD_INT 4
49822: NEG
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 5
49830: NEG
49831: PUSH
49832: LD_INT 5
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 3
49842: NEG
49843: PUSH
49844: LD_INT 5
49846: NEG
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 5
49854: NEG
49855: PUSH
49856: LD_INT 3
49858: NEG
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49911: LD_ADDR_VAR 0 30
49915: PUSH
49916: LD_INT 4
49918: PUSH
49919: LD_INT 4
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 4
49928: PUSH
49929: LD_INT 3
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 5
49938: PUSH
49939: LD_INT 4
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 5
49948: PUSH
49949: LD_INT 5
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 4
49958: PUSH
49959: LD_INT 5
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 3
49968: PUSH
49969: LD_INT 4
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 3
49978: PUSH
49979: LD_INT 3
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 5
49988: PUSH
49989: LD_INT 3
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 3
49998: PUSH
49999: LD_INT 5
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: LD_INT 3
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 0
50018: PUSH
50019: LD_INT 2
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 1
50028: PUSH
50029: LD_INT 3
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: LD_INT 4
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: LD_INT 4
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: LD_INT 3
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: NEG
50070: PUSH
50071: LD_INT 2
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 2
50080: PUSH
50081: LD_INT 4
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 2
50090: NEG
50091: PUSH
50092: LD_INT 2
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 4
50101: NEG
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 4
50112: NEG
50113: PUSH
50114: LD_INT 1
50116: NEG
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 3
50124: NEG
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 3
50135: NEG
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 4
50146: NEG
50147: PUSH
50148: LD_INT 1
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 5
50157: NEG
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 5
50168: NEG
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 5
50180: NEG
50181: PUSH
50182: LD_INT 2
50184: NEG
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 3
50192: NEG
50193: PUSH
50194: LD_INT 2
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 3
50203: NEG
50204: PUSH
50205: LD_INT 3
50207: NEG
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 3
50215: NEG
50216: PUSH
50217: LD_INT 4
50219: NEG
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 2
50227: NEG
50228: PUSH
50229: LD_INT 3
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 2
50239: NEG
50240: PUSH
50241: LD_INT 2
50243: NEG
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 3
50251: NEG
50252: PUSH
50253: LD_INT 2
50255: NEG
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 4
50263: NEG
50264: PUSH
50265: LD_INT 3
50267: NEG
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 4
50275: NEG
50276: PUSH
50277: LD_INT 4
50279: NEG
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 2
50287: NEG
50288: PUSH
50289: LD_INT 4
50291: NEG
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 4
50299: NEG
50300: PUSH
50301: LD_INT 2
50303: NEG
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: LD_INT 4
50314: NEG
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: LD_INT 5
50325: NEG
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: LD_INT 4
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 1
50344: PUSH
50345: LD_INT 3
50347: NEG
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: LD_INT 3
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: NEG
50367: PUSH
50368: LD_INT 4
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: LD_INT 5
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 2
50390: PUSH
50391: LD_INT 3
50393: NEG
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 2
50401: NEG
50402: PUSH
50403: LD_INT 5
50405: NEG
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50458: LD_ADDR_VAR 0 31
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: LD_INT 4
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: LD_INT 3
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: LD_INT 4
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 1
50495: PUSH
50496: LD_INT 5
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: LD_INT 5
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: LD_INT 4
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 1
50526: NEG
50527: PUSH
50528: LD_INT 3
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 2
50537: PUSH
50538: LD_INT 5
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 2
50547: NEG
50548: PUSH
50549: LD_INT 3
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 3
50558: NEG
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 3
50569: NEG
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 2
50581: NEG
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 2
50592: NEG
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 3
50603: NEG
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 4
50614: NEG
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 4
50625: NEG
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 4
50637: NEG
50638: PUSH
50639: LD_INT 2
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 2
50649: NEG
50650: PUSH
50651: LD_INT 2
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 4
50660: NEG
50661: PUSH
50662: LD_INT 4
50664: NEG
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 4
50672: NEG
50673: PUSH
50674: LD_INT 5
50676: NEG
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 3
50684: NEG
50685: PUSH
50686: LD_INT 4
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 3
50696: NEG
50697: PUSH
50698: LD_INT 3
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 4
50708: NEG
50709: PUSH
50710: LD_INT 3
50712: NEG
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 5
50720: NEG
50721: PUSH
50722: LD_INT 4
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 5
50732: NEG
50733: PUSH
50734: LD_INT 5
50736: NEG
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 3
50744: NEG
50745: PUSH
50746: LD_INT 5
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 5
50756: NEG
50757: PUSH
50758: LD_INT 3
50760: NEG
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 0
50768: PUSH
50769: LD_INT 3
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: LD_INT 4
50782: NEG
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 1
50790: PUSH
50791: LD_INT 3
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: LD_INT 2
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: LD_INT 2
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 1
50823: NEG
50824: PUSH
50825: LD_INT 3
50827: NEG
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 1
50835: NEG
50836: PUSH
50837: LD_INT 4
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 2
50847: PUSH
50848: LD_INT 2
50850: NEG
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 2
50858: NEG
50859: PUSH
50860: LD_INT 4
50862: NEG
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 4
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 4
50880: PUSH
50881: LD_INT 1
50883: NEG
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 5
50891: PUSH
50892: LD_INT 0
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 5
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 4
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 3
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 3
50931: PUSH
50932: LD_INT 1
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 3
50942: PUSH
50943: LD_INT 2
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 5
50953: PUSH
50954: LD_INT 2
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51008: LD_ADDR_VAR 0 32
51012: PUSH
51013: LD_INT 4
51015: NEG
51016: PUSH
51017: LD_INT 0
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 4
51026: NEG
51027: PUSH
51028: LD_INT 1
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 3
51038: NEG
51039: PUSH
51040: LD_INT 0
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 3
51049: NEG
51050: PUSH
51051: LD_INT 1
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 4
51060: NEG
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 5
51071: NEG
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 5
51082: NEG
51083: PUSH
51084: LD_INT 1
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 5
51094: NEG
51095: PUSH
51096: LD_INT 2
51098: NEG
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 3
51106: NEG
51107: PUSH
51108: LD_INT 2
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 3
51117: NEG
51118: PUSH
51119: LD_INT 3
51121: NEG
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 3
51129: NEG
51130: PUSH
51131: LD_INT 4
51133: NEG
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 2
51141: NEG
51142: PUSH
51143: LD_INT 3
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 2
51153: NEG
51154: PUSH
51155: LD_INT 2
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 3
51165: NEG
51166: PUSH
51167: LD_INT 2
51169: NEG
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 4
51177: NEG
51178: PUSH
51179: LD_INT 3
51181: NEG
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 4
51189: NEG
51190: PUSH
51191: LD_INT 4
51193: NEG
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 2
51201: NEG
51202: PUSH
51203: LD_INT 4
51205: NEG
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 4
51213: NEG
51214: PUSH
51215: LD_INT 2
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: LD_INT 4
51228: NEG
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 0
51236: PUSH
51237: LD_INT 5
51239: NEG
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: LD_INT 4
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 1
51258: PUSH
51259: LD_INT 3
51261: NEG
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 0
51269: PUSH
51270: LD_INT 3
51272: NEG
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 1
51280: NEG
51281: PUSH
51282: LD_INT 4
51284: NEG
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: LD_INT 5
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 2
51304: PUSH
51305: LD_INT 3
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 2
51315: NEG
51316: PUSH
51317: LD_INT 5
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 3
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 3
51337: PUSH
51338: LD_INT 1
51340: NEG
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 4
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 4
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 3
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 2
51378: PUSH
51379: LD_INT 0
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 2
51388: PUSH
51389: LD_INT 1
51391: NEG
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 2
51399: PUSH
51400: LD_INT 2
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 4
51410: PUSH
51411: LD_INT 2
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 4
51420: PUSH
51421: LD_INT 4
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 4
51430: PUSH
51431: LD_INT 3
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 5
51440: PUSH
51441: LD_INT 4
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 5
51450: PUSH
51451: LD_INT 5
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 4
51460: PUSH
51461: LD_INT 5
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 3
51470: PUSH
51471: LD_INT 4
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 3
51480: PUSH
51481: LD_INT 3
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 5
51490: PUSH
51491: LD_INT 3
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 3
51500: PUSH
51501: LD_INT 5
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51555: LD_ADDR_VAR 0 33
51559: PUSH
51560: LD_INT 4
51562: NEG
51563: PUSH
51564: LD_INT 4
51566: NEG
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 4
51574: NEG
51575: PUSH
51576: LD_INT 5
51578: NEG
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 3
51586: NEG
51587: PUSH
51588: LD_INT 4
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 3
51598: NEG
51599: PUSH
51600: LD_INT 3
51602: NEG
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 4
51610: NEG
51611: PUSH
51612: LD_INT 3
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 5
51622: NEG
51623: PUSH
51624: LD_INT 4
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 5
51634: NEG
51635: PUSH
51636: LD_INT 5
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 3
51646: NEG
51647: PUSH
51648: LD_INT 5
51650: NEG
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 5
51658: NEG
51659: PUSH
51660: LD_INT 3
51662: NEG
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: LD_INT 3
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: LD_INT 4
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: LD_INT 3
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 1
51703: PUSH
51704: LD_INT 2
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: LD_INT 2
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: LD_INT 3
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: LD_INT 4
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 2
51749: PUSH
51750: LD_INT 2
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 2
51760: NEG
51761: PUSH
51762: LD_INT 4
51764: NEG
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 4
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 4
51782: PUSH
51783: LD_INT 1
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 5
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 5
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 4
51813: PUSH
51814: LD_INT 1
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 3
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 3
51833: PUSH
51834: LD_INT 1
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 3
51844: PUSH
51845: LD_INT 2
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 5
51855: PUSH
51856: LD_INT 2
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 3
51865: PUSH
51866: LD_INT 3
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 3
51875: PUSH
51876: LD_INT 2
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 4
51885: PUSH
51886: LD_INT 3
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 4
51895: PUSH
51896: LD_INT 4
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 3
51905: PUSH
51906: LD_INT 4
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 2
51915: PUSH
51916: LD_INT 3
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 2
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 4
51935: PUSH
51936: LD_INT 2
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 2
51945: PUSH
51946: LD_INT 4
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: LD_INT 4
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: LD_INT 3
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: LD_INT 4
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 1
51985: PUSH
51986: LD_INT 5
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: LD_INT 5
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: LD_INT 4
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: LD_INT 3
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 2
52027: PUSH
52028: LD_INT 5
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 2
52037: NEG
52038: PUSH
52039: LD_INT 3
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52093: LD_ADDR_VAR 0 34
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: LD_INT 4
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: LD_INT 5
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: LD_INT 4
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: LD_INT 3
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 0
52144: PUSH
52145: LD_INT 3
52147: NEG
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: LD_INT 4
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: LD_INT 5
52171: NEG
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 2
52179: PUSH
52180: LD_INT 3
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 2
52190: NEG
52191: PUSH
52192: LD_INT 5
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 3
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 3
52212: PUSH
52213: LD_INT 1
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 4
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 4
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 3
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 2
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: LD_INT 1
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 2
52274: PUSH
52275: LD_INT 2
52277: NEG
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 4
52285: PUSH
52286: LD_INT 2
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 4
52295: PUSH
52296: LD_INT 4
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 4
52305: PUSH
52306: LD_INT 3
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 5
52315: PUSH
52316: LD_INT 4
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 5
52325: PUSH
52326: LD_INT 5
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 4
52335: PUSH
52336: LD_INT 5
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 3
52345: PUSH
52346: LD_INT 4
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 3
52355: PUSH
52356: LD_INT 3
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 5
52365: PUSH
52366: LD_INT 3
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 3
52375: PUSH
52376: LD_INT 5
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: LD_INT 3
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: LD_INT 2
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: LD_INT 3
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: PUSH
52416: LD_INT 4
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: LD_INT 4
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 1
52435: NEG
52436: PUSH
52437: LD_INT 3
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: NEG
52447: PUSH
52448: LD_INT 2
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 2
52457: PUSH
52458: LD_INT 4
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 2
52467: NEG
52468: PUSH
52469: LD_INT 2
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 4
52478: NEG
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 4
52489: NEG
52490: PUSH
52491: LD_INT 1
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 3
52501: NEG
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 3
52512: NEG
52513: PUSH
52514: LD_INT 1
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 4
52523: NEG
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 5
52534: NEG
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 5
52545: NEG
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 5
52557: NEG
52558: PUSH
52559: LD_INT 2
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 3
52569: NEG
52570: PUSH
52571: LD_INT 2
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: ST_TO_ADDR
// end ; end ;
52625: GO 52628
52627: POP
// case btype of b_depot , b_warehouse :
52628: LD_VAR 0 1
52632: PUSH
52633: LD_INT 0
52635: DOUBLE
52636: EQUAL
52637: IFTRUE 52647
52639: LD_INT 1
52641: DOUBLE
52642: EQUAL
52643: IFTRUE 52647
52645: GO 52848
52647: POP
// case nation of nation_american :
52648: LD_VAR 0 5
52652: PUSH
52653: LD_INT 1
52655: DOUBLE
52656: EQUAL
52657: IFTRUE 52661
52659: GO 52717
52661: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52662: LD_ADDR_VAR 0 9
52666: PUSH
52667: LD_VAR 0 11
52671: PUSH
52672: LD_VAR 0 12
52676: PUSH
52677: LD_VAR 0 13
52681: PUSH
52682: LD_VAR 0 14
52686: PUSH
52687: LD_VAR 0 15
52691: PUSH
52692: LD_VAR 0 16
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: PUSH
52705: LD_VAR 0 4
52709: PUSH
52710: LD_INT 1
52712: PLUS
52713: ARRAY
52714: ST_TO_ADDR
52715: GO 52846
52717: LD_INT 2
52719: DOUBLE
52720: EQUAL
52721: IFTRUE 52725
52723: GO 52781
52725: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52726: LD_ADDR_VAR 0 9
52730: PUSH
52731: LD_VAR 0 17
52735: PUSH
52736: LD_VAR 0 18
52740: PUSH
52741: LD_VAR 0 19
52745: PUSH
52746: LD_VAR 0 20
52750: PUSH
52751: LD_VAR 0 21
52755: PUSH
52756: LD_VAR 0 22
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: PUSH
52769: LD_VAR 0 4
52773: PUSH
52774: LD_INT 1
52776: PLUS
52777: ARRAY
52778: ST_TO_ADDR
52779: GO 52846
52781: LD_INT 3
52783: DOUBLE
52784: EQUAL
52785: IFTRUE 52789
52787: GO 52845
52789: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52790: LD_ADDR_VAR 0 9
52794: PUSH
52795: LD_VAR 0 23
52799: PUSH
52800: LD_VAR 0 24
52804: PUSH
52805: LD_VAR 0 25
52809: PUSH
52810: LD_VAR 0 26
52814: PUSH
52815: LD_VAR 0 27
52819: PUSH
52820: LD_VAR 0 28
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: PUSH
52833: LD_VAR 0 4
52837: PUSH
52838: LD_INT 1
52840: PLUS
52841: ARRAY
52842: ST_TO_ADDR
52843: GO 52846
52845: POP
52846: GO 53401
52848: LD_INT 2
52850: DOUBLE
52851: EQUAL
52852: IFTRUE 52862
52854: LD_INT 3
52856: DOUBLE
52857: EQUAL
52858: IFTRUE 52862
52860: GO 52918
52862: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52863: LD_ADDR_VAR 0 9
52867: PUSH
52868: LD_VAR 0 29
52872: PUSH
52873: LD_VAR 0 30
52877: PUSH
52878: LD_VAR 0 31
52882: PUSH
52883: LD_VAR 0 32
52887: PUSH
52888: LD_VAR 0 33
52892: PUSH
52893: LD_VAR 0 34
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: PUSH
52906: LD_VAR 0 4
52910: PUSH
52911: LD_INT 1
52913: PLUS
52914: ARRAY
52915: ST_TO_ADDR
52916: GO 53401
52918: LD_INT 16
52920: DOUBLE
52921: EQUAL
52922: IFTRUE 52980
52924: LD_INT 17
52926: DOUBLE
52927: EQUAL
52928: IFTRUE 52980
52930: LD_INT 18
52932: DOUBLE
52933: EQUAL
52934: IFTRUE 52980
52936: LD_INT 19
52938: DOUBLE
52939: EQUAL
52940: IFTRUE 52980
52942: LD_INT 22
52944: DOUBLE
52945: EQUAL
52946: IFTRUE 52980
52948: LD_INT 20
52950: DOUBLE
52951: EQUAL
52952: IFTRUE 52980
52954: LD_INT 21
52956: DOUBLE
52957: EQUAL
52958: IFTRUE 52980
52960: LD_INT 23
52962: DOUBLE
52963: EQUAL
52964: IFTRUE 52980
52966: LD_INT 24
52968: DOUBLE
52969: EQUAL
52970: IFTRUE 52980
52972: LD_INT 25
52974: DOUBLE
52975: EQUAL
52976: IFTRUE 52980
52978: GO 53036
52980: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52981: LD_ADDR_VAR 0 9
52985: PUSH
52986: LD_VAR 0 35
52990: PUSH
52991: LD_VAR 0 36
52995: PUSH
52996: LD_VAR 0 37
53000: PUSH
53001: LD_VAR 0 38
53005: PUSH
53006: LD_VAR 0 39
53010: PUSH
53011: LD_VAR 0 40
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: PUSH
53024: LD_VAR 0 4
53028: PUSH
53029: LD_INT 1
53031: PLUS
53032: ARRAY
53033: ST_TO_ADDR
53034: GO 53401
53036: LD_INT 6
53038: DOUBLE
53039: EQUAL
53040: IFTRUE 53092
53042: LD_INT 7
53044: DOUBLE
53045: EQUAL
53046: IFTRUE 53092
53048: LD_INT 8
53050: DOUBLE
53051: EQUAL
53052: IFTRUE 53092
53054: LD_INT 13
53056: DOUBLE
53057: EQUAL
53058: IFTRUE 53092
53060: LD_INT 12
53062: DOUBLE
53063: EQUAL
53064: IFTRUE 53092
53066: LD_INT 15
53068: DOUBLE
53069: EQUAL
53070: IFTRUE 53092
53072: LD_INT 11
53074: DOUBLE
53075: EQUAL
53076: IFTRUE 53092
53078: LD_INT 14
53080: DOUBLE
53081: EQUAL
53082: IFTRUE 53092
53084: LD_INT 10
53086: DOUBLE
53087: EQUAL
53088: IFTRUE 53092
53090: GO 53148
53092: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53093: LD_ADDR_VAR 0 9
53097: PUSH
53098: LD_VAR 0 41
53102: PUSH
53103: LD_VAR 0 42
53107: PUSH
53108: LD_VAR 0 43
53112: PUSH
53113: LD_VAR 0 44
53117: PUSH
53118: LD_VAR 0 45
53122: PUSH
53123: LD_VAR 0 46
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: PUSH
53136: LD_VAR 0 4
53140: PUSH
53141: LD_INT 1
53143: PLUS
53144: ARRAY
53145: ST_TO_ADDR
53146: GO 53401
53148: LD_INT 36
53150: DOUBLE
53151: EQUAL
53152: IFTRUE 53156
53154: GO 53212
53156: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53157: LD_ADDR_VAR 0 9
53161: PUSH
53162: LD_VAR 0 47
53166: PUSH
53167: LD_VAR 0 48
53171: PUSH
53172: LD_VAR 0 49
53176: PUSH
53177: LD_VAR 0 50
53181: PUSH
53182: LD_VAR 0 51
53186: PUSH
53187: LD_VAR 0 52
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: PUSH
53200: LD_VAR 0 4
53204: PUSH
53205: LD_INT 1
53207: PLUS
53208: ARRAY
53209: ST_TO_ADDR
53210: GO 53401
53212: LD_INT 4
53214: DOUBLE
53215: EQUAL
53216: IFTRUE 53238
53218: LD_INT 5
53220: DOUBLE
53221: EQUAL
53222: IFTRUE 53238
53224: LD_INT 34
53226: DOUBLE
53227: EQUAL
53228: IFTRUE 53238
53230: LD_INT 37
53232: DOUBLE
53233: EQUAL
53234: IFTRUE 53238
53236: GO 53294
53238: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53239: LD_ADDR_VAR 0 9
53243: PUSH
53244: LD_VAR 0 53
53248: PUSH
53249: LD_VAR 0 54
53253: PUSH
53254: LD_VAR 0 55
53258: PUSH
53259: LD_VAR 0 56
53263: PUSH
53264: LD_VAR 0 57
53268: PUSH
53269: LD_VAR 0 58
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: PUSH
53282: LD_VAR 0 4
53286: PUSH
53287: LD_INT 1
53289: PLUS
53290: ARRAY
53291: ST_TO_ADDR
53292: GO 53401
53294: LD_INT 31
53296: DOUBLE
53297: EQUAL
53298: IFTRUE 53344
53300: LD_INT 32
53302: DOUBLE
53303: EQUAL
53304: IFTRUE 53344
53306: LD_INT 33
53308: DOUBLE
53309: EQUAL
53310: IFTRUE 53344
53312: LD_INT 27
53314: DOUBLE
53315: EQUAL
53316: IFTRUE 53344
53318: LD_INT 26
53320: DOUBLE
53321: EQUAL
53322: IFTRUE 53344
53324: LD_INT 28
53326: DOUBLE
53327: EQUAL
53328: IFTRUE 53344
53330: LD_INT 29
53332: DOUBLE
53333: EQUAL
53334: IFTRUE 53344
53336: LD_INT 30
53338: DOUBLE
53339: EQUAL
53340: IFTRUE 53344
53342: GO 53400
53344: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53345: LD_ADDR_VAR 0 9
53349: PUSH
53350: LD_VAR 0 59
53354: PUSH
53355: LD_VAR 0 60
53359: PUSH
53360: LD_VAR 0 61
53364: PUSH
53365: LD_VAR 0 62
53369: PUSH
53370: LD_VAR 0 63
53374: PUSH
53375: LD_VAR 0 64
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: PUSH
53388: LD_VAR 0 4
53392: PUSH
53393: LD_INT 1
53395: PLUS
53396: ARRAY
53397: ST_TO_ADDR
53398: GO 53401
53400: POP
// temp_list2 = [ ] ;
53401: LD_ADDR_VAR 0 10
53405: PUSH
53406: EMPTY
53407: ST_TO_ADDR
// for i in temp_list do
53408: LD_ADDR_VAR 0 8
53412: PUSH
53413: LD_VAR 0 9
53417: PUSH
53418: FOR_IN
53419: IFFALSE 53471
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53421: LD_ADDR_VAR 0 10
53425: PUSH
53426: LD_VAR 0 10
53430: PUSH
53431: LD_VAR 0 8
53435: PUSH
53436: LD_INT 1
53438: ARRAY
53439: PUSH
53440: LD_VAR 0 2
53444: PLUS
53445: PUSH
53446: LD_VAR 0 8
53450: PUSH
53451: LD_INT 2
53453: ARRAY
53454: PUSH
53455: LD_VAR 0 3
53459: PLUS
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: EMPTY
53466: LIST
53467: ADD
53468: ST_TO_ADDR
53469: GO 53418
53471: POP
53472: POP
// result = temp_list2 ;
53473: LD_ADDR_VAR 0 7
53477: PUSH
53478: LD_VAR 0 10
53482: ST_TO_ADDR
// end ;
53483: LD_VAR 0 7
53487: RET
// export function EnemyInRange ( unit , dist ) ; begin
53488: LD_INT 0
53490: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53491: LD_ADDR_VAR 0 3
53495: PUSH
53496: LD_VAR 0 1
53500: PPUSH
53501: CALL_OW 255
53505: PPUSH
53506: LD_VAR 0 1
53510: PPUSH
53511: CALL_OW 250
53515: PPUSH
53516: LD_VAR 0 1
53520: PPUSH
53521: CALL_OW 251
53525: PPUSH
53526: LD_VAR 0 2
53530: PPUSH
53531: CALL 27259 0 4
53535: PUSH
53536: LD_INT 4
53538: ARRAY
53539: ST_TO_ADDR
// end ;
53540: LD_VAR 0 3
53544: RET
// export function PlayerSeeMe ( unit ) ; begin
53545: LD_INT 0
53547: PPUSH
// result := See ( your_side , unit ) ;
53548: LD_ADDR_VAR 0 2
53552: PUSH
53553: LD_OWVAR 2
53557: PPUSH
53558: LD_VAR 0 1
53562: PPUSH
53563: CALL_OW 292
53567: ST_TO_ADDR
// end ;
53568: LD_VAR 0 2
53572: RET
// export function ReverseDir ( unit ) ; begin
53573: LD_INT 0
53575: PPUSH
// if not unit then
53576: LD_VAR 0 1
53580: NOT
53581: IFFALSE 53585
// exit ;
53583: GO 53608
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53585: LD_ADDR_VAR 0 2
53589: PUSH
53590: LD_VAR 0 1
53594: PPUSH
53595: CALL_OW 254
53599: PUSH
53600: LD_INT 3
53602: PLUS
53603: PUSH
53604: LD_INT 6
53606: MOD
53607: ST_TO_ADDR
// end ;
53608: LD_VAR 0 2
53612: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53613: LD_INT 0
53615: PPUSH
53616: PPUSH
53617: PPUSH
53618: PPUSH
53619: PPUSH
// if not hexes then
53620: LD_VAR 0 2
53624: NOT
53625: IFFALSE 53629
// exit ;
53627: GO 53777
// dist := 9999 ;
53629: LD_ADDR_VAR 0 5
53633: PUSH
53634: LD_INT 9999
53636: ST_TO_ADDR
// for i = 1 to hexes do
53637: LD_ADDR_VAR 0 4
53641: PUSH
53642: DOUBLE
53643: LD_INT 1
53645: DEC
53646: ST_TO_ADDR
53647: LD_VAR 0 2
53651: PUSH
53652: FOR_TO
53653: IFFALSE 53765
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53655: LD_VAR 0 1
53659: PPUSH
53660: LD_VAR 0 2
53664: PUSH
53665: LD_VAR 0 4
53669: ARRAY
53670: PUSH
53671: LD_INT 1
53673: ARRAY
53674: PPUSH
53675: LD_VAR 0 2
53679: PUSH
53680: LD_VAR 0 4
53684: ARRAY
53685: PUSH
53686: LD_INT 2
53688: ARRAY
53689: PPUSH
53690: CALL_OW 297
53694: PUSH
53695: LD_VAR 0 5
53699: LESS
53700: IFFALSE 53763
// begin hex := hexes [ i ] ;
53702: LD_ADDR_VAR 0 7
53706: PUSH
53707: LD_VAR 0 2
53711: PUSH
53712: LD_VAR 0 4
53716: ARRAY
53717: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53718: LD_ADDR_VAR 0 5
53722: PUSH
53723: LD_VAR 0 1
53727: PPUSH
53728: LD_VAR 0 2
53732: PUSH
53733: LD_VAR 0 4
53737: ARRAY
53738: PUSH
53739: LD_INT 1
53741: ARRAY
53742: PPUSH
53743: LD_VAR 0 2
53747: PUSH
53748: LD_VAR 0 4
53752: ARRAY
53753: PUSH
53754: LD_INT 2
53756: ARRAY
53757: PPUSH
53758: CALL_OW 297
53762: ST_TO_ADDR
// end ; end ;
53763: GO 53652
53765: POP
53766: POP
// result := hex ;
53767: LD_ADDR_VAR 0 3
53771: PUSH
53772: LD_VAR 0 7
53776: ST_TO_ADDR
// end ;
53777: LD_VAR 0 3
53781: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53782: LD_INT 0
53784: PPUSH
53785: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53786: LD_VAR 0 1
53790: NOT
53791: PUSH
53792: LD_VAR 0 1
53796: PUSH
53797: LD_INT 21
53799: PUSH
53800: LD_INT 2
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 23
53809: PUSH
53810: LD_INT 2
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PPUSH
53821: CALL_OW 69
53825: IN
53826: NOT
53827: OR
53828: IFFALSE 53832
// exit ;
53830: GO 53879
// for i = 1 to 3 do
53832: LD_ADDR_VAR 0 3
53836: PUSH
53837: DOUBLE
53838: LD_INT 1
53840: DEC
53841: ST_TO_ADDR
53842: LD_INT 3
53844: PUSH
53845: FOR_TO
53846: IFFALSE 53877
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53848: LD_VAR 0 1
53852: PPUSH
53853: CALL_OW 250
53857: PPUSH
53858: LD_VAR 0 1
53862: PPUSH
53863: CALL_OW 251
53867: PPUSH
53868: LD_INT 1
53870: PPUSH
53871: CALL_OW 453
53875: GO 53845
53877: POP
53878: POP
// end ;
53879: LD_VAR 0 2
53883: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53884: LD_INT 0
53886: PPUSH
53887: PPUSH
53888: PPUSH
53889: PPUSH
53890: PPUSH
53891: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53892: LD_VAR 0 1
53896: NOT
53897: PUSH
53898: LD_VAR 0 2
53902: NOT
53903: OR
53904: PUSH
53905: LD_VAR 0 1
53909: PPUSH
53910: CALL_OW 314
53914: OR
53915: IFFALSE 53919
// exit ;
53917: GO 54360
// x := GetX ( enemy_unit ) ;
53919: LD_ADDR_VAR 0 7
53923: PUSH
53924: LD_VAR 0 2
53928: PPUSH
53929: CALL_OW 250
53933: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53934: LD_ADDR_VAR 0 8
53938: PUSH
53939: LD_VAR 0 2
53943: PPUSH
53944: CALL_OW 251
53948: ST_TO_ADDR
// if not x or not y then
53949: LD_VAR 0 7
53953: NOT
53954: PUSH
53955: LD_VAR 0 8
53959: NOT
53960: OR
53961: IFFALSE 53965
// exit ;
53963: GO 54360
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53965: LD_ADDR_VAR 0 6
53969: PUSH
53970: LD_VAR 0 7
53974: PPUSH
53975: LD_INT 0
53977: PPUSH
53978: LD_INT 4
53980: PPUSH
53981: CALL_OW 272
53985: PUSH
53986: LD_VAR 0 8
53990: PPUSH
53991: LD_INT 0
53993: PPUSH
53994: LD_INT 4
53996: PPUSH
53997: CALL_OW 273
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_VAR 0 7
54010: PPUSH
54011: LD_INT 1
54013: PPUSH
54014: LD_INT 4
54016: PPUSH
54017: CALL_OW 272
54021: PUSH
54022: LD_VAR 0 8
54026: PPUSH
54027: LD_INT 1
54029: PPUSH
54030: LD_INT 4
54032: PPUSH
54033: CALL_OW 273
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_VAR 0 7
54046: PPUSH
54047: LD_INT 2
54049: PPUSH
54050: LD_INT 4
54052: PPUSH
54053: CALL_OW 272
54057: PUSH
54058: LD_VAR 0 8
54062: PPUSH
54063: LD_INT 2
54065: PPUSH
54066: LD_INT 4
54068: PPUSH
54069: CALL_OW 273
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_VAR 0 7
54082: PPUSH
54083: LD_INT 3
54085: PPUSH
54086: LD_INT 4
54088: PPUSH
54089: CALL_OW 272
54093: PUSH
54094: LD_VAR 0 8
54098: PPUSH
54099: LD_INT 3
54101: PPUSH
54102: LD_INT 4
54104: PPUSH
54105: CALL_OW 273
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_VAR 0 7
54118: PPUSH
54119: LD_INT 4
54121: PPUSH
54122: LD_INT 4
54124: PPUSH
54125: CALL_OW 272
54129: PUSH
54130: LD_VAR 0 8
54134: PPUSH
54135: LD_INT 4
54137: PPUSH
54138: LD_INT 4
54140: PPUSH
54141: CALL_OW 273
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_VAR 0 7
54154: PPUSH
54155: LD_INT 5
54157: PPUSH
54158: LD_INT 4
54160: PPUSH
54161: CALL_OW 272
54165: PUSH
54166: LD_VAR 0 8
54170: PPUSH
54171: LD_INT 5
54173: PPUSH
54174: LD_INT 4
54176: PPUSH
54177: CALL_OW 273
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: ST_TO_ADDR
// for i = tmp downto 1 do
54194: LD_ADDR_VAR 0 4
54198: PUSH
54199: DOUBLE
54200: LD_VAR 0 6
54204: INC
54205: ST_TO_ADDR
54206: LD_INT 1
54208: PUSH
54209: FOR_DOWNTO
54210: IFFALSE 54311
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54212: LD_VAR 0 6
54216: PUSH
54217: LD_VAR 0 4
54221: ARRAY
54222: PUSH
54223: LD_INT 1
54225: ARRAY
54226: PPUSH
54227: LD_VAR 0 6
54231: PUSH
54232: LD_VAR 0 4
54236: ARRAY
54237: PUSH
54238: LD_INT 2
54240: ARRAY
54241: PPUSH
54242: CALL_OW 488
54246: NOT
54247: PUSH
54248: LD_VAR 0 6
54252: PUSH
54253: LD_VAR 0 4
54257: ARRAY
54258: PUSH
54259: LD_INT 1
54261: ARRAY
54262: PPUSH
54263: LD_VAR 0 6
54267: PUSH
54268: LD_VAR 0 4
54272: ARRAY
54273: PUSH
54274: LD_INT 2
54276: ARRAY
54277: PPUSH
54278: CALL_OW 428
54282: PUSH
54283: LD_INT 0
54285: NONEQUAL
54286: OR
54287: IFFALSE 54309
// tmp := Delete ( tmp , i ) ;
54289: LD_ADDR_VAR 0 6
54293: PUSH
54294: LD_VAR 0 6
54298: PPUSH
54299: LD_VAR 0 4
54303: PPUSH
54304: CALL_OW 3
54308: ST_TO_ADDR
54309: GO 54209
54311: POP
54312: POP
// j := GetClosestHex ( unit , tmp ) ;
54313: LD_ADDR_VAR 0 5
54317: PUSH
54318: LD_VAR 0 1
54322: PPUSH
54323: LD_VAR 0 6
54327: PPUSH
54328: CALL 53613 0 2
54332: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54333: LD_VAR 0 1
54337: PPUSH
54338: LD_VAR 0 5
54342: PUSH
54343: LD_INT 1
54345: ARRAY
54346: PPUSH
54347: LD_VAR 0 5
54351: PUSH
54352: LD_INT 2
54354: ARRAY
54355: PPUSH
54356: CALL_OW 111
// end ;
54360: LD_VAR 0 3
54364: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54365: LD_INT 0
54367: PPUSH
54368: PPUSH
54369: PPUSH
// uc_side = 0 ;
54370: LD_ADDR_OWVAR 20
54374: PUSH
54375: LD_INT 0
54377: ST_TO_ADDR
// uc_nation = 0 ;
54378: LD_ADDR_OWVAR 21
54382: PUSH
54383: LD_INT 0
54385: ST_TO_ADDR
// InitHc_All ( ) ;
54386: CALL_OW 584
// InitVc ;
54390: CALL_OW 20
// if mastodonts then
54394: LD_VAR 0 6
54398: IFFALSE 54465
// for i = 1 to mastodonts do
54400: LD_ADDR_VAR 0 11
54404: PUSH
54405: DOUBLE
54406: LD_INT 1
54408: DEC
54409: ST_TO_ADDR
54410: LD_VAR 0 6
54414: PUSH
54415: FOR_TO
54416: IFFALSE 54463
// begin vc_chassis := 31 ;
54418: LD_ADDR_OWVAR 37
54422: PUSH
54423: LD_INT 31
54425: ST_TO_ADDR
// vc_control := control_rider ;
54426: LD_ADDR_OWVAR 38
54430: PUSH
54431: LD_INT 4
54433: ST_TO_ADDR
// animal := CreateVehicle ;
54434: LD_ADDR_VAR 0 12
54438: PUSH
54439: CALL_OW 45
54443: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54444: LD_VAR 0 12
54448: PPUSH
54449: LD_VAR 0 8
54453: PPUSH
54454: LD_INT 0
54456: PPUSH
54457: CALL 56653 0 3
// end ;
54461: GO 54415
54463: POP
54464: POP
// if horses then
54465: LD_VAR 0 5
54469: IFFALSE 54536
// for i = 1 to horses do
54471: LD_ADDR_VAR 0 11
54475: PUSH
54476: DOUBLE
54477: LD_INT 1
54479: DEC
54480: ST_TO_ADDR
54481: LD_VAR 0 5
54485: PUSH
54486: FOR_TO
54487: IFFALSE 54534
// begin hc_class := 21 ;
54489: LD_ADDR_OWVAR 28
54493: PUSH
54494: LD_INT 21
54496: ST_TO_ADDR
// hc_gallery :=  ;
54497: LD_ADDR_OWVAR 33
54501: PUSH
54502: LD_STRING 
54504: ST_TO_ADDR
// animal := CreateHuman ;
54505: LD_ADDR_VAR 0 12
54509: PUSH
54510: CALL_OW 44
54514: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54515: LD_VAR 0 12
54519: PPUSH
54520: LD_VAR 0 8
54524: PPUSH
54525: LD_INT 0
54527: PPUSH
54528: CALL 56653 0 3
// end ;
54532: GO 54486
54534: POP
54535: POP
// if birds then
54536: LD_VAR 0 1
54540: IFFALSE 54607
// for i = 1 to birds do
54542: LD_ADDR_VAR 0 11
54546: PUSH
54547: DOUBLE
54548: LD_INT 1
54550: DEC
54551: ST_TO_ADDR
54552: LD_VAR 0 1
54556: PUSH
54557: FOR_TO
54558: IFFALSE 54605
// begin hc_class = 18 ;
54560: LD_ADDR_OWVAR 28
54564: PUSH
54565: LD_INT 18
54567: ST_TO_ADDR
// hc_gallery =  ;
54568: LD_ADDR_OWVAR 33
54572: PUSH
54573: LD_STRING 
54575: ST_TO_ADDR
// animal := CreateHuman ;
54576: LD_ADDR_VAR 0 12
54580: PUSH
54581: CALL_OW 44
54585: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54586: LD_VAR 0 12
54590: PPUSH
54591: LD_VAR 0 8
54595: PPUSH
54596: LD_INT 0
54598: PPUSH
54599: CALL 56653 0 3
// end ;
54603: GO 54557
54605: POP
54606: POP
// if tigers then
54607: LD_VAR 0 2
54611: IFFALSE 54695
// for i = 1 to tigers do
54613: LD_ADDR_VAR 0 11
54617: PUSH
54618: DOUBLE
54619: LD_INT 1
54621: DEC
54622: ST_TO_ADDR
54623: LD_VAR 0 2
54627: PUSH
54628: FOR_TO
54629: IFFALSE 54693
// begin hc_class = class_tiger ;
54631: LD_ADDR_OWVAR 28
54635: PUSH
54636: LD_INT 14
54638: ST_TO_ADDR
// hc_gallery =  ;
54639: LD_ADDR_OWVAR 33
54643: PUSH
54644: LD_STRING 
54646: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54647: LD_ADDR_OWVAR 35
54651: PUSH
54652: LD_INT 7
54654: NEG
54655: PPUSH
54656: LD_INT 7
54658: PPUSH
54659: CALL_OW 12
54663: ST_TO_ADDR
// animal := CreateHuman ;
54664: LD_ADDR_VAR 0 12
54668: PUSH
54669: CALL_OW 44
54673: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54674: LD_VAR 0 12
54678: PPUSH
54679: LD_VAR 0 8
54683: PPUSH
54684: LD_INT 0
54686: PPUSH
54687: CALL 56653 0 3
// end ;
54691: GO 54628
54693: POP
54694: POP
// if apemans then
54695: LD_VAR 0 3
54699: IFFALSE 54822
// for i = 1 to apemans do
54701: LD_ADDR_VAR 0 11
54705: PUSH
54706: DOUBLE
54707: LD_INT 1
54709: DEC
54710: ST_TO_ADDR
54711: LD_VAR 0 3
54715: PUSH
54716: FOR_TO
54717: IFFALSE 54820
// begin hc_class = class_apeman ;
54719: LD_ADDR_OWVAR 28
54723: PUSH
54724: LD_INT 12
54726: ST_TO_ADDR
// hc_gallery =  ;
54727: LD_ADDR_OWVAR 33
54731: PUSH
54732: LD_STRING 
54734: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54735: LD_ADDR_OWVAR 35
54739: PUSH
54740: LD_INT 5
54742: NEG
54743: PPUSH
54744: LD_INT 5
54746: PPUSH
54747: CALL_OW 12
54751: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54752: LD_ADDR_OWVAR 31
54756: PUSH
54757: LD_INT 1
54759: PPUSH
54760: LD_INT 3
54762: PPUSH
54763: CALL_OW 12
54767: PUSH
54768: LD_INT 1
54770: PPUSH
54771: LD_INT 3
54773: PPUSH
54774: CALL_OW 12
54778: PUSH
54779: LD_INT 0
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: ST_TO_ADDR
// animal := CreateHuman ;
54791: LD_ADDR_VAR 0 12
54795: PUSH
54796: CALL_OW 44
54800: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54801: LD_VAR 0 12
54805: PPUSH
54806: LD_VAR 0 8
54810: PPUSH
54811: LD_INT 0
54813: PPUSH
54814: CALL 56653 0 3
// end ;
54818: GO 54716
54820: POP
54821: POP
// if enchidnas then
54822: LD_VAR 0 4
54826: IFFALSE 54893
// for i = 1 to enchidnas do
54828: LD_ADDR_VAR 0 11
54832: PUSH
54833: DOUBLE
54834: LD_INT 1
54836: DEC
54837: ST_TO_ADDR
54838: LD_VAR 0 4
54842: PUSH
54843: FOR_TO
54844: IFFALSE 54891
// begin hc_class = 13 ;
54846: LD_ADDR_OWVAR 28
54850: PUSH
54851: LD_INT 13
54853: ST_TO_ADDR
// hc_gallery =  ;
54854: LD_ADDR_OWVAR 33
54858: PUSH
54859: LD_STRING 
54861: ST_TO_ADDR
// animal := CreateHuman ;
54862: LD_ADDR_VAR 0 12
54866: PUSH
54867: CALL_OW 44
54871: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54872: LD_VAR 0 12
54876: PPUSH
54877: LD_VAR 0 8
54881: PPUSH
54882: LD_INT 0
54884: PPUSH
54885: CALL 56653 0 3
// end ;
54889: GO 54843
54891: POP
54892: POP
// if fishes then
54893: LD_VAR 0 7
54897: IFFALSE 54964
// for i = 1 to fishes do
54899: LD_ADDR_VAR 0 11
54903: PUSH
54904: DOUBLE
54905: LD_INT 1
54907: DEC
54908: ST_TO_ADDR
54909: LD_VAR 0 7
54913: PUSH
54914: FOR_TO
54915: IFFALSE 54962
// begin hc_class = 20 ;
54917: LD_ADDR_OWVAR 28
54921: PUSH
54922: LD_INT 20
54924: ST_TO_ADDR
// hc_gallery =  ;
54925: LD_ADDR_OWVAR 33
54929: PUSH
54930: LD_STRING 
54932: ST_TO_ADDR
// animal := CreateHuman ;
54933: LD_ADDR_VAR 0 12
54937: PUSH
54938: CALL_OW 44
54942: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54943: LD_VAR 0 12
54947: PPUSH
54948: LD_VAR 0 9
54952: PPUSH
54953: LD_INT 0
54955: PPUSH
54956: CALL 56653 0 3
// end ;
54960: GO 54914
54962: POP
54963: POP
// end ;
54964: LD_VAR 0 10
54968: RET
// export function WantHeal ( sci , unit ) ; begin
54969: LD_INT 0
54971: PPUSH
// if GetTaskList ( sci ) > 0 then
54972: LD_VAR 0 1
54976: PPUSH
54977: CALL_OW 437
54981: PUSH
54982: LD_INT 0
54984: GREATER
54985: IFFALSE 55055
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54987: LD_VAR 0 1
54991: PPUSH
54992: CALL_OW 437
54996: PUSH
54997: LD_INT 1
54999: ARRAY
55000: PUSH
55001: LD_INT 1
55003: ARRAY
55004: PUSH
55005: LD_STRING l
55007: EQUAL
55008: PUSH
55009: LD_VAR 0 1
55013: PPUSH
55014: CALL_OW 437
55018: PUSH
55019: LD_INT 1
55021: ARRAY
55022: PUSH
55023: LD_INT 4
55025: ARRAY
55026: PUSH
55027: LD_VAR 0 2
55031: EQUAL
55032: AND
55033: IFFALSE 55045
// result := true else
55035: LD_ADDR_VAR 0 3
55039: PUSH
55040: LD_INT 1
55042: ST_TO_ADDR
55043: GO 55053
// result := false ;
55045: LD_ADDR_VAR 0 3
55049: PUSH
55050: LD_INT 0
55052: ST_TO_ADDR
// end else
55053: GO 55063
// result := false ;
55055: LD_ADDR_VAR 0 3
55059: PUSH
55060: LD_INT 0
55062: ST_TO_ADDR
// end ;
55063: LD_VAR 0 3
55067: RET
// export function HealTarget ( sci ) ; begin
55068: LD_INT 0
55070: PPUSH
// if not sci then
55071: LD_VAR 0 1
55075: NOT
55076: IFFALSE 55080
// exit ;
55078: GO 55145
// result := 0 ;
55080: LD_ADDR_VAR 0 2
55084: PUSH
55085: LD_INT 0
55087: ST_TO_ADDR
// if GetTaskList ( sci ) then
55088: LD_VAR 0 1
55092: PPUSH
55093: CALL_OW 437
55097: IFFALSE 55145
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55099: LD_VAR 0 1
55103: PPUSH
55104: CALL_OW 437
55108: PUSH
55109: LD_INT 1
55111: ARRAY
55112: PUSH
55113: LD_INT 1
55115: ARRAY
55116: PUSH
55117: LD_STRING l
55119: EQUAL
55120: IFFALSE 55145
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55122: LD_ADDR_VAR 0 2
55126: PUSH
55127: LD_VAR 0 1
55131: PPUSH
55132: CALL_OW 437
55136: PUSH
55137: LD_INT 1
55139: ARRAY
55140: PUSH
55141: LD_INT 4
55143: ARRAY
55144: ST_TO_ADDR
// end ;
55145: LD_VAR 0 2
55149: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55150: LD_INT 0
55152: PPUSH
55153: PPUSH
55154: PPUSH
55155: PPUSH
// if not base_units then
55156: LD_VAR 0 1
55160: NOT
55161: IFFALSE 55165
// exit ;
55163: GO 55252
// result := false ;
55165: LD_ADDR_VAR 0 2
55169: PUSH
55170: LD_INT 0
55172: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55173: LD_ADDR_VAR 0 5
55177: PUSH
55178: LD_VAR 0 1
55182: PPUSH
55183: LD_INT 21
55185: PUSH
55186: LD_INT 3
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PPUSH
55193: CALL_OW 72
55197: ST_TO_ADDR
// if not tmp then
55198: LD_VAR 0 5
55202: NOT
55203: IFFALSE 55207
// exit ;
55205: GO 55252
// for i in tmp do
55207: LD_ADDR_VAR 0 3
55211: PUSH
55212: LD_VAR 0 5
55216: PUSH
55217: FOR_IN
55218: IFFALSE 55250
// begin result := EnemyInRange ( i , 22 ) ;
55220: LD_ADDR_VAR 0 2
55224: PUSH
55225: LD_VAR 0 3
55229: PPUSH
55230: LD_INT 22
55232: PPUSH
55233: CALL 53488 0 2
55237: ST_TO_ADDR
// if result then
55238: LD_VAR 0 2
55242: IFFALSE 55248
// exit ;
55244: POP
55245: POP
55246: GO 55252
// end ;
55248: GO 55217
55250: POP
55251: POP
// end ;
55252: LD_VAR 0 2
55256: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
55257: LD_INT 0
55259: PPUSH
55260: PPUSH
// if not units then
55261: LD_VAR 0 1
55265: NOT
55266: IFFALSE 55270
// exit ;
55268: GO 55340
// result := [ ] ;
55270: LD_ADDR_VAR 0 3
55274: PUSH
55275: EMPTY
55276: ST_TO_ADDR
// for i in units do
55277: LD_ADDR_VAR 0 4
55281: PUSH
55282: LD_VAR 0 1
55286: PUSH
55287: FOR_IN
55288: IFFALSE 55338
// if GetTag ( i ) = tag then
55290: LD_VAR 0 4
55294: PPUSH
55295: CALL_OW 110
55299: PUSH
55300: LD_VAR 0 2
55304: EQUAL
55305: IFFALSE 55336
// result := Insert ( result , result + 1 , i ) ;
55307: LD_ADDR_VAR 0 3
55311: PUSH
55312: LD_VAR 0 3
55316: PPUSH
55317: LD_VAR 0 3
55321: PUSH
55322: LD_INT 1
55324: PLUS
55325: PPUSH
55326: LD_VAR 0 4
55330: PPUSH
55331: CALL_OW 2
55335: ST_TO_ADDR
55336: GO 55287
55338: POP
55339: POP
// end ;
55340: LD_VAR 0 3
55344: RET
// export function IsDriver ( un ) ; begin
55345: LD_INT 0
55347: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55348: LD_ADDR_VAR 0 2
55352: PUSH
55353: LD_VAR 0 1
55357: PUSH
55358: LD_INT 55
55360: PUSH
55361: EMPTY
55362: LIST
55363: PPUSH
55364: CALL_OW 69
55368: IN
55369: ST_TO_ADDR
// end ;
55370: LD_VAR 0 2
55374: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55375: LD_INT 0
55377: PPUSH
55378: PPUSH
// list := [ ] ;
55379: LD_ADDR_VAR 0 5
55383: PUSH
55384: EMPTY
55385: ST_TO_ADDR
// case d of 0 :
55386: LD_VAR 0 3
55390: PUSH
55391: LD_INT 0
55393: DOUBLE
55394: EQUAL
55395: IFTRUE 55399
55397: GO 55532
55399: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55400: LD_ADDR_VAR 0 5
55404: PUSH
55405: LD_VAR 0 1
55409: PUSH
55410: LD_INT 4
55412: MINUS
55413: PUSH
55414: LD_VAR 0 2
55418: PUSH
55419: LD_INT 4
55421: MINUS
55422: PUSH
55423: LD_INT 2
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: LIST
55430: PUSH
55431: LD_VAR 0 1
55435: PUSH
55436: LD_INT 3
55438: MINUS
55439: PUSH
55440: LD_VAR 0 2
55444: PUSH
55445: LD_INT 1
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: LIST
55452: PUSH
55453: LD_VAR 0 1
55457: PUSH
55458: LD_INT 4
55460: PLUS
55461: PUSH
55462: LD_VAR 0 2
55466: PUSH
55467: LD_INT 4
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: LIST
55474: PUSH
55475: LD_VAR 0 1
55479: PUSH
55480: LD_INT 3
55482: PLUS
55483: PUSH
55484: LD_VAR 0 2
55488: PUSH
55489: LD_INT 3
55491: PLUS
55492: PUSH
55493: LD_INT 5
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: LIST
55500: PUSH
55501: LD_VAR 0 1
55505: PUSH
55506: LD_VAR 0 2
55510: PUSH
55511: LD_INT 4
55513: PLUS
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: LIST
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: ST_TO_ADDR
// end ; 1 :
55530: GO 56230
55532: LD_INT 1
55534: DOUBLE
55535: EQUAL
55536: IFTRUE 55540
55538: GO 55673
55540: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55541: LD_ADDR_VAR 0 5
55545: PUSH
55546: LD_VAR 0 1
55550: PUSH
55551: LD_VAR 0 2
55555: PUSH
55556: LD_INT 4
55558: MINUS
55559: PUSH
55560: LD_INT 3
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: LIST
55567: PUSH
55568: LD_VAR 0 1
55572: PUSH
55573: LD_INT 3
55575: MINUS
55576: PUSH
55577: LD_VAR 0 2
55581: PUSH
55582: LD_INT 3
55584: MINUS
55585: PUSH
55586: LD_INT 2
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: LIST
55593: PUSH
55594: LD_VAR 0 1
55598: PUSH
55599: LD_INT 4
55601: MINUS
55602: PUSH
55603: LD_VAR 0 2
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: LIST
55615: PUSH
55616: LD_VAR 0 1
55620: PUSH
55621: LD_VAR 0 2
55625: PUSH
55626: LD_INT 3
55628: PLUS
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: LIST
55637: PUSH
55638: LD_VAR 0 1
55642: PUSH
55643: LD_INT 4
55645: PLUS
55646: PUSH
55647: LD_VAR 0 2
55651: PUSH
55652: LD_INT 4
55654: PLUS
55655: PUSH
55656: LD_INT 5
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: LIST
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: ST_TO_ADDR
// end ; 2 :
55671: GO 56230
55673: LD_INT 2
55675: DOUBLE
55676: EQUAL
55677: IFTRUE 55681
55679: GO 55810
55681: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55682: LD_ADDR_VAR 0 5
55686: PUSH
55687: LD_VAR 0 1
55691: PUSH
55692: LD_VAR 0 2
55696: PUSH
55697: LD_INT 3
55699: MINUS
55700: PUSH
55701: LD_INT 3
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: LIST
55708: PUSH
55709: LD_VAR 0 1
55713: PUSH
55714: LD_INT 4
55716: PLUS
55717: PUSH
55718: LD_VAR 0 2
55722: PUSH
55723: LD_INT 4
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: LIST
55730: PUSH
55731: LD_VAR 0 1
55735: PUSH
55736: LD_VAR 0 2
55740: PUSH
55741: LD_INT 4
55743: PLUS
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: LIST
55752: PUSH
55753: LD_VAR 0 1
55757: PUSH
55758: LD_INT 3
55760: MINUS
55761: PUSH
55762: LD_VAR 0 2
55766: PUSH
55767: LD_INT 1
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: LIST
55774: PUSH
55775: LD_VAR 0 1
55779: PUSH
55780: LD_INT 4
55782: MINUS
55783: PUSH
55784: LD_VAR 0 2
55788: PUSH
55789: LD_INT 4
55791: MINUS
55792: PUSH
55793: LD_INT 2
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: LIST
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: ST_TO_ADDR
// end ; 3 :
55808: GO 56230
55810: LD_INT 3
55812: DOUBLE
55813: EQUAL
55814: IFTRUE 55818
55816: GO 55951
55818: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55819: LD_ADDR_VAR 0 5
55823: PUSH
55824: LD_VAR 0 1
55828: PUSH
55829: LD_INT 3
55831: PLUS
55832: PUSH
55833: LD_VAR 0 2
55837: PUSH
55838: LD_INT 4
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: LIST
55845: PUSH
55846: LD_VAR 0 1
55850: PUSH
55851: LD_INT 4
55853: PLUS
55854: PUSH
55855: LD_VAR 0 2
55859: PUSH
55860: LD_INT 4
55862: PLUS
55863: PUSH
55864: LD_INT 5
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: LIST
55871: PUSH
55872: LD_VAR 0 1
55876: PUSH
55877: LD_INT 4
55879: MINUS
55880: PUSH
55881: LD_VAR 0 2
55885: PUSH
55886: LD_INT 1
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: LIST
55893: PUSH
55894: LD_VAR 0 1
55898: PUSH
55899: LD_VAR 0 2
55903: PUSH
55904: LD_INT 4
55906: MINUS
55907: PUSH
55908: LD_INT 3
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: LIST
55915: PUSH
55916: LD_VAR 0 1
55920: PUSH
55921: LD_INT 3
55923: MINUS
55924: PUSH
55925: LD_VAR 0 2
55929: PUSH
55930: LD_INT 3
55932: MINUS
55933: PUSH
55934: LD_INT 2
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: LIST
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: ST_TO_ADDR
// end ; 4 :
55949: GO 56230
55951: LD_INT 4
55953: DOUBLE
55954: EQUAL
55955: IFTRUE 55959
55957: GO 56092
55959: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55960: LD_ADDR_VAR 0 5
55964: PUSH
55965: LD_VAR 0 1
55969: PUSH
55970: LD_VAR 0 2
55974: PUSH
55975: LD_INT 4
55977: PLUS
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: LIST
55986: PUSH
55987: LD_VAR 0 1
55991: PUSH
55992: LD_INT 3
55994: PLUS
55995: PUSH
55996: LD_VAR 0 2
56000: PUSH
56001: LD_INT 3
56003: PLUS
56004: PUSH
56005: LD_INT 5
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: LIST
56012: PUSH
56013: LD_VAR 0 1
56017: PUSH
56018: LD_INT 4
56020: PLUS
56021: PUSH
56022: LD_VAR 0 2
56026: PUSH
56027: LD_INT 4
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: LIST
56034: PUSH
56035: LD_VAR 0 1
56039: PUSH
56040: LD_VAR 0 2
56044: PUSH
56045: LD_INT 3
56047: MINUS
56048: PUSH
56049: LD_INT 3
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: LIST
56056: PUSH
56057: LD_VAR 0 1
56061: PUSH
56062: LD_INT 4
56064: MINUS
56065: PUSH
56066: LD_VAR 0 2
56070: PUSH
56071: LD_INT 4
56073: MINUS
56074: PUSH
56075: LD_INT 2
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: LIST
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: ST_TO_ADDR
// end ; 5 :
56090: GO 56230
56092: LD_INT 5
56094: DOUBLE
56095: EQUAL
56096: IFTRUE 56100
56098: GO 56229
56100: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56101: LD_ADDR_VAR 0 5
56105: PUSH
56106: LD_VAR 0 1
56110: PUSH
56111: LD_INT 4
56113: MINUS
56114: PUSH
56115: LD_VAR 0 2
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: LIST
56127: PUSH
56128: LD_VAR 0 1
56132: PUSH
56133: LD_VAR 0 2
56137: PUSH
56138: LD_INT 4
56140: MINUS
56141: PUSH
56142: LD_INT 3
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: LIST
56149: PUSH
56150: LD_VAR 0 1
56154: PUSH
56155: LD_INT 4
56157: PLUS
56158: PUSH
56159: LD_VAR 0 2
56163: PUSH
56164: LD_INT 4
56166: PLUS
56167: PUSH
56168: LD_INT 5
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: LIST
56175: PUSH
56176: LD_VAR 0 1
56180: PUSH
56181: LD_INT 3
56183: PLUS
56184: PUSH
56185: LD_VAR 0 2
56189: PUSH
56190: LD_INT 4
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: LIST
56197: PUSH
56198: LD_VAR 0 1
56202: PUSH
56203: LD_VAR 0 2
56207: PUSH
56208: LD_INT 3
56210: PLUS
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: LIST
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: ST_TO_ADDR
// end ; end ;
56227: GO 56230
56229: POP
// result := list ;
56230: LD_ADDR_VAR 0 4
56234: PUSH
56235: LD_VAR 0 5
56239: ST_TO_ADDR
// end ;
56240: LD_VAR 0 4
56244: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56245: LD_INT 0
56247: PPUSH
56248: PPUSH
56249: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56250: LD_VAR 0 1
56254: NOT
56255: PUSH
56256: LD_VAR 0 2
56260: PUSH
56261: LD_INT 1
56263: PUSH
56264: LD_INT 2
56266: PUSH
56267: LD_INT 3
56269: PUSH
56270: LD_INT 4
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: IN
56279: NOT
56280: OR
56281: IFFALSE 56285
// exit ;
56283: GO 56377
// tmp := [ ] ;
56285: LD_ADDR_VAR 0 5
56289: PUSH
56290: EMPTY
56291: ST_TO_ADDR
// for i in units do
56292: LD_ADDR_VAR 0 4
56296: PUSH
56297: LD_VAR 0 1
56301: PUSH
56302: FOR_IN
56303: IFFALSE 56346
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
56305: LD_ADDR_VAR 0 5
56309: PUSH
56310: LD_VAR 0 5
56314: PPUSH
56315: LD_VAR 0 5
56319: PUSH
56320: LD_INT 1
56322: PLUS
56323: PPUSH
56324: LD_VAR 0 4
56328: PPUSH
56329: LD_VAR 0 2
56333: PPUSH
56334: CALL_OW 259
56338: PPUSH
56339: CALL_OW 2
56343: ST_TO_ADDR
56344: GO 56302
56346: POP
56347: POP
// if not tmp then
56348: LD_VAR 0 5
56352: NOT
56353: IFFALSE 56357
// exit ;
56355: GO 56377
// result := SortListByListDesc ( units , tmp ) ;
56357: LD_ADDR_VAR 0 3
56361: PUSH
56362: LD_VAR 0 1
56366: PPUSH
56367: LD_VAR 0 5
56371: PPUSH
56372: CALL_OW 77
56376: ST_TO_ADDR
// end ;
56377: LD_VAR 0 3
56381: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56382: LD_INT 0
56384: PPUSH
56385: PPUSH
56386: PPUSH
// result := false ;
56387: LD_ADDR_VAR 0 3
56391: PUSH
56392: LD_INT 0
56394: ST_TO_ADDR
// x := GetX ( building ) ;
56395: LD_ADDR_VAR 0 4
56399: PUSH
56400: LD_VAR 0 2
56404: PPUSH
56405: CALL_OW 250
56409: ST_TO_ADDR
// y := GetY ( building ) ;
56410: LD_ADDR_VAR 0 5
56414: PUSH
56415: LD_VAR 0 2
56419: PPUSH
56420: CALL_OW 251
56424: ST_TO_ADDR
// if not building or not x or not y then
56425: LD_VAR 0 2
56429: NOT
56430: PUSH
56431: LD_VAR 0 4
56435: NOT
56436: OR
56437: PUSH
56438: LD_VAR 0 5
56442: NOT
56443: OR
56444: IFFALSE 56448
// exit ;
56446: GO 56540
// if GetTaskList ( unit ) then
56448: LD_VAR 0 1
56452: PPUSH
56453: CALL_OW 437
56457: IFFALSE 56540
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56459: LD_STRING e
56461: PUSH
56462: LD_VAR 0 1
56466: PPUSH
56467: CALL_OW 437
56471: PUSH
56472: LD_INT 1
56474: ARRAY
56475: PUSH
56476: LD_INT 1
56478: ARRAY
56479: EQUAL
56480: PUSH
56481: LD_VAR 0 4
56485: PUSH
56486: LD_VAR 0 1
56490: PPUSH
56491: CALL_OW 437
56495: PUSH
56496: LD_INT 1
56498: ARRAY
56499: PUSH
56500: LD_INT 2
56502: ARRAY
56503: EQUAL
56504: AND
56505: PUSH
56506: LD_VAR 0 5
56510: PUSH
56511: LD_VAR 0 1
56515: PPUSH
56516: CALL_OW 437
56520: PUSH
56521: LD_INT 1
56523: ARRAY
56524: PUSH
56525: LD_INT 3
56527: ARRAY
56528: EQUAL
56529: AND
56530: IFFALSE 56540
// result := true end ;
56532: LD_ADDR_VAR 0 3
56536: PUSH
56537: LD_INT 1
56539: ST_TO_ADDR
// end ;
56540: LD_VAR 0 3
56544: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56545: LD_INT 0
56547: PPUSH
// result := false ;
56548: LD_ADDR_VAR 0 4
56552: PUSH
56553: LD_INT 0
56555: ST_TO_ADDR
// if GetTaskList ( unit ) then
56556: LD_VAR 0 1
56560: PPUSH
56561: CALL_OW 437
56565: IFFALSE 56648
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56567: LD_STRING M
56569: PUSH
56570: LD_VAR 0 1
56574: PPUSH
56575: CALL_OW 437
56579: PUSH
56580: LD_INT 1
56582: ARRAY
56583: PUSH
56584: LD_INT 1
56586: ARRAY
56587: EQUAL
56588: PUSH
56589: LD_VAR 0 2
56593: PUSH
56594: LD_VAR 0 1
56598: PPUSH
56599: CALL_OW 437
56603: PUSH
56604: LD_INT 1
56606: ARRAY
56607: PUSH
56608: LD_INT 2
56610: ARRAY
56611: EQUAL
56612: AND
56613: PUSH
56614: LD_VAR 0 3
56618: PUSH
56619: LD_VAR 0 1
56623: PPUSH
56624: CALL_OW 437
56628: PUSH
56629: LD_INT 1
56631: ARRAY
56632: PUSH
56633: LD_INT 3
56635: ARRAY
56636: EQUAL
56637: AND
56638: IFFALSE 56648
// result := true ;
56640: LD_ADDR_VAR 0 4
56644: PUSH
56645: LD_INT 1
56647: ST_TO_ADDR
// end ; end ;
56648: LD_VAR 0 4
56652: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56653: LD_INT 0
56655: PPUSH
56656: PPUSH
56657: PPUSH
56658: PPUSH
// if not unit or not area then
56659: LD_VAR 0 1
56663: NOT
56664: PUSH
56665: LD_VAR 0 2
56669: NOT
56670: OR
56671: IFFALSE 56675
// exit ;
56673: GO 56839
// tmp := AreaToList ( area , i ) ;
56675: LD_ADDR_VAR 0 6
56679: PUSH
56680: LD_VAR 0 2
56684: PPUSH
56685: LD_VAR 0 5
56689: PPUSH
56690: CALL_OW 517
56694: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56695: LD_ADDR_VAR 0 5
56699: PUSH
56700: DOUBLE
56701: LD_INT 1
56703: DEC
56704: ST_TO_ADDR
56705: LD_VAR 0 6
56709: PUSH
56710: LD_INT 1
56712: ARRAY
56713: PUSH
56714: FOR_TO
56715: IFFALSE 56837
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56717: LD_ADDR_VAR 0 7
56721: PUSH
56722: LD_VAR 0 6
56726: PUSH
56727: LD_INT 1
56729: ARRAY
56730: PUSH
56731: LD_VAR 0 5
56735: ARRAY
56736: PUSH
56737: LD_VAR 0 6
56741: PUSH
56742: LD_INT 2
56744: ARRAY
56745: PUSH
56746: LD_VAR 0 5
56750: ARRAY
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
56756: LD_VAR 0 7
56760: PUSH
56761: LD_INT 1
56763: ARRAY
56764: PPUSH
56765: LD_VAR 0 7
56769: PUSH
56770: LD_INT 2
56772: ARRAY
56773: PPUSH
56774: CALL_OW 428
56778: PUSH
56779: LD_INT 0
56781: EQUAL
56782: IFFALSE 56835
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
56784: LD_VAR 0 1
56788: PPUSH
56789: LD_VAR 0 7
56793: PUSH
56794: LD_INT 1
56796: ARRAY
56797: PPUSH
56798: LD_VAR 0 7
56802: PUSH
56803: LD_INT 2
56805: ARRAY
56806: PPUSH
56807: LD_VAR 0 3
56811: PPUSH
56812: CALL_OW 48
// result := IsPlaced ( unit ) ;
56816: LD_ADDR_VAR 0 4
56820: PUSH
56821: LD_VAR 0 1
56825: PPUSH
56826: CALL_OW 305
56830: ST_TO_ADDR
// exit ;
56831: POP
56832: POP
56833: GO 56839
// end ; end ;
56835: GO 56714
56837: POP
56838: POP
// end ;
56839: LD_VAR 0 4
56843: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56844: LD_INT 0
56846: PPUSH
56847: PPUSH
56848: PPUSH
// if not side or side > 8 then
56849: LD_VAR 0 1
56853: NOT
56854: PUSH
56855: LD_VAR 0 1
56859: PUSH
56860: LD_INT 8
56862: GREATER
56863: OR
56864: IFFALSE 56868
// exit ;
56866: GO 57055
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56868: LD_ADDR_VAR 0 4
56872: PUSH
56873: LD_INT 22
56875: PUSH
56876: LD_VAR 0 1
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 21
56887: PUSH
56888: LD_INT 3
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PPUSH
56899: CALL_OW 69
56903: ST_TO_ADDR
// if not tmp then
56904: LD_VAR 0 4
56908: NOT
56909: IFFALSE 56913
// exit ;
56911: GO 57055
// enable_addtolog := true ;
56913: LD_ADDR_OWVAR 81
56917: PUSH
56918: LD_INT 1
56920: ST_TO_ADDR
// AddToLog ( [ ) ;
56921: LD_STRING [
56923: PPUSH
56924: CALL_OW 561
// for i in tmp do
56928: LD_ADDR_VAR 0 3
56932: PUSH
56933: LD_VAR 0 4
56937: PUSH
56938: FOR_IN
56939: IFFALSE 57046
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56941: LD_STRING [
56943: PUSH
56944: LD_VAR 0 3
56948: PPUSH
56949: CALL_OW 266
56953: STR
56954: PUSH
56955: LD_STRING , 
56957: STR
56958: PUSH
56959: LD_VAR 0 3
56963: PPUSH
56964: CALL_OW 250
56968: STR
56969: PUSH
56970: LD_STRING , 
56972: STR
56973: PUSH
56974: LD_VAR 0 3
56978: PPUSH
56979: CALL_OW 251
56983: STR
56984: PUSH
56985: LD_STRING , 
56987: STR
56988: PUSH
56989: LD_VAR 0 3
56993: PPUSH
56994: CALL_OW 254
56998: STR
56999: PUSH
57000: LD_STRING , 
57002: STR
57003: PUSH
57004: LD_VAR 0 3
57008: PPUSH
57009: LD_INT 1
57011: PPUSH
57012: CALL_OW 268
57016: STR
57017: PUSH
57018: LD_STRING , 
57020: STR
57021: PUSH
57022: LD_VAR 0 3
57026: PPUSH
57027: LD_INT 2
57029: PPUSH
57030: CALL_OW 268
57034: STR
57035: PUSH
57036: LD_STRING ],
57038: STR
57039: PPUSH
57040: CALL_OW 561
// end ;
57044: GO 56938
57046: POP
57047: POP
// AddToLog ( ]; ) ;
57048: LD_STRING ];
57050: PPUSH
57051: CALL_OW 561
// end ;
57055: LD_VAR 0 2
57059: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57060: LD_INT 0
57062: PPUSH
57063: PPUSH
57064: PPUSH
57065: PPUSH
57066: PPUSH
// if not area or not rate or not max then
57067: LD_VAR 0 1
57071: NOT
57072: PUSH
57073: LD_VAR 0 2
57077: NOT
57078: OR
57079: PUSH
57080: LD_VAR 0 4
57084: NOT
57085: OR
57086: IFFALSE 57090
// exit ;
57088: GO 57282
// while 1 do
57090: LD_INT 1
57092: IFFALSE 57282
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57094: LD_ADDR_VAR 0 9
57098: PUSH
57099: LD_VAR 0 1
57103: PPUSH
57104: LD_INT 1
57106: PPUSH
57107: CALL_OW 287
57111: PUSH
57112: LD_INT 10
57114: MUL
57115: ST_TO_ADDR
// r := rate / 10 ;
57116: LD_ADDR_VAR 0 7
57120: PUSH
57121: LD_VAR 0 2
57125: PUSH
57126: LD_INT 10
57128: DIVREAL
57129: ST_TO_ADDR
// time := 1 1$00 ;
57130: LD_ADDR_VAR 0 8
57134: PUSH
57135: LD_INT 2100
57137: ST_TO_ADDR
// if amount < min then
57138: LD_VAR 0 9
57142: PUSH
57143: LD_VAR 0 3
57147: LESS
57148: IFFALSE 57166
// r := r * 2 else
57150: LD_ADDR_VAR 0 7
57154: PUSH
57155: LD_VAR 0 7
57159: PUSH
57160: LD_INT 2
57162: MUL
57163: ST_TO_ADDR
57164: GO 57192
// if amount > max then
57166: LD_VAR 0 9
57170: PUSH
57171: LD_VAR 0 4
57175: GREATER
57176: IFFALSE 57192
// r := r / 2 ;
57178: LD_ADDR_VAR 0 7
57182: PUSH
57183: LD_VAR 0 7
57187: PUSH
57188: LD_INT 2
57190: DIVREAL
57191: ST_TO_ADDR
// time := time / r ;
57192: LD_ADDR_VAR 0 8
57196: PUSH
57197: LD_VAR 0 8
57201: PUSH
57202: LD_VAR 0 7
57206: DIVREAL
57207: ST_TO_ADDR
// if time < 0 then
57208: LD_VAR 0 8
57212: PUSH
57213: LD_INT 0
57215: LESS
57216: IFFALSE 57233
// time := time * - 1 ;
57218: LD_ADDR_VAR 0 8
57222: PUSH
57223: LD_VAR 0 8
57227: PUSH
57228: LD_INT 1
57230: NEG
57231: MUL
57232: ST_TO_ADDR
// wait ( time ) ;
57233: LD_VAR 0 8
57237: PPUSH
57238: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
57242: LD_INT 35
57244: PPUSH
57245: LD_INT 875
57247: PPUSH
57248: CALL_OW 12
57252: PPUSH
57253: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57257: LD_INT 1
57259: PPUSH
57260: LD_INT 5
57262: PPUSH
57263: CALL_OW 12
57267: PPUSH
57268: LD_VAR 0 1
57272: PPUSH
57273: LD_INT 1
57275: PPUSH
57276: CALL_OW 55
// end ;
57280: GO 57090
// end ;
57282: LD_VAR 0 5
57286: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57287: LD_INT 0
57289: PPUSH
57290: PPUSH
57291: PPUSH
57292: PPUSH
57293: PPUSH
57294: PPUSH
57295: PPUSH
57296: PPUSH
// if not turrets or not factories then
57297: LD_VAR 0 1
57301: NOT
57302: PUSH
57303: LD_VAR 0 2
57307: NOT
57308: OR
57309: IFFALSE 57313
// exit ;
57311: GO 57620
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57313: LD_ADDR_VAR 0 10
57317: PUSH
57318: LD_INT 5
57320: PUSH
57321: LD_INT 6
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 2
57330: PUSH
57331: LD_INT 4
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 3
57340: PUSH
57341: LD_INT 5
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 24
57355: PUSH
57356: LD_INT 25
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 23
57365: PUSH
57366: LD_INT 27
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 42
57379: PUSH
57380: LD_INT 43
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 44
57389: PUSH
57390: LD_INT 46
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 45
57399: PUSH
57400: LD_INT 47
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: LIST
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: LIST
57416: ST_TO_ADDR
// result := [ ] ;
57417: LD_ADDR_VAR 0 3
57421: PUSH
57422: EMPTY
57423: ST_TO_ADDR
// for i in turrets do
57424: LD_ADDR_VAR 0 4
57428: PUSH
57429: LD_VAR 0 1
57433: PUSH
57434: FOR_IN
57435: IFFALSE 57618
// begin nat := GetNation ( i ) ;
57437: LD_ADDR_VAR 0 7
57441: PUSH
57442: LD_VAR 0 4
57446: PPUSH
57447: CALL_OW 248
57451: ST_TO_ADDR
// weapon := 0 ;
57452: LD_ADDR_VAR 0 8
57456: PUSH
57457: LD_INT 0
57459: ST_TO_ADDR
// if not nat then
57460: LD_VAR 0 7
57464: NOT
57465: IFFALSE 57469
// continue ;
57467: GO 57434
// for j in list [ nat ] do
57469: LD_ADDR_VAR 0 5
57473: PUSH
57474: LD_VAR 0 10
57478: PUSH
57479: LD_VAR 0 7
57483: ARRAY
57484: PUSH
57485: FOR_IN
57486: IFFALSE 57527
// if GetBWeapon ( i ) = j [ 1 ] then
57488: LD_VAR 0 4
57492: PPUSH
57493: CALL_OW 269
57497: PUSH
57498: LD_VAR 0 5
57502: PUSH
57503: LD_INT 1
57505: ARRAY
57506: EQUAL
57507: IFFALSE 57525
// begin weapon := j [ 2 ] ;
57509: LD_ADDR_VAR 0 8
57513: PUSH
57514: LD_VAR 0 5
57518: PUSH
57519: LD_INT 2
57521: ARRAY
57522: ST_TO_ADDR
// break ;
57523: GO 57527
// end ;
57525: GO 57485
57527: POP
57528: POP
// if not weapon then
57529: LD_VAR 0 8
57533: NOT
57534: IFFALSE 57538
// continue ;
57536: GO 57434
// for k in factories do
57538: LD_ADDR_VAR 0 6
57542: PUSH
57543: LD_VAR 0 2
57547: PUSH
57548: FOR_IN
57549: IFFALSE 57614
// begin weapons := AvailableWeaponList ( k ) ;
57551: LD_ADDR_VAR 0 9
57555: PUSH
57556: LD_VAR 0 6
57560: PPUSH
57561: CALL_OW 478
57565: ST_TO_ADDR
// if not weapons then
57566: LD_VAR 0 9
57570: NOT
57571: IFFALSE 57575
// continue ;
57573: GO 57548
// if weapon in weapons then
57575: LD_VAR 0 8
57579: PUSH
57580: LD_VAR 0 9
57584: IN
57585: IFFALSE 57612
// begin result := [ i , weapon ] ;
57587: LD_ADDR_VAR 0 3
57591: PUSH
57592: LD_VAR 0 4
57596: PUSH
57597: LD_VAR 0 8
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: ST_TO_ADDR
// exit ;
57606: POP
57607: POP
57608: POP
57609: POP
57610: GO 57620
// end ; end ;
57612: GO 57548
57614: POP
57615: POP
// end ;
57616: GO 57434
57618: POP
57619: POP
// end ;
57620: LD_VAR 0 3
57624: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57625: LD_INT 0
57627: PPUSH
// if not side or side > 8 then
57628: LD_VAR 0 3
57632: NOT
57633: PUSH
57634: LD_VAR 0 3
57638: PUSH
57639: LD_INT 8
57641: GREATER
57642: OR
57643: IFFALSE 57647
// exit ;
57645: GO 57706
// if not range then
57647: LD_VAR 0 4
57651: NOT
57652: IFFALSE 57663
// range := - 12 ;
57654: LD_ADDR_VAR 0 4
57658: PUSH
57659: LD_INT 12
57661: NEG
57662: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57663: LD_VAR 0 1
57667: PPUSH
57668: LD_VAR 0 2
57672: PPUSH
57673: LD_VAR 0 3
57677: PPUSH
57678: LD_VAR 0 4
57682: PPUSH
57683: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57687: LD_VAR 0 1
57691: PPUSH
57692: LD_VAR 0 2
57696: PPUSH
57697: LD_VAR 0 3
57701: PPUSH
57702: CALL_OW 331
// end ;
57706: LD_VAR 0 5
57710: RET
// export function Video ( mode ) ; begin
57711: LD_INT 0
57713: PPUSH
// ingame_video = mode ;
57714: LD_ADDR_OWVAR 52
57718: PUSH
57719: LD_VAR 0 1
57723: ST_TO_ADDR
// interface_hidden = mode ;
57724: LD_ADDR_OWVAR 54
57728: PUSH
57729: LD_VAR 0 1
57733: ST_TO_ADDR
// end ;
57734: LD_VAR 0 2
57738: RET
// export function Join ( array , element ) ; begin
57739: LD_INT 0
57741: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57742: LD_ADDR_VAR 0 3
57746: PUSH
57747: LD_VAR 0 1
57751: PPUSH
57752: LD_VAR 0 1
57756: PUSH
57757: LD_INT 1
57759: PLUS
57760: PPUSH
57761: LD_VAR 0 2
57765: PPUSH
57766: CALL_OW 1
57770: ST_TO_ADDR
// end ;
57771: LD_VAR 0 3
57775: RET
// export function JoinUnion ( array , element ) ; begin
57776: LD_INT 0
57778: PPUSH
// result := array union element ;
57779: LD_ADDR_VAR 0 3
57783: PUSH
57784: LD_VAR 0 1
57788: PUSH
57789: LD_VAR 0 2
57793: UNION
57794: ST_TO_ADDR
// end ;
57795: LD_VAR 0 3
57799: RET
// export function GetBehemoths ( side ) ; begin
57800: LD_INT 0
57802: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
57803: LD_ADDR_VAR 0 2
57807: PUSH
57808: LD_INT 22
57810: PUSH
57811: LD_VAR 0 1
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 31
57822: PUSH
57823: LD_INT 25
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PPUSH
57834: CALL_OW 69
57838: ST_TO_ADDR
// end ;
57839: LD_VAR 0 2
57843: RET
// export function Shuffle ( array ) ; var i , index ; begin
57844: LD_INT 0
57846: PPUSH
57847: PPUSH
57848: PPUSH
// result := [ ] ;
57849: LD_ADDR_VAR 0 2
57853: PUSH
57854: EMPTY
57855: ST_TO_ADDR
// if not array then
57856: LD_VAR 0 1
57860: NOT
57861: IFFALSE 57865
// exit ;
57863: GO 57964
// Randomize ;
57865: CALL_OW 10
// for i = array downto 1 do
57869: LD_ADDR_VAR 0 3
57873: PUSH
57874: DOUBLE
57875: LD_VAR 0 1
57879: INC
57880: ST_TO_ADDR
57881: LD_INT 1
57883: PUSH
57884: FOR_DOWNTO
57885: IFFALSE 57962
// begin index := rand ( 1 , array ) ;
57887: LD_ADDR_VAR 0 4
57891: PUSH
57892: LD_INT 1
57894: PPUSH
57895: LD_VAR 0 1
57899: PPUSH
57900: CALL_OW 12
57904: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57905: LD_ADDR_VAR 0 2
57909: PUSH
57910: LD_VAR 0 2
57914: PPUSH
57915: LD_VAR 0 2
57919: PUSH
57920: LD_INT 1
57922: PLUS
57923: PPUSH
57924: LD_VAR 0 1
57928: PUSH
57929: LD_VAR 0 4
57933: ARRAY
57934: PPUSH
57935: CALL_OW 2
57939: ST_TO_ADDR
// array := Delete ( array , index ) ;
57940: LD_ADDR_VAR 0 1
57944: PUSH
57945: LD_VAR 0 1
57949: PPUSH
57950: LD_VAR 0 4
57954: PPUSH
57955: CALL_OW 3
57959: ST_TO_ADDR
// end ;
57960: GO 57884
57962: POP
57963: POP
// end ;
57964: LD_VAR 0 2
57968: RET
// export function GetBaseMaterials ( base ) ; begin
57969: LD_INT 0
57971: PPUSH
// result := [ 0 , 0 , 0 ] ;
57972: LD_ADDR_VAR 0 2
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: LD_INT 0
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: LIST
57990: ST_TO_ADDR
// if not base then
57991: LD_VAR 0 1
57995: NOT
57996: IFFALSE 58000
// exit ;
57998: GO 58049
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58000: LD_ADDR_VAR 0 2
58004: PUSH
58005: LD_VAR 0 1
58009: PPUSH
58010: LD_INT 1
58012: PPUSH
58013: CALL_OW 275
58017: PUSH
58018: LD_VAR 0 1
58022: PPUSH
58023: LD_INT 2
58025: PPUSH
58026: CALL_OW 275
58030: PUSH
58031: LD_VAR 0 1
58035: PPUSH
58036: LD_INT 3
58038: PPUSH
58039: CALL_OW 275
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: LIST
58048: ST_TO_ADDR
// end ;
58049: LD_VAR 0 2
58053: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58054: LD_INT 0
58056: PPUSH
58057: PPUSH
// result := array ;
58058: LD_ADDR_VAR 0 3
58062: PUSH
58063: LD_VAR 0 1
58067: ST_TO_ADDR
// if size > 0 then
58068: LD_VAR 0 2
58072: PUSH
58073: LD_INT 0
58075: GREATER
58076: IFFALSE 58122
// for i := array downto size do
58078: LD_ADDR_VAR 0 4
58082: PUSH
58083: DOUBLE
58084: LD_VAR 0 1
58088: INC
58089: ST_TO_ADDR
58090: LD_VAR 0 2
58094: PUSH
58095: FOR_DOWNTO
58096: IFFALSE 58120
// result := Delete ( result , result ) ;
58098: LD_ADDR_VAR 0 3
58102: PUSH
58103: LD_VAR 0 3
58107: PPUSH
58108: LD_VAR 0 3
58112: PPUSH
58113: CALL_OW 3
58117: ST_TO_ADDR
58118: GO 58095
58120: POP
58121: POP
// end ;
58122: LD_VAR 0 3
58126: RET
// export function ComExit ( unit ) ; var tmp ; begin
58127: LD_INT 0
58129: PPUSH
58130: PPUSH
// if not IsInUnit ( unit ) then
58131: LD_VAR 0 1
58135: PPUSH
58136: CALL_OW 310
58140: NOT
58141: IFFALSE 58145
// exit ;
58143: GO 58205
// tmp := IsInUnit ( unit ) ;
58145: LD_ADDR_VAR 0 3
58149: PUSH
58150: LD_VAR 0 1
58154: PPUSH
58155: CALL_OW 310
58159: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58160: LD_VAR 0 3
58164: PPUSH
58165: CALL_OW 247
58169: PUSH
58170: LD_INT 2
58172: EQUAL
58173: IFFALSE 58186
// ComExitVehicle ( unit ) else
58175: LD_VAR 0 1
58179: PPUSH
58180: CALL_OW 121
58184: GO 58195
// ComExitBuilding ( unit ) ;
58186: LD_VAR 0 1
58190: PPUSH
58191: CALL_OW 122
// result := tmp ;
58195: LD_ADDR_VAR 0 2
58199: PUSH
58200: LD_VAR 0 3
58204: ST_TO_ADDR
// end ;
58205: LD_VAR 0 2
58209: RET
// export function ComExitAll ( units ) ; var i ; begin
58210: LD_INT 0
58212: PPUSH
58213: PPUSH
// if not units then
58214: LD_VAR 0 1
58218: NOT
58219: IFFALSE 58223
// exit ;
58221: GO 58249
// for i in units do
58223: LD_ADDR_VAR 0 3
58227: PUSH
58228: LD_VAR 0 1
58232: PUSH
58233: FOR_IN
58234: IFFALSE 58247
// ComExit ( i ) ;
58236: LD_VAR 0 3
58240: PPUSH
58241: CALL 58127 0 1
58245: GO 58233
58247: POP
58248: POP
// end ;
58249: LD_VAR 0 2
58253: RET
// export function ResetHc ; begin
58254: LD_INT 0
58256: PPUSH
// InitHc ;
58257: CALL_OW 19
// hc_importance := 0 ;
58261: LD_ADDR_OWVAR 32
58265: PUSH
58266: LD_INT 0
58268: ST_TO_ADDR
// end ;
58269: LD_VAR 0 1
58273: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58274: LD_INT 0
58276: PPUSH
58277: PPUSH
58278: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58279: LD_ADDR_VAR 0 6
58283: PUSH
58284: LD_VAR 0 1
58288: PUSH
58289: LD_VAR 0 3
58293: PLUS
58294: PUSH
58295: LD_INT 2
58297: DIV
58298: ST_TO_ADDR
// if _x < 0 then
58299: LD_VAR 0 6
58303: PUSH
58304: LD_INT 0
58306: LESS
58307: IFFALSE 58324
// _x := _x * - 1 ;
58309: LD_ADDR_VAR 0 6
58313: PUSH
58314: LD_VAR 0 6
58318: PUSH
58319: LD_INT 1
58321: NEG
58322: MUL
58323: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58324: LD_ADDR_VAR 0 7
58328: PUSH
58329: LD_VAR 0 2
58333: PUSH
58334: LD_VAR 0 4
58338: PLUS
58339: PUSH
58340: LD_INT 2
58342: DIV
58343: ST_TO_ADDR
// if _y < 0 then
58344: LD_VAR 0 7
58348: PUSH
58349: LD_INT 0
58351: LESS
58352: IFFALSE 58369
// _y := _y * - 1 ;
58354: LD_ADDR_VAR 0 7
58358: PUSH
58359: LD_VAR 0 7
58363: PUSH
58364: LD_INT 1
58366: NEG
58367: MUL
58368: ST_TO_ADDR
// result := [ _x , _y ] ;
58369: LD_ADDR_VAR 0 5
58373: PUSH
58374: LD_VAR 0 6
58378: PUSH
58379: LD_VAR 0 7
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: ST_TO_ADDR
// end ;
58388: LD_VAR 0 5
58392: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58393: LD_INT 0
58395: PPUSH
58396: PPUSH
58397: PPUSH
58398: PPUSH
// task := GetTaskList ( unit ) ;
58399: LD_ADDR_VAR 0 7
58403: PUSH
58404: LD_VAR 0 1
58408: PPUSH
58409: CALL_OW 437
58413: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58414: LD_VAR 0 7
58418: NOT
58419: PUSH
58420: LD_VAR 0 1
58424: PPUSH
58425: LD_VAR 0 2
58429: PPUSH
58430: CALL_OW 308
58434: NOT
58435: AND
58436: IFFALSE 58440
// exit ;
58438: GO 58558
// if IsInArea ( unit , area ) then
58440: LD_VAR 0 1
58444: PPUSH
58445: LD_VAR 0 2
58449: PPUSH
58450: CALL_OW 308
58454: IFFALSE 58472
// begin ComMoveToArea ( unit , goAway ) ;
58456: LD_VAR 0 1
58460: PPUSH
58461: LD_VAR 0 3
58465: PPUSH
58466: CALL_OW 113
// exit ;
58470: GO 58558
// end ; if task [ 1 ] [ 1 ] <> M then
58472: LD_VAR 0 7
58476: PUSH
58477: LD_INT 1
58479: ARRAY
58480: PUSH
58481: LD_INT 1
58483: ARRAY
58484: PUSH
58485: LD_STRING M
58487: NONEQUAL
58488: IFFALSE 58492
// exit ;
58490: GO 58558
// x := task [ 1 ] [ 2 ] ;
58492: LD_ADDR_VAR 0 5
58496: PUSH
58497: LD_VAR 0 7
58501: PUSH
58502: LD_INT 1
58504: ARRAY
58505: PUSH
58506: LD_INT 2
58508: ARRAY
58509: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
58510: LD_ADDR_VAR 0 6
58514: PUSH
58515: LD_VAR 0 7
58519: PUSH
58520: LD_INT 1
58522: ARRAY
58523: PUSH
58524: LD_INT 3
58526: ARRAY
58527: ST_TO_ADDR
// if InArea ( x , y , area ) then
58528: LD_VAR 0 5
58532: PPUSH
58533: LD_VAR 0 6
58537: PPUSH
58538: LD_VAR 0 2
58542: PPUSH
58543: CALL_OW 309
58547: IFFALSE 58558
// ComStop ( unit ) ;
58549: LD_VAR 0 1
58553: PPUSH
58554: CALL_OW 141
// end ;
58558: LD_VAR 0 4
58562: RET
// export function Abs ( value ) ; begin
58563: LD_INT 0
58565: PPUSH
// result := value ;
58566: LD_ADDR_VAR 0 2
58570: PUSH
58571: LD_VAR 0 1
58575: ST_TO_ADDR
// if value < 0 then
58576: LD_VAR 0 1
58580: PUSH
58581: LD_INT 0
58583: LESS
58584: IFFALSE 58601
// result := value * - 1 ;
58586: LD_ADDR_VAR 0 2
58590: PUSH
58591: LD_VAR 0 1
58595: PUSH
58596: LD_INT 1
58598: NEG
58599: MUL
58600: ST_TO_ADDR
// end ;
58601: LD_VAR 0 2
58605: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
58606: LD_INT 0
58608: PPUSH
58609: PPUSH
58610: PPUSH
58611: PPUSH
58612: PPUSH
58613: PPUSH
58614: PPUSH
58615: PPUSH
// if not unit or not building then
58616: LD_VAR 0 1
58620: NOT
58621: PUSH
58622: LD_VAR 0 2
58626: NOT
58627: OR
58628: IFFALSE 58632
// exit ;
58630: GO 58858
// x := GetX ( building ) ;
58632: LD_ADDR_VAR 0 4
58636: PUSH
58637: LD_VAR 0 2
58641: PPUSH
58642: CALL_OW 250
58646: ST_TO_ADDR
// y := GetY ( building ) ;
58647: LD_ADDR_VAR 0 6
58651: PUSH
58652: LD_VAR 0 2
58656: PPUSH
58657: CALL_OW 251
58661: ST_TO_ADDR
// d := GetDir ( building ) ;
58662: LD_ADDR_VAR 0 8
58666: PUSH
58667: LD_VAR 0 2
58671: PPUSH
58672: CALL_OW 254
58676: ST_TO_ADDR
// r := 4 ;
58677: LD_ADDR_VAR 0 9
58681: PUSH
58682: LD_INT 4
58684: ST_TO_ADDR
// for i := 1 to 5 do
58685: LD_ADDR_VAR 0 10
58689: PUSH
58690: DOUBLE
58691: LD_INT 1
58693: DEC
58694: ST_TO_ADDR
58695: LD_INT 5
58697: PUSH
58698: FOR_TO
58699: IFFALSE 58856
// begin _x := ShiftX ( x , d , r + i ) ;
58701: LD_ADDR_VAR 0 5
58705: PUSH
58706: LD_VAR 0 4
58710: PPUSH
58711: LD_VAR 0 8
58715: PPUSH
58716: LD_VAR 0 9
58720: PUSH
58721: LD_VAR 0 10
58725: PLUS
58726: PPUSH
58727: CALL_OW 272
58731: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
58732: LD_ADDR_VAR 0 7
58736: PUSH
58737: LD_VAR 0 6
58741: PPUSH
58742: LD_VAR 0 8
58746: PPUSH
58747: LD_VAR 0 9
58751: PUSH
58752: LD_VAR 0 10
58756: PLUS
58757: PPUSH
58758: CALL_OW 273
58762: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
58763: LD_VAR 0 5
58767: PPUSH
58768: LD_VAR 0 7
58772: PPUSH
58773: CALL_OW 488
58777: PUSH
58778: LD_VAR 0 5
58782: PPUSH
58783: LD_VAR 0 7
58787: PPUSH
58788: CALL_OW 428
58792: PPUSH
58793: CALL_OW 247
58797: PUSH
58798: LD_INT 3
58800: PUSH
58801: LD_INT 2
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: IN
58808: NOT
58809: AND
58810: IFFALSE 58854
// begin ComMoveXY ( unit , _x , _y ) ;
58812: LD_VAR 0 1
58816: PPUSH
58817: LD_VAR 0 5
58821: PPUSH
58822: LD_VAR 0 7
58826: PPUSH
58827: CALL_OW 111
// result := [ _x , _y ] ;
58831: LD_ADDR_VAR 0 3
58835: PUSH
58836: LD_VAR 0 5
58840: PUSH
58841: LD_VAR 0 7
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: ST_TO_ADDR
// exit ;
58850: POP
58851: POP
58852: GO 58858
// end ; end ;
58854: GO 58698
58856: POP
58857: POP
// end ;
58858: LD_VAR 0 3
58862: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
58863: LD_INT 0
58865: PPUSH
58866: PPUSH
58867: PPUSH
// result := 0 ;
58868: LD_ADDR_VAR 0 3
58872: PUSH
58873: LD_INT 0
58875: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
58876: LD_VAR 0 1
58880: PUSH
58881: LD_INT 0
58883: LESS
58884: PUSH
58885: LD_VAR 0 1
58889: PUSH
58890: LD_INT 8
58892: GREATER
58893: OR
58894: PUSH
58895: LD_VAR 0 2
58899: PUSH
58900: LD_INT 0
58902: LESS
58903: OR
58904: PUSH
58905: LD_VAR 0 2
58909: PUSH
58910: LD_INT 8
58912: GREATER
58913: OR
58914: IFFALSE 58918
// exit ;
58916: GO 58993
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
58918: LD_ADDR_VAR 0 4
58922: PUSH
58923: LD_INT 22
58925: PUSH
58926: LD_VAR 0 2
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PPUSH
58935: CALL_OW 69
58939: PUSH
58940: FOR_IN
58941: IFFALSE 58991
// begin un := UnitShoot ( i ) ;
58943: LD_ADDR_VAR 0 5
58947: PUSH
58948: LD_VAR 0 4
58952: PPUSH
58953: CALL_OW 504
58957: ST_TO_ADDR
// if GetSide ( un ) = side1 then
58958: LD_VAR 0 5
58962: PPUSH
58963: CALL_OW 255
58967: PUSH
58968: LD_VAR 0 1
58972: EQUAL
58973: IFFALSE 58989
// begin result := un ;
58975: LD_ADDR_VAR 0 3
58979: PUSH
58980: LD_VAR 0 5
58984: ST_TO_ADDR
// exit ;
58985: POP
58986: POP
58987: GO 58993
// end ; end ;
58989: GO 58940
58991: POP
58992: POP
// end ;
58993: LD_VAR 0 3
58997: RET
// export function GetCargoBay ( units ) ; begin
58998: LD_INT 0
59000: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59001: LD_ADDR_VAR 0 2
59005: PUSH
59006: LD_VAR 0 1
59010: PPUSH
59011: LD_INT 2
59013: PUSH
59014: LD_INT 34
59016: PUSH
59017: LD_INT 12
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 34
59026: PUSH
59027: LD_INT 51
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 34
59036: PUSH
59037: LD_INT 32
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 34
59046: PUSH
59047: LD_EXP 40
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: PPUSH
59063: CALL_OW 72
59067: ST_TO_ADDR
// end ;
59068: LD_VAR 0 2
59072: RET
